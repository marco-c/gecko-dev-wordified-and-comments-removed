"
use
strict
"
;
add_task
(
async
function
test_providers
(
)
{
Assert
.
throws
(
(
)
=
>
UrlbarProvidersManager
.
registerProvider
(
)
/
invalid
provider
/
"
Should
throw
with
no
arguments
"
)
;
Assert
.
throws
(
(
)
=
>
UrlbarProvidersManager
.
registerProvider
(
{
}
)
/
invalid
provider
/
"
Should
throw
with
empty
object
"
)
;
Assert
.
throws
(
(
)
=
>
UrlbarProvidersManager
.
registerProvider
(
{
name
:
"
"
}
)
/
invalid
provider
/
"
Should
throw
with
empty
name
"
)
;
Assert
.
throws
(
(
)
=
>
UrlbarProvidersManager
.
registerProvider
(
{
name
:
"
test
"
startQuery
:
"
no
"
}
)
/
invalid
provider
/
"
Should
throw
with
invalid
startQuery
"
)
;
Assert
.
throws
(
(
)
=
>
UrlbarProvidersManager
.
registerProvider
(
{
name
:
"
test
"
startQuery
:
(
)
=
>
{
}
cancelQuery
:
"
no
"
}
)
/
invalid
provider
/
"
Should
throw
with
invalid
cancelQuery
"
)
;
let
match
=
new
UrlbarResult
(
UrlbarUtils
.
MATCH_TYPE
.
TAB_SWITCH
UrlbarUtils
.
MATCH_SOURCE
.
TABS
{
url
:
"
http
:
/
/
mozilla
.
org
/
foo
/
"
}
)
;
let
providerName
=
registerBasicTestProvider
(
[
match
]
)
;
let
context
=
createContext
(
undefined
{
providers
:
[
providerName
]
}
)
;
let
controller
=
new
UrlbarController
(
{
browserWindow
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
)
;
let
resultsPromise
=
promiseControllerNotification
(
controller
"
onQueryResults
"
)
;
await
UrlbarProvidersManager
.
startQuery
(
context
controller
)
;
UrlbarProvidersManager
.
cancelQuery
(
context
)
;
let
params
=
await
resultsPromise
;
Assert
.
deepEqual
(
params
[
0
]
.
results
[
match
]
)
;
}
)
;
add_task
(
async
function
test_criticalSection
(
)
{
await
UrlbarProvidersManager
.
runInCriticalSection
(
async
(
)
=
>
{
let
db
=
await
PlacesUtils
.
promiseLargeCacheDBConnection
(
)
;
await
db
.
execute
(
PRAGMA
page_cache
)
;
}
)
;
}
)
;
