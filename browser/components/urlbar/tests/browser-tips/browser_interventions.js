"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
UrlbarProviderInterventions
:
"
resource
:
/
/
/
modules
/
UrlbarProviderInterventions
.
jsm
"
}
)
;
add_task
(
async
function
init
(
)
{
makeProfileResettable
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update1
.
interventions
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
refresh
(
)
{
await
checkIntervention
(
{
searchString
:
SEARCH_STRINGS
.
REFRESH
tip
:
UrlbarProviderInterventions
.
TIP_TYPE
.
REFRESH
title
:
"
Restore
default
settings
and
remove
old
add
-
ons
for
optimal
performance
.
"
button
:
/
^
Refresh
.
+
/
awaitCallback
(
)
{
return
promiseAlertDialog
(
"
cancel
"
[
"
chrome
:
/
/
global
/
content
/
resetProfile
.
xhtml
"
"
chrome
:
/
/
global
/
content
/
resetProfile
.
xul
"
]
)
;
}
}
)
;
}
)
;
add_task
(
async
function
clear
(
)
{
await
checkIntervention
(
{
searchString
:
SEARCH_STRINGS
.
CLEAR
tip
:
UrlbarProviderInterventions
.
TIP_TYPE
.
CLEAR
title
:
"
Clear
your
cache
cookies
history
and
more
.
"
button
:
"
Choose
What
to
Clear
"
awaitCallback
(
)
{
return
promiseAlertDialog
(
"
cancel
"
[
"
chrome
:
/
/
browser
/
content
/
sanitize
.
xhtml
"
"
chrome
:
/
/
browser
/
content
/
sanitize
.
xul
"
]
)
;
}
}
)
;
}
)
;
add_task
(
async
function
clear_private
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
let
result
=
(
await
awaitTip
(
SEARCH_STRINGS
.
REFRESH
win
)
)
[
0
]
;
Assert
.
strictEqual
(
result
.
payload
.
type
UrlbarProviderInterventions
.
TIP_TYPE
.
REFRESH
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
(
)
=
>
win
.
gURLBar
.
blur
(
)
)
;
await
awaitNoTip
(
SEARCH_STRINGS
.
CLEAR
win
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
(
)
=
>
win
.
gURLBar
.
blur
(
)
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
multipleInterventionsInOneEngagement
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
let
result
=
(
await
awaitTip
(
SEARCH_STRINGS
.
REFRESH
window
)
)
[
0
]
;
Assert
.
strictEqual
(
result
.
payload
.
type
UrlbarProviderInterventions
.
TIP_TYPE
.
REFRESH
)
;
result
=
(
await
awaitTip
(
SEARCH_STRINGS
.
CLEAR
window
)
)
[
0
]
;
Assert
.
strictEqual
(
result
.
payload
.
type
UrlbarProviderInterventions
.
TIP_TYPE
.
CLEAR
)
;
result
=
(
await
awaitTip
(
SEARCH_STRINGS
.
REFRESH
window
)
)
[
0
]
;
Assert
.
strictEqual
(
result
.
payload
.
type
UrlbarProviderInterventions
.
TIP_TYPE
.
REFRESH
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
window
.
gURLBar
.
blur
(
)
)
;
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
"
urlbar
.
tips
"
{
UrlbarProviderInterventions
.
TIP_TYPE
.
REFRESH
}
-
shown
1
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
"
urlbar
.
tips
"
{
UrlbarProviderInterventions
.
TIP_TYPE
.
CLEAR
}
-
shown
1
)
;
}
)
;
add_task
(
async
function
tipsAreEnglishOnly
(
)
{
let
result
=
(
await
awaitTip
(
SEARCH_STRINGS
.
REFRESH
window
)
)
[
0
]
;
Assert
.
strictEqual
(
result
.
payload
.
type
UrlbarProviderInterventions
.
TIP_TYPE
.
REFRESH
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
window
.
gURLBar
.
blur
(
)
)
;
let
searchReinit
=
SearchTestUtils
.
promiseSearchNotification
(
"
reinit
-
complete
"
)
;
const
originalAvailable
=
Services
.
locale
.
availableLocales
;
const
originalRequested
=
Services
.
locale
.
requestedLocales
;
Services
.
locale
.
availableLocales
=
[
"
en
-
US
"
"
de
"
]
;
Services
.
locale
.
requestedLocales
=
[
"
de
"
]
;
registerCleanupFunction
(
async
(
)
=
>
{
let
searchReinit2
=
SearchTestUtils
.
promiseSearchNotification
(
"
reinit
-
complete
"
)
;
Services
.
locale
.
requestedLocales
=
originalRequested
;
Services
.
locale
.
availableLocales
=
originalAvailable
;
await
searchReinit2
;
}
)
;
let
appLocales
=
Services
.
locale
.
appLocalesAsBCP47
;
Assert
.
equal
(
appLocales
[
0
]
"
de
"
)
;
await
searchReinit
;
await
awaitNoTip
(
SEARCH_STRINGS
.
CLEAR
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
window
.
gURLBar
.
blur
(
)
)
;
}
)
;
add_task
(
async
function
pickHelpButton
(
)
{
const
helpUrl
=
"
http
:
/
/
example
.
com
/
"
;
let
results
=
[
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
{
url
:
"
http
:
/
/
mozilla
.
org
/
a
"
}
)
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
TIP
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
type
:
UrlbarProviderInterventions
.
TIP_TYPE
.
CLEAR
text
:
"
This
is
a
test
tip
.
"
buttonText
:
"
Done
"
helpUrl
}
)
]
;
let
interventionProvider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
priority
:
2
}
)
;
UrlbarProvidersManager
.
registerProvider
(
interventionProvider
)
;
registerCleanupFunction
(
(
)
=
>
{
UrlbarProvidersManager
.
unregisterProvider
(
interventionProvider
)
;
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
let
[
result
element
]
=
await
awaitTip
(
SEARCH_STRINGS
.
CLEAR
)
;
Assert
.
strictEqual
(
result
.
payload
.
type
UrlbarProviderInterventions
.
TIP_TYPE
.
CLEAR
)
;
let
helpButton
=
element
.
_elements
.
get
(
"
helpButton
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
helpButton
)
)
;
EventUtils
.
synthesizeMouseAtCenter
(
helpButton
{
}
)
;
await
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
helpUrl
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
"
urlbar
.
tips
"
{
UrlbarProviderInterventions
.
TIP_TYPE
.
CLEAR
}
-
help
1
)
;
}
)
;
}
)
;
