"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AppMenuNotifications
:
"
resource
:
/
/
gre
/
modules
/
AppMenuNotifications
.
sys
.
mjs
"
HttpServer
:
"
resource
:
/
/
testing
-
common
/
httpd
.
sys
.
mjs
"
UrlbarPrefs
:
"
moz
-
src
:
/
/
/
browser
/
components
/
urlbar
/
UrlbarPrefs
.
sys
.
mjs
"
UrlbarProviderSearchTips
:
"
moz
-
src
:
/
/
/
browser
/
components
/
urlbar
/
UrlbarProviderSearchTips
.
sys
.
mjs
"
UrlbarUtils
:
"
moz
-
src
:
/
/
/
browser
/
components
/
urlbar
/
UrlbarUtils
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
clipboardHelper
"
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
"
nsIClipboardHelper
"
)
;
const
MAX_SHOWN_COUNT
=
4
;
const
LAST_UPDATE_THRESHOLD_MS
=
24
*
60
*
60
*
1000
;
const
GOOGLE_DOMAINS
=
[
"
www
.
google
.
com
"
"
www
.
google
.
ca
"
"
www
.
google
.
co
.
uk
"
"
www
.
google
.
com
.
au
"
"
www
.
google
.
co
.
nz
"
]
;
add_setup
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
browser
.
urlbar
.
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
}
0
]
[
browser
.
urlbar
.
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
}
0
]
[
"
browser
.
laterrun
.
bookkeeping
.
profileCreationTime
"
0
]
[
"
browser
.
laterrun
.
bookkeeping
.
updateAppliedTime
"
0
]
]
}
)
;
let
updateRootDir
=
Services
.
dirsvc
.
get
(
"
UpdRootD
"
Ci
.
nsIFile
)
;
let
updatesFile
=
updateRootDir
.
clone
(
)
;
updatesFile
.
append
(
"
updates
.
xml
"
)
;
let
activeUpdateFile
=
updateRootDir
.
clone
(
)
;
activeUpdateFile
.
append
(
"
active
-
update
.
xml
"
)
;
try
{
updatesFile
.
remove
(
false
)
;
}
catch
(
e
)
{
}
try
{
activeUpdateFile
.
remove
(
false
)
;
}
catch
(
e
)
{
}
let
defaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
let
defaultEngineName
=
defaultEngine
.
name
;
Assert
.
equal
(
defaultEngineName
"
Google
"
"
Default
engine
should
be
Google
.
"
)
;
await
SearchTestUtils
.
installSearchExtension
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
setDefaultEngine
(
defaultEngineName
)
;
resetSearchTipsProvider
(
)
;
}
)
;
}
)
;
add_task
(
async
function
pickButton_onboard
(
)
{
UrlbarProviderSearchTips
.
disableTipsForCurrentSession
=
false
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
about
:
newtab
"
waitForLoad
:
false
}
)
;
await
checkTip
(
window
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
false
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
let
button
=
result
.
element
.
row
.
_buttons
.
get
(
"
0
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
)
;
}
)
;
gURLBar
.
blur
(
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
}
)
MAX_SHOWN_COUNT
"
Onboarding
tips
are
disabled
after
tip
button
is
picked
.
"
)
;
Assert
.
equal
(
gURLBar
.
value
"
"
"
The
Urlbar
should
be
empty
.
"
)
;
resetSearchTipsProvider
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
pickButton_redirect
(
)
{
UrlbarProviderSearchTips
.
disableTipsForCurrentSession
=
false
;
await
setDefaultEngine
(
"
Google
"
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
withDNSRedirect
(
"
www
.
google
.
com
"
"
/
"
async
url
=
>
{
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
checkTip
(
window
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
false
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
let
button
=
result
.
element
.
row
.
_buttons
.
get
(
"
0
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
)
;
}
)
;
gURLBar
.
blur
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
}
)
MAX_SHOWN_COUNT
"
Redirect
tips
are
disabled
after
tip
button
is
picked
.
"
)
;
Assert
.
equal
(
gURLBar
.
value
"
"
"
The
Urlbar
should
be
empty
.
"
)
;
resetSearchTipsProvider
(
)
;
}
)
;
add_task
(
async
function
clickInInput_onboard
(
)
{
UrlbarProviderSearchTips
.
disableTipsForCurrentSession
=
false
;
await
setDefaultEngine
(
"
Google
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
about
:
newtab
"
waitForLoad
:
false
}
)
;
await
checkTip
(
window
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
false
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
textbox
.
parentNode
{
}
)
;
}
)
;
gURLBar
.
blur
(
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
}
)
MAX_SHOWN_COUNT
"
Onboarding
tips
are
disabled
after
tip
button
is
picked
.
"
)
;
Assert
.
equal
(
gURLBar
.
value
"
"
"
The
Urlbar
should
be
empty
.
"
)
;
resetSearchTipsProvider
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
openLocation_onboard
(
)
{
UrlbarProviderSearchTips
.
disableTipsForCurrentSession
=
false
;
await
setDefaultEngine
(
"
Google
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
about
:
newtab
"
waitForLoad
:
false
}
)
;
await
checkTip
(
window
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
false
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
document
.
getElementById
(
"
Browser
:
OpenLocation
"
)
.
doCommand
(
)
;
}
)
;
gURLBar
.
blur
(
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
}
)
MAX_SHOWN_COUNT
"
Onboarding
tips
are
disabled
after
tip
button
is
picked
.
"
)
;
Assert
.
equal
(
gURLBar
.
value
"
"
"
The
Urlbar
should
be
empty
.
"
)
;
resetSearchTipsProvider
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
clickInInput_redirect
(
)
{
UrlbarProviderSearchTips
.
disableTipsForCurrentSession
=
false
;
await
setDefaultEngine
(
"
Google
"
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
withDNSRedirect
(
"
www
.
google
.
com
"
"
/
"
async
url
=
>
{
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
checkTip
(
window
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
false
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
textbox
.
parentNode
{
}
)
;
}
)
;
gURLBar
.
blur
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
}
)
MAX_SHOWN_COUNT
"
Redirect
tips
are
disabled
after
tip
button
is
picked
.
"
)
;
Assert
.
equal
(
gURLBar
.
value
"
"
"
The
Urlbar
should
be
empty
.
"
)
;
resetSearchTipsProvider
(
)
;
}
)
;
add_task
(
async
function
openLocation_redirect
(
)
{
UrlbarProviderSearchTips
.
disableTipsForCurrentSession
=
false
;
await
setDefaultEngine
(
"
Google
"
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
withDNSRedirect
(
"
www
.
google
.
com
"
"
/
"
async
url
=
>
{
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
checkTip
(
window
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
false
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
document
.
getElementById
(
"
Browser
:
OpenLocation
"
)
.
doCommand
(
)
;
}
)
;
gURLBar
.
blur
(
)
;
}
)
;
}
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
}
)
MAX_SHOWN_COUNT
"
Redirect
tips
are
disabled
after
tip
button
is
picked
.
"
)
;
Assert
.
equal
(
gURLBar
.
value
"
"
"
The
Urlbar
should
be
empty
.
"
)
;
resetSearchTipsProvider
(
)
;
}
)
;
add_task
(
async
function
pickingTipDoesNotDisableOtherKinds
(
)
{
UrlbarProviderSearchTips
.
disableTipsForCurrentSession
=
false
;
await
setDefaultEngine
(
"
Google
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
about
:
newtab
"
waitForLoad
:
false
}
)
;
await
checkTip
(
window
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
false
)
;
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
let
button
=
result
.
element
.
row
.
_buttons
.
get
(
"
0
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
button
{
}
)
;
}
)
;
gURLBar
.
blur
(
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
}
)
MAX_SHOWN_COUNT
"
Onboarding
tips
are
disabled
after
tip
button
is
picked
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
UrlbarProviderSearchTips
.
disableTipsForCurrentSession
=
false
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
about
:
newtab
"
waitForLoad
:
false
}
)
;
await
checkTip
(
window
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
await
withDNSRedirect
(
"
www
.
google
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
resetSearchTipsProvider
(
)
;
}
)
;
add_task
(
async
function
notification
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
let
box
=
gBrowser
.
getNotificationBox
(
)
;
let
note
=
await
box
.
appendNotification
(
"
urlbar
-
test
"
{
label
:
"
Test
"
priority
:
box
.
PRIORITY_INFO_HIGH
}
)
;
note
.
persistence
=
100
;
await
withDNSRedirect
(
"
www
.
google
.
com
"
"
/
"
async
url
=
>
{
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
checkTip
(
window
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
box
.
removeNotification
(
note
true
)
;
}
)
;
}
)
;
resetSearchTipsProvider
(
)
;
}
)
;
add_task
(
async
function
tabSwitch
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
newtab
"
)
;
UrlbarProviderSearchTips
.
disableTipsForCurrentSession
=
false
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
await
checkTip
(
window
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
resetSearchTipsProvider
(
)
;
}
)
;
add_task
(
async
function
ignoreEndsEngagement
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
withDNSRedirect
(
"
www
.
google
.
com
"
"
/
"
async
url
=
>
{
BrowserTestUtils
.
startLoadingURIString
(
gBrowser
.
selectedBrowser
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
checkTip
(
window
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
false
)
;
let
spring
=
gURLBar
.
inputField
.
closest
(
"
#
nav
-
bar
"
)
.
querySelector
(
"
toolbarspring
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
async
(
)
=
>
{
AccessibilityUtils
.
setEnv
(
{
mustHaveAccessibleRule
:
false
}
)
;
await
EventUtils
.
synthesizeMouseAtCenter
(
spring
{
}
)
;
AccessibilityUtils
.
resetEnv
(
)
;
}
)
;
Assert
.
equal
(
UrlbarProviderSearchTips
.
showedTipTypeInCurrentEngagement
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
"
The
engagement
should
have
ended
after
the
tip
was
ignored
.
"
)
;
}
)
;
}
)
;
resetSearchTipsProvider
(
)
;
}
)
;
add_task
(
async
function
pasteAndGo_url
(
)
{
await
doPasteAndGoTest
(
"
http
:
/
/
example
.
com
/
"
"
http
:
/
/
example
.
com
/
"
)
;
}
)
;
add_task
(
async
function
pasteAndGo_nonURL
(
)
{
await
setDefaultEngine
(
"
Example
"
)
;
await
doPasteAndGoTest
(
"
pasteAndGo_nonURL
"
"
https
:
/
/
example
.
com
/
?
q
=
pasteAndGo_nonURL
"
)
;
await
setDefaultEngine
(
"
Google
"
)
;
}
)
;
async
function
doPasteAndGoTest
(
searchString
expectedURL
)
{
UrlbarProviderSearchTips
.
disableTipsForCurrentSession
=
false
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
about
:
newtab
"
waitForLoad
:
false
}
)
;
await
checkTip
(
window
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
false
)
;
await
SimpleTest
.
promiseClipboardChange
(
searchString
(
)
=
>
{
clipboardHelper
.
copyString
(
searchString
)
;
}
)
;
let
textBox
=
gURLBar
.
querySelector
(
"
moz
-
input
-
box
"
)
;
let
cxmenu
=
textBox
.
menupopup
;
let
cxmenuPromise
=
BrowserTestUtils
.
waitForEvent
(
cxmenu
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
cxmenuPromise
;
let
menuitem
=
textBox
.
getMenuItem
(
"
paste
-
and
-
go
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
false
expectedURL
)
;
cxmenu
.
activateItem
(
menuitem
)
;
await
browserLoadedPromise
;
BrowserTestUtils
.
removeTab
(
tab
)
;
resetSearchTipsProvider
(
)
;
}
add_task
(
async
function
noActionWhenDisabled
(
)
{
await
setDefaultEngine
(
"
Bing
"
)
;
await
withDNSRedirect
(
"
www
.
bing
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtabpage
.
activity
-
stream
.
asrouter
.
userprefs
.
cfr
.
features
"
false
]
]
}
)
;
await
withDNSRedirect
(
"
www
.
bing
.
com
"
"
/
"
async
(
)
=
>
{
Assert
.
ok
(
!
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
The
UrlbarView
should
not
be
open
.
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
