"
use
strict
"
;
const
TIP_URL
=
"
http
:
/
/
example
.
com
/
tip
"
;
const
HELP_URL
=
"
http
:
/
/
example
.
com
/
help
"
;
add_setup
(
async
function
(
)
{
window
.
windowUtils
.
disableNonTestMouseEvents
(
true
)
;
registerCleanupFunction
(
(
)
=
>
{
window
.
windowUtils
.
disableNonTestMouseEvents
(
false
)
;
}
)
;
}
)
;
add_task
(
async
function
enter_mainButton_url
(
)
{
await
doTest
(
{
click
:
false
buttonUrl
:
TIP_URL
}
)
;
}
)
;
add_task
(
async
function
enter_mainButton_noURL
(
)
{
await
doTest
(
{
click
:
false
}
)
;
}
)
;
add_task
(
async
function
enter_help
(
)
{
await
doTest
(
{
click
:
false
helpUrl
:
HELP_URL
}
)
;
}
)
;
add_task
(
async
function
mouse_mainButton_url
(
)
{
await
doTest
(
{
click
:
true
buttonUrl
:
TIP_URL
}
)
;
}
)
;
add_task
(
async
function
mouse_mainButton_noURL
(
)
{
await
doTest
(
{
click
:
true
}
)
;
}
)
;
add_task
(
async
function
mouse_help
(
)
{
await
doTest
(
{
click
:
true
helpUrl
:
HELP_URL
}
)
;
}
)
;
add_task
(
async
function
mouse_insideTipButNotOnButtons
(
)
{
let
results
=
[
makeTipResult
(
{
buttonUrl
:
TIP_URL
helpUrl
:
HELP_URL
}
)
]
;
let
provider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
priority
:
1
}
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
results
[
0
]
.
heuristic
=
true
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
value
:
"
test
"
window
fireInputEvent
:
true
}
)
;
let
row
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
0
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElementIndex
(
window
)
0
"
The
main
button
'
s
index
should
be
selected
initially
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElement
(
window
)
row
.
_buttons
.
get
(
"
0
"
)
"
The
main
button
element
should
be
selected
initially
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
row
{
}
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
500
)
)
;
Assert
.
ok
(
gURLBar
.
view
.
isOpen
"
The
view
should
remain
open
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElementIndex
(
window
)
0
"
The
main
button
'
s
index
should
remain
selected
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElement
(
window
)
row
.
_buttons
.
get
(
"
0
"
)
"
The
main
button
element
should
remain
selected
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
}
)
;
async
function
doTest
(
{
click
buttonUrl
=
undefined
helpUrl
=
undefined
}
)
{
let
tab
;
if
(
buttonUrl
|
|
helpUrl
)
{
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
about
:
blank
"
}
)
;
}
const
deferred
=
Promise
.
withResolvers
(
)
;
let
provider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
makeTipResult
(
{
buttonUrl
helpUrl
}
)
]
priority
:
1
onEngagement
:
(
)
=
>
deferred
.
resolve
(
)
}
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
value
:
"
test
"
window
fireInputEvent
:
true
}
)
;
let
row
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
0
)
;
let
mainButton
=
row
.
_buttons
.
get
(
"
0
"
)
;
let
target
=
helpUrl
?
row
.
_buttons
.
get
(
"
menu
"
)
:
mainButton
;
if
(
!
click
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
repeat
:
helpUrl
?
2
:
1
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElement
(
window
)
target
{
target
.
className
}
should
be
selected
.
)
;
}
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
if
(
tab
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
function
makeTipResult
(
{
buttonUrl
helpUrl
}
)
{
return
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
TIP
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
type
:
"
test
"
titleL10n
:
{
id
:
"
urlbar
-
search
-
tips
-
confirm
"
}
buttons
:
[
{
url
:
buttonUrl
l10n
:
{
id
:
"
urlbar
-
search
-
tips
-
confirm
"
}
}
]
helpUrl
helpL10n
:
{
id
:
"
urlbar
-
result
-
menu
-
tip
-
get
-
help
"
}
}
)
;
}
