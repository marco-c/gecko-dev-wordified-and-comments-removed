"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AppMenuNotifications
:
"
resource
:
/
/
gre
/
modules
/
AppMenuNotifications
.
sys
.
mjs
"
HttpServer
:
"
resource
:
/
/
testing
-
common
/
httpd
.
sys
.
mjs
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
sys
.
mjs
"
UrlbarProviderSearchTips
:
"
resource
:
/
/
/
modules
/
UrlbarProviderSearchTips
.
sys
.
mjs
"
}
)
;
const
MAX_SHOWN_COUNT
=
4
;
const
LAST_UPDATE_THRESHOLD_MS
=
24
*
60
*
60
*
1000
;
const
GOOGLE_DOMAINS
=
[
"
www
.
google
.
com
"
"
www
.
google
.
ca
"
"
www
.
google
.
co
.
uk
"
"
www
.
google
.
com
.
au
"
"
www
.
google
.
co
.
nz
"
]
;
add_setup
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
browser
.
urlbar
.
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
}
0
]
[
browser
.
urlbar
.
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
}
0
]
[
"
browser
.
laterrun
.
bookkeeping
.
profileCreationTime
"
0
]
[
"
browser
.
laterrun
.
bookkeeping
.
updateAppliedTime
"
0
]
[
"
browser
.
urlbar
.
scotchBonnet
.
enableOverride
"
false
]
]
}
)
;
let
updateRootDir
=
Services
.
dirsvc
.
get
(
"
UpdRootD
"
Ci
.
nsIFile
)
;
let
updatesFile
=
updateRootDir
.
clone
(
)
;
updatesFile
.
append
(
"
updates
.
xml
"
)
;
let
activeUpdateFile
=
updateRootDir
.
clone
(
)
;
activeUpdateFile
.
append
(
"
active
-
update
.
xml
"
)
;
try
{
updatesFile
.
remove
(
false
)
;
}
catch
(
e
)
{
}
try
{
activeUpdateFile
.
remove
(
false
)
;
}
catch
(
e
)
{
}
let
defaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
let
defaultEngineName
=
defaultEngine
.
name
;
Assert
.
equal
(
defaultEngineName
"
Google
"
"
Default
engine
should
be
Google
.
"
)
;
await
SearchTestUtils
.
installSearchExtension
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
setDefaultEngine
(
defaultEngineName
)
;
resetSearchTipsProvider
(
)
;
}
)
;
}
)
;
add_task
(
async
function
newtab
(
)
{
await
checkTab
(
window
"
about
:
newtab
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
)
;
}
)
;
add_task
(
async
function
home
(
)
{
await
checkTab
(
window
"
about
:
home
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
)
;
}
)
;
add_task
(
async
function
google
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
for
(
let
domain
of
GOOGLE_DOMAINS
)
{
await
withDNSRedirect
(
domain
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
}
)
;
add_task
(
async
function
googleWebhp
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
for
(
let
domain
of
GOOGLE_DOMAINS
)
{
await
withDNSRedirect
(
domain
"
/
webhp
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
}
)
;
add_task
(
async
function
googleQueryString
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
for
(
let
domain
of
GOOGLE_DOMAINS
)
{
await
withDNSRedirect
(
domain
"
/
webhp
"
async
url
=
>
{
await
checkTab
(
window
{
url
}
?
hl
=
en
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
}
)
;
add_task
(
async
function
googleResults
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
for
(
let
domain
of
GOOGLE_DOMAINS
)
{
await
withDNSRedirect
(
domain
"
/
search
"
async
url
=
>
{
await
checkTab
(
window
{
url
}
?
q
=
firefox
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
}
)
;
add_task
(
async
function
googleNotDefault
(
)
{
await
setDefaultEngine
(
"
Bing
"
)
;
for
(
let
domain
of
GOOGLE_DOMAINS
)
{
await
withDNSRedirect
(
domain
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
}
)
;
add_task
(
async
function
googleWebhpNotDefault
(
)
{
await
setDefaultEngine
(
"
Bing
"
)
;
for
(
let
domain
of
GOOGLE_DOMAINS
)
{
await
withDNSRedirect
(
domain
"
/
webhp
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
}
)
;
add_task
(
async
function
bing
(
)
{
await
setDefaultEngine
(
"
Bing
"
)
;
await
withDNSRedirect
(
"
www
.
bing
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
)
;
add_task
(
async
function
bingQueryString
(
)
{
await
setDefaultEngine
(
"
Bing
"
)
;
await
withDNSRedirect
(
"
www
.
bing
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
{
url
}
?
toWww
=
1
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
)
;
add_task
(
async
function
bingResults
(
)
{
await
setDefaultEngine
(
"
Bing
"
)
;
await
withDNSRedirect
(
"
www
.
bing
.
com
"
"
/
search
"
async
url
=
>
{
await
checkTab
(
window
{
url
}
?
q
=
firefox
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
)
;
add_task
(
async
function
bingNotDefault
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
await
withDNSRedirect
(
"
www
.
bing
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
)
;
add_task
(
async
function
ddg
(
)
{
await
setDefaultEngine
(
"
DuckDuckGo
"
)
;
await
withDNSRedirect
(
"
duckduckgo
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
)
;
add_task
(
async
function
ddgStart
(
)
{
await
setDefaultEngine
(
"
DuckDuckGo
"
)
;
await
withDNSRedirect
(
"
start
.
duckduckgo
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
)
;
add_task
(
async
function
ddgNotDefault
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
await
withDNSRedirect
(
"
duckduckgo
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
)
;
add_task
(
async
function
ddgStartNotDefault
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
await
withDNSRedirect
(
"
start
.
duckduckgo
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
)
;
add_task
(
async
function
ddgSearchResultsPage
(
)
{
await
setDefaultEngine
(
"
DuckDuckGo
"
)
;
await
withDNSRedirect
(
"
duckduckgo
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
{
url
}
?
q
=
test
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
)
;
add_task
(
async
function
nonEnginePage
(
)
{
await
checkTab
(
window
"
http
:
/
/
example
.
com
/
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
add_task
(
async
function
oncePerSession
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
await
checkTab
(
window
"
about
:
newtab
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
false
)
;
await
checkTab
(
window
"
about
:
newtab
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
false
)
;
await
withDNSRedirect
(
"
www
.
google
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
)
;
add_task
(
async
function
shortcut_buttons_with_tip
(
)
{
await
checkTab
(
window
"
about
:
newtab
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
)
;
}
)
;
function
waitForBrowserWindowActive
(
win
)
{
return
new
Promise
(
resolve
=
>
{
if
(
Services
.
focus
.
activeWindow
=
=
win
)
{
resolve
(
)
;
}
else
{
win
.
addEventListener
(
"
activate
"
(
)
=
>
{
resolve
(
)
;
}
{
once
:
true
}
)
;
}
}
)
;
}
