"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AppMenuNotifications
:
"
resource
:
/
/
gre
/
modules
/
AppMenuNotifications
.
sys
.
mjs
"
ProfileAge
:
"
resource
:
/
/
gre
/
modules
/
ProfileAge
.
sys
.
mjs
"
PromiseUtils
:
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
sys
.
mjs
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
sys
.
mjs
"
UrlbarProviderSearchTips
:
"
resource
:
/
/
/
modules
/
UrlbarProviderSearchTips
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
HttpServer
:
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
}
)
;
const
MAX_SHOWN_COUNT
=
4
;
const
LAST_UPDATE_THRESHOLD_MS
=
24
*
60
*
60
*
1000
;
const
GOOGLE_DOMAINS
=
[
"
www
.
google
.
com
"
"
www
.
google
.
ca
"
"
www
.
google
.
co
.
uk
"
"
www
.
google
.
com
.
au
"
"
www
.
google
.
co
.
nz
"
]
;
const
SEARCH_SERP_URL
=
"
https
:
/
/
example
.
com
/
?
q
=
chocolate
"
;
add_setup
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
browser
.
urlbar
.
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
}
0
]
[
browser
.
urlbar
.
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
PERSIST
}
0
]
[
browser
.
urlbar
.
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
}
0
]
]
}
)
;
let
age
=
await
ProfileAge
(
)
;
let
originalTimes
=
age
.
_times
;
let
date
=
Date
.
now
(
)
-
LAST_UPDATE_THRESHOLD_MS
-
30000
;
age
.
_times
=
{
created
:
date
firstUse
:
date
}
;
await
age
.
writeTimes
(
)
;
let
updateRootDir
=
Services
.
dirsvc
.
get
(
"
UpdRootD
"
Ci
.
nsIFile
)
;
let
updatesFile
=
updateRootDir
.
clone
(
)
;
updatesFile
.
append
(
"
updates
.
xml
"
)
;
let
activeUpdateFile
=
updateRootDir
.
clone
(
)
;
activeUpdateFile
.
append
(
"
active
-
update
.
xml
"
)
;
try
{
updatesFile
.
remove
(
false
)
;
}
catch
(
e
)
{
}
try
{
activeUpdateFile
.
remove
(
false
)
;
}
catch
(
e
)
{
}
let
defaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
let
defaultEngineName
=
defaultEngine
.
name
;
Assert
.
equal
(
defaultEngineName
"
Google
"
"
Default
engine
should
be
Google
.
"
)
;
await
SearchTestUtils
.
installSearchExtension
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
let
age2
=
await
ProfileAge
(
)
;
age2
.
_times
=
originalTimes
;
await
age2
.
writeTimes
(
)
;
await
setDefaultEngine
(
defaultEngineName
)
;
resetSearchTipsProvider
(
)
;
}
)
;
}
)
;
add_task
(
async
function
newtab
(
)
{
await
checkTab
(
window
"
about
:
newtab
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
)
;
}
)
;
add_task
(
async
function
home
(
)
{
await
checkTab
(
window
"
about
:
home
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
)
;
}
)
;
add_task
(
async
function
google
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
for
(
let
domain
of
GOOGLE_DOMAINS
)
{
await
withDNSRedirect
(
domain
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
}
)
;
add_task
(
async
function
googleWebhp
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
for
(
let
domain
of
GOOGLE_DOMAINS
)
{
await
withDNSRedirect
(
domain
"
/
webhp
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
}
)
;
add_task
(
async
function
googleQueryString
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
for
(
let
domain
of
GOOGLE_DOMAINS
)
{
await
withDNSRedirect
(
domain
"
/
webhp
"
async
url
=
>
{
await
checkTab
(
window
{
url
}
?
hl
=
en
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
}
)
;
add_task
(
async
function
googleResults
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
for
(
let
domain
of
GOOGLE_DOMAINS
)
{
await
withDNSRedirect
(
domain
"
/
search
"
async
url
=
>
{
await
checkTab
(
window
{
url
}
?
q
=
firefox
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
}
)
;
add_task
(
async
function
googleNotDefault
(
)
{
await
setDefaultEngine
(
"
Bing
"
)
;
for
(
let
domain
of
GOOGLE_DOMAINS
)
{
await
withDNSRedirect
(
domain
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
}
)
;
add_task
(
async
function
googleWebhpNotDefault
(
)
{
await
setDefaultEngine
(
"
Bing
"
)
;
for
(
let
domain
of
GOOGLE_DOMAINS
)
{
await
withDNSRedirect
(
domain
"
/
webhp
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
}
)
;
add_task
(
async
function
bing
(
)
{
await
setDefaultEngine
(
"
Bing
"
)
;
await
withDNSRedirect
(
"
www
.
bing
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
)
;
add_task
(
async
function
bingQueryString
(
)
{
await
setDefaultEngine
(
"
Bing
"
)
;
await
withDNSRedirect
(
"
www
.
bing
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
{
url
}
?
toWww
=
1
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
)
;
add_task
(
async
function
bingResults
(
)
{
await
setDefaultEngine
(
"
Bing
"
)
;
await
withDNSRedirect
(
"
www
.
bing
.
com
"
"
/
search
"
async
url
=
>
{
await
checkTab
(
window
{
url
}
?
q
=
firefox
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
)
;
add_task
(
async
function
bingNotDefault
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
await
withDNSRedirect
(
"
www
.
bing
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
)
;
add_task
(
async
function
ddg
(
)
{
await
setDefaultEngine
(
"
DuckDuckGo
"
)
;
await
withDNSRedirect
(
"
duckduckgo
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
)
;
add_task
(
async
function
ddgStart
(
)
{
await
setDefaultEngine
(
"
DuckDuckGo
"
)
;
await
withDNSRedirect
(
"
start
.
duckduckgo
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
REDIRECT
)
;
}
)
;
}
)
;
add_task
(
async
function
ddgNotDefault
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
await
withDNSRedirect
(
"
duckduckgo
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
)
;
add_task
(
async
function
ddgStartNotDefault
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
await
withDNSRedirect
(
"
start
.
duckduckgo
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
)
;
add_task
(
async
function
ddgSearchResultsPage
(
)
{
await
setDefaultEngine
(
"
DuckDuckGo
"
)
;
await
withDNSRedirect
(
"
duckduckgo
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
{
url
}
?
q
=
test
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
}
)
;
add_task
(
async
function
nonEnginePage
(
)
{
await
checkTab
(
window
"
http
:
/
/
example
.
com
/
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
add_task
(
async
function
persistTipOnDefault
(
)
{
await
setDefaultEngine
(
"
Example
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
true
]
]
}
)
;
await
checkTab
(
window
SEARCH_SERP_URL
UrlbarProviderSearchTips
.
TIP_TYPE
.
PERSIST
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
noPersistTipOnNonDefault
(
)
{
await
setDefaultEngine
(
"
DuckDuckGo
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
true
]
]
}
)
;
await
checkTab
(
window
SEARCH_SERP_URL
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
persistTipOnceOnDefaultSerp
(
)
{
await
setDefaultEngine
(
"
Example
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
true
]
]
}
)
;
await
checkTab
(
window
SEARCH_SERP_URL
UrlbarProviderSearchTips
.
TIP_TYPE
.
PERSIST
)
;
await
checkTab
(
window
SEARCH_SERP_URL
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
noPersistTipInWindowWithNonSerpTab
(
)
{
await
setDefaultEngine
(
"
Example
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
true
]
]
}
)
;
let
newWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
window
.
focus
(
)
;
await
waitForBrowserWindowActive
(
window
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
newWindow
.
gBrowser
.
selectedBrowser
false
SEARCH_SERP_URL
)
;
BrowserTestUtils
.
loadURI
(
newWindow
.
gBrowser
.
selectedBrowser
SEARCH_SERP_URL
)
;
await
browserLoadedPromise
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
UrlbarProviderSearchTips
.
SHOW_PERSIST_TIP_DELAY_MS
*
2
)
)
;
Assert
.
ok
(
!
window
.
gURLBar
.
view
.
isOpen
)
;
await
BrowserTestUtils
.
closeWindow
(
newWindow
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
resetSearchTipsProvider
(
)
;
}
)
;
add_task
(
async
function
oncePerSession
(
)
{
await
setDefaultEngine
(
"
Google
"
)
;
await
checkTab
(
window
"
about
:
newtab
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
false
)
;
await
checkTab
(
window
"
about
:
newtab
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
false
)
;
await
withDNSRedirect
(
"
www
.
google
.
com
"
"
/
"
async
url
=
>
{
await
checkTab
(
window
url
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
await
setDefaultEngine
(
"
Example
"
)
;
await
checkTab
(
window
SEARCH_SERP_URL
UrlbarProviderSearchTips
.
TIP_TYPE
.
NONE
)
;
}
)
;
add_task
(
async
function
shortcut_buttons_with_tip
(
)
{
await
checkTab
(
window
"
about
:
newtab
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
)
;
}
)
;
add_task
(
async
function
noSearchTipWhileAPageLoads
(
)
{
await
setDefaultEngine
(
"
Example
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchTerms
.
featureGate
"
true
]
]
}
)
;
const
SLOW_PAGE
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
www
.
example
.
com
"
)
+
"
slow
-
page
.
sjs
"
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
SEARCH_SERP_URL
}
)
;
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
SLOW_PAGE
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
UrlbarProviderSearchTips
.
SHOW_PERSIST_TIP_DELAY_MS
*
2
)
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
PERSIST
}
)
0
"
The
shownCount
pref
should
be
0
.
"
)
;
Assert
.
equal
(
false
window
.
gURLBar
.
view
.
isOpen
"
Urlbar
should
be
closed
.
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
resetSearchTipsProvider
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
function
waitForBrowserWindowActive
(
win
)
{
return
new
Promise
(
resolve
=
>
{
if
(
Services
.
focus
.
activeWindow
=
=
win
)
{
resolve
(
)
;
}
else
{
win
.
addEventListener
(
"
activate
"
(
)
=
>
{
resolve
(
)
;
}
{
once
:
true
}
)
;
}
}
)
;
}
