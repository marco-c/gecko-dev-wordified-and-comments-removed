"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
LaterRun
:
"
resource
:
/
/
/
modules
/
LaterRun
.
sys
.
mjs
"
UrlbarProviderSearchTips
:
"
resource
:
/
/
/
modules
/
UrlbarProviderSearchTips
.
sys
.
mjs
"
}
)
;
const
LAST_UPDATE_THRESHOLD_HOURS
=
24
;
add_setup
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
browser
.
urlbar
.
tipShownCount
.
{
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
}
0
]
]
}
)
;
registerCleanupFunction
(
(
)
=
>
{
resetSearchTipsProvider
(
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
laterrun
.
bookkeeping
.
profileCreationTime
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
laterrun
.
bookkeeping
.
updateAppliedTime
"
)
;
}
)
;
}
)
;
add_task
(
async
function
updateApplied
(
)
{
Assert
.
notEqual
(
Services
.
prefs
.
getIntPref
(
"
browser
.
laterrun
.
bookkeeping
.
updateAppliedTime
"
0
)
0
"
updateAppliedTime
pref
should
be
updated
when
booting
this
test
"
)
;
Assert
.
equal
(
LaterRun
.
hoursSinceUpdate
0
"
LaterRun
.
hoursSinceUpdate
is
0
since
one
hour
should
not
have
passed
from
starting
this
test
"
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
laterrun
.
bookkeeping
.
profileCreationTime
"
secondsBasedOnNow
(
LAST_UPDATE_THRESHOLD_HOURS
+
0
.
5
)
)
;
gBrowser
.
selectedTab
=
gBrowser
.
tabs
[
0
]
;
gBrowser
.
goBack
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
selectedBrowser
?
.
currentURI
?
.
spec
=
=
"
https
:
/
/
example
.
com
/
"
"
Waiting
for
the
expected
page
to
reopen
"
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
checkTab
(
window
"
about
:
newtab
"
)
;
const
alternatePath
=
Services
.
prefs
.
getCharPref
(
"
app
.
update
.
altUpdateDirPath
"
)
;
const
testRoot
=
Services
.
prefs
.
getCharPref
(
"
mochitest
.
testRoot
"
)
;
let
relativePath
=
alternatePath
.
substring
(
"
<
test
-
root
>
"
.
length
)
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
relativePath
=
relativePath
.
replace
(
/
\
/
/
g
"
\
\
"
)
;
}
const
updateDir
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
updateDir
.
initWithPath
(
testRoot
+
relativePath
)
;
const
updatesFile
=
updateDir
.
clone
(
)
;
updatesFile
.
append
(
"
updates
.
xml
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
updatesFile
.
exists
(
)
"
Waiting
until
the
updates
.
xml
file
exists
"
)
;
updatesFile
.
remove
(
false
)
;
}
)
;
add_task
(
async
function
profileAge
(
)
{
Services
.
prefs
.
setIntPref
(
"
browser
.
laterrun
.
bookkeeping
.
profileCreationTime
"
secondsBasedOnNow
(
LAST_UPDATE_THRESHOLD_HOURS
+
0
.
5
)
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
laterrun
.
bookkeeping
.
updateAppliedTime
"
secondsBasedOnNow
(
LAST_UPDATE_THRESHOLD_HOURS
+
0
.
5
)
)
;
await
checkTab
(
window
"
about
:
newtab
"
UrlbarProviderSearchTips
.
TIP_TYPE
.
ONBOARD
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
laterrun
.
bookkeeping
.
profileCreationTime
"
secondsBasedOnNow
(
)
)
;
await
checkTab
(
window
"
about
:
newtab
"
)
;
}
)
;
function
secondsBasedOnNow
(
howManyHoursAgo
=
0
)
{
return
Math
.
floor
(
Date
.
now
(
)
/
1000
-
howManyHoursAgo
*
60
*
60
)
;
}
