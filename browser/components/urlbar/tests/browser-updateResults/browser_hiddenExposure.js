"
use
strict
"
;
add_task
(
async
function
rowCanUpdateToResult
(
)
{
let
provider
=
new
UrlbarTestUtils
.
TestProvider
(
{
priority
:
Infinity
}
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
registerCleanupFunction
(
(
)
=
>
{
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
}
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
provider
.
results
.
push
(
new
UrlbarResult
(
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
payload
:
{
url
:
"
https
:
/
/
example
.
com
/
"
+
i
}
}
)
)
;
}
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test1
"
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
2
"
The
view
should
have
the
two
non
-
hidden
provider
results
"
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
let
details
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
Assert
.
equal
(
details
.
url
"
https
:
/
/
example
.
com
/
"
+
i
"
The
non
-
hidden
result
should
have
the
expected
URL
at
index
"
+
i
)
;
}
provider
.
results
=
[
new
UrlbarResult
(
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
exposureTelemetry
:
UrlbarUtils
.
EXPOSURE_TELEMETRY
.
HIDDEN
payload
:
{
url
:
"
https
:
/
/
example
.
com
/
hidden
-
exposure
"
}
}
)
]
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test2
"
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
0
"
The
view
should
be
empty
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
gURLBar
.
handleRevert
(
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
}
)
;
