"
use
strict
"
;
add_task
(
async
function
test
(
)
{
let
slowProvider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
]
priority
:
10
addTimeout
:
1000
}
)
;
let
firstProvider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
new
UrlbarResult
(
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
payload
:
{
url
:
"
https
:
/
/
mozilla
.
org
/
c
"
}
}
)
new
UrlbarResult
(
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
payload
:
{
url
:
"
https
:
/
/
mozilla
.
org
/
d
"
}
}
)
]
priority
:
10
}
)
;
let
secondProvider
=
new
UrlbarTestUtils
.
TestProvider
(
{
results
:
[
new
UrlbarResult
(
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
payload
:
{
url
:
"
https
:
/
/
mozilla
.
org
/
c
"
}
}
)
new
UrlbarResult
(
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
payload
:
{
url
:
"
https
:
/
/
mozilla
.
org
/
d
"
}
}
)
]
priority
:
10
}
)
;
UrlbarProvidersManager
.
registerProvider
(
slowProvider
)
;
UrlbarProvidersManager
.
registerProvider
(
firstProvider
)
;
function
cleanup
(
)
{
UrlbarProvidersManager
.
unregisterProvider
(
slowProvider
)
;
UrlbarProvidersManager
.
unregisterProvider
(
firstProvider
)
;
UrlbarProvidersManager
.
unregisterProvider
(
secondProvider
)
;
}
registerCleanupFunction
(
cleanup
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
moz
"
}
)
;
UrlbarProvidersManager
.
unregisterProvider
(
firstProvider
)
;
UrlbarProvidersManager
.
registerProvider
(
secondProvider
)
;
let
hasAtLeast4Children
=
BrowserTestUtils
.
waitForMutationCondition
(
UrlbarTestUtils
.
getResultsContainer
(
window
)
{
childList
:
true
}
(
)
=
>
UrlbarTestUtils
.
getResultCount
(
window
)
=
=
4
)
;
let
queryPromise
=
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
moz
"
}
)
;
await
hasAtLeast4Children
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
4
"
There
should
be
4
results
"
)
;
Assert
.
ok
(
UrlbarTestUtils
.
getRowAt
(
window
0
)
.
hasAttribute
(
"
stale
"
)
"
Should
be
stale
"
)
;
Assert
.
ok
(
UrlbarTestUtils
.
getRowAt
(
window
1
)
.
hasAttribute
(
"
stale
"
)
"
Should
be
stale
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
getRowAt
(
window
2
)
.
hasAttribute
(
"
stale
"
)
"
Should
not
be
stale
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
getRowAt
(
window
3
)
.
hasAttribute
(
"
stale
"
)
"
Should
not
be
stale
"
)
;
await
queryPromise
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
2
"
There
should
be
2
results
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
getRowAt
(
window
0
)
.
hasAttribute
(
"
stale
"
)
"
Should
not
be
stale
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
getRowAt
(
window
1
)
.
hasAttribute
(
"
stale
"
)
"
Should
not
be
stale
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
gURLBar
.
handleRevert
(
)
;
cleanup
(
)
;
}
)
;
