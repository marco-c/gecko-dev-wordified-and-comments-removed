"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
UrlbarTestUtils
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AddonTestUtils
:
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
BrowserTestUtils
:
"
resource
:
/
/
testing
-
common
/
BrowserTestUtils
.
jsm
"
BrowserUtils
:
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
FormHistory
:
"
resource
:
/
/
gre
/
modules
/
FormHistory
.
jsm
"
setTimeout
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
TestUtils
:
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
UrlbarController
:
"
resource
:
/
/
/
modules
/
UrlbarController
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
var
UrlbarTestUtils
=
{
init
(
scope
)
{
this
.
_testScope
=
scope
;
}
async
promiseSearchComplete
(
win
)
{
return
this
.
promisePopupOpen
(
win
(
)
=
>
{
}
)
.
then
(
(
)
=
>
win
.
gURLBar
.
lastQueryContextPromise
)
;
}
async
promiseAutocompleteResultPopup
(
{
window
value
waitForFocus
fireInputEvent
=
false
selectionStart
=
-
1
selectionEnd
=
-
1
}
=
{
}
)
{
if
(
this
.
_testScope
)
{
await
this
.
_testScope
.
SimpleTest
.
promiseFocus
(
window
)
;
}
else
{
await
new
Promise
(
resolve
=
>
waitForFocus
(
resolve
window
)
)
;
}
window
.
gURLBar
.
inputField
.
focus
(
)
;
if
(
UrlbarPrefs
.
get
(
"
trimURLs
"
)
&
&
value
!
=
BrowserUtils
.
trimURL
(
value
)
)
{
window
.
gURLBar
.
inputField
.
value
=
value
;
fireInputEvent
=
true
;
}
else
{
window
.
gURLBar
.
value
=
value
;
}
if
(
selectionStart
>
=
0
&
&
selectionEnd
>
=
0
)
{
window
.
gURLBar
.
selectionEnd
=
selectionEnd
;
window
.
gURLBar
.
selectionStart
=
selectionStart
;
}
if
(
fireInputEvent
)
{
this
.
fireInputEvent
(
window
)
;
}
else
{
window
.
gURLBar
.
setPageProxyState
(
"
invalid
"
)
;
window
.
gURLBar
.
startQuery
(
)
;
}
return
this
.
promiseSearchComplete
(
window
)
;
}
async
waitForAutocompleteResultAt
(
win
index
)
{
await
this
.
promiseSearchComplete
(
win
)
;
if
(
index
>
=
win
.
gURLBar
.
view
.
_rows
.
length
)
{
throw
new
Error
(
"
Not
enough
results
"
)
;
}
return
win
.
gURLBar
.
view
.
_rows
.
children
[
index
]
;
}
getOneOffSearchButtons
(
win
)
{
return
win
.
gURLBar
.
view
.
oneOffSearchButtons
;
}
getOneOffSearchButtonsVisible
(
win
)
{
return
this
.
getOneOffSearchButtons
(
win
)
.
style
.
display
!
=
"
none
"
;
}
async
getDetailsOfResultAt
(
win
index
)
{
let
element
=
await
this
.
waitForAutocompleteResultAt
(
win
index
)
;
let
details
=
{
}
;
let
result
=
element
.
result
;
let
{
url
postData
}
=
UrlbarUtils
.
getUrlFromResult
(
result
)
;
details
.
url
=
url
;
details
.
postData
=
postData
;
details
.
type
=
result
.
type
;
details
.
source
=
result
.
source
;
details
.
heuristic
=
result
.
heuristic
;
details
.
autofill
=
!
!
result
.
autofill
;
details
.
image
=
element
.
getElementsByClassName
(
"
urlbarView
-
favicon
"
)
[
0
]
.
src
;
details
.
title
=
result
.
title
;
details
.
tags
=
"
tags
"
in
result
.
payload
?
result
.
payload
.
tags
:
[
]
;
let
actions
=
element
.
getElementsByClassName
(
"
urlbarView
-
action
"
)
;
let
urls
=
element
.
getElementsByClassName
(
"
urlbarView
-
url
"
)
;
let
typeIcon
=
element
.
querySelector
(
"
.
urlbarView
-
type
-
icon
"
)
;
await
win
.
document
.
l10n
.
translateFragment
(
element
)
;
details
.
displayed
=
{
title
:
element
.
getElementsByClassName
(
"
urlbarView
-
title
"
)
[
0
]
.
textContent
action
:
actions
.
length
?
actions
[
0
]
.
textContent
:
null
url
:
urls
.
length
?
urls
[
0
]
.
textContent
:
null
typeIcon
:
typeIcon
?
win
.
getComputedStyle
(
typeIcon
)
[
"
background
-
image
"
]
:
null
}
;
details
.
element
=
{
action
:
element
.
getElementsByClassName
(
"
urlbarView
-
action
"
)
[
0
]
row
:
element
separator
:
element
.
getElementsByClassName
(
"
urlbarView
-
title
-
separator
"
)
[
0
]
title
:
element
.
getElementsByClassName
(
"
urlbarView
-
title
"
)
[
0
]
url
:
element
.
getElementsByClassName
(
"
urlbarView
-
url
"
)
[
0
]
}
;
if
(
details
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
)
{
details
.
searchParams
=
{
engine
:
result
.
payload
.
engine
keyword
:
result
.
payload
.
keyword
query
:
result
.
payload
.
query
suggestion
:
result
.
payload
.
suggestion
isSearchHistory
:
result
.
payload
.
isSearchHistory
inPrivateWindow
:
result
.
payload
.
inPrivateWindow
isPrivateEngine
:
result
.
payload
.
isPrivateEngine
}
;
}
else
if
(
details
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
KEYWORD
)
{
details
.
keyword
=
result
.
payload
.
keyword
;
}
return
details
;
}
getSelectedElement
(
win
)
{
return
win
.
gURLBar
.
view
.
selectedElement
|
|
null
;
}
getSelectedElementIndex
(
win
)
{
return
win
.
gURLBar
.
view
.
selectedElementIndex
;
}
getSelectedRow
(
win
)
{
return
win
.
gURLBar
.
view
.
_getSelectedRow
(
)
|
|
null
;
}
getSelectedRowIndex
(
win
)
{
return
win
.
gURLBar
.
view
.
selectedRowIndex
;
}
setSelectedRowIndex
(
win
index
)
{
win
.
gURLBar
.
view
.
selectedRowIndex
=
index
;
}
getResultCount
(
win
)
{
return
win
.
gURLBar
.
view
.
_rows
.
children
.
length
;
}
promiseSuggestionsPresent
(
win
)
{
return
this
.
promiseSearchComplete
(
win
)
.
then
(
context
=
>
{
let
firstSearchSuggestionIndex
=
context
.
results
.
findIndex
(
r
=
>
r
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
r
.
payload
.
suggestion
)
;
if
(
firstSearchSuggestionIndex
=
=
-
1
)
{
throw
new
Error
(
"
Cannot
find
a
search
suggestion
"
)
;
}
return
firstSearchSuggestionIndex
;
}
)
;
}
promiseSpeculativeConnections
(
httpserver
count
)
{
if
(
!
httpserver
)
{
throw
new
Error
(
"
Must
provide
an
http
server
"
)
;
}
return
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
httpserver
.
connectionNumber
=
=
count
"
Waiting
for
speculative
connection
setup
"
)
;
}
async
promisePopupOpen
(
win
openFn
)
{
if
(
!
openFn
)
{
throw
new
Error
(
"
openFn
should
be
supplied
to
promisePopupOpen
"
)
;
}
await
openFn
(
)
;
if
(
win
.
gURLBar
.
view
.
isOpen
)
{
return
;
}
if
(
this
.
_testScope
)
{
this
.
_testScope
.
info
(
"
Awaiting
for
the
urlbar
panel
to
open
"
)
;
}
await
new
Promise
(
resolve
=
>
{
win
.
gURLBar
.
controller
.
addQueryListener
(
{
onViewOpen
(
)
{
win
.
gURLBar
.
controller
.
removeQueryListener
(
this
)
;
resolve
(
)
;
}
}
)
;
}
)
;
}
async
promisePopupClose
(
win
closeFn
=
null
)
{
if
(
closeFn
)
{
await
closeFn
(
)
;
}
else
{
win
.
gURLBar
.
view
.
close
(
)
;
}
if
(
!
win
.
gURLBar
.
view
.
isOpen
)
{
return
;
}
if
(
this
.
_testScope
)
{
this
.
_testScope
.
info
(
"
Awaiting
for
the
urlbar
panel
to
close
"
)
;
}
await
new
Promise
(
resolve
=
>
{
win
.
gURLBar
.
controller
.
addQueryListener
(
{
onViewClose
(
)
{
win
.
gURLBar
.
controller
.
removeQueryListener
(
this
)
;
resolve
(
)
;
}
}
)
;
}
)
;
}
isPopupOpen
(
win
)
{
return
win
.
gURLBar
.
view
.
isOpen
;
}
isInSearchMode
(
win
engineName
=
null
)
{
if
(
!
!
win
.
gURLBar
.
searchMode
!
=
win
.
gURLBar
.
hasAttribute
(
"
searchmode
"
)
)
{
throw
new
Error
(
"
Urlbar
should
never
be
in
search
mode
without
the
corresponding
attribute
.
"
)
;
}
if
(
engineName
)
{
return
win
.
gURLBar
.
searchMode
.
engineName
=
=
engineName
;
}
return
!
!
win
.
gURLBar
.
searchMode
;
}
async
promiseUserContextId
(
win
)
{
const
defaultId
=
Ci
.
nsIScriptSecurityManager
.
DEFAULT_USER_CONTEXT_ID
;
let
context
=
await
win
.
gURLBar
.
lastQueryContextPromise
;
return
context
.
userContextId
|
|
defaultId
;
}
fireInputEvent
(
win
)
{
let
event
=
new
InputEvent
(
"
input
"
{
data
:
win
.
gURLBar
.
value
[
win
.
gURLBar
.
value
.
length
-
1
]
|
|
null
}
)
;
win
.
gURLBar
.
inputField
.
dispatchEvent
(
event
)
;
}
newMockController
(
options
=
{
}
)
{
return
new
UrlbarController
(
Object
.
assign
(
{
input
:
{
isPrivate
:
false
window
:
{
location
:
{
href
:
AppConstants
.
BROWSER_CHROME_URL
}
}
}
}
options
)
)
;
}
async
initXPCShellDependencies
(
)
{
Cc
[
"
mozilla
.
org
/
satchel
/
form
-
history
-
startup
;
1
"
]
.
getService
(
Ci
.
nsIObserver
)
.
observe
(
null
"
profile
-
after
-
change
"
null
)
;
try
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
}
catch
(
error
)
{
if
(
!
error
.
message
.
includes
(
"
already
started
"
)
)
{
throw
error
;
}
}
}
}
;
UrlbarTestUtils
.
formHistory
=
{
async
update
(
updateObject
=
{
}
window
=
BrowserWindowTracker
.
getTopWindow
(
)
)
{
await
new
Promise
(
(
resolve
reject
)
=
>
{
FormHistory
.
update
(
Object
.
assign
(
{
fieldname
:
this
.
getFormHistoryName
(
window
)
}
updateObject
)
{
handleError
(
error
)
{
reject
(
error
)
;
}
handleCompletion
(
errored
)
{
if
(
!
errored
)
{
resolve
(
)
;
}
}
}
)
;
}
)
;
}
async
add
(
values
=
[
]
window
=
BrowserWindowTracker
.
getTopWindow
(
)
)
{
for
(
let
value
of
values
)
{
await
this
.
update
(
{
value
op
:
"
bump
"
}
window
)
;
}
}
async
remove
(
values
=
[
]
window
=
BrowserWindowTracker
.
getTopWindow
(
)
)
{
for
(
let
value
of
values
)
{
await
this
.
update
(
{
value
op
:
"
remove
"
}
window
)
;
}
}
async
clear
(
window
=
BrowserWindowTracker
.
getTopWindow
(
)
)
{
await
this
.
update
(
{
op
:
"
remove
"
}
window
)
;
}
search
(
criteria
=
{
}
window
=
BrowserWindowTracker
.
getTopWindow
(
)
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
results
=
[
]
;
FormHistory
.
search
(
null
Object
.
assign
(
{
fieldname
:
this
.
getFormHistoryName
(
window
)
}
criteria
)
{
handleResult
(
result
)
{
results
.
push
(
result
)
;
}
handleError
(
error
)
{
reject
(
error
)
;
}
handleCompletion
(
errored
)
{
if
(
!
errored
)
{
resolve
(
results
)
;
}
}
}
)
;
}
)
;
}
promiseChanged
(
change
=
null
)
{
return
TestUtils
.
topicObserved
(
"
satchel
-
storage
-
changed
"
(
subject
data
)
=
>
!
change
|
|
data
=
=
"
formhistory
-
"
+
change
)
;
}
getFormHistoryName
(
window
=
BrowserWindowTracker
.
getTopWindow
(
)
)
{
return
window
?
window
.
gURLBar
.
formHistoryName
:
"
searchbar
-
history
"
;
}
}
;
class
TestProvider
extends
UrlbarProvider
{
constructor
(
{
results
name
=
Math
.
floor
(
Math
.
random
(
)
*
100000
)
type
=
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
priority
=
0
addTimeout
=
0
onCancel
=
null
}
=
{
}
)
{
super
(
)
;
this
.
_results
=
results
;
this
.
_name
=
name
;
this
.
_type
=
type
;
this
.
_priority
=
priority
;
this
.
_addTimeout
=
addTimeout
;
this
.
_onCancel
=
onCancel
;
}
get
name
(
)
{
return
"
TestProvider
"
+
this
.
_name
;
}
get
type
(
)
{
return
this
.
_type
;
}
getPriority
(
context
)
{
return
this
.
_priority
;
}
isActive
(
context
)
{
return
true
;
}
async
startQuery
(
context
addCallback
)
{
for
(
let
result
of
this
.
_results
)
{
if
(
!
this
.
_addTimeout
)
{
addCallback
(
this
result
)
;
}
else
{
await
new
Promise
(
resolve
=
>
{
setTimeout
(
(
)
=
>
{
addCallback
(
this
result
)
;
resolve
(
)
;
}
this
.
_addTimeout
)
;
}
)
;
}
}
}
cancelQuery
(
context
)
{
if
(
this
.
_onCancel
)
{
this
.
_onCancel
(
)
;
}
}
}
UrlbarTestUtils
.
TestProvider
=
TestProvider
;
