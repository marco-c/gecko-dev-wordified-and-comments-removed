"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
UrlbarTestUtils
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserTestUtils
:
"
resource
:
/
/
testing
-
common
/
BrowserTestUtils
.
jsm
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
TestUtils
:
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
var
UrlbarTestUtils
=
{
promiseSearchComplete
(
win
restoreAnimationsFn
=
null
)
{
let
urlbar
=
getUrlbarAbstraction
(
win
)
;
return
BrowserTestUtils
.
waitForPopupEvent
(
urlbar
.
panel
"
shown
"
)
.
then
(
async
(
)
=
>
{
await
urlbar
.
promiseSearchComplete
(
)
;
if
(
typeof
restoreAnimations
=
=
"
function
"
)
{
restoreAnimationsFn
(
)
;
}
}
)
;
}
async
promiseAutocompleteResultPopup
(
win
inputText
waitForFocus
fireInputEvent
=
false
)
{
let
urlbar
=
getUrlbarAbstraction
(
win
)
;
let
restoreAnimationsFn
=
urlbar
.
disableAnimations
(
)
;
await
new
Promise
(
resolve
=
>
waitForFocus
(
resolve
win
)
)
;
urlbar
.
focus
(
)
;
urlbar
.
value
=
inputText
;
if
(
fireInputEvent
)
{
urlbar
.
fireInputEvent
(
)
;
}
if
(
!
urlbar
.
quantumbar
|
|
!
fireInputEvent
)
{
urlbar
.
startSearch
(
inputText
)
;
}
return
this
.
promiseSearchComplete
(
win
restoreAnimationsFn
)
;
}
async
waitForAutocompleteResultAt
(
win
index
)
{
let
urlbar
=
getUrlbarAbstraction
(
win
)
;
return
urlbar
.
promiseResultAt
(
index
)
;
}
async
getDetailsOfResultAt
(
win
index
)
{
let
urlbar
=
getUrlbarAbstraction
(
win
)
;
return
urlbar
.
getDetailsOfResultAt
(
index
)
;
}
getSelectedElement
(
win
)
{
let
urlbar
=
getUrlbarAbstraction
(
win
)
;
return
urlbar
.
getSelectedElement
(
)
;
}
getSelectedIndex
(
win
)
{
let
urlbar
=
getUrlbarAbstraction
(
win
)
;
return
urlbar
.
getSelectedIndex
(
)
;
}
getResultCount
(
win
)
{
let
urlbar
=
getUrlbarAbstraction
(
win
)
;
return
urlbar
.
getResultCount
(
)
;
}
promiseSuggestionsPresent
(
win
)
{
let
urlbar
=
getUrlbarAbstraction
(
win
)
;
return
urlbar
.
promiseSearchSuggestions
(
)
;
}
promiseSpeculativeConnections
(
httpserver
count
)
{
if
(
!
httpserver
)
{
throw
new
Error
(
"
Must
provide
an
http
server
"
)
;
}
return
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
httpserver
.
connectionNumber
=
=
count
"
Waiting
for
speculative
connection
setup
"
)
;
}
promisePopupClose
(
win
closeFn
=
null
)
{
let
urlbar
=
getUrlbarAbstraction
(
win
)
;
return
urlbar
.
promisePopupClose
(
closeFn
)
;
}
}
;
var
gUrlbarAbstractions
=
new
WeakMap
(
)
;
function
getUrlbarAbstraction
(
win
)
{
if
(
!
gUrlbarAbstractions
.
has
(
win
)
)
{
gUrlbarAbstractions
.
set
(
win
new
UrlbarAbstraction
(
win
)
)
;
}
return
gUrlbarAbstractions
.
get
(
win
)
;
}
class
UrlbarAbstraction
{
constructor
(
win
)
{
if
(
!
win
)
{
throw
new
Error
(
"
Must
provide
a
browser
window
"
)
;
}
this
.
urlbar
=
win
.
gURLBar
;
this
.
quantumbar
=
UrlbarPrefs
.
get
(
"
quantumbar
"
)
;
this
.
window
=
win
;
this
.
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
this
.
urlbar
=
null
;
this
.
window
=
null
;
}
{
once
:
true
}
)
;
}
disableAnimations
(
)
{
if
(
!
this
.
quantumbar
)
{
let
dontAnimate
=
!
!
this
.
urlbar
.
popup
.
getAttribute
(
"
dontanimate
"
)
;
this
.
urlbar
.
popup
.
setAttribute
(
"
dontanimate
"
"
true
"
)
;
return
(
)
=
>
{
this
.
urlbar
.
popup
.
setAttribute
(
"
dontanimate
"
dontAnimate
)
;
}
;
}
return
(
)
=
>
{
}
;
}
focus
(
)
{
this
.
urlbar
.
inputField
.
focus
(
)
;
}
fireInputEvent
(
)
{
let
event
=
this
.
window
.
document
.
createEvent
(
"
Events
"
)
;
event
.
initEvent
(
"
input
"
true
true
)
;
this
.
urlbar
.
inputField
.
dispatchEvent
(
event
)
;
}
set
value
(
val
)
{
this
.
urlbar
.
value
=
val
;
}
get
value
(
)
{
return
this
.
urlbar
.
value
;
}
get
panel
(
)
{
return
this
.
quantumbar
?
this
.
urlbar
.
panel
:
this
.
urlbar
.
popup
;
}
startSearch
(
text
)
{
if
(
this
.
quantumbar
)
{
this
.
urlbar
.
value
=
text
;
this
.
urlbar
.
startQuery
(
)
;
}
else
{
this
.
urlbar
.
controller
.
startSearch
(
text
)
;
}
}
promiseSearchComplete
(
)
{
if
(
this
.
quantumbar
)
{
return
this
.
urlbar
.
lastQueryContextPromise
;
}
return
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
this
.
urlbar
.
controller
.
searchStatus
>
=
Ci
.
nsIAutoCompleteController
.
STATUS_COMPLETE_NO_MATCH
"
waiting
urlbar
search
to
complete
"
)
;
}
async
promiseResultAt
(
index
)
{
if
(
!
this
.
quantumbar
)
{
let
searchString
=
this
.
urlbar
.
controller
.
searchString
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
this
.
panel
.
richlistbox
.
itemChildren
.
length
>
index
&
&
this
.
panel
.
richlistbox
.
itemChildren
[
index
]
.
getAttribute
(
"
ac
-
text
"
)
=
=
searchString
.
trim
(
)
Waiting
for
the
autocomplete
result
for
"
{
searchString
}
"
at
[
{
index
}
]
to
appear
)
;
await
new
Promise
(
resolve
=
>
this
.
window
.
requestIdleCallback
(
resolve
{
timeout
:
1000
}
)
)
;
return
this
.
panel
.
richlistbox
.
itemChildren
[
index
]
;
}
await
this
.
promiseSearchComplete
(
)
;
if
(
index
>
=
this
.
urlbar
.
view
.
_rows
.
length
)
{
throw
new
Error
(
"
Not
enough
results
"
)
;
}
return
this
.
urlbar
.
view
.
_rows
.
children
[
index
]
;
}
getSelectedElement
(
)
{
if
(
this
.
quantumbar
)
{
return
this
.
urlbar
.
view
.
_selected
|
|
null
;
}
return
this
.
panel
.
selectedIndex
>
=
0
?
this
.
panel
.
richlistbox
.
itemChildren
[
this
.
panel
.
selectedIndex
]
:
null
;
}
getSelectedIndex
(
)
{
if
(
!
this
.
quantumbar
)
{
return
this
.
panel
.
selectedIndex
;
}
return
parseInt
(
this
.
urlbar
.
view
.
_selected
.
getAttribute
(
"
resultIndex
"
)
)
;
}
getResultCount
(
)
{
return
this
.
quantumbar
?
this
.
urlbar
.
view
.
_rows
.
children
.
length
:
this
.
urlbar
.
controller
.
matchCount
;
}
async
getDetailsOfResultAt
(
index
)
{
let
element
=
await
this
.
promiseResultAt
(
index
)
;
function
getType
(
style
action
)
{
if
(
style
.
includes
(
"
searchengine
"
)
|
|
style
.
includes
(
"
suggestions
"
)
)
{
return
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
;
}
else
if
(
style
.
includes
(
"
extension
"
)
)
{
return
UrlbarUtils
.
RESULT_TYPE
.
OMNIBOX
;
}
else
if
(
action
&
&
action
.
type
=
=
"
keyword
"
)
{
return
UrlbarUtils
.
RESULT_TYPE
.
KEYWORD
;
}
else
if
(
action
&
&
action
.
type
=
=
"
remotetab
"
)
{
return
UrlbarUtils
.
RESULT_TYPE
.
REMOTE_TAB
;
}
else
if
(
action
&
&
action
.
type
=
=
"
switchtab
"
)
{
return
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
;
}
return
UrlbarUtils
.
RESULT_TYPE
.
URL
;
}
let
details
=
{
}
;
if
(
this
.
quantumbar
)
{
let
context
=
await
this
.
urlbar
.
lastQueryContextPromise
;
details
.
url
=
(
UrlbarUtils
.
getUrlFromResult
(
context
.
results
[
index
]
)
)
.
url
;
details
.
type
=
context
.
results
[
index
]
.
type
;
details
.
autofill
=
index
=
=
0
&
&
context
.
autofillValue
;
details
.
image
=
element
.
getElementsByClassName
(
"
urlbarView
-
favicon
"
)
[
0
]
.
src
;
if
(
details
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
)
{
details
.
searchParams
=
{
engine
:
context
.
results
[
index
]
.
payload
.
engine
query
:
context
.
results
[
index
]
.
payload
.
query
suggestion
:
context
.
results
[
index
]
.
payload
.
suggestion
}
;
}
}
else
{
details
.
url
=
this
.
urlbar
.
controller
.
getFinalCompleteValueAt
(
index
)
;
let
style
=
this
.
urlbar
.
controller
.
getStyleAt
(
index
)
;
let
action
=
PlacesUtils
.
parseActionUrl
(
this
.
urlbar
.
controller
.
getValueAt
(
index
)
)
;
details
.
type
=
getType
(
style
action
)
;
details
.
autofill
=
style
.
includes
(
"
autofill
"
)
;
details
.
image
=
element
.
getAttribute
(
"
image
"
)
;
if
(
details
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
)
{
details
.
searchParams
=
{
engine
:
action
.
params
.
engineName
query
:
action
.
params
.
input
suggestion
:
action
.
params
.
input
=
=
action
.
params
.
searchQuery
?
undefined
:
action
.
params
.
searchQuery
}
;
}
}
return
details
;
}
async
promiseSearchSuggestions
(
)
{
if
(
!
this
.
quantumbar
)
{
return
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
controller
=
this
.
urlbar
.
controller
;
let
matchCount
=
controller
.
matchCount
;
for
(
let
i
=
0
;
i
<
matchCount
;
i
+
+
)
{
let
url
=
controller
.
getValueAt
(
i
)
;
let
action
=
PlacesUtils
.
parseActionUrl
(
url
)
;
if
(
action
&
&
action
.
type
=
=
"
searchengine
"
&
&
action
.
params
.
searchSuggestion
)
{
return
true
;
}
}
return
false
;
}
"
Waiting
for
suggestions
"
)
;
}
return
this
.
promiseSearchComplete
(
)
.
then
(
context
=
>
{
if
(
!
context
.
results
.
some
(
r
=
>
r
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
r
.
payload
.
suggestion
)
)
{
throw
new
Error
(
"
Cannot
find
a
search
suggestion
"
)
;
}
}
)
;
}
closePopup
(
)
{
if
(
this
.
quantumbar
)
{
this
.
urlbar
.
view
.
close
(
)
;
}
else
{
this
.
urlbar
.
popup
.
hidePopup
(
)
;
}
}
promisePopupClose
(
closeFn
)
{
if
(
closeFn
)
{
closeFn
(
)
;
}
else
{
this
.
closePopup
(
)
;
}
if
(
!
this
.
quantumbar
)
{
return
BrowserTestUtils
.
waitForPopupEvent
(
this
.
urlbar
.
popup
"
hidden
"
)
;
}
return
BrowserTestUtils
.
waitForPopupEvent
(
this
.
urlbar
.
view
.
panel
"
hidden
"
)
;
}
}
