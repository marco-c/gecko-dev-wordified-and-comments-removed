"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AmpSuggestions
:
"
resource
:
/
/
/
modules
/
urlbar
/
private
/
AmpSuggestions
.
sys
.
mjs
"
}
)
;
const
{
TIMESTAMP_TEMPLATE
}
=
AmpSuggestions
;
const
REMOTE_SETTINGS_RESULTS
=
[
{
id
:
1
url
:
https
:
/
/
example
.
com
/
sponsored
?
t
=
{
TIMESTAMP_TEMPLATE
}
title
:
"
Sponsored
suggestion
"
keywords
:
[
"
sponsored
"
]
click_url
:
"
https
:
/
/
example
.
com
/
click
"
impression_url
:
"
https
:
/
/
example
.
com
/
impression
"
advertiser
:
"
TestAdvertiser
"
iab_category
:
"
22
-
Shopping
"
icon
:
"
1234
"
}
{
id
:
2
url
:
https
:
/
/
example
.
com
/
nonsponsored
?
t
=
{
TIMESTAMP_TEMPLATE
}
title
:
"
Non
-
sponsored
suggestion
"
keywords
:
[
"
nonsponsored
"
]
click_url
:
"
https
:
/
/
example
.
com
/
click
"
impression_url
:
"
https
:
/
/
example
.
com
/
impression
"
advertiser
:
"
Wikipedia
"
iab_category
:
"
5
-
Education
"
icon
:
"
1234
"
}
]
;
requestLongerTimeout
(
3
)
;
add_setup
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
await
QuickSuggest
.
blockedSuggestions
.
_test_readyPromise
;
await
QuickSuggest
.
blockedSuggestions
.
clear
(
)
;
let
isAmp
=
suggestion
=
>
suggestion
.
iab_category
=
=
"
22
-
Shopping
"
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
remoteSettingsRecords
:
[
{
collection
:
QuickSuggestTestUtils
.
RS_COLLECTION
.
AMP
type
:
QuickSuggestTestUtils
.
RS_TYPE
.
AMP
attachment
:
REMOTE_SETTINGS_RESULTS
.
filter
(
isAmp
)
}
{
collection
:
QuickSuggestTestUtils
.
RS_COLLECTION
.
OTHER
type
:
QuickSuggestTestUtils
.
RS_TYPE
.
WIKIPEDIA
attachment
:
REMOTE_SETTINGS_RESULTS
.
filter
(
s
=
>
!
isAmp
(
s
)
)
}
]
}
)
;
}
)
;
add_task
(
async
function
basic
(
)
{
await
doBasicBlockTest
(
{
block
:
async
(
)
=
>
{
await
UrlbarTestUtils
.
openResultMenuAndPressAccesskey
(
window
"
D
"
{
resultIndex
:
1
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
basic_keyShortcut
(
)
{
await
doBasicBlockTest
(
{
block
:
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Delete
"
{
shiftKey
:
true
}
)
;
}
}
)
;
}
)
;
async
function
doBasicBlockTest
(
{
block
}
)
{
for
(
let
result
of
REMOTE_SETTINGS_RESULTS
)
{
info
(
"
Doing
basic
block
test
with
result
:
"
+
JSON
.
stringify
(
{
result
}
)
)
;
await
doOneBasicBlockTest
(
{
result
block
}
)
;
}
}
async
function
doOneBasicBlockTest
(
{
result
block
}
)
{
let
isSponsored
=
result
.
iab_category
!
=
"
5
-
Education
"
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
result
.
keywords
[
0
]
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
2
"
Two
rows
are
present
after
searching
(
heuristic
+
suggestion
)
"
)
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
isSponsored
url
:
isSponsored
?
undefined
:
result
.
url
originalUrl
:
isSponsored
?
result
.
url
:
undefined
}
)
;
await
block
(
)
;
Assert
.
ok
(
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
View
remains
open
after
blocking
result
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
1
"
Only
one
row
after
blocking
suggestion
"
)
;
await
QuickSuggestTestUtils
.
assertNoQuickSuggestResults
(
window
)
;
Assert
.
ok
(
await
QuickSuggest
.
blockedSuggestions
.
has
(
result
.
url
)
"
Suggestion
is
blocked
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
QuickSuggest
.
blockedSuggestions
.
clear
(
)
;
}
add_task
(
async
function
blockMultiple
(
)
{
for
(
let
i
=
0
;
i
<
REMOTE_SETTINGS_RESULTS
.
length
;
i
+
+
)
{
let
{
keywords
url
iab_category
}
=
REMOTE_SETTINGS_RESULTS
[
i
]
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
keywords
[
0
]
}
)
;
let
isSponsored
=
iab_category
!
=
"
5
-
Education
"
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
isSponsored
url
:
isSponsored
?
undefined
:
url
originalUrl
:
isSponsored
?
url
:
undefined
}
)
;
await
UrlbarTestUtils
.
openResultMenuAndPressAccesskey
(
window
"
D
"
{
resultIndex
:
1
}
)
;
Assert
.
ok
(
await
QuickSuggest
.
blockedSuggestions
.
has
(
url
)
"
Suggestion
is
blocked
after
picking
block
button
"
)
;
for
(
let
j
=
0
;
j
<
REMOTE_SETTINGS_RESULTS
.
length
;
j
+
+
)
{
Assert
.
equal
(
await
QuickSuggest
.
blockedSuggestions
.
has
(
REMOTE_SETTINGS_RESULTS
[
j
]
.
url
)
j
<
=
i
Suggestion
at
index
{
j
}
is
blocked
or
not
as
expected
)
;
}
}
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
QuickSuggest
.
blockedSuggestions
.
clear
(
)
;
}
)
;
