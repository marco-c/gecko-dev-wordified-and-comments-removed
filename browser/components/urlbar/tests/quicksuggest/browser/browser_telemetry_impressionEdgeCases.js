"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
CONTEXTUAL_SERVICES_PING_TYPES
:
"
resource
:
/
/
/
modules
/
PartnerLinkAttribution
.
sys
.
mjs
"
UrlbarView
:
"
resource
:
/
/
/
modules
/
UrlbarView
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
sinon
:
"
resource
:
/
/
testing
-
common
/
Sinon
.
jsm
"
}
)
;
const
{
TELEMETRY_SCALARS
}
=
UrlbarProviderQuickSuggest
;
const
REMOTE_SETTINGS_RESULTS
=
[
{
id
:
1
url
:
"
https
:
/
/
example
.
com
/
sponsored
"
title
:
"
Sponsored
suggestion
"
keywords
:
[
"
sponsored
"
]
click_url
:
"
https
:
/
/
example
.
com
/
click
"
impression_url
:
"
https
:
/
/
example
.
com
/
impression
"
advertiser
:
"
testadvertiser
"
}
{
id
:
2
url
:
"
https
:
/
/
example
.
com
/
nonsponsored
"
title
:
"
Non
-
sponsored
suggestion
"
keywords
:
[
"
nonsponsored
"
]
click_url
:
"
https
:
/
/
example
.
com
/
click
"
impression_url
:
"
https
:
/
/
example
.
com
/
impression
"
advertiser
:
"
testadvertiser
"
iab_category
:
"
5
-
Education
"
}
]
;
const
SPONSORED_RESULT
=
REMOTE_SETTINGS_RESULTS
[
0
]
;
let
spy
;
add_setup
(
async
function
(
)
{
(
{
spy
}
=
QuickSuggestTestUtils
.
createTelemetryPingSpy
(
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
}
{
setAsDefault
:
true
}
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
remoteSettingsResults
:
REMOTE_SETTINGS_RESULTS
}
)
;
}
)
;
add_task
(
async
function
abandonment
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
sponsored
"
fireInputEvent
:
true
}
)
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
url
:
SPONSORED_RESULT
.
url
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
gURLBar
.
blur
(
)
;
}
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
}
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
]
)
;
}
)
;
add_task
(
async
function
noQuickSuggestResult
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
noImpression_noQuickSuggestResult
"
fireInputEvent
:
true
}
)
;
await
QuickSuggestTestUtils
.
assertNoQuickSuggestResults
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
}
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
]
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
hiddenRow
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
originalRemoveStaleRowsTimeout
=
UrlbarView
.
removeStaleRowsTimeout
;
UrlbarView
.
removeStaleRowsTimeout
=
30000
;
registerCleanupFunction
(
(
)
=
>
{
UrlbarView
.
removeStaleRowsTimeout
=
originalRemoveStaleRowsTimeout
;
}
)
;
let
maxCount
=
UrlbarPrefs
.
get
(
"
maxRichResults
"
)
;
let
results
=
[
]
;
for
(
let
i
=
0
;
i
<
maxCount
;
i
+
+
)
{
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
engine
:
"
Example
"
suggestion
:
"
suggestion
"
+
i
lowerCaseSuggestion
:
"
suggestion
"
+
i
query
:
"
test
"
}
)
)
;
}
let
provider
=
new
DelayingTestProvider
(
{
results
}
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
}
)
;
provider
.
finishQueryPromise
=
Promise
.
resolve
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
fireInputEvent
:
true
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
maxCount
"
Row
count
after
first
search
"
)
;
for
(
let
i
=
1
;
i
<
maxCount
;
i
+
+
)
{
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
"
Expected
result
type
at
index
"
+
i
)
;
Assert
.
equal
(
result
.
source
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
"
Expected
result
source
at
index
"
+
i
)
;
}
let
mutationPromise
=
new
Promise
(
resolve
=
>
{
let
observer
=
new
MutationObserver
(
mutations
=
>
{
let
rows
=
UrlbarTestUtils
.
getResultsContainer
(
window
)
.
children
;
for
(
let
row
of
rows
)
{
if
(
row
.
result
.
providerName
=
=
"
UrlbarProviderQuickSuggest
"
)
{
observer
.
disconnect
(
)
;
resolve
(
row
)
;
return
;
}
}
}
)
;
observer
.
observe
(
UrlbarTestUtils
.
getResultsContainer
(
window
)
{
childList
:
true
}
)
;
}
)
;
let
resolveQuery
;
provider
.
finishQueryPromise
=
new
Promise
(
resolve
=
>
(
resolveQuery
=
resolve
)
)
;
gURLBar
.
focus
(
)
;
let
queryPromise
=
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
keywords
[
0
]
fireInputEvent
:
true
}
)
;
let
quickSuggestRow
=
await
mutationPromise
;
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
quickSuggestRow
)
"
Quick
suggest
row
is
hidden
"
)
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
await
loadPromise
;
resolveQuery
(
)
;
await
queryPromise
;
QuickSuggestTestUtils
.
assertScalars
(
{
}
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
]
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
UrlbarView
.
removeStaleRowsTimeout
=
originalRemoveStaleRowsTimeout
;
}
)
;
add_task
(
async
function
notAddedToView
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
this
doesn
'
t
match
anything
"
fireInputEvent
:
true
}
)
;
await
QuickSuggestTestUtils
.
assertNoQuickSuggestResults
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
doEngagementWithoutAddingResultToView
(
REMOTE_SETTINGS_RESULTS
[
0
]
.
keywords
[
0
]
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
}
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
]
)
;
}
)
;
}
)
;
add_task
(
async
function
previousResultStillVisible
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
let
firstSuggestion
=
REMOTE_SETTINGS_RESULTS
[
0
]
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
firstSuggestion
.
keywords
[
0
]
fireInputEvent
:
true
}
)
;
let
index
=
1
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
url
:
firstSuggestion
.
url
}
)
;
await
doEngagementWithoutAddingResultToView
(
REMOTE_SETTINGS_RESULTS
[
1
]
.
keywords
[
0
]
index
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
[
TELEMETRY_SCALARS
.
IMPRESSION_SPONSORED
]
:
index
+
1
}
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
{
category
:
QuickSuggest
.
TELEMETRY_EVENT_CATEGORY
method
:
"
engagement
"
object
:
"
impression_only
"
extra
:
{
match_type
:
"
firefox
-
suggest
"
position
:
String
(
index
+
1
)
suggestion_type
:
"
sponsored
"
}
}
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
{
type
:
CONTEXTUAL_SERVICES_PING_TYPES
.
QS_IMPRESSION
payload
:
{
improve_suggest_experience_checked
:
false
block_id
:
firstSuggestion
.
id
is_clicked
:
false
match_type
:
"
firefox
-
suggest
"
position
:
index
+
1
}
}
]
)
;
}
)
;
}
)
;
async
function
doEngagementWithoutAddingResultToView
(
searchString
previousResultIndex
=
-
1
)
{
let
originalChunkDelayMs
=
UrlbarProvidersManager
.
_chunkResultsDelayMs
;
UrlbarProvidersManager
.
_chunkResultsDelayMs
=
30000
;
registerCleanupFunction
(
(
)
=
>
{
UrlbarProvidersManager
.
_chunkResultsDelayMs
=
originalChunkDelayMs
;
}
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
getPriorityStub
=
sandbox
.
stub
(
UrlbarProviderQuickSuggest
"
getPriority
"
)
;
getPriorityStub
.
returns
(
Infinity
)
;
let
onEngagementSpy
=
sandbox
.
spy
(
UrlbarProviderQuickSuggest
"
onEngagement
"
)
;
let
sandboxCleanup
=
(
)
=
>
{
getPriorityStub
?
.
restore
(
)
;
getPriorityStub
=
null
;
sandbox
?
.
restore
(
)
;
sandbox
=
null
;
}
;
registerCleanupFunction
(
sandboxCleanup
)
;
let
provider
=
new
DelayingTestProvider
(
{
results
:
[
]
priority
:
Infinity
type
:
UrlbarUtils
.
PROVIDER_TYPE
.
HEURISTIC
}
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
let
resolveQuery
;
provider
.
finishQueryPromise
=
new
Promise
(
r
=
>
(
resolveQuery
=
r
)
)
;
let
context
;
let
queryListener
=
{
onQueryStarted
:
c
=
>
(
context
=
c
)
}
;
gURLBar
.
controller
.
addQueryListener
(
queryListener
)
;
gURLBar
.
focus
(
)
;
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
searchString
fireInputEvent
:
true
}
)
;
let
result
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
query
=
UrlbarProvidersManager
.
queries
.
get
(
context
)
;
return
query
?
.
unsortedResults
.
find
(
r
=
>
r
.
providerName
=
=
"
UrlbarProviderQuickSuggest
"
)
;
}
"
Waiting
for
quick
suggest
result
to
be
added
to
context
.
unsortedResults
"
)
;
gURLBar
.
controller
.
removeQueryListener
(
queryListener
)
;
Assert
.
equal
(
result
.
rowIndex
-
1
"
result
.
rowIndex
is
still
-
1
"
)
;
if
(
previousResultIndex
>
=
0
)
{
let
rows
=
gURLBar
.
view
.
panel
.
querySelector
(
"
.
urlbarView
-
results
"
)
;
Assert
.
equal
(
rows
.
children
[
previousResultIndex
]
.
result
.
providerName
"
UrlbarProviderQuickSuggest
"
"
Result
already
in
view
is
a
quick
suggest
"
)
;
}
else
{
Assert
.
ok
(
!
gURLBar
.
view
.
isOpen
"
View
is
closed
"
)
;
}
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
await
loadPromise
;
let
engagementCalls
=
onEngagementSpy
.
getCalls
(
)
.
filter
(
call
=
>
{
let
state
=
call
.
args
[
1
]
;
return
state
=
=
"
engagement
"
;
}
)
;
Assert
.
equal
(
engagementCalls
.
length
1
"
One
engagement
occurred
"
)
;
resolveQuery
(
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
UrlbarProvidersManager
.
_chunkResultsDelayMs
=
originalChunkDelayMs
;
sandboxCleanup
(
)
;
}
class
DelayingTestProvider
extends
UrlbarTestUtils
.
TestProvider
{
finishQueryPromise
=
null
;
async
startQuery
(
context
addCallback
)
{
for
(
let
result
of
this
.
_results
)
{
addCallback
(
this
result
)
;
}
await
this
.
finishQueryPromise
;
}
}
