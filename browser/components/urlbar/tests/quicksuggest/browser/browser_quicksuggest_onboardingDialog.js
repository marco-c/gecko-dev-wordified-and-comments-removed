"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
TelemetryEnvironment
:
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
UrlbarQuickSuggest
:
"
resource
:
/
/
/
modules
/
UrlbarQuickSuggest
.
jsm
"
}
)
;
const
OTHER_DIALOG_URI
=
getRootDirectory
(
gTestPath
)
+
"
subdialog
.
xhtml
"
;
const
OFFLINE_DEFAULT_PREFS
=
{
"
suggest
.
quicksuggest
.
nonsponsored
"
:
true
"
suggest
.
quicksuggest
.
sponsored
"
:
true
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
;
let
gDefaultBranch
=
Services
.
prefs
.
getDefaultBranch
(
"
browser
.
urlbar
.
"
)
;
let
gUserBranch
=
Services
.
prefs
.
getBranch
(
"
browser
.
urlbar
.
"
)
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
requestLongerTimeout
(
3
)
;
}
add_task
(
async
function
onboardingShouldNotAppear
(
)
{
setDialogPrereqPrefs
(
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
false
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
false
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
info
(
"
Calling
maybeShowOnboardingDialog
"
)
;
let
showed
=
await
UrlbarQuickSuggest
.
maybeShowOnboardingDialog
(
)
;
Assert
.
ok
(
!
showed
"
The
dialog
was
not
shown
"
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
nonsponsored
"
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
UrlbarPrefs
.
clear
(
"
quicksuggest
.
dataCollection
.
enabled
"
)
;
}
)
;
add_task
(
async
function
transition
(
)
{
await
doTransitionTest
(
{
trigger
:
win
=
>
{
info
(
"
Find
next
button
"
)
;
const
onboardingNext
=
win
.
document
.
getElementById
(
"
onboardingNext
"
)
;
info
(
"
Click
to
transition
"
)
;
onboardingNext
.
click
(
)
;
}
}
)
;
}
)
;
add_task
(
async
function
transition_by_enter
(
)
{
await
doTransitionTest
(
{
trigger
:
(
)
=
>
{
info
(
"
Enter
to
transition
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
}
)
;
}
)
;
add_task
(
async
function
accept
(
)
{
await
doDialogTest
(
{
callback
:
async
(
)
=
>
{
let
tabCount
=
gBrowser
.
tabs
.
length
;
info
(
"
Calling
showOnboardingDialog
"
)
;
const
{
win
maybeShowPromise
}
=
await
showOnboardingDialog
(
{
skipIntroduction
:
true
}
)
;
info
(
"
Select
accept
option
"
)
;
win
.
document
.
getElementById
(
"
onboardingAccept
"
)
.
click
(
)
;
info
(
"
Submit
"
)
;
win
.
document
.
getElementById
(
"
onboardingSubmit
"
)
.
click
(
)
;
info
(
"
Waiting
for
maybeShowOnboardingDialog
to
finish
"
)
;
await
maybeShowPromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
"
about
:
blank
"
"
Nothing
loaded
in
the
current
tab
"
)
;
Assert
.
equal
(
gBrowser
.
tabs
.
length
tabCount
"
No
news
tabs
were
opened
"
)
;
}
onboardingDialogChoice
:
"
accept
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
true
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
enabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
accept
"
}
]
}
)
;
}
)
;
add_task
(
async
function
reject
(
)
{
await
doDialogTest
(
{
callback
:
async
(
)
=
>
{
let
tabCount
=
gBrowser
.
tabs
.
length
;
info
(
"
Calling
showOnboardingDialog
"
)
;
const
{
win
maybeShowPromise
}
=
await
showOnboardingDialog
(
{
skipIntroduction
:
true
}
)
;
info
(
"
Select
reject
option
"
)
;
win
.
document
.
getElementById
(
"
onboardingReject
"
)
.
click
(
)
;
info
(
"
Submit
"
)
;
win
.
document
.
getElementById
(
"
onboardingSubmit
"
)
.
click
(
)
;
info
(
"
Waiting
for
maybeShowOnboardingDialog
to
finish
"
)
;
await
maybeShowPromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
"
about
:
blank
"
"
Nothing
loaded
in
the
current
tab
"
)
;
Assert
.
equal
(
gBrowser
.
tabs
.
length
tabCount
"
No
news
tabs
were
opened
"
)
;
}
onboardingDialogChoice
:
"
reject
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
disabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
reject
"
}
]
}
)
;
}
)
;
add_task
(
async
function
notNow
(
)
{
await
doDialogTest
(
{
callback
:
async
(
)
=
>
{
let
tabCount
=
gBrowser
.
tabs
.
length
;
info
(
"
Calling
showOnboardingDialog
"
)
;
const
{
win
maybeShowPromise
}
=
await
showOnboardingDialog
(
{
skipIntroduction
:
true
}
)
;
info
(
"
Click
on
not
now
link
"
)
;
win
.
document
.
getElementById
(
"
onboardingNotNow
"
)
.
click
(
)
;
info
(
"
Waiting
for
maybeShowOnboardingDialog
to
finish
"
)
;
await
maybeShowPromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
"
about
:
blank
"
"
Nothing
loaded
in
the
current
tab
"
)
;
Assert
.
equal
(
gBrowser
.
tabs
.
length
tabCount
"
No
news
tabs
were
opened
"
)
;
}
onboardingDialogChoice
:
"
not_now_link
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
disabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
not_now_link
"
}
]
}
)
;
}
)
;
add_task
(
async
function
learnMore
(
)
{
await
doDialogTest
(
{
callback
:
async
(
)
=
>
{
let
loadPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
QuickSuggestTestUtils
.
LEARN_MORE_URL
)
.
then
(
tab
=
>
{
info
(
"
Saw
new
tab
"
)
;
return
tab
;
}
)
;
info
(
"
Calling
showOnboardingDialog
"
)
;
const
{
win
maybeShowPromise
}
=
await
showOnboardingDialog
(
{
skipIntroduction
:
true
}
)
;
info
(
"
Click
on
learn
more
link
"
)
;
win
.
document
.
getElementById
(
"
onboardingLearnMore
"
)
.
click
(
)
;
info
(
"
Waiting
for
maybeShowOnboardingDialog
to
finish
"
)
;
await
maybeShowPromise
;
info
(
"
Waiting
for
new
tab
"
)
;
let
tab
=
await
loadPromise
;
Assert
.
equal
(
gBrowser
.
selectedTab
tab
"
Current
tab
is
the
new
tab
"
)
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
QuickSuggestTestUtils
.
LEARN_MORE_URL
"
Current
tab
is
the
support
page
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
onboardingDialogChoice
:
"
learn_more
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
disabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
learn_more
"
}
]
}
)
;
}
)
;
add_task
(
async
function
escKey_focusInsideDialog
(
)
{
await
doFocusTest
(
{
tabKeyRepeat
:
0
expectedFocusID
:
"
onboardingNext
"
callback
:
async
(
)
=
>
{
let
tabCount
=
gBrowser
.
tabs
.
length
;
Assert
.
ok
(
document
.
activeElement
.
classList
.
contains
(
"
dialogFrame
"
)
"
dialogFrame
is
focused
in
the
browser
window
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
"
about
:
blank
"
"
Nothing
loaded
in
the
current
tab
"
)
;
Assert
.
equal
(
gBrowser
.
tabs
.
length
tabCount
"
No
news
tabs
were
opened
"
)
;
}
onboardingDialogChoice
:
"
dismissed_escape_key
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
disabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
dismissed_escape_key
"
}
]
}
)
;
}
)
;
add_task
(
async
function
escKey_focusOutsideDialog
(
)
{
await
doFocusTest
(
{
tabKeyRepeat
:
0
expectedFocusID
:
"
onboardingNext
"
callback
:
async
(
)
=
>
{
document
.
documentElement
.
focus
(
)
;
Assert
.
ok
(
!
document
.
activeElement
.
classList
.
contains
(
"
dialogFrame
"
)
"
dialogFrame
is
not
focused
in
the
browser
window
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
}
onboardingDialogChoice
:
"
dismissed_escape_key
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
disabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
dismissed_escape_key
"
}
]
}
)
;
}
)
;
add_task
(
async
function
escKey_queued_esc
(
)
{
await
doQueuedEscKeyTest
(
"
KEY_Escape
"
)
;
}
)
;
add_task
(
async
function
escKey_queued_enter
(
)
{
await
doQueuedEscKeyTest
(
"
KEY_Enter
"
)
;
}
)
;
async
function
doQueuedEscKeyTest
(
otherDialogKey
)
{
await
doDialogTest
(
{
callback
:
async
(
)
=
>
{
let
uris
=
[
OTHER_DIALOG_URI
ONBOARDING_URI
]
;
let
[
otherOpenedPromise
onboardingOpenedPromise
]
=
uris
.
map
(
uri
=
>
TestUtils
.
topicObserved
(
"
subdialog
-
loaded
"
contentWin
=
>
contentWin
.
document
.
documentURI
=
=
uri
)
.
then
(
async
(
[
contentWin
]
)
=
>
{
if
(
contentWin
.
document
.
readyState
!
=
"
complete
"
)
{
await
BrowserTestUtils
.
waitForEvent
(
contentWin
"
load
"
)
;
}
}
)
)
;
info
(
"
Queuing
dialogs
for
opening
"
)
;
let
otherClosedPromise
=
gDialogBox
.
open
(
OTHER_DIALOG_URI
)
;
let
onboardingClosedPromise
=
UrlbarQuickSuggest
.
maybeShowOnboardingDialog
(
)
;
info
(
"
Waiting
for
the
other
dialog
to
open
"
)
;
await
otherOpenedPromise
;
info
(
Pressing
{
otherDialogKey
}
and
waiting
for
other
dialog
to
close
)
;
EventUtils
.
synthesizeKey
(
otherDialogKey
)
;
await
otherClosedPromise
;
info
(
"
Waiting
for
the
onboarding
dialog
to
open
"
)
;
await
onboardingOpenedPromise
;
info
(
"
Pressing
Escape
and
waiting
for
onboarding
dialog
to
close
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
onboardingClosedPromise
;
}
onboardingDialogChoice
:
"
dismissed_escape_key
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
disabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
dismissed_escape_key
"
}
]
}
)
;
}
add_task
(
async
function
dismissed_other_on_introduction
(
)
{
await
doDialogTest
(
{
callback
:
async
(
)
=
>
{
let
dialogPromise
=
BrowserTestUtils
.
promiseAlertDialogOpen
(
null
ONBOARDING_URI
{
isSubDialog
:
true
}
)
;
let
maybeShowPromise
=
UrlbarQuickSuggest
.
maybeShowOnboardingDialog
(
)
;
let
win
=
await
dialogPromise
;
if
(
win
.
document
.
readyState
!
=
"
complete
"
)
{
await
BrowserTestUtils
.
waitForEvent
(
win
"
load
"
)
;
}
gDialogBox
.
_dialog
.
close
(
)
;
await
maybeShowPromise
;
}
onboardingDialogChoice
:
"
dismissed_other
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
disabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
dismissed_other
"
}
]
}
)
;
}
)
;
add_task
(
async
function
focus_init_order
(
)
{
setDialogPrereqPrefs
(
)
;
info
(
"
Calling
showOnboardingDialog
"
)
;
const
{
win
maybeShowPromise
}
=
await
showOnboardingDialog
(
{
skipIntroduction
:
true
}
)
;
const
order
=
[
"
onboardingAccept
"
"
onboardingLearnMore
"
"
onboardingReject
"
"
onboardingNotNow
"
"
onboardingAccept
"
]
;
for
(
const
next
of
order
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
Assert
.
equal
(
win
.
document
.
activeElement
.
id
next
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
info
(
"
Waiting
for
maybeShowOnboardingDialog
to
finish
"
)
;
await
maybeShowPromise
;
}
)
;
add_task
(
async
function
focus_order_with_accept_option
(
)
{
setDialogPrereqPrefs
(
)
;
info
(
"
Calling
showOnboardingDialog
"
)
;
const
{
win
maybeShowPromise
}
=
await
showOnboardingDialog
(
{
skipIntroduction
:
true
}
)
;
info
(
"
Select
onboardingAccept
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
Assert
.
equal
(
win
.
document
.
activeElement
.
id
"
onboardingAccept
"
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
const
order
=
[
"
onboardingLearnMore
"
"
onboardingSubmit
"
"
onboardingNotNow
"
"
onboardingAccept
"
]
;
for
(
const
next
of
order
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
Assert
.
equal
(
win
.
document
.
activeElement
.
id
next
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
info
(
"
Waiting
for
maybeShowOnboardingDialog
to
finish
"
)
;
await
maybeShowPromise
;
}
)
;
add_task
(
async
function
focus_order_with_reject_option
(
)
{
setDialogPrereqPrefs
(
)
;
info
(
"
Calling
showOnboardingDialog
"
)
;
const
{
win
maybeShowPromise
}
=
await
showOnboardingDialog
(
{
skipIntroduction
:
true
}
)
;
info
(
"
Select
onboardingReject
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
repeat
:
3
}
)
;
Assert
.
equal
(
win
.
document
.
activeElement
.
id
"
onboardingReject
"
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
const
order
=
[
"
onboardingSubmit
"
"
onboardingNotNow
"
"
onboardingLearnMore
"
"
onboardingReject
"
]
;
for
(
const
next
of
order
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
Assert
.
equal
(
win
.
document
.
activeElement
.
id
next
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
info
(
"
Waiting
for
maybeShowOnboardingDialog
to
finish
"
)
;
await
maybeShowPromise
;
}
)
;
add_task
(
async
function
focus_accept
(
)
{
await
doFocusTest
(
{
tabKeyRepeat
:
1
expectedFocusID
:
"
onboardingAccept
"
callback
:
async
(
)
=
>
{
info
(
"
Select
accept
option
"
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
info
(
"
Enter
to
submit
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
onboardingDialogChoice
:
"
accept
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
true
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
enabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
accept
"
}
]
}
)
;
}
)
;
add_task
(
async
function
focus_learnMore
(
)
{
await
doFocusTest
(
{
tabKeyRepeat
:
2
expectedFocusID
:
"
onboardingLearnMore
"
callback
:
async
(
)
=
>
{
let
loadPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
QuickSuggestTestUtils
.
LEARN_MORE_URL
)
.
then
(
tab
=
>
{
info
(
"
Saw
new
tab
"
)
;
return
tab
;
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
info
(
"
Waiting
for
new
tab
"
)
;
let
tab
=
await
loadPromise
;
Assert
.
equal
(
gBrowser
.
selectedTab
tab
"
Current
tab
is
the
new
tab
"
)
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
QuickSuggestTestUtils
.
LEARN_MORE_URL
"
Current
tab
is
the
support
page
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
onboardingDialogChoice
:
"
learn_more
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
disabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
learn_more
"
}
]
}
)
;
}
)
;
add_task
(
async
function
focus_reject
(
)
{
await
doFocusTest
(
{
tabKeyRepeat
:
3
expectedFocusID
:
"
onboardingReject
"
callback
:
async
(
)
=
>
{
info
(
"
Select
reject
option
"
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
info
(
"
Enter
to
submit
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
onboardingDialogChoice
:
"
reject
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
disabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
reject
"
}
]
}
)
;
}
)
;
add_task
(
async
function
focus_notNow
(
)
{
await
doFocusTest
(
{
tabKeyRepeat
:
4
expectedFocusID
:
"
onboardingNotNow
"
callback
:
async
(
)
=
>
{
let
tabCount
=
gBrowser
.
tabs
.
length
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
"
about
:
blank
"
"
Nothing
loaded
in
the
current
tab
"
)
;
Assert
.
equal
(
gBrowser
.
tabs
.
length
tabCount
"
No
news
tabs
were
opened
"
)
;
}
onboardingDialogChoice
:
"
not_now_link
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
disabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
not_now_link
"
}
]
}
)
;
}
)
;
add_task
(
async
function
focus_accept_wraparound
(
)
{
await
doFocusTest
(
{
tabKeyRepeat
:
5
expectedFocusID
:
"
onboardingAccept
"
callback
:
async
win
=
>
{
info
(
"
Select
accept
option
"
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
onboardingDialogChoice
:
"
accept
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
true
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
enabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
accept
"
}
]
}
)
;
}
)
;
async
function
doDialogTest
(
{
onboardingDialogChoice
telemetryEvents
callback
expectedUserBranchPrefs
}
)
{
setDialogPrereqPrefs
(
)
;
let
initialDefaultBranch
=
OFFLINE_DEFAULT_PREFS
;
let
originalDefaultBranch
=
{
}
;
for
(
let
[
name
value
]
of
Object
.
entries
(
initialDefaultBranch
)
)
{
originalDefaultBranch
=
gDefaultBranch
.
getBoolPref
(
name
)
;
gDefaultBranch
.
setBoolPref
(
name
value
)
;
gUserBranch
.
clearUserPref
(
name
)
;
}
Services
.
telemetry
.
clearEvents
(
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
callback
(
)
;
}
)
;
for
(
let
[
name
value
]
of
Object
.
entries
(
initialDefaultBranch
)
)
{
Assert
.
equal
(
gDefaultBranch
.
getBoolPref
(
name
)
value
"
Default
-
branch
value
for
pref
did
not
change
after
modal
:
"
+
name
)
;
let
effectiveValue
;
if
(
name
in
expectedUserBranchPrefs
)
{
effectiveValue
=
expectedUserBranchPrefs
[
name
]
;
Assert
.
equal
(
gUserBranch
.
getBoolPref
(
name
)
effectiveValue
"
User
-
branch
value
for
pref
has
expected
value
:
"
+
name
)
;
}
else
{
effectiveValue
=
value
;
Assert
.
ok
(
!
gUserBranch
.
prefHasUserValue
(
name
)
"
User
-
branch
value
for
pref
does
not
exist
:
"
+
name
)
;
}
Assert
.
equal
(
UrlbarPrefs
.
get
(
name
)
effectiveValue
"
Effective
value
for
pref
is
correct
:
"
+
name
)
;
}
Assert
.
equal
(
UrlbarPrefs
.
get
(
"
quicksuggest
.
onboardingDialogChoice
"
)
onboardingDialogChoice
"
onboardingDialogChoice
"
)
;
Assert
.
equal
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
quicksuggest
.
onboardingDialogChoice
"
]
onboardingDialogChoice
"
onboardingDialogChoice
is
correct
in
TelemetryEnvironment
"
)
;
TelemetryTestUtils
.
assertEvents
(
telemetryEvents
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
}
)
;
Assert
.
ok
(
UrlbarPrefs
.
get
(
"
quicksuggest
.
showedOnboardingDialog
"
)
"
quicksuggest
.
showedOnboardingDialog
is
true
after
showing
dialog
"
)
;
for
(
let
[
name
value
]
of
Object
.
entries
(
originalDefaultBranch
)
)
{
gDefaultBranch
.
setBoolPref
(
name
value
)
;
}
for
(
let
name
of
Object
.
keys
(
expectedUserBranchPrefs
)
)
{
gUserBranch
.
clearUserPref
(
name
)
;
}
}
let
gCanTabMoveFocus
;
async
function
doFocusTest
(
{
tabKeyRepeat
expectedFocusID
onboardingDialogChoice
telemetryEvents
callback
expectedUserBranchPrefs
}
)
{
if
(
gCanTabMoveFocus
=
=
=
undefined
)
{
gCanTabMoveFocus
=
await
canTabMoveFocus
(
)
;
}
if
(
!
gCanTabMoveFocus
&
&
tabKeyRepeat
)
{
Assert
.
ok
(
true
"
Tab
key
can
'
t
move
focus
skipping
test
"
)
;
return
;
}
await
doDialogTest
(
{
onboardingDialogChoice
expectedUserBranchPrefs
telemetryEvents
callback
:
async
(
)
=
>
{
const
{
win
maybeShowPromise
}
=
await
showOnboardingDialog
(
{
skipIntroduction
:
true
}
)
;
let
doc
=
win
.
document
;
Assert
.
equal
(
doc
.
activeElement
.
id
"
onboardingNext
"
"
onboardingNext
is
focused
initially
"
)
;
if
(
tabKeyRepeat
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
repeat
:
tabKeyRepeat
}
)
;
}
if
(
!
gCanTabMoveFocus
)
{
expectedFocusID
=
"
onboardingNext
"
;
}
Assert
.
equal
(
doc
.
activeElement
.
id
expectedFocusID
"
Expected
element
is
focused
:
"
+
expectedFocusID
)
;
await
callback
(
win
)
;
await
maybeShowPromise
;
}
}
)
;
}
async
function
doTransitionTest
(
{
trigger
}
)
{
setDialogPrereqPrefs
(
)
;
info
(
"
Calling
showOnboardingDialog
"
)
;
const
{
win
maybeShowPromise
}
=
await
showOnboardingDialog
(
)
;
info
(
"
Check
initial
status
"
)
;
const
introductionSection
=
win
.
document
.
getElementById
(
"
introduction
-
section
"
)
;
const
mainSection
=
win
.
document
.
getElementById
(
"
main
-
section
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
introductionSection
)
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
mainSection
)
)
;
await
trigger
(
win
)
;
info
(
"
Wait
for
transition
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
is_hidden
(
introductionSection
)
&
&
BrowserTestUtils
.
is_visible
(
mainSection
)
)
;
Assert
.
ok
(
true
"
The
transition
is
finished
successfully
"
)
;
info
(
"
Close
the
dialog
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
maybeShowPromise
;
}
async
function
showOnboardingDialog
(
{
skipIntroduction
}
=
{
}
)
{
const
dialogPromise
=
BrowserTestUtils
.
promiseAlertDialogOpen
(
null
ONBOARDING_URI
{
isSubDialog
:
true
}
)
;
const
maybeShowPromise
=
UrlbarQuickSuggest
.
maybeShowOnboardingDialog
(
)
;
const
win
=
await
dialogPromise
;
if
(
win
.
document
.
readyState
!
=
"
complete
"
)
{
await
BrowserTestUtils
.
waitForEvent
(
win
"
load
"
)
;
}
if
(
!
skipIntroduction
)
{
return
{
win
maybeShowPromise
}
;
}
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
const
introductionSection
=
win
.
document
.
getElementById
(
"
introduction
-
section
"
)
;
const
mainSection
=
win
.
document
.
getElementById
(
"
main
-
section
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
is_hidden
(
introductionSection
)
&
&
BrowserTestUtils
.
is_visible
(
mainSection
)
)
;
return
{
win
maybeShowPromise
}
;
}
function
setDialogPrereqPrefs
(
)
{
UrlbarPrefs
.
set
(
"
quicksuggest
.
shouldShowOnboardingDialog
"
true
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
showedOnboardingDialog
"
false
)
;
}
async
function
canTabMoveFocus
(
)
{
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
{
return
true
;
}
let
canMove
=
false
;
await
doDialogTest
(
{
callback
:
async
(
)
=
>
{
const
{
win
maybeShowPromise
}
=
await
showOnboardingDialog
(
{
skipIntroduction
:
true
}
)
;
let
doc
=
win
.
document
;
let
{
activeElement
}
=
doc
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
canMove
=
activeElement
!
=
doc
.
activeElement
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
maybeShowPromise
;
}
onboardingDialogChoice
:
"
dismissed_escape_key
"
expectedUserBranchPrefs
:
{
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
telemetryEvents
:
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
"
disabled
"
}
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
opt_in_dialog
"
object
:
"
dismissed_escape_key
"
}
]
}
)
;
return
canMove
;
}
