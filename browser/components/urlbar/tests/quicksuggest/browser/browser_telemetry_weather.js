"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
UrlbarProviderWeather
:
"
resource
:
/
/
/
modules
/
UrlbarProviderWeather
.
sys
.
mjs
"
}
)
;
const
suggestion_type
=
"
weather
"
;
const
match_type
=
"
firefox
-
suggest
"
;
const
index
=
1
;
const
position
=
index
+
1
;
const
{
TELEMETRY_SCALARS
:
WEATHER_SCALARS
}
=
UrlbarProviderWeather
;
const
{
WEATHER_SUGGESTION
:
suggestion
WEATHER_RS_DATA
}
=
MerinoTestUtils
;
requestLongerTimeout
(
3
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
quickactions
"
false
]
]
}
)
;
await
setUpTelemetryTest
(
{
remoteSettingsRecords
:
[
{
type
:
"
weather
"
weather
:
WEATHER_RS_DATA
}
]
}
)
;
await
MerinoTestUtils
.
initWeather
(
)
;
}
)
;
add_tasks_with_rust
(
async
function
(
)
{
let
rustEnabled
=
UrlbarPrefs
.
get
(
"
quicksuggest
.
rustEnabled
"
)
;
await
doTelemetryTest
(
{
index
suggestion
providerName
:
rustEnabled
?
UrlbarProviderQuickSuggest
.
name
:
UrlbarProviderWeather
.
name
showSuggestion
:
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
MerinoTestUtils
.
WEATHER_KEYWORD
}
)
;
}
teardown
:
async
(
)
=
>
{
if
(
!
UrlbarPrefs
.
get
(
"
suggest
.
weather
"
)
)
{
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
gURLBar
.
handleRevert
(
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
weather
"
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
await
QuickSuggest
.
weather
.
fetchPromise
;
}
}
impressionOnly
:
{
scalars
:
rustEnabled
?
{
}
:
{
[
WEATHER_SCALARS
.
IMPRESSION
]
:
position
}
}
click
:
{
scalars
:
rustEnabled
?
{
}
:
{
[
WEATHER_SCALARS
.
IMPRESSION
]
:
position
[
WEATHER_SCALARS
.
CLICK
]
:
position
}
}
commands
:
[
{
command
:
[
"
[
data
-
l10n
-
id
=
firefox
-
suggest
-
command
-
dont
-
show
-
this
]
"
"
not_relevant
"
]
scalars
:
rustEnabled
?
{
}
:
{
[
WEATHER_SCALARS
.
IMPRESSION
]
:
position
}
}
]
}
)
;
}
)
;
