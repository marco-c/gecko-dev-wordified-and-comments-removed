"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
TelemetryEnvironment
:
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
sys
.
mjs
"
}
)
;
const
REMOTE_SETTINGS_RESULTS
=
[
{
id
:
1
url
:
"
https
:
/
/
example
.
com
/
sponsored
"
title
:
"
Sponsored
suggestion
"
keywords
:
[
"
sponsored
"
]
click_url
:
"
https
:
/
/
example
.
com
/
click
"
impression_url
:
"
https
:
/
/
example
.
com
/
impression
"
advertiser
:
"
testadvertiser
"
}
]
;
add_setup
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
Services
.
telemetry
.
clearScalars
(
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
}
{
setAsDefault
:
true
}
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
remoteSettingsRecords
:
[
{
type
:
"
data
"
attachment
:
REMOTE_SETTINGS_RESULTS
}
]
}
)
;
}
)
;
add_task
(
async
function
enableToggled
(
)
{
let
enabled
=
UrlbarPrefs
.
get
(
"
suggest
.
quicksuggest
.
nonsponsored
"
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
enabled
)
;
Assert
.
equal
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
]
enabled
"
suggest
.
quicksuggest
.
nonsponsored
is
correct
in
TelemetryEnvironment
"
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
false
]
]
}
)
;
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
enabled
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
!
enabled
)
;
}
)
;
add_task
(
async
function
sponsoredToggled
(
)
{
let
enabled
=
UrlbarPrefs
.
get
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
enabled
)
;
Assert
.
equal
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
]
enabled
"
suggest
.
quicksuggest
.
sponsored
is
correct
in
TelemetryEnvironment
"
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
false
]
]
}
)
;
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
enabled
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
!
enabled
)
;
}
)
;
add_task
(
async
function
dataCollectionToggled
(
)
{
let
enabled
=
UrlbarPrefs
.
get
(
"
quicksuggest
.
dataCollection
.
enabled
"
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
enabled
)
;
Assert
.
equal
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
]
enabled
"
quicksuggest
.
dataCollection
.
enabled
is
correct
in
TelemetryEnvironment
"
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
false
]
]
}
)
;
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
enabled
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
!
enabled
)
;
}
)
;
add_task
(
async
function
telemetryEnvironmentOnStartup
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
null
)
;
await
TelemetryEnvironment
.
testCleanRestart
(
)
.
onInitialized
(
)
;
let
prefs
=
[
.
.
.
new
Set
(
[
.
.
.
Object
.
values
(
UrlbarPrefs
.
FIREFOX_SUGGEST_UI_PREFS_BY_VARIABLE
)
.
.
.
Object
.
values
(
UrlbarPrefs
.
FIREFOX_SUGGEST_DEFAULT_PREFS
)
.
map
(
valuesByPrefName
=
>
Object
.
keys
(
valuesByPrefName
)
)
.
flat
(
)
]
)
]
;
prefs
=
prefs
.
filter
(
p
=
>
browser
.
urlbar
.
{
p
}
in
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
)
;
info
(
"
Got
startup
prefs
:
"
+
JSON
.
stringify
(
prefs
)
)
;
Assert
.
deepEqual
(
prefs
.
sort
(
)
[
"
quicksuggest
.
dataCollection
.
enabled
"
"
suggest
.
quicksuggest
.
nonsponsored
"
"
suggest
.
quicksuggest
.
sponsored
"
]
"
Expected
startup
prefs
"
)
;
for
(
let
p
of
prefs
)
{
UrlbarPrefs
.
clear
(
p
)
;
}
let
defaultValues
=
Object
.
fromEntries
(
prefs
.
map
(
p
=
>
[
p
UrlbarPrefs
.
get
(
p
)
]
)
)
;
let
environmentInitPromise
=
TelemetryEnvironment
.
testCleanRestart
(
)
.
onInitialized
(
)
;
await
UrlbarPrefs
.
updateFirefoxSuggestScenario
(
{
isStartup
:
true
scenario
:
"
online
"
defaultPrefs
:
{
online
:
Object
.
fromEntries
(
Object
.
entries
(
defaultValues
)
.
map
(
(
[
p
value
]
)
=
>
[
p
!
value
]
)
)
}
}
)
;
await
environmentInitPromise
;
for
(
let
[
p
value
]
of
Object
.
entries
(
defaultValues
)
)
{
let
expected
=
!
value
;
Assert
.
strictEqual
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
browser
.
urlbar
.
{
p
}
]
expected
Check
1
:
{
p
}
is
{
expected
}
in
TelemetryEnvironment
)
;
}
environmentInitPromise
=
TelemetryEnvironment
.
testCleanRestart
(
)
.
onInitialized
(
)
;
await
UrlbarPrefs
.
updateFirefoxSuggestScenario
(
{
isStartup
:
true
scenario
:
"
online
"
defaultPrefs
:
{
online
:
defaultValues
}
}
)
;
await
environmentInitPromise
;
for
(
let
[
p
value
]
of
Object
.
entries
(
defaultValues
)
)
{
let
expected
=
value
;
Assert
.
strictEqual
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
browser
.
urlbar
.
{
p
}
]
expected
Check
2
:
{
p
}
is
{
expected
}
in
TelemetryEnvironment
)
;
}
await
TelemetryEnvironment
.
testCleanRestart
(
)
.
onInitialized
(
)
;
}
)
;
