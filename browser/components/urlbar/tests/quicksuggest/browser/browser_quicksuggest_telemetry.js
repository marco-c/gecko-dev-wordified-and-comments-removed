"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
UrlbarView
:
"
resource
:
/
/
/
modules
/
UrlbarView
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
CONTEXTUAL_SERVICES_PING_TYPES
:
"
resource
:
/
/
/
modules
/
PartnerLinkAttribution
.
jsm
"
NimbusFeatures
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
sinon
:
"
resource
:
/
/
testing
-
common
/
Sinon
.
jsm
"
TelemetryEnvironment
:
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
}
)
;
const
{
TELEMETRY_SCALARS
}
=
UrlbarProviderQuickSuggest
;
const
SUGGESTIONS
=
[
{
id
:
1
url
:
"
http
:
/
/
example
.
com
/
sponsored
"
title
:
"
Sponsored
suggestion
"
keywords
:
[
"
sponsored
"
]
click_url
:
"
http
:
/
/
example
.
com
/
click
"
impression_url
:
"
http
:
/
/
example
.
com
/
impression
"
advertiser
:
"
TestAdvertiser
"
}
{
id
:
2
url
:
"
http
:
/
/
example
.
com
/
nonsponsored
"
title
:
"
Non
-
sponsored
suggestion
"
keywords
:
[
"
nonsponsored
"
]
click_url
:
"
http
:
/
/
example
.
com
/
click
"
impression_url
:
"
http
:
/
/
example
.
com
/
impression
"
advertiser
:
"
TestAdvertiser
"
iab_category
:
"
5
-
Education
"
}
]
;
const
SPONSORED_SUGGESTION
=
SUGGESTIONS
[
0
]
;
let
spy
;
requestLongerTimeout
(
5
)
;
add_setup
(
async
function
(
)
{
(
{
spy
}
=
QuickSuggestTestUtils
.
createTelemetryPingSpy
(
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
}
{
setAsDefault
:
true
}
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
SUGGESTIONS
)
;
}
)
;
function
add_suggestions_task
(
fn
)
{
let
taskFn
=
async
(
)
=
>
{
for
(
let
suggestion
of
SUGGESTIONS
)
{
info
(
Running
{
fn
.
name
}
with
suggestion
{
JSON
.
stringify
(
suggestion
)
}
)
;
await
fn
(
suggestion
)
;
}
}
;
Object
.
defineProperty
(
taskFn
"
name
"
{
value
:
fn
.
name
}
)
;
add_task
(
taskFn
)
;
}
add_suggestions_task
(
async
function
impression_offline_dataCollectionDisabled
(
suggestion
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
await
doImpressionTest
(
{
suggestion
improve_suggest_experience_checked
:
false
}
)
;
}
)
;
add_suggestions_task
(
async
function
impression_offline_dataCollectionEnabled
(
suggestion
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
await
doImpressionTest
(
{
suggestion
improve_suggest_experience_checked
:
true
}
)
;
}
)
;
add_suggestions_task
(
async
function
impression_online_dataCollectionDisabled
(
suggestion
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
online
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
doImpressionTest
(
{
suggestion
improve_suggest_experience_checked
:
false
}
)
;
}
)
;
add_suggestions_task
(
async
function
impression_online_dataCollectionEnabled
(
suggestion
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
online
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
doImpressionTest
(
{
suggestion
improve_suggest_experience_checked
:
true
}
)
;
}
)
;
add_suggestions_task
(
async
function
impression_bestMatch
(
suggestion
)
{
UrlbarPrefs
.
set
(
"
bestMatch
.
enabled
"
true
)
;
await
doImpressionTest
(
{
suggestion
improve_suggest_experience_checked
:
false
isBestMatch
:
true
}
)
;
UrlbarPrefs
.
clear
(
"
bestMatch
.
enabled
"
)
;
}
)
;
async
function
doImpressionTest
(
{
improve_suggest_experience_checked
suggestion
isBestMatch
=
false
}
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
suggestion
.
keywords
[
0
]
fireInputEvent
:
true
}
)
;
let
index
=
1
;
let
isSponsored
=
suggestion
.
keywords
[
0
]
=
=
"
sponsored
"
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
isSponsored
isBestMatch
url
:
suggestion
.
url
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
let
scalars
=
{
[
TELEMETRY_SCALARS
.
IMPRESSION
]
:
index
+
1
}
;
if
(
isBestMatch
)
{
if
(
isSponsored
)
{
scalars
=
{
.
.
.
scalars
[
TELEMETRY_SCALARS
.
IMPRESSION_SPONSORED_BEST_MATCH
]
:
index
+
1
}
;
}
else
{
scalars
=
{
.
.
.
scalars
[
TELEMETRY_SCALARS
.
IMPRESSION_NONSPONSORED_BEST_MATCH
]
:
index
+
1
}
;
}
}
QuickSuggestTestUtils
.
assertScalars
(
scalars
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
{
category
:
QuickSuggest
.
TELEMETRY_EVENT_CATEGORY
method
:
"
engagement
"
object
:
"
impression_only
"
extra
:
{
match_type
:
isBestMatch
?
"
best
-
match
"
:
"
firefox
-
suggest
"
position
:
String
(
index
+
1
)
suggestion_type
:
isSponsored
?
"
sponsored
"
:
"
nonsponsored
"
}
}
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
{
type
:
CONTEXTUAL_SERVICES_PING_TYPES
.
QS_IMPRESSION
payload
:
{
improve_suggest_experience_checked
block_id
:
suggestion
.
id
is_clicked
:
false
match_type
:
isBestMatch
?
"
best
-
match
"
:
"
firefox
-
suggest
"
position
:
index
+
1
}
}
]
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
await
QuickSuggestTestUtils
.
setScenario
(
null
)
;
UrlbarPrefs
.
clear
(
"
quicksuggest
.
dataCollection
.
enabled
"
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
nonsponsored
"
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
}
add_task
(
async
function
noImpression_abandonment
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
sponsored
"
fireInputEvent
:
true
}
)
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
url
:
SPONSORED_SUGGESTION
.
url
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
gURLBar
.
blur
(
)
;
}
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
}
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
]
)
;
}
)
;
}
)
;
add_task
(
async
function
noImpression_noQuickSuggestResult
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
noImpression_noQuickSuggestResult
"
fireInputEvent
:
true
}
)
;
await
QuickSuggestTestUtils
.
assertNoQuickSuggestResults
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
}
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
]
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_suggestions_task
(
async
function
click_keyboard_offline_dataCollectionDisabled
(
suggestion
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
await
doClickTest
(
{
suggestion
improve_suggest_experience_checked
:
false
useKeyboard
:
true
}
)
;
}
)
;
add_suggestions_task
(
async
function
click_keyboard_offline_dataCollectionEnabled
(
suggestion
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
await
doClickTest
(
{
suggestion
improve_suggest_experience_checked
:
true
useKeyboard
:
true
}
)
;
}
)
;
add_suggestions_task
(
async
function
click_keyboard_online_dataCollectionDisabled
(
suggestion
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
online
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
doClickTest
(
{
suggestion
improve_suggest_experience_checked
:
false
useKeyboard
:
true
}
)
;
}
)
;
add_suggestions_task
(
async
function
click_keyboard_online_dataCollectionEnabled
(
suggestion
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
online
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
doClickTest
(
{
suggestion
improve_suggest_experience_checked
:
true
useKeyboard
:
true
}
)
;
}
)
;
add_suggestions_task
(
async
function
click_mouse_offline_dataCollectionDisabled
(
suggestion
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
await
doClickTest
(
{
suggestion
improve_suggest_experience_checked
:
false
useKeyboard
:
false
}
)
;
}
)
;
add_suggestions_task
(
async
function
click_mouse_offline_dataCollectionEnabled
(
suggestion
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
await
doClickTest
(
{
suggestion
improve_suggest_experience_checked
:
true
useKeyboard
:
false
}
)
;
}
)
;
add_suggestions_task
(
async
function
click_mouse_online_dataCollectionDisabled
(
suggestion
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
online
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
doClickTest
(
{
suggestion
improve_suggest_experience_checked
:
false
useKeyboard
:
false
}
)
;
}
)
;
add_suggestions_task
(
async
function
click_mouse_online_dataCollectionEnabled
(
suggestion
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
online
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
doClickTest
(
{
suggestion
improve_suggest_experience_checked
:
true
useKeyboard
:
false
}
)
;
}
)
;
add_suggestions_task
(
async
function
click_keyboard_bestMatch
(
suggestion
)
{
UrlbarPrefs
.
set
(
"
bestMatch
.
enabled
"
true
)
;
await
doClickTest
(
{
suggestion
improve_suggest_experience_checked
:
false
useKeyboard
:
true
isBestMatch
:
true
}
)
;
UrlbarPrefs
.
clear
(
"
bestMatch
.
enabled
"
)
;
}
)
;
add_suggestions_task
(
async
function
click_mouse_bestMatch
(
suggestion
)
{
UrlbarPrefs
.
set
(
"
bestMatch
.
enabled
"
true
)
;
await
doClickTest
(
{
suggestion
improve_suggest_experience_checked
:
false
isBestMatch
:
true
}
)
;
UrlbarPrefs
.
clear
(
"
bestMatch
.
enabled
"
)
;
}
)
;
async
function
doClickTest
(
{
improve_suggest_experience_checked
suggestion
useKeyboard
isBestMatch
=
false
}
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
suggestion
.
keywords
[
0
]
fireInputEvent
:
true
}
)
;
let
index
=
1
;
let
isSponsored
=
suggestion
.
keywords
[
0
]
=
=
"
sponsored
"
;
let
result
=
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
isSponsored
isBestMatch
url
:
suggestion
.
url
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
if
(
useKeyboard
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
else
{
EventUtils
.
synthesizeMouseAtCenter
(
result
.
element
.
row
{
}
)
;
}
}
)
;
let
scalars
=
{
[
TELEMETRY_SCALARS
.
IMPRESSION
]
:
index
+
1
[
TELEMETRY_SCALARS
.
CLICK
]
:
index
+
1
}
;
if
(
isBestMatch
)
{
if
(
isSponsored
)
{
scalars
=
{
.
.
.
scalars
[
TELEMETRY_SCALARS
.
IMPRESSION_SPONSORED_BEST_MATCH
]
:
index
+
1
[
TELEMETRY_SCALARS
.
CLICK_SPONSORED_BEST_MATCH
]
:
index
+
1
}
;
}
else
{
scalars
=
{
.
.
.
scalars
[
TELEMETRY_SCALARS
.
IMPRESSION_NONSPONSORED_BEST_MATCH
]
:
index
+
1
[
TELEMETRY_SCALARS
.
CLICK_NONSPONSORED_BEST_MATCH
]
:
index
+
1
}
;
}
}
QuickSuggestTestUtils
.
assertScalars
(
scalars
)
;
let
match_type
=
isBestMatch
?
"
best
-
match
"
:
"
firefox
-
suggest
"
;
QuickSuggestTestUtils
.
assertEvents
(
[
{
category
:
QuickSuggest
.
TELEMETRY_EVENT_CATEGORY
method
:
"
engagement
"
object
:
"
click
"
extra
:
{
match_type
position
:
String
(
index
+
1
)
suggestion_type
:
isSponsored
?
"
sponsored
"
:
"
nonsponsored
"
}
}
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
{
type
:
CONTEXTUAL_SERVICES_PING_TYPES
.
QS_IMPRESSION
payload
:
{
improve_suggest_experience_checked
match_type
is_clicked
:
true
block_id
:
suggestion
.
id
position
:
index
+
1
}
}
{
type
:
CONTEXTUAL_SERVICES_PING_TYPES
.
QS_SELECTION
payload
:
{
improve_suggest_experience_checked
match_type
block_id
:
suggestion
.
id
position
:
index
+
1
}
}
]
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
QuickSuggestTestUtils
.
setScenario
(
null
)
;
UrlbarPrefs
.
clear
(
"
quicksuggest
.
dataCollection
.
enabled
"
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
nonsponsored
"
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
}
add_task
(
async
function
click_beforeSearchSuggestions
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchSuggestionsFirst
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
withSuggestions
(
async
(
)
=
>
{
Services
.
telemetry
.
clearEvents
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
sponsored
"
fireInputEvent
:
true
}
)
;
let
resultCount
=
UrlbarTestUtils
.
getResultCount
(
window
)
;
Assert
.
equal
(
resultCount
4
"
Result
count
=
=
1
heuristic
+
1
quick
suggest
+
2
suggestions
"
)
;
let
index
=
resultCount
-
3
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
url
:
SPONSORED_SUGGESTION
.
url
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
repeat
:
index
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
[
TELEMETRY_SCALARS
.
IMPRESSION
]
:
index
+
1
[
TELEMETRY_SCALARS
.
CLICK
]
:
index
+
1
}
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
{
category
:
QuickSuggest
.
TELEMETRY_EVENT_CATEGORY
method
:
"
engagement
"
object
:
"
click
"
extra
:
{
match_type
:
"
firefox
-
suggest
"
position
:
String
(
index
+
1
)
suggestion_type
:
"
sponsored
"
}
}
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
{
type
:
CONTEXTUAL_SERVICES_PING_TYPES
.
QS_IMPRESSION
payload
:
{
is_clicked
:
true
position
:
index
+
1
}
}
{
type
:
CONTEXTUAL_SERVICES_PING_TYPES
.
QS_SELECTION
payload
:
{
position
:
index
+
1
}
}
]
)
;
}
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_suggestions_task
(
async
function
help_keyboard
(
suggestion
)
{
await
doHelpTest
(
{
suggestion
useKeyboard
:
true
}
)
;
}
)
;
add_suggestions_task
(
async
function
help_mouse
(
suggestion
)
{
await
doHelpTest
(
{
suggestion
useKeyboard
:
false
}
)
;
}
)
;
add_suggestions_task
(
async
function
help_keyboard_bestMatch
(
suggestion
)
{
UrlbarPrefs
.
set
(
"
bestMatch
.
enabled
"
true
)
;
await
doHelpTest
(
{
suggestion
useKeyboard
:
true
isBestMatch
:
true
}
)
;
UrlbarPrefs
.
clear
(
"
bestMatch
.
enabled
"
)
;
}
)
;
add_suggestions_task
(
async
function
help_mouse_bestMatch
(
suggestion
)
{
UrlbarPrefs
.
set
(
"
bestMatch
.
enabled
"
true
)
;
await
doHelpTest
(
{
suggestion
useKeyboard
:
false
isBestMatch
:
true
}
)
;
UrlbarPrefs
.
clear
(
"
bestMatch
.
enabled
"
)
;
}
)
;
async
function
doHelpTest
(
{
suggestion
useKeyboard
isBestMatch
=
false
}
)
{
Services
.
telemetry
.
clearEvents
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
suggestion
.
keywords
[
0
]
fireInputEvent
:
true
}
)
;
let
index
=
1
;
let
isSponsored
=
suggestion
.
keywords
[
0
]
=
=
"
sponsored
"
;
let
result
=
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
isSponsored
isBestMatch
url
:
suggestion
.
url
}
)
;
let
helpButton
=
result
.
element
.
row
.
_buttons
.
get
(
"
help
"
)
;
Assert
.
ok
(
helpButton
"
The
result
has
a
help
button
"
)
;
let
helpLoadPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
if
(
useKeyboard
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
repeat
:
2
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
else
{
EventUtils
.
synthesizeMouseAtCenter
(
helpButton
{
}
)
;
}
}
)
;
await
helpLoadPromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
QuickSuggest
.
HELP_URL
"
Help
URL
loaded
"
)
;
let
scalars
=
{
[
TELEMETRY_SCALARS
.
IMPRESSION
]
:
index
+
1
[
TELEMETRY_SCALARS
.
HELP
]
:
index
+
1
}
;
if
(
isBestMatch
)
{
if
(
isSponsored
)
{
scalars
=
{
.
.
.
scalars
[
TELEMETRY_SCALARS
.
IMPRESSION_SPONSORED_BEST_MATCH
]
:
index
+
1
[
TELEMETRY_SCALARS
.
HELP_SPONSORED_BEST_MATCH
]
:
index
+
1
}
;
}
else
{
scalars
=
{
.
.
.
scalars
[
TELEMETRY_SCALARS
.
IMPRESSION_NONSPONSORED_BEST_MATCH
]
:
index
+
1
[
TELEMETRY_SCALARS
.
HELP_NONSPONSORED_BEST_MATCH
]
:
index
+
1
}
;
}
}
QuickSuggestTestUtils
.
assertScalars
(
scalars
)
;
let
match_type
=
isBestMatch
?
"
best
-
match
"
:
"
firefox
-
suggest
"
;
QuickSuggestTestUtils
.
assertEvents
(
[
{
category
:
QuickSuggest
.
TELEMETRY_EVENT_CATEGORY
method
:
"
engagement
"
object
:
"
help
"
extra
:
{
match_type
position
:
String
(
index
+
1
)
suggestion_type
:
isSponsored
?
"
sponsored
"
:
"
nonsponsored
"
}
}
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
{
type
:
CONTEXTUAL_SERVICES_PING_TYPES
.
QS_IMPRESSION
payload
:
{
match_type
block_id
:
suggestion
.
id
is_clicked
:
false
position
:
index
+
1
}
}
]
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
add_task
(
async
function
enableToggled
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
enabled
=
UrlbarPrefs
.
get
(
"
suggest
.
quicksuggest
.
nonsponsored
"
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
enabled
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
{
category
:
QuickSuggest
.
TELEMETRY_EVENT_CATEGORY
method
:
"
enable_toggled
"
object
:
enabled
?
"
enabled
"
:
"
disabled
"
}
]
)
;
Assert
.
equal
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
]
enabled
"
suggest
.
quicksuggest
.
nonsponsored
is
correct
in
TelemetryEnvironment
"
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
false
]
]
}
)
;
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
enabled
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
]
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
!
enabled
)
;
}
)
;
add_task
(
async
function
sponsoredToggled
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
enabled
=
UrlbarPrefs
.
get
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
enabled
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
{
category
:
QuickSuggest
.
TELEMETRY_EVENT_CATEGORY
method
:
"
sponsored_toggled
"
object
:
enabled
?
"
enabled
"
:
"
disabled
"
}
]
)
;
Assert
.
equal
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
]
enabled
"
suggest
.
quicksuggest
.
sponsored
is
correct
in
TelemetryEnvironment
"
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
false
]
]
}
)
;
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
enabled
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
]
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
!
enabled
)
;
}
)
;
add_task
(
async
function
dataCollectionToggled
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
enabled
=
UrlbarPrefs
.
get
(
"
quicksuggest
.
dataCollection
.
enabled
"
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
enabled
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
{
category
:
QuickSuggest
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
enabled
?
"
enabled
"
:
"
disabled
"
}
]
)
;
Assert
.
equal
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
]
enabled
"
quicksuggest
.
dataCollection
.
enabled
is
correct
in
TelemetryEnvironment
"
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
false
]
]
}
)
;
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
enabled
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
]
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
!
enabled
)
;
}
)
;
add_task
(
async
function
bestmatchCheckbox
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
bestMatch
.
enabled
"
true
]
]
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
preferences
#
privacy
"
true
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
Services
.
telemetry
.
clearScalars
(
)
;
const
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
const
checkboxId
=
"
firefoxSuggestBestMatch
"
;
const
checkbox
=
doc
.
getElementById
(
checkboxId
)
;
checkbox
.
scrollIntoView
(
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
checkboxId
{
}
gBrowser
.
selectedBrowser
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
"
browser
.
ui
.
interaction
.
preferences_panePrivacy
"
checkboxId
1
)
;
}
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
bestmatchLearnMore
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
bestMatch
.
enabled
"
true
]
]
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
preferences
#
privacy
"
true
)
;
Services
.
telemetry
.
clearScalars
(
)
;
const
learnMoreLinkId
=
"
firefoxSuggestBestMatchLearnMore
"
;
const
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
const
link
=
doc
.
getElementById
(
learnMoreLinkId
)
;
link
.
scrollIntoView
(
)
;
const
onLearnMoreOpenedByClick
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
QuickSuggest
.
HELP_URL
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
learnMoreLinkId
{
}
gBrowser
.
selectedBrowser
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
"
browser
.
ui
.
interaction
.
preferences_panePrivacy
"
"
firefoxSuggestBestMatchLearnMore
"
1
)
;
await
onLearnMoreOpenedByClick
;
gBrowser
.
removeCurrentTab
(
)
;
Services
.
telemetry
.
clearScalars
(
)
;
link
.
focus
(
)
;
const
onLearnMoreOpenedByKey
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
QuickSuggest
.
HELP_URL
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
}
gBrowser
.
selectedBrowser
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
"
browser
.
ui
.
interaction
.
preferences_panePrivacy
"
"
firefoxSuggestBestMatchLearnMore
"
1
)
;
await
onLearnMoreOpenedByKey
;
gBrowser
.
removeCurrentTab
(
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
nimbusExposure
(
)
{
await
QuickSuggestTestUtils
.
clearExposureEvent
(
)
;
await
QuickSuggestTestUtils
.
withExperiment
(
{
valueOverrides
:
{
quickSuggestEnabled
:
true
quickSuggestShouldShowOnboardingDialog
:
false
}
callback
:
async
(
)
=
>
{
await
QuickSuggestTestUtils
.
assertExposureEvent
(
false
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
nimbusExposure
no
result
"
fireInputEvent
:
true
}
)
;
await
QuickSuggestTestUtils
.
assertNoQuickSuggestResults
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
QuickSuggestTestUtils
.
assertExposureEvent
(
false
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
sponsored
"
fireInputEvent
:
true
}
)
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
:
1
url
:
SPONSORED_SUGGESTION
.
url
}
)
;
await
QuickSuggestTestUtils
.
assertExposureEvent
(
true
"
control
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
}
)
;
}
)
;
add_task
(
async
function
telemetryEnvironmentOnStartup
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
null
)
;
await
TelemetryEnvironment
.
testCleanRestart
(
)
.
onInitialized
(
)
;
let
prefs
=
[
.
.
.
new
Set
(
[
.
.
.
Object
.
values
(
UrlbarPrefs
.
FIREFOX_SUGGEST_UI_PREFS_BY_VARIABLE
)
.
.
.
Object
.
values
(
UrlbarPrefs
.
FIREFOX_SUGGEST_DEFAULT_PREFS
)
.
map
(
valuesByPrefName
=
>
Object
.
keys
(
valuesByPrefName
)
)
.
flat
(
)
]
)
]
;
prefs
=
prefs
.
filter
(
p
=
>
browser
.
urlbar
.
{
p
}
in
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
)
;
info
(
"
Got
startup
prefs
:
"
+
JSON
.
stringify
(
prefs
)
)
;
Assert
.
deepEqual
(
prefs
.
sort
(
)
[
"
quicksuggest
.
dataCollection
.
enabled
"
"
suggest
.
quicksuggest
.
nonsponsored
"
"
suggest
.
quicksuggest
.
sponsored
"
]
"
Expected
startup
prefs
"
)
;
for
(
let
p
of
prefs
)
{
UrlbarPrefs
.
clear
(
p
)
;
}
let
defaultValues
=
Object
.
fromEntries
(
prefs
.
map
(
p
=
>
[
p
UrlbarPrefs
.
get
(
p
)
]
)
)
;
let
environmentInitPromise
=
TelemetryEnvironment
.
testCleanRestart
(
)
.
onInitialized
(
)
;
await
UrlbarPrefs
.
updateFirefoxSuggestScenario
(
{
isStartup
:
true
scenario
:
"
online
"
defaultPrefs
:
{
online
:
Object
.
fromEntries
(
Object
.
entries
(
defaultValues
)
.
map
(
(
[
p
value
]
)
=
>
[
p
!
value
]
)
)
}
}
)
;
await
environmentInitPromise
;
for
(
let
[
p
value
]
of
Object
.
entries
(
defaultValues
)
)
{
let
expected
=
!
value
;
Assert
.
strictEqual
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
browser
.
urlbar
.
{
p
}
]
expected
Check
1
:
{
p
}
is
{
expected
}
in
TelemetryEnvironment
)
;
}
environmentInitPromise
=
TelemetryEnvironment
.
testCleanRestart
(
)
.
onInitialized
(
)
;
await
UrlbarPrefs
.
updateFirefoxSuggestScenario
(
{
isStartup
:
true
scenario
:
"
online
"
defaultPrefs
:
{
online
:
defaultValues
}
}
)
;
await
environmentInitPromise
;
for
(
let
[
p
value
]
of
Object
.
entries
(
defaultValues
)
)
{
let
expected
=
value
;
Assert
.
strictEqual
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
browser
.
urlbar
.
{
p
}
]
expected
Check
2
:
{
p
}
is
{
expected
}
in
TelemetryEnvironment
)
;
}
await
TelemetryEnvironment
.
testCleanRestart
(
)
.
onInitialized
(
)
;
}
)
;
add_task
(
async
function
impression_hiddenRow
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
originalRemoveStaleRowsTimeout
=
UrlbarView
.
removeStaleRowsTimeout
;
UrlbarView
.
removeStaleRowsTimeout
=
30000
;
registerCleanupFunction
(
(
)
=
>
{
UrlbarView
.
removeStaleRowsTimeout
=
originalRemoveStaleRowsTimeout
;
}
)
;
let
maxCount
=
UrlbarPrefs
.
get
(
"
maxRichResults
"
)
;
let
results
=
[
]
;
for
(
let
i
=
0
;
i
<
maxCount
;
i
+
+
)
{
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
engine
:
"
Example
"
suggestion
:
"
suggestion
"
+
i
lowerCaseSuggestion
:
"
suggestion
"
+
i
query
:
"
test
"
}
)
)
;
}
let
provider
=
new
DelayingTestProvider
(
{
results
}
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
}
)
;
provider
.
finishQueryPromise
=
Promise
.
resolve
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
fireInputEvent
:
true
}
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
maxCount
"
Row
count
after
first
search
"
)
;
for
(
let
i
=
1
;
i
<
maxCount
;
i
+
+
)
{
let
result
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
i
)
;
Assert
.
equal
(
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
"
Expected
result
type
at
index
"
+
i
)
;
Assert
.
equal
(
result
.
source
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
"
Expected
result
source
at
index
"
+
i
)
;
}
results
=
[
]
;
for
(
let
i
=
0
;
i
<
maxCount
;
i
+
+
)
{
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
{
url
:
"
http
:
/
/
example
.
com
/
"
+
i
}
)
)
;
}
provider
.
_results
=
results
;
let
mutationPromise
=
new
Promise
(
resolve
=
>
{
let
observer
=
new
MutationObserver
(
mutations
=
>
{
observer
.
disconnect
(
)
;
resolve
(
)
;
}
)
;
observer
.
observe
(
UrlbarTestUtils
.
getResultsContainer
(
window
)
{
childList
:
true
}
)
;
}
)
;
let
resolveQuery
;
provider
.
finishQueryPromise
=
new
Promise
(
resolve
=
>
(
resolveQuery
=
resolve
)
)
;
gURLBar
.
focus
(
)
;
let
queryPromise
=
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
SUGGESTIONS
[
0
]
.
keywords
[
0
]
fireInputEvent
:
true
}
)
;
await
mutationPromise
;
Assert
.
equal
(
UrlbarTestUtils
.
getResultCount
(
window
)
2
*
maxCount
-
1
"
Row
count
before
search
finishes
"
)
;
let
rows
=
UrlbarTestUtils
.
getResultsContainer
(
window
)
.
children
;
for
(
let
i
=
1
;
i
<
rows
.
length
;
i
+
+
)
{
let
row
=
rows
[
i
]
;
if
(
i
<
maxCount
)
{
Assert
.
equal
(
row
.
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
"
Row
is
a
search
result
at
index
"
+
i
)
;
Assert
.
equal
(
row
.
getAttribute
(
"
stale
"
)
"
true
"
"
Row
is
stale
at
index
"
+
i
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
row
)
"
Row
is
visible
at
index
"
+
i
)
;
}
else
{
Assert
.
equal
(
row
.
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
URL
"
Row
is
a
URL
result
at
index
"
+
i
)
;
Assert
.
ok
(
!
row
.
hasAttribute
(
"
stale
"
)
"
Row
is
not
stale
at
index
"
+
i
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
row
)
"
Row
is
hidden
at
index
"
+
i
)
;
}
}
let
lastRow
=
rows
[
rows
.
length
-
1
]
;
Assert
.
equal
(
lastRow
.
result
.
providerName
"
UrlbarProviderQuickSuggest
"
"
Last
row
is
the
quick
suggest
result
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
lastRow
)
"
Double
check
:
Last
row
is
hidden
"
)
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
await
loadPromise
;
resolveQuery
(
)
;
await
queryPromise
;
QuickSuggestTestUtils
.
assertScalars
(
{
}
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
]
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
UrlbarView
.
removeStaleRowsTimeout
=
originalRemoveStaleRowsTimeout
;
}
)
;
add_task
(
async
function
impression_notAddedToView
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
this
doesn
'
t
match
anything
"
fireInputEvent
:
true
}
)
;
await
QuickSuggestTestUtils
.
assertNoQuickSuggestResults
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
doEngagementWithoutAddingResultToView
(
SUGGESTIONS
[
0
]
.
keywords
[
0
]
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
}
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
]
)
;
}
)
;
}
)
;
add_task
(
async
function
impression_previousResultStillVisible
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
let
firstSuggestion
=
SUGGESTIONS
[
0
]
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
firstSuggestion
.
keywords
[
0
]
fireInputEvent
:
true
}
)
;
let
index
=
1
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
url
:
firstSuggestion
.
url
}
)
;
await
doEngagementWithoutAddingResultToView
(
SUGGESTIONS
[
1
]
.
keywords
[
0
]
index
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
[
TELEMETRY_SCALARS
.
IMPRESSION
]
:
index
+
1
}
)
;
QuickSuggestTestUtils
.
assertEvents
(
[
{
category
:
QuickSuggest
.
TELEMETRY_EVENT_CATEGORY
method
:
"
engagement
"
object
:
"
impression_only
"
extra
:
{
match_type
:
"
firefox
-
suggest
"
position
:
String
(
index
+
1
)
suggestion_type
:
"
sponsored
"
}
}
]
)
;
QuickSuggestTestUtils
.
assertPings
(
spy
[
{
type
:
CONTEXTUAL_SERVICES_PING_TYPES
.
QS_IMPRESSION
payload
:
{
improve_suggest_experience_checked
:
false
block_id
:
firstSuggestion
.
id
is_clicked
:
false
match_type
:
"
firefox
-
suggest
"
position
:
index
+
1
}
}
]
)
;
}
)
;
}
)
;
async
function
doEngagementWithoutAddingResultToView
(
searchString
previousResultIndex
=
-
1
)
{
let
originalChunkDelayMs
=
UrlbarProvidersManager
.
_chunkResultsDelayMs
;
UrlbarProvidersManager
.
_chunkResultsDelayMs
=
30000
;
registerCleanupFunction
(
(
)
=
>
{
UrlbarProvidersManager
.
_chunkResultsDelayMs
=
originalChunkDelayMs
;
}
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
let
getPriorityStub
=
sandbox
.
stub
(
UrlbarProviderQuickSuggest
"
getPriority
"
)
;
getPriorityStub
.
returns
(
Infinity
)
;
let
onEngagementSpy
=
sandbox
.
spy
(
UrlbarProviderQuickSuggest
"
onEngagement
"
)
;
let
sandboxCleanup
=
(
)
=
>
{
getPriorityStub
?
.
restore
(
)
;
getPriorityStub
=
null
;
sandbox
?
.
restore
(
)
;
sandbox
=
null
;
}
;
registerCleanupFunction
(
sandboxCleanup
)
;
let
provider
=
new
DelayingTestProvider
(
{
results
:
[
]
priority
:
Infinity
type
:
UrlbarUtils
.
PROVIDER_TYPE
.
HEURISTIC
}
)
;
UrlbarProvidersManager
.
registerProvider
(
provider
)
;
let
resolveQuery
;
provider
.
finishQueryPromise
=
new
Promise
(
r
=
>
(
resolveQuery
=
r
)
)
;
let
context
;
let
queryListener
=
{
onQueryStarted
:
c
=
>
(
context
=
c
)
}
;
gURLBar
.
controller
.
addQueryListener
(
queryListener
)
;
gURLBar
.
focus
(
)
;
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
searchString
fireInputEvent
:
true
}
)
;
let
result
=
await
TestUtils
.
waitForCondition
(
(
)
=
>
context
?
.
results
.
find
(
r
=
>
r
.
providerName
=
=
"
UrlbarProviderQuickSuggest
"
)
"
Waiting
for
quick
suggest
result
to
be
added
to
context
.
results
"
)
;
gURLBar
.
controller
.
removeQueryListener
(
queryListener
)
;
Assert
.
equal
(
result
.
rowIndex
-
1
"
result
.
rowIndex
is
still
-
1
"
)
;
if
(
previousResultIndex
>
=
0
)
{
let
rows
=
gURLBar
.
view
.
panel
.
querySelector
(
"
.
urlbarView
-
results
"
)
;
Assert
.
equal
(
rows
.
children
[
previousResultIndex
]
.
result
.
providerName
"
UrlbarProviderQuickSuggest
"
"
Result
already
in
view
is
a
quick
suggest
"
)
;
}
else
{
Assert
.
ok
(
!
gURLBar
.
view
.
isOpen
"
View
is
closed
"
)
;
}
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
await
loadPromise
;
let
engagementCalls
=
onEngagementSpy
.
getCalls
(
)
.
filter
(
call
=
>
{
let
state
=
call
.
args
[
1
]
;
return
state
=
=
"
engagement
"
;
}
)
;
Assert
.
equal
(
engagementCalls
.
length
1
"
One
engagement
occurred
"
)
;
resolveQuery
(
)
;
UrlbarProvidersManager
.
unregisterProvider
(
provider
)
;
UrlbarProvidersManager
.
_chunkResultsDelayMs
=
originalChunkDelayMs
;
sandboxCleanup
(
)
;
}
class
DelayingTestProvider
extends
UrlbarTestUtils
.
TestProvider
{
finishQueryPromise
=
null
;
async
startQuery
(
context
addCallback
)
{
for
(
let
result
of
this
.
_results
)
{
addCallback
(
this
result
)
;
}
await
this
.
finishQueryPromise
;
}
}
async
function
withSuggestions
(
callback
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
searches
"
true
]
]
}
)
;
let
engine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
{
url
:
getRootDirectory
(
gTestPath
)
+
"
searchSuggestionEngine
.
xml
"
}
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
engine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
try
{
await
callback
(
engine
)
;
}
finally
{
await
Services
.
search
.
setDefault
(
oldDefaultEngine
Ci
.
nsISearchService
.
CHANGE_REASON_UNKNOWN
)
;
await
Services
.
search
.
removeEngine
(
engine
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
}
