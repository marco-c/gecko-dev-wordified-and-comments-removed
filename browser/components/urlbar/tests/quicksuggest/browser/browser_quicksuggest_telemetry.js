"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
TelemetryEnvironment
:
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
NimbusFeatures
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
}
)
;
const
TEST_URL
=
"
http
:
/
/
example
.
com
/
quicksuggest
?
q
=
frabbits
"
;
const
TEST_SEARCH_STRING
=
"
frab
"
;
const
BEST_MATCH_URL
=
"
http
:
/
/
example
.
com
/
best
-
match
"
;
const
BEST_MATCH_SEARCH_STRING
=
"
bestmatch
"
;
const
TEST_DATA
=
[
{
id
:
1
url
:
TEST_URL
title
:
"
frabbits
"
keywords
:
[
TEST_SEARCH_STRING
]
click_url
:
"
http
:
/
/
click
.
reporting
.
test
.
com
/
"
impression_url
:
"
http
:
/
/
impression
.
reporting
.
test
.
com
/
"
advertiser
:
"
Test
-
Advertiser
"
}
{
id
:
2
url
:
BEST_MATCH_URL
title
:
"
Best
match
"
keywords
:
[
BEST_MATCH_SEARCH_STRING
]
click_url
:
"
http
:
/
/
click
.
reporting
.
test
.
com
/
"
impression_url
:
"
http
:
/
/
impression
.
reporting
.
test
.
com
/
"
advertiser
:
"
Test
-
Advertiser
"
_test_is_best_match
:
true
}
]
;
const
EXPERIMENT_PREF
=
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
;
const
SUGGEST_PREF
=
"
suggest
.
quicksuggest
.
nonsponsored
"
;
let
spy
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
requestLongerTimeout
(
3
)
;
}
add_task
(
async
function
init
(
)
{
(
{
sandbox
spy
}
=
QuickSuggestTestUtils
.
createTelemetryPingSpy
(
)
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
await
SearchTestUtils
.
installSearchExtension
(
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
Services
.
search
.
setDefault
(
Services
.
search
.
getEngineByName
(
"
Example
"
)
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
TEST_DATA
)
;
let
oldCanRecord
=
Services
.
telemetry
.
canRecordExtended
;
Services
.
telemetry
.
canRecordExtended
=
true
;
Services
.
telemetry
.
clearScalars
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
search
.
setDefault
(
oldDefaultEngine
)
;
Services
.
telemetry
.
canRecordExtended
=
oldCanRecord
;
}
)
;
}
)
;
add_task
(
async
function
impression_offline_dataCollectionDisabled
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
await
doImpressionTest
(
{
scenario
:
"
offline
"
}
)
;
}
)
;
add_task
(
async
function
impression_offline_dataCollectionEnabled
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
await
doImpressionTest
(
{
scenario
:
"
offline
"
}
)
;
}
)
;
add_task
(
async
function
impression_online_dataCollectionDisabled
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
online
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
doImpressionTest
(
{
scenario
:
"
online
"
}
)
;
}
)
;
add_task
(
async
function
impression_online_dataCollectionEnabled
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
online
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
doImpressionTest
(
{
scenario
:
"
online
"
}
)
;
}
)
;
async
function
doImpressionTest
(
{
scenario
}
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
spy
.
resetHistory
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_SEARCH_STRING
fireInputEvent
:
true
}
)
;
let
index
=
1
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
url
:
TEST_URL
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
[
QuickSuggestTestUtils
.
SCALARS
.
IMPRESSION
]
:
index
+
1
}
)
;
QuickSuggestTestUtils
.
assertImpressionPing
(
{
index
spy
scenario
}
)
;
QuickSuggestTestUtils
.
assertNoClickPing
(
spy
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
QuickSuggestTestUtils
.
setScenario
(
null
)
;
UrlbarPrefs
.
clear
(
"
quicksuggest
.
dataCollection
.
enabled
"
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
nonsponsored
"
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
}
add_task
(
async
function
noImpression_abandonment
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
spy
.
resetHistory
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_SEARCH_STRING
fireInputEvent
:
true
}
)
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
url
:
TEST_URL
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
gURLBar
.
blur
(
)
;
}
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
}
)
;
QuickSuggestTestUtils
.
assertNoImpressionPing
(
spy
)
;
QuickSuggestTestUtils
.
assertNoClickPing
(
spy
)
;
}
)
;
}
)
;
add_task
(
async
function
noImpression_noQuickSuggestResult
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
spy
.
resetHistory
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
noImpression_noQuickSuggestResult
"
fireInputEvent
:
true
}
)
;
await
QuickSuggestTestUtils
.
assertNoQuickSuggestResults
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
}
)
;
QuickSuggestTestUtils
.
assertNoImpressionPing
(
spy
)
;
QuickSuggestTestUtils
.
assertNoClickPing
(
spy
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
click_keyboard_offline_dataCollectionDisabled
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
await
doClickTest
(
{
useKeyboard
:
true
scenario
:
"
offline
"
}
)
;
}
)
;
add_task
(
async
function
click_keyboard_offline_dataCollectionEnabled
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
await
doClickTest
(
{
useKeyboard
:
true
scenario
:
"
offline
"
}
)
;
}
)
;
add_task
(
async
function
click_keyboard_online_dataCollectionDisabled
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
online
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
doClickTest
(
{
useKeyboard
:
true
scenario
:
"
online
"
}
)
;
}
)
;
add_task
(
async
function
click_keyboard_online_dataCollectionEnabled
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
online
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
doClickTest
(
{
useKeyboard
:
true
scenario
:
"
online
"
}
)
;
}
)
;
add_task
(
async
function
click_mouse_offline_dataCollectionDisabled
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
await
doClickTest
(
{
useKeyboard
:
false
scenario
:
"
offline
"
}
)
;
}
)
;
add_task
(
async
function
click_mouse_offline_dataCollectionEnabled
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
await
doClickTest
(
{
useKeyboard
:
false
scenario
:
"
offline
"
}
)
;
}
)
;
add_task
(
async
function
click_mouse_online_dataCollectionDisabled
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
online
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
doClickTest
(
{
useKeyboard
:
false
scenario
:
"
online
"
}
)
;
}
)
;
add_task
(
async
function
click_mouse_online_dataCollectionEnabled
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
"
online
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
doClickTest
(
{
useKeyboard
:
false
scenario
:
"
online
"
}
)
;
}
)
;
add_task
(
async
function
bestMatch
(
)
{
UrlbarPrefs
.
set
(
"
bestMatch
.
enabled
"
true
)
;
await
QuickSuggestTestUtils
.
setScenario
(
"
offline
"
)
;
await
doClickTest
(
{
useKeyboard
:
false
scenario
:
"
offline
"
searchString
:
BEST_MATCH_SEARCH_STRING
url
:
BEST_MATCH_URL
block_id
:
2
isBestMatch
:
true
}
)
;
UrlbarPrefs
.
clear
(
"
bestMatch
.
enabled
"
)
;
}
)
;
async
function
doClickTest
(
{
useKeyboard
scenario
block_id
=
undefined
isBestMatch
=
false
searchString
=
TEST_SEARCH_STRING
url
=
TEST_URL
}
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
spy
.
resetHistory
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
searchString
fireInputEvent
:
true
}
)
;
let
index
=
1
;
let
result
=
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
url
isBestMatch
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
if
(
useKeyboard
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
else
{
EventUtils
.
synthesizeMouseAtCenter
(
result
.
element
.
row
{
}
)
;
}
}
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
[
QuickSuggestTestUtils
.
SCALARS
.
IMPRESSION
]
:
index
+
1
[
QuickSuggestTestUtils
.
SCALARS
.
CLICK
]
:
index
+
1
}
)
;
let
match_type
=
isBestMatch
?
"
best
-
match
"
:
"
firefox
-
suggest
"
;
QuickSuggestTestUtils
.
assertImpressionPing
(
{
index
spy
scenario
block_id
match_type
is_clicked
:
true
}
)
;
QuickSuggestTestUtils
.
assertClickPing
(
{
index
spy
scenario
block_id
match_type
}
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
QuickSuggestTestUtils
.
setScenario
(
null
)
;
UrlbarPrefs
.
clear
(
"
quicksuggest
.
dataCollection
.
enabled
"
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
nonsponsored
"
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
}
add_task
(
async
function
click_beforeSearchSuggestions
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
showSearchSuggestionsFirst
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
await
withSuggestions
(
async
(
)
=
>
{
spy
.
resetHistory
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_SEARCH_STRING
fireInputEvent
:
true
}
)
;
let
resultCount
=
UrlbarTestUtils
.
getResultCount
(
window
)
;
Assert
.
greaterOrEqual
(
resultCount
4
"
Result
count
>
=
1
heuristic
+
1
quick
suggest
+
2
suggestions
"
)
;
let
index
=
resultCount
-
3
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
url
:
TEST_URL
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
repeat
:
index
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
[
QuickSuggestTestUtils
.
SCALARS
.
IMPRESSION
]
:
index
+
1
[
QuickSuggestTestUtils
.
SCALARS
.
CLICK
]
:
index
+
1
}
)
;
QuickSuggestTestUtils
.
assertImpressionPing
(
{
index
spy
is_clicked
:
true
}
)
;
QuickSuggestTestUtils
.
assertClickPing
(
{
index
spy
}
)
;
}
)
;
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
help_keyboard
(
)
{
spy
.
resetHistory
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_SEARCH_STRING
fireInputEvent
:
true
}
)
;
let
index
=
1
;
let
result
=
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
url
:
TEST_URL
}
)
;
let
helpButton
=
result
.
element
.
row
.
_buttons
.
get
(
"
help
"
)
;
Assert
.
ok
(
helpButton
"
The
result
has
a
help
button
"
)
;
let
helpLoadPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
repeat
:
2
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
}
)
;
await
helpLoadPromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
QuickSuggestTestUtils
.
LEARN_MORE_URL
"
Help
URL
loaded
"
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
[
QuickSuggestTestUtils
.
SCALARS
.
IMPRESSION
]
:
index
+
1
[
QuickSuggestTestUtils
.
SCALARS
.
HELP
]
:
index
+
1
}
)
;
QuickSuggestTestUtils
.
assertImpressionPing
(
{
index
spy
}
)
;
QuickSuggestTestUtils
.
assertNoClickPing
(
spy
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
help_mouse
(
)
{
spy
.
resetHistory
(
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_SEARCH_STRING
fireInputEvent
:
true
}
)
;
let
index
=
1
;
let
result
=
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
url
:
TEST_URL
}
)
;
let
helpButton
=
result
.
element
.
row
.
_buttons
.
get
(
"
help
"
)
;
Assert
.
ok
(
helpButton
"
The
result
has
a
help
button
"
)
;
let
helpLoadPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
helpButton
{
}
)
;
}
)
;
await
helpLoadPromise
;
Assert
.
equal
(
gBrowser
.
currentURI
.
spec
QuickSuggestTestUtils
.
LEARN_MORE_URL
"
Help
URL
loaded
"
)
;
QuickSuggestTestUtils
.
assertScalars
(
{
[
QuickSuggestTestUtils
.
SCALARS
.
IMPRESSION
]
:
index
+
1
[
QuickSuggestTestUtils
.
SCALARS
.
HELP
]
:
index
+
1
}
)
;
QuickSuggestTestUtils
.
assertImpressionPing
(
{
index
spy
}
)
;
QuickSuggestTestUtils
.
assertNoClickPing
(
spy
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
enableToggled
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
enabled
=
UrlbarPrefs
.
get
(
SUGGEST_PREF
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
SUGGEST_PREF
enabled
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
enable_toggled
"
object
:
enabled
?
"
enabled
"
:
"
disabled
"
}
]
)
;
Assert
.
equal
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
]
enabled
"
suggest
.
quicksuggest
.
nonsponsored
is
correct
in
TelemetryEnvironment
"
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
EXPERIMENT_PREF
false
]
]
}
)
;
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
SUGGEST_PREF
enabled
)
;
TelemetryTestUtils
.
assertEvents
(
[
]
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
UrlbarPrefs
.
set
(
SUGGEST_PREF
!
enabled
)
;
}
)
;
add_task
(
async
function
sponsoredToggled
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
enabled
=
UrlbarPrefs
.
get
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
enabled
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
sponsored_toggled
"
object
:
enabled
?
"
enabled
"
:
"
disabled
"
}
]
)
;
Assert
.
equal
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
]
enabled
"
suggest
.
quicksuggest
.
sponsored
is
correct
in
TelemetryEnvironment
"
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
EXPERIMENT_PREF
false
]
]
}
)
;
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
enabled
)
;
TelemetryTestUtils
.
assertEvents
(
[
]
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
!
enabled
)
;
}
)
;
add_task
(
async
function
dataCollectionToggled
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
enabled
=
UrlbarPrefs
.
get
(
"
quicksuggest
.
dataCollection
.
enabled
"
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
enabled
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
method
:
"
data_collect_toggled
"
object
:
enabled
?
"
enabled
"
:
"
disabled
"
}
]
)
;
Assert
.
equal
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
]
enabled
"
quicksuggest
.
dataCollection
.
enabled
is
correct
in
TelemetryEnvironment
"
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
EXPERIMENT_PREF
false
]
]
}
)
;
enabled
=
!
enabled
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
enabled
)
;
TelemetryTestUtils
.
assertEvents
(
[
]
{
category
:
QuickSuggestTestUtils
.
TELEMETRY_EVENT_CATEGORY
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
!
enabled
)
;
}
)
;
add_task
(
async
function
bestmatchCheckbox
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
bestMatch
.
enabled
"
true
]
]
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
preferences
#
privacy
"
true
)
;
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
Services
.
telemetry
.
clearScalars
(
)
;
const
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
const
checkboxId
=
"
firefoxSuggestBestMatch
"
;
const
checkbox
=
doc
.
getElementById
(
checkboxId
)
;
checkbox
.
scrollIntoView
(
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
checkboxId
{
}
gBrowser
.
selectedBrowser
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
"
browser
.
ui
.
interaction
.
preferences_panePrivacy
"
checkboxId
1
)
;
}
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
bestmatchLearnMore
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
bestMatch
.
enabled
"
true
]
]
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
preferences
#
privacy
"
true
)
;
Services
.
telemetry
.
clearScalars
(
)
;
const
learnMoreLinkId
=
"
firefoxSuggestBestMatchLearnMore
"
;
const
doc
=
gBrowser
.
selectedBrowser
.
contentDocument
;
const
link
=
doc
.
getElementById
(
learnMoreLinkId
)
;
link
.
scrollIntoView
(
)
;
const
onLearnMoreOpenedByClick
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
QuickSuggestTestUtils
.
BEST_MATCH_LEARN_MORE_URL
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
learnMoreLinkId
{
}
gBrowser
.
selectedBrowser
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
"
browser
.
ui
.
interaction
.
preferences_panePrivacy
"
"
firefoxSuggestBestMatchLearnMore
"
1
)
;
await
onLearnMoreOpenedByClick
;
gBrowser
.
removeCurrentTab
(
)
;
Services
.
telemetry
.
clearScalars
(
)
;
link
.
focus
(
)
;
const
onLearnMoreOpenedByKey
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
QuickSuggestTestUtils
.
BEST_MATCH_LEARN_MORE_URL
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
KEY_Enter
"
{
}
gBrowser
.
selectedBrowser
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
true
)
"
browser
.
ui
.
interaction
.
preferences_panePrivacy
"
"
firefoxSuggestBestMatchLearnMore
"
1
)
;
await
onLearnMoreOpenedByKey
;
gBrowser
.
removeCurrentTab
(
)
;
gBrowser
.
removeCurrentTab
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
nimbusExposure
(
)
{
await
QuickSuggestTestUtils
.
clearExposureEvent
(
)
;
await
QuickSuggestTestUtils
.
withExperiment
(
{
valueOverrides
:
{
quickSuggestEnabled
:
true
quickSuggestShouldShowOnboardingDialog
:
false
}
callback
:
async
(
)
=
>
{
await
QuickSuggestTestUtils
.
assertExposureEvent
(
false
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
nimbusExposure
no
result
"
fireInputEvent
:
true
}
)
;
await
QuickSuggestTestUtils
.
assertNoQuickSuggestResults
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
QuickSuggestTestUtils
.
assertExposureEvent
(
false
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_SEARCH_STRING
fireInputEvent
:
true
}
)
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
:
1
url
:
TEST_URL
}
)
;
await
QuickSuggestTestUtils
.
assertExposureEvent
(
true
"
control
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
}
)
;
}
)
;
add_task
(
async
function
telemetryEnvironmentUpdateNotification
(
)
{
await
QuickSuggestTestUtils
.
setScenario
(
null
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
nonsponsored
"
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
let
defaults
=
Services
.
prefs
.
getDefaultBranch
(
"
browser
.
urlbar
.
"
)
;
Assert
.
ok
(
defaults
.
getBoolPref
(
"
suggest
.
quicksuggest
.
nonsponsored
"
)
"
suggest
.
quicksuggest
.
nonsponsored
is
true
initially
"
)
;
Assert
.
ok
(
defaults
.
getBoolPref
(
"
suggest
.
quicksuggest
.
sponsored
"
)
"
suggest
.
quicksuggest
.
sponsored
is
true
initially
"
)
;
await
TelemetryEnvironment
.
testWatchPreferences
(
new
Map
(
)
)
;
defaults
.
setBoolPref
(
"
suggest
.
quicksuggest
.
nonsponsored
"
false
)
;
defaults
.
setBoolPref
(
"
suggest
.
quicksuggest
.
sponsored
"
false
)
;
Assert
.
ok
(
!
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
in
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
)
"
suggest
.
quicksuggest
.
nonsponsored
not
in
TelemetryEnvironment
"
)
;
Assert
.
ok
(
!
(
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
in
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
)
"
suggest
.
quicksuggest
.
sponsored
not
in
TelemetryEnvironment
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
firefox
-
suggest
-
update
"
)
;
Assert
.
strictEqual
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
]
false
"
suggest
.
quicksuggest
.
nonsponsored
is
false
in
TelemetryEnvironment
"
)
;
Assert
.
strictEqual
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
]
false
"
suggest
.
quicksuggest
.
sponsored
is
false
in
TelemetryEnvironment
"
)
;
defaults
.
setBoolPref
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
defaults
.
setBoolPref
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
Assert
.
strictEqual
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
]
false
"
suggest
.
quicksuggest
.
nonsponsored
remains
false
in
TelemetryEnvironment
"
)
;
Assert
.
strictEqual
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
]
false
"
suggest
.
quicksuggest
.
sponsored
remains
false
in
TelemetryEnvironment
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
firefox
-
suggest
-
update
"
)
;
Assert
.
strictEqual
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
]
true
"
suggest
.
quicksuggest
.
nonsponsored
is
false
in
TelemetryEnvironment
"
)
;
Assert
.
strictEqual
(
TelemetryEnvironment
.
currentEnvironment
.
settings
.
userPrefs
[
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
]
true
"
suggest
.
quicksuggest
.
sponsored
is
false
in
TelemetryEnvironment
"
)
;
await
TelemetryEnvironment
.
testCleanRestart
(
)
.
onInitialized
(
)
;
}
)
;
async
function
withSuggestions
(
callback
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
searches
"
true
]
]
}
)
;
let
engine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
getRootDirectory
(
gTestPath
)
+
"
searchSuggestionEngine
.
xml
"
)
;
let
oldDefaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
engine
)
;
try
{
await
callback
(
engine
)
;
}
finally
{
await
Services
.
search
.
setDefault
(
oldDefaultEngine
)
;
await
Services
.
search
.
removeEngine
(
engine
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
}
