"
use
strict
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
merino
.
enabled
"
true
]
[
"
browser
.
urlbar
.
quicksuggest
.
remoteSettings
.
enabled
"
false
]
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
true
]
]
}
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
}
{
setAsDefault
:
true
}
)
;
await
MerinoTestUtils
.
server
.
start
(
)
;
}
)
;
add_task
(
async
function
singleEngagement
(
)
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
let
searchString
=
"
search
"
+
i
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
searchString
fireInputEvent
:
true
}
)
;
MerinoTestUtils
.
server
.
checkAndClearRequests
(
[
{
params
:
{
[
MerinoTestUtils
.
SEARCH_PARAMS
.
QUERY
]
:
searchString
[
MerinoTestUtils
.
SEARCH_PARAMS
.
SEQUENCE_NUMBER
]
:
i
}
}
]
)
;
}
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
gURLBar
.
blur
(
)
)
;
}
)
;
add_task
(
async
function
singleEngagement_panelClosed
(
)
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
let
searchString
=
"
search
"
+
i
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
searchString
fireInputEvent
:
true
}
)
;
MerinoTestUtils
.
server
.
checkAndClearRequests
(
[
{
params
:
{
[
MerinoTestUtils
.
SEARCH_PARAMS
.
QUERY
]
:
searchString
[
MerinoTestUtils
.
SEARCH_PARAMS
.
SEQUENCE_NUMBER
]
:
i
}
}
]
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
Assert
.
ok
(
!
UrlbarTestUtils
.
isPopupOpen
(
window
)
"
Panel
is
closed
"
)
;
Assert
.
ok
(
gURLBar
.
focused
"
Input
remains
focused
"
)
;
}
gURLBar
.
blur
(
)
;
}
)
;
add_task
(
async
function
manyEngagements_engagement
(
)
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
(
)
=
>
{
let
searchString
=
"
search
"
+
i
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
searchString
fireInputEvent
:
true
}
)
;
MerinoTestUtils
.
server
.
checkAndClearRequests
(
[
{
params
:
{
[
MerinoTestUtils
.
SEARCH_PARAMS
.
QUERY
]
:
searchString
[
MerinoTestUtils
.
SEARCH_PARAMS
.
SEQUENCE_NUMBER
]
:
0
}
}
]
)
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
loadPromise
;
}
)
;
}
}
)
;
add_task
(
async
function
manyEngagements_abandonment
(
)
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
let
searchString
=
"
search
"
+
i
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
searchString
fireInputEvent
:
true
}
)
;
MerinoTestUtils
.
server
.
checkAndClearRequests
(
[
{
params
:
{
[
MerinoTestUtils
.
SEARCH_PARAMS
.
QUERY
]
:
searchString
[
MerinoTestUtils
.
SEARCH_PARAMS
.
SEQUENCE_NUMBER
]
:
0
}
}
]
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
gURLBar
.
blur
(
)
)
;
}
}
)
;
