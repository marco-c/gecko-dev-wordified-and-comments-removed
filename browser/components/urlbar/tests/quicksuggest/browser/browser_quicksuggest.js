"
use
strict
"
;
const
REMOTE_SETTINGS_RESULTS
=
[
QuickSuggestTestUtils
.
ampRemoteSettings
(
{
keywords
:
[
"
fra
"
"
frab
"
]
}
)
QuickSuggestTestUtils
.
wikipediaRemoteSettings
(
)
]
;
const
MERINO_NAVIGATIONAL_SUGGESTION
=
{
url
:
"
https
:
/
/
example
.
com
/
navigational
-
suggestion
"
title
:
"
Navigational
suggestion
"
provider
:
"
top_picks
"
is_sponsored
:
false
score
:
0
.
25
block_id
:
0
is_top_pick
:
true
}
;
const
MERINO_DYNAMIC_WIKIPEDIA_SUGGESTION
=
{
url
:
"
https
:
/
/
example
.
com
/
dynamic
-
wikipedia
"
title
:
"
Dynamic
Wikipedia
suggestion
"
click_url
:
"
https
:
/
/
example
.
com
/
click
"
impression_url
:
"
https
:
/
/
example
.
com
/
impression
"
advertiser
:
"
dynamic
-
wikipedia
"
provider
:
"
wikipedia
"
iab_category
:
"
5
-
Education
"
block_id
:
1
}
;
requestLongerTimeout
(
5
)
;
add_setup
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
await
UrlbarTestUtils
.
formHistory
.
clear
(
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
remoteSettingsRecords
:
[
{
type
:
"
data
"
attachment
:
REMOTE_SETTINGS_RESULTS
}
]
merinoSuggestions
:
[
]
}
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
}
)
;
add_tasks_with_rust
(
async
function
sponsored
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
fra
"
}
)
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
:
1
isSponsored
:
true
url
:
"
https
:
/
/
example
.
com
/
amp
"
}
)
;
let
row
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
1
)
;
Assert
.
equal
(
row
.
querySelector
(
"
.
urlbarView
-
title
"
)
.
firstChild
.
textContent
"
fra
"
"
The
part
of
the
keyword
that
matches
users
input
is
not
bold
.
"
)
;
Assert
.
equal
(
row
.
querySelector
(
"
.
urlbarView
-
title
>
strong
"
)
.
textContent
"
b
"
"
The
auto
completed
section
of
the
keyword
is
bolded
.
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_tasks_with_rust
(
async
function
nonSponsored
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
wikipedia
"
}
)
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
:
1
isSponsored
:
false
url
:
"
https
:
/
/
example
.
com
/
wikipedia
"
}
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_tasks_with_rust
(
async
function
sponsoredPriority
(
)
{
const
cleanUpNimbus
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
quickSuggestSponsoredPriority
:
true
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
fra
"
}
)
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
:
1
isSponsored
:
true
isBestMatch
:
true
url
:
"
https
:
/
/
example
.
com
/
amp
"
}
)
;
let
row
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
1
)
;
Assert
.
equal
(
row
.
querySelector
(
"
.
urlbarView
-
title
"
)
.
firstChild
.
textContent
"
fra
"
"
The
part
of
the
keyword
that
matches
users
input
is
not
bold
.
"
)
;
Assert
.
equal
(
row
.
querySelector
(
"
.
urlbarView
-
title
>
strong
"
)
.
textContent
"
b
"
"
The
auto
completed
section
of
the
keyword
is
bolded
.
"
)
;
let
before
=
window
.
getComputedStyle
(
row
"
:
:
before
"
)
;
Assert
.
equal
(
before
.
content
"
attr
(
label
)
"
"
:
:
before
.
content
is
enabled
"
)
;
Assert
.
equal
(
row
.
getAttribute
(
"
label
"
)
"
Top
pick
"
"
Row
has
'
Top
pick
'
group
label
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
cleanUpNimbus
(
)
;
}
)
;
add_tasks_with_rust
(
async
function
sponsoredPriorityButNotSponsoredSuggestion
(
)
{
const
cleanUpNimbus
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
quickSuggestSponsoredPriority
:
true
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
wikipedia
"
}
)
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
:
1
isSponsored
:
false
url
:
"
https
:
/
/
example
.
com
/
wikipedia
"
}
)
;
let
row
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
1
)
;
let
before
=
window
.
getComputedStyle
(
row
"
:
:
before
"
)
;
Assert
.
equal
(
before
.
content
"
attr
(
label
)
"
"
:
:
before
.
content
is
enabled
"
)
;
Assert
.
equal
(
row
.
getAttribute
(
"
label
"
)
"
Firefox
Suggest
"
"
Row
has
general
group
label
for
quick
suggest
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
cleanUpNimbus
(
)
;
}
)
;
add_tasks_with_rust
(
async
function
ampTopPickCharThreshold_fullKeyword
(
)
{
const
cleanUpNimbus
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
quickSuggestAmpTopPickCharThreshold
:
100
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
frab
"
}
)
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
:
1
isSponsored
:
true
isBestMatch
:
true
hasSponsoredLabel
:
false
url
:
"
https
:
/
/
example
.
com
/
amp
"
}
)
;
let
row
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
1
)
;
Assert
.
equal
(
row
.
querySelector
(
"
.
urlbarView
-
title
>
strong
"
)
.
textContent
"
frab
"
"
The
full
keyword
should
be
bold
"
)
;
let
before
=
window
.
getComputedStyle
(
row
"
:
:
before
"
)
;
Assert
.
equal
(
before
.
content
"
attr
(
label
)
"
"
:
:
before
.
content
is
enabled
"
)
;
Assert
.
equal
(
row
.
getAttribute
(
"
label
"
)
"
Sponsored
"
"
Row
has
'
Sponsored
'
group
label
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
cleanUpNimbus
(
)
;
}
)
;
add_tasks_with_rust
(
async
function
ampTopPickCharThreshold_belowThreshold
(
)
{
const
cleanUpNimbus
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
quickSuggestAmpTopPickCharThreshold
:
100
}
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
fra
"
}
)
;
await
QuickSuggestTestUtils
.
assertIsQuickSuggest
(
{
window
index
:
1
isSponsored
:
true
url
:
"
https
:
/
/
example
.
com
/
amp
"
}
)
;
let
row
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
1
)
;
Assert
.
equal
(
row
.
querySelector
(
"
.
urlbarView
-
title
"
)
.
firstChild
.
textContent
"
fra
"
"
The
part
of
the
keyword
that
matches
users
input
is
not
bold
.
"
)
;
Assert
.
equal
(
row
.
querySelector
(
"
.
urlbarView
-
title
>
strong
"
)
.
textContent
"
b
"
"
The
auto
completed
section
of
the
keyword
is
bolded
.
"
)
;
let
before
=
window
.
getComputedStyle
(
row
"
:
:
before
"
)
;
Assert
.
equal
(
before
.
content
"
attr
(
label
)
"
"
:
:
before
.
content
is
enabled
"
)
;
Assert
.
equal
(
row
.
getAttribute
(
"
label
"
)
"
Firefox
Suggest
"
"
Row
has
'
Firefox
Suggest
'
group
label
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
cleanUpNimbus
(
)
;
}
)
;
add_tasks_with_rust
(
async
function
resultMenu_manage_sponsored
(
)
{
await
doManageTest
(
{
input
:
"
fra
"
index
:
1
}
)
;
}
)
;
add_tasks_with_rust
(
async
function
resultMenu_manage_nonSponsored
(
)
{
await
doManageTest
(
{
input
:
"
wikipedia
"
index
:
1
}
)
;
}
)
;
add_tasks_with_rust
(
async
function
resultMenu_manage_navigational
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
true
]
]
}
)
;
MerinoTestUtils
.
server
.
response
.
body
.
suggestions
=
[
MERINO_NAVIGATIONAL_SUGGESTION
]
;
await
doManageTest
(
{
input
:
"
test
"
index
:
1
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_tasks_with_rust
(
async
function
resultMenu_manage_dynamicWikipedia
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
true
]
]
}
)
;
MerinoTestUtils
.
server
.
response
.
body
.
suggestions
=
[
MERINO_DYNAMIC_WIKIPEDIA_SUGGESTION
]
;
await
doManageTest
(
{
input
:
"
test
"
index
:
1
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
