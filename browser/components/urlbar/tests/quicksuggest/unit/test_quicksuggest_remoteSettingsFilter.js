"
use
strict
"
;
add_setup
(
async
function
(
)
{
let
remoteSettingsRecords
=
[
]
;
let
types
=
[
{
collection
:
QuickSuggestTestUtils
.
RS_COLLECTION
.
AMP
type
:
QuickSuggestTestUtils
.
RS_TYPE
.
AMP
}
{
collection
:
QuickSuggestTestUtils
.
RS_COLLECTION
.
OTHER
type
:
QuickSuggestTestUtils
.
RS_TYPE
.
WIKIPEDIA
}
]
;
for
(
let
{
collection
type
}
of
types
)
{
for
(
let
country
of
[
"
US
"
"
GB
"
"
"
]
)
{
for
(
let
formFactor
of
[
"
desktop
"
"
phone
"
"
"
]
)
{
let
opts
=
{
collection
type
}
;
if
(
!
country
&
&
!
formFactor
)
{
remoteSettingsRecords
.
push
(
makeRecord
(
opts
)
makeRecord
(
{
.
.
.
opts
filterExpression
:
{
}
}
)
)
;
}
else
{
opts
.
filterExpression
=
{
}
;
if
(
country
)
{
opts
.
filterExpression
.
country
=
country
;
}
if
(
formFactor
)
{
opts
.
filterExpression
.
formFactor
=
formFactor
;
}
remoteSettingsRecords
.
push
(
makeRecord
(
opts
)
)
;
}
}
}
}
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
remoteSettingsRecords
prefs
:
[
[
"
suggest
.
quicksuggest
.
sponsored
"
true
]
[
"
suggest
.
quicksuggest
.
nonsponsored
"
true
]
[
"
quicksuggest
.
ampTopPickCharThreshold
"
0
]
]
}
)
;
}
)
;
add_task
(
async
function
(
)
{
let
tests
=
[
{
homeRegion
:
"
US
"
locales
:
[
"
en
-
US
"
]
tests
:
[
{
expected
:
QuickSuggestTestUtils
.
ampResult
queries
:
[
"
amp
us
desktop
"
"
amp
us
"
"
amp
desktop
"
"
amp
"
"
amp
no
-
filter
"
]
}
{
expected
:
null
queries
:
[
"
amp
us
phone
"
"
amp
gb
desktop
"
"
amp
gb
phone
"
"
amp
gb
"
"
amp
phone
"
]
}
{
expected
:
QuickSuggestTestUtils
.
wikipediaResult
queries
:
[
"
wikipedia
us
desktop
"
"
wikipedia
us
"
"
wikipedia
desktop
"
"
wikipedia
"
"
wikipedia
no
-
filter
"
]
}
{
expected
:
null
queries
:
[
"
wikipedia
us
phone
"
"
wikipedia
gb
desktop
"
"
wikipedia
gb
phone
"
"
wikipedia
gb
"
"
wikipedia
phone
"
]
}
]
}
{
homeRegion
:
"
GB
"
locales
:
[
"
en
-
GB
"
"
en
-
US
"
]
tests
:
[
{
expected
:
QuickSuggestTestUtils
.
ampResult
queries
:
[
"
amp
gb
desktop
"
"
amp
gb
"
"
amp
desktop
"
"
amp
"
"
amp
no
-
filter
"
]
}
{
expected
:
null
queries
:
[
"
amp
gb
phone
"
"
amp
us
desktop
"
"
amp
us
phone
"
"
amp
us
"
"
amp
phone
"
]
}
{
expected
:
QuickSuggestTestUtils
.
wikipediaResult
queries
:
[
"
wikipedia
gb
desktop
"
"
wikipedia
gb
"
"
wikipedia
desktop
"
"
wikipedia
"
"
wikipedia
no
-
filter
"
]
}
{
expected
:
null
queries
:
[
"
wikipedia
gb
phone
"
"
wikipedia
us
desktop
"
"
wikipedia
us
phone
"
"
wikipedia
us
"
"
wikipedia
phone
"
]
}
]
}
{
homeRegion
:
"
DE
"
locales
:
[
"
de
"
"
en
-
US
"
]
tests
:
[
{
expected
:
QuickSuggestTestUtils
.
ampResult
queries
:
[
"
amp
desktop
"
"
amp
"
"
amp
no
-
filter
"
]
}
{
expected
:
null
queries
:
[
"
amp
us
desktop
"
"
amp
us
"
"
amp
us
phone
"
"
amp
gb
desktop
"
"
amp
gb
phone
"
"
amp
gb
"
"
amp
phone
"
]
}
{
expected
:
QuickSuggestTestUtils
.
wikipediaResult
queries
:
[
"
wikipedia
desktop
"
"
wikipedia
"
"
wikipedia
no
-
filter
"
]
}
{
expected
:
null
queries
:
[
"
wikipedia
us
desktop
"
"
wikipedia
us
"
"
wikipedia
us
phone
"
"
wikipedia
gb
desktop
"
"
wikipedia
gb
phone
"
"
wikipedia
gb
"
"
wikipedia
phone
"
]
}
]
}
]
;
for
(
let
test
of
tests
)
{
await
doTests
(
test
)
;
}
}
)
;
async
function
doTests
(
{
locales
homeRegion
tests
}
)
{
for
(
let
locale
of
locales
)
{
info
(
"
Disabling
Suggest
:
"
+
JSON
.
stringify
(
{
locales
homeRegion
}
)
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
enabled
"
false
)
;
await
QuickSuggestTestUtils
.
withLocales
(
{
homeRegion
locales
:
[
locale
]
callback
:
async
(
)
=
>
{
info
(
"
Reenabling
Suggest
:
"
+
JSON
.
stringify
(
{
locale
homeRegion
}
)
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
enabled
"
true
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
for
(
let
{
expected
queries
}
of
tests
)
{
for
(
let
query
of
queries
)
{
info
(
"
Doing
query
:
"
+
JSON
.
stringify
(
{
locale
homeRegion
query
}
)
)
;
let
expectedResults
=
[
]
;
if
(
expected
)
{
expectedResults
.
push
(
expected
(
{
keyword
:
query
url
:
https
:
/
/
example
.
com
/
{
query
}
title
:
Suggestion
:
{
query
}
}
)
)
;
}
await
check_results
(
{
context
:
createContext
(
query
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
expectedResults
}
)
;
}
}
}
}
)
;
}
}
function
makeRecord
(
{
collection
type
filterExpression
}
)
{
let
recordFunc
;
switch
(
type
)
{
case
QuickSuggestTestUtils
.
RS_TYPE
.
AMP
:
recordFunc
=
QuickSuggestTestUtils
.
ampRemoteSettings
;
break
;
case
QuickSuggestTestUtils
.
RS_TYPE
.
WIKIPEDIA
:
recordFunc
=
QuickSuggestTestUtils
.
wikipediaRemoteSettings
;
break
;
default
:
throw
new
Error
(
"
Unhandled
RS
type
:
"
+
type
)
;
}
let
parts
=
[
type
]
;
if
(
filterExpression
)
{
parts
.
push
(
.
.
.
Object
.
values
(
filterExpression
)
)
;
}
else
{
parts
.
push
(
"
no
-
filter
"
)
;
}
let
keyword
=
parts
.
join
(
"
"
)
.
toLowerCase
(
)
;
let
record
=
{
collection
type
attachment
:
[
recordFunc
(
{
keywords
:
[
keyword
]
url
:
https
:
/
/
example
.
com
/
{
keyword
}
title
:
Suggestion
:
{
keyword
}
}
)
]
}
;
if
(
filterExpression
)
{
record
.
filter_expression
=
Object
.
entries
(
filterExpression
)
.
map
(
(
[
k
v
]
)
=
>
env
.
{
k
}
=
=
'
{
v
}
'
)
.
join
(
"
&
&
"
)
;
}
return
record
;
}
