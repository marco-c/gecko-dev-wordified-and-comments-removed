"
use
strict
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gClient
"
(
)
=
>
UrlbarProviderQuickSuggest
.
_merino
)
;
add_task
(
async
function
init
(
)
{
UrlbarPrefs
.
set
(
"
quicksuggest
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
merino
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
remoteSettings
.
enabled
"
false
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
MerinoTestUtils
.
server
.
start
(
)
;
}
)
;
add_task
(
async
function
singleEngagement
(
)
{
let
controller
=
UrlbarTestUtils
.
newMockController
(
)
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
let
searchString
=
"
search
"
+
i
;
await
controller
.
startQuery
(
createContext
(
searchString
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
)
;
MerinoTestUtils
.
server
.
checkAndClearRequests
(
[
{
params
:
{
[
MerinoTestUtils
.
SEARCH_PARAMS
.
QUERY
]
:
searchString
[
MerinoTestUtils
.
SEARCH_PARAMS
.
SEQUENCE_NUMBER
]
:
i
}
}
]
)
;
}
endEngagement
(
)
;
}
)
;
add_task
(
async
function
manyEngagements_engagement
(
)
{
await
doManyEngagementsTest
(
"
engagement
"
)
;
}
)
;
add_task
(
async
function
manyEngagements_abandonment
(
)
{
await
doManyEngagementsTest
(
"
abandonment
"
)
;
}
)
;
async
function
doManyEngagementsTest
(
state
)
{
let
controller
=
UrlbarTestUtils
.
newMockController
(
)
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
let
searchString
=
"
search
"
+
i
;
let
context
=
createContext
(
searchString
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
;
await
controller
.
startQuery
(
context
)
;
MerinoTestUtils
.
server
.
checkAndClearRequests
(
[
{
params
:
{
[
MerinoTestUtils
.
SEARCH_PARAMS
.
QUERY
]
:
searchString
[
MerinoTestUtils
.
SEARCH_PARAMS
.
SEQUENCE_NUMBER
]
:
0
}
}
]
)
;
endEngagement
(
context
state
)
;
}
}
add_task
(
async
function
canceledQueries
(
)
{
let
controller
=
UrlbarTestUtils
.
newMockController
(
)
;
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
MerinoTestUtils
.
server
.
response
.
delay
=
UrlbarPrefs
.
get
(
"
merino
.
timeoutMs
"
)
;
let
requestPromise
=
MerinoTestUtils
.
server
.
waitForNextRequest
(
)
;
let
searchString1
=
"
search
"
+
i
;
controller
.
startQuery
(
createContext
(
searchString1
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
)
;
await
requestPromise
;
delete
MerinoTestUtils
.
server
.
response
.
delay
;
let
searchString2
=
searchString1
+
"
again
"
;
await
controller
.
startQuery
(
createContext
(
searchString2
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
)
;
MerinoTestUtils
.
server
.
checkAndClearRequests
(
[
{
params
:
{
[
MerinoTestUtils
.
SEARCH_PARAMS
.
QUERY
]
:
searchString1
[
MerinoTestUtils
.
SEARCH_PARAMS
.
SEQUENCE_NUMBER
]
:
2
*
i
}
}
{
params
:
{
[
MerinoTestUtils
.
SEARCH_PARAMS
.
QUERY
]
:
searchString2
[
MerinoTestUtils
.
SEARCH_PARAMS
.
SEQUENCE_NUMBER
]
:
2
*
i
+
1
}
}
]
)
;
}
endEngagement
(
)
;
}
)
;
function
endEngagement
(
context
=
null
state
=
"
engagement
"
)
{
UrlbarProviderQuickSuggest
.
onEngagement
(
false
state
context
|
|
createContext
(
"
endEngagement
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
{
selIndex
:
-
1
}
)
;
Assert
.
strictEqual
(
gClient
.
sessionID
null
"
sessionID
is
null
after
engagement
"
)
;
Assert
.
strictEqual
(
gClient
.
_test_sessionTimer
null
"
sessionTimer
is
null
after
engagement
"
)
;
}
