ChromeUtils
.
defineESModuleGetters
(
this
{
QuickSuggest
:
"
resource
:
/
/
/
modules
/
QuickSuggest
.
sys
.
mjs
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
sys
.
mjs
"
TelemetryTestUtils
:
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
sys
.
mjs
"
UrlbarProviderAutofill
:
"
resource
:
/
/
/
modules
/
UrlbarProviderAutofill
.
sys
.
mjs
"
UrlbarProviderQuickSuggest
:
"
resource
:
/
/
/
modules
/
UrlbarProviderQuickSuggest
.
sys
.
mjs
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
sys
.
mjs
"
}
)
;
add_setup
(
async
function
setUpQuickSuggestXpcshellTest
(
)
{
QuickSuggest
.
_testSkipTelemetryEnvironmentInit
=
true
;
}
)
;
async
function
doMigrateTest
(
{
testOverrides
scenario
expectedPrefs
initialUserBranch
=
{
}
}
)
{
info
(
"
Testing
migration
:
"
+
JSON
.
stringify
(
{
testOverrides
initialUserBranch
scenario
expectedPrefs
}
)
)
;
function
setPref
(
branch
name
value
)
{
switch
(
typeof
value
)
{
case
"
boolean
"
:
branch
.
setBoolPref
(
name
value
)
;
break
;
case
"
number
"
:
branch
.
setIntPref
(
name
value
)
;
break
;
case
"
string
"
:
branch
.
setCharPref
(
name
value
)
;
break
;
default
:
Assert
.
ok
(
false
Pref
type
not
handled
for
setPref
:
{
name
}
=
{
value
}
)
;
break
;
}
}
function
getPref
(
branch
name
)
{
let
type
=
typeof
UrlbarPrefs
.
get
(
name
)
;
switch
(
type
)
{
case
"
boolean
"
:
return
branch
.
getBoolPref
(
name
)
;
case
"
number
"
:
return
branch
.
getIntPref
(
name
)
;
case
"
string
"
:
return
branch
.
getCharPref
(
name
)
;
default
:
Assert
.
ok
(
false
Pref
type
not
handled
for
getPref
:
{
name
}
{
type
}
)
;
break
;
}
return
null
;
}
let
defaultBranch
=
Services
.
prefs
.
getDefaultBranch
(
"
browser
.
urlbar
.
"
)
;
let
userBranch
=
Services
.
prefs
.
getBranch
(
"
browser
.
urlbar
.
"
)
;
UrlbarPrefs
.
clear
(
"
quicksuggest
.
migrationVersion
"
)
;
let
initialDefaultBranch
=
{
"
suggest
.
quicksuggest
.
nonsponsored
"
:
false
"
suggest
.
quicksuggest
.
sponsored
"
:
false
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
}
;
for
(
let
name
of
Object
.
keys
(
initialDefaultBranch
)
)
{
userBranch
.
clearUserPref
(
name
)
;
}
for
(
let
[
branch
prefs
]
of
[
[
defaultBranch
initialDefaultBranch
]
[
userBranch
initialUserBranch
]
]
)
{
for
(
let
[
name
value
]
of
Object
.
entries
(
prefs
)
)
{
if
(
value
!
=
=
undefined
)
{
setPref
(
branch
name
value
)
;
}
}
}
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
info
(
Reinitializing
Suggest
i
=
{
i
}
)
;
await
QuickSuggest
.
_test_reinit
(
{
.
.
.
testOverrides
scenario
}
)
;
let
expectedEffectivePrefs
=
{
}
;
let
{
defaultBranch
:
expectedDefaultBranch
userBranch
:
expectedUserBranch
}
=
expectedPrefs
;
expectedDefaultBranch
=
expectedDefaultBranch
|
|
{
}
;
expectedUserBranch
=
expectedUserBranch
|
|
{
}
;
for
(
let
[
branch
prefs
branchType
]
of
[
[
defaultBranch
expectedDefaultBranch
"
default
"
]
[
userBranch
expectedUserBranch
"
user
"
]
]
)
{
let
entries
=
Object
.
entries
(
prefs
)
;
if
(
!
entries
.
length
)
{
continue
;
}
info
(
Checking
expected
prefs
on
{
branchType
}
branch
after
updating
scenario
)
;
for
(
let
[
name
value
]
of
entries
)
{
expectedEffectivePrefs
[
name
]
=
value
;
if
(
branch
=
=
userBranch
)
{
Assert
.
ok
(
userBranch
.
prefHasUserValue
(
name
)
Pref
{
name
}
is
on
user
branch
)
;
}
Assert
.
equal
(
getPref
(
branch
name
)
value
Pref
{
name
}
value
on
{
branchType
}
branch
)
;
}
}
info
(
Making
sure
prefs
on
the
default
branch
without
expected
user
-
branch
values
are
not
on
the
user
branch
)
;
for
(
let
name
of
Object
.
keys
(
initialDefaultBranch
)
)
{
if
(
!
expectedUserBranch
.
hasOwnProperty
(
name
)
)
{
Assert
.
ok
(
!
userBranch
.
prefHasUserValue
(
name
)
Pref
{
name
}
is
not
on
user
branch
)
;
}
}
info
(
Checking
expected
effective
prefs
)
;
for
(
let
[
name
value
]
of
Object
.
entries
(
expectedEffectivePrefs
)
)
{
Assert
.
equal
(
UrlbarPrefs
.
get
(
name
)
value
Pref
{
name
}
effective
value
)
;
}
let
currentVersion
=
testOverrides
?
.
migrationVersion
=
=
=
undefined
?
QuickSuggest
.
MIGRATION_VERSION
:
testOverrides
.
migrationVersion
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
"
quicksuggest
.
migrationVersion
"
)
currentVersion
"
quicksuggest
.
migrationVersion
is
correct
after
migration
"
)
;
}
UrlbarPrefs
.
clear
(
"
quicksuggest
.
migrationVersion
"
)
;
let
userBranchNames
=
[
.
.
.
Object
.
keys
(
initialUserBranch
)
.
.
.
Object
.
keys
(
expectedPrefs
.
userBranch
|
|
{
}
)
]
;
for
(
let
name
of
userBranchNames
)
{
userBranch
.
clearUserPref
(
name
)
;
}
}
async
function
doShowLessFrequentlyTests
(
{
feature
expectedResult
showLessFrequentlyCountPref
nimbusCapVariable
keyword
keywordBaseIndex
=
keyword
.
indexOf
(
"
"
)
}
)
{
if
(
keywordBaseIndex
<
=
0
)
{
throw
new
Error
(
"
keywordBaseIndex
must
be
>
0
but
it
'
s
"
+
keywordBaseIndex
)
;
}
if
(
keyword
.
length
<
keywordBaseIndex
+
3
)
{
throw
new
Error
(
"
keyword
must
have
at
least
two
chars
after
keywordBaseIndex
"
)
;
}
let
tests
=
[
{
showLessFrequentlyCount
:
0
canShowLessFrequently
:
true
newSearches
:
{
[
keyword
.
substring
(
0
keywordBaseIndex
-
1
)
]
:
false
[
keyword
.
substring
(
0
keywordBaseIndex
)
]
:
true
[
keyword
.
substring
(
0
keywordBaseIndex
+
1
)
]
:
true
[
keyword
.
substring
(
0
keywordBaseIndex
+
2
)
]
:
true
[
keyword
.
substring
(
0
keywordBaseIndex
+
3
)
]
:
true
}
}
{
showLessFrequentlyCount
:
1
canShowLessFrequently
:
true
newSearches
:
{
[
keyword
.
substring
(
0
keywordBaseIndex
)
]
:
false
}
}
{
showLessFrequentlyCount
:
2
canShowLessFrequently
:
true
newSearches
:
{
[
keyword
.
substring
(
0
keywordBaseIndex
+
1
)
]
:
false
}
}
{
showLessFrequentlyCount
:
3
canShowLessFrequently
:
false
newSearches
:
{
[
keyword
.
substring
(
0
keywordBaseIndex
+
2
)
]
:
false
}
}
{
showLessFrequentlyCount
:
3
canShowLessFrequently
:
false
newSearches
:
{
}
}
]
;
info
(
"
Testing
'
show
less
frequently
'
with
cap
in
remote
settings
"
)
;
await
doOneShowLessFrequentlyTest
(
{
tests
feature
expectedResult
showLessFrequentlyCountPref
rs
:
{
show_less_frequently_cap
:
3
}
}
)
;
info
(
"
Testing
'
show
less
frequently
'
with
cap
in
Nimbus
and
remote
settings
"
)
;
await
doOneShowLessFrequentlyTest
(
{
tests
feature
expectedResult
showLessFrequentlyCountPref
rs
:
{
show_less_frequently_cap
:
10
}
nimbus
:
{
[
nimbusCapVariable
]
:
3
}
}
)
;
}
async
function
doOneShowLessFrequentlyTest
(
{
feature
expectedResult
showLessFrequentlyCountPref
tests
rs
=
{
}
nimbus
=
{
}
}
)
{
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
let
cleanUpNimbus
=
await
UrlbarTestUtils
.
initNimbusFeature
(
nimbus
)
;
await
QuickSuggestTestUtils
.
withConfig
(
{
config
:
rs
callback
:
async
(
)
=
>
{
let
cumulativeSearches
=
{
}
;
for
(
let
{
showLessFrequentlyCount
canShowLessFrequently
newSearches
}
of
tests
)
{
info
(
"
Starting
subtest
:
"
+
JSON
.
stringify
(
{
showLessFrequentlyCount
canShowLessFrequently
newSearches
}
)
)
;
Assert
.
equal
(
feature
.
showLessFrequentlyCount
showLessFrequentlyCount
"
showLessFrequentlyCount
should
be
correct
initially
"
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
showLessFrequentlyCountPref
)
showLessFrequentlyCount
"
Pref
should
be
correct
initially
"
)
;
Assert
.
equal
(
feature
.
canShowLessFrequently
canShowLessFrequently
"
canShowLessFrequently
should
be
correct
initially
"
)
;
cumulativeSearches
=
{
.
.
.
cumulativeSearches
.
.
.
newSearches
}
;
for
(
let
[
searchString
isExpected
]
of
Object
.
entries
(
cumulativeSearches
)
)
{
info
(
"
Doing
search
:
"
+
JSON
.
stringify
(
{
searchString
isExpected
}
)
)
;
let
results
=
[
]
;
if
(
isExpected
)
{
results
.
push
(
typeof
expectedResult
=
=
"
function
"
?
expectedResult
(
searchString
)
:
expectedResult
)
;
}
await
check_results
(
{
context
:
createContext
(
searchString
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
results
}
)
;
}
feature
.
incrementShowLessFrequentlyCount
(
)
;
}
}
}
)
;
await
cleanUpNimbus
(
)
;
UrlbarPrefs
.
clear
(
showLessFrequentlyCountPref
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
}
async
function
doRustProvidersTests
(
{
searchString
tests
}
)
{
for
(
let
{
prefs
expectedUrls
}
of
tests
)
{
info
(
"
Starting
Rust
providers
test
:
"
+
JSON
.
stringify
(
{
prefs
expectedUrls
}
)
)
;
info
(
"
Setting
prefs
and
forcing
sync
"
)
;
for
(
let
[
name
value
]
of
Object
.
entries
(
prefs
)
)
{
UrlbarPrefs
.
set
(
name
value
)
;
}
await
QuickSuggestTestUtils
.
forceSync
(
)
;
info
(
"
Querying
with
search
string
:
"
+
JSON
.
stringify
(
searchString
)
)
;
let
suggestions
=
await
QuickSuggest
.
rustBackend
.
query
(
searchString
)
;
info
(
"
Got
suggestions
:
"
+
JSON
.
stringify
(
suggestions
)
)
;
Assert
.
deepEqual
(
suggestions
.
map
(
s
=
>
s
.
url
)
.
sort
(
)
expectedUrls
.
sort
(
)
"
query
(
)
should
return
the
expected
suggestions
(
by
URL
)
"
)
;
info
(
"
Clearing
prefs
and
forcing
sync
"
)
;
for
(
let
name
of
Object
.
keys
(
prefs
)
)
{
UrlbarPrefs
.
clear
(
name
)
;
}
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
}
function
triggerCommand
(
{
feature
command
result
searchString
=
"
"
expectedCountsByCall
=
null
}
)
{
info
(
Calling
{
feature
.
name
}
.
onEngagement
(
)
to
trigger
command
:
{
command
}
)
;
let
countsByCall
=
new
Map
(
)
;
let
addCall
=
name
=
>
{
if
(
!
countsByCall
.
has
(
name
)
)
{
countsByCall
.
set
(
name
0
)
;
}
countsByCall
.
set
(
name
countsByCall
.
get
(
name
)
+
1
)
;
}
;
feature
.
onEngagement
(
{
}
{
removeResult
(
)
{
addCall
(
"
removeResult
"
)
;
}
view
:
{
acknowledgeFeedback
(
)
{
addCall
(
"
acknowledgeFeedback
"
)
;
}
invalidateResultMenuCommands
(
)
{
addCall
(
"
invalidateResultMenuCommands
"
)
;
}
}
}
{
result
selType
:
command
}
searchString
)
;
if
(
expectedCountsByCall
)
{
for
(
let
[
name
expectedCount
]
of
Object
.
entries
(
expectedCountsByCall
)
)
{
Assert
.
equal
(
countsByCall
.
get
(
name
)
?
?
0
expectedCount
"
Function
should
have
been
called
the
expected
number
of
times
:
"
+
name
)
;
}
}
return
countsByCall
;
}
