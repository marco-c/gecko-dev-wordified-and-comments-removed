"
use
strict
"
;
const
SUGGESTIONS
=
[
{
id
:
1
url
:
"
http
:
/
/
example
.
com
/
sponsored
"
title
:
"
Sponsored
suggestion
"
keywords
:
[
"
sponsored
"
]
click_url
:
"
http
:
/
/
example
.
com
/
click
"
impression_url
:
"
http
:
/
/
example
.
com
/
impression
"
advertiser
:
"
TestAdvertiser
"
}
{
id
:
2
url
:
"
http
:
/
/
example
.
com
/
nonsponsored
"
title
:
"
Non
-
sponsored
suggestion
"
keywords
:
[
"
nonsponsored
"
]
click_url
:
"
http
:
/
/
example
.
com
/
click
"
impression_url
:
"
http
:
/
/
example
.
com
/
impression
"
advertiser
:
"
TestAdvertiser
"
iab_category
:
"
5
-
Education
"
}
]
;
const
EXPECTED_SPONSORED_RESULT
=
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
heuristic
:
false
payload
:
{
url
:
"
http
:
/
/
example
.
com
/
sponsored
"
originalUrl
:
"
http
:
/
/
example
.
com
/
sponsored
"
displayUrl
:
"
http
:
/
/
example
.
com
/
sponsored
"
title
:
"
Sponsored
suggestion
"
qsSuggestion
:
"
sponsored
"
icon
:
null
isSponsored
:
true
sponsoredImpressionUrl
:
"
http
:
/
/
example
.
com
/
impression
"
sponsoredClickUrl
:
"
http
:
/
/
example
.
com
/
click
"
sponsoredBlockId
:
1
sponsoredAdvertiser
:
"
TestAdvertiser
"
helpUrl
:
UrlbarProviderQuickSuggest
.
helpUrl
helpL10nId
:
"
firefox
-
suggest
-
urlbar
-
learn
-
more
"
source
:
"
remote
-
settings
"
}
}
;
const
EXPECTED_NONSPONSORED_RESULT
=
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
heuristic
:
false
payload
:
{
url
:
"
http
:
/
/
example
.
com
/
nonsponsored
"
originalUrl
:
"
http
:
/
/
example
.
com
/
nonsponsored
"
displayUrl
:
"
http
:
/
/
example
.
com
/
nonsponsored
"
title
:
"
Non
-
sponsored
suggestion
"
qsSuggestion
:
"
nonsponsored
"
icon
:
null
isSponsored
:
false
sponsoredImpressionUrl
:
"
http
:
/
/
example
.
com
/
impression
"
sponsoredClickUrl
:
"
http
:
/
/
example
.
com
/
click
"
sponsoredBlockId
:
2
sponsoredAdvertiser
:
"
TestAdvertiser
"
helpUrl
:
UrlbarProviderQuickSuggest
.
helpUrl
helpL10nId
:
"
firefox
-
suggest
-
urlbar
-
learn
-
more
"
source
:
"
remote
-
settings
"
}
}
;
let
gSandbox
;
let
gDateNowStub
;
add_task
(
async
function
init
(
)
{
UrlbarPrefs
.
set
(
"
quicksuggest
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
impressionCaps
.
sponsoredEnabled
"
true
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
impressionCaps
.
nonSponsoredEnabled
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
bestMatch
.
enabled
"
false
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
suggest
.
enabled
"
false
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
SUGGESTIONS
)
;
gSandbox
=
sinon
.
createSandbox
(
)
;
gDateNowStub
=
gSandbox
.
stub
(
Cu
.
getGlobalForObject
(
UrlbarProviderQuickSuggest
)
.
Date
"
now
"
)
;
}
)
;
add_task
(
async
function
oneInterval
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
3
max_count
:
1
}
]
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedSearches
(
"
sponsored
"
{
0
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
1
:
[
[
]
]
2
:
[
[
]
]
3
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
4
:
[
[
]
]
5
:
[
[
]
]
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
multipleIntervals
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
1
max_count
:
1
}
{
interval_s
:
5
max_count
:
3
}
{
interval_s
:
10
max_count
:
5
}
]
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedSearches
(
"
sponsored
"
{
0
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
1
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
2
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
3
:
[
[
]
]
4
:
[
[
]
]
5
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
6
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
7
:
[
[
]
]
8
:
[
[
]
]
9
:
[
[
]
]
10
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
11
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
12
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
13
:
[
[
]
]
14
:
[
[
]
]
15
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
16
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
17
:
[
[
]
]
18
:
[
[
]
]
19
:
[
[
]
]
20
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
lifetime
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
lifetime
:
3
}
}
}
callback
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
checkSearch
(
{
name
:
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
intervalAndLifetime
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
lifetime
:
3
custom
:
[
{
interval_s
:
1
max_count
:
1
}
]
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedSearches
(
"
sponsored
"
{
0
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
1
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
2
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
3
:
[
[
]
]
4
:
[
[
]
]
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
multipleIntervalsAndLifetime
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
lifetime
:
4
custom
:
[
{
interval_s
:
1
max_count
:
1
}
{
interval_s
:
5
max_count
:
3
}
]
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedSearches
(
"
sponsored
"
{
0
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
1
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
2
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
3
:
[
[
]
]
4
:
[
[
]
]
5
:
[
[
EXPECTED_SPONSORED_RESULT
]
[
]
]
6
:
[
[
]
]
7
:
[
[
]
]
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
nonsponsored
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
nonsponsored
:
{
lifetime
:
4
custom
:
[
{
interval_s
:
1
max_count
:
1
}
{
interval_s
:
5
max_count
:
3
}
]
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedSearches
(
"
nonsponsored
"
{
0
:
[
[
EXPECTED_NONSPONSORED_RESULT
]
[
]
]
1
:
[
[
EXPECTED_NONSPONSORED_RESULT
]
[
]
]
2
:
[
[
EXPECTED_NONSPONSORED_RESULT
]
[
]
]
3
:
[
[
]
]
4
:
[
[
]
]
5
:
[
[
EXPECTED_NONSPONSORED_RESULT
]
[
]
]
6
:
[
[
]
]
7
:
[
[
]
]
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
sponsoredAndNonsponsored
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
lifetime
:
2
}
nonsponsored
:
{
lifetime
:
3
}
}
}
callback
:
async
(
)
=
>
{
await
checkSearch
(
{
name
:
"
sponsored
1
"
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
await
checkSearch
(
{
name
:
"
nonsponsored
1
"
searchString
:
"
nonsponsored
"
expectedResults
:
[
EXPECTED_NONSPONSORED_RESULT
]
}
)
;
await
checkSearch
(
{
name
:
"
sponsored
2
"
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
await
checkSearch
(
{
name
:
"
nonsponsored
2
"
searchString
:
"
nonsponsored
"
expectedResults
:
[
EXPECTED_NONSPONSORED_RESULT
]
}
)
;
await
checkSearch
(
{
name
:
"
sponsored
3
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
await
checkSearch
(
{
name
:
"
nonsponsored
3
"
searchString
:
"
nonsponsored
"
expectedResults
:
[
EXPECTED_NONSPONSORED_RESULT
]
}
)
;
await
checkSearch
(
{
name
:
"
sponsored
4
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
await
checkSearch
(
{
name
:
"
nonsponsored
4
"
searchString
:
"
nonsponsored
"
expectedResults
:
[
]
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
emptyConfig
(
)
{
await
doTest
(
{
config
:
{
}
callback
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
sponsored
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
await
checkSearch
(
{
name
:
"
nonsponsored
"
+
i
searchString
:
"
nonsponsored
"
expectedResults
:
[
EXPECTED_NONSPONSORED_RESULT
]
}
)
;
}
}
}
)
;
}
)
;
add_task
(
async
function
sponsoredCapsDisabled
(
)
{
UrlbarPrefs
.
set
(
"
quicksuggest
.
impressionCaps
.
sponsoredEnabled
"
false
)
;
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
lifetime
:
0
}
nonsponsored
:
{
lifetime
:
3
}
}
}
callback
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
sponsored
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
await
checkSearch
(
{
name
:
"
nonsponsored
"
+
i
searchString
:
"
nonsponsored
"
expectedResults
:
[
EXPECTED_NONSPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
sponsored
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
await
checkSearch
(
{
name
:
"
nonsponsored
additional
"
searchString
:
"
nonsponsored
"
expectedResults
:
[
]
}
)
;
}
}
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
impressionCaps
.
sponsoredEnabled
"
true
)
;
}
)
;
add_task
(
async
function
nonsponsoredCapsDisabled
(
)
{
UrlbarPrefs
.
set
(
"
quicksuggest
.
impressionCaps
.
nonSponsoredEnabled
"
false
)
;
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
lifetime
:
3
}
nonsponsored
:
{
lifetime
:
0
}
}
}
callback
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
sponsored
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
await
checkSearch
(
{
name
:
"
nonsponsored
"
+
i
searchString
:
"
nonsponsored
"
expectedResults
:
[
EXPECTED_NONSPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
sponsored
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
await
checkSearch
(
{
name
:
"
nonsponsored
additional
"
searchString
:
"
nonsponsored
"
expectedResults
:
[
EXPECTED_NONSPONSORED_RESULT
]
}
)
;
}
}
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
impressionCaps
.
nonSponsoredEnabled
"
true
)
;
}
)
;
add_task
(
async
function
configChange_sameIntervalLowerCap_1
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
3
max_count
:
3
}
]
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedCallbacks
(
{
0
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
0s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
0s
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
QuickSuggestTestUtils
.
setConfig
(
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
3
max_count
:
1
}
]
}
}
}
)
;
}
1
:
async
(
)
=
>
{
await
checkSearch
(
{
name
:
"
1s
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
3
:
async
(
)
=
>
{
await
checkSearch
(
{
name
:
"
3s
0
"
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
await
checkSearch
(
{
name
:
"
3s
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
configChange_sameIntervalLowerCap_2
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
3
max_count
:
3
}
]
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedCallbacks
(
{
0
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
0s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
QuickSuggestTestUtils
.
setConfig
(
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
3
max_count
:
1
}
]
}
}
}
)
;
}
1
:
async
(
)
=
>
{
await
checkSearch
(
{
name
:
"
1s
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
3
:
async
(
)
=
>
{
await
checkSearch
(
{
name
:
"
3s
0
"
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
await
checkSearch
(
{
name
:
"
3s
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
configChange_sameIntervalHigherCap
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
3
max_count
:
3
}
]
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedCallbacks
(
{
0
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
0s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
0s
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
QuickSuggestTestUtils
.
setConfig
(
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
3
max_count
:
5
}
]
}
}
}
)
;
}
1
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
1s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
1s
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
3
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
3s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
3s
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
configChange_1IntervalTo2NewIntervalsHigher
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
3
max_count
:
3
}
]
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedCallbacks
(
{
0
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
0s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
QuickSuggestTestUtils
.
setConfig
(
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
5
max_count
:
3
}
{
interval_s
:
10
max_count
:
5
}
]
}
}
}
)
;
}
3
:
async
(
)
=
>
{
await
checkSearch
(
{
name
:
"
3s
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
4
:
async
(
)
=
>
{
await
checkSearch
(
{
name
:
"
4s
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
5
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
5s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
5s
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
configChange_2IntervalsTo1NewIntervalHigher
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
2
max_count
:
2
}
{
interval_s
:
4
max_count
:
4
}
]
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedCallbacks
(
{
0
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
0s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
}
2
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
2s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
QuickSuggestTestUtils
.
setConfig
(
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
6
max_count
:
5
}
]
}
}
}
)
;
}
4
:
async
(
)
=
>
{
await
checkSearch
(
{
name
:
"
4s
0
"
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
await
checkSearch
(
{
name
:
"
4s
1
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
5
:
async
(
)
=
>
{
await
checkSearch
(
{
name
:
"
5s
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
6
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
6s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
6s
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
configChange_1IntervalTo1NewIntervalLower
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
5
max_count
:
3
}
]
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedCallbacks
(
{
0
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
0s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
QuickSuggestTestUtils
.
setConfig
(
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
3
max_count
:
3
}
]
}
}
}
)
;
}
1
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
3s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
3s
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
configChange_1IntervalToLifetime
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
custom
:
[
{
interval_s
:
3
max_count
:
3
}
]
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedCallbacks
(
{
0
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
0s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
QuickSuggestTestUtils
.
setConfig
(
{
impression_caps
:
{
sponsored
:
{
lifetime
:
3
custom
:
[
{
interval_s
:
1
max_count
:
1
}
]
}
}
}
)
;
}
3
:
async
(
)
=
>
{
await
checkSearch
(
{
name
:
"
3s
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
configChange_lifetimeCapHigher
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
lifetime
:
3
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedCallbacks
(
{
0
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
0s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
0s
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
QuickSuggestTestUtils
.
setConfig
(
{
impression_caps
:
{
sponsored
:
{
lifetime
:
5
}
}
}
)
;
}
1
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
1s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
1s
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
configChange_lifetimeCapLower
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
lifetime
:
3
}
}
}
callback
:
async
(
)
=
>
{
await
doTimedCallbacks
(
{
0
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
3
;
i
+
+
)
{
await
checkSearch
(
{
name
:
"
0s
"
+
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
await
checkSearch
(
{
name
:
"
0s
additional
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
QuickSuggestTestUtils
.
setConfig
(
{
impression_caps
:
{
sponsored
:
{
lifetime
:
1
}
}
}
)
;
}
1
:
async
(
)
=
>
{
await
checkSearch
(
{
name
:
"
1s
"
searchString
:
"
sponsored
"
expectedResults
:
[
]
}
)
;
}
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
prefSync
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
lifetime
:
5
custom
:
[
{
interval_s
:
3
max_count
:
2
}
{
interval_s
:
5
max_count
:
4
}
]
}
}
}
callback
:
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
2
;
i
+
+
)
{
await
checkSearch
(
{
name
:
i
searchString
:
"
sponsored
"
expectedResults
:
[
EXPECTED_SPONSORED_RESULT
]
}
)
;
}
let
json
=
UrlbarPrefs
.
get
(
"
quicksuggest
.
impressionCaps
.
stats
"
)
;
Assert
.
ok
(
json
"
JSON
is
non
-
empty
"
)
;
Assert
.
deepEqual
(
JSON
.
parse
(
json
)
{
sponsored
:
[
{
intervalSeconds
:
3
count
:
2
maxCount
:
2
startDateMs
:
0
}
{
intervalSeconds
:
5
count
:
2
maxCount
:
4
startDateMs
:
0
}
{
intervalSeconds
:
null
count
:
2
maxCount
:
5
startDateMs
:
0
}
]
}
"
JSON
is
correct
"
)
;
UrlbarProviderQuickSuggest
.
_impressionStats
=
null
;
UrlbarProviderQuickSuggest
.
_loadImpressionStats
(
)
;
Assert
.
deepEqual
(
UrlbarProviderQuickSuggest
.
_impressionStats
{
sponsored
:
[
{
intervalSeconds
:
3
count
:
2
maxCount
:
2
startDateMs
:
0
}
{
intervalSeconds
:
5
count
:
2
maxCount
:
4
startDateMs
:
0
}
{
intervalSeconds
:
Infinity
count
:
2
maxCount
:
5
startDateMs
:
0
}
]
}
"
Impression
stats
were
properly
restored
from
the
pref
"
)
;
}
}
)
;
}
)
;
add_task
(
async
function
prefDirectlyChanged
(
)
{
await
doTest
(
{
config
:
{
impression_caps
:
{
sponsored
:
{
lifetime
:
5
custom
:
[
{
interval_s
:
3
max_count
:
3
}
]
}
}
}
callback
:
async
(
)
=
>
{
let
expectedStats
=
{
sponsored
:
[
{
intervalSeconds
:
3
count
:
0
maxCount
:
3
startDateMs
:
0
}
{
intervalSeconds
:
Infinity
count
:
0
maxCount
:
5
startDateMs
:
0
}
]
}
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
impressionCaps
.
stats
"
"
bogus
"
)
;
Assert
.
deepEqual
(
UrlbarProviderQuickSuggest
.
_impressionStats
expectedStats
"
Expected
stats
for
'
bogus
'
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
impressionCaps
.
stats
"
JSON
.
stringify
(
{
}
)
)
;
Assert
.
deepEqual
(
UrlbarProviderQuickSuggest
.
_impressionStats
expectedStats
"
Expected
stats
for
{
}
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
impressionCaps
.
stats
"
JSON
.
stringify
(
{
sponsored
:
"
bogus
"
}
)
)
;
Assert
.
deepEqual
(
UrlbarProviderQuickSuggest
.
_impressionStats
expectedStats
"
Expected
stats
for
{
sponsored
:
'
bogus
'
}
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
impressionCaps
.
stats
"
JSON
.
stringify
(
{
sponsored
:
[
{
intervalSeconds
:
3
count
:
0
maxCount
:
3
startDateMs
:
0
}
{
intervalSeconds
:
"
bogus
"
count
:
0
startDateMs
:
0
}
{
intervalSeconds
:
Infinity
count
:
0
maxCount
:
5
startDateMs
:
0
}
]
}
)
)
;
Assert
.
deepEqual
(
UrlbarProviderQuickSuggest
.
_impressionStats
expectedStats
"
Expected
stats
with
intervalSeconds
:
'
bogus
'
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
impressionCaps
.
stats
"
JSON
.
stringify
(
{
sponsored
:
[
{
intervalSeconds
:
3
count
:
0
maxCount
:
123
startDateMs
:
0
}
{
intervalSeconds
:
Infinity
count
:
0
maxCount
:
456
startDateMs
:
0
}
]
}
)
)
;
Assert
.
deepEqual
(
UrlbarProviderQuickSuggest
.
_impressionStats
expectedStats
"
Expected
stats
with
maxCount
values
different
from
caps
"
)
;
let
stats
=
{
sponsored
:
[
{
intervalSeconds
:
3
count
:
1
maxCount
:
3
startDateMs
:
99
}
{
intervalSeconds
:
Infinity
count
:
7
maxCount
:
5
startDateMs
:
1337
}
]
}
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
impressionCaps
.
stats
"
JSON
.
stringify
(
stats
)
)
;
Assert
.
deepEqual
(
UrlbarProviderQuickSuggest
.
_impressionStats
stats
"
Expected
stats
with
valid
JSON
"
)
;
}
}
)
;
}
)
;
async
function
doTest
(
{
config
callback
}
)
{
gDateNowStub
.
returns
(
0
)
;
await
QuickSuggestTestUtils
.
withConfig
(
{
config
callback
}
)
;
UrlbarPrefs
.
clear
(
"
quicksuggest
.
impressionCaps
.
stats
"
)
;
}
async
function
doTimedSearches
(
searchString
expectedResultsListsBySecond
)
{
await
doTimedCallbacks
(
Object
.
entries
(
expectedResultsListsBySecond
)
.
reduce
(
(
memo
[
second
expectedResultsList
]
)
=
>
{
memo
[
second
]
=
async
(
)
=
>
{
for
(
let
i
=
0
;
i
<
expectedResultsList
.
length
;
i
+
+
)
{
let
expectedResults
=
expectedResultsList
[
i
]
;
await
checkSearch
(
{
searchString
expectedResults
name
:
{
second
}
s
search
{
i
+
1
}
of
{
expectedResultsList
.
length
}
}
)
;
}
}
;
return
memo
;
}
{
}
)
)
;
}
async
function
doTimedCallbacks
(
callbacksBySecond
)
{
let
entries
=
Object
.
entries
(
callbacksBySecond
)
.
sort
(
(
[
t1
]
[
t2
]
)
=
>
t1
-
t2
)
;
for
(
let
[
timeoutSeconds
callback
]
of
entries
)
{
gDateNowStub
.
returns
(
1000
*
timeoutSeconds
)
;
await
callback
(
)
;
}
}
async
function
checkSearch
(
{
name
searchString
expectedResults
}
)
{
info
(
Doing
search
"
{
name
}
"
with
search
string
"
{
searchString
}
"
)
;
let
context
=
createContext
(
searchString
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
;
info
(
Checking
results
for
search
"
{
name
}
"
)
;
await
check_results
(
{
context
matches
:
expectedResults
}
)
;
info
(
Done
checking
results
for
search
"
{
name
}
"
)
;
let
isPrivate
=
true
;
UrlbarProviderQuickSuggest
.
onEngagement
(
isPrivate
"
engagement
"
context
{
selIndex
:
-
1
}
)
;
}
