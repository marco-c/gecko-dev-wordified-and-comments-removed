"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionTestCommon
"
"
resource
:
/
/
testing
-
common
/
ExtensionTestCommon
.
jsm
"
)
;
const
MERINO_SUGGESTIONS
=
[
{
provider
:
"
amo
"
icon
:
"
icon
"
url
:
"
url
"
title
:
"
title
"
description
:
"
description
"
is_top_pick
:
true
custom_details
:
{
amo
:
{
rating
:
"
5
"
number_of_ratings
:
"
1234567
"
guid
:
"
test
addon
"
}
}
}
]
;
add_setup
(
async
function
init
(
)
{
UrlbarPrefs
.
set
(
"
quicksuggest
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
bestMatch
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
addons
.
featureGate
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
suggest
.
enabled
"
false
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
merinoSuggestions
:
MERINO_SUGGESTIONS
}
)
;
}
)
;
add_task
(
async
function
nonsponsoredDisabled
(
)
{
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
isBestMatch
:
true
suggestedIndex
:
1
}
)
]
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
}
)
;
add_task
(
async
function
addonSuggestionsSpecificPrefDisabled
(
)
{
const
prefs
=
[
"
suggest
.
addons
"
"
addons
.
featureGate
"
]
;
for
(
const
pref
of
prefs
)
{
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
isBestMatch
:
true
suggestedIndex
:
1
}
)
]
}
)
;
UrlbarPrefs
.
set
(
pref
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
UrlbarPrefs
.
set
(
pref
true
)
;
}
}
)
;
add_task
(
async
function
hideIfAlreadyInstalled
(
)
{
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
isBestMatch
:
true
suggestedIndex
:
1
}
)
]
}
)
;
const
xpi
=
ExtensionTestCommon
.
generateXPI
(
{
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
:
"
test
addon
"
}
}
}
}
)
;
const
addon
=
await
AddonManager
.
installTemporaryAddon
(
xpi
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
await
addon
.
uninstall
(
)
;
xpi
.
remove
(
false
)
;
}
)
;
function
makeExpectedResult
(
{
isBestMatch
suggestedIndex
}
)
{
return
{
isBestMatch
suggestedIndex
type
:
UrlbarUtils
.
RESULT_TYPE
.
DYNAMIC
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
heuristic
:
false
payload
:
{
telemetryType
:
"
amo
"
dynamicType
:
"
addons
"
title
:
"
title
"
url
:
"
url
"
displayUrl
:
"
url
"
icon
:
"
icon
"
description
:
"
description
"
rating
:
5
reviews
:
1234567
shouldNavigate
:
true
helpUrl
:
QuickSuggest
.
HELP_URL
source
:
"
merino
"
}
}
;
}
