"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
ExtensionTestCommon
:
"
resource
:
/
/
testing
-
common
/
ExtensionTestCommon
.
sys
.
mjs
"
}
)
;
const
MERINO_SUGGESTIONS
=
[
{
provider
:
"
amo
"
icon
:
"
icon
"
url
:
"
url
"
title
:
"
title
"
description
:
"
description
"
is_top_pick
:
true
custom_details
:
{
amo
:
{
rating
:
"
5
"
number_of_ratings
:
"
1234567
"
guid
:
"
test
addon
"
}
}
}
]
;
const
REMOTE_SETTINGS_RESULTS
=
[
{
type
:
"
amo
-
suggestions
"
attachment
:
[
{
url
:
"
https
:
/
/
example
.
com
/
first
-
addon
"
guid
:
"
first
addon
"
icon
:
"
https
:
/
/
example
.
com
/
first
-
addon
.
svg
"
title
:
"
First
Addon
"
rating
:
"
4
.
7
"
keywords
:
[
"
first
"
"
1st
"
]
description
:
"
Description
for
the
First
Addon
"
number_of_ratings
:
1256
is_top_pick
:
true
}
{
url
:
"
https
:
/
/
example
.
com
/
second
-
addon
"
guid
:
"
second
addon
"
icon
:
"
https
:
/
/
example
.
com
/
second
-
addon
.
svg
"
title
:
"
Second
Addon
"
rating
:
"
1
.
7
"
keywords
:
[
"
second
"
"
2nd
"
]
description
:
"
Description
for
the
Second
Addon
"
number_of_ratings
:
256
is_top_pick
:
false
}
{
url
:
"
https
:
/
/
example
.
com
/
third
-
addon
"
guid
:
"
third
addon
"
icon
:
"
https
:
/
/
example
.
com
/
third
-
addon
.
svg
"
title
:
"
Third
Addon
"
rating
:
"
3
.
7
"
keywords
:
[
"
third
"
"
3rd
"
]
description
:
"
Description
for
the
Third
Addon
"
number_of_ratings
:
3
}
]
}
]
;
add_setup
(
async
function
init
(
)
{
UrlbarPrefs
.
set
(
"
quicksuggest
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
bestMatch
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
addons
.
featureGate
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
suggest
.
enabled
"
false
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
remoteSettingsResults
:
REMOTE_SETTINGS_RESULTS
merinoSuggestions
:
MERINO_SUGGESTIONS
}
)
;
}
)
;
add_task
(
async
function
nonsponsoredDisabled
(
)
{
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
suggestion
:
MERINO_SUGGESTIONS
[
0
]
source
:
"
merino
"
isTopPick
:
true
}
)
]
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
}
)
;
add_task
(
async
function
addonSuggestionsSpecificPrefDisabled
(
)
{
const
prefs
=
[
"
suggest
.
addons
"
"
addons
.
featureGate
"
]
;
for
(
const
pref
of
prefs
)
{
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
suggestion
:
MERINO_SUGGESTIONS
[
0
]
source
:
"
merino
"
isTopPick
:
true
}
)
]
}
)
;
UrlbarPrefs
.
set
(
pref
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
UrlbarPrefs
.
set
(
pref
true
)
;
}
}
)
;
add_task
(
async
function
nimbus
(
)
{
UrlbarPrefs
.
set
(
"
addons
.
featureGate
"
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
const
cleanUpNimbusEnable
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
addonsFeatureGate
:
true
}
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
suggestion
:
MERINO_SUGGESTIONS
[
0
]
source
:
"
merino
"
isTopPick
:
true
}
)
]
}
)
;
await
cleanUpNimbusEnable
(
)
;
UrlbarPrefs
.
set
(
"
addons
.
featureGate
"
true
)
;
const
cleanUpNimbusDisable
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
addonsFeatureGate
:
false
}
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
await
cleanUpNimbusDisable
(
)
;
UrlbarPrefs
.
set
(
"
addons
.
featureGate
"
true
)
;
}
)
;
add_task
(
async
function
hideIfAlreadyInstalled
(
)
{
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
suggestion
:
MERINO_SUGGESTIONS
[
0
]
source
:
"
merino
"
isTopPick
:
true
}
)
]
}
)
;
const
xpi
=
ExtensionTestCommon
.
generateXPI
(
{
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
:
"
test
addon
"
}
}
}
}
)
;
const
addon
=
await
AddonManager
.
installTemporaryAddon
(
xpi
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
await
addon
.
uninstall
(
)
;
xpi
.
remove
(
false
)
;
}
)
;
add_task
(
async
function
remoteSettings
(
)
{
const
testCases
=
[
{
input
:
"
first
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
isTopPick
:
true
}
)
}
{
input
:
"
1st
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
isTopPick
:
true
}
)
}
{
input
:
"
second
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
1
]
source
:
"
remote
-
settings
"
isTopPick
:
false
}
)
}
{
input
:
"
2nd
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
1
]
source
:
"
remote
-
settings
"
isTopPick
:
false
}
)
}
{
input
:
"
third
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
2
]
source
:
"
remote
-
settings
"
isTopPick
:
true
}
)
}
{
input
:
"
3rd
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
2
]
source
:
"
remote
-
settings
"
isTopPick
:
true
}
)
}
{
input
:
"
not
rs
"
expected
:
makeExpectedResult
(
{
suggestion
:
MERINO_SUGGESTIONS
[
0
]
source
:
"
merino
"
isTopPick
:
true
}
)
}
]
;
for
(
const
{
input
expected
}
of
testCases
)
{
await
check_results
(
{
context
:
createContext
(
input
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
expected
]
}
)
;
}
}
)
;
add_task
(
async
function
merinoIsTopPick
(
)
{
const
suggestion
=
JSON
.
parse
(
JSON
.
stringify
(
MERINO_SUGGESTIONS
[
0
]
)
)
;
suggestion
.
is_top_pick
=
false
;
MerinoTestUtils
.
server
.
response
.
body
.
suggestions
=
[
suggestion
]
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
suggestion
source
:
"
merino
"
isTopPick
:
false
}
)
]
}
)
;
delete
suggestion
.
is_top_pick
;
MerinoTestUtils
.
server
.
response
.
body
.
suggestions
=
[
suggestion
]
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
suggestion
source
:
"
merino
"
isTopPick
:
true
}
)
]
}
)
;
}
)
;
function
makeExpectedResult
(
{
suggestion
source
isTopPick
}
)
{
let
rating
;
let
number_of_ratings
;
if
(
source
=
=
=
"
remote
-
settings
"
)
{
rating
=
suggestion
.
rating
;
number_of_ratings
=
suggestion
.
number_of_ratings
;
}
else
{
rating
=
suggestion
.
custom_details
.
amo
.
rating
;
number_of_ratings
=
suggestion
.
custom_details
.
amo
.
number_of_ratings
;
}
return
{
isBestMatch
:
isTopPick
suggestedIndex
:
isTopPick
?
1
:
-
1
type
:
UrlbarUtils
.
RESULT_TYPE
.
DYNAMIC
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
heuristic
:
false
payload
:
{
telemetryType
:
"
amo
"
dynamicType
:
"
addons
"
title
:
suggestion
.
title
url
:
suggestion
.
url
displayUrl
:
suggestion
.
url
.
replace
(
/
^
https
:
\
/
\
/
/
"
"
)
icon
:
suggestion
.
icon
description
:
suggestion
.
description
rating
:
Number
(
rating
)
reviews
:
Number
(
number_of_ratings
)
shouldNavigate
:
true
helpUrl
:
QuickSuggest
.
HELP_URL
source
}
}
;
}
