"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
sys
.
mjs
"
AddonTestUtils
:
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
sys
.
mjs
"
ExtensionTestCommon
:
"
resource
:
/
/
testing
-
common
/
ExtensionTestCommon
.
sys
.
mjs
"
}
)
;
AddonTestUtils
.
init
(
this
false
)
;
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
42
"
"
42
"
)
;
const
MERINO_SUGGESTIONS
=
[
{
provider
:
"
amo
"
icon
:
"
icon
"
url
:
"
https
:
/
/
example
.
com
/
merino
-
addon
"
title
:
"
title
"
description
:
"
description
"
is_top_pick
:
true
custom_details
:
{
amo
:
{
rating
:
"
5
"
number_of_ratings
:
"
1234567
"
guid
:
"
test
addon
"
}
}
}
]
;
const
REMOTE_SETTINGS_RESULTS
=
[
{
type
:
"
amo
-
suggestions
"
attachment
:
[
{
url
:
"
https
:
/
/
example
.
com
/
first
-
addon
"
guid
:
"
first
addon
"
icon
:
"
https
:
/
/
example
.
com
/
first
-
addon
.
svg
"
title
:
"
First
Addon
"
rating
:
"
4
.
7
"
keywords
:
[
"
first
"
"
1st
"
"
two
words
"
"
aa
b
c
"
]
description
:
"
Description
for
the
First
Addon
"
number_of_ratings
:
1256
score
:
0
.
25
}
{
url
:
"
https
:
/
/
example
.
com
/
second
-
addon
"
guid
:
"
second
addon
"
icon
:
"
https
:
/
/
example
.
com
/
second
-
addon
.
svg
"
title
:
"
Second
Addon
"
rating
:
"
1
.
7
"
keywords
:
[
"
second
"
"
2nd
"
]
description
:
"
Description
for
the
Second
Addon
"
number_of_ratings
:
256
score
:
0
.
25
}
{
url
:
"
https
:
/
/
example
.
com
/
third
-
addon
"
guid
:
"
third
addon
"
icon
:
"
https
:
/
/
example
.
com
/
third
-
addon
.
svg
"
title
:
"
Third
Addon
"
rating
:
"
3
.
7
"
keywords
:
[
"
third
"
"
3rd
"
]
description
:
"
Description
for
the
Third
Addon
"
number_of_ratings
:
3
score
:
0
.
25
}
{
url
:
"
https
:
/
/
example
.
com
/
fourth
-
addon
?
utm_medium
=
aaa
&
utm_source
=
bbb
"
guid
:
"
fourth
addon
"
icon
:
"
https
:
/
/
example
.
com
/
fourth
-
addon
.
svg
"
title
:
"
Fourth
Addon
"
rating
:
"
4
.
7
"
keywords
:
[
"
fourth
"
"
4th
"
]
description
:
"
Description
for
the
Fourth
Addon
"
number_of_ratings
:
4
score
:
0
.
25
}
]
}
]
;
add_setup
(
async
function
init
(
)
{
await
AddonTestUtils
.
promiseStartupManager
(
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
suggest
.
enabled
"
false
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
remoteSettingsRecords
:
REMOTE_SETTINGS_RESULTS
merinoSuggestions
:
MERINO_SUGGESTIONS
prefs
:
[
[
"
suggest
.
quicksuggest
.
nonsponsored
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
telemetryType
(
)
{
Assert
.
equal
(
QuickSuggest
.
getFeature
(
"
AddonSuggestions
"
)
.
getSuggestionTelemetryType
(
{
}
)
"
amo
"
"
Telemetry
type
should
be
'
amo
'
"
)
;
}
)
;
add_tasks_with_rust
(
async
function
quickSuggestPrefsDisabled
(
)
{
let
prefs
=
[
"
quicksuggest
.
enabled
"
"
suggest
.
quicksuggest
.
nonsponsored
"
]
;
for
(
let
pref
of
prefs
)
{
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
suggestion
:
MERINO_SUGGESTIONS
[
0
]
source
:
"
merino
"
}
)
]
}
)
;
UrlbarPrefs
.
set
(
pref
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
UrlbarPrefs
.
set
(
pref
true
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
}
)
;
add_tasks_with_rust
(
async
function
addonSuggestionsSpecificPrefDisabled
(
)
{
const
prefs
=
[
"
suggest
.
addons
"
"
addons
.
featureGate
"
]
;
for
(
const
pref
of
prefs
)
{
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
suggestion
:
MERINO_SUGGESTIONS
[
0
]
source
:
"
merino
"
}
)
]
}
)
;
UrlbarPrefs
.
set
(
pref
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
UrlbarPrefs
.
clear
(
pref
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
}
)
;
add_tasks_with_rust
(
async
function
nimbus
(
)
{
UrlbarPrefs
.
set
(
"
addons
.
featureGate
"
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
const
cleanUpNimbusEnable
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
addonsFeatureGate
:
true
}
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
suggestion
:
MERINO_SUGGESTIONS
[
0
]
source
:
"
merino
"
}
)
]
}
)
;
await
cleanUpNimbusEnable
(
)
;
UrlbarPrefs
.
set
(
"
addons
.
featureGate
"
true
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
const
cleanUpNimbusDisable
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
addonsFeatureGate
:
false
}
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
await
cleanUpNimbusDisable
(
)
;
UrlbarPrefs
.
clear
(
"
addons
.
featureGate
"
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
)
;
add_tasks_with_rust
(
async
function
hideIfAlreadyInstalled
(
)
{
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
suggestion
:
MERINO_SUGGESTIONS
[
0
]
source
:
"
merino
"
}
)
]
}
)
;
const
xpi
=
ExtensionTestCommon
.
generateXPI
(
{
manifest
:
{
browser_specific_settings
:
{
gecko
:
{
id
:
"
test
addon
"
}
}
}
}
)
;
const
addon
=
await
AddonManager
.
installTemporaryAddon
(
xpi
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
await
addon
.
uninstall
(
)
;
xpi
.
remove
(
false
)
;
}
)
;
add_tasks_with_rust
(
async
function
remoteSettings
(
)
{
const
testCases
=
[
{
input
:
"
f
"
expected
:
null
}
{
input
:
"
fi
"
expected
:
null
}
{
input
:
"
fir
"
expected
:
null
}
{
input
:
"
firs
"
expected
:
null
}
{
input
:
"
first
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
1st
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
t
"
expected
:
null
}
{
input
:
"
tw
"
expected
:
null
}
{
input
:
"
two
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
two
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
two
w
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
two
wo
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
two
wor
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
two
word
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
two
words
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
aa
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
aa
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
aa
b
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
aa
b
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
aa
b
c
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
second
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
1
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
2nd
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
1
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
third
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
2
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
3rd
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
2
]
source
:
"
remote
-
settings
"
}
)
}
{
input
:
"
fourth
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
3
]
source
:
"
remote
-
settings
"
setUtmParams
:
false
}
)
}
{
input
:
"
FoUrTh
"
expected
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
3
]
source
:
"
remote
-
settings
"
setUtmParams
:
false
}
)
}
]
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
false
)
;
for
(
let
{
input
expected
}
of
testCases
)
{
await
check_results
(
{
context
:
createContext
(
input
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
expected
?
[
expected
]
:
[
]
}
)
;
}
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
true
)
;
}
)
;
add_task
(
async
function
merinoIsTopPick
(
)
{
const
suggestion
=
JSON
.
parse
(
JSON
.
stringify
(
MERINO_SUGGESTIONS
[
0
]
)
)
;
suggestion
.
is_top_pick
=
false
;
MerinoTestUtils
.
server
.
response
.
body
.
suggestions
=
[
suggestion
]
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
suggestion
source
:
"
merino
"
}
)
]
}
)
;
delete
suggestion
.
is_top_pick
;
MerinoTestUtils
.
server
.
response
.
body
.
suggestions
=
[
suggestion
]
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
suggestion
source
:
"
merino
"
}
)
]
}
)
;
}
)
;
add_tasks_with_rust
(
async
function
showLessFrequently
(
)
{
await
doShowLessFrequentlyTests
(
{
feature
:
QuickSuggest
.
getFeature
(
"
AddonSuggestions
"
)
showLessFrequentlyCountPref
:
"
addons
.
showLessFrequentlyCount
"
nimbusCapVariable
:
"
addonsShowLessFrequentlyCap
"
expectedResult
:
makeExpectedResult
(
{
suggestion
:
REMOTE_SETTINGS_RESULTS
[
0
]
.
attachment
[
0
]
source
:
"
remote
-
settings
"
}
)
keyword
:
"
two
words
"
}
)
;
}
)
;
add_task
(
async
function
rustProviders
(
)
{
await
doRustProvidersTests
(
{
searchString
:
"
first
"
tests
:
[
{
prefs
:
{
"
suggest
.
addons
"
:
true
}
expectedUrls
:
[
"
https
:
/
/
example
.
com
/
first
-
addon
"
]
}
{
prefs
:
{
"
suggest
.
addons
"
:
false
}
expectedUrls
:
[
]
}
]
}
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
addons
"
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
)
;
function
makeExpectedResult
(
{
suggestion
source
setUtmParams
=
true
}
)
{
if
(
source
=
=
"
remote
-
settings
"
&
&
UrlbarPrefs
.
get
(
"
quicksuggest
.
rustEnabled
"
)
)
{
source
=
"
rust
"
;
}
let
provider
;
switch
(
source
)
{
case
"
remote
-
settings
"
:
provider
=
"
AddonSuggestions
"
;
break
;
case
"
rust
"
:
provider
=
"
Amo
"
;
break
;
case
"
merino
"
:
provider
=
"
amo
"
;
break
;
}
return
makeAmoResult
(
{
source
provider
setUtmParams
title
:
suggestion
.
title
description
:
suggestion
.
description
url
:
suggestion
.
url
originalUrl
:
suggestion
.
url
icon
:
suggestion
.
icon
}
)
;
}
