"
use
strict
"
;
add_setup
(
async
(
)
=
>
{
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
remoteSettingsRecords
:
[
QuickSuggestTestUtils
.
weatherRecord
(
)
]
prefs
:
[
[
"
suggest
.
quicksuggest
.
sponsored
"
true
]
[
"
weather
.
featureGate
"
true
]
]
}
)
;
await
MerinoTestUtils
.
initWeather
(
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doKeywordsTest
(
{
desc
:
"
No
data
"
tests
:
{
"
"
:
false
w
:
false
we
:
false
wea
:
false
weat
:
false
weath
:
false
weathe
:
false
weather
:
false
}
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doKeywordsTest
(
{
desc
:
"
Settings
only
min
keyword
length
>
0
"
settingsData
:
{
keywords
:
[
"
weather
"
]
min_keyword_length
:
3
}
tests
:
{
"
"
:
false
w
:
false
we
:
false
wea
:
true
weat
:
true
weath
:
true
weathe
:
true
weather
:
true
}
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doKeywordsTest
(
{
desc
:
"
Settings
only
min
keyword
length
=
0
pref
exists
"
settingsData
:
{
keywords
:
[
"
weather
"
]
min_keyword_length
:
0
}
minKeywordLength
:
6
tests
:
{
"
"
:
false
w
:
false
we
:
false
wea
:
false
weat
:
false
weath
:
false
weathe
:
false
weather
:
true
}
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doKeywordsTest
(
{
desc
:
"
Settings
only
min
keyword
length
>
0
pref
exists
"
settingsData
:
{
keywords
:
[
"
weather
"
]
min_keyword_length
:
3
}
minKeywordLength
:
6
tests
:
{
"
"
:
false
w
:
false
we
:
false
wea
:
false
weat
:
false
weath
:
false
weathe
:
true
weather
:
true
}
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doKeywordsTest
(
{
desc
:
"
Settings
:
keywords
min
keyword
length
>
0
;
Nimbus
:
min
keyword
length
=
0
"
settingsData
:
{
keywords
:
[
"
weather
"
]
min_keyword_length
:
3
}
nimbusValues
:
{
weatherKeywordsMinimumLength
:
0
}
tests
:
{
"
"
:
false
w
:
false
we
:
false
wea
:
true
weat
:
true
weath
:
true
weathe
:
true
weather
:
true
}
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doKeywordsTest
(
{
desc
:
"
Settings
:
keywords
min
keyword
length
>
0
;
Nimbus
:
min
keyword
length
>
settings
min
keyword
length
"
settingsData
:
{
keywords
:
[
"
weather
"
]
min_keyword_length
:
3
}
nimbusValues
:
{
weatherKeywordsMinimumLength
:
4
}
tests
:
{
"
"
:
false
w
:
false
we
:
false
wea
:
false
weat
:
true
weath
:
true
weathe
:
true
weather
:
true
}
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doKeywordsTest
(
{
desc
:
"
Settings
:
keywords
min
keyword
length
>
0
;
Nimbus
:
min
keyword
length
=
0
;
pref
exists
"
settingsData
:
{
keywords
:
[
"
weather
"
]
min_keyword_length
:
3
}
nimbusValues
:
{
weatherKeywordsMinimumLength
:
0
}
minKeywordLength
:
6
tests
:
{
"
"
:
false
w
:
false
we
:
false
wea
:
false
weat
:
false
weath
:
false
weathe
:
true
weather
:
true
}
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doKeywordsTest
(
{
desc
:
"
Settings
:
keywords
min
keyword
length
>
0
;
Nimbus
:
min
keyword
length
>
settings
min
keyword
length
;
pref
exists
"
settingsData
:
{
keywords
:
[
"
weather
"
]
min_keyword_length
:
3
}
nimbusValues
:
{
weatherKeywordsMinimumLength
:
4
}
minKeywordLength
:
6
tests
:
{
"
"
:
false
w
:
false
we
:
false
wea
:
false
weat
:
false
weath
:
false
weathe
:
true
weather
:
true
}
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doKeywordsTest
(
{
desc
:
"
Settings
:
keywords
only
;
Nimbus
:
min
keyword
length
=
0
"
settingsData
:
{
keywords
:
[
"
weather
"
]
}
nimbusValues
:
{
weatherKeywordsMinimumLength
:
0
}
tests
:
{
"
"
:
false
w
:
false
we
:
false
wea
:
false
weat
:
false
weath
:
false
weathe
:
false
weather
:
true
}
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doKeywordsTest
(
{
desc
:
"
Settings
:
keywords
only
;
Nimbus
:
min
keyword
length
>
0
"
settingsData
:
{
keywords
:
[
"
weather
"
]
}
nimbusValues
:
{
weatherKeywordsMinimumLength
:
4
}
tests
:
{
"
"
:
false
w
:
false
we
:
false
wea
:
false
weat
:
false
weath
:
false
weathe
:
false
weather
:
true
}
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doKeywordsTest
(
{
desc
:
"
Settings
:
keywords
only
;
Nimbus
:
min
keyword
length
=
0
;
pref
exists
"
settingsData
:
{
keywords
:
[
"
weather
"
"
wind
"
]
}
nimbusValues
:
{
weatherKeywordsMinimumLength
:
0
}
minKeywordLength
:
6
tests
:
{
"
"
:
false
w
:
false
we
:
false
wea
:
false
weat
:
false
weath
:
false
weathe
:
false
weather
:
true
wi
:
false
win
:
false
wind
:
false
}
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
doKeywordsTest
(
{
desc
:
"
Settings
:
keywords
only
;
Nimbus
:
min
keyword
length
>
settings
min
keyword
length
;
pref
exists
"
settingsData
:
{
keywords
:
[
"
weather
"
"
wind
"
]
}
nimbusValues
:
{
weatherKeywordsMinimumLength
:
4
}
minKeywordLength
:
6
tests
:
{
"
"
:
false
w
:
false
we
:
false
wea
:
false
weat
:
false
weath
:
false
weathe
:
false
weather
:
true
wi
:
false
win
:
false
wind
:
false
}
}
)
;
}
)
;
add_task
(
async
function
leadingAndTrailingSpaces
(
)
{
await
doKeywordsTest
(
{
settingsData
:
{
keywords
:
[
"
weather
"
]
min_keyword_length
:
3
}
tests
:
{
"
wea
"
:
true
"
wea
"
:
true
"
wea
"
:
true
"
wea
"
:
true
"
wea
"
:
true
"
weat
"
:
true
"
weat
"
:
true
"
weat
"
:
true
"
weat
"
:
true
"
weat
"
:
true
}
}
)
;
}
)
;
add_task
(
async
function
caseInsensitive
(
)
{
await
doKeywordsTest
(
{
desc
:
"
Case
insensitive
"
settingsData
:
{
keywords
:
[
"
weather
"
]
min_keyword_length
:
3
}
tests
:
{
wea
:
true
WEA
:
true
Wea
:
true
WeA
:
true
WEATHER
:
true
Weather
:
true
WeAtHeR
:
true
}
}
)
;
}
)
;
async
function
doKeywordsTest
(
{
desc
tests
nimbusValues
=
null
settingsData
=
null
minKeywordLength
=
undefined
}
)
{
info
(
"
Doing
keywords
test
:
"
+
desc
)
;
info
(
JSON
.
stringify
(
{
nimbusValues
settingsData
minKeywordLength
}
)
)
;
let
nimbusCleanup
;
if
(
nimbusValues
)
{
nimbusCleanup
=
await
UrlbarTestUtils
.
initNimbusFeature
(
nimbusValues
)
;
}
let
records
=
[
]
;
if
(
settingsData
)
{
records
.
push
(
QuickSuggestTestUtils
.
weatherRecord
(
settingsData
)
)
;
}
await
QuickSuggestTestUtils
.
setRemoteSettingsRecords
(
records
)
;
if
(
minKeywordLength
)
{
UrlbarPrefs
.
set
(
"
weather
.
minKeywordLength
"
minKeywordLength
)
;
}
let
expectedResult
=
QuickSuggestTestUtils
.
weatherResult
(
)
;
for
(
let
[
searchString
expected
]
of
Object
.
entries
(
tests
)
)
{
info
(
"
Doing
keywords
test
search
:
"
+
JSON
.
stringify
(
{
searchString
expected
}
)
)
;
await
check_results
(
{
context
:
createContext
(
searchString
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
expected
?
[
expectedResult
]
:
[
]
}
)
;
}
await
nimbusCleanup
?
.
(
)
;
await
QuickSuggestTestUtils
.
setRemoteSettingsRecords
(
[
QuickSuggestTestUtils
.
weatherRecord
(
)
]
)
;
UrlbarPrefs
.
clear
(
"
weather
.
minKeywordLength
"
)
;
}
add_task
(
async
function
(
)
{
await
doShowLessFrequentlyTest
(
{
desc
:
"
No
cap
"
weather
:
{
keywords
:
[
"
forecast
"
]
min_keyword_length
:
3
}
tests
:
[
{
input
:
"
for
"
before
:
{
canShowLessFrequently
:
true
showLessFrequentlyCount
:
0
minKeywordLength
:
0
}
after
:
{
canShowLessFrequently
:
true
showLessFrequentlyCount
:
1
minKeywordLength
:
4
}
}
{
input
:
"
fore
"
before
:
{
canShowLessFrequently
:
true
showLessFrequentlyCount
:
1
minKeywordLength
:
4
}
after
:
{
canShowLessFrequently
:
true
showLessFrequentlyCount
:
2
minKeywordLength
:
5
}
}
{
input
:
"
forecast
"
before
:
{
canShowLessFrequently
:
true
showLessFrequentlyCount
:
2
minKeywordLength
:
5
}
after
:
{
canShowLessFrequently
:
true
showLessFrequentlyCount
:
3
minKeywordLength
:
9
}
}
]
}
)
;
}
)
;
add_task
(
async
function
(
)
{
for
(
let
configuration
of
[
null
{
show_less_frequently_cap
:
3
}
]
)
{
for
(
let
nimbusValues
of
[
null
{
weatherShowLessFrequentlyCap
:
3
}
]
)
{
if
(
!
configuration
&
&
!
nimbusValues
)
{
continue
;
}
await
doShowLessFrequentlyTest
(
{
desc
:
"
Cap
:
"
+
JSON
.
stringify
(
{
configuration
nimbusValues
}
)
weather
:
{
keywords
:
[
"
forecast
"
]
min_keyword_length
:
3
}
configuration
nimbusValues
tests
:
[
{
input
:
"
for
"
before
:
{
canShowLessFrequently
:
true
showLessFrequentlyCount
:
0
minKeywordLength
:
0
}
after
:
{
canShowLessFrequently
:
true
showLessFrequentlyCount
:
1
minKeywordLength
:
4
}
}
{
input
:
"
fore
"
before
:
{
canShowLessFrequently
:
true
showLessFrequentlyCount
:
1
minKeywordLength
:
4
}
after
:
{
canShowLessFrequently
:
true
showLessFrequentlyCount
:
2
minKeywordLength
:
5
}
}
{
input
:
"
forecast
"
before
:
{
canShowLessFrequently
:
true
showLessFrequentlyCount
:
2
minKeywordLength
:
5
}
after
:
{
canShowLessFrequently
:
false
showLessFrequentlyCount
:
3
minKeywordLength
:
9
}
}
]
}
)
;
}
}
}
)
;
async
function
doShowLessFrequentlyTest
(
{
desc
tests
weather
configuration
=
null
nimbusValues
=
null
}
)
{
info
(
"
Doing
increment
test
:
"
+
desc
)
;
info
(
JSON
.
stringify
(
{
weather
configuration
nimbusValues
}
)
)
;
let
nimbusCleanup
;
if
(
nimbusValues
)
{
nimbusCleanup
=
await
UrlbarTestUtils
.
initNimbusFeature
(
nimbusValues
)
;
}
let
records
=
[
QuickSuggestTestUtils
.
weatherRecord
(
weather
)
]
;
if
(
configuration
)
{
records
.
push
(
{
type
:
"
configuration
"
configuration
}
)
;
}
await
QuickSuggestTestUtils
.
setRemoteSettingsRecords
(
records
)
;
let
feature
=
QuickSuggest
.
getFeature
(
"
WeatherSuggestions
"
)
;
let
expectedResult
=
QuickSuggestTestUtils
.
weatherResult
(
)
;
for
(
let
{
input
before
after
}
of
tests
)
{
info
(
"
Doing
increment
test
case
:
"
+
JSON
.
stringify
(
{
input
}
)
)
;
await
check_results
(
{
context
:
createContext
(
input
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
expectedResult
]
}
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
"
weather
.
minKeywordLength
"
)
before
.
minKeywordLength
"
weather
.
minKeywordLength
before
"
)
;
Assert
.
equal
(
feature
.
canShowLessFrequently
before
.
canShowLessFrequently
"
feature
.
canShowLessFrequently
before
"
)
;
Assert
.
equal
(
feature
.
showLessFrequentlyCount
before
.
showLessFrequentlyCount
"
feature
.
showLessFrequentlyCount
before
"
)
;
triggerCommand
(
{
feature
result
:
expectedResult
command
:
"
show_less_frequently
"
searchString
:
input
expectedCountsByCall
:
{
acknowledgeFeedback
:
1
invalidateResultMenuCommands
:
after
.
canShowLessFrequently
?
0
:
1
}
}
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
"
weather
.
minKeywordLength
"
)
after
.
minKeywordLength
"
weather
.
minKeywordLength
after
"
)
;
Assert
.
equal
(
feature
.
canShowLessFrequently
after
.
canShowLessFrequently
"
feature
.
canShowLessFrequently
after
"
)
;
Assert
.
equal
(
feature
.
showLessFrequentlyCount
after
.
showLessFrequentlyCount
"
feature
.
showLessFrequentlyCount
after
"
)
;
await
check_results
(
{
context
:
createContext
(
input
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
}
await
nimbusCleanup
?
.
(
)
;
await
QuickSuggestTestUtils
.
setRemoteSettingsRecords
(
[
QuickSuggestTestUtils
.
weatherRecord
(
)
]
)
;
UrlbarPrefs
.
clear
(
"
weather
.
minKeywordLength
"
)
;
UrlbarPrefs
.
clear
(
"
weather
.
showLessFrequentlyCount
"
)
;
}
