"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
Preferences
:
"
resource
:
/
/
gre
/
modules
/
Preferences
.
sys
.
mjs
"
}
)
;
const
EXPECTED_EU_PREFS
=
{
"
quicksuggest
.
enabled
"
:
true
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
"
quicksuggest
.
settingsUi
"
:
QuickSuggest
.
SETTINGS_UI
.
OFFLINE_ONLY
"
suggest
.
quicksuggest
.
nonsponsored
"
:
true
"
suggest
.
quicksuggest
.
sponsored
"
:
true
"
addons
.
featureGate
"
:
false
"
amp
.
featureGate
"
:
false
"
mdn
.
featureGate
"
:
false
"
weather
.
featureGate
"
:
true
"
wikipedia
.
featureGate
"
:
false
"
yelp
.
featureGate
"
:
false
}
;
const
EXPECTED_PREFS_BY_REGION
=
{
DE
:
EXPECTED_EU_PREFS
FR
:
EXPECTED_EU_PREFS
GB
:
{
"
quicksuggest
.
enabled
"
:
true
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
"
quicksuggest
.
settingsUi
"
:
QuickSuggest
.
SETTINGS_UI
.
OFFLINE_ONLY
"
suggest
.
quicksuggest
.
nonsponsored
"
:
true
"
suggest
.
quicksuggest
.
sponsored
"
:
true
"
addons
.
featureGate
"
:
false
"
amp
.
featureGate
"
:
true
"
mdn
.
featureGate
"
:
false
"
weather
.
featureGate
"
:
true
"
wikipedia
.
featureGate
"
:
true
"
yelp
.
featureGate
"
:
false
}
IT
:
EXPECTED_EU_PREFS
US
:
{
"
quicksuggest
.
enabled
"
:
true
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
"
quicksuggest
.
settingsUi
"
:
QuickSuggest
.
SETTINGS_UI
.
FULL
"
suggest
.
quicksuggest
.
nonsponsored
"
:
true
"
suggest
.
quicksuggest
.
sponsored
"
:
true
"
addons
.
featureGate
"
:
true
"
amp
.
featureGate
"
:
true
"
mdn
.
featureGate
"
:
true
"
weather
.
featureGate
"
:
true
"
wikipedia
.
featureGate
"
:
true
"
yelp
.
featureGate
"
:
true
}
}
;
const
EXPECTED_PREFS_DISABLED
=
{
"
quicksuggest
.
enabled
"
:
false
"
quicksuggest
.
dataCollection
.
enabled
"
:
false
"
quicksuggest
.
settingsUi
"
:
0
"
suggest
.
quicksuggest
.
nonsponsored
"
:
false
"
suggest
.
quicksuggest
.
sponsored
"
:
false
"
addons
.
featureGate
"
:
false
"
amp
.
featureGate
"
:
false
"
mdn
.
featureGate
"
:
false
"
weather
.
featureGate
"
:
false
"
wikipedia
.
featureGate
"
:
false
"
yelp
.
featureGate
"
:
false
}
;
add_setup
(
async
(
)
=
>
{
await
UrlbarTestUtils
.
initNimbusFeature
(
)
;
}
)
;
add_task
(
async
function
test
(
)
{
let
tests
=
[
{
region
:
"
DE
"
locale
:
"
de
"
expectSuggestToBeEnabled
:
true
}
{
region
:
"
FR
"
locale
:
"
fr
"
expectSuggestToBeEnabled
:
true
}
{
region
:
"
GB
"
locale
:
"
en
-
US
"
expectSuggestToBeEnabled
:
true
}
{
region
:
"
GB
"
locale
:
"
en
-
CA
"
expectSuggestToBeEnabled
:
true
}
{
region
:
"
GB
"
locale
:
"
en
-
GB
"
expectSuggestToBeEnabled
:
true
}
{
region
:
"
IT
"
locale
:
"
it
"
expectSuggestToBeEnabled
:
true
}
{
region
:
"
US
"
locale
:
"
en
-
US
"
expectSuggestToBeEnabled
:
true
}
{
region
:
"
US
"
locale
:
"
en
-
CA
"
expectSuggestToBeEnabled
:
true
}
{
region
:
"
US
"
locale
:
"
en
-
GB
"
expectSuggestToBeEnabled
:
true
}
{
region
:
"
CA
"
locale
:
"
en
-
US
"
expectSuggestToBeEnabled
:
false
}
{
region
:
"
CA
"
locale
:
"
en
-
CA
"
expectSuggestToBeEnabled
:
false
}
{
region
:
"
DE
"
locale
:
"
en
-
US
"
expectSuggestToBeEnabled
:
false
}
{
region
:
"
FR
"
locale
:
"
en
-
US
"
expectSuggestToBeEnabled
:
false
}
{
region
:
"
GB
"
locale
:
"
de
"
expectSuggestToBeEnabled
:
false
}
{
region
:
"
IT
"
locale
:
"
en
-
US
"
expectSuggestToBeEnabled
:
false
}
{
region
:
"
US
"
locale
:
"
de
"
expectSuggestToBeEnabled
:
false
}
]
;
for
(
let
{
locale
region
expectSuggestToBeEnabled
}
of
tests
)
{
await
doTest
(
{
locale
region
expectSuggestToBeEnabled
}
)
;
}
}
)
;
async
function
doTest
(
{
locale
region
expectSuggestToBeEnabled
}
)
{
let
expectedPrefs
=
EXPECTED_PREFS_DISABLED
;
if
(
expectSuggestToBeEnabled
)
{
expectedPrefs
=
EXPECTED_PREFS_BY_REGION
[
region
]
;
Assert
.
ok
(
expectedPrefs
"
EXPECTED_PREFS_BY_REGION
should
have
an
entry
for
region
since
expectSuggestToBeEnabled
is
true
region
=
"
+
region
)
;
}
let
defaults
=
new
Preferences
(
{
branch
:
"
browser
.
urlbar
.
"
defaultBranch
:
true
}
)
;
let
originalDefaults
=
{
}
;
for
(
let
name
of
Object
.
keys
(
expectedPrefs
)
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
"
+
name
)
;
originalDefaults
[
name
]
=
defaults
.
get
(
name
)
;
}
await
QuickSuggestTestUtils
.
withLocales
(
{
homeRegion
:
region
locales
:
[
locale
]
callback
:
async
(
)
=
>
{
await
QuickSuggest
.
_test_reinit
(
)
;
for
(
let
[
name
value
]
of
Object
.
entries
(
expectedPrefs
)
)
{
Assert
.
strictEqual
(
defaults
.
get
(
name
)
value
Default
pref
value
for
{
name
}
locale
{
locale
}
region
{
region
}
)
;
UrlbarPrefs
.
get
(
name
value
UrlbarPrefs
.
get
(
)
value
for
{
name
}
locale
{
locale
}
region
{
region
}
)
;
}
}
}
)
;
for
(
let
[
name
originalDefault
]
of
Object
.
entries
(
originalDefaults
)
)
{
if
(
originalDefault
=
=
=
undefined
)
{
Services
.
prefs
.
deleteBranch
(
"
browser
.
urlbar
.
"
+
name
)
;
}
else
{
defaults
.
set
(
name
originalDefault
)
;
}
}
}
