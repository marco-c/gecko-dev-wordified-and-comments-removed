"
use
strict
"
;
const
PREFS
=
[
{
name
:
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
get
:
"
getBoolPref
"
set
:
"
setBoolPref
"
expectedWhenSuggestEnabled
:
true
expectedWhenSuggestDisabled
:
false
}
{
name
:
"
browser
.
urlbar
.
quicksuggest
.
dataCollection
.
enabled
"
get
:
"
getBoolPref
"
set
:
"
setBoolPref
"
expectedWhenSuggestEnabled
:
false
expectedWhenSuggestDisabled
:
false
}
{
name
:
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
get
:
"
getBoolPref
"
set
:
"
setBoolPref
"
expectedWhenSuggestEnabled
:
true
expectedWhenSuggestDisabled
:
false
}
{
name
:
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
get
:
"
getBoolPref
"
set
:
"
setBoolPref
"
expectedWhenSuggestEnabled
:
true
expectedWhenSuggestDisabled
:
false
}
]
;
add_setup
(
async
(
)
=
>
{
await
UrlbarTestUtils
.
initNimbusFeature
(
)
;
}
)
;
add_task
(
async
function
test
(
)
{
let
tests
=
[
{
locale
:
"
en
-
US
"
home
:
"
US
"
expectSuggestToBeEnabled
:
true
}
{
locale
:
"
en
-
US
"
home
:
"
CA
"
expectSuggestToBeEnabled
:
false
}
{
locale
:
"
en
-
CA
"
home
:
"
US
"
expectSuggestToBeEnabled
:
true
}
{
locale
:
"
en
-
CA
"
home
:
"
CA
"
expectSuggestToBeEnabled
:
false
}
{
locale
:
"
en
-
GB
"
home
:
"
US
"
expectSuggestToBeEnabled
:
true
}
{
locale
:
"
en
-
GB
"
home
:
"
GB
"
expectSuggestToBeEnabled
:
false
}
{
locale
:
"
de
"
home
:
"
US
"
expectSuggestToBeEnabled
:
false
}
{
locale
:
"
de
"
home
:
"
DE
"
expectSuggestToBeEnabled
:
false
}
]
;
for
(
let
{
locale
home
expectSuggestToBeEnabled
}
of
tests
)
{
await
doTest
(
{
locale
home
expectSuggestToBeEnabled
}
)
;
}
}
)
;
async
function
doTest
(
{
locale
home
expectSuggestToBeEnabled
}
)
{
for
(
let
pref
of
PREFS
)
{
Services
.
prefs
.
clearUserPref
(
pref
.
name
)
;
pref
.
originalDefault
=
Services
.
prefs
.
getDefaultBranch
(
pref
.
name
)
[
pref
.
get
]
(
"
"
)
;
}
await
QuickSuggestTestUtils
.
withLocales
(
{
homeRegion
:
home
locales
:
[
locale
]
callback
:
async
(
)
=
>
{
await
QuickSuggest
.
_test_reinit
(
)
;
for
(
let
{
name
get
expectedWhenSuggestEnabled
expectedWhenSuggestDisabled
}
of
PREFS
)
{
let
expectedValue
=
expectSuggestToBeEnabled
?
expectedWhenSuggestEnabled
:
expectedWhenSuggestDisabled
;
Assert
.
strictEqual
(
Services
.
prefs
.
getDefaultBranch
(
name
)
[
get
]
(
"
"
)
expectedValue
Default
pref
value
for
{
name
}
locale
{
locale
}
home
{
home
}
)
;
UrlbarPrefs
.
get
(
name
.
replace
(
"
browser
.
urlbar
.
"
"
"
)
expectedValue
UrlbarPrefs
.
get
(
)
value
for
{
name
}
locale
{
locale
}
home
{
home
}
)
;
}
}
}
)
;
for
(
let
{
name
originalDefault
set
}
of
PREFS
)
{
if
(
originalDefault
=
=
=
undefined
)
{
Services
.
prefs
.
deleteBranch
(
name
)
;
}
else
{
Services
.
prefs
.
getDefaultBranch
(
name
)
[
set
]
(
"
"
originalDefault
)
;
}
}
}
