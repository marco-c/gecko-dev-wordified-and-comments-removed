"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
Region
:
"
resource
:
/
/
gre
/
modules
/
Region
.
sys
.
mjs
"
}
)
;
const
PREFS
=
[
{
name
:
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
get
:
"
getBoolPref
"
set
:
"
setBoolPref
"
expectedOfflineValue
:
true
expectedOtherValue
:
false
}
{
name
:
"
browser
.
urlbar
.
quicksuggest
.
shouldShowOnboardingDialog
"
get
:
"
getBoolPref
"
set
:
"
setBoolPref
"
expectedOfflineValue
:
false
expectedOtherValue
:
true
}
{
name
:
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
get
:
"
getBoolPref
"
set
:
"
setBoolPref
"
expectedOfflineValue
:
true
expectedOtherValue
:
false
}
{
name
:
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
get
:
"
getBoolPref
"
set
:
"
setBoolPref
"
expectedOfflineValue
:
true
expectedOtherValue
:
false
}
]
;
add_task
(
async
function
init
(
)
{
await
UrlbarTestUtils
.
initNimbusFeature
(
)
;
}
)
;
add_task
(
async
function
test
(
)
{
let
tests
=
[
{
locale
:
"
en
-
US
"
home
:
"
US
"
expectedOfflineDefault
:
true
}
{
locale
:
"
en
-
US
"
home
:
"
CA
"
expectedOfflineDefault
:
false
}
{
locale
:
"
en
-
CA
"
home
:
"
US
"
expectedOfflineDefault
:
true
}
{
locale
:
"
en
-
CA
"
home
:
"
CA
"
expectedOfflineDefault
:
false
}
{
locale
:
"
en
-
GB
"
home
:
"
US
"
expectedOfflineDefault
:
true
}
{
locale
:
"
en
-
GB
"
home
:
"
GB
"
expectedOfflineDefault
:
false
}
{
locale
:
"
de
"
home
:
"
US
"
expectedOfflineDefault
:
false
}
{
locale
:
"
de
"
home
:
"
DE
"
expectedOfflineDefault
:
false
}
]
;
for
(
let
{
locale
home
expectedOfflineDefault
}
of
tests
)
{
await
doTest
(
{
locale
home
expectedOfflineDefault
}
)
;
}
}
)
;
async
function
doTest
(
{
locale
home
expectedOfflineDefault
}
)
{
for
(
let
pref
of
PREFS
)
{
Services
.
prefs
.
clearUserPref
(
pref
.
name
)
;
pref
.
originalDefault
=
Services
.
prefs
.
getDefaultBranch
(
pref
.
name
)
[
pref
.
get
]
(
"
"
)
;
}
Region
.
_setHomeRegion
(
home
false
)
;
await
QuickSuggestTestUtils
.
withLocales
(
[
locale
]
async
(
)
=
>
{
await
UrlbarPrefs
.
updateFirefoxSuggestScenario
(
)
;
for
(
let
{
name
get
expectedOfflineValue
expectedOtherValue
}
of
PREFS
)
{
let
expectedValue
=
expectedOfflineDefault
?
expectedOfflineValue
:
expectedOtherValue
;
Assert
.
strictEqual
(
Services
.
prefs
.
getDefaultBranch
(
name
)
[
get
]
(
"
"
)
expectedValue
Default
pref
value
for
{
name
}
locale
{
locale
}
home
{
home
}
)
;
UrlbarPrefs
.
get
(
name
.
replace
(
"
browser
.
urlbar
.
"
"
"
)
expectedValue
UrlbarPrefs
.
get
(
)
value
for
{
name
}
locale
{
locale
}
home
{
home
}
)
;
}
}
)
;
for
(
let
{
name
originalDefault
set
}
of
PREFS
)
{
if
(
originalDefault
=
=
=
undefined
)
{
Services
.
prefs
.
deleteBranch
(
name
)
;
}
else
{
Services
.
prefs
.
getDefaultBranch
(
name
)
[
set
]
(
"
"
originalDefault
)
;
}
}
}
