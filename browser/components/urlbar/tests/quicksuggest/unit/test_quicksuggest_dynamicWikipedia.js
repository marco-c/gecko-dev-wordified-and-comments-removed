"
use
strict
"
;
const
MERINO_SUGGESTIONS
=
[
{
title
:
"
title
"
url
:
"
url
"
is_sponsored
:
false
score
:
0
.
23
description
:
"
description
"
icon
:
"
icon
"
full_keyword
:
"
full_keyword
"
advertiser
:
"
dynamic
-
wikipedia
"
block_id
:
0
impression_url
:
"
impression_url
"
click_url
:
"
click_url
"
provider
:
"
wikipedia
"
}
]
;
add_setup
(
async
function
init
(
)
{
UrlbarPrefs
.
set
(
"
quicksuggest
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
bestMatch
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
suggest
.
enabled
"
false
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
merinoSuggestions
:
MERINO_SUGGESTIONS
}
)
;
}
)
;
add_task
(
async
function
nonsponsoredDisabled
(
)
{
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
)
]
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
}
)
;
function
makeExpectedResult
(
)
{
return
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
heuristic
:
false
suggestedIndex
:
-
1
payload
:
{
telemetryType
:
"
wikipedia
"
title
:
"
title
"
url
:
"
url
"
displayUrl
:
"
url
"
isSponsored
:
false
icon
:
"
icon
"
qsSuggestion
:
"
full_keyword
"
source
:
"
merino
"
helpUrl
:
QuickSuggest
.
HELP_URL
helpL10n
:
{
id
:
"
urlbar
-
result
-
menu
-
learn
-
more
-
about
-
firefox
-
suggest
"
}
isBlockable
:
true
blockL10n
:
{
id
:
"
urlbar
-
result
-
menu
-
dismiss
-
firefox
-
suggest
"
}
}
}
;
}
