"
use
strict
"
;
const
REMOTE_SETTINGS_DATA
=
[
{
type
:
"
pocket
-
suggestions
"
attachment
:
[
{
url
:
"
https
:
/
/
example
.
com
/
suggestion
"
title
:
"
Pocket
Suggestion
"
keywords
:
[
"
test
"
]
}
{
is_top_pick
:
true
url
:
"
https
:
/
/
example
.
com
/
top
-
pick
"
title
:
"
Pocket
Top
Pick
"
keywords
:
[
"
toppick
"
]
}
{
is_top_pick
:
false
url
:
"
https
:
/
/
example
.
com
/
not
-
a
-
top
-
pick
"
title
:
"
Pocket
Not
a
Top
Pick
"
keywords
:
[
"
notatoppick
"
]
}
]
}
]
;
add_setup
(
async
function
init
(
)
{
UrlbarPrefs
.
set
(
"
quicksuggest
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
bestMatch
.
enabled
"
true
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
set
(
"
pocket
.
featureGate
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
suggest
.
enabled
"
false
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
remoteSettingsResults
:
REMOTE_SETTINGS_DATA
}
)
;
}
)
;
add_task
(
async
function
nonsponsoredDisabled
(
)
{
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
)
]
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
}
)
;
add_task
(
async
function
pocketSpecificPrefsDisabled
(
)
{
const
prefs
=
[
"
suggest
.
pocket
"
"
pocket
.
featureGate
"
]
;
for
(
const
pref
of
prefs
)
{
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
)
]
}
)
;
UrlbarPrefs
.
set
(
pref
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
UrlbarPrefs
.
set
(
pref
true
)
;
}
}
)
;
add_task
(
async
function
nimbus
(
)
{
UrlbarPrefs
.
set
(
"
pocket
.
featureGate
"
false
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
const
cleanUpNimbusEnable
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
pocketFeatureGate
:
true
}
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
)
]
}
)
;
await
cleanUpNimbusEnable
(
)
;
UrlbarPrefs
.
set
(
"
pocket
.
featureGate
"
true
)
;
const
cleanUpNimbusDisable
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
pocketFeatureGate
:
false
}
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
await
cleanUpNimbusDisable
(
)
;
UrlbarPrefs
.
set
(
"
pocket
.
featureGate
"
true
)
;
}
)
;
add_task
(
async
function
topPick
(
)
{
await
check_results
(
{
context
:
createContext
(
"
toppick
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
isTopPick
:
true
suggestion
:
REMOTE_SETTINGS_DATA
[
0
]
.
attachment
[
1
]
}
)
]
}
)
;
}
)
;
add_task
(
async
function
notTopPick
(
)
{
await
check_results
(
{
context
:
createContext
(
"
notatoppick
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
isTopPick
:
false
suggestion
:
REMOTE_SETTINGS_DATA
[
0
]
.
attachment
[
2
]
}
)
]
}
)
;
}
)
;
add_task
(
async
function
block
(
)
{
let
result
=
makeExpectedResult
(
)
;
let
queryContext
=
{
view
:
{
acknowledgeDismissal
(
)
{
}
}
}
;
info
(
"
Blocking
suggestion
"
)
;
QuickSuggest
.
getFeature
(
"
PocketSuggestions
"
)
.
handleCommand
(
queryContext
result
"
dismiss
"
)
;
await
QuickSuggest
.
blockedSuggestions
.
_test_readyPromise
;
Assert
.
ok
(
await
QuickSuggest
.
blockedSuggestions
.
has
(
result
.
payload
.
url
)
"
The
result
'
s
URL
should
be
blocked
"
)
;
info
(
"
Doing
search
for
blocked
suggestion
"
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
info
(
"
Doing
search
for
a
suggestion
that
wasn
'
t
blocked
"
)
;
await
check_results
(
{
context
:
createContext
(
"
toppick
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
isTopPick
:
true
suggestion
:
REMOTE_SETTINGS_DATA
[
0
]
.
attachment
[
1
]
}
)
]
}
)
;
info
(
"
Clearing
blocked
suggestions
"
)
;
await
QuickSuggest
.
blockedSuggestions
.
clear
(
)
;
info
(
"
Doing
search
for
unblocked
suggestion
"
)
;
await
check_results
(
{
context
:
createContext
(
"
test
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
result
]
}
)
;
}
)
;
function
makeExpectedResult
(
{
suggestion
=
REMOTE_SETTINGS_DATA
[
0
]
.
attachment
[
0
]
source
=
"
remote
-
settings
"
isTopPick
=
true
}
=
{
}
)
{
return
{
isBestMatch
:
isTopPick
suggestedIndex
:
isTopPick
?
1
:
-
1
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_NETWORK
heuristic
:
false
payload
:
{
source
telemetryType
:
"
pocket
"
title
:
suggestion
.
title
url
:
suggestion
.
url
displayUrl
:
suggestion
.
url
.
replace
(
/
^
https
:
\
/
\
/
/
"
"
)
icon
:
"
chrome
:
/
/
global
/
skin
/
icons
/
pocket
.
svg
"
helpUrl
:
QuickSuggest
.
HELP_URL
}
}
;
}
