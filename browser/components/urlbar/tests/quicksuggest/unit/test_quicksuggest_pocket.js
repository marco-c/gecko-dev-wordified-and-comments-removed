"
use
strict
"
;
const
LOW_KEYWORD
=
"
low
one
two
"
;
const
HIGH_KEYWORD
=
"
high
three
"
;
const
REMOTE_SETTINGS_DATA
=
[
{
type
:
"
pocket
-
suggestions
"
attachment
:
[
{
url
:
"
https
:
/
/
example
.
com
/
pocket
-
0
"
title
:
"
Pocket
Suggestion
0
"
description
:
"
Pocket
description
0
"
lowConfidenceKeywords
:
[
LOW_KEYWORD
"
how
to
low
"
]
highConfidenceKeywords
:
[
HIGH_KEYWORD
]
score
:
0
.
25
}
{
url
:
"
https
:
/
/
example
.
com
/
pocket
-
1
"
title
:
"
Pocket
Suggestion
1
"
description
:
"
Pocket
description
1
"
lowConfidenceKeywords
:
[
"
other
low
"
]
highConfidenceKeywords
:
[
"
another
high
"
]
score
:
0
.
25
}
]
}
]
;
add_setup
(
async
(
)
=
>
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
suggest
.
enabled
"
false
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
remoteSettingsRecords
:
REMOTE_SETTINGS_DATA
prefs
:
[
[
"
suggest
.
quicksuggest
.
nonsponsored
"
true
]
[
"
pocket
.
featureGate
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
telemetryType
(
)
{
Assert
.
equal
(
QuickSuggest
.
getFeature
(
"
PocketSuggestions
"
)
.
getSuggestionTelemetryType
(
{
}
)
"
pocket
"
"
Telemetry
type
should
be
'
pocket
'
"
)
;
}
)
;
add_tasks_with_rust
(
async
function
nonsponsoredDisabled
(
)
{
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
false
)
;
await
check_results
(
{
context
:
createContext
(
LOW_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
searchString
:
LOW_KEYWORD
}
)
]
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
false
)
;
await
check_results
(
{
context
:
createContext
(
LOW_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
quicksuggest
.
sponsored
"
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
)
;
add_tasks_with_rust
(
async
function
pocketSpecificPrefsDisabled
(
)
{
const
prefs
=
[
"
suggest
.
pocket
"
"
pocket
.
featureGate
"
]
;
for
(
const
pref
of
prefs
)
{
await
check_results
(
{
context
:
createContext
(
LOW_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
searchString
:
LOW_KEYWORD
}
)
]
}
)
;
UrlbarPrefs
.
set
(
pref
false
)
;
await
check_results
(
{
context
:
createContext
(
LOW_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
UrlbarPrefs
.
set
(
pref
true
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
}
)
;
add_tasks_with_rust
(
async
function
nimbus
(
)
{
UrlbarPrefs
.
set
(
"
pocket
.
featureGate
"
false
)
;
await
check_results
(
{
context
:
createContext
(
LOW_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
const
cleanUpNimbusEnable
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
pocketFeatureGate
:
true
}
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
await
check_results
(
{
context
:
createContext
(
LOW_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
searchString
:
LOW_KEYWORD
}
)
]
}
)
;
await
cleanUpNimbusEnable
(
)
;
UrlbarPrefs
.
set
(
"
pocket
.
featureGate
"
true
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
const
cleanUpNimbusDisable
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
pocketFeatureGate
:
false
}
)
;
await
check_results
(
{
context
:
createContext
(
LOW_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
await
cleanUpNimbusDisable
(
)
;
UrlbarPrefs
.
set
(
"
pocket
.
featureGate
"
true
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
)
;
add_tasks_with_rust
(
async
function
topPick
(
)
{
await
check_results
(
{
context
:
createContext
(
HIGH_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
searchString
:
HIGH_KEYWORD
isTopPick
:
true
}
)
]
}
)
;
}
)
;
add_tasks_with_rust
(
async
function
lowPrefixes
(
)
{
let
tests
=
{
l
:
false
lo
:
false
low
:
true
"
low
"
:
true
"
low
o
"
:
true
"
low
on
"
:
true
"
low
one
"
:
true
"
low
one
"
:
true
"
low
one
t
"
:
true
"
low
one
tw
"
:
true
"
low
one
two
"
:
true
"
low
one
two
"
:
false
}
;
for
(
let
[
searchString
shouldMatch
]
of
Object
.
entries
(
tests
)
)
{
info
(
"
Doing
search
:
"
+
JSON
.
stringify
(
{
searchString
shouldMatch
}
)
)
;
await
check_results
(
{
context
:
createContext
(
searchString
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
shouldMatch
?
[
makeExpectedResult
(
{
searchString
fullKeyword
:
LOW_KEYWORD
}
)
]
:
[
]
}
)
;
}
}
)
;
add_tasks_with_rust
(
{
skip_if_rust_enabled
:
true
}
async
function
lowPrefixes_howTo
(
)
{
let
tests
=
{
h
:
false
ho
:
false
how
:
false
"
how
"
:
false
"
how
t
"
:
false
"
how
to
"
:
true
"
how
to
"
:
true
"
how
to
l
"
:
true
"
how
to
lo
"
:
true
"
how
to
low
"
:
true
}
;
for
(
let
[
searchString
shouldMatch
]
of
Object
.
entries
(
tests
)
)
{
info
(
"
Doing
search
:
"
+
JSON
.
stringify
(
{
searchString
shouldMatch
}
)
)
;
await
check_results
(
{
context
:
createContext
(
searchString
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
shouldMatch
?
[
makeExpectedResult
(
{
searchString
fullKeyword
:
"
how
to
low
"
}
)
]
:
[
]
}
)
;
}
}
)
;
add_tasks_with_rust
(
async
function
highPrefixes
(
)
{
let
tests
=
{
h
:
false
hi
:
false
hig
:
false
high
:
false
"
high
"
:
false
"
high
t
"
:
false
"
high
th
"
:
false
"
high
thr
"
:
false
"
high
thre
"
:
false
"
high
three
"
:
true
"
high
three
"
:
false
}
;
for
(
let
[
searchString
shouldMatch
]
of
Object
.
entries
(
tests
)
)
{
info
(
"
Doing
search
:
"
+
JSON
.
stringify
(
{
searchString
shouldMatch
}
)
)
;
await
check_results
(
{
context
:
createContext
(
searchString
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
shouldMatch
?
[
makeExpectedResult
(
{
searchString
fullKeyword
:
HIGH_KEYWORD
isTopPick
:
true
}
)
]
:
[
]
}
)
;
}
}
)
;
add_tasks_with_rust
(
async
function
uppercase
(
)
{
await
check_results
(
{
context
:
createContext
(
LOW_KEYWORD
.
toUpperCase
(
)
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
searchString
:
LOW_KEYWORD
.
toUpperCase
(
)
fullKeyword
:
LOW_KEYWORD
}
)
]
}
)
;
await
check_results
(
{
context
:
createContext
(
HIGH_KEYWORD
.
toUpperCase
(
)
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
searchString
:
HIGH_KEYWORD
.
toUpperCase
(
)
fullKeyword
:
HIGH_KEYWORD
isTopPick
:
true
}
)
]
}
)
;
}
)
;
add_tasks_with_rust
(
async
function
notRelevant
(
)
{
let
result
=
makeExpectedResult
(
{
searchString
:
LOW_KEYWORD
}
)
;
info
(
"
Triggering
the
'
Not
relevant
'
command
"
)
;
QuickSuggest
.
getFeature
(
"
PocketSuggestions
"
)
.
handleCommand
(
{
controller
:
{
removeResult
(
)
{
}
}
}
result
"
not_relevant
"
)
;
await
QuickSuggest
.
blockedSuggestions
.
_test_readyPromise
;
Assert
.
ok
(
await
QuickSuggest
.
blockedSuggestions
.
has
(
result
.
payload
.
originalUrl
)
"
The
result
'
s
URL
should
be
blocked
"
)
;
info
(
"
Doing
search
for
blocked
suggestion
"
)
;
await
check_results
(
{
context
:
createContext
(
LOW_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
info
(
"
Doing
search
for
blocked
suggestion
using
high
-
confidence
keyword
"
)
;
await
check_results
(
{
context
:
createContext
(
HIGH_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
info
(
"
Doing
search
for
a
suggestion
that
wasn
'
t
blocked
"
)
;
await
check_results
(
{
context
:
createContext
(
"
other
low
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
makeExpectedResult
(
{
searchString
:
"
other
low
"
suggestion
:
REMOTE_SETTINGS_DATA
[
0
]
.
attachment
[
1
]
}
)
]
}
)
;
info
(
"
Clearing
blocked
suggestions
"
)
;
await
QuickSuggest
.
blockedSuggestions
.
clear
(
)
;
info
(
"
Doing
search
for
unblocked
suggestion
"
)
;
await
check_results
(
{
context
:
createContext
(
LOW_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
result
]
}
)
;
}
)
;
add_tasks_with_rust
(
async
function
notInterested
(
)
{
let
result
=
makeExpectedResult
(
{
searchString
:
LOW_KEYWORD
}
)
;
info
(
"
Triggering
the
'
Not
interested
'
command
"
)
;
QuickSuggest
.
getFeature
(
"
PocketSuggestions
"
)
.
handleCommand
(
{
controller
:
{
removeResult
(
)
{
}
}
}
result
"
not_interested
"
)
;
Assert
.
ok
(
!
UrlbarPrefs
.
get
(
"
suggest
.
pocket
"
)
"
Pocket
suggestions
should
be
disabled
"
)
;
info
(
"
Doing
search
for
the
suggestion
the
command
was
used
on
"
)
;
await
check_results
(
{
context
:
createContext
(
LOW_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
info
(
"
Doing
search
for
another
Pocket
suggestion
"
)
;
await
check_results
(
{
context
:
createContext
(
"
other
low
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
pocket
"
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
)
;
add_tasks_with_rust
(
async
function
showLessFrequently
(
)
{
await
doShowLessFrequentlyTests
(
{
feature
:
QuickSuggest
.
getFeature
(
"
PocketSuggestions
"
)
showLessFrequentlyCountPref
:
"
pocket
.
showLessFrequentlyCount
"
nimbusCapVariable
:
"
pocketShowLessFrequentlyCap
"
expectedResult
:
searchString
=
>
makeExpectedResult
(
{
searchString
fullKeyword
:
LOW_KEYWORD
}
)
keyword
:
LOW_KEYWORD
}
)
;
}
)
;
add_task
(
async
function
rustProviders
(
)
{
UrlbarPrefs
.
set
(
"
suggest
.
addons
"
false
)
;
await
doRustProvidersTests
(
{
searchString
:
LOW_KEYWORD
tests
:
[
{
prefs
:
{
"
suggest
.
pocket
"
:
true
}
expectedUrls
:
[
"
https
:
/
/
example
.
com
/
pocket
-
0
"
]
}
{
prefs
:
{
"
suggest
.
pocket
"
:
false
}
expectedUrls
:
[
]
}
]
}
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
addons
"
)
;
UrlbarPrefs
.
clear
(
"
suggest
.
pocket
"
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
)
;
function
makeExpectedResult
(
{
searchString
fullKeyword
=
searchString
suggestion
=
REMOTE_SETTINGS_DATA
[
0
]
.
attachment
[
0
]
source
=
"
remote
-
settings
"
isTopPick
=
false
}
=
{
}
)
{
if
(
source
=
=
"
remote
-
settings
"
&
&
UrlbarPrefs
.
get
(
"
quicksuggest
.
rustEnabled
"
)
)
{
source
=
"
rust
"
;
}
let
provider
;
let
keywordSubstringNotTyped
=
fullKeyword
.
substring
(
searchString
.
length
)
;
let
description
=
suggestion
.
description
;
switch
(
source
)
{
case
"
remote
-
settings
"
:
provider
=
"
PocketSuggestions
"
;
break
;
case
"
rust
"
:
provider
=
"
Pocket
"
;
keywordSubstringNotTyped
=
"
"
;
description
=
suggestion
.
title
;
break
;
case
"
merino
"
:
provider
=
"
pocket
"
;
break
;
}
let
url
=
new
URL
(
suggestion
.
url
)
;
url
.
searchParams
.
set
(
"
utm_medium
"
"
firefox
-
desktop
"
)
;
url
.
searchParams
.
set
(
"
utm_source
"
"
firefox
-
suggest
"
)
;
url
.
searchParams
.
set
(
"
utm_campaign
"
"
pocket
-
collections
-
in
-
the
-
address
-
bar
"
)
;
url
.
searchParams
.
set
(
"
utm_content
"
"
treatment
"
)
;
return
{
isBestMatch
:
isTopPick
suggestedIndex
:
isTopPick
?
1
:
-
1
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_NETWORK
heuristic
:
false
payload
:
{
source
provider
telemetryType
:
"
pocket
"
title
:
suggestion
.
title
url
:
url
.
href
displayUrl
:
url
.
href
.
replace
(
/
^
https
:
\
/
\
/
/
"
"
)
originalUrl
:
suggestion
.
url
description
:
isTopPick
?
description
:
"
"
icon
:
isTopPick
?
"
chrome
:
/
/
global
/
skin
/
icons
/
pocket
.
svg
"
:
"
chrome
:
/
/
global
/
skin
/
icons
/
pocket
-
favicon
.
ico
"
helpUrl
:
QuickSuggest
.
HELP_URL
shouldShowUrl
:
true
bottomTextL10n
:
{
id
:
"
firefox
-
suggest
-
pocket
-
bottom
-
text
"
args
:
{
keywordSubstringTyped
:
searchString
keywordSubstringNotTyped
}
}
}
}
;
}
