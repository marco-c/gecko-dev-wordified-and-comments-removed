const
REMOTE_SETTINGS_RECORDS
=
[
{
type
:
"
dynamic
-
suggestions
"
suggestion_type
:
"
aaa
"
score
:
0
.
9
attachment
:
[
{
keywords
:
[
"
aaa
keyword
"
"
aaa
bbb
keyword
"
"
wikipedia
"
]
data
:
{
result
:
{
payload
:
{
title
:
"
aaa
title
"
url
:
"
https
:
/
/
example
.
com
/
aaa
"
}
}
}
}
]
}
{
type
:
"
dynamic
-
suggestions
"
suggestion_type
:
"
bbb
"
score
:
0
.
1
attachment
:
[
{
keywords
:
[
"
bbb
keyword
"
"
aaa
bbb
keyword
"
"
wikipedia
"
]
dismissal_key
:
"
bbb
-
dismissal
-
key
"
data
:
{
result
:
{
isBestMatch
:
true
suggestedIndex
:
1
isSuggestedIndexRelativeToGroup
:
false
isRichSuggestion
:
true
payload
:
{
title
:
"
bbb
title
"
url
:
"
https
:
/
/
example
.
com
/
bbb
"
isSponsored
:
true
telemetryType
:
"
bbb_telemetry_type
"
}
}
}
}
]
}
{
type
:
QuickSuggestTestUtils
.
RS_TYPE
.
WIKIPEDIA
attachment
:
[
QuickSuggestTestUtils
.
wikipediaRemoteSettings
(
)
]
}
]
;
const
EXPECTED_AAA_RESULT
=
makeExpectedResult
(
{
title
:
"
aaa
title
"
url
:
"
https
:
/
/
example
.
com
/
aaa
"
telemetryType
:
"
aaa
"
}
)
;
const
EXPECTED_BBB_RESULT
=
makeExpectedResult
(
{
title
:
"
bbb
title
"
url
:
"
https
:
/
/
example
.
com
/
bbb
"
isSponsored
:
true
telemetryType
:
"
bbb_telemetry_type
"
isBestMatch
:
true
suggestedIndex
:
1
isSuggestedIndexRelativeToGroup
:
false
isRichSuggestion
:
true
}
)
;
add_setup
(
async
function
(
)
{
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
remoteSettingsRecords
:
REMOTE_SETTINGS_RECORDS
prefs
:
[
[
"
quicksuggest
.
dynamicSuggestionTypes
"
"
aaa
bbb
"
]
[
"
suggest
.
quicksuggest
.
sponsored
"
true
]
[
"
suggest
.
quicksuggest
.
nonsponsored
"
true
]
[
"
quicksuggest
.
ampTopPickCharThreshold
"
0
]
]
}
)
;
}
)
;
add_task
(
async
function
telemetryType_default
(
)
{
Assert
.
equal
(
QuickSuggest
.
getFeature
(
"
DynamicSuggestions
"
)
.
getSuggestionTelemetryType
(
{
suggestionType
:
"
abcdefg
"
}
)
"
abcdefg
"
"
Telemetry
type
should
be
correct
when
using
default
"
)
;
}
)
;
add_task
(
async
function
telemetryType_override
(
)
{
Assert
.
equal
(
QuickSuggest
.
getFeature
(
"
DynamicSuggestions
"
)
.
getSuggestionTelemetryType
(
{
suggestionType
:
"
abcdefg
"
data
:
{
result
:
{
payload
:
{
telemetryType
:
"
telemetry_type_override
"
}
}
}
}
)
"
telemetry_type_override
"
"
Telemetry
type
should
be
correct
when
overridden
"
)
;
}
)
;
add_task
(
async
function
basic
(
)
{
let
queries
=
[
{
query
:
"
no
match
"
expected
:
[
]
}
{
query
:
"
aaa
keyword
"
expected
:
[
EXPECTED_AAA_RESULT
]
}
{
query
:
"
bbb
keyword
"
expected
:
[
EXPECTED_BBB_RESULT
]
}
{
query
:
"
aaa
bbb
keyword
"
expected
:
[
EXPECTED_AAA_RESULT
]
}
]
;
await
doQueries
(
queries
)
;
}
)
;
add_task
(
async
function
oneSuggestionType
(
)
{
await
withSuggestionTypesPref
(
"
bbb
"
async
(
)
=
>
{
await
doQueries
(
[
{
query
:
"
aaa
keyword
"
expected
:
[
]
}
{
query
:
"
bbb
keyword
"
expected
:
[
EXPECTED_BBB_RESULT
]
}
{
query
:
"
aaa
bbb
keyword
"
expected
:
[
EXPECTED_BBB_RESULT
]
}
{
query
:
"
doesn
'
t
match
"
expected
:
[
]
}
]
)
;
}
)
;
}
)
;
add_task
(
async
function
disabled
(
)
{
await
withSuggestionTypesPref
(
"
"
async
(
)
=
>
{
await
doQueries
(
[
"
aaa
keyword
"
"
bbb
keyword
"
"
aaa
bbb
keyword
"
]
.
map
(
query
=
>
(
{
query
expected
:
[
]
}
)
)
)
;
}
)
;
}
)
;
add_task
(
async
function
sponsoredDisabled
(
)
{
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
false
)
;
await
withSuggestionTypesPref
(
"
aaa
bbb
"
async
(
)
=
>
{
await
doQueries
(
[
{
query
:
"
aaa
keyword
"
expected
:
[
EXPECTED_AAA_RESULT
]
}
{
query
:
"
bbb
keyword
"
expected
:
[
]
}
{
query
:
"
aaa
bbb
keyword
"
expected
:
[
EXPECTED_AAA_RESULT
]
}
]
)
;
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
sponsored
"
true
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
)
;
add_task
(
async
function
sponsoredDisabled
(
)
{
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
false
)
;
await
withSuggestionTypesPref
(
"
aaa
bbb
"
async
(
)
=
>
{
await
doQueries
(
[
{
query
:
"
aaa
keyword
"
expected
:
[
]
}
{
query
:
"
bbb
keyword
"
expected
:
[
EXPECTED_BBB_RESULT
]
}
{
query
:
"
aaa
bbb
keyword
"
expected
:
[
EXPECTED_BBB_RESULT
]
}
]
)
;
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
quicksuggest
.
nonsponsored
"
true
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
)
;
add_task
(
async
function
nimbus
(
)
{
await
withSuggestionTypesPref
(
"
"
async
(
)
=
>
{
let
cleanup
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
quickSuggestDynamicSuggestionTypes
:
"
aaa
bbb
"
}
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
await
doQueries
(
[
{
query
:
"
aaa
keyword
"
expected
:
[
EXPECTED_AAA_RESULT
]
}
{
query
:
"
bbb
keyword
"
expected
:
[
EXPECTED_BBB_RESULT
]
}
{
query
:
"
aaa
bbb
keyword
"
expected
:
[
EXPECTED_AAA_RESULT
]
}
{
query
:
"
doesn
'
t
match
"
expected
:
[
]
}
]
)
;
await
cleanup
(
)
;
}
)
;
}
)
;
add_task
(
async
function
dismissal
(
)
{
let
context
=
createContext
(
"
bbb
keyword
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
EXPECTED_BBB_RESULT
]
}
)
;
let
result
=
context
.
results
[
0
]
;
let
{
suggestionObject
}
=
result
.
payload
;
let
{
dismissalKey
}
=
suggestionObject
;
Assert
.
equal
(
dismissalKey
"
bbb
-
dismissal
-
key
"
"
The
suggestion
should
have
the
expected
dismissal
key
"
)
;
Assert
.
ok
(
!
(
await
QuickSuggest
.
isResultDismissed
(
result
)
)
"
The
result
should
not
be
dismissed
yet
"
)
;
Assert
.
ok
(
!
(
await
QuickSuggest
.
rustBackend
.
isRustSuggestionDismissed
(
suggestionObject
)
)
"
The
suggestion
should
not
be
dismissed
yet
"
)
;
Assert
.
ok
(
!
(
await
QuickSuggest
.
rustBackend
.
isDismissedByKey
(
dismissalKey
)
)
"
The
dismissal
key
should
not
be
registered
yet
"
)
;
await
QuickSuggest
.
dismissResult
(
result
)
;
Assert
.
ok
(
await
QuickSuggest
.
isResultDismissed
(
result
)
"
The
result
should
be
dismissed
"
)
;
Assert
.
ok
(
await
QuickSuggest
.
rustBackend
.
isRustSuggestionDismissed
(
suggestionObject
)
"
The
suggestion
should
be
dismissed
"
)
;
Assert
.
ok
(
await
QuickSuggest
.
rustBackend
.
isDismissedByKey
(
dismissalKey
)
"
The
dismissal
key
should
be
registered
"
)
;
await
check_results
(
{
context
:
createContext
(
"
bbb
keyword
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
await
QuickSuggest
.
clearDismissedSuggestions
(
)
;
await
check_results
(
{
context
:
createContext
(
"
bbb
keyword
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
EXPECTED_BBB_RESULT
]
}
)
;
Assert
.
ok
(
!
(
await
QuickSuggest
.
isResultDismissed
(
result
)
)
"
The
result
should
not
be
dismissed
after
clearing
dismissals
"
)
;
Assert
.
ok
(
!
(
await
QuickSuggest
.
rustBackend
.
isRustSuggestionDismissed
(
suggestionObject
)
)
"
The
suggestion
should
not
be
dismissed
after
clearing
dismissals
"
)
;
Assert
.
ok
(
!
(
await
QuickSuggest
.
rustBackend
.
isDismissedByKey
(
dismissalKey
)
)
"
The
dismissal
key
should
not
be
registered
after
clearing
dismissals
"
)
;
}
)
;
add_task
(
async
function
badSuggestions
(
)
{
await
QuickSuggestTestUtils
.
setRemoteSettingsRecords
(
[
{
type
:
"
dynamic
-
suggestions
"
suggestion_type
:
"
bad
"
attachment
:
[
REMOTE_SETTINGS_RECORDS
[
0
]
.
attachment
[
0
]
{
keywords
:
[
"
bad
"
]
}
{
data
:
123
keywords
:
[
"
bad
"
]
}
{
data
:
{
}
keywords
:
[
"
bad
"
]
}
{
data
:
{
result
:
123
}
keywords
:
[
"
bad
"
]
}
{
data
:
{
result
:
{
payload
:
123
}
}
keywords
:
[
"
bad
"
]
}
]
}
]
)
;
await
withSuggestionTypesPref
(
"
bad
"
async
(
)
=
>
{
await
check_results
(
{
context
:
createContext
(
"
aaa
keyword
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
{
.
.
.
EXPECTED_AAA_RESULT
payload
:
{
.
.
.
EXPECTED_AAA_RESULT
.
payload
telemetryType
:
"
bad
"
}
}
]
}
)
;
await
check_results
(
{
context
:
createContext
(
"
bad
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
}
)
;
await
QuickSuggestTestUtils
.
setRemoteSettingsRecords
(
REMOTE_SETTINGS_RECORDS
)
;
}
)
;
async
function
doQueries
(
queries
)
{
for
(
let
{
query
expected
}
of
queries
)
{
info
(
"
Doing
query
:
"
+
JSON
.
stringify
(
{
query
expected
}
)
)
;
await
check_results
(
{
context
:
createContext
(
query
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
expected
}
)
;
}
}
async
function
withSuggestionTypesPref
(
prefValue
callback
)
{
let
originalPrefValue
=
Services
.
prefs
.
getCharPref
(
"
browser
.
urlbar
.
quicksuggest
.
dynamicSuggestionTypes
"
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dynamicSuggestionTypes
"
prefValue
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
await
callback
(
)
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dynamicSuggestionTypes
"
originalPrefValue
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
function
makeExpectedResult
(
{
title
url
telemetryType
isSponsored
=
false
isBestMatch
=
false
suggestedIndex
=
-
1
isSuggestedIndexRelativeToGroup
=
true
isRichSuggestion
=
undefined
}
)
{
return
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
heuristic
:
false
isBestMatch
suggestedIndex
isRichSuggestion
isSuggestedIndexRelativeToGroup
payload
:
{
title
url
isSponsored
telemetryType
displayUrl
:
url
.
replace
(
/
^
https
:
\
/
\
/
/
"
"
)
source
:
"
rust
"
provider
:
"
Dynamic
"
isManageable
:
true
helpUrl
:
QuickSuggest
.
HELP_URL
}
}
;
}
