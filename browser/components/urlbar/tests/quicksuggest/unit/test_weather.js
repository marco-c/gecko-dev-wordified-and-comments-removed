"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
UrlbarProviderWeather
:
"
resource
:
/
/
/
modules
/
UrlbarProviderWeather
.
sys
.
mjs
"
}
)
;
const
HISTOGRAM_LATENCY
=
"
FX_URLBAR_MERINO_LATENCY_WEATHER_MS
"
;
const
HISTOGRAM_RESPONSE
=
"
FX_URLBAR_MERINO_RESPONSE_WEATHER
"
;
const
{
WEATHER_RS_DATA
WEATHER_SUGGESTION
}
=
MerinoTestUtils
;
add_setup
(
async
(
)
=
>
{
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
prefs
:
[
[
"
suggest
.
quicksuggest
.
nonsponsored
"
true
]
]
remoteSettingsRecords
:
[
{
type
:
"
weather
"
weather
:
WEATHER_RS_DATA
}
]
}
)
;
await
MerinoTestUtils
.
initWeather
(
)
;
}
)
;
add_tasks_with_rust
(
async
function
disableAndEnable_featureGate
(
)
{
await
doBasicDisableAndEnableTest
(
"
weather
.
featureGate
"
)
;
}
)
;
add_tasks_with_rust
(
async
function
disableAndEnable_suggestPref
(
)
{
await
doBasicDisableAndEnableTest
(
"
suggest
.
weather
"
)
;
}
)
;
async
function
doBasicDisableAndEnableTest
(
pref
)
{
UrlbarPrefs
.
set
(
pref
false
)
;
assertDisabled
(
{
message
:
"
After
disabling
"
}
)
;
let
context
=
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
]
}
)
;
let
histograms
=
MerinoTestUtils
.
getAndClearHistograms
(
{
extraLatency
:
HISTOGRAM_LATENCY
extraResponse
:
HISTOGRAM_RESPONSE
}
)
;
info
(
"
Re
-
enable
the
feature
"
)
;
UrlbarPrefs
.
set
(
pref
true
)
;
context
=
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
QuickSuggestTestUtils
.
weatherResult
(
)
]
}
)
;
MerinoTestUtils
.
checkAndClearHistograms
(
{
histograms
response
:
"
success
"
latencyRecorded
:
true
client
:
QuickSuggest
.
weather
.
_test_merino
}
)
;
}
add_tasks_with_rust
(
async
function
noSuggestion
(
)
{
let
histograms
=
MerinoTestUtils
.
getAndClearHistograms
(
{
extraLatency
:
HISTOGRAM_LATENCY
extraResponse
:
HISTOGRAM_RESPONSE
}
)
;
let
{
suggestions
}
=
MerinoTestUtils
.
server
.
response
.
body
;
MerinoTestUtils
.
server
.
response
.
body
.
suggestions
=
[
]
;
let
context
=
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
]
}
)
;
MerinoTestUtils
.
checkAndClearHistograms
(
{
histograms
response
:
"
no_suggestion
"
latencyRecorded
:
true
client
:
QuickSuggest
.
weather
.
_test_merino
}
)
;
MerinoTestUtils
.
server
.
response
.
body
.
suggestions
=
suggestions
;
}
)
;
add_tasks_with_rust
(
async
function
networkError
(
)
{
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
Assert
.
ok
(
true
"
Skipping
this
task
on
Windows
"
)
;
return
;
}
let
histograms
=
MerinoTestUtils
.
getAndClearHistograms
(
{
extraLatency
:
HISTOGRAM_LATENCY
extraResponse
:
HISTOGRAM_RESPONSE
}
)
;
await
MerinoTestUtils
.
server
.
withNetworkError
(
async
(
)
=
>
{
let
context
=
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
]
}
)
;
}
)
;
MerinoTestUtils
.
checkAndClearHistograms
(
{
histograms
response
:
"
network_error
"
latencyRecorded
:
false
client
:
QuickSuggest
.
weather
.
_test_merino
}
)
;
}
)
;
add_tasks_with_rust
(
async
function
httpError
(
)
{
let
histograms
=
MerinoTestUtils
.
getAndClearHistograms
(
{
extraLatency
:
HISTOGRAM_LATENCY
extraResponse
:
HISTOGRAM_RESPONSE
}
)
;
MerinoTestUtils
.
server
.
response
=
{
status
:
500
}
;
let
context
=
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
]
}
)
;
MerinoTestUtils
.
checkAndClearHistograms
(
{
histograms
response
:
"
http_error
"
latencyRecorded
:
true
client
:
QuickSuggest
.
weather
.
_test_merino
}
)
;
MerinoTestUtils
.
server
.
reset
(
)
;
MerinoTestUtils
.
server
.
response
.
body
.
suggestions
=
[
WEATHER_SUGGESTION
]
;
}
)
;
add_tasks_with_rust
(
async
function
clientTimeout
(
)
{
let
histograms
=
MerinoTestUtils
.
getAndClearHistograms
(
{
extraLatency
:
HISTOGRAM_LATENCY
extraResponse
:
HISTOGRAM_RESPONSE
}
)
;
MerinoTestUtils
.
server
.
response
.
delay
=
400
;
QuickSuggest
.
weather
.
_test_setTimeoutMs
(
1
)
;
let
responsePromise
=
QuickSuggest
.
weather
.
_test_merino
.
waitForNextResponse
(
)
;
let
context
=
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
]
}
)
;
MerinoTestUtils
.
checkAndClearHistograms
(
{
histograms
response
:
"
timeout
"
latencyRecorded
:
false
latencyStopwatchRunning
:
true
client
:
QuickSuggest
.
weather
.
_test_merino
}
)
;
await
responsePromise
;
MerinoTestUtils
.
checkAndClearHistograms
(
{
histograms
response
:
null
latencyRecorded
:
true
client
:
QuickSuggest
.
weather
.
_test_merino
}
)
;
QuickSuggest
.
weather
.
_test_setTimeoutMs
(
-
1
)
;
delete
MerinoTestUtils
.
server
.
response
.
delay
;
}
)
;
add_tasks_with_rust
(
async
function
locale_enUS
(
)
{
await
doLocaleTest
(
{
shouldRunTask
:
osLocale
=
>
osLocale
=
=
"
en
-
US
"
osUnit
:
"
f
"
unitsByLocale
:
{
"
en
-
US
"
:
"
f
"
"
en
-
CA
"
:
"
f
"
"
en
-
GB
"
:
"
f
"
de
:
"
c
"
}
}
)
;
}
)
;
add_tasks_with_rust
(
async
function
locale_nonUSEnglish
(
)
{
await
doLocaleTest
(
{
shouldRunTask
:
osLocale
=
>
osLocale
.
startsWith
(
"
en
"
)
&
&
osLocale
!
=
"
en
-
US
"
osUnit
:
"
c
"
unitsByLocale
:
{
"
en
-
US
"
:
"
c
"
"
en
-
CA
"
:
"
c
"
"
en
-
GB
"
:
"
c
"
de
:
"
c
"
}
}
)
;
}
)
;
add_tasks_with_rust
(
async
function
locale_nonEnglish
(
)
{
await
doLocaleTest
(
{
shouldRunTask
:
osLocale
=
>
!
osLocale
.
startsWith
(
"
en
"
)
osUnit
:
"
c
"
unitsByLocale
:
{
"
en
-
US
"
:
"
f
"
"
en
-
CA
"
:
"
c
"
"
en
-
GB
"
:
"
c
"
de
:
"
c
"
}
}
)
;
}
)
;
async
function
doLocaleTest
(
{
shouldRunTask
osUnit
unitsByLocale
}
)
{
Services
.
prefs
.
setBoolPref
(
"
intl
.
regional_prefs
.
use_os_locales
"
true
)
;
let
osLocale
=
Services
.
locale
.
regionalPrefsLocales
[
0
]
;
Services
.
prefs
.
clearUserPref
(
"
intl
.
regional_prefs
.
use_os_locales
"
)
;
if
(
!
shouldRunTask
(
osLocale
)
)
{
info
(
"
Skipping
task
should
not
run
for
this
OS
locale
"
)
;
return
;
}
Assert
.
equal
(
Services
.
locale
.
appLocaleAsBCP47
"
en
-
US
"
"
Initial
app
locale
should
be
en
-
US
"
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
"
intl
.
regional_prefs
.
use_os_locales
"
)
"
intl
.
regional_prefs
.
use_os_locales
should
be
false
initially
"
)
;
for
(
let
[
locale
temperatureUnit
]
of
Object
.
entries
(
unitsByLocale
)
)
{
await
QuickSuggestTestUtils
.
withLocales
(
{
locales
:
[
locale
]
callback
:
async
(
)
=
>
{
info
(
"
Checking
locale
:
"
+
locale
)
;
await
check_results
(
{
context
:
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
matches
:
[
QuickSuggestTestUtils
.
weatherResult
(
{
temperatureUnit
}
)
]
}
)
;
info
(
"
Checking
locale
with
intl
.
regional_prefs
.
use_os_locales
:
"
+
locale
)
;
Services
.
prefs
.
setBoolPref
(
"
intl
.
regional_prefs
.
use_os_locales
"
true
)
;
await
check_results
(
{
context
:
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
matches
:
[
QuickSuggestTestUtils
.
weatherResult
(
{
temperatureUnit
:
osUnit
}
)
]
}
)
;
Services
.
prefs
.
clearUserPref
(
"
intl
.
regional_prefs
.
use_os_locales
"
)
;
}
}
)
;
}
}
add_tasks_with_rust
(
async
function
block
(
)
{
Assert
.
ok
(
UrlbarPrefs
.
get
(
"
suggest
.
weather
"
)
"
Sanity
check
:
suggest
.
weather
is
true
initially
"
)
;
let
context
=
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
QuickSuggestTestUtils
.
weatherResult
(
)
]
}
)
;
const
controller
=
UrlbarTestUtils
.
newMockController
(
)
;
controller
.
setView
(
{
get
visibleResults
(
)
{
return
context
.
results
;
}
controller
:
{
removeResult
(
)
{
}
}
}
)
;
let
result
=
context
.
results
[
0
]
;
let
provider
=
UrlbarProvidersManager
.
getProvider
(
result
.
providerName
)
;
Assert
.
ok
(
provider
"
Sanity
check
:
Result
provider
found
"
)
;
provider
.
onEngagement
(
context
controller
{
result
selType
:
"
dismiss
"
selIndex
:
context
.
results
[
0
]
.
rowIndex
}
)
;
Assert
.
ok
(
!
UrlbarPrefs
.
get
(
"
suggest
.
weather
"
)
"
suggest
.
weather
is
false
after
blocking
the
result
"
)
;
context
=
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
;
await
check_results
(
{
context
matches
:
[
]
}
)
;
UrlbarPrefs
.
set
(
"
suggest
.
weather
"
true
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
)
;
add_tasks_with_rust
(
async
function
nimbusOverride
(
)
{
let
defaultResult
=
QuickSuggestTestUtils
.
weatherResult
(
)
;
await
check_results
(
{
context
:
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
matches
:
[
defaultResult
]
}
)
;
let
nimbusCleanup
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
weatherKeywords
:
[
"
nimbusoverride
"
]
weatherKeywordsMinimumLength
:
"
nimbus
"
.
length
}
)
;
await
check_results
(
{
context
:
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
let
merinoResult
=
QuickSuggestTestUtils
.
weatherResult
(
{
source
:
"
merino
"
provider
:
"
accuweather
"
telemetryType
:
null
}
)
;
await
check_results
(
{
context
:
createContext
(
"
nimbusoverride
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
matches
:
[
merinoResult
]
}
)
;
await
check_results
(
{
context
:
createContext
(
"
nimbus
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
matches
:
[
merinoResult
]
}
)
;
await
nimbusCleanup
(
)
;
await
check_results
(
{
context
:
createContext
(
MerinoTestUtils
.
WEATHER_KEYWORD
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
matches
:
[
defaultResult
]
}
)
;
await
check_results
(
{
context
:
createContext
(
"
nimbusoverride
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
await
check_results
(
{
context
:
createContext
(
"
nimbus
"
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
UrlbarProviderWeather
.
name
]
isPrivate
:
false
}
)
matches
:
[
]
}
)
;
}
)
;
function
assertDisabled
(
{
message
}
)
{
info
(
"
Asserting
feature
is
disabled
"
)
;
if
(
message
)
{
info
(
message
)
;
}
Assert
.
strictEqual
(
QuickSuggest
.
weather
.
_test_merino
null
"
Merino
client
is
null
"
)
;
}
