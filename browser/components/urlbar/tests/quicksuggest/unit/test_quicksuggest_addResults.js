"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ObjectUtils
:
"
resource
:
/
/
gre
/
modules
/
ObjectUtils
.
jsm
"
}
)
;
const
TEST_ADD_RESULTS_CHUNK_SIZE
=
100
;
add_task
(
async
function
init
(
)
{
UrlbarPrefs
.
set
(
"
quicksuggest
.
enabled
"
true
)
;
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
)
;
Assert
.
equal
(
typeof
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
"
number
"
"
Sanity
check
:
_addResultsChunkSize
is
a
number
"
)
;
Assert
.
greater
(
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
0
"
Sanity
check
:
_addResultsChunkSize
>
0
"
)
;
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
=
TEST_ADD_RESULTS_CHUNK_SIZE
;
}
)
;
add_task
(
async
function
chunking_singleKeyword
(
)
{
let
resultCounts
=
[
1
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
-
1
1
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
1
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
+
1
2
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
-
1
2
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
2
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
+
1
3
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
-
1
3
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
3
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
+
1
]
;
for
(
let
count
of
resultCounts
)
{
await
doChunkingTest
(
count
1
)
;
}
}
)
;
add_task
(
async
function
chunking_manyKeywords
(
)
{
let
keywordCounts
=
[
1
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
-
1
1
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
1
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
+
1
2
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
-
1
2
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
2
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
+
1
3
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
-
1
3
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
3
*
QuickSuggest
.
remoteSettings
.
_addResultsChunkSize
+
1
]
;
for
(
let
resultCount
=
1
;
resultCount
<
=
3
;
resultCount
+
+
)
{
for
(
let
keywordCount
of
keywordCounts
)
{
await
doChunkingTest
(
resultCount
keywordCount
)
;
}
}
}
)
;
async
function
doChunkingTest
(
resultCount
keywordCountPerResult
)
{
info
(
"
Running
chunking
test
:
"
+
JSON
.
stringify
(
{
resultCount
keywordCountPerResult
}
)
)
;
let
results
=
[
]
;
for
(
let
i
=
0
;
i
<
resultCount
;
i
+
+
)
{
let
keywords
=
[
]
;
for
(
let
k
=
0
;
k
<
keywordCountPerResult
;
k
+
+
)
{
keywords
.
push
(
keyword
-
{
i
}
-
{
k
}
)
;
}
results
.
push
(
{
keywords
id
:
i
url
:
"
http
:
/
/
example
.
com
/
"
+
i
title
:
"
Suggestion
"
+
i
click_url
:
"
http
:
/
/
example
.
com
/
click
"
impression_url
:
"
http
:
/
/
example
.
com
/
impression
"
advertiser
:
"
TestAdvertiser
"
iab_category
:
"
22
-
Shopping
"
}
)
;
}
QuickSuggest
.
remoteSettings
.
_test_resultsByKeyword
.
clear
(
)
;
await
QuickSuggest
.
remoteSettings
.
_test_addResults
(
results
)
;
for
(
let
i
=
0
;
i
<
resultCount
;
i
+
+
)
{
for
(
let
k
=
0
;
k
<
keywordCountPerResult
;
k
+
+
)
{
let
keyword
=
keyword
-
{
i
}
-
{
k
}
;
let
actualResult
=
QuickSuggest
.
remoteSettings
.
_test_resultsByKeyword
.
get
(
keyword
)
;
if
(
!
ObjectUtils
.
deepEqual
(
actualResult
results
[
i
]
)
)
{
Assert
.
deepEqual
(
actualResult
results
[
i
]
Result
{
i
}
is
in
_test_resultsByKeyword
for
keyword
{
keyword
}
)
;
}
let
actualSuggestions
=
await
QuickSuggest
.
remoteSettings
.
fetch
(
keyword
)
;
for
(
let
s
of
actualSuggestions
)
{
delete
s
.
full_keyword
;
}
let
expectedSuggestions
=
[
{
block_id
:
i
url
:
"
http
:
/
/
example
.
com
/
"
+
i
title
:
"
Suggestion
"
+
i
click_url
:
"
http
:
/
/
example
.
com
/
click
"
impression_url
:
"
http
:
/
/
example
.
com
/
impression
"
advertiser
:
"
TestAdvertiser
"
iab_category
:
"
22
-
Shopping
"
is_sponsored
:
true
score
:
RemoteSettingsClient
.
DEFAULT_SUGGESTION_SCORE
source
:
"
remote
-
settings
"
icon
:
null
position
:
undefined
}
]
;
if
(
!
ObjectUtils
.
deepEqual
(
actualSuggestions
expectedSuggestions
)
)
{
Assert
.
deepEqual
(
actualSuggestions
expectedSuggestions
query
(
)
returns
a
suggestion
for
result
{
i
}
with
keyword
{
keyword
}
)
;
}
}
}
}
