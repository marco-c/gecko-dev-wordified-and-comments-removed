"
use
strict
"
;
const
REMOTE_SETTINGS_RECORDS
=
[
{
type
:
"
exposure
-
suggestions
"
suggestion_type
:
"
aaa
"
attachment
:
{
keywords
:
[
"
aaa
keyword
"
"
aaa
bbb
keyword
"
"
amp
"
"
wikipedia
"
]
}
}
{
type
:
"
exposure
-
suggestions
"
suggestion_type
:
"
bbb
"
attachment
:
{
keywords
:
[
"
bbb
keyword
"
"
aaa
bbb
keyword
"
"
amp
"
"
wikipedia
"
]
}
}
{
collection
:
QuickSuggestTestUtils
.
RS_COLLECTION
.
AMP
type
:
QuickSuggestTestUtils
.
RS_TYPE
.
AMP
attachment
:
[
QuickSuggestTestUtils
.
ampRemoteSettings
(
)
]
}
{
type
:
QuickSuggestTestUtils
.
RS_TYPE
.
WIKIPEDIA
attachment
:
[
QuickSuggestTestUtils
.
wikipediaRemoteSettings
(
)
]
}
]
;
add_setup
(
async
function
(
)
{
await
QuickSuggestTestUtils
.
ensureQuickSuggestInit
(
{
remoteSettingsRecords
:
REMOTE_SETTINGS_RECORDS
}
)
;
UrlbarPrefs
.
clear
(
"
quicksuggest
.
enabled
"
)
;
}
)
;
add_task
(
async
function
suggestEnabledLocales
(
)
{
let
tests
=
[
{
homeRegion
:
"
US
"
locales
:
[
"
en
-
US
"
"
en
-
CA
"
"
en
-
GB
"
]
expectedQuickSuggestEnabled
:
true
queries
:
[
{
query
:
"
amp
"
expectedResults
:
[
QuickSuggestTestUtils
.
ampResult
(
)
makeExpectedExposureResult
(
"
bbb
"
)
makeExpectedExposureResult
(
"
aaa
"
)
]
}
{
query
:
"
wikipedia
"
expectedResults
:
[
QuickSuggestTestUtils
.
wikipediaResult
(
)
makeExpectedExposureResult
(
"
bbb
"
)
makeExpectedExposureResult
(
"
aaa
"
)
]
}
{
query
:
"
aaa
keyword
"
expectedResults
:
[
makeExpectedExposureResult
(
"
aaa
"
)
]
}
{
query
:
"
aaa
bbb
keyword
"
expectedResults
:
[
makeExpectedExposureResult
(
"
bbb
"
)
makeExpectedExposureResult
(
"
aaa
"
)
]
}
]
}
]
;
for
(
let
test
of
tests
)
{
await
doLocaleTest
(
test
)
;
}
}
)
;
add_task
(
async
function
suggestDisabledLocales
(
)
{
let
queries
=
[
{
query
:
"
amp
"
expectedResults
:
[
makeExpectedExposureResult
(
"
bbb
"
)
makeExpectedExposureResult
(
"
aaa
"
)
]
}
{
query
:
"
wikipedia
"
expectedResults
:
[
makeExpectedExposureResult
(
"
bbb
"
)
makeExpectedExposureResult
(
"
aaa
"
)
]
}
{
query
:
"
aaa
keyword
"
expectedResults
:
[
makeExpectedExposureResult
(
"
aaa
"
)
]
}
{
query
:
"
aaa
bbb
keyword
"
expectedResults
:
[
makeExpectedExposureResult
(
"
bbb
"
)
makeExpectedExposureResult
(
"
aaa
"
)
]
}
]
;
let
tests
=
[
{
homeRegion
:
"
US
"
locales
:
[
"
de
"
"
fr
"
"
ja
"
]
expectedQuickSuggestEnabled
:
false
queries
}
{
homeRegion
:
"
CA
"
locales
:
[
"
en
-
US
"
"
en
-
CA
"
"
en
-
GB
"
"
fr
"
]
expectedQuickSuggestEnabled
:
false
queries
}
{
homeRegion
:
"
DE
"
locales
:
[
"
de
"
"
en
-
US
"
"
fr
"
]
expectedQuickSuggestEnabled
:
false
queries
}
]
;
for
(
let
test
of
tests
)
{
await
doLocaleTest
(
test
)
;
}
}
)
;
async
function
doLocaleTest
(
{
homeRegion
locales
expectedQuickSuggestEnabled
queries
}
)
{
for
(
let
locale
of
locales
)
{
info
(
"
Doing
locale
test
:
"
+
JSON
.
stringify
(
{
homeRegion
locale
}
)
)
;
await
QuickSuggestTestUtils
.
withLocales
(
{
homeRegion
locales
:
[
locale
]
callback
:
async
(
)
=
>
{
info
(
"
Reinitializing
Suggest
"
)
;
await
QuickSuggest
.
_test_reinit
(
)
;
info
(
"
Done
reinitializing
Suggest
"
)
;
assertSuggestPrefs
(
expectedQuickSuggestEnabled
)
;
Assert
.
equal
(
UrlbarPrefs
.
get
(
"
quickSuggestEnabled
"
)
expectedQuickSuggestEnabled
"
quickSuggestEnabled
Nimbus
variable
should
be
correct
after
setting
locale
"
)
;
let
nimbusCleanup
=
await
UrlbarTestUtils
.
initNimbusFeature
(
{
quickSuggestEnabled
:
true
quickSuggestExposureSuggestionTypes
:
"
aaa
bbb
"
}
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
assertSuggestPrefs
(
expectedQuickSuggestEnabled
)
;
Assert
.
ok
(
UrlbarPrefs
.
get
(
"
quickSuggestEnabled
"
)
"
quickSuggestEnabled
Nimbus
variable
should
be
enabled
after
installing
experiment
"
)
;
for
(
let
{
query
expectedResults
}
of
queries
)
{
await
check_results
(
{
context
:
createContext
(
query
{
providers
:
[
UrlbarProviderQuickSuggest
.
name
]
isPrivate
:
false
}
)
matches
:
expectedResults
}
)
;
}
await
nimbusCleanup
(
)
;
await
QuickSuggestTestUtils
.
forceSync
(
)
;
}
}
)
;
}
await
QuickSuggest
.
_test_reinit
(
)
;
}
function
assertSuggestPrefs
(
expectedEnabled
)
{
let
prefs
=
[
"
browser
.
urlbar
.
quicksuggest
.
enabled
"
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
sponsored
"
"
browser
.
urlbar
.
suggest
.
quicksuggest
.
nonsponsored
"
]
;
for
(
let
p
of
prefs
)
{
Assert
.
equal
(
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
getBoolPref
(
p
)
expectedEnabled
"
Default
-
branch
value
should
be
correct
:
"
+
p
)
;
Assert
.
equal
(
Services
.
prefs
.
getBranch
(
"
"
)
.
getBoolPref
(
p
)
expectedEnabled
"
User
-
branch
value
should
be
correct
:
"
+
p
)
;
}
}
function
makeExpectedExposureResult
(
exposureSuggestionType
)
{
return
{
type
:
UrlbarUtils
.
RESULT_TYPE
.
DYNAMIC
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
heuristic
:
false
exposureTelemetry
:
UrlbarUtils
.
EXPOSURE_TELEMETRY
.
HIDDEN
payload
:
{
exposureSuggestionType
source
:
"
rust
"
dynamicType
:
"
exposure
"
provider
:
"
Exposure
"
telemetryType
:
"
exposure
"
isSponsored
:
false
}
}
;
}
