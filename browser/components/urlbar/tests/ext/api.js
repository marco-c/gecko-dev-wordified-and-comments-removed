"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
Preferences
:
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
defaultPreferences
"
(
)
=
>
new
Preferences
(
{
defaultBranch
:
true
}
)
)
;
this
.
experiments_urlbar
=
class
extends
ExtensionAPI
{
getAPI
(
)
{
return
{
experiments
:
{
urlbar
:
{
clearInput
(
)
{
let
window
=
BrowserWindowTracker
.
getTopWindow
(
)
;
window
.
gURLBar
.
value
=
"
"
;
window
.
gURLBar
.
setPageProxyState
(
"
invalid
"
)
;
}
engagementTelemetry
:
this
.
_getDefaultSettingsAPI
(
"
browser
.
urlbar
.
eventTelemetry
.
enabled
"
)
openViewOnFocus
:
this
.
_getDefaultSettingsAPI
(
"
browser
.
urlbar
.
openViewOnFocus
"
)
}
}
}
;
}
onShutdown
(
)
{
if
(
this
.
_initialDefaultPrefs
)
{
for
(
let
[
pref
value
]
of
this
.
_initialDefaultPrefs
.
entries
(
)
)
{
defaultPreferences
.
set
(
pref
value
)
;
}
}
}
_getDefaultSettingsAPI
(
pref
)
{
return
{
get
:
details
=
>
{
return
{
value
:
Preferences
.
get
(
pref
)
levelOfControl
:
"
controllable_by_this_extension
"
}
;
}
set
:
details
=
>
{
if
(
!
this
.
_initialDefaultPrefs
)
{
this
.
_initialDefaultPrefs
=
new
Map
(
)
;
}
if
(
!
this
.
_initialDefaultPrefs
.
has
(
pref
)
)
{
this
.
_initialDefaultPrefs
.
set
(
pref
defaultPreferences
.
get
(
pref
)
)
;
}
defaultPreferences
.
set
(
pref
details
.
value
)
;
return
true
;
}
clear
:
details
=
>
{
if
(
this
.
_initialDefaultPrefs
&
&
this
.
_initialDefaultPrefs
.
has
(
pref
)
)
{
defaultPreferences
.
set
(
pref
this
.
_initialDefaultPrefs
.
get
(
pref
)
)
;
return
true
;
}
return
false
;
}
}
;
}
}
;
