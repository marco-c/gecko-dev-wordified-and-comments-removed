"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppMenuNotifications
:
"
resource
:
/
/
gre
/
modules
/
AppMenuNotifications
.
jsm
"
}
)
;
add_task
(
async
function
noNotifications
(
)
{
await
checkExtension
(
false
)
;
}
)
;
add_task
(
async
function
urlbarView
(
)
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
waitForFocus
}
)
;
await
checkExtension
(
true
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
)
;
add_task
(
async
function
trackingProtection
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
/
"
async
(
)
=
>
{
let
panel
=
document
.
getElementById
(
"
protections
-
popup
"
)
;
document
.
getElementById
(
"
tracking
-
protection
-
icon
-
container
"
)
.
click
(
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
panel
"
shown
"
)
;
await
checkExtension
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
panel
"
hidden
"
)
;
}
)
;
}
)
;
add_task
(
async
function
siteIdentity
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
/
"
async
(
)
=
>
{
let
panel
=
document
.
getElementById
(
"
identity
-
popup
"
)
;
document
.
getElementById
(
"
identity
-
box
"
)
.
click
(
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
panel
"
shown
"
)
;
await
checkExtension
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
panel
"
hidden
"
)
;
}
)
;
}
)
;
add_task
(
async
function
notificationBox
(
)
{
let
box
=
gBrowser
.
getNotificationBox
(
)
;
let
note
=
box
.
appendNotification
(
"
Test
"
"
urlbar
-
test
"
null
box
.
PRIORITY_INFO_HIGH
null
null
null
)
;
await
checkExtension
(
true
)
;
box
.
removeNotification
(
note
true
)
;
}
)
;
add_task
(
async
function
pageActionPanel
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
/
"
async
(
)
=
>
{
let
panel
=
document
.
getElementById
(
"
pageActionPanel
"
)
;
document
.
getElementById
(
"
pageActionButton
"
)
.
click
(
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
panel
"
shown
"
)
;
await
checkExtension
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
panel
"
hidden
"
)
;
}
)
;
}
)
;
add_task
(
async
function
toolbarButtonPanel
(
)
{
document
.
getElementById
(
"
library
-
button
"
)
.
click
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
document
.
getElementById
(
"
customizationui
-
widget
-
panel
"
)
;
}
)
;
await
checkExtension
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
document
.
getElementById
(
"
customizationui
-
widget
-
panel
"
)
;
}
)
;
}
)
;
add_task
(
async
function
appMenuNotification
(
)
{
AppMenuNotifications
.
showNotification
(
"
update
-
manual
"
{
callback
:
(
)
=
>
{
}
}
)
;
let
panel
=
document
.
getElementById
(
"
appMenu
-
notification
-
popup
"
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
panel
"
shown
"
)
;
await
checkExtension
(
true
)
;
AppMenuNotifications
.
dismissNotification
(
"
update
-
manual
"
)
;
await
BrowserTestUtils
.
waitForPopupEvent
(
panel
"
hidden
"
)
;
}
)
;
async
function
checkExtension
(
expectedShowing
)
{
let
ext
=
await
loadExtension
(
async
(
)
=
>
{
let
showing
=
await
browser
.
experiments
.
urlbar
.
isBrowserShowingNotification
(
)
;
browser
.
test
.
sendMessage
(
"
showing
"
showing
)
;
}
)
;
let
showing
=
await
ext
.
awaitMessage
(
"
showing
"
)
;
Assert
.
equal
(
showing
expectedShowing
)
;
await
ext
.
unload
(
)
;
}
