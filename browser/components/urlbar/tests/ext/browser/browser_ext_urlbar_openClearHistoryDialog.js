"
use
strict
"
;
add_task
(
async
function
normalMode
(
)
{
await
checkExtension
(
)
;
}
)
;
add_task
(
async
function
privateBrowsingMode
(
)
{
const
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
checkExtension
(
true
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
}
)
;
async
function
checkExtension
(
isPrivate
=
false
)
{
let
ext
=
await
loadExtension
(
async
(
)
=
>
{
browser
.
test
.
onMessage
.
addListener
(
async
(
)
=
>
{
await
browser
.
test
.
assertRejects
(
browser
.
experiments
.
urlbar
.
openClearHistoryDialog
(
)
"
experiments
.
urlbar
.
openClearHistoryDialog
may
only
be
called
from
a
user
input
handler
"
"
browser
.
experiments
.
urlbar
.
openClearHistoryDialog
should
fail
when
called
from
outside
a
user
input
handler
.
"
)
;
browser
.
test
.
withHandlingUserInput
(
(
)
=
>
{
browser
.
experiments
.
urlbar
.
openClearHistoryDialog
(
)
;
}
)
;
}
)
;
}
)
;
let
dialogPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
function
onOpen
(
subj
topic
data
)
{
if
(
topic
=
=
"
domwindowopened
"
&
&
subj
instanceof
Ci
.
nsIDOMWindow
)
{
subj
.
addEventListener
(
"
load
"
function
(
)
{
if
(
subj
.
document
.
documentURI
=
=
"
chrome
:
/
/
browser
/
content
/
sanitize
.
xul
"
)
{
Services
.
ww
.
unregisterNotification
(
onOpen
)
;
Assert
.
ok
(
true
"
Observed
Clear
Recent
History
window
open
"
)
;
is
(
subj
.
opener
AppConstants
.
platform
=
=
"
macosx
"
?
null
:
window
"
openClearHistoryDialog
opened
a
sanitizer
window
.
"
)
;
subj
.
close
(
)
;
resolve
(
)
;
}
}
{
once
:
true
}
)
;
}
}
Services
.
ww
.
registerNotification
(
onOpen
)
;
if
(
isPrivate
)
{
setTimeout
(
(
)
=
>
{
Services
.
ww
.
unregisterNotification
(
onOpen
)
;
reject
(
"
No
window
opened
.
"
)
;
}
500
)
;
}
}
)
;
ext
.
sendMessage
(
"
begin
-
test
"
)
;
if
(
isPrivate
)
{
await
dialogPromise
.
catch
(
(
)
=
>
{
Assert
.
ok
(
true
"
Promise
should
have
timed
out
in
PBM
.
"
)
;
}
)
;
}
else
{
await
dialogPromise
;
Assert
.
ok
(
true
"
Clear
history
browser
dialog
was
shown
.
"
)
;
}
await
ext
.
unload
(
)
;
}
