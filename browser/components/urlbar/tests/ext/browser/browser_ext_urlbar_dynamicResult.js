"
use
strict
"
;
add_task
(
async
function
test
(
)
{
let
ext
=
await
loadExtension
(
{
extraFiles
:
{
"
dynamicResult
.
css
"
:
await
(
await
fetch
(
"
file
:
/
/
"
+
getTestFilePath
(
"
dynamicResult
.
css
"
)
)
)
.
text
(
)
}
background
:
async
(
)
=
>
{
browser
.
experiments
.
urlbar
.
addDynamicResultType
(
"
testDynamicType
"
)
;
browser
.
experiments
.
urlbar
.
addDynamicViewTemplate
(
"
testDynamicType
"
{
stylesheet
:
"
dynamicResult
.
css
"
children
:
[
{
name
:
"
text
"
tag
:
"
span
"
}
{
name
:
"
button
"
tag
:
"
span
"
attributes
:
{
role
:
"
button
"
}
}
]
}
)
;
browser
.
urlbar
.
onBehaviorRequested
.
addListener
(
query
=
>
{
return
"
restricting
"
;
}
"
test
"
)
;
browser
.
urlbar
.
onResultsRequested
.
addListener
(
query
=
>
{
return
[
{
type
:
"
dynamic
"
source
:
"
local
"
heuristic
:
true
payload
:
{
dynamicType
:
"
testDynamicType
"
}
}
]
;
}
"
test
"
)
;
browser
.
experiments
.
urlbar
.
onViewUpdateRequested
.
addListener
(
payload
=
>
{
return
{
text
:
{
textContent
:
"
This
is
a
dynamic
result
.
"
}
button
:
{
textContent
:
"
Click
Me
"
}
}
;
}
"
test
"
)
;
browser
.
urlbar
.
onResultPicked
.
addListener
(
(
payload
elementName
)
=
>
{
browser
.
test
.
sendMessage
(
"
onResultPicked
"
[
payload
elementName
]
)
;
}
"
test
"
)
;
}
}
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
&
&
UrlbarResult
.
getDynamicResultType
(
"
testDynamicType
"
)
"
Waiting
for
provider
and
dynamic
type
to
be
registered
"
)
;
Assert
.
ok
(
UrlbarProvidersManager
.
getProvider
(
"
test
"
)
"
Provider
should
be
registered
"
)
;
Assert
.
ok
(
UrlbarResult
.
getDynamicResultType
(
"
testDynamicType
"
)
"
Dynamic
type
should
be
registered
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
"
waitForFocus
:
SimpleTest
.
waitForFocus
}
)
;
let
row
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
0
)
;
Assert
.
equal
(
row
.
result
.
type
UrlbarUtils
.
RESULT_TYPE
.
DYNAMIC
"
row
.
result
.
type
"
)
;
Assert
.
equal
(
row
.
getAttribute
(
"
dynamicType
"
)
"
testDynamicType
"
"
row
[
dynamicType
]
"
)
;
let
text
=
row
.
querySelector
(
"
.
urlbarView
-
dynamic
-
testDynamicType
-
text
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
text
.
textContent
=
=
"
This
is
a
dynamic
result
.
"
)
;
Assert
.
equal
(
text
.
textContent
"
This
is
a
dynamic
result
.
"
"
text
.
textContent
"
)
;
let
button
=
row
.
querySelector
(
"
.
urlbarView
-
dynamic
-
testDynamicType
-
button
"
)
;
Assert
.
equal
(
button
.
textContent
"
Click
Me
"
"
button
.
textContent
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedElement
(
window
)
button
"
Button
should
be
selected
"
)
;
let
pickPromise
=
ext
.
awaitMessage
(
"
onResultPicked
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
(
)
=
>
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
)
;
let
[
payload
elementName
]
=
await
pickPromise
;
Assert
.
equal
(
payload
.
dynamicType
"
testDynamicType
"
"
Picked
payload
"
)
;
Assert
.
equal
(
elementName
"
button
"
"
Picked
element
name
"
)
;
await
ext
.
unload
(
)
;
}
)
;
