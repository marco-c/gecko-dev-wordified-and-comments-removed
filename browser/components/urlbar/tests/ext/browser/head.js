"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
browser
/
components
/
urlbar
/
tests
/
browser
/
head
-
common
.
js
"
this
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
Preferences
:
"
resource
:
/
/
gre
/
modules
/
Preferences
.
sys
.
mjs
"
}
)
;
const
SCHEMA_BASENAME
=
"
schema
.
json
"
;
const
SCRIPT_BASENAME
=
"
api
.
js
"
;
const
SCHEMA_PATH
=
getTestFilePath
(
SCHEMA_BASENAME
)
;
const
SCRIPT_PATH
=
getTestFilePath
(
SCRIPT_BASENAME
)
;
let
schemaSource
;
let
scriptSource
;
add_setup
(
async
function
loadSource
(
)
{
schemaSource
=
await
(
await
fetch
(
"
file
:
/
/
"
+
SCHEMA_PATH
)
)
.
text
(
)
;
scriptSource
=
await
(
await
fetch
(
"
file
:
/
/
"
+
SCRIPT_PATH
)
)
.
text
(
)
;
}
)
;
async
function
loadExtension
(
{
background
extraFiles
=
{
}
}
)
{
let
ext
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
permissions
:
[
"
urlbar
"
]
experiment_apis
:
{
experiments_urlbar
:
{
schema
:
SCHEMA_BASENAME
parent
:
{
scopes
:
[
"
addon_parent
"
]
paths
:
[
[
"
experiments
"
"
urlbar
"
]
]
script
:
SCRIPT_BASENAME
}
}
}
}
files
:
{
[
SCHEMA_BASENAME
]
:
schemaSource
[
SCRIPT_BASENAME
]
:
scriptSource
.
.
.
extraFiles
}
isPrivileged
:
true
background
}
)
;
await
ext
.
startup
(
)
;
return
ext
;
}
function
add_settings_tasks
(
prefName
type
background
)
{
let
defaultPreferences
=
new
Preferences
(
{
defaultBranch
:
true
}
)
;
let
originalValue
=
defaultPreferences
.
get
(
prefName
)
;
registerCleanupFunction
(
(
)
=
>
{
defaultPreferences
.
set
(
prefName
originalValue
)
;
}
)
;
let
firstValue
secondValue
;
switch
(
type
)
{
case
"
string
"
:
firstValue
=
"
test
value
1
"
;
secondValue
=
"
test
value
2
"
;
break
;
case
"
number
"
:
firstValue
=
10
;
secondValue
=
100
;
break
;
case
"
boolean
"
:
firstValue
=
false
;
secondValue
=
true
;
break
;
default
:
Assert
.
ok
(
false
"
type
"
parameter
must
be
one
of
"
string
"
"
number
"
or
"
boolean
"
)
;
}
add_task
(
async
function
get
(
)
{
let
ext
=
await
loadExtension
(
{
background
}
)
;
defaultPreferences
.
set
(
prefName
firstValue
)
;
ext
.
sendMessage
(
"
get
"
{
}
)
;
let
result
=
await
ext
.
awaitMessage
(
"
done
"
)
;
Assert
.
strictEqual
(
result
.
value
firstValue
)
;
defaultPreferences
.
set
(
prefName
secondValue
)
;
ext
.
sendMessage
(
"
get
"
{
}
)
;
result
=
await
ext
.
awaitMessage
(
"
done
"
)
;
Assert
.
strictEqual
(
result
.
value
secondValue
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
set
(
)
{
let
ext
=
await
loadExtension
(
{
background
}
)
;
defaultPreferences
.
set
(
prefName
firstValue
)
;
ext
.
sendMessage
(
"
set
"
{
value
:
secondValue
}
)
;
let
result
=
await
ext
.
awaitMessage
(
"
done
"
)
;
Assert
.
strictEqual
(
result
true
)
;
Assert
.
strictEqual
(
defaultPreferences
.
get
(
prefName
)
secondValue
)
;
ext
.
sendMessage
(
"
set
"
{
value
:
firstValue
}
)
;
result
=
await
ext
.
awaitMessage
(
"
done
"
)
;
Assert
.
strictEqual
(
result
true
)
;
Assert
.
strictEqual
(
defaultPreferences
.
get
(
prefName
)
firstValue
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
clear
(
)
{
defaultPreferences
.
set
(
prefName
firstValue
)
;
let
ext
=
await
loadExtension
(
{
background
}
)
;
ext
.
sendMessage
(
"
clear
"
{
}
)
;
let
result
=
await
ext
.
awaitMessage
(
"
done
"
)
;
Assert
.
strictEqual
(
result
false
)
;
Assert
.
strictEqual
(
defaultPreferences
.
get
(
prefName
)
firstValue
)
;
await
ext
.
unload
(
)
;
defaultPreferences
.
set
(
prefName
firstValue
)
;
ext
=
await
loadExtension
(
{
background
}
)
;
ext
.
sendMessage
(
"
set
"
{
value
:
secondValue
}
)
;
await
ext
.
awaitMessage
(
"
done
"
)
;
ext
.
sendMessage
(
"
clear
"
{
}
)
;
result
=
await
ext
.
awaitMessage
(
"
done
"
)
;
Assert
.
strictEqual
(
result
true
)
;
Assert
.
strictEqual
(
defaultPreferences
.
get
(
prefName
)
firstValue
)
;
await
ext
.
unload
(
)
;
defaultPreferences
.
set
(
prefName
secondValue
)
;
ext
=
await
loadExtension
(
{
background
}
)
;
ext
.
sendMessage
(
"
set
"
{
value
:
firstValue
}
)
;
await
ext
.
awaitMessage
(
"
done
"
)
;
ext
.
sendMessage
(
"
clear
"
{
}
)
;
result
=
await
ext
.
awaitMessage
(
"
done
"
)
;
Assert
.
strictEqual
(
result
true
)
;
Assert
.
strictEqual
(
defaultPreferences
.
get
(
prefName
)
secondValue
)
;
await
ext
.
unload
(
)
;
defaultPreferences
.
set
(
prefName
firstValue
)
;
ext
=
await
loadExtension
(
{
background
}
)
;
ext
.
sendMessage
(
"
set
"
{
value
:
firstValue
}
)
;
await
ext
.
awaitMessage
(
"
done
"
)
;
ext
.
sendMessage
(
"
clear
"
{
}
)
;
result
=
await
ext
.
awaitMessage
(
"
done
"
)
;
Assert
.
strictEqual
(
result
true
)
;
Assert
.
strictEqual
(
defaultPreferences
.
get
(
prefName
)
firstValue
)
;
await
ext
.
unload
(
)
;
defaultPreferences
.
set
(
prefName
secondValue
)
;
ext
=
await
loadExtension
(
{
background
}
)
;
ext
.
sendMessage
(
"
set
"
{
value
:
secondValue
}
)
;
await
ext
.
awaitMessage
(
"
done
"
)
;
ext
.
sendMessage
(
"
clear
"
{
}
)
;
result
=
await
ext
.
awaitMessage
(
"
done
"
)
;
Assert
.
strictEqual
(
result
true
)
;
Assert
.
strictEqual
(
defaultPreferences
.
get
(
prefName
)
secondValue
)
;
await
ext
.
unload
(
)
;
}
)
;
add_task
(
async
function
shutdown
(
)
{
defaultPreferences
.
set
(
prefName
firstValue
)
;
let
ext
=
await
loadExtension
(
{
background
}
)
;
await
ext
.
unload
(
)
;
Assert
.
strictEqual
(
defaultPreferences
.
get
(
prefName
)
firstValue
)
;
defaultPreferences
.
set
(
prefName
firstValue
)
;
ext
=
await
loadExtension
(
{
background
}
)
;
ext
.
sendMessage
(
"
set
"
{
value
:
secondValue
}
)
;
await
ext
.
awaitMessage
(
"
done
"
)
;
await
ext
.
unload
(
)
;
Assert
.
strictEqual
(
defaultPreferences
.
get
(
prefName
)
firstValue
)
;
defaultPreferences
.
set
(
prefName
secondValue
)
;
ext
=
await
loadExtension
(
{
background
}
)
;
ext
.
sendMessage
(
"
set
"
{
value
:
firstValue
}
)
;
await
ext
.
awaitMessage
(
"
done
"
)
;
await
ext
.
unload
(
)
;
Assert
.
strictEqual
(
defaultPreferences
.
get
(
prefName
)
secondValue
)
;
defaultPreferences
.
set
(
prefName
firstValue
)
;
ext
=
await
loadExtension
(
{
background
}
)
;
ext
.
sendMessage
(
"
set
"
{
value
:
firstValue
}
)
;
await
ext
.
awaitMessage
(
"
done
"
)
;
await
ext
.
unload
(
)
;
Assert
.
strictEqual
(
defaultPreferences
.
get
(
prefName
)
firstValue
)
;
defaultPreferences
.
set
(
prefName
secondValue
)
;
ext
=
await
loadExtension
(
{
background
}
)
;
ext
.
sendMessage
(
"
set
"
{
value
:
secondValue
}
)
;
await
ext
.
awaitMessage
(
"
done
"
)
;
await
ext
.
unload
(
)
;
Assert
.
strictEqual
(
defaultPreferences
.
get
(
prefName
)
secondValue
)
;
}
)
;
}
