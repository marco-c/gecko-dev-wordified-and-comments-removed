"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
browser
/
components
/
urlbar
/
tests
/
ext
/
browser
/
head
.
js
"
this
)
;
add_setup
(
async
function
(
)
{
await
setup
(
)
;
}
)
;
class
NoResponseTestProvider
extends
UrlbarTestUtils
.
TestProvider
{
constructor
(
)
{
super
(
{
name
:
"
TestProviderNoResponse
"
results
:
[
]
}
)
;
this
.
#
deferred
=
PromiseUtils
.
defer
(
)
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
HEURISTIC
;
}
async
startQuery
(
context
addCallback
)
{
await
this
.
#
deferred
.
promise
;
}
done
(
)
{
this
.
#
deferred
.
resolve
(
)
;
}
#
deferred
=
null
;
}
const
noResponseProvider
=
new
NoResponseTestProvider
(
)
;
class
AnotherHeuristicProvider
extends
UrlbarTestUtils
.
TestProvider
{
constructor
(
{
results
}
)
{
super
(
{
name
:
"
TestProviderAnotherHeuristic
"
results
}
)
;
this
.
#
deferred
=
PromiseUtils
.
defer
(
)
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
HEURISTIC
;
}
async
startQuery
(
context
addCallback
)
{
for
(
const
result
of
this
.
_results
)
{
addCallback
(
this
result
)
;
}
this
.
#
deferred
.
resolve
(
context
)
;
}
onQueryStarted
(
)
{
return
this
.
#
deferred
.
promise
;
}
#
deferred
=
null
;
}
const
anotherHeuristicProvider
=
new
AnotherHeuristicProvider
(
{
results
:
[
Object
.
assign
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
url
:
"
https
:
/
/
example
.
com
/
immediate
"
}
)
{
heuristic
:
true
}
)
]
}
)
;
add_task
(
async
function
engagement_before_showing_results
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
tipShownCount
.
searchTip_onboard
"
999
]
]
}
)
;
const
originalChuldResultDelayMs
=
UrlbarProvidersManager
.
_chunkResultsDelayMs
;
UrlbarProvidersManager
.
_chunkResultsDelayMs
=
1000000
;
UrlbarProvidersManager
.
registerProvider
(
noResponseProvider
)
;
UrlbarProvidersManager
.
registerProvider
(
anotherHeuristicProvider
)
;
registerCleanupFunction
(
function
(
)
{
UrlbarProvidersManager
.
unregisterProvider
(
noResponseProvider
)
;
UrlbarProvidersManager
.
unregisterProvider
(
anotherHeuristicProvider
)
;
UrlbarProvidersManager
.
_chunkResultsDelayMs
=
originalChuldResultDelayMs
;
}
)
;
await
doTest
(
async
browser
=
>
{
await
UrlbarTestUtils
.
inputIntoURLBar
(
window
"
exam
"
)
;
const
context
=
await
anotherHeuristicProvider
.
onQueryStarted
(
)
;
const
query
=
UrlbarProvidersManager
.
queries
.
get
(
context
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
query
.
unsortedResults
.
some
(
r
=
>
r
.
providerName
=
=
=
"
HeuristicFallback
"
)
&
&
query
.
unsortedResults
.
some
(
r
=
>
r
.
providerName
=
=
=
anotherHeuristicProvider
.
name
)
)
;
await
doEnter
(
)
;
assertEngagementTelemetry
(
[
{
selected_result
:
"
input_field
"
selected_result_subtype
:
"
"
provider
:
undefined
results
:
"
"
groups
:
"
"
}
]
)
;
noResponseProvider
.
done
(
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
