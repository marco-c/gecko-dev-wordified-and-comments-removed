"
use
strict
"
;
function
checkUrlbarFocus
(
win
focusState
)
{
let
urlbar
=
win
.
gURLBar
;
is
(
focusState
?
win
.
document
.
activeElement
:
!
win
.
document
.
activeElement
focusState
?
urlbar
.
inputField
:
!
urlbar
.
inputField
URL
Bar
should
{
focusState
?
"
"
:
"
not
"
}
be
focused
)
;
}
add_task
(
async
function
tabSwitchFocusedToFocused
(
)
{
await
doTest
(
async
browser
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
search
"
}
)
;
checkUrlbarFocus
(
window
true
)
;
let
promiseTabOpened
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
TabOpen
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gBrowser
.
tabContainer
.
newTabButton
{
}
)
;
let
openEvent
=
await
promiseTabOpened
;
let
tab2
=
openEvent
.
target
;
checkUrlbarFocus
(
window
true
)
;
await
assertAbandonmentTelemetry
(
[
{
abandonment_type
:
"
tab_switch
"
}
]
)
;
await
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
}
)
;
add_task
(
async
function
tabSwitchFocusedToUnfocused
(
)
{
await
doTest
(
async
browser
=
>
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
search
"
}
)
;
checkUrlbarFocus
(
window
true
)
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
window
.
gBrowser
)
;
checkUrlbarFocus
(
window
false
)
;
await
assertAbandonmentTelemetry
(
[
{
abandonment_type
:
"
blur
"
}
]
)
;
await
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
}
)
;
add_task
(
async
function
tabSwitchUnFocusedToFocused
(
)
{
await
doTest
(
async
browser
=
>
{
checkUrlbarFocus
(
window
false
)
;
let
promiseTabOpened
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
TabOpen
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gBrowser
.
tabContainer
.
newTabButton
{
}
)
;
let
openEvent
=
await
promiseTabOpened
;
let
tab2
=
openEvent
.
target
;
checkUrlbarFocus
(
window
true
)
;
const
telemetries
=
Glean
.
urlbar
.
abandonment
.
testGetValue
(
)
?
?
[
]
;
Assert
.
equal
(
telemetries
.
length
0
"
Telemetry
event
length
matches
expected
event
length
.
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
}
)
;
add_task
(
async
function
tabSwitchUnFocusedToUnFocused
(
)
{
await
doTest
(
async
browser
=
>
{
checkUrlbarFocus
(
window
false
)
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
window
.
gBrowser
)
;
checkUrlbarFocus
(
window
false
)
;
const
telemetries
=
Glean
.
urlbar
.
abandonment
.
testGetValue
(
)
?
?
[
]
;
Assert
.
equal
(
telemetries
.
length
0
"
Telemetry
event
length
matches
expected
event
length
.
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
}
)
;
