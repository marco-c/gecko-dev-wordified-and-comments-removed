"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
UrlbarProvidersManager
:
"
resource
:
/
/
/
modules
/
UrlbarProvidersManager
.
sys
.
mjs
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
sys
.
mjs
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
sys
.
mjs
"
UrlbarView
:
"
resource
:
/
/
/
modules
/
UrlbarView
.
sys
.
mjs
"
}
)
;
const
MAX_RESULT_COUNT
=
10
;
let
gProvider
;
add_setup
(
async
function
(
)
{
await
initExposureTest
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
popup
.
disable_autohide
"
true
]
[
"
browser
.
urlbar
.
maxRichResults
"
MAX_RESULT_COUNT
]
]
}
)
;
await
Services
.
fog
.
testFlushAllChildren
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
gProvider
=
new
TestProvider
(
)
;
UrlbarProvidersManager
.
registerProvider
(
gProvider
)
;
let
originalRemoveStaleRowsTimeout
=
UrlbarView
.
removeStaleRowsTimeout
;
UrlbarView
.
removeStaleRowsTimeout
=
30000
;
registerCleanupFunction
(
(
)
=
>
{
UrlbarView
.
removeStaleRowsTimeout
=
originalRemoveStaleRowsTimeout
;
UrlbarProvidersManager
.
unregisterProvider
(
gProvider
)
;
}
)
;
}
)
;
add_task
(
async
function
noExposure
(
)
{
for
(
let
showExposureResults
of
[
true
false
]
)
{
await
do_noExposure
(
showExposureResults
)
;
}
}
)
;
async
function
do_noExposure
(
showExposureResults
)
{
info
(
"
Starting
do_noExposure
:
"
+
JSON
.
stringify
(
{
showExposureResults
}
)
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
exposureResults
"
"
history
"
]
[
"
browser
.
urlbar
.
showExposureResults
"
showExposureResults
]
]
}
)
;
gProvider
.
results
=
[
]
;
for
(
let
i
=
0
;
i
<
MAX_RESULT_COUNT
;
i
+
+
)
{
gProvider
.
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
suggestion
:
"
suggestion
"
+
i
engine
:
Services
.
search
.
defaultEngine
.
name
}
)
)
;
}
info
(
"
Doing
first
query
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
1
"
}
)
;
let
historyUrl
=
"
https
:
/
/
example
.
com
/
history
"
;
let
bookmarkUrl
=
"
https
:
/
/
example
.
com
/
bookmark
"
;
gProvider
.
results
=
[
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
{
url
:
historyUrl
}
)
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
{
url
:
bookmarkUrl
}
)
]
;
let
queryResolver
=
Promise
.
withResolvers
(
)
;
gProvider
.
finishQueryPromise
=
queryResolver
.
promise
;
let
lastRowPromise
=
promiseLastRowAppended
(
row
=
>
row
.
result
.
payload
.
url
=
=
bookmarkUrl
)
;
info
(
"
Starting
second
query
"
)
;
let
queryPromise
=
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
2
"
reopenOnBlur
:
false
}
)
;
info
(
"
Waiting
for
last
row
"
)
;
let
lastRow
=
await
lastRowPromise
;
info
(
"
Done
waiting
for
last
row
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
isHidden
(
lastRow
)
"
The
new
bookmark
row
should
be
hidden
since
the
view
is
full
"
)
;
let
expected
=
[
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
url
:
bookmarkUrl
}
]
;
if
(
showExposureResults
)
{
expected
.
unshift
(
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
url
:
historyUrl
}
)
;
}
let
rows
=
UrlbarTestUtils
.
getResultsContainer
(
window
)
;
Assert
.
equal
(
rows
.
children
.
length
MAX_RESULT_COUNT
+
expected
.
length
"
The
view
has
the
expected
number
of
rows
"
)
;
for
(
let
i
=
0
;
i
<
MAX_RESULT_COUNT
;
i
+
+
)
{
let
row
=
rows
.
children
[
i
]
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
row
)
rows
[
{
i
}
]
should
be
visible
)
;
Assert
.
ok
(
row
.
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
rows
[
{
i
}
]
.
result
.
type
should
be
SEARCH
)
;
if
(
i
>
0
)
{
Assert
.
ok
(
row
.
result
.
payload
.
suggestion
rows
[
{
i
}
]
should
have
a
suggestion
)
;
}
}
for
(
let
i
=
0
;
i
<
expected
.
length
;
i
+
+
)
{
let
{
source
type
url
}
=
expected
[
i
]
;
let
row
=
rows
.
children
[
MAX_RESULT_COUNT
+
i
]
;
Assert
.
ok
(
row
rows
[
{
i
}
]
should
exist
)
;
Assert
.
ok
(
BrowserTestUtils
.
isHidden
(
row
)
rows
[
{
i
}
]
should
be
hidden
)
;
Assert
.
equal
(
row
.
result
.
type
type
rows
[
{
i
}
]
.
result
.
type
should
be
as
expected
)
;
Assert
.
equal
(
row
.
result
.
source
source
rows
[
{
i
}
]
.
result
.
source
should
be
as
expected
)
;
Assert
.
equal
(
row
.
result
.
payload
.
url
url
rows
[
{
i
}
]
URL
should
be
as
expected
)
;
}
info
(
"
Closing
view
and
blurring
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
gURLBar
.
blur
(
)
;
assertExposureTelemetry
(
[
]
)
;
queryResolver
.
resolve
(
)
;
await
queryPromise
;
await
SpecialPowers
.
popPrefEnv
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
gProvider
.
finishQueryPromise
=
null
;
}
add_task
(
async
function
exposure_append_underfilled
(
)
{
for
(
let
showExposureResults
of
[
true
false
]
)
{
for
(
let
cancelSecondQuery
of
[
true
false
]
)
{
await
do_exposure_append_underfilled
(
{
showExposureResults
cancelSecondQuery
}
)
;
}
}
}
)
;
async
function
do_exposure_append_underfilled
(
{
showExposureResults
cancelSecondQuery
}
)
{
info
(
"
Starting
do_exposure_append
:
"
+
JSON
.
stringify
(
{
showExposureResults
cancelSecondQuery
}
)
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
exposureResults
"
"
search_suggest
"
]
[
"
browser
.
urlbar
.
showExposureResults
"
showExposureResults
]
]
}
)
;
gProvider
.
results
=
[
]
;
info
(
"
Doing
first
query
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
1
"
}
)
;
let
newSuggestion
=
"
new
suggestion
"
;
let
bookmarkUrl
=
"
https
:
/
/
example
.
com
/
bookmark
"
;
gProvider
.
results
=
[
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
suggestion
:
newSuggestion
engine
:
Services
.
search
.
defaultEngine
.
name
}
)
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
{
url
:
bookmarkUrl
}
)
]
;
let
queryResolver
=
Promise
.
withResolvers
(
)
;
gProvider
.
finishQueryPromise
=
queryResolver
.
promise
;
let
lastRowPromise
=
promiseLastRowAppended
(
row
=
>
row
.
result
.
payload
.
url
=
=
bookmarkUrl
)
;
info
(
"
Starting
second
query
"
)
;
let
queryPromise
=
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
2
"
reopenOnBlur
:
false
}
)
;
info
(
"
Waiting
for
last
row
"
)
;
let
lastRow
=
await
lastRowPromise
;
info
(
"
Done
waiting
for
last
row
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
lastRow
)
"
The
new
bookmark
row
should
be
visible
since
the
view
is
not
full
"
)
;
let
rows
=
UrlbarTestUtils
.
getResultsContainer
(
window
)
;
let
newSuggestionRow
=
[
.
.
.
rows
.
children
]
.
find
(
r
=
>
r
.
result
.
payload
.
suggestion
=
=
newSuggestion
)
;
if
(
showExposureResults
)
{
Assert
.
ok
(
newSuggestionRow
"
The
new
suggestion
row
should
have
been
added
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
newSuggestionRow
)
"
The
new
suggestion
row
should
be
visible
"
)
;
}
else
{
Assert
.
ok
(
!
newSuggestionRow
"
The
new
suggestion
row
should
not
have
been
added
"
)
;
}
if
(
!
cancelSecondQuery
)
{
queryResolver
.
resolve
(
)
;
await
queryPromise
;
}
info
(
"
Closing
view
and
blurring
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
gURLBar
.
blur
(
)
;
assertExposureTelemetry
(
[
{
results
:
"
search_suggest
"
terminal
:
"
true
"
}
]
)
;
queryResolver
.
resolve
(
)
;
await
queryPromise
;
await
SpecialPowers
.
popPrefEnv
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
gProvider
.
finishQueryPromise
=
null
;
}
add_task
(
async
function
exposure_replace
(
)
{
for
(
let
showExposureResults
of
[
true
false
]
)
{
for
(
let
cancelSecondQuery
of
[
true
false
]
)
{
await
do_exposure_replace
(
{
showExposureResults
cancelSecondQuery
}
)
;
}
}
}
)
;
async
function
do_exposure_replace
(
{
showExposureResults
cancelSecondQuery
}
)
{
info
(
"
Starting
do_exposure_replace
:
"
+
JSON
.
stringify
(
{
showExposureResults
cancelSecondQuery
}
)
)
;
gProvider
.
results
=
[
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
suggestion
:
"
suggestion
"
engine
:
Services
.
search
.
defaultEngine
.
name
}
)
]
;
info
(
"
Doing
first
query
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
1
"
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
exposureResults
"
"
search_suggest
"
]
[
"
browser
.
urlbar
.
showExposureResults
"
showExposureResults
]
]
}
)
;
let
newSuggestion
=
"
new
suggestion
"
;
let
bookmarkUrl
=
"
https
:
/
/
example
.
com
/
bookmark
"
;
gProvider
.
results
=
[
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
suggestion
:
newSuggestion
engine
:
Services
.
search
.
defaultEngine
.
name
}
)
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
{
url
:
bookmarkUrl
}
)
]
;
let
queryResolver
=
Promise
.
withResolvers
(
)
;
gProvider
.
finishQueryPromise
=
queryResolver
.
promise
;
let
lastRowPromise
=
promiseLastRowAppended
(
row
=
>
row
.
result
.
payload
.
url
=
=
bookmarkUrl
)
;
info
(
"
Starting
second
query
"
)
;
let
queryPromise
=
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
2
"
reopenOnBlur
:
false
}
)
;
info
(
"
Waiting
for
last
row
"
)
;
let
lastRow
=
await
lastRowPromise
;
info
(
"
Done
waiting
for
last
row
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
lastRow
)
"
The
new
bookmark
row
should
be
visible
since
the
view
is
not
full
"
)
;
let
rows
=
UrlbarTestUtils
.
getResultsContainer
(
window
)
;
let
newSuggestionRow
=
[
.
.
.
rows
.
children
]
.
find
(
r
=
>
r
.
result
.
payload
.
suggestion
=
=
newSuggestion
)
;
if
(
showExposureResults
)
{
Assert
.
ok
(
newSuggestionRow
"
The
new
suggestion
row
should
have
replaced
the
old
one
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
newSuggestionRow
)
"
The
new
suggestion
row
should
be
visible
"
)
;
}
else
{
Assert
.
ok
(
!
newSuggestionRow
"
The
new
suggestion
row
should
not
have
been
added
"
)
;
}
if
(
!
cancelSecondQuery
)
{
queryResolver
.
resolve
(
)
;
await
queryPromise
;
}
info
(
"
Closing
view
and
blurring
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
gURLBar
.
blur
(
)
;
assertExposureTelemetry
(
[
{
results
:
"
search_suggest
"
terminal
:
"
true
"
}
]
)
;
queryResolver
.
resolve
(
)
;
await
queryPromise
;
await
SpecialPowers
.
popPrefEnv
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
gProvider
.
finishQueryPromise
=
null
;
}
add_task
(
async
function
exposure_append_full
(
)
{
for
(
let
showExposureResults
of
[
true
false
]
)
{
await
do_exposure_append_full
(
showExposureResults
)
;
}
}
)
;
async
function
do_exposure_append_full
(
showExposureResults
)
{
info
(
"
Starting
do_exposure_append_full
:
"
+
JSON
.
stringify
(
{
showExposureResults
}
)
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
exposureResults
"
"
history
"
]
[
"
browser
.
urlbar
.
showExposureResults
"
showExposureResults
]
]
}
)
;
gProvider
.
results
=
[
]
;
for
(
let
i
=
0
;
i
<
MAX_RESULT_COUNT
;
i
+
+
)
{
gProvider
.
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
suggestion
:
"
suggestion
"
+
i
engine
:
Services
.
search
.
defaultEngine
.
name
}
)
)
;
}
info
(
"
Doing
first
query
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
1
"
}
)
;
let
historyUrl
=
"
https
:
/
/
example
.
com
/
history
"
;
let
bookmarkUrl
=
"
https
:
/
/
example
.
com
/
bookmark
"
;
gProvider
.
results
=
[
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
{
url
:
historyUrl
}
)
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
{
url
:
bookmarkUrl
}
)
]
;
let
queryResolver
=
Promise
.
withResolvers
(
)
;
gProvider
.
finishQueryPromise
=
queryResolver
.
promise
;
let
lastRowPromise
=
promiseLastRowAppended
(
row
=
>
row
.
result
.
payload
.
url
=
=
bookmarkUrl
)
;
info
(
"
Starting
second
query
"
)
;
let
queryPromise
=
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
2
"
reopenOnBlur
:
false
}
)
;
info
(
"
Waiting
for
last
row
"
)
;
let
lastRow
=
await
lastRowPromise
;
info
(
"
Done
waiting
for
last
row
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
isHidden
(
lastRow
)
"
The
new
bookmark
row
should
be
hidden
since
the
view
is
full
"
)
;
let
expected
=
[
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
url
:
bookmarkUrl
}
]
;
if
(
showExposureResults
)
{
expected
.
unshift
(
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
url
:
historyUrl
}
)
;
}
let
rows
=
UrlbarTestUtils
.
getResultsContainer
(
window
)
;
Assert
.
equal
(
rows
.
children
.
length
MAX_RESULT_COUNT
+
expected
.
length
"
The
view
has
the
expected
number
of
rows
"
)
;
for
(
let
i
=
0
;
i
<
MAX_RESULT_COUNT
;
i
+
+
)
{
let
row
=
rows
.
children
[
i
]
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
row
)
rows
[
{
i
}
]
should
be
visible
)
;
Assert
.
ok
(
row
.
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
rows
[
{
i
}
]
.
result
.
type
should
be
SEARCH
)
;
if
(
i
>
0
)
{
Assert
.
ok
(
row
.
result
.
payload
.
suggestion
rows
[
{
i
}
]
should
have
a
suggestion
)
;
}
}
for
(
let
i
=
0
;
i
<
expected
.
length
;
i
+
+
)
{
let
{
source
type
url
}
=
expected
[
i
]
;
let
row
=
rows
.
children
[
MAX_RESULT_COUNT
+
i
]
;
Assert
.
ok
(
row
rows
[
{
i
}
]
should
exist
)
;
Assert
.
ok
(
BrowserTestUtils
.
isHidden
(
row
)
rows
[
{
i
}
]
should
be
hidden
)
;
Assert
.
equal
(
row
.
result
.
type
type
rows
[
{
i
}
]
.
result
.
type
should
be
as
expected
)
;
Assert
.
equal
(
row
.
result
.
source
source
rows
[
{
i
}
]
.
result
.
source
should
be
as
expected
)
;
Assert
.
equal
(
row
.
result
.
payload
.
url
url
rows
[
{
i
}
]
URL
should
be
as
expected
)
;
}
queryResolver
.
resolve
(
)
;
info
(
"
Waiting
for
second
query
to
finish
"
)
;
await
queryPromise
;
info
(
"
Second
query
finished
"
)
;
rows
=
UrlbarTestUtils
.
getResultsContainer
(
window
)
;
Assert
.
equal
(
rows
.
children
.
length
1
+
expected
.
length
"
The
view
has
the
expected
number
of
rows
"
)
;
for
(
let
i
=
0
;
i
<
expected
.
length
;
i
+
+
)
{
let
{
source
type
url
}
=
expected
[
i
]
;
let
index
=
i
+
1
;
let
row
=
rows
.
children
[
index
]
;
Assert
.
ok
(
row
rows
[
{
index
}
]
should
exist
)
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
row
)
rows
[
{
index
}
]
should
be
visible
)
;
Assert
.
equal
(
row
.
result
.
type
type
rows
[
{
index
}
]
.
result
.
type
should
be
as
expected
)
;
Assert
.
equal
(
row
.
result
.
source
source
rows
[
{
index
}
]
.
result
.
source
should
be
as
expected
)
;
Assert
.
equal
(
row
.
result
.
payload
.
url
url
rows
[
{
index
}
]
URL
should
be
as
expected
)
;
}
info
(
"
Closing
view
and
blurring
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
gURLBar
.
blur
(
)
;
assertExposureTelemetry
(
[
{
results
:
"
history
"
terminal
:
"
true
"
}
]
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
gProvider
.
finishQueryPromise
=
null
;
}
add_task
(
async
function
exposure_append_full_twice
(
)
{
for
(
let
showExposureResults
of
[
true
false
]
)
{
await
do_exposure_append_full_twice
(
showExposureResults
)
;
}
}
)
;
async
function
do_exposure_append_full_twice
(
showExposureResults
)
{
info
(
"
Starting
do_exposure_append_full_twice
:
"
+
JSON
.
stringify
(
{
showExposureResults
}
)
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
exposureResults
"
"
history
tab
"
]
[
"
browser
.
urlbar
.
showExposureResults
"
showExposureResults
]
]
}
)
;
gProvider
.
results
=
[
]
;
for
(
let
i
=
0
;
i
<
MAX_RESULT_COUNT
;
i
+
+
)
{
gProvider
.
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
suggestion
:
"
suggestion
"
+
i
engine
:
Services
.
search
.
defaultEngine
.
name
}
)
)
;
}
info
(
"
Doing
first
query
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
1
"
}
)
;
let
historyUrl
=
"
https
:
/
/
example
.
com
/
history
"
;
let
tabUrl
=
"
https
:
/
/
example
.
com
/
tab
"
;
let
bookmarkUrl
=
"
https
:
/
/
example
.
com
/
bookmark
"
;
gProvider
.
results
=
[
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
{
url
:
historyUrl
}
)
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
UrlbarUtils
.
RESULT_SOURCE
.
TABS
{
url
:
tabUrl
}
)
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
{
url
:
bookmarkUrl
}
)
]
;
let
secondQueryResolver
=
Promise
.
withResolvers
(
)
;
gProvider
.
finishQueryPromise
=
secondQueryResolver
.
promise
;
let
lastRowPromise
=
promiseLastRowAppended
(
row
=
>
row
.
result
.
payload
.
url
=
=
bookmarkUrl
)
;
info
(
"
Starting
second
query
"
)
;
let
secondQueryPromise
=
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
2
"
reopenOnBlur
:
false
}
)
;
info
(
"
Waiting
for
last
row
"
)
;
let
lastRow
=
await
lastRowPromise
;
info
(
"
Done
waiting
for
last
row
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
isHidden
(
lastRow
)
"
The
new
bookmark
row
should
be
hidden
since
the
view
is
full
"
)
;
let
expected
=
[
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
url
:
bookmarkUrl
}
]
;
if
(
showExposureResults
)
{
expected
.
unshift
(
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
url
:
historyUrl
}
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
TABS
type
:
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
url
:
tabUrl
}
)
;
}
let
rows
=
UrlbarTestUtils
.
getResultsContainer
(
window
)
;
Assert
.
equal
(
rows
.
children
.
length
MAX_RESULT_COUNT
+
expected
.
length
"
The
view
has
the
expected
number
of
rows
"
)
;
for
(
let
i
=
0
;
i
<
MAX_RESULT_COUNT
;
i
+
+
)
{
let
row
=
rows
.
children
[
i
]
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
row
)
rows
[
{
i
}
]
should
be
visible
)
;
Assert
.
ok
(
row
.
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
rows
[
{
i
}
]
.
result
.
type
should
be
SEARCH
)
;
if
(
i
>
0
)
{
Assert
.
ok
(
row
.
result
.
payload
.
suggestion
rows
[
{
i
}
]
should
have
a
suggestion
)
;
}
}
for
(
let
i
=
0
;
i
<
expected
.
length
;
i
+
+
)
{
let
{
source
type
url
}
=
expected
[
i
]
;
let
row
=
rows
.
children
[
MAX_RESULT_COUNT
+
i
]
;
Assert
.
ok
(
row
rows
[
{
i
}
]
should
exist
)
;
Assert
.
ok
(
BrowserTestUtils
.
isHidden
(
row
)
rows
[
{
i
}
]
should
be
hidden
)
;
Assert
.
equal
(
row
.
result
.
type
type
rows
[
{
i
}
]
.
result
.
type
should
be
as
expected
)
;
Assert
.
equal
(
row
.
result
.
source
source
rows
[
{
i
}
]
.
result
.
source
should
be
as
expected
)
;
Assert
.
equal
(
row
.
result
.
payload
.
url
url
rows
[
{
i
}
]
URL
should
be
as
expected
)
;
}
gProvider
.
results
=
[
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
{
url
:
historyUrl
}
)
]
;
let
thirdQueryStartedPromise
=
new
Promise
(
resolve
=
>
{
let
queryListener
=
{
onQueryStarted
:
(
)
=
>
{
gURLBar
.
controller
.
removeListener
(
queryListener
)
;
resolve
(
)
;
}
}
;
gURLBar
.
controller
.
addListener
(
queryListener
)
;
}
)
;
info
(
"
Starting
third
query
"
)
;
let
thirdQueryPromise
=
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
"
test
3
"
reopenOnBlur
:
false
}
)
;
info
(
"
Waiting
for
third
query
to
start
"
)
;
await
thirdQueryStartedPromise
;
info
(
"
Resolving
provider
'
s
finishQueryPromise
"
)
;
secondQueryResolver
.
resolve
(
)
;
info
(
"
Waiting
for
third
query
to
finish
"
)
;
await
thirdQueryPromise
;
expected
=
[
]
;
if
(
showExposureResults
)
{
expected
.
unshift
(
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
type
:
UrlbarUtils
.
RESULT_TYPE
.
URL
url
:
historyUrl
}
)
;
}
rows
=
UrlbarTestUtils
.
getResultsContainer
(
window
)
;
Assert
.
equal
(
rows
.
children
.
length
1
+
expected
.
length
"
The
view
has
the
expected
number
of
rows
"
)
;
for
(
let
i
=
0
;
i
<
expected
.
length
;
i
+
+
)
{
let
{
source
type
url
}
=
expected
[
i
]
;
let
index
=
i
+
1
;
let
row
=
rows
.
children
[
index
]
;
Assert
.
ok
(
row
rows
[
{
index
}
]
should
exist
)
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
row
)
rows
[
{
index
}
]
should
be
visible
)
;
Assert
.
equal
(
row
.
result
.
type
type
rows
[
{
index
}
]
.
result
.
type
should
be
as
expected
)
;
Assert
.
equal
(
row
.
result
.
source
source
rows
[
{
index
}
]
.
result
.
source
should
be
as
expected
)
;
Assert
.
equal
(
row
.
result
.
payload
.
url
url
rows
[
{
index
}
]
URL
should
be
as
expected
)
;
}
info
(
"
Closing
view
and
blurring
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
gURLBar
.
blur
(
)
;
assertExposureTelemetry
(
[
{
results
:
"
history
"
terminal
:
"
true
"
}
]
)
;
await
secondQueryPromise
;
await
SpecialPowers
.
popPrefEnv
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
gProvider
.
finishQueryPromise
=
null
;
}
class
TestProvider
extends
UrlbarTestUtils
.
TestProvider
{
finishQueryPromise
=
null
;
async
startQuery
(
context
addCallback
)
{
for
(
let
result
of
this
.
results
)
{
addCallback
(
this
result
)
;
}
await
this
.
finishQueryPromise
;
}
}
function
promiseLastRowAppended
(
predicate
)
{
return
new
Promise
(
resolve
=
>
{
let
rows
=
UrlbarTestUtils
.
getResultsContainer
(
window
)
;
let
observer
=
new
MutationObserver
(
(
)
=
>
{
let
lastRow
=
rows
.
children
[
rows
.
children
.
length
-
1
]
;
info
(
"
Observed
mutation
lastRow
.
result
is
:
"
+
JSON
.
stringify
(
lastRow
.
result
)
)
;
if
(
predicate
(
lastRow
)
)
{
observer
.
disconnect
(
)
;
resolve
(
lastRow
)
;
}
}
)
;
observer
.
observe
(
rows
{
childList
:
true
}
)
;
}
)
;
}
