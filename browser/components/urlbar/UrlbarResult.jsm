"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarResult
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
class
UrlbarResult
{
constructor
(
resultType
matchSource
payload
payloadHighlights
=
{
}
)
{
if
(
!
Object
.
values
(
UrlbarUtils
.
RESULT_TYPE
)
.
includes
(
resultType
)
)
{
throw
new
Error
(
"
Invalid
result
type
"
)
;
}
this
.
type
=
resultType
;
if
(
!
Object
.
values
(
UrlbarUtils
.
MATCH_SOURCE
)
.
includes
(
matchSource
)
)
{
throw
new
Error
(
"
Invalid
match
source
"
)
;
}
this
.
source
=
matchSource
;
if
(
!
payload
|
|
(
typeof
payload
!
=
"
object
"
)
)
{
throw
new
Error
(
"
Invalid
result
payload
"
)
;
}
this
.
payload
=
payload
;
if
(
!
payloadHighlights
|
|
(
typeof
payloadHighlights
!
=
"
object
"
)
)
{
throw
new
Error
(
"
Invalid
result
payload
highlights
"
)
;
}
this
.
payloadHighlights
=
payloadHighlights
;
for
(
let
name
in
payload
)
{
if
(
!
(
name
in
this
.
payloadHighlights
)
)
{
this
.
payloadHighlights
[
name
]
=
[
]
;
}
}
}
get
title
(
)
{
return
this
.
_titleAndHighlights
[
0
]
;
}
get
titleHighlights
(
)
{
return
this
.
_titleAndHighlights
[
1
]
;
}
get
_titleAndHighlights
(
)
{
switch
(
this
.
type
)
{
case
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
:
case
UrlbarUtils
.
RESULT_TYPE
.
URL
:
case
UrlbarUtils
.
RESULT_TYPE
.
OMNIBOX
:
case
UrlbarUtils
.
RESULT_TYPE
.
REMOTE_TAB
:
return
this
.
payload
.
title
?
[
this
.
payload
.
title
this
.
payloadHighlights
.
title
]
:
[
this
.
payload
.
url
|
|
"
"
this
.
payloadHighlights
.
url
|
|
[
]
]
;
case
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
:
return
this
.
payload
.
suggestion
?
[
this
.
payload
.
suggestion
this
.
payloadHighlights
.
suggestion
]
:
[
this
.
payload
.
query
this
.
payloadHighlights
.
query
]
;
default
:
return
[
"
"
[
]
]
;
}
}
get
icon
(
)
{
return
this
.
payload
.
icon
;
}
static
payloadAndSimpleHighlights
(
tokens
payloadInfo
)
{
let
entries
=
Object
.
entries
(
payloadInfo
)
;
return
[
entries
.
reduce
(
(
payload
[
name
[
val
_
]
]
)
=
>
{
payload
[
name
]
=
val
;
return
payload
;
}
{
}
)
entries
.
reduce
(
(
highlights
[
name
[
val
shouldHighlight
]
]
)
=
>
{
if
(
shouldHighlight
)
{
highlights
[
name
]
=
!
Array
.
isArray
(
val
)
?
UrlbarUtils
.
getTokenMatches
(
tokens
val
|
|
"
"
)
:
val
.
map
(
subval
=
>
UrlbarUtils
.
getTokenMatches
(
tokens
subval
)
)
;
}
return
highlights
;
}
{
}
)
]
;
}
}
