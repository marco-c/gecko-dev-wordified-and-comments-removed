"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderPrivateSearch
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
SkippableTimer
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
separatePrivateDefaultUIEnabled
"
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
separatePrivateDefault
"
"
browser
.
search
.
separatePrivateDefault
"
false
)
;
class
ProviderPrivateSearch
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
this
.
openTabs
=
new
Map
(
)
;
this
.
queries
=
new
Map
(
)
;
}
get
name
(
)
{
return
"
PrivateSearch
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
;
}
isActive
(
queryContext
)
{
return
(
separatePrivateDefaultUIEnabled
&
&
!
queryContext
.
isPrivate
&
&
queryContext
.
tokens
.
length
)
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
searchString
=
queryContext
.
searchString
.
trim
(
)
;
if
(
queryContext
.
tokens
.
some
(
t
=
>
t
.
type
=
=
UrlbarTokenizer
.
TYPE
.
RESTRICT_SEARCH
)
)
{
if
(
queryContext
.
tokens
.
length
=
=
1
)
{
return
;
}
searchString
=
queryContext
.
tokens
.
filter
(
t
=
>
t
.
type
!
=
UrlbarTokenizer
.
TYPE
.
RESTRICT_SEARCH
)
.
map
(
t
=
>
t
.
value
)
.
join
(
"
"
)
;
}
let
instance
=
{
}
;
this
.
queries
.
set
(
queryContext
instance
)
;
let
engine
=
queryContext
.
engineName
?
Services
.
search
.
getEngineByName
(
queryContext
.
engineName
)
:
await
Services
.
search
.
getDefaultPrivate
(
)
;
let
isPrivateEngine
=
separatePrivateDefault
&
&
engine
!
=
(
await
Services
.
search
.
getDefault
(
)
)
;
this
.
logger
.
info
(
isPrivateEngine
:
{
isPrivateEngine
}
)
;
await
new
SkippableTimer
(
{
name
:
"
ProviderPrivateSearch
"
time
:
100
logger
:
this
.
logger
}
)
.
promise
;
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
engine
:
[
engine
.
name
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
query
:
[
searchString
UrlbarUtils
.
HIGHLIGHT
.
NONE
]
icon
:
[
engine
.
iconURI
?
engine
.
iconURI
.
spec
:
null
]
inPrivateWindow
:
true
isPrivateEngine
}
)
)
;
result
.
suggestedIndex
=
1
;
addCallback
(
this
result
)
;
this
.
queries
.
delete
(
queryContext
)
;
}
cancelQuery
(
queryContext
)
{
this
.
queries
.
delete
(
queryContext
)
;
}
}
var
UrlbarProviderPrivateSearch
=
new
ProviderPrivateSearch
(
)
;
