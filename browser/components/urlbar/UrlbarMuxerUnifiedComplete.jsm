"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarMuxerUnifiedComplete
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProviderTabToSearch
:
"
resource
:
/
/
/
modules
/
UrlbarProviderTabToSearch
.
jsm
"
UrlbarMuxer
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
UrlbarUtils
.
getLogger
(
{
prefix
:
"
MuxerUnifiedComplete
"
}
)
)
;
class
MuxerUnifiedComplete
extends
UrlbarMuxer
{
constructor
(
)
{
super
(
)
;
}
get
name
(
)
{
return
"
UnifiedComplete
"
;
}
sort
(
context
)
{
let
state
=
{
context
resultsByGroup
:
new
Map
(
)
availableResultSpan
:
context
.
maxResults
usedResultSpan
:
0
strippedUrlToTopPrefixAndTitle
:
new
Map
(
)
urlToTabResultType
:
new
Map
(
)
addedRemoteTabUrls
:
new
Set
(
)
canShowPrivateSearch
:
context
.
results
.
length
>
1
canShowTailSuggestions
:
true
suggestions
:
new
Set
(
)
canAddTabToSearch
:
true
hasUnitConversionResult
:
false
}
;
for
(
let
result
of
context
.
results
)
{
if
(
result
.
providerName
=
=
"
UrlbarProviderQuickSuggest
"
)
{
state
.
quickSuggestResult
=
result
;
this
.
_updateStatePreAdd
(
result
state
)
;
continue
;
}
let
group
=
UrlbarUtils
.
getResultGroup
(
result
)
;
let
results
=
state
.
resultsByGroup
.
get
(
group
)
;
if
(
!
results
)
{
results
=
[
]
;
state
.
resultsByGroup
.
set
(
group
results
)
;
}
results
.
push
(
result
)
;
this
.
_updateStatePreAdd
(
result
state
)
;
}
let
suggestedIndexResults
=
state
.
resultsByGroup
.
get
(
UrlbarUtils
.
RESULT_GROUP
.
SUGGESTED_INDEX
)
;
if
(
suggestedIndexResults
)
{
let
span
=
suggestedIndexResults
.
reduce
(
(
sum
result
)
=
>
{
if
(
this
.
_canAddResult
(
result
state
)
)
{
sum
+
=
UrlbarUtils
.
getSpanForResult
(
result
)
;
}
return
sum
;
}
0
)
;
state
.
availableResultSpan
=
Math
.
max
(
state
.
availableResultSpan
-
span
0
)
;
}
let
rootBucket
=
context
.
searchMode
?
.
engineName
?
UrlbarPrefs
.
makeResultBuckets
(
{
showSearchSuggestionsFirst
:
true
}
)
:
UrlbarPrefs
.
get
(
"
resultGroups
"
)
;
logger
.
debug
(
Buckets
:
{
rootBucket
}
)
;
let
[
sortedResults
]
=
this
.
_fillGroup
(
rootBucket
{
availableSpan
:
state
.
availableResultSpan
maxResultCount
:
Infinity
}
state
)
;
this
.
_addSuggestedIndexResults
(
sortedResults
state
)
;
context
.
results
=
sortedResults
;
}
_copyState
(
state
)
{
let
copy
=
Object
.
assign
(
{
}
state
{
resultsByGroup
:
new
Map
(
)
strippedUrlToTopPrefixAndTitle
:
new
Map
(
state
.
strippedUrlToTopPrefixAndTitle
)
urlToTabResultType
:
new
Map
(
state
.
urlToTabResultType
)
addedRemoteTabUrls
:
new
Set
(
state
.
addedRemoteTabUrls
)
suggestions
:
new
Set
(
state
.
suggestions
)
}
)
;
for
(
let
[
group
results
]
of
state
.
resultsByGroup
)
{
copy
.
resultsByGroup
.
set
(
group
[
.
.
.
results
]
)
;
}
return
copy
;
}
_fillGroup
(
group
limits
state
flexDataArray
=
null
)
{
if
(
!
group
.
children
)
{
return
this
.
_addResults
(
group
.
group
limits
state
)
;
}
let
stateCopy
;
if
(
group
.
flexChildren
)
{
stateCopy
=
this
.
_copyState
(
state
)
;
flexDataArray
=
this
.
_updateFlexData
(
group
limits
flexDataArray
)
;
}
let
results
=
[
]
;
let
usedLimits
=
{
}
;
for
(
let
key
of
Object
.
keys
(
limits
)
)
{
usedLimits
[
key
]
=
0
;
}
let
anyChildUnderfilled
=
false
;
let
anyChildHasMoreResults
=
false
;
for
(
let
i
=
0
;
i
<
group
.
children
.
length
;
i
+
+
)
{
let
child
=
group
.
children
[
i
]
;
let
flexData
=
flexDataArray
?
.
[
i
]
;
let
childLimits
=
{
}
;
for
(
let
key
of
Object
.
keys
(
limits
)
)
{
childLimits
[
key
]
=
flexData
?
flexData
.
limits
[
key
]
:
Math
.
min
(
typeof
child
[
key
]
=
=
"
number
"
?
child
[
key
]
:
Infinity
limits
[
key
]
-
usedLimits
[
key
]
)
;
}
let
[
childResults
childUsedLimits
childHasMoreResults
]
=
this
.
_fillGroup
(
child
childLimits
state
)
;
results
=
results
.
concat
(
childResults
)
;
for
(
let
key
of
Object
.
keys
(
usedLimits
)
)
{
usedLimits
[
key
]
+
=
childUsedLimits
[
key
]
;
}
anyChildHasMoreResults
=
anyChildHasMoreResults
|
|
childHasMoreResults
;
if
(
flexData
?
.
hasMoreResults
)
{
flexData
.
usedLimits
=
childUsedLimits
;
flexData
.
hasMoreResults
=
childHasMoreResults
;
anyChildUnderfilled
=
anyChildUnderfilled
|
|
(
!
childHasMoreResults
&
&
[
.
.
.
Object
.
entries
(
childLimits
)
]
.
every
(
(
[
key
limit
]
)
=
>
flexData
.
usedLimits
[
key
]
<
limit
)
)
;
}
}
if
(
anyChildUnderfilled
&
&
anyChildHasMoreResults
)
{
[
results
usedLimits
anyChildHasMoreResults
]
=
this
.
_fillGroup
(
group
limits
stateCopy
flexDataArray
)
;
for
(
let
[
key
value
]
of
Object
.
entries
(
stateCopy
)
)
{
state
[
key
]
=
value
;
}
}
return
[
results
usedLimits
anyChildHasMoreResults
]
;
}
_updateFlexData
(
group
limits
flexDataArray
)
{
flexDataArray
=
flexDataArray
|
|
group
.
children
.
map
(
(
child
index
)
=
>
{
let
data
=
{
index
limits
:
{
}
limitFractions
:
{
}
usedLimits
:
{
}
hasMoreResults
:
true
flex
:
typeof
child
.
flex
=
=
"
number
"
?
child
.
flex
:
0
}
;
for
(
let
key
of
Object
.
keys
(
limits
)
)
{
data
.
limits
[
key
]
=
0
;
data
.
limitFractions
[
key
]
=
0
;
data
.
usedLimits
[
key
]
=
0
;
}
return
data
;
}
)
;
let
fillableDataArray
=
[
]
;
let
fillableFlexSum
=
0
;
for
(
let
data
of
flexDataArray
)
{
if
(
data
.
hasMoreResults
)
{
fillableFlexSum
+
=
data
.
flex
;
fillableDataArray
.
push
(
data
)
;
}
}
for
(
let
[
key
limit
]
of
Object
.
entries
(
limits
)
)
{
let
fillableLimit
=
limit
;
for
(
let
data
of
flexDataArray
)
{
if
(
!
data
.
hasMoreResults
)
{
fillableLimit
-
=
data
.
usedLimits
[
key
]
;
}
}
fillableLimit
=
Math
.
max
(
fillableLimit
0
)
;
let
summedFillableLimit
=
0
;
for
(
let
data
of
fillableDataArray
)
{
let
unroundedLimit
=
fillableLimit
*
(
data
.
flex
/
fillableFlexSum
)
;
data
.
limitFractions
[
key
]
=
unroundedLimit
-
Math
.
floor
(
unroundedLimit
)
;
data
.
limits
[
key
]
=
Math
.
round
(
unroundedLimit
)
;
summedFillableLimit
+
=
data
.
limits
[
key
]
;
}
if
(
summedFillableLimit
!
=
fillableLimit
)
{
let
fractionalDataArray
=
fillableDataArray
.
filter
(
data
=
>
data
.
limitFractions
[
key
]
)
;
let
diff
;
if
(
summedFillableLimit
<
fillableLimit
)
{
diff
=
1
;
fractionalDataArray
.
sort
(
(
a
b
)
=
>
{
let
cmp
=
b
.
limitFractions
[
key
]
-
a
.
limitFractions
[
key
]
;
return
cmp
|
|
a
.
index
-
b
.
index
;
}
)
;
}
else
if
(
fillableLimit
<
summedFillableLimit
)
{
diff
=
-
1
;
fractionalDataArray
.
sort
(
(
a
b
)
=
>
{
let
cmp
=
a
.
limitFractions
[
key
]
-
b
.
limitFractions
[
key
]
;
return
cmp
|
|
b
.
index
-
a
.
index
;
}
)
;
}
while
(
summedFillableLimit
!
=
fillableLimit
)
{
if
(
!
fractionalDataArray
.
length
)
{
Cu
.
reportError
(
"
fractionalDataArray
is
empty
!
"
)
;
break
;
}
let
data
=
flexDataArray
[
fractionalDataArray
.
shift
(
)
.
index
]
;
data
.
limits
[
key
]
+
=
diff
;
summedFillableLimit
+
=
diff
;
}
}
}
return
flexDataArray
;
}
_addResults
(
groupConst
limits
state
)
{
limits
=
{
.
.
.
limits
}
;
let
usedLimits
=
{
}
;
for
(
let
key
of
Object
.
keys
(
limits
)
)
{
usedLimits
[
key
]
=
0
;
}
if
(
groupConst
=
=
UrlbarUtils
.
RESULT_GROUP
.
FORM_HISTORY
&
&
!
UrlbarPrefs
.
get
(
"
maxHistoricalSearchSuggestions
"
)
)
{
limits
.
maxResultCount
=
0
;
}
let
addQuickSuggest
=
state
.
quickSuggestResult
&
&
groupConst
=
=
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
&
&
this
.
_canAddResult
(
state
.
quickSuggestResult
state
)
;
if
(
addQuickSuggest
)
{
let
span
=
UrlbarUtils
.
getSpanForResult
(
state
.
quickSuggestResult
)
;
usedLimits
.
availableSpan
+
=
span
;
usedLimits
.
maxResultCount
+
+
;
state
.
usedResultSpan
+
=
span
;
}
let
addedResults
=
[
]
;
let
groupResults
=
state
.
resultsByGroup
.
get
(
groupConst
)
;
while
(
groupResults
?
.
length
&
&
state
.
usedResultSpan
<
state
.
availableResultSpan
&
&
[
.
.
.
Object
.
entries
(
limits
)
]
.
every
(
(
[
k
limit
]
)
=
>
usedLimits
[
k
]
<
limit
)
)
{
let
result
=
groupResults
[
0
]
;
if
(
this
.
_canAddResult
(
result
state
)
)
{
let
span
=
UrlbarUtils
.
getSpanForResult
(
result
)
;
let
newUsedSpan
=
usedLimits
.
availableSpan
+
span
;
if
(
limits
.
availableSpan
<
newUsedSpan
)
{
break
;
}
addedResults
.
push
(
result
)
;
usedLimits
.
availableSpan
=
newUsedSpan
;
usedLimits
.
maxResultCount
+
+
;
state
.
usedResultSpan
+
=
span
;
this
.
_updateStatePostAdd
(
result
state
)
;
}
groupResults
.
shift
(
)
;
}
if
(
addQuickSuggest
)
{
let
{
quickSuggestResult
}
=
state
;
state
.
quickSuggestResult
=
null
;
let
index
=
UrlbarPrefs
.
get
(
quickSuggestResult
.
payload
.
sponsoredText
?
"
quickSuggestNonSponsoredIndex
"
:
"
quickSuggestSponsoredIndex
"
)
;
if
(
index
<
0
)
{
index
=
Math
.
max
(
index
+
addedResults
.
length
+
1
0
)
;
}
else
{
index
=
Math
.
min
(
index
addedResults
.
length
)
;
}
addedResults
.
splice
(
index
0
quickSuggestResult
)
;
this
.
_updateStatePostAdd
(
quickSuggestResult
state
)
;
}
return
[
addedResults
usedLimits
!
!
groupResults
?
.
length
]
;
}
_canAddResult
(
result
state
)
{
if
(
!
result
.
heuristic
&
&
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
URL
&
&
result
.
payload
.
url
)
{
let
[
strippedUrl
prefix
]
=
UrlbarUtils
.
stripPrefixAndTrim
(
result
.
payload
.
url
{
stripHttp
:
true
stripHttps
:
true
stripWww
:
true
trimEmptyQuery
:
true
}
)
;
let
topPrefixData
=
state
.
strippedUrlToTopPrefixAndTitle
.
get
(
strippedUrl
)
;
if
(
topPrefixData
&
&
(
prefix
!
=
topPrefixData
.
prefix
|
|
result
.
providerName
!
=
topPrefixData
.
providerName
)
)
{
let
prefixRank
=
UrlbarUtils
.
getPrefixRank
(
prefix
)
;
if
(
(
prefixRank
<
topPrefixData
.
rank
&
&
(
prefix
.
endsWith
(
"
www
.
"
)
=
=
topPrefixData
.
prefix
.
endsWith
(
"
www
.
"
)
|
|
result
.
payload
?
.
title
=
=
topPrefixData
.
title
)
)
|
|
(
prefix
=
=
topPrefixData
.
prefix
&
&
result
.
providerName
!
=
topPrefixData
.
providerName
)
)
{
return
false
;
}
}
}
if
(
state
.
context
.
heuristicResult
&
&
state
.
context
.
heuristicResult
.
providerName
=
=
"
Autofill
"
&
&
result
.
providerName
!
=
"
Autofill
"
&
&
state
.
context
.
heuristicResult
.
payload
?
.
url
=
=
result
.
payload
.
url
&
&
state
.
context
.
heuristicResult
.
type
=
=
result
.
type
)
{
return
false
;
}
if
(
!
result
.
heuristic
&
&
result
.
providerName
=
=
"
HeuristicFallback
"
&
&
state
.
context
.
heuristicResult
?
.
providerName
!
=
"
HeuristicFallback
"
)
{
return
false
;
}
if
(
result
.
providerName
=
=
"
TabToSearch
"
)
{
if
(
!
state
.
canAddTabToSearch
)
{
return
false
;
}
if
(
!
result
.
payload
.
satisfiesAutofillThreshold
)
{
if
(
!
state
.
context
.
heuristicResult
|
|
state
.
context
.
heuristicResult
.
type
!
=
UrlbarUtils
.
RESULT_TYPE
.
URL
|
|
!
state
.
context
.
heuristicResult
.
autofill
)
{
return
false
;
}
let
autofillHostname
=
new
URL
(
state
.
context
.
heuristicResult
.
payload
.
url
)
.
hostname
;
let
[
autofillDomain
]
=
UrlbarUtils
.
stripPrefixAndTrim
(
autofillHostname
{
stripWww
:
true
}
)
;
autofillDomain
=
UrlbarUtils
.
stripPublicSuffixFromHost
(
autofillDomain
)
;
if
(
!
autofillDomain
)
{
return
false
;
}
let
[
engineDomain
]
=
UrlbarUtils
.
stripPrefixAndTrim
(
result
.
payload
.
url
{
stripWww
:
true
}
)
;
if
(
!
engineDomain
.
endsWith
(
autofillDomain
)
)
{
return
false
;
}
}
}
if
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
result
.
payload
.
inPrivateWindow
&
&
!
state
.
canShowPrivateSearch
)
{
return
false
;
}
if
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
result
.
payload
.
lowerCaseSuggestion
)
{
let
suggestion
=
result
.
payload
.
lowerCaseSuggestion
.
trim
(
)
;
if
(
!
suggestion
|
|
state
.
suggestions
.
has
(
suggestion
)
)
{
return
false
;
}
}
if
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
result
.
payload
.
tail
&
&
!
state
.
canShowTailSuggestions
)
{
return
false
;
}
if
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
REMOTE_TAB
)
{
if
(
state
.
addedRemoteTabUrls
.
has
(
result
.
payload
.
url
)
)
{
return
false
;
}
let
maybeDupeType
=
state
.
urlToTabResultType
.
get
(
result
.
payload
.
url
)
;
if
(
maybeDupeType
=
=
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
)
{
return
false
;
}
}
if
(
!
result
.
heuristic
&
&
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
URL
&
&
result
.
payload
.
url
&
&
state
.
urlToTabResultType
.
has
(
result
.
payload
.
url
)
)
{
return
false
;
}
if
(
result
.
source
=
=
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
&
&
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
URL
)
{
let
submission
=
Services
.
search
.
parseSubmissionURL
(
result
.
payload
.
url
)
;
if
(
submission
)
{
let
resultQuery
=
submission
.
terms
.
trim
(
)
.
toLocaleLowerCase
(
)
;
if
(
state
.
suggestions
.
has
(
resultQuery
)
)
{
let
[
newSerpURL
]
=
UrlbarUtils
.
getSearchQueryUrl
(
submission
.
engine
submission
.
terms
)
;
if
(
UrlbarSearchUtils
.
serpsAreEquivalent
(
result
.
payload
.
url
newSerpURL
)
)
{
return
false
;
}
}
}
}
if
(
state
.
context
.
searchMode
?
.
engineName
&
&
result
.
payload
.
url
)
{
let
engine
=
Services
.
search
.
getEngineByName
(
state
.
context
.
searchMode
.
engineName
)
;
if
(
engine
)
{
let
searchModeRootDomain
=
UrlbarSearchUtils
.
getRootDomainFromEngine
(
engine
)
;
let
resultUrl
=
new
URL
(
result
.
payload
.
url
)
;
if
(
!
resultUrl
.
hostname
.
includes
(
{
searchModeRootDomain
}
.
)
)
{
return
false
;
}
}
}
if
(
result
.
heuristic
&
&
state
.
usedResultSpan
)
{
return
false
;
}
if
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
result
.
payload
.
engine
=
=
"
Google
"
&
&
result
.
payload
.
suggestion
?
.
startsWith
(
"
=
"
)
&
&
state
.
hasUnitConversionResult
)
{
return
false
;
}
return
true
;
}
_updateStatePreAdd
(
result
state
)
{
if
(
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
URL
|
|
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
KEYWORD
)
&
&
result
.
payload
.
url
)
{
let
[
strippedUrl
prefix
]
=
UrlbarUtils
.
stripPrefixAndTrim
(
result
.
payload
.
url
{
stripHttp
:
true
stripHttps
:
true
stripWww
:
true
trimEmptyQuery
:
true
}
)
;
let
prefixRank
=
UrlbarUtils
.
getPrefixRank
(
prefix
)
;
let
topPrefixData
=
state
.
strippedUrlToTopPrefixAndTitle
.
get
(
strippedUrl
)
;
let
topPrefixRank
=
topPrefixData
?
topPrefixData
.
rank
:
-
1
;
if
(
topPrefixRank
<
prefixRank
)
{
state
.
strippedUrlToTopPrefixAndTitle
.
set
(
strippedUrl
{
prefix
title
:
result
.
payload
.
title
rank
:
prefixRank
providerName
:
result
.
providerName
}
)
;
}
}
if
(
result
.
payload
.
url
&
&
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
|
|
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
REMOTE_TAB
&
&
!
state
.
urlToTabResultType
.
has
(
result
.
payload
.
url
)
)
)
)
{
state
.
urlToTabResultType
.
set
(
result
.
payload
.
url
result
.
type
)
;
}
if
(
state
.
canShowTailSuggestions
&
&
!
result
.
heuristic
&
&
(
result
.
type
!
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
|
|
(
!
result
.
payload
.
inPrivateWindow
&
&
!
result
.
payload
.
tail
)
)
)
{
state
.
canShowTailSuggestions
=
false
;
}
state
.
hasUnitConversionResult
=
state
.
hasUnitConversionResult
|
|
result
.
providerName
=
=
"
UnitConversion
"
;
}
_updateStatePostAdd
(
result
state
)
{
if
(
result
.
heuristic
)
{
state
.
context
.
heuristicResult
=
result
;
if
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
result
.
payload
.
query
)
{
let
query
=
result
.
payload
.
query
.
trim
(
)
.
toLocaleLowerCase
(
)
;
if
(
query
)
{
state
.
suggestions
.
add
(
query
)
;
}
}
}
if
(
state
.
canShowPrivateSearch
&
&
(
result
.
type
!
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
|
|
result
.
payload
.
providesSearchMode
|
|
(
result
.
heuristic
&
&
result
.
payload
.
keyword
)
)
)
{
state
.
canShowPrivateSearch
=
false
;
}
if
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
result
.
payload
.
lowerCaseSuggestion
)
{
let
suggestion
=
result
.
payload
.
lowerCaseSuggestion
.
trim
(
)
;
if
(
suggestion
)
{
state
.
suggestions
.
add
(
suggestion
)
;
}
}
if
(
result
.
providerName
=
=
"
TabToSearch
"
)
{
state
.
canAddTabToSearch
=
false
;
if
(
result
.
payload
.
dynamicType
)
{
UrlbarProviderTabToSearch
.
enginesShown
.
onboarding
.
add
(
result
.
payload
.
engine
)
;
}
else
{
UrlbarProviderTabToSearch
.
enginesShown
.
regular
.
add
(
result
.
payload
.
engine
)
;
}
}
if
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
REMOTE_TAB
)
{
state
.
addedRemoteTabUrls
.
add
(
result
.
payload
.
url
)
;
}
}
_addSuggestedIndexResults
(
sortedResults
state
)
{
let
suggestedIndexResults
=
state
.
resultsByGroup
.
get
(
UrlbarUtils
.
RESULT_GROUP
.
SUGGESTED_INDEX
)
;
if
(
!
suggestedIndexResults
)
{
return
;
}
let
positive
=
[
]
;
let
negative
=
[
]
;
for
(
let
result
of
suggestedIndexResults
)
{
let
results
=
result
.
suggestedIndex
<
0
?
negative
:
positive
;
results
.
push
(
result
)
;
}
positive
.
sort
(
(
a
b
)
=
>
a
.
suggestedIndex
-
b
.
suggestedIndex
)
;
negative
.
sort
(
(
a
b
)
=
>
b
.
suggestedIndex
-
a
.
suggestedIndex
)
;
for
(
let
results
of
[
positive
negative
]
)
{
for
(
let
result
of
results
)
{
this
.
_updateStatePreAdd
(
result
state
)
;
if
(
this
.
_canAddResult
(
result
state
)
)
{
let
index
=
result
.
suggestedIndex
>
=
0
?
Math
.
min
(
result
.
suggestedIndex
sortedResults
.
length
)
:
Math
.
max
(
result
.
suggestedIndex
+
sortedResults
.
length
+
1
0
)
;
sortedResults
.
splice
(
index
0
result
)
;
this
.
_updateStatePostAdd
(
result
state
)
;
}
}
}
}
}
var
UrlbarMuxerUnifiedComplete
=
new
MuxerUnifiedComplete
(
)
;
