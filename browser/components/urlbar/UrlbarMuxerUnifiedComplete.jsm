"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarMuxerUnifiedComplete
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Log
:
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
PlacesSearchAutocompleteProvider
:
"
resource
:
/
/
gre
/
modules
/
PlacesSearchAutocompleteProvider
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarMuxer
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
repository
.
getLogger
(
"
Urlbar
.
Muxer
.
UnifiedComplete
"
)
)
;
function
groupFromResult
(
result
)
{
if
(
result
.
heuristic
)
{
return
UrlbarUtils
.
RESULT_GROUP
.
HEURISTIC
;
}
switch
(
result
.
type
)
{
case
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
:
return
result
.
payload
.
suggestion
?
UrlbarUtils
.
RESULT_GROUP
.
SUGGESTION
:
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
;
case
UrlbarUtils
.
RESULT_TYPE
.
OMNIBOX
:
return
UrlbarUtils
.
RESULT_GROUP
.
EXTENSION
;
default
:
return
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
;
}
}
class
MuxerUnifiedComplete
extends
UrlbarMuxer
{
constructor
(
)
{
super
(
)
;
}
get
name
(
)
{
return
"
UnifiedComplete
"
;
}
sort
(
context
)
{
let
heuristicResultQuery
;
let
heuristicResultOmniboxContent
;
if
(
context
.
heuristicResult
)
{
if
(
context
.
heuristicResult
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
context
.
heuristicResult
.
payload
.
query
)
{
heuristicResultQuery
=
context
.
heuristicResult
.
payload
.
query
.
toLocaleLowerCase
(
)
;
}
else
if
(
context
.
heuristicResult
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
OMNIBOX
&
&
context
.
heuristicResult
.
payload
.
content
)
{
heuristicResultOmniboxContent
=
context
.
heuristicResult
.
payload
.
content
.
toLocaleLowerCase
(
)
;
}
}
let
canShowPrivateSearch
=
context
.
results
.
length
>
1
;
let
canShowTailSuggestions
=
true
;
let
resultsWithSuggestedIndex
=
[
]
;
let
formHistoryResults
=
new
Set
(
)
;
let
formHistorySuggestions
=
new
Set
(
)
;
let
maxFormHistoryCount
=
Math
.
min
(
UrlbarPrefs
.
get
(
"
maxHistoricalSearchSuggestions
"
)
context
.
maxResults
)
;
for
(
let
result
of
context
.
results
)
{
if
(
canShowPrivateSearch
&
&
(
result
.
type
!
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
|
|
result
.
payload
.
keywordOffer
|
|
(
result
.
heuristic
&
&
result
.
payload
.
keyword
)
)
)
{
canShowPrivateSearch
=
false
;
}
if
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
result
.
source
=
=
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
&
&
formHistoryResults
.
size
<
maxFormHistoryCount
&
&
result
.
payload
.
lowerCaseSuggestion
&
&
result
.
payload
.
lowerCaseSuggestion
!
=
heuristicResultQuery
)
{
formHistoryResults
.
add
(
result
)
;
formHistorySuggestions
.
add
(
result
.
payload
.
lowerCaseSuggestion
)
;
}
if
(
canShowTailSuggestions
&
&
!
result
.
heuristic
&
&
(
result
.
type
!
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
|
|
(
!
result
.
payload
.
inPrivateWindow
&
&
!
result
.
payload
.
tail
)
)
)
{
canShowTailSuggestions
=
false
;
}
}
let
unsortedResults
=
[
]
;
for
(
let
result
of
context
.
results
)
{
if
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
result
.
payload
.
inPrivateWindow
&
&
!
canShowPrivateSearch
)
{
continue
;
}
if
(
result
.
suggestedIndex
>
=
0
)
{
resultsWithSuggestedIndex
.
push
(
result
)
;
continue
;
}
if
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
result
.
source
=
=
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
&
&
!
formHistoryResults
.
has
(
result
)
)
{
continue
;
}
if
(
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
&
&
result
.
source
=
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
&
&
result
.
payload
.
lowerCaseSuggestion
&
&
result
.
payload
.
lowerCaseSuggestion
=
=
=
heuristicResultQuery
)
{
continue
;
}
if
(
!
canShowTailSuggestions
&
&
groupFromResult
(
result
)
=
=
UrlbarUtils
.
RESULT_GROUP
.
SUGGESTION
&
&
result
.
payload
.
tail
)
{
continue
;
}
if
(
result
.
source
=
=
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
&
&
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
URL
)
{
let
submission
;
try
{
submission
=
PlacesSearchAutocompleteProvider
.
parseSubmissionURL
(
result
.
payload
.
url
)
;
}
catch
(
error
)
{
}
if
(
submission
)
{
let
resultQuery
=
submission
.
terms
.
toLocaleLowerCase
(
)
;
if
(
heuristicResultQuery
=
=
=
resultQuery
|
|
formHistorySuggestions
.
has
(
resultQuery
)
)
{
let
[
newSerpURL
]
=
UrlbarUtils
.
getSearchQueryUrl
(
submission
.
engine
resultQuery
)
;
if
(
this
.
_serpURLsHaveSameParams
(
newSerpURL
result
.
payload
.
url
)
)
{
continue
;
}
}
}
}
if
(
!
result
.
heuristic
&
&
result
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
OMNIBOX
&
&
result
.
payload
.
content
=
=
heuristicResultOmniboxContent
)
{
continue
;
}
unsortedResults
.
push
(
result
)
;
}
let
buckets
=
context
.
heuristicResult
&
&
context
.
heuristicResult
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
?
UrlbarPrefs
.
get
(
"
matchBucketsSearch
"
)
:
UrlbarPrefs
.
get
(
"
matchBuckets
"
)
;
logger
.
debug
(
Buckets
:
{
buckets
}
)
;
let
sortedResults
=
[
]
;
let
handledResults
=
new
Set
(
)
;
let
count
=
Math
.
min
(
unsortedResults
.
length
context
.
maxResults
)
;
for
(
let
b
=
0
;
handledResults
.
size
<
count
&
&
b
<
buckets
.
length
;
b
+
+
)
{
let
[
group
slotCount
]
=
buckets
[
b
]
;
for
(
let
i
=
0
;
slotCount
&
&
handledResults
.
size
<
count
&
&
i
<
unsortedResults
.
length
;
i
+
+
)
{
let
result
=
unsortedResults
[
i
]
;
if
(
!
handledResults
.
has
(
result
)
&
&
group
=
=
groupFromResult
(
result
)
)
{
sortedResults
.
push
(
result
)
;
handledResults
.
add
(
result
)
;
slotCount
-
-
;
}
}
}
resultsWithSuggestedIndex
.
sort
(
(
a
b
)
=
>
a
.
suggestedIndex
-
b
.
suggestedIndex
)
;
for
(
let
result
of
resultsWithSuggestedIndex
)
{
let
index
=
result
.
suggestedIndex
<
=
sortedResults
.
length
?
result
.
suggestedIndex
:
sortedResults
.
length
;
sortedResults
.
splice
(
index
0
result
)
;
}
context
.
results
=
sortedResults
;
}
_serpURLsHaveSameParams
(
url1
url2
)
{
let
params1
=
new
URL
(
url1
)
.
searchParams
;
let
params2
=
new
URL
(
url2
)
.
searchParams
;
for
(
let
params
of
[
params1
params2
]
)
{
params
.
delete
(
"
client
"
)
;
}
for
(
let
[
p1
p2
]
of
[
[
params1
params2
]
[
params2
params1
]
]
)
{
for
(
let
[
key
value
]
of
p1
)
{
if
(
!
p2
.
getAll
(
key
)
.
includes
(
value
)
)
{
return
false
;
}
}
}
return
true
;
}
}
var
UrlbarMuxerUnifiedComplete
=
new
MuxerUnifiedComplete
(
)
;
