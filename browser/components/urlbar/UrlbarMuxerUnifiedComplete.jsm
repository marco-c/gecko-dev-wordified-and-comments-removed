"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarMuxerUnifiedComplete
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Log
:
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarMuxer
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
repository
.
getLogger
(
"
Urlbar
.
Muxer
.
UnifiedComplete
"
)
)
;
const
RESULT_TYPE_TO_GROUP
=
new
Map
(
[
[
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
]
[
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_GROUP
.
SUGGESTION
]
[
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
]
[
UrlbarUtils
.
RESULT_TYPE
.
KEYWORD
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
]
[
UrlbarUtils
.
RESULT_TYPE
.
OMNIBOX
UrlbarUtils
.
RESULT_GROUP
.
EXTENSION
]
[
UrlbarUtils
.
RESULT_TYPE
.
REMOTE_TAB
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
]
[
UrlbarUtils
.
RESULT_TYPE
.
TIP
UrlbarUtils
.
RESULT_GROUP
.
GENERAL
]
]
)
;
class
MuxerUnifiedComplete
extends
UrlbarMuxer
{
constructor
(
)
{
super
(
)
;
}
get
name
(
)
{
return
"
UnifiedComplete
"
;
}
sort
(
context
)
{
if
(
!
context
.
results
.
length
)
{
return
;
}
let
heuristicMatch
=
context
.
results
.
find
(
r
=
>
r
.
heuristic
)
;
let
buckets
=
context
.
preselected
&
&
heuristicMatch
&
&
heuristicMatch
.
type
=
=
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
?
UrlbarPrefs
.
get
(
"
matchBucketsSearch
"
)
:
UrlbarPrefs
.
get
(
"
matchBuckets
"
)
;
logger
.
debug
(
Buckets
:
{
buckets
}
)
;
let
sortedMatches
=
[
]
;
let
handled
=
new
Set
(
)
;
for
(
let
[
group
count
]
of
buckets
)
{
for
(
let
match
of
context
.
results
)
{
if
(
count
=
=
0
)
{
break
;
}
if
(
handled
.
has
(
match
)
)
{
continue
;
}
if
(
group
=
=
UrlbarUtils
.
RESULT_GROUP
.
HEURISTIC
&
&
match
=
=
heuristicMatch
&
&
context
.
preselected
)
{
sortedMatches
.
unshift
(
match
)
;
handled
.
add
(
match
)
;
context
.
maxResults
-
=
UrlbarUtils
.
getSpanForResult
(
match
)
-
1
;
count
-
-
;
}
else
if
(
group
=
=
RESULT_TYPE_TO_GROUP
.
get
(
match
.
type
)
)
{
sortedMatches
.
push
(
match
)
;
handled
.
add
(
match
)
;
context
.
maxResults
-
=
UrlbarUtils
.
getSpanForResult
(
match
)
-
1
;
count
-
-
;
}
else
if
(
!
RESULT_TYPE_TO_GROUP
.
has
(
match
.
type
)
)
{
let
errorMsg
=
Result
type
{
match
.
type
}
is
not
mapped
to
a
match
group
.
;
logger
.
error
(
errorMsg
)
;
Cu
.
reportError
(
errorMsg
)
;
}
}
}
context
.
results
=
sortedMatches
;
}
}
var
UrlbarMuxerUnifiedComplete
=
new
MuxerUnifiedComplete
(
)
;
