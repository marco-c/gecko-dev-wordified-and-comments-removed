"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderUnitConversion
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
UnitConverterSimple
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UnitConverterSimple
.
jsm
"
)
;
const
{
UnitConverterTemperature
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UnitConverterTemperature
.
jsm
"
)
;
const
{
UnitConverterTimezone
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UnitConverterTimezone
.
jsm
"
)
;
const
{
UrlbarProvider
UrlbarUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarView
:
"
resource
:
/
/
/
modules
/
UrlbarView
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
ClipboardHelper
"
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
"
nsIClipboardHelper
"
)
;
const
CONVERTERS
=
[
new
UnitConverterSimple
(
)
new
UnitConverterTemperature
(
)
new
UnitConverterTimezone
(
)
]
;
const
DYNAMIC_RESULT_TYPE
=
"
unitConversion
"
;
const
VIEW_TEMPLATE
=
{
attributes
:
{
selectable
:
true
}
children
:
[
{
name
:
"
content
"
tag
:
"
span
"
classList
:
[
"
urlbarView
-
no
-
wrap
"
]
children
:
[
{
name
:
"
icon
"
tag
:
"
img
"
classList
:
[
"
urlbarView
-
favicon
"
]
attributes
:
{
src
:
"
chrome
:
/
/
global
/
skin
/
icons
/
edit
-
copy
.
svg
"
}
}
{
name
:
"
output
"
tag
:
"
strong
"
}
{
name
:
"
action
"
tag
:
"
span
"
}
]
}
]
}
;
class
ProviderUnitConversion
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
UrlbarResult
.
addDynamicResultType
(
DYNAMIC_RESULT_TYPE
)
;
UrlbarView
.
addDynamicViewTemplate
(
DYNAMIC_RESULT_TYPE
VIEW_TEMPLATE
)
;
}
get
name
(
)
{
return
"
UnitConversion
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
;
}
isActive
(
{
searchString
}
)
{
if
(
!
UrlbarPrefs
.
get
(
"
unitConversion
.
enabled
"
)
)
{
return
false
;
}
for
(
const
converter
of
CONVERTERS
)
{
const
result
=
converter
.
convert
(
searchString
)
;
if
(
result
)
{
this
.
_activeResult
=
result
;
return
true
;
}
}
this
.
_activeResult
=
null
;
return
false
;
}
getViewUpdate
(
result
)
{
return
{
output
:
{
textContent
:
result
.
payload
.
output
}
action
:
{
l10n
:
{
id
:
"
urlbar
-
result
-
action
-
copy
-
to
-
clipboard
"
}
}
}
;
}
startQuery
(
queryContext
addCallback
)
{
const
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
DYNAMIC
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
dynamicType
:
DYNAMIC_RESULT_TYPE
output
:
this
.
_activeResult
input
:
queryContext
.
searchString
}
)
;
result
.
suggestedIndex
=
UrlbarPrefs
.
get
(
"
unitConversion
.
suggestedIndex
"
)
;
addCallback
(
this
result
)
;
}
pickResult
(
result
element
)
{
const
{
textContent
}
=
element
.
querySelector
(
"
.
urlbarView
-
dynamic
-
unitConversion
-
output
"
)
;
ClipboardHelper
.
copyString
(
textContent
)
;
}
}
const
UrlbarProviderUnitConversion
=
new
ProviderUnitConversion
(
)
;
