"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarSearchUtils
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
SEARCH_ENGINE_TOPIC
=
"
browser
-
search
-
engine
-
modified
"
;
class
SearchUtils
{
constructor
(
)
{
this
.
_refreshEnginesByAliasPromise
=
Promise
.
resolve
(
)
;
this
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
"
nsISupportsWeakReference
"
]
)
;
}
async
init
(
)
{
if
(
!
this
.
_initPromise
)
{
this
.
_initPromise
=
this
.
_initInternal
(
)
;
}
await
this
.
_initPromise
;
}
async
engineForDomainPrefix
(
prefix
)
{
await
this
.
init
(
)
;
for
(
let
engine
of
await
Services
.
search
.
getVisibleEngines
(
)
)
{
let
domain
=
engine
.
getResultDomain
(
)
;
if
(
domain
.
startsWith
(
prefix
)
|
|
domain
.
startsWith
(
"
www
.
"
+
prefix
)
)
{
return
engine
;
}
}
return
null
;
}
async
engineForAlias
(
alias
)
{
await
Promise
.
all
(
[
this
.
init
(
)
this
.
_refreshEnginesByAliasPromise
]
)
;
return
this
.
_enginesByAlias
.
get
(
alias
.
toLocaleLowerCase
(
)
)
|
|
null
;
}
aliasesForEngine
(
engine
)
{
let
aliases
=
[
]
;
if
(
engine
.
alias
)
{
aliases
.
push
(
engine
.
alias
)
;
}
aliases
.
push
(
.
.
.
engine
.
wrappedJSObject
.
_internalAliases
)
;
return
aliases
;
}
async
tokenAliasEngines
(
)
{
await
this
.
init
(
)
;
let
tokenAliasEngines
=
[
]
;
for
(
let
engine
of
await
Services
.
search
.
getVisibleEngines
(
)
)
{
let
tokenAliases
=
this
.
aliasesForEngine
(
engine
)
.
filter
(
a
=
>
a
.
startsWith
(
"
"
)
)
;
if
(
tokenAliases
.
length
)
{
tokenAliasEngines
.
push
(
{
engine
tokenAliases
}
)
;
}
}
return
tokenAliasEngines
;
}
async
_initInternal
(
)
{
await
Services
.
search
.
init
(
)
;
await
this
.
_refreshEnginesByAlias
(
)
;
Services
.
obs
.
addObserver
(
this
SEARCH_ENGINE_TOPIC
true
)
;
}
async
_refreshEnginesByAlias
(
)
{
this
.
_enginesByAlias
=
new
Map
(
)
;
for
(
let
engine
of
await
Services
.
search
.
getVisibleEngines
(
)
)
{
if
(
!
engine
.
hidden
)
{
let
aliases
=
this
.
aliasesForEngine
(
engine
)
;
for
(
let
alias
of
aliases
)
{
this
.
_enginesByAlias
.
set
(
alias
.
toLocaleLowerCase
(
)
engine
)
;
}
}
}
}
observe
(
subject
topic
data
)
{
switch
(
data
)
{
case
"
engine
-
added
"
:
case
"
engine
-
changed
"
:
case
"
engine
-
removed
"
:
case
"
engine
-
default
"
:
this
.
_refreshEnginesByAliasPromise
=
this
.
_refreshEnginesByAlias
(
)
;
break
;
}
}
}
var
UrlbarSearchUtils
=
new
SearchUtils
(
)
;
