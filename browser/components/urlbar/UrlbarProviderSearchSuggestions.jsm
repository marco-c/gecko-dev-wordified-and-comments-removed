"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderSearchSuggestions
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
SearchSuggestionController
:
"
resource
:
/
/
gre
/
modules
/
SearchSuggestionController
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
SkippableTimer
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
jsm
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
function
looksLikeUrl
(
str
ignoreAlphanumericHosts
=
false
)
{
return
(
!
UrlbarTokenizer
.
REGEXP_SPACES
.
test
(
str
)
&
&
(
[
"
/
"
"
"
"
:
"
"
[
"
]
.
some
(
c
=
>
str
.
includes
(
c
)
)
|
|
(
ignoreAlphanumericHosts
?
/
^
(
[
\
[
\
]
A
-
Z0
-
9
-
]
+
\
.
)
{
3
}
[
^
.
]
+
/
i
.
test
(
str
)
:
str
.
includes
(
"
.
"
)
)
)
)
;
}
class
ProviderSearchSuggestions
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
}
get
name
(
)
{
return
"
SearchSuggestions
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
NETWORK
;
}
isActive
(
queryContext
)
{
if
(
!
queryContext
.
sources
.
includes
(
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
|
|
(
queryContext
.
restrictSource
&
&
queryContext
.
restrictSource
!
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
)
{
return
false
;
}
if
(
!
queryContext
.
trimmedSearchString
&
&
!
this
.
_isTokenOrRestrictionPresent
(
queryContext
)
)
{
return
false
;
}
if
(
!
this
.
_allowSuggestions
(
queryContext
)
)
{
return
false
;
}
let
wantsLocalSuggestions
=
UrlbarPrefs
.
get
(
"
maxHistoricalSearchSuggestions
"
)
&
&
(
queryContext
.
trimmedSearchString
|
|
UrlbarPrefs
.
get
(
"
update2
.
emptySearchBehavior
"
)
!
=
0
)
;
return
wantsLocalSuggestions
|
|
this
.
_allowRemoteSuggestions
(
queryContext
)
;
}
_isTokenOrRestrictionPresent
(
queryContext
)
{
return
(
queryContext
.
searchString
.
startsWith
(
"
"
)
|
|
(
queryContext
.
restrictSource
&
&
queryContext
.
restrictSource
=
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
|
|
queryContext
.
tokens
.
some
(
t
=
>
t
.
type
=
=
UrlbarTokenizer
.
TYPE
.
RESTRICT_SEARCH
)
|
|
(
queryContext
.
searchMode
&
&
queryContext
.
sources
.
includes
(
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
)
)
;
}
_allowSuggestions
(
queryContext
)
{
if
(
(
!
UrlbarPrefs
.
get
(
"
suggest
.
searches
"
)
&
&
!
this
.
_isTokenOrRestrictionPresent
(
queryContext
)
)
|
|
!
UrlbarPrefs
.
get
(
"
browser
.
search
.
suggest
.
enabled
"
)
|
|
(
queryContext
.
isPrivate
&
&
!
UrlbarPrefs
.
get
(
"
browser
.
search
.
suggest
.
enabled
.
private
"
)
)
)
{
return
false
;
}
return
true
;
}
_allowRemoteSuggestions
(
queryContext
searchString
=
queryContext
.
searchString
)
{
if
(
queryContext
.
prohibitRemoteResults
)
{
return
false
;
}
if
(
!
searchString
.
trim
(
)
)
{
return
false
;
}
if
(
this
.
_isTokenOrRestrictionPresent
(
queryContext
)
)
{
return
true
;
}
if
(
!
!
this
.
_lastLowResultsSearchSuggestion
&
&
searchString
.
length
>
this
.
_lastLowResultsSearchSuggestion
.
length
&
&
searchString
.
startsWith
(
this
.
_lastLowResultsSearchSuggestion
)
)
{
return
false
;
}
return
queryContext
.
allowRemoteResults
(
searchString
)
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
instance
=
this
.
queryInstance
;
let
aliasEngine
=
await
this
.
_maybeGetAlias
(
queryContext
)
;
if
(
!
aliasEngine
)
{
if
(
queryContext
.
searchString
.
startsWith
(
"
"
)
)
{
return
;
}
}
let
query
=
aliasEngine
?
aliasEngine
.
query
:
UrlbarUtils
.
substringAt
(
queryContext
.
searchString
queryContext
.
tokens
[
0
]
?
.
value
|
|
"
"
)
.
trim
(
)
;
let
leadingRestrictionToken
=
null
;
if
(
UrlbarTokenizer
.
isRestrictionToken
(
queryContext
.
tokens
[
0
]
)
&
&
(
queryContext
.
tokens
.
length
>
1
|
|
queryContext
.
tokens
[
0
]
.
type
=
=
UrlbarTokenizer
.
TYPE
.
RESTRICT_SEARCH
)
)
{
leadingRestrictionToken
=
queryContext
.
tokens
[
0
]
.
value
;
}
if
(
leadingRestrictionToken
=
=
=
UrlbarTokenizer
.
RESTRICT
.
SEARCH
)
{
query
=
UrlbarUtils
.
substringAfter
(
query
leadingRestrictionToken
)
.
trim
(
)
;
}
let
engine
;
if
(
aliasEngine
)
{
engine
=
aliasEngine
.
engine
;
}
else
if
(
queryContext
.
searchMode
?
.
engineName
)
{
engine
=
Services
.
search
.
getEngineByName
(
queryContext
.
searchMode
.
engineName
)
;
}
else
{
engine
=
UrlbarSearchUtils
.
getDefaultEngine
(
queryContext
.
isPrivate
)
;
}
if
(
!
engine
)
{
return
;
}
let
alias
=
(
aliasEngine
&
&
aliasEngine
.
alias
)
|
|
"
"
;
let
results
=
await
this
.
_fetchSearchSuggestions
(
queryContext
engine
query
alias
)
;
if
(
!
results
|
|
instance
!
=
this
.
queryInstance
)
{
return
;
}
for
(
let
result
of
results
)
{
addCallback
(
this
result
)
;
}
}
getPriority
(
queryContext
)
{
return
0
;
}
cancelQuery
(
queryContext
)
{
if
(
this
.
_suggestionsController
)
{
this
.
_suggestionsController
.
stop
(
)
;
this
.
_suggestionsController
=
null
;
}
}
async
_fetchSearchSuggestions
(
queryContext
engine
searchString
alias
)
{
if
(
!
engine
)
{
return
null
;
}
this
.
_suggestionsController
=
new
SearchSuggestionController
(
)
;
this
.
_suggestionsController
.
formHistoryParam
=
queryContext
.
formHistoryName
;
this
.
_suggestionsController
.
maxLocalResults
=
queryContext
.
maxResults
+
1
;
let
allowRemote
=
this
.
_allowRemoteSuggestions
(
queryContext
searchString
)
;
this
.
_suggestionsController
.
maxRemoteResults
=
allowRemote
?
queryContext
.
maxResults
+
1
:
0
;
this
.
_suggestionsFetchCompletePromise
=
this
.
_suggestionsController
.
fetch
(
searchString
queryContext
.
isPrivate
engine
queryContext
.
userContextId
this
.
_isTokenOrRestrictionPresent
(
queryContext
)
false
)
;
let
fetchData
=
await
this
.
_suggestionsFetchCompletePromise
;
if
(
!
fetchData
)
{
return
null
;
}
let
results
=
[
]
;
if
(
UrlbarPrefs
.
get
(
"
maxHistoricalSearchSuggestions
"
)
)
{
for
(
let
entry
of
fetchData
.
local
)
{
results
.
push
(
makeFormHistoryResult
(
queryContext
engine
entry
)
)
;
}
}
if
(
allowRemote
&
&
!
fetchData
.
remote
.
length
&
&
searchString
.
length
>
UrlbarPrefs
.
get
(
"
maxCharsForSearchSuggestions
"
)
)
{
this
.
_lastLowResultsSearchSuggestion
=
searchString
;
}
let
tailTimer
=
new
SkippableTimer
(
{
name
:
"
ProviderSearchSuggestions
"
time
:
100
logger
:
this
.
logger
}
)
;
for
(
let
entry
of
fetchData
.
remote
)
{
if
(
looksLikeUrl
(
entry
.
value
)
)
{
continue
;
}
if
(
entry
.
tail
&
&
entry
.
tailOffsetIndex
<
0
)
{
Cu
.
reportError
(
Error
in
tail
suggestion
parsing
.
Value
:
{
entry
.
value
}
tail
:
{
entry
.
tail
}
.
)
;
continue
;
}
let
tail
=
entry
.
tail
;
let
tailPrefix
=
entry
.
matchPrefix
;
if
(
tail
&
&
!
UrlbarPrefs
.
get
(
"
richSuggestions
.
tail
"
)
)
{
continue
;
}
if
(
!
tail
)
{
await
tailTimer
.
fire
(
)
.
catch
(
Cu
.
reportError
)
;
}
try
{
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
engine
:
[
engine
.
name
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
suggestion
:
[
entry
.
value
UrlbarUtils
.
HIGHLIGHT
.
SUGGESTED
]
lowerCaseSuggestion
:
entry
.
value
.
toLocaleLowerCase
(
)
tailPrefix
tail
:
[
tail
UrlbarUtils
.
HIGHLIGHT
.
SUGGESTED
]
tailOffsetIndex
:
tail
?
entry
.
tailOffsetIndex
:
undefined
keyword
:
[
alias
?
alias
:
undefined
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
query
:
[
searchString
.
trim
(
)
UrlbarUtils
.
HIGHLIGHT
.
NONE
]
icon
:
!
entry
.
value
?
engine
.
iconURI
?
.
spec
:
undefined
}
)
)
)
;
}
catch
(
err
)
{
Cu
.
reportError
(
err
)
;
continue
;
}
}
await
tailTimer
.
promise
;
return
results
;
}
async
_maybeGetAlias
(
queryContext
)
{
if
(
queryContext
.
searchMode
)
{
return
null
;
}
let
possibleAlias
=
queryContext
.
tokens
[
0
]
?
.
value
;
if
(
!
possibleAlias
|
|
possibleAlias
=
=
"
"
)
{
return
null
;
}
let
query
=
UrlbarUtils
.
substringAfter
(
queryContext
.
searchString
possibleAlias
)
;
if
(
!
UrlbarTokenizer
.
REGEXP_SPACES_START
.
test
(
query
)
)
{
return
null
;
}
let
engineMatch
=
await
UrlbarSearchUtils
.
engineForAlias
(
possibleAlias
)
;
if
(
engineMatch
)
{
return
{
engine
:
engineMatch
alias
:
possibleAlias
query
:
query
.
trim
(
)
}
;
}
return
null
;
}
}
function
makeFormHistoryResult
(
queryContext
engine
entry
)
{
return
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
engine
:
engine
.
name
suggestion
:
[
entry
.
value
UrlbarUtils
.
HIGHLIGHT
.
SUGGESTED
]
lowerCaseSuggestion
:
entry
.
value
.
toLocaleLowerCase
(
)
}
)
)
;
}
var
UrlbarProviderSearchSuggestions
=
new
ProviderSearchSuggestions
(
)
;
