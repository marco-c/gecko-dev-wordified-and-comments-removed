"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderSearchSuggestions
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Log
:
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
PlacesSearchAutocompleteProvider
:
"
resource
:
/
/
gre
/
modules
/
PlacesSearchAutocompleteProvider
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
repository
.
getLogger
(
"
Urlbar
.
Provider
.
SearchSuggestions
"
)
)
;
function
looksLikeUrl
(
str
ignoreAlphanumericHosts
=
false
)
{
return
(
!
UrlbarTokenizer
.
REGEXP_SPACES
.
test
(
str
)
&
&
(
[
"
/
"
"
"
"
:
"
"
[
"
]
.
some
(
c
=
>
str
.
includes
(
c
)
)
|
|
(
ignoreAlphanumericHosts
?
/
^
(
[
\
[
\
]
A
-
Z0
-
9
-
]
+
\
.
)
{
3
}
[
^
.
]
+
/
i
.
test
(
str
)
:
str
.
includes
(
"
.
"
)
)
)
)
;
}
function
substringAt
(
sourceStr
targetStr
)
{
let
index
=
sourceStr
.
indexOf
(
targetStr
)
;
return
index
<
0
?
"
"
:
sourceStr
.
substr
(
index
)
;
}
function
substringAfter
(
sourceStr
targetStr
)
{
let
index
=
sourceStr
.
indexOf
(
targetStr
)
;
return
index
<
0
?
"
"
:
sourceStr
.
substr
(
index
+
targetStr
.
length
)
;
}
class
ProviderSearchSuggestions
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
this
.
queries
=
new
Map
(
)
;
}
get
name
(
)
{
return
"
SearchSuggestions
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
NETWORK
;
}
isActive
(
queryContext
)
{
if
(
!
UrlbarPrefs
.
get
(
"
browser
.
search
.
suggest
.
enabled
"
)
|
|
!
UrlbarPrefs
.
get
(
"
suggest
.
searches
"
)
)
{
return
false
;
}
if
(
!
queryContext
.
allowSearchSuggestions
)
{
return
false
;
}
if
(
queryContext
.
isPrivate
&
&
!
UrlbarPrefs
.
get
(
"
browser
.
search
.
suggest
.
enabled
.
private
"
)
)
{
return
false
;
}
if
(
!
queryContext
.
sources
.
includes
(
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
)
{
return
false
;
}
if
(
queryContext
.
restrictSource
&
&
queryContext
.
restrictSource
!
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
{
return
false
;
}
if
(
!
!
this
.
_lastLowResultsSearchSuggestion
&
&
queryContext
.
searchString
.
length
>
this
.
_lastLowResultsSearchSuggestion
.
length
&
&
queryContext
.
searchString
.
startsWith
(
this
.
_lastLowResultsSearchSuggestion
)
)
{
return
false
;
}
if
(
queryContext
.
searchString
.
startsWith
(
"
"
)
)
{
return
true
;
}
if
(
queryContext
.
searchString
.
length
<
2
)
{
return
false
;
}
if
(
queryContext
.
tokens
.
length
=
=
1
&
&
queryContext
.
tokens
[
0
]
.
type
=
=
UrlbarTokenizer
.
TYPE
.
POSSIBLE_ORIGIN
)
{
return
false
;
}
return
!
queryContext
.
tokens
.
some
(
t
=
>
{
return
(
t
.
type
=
=
UrlbarTokenizer
.
TYPE
.
POSSIBLE_URL
|
|
(
t
.
type
=
=
UrlbarTokenizer
.
TYPE
.
POSSIBLE_ORIGIN
&
&
!
UrlbarTokenizer
.
REGEXP_SINGLE_WORD_HOST
.
test
(
t
.
value
)
)
)
;
}
)
;
}
async
startQuery
(
queryContext
addCallback
)
{
logger
.
info
(
Starting
query
for
{
queryContext
.
searchString
}
)
;
let
instance
=
{
}
;
this
.
queries
.
set
(
queryContext
instance
)
;
let
trimmedOriginalSearchString
=
queryContext
.
searchString
.
trim
(
)
;
let
aliasEngine
=
await
this
.
_maybeGetAlias
(
queryContext
)
;
if
(
!
aliasEngine
)
{
if
(
queryContext
.
searchString
.
startsWith
(
"
"
)
)
{
return
;
}
}
let
query
=
aliasEngine
?
aliasEngine
.
query
:
substringAt
(
queryContext
.
searchString
queryContext
.
tokens
[
0
]
.
value
)
;
if
(
!
query
)
{
return
;
}
let
leadingRestrictionToken
=
null
;
if
(
UrlbarTokenizer
.
isRestrictionToken
(
queryContext
.
tokens
[
0
]
)
&
&
(
queryContext
.
tokens
.
length
>
1
|
|
queryContext
.
tokens
[
0
]
.
type
=
=
UrlbarTokenizer
.
TYPE
.
RESTRICT_SEARCH
)
)
{
leadingRestrictionToken
=
queryContext
.
tokens
[
0
]
.
value
;
}
let
emptyQueryTokenAlias
=
aliasEngine
&
&
aliasEngine
.
isTokenAlias
&
&
!
aliasEngine
.
query
;
let
emptySearchRestriction
=
trimmedOriginalSearchString
.
length
<
=
3
&
&
leadingRestrictionToken
=
=
UrlbarTokenizer
.
RESTRICT
.
SEARCH
&
&
/
\
s
*
\
S
?
/
.
test
(
trimmedOriginalSearchString
)
;
if
(
emptySearchRestriction
|
|
emptyQueryTokenAlias
)
{
return
;
}
if
(
leadingRestrictionToken
=
=
=
UrlbarTokenizer
.
RESTRICT
.
SEARCH
)
{
query
=
substringAfter
(
query
leadingRestrictionToken
)
.
trim
(
)
;
}
let
engine
;
if
(
aliasEngine
)
{
engine
=
aliasEngine
.
engine
;
}
else
{
engine
=
queryContext
.
engineName
?
Services
.
search
.
getEngineByName
(
queryContext
.
engineName
)
:
await
PlacesSearchAutocompleteProvider
.
currentEngine
(
queryContext
.
isPrivate
)
;
if
(
!
engine
)
{
return
;
}
}
let
alias
=
(
aliasEngine
&
&
aliasEngine
.
alias
)
|
|
"
"
;
let
results
=
await
this
.
_matchSearchSuggestions
(
queryContext
engine
query
alias
)
;
if
(
!
this
.
queries
.
has
(
queryContext
)
)
{
return
;
}
for
(
let
result
of
results
)
{
addCallback
(
this
result
)
;
}
this
.
queries
.
delete
(
queryContext
)
;
}
getPriority
(
queryContext
)
{
return
0
;
}
cancelQuery
(
queryContext
)
{
logger
.
info
(
Canceling
query
for
{
queryContext
.
searchString
}
)
;
if
(
this
.
_suggestionsFetch
)
{
this
.
_suggestionsFetch
.
stop
(
)
;
this
.
_suggestionsFetch
=
null
;
}
this
.
queries
.
delete
(
queryContext
)
;
}
async
_matchSearchSuggestions
(
queryContext
engine
searchString
alias
)
{
this
.
_suggestionsFetch
=
PlacesSearchAutocompleteProvider
.
newSuggestionsFetch
(
engine
searchString
queryContext
.
isPrivate
UrlbarPrefs
.
get
(
"
maxHistoricalSearchSuggestions
"
)
queryContext
.
maxResults
-
UrlbarPrefs
.
get
(
"
maxHistoricalSearchSuggestions
"
)
queryContext
.
userContextId
)
;
await
this
.
_suggestionsFetch
.
fetchCompletePromise
;
try
{
if
(
!
this
.
_suggestionsFetch
)
{
return
null
;
}
if
(
this
.
_suggestionsFetch
.
resultsCount
>
=
0
&
&
this
.
_suggestionsFetch
.
resultsCount
<
2
)
{
this
.
_lastLowResultsSearchSuggestion
=
searchString
;
}
let
results
=
[
]
;
let
result
;
while
(
(
result
=
this
.
_suggestionsFetch
.
consume
(
)
)
)
{
if
(
!
result
|
|
result
.
suggestion
=
=
searchString
|
|
looksLikeUrl
(
result
.
suggestion
)
)
{
continue
;
}
results
.
push
(
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
engine
:
[
engine
.
name
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
suggestion
:
[
result
.
suggestion
UrlbarUtils
.
HIGHLIGHT
.
SUGGESTED
]
keyword
:
[
alias
?
alias
:
undefined
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
query
:
[
searchString
.
trim
(
)
UrlbarUtils
.
HIGHLIGHT
.
NONE
]
isSearchHistory
:
false
icon
:
[
engine
.
iconURI
&
&
!
result
.
suggestion
?
engine
.
iconURI
.
spec
:
"
"
]
keywordOffer
:
UrlbarUtils
.
KEYWORD_OFFER
.
NONE
}
)
)
)
;
}
return
results
;
}
catch
(
err
)
{
Cu
.
reportError
(
err
)
;
return
null
;
}
}
async
_maybeGetAlias
(
queryContext
)
{
if
(
queryContext
.
restrictSource
&
&
queryContext
.
restrictSource
=
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
&
&
queryContext
.
engineName
&
&
!
queryContext
.
searchString
.
startsWith
(
"
"
)
)
{
return
null
;
}
let
possibleAlias
=
queryContext
.
tokens
[
0
]
?
.
value
.
trim
(
)
;
if
(
!
possibleAlias
|
|
possibleAlias
=
=
"
"
)
{
return
null
;
}
let
engineMatch
=
await
PlacesSearchAutocompleteProvider
.
engineForAlias
(
possibleAlias
)
;
if
(
engineMatch
)
{
return
{
engine
:
engineMatch
alias
:
possibleAlias
query
:
substringAfter
(
queryContext
.
searchString
possibleAlias
)
.
trim
(
)
isTokenAlias
:
possibleAlias
.
startsWith
(
"
"
)
}
;
}
let
engines
=
await
PlacesSearchAutocompleteProvider
.
tokenAliasEngines
(
)
;
if
(
!
engines
|
|
!
engines
.
length
)
{
return
null
;
}
for
(
let
{
engine
tokenAliases
}
of
engines
)
{
if
(
tokenAliases
.
includes
(
possibleAlias
)
)
{
return
{
engine
alias
:
possibleAlias
query
:
substringAfter
(
queryContext
.
searchString
possibleAlias
)
.
trim
(
)
isTokenAlias
:
true
}
;
}
}
return
null
;
}
}
var
UrlbarProviderSearchSuggestions
=
new
ProviderSearchSuggestions
(
)
;
