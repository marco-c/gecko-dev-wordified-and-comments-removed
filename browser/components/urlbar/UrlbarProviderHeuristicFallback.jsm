"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderHeuristicFallback
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
{
UrlbarProvider
UrlbarUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
jsm
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
jsm
"
}
)
;
class
ProviderHeuristicFallback
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
}
get
name
(
)
{
return
"
HeuristicFallback
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
HEURISTIC
;
}
isActive
(
queryContext
)
{
return
true
;
}
getPriority
(
queryContext
)
{
return
0
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
instance
=
this
.
queryInstance
;
let
result
=
this
.
_matchUnknownUrl
(
queryContext
)
;
if
(
result
)
{
addCallback
(
this
result
)
;
let
str
=
queryContext
.
searchString
;
try
{
new
URL
(
str
)
;
}
catch
(
ex
)
{
if
(
lazy
.
UrlbarPrefs
.
get
(
"
keyword
.
enabled
"
)
&
&
(
lazy
.
UrlbarTokenizer
.
looksLikeOrigin
(
str
{
noIp
:
true
noPort
:
true
}
)
|
|
lazy
.
UrlbarTokenizer
.
REGEXP_COMMON_EMAIL
.
test
(
str
)
)
)
{
let
searchResult
=
this
.
_engineSearchResult
(
queryContext
)
;
if
(
instance
!
=
this
.
queryInstance
)
{
return
;
}
addCallback
(
this
searchResult
)
;
}
}
return
;
}
result
=
this
.
_searchModeKeywordResult
(
queryContext
)
;
if
(
result
)
{
addCallback
(
this
result
)
;
return
;
}
result
=
this
.
_engineSearchResult
(
queryContext
)
;
if
(
instance
!
=
this
.
queryInstance
)
{
return
;
}
if
(
result
)
{
result
.
heuristic
=
true
;
addCallback
(
this
result
)
;
}
}
_matchUnknownUrl
(
queryContext
)
{
if
(
queryContext
.
restrictSource
=
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
|
|
lazy
.
UrlbarTokenizer
.
SEARCH_MODE_RESTRICT
.
has
(
queryContext
.
restrictToken
?
.
value
)
|
|
queryContext
.
searchMode
)
{
return
null
;
}
let
unescapedSearchString
=
UrlbarUtils
.
unEscapeURIForUI
(
queryContext
.
searchString
)
;
let
[
prefix
suffix
]
=
UrlbarUtils
.
stripURLPrefix
(
unescapedSearchString
)
;
if
(
!
suffix
&
&
prefix
)
{
return
null
;
}
let
searchUrl
=
queryContext
.
trimmedSearchString
;
if
(
queryContext
.
fixupError
)
{
if
(
queryContext
.
fixupError
=
=
Cr
.
NS_ERROR_MALFORMED_URI
&
&
!
lazy
.
UrlbarPrefs
.
get
(
"
keyword
.
enabled
"
)
)
{
let
result
=
new
lazy
.
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
.
.
.
lazy
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
title
:
[
searchUrl
UrlbarUtils
.
HIGHLIGHT
.
NONE
]
url
:
[
searchUrl
UrlbarUtils
.
HIGHLIGHT
.
NONE
]
}
)
)
;
result
.
heuristic
=
true
;
return
result
;
}
return
null
;
}
if
(
!
queryContext
.
fixupInfo
?
.
href
|
|
queryContext
.
fixupInfo
?
.
isSearch
)
{
return
null
;
}
let
uri
=
new
URL
(
queryContext
.
fixupInfo
.
href
)
;
let
hostExpected
=
[
"
http
:
"
"
https
:
"
"
ftp
:
"
"
chrome
:
"
]
.
includes
(
uri
.
protocol
)
;
if
(
hostExpected
&
&
!
uri
.
host
)
{
return
null
;
}
let
escapedURL
=
uri
.
toString
(
)
;
let
displayURL
=
decodeURI
(
uri
)
;
let
iconUri
;
if
(
hostExpected
&
&
(
searchUrl
.
endsWith
(
"
/
"
)
|
|
uri
.
pathname
.
length
>
1
)
)
{
let
pathIndex
=
uri
.
toString
(
)
.
lastIndexOf
(
uri
.
pathname
)
;
let
prePath
=
uri
.
toString
(
)
.
slice
(
0
pathIndex
)
;
iconUri
=
page
-
icon
:
{
prePath
}
/
;
}
let
result
=
new
lazy
.
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
.
.
.
lazy
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
title
:
[
displayURL
UrlbarUtils
.
HIGHLIGHT
.
NONE
]
url
:
[
escapedURL
UrlbarUtils
.
HIGHLIGHT
.
NONE
]
icon
:
iconUri
}
)
)
;
result
.
heuristic
=
true
;
return
result
;
}
_searchModeKeywordResult
(
queryContext
)
{
if
(
!
queryContext
.
tokens
.
length
)
{
return
null
;
}
let
firstToken
=
queryContext
.
tokens
[
0
]
.
value
;
if
(
!
lazy
.
UrlbarTokenizer
.
SEARCH_MODE_RESTRICT
.
has
(
firstToken
)
)
{
return
null
;
}
let
query
=
UrlbarUtils
.
substringAfter
(
queryContext
.
searchString
firstToken
)
;
if
(
!
lazy
.
UrlbarTokenizer
.
REGEXP_SPACES_START
.
test
(
query
)
)
{
return
null
;
}
let
result
;
if
(
queryContext
.
restrictSource
=
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
{
result
=
this
.
_engineSearchResult
(
queryContext
firstToken
)
;
}
else
{
result
=
new
lazy
.
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
.
.
.
lazy
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
query
:
[
query
.
trimStart
(
)
UrlbarUtils
.
HIGHLIGHT
.
NONE
]
keyword
:
[
firstToken
UrlbarUtils
.
HIGHLIGHT
.
NONE
]
}
)
)
;
}
result
.
heuristic
=
true
;
return
result
;
}
_engineSearchResult
(
queryContext
keyword
=
null
)
{
let
engine
;
if
(
queryContext
.
searchMode
?
.
engineName
)
{
engine
=
Services
.
search
.
getEngineByName
(
queryContext
.
searchMode
.
engineName
)
;
}
else
{
engine
=
lazy
.
UrlbarSearchUtils
.
getDefaultEngine
(
queryContext
.
isPrivate
)
;
}
if
(
!
engine
)
{
return
null
;
}
let
query
=
queryContext
.
searchString
;
if
(
queryContext
.
tokens
[
0
]
&
&
queryContext
.
tokens
[
0
]
.
value
=
=
=
lazy
.
UrlbarTokenizer
.
RESTRICT
.
SEARCH
)
{
query
=
UrlbarUtils
.
substringAfter
(
query
queryContext
.
tokens
[
0
]
.
value
)
.
trim
(
)
;
}
return
new
lazy
.
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
lazy
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
engine
:
[
engine
.
name
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
engine
.
iconURI
?
.
spec
query
:
[
query
UrlbarUtils
.
HIGHLIGHT
.
NONE
]
keyword
:
keyword
?
[
keyword
UrlbarUtils
.
HIGHLIGHT
.
NONE
]
:
undefined
}
)
)
;
}
}
var
UrlbarProviderHeuristicFallback
=
new
ProviderHeuristicFallback
(
)
;
