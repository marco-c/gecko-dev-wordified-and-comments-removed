"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderAboutPages
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
{
UrlbarProvider
UrlbarUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
AboutPagesUtils
:
"
resource
:
/
/
gre
/
modules
/
AboutPagesUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
}
)
;
class
ProviderAboutPages
extends
UrlbarProvider
{
get
name
(
)
{
return
"
AboutPages
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
;
}
isActive
(
queryContext
)
{
return
(
queryContext
.
trimmedSearchString
.
toLowerCase
(
)
.
startsWith
(
"
about
:
"
)
&
&
queryContext
.
trimmedSearchString
.
length
>
6
)
;
}
startQuery
(
queryContext
addCallback
)
{
let
searchString
=
queryContext
.
trimmedSearchString
.
toLowerCase
(
)
;
for
(
const
aboutUrl
of
lazy
.
AboutPagesUtils
.
visibleAboutUrls
)
{
if
(
aboutUrl
.
startsWith
(
searchString
)
)
{
let
result
=
new
lazy
.
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
.
.
.
lazy
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
title
:
[
aboutUrl
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
url
:
[
aboutUrl
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
UrlbarUtils
.
getIconForUrl
(
aboutUrl
)
}
)
)
;
addCallback
(
this
result
)
;
}
}
}
}
var
UrlbarProviderAboutPages
=
new
ProviderAboutPages
(
)
;
