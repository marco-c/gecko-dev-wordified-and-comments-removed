"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderInterventions
"
"
QueryScorer
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppUpdater
:
"
resource
:
/
/
/
modules
/
AppUpdater
.
jsm
"
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
Log
:
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
NLP
:
"
resource
:
/
/
gre
/
modules
/
NLP
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
ResetProfile
:
"
resource
:
/
/
gre
/
modules
/
ResetProfile
.
jsm
"
Sanitizer
:
"
resource
:
/
/
/
modules
/
Sanitizer
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
repository
.
getLogger
(
"
Urlbar
.
Provider
.
Interventions
"
)
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
appUpdater
"
(
)
=
>
new
AppUpdater
(
)
)
;
const
TIPS
=
{
NONE
:
"
"
CLEAR
:
"
clear
"
REFRESH
:
"
refresh
"
UPDATE_ASK
:
"
update_ask
"
UPDATE_REFRESH
:
"
update_refresh
"
UPDATE_RESTART
:
"
update_restart
"
UPDATE_WEB
:
"
update_web
"
}
;
const
EN_LOCALE_MATCH
=
/
^
en
(
-
.
*
)
/
;
const
DOCUMENTS
=
{
clear
:
[
"
cache
firefox
"
"
clear
cache
firefox
"
"
clear
cache
in
firefox
"
"
clear
cookies
firefox
"
"
clear
firefox
cache
"
"
clear
history
firefox
"
"
cookies
firefox
"
"
delete
cookies
firefox
"
"
delete
history
firefox
"
"
firefox
cache
"
"
firefox
clear
cache
"
"
firefox
clear
cookies
"
"
firefox
clear
history
"
"
firefox
cookie
"
"
firefox
cookies
"
"
firefox
delete
cookies
"
"
firefox
delete
history
"
"
firefox
history
"
"
firefox
not
loading
pages
"
"
history
firefox
"
"
how
to
clear
cache
"
"
how
to
clear
history
"
]
refresh
:
[
"
firefox
crashing
"
"
firefox
keeps
crashing
"
"
firefox
not
responding
"
"
firefox
not
working
"
"
firefox
refresh
"
"
firefox
slow
"
"
how
to
reset
firefox
"
"
refresh
firefox
"
"
reset
firefox
"
]
update
:
[
"
download
firefox
"
"
download
mozilla
"
"
firefox
browser
"
"
firefox
download
"
"
firefox
for
mac
"
"
firefox
for
windows
"
"
firefox
free
download
"
"
firefox
install
"
"
firefox
installer
"
"
firefox
latest
version
"
"
firefox
mac
"
"
firefox
quantum
"
"
firefox
update
"
"
firefox
version
"
"
firefox
windows
"
"
get
firefox
"
"
how
to
update
firefox
"
"
install
firefox
"
"
mozilla
download
"
"
mozilla
firefox
2019
"
"
mozilla
firefox
2020
"
"
mozilla
firefox
download
"
"
mozilla
firefox
for
mac
"
"
mozilla
firefox
for
windows
"
"
mozilla
firefox
free
download
"
"
mozilla
firefox
mac
"
"
mozilla
firefox
update
"
"
mozilla
firefox
windows
"
"
mozilla
update
"
"
update
firefox
"
"
update
mozilla
"
"
www
.
firefox
.
com
"
]
}
;
const
UPDATE_CHECK_PERIOD_MS
=
12
*
60
*
60
*
1000
;
class
Node
{
constructor
(
word
)
{
this
.
word
=
word
;
this
.
documents
=
new
Set
(
)
;
this
.
childrenByWord
=
new
Map
(
)
;
}
}
class
QueryScorer
{
constructor
(
{
distanceThreshold
=
1
variations
=
new
Map
(
)
}
=
{
}
)
{
this
.
_distanceThreshold
=
distanceThreshold
;
this
.
_variations
=
variations
;
this
.
_documents
=
new
Set
(
)
;
this
.
_rootNode
=
new
Node
(
)
;
}
addDocument
(
doc
)
{
this
.
_documents
.
add
(
doc
)
;
for
(
let
phraseStr
of
doc
.
phrases
)
{
let
phrase
=
phraseStr
.
trim
(
)
.
split
(
/
\
s
+
/
)
.
map
(
word
=
>
word
.
toLocaleLowerCase
(
)
)
;
let
phrases
=
[
phrase
]
;
for
(
let
[
triggerWord
variations
]
of
this
.
_variations
)
{
let
index
=
phrase
.
indexOf
(
triggerWord
)
;
if
(
index
>
=
0
)
{
for
(
let
variation
of
variations
)
{
let
variationPhrase
=
Array
.
from
(
phrase
)
;
variationPhrase
.
splice
(
index
1
.
.
.
variation
.
split
(
/
\
s
+
/
)
)
;
phrases
.
push
(
variationPhrase
)
;
}
}
}
for
(
let
completedPhrase
of
phrases
)
{
this
.
_buildPhraseTree
(
this
.
_rootNode
doc
completedPhrase
0
)
;
}
}
}
score
(
queryString
)
{
let
queryWords
=
queryString
.
trim
(
)
.
split
(
/
\
s
+
/
)
.
map
(
word
=
>
word
.
toLocaleLowerCase
(
)
)
;
let
minDistanceByDoc
=
this
.
_traverse
(
{
queryWords
}
)
;
let
results
=
[
]
;
for
(
let
doc
of
this
.
_documents
)
{
let
distance
=
minDistanceByDoc
.
get
(
doc
)
;
results
.
push
(
{
document
:
doc
score
:
distance
=
=
=
undefined
?
Infinity
:
distance
}
)
;
}
results
.
sort
(
(
a
b
)
=
>
a
.
score
-
b
.
score
)
;
return
results
;
}
_buildPhraseTree
(
node
doc
phrase
wordIndex
)
{
if
(
phrase
.
length
=
=
wordIndex
)
{
return
;
}
let
word
=
phrase
[
wordIndex
]
.
toLocaleLowerCase
(
)
;
let
child
=
node
.
childrenByWord
.
get
(
word
)
;
if
(
!
child
)
{
child
=
new
Node
(
word
)
;
node
.
childrenByWord
.
set
(
word
child
)
;
}
child
.
documents
.
add
(
doc
)
;
this
.
_buildPhraseTree
(
child
doc
phrase
wordIndex
+
1
)
;
}
_traverse
(
{
queryWords
node
=
this
.
_rootNode
minDistanceByDoc
=
new
Map
(
)
queryWordsIndex
=
0
phraseDistance
=
0
}
=
{
}
)
{
if
(
!
node
.
childrenByWord
.
size
)
{
for
(
let
doc
of
node
.
documents
)
{
minDistanceByDoc
.
set
(
doc
Math
.
min
(
phraseDistance
minDistanceByDoc
.
has
(
doc
)
?
minDistanceByDoc
.
get
(
doc
)
:
Infinity
)
)
;
}
return
minDistanceByDoc
;
}
if
(
queryWordsIndex
=
=
queryWords
.
length
)
{
return
minDistanceByDoc
;
}
let
queryWord
=
queryWords
[
queryWordsIndex
]
;
for
(
let
[
childWord
child
]
of
node
.
childrenByWord
)
{
let
distance
=
NLP
.
levenshtein
(
queryWord
childWord
)
;
if
(
distance
<
=
this
.
_distanceThreshold
)
{
this
.
_traverse
(
{
node
:
child
queryWords
queryWordsIndex
:
queryWordsIndex
+
1
phraseDistance
:
phraseDistance
+
distance
minDistanceByDoc
}
)
;
}
}
return
minDistanceByDoc
;
}
}
function
getL10nPropertiesForTip
(
tip
)
{
const
baseURL
=
"
https
:
/
/
support
.
mozilla
.
org
/
kb
/
"
;
switch
(
tip
)
{
case
TIPS
.
CLEAR
:
return
{
textData
:
{
id
:
"
intervention
-
clear
-
data
"
}
buttonTextData
:
{
id
:
"
intervention
-
clear
-
data
-
confirm
"
}
helpUrl
:
baseURL
+
"
delete
-
browsing
-
search
-
download
-
history
-
firefox
"
}
;
case
TIPS
.
REFRESH
:
return
{
textData
:
{
id
:
"
intervention
-
refresh
-
profile
"
}
buttonTextData
:
{
id
:
"
intervention
-
refresh
-
profile
-
confirm
"
}
helpUrl
:
baseURL
+
"
refresh
-
firefox
-
reset
-
add
-
ons
-
and
-
settings
"
}
;
case
TIPS
.
UPDATE_ASK
:
return
{
textData
:
{
id
:
"
intervention
-
update
-
ask
"
}
buttonTextData
:
{
id
:
"
intervention
-
update
-
ask
-
confirm
"
}
helpUrl
:
baseURL
+
"
update
-
firefox
-
latest
-
release
"
}
;
case
TIPS
.
UPDATE_REFRESH
:
return
{
textData
:
{
id
:
"
intervention
-
update
-
refresh
"
}
buttonTextData
:
{
id
:
"
intervention
-
update
-
refresh
-
confirm
"
}
helpUrl
:
baseURL
+
"
refresh
-
firefox
-
reset
-
add
-
ons
-
and
-
settings
"
}
;
case
TIPS
.
UPDATE_RESTART
:
return
{
textData
:
{
id
:
"
intervention
-
update
-
restart
"
}
buttonTextData
:
{
id
:
"
intervention
-
update
-
restart
-
confirm
"
}
helpUrl
:
baseURL
+
"
update
-
firefox
-
latest
-
release
"
}
;
case
TIPS
.
UPDATE_WEB
:
return
{
textData
:
{
id
:
"
intervention
-
update
-
web
"
}
buttonTextData
:
{
id
:
"
intervention
-
update
-
web
-
confirm
"
}
helpUrl
:
baseURL
+
"
update
-
firefox
-
latest
-
release
"
}
;
default
:
throw
new
Error
(
"
Unknown
TIP
type
.
"
)
;
}
}
class
ProviderInterventions
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
this
.
queries
=
new
Map
(
)
;
this
.
currentTip
=
TIPS
.
NONE
;
XPCOMUtils
.
defineLazyGetter
(
this
"
queryScorer
"
(
)
=
>
{
let
queryScorer
=
new
QueryScorer
(
{
variations
:
new
Map
(
[
[
"
firefox
"
[
"
fire
fox
"
"
fox
fire
"
"
foxfire
"
]
]
[
"
mozilla
"
[
"
mozila
"
]
]
]
)
}
)
;
for
(
let
[
id
phrases
]
of
Object
.
entries
(
DOCUMENTS
)
)
{
queryScorer
.
addDocument
(
{
id
phrases
}
)
;
}
return
queryScorer
;
}
)
;
}
get
name
(
)
{
return
"
UrlbarProviderInterventions
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
IMMEDIATE
;
}
isActive
(
queryContext
)
{
if
(
!
UrlbarPrefs
.
get
(
"
update1
.
interventions
"
)
|
|
!
queryContext
.
searchString
|
|
!
EN_LOCALE_MATCH
.
test
(
Services
.
locale
.
appLocaleAsBCP47
)
)
{
return
false
;
}
this
.
currentTip
=
TIPS
.
NONE
;
let
docScores
=
this
.
queryScorer
.
score
(
queryContext
.
searchString
)
;
let
topDocScore
=
docScores
[
0
]
;
let
topDocIDs
=
new
Set
(
)
;
if
(
topDocScore
.
score
!
=
Infinity
)
{
for
(
let
{
score
document
}
of
docScores
)
{
if
(
score
!
=
topDocScore
.
score
)
{
break
;
}
topDocIDs
.
add
(
document
.
id
)
;
}
}
try
{
this
.
checkForBrowserUpdate
(
)
;
}
catch
(
ex
)
{
return
false
;
}
if
(
topDocIDs
.
has
(
"
update
"
)
)
{
switch
(
appUpdater
.
status
)
{
case
AppUpdater
.
STATUS
.
DOWNLOADING
:
case
AppUpdater
.
STATUS
.
STAGING
:
case
AppUpdater
.
STATUS
.
READY_FOR_RESTART
:
this
.
currentTip
=
TIPS
.
UPDATE_RESTART
;
break
;
case
AppUpdater
.
STATUS
.
DOWNLOAD_AND_INSTALL
:
this
.
currentTip
=
TIPS
.
UPDATE_ASK
;
break
;
case
AppUpdater
.
STATUS
.
NO_UPDATES_FOUND
:
this
.
currentTip
=
TIPS
.
UPDATE_REFRESH
;
break
;
case
AppUpdater
.
STATUS
.
CHECKING
:
return
false
;
default
:
this
.
currentTip
=
TIPS
.
UPDATE_WEB
;
break
;
}
}
else
if
(
topDocIDs
.
has
(
"
clear
"
)
)
{
let
window
=
BrowserWindowTracker
.
getTopWindow
(
)
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
return
false
;
}
this
.
currentTip
=
TIPS
.
CLEAR
;
}
else
if
(
topDocIDs
.
has
(
"
refresh
"
)
)
{
this
.
currentTip
=
TIPS
.
REFRESH
;
}
else
{
return
false
;
}
return
true
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
instance
=
{
}
;
this
.
queries
.
set
(
queryContext
instance
)
;
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
TIP
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
{
type
:
this
.
currentTip
}
)
;
result
.
suggestedIndex
=
1
;
Object
.
assign
(
result
.
payload
getL10nPropertiesForTip
(
this
.
currentTip
)
)
;
if
(
!
this
.
queries
.
has
(
queryContext
)
)
{
return
;
}
addCallback
(
this
result
)
;
this
.
queries
.
delete
(
queryContext
)
;
}
cancelQuery
(
queryContext
)
{
logger
.
info
(
Canceling
query
for
{
queryContext
.
searchString
}
)
;
this
.
queries
.
delete
(
queryContext
)
;
}
pickResult
(
result
)
{
let
tip
=
result
.
payload
.
type
;
switch
(
tip
)
{
case
TIPS
.
CLEAR
:
openClearHistoryDialog
(
)
;
break
;
case
TIPS
.
REFRESH
:
case
TIPS
.
UPDATE_REFRESH
:
resetBrowser
(
)
;
break
;
case
TIPS
.
UPDATE_ASK
:
installBrowserUpdateAndRestart
(
)
;
break
;
case
TIPS
.
UPDATE_RESTART
:
restartBrowser
(
)
;
break
;
case
TIPS
.
UPDATE_WEB
:
let
window
=
BrowserWindowTracker
.
getTopWindow
(
)
;
window
.
gBrowser
.
selectedTab
=
window
.
gBrowser
.
addWebTab
(
"
https
:
/
/
www
.
mozilla
.
org
/
firefox
/
new
/
"
)
;
break
;
}
}
checkForBrowserUpdate
(
force
=
false
)
{
if
(
force
|
|
!
this
.
_lastUpdateCheckTime
|
|
Date
.
now
(
)
-
this
.
_lastUpdateCheckTime
>
=
UPDATE_CHECK_PERIOD_MS
)
{
this
.
_lastUpdateCheckTime
=
Date
.
now
(
)
;
appUpdater
.
check
(
)
;
}
}
resetAppUpdater
(
)
{
appUpdater
=
new
AppUpdater
(
)
;
}
}
var
UrlbarProviderInterventions
=
new
ProviderInterventions
(
)
;
function
installBrowserUpdateAndRestart
(
)
{
if
(
appUpdater
.
status
!
=
AppUpdater
.
STATUS
.
DOWNLOAD_AND_INSTALL
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
resolve
=
>
{
let
listener
=
(
)
=
>
{
if
(
appUpdater
.
status
!
=
AppUpdater
.
STATUS
.
READY_FOR_RESTART
&
&
appUpdater
.
status
!
=
AppUpdater
.
STATUS
.
DOWNLOAD_FAILED
)
{
return
;
}
appUpdater
.
removeListener
(
listener
)
;
if
(
appUpdater
.
status
=
=
AppUpdater
.
STATUS
.
READY_FOR_RESTART
)
{
restartBrowser
(
)
;
}
resolve
(
)
;
}
;
appUpdater
.
addListener
(
listener
)
;
appUpdater
.
startDownload
(
)
;
}
)
;
}
function
openClearHistoryDialog
(
)
{
let
window
=
BrowserWindowTracker
.
getTopWindow
(
)
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
return
;
}
Sanitizer
.
showUI
(
window
)
;
}
function
restartBrowser
(
)
{
let
cancelQuit
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
Services
.
obs
.
notifyObservers
(
cancelQuit
"
quit
-
application
-
requested
"
"
restart
"
)
;
if
(
cancelQuit
.
data
)
{
return
;
}
if
(
Services
.
appinfo
.
inSafeMode
)
{
Services
.
startup
.
restartInSafeMode
(
Ci
.
nsIAppStartup
.
eAttemptQuit
)
;
}
else
{
Services
.
startup
.
quit
(
Ci
.
nsIAppStartup
.
eAttemptQuit
|
Ci
.
nsIAppStartup
.
eRestart
)
;
}
}
function
resetBrowser
(
)
{
if
(
!
ResetProfile
.
resetSupported
(
)
)
{
return
;
}
let
window
=
BrowserWindowTracker
.
getTopWindow
(
)
;
ResetProfile
.
openConfirmationDialog
(
window
)
;
}
