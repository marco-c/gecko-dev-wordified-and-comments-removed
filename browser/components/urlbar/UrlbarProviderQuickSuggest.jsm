"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderQuickSuggest
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarQuickSuggest
:
"
resource
:
/
/
/
modules
/
UrlbarQuickSuggest
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
class
ProviderQuickSuggest
extends
UrlbarProvider
{
get
name
(
)
{
return
"
UrlbarProviderQuickSuggest
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
;
}
isActive
(
queryContext
)
{
if
(
!
queryContext
.
sources
.
includes
(
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
|
|
(
queryContext
.
restrictSource
&
&
queryContext
.
restrictSource
!
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
)
{
return
false
;
}
return
(
queryContext
.
trimmedSearchString
&
&
!
queryContext
.
searchMode
&
&
UrlbarPrefs
.
get
(
"
quicksuggest
.
enabled
"
)
&
&
UrlbarPrefs
.
get
(
"
suggest
.
quicksuggest
"
)
&
&
UrlbarPrefs
.
get
(
"
suggest
.
searches
"
)
&
&
UrlbarPrefs
.
get
(
"
browser
.
search
.
suggest
.
enabled
"
)
&
&
(
!
queryContext
.
isPrivate
|
|
UrlbarPrefs
.
get
(
"
browser
.
search
.
suggest
.
enabled
.
private
"
)
)
)
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
instance
=
this
.
queryInstance
;
let
suggestion
=
await
UrlbarQuickSuggest
.
query
(
queryContext
.
searchString
)
;
if
(
!
suggestion
|
|
instance
!
=
this
.
queryInstance
)
{
return
;
}
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_NETWORK
{
title
:
suggestion
.
title
url
:
suggestion
.
url
icon
:
suggestion
.
icon
isSponsored
:
true
}
)
;
result
.
suggestedIndex
=
UrlbarPrefs
.
get
(
"
quicksuggest
.
suggestedIndex
"
)
;
if
(
result
.
suggestedIndex
=
=
-
1
)
{
result
.
suggestedIndex
=
UrlbarPrefs
.
get
(
"
maxRichResults
"
)
-
1
;
}
addCallback
(
this
result
)
;
}
}
var
UrlbarProviderQuickSuggest
=
new
ProviderQuickSuggest
(
)
;
