"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderQuickSuggest
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
CONTEXTUAL_SERVICES_PING_TYPES
:
"
resource
:
/
/
/
modules
/
PartnerLinkAttribution
.
jsm
"
PartnerLinkAttribution
:
"
resource
:
/
/
/
modules
/
PartnerLinkAttribution
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarQuickSuggest
:
"
resource
:
/
/
/
modules
/
UrlbarQuickSuggest
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
const
EXPERIMENT_PREF
=
"
quicksuggest
.
enabled
"
;
const
SUGGEST_PREF
=
"
suggest
.
quicksuggest
"
;
const
ONBOARDING_COUNT_PREF
=
"
quicksuggest
.
onboardingCount
"
;
const
ONBOARDING_MAX_COUNT_PREF
=
"
quicksuggest
.
onboardingMaxCount
"
;
const
NONSPONSORED_ACTION_TEXT
=
"
Firefox
Suggests
"
;
const
ONBOARDING_TEXT
=
"
Learn
more
about
Firefox
Suggests
"
;
const
TELEMETRY_SCALAR_IMPRESSION
=
"
contextual
.
services
.
quicksuggest
.
impression
"
;
const
TELEMETRY_SCALAR_CLICK
=
"
contextual
.
services
.
quicksuggest
.
click
"
;
const
TELEMETRY_SCALAR_HELP
=
"
contextual
.
services
.
quicksuggest
.
help
"
;
const
TELEMETRY_EVENT_CATEGORY
=
"
contextservices
.
quicksuggest
"
;
class
ProviderQuickSuggest
extends
UrlbarProvider
{
constructor
(
.
.
.
args
)
{
super
(
.
.
.
args
)
;
this
.
_updateExperimentState
(
)
;
UrlbarPrefs
.
addObserver
(
this
)
;
}
get
name
(
)
{
return
"
UrlbarProviderQuickSuggest
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
NETWORK
;
}
isActive
(
queryContext
)
{
this
.
_addedResultInLastQuery
=
false
;
if
(
!
queryContext
.
sources
.
includes
(
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
|
|
(
queryContext
.
restrictSource
&
&
queryContext
.
restrictSource
!
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
)
{
return
false
;
}
return
(
queryContext
.
trimmedSearchString
&
&
!
queryContext
.
searchMode
&
&
UrlbarPrefs
.
get
(
EXPERIMENT_PREF
)
&
&
UrlbarPrefs
.
get
(
SUGGEST_PREF
)
&
&
UrlbarPrefs
.
get
(
"
suggest
.
searches
"
)
&
&
UrlbarPrefs
.
get
(
"
browser
.
search
.
suggest
.
enabled
"
)
&
&
(
!
queryContext
.
isPrivate
|
|
UrlbarPrefs
.
get
(
"
browser
.
search
.
suggest
.
enabled
.
private
"
)
)
)
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
instance
=
this
.
queryInstance
;
let
suggestion
=
await
UrlbarQuickSuggest
.
query
(
queryContext
.
trimmedSearchString
)
;
if
(
!
suggestion
|
|
instance
!
=
this
.
queryInstance
)
{
return
;
}
let
payload
=
{
qsSuggestion
:
[
suggestion
.
fullKeyword
UrlbarUtils
.
HIGHLIGHT
.
SUGGESTED
]
title
:
suggestion
.
title
url
:
suggestion
.
url
icon
:
suggestion
.
icon
sponsoredImpressionUrl
:
suggestion
.
impression_url
sponsoredClickUrl
:
suggestion
.
click_url
sponsoredBlockId
:
suggestion
.
block_id
sponsoredAdvertiser
:
suggestion
.
advertiser
isSponsored
:
true
}
;
if
(
!
suggestion
.
isSponsored
)
{
payload
.
sponsoredText
=
NONSPONSORED_ACTION_TEXT
;
}
if
(
this
.
_onboardingCount
<
this
.
_onboardingMaxCount
)
{
payload
.
helpUrl
=
UrlbarPrefs
.
get
(
"
quicksuggest
.
helpURL
"
)
;
payload
.
helpTitle
=
ONBOARDING_TEXT
;
}
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
payload
)
)
;
result
.
suggestedIndex
=
UrlbarPrefs
.
get
(
"
quicksuggest
.
suggestedIndex
"
)
;
if
(
result
.
suggestedIndex
=
=
-
1
)
{
result
.
suggestedIndex
=
UrlbarPrefs
.
get
(
"
maxRichResults
"
)
-
1
;
}
addCallback
(
this
result
)
;
this
.
_addedResultInLastQuery
=
true
;
}
onEngagement
(
isPrivate
state
queryContext
details
)
{
if
(
!
this
.
_addedResultInLastQuery
)
{
return
;
}
this
.
_addedResultInLastQuery
=
false
;
if
(
state
!
=
"
engagement
"
)
{
return
;
}
let
resultIndex
=
queryContext
.
results
.
length
-
1
;
let
lastResult
=
queryContext
.
results
[
resultIndex
]
;
if
(
!
lastResult
?
.
payload
.
isSponsored
)
{
Cu
.
reportError
(
Last
result
is
not
a
quick
suggest
)
;
return
;
}
if
(
this
.
_onboardingCount
<
this
.
_onboardingMaxCount
)
{
this
.
_onboardingCount
+
+
;
}
let
telemetryResultIndex
=
resultIndex
+
1
;
Services
.
telemetry
.
keyedScalarAdd
(
TELEMETRY_SCALAR_IMPRESSION
telemetryResultIndex
1
)
;
if
(
details
.
selIndex
=
=
resultIndex
)
{
Services
.
telemetry
.
keyedScalarAdd
(
details
.
selType
=
=
"
help
"
?
TELEMETRY_SCALAR_HELP
:
TELEMETRY_SCALAR_CLICK
telemetryResultIndex
1
)
;
}
if
(
!
isPrivate
)
{
let
isQuickSuggestLinkClicked
=
details
.
selIndex
=
=
resultIndex
&
&
details
.
selType
!
=
=
"
help
"
;
let
{
sponsoredAdvertiser
sponsoredImpressionUrl
sponsoredClickUrl
sponsoredBlockId
}
=
lastResult
.
payload
;
PartnerLinkAttribution
.
sendContextualServicesPing
(
{
search_query
:
details
.
searchString
matched_keywords
:
details
.
searchString
advertiser
:
sponsoredAdvertiser
block_id
:
sponsoredBlockId
position
:
telemetryResultIndex
reporting_url
:
sponsoredImpressionUrl
is_clicked
:
isQuickSuggestLinkClicked
}
CONTEXTUAL_SERVICES_PING_TYPES
.
QS_IMPRESSION
)
;
if
(
isQuickSuggestLinkClicked
)
{
PartnerLinkAttribution
.
sendContextualServicesPing
(
{
advertiser
:
sponsoredAdvertiser
block_id
:
sponsoredBlockId
position
:
telemetryResultIndex
reporting_url
:
sponsoredClickUrl
}
CONTEXTUAL_SERVICES_PING_TYPES
.
QS_SELECTION
)
;
}
}
}
onPrefChanged
(
pref
)
{
switch
(
pref
)
{
case
EXPERIMENT_PREF
:
this
.
_updateExperimentState
(
)
;
break
;
case
SUGGEST_PREF
:
Services
.
telemetry
.
recordEvent
(
TELEMETRY_EVENT_CATEGORY
"
enable_toggled
"
UrlbarPrefs
.
get
(
SUGGEST_PREF
)
?
"
enabled
"
:
"
disabled
"
)
;
break
;
}
}
_updateExperimentState
(
)
{
Services
.
telemetry
.
setEventRecordingEnabled
(
TELEMETRY_EVENT_CATEGORY
UrlbarPrefs
.
get
(
EXPERIMENT_PREF
)
)
;
if
(
UrlbarPrefs
.
get
(
EXPERIMENT_PREF
)
)
{
UrlbarQuickSuggest
;
}
}
_addedResultInLastQuery
=
false
;
get
_onboardingCount
(
)
{
return
UrlbarPrefs
.
get
(
ONBOARDING_COUNT_PREF
)
;
}
set
_onboardingCount
(
value
)
{
UrlbarPrefs
.
set
(
ONBOARDING_COUNT_PREF
value
)
;
}
get
_onboardingMaxCount
(
)
{
return
UrlbarPrefs
.
get
(
ONBOARDING_MAX_COUNT_PREF
)
;
}
}
var
UrlbarProviderQuickSuggest
=
new
ProviderQuickSuggest
(
)
;
