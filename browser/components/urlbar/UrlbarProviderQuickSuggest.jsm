"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderQuickSuggest
"
"
QUICK_SUGGEST_SOURCE
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
CONTEXTUAL_SERVICES_PING_TYPES
:
"
resource
:
/
/
/
modules
/
PartnerLinkAttribution
.
jsm
"
NimbusFeatures
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
PartnerLinkAttribution
:
"
resource
:
/
/
/
modules
/
PartnerLinkAttribution
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
SkippableTimer
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarQuickSuggest
:
"
resource
:
/
/
/
modules
/
UrlbarQuickSuggest
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
AbortController
"
"
fetch
"
]
)
;
const
MERINO_ENDPOINT_PARAM_QUERY
=
"
q
"
;
const
TELEMETRY_MERINO_LATENCY
=
"
FX_URLBAR_MERINO_LATENCY_MS
"
;
const
TELEMETRY_MERINO_RESPONSE
=
"
FX_URLBAR_MERINO_RESPONSE
"
;
const
TELEMETRY_REMOTE_SETTINGS_LATENCY
=
"
FX_URLBAR_QUICK_SUGGEST_REMOTE_SETTINGS_LATENCY_MS
"
;
const
TELEMETRY_SCALAR_IMPRESSION
=
"
contextual
.
services
.
quicksuggest
.
impression
"
;
const
TELEMETRY_SCALAR_CLICK
=
"
contextual
.
services
.
quicksuggest
.
click
"
;
const
TELEMETRY_SCALAR_HELP
=
"
contextual
.
services
.
quicksuggest
.
help
"
;
const
TELEMETRY_EVENT_CATEGORY
=
"
contextservices
.
quicksuggest
"
;
const
QUICK_SUGGEST_SOURCE
=
{
REMOTE_SETTINGS
:
"
remote
-
settings
"
MERINO
:
"
merino
"
}
;
class
ProviderQuickSuggest
extends
UrlbarProvider
{
constructor
(
.
.
.
args
)
{
super
(
.
.
.
args
)
;
this
.
_updateExperimentState
(
)
;
UrlbarPrefs
.
addObserver
(
this
)
;
NimbusFeatures
.
urlbar
.
onUpdate
(
this
.
_updateExperimentState
)
;
}
get
name
(
)
{
return
"
UrlbarProviderQuickSuggest
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
NETWORK
;
}
get
helpUrl
(
)
{
return
(
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
firefox
-
suggest
"
)
;
}
isActive
(
queryContext
)
{
this
.
_addedResultInLastQuery
=
false
;
if
(
!
queryContext
.
sources
.
includes
(
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
|
|
(
queryContext
.
restrictSource
&
&
queryContext
.
restrictSource
!
=
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
)
)
{
return
false
;
}
return
(
queryContext
.
trimmedSearchString
&
&
!
queryContext
.
searchMode
&
&
!
queryContext
.
isPrivate
&
&
UrlbarPrefs
.
get
(
"
quickSuggestEnabled
"
)
&
&
(
UrlbarPrefs
.
get
(
"
suggest
.
quicksuggest
"
)
|
|
UrlbarPrefs
.
get
(
"
suggest
.
quicksuggest
.
sponsored
"
)
)
)
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
instance
=
this
.
queryInstance
;
let
searchString
=
queryContext
.
searchString
.
trimStart
(
)
;
let
promises
=
[
]
;
if
(
UrlbarPrefs
.
get
(
"
quickSuggestRemoteSettingsEnabled
"
)
)
{
promises
.
push
(
this
.
_fetchRemoteSettingsSuggestion
(
queryContext
searchString
)
)
;
}
if
(
UrlbarPrefs
.
get
(
"
merinoEnabled
"
)
&
&
UrlbarPrefs
.
get
(
"
quicksuggest
.
dataCollection
.
enabled
"
)
&
&
queryContext
.
allowRemoteResults
(
)
)
{
promises
.
push
(
this
.
_fetchMerinoSuggestions
(
queryContext
searchString
)
)
;
}
let
allSuggestions
=
await
Promise
.
all
(
promises
)
;
if
(
instance
!
=
this
.
queryInstance
)
{
return
;
}
let
suggestion
=
allSuggestions
.
flat
(
)
.
filter
(
s
=
>
s
&
&
this
.
_canAddSuggestion
(
s
)
)
.
sort
(
(
a
b
)
=
>
b
.
score
-
a
.
score
)
[
0
]
;
if
(
!
suggestion
)
{
return
;
}
let
payload
=
{
qsSuggestion
:
[
suggestion
.
full_keyword
UrlbarUtils
.
HIGHLIGHT
.
SUGGESTED
]
title
:
suggestion
.
title
url
:
suggestion
.
url
icon
:
suggestion
.
icon
sponsoredImpressionUrl
:
suggestion
.
impression_url
sponsoredClickUrl
:
suggestion
.
click_url
sponsoredBlockId
:
suggestion
.
block_id
sponsoredAdvertiser
:
suggestion
.
advertiser
isSponsored
:
suggestion
.
is_sponsored
helpUrl
:
this
.
helpUrl
helpL10nId
:
"
firefox
-
suggest
-
urlbar
-
learn
-
more
"
source
:
suggestion
.
source
requestId
:
suggestion
.
request_id
}
;
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
payload
)
)
;
result
.
isSuggestedIndexRelativeToGroup
=
true
;
result
.
suggestedIndex
=
UrlbarPrefs
.
get
(
suggestion
.
is_sponsored
?
"
quickSuggestSponsoredIndex
"
:
"
quickSuggestNonSponsoredIndex
"
)
;
addCallback
(
this
result
)
;
this
.
_addedResultInLastQuery
=
true
;
if
(
!
this
.
_recordedExposureEvent
)
{
this
.
_recordedExposureEvent
=
true
;
Services
.
tm
.
idleDispatchToMainThread
(
(
)
=
>
NimbusFeatures
.
urlbar
.
recordExposureEvent
(
{
once
:
true
}
)
)
;
}
}
onEngagement
(
isPrivate
state
queryContext
details
)
{
if
(
!
this
.
_addedResultInLastQuery
)
{
return
;
}
this
.
_addedResultInLastQuery
=
false
;
if
(
state
!
=
"
engagement
"
)
{
return
;
}
let
resultIndex
=
queryContext
.
results
.
length
-
1
;
let
result
=
queryContext
.
results
[
resultIndex
]
;
if
(
result
.
providerName
!
=
this
.
name
)
{
resultIndex
=
queryContext
.
results
.
findIndex
(
r
=
>
r
.
providerName
=
=
this
.
name
)
;
if
(
resultIndex
<
0
)
{
this
.
logger
.
error
(
Could
not
find
quick
suggest
result
)
;
return
;
}
result
=
queryContext
.
results
[
resultIndex
]
;
}
let
telemetryResultIndex
=
resultIndex
+
1
;
Services
.
telemetry
.
keyedScalarAdd
(
TELEMETRY_SCALAR_IMPRESSION
telemetryResultIndex
1
)
;
if
(
details
.
selIndex
=
=
resultIndex
)
{
Services
.
telemetry
.
keyedScalarAdd
(
details
.
selType
=
=
"
help
"
?
TELEMETRY_SCALAR_HELP
:
TELEMETRY_SCALAR_CLICK
telemetryResultIndex
1
)
;
}
if
(
!
isPrivate
)
{
let
isQuickSuggestLinkClicked
=
details
.
selIndex
=
=
resultIndex
&
&
details
.
selType
!
=
=
"
help
"
;
let
{
qsSuggestion
sponsoredAdvertiser
sponsoredImpressionUrl
sponsoredClickUrl
sponsoredBlockId
source
requestId
}
=
result
.
payload
;
let
scenario
=
UrlbarPrefs
.
get
(
"
quicksuggest
.
scenario
"
)
;
let
matchedKeywords
;
let
searchQuery
;
if
(
UrlbarPrefs
.
get
(
"
quicksuggest
.
dataCollection
.
enabled
"
)
&
&
source
=
=
=
QUICK_SUGGEST_SOURCE
.
REMOTE_SETTINGS
)
{
matchedKeywords
=
qsSuggestion
|
|
details
.
searchString
;
searchQuery
=
details
.
searchString
;
}
PartnerLinkAttribution
.
sendContextualServicesPing
(
{
scenario
search_query
:
searchQuery
matched_keywords
:
matchedKeywords
advertiser
:
sponsoredAdvertiser
block_id
:
sponsoredBlockId
position
:
telemetryResultIndex
reporting_url
:
sponsoredImpressionUrl
is_clicked
:
isQuickSuggestLinkClicked
request_id
:
requestId
}
CONTEXTUAL_SERVICES_PING_TYPES
.
QS_IMPRESSION
)
;
if
(
isQuickSuggestLinkClicked
)
{
PartnerLinkAttribution
.
sendContextualServicesPing
(
{
scenario
advertiser
:
sponsoredAdvertiser
block_id
:
sponsoredBlockId
position
:
telemetryResultIndex
reporting_url
:
sponsoredClickUrl
request_id
:
requestId
}
CONTEXTUAL_SERVICES_PING_TYPES
.
QS_SELECTION
)
;
}
}
}
onPrefChanged
(
pref
)
{
switch
(
pref
)
{
case
"
quicksuggest
.
dataCollection
.
enabled
"
:
if
(
!
UrlbarPrefs
.
updatingFirefoxSuggestScenario
)
{
Services
.
telemetry
.
recordEvent
(
TELEMETRY_EVENT_CATEGORY
"
data_collect_toggled
"
UrlbarPrefs
.
get
(
pref
)
?
"
enabled
"
:
"
disabled
"
)
;
}
break
;
case
"
suggest
.
quicksuggest
"
:
if
(
!
UrlbarPrefs
.
updatingFirefoxSuggestScenario
)
{
Services
.
telemetry
.
recordEvent
(
TELEMETRY_EVENT_CATEGORY
"
enable_toggled
"
UrlbarPrefs
.
get
(
pref
)
?
"
enabled
"
:
"
disabled
"
)
;
}
break
;
case
"
suggest
.
quicksuggest
.
sponsored
"
:
if
(
!
UrlbarPrefs
.
updatingFirefoxSuggestScenario
)
{
Services
.
telemetry
.
recordEvent
(
TELEMETRY_EVENT_CATEGORY
"
sponsored_toggled
"
UrlbarPrefs
.
get
(
pref
)
?
"
enabled
"
:
"
disabled
"
)
;
}
break
;
}
}
cancelQuery
(
queryContext
)
{
this
.
_merinoTimeoutTimer
?
.
cancel
(
)
;
}
async
_fetchRemoteSettingsSuggestion
(
queryContext
searchString
)
{
let
instance
=
this
.
queryInstance
;
let
suggestion
;
TelemetryStopwatch
.
start
(
TELEMETRY_REMOTE_SETTINGS_LATENCY
queryContext
)
;
try
{
suggestion
=
await
UrlbarQuickSuggest
.
query
(
searchString
)
;
TelemetryStopwatch
.
finish
(
TELEMETRY_REMOTE_SETTINGS_LATENCY
queryContext
)
;
if
(
instance
!
=
this
.
queryInstance
)
{
return
null
;
}
}
catch
(
error
)
{
TelemetryStopwatch
.
cancel
(
TELEMETRY_REMOTE_SETTINGS_LATENCY
queryContext
)
;
this
.
logger
.
error
(
"
Could
not
fetch
remote
settings
suggestion
:
"
+
error
)
;
}
return
suggestion
;
}
async
_fetchMerinoSuggestions
(
queryContext
searchString
)
{
let
instance
=
this
.
queryInstance
;
let
url
;
try
{
url
=
new
URL
(
UrlbarPrefs
.
get
(
"
merino
.
endpointURL
"
)
)
;
}
catch
(
error
)
{
this
.
logger
.
error
(
"
Could
not
make
Merino
endpoint
URL
:
"
+
error
)
;
return
null
;
}
url
.
searchParams
.
set
(
MERINO_ENDPOINT_PARAM_QUERY
searchString
)
;
let
responseHistogram
=
Services
.
telemetry
.
getHistogramById
(
TELEMETRY_MERINO_RESPONSE
)
;
let
maybeRecordResponse
=
category
=
>
{
responseHistogram
?
.
add
(
category
)
;
responseHistogram
=
null
;
}
;
let
timeout
=
UrlbarPrefs
.
get
(
"
merinoTimeoutMs
"
)
;
let
timer
=
(
this
.
_merinoTimeoutTimer
=
new
SkippableTimer
(
{
name
:
"
Merino
timeout
"
time
:
timeout
logger
:
this
.
logger
callback
:
(
)
=
>
{
this
.
logger
.
info
(
Merino
fetch
timed
out
(
timeout
=
{
timeout
}
ms
)
)
;
maybeRecordResponse
(
"
timeout
"
)
;
}
}
)
)
;
try
{
this
.
_merinoFetchController
?
.
abort
(
)
;
}
catch
(
error
)
{
this
.
logger
.
error
(
"
Could
not
abort
Merino
fetch
:
"
+
error
)
;
}
let
response
;
let
controller
=
(
this
.
_merinoFetchController
=
new
AbortController
(
)
)
;
TelemetryStopwatch
.
start
(
TELEMETRY_MERINO_LATENCY
queryContext
)
;
await
Promise
.
race
(
[
timer
.
promise
(
async
(
)
=
>
{
try
{
response
=
await
fetch
(
url
{
signal
:
controller
.
signal
}
)
;
TelemetryStopwatch
.
finish
(
TELEMETRY_MERINO_LATENCY
queryContext
)
;
maybeRecordResponse
(
response
.
ok
?
"
success
"
:
"
http_error
"
)
;
}
catch
(
error
)
{
TelemetryStopwatch
.
cancel
(
TELEMETRY_MERINO_LATENCY
queryContext
)
;
if
(
error
.
name
!
=
"
AbortError
"
)
{
this
.
logger
.
error
(
"
Could
not
fetch
Merino
endpoint
:
"
+
error
)
;
maybeRecordResponse
(
"
network_error
"
)
;
}
}
finally
{
timer
.
cancel
(
)
;
if
(
controller
=
=
this
.
_merinoFetchController
)
{
this
.
_merinoFetchController
=
null
;
}
}
}
)
(
)
]
)
;
if
(
timer
=
=
this
.
_merinoTimeoutTimer
)
{
this
.
_merinoTimeoutTimer
=
null
;
}
if
(
instance
!
=
this
.
queryInstance
)
{
return
null
;
}
let
body
;
try
{
body
=
await
response
?
.
json
(
)
;
if
(
instance
!
=
this
.
queryInstance
)
{
return
null
;
}
}
catch
(
error
)
{
this
.
logger
.
error
(
"
Could
not
get
Merino
response
as
JSON
:
"
+
error
)
;
}
if
(
!
body
?
.
suggestions
?
.
length
)
{
return
null
;
}
let
{
suggestions
request_id
}
=
body
;
if
(
!
Array
.
isArray
(
suggestions
)
)
{
this
.
logger
.
error
(
"
Unexpected
Merino
response
:
"
+
JSON
.
stringify
(
body
)
)
;
return
null
;
}
return
suggestions
.
map
(
suggestion
=
>
(
{
.
.
.
suggestion
request_id
source
:
QUICK_SUGGEST_SOURCE
.
MERINO
}
)
)
;
}
_canAddSuggestion
(
suggestion
)
{
return
(
(
suggestion
.
is_sponsored
&
&
UrlbarPrefs
.
get
(
"
suggest
.
quicksuggest
.
sponsored
"
)
)
|
|
(
!
suggestion
.
is_sponsored
&
&
UrlbarPrefs
.
get
(
"
suggest
.
quicksuggest
"
)
)
)
;
}
_updateExperimentState
(
)
{
Services
.
telemetry
.
setEventRecordingEnabled
(
TELEMETRY_EVENT_CATEGORY
UrlbarPrefs
.
get
(
"
quickSuggestEnabled
"
)
)
;
if
(
UrlbarPrefs
.
get
(
"
quickSuggestEnabled
"
)
)
{
UrlbarQuickSuggest
;
}
}
_addedResultInLastQuery
=
false
;
}
var
UrlbarProviderQuickSuggest
=
new
ProviderQuickSuggest
(
)
;
