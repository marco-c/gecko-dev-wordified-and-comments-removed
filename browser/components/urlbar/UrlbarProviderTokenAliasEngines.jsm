"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderTokenAliasEngines
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Log
:
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
PlacesSearchAutocompleteProvider
:
"
resource
:
/
/
gre
/
modules
/
PlacesSearchAutocompleteProvider
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
logger
"
(
)
=
>
Log
.
repository
.
getLogger
(
"
Urlbar
.
Provider
.
TokenAliasEngines
"
)
)
;
class
ProviderTokenAliasEngines
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
this
.
queries
=
new
Map
(
)
;
this
.
_engines
=
[
]
;
}
get
name
(
)
{
return
"
TokenAliasEngines
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
;
}
get
PRIORITY
(
)
{
return
1
;
}
async
isActive
(
queryContext
)
{
this
.
_engines
=
[
]
;
if
(
queryContext
.
searchString
.
trim
(
)
=
=
"
"
)
{
this
.
_engines
=
await
PlacesSearchAutocompleteProvider
.
tokenAliasEngines
(
)
;
}
return
this
.
_engines
.
length
;
}
async
startQuery
(
queryContext
addCallback
)
{
logger
.
info
(
Starting
query
for
{
queryContext
.
searchString
}
)
;
let
instance
=
{
}
;
this
.
queries
.
set
(
queryContext
instance
)
;
if
(
!
this
.
_engines
|
|
!
this
.
_engines
.
length
|
|
!
this
.
queries
.
has
(
queryContext
)
)
{
return
;
}
for
(
let
{
engine
tokenAliases
}
of
this
.
_engines
)
{
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
engine
:
[
engine
.
name
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
keyword
:
[
tokenAliases
[
0
]
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
query
:
[
"
"
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
engine
.
iconURI
?
engine
.
iconURI
.
spec
:
null
keywordOffer
:
UrlbarUtils
.
KEYWORD_OFFER
.
SHOW
}
)
)
;
addCallback
(
this
result
)
;
}
this
.
queries
.
delete
(
queryContext
)
;
}
getPriority
(
queryContext
)
{
return
this
.
PRIORITY
;
}
cancelQuery
(
queryContext
)
{
logger
.
info
(
Canceling
query
for
{
queryContext
.
searchString
}
)
;
this
.
queries
.
delete
(
queryContext
)
;
}
}
var
UrlbarProviderTokenAliasEngines
=
new
ProviderTokenAliasEngines
(
)
;
