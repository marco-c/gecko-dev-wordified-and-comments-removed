"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderTokenAliasEngines
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
class
ProviderTokenAliasEngines
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
this
.
_engines
=
[
]
;
}
get
name
(
)
{
return
"
TokenAliasEngines
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
HEURISTIC
;
}
get
PRIORITY
(
)
{
return
1
;
}
async
isActive
(
queryContext
)
{
let
instance
=
this
.
queryInstance
;
this
.
_autofillData
=
null
;
if
(
!
queryContext
.
searchString
.
startsWith
(
"
"
)
|
|
queryContext
.
tokens
.
length
!
=
1
)
{
return
false
;
}
this
.
_engines
=
await
UrlbarSearchUtils
.
tokenAliasEngines
(
)
;
if
(
!
this
.
_engines
.
length
)
{
return
false
;
}
if
(
instance
!
=
this
.
queryInstance
)
{
return
false
;
}
if
(
queryContext
.
searchString
.
trim
(
)
=
=
"
"
)
{
return
true
;
}
if
(
UrlbarPrefs
.
get
(
"
autoFill
"
)
&
&
queryContext
.
allowAutofill
)
{
let
result
=
this
.
_getAutofillResult
(
queryContext
)
;
if
(
result
)
{
this
.
_autofillData
=
{
result
instance
}
;
return
true
;
}
}
return
false
;
}
async
startQuery
(
queryContext
addCallback
)
{
if
(
!
this
.
_engines
|
|
!
this
.
_engines
.
length
)
{
return
;
}
if
(
queryContext
.
searchString
.
trim
(
)
=
=
"
"
)
{
for
(
let
{
engine
tokenAliases
}
of
this
.
_engines
)
{
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
engine
:
[
engine
.
name
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
keyword
:
[
tokenAliases
[
0
]
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
query
:
[
"
"
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
engine
.
iconURI
?
engine
.
iconURI
.
spec
:
"
"
keywordOffer
:
UrlbarUtils
.
KEYWORD_OFFER
.
SHOW
}
)
)
;
addCallback
(
this
result
)
;
}
}
else
if
(
this
.
_autofillData
&
&
this
.
_autofillData
.
instance
=
=
this
.
queryInstance
)
{
addCallback
(
this
this
.
_autofillData
.
result
)
;
this
.
_autofillData
=
null
;
}
}
getPriority
(
queryContext
)
{
return
this
.
PRIORITY
;
}
cancelQuery
(
queryContext
)
{
if
(
this
.
_autofillData
?
.
instance
=
=
this
.
queryInstance
)
{
this
.
_autofillData
=
null
;
}
}
_getAutofillResult
(
queryContext
)
{
let
token
=
queryContext
.
tokens
[
0
]
;
for
(
let
{
engine
tokenAliases
}
of
this
.
_engines
)
{
for
(
let
alias
of
tokenAliases
)
{
if
(
alias
.
startsWith
(
token
.
lowerCaseValue
)
)
{
let
aliasPreservingUserCase
=
token
.
value
+
alias
.
substr
(
token
.
value
.
length
)
;
let
value
=
aliasPreservingUserCase
+
"
"
;
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
engine
:
[
engine
.
name
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
keyword
:
[
aliasPreservingUserCase
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
query
:
[
"
"
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
engine
.
iconURI
?
engine
.
iconURI
.
spec
:
"
"
keywordOffer
:
UrlbarUtils
.
KEYWORD_OFFER
.
HIDE
suggestion
:
undefined
tailPrefix
:
undefined
tail
:
undefined
tailOffsetIndex
:
-
1
isSearchHistory
:
false
}
)
)
;
result
.
heuristic
=
true
;
result
.
autofill
=
{
value
selectionStart
:
queryContext
.
searchString
.
length
selectionEnd
:
value
.
length
}
;
return
result
;
}
}
}
return
null
;
}
}
var
UrlbarProviderTokenAliasEngines
=
new
ProviderTokenAliasEngines
(
)
;
