"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderPreloadedSites
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
{
UrlbarProvider
UrlbarUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
ProfileAge
:
"
resource
:
/
/
gre
/
modules
/
ProfileAge
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
jsm
"
}
)
;
const
MS_PER_DAY
=
86400000
;
function
PreloadedSite
(
url
title
)
{
this
.
uri
=
Services
.
io
.
newURI
(
url
)
;
this
.
title
=
title
;
this
.
_matchTitle
=
title
.
toLowerCase
(
)
;
this
.
_hasWWW
=
this
.
uri
.
host
.
startsWith
(
"
www
.
"
)
;
this
.
_hostWithoutWWW
=
this
.
_hasWWW
?
this
.
uri
.
host
.
slice
(
4
)
:
this
.
uri
.
host
;
}
XPCOMUtils
.
defineLazyGetter
(
lazy
"
PreloadedSiteStorage
"
(
)
=
>
Object
.
seal
(
{
sites
:
[
]
add
(
url
title
)
{
let
site
=
new
PreloadedSite
(
url
title
)
;
this
.
sites
.
push
(
site
)
;
}
populate
(
sites
)
{
this
.
sites
=
[
]
;
for
(
let
site
of
sites
)
{
this
.
add
(
site
[
0
]
site
[
1
]
)
;
}
}
}
)
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
ProfileAgeCreatedPromise
"
async
(
)
=
>
{
let
times
=
await
lazy
.
ProfileAge
(
)
;
return
times
.
created
;
}
)
;
class
ProviderPreloadedSites
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
if
(
lazy
.
UrlbarPrefs
.
get
(
"
usepreloadedtopurls
.
enabled
"
)
)
{
fetch
(
"
chrome
:
/
/
browser
/
content
/
urlbar
/
preloaded
-
top
-
urls
.
json
"
)
.
then
(
response
=
>
response
.
json
(
)
)
.
then
(
sites
=
>
lazy
.
PreloadedSiteStorage
.
populate
(
sites
)
)
.
catch
(
ex
=
>
this
.
logger
.
error
(
ex
)
)
;
}
}
get
name
(
)
{
return
"
PreloadedSites
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
HEURISTIC
;
}
async
isActive
(
queryContext
)
{
let
instance
=
this
.
queryInstance
;
this
.
_autofillData
=
null
;
await
this
.
_checkPreloadedSitesExpiry
(
)
;
if
(
instance
!
=
this
.
queryInstance
)
{
return
false
;
}
if
(
!
lazy
.
UrlbarPrefs
.
get
(
"
usepreloadedtopurls
.
enabled
"
)
)
{
return
false
;
}
if
(
!
lazy
.
UrlbarPrefs
.
get
(
"
autoFill
"
)
|
|
!
queryContext
.
allowAutofill
|
|
queryContext
.
tokens
.
length
!
=
1
)
{
return
false
;
}
if
(
queryContext
.
searchString
.
length
>
UrlbarUtils
.
MAX_TEXT_LENGTH
)
{
return
false
;
}
[
this
.
_strippedPrefix
this
.
_searchString
]
=
UrlbarUtils
.
stripURLPrefix
(
queryContext
.
searchString
)
;
if
(
!
this
.
_searchString
|
|
!
this
.
_searchString
.
length
)
{
return
false
;
}
this
.
_lowerCaseSearchString
=
this
.
_searchString
.
toLowerCase
(
)
;
this
.
_strippedPrefix
=
this
.
_strippedPrefix
.
toLowerCase
(
)
;
if
(
lazy
.
UrlbarTokenizer
.
REGEXP_SPACES
.
test
(
queryContext
.
searchString
)
)
{
return
false
;
}
let
result
=
await
this
.
_getAutofillResult
(
queryContext
)
;
if
(
instance
!
=
this
.
queryInstance
)
{
return
false
;
}
this
.
_autofillData
=
{
result
instance
}
;
return
true
;
}
async
startQuery
(
queryContext
addCallback
)
{
if
(
this
.
_autofillData
.
result
&
&
this
.
_autofillData
.
instance
=
=
this
.
queryInstance
)
{
this
.
_autofillData
.
result
.
heuristic
=
true
;
addCallback
(
this
this
.
_autofillData
.
result
)
;
this
.
_autofillData
=
null
;
}
for
(
let
site
of
lazy
.
PreloadedSiteStorage
.
sites
)
{
let
url
=
site
.
uri
.
spec
;
if
(
(
!
this
.
_strippedPrefix
|
|
url
.
startsWith
(
this
.
_strippedPrefix
)
)
&
&
(
site
.
uri
.
host
.
includes
(
this
.
_lowerCaseSearchString
)
|
|
site
.
_matchTitle
.
includes
(
this
.
_lowerCaseSearchString
)
)
)
{
let
result
=
new
lazy
.
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
.
.
.
lazy
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
title
:
[
site
.
title
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
url
:
[
url
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
UrlbarUtils
.
getIconForUrl
(
url
)
}
)
)
;
addCallback
(
this
result
)
;
}
}
}
cancelQuery
(
queryContext
)
{
if
(
this
.
_autofillData
?
.
instance
=
=
this
.
queryInstance
)
{
this
.
_autofillData
=
null
;
}
}
populatePreloadedSiteStorage
(
list
)
{
lazy
.
PreloadedSiteStorage
.
populate
(
list
)
;
}
async
_getAutofillResult
(
queryContext
)
{
let
matchedSite
=
lazy
.
PreloadedSiteStorage
.
sites
.
find
(
site
=
>
{
return
(
(
!
this
.
_strippedPrefix
|
|
site
.
uri
.
spec
.
startsWith
(
this
.
_strippedPrefix
)
)
&
&
(
site
.
uri
.
host
.
startsWith
(
this
.
_lowerCaseSearchString
)
|
|
site
.
uri
.
host
.
startsWith
(
"
www
.
"
+
this
.
_lowerCaseSearchString
)
)
)
;
}
)
;
if
(
!
matchedSite
)
{
return
null
;
}
let
url
=
matchedSite
.
uri
.
spec
;
let
[
title
]
=
UrlbarUtils
.
stripPrefixAndTrim
(
url
{
stripHttp
:
true
trimEmptyQuery
:
true
trimSlash
:
!
this
.
_searchString
.
includes
(
"
/
"
)
}
)
;
let
result
=
new
lazy
.
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
.
.
.
lazy
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
title
:
[
title
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
url
:
[
url
UrlbarUtils
.
HIGHLIGHT
.
TYPED
]
icon
:
UrlbarUtils
.
getIconForUrl
(
url
)
}
)
)
;
let
value
=
UrlbarUtils
.
stripURLPrefix
(
url
)
[
1
]
;
value
=
this
.
_strippedPrefix
+
value
.
substr
(
value
.
indexOf
(
this
.
_searchString
)
)
;
let
autofilledValue
=
queryContext
.
searchString
+
value
.
substring
(
queryContext
.
searchString
.
length
)
;
result
.
autofill
=
{
type
:
"
preloaded
"
value
:
autofilledValue
selectionStart
:
queryContext
.
searchString
.
length
selectionEnd
:
autofilledValue
.
length
}
;
return
result
;
}
async
_checkPreloadedSitesExpiry
(
)
{
if
(
!
lazy
.
UrlbarPrefs
.
get
(
"
usepreloadedtopurls
.
enabled
"
)
)
{
return
;
}
let
profileCreationDate
=
await
lazy
.
ProfileAgeCreatedPromise
;
let
daysSinceProfileCreation
=
(
Date
.
now
(
)
-
profileCreationDate
)
/
MS_PER_DAY
;
if
(
daysSinceProfileCreation
>
lazy
.
UrlbarPrefs
.
get
(
"
usepreloadedtopurls
.
expire_days
"
)
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
usepreloadedtopurls
.
enabled
"
false
)
;
}
}
}
var
UrlbarProviderPreloadedSites
=
new
ProviderPreloadedSites
(
)
;
