"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
KeywordTree
"
"
ONBOARDING_CHOICE
"
"
UrlbarQuickSuggest
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
NimbusFeatures
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
QUICK_SUGGEST_SOURCE
:
"
resource
:
/
/
/
modules
/
UrlbarProviderQuickSuggest
.
jsm
"
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
js
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProviderQuickSuggest
:
"
resource
:
/
/
/
modules
/
UrlbarProviderQuickSuggest
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
TextDecoder
"
]
)
;
const
log
=
console
.
createInstance
(
{
prefix
:
"
QuickSuggest
"
maxLogLevel
:
UrlbarPrefs
.
get
(
"
quicksuggest
.
log
"
)
?
"
All
"
:
"
Warn
"
}
)
;
const
RS_COLLECTION
=
"
quicksuggest
"
;
const
NONSPONSORED_IAB_CATEGORIES
=
new
Set
(
[
"
5
-
Education
"
]
)
;
const
FEATURE_AVAILABLE
=
"
quickSuggestEnabled
"
;
const
SEEN_DIALOG_PREF
=
"
quicksuggest
.
showedOnboardingDialog
"
;
const
RESTARTS_PREF
=
"
quicksuggest
.
seenRestarts
"
;
const
ONBOARDING_CHOICE
=
{
ACCEPT
:
"
accept
"
REJECT
:
"
reject
"
DISMISSED_ESCAPE_KEY
:
"
dismissed_escape_key
"
DISMISSED_OTHER
:
"
dismissed_other
"
LEARN_MORE
:
"
learn_more
"
NOT_NOW
:
"
not_now_link
"
}
;
const
ONBOARDING_URI
=
"
chrome
:
/
/
browser
/
content
/
urlbar
/
quicksuggestOnboarding
.
html
"
;
const
SUGGESTION_SCORE
=
0
.
2
;
class
Suggestions
{
constructor
(
)
{
UrlbarPrefs
.
addObserver
(
this
)
;
NimbusFeatures
.
urlbar
.
onUpdate
(
(
)
=
>
this
.
_queueSettingsSetup
(
)
)
;
this
.
_queueSettingsTask
(
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
Services
.
tm
.
idleDispatchToMainThread
(
(
)
=
>
{
this
.
_queueSettingsSetup
(
)
;
resolve
(
)
;
}
)
;
}
)
;
}
)
;
}
get
SUGGESTION_SCORE
(
)
{
return
SUGGESTION_SCORE
;
}
get
readyPromise
(
)
{
if
(
!
this
.
_settingsTaskQueue
.
length
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
resolve
=
>
{
this
.
_emptySettingsTaskQueueCallbacks
.
push
(
resolve
)
;
}
)
;
}
async
query
(
phrase
)
{
log
.
info
(
"
Handling
query
for
"
phrase
)
;
phrase
=
phrase
.
toLowerCase
(
)
;
let
resultID
=
this
.
_tree
.
get
(
phrase
)
;
if
(
resultID
=
=
=
null
)
{
return
null
;
}
let
result
=
this
.
_results
.
get
(
resultID
)
;
if
(
!
result
)
{
return
null
;
}
return
{
full_keyword
:
this
.
getFullKeyword
(
phrase
result
.
keywords
)
title
:
result
.
title
url
:
result
.
url
click_url
:
result
.
click_url
impression_url
:
result
.
impression_url
block_id
:
result
.
id
advertiser
:
result
.
advertiser
is_sponsored
:
!
NONSPONSORED_IAB_CATEGORIES
.
has
(
result
.
iab_category
)
score
:
SUGGESTION_SCORE
source
:
QUICK_SUGGEST_SOURCE
.
REMOTE_SETTINGS
icon
:
await
this
.
_fetchIcon
(
result
.
icon
)
position
:
result
.
position
}
;
}
getFullKeyword
(
query
keywords
)
{
let
longerPhrase
;
let
trimmedQuery
=
query
.
trim
(
)
;
let
queryWords
=
trimmedQuery
.
split
(
"
"
)
;
for
(
let
phrase
of
keywords
)
{
if
(
phrase
.
startsWith
(
query
)
)
{
let
trimmedPhrase
=
phrase
.
trim
(
)
;
let
phraseWords
=
trimmedPhrase
.
split
(
"
"
)
;
let
extra
=
query
.
endsWith
(
"
"
)
?
1
:
0
;
let
len
=
queryWords
.
length
+
extra
;
if
(
len
<
phraseWords
.
length
)
{
return
phraseWords
.
slice
(
0
len
)
.
join
(
"
"
)
;
}
if
(
query
.
length
<
phrase
.
length
&
&
(
!
longerPhrase
|
|
longerPhrase
.
length
<
trimmedPhrase
.
length
)
)
{
longerPhrase
=
trimmedPhrase
;
}
}
}
return
longerPhrase
|
|
trimmedQuery
;
}
async
maybeShowOnboardingDialog
(
)
{
await
UrlbarPrefs
.
firefoxSuggestScenarioStartupPromise
;
if
(
!
UrlbarPrefs
.
get
(
FEATURE_AVAILABLE
)
|
|
!
UrlbarPrefs
.
get
(
"
quickSuggestShouldShowOnboardingDialog
"
)
|
|
UrlbarPrefs
.
get
(
SEEN_DIALOG_PREF
)
|
|
UrlbarPrefs
.
get
(
"
quicksuggest
.
dataCollection
.
enabled
"
)
)
{
return
false
;
}
let
restartsSeen
=
UrlbarPrefs
.
get
(
RESTARTS_PREF
)
;
if
(
restartsSeen
<
UrlbarPrefs
.
get
(
"
quickSuggestShowOnboardingDialogAfterNRestarts
"
)
)
{
UrlbarPrefs
.
set
(
RESTARTS_PREF
restartsSeen
+
1
)
;
return
false
;
}
let
win
=
BrowserWindowTracker
.
getTopWindow
(
)
;
let
escapeKeyPressed
=
false
;
let
keyListener
=
keyEvent
=
>
{
if
(
keyEvent
.
keyCode
=
=
keyEvent
.
DOM_VK_ESCAPE
&
&
win
.
gDialogBox
.
dialog
?
.
frameContentWindow
?
.
document
?
.
documentURI
=
=
ONBOARDING_URI
)
{
escapeKeyPressed
=
true
;
}
}
;
win
.
addEventListener
(
"
keydown
"
keyListener
true
)
;
let
params
=
{
choice
:
undefined
}
;
await
win
.
gDialogBox
.
open
(
ONBOARDING_URI
params
)
;
win
.
removeEventListener
(
"
keydown
"
keyListener
true
)
;
UrlbarPrefs
.
set
(
SEEN_DIALOG_PREF
true
)
;
let
optedIn
=
params
.
choice
=
=
ONBOARDING_CHOICE
.
ACCEPT
;
UrlbarPrefs
.
set
(
"
quicksuggest
.
dataCollection
.
enabled
"
optedIn
)
;
switch
(
params
.
choice
)
{
case
ONBOARDING_CHOICE
.
LEARN_MORE
:
win
.
openTrustedLinkIn
(
UrlbarProviderQuickSuggest
.
helpUrl
"
tab
"
{
fromChrome
:
true
}
)
;
break
;
case
ONBOARDING_CHOICE
.
ACCEPT
:
case
ONBOARDING_CHOICE
.
REJECT
:
case
ONBOARDING_CHOICE
.
NOT_NOW
:
break
;
default
:
if
(
escapeKeyPressed
)
{
params
.
choice
=
ONBOARDING_CHOICE
.
DISMISSED_ESCAPE_KEY
;
break
;
}
params
.
choice
=
ONBOARDING_CHOICE
.
DISMISSED_OTHER
;
break
;
}
UrlbarPrefs
.
set
(
"
quicksuggest
.
onboardingDialogChoice
"
params
.
choice
)
;
Services
.
telemetry
.
recordEvent
(
"
contextservices
.
quicksuggest
"
"
opt_in_dialog
"
params
.
choice
)
;
return
true
;
}
onPrefChanged
(
pref
)
{
switch
(
pref
)
{
case
"
suggest
.
quicksuggest
.
nonsponsored
"
:
case
"
suggest
.
quicksuggest
.
sponsored
"
:
this
.
_queueSettingsSetup
(
)
;
break
;
}
}
_rs
=
null
;
_settingsTaskQueue
=
[
]
;
_emptySettingsTaskQueueCallbacks
=
[
]
;
_results
=
new
Map
(
)
;
_tree
=
new
KeywordTree
(
)
;
_queueSettingsSetup
(
)
{
this
.
_queueSettingsTask
(
(
)
=
>
{
let
enabled
=
UrlbarPrefs
.
get
(
FEATURE_AVAILABLE
)
&
&
(
UrlbarPrefs
.
get
(
"
suggest
.
quicksuggest
.
nonsponsored
"
)
|
|
UrlbarPrefs
.
get
(
"
suggest
.
quicksuggest
.
sponsored
"
)
)
;
if
(
enabled
&
&
!
this
.
_rs
)
{
this
.
_onSettingsSync
=
(
.
.
.
args
)
=
>
this
.
_queueSettingsSync
(
.
.
.
args
)
;
this
.
_rs
=
RemoteSettings
(
RS_COLLECTION
)
;
this
.
_rs
.
on
(
"
sync
"
this
.
_onSettingsSync
)
;
this
.
_queueSettingsSync
(
)
;
}
else
if
(
!
enabled
&
&
this
.
_rs
)
{
this
.
_rs
.
off
(
"
sync
"
this
.
_onSettingsSync
)
;
this
.
_rs
=
null
;
this
.
_onSettingsSync
=
null
;
}
}
)
;
}
_queueSettingsSync
(
event
=
null
)
{
this
.
_queueSettingsTask
(
async
(
)
=
>
{
if
(
event
?
.
data
?
.
deleted
)
{
await
Promise
.
all
(
event
.
data
.
deleted
.
filter
(
d
=
>
d
.
attachment
)
.
map
(
entry
=
>
this
.
_rs
.
attachments
.
delete
(
entry
)
)
)
;
}
let
data
=
await
this
.
_rs
.
get
(
{
filters
:
{
type
:
"
data
"
}
}
)
;
let
icons
=
await
this
.
_rs
.
get
(
{
filters
:
{
type
:
"
icon
"
}
}
)
;
await
Promise
.
all
(
icons
.
map
(
r
=
>
this
.
_rs
.
attachments
.
download
(
r
)
)
)
;
this
.
_results
=
new
Map
(
)
;
this
.
_tree
=
new
KeywordTree
(
)
;
for
(
let
record
of
data
)
{
let
{
buffer
}
=
await
this
.
_rs
.
attachments
.
download
(
record
{
useCache
:
true
}
)
;
let
results
=
JSON
.
parse
(
new
TextDecoder
(
"
utf
-
8
"
)
.
decode
(
buffer
)
)
;
this
.
_addResults
(
results
)
;
}
}
)
;
}
_addResults
(
results
)
{
for
(
let
result
of
results
)
{
this
.
_results
.
set
(
result
.
id
result
)
;
for
(
let
keyword
of
result
.
keywords
)
{
this
.
_tree
.
set
(
keyword
result
.
id
)
;
}
}
}
_queueSettingsTask
(
callback
)
{
this
.
_settingsTaskQueue
.
push
(
callback
)
;
if
(
this
.
_settingsTaskQueue
.
length
=
=
1
)
{
this
.
_doNextSettingsTask
(
)
;
}
}
async
_doNextSettingsTask
(
)
{
if
(
!
this
.
_settingsTaskQueue
.
length
)
{
while
(
this
.
_emptySettingsTaskQueueCallbacks
.
length
)
{
let
callback
=
this
.
_emptySettingsTaskQueueCallbacks
.
shift
(
)
;
callback
(
)
;
}
return
;
}
let
task
=
this
.
_settingsTaskQueue
[
0
]
;
try
{
await
task
(
)
;
}
catch
(
error
)
{
log
.
error
(
error
)
;
}
this
.
_settingsTaskQueue
.
shift
(
)
;
this
.
_doNextSettingsTask
(
)
;
}
async
_fetchIcon
(
path
)
{
if
(
!
path
|
|
!
this
.
_rs
)
{
return
null
;
}
let
record
=
(
await
this
.
_rs
.
get
(
{
filters
:
{
id
:
icon
-
{
path
}
}
}
)
)
.
pop
(
)
;
if
(
!
record
)
{
return
null
;
}
return
this
.
_rs
.
attachments
.
download
(
record
)
;
}
}
const
RESULT_KEY
=
"
^
"
;
class
KeywordTree
{
constructor
(
)
{
this
.
tree
=
new
Map
(
)
;
}
set
(
keyword
id
)
{
if
(
keyword
.
includes
(
RESULT_KEY
)
)
{
throw
new
Error
(
"
{
RESULT_KEY
}
"
is
reserved
)
;
}
let
tree
=
this
.
tree
;
for
(
let
x
=
0
c
=
"
"
;
(
c
=
keyword
.
charAt
(
x
)
)
;
x
+
+
)
{
let
child
=
tree
.
get
(
c
)
|
|
new
Map
(
)
;
tree
.
set
(
c
child
)
;
tree
=
child
;
}
tree
.
set
(
RESULT_KEY
id
)
;
}
get
(
query
)
{
query
=
query
.
trimStart
(
)
+
RESULT_KEY
;
let
node
=
this
.
tree
;
let
phrase
=
"
"
;
while
(
phrase
.
length
<
query
.
length
)
{
let
key
=
query
[
phrase
.
length
]
;
let
child
=
node
.
get
(
key
)
;
if
(
!
child
)
{
key
=
null
;
for
(
let
childKey
of
node
.
keys
(
)
)
{
let
childPhrase
=
phrase
+
childKey
;
if
(
childPhrase
=
=
query
.
substring
(
0
childPhrase
.
length
)
)
{
key
=
childKey
;
break
;
}
}
if
(
!
key
)
{
return
null
;
}
child
=
node
.
get
(
key
)
;
}
node
=
child
;
phrase
+
=
key
;
}
if
(
phrase
.
length
!
=
query
.
length
)
{
return
null
;
}
return
node
;
}
flatten
(
)
{
this
.
_flatten
(
"
"
this
.
tree
null
)
;
}
_flatten
(
key
node
parent
)
{
for
(
let
[
childKey
child
]
of
[
.
.
.
node
.
entries
(
)
]
)
{
if
(
childKey
!
=
RESULT_KEY
)
{
this
.
_flatten
(
childKey
child
node
)
;
}
}
if
(
node
.
size
=
=
1
&
&
parent
)
{
parent
.
delete
(
key
)
;
let
childKey
=
[
.
.
.
node
.
keys
(
)
]
[
0
]
;
parent
.
set
(
key
+
childKey
node
.
get
(
childKey
)
)
;
}
}
toJSONObject
(
map
=
this
.
tree
)
{
let
tmp
=
{
}
;
for
(
let
[
key
val
]
of
map
)
{
if
(
val
instanceof
Map
)
{
tmp
[
key
]
=
this
.
toJSONObject
(
val
)
;
}
else
{
tmp
[
key
]
=
val
;
}
}
return
tmp
;
}
fromJSON
(
json
)
{
this
.
tree
=
this
.
JSONObjectToMap
(
json
)
;
}
JSONObjectToMap
(
obj
)
{
let
map
=
new
Map
(
)
;
for
(
let
key
of
Object
.
keys
(
obj
)
)
{
if
(
typeof
obj
[
key
]
=
=
"
object
"
)
{
map
.
set
(
key
this
.
JSONObjectToMap
(
obj
[
key
]
)
)
;
}
else
{
map
.
set
(
key
obj
[
key
]
)
;
}
}
return
map
;
}
}
let
UrlbarQuickSuggest
=
new
Suggestions
(
)
;
