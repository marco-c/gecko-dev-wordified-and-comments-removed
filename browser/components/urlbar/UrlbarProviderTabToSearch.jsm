"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderTabToSearch
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
UrlbarView
:
"
resource
:
/
/
/
modules
/
UrlbarView
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarProviderAutofill
:
"
resource
:
/
/
/
modules
/
UrlbarProviderAutofill
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
jsm
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
const
DYNAMIC_RESULT_TYPE
=
"
onboardTabToSearch
"
;
const
VIEW_TEMPLATE
=
{
attributes
:
{
role
:
"
group
"
selectable
:
"
true
"
}
children
:
[
{
name
:
"
no
-
wrap
"
tag
:
"
span
"
classList
:
[
"
urlbarView
-
no
-
wrap
"
]
children
:
[
{
name
:
"
icon
"
tag
:
"
img
"
classList
:
[
"
urlbarView
-
favicon
"
]
}
{
name
:
"
text
-
container
"
tag
:
"
span
"
children
:
[
{
name
:
"
first
-
row
-
container
"
tag
:
"
span
"
children
:
[
{
name
:
"
title
"
tag
:
"
span
"
classList
:
[
"
urlbarView
-
title
"
]
children
:
[
{
name
:
"
titleStrong
"
tag
:
"
strong
"
}
]
}
{
name
:
"
title
-
separator
"
tag
:
"
span
"
classList
:
[
"
urlbarView
-
title
-
separator
"
]
}
{
name
:
"
action
"
tag
:
"
span
"
classList
:
[
"
urlbarView
-
action
"
]
attributes
:
{
"
slide
-
in
"
:
true
}
}
]
}
{
name
:
"
description
"
tag
:
"
span
"
}
]
}
]
}
]
}
;
function
initializeDynamicResult
(
)
{
UrlbarResult
.
addDynamicResultType
(
DYNAMIC_RESULT_TYPE
)
;
UrlbarView
.
addDynamicViewTemplate
(
DYNAMIC_RESULT_TYPE
VIEW_TEMPLATE
)
;
}
class
ProviderTabToSearch
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
this
.
onboardingEnginesShown
=
new
Set
(
)
;
}
get
name
(
)
{
return
"
TabToSearch
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
;
}
async
isActive
(
queryContext
)
{
return
(
queryContext
.
searchString
&
&
queryContext
.
tokens
.
length
=
=
1
&
&
!
queryContext
.
searchMode
&
&
UrlbarPrefs
.
get
(
"
suggest
.
engines
"
)
)
;
}
getPriority
(
queryContext
)
{
return
0
;
}
getViewUpdate
(
result
)
{
return
{
icon
:
{
attributes
:
{
src
:
result
.
payload
.
icon
}
}
titleStrong
:
{
l10n
:
{
id
:
"
urlbar
-
result
-
action
-
search
-
w
-
engine
"
args
:
{
engine
:
result
.
payload
.
engine
}
}
}
action
:
{
l10n
:
{
id
:
UrlbarUtils
.
WEB_ENGINE_NAMES
.
has
(
result
.
payload
.
engine
)
?
"
urlbar
-
result
-
action
-
tabtosearch
-
web
"
:
"
urlbar
-
result
-
action
-
tabtosearch
-
other
-
engine
"
args
:
{
engine
:
result
.
payload
.
engine
}
}
}
description
:
{
l10n
:
{
id
:
"
urlbar
-
tabtosearch
-
onboard
"
}
}
}
;
}
pickResult
(
result
element
)
{
element
.
ownerGlobal
.
gURLBar
.
maybeConfirmSearchModeFromResult
(
{
result
checkValue
:
false
}
)
;
}
onSelection
(
result
element
)
{
if
(
result
.
payload
.
dynamicType
&
&
(
!
this
.
onboardingInteractionAtTime
|
|
this
.
onboardingInteractionAtTime
<
Date
.
now
(
)
-
1000
*
60
*
5
)
)
{
let
interactionsLeft
=
UrlbarPrefs
.
get
(
"
tabToSearch
.
onboard
.
interactionsLeft
"
)
;
if
(
interactionsLeft
>
0
)
{
UrlbarPrefs
.
set
(
"
tabToSearch
.
onboard
.
interactionsLeft
"
-
-
interactionsLeft
)
;
}
this
.
onboardingInteractionAtTime
=
Date
.
now
(
)
;
}
}
onEngagement
(
isPrivate
state
)
{
if
(
!
this
.
onboardingEnginesShown
.
size
)
{
return
;
}
Services
.
telemetry
.
keyedScalarAdd
(
"
urlbar
.
tips
"
"
tabtosearch_onboard
-
shown
"
this
.
onboardingEnginesShown
.
size
)
;
this
.
onboardingEnginesShown
.
clear
(
)
;
}
get
deferUserSelection
(
)
{
return
true
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
[
searchStr
]
=
UrlbarUtils
.
stripPrefixAndTrim
(
queryContext
.
searchString
{
stripWww
:
true
trimSlash
:
true
}
)
;
if
(
!
UrlbarTokenizer
.
looksLikeOrigin
(
searchStr
{
ignoreKnownDomains
:
true
noIp
:
true
}
)
)
{
return
;
}
if
(
searchStr
.
includes
(
"
.
"
)
)
{
searchStr
=
UrlbarUtils
.
stripPublicSuffixFromHost
(
searchStr
)
;
}
let
engines
=
await
UrlbarSearchUtils
.
enginesForDomainPrefix
(
searchStr
{
matchAllDomainLevels
:
true
onlyEnabled
:
true
}
)
;
if
(
!
engines
.
length
)
{
return
;
}
const
onboardingInteractionsLeft
=
UrlbarPrefs
.
get
(
"
tabToSearch
.
onboard
.
interactionsLeft
"
)
;
let
partialMatchEnginesByHost
=
new
Map
(
)
;
for
(
let
engine
of
engines
)
{
let
[
host
]
=
UrlbarUtils
.
stripPrefixAndTrim
(
engine
.
getResultDomain
(
)
{
stripWww
:
true
}
)
;
if
(
host
.
startsWith
(
searchStr
.
toLocaleLowerCase
(
)
)
)
{
if
(
onboardingInteractionsLeft
>
0
)
{
addCallback
(
this
makeOnboardingResult
(
engine
)
)
;
}
else
{
addCallback
(
this
makeResult
(
queryContext
engine
)
)
;
}
continue
;
}
if
(
host
.
includes
(
"
.
"
+
searchStr
.
toLocaleLowerCase
(
)
)
)
{
partialMatchEnginesByHost
.
set
(
engine
.
getResultDomain
(
)
engine
)
;
}
let
searchFormHost
;
try
{
searchFormHost
=
new
URL
(
engine
.
searchForm
)
.
host
;
}
catch
(
ex
)
{
}
if
(
searchFormHost
?
.
includes
(
"
.
"
+
searchStr
)
)
{
partialMatchEnginesByHost
.
set
(
searchFormHost
engine
)
;
}
}
if
(
partialMatchEnginesByHost
.
size
)
{
let
host
=
await
UrlbarProviderAutofill
.
getTopHostOverThreshold
(
queryContext
Array
.
from
(
partialMatchEnginesByHost
.
keys
(
)
)
)
;
if
(
host
)
{
let
engine
=
partialMatchEnginesByHost
.
get
(
host
)
;
if
(
onboardingInteractionsLeft
>
0
)
{
addCallback
(
this
makeOnboardingResult
(
engine
true
)
)
;
}
else
{
addCallback
(
this
makeResult
(
queryContext
engine
true
)
)
;
}
}
}
}
}
function
makeOnboardingResult
(
engine
satisfiesAutofillThreshold
=
false
)
{
let
[
url
]
=
UrlbarUtils
.
stripPrefixAndTrim
(
engine
.
getResultDomain
(
)
{
stripWww
:
true
}
)
;
url
=
url
.
substr
(
0
url
.
length
-
engine
.
searchUrlPublicSuffix
.
length
)
;
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
DYNAMIC
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
{
engine
:
engine
.
name
url
keywordOffer
:
UrlbarUtils
.
KEYWORD_OFFER
.
SHOW
icon
:
UrlbarUtils
.
ICON
.
SEARCH_GLASS_INVERTED
dynamicType
:
DYNAMIC_RESULT_TYPE
satisfiesAutofillThreshold
}
)
;
result
.
resultSpan
=
2
;
result
.
suggestedIndex
=
1
;
return
result
;
}
function
makeResult
(
context
engine
satisfiesAutofillThreshold
=
false
)
{
let
[
url
]
=
UrlbarUtils
.
stripPrefixAndTrim
(
engine
.
getResultDomain
(
)
{
stripWww
:
true
}
)
;
url
=
url
.
substr
(
0
url
.
length
-
engine
.
searchUrlPublicSuffix
.
length
)
;
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
context
.
tokens
{
engine
:
engine
.
name
url
keywordOffer
:
UrlbarUtils
.
KEYWORD_OFFER
.
SHOW
icon
:
UrlbarUtils
.
ICON
.
SEARCH_GLASS_INVERTED
query
:
"
"
satisfiesAutofillThreshold
}
)
)
;
result
.
suggestedIndex
=
1
;
return
result
;
}
var
UrlbarProviderTabToSearch
=
new
ProviderTabToSearch
(
)
;
initializeDynamicResult
(
)
;
