"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderTabToSearch
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
class
ProviderTabToSearch
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
}
get
name
(
)
{
return
"
TabToSearch
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
;
}
async
isActive
(
queryContext
)
{
return
(
!
queryContext
.
searchMode
&
&
UrlbarPrefs
.
get
(
"
update2
"
)
&
&
UrlbarPrefs
.
get
(
"
update2
.
tabToComplete
"
)
)
;
}
getPriority
(
queryContext
)
{
return
0
;
}
async
startQuery
(
queryContext
addCallback
)
{
let
[
searchStr
]
=
UrlbarUtils
.
stripPrefixAndTrim
(
queryContext
.
searchString
{
stripWww
:
true
trimSlash
:
true
}
)
;
let
engines
=
await
UrlbarSearchUtils
.
enginesForDomainPrefix
(
searchStr
)
;
for
(
let
engine
of
engines
)
{
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
engine
:
engine
.
name
url
:
engine
.
getResultDomain
(
)
keywordOffer
:
UrlbarUtils
.
KEYWORD_OFFER
.
SHOW
icon
:
engine
.
iconURI
?
.
spec
query
:
"
"
}
)
)
;
result
.
suggestedIndex
=
1
;
addCallback
(
this
result
)
;
}
}
}
var
UrlbarProviderTabToSearch
=
new
ProviderTabToSearch
(
)
;
