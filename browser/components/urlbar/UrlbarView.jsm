"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarView
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
class
UrlbarView
{
constructor
(
urlbar
)
{
this
.
urlbar
=
urlbar
;
this
.
panel
=
urlbar
.
panel
;
this
.
controller
=
urlbar
.
controller
;
this
.
document
=
urlbar
.
panel
.
ownerDocument
;
this
.
window
=
this
.
document
.
defaultView
;
this
.
_mainContainer
=
this
.
panel
.
querySelector
(
"
.
urlbarView
-
body
-
inner
"
)
;
this
.
_rows
=
this
.
panel
.
querySelector
(
"
.
urlbarView
-
results
"
)
;
this
.
_rows
.
addEventListener
(
"
overflow
"
event
=
>
{
if
(
event
.
target
.
classList
.
contains
(
"
urlbarView
-
row
-
inner
"
)
)
{
event
.
target
.
toggleAttribute
(
"
overflow
"
true
)
;
}
}
)
;
this
.
_rows
.
addEventListener
(
"
underflow
"
event
=
>
{
if
(
event
.
target
.
classList
.
contains
(
"
urlbarView
-
row
-
inner
"
)
)
{
event
.
target
.
toggleAttribute
(
"
overflow
"
false
)
;
}
}
)
;
this
.
controller
.
addQueryListener
(
this
)
;
}
open
(
)
{
this
.
panel
.
removeAttribute
(
"
hidden
"
)
;
let
panelDirection
=
this
.
panel
.
style
.
direction
;
if
(
!
panelDirection
)
{
panelDirection
=
this
.
panel
.
style
.
direction
=
this
.
window
.
getComputedStyle
(
this
.
urlbar
.
textbox
)
.
direction
;
}
let
documentRect
=
this
.
_getBoundsWithoutFlushing
(
this
.
document
.
documentElement
)
;
let
width
=
documentRect
.
right
-
documentRect
.
left
;
this
.
panel
.
setAttribute
(
"
width
"
width
)
;
this
.
_mainContainer
.
style
.
maxWidth
=
(
width
-
2
)
+
"
px
"
;
this
.
panel
.
openPopup
(
this
.
urlbar
.
textbox
.
closest
(
"
toolbar
"
)
"
after_end
"
0
-
1
)
;
this
.
_rows
.
firstElementChild
.
toggleAttribute
(
"
selected
"
true
)
;
}
close
(
)
{
this
.
panel
.
hidePopup
(
)
;
}
onQueryStarted
(
queryContext
)
{
this
.
_rows
.
textContent
=
"
"
;
}
onQueryCancelled
(
queryContext
)
{
}
onQueryFinished
(
queryContext
)
{
}
onQueryResults
(
queryContext
)
{
this
.
_rows
.
textContent
=
"
"
;
this
.
_queryContext
=
queryContext
;
for
(
let
resultIndex
in
queryContext
.
results
)
{
this
.
_addRow
(
resultIndex
)
;
}
this
.
open
(
)
;
}
_getBoundsWithoutFlushing
(
element
)
{
return
this
.
window
.
windowUtils
.
getBoundsWithoutFlushing
(
element
)
;
}
_createElement
(
name
)
{
return
this
.
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
name
)
;
}
_addRow
(
resultIndex
)
{
let
result
=
this
.
_queryContext
.
results
[
resultIndex
]
;
let
item
=
this
.
_createElement
(
"
div
"
)
;
item
.
className
=
"
urlbarView
-
row
"
;
item
.
addEventListener
(
"
click
"
this
)
;
item
.
setAttribute
(
"
resultIndex
"
resultIndex
)
;
if
(
result
.
type
=
=
UrlbarUtils
.
MATCH_TYPE
.
TAB_SWITCH
)
{
item
.
setAttribute
(
"
action
"
"
switch
-
to
-
tab
"
)
;
}
let
content
=
this
.
_createElement
(
"
span
"
)
;
content
.
className
=
"
urlbarView
-
row
-
inner
"
;
item
.
appendChild
(
content
)
;
let
actionIcon
=
this
.
_createElement
(
"
span
"
)
;
actionIcon
.
className
=
"
urlbarView
-
action
-
icon
"
;
content
.
appendChild
(
actionIcon
)
;
let
favicon
=
this
.
_createElement
(
"
span
"
)
;
favicon
.
className
=
"
urlbarView
-
favicon
"
;
content
.
appendChild
(
favicon
)
;
let
title
=
this
.
_createElement
(
"
span
"
)
;
title
.
className
=
"
urlbarView
-
title
"
;
title
.
textContent
=
result
.
title
|
|
result
.
url
;
content
.
appendChild
(
title
)
;
let
secondary
=
this
.
_createElement
(
"
span
"
)
;
secondary
.
className
=
"
urlbarView
-
secondary
"
;
if
(
result
.
type
=
=
UrlbarUtils
.
MATCH_TYPE
.
TAB_SWITCH
)
{
secondary
.
classList
.
add
(
"
urlbarView
-
action
"
)
;
secondary
.
textContent
=
"
Switch
to
Tab
"
;
}
else
{
secondary
.
classList
.
add
(
"
urlbarView
-
url
"
)
;
secondary
.
textContent
=
result
.
url
;
}
content
.
appendChild
(
secondary
)
;
this
.
_rows
.
appendChild
(
item
)
;
}
handleEvent
(
event
)
{
let
methodName
=
"
_on_
"
+
event
.
type
;
if
(
methodName
in
this
)
{
this
[
methodName
]
(
event
)
;
}
else
{
throw
"
Unrecognized
urlbar
event
:
"
+
event
.
type
;
}
}
_on_click
(
event
)
{
let
row
=
event
.
target
;
while
(
!
row
.
classList
.
contains
(
"
urlbarView
-
row
"
)
)
{
row
=
row
.
parentNode
;
}
let
resultIndex
=
row
.
getAttribute
(
"
resultIndex
"
)
;
let
result
=
this
.
_queryContext
.
results
[
resultIndex
]
;
if
(
result
)
{
this
.
urlbar
.
resultSelected
(
event
result
)
;
}
this
.
close
(
)
;
}
}
