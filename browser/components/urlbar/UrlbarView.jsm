"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarView
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
class
UrlbarView
{
constructor
(
input
)
{
this
.
input
=
input
;
this
.
panel
=
input
.
panel
;
this
.
controller
=
input
.
controller
;
this
.
document
=
this
.
panel
.
ownerDocument
;
this
.
window
=
this
.
document
.
defaultView
;
this
.
_mainContainer
=
this
.
panel
.
querySelector
(
"
.
urlbarView
-
body
-
inner
"
)
;
this
.
_rows
=
this
.
panel
.
querySelector
(
"
.
urlbarView
-
results
"
)
;
this
.
_rows
.
addEventListener
(
"
click
"
this
)
;
this
.
_rows
.
addEventListener
(
"
overflow
"
this
)
;
this
.
_rows
.
addEventListener
(
"
underflow
"
this
)
;
this
.
controller
.
setView
(
this
)
;
this
.
controller
.
addQueryListener
(
this
)
;
}
get
oneOffSearchButtons
(
)
{
return
this
.
_oneOffSearchButtons
|
|
(
this
.
_oneOffSearchButtons
=
new
this
.
window
.
SearchOneOffs
(
this
.
panel
.
querySelector
(
"
.
search
-
one
-
offs
"
)
)
)
;
}
get
isOpen
(
)
{
return
this
.
panel
.
state
=
=
"
open
"
|
|
this
.
panel
.
state
=
=
"
showing
"
;
}
selectNextItem
(
{
reverse
=
false
}
=
{
}
)
{
if
(
!
this
.
isOpen
)
{
this
.
open
(
)
;
return
;
}
let
row
;
if
(
reverse
)
{
row
=
this
.
_selected
.
previousElementSibling
|
|
this
.
_rows
.
lastElementChild
;
}
else
{
row
=
this
.
_selected
.
nextElementSibling
|
|
this
.
_rows
.
firstElementChild
;
}
this
.
_selected
.
toggleAttribute
(
"
selected
"
false
)
;
this
.
_selected
=
row
;
row
.
toggleAttribute
(
"
selected
"
true
)
;
let
resultIndex
=
row
.
getAttribute
(
"
resultIndex
"
)
;
let
result
=
this
.
_queryContext
.
results
[
resultIndex
]
;
if
(
result
)
{
this
.
input
.
setValueFromResult
(
result
)
;
}
}
open
(
)
{
this
.
panel
.
removeAttribute
(
"
hidden
"
)
;
this
.
_alignPanel
(
)
;
this
.
oneOffSearchButtons
;
this
.
panel
.
openPopup
(
this
.
input
.
textbox
.
closest
(
"
toolbar
"
)
"
after_end
"
0
-
1
)
;
this
.
_selected
=
this
.
_rows
.
firstElementChild
;
this
.
_selected
.
toggleAttribute
(
"
selected
"
true
)
;
}
close
(
)
{
this
.
panel
.
hidePopup
(
)
;
}
onQueryStarted
(
queryContext
)
{
this
.
_rows
.
textContent
=
"
"
;
}
onQueryCancelled
(
queryContext
)
{
}
onQueryFinished
(
queryContext
)
{
}
onQueryResults
(
queryContext
)
{
this
.
_rows
.
textContent
=
"
"
;
this
.
_queryContext
=
queryContext
;
for
(
let
resultIndex
in
queryContext
.
results
)
{
this
.
_addRow
(
resultIndex
)
;
}
this
.
open
(
)
;
}
_getBoundsWithoutFlushing
(
element
)
{
return
this
.
window
.
windowUtils
.
getBoundsWithoutFlushing
(
element
)
;
}
_createElement
(
name
)
{
return
this
.
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
name
)
;
}
_alignPanel
(
)
{
let
documentRect
=
this
.
_getBoundsWithoutFlushing
(
this
.
document
.
documentElement
)
;
let
width
=
documentRect
.
right
-
documentRect
.
left
;
this
.
panel
.
setAttribute
(
"
width
"
width
)
;
this
.
_mainContainer
.
style
.
maxWidth
=
(
width
-
2
)
+
"
px
"
;
let
boundToCheck
=
this
.
window
.
RTL_UI
?
"
right
"
:
"
left
"
;
let
inputRect
=
this
.
_getBoundsWithoutFlushing
(
this
.
input
.
textbox
)
;
let
startOffset
=
Math
.
abs
(
inputRect
[
boundToCheck
]
-
documentRect
[
boundToCheck
]
)
;
let
alignSiteIcons
=
startOffset
/
width
<
=
0
.
3
|
|
startOffset
<
=
250
;
if
(
alignSiteIcons
)
{
let
boundToCheckEnd
=
this
.
window
.
RTL_UI
?
"
left
"
:
"
right
"
;
let
endOffset
=
Math
.
abs
(
inputRect
[
boundToCheckEnd
]
-
documentRect
[
boundToCheckEnd
]
)
;
if
(
endOffset
>
startOffset
*
2
)
{
endOffset
=
startOffset
;
}
let
identityIcon
=
this
.
document
.
getElementById
(
"
identity
-
icon
"
)
;
let
identityRect
=
this
.
_getBoundsWithoutFlushing
(
identityIcon
)
;
let
start
=
this
.
window
.
RTL_UI
?
documentRect
.
right
-
identityRect
.
right
:
identityRect
.
left
;
this
.
panel
.
style
.
setProperty
(
"
-
-
item
-
padding
-
start
"
Math
.
round
(
start
)
+
"
px
"
)
;
this
.
panel
.
style
.
setProperty
(
"
-
-
item
-
padding
-
end
"
Math
.
round
(
endOffset
)
+
"
px
"
)
;
}
else
{
this
.
panel
.
style
.
removeProperty
(
"
-
-
item
-
padding
-
start
"
)
;
this
.
panel
.
style
.
removeProperty
(
"
-
-
item
-
padding
-
end
"
)
;
}
}
_addRow
(
resultIndex
)
{
let
result
=
this
.
_queryContext
.
results
[
resultIndex
]
;
let
item
=
this
.
_createElement
(
"
div
"
)
;
item
.
className
=
"
urlbarView
-
row
"
;
item
.
setAttribute
(
"
resultIndex
"
resultIndex
)
;
if
(
result
.
type
=
=
UrlbarUtils
.
MATCH_TYPE
.
TAB_SWITCH
)
{
item
.
setAttribute
(
"
type
"
"
switchtab
"
)
;
}
else
if
(
result
.
source
=
=
UrlbarUtils
.
MATCH_SOURCE
.
BOOKMARKS
)
{
item
.
setAttribute
(
"
type
"
"
bookmark
"
)
;
}
let
content
=
this
.
_createElement
(
"
span
"
)
;
content
.
className
=
"
urlbarView
-
row
-
inner
"
;
item
.
appendChild
(
content
)
;
let
typeIcon
=
this
.
_createElement
(
"
span
"
)
;
typeIcon
.
className
=
"
urlbarView
-
type
-
icon
"
;
content
.
appendChild
(
typeIcon
)
;
let
favicon
=
this
.
_createElement
(
"
img
"
)
;
favicon
.
className
=
"
urlbarView
-
favicon
"
;
favicon
.
src
=
result
.
payload
.
icon
|
|
"
chrome
:
/
/
mozapps
/
skin
/
places
/
defaultFavicon
.
svg
"
;
content
.
appendChild
(
favicon
)
;
let
title
=
this
.
_createElement
(
"
span
"
)
;
title
.
className
=
"
urlbarView
-
title
"
;
title
.
textContent
=
result
.
title
|
|
result
.
payload
.
url
;
content
.
appendChild
(
title
)
;
let
secondary
=
this
.
_createElement
(
"
span
"
)
;
secondary
.
className
=
"
urlbarView
-
secondary
"
;
if
(
result
.
type
=
=
UrlbarUtils
.
MATCH_TYPE
.
TAB_SWITCH
)
{
secondary
.
classList
.
add
(
"
urlbarView
-
action
"
)
;
secondary
.
textContent
=
"
Switch
to
Tab
"
;
}
else
{
secondary
.
classList
.
add
(
"
urlbarView
-
url
"
)
;
secondary
.
textContent
=
result
.
payload
.
url
;
}
content
.
appendChild
(
secondary
)
;
this
.
_rows
.
appendChild
(
item
)
;
}
handleEvent
(
event
)
{
let
methodName
=
"
_on_
"
+
event
.
type
;
if
(
methodName
in
this
)
{
this
[
methodName
]
(
event
)
;
}
else
{
throw
new
Error
(
"
Unrecognized
UrlbarView
event
:
"
+
event
.
type
)
;
}
}
_on_click
(
event
)
{
let
row
=
event
.
target
;
while
(
!
row
.
classList
.
contains
(
"
urlbarView
-
row
"
)
)
{
row
=
row
.
parentNode
;
}
let
resultIndex
=
row
.
getAttribute
(
"
resultIndex
"
)
;
let
result
=
this
.
_queryContext
.
results
[
resultIndex
]
;
if
(
result
)
{
this
.
input
.
pickResult
(
event
result
)
;
}
this
.
close
(
)
;
}
_on_overflow
(
event
)
{
if
(
event
.
target
.
classList
.
contains
(
"
urlbarView
-
row
-
inner
"
)
)
{
event
.
target
.
toggleAttribute
(
"
overflow
"
true
)
;
}
}
_on_underflow
(
event
)
{
if
(
event
.
target
.
classList
.
contains
(
"
urlbarView
-
row
-
inner
"
)
)
{
event
.
target
.
toggleAttribute
(
"
overflow
"
false
)
;
}
}
}
