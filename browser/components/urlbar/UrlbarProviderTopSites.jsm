"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
UrlbarProviderTopSites
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AboutNewTab
:
"
resource
:
/
/
/
modules
/
AboutNewTab
.
jsm
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
jsm
"
UrlbarProvider
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
UrlbarProviderOpenTabs
:
"
resource
:
/
/
/
modules
/
UrlbarProviderOpenTabs
.
jsm
"
UrlbarResult
:
"
resource
:
/
/
/
modules
/
UrlbarResult
.
jsm
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
TOP_SITES_MAX_SITES_PER_ROW
:
"
resource
:
/
/
activity
-
stream
/
common
/
Reducers
.
jsm
"
TOP_SITES_DEFAULT_ROWS
:
"
resource
:
/
/
activity
-
stream
/
common
/
Reducers
.
jsm
"
}
)
;
class
ProviderTopSites
extends
UrlbarProvider
{
constructor
(
)
{
super
(
)
;
}
get
PRIORITY
(
)
{
return
1
;
}
get
name
(
)
{
return
"
UrlbarProviderTopSites
"
;
}
get
type
(
)
{
return
UrlbarUtils
.
PROVIDER_TYPE
.
PROFILE
;
}
isActive
(
queryContext
)
{
return
(
!
queryContext
.
restrictSource
&
&
!
queryContext
.
searchString
&
&
!
queryContext
.
searchMode
)
;
}
getPriority
(
queryContext
)
{
return
this
.
PRIORITY
;
}
async
startQuery
(
queryContext
addCallback
)
{
if
(
!
UrlbarPrefs
.
get
(
"
suggest
.
topsites
"
)
|
|
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
feeds
.
system
.
topsites
"
false
)
)
{
return
;
}
let
sites
=
AboutNewTab
.
getTopSites
(
)
;
let
instance
=
this
.
queryInstance
;
sites
=
sites
.
filter
(
site
=
>
site
)
;
if
(
this
.
topSitesRows
=
=
=
undefined
)
{
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
topSitesRows
"
"
browser
.
newtabpage
.
activity
-
stream
.
topSitesRows
"
TOP_SITES_DEFAULT_ROWS
)
;
}
let
numTopSites
=
Math
.
min
(
UrlbarPrefs
.
get
(
"
maxRichResults
"
)
TOP_SITES_MAX_SITES_PER_ROW
*
this
.
topSitesRows
)
;
sites
=
sites
.
slice
(
0
numTopSites
)
;
sites
=
sites
.
map
(
link
=
>
(
{
type
:
link
.
searchTopSite
?
"
search
"
:
"
url
"
url
:
link
.
url_urlbar
|
|
link
.
url
isPinned
:
link
.
isPinned
title
:
link
.
label
|
|
link
.
title
|
|
link
.
hostname
|
|
"
"
favicon
:
link
.
smallFavicon
|
|
link
.
favicon
|
|
undefined
sendAttributionRequest
:
link
.
sendAttributionRequest
}
)
)
;
for
(
let
site
of
sites
)
{
switch
(
site
.
type
)
{
case
"
url
"
:
{
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
URL
UrlbarUtils
.
RESULT_SOURCE
.
OTHER_LOCAL
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
title
:
site
.
title
url
:
site
.
url
icon
:
site
.
favicon
isPinned
:
site
.
isPinned
sendAttributionRequest
:
site
.
sendAttributionRequest
}
)
)
;
let
tabs
;
if
(
UrlbarPrefs
.
get
(
"
suggest
.
openpage
"
)
)
{
tabs
=
UrlbarProviderOpenTabs
.
openTabs
.
get
(
queryContext
.
userContextId
|
|
0
)
;
}
if
(
tabs
&
&
tabs
.
includes
(
site
.
url
.
replace
(
/
#
.
*
/
"
"
)
)
)
{
result
.
type
=
UrlbarUtils
.
RESULT_TYPE
.
TAB_SWITCH
;
result
.
source
=
UrlbarUtils
.
RESULT_SOURCE
.
TABS
;
}
else
if
(
UrlbarPrefs
.
get
(
"
suggest
.
bookmark
"
)
)
{
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
:
new
URL
(
result
.
payload
.
url
)
}
)
;
if
(
bookmark
)
{
result
.
source
=
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
;
}
}
if
(
instance
!
=
this
.
queryInstance
)
{
break
;
}
addCallback
(
this
result
)
;
break
;
}
case
"
search
"
:
{
let
engine
=
await
UrlbarSearchUtils
.
engineForAlias
(
site
.
title
)
;
if
(
!
engine
&
&
site
.
url
)
{
let
host
;
try
{
host
=
new
URL
(
site
.
url
)
.
hostname
;
}
catch
(
err
)
{
}
if
(
host
)
{
engine
=
(
await
UrlbarSearchUtils
.
enginesForDomainPrefix
(
host
)
)
[
0
]
;
}
}
if
(
!
engine
)
{
break
;
}
if
(
instance
!
=
this
.
queryInstance
)
{
break
;
}
let
result
=
new
UrlbarResult
(
UrlbarUtils
.
RESULT_TYPE
.
SEARCH
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
.
.
.
UrlbarResult
.
payloadAndSimpleHighlights
(
queryContext
.
tokens
{
title
:
site
.
title
keyword
:
site
.
title
keywordOffer
:
UrlbarUtils
.
KEYWORD_OFFER
.
SHOW
engine
:
engine
.
name
query
:
"
"
icon
:
site
.
favicon
isPinned
:
site
.
isPinned
}
)
)
;
addCallback
(
this
result
)
;
break
;
}
default
:
Cu
.
reportError
(
Unknown
Top
Site
type
:
{
site
.
type
}
)
;
break
;
}
}
}
}
var
UrlbarProviderTopSites
=
new
ProviderTopSites
(
)
;
