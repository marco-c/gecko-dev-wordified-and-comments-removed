"
use
strict
"
;
let
EventUtils
=
{
}
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
EventUtils
)
;
add_task
(
async
function
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
http
:
/
/
example
.
com
/
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
let
awaitDrop
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
drop
"
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
http
:
/
/
test1
.
example
.
com
/
"
true
)
;
let
event
=
{
clientX
:
0
clientY
:
0
screenX
:
0
screenY
:
0
}
;
EventUtils
.
synthesizeDrop
(
tab
tab
[
[
{
type
:
"
text
/
plain
"
data
:
"
http
:
/
/
test1
.
example
.
com
/
"
}
]
]
"
link
"
window
undefined
event
)
;
await
awaitDrop
;
let
tab2
=
await
newTabPromise
;
Assert
.
ok
(
!
tab2
.
hasAttribute
(
"
usercontextid
"
)
"
Tab
shouldn
'
t
have
usercontextid
attribute
"
)
;
await
ContentTask
.
spawn
(
tab2
.
linkedBrowser
{
}
async
function
(
)
{
Assert
.
equal
(
content
.
document
.
documentURI
"
http
:
/
/
test1
.
example
.
com
/
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
userContextId
0
)
;
Assert
.
equal
(
content
.
document
.
referrer
"
"
"
referrer
should
be
empty
"
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
add_task
(
async
function
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
http
:
/
/
example
.
com
/
"
{
userContextId
:
1
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
let
awaitDrop
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
drop
"
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
http
:
/
/
test1
.
example
.
com
/
"
true
)
;
let
event
=
{
clientX
:
0
clientY
:
0
screenX
:
0
screenY
:
0
}
;
EventUtils
.
synthesizeDrop
(
tab
tab
[
[
{
type
:
"
text
/
plain
"
data
:
"
http
:
/
/
test1
.
example
.
com
/
"
}
]
]
"
link
"
window
undefined
event
)
;
await
awaitDrop
;
let
tab2
=
await
newTabPromise
;
Assert
.
equal
(
tab2
.
getAttribute
(
"
usercontextid
"
)
1
)
;
await
ContentTask
.
spawn
(
tab2
.
linkedBrowser
{
}
async
function
(
)
{
Assert
.
equal
(
content
.
document
.
documentURI
"
http
:
/
/
test1
.
example
.
com
/
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
userContextId
1
)
;
Assert
.
equal
(
content
.
document
.
referrer
"
"
"
referrer
should
be
empty
"
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
add_task
(
async
function
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
http
:
/
/
example
.
com
/
"
{
userContextId
:
1
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
let
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
"
http
:
/
/
example
.
org
/
"
{
userContextId
:
2
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab2
.
linkedBrowser
)
;
let
awaitDrop
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
drop
"
)
;
EventUtils
.
synthesizeDrop
(
tab
tab2
[
[
{
type
:
"
text
/
plain
"
data
:
"
http
:
/
/
test1
.
example
.
com
/
"
}
]
]
"
link
"
window
)
;
await
awaitDrop
;
Assert
.
equal
(
tab2
.
getAttribute
(
"
usercontextid
"
)
2
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab2
.
linkedBrowser
)
;
await
ContentTask
.
spawn
(
tab2
.
linkedBrowser
{
}
async
function
(
)
{
Assert
.
equal
(
content
.
document
.
documentURI
"
http
:
/
/
test1
.
example
.
com
/
"
)
;
Assert
.
equal
(
content
.
document
.
nodePrincipal
.
originAttributes
.
userContextId
2
)
;
Assert
.
equal
(
content
.
document
.
referrer
"
"
"
referrer
should
be
empty
"
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
