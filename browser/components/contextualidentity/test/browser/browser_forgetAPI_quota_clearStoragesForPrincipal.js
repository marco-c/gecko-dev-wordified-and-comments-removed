const
{
classes
:
Cc
Constructor
:
CC
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
const
TEST_HOST
=
"
example
.
com
"
;
const
TEST_URL
=
"
http
:
/
/
"
+
TEST_HOST
+
"
/
browser
/
browser
/
components
/
contextualidentity
/
test
/
browser
/
"
;
const
USER_CONTEXTS
=
[
"
default
"
"
personal
"
]
;
async
function
openTabInUserContext
(
uri
userContextId
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
uri
{
userContextId
}
)
;
gBrowser
.
selectedTab
=
tab
;
tab
.
ownerGlobal
.
focus
(
)
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
return
{
tab
browser
}
;
}
async
function
setupIndexedDB
(
browser
)
{
await
ContentTask
.
spawn
(
browser
{
input
:
"
TestForgetAPIs
"
}
async
function
(
arg
)
{
let
request
=
content
.
indexedDB
.
open
(
"
idb
"
1
)
;
request
.
onerror
=
function
(
)
{
throw
new
Error
(
"
error
opening
db
connection
"
)
;
}
;
request
.
onupgradeneeded
=
event
=
>
{
let
db
=
event
.
target
.
result
;
let
store
=
db
.
createObjectStore
(
"
obj
"
{
keyPath
:
"
id
"
}
)
;
store
.
createIndex
(
"
userContext
"
"
userContext
"
{
unique
:
false
}
)
;
}
;
let
db
=
await
new
Promise
(
resolve
=
>
{
request
.
onsuccess
=
event
=
>
{
resolve
(
event
.
target
.
result
)
;
}
;
}
)
;
let
transaction
=
db
.
transaction
(
[
"
obj
"
]
"
readwrite
"
)
;
let
store
=
transaction
.
objectStore
(
"
obj
"
)
;
store
.
add
(
{
id
:
1
userContext
:
arg
.
input
}
)
;
await
new
Promise
(
resolve
=
>
{
transaction
.
oncomplete
=
(
)
=
>
{
resolve
(
)
;
}
;
}
)
;
transaction
=
db
.
transaction
(
[
"
obj
"
]
"
readonly
"
)
;
store
=
transaction
.
objectStore
(
"
obj
"
)
;
let
getRequest
=
store
.
get
(
1
)
;
await
new
Promise
(
resolve
=
>
{
getRequest
.
onsuccess
=
(
)
=
>
{
let
res
=
getRequest
.
result
;
is
(
res
.
userContext
arg
.
input
"
Check
the
indexedDB
value
"
)
;
resolve
(
)
;
}
;
}
)
;
}
)
;
}
async
function
checkIndexedDB
(
browser
)
{
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
let
request
=
content
.
indexedDB
.
open
(
"
idb
"
1
)
;
let
db
=
await
new
Promise
(
done
=
>
{
request
.
onsuccess
=
event
=
>
{
done
(
event
.
target
.
result
)
;
}
;
}
)
;
try
{
db
.
transaction
(
[
"
obj
"
]
"
readonly
"
)
;
ok
(
false
"
The
indexedDB
should
not
exist
"
)
;
}
catch
(
e
)
{
is
(
e
.
name
"
NotFoundError
"
"
The
indexedDB
does
not
exist
as
expected
"
)
;
}
}
)
;
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
privacy
.
userContext
.
enabled
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_quota_clearStoragesForPrincipal
(
)
{
let
tabs
=
[
]
;
for
(
let
userContextId
of
Object
.
keys
(
USER_CONTEXTS
)
)
{
tabs
[
userContextId
]
=
await
openTabInUserContext
(
TEST_URL
+
"
empty_file
.
html
"
userContextId
)
;
await
setupIndexedDB
(
tabs
[
userContextId
]
.
browser
)
;
await
BrowserTestUtils
.
removeTab
(
tabs
[
userContextId
]
.
tab
)
;
}
let
qms
=
Cc
[
"
mozilla
.
org
/
dom
/
quota
-
manager
-
service
;
1
"
]
.
getService
(
Ci
.
nsIQuotaManagerService
)
;
let
caUtils
=
{
}
;
let
scriptLoader
=
Cc
[
"
mozilla
.
org
/
moz
/
jssubscript
-
loader
;
1
"
]
.
getService
(
Ci
.
mozIJSSubScriptLoader
)
;
scriptLoader
.
loadSubScript
(
"
chrome
:
/
/
global
/
content
/
contentAreaUtils
.
js
"
caUtils
)
;
let
httpURI
=
caUtils
.
makeURI
(
"
http
:
/
/
"
+
TEST_HOST
)
;
let
httpPrincipal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
httpURI
{
}
)
;
qms
.
clearStoragesForPrincipal
(
httpPrincipal
null
true
)
;
for
(
let
userContextId
of
Object
.
keys
(
USER_CONTEXTS
)
)
{
tabs
[
userContextId
]
=
await
openTabInUserContext
(
TEST_URL
+
"
empty_file
.
html
"
userContextId
)
;
await
checkIndexedDB
(
tabs
[
userContextId
]
.
browser
)
;
await
BrowserTestUtils
.
removeTab
(
tabs
[
userContextId
]
.
tab
)
;
}
}
)
;
