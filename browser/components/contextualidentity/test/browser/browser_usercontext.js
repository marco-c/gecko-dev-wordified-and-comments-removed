const
USER_CONTEXTS
=
[
"
default
"
"
personal
"
"
work
"
]
;
const
BASE_URI
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
components
/
"
+
"
contextualidentity
/
test
/
browser
/
file_reflect_cookie_into_title
.
html
"
;
function
openTabInUserContext
(
uri
userContextId
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
uri
{
userContextId
}
)
;
gBrowser
.
selectedTab
=
tab
;
tab
.
ownerGlobal
.
focus
(
)
;
return
tab
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
userContext
.
enabled
"
true
]
[
"
dom
.
ipc
.
processCount
"
1
]
]
}
)
;
}
)
;
add_task
(
async
function
test
(
)
{
for
(
let
userContextId
of
Object
.
keys
(
USER_CONTEXTS
)
)
{
let
cookie
=
USER_CONTEXTS
[
userContextId
]
;
let
tab
=
openTabInUserContext
(
BASE_URI
+
"
?
"
+
cookie
userContextId
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
getBrowserForTab
(
tab
)
)
;
gBrowser
.
removeTab
(
tab
)
;
}
{
let
tab
=
openTabInUserContext
(
BASE_URI
+
"
?
foo
"
9999
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
getBrowserForTab
(
tab
)
)
;
gBrowser
.
removeTab
(
tab
)
;
}
for
(
let
userContextId
of
Object
.
keys
(
USER_CONTEXTS
)
)
{
let
expectedContext
=
USER_CONTEXTS
[
userContextId
]
;
let
tab
=
openTabInUserContext
(
BASE_URI
userContextId
)
;
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
title
=
browser
.
contentTitle
.
trim
(
)
.
split
(
"
|
"
)
;
for
(
let
part
of
title
)
{
let
[
storageMethodName
value
]
=
part
.
split
(
"
=
"
)
;
is
(
value
expectedContext
"
the
title
reflects
the
expected
contextual
identity
of
"
+
expectedContext
+
"
for
method
"
+
storageMethodName
+
"
:
"
+
value
)
;
}
gBrowser
.
removeTab
(
tab
)
;
}
}
)
;
