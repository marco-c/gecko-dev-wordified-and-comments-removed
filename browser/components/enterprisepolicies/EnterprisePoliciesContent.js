ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
PREF_LOGLEVEL
=
"
browser
.
policies
.
loglevel
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
{
ConsoleAPI
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
;
return
new
ConsoleAPI
(
{
prefix
:
"
Enterprise
Policies
Child
"
maxLogLevel
:
"
error
"
maxLogLevelPref
:
PREF_LOGLEVEL
}
)
;
}
)
;
const
EnterprisePoliciesFactory
=
{
_instance
:
null
createInstance
:
function
BGSF_createInstance
(
outer
iid
)
{
if
(
outer
!
=
null
)
throw
Cr
.
NS_ERROR_NO_AGGREGATION
;
return
this
.
_instance
=
=
null
?
this
.
_instance
=
new
EnterprisePoliciesManagerContent
(
)
:
this
.
_instance
;
}
}
;
function
EnterprisePoliciesManagerContent
(
)
{
let
policies
=
Services
.
cpmm
.
initialProcessData
.
policies
;
if
(
policies
)
{
this
.
_status
=
policies
.
status
;
this
.
_disallowedFeatures
=
policies
.
disallowedFeatures
.
slice
(
)
;
}
Services
.
cpmm
.
addMessageListener
(
"
EnterprisePolicies
:
DisallowFeature
"
this
)
;
Services
.
cpmm
.
addMessageListener
(
"
EnterprisePolicies
:
Restart
"
this
)
;
}
EnterprisePoliciesManagerContent
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
dc6358f8
-
d167
-
4566
-
bf5b
-
4350b5e6a7a2
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIEnterprisePolicies
]
)
_xpcom_factory
:
EnterprisePoliciesFactory
_status
:
Ci
.
nsIEnterprisePolicies
.
INACTIVE
_disallowedFeatures
:
[
]
receiveMessage
(
{
name
data
}
)
{
switch
(
name
)
{
case
"
EnterprisePolicies
:
DisallowFeature
"
:
this
.
_disallowedFeatures
.
push
(
data
.
feature
)
;
break
;
case
"
EnterprisePolicies
:
Restart
"
:
this
.
_disallowedFeatures
=
[
]
;
break
;
}
}
get
status
(
)
{
return
this
.
_status
;
}
isAllowed
(
feature
)
{
return
!
this
.
_disallowedFeatures
.
includes
(
feature
)
;
}
getActivePolicies
(
)
{
throw
Cr
.
NS_ERROR_NOT_AVAILABLE
;
}
}
;
var
components
=
[
EnterprisePoliciesManagerContent
]
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
components
)
;
