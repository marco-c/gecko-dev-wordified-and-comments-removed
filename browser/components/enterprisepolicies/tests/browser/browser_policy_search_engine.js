"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
CustomizableUITestUtils
:
"
resource
:
/
/
testing
-
common
/
CustomizableUITestUtils
.
jsm
"
}
)
;
let
gCUITestUtils
=
new
CustomizableUITestUtils
(
window
)
;
add_task
(
async
function
test_setup
(
)
{
await
gCUITestUtils
.
addSearchBar
(
)
;
registerCleanupFunction
(
(
)
=
>
{
gCUITestUtils
.
removeSearchBar
(
)
;
}
)
;
}
)
;
async
function
test_opensearch
(
shouldWork
)
{
let
searchBar
=
BrowserSearch
.
searchBar
;
let
rootDir
=
getRootDirectory
(
gTestPath
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
rootDir
+
"
opensearch
.
html
"
)
;
let
searchPopup
=
document
.
getElementById
(
"
PopupSearchAutoComplete
"
)
;
let
promiseSearchPopupShown
=
BrowserTestUtils
.
waitForEvent
(
searchPopup
"
popupshown
"
)
;
let
searchBarButton
=
searchBar
.
querySelector
(
"
.
searchbar
-
search
-
button
"
)
;
searchBarButton
.
click
(
)
;
await
promiseSearchPopupShown
;
let
oneOffsContainer
=
searchPopup
.
searchOneOffsContainer
;
let
engineElement
=
oneOffsContainer
.
querySelector
(
"
.
searchbar
-
engine
-
one
-
off
-
add
-
engine
"
)
;
if
(
shouldWork
)
{
ok
(
engineElement
"
There
should
be
search
engines
available
to
add
"
)
;
ok
(
searchBar
.
getAttribute
(
"
addengines
"
)
"
Search
bar
should
have
addengines
attribute
"
)
;
}
else
{
is
(
engineElement
null
"
There
should
be
no
search
engines
available
to
add
"
)
;
ok
(
!
searchBar
.
getAttribute
(
"
addengines
"
)
"
Search
bar
should
not
have
addengines
attribute
"
)
;
}
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
add_task
(
async
function
test_opensearch_works
(
)
{
await
setupPolicyEngineWithJson
(
{
policies
:
{
}
}
)
;
await
test_opensearch
(
true
)
;
}
)
;
add_task
(
async
function
setup_prevent_installs
(
)
{
await
setupPolicyEngineWithJson
(
{
policies
:
{
SearchEngines
:
{
PreventInstalls
:
true
}
}
}
)
;
}
)
;
add_task
(
async
function
test_prevent_install_ui
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
preferences
#
search
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
let
linkContainer
=
content
.
document
.
getElementById
(
"
addEnginesBox
"
)
;
if
(
!
linkContainer
.
hidden
)
{
await
new
Promise
(
resolve
=
>
{
let
mut
=
new
linkContainer
.
ownerGlobal
.
MutationObserver
(
mutations
=
>
{
mut
.
disconnect
(
)
;
resolve
(
)
;
}
)
;
mut
.
observe
(
linkContainer
{
attributeFilter
:
[
"
hidden
"
]
}
)
;
}
)
;
}
is
(
linkContainer
.
hidden
true
'
"
Find
more
search
engines
"
link
should
be
hidden
'
)
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_opensearch_disabled
(
)
{
await
test_opensearch
(
false
)
;
}
)
;
