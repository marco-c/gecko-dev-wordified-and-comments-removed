"
use
strict
"
;
let
{
ResetProfile
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ResetProfile
.
jsm
"
)
;
add_task
(
async
function
setup
(
)
{
let
profileDirectory
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
let
profileName
=
profileDirectory
.
leafName
;
let
profileService
=
Cc
[
"
mozilla
.
org
/
toolkit
/
profile
-
service
;
1
"
]
.
getService
(
Ci
.
nsIToolkitProfileService
)
;
let
createdProfile
=
profileService
.
createProfile
(
profileDirectory
profileName
)
;
profileService
.
flush
(
)
;
registerCleanupFunction
(
async
function
cleanup
(
)
{
createdProfile
.
remove
(
false
)
;
}
)
;
}
)
;
async
function
test_reset_disabled
(
{
disabled
}
)
{
is
(
ResetProfile
.
resetSupported
(
)
!
disabled
"
Reset
should
only
be
supported
if
policy
has
not
been
applied
"
)
;
is
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
disableResetPrompt
"
undefined
)
disabled
"
Reset
prompt
should
only
be
shown
if
policy
has
not
been
applied
"
)
;
is
(
Services
.
prefs
.
prefIsLocked
(
"
browser
.
disableResetPrompt
"
)
disabled
"
Reset
prompt
pref
should
be
locked
if
the
policy
has
been
applied
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
support
"
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
disabled
}
async
function
(
{
disabled
}
)
{
let
resetBox
=
content
.
document
.
getElementById
(
"
reset
-
box
"
)
;
let
elementStyle
=
content
.
window
.
getComputedStyle
(
resetBox
)
;
let
expectedDisplayValue
=
disabled
?
"
none
"
:
"
block
"
;
is
(
elementStyle
.
display
expectedDisplayValue
"
about
:
support
Reset
button
box
should
be
hidden
"
)
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
add_task
(
async
function
test_initial_conditions
(
)
{
await
test_reset_disabled
(
{
disabled
:
false
}
)
;
}
)
;
add_task
(
async
function
test_policy_disable_reset
(
)
{
await
setupPolicyEngineWithJson
(
{
"
policies
"
:
{
"
DisableProfileRefresh
"
:
true
}
}
)
;
await
test_reset_disabled
(
{
disabled
:
true
}
)
;
}
)
;
