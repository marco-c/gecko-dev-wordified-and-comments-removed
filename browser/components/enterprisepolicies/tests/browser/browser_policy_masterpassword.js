"
use
strict
"
;
let
{
LoginTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
LoginTestUtils
.
sys
.
mjs
"
)
;
let
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
let
{
FormAutofillUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
shared
/
FormAutofillUtils
.
sys
.
mjs
"
)
;
add_setup
(
async
function
(
)
{
sinon
.
stub
(
FormAutofillUtils
"
getOSAuthEnabled
"
)
.
returns
(
false
)
;
sinon
.
stub
(
LoginHelper
"
getOSAuthEnabled
"
)
.
returns
(
false
)
;
registerCleanupFunction
(
async
function
(
)
{
sinon
.
restore
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_policy_masterpassword_set
(
)
{
await
setupPolicyEngineWithJson
(
{
policies
:
{
PrimaryPassword
:
true
}
}
)
;
LoginTestUtils
.
primaryPassword
.
enable
(
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
preferences
#
privacy
"
async
browser
=
>
{
is
(
browser
.
contentDocument
.
getElementById
(
"
useMasterPassword
"
)
.
disabled
true
"
Master
Password
checkbox
should
be
disabled
"
)
;
}
)
;
LoginTestUtils
.
primaryPassword
.
disable
(
)
;
}
)
;
add_task
(
async
function
test_policy_nochangemp
(
)
{
await
setupPolicyEngineWithJson
(
{
policies
:
{
PrimaryPassword
:
true
}
}
)
;
LoginTestUtils
.
primaryPassword
.
enable
(
)
;
let
changeMPWindow
=
window
.
openDialog
(
"
chrome
:
/
/
mozapps
/
content
/
preferences
/
changemp
.
xhtml
"
"
"
"
"
)
;
await
BrowserTestUtils
.
waitForEvent
(
changeMPWindow
"
load
"
)
;
is
(
changeMPWindow
.
document
.
getElementById
(
"
admin
"
)
.
hidden
true
"
Admin
message
should
not
be
visible
because
there
is
a
password
.
"
)
;
changeMPWindow
.
document
.
getElementById
(
"
oldpw
"
)
.
value
=
LoginTestUtils
.
primaryPassword
.
masterPassword
;
is
(
changeMPWindow
.
document
.
getElementById
(
"
changemp
"
)
.
getButton
(
"
accept
"
)
.
disabled
true
"
OK
button
should
not
be
enabled
if
there
is
an
old
password
.
"
)
;
await
BrowserTestUtils
.
closeWindow
(
changeMPWindow
)
;
LoginTestUtils
.
primaryPassword
.
disable
(
)
;
}
)
;
add_task
(
async
function
test_policy_admin
(
)
{
await
setupPolicyEngineWithJson
(
{
policies
:
{
PrimaryPassword
:
true
}
}
)
;
let
changeMPWindow
=
window
.
openDialog
(
"
chrome
:
/
/
mozapps
/
content
/
preferences
/
changemp
.
xhtml
"
"
"
"
"
)
;
await
BrowserTestUtils
.
waitForEvent
(
changeMPWindow
"
load
"
)
;
is
(
changeMPWindow
.
document
.
getElementById
(
"
admin
"
)
.
hidden
false
true
"
Admin
message
should
not
be
hidden
because
there
is
not
a
password
.
"
)
;
await
BrowserTestUtils
.
closeWindow
(
changeMPWindow
)
;
}
)
;
