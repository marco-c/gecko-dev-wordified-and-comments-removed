"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Assert
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FileTestUtils
"
"
resource
:
/
/
testing
-
common
/
FileTestUtils
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
EnterprisePolicyTesting
"
"
PoliciesPrefTracker
"
]
;
var
EnterprisePolicyTesting
=
{
setupPolicyEngineWithJson
:
async
function
setupPolicyEngineWithJson
(
json
customSchema
)
{
let
filePath
;
if
(
typeof
(
json
)
=
=
"
object
"
)
{
filePath
=
FileTestUtils
.
getTempFile
(
"
policies
.
json
"
)
.
path
;
await
OS
.
File
.
writeAtomic
(
filePath
JSON
.
stringify
(
json
)
{
encoding
:
"
utf
-
8
"
}
)
;
}
else
{
filePath
=
json
;
}
Services
.
prefs
.
setStringPref
(
"
browser
.
policies
.
alternatePath
"
filePath
)
;
let
promise
=
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
function
observer
(
)
{
Services
.
obs
.
removeObserver
(
observer
"
EnterprisePolicies
:
AllPoliciesApplied
"
)
;
resolve
(
)
;
}
"
EnterprisePolicies
:
AllPoliciesApplied
"
)
;
}
)
;
Cu
.
unload
(
"
resource
:
/
/
/
modules
/
policies
/
schema
.
jsm
"
)
;
if
(
customSchema
)
{
let
schemaModule
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
policies
/
schema
.
jsm
"
{
}
)
;
schemaModule
.
schema
=
customSchema
;
}
Services
.
obs
.
notifyObservers
(
null
"
EnterprisePolicies
:
Restart
"
)
;
return
promise
;
}
checkPolicyPref
(
prefName
expectedValue
expectedLockedness
)
{
if
(
expectedLockedness
!
=
=
undefined
)
{
Assert
.
equal
(
Preferences
.
locked
(
prefName
)
expectedLockedness
Pref
{
prefName
}
is
correctly
locked
/
unlocked
)
;
}
Assert
.
equal
(
Preferences
.
get
(
prefName
)
expectedValue
Pref
{
prefName
}
has
the
correct
value
)
;
}
resetRunOnceState
:
function
resetRunOnceState
(
)
{
const
runOnceBaseKeys
=
[
"
browser
.
policies
.
runonce
.
"
"
browser
.
policies
.
runOncePerModification
.
"
]
;
for
(
let
base
of
runOnceBaseKeys
)
{
for
(
let
key
of
Services
.
prefs
.
getChildList
(
base
{
}
)
)
{
if
(
Services
.
prefs
.
prefHasUserValue
(
key
)
)
Services
.
prefs
.
clearUserPref
(
key
)
;
}
}
}
}
;
var
PoliciesPrefTracker
=
{
_originalFunc
:
null
_originalValues
:
new
Map
(
)
start
(
)
{
let
PoliciesBackstage
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
policies
/
Policies
.
jsm
"
{
}
)
;
this
.
_originalFunc
=
PoliciesBackstage
.
setDefaultPref
;
PoliciesBackstage
.
setDefaultPref
=
this
.
hoistedSetDefaultPref
.
bind
(
this
)
;
}
stop
(
)
{
this
.
restoreDefaultValues
(
)
;
let
PoliciesBackstage
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
policies
/
Policies
.
jsm
"
{
}
)
;
PoliciesBackstage
.
setDefaultPref
=
this
.
_originalFunc
;
this
.
_originalFunc
=
null
;
}
hoistedSetDefaultPref
(
prefName
prefValue
)
{
if
(
!
this
.
_originalValues
.
has
(
prefName
)
)
{
let
defaults
=
new
Preferences
(
{
defaultBranch
:
true
}
)
;
let
stored
=
{
}
;
if
(
defaults
.
has
(
prefName
)
)
{
stored
.
originalDefaultValue
=
defaults
.
get
(
prefName
)
;
}
if
(
Preferences
.
isSet
(
prefName
)
&
&
Preferences
.
get
(
prefName
)
=
=
prefValue
)
{
stored
.
originalUserValue
=
Preferences
.
get
(
prefName
)
;
}
this
.
_originalValues
.
set
(
prefName
stored
)
;
}
this
.
_originalFunc
(
prefName
prefValue
)
;
}
restoreDefaultValues
(
)
{
let
defaults
=
new
Preferences
(
{
defaultBranch
:
true
}
)
;
for
(
let
[
prefName
stored
]
of
this
.
_originalValues
)
{
Preferences
.
unlock
(
prefName
)
;
if
(
stored
.
originalDefaultValue
)
{
defaults
.
set
(
prefName
stored
.
originalDefaultValue
)
;
}
if
(
stored
.
originalUserValue
)
{
Preferences
.
set
(
prefName
stored
.
originalUserValue
)
;
}
}
this
.
_originalValues
.
clear
(
)
;
}
}
;
