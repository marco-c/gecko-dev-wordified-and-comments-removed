"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gXulStore
"
"
mozilla
.
org
/
xul
/
xulstore
;
1
"
"
nsIXULStore
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BookmarksPolicies
:
"
resource
:
/
/
/
modules
/
policies
/
BookmarksPolicies
.
jsm
"
}
)
;
const
PREF_LOGLEVEL
=
"
browser
.
policies
.
loglevel
"
;
const
BROWSER_DOCUMENT_URL
=
"
chrome
:
/
/
browser
/
content
/
browser
.
xul
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
{
ConsoleAPI
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
;
return
new
ConsoleAPI
(
{
prefix
:
"
Policies
.
jsm
"
maxLogLevel
:
"
error
"
maxLogLevelPref
:
PREF_LOGLEVEL
}
)
;
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
Policies
"
]
;
var
Policies
=
{
"
BlockAboutAddons
"
:
{
onBeforeUIStartup
(
manager
param
)
{
if
(
param
)
{
manager
.
disallowFeature
(
"
about
:
addons
"
true
)
;
}
}
}
"
BlockAboutConfig
"
:
{
onBeforeUIStartup
(
manager
param
)
{
if
(
param
)
{
manager
.
disallowFeature
(
"
about
:
config
"
true
)
;
setAndLockPref
(
"
devtools
.
chrome
.
enabled
"
false
)
;
}
}
}
"
BlockAboutProfiles
"
:
{
onBeforeUIStartup
(
manager
param
)
{
if
(
param
)
{
manager
.
disallowFeature
(
"
about
:
profiles
"
true
)
;
}
}
}
"
BlockAboutSupport
"
:
{
onBeforeUIStartup
(
manager
param
)
{
if
(
param
)
{
manager
.
disallowFeature
(
"
about
:
support
"
true
)
;
}
}
}
"
BlockSetDesktopBackground
"
:
{
onBeforeUIStartup
(
manager
param
)
{
if
(
param
)
{
manager
.
disallowFeature
(
"
setDesktopBackground
"
true
)
;
}
}
}
"
Bookmarks
"
:
{
onAllWindowsRestored
(
manager
param
)
{
BookmarksPolicies
.
processBookmarks
(
param
)
;
}
}
"
Cookies
"
:
{
onBeforeUIStartup
(
manager
param
)
{
addAllowDenyPermissions
(
"
cookie
"
param
.
Allow
param
.
Block
)
;
}
}
"
CreateMasterPassword
"
:
{
onBeforeUIStartup
(
manager
param
)
{
if
(
!
param
)
{
manager
.
disallowFeature
(
"
createMasterPassword
"
)
;
}
}
}
"
DisableAppUpdate
"
:
{
onBeforeAddons
(
manager
param
)
{
if
(
param
)
{
manager
.
disallowFeature
(
"
appUpdate
"
)
;
}
}
}
"
DisableDeveloperTools
"
:
{
onBeforeAddons
(
manager
param
)
{
if
(
param
)
{
setAndLockPref
(
"
devtools
.
policy
.
disabled
"
true
)
;
setAndLockPref
(
"
devtools
.
chrome
.
enabled
"
false
)
;
manager
.
disallowFeature
(
"
devtools
"
)
;
manager
.
disallowFeature
(
"
about
:
devtools
"
)
;
manager
.
disallowFeature
(
"
about
:
debugging
"
)
;
manager
.
disallowFeature
(
"
about
:
devtools
-
toolbox
"
)
;
}
}
}
"
DisableFeedbackCommands
"
:
{
onBeforeUIStartup
(
manager
param
)
{
if
(
param
)
{
manager
.
disallowFeature
(
"
feedbackCommands
"
)
;
}
}
}
"
DisableFirefoxAccounts
"
:
{
onBeforeAddons
(
manager
param
)
{
if
(
param
)
{
setAndLockPref
(
"
identity
.
fxaccounts
.
enabled
"
false
)
;
}
}
}
"
DisableFirefoxScreenshots
"
:
{
onBeforeAddons
(
manager
param
)
{
if
(
param
)
{
setAndLockPref
(
"
extensions
.
screenshots
.
disabled
"
true
)
;
}
}
}
"
DisableFirefoxStudies
"
:
{
onBeforeAddons
(
manager
param
)
{
if
(
param
)
{
manager
.
disallowFeature
(
"
Shield
"
)
;
}
}
}
"
DisableFormHistory
"
:
{
onBeforeUIStartup
(
manager
param
)
{
if
(
param
)
{
setAndLockPref
(
"
browser
.
formfill
.
enable
"
false
)
;
}
}
}
"
DisablePocket
"
:
{
onBeforeAddons
(
manager
param
)
{
if
(
param
)
{
setAndLockPref
(
"
extensions
.
pocket
.
enabled
"
false
)
;
}
}
}
"
DisablePrivateBrowsing
"
:
{
onBeforeAddons
(
manager
param
)
{
if
(
param
)
{
manager
.
disallowFeature
(
"
privatebrowsing
"
)
;
manager
.
disallowFeature
(
"
about
:
privatebrowsing
"
true
)
;
setAndLockPref
(
"
browser
.
privatebrowsing
.
autostart
"
false
)
;
}
}
}
"
DisableSysAddonUpdate
"
:
{
onBeforeAddons
(
manager
param
)
{
if
(
param
)
{
manager
.
disallowFeature
(
"
SysAddonUpdate
"
)
;
}
}
}
"
DisplayBookmarksToolbar
"
:
{
onBeforeUIStartup
(
manager
param
)
{
if
(
param
)
{
runOnce
(
"
displayBookmarksToolbar
"
(
)
=
>
{
gXulStore
.
setValue
(
BROWSER_DOCUMENT_URL
"
PersonalToolbar
"
"
collapsed
"
"
false
"
)
;
}
)
;
}
}
}
"
DisplayMenuBar
"
:
{
onBeforeUIStartup
(
manager
param
)
{
if
(
param
)
{
runOnce
(
"
displayMenuBar
"
(
)
=
>
{
gXulStore
.
setValue
(
BROWSER_DOCUMENT_URL
"
toolbar
-
menubar
"
"
autohide
"
"
false
"
)
;
}
)
;
}
}
}
"
DontCheckDefaultBrowser
"
:
{
onBeforeUIStartup
(
manager
param
)
{
setAndLockPref
(
"
browser
.
shell
.
checkDefaultBrowser
"
false
)
;
}
}
"
FlashPlugin
"
:
{
onBeforeUIStartup
(
manager
param
)
{
addAllowDenyPermissions
(
"
plugin
:
flash
"
param
.
Allow
param
.
Block
)
;
}
}
"
Homepage
"
:
{
onBeforeUIStartup
(
manager
param
)
{
let
homepages
=
param
.
URL
.
spec
;
if
(
param
.
Additional
&
&
param
.
Additional
.
length
>
0
)
{
homepages
+
=
"
|
"
+
param
.
Additional
.
map
(
url
=
>
url
.
spec
)
.
join
(
"
|
"
)
;
}
if
(
param
.
Locked
)
{
setAndLockPref
(
"
browser
.
startup
.
homepage
"
homepages
)
;
setAndLockPref
(
"
browser
.
startup
.
page
"
1
)
;
setAndLockPref
(
"
pref
.
browser
.
homepage
.
disable_button
.
current_page
"
true
)
;
setAndLockPref
(
"
pref
.
browser
.
homepage
.
disable_button
.
bookmark_page
"
true
)
;
setAndLockPref
(
"
pref
.
browser
.
homepage
.
disable_button
.
restore_default
"
true
)
;
}
else
{
runOncePerModification
(
"
setHomepage
"
homepages
(
)
=
>
{
Services
.
prefs
.
setStringPref
(
"
browser
.
startup
.
homepage
"
homepages
)
;
Services
.
prefs
.
setIntPref
(
"
browser
.
startup
.
page
"
1
)
;
}
)
;
}
}
}
"
InstallAddons
"
:
{
onBeforeUIStartup
(
manager
param
)
{
addAllowDenyPermissions
(
"
install
"
param
.
Allow
null
)
;
}
}
"
Popups
"
:
{
onBeforeUIStartup
(
manager
param
)
{
addAllowDenyPermissions
(
"
popup
"
param
.
Allow
null
)
;
}
}
"
RememberPasswords
"
:
{
onBeforeUIStartup
(
manager
param
)
{
setAndLockPref
(
"
signon
.
rememberSignons
"
param
)
;
}
}
}
;
function
setAndLockPref
(
prefName
prefValue
)
{
if
(
Services
.
prefs
.
prefIsLocked
(
prefName
)
)
{
Services
.
prefs
.
unlockPref
(
prefName
)
;
}
let
defaults
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
switch
(
typeof
(
prefValue
)
)
{
case
"
boolean
"
:
defaults
.
setBoolPref
(
prefName
prefValue
)
;
break
;
case
"
number
"
:
if
(
!
Number
.
isInteger
(
prefValue
)
)
{
throw
new
Error
(
Non
-
integer
value
for
{
prefName
}
)
;
}
defaults
.
setIntPref
(
prefName
prefValue
)
;
break
;
case
"
string
"
:
defaults
.
setStringPref
(
prefName
prefValue
)
;
break
;
}
Services
.
prefs
.
lockPref
(
prefName
)
;
}
function
addAllowDenyPermissions
(
permissionName
allowList
blockList
)
{
allowList
=
allowList
|
|
[
]
;
blockList
=
blockList
|
|
[
]
;
for
(
let
origin
of
allowList
)
{
Services
.
perms
.
add
(
origin
permissionName
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
Ci
.
nsIPermissionManager
.
EXPIRE_POLICY
)
;
}
for
(
let
origin
of
blockList
)
{
Services
.
perms
.
add
(
origin
permissionName
Ci
.
nsIPermissionManager
.
DENY_ACTION
Ci
.
nsIPermissionManager
.
EXPIRE_POLICY
)
;
}
}
function
runOnce
(
actionName
callback
)
{
let
prefName
=
browser
.
policies
.
runonce
.
{
actionName
}
;
if
(
Services
.
prefs
.
getBoolPref
(
prefName
false
)
)
{
log
.
debug
(
Not
running
action
{
actionName
}
again
because
it
has
already
run
.
)
;
return
;
}
Services
.
prefs
.
setBoolPref
(
prefName
true
)
;
callback
(
)
;
}
function
runOncePerModification
(
actionName
policyValue
callback
)
{
let
prefName
=
browser
.
policies
.
runOncePerModification
.
{
actionName
}
;
let
oldPolicyValue
=
Services
.
prefs
.
getStringPref
(
prefName
undefined
)
;
if
(
policyValue
=
=
=
oldPolicyValue
)
{
log
.
debug
(
Not
running
action
{
actionName
}
again
because
the
policy
'
s
value
is
unchanged
)
;
return
;
}
Services
.
prefs
.
setStringPref
(
prefName
policyValue
)
;
callback
(
)
;
}
