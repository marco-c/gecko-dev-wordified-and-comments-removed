"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
sys
.
mjs
"
}
)
;
const
PREF_LOGLEVEL
=
"
browser
.
policies
.
loglevel
"
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
log
"
(
)
=
>
{
let
{
ConsoleAPI
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
)
;
return
new
ConsoleAPI
(
{
prefix
:
"
BookmarksPolicies
.
jsm
"
maxLogLevel
:
"
error
"
maxLogLevelPref
:
PREF_LOGLEVEL
}
)
;
}
)
;
const
EXPORTED_SYMBOLS
=
[
"
BookmarksPolicies
"
]
;
const
BookmarksPolicies
=
{
BOOKMARK_GUID_PREFIX
:
"
PolB
-
"
FOLDER_GUID_PREFIX
:
"
PolF
-
"
processBookmarks
(
param
)
{
calculateLists
(
param
)
.
then
(
async
function
addRemoveBookmarks
(
results
)
{
for
(
let
bookmark
of
results
.
add
.
values
(
)
)
{
await
insertBookmark
(
bookmark
)
.
catch
(
lazy
.
log
.
error
)
;
}
for
(
let
bookmark
of
results
.
remove
.
values
(
)
)
{
await
lazy
.
PlacesUtils
.
bookmarks
.
remove
(
bookmark
)
.
catch
(
lazy
.
log
.
error
)
;
}
for
(
let
bookmark
of
results
.
emptyFolders
.
values
(
)
)
{
await
lazy
.
PlacesUtils
.
bookmarks
.
remove
(
bookmark
)
.
catch
(
lazy
.
log
.
error
)
;
}
lazy
.
gFoldersMapPromise
.
then
(
map
=
>
map
.
clear
(
)
)
;
}
)
;
}
}
;
async
function
calculateLists
(
specifiedBookmarks
)
{
let
specifiedBookmarksMap
=
new
Map
(
)
;
for
(
let
bookmark
of
specifiedBookmarks
)
{
specifiedBookmarksMap
.
set
(
bookmark
.
URL
.
href
bookmark
)
;
}
let
existingBookmarksMap
=
new
Map
(
)
;
await
lazy
.
PlacesUtils
.
bookmarks
.
fetch
(
{
guidPrefix
:
BookmarksPolicies
.
BOOKMARK_GUID_PREFIX
}
bookmark
=
>
existingBookmarksMap
.
set
(
bookmark
.
url
.
href
bookmark
)
)
;
let
foldersSeen
=
new
Set
(
)
;
for
(
let
[
url
item
]
of
specifiedBookmarksMap
)
{
foldersSeen
.
add
(
item
.
Folder
)
;
if
(
existingBookmarksMap
.
has
(
url
)
)
{
lazy
.
log
.
debug
(
Bookmark
intersection
:
{
url
}
)
;
specifiedBookmarksMap
.
delete
(
url
)
;
existingBookmarksMap
.
delete
(
url
)
;
}
}
for
(
let
url
of
specifiedBookmarksMap
.
keys
(
)
)
{
lazy
.
log
.
debug
(
Bookmark
to
add
:
{
url
}
)
;
}
for
(
let
url
of
existingBookmarksMap
.
keys
(
)
)
{
lazy
.
log
.
debug
(
Bookmark
to
remove
:
{
url
}
)
;
}
let
foldersToRemove
=
new
Set
(
)
;
if
(
existingBookmarksMap
.
size
>
0
)
{
await
lazy
.
PlacesUtils
.
bookmarks
.
fetch
(
{
guidPrefix
:
BookmarksPolicies
.
FOLDER_GUID_PREFIX
}
folder
=
>
{
if
(
!
foldersSeen
.
has
(
folder
.
title
)
)
{
lazy
.
log
.
debug
(
Folder
to
remove
:
{
folder
.
title
}
)
;
foldersToRemove
.
add
(
folder
)
;
}
}
)
;
}
return
{
add
:
specifiedBookmarksMap
remove
:
existingBookmarksMap
emptyFolders
:
foldersToRemove
}
;
}
async
function
insertBookmark
(
bookmark
)
{
let
parentGuid
=
await
getParentGuid
(
bookmark
.
Placement
bookmark
.
Folder
)
;
await
lazy
.
PlacesUtils
.
bookmarks
.
insert
(
{
url
:
Services
.
io
.
newURI
(
bookmark
.
URL
.
href
)
title
:
bookmark
.
Title
guid
:
lazy
.
PlacesUtils
.
generateGuidWithPrefix
(
BookmarksPolicies
.
BOOKMARK_GUID_PREFIX
)
parentGuid
}
)
;
if
(
bookmark
.
Favicon
)
{
setFaviconForBookmark
(
bookmark
)
;
}
}
function
setFaviconForBookmark
(
bookmark
)
{
let
faviconURI
;
let
nullPrincipal
=
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
;
switch
(
bookmark
.
Favicon
.
protocol
)
{
case
"
data
:
"
:
faviconURI
=
Services
.
io
.
newURI
(
"
fake
-
favicon
-
uri
:
"
+
bookmark
.
URL
.
href
)
;
lazy
.
PlacesUtils
.
favicons
.
replaceFaviconDataFromDataURL
(
faviconURI
bookmark
.
Favicon
.
href
0
nullPrincipal
)
;
break
;
case
"
http
:
"
:
case
"
https
:
"
:
faviconURI
=
Services
.
io
.
newURI
(
bookmark
.
Favicon
.
href
)
;
break
;
default
:
lazy
.
log
.
error
(
Bad
URL
given
for
favicon
on
bookmark
"
{
bookmark
.
Title
}
"
)
;
return
;
}
lazy
.
PlacesUtils
.
favicons
.
setAndFetchFaviconForPage
(
Services
.
io
.
newURI
(
bookmark
.
URL
.
href
)
faviconURI
false
lazy
.
PlacesUtils
.
favicons
.
FAVICON_LOAD_NON_PRIVATE
null
nullPrincipal
)
;
}
XPCOMUtils
.
defineLazyGetter
(
lazy
"
gFoldersMapPromise
"
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
let
foldersMap
=
new
Map
(
)
;
return
lazy
.
PlacesUtils
.
bookmarks
.
fetch
(
{
guidPrefix
:
BookmarksPolicies
.
FOLDER_GUID_PREFIX
}
result
=
>
{
foldersMap
.
set
(
{
result
.
parentGuid
}
|
{
result
.
title
}
result
.
guid
)
;
}
)
.
then
(
(
)
=
>
resolve
(
foldersMap
)
)
;
}
)
;
}
)
;
async
function
getParentGuid
(
placement
folderTitle
)
{
let
parentGuid
=
placement
=
=
"
menu
"
?
lazy
.
PlacesUtils
.
bookmarks
.
menuGuid
:
lazy
.
PlacesUtils
.
bookmarks
.
toolbarGuid
;
if
(
!
folderTitle
)
{
return
parentGuid
;
}
let
foldersMap
=
await
lazy
.
gFoldersMapPromise
;
let
folderName
=
{
parentGuid
}
|
{
folderTitle
}
;
if
(
foldersMap
.
has
(
folderName
)
)
{
return
foldersMap
.
get
(
folderName
)
;
}
let
guid
=
lazy
.
PlacesUtils
.
generateGuidWithPrefix
(
BookmarksPolicies
.
FOLDER_GUID_PREFIX
)
;
await
lazy
.
PlacesUtils
.
bookmarks
.
insert
(
{
type
:
lazy
.
PlacesUtils
.
bookmarks
.
TYPE_FOLDER
title
:
folderTitle
guid
parentGuid
}
)
;
foldersMap
.
set
(
folderName
guid
)
;
return
guid
;
}
