"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
PREF_LOGLEVEL
=
"
browser
.
policies
.
loglevel
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
{
ConsoleAPI
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
;
return
new
ConsoleAPI
(
{
prefix
:
"
GPOParser
.
jsm
"
maxLogLevel
:
"
error
"
maxLogLevelPref
:
PREF_LOGLEVEL
}
)
;
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
WindowsGPOParser
"
]
;
var
WindowsGPOParser
=
{
readPolicies
(
wrk
policies
)
{
let
childWrk
=
wrk
.
openChild
(
"
Mozilla
\
\
Firefox
"
wrk
.
ACCESS_READ
)
;
if
(
!
policies
)
{
policies
=
{
}
;
}
try
{
policies
=
registryToObject
(
childWrk
policies
)
;
}
catch
(
e
)
{
log
.
error
(
e
)
;
}
finally
{
childWrk
.
close
(
)
;
}
return
policies
;
}
}
;
function
registryToObject
(
wrk
policies
)
{
if
(
!
policies
)
{
policies
=
{
}
;
}
if
(
wrk
.
valueCount
>
0
)
{
if
(
wrk
.
getValueName
(
0
)
=
=
"
1
"
)
{
let
array
=
[
]
;
for
(
let
i
=
0
;
i
<
wrk
.
valueCount
;
i
+
+
)
{
array
.
push
(
readRegistryValue
(
wrk
wrk
.
getValueName
(
i
)
)
)
;
}
return
array
;
}
for
(
let
i
=
0
;
i
<
wrk
.
valueCount
;
i
+
+
)
{
let
name
=
wrk
.
getValueName
(
i
)
;
let
value
=
readRegistryValue
(
wrk
name
)
;
policies
[
name
]
=
value
;
}
}
if
(
wrk
.
childCount
>
0
)
{
if
(
wrk
.
getChildName
(
0
)
=
=
"
1
"
)
{
let
array
=
[
]
;
for
(
let
i
=
0
;
i
<
wrk
.
childCount
;
i
+
+
)
{
let
name
=
wrk
.
getChildName
(
i
)
;
let
childWrk
=
wrk
.
openChild
(
name
wrk
.
ACCESS_READ
)
;
array
.
push
(
registryToObject
(
childWrk
)
)
;
childWrk
.
close
(
)
;
}
return
array
;
}
for
(
let
i
=
0
;
i
<
wrk
.
childCount
;
i
+
+
)
{
let
name
=
wrk
.
getChildName
(
i
)
;
let
childWrk
=
wrk
.
openChild
(
name
wrk
.
ACCESS_READ
)
;
policies
[
name
]
=
registryToObject
(
childWrk
)
;
childWrk
.
close
(
)
;
}
}
return
policies
;
}
function
readRegistryValue
(
wrk
value
)
{
switch
(
wrk
.
getValueType
(
value
)
)
{
case
wrk
.
TYPE_STRING
:
return
wrk
.
readStringValue
(
value
)
;
case
wrk
.
TYPE_BINARY
:
return
wrk
.
readBinaryValue
(
value
)
;
case
wrk
.
TYPE_INT
:
return
wrk
.
readIntValue
(
value
)
;
case
wrk
.
TYPE_INT64
:
return
wrk
.
readInt64Value
(
value
)
;
}
return
null
;
}
