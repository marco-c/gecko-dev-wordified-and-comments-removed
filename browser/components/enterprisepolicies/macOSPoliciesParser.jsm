"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
PREF_LOGLEVEL
=
"
browser
.
policies
.
loglevel
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
{
ConsoleAPI
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
;
return
new
ConsoleAPI
(
{
prefix
:
"
macOSPoliciesParser
.
jsm
"
maxLogLevel
:
"
error
"
maxLogLevelPref
:
PREF_LOGLEVEL
}
)
;
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
macOSPoliciesParser
"
]
;
var
macOSPoliciesParser
=
{
readPolicies
(
reader
)
{
let
nativePolicies
=
reader
.
readPreferences
(
)
;
if
(
!
nativePolicies
)
{
return
null
;
}
nativePolicies
=
this
.
removeUnknownPolicies
(
nativePolicies
)
;
if
(
log
.
maxLogLevel
=
=
"
debug
"
)
{
log
.
debug
(
JSON
.
stringify
(
nativePolicies
null
2
)
)
;
}
return
nativePolicies
;
}
removeUnknownPolicies
(
policies
)
{
let
{
schema
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
policies
/
schema
.
jsm
"
{
}
)
;
for
(
let
policyName
of
Object
.
keys
(
policies
)
)
{
if
(
!
schema
.
properties
.
hasOwnProperty
(
policyName
)
)
{
log
.
debug
(
Removing
unknown
policy
:
{
policyName
}
)
;
delete
policies
[
policyName
]
;
}
}
return
policies
;
}
}
;
