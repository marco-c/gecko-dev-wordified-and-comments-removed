const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
sys
.
mjs
"
}
)
;
if
(
window
.
arguments
[
0
]
.
mode
=
=
"
EDIT
"
)
{
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
"
dialog
"
)
"
edit
-
engine
-
dialog
"
)
;
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
"
window
"
)
"
edit
-
engine
-
window
"
)
;
}
else
{
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
"
dialog
"
)
"
add
-
engine
-
dialog2
"
)
;
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
"
window
"
)
"
add
-
engine
-
window
"
)
;
}
let
loadedResolvers
=
Promise
.
withResolvers
(
)
;
document
.
mozSubdialogReady
=
loadedResolvers
.
promise
;
let
gAddEngineDialog
=
null
;
let
l10nCache
=
null
;
class
EngineDialog
{
constructor
(
)
{
this
.
_dialog
=
document
.
querySelector
(
"
dialog
"
)
;
this
.
_form
=
document
.
getElementById
(
"
addEngineForm
"
)
;
this
.
_name
=
document
.
getElementById
(
"
engineName
"
)
;
this
.
_alias
=
document
.
getElementById
(
"
engineAlias
"
)
;
this
.
_url
=
document
.
getElementById
(
"
engineUrl
"
)
;
this
.
_postData
=
document
.
getElementById
(
"
enginePostData
"
)
;
this
.
_suggestUrl
=
document
.
getElementById
(
"
suggestUrl
"
)
;
this
.
_form
.
addEventListener
(
"
input
"
e
=
>
this
.
validateInput
(
e
.
target
)
)
;
document
.
addEventListener
(
"
dialogaccept
"
this
.
onAccept
.
bind
(
this
)
)
;
document
.
addEventListener
(
"
dialogextra1
"
(
)
=
>
this
.
showAdvanced
(
)
)
;
}
showAdvanced
(
resize
=
true
)
{
this
.
_dialog
.
getButton
(
"
extra1
"
)
.
hidden
=
true
;
document
.
getElementById
(
"
advanced
-
section
"
)
.
hidden
=
false
;
if
(
resize
)
{
window
.
resizeDialog
(
)
;
}
}
onAccept
(
)
{
throw
new
Error
(
"
abstract
"
)
;
}
validateName
(
)
{
let
name
=
this
.
_name
.
value
.
trim
(
)
;
if
(
!
name
)
{
this
.
setValidity
(
this
.
_name
"
add
-
engine
-
no
-
name
"
)
;
return
;
}
let
existingEngine
=
Services
.
search
.
getEngineByName
(
name
)
;
if
(
existingEngine
&
&
!
this
.
allowedNames
.
includes
(
name
)
)
{
this
.
setValidity
(
this
.
_name
"
add
-
engine
-
name
-
exists
"
)
;
return
;
}
this
.
setValidity
(
this
.
_name
null
)
;
}
async
validateAlias
(
)
{
let
alias
=
this
.
_alias
.
value
.
trim
(
)
;
if
(
!
alias
)
{
this
.
setValidity
(
this
.
_alias
null
)
;
return
;
}
let
existingEngine
=
await
Services
.
search
.
getEngineByAlias
(
alias
)
;
if
(
existingEngine
&
&
!
this
.
allowedAliases
.
includes
(
alias
)
)
{
this
.
setValidity
(
this
.
_alias
"
add
-
engine
-
keyword
-
exists
"
)
;
return
;
}
this
.
setValidity
(
this
.
_alias
null
)
;
}
validateUrlInput
(
)
{
let
urlString
=
this
.
_url
.
value
.
trim
(
)
;
if
(
!
urlString
)
{
this
.
setValidity
(
this
.
_url
"
add
-
engine
-
no
-
url
"
)
;
return
;
}
let
url
=
URL
.
parse
(
urlString
)
;
if
(
!
url
)
{
this
.
setValidity
(
this
.
_url
"
add
-
engine
-
invalid
-
url
"
)
;
return
;
}
if
(
url
.
protocol
!
=
"
http
:
"
&
&
url
.
protocol
!
=
"
https
:
"
)
{
this
.
setValidity
(
this
.
_url
"
add
-
engine
-
invalid
-
protocol
"
)
;
return
;
}
let
postData
=
this
.
_postData
?
.
value
.
trim
(
)
;
if
(
!
urlString
.
includes
(
"
%
s
"
)
&
&
!
postData
)
{
this
.
setValidity
(
this
.
_url
"
add
-
engine
-
missing
-
terms
-
url
"
)
;
return
;
}
this
.
setValidity
(
this
.
_url
null
)
;
}
validatePostDataInput
(
)
{
let
postData
=
this
.
_postData
.
value
.
trim
(
)
;
if
(
postData
&
&
!
postData
.
includes
(
"
%
s
"
)
)
{
this
.
setValidity
(
this
.
_postData
"
add
-
engine
-
missing
-
terms
-
post
-
data
"
)
;
return
;
}
this
.
setValidity
(
this
.
_postData
null
)
;
}
validateSuggestUrlInput
(
)
{
let
urlString
=
this
.
_suggestUrl
.
value
.
trim
(
)
;
if
(
!
urlString
)
{
this
.
setValidity
(
this
.
_suggestUrl
null
)
;
return
;
}
let
url
=
URL
.
parse
(
urlString
)
;
if
(
!
url
)
{
this
.
setValidity
(
this
.
_suggestUrl
"
add
-
engine
-
invalid
-
url
"
)
;
return
;
}
if
(
url
.
protocol
!
=
"
http
:
"
&
&
url
.
protocol
!
=
"
https
:
"
)
{
this
.
setValidity
(
this
.
_suggestUrl
"
add
-
engine
-
invalid
-
protocol
"
)
;
return
;
}
if
(
!
urlString
.
includes
(
"
%
s
"
)
)
{
this
.
setValidity
(
this
.
_suggestUrl
"
add
-
engine
-
missing
-
terms
-
url
"
)
;
return
;
}
this
.
setValidity
(
this
.
_suggestUrl
null
)
;
}
async
validateInput
(
input
)
{
switch
(
input
.
id
)
{
case
this
.
_name
.
id
:
this
.
validateName
(
)
;
break
;
case
this
.
_alias
.
id
:
await
this
.
validateAlias
(
)
;
break
;
case
this
.
_postData
.
id
:
case
this
.
_url
.
id
:
this
.
validateUrlInput
(
)
;
this
.
validatePostDataInput
(
)
;
break
;
case
this
.
_suggestUrl
.
id
:
this
.
validateSuggestUrlInput
(
)
;
break
;
}
}
async
validateAll
(
)
{
for
(
let
input
of
this
.
_form
.
elements
)
{
await
this
.
validateInput
(
input
)
;
}
}
setValidity
(
inputElement
l10nId
)
{
if
(
l10nId
)
{
inputElement
.
setCustomValidity
(
l10nCache
.
get
(
l10nId
)
)
;
}
else
{
inputElement
.
setCustomValidity
(
"
"
)
;
}
let
errorLabel
=
inputElement
.
parentElement
.
querySelector
(
"
.
error
-
label
"
)
;
let
validationMessage
=
inputElement
.
validationMessage
;
errorLabel
.
textContent
=
validationMessage
|
|
"
valid
"
;
this
.
_dialog
.
getButton
(
"
accept
"
)
.
disabled
=
!
this
.
_form
.
checkValidity
(
)
;
}
get
allowedNames
(
)
{
return
[
]
;
}
get
allowedAliases
(
)
{
return
[
]
;
}
}
class
NewEngineDialog
extends
EngineDialog
{
constructor
(
)
{
super
(
)
;
document
.
l10n
.
setAttributes
(
this
.
_name
"
add
-
engine
-
name
-
placeholder
"
)
;
document
.
l10n
.
setAttributes
(
this
.
_url
"
add
-
engine
-
url
-
placeholder
"
)
;
document
.
l10n
.
setAttributes
(
this
.
_alias
"
add
-
engine
-
keyword
-
placeholder
"
)
;
this
.
validateAll
(
)
;
}
onAccept
(
)
{
let
params
=
new
URLSearchParams
(
this
.
_postData
.
value
.
trim
(
)
.
replace
(
/
%
s
/
"
{
searchTerms
}
"
)
)
;
Services
.
search
.
addUserEngine
(
{
name
:
this
.
_name
.
value
.
trim
(
)
url
:
this
.
_url
.
value
.
trim
(
)
.
replace
(
/
%
s
/
"
{
searchTerms
}
"
)
method
:
params
.
size
?
"
POST
"
:
"
GET
"
params
suggestUrl
:
this
.
_suggestUrl
.
value
.
trim
(
)
.
replace
(
/
%
s
/
"
{
searchTerms
}
"
)
alias
:
this
.
_alias
.
value
.
trim
(
)
}
)
;
}
}
class
EditEngineDialog
extends
EngineDialog
{
#
engine
;
constructor
(
{
engine
}
)
{
super
(
)
;
this
.
#
engine
=
engine
;
this
.
_name
.
value
=
engine
.
name
;
this
.
_alias
.
value
=
engine
.
alias
?
?
"
"
;
let
[
url
postData
]
=
this
.
getSubmissionTemplate
(
lazy
.
SearchUtils
.
URL_TYPE
.
SEARCH
)
;
this
.
_url
.
value
=
url
;
this
.
_postData
.
value
=
postData
;
let
[
suggestUrl
]
=
this
.
getSubmissionTemplate
(
lazy
.
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
)
;
if
(
suggestUrl
)
{
this
.
_suggestUrl
.
value
=
suggestUrl
;
}
if
(
postData
|
|
suggestUrl
)
{
this
.
showAdvanced
(
false
)
;
}
this
.
validateAll
(
)
;
}
onAccept
(
)
{
this
.
#
engine
.
rename
(
this
.
_name
.
value
.
trim
(
)
)
;
this
.
#
engine
.
alias
=
this
.
_alias
.
value
.
trim
(
)
;
let
newURL
=
this
.
_url
.
value
.
trim
(
)
;
let
newPostData
=
this
.
_postData
.
value
.
trim
(
)
|
|
null
;
let
[
prevURL
prevPostData
]
=
this
.
getSubmissionTemplate
(
lazy
.
SearchUtils
.
URL_TYPE
.
SEARCH
)
;
if
(
newURL
!
=
prevURL
|
|
prevPostData
!
=
newPostData
)
{
this
.
#
engine
.
changeUrl
(
lazy
.
SearchUtils
.
URL_TYPE
.
SEARCH
newURL
.
replace
(
/
%
s
/
"
{
searchTerms
}
"
)
newPostData
?
.
replace
(
/
%
s
/
"
{
searchTerms
}
"
)
)
;
}
let
newSuggestURL
=
this
.
_suggestUrl
.
value
.
trim
(
)
|
|
null
;
let
[
prevSuggestUrl
]
=
this
.
getSubmissionTemplate
(
lazy
.
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
)
;
if
(
newSuggestURL
!
=
prevSuggestUrl
)
{
this
.
#
engine
.
changeUrl
(
lazy
.
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
newSuggestURL
.
replace
(
/
%
s
/
"
{
searchTerms
}
"
)
null
)
;
}
}
get
allowedAliases
(
)
{
return
[
this
.
#
engine
.
alias
]
;
}
get
allowedNames
(
)
{
return
[
this
.
#
engine
.
name
]
;
}
getSubmissionTemplate
(
urlType
)
{
let
submission
=
this
.
#
engine
.
getSubmission
(
"
searchTerms
"
urlType
)
;
if
(
!
submission
)
{
return
[
null
null
]
;
}
let
postData
=
null
;
if
(
submission
.
postData
)
{
let
binaryStream
=
Cc
[
"
mozilla
.
org
/
binaryinputstream
;
1
"
]
.
createInstance
(
Ci
.
nsIBinaryInputStream
)
;
binaryStream
.
setInputStream
(
submission
.
postData
.
data
)
;
postData
=
binaryStream
.
readBytes
(
binaryStream
.
available
(
)
)
.
replace
(
"
searchTerms
"
"
%
s
"
)
;
}
let
url
=
submission
.
uri
.
spec
.
replace
(
"
searchTerms
"
"
%
s
"
)
;
return
[
url
postData
]
;
}
}
class
NewEngineFromFormDialog
extends
EngineDialog
{
constructor
(
{
nameTemplate
}
)
{
super
(
)
;
document
.
getElementById
(
"
engineUrlRow
"
)
.
remove
(
)
;
this
.
_url
=
null
;
document
.
getElementById
(
"
suggestUrlRow
"
)
.
remove
(
)
;
this
.
_suggestUrl
=
null
;
document
.
getElementById
(
"
enginePostDataRow
"
)
.
remove
(
)
;
this
.
_postData
=
null
;
this
.
_dialog
.
getButton
(
"
extra1
"
)
.
hidden
=
true
;
this
.
_name
.
value
=
nameTemplate
;
this
.
validateAll
(
)
;
}
onAccept
(
)
{
window
.
arguments
[
0
]
.
engineInfo
=
{
name
:
this
.
_name
.
value
.
trim
(
)
alias
:
this
.
_alias
.
value
.
trim
(
)
}
;
}
}
async
function
initL10nCache
(
)
{
const
errorIds
=
[
"
add
-
engine
-
name
-
exists
"
"
add
-
engine
-
keyword
-
exists
"
"
add
-
engine
-
no
-
name
"
"
add
-
engine
-
no
-
url
"
"
add
-
engine
-
invalid
-
protocol
"
"
add
-
engine
-
invalid
-
url
"
"
add
-
engine
-
missing
-
terms
-
url
"
"
add
-
engine
-
missing
-
terms
-
post
-
data
"
]
;
let
msgs
=
await
document
.
l10n
.
formatValues
(
errorIds
.
map
(
id
=
>
(
{
id
}
)
)
)
;
l10nCache
=
new
Map
(
)
;
for
(
let
i
=
0
;
i
<
errorIds
.
length
;
i
+
+
)
{
l10nCache
.
set
(
errorIds
[
i
]
msgs
[
i
]
)
;
}
}
window
.
addEventListener
(
"
DOMContentLoaded
"
async
(
)
=
>
{
try
{
if
(
window
.
arguments
[
0
]
.
title
)
{
document
.
documentElement
.
setAttribute
(
"
headertitle
"
JSON
.
stringify
(
{
raw
:
document
.
title
}
)
)
;
}
else
{
AdjustableTitle
.
hide
(
)
;
}
await
initL10nCache
(
)
;
switch
(
window
.
arguments
[
0
]
.
mode
)
{
case
"
NEW
"
:
gAddEngineDialog
=
new
NewEngineDialog
(
)
;
break
;
case
"
EDIT
"
:
gAddEngineDialog
=
new
EditEngineDialog
(
window
.
arguments
[
0
]
)
;
break
;
case
"
FORM
"
:
gAddEngineDialog
=
new
NewEngineFromFormDialog
(
window
.
arguments
[
0
]
)
;
break
;
default
:
throw
new
Error
(
"
Mode
not
supported
for
addEngine
dialog
.
"
)
;
}
}
finally
{
loadedResolvers
.
resolve
(
)
;
}
}
)
;
