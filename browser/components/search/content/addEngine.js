const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
sys
.
mjs
"
}
)
;
let
mode
=
window
.
arguments
[
0
]
.
mode
=
=
"
EDIT
"
?
"
edit
"
:
"
add
"
;
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
"
dialog
"
)
mode
+
"
-
engine
-
dialog
"
)
;
document
.
l10n
.
setAttributes
(
document
.
querySelector
(
"
window
"
)
mode
+
"
-
engine
-
window
"
)
;
class
EngineDialog
{
constructor
(
)
{
this
.
_dialog
=
document
.
querySelector
(
"
dialog
"
)
;
this
.
_form
=
document
.
getElementById
(
"
addEngineForm
"
)
;
this
.
_name
=
document
.
getElementById
(
"
engineName
"
)
;
this
.
_alias
=
document
.
getElementById
(
"
engineAlias
"
)
;
this
.
_url
=
document
.
getElementById
(
"
engineUrl
"
)
;
this
.
_suggestUrl
=
document
.
getElementById
(
"
suggestUrl
"
)
;
this
.
_name
.
addEventListener
(
"
input
"
this
.
onNameInput
.
bind
(
this
)
)
;
this
.
_alias
.
addEventListener
(
"
input
"
this
.
onAliasInput
.
bind
(
this
)
)
;
this
.
_url
.
addEventListener
(
"
input
"
this
.
onFormInput
.
bind
(
this
)
)
;
document
.
addEventListener
(
"
dialogaccept
"
this
.
onAddEngine
.
bind
(
this
)
)
;
}
onAddEngine
(
)
{
throw
new
Error
(
"
abstract
"
)
;
}
isNameValid
(
name
)
{
if
(
!
name
)
{
return
false
;
}
return
!
Services
.
search
.
getEngineByName
(
name
)
;
}
onNameInput
(
)
{
let
name
=
this
.
_name
.
value
.
trim
(
)
;
let
validity
=
this
.
isNameValid
(
name
)
?
"
"
:
document
.
getElementById
(
"
engineNameExists
"
)
.
textContent
;
this
.
_name
.
setCustomValidity
(
validity
)
;
this
.
onFormInput
(
)
;
}
async
isAliasValid
(
alias
)
{
if
(
!
alias
)
{
return
true
;
}
return
!
(
await
Services
.
search
.
getEngineByAlias
(
alias
)
)
;
}
async
onAliasInput
(
)
{
let
alias
=
this
.
_alias
.
value
.
trim
(
)
;
let
validity
=
(
await
this
.
isAliasValid
(
alias
)
)
?
"
"
:
document
.
getElementById
(
"
engineAliasExists
"
)
.
textContent
;
this
.
_alias
.
setCustomValidity
(
validity
)
;
this
.
onFormInput
(
)
;
}
onFormInput
(
)
{
this
.
_dialog
.
setAttribute
(
"
buttondisabledaccept
"
!
this
.
_form
.
checkValidity
(
)
)
;
}
}
class
NewEngineDialog
extends
EngineDialog
{
onAddEngine
(
)
{
Services
.
search
.
addUserEngine
(
{
name
:
this
.
_name
.
value
.
trim
(
)
url
:
this
.
_url
.
value
.
trim
(
)
.
replace
(
/
%
s
/
"
{
searchTerms
}
"
)
suggestUrl
:
this
.
_suggestUrl
.
value
.
trim
(
)
.
replace
(
/
%
s
/
"
{
searchTerms
}
"
)
alias
:
this
.
_alias
.
value
.
trim
(
)
}
)
;
}
}
class
EditEngineDialog
extends
EngineDialog
{
#
engine
;
constructor
(
{
engine
}
)
{
super
(
)
;
this
.
_postData
=
document
.
getElementById
(
"
enginePostData
"
)
;
this
.
#
engine
=
engine
;
this
.
_name
.
value
=
engine
.
name
;
this
.
_alias
.
value
=
engine
.
alias
?
?
"
"
;
let
[
url
postData
]
=
this
.
getSubmissionTemplate
(
lazy
.
SearchUtils
.
URL_TYPE
.
SEARCH
)
;
this
.
_url
.
value
=
url
;
if
(
postData
)
{
document
.
getElementById
(
"
enginePostDataRow
"
)
.
hidden
=
false
;
this
.
_postData
.
value
=
postData
;
}
let
[
suggestUrl
]
=
this
.
getSubmissionTemplate
(
lazy
.
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
)
;
this
.
_suggestUrl
.
value
=
suggestUrl
?
?
"
"
;
this
.
onNameInput
(
)
;
this
.
onAliasInput
(
)
;
}
onAddEngine
(
)
{
this
.
#
engine
.
wrappedJSObject
.
rename
(
this
.
_name
.
value
.
trim
(
)
)
;
this
.
#
engine
.
alias
=
this
.
_alias
.
value
.
trim
(
)
;
let
newURL
=
this
.
_url
.
value
.
trim
(
)
;
let
newPostData
=
this
.
_postData
.
value
.
trim
(
)
;
let
[
prevURL
prevPostData
]
=
this
.
getSubmissionTemplate
(
lazy
.
SearchUtils
.
URL_TYPE
.
SEARCH
)
;
if
(
newURL
!
=
prevURL
|
|
(
prevPostData
&
&
prevPostData
!
=
newPostData
)
)
{
this
.
#
engine
.
wrappedJSObject
.
changeUrl
(
lazy
.
SearchUtils
.
URL_TYPE
.
SEARCH
newURL
.
replace
(
/
%
s
/
"
{
searchTerms
}
"
)
prevPostData
?
newPostData
.
replace
(
/
%
s
/
"
{
searchTerms
}
"
)
:
null
)
;
}
let
newSuggestURL
=
this
.
_suggestUrl
.
value
.
trim
(
)
|
|
null
;
let
[
prevSuggestUrl
]
=
this
.
getSubmissionTemplate
(
lazy
.
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
)
;
if
(
newSuggestURL
!
=
prevSuggestUrl
)
{
this
.
#
engine
.
wrappedJSObject
.
changeUrl
(
lazy
.
SearchUtils
.
URL_TYPE
.
SUGGEST_JSON
newSuggestURL
.
replace
(
/
%
s
/
"
{
searchTerms
}
"
)
null
)
;
}
}
isNameValid
(
name
)
{
if
(
!
name
)
{
return
false
;
}
let
engine
=
Services
.
search
.
getEngineByName
(
this
.
_name
.
value
)
;
return
!
engine
|
|
engine
.
id
=
=
this
.
#
engine
.
id
;
}
async
isAliasValid
(
alias
)
{
if
(
!
alias
)
{
return
true
;
}
let
engine
=
await
Services
.
search
.
getEngineByAlias
(
this
.
_alias
.
value
)
;
return
!
engine
|
|
engine
.
id
=
=
this
.
#
engine
.
id
;
}
getSubmissionTemplate
(
urlType
)
{
let
submission
=
this
.
#
engine
.
getSubmission
(
"
searchTerms
"
urlType
)
;
if
(
!
submission
)
{
return
[
null
null
]
;
}
let
postData
=
null
;
if
(
submission
.
postData
)
{
let
binaryStream
=
Cc
[
"
mozilla
.
org
/
binaryinputstream
;
1
"
]
.
createInstance
(
Ci
.
nsIBinaryInputStream
)
;
binaryStream
.
setInputStream
(
submission
.
postData
.
data
)
;
postData
=
binaryStream
.
readBytes
(
binaryStream
.
available
(
)
)
.
replace
(
"
searchTerms
"
"
%
s
"
)
;
}
let
url
=
submission
.
uri
.
spec
.
replace
(
"
searchTerms
"
"
%
s
"
)
;
return
[
url
postData
]
;
}
}
class
NewEngineFromFormDialog
extends
EngineDialog
{
constructor
(
{
nameTemplate
}
)
{
super
(
)
;
this
.
_name
.
value
=
nameTemplate
;
this
.
onNameInput
(
)
;
this
.
onAliasInput
(
)
;
document
.
getElementById
(
"
engineUrlRow
"
)
.
remove
(
)
;
this
.
_url
=
null
;
document
.
getElementById
(
"
suggestUrlRow
"
)
.
remove
(
)
;
this
.
_suggestUrl
=
null
;
let
title
=
{
raw
:
document
.
title
}
;
document
.
documentElement
.
setAttribute
(
"
headertitle
"
JSON
.
stringify
(
title
)
)
;
document
.
documentElement
.
style
.
setProperty
(
"
-
-
icon
-
url
"
'
url
(
"
chrome
:
/
/
browser
/
skin
/
preferences
/
category
-
search
.
svg
"
)
'
)
;
}
onAddEngine
(
)
{
window
.
arguments
[
0
]
.
engineInfo
=
{
name
:
this
.
_name
.
value
.
trim
(
)
alias
:
this
.
_alias
.
value
.
trim
(
)
}
;
}
}
let
loadedResolvers
=
Promise
.
withResolvers
(
)
;
document
.
mozSubdialogReady
=
loadedResolvers
.
promise
;
let
gAddEngineDialog
=
null
;
window
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
if
(
!
window
.
arguments
[
0
]
.
title
)
{
AdjustableTitle
.
hide
(
)
;
}
try
{
switch
(
window
.
arguments
[
0
]
.
mode
)
{
case
"
NEW
"
:
gAddEngineDialog
=
new
NewEngineDialog
(
)
;
break
;
case
"
EDIT
"
:
gAddEngineDialog
=
new
EditEngineDialog
(
window
.
arguments
[
0
]
)
;
break
;
case
"
FORM
"
:
gAddEngineDialog
=
new
NewEngineFromFormDialog
(
window
.
arguments
[
0
]
)
;
break
;
default
:
throw
new
Error
(
"
Mode
not
supported
for
addEngine
dialog
.
"
)
;
}
}
finally
{
loadedResolvers
.
resolve
(
)
;
}
}
)
;
