"
use
strict
"
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
SearchUIUtilsL10n
"
(
)
=
>
{
return
new
Localization
(
[
"
browser
/
search
.
ftl
"
"
branding
/
brand
.
ftl
"
]
)
;
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
SearchUIUtils
"
]
;
var
SearchUIUtils
=
{
async
addOpenSearchEngine
(
locationURL
image
browsingContext
)
{
try
{
await
Services
.
search
.
addOpenSearchEngine
(
locationURL
image
)
;
}
catch
(
ex
)
{
let
titleMsgName
;
let
descMsgName
;
switch
(
ex
.
result
)
{
case
Ci
.
nsISearchService
.
ERROR_DUPLICATE_ENGINE
:
titleMsgName
=
"
opensearch
-
error
-
duplicate
-
title
"
;
descMsgName
=
"
opensearch
-
error
-
duplicate
-
desc
"
;
break
;
case
Ci
.
nsISearchService
.
ERROR_ENGINE_CORRUPTED
:
titleMsgName
=
"
opensearch
-
error
-
format
-
title
"
;
descMsgName
=
"
opensearch
-
error
-
format
-
desc
"
;
break
;
default
:
titleMsgName
=
"
opensearch
-
error
-
download
-
title
"
;
descMsgName
=
"
opensearch
-
error
-
download
-
desc
"
;
break
;
}
let
[
title
text
]
=
await
lazy
.
SearchUIUtilsL10n
.
formatValues
(
[
{
id
:
titleMsgName
}
{
id
:
descMsgName
args
:
{
"
location
-
url
"
:
locationURL
}
}
]
)
;
Services
.
prompt
.
alertBC
(
browsingContext
Ci
.
nsIPrompt
.
MODAL_TYPE_CONTENT
title
text
)
;
return
false
;
}
return
true
;
}
}
;
