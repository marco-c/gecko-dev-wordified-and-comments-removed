"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
BrowserSearchTelemetry
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
PartnerLinkAttribution
:
"
resource
:
/
/
/
modules
/
PartnerLinkAttribution
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
jsm
"
}
)
;
const
KNOWN_SEARCH_SOURCES
=
[
"
abouthome
"
"
contextmenu
"
"
newtab
"
"
searchbar
"
"
system
"
"
urlbar
"
"
urlbar
-
searchmode
"
"
webextension
"
]
;
const
KNOWN_ONEOFF_SOURCES
=
[
"
oneoff
-
urlbar
"
"
oneoff
-
searchbar
"
"
unknown
"
]
;
class
BrowserSearchTelemetryHandler
{
shouldRecordSearchCount
(
tabbrowser
)
{
return
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
tabbrowser
.
ownerGlobal
)
|
|
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
engagement
.
search_counts
.
pbm
"
false
)
)
;
}
recordSearch
(
tabbrowser
engine
source
details
=
{
}
)
{
if
(
!
this
.
shouldRecordSearchCount
(
tabbrowser
)
)
{
return
;
}
const
countIdPrefix
=
{
engine
.
telemetryId
}
.
;
const
countIdSource
=
countIdPrefix
+
source
;
let
histogram
=
Services
.
telemetry
.
getKeyedHistogramById
(
"
SEARCH_COUNTS
"
)
;
if
(
details
.
isOneOff
)
{
if
(
!
KNOWN_ONEOFF_SOURCES
.
includes
(
source
)
)
{
if
(
[
"
urlbar
"
"
searchbar
"
]
.
includes
(
source
)
)
{
histogram
.
add
(
countIdSource
)
;
PartnerLinkAttribution
.
makeSearchEngineRequest
(
engine
details
.
url
)
.
catch
(
Cu
.
reportError
)
;
return
;
}
throw
new
Error
(
"
Unknown
source
for
one
-
off
search
:
"
+
source
)
;
}
}
else
{
if
(
!
KNOWN_SEARCH_SOURCES
.
includes
(
source
)
)
{
throw
new
Error
(
"
Unknown
source
for
search
:
"
+
source
)
;
}
if
(
details
.
alias
&
&
engine
.
isAppProvided
&
&
engine
.
aliases
.
includes
(
details
.
alias
)
)
{
histogram
.
add
(
countIdPrefix
+
"
alias
"
)
;
}
else
{
histogram
.
add
(
countIdSource
)
;
}
}
this
.
_handleSearchAction
(
engine
source
details
)
;
}
_recordSearch
(
engine
url
source
action
=
null
)
{
if
(
!
(
action
=
=
"
oneoff
"
&
&
!
url
)
)
{
PartnerLinkAttribution
.
makeSearchEngineRequest
(
engine
url
)
.
catch
(
Cu
.
reportError
)
;
}
let
scalarKey
=
action
?
"
search_
"
+
action
:
"
search
"
;
Services
.
telemetry
.
keyedScalarAdd
(
"
browser
.
engagement
.
navigation
.
"
+
source
scalarKey
1
)
;
Services
.
telemetry
.
recordEvent
(
"
navigation
"
"
search
"
source
action
{
engine
:
engine
.
telemetryId
}
)
;
}
recordSearchMode
(
searchMode
)
{
if
(
searchMode
.
isPreview
)
{
return
;
}
let
scalarKey
;
if
(
searchMode
.
engineName
)
{
let
engine
=
Services
.
search
.
getEngineByName
(
searchMode
.
engineName
)
;
let
resultDomain
=
engine
.
getResultDomain
(
)
;
if
(
!
engine
.
isAppProvided
)
{
scalarKey
=
"
other
"
;
}
else
if
(
resultDomain
.
includes
(
"
amazon
.
"
)
)
{
scalarKey
=
"
Amazon
"
;
}
else
if
(
resultDomain
.
endsWith
(
"
wikipedia
.
org
"
)
)
{
scalarKey
=
"
Wikipedia
"
;
}
else
{
scalarKey
=
searchMode
.
engineName
;
}
}
else
if
(
searchMode
.
source
)
{
scalarKey
=
UrlbarUtils
.
getResultSourceName
(
searchMode
.
source
)
|
|
"
other
"
;
}
Services
.
telemetry
.
keyedScalarAdd
(
"
urlbar
.
searchmode
.
"
+
searchMode
.
entry
scalarKey
1
)
;
}
_handleSearchAction
(
engine
source
details
)
{
switch
(
source
)
{
case
"
urlbar
"
:
case
"
oneoff
-
urlbar
"
:
case
"
searchbar
"
:
case
"
oneoff
-
searchbar
"
:
case
"
unknown
"
:
this
.
_handleSearchAndUrlbar
(
engine
source
details
)
;
break
;
case
"
urlbar
-
searchmode
"
:
this
.
_handleSearchAndUrlbar
(
engine
"
urlbar_searchmode
"
details
)
;
break
;
case
"
abouthome
"
:
this
.
_recordSearch
(
engine
details
.
url
"
about_home
"
"
enter
"
)
;
break
;
case
"
newtab
"
:
this
.
_recordSearch
(
engine
details
.
url
"
about_newtab
"
"
enter
"
)
;
break
;
case
"
contextmenu
"
:
case
"
system
"
:
case
"
webextension
"
:
this
.
_recordSearch
(
engine
details
.
url
source
)
;
break
;
}
}
_handleSearchAndUrlbar
(
engine
source
details
)
{
const
sourceName
=
source
=
=
=
"
unknown
"
?
"
searchbar
"
:
source
.
replace
(
"
oneoff
-
"
"
"
)
;
const
isOneOff
=
!
!
details
.
isOneOff
;
if
(
isOneOff
)
{
if
(
[
"
urlbar
"
"
searchbar
"
"
unknown
"
]
.
includes
(
source
)
)
{
return
;
}
this
.
_recordSearch
(
engine
details
.
url
sourceName
"
oneoff
"
)
;
return
;
}
if
(
details
.
isFormHistory
)
{
this
.
_recordSearch
(
engine
details
.
url
sourceName
"
formhistory
"
)
;
return
;
}
else
if
(
details
.
isSuggestion
)
{
this
.
_recordSearch
(
engine
details
.
url
sourceName
"
suggestion
"
)
;
return
;
}
else
if
(
details
.
alias
)
{
this
.
_recordSearch
(
engine
details
.
url
sourceName
"
alias
"
)
;
return
;
}
this
.
_recordSearch
(
engine
details
.
url
sourceName
"
enter
"
)
;
}
recordSearchSuggestionSelectionMethod
(
event
source
index
userSelectionBehavior
=
"
none
"
)
{
if
(
source
=
=
"
searchbar
"
&
&
userSelectionBehavior
!
=
"
none
"
)
{
throw
new
Error
(
"
Did
not
expect
a
selection
behavior
for
the
searchbar
.
"
)
;
}
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
source
=
=
"
urlbar
"
?
"
FX_URLBAR_SELECTED_RESULT_METHOD
"
:
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
let
isClick
=
event
&
&
(
ChromeUtils
.
getClassName
(
event
)
=
=
"
MouseEvent
"
|
|
event
.
type
=
=
"
command
"
)
;
let
category
;
if
(
isClick
)
{
category
=
"
click
"
;
}
else
if
(
index
>
=
0
)
{
switch
(
userSelectionBehavior
)
{
case
"
tab
"
:
category
=
"
tabEnterSelection
"
;
break
;
case
"
arrow
"
:
category
=
"
arrowEnterSelection
"
;
break
;
case
"
rightClick
"
:
category
=
"
rightClickEnter
"
;
break
;
default
:
category
=
"
enterSelection
"
;
}
}
else
{
category
=
"
enter
"
;
}
histogram
.
add
(
category
)
;
}
}
var
BrowserSearchTelemetry
=
new
BrowserSearchTelemetryHandler
(
)
;
