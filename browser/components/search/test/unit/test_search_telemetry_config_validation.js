"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
sys
.
mjs
"
TELEMETRY_SETTINGS_KEY
:
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
JsonSchema
:
"
resource
:
/
/
gre
/
modules
/
JsonSchema
.
sys
.
mjs
"
}
)
;
function
isObject
(
value
)
{
return
value
!
=
null
&
&
typeof
value
=
=
"
object
"
&
&
!
Array
.
isArray
(
value
)
;
}
function
disallowAdditionalProperties
(
section
)
{
if
(
section
.
type
=
=
"
object
"
)
{
section
.
additionalProperties
=
false
;
}
for
(
let
value
of
Object
.
values
(
section
)
)
{
if
(
isObject
(
value
)
)
{
disallowAdditionalProperties
(
value
)
;
}
}
}
add_task
(
async
function
test_search_config_validates_to_schema
(
)
{
let
schema
=
await
IOUtils
.
readJSON
(
PathUtils
.
join
(
do_get_cwd
(
)
.
path
"
search
-
telemetry
-
schema
.
json
"
)
)
;
disallowAdditionalProperties
(
schema
)
;
let
data
=
await
RemoteSettings
(
TELEMETRY_SETTINGS_KEY
)
.
get
(
)
;
let
validator
=
new
JsonSchema
.
Validator
(
schema
)
;
for
(
let
entry
of
data
)
{
delete
entry
.
schema
;
delete
entry
.
id
;
delete
entry
.
last_modified
;
delete
entry
.
filter_expression
;
let
result
=
validator
.
validate
(
entry
)
;
let
message
=
Should
validate
{
entry
.
telemetryId
}
;
if
(
!
result
.
valid
)
{
message
+
=
:
\
n
{
JSON
.
stringify
(
result
.
errors
null
2
)
}
;
}
Assert
.
ok
(
result
.
valid
message
)
;
}
}
)
;
