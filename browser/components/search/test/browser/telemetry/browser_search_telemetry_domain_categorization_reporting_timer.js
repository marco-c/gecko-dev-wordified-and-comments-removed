"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
SERPCategorizationEventScheduler
:
"
moz
-
src
:
/
/
/
browser
/
components
/
search
/
SERPCategorization
.
sys
.
mjs
"
}
)
;
const
TEST_PROVIDER_INFO
=
[
{
telemetryId
:
"
example
"
searchPageRegexp
:
/
^
https
:
\
/
\
/
example
.
org
\
/
browser
\
/
browser
\
/
components
\
/
search
\
/
test
\
/
browser
\
/
telemetry
\
/
searchTelemetry
/
queryParamNames
:
[
"
s
"
]
codeParamName
:
"
abc
"
taggedCodes
:
[
"
ff
"
]
adServerAttributes
:
[
"
mozAttr
"
]
nonAdsLinkRegexps
:
[
]
extraAdServersRegexps
:
[
/
^
https
:
\
/
\
/
example
\
.
com
\
/
ad
/
]
domainExtraction
:
{
ads
:
[
{
selectors
:
"
[
data
-
ad
-
domain
]
"
method
:
"
dataAttribute
"
options
:
{
dataAttributeKey
:
"
adDomain
"
}
}
{
selectors
:
"
.
ad
"
method
:
"
href
"
options
:
{
queryParamKey
:
"
ad_domain
"
}
}
]
nonAds
:
[
{
selectors
:
"
#
results
.
organic
a
"
method
:
"
href
"
}
]
}
components
:
[
{
type
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
default
:
true
}
]
}
]
;
add_setup
(
async
function
(
)
{
SearchTestUtils
.
useMockIdleService
(
)
;
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
TEST_PROVIDER_INFO
)
;
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
search
.
serpEventTelemetryCategorization
.
enabled
"
)
)
{
SERPCategorizationEventScheduler
.
uninit
(
)
;
SERPCategorizationEventScheduler
.
init
(
)
;
}
await
waitForIdle
(
)
;
let
promise
=
waitForDomainToCategoriesUpdate
(
)
;
await
insertRecordIntoCollectionAndSync
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
serpEventTelemetryCategorization
.
enabled
"
true
]
]
}
)
;
await
promise
;
registerCleanupFunction
(
async
(
)
=
>
{
await
SpecialPowers
.
popPrefEnv
(
)
;
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
search
.
serpEventTelemetryCategorization
.
enabled
"
)
)
{
await
waitForDomainToCategoriesUninit
(
)
;
}
else
{
SERPCategorizationEventScheduler
.
uninit
(
)
;
SERPCategorizationEventScheduler
.
init
(
)
;
}
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
)
;
resetTelemetry
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_categorize_serp_and_wait
(
)
{
resetTelemetry
(
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryDomainCategorizationReporting
.
html
"
)
;
info
(
"
Load
a
SERP
with
organic
and
sponsored
results
.
"
)
;
let
promise
=
waitForPageWithCategorizedDomains
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
await
promise
;
assertCategorizationValues
(
[
]
)
;
promise
=
waitForAllCategorizedEvents
(
)
;
SearchTestUtils
.
idleService
.
_fireObservers
(
"
idle
"
)
;
await
promise
;
assertCategorizationValues
(
[
{
organic_category
:
"
3
"
organic_num_domains
:
"
1
"
organic_num_inconclusive
:
"
0
"
organic_num_unknown
:
"
0
"
sponsored_category
:
"
4
"
sponsored_num_domains
:
"
2
"
sponsored_num_inconclusive
:
"
0
"
sponsored_num_unknown
:
"
0
"
mappings_version
:
"
1
"
app_version
:
APP_MAJOR_VERSION
channel
:
CHANNEL
region
:
REGION
partner_code
:
"
ff
"
provider
:
"
example
"
tagged
:
"
true
"
is_shopping_page
:
"
false
"
num_ads_clicked
:
"
0
"
num_ads_hidden
:
"
0
"
num_ads_loaded
:
"
2
"
num_ads_visible
:
"
2
"
}
]
)
;
info
(
"
Ensure
we
don
'
t
record
a
duplicate
of
this
event
.
"
)
;
resetTelemetry
(
)
;
SearchTestUtils
.
idleService
.
_fireObservers
(
"
idle
"
)
;
SearchTestUtils
.
idleService
.
_fireObservers
(
"
active
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
assertCategorizationValues
(
[
]
)
;
}
)
;
add_task
(
async
function
test_categorize_serp_open_multiple_tabs
(
)
{
resetTelemetry
(
)
;
let
tabs
=
[
]
;
let
expectedResults
=
[
]
;
for
(
let
i
=
0
;
i
<
5
;
+
+
i
)
{
let
url
=
getSERPUrl
(
"
searchTelemetryDomainCategorizationReporting
.
html
"
)
;
info
(
"
Load
a
SERP
with
organic
and
sponsored
results
.
"
)
;
let
promise
=
waitForPageWithCategorizedDomains
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
await
promise
;
tabs
.
push
(
tab
)
;
expectedResults
.
push
(
{
organic_category
:
"
3
"
organic_num_domains
:
"
1
"
organic_num_inconclusive
:
"
0
"
organic_num_unknown
:
"
0
"
sponsored_category
:
"
4
"
sponsored_num_domains
:
"
2
"
sponsored_num_inconclusive
:
"
0
"
sponsored_num_unknown
:
"
0
"
mappings_version
:
"
1
"
app_version
:
APP_MAJOR_VERSION
channel
:
CHANNEL
region
:
REGION
partner_code
:
"
ff
"
provider
:
"
example
"
tagged
:
"
true
"
is_shopping_page
:
"
false
"
num_ads_clicked
:
"
0
"
num_ads_hidden
:
"
0
"
num_ads_loaded
:
"
2
"
num_ads_visible
:
"
2
"
}
)
;
}
info
(
"
Simulate
idle
event
and
wait
for
results
.
"
)
;
let
promise
=
waitForAllCategorizedEvents
(
)
;
SearchTestUtils
.
idleService
.
_fireObservers
(
"
idle
"
)
;
await
promise
;
assertCategorizationValues
(
expectedResults
)
;
info
(
"
Ensure
we
don
'
t
record
a
duplicate
of
any
event
.
"
)
;
resetTelemetry
(
)
;
for
(
let
tab
of
tabs
)
{
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
assertCategorizationValues
(
[
]
)
;
}
)
;
add_task
(
async
function
test_categorize_serp_close_tab_and_wait
(
)
{
resetTelemetry
(
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryDomainCategorizationReporting
.
html
"
)
;
info
(
"
Load
a
SERP
with
organic
and
sponsored
results
.
"
)
;
let
promise
=
waitForPageWithCategorizedDomains
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
await
promise
;
assertCategorizationValues
(
[
]
)
;
promise
=
waitForSingleCategorizedEvent
(
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
await
promise
;
assertCategorizationValues
(
[
{
organic_category
:
"
3
"
organic_num_domains
:
"
1
"
organic_num_inconclusive
:
"
0
"
organic_num_unknown
:
"
0
"
sponsored_category
:
"
4
"
sponsored_num_domains
:
"
2
"
sponsored_num_inconclusive
:
"
0
"
sponsored_num_unknown
:
"
0
"
mappings_version
:
"
1
"
app_version
:
APP_MAJOR_VERSION
channel
:
CHANNEL
region
:
REGION
partner_code
:
"
ff
"
provider
:
"
example
"
tagged
:
"
true
"
is_shopping_page
:
"
false
"
num_ads_clicked
:
"
0
"
num_ads_hidden
:
"
0
"
num_ads_loaded
:
"
2
"
num_ads_visible
:
"
2
"
}
]
)
;
info
(
"
Ensure
we
don
'
t
record
a
duplicate
of
this
event
.
"
)
;
resetTelemetry
(
)
;
SearchTestUtils
.
idleService
.
_fireObservers
(
"
idle
"
)
;
assertCategorizationValues
(
[
]
)
;
}
)
;
add_task
(
async
function
test_categorize_serp_open_ad_and_wait
(
)
{
resetTelemetry
(
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryDomainCategorizationReporting
.
html
"
)
;
info
(
"
Load
a
SERP
with
organic
and
sponsored
results
.
"
)
;
let
promise
=
waitForPageWithCategorizedDomains
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
await
promise
;
info
(
"
Open
ad
in
new
tab
.
"
)
;
let
promiseTabOpened
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
.
ad
"
{
button
:
1
}
tab
.
linkedBrowser
)
;
let
tab2
=
await
promiseTabOpened
;
assertCategorizationValues
(
[
]
)
;
promise
=
waitForAllCategorizedEvents
(
)
;
SearchTestUtils
.
idleService
.
_fireObservers
(
"
idle
"
)
;
info
(
"
Waiting
for
categorized
events
.
"
)
;
await
promise
;
assertCategorizationValues
(
[
{
organic_category
:
"
3
"
organic_num_domains
:
"
1
"
organic_num_inconclusive
:
"
0
"
organic_num_unknown
:
"
0
"
sponsored_category
:
"
4
"
sponsored_num_domains
:
"
2
"
sponsored_num_inconclusive
:
"
0
"
sponsored_num_unknown
:
"
0
"
mappings_version
:
"
1
"
app_version
:
APP_MAJOR_VERSION
channel
:
CHANNEL
region
:
REGION
partner_code
:
"
ff
"
provider
:
"
example
"
tagged
:
"
true
"
is_shopping_page
:
"
false
"
num_ads_clicked
:
"
1
"
num_ads_hidden
:
"
0
"
num_ads_loaded
:
"
2
"
num_ads_visible
:
"
2
"
}
]
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
await
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
