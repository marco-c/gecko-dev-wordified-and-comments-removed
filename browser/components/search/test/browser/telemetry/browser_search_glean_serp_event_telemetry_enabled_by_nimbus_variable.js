const
lazy
=
{
}
;
const
TELEMETRY_PREF
=
"
browser
.
search
.
serpEventTelemetry
.
enabled
"
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
ExperimentAPI
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
sys
.
mjs
"
ExperimentFakes
:
"
resource
:
/
/
testing
-
common
/
NimbusTestUtils
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
serpEventsEnabled
"
TELEMETRY_PREF
false
)
;
const
TEST_PROVIDER_INFO
=
[
{
telemetryId
:
"
example
"
searchPageRegexp
:
/
^
https
:
\
/
\
/
example
.
org
\
/
browser
\
/
browser
\
/
components
\
/
search
\
/
test
\
/
browser
\
/
telemetry
\
/
searchTelemetry
(
?
:
Ad
)
?
.
html
/
queryParamNames
:
[
"
s
"
]
codeParamName
:
"
abc
"
taggedCodes
:
[
"
ff
"
]
followOnParamNames
:
[
"
a
"
]
extraAdServersRegexps
:
[
/
^
https
:
\
/
\
/
example
\
.
com
\
/
ad2
?
/
]
components
:
[
{
type
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
default
:
true
}
]
}
]
;
async
function
verifyEventsRecorded
(
)
{
resetTelemetry
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
getSERPUrl
(
"
searchTelemetryAd
.
html
"
)
)
;
await
waitForPageWithAdImpressions
(
)
;
assertSERPTelemetry
(
[
{
impression
:
{
provider
:
"
example
"
tagged
:
"
true
"
partner_code
:
"
ff
"
source
:
"
unknown
"
is_shopping_page
:
"
false
"
is_private
:
"
false
"
shopping_tab_displayed
:
"
false
"
}
adImpressions
:
[
{
component
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
ads_loaded
:
"
2
"
ads_visible
:
"
2
"
ads_hidden
:
"
0
"
}
]
}
]
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
assertSERPTelemetry
(
[
{
impression
:
{
provider
:
"
example
"
tagged
:
"
true
"
partner_code
:
"
ff
"
source
:
"
unknown
"
is_shopping_page
:
"
false
"
is_private
:
"
false
"
shopping_tab_displayed
:
"
false
"
}
adImpressions
:
[
{
component
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
ads_loaded
:
"
2
"
ads_visible
:
"
2
"
ads_hidden
:
"
0
"
}
]
abandonment
:
{
reason
:
SearchSERPTelemetryUtils
.
ABANDONMENTS
.
TAB_CLOSE
}
}
]
)
;
}
add_setup
(
async
function
(
)
{
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
TEST_PROVIDER_INFO
)
;
await
waitForIdle
(
)
;
let
oldCanRecord
=
Services
.
telemetry
.
canRecordExtended
;
Services
.
telemetry
.
canRecordExtended
=
true
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
log
"
true
]
]
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
)
;
Services
.
telemetry
.
canRecordExtended
=
oldCanRecord
;
await
SpecialPowers
.
popPrefEnv
(
)
;
resetTelemetry
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_enable_experiment_when_pref_is_not_enabled
(
)
{
let
prefBranch
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
let
originalPrefValue
=
prefBranch
.
getBoolPref
(
TELEMETRY_PREF
)
;
prefBranch
.
setBoolPref
(
TELEMETRY_PREF
false
)
;
Assert
.
equal
(
lazy
.
serpEventsEnabled
false
"
serpEventsEnabled
should
be
false
when
not
enrolled
in
experiment
.
"
)
;
await
lazy
.
ExperimentAPI
.
ready
(
)
;
let
doExperimentCleanup
=
await
lazy
.
ExperimentFakes
.
enrollWithFeatureConfig
(
{
featureId
:
NimbusFeatures
.
search
.
featureId
value
:
{
serpEventTelemetryEnabled
:
true
}
}
{
isRollout
:
true
}
)
;
Assert
.
equal
(
lazy
.
serpEventsEnabled
true
"
serpEventsEnabled
should
be
true
when
enrolled
in
experiment
.
"
)
;
await
verifyEventsRecorded
(
)
;
await
doExperimentCleanup
(
)
;
Assert
.
equal
(
lazy
.
serpEventsEnabled
false
"
serpEventsEnabled
should
be
false
after
experiment
.
"
)
;
prefBranch
.
setBoolPref
(
TELEMETRY_PREF
originalPrefValue
)
;
}
)
;
