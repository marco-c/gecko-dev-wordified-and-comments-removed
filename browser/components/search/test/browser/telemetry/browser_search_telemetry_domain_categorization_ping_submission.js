"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
CATEGORIZATION_SETTINGS
:
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
sys
.
mjs
"
SearchSERPTelemetry
:
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
SERPCategorizationRecorder
:
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
TELEMETRY_CATEGORIZATION_KEY
:
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
}
)
;
const
TEST_PROVIDER_INFO
=
[
{
telemetryId
:
"
example
"
searchPageRegexp
:
/
^
https
:
\
/
\
/
example
.
org
\
/
browser
\
/
browser
\
/
components
\
/
search
\
/
test
\
/
browser
\
/
telemetry
\
/
searchTelemetry
/
queryParamNames
:
[
"
s
"
]
codeParamName
:
"
abc
"
taggedCodes
:
[
"
ff
"
]
adServerAttributes
:
[
"
mozAttr
"
]
nonAdsLinkRegexps
:
[
/
^
https
:
\
/
\
/
example
.
com
/
]
extraAdServersRegexps
:
[
/
^
https
:
\
/
\
/
example
\
.
com
\
/
ad
/
]
domainExtraction
:
{
ads
:
[
{
selectors
:
"
[
data
-
ad
-
domain
]
"
method
:
"
data
-
attribute
"
options
:
{
dataAttributeKey
:
"
adDomain
"
}
}
{
selectors
:
"
.
ad
"
method
:
"
href
"
options
:
{
queryParamKey
:
"
ad_domain
"
}
}
]
nonAds
:
[
{
selectors
:
"
#
results
.
organic
a
"
method
:
"
href
"
}
]
}
components
:
[
{
type
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
default
:
true
}
]
}
]
;
const
client
=
RemoteSettings
(
TELEMETRY_CATEGORIZATION_KEY
)
;
const
db
=
client
.
db
;
function
sleep
(
ms
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
ms
)
)
;
}
add_setup
(
async
function
(
)
{
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
TEST_PROVIDER_INFO
)
;
await
waitForIdle
(
)
;
let
oldCanRecord
=
Services
.
telemetry
.
canRecordExtended
;
Services
.
telemetry
.
canRecordExtended
=
true
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
serpEventTelemetry
.
enabled
"
true
]
]
}
)
;
await
db
.
clear
(
)
;
let
promise
=
waitForDomainToCategoriesUpdate
(
)
;
await
insertRecordIntoCollectionAndSync
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
serpEventTelemetryCategorization
.
enabled
"
true
]
]
}
)
;
await
promise
;
registerCleanupFunction
(
async
(
)
=
>
{
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
)
;
Services
.
telemetry
.
canRecordExtended
=
oldCanRecord
;
resetTelemetry
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_threshold_reached
(
)
{
resetTelemetry
(
)
;
let
oldThreshold
=
CATEGORIZATION_SETTINGS
.
PING_SUBMISSION_THRESHOLD
;
CATEGORIZATION_SETTINGS
.
PING_SUBMISSION_THRESHOLD
=
2
;
SERPCategorizationRecorder
.
uninit
(
)
;
SERPCategorizationRecorder
.
init
(
)
;
Assert
.
equal
(
null
Glean
.
serp
.
categorization
.
testGetValue
(
)
"
Should
not
have
recorded
any
metrics
yet
.
"
)
;
let
submitted
=
false
;
GleanPings
.
serpCategorization
.
testBeforeNextSubmit
(
reason
=
>
{
submitted
=
true
;
Assert
.
equal
(
"
threshold_reached
"
reason
"
Ping
submission
reason
should
be
'
threshold_reached
'
.
"
)
;
}
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryDomainCategorizationReporting
.
html
"
)
;
info
(
"
Load
a
sample
SERP
with
organic
and
sponsored
results
.
"
)
;
let
promise
=
waitForPageWithCategorizedDomains
(
)
;
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
await
promise
;
Assert
.
equal
(
false
submitted
"
Ping
should
not
be
submitted
before
threshold
is
reached
.
"
)
;
url
=
getSERPUrl
(
"
searchTelemetryDomainExtraction
.
html
"
)
;
info
(
"
Load
a
sample
SERP
with
organic
and
sponsored
results
.
"
)
;
promise
=
waitForPageWithCategorizedDomains
(
)
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
await
promise
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
Assert
.
equal
(
true
submitted
"
Ping
should
be
submitted
once
threshold
is
reached
.
"
)
;
CATEGORIZATION_SETTINGS
.
PING_SUBMISSION_THRESHOLD
=
oldThreshold
;
}
)
;
add_task
(
async
function
test_quick_activity_to_inactivity_alternation
(
)
{
resetTelemetry
(
)
;
Assert
.
equal
(
null
Glean
.
serp
.
categorization
.
testGetValue
(
)
"
Should
not
have
recorded
any
metrics
yet
.
"
)
;
let
submitted
=
false
;
GleanPings
.
serpCategorization
.
testBeforeNextSubmit
(
reason
=
>
{
submitted
=
true
;
}
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryDomainCategorizationReporting
.
html
"
)
;
info
(
"
Load
a
sample
SERP
with
organic
and
sponsored
results
.
"
)
;
let
promise
=
waitForPageWithCategorizedDomains
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
await
promise
;
let
activityDetectedPromise
=
TestUtils
.
topicObserved
(
"
user
-
interaction
-
active
"
)
;
for
(
let
i
=
0
;
i
<
25
;
i
+
+
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
sleep
(
100
)
;
}
await
activityDetectedPromise
;
let
inactivityDetectedPromise
=
TestUtils
.
topicObserved
(
"
user
-
interaction
-
inactive
"
)
;
await
inactivityDetectedPromise
;
Assert
.
equal
(
false
submitted
"
Ping
should
not
be
submitted
after
a
quick
alternation
from
activity
to
inactivity
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_submit_after_activity_then_inactivity
(
)
{
resetTelemetry
(
)
;
let
oldActivityLimit
=
Services
.
prefs
.
getIntPref
(
"
telemetry
.
fog
.
test
.
activity_limit
"
)
;
Services
.
prefs
.
setIntPref
(
"
telemetry
.
fog
.
test
.
activity_limit
"
2
)
;
Assert
.
equal
(
null
Glean
.
serp
.
categorization
.
testGetValue
(
)
"
Should
not
have
recorded
any
metrics
yet
.
"
)
;
let
submitted
=
false
;
GleanPings
.
serpCategorization
.
testBeforeNextSubmit
(
reason
=
>
{
submitted
=
true
;
Assert
.
equal
(
"
inactivity
"
reason
"
Ping
submission
reason
should
be
'
inactivity
'
.
"
)
;
}
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryDomainCategorizationReporting
.
html
"
)
;
info
(
"
Load
a
sample
SERP
with
organic
and
sponsored
results
.
"
)
;
let
promise
=
waitForPageWithCategorizedDomains
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
await
promise
;
let
activityDetectedPromise
=
TestUtils
.
topicObserved
(
"
user
-
interaction
-
active
"
)
;
for
(
let
i
=
0
;
i
<
25
;
i
+
+
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
sleep
(
100
)
;
}
await
activityDetectedPromise
;
let
inactivityDetectedPromise
=
TestUtils
.
topicObserved
(
"
user
-
interaction
-
inactive
"
)
;
await
inactivityDetectedPromise
;
Assert
.
equal
(
true
submitted
"
Ping
should
be
submitted
after
2
+
seconds
of
activity
followed
by
inactivity
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
prefs
.
setIntPref
(
"
telemetry
.
fog
.
test
.
activity_limit
"
oldActivityLimit
)
;
}
)
;
add_task
(
async
function
test_no_observers_added_if_pref_is_off
(
)
{
resetTelemetry
(
)
;
let
prefOnActiveObserverCount
=
Array
.
from
(
Services
.
obs
.
enumerateObservers
(
"
user
-
interaction
-
active
"
)
)
.
length
;
let
prefOnInactiveObserverCount
=
Array
.
from
(
Services
.
obs
.
enumerateObservers
(
"
user
-
interaction
-
inactive
"
)
)
.
length
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
search
.
serpEventTelemetryCategorization
.
enabled
"
false
)
;
let
prefOffActiveObserverCount
=
Array
.
from
(
Services
.
obs
.
enumerateObservers
(
"
user
-
interaction
-
active
"
)
)
.
length
;
let
prefOffInactiveObserverCount
=
Array
.
from
(
Services
.
obs
.
enumerateObservers
(
"
user
-
interaction
-
inactive
"
)
)
.
length
;
Assert
.
equal
(
prefOnActiveObserverCount
-
prefOffActiveObserverCount
1
"
There
should
be
one
fewer
active
observer
when
the
pref
is
off
.
"
)
;
Assert
.
equal
(
prefOnInactiveObserverCount
-
prefOffInactiveObserverCount
1
"
There
should
be
one
fewer
inactive
observer
when
the
pref
is
off
.
"
)
;
}
)
;
