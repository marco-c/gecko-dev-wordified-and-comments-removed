"
use
strict
"
;
const
TEST_PROVIDER_INFO
=
[
{
telemetryId
:
"
example
"
searchPageRegexp
:
/
^
https
:
\
/
\
/
example
.
org
\
/
browser
\
/
browser
\
/
components
\
/
search
\
/
test
\
/
browser
\
/
telemetry
\
/
searchTelemetryAd_
/
queryParamNames
:
[
"
s
"
]
codeParamName
:
"
abc
"
taggedCodes
:
[
"
ff
"
]
adServerAttributes
:
[
"
mozAttr
"
]
nonAdsLinkRegexps
:
[
]
extraAdServersRegexps
:
[
/
^
https
:
\
/
\
/
example
\
.
com
\
/
ad
/
]
components
:
[
{
type
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
default
:
true
}
]
}
]
;
add_setup
(
async
function
(
)
{
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
TEST_PROVIDER_INFO
)
;
await
waitForIdle
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
log
"
true
]
[
"
browser
.
search
.
serpEventTelemetry
.
enabled
"
true
]
]
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
)
;
resetTelemetry
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_click_non_ads_link
(
)
{
await
waitForIdle
(
)
;
resetTelemetry
(
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryAd_components_text
.
html
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
await
waitForPageWithAdImpressions
(
)
;
let
pageLoadPromise
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
non_ads_link
"
{
}
tab
.
linkedBrowser
)
;
await
pageLoadPromise
;
assertSERPTelemetry
(
[
{
impression
:
{
provider
:
"
example
"
tagged
:
"
true
"
partner_code
:
"
ff
"
source
:
"
unknown
"
is_shopping_page
:
"
false
"
is_private
:
"
false
"
shopping_tab_displayed
:
"
false
"
}
engagements
:
[
{
action
:
SearchSERPTelemetryUtils
.
ACTIONS
.
CLICKED
target
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
NON_ADS_LINK
}
]
adImpressions
:
[
{
component
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
ads_loaded
:
"
13
"
ads_visible
:
"
13
"
ads_hidden
:
"
0
"
}
]
}
]
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
TEST_PROVIDER_INFO
)
;
await
waitForIdle
(
)
;
}
)
;
add_task
(
async
function
test_click_non_ad_with_no_ads
(
)
{
await
waitForIdle
(
)
;
resetTelemetry
(
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryAd_searchbox
.
html
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
await
waitForPageWithAdImpressions
(
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
true
"
https
:
/
/
example
.
com
/
hello_world
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
non_ads_link
"
{
}
tab
.
linkedBrowser
)
;
await
browserLoadedPromise
;
assertSERPTelemetry
(
[
{
impression
:
{
provider
:
"
example
"
tagged
:
"
true
"
partner_code
:
"
ff
"
source
:
"
unknown
"
is_shopping_page
:
"
false
"
is_private
:
"
false
"
shopping_tab_displayed
:
"
false
"
}
engagements
:
[
{
action
:
SearchSERPTelemetryUtils
.
ACTIONS
.
CLICKED
target
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
NON_ADS_LINK
}
]
}
]
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
TEST_PROVIDER_INFO
)
;
await
waitForIdle
(
)
;
}
)
;
