"
use
strict
"
;
requestLongerTimeout
(
5
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
ADLINK_CHECK_TIMEOUT_MS
:
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
RemoteSettings
:
"
resource
:
/
/
services
-
settings
/
remote
-
settings
.
sys
.
mjs
"
SEARCH_TELEMETRY_SHARED
:
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
SearchSERPCategorization
:
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
SearchSERPDomainToCategoriesMap
:
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
sys
.
mjs
"
TELEMETRY_SETTINGS_KEY
:
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
}
)
;
const
TEST_PROVIDER_INFO
=
[
{
telemetryId
:
"
example
"
searchPageRegexp
:
/
^
https
:
\
/
\
/
example
.
org
\
/
browser
\
/
browser
\
/
components
\
/
search
\
/
test
\
/
browser
\
/
telemetry
\
/
searchTelemetry
/
queryParamNames
:
[
"
s
"
]
codeParamName
:
"
abc
"
taggedCodes
:
[
"
ff
"
]
adServerAttributes
:
[
"
mozAttr
"
]
nonAdsLinkRegexps
:
[
]
extraAdServersRegexps
:
[
/
^
https
:
\
/
\
/
example
\
.
com
\
/
ad
/
]
components
:
[
{
type
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
default
:
true
}
]
}
]
;
const
TEST_PROVIDER_BROKEN_VARIANT
=
[
{
.
.
.
TEST_PROVIDER_INFO
[
0
]
queryParamNames
:
[
"
foo
"
]
}
]
;
const
RECORDS
=
{
current
:
TEST_PROVIDER_INFO
created
:
[
]
updated
:
TEST_PROVIDER_INFO
deleted
:
[
]
}
;
const
BROKEN_VARIANT_RECORDS
=
{
current
:
TEST_PROVIDER_BROKEN_VARIANT
created
:
[
]
updated
:
TEST_PROVIDER_BROKEN_VARIANT
deleted
:
[
]
}
;
const
client
=
RemoteSettings
(
TELEMETRY_SETTINGS_KEY
)
;
const
db
=
client
.
db
;
let
record
=
TEST_PROVIDER_INFO
[
0
]
;
async
function
updateClientWithRecords
(
records
)
{
let
promise
=
TestUtils
.
topicObserved
(
"
search
-
telemetry
-
v2
-
synced
"
)
;
await
client
.
emit
(
"
sync
"
{
data
:
records
}
)
;
info
(
"
Wait
for
SearchSERPTelemetry
to
update
.
"
)
;
await
promise
;
}
add_setup
(
async
function
(
)
{
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
TEST_PROVIDER_BROKEN_VARIANT
)
;
await
waitForIdle
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
log
"
true
]
[
"
browser
.
search
.
serpEventTelemetry
.
enabled
"
true
]
[
"
dom
.
ipc
.
processCount
.
webIsolated
"
1
]
]
}
)
;
Services
.
ppmm
.
sharedData
.
set
(
SEARCH_TELEMETRY_SHARED
.
LOAD_TIMEOUT
500
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
)
;
resetTelemetry
(
)
;
await
db
.
clear
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
Services
.
ppmm
.
sharedData
.
set
(
SEARCH_TELEMETRY_SHARED
.
LOAD_TIMEOUT
ADLINK_CHECK_TIMEOUT_MS
)
;
Services
.
ppmm
.
sharedData
.
flush
(
)
;
}
)
;
}
)
;
add_task
(
async
function
update_telemetry_tab_already_open
(
)
{
info
(
"
Load
SERP
in
a
new
tab
.
"
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryAd
.
html
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
info
(
"
Wait
a
brief
amount
of
time
for
a
possible
SERP
impression
.
"
)
;
await
waitForIdle
(
)
;
info
(
"
Assert
no
impressions
are
found
.
"
)
;
assertSERPTelemetry
(
[
]
)
;
info
(
"
Update
search
-
telemetry
-
v2
with
a
matching
queryParamName
.
"
)
;
await
updateClientWithRecords
(
RECORDS
)
;
info
(
"
Reload
page
.
"
)
;
gBrowser
.
reload
(
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
await
waitForPageWithAdImpressions
(
)
;
assertSERPTelemetry
(
[
{
impression
:
{
provider
:
"
example
"
tagged
:
"
true
"
partner_code
:
"
ff
"
source
:
"
reload
"
is_shopping_page
:
"
false
"
is_private
:
"
false
"
shopping_tab_displayed
:
"
false
"
}
adImpressions
:
[
{
component
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
ads_loaded
:
"
2
"
ads_visible
:
"
2
"
ads_hidden
:
"
0
"
}
]
}
]
)
;
info
(
"
Update
search
-
telemetry
-
v2
with
non
-
matching
queryParamName
.
"
)
;
await
updateClientWithRecords
(
BROKEN_VARIANT_RECORDS
)
;
info
(
"
Remove
tab
and
reset
telemetry
.
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
resetTelemetry
(
)
;
}
)
;
add_task
(
async
function
update_telemetry_tab_closed
(
)
{
info
(
"
Load
SERP
in
a
new
tab
.
"
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryAd
.
html
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
info
(
"
Wait
a
brief
amount
of
time
for
a
possible
SERP
impression
.
"
)
;
await
waitForIdle
(
)
;
info
(
"
Assert
no
impressions
are
found
.
"
)
;
assertSERPTelemetry
(
[
]
)
;
info
(
"
Remove
tab
.
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
info
(
"
Update
search
-
telemetry
-
v2
with
a
matching
queryParamName
.
"
)
;
await
updateClientWithRecords
(
RECORDS
)
;
info
(
"
Load
SERP
in
a
new
tab
.
"
)
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
await
waitForPageWithAdImpressions
(
)
;
assertSERPTelemetry
(
[
{
impression
:
{
provider
:
"
example
"
tagged
:
"
true
"
partner_code
:
"
ff
"
source
:
"
unknown
"
is_shopping_page
:
"
false
"
is_private
:
"
false
"
shopping_tab_displayed
:
"
false
"
}
adImpressions
:
[
{
component
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
ads_loaded
:
"
2
"
ads_visible
:
"
2
"
ads_hidden
:
"
0
"
}
]
}
]
)
;
info
(
"
Update
search
-
telemetry
-
v2
with
non
-
matching
queryParamName
.
"
)
;
await
updateClientWithRecords
(
BROKEN_VARIANT_RECORDS
)
;
info
(
"
Remove
tab
and
reset
telemetry
.
"
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
resetTelemetry
(
)
;
}
)
;
add_task
(
async
function
update_telemetry_multiple_tabs
(
)
{
info
(
"
Load
SERP
in
a
new
tab
.
"
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryAd
.
html
"
)
;
let
tabs
=
[
]
;
for
(
let
index
=
0
;
index
<
5
;
+
+
index
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
tabs
.
push
(
tab
)
;
}
info
(
"
Wait
a
brief
amount
of
time
for
a
possible
SERP
impression
.
"
)
;
await
waitForIdle
(
)
;
info
(
"
Assert
no
impressions
are
found
.
"
)
;
assertSERPTelemetry
(
[
]
)
;
info
(
"
Update
search
-
telemetry
-
v2
with
a
matching
queryParamName
.
"
)
;
await
updateClientWithRecords
(
RECORDS
)
;
for
(
let
tab
of
tabs
)
{
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
gBrowser
.
reload
(
)
;
await
waitForPageWithAdImpressions
(
)
;
assertSERPTelemetry
(
[
{
impression
:
{
provider
:
"
example
"
tagged
:
"
true
"
partner_code
:
"
ff
"
source
:
"
reload
"
is_shopping_page
:
"
false
"
is_private
:
"
false
"
shopping_tab_displayed
:
"
false
"
}
adImpressions
:
[
{
component
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
ads_loaded
:
"
2
"
ads_visible
:
"
2
"
ads_hidden
:
"
0
"
}
]
}
]
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
resetTelemetry
(
)
;
}
info
(
"
Update
search
-
telemetry
-
v2
with
non
-
matching
queryParamName
.
"
)
;
await
updateClientWithRecords
(
BROKEN_VARIANT_RECORDS
)
;
}
)
;
add_task
(
async
function
update_telemetry_multiple_processes_and_tabs
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
ipc
.
processCount
.
webIsolated
"
4
]
]
}
)
;
info
(
"
Load
SERP
in
a
new
tab
.
"
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryAd
.
html
"
)
;
let
tabs
=
[
]
;
for
(
let
index
=
0
;
index
<
8
;
+
+
index
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
tabs
.
push
(
tab
)
;
}
info
(
"
Wait
a
brief
amount
of
time
for
a
possible
SERP
impression
.
"
)
;
await
waitForIdle
(
)
;
info
(
"
Assert
no
impressions
are
found
.
"
)
;
assertSERPTelemetry
(
[
]
)
;
info
(
"
Update
search
-
telemetry
-
v2
with
a
matching
queryParamName
.
"
)
;
await
updateClientWithRecords
(
RECORDS
)
;
for
(
let
tab
of
tabs
)
{
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
gBrowser
.
reload
(
)
;
await
waitForPageWithAdImpressions
(
)
;
assertSERPTelemetry
(
[
{
impression
:
{
provider
:
"
example
"
tagged
:
"
true
"
partner_code
:
"
ff
"
source
:
"
reload
"
is_shopping_page
:
"
false
"
is_private
:
"
false
"
shopping_tab_displayed
:
"
false
"
}
adImpressions
:
[
{
component
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
ads_loaded
:
"
2
"
ads_visible
:
"
2
"
ads_hidden
:
"
0
"
}
]
}
]
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
resetTelemetry
(
)
;
}
info
(
"
Update
search
-
telemetry
-
v2
with
non
-
matching
queryParamName
.
"
)
;
await
updateClientWithRecords
(
BROKEN_VARIANT_RECORDS
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
