"
use
strict
"
;
const
TEST_PROVIDER_INFO
=
[
{
telemetryId
:
"
slow
-
page
-
load
"
searchPageRegexp
:
/
^
https
:
\
/
\
/
example
.
org
\
/
browser
\
/
browser
\
/
components
\
/
search
\
/
test
\
/
browser
\
/
telemetry
\
/
slow_loading_page_with_ads
(
_on_load_event
)
?
.
html
/
queryParamName
:
"
s
"
codeParamName
:
"
abc
"
taggedCodes
:
[
"
ff
"
]
followOnParamNames
:
[
"
a
"
]
extraAdServersRegexps
:
[
/
^
https
:
\
/
\
/
example
\
.
com
\
/
ad2
?
/
]
components
:
[
{
type
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
default
:
true
}
]
}
]
;
add_setup
(
async
function
(
)
{
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
TEST_PROVIDER_INFO
)
;
await
waitForIdle
(
)
;
let
oldCanRecord
=
Services
.
telemetry
.
canRecordExtended
;
Services
.
telemetry
.
canRecordExtended
=
true
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
log
"
true
]
[
"
browser
.
search
.
serpEventTelemetry
.
enabled
"
true
]
]
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
)
;
Services
.
telemetry
.
canRecordExtended
=
oldCanRecord
;
resetTelemetry
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_track_ad_on_DOMContentLoaded
(
)
{
resetTelemetry
(
)
;
let
observeAdPreviouslyRecorded
=
TestUtils
.
consoleMessageObserved
(
msg
=
>
{
return
(
typeof
msg
.
wrappedJSObject
.
arguments
?
.
[
0
]
=
=
"
string
"
&
&
msg
.
wrappedJSObject
.
arguments
[
0
]
.
includes
(
"
Ad
was
previously
reported
for
browser
with
URI
"
)
)
;
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
getSERPUrl
(
"
slow_loading_page_with_ads
.
html
"
)
)
;
await
observeAdPreviouslyRecorded
;
await
assertSearchSourcesTelemetry
(
{
}
{
"
browser
.
search
.
content
.
unknown
"
:
{
"
slow
-
page
-
load
:
tagged
:
ff
"
:
1
}
"
browser
.
search
.
withads
.
unknown
"
:
{
"
slow
-
page
-
load
:
tagged
"
:
1
}
}
)
;
assertImpressionEvents
(
[
{
impression
:
{
provider
:
"
slow
-
page
-
load
"
tagged
:
"
true
"
partner_code
:
"
ff
"
source
:
"
unknown
"
is_shopping_page
:
"
false
"
shopping_tab_displayed
:
"
false
"
}
}
]
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_track_ad_on_load_event
(
)
{
resetTelemetry
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
getSERPUrl
(
"
slow_loading_page_with_ads_on_load_event
.
html
"
)
)
;
await
assertSearchSourcesTelemetry
(
{
}
{
"
browser
.
search
.
content
.
unknown
"
:
{
"
slow
-
page
-
load
:
tagged
:
ff
"
:
1
}
"
browser
.
search
.
withads
.
unknown
"
:
{
"
slow
-
page
-
load
:
tagged
"
:
1
}
}
)
;
assertImpressionEvents
(
[
{
impression
:
{
provider
:
"
slow
-
page
-
load
"
tagged
:
"
true
"
partner_code
:
"
ff
"
source
:
"
unknown
"
is_shopping_page
:
"
false
"
shopping_tab_displayed
:
"
false
"
}
}
]
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
