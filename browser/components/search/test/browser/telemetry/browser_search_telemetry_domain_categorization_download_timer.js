"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
:
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
SearchSERPDomainToCategoriesMap
:
"
resource
:
/
/
/
modules
/
SearchSERPTelemetry
.
sys
.
mjs
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
sys
.
mjs
"
}
)
;
const
TEST_PROVIDER_INFO
=
[
{
telemetryId
:
"
example
"
searchPageRegexp
:
/
^
https
:
\
/
\
/
example
.
org
\
/
browser
\
/
browser
\
/
components
\
/
search
\
/
test
\
/
browser
\
/
telemetry
\
/
searchTelemetry
/
queryParamNames
:
[
"
s
"
]
codeParamName
:
"
abc
"
taggedCodes
:
[
"
ff
"
]
adServerAttributes
:
[
"
mozAttr
"
]
nonAdsLinkRegexps
:
[
/
^
https
:
\
/
\
/
example
.
com
/
]
extraAdServersRegexps
:
[
/
^
https
:
\
/
\
/
example
\
.
com
\
/
ad
/
]
domainExtraction
:
{
ads
:
[
{
selectors
:
"
[
data
-
ad
-
domain
]
"
method
:
"
dataAttribute
"
options
:
{
dataAttributeKey
:
"
adDomain
"
}
}
{
selectors
:
"
.
ad
"
method
:
"
href
"
options
:
{
queryParamKey
:
"
ad_domain
"
}
}
]
nonAds
:
[
{
selectors
:
"
#
results
.
organic
a
"
method
:
"
href
"
}
]
}
components
:
[
{
type
:
SearchSERPTelemetryUtils
.
COMPONENTS
.
AD_LINK
default
:
true
}
]
}
]
;
function
waitForDownloadError
(
)
{
return
TestUtils
.
consoleMessageObserved
(
msg
=
>
{
return
(
typeof
msg
.
wrappedJSObject
.
arguments
?
.
[
0
]
=
=
"
string
"
&
&
msg
.
wrappedJSObject
.
arguments
[
0
]
.
includes
(
"
Could
not
download
file
:
"
)
)
;
}
)
;
}
const
client
=
RemoteSettings
(
TELEMETRY_CATEGORIZATION_KEY
)
;
const
db
=
client
.
db
;
const
TIMEOUT_IN_MS
=
250
;
add_setup
(
async
function
(
)
{
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
TEST_PROVIDER_INFO
)
;
await
waitForIdle
(
)
;
await
db
.
clear
(
)
;
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
search
.
serpEventTelemetryCategorization
.
enabled
"
)
)
{
let
promise
=
waitForDomainToCategoriesUninit
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
serpEventTelemetryCategorization
.
enabled
"
false
]
]
}
)
;
await
promise
;
}
let
defaultDownloadSettings
=
{
.
.
.
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
}
;
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
.
base
=
TIMEOUT_IN_MS
;
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
.
minAdjust
=
0
;
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
.
maxAdjust
=
0
;
registerCleanupFunction
(
async
(
)
=
>
{
await
SpecialPowers
.
popPrefEnv
(
)
;
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
search
.
serpEventTelemetryCategorization
.
enabled
"
)
)
{
await
waitForDomainToCategoriesInit
(
)
;
}
SearchSERPTelemetry
.
overrideSearchTelemetryForTests
(
)
;
resetTelemetry
(
)
;
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
=
{
.
.
.
defaultDownloadSettings
}
;
}
)
;
}
)
;
add_task
(
async
function
test_download_after_failure
(
)
{
let
{
record
attachment
}
=
await
mockRecordWithAttachment
(
{
id
:
"
example_id
"
version
:
1
filename
:
"
domain_category_mappings
.
json
"
mapping
:
CONVERTED_ATTACHMENT_VALUES
}
)
;
await
db
.
create
(
record
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
let
downloadError
=
waitForDownloadError
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
serpEventTelemetryCategorization
.
enabled
"
true
]
]
}
)
;
await
downloadError
;
client
.
attachments
.
cacheImpl
.
set
(
record
.
id
attachment
)
;
await
TestUtils
.
topicObserved
(
"
domain
-
to
-
categories
-
map
-
update
-
complete
"
)
;
let
url
=
getSERPUrl
(
"
searchTelemetryDomainCategorizationReporting
.
html
"
)
;
info
(
"
Load
a
sample
SERP
with
organic
and
sponsored
results
.
"
)
;
let
promise
=
waitForPageWithCategorizedDomains
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
await
promise
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
assertCategorizationValues
(
[
{
organic_category
:
"
3
"
organic_num_domains
:
"
1
"
organic_num_inconclusive
:
"
0
"
organic_num_unknown
:
"
0
"
sponsored_category
:
"
4
"
sponsored_num_domains
:
"
2
"
sponsored_num_inconclusive
:
"
0
"
sponsored_num_unknown
:
"
0
"
mappings_version
:
"
1
"
app_version
:
APP_MAJOR_VERSION
channel
:
CHANNEL
region
:
REGION
partner_code
:
"
ff
"
provider
:
"
example
"
tagged
:
"
true
"
is_shopping_page
:
"
false
"
num_ads_hidden
:
"
0
"
num_ads_loaded
:
"
2
"
num_ads_visible
:
"
2
"
num_ads_clicked
:
"
0
"
}
]
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
waitForDomainToCategoriesUninit
(
)
;
await
resetCategorizationCollection
(
record
)
;
}
)
;
add_task
(
async
function
test_download_after_multiple_failures
(
)
{
let
{
record
}
=
await
mockRecordWithAttachment
(
{
id
:
"
example_id
"
version
:
1
filename
:
"
domain_category_mappings
.
json
"
mapping
:
CONVERTED_ATTACHMENT_VALUES
}
)
;
await
db
.
create
(
record
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
let
downloadError
=
waitForDownloadError
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
serpEventTelemetryCategorization
.
enabled
"
true
]
]
}
)
;
await
downloadError
;
for
(
let
i
=
0
;
i
<
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
.
maxTriesPerSession
;
+
+
i
)
{
await
waitForDownloadError
(
)
;
}
let
consoleObserved
=
false
;
let
timeout
=
false
;
let
firstPromise
=
waitForDownloadError
(
)
.
then
(
(
)
=
>
{
consoleObserved
=
true
;
}
)
;
let
secondPromise
=
new
Promise
(
resolve
=
>
setTimeout
(
resolve
TIMEOUT_IN_MS
+
100
)
)
.
then
(
(
)
=
>
(
timeout
=
true
)
)
;
await
Promise
.
race
(
[
firstPromise
secondPromise
]
)
;
Assert
.
equal
(
consoleObserved
false
"
Encountered
download
failure
"
)
;
Assert
.
equal
(
timeout
true
"
Timeout
occured
"
)
;
Assert
.
ok
(
SearchSERPDomainToCategoriesMap
.
empty
"
Map
is
empty
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
waitForDomainToCategoriesUninit
(
)
;
await
resetCategorizationCollection
(
record
)
;
}
)
;
add_task
(
async
function
test_cancel_download_timer
(
)
{
let
{
record
}
=
await
mockRecordWithAttachment
(
{
id
:
"
example_id
"
version
:
1
filename
:
"
domain_category_mappings
.
json
"
mapping
:
CONVERTED_ATTACHMENT_VALUES
}
)
;
await
db
.
create
(
record
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
let
downloadError
=
waitForDownloadError
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
serpEventTelemetryCategorization
.
enabled
"
true
]
]
}
)
;
await
downloadError
;
let
observeCancel
=
TestUtils
.
consoleMessageObserved
(
msg
=
>
{
return
(
typeof
msg
.
wrappedJSObject
.
arguments
?
.
[
0
]
=
=
"
string
"
&
&
msg
.
wrappedJSObject
.
arguments
[
0
]
.
includes
(
"
Cancel
and
nullify
download
timer
.
"
)
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
observeCancel
;
await
waitForDomainToCategoriesUninit
(
)
;
let
consoleObserved
=
false
;
let
timeout
=
false
;
let
firstPromise
=
waitForDownloadError
(
)
.
then
(
(
)
=
>
{
consoleObserved
=
true
;
}
)
;
let
secondPromise
=
new
Promise
(
resolve
=
>
setTimeout
(
resolve
TIMEOUT_IN_MS
+
100
)
)
.
then
(
(
)
=
>
(
timeout
=
true
)
)
;
await
Promise
.
race
(
[
firstPromise
secondPromise
]
)
;
Assert
.
equal
(
consoleObserved
false
"
Encountered
download
failure
"
)
;
Assert
.
equal
(
timeout
true
"
Timeout
occured
"
)
;
Assert
.
ok
(
SearchSERPDomainToCategoriesMap
.
empty
"
Map
is
empty
"
)
;
await
resetCategorizationCollection
(
record
)
;
}
)
;
add_task
(
async
function
test_download_adjust
(
)
{
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
.
base
=
0
;
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
.
minAdjust
=
1000
;
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
.
maxAdjust
=
1000
;
let
{
record
}
=
await
mockRecordWithAttachment
(
{
id
:
"
example_id
"
version
:
1
filename
:
"
domain_category_mappings
.
json
"
mapping
:
CONVERTED_ATTACHMENT_VALUES
}
)
;
await
db
.
create
(
record
)
;
await
db
.
importChanges
(
{
}
Date
.
now
(
)
)
;
let
downloadError
=
waitForDownloadError
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
serpEventTelemetryCategorization
.
enabled
"
true
]
]
}
)
;
await
downloadError
;
let
consoleObserved
=
false
;
let
timeout
=
false
;
let
firstPromise
=
waitForDownloadError
(
)
.
then
(
(
)
=
>
{
consoleObserved
=
true
;
}
)
;
let
secondPromise
=
new
Promise
(
resolve
=
>
setTimeout
(
resolve
250
)
)
.
then
(
(
)
=
>
(
timeout
=
true
)
)
;
await
Promise
.
race
(
[
firstPromise
secondPromise
]
)
;
Assert
.
equal
(
timeout
true
"
Timeout
occured
"
)
;
Assert
.
equal
(
consoleObserved
false
"
Encountered
download
failure
"
)
;
await
firstPromise
;
Assert
.
equal
(
consoleObserved
true
"
Encountered
download
failure
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
waitForDomainToCategoriesUninit
(
)
;
await
resetCategorizationCollection
(
record
)
;
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
.
base
=
TIMEOUT_IN_MS
;
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
.
minAdjust
=
0
;
TELEMETRY_CATEGORIZATION_DOWNLOAD_SETTINGS
.
maxAdjust
=
0
;
}
)
;
