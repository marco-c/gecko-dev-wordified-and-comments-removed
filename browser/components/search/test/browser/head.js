XPCOMUtils
.
defineLazyModuleGetters
(
this
{
CustomizableUITestUtils
:
"
resource
:
/
/
testing
-
common
/
CustomizableUITestUtils
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
SearchUtils
:
"
resource
:
/
/
gre
/
modules
/
SearchUtils
.
jsm
"
}
)
;
let
gCUITestUtils
=
new
CustomizableUITestUtils
(
window
)
;
function
isSubObjectOf
(
expectedObj
actualObj
name
)
{
for
(
let
prop
in
expectedObj
)
{
if
(
typeof
expectedObj
[
prop
]
=
=
"
function
"
)
{
continue
;
}
if
(
expectedObj
[
prop
]
instanceof
Object
)
{
is
(
actualObj
[
prop
]
.
length
expectedObj
[
prop
]
.
length
name
+
"
[
"
+
prop
+
"
]
"
)
;
isSubObjectOf
(
expectedObj
[
prop
]
actualObj
[
prop
]
name
+
"
[
"
+
prop
+
"
]
"
)
;
}
else
{
is
(
actualObj
[
prop
]
expectedObj
[
prop
]
name
+
"
[
"
+
prop
+
"
]
"
)
;
}
}
}
function
getLocale
(
)
{
return
Services
.
locale
.
requestedLocale
|
|
undefined
;
}
function
promiseEvent
(
aTarget
aEventName
aPreventDefault
)
{
function
cancelEvent
(
event
)
{
if
(
aPreventDefault
)
{
event
.
preventDefault
(
)
;
}
return
true
;
}
return
BrowserTestUtils
.
waitForEvent
(
aTarget
aEventName
false
cancelEvent
)
;
}
async
function
promiseNewEngine
(
basename
options
=
{
}
)
{
let
setAsCurrent
=
options
.
setAsCurrent
=
=
undefined
?
true
:
options
.
setAsCurrent
;
info
(
"
Waiting
for
engine
to
be
added
:
"
+
basename
)
;
let
url
=
getRootDirectory
(
options
.
testPath
|
|
gTestPath
)
+
basename
;
let
engine
=
await
Services
.
search
.
addOpenSearchEngine
(
url
options
.
iconURL
|
|
"
"
)
;
info
(
"
Search
engine
added
:
"
+
basename
)
;
const
current
=
await
Services
.
search
.
getDefault
(
)
;
if
(
setAsCurrent
)
{
await
Services
.
search
.
setDefault
(
engine
)
;
}
const
currentPrivate
=
await
Services
.
search
.
getDefaultPrivate
(
)
;
if
(
options
.
setAsCurrentPrivate
)
{
await
Services
.
search
.
setDefaultPrivate
(
engine
)
;
}
registerCleanupFunction
(
async
(
)
=
>
{
if
(
setAsCurrent
)
{
await
Services
.
search
.
setDefault
(
current
)
;
}
if
(
options
.
setAsCurrentPrivate
)
{
await
Services
.
search
.
setDefaultPrivate
(
currentPrivate
)
;
}
await
Services
.
search
.
removeEngine
(
engine
)
;
info
(
"
Search
engine
removed
:
"
+
basename
)
;
}
)
;
return
engine
;
}
function
getOneOffs
(
)
{
let
oneOffs
=
[
]
;
let
searchPopup
=
document
.
getElementById
(
"
PopupSearchAutoComplete
"
)
;
let
oneOffsContainer
=
searchPopup
.
searchOneOffsContainer
;
let
oneOff
=
oneOffsContainer
.
querySelector
(
"
.
search
-
panel
-
one
-
offs
"
)
;
for
(
oneOff
=
oneOff
.
firstChild
;
oneOff
;
oneOff
=
oneOff
.
nextSibling
)
{
if
(
oneOff
.
nodeType
=
=
Node
.
ELEMENT_NODE
)
{
oneOffs
.
push
(
oneOff
)
;
}
}
return
oneOffs
;
}
