ChromeUtils
.
defineESModuleGetters
(
this
{
AddonTestUtils
:
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
sys
.
mjs
"
CustomizableUITestUtils
:
"
resource
:
/
/
testing
-
common
/
CustomizableUITestUtils
.
sys
.
mjs
"
FormHistory
:
"
resource
:
/
/
gre
/
modules
/
FormHistory
.
sys
.
mjs
"
FormHistoryTestUtils
:
"
resource
:
/
/
testing
-
common
/
FormHistoryTestUtils
.
sys
.
mjs
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
sys
.
mjs
"
SearchTestUtils
:
"
resource
:
/
/
testing
-
common
/
SearchTestUtils
.
sys
.
mjs
"
SearchUITestUtils
:
"
resource
:
/
/
testing
-
common
/
SearchUITestUtils
.
sys
.
mjs
"
SearchUtils
:
"
moz
-
src
:
/
/
/
toolkit
/
components
/
search
/
SearchUtils
.
sys
.
mjs
"
TelemetryTestUtils
:
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
sys
.
mjs
"
UrlbarSearchUtils
:
"
resource
:
/
/
/
modules
/
UrlbarSearchUtils
.
sys
.
mjs
"
}
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
UrlbarTestUtils
"
(
)
=
>
{
const
{
UrlbarTestUtils
:
module
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
sys
.
mjs
"
)
;
module
.
init
(
this
)
;
return
module
;
}
)
;
let
gCUITestUtils
=
new
CustomizableUITestUtils
(
window
)
;
AddonTestUtils
.
initMochitest
(
this
)
;
SearchTestUtils
.
init
(
this
)
;
SearchUITestUtils
.
init
(
this
)
;
function
isSubObjectOf
(
expectedObj
actualObj
name
)
{
for
(
let
prop
in
expectedObj
)
{
if
(
typeof
expectedObj
[
prop
]
=
=
"
function
"
)
{
continue
;
}
if
(
expectedObj
[
prop
]
instanceof
Object
)
{
is
(
actualObj
[
prop
]
.
length
expectedObj
[
prop
]
.
length
name
+
"
[
"
+
prop
+
"
]
"
)
;
isSubObjectOf
(
expectedObj
[
prop
]
actualObj
[
prop
]
name
+
"
[
"
+
prop
+
"
]
"
)
;
}
else
{
is
(
actualObj
[
prop
]
expectedObj
[
prop
]
name
+
"
[
"
+
prop
+
"
]
"
)
;
}
}
}
function
getLocale
(
)
{
return
Services
.
locale
.
requestedLocale
|
|
undefined
;
}
function
promiseEvent
(
aTarget
aEventName
aPreventDefault
)
{
function
cancelEvent
(
event
)
{
if
(
aPreventDefault
)
{
event
.
preventDefault
(
)
;
}
return
true
;
}
return
BrowserTestUtils
.
waitForEvent
(
aTarget
aEventName
false
cancelEvent
)
;
}
async
function
getOneOffs
(
)
{
let
oneOffs
=
[
]
;
let
searchPopup
=
document
.
getElementById
(
"
PopupSearchAutoComplete
"
)
;
if
(
searchPopup
.
oneOffButtons
.
_rebuilding
)
{
await
promiseEvent
(
searchPopup
.
oneOffButtons
"
rebuild
"
)
;
}
let
oneOffsContainer
=
searchPopup
.
searchOneOffsContainer
;
let
oneOff
=
oneOffsContainer
.
querySelector
(
"
.
search
-
panel
-
one
-
offs
"
)
;
for
(
oneOff
=
oneOff
.
firstChild
;
oneOff
;
oneOff
=
oneOff
.
nextSibling
)
{
if
(
oneOff
.
nodeType
=
=
Node
.
ELEMENT_NODE
)
{
oneOffs
.
push
(
oneOff
)
;
}
}
return
oneOffs
;
}
async
function
typeInSearchField
(
browser
text
fieldName
)
{
await
SpecialPowers
.
spawn
(
browser
[
[
fieldName
text
]
]
async
function
(
[
contentFieldName
contentText
]
)
{
let
searchInput
=
content
.
document
.
getElementById
(
contentFieldName
)
;
searchInput
.
focus
(
)
;
searchInput
.
value
=
contentText
;
}
)
;
}
async
function
searchInSearchbar
(
inputText
win
=
window
)
{
await
new
Promise
(
r
=
>
waitForFocus
(
r
win
)
)
;
let
sb
=
win
.
document
.
getElementById
(
"
searchbar
"
)
;
sb
.
focus
(
)
;
sb
.
value
=
inputText
;
sb
.
textbox
.
controller
.
startSearch
(
inputText
)
;
await
BrowserTestUtils
.
waitForEvent
(
sb
.
textbox
.
popup
"
popupshown
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
sb
.
textbox
.
controller
.
searchStatus
>
=
Ci
.
nsIAutoCompleteController
.
STATUS_COMPLETE_NO_MATCH
"
The
search
in
the
searchbar
must
complete
.
"
)
;
return
sb
.
textbox
.
popup
;
}
function
clearSearchbarHistory
(
)
{
info
(
"
cleanup
the
search
history
"
)
;
return
FormHistory
.
update
(
{
op
:
"
remove
"
fieldname
:
"
searchbar
-
history
"
}
)
;
}
registerCleanupFunction
(
async
(
)
=
>
{
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
function
fillTextField
(
id
text
win
)
{
let
elt
=
win
.
document
.
getElementById
(
id
)
;
elt
.
focus
(
)
;
elt
.
select
(
)
;
EventUtils
.
synthesizeKey
(
"
a
"
{
metaKey
:
true
}
win
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
{
}
win
)
;
for
(
let
c
of
text
.
split
(
"
"
)
)
{
EventUtils
.
synthesizeKey
(
c
{
}
win
)
;
}
}
async
function
promiseContentSearchChange
(
browser
searchEngineChangeFn
)
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
content
.
_searchDetails
=
{
defaultEnginesList
:
[
]
listener
:
event
=
>
{
if
(
event
.
detail
.
type
=
=
"
CurrentEngine
"
)
{
content
.
_searchDetails
.
defaultEnginesList
.
push
(
content
.
wrappedJSObject
.
gContentSearchController
.
defaultEngine
.
name
)
;
}
}
}
;
content
.
addEventListener
(
"
ContentSearchService
"
content
.
_searchDetails
.
listener
{
mozSystemGroup
:
true
}
)
;
}
)
;
let
expectedEngineName
=
await
searchEngineChangeFn
(
)
;
await
SpecialPowers
.
spawn
(
browser
[
expectedEngineName
]
async
expectedEngineNameChild
=
>
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
_searchDetails
.
defaultEnginesList
&
&
content
.
_searchDetails
.
defaultEnginesList
[
content
.
_searchDetails
.
defaultEnginesList
.
length
-
1
]
=
=
expectedEngineNameChild
Waiting
for
{
expectedEngineNameChild
}
to
be
set
)
;
content
.
removeEventListener
(
"
ContentSearchService
"
content
.
_searchDetails
.
listener
{
mozSystemGroup
:
true
}
)
;
delete
content
.
_searchDetails
;
}
)
;
}
