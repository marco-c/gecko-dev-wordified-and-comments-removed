const
{
SearchTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
SearchTestUtils
.
jsm
"
)
;
const
searchPopup
=
document
.
getElementById
(
"
PopupSearchAutoComplete
"
)
;
const
oneOffsContainer
=
searchPopup
.
searchOneOffsContainer
;
const
kValues
=
[
"
foo1
"
"
foo2
"
"
foo3
"
]
;
const
kUserValue
=
"
foo
"
;
function
getOpenSearchItems
(
)
{
let
os
=
[
]
;
let
addEngineList
=
oneOffsContainer
.
querySelector
(
"
.
search
-
add
-
engines
"
)
;
for
(
let
item
=
addEngineList
.
firstElementChild
;
item
;
item
=
item
.
nextElementSibling
)
os
.
push
(
item
)
;
return
os
;
}
let
searchbar
;
let
textbox
;
add_task
(
async
function
init
(
)
{
searchbar
=
await
gCUITestUtils
.
addSearchBar
(
)
;
registerCleanupFunction
(
(
)
=
>
{
gCUITestUtils
.
removeSearchBar
(
)
;
}
)
;
textbox
=
searchbar
.
textbox
;
await
promiseNewEngine
(
"
testEngine
.
xml
"
)
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
info
(
"
cleanup
the
search
history
"
)
;
searchbar
.
FormHistory
.
update
(
{
op
:
"
remove
"
fieldname
:
"
searchbar
-
history
"
}
{
handleCompletion
:
resolve
handleError
:
reject
}
)
;
}
)
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
info
(
"
adding
search
history
values
:
"
+
kValues
)
;
let
addOps
=
kValues
.
map
(
value
=
>
{
return
{
op
:
"
add
"
fieldname
:
"
searchbar
-
history
"
value
}
;
}
)
;
searchbar
.
FormHistory
.
update
(
addOps
{
handleCompletion
:
resolve
handleError
:
reject
}
)
;
}
)
;
textbox
.
value
=
kUserValue
;
}
)
;
add_task
(
async
function
test_arrows
(
)
{
let
promise
=
promiseEvent
(
searchPopup
"
popupshown
"
)
;
info
(
"
Opening
search
panel
"
)
;
searchbar
.
focus
(
)
;
await
promise
;
is
(
textbox
.
mController
.
searchString
kUserValue
"
The
search
string
should
be
'
foo
'
"
)
;
is
(
searchPopup
.
matchCount
kValues
.
length
"
There
should
be
3
suggestions
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
let
oneOffs
=
getOneOffs
(
)
;
ok
(
oneOffs
.
length
>
=
4
"
we
have
at
least
4
one
-
off
buttons
displayed
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
for
(
let
i
=
0
;
i
<
kValues
.
length
;
+
+
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
is
(
searchPopup
.
selectedIndex
i
"
the
suggestion
at
index
"
+
i
+
"
should
be
selected
"
)
;
is
(
textbox
.
value
kValues
[
i
]
"
the
textfield
value
should
be
"
+
kValues
[
i
]
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
kUserValue
"
the
textfield
value
should
be
back
to
initial
value
"
)
;
for
(
let
i
=
0
;
i
<
oneOffs
.
length
;
+
+
i
)
{
is
(
textbox
.
selectedButton
oneOffs
[
i
]
"
the
one
-
off
button
#
"
+
(
i
+
1
)
+
"
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
}
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
info
(
"
now
test
the
up
arrow
key
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
for
(
let
i
=
oneOffs
.
length
;
i
;
-
-
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
i
-
1
]
"
the
one
-
off
button
#
"
+
i
+
"
should
be
selected
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
for
(
let
i
=
kValues
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
is
(
searchPopup
.
selectedIndex
i
"
the
suggestion
at
index
"
+
i
+
"
should
be
selected
"
)
;
is
(
textbox
.
value
kValues
[
i
]
"
the
textfield
value
should
be
"
+
kValues
[
i
]
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
}
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
kUserValue
"
the
textfield
value
should
be
back
to
initial
value
"
)
;
}
)
;
add_task
(
async
function
test_typing_clears_button_selection
(
)
{
is
(
Services
.
focus
.
focusedElement
textbox
.
inputField
"
the
search
bar
should
be
focused
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
EventUtils
.
sendString
(
"
a
"
)
;
ok
(
!
textbox
.
selectedButton
"
the
settings
item
should
be
de
-
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Backspace
"
)
;
}
)
;
add_task
(
async
function
test_tab
(
)
{
is
(
Services
.
focus
.
focusedElement
textbox
.
inputField
"
the
search
bar
should
be
focused
"
)
;
let
oneOffs
=
getOneOffs
(
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
for
(
let
i
=
0
;
i
<
oneOffs
.
length
;
+
+
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
i
]
"
the
one
-
off
button
#
"
+
(
i
+
1
)
+
"
should
be
selected
"
)
;
}
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
kUserValue
"
the
textfield
value
should
be
unmodified
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
let
promise
=
promiseEvent
(
searchPopup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
await
promise
;
isnot
(
Services
.
focus
.
focusedElement
textbox
.
inputField
"
the
search
bar
no
longer
be
focused
"
)
;
}
)
;
add_task
(
async
function
test_shift_tab
(
)
{
let
promise
=
promiseEvent
(
searchPopup
"
popupshown
"
)
;
info
(
"
Opening
search
panel
"
)
;
searchbar
.
focus
(
)
;
await
promise
;
let
oneOffs
=
getOneOffs
(
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
for
(
let
i
=
oneOffs
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
is
(
textbox
.
selectedButton
oneOffs
[
i
]
"
the
one
-
off
button
#
"
+
(
i
+
1
)
+
"
should
be
selected
"
)
;
if
(
i
)
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
shiftKey
:
true
}
)
;
}
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
kUserValue
"
the
textfield
value
should
be
unmodified
"
)
;
promise
=
promiseEvent
(
searchPopup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
shiftKey
:
true
}
)
;
await
promise
;
isnot
(
Services
.
focus
.
focusedElement
textbox
.
inputField
"
the
search
bar
no
longer
be
focused
"
)
;
}
)
;
add_task
(
async
function
test_alt_down
(
)
{
let
promise
=
promiseEvent
(
searchPopup
"
popupshown
"
)
;
info
(
"
Opening
search
panel
"
)
;
searchbar
.
focus
(
)
;
await
promise
;
promise
=
promiseEvent
(
searchPopup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
promise
;
promise
=
promiseEvent
(
searchPopup
"
popupshown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
await
promise
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
kUserValue
"
the
textfield
value
should
be
unmodified
"
)
;
let
oneOffs
=
getOneOffs
(
)
;
for
(
let
i
=
0
;
i
<
oneOffs
.
length
;
+
+
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
is
(
textbox
.
selectedButton
oneOffs
[
i
]
"
the
one
-
off
button
#
"
+
(
i
+
1
)
+
"
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
is
(
textbox
.
selectedButton
oneOffs
[
0
]
"
the
first
one
-
off
button
should
be
selected
"
)
;
}
)
;
add_task
(
async
function
test_alt_up
(
)
{
let
promise
=
promiseEvent
(
searchPopup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
promise
;
promise
=
promiseEvent
(
searchPopup
"
popupshown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
{
altKey
:
true
}
)
;
await
promise
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
kUserValue
"
the
textfield
value
should
be
unmodified
"
)
;
let
oneOffs
=
getOneOffs
(
)
;
for
(
let
i
=
oneOffs
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
{
altKey
:
true
}
)
;
is
(
textbox
.
selectedButton
oneOffs
[
i
]
"
the
one
-
off
button
#
"
+
(
i
+
1
)
+
"
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
{
altKey
:
true
}
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
{
altKey
:
true
}
)
;
is
(
textbox
.
selectedButton
oneOffs
[
oneOffs
.
length
-
1
]
"
the
last
one
-
off
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
should
be
selected
anymore
"
)
;
}
)
;
add_task
(
async
function
test_accel_down
(
)
{
let
engines
=
await
Services
.
search
.
getVisibleEngines
(
)
;
let
current
=
Services
.
search
.
defaultEngine
;
let
currIdx
=
-
1
;
for
(
let
i
=
0
l
=
engines
.
length
;
i
<
l
;
+
+
i
)
{
if
(
engines
[
i
]
.
name
=
=
current
.
name
)
{
currIdx
=
i
;
break
;
}
}
for
(
let
i
=
0
l
=
engines
.
length
;
i
<
l
;
+
+
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
accelKey
:
true
}
)
;
await
SearchTestUtils
.
promiseSearchNotification
(
"
engine
-
default
"
"
browser
-
search
-
engine
-
modified
"
)
;
let
expected
=
engines
[
+
+
currIdx
%
engines
.
length
]
;
is
(
Services
.
search
.
defaultEngine
.
name
expected
.
name
"
Default
engine
should
have
changed
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
}
Services
.
search
.
defaultEngine
=
current
;
}
)
;
add_task
(
async
function
test_accel_up
(
)
{
let
engines
=
await
Services
.
search
.
getVisibleEngines
(
)
;
let
current
=
Services
.
search
.
defaultEngine
;
let
currIdx
=
-
1
;
for
(
let
i
=
0
l
=
engines
.
length
;
i
<
l
;
+
+
i
)
{
if
(
engines
[
i
]
.
name
=
=
current
.
name
)
{
currIdx
=
i
;
break
;
}
}
for
(
let
i
=
0
l
=
engines
.
length
;
i
<
l
;
+
+
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
{
accelKey
:
true
}
)
;
await
SearchTestUtils
.
promiseSearchNotification
(
"
engine
-
default
"
"
browser
-
search
-
engine
-
modified
"
)
;
let
expected
=
engines
[
-
-
currIdx
<
0
?
currIdx
=
engines
.
length
-
1
:
currIdx
]
;
is
(
Services
.
search
.
defaultEngine
.
name
expected
.
name
"
Default
engine
should
have
changed
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
}
Services
.
search
.
defaultEngine
=
current
;
}
)
;
add_task
(
async
function
test_tab_and_arrows
(
)
{
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
kUserValue
"
the
textfield
value
should
be
unmodified
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
is
(
searchPopup
.
selectedIndex
0
"
first
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
kValues
[
0
]
"
the
textfield
value
should
have
changed
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
let
oneOffs
=
getOneOffs
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
0
]
"
the
first
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
1
]
"
the
second
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowRight
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
2
]
"
the
third
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowLeft
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
1
]
"
the
second
one
-
off
button
should
be
selected
again
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
0
]
"
the
first
one
-
off
button
should
be
selected
again
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
is
(
searchPopup
.
selectedIndex
kValues
.
length
-
1
"
last
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
kValues
[
kValues
.
length
-
1
]
"
the
textfield
value
should
match
the
suggestion
"
)
;
is
(
textbox
.
selectedButton
null
"
no
one
-
off
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
0
]
"
the
first
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
there
should
be
no
selected
suggestion
"
)
;
let
promise
=
promiseEvent
(
searchPopup
"
popuphidden
"
)
;
searchPopup
.
hidePopup
(
)
;
await
promise
;
}
)
;
add_task
(
async
function
test_open_search
(
)
{
let
rootDir
=
getRootDirectory
(
gTestPath
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
rootDir
+
"
opensearch
.
html
"
)
;
let
promise
=
promiseEvent
(
searchPopup
"
popupshown
"
)
;
info
(
"
Opening
search
panel
"
)
;
searchbar
.
focus
(
)
;
await
promise
;
let
engines
=
getOpenSearchItems
(
)
;
is
(
engines
.
length
2
"
the
opensearch
.
html
page
exposes
2
engines
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
for
(
let
i
=
engines
.
length
;
i
;
-
-
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
let
selectedButton
=
textbox
.
selectedButton
;
is
(
selectedButton
engines
[
i
-
1
]
"
the
engine
#
"
+
i
+
"
should
be
selected
"
)
;
ok
(
selectedButton
.
classList
.
contains
(
"
addengine
-
item
"
)
"
the
button
is
themed
as
an
engine
item
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
is
(
textbox
.
selectedButton
getOneOffs
(
)
.
pop
(
)
"
the
last
one
-
off
button
should
be
selected
"
)
;
info
(
"
now
check
that
the
down
key
navigates
open
search
items
as
expected
"
)
;
for
(
let
i
=
0
;
i
<
engines
.
length
;
+
+
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
is
(
textbox
.
selectedButton
engines
[
i
]
"
the
engine
#
"
+
(
i
+
1
)
+
"
should
be
selected
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
promise
=
promiseEvent
(
searchPopup
"
popuphidden
"
)
;
searchPopup
.
hidePopup
(
)
;
await
promise
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
cleanup
(
)
{
info
(
"
removing
search
history
values
:
"
+
kValues
)
;
let
removeOps
=
kValues
.
map
(
value
=
>
{
return
{
op
:
"
remove
"
fieldname
:
"
searchbar
-
history
"
value
}
;
}
)
;
searchbar
.
FormHistory
.
update
(
removeOps
)
;
textbox
.
value
=
"
"
;
}
)
;
