"
use
strict
"
;
let
expectedEngine
=
{
name
:
"
Google
"
alias
:
null
description
:
"
Google
Search
"
searchForm
:
"
https
:
/
/
www
.
google
.
com
/
search
?
client
=
{
code
}
&
q
=
"
hidden
:
false
wrappedJSObject
:
{
queryCharset
:
"
UTF
-
8
"
_urls
:
[
{
type
:
"
text
/
html
"
method
:
"
GET
"
template
:
"
https
:
/
/
www
.
google
.
com
/
search
"
params
:
[
{
"
name
"
:
"
q
"
"
value
"
:
"
{
searchTerms
}
"
"
purpose
"
:
undefined
}
]
mozparams
:
{
}
}
{
type
:
"
application
/
x
-
suggestions
+
json
"
method
:
"
GET
"
template
:
"
https
:
/
/
www
.
google
.
com
/
complete
/
search
?
client
=
firefox
&
q
=
{
searchTerms
}
"
params
:
[
]
}
]
}
}
;
add_task
(
async
function
test
(
)
{
await
Services
.
search
.
init
(
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
Google
"
)
;
ok
(
engine
"
Found
Google
search
engine
"
)
;
let
region
=
Services
.
prefs
.
getCharPref
(
"
browser
.
search
.
region
"
)
;
let
code
=
"
"
;
switch
(
region
)
{
case
"
US
"
:
code
=
"
firefox
-
b
-
1
-
d
"
;
break
;
case
"
DE
"
:
code
=
"
firefox
-
b
-
d
"
;
break
;
case
"
RU
"
:
break
;
}
if
(
code
)
{
let
urlParams
=
expectedEngine
.
wrappedJSObject
.
_urls
[
0
]
.
params
;
urlParams
.
unshift
(
{
name
:
"
client
"
value
:
code
}
)
;
expectedEngine
.
searchForm
=
expectedEngine
.
searchForm
.
replace
(
"
{
code
}
"
code
)
;
}
let
url
;
let
purposes
=
[
"
"
"
contextmenu
"
"
searchbar
"
"
homepage
"
"
newtab
"
"
keyword
"
]
;
let
urlParams
;
for
(
let
purpose
of
purposes
)
{
url
=
engine
.
getSubmission
(
"
foo
"
null
purpose
)
.
uri
.
spec
;
urlParams
=
new
URLSearchParams
(
url
.
split
(
"
?
"
)
[
1
]
)
;
is
(
urlParams
.
get
(
"
client
"
)
code
"
Check
{
purpose
}
search
URL
for
code
"
)
;
is
(
urlParams
.
get
(
"
q
"
)
"
foo
"
Check
{
purpose
}
search
URL
for
'
foo
'
)
;
}
url
=
engine
.
getSubmission
(
"
foo
"
"
application
/
x
-
suggestions
+
json
"
)
.
uri
.
spec
;
is
(
url
"
https
:
/
/
www
.
google
.
com
/
complete
/
search
?
client
=
firefox
&
q
=
foo
"
"
Check
search
suggestion
URL
for
'
foo
'
"
)
;
let
base
=
"
https
:
/
/
www
.
google
.
com
/
search
?
q
=
foo
"
;
is
(
Services
.
search
.
parseSubmissionURL
(
base
)
.
terms
"
foo
"
"
Check
result
parsing
"
)
;
let
alternateBase
=
base
.
replace
(
"
www
.
google
.
com
"
"
www
.
google
.
fr
"
)
;
is
(
Services
.
search
.
parseSubmissionURL
(
alternateBase
)
.
terms
"
foo
"
"
Check
alternate
domain
"
)
;
isSubObjectOf
(
expectedEngine
engine
"
Google
"
)
;
}
)
;
