"
use
strict
"
;
const
TEST_ENGINE_NAME
=
"
Foo
"
;
const
TEST_ENGINE_BASENAME
=
"
testEngine
.
xml
"
;
const
SEARCHBAR_BASE_ID
=
"
searchbar
-
engine
-
one
-
off
-
item
-
"
;
const
URLBAR_BASE_ID
=
"
urlbar
-
engine
-
one
-
off
-
item
-
"
;
const
ONEOFF_URLBAR_PREF
=
"
browser
.
urlbar
.
oneOffSearches
"
;
const
urlbar
=
document
.
getElementById
(
"
urlbar
"
)
;
const
searchPopup
=
document
.
getElementById
(
"
PopupSearchAutoComplete
"
)
;
const
urlbarPopup
=
document
.
getElementById
(
"
PopupAutoCompleteRichResult
"
)
;
const
searchOneOff
=
searchPopup
.
oneOffButtons
;
const
urlBarOneOff
=
urlbarPopup
.
oneOffSearchButtons
;
var
originalEngine
;
async
function
resetEngine
(
)
{
await
Services
.
search
.
setDefault
(
originalEngine
)
;
}
registerCleanupFunction
(
resetEngine
)
;
let
searchIcon
;
add_task
(
async
function
init
(
)
{
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
let
searchbar
=
await
gCUITestUtils
.
addSearchBar
(
)
;
registerCleanupFunction
(
(
)
=
>
{
gCUITestUtils
.
removeSearchBar
(
)
;
}
)
;
searchIcon
=
searchbar
.
querySelector
(
"
.
searchbar
-
search
-
button
"
)
;
await
promiseNewEngine
(
TEST_ENGINE_BASENAME
{
setAsCurrent
:
false
}
)
;
}
)
;
add_task
(
async
function
test_searchBarChangeEngine
(
)
{
let
oneOffButton
=
await
openPopupAndGetEngineButton
(
true
searchPopup
searchOneOff
SEARCHBAR_BASE_ID
)
;
const
setDefaultEngineMenuItem
=
searchOneOff
.
querySelector
(
"
.
search
-
one
-
offs
-
context
-
set
-
default
"
)
;
let
promise
=
promisedefaultEngineChanged
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
setDefaultEngineMenuItem
{
}
)
;
await
promise
;
Assert
.
equal
(
oneOffButton
.
id
SEARCHBAR_BASE_ID
+
originalEngine
.
name
"
Should
now
have
the
original
engine
'
s
id
for
the
button
"
)
;
Assert
.
equal
(
oneOffButton
.
getAttribute
(
"
tooltiptext
"
)
originalEngine
.
name
"
Should
now
have
the
original
engine
'
s
name
for
the
tooltip
"
)
;
Assert
.
equal
(
oneOffButton
.
image
originalEngine
.
iconURI
.
spec
"
Should
now
have
the
original
engine
'
s
uri
for
the
image
"
)
;
await
promiseClosePopup
(
searchPopup
)
;
}
)
;
add_task
(
async
function
test_urlBarChangeEngine
(
)
{
Services
.
prefs
.
setBoolPref
(
ONEOFF_URLBAR_PREF
true
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
ONEOFF_URLBAR_PREF
)
;
}
)
;
resetEngine
(
)
;
let
oneOffButton
=
await
openPopupAndGetEngineButton
(
false
urlbarPopup
urlBarOneOff
URLBAR_BASE_ID
)
;
const
setDefaultEngineMenuItem
=
urlBarOneOff
.
querySelector
(
"
.
search
-
one
-
offs
-
context
-
set
-
default
"
)
;
let
promise
=
promisedefaultEngineChanged
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
setDefaultEngineMenuItem
{
}
)
;
await
promise
;
let
defaultEngine
=
await
Services
.
search
.
getDefault
(
)
;
Assert
.
equal
(
oneOffButton
.
id
URLBAR_BASE_ID
+
defaultEngine
.
name
"
Should
now
have
the
original
engine
'
s
id
for
the
button
"
)
;
Assert
.
equal
(
oneOffButton
.
getAttribute
(
"
tooltiptext
"
)
defaultEngine
.
name
"
Should
now
have
the
original
engine
'
s
name
for
the
tooltip
"
)
;
Assert
.
equal
(
oneOffButton
.
image
defaultEngine
.
iconURI
.
spec
"
Should
now
have
the
original
engine
'
s
uri
for
the
image
"
)
;
await
promiseClosePopup
(
urlbarPopup
)
;
}
)
;
function
promisedefaultEngineChanged
(
)
{
return
new
Promise
(
resolve
=
>
{
function
observer
(
aSub
aTopic
aData
)
{
if
(
aData
=
=
"
engine
-
current
"
)
{
Assert
.
equal
(
Services
.
search
.
defaultEngine
.
name
TEST_ENGINE_NAME
"
defaultEngine
set
"
)
;
Services
.
obs
.
removeObserver
(
observer
"
browser
-
search
-
engine
-
modified
"
)
;
resolve
(
)
;
}
}
Services
.
obs
.
addObserver
(
observer
"
browser
-
search
-
engine
-
modified
"
)
;
}
)
;
}
async
function
openPopupAndGetEngineButton
(
isSearch
popup
oneOffInstance
baseId
)
{
let
promise
=
promiseEvent
(
popup
"
popupshown
"
)
;
info
(
"
Opening
panel
"
)
;
if
(
isSearch
)
{
EventUtils
.
synthesizeMouseAtCenter
(
searchIcon
{
}
)
;
}
else
{
urlbar
.
focus
(
)
;
EventUtils
.
sendString
(
"
a
"
)
;
}
await
promise
;
const
contextMenu
=
oneOffInstance
.
contextMenuPopup
;
const
oneOffButtons
=
oneOffInstance
.
buttons
;
let
oneOffButton
;
for
(
let
node
of
oneOffButtons
.
children
)
{
if
(
node
.
engine
&
&
node
.
engine
.
name
=
=
TEST_ENGINE_NAME
)
{
oneOffButton
=
node
;
break
;
}
}
Assert
.
notEqual
(
oneOffButton
undefined
"
One
-
off
for
test
engine
should
exist
"
)
;
Assert
.
equal
(
oneOffButton
.
getAttribute
(
"
tooltiptext
"
)
TEST_ENGINE_NAME
"
One
-
off
should
have
the
tooltip
set
to
the
engine
name
"
)
;
Assert
.
equal
(
oneOffButton
.
id
baseId
+
TEST_ENGINE_NAME
"
Should
have
the
correct
id
"
)
;
promise
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOffButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
promise
;
return
oneOffButton
;
}
async
function
promiseClosePopup
(
popup
)
{
let
promise
=
promiseEvent
(
popup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
promise
;
await
EventUtils
.
synthesizeNativeMouseMove
(
popup
)
;
}
