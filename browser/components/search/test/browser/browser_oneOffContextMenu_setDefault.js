"
use
strict
"
;
const
{
UrlbarTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
jsm
"
)
;
const
TEST_ENGINE_NAME
=
"
Foo
"
;
const
TEST_ENGINE_BASENAME
=
"
testEngine
.
xml
"
;
const
SEARCHBAR_BASE_ID
=
"
searchbar
-
engine
-
one
-
off
-
item
-
"
;
const
URLBAR_BASE_ID
=
"
urlbar
-
engine
-
one
-
off
-
item
-
"
;
let
originalEngine
;
let
originalPrivateEngine
;
async
function
resetEngines
(
)
{
await
Services
.
search
.
setDefault
(
originalEngine
)
;
await
Services
.
search
.
setDefaultPrivate
(
originalPrivateEngine
)
;
}
registerCleanupFunction
(
resetEngines
)
;
add_task
(
async
function
init
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
true
]
[
"
browser
.
search
.
separatePrivateDefault
"
true
]
[
"
browser
.
search
.
widget
.
inNavBar
"
true
]
]
}
)
;
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
originalPrivateEngine
=
await
Services
.
search
.
getDefaultPrivate
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
resetEngines
(
)
;
}
)
;
await
promiseNewEngine
(
TEST_ENGINE_BASENAME
{
setAsCurrent
:
false
}
)
;
}
)
;
async
function
testSearchBarChangeEngine
(
win
testPrivate
isPrivateWindow
)
{
info
(
Testing
search
bar
with
testPrivate
:
{
testPrivate
}
isPrivateWindow
:
{
isPrivateWindow
}
)
;
const
searchPopup
=
win
.
document
.
getElementById
(
"
PopupSearchAutoComplete
"
)
;
const
searchOneOff
=
searchPopup
.
oneOffButtons
;
await
resetEngines
(
)
;
let
oneOffButton
=
await
openPopupAndGetEngineButton
(
true
searchPopup
searchOneOff
SEARCHBAR_BASE_ID
TEST_ENGINE_NAME
)
;
const
setDefaultEngineMenuItem
=
searchOneOff
.
querySelector
(
"
.
search
-
one
-
offs
-
context
-
set
-
default
"
+
(
testPrivate
?
"
-
private
"
:
"
"
)
)
;
let
promise
=
promiseDefaultEngineChanged
(
testPrivate
)
;
EventUtils
.
synthesizeMouseAtCenter
(
setDefaultEngineMenuItem
{
}
win
)
;
await
promise
;
if
(
testPrivate
=
=
isPrivateWindow
)
{
let
expectedName
=
originalEngine
.
name
;
let
expectedImage
=
originalEngine
.
iconURI
.
spec
;
if
(
isPrivateWindow
)
{
expectedName
=
originalPrivateEngine
.
name
;
expectedImage
=
originalPrivateEngine
.
iconURI
.
spec
;
}
Assert
.
equal
(
oneOffButton
.
id
SEARCHBAR_BASE_ID
+
expectedName
"
Should
now
have
the
original
engine
'
s
id
for
the
button
"
)
;
Assert
.
equal
(
oneOffButton
.
getAttribute
(
"
tooltiptext
"
)
expectedName
"
Should
now
have
the
original
engine
'
s
name
for
the
tooltip
"
)
;
Assert
.
equal
(
oneOffButton
.
image
expectedImage
"
Should
now
have
the
original
engine
'
s
uri
for
the
image
"
)
;
}
await
promiseClosePopup
(
searchPopup
)
;
}
add_task
(
async
function
test_searchBarChangeEngine
(
)
{
await
testSearchBarChangeEngine
(
window
false
false
)
;
await
testSearchBarChangeEngine
(
window
true
false
)
;
}
)
;
add_task
(
async
function
test_searchBarChangeEngine_privateWindow
(
)
{
const
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
testSearchBarChangeEngine
(
win
true
true
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
async
function
testUrlBarChangeEngine
(
win
testPrivate
isPrivateWindow
)
{
info
(
Testing
urlbar
with
testPrivate
:
{
testPrivate
}
isPrivateWindow
:
{
isPrivateWindow
}
)
;
await
resetEngines
(
)
;
const
urlbar
=
win
.
document
.
getElementById
(
"
urlbar
"
)
;
const
urlBarOneOff
=
UrlbarTestUtils
.
getOneOffSearchButtons
(
win
)
;
let
oneOffButton
=
await
openPopupAndGetEngineButton
(
false
null
urlBarOneOff
URLBAR_BASE_ID
TEST_ENGINE_NAME
)
;
const
setDefaultEngineMenuItem
=
urlBarOneOff
.
querySelector
(
"
.
search
-
one
-
offs
-
context
-
set
-
default
"
+
(
testPrivate
?
"
-
private
"
:
"
"
)
)
;
let
promise
=
promiseDefaultEngineChanged
(
testPrivate
)
;
EventUtils
.
synthesizeMouseAtCenter
(
setDefaultEngineMenuItem
{
}
win
)
;
await
promise
;
let
defaultEngine
=
await
Services
.
search
[
testPrivate
?
"
getDefaultPrivate
"
:
"
getDefault
"
]
(
)
;
Assert
.
equal
(
oneOffButton
.
id
URLBAR_BASE_ID
+
defaultEngine
.
name
"
Should
now
have
the
original
engine
'
s
id
for
the
button
"
)
;
Assert
.
equal
(
oneOffButton
.
getAttribute
(
"
tooltiptext
"
)
defaultEngine
.
name
"
Should
now
have
the
original
engine
'
s
name
for
the
tooltip
"
)
;
Assert
.
equal
(
oneOffButton
.
image
defaultEngine
.
iconURI
.
spec
"
Should
now
have
the
original
engine
'
s
uri
for
the
image
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
await
EventUtils
.
synthesizeNativeMouseMove
(
urlbar
)
;
}
add_task
(
async
function
test_urlBarChangeEngine_normal
(
)
{
await
testUrlBarChangeEngine
(
window
false
false
)
;
await
testUrlBarChangeEngine
(
window
true
false
)
;
}
)
;
add_task
(
async
function
test_urlBarChangeEngine_private
(
)
{
const
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
testUrlBarChangeEngine
(
win
true
true
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
async
function
testUrlbarEngineDefaultDisabled
(
isPrivate
)
{
const
originalDefault
=
await
Services
.
search
[
isPrivate
?
"
getDefaultPrivate
"
:
"
getDefault
"
]
(
)
;
const
urlBarOneOff
=
UrlbarTestUtils
.
getOneOffSearchButtons
(
window
)
;
const
oneOffButton
=
await
openPopupAndGetEngineButton
(
false
null
urlBarOneOff
URLBAR_BASE_ID
originalDefault
.
name
)
;
Assert
.
equal
(
oneOffButton
.
id
URLBAR_BASE_ID
+
originalDefault
.
name
"
Should
now
have
the
original
engine
'
s
id
for
the
button
"
)
;
const
setDefaultEngineMenuItem
=
urlBarOneOff
.
querySelector
(
"
.
search
-
one
-
offs
-
context
-
set
-
default
"
+
(
isPrivate
?
"
-
private
"
:
"
"
)
)
;
Assert
.
equal
(
setDefaultEngineMenuItem
.
disabled
true
"
Should
have
disabled
the
setting
as
default
for
the
default
engine
"
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
}
add_task
(
async
function
test_urlBarEngineDefaultDisabled_normal
(
)
{
await
testUrlbarEngineDefaultDisabled
(
false
)
;
}
)
;
add_task
(
async
function
test_urlBarEngineDefaultDisabled_private
(
)
{
await
testUrlbarEngineDefaultDisabled
(
true
)
;
}
)
;
function
promiseDefaultEngineChanged
(
testPrivate
)
{
const
expectedNotification
=
testPrivate
?
"
engine
-
default
-
private
"
:
"
engine
-
default
"
;
return
new
Promise
(
resolve
=
>
{
function
observer
(
aSub
aTopic
aData
)
{
if
(
aData
=
=
expectedNotification
)
{
Assert
.
equal
(
Services
.
search
[
testPrivate
?
"
defaultPrivateEngine
"
:
"
defaultEngine
"
]
.
name
TEST_ENGINE_NAME
"
defaultEngine
set
"
)
;
Services
.
obs
.
removeObserver
(
observer
"
browser
-
search
-
engine
-
modified
"
)
;
resolve
(
)
;
}
}
Services
.
obs
.
addObserver
(
observer
"
browser
-
search
-
engine
-
modified
"
)
;
}
)
;
}
async
function
openPopupAndGetEngineButton
(
isSearch
popup
oneOffInstance
baseId
engineName
)
{
const
win
=
oneOffInstance
.
container
.
ownerGlobal
;
if
(
isSearch
)
{
win
.
gURLBar
.
blur
(
)
;
let
shownPromise
=
promiseEvent
(
popup
"
popupshown
"
)
;
let
builtPromise
=
promiseEvent
(
oneOffInstance
"
rebuild
"
)
;
let
searchbar
=
win
.
document
.
getElementById
(
"
searchbar
"
)
;
let
searchIcon
=
searchbar
.
querySelector
(
"
.
searchbar
-
search
-
button
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
searchIcon
{
}
win
)
;
await
Promise
.
all
(
[
shownPromise
builtPromise
]
)
;
}
else
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
waitForFocus
value
:
"
a
"
}
)
;
}
const
contextMenu
=
oneOffInstance
.
contextMenuPopup
;
let
oneOffButton
=
oneOffInstance
.
buttons
;
for
(
oneOffButton
=
oneOffButton
.
firstChild
;
oneOffButton
;
oneOffButton
=
oneOffButton
.
nextSibling
)
{
if
(
oneOffButton
.
nodeType
=
=
Node
.
ELEMENT_NODE
&
&
oneOffButton
.
engine
&
&
oneOffButton
.
engine
.
name
=
=
engineName
)
{
break
;
}
}
Assert
.
notEqual
(
oneOffButton
undefined
"
One
-
off
for
test
engine
should
exist
"
)
;
Assert
.
equal
(
oneOffButton
.
getAttribute
(
"
tooltiptext
"
)
engineName
"
One
-
off
should
have
the
tooltip
set
to
the
engine
name
"
)
;
Assert
.
equal
(
oneOffButton
.
id
baseId
+
engineName
"
Should
have
the
correct
id
"
)
;
let
promise
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOffButton
{
type
:
"
contextmenu
"
button
:
2
}
win
)
;
await
promise
;
return
oneOffButton
;
}
async
function
promiseClosePopup
(
popup
)
{
let
promise
=
promiseEvent
(
popup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
{
}
popup
.
ownerGlobal
)
;
await
promise
;
await
EventUtils
.
synthesizeNativeMouseMove
(
popup
undefined
undefined
undefined
popup
.
ownerGlobal
)
;
}
