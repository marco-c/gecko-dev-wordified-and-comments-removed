"
use
strict
"
;
const
BASE_PROBE_NAME
=
"
browser
.
engagement
.
navigation
.
"
;
const
SCALAR_CONTEXT_MENU
=
BASE_PROBE_NAME
+
"
contextmenu
"
;
const
SCALAR_ABOUT_NEWTAB
=
BASE_PROBE_NAME
+
"
about_newtab
"
;
add_task
(
async
function
setup
(
)
{
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
MozSearch
"
keyword
:
"
mozalias
"
}
)
;
await
SearchTestUtils
.
installSearchExtension
(
{
name
:
"
MozSearch2
"
keyword
:
"
mozalias2
"
}
)
;
let
engineDefault
=
Services
.
search
.
getEngineByName
(
"
MozSearch
"
)
;
let
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
engineDefault
)
;
let
engineOneOff
=
Services
.
search
.
getEngineByName
(
"
MozSearch2
"
)
;
await
Services
.
search
.
moveEngine
(
engineOneOff
0
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
select_events
.
enabled
"
true
]
]
}
)
;
let
oldCanRecord
=
Services
.
telemetry
.
canRecordExtended
;
Services
.
telemetry
.
canRecordExtended
=
true
;
Services
.
telemetry
.
setEventRecordingEnabled
(
"
navigation
"
true
)
;
registerCleanupFunction
(
async
function
(
)
{
await
Services
.
search
.
setDefault
(
originalEngine
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
Services
.
telemetry
.
setEventRecordingEnabled
(
"
navigation
"
false
)
;
Services
.
telemetry
.
canRecordExtended
=
oldCanRecord
;
}
)
;
}
)
;
add_task
(
async
function
test_context_menu
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
let
search_hist
=
TelemetryTestUtils
.
getAndClearKeyedHistogram
(
"
SEARCH_COUNTS
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
data
:
text
/
plain
;
charset
=
utf8
test
%
20search
"
)
;
info
(
"
Select
all
the
text
in
the
page
.
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
"
"
]
async
function
(
)
{
return
new
Promise
(
resolve
=
>
{
content
.
document
.
addEventListener
(
"
selectionchange
"
(
)
=
>
resolve
(
)
{
once
:
true
}
)
;
content
.
document
.
getSelection
(
)
.
selectAllChildren
(
content
.
document
.
body
)
;
}
)
;
}
)
;
info
(
"
Open
the
context
menu
.
"
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
popupPromise
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
body
"
{
type
:
"
contextmenu
"
button
:
2
}
gBrowser
.
selectedBrowser
)
;
await
popupPromise
;
info
(
"
Click
on
search
.
"
)
;
let
searchItem
=
contextMenu
.
getElementsByAttribute
(
"
id
"
"
context
-
searchselect
"
)
[
0
]
;
searchItem
.
click
(
)
;
info
(
"
Validate
the
search
metrics
.
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
false
)
;
return
Object
.
keys
(
scalars
[
SCALAR_CONTEXT_MENU
]
|
|
{
}
)
.
length
=
=
1
;
}
"
This
search
must
increment
one
entry
in
the
scalar
.
"
)
;
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
false
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
SCALAR_CONTEXT_MENU
"
search
"
1
)
;
TelemetryTestUtils
.
assertKeyedHistogramSum
(
search_hist
"
other
-
MozSearch
.
contextmenu
"
1
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
object
:
"
contextmenu
"
value
:
null
extra
:
{
engine
:
"
other
-
MozSearch
"
}
}
]
{
category
:
"
navigation
"
method
:
"
search
"
}
)
;
contextMenu
.
hidePopup
(
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_about_newtab
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
let
search_hist
=
TelemetryTestUtils
.
getAndClearKeyedHistogram
(
"
SEARCH_COUNTS
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
newtab
"
false
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
function
(
)
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
!
content
.
document
.
hidden
)
;
}
)
;
info
(
"
Trigger
a
simple
serch
just
text
+
enter
.
"
)
;
let
p
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
typeInSearchField
(
tab
.
linkedBrowser
"
test
query
"
"
newtab
-
search
-
text
"
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
tab
.
linkedBrowser
)
;
await
p
;
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
false
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
SCALAR_ABOUT_NEWTAB
"
search_enter
"
1
)
;
Assert
.
equal
(
Object
.
keys
(
scalars
[
SCALAR_ABOUT_NEWTAB
]
)
.
length
1
"
This
search
must
only
increment
one
entry
in
the
scalar
.
"
)
;
TelemetryTestUtils
.
assertKeyedHistogramSum
(
search_hist
"
other
-
MozSearch
.
newtab
"
1
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
object
:
"
about_newtab
"
value
:
"
enter
"
extra
:
{
engine
:
"
other
-
MozSearch
"
}
}
]
{
category
:
"
navigation
"
method
:
"
search
"
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
