const
searchPopup
=
document
.
getElementById
(
"
PopupSearchAutoComplete
"
)
;
const
kValues
=
[
"
foo1
"
"
foo2
"
"
foo3
"
]
;
function
getOpenSearchItems
(
)
{
let
os
=
[
]
;
let
addEngineList
=
searchPopup
.
querySelector
(
"
.
search
-
add
-
engines
"
)
;
for
(
let
item
=
addEngineList
.
firstElementChild
;
item
;
item
=
item
.
nextElementSibling
)
{
os
.
push
(
item
)
;
}
return
os
;
}
let
searchbar
;
let
textbox
;
let
searchIcon
;
add_setup
(
async
function
(
)
{
searchbar
=
await
gCUITestUtils
.
addSearchBar
(
)
;
registerCleanupFunction
(
(
)
=
>
{
gCUITestUtils
.
removeSearchBar
(
)
;
}
)
;
textbox
=
searchbar
.
textbox
;
searchIcon
=
searchbar
.
querySelector
(
"
.
searchbar
-
search
-
button
"
)
;
await
SearchTestUtils
.
installOpenSearchEngine
(
{
url
:
getRootDirectory
(
gTestPath
)
+
"
testEngine
.
xml
"
setAsDefault
:
true
}
)
;
info
(
"
cleanup
the
search
history
"
)
;
await
FormHistory
.
update
(
{
op
:
"
remove
"
fieldname
:
"
searchbar
-
history
"
}
)
;
info
(
"
adding
search
history
values
:
"
+
kValues
)
;
let
addOps
=
kValues
.
map
(
value
=
>
{
return
{
op
:
"
add
"
fieldname
:
"
searchbar
-
history
"
value
}
;
}
)
;
await
FormHistory
.
update
(
addOps
)
;
registerCleanupFunction
(
async
(
)
=
>
{
gCUITestUtils
.
removeSearchBar
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_arrows
(
)
{
let
promise
=
promiseEvent
(
searchPopup
"
popupshown
"
)
;
info
(
"
Opening
search
panel
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
searchIcon
{
}
)
;
await
promise
;
info
(
"
textbox
.
mController
.
searchString
=
"
+
textbox
.
mController
.
searchString
)
;
is
(
textbox
.
mController
.
searchString
"
"
"
The
search
string
should
be
empty
"
)
;
is
(
searchPopup
.
getAttribute
(
"
showonlysettings
"
)
"
true
"
"
Should
show
the
small
popup
"
)
;
is
(
searchPopup
.
matchCount
kValues
.
length
"
There
should
be
3
suggestions
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
let
oneOffs
=
getOneOffs
(
)
;
Assert
.
greaterOrEqual
(
oneOffs
.
length
4
"
we
have
at
least
4
one
-
off
buttons
displayed
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
"
"
"
the
textfield
value
should
be
unmodified
"
)
;
for
(
let
i
=
0
;
i
<
oneOffs
.
length
;
+
+
i
)
{
is
(
textbox
.
selectedButton
oneOffs
[
i
]
"
the
one
-
off
button
#
"
+
(
i
+
1
)
+
"
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
}
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
info
(
"
now
test
the
up
arrow
key
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
for
(
let
i
=
oneOffs
.
length
;
i
;
-
-
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
i
-
1
]
"
the
one
-
off
button
#
"
+
i
+
"
should
be
selected
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
"
"
"
the
textfield
value
should
be
unmodified
"
)
;
}
)
;
add_task
(
async
function
test_tab
(
)
{
is
(
Services
.
focus
.
focusedElement
textbox
"
the
search
bar
should
be
focused
"
)
;
let
oneOffs
=
getOneOffs
(
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
for
(
let
i
=
0
;
i
<
oneOffs
.
length
;
+
+
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
i
]
"
the
one
-
off
button
#
"
+
(
i
+
1
)
+
"
should
be
selected
"
)
;
}
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
"
"
"
the
textfield
value
should
be
unmodified
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
let
promise
=
promiseEvent
(
searchPopup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
await
promise
;
isnot
(
Services
.
focus
.
focusedElement
textbox
"
the
search
bar
no
longer
be
focused
"
)
;
}
)
;
add_task
(
async
function
test_shift_tab
(
)
{
let
promise
=
promiseEvent
(
searchPopup
"
popupshown
"
)
;
info
(
"
Opening
search
panel
"
)
;
SimpleTest
.
executeSoon
(
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
searchIcon
{
}
)
;
}
)
;
await
promise
;
let
oneOffs
=
getOneOffs
(
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
getAttribute
(
"
showonlysettings
"
)
"
true
"
"
Should
show
the
small
popup
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
for
(
let
i
=
oneOffs
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
is
(
textbox
.
selectedButton
oneOffs
[
i
]
"
the
one
-
off
button
#
"
+
(
i
+
1
)
+
"
should
be
selected
"
)
;
if
(
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
shiftKey
:
true
}
)
;
}
}
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
"
"
"
the
textfield
value
should
be
unmodified
"
)
;
promise
=
promiseEvent
(
searchPopup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
shiftKey
:
true
}
)
;
await
promise
;
isnot
(
Services
.
focus
.
focusedElement
textbox
"
the
search
bar
no
longer
be
focused
"
)
;
}
)
;
add_task
(
async
function
test_alt_down
(
)
{
let
promise
=
promiseEvent
(
searchPopup
"
popupshown
"
)
;
info
(
"
Opening
search
panel
"
)
;
SimpleTest
.
executeSoon
(
(
)
=
>
{
EventUtils
.
synthesizeMouseAtCenter
(
searchIcon
{
}
)
;
}
)
;
await
promise
;
is
(
searchPopup
.
getAttribute
(
"
showonlysettings
"
)
"
true
"
"
Should
show
the
small
popup
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
"
"
"
the
textfield
value
should
be
unmodified
"
)
;
let
oneOffs
=
getOneOffs
(
)
;
for
(
let
i
=
0
;
i
<
oneOffs
.
length
;
+
+
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
is
(
textbox
.
selectedButton
oneOffs
[
i
]
"
the
one
-
off
button
#
"
+
(
i
+
1
)
+
"
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
is
(
textbox
.
selectedButton
oneOffs
[
0
]
"
the
first
one
-
off
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
{
altKey
:
true
}
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
}
)
;
add_task
(
async
function
test_alt_up
(
)
{
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
"
"
"
the
textfield
value
should
be
unmodified
"
)
;
let
oneOffs
=
getOneOffs
(
)
;
for
(
let
i
=
oneOffs
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
{
altKey
:
true
}
)
;
is
(
textbox
.
selectedButton
oneOffs
[
i
]
"
the
one
-
off
button
#
"
+
(
i
+
1
)
+
"
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
{
altKey
:
true
}
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
{
altKey
:
true
}
)
;
is
(
textbox
.
selectedButton
oneOffs
[
oneOffs
.
length
-
1
]
"
the
last
one
-
off
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
should
be
selected
anymore
"
)
;
}
)
;
add_task
(
async
function
test_tab_and_arrows
(
)
{
ok
(
!
textbox
.
selectedButton
"
no
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
is
(
textbox
.
value
"
"
"
the
textfield
value
should
be
unmodified
"
)
;
let
oneOffs
=
getOneOffs
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
0
]
"
the
first
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
1
]
"
the
second
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
is
(
textbox
.
selectedButton
oneOffs
[
0
]
"
the
first
one
-
off
button
should
be
selected
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
let
promise
=
promiseEvent
(
searchPopup
"
popuphidden
"
)
;
searchPopup
.
hidePopup
(
)
;
await
promise
;
}
)
;
add_task
(
async
function
test_open_search
(
)
{
let
rootDir
=
getRootDirectory
(
gTestPath
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
rootDir
+
"
opensearch
.
html
"
)
;
let
promise
=
promiseEvent
(
searchPopup
"
popupshown
"
)
;
info
(
"
Opening
search
panel
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
searchIcon
{
}
)
;
await
promise
;
is
(
searchPopup
.
getAttribute
(
"
showonlysettings
"
)
"
true
"
"
Should
show
the
small
popup
"
)
;
let
engines
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
engines
=
searchPopup
.
querySelectorAll
(
"
.
searchbar
-
engine
-
one
-
off
-
add
-
engine
"
)
;
return
engines
.
length
=
=
3
;
}
"
Should
expose
three
engines
"
)
;
is
(
searchPopup
.
selectedIndex
-
1
"
no
suggestion
should
be
selected
"
)
;
ok
(
!
textbox
.
selectedButton
"
no
button
should
be
selected
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
for
(
let
i
=
engines
.
length
;
i
;
-
-
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
let
selectedButton
=
textbox
.
selectedButton
;
is
(
selectedButton
engines
[
i
-
1
]
"
the
engine
#
"
+
i
+
"
should
be
selected
"
)
;
ok
(
selectedButton
.
classList
.
contains
(
"
searchbar
-
engine
-
one
-
off
-
add
-
engine
"
)
"
the
button
is
themed
as
an
add
engine
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
const
allOneOffs
=
getOneOffs
(
)
;
is
(
textbox
.
selectedButton
allOneOffs
[
allOneOffs
.
length
-
engines
.
length
-
1
]
"
the
last
one
-
off
button
should
be
selected
"
)
;
info
(
"
now
check
that
the
down
key
navigates
open
search
items
as
expected
"
)
;
for
(
let
i
=
0
;
i
<
engines
.
length
;
+
+
i
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
is
(
textbox
.
selectedButton
engines
[
i
]
"
the
engine
#
"
+
(
i
+
1
)
+
"
should
be
selected
"
)
;
}
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
ok
(
textbox
.
selectedButton
.
classList
.
contains
(
"
search
-
setting
-
button
"
)
"
the
settings
item
should
be
selected
"
)
;
promise
=
promiseEvent
(
searchPopup
"
popuphidden
"
)
;
searchPopup
.
hidePopup
(
)
;
await
promise
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
cleanup
(
)
{
info
(
"
removing
search
history
values
:
"
+
kValues
)
;
let
removeOps
=
kValues
.
map
(
value
=
>
{
return
{
op
:
"
remove
"
fieldname
:
"
searchbar
-
history
"
value
}
;
}
)
;
FormHistory
.
update
(
removeOps
)
;
}
)
;
