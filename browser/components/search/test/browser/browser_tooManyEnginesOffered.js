"
use
strict
"
;
const
searchPopup
=
document
.
getElementById
(
"
PopupSearchAutoComplete
"
)
;
add_task
(
async
function
test_setup
(
)
{
await
gCUITestUtils
.
addSearchBar
(
)
;
await
Services
.
search
.
init
(
)
;
registerCleanupFunction
(
(
)
=
>
{
gCUITestUtils
.
removeSearchBar
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test
(
)
{
let
searchbar
=
BrowserSearch
.
searchBar
;
let
rootDir
=
getRootDirectory
(
gTestPath
)
;
let
url
=
rootDir
+
"
tooManyEnginesOffered
.
html
"
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
let
promise
=
promiseEvent
(
searchPopup
"
popupshown
"
)
;
info
(
"
Opening
search
panel
"
)
;
searchbar
.
focus
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
BrowserSearch
.
searchBar
.
textbox
.
controller
.
input
"
Wait
for
the
searchbar
controller
to
connect
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
await
promise
;
let
items
=
getOpenSearchItems
(
)
;
Assert
.
equal
(
items
.
length
1
"
A
single
button
"
)
;
let
menuButton
=
items
[
0
]
;
Assert
.
equal
(
menuButton
.
type
"
menu
"
"
A
menu
button
"
)
;
await
document
.
l10n
.
translateElements
(
[
menuButton
]
)
;
Assert
.
equal
(
menuButton
.
label
"
Add
search
engine
"
)
;
let
buttonPopup
=
menuButton
.
menupopup
;
promise
=
promiseEvent
(
buttonPopup
"
popupshown
"
)
;
EventUtils
.
synthesizeMouse
(
menuButton
5
5
{
type
:
"
mousemove
"
}
)
;
await
promise
;
Assert
.
ok
(
menuButton
.
open
"
Submenu
should
be
open
"
)
;
Assert
.
equal
(
buttonPopup
.
children
.
length
6
"
Expected
number
of
engines
"
)
;
for
(
let
i
=
0
;
i
<
buttonPopup
.
children
.
length
;
i
+
+
)
{
let
item
=
buttonPopup
.
children
[
i
]
;
Assert
.
equal
(
item
.
getAttribute
(
"
engine
-
name
"
)
"
engine
"
+
(
i
+
1
)
"
Expected
engine
title
"
)
;
}
promise
=
promiseEvent
(
buttonPopup
"
popuphidden
"
)
;
EventUtils
.
synthesizeMouse
(
searchbar
5
5
{
type
:
"
mousemove
"
}
)
;
await
promise
;
Assert
.
ok
(
!
menuButton
.
open
"
Submenu
should
be
closed
"
)
;
for
(
let
button
=
null
;
button
!
=
menuButton
;
button
=
searchbar
.
textbox
.
popup
.
oneOffButtons
.
selectedButton
)
{
EventUtils
.
synthesizeKey
(
"
KEY_ArrowUp
"
)
;
}
promise
=
promiseEvent
(
buttonPopup
"
popupshown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowRight
"
)
;
await
promise
;
Assert
.
ok
(
menuButton
.
open
"
Submenu
should
be
open
"
)
;
promise
=
promiseEvent
(
buttonPopup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
promise
;
Assert
.
ok
(
!
menuButton
.
open
"
Submenu
should
be
closed
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
function
getOpenSearchItems
(
)
{
let
os
=
[
]
;
let
addEngineList
=
searchPopup
.
oneOffButtons
.
addEngines
;
for
(
let
item
=
addEngineList
.
firstElementChild
;
item
;
item
=
item
.
nextElementSibling
)
{
os
.
push
(
item
)
;
}
return
os
;
}
