const
LOCALE_LTR
=
"
ltr
"
;
const
LOCALE_RTL
=
"
rtl
"
;
async
function
customDragAndDrop
(
src
dest
dragCond
=
null
dropCond
=
null
dragEvent
=
{
}
)
{
EventUtils
.
startDragSession
(
window
"
move
"
)
;
info
(
"
Start
drag
"
)
;
let
[
result
dataTransfer
]
=
EventUtils
.
synthesizeDragOver
(
src
BrowserTestUtils
.
isHidden
(
dest
)
&
&
dragEvent
?
.
clientX
&
&
dragEvent
?
.
clientY
?
src
:
dest
null
"
move
"
window
window
dragEvent
)
;
await
dragCond
;
info
(
"
Start
drop
"
)
;
EventUtils
.
synthesizeDropAfterDragOver
(
result
dataTransfer
dest
)
;
let
srcWindowUtils
=
EventUtils
.
_getDOMWindowUtils
(
window
)
;
const
srcDragSession
=
srcWindowUtils
.
dragSession
;
srcDragSession
.
endDragSession
(
true
EventUtils
.
_parseModifiers
(
dragEvent
)
)
;
await
dropCond
;
Assert
.
ok
(
!
gBrowser
.
tabContainer
.
hasAttribute
(
"
movingtab
"
)
"
tab
strip
state
is
no
longer
in
drag
-
drop
mode
"
)
;
}
async
function
addTab
(
url
params
=
{
}
)
{
params
.
skipAnimation
=
true
;
const
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
url
params
)
;
const
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
return
tab
;
}
async
function
runAndCleanup
(
localeDirection
testFn
)
{
if
(
gBrowser
.
tabs
.
length
>
1
)
{
throw
new
Error
(
Expected
window
to
start
with
1
tab
but
it
had
{
gBrowser
.
tabs
.
length
}
tabs
instead
)
;
}
if
(
localeDirection
!
=
LOCALE_LTR
&
&
localeDirection
!
=
LOCALE_RTL
)
{
throw
new
Error
(
Locale
dir
must
be
either
'
{
LOCALE_LTR
}
'
or
'
{
LOCALE_RTL
}
'
)
;
}
if
(
localeDirection
=
=
=
LOCALE_RTL
)
{
await
BrowserTestUtils
.
enableRtlLocale
(
)
;
}
try
{
await
testFn
(
)
;
}
finally
{
if
(
localeDirection
=
=
=
LOCALE_RTL
)
{
await
BrowserTestUtils
.
disableRtlLocale
(
)
;
}
}
}
const
bounds
=
el
=
>
window
.
windowUtils
.
getBoundsWithoutFlushing
(
el
)
;
function
raceTimeout
(
operation
timeLimit
message
)
{
return
Promise
.
race
(
[
operation
new
Promise
(
(
_
reject
)
=
>
{
window
.
setTimeout
(
(
)
=
>
{
reject
(
message
)
;
}
timeLimit
)
;
}
)
]
)
;
}
function
waitForTabMove
(
tab
)
{
return
raceTimeout
(
BrowserTestUtils
.
waitForEvent
(
tab
"
TabMove
"
)
1000
"
Tab
did
not
change
position
after
a
drop
"
)
;
}
