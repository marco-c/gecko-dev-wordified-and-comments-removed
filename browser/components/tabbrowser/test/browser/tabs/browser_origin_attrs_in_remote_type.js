"
use
strict
"
;
loadTestSubscript
(
"
helper_origin_attrs_testing
.
js
"
)
;
const
PATH
=
"
browser
/
browser
/
components
/
tabbrowser
/
test
/
browser
/
tabs
/
blank
.
html
"
;
var
TEST_CASES
=
[
{
uri
:
"
https
:
/
/
example
.
com
/
"
+
PATH
}
{
uri
:
"
https
:
/
/
example
.
org
/
"
+
PATH
}
{
uri
:
"
about
:
preferences
"
}
{
uri
:
"
about
:
config
"
}
]
;
const
NUM_PAGES_OPEN_FOR_EACH_TEST_CASE
=
5
;
var
remoteTypes
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
test
.
wait300msAfterTabSwitch
"
true
]
[
"
privacy
.
userContext
.
enabled
"
true
]
[
"
browser
.
newtab
.
preload
"
false
]
]
}
)
;
requestLongerTimeout
(
5
)
;
let
dir
=
getChromeDir
(
getResolvedURI
(
gTestPath
)
)
;
dir
.
append
(
"
blank
.
html
"
)
;
dir
.
normalize
(
)
;
const
uriString
=
Services
.
io
.
newFileURI
(
dir
)
.
spec
;
TEST_CASES
.
push
(
{
uri
:
uriString
}
)
;
}
)
;
function
setupRemoteTypes
(
)
{
remoteTypes
=
getExpectedRemoteTypes
(
gFissionBrowser
NUM_PAGES_OPEN_FOR_EACH_TEST_CASE
)
;
remoteTypes
=
remoteTypes
.
concat
(
Array
(
NUM_PAGES_OPEN_FOR_EACH_TEST_CASE
)
.
fill
(
"
file
"
)
)
;
}
add_task
(
async
function
test_user_identity_simple
(
)
{
setupRemoteTypes
(
)
;
var
currentRemoteType
;
for
(
let
testData
of
TEST_CASES
)
{
info
(
Will
open
{
testData
.
uri
}
in
different
tabs
)
;
info
(
About
to
open
a
regular
page
)
;
currentRemoteType
=
remoteTypes
.
shift
(
)
;
let
page_regular
=
await
openURIInRegularTab
(
testData
.
uri
window
)
;
is
(
page_regular
.
tab
.
linkedBrowser
.
remoteType
currentRemoteType
"
correct
remote
type
"
)
;
info
(
About
to
open
container
pages
)
;
let
containerPages
=
[
]
;
for
(
var
user_context_id
=
1
;
user_context_id
<
=
NUM_USER_CONTEXTS
;
user_context_id
+
+
)
{
currentRemoteType
=
remoteTypes
.
shift
(
)
;
let
containerPage
=
await
openURIInContainer
(
testData
.
uri
window
user_context_id
)
;
is
(
containerPage
.
tab
.
linkedBrowser
.
remoteType
currentRemoteType
"
correct
remote
type
"
)
;
containerPages
.
push
(
containerPage
)
;
}
currentRemoteType
=
remoteTypes
.
shift
(
)
;
let
page_private
=
await
openURIInPrivateTab
(
testData
.
uri
)
;
let
privateRemoteType
=
page_private
.
tab
.
linkedBrowser
.
remoteType
;
is
(
privateRemoteType
currentRemoteType
"
correct
remote
type
"
)
;
containerPages
.
forEach
(
page
=
>
{
BrowserTestUtils
.
removeTab
(
page
.
tab
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
page_regular
.
tab
)
;
BrowserTestUtils
.
removeTab
(
page_private
.
tab
)
;
}
}
)
;
