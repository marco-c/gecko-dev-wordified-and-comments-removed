"
use
strict
"
;
const
{
TabStateFlusher
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
sessionstore
/
TabStateFlusher
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_discarded_tab_swapBrowsersAndCloseOther
(
)
{
info
(
"
Testing
discarded
attribute
preservation
in
swapBrowsersAndCloseOther
"
)
;
let
discardedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
discardedTab
.
linkedBrowser
)
;
await
gBrowser
.
prepareDiscardBrowser
(
discardedTab
)
;
gBrowser
.
discardBrowser
(
discardedTab
true
)
;
ok
(
discardedTab
.
hasAttribute
(
"
discarded
"
)
"
Tab
should
have
discarded
attribute
"
)
;
let
newTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
attrChangePromise
=
BrowserTestUtils
.
waitForEvent
(
newTab
"
TabAttrModified
"
false
event
=
>
{
return
event
.
detail
.
changed
.
includes
(
"
discarded
"
)
;
}
)
;
let
swapSuccess
=
gBrowser
.
swapBrowsersAndCloseOther
(
newTab
discardedTab
)
;
ok
(
swapSuccess
"
swapBrowsersAndCloseOther
should
succeed
"
)
;
await
attrChangePromise
;
ok
(
newTab
.
hasAttribute
(
"
discarded
"
)
"
New
tab
should
have
the
discarded
attribute
after
swap
"
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
}
)
;
add_task
(
async
function
test_discarded_tab_adoptTab
(
)
{
info
(
"
Testing
discarded
attribute
preservation
in
adoptTab
"
)
;
let
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
discardedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
https
:
/
/
example
.
com
/
test
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
discardedTab
.
linkedBrowser
)
;
await
gBrowser
.
prepareDiscardBrowser
(
discardedTab
)
;
gBrowser
.
discardBrowser
(
discardedTab
true
)
;
ok
(
discardedTab
.
hasAttribute
(
"
discarded
"
)
"
Tab
should
have
discarded
attribute
"
)
;
let
adoptedTab
=
newWin
.
gBrowser
.
adoptTab
(
discardedTab
)
;
ok
(
adoptedTab
"
adoptTab
should
succeed
"
)
;
ok
(
adoptedTab
.
hasAttribute
(
"
discarded
"
)
"
Adopted
tab
should
preserve
the
discarded
attribute
"
)
;
ok
(
discardedTab
.
closing
|
|
!
discardedTab
.
parentNode
"
Original
tab
should
be
closed
or
removed
"
)
;
await
BrowserTestUtils
.
closeWindow
(
newWin
)
;
}
)
;
add_task
(
async
function
test_discarded_with_other_attributes
(
)
{
info
(
"
Testing
discarded
attribute
with
other
attributes
during
swap
"
)
;
let
multiAttrTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
multiAttrTab
.
linkedBrowser
)
;
await
gBrowser
.
prepareDiscardBrowser
(
multiAttrTab
)
;
gBrowser
.
discardBrowser
(
multiAttrTab
true
)
;
multiAttrTab
.
setAttribute
(
"
soundplaying
"
"
true
"
)
;
ok
(
multiAttrTab
.
hasAttribute
(
"
discarded
"
)
"
Tab
should
be
discarded
"
)
;
let
targetTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
swapSuccess
=
gBrowser
.
swapBrowsersAndCloseOther
(
targetTab
multiAttrTab
)
;
ok
(
swapSuccess
"
Swap
should
succeed
"
)
;
ok
(
targetTab
.
hasAttribute
(
"
discarded
"
)
"
Target
tab
should
have
discarded
attribute
"
)
;
ok
(
targetTab
.
hasAttribute
(
"
soundplaying
"
)
"
Target
tab
should
have
soundplaying
attribute
"
)
;
BrowserTestUtils
.
removeTab
(
targetTab
)
;
}
)
;
