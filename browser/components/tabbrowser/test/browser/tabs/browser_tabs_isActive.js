const
kTestPage
=
"
https
:
/
/
example
.
org
/
browser
/
browser
/
components
/
tabbrowser
/
test
/
browser
/
tabs
/
dummy_page
.
html
"
;
function
promiseNewTabSwitched
(
)
{
return
new
Promise
(
resolve
=
>
{
gBrowser
.
addEventListener
(
"
TabSwitchDone
"
function
(
)
{
executeSoon
(
resolve
)
;
}
{
once
:
true
}
)
;
}
)
;
}
function
getParentTabState
(
aTab
)
{
return
aTab
.
linkedBrowser
.
docShellIsActive
;
}
function
getChildTabState
(
aTab
)
{
return
ContentTask
.
spawn
(
aTab
.
linkedBrowser
null
(
)
=
>
content
.
browsingContext
.
isActive
)
;
}
function
checkState
(
parentSide
childSide
value
message
)
{
is
(
parentSide
value
message
+
"
(
parent
side
)
"
)
;
is
(
childSide
value
message
+
"
(
child
side
)
"
)
;
}
function
waitForMs
(
aMs
)
{
return
new
Promise
(
resolve
=
>
{
setTimeout
(
done
aMs
)
;
function
done
(
)
{
resolve
(
true
)
;
}
}
)
;
}
add_task
(
async
function
(
)
{
let
url
=
kTestPage
;
let
originalTab
=
gBrowser
.
selectedTab
;
let
newTab
=
BrowserTestUtils
.
addTab
(
gBrowser
url
{
skipAnimation
:
true
}
)
;
let
parentSide
childSide
;
parentSide
=
getParentTabState
(
newTab
)
;
childSide
=
await
getChildTabState
(
newTab
)
;
checkState
(
parentSide
childSide
false
"
newly
added
"
+
url
+
"
tab
is
not
active
"
)
;
parentSide
=
getParentTabState
(
originalTab
)
;
childSide
=
await
getChildTabState
(
originalTab
)
;
checkState
(
parentSide
childSide
true
"
original
tab
is
active
initially
"
)
;
let
tabSwitchedPromise
=
promiseNewTabSwitched
(
)
;
gBrowser
.
selectedTab
=
newTab
;
await
tabSwitchedPromise
;
if
(
Services
.
appinfo
.
browserTabsRemoteAutostart
)
{
ok
(
newTab
.
linkedBrowser
.
isRemoteBrowser
"
for
testing
we
need
a
remote
tab
"
)
;
}
parentSide
=
getParentTabState
(
newTab
)
;
childSide
=
await
getChildTabState
(
newTab
)
;
checkState
(
parentSide
childSide
true
"
newly
added
"
+
url
+
"
tab
is
active
after
selection
"
)
;
parentSide
=
getParentTabState
(
originalTab
)
;
childSide
=
await
getChildTabState
(
originalTab
)
;
checkState
(
parentSide
childSide
false
"
original
tab
is
not
active
while
unselected
"
)
;
tabSwitchedPromise
=
promiseNewTabSwitched
(
)
;
gBrowser
.
selectedTab
=
originalTab
;
await
tabSwitchedPromise
;
parentSide
=
getParentTabState
(
newTab
)
;
childSide
=
await
getChildTabState
(
newTab
)
;
checkState
(
parentSide
childSide
false
"
newly
added
"
+
url
+
"
tab
is
not
active
after
switch
back
"
)
;
parentSide
=
getParentTabState
(
originalTab
)
;
childSide
=
await
getChildTabState
(
originalTab
)
;
checkState
(
parentSide
childSide
true
"
original
tab
is
active
again
after
switch
back
"
)
;
tabSwitchedPromise
=
promiseNewTabSwitched
(
)
;
gBrowser
.
selectedTab
=
newTab
;
await
tabSwitchedPromise
;
parentSide
=
getParentTabState
(
newTab
)
;
childSide
=
await
getChildTabState
(
newTab
)
;
checkState
(
parentSide
childSide
true
"
newly
added
"
+
url
+
"
tab
is
not
active
after
switch
back
"
)
;
parentSide
=
getParentTabState
(
originalTab
)
;
childSide
=
await
getChildTabState
(
originalTab
)
;
checkState
(
parentSide
childSide
false
"
original
tab
is
active
again
after
switch
back
"
)
;
gBrowser
.
removeTab
(
newTab
)
;
}
)
;
add_task
(
async
function
(
)
{
let
url
=
"
about
:
about
"
;
let
originalTab
=
gBrowser
.
selectedTab
;
let
newTab
=
BrowserTestUtils
.
addTab
(
gBrowser
url
{
skipAnimation
:
true
}
)
;
let
parentSide
childSide
;
parentSide
=
getParentTabState
(
newTab
)
;
childSide
=
await
getChildTabState
(
newTab
)
;
checkState
(
parentSide
childSide
false
"
newly
added
"
+
url
+
"
tab
is
not
active
"
)
;
parentSide
=
getParentTabState
(
originalTab
)
;
childSide
=
await
getChildTabState
(
originalTab
)
;
checkState
(
parentSide
childSide
true
"
original
tab
is
active
initially
"
)
;
let
tabSwitchedPromise
=
promiseNewTabSwitched
(
)
;
gBrowser
.
selectedTab
=
newTab
;
await
tabSwitchedPromise
;
if
(
Services
.
appinfo
.
browserTabsRemoteAutostart
)
{
ok
(
!
newTab
.
linkedBrowser
.
isRemoteBrowser
"
for
testing
we
need
a
local
tab
"
)
;
}
parentSide
=
getParentTabState
(
newTab
)
;
childSide
=
await
getChildTabState
(
newTab
)
;
checkState
(
parentSide
childSide
true
"
newly
added
"
+
url
+
"
tab
is
active
after
selection
"
)
;
parentSide
=
getParentTabState
(
originalTab
)
;
childSide
=
await
getChildTabState
(
originalTab
)
;
checkState
(
parentSide
childSide
false
"
original
tab
is
not
active
while
unselected
"
)
;
tabSwitchedPromise
=
promiseNewTabSwitched
(
)
;
gBrowser
.
selectedTab
=
originalTab
;
await
tabSwitchedPromise
;
parentSide
=
getParentTabState
(
newTab
)
;
childSide
=
await
getChildTabState
(
newTab
)
;
checkState
(
parentSide
childSide
false
"
newly
added
"
+
url
+
"
tab
is
not
active
after
switch
back
"
)
;
parentSide
=
getParentTabState
(
originalTab
)
;
childSide
=
await
getChildTabState
(
originalTab
)
;
checkState
(
parentSide
childSide
true
"
original
tab
is
active
again
after
switch
back
"
)
;
tabSwitchedPromise
=
promiseNewTabSwitched
(
)
;
gBrowser
.
selectedTab
=
newTab
;
await
tabSwitchedPromise
;
parentSide
=
getParentTabState
(
newTab
)
;
childSide
=
await
getChildTabState
(
newTab
)
;
checkState
(
parentSide
childSide
true
"
newly
added
"
+
url
+
"
tab
is
not
active
after
switch
back
"
)
;
parentSide
=
getParentTabState
(
originalTab
)
;
childSide
=
await
getChildTabState
(
originalTab
)
;
checkState
(
parentSide
childSide
false
"
original
tab
is
active
again
after
switch
back
"
)
;
gBrowser
.
removeTab
(
newTab
)
;
}
)
;
