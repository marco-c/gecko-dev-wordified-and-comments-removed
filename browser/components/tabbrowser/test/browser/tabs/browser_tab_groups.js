add_task
(
async
function
test_tabGroupCreateAndAddTab
(
)
{
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
)
;
Assert
.
ok
(
group
.
id
"
group
has
id
"
)
;
let
tab1
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
group
.
addTabs
(
[
tab1
]
)
;
Assert
.
ok
(
group
.
tabs
.
includes
(
tab1
)
"
tab1
is
in
group
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
group
.
remove
(
)
;
}
)
;
add_task
(
async
function
test_tabGroupCreateWithTabs
(
)
{
let
tab1
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
[
tab1
tab2
]
)
;
Assert
.
equal
(
group
.
tabs
.
length
2
"
group
has
2
tabs
"
)
;
Assert
.
ok
(
group
.
tabs
.
includes
(
tab1
)
"
tab1
is
in
group
"
)
;
Assert
.
ok
(
group
.
tabs
.
includes
(
tab2
)
"
tab2
is
in
group
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
group
.
remove
(
)
;
}
)
;
add_task
(
async
function
test_tabGroupCollapseAndExpand
(
)
{
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
)
;
let
tab1
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
group
.
addTabs
(
[
tab1
]
)
;
Assert
.
ok
(
!
group
.
collapsed
"
group
is
expanded
by
default
"
)
;
group
.
querySelector
(
"
.
tab
-
group
-
label
"
)
.
click
(
)
;
Assert
.
ok
(
group
.
collapsed
"
group
is
collapsed
on
click
"
)
;
group
.
querySelector
(
"
.
tab
-
group
-
label
"
)
.
click
(
)
;
Assert
.
ok
(
!
group
.
collapsed
"
collapsed
group
is
expanded
on
click
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
group
.
remove
(
)
;
}
)
;
add_task
(
async
function
test_tabGroupCollapsedTabsNotVisible
(
)
{
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
)
;
let
tab1
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
group
.
addTabs
(
[
tab1
]
)
;
Assert
.
ok
(
!
group
.
collapsed
"
group
is
expanded
by
default
"
)
;
Assert
.
ok
(
gBrowser
.
visibleTabs
.
includes
(
tab1
)
"
tab
in
expanded
tab
group
is
visible
"
)
;
group
.
collapsed
=
true
;
Assert
.
ok
(
!
gBrowser
.
visibleTabs
.
includes
(
tab1
)
"
tab
in
collapsed
tab
group
is
not
visible
"
)
;
group
.
collapsed
=
false
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
group
.
remove
(
)
;
}
)
;
add_task
(
async
function
test_tabGroupCollapseSelectsAdjacentTabAfter
(
)
{
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
)
;
let
tabInGroup
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
group
.
addTabs
(
[
tabInGroup
]
)
;
let
adjacentTabAfter
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
gBrowser
.
selectedTab
=
tabInGroup
;
group
.
collapsed
=
true
;
Assert
.
equal
(
gBrowser
.
selectedTab
adjacentTabAfter
"
selected
tab
becomes
adjacent
tab
after
group
on
collapse
"
)
;
group
.
collapsed
=
false
;
BrowserTestUtils
.
removeTab
(
tabInGroup
)
;
BrowserTestUtils
.
removeTab
(
adjacentTabAfter
)
;
group
.
remove
(
)
;
}
)
;
add_task
(
async
function
test_tabGroupCollapseSelectsAdjacentTabBefore
(
)
{
let
adjacentTabBefore
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
)
;
let
tabInGroup
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
group
.
addTabs
(
[
tabInGroup
]
)
;
gBrowser
.
selectedTab
=
tabInGroup
;
group
.
collapsed
=
true
;
Assert
.
equal
(
gBrowser
.
selectedTab
adjacentTabBefore
"
selected
tab
becomes
adjacent
tab
after
group
on
collapse
"
)
;
group
.
collapsed
=
false
;
BrowserTestUtils
.
removeTab
(
tabInGroup
)
;
BrowserTestUtils
.
removeTab
(
adjacentTabBefore
)
;
group
.
remove
(
)
;
}
)
;
add_task
(
async
function
test_tabGroupCollapseCreatesNewTabIfAllTabsInGroup
(
)
{
let
fgWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
group
=
fgWindow
.
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
)
;
group
.
addTabs
(
fgWindow
.
gBrowser
.
tabs
)
;
Assert
.
equal
(
fgWindow
.
gBrowser
.
tabs
.
length
1
"
only
one
tab
exists
"
)
;
Assert
.
equal
(
fgWindow
.
gBrowser
.
tabs
[
0
]
.
group
group
"
sole
existing
tab
is
in
group
"
)
;
group
.
collapsed
=
true
;
Assert
.
equal
(
fgWindow
.
gBrowser
.
tabs
.
length
2
"
new
tab
is
created
if
group
is
collapsed
and
all
tabs
are
in
group
"
)
;
Assert
.
equal
(
fgWindow
.
gBrowser
.
selectedTab
fgWindow
.
gBrowser
.
tabs
[
1
]
"
new
tab
becomes
selected
tab
"
)
;
Assert
.
equal
(
fgWindow
.
gBrowser
.
selectedTab
.
group
null
"
new
tab
is
not
in
group
"
)
;
group
.
collapsed
=
false
;
BrowserTestUtils
.
removeTab
(
fgWindow
.
gBrowser
.
tabs
[
1
]
)
;
group
.
remove
(
)
;
await
BrowserTestUtils
.
closeWindow
(
fgWindow
)
;
}
)
;
