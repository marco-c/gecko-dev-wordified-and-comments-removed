add_task
(
async
function
test_tabGroupCreate
(
)
{
let
tab1
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
[
tab1
tab2
]
)
;
Assert
.
equal
(
group
.
tabs
.
length
2
"
group
has
2
tabs
"
)
;
Assert
.
ok
(
group
.
tabs
.
includes
(
tab1
)
"
tab1
is
in
group
"
)
;
Assert
.
ok
(
group
.
tabs
.
includes
(
tab2
)
"
tab2
is
in
group
"
)
;
gBrowser
.
removeTabGroup
(
group
)
;
}
)
;
add_task
(
async
function
test_getTabGroups
(
)
{
let
tab1
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
group1
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test1
"
[
tab1
]
)
;
Assert
.
equal
(
gBrowser
.
tabGroups
.
length
1
"
there
is
one
group
in
the
tabstrip
"
)
;
let
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
group2
=
gBrowser
.
addTabGroup
(
"
red
"
"
test2
"
[
tab2
]
)
;
Assert
.
equal
(
gBrowser
.
tabGroups
.
length
2
"
there
are
two
groups
in
the
tabstrip
"
)
;
gBrowser
.
removeTabGroup
(
group1
)
;
gBrowser
.
removeTabGroup
(
group2
)
;
Assert
.
equal
(
gBrowser
.
tabGroups
.
length
0
"
there
are
no
groups
in
the
tabstrip
"
)
;
}
)
;
add_task
(
async
function
test_tabGroupCollapseAndExpand
(
)
{
let
tab1
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
[
tab1
]
)
;
Assert
.
ok
(
!
group
.
collapsed
"
group
is
expanded
by
default
"
)
;
group
.
querySelector
(
"
.
tab
-
group
-
label
"
)
.
click
(
)
;
Assert
.
ok
(
group
.
collapsed
"
group
is
collapsed
on
click
"
)
;
group
.
querySelector
(
"
.
tab
-
group
-
label
"
)
.
click
(
)
;
Assert
.
ok
(
!
group
.
collapsed
"
collapsed
group
is
expanded
on
click
"
)
;
gBrowser
.
removeTabGroup
(
group
)
;
}
)
;
add_task
(
async
function
test_tabGroupCollapsedTabsNotVisible
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
[
tab
]
)
;
Assert
.
ok
(
!
group
.
collapsed
"
group
is
expanded
by
default
"
)
;
Assert
.
ok
(
gBrowser
.
visibleTabs
.
includes
(
tab
)
"
tab
in
expanded
tab
group
is
visible
"
)
;
group
.
collapsed
=
true
;
Assert
.
ok
(
!
gBrowser
.
visibleTabs
.
includes
(
tab
)
"
tab
in
collapsed
tab
group
is
not
visible
"
)
;
group
.
collapsed
=
false
;
gBrowser
.
removeTabGroup
(
group
)
;
}
)
;
add_task
(
async
function
test_tabGroupCollapseSelectsAdjacentTabAfter
(
)
{
let
tabInGroup
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
[
tabInGroup
]
)
;
let
adjacentTabAfter
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
gBrowser
.
selectedTab
=
tabInGroup
;
group
.
collapsed
=
true
;
Assert
.
equal
(
gBrowser
.
selectedTab
adjacentTabAfter
"
selected
tab
becomes
adjacent
tab
after
group
on
collapse
"
)
;
BrowserTestUtils
.
removeTab
(
adjacentTabAfter
)
;
group
.
collapsed
=
false
;
gBrowser
.
removeTabGroup
(
group
)
;
}
)
;
add_task
(
async
function
test_tabGroupCollapseSelectsAdjacentTabBefore
(
)
{
let
adjacentTabBefore
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
tabInGroup
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
[
tabInGroup
]
)
;
gBrowser
.
selectedTab
=
tabInGroup
;
group
.
collapsed
=
true
;
Assert
.
equal
(
gBrowser
.
selectedTab
adjacentTabBefore
"
selected
tab
becomes
adjacent
tab
after
group
on
collapse
"
)
;
BrowserTestUtils
.
removeTab
(
adjacentTabBefore
)
;
group
.
collapsed
=
false
;
gBrowser
.
removeTabGroup
(
group
)
;
}
)
;
add_task
(
async
function
test_tabGroupCollapseCreatesNewTabIfAllTabsInGroup
(
)
{
let
fgWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
group
=
fgWindow
.
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
fgWindow
.
gBrowser
.
tabs
)
;
Assert
.
equal
(
fgWindow
.
gBrowser
.
tabs
.
length
1
"
only
one
tab
exists
"
)
;
Assert
.
equal
(
fgWindow
.
gBrowser
.
tabs
[
0
]
.
group
group
"
sole
existing
tab
is
in
group
"
)
;
group
.
collapsed
=
true
;
Assert
.
equal
(
fgWindow
.
gBrowser
.
tabs
.
length
2
"
new
tab
is
created
if
group
is
collapsed
and
all
tabs
are
in
group
"
)
;
Assert
.
equal
(
fgWindow
.
gBrowser
.
selectedTab
fgWindow
.
gBrowser
.
tabs
[
1
]
"
new
tab
becomes
selected
tab
"
)
;
Assert
.
equal
(
fgWindow
.
gBrowser
.
selectedTab
.
group
null
"
new
tab
is
not
in
group
"
)
;
group
.
collapsed
=
false
;
fgWindow
.
gBrowser
.
removeTabGroup
(
group
)
;
await
BrowserTestUtils
.
closeWindow
(
fgWindow
)
;
}
)
;
add_task
(
async
function
test_tabUngroup
(
)
{
let
extraTab1
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
groupedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
[
groupedTab
]
)
;
let
extraTab2
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
Assert
.
equal
(
groupedTab
.
_tPos
2
"
grouped
tab
starts
in
correct
position
"
)
;
Assert
.
equal
(
groupedTab
.
group
group
"
tab
belongs
to
group
"
)
;
group
.
ungroupTabs
(
)
;
Assert
.
equal
(
groupedTab
.
_tPos
2
"
tab
is
in
the
same
position
as
before
ungroup
"
)
;
Assert
.
equal
(
groupedTab
.
group
null
"
tab
no
longer
belongs
to
group
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
group
.
parentElement
=
=
=
null
;
}
)
;
Assert
.
equal
(
group
.
parentElement
null
"
group
is
unloaded
"
)
;
BrowserTestUtils
.
removeTab
(
groupedTab
)
;
BrowserTestUtils
.
removeTab
(
extraTab1
)
;
BrowserTestUtils
.
removeTab
(
extraTab2
)
;
}
)
;
add_task
(
async
function
test_tabGroupRemove
(
)
{
let
groupedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
[
groupedTab
]
)
;
gBrowser
.
removeTabGroup
(
group
)
;
Assert
.
equal
(
groupedTab
.
parentElement
null
"
grouped
tab
is
unloaded
"
)
;
Assert
.
equal
(
group
.
parentElement
null
"
group
is
unloaded
"
)
;
}
)
;
add_task
(
async
function
test_tabGroupDeletesWhenLastTabClosed
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
[
tab
]
)
;
gBrowser
.
removeTab
(
tab
)
;
Assert
.
equal
(
group
.
parent
null
"
group
is
removed
from
tabbrowser
"
)
;
}
)
;
add_task
(
async
function
test_tabGroupMoveToNewWindow
(
)
{
let
tabUri
=
"
https
:
/
/
example
.
com
/
tab
-
group
-
test
"
;
let
groupedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
tabUri
)
;
let
group
=
gBrowser
.
addTabGroup
(
"
blue
"
"
test
"
[
groupedTab
]
)
;
let
fgWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
fgWindow
.
gBrowser
.
adoptTabGroup
(
group
0
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
group
.
parentElement
=
=
=
null
;
}
)
;
Assert
.
equal
(
gBrowser
.
tabGroups
.
length
0
"
Tab
group
no
longer
exists
in
original
window
"
)
;
Assert
.
equal
(
fgWindow
.
gBrowser
.
tabGroups
.
length
1
"
A
tab
group
exists
in
the
new
window
"
)
;
let
newGroup
=
fgWindow
.
gBrowser
.
tabGroups
[
0
]
;
Assert
.
equal
(
newGroup
.
color
"
blue
"
"
New
group
has
same
color
as
original
group
"
)
;
Assert
.
equal
(
newGroup
.
label
"
test
"
"
New
group
has
same
label
as
original
group
"
)
;
Assert
.
equal
(
newGroup
.
tabs
.
length
1
"
New
group
has
same
number
of
tabs
as
original
group
"
)
;
Assert
.
equal
(
newGroup
.
tabs
[
0
]
.
linkedBrowser
.
currentURI
.
spec
tabUri
"
New
tab
has
same
URI
as
old
tab
"
)
;
fgWindow
.
gBrowser
.
removeTabGroup
(
group
)
;
await
BrowserTestUtils
.
closeWindow
(
fgWindow
)
;
}
)
;
