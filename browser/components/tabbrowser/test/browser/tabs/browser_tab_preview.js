"
use
strict
"
;
const
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
async
function
openPreview
(
tab
win
=
window
)
{
const
previewShown
=
BrowserTestUtils
.
waitForPopupEvent
(
win
.
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
"
shown
"
)
;
EventUtils
.
synthesizeMouse
(
tab
1
1
{
type
:
"
mouseover
"
}
win
)
;
return
previewShown
;
}
async
function
closePreviews
(
win
=
window
)
{
const
tabs
=
win
.
document
.
getElementById
(
"
tabbrowser
-
tabs
"
)
;
const
previewHidden
=
BrowserTestUtils
.
waitForPopupEvent
(
win
.
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
"
hidden
"
)
;
EventUtils
.
synthesizeMouse
(
tabs
0
tabs
.
outerHeight
+
1
{
type
:
"
mouseout
"
}
win
)
;
return
previewHidden
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
hoverPreview
.
enabled
"
true
]
[
"
browser
.
tabs
.
hoverPreview
.
showThumbnails
"
false
]
[
"
browser
.
tabs
.
tooltipsShowPidAndActiveness
"
false
]
[
"
ui
.
tooltip
.
delay_ms
"
0
]
]
}
)
;
}
)
;
add_task
(
async
function
hoverTests
(
)
{
const
tabUrl1
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
First
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl1
)
;
const
tabUrl2
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
Second
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl2
)
;
const
previewContainer
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
await
openPreview
(
tab1
)
;
Assert
.
equal
(
previewContainer
.
querySelector
(
"
.
tab
-
preview
-
title
"
)
.
innerText
"
First
New
Tab
"
"
Preview
of
tab1
shows
correct
title
"
)
;
await
closePreviews
(
)
;
await
openPreview
(
tab2
)
;
Assert
.
equal
(
previewContainer
.
querySelector
(
"
.
tab
-
preview
-
title
"
)
.
innerText
"
Second
New
Tab
"
"
Preview
of
tab2
shows
correct
title
"
)
;
await
closePreviews
(
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mouseover
"
}
)
;
}
)
;
add_task
(
async
function
noTabPreviewInBackgroundWindowTests
(
)
{
const
bgWindow
=
window
;
const
bgTabUrl
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
First
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
bgTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
bgTabUrl
)
;
await
openPreview
(
bgTab
bgWindow
)
;
await
closePreviews
(
bgWindow
)
;
const
bgPreviewComponent
=
bgWindow
.
gBrowser
.
tabContainer
.
previewPanel
;
sinon
.
spy
(
bgPreviewComponent
"
activate
"
)
;
let
fgWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
fgTab
=
fgWindow
.
gBrowser
.
tabs
[
0
]
;
let
fgWindowPreviewContainer
=
fgWindow
.
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
await
openPreview
(
fgTab
fgWindow
)
;
Assert
.
equal
(
fgWindowPreviewContainer
.
querySelector
(
"
.
tab
-
preview
-
title
"
)
.
innerText
"
New
Tab
"
"
Preview
of
foreground
tab
shows
correct
title
"
)
;
await
closePreviews
(
fgWindow
)
;
EventUtils
.
synthesizeMouseAtCenter
(
bgTab
{
type
:
"
mouseover
"
}
bgWindow
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
bgPreviewComponent
.
activate
.
calledOnce
;
}
)
;
Assert
.
equal
(
bgPreviewComponent
.
_panel
.
state
"
closed
"
"
preview
does
not
open
from
background
window
"
)
;
BrowserTestUtils
.
removeTab
(
fgTab
)
;
await
BrowserTestUtils
.
closeWindow
(
fgWindow
)
;
BrowserTestUtils
.
removeTab
(
bgTab
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mouseover
"
}
)
;
sinon
.
restore
(
)
;
}
)
;
add_task
(
async
function
focusTests
(
)
{
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
const
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
const
previewPanel
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
await
openPreview
(
tab1
)
;
Assert
.
equal
(
previewPanel
.
state
"
open
"
"
Preview
is
open
"
)
;
let
previewHidden
=
BrowserTestUtils
.
waitForPopupEvent
(
previewPanel
"
hidden
"
)
;
tab1
.
click
(
)
;
await
previewHidden
;
Assert
.
equal
(
previewPanel
.
state
"
closed
"
"
Preview
is
closed
after
selecting
tab
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mouseover
"
}
)
;
}
)
;
add_task
(
async
function
pidAndActivenessHiddenByDefaultTests
(
)
{
const
tabUrl1
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
First
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl1
)
;
const
previewContainer
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
await
openPreview
(
tab1
)
;
Assert
.
equal
(
previewContainer
.
querySelector
(
"
.
tab
-
preview
-
pid
"
)
.
innerText
"
"
"
Tab
PID
is
not
shown
"
)
;
Assert
.
equal
(
previewContainer
.
querySelector
(
"
.
tab
-
preview
-
activeness
"
)
.
innerText
"
"
"
Tab
activeness
is
not
shown
"
)
;
await
closePreviews
(
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mouseover
"
}
)
;
}
)
;
add_task
(
async
function
pidAndActivenessTests
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
tooltipsShowPidAndActiveness
"
true
]
]
}
)
;
const
tabUrl1
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
Single
process
tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl1
)
;
const
tabUrl2
=
data
:
text
/
html
<
html
>
<
head
>
<
title
>
Multi
-
process
tab
<
/
title
>
<
/
head
>
<
body
>
<
iframe
id
=
"
inlineFrameExample
"
title
=
"
Inline
Frame
Example
"
width
=
"
300
"
height
=
"
200
"
src
=
"
https
:
/
/
example
.
com
"
>
<
/
iframe
>
<
/
body
>
<
/
html
>
;
const
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl2
)
;
const
previewContainer
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
await
openPreview
(
tab1
)
;
Assert
.
stringMatches
(
previewContainer
.
querySelector
(
"
.
tab
-
preview
-
pid
"
)
.
innerText
/
^
pid
:
\
d
+
/
"
Tab
PID
is
shown
on
single
process
tab
"
)
;
Assert
.
equal
(
previewContainer
.
querySelector
(
"
.
tab
-
preview
-
activeness
"
)
.
innerText
"
"
"
Tab
activeness
is
not
shown
on
inactive
tab
"
)
;
await
closePreviews
(
)
;
await
openPreview
(
tab2
)
;
Assert
.
stringMatches
(
previewContainer
.
querySelector
(
"
.
tab
-
preview
-
pid
"
)
.
innerText
/
^
pids
:
\
d
+
\
d
+
/
"
Tab
PIDs
are
shown
on
multi
-
process
tab
"
)
;
Assert
.
equal
(
previewContainer
.
querySelector
(
"
.
tab
-
preview
-
activeness
"
)
.
innerText
"
[
A
]
"
"
Tab
activeness
is
shown
on
active
tab
"
)
;
await
closePreviews
(
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mouseover
"
}
)
;
}
)
;
add_task
(
async
function
thumbnailTests
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
hoverPreview
.
showThumbnails
"
true
]
]
}
)
;
const
tabUrl1
=
"
about
:
blank
"
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl1
)
;
const
tabUrl2
=
"
about
:
blank
"
;
const
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl2
)
;
const
previewPanel
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
let
thumbnailUpdated
=
BrowserTestUtils
.
waitForEvent
(
previewPanel
"
previewThumbnailUpdated
"
false
evt
=
>
evt
.
detail
.
thumbnail
)
;
await
openPreview
(
tab1
)
;
await
thumbnailUpdated
;
Assert
.
ok
(
previewPanel
.
querySelectorAll
(
"
.
tab
-
preview
-
thumbnail
-
container
img
.
tab
-
preview
-
thumbnail
-
container
canvas
"
)
.
length
"
Tab1
preview
contains
thumbnail
"
)
;
await
closePreviews
(
)
;
thumbnailUpdated
=
BrowserTestUtils
.
waitForEvent
(
previewPanel
"
previewThumbnailUpdated
"
)
;
await
openPreview
(
tab2
)
;
await
thumbnailUpdated
;
Assert
.
equal
(
previewPanel
.
querySelectorAll
(
"
.
tab
-
preview
-
thumbnail
-
container
img
.
tab
-
preview
-
thumbnail
-
container
canvas
"
)
.
length
0
"
Tab2
(
selected
)
does
not
contain
thumbnail
"
)
;
const
previewHidden
=
BrowserTestUtils
.
waitForPopupEvent
(
previewPanel
"
hidden
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
previewHidden
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mouseover
"
}
)
;
}
)
;
add_task
(
async
function
wireframeTests
(
)
{
const
{
TabStateFlusher
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
sessionstore
/
TabStateFlusher
.
sys
.
mjs
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
hoverPreview
.
showThumbnails
"
true
]
[
"
browser
.
history
.
collectWireframes
"
true
]
]
}
)
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
First
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
)
;
const
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
await
TabStateFlusher
.
flush
(
tab1
.
linkedBrowser
)
;
gBrowser
.
discardBrowser
(
tab1
true
)
;
const
previewPanel
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
let
thumbnailUpdated
=
BrowserTestUtils
.
waitForEvent
(
previewPanel
"
previewThumbnailUpdated
"
false
evt
=
>
evt
.
detail
.
thumbnail
)
;
await
openPreview
(
tab1
)
;
await
thumbnailUpdated
;
Assert
.
ok
(
previewPanel
.
querySelectorAll
(
"
.
tab
-
preview
-
thumbnail
-
container
svg
"
)
.
length
"
Tab1
preview
contains
wireframe
"
)
;
const
previewHidden
=
BrowserTestUtils
.
waitForPopupEvent
(
previewPanel
"
hidden
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
previewHidden
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mouseover
"
}
)
;
}
)
;
add_task
(
async
function
delayTests
(
)
{
const
tabUrl1
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
First
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl1
)
;
const
tabUrl2
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
Second
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl2
)
;
const
previewElement
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
await
openPreview
(
tab1
)
;
const
previewComponent
=
gBrowser
.
tabContainer
.
previewPanel
;
sinon
.
spy
(
previewComponent
"
deactivate
"
)
;
const
previewHidden
=
BrowserTestUtils
.
waitForPopupEvent
(
previewElement
"
hidden
"
)
;
Assert
.
ok
(
!
previewComponent
.
deactivate
.
called
"
Delay
is
not
reset
when
moving
between
tabs
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
getElementById
(
"
reload
-
button
"
)
{
type
:
"
mousemove
"
}
)
;
await
previewHidden
;
Assert
.
ok
(
previewComponent
.
deactivate
.
called
"
Delay
is
reset
when
cursor
leaves
tabstrip
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
sinon
.
restore
(
)
;
}
)
;
add_task
(
async
function
dragTests
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
tooltip
.
delay_ms
"
1000
]
]
}
)
;
const
tabUrl1
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
First
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl1
)
;
const
previewElement
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
await
openPreview
(
tab1
)
;
const
previewComponent
=
gBrowser
.
tabContainer
.
previewPanel
;
sinon
.
spy
(
previewComponent
"
deactivate
"
)
;
const
previewHidden
=
BrowserTestUtils
.
waitForPopupEvent
(
previewElement
"
hidden
"
)
;
let
dragend
=
BrowserTestUtils
.
waitForEvent
(
tab1
"
dragend
"
)
;
EventUtils
.
synthesizePlainDragAndDrop
(
{
srcElement
:
tab1
destElement
:
null
stepX
:
100
stepY
:
0
}
)
;
await
previewHidden
;
Assert
.
ok
(
previewComponent
.
deactivate
.
called
"
delay
is
reset
after
drag
started
"
)
;
await
dragend
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
sinon
.
restore
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mouseover
"
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
panelSuppressionOnContextMenuTests
(
)
{
const
tabUrl
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
First
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl
)
;
await
openPreview
(
tab
)
;
await
closePreviews
(
)
;
const
previewComponent
=
gBrowser
.
tabContainer
.
previewPanel
;
sinon
.
spy
(
previewComponent
"
activate
"
)
;
const
contentAreaContextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
const
contextMenuShown
=
BrowserTestUtils
.
waitForPopupEvent
(
contentAreaContextMenu
"
shown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
contextmenu
"
}
window
)
;
await
contextMenuShown
;
EventUtils
.
synthesizeMouseAtCenter
(
tab
{
type
:
"
mouseover
"
}
window
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
previewComponent
.
activate
.
called
;
}
)
;
Assert
.
equal
(
previewComponent
.
_panel
.
state
"
closed
"
"
"
)
;
contentAreaContextMenu
.
hidePopup
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
sinon
.
restore
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mouseover
"
}
)
;
}
)
;
add_task
(
async
function
panelSuppressionOnPanelTests
(
)
{
const
tabUrl
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
First
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl
)
;
await
openPreview
(
tab
)
;
await
closePreviews
(
)
;
const
previewComponent
=
gBrowser
.
tabContainer
.
previewPanel
;
sinon
.
spy
(
previewComponent
"
activate
"
)
;
const
appMenuButton
=
document
.
getElementById
(
"
PanelUI
-
menu
-
button
"
)
;
const
appMenuPopup
=
document
.
getElementById
(
"
appMenu
-
popup
"
)
;
appMenuButton
.
click
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
tab
{
type
:
"
mouseover
"
}
window
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
previewComponent
.
activate
.
calledOnce
;
}
)
;
Assert
.
equal
(
previewComponent
.
_panel
.
state
"
closed
"
"
"
)
;
const
tabs
=
window
.
document
.
getElementById
(
"
tabbrowser
-
tabs
"
)
;
EventUtils
.
synthesizeMouse
(
tabs
0
tabs
.
outerHeight
+
1
{
type
:
"
mouseout
"
}
window
)
;
const
popupHidingEvent
=
BrowserTestUtils
.
waitForEvent
(
appMenuPopup
"
popuphiding
"
)
;
appMenuPopup
.
hidePopup
(
)
;
await
popupHidingEvent
;
await
openPreview
(
tab
)
;
Assert
.
equal
(
previewComponent
.
_panel
.
state
"
open
"
"
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
sinon
.
restore
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mouseover
"
}
)
;
}
)
;
add_task
(
async
function
panelSuppressionOnPanelLazyLoadTests
(
)
{
let
fgWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
fgTab
=
fgWindow
.
gBrowser
.
tabs
[
0
]
;
const
appMenuButton
=
fgWindow
.
document
.
getElementById
(
"
PanelUI
-
menu
-
button
"
)
;
const
appMenuPopup
=
fgWindow
.
document
.
getElementById
(
"
appMenu
-
popup
"
)
;
appMenuButton
.
click
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
fgTab
{
type
:
"
mouseover
"
}
fgWindow
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
(
(
appMenuPopup
.
getAttribute
(
"
animating
"
)
=
=
=
"
true
"
|
|
appMenuPopup
.
getAttribute
(
"
panelopen
"
)
=
=
=
"
true
"
)
&
&
fgWindow
.
gBrowser
.
tabContainer
.
previewPanel
!
=
=
null
)
;
}
)
;
const
previewComponent
=
fgWindow
.
gBrowser
.
tabContainer
.
previewPanel
;
Assert
.
equal
(
previewComponent
.
_isDisabled
(
)
true
"
"
)
;
const
tabs
=
fgWindow
.
document
.
getElementById
(
"
tabbrowser
-
tabs
"
)
;
EventUtils
.
synthesizeMouse
(
tabs
0
tabs
.
outerHeight
+
1
{
type
:
"
mouseout
"
}
fgWindow
)
;
const
popupHidingEvent
=
BrowserTestUtils
.
waitForEvent
(
appMenuPopup
"
popuphiding
"
)
;
appMenuPopup
.
hidePopup
(
)
;
await
popupHidingEvent
;
BrowserTestUtils
.
removeTab
(
fgTab
)
;
await
BrowserTestUtils
.
closeWindow
(
fgWindow
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mouseover
"
}
)
;
}
)
;
add_task
(
async
function
urlBarInputTests
(
)
{
const
previewElement
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
await
openPreview
(
tab1
)
;
gURLBar
.
focus
(
)
;
Assert
.
equal
(
previewElement
.
state
"
open
"
"
Preview
is
open
"
)
;
let
previewHidden
=
BrowserTestUtils
.
waitForEvent
(
previewElement
"
popuphidden
"
)
;
EventUtils
.
sendChar
(
"
q
"
window
)
;
await
previewHidden
;
Assert
.
equal
(
previewElement
.
state
"
closed
"
"
Preview
is
closed
"
)
;
await
closePreviews
(
)
;
await
openPreview
(
tab1
)
;
Assert
.
equal
(
previewElement
.
state
"
open
"
"
Preview
is
open
"
)
;
previewHidden
=
BrowserTestUtils
.
waitForEvent
(
previewElement
"
popuphidden
"
)
;
EventUtils
.
sendChar
(
"
q
"
window
)
;
await
previewHidden
;
Assert
.
equal
(
previewElement
.
state
"
closed
"
"
Preview
is
closed
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
}
)
;
add_task
(
async
function
zeroDelayTests
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
tooltip
.
delay_ms
"
1000
]
]
}
)
;
const
tabUrl
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
First
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl
)
;
await
openPreview
(
tab
)
;
await
closePreviews
(
)
;
let
resolved
=
false
;
let
openPreviewPromise
=
openPreview
(
tab
)
.
then
(
(
)
=
>
{
resolved
=
true
;
}
)
;
let
timeoutPromise
=
new
Promise
(
resolve
=
>
setTimeout
(
resolve
300
)
)
;
await
Promise
.
race
(
[
openPreviewPromise
timeoutPromise
]
)
;
Assert
.
ok
(
resolved
"
Zero
delay
is
set
immediately
after
leaving
tab
strip
"
)
;
await
closePreviews
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
wheelTests
(
)
{
const
previewPanel
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
Assert
.
ok
(
!
previewPanel
.
hasAttribute
(
"
rolluponmousewheel
"
)
"
Panel
does
not
have
rolluponmousewheel
when
no
overflow
"
)
;
let
scrollOverflowEvent
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
.
arrowScrollbox
"
overflow
"
)
;
BrowserTestUtils
.
overflowTabs
(
registerCleanupFunction
window
{
overflowAtStart
:
false
}
)
;
await
scrollOverflowEvent
;
await
openPreview
(
tab1
)
;
Assert
.
equal
(
previewPanel
.
getAttribute
(
"
rolluponmousewheel
"
)
"
true
"
"
Panel
has
rolluponmousewheel
=
true
when
tabs
overflow
"
)
;
while
(
gBrowser
.
tabs
.
length
>
1
)
{
BrowserTestUtils
.
removeTab
(
gBrowser
.
tabs
[
0
]
)
;
}
EventUtils
.
synthesizeMouseAtCenter
(
document
.
documentElement
{
type
:
"
mouseover
"
}
)
;
}
)
;
add_task
(
async
function
appearsAsTooltipToAccessibilityToolsTests
(
)
{
const
previewPanel
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
Assert
.
equal
(
previewPanel
.
getAttribute
(
"
role
"
)
"
tooltip
"
"
The
panel
appears
as
a
tooltip
to
assistive
technology
"
)
;
}
)
;
add_task
(
async
function
tabContentChangeTests
(
)
{
const
previewPanel
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
const
tabUrl
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
Original
Tab
Title
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl
)
;
await
openPreview
(
tab
)
;
Assert
.
equal
(
previewPanel
.
querySelector
(
"
.
tab
-
preview
-
title
"
)
.
innerText
"
Original
Tab
Title
"
"
Preview
of
tab
shows
original
tab
title
"
)
;
tab
.
setAttribute
(
"
label
"
"
New
Tab
Title
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
(
previewPanel
.
querySelector
(
"
.
tab
-
preview
-
title
"
)
.
innerText
=
=
=
"
New
Tab
Title
"
)
;
}
)
;
Assert
.
equal
(
previewPanel
.
querySelector
(
"
.
tab
-
preview
-
title
"
)
.
innerText
"
New
Tab
Title
"
"
Preview
of
tab
shows
new
tab
title
"
)
;
await
closePreviews
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
tabPreview_verticalTabsPositioning
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
sidebar
.
revamp
"
true
]
[
"
sidebar
.
verticalTabs
"
true
]
]
}
)
;
const
previewPanel
=
document
.
getElementById
(
"
tab
-
preview
-
panel
"
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
await
openPreview
(
tab
)
;
let
tabRect
=
tab
.
getBoundingClientRect
(
)
;
let
panelRect
=
previewPanel
.
getBoundingClientRect
(
)
;
Assert
.
ok
(
Math
.
abs
(
tabRect
.
top
-
panelRect
.
top
)
<
5
"
Preview
panel
not
displayed
beneath
tab
"
)
;
await
closePreviews
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
