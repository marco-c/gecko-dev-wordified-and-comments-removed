"
use
strict
"
;
const
PREF_DELAY_AUTOPLAY
=
"
media
.
block
-
autoplay
-
until
-
in
-
foreground
"
;
async
function
playMedia
(
tab
{
expectBlocked
}
)
{
let
blockedPromise
=
wait_for_tab_media_blocked_event
(
tab
expectBlocked
)
;
tab
.
resumeDelayedMedia
(
)
;
await
blockedPromise
;
is
(
activeMediaBlocked
(
tab
)
expectBlocked
"
tab
has
wrong
media
block
state
"
)
;
}
add_task
(
async
function
setPref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_DELAY_AUTOPLAY
true
]
]
}
)
;
}
)
;
add_task
(
async
function
testDelayPlayWontAffectUnmuteStatus
(
)
{
info
(
"
Add
media
tabs
"
)
;
let
tab0
=
await
addMediaTab
(
)
;
let
tab1
=
await
addMediaTab
(
)
;
let
tabs
=
[
tab0
tab1
]
;
info
(
"
Play
both
tabs
"
)
;
await
play
(
tab0
false
)
;
await
play
(
tab1
false
)
;
ok
(
!
muted
(
tab0
)
"
Tab0
is
unmuted
"
)
;
ok
(
!
muted
(
tab1
)
"
Tab1
is
unmuted
"
)
;
info
(
"
Play
media
on
tab0
"
)
;
await
playMedia
(
tab0
{
expectBlocked
:
false
}
)
;
ok
(
!
muted
(
tab0
)
"
Tab0
is
unmuted
"
)
;
ok
(
!
muted
(
tab1
)
"
Tab1
is
unmuted
"
)
;
info
(
"
Play
media
on
tab1
"
)
;
await
playMedia
(
tab1
{
expectBlocked
:
false
}
)
;
ok
(
!
muted
(
tab0
)
"
Tab0
is
unmuted
"
)
;
ok
(
!
muted
(
tab1
)
"
Tab1
is
unmuted
"
)
;
for
(
let
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
add_task
(
async
function
testDelayPlayWontAffectMuteStatus
(
)
{
info
(
"
Add
media
tabs
"
)
;
let
tab0
=
await
addMediaTab
(
)
;
let
tab1
=
await
addMediaTab
(
)
;
info
(
"
Play
both
tabs
"
)
;
await
play
(
tab0
false
)
;
await
play
(
tab1
false
)
;
toggleMuteAudio
(
tab0
true
)
;
toggleMuteAudio
(
tab1
true
)
;
ok
(
muted
(
tab0
)
"
Tab0
is
muted
"
)
;
ok
(
muted
(
tab1
)
"
Tab1
is
muted
"
)
;
info
(
"
Play
media
on
tab0
"
)
;
await
playMedia
(
tab0
{
expectBlocked
:
false
}
)
;
ok
(
muted
(
tab0
)
"
Tab0
is
muted
"
)
;
ok
(
muted
(
tab1
)
"
Tab1
is
muted
"
)
;
info
(
"
Play
media
on
tab1
"
)
;
await
playMedia
(
tab1
{
expectBlocked
:
false
}
)
;
ok
(
muted
(
tab0
)
"
Tab0
is
muted
"
)
;
ok
(
muted
(
tab1
)
"
Tab1
is
muted
"
)
;
BrowserTestUtils
.
removeTab
(
tab0
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
}
)
;
add_task
(
async
function
testDelayPlayWhenSwitchingTab
(
)
{
info
(
"
Add
media
tabs
"
)
;
let
tab0
=
await
addMediaTab
(
)
;
let
tab1
=
await
addMediaTab
(
)
;
info
(
"
Play
both
tabs
"
)
;
await
play
(
tab0
false
)
;
await
play
(
tab1
false
)
;
ok
(
activeMediaBlocked
(
tab0
)
"
Tab0
is
activemedia
-
blocked
"
)
;
ok
(
activeMediaBlocked
(
tab1
)
"
Tab1
is
activemedia
-
blocked
"
)
;
info
(
"
Switch
to
tab0
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab0
)
;
is
(
gBrowser
.
selectedTab
tab0
"
Tab0
is
active
"
)
;
ok
(
!
activeMediaBlocked
(
tab0
)
"
Tab0
is
not
activemedia
-
blocked
"
)
;
ok
(
activeMediaBlocked
(
tab1
)
"
Tab1
is
activemedia
-
blocked
"
)
;
info
(
"
Switch
to
tab1
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
is
(
gBrowser
.
selectedTab
tab1
"
Tab1
is
active
"
)
;
ok
(
!
activeMediaBlocked
(
tab0
)
"
Tab0
is
not
activemedia
-
blocked
"
)
;
ok
(
!
activeMediaBlocked
(
tab1
)
"
Tab1
is
not
activemedia
-
blocked
"
)
;
BrowserTestUtils
.
removeTab
(
tab0
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
}
)
;
add_task
(
async
function
testDelayPlayWhenUsingButton
(
)
{
info
(
"
Add
media
tabs
"
)
;
let
tab0
=
await
addMediaTab
(
)
;
let
tab1
=
await
addMediaTab
(
)
;
info
(
"
Play
both
tabs
"
)
;
await
play
(
tab0
false
)
;
await
play
(
tab1
false
)
;
ok
(
activeMediaBlocked
(
tab0
)
"
Tab0
is
activemedia
-
blocked
"
)
;
ok
(
activeMediaBlocked
(
tab1
)
"
Tab1
is
activemedia
-
blocked
"
)
;
info
(
"
Press
the
Play
Tab
icon
on
tab0
"
)
;
let
isPinned
=
tab0
.
pinned
;
let
isVerticalAndCollapsed
=
Services
.
prefs
.
getBoolPref
(
"
sidebar
.
revamp
"
false
)
&
&
Services
.
prefs
.
getBoolPref
(
"
sidebar
.
verticalTabs
"
false
)
&
&
!
window
.
SidebarController
.
_state
.
launcherExpanded
;
let
icon0
=
isPinned
|
|
isVerticalAndCollapsed
?
tab0
.
overlayIcon
:
tab0
.
audioButton
;
await
pressIcon
(
icon0
)
;
ok
(
!
activeMediaBlocked
(
tab0
)
"
Tab0
is
not
activemedia
-
blocked
"
)
;
ok
(
activeMediaBlocked
(
tab1
)
"
Tab1
is
activemedia
-
blocked
"
)
;
info
(
"
Press
the
Play
Tab
icon
on
tab1
"
)
;
isPinned
=
tab1
.
pinned
;
let
icon1
=
isPinned
|
|
isVerticalAndCollapsed
?
tab1
.
overlayIcon
:
tab1
.
audioButton
;
await
pressIcon
(
icon1
)
;
ok
(
!
activeMediaBlocked
(
tab0
)
"
Tab0
is
not
activemedia
-
blocked
"
)
;
ok
(
!
activeMediaBlocked
(
tab1
)
"
Tab1
is
not
activemedia
-
blocked
"
)
;
BrowserTestUtils
.
removeTab
(
tab0
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
}
)
;
add_task
(
async
function
testTabContextMenu
(
)
{
info
(
"
Add
media
tab
"
)
;
let
tab0
=
await
addMediaTab
(
)
;
let
menuItemPlayTab
=
document
.
getElementById
(
"
context_playTab
"
)
;
let
menuItemPlaySelectedTabs
=
document
.
getElementById
(
"
context_playSelectedTabs
"
)
;
updateTabContextMenu
(
tab0
)
;
ok
(
menuItemPlayTab
.
hidden
'
tab0
"
Play
Tab
"
is
hidden
'
)
;
ok
(
menuItemPlaySelectedTabs
.
hidden
'
tab0
"
Play
Tabs
"
is
hidden
'
)
;
ok
(
!
activeMediaBlocked
(
tab0
)
"
tab0
is
not
active
media
blocked
"
)
;
info
(
"
Play
tab0
"
)
;
await
play
(
tab0
false
)
;
updateTabContextMenu
(
tab0
)
;
ok
(
!
menuItemPlayTab
.
hidden
'
tab0
"
Play
Tab
"
is
visible
'
)
;
ok
(
menuItemPlaySelectedTabs
.
hidden
'
tab0
"
Play
Tabs
"
is
hidden
'
)
;
ok
(
activeMediaBlocked
(
tab0
)
"
tab0
is
active
media
blocked
"
)
;
info
(
"
Play
media
on
tab0
"
)
;
await
playMedia
(
tab0
{
expectBlocked
:
false
}
)
;
updateTabContextMenu
(
tab0
)
;
ok
(
menuItemPlayTab
.
hidden
'
tab0
"
Play
Tab
"
is
hidden
'
)
;
ok
(
menuItemPlaySelectedTabs
.
hidden
'
tab0
"
Play
Tabs
"
is
hidden
'
)
;
ok
(
!
activeMediaBlocked
(
tab0
)
"
tab0
is
not
active
media
blocked
"
)
;
BrowserTestUtils
.
removeTab
(
tab0
)
;
}
)
;
