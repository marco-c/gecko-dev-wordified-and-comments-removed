function
test
(
)
{
waitForExplicitFinish
(
)
;
let
[
origTab
]
=
gBrowser
.
visibleTabs
;
is
(
gBrowser
.
visibleTabs
.
length
1
"
1
tab
should
be
open
"
)
;
let
testTab1
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
is
(
gBrowser
.
visibleTabs
.
length
2
"
2
tabs
should
be
open
"
)
;
let
testTab2
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
mozilla
"
)
;
is
(
gBrowser
.
visibleTabs
.
length
3
"
3
tabs
should
be
open
"
)
;
testTab2
.
linkedBrowser
.
addEventListener
(
"
load
"
function
(
)
{
gBrowser
.
selectedTab
=
testTab2
;
gBrowser
.
showOnlyTheseTabs
(
[
testTab2
]
)
;
is
(
gBrowser
.
visibleTabs
.
length
1
"
1
tab
should
be
visible
"
)
;
let
pinned
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
is
(
gBrowser
.
visibleTabs
.
length
2
"
2
tabs
should
be
visible
now
"
)
;
gBrowser
.
pinTab
(
pinned
)
;
is
(
BookmarkTabHidden
(
)
false
"
Bookmark
Tab
should
be
visible
on
a
normal
tab
"
)
;
gBrowser
.
selectedTab
=
pinned
;
is
(
BookmarkTabHidden
(
)
false
"
Bookmark
Tab
should
be
visible
on
a
pinned
tab
"
)
;
let
allTabs
=
Array
.
from
(
gBrowser
.
tabs
)
;
gBrowser
.
showOnlyTheseTabs
(
allTabs
)
;
gBrowser
.
removeTab
(
testTab2
)
;
gBrowser
.
removeTab
(
testTab1
)
;
gBrowser
.
removeTab
(
pinned
)
;
is
(
gBrowser
.
visibleTabs
.
length
1
"
only
orig
is
left
and
visible
"
)
;
is
(
gBrowser
.
tabs
.
length
1
"
sanity
check
that
it
matches
"
)
;
is
(
gBrowser
.
selectedTab
origTab
"
got
the
orig
tab
"
)
;
is
(
origTab
.
hidden
false
"
and
it
'
s
not
hidden
-
-
visible
!
"
)
;
finish
(
)
;
}
{
capture
:
true
once
:
true
}
)
;
}
function
BookmarkTabHidden
(
)
{
updateTabContextMenu
(
)
;
return
document
.
getElementById
(
"
context_bookmarkTab
"
)
.
hidden
;
}
