"
use
strict
"
;
{
class
MozTabbrowserTabGroup
extends
MozXULElement
{
static
markup
=
<
vbox
class
=
"
tab
-
group
-
label
-
container
"
pack
=
"
center
"
>
<
label
class
=
"
tab
-
group
-
label
"
role
=
"
button
"
/
>
<
/
vbox
>
<
html
:
slot
/
>
;
#
label
;
#
labelElement
;
#
colorCode
;
#
tabChangeObserver
;
constructor
(
)
{
super
(
)
;
}
static
get
inheritedAttributes
(
)
{
return
{
"
.
tab
-
group
-
label
"
:
"
text
=
label
tooltiptext
=
data
-
tooltip
"
}
;
}
connectedCallback
(
)
{
this
.
#
observeTabChanges
(
)
;
if
(
this
.
_initialized
)
{
return
;
}
this
.
_initialized
=
true
;
this
.
saveOnWindowClose
=
true
;
this
.
textContent
=
"
"
;
this
.
appendChild
(
this
.
constructor
.
fragment
)
;
this
.
initializeAttributeInheritance
(
)
;
this
.
#
labelElement
=
this
.
querySelector
(
"
.
tab
-
group
-
label
"
)
;
this
.
#
labelElement
.
container
=
gBrowser
.
tabContainer
;
this
.
#
labelElement
.
group
=
this
;
this
.
#
labelElement
.
addEventListener
(
"
click
"
this
)
;
this
.
#
labelElement
.
addEventListener
(
"
contextmenu
"
e
=
>
{
e
.
preventDefault
(
)
;
gBrowser
.
tabGroupMenu
.
openEditModal
(
this
)
;
return
false
;
}
)
;
this
.
#
updateLabelAriaAttributes
(
)
;
this
.
#
updateCollapsedAriaAttributes
(
)
;
this
.
addEventListener
(
"
TabSelect
"
this
)
;
}
disconnectedCallback
(
)
{
this
.
#
tabChangeObserver
?
.
disconnect
(
)
;
}
#
observeTabChanges
(
)
{
if
(
!
this
.
#
tabChangeObserver
)
{
this
.
#
tabChangeObserver
=
new
window
.
MutationObserver
(
mutationList
=
>
{
for
(
let
mutation
of
mutationList
)
{
mutation
.
addedNodes
.
forEach
(
node
=
>
{
node
.
tagName
=
=
=
"
tab
"
&
&
node
.
dispatchEvent
(
new
CustomEvent
(
"
TabGrouped
"
{
bubbles
:
true
detail
:
this
}
)
)
;
}
)
;
mutation
.
removedNodes
.
forEach
(
node
=
>
{
node
.
tagName
=
=
=
"
tab
"
&
&
node
.
dispatchEvent
(
new
CustomEvent
(
"
TabUngrouped
"
{
bubbles
:
true
detail
:
this
}
)
)
;
}
)
;
}
if
(
!
this
.
tabs
.
length
)
{
this
.
dispatchEvent
(
new
CustomEvent
(
"
TabGroupRemoved
"
{
bubbles
:
true
}
)
)
;
this
.
remove
(
)
;
Services
.
obs
.
notifyObservers
(
this
"
browser
-
tabgroup
-
removed
-
from
-
dom
"
)
;
}
}
)
;
}
this
.
#
tabChangeObserver
.
observe
(
this
{
childList
:
true
}
)
;
}
get
color
(
)
{
return
this
.
#
colorCode
;
}
set
color
(
code
)
{
this
.
#
colorCode
=
code
;
this
.
style
.
setProperty
(
"
-
-
tab
-
group
-
color
"
var
(
-
-
tab
-
group
-
color
-
{
code
}
)
)
;
this
.
style
.
setProperty
(
"
-
-
tab
-
group
-
color
-
invert
"
var
(
-
-
tab
-
group
-
color
-
{
code
}
-
invert
)
)
;
this
.
style
.
setProperty
(
"
-
-
tab
-
group
-
color
-
pale
"
var
(
-
-
tab
-
group
-
color
-
{
code
}
-
pale
)
)
;
}
get
id
(
)
{
return
this
.
getAttribute
(
"
id
"
)
;
}
set
id
(
val
)
{
this
.
setAttribute
(
"
id
"
val
)
;
}
get
label
(
)
{
return
this
.
#
label
;
}
set
label
(
val
)
{
this
.
#
label
=
val
;
this
.
setAttribute
(
"
label
"
val
|
|
"
\
u200b
"
)
;
this
.
dataset
.
tooltip
=
val
;
this
.
#
updateLabelAriaAttributes
(
)
;
}
get
name
(
)
{
return
this
.
label
;
}
set
name
(
newName
)
{
this
.
label
=
newName
;
}
get
collapsed
(
)
{
return
this
.
hasAttribute
(
"
collapsed
"
)
;
}
set
collapsed
(
val
)
{
if
(
!
!
val
=
=
this
.
collapsed
)
{
return
;
}
if
(
val
)
{
for
(
let
tab
of
this
.
tabs
)
{
tab
.
style
.
maxWidth
=
"
"
;
}
}
this
.
toggleAttribute
(
"
collapsed
"
val
)
;
this
.
#
updateCollapsedAriaAttributes
(
)
;
const
eventName
=
val
?
"
TabGroupCollapse
"
:
"
TabGroupExpand
"
;
this
.
dispatchEvent
(
new
CustomEvent
(
eventName
{
bubbles
:
true
}
)
)
;
}
#
lastAddedTo
=
0
;
get
lastSeenActive
(
)
{
return
Math
.
max
(
this
.
#
lastAddedTo
.
.
.
this
.
tabs
.
map
(
t
=
>
t
.
lastSeenActive
)
)
;
}
async
#
updateLabelAriaAttributes
(
)
{
let
tabGroupName
=
this
.
#
label
;
if
(
!
tabGroupName
)
{
tabGroupName
=
await
gBrowser
.
tabLocalization
.
formatValue
(
"
tab
-
group
-
name
-
default
"
)
;
}
let
tabGroupDescription
=
await
gBrowser
.
tabLocalization
.
formatValue
(
"
tab
-
group
-
description
"
{
tabGroupName
}
)
;
this
.
#
labelElement
?
.
setAttribute
(
"
aria
-
label
"
tabGroupName
)
;
this
.
#
labelElement
?
.
setAttribute
(
"
aria
-
description
"
tabGroupDescription
)
;
}
#
updateCollapsedAriaAttributes
(
)
{
const
ariaExpanded
=
this
.
collapsed
?
"
false
"
:
"
true
"
;
this
.
#
labelElement
?
.
setAttribute
(
"
aria
-
expanded
"
ariaExpanded
)
;
}
get
tabs
(
)
{
return
Array
.
from
(
this
.
children
)
.
filter
(
node
=
>
node
.
matches
(
"
tab
"
)
)
;
}
get
labelElement
(
)
{
return
this
.
#
labelElement
;
}
addTabs
(
tabs
metricsContext
)
{
for
(
let
tab
of
tabs
)
{
let
tabToMove
=
this
.
ownerGlobal
=
=
=
tab
.
ownerGlobal
?
tab
:
gBrowser
.
adoptTab
(
tab
{
tabIndex
:
gBrowser
.
tabs
.
at
(
-
1
)
.
_tPos
+
1
selectTab
:
tab
.
selected
}
)
;
gBrowser
.
moveTabToGroup
(
tabToMove
this
metricsContext
)
;
}
this
.
#
lastAddedTo
=
Date
.
now
(
)
;
}
ungroupTabs
(
)
{
for
(
let
i
=
this
.
tabs
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
gBrowser
.
ungroupTab
(
this
.
tabs
[
i
]
)
;
}
}
save
(
{
isUserTriggered
=
false
}
=
{
}
)
{
SessionStore
.
addSavedTabGroup
(
this
)
;
this
.
dispatchEvent
(
new
CustomEvent
(
"
TabGroupSaved
"
{
bubbles
:
true
detail
:
{
isUserTriggered
}
}
)
)
;
}
saveAndClose
(
{
isUserTriggered
}
=
{
}
)
{
this
.
save
(
{
isUserTriggered
}
)
;
gBrowser
.
removeTabGroup
(
this
)
;
}
on_click
(
event
)
{
if
(
event
.
target
=
=
=
this
.
#
labelElement
&
&
event
.
button
=
=
=
0
)
{
event
.
preventDefault
(
)
;
this
.
collapsed
=
!
this
.
collapsed
;
gBrowser
.
tabGroupMenu
.
close
(
)
;
}
}
on_TabSelect
(
)
{
this
.
collapsed
=
false
;
}
select
(
)
{
this
.
collapsed
=
false
;
if
(
gBrowser
.
selectedTab
.
group
=
=
this
)
{
return
;
}
gBrowser
.
selectedTab
=
this
.
tabs
[
0
]
;
}
}
customElements
.
define
(
"
tab
-
group
"
MozTabbrowserTabGroup
)
;
}
