"
use
strict
"
;
{
class
MozTabSplitViewWrapper
extends
MozXULElement
{
static
markup
=
<
vbox
class
=
"
tab
-
split
-
view
-
container
"
pack
=
"
center
"
>
<
/
vbox
>
;
#
wrapperElement
;
constructor
(
)
{
super
(
)
;
}
connectedCallback
(
)
{
this
.
ownerGlobal
.
addEventListener
(
"
TabSelect
"
this
)
;
if
(
this
.
_initialized
)
{
return
;
}
this
.
_initialized
=
true
;
this
.
textContent
=
"
"
;
this
.
appendChild
(
this
.
constructor
.
fragment
)
;
this
.
#
wrapperElement
=
this
.
querySelector
(
"
.
tab
-
split
-
view
-
container
"
)
;
this
.
#
wrapperElement
.
container
=
gBrowser
.
tabContainer
;
this
.
wrapper
=
this
.
#
wrapperElement
;
}
disconnectedCallback
(
)
{
this
.
ownerGlobal
.
removeEventListener
(
"
TabSelect
"
this
)
;
}
get
splitViewId
(
)
{
return
this
.
getAttribute
(
"
splitViewId
"
)
;
}
set
splitViewId
(
val
)
{
this
.
setAttribute
(
"
splitViewId
"
val
)
;
}
get
tabs
(
)
{
return
Array
.
from
(
this
.
#
wrapperElement
.
children
)
.
filter
(
node
=
>
node
.
matches
(
"
tab
"
)
)
;
}
addTabs
(
tabs
)
{
for
(
let
[
i
tab
]
of
tabs
.
entries
(
)
)
{
if
(
tab
.
pinned
)
{
return
;
}
let
tabToMove
=
this
.
ownerGlobal
=
=
=
tab
.
ownerGlobal
?
tab
:
gBrowser
.
adoptTab
(
tab
{
tabIndex
:
gBrowser
.
tabs
.
at
(
-
1
)
.
_tPos
+
1
selectTab
:
tab
.
selected
}
)
;
gBrowser
.
moveTabToSplitView
(
tabToMove
this
)
;
tabToMove
.
setAttribute
(
i
=
=
=
0
?
"
split
-
view
-
first
"
:
"
split
-
view
-
second
"
"
true
"
)
;
}
}
unsplitTabs
(
)
{
for
(
const
tab
of
this
.
tabs
)
{
tab
.
removeAttribute
(
"
split
-
view
-
first
"
)
;
tab
.
removeAttribute
(
"
split
-
view
-
second
"
)
;
}
gBrowser
.
unsplitTabs
(
this
)
;
}
close
(
)
{
gBrowser
.
removeSplitView
(
this
)
;
}
on_TabSelect
(
event
)
{
this
.
hasActiveTab
=
event
.
target
.
group
=
=
=
this
;
}
}
customElements
.
define
(
"
tab
-
split
-
view
-
wrapper
"
MozTabSplitViewWrapper
)
;
}
