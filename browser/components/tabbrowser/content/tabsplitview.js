"
use
strict
"
;
{
class
MozTabSplitViewWrapper
extends
MozXULElement
{
static
markup
=
<
vbox
class
=
"
tab
-
split
-
view
-
container
"
pack
=
"
center
"
>
<
/
vbox
>
;
#
containerElement
;
#
tabChangeObserver
;
#
tabs
=
[
]
;
get
hasActiveTab
(
)
{
return
this
.
hasAttribute
(
"
hasactivetab
"
)
;
}
set
hasActiveTab
(
val
)
{
this
.
toggleAttribute
(
"
hasactivetab
"
val
)
;
}
constructor
(
)
{
super
(
)
;
}
connectedCallback
(
)
{
this
.
#
observeTabChanges
(
)
;
this
.
ownerGlobal
.
addEventListener
(
"
TabSelect
"
this
)
;
if
(
this
.
_initialized
)
{
return
;
}
this
.
_initialized
=
true
;
this
.
textContent
=
"
"
;
this
.
appendChild
(
this
.
constructor
.
fragment
)
;
this
.
#
containerElement
=
this
.
querySelector
(
"
.
tab
-
split
-
view
-
container
"
)
;
this
.
#
containerElement
.
container
=
gBrowser
.
tabContainer
;
this
.
wrapper
=
this
.
#
containerElement
;
}
disconnectedCallback
(
)
{
this
.
#
tabChangeObserver
?
.
disconnect
(
)
;
this
.
ownerGlobal
.
removeEventListener
(
"
TabSelect
"
this
)
;
this
.
#
deactivate
(
)
;
}
#
observeTabChanges
(
)
{
if
(
!
this
.
#
tabChangeObserver
)
{
this
.
#
tabChangeObserver
=
new
window
.
MutationObserver
(
(
)
=
>
{
if
(
this
.
tabs
.
length
)
{
let
hasActiveTab
=
this
.
tabs
.
some
(
tab
=
>
tab
.
selected
)
;
this
.
hasActiveTab
=
hasActiveTab
;
}
}
)
;
}
this
.
#
tabChangeObserver
.
observe
(
this
{
childList
:
true
}
)
;
}
get
splitViewId
(
)
{
return
this
.
getAttribute
(
"
splitViewId
"
)
;
}
set
splitViewId
(
val
)
{
this
.
setAttribute
(
"
splitViewId
"
val
)
;
}
get
tabs
(
)
{
return
Array
.
from
(
this
.
#
containerElement
.
children
)
.
filter
(
node
=
>
node
.
matches
(
"
tab
"
)
)
;
}
#
activate
(
)
{
gBrowser
.
showSplitViewPanels
(
this
.
#
tabs
)
;
this
.
dispatchEvent
(
new
CustomEvent
(
"
TabSplitViewActivate
"
{
detail
:
{
tabs
:
this
.
#
tabs
}
bubbles
:
true
}
)
)
;
}
#
deactivate
(
)
{
gBrowser
.
hideSplitViewPanels
(
this
.
#
tabs
)
;
this
.
dispatchEvent
(
new
CustomEvent
(
"
TabSplitViewDeactivate
"
{
detail
:
{
tabs
:
this
.
#
tabs
}
bubbles
:
true
}
)
)
;
}
addTabs
(
tabs
)
{
for
(
let
tab
of
tabs
)
{
if
(
tab
.
pinned
)
{
return
;
}
let
tabToMove
=
this
.
ownerGlobal
=
=
=
tab
.
ownerGlobal
?
tab
:
gBrowser
.
adoptTab
(
tab
{
tabIndex
:
gBrowser
.
tabs
.
at
(
-
1
)
.
_tPos
+
1
selectTab
:
tab
.
selected
}
)
;
this
.
#
tabs
.
push
(
tabToMove
)
;
gBrowser
.
moveTabToSplitView
(
tabToMove
this
)
;
if
(
tab
=
=
=
gBrowser
.
selectedTab
)
{
this
.
hasActiveTab
=
true
;
}
}
if
(
this
.
hasActiveTab
)
{
this
.
#
activate
(
)
;
}
}
unsplitTabs
(
)
{
gBrowser
.
unsplitTabs
(
this
)
;
}
close
(
)
{
gBrowser
.
removeSplitView
(
this
)
;
}
on_TabSelect
(
event
)
{
this
.
hasActiveTab
=
event
.
target
.
splitview
=
=
=
this
;
if
(
this
.
hasActiveTab
)
{
this
.
#
activate
(
)
;
}
else
{
this
.
#
deactivate
(
)
;
}
}
}
customElements
.
define
(
"
tab
-
split
-
view
-
wrapper
"
MozTabSplitViewWrapper
)
;
}
