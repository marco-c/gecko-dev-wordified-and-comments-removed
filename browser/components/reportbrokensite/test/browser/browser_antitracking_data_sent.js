"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
getRootDirectory
(
gTestPath
)
+
"
send_more_info
.
js
"
this
)
;
add_common_setup
(
)
;
add_task
(
setupStrictETP
)
;
add_task
(
async
function
testSendButton
(
)
{
ensureReportBrokenSitePreffedOn
(
)
;
ensureReasonOptional
(
)
;
const
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
const
blockedPromise
=
waitForContentBlockingEvent
(
3
win
)
;
const
tab
=
await
openTab
(
REPORTABLE_PAGE_URL3
win
)
;
await
blockedPromise
;
await
testSend
(
tab
AppMenu
(
win
)
{
breakageCategory
:
"
adblocker
"
description
:
"
another
test
description
"
antitracking
:
{
blockList
:
"
strict
"
blockedOrigins
:
[
"
https
:
/
/
trackertest
.
org
"
]
isPrivateBrowsing
:
true
hasTrackingContentBlocked
:
true
hasMixedActiveContentBlocked
:
true
hasMixedDisplayContentBlocked
:
true
btpHasPurgedSite
:
false
etpCategory
:
"
strict
"
}
frameworks
:
{
fastclick
:
true
marfeel
:
true
mobify
:
true
}
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
testSendingMoreInfo
(
)
{
ensureReportBrokenSitePreffedOn
(
)
;
ensureSendMoreInfoEnabled
(
)
;
const
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
const
blockedPromise
=
waitForContentBlockingEvent
(
3
win
)
;
const
tab
=
await
openTab
(
REPORTABLE_PAGE_URL3
win
)
;
await
blockedPromise
;
await
testSendMoreInfo
(
tab
HelpMenu
(
win
)
{
antitracking
:
{
blockList
:
"
strict
"
blockedOrigins
:
[
"
https
:
/
/
trackertest
.
org
"
]
isPrivateBrowsing
:
true
hasTrackingContentBlocked
:
true
hasMixedActiveContentBlocked
:
true
hasMixedDisplayContentBlocked
:
true
btpHasPurgedSite
:
false
etpCategory
:
"
strict
"
}
frameworks
:
{
fastclick
:
true
mobify
:
true
marfeel
:
true
}
consoleLog
:
[
{
level
:
"
error
"
log
(
actual
)
{
return
(
Array
.
isArray
(
actual
)
&
&
actual
.
length
=
=
1
&
&
actual
[
0
]
.
includes
(
"
blue
.
png
"
)
)
;
}
pos
:
"
0
:
1
"
uri
:
REPORTABLE_PAGE_URL3
}
{
level
:
"
error
"
log
(
actual
)
{
return
(
Array
.
isArray
(
actual
)
&
&
actual
.
length
=
=
1
&
&
actual
[
0
]
.
includes
(
"
benignPage
.
html
"
)
)
;
}
pos
:
"
0
:
1
"
uri
:
REPORTABLE_PAGE_URL3
}
{
level
:
"
warn
"
log
(
actual
)
{
return
(
Array
.
isArray
(
actual
)
&
&
actual
.
length
=
=
1
&
&
actual
[
0
]
.
includes
(
"
trackertest
.
org
"
)
)
;
}
pos
:
"
0
:
1
"
uri
:
REPORTABLE_PAGE_URL3
}
]
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
