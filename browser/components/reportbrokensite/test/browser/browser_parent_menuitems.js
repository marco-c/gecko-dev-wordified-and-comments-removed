"
use
strict
"
;
add_common_setup
(
)
;
add_task
(
async
function
testAppMenuHelpSubmenuItemIsHidden
(
)
{
ensureReportBrokenSitePreffedOn
(
)
;
const
menu
=
AppMenuHelpSubmenu
(
)
;
await
menu
.
open
(
)
;
isMenuItemHidden
(
menu
.
reportBrokenSite
)
;
await
menu
.
close
(
)
;
ensureReportBrokenSitePreffedOff
(
)
;
await
menu
.
open
(
)
;
isMenuItemHidden
(
menu
.
reportBrokenSite
)
;
await
menu
.
close
(
)
;
await
BrowserTestUtils
.
withNewTab
(
REPORTABLE_PAGE_URL
async
function
(
)
{
await
menu
.
open
(
)
;
isMenuItemHidden
(
menu
.
reportBrokenSite
)
;
await
menu
.
close
(
)
;
ensureReportBrokenSitePreffedOn
(
)
;
await
menu
.
open
(
)
;
isMenuItemHidden
(
menu
.
reportBrokenSite
)
;
await
menu
.
close
(
)
;
}
)
;
}
)
;
add_task
(
async
function
testOtherMenus
(
)
{
ensureReportBrokenSitePreffedOff
(
)
;
const
appMenu
=
AppMenu
(
)
;
const
menus
=
[
appMenu
ProtectionsPanel
(
)
HelpMenu
(
)
]
;
async
function
forceMenuItemStateUpdate
(
)
{
window
.
ReportBrokenSite
.
enableOrDisableMenuitems
(
window
)
;
await
appMenu
.
open
(
)
;
await
appMenu
.
close
(
)
;
}
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
function
(
)
{
await
forceMenuItemStateUpdate
(
)
;
for
(
const
{
menuDescription
reportBrokenSite
}
of
menus
)
{
isMenuItemHidden
(
reportBrokenSite
{
menuDescription
}
option
hidden
on
invalid
page
when
preffed
off
)
;
}
}
)
;
await
BrowserTestUtils
.
withNewTab
(
REPORTABLE_PAGE_URL
async
function
(
)
{
await
forceMenuItemStateUpdate
(
)
;
for
(
const
{
menuDescription
reportBrokenSite
}
of
menus
)
{
isMenuItemHidden
(
reportBrokenSite
{
menuDescription
}
option
hidden
on
valid
page
when
preffed
off
)
;
}
}
)
;
ensureReportBrokenSitePreffedOn
(
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
function
(
)
{
await
forceMenuItemStateUpdate
(
)
;
for
(
const
{
menuDescription
reportBrokenSite
}
of
menus
)
{
isMenuItemDisabled
(
reportBrokenSite
{
menuDescription
}
option
disabled
on
invalid
page
when
preffed
on
)
;
}
}
)
;
await
BrowserTestUtils
.
withNewTab
(
REPORTABLE_PAGE_URL
async
function
(
)
{
await
forceMenuItemStateUpdate
(
)
;
for
(
const
{
menuDescription
reportBrokenSite
}
of
menus
)
{
isMenuItemEnabled
(
reportBrokenSite
{
menuDescription
}
option
enabled
on
valid
page
when
preffed
on
)
;
}
}
)
;
ensureReportBrokenSitePreffedOff
(
)
;
await
BrowserTestUtils
.
withNewTab
(
REPORTABLE_PAGE_URL
async
function
(
)
{
await
forceMenuItemStateUpdate
(
)
;
for
(
const
{
menuDescription
reportBrokenSite
}
of
menus
)
{
isMenuItemHidden
(
reportBrokenSite
{
menuDescription
}
option
hidden
again
when
pref
toggled
back
off
)
;
}
}
)
;
}
)
;
