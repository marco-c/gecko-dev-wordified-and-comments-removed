const
{
SiteSpecificBrowser
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
SiteSpecificBrowserService
.
jsm
"
)
;
const
gHttpTestRoot
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
example
.
com
/
"
)
;
const
gHttpsTestRoot
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
https
:
/
/
example
.
com
/
"
)
;
const
gHttpsOtherRoot
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
https
:
/
/
example
.
org
/
"
)
;
const
SSB_WINDOW
=
"
chrome
:
/
/
browser
/
content
/
ssb
/
ssb
.
html
"
;
async
function
openSSB
(
uri
)
{
if
(
!
(
uri
instanceof
Ci
.
nsIURI
)
)
{
uri
=
Services
.
io
.
newURI
(
uri
)
;
}
let
openPromise
=
BrowserTestUtils
.
domWindowOpened
(
null
async
domwin
=
>
{
await
BrowserTestUtils
.
waitForEvent
(
domwin
"
load
"
)
;
return
domwin
.
location
.
toString
(
)
=
=
SSB_WINDOW
;
}
)
;
let
ssb
=
SiteSpecificBrowser
.
createFromURI
(
uri
)
;
ssb
.
launch
(
)
;
let
ssbwin
=
await
openPromise
;
await
BrowserTestUtils
.
browserLoaded
(
getBrowser
(
ssbwin
)
true
uri
.
spec
)
;
return
ssbwin
;
}
async
function
openSSBFromBrowserWindow
(
win
=
window
)
{
let
doc
=
win
.
document
;
let
pageActionButton
=
doc
.
getElementById
(
"
pageActionButton
"
)
;
let
panel
=
doc
.
getElementById
(
"
pageActionPanel
"
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
panel
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
pageActionButton
{
}
win
)
;
await
popupShown
;
let
expectedUri
=
win
.
gBrowser
.
selectedBrowser
.
currentURI
;
let
openItem
=
doc
.
getElementById
(
"
pageAction
-
panel
-
launchSSB
"
)
;
Assert
.
ok
(
!
openItem
.
disabled
"
Open
menu
item
should
not
be
disabled
"
)
;
Assert
.
ok
(
!
openItem
.
hidden
"
Open
menu
item
should
not
be
hidden
"
)
;
let
openPromise
=
BrowserTestUtils
.
domWindowOpened
(
null
async
domwin
=
>
{
await
BrowserTestUtils
.
waitForEvent
(
domwin
"
DOMContentLoaded
"
)
;
return
domwin
.
location
.
toString
(
)
=
=
SSB_WINDOW
;
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
openItem
{
}
win
)
;
let
ssbwin
=
await
openPromise
;
let
browser
=
ssbwin
.
document
.
getElementById
(
"
browser
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
true
expectedUri
.
spec
)
;
return
ssbwin
;
}
function
getBrowser
(
ssbwin
)
{
return
ssbwin
.
document
.
getElementById
(
"
browser
"
)
;
}
function
expectLoadSomewhere
(
ssb
where
win
=
window
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
tabListener
=
async
(
{
target
:
tab
}
)
=
>
{
cleanup
(
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
true
uri
=
>
uri
!
=
"
about
:
blank
"
)
;
if
(
where
!
=
"
tab
"
)
{
Assert
.
ok
(
false
Did
not
expect
{
tab
.
linkedBrowser
.
currentURI
.
spec
}
to
load
in
a
new
tab
.
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
reject
(
new
Error
(
"
Page
unexpectedly
loaded
in
a
new
tab
.
"
)
)
;
return
;
}
Assert
.
ok
(
true
{
tab
.
linkedBrowser
.
currentURI
.
spec
}
loaded
in
a
new
tab
as
expected
.
)
;
resolve
(
tab
)
;
}
;
win
.
gBrowser
.
tabContainer
.
addEventListener
(
"
TabOpen
"
tabListener
)
;
const
winObserver
=
async
(
domwin
topic
)
=
>
{
if
(
topic
!
=
"
domwindowopened
"
)
{
return
;
}
cleanup
(
)
;
await
BrowserTestUtils
.
waitForEvent
(
domwin
"
load
"
uri
=
>
uri
!
=
"
about
:
blank
"
)
;
if
(
where
!
=
"
window
"
)
{
Assert
.
ok
(
false
Did
not
expect
a
new
{
domwin
.
location
}
to
open
.
)
;
await
BrowserTestUtils
.
closeWindow
(
domwin
)
;
reject
(
new
Error
(
"
New
window
unexpectedly
opened
.
"
)
)
;
return
;
}
Assert
.
ok
(
true
{
domwin
.
location
}
opened
as
expected
.
)
;
resolve
(
domwin
)
;
}
;
Services
.
ww
.
registerNotification
(
winObserver
)
;
BrowserTestUtils
.
browserLoaded
(
getBrowser
(
ssb
)
true
uri
=
>
uri
!
=
"
about
:
blank
"
)
.
then
(
(
)
=
>
{
cleanup
(
)
;
if
(
where
!
=
"
ssb
"
)
{
Assert
.
ok
(
false
Did
not
expect
{
getBrowser
(
ssb
)
.
currentURI
.
spec
}
to
load
in
the
ssb
window
.
)
;
reject
(
new
Error
(
"
Page
unexpectedly
loaded
in
the
ssb
window
.
"
)
)
;
return
;
}
Assert
.
ok
(
true
{
getBrowser
(
ssb
)
.
currentURI
.
spec
}
loaded
in
the
ssb
window
as
expected
.
)
;
resolve
(
)
;
}
reject
)
;
const
cleanup
=
(
)
=
>
{
win
.
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabOpen
"
tabListener
)
;
Services
.
ww
.
unregisterNotification
(
winObserver
)
;
}
;
}
)
;
}
function
expectSSBLoad
(
ssb
win
=
window
)
{
return
expectLoadSomewhere
(
ssb
"
ssb
"
win
)
;
}
function
expectTabLoad
(
ssb
win
=
window
)
{
return
expectLoadSomewhere
(
ssb
"
tab
"
win
)
;
}
function
expectWindowOpen
(
ssb
win
=
window
)
{
return
expectLoadSomewhere
(
ssb
"
window
"
win
)
;
}
