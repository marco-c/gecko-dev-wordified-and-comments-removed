const
gHttpTestRoot
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
example
.
com
/
"
)
;
const
gHttpsTestRoot
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
https
:
/
/
example
.
com
/
"
)
;
const
SSB_WINDOW
=
"
chrome
:
/
/
browser
/
content
/
ssb
/
ssb
.
html
"
;
async
function
openSSBFromBrowserWindow
(
win
=
window
)
{
let
doc
=
win
.
document
;
let
pageActionButton
=
doc
.
getElementById
(
"
pageActionButton
"
)
;
let
panel
=
doc
.
getElementById
(
"
pageActionPanel
"
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
panel
"
popupshown
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
pageActionButton
{
}
win
)
;
await
popupShown
;
let
expectedUri
=
win
.
gBrowser
.
selectedBrowser
.
currentURI
;
let
openItem
=
doc
.
getElementById
(
"
pageAction
-
panel
-
launchSSB
"
)
;
Assert
.
ok
(
!
openItem
.
disabled
"
Open
menu
item
should
not
be
disabled
"
)
;
Assert
.
ok
(
!
openItem
.
hidden
"
Open
menu
item
should
not
be
hidden
"
)
;
let
openPromise
=
BrowserTestUtils
.
domWindowOpened
(
null
async
domwin
=
>
{
await
BrowserTestUtils
.
waitForEvent
(
domwin
"
load
"
)
;
return
domwin
.
location
.
toString
(
)
=
=
SSB_WINDOW
;
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
openItem
{
}
win
)
;
let
ssbwin
=
await
openPromise
;
let
browser
=
ssbwin
.
document
.
getElementById
(
"
browser
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
true
expectedUri
.
spec
)
;
return
ssbwin
;
}
function
getBrowser
(
ssbwin
)
{
return
ssbwin
.
document
.
getElementById
(
"
browser
"
)
;
}
