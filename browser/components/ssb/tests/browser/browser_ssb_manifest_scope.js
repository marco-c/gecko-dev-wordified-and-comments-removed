function
build_task
(
page
linkId
external
preload
)
{
let
expectedTarget
=
linkId
+
"
/
final
.
html
"
;
add_task
(
async
(
)
=
>
{
let
ssb
;
info
(
Loading
{
page
}
(
{
preload
}
)
)
;
if
(
preload
)
{
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
gHttpsTestRoot
+
page
}
)
;
ssb
=
await
openSSBFromBrowserWindow
(
)
;
}
else
{
ssb
=
await
openSSB
(
gHttpsTestRoot
+
page
)
;
}
let
promise
;
if
(
external
)
{
promise
=
expectTabLoad
(
ssb
)
.
then
(
tab
=
>
{
Assert
.
equal
(
tab
.
linkedBrowser
.
currentURI
.
spec
gHttpsTestRoot
+
expectedTarget
"
Should
have
loaded
the
right
uri
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
}
else
{
promise
=
expectSSBLoad
(
ssb
)
.
then
(
(
)
=
>
{
Assert
.
equal
(
getBrowser
(
ssb
)
.
currentURI
.
spec
gHttpsTestRoot
+
expectedTarget
"
Should
have
loaded
the
right
uri
.
"
)
;
}
)
;
}
info
(
Clicking
#
{
linkId
}
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
#
{
linkId
}
{
}
getBrowser
(
ssb
)
)
;
await
promise
;
await
BrowserTestUtils
.
closeWindow
(
ssb
)
;
}
)
;
}
function
make_all_tasks
(
preload
)
{
build_task
(
"
site1
/
simple
.
html
"
"
site1
"
false
preload
)
;
build_task
(
"
site1
/
simple
.
html
"
"
site2
"
true
preload
)
;
build_task
(
"
site1
/
empty
.
html
"
"
site1
"
false
preload
)
;
build_task
(
"
site1
/
empty
.
html
"
"
site2
"
true
preload
)
;
build_task
(
"
site1
/
allhost
.
html
"
"
site1
"
false
preload
)
;
build_task
(
"
site1
/
allhost
.
html
"
"
site2
"
false
preload
)
;
build_task
(
"
site1
/
bad
.
html
"
"
site1
"
false
preload
)
;
build_task
(
"
site1
/
bad
.
html
"
"
site2
"
true
preload
)
;
}
make_all_tasks
(
true
)
;
make_all_tasks
(
false
)
;
