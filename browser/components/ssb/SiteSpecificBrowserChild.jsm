"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
SiteSpecificBrowserChild
"
]
;
const
{
SiteSpecificBrowserBase
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
SiteSpecificBrowserService
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
E10SUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
)
;
async
function
loadIcon
(
window
uri
)
{
let
iconURL
=
new
window
.
URL
(
uri
window
.
location
)
;
let
request
=
new
window
.
Request
(
iconURL
{
mode
:
"
cors
"
}
)
;
request
.
overrideContentPolicyType
(
Ci
.
nsIContentPolicy
.
TYPE_IMAGE
)
;
let
response
=
await
window
.
fetch
(
request
)
;
let
blob
=
await
response
.
blob
(
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
reader
=
new
FileReader
(
)
;
reader
.
onloadend
=
(
)
=
>
resolve
(
reader
.
result
)
;
reader
.
onerror
=
reject
;
reader
.
readAsDataURL
(
blob
)
;
}
)
;
}
class
SiteSpecificBrowserChild
extends
JSWindowActorChild
{
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
SetSSB
"
:
this
.
docShell
.
browserChild
.
webBrowserChrome
=
new
WebBrowserChrome
(
message
.
data
)
;
break
;
case
"
LoadIcon
"
:
return
loadIcon
(
this
.
contentWindow
message
.
data
)
;
}
return
null
;
}
}
function
getActor
(
docShell
)
{
return
docShell
.
domWindow
.
getWindowGlobalChild
(
)
.
getActor
(
"
SiteSpecificBrowser
"
)
;
}
class
WebBrowserChrome
{
constructor
(
id
)
{
this
.
id
=
id
;
}
get
ssb
(
)
{
return
SiteSpecificBrowserBase
.
get
(
this
.
id
)
;
}
onBeforeLinkTraversal
(
originalTarget
linkURI
linkNode
isAppTab
)
{
let
docShell
=
linkNode
.
ownerGlobal
.
docShell
;
let
bc
=
docShell
.
browsingContext
;
let
target
=
originalTarget
?
bc
.
findWithName
(
originalTarget
)
:
bc
;
if
(
target
)
{
if
(
target
.
parent
)
{
return
originalTarget
;
}
return
this
.
ssb
.
canLoad
(
linkURI
)
?
originalTarget
:
"
_blank
"
;
}
return
this
.
ssb
.
canLoad
(
linkURI
)
?
"
_top
"
:
"
_blank
"
;
}
shouldLoadURI
(
docShell
uri
referrerInfo
hasPostData
triggeringPrincipal
csp
)
{
if
(
docShell
.
browsingContext
.
parent
)
{
return
true
;
}
if
(
!
this
.
ssb
.
canLoad
(
uri
)
)
{
getActor
(
docShell
)
.
sendAsyncMessage
(
"
RetargetOutOfScopeURIToBrowser
"
{
uri
:
uri
.
spec
referrerInfo
:
E10SUtils
.
serializeReferrerInfo
(
referrerInfo
)
triggeringPrincipal
:
E10SUtils
.
serializePrincipal
(
triggeringPrincipal
|
|
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
)
csp
:
csp
?
E10SUtils
.
serializeCSP
(
csp
)
:
null
}
)
;
return
false
;
}
return
true
;
}
shouldLoadURIInThisProcess
(
uri
)
{
return
this
.
ssb
.
canLoad
(
uri
)
;
}
reloadInFreshProcess
(
docShell
uri
referrerInfo
triggeringPrincipal
loadFlags
csp
)
{
return
false
;
}
}
