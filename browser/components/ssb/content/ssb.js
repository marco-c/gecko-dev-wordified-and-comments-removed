const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserUtils
:
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
SiteSpecificBrowser
:
"
resource
:
/
/
/
modules
/
SiteSpecificBrowserService
.
jsm
"
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
WindowsSupport
:
"
resource
:
/
/
/
modules
/
ssb
/
WindowsSupport
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
PrintUtils
"
"
chrome
:
/
/
global
/
content
/
printUtils
.
js
"
)
;
let
gSSBBrowser
=
null
;
var
gSSB
=
null
;
function
init
(
)
{
gSSB
=
SiteSpecificBrowser
.
get
(
window
.
arguments
[
0
]
)
;
let
uri
=
gSSB
.
startURI
;
if
(
window
.
arguments
.
length
>
1
)
{
uri
=
Services
.
io
.
newURI
(
window
.
arguments
[
1
]
)
;
}
window
.
browserDOMWindow
=
new
BrowserDOMWindow
(
)
;
gSSBBrowser
=
document
.
createXULElement
(
"
browser
"
)
;
gSSBBrowser
.
setAttribute
(
"
id
"
"
browser
"
)
;
gSSBBrowser
.
setAttribute
(
"
type
"
"
content
"
)
;
gSSBBrowser
.
setAttribute
(
"
remote
"
"
true
"
)
;
gSSBBrowser
.
setAttribute
(
"
nodefaultsrc
"
"
true
"
)
;
document
.
getElementById
(
"
browser
-
container
"
)
.
appendChild
(
gSSBBrowser
)
;
let
actor
=
gSSBBrowser
.
browsingContext
.
currentWindowGlobal
.
getActor
(
"
SiteSpecificBrowser
"
)
;
actor
.
sendAsyncMessage
(
"
SetSSB
"
gSSB
.
id
)
;
gSSBBrowser
.
addProgressListener
(
new
ProgressListener
(
)
Ci
.
nsIWebProgress
.
NOTIFY_STATE_ALL
)
;
gSSBBrowser
.
src
=
uri
.
spec
;
document
.
getElementById
(
"
title
"
)
.
textContent
=
gSSB
.
name
;
}
class
ProgressListener
{
constructor
(
)
{
this
.
isInitial
=
true
;
}
async
onStateChange
(
webProgress
request
state
status
)
{
if
(
!
webProgress
.
isTopLevel
)
{
return
;
}
let
final
=
Ci
.
nsIWebProgressListener
.
STATE_IS_WINDOW
+
Ci
.
nsIWebProgressListener
.
STATE_STOP
;
if
(
(
state
&
final
)
!
=
final
)
{
return
;
}
let
{
isInitial
}
=
this
;
this
.
isInitial
=
false
;
if
(
isInitial
&
&
gSSB
.
needsUpdate
)
{
await
gSSB
.
updateFromBrowser
(
gSSBBrowser
)
;
if
(
Services
.
appinfo
.
OS
=
=
"
WINNT
"
)
{
WindowsSupport
.
applyOSIntegration
(
gSSB
window
)
;
}
}
let
event
=
new
CustomEvent
(
"
SSBLoad
"
)
;
gSSBBrowser
.
dispatchEvent
(
event
)
;
}
}
ProgressListener
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIWebProgressListener
"
"
nsISupportsWeakReference
"
]
)
;
class
BrowserDOMWindow
{
createContentWindow
(
uri
openWindowInfo
where
flags
triggeringPrincipal
csp
)
{
console
.
error
(
"
createContentWindow
should
never
be
called
from
a
remote
browser
"
)
;
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_FAILURE
)
;
}
openURI
(
uri
openWindowInfo
where
flags
triggeringPrincipal
csp
)
{
console
.
error
(
"
openURI
should
never
be
called
from
a
remote
browser
"
)
;
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_FAILURE
)
;
}
getContentWindowOrOpenURIInFrame
(
uri
params
where
flags
name
shouldOpen
)
{
if
(
where
=
=
Ci
.
nsIBrowserDOMWindow
.
OPEN_PRINT_BROWSER
)
{
return
PrintUtils
.
startPrintWindow
(
"
window_print
"
params
.
openWindowInfo
.
parent
{
openWindowInfo
:
params
.
openWindowInfo
}
)
;
}
if
(
gSSB
.
canLoad
(
uri
)
)
{
return
gSSBBrowser
;
}
let
win
=
BrowserWindowTracker
.
getTopWindow
(
{
private
:
params
.
isPrivate
allowPopups
:
false
}
)
;
if
(
win
)
{
win
.
focus
(
)
;
return
win
.
browserDOMWindow
.
openURIInFrame
(
shouldOpen
?
uri
:
null
params
where
flags
name
)
;
}
return
null
;
}
createContentWindowInFrame
(
uri
params
where
flags
name
)
{
return
this
.
getContentWindowOrOpenURIInFrame
(
uri
params
where
flags
name
false
)
;
}
openURIInFrame
(
uri
params
where
flags
name
)
{
return
this
.
getContentWindowOrOpenURIInFrame
(
uri
params
where
flags
name
true
)
;
}
canClose
(
)
{
for
(
let
i
=
0
;
i
<
docShell
.
childCount
;
i
+
+
)
{
let
childShell
=
docShell
.
getChildAt
(
i
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
let
{
contentViewer
}
=
childShell
;
if
(
contentViewer
&
&
!
contentViewer
.
permitUnload
(
)
)
{
return
false
;
}
}
return
true
;
}
get
tabCount
(
)
{
return
1
;
}
}
BrowserDOMWindow
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIBrowserDOMWindow
"
]
)
;
window
.
addEventListener
(
"
DOMContentLoaded
"
init
true
)
;
