"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
SiteSpecificBrowserParent
"
]
;
const
{
BrowserWindowTracker
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
)
;
const
{
E10SUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
class
SiteSpecificBrowserParent
extends
JSWindowActorParent
{
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
RetargetOutOfScopeURIToBrowser
"
:
let
triggeringPrincipal
=
E10SUtils
.
deserializePrincipal
(
message
.
data
.
triggeringPrincipal
)
;
let
referrerInfo
=
E10SUtils
.
deserializeReferrerInfo
(
message
.
data
.
referrerInfo
)
;
let
csp
=
E10SUtils
.
deserializeCSP
(
message
.
data
.
csp
)
;
let
win
=
BrowserWindowTracker
.
getTopWindow
(
)
;
if
(
win
)
{
win
.
gBrowser
.
selectedTab
=
win
.
gBrowser
.
addTab
(
message
.
data
.
uri
{
triggeringPrincipal
csp
referrerInfo
}
)
;
}
else
{
let
sa
=
Cc
[
"
mozilla
.
org
/
array
;
1
"
]
.
createInstance
(
Ci
.
nsIMutableArray
)
;
let
wuri
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
wuri
.
data
=
message
.
data
.
uri
;
sa
.
appendElement
(
wuri
)
;
sa
.
appendElement
(
null
)
;
sa
.
appendElement
(
referrerInfo
)
;
sa
.
appendElement
(
null
)
;
sa
.
appendElement
(
null
)
;
sa
.
appendElement
(
null
)
;
sa
.
appendElement
(
null
)
;
sa
.
appendElement
(
null
)
;
sa
.
appendElement
(
triggeringPrincipal
)
;
sa
.
appendElement
(
null
)
;
sa
.
appendElement
(
csp
)
;
Services
.
ww
.
openWindow
(
null
AppConstants
.
BROWSER_CHROME_URL
null
"
chrome
dialog
=
no
all
"
sa
)
;
}
break
;
}
}
}
