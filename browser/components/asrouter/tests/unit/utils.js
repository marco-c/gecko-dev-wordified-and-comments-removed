export
class
GlobalOverrider
{
constructor
(
)
{
this
.
originalGlobals
=
new
Map
(
)
;
this
.
sandbox
=
sinon
.
createSandbox
(
)
;
}
_override
(
key
value
)
{
if
(
!
this
.
originalGlobals
.
has
(
key
)
)
{
this
.
originalGlobals
.
set
(
key
global
[
key
]
)
;
}
global
[
key
]
=
value
;
}
set
(
key
value
)
{
if
(
!
value
&
&
typeof
key
=
=
=
"
object
"
)
{
const
overrides
=
key
;
Object
.
keys
(
overrides
)
.
forEach
(
k
=
>
this
.
_override
(
k
overrides
[
k
]
)
)
;
}
else
{
this
.
_override
(
key
value
)
;
}
return
value
;
}
reset
(
)
{
this
.
sandbox
.
reset
(
)
;
}
restore
(
)
{
this
.
sandbox
.
restore
(
)
;
this
.
originalGlobals
.
forEach
(
(
value
key
)
=
>
{
global
[
key
]
=
value
;
}
)
;
}
}
export
const
FAKE_GLOBAL_PREFS
=
new
Map
(
)
;
export
class
FakensIPrefBranch
{
PREF_INVALID
=
"
invalid
"
;
PREF_INT
=
"
integer
"
;
PREF_BOOL
=
"
boolean
"
;
PREF_STRING
=
"
string
"
;
constructor
(
args
)
{
if
(
args
)
{
if
(
"
initHook
"
in
args
)
{
args
.
initHook
.
call
(
this
)
;
}
if
(
args
.
defaultBranch
)
{
this
.
prefs
=
new
Map
(
)
;
}
else
{
this
.
prefs
=
FAKE_GLOBAL_PREFS
;
}
}
else
{
this
.
prefs
=
FAKE_GLOBAL_PREFS
;
}
this
.
_prefBranch
=
{
}
;
this
.
observers
=
new
Map
(
)
;
}
addObserver
(
prefix
callback
)
{
this
.
observers
.
set
(
prefix
callback
)
;
}
removeObserver
(
prefix
callback
)
{
this
.
observers
.
delete
(
prefix
callback
)
;
}
setStringPref
(
prefName
value
)
{
this
.
set
(
prefName
value
)
;
}
getStringPref
(
prefName
defaultValue
)
{
return
this
.
get
(
prefName
defaultValue
)
;
}
setBoolPref
(
prefName
value
)
{
this
.
set
(
prefName
value
)
;
}
getBoolPref
(
prefName
)
{
return
this
.
get
(
prefName
)
;
}
setIntPref
(
prefName
value
)
{
this
.
set
(
prefName
value
)
;
}
getIntPref
(
prefName
)
{
return
this
.
get
(
prefName
)
;
}
setCharPref
(
prefName
value
)
{
this
.
set
(
prefName
value
)
;
}
getCharPref
(
prefName
)
{
return
this
.
get
(
prefName
)
;
}
clearUserPref
(
prefName
)
{
this
.
prefs
.
delete
(
prefName
)
;
}
get
(
prefName
defaultValue
)
{
let
value
=
this
.
prefs
.
get
(
prefName
)
;
return
typeof
value
=
=
=
"
undefined
"
?
defaultValue
:
value
;
}
getPrefType
(
prefName
)
{
let
value
=
this
.
prefs
.
get
(
prefName
)
;
switch
(
typeof
value
)
{
case
"
number
"
:
return
this
.
PREF_INT
;
case
"
boolean
"
:
return
this
.
PREF_BOOL
;
case
"
string
"
:
return
this
.
PREF_STRING
;
default
:
return
this
.
PREF_INVALID
;
}
}
set
(
prefName
value
)
{
this
.
prefs
.
set
(
prefName
value
)
;
let
observerPrefixes
=
[
.
.
.
this
.
observers
.
keys
(
)
]
.
filter
(
prefix
=
>
prefName
.
startsWith
(
prefix
)
)
;
for
(
let
observerPrefix
of
observerPrefixes
)
{
this
.
observers
.
get
(
observerPrefix
)
(
"
"
"
"
prefName
)
;
}
}
getChildList
(
prefix
)
{
return
[
.
.
.
this
.
prefs
.
keys
(
)
]
.
filter
(
prefName
=
>
prefName
.
startsWith
(
prefix
)
)
;
}
prefHasUserValue
(
prefName
)
{
return
this
.
prefs
.
has
(
prefName
)
;
}
prefIsLocked
(
_prefName
)
{
return
false
;
}
}
export
class
FakensIPrefService
extends
FakensIPrefBranch
{
getBranch
(
)
{
}
getDefaultBranch
(
_prefix
)
{
return
{
setBoolPref
(
)
{
}
setIntPref
(
)
{
}
setStringPref
(
)
{
}
clearUserPref
(
)
{
}
}
;
}
}
export
class
FakePrefs
extends
FakensIPrefBranch
{
observe
(
prefName
callback
)
{
super
.
addObserver
(
prefName
callback
)
;
}
ignore
(
prefName
callback
)
{
super
.
removeObserver
(
prefName
callback
)
;
}
observeBranch
(
_listener
)
{
}
ignoreBranch
(
_listener
)
{
}
set
(
prefName
value
)
{
this
.
prefs
.
set
(
prefName
value
)
;
if
(
this
.
observers
.
has
(
prefName
)
)
{
this
.
observers
.
get
(
prefName
)
(
value
)
;
}
}
}
export
class
FakeConsoleAPI
{
static
LOG_LEVELS
=
{
all
:
Number
.
MIN_VALUE
debug
:
2
log
:
3
info
:
3
clear
:
3
trace
:
3
timeEnd
:
3
time
:
3
assert
:
3
group
:
3
groupEnd
:
3
profile
:
3
profileEnd
:
3
dir
:
3
dirxml
:
3
warn
:
4
error
:
5
off
:
Number
.
MAX_VALUE
}
;
constructor
(
{
prefix
=
"
"
maxLogLevel
=
"
all
"
}
=
{
}
)
{
this
.
prefix
=
prefix
;
this
.
prefixStr
=
prefix
?
{
prefix
}
:
:
"
"
;
this
.
maxLogLevel
=
maxLogLevel
;
for
(
const
level
of
Object
.
keys
(
FakeConsoleAPI
.
LOG_LEVELS
)
)
{
if
(
typeof
console
[
level
]
=
=
=
"
function
"
)
{
this
[
level
]
=
this
.
shouldLog
(
level
)
?
this
.
_log
.
bind
(
this
level
)
:
(
)
=
>
{
}
;
}
}
}
shouldLog
(
level
)
{
return
(
FakeConsoleAPI
.
LOG_LEVELS
[
this
.
maxLogLevel
]
<
=
FakeConsoleAPI
.
LOG_LEVELS
[
level
]
)
;
}
_log
(
level
.
.
.
args
)
{
console
[
level
]
(
this
.
prefixStr
.
.
.
args
)
;
}
}
export
function
FakeNimbusFeature
(
)
{
return
{
getEnrollmentMetadata
(
)
{
}
getVariable
(
)
{
}
getAllVariables
(
)
{
}
onUpdate
(
)
{
}
offUpdate
(
)
{
}
}
;
}
export
function
FakeNimbusFeatures
(
featureIds
)
{
return
Object
.
fromEntries
(
featureIds
.
map
(
featureId
=
>
[
featureId
FakeNimbusFeature
(
)
]
)
)
;
}
export
class
FakeLogger
extends
FakeConsoleAPI
{
constructor
(
)
{
super
(
{
maxLogLevel
:
"
off
"
}
)
;
}
}
