function
clearNotifications
(
)
{
for
(
let
notification
of
PopupNotifications
.
_currentNotifications
)
{
notification
.
remove
(
)
;
}
Assert
.
equal
(
PopupNotifications
.
_currentNotifications
.
length
0
"
Should
have
removed
the
notification
"
)
;
}
add_setup
(
async
function
(
)
{
const
{
_fetchLatestAddonVersion
}
=
CFRPageActions
;
CFRPageActions
.
_fetchLatestAddonVersion
=
(
)
=
>
"
http
:
/
/
example
.
com
"
;
Services
.
fog
.
testResetFOG
(
)
;
registerCleanupFunction
(
(
)
=
>
{
CFRPageActions
.
_fetchLatestAddonVersion
=
_fetchLatestAddonVersion
;
clearNotifications
(
)
;
CFRPageActions
.
clearRecommendations
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_cfr_notification_keyboard
(
)
{
const
browser
=
gBrowser
.
selectedBrowser
;
BrowserTestUtils
.
startLoadingURIString
(
browser
"
http
:
/
/
example
.
com
/
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
"
http
:
/
/
example
.
com
/
"
)
;
clearNotifications
(
)
;
let
recommendation
=
{
template
:
"
cfr_doorhanger
"
groups
:
[
"
mochitest
-
group
"
]
content
:
{
layout
:
"
addon_recommendation
"
category
:
"
cfrAddons
"
anchor_id
:
"
page
-
action
-
buttons
"
icon_class
:
"
cfr
-
doorhanger
-
medium
-
icon
"
skip_address_bar_notifier
:
false
heading_text
:
"
Sample
Mochitest
"
icon
:
"
chrome
:
/
/
activity
-
stream
/
content
/
data
/
content
/
assets
/
glyph
-
webextension
-
16
.
svg
"
icon_dark_theme
:
"
chrome
:
/
/
activity
-
stream
/
content
/
data
/
content
/
assets
/
glyph
-
webextension
-
16
.
svg
"
info_icon
:
{
label
:
{
attributes
:
{
tooltiptext
:
"
Why
am
I
seeing
this
"
}
}
sumo_path
:
"
extensionrecommendations
"
}
addon
:
{
id
:
"
addon
-
id
"
title
:
"
Addon
name
"
icon
:
"
chrome
:
/
/
browser
/
skin
/
addons
/
addon
-
install
-
downloading
.
svg
"
author
:
"
Author
name
"
amo_url
:
"
https
:
/
/
example
.
com
"
rating
:
"
4
.
5
"
users
:
"
1
.
1M
"
}
text
:
"
Mochitest
"
buttons
:
{
primary
:
{
label
:
{
value
:
"
OK
"
attributes
:
{
accesskey
:
"
O
"
}
}
action
:
{
type
:
"
CANCEL
"
data
:
{
}
}
}
secondary
:
[
{
label
:
{
value
:
"
Cancel
"
attributes
:
{
accesskey
:
"
C
"
}
}
action
:
{
type
:
"
CANCEL
"
}
}
]
}
}
}
;
recommendation
.
content
.
notification_text
=
new
String
(
"
Mochitest
"
)
;
recommendation
.
content
.
notification_text
.
attributes
=
{
tooltiptext
:
"
Mochitest
tooltip
"
"
a11y
-
announcement
"
:
"
Mochitest
announcement
"
}
;
const
response
=
await
CFRPageActions
.
addRecommendation
(
gBrowser
.
selectedBrowser
"
example
.
com
"
recommendation
ASRouter
.
dispatchCFRAction
)
;
Assert
.
ok
(
response
"
Should
return
true
if
addRecommendation
checks
were
successful
"
)
;
const
button
=
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
"
)
;
button
.
setAttribute
(
"
tabindex
"
"
-
1
"
)
;
let
buttonFocused
=
BrowserTestUtils
.
waitForEvent
(
button
"
focus
"
)
;
button
.
focus
(
)
;
await
buttonFocused
;
Assert
.
ok
(
true
"
Focus
page
action
button
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
focused
;
Assert
.
ok
(
true
"
Focus
inside
panel
after
button
pressed
"
)
;
button
.
removeAttribute
(
"
tabindex
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
hidden
;
Assert
.
ok
(
true
"
Panel
hidden
after
Escape
pressed
"
)
;
const
showPanel
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
"
)
.
click
(
)
;
await
showPanel
;
const
hidePanel
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphidden
"
)
;
document
.
getElementById
(
"
contextual
-
feature
-
recommendation
-
notification
"
)
.
button
.
click
(
)
;
await
hidePanel
;
Services
.
fog
.
testResetFOG
(
)
;
}
)
;
