"
use
strict
"
;
const
{
ASRouter
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
asrouter
/
ASRouter
.
sys
.
mjs
"
)
;
const
{
ASRouterTargeting
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
asrouter
/
ASRouterTargeting
.
sys
.
mjs
"
)
;
add_task
(
async
function
test_shouldShowMessagesToProfile
(
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
Services
.
prefs
.
setBoolPref
(
"
messaging
-
system
.
profile
.
singleProfileMessaging
.
disable
"
false
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
messaging
-
system
.
profile
.
singleProfileMessaging
.
disable
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
profiles
.
enabled
"
false
)
;
Assert
.
equal
(
ASRouter
.
shouldShowMessagesToProfile
(
)
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
profiles
.
enabled
"
true
)
;
Assert
.
equal
(
ASRouter
.
shouldShowMessagesToProfile
(
)
true
)
;
await
initSelectableProfileService
(
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
profiles
.
created
"
true
)
;
Services
.
prefs
.
setStringPref
(
"
messaging
-
system
.
profile
.
messagingProfileId
"
"
2
"
)
;
sandbox
.
replaceGetter
(
ASRouterTargeting
.
Environment
"
currentProfileId
"
function
(
)
{
return
"
1
"
;
}
)
;
Assert
.
equal
(
ASRouter
.
shouldShowMessagesToProfile
(
)
false
)
;
Services
.
prefs
.
setStringPref
(
"
messaging
-
system
.
profile
.
messagingProfileId
"
"
1
"
)
;
Assert
.
equal
(
ASRouter
.
shouldShowMessagesToProfile
(
)
true
)
;
}
)
;
