"
use
strict
"
;
const
{
AddonWatcher
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AddonWatcher
.
jsm
"
{
}
)
;
const
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
function
setup
(
)
{
requestLongerTimeout
(
10
)
;
info
(
"
Checking
for
mozscreenshots
extension
"
)
;
return
new
Promise
(
(
resolve
)
=
>
{
AddonManager
.
getAddonByID
(
"
mozscreenshots
mozilla
.
org
"
function
(
aAddon
)
{
isnot
(
aAddon
null
"
The
mozscreenshots
extension
should
be
installed
"
)
;
AddonWatcher
.
ignoreAddonPermanently
(
aAddon
.
id
)
;
resolve
(
)
;
}
)
;
}
)
;
}
function
shouldCapture
(
)
{
let
capture
=
AppConstants
.
MOZ_UPDATE_CHANNEL
=
=
"
nightly
"
|
|
(
AppConstants
.
SOURCE_REVISION_URL
.
includes
(
"
/
try
/
rev
/
"
)
&
&
env
.
get
(
"
MOZSCREENSHOTS_SETS
"
)
)
|
|
AppConstants
.
SOURCE_REVISION_URL
=
=
"
"
;
if
(
!
capture
)
{
ok
(
true
"
Capturing
is
disabled
for
this
MOZ_UPDATE_CHANNEL
or
REPO
"
)
;
}
return
capture
;
}
add_task
(
setup
)
;
