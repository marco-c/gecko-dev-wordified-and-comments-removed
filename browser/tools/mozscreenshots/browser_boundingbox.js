"
use
strict
"
;
add_task
(
async
function
(
)
{
const
scale
=
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDocShell
)
.
QueryInterface
(
Ci
.
nsIBaseWindow
)
.
devicePixelsPerDesktopPixel
;
let
rect
=
TestRunner
.
_findBoundingBox
(
[
"
#
tabbrowser
-
tabs
"
]
)
;
let
element
=
document
.
querySelector
(
"
#
tabbrowser
-
tabs
"
)
;
let
tabBar
=
element
.
ownerDocument
.
getBoxObjectFor
(
element
)
;
let
expectedLeft
=
scale
*
(
tabBar
.
screenX
-
TestRunner
.
croppingPadding
)
;
let
expectedTop
=
scale
*
(
tabBar
.
screenY
-
TestRunner
.
croppingPadding
)
;
let
expectedRight
=
scale
*
(
tabBar
.
width
+
TestRunner
.
croppingPadding
*
2
)
+
expectedLeft
;
let
expectedBottom
=
scale
*
(
tabBar
.
height
+
TestRunner
.
croppingPadding
*
2
)
+
expectedTop
;
let
windowLeft
=
window
.
screenX
*
scale
;
let
windowTop
=
window
.
screenY
*
scale
;
let
windowRight
=
window
.
outerWidth
*
scale
+
windowLeft
;
let
windowBottom
=
window
.
outerHeight
*
scale
+
windowTop
;
expectedLeft
=
Math
.
max
(
expectedLeft
windowLeft
)
;
expectedTop
=
Math
.
max
(
expectedTop
windowTop
)
;
expectedRight
=
Math
.
min
(
expectedRight
windowRight
)
;
expectedBottom
=
Math
.
min
(
expectedBottom
windowBottom
)
;
is
(
rect
.
width
expectedRight
-
expectedLeft
"
Checking
_findBoundingBox
width
calculation
"
)
;
is
(
rect
.
height
expectedBottom
-
expectedTop
"
Checking
_findBoundingBox
height
caclulation
"
)
;
rect
=
TestRunner
.
_findBoundingBox
(
[
"
#
forward
-
button
"
"
#
TabsToolbar
"
]
)
;
element
=
document
.
querySelector
(
"
#
TabsToolbar
"
)
;
let
tabToolbar
=
element
.
ownerDocument
.
getBoxObjectFor
(
element
)
;
element
=
document
.
querySelector
(
"
#
forward
-
button
"
)
;
let
fButton
=
element
.
ownerDocument
.
getBoxObjectFor
(
element
)
;
expectedLeft
=
scale
*
(
Math
.
min
(
tabToolbar
.
screenX
fButton
.
screenX
)
-
TestRunner
.
croppingPadding
)
;
expectedTop
=
scale
*
(
Math
.
min
(
tabToolbar
.
screenY
fButton
.
screenY
)
-
TestRunner
.
croppingPadding
)
;
expectedRight
=
scale
*
(
Math
.
max
(
tabToolbar
.
width
+
tabToolbar
.
screenX
fButton
.
width
+
fButton
.
screenX
)
+
TestRunner
.
croppingPadding
)
;
expectedBottom
=
scale
*
(
Math
.
max
(
tabToolbar
.
height
+
tabToolbar
.
screenY
fButton
.
height
+
fButton
.
screenY
)
+
TestRunner
.
croppingPadding
)
;
expectedLeft
=
Math
.
max
(
expectedLeft
windowLeft
)
;
expectedTop
=
Math
.
max
(
expectedTop
windowTop
)
;
expectedRight
=
Math
.
min
(
expectedRight
windowRight
)
;
expectedBottom
=
Math
.
min
(
expectedBottom
windowBottom
)
;
is
(
rect
.
width
expectedRight
-
expectedLeft
"
Checking
_findBoundingBox
union
width
calculation
"
)
;
is
(
rect
.
height
expectedBottom
-
expectedTop
"
Checking
_findBoundingBox
union
height
calculation
"
)
;
Assert
.
throws
(
(
)
=
>
{
TestRunner
.
_findBoundingBox
(
[
"
#
does_not_exist
"
]
)
;
}
"
No
element
for
'
#
does_not_exist
'
found
.
"
"
Checking
that
nonexistent
selectors
throws
an
exception
"
)
;
Assert
.
throws
(
(
)
=
>
{
rect
=
TestRunner
.
_findBoundingBox
(
[
]
)
;
}
"
No
selectors
specified
.
"
"
Checking
that
no
selectors
throws
an
exception
"
)
;
}
)
;
