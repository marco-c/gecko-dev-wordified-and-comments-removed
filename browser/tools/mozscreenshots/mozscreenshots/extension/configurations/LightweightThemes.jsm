"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
LightweightThemes
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LightweightThemeManager
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
this
.
LightweightThemes
=
{
init
(
libDir
)
{
let
blackImage
=
libDir
.
clone
(
)
;
blackImage
.
append
(
"
black_theme
.
png
"
)
;
this
.
_blackImageURL
=
Services
.
io
.
newFileURI
(
blackImage
)
.
spec
;
let
whiteImage
=
libDir
.
clone
(
)
;
whiteImage
.
append
(
"
white_theme
.
png
"
)
;
this
.
_whiteImageURL
=
Services
.
io
.
newFileURI
(
whiteImage
)
.
spec
;
}
configurations
:
{
noLWT
:
{
selectors
:
[
"
#
navigator
-
toolbox
"
]
async
applyConfig
(
)
{
LightweightThemeManager
.
currentTheme
=
null
;
}
}
darkLWT
:
{
selectors
:
[
"
#
navigator
-
toolbox
"
]
applyConfig
(
)
{
LightweightThemeManager
.
setLocalTheme
(
{
id
:
"
black
"
name
:
"
black
"
headerURL
:
LightweightThemes
.
_blackImageURL
textcolor
:
"
#
eeeeee
"
accentcolor
:
"
#
111111
"
}
)
;
return
new
Promise
(
resolve
=
>
{
setTimeout
(
(
)
=
>
{
resolve
(
"
darkLWT
"
)
;
}
500
)
;
}
)
;
}
}
lightLWT
:
{
selectors
:
[
"
#
navigator
-
toolbox
"
]
applyConfig
(
)
{
LightweightThemeManager
.
setLocalTheme
(
{
id
:
"
white
"
name
:
"
white
"
headerURL
:
LightweightThemes
.
_whiteImageURL
textcolor
:
"
#
111111
"
accentcolor
:
"
#
eeeeee
"
}
)
;
return
new
Promise
(
resolve
=
>
{
setTimeout
(
(
)
=
>
{
resolve
(
"
lightLWT
"
)
;
}
500
)
;
}
)
;
}
}
compactLight
:
{
selectors
:
[
"
#
navigator
-
toolbox
"
]
applyConfig
(
)
{
LightweightThemeManager
.
currentTheme
=
LightweightThemeManager
.
getUsedTheme
(
"
firefox
-
compact
-
light
mozilla
.
org
"
)
;
}
}
compactDark
:
{
selectors
:
[
"
#
navigator
-
toolbox
"
]
applyConfig
(
)
{
LightweightThemeManager
.
currentTheme
=
LightweightThemeManager
.
getUsedTheme
(
"
firefox
-
compact
-
dark
mozilla
.
org
"
)
;
}
}
}
}
;
