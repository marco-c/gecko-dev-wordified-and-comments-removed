"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
WindowSize
"
]
;
const
{
setTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
const
{
BrowserTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
BrowserTestUtils
.
jsm
"
)
;
var
WindowSize
=
{
init
(
libDir
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
fullscreen
.
autohide
"
false
)
;
}
configurations
:
{
maximized
:
{
selectors
:
[
"
:
root
"
]
async
applyConfig
(
)
{
let
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
await
toggleFullScreen
(
browserWindow
false
)
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
setTimeout
(
function
waitToLeaveFS
(
)
{
browserWindow
.
maximize
(
)
;
resolve
(
)
;
}
5000
)
;
}
)
;
}
}
normal
:
{
selectors
:
[
"
:
root
"
]
async
applyConfig
(
)
{
let
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
await
toggleFullScreen
(
browserWindow
false
)
;
browserWindow
.
restore
(
)
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
setTimeout
(
resolve
5000
)
;
}
)
;
}
}
fullScreen
:
{
selectors
:
[
"
:
root
"
]
async
applyConfig
(
)
{
let
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
await
toggleFullScreen
(
browserWindow
true
)
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
setTimeout
(
resolve
5000
)
;
}
)
;
}
}
}
}
;
function
toggleFullScreen
(
browserWindow
wantsFS
)
{
browserWindow
.
fullScreen
=
wantsFS
;
return
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
(
wantsFS
=
=
browserWindow
.
document
.
documentElement
.
hasAttribute
(
"
inFullscreen
"
)
)
;
}
"
waiting
for
inFullscreen
change
"
)
;
}
