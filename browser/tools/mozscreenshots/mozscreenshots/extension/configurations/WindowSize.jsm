"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
WindowSize
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
this
.
WindowSize
=
{
init
(
libDir
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
fullscreen
.
autohide
"
false
)
;
}
configurations
:
{
maximized
:
{
applyConfig
:
Task
.
async
(
function
*
(
)
{
let
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
browserWindow
.
fullScreen
=
false
;
yield
new
Promise
(
(
resolve
reject
)
=
>
{
setTimeout
(
function
waitToLeaveFS
(
)
{
browserWindow
.
maximize
(
)
;
resolve
(
)
;
}
Services
.
appinfo
.
OS
=
=
"
Darwin
"
?
1500
:
0
)
;
}
)
;
}
)
}
normal
:
{
applyConfig
:
Task
.
async
(
(
)
=
>
{
let
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
browserWindow
.
fullScreen
=
false
;
browserWindow
.
restore
(
)
;
}
)
}
fullScreen
:
{
applyConfig
:
Task
.
async
(
function
*
(
)
{
let
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
browserWindow
.
fullScreen
=
true
;
yield
new
Promise
(
(
resolve
reject
)
=
>
{
setTimeout
(
function
waitAfterEnteringFS
(
)
{
resolve
(
)
;
}
Services
.
appinfo
.
OS
=
=
"
Darwin
"
?
1500
:
0
)
;
}
)
;
}
)
}
}
}
;
