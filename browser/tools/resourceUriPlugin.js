const
path
=
require
(
"
path
"
)
;
module
.
exports
=
{
ResourceUriPlugin
:
class
ResourceUriPlugin
{
#
resourcePathRegExes
;
constructor
(
{
resourcePathRegExes
}
)
{
this
.
#
resourcePathRegExes
=
resourcePathRegExes
;
}
apply
(
compiler
)
{
compiler
.
hooks
.
compilation
.
tap
(
"
ResourceUriPlugin
"
(
compilation
{
normalModuleFactory
}
)
=
>
{
normalModuleFactory
.
hooks
.
resolveForScheme
.
for
(
"
resource
"
)
.
tap
(
"
ResourceUriPlugin
"
resourceData
=
>
{
const
url
=
new
URL
(
resourceData
.
resource
)
;
for
(
let
[
regex
replacement
]
of
this
.
#
resourcePathRegExes
)
{
if
(
!
url
.
href
.
match
(
regex
)
)
{
continue
;
}
const
pathname
=
path
.
join
(
url
.
href
.
replace
(
regex
replacement
)
)
;
resourceData
.
path
=
pathname
;
resourceData
.
query
=
url
.
search
;
resourceData
.
fragment
=
url
.
hash
;
resourceData
.
resource
=
pathname
+
url
.
search
+
url
.
hash
;
return
true
;
}
return
true
;
}
)
;
}
)
;
}
}
}
;
