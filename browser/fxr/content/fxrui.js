let
homeURL
=
"
https
:
/
/
www
.
mozilla
.
org
/
en
-
US
/
"
;
let
browser
=
null
;
let
urlInput
=
null
;
let
secureIcon
=
null
;
let
backButton
=
null
;
let
forwardButton
=
null
;
let
refreshButton
=
null
;
let
stopButton
=
null
;
let
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
window
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
urlInput
=
document
.
getElementById
(
"
eUrlInput
"
)
;
secureIcon
=
document
.
getElementById
(
"
eUrlSecure
"
)
;
backButton
=
document
.
getElementById
(
"
eBack
"
)
;
forwardButton
=
document
.
getElementById
(
"
eForward
"
)
;
refreshButton
=
document
.
getElementById
(
"
eRefresh
"
)
;
stopButton
=
document
.
getElementById
(
"
eStop
"
)
;
setupBrowser
(
)
;
setupNavButtons
(
)
;
setupUrlBar
(
)
;
}
{
once
:
true
}
)
;
function
setupBrowser
(
)
{
if
(
document
.
createXULElement
)
{
browser
=
document
.
createXULElement
(
"
browser
"
)
;
browser
.
setAttribute
(
"
type
"
"
content
"
)
;
browser
.
setAttribute
(
"
remote
"
"
true
"
)
;
document
.
getElementById
(
"
eBrowserContainer
"
)
.
appendChild
(
browser
)
;
urlInput
.
value
=
homeURL
;
browser
.
loadURI
(
homeURL
)
;
browser
.
addProgressListener
(
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIWebProgressListener
Ci
.
nsISupportsWeakReference
]
)
onLocationChange
(
aWebProgress
aRequest
aLocation
aFlags
)
{
urlInput
.
value
=
browser
.
currentURI
.
spec
;
backButton
.
disabled
=
!
browser
.
canGoBack
;
forwardButton
.
disabled
=
!
browser
.
canGoForward
;
}
onStateChange
(
aWebProgress
aRequest
aStateFlags
aStatus
)
{
if
(
aStateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
)
{
refreshButton
.
disabled
=
false
;
stopButton
.
disabled
=
true
;
}
else
{
refreshButton
.
disabled
=
true
;
stopButton
.
disabled
=
false
;
}
}
onSecurityChange
(
aWebProgress
aRequest
aState
)
{
if
(
aState
&
Ci
.
nsIWebProgressListener
.
STATE_IS_SECURE
)
{
secureIcon
.
style
.
visibility
=
"
visible
"
;
}
else
{
secureIcon
.
style
.
visibility
=
"
hidden
"
;
}
}
}
Ci
.
nsIWebProgress
.
NOTIFY_LOCATION
|
Ci
.
nsIWebProgress
.
NOTIFY_SECURITY
|
Ci
.
nsIWebProgress
.
NOTIFY_STATE_REQUEST
)
;
}
}
function
setupNavButtons
(
)
{
let
aryNavButtons
=
[
"
eBack
"
"
eForward
"
"
eRefresh
"
"
eStop
"
"
eHome
"
]
;
function
navButtonHandler
(
e
)
{
if
(
!
this
.
disabled
)
{
switch
(
this
.
id
)
{
case
"
eBack
"
:
browser
.
goBack
(
)
;
break
;
case
"
eForward
"
:
browser
.
goForward
(
)
;
break
;
case
"
eRefresh
"
:
browser
.
reload
(
)
;
break
;
case
"
eStop
"
:
browser
.
stop
(
)
;
break
;
case
"
eHome
"
:
browser
.
loadURI
(
homeURL
)
;
break
;
}
}
}
for
(
let
btnName
of
aryNavButtons
)
{
let
elem
=
document
.
getElementById
(
btnName
)
;
elem
.
addEventListener
(
"
click
"
navButtonHandler
)
;
}
}
function
setupUrlBar
(
)
{
urlInput
.
addEventListener
(
"
keypress
"
async
function
(
e
)
{
if
(
e
.
key
=
=
"
Enter
"
)
{
await
Services
.
search
.
init
(
)
;
let
valueToFixUp
=
urlInput
.
value
;
let
flags
=
Services
.
uriFixup
.
FIXUP_FLAG_FIX_SCHEME_TYPOS
|
Services
.
uriFixup
.
FIXUP_FLAG_ALLOW_KEYWORD_LOOKUP
;
let
uriToLoad
=
Services
.
uriFixup
.
createFixupURI
(
valueToFixUp
flags
)
;
browser
.
loadURI
(
uriToLoad
.
spec
)
;
browser
.
focus
(
)
;
}
}
)
;
urlInput
.
addEventListener
(
"
focus
"
function
(
)
{
urlInput
.
select
(
)
;
}
)
;
}
