class
FxrPermissionPromptPrototype
{
constructor
(
aRequest
aBrowser
aCallback
)
{
this
.
request
=
aRequest
;
this
.
targetBrowser
=
aBrowser
;
this
.
responseCallback
=
aCallback
;
}
showPrompt
(
)
{
this
.
defaultDeny
(
)
;
}
defaultDeny
(
)
{
this
.
handleResponse
(
false
)
;
}
handleResponse
(
allowed
)
{
if
(
allowed
)
{
this
.
allow
(
)
;
}
else
{
this
.
deny
(
)
;
}
this
.
responseCallback
(
)
;
}
}
class
FxrWebRTCPrompt
extends
FxrPermissionPromptPrototype
{
showPrompt
(
)
{
for
(
let
typeName
of
this
.
request
.
requestTypes
)
{
if
(
typeName
!
=
=
"
Microphone
"
&
&
typeName
!
=
=
"
Camera
"
)
{
this
.
defaultDeny
(
)
;
return
;
}
}
super
.
showPrompt
(
)
;
}
allow
(
)
{
let
{
audioDevices
videoDevices
}
=
this
.
request
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
this
.
request
.
origin
)
;
let
allowedDevices
=
[
]
;
if
(
audioDevices
.
length
)
{
allowedDevices
.
push
(
audioDevices
[
0
]
.
deviceIndex
)
;
}
if
(
videoDevices
.
length
)
{
Services
.
perms
.
addFromPrincipal
(
principal
"
MediaManagerVideo
"
Services
.
perms
.
ALLOW_ACTION
Services
.
perms
.
EXPIRE_SESSION
)
;
allowedDevices
.
push
(
videoDevices
[
0
]
.
deviceIndex
)
;
}
this
.
targetBrowser
.
messageManager
.
sendAsyncMessage
(
"
webrtc
:
Allow
"
{
callID
:
this
.
request
.
callID
windowID
:
this
.
request
.
windowID
devices
:
allowedDevices
}
)
;
}
deny
(
)
{
this
.
targetBrowser
.
messageManager
.
sendAsyncMessage
(
"
webrtc
:
Deny
"
{
callID
:
this
.
request
.
callID
windowID
:
this
.
request
.
windowID
}
)
;
}
}
class
FxrContentPrompt
extends
FxrPermissionPromptPrototype
{
showPrompt
(
)
{
let
types
=
this
.
request
.
types
.
QueryInterface
(
Ci
.
nsIArray
)
;
if
(
types
.
length
!
=
1
)
{
this
.
defaultDeny
(
)
;
return
;
}
let
type
=
types
.
queryElementAt
(
0
Ci
.
nsIContentPermissionType
)
.
type
;
if
(
type
!
=
=
"
geolocation
"
)
{
this
.
defaultDeny
(
)
;
return
;
}
type
=
"
Location
"
;
super
.
showPrompt
(
)
;
}
allow
(
)
{
this
.
request
.
allow
(
)
;
}
deny
(
)
{
this
.
request
.
cancel
(
)
;
}
}
