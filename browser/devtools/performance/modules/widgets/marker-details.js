"
use
strict
"
;
const
{
Cc
Ci
Cu
Cr
}
=
require
(
"
chrome
"
)
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
toolkit
/
event
-
emitter
"
)
;
loader
.
lazyRequireGetter
(
this
"
MarkerUtils
"
"
devtools
/
performance
/
marker
-
utils
"
)
;
function
MarkerDetails
(
parent
splitter
)
{
EventEmitter
.
decorate
(
this
)
;
this
.
_document
=
parent
.
ownerDocument
;
this
.
_parent
=
parent
;
this
.
_splitter
=
splitter
;
this
.
_onClick
=
this
.
_onClick
.
bind
(
this
)
;
this
.
_onSplitterMouseUp
=
this
.
_onSplitterMouseUp
.
bind
(
this
)
;
this
.
_parent
.
addEventListener
(
"
click
"
this
.
_onClick
)
;
this
.
_splitter
.
addEventListener
(
"
mouseup
"
this
.
_onSplitterMouseUp
)
;
this
.
hidden
=
true
;
}
MarkerDetails
.
prototype
=
{
set
width
(
value
)
{
this
.
_parent
.
setAttribute
(
"
width
"
value
)
;
}
get
width
(
)
{
return
+
this
.
_parent
.
getAttribute
(
"
width
"
)
;
}
set
hidden
(
value
)
{
if
(
this
.
_parent
.
hidden
!
=
value
)
{
this
.
_parent
.
hidden
=
value
;
this
.
emit
(
"
resize
"
)
;
}
}
get
hidden
(
)
{
return
this
.
_parent
.
hidden
;
}
empty
:
function
(
)
{
this
.
_parent
.
innerHTML
=
"
"
;
}
render
:
function
(
options
)
{
let
{
marker
frames
}
=
options
;
this
.
empty
(
)
;
let
elements
=
[
]
;
elements
.
push
(
MarkerUtils
.
DOM
.
buildTitle
(
this
.
_document
marker
)
)
;
elements
.
push
(
MarkerUtils
.
DOM
.
buildDuration
(
this
.
_document
marker
)
)
;
MarkerUtils
.
DOM
.
buildFields
(
this
.
_document
marker
)
.
forEach
(
f
=
>
elements
.
push
(
f
)
)
;
MarkerUtils
.
DOM
.
buildCustom
(
this
.
_document
marker
options
)
.
forEach
(
f
=
>
elements
.
push
(
f
)
)
;
if
(
marker
.
stack
)
{
let
type
=
marker
.
endStack
?
"
startStack
"
:
"
stack
"
;
elements
.
push
(
MarkerUtils
.
DOM
.
buildStackTrace
(
this
.
_document
{
frameIndex
:
marker
.
stack
frames
type
}
)
)
;
}
if
(
marker
.
endStack
)
{
let
type
=
"
endStack
"
;
elements
.
push
(
MarkerUtils
.
DOM
.
buildStackTrace
(
this
.
_document
{
frameIndex
:
marker
.
endStack
frames
type
}
)
)
;
}
elements
.
forEach
(
el
=
>
this
.
_parent
.
appendChild
(
el
)
)
;
}
_onClick
:
function
(
e
)
{
let
data
=
findActionFromEvent
(
e
.
target
this
.
_parent
)
;
if
(
!
data
)
{
return
;
}
this
.
emit
(
data
.
action
data
)
;
}
_onSplitterMouseUp
:
function
(
)
{
this
.
emit
(
"
resize
"
)
;
}
}
;
function
findActionFromEvent
(
target
container
)
{
let
el
=
target
;
let
action
;
while
(
el
!
=
=
container
)
{
if
(
action
=
el
.
getAttribute
(
"
data
-
action
"
)
)
{
return
JSON
.
parse
(
action
)
;
}
el
=
el
.
parentNode
;
}
return
null
;
}
exports
.
MarkerDetails
=
MarkerDetails
;
