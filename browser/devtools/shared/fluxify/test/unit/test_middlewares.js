loadSubScript
(
getFileUrl
(
'
stores
-
for
-
testing
.
js
'
)
)
;
const
constants
=
NumberStore
.
constants
;
const
stores
=
{
number
:
NumberStore
}
;
function
run_test
(
)
{
run_next_test
(
)
;
}
add_task
(
function
*
testThunkDispatch
(
)
{
do_print
(
"
Testing
thunk
dispatch
"
)
;
function
addNumberLater
(
num
)
{
return
dispatch
=
>
{
waitForTick
(
)
.
then
(
(
)
=
>
{
dispatch
(
{
type
:
constants
.
ADD_NUMBER
value
:
num
}
)
;
}
)
;
}
;
}
function
addNumber
(
num
)
{
return
(
dispatch
getState
)
=
>
{
dispatch
(
{
type
:
constants
.
ADD_NUMBER
value
:
getState
(
)
.
number
>
10
?
(
num
*
2
)
:
num
}
)
;
}
;
}
const
dispatcher
=
createDispatcher
(
stores
)
;
equal
(
dispatcher
.
getState
(
)
.
number
1
)
;
dispatcher
.
dispatch
(
addNumberLater
(
5
)
)
;
equal
(
dispatcher
.
getState
(
)
.
number
1
"
state
should
not
have
changed
"
)
;
yield
waitForTick
(
)
;
equal
(
dispatcher
.
getState
(
)
.
number
6
"
state
should
have
changed
"
)
;
dispatcher
.
dispatch
(
addNumber
(
5
)
)
;
equal
(
dispatcher
.
getState
(
)
.
number
11
)
;
dispatcher
.
dispatch
(
addNumber
(
2
)
)
;
equal
(
dispatcher
.
getState
(
)
.
number
15
)
;
}
)
;
add_task
(
function
*
testWaitUntilService
(
)
{
do_print
(
"
Testing
waitUntil
service
"
)
;
function
addWhenDoubled
(
num
)
{
return
{
type
:
services
.
WAIT_UNTIL
predicate
:
action
=
>
action
.
type
=
=
=
constants
.
DOUBLE_NUMBER
run
:
(
dispatch
getState
action
)
=
>
{
ok
(
action
.
type
constants
.
DOUBLE_NUMBER
)
;
ok
(
getState
(
)
10
)
;
dispatch
(
{
type
:
constants
.
ADD_NUMBER
value
:
2
}
)
;
}
}
;
}
function
addWhenGreaterThan
(
threshold
num
)
{
return
(
dispatch
getState
)
=
>
{
dispatch
(
{
type
:
services
.
WAIT_UNTIL
predicate
:
(
)
=
>
getState
(
)
.
number
>
threshold
run
:
(
)
=
>
{
dispatch
(
{
type
:
constants
.
ADD_NUMBER
value
:
num
}
)
;
}
}
)
;
}
}
const
dispatcher
=
createDispatcher
(
stores
)
;
equal
(
dispatcher
.
getState
(
)
.
number
1
)
;
dispatcher
.
dispatch
(
addWhenDoubled
(
2
)
)
;
equal
(
dispatcher
.
getState
(
)
.
number
1
)
;
dispatcher
.
dispatch
(
{
type
:
constants
.
DOUBLE_NUMBER
}
)
;
equal
(
dispatcher
.
getState
(
)
.
number
4
)
;
dispatcher
.
dispatch
(
addWhenGreaterThan
(
10
5
)
)
;
equal
(
dispatcher
.
getState
(
)
.
number
4
)
;
dispatcher
.
dispatch
(
{
type
:
constants
.
ADD_NUMBER
value
:
10
}
)
;
equal
(
dispatcher
.
getState
(
)
.
number
19
)
;
}
)
;
