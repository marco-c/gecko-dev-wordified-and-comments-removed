loadSubScript
(
getFileUrl
(
"
stores
-
for
-
testing
.
js
"
)
)
;
const
constants
=
Object
.
assign
(
{
}
NumberStore
.
constants
ItemStore
.
constants
)
;
const
stores
=
{
number
:
NumberStore
items
:
ItemStore
}
;
function
addNumber
(
num
)
{
return
{
type
:
constants
.
ADD_NUMBER
value
:
num
}
}
function
addItem
(
item
)
{
return
{
type
:
constants
.
ADD_ITEM
item
:
item
}
;
}
function
run_test
(
)
{
testInitialValue
(
)
;
testDispatch
(
)
;
testEmitChange
(
)
;
run_next_test
(
)
;
}
function
testInitialValue
(
)
{
do_print
(
"
Testing
initial
value
"
)
;
const
dispatcher
=
createDispatcher
(
stores
)
;
equal
(
dispatcher
.
getState
(
)
.
number
1
)
;
}
function
testDispatch
(
)
{
do_print
(
"
Testing
dispatch
"
)
;
const
dispatcher
=
createDispatcher
(
stores
)
;
dispatcher
.
dispatch
(
addNumber
(
5
)
)
;
equal
(
dispatcher
.
getState
(
)
.
number
6
)
;
dispatcher
.
dispatch
(
addNumber
(
2
)
)
;
equal
(
dispatcher
.
getState
(
)
.
number
8
)
;
dispatcher
.
dispatch
(
{
type
:
"
FOO
"
}
)
;
equal
(
dispatcher
.
getState
(
)
.
number
8
)
;
}
function
testEmitChange
(
)
{
do_print
(
"
Testing
change
emittters
"
)
;
const
dispatcher
=
createDispatcher
(
stores
)
;
let
listenerRan
=
false
;
const
numberView
=
{
x
:
3
renderNumber
:
function
(
num
)
{
ok
(
this
.
x
3
"
listener
ran
in
context
of
view
"
)
;
ok
(
num
10
)
;
listenerRan
=
true
;
}
}
dispatcher
.
onChange
(
{
"
number
"
:
numberView
.
renderNumber
}
numberView
)
;
dispatcher
.
dispatch
(
addNumber
(
9
)
)
;
ok
(
listenerRan
"
number
listener
actually
ran
"
)
;
listenerRan
=
false
;
const
itemsView
=
{
renderList
:
function
(
items
)
{
ok
(
items
.
length
1
)
;
ok
(
items
[
0
]
.
name
=
"
james
"
)
;
listenerRan
=
true
;
}
}
dispatcher
.
onChange
(
{
"
items
"
:
{
"
list
"
:
itemsView
.
renderList
}
}
itemsView
)
;
dispatcher
.
dispatch
(
addItem
(
{
name
:
"
james
"
}
)
)
;
ok
(
listenerRan
"
items
listener
actually
ran
"
)
;
}
