"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
var
{
loader
require
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
devtools
/
Loader
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
devtools
/
Console
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
/
modules
/
devtools
/
ViewHelpers
.
jsm
"
)
;
loader
.
lazyRequireGetter
(
this
"
promise
"
)
;
loader
.
lazyRequireGetter
(
this
"
EventEmitter
"
"
devtools
/
toolkit
/
event
-
emitter
"
)
;
loader
.
lazyRequireGetter
(
this
"
AnimationsFront
"
"
devtools
/
server
/
actors
/
animation
"
true
)
;
const
STRINGS_URI
=
"
chrome
:
/
/
browser
/
locale
/
devtools
/
animationinspector
.
properties
"
;
const
L10N
=
new
ViewHelpers
.
L10N
(
STRINGS_URI
)
;
const
V3_UI_PREF
=
"
devtools
.
inspector
.
animationInspectorV3
"
;
var
gToolbox
gInspector
;
var
startup
=
Task
.
async
(
function
*
(
inspector
)
{
gInspector
=
inspector
;
gToolbox
=
inspector
.
toolbox
;
if
(
!
typeof
AnimationsPanel
=
=
=
"
undefined
"
)
{
throw
new
Error
(
"
AnimationsPanel
was
not
loaded
in
the
"
+
"
animationinspector
window
"
)
;
}
yield
AnimationsController
.
initialize
(
)
;
yield
AnimationsPanel
.
initialize
(
)
;
}
)
;
var
shutdown
=
Task
.
async
(
function
*
(
)
{
yield
AnimationsController
.
destroy
(
)
;
if
(
typeof
AnimationsPanel
!
=
=
"
undefined
"
)
{
yield
AnimationsPanel
.
destroy
(
)
;
}
gToolbox
=
gInspector
=
null
;
}
)
;
function
setPanel
(
panel
)
{
return
startup
(
panel
)
.
catch
(
e
=
>
console
.
error
(
e
)
)
;
}
function
destroy
(
)
{
return
shutdown
(
)
.
catch
(
e
=
>
console
.
error
(
e
)
)
;
}
var
getServerTraits
=
Task
.
async
(
function
*
(
target
)
{
let
config
=
[
{
name
:
"
hasToggleAll
"
actor
:
"
animations
"
method
:
"
toggleAll
"
}
{
name
:
"
hasSetCurrentTime
"
actor
:
"
animationplayer
"
method
:
"
setCurrentTime
"
}
{
name
:
"
hasMutationEvents
"
actor
:
"
animations
"
method
:
"
stopAnimationPlayerUpdates
"
}
{
name
:
"
hasSetPlaybackRate
"
actor
:
"
animationplayer
"
method
:
"
setPlaybackRate
"
}
{
name
:
"
hasTargetNode
"
actor
:
"
domwalker
"
method
:
"
getNodeFromActor
"
}
{
name
:
"
hasSetCurrentTimes
"
actor
:
"
animations
"
method
:
"
setCurrentTimes
"
}
]
;
let
traits
=
{
}
;
for
(
let
{
name
actor
method
}
of
config
)
{
traits
[
name
]
=
yield
target
.
actorHasMethod
(
actor
method
)
;
}
traits
.
isNewUI
=
Services
.
prefs
.
getBoolPref
(
V3_UI_PREF
)
;
return
traits
;
}
)
;
var
AnimationsController
=
{
PLAYERS_UPDATED_EVENT
:
"
players
-
updated
"
initialize
:
Task
.
async
(
function
*
(
)
{
if
(
this
.
initialized
)
{
yield
this
.
initialized
.
promise
;
return
;
}
this
.
initialized
=
promise
.
defer
(
)
;
this
.
onPanelVisibilityChange
=
this
.
onPanelVisibilityChange
.
bind
(
this
)
;
this
.
onNewNodeFront
=
this
.
onNewNodeFront
.
bind
(
this
)
;
this
.
onAnimationMutations
=
this
.
onAnimationMutations
.
bind
(
this
)
;
let
target
=
gToolbox
.
target
;
this
.
animationsFront
=
new
AnimationsFront
(
target
.
client
target
.
form
)
;
this
.
traits
=
yield
getServerTraits
(
target
)
;
if
(
this
.
destroyed
)
{
console
.
warn
(
"
Could
not
fully
initialize
the
AnimationsController
"
)
;
return
;
}
this
.
startListeners
(
)
;
yield
this
.
onNewNodeFront
(
)
;
this
.
initialized
.
resolve
(
)
;
}
)
destroy
:
Task
.
async
(
function
*
(
)
{
if
(
!
this
.
initialized
)
{
return
;
}
if
(
this
.
destroyed
)
{
yield
this
.
destroyed
.
promise
;
return
;
}
this
.
destroyed
=
promise
.
defer
(
)
;
this
.
stopListeners
(
)
;
yield
this
.
destroyAnimationPlayers
(
)
;
this
.
nodeFront
=
null
;
if
(
this
.
animationsFront
)
{
this
.
animationsFront
.
destroy
(
)
;
this
.
animationsFront
=
null
;
}
this
.
destroyed
.
resolve
(
)
;
}
)
startListeners
:
function
(
)
{
gInspector
.
selection
.
on
(
"
new
-
node
-
front
"
this
.
onNewNodeFront
)
;
gInspector
.
sidebar
.
on
(
"
select
"
this
.
onPanelVisibilityChange
)
;
gToolbox
.
on
(
"
select
"
this
.
onPanelVisibilityChange
)
;
}
stopListeners
:
function
(
)
{
gInspector
.
selection
.
off
(
"
new
-
node
-
front
"
this
.
onNewNodeFront
)
;
gInspector
.
sidebar
.
off
(
"
select
"
this
.
onPanelVisibilityChange
)
;
gToolbox
.
off
(
"
select
"
this
.
onPanelVisibilityChange
)
;
if
(
this
.
isListeningToMutations
)
{
this
.
animationsFront
.
off
(
"
mutations
"
this
.
onAnimationMutations
)
;
}
}
isPanelVisible
:
function
(
)
{
return
gToolbox
.
currentToolId
=
=
=
"
inspector
"
&
&
gInspector
.
sidebar
&
&
gInspector
.
sidebar
.
getCurrentTabID
(
)
=
=
"
animationinspector
"
;
}
onPanelVisibilityChange
:
Task
.
async
(
function
*
(
)
{
if
(
this
.
isPanelVisible
(
)
)
{
this
.
onNewNodeFront
(
)
;
this
.
startAllAutoRefresh
(
)
;
}
else
{
this
.
stopAllAutoRefresh
(
)
;
}
}
)
onNewNodeFront
:
Task
.
async
(
function
*
(
)
{
if
(
!
this
.
isPanelVisible
(
)
|
|
this
.
nodeFront
=
=
=
gInspector
.
selection
.
nodeFront
)
{
return
;
}
let
done
=
gInspector
.
updating
(
"
animationscontroller
"
)
;
if
(
!
gInspector
.
selection
.
isConnected
(
)
|
|
!
gInspector
.
selection
.
isElementNode
(
)
)
{
yield
this
.
destroyAnimationPlayers
(
)
;
this
.
emit
(
this
.
PLAYERS_UPDATED_EVENT
)
;
done
(
)
;
return
;
}
this
.
nodeFront
=
gInspector
.
selection
.
nodeFront
;
yield
this
.
refreshAnimationPlayers
(
this
.
nodeFront
)
;
this
.
emit
(
this
.
PLAYERS_UPDATED_EVENT
this
.
animationPlayers
)
;
done
(
)
;
}
)
toggleAll
:
function
(
)
{
if
(
!
this
.
traits
.
hasToggleAll
)
{
return
promise
.
resolve
(
)
;
}
return
this
.
animationsFront
.
toggleAll
(
)
.
catch
(
e
=
>
console
.
error
(
e
)
)
;
}
setCurrentTimeAll
:
Task
.
async
(
function
*
(
time
shouldPause
)
{
if
(
this
.
traits
.
hasSetCurrentTimes
)
{
yield
this
.
animationsFront
.
setCurrentTimes
(
this
.
animationPlayers
time
shouldPause
)
;
}
else
{
for
(
let
animation
of
this
.
animationPlayers
)
{
if
(
shouldPause
)
{
yield
animation
.
pause
(
)
;
}
yield
animation
.
setCurrentTime
(
time
)
;
}
}
}
)
animationPlayers
:
[
]
refreshAnimationPlayers
:
Task
.
async
(
function
*
(
nodeFront
)
{
yield
this
.
destroyAnimationPlayers
(
)
;
this
.
animationPlayers
=
yield
this
.
animationsFront
.
getAnimationPlayersForNode
(
nodeFront
)
;
this
.
startAllAutoRefresh
(
)
;
if
(
!
this
.
isListeningToMutations
&
&
this
.
traits
.
hasMutationEvents
)
{
this
.
animationsFront
.
on
(
"
mutations
"
this
.
onAnimationMutations
)
;
this
.
isListeningToMutations
=
true
;
}
}
)
onAnimationMutations
:
Task
.
async
(
function
*
(
changes
)
{
for
(
let
{
type
player
}
of
changes
)
{
if
(
type
=
=
=
"
added
"
)
{
this
.
animationPlayers
.
push
(
player
)
;
if
(
!
this
.
traits
.
isNewUI
)
{
player
.
startAutoRefresh
(
)
;
}
}
if
(
type
=
=
=
"
removed
"
)
{
if
(
!
this
.
traits
.
isNewUI
)
{
player
.
stopAutoRefresh
(
)
;
}
yield
player
.
release
(
)
;
let
index
=
this
.
animationPlayers
.
indexOf
(
player
)
;
this
.
animationPlayers
.
splice
(
index
1
)
;
}
}
this
.
emit
(
this
.
PLAYERS_UPDATED_EVENT
this
.
animationPlayers
)
;
}
)
get
documentCurrentTime
(
)
{
let
time
=
0
;
for
(
let
{
state
}
of
this
.
animationPlayers
)
{
if
(
!
state
.
documentCurrentTime
)
{
return
false
;
}
time
=
Math
.
max
(
time
state
.
documentCurrentTime
)
;
}
return
time
;
}
startAllAutoRefresh
:
function
(
)
{
if
(
this
.
traits
.
isNewUI
)
{
return
;
}
for
(
let
front
of
this
.
animationPlayers
)
{
front
.
startAutoRefresh
(
)
;
}
}
stopAllAutoRefresh
:
function
(
)
{
if
(
this
.
traits
.
isNewUI
)
{
return
;
}
for
(
let
front
of
this
.
animationPlayers
)
{
front
.
stopAutoRefresh
(
)
;
}
}
destroyAnimationPlayers
:
Task
.
async
(
function
*
(
)
{
if
(
this
.
traits
.
hasMutationEvents
)
{
yield
this
.
animationsFront
.
stopAnimationPlayerUpdates
(
)
;
}
this
.
stopAllAutoRefresh
(
)
;
for
(
let
front
of
this
.
animationPlayers
)
{
yield
front
.
release
(
)
;
}
this
.
animationPlayers
=
[
]
;
}
)
}
;
EventEmitter
.
decorate
(
AnimationsController
)
;
