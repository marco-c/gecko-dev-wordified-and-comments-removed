"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
actionCreators
:
ac
actionTypes
:
at
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
const
{
Prefs
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamPrefs
.
jsm
"
{
}
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NewTabUtils
"
"
resource
:
/
/
gre
/
modules
/
NewTabUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PreviewProvider
"
"
resource
:
/
/
/
modules
/
PreviewProvider
.
jsm
"
)
;
const
TOP_SITES_SHOWMORE_LENGTH
=
12
;
const
UPDATE_TIME
=
15
*
60
*
1000
;
const
DEFAULT_TOP_SITES
=
[
]
;
this
.
TopSitesFeed
=
class
TopSitesFeed
{
constructor
(
)
{
this
.
lastUpdated
=
0
;
}
init
(
)
{
let
sites
=
new
Prefs
(
)
.
get
(
"
default
.
sites
"
)
;
if
(
sites
)
{
for
(
const
url
of
sites
.
split
(
"
"
)
)
{
DEFAULT_TOP_SITES
.
push
(
{
isDefault
:
true
url
}
)
;
}
}
}
async
getScreenshot
(
url
)
{
let
screenshot
=
await
PreviewProvider
.
getThumbnail
(
url
)
;
const
action
=
{
type
:
at
.
SCREENSHOT_UPDATED
data
:
{
url
screenshot
}
}
;
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
action
)
)
;
}
sortLinks
(
frecent
pinned
)
{
let
sortedLinks
=
[
.
.
.
frecent
.
.
.
DEFAULT_TOP_SITES
]
;
sortedLinks
=
sortedLinks
.
filter
(
link
=
>
!
NewTabUtils
.
pinnedLinks
.
isPinned
(
link
)
)
;
pinned
.
forEach
(
(
val
index
)
=
>
{
if
(
!
val
)
{
return
;
}
let
link
=
Object
.
assign
(
{
}
val
{
isPinned
:
true
pinIndex
:
index
pinTitle
:
val
.
title
}
)
;
if
(
index
>
sortedLinks
.
length
)
{
sortedLinks
[
index
]
=
link
;
}
else
{
sortedLinks
.
splice
(
index
0
link
)
;
}
}
)
;
return
sortedLinks
.
slice
(
0
TOP_SITES_SHOWMORE_LENGTH
)
;
}
async
getLinksWithDefaults
(
action
)
{
let
pinned
=
NewTabUtils
.
pinnedLinks
.
links
;
let
frecent
=
await
NewTabUtils
.
activityStreamLinks
.
getTopSites
(
)
;
if
(
!
frecent
)
{
frecent
=
[
]
;
}
else
{
frecent
=
frecent
.
filter
(
link
=
>
link
&
&
link
.
type
!
=
=
"
affiliate
"
)
;
}
return
this
.
sortLinks
(
frecent
pinned
)
;
}
async
refresh
(
action
)
{
const
links
=
await
this
.
getLinksWithDefaults
(
)
;
const
currentScreenshots
=
{
}
;
for
(
const
link
of
this
.
store
.
getState
(
)
.
TopSites
.
rows
)
{
if
(
link
.
screenshot
)
{
currentScreenshots
[
link
.
url
]
=
link
.
screenshot
;
}
}
for
(
let
link
of
links
)
{
if
(
currentScreenshots
[
link
.
url
]
)
{
link
.
screenshot
=
currentScreenshots
[
link
.
url
]
;
}
else
{
this
.
getScreenshot
(
link
.
url
)
;
}
}
const
newAction
=
{
type
:
at
.
TOP_SITES_UPDATED
data
:
links
}
;
this
.
store
.
dispatch
(
ac
.
SendToContent
(
newAction
action
.
meta
.
fromTarget
)
)
;
this
.
lastUpdated
=
Date
.
now
(
)
;
}
openNewWindow
(
action
isPrivate
=
false
)
{
const
win
=
action
.
_target
.
browser
.
ownerGlobal
;
win
.
openLinkIn
(
action
.
data
.
url
"
window
"
{
private
:
isPrivate
}
)
;
}
onAction
(
action
)
{
let
realRows
;
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
init
(
)
;
break
;
case
at
.
NEW_TAB_LOAD
:
realRows
=
this
.
store
.
getState
(
)
.
TopSites
.
rows
.
filter
(
row
=
>
!
row
.
isDefault
)
;
if
(
(
realRows
.
length
<
TOP_SITES_SHOWMORE_LENGTH
)
|
|
(
Date
.
now
(
)
-
this
.
lastUpdated
>
=
UPDATE_TIME
)
)
{
this
.
refresh
(
action
)
;
}
break
;
case
at
.
OPEN_NEW_WINDOW
:
this
.
openNewWindow
(
action
)
;
break
;
case
at
.
OPEN_PRIVATE_WINDOW
:
{
this
.
openNewWindow
(
action
true
)
;
break
;
}
}
}
}
;
this
.
UPDATE_TIME
=
UPDATE_TIME
;
this
.
TOP_SITES_SHOWMORE_LENGTH
=
TOP_SITES_SHOWMORE_LENGTH
;
this
.
DEFAULT_TOP_SITES
=
DEFAULT_TOP_SITES
;
this
.
EXPORTED_SYMBOLS
=
[
"
TopSitesFeed
"
"
UPDATE_TIME
"
"
DEFAULT_TOP_SITES
"
"
TOP_SITES_SHOWMORE_LENGTH
"
]
;
