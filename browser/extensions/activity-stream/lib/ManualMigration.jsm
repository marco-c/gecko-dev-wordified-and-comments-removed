"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
const
{
actionCreators
:
ac
actionTypes
:
at
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
const
{
Prefs
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamPrefs
.
jsm
"
{
}
)
;
const
MIGRATION_ENDED_EVENT
=
"
Migration
:
Ended
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
MigrationUtils
"
"
resource
:
/
/
/
modules
/
MigrationUtils
.
jsm
"
)
;
this
.
ManualMigration
=
class
ManualMigration
{
constructor
(
)
{
Services
.
obs
.
addObserver
(
this
MIGRATION_ENDED_EVENT
)
;
this
.
_prefs
=
new
Prefs
(
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
MIGRATION_ENDED_EVENT
)
;
}
isMigrationMessageExpired
(
)
{
let
migrationLastShownDate
=
new
Date
(
this
.
_prefs
.
get
(
"
migrationLastShownDate
"
)
*
1000
)
;
let
today
=
new
Date
(
)
;
today
=
new
Date
(
today
.
getFullYear
(
)
today
.
getMonth
(
)
today
.
getDate
(
)
)
;
if
(
migrationLastShownDate
<
today
)
{
let
migrationRemainingDays
=
this
.
_prefs
.
get
(
"
migrationRemainingDays
"
)
-
1
;
this
.
_prefs
.
set
(
"
migrationRemainingDays
"
migrationRemainingDays
)
;
this
.
_prefs
.
set
(
"
migrationLastShownDate
"
today
.
valueOf
(
)
/
1000
)
;
if
(
migrationRemainingDays
<
=
0
)
{
return
true
;
}
}
return
false
;
}
expireIfNecessary
(
alreadyExpired
)
{
if
(
!
alreadyExpired
&
&
this
.
isMigrationMessageExpired
(
)
)
{
this
.
expireMigration
(
)
;
}
}
expireMigration
(
)
{
this
.
store
.
dispatch
(
ac
.
SetPref
(
"
migrationExpired
"
true
)
)
;
}
observe
(
)
{
this
.
expireMigration
(
)
;
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
PREFS_INITIAL_VALUES
:
this
.
expireIfNecessary
(
action
.
data
.
migrationExpired
)
;
break
;
case
at
.
MIGRATION_START
:
MigrationUtils
.
showMigrationWizard
(
action
.
_target
.
browser
.
ownerGlobal
[
MigrationUtils
.
MIGRATION_ENTRYPOINT_NEWTAB
]
)
;
break
;
case
at
.
MIGRATION_CANCEL
:
this
.
expireMigration
(
)
;
break
;
case
at
.
UNINIT
:
this
.
uninit
(
)
;
break
;
}
}
}
;
this
.
EXPORTED_SYMBOLS
=
[
"
ManualMigration
"
]
;
