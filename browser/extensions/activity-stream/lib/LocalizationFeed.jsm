"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
"
fetch
"
]
)
;
const
{
actionCreators
:
ac
actionTypes
:
at
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
const
DEFAULT_LOCALE
=
"
en
-
US
"
;
const
LOCALES_CHANGE_TOPIC
=
"
intl
:
requested
-
locales
-
changed
"
;
const
LOCALES_FILE
=
"
resource
:
/
/
activity
-
stream
/
data
/
locales
.
json
"
;
this
.
LocalizationFeed
=
class
LocalizationFeed
{
async
init
(
)
{
Services
.
obs
.
addObserver
(
this
LOCALES_CHANGE_TOPIC
)
;
let
response
=
await
fetch
(
LOCALES_FILE
)
;
this
.
allStrings
=
await
response
.
json
(
)
;
this
.
updateLocale
(
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
LOCALES_CHANGE_TOPIC
)
;
}
updateLocale
(
)
{
let
locale
=
Services
.
locale
.
negotiateLanguages
(
Services
.
locale
.
getAppLocalesAsLangTags
(
)
Object
.
keys
(
this
.
allStrings
)
DEFAULT_LOCALE
)
[
0
]
;
let
strings
=
this
.
allStrings
[
locale
]
;
if
(
locale
!
=
=
DEFAULT_LOCALE
)
{
strings
=
Object
.
assign
(
{
}
this
.
allStrings
[
DEFAULT_LOCALE
]
strings
|
|
{
}
)
;
}
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
LOCALE_UPDATED
data
:
{
locale
strings
}
}
)
)
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
LOCALES_CHANGE_TOPIC
:
this
.
updateLocale
(
)
;
break
;
}
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
init
(
)
;
break
;
case
at
.
UNINIT
:
this
.
uninit
(
)
;
break
;
}
}
}
;
this
.
EXPORTED_SYMBOLS
=
[
"
LocalizationFeed
"
]
;
