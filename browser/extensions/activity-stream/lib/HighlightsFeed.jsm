"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
actionTypes
:
at
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
const
{
shortURL
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ShortURL
.
jsm
"
{
}
)
;
const
{
SectionsManager
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
SectionsManager
.
jsm
"
{
}
)
;
const
{
TOP_SITES_SHOWMORE_LENGTH
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Reducers
.
jsm
"
{
}
)
;
const
{
Dedupe
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Dedupe
.
jsm
"
{
}
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
filterAdult
"
"
resource
:
/
/
activity
-
stream
/
lib
/
FilterAdult
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NewTabUtils
"
"
resource
:
/
/
gre
/
modules
/
NewTabUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Screenshots
"
"
resource
:
/
/
activity
-
stream
/
lib
/
Screenshots
.
jsm
"
)
;
const
HIGHLIGHTS_MAX_LENGTH
=
9
;
const
HIGHLIGHTS_UPDATE_TIME
=
15
*
60
*
1000
;
const
MANY_EXTRA_LENGTH
=
HIGHLIGHTS_MAX_LENGTH
*
5
+
TOP_SITES_SHOWMORE_LENGTH
;
const
SECTION_ID
=
"
highlights
"
;
this
.
HighlightsFeed
=
class
HighlightsFeed
{
constructor
(
)
{
this
.
highlightsLastUpdated
=
0
;
this
.
highlights
=
[
]
;
this
.
dedupe
=
new
Dedupe
(
this
.
_dedupeKey
)
;
}
_dedupeKey
(
site
)
{
return
site
&
&
site
.
url
;
}
init
(
)
{
SectionsManager
.
onceInitialized
(
this
.
postInit
.
bind
(
this
)
)
;
}
postInit
(
)
{
SectionsManager
.
enableSection
(
SECTION_ID
)
;
this
.
fetchHighlights
(
true
)
;
}
uninit
(
)
{
SectionsManager
.
disableSection
(
SECTION_ID
)
;
}
async
fetchHighlights
(
broadcast
=
false
)
{
if
(
!
this
.
store
.
getState
(
)
.
TopSites
.
initialized
)
{
await
new
Promise
(
resolve
=
>
{
const
unsubscribe
=
this
.
store
.
subscribe
(
(
)
=
>
{
if
(
this
.
store
.
getState
(
)
.
TopSites
.
initialized
)
{
unsubscribe
(
)
;
resolve
(
)
;
}
}
)
;
}
)
;
}
const
manyPages
=
await
NewTabUtils
.
activityStreamLinks
.
getHighlights
(
{
numItems
:
MANY_EXTRA_LENGTH
}
)
;
const
checkedAdult
=
this
.
store
.
getState
(
)
.
Prefs
.
values
.
filterAdult
?
filterAdult
(
manyPages
)
:
manyPages
;
const
[
deduped
]
=
this
.
dedupe
.
group
(
this
.
store
.
getState
(
)
.
TopSites
.
rows
checkedAdult
)
;
const
currentImages
=
{
}
;
for
(
const
site
of
this
.
highlights
)
{
if
(
site
&
&
site
.
image
)
{
currentImages
[
site
.
url
]
=
site
.
image
;
}
}
this
.
highlights
=
[
]
;
const
hosts
=
new
Set
(
)
;
for
(
const
page
of
deduped
)
{
const
hostname
=
shortURL
(
page
)
;
if
(
page
.
type
=
=
=
"
history
"
&
&
hosts
.
has
(
hostname
)
)
{
continue
;
}
const
image
=
currentImages
[
page
.
url
]
;
if
(
!
image
)
{
this
.
fetchImage
(
page
.
url
page
.
preview_image_url
)
;
}
Object
.
assign
(
page
{
image
hasImage
:
true
hostname
type
:
page
.
bookmarkGuid
?
"
bookmark
"
:
page
.
type
}
)
;
this
.
highlights
.
push
(
page
)
;
hosts
.
add
(
hostname
)
;
if
(
this
.
highlights
.
length
=
=
=
HIGHLIGHTS_MAX_LENGTH
)
{
break
;
}
}
SectionsManager
.
updateSection
(
SECTION_ID
{
rows
:
this
.
highlights
}
this
.
highlightsLastUpdated
=
=
=
0
|
|
broadcast
)
;
this
.
highlightsLastUpdated
=
Date
.
now
(
)
;
}
async
fetchImage
(
url
imageUrl
)
{
const
image
=
await
Screenshots
.
getScreenshotForURL
(
imageUrl
|
|
url
)
;
SectionsManager
.
updateSectionCard
(
SECTION_ID
url
{
image
}
true
)
;
if
(
image
)
{
const
highlight
=
this
.
highlights
.
find
(
site
=
>
site
.
url
=
=
=
url
)
;
if
(
highlight
)
{
highlight
.
image
=
image
;
}
}
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
init
(
)
;
break
;
case
at
.
NEW_TAB_LOAD
:
if
(
this
.
highlights
.
length
<
HIGHLIGHTS_MAX_LENGTH
)
{
this
.
fetchHighlights
(
true
)
;
}
else
if
(
Date
.
now
(
)
-
this
.
highlightsLastUpdated
>
=
HIGHLIGHTS_UPDATE_TIME
)
{
this
.
fetchHighlights
(
false
)
;
}
break
;
case
at
.
MIGRATION_COMPLETED
:
case
at
.
PLACES_HISTORY_CLEARED
:
case
at
.
PLACES_LINK_DELETED
:
case
at
.
PLACES_LINK_BLOCKED
:
this
.
fetchHighlights
(
true
)
;
break
;
case
at
.
PLACES_BOOKMARK_ADDED
:
case
at
.
PLACES_BOOKMARK_REMOVED
:
case
at
.
TOP_SITES_UPDATED
:
this
.
fetchHighlights
(
false
)
;
break
;
case
at
.
UNINIT
:
this
.
uninit
(
)
;
break
;
}
}
}
;
this
.
HIGHLIGHTS_UPDATE_TIME
=
HIGHLIGHTS_UPDATE_TIME
;
this
.
EXPORTED_SYMBOLS
=
[
"
HighlightsFeed
"
"
HIGHLIGHTS_UPDATE_TIME
"
"
SECTION_ID
"
]
;
