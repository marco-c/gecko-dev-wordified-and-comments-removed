"
use
strict
"
;
const
{
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
actionTypes
:
at
actionUtils
:
au
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
const
{
Prefs
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamPrefs
.
jsm
"
{
}
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
perfService
"
"
resource
:
/
/
activity
-
stream
/
common
/
PerfService
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PingCentre
"
"
resource
:
/
/
/
modules
/
PingCentre
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gUUIDGenerator
"
"
mozilla
.
org
/
uuid
-
generator
;
1
"
"
nsIUUIDGenerator
"
)
;
const
ACTIVITY_STREAM_ID
=
"
activity
-
stream
"
;
const
ACTIVITY_STREAM_ENDPOINT_PREF
=
"
browser
.
newtabpage
.
activity
-
stream
.
telemetry
.
ping
.
endpoint
"
;
const
USER_PREFS_ENCODING
=
{
"
showSearch
"
:
1
<
<
0
"
showTopSites
"
:
1
<
<
1
"
feeds
.
section
.
topstories
"
:
1
<
<
2
"
feeds
.
section
.
highlights
"
:
1
<
<
3
"
feeds
.
snippets
"
:
1
<
<
4
"
showSponsored
"
:
1
<
<
5
}
;
const
PREF_IMPRESSION_ID
=
"
impressionId
"
;
const
TELEMETRY_PREF
=
"
telemetry
"
;
this
.
TelemetryFeed
=
class
TelemetryFeed
{
constructor
(
options
)
{
this
.
sessions
=
new
Map
(
)
;
this
.
_prefs
=
new
Prefs
(
)
;
this
.
_impressionId
=
this
.
getOrCreateImpressionId
(
)
;
this
.
telemetryEnabled
=
this
.
_prefs
.
get
(
TELEMETRY_PREF
)
;
this
.
_aboutHomeSeen
=
false
;
this
.
_onTelemetryPrefChange
=
this
.
_onTelemetryPrefChange
.
bind
(
this
)
;
this
.
_prefs
.
observe
(
TELEMETRY_PREF
this
.
_onTelemetryPrefChange
)
;
}
init
(
)
{
Services
.
obs
.
addObserver
(
this
.
browserOpenNewtabStart
"
browser
-
open
-
newtab
-
start
"
)
;
}
getOrCreateImpressionId
(
)
{
let
impressionId
=
this
.
_prefs
.
get
(
PREF_IMPRESSION_ID
)
;
if
(
!
impressionId
)
{
impressionId
=
String
(
gUUIDGenerator
.
generateUUID
(
)
)
;
this
.
_prefs
.
set
(
PREF_IMPRESSION_ID
impressionId
)
;
}
return
impressionId
;
}
browserOpenNewtabStart
(
)
{
perfService
.
mark
(
"
browser
-
open
-
newtab
-
start
"
)
;
}
setLoadTriggerInfo
(
port
)
{
let
data_to_save
;
try
{
data_to_save
=
{
load_trigger_ts
:
perfService
.
getMostRecentAbsMarkStartByName
(
"
browser
-
open
-
newtab
-
start
"
)
load_trigger_type
:
"
menu_plus_or_keyboard
"
}
;
}
catch
(
e
)
{
return
;
}
this
.
saveSessionPerfData
(
port
data_to_save
)
;
}
_onTelemetryPrefChange
(
prefVal
)
{
this
.
telemetryEnabled
=
prefVal
;
}
get
pingCentre
(
)
{
Object
.
defineProperty
(
this
"
pingCentre
"
{
value
:
new
PingCentre
(
{
topic
:
ACTIVITY_STREAM_ID
overrideEndpointPref
:
ACTIVITY_STREAM_ENDPOINT_PREF
}
)
}
)
;
return
this
.
pingCentre
;
}
get
userPreferences
(
)
{
let
prefs
=
0
;
for
(
const
pref
of
Object
.
keys
(
USER_PREFS_ENCODING
)
)
{
if
(
this
.
_prefs
.
get
(
pref
)
)
{
prefs
|
=
USER_PREFS_ENCODING
[
pref
]
;
}
}
return
prefs
;
}
addSession
(
id
url
)
{
let
load_trigger_type
=
"
unexpected
"
;
let
load_trigger_ts
;
if
(
!
this
.
_aboutHomeSeen
&
&
url
=
=
=
"
about
:
home
"
)
{
this
.
_aboutHomeSeen
=
true
;
load_trigger_type
=
"
first_window_opened
"
;
load_trigger_ts
=
perfService
.
timeOrigin
;
}
const
session
=
{
session_id
:
String
(
gUUIDGenerator
.
generateUUID
(
)
)
page
:
url
?
url
:
"
unknown
"
perf
:
{
load_trigger_type
is_preloaded
:
false
is_prerendered
:
false
}
}
;
if
(
load_trigger_ts
)
{
session
.
perf
.
load_trigger_ts
=
load_trigger_ts
;
}
this
.
sessions
.
set
(
id
session
)
;
return
session
;
}
endSession
(
portID
)
{
const
session
=
this
.
sessions
.
get
(
portID
)
;
if
(
!
session
)
{
return
;
}
if
(
session
.
perf
.
visibility_event_rcvd_ts
)
{
session
.
session_duration
=
Math
.
round
(
perfService
.
absNow
(
)
-
session
.
perf
.
visibility_event_rcvd_ts
)
;
}
this
.
sendEvent
(
this
.
createSessionEndEvent
(
session
)
)
;
this
.
sessions
.
delete
(
portID
)
;
}
handlePagePrerendered
(
portID
)
{
const
session
=
this
.
sessions
.
get
(
portID
)
;
if
(
!
session
)
{
return
;
}
session
.
perf
.
is_prerendered
=
true
;
}
handleNewTabInit
(
action
)
{
const
session
=
this
.
addSession
(
au
.
getPortIdOfSender
(
action
)
action
.
data
.
url
)
;
session
.
perf
.
is_preloaded
=
action
.
data
.
browser
.
getAttribute
(
"
preloadedState
"
)
=
=
=
"
preloaded
"
;
}
createPing
(
portID
)
{
const
appInfo
=
this
.
store
.
getState
(
)
.
App
;
const
ping
=
{
addon_version
:
appInfo
.
version
locale
:
Services
.
locale
.
getAppLocaleAsLangTag
(
)
user_prefs
:
this
.
userPreferences
}
;
if
(
portID
)
{
const
session
=
this
.
sessions
.
get
(
portID
)
|
|
this
.
addSession
(
portID
)
;
Object
.
assign
(
ping
{
session_id
:
session
.
session_id
}
)
;
if
(
session
.
page
)
{
Object
.
assign
(
ping
{
page
:
session
.
page
}
)
;
}
}
return
ping
;
}
createImpressionStats
(
action
)
{
return
Object
.
assign
(
this
.
createPing
(
au
.
getPortIdOfSender
(
action
)
)
action
.
data
{
action
:
"
activity_stream_impression_stats
"
impression_id
:
this
.
_impressionId
client_id
:
"
n
/
a
"
session_id
:
"
n
/
a
"
}
)
;
}
createUserEvent
(
action
)
{
return
Object
.
assign
(
this
.
createPing
(
au
.
getPortIdOfSender
(
action
)
)
action
.
data
{
action
:
"
activity_stream_user_event
"
}
)
;
}
createUndesiredEvent
(
action
)
{
return
Object
.
assign
(
this
.
createPing
(
au
.
getPortIdOfSender
(
action
)
)
{
value
:
0
}
action
.
data
{
action
:
"
activity_stream_undesired_event
"
}
)
;
}
createPerformanceEvent
(
action
)
{
return
Object
.
assign
(
this
.
createPing
(
)
action
.
data
{
action
:
"
activity_stream_performance_event
"
}
)
;
}
createSessionEndEvent
(
session
)
{
return
Object
.
assign
(
this
.
createPing
(
)
{
session_id
:
session
.
session_id
page
:
session
.
page
session_duration
:
session
.
session_duration
action
:
"
activity_stream_session
"
perf
:
session
.
perf
}
)
;
}
sendEvent
(
event_object
)
{
if
(
this
.
telemetryEnabled
)
{
this
.
pingCentre
.
sendPing
(
event_object
{
filter
:
ACTIVITY_STREAM_ID
}
)
;
}
}
handleImpressionStats
(
action
)
{
this
.
sendEvent
(
this
.
createImpressionStats
(
action
)
)
;
}
handleUserEvent
(
action
)
{
this
.
sendEvent
(
this
.
createUserEvent
(
action
)
)
;
}
handleUndesiredEvent
(
action
)
{
this
.
sendEvent
(
this
.
createUndesiredEvent
(
action
)
)
;
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
init
(
)
;
break
;
case
at
.
NEW_TAB_INIT
:
this
.
handleNewTabInit
(
action
)
;
break
;
case
at
.
NEW_TAB_UNLOAD
:
this
.
endSession
(
au
.
getPortIdOfSender
(
action
)
)
;
break
;
case
at
.
PAGE_PRERENDERED
:
this
.
handlePagePrerendered
(
au
.
getPortIdOfSender
(
action
)
)
;
break
;
case
at
.
SAVE_SESSION_PERF_DATA
:
this
.
saveSessionPerfData
(
au
.
getPortIdOfSender
(
action
)
action
.
data
)
;
break
;
case
at
.
TELEMETRY_IMPRESSION_STATS
:
this
.
handleImpressionStats
(
action
)
;
break
;
case
at
.
TELEMETRY_UNDESIRED_EVENT
:
this
.
handleUndesiredEvent
(
action
)
;
break
;
case
at
.
TELEMETRY_USER_EVENT
:
this
.
handleUserEvent
(
action
)
;
break
;
case
at
.
TELEMETRY_PERFORMANCE_EVENT
:
this
.
sendEvent
(
this
.
createPerformanceEvent
(
action
)
)
;
break
;
case
at
.
UNINIT
:
this
.
uninit
(
)
;
break
;
}
}
saveSessionPerfData
(
port
data
)
{
let
session
=
this
.
sessions
.
get
(
port
)
;
if
(
data
.
visibility_event_rcvd_ts
&
&
session
.
page
!
=
=
"
about
:
home
"
)
{
this
.
setLoadTriggerInfo
(
port
)
;
}
Object
.
assign
(
session
.
perf
data
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
.
browserOpenNewtabStart
"
browser
-
open
-
newtab
-
start
"
)
;
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
this
"
pingCentre
"
)
)
{
this
.
pingCentre
.
uninit
(
)
;
}
try
{
this
.
_prefs
.
ignore
(
TELEMETRY_PREF
this
.
_onTelemetryPrefChange
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
}
;
this
.
EXPORTED_SYMBOLS
=
[
"
TelemetryFeed
"
"
USER_PREFS_ENCODING
"
"
PREF_IMPRESSION_ID
"
"
TELEMETRY_PREF
"
]
;
