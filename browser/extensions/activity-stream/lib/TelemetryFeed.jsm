"
use
strict
"
;
const
{
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
actionTypes
:
at
actionUtils
:
au
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ClientID
"
"
resource
:
/
/
gre
/
modules
/
ClientID
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
perfService
"
"
resource
:
/
/
activity
-
stream
/
common
/
PerfService
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
TelemetrySender
"
"
resource
:
/
/
activity
-
stream
/
lib
/
TelemetrySender
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gUUIDGenerator
"
"
mozilla
.
org
/
uuid
-
generator
;
1
"
"
nsIUUIDGenerator
"
)
;
this
.
TelemetryFeed
=
class
TelemetryFeed
{
constructor
(
options
)
{
this
.
sessions
=
new
Map
(
)
;
}
init
(
)
{
Services
.
obs
.
addObserver
(
this
.
browserOpenNewtabStart
"
browser
-
open
-
newtab
-
start
"
)
;
}
browserOpenNewtabStart
(
)
{
perfService
.
mark
(
"
browser
-
open
-
newtab
-
start
"
)
;
}
setLoadTriggerInfo
(
port
)
{
let
data_to_save
;
try
{
data_to_save
=
{
load_trigger_ts
:
perfService
.
getMostRecentAbsMarkStartByName
(
"
browser
-
open
-
newtab
-
start
"
)
load_trigger_type
:
"
menu_plus_or_keyboard
"
}
;
}
catch
(
e
)
{
return
;
}
this
.
saveSessionPerfData
(
port
data_to_save
)
;
}
get
telemetryClientId
(
)
{
Object
.
defineProperty
(
this
"
telemetryClientId
"
{
value
:
ClientID
.
getClientID
(
)
}
)
;
return
this
.
telemetryClientId
;
}
get
telemetrySender
(
)
{
Object
.
defineProperty
(
this
"
telemetrySender
"
{
value
:
new
TelemetrySender
(
)
}
)
;
return
this
.
telemetrySender
;
}
addSession
(
id
)
{
const
session
=
{
session_id
:
String
(
gUUIDGenerator
.
generateUUID
(
)
)
page
:
"
about
:
newtab
"
perf
:
{
load_trigger_type
:
"
unexpected
"
}
}
;
this
.
sessions
.
set
(
id
session
)
;
return
session
;
}
endSession
(
portID
)
{
const
session
=
this
.
sessions
.
get
(
portID
)
;
if
(
!
session
)
{
return
;
}
if
(
session
.
perf
.
visibility_event_rcvd_ts
)
{
session
.
session_duration
=
Math
.
round
(
perfService
.
absNow
(
)
-
session
.
perf
.
visibility_event_rcvd_ts
)
;
}
this
.
sendEvent
(
this
.
createSessionEndEvent
(
session
)
)
;
this
.
sessions
.
delete
(
portID
)
;
}
async
createPing
(
portID
)
{
const
appInfo
=
this
.
store
.
getState
(
)
.
App
;
const
ping
=
{
client_id
:
await
this
.
telemetryClientId
addon_version
:
appInfo
.
version
locale
:
appInfo
.
locale
}
;
if
(
portID
)
{
const
session
=
this
.
sessions
.
get
(
portID
)
|
|
this
.
addSession
(
portID
)
;
Object
.
assign
(
ping
{
session_id
:
session
.
session_id
page
:
session
.
page
}
)
;
}
return
ping
;
}
async
createUserEvent
(
action
)
{
return
Object
.
assign
(
await
this
.
createPing
(
au
.
getPortIdOfSender
(
action
)
)
action
.
data
{
action
:
"
activity_stream_user_event
"
}
)
;
}
async
createUndesiredEvent
(
action
)
{
return
Object
.
assign
(
await
this
.
createPing
(
au
.
getPortIdOfSender
(
action
)
)
{
value
:
0
}
action
.
data
{
action
:
"
activity_stream_undesired_event
"
}
)
;
}
async
createPerformanceEvent
(
action
)
{
return
Object
.
assign
(
await
this
.
createPing
(
)
action
.
data
{
action
:
"
activity_stream_performance_event
"
}
)
;
}
async
createSessionEndEvent
(
session
)
{
return
Object
.
assign
(
await
this
.
createPing
(
)
{
session_id
:
session
.
session_id
page
:
session
.
page
session_duration
:
session
.
session_duration
action
:
"
activity_stream_session
"
perf
:
session
.
perf
}
)
;
}
async
sendEvent
(
eventPromise
)
{
this
.
telemetrySender
.
sendPing
(
await
eventPromise
)
;
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
init
(
)
;
break
;
case
at
.
NEW_TAB_INIT
:
this
.
addSession
(
au
.
getPortIdOfSender
(
action
)
)
;
this
.
setLoadTriggerInfo
(
au
.
getPortIdOfSender
(
action
)
)
;
break
;
case
at
.
NEW_TAB_UNLOAD
:
this
.
endSession
(
au
.
getPortIdOfSender
(
action
)
)
;
break
;
case
at
.
SAVE_SESSION_PERF_DATA
:
this
.
saveSessionPerfData
(
au
.
getPortIdOfSender
(
action
)
action
.
data
)
;
break
;
case
at
.
TELEMETRY_UNDESIRED_EVENT
:
this
.
sendEvent
(
this
.
createUndesiredEvent
(
action
)
)
;
break
;
case
at
.
TELEMETRY_USER_EVENT
:
this
.
sendEvent
(
this
.
createUserEvent
(
action
)
)
;
break
;
case
at
.
TELEMETRY_PERFORMANCE_EVENT
:
this
.
sendEvent
(
this
.
createPerformanceEvent
(
action
)
)
;
break
;
}
}
saveSessionPerfData
(
port
data
)
{
let
session
=
this
.
sessions
.
get
(
port
)
;
Object
.
assign
(
session
.
perf
data
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
.
browserOpenNewtabStart
"
browser
-
open
-
newtab
-
start
"
)
;
if
(
Object
.
prototype
.
hasOwnProperty
.
call
(
this
"
telemetrySender
"
)
)
{
this
.
telemetrySender
.
uninit
(
)
;
}
}
}
;
this
.
EXPORTED_SYMBOLS
=
[
"
TelemetryFeed
"
]
;
