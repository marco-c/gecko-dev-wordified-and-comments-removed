"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
fetch
"
]
)
;
const
{
ASRouterActions
:
ra
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
const
{
OnboardingMessageProvider
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
OnboardingMessageProvider
.
jsm
"
{
}
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ASRouterTargeting
"
"
resource
:
/
/
activity
-
stream
/
lib
/
ASRouterTargeting
.
jsm
"
)
;
const
INCOMING_MESSAGE_NAME
=
"
ASRouter
:
child
-
to
-
parent
"
;
const
OUTGOING_MESSAGE_NAME
=
"
ASRouter
:
parent
-
to
-
child
"
;
const
ONE_HOUR_IN_MS
=
60
*
60
*
1000
;
const
SNIPPETS_ENDPOINT_PREF
=
"
browser
.
newtabpage
.
activity
-
stream
.
asrouter
.
snippetsUrl
"
;
const
SNIPPETS_ENDPOINT
=
Services
.
prefs
.
getStringPref
(
SNIPPETS_ENDPOINT_PREF
"
https
:
/
/
activity
-
stream
-
icons
.
services
.
mozilla
.
com
/
v1
/
messages
.
json
.
br
"
)
;
const
WHITELIST_HOSTS
=
{
"
activity
-
stream
-
icons
.
services
.
mozilla
.
com
"
:
"
production
"
"
snippets
-
admin
.
mozilla
.
org
"
:
"
preview
"
}
;
const
MessageLoaderUtils
=
{
_localLoader
(
provider
)
{
return
provider
.
messages
;
}
async
_remoteLoader
(
provider
)
{
let
remoteMessages
=
[
]
;
if
(
provider
.
url
)
{
try
{
const
response
=
await
fetch
(
provider
.
url
)
;
if
(
response
.
status
!
=
=
204
&
&
(
response
.
ok
|
|
response
.
status
=
=
=
302
)
)
{
remoteMessages
=
(
await
response
.
json
(
)
)
.
messages
.
map
(
msg
=
>
(
{
.
.
.
msg
provider_url
:
provider
.
url
}
)
)
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
return
remoteMessages
;
}
_getMessageLoader
(
provider
)
{
switch
(
provider
.
type
)
{
case
"
remote
"
:
return
this
.
_remoteLoader
;
case
"
local
"
:
default
:
return
this
.
_localLoader
;
}
}
shouldProviderUpdate
(
provider
currentTime
=
Date
.
now
(
)
)
{
return
(
!
(
provider
.
lastUpdated
>
=
0
)
|
|
currentTime
-
provider
.
lastUpdated
>
provider
.
updateCycleInMs
)
;
}
async
loadMessagesForProvider
(
provider
)
{
const
messages
=
(
await
this
.
_getMessageLoader
(
provider
)
(
provider
)
)
.
map
(
msg
=
>
(
{
.
.
.
msg
provider
:
provider
.
id
}
)
)
;
const
lastUpdated
=
Date
.
now
(
)
;
return
{
messages
lastUpdated
}
;
}
}
;
this
.
MessageLoaderUtils
=
MessageLoaderUtils
;
class
_ASRouter
{
constructor
(
initialState
=
{
}
)
{
this
.
initialized
=
false
;
this
.
messageChannel
=
null
;
this
.
_storage
=
null
;
this
.
_resetInitialization
(
)
;
this
.
_state
=
{
lastMessageId
:
null
providers
:
[
]
blockList
:
[
]
messages
:
[
]
.
.
.
initialState
}
;
this
.
onMessage
=
this
.
onMessage
.
bind
(
this
)
;
}
get
state
(
)
{
return
this
.
_state
;
}
set
state
(
value
)
{
throw
new
Error
(
"
Do
not
modify
this
.
state
directy
.
Instead
call
this
.
setState
(
newState
)
"
)
;
}
_resetInitialization
(
)
{
this
.
initialized
=
false
;
this
.
waitForInitialized
=
new
Promise
(
resolve
=
>
{
this
.
_finishInitializing
=
(
)
=
>
{
this
.
initialized
=
true
;
resolve
(
)
;
}
;
}
)
;
}
async
loadMessagesFromAllProviders
(
)
{
const
needsUpdate
=
this
.
state
.
providers
.
filter
(
provider
=
>
MessageLoaderUtils
.
shouldProviderUpdate
(
provider
)
)
;
if
(
needsUpdate
.
length
)
{
let
newState
=
{
messages
:
[
]
providers
:
[
]
}
;
for
(
const
provider
of
this
.
state
.
providers
)
{
if
(
needsUpdate
.
includes
(
provider
)
)
{
const
{
messages
lastUpdated
}
=
await
MessageLoaderUtils
.
loadMessagesForProvider
(
provider
)
;
newState
.
providers
.
push
(
{
.
.
.
provider
lastUpdated
}
)
;
newState
.
messages
=
[
.
.
.
newState
.
messages
.
.
.
messages
]
;
}
else
{
let
messages
=
this
.
state
.
messages
.
filter
(
msg
=
>
msg
.
provider
=
=
=
provider
.
id
)
;
newState
.
providers
.
push
(
provider
)
;
newState
.
messages
=
[
.
.
.
newState
.
messages
.
.
.
messages
]
;
}
}
await
this
.
setState
(
newState
)
;
}
}
async
init
(
channel
storage
)
{
this
.
messageChannel
=
channel
;
this
.
messageChannel
.
addMessageListener
(
INCOMING_MESSAGE_NAME
this
.
onMessage
)
;
await
this
.
loadMessagesFromAllProviders
(
)
;
this
.
_storage
=
storage
;
const
blockList
=
await
this
.
_storage
.
get
(
"
blockList
"
)
|
|
[
]
;
await
this
.
setState
(
{
blockList
}
)
;
this
.
_finishInitializing
(
)
;
}
uninit
(
)
{
this
.
messageChannel
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
CLEAR_ALL
"
}
)
;
this
.
messageChannel
.
removeMessageListener
(
INCOMING_MESSAGE_NAME
this
.
onMessage
)
;
this
.
messageChannel
=
null
;
this
.
_resetInitialization
(
)
;
}
setState
(
callbackOrObj
)
{
const
newState
=
(
typeof
callbackOrObj
=
=
=
"
function
"
)
?
callbackOrObj
(
this
.
state
)
:
callbackOrObj
;
this
.
_state
=
{
.
.
.
this
.
state
.
.
.
newState
}
;
return
new
Promise
(
resolve
=
>
{
this
.
_onStateChanged
(
this
.
state
)
;
resolve
(
)
;
}
)
;
}
getMessageById
(
id
)
{
return
this
.
state
.
messages
.
find
(
message
=
>
message
.
id
=
=
=
id
)
;
}
_onStateChanged
(
state
)
{
this
.
messageChannel
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
ADMIN_SET_STATE
"
data
:
state
}
)
;
}
async
_findMessage
(
msgs
target
data
=
{
}
)
{
let
message
;
let
{
trigger
}
=
data
;
if
(
trigger
)
{
message
=
await
ASRouterTargeting
.
findMatchingMessageWithTrigger
(
msgs
target
trigger
)
;
}
if
(
!
message
)
{
message
=
await
ASRouterTargeting
.
findMatchingMessage
(
msgs
target
)
;
}
return
message
;
}
async
_getBundledMessages
(
originalMessage
target
data
force
=
false
)
{
let
result
=
[
{
content
:
originalMessage
.
content
id
:
originalMessage
.
id
}
]
;
let
bundledMessagesOfSameTemplate
=
this
.
_getUnblockedMessages
(
)
.
filter
(
msg
=
>
msg
.
bundled
&
&
msg
.
template
=
=
=
originalMessage
.
template
&
&
msg
.
id
!
=
=
originalMessage
.
id
)
;
if
(
force
)
{
for
(
const
message
of
bundledMessagesOfSameTemplate
)
{
result
.
push
(
{
content
:
message
.
content
id
:
message
.
id
}
)
;
if
(
result
.
length
=
=
=
originalMessage
.
bundled
)
{
break
;
}
}
}
else
{
while
(
bundledMessagesOfSameTemplate
.
length
)
{
const
message
=
await
this
.
_findMessage
(
bundledMessagesOfSameTemplate
target
data
)
;
if
(
!
message
)
{
break
;
}
result
.
push
(
{
content
:
message
.
content
id
:
message
.
id
}
)
;
bundledMessagesOfSameTemplate
.
splice
(
bundledMessagesOfSameTemplate
.
findIndex
(
msg
=
>
msg
.
id
=
=
=
message
.
id
)
1
)
;
if
(
result
.
length
=
=
=
originalMessage
.
bundled
)
{
break
;
}
}
}
if
(
result
.
length
<
originalMessage
.
bundled
)
{
return
null
;
}
return
{
bundle
:
result
provider
:
originalMessage
.
provider
template
:
originalMessage
.
template
}
;
}
_getUnblockedMessages
(
)
{
let
{
state
}
=
this
;
return
state
.
messages
.
filter
(
item
=
>
!
state
.
blockList
.
includes
(
item
.
id
)
)
;
}
async
_sendMessageToTarget
(
message
target
data
force
=
false
)
{
let
bundledMessages
;
if
(
message
&
&
message
.
bundled
)
{
bundledMessages
=
await
this
.
_getBundledMessages
(
message
target
data
force
)
;
}
if
(
message
&
&
!
message
.
bundled
)
{
target
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
SET_MESSAGE
"
data
:
message
}
)
;
}
else
if
(
bundledMessages
)
{
target
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
SET_BUNDLED_MESSAGES
"
data
:
bundledMessages
}
)
;
}
else
{
target
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
CLEAR_ALL
"
}
)
;
}
}
async
sendNextMessage
(
target
action
=
{
}
)
{
let
{
data
}
=
action
;
const
msgs
=
this
.
_getUnblockedMessages
(
)
;
let
message
=
null
;
const
previewMsgs
=
this
.
state
.
messages
.
filter
(
item
=
>
item
.
provider
=
=
=
"
preview
"
)
;
if
(
previewMsgs
.
length
)
{
[
message
]
=
previewMsgs
;
}
else
{
message
=
await
this
.
_findMessage
(
msgs
target
data
)
;
}
await
this
.
setState
(
{
lastMessageId
:
message
?
message
.
id
:
null
}
)
;
await
this
.
_sendMessageToTarget
(
message
target
data
)
;
}
async
setMessageById
(
id
target
force
=
true
action
=
{
}
)
{
await
this
.
setState
(
{
lastMessageId
:
id
}
)
;
const
newMessage
=
this
.
getMessageById
(
id
)
;
await
this
.
_sendMessageToTarget
(
newMessage
target
force
action
.
data
)
;
}
async
blockById
(
idOrIds
)
{
const
idsToBlock
=
Array
.
isArray
(
idOrIds
)
?
idOrIds
:
[
idOrIds
]
;
await
this
.
setState
(
state
=
>
{
const
blockList
=
[
.
.
.
state
.
blockList
.
.
.
idsToBlock
]
;
this
.
_storage
.
set
(
"
blockList
"
blockList
)
;
return
{
blockList
}
;
}
)
;
}
openLinkIn
(
url
target
{
isPrivate
=
false
trusted
=
false
where
=
"
"
}
)
{
const
win
=
target
.
browser
.
ownerGlobal
;
const
params
=
{
private
:
isPrivate
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
}
;
if
(
trusted
)
{
win
.
openTrustedLinkIn
(
url
where
)
;
}
else
{
win
.
openLinkIn
(
url
where
params
)
;
}
}
_validPreviewEndpoint
(
url
)
{
try
{
const
endpoint
=
new
URL
(
url
)
;
if
(
!
WHITELIST_HOSTS
[
endpoint
.
host
]
)
{
Cu
.
reportError
(
The
preview
URL
host
{
endpoint
.
host
}
is
not
in
the
whitelist
.
)
;
}
if
(
endpoint
.
protocol
!
=
=
"
https
:
"
)
{
Cu
.
reportError
(
"
The
URL
protocol
is
not
https
.
"
)
;
}
return
(
endpoint
.
protocol
=
=
=
"
https
:
"
&
&
WHITELIST_HOSTS
[
endpoint
.
host
]
)
;
}
catch
(
e
)
{
return
false
;
}
}
async
_addPreviewEndpoint
(
url
)
{
const
providers
=
[
.
.
.
this
.
state
.
providers
]
;
if
(
this
.
_validPreviewEndpoint
(
url
)
&
&
!
providers
.
find
(
p
=
>
p
.
url
=
=
=
url
)
)
{
providers
.
push
(
{
id
:
"
preview
"
type
:
"
remote
"
url
updateCycleInMs
:
0
}
)
;
await
this
.
setState
(
{
providers
}
)
;
}
}
async
onMessage
(
{
data
:
action
target
}
)
{
switch
(
action
.
type
)
{
case
"
CONNECT_UI_REQUEST
"
:
case
"
GET_NEXT_MESSAGE
"
:
case
"
TRIGGER
"
:
await
this
.
waitForInitialized
;
if
(
action
.
data
&
&
action
.
data
.
endpoint
)
{
await
this
.
_addPreviewEndpoint
(
action
.
data
.
endpoint
.
url
)
;
}
await
this
.
loadMessagesFromAllProviders
(
)
;
await
this
.
sendNextMessage
(
target
action
)
;
break
;
case
ra
.
OPEN_PRIVATE_BROWSER_WINDOW
:
target
.
browser
.
ownerGlobal
.
OpenBrowserWindow
(
{
private
:
true
}
)
;
break
;
case
ra
.
OPEN_URL
:
this
.
openLinkIn
(
action
.
data
.
button_action_params
target
{
isPrivate
:
false
where
:
"
tabshifted
"
}
)
;
break
;
case
ra
.
OPEN_ABOUT_PAGE
:
this
.
openLinkIn
(
about
:
{
action
.
data
.
button_action_params
}
target
{
isPrivate
:
false
trusted
:
true
where
:
"
tab
"
}
)
;
break
;
case
"
BLOCK_MESSAGE_BY_ID
"
:
await
this
.
blockById
(
action
.
data
.
id
)
;
this
.
messageChannel
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
CLEAR_MESSAGE
"
data
:
{
id
:
action
.
data
.
id
}
}
)
;
break
;
case
"
BLOCK_BUNDLE
"
:
await
this
.
blockById
(
action
.
data
.
bundle
.
map
(
b
=
>
b
.
id
)
)
;
this
.
messageChannel
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
CLEAR_BUNDLE
"
}
)
;
break
;
case
"
UNBLOCK_MESSAGE_BY_ID
"
:
await
this
.
setState
(
state
=
>
{
const
blockList
=
[
.
.
.
state
.
blockList
]
;
blockList
.
splice
(
blockList
.
indexOf
(
action
.
data
.
id
)
1
)
;
this
.
_storage
.
set
(
"
blockList
"
blockList
)
;
return
{
blockList
}
;
}
)
;
break
;
case
"
UNBLOCK_BUNDLE
"
:
await
this
.
setState
(
state
=
>
{
const
blockList
=
[
.
.
.
state
.
blockList
]
;
for
(
let
message
of
action
.
data
.
bundle
)
{
blockList
.
splice
(
blockList
.
indexOf
(
message
.
id
)
1
)
;
}
this
.
_storage
.
set
(
"
blockList
"
blockList
)
;
return
{
blockList
}
;
}
)
;
break
;
case
"
OVERRIDE_MESSAGE
"
:
await
this
.
setMessageById
(
action
.
data
.
id
target
true
action
)
;
break
;
case
"
ADMIN_CONNECT_STATE
"
:
if
(
action
.
data
&
&
action
.
data
.
endpoint
)
{
this
.
_addPreviewEndpoint
(
action
.
data
.
endpoint
.
url
)
;
await
this
.
loadMessagesFromAllProviders
(
)
;
}
else
{
target
.
sendAsyncMessage
(
OUTGOING_MESSAGE_NAME
{
type
:
"
ADMIN_SET_STATE
"
data
:
this
.
state
}
)
;
}
break
;
}
}
}
this
.
_ASRouter
=
_ASRouter
;
this
.
ASRouter
=
new
_ASRouter
(
{
providers
:
[
{
id
:
"
onboarding
"
type
:
"
local
"
messages
:
OnboardingMessageProvider
.
getMessages
(
)
}
{
id
:
"
snippets
"
type
:
"
remote
"
url
:
SNIPPETS_ENDPOINT
updateCycleInMs
:
ONE_HOUR_IN_MS
*
4
}
]
}
)
;
const
EXPORTED_SYMBOLS
=
[
"
_ASRouter
"
"
ASRouter
"
"
MessageLoaderUtils
"
]
;
