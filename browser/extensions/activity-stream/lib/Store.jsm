"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
const
{
redux
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
vendor
/
Redux
.
jsm
"
{
}
)
;
const
{
actionTypes
:
at
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
const
{
reducers
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Reducers
.
jsm
"
{
}
)
;
const
{
ActivityStreamMessageChannel
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamMessageChannel
.
jsm
"
{
}
)
;
this
.
Store
=
class
Store
{
constructor
(
)
{
this
.
_middleware
=
this
.
_middleware
.
bind
(
this
)
;
[
"
dispatch
"
"
getState
"
"
subscribe
"
]
.
forEach
(
method
=
>
{
this
[
method
]
=
function
(
.
.
.
args
)
{
return
this
.
_store
[
method
]
(
.
.
.
args
)
;
}
.
bind
(
this
)
;
}
)
;
this
.
feeds
=
new
Set
(
)
;
this
.
_messageChannel
=
new
ActivityStreamMessageChannel
(
{
dispatch
:
this
.
dispatch
}
)
;
this
.
_store
=
redux
.
createStore
(
redux
.
combineReducers
(
reducers
)
redux
.
applyMiddleware
(
this
.
_middleware
this
.
_messageChannel
.
middleware
)
)
;
}
_middleware
(
store
)
{
return
next
=
>
action
=
>
{
next
(
action
)
;
this
.
feeds
.
forEach
(
s
=
>
s
.
onAction
&
&
s
.
onAction
(
action
)
)
;
}
;
}
init
(
feeds
)
{
if
(
feeds
)
{
feeds
.
forEach
(
subscriber
=
>
{
subscriber
.
store
=
this
;
this
.
feeds
.
add
(
subscriber
)
;
}
)
;
}
this
.
_messageChannel
.
createChannel
(
)
;
this
.
dispatch
(
{
type
:
at
.
INIT
}
)
;
}
uninit
(
)
{
this
.
feeds
.
clear
(
)
;
this
.
dispatch
(
{
type
:
at
.
UNINIT
}
)
;
this
.
_messageChannel
.
destroyChannel
(
)
;
}
}
;
this
.
EXPORTED_SYMBOLS
=
[
"
Store
"
]
;
