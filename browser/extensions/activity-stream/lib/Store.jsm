"
use
strict
"
;
const
{
ActivityStreamMessageChannel
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamMessageChannel
.
jsm
"
{
}
)
;
const
{
ActivityStreamStorage
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamStorage
.
jsm
"
{
}
)
;
const
{
Prefs
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamPrefs
.
jsm
"
{
}
)
;
const
{
reducers
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Reducers
.
jsm
"
{
}
)
;
const
{
redux
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
vendor
/
Redux
.
jsm
"
{
}
)
;
this
.
Store
=
class
Store
{
constructor
(
)
{
this
.
_middleware
=
this
.
_middleware
.
bind
(
this
)
;
for
(
const
method
of
[
"
dispatch
"
"
getState
"
"
subscribe
"
]
)
{
this
[
method
]
=
(
.
.
.
args
)
=
>
this
.
_store
[
method
]
(
.
.
.
args
)
;
}
this
.
feeds
=
new
Map
(
)
;
this
.
_prefs
=
new
Prefs
(
)
;
this
.
_messageChannel
=
new
ActivityStreamMessageChannel
(
{
dispatch
:
this
.
dispatch
}
)
;
this
.
_store
=
redux
.
createStore
(
redux
.
combineReducers
(
reducers
)
redux
.
applyMiddleware
(
this
.
_middleware
this
.
_messageChannel
.
middleware
)
)
;
this
.
storage
=
null
;
}
_middleware
(
)
{
return
next
=
>
action
=
>
{
next
(
action
)
;
for
(
const
store
of
this
.
feeds
.
values
(
)
)
{
if
(
store
.
onAction
)
{
store
.
onAction
(
action
)
;
}
}
}
;
}
initFeed
(
feedName
initAction
)
{
const
feed
=
this
.
_feedFactories
.
get
(
feedName
)
(
)
;
feed
.
store
=
this
;
this
.
feeds
.
set
(
feedName
feed
)
;
if
(
initAction
&
&
feed
.
onAction
)
{
feed
.
onAction
(
initAction
)
;
}
}
uninitFeed
(
feedName
uninitAction
)
{
const
feed
=
this
.
feeds
.
get
(
feedName
)
;
if
(
!
feed
)
{
return
;
}
if
(
uninitAction
&
&
feed
.
onAction
)
{
feed
.
onAction
(
uninitAction
)
;
}
this
.
feeds
.
delete
(
feedName
)
;
}
onPrefChanged
(
name
value
)
{
if
(
this
.
_feedFactories
.
has
(
name
)
)
{
if
(
value
)
{
this
.
initFeed
(
name
this
.
_initAction
)
;
}
else
{
this
.
uninitFeed
(
name
this
.
_uninitAction
)
;
}
}
}
async
init
(
feedFactories
initAction
uninitAction
)
{
this
.
_feedFactories
=
feedFactories
;
this
.
_initAction
=
initAction
;
this
.
_uninitAction
=
uninitAction
;
const
telemetryKey
=
"
feeds
.
telemetry
"
;
if
(
feedFactories
.
has
(
telemetryKey
)
&
&
this
.
_prefs
.
get
(
telemetryKey
)
)
{
this
.
initFeed
(
telemetryKey
)
;
}
await
this
.
_initIndexedDB
(
telemetryKey
)
;
for
(
const
pref
of
feedFactories
.
keys
(
)
)
{
if
(
pref
!
=
=
telemetryKey
&
&
this
.
_prefs
.
get
(
pref
)
)
{
this
.
initFeed
(
pref
)
;
}
}
this
.
_prefs
.
observeBranch
(
this
)
;
this
.
_messageChannel
.
createChannel
(
)
;
if
(
initAction
)
{
this
.
dispatch
(
initAction
)
;
}
this
.
_messageChannel
.
simulateMessagesForExistingTabs
(
)
;
}
async
_initIndexedDB
(
telemetryKey
)
{
this
.
dbStorage
=
new
ActivityStreamStorage
(
{
storeNames
:
[
"
sectionPrefs
"
"
snippets
"
]
telemetry
:
this
.
feeds
.
get
(
telemetryKey
)
}
)
;
await
this
.
dbStorage
.
db
;
}
uninit
(
)
{
if
(
this
.
_uninitAction
)
{
this
.
dispatch
(
this
.
_uninitAction
)
;
}
this
.
_prefs
.
ignoreBranch
(
this
)
;
this
.
feeds
.
clear
(
)
;
this
.
_feedFactories
=
null
;
this
.
_messageChannel
.
destroyChannel
(
)
;
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
Store
"
]
;
