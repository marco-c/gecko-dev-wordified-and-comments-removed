"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
const
{
redux
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
vendor
/
Redux
.
jsm
"
{
}
)
;
const
{
reducers
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Reducers
.
jsm
"
{
}
)
;
const
{
ActivityStreamMessageChannel
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamMessageChannel
.
jsm
"
{
}
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Prefs
"
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamPrefs
.
jsm
"
)
;
this
.
Store
=
class
Store
{
constructor
(
)
{
this
.
_middleware
=
this
.
_middleware
.
bind
(
this
)
;
[
"
dispatch
"
"
getState
"
"
subscribe
"
]
.
forEach
(
method
=
>
{
this
[
method
]
=
function
(
.
.
.
args
)
{
return
this
.
_store
[
method
]
(
.
.
.
args
)
;
}
.
bind
(
this
)
;
}
)
;
this
.
feeds
=
new
Map
(
)
;
this
.
_feedFactories
=
null
;
this
.
_prefs
=
new
Prefs
(
)
;
this
.
_prefHandlers
=
new
Map
(
)
;
this
.
_messageChannel
=
new
ActivityStreamMessageChannel
(
{
dispatch
:
this
.
dispatch
}
)
;
this
.
_store
=
redux
.
createStore
(
redux
.
combineReducers
(
reducers
)
redux
.
applyMiddleware
(
this
.
_middleware
this
.
_messageChannel
.
middleware
)
)
;
}
_middleware
(
store
)
{
return
next
=
>
action
=
>
{
next
(
action
)
;
this
.
feeds
.
forEach
(
s
=
>
s
.
onAction
&
&
s
.
onAction
(
action
)
)
;
}
;
}
initFeed
(
feedName
)
{
const
feed
=
this
.
_feedFactories
[
feedName
]
(
)
;
feed
.
store
=
this
;
this
.
feeds
.
set
(
feedName
feed
)
;
}
uninitFeed
(
feedName
)
{
const
feed
=
this
.
feeds
.
get
(
feedName
)
;
if
(
!
feed
)
{
return
;
}
if
(
feed
.
uninit
)
{
feed
.
uninit
(
)
;
}
this
.
feeds
.
delete
(
feedName
)
;
}
maybeStartFeedAndListenForPrefChanges
(
prefName
)
{
const
onPrefChanged
=
isEnabled
=
>
(
isEnabled
?
this
.
initFeed
(
prefName
)
:
this
.
uninitFeed
(
prefName
)
)
;
this
.
_prefHandlers
.
set
(
prefName
onPrefChanged
)
;
this
.
_prefs
.
observe
(
prefName
onPrefChanged
)
;
if
(
this
.
_prefs
.
get
(
prefName
)
)
{
this
.
initFeed
(
prefName
)
;
}
}
init
(
feedConstructors
)
{
if
(
feedConstructors
)
{
this
.
_feedFactories
=
feedConstructors
;
for
(
const
pref
of
Object
.
keys
(
feedConstructors
)
)
{
this
.
maybeStartFeedAndListenForPrefChanges
(
pref
)
;
}
}
this
.
_messageChannel
.
createChannel
(
)
;
}
uninit
(
)
{
this
.
feeds
.
forEach
(
feed
=
>
this
.
uninitFeed
(
feed
)
)
;
this
.
_prefHandlers
.
forEach
(
(
handler
pref
)
=
>
this
.
_prefs
.
ignore
(
pref
handler
)
)
;
this
.
_prefHandlers
.
clear
(
)
;
this
.
_feedFactories
=
null
;
this
.
feeds
.
clear
(
)
;
this
.
_messageChannel
.
destroyChannel
(
)
;
}
}
;
this
.
EXPORTED_SYMBOLS
=
[
"
Store
"
]
;
