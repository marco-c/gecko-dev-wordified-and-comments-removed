"
use
strict
"
;
const
{
actionCreators
:
ac
actionTypes
:
at
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
const
{
Prefs
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStreamPrefs
.
jsm
"
{
}
)
;
const
{
PrerenderData
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
PrerenderData
.
jsm
"
{
}
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
ONBOARDING_FINISHED_PREF
=
"
browser
.
onboarding
.
notification
.
finished
"
;
var
PrefsFeed
=
class
PrefsFeed
{
constructor
(
prefMap
)
{
this
.
_prefMap
=
prefMap
;
this
.
_prefs
=
new
Prefs
(
)
;
}
_setPrerenderPref
(
name
)
{
this
.
_prefs
.
set
(
"
prerender
"
PrerenderData
.
arePrefsValid
(
pref
=
>
this
.
_prefs
.
get
(
pref
)
)
)
;
}
_checkPrerender
(
name
)
{
if
(
PrerenderData
.
invalidatingPrefs
.
includes
(
name
)
)
{
this
.
_setPrerenderPref
(
)
;
}
}
_initOnboardingPref
(
)
{
const
snippetsEnabled
=
this
.
_prefs
.
get
(
"
feeds
.
snippets
"
)
;
if
(
!
snippetsEnabled
)
{
this
.
setOnboardingDisabledDefault
(
true
)
;
}
}
setOnboardingDisabledDefault
(
value
)
{
const
branch
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
branch
.
setBoolPref
(
ONBOARDING_FINISHED_PREF
value
)
;
}
onPrefChanged
(
name
value
)
{
if
(
this
.
_prefMap
.
has
(
name
)
)
{
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
PREF_CHANGED
data
:
{
name
value
}
}
)
)
;
}
this
.
_checkPrerender
(
name
)
;
if
(
name
=
=
=
"
feeds
.
snippets
"
)
{
this
.
setOnboardingDisabledDefault
(
!
value
)
;
}
}
init
(
)
{
this
.
_prefs
.
observeBranch
(
this
)
;
const
values
=
{
}
;
for
(
const
name
of
this
.
_prefMap
.
keys
(
)
)
{
values
[
name
]
=
this
.
_prefs
.
get
(
name
)
;
}
this
.
store
.
dispatch
(
ac
.
BroadcastToContent
(
{
type
:
at
.
PREFS_INITIAL_VALUES
data
:
values
}
)
)
;
this
.
_setPrerenderPref
(
)
;
this
.
_initOnboardingPref
(
)
;
}
removeListeners
(
)
{
this
.
_prefs
.
ignoreBranch
(
this
)
;
}
onAction
(
action
)
{
switch
(
action
.
type
)
{
case
at
.
INIT
:
this
.
init
(
)
;
break
;
case
at
.
UNINIT
:
this
.
removeListeners
(
)
;
this
.
setOnboardingDisabledDefault
(
false
)
;
break
;
case
at
.
SET_PREF
:
this
.
_prefs
.
set
(
action
.
data
.
name
action
.
data
.
value
)
;
break
;
case
at
.
DISABLE_ONBOARDING
:
this
.
setOnboardingDisabledDefault
(
true
)
;
break
;
}
}
}
;
var
EXPORTED_SYMBOLS
=
[
"
PrefsFeed
"
]
;
