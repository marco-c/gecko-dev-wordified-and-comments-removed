Cu
.
importGlobalProperties
(
[
"
fetch
"
"
URL
"
]
)
;
const
TIPPYTOP_JSON_PATH
=
"
resource
:
/
/
activity
-
stream
/
data
/
content
/
tippytop
/
top_sites
.
json
"
;
const
TIPPYTOP_URL_PREFIX
=
"
resource
:
/
/
activity
-
stream
/
data
/
content
/
tippytop
/
images
/
"
;
function
getDomain
(
url
)
{
let
domain
;
try
{
domain
=
new
URL
(
url
)
.
hostname
;
}
catch
(
ex
)
{
}
if
(
domain
&
&
domain
.
startsWith
(
"
www
.
"
)
)
{
domain
=
domain
.
slice
(
4
)
;
}
return
domain
;
}
this
.
TippyTopProvider
=
class
TippyTopProvider
{
constructor
(
)
{
this
.
_sitesByDomain
=
new
Map
(
)
;
this
.
initialized
=
false
;
}
async
init
(
)
{
try
{
for
(
const
site
of
await
(
await
fetch
(
TIPPYTOP_JSON_PATH
)
)
.
json
(
)
)
{
for
(
const
url
of
site
.
url
?
[
site
.
url
]
:
site
.
urls
|
|
[
]
)
{
this
.
_sitesByDomain
.
set
(
getDomain
(
url
)
site
)
;
}
}
this
.
initialized
=
true
;
}
catch
(
error
)
{
Cu
.
reportError
(
"
Failed
to
load
tippy
top
manifest
.
"
)
;
}
}
processSite
(
site
)
{
const
tippyTop
=
this
.
_sitesByDomain
.
get
(
getDomain
(
site
.
url
)
)
;
if
(
tippyTop
)
{
site
.
tippyTopIcon
=
TIPPYTOP_URL_PREFIX
+
tippyTop
.
image_url
;
site
.
backgroundColor
=
tippyTop
.
background_color
;
}
return
site
;
}
}
;
const
EXPORTED_SYMBOLS
=
[
"
TippyTopProvider
"
"
getDomain
"
]
;
