ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
components
-
utils
/
FilterExpressions
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ProfileAge
"
"
resource
:
/
/
gre
/
modules
/
ProfileAge
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
)
;
const
FXA_USERNAME_PREF
=
"
services
.
sync
.
username
"
;
const
ONBOARDING_EXPERIMENT_PREF
=
"
browser
.
newtabpage
.
activity
-
stream
.
asrouterOnboardingCohort
"
;
function
removeRandomItemFromArray
(
arr
)
{
return
arr
.
splice
(
Math
.
floor
(
Math
.
random
(
)
*
arr
.
length
)
1
)
[
0
]
;
}
const
TargetingGetters
=
{
get
profileAgeCreated
(
)
{
return
new
ProfileAge
(
null
null
)
.
created
;
}
get
profileAgeReset
(
)
{
return
new
ProfileAge
(
null
null
)
.
reset
;
}
get
hasFxAccount
(
)
{
return
Services
.
prefs
.
prefHasUserValue
(
FXA_USERNAME_PREF
)
;
}
get
isInExperimentCohort
(
)
{
return
Services
.
prefs
.
getIntPref
(
ONBOARDING_EXPERIMENT_PREF
0
)
;
}
}
;
function
EnvironmentTargeting
(
target
)
{
return
{
isFirstRun
:
target
.
url
=
=
=
"
about
:
welcome
"
}
;
}
this
.
ASRouterTargeting
=
{
Environment
:
TargetingGetters
isMatch
(
filterExpression
target
context
=
this
.
Environment
)
{
return
FilterExpressions
.
eval
(
filterExpression
{
.
.
.
context
.
.
.
EnvironmentTargeting
(
target
)
}
)
;
}
async
findMatchingMessage
(
messages
target
context
)
{
const
arrayOfItems
=
[
.
.
.
messages
]
;
let
match
;
let
candidate
;
while
(
!
match
&
&
arrayOfItems
.
length
)
{
candidate
=
removeRandomItemFromArray
(
arrayOfItems
)
;
if
(
candidate
&
&
(
!
candidate
.
targeting
|
|
await
this
.
isMatch
(
candidate
.
targeting
target
context
)
)
)
{
match
=
candidate
;
}
}
return
match
;
}
}
;
this
.
EXPORTED_SYMBOLS
=
[
"
ASRouterTargeting
"
"
removeRandomItemFromArray
"
]
;
