"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
actionUtils
:
au
actionCreators
:
ac
actionTypes
:
at
}
=
Cu
.
import
(
"
resource
:
/
/
activity
-
stream
/
common
/
Actions
.
jsm
"
{
}
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AboutNewTab
"
"
resource
:
/
/
/
modules
/
AboutNewTab
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
RemotePages
"
"
resource
:
/
/
gre
/
modules
/
RemotePageManager
.
jsm
"
)
;
const
ABOUT_NEW_TAB_URL
=
"
about
:
newtab
"
;
const
DEFAULT_OPTIONS
=
{
dispatch
(
action
)
{
throw
new
Error
(
\
nMessageChannel
:
Received
action
{
action
.
type
}
but
no
dispatcher
was
defined
.
\
n
)
;
}
pageURL
:
ABOUT_NEW_TAB_URL
outgoingMessageName
:
"
ActivityStream
:
MainToContent
"
incomingMessageName
:
"
ActivityStream
:
ContentToMain
"
}
;
this
.
ActivityStreamMessageChannel
=
class
ActivityStreamMessageChannel
{
constructor
(
options
=
{
}
)
{
Object
.
assign
(
this
DEFAULT_OPTIONS
options
)
;
this
.
channel
=
null
;
this
.
middleware
=
this
.
middleware
.
bind
(
this
)
;
this
.
onMessage
=
this
.
onMessage
.
bind
(
this
)
;
this
.
onNewTabLoad
=
this
.
onNewTabLoad
.
bind
(
this
)
;
this
.
onNewTabUnload
=
this
.
onNewTabUnload
.
bind
(
this
)
;
}
middleware
(
store
)
{
return
next
=
>
action
=
>
{
if
(
!
this
.
channel
)
{
next
(
action
)
;
return
;
}
if
(
au
.
isSendToContent
(
action
)
)
{
this
.
send
(
action
)
;
}
else
if
(
au
.
isBroadcastToContent
(
action
)
)
{
this
.
broadcast
(
action
)
;
}
next
(
action
)
;
}
;
}
onActionFromContent
(
action
targetId
)
{
this
.
dispatch
(
ac
.
SendToMain
(
action
{
fromTarget
:
targetId
}
)
)
;
}
broadcast
(
action
)
{
this
.
channel
.
sendAsyncMessage
(
this
.
outgoingMessageName
action
)
;
}
send
(
action
)
{
const
targetId
=
action
.
meta
&
&
action
.
meta
.
toTarget
;
const
target
=
this
.
getTargetById
(
targetId
)
;
if
(
!
target
)
{
return
;
}
target
.
sendAsyncMessage
(
this
.
outgoingMessageName
action
)
;
}
getTargetById
(
id
)
{
for
(
let
port
of
this
.
channel
.
messagePorts
)
{
if
(
port
.
portID
=
=
=
id
)
{
return
port
;
}
}
return
null
;
}
createChannel
(
)
{
if
(
this
.
pageURL
=
=
=
ABOUT_NEW_TAB_URL
)
{
AboutNewTab
.
override
(
)
;
}
this
.
channel
=
new
RemotePages
(
this
.
pageURL
)
;
this
.
channel
.
addMessageListener
(
"
RemotePage
:
Load
"
this
.
onNewTabLoad
)
;
this
.
channel
.
addMessageListener
(
"
RemotePage
:
Unload
"
this
.
onNewTabUnload
)
;
this
.
channel
.
addMessageListener
(
this
.
incomingMessageName
this
.
onMessage
)
;
}
destroyChannel
(
)
{
this
.
channel
.
destroy
(
)
;
this
.
channel
=
null
;
if
(
this
.
pageURL
=
=
=
ABOUT_NEW_TAB_URL
)
{
AboutNewTab
.
reset
(
)
;
}
}
onNewTabLoad
(
msg
)
{
this
.
onActionFromContent
(
{
type
:
at
.
NEW_TAB_LOAD
}
msg
.
target
.
portID
)
;
}
onNewTabUnload
(
msg
)
{
this
.
onActionFromContent
(
{
type
:
at
.
NEW_TAB_UNLOAD
}
msg
.
target
.
portID
)
;
}
onMessage
(
msg
)
{
const
{
portID
}
=
msg
.
target
;
if
(
!
msg
.
data
|
|
!
msg
.
data
.
type
)
{
Cu
.
reportError
(
new
Error
(
Received
an
improperly
formatted
message
from
{
portID
}
)
)
;
return
;
}
let
action
=
{
}
;
Object
.
assign
(
action
msg
.
data
)
;
action
.
_target
=
msg
.
target
;
this
.
onActionFromContent
(
action
portID
)
;
}
}
this
.
DEFAULT_OPTIONS
=
DEFAULT_OPTIONS
;
this
.
EXPORTED_SYMBOLS
=
[
"
ActivityStreamMessageChannel
"
"
DEFAULT_OPTIONS
"
]
;
