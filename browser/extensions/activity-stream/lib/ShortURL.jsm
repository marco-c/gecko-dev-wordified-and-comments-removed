const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
IDNService
"
"
mozilla
.
org
/
network
/
idn
-
service
;
1
"
"
nsIIDNService
"
)
;
Cu
.
importGlobalProperties
(
[
"
URL
"
]
)
;
function
handleIDNHost
(
hostname
)
{
try
{
return
IDNService
.
convertToDisplayIDN
(
hostname
{
}
)
;
}
catch
(
e
)
{
return
hostname
;
}
}
function
getETLD
(
url
)
{
try
{
return
Services
.
eTLD
.
getPublicSuffix
(
Services
.
io
.
newURI
(
url
)
)
;
}
catch
(
err
)
{
return
"
"
;
}
}
this
.
getETLD
=
getETLD
;
this
.
shortURL
=
function
shortURL
(
link
)
{
if
(
!
link
.
url
&
&
!
link
.
hostname
)
{
return
"
"
;
}
const
eTLD
=
link
.
eTLD
|
|
getETLD
(
link
.
url
)
;
const
hostname
=
(
link
.
hostname
|
|
new
URL
(
link
.
url
)
.
hostname
)
.
replace
(
/
^
www
\
.
/
i
"
"
)
;
const
eTLDLength
=
(
eTLD
|
|
"
"
)
.
length
;
const
eTLDExtra
=
eTLDLength
>
0
?
-
(
eTLDLength
+
1
)
:
Infinity
;
return
handleIDNHost
(
hostname
.
slice
(
0
eTLDExtra
)
.
toLowerCase
(
)
|
|
hostname
)
|
|
link
.
title
|
|
link
.
url
;
}
;
this
.
EXPORTED_SYMBOLS
=
[
"
shortURL
"
"
getETLD
"
]
;
