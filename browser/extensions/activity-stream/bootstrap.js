"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
"
fetch
"
]
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
ACTIVITY_STREAM_ENABLED_PREF
=
"
browser
.
newtabpage
.
activity
-
stream
.
enabled
"
;
const
BROWSER_READY_NOTIFICATION
=
"
sessionstore
-
windows
-
restored
"
;
const
PREF_CHANGED_TOPIC
=
"
nsPref
:
changed
"
;
const
REASON_SHUTDOWN_ON_PREF_CHANGE
=
"
PREF_OFF
"
;
const
REASON_STARTUP_ON_PREF_CHANGE
=
"
PREF_ON
"
;
const
RESOURCE_BASE
=
"
resource
:
/
/
activity
-
stream
"
;
const
ACTIVITY_STREAM_OPTIONS
=
{
newTabURL
:
"
about
:
newtab
"
}
;
let
activityStream
;
let
modulesToUnload
=
new
Set
(
)
;
let
startupData
;
let
startupReason
;
let
waitingForBrowserReady
=
true
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ActivityStream
"
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStream
.
jsm
"
null
null
(
)
=
>
{
const
processListing
=
async
(
uri
cb
)
=
>
(
await
(
await
fetch
(
uri
)
)
.
text
(
)
)
.
split
(
"
\
n
"
)
.
slice
(
2
)
.
forEach
(
line
=
>
cb
(
line
.
split
(
"
"
)
.
slice
(
1
)
)
)
;
processListing
(
RESOURCE_BASE
(
[
directory
type
]
)
=
>
{
if
(
type
=
=
=
"
DIRECTORY
"
)
{
const
subDir
=
{
RESOURCE_BASE
}
/
{
directory
}
;
processListing
(
subDir
(
[
name
]
)
=
>
{
if
(
name
&
&
name
.
search
(
/
\
.
jsm
/
)
!
=
=
-
1
)
{
modulesToUnload
.
add
(
{
subDir
}
/
{
name
}
)
;
}
}
)
;
}
}
)
;
}
)
;
function
init
(
reason
)
{
if
(
activityStream
&
&
activityStream
.
initialized
)
{
return
;
}
const
options
=
Object
.
assign
(
{
}
startupData
|
|
{
}
ACTIVITY_STREAM_OPTIONS
)
;
activityStream
=
new
ActivityStream
(
options
)
;
try
{
activityStream
.
init
(
reason
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
function
uninit
(
reason
)
{
if
(
activityStream
)
{
activityStream
.
uninit
(
reason
)
;
activityStream
=
null
;
}
}
function
onPrefChanged
(
)
{
if
(
Services
.
prefs
.
getBoolPref
(
ACTIVITY_STREAM_ENABLED_PREF
false
)
)
{
init
(
REASON_STARTUP_ON_PREF_CHANGE
)
;
}
else
{
uninit
(
REASON_SHUTDOWN_ON_PREF_CHANGE
)
;
}
}
function
migratePref
(
oldPrefName
cbIfNotDefault
)
{
if
(
!
Services
.
prefs
.
prefHasUserValue
(
oldPrefName
)
)
{
return
;
}
let
prefGetter
;
switch
(
Services
.
prefs
.
getPrefType
(
oldPrefName
)
)
{
case
Services
.
prefs
.
PREF_BOOL
:
prefGetter
=
"
getBoolPref
"
;
break
;
case
Services
.
prefs
.
PREF_INT
:
prefGetter
=
"
getIntPref
"
;
break
;
case
Services
.
prefs
.
PREF_STRING
:
prefGetter
=
"
getStringPref
"
;
break
;
}
cbIfNotDefault
(
Services
.
prefs
[
prefGetter
]
(
oldPrefName
)
)
;
Services
.
prefs
.
clearUserPref
(
oldPrefName
)
;
}
function
onBrowserReady
(
)
{
waitingForBrowserReady
=
false
;
Services
.
prefs
.
addObserver
(
ACTIVITY_STREAM_ENABLED_PREF
observe
)
;
if
(
Services
.
prefs
.
getBoolPref
(
ACTIVITY_STREAM_ENABLED_PREF
false
)
)
{
init
(
startupReason
)
;
}
migratePref
(
"
browser
.
newtabpage
.
rows
"
rows
=
>
{
if
(
rows
<
=
0
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
showTopSites
"
false
)
;
}
else
{
Services
.
prefs
.
setIntPref
(
"
browser
.
newtabpage
.
activity
-
stream
.
topSitesCount
"
rows
*
6
)
;
}
}
)
;
}
function
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
BROWSER_READY_NOTIFICATION
:
Services
.
obs
.
removeObserver
(
observe
BROWSER_READY_NOTIFICATION
)
;
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
onBrowserReady
(
)
)
;
break
;
case
PREF_CHANGED_TOPIC
:
if
(
data
=
=
=
ACTIVITY_STREAM_ENABLED_PREF
)
{
onPrefChanged
(
)
;
}
break
;
}
}
this
.
install
=
function
install
(
data
reason
)
{
}
;
this
.
startup
=
function
startup
(
data
reason
)
{
startupData
=
data
;
startupReason
=
reason
;
if
(
Services
.
startup
.
startingUp
)
{
Services
.
obs
.
addObserver
(
observe
BROWSER_READY_NOTIFICATION
)
;
}
else
{
onBrowserReady
(
)
;
}
}
;
this
.
shutdown
=
function
shutdown
(
data
reason
)
{
startupData
=
null
;
startupReason
=
null
;
uninit
(
reason
)
;
if
(
waitingForBrowserReady
)
{
Services
.
obs
.
removeObserver
(
observe
BROWSER_READY_NOTIFICATION
)
;
}
else
{
Services
.
prefs
.
removeObserver
(
ACTIVITY_STREAM_ENABLED_PREF
observe
)
;
}
modulesToUnload
.
forEach
(
Cu
.
unload
)
;
}
;
this
.
uninstall
=
function
uninstall
(
data
reason
)
{
if
(
activityStream
)
{
activityStream
.
uninstall
(
reason
)
;
activityStream
=
null
;
}
}
;
