const
loaderUtils
=
require
(
"
loader
-
utils
"
)
;
const
QUOTE_REGEX_STRING
=
"
[
'
|
\
"
]
{
1
}
"
;
const
hasOnlyExcludeFlags
=
query
=
>
Object
.
keys
(
query
)
.
filter
(
key
=
>
query
[
key
]
=
=
=
true
)
.
length
=
=
=
0
;
const
escapePath
=
path
=
>
path
.
replace
(
"
/
"
"
\
\
/
"
)
;
function
createRequireStringRegex
(
query
)
{
const
regexArray
=
[
]
;
if
(
Object
.
keys
(
query
)
.
length
=
=
=
0
)
{
regexArray
.
push
(
"
(
[
^
\
\
)
]
+
)
"
)
;
}
else
if
(
hasOnlyExcludeFlags
(
query
)
)
{
Object
.
keys
(
query
)
.
forEach
(
key
=
>
regexArray
.
push
(
(
?
!
{
QUOTE_REGEX_STRING
}
{
escapePath
(
key
)
}
)
)
)
;
regexArray
.
push
(
"
(
[
^
\
\
)
]
+
)
"
)
;
}
else
{
regexArray
.
push
(
(
{
QUOTE_REGEX_STRING
}
(
)
;
regexArray
.
push
(
Object
.
keys
(
query
)
.
map
(
key
=
>
escapePath
(
key
)
)
.
join
(
"
|
"
)
)
;
regexArray
.
push
(
)
{
QUOTE_REGEX_STRING
}
)
)
;
}
regexArray
.
unshift
(
"
require
\
\
(
"
)
;
regexArray
.
push
(
"
\
\
)
"
)
;
return
new
RegExp
(
regexArray
.
join
(
"
"
)
"
g
"
)
;
}
module
.
exports
=
function
inject
(
src
)
{
if
(
this
.
cacheable
)
{
this
.
cacheable
(
)
;
}
const
regex
=
createRequireStringRegex
(
loaderUtils
.
parseQuery
(
this
.
query
)
)
;
return
module
.
exports
=
function
inject
(
injections
)
{
var
module
=
{
exports
:
{
}
}
;
var
exports
=
module
.
exports
;
{
src
.
replace
(
regex
"
(
injections
[
1
]
|
|
/
*
istanbul
ignore
next
*
/
&
)
"
)
}
return
module
.
exports
;
}
\
n
;
}
;
