"
use
strict
"
;
function
popPrefs
(
)
{
return
SpecialPowers
.
popPrefEnv
(
)
;
}
function
pushPrefs
(
.
.
.
prefs
)
{
return
SpecialPowers
.
pushPrefEnv
(
{
set
:
prefs
}
)
;
}
const
ACTIVITY_STREAM_PREF
=
"
browser
.
newtabpage
.
activity
-
stream
.
enabled
"
;
pushPrefs
(
[
ACTIVITY_STREAM_PREF
true
]
)
;
gBrowser
.
removePreloadedBrowser
(
)
;
async
function
waitForPreloaded
(
browser
)
{
let
readyState
=
await
ContentTask
.
spawn
(
browser
{
}
(
)
=
>
content
.
document
.
readyState
)
;
if
(
readyState
!
=
=
"
complete
"
)
{
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
}
}
function
test_newtab
(
testInfo
)
{
let
{
before
test
:
contentTask
after
}
=
testInfo
;
if
(
!
before
)
{
before
=
(
)
=
>
(
{
}
)
;
}
if
(
!
contentTask
)
{
contentTask
=
testInfo
;
}
if
(
!
after
)
{
after
=
(
)
=
>
{
}
;
}
let
needPopPrefs
=
false
;
let
scopedPushPrefs
=
async
(
.
.
.
args
)
=
>
{
needPopPrefs
=
true
;
await
pushPrefs
(
.
.
.
args
)
;
}
;
let
scopedPopPrefs
=
async
(
)
=
>
{
if
(
needPopPrefs
)
{
await
popPrefs
(
)
;
}
}
;
let
testTask
=
async
(
)
=
>
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
newtab
"
false
)
;
let
browser
=
tab
.
linkedBrowser
;
await
waitForPreloaded
(
browser
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
ContentTask
.
spawn
(
browser
{
}
(
)
=
>
content
.
document
.
getElementById
(
"
root
"
)
.
children
.
length
)
"
Should
render
activity
stream
content
"
)
;
try
{
let
contentArg
=
await
before
(
{
pushPrefs
:
scopedPushPrefs
tab
}
)
;
let
contentResult
=
await
ContentTask
.
spawn
(
browser
contentArg
contentTask
)
;
await
after
(
contentResult
)
;
}
finally
{
await
scopedPopPrefs
(
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
;
Object
.
defineProperty
(
testTask
"
name
"
{
value
:
contentTask
.
name
}
)
;
add_task
(
testTask
)
;
}
