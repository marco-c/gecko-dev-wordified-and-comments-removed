class
GlobalOverrider
{
constructor
(
)
{
this
.
originalGlobals
=
new
Map
(
)
;
this
.
sandbox
=
sinon
.
sandbox
.
create
(
)
;
}
_override
(
key
value
)
{
if
(
key
=
=
=
"
Components
"
)
{
try
{
global
[
key
]
=
value
;
}
catch
(
e
)
{
}
return
;
}
if
(
!
this
.
originalGlobals
.
has
(
key
)
)
{
this
.
originalGlobals
.
set
(
key
global
[
key
]
)
;
}
global
[
key
]
=
value
;
}
set
(
key
value
)
{
if
(
!
value
&
&
typeof
key
=
=
=
"
object
"
)
{
const
overrides
=
key
;
Object
.
keys
(
overrides
)
.
forEach
(
k
=
>
this
.
_override
(
k
overrides
[
k
]
)
)
;
}
else
{
this
.
_override
(
key
value
)
;
}
}
reset
(
)
{
this
.
sandbox
.
reset
(
)
;
}
restore
(
)
{
this
.
sandbox
.
restore
(
)
;
this
.
originalGlobals
.
forEach
(
(
value
key
)
=
>
{
global
[
key
]
=
value
;
}
)
;
}
}
function
FakePrefs
(
args
)
{
if
(
args
)
{
if
(
"
initHook
"
in
args
)
{
args
.
initHook
.
call
(
this
)
;
}
}
}
FakePrefs
.
prototype
=
{
observers
:
{
}
observe
(
prefName
callback
)
{
this
.
observers
[
prefName
]
=
callback
;
}
ignore
(
prefName
callback
)
{
if
(
prefName
in
this
.
observers
)
{
delete
this
.
observers
[
prefName
]
;
}
}
prefs
:
{
}
get
(
prefName
)
{
return
this
.
prefs
[
prefName
]
;
}
set
(
prefName
value
)
{
this
.
prefs
[
prefName
]
=
value
;
if
(
prefName
in
this
.
observers
)
{
this
.
observers
[
prefName
]
(
value
)
;
}
}
}
;
function
addNumberReducer
(
prevState
=
0
action
)
{
return
action
.
type
=
=
=
"
ADD
"
?
prevState
+
action
.
data
:
prevState
;
}
module
.
exports
=
{
FakePrefs
GlobalOverrider
addNumberReducer
}
;
