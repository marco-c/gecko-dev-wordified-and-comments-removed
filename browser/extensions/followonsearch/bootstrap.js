"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
UpdateUtils
"
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
TelemetryEnvironment
"
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
)
;
const
REPORTING_THRESHOLD
=
{
"
nightly
"
:
0
.
1
"
beta
"
:
0
.
1
"
release
"
:
0
.
1
}
;
const
kPrefPrefix
=
"
extensions
.
followonsearch
.
"
;
const
PREF_COHORT_SAMPLE
=
{
kPrefPrefix
}
cohortSample
;
const
PREF_LOGGING
=
{
kPrefPrefix
}
logging
;
const
PREF_CHANNEL_OVERRIDE
=
{
kPrefPrefix
}
override
;
const
kExtensionID
=
"
followonsearch
mozilla
.
com
"
;
const
kSaveTelemetryMsg
=
{
kExtensionID
}
:
save
-
telemetry
;
const
kShutdownMsg
=
{
kExtensionID
}
:
shutdown
;
const
frameScript
=
chrome
:
/
/
followonsearch
/
content
/
followonsearch
-
fs
.
js
?
q
=
{
Math
.
random
(
)
}
;
const
validSearchTypes
=
[
"
follow
-
on
"
"
sap
"
]
;
var
gLoggingEnabled
=
false
;
var
gTelemetryActivated
=
false
;
function
log
(
message
)
{
if
(
gLoggingEnabled
)
{
console
.
log
(
"
Follow
-
On
Search
"
message
)
;
}
}
function
handleSaveTelemetryMsg
(
message
)
{
if
(
message
.
name
!
=
kSaveTelemetryMsg
)
{
throw
new
Error
(
Unexpected
message
received
:
{
kSaveTelemetryMsg
}
)
;
}
let
info
=
message
.
data
;
if
(
!
validSearchTypes
.
includes
(
info
.
type
)
)
{
throw
new
Error
(
"
Unexpected
type
!
"
)
;
}
log
(
info
)
;
let
histogram
=
Services
.
telemetry
.
getKeyedHistogramById
(
"
SEARCH_COUNTS
"
)
;
histogram
.
add
(
{
info
.
sap
}
.
{
info
.
type
}
:
unknown
:
{
info
.
code
}
)
;
}
function
activateTelemetry
(
)
{
if
(
gTelemetryActivated
)
{
return
;
}
gTelemetryActivated
=
true
;
Services
.
mm
.
addMessageListener
(
kSaveTelemetryMsg
handleSaveTelemetryMsg
)
;
Services
.
mm
.
loadFrameScript
(
frameScript
true
)
;
TelemetryEnvironment
.
setExperimentActive
(
kExtensionID
"
active
"
)
;
}
function
deactivateTelemetry
(
)
{
if
(
!
gTelemetryActivated
)
{
return
;
}
TelemetryEnvironment
.
setExperimentInactive
(
kExtensionID
)
;
Services
.
mm
.
removeMessageListener
(
kSaveTelemetryMsg
handleSaveTelemetryMsg
)
;
Services
.
mm
.
removeDelayedFrameScript
(
frameScript
)
;
Services
.
mm
.
broadcastAsyncMessage
(
kShutdownMsg
)
;
gTelemetryActivated
=
false
;
}
var
cohortManager
=
{
enableForUser
:
false
_definedThisSession
:
false
init
(
)
{
if
(
this
.
_definedThisSession
)
{
return
;
}
this
.
_definedThisSession
=
true
;
this
.
enableForUser
=
false
;
try
{
let
distId
=
Services
.
prefs
.
getCharPref
(
"
distribution
.
id
"
"
"
)
;
if
(
distId
)
{
log
(
"
It
is
a
distribution
not
setting
up
nor
enabling
.
"
)
;
return
;
}
}
catch
(
e
)
{
}
let
cohortSample
;
try
{
cohortSample
=
Services
.
prefs
.
getFloatPref
(
PREF_COHORT_SAMPLE
undefined
)
;
}
catch
(
e
)
{
}
if
(
!
cohortSample
)
{
cohortSample
=
Math
.
random
(
)
.
toString
(
)
.
substr
(
0
8
)
;
cohortSample
=
Services
.
prefs
.
setCharPref
(
PREF_COHORT_SAMPLE
cohortSample
)
;
}
log
(
Cohort
Sample
value
is
{
cohortSample
}
)
;
let
updateChannel
=
UpdateUtils
.
getUpdateChannel
(
false
)
;
log
(
Update
channel
is
{
updateChannel
}
)
;
if
(
!
(
updateChannel
in
REPORTING_THRESHOLD
)
)
{
let
prefOverride
=
"
default
"
;
try
{
prefOverride
=
Services
.
prefs
.
getCharPref
(
PREF_CHANNEL_OVERRIDE
"
default
"
)
;
}
catch
(
e
)
{
}
if
(
prefOverride
in
REPORTING_THRESHOLD
)
{
updateChannel
=
prefOverride
;
}
else
{
return
;
}
}
if
(
cohortSample
<
=
REPORTING_THRESHOLD
[
updateChannel
]
)
{
log
(
"
Enabling
telemetry
for
user
"
)
;
this
.
enableForUser
=
true
;
}
else
{
log
(
"
Not
enabling
telemetry
for
user
-
outside
threshold
.
"
)
;
}
}
}
;
function
install
(
data
reason
)
{
try
{
gLoggingEnabled
=
Services
.
prefs
.
getBoolPref
(
PREF_LOGGING
false
)
;
}
catch
(
e
)
{
}
cohortManager
.
init
(
)
;
if
(
cohortManager
.
enableForUser
)
{
activateTelemetry
(
)
;
}
}
function
uninstall
(
data
reason
)
{
deactivateTelemetry
(
)
;
}
function
startup
(
data
reason
)
{
try
{
gLoggingEnabled
=
Services
.
prefs
.
getBoolPref
(
PREF_LOGGING
false
)
;
}
catch
(
e
)
{
}
cohortManager
.
init
(
)
;
if
(
cohortManager
.
enableForUser
)
{
setTimeout
(
(
)
=
>
{
activateTelemetry
(
)
;
}
1000
)
;
}
}
function
shutdown
(
data
reason
)
{
deactivateTelemetry
(
)
;
}
