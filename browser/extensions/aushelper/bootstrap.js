const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
const
APP_UPDATE_URL_PREF
=
"
app
.
update
.
url
"
;
const
REPLACE_KEY
=
"
%
OS_VERSION
%
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryLog
.
jsm
"
)
;
function
startup
(
)
{
if
(
Services
.
appinfo
.
OS
!
=
"
WINNT
"
)
{
return
;
}
const
regCPUPath
=
"
HARDWARE
\
\
DESCRIPTION
\
\
System
\
\
CentralProcessor
\
\
0
"
;
let
wrk
;
try
{
wrk
=
Cc
[
"
mozilla
.
org
/
windows
-
registry
-
key
;
1
"
]
.
createInstance
(
Ci
.
nsIWindowsRegKey
)
;
wrk
.
open
(
wrk
.
ROOT_KEY_LOCAL_MACHINE
regCPUPath
wrk
.
ACCESS_READ
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
"
Unable
to
open
registry
.
Exception
:
"
+
e
)
;
TelemetryLog
.
log
(
"
AUSHELPER_FATAL_ERROR
"
[
e
]
)
;
}
let
cpuVendorIDMatch
=
false
;
try
{
let
cpuVendorID
=
wrk
.
readStringValue
(
"
VendorIdentifier
"
)
;
if
(
cpuVendorID
.
toLowerCase
(
)
=
=
"
genuineintel
"
)
{
cpuVendorIDMatch
=
true
;
}
}
catch
(
e
)
{
cpuVendorIDMatch
=
null
;
Cu
.
reportError
(
"
Error
getting
CPU
vendor
indentifier
.
Exception
:
"
+
e
)
;
TelemetryLog
.
log
(
"
AUSHELPER_CPU_VENDOR_ID_ERROR
"
[
e
]
)
;
}
let
cpuIDMatch
=
false
;
try
{
let
cpuID
=
wrk
.
readStringValue
(
"
Identifier
"
)
;
if
(
cpuID
.
toLowerCase
(
)
.
indexOf
(
"
family
6
model
61
stepping
4
"
)
!
=
-
1
)
{
cpuIDMatch
=
true
;
}
}
catch
(
e
)
{
cpuIDMatch
=
null
;
Cu
.
reportError
(
"
Error
getting
CPU
indentifier
.
Exception
:
"
+
e
)
;
TelemetryLog
.
log
(
"
AUSHELPER_CPU_ID_ERROR
"
[
e
]
)
;
}
let
microCodeVersions
=
[
0xe
0x11
0x12
0x13
0x16
0x18
0x19
]
;
let
cpuRevMatch
=
null
;
try
{
let
keyNames
=
[
"
Update
Revision
"
"
Update
Signature
"
]
;
for
(
let
i
=
0
;
i
<
keyNames
.
length
;
+
+
i
)
{
try
{
let
regVal
=
wrk
.
readBinaryValue
(
keyNames
[
i
]
)
;
if
(
regVal
.
length
=
=
8
)
{
let
hexVal
=
[
]
;
for
(
let
j
=
4
;
j
<
8
;
j
+
+
)
{
let
c
=
regVal
.
charCodeAt
(
j
)
.
toString
(
16
)
;
if
(
c
.
length
=
=
1
)
{
c
=
"
0
"
+
c
;
}
hexVal
.
unshift
(
c
)
;
}
cpuRevMatch
=
false
;
if
(
microCodeVersions
.
indexOf
(
parseInt
(
hexVal
.
join
(
'
'
)
)
)
!
=
-
1
)
{
cpuRevMatch
=
true
;
}
break
;
}
}
catch
(
e
)
{
if
(
i
=
=
keyNames
.
length
-
1
)
{
cpuRevMatch
=
null
;
Cu
.
reportError
(
"
Error
getting
CPU
revision
.
Exception
:
"
+
e
)
;
TelemetryLog
.
log
(
"
AUSHELPER_CPU_REV_ERROR
"
[
e
]
)
;
}
}
}
}
catch
(
ex
)
{
cpuRevMatch
=
null
;
Cu
.
reportError
(
"
Error
getting
CPU
revision
.
Exception
:
"
+
ex
)
;
TelemetryLog
.
log
(
"
AUSHELPER_CPU_REV_ERROR
"
[
ex
]
)
;
}
let
resultCode
=
3
;
let
newValue
=
"
(
unkBug1296630v1
)
"
;
if
(
cpuVendorIDMatch
=
=
=
false
|
|
cpuIDMatch
=
=
=
false
|
|
cpuRevMatch
=
=
=
false
)
{
newValue
=
"
(
noBug1296630v1
)
"
;
resultCode
=
0
;
}
else
if
(
cpuVendorIDMatch
=
=
=
null
|
|
cpuIDMatch
=
=
=
null
|
|
cpuRevMatch
=
=
=
null
)
{
newValue
=
"
(
errBug1296630v1
)
"
;
resultCode
=
2
;
}
else
if
(
cpuVendorIDMatch
=
=
=
true
&
&
cpuIDMatch
=
=
=
true
&
&
cpuRevMatch
=
=
=
true
)
{
newValue
=
"
(
yesBug1296630v1
)
"
;
resultCode
=
1
;
}
let
defaultBranch
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
let
curPrefValue
=
defaultBranch
.
getCharPref
(
APP_UPDATE_URL_PREF
)
;
let
newPrefValue
=
curPrefValue
.
replace
(
REPLACE_KEY
+
"
/
"
REPLACE_KEY
+
newValue
+
"
/
"
)
;
defaultBranch
.
setCharPref
(
APP_UPDATE_URL_PREF
newPrefValue
)
;
TelemetryLog
.
log
(
"
AUSHELPER_RESULT
"
[
resultCode
]
)
;
}
function
shutdown
(
)
{
}
function
install
(
)
{
}
function
uninstall
(
)
{
}
