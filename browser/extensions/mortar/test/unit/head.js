"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
let
resHandler
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsISubstitutingProtocolHandler
)
;
let
dataURI
=
NetUtil
.
newURI
(
do_get_file
(
"
.
"
)
)
;
resHandler
.
setSubstitution
(
"
ppapi
.
js
"
dataURI
)
;
load
(
"
ppapi
-
runtime
.
jsm
"
)
;
let
instanceId
=
1
;
let
url
=
"
http
:
/
/
example
.
com
"
;
let
info
=
{
documentURL
:
"
chrome
-
extension
:
/
/
mhjfbmdgcfjbbpaeojofohoefgiehjai
"
url
setupJSInstanceObject
:
false
isFullFrame
:
false
arguments
:
{
keys
:
[
"
src
"
"
full
-
frame
"
"
top
-
level
-
url
"
]
values
:
[
url
"
"
url
]
}
}
;
class
Mock_Window
{
}
class
Mock_Process
{
}
class
Mock_MessageManager
{
addMessageListener
(
)
{
}
}
let
rt
=
new
PPAPIRuntime
(
new
Mock_Process
(
)
)
;
function
Call_PpbFunc
(
obj
)
{
if
(
!
obj
|
|
!
obj
.
__interface
|
|
!
obj
.
__version
|
|
!
obj
.
__method
)
{
ok
(
false
'
invalid
JSON
'
)
;
}
let
fn
=
obj
.
__interface
+
"
_
"
+
obj
.
__method
;
return
rt
.
table
[
fn
]
(
obj
)
;
}
let
instance
=
new
PPAPIInstance
(
instanceId
rt
info
new
Mock_Window
(
)
null
null
new
Mock_MessageManager
(
)
)
;
registerCleanupFunction
(
function
(
)
{
resHandler
.
setSubstitution
(
"
ppapi
.
js
"
null
)
;
}
)
