'
use
strict
'
;
class
PresentationController
{
constructor
(
viewport
)
{
this
.
_viewport
=
viewport
;
viewport
.
onFullscreenChange
=
this
.
_onFullscreenChange
.
bind
(
this
)
;
this
.
_wheelTimestamp
=
0
;
this
.
_wheelDelta
=
0
;
}
_onFullscreenChange
(
isFullscreen
)
{
if
(
isFullscreen
)
{
this
.
_viewport
.
bindUIEvent
(
'
click
'
this
)
;
this
.
_viewport
.
bindUIEvent
(
'
wheel
'
this
)
;
this
.
_viewport
.
bindUIEvent
(
'
mousedown
'
this
true
)
;
this
.
_viewport
.
bindUIEvent
(
'
mousemove
'
this
true
)
;
}
else
{
this
.
_viewport
.
unbindUIEvent
(
'
click
'
this
)
;
this
.
_viewport
.
unbindUIEvent
(
'
wheel
'
this
)
;
this
.
_viewport
.
unbindUIEvent
(
'
mousedown
'
this
true
)
;
this
.
_viewport
.
unbindUIEvent
(
'
mousemove
'
this
true
)
;
}
}
_normalizeWheelEventDelta
(
evt
)
{
let
delta
=
Math
.
sqrt
(
evt
.
deltaX
*
evt
.
deltaX
+
evt
.
deltaY
*
evt
.
deltaY
)
;
let
angle
=
Math
.
atan2
(
evt
.
deltaY
evt
.
deltaX
)
;
if
(
-
0
.
25
*
Math
.
PI
<
angle
&
&
angle
<
0
.
75
*
Math
.
PI
)
{
delta
=
-
delta
;
}
let
MOUSE_PIXELS_PER_LINE
=
30
;
let
MOUSE_LINES_PER_PAGE
=
30
;
if
(
evt
.
deltaMode
=
=
=
WheelEvent
.
DOM_DELTA_PIXEL
)
{
delta
/
=
MOUSE_PIXELS_PER_LINE
*
MOUSE_LINES_PER_PAGE
;
}
else
if
(
evt
.
deltaMode
=
=
=
WheelEvent
.
DOM_DELTA_LINE
)
{
delta
/
=
MOUSE_LINES_PER_PAGE
;
}
return
delta
;
}
_handleWheel
(
evt
)
{
let
delta
=
this
.
_normalizeWheelEventDelta
(
evt
)
;
let
WHEEL_COOLDOWN_TIME
=
50
;
let
PAGE_SWITCH_THRESHOLD
=
0
.
1
;
let
currentTime
=
new
Date
(
)
.
getTime
(
)
;
let
storedTime
=
this
.
_wheelTimestamp
;
if
(
currentTime
-
storedTime
<
WHEEL_COOLDOWN_TIME
)
{
return
;
}
if
(
this
.
_wheelDelta
*
delta
<
0
)
{
this
.
_wheelTimestamp
=
this
.
_wheelDelta
=
0
;
}
this
.
_wheelDelta
+
=
delta
;
if
(
Math
.
abs
(
this
.
_wheelDelta
)
>
=
PAGE_SWITCH_THRESHOLD
)
{
this
.
_wheelDelta
>
0
?
this
.
_viewport
.
page
-
-
:
this
.
_viewport
.
page
+
+
;
this
.
_wheelDelta
=
0
;
this
.
_wheelTimestamp
=
currentTime
;
}
}
handleEvent
(
evt
)
{
switch
(
evt
.
type
)
{
case
'
mousedown
'
:
this
.
_storedPageNum
=
this
.
_viewport
.
page
;
break
;
case
'
mousemove
'
:
if
(
evt
.
buttons
!
=
0
)
{
evt
.
stopImmediatePropagation
(
)
;
}
break
;
case
'
click
'
:
if
(
this
.
_storedPageNum
!
=
this
.
_viewport
.
page
)
{
return
;
}
this
.
_viewport
.
page
+
+
;
break
;
case
'
wheel
'
:
this
.
_handleWheel
(
evt
)
;
break
;
}
}
}
