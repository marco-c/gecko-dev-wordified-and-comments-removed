const
{
utils
:
Cu
}
=
Components
;
let
mm
=
pluginElement
.
frameLoader
.
messageManager
;
let
containerWindow
=
pluginElement
.
ownerDocument
.
defaultView
;
pluginElement
.
addEventListener
(
"
dragstart
"
function
(
event
)
{
event
.
preventDefault
(
)
;
}
)
;
let
isSynthetic
=
pluginElement
.
ownerDocument
.
mozSyntheticDocument
;
if
(
isSynthetic
)
{
pluginElement
.
ownerDocument
.
body
.
addEventListener
(
"
selectstart
"
function
(
event
)
{
event
.
preventDefault
(
)
;
}
)
;
}
function
mapValue
(
v
instance
)
{
return
instance
.
rt
.
toPP_Var
(
v
instance
)
;
}
dump
(
"
<
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
AHA
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
>
\
n
"
)
;
dump
(
pluginElement
:
{
pluginElement
.
toSource
(
)
}
\
n
)
;
dump
(
pluginElement
.
frameLoader
:
{
pluginElement
.
frameLoader
.
toSource
(
)
}
\
n
)
;
dump
(
pluginElement
.
frameLoader
.
messageManager
:
{
pluginElement
.
frameLoader
.
messageManager
.
toSource
(
)
}
\
n
)
;
dump
(
"
<
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
AHA2
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
<
>
\
n
"
)
;
mm
.
addMessageListener
(
"
ppapi
.
js
:
frameLoaded
"
(
{
target
}
)
=
>
{
let
tagName
=
pluginElement
.
nodeName
;
let
url
=
pluginElement
.
srcURI
.
spec
;
let
objectParams
=
new
Map
(
)
;
for
(
let
i
=
0
;
i
<
pluginElement
.
attributes
.
length
;
+
+
i
)
{
let
paramName
=
pluginElement
.
attributes
[
i
]
.
localName
;
objectParams
.
set
(
paramName
pluginElement
.
attributes
[
i
]
.
value
)
;
}
if
(
tagName
=
=
"
OBJECT
"
)
{
let
params
=
pluginElement
.
getElementsByTagName
(
"
param
"
)
;
Array
.
prototype
.
forEach
.
call
(
params
(
p
)
=
>
{
var
paramName
=
p
.
getAttribute
(
"
name
"
)
.
toLowerCase
(
)
;
objectParams
.
set
(
paramName
p
.
getAttribute
(
"
value
"
)
)
;
}
)
;
}
let
documentURL
=
pluginElement
.
ownerDocument
.
location
.
href
;
let
baseUrl
=
documentURL
;
if
(
objectParams
.
base
)
{
try
{
let
parsedDocumentUrl
=
Services
.
io
.
newURI
(
documentURL
)
;
baseUrl
=
Services
.
io
.
newURI
(
objectParams
.
base
null
parsedDocumentUrl
)
.
spec
;
}
catch
(
e
)
{
}
}
let
info
=
{
documentURL
:
"
chrome
-
extension
:
/
/
mhjfbmdgcfjbbpaeojofohoefgiehjai
"
url
setupJSInstanceObject
:
false
isFullFrame
:
false
arguments
:
{
keys
:
[
"
src
"
"
full
-
frame
"
"
top
-
level
-
url
"
]
values
:
[
url
"
"
documentURL
]
}
}
;
mm
.
sendAsyncMessage
(
"
ppapi
.
js
:
createInstance
"
{
type
:
"
pdf
"
info
}
{
pluginWindow
:
containerWindow
}
)
;
containerWindow
.
document
.
addEventListener
(
"
fullscreenchange
"
(
)
=
>
{
let
fullscreen
=
(
containerWindow
.
document
.
fullscreenElement
=
=
pluginElement
)
;
mm
.
sendAsyncMessage
(
"
ppapi
.
js
:
fullscreenchange
"
{
fullscreen
}
)
;
}
)
;
}
)
;
mm
.
addMessageListener
(
"
ppapi
.
js
:
setFullscreen
"
(
{
data
}
)
=
>
{
if
(
data
)
{
pluginElement
.
requestFullscreen
(
)
;
}
else
{
containerWindow
.
document
.
exitFullscreen
(
)
;
}
}
)
;
mm
.
loadFrameScript
(
"
resource
:
/
/
ppapi
.
js
/
ppapi
-
instance
.
js
"
true
)
;
