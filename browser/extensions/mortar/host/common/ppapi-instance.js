const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
let
rt
;
function
getRuntime
(
type
)
{
if
(
!
rt
)
{
let
process
=
Cc
[
"
mozilla
.
org
/
plugin
/
ppapi
.
js
-
process
;
1
"
]
.
getService
(
Ci
.
nsIPPAPIJSProcess
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
ppapi
.
js
/
ppapi
-
runtime
.
jsm
"
)
;
rt
=
new
PPAPIRuntime
(
process
)
;
process
.
launch
(
rt
.
callback
)
;
}
return
rt
;
}
addMessageListener
(
"
ppapi
.
js
:
createInstance
"
(
{
target
data
:
{
type
info
}
objects
:
{
pluginWindow
}
}
)
=
>
{
dump
(
"
ppapi
.
js
:
createInstance
\
n
"
)
;
let
rt
=
getRuntime
(
type
)
;
let
instance
=
rt
.
createInstance
(
info
content
docShell
.
chromeEventHandler
pluginWindow
target
)
;
addEventListener
(
"
unload
"
(
)
=
>
{
rt
.
destroyInstance
(
instance
)
;
}
)
;
}
)
;
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
sendRpcMessage
(
"
ppapi
.
js
:
frameLoaded
"
undefined
{
}
)
;
}
)
;
