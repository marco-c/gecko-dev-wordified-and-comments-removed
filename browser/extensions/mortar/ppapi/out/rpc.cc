#
if
defined
(
__cplusplus
)
#
define
PP_INLINE
inline
#
else
#
if
defined
(
_MSC_VER
)
#
define
PP_INLINE
static
__forceinline
#
else
#
define
PP_INLINE
static
__inline__
#
endif
#
endif
#
define
PP_COMPILE_ASSERT_SIZE_IN_BYTES_IMPL
(
NAME
CTYPENAME
SIZE
)
\
struct
PP_Dummy_Struct_For_
#
#
NAME
{
\
char
_COMPILE_ASSERT_FAILED_The_type_named_
\
#
#
NAME
#
#
_is_not_
#
#
SIZE
#
#
\
_bytes_wide
[
(
sizeof
(
CTYPENAME
)
=
=
SIZE
)
?
1
:
-
1
]
;
}
#
define
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
NAME
SIZE
)
\
PP_COMPILE_ASSERT_SIZE_IN_BYTES_IMPL
(
NAME
NAME
SIZE
)
#
define
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
NAME
SIZE
)
\
PP_COMPILE_ASSERT_SIZE_IN_BYTES_IMPL
(
NAME
struct
NAME
SIZE
)
#
define
PP_COMPILE_ASSERT_ENUM_SIZE_IN_BYTES
(
NAME
SIZE
)
\
PP_COMPILE_ASSERT_SIZE_IN_BYTES_IMPL
(
NAME
enum
NAME
SIZE
)
#
if
defined
(
_MSC_VER
)
typedef
unsigned
char
uint8_t
;
typedef
signed
char
int8_t
;
typedef
unsigned
short
uint16_t
;
typedef
short
int16_t
;
typedef
unsigned
int
uint32_t
;
typedef
int
int32_t
;
typedef
__int64
int64_t
;
typedef
unsigned
__int64
uint64_t
;
#
else
#
include
<
stdint
.
h
>
#
endif
typedef
void
*
(
*
PP_ArrayOutput_GetDataBuffer
)
(
void
*
user_data
uint32_t
element_count
uint32_t
element_size
)
;
struct
PP_ArrayOutput
{
PP_ArrayOutput_GetDataBuffer
GetDataBuffer
;
void
*
user_data
;
}
;
typedef
enum
{
PP_FALSE
=
0
PP_TRUE
=
1
}
PP_Bool
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_Bool
4
)
;
#
ifdef
__cplusplus
inline
PP_Bool
PP_FromBool
(
bool
b
)
{
return
b
?
PP_TRUE
:
PP_FALSE
;
}
inline
bool
PP_ToBool
(
PP_Bool
b
)
{
return
(
b
!
=
PP_FALSE
)
;
}
#
endif
struct
PP_Point
{
int32_t
x
;
int32_t
y
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_Point
8
)
;
struct
PP_FloatPoint
{
float
x
;
float
y
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_FloatPoint
8
)
;
PP_INLINE
struct
PP_Point
PP_MakePoint
(
int32_t
x
int32_t
y
)
{
struct
PP_Point
ret
;
ret
.
x
=
x
;
ret
.
y
=
y
;
return
ret
;
}
PP_INLINE
struct
PP_FloatPoint
PP_MakeFloatPoint
(
float
x
float
y
)
{
struct
PP_FloatPoint
ret
;
ret
.
x
=
x
;
ret
.
y
=
y
;
return
ret
;
}
struct
PP_Size
{
int32_t
width
;
int32_t
height
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_Size
8
)
;
struct
PP_FloatSize
{
float
width
;
float
height
;
}
;
PP_INLINE
struct
PP_Size
PP_MakeSize
(
int32_t
w
int32_t
h
)
{
struct
PP_Size
ret
;
ret
.
width
=
w
;
ret
.
height
=
h
;
return
ret
;
}
PP_INLINE
struct
PP_FloatSize
PP_MakeFloatSize
(
float
w
float
h
)
{
struct
PP_FloatSize
ret
;
ret
.
width
=
w
;
ret
.
height
=
h
;
return
ret
;
}
struct
PP_Rect
{
struct
PP_Point
point
;
struct
PP_Size
size
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_Rect
16
)
;
struct
PP_FloatRect
{
struct
PP_FloatPoint
point
;
struct
PP_FloatSize
size
;
}
;
PP_INLINE
struct
PP_Rect
PP_MakeRectFromXYWH
(
int32_t
x
int32_t
y
int32_t
w
int32_t
h
)
{
struct
PP_Rect
ret
;
ret
.
point
.
x
=
x
;
ret
.
point
.
y
=
y
;
ret
.
size
.
width
=
w
;
ret
.
size
.
height
=
h
;
return
ret
;
}
PP_INLINE
struct
PP_FloatRect
PP_MakeFloatRectFromXYWH
(
float
x
float
y
float
w
float
h
)
{
struct
PP_FloatRect
ret
;
ret
.
point
.
x
=
x
;
ret
.
point
.
y
=
y
;
ret
.
size
.
width
=
w
;
ret
.
size
.
height
=
h
;
return
ret
;
}
typedef
enum
{
PP_VIDEOPROFILE_H264BASELINE
=
0
PP_VIDEOPROFILE_H264MAIN
=
1
PP_VIDEOPROFILE_H264EXTENDED
=
2
PP_VIDEOPROFILE_H264HIGH
=
3
PP_VIDEOPROFILE_H264HIGH10PROFILE
=
4
PP_VIDEOPROFILE_H264HIGH422PROFILE
=
5
PP_VIDEOPROFILE_H264HIGH444PREDICTIVEPROFILE
=
6
PP_VIDEOPROFILE_H264SCALABLEBASELINE
=
7
PP_VIDEOPROFILE_H264SCALABLEHIGH
=
8
PP_VIDEOPROFILE_H264STEREOHIGH
=
9
PP_VIDEOPROFILE_H264MULTIVIEWHIGH
=
10
PP_VIDEOPROFILE_VP8_ANY
=
11
PP_VIDEOPROFILE_VP9_ANY
=
12
PP_VIDEOPROFILE_MAX
=
PP_VIDEOPROFILE_VP9_ANY
}
PP_VideoProfile
;
typedef
enum
{
PP_AUDIOPROFILE_OPUS
=
0
PP_AUDIOPROFILE_MAX
=
PP_AUDIOPROFILE_OPUS
}
PP_AudioProfile
;
typedef
enum
{
PP_HARDWAREACCELERATION_ONLY
=
0
PP_HARDWAREACCELERATION_WITHFALLBACK
=
1
PP_HARDWAREACCELERATION_NONE
=
2
PP_HARDWAREACCELERATION_LAST
=
PP_HARDWAREACCELERATION_NONE
}
PP_HardwareAcceleration
;
struct
PP_VideoPicture
{
uint32_t
decode_id
;
uint32_t
texture_id
;
uint32_t
texture_target
;
struct
PP_Size
texture_size
;
struct
PP_Rect
visible_rect
;
}
;
struct
PP_VideoPicture_0_1
{
uint32_t
decode_id
;
uint32_t
texture_id
;
uint32_t
texture_target
;
struct
PP_Size
texture_size
;
}
;
struct
PP_VideoProfileDescription
{
PP_VideoProfile
profile
;
struct
PP_Size
max_resolution
;
uint32_t
max_framerate_numerator
;
uint32_t
max_framerate_denominator
;
PP_Bool
hardware_accelerated
;
}
;
struct
PP_VideoProfileDescription_0_1
{
PP_VideoProfile
profile
;
struct
PP_Size
max_resolution
;
uint32_t
max_framerate_numerator
;
uint32_t
max_framerate_denominator
;
PP_HardwareAcceleration
acceleration
;
}
;
struct
PP_AudioProfileDescription
{
PP_AudioProfile
profile
;
uint32_t
max_channels
;
uint32_t
sample_size
;
uint32_t
sample_rate
;
PP_Bool
hardware_accelerated
;
}
;
struct
PP_BitstreamBuffer
{
uint32_t
size
;
void
*
buffer
;
PP_Bool
key_frame
;
}
;
struct
PP_AudioBitstreamBuffer
{
uint32_t
size
;
void
*
buffer
;
}
;
typedef
void
(
*
PP_CompletionCallback_Func
)
(
void
*
user_data
int32_t
result
)
;
typedef
enum
{
PP_COMPLETIONCALLBACK_FLAG_NONE
=
0
<
<
0
PP_COMPLETIONCALLBACK_FLAG_OPTIONAL
=
1
<
<
0
}
PP_CompletionCallback_Flag
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_CompletionCallback_Flag
4
)
;
struct
PP_CompletionCallback
{
PP_CompletionCallback_Func
func
;
void
*
user_data
;
int32_t
flags
;
}
;
#
include
<
stdlib
.
h
>
PP_INLINE
struct
PP_CompletionCallback
PP_MakeCompletionCallback
(
PP_CompletionCallback_Func
func
void
*
user_data
)
{
struct
PP_CompletionCallback
cc
;
cc
.
func
=
func
;
cc
.
user_data
=
user_data
;
cc
.
flags
=
PP_COMPLETIONCALLBACK_FLAG_NONE
;
return
cc
;
}
PP_INLINE
struct
PP_CompletionCallback
PP_MakeOptionalCompletionCallback
(
PP_CompletionCallback_Func
func
void
*
user_data
)
{
struct
PP_CompletionCallback
cc
=
PP_MakeCompletionCallback
(
func
user_data
)
;
cc
.
flags
=
cc
.
flags
|
PP_COMPLETIONCALLBACK_FLAG_OPTIONAL
;
return
cc
;
}
PP_INLINE
void
PP_RunCompletionCallback
(
struct
PP_CompletionCallback
*
cc
int32_t
result
)
{
cc
-
>
func
(
cc
-
>
user_data
result
)
;
}
PP_INLINE
struct
PP_CompletionCallback
PP_BlockUntilComplete
(
void
)
{
return
PP_MakeCompletionCallback
(
NULL
NULL
)
;
}
PP_INLINE
void
PP_RunAndClearCompletionCallback
(
struct
PP_CompletionCallback
*
cc
int32_t
res
)
{
struct
PP_CompletionCallback
temp
=
*
cc
;
*
cc
=
PP_BlockUntilComplete
(
)
;
PP_RunCompletionCallback
(
&
temp
res
)
;
}
typedef
double
PP_Time
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_Time
8
)
;
typedef
double
PP_TimeTicks
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_TimeTicks
8
)
;
typedef
double
PP_TimeDelta
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_TimeDelta
8
)
;
typedef
enum
{
PP_FILETYPE_REGULAR
=
0
PP_FILETYPE_DIRECTORY
=
1
PP_FILETYPE_OTHER
=
2
}
PP_FileType
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_FileType
4
)
;
typedef
enum
{
PP_FILESYSTEMTYPE_INVALID
=
0
PP_FILESYSTEMTYPE_EXTERNAL
=
1
PP_FILESYSTEMTYPE_LOCALPERSISTENT
=
2
PP_FILESYSTEMTYPE_LOCALTEMPORARY
=
3
PP_FILESYSTEMTYPE_ISOLATED
=
4
}
PP_FileSystemType
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_FileSystemType
4
)
;
struct
PP_FileInfo
{
int64_t
size
;
PP_FileType
type
;
PP_FileSystemType
system_type
;
PP_Time
creation_time
;
PP_Time
last_access_time
;
PP_Time
last_modified_time
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_FileInfo
40
)
;
typedef
int32_t
PP_Resource
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_Resource
4
)
;
struct
PP_DirectoryEntry
{
PP_Resource
file_ref
;
PP_FileType
file_type
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_DirectoryEntry
8
)
;
enum
{
PP_OK
=
0
PP_OK_COMPLETIONPENDING
=
-
1
PP_ERROR_FAILED
=
-
2
PP_ERROR_ABORTED
=
-
3
PP_ERROR_BADARGUMENT
=
-
4
PP_ERROR_BADRESOURCE
=
-
5
PP_ERROR_NOINTERFACE
=
-
6
PP_ERROR_NOACCESS
=
-
7
PP_ERROR_NOMEMORY
=
-
8
PP_ERROR_NOSPACE
=
-
9
PP_ERROR_NOQUOTA
=
-
10
PP_ERROR_INPROGRESS
=
-
11
PP_ERROR_NOTSUPPORTED
=
-
12
PP_ERROR_BLOCKS_MAIN_THREAD
=
-
13
PP_ERROR_MALFORMED_INPUT
=
-
14
PP_ERROR_RESOURCE_FAILED
=
-
15
PP_ERROR_FILENOTFOUND
=
-
20
PP_ERROR_FILEEXISTS
=
-
21
PP_ERROR_FILETOOBIG
=
-
22
PP_ERROR_FILECHANGED
=
-
23
PP_ERROR_NOTAFILE
=
-
24
PP_ERROR_TIMEDOUT
=
-
30
PP_ERROR_USERCANCEL
=
-
40
PP_ERROR_NO_USER_GESTURE
=
-
41
PP_ERROR_CONTEXT_LOST
=
-
50
PP_ERROR_NO_MESSAGE_LOOP
=
-
51
PP_ERROR_WRONG_THREAD
=
-
52
PP_ERROR_WOULD_BLOCK_THREAD
=
-
53
PP_ERROR_CONNECTION_CLOSED
=
-
100
PP_ERROR_CONNECTION_RESET
=
-
101
PP_ERROR_CONNECTION_REFUSED
=
-
102
PP_ERROR_CONNECTION_ABORTED
=
-
103
PP_ERROR_CONNECTION_FAILED
=
-
104
PP_ERROR_CONNECTION_TIMEDOUT
=
-
105
PP_ERROR_ADDRESS_INVALID
=
-
106
PP_ERROR_ADDRESS_UNREACHABLE
=
-
107
PP_ERROR_ADDRESS_IN_USE
=
-
108
PP_ERROR_MESSAGE_TOO_BIG
=
-
109
PP_ERROR_NAME_NOT_RESOLVED
=
-
110
}
;
typedef
enum
{
PP_GRAPHICS3DATTRIB_ALPHA_SIZE
=
0x3021
PP_GRAPHICS3DATTRIB_BLUE_SIZE
=
0x3022
PP_GRAPHICS3DATTRIB_GREEN_SIZE
=
0x3023
PP_GRAPHICS3DATTRIB_RED_SIZE
=
0x3024
PP_GRAPHICS3DATTRIB_DEPTH_SIZE
=
0x3025
PP_GRAPHICS3DATTRIB_STENCIL_SIZE
=
0x3026
PP_GRAPHICS3DATTRIB_SAMPLES
=
0x3031
PP_GRAPHICS3DATTRIB_SAMPLE_BUFFERS
=
0x3032
PP_GRAPHICS3DATTRIB_NONE
=
0x3038
PP_GRAPHICS3DATTRIB_HEIGHT
=
0x3056
PP_GRAPHICS3DATTRIB_WIDTH
=
0x3057
PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR
=
0x3093
PP_GRAPHICS3DATTRIB_BUFFER_PRESERVED
=
0x3094
PP_GRAPHICS3DATTRIB_BUFFER_DESTROYED
=
0x3095
PP_GRAPHICS3DATTRIB_GPU_PREFERENCE
=
0x11000
PP_GRAPHICS3DATTRIB_GPU_PREFERENCE_LOW_POWER
=
0x11001
PP_GRAPHICS3DATTRIB_GPU_PREFERENCE_PERFORMANCE
=
0x11002
}
PP_Graphics3DAttrib
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_Graphics3DAttrib
4
)
;
typedef
enum
{
PP_VARTYPE_UNDEFINED
=
0
PP_VARTYPE_NULL
=
1
PP_VARTYPE_BOOL
=
2
PP_VARTYPE_INT32
=
3
PP_VARTYPE_DOUBLE
=
4
PP_VARTYPE_STRING
=
5
PP_VARTYPE_OBJECT
=
6
PP_VARTYPE_ARRAY
=
7
PP_VARTYPE_DICTIONARY
=
8
PP_VARTYPE_ARRAY_BUFFER
=
9
PP_VARTYPE_RESOURCE
=
10
}
PP_VarType
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_VarType
4
)
;
union
PP_VarValue
{
PP_Bool
as_bool
;
int32_t
as_int
;
double
as_double
;
int64_t
as_id
;
}
;
struct
PP_Var
{
PP_VarType
type
;
int32_t
padding
;
union
PP_VarValue
value
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_Var
16
)
;
PP_INLINE
struct
PP_Var
PP_MakeUndefined
(
void
)
{
struct
PP_Var
result
=
{
PP_VARTYPE_UNDEFINED
0
{
PP_FALSE
}
}
;
return
result
;
}
PP_INLINE
struct
PP_Var
PP_MakeNull
(
void
)
{
struct
PP_Var
result
=
{
PP_VARTYPE_NULL
0
{
PP_FALSE
}
}
;
return
result
;
}
PP_INLINE
struct
PP_Var
PP_MakeBool
(
PP_Bool
value
)
{
struct
PP_Var
result
=
{
PP_VARTYPE_BOOL
0
{
PP_FALSE
}
}
;
result
.
value
.
as_bool
=
value
;
return
result
;
}
PP_INLINE
struct
PP_Var
PP_MakeInt32
(
int32_t
value
)
{
struct
PP_Var
result
=
{
PP_VARTYPE_INT32
0
{
PP_FALSE
}
}
;
result
.
value
.
as_int
=
value
;
return
result
;
}
PP_INLINE
struct
PP_Var
PP_MakeDouble
(
double
value
)
{
struct
PP_Var
result
=
{
PP_VARTYPE_DOUBLE
0
{
PP_FALSE
}
}
;
result
.
value
.
as_double
=
value
;
return
result
;
}
struct
PP_TouchPoint
{
uint32_t
id
;
struct
PP_FloatPoint
position
;
struct
PP_FloatPoint
radius
;
float
rotation_angle
;
float
pressure
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_TouchPoint
28
)
;
PP_INLINE
struct
PP_TouchPoint
PP_MakeTouchPoint
(
void
)
{
struct
PP_TouchPoint
result
=
{
0
{
0
0
}
{
0
0
}
0
0
}
;
return
result
;
}
typedef
int32_t
PP_Instance
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_Instance
4
)
;
typedef
enum
{
PP_INPUTEVENT_TYPE_UNDEFINED
=
-
1
PP_INPUTEVENT_TYPE_MOUSEDOWN
=
0
PP_INPUTEVENT_TYPE_MOUSEUP
=
1
PP_INPUTEVENT_TYPE_MOUSEMOVE
=
2
PP_INPUTEVENT_TYPE_MOUSEENTER
=
3
PP_INPUTEVENT_TYPE_MOUSELEAVE
=
4
PP_INPUTEVENT_TYPE_WHEEL
=
5
PP_INPUTEVENT_TYPE_RAWKEYDOWN
=
6
PP_INPUTEVENT_TYPE_KEYDOWN
=
7
PP_INPUTEVENT_TYPE_KEYUP
=
8
PP_INPUTEVENT_TYPE_CHAR
=
9
PP_INPUTEVENT_TYPE_CONTEXTMENU
=
10
PP_INPUTEVENT_TYPE_IME_COMPOSITION_START
=
11
PP_INPUTEVENT_TYPE_IME_COMPOSITION_UPDATE
=
12
PP_INPUTEVENT_TYPE_IME_COMPOSITION_END
=
13
PP_INPUTEVENT_TYPE_IME_TEXT
=
14
PP_INPUTEVENT_TYPE_TOUCHSTART
=
15
PP_INPUTEVENT_TYPE_TOUCHMOVE
=
16
PP_INPUTEVENT_TYPE_TOUCHEND
=
17
PP_INPUTEVENT_TYPE_TOUCHCANCEL
=
18
}
PP_InputEvent_Type
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_InputEvent_Type
4
)
;
typedef
enum
{
PP_INPUTEVENT_MODIFIER_SHIFTKEY
=
1
<
<
0
PP_INPUTEVENT_MODIFIER_CONTROLKEY
=
1
<
<
1
PP_INPUTEVENT_MODIFIER_ALTKEY
=
1
<
<
2
PP_INPUTEVENT_MODIFIER_METAKEY
=
1
<
<
3
PP_INPUTEVENT_MODIFIER_ISKEYPAD
=
1
<
<
4
PP_INPUTEVENT_MODIFIER_ISAUTOREPEAT
=
1
<
<
5
PP_INPUTEVENT_MODIFIER_LEFTBUTTONDOWN
=
1
<
<
6
PP_INPUTEVENT_MODIFIER_MIDDLEBUTTONDOWN
=
1
<
<
7
PP_INPUTEVENT_MODIFIER_RIGHTBUTTONDOWN
=
1
<
<
8
PP_INPUTEVENT_MODIFIER_CAPSLOCKKEY
=
1
<
<
9
PP_INPUTEVENT_MODIFIER_NUMLOCKKEY
=
1
<
<
10
PP_INPUTEVENT_MODIFIER_ISLEFT
=
1
<
<
11
PP_INPUTEVENT_MODIFIER_ISRIGHT
=
1
<
<
12
PP_INPUTEVENT_MODIFIER_ISPEN
=
1
<
<
13
PP_INPUTEVENT_MODIFIER_ISERASER
=
1
<
<
14
}
PP_InputEvent_Modifier
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_InputEvent_Modifier
4
)
;
typedef
enum
{
PP_INPUTEVENT_MOUSEBUTTON_NONE
=
-
1
PP_INPUTEVENT_MOUSEBUTTON_LEFT
=
0
PP_INPUTEVENT_MOUSEBUTTON_MIDDLE
=
1
PP_INPUTEVENT_MOUSEBUTTON_RIGHT
=
2
}
PP_InputEvent_MouseButton
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_InputEvent_MouseButton
4
)
;
typedef
enum
{
PP_INPUTEVENT_CLASS_MOUSE
=
1
<
<
0
PP_INPUTEVENT_CLASS_KEYBOARD
=
1
<
<
1
PP_INPUTEVENT_CLASS_WHEEL
=
1
<
<
2
PP_INPUTEVENT_CLASS_TOUCH
=
1
<
<
3
PP_INPUTEVENT_CLASS_IME
=
1
<
<
4
}
PP_InputEvent_Class
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_InputEvent_Class
4
)
;
struct
PPB_InputEvent_1_0
{
int32_t
(
*
RequestInputEvents
)
(
PP_Instance
instance
uint32_t
event_classes
)
;
int32_t
(
*
RequestFilteringInputEvents
)
(
PP_Instance
instance
uint32_t
event_classes
)
;
void
(
*
ClearInputEventRequest
)
(
PP_Instance
instance
uint32_t
event_classes
)
;
PP_Bool
(
*
IsInputEvent
)
(
PP_Resource
resource
)
;
PP_InputEvent_Type
(
*
GetType
)
(
PP_Resource
event
)
;
PP_TimeTicks
(
*
GetTimeStamp
)
(
PP_Resource
event
)
;
uint32_t
(
*
GetModifiers
)
(
PP_Resource
event
)
;
}
;
typedef
struct
PPB_InputEvent_1_0
PPB_InputEvent
;
struct
PPB_MouseInputEvent_1_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
uint32_t
modifiers
PP_InputEvent_MouseButton
mouse_button
const
struct
PP_Point
*
mouse_position
int32_t
click_count
const
struct
PP_Point
*
mouse_movement
)
;
PP_Bool
(
*
IsMouseInputEvent
)
(
PP_Resource
resource
)
;
PP_InputEvent_MouseButton
(
*
GetButton
)
(
PP_Resource
mouse_event
)
;
struct
PP_Point
(
*
GetPosition
)
(
PP_Resource
mouse_event
)
;
int32_t
(
*
GetClickCount
)
(
PP_Resource
mouse_event
)
;
struct
PP_Point
(
*
GetMovement
)
(
PP_Resource
mouse_event
)
;
}
;
typedef
struct
PPB_MouseInputEvent_1_1
PPB_MouseInputEvent
;
struct
PPB_MouseInputEvent_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
uint32_t
modifiers
PP_InputEvent_MouseButton
mouse_button
const
struct
PP_Point
*
mouse_position
int32_t
click_count
)
;
PP_Bool
(
*
IsMouseInputEvent
)
(
PP_Resource
resource
)
;
PP_InputEvent_MouseButton
(
*
GetButton
)
(
PP_Resource
mouse_event
)
;
struct
PP_Point
(
*
GetPosition
)
(
PP_Resource
mouse_event
)
;
int32_t
(
*
GetClickCount
)
(
PP_Resource
mouse_event
)
;
}
;
struct
PPB_WheelInputEvent_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_TimeTicks
time_stamp
uint32_t
modifiers
const
struct
PP_FloatPoint
*
wheel_delta
const
struct
PP_FloatPoint
*
wheel_ticks
PP_Bool
scroll_by_page
)
;
PP_Bool
(
*
IsWheelInputEvent
)
(
PP_Resource
resource
)
;
struct
PP_FloatPoint
(
*
GetDelta
)
(
PP_Resource
wheel_event
)
;
struct
PP_FloatPoint
(
*
GetTicks
)
(
PP_Resource
wheel_event
)
;
PP_Bool
(
*
GetScrollByPage
)
(
PP_Resource
wheel_event
)
;
}
;
typedef
struct
PPB_WheelInputEvent_1_0
PPB_WheelInputEvent
;
struct
PPB_KeyboardInputEvent_1_2
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
uint32_t
modifiers
uint32_t
key_code
struct
PP_Var
character_text
struct
PP_Var
code
)
;
PP_Bool
(
*
IsKeyboardInputEvent
)
(
PP_Resource
resource
)
;
uint32_t
(
*
GetKeyCode
)
(
PP_Resource
key_event
)
;
struct
PP_Var
(
*
GetCharacterText
)
(
PP_Resource
character_event
)
;
struct
PP_Var
(
*
GetCode
)
(
PP_Resource
key_event
)
;
}
;
typedef
struct
PPB_KeyboardInputEvent_1_2
PPB_KeyboardInputEvent
;
struct
PPB_KeyboardInputEvent_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
uint32_t
modifiers
uint32_t
key_code
struct
PP_Var
character_text
)
;
PP_Bool
(
*
IsKeyboardInputEvent
)
(
PP_Resource
resource
)
;
uint32_t
(
*
GetKeyCode
)
(
PP_Resource
key_event
)
;
struct
PP_Var
(
*
GetCharacterText
)
(
PP_Resource
character_event
)
;
}
;
typedef
enum
{
PP_TOUCHLIST_TYPE_TOUCHES
=
0
PP_TOUCHLIST_TYPE_CHANGEDTOUCHES
=
1
PP_TOUCHLIST_TYPE_TARGETTOUCHES
=
2
}
PP_TouchListType
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_TouchListType
4
)
;
struct
PPB_TouchInputEvent_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
uint32_t
modifiers
)
;
void
(
*
AddTouchPoint
)
(
PP_Resource
touch_event
PP_TouchListType
list
const
struct
PP_TouchPoint
*
point
)
;
PP_Bool
(
*
IsTouchInputEvent
)
(
PP_Resource
resource
)
;
uint32_t
(
*
GetTouchCount
)
(
PP_Resource
resource
PP_TouchListType
list
)
;
struct
PP_TouchPoint
(
*
GetTouchByIndex
)
(
PP_Resource
resource
PP_TouchListType
list
uint32_t
index
)
;
struct
PP_TouchPoint
(
*
GetTouchById
)
(
PP_Resource
resource
PP_TouchListType
list
uint32_t
touch_id
)
;
}
;
typedef
struct
PPB_TouchInputEvent_1_0
PPB_TouchInputEvent
;
struct
PPB_IMEInputEvent_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
struct
PP_Var
text
uint32_t
segment_number
const
uint32_t
segment_offsets
[
]
int32_t
target_segment
uint32_t
selection_start
uint32_t
selection_end
)
;
PP_Bool
(
*
IsIMEInputEvent
)
(
PP_Resource
resource
)
;
struct
PP_Var
(
*
GetText
)
(
PP_Resource
ime_event
)
;
uint32_t
(
*
GetSegmentNumber
)
(
PP_Resource
ime_event
)
;
uint32_t
(
*
GetSegmentOffset
)
(
PP_Resource
ime_event
uint32_t
index
)
;
int32_t
(
*
GetTargetSegment
)
(
PP_Resource
ime_event
)
;
void
(
*
GetSelection
)
(
PP_Resource
ime_event
uint32_t
*
start
uint32_t
*
end
)
;
}
;
typedef
struct
PPB_IMEInputEvent_1_0
PPB_IMEInputEvent
;
struct
PP_InputEvent_Key
{
uint32_t
modifier
;
uint32_t
key_code
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_InputEvent_Key
8
)
;
struct
PP_InputEvent_Character
{
uint32_t
modifier
;
int8_t
text
[
5
]
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_InputEvent_Character
12
)
;
struct
PP_InputEvent_Mouse
{
uint32_t
modifier
;
PP_InputEvent_MouseButton
button
;
float
x
;
float
y
;
int32_t
click_count
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_InputEvent_Mouse
20
)
;
struct
PP_InputEvent_Wheel
{
uint32_t
modifier
;
float
delta_x
;
float
delta_y
;
float
wheel_ticks_x
;
float
wheel_ticks_y
;
PP_Bool
scroll_by_page
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_InputEvent_Wheel
24
)
;
typedef
int32_t
PP_Module
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_Module
4
)
;
typedef
const
void
*
(
*
PPB_GetInterface
)
(
const
char
*
interface_name
)
;
typedef
void
(
*
PPB_Audio_Callback
)
(
void
*
sample_buffer
uint32_t
buffer_size_in_bytes
PP_TimeDelta
latency
void
*
user_data
)
;
typedef
void
(
*
PPB_Audio_Callback_1_0
)
(
void
*
sample_buffer
uint32_t
buffer_size_in_bytes
void
*
user_data
)
;
struct
PPB_Audio_1_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_Resource
config
PPB_Audio_Callback
audio_callback
void
*
user_data
)
;
PP_Bool
(
*
IsAudio
)
(
PP_Resource
resource
)
;
PP_Resource
(
*
GetCurrentConfig
)
(
PP_Resource
audio
)
;
PP_Bool
(
*
StartPlayback
)
(
PP_Resource
audio
)
;
PP_Bool
(
*
StopPlayback
)
(
PP_Resource
audio
)
;
}
;
typedef
struct
PPB_Audio_1_1
PPB_Audio
;
struct
PPB_Audio_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_Resource
config
PPB_Audio_Callback_1_0
audio_callback
void
*
user_data
)
;
PP_Bool
(
*
IsAudio
)
(
PP_Resource
resource
)
;
PP_Resource
(
*
GetCurrentConfig
)
(
PP_Resource
audio
)
;
PP_Bool
(
*
StartPlayback
)
(
PP_Resource
audio
)
;
PP_Bool
(
*
StopPlayback
)
(
PP_Resource
audio
)
;
}
;
typedef
enum
{
PP_AUDIOBUFFER_SAMPLERATE_UNKNOWN
=
0
PP_AUDIOBUFFER_SAMPLERATE_8000
=
8000
PP_AUDIOBUFFER_SAMPLERATE_16000
=
16000
PP_AUDIOBUFFER_SAMPLERATE_22050
=
22050
PP_AUDIOBUFFER_SAMPLERATE_32000
=
32000
PP_AUDIOBUFFER_SAMPLERATE_44100
=
44100
PP_AUDIOBUFFER_SAMPLERATE_48000
=
48000
PP_AUDIOBUFFER_SAMPLERATE_96000
=
96000
PP_AUDIOBUFFER_SAMPLERATE_192000
=
192000
}
PP_AudioBuffer_SampleRate
;
typedef
enum
{
PP_AUDIOBUFFER_SAMPLESIZE_UNKNOWN
=
0
PP_AUDIOBUFFER_SAMPLESIZE_16_BITS
=
2
}
PP_AudioBuffer_SampleSize
;
struct
PPB_AudioBuffer_0_1
{
PP_Bool
(
*
IsAudioBuffer
)
(
PP_Resource
resource
)
;
PP_TimeDelta
(
*
GetTimestamp
)
(
PP_Resource
buffer
)
;
void
(
*
SetTimestamp
)
(
PP_Resource
buffer
PP_TimeDelta
timestamp
)
;
PP_AudioBuffer_SampleRate
(
*
GetSampleRate
)
(
PP_Resource
buffer
)
;
PP_AudioBuffer_SampleSize
(
*
GetSampleSize
)
(
PP_Resource
buffer
)
;
uint32_t
(
*
GetNumberOfChannels
)
(
PP_Resource
buffer
)
;
uint32_t
(
*
GetNumberOfSamples
)
(
PP_Resource
buffer
)
;
void
*
(
*
GetDataBuffer
)
(
PP_Resource
buffer
)
;
uint32_t
(
*
GetDataBufferSize
)
(
PP_Resource
buffer
)
;
}
;
typedef
struct
PPB_AudioBuffer_0_1
PPB_AudioBuffer
;
enum
{
PP_AUDIOMINSAMPLEFRAMECOUNT
=
64
PP_AUDIOMAXSAMPLEFRAMECOUNT
=
32768
}
;
typedef
enum
{
PP_AUDIOSAMPLERATE_NONE
=
0
PP_AUDIOSAMPLERATE_44100
=
44100
PP_AUDIOSAMPLERATE_48000
=
48000
}
PP_AudioSampleRate
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_AudioSampleRate
4
)
;
struct
PPB_AudioConfig_1_1
{
PP_Resource
(
*
CreateStereo16Bit
)
(
PP_Instance
instance
PP_AudioSampleRate
sample_rate
uint32_t
sample_frame_count
)
;
uint32_t
(
*
RecommendSampleFrameCount
)
(
PP_Instance
instance
PP_AudioSampleRate
sample_rate
uint32_t
requested_sample_frame_count
)
;
PP_Bool
(
*
IsAudioConfig
)
(
PP_Resource
resource
)
;
PP_AudioSampleRate
(
*
GetSampleRate
)
(
PP_Resource
config
)
;
uint32_t
(
*
GetSampleFrameCount
)
(
PP_Resource
config
)
;
PP_AudioSampleRate
(
*
RecommendSampleRate
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPB_AudioConfig_1_1
PPB_AudioConfig
;
struct
PPB_AudioConfig_1_0
{
PP_Resource
(
*
CreateStereo16Bit
)
(
PP_Instance
instance
PP_AudioSampleRate
sample_rate
uint32_t
sample_frame_count
)
;
uint32_t
(
*
RecommendSampleFrameCount
)
(
PP_AudioSampleRate
sample_rate
uint32_t
requested_sample_frame_count
)
;
PP_Bool
(
*
IsAudioConfig
)
(
PP_Resource
resource
)
;
PP_AudioSampleRate
(
*
GetSampleRate
)
(
PP_Resource
config
)
;
uint32_t
(
*
GetSampleFrameCount
)
(
PP_Resource
config
)
;
}
;
struct
PPB_AudioEncoder_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsAudioEncoder
)
(
PP_Resource
resource
)
;
int32_t
(
*
GetSupportedProfiles
)
(
PP_Resource
audio_encoder
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Initialize
)
(
PP_Resource
audio_encoder
uint32_t
channels
PP_AudioBuffer_SampleRate
input_sample_rate
PP_AudioBuffer_SampleSize
input_sample_size
PP_AudioProfile
output_profile
uint32_t
initial_bitrate
PP_HardwareAcceleration
acceleration
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetNumberOfSamples
)
(
PP_Resource
audio_encoder
)
;
int32_t
(
*
GetBuffer
)
(
PP_Resource
audio_encoder
PP_Resource
*
audio_buffer
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Encode
)
(
PP_Resource
audio_encoder
PP_Resource
audio_buffer
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetBitstreamBuffer
)
(
PP_Resource
audio_encoder
struct
PP_AudioBitstreamBuffer
*
bitstream_buffer
struct
PP_CompletionCallback
callback
)
;
void
(
*
RecycleBitstreamBuffer
)
(
PP_Resource
audio_encoder
const
struct
PP_AudioBitstreamBuffer
*
bitstream_buffer
)
;
void
(
*
RequestBitrateChange
)
(
PP_Resource
audio_encoder
uint32_t
bitrate
)
;
void
(
*
Close
)
(
PP_Resource
audio_encoder
)
;
}
;
struct
PPB_Compositor_0_1
{
PP_Bool
(
*
IsCompositor
)
(
PP_Resource
resource
)
;
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Resource
(
*
AddLayer
)
(
PP_Resource
compositor
)
;
int32_t
(
*
CommitLayers
)
(
PP_Resource
compositor
struct
PP_CompletionCallback
cc
)
;
int32_t
(
*
ResetLayers
)
(
PP_Resource
compositor
)
;
}
;
typedef
enum
{
PP_BLENDMODE_NONE
PP_BLENDMODE_SRC_OVER
PP_BLENDMODE_LAST
=
PP_BLENDMODE_SRC_OVER
}
PP_BlendMode
;
struct
PPB_CompositorLayer_0_2
{
PP_Bool
(
*
IsCompositorLayer
)
(
PP_Resource
resource
)
;
int32_t
(
*
SetColor
)
(
PP_Resource
layer
float
red
float
green
float
blue
float
alpha
const
struct
PP_Size
*
size
)
;
int32_t
(
*
SetTexture
)
(
PP_Resource
layer
PP_Resource
context
uint32_t
target
uint32_t
texture
const
struct
PP_Size
*
size
struct
PP_CompletionCallback
cc
)
;
int32_t
(
*
SetImage
)
(
PP_Resource
layer
PP_Resource
image_data
const
struct
PP_Size
*
size
struct
PP_CompletionCallback
cc
)
;
int32_t
(
*
SetClipRect
)
(
PP_Resource
layer
const
struct
PP_Rect
*
rect
)
;
int32_t
(
*
SetTransform
)
(
PP_Resource
layer
const
float
matrix
[
16
]
)
;
int32_t
(
*
SetOpacity
)
(
PP_Resource
layer
float
opacity
)
;
int32_t
(
*
SetBlendMode
)
(
PP_Resource
layer
PP_BlendMode
mode
)
;
int32_t
(
*
SetSourceRect
)
(
PP_Resource
layer
const
struct
PP_FloatRect
*
rect
)
;
int32_t
(
*
SetPremultipliedAlpha
)
(
PP_Resource
layer
PP_Bool
premult
)
;
}
;
struct
PPB_CompositorLayer_0_1
{
PP_Bool
(
*
IsCompositorLayer
)
(
PP_Resource
resource
)
;
int32_t
(
*
SetColor
)
(
PP_Resource
layer
float
red
float
green
float
blue
float
alpha
const
struct
PP_Size
*
size
)
;
int32_t
(
*
SetTexture
)
(
PP_Resource
layer
PP_Resource
context
uint32_t
texture
const
struct
PP_Size
*
size
struct
PP_CompletionCallback
cc
)
;
int32_t
(
*
SetImage
)
(
PP_Resource
layer
PP_Resource
image_data
const
struct
PP_Size
*
size
struct
PP_CompletionCallback
cc
)
;
int32_t
(
*
SetClipRect
)
(
PP_Resource
layer
const
struct
PP_Rect
*
rect
)
;
int32_t
(
*
SetTransform
)
(
PP_Resource
layer
const
float
matrix
[
16
]
)
;
int32_t
(
*
SetOpacity
)
(
PP_Resource
layer
float
opacity
)
;
int32_t
(
*
SetBlendMode
)
(
PP_Resource
layer
PP_BlendMode
mode
)
;
int32_t
(
*
SetSourceRect
)
(
PP_Resource
layer
const
struct
PP_FloatRect
*
rect
)
;
int32_t
(
*
SetPremultipliedAlpha
)
(
PP_Resource
layer
PP_Bool
premult
)
;
}
;
typedef
enum
{
PP_LOGLEVEL_TIP
=
0
PP_LOGLEVEL_LOG
=
1
PP_LOGLEVEL_WARNING
=
2
PP_LOGLEVEL_ERROR
=
3
}
PP_LogLevel
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_LogLevel
4
)
;
struct
PPB_Console_1_0
{
void
(
*
Log
)
(
PP_Instance
instance
PP_LogLevel
level
struct
PP_Var
value
)
;
void
(
*
LogWithSource
)
(
PP_Instance
instance
PP_LogLevel
level
struct
PP_Var
source
struct
PP_Var
value
)
;
}
;
typedef
struct
PPB_Console_1_0
PPB_Console
;
struct
PPB_Core_1_0
{
void
(
*
AddRefResource
)
(
PP_Resource
resource
)
;
void
(
*
ReleaseResource
)
(
PP_Resource
resource
)
;
PP_Time
(
*
GetTime
)
(
void
)
;
PP_TimeTicks
(
*
GetTimeTicks
)
(
void
)
;
void
(
*
CallOnMainThread
)
(
int32_t
delay_in_milliseconds
struct
PP_CompletionCallback
callback
int32_t
result
)
;
PP_Bool
(
*
IsMainThread
)
(
void
)
;
}
;
typedef
struct
PPB_Core_1_0
PPB_Core
;
typedef
enum
{
PP_FILEOPENFLAG_READ
=
1
<
<
0
PP_FILEOPENFLAG_WRITE
=
1
<
<
1
PP_FILEOPENFLAG_CREATE
=
1
<
<
2
PP_FILEOPENFLAG_TRUNCATE
=
1
<
<
3
PP_FILEOPENFLAG_EXCLUSIVE
=
1
<
<
4
PP_FILEOPENFLAG_APPEND
=
1
<
<
5
}
PP_FileOpenFlags
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_FileOpenFlags
4
)
;
struct
PPB_FileIO_1_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsFileIO
)
(
PP_Resource
resource
)
;
int32_t
(
*
Open
)
(
PP_Resource
file_io
PP_Resource
file_ref
int32_t
open_flags
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Query
)
(
PP_Resource
file_io
struct
PP_FileInfo
*
info
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Touch
)
(
PP_Resource
file_io
PP_Time
last_access_time
PP_Time
last_modified_time
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Read
)
(
PP_Resource
file_io
int64_t
offset
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Write
)
(
PP_Resource
file_io
int64_t
offset
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
SetLength
)
(
PP_Resource
file_io
int64_t
length
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Flush
)
(
PP_Resource
file_io
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
file_io
)
;
int32_t
(
*
ReadToArray
)
(
PP_Resource
file_io
int64_t
offset
int32_t
max_read_length
struct
PP_ArrayOutput
*
output
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_FileIO_1_1
PPB_FileIO
;
struct
PPB_FileIO_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsFileIO
)
(
PP_Resource
resource
)
;
int32_t
(
*
Open
)
(
PP_Resource
file_io
PP_Resource
file_ref
int32_t
open_flags
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Query
)
(
PP_Resource
file_io
struct
PP_FileInfo
*
info
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Touch
)
(
PP_Resource
file_io
PP_Time
last_access_time
PP_Time
last_modified_time
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Read
)
(
PP_Resource
file_io
int64_t
offset
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Write
)
(
PP_Resource
file_io
int64_t
offset
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
SetLength
)
(
PP_Resource
file_io
int64_t
length
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Flush
)
(
PP_Resource
file_io
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
file_io
)
;
}
;
typedef
enum
{
PP_MAKEDIRECTORYFLAG_NONE
=
0
<
<
0
PP_MAKEDIRECTORYFLAG_WITH_ANCESTORS
=
1
<
<
0
PP_MAKEDIRECTORYFLAG_EXCLUSIVE
=
1
<
<
1
}
PP_MakeDirectoryFlags
;
struct
PPB_FileRef_1_2
{
PP_Resource
(
*
Create
)
(
PP_Resource
file_system
const
char
*
path
)
;
PP_Bool
(
*
IsFileRef
)
(
PP_Resource
resource
)
;
PP_FileSystemType
(
*
GetFileSystemType
)
(
PP_Resource
file_ref
)
;
struct
PP_Var
(
*
GetName
)
(
PP_Resource
file_ref
)
;
struct
PP_Var
(
*
GetPath
)
(
PP_Resource
file_ref
)
;
PP_Resource
(
*
GetParent
)
(
PP_Resource
file_ref
)
;
int32_t
(
*
MakeDirectory
)
(
PP_Resource
directory_ref
int32_t
make_directory_flags
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Touch
)
(
PP_Resource
file_ref
PP_Time
last_access_time
PP_Time
last_modified_time
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Delete
)
(
PP_Resource
file_ref
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Rename
)
(
PP_Resource
file_ref
PP_Resource
new_file_ref
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Query
)
(
PP_Resource
file_ref
struct
PP_FileInfo
*
info
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
ReadDirectoryEntries
)
(
PP_Resource
file_ref
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_FileRef_1_2
PPB_FileRef
;
struct
PPB_FileRef_1_0
{
PP_Resource
(
*
Create
)
(
PP_Resource
file_system
const
char
*
path
)
;
PP_Bool
(
*
IsFileRef
)
(
PP_Resource
resource
)
;
PP_FileSystemType
(
*
GetFileSystemType
)
(
PP_Resource
file_ref
)
;
struct
PP_Var
(
*
GetName
)
(
PP_Resource
file_ref
)
;
struct
PP_Var
(
*
GetPath
)
(
PP_Resource
file_ref
)
;
PP_Resource
(
*
GetParent
)
(
PP_Resource
file_ref
)
;
int32_t
(
*
MakeDirectory
)
(
PP_Resource
directory_ref
PP_Bool
make_ancestors
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Touch
)
(
PP_Resource
file_ref
PP_Time
last_access_time
PP_Time
last_modified_time
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Delete
)
(
PP_Resource
file_ref
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Rename
)
(
PP_Resource
file_ref
PP_Resource
new_file_ref
struct
PP_CompletionCallback
callback
)
;
}
;
struct
PPB_FileRef_1_1
{
PP_Resource
(
*
Create
)
(
PP_Resource
file_system
const
char
*
path
)
;
PP_Bool
(
*
IsFileRef
)
(
PP_Resource
resource
)
;
PP_FileSystemType
(
*
GetFileSystemType
)
(
PP_Resource
file_ref
)
;
struct
PP_Var
(
*
GetName
)
(
PP_Resource
file_ref
)
;
struct
PP_Var
(
*
GetPath
)
(
PP_Resource
file_ref
)
;
PP_Resource
(
*
GetParent
)
(
PP_Resource
file_ref
)
;
int32_t
(
*
MakeDirectory
)
(
PP_Resource
directory_ref
PP_Bool
make_ancestors
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Touch
)
(
PP_Resource
file_ref
PP_Time
last_access_time
PP_Time
last_modified_time
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Delete
)
(
PP_Resource
file_ref
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Rename
)
(
PP_Resource
file_ref
PP_Resource
new_file_ref
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Query
)
(
PP_Resource
file_ref
struct
PP_FileInfo
*
info
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
ReadDirectoryEntries
)
(
PP_Resource
file_ref
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
}
;
struct
PPB_FileSystem_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_FileSystemType
type
)
;
PP_Bool
(
*
IsFileSystem
)
(
PP_Resource
resource
)
;
int32_t
(
*
Open
)
(
PP_Resource
file_system
int64_t
expected_size
struct
PP_CompletionCallback
callback
)
;
PP_FileSystemType
(
*
GetType
)
(
PP_Resource
file_system
)
;
}
;
typedef
struct
PPB_FileSystem_1_0
PPB_FileSystem
;
struct
PPB_Fullscreen_1_0
{
PP_Bool
(
*
IsFullscreen
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
SetFullscreen
)
(
PP_Instance
instance
PP_Bool
fullscreen
)
;
PP_Bool
(
*
GetScreenSize
)
(
PP_Instance
instance
struct
PP_Size
*
size
)
;
}
;
typedef
struct
PPB_Fullscreen_1_0
PPB_Fullscreen
;
struct
PP_GamepadSampleData
{
uint32_t
axes_length
;
float
axes
[
16
]
;
uint32_t
buttons_length
;
float
buttons
[
32
]
;
double
timestamp
;
uint16_t
id
[
128
]
;
PP_Bool
connected
;
int8_t
unused_pad_
[
4
]
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_GamepadSampleData
472
)
;
struct
PP_GamepadsSampleData
{
uint32_t
length
;
int8_t
unused_pad_
[
4
]
;
struct
PP_GamepadSampleData
items
[
4
]
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_GamepadsSampleData
1896
)
;
struct
PPB_Gamepad_1_0
{
void
(
*
Sample
)
(
PP_Instance
instance
struct
PP_GamepadsSampleData
*
data
)
;
}
;
typedef
struct
PPB_Gamepad_1_0
PPB_Gamepad
;
struct
PPB_Graphics2D_1_2
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
const
struct
PP_Size
*
size
PP_Bool
is_always_opaque
)
;
PP_Bool
(
*
IsGraphics2D
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
Describe
)
(
PP_Resource
graphics_2d
struct
PP_Size
*
size
PP_Bool
*
is_always_opaque
)
;
void
(
*
PaintImageData
)
(
PP_Resource
graphics_2d
PP_Resource
image_data
const
struct
PP_Point
*
top_left
const
struct
PP_Rect
*
src_rect
)
;
void
(
*
Scroll
)
(
PP_Resource
graphics_2d
const
struct
PP_Rect
*
clip_rect
const
struct
PP_Point
*
amount
)
;
void
(
*
ReplaceContents
)
(
PP_Resource
graphics_2d
PP_Resource
image_data
)
;
int32_t
(
*
Flush
)
(
PP_Resource
graphics_2d
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
SetScale
)
(
PP_Resource
resource
float
scale
)
;
float
(
*
GetScale
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
SetLayerTransform
)
(
PP_Resource
resource
float
scale
const
struct
PP_Point
*
origin
const
struct
PP_Point
*
translate
)
;
}
;
typedef
struct
PPB_Graphics2D_1_2
PPB_Graphics2D
;
struct
PPB_Graphics2D_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
const
struct
PP_Size
*
size
PP_Bool
is_always_opaque
)
;
PP_Bool
(
*
IsGraphics2D
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
Describe
)
(
PP_Resource
graphics_2d
struct
PP_Size
*
size
PP_Bool
*
is_always_opaque
)
;
void
(
*
PaintImageData
)
(
PP_Resource
graphics_2d
PP_Resource
image_data
const
struct
PP_Point
*
top_left
const
struct
PP_Rect
*
src_rect
)
;
void
(
*
Scroll
)
(
PP_Resource
graphics_2d
const
struct
PP_Rect
*
clip_rect
const
struct
PP_Point
*
amount
)
;
void
(
*
ReplaceContents
)
(
PP_Resource
graphics_2d
PP_Resource
image_data
)
;
int32_t
(
*
Flush
)
(
PP_Resource
graphics_2d
struct
PP_CompletionCallback
callback
)
;
}
;
struct
PPB_Graphics2D_1_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
const
struct
PP_Size
*
size
PP_Bool
is_always_opaque
)
;
PP_Bool
(
*
IsGraphics2D
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
Describe
)
(
PP_Resource
graphics_2d
struct
PP_Size
*
size
PP_Bool
*
is_always_opaque
)
;
void
(
*
PaintImageData
)
(
PP_Resource
graphics_2d
PP_Resource
image_data
const
struct
PP_Point
*
top_left
const
struct
PP_Rect
*
src_rect
)
;
void
(
*
Scroll
)
(
PP_Resource
graphics_2d
const
struct
PP_Rect
*
clip_rect
const
struct
PP_Point
*
amount
)
;
void
(
*
ReplaceContents
)
(
PP_Resource
graphics_2d
PP_Resource
image_data
)
;
int32_t
(
*
Flush
)
(
PP_Resource
graphics_2d
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
SetScale
)
(
PP_Resource
resource
float
scale
)
;
float
(
*
GetScale
)
(
PP_Resource
resource
)
;
}
;
#
include
"
ppapi
/
c
/
pp_graphics_3d
.
h
"
struct
PPB_Graphics3D_1_0
{
int32_t
(
*
GetAttribMaxValue
)
(
PP_Resource
instance
int32_t
attribute
int32_t
*
value
)
;
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_Resource
share_context
const
int32_t
attrib_list
[
]
)
;
PP_Bool
(
*
IsGraphics3D
)
(
PP_Resource
resource
)
;
int32_t
(
*
GetAttribs
)
(
PP_Resource
context
int32_t
attrib_list
[
]
)
;
int32_t
(
*
SetAttribs
)
(
PP_Resource
context
const
int32_t
attrib_list
[
]
)
;
int32_t
(
*
GetError
)
(
PP_Resource
context
)
;
int32_t
(
*
ResizeBuffers
)
(
PP_Resource
context
int32_t
width
int32_t
height
)
;
int32_t
(
*
SwapBuffers
)
(
PP_Resource
context
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_Graphics3D_1_0
PPB_Graphics3D
;
typedef
enum
{
PP_NETADDRESS_FAMILY_UNSPECIFIED
=
0
PP_NETADDRESS_FAMILY_IPV4
=
1
PP_NETADDRESS_FAMILY_IPV6
=
2
}
PP_NetAddress_Family
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_NetAddress_Family
4
)
;
struct
PP_NetAddress_IPv4
{
uint16_t
port
;
uint8_t
addr
[
4
]
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_NetAddress_IPv4
6
)
;
struct
PP_NetAddress_IPv6
{
uint16_t
port
;
uint8_t
addr
[
16
]
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_NetAddress_IPv6
18
)
;
struct
PPB_NetAddress_1_0
{
PP_Resource
(
*
CreateFromIPv4Address
)
(
PP_Instance
instance
const
struct
PP_NetAddress_IPv4
*
ipv4_addr
)
;
PP_Resource
(
*
CreateFromIPv6Address
)
(
PP_Instance
instance
const
struct
PP_NetAddress_IPv6
*
ipv6_addr
)
;
PP_Bool
(
*
IsNetAddress
)
(
PP_Resource
resource
)
;
PP_NetAddress_Family
(
*
GetFamily
)
(
PP_Resource
addr
)
;
struct
PP_Var
(
*
DescribeAsString
)
(
PP_Resource
addr
PP_Bool
include_port
)
;
PP_Bool
(
*
DescribeAsIPv4Address
)
(
PP_Resource
addr
struct
PP_NetAddress_IPv4
*
ipv4_addr
)
;
PP_Bool
(
*
DescribeAsIPv6Address
)
(
PP_Resource
addr
struct
PP_NetAddress_IPv6
*
ipv6_addr
)
;
}
;
typedef
struct
PPB_NetAddress_1_0
PPB_NetAddress
;
typedef
enum
{
PP_HOSTRESOLVER_FLAG_CANONNAME
=
1
<
<
0
}
PP_HostResolver_Flag
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_HostResolver_Flag
4
)
;
struct
PP_HostResolver_Hint
{
PP_NetAddress_Family
family
;
int32_t
flags
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_HostResolver_Hint
8
)
;
struct
PPB_HostResolver_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsHostResolver
)
(
PP_Resource
resource
)
;
int32_t
(
*
Resolve
)
(
PP_Resource
host_resolver
const
char
*
host
uint16_t
port
const
struct
PP_HostResolver_Hint
*
hint
struct
PP_CompletionCallback
callback
)
;
struct
PP_Var
(
*
GetCanonicalName
)
(
PP_Resource
host_resolver
)
;
uint32_t
(
*
GetNetAddressCount
)
(
PP_Resource
host_resolver
)
;
PP_Resource
(
*
GetNetAddress
)
(
PP_Resource
host_resolver
uint32_t
index
)
;
}
;
typedef
struct
PPB_HostResolver_1_0
PPB_HostResolver
;
typedef
enum
{
PP_IMAGEDATAFORMAT_BGRA_PREMUL
PP_IMAGEDATAFORMAT_RGBA_PREMUL
}
PP_ImageDataFormat
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_ImageDataFormat
4
)
;
struct
PP_ImageDataDesc
{
PP_ImageDataFormat
format
;
struct
PP_Size
size
;
int32_t
stride
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_ImageDataDesc
16
)
;
struct
PPB_ImageData_1_0
{
PP_ImageDataFormat
(
*
GetNativeImageDataFormat
)
(
void
)
;
PP_Bool
(
*
IsImageDataFormatSupported
)
(
PP_ImageDataFormat
format
)
;
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_ImageDataFormat
format
const
struct
PP_Size
*
size
PP_Bool
init_to_zero
)
;
PP_Bool
(
*
IsImageData
)
(
PP_Resource
image_data
)
;
PP_Bool
(
*
Describe
)
(
PP_Resource
image_data
struct
PP_ImageDataDesc
*
desc
)
;
void
*
(
*
Map
)
(
PP_Resource
image_data
)
;
void
(
*
Unmap
)
(
PP_Resource
image_data
)
;
}
;
typedef
struct
PPB_ImageData_1_0
PPB_ImageData
;
struct
PPB_Instance_1_0
{
PP_Bool
(
*
BindGraphics
)
(
PP_Instance
instance
PP_Resource
device
)
;
PP_Bool
(
*
IsFullFrame
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPB_Instance_1_0
PPB_Instance
;
typedef
enum
{
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_NONE
=
0
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_BUFFERS
=
1
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_SAMPLE_RATE
=
2
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_SAMPLE_SIZE
=
3
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_CHANNELS
=
4
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_DURATION
=
5
}
PP_MediaStreamAudioTrack_Attrib
;
struct
PPB_MediaStreamAudioTrack_0_1
{
PP_Bool
(
*
IsMediaStreamAudioTrack
)
(
PP_Resource
resource
)
;
int32_t
(
*
Configure
)
(
PP_Resource
audio_track
const
int32_t
attrib_list
[
]
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetAttrib
)
(
PP_Resource
audio_track
PP_MediaStreamAudioTrack_Attrib
attrib
int32_t
*
value
)
;
struct
PP_Var
(
*
GetId
)
(
PP_Resource
audio_track
)
;
PP_Bool
(
*
HasEnded
)
(
PP_Resource
audio_track
)
;
int32_t
(
*
GetBuffer
)
(
PP_Resource
audio_track
PP_Resource
*
buffer
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
RecycleBuffer
)
(
PP_Resource
audio_track
PP_Resource
buffer
)
;
void
(
*
Close
)
(
PP_Resource
audio_track
)
;
}
;
typedef
struct
PPB_MediaStreamAudioTrack_0_1
PPB_MediaStreamAudioTrack
;
typedef
enum
{
PP_MEDIASTREAMVIDEOTRACK_ATTRIB_NONE
=
0
PP_MEDIASTREAMVIDEOTRACK_ATTRIB_BUFFERED_FRAMES
=
1
PP_MEDIASTREAMVIDEOTRACK_ATTRIB_WIDTH
=
2
PP_MEDIASTREAMVIDEOTRACK_ATTRIB_HEIGHT
=
3
PP_MEDIASTREAMVIDEOTRACK_ATTRIB_FORMAT
=
4
}
PP_MediaStreamVideoTrack_Attrib
;
struct
PPB_MediaStreamVideoTrack_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsMediaStreamVideoTrack
)
(
PP_Resource
resource
)
;
int32_t
(
*
Configure
)
(
PP_Resource
video_track
const
int32_t
attrib_list
[
]
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetAttrib
)
(
PP_Resource
video_track
PP_MediaStreamVideoTrack_Attrib
attrib
int32_t
*
value
)
;
struct
PP_Var
(
*
GetId
)
(
PP_Resource
video_track
)
;
PP_Bool
(
*
HasEnded
)
(
PP_Resource
video_track
)
;
int32_t
(
*
GetFrame
)
(
PP_Resource
video_track
PP_Resource
*
frame
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
RecycleFrame
)
(
PP_Resource
video_track
PP_Resource
frame
)
;
void
(
*
Close
)
(
PP_Resource
video_track
)
;
int32_t
(
*
GetEmptyFrame
)
(
PP_Resource
video_track
PP_Resource
*
frame
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
PutFrame
)
(
PP_Resource
video_track
PP_Resource
frame
)
;
}
;
struct
PPB_MediaStreamVideoTrack_0_1
{
PP_Bool
(
*
IsMediaStreamVideoTrack
)
(
PP_Resource
resource
)
;
int32_t
(
*
Configure
)
(
PP_Resource
video_track
const
int32_t
attrib_list
[
]
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetAttrib
)
(
PP_Resource
video_track
PP_MediaStreamVideoTrack_Attrib
attrib
int32_t
*
value
)
;
struct
PP_Var
(
*
GetId
)
(
PP_Resource
video_track
)
;
PP_Bool
(
*
HasEnded
)
(
PP_Resource
video_track
)
;
int32_t
(
*
GetFrame
)
(
PP_Resource
video_track
PP_Resource
*
frame
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
RecycleFrame
)
(
PP_Resource
video_track
PP_Resource
frame
)
;
void
(
*
Close
)
(
PP_Resource
video_track
)
;
}
;
typedef
struct
PPB_MediaStreamVideoTrack_0_1
PPB_MediaStreamVideoTrack
;
struct
PPB_MessageLoop_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Resource
(
*
GetForMainThread
)
(
void
)
;
PP_Resource
(
*
GetCurrent
)
(
void
)
;
int32_t
(
*
AttachToCurrentThread
)
(
PP_Resource
message_loop
)
;
int32_t
(
*
Run
)
(
PP_Resource
message_loop
)
;
int32_t
(
*
PostWork
)
(
PP_Resource
message_loop
struct
PP_CompletionCallback
callback
int64_t
delay_ms
)
;
int32_t
(
*
PostQuit
)
(
PP_Resource
message_loop
PP_Bool
should_destroy
)
;
}
;
typedef
struct
PPB_MessageLoop_1_0
PPB_MessageLoop
;
struct
PPP_MessageHandler_0_2
{
void
(
*
HandleMessage
)
(
PP_Instance
instance
void
*
user_data
const
struct
PP_Var
*
message
)
;
void
(
*
HandleBlockingMessage
)
(
PP_Instance
instance
void
*
user_data
const
struct
PP_Var
*
message
struct
PP_Var
*
response
)
;
void
(
*
Destroy
)
(
PP_Instance
instance
void
*
user_data
)
;
}
;
typedef
struct
PPP_MessageHandler_0_2
PPP_MessageHandler
;
struct
PPB_Messaging_1_2
{
void
(
*
PostMessage
)
(
PP_Instance
instance
struct
PP_Var
message
)
;
int32_t
(
*
RegisterMessageHandler
)
(
PP_Instance
instance
void
*
user_data
const
struct
PPP_MessageHandler_0_2
*
handler
PP_Resource
message_loop
)
;
void
(
*
UnregisterMessageHandler
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPB_Messaging_1_2
PPB_Messaging
;
struct
PPB_Messaging_1_0
{
void
(
*
PostMessage
)
(
PP_Instance
instance
struct
PP_Var
message
)
;
}
;
enum
PP_MouseCursor_Type
{
PP_MOUSECURSOR_TYPE_CUSTOM
=
-
1
PP_MOUSECURSOR_TYPE_POINTER
=
0
PP_MOUSECURSOR_TYPE_CROSS
=
1
PP_MOUSECURSOR_TYPE_HAND
=
2
PP_MOUSECURSOR_TYPE_IBEAM
=
3
PP_MOUSECURSOR_TYPE_WAIT
=
4
PP_MOUSECURSOR_TYPE_HELP
=
5
PP_MOUSECURSOR_TYPE_EASTRESIZE
=
6
PP_MOUSECURSOR_TYPE_NORTHRESIZE
=
7
PP_MOUSECURSOR_TYPE_NORTHEASTRESIZE
=
8
PP_MOUSECURSOR_TYPE_NORTHWESTRESIZE
=
9
PP_MOUSECURSOR_TYPE_SOUTHRESIZE
=
10
PP_MOUSECURSOR_TYPE_SOUTHEASTRESIZE
=
11
PP_MOUSECURSOR_TYPE_SOUTHWESTRESIZE
=
12
PP_MOUSECURSOR_TYPE_WESTRESIZE
=
13
PP_MOUSECURSOR_TYPE_NORTHSOUTHRESIZE
=
14
PP_MOUSECURSOR_TYPE_EASTWESTRESIZE
=
15
PP_MOUSECURSOR_TYPE_NORTHEASTSOUTHWESTRESIZE
=
16
PP_MOUSECURSOR_TYPE_NORTHWESTSOUTHEASTRESIZE
=
17
PP_MOUSECURSOR_TYPE_COLUMNRESIZE
=
18
PP_MOUSECURSOR_TYPE_ROWRESIZE
=
19
PP_MOUSECURSOR_TYPE_MIDDLEPANNING
=
20
PP_MOUSECURSOR_TYPE_EASTPANNING
=
21
PP_MOUSECURSOR_TYPE_NORTHPANNING
=
22
PP_MOUSECURSOR_TYPE_NORTHEASTPANNING
=
23
PP_MOUSECURSOR_TYPE_NORTHWESTPANNING
=
24
PP_MOUSECURSOR_TYPE_SOUTHPANNING
=
25
PP_MOUSECURSOR_TYPE_SOUTHEASTPANNING
=
26
PP_MOUSECURSOR_TYPE_SOUTHWESTPANNING
=
27
PP_MOUSECURSOR_TYPE_WESTPANNING
=
28
PP_MOUSECURSOR_TYPE_MOVE
=
29
PP_MOUSECURSOR_TYPE_VERTICALTEXT
=
30
PP_MOUSECURSOR_TYPE_CELL
=
31
PP_MOUSECURSOR_TYPE_CONTEXTMENU
=
32
PP_MOUSECURSOR_TYPE_ALIAS
=
33
PP_MOUSECURSOR_TYPE_PROGRESS
=
34
PP_MOUSECURSOR_TYPE_NODROP
=
35
PP_MOUSECURSOR_TYPE_COPY
=
36
PP_MOUSECURSOR_TYPE_NONE
=
37
PP_MOUSECURSOR_TYPE_NOTALLOWED
=
38
PP_MOUSECURSOR_TYPE_ZOOMIN
=
39
PP_MOUSECURSOR_TYPE_ZOOMOUT
=
40
PP_MOUSECURSOR_TYPE_GRAB
=
41
PP_MOUSECURSOR_TYPE_GRABBING
=
42
}
;
PP_COMPILE_ASSERT_ENUM_SIZE_IN_BYTES
(
PP_MouseCursor_Type
4
)
;
struct
PPB_MouseCursor_1_0
{
PP_Bool
(
*
SetCursor
)
(
PP_Instance
instance
enum
PP_MouseCursor_Type
type
PP_Resource
image
const
struct
PP_Point
*
hot_spot
)
;
}
;
typedef
struct
PPB_MouseCursor_1_0
PPB_MouseCursor
;
struct
PPB_MouseLock_1_0
{
int32_t
(
*
LockMouse
)
(
PP_Instance
instance
struct
PP_CompletionCallback
callback
)
;
void
(
*
UnlockMouse
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPB_MouseLock_1_0
PPB_MouseLock
;
typedef
enum
{
PP_NETWORKLIST_TYPE_UNKNOWN
=
0
PP_NETWORKLIST_TYPE_ETHERNET
=
1
PP_NETWORKLIST_TYPE_WIFI
=
2
PP_NETWORKLIST_TYPE_CELLULAR
=
3
}
PP_NetworkList_Type
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_NetworkList_Type
4
)
;
typedef
enum
{
PP_NETWORKLIST_STATE_DOWN
=
0
PP_NETWORKLIST_STATE_UP
=
1
}
PP_NetworkList_State
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_NetworkList_State
4
)
;
struct
PPB_NetworkList_1_0
{
PP_Bool
(
*
IsNetworkList
)
(
PP_Resource
resource
)
;
uint32_t
(
*
GetCount
)
(
PP_Resource
resource
)
;
struct
PP_Var
(
*
GetName
)
(
PP_Resource
resource
uint32_t
index
)
;
PP_NetworkList_Type
(
*
GetType
)
(
PP_Resource
resource
uint32_t
index
)
;
PP_NetworkList_State
(
*
GetState
)
(
PP_Resource
resource
uint32_t
index
)
;
int32_t
(
*
GetIpAddresses
)
(
PP_Resource
resource
uint32_t
index
struct
PP_ArrayOutput
output
)
;
struct
PP_Var
(
*
GetDisplayName
)
(
PP_Resource
resource
uint32_t
index
)
;
uint32_t
(
*
GetMTU
)
(
PP_Resource
resource
uint32_t
index
)
;
}
;
typedef
struct
PPB_NetworkList_1_0
PPB_NetworkList
;
struct
PPB_NetworkMonitor_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
int32_t
(
*
UpdateNetworkList
)
(
PP_Resource
network_monitor
PP_Resource
*
network_list
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
IsNetworkMonitor
)
(
PP_Resource
resource
)
;
}
;
typedef
struct
PPB_NetworkMonitor_1_0
PPB_NetworkMonitor
;
struct
PPB_NetworkProxy_1_0
{
int32_t
(
*
GetProxyForURL
)
(
PP_Instance
instance
struct
PP_Var
url
struct
PP_Var
*
proxy_string
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_NetworkProxy_1_0
PPB_NetworkProxy
;
#
include
"
ppapi
/
c
/
pp_resource
.
h
"
#
ifndef
__gl2_h_
typedef
void
GLvoid
;
typedef
int
GLsizei
;
typedef
unsigned
short
GLushort
;
typedef
short
GLshort
;
typedef
unsigned
char
GLubyte
;
typedef
unsigned
int
GLenum
;
typedef
int
GLint
;
typedef
unsigned
char
GLboolean
;
typedef
unsigned
int
GLbitfield
;
typedef
float
GLfloat
;
typedef
float
GLclampf
;
typedef
signed
char
GLbyte
;
typedef
unsigned
int
GLuint
;
typedef
int
GLfixed
;
typedef
int
GLclampx
;
#
ifdef
_WIN64
typedef
long
long
int
GLintptr
;
typedef
long
long
int
GLsizeiptr
;
#
else
typedef
long
int
GLintptr
;
typedef
long
int
GLsizeiptr
;
#
endif
#
endif
struct
PPB_OpenGLES2_1_0
{
void
(
*
ActiveTexture
)
(
PP_Resource
context
GLenum
texture
)
;
void
(
*
AttachShader
)
(
PP_Resource
context
GLuint
program
GLuint
shader
)
;
void
(
*
BindAttribLocation
)
(
PP_Resource
context
GLuint
program
GLuint
index
const
char
*
name
)
;
void
(
*
BindBuffer
)
(
PP_Resource
context
GLenum
target
GLuint
buffer
)
;
void
(
*
BindFramebuffer
)
(
PP_Resource
context
GLenum
target
GLuint
framebuffer
)
;
void
(
*
BindRenderbuffer
)
(
PP_Resource
context
GLenum
target
GLuint
renderbuffer
)
;
void
(
*
BindTexture
)
(
PP_Resource
context
GLenum
target
GLuint
texture
)
;
void
(
*
BlendColor
)
(
PP_Resource
context
GLclampf
red
GLclampf
green
GLclampf
blue
GLclampf
alpha
)
;
void
(
*
BlendEquation
)
(
PP_Resource
context
GLenum
mode
)
;
void
(
*
BlendEquationSeparate
)
(
PP_Resource
context
GLenum
modeRGB
GLenum
modeAlpha
)
;
void
(
*
BlendFunc
)
(
PP_Resource
context
GLenum
sfactor
GLenum
dfactor
)
;
void
(
*
BlendFuncSeparate
)
(
PP_Resource
context
GLenum
srcRGB
GLenum
dstRGB
GLenum
srcAlpha
GLenum
dstAlpha
)
;
void
(
*
BufferData
)
(
PP_Resource
context
GLenum
target
GLsizeiptr
size
const
void
*
data
GLenum
usage
)
;
void
(
*
BufferSubData
)
(
PP_Resource
context
GLenum
target
GLintptr
offset
GLsizeiptr
size
const
void
*
data
)
;
GLenum
(
*
CheckFramebufferStatus
)
(
PP_Resource
context
GLenum
target
)
;
void
(
*
Clear
)
(
PP_Resource
context
GLbitfield
mask
)
;
void
(
*
ClearColor
)
(
PP_Resource
context
GLclampf
red
GLclampf
green
GLclampf
blue
GLclampf
alpha
)
;
void
(
*
ClearDepthf
)
(
PP_Resource
context
GLclampf
depth
)
;
void
(
*
ClearStencil
)
(
PP_Resource
context
GLint
s
)
;
void
(
*
ColorMask
)
(
PP_Resource
context
GLboolean
red
GLboolean
green
GLboolean
blue
GLboolean
alpha
)
;
void
(
*
CompileShader
)
(
PP_Resource
context
GLuint
shader
)
;
void
(
*
CompressedTexImage2D
)
(
PP_Resource
context
GLenum
target
GLint
level
GLenum
internalformat
GLsizei
width
GLsizei
height
GLint
border
GLsizei
imageSize
const
void
*
data
)
;
void
(
*
CompressedTexSubImage2D
)
(
PP_Resource
context
GLenum
target
GLint
level
GLint
xoffset
GLint
yoffset
GLsizei
width
GLsizei
height
GLenum
format
GLsizei
imageSize
const
void
*
data
)
;
void
(
*
CopyTexImage2D
)
(
PP_Resource
context
GLenum
target
GLint
level
GLenum
internalformat
GLint
x
GLint
y
GLsizei
width
GLsizei
height
GLint
border
)
;
void
(
*
CopyTexSubImage2D
)
(
PP_Resource
context
GLenum
target
GLint
level
GLint
xoffset
GLint
yoffset
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
;
GLuint
(
*
CreateProgram
)
(
PP_Resource
context
)
;
GLuint
(
*
CreateShader
)
(
PP_Resource
context
GLenum
type
)
;
void
(
*
CullFace
)
(
PP_Resource
context
GLenum
mode
)
;
void
(
*
DeleteBuffers
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
buffers
)
;
void
(
*
DeleteFramebuffers
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
framebuffers
)
;
void
(
*
DeleteProgram
)
(
PP_Resource
context
GLuint
program
)
;
void
(
*
DeleteRenderbuffers
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
renderbuffers
)
;
void
(
*
DeleteShader
)
(
PP_Resource
context
GLuint
shader
)
;
void
(
*
DeleteTextures
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
textures
)
;
void
(
*
DepthFunc
)
(
PP_Resource
context
GLenum
func
)
;
void
(
*
DepthMask
)
(
PP_Resource
context
GLboolean
flag
)
;
void
(
*
DepthRangef
)
(
PP_Resource
context
GLclampf
zNear
GLclampf
zFar
)
;
void
(
*
DetachShader
)
(
PP_Resource
context
GLuint
program
GLuint
shader
)
;
void
(
*
Disable
)
(
PP_Resource
context
GLenum
cap
)
;
void
(
*
DisableVertexAttribArray
)
(
PP_Resource
context
GLuint
index
)
;
void
(
*
DrawArrays
)
(
PP_Resource
context
GLenum
mode
GLint
first
GLsizei
count
)
;
void
(
*
DrawElements
)
(
PP_Resource
context
GLenum
mode
GLsizei
count
GLenum
type
const
void
*
indices
)
;
void
(
*
Enable
)
(
PP_Resource
context
GLenum
cap
)
;
void
(
*
EnableVertexAttribArray
)
(
PP_Resource
context
GLuint
index
)
;
void
(
*
Finish
)
(
PP_Resource
context
)
;
void
(
*
Flush
)
(
PP_Resource
context
)
;
void
(
*
FramebufferRenderbuffer
)
(
PP_Resource
context
GLenum
target
GLenum
attachment
GLenum
renderbuffertarget
GLuint
renderbuffer
)
;
void
(
*
FramebufferTexture2D
)
(
PP_Resource
context
GLenum
target
GLenum
attachment
GLenum
textarget
GLuint
texture
GLint
level
)
;
void
(
*
FrontFace
)
(
PP_Resource
context
GLenum
mode
)
;
void
(
*
GenBuffers
)
(
PP_Resource
context
GLsizei
n
GLuint
*
buffers
)
;
void
(
*
GenerateMipmap
)
(
PP_Resource
context
GLenum
target
)
;
void
(
*
GenFramebuffers
)
(
PP_Resource
context
GLsizei
n
GLuint
*
framebuffers
)
;
void
(
*
GenRenderbuffers
)
(
PP_Resource
context
GLsizei
n
GLuint
*
renderbuffers
)
;
void
(
*
GenTextures
)
(
PP_Resource
context
GLsizei
n
GLuint
*
textures
)
;
void
(
*
GetActiveAttrib
)
(
PP_Resource
context
GLuint
program
GLuint
index
GLsizei
bufsize
GLsizei
*
length
GLint
*
size
GLenum
*
type
char
*
name
)
;
void
(
*
GetActiveUniform
)
(
PP_Resource
context
GLuint
program
GLuint
index
GLsizei
bufsize
GLsizei
*
length
GLint
*
size
GLenum
*
type
char
*
name
)
;
void
(
*
GetAttachedShaders
)
(
PP_Resource
context
GLuint
program
GLsizei
maxcount
GLsizei
*
count
GLuint
*
shaders
)
;
GLint
(
*
GetAttribLocation
)
(
PP_Resource
context
GLuint
program
const
char
*
name
)
;
void
(
*
GetBooleanv
)
(
PP_Resource
context
GLenum
pname
GLboolean
*
params
)
;
void
(
*
GetBufferParameteriv
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
*
params
)
;
GLenum
(
*
GetError
)
(
PP_Resource
context
)
;
void
(
*
GetFloatv
)
(
PP_Resource
context
GLenum
pname
GLfloat
*
params
)
;
void
(
*
GetFramebufferAttachmentParameteriv
)
(
PP_Resource
context
GLenum
target
GLenum
attachment
GLenum
pname
GLint
*
params
)
;
void
(
*
GetIntegerv
)
(
PP_Resource
context
GLenum
pname
GLint
*
params
)
;
void
(
*
GetProgramiv
)
(
PP_Resource
context
GLuint
program
GLenum
pname
GLint
*
params
)
;
void
(
*
GetProgramInfoLog
)
(
PP_Resource
context
GLuint
program
GLsizei
bufsize
GLsizei
*
length
char
*
infolog
)
;
void
(
*
GetRenderbufferParameteriv
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
*
params
)
;
void
(
*
GetShaderiv
)
(
PP_Resource
context
GLuint
shader
GLenum
pname
GLint
*
params
)
;
void
(
*
GetShaderInfoLog
)
(
PP_Resource
context
GLuint
shader
GLsizei
bufsize
GLsizei
*
length
char
*
infolog
)
;
void
(
*
GetShaderPrecisionFormat
)
(
PP_Resource
context
GLenum
shadertype
GLenum
precisiontype
GLint
*
range
GLint
*
precision
)
;
void
(
*
GetShaderSource
)
(
PP_Resource
context
GLuint
shader
GLsizei
bufsize
GLsizei
*
length
char
*
source
)
;
const
GLubyte
*
(
*
GetString
)
(
PP_Resource
context
GLenum
name
)
;
void
(
*
GetTexParameterfv
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLfloat
*
params
)
;
void
(
*
GetTexParameteriv
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
*
params
)
;
void
(
*
GetUniformfv
)
(
PP_Resource
context
GLuint
program
GLint
location
GLfloat
*
params
)
;
void
(
*
GetUniformiv
)
(
PP_Resource
context
GLuint
program
GLint
location
GLint
*
params
)
;
GLint
(
*
GetUniformLocation
)
(
PP_Resource
context
GLuint
program
const
char
*
name
)
;
void
(
*
GetVertexAttribfv
)
(
PP_Resource
context
GLuint
index
GLenum
pname
GLfloat
*
params
)
;
void
(
*
GetVertexAttribiv
)
(
PP_Resource
context
GLuint
index
GLenum
pname
GLint
*
params
)
;
void
(
*
GetVertexAttribPointerv
)
(
PP_Resource
context
GLuint
index
GLenum
pname
void
*
*
pointer
)
;
void
(
*
Hint
)
(
PP_Resource
context
GLenum
target
GLenum
mode
)
;
GLboolean
(
*
IsBuffer
)
(
PP_Resource
context
GLuint
buffer
)
;
GLboolean
(
*
IsEnabled
)
(
PP_Resource
context
GLenum
cap
)
;
GLboolean
(
*
IsFramebuffer
)
(
PP_Resource
context
GLuint
framebuffer
)
;
GLboolean
(
*
IsProgram
)
(
PP_Resource
context
GLuint
program
)
;
GLboolean
(
*
IsRenderbuffer
)
(
PP_Resource
context
GLuint
renderbuffer
)
;
GLboolean
(
*
IsShader
)
(
PP_Resource
context
GLuint
shader
)
;
GLboolean
(
*
IsTexture
)
(
PP_Resource
context
GLuint
texture
)
;
void
(
*
LineWidth
)
(
PP_Resource
context
GLfloat
width
)
;
void
(
*
LinkProgram
)
(
PP_Resource
context
GLuint
program
)
;
void
(
*
PixelStorei
)
(
PP_Resource
context
GLenum
pname
GLint
param
)
;
void
(
*
PolygonOffset
)
(
PP_Resource
context
GLfloat
factor
GLfloat
units
)
;
void
(
*
ReadPixels
)
(
PP_Resource
context
GLint
x
GLint
y
GLsizei
width
GLsizei
height
GLenum
format
GLenum
type
void
*
pixels
)
;
void
(
*
ReleaseShaderCompiler
)
(
PP_Resource
context
)
;
void
(
*
RenderbufferStorage
)
(
PP_Resource
context
GLenum
target
GLenum
internalformat
GLsizei
width
GLsizei
height
)
;
void
(
*
SampleCoverage
)
(
PP_Resource
context
GLclampf
value
GLboolean
invert
)
;
void
(
*
Scissor
)
(
PP_Resource
context
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
;
void
(
*
ShaderBinary
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
shaders
GLenum
binaryformat
const
void
*
binary
GLsizei
length
)
;
void
(
*
ShaderSource
)
(
PP_Resource
context
GLuint
shader
GLsizei
count
const
char
*
*
str
const
GLint
*
length
)
;
void
(
*
StencilFunc
)
(
PP_Resource
context
GLenum
func
GLint
ref
GLuint
mask
)
;
void
(
*
StencilFuncSeparate
)
(
PP_Resource
context
GLenum
face
GLenum
func
GLint
ref
GLuint
mask
)
;
void
(
*
StencilMask
)
(
PP_Resource
context
GLuint
mask
)
;
void
(
*
StencilMaskSeparate
)
(
PP_Resource
context
GLenum
face
GLuint
mask
)
;
void
(
*
StencilOp
)
(
PP_Resource
context
GLenum
fail
GLenum
zfail
GLenum
zpass
)
;
void
(
*
StencilOpSeparate
)
(
PP_Resource
context
GLenum
face
GLenum
fail
GLenum
zfail
GLenum
zpass
)
;
void
(
*
TexImage2D
)
(
PP_Resource
context
GLenum
target
GLint
level
GLint
internalformat
GLsizei
width
GLsizei
height
GLint
border
GLenum
format
GLenum
type
const
void
*
pixels
)
;
void
(
*
TexParameterf
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLfloat
param
)
;
void
(
*
TexParameterfv
)
(
PP_Resource
context
GLenum
target
GLenum
pname
const
GLfloat
*
params
)
;
void
(
*
TexParameteri
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
param
)
;
void
(
*
TexParameteriv
)
(
PP_Resource
context
GLenum
target
GLenum
pname
const
GLint
*
params
)
;
void
(
*
TexSubImage2D
)
(
PP_Resource
context
GLenum
target
GLint
level
GLint
xoffset
GLint
yoffset
GLsizei
width
GLsizei
height
GLenum
format
GLenum
type
const
void
*
pixels
)
;
void
(
*
Uniform1f
)
(
PP_Resource
context
GLint
location
GLfloat
x
)
;
void
(
*
Uniform1fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLfloat
*
v
)
;
void
(
*
Uniform1i
)
(
PP_Resource
context
GLint
location
GLint
x
)
;
void
(
*
Uniform1iv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLint
*
v
)
;
void
(
*
Uniform2f
)
(
PP_Resource
context
GLint
location
GLfloat
x
GLfloat
y
)
;
void
(
*
Uniform2fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLfloat
*
v
)
;
void
(
*
Uniform2i
)
(
PP_Resource
context
GLint
location
GLint
x
GLint
y
)
;
void
(
*
Uniform2iv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLint
*
v
)
;
void
(
*
Uniform3f
)
(
PP_Resource
context
GLint
location
GLfloat
x
GLfloat
y
GLfloat
z
)
;
void
(
*
Uniform3fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLfloat
*
v
)
;
void
(
*
Uniform3i
)
(
PP_Resource
context
GLint
location
GLint
x
GLint
y
GLint
z
)
;
void
(
*
Uniform3iv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLint
*
v
)
;
void
(
*
Uniform4f
)
(
PP_Resource
context
GLint
location
GLfloat
x
GLfloat
y
GLfloat
z
GLfloat
w
)
;
void
(
*
Uniform4fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLfloat
*
v
)
;
void
(
*
Uniform4i
)
(
PP_Resource
context
GLint
location
GLint
x
GLint
y
GLint
z
GLint
w
)
;
void
(
*
Uniform4iv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLint
*
v
)
;
void
(
*
UniformMatrix2fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
;
void
(
*
UniformMatrix3fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
;
void
(
*
UniformMatrix4fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
;
void
(
*
UseProgram
)
(
PP_Resource
context
GLuint
program
)
;
void
(
*
ValidateProgram
)
(
PP_Resource
context
GLuint
program
)
;
void
(
*
VertexAttrib1f
)
(
PP_Resource
context
GLuint
indx
GLfloat
x
)
;
void
(
*
VertexAttrib1fv
)
(
PP_Resource
context
GLuint
indx
const
GLfloat
*
values
)
;
void
(
*
VertexAttrib2f
)
(
PP_Resource
context
GLuint
indx
GLfloat
x
GLfloat
y
)
;
void
(
*
VertexAttrib2fv
)
(
PP_Resource
context
GLuint
indx
const
GLfloat
*
values
)
;
void
(
*
VertexAttrib3f
)
(
PP_Resource
context
GLuint
indx
GLfloat
x
GLfloat
y
GLfloat
z
)
;
void
(
*
VertexAttrib3fv
)
(
PP_Resource
context
GLuint
indx
const
GLfloat
*
values
)
;
void
(
*
VertexAttrib4f
)
(
PP_Resource
context
GLuint
indx
GLfloat
x
GLfloat
y
GLfloat
z
GLfloat
w
)
;
void
(
*
VertexAttrib4fv
)
(
PP_Resource
context
GLuint
indx
const
GLfloat
*
values
)
;
void
(
*
VertexAttribPointer
)
(
PP_Resource
context
GLuint
indx
GLint
size
GLenum
type
GLboolean
normalized
GLsizei
stride
const
void
*
ptr
)
;
void
(
*
Viewport
)
(
PP_Resource
context
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
;
}
;
struct
PPB_OpenGLES2
{
void
(
*
ActiveTexture
)
(
PP_Resource
context
GLenum
texture
)
;
void
(
*
AttachShader
)
(
PP_Resource
context
GLuint
program
GLuint
shader
)
;
void
(
*
BindAttribLocation
)
(
PP_Resource
context
GLuint
program
GLuint
index
const
char
*
name
)
;
void
(
*
BindBuffer
)
(
PP_Resource
context
GLenum
target
GLuint
buffer
)
;
void
(
*
BindFramebuffer
)
(
PP_Resource
context
GLenum
target
GLuint
framebuffer
)
;
void
(
*
BindRenderbuffer
)
(
PP_Resource
context
GLenum
target
GLuint
renderbuffer
)
;
void
(
*
BindTexture
)
(
PP_Resource
context
GLenum
target
GLuint
texture
)
;
void
(
*
BlendColor
)
(
PP_Resource
context
GLclampf
red
GLclampf
green
GLclampf
blue
GLclampf
alpha
)
;
void
(
*
BlendEquation
)
(
PP_Resource
context
GLenum
mode
)
;
void
(
*
BlendEquationSeparate
)
(
PP_Resource
context
GLenum
modeRGB
GLenum
modeAlpha
)
;
void
(
*
BlendFunc
)
(
PP_Resource
context
GLenum
sfactor
GLenum
dfactor
)
;
void
(
*
BlendFuncSeparate
)
(
PP_Resource
context
GLenum
srcRGB
GLenum
dstRGB
GLenum
srcAlpha
GLenum
dstAlpha
)
;
void
(
*
BufferData
)
(
PP_Resource
context
GLenum
target
GLsizeiptr
size
const
void
*
data
GLenum
usage
)
;
void
(
*
BufferSubData
)
(
PP_Resource
context
GLenum
target
GLintptr
offset
GLsizeiptr
size
const
void
*
data
)
;
GLenum
(
*
CheckFramebufferStatus
)
(
PP_Resource
context
GLenum
target
)
;
void
(
*
Clear
)
(
PP_Resource
context
GLbitfield
mask
)
;
void
(
*
ClearColor
)
(
PP_Resource
context
GLclampf
red
GLclampf
green
GLclampf
blue
GLclampf
alpha
)
;
void
(
*
ClearDepthf
)
(
PP_Resource
context
GLclampf
depth
)
;
void
(
*
ClearStencil
)
(
PP_Resource
context
GLint
s
)
;
void
(
*
ColorMask
)
(
PP_Resource
context
GLboolean
red
GLboolean
green
GLboolean
blue
GLboolean
alpha
)
;
void
(
*
CompileShader
)
(
PP_Resource
context
GLuint
shader
)
;
void
(
*
CompressedTexImage2D
)
(
PP_Resource
context
GLenum
target
GLint
level
GLenum
internalformat
GLsizei
width
GLsizei
height
GLint
border
GLsizei
imageSize
const
void
*
data
)
;
void
(
*
CompressedTexSubImage2D
)
(
PP_Resource
context
GLenum
target
GLint
level
GLint
xoffset
GLint
yoffset
GLsizei
width
GLsizei
height
GLenum
format
GLsizei
imageSize
const
void
*
data
)
;
void
(
*
CopyTexImage2D
)
(
PP_Resource
context
GLenum
target
GLint
level
GLenum
internalformat
GLint
x
GLint
y
GLsizei
width
GLsizei
height
GLint
border
)
;
void
(
*
CopyTexSubImage2D
)
(
PP_Resource
context
GLenum
target
GLint
level
GLint
xoffset
GLint
yoffset
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
;
GLuint
(
*
CreateProgram
)
(
PP_Resource
context
)
;
GLuint
(
*
CreateShader
)
(
PP_Resource
context
GLenum
type
)
;
void
(
*
CullFace
)
(
PP_Resource
context
GLenum
mode
)
;
void
(
*
DeleteBuffers
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
buffers
)
;
void
(
*
DeleteFramebuffers
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
framebuffers
)
;
void
(
*
DeleteProgram
)
(
PP_Resource
context
GLuint
program
)
;
void
(
*
DeleteRenderbuffers
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
renderbuffers
)
;
void
(
*
DeleteShader
)
(
PP_Resource
context
GLuint
shader
)
;
void
(
*
DeleteTextures
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
textures
)
;
void
(
*
DepthFunc
)
(
PP_Resource
context
GLenum
func
)
;
void
(
*
DepthMask
)
(
PP_Resource
context
GLboolean
flag
)
;
void
(
*
DepthRangef
)
(
PP_Resource
context
GLclampf
zNear
GLclampf
zFar
)
;
void
(
*
DetachShader
)
(
PP_Resource
context
GLuint
program
GLuint
shader
)
;
void
(
*
Disable
)
(
PP_Resource
context
GLenum
cap
)
;
void
(
*
DisableVertexAttribArray
)
(
PP_Resource
context
GLuint
index
)
;
void
(
*
DrawArrays
)
(
PP_Resource
context
GLenum
mode
GLint
first
GLsizei
count
)
;
void
(
*
DrawElements
)
(
PP_Resource
context
GLenum
mode
GLsizei
count
GLenum
type
const
void
*
indices
)
;
void
(
*
Enable
)
(
PP_Resource
context
GLenum
cap
)
;
void
(
*
EnableVertexAttribArray
)
(
PP_Resource
context
GLuint
index
)
;
void
(
*
Finish
)
(
PP_Resource
context
)
;
void
(
*
Flush
)
(
PP_Resource
context
)
;
void
(
*
FramebufferRenderbuffer
)
(
PP_Resource
context
GLenum
target
GLenum
attachment
GLenum
renderbuffertarget
GLuint
renderbuffer
)
;
void
(
*
FramebufferTexture2D
)
(
PP_Resource
context
GLenum
target
GLenum
attachment
GLenum
textarget
GLuint
texture
GLint
level
)
;
void
(
*
FrontFace
)
(
PP_Resource
context
GLenum
mode
)
;
void
(
*
GenBuffers
)
(
PP_Resource
context
GLsizei
n
GLuint
*
buffers
)
;
void
(
*
GenerateMipmap
)
(
PP_Resource
context
GLenum
target
)
;
void
(
*
GenFramebuffers
)
(
PP_Resource
context
GLsizei
n
GLuint
*
framebuffers
)
;
void
(
*
GenRenderbuffers
)
(
PP_Resource
context
GLsizei
n
GLuint
*
renderbuffers
)
;
void
(
*
GenTextures
)
(
PP_Resource
context
GLsizei
n
GLuint
*
textures
)
;
void
(
*
GetActiveAttrib
)
(
PP_Resource
context
GLuint
program
GLuint
index
GLsizei
bufsize
GLsizei
*
length
GLint
*
size
GLenum
*
type
char
*
name
)
;
void
(
*
GetActiveUniform
)
(
PP_Resource
context
GLuint
program
GLuint
index
GLsizei
bufsize
GLsizei
*
length
GLint
*
size
GLenum
*
type
char
*
name
)
;
void
(
*
GetAttachedShaders
)
(
PP_Resource
context
GLuint
program
GLsizei
maxcount
GLsizei
*
count
GLuint
*
shaders
)
;
GLint
(
*
GetAttribLocation
)
(
PP_Resource
context
GLuint
program
const
char
*
name
)
;
void
(
*
GetBooleanv
)
(
PP_Resource
context
GLenum
pname
GLboolean
*
params
)
;
void
(
*
GetBufferParameteriv
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
*
params
)
;
GLenum
(
*
GetError
)
(
PP_Resource
context
)
;
void
(
*
GetFloatv
)
(
PP_Resource
context
GLenum
pname
GLfloat
*
params
)
;
void
(
*
GetFramebufferAttachmentParameteriv
)
(
PP_Resource
context
GLenum
target
GLenum
attachment
GLenum
pname
GLint
*
params
)
;
void
(
*
GetIntegerv
)
(
PP_Resource
context
GLenum
pname
GLint
*
params
)
;
void
(
*
GetProgramiv
)
(
PP_Resource
context
GLuint
program
GLenum
pname
GLint
*
params
)
;
void
(
*
GetProgramInfoLog
)
(
PP_Resource
context
GLuint
program
GLsizei
bufsize
GLsizei
*
length
char
*
infolog
)
;
void
(
*
GetRenderbufferParameteriv
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
*
params
)
;
void
(
*
GetShaderiv
)
(
PP_Resource
context
GLuint
shader
GLenum
pname
GLint
*
params
)
;
void
(
*
GetShaderInfoLog
)
(
PP_Resource
context
GLuint
shader
GLsizei
bufsize
GLsizei
*
length
char
*
infolog
)
;
void
(
*
GetShaderPrecisionFormat
)
(
PP_Resource
context
GLenum
shadertype
GLenum
precisiontype
GLint
*
range
GLint
*
precision
)
;
void
(
*
GetShaderSource
)
(
PP_Resource
context
GLuint
shader
GLsizei
bufsize
GLsizei
*
length
char
*
source
)
;
const
GLubyte
*
(
*
GetString
)
(
PP_Resource
context
GLenum
name
)
;
void
(
*
GetTexParameterfv
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLfloat
*
params
)
;
void
(
*
GetTexParameteriv
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
*
params
)
;
void
(
*
GetUniformfv
)
(
PP_Resource
context
GLuint
program
GLint
location
GLfloat
*
params
)
;
void
(
*
GetUniformiv
)
(
PP_Resource
context
GLuint
program
GLint
location
GLint
*
params
)
;
GLint
(
*
GetUniformLocation
)
(
PP_Resource
context
GLuint
program
const
char
*
name
)
;
void
(
*
GetVertexAttribfv
)
(
PP_Resource
context
GLuint
index
GLenum
pname
GLfloat
*
params
)
;
void
(
*
GetVertexAttribiv
)
(
PP_Resource
context
GLuint
index
GLenum
pname
GLint
*
params
)
;
void
(
*
GetVertexAttribPointerv
)
(
PP_Resource
context
GLuint
index
GLenum
pname
void
*
*
pointer
)
;
void
(
*
Hint
)
(
PP_Resource
context
GLenum
target
GLenum
mode
)
;
GLboolean
(
*
IsBuffer
)
(
PP_Resource
context
GLuint
buffer
)
;
GLboolean
(
*
IsEnabled
)
(
PP_Resource
context
GLenum
cap
)
;
GLboolean
(
*
IsFramebuffer
)
(
PP_Resource
context
GLuint
framebuffer
)
;
GLboolean
(
*
IsProgram
)
(
PP_Resource
context
GLuint
program
)
;
GLboolean
(
*
IsRenderbuffer
)
(
PP_Resource
context
GLuint
renderbuffer
)
;
GLboolean
(
*
IsShader
)
(
PP_Resource
context
GLuint
shader
)
;
GLboolean
(
*
IsTexture
)
(
PP_Resource
context
GLuint
texture
)
;
void
(
*
LineWidth
)
(
PP_Resource
context
GLfloat
width
)
;
void
(
*
LinkProgram
)
(
PP_Resource
context
GLuint
program
)
;
void
(
*
PixelStorei
)
(
PP_Resource
context
GLenum
pname
GLint
param
)
;
void
(
*
PolygonOffset
)
(
PP_Resource
context
GLfloat
factor
GLfloat
units
)
;
void
(
*
ReadPixels
)
(
PP_Resource
context
GLint
x
GLint
y
GLsizei
width
GLsizei
height
GLenum
format
GLenum
type
void
*
pixels
)
;
void
(
*
ReleaseShaderCompiler
)
(
PP_Resource
context
)
;
void
(
*
RenderbufferStorage
)
(
PP_Resource
context
GLenum
target
GLenum
internalformat
GLsizei
width
GLsizei
height
)
;
void
(
*
SampleCoverage
)
(
PP_Resource
context
GLclampf
value
GLboolean
invert
)
;
void
(
*
Scissor
)
(
PP_Resource
context
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
;
void
(
*
ShaderBinary
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
shaders
GLenum
binaryformat
const
void
*
binary
GLsizei
length
)
;
void
(
*
ShaderSource
)
(
PP_Resource
context
GLuint
shader
GLsizei
count
const
char
*
*
str
const
GLint
*
length
)
;
void
(
*
StencilFunc
)
(
PP_Resource
context
GLenum
func
GLint
ref
GLuint
mask
)
;
void
(
*
StencilFuncSeparate
)
(
PP_Resource
context
GLenum
face
GLenum
func
GLint
ref
GLuint
mask
)
;
void
(
*
StencilMask
)
(
PP_Resource
context
GLuint
mask
)
;
void
(
*
StencilMaskSeparate
)
(
PP_Resource
context
GLenum
face
GLuint
mask
)
;
void
(
*
StencilOp
)
(
PP_Resource
context
GLenum
fail
GLenum
zfail
GLenum
zpass
)
;
void
(
*
StencilOpSeparate
)
(
PP_Resource
context
GLenum
face
GLenum
fail
GLenum
zfail
GLenum
zpass
)
;
void
(
*
TexImage2D
)
(
PP_Resource
context
GLenum
target
GLint
level
GLint
internalformat
GLsizei
width
GLsizei
height
GLint
border
GLenum
format
GLenum
type
const
void
*
pixels
)
;
void
(
*
TexParameterf
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLfloat
param
)
;
void
(
*
TexParameterfv
)
(
PP_Resource
context
GLenum
target
GLenum
pname
const
GLfloat
*
params
)
;
void
(
*
TexParameteri
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
param
)
;
void
(
*
TexParameteriv
)
(
PP_Resource
context
GLenum
target
GLenum
pname
const
GLint
*
params
)
;
void
(
*
TexSubImage2D
)
(
PP_Resource
context
GLenum
target
GLint
level
GLint
xoffset
GLint
yoffset
GLsizei
width
GLsizei
height
GLenum
format
GLenum
type
const
void
*
pixels
)
;
void
(
*
Uniform1f
)
(
PP_Resource
context
GLint
location
GLfloat
x
)
;
void
(
*
Uniform1fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLfloat
*
v
)
;
void
(
*
Uniform1i
)
(
PP_Resource
context
GLint
location
GLint
x
)
;
void
(
*
Uniform1iv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLint
*
v
)
;
void
(
*
Uniform2f
)
(
PP_Resource
context
GLint
location
GLfloat
x
GLfloat
y
)
;
void
(
*
Uniform2fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLfloat
*
v
)
;
void
(
*
Uniform2i
)
(
PP_Resource
context
GLint
location
GLint
x
GLint
y
)
;
void
(
*
Uniform2iv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLint
*
v
)
;
void
(
*
Uniform3f
)
(
PP_Resource
context
GLint
location
GLfloat
x
GLfloat
y
GLfloat
z
)
;
void
(
*
Uniform3fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLfloat
*
v
)
;
void
(
*
Uniform3i
)
(
PP_Resource
context
GLint
location
GLint
x
GLint
y
GLint
z
)
;
void
(
*
Uniform3iv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLint
*
v
)
;
void
(
*
Uniform4f
)
(
PP_Resource
context
GLint
location
GLfloat
x
GLfloat
y
GLfloat
z
GLfloat
w
)
;
void
(
*
Uniform4fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLfloat
*
v
)
;
void
(
*
Uniform4i
)
(
PP_Resource
context
GLint
location
GLint
x
GLint
y
GLint
z
GLint
w
)
;
void
(
*
Uniform4iv
)
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLint
*
v
)
;
void
(
*
UniformMatrix2fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
;
void
(
*
UniformMatrix3fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
;
void
(
*
UniformMatrix4fv
)
(
PP_Resource
context
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
;
void
(
*
UseProgram
)
(
PP_Resource
context
GLuint
program
)
;
void
(
*
ValidateProgram
)
(
PP_Resource
context
GLuint
program
)
;
void
(
*
VertexAttrib1f
)
(
PP_Resource
context
GLuint
indx
GLfloat
x
)
;
void
(
*
VertexAttrib1fv
)
(
PP_Resource
context
GLuint
indx
const
GLfloat
*
values
)
;
void
(
*
VertexAttrib2f
)
(
PP_Resource
context
GLuint
indx
GLfloat
x
GLfloat
y
)
;
void
(
*
VertexAttrib2fv
)
(
PP_Resource
context
GLuint
indx
const
GLfloat
*
values
)
;
void
(
*
VertexAttrib3f
)
(
PP_Resource
context
GLuint
indx
GLfloat
x
GLfloat
y
GLfloat
z
)
;
void
(
*
VertexAttrib3fv
)
(
PP_Resource
context
GLuint
indx
const
GLfloat
*
values
)
;
void
(
*
VertexAttrib4f
)
(
PP_Resource
context
GLuint
indx
GLfloat
x
GLfloat
y
GLfloat
z
GLfloat
w
)
;
void
(
*
VertexAttrib4fv
)
(
PP_Resource
context
GLuint
indx
const
GLfloat
*
values
)
;
void
(
*
VertexAttribPointer
)
(
PP_Resource
context
GLuint
indx
GLint
size
GLenum
type
GLboolean
normalized
GLsizei
stride
const
void
*
ptr
)
;
void
(
*
Viewport
)
(
PP_Resource
context
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
;
}
;
struct
PPB_OpenGLES2InstancedArrays_1_0
{
void
(
*
DrawArraysInstancedANGLE
)
(
PP_Resource
context
GLenum
mode
GLint
first
GLsizei
count
GLsizei
primcount
)
;
void
(
*
DrawElementsInstancedANGLE
)
(
PP_Resource
context
GLenum
mode
GLsizei
count
GLenum
type
const
void
*
indices
GLsizei
primcount
)
;
void
(
*
VertexAttribDivisorANGLE
)
(
PP_Resource
context
GLuint
index
GLuint
divisor
)
;
}
;
struct
PPB_OpenGLES2InstancedArrays
{
void
(
*
DrawArraysInstancedANGLE
)
(
PP_Resource
context
GLenum
mode
GLint
first
GLsizei
count
GLsizei
primcount
)
;
void
(
*
DrawElementsInstancedANGLE
)
(
PP_Resource
context
GLenum
mode
GLsizei
count
GLenum
type
const
void
*
indices
GLsizei
primcount
)
;
void
(
*
VertexAttribDivisorANGLE
)
(
PP_Resource
context
GLuint
index
GLuint
divisor
)
;
}
;
struct
PPB_OpenGLES2FramebufferBlit_1_0
{
void
(
*
BlitFramebufferEXT
)
(
PP_Resource
context
GLint
srcX0
GLint
srcY0
GLint
srcX1
GLint
srcY1
GLint
dstX0
GLint
dstY0
GLint
dstX1
GLint
dstY1
GLbitfield
mask
GLenum
filter
)
;
}
;
struct
PPB_OpenGLES2FramebufferBlit
{
void
(
*
BlitFramebufferEXT
)
(
PP_Resource
context
GLint
srcX0
GLint
srcY0
GLint
srcX1
GLint
srcY1
GLint
dstX0
GLint
dstY0
GLint
dstX1
GLint
dstY1
GLbitfield
mask
GLenum
filter
)
;
}
;
struct
PPB_OpenGLES2FramebufferMultisample_1_0
{
void
(
*
RenderbufferStorageMultisampleEXT
)
(
PP_Resource
context
GLenum
target
GLsizei
samples
GLenum
internalformat
GLsizei
width
GLsizei
height
)
;
}
;
struct
PPB_OpenGLES2FramebufferMultisample
{
void
(
*
RenderbufferStorageMultisampleEXT
)
(
PP_Resource
context
GLenum
target
GLsizei
samples
GLenum
internalformat
GLsizei
width
GLsizei
height
)
;
}
;
struct
PPB_OpenGLES2ChromiumEnableFeature_1_0
{
GLboolean
(
*
EnableFeatureCHROMIUM
)
(
PP_Resource
context
const
char
*
feature
)
;
}
;
struct
PPB_OpenGLES2ChromiumEnableFeature
{
GLboolean
(
*
EnableFeatureCHROMIUM
)
(
PP_Resource
context
const
char
*
feature
)
;
}
;
struct
PPB_OpenGLES2ChromiumMapSub_1_0
{
void
*
(
*
MapBufferSubDataCHROMIUM
)
(
PP_Resource
context
GLuint
target
GLintptr
offset
GLsizeiptr
size
GLenum
access
)
;
void
(
*
UnmapBufferSubDataCHROMIUM
)
(
PP_Resource
context
const
void
*
mem
)
;
void
*
(
*
MapTexSubImage2DCHROMIUM
)
(
PP_Resource
context
GLenum
target
GLint
level
GLint
xoffset
GLint
yoffset
GLsizei
width
GLsizei
height
GLenum
format
GLenum
type
GLenum
access
)
;
void
(
*
UnmapTexSubImage2DCHROMIUM
)
(
PP_Resource
context
const
void
*
mem
)
;
}
;
struct
PPB_OpenGLES2ChromiumMapSub
{
void
*
(
*
MapBufferSubDataCHROMIUM
)
(
PP_Resource
context
GLuint
target
GLintptr
offset
GLsizeiptr
size
GLenum
access
)
;
void
(
*
UnmapBufferSubDataCHROMIUM
)
(
PP_Resource
context
const
void
*
mem
)
;
void
*
(
*
MapTexSubImage2DCHROMIUM
)
(
PP_Resource
context
GLenum
target
GLint
level
GLint
xoffset
GLint
yoffset
GLsizei
width
GLsizei
height
GLenum
format
GLenum
type
GLenum
access
)
;
void
(
*
UnmapTexSubImage2DCHROMIUM
)
(
PP_Resource
context
const
void
*
mem
)
;
}
;
struct
PPB_OpenGLES2Query_1_0
{
void
(
*
GenQueriesEXT
)
(
PP_Resource
context
GLsizei
n
GLuint
*
queries
)
;
void
(
*
DeleteQueriesEXT
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
queries
)
;
GLboolean
(
*
IsQueryEXT
)
(
PP_Resource
context
GLuint
id
)
;
void
(
*
BeginQueryEXT
)
(
PP_Resource
context
GLenum
target
GLuint
id
)
;
void
(
*
EndQueryEXT
)
(
PP_Resource
context
GLenum
target
)
;
void
(
*
GetQueryivEXT
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
*
params
)
;
void
(
*
GetQueryObjectuivEXT
)
(
PP_Resource
context
GLuint
id
GLenum
pname
GLuint
*
params
)
;
}
;
struct
PPB_OpenGLES2Query
{
void
(
*
GenQueriesEXT
)
(
PP_Resource
context
GLsizei
n
GLuint
*
queries
)
;
void
(
*
DeleteQueriesEXT
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
queries
)
;
GLboolean
(
*
IsQueryEXT
)
(
PP_Resource
context
GLuint
id
)
;
void
(
*
BeginQueryEXT
)
(
PP_Resource
context
GLenum
target
GLuint
id
)
;
void
(
*
EndQueryEXT
)
(
PP_Resource
context
GLenum
target
)
;
void
(
*
GetQueryivEXT
)
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
*
params
)
;
void
(
*
GetQueryObjectuivEXT
)
(
PP_Resource
context
GLuint
id
GLenum
pname
GLuint
*
params
)
;
}
;
struct
PPB_OpenGLES2VertexArrayObject_1_0
{
void
(
*
GenVertexArraysOES
)
(
PP_Resource
context
GLsizei
n
GLuint
*
arrays
)
;
void
(
*
DeleteVertexArraysOES
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
arrays
)
;
GLboolean
(
*
IsVertexArrayOES
)
(
PP_Resource
context
GLuint
array
)
;
void
(
*
BindVertexArrayOES
)
(
PP_Resource
context
GLuint
array
)
;
}
;
struct
PPB_OpenGLES2VertexArrayObject
{
void
(
*
GenVertexArraysOES
)
(
PP_Resource
context
GLsizei
n
GLuint
*
arrays
)
;
void
(
*
DeleteVertexArraysOES
)
(
PP_Resource
context
GLsizei
n
const
GLuint
*
arrays
)
;
GLboolean
(
*
IsVertexArrayOES
)
(
PP_Resource
context
GLuint
array
)
;
void
(
*
BindVertexArrayOES
)
(
PP_Resource
context
GLuint
array
)
;
}
;
typedef
enum
{
PP_TCPSOCKET_OPTION_NO_DELAY
=
0
PP_TCPSOCKET_OPTION_SEND_BUFFER_SIZE
=
1
PP_TCPSOCKET_OPTION_RECV_BUFFER_SIZE
=
2
}
PP_TCPSocket_Option
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_TCPSocket_Option
4
)
;
struct
PPB_TCPSocket_1_2
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsTCPSocket
)
(
PP_Resource
resource
)
;
int32_t
(
*
Bind
)
(
PP_Resource
tcp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Connect
)
(
PP_Resource
tcp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
;
PP_Resource
(
*
GetLocalAddress
)
(
PP_Resource
tcp_socket
)
;
PP_Resource
(
*
GetRemoteAddress
)
(
PP_Resource
tcp_socket
)
;
int32_t
(
*
Read
)
(
PP_Resource
tcp_socket
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Write
)
(
PP_Resource
tcp_socket
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Listen
)
(
PP_Resource
tcp_socket
int32_t
backlog
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Accept
)
(
PP_Resource
tcp_socket
PP_Resource
*
accepted_tcp_socket
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
tcp_socket
)
;
int32_t
(
*
SetOption
)
(
PP_Resource
tcp_socket
PP_TCPSocket_Option
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_TCPSocket_1_2
PPB_TCPSocket
;
struct
PPB_TCPSocket_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsTCPSocket
)
(
PP_Resource
resource
)
;
int32_t
(
*
Connect
)
(
PP_Resource
tcp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
;
PP_Resource
(
*
GetLocalAddress
)
(
PP_Resource
tcp_socket
)
;
PP_Resource
(
*
GetRemoteAddress
)
(
PP_Resource
tcp_socket
)
;
int32_t
(
*
Read
)
(
PP_Resource
tcp_socket
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Write
)
(
PP_Resource
tcp_socket
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
tcp_socket
)
;
int32_t
(
*
SetOption
)
(
PP_Resource
tcp_socket
PP_TCPSocket_Option
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
;
}
;
struct
PPB_TCPSocket_1_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsTCPSocket
)
(
PP_Resource
resource
)
;
int32_t
(
*
Bind
)
(
PP_Resource
tcp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Connect
)
(
PP_Resource
tcp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
;
PP_Resource
(
*
GetLocalAddress
)
(
PP_Resource
tcp_socket
)
;
PP_Resource
(
*
GetRemoteAddress
)
(
PP_Resource
tcp_socket
)
;
int32_t
(
*
Read
)
(
PP_Resource
tcp_socket
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Write
)
(
PP_Resource
tcp_socket
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Listen
)
(
PP_Resource
tcp_socket
int32_t
backlog
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Accept
)
(
PP_Resource
tcp_socket
PP_Resource
*
accepted_tcp_socket
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
tcp_socket
)
;
int32_t
(
*
SetOption
)
(
PP_Resource
tcp_socket
PP_TCPSocket_Option
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
enum
{
PP_TEXTINPUT_TYPE_NONE
=
0
PP_TEXTINPUT_TYPE_TEXT
=
1
PP_TEXTINPUT_TYPE_PASSWORD
=
2
PP_TEXTINPUT_TYPE_SEARCH
=
3
PP_TEXTINPUT_TYPE_EMAIL
=
4
PP_TEXTINPUT_TYPE_NUMBER
=
5
PP_TEXTINPUT_TYPE_TELEPHONE
=
6
PP_TEXTINPUT_TYPE_URL
=
7
}
PP_TextInput_Type
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_TextInput_Type
4
)
;
struct
PPB_TextInputController_1_0
{
void
(
*
SetTextInputType
)
(
PP_Instance
instance
PP_TextInput_Type
type
)
;
void
(
*
UpdateCaretPosition
)
(
PP_Instance
instance
const
struct
PP_Rect
*
caret
)
;
void
(
*
CancelCompositionText
)
(
PP_Instance
instance
)
;
void
(
*
UpdateSurroundingText
)
(
PP_Instance
instance
struct
PP_Var
text
uint32_t
caret
uint32_t
anchor
)
;
}
;
typedef
struct
PPB_TextInputController_1_0
PPB_TextInputController
;
typedef
enum
{
PP_UDPSOCKET_OPTION_ADDRESS_REUSE
=
0
PP_UDPSOCKET_OPTION_BROADCAST
=
1
PP_UDPSOCKET_OPTION_SEND_BUFFER_SIZE
=
2
PP_UDPSOCKET_OPTION_RECV_BUFFER_SIZE
=
3
PP_UDPSOCKET_OPTION_MULTICAST_LOOP
=
4
PP_UDPSOCKET_OPTION_MULTICAST_TTL
=
5
}
PP_UDPSocket_Option
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_UDPSocket_Option
4
)
;
struct
PPB_UDPSocket_1_2
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsUDPSocket
)
(
PP_Resource
resource
)
;
int32_t
(
*
Bind
)
(
PP_Resource
udp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
;
PP_Resource
(
*
GetBoundAddress
)
(
PP_Resource
udp_socket
)
;
int32_t
(
*
RecvFrom
)
(
PP_Resource
udp_socket
char
*
buffer
int32_t
num_bytes
PP_Resource
*
addr
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
SendTo
)
(
PP_Resource
udp_socket
const
char
*
buffer
int32_t
num_bytes
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
udp_socket
)
;
int32_t
(
*
SetOption
)
(
PP_Resource
udp_socket
PP_UDPSocket_Option
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
JoinGroup
)
(
PP_Resource
udp_socket
PP_Resource
group
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
LeaveGroup
)
(
PP_Resource
udp_socket
PP_Resource
group
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_UDPSocket_1_2
PPB_UDPSocket
;
struct
PPB_UDPSocket_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsUDPSocket
)
(
PP_Resource
resource
)
;
int32_t
(
*
Bind
)
(
PP_Resource
udp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
;
PP_Resource
(
*
GetBoundAddress
)
(
PP_Resource
udp_socket
)
;
int32_t
(
*
RecvFrom
)
(
PP_Resource
udp_socket
char
*
buffer
int32_t
num_bytes
PP_Resource
*
addr
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
SendTo
)
(
PP_Resource
udp_socket
const
char
*
buffer
int32_t
num_bytes
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
udp_socket
)
;
int32_t
(
*
SetOption
)
(
PP_Resource
udp_socket
PP_UDPSocket_Option
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
;
}
;
struct
PPB_UDPSocket_1_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsUDPSocket
)
(
PP_Resource
resource
)
;
int32_t
(
*
Bind
)
(
PP_Resource
udp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
;
PP_Resource
(
*
GetBoundAddress
)
(
PP_Resource
udp_socket
)
;
int32_t
(
*
RecvFrom
)
(
PP_Resource
udp_socket
char
*
buffer
int32_t
num_bytes
PP_Resource
*
addr
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
SendTo
)
(
PP_Resource
udp_socket
const
char
*
buffer
int32_t
num_bytes
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
udp_socket
)
;
int32_t
(
*
SetOption
)
(
PP_Resource
udp_socket
PP_UDPSocket_Option
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
;
}
;
struct
PPB_URLLoader_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsURLLoader
)
(
PP_Resource
resource
)
;
int32_t
(
*
Open
)
(
PP_Resource
loader
PP_Resource
request_info
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
FollowRedirect
)
(
PP_Resource
loader
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
GetUploadProgress
)
(
PP_Resource
loader
int64_t
*
bytes_sent
int64_t
*
total_bytes_to_be_sent
)
;
PP_Bool
(
*
GetDownloadProgress
)
(
PP_Resource
loader
int64_t
*
bytes_received
int64_t
*
total_bytes_to_be_received
)
;
PP_Resource
(
*
GetResponseInfo
)
(
PP_Resource
loader
)
;
int32_t
(
*
ReadResponseBody
)
(
PP_Resource
loader
void
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
FinishStreamingToFile
)
(
PP_Resource
loader
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
loader
)
;
}
;
typedef
struct
PPB_URLLoader_1_0
PPB_URLLoader
;
typedef
enum
{
PP_URLREQUESTPROPERTY_URL
=
0
PP_URLREQUESTPROPERTY_METHOD
=
1
PP_URLREQUESTPROPERTY_HEADERS
=
2
PP_URLREQUESTPROPERTY_STREAMTOFILE
=
3
PP_URLREQUESTPROPERTY_FOLLOWREDIRECTS
=
4
PP_URLREQUESTPROPERTY_RECORDDOWNLOADPROGRESS
=
5
PP_URLREQUESTPROPERTY_RECORDUPLOADPROGRESS
=
6
PP_URLREQUESTPROPERTY_CUSTOMREFERRERURL
=
7
PP_URLREQUESTPROPERTY_ALLOWCROSSORIGINREQUESTS
=
8
PP_URLREQUESTPROPERTY_ALLOWCREDENTIALS
=
9
PP_URLREQUESTPROPERTY_CUSTOMCONTENTTRANSFERENCODING
=
10
PP_URLREQUESTPROPERTY_PREFETCHBUFFERUPPERTHRESHOLD
=
11
PP_URLREQUESTPROPERTY_PREFETCHBUFFERLOWERTHRESHOLD
=
12
PP_URLREQUESTPROPERTY_CUSTOMUSERAGENT
=
13
}
PP_URLRequestProperty
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_URLRequestProperty
4
)
;
struct
PPB_URLRequestInfo_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsURLRequestInfo
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
SetProperty
)
(
PP_Resource
request
PP_URLRequestProperty
property
struct
PP_Var
value
)
;
PP_Bool
(
*
AppendDataToBody
)
(
PP_Resource
request
const
void
*
data
uint32_t
len
)
;
PP_Bool
(
*
AppendFileToBody
)
(
PP_Resource
request
PP_Resource
file_ref
int64_t
start_offset
int64_t
number_of_bytes
PP_Time
expected_last_modified_time
)
;
}
;
typedef
struct
PPB_URLRequestInfo_1_0
PPB_URLRequestInfo
;
typedef
enum
{
PP_URLRESPONSEPROPERTY_URL
=
0
PP_URLRESPONSEPROPERTY_REDIRECTURL
=
1
PP_URLRESPONSEPROPERTY_REDIRECTMETHOD
=
2
PP_URLRESPONSEPROPERTY_STATUSCODE
=
3
PP_URLRESPONSEPROPERTY_STATUSLINE
=
4
PP_URLRESPONSEPROPERTY_HEADERS
=
5
}
PP_URLResponseProperty
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_URLResponseProperty
4
)
;
struct
PPB_URLResponseInfo_1_0
{
PP_Bool
(
*
IsURLResponseInfo
)
(
PP_Resource
resource
)
;
struct
PP_Var
(
*
GetProperty
)
(
PP_Resource
response
PP_URLResponseProperty
property
)
;
PP_Resource
(
*
GetBodyAsFileRef
)
(
PP_Resource
response
)
;
}
;
typedef
struct
PPB_URLResponseInfo_1_0
PPB_URLResponseInfo
;
struct
PPB_Var_1_2
{
void
(
*
AddRef
)
(
struct
PP_Var
var
)
;
void
(
*
Release
)
(
struct
PP_Var
var
)
;
struct
PP_Var
(
*
VarFromUtf8
)
(
const
char
*
data
uint32_t
len
)
;
const
char
*
(
*
VarToUtf8
)
(
struct
PP_Var
var
uint32_t
*
len
)
;
PP_Resource
(
*
VarToResource
)
(
struct
PP_Var
var
)
;
struct
PP_Var
(
*
VarFromResource
)
(
PP_Resource
resource
)
;
}
;
typedef
struct
PPB_Var_1_2
PPB_Var
;
struct
PPB_Var_1_0
{
void
(
*
AddRef
)
(
struct
PP_Var
var
)
;
void
(
*
Release
)
(
struct
PP_Var
var
)
;
struct
PP_Var
(
*
VarFromUtf8
)
(
PP_Module
module
const
char
*
data
uint32_t
len
)
;
const
char
*
(
*
VarToUtf8
)
(
struct
PP_Var
var
uint32_t
*
len
)
;
}
;
struct
PPB_Var_1_1
{
void
(
*
AddRef
)
(
struct
PP_Var
var
)
;
void
(
*
Release
)
(
struct
PP_Var
var
)
;
struct
PP_Var
(
*
VarFromUtf8
)
(
const
char
*
data
uint32_t
len
)
;
const
char
*
(
*
VarToUtf8
)
(
struct
PP_Var
var
uint32_t
*
len
)
;
}
;
struct
PPB_VarArray_1_0
{
struct
PP_Var
(
*
Create
)
(
void
)
;
struct
PP_Var
(
*
Get
)
(
struct
PP_Var
array
uint32_t
index
)
;
PP_Bool
(
*
Set
)
(
struct
PP_Var
array
uint32_t
index
struct
PP_Var
value
)
;
uint32_t
(
*
GetLength
)
(
struct
PP_Var
array
)
;
PP_Bool
(
*
SetLength
)
(
struct
PP_Var
array
uint32_t
length
)
;
}
;
typedef
struct
PPB_VarArray_1_0
PPB_VarArray
;
struct
PPB_VarArrayBuffer_1_0
{
struct
PP_Var
(
*
Create
)
(
uint32_t
size_in_bytes
)
;
PP_Bool
(
*
ByteLength
)
(
struct
PP_Var
array
uint32_t
*
byte_length
)
;
void
*
(
*
Map
)
(
struct
PP_Var
array
)
;
void
(
*
Unmap
)
(
struct
PP_Var
array
)
;
}
;
typedef
struct
PPB_VarArrayBuffer_1_0
PPB_VarArrayBuffer
;
struct
PPB_VarDictionary_1_0
{
struct
PP_Var
(
*
Create
)
(
void
)
;
struct
PP_Var
(
*
Get
)
(
struct
PP_Var
dict
struct
PP_Var
key
)
;
PP_Bool
(
*
Set
)
(
struct
PP_Var
dict
struct
PP_Var
key
struct
PP_Var
value
)
;
void
(
*
Delete
)
(
struct
PP_Var
dict
struct
PP_Var
key
)
;
PP_Bool
(
*
HasKey
)
(
struct
PP_Var
dict
struct
PP_Var
key
)
;
struct
PP_Var
(
*
GetKeys
)
(
struct
PP_Var
dict
)
;
}
;
typedef
struct
PPB_VarDictionary_1_0
PPB_VarDictionary
;
struct
PPB_VideoDecoder_1_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsVideoDecoder
)
(
PP_Resource
resource
)
;
int32_t
(
*
Initialize
)
(
PP_Resource
video_decoder
PP_Resource
graphics3d_context
PP_VideoProfile
profile
PP_HardwareAcceleration
acceleration
uint32_t
min_picture_count
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Decode
)
(
PP_Resource
video_decoder
uint32_t
decode_id
uint32_t
size
const
void
*
buffer
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetPicture
)
(
PP_Resource
video_decoder
struct
PP_VideoPicture
*
picture
struct
PP_CompletionCallback
callback
)
;
void
(
*
RecyclePicture
)
(
PP_Resource
video_decoder
const
struct
PP_VideoPicture
*
picture
)
;
int32_t
(
*
Flush
)
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Reset
)
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_VideoDecoder_1_1
PPB_VideoDecoder
;
struct
PPB_VideoDecoder_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsVideoDecoder
)
(
PP_Resource
resource
)
;
int32_t
(
*
Initialize
)
(
PP_Resource
video_decoder
PP_Resource
graphics3d_context
PP_VideoProfile
profile
PP_Bool
allow_software_fallback
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Decode
)
(
PP_Resource
video_decoder
uint32_t
decode_id
uint32_t
size
const
void
*
buffer
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetPicture
)
(
PP_Resource
video_decoder
struct
PP_VideoPicture_0_1
*
picture
struct
PP_CompletionCallback
callback
)
;
void
(
*
RecyclePicture
)
(
PP_Resource
video_decoder
const
struct
PP_VideoPicture
*
picture
)
;
int32_t
(
*
Flush
)
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Reset
)
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
;
}
;
struct
PPB_VideoDecoder_0_2
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsVideoDecoder
)
(
PP_Resource
resource
)
;
int32_t
(
*
Initialize
)
(
PP_Resource
video_decoder
PP_Resource
graphics3d_context
PP_VideoProfile
profile
PP_HardwareAcceleration
acceleration
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Decode
)
(
PP_Resource
video_decoder
uint32_t
decode_id
uint32_t
size
const
void
*
buffer
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetPicture
)
(
PP_Resource
video_decoder
struct
PP_VideoPicture_0_1
*
picture
struct
PP_CompletionCallback
callback
)
;
void
(
*
RecyclePicture
)
(
PP_Resource
video_decoder
const
struct
PP_VideoPicture
*
picture
)
;
int32_t
(
*
Flush
)
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Reset
)
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
;
}
;
struct
PPB_VideoDecoder_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsVideoDecoder
)
(
PP_Resource
resource
)
;
int32_t
(
*
Initialize
)
(
PP_Resource
video_decoder
PP_Resource
graphics3d_context
PP_VideoProfile
profile
PP_HardwareAcceleration
acceleration
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Decode
)
(
PP_Resource
video_decoder
uint32_t
decode_id
uint32_t
size
const
void
*
buffer
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetPicture
)
(
PP_Resource
video_decoder
struct
PP_VideoPicture
*
picture
struct
PP_CompletionCallback
callback
)
;
void
(
*
RecyclePicture
)
(
PP_Resource
video_decoder
const
struct
PP_VideoPicture
*
picture
)
;
int32_t
(
*
Flush
)
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Reset
)
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
enum
{
PP_VIDEOFRAME_FORMAT_UNKNOWN
=
0
PP_VIDEOFRAME_FORMAT_YV12
=
1
PP_VIDEOFRAME_FORMAT_I420
=
2
PP_VIDEOFRAME_FORMAT_BGRA
=
3
PP_VIDEOFRAME_FORMAT_LAST
=
PP_VIDEOFRAME_FORMAT_BGRA
}
PP_VideoFrame_Format
;
struct
PPB_VideoFrame_0_1
{
PP_Bool
(
*
IsVideoFrame
)
(
PP_Resource
resource
)
;
PP_TimeDelta
(
*
GetTimestamp
)
(
PP_Resource
frame
)
;
void
(
*
SetTimestamp
)
(
PP_Resource
frame
PP_TimeDelta
timestamp
)
;
PP_VideoFrame_Format
(
*
GetFormat
)
(
PP_Resource
frame
)
;
PP_Bool
(
*
GetSize
)
(
PP_Resource
frame
struct
PP_Size
*
size
)
;
void
*
(
*
GetDataBuffer
)
(
PP_Resource
frame
)
;
uint32_t
(
*
GetDataBufferSize
)
(
PP_Resource
frame
)
;
}
;
typedef
struct
PPB_VideoFrame_0_1
PPB_VideoFrame
;
struct
PPB_VideoEncoder_0_2
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsVideoEncoder
)
(
PP_Resource
resource
)
;
int32_t
(
*
GetSupportedProfiles
)
(
PP_Resource
video_encoder
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Initialize
)
(
PP_Resource
video_encoder
PP_VideoFrame_Format
input_format
const
struct
PP_Size
*
input_visible_size
PP_VideoProfile
output_profile
uint32_t
initial_bitrate
PP_HardwareAcceleration
acceleration
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetFramesRequired
)
(
PP_Resource
video_encoder
)
;
int32_t
(
*
GetFrameCodedSize
)
(
PP_Resource
video_encoder
struct
PP_Size
*
coded_size
)
;
int32_t
(
*
GetVideoFrame
)
(
PP_Resource
video_encoder
PP_Resource
*
video_frame
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Encode
)
(
PP_Resource
video_encoder
PP_Resource
video_frame
PP_Bool
force_keyframe
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetBitstreamBuffer
)
(
PP_Resource
video_encoder
struct
PP_BitstreamBuffer
*
bitstream_buffer
struct
PP_CompletionCallback
callback
)
;
void
(
*
RecycleBitstreamBuffer
)
(
PP_Resource
video_encoder
const
struct
PP_BitstreamBuffer
*
bitstream_buffer
)
;
void
(
*
RequestEncodingParametersChange
)
(
PP_Resource
video_encoder
uint32_t
bitrate
uint32_t
framerate
)
;
void
(
*
Close
)
(
PP_Resource
video_encoder
)
;
}
;
typedef
struct
PPB_VideoEncoder_0_2
PPB_VideoEncoder
;
struct
PPB_VideoEncoder_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsVideoEncoder
)
(
PP_Resource
resource
)
;
int32_t
(
*
GetSupportedProfiles
)
(
PP_Resource
video_encoder
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Initialize
)
(
PP_Resource
video_encoder
PP_VideoFrame_Format
input_format
const
struct
PP_Size
*
input_visible_size
PP_VideoProfile
output_profile
uint32_t
initial_bitrate
PP_HardwareAcceleration
acceleration
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetFramesRequired
)
(
PP_Resource
video_encoder
)
;
int32_t
(
*
GetFrameCodedSize
)
(
PP_Resource
video_encoder
struct
PP_Size
*
coded_size
)
;
int32_t
(
*
GetVideoFrame
)
(
PP_Resource
video_encoder
PP_Resource
*
video_frame
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Encode
)
(
PP_Resource
video_encoder
PP_Resource
video_frame
PP_Bool
force_keyframe
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetBitstreamBuffer
)
(
PP_Resource
video_encoder
struct
PP_BitstreamBuffer
*
bitstream_buffer
struct
PP_CompletionCallback
callback
)
;
void
(
*
RecycleBitstreamBuffer
)
(
PP_Resource
video_encoder
const
struct
PP_BitstreamBuffer
*
bitstream_buffer
)
;
void
(
*
RequestEncodingParametersChange
)
(
PP_Resource
video_encoder
uint32_t
bitrate
uint32_t
framerate
)
;
void
(
*
Close
)
(
PP_Resource
video_encoder
)
;
}
;
struct
PPB_View_1_2
{
PP_Bool
(
*
IsView
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
GetRect
)
(
PP_Resource
resource
struct
PP_Rect
*
rect
)
;
PP_Bool
(
*
IsFullscreen
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
IsVisible
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
IsPageVisible
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
GetClipRect
)
(
PP_Resource
resource
struct
PP_Rect
*
clip
)
;
float
(
*
GetDeviceScale
)
(
PP_Resource
resource
)
;
float
(
*
GetCSSScale
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
GetScrollOffset
)
(
PP_Resource
resource
struct
PP_Point
*
offset
)
;
}
;
typedef
struct
PPB_View_1_2
PPB_View
;
struct
PPB_View_1_0
{
PP_Bool
(
*
IsView
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
GetRect
)
(
PP_Resource
resource
struct
PP_Rect
*
rect
)
;
PP_Bool
(
*
IsFullscreen
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
IsVisible
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
IsPageVisible
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
GetClipRect
)
(
PP_Resource
resource
struct
PP_Rect
*
clip
)
;
}
;
struct
PPB_View_1_1
{
PP_Bool
(
*
IsView
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
GetRect
)
(
PP_Resource
resource
struct
PP_Rect
*
rect
)
;
PP_Bool
(
*
IsFullscreen
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
IsVisible
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
IsPageVisible
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
GetClipRect
)
(
PP_Resource
resource
struct
PP_Rect
*
clip
)
;
float
(
*
GetDeviceScale
)
(
PP_Resource
resource
)
;
float
(
*
GetCSSScale
)
(
PP_Resource
resource
)
;
}
;
struct
PPB_VpnProvider_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsVpnProvider
)
(
PP_Resource
resource
)
;
int32_t
(
*
Bind
)
(
PP_Resource
vpn_provider
struct
PP_Var
configuration_id
struct
PP_Var
configuration_name
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
SendPacket
)
(
PP_Resource
vpn_provider
struct
PP_Var
packet
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
ReceivePacket
)
(
PP_Resource
vpn_provider
struct
PP_Var
*
packet
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
enum
{
PP_WEBSOCKETREADYSTATE_INVALID
=
-
1
PP_WEBSOCKETREADYSTATE_CONNECTING
=
0
PP_WEBSOCKETREADYSTATE_OPEN
=
1
PP_WEBSOCKETREADYSTATE_CLOSING
=
2
PP_WEBSOCKETREADYSTATE_CLOSED
=
3
}
PP_WebSocketReadyState
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_WebSocketReadyState
4
)
;
typedef
enum
{
PP_WEBSOCKETSTATUSCODE_NOT_SPECIFIED
=
1005
PP_WEBSOCKETSTATUSCODE_NORMAL_CLOSURE
=
1000
PP_WEBSOCKETSTATUSCODE_GOING_AWAY
=
1001
PP_WEBSOCKETSTATUSCODE_PROTOCOL_ERROR
=
1002
PP_WEBSOCKETSTATUSCODE_UNSUPPORTED_DATA
=
1003
PP_WEBSOCKETSTATUSCODE_NO_STATUS_RECEIVED
=
1005
PP_WEBSOCKETSTATUSCODE_ABNORMAL_CLOSURE
=
1006
PP_WEBSOCKETSTATUSCODE_INVALID_FRAME_PAYLOAD_DATA
=
1007
PP_WEBSOCKETSTATUSCODE_POLICY_VIOLATION
=
1008
PP_WEBSOCKETSTATUSCODE_MESSAGE_TOO_BIG
=
1009
PP_WEBSOCKETSTATUSCODE_MANDATORY_EXTENSION
=
1010
PP_WEBSOCKETSTATUSCODE_INTERNAL_SERVER_ERROR
=
1011
PP_WEBSOCKETSTATUSCODE_TLS_HANDSHAKE
=
1015
PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MIN
=
3000
PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MAX
=
3999
PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MIN
=
4000
PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MAX
=
4999
}
PP_WebSocketCloseCode
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_WebSocketCloseCode
4
)
;
struct
PPB_WebSocket_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsWebSocket
)
(
PP_Resource
resource
)
;
int32_t
(
*
Connect
)
(
PP_Resource
web_socket
struct
PP_Var
url
const
struct
PP_Var
protocols
[
]
uint32_t
protocol_count
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Close
)
(
PP_Resource
web_socket
uint16_t
code
struct
PP_Var
reason
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
ReceiveMessage
)
(
PP_Resource
web_socket
struct
PP_Var
*
message
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
SendMessage
)
(
PP_Resource
web_socket
struct
PP_Var
message
)
;
uint64_t
(
*
GetBufferedAmount
)
(
PP_Resource
web_socket
)
;
uint16_t
(
*
GetCloseCode
)
(
PP_Resource
web_socket
)
;
struct
PP_Var
(
*
GetCloseReason
)
(
PP_Resource
web_socket
)
;
PP_Bool
(
*
GetCloseWasClean
)
(
PP_Resource
web_socket
)
;
struct
PP_Var
(
*
GetExtensions
)
(
PP_Resource
web_socket
)
;
struct
PP_Var
(
*
GetProtocol
)
(
PP_Resource
web_socket
)
;
PP_WebSocketReadyState
(
*
GetReadyState
)
(
PP_Resource
web_socket
)
;
struct
PP_Var
(
*
GetURL
)
(
PP_Resource
web_socket
)
;
}
;
typedef
struct
PPB_WebSocket_1_0
PPB_WebSocket
;
#
include
"
ppapi
/
c
/
pp_module
.
h
"
#
include
"
ppapi
/
c
/
pp_stdint
.
h
"
#
include
"
ppapi
/
c
/
ppb
.
h
"
#
if
__GNUC__
>
=
4
#
define
PP_EXPORT
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
elif
defined
(
_MSC_VER
)
#
define
PP_EXPORT
__declspec
(
dllexport
)
#
endif
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
PP_EXPORT
int32_t
PPP_InitializeModule
(
PP_Module
module
PPB_GetInterface
get_browser_interface
)
;
PP_EXPORT
void
PPP_ShutdownModule
(
void
)
;
PP_EXPORT
const
void
*
PPP_GetInterface
(
const
char
*
interface_name
)
;
#
ifdef
__cplusplus
}
#
endif
typedef
int32_t
(
*
PP_InitializeModule_Func
)
(
PP_Module
module
PPB_GetInterface
get_browser_interface
)
;
typedef
void
(
*
PP_ShutdownModule_Func
)
(
void
)
;
typedef
const
void
*
(
*
PP_GetInterface_Func
)
(
const
char
*
interface_name
)
;
struct
PPP_Graphics3D_1_0
{
void
(
*
Graphics3DContextLost
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPP_Graphics3D_1_0
PPP_Graphics3D
;
struct
PPP_InputEvent_0_1
{
PP_Bool
(
*
HandleInputEvent
)
(
PP_Instance
instance
PP_Resource
input_event
)
;
}
;
typedef
struct
PPP_InputEvent_0_1
PPP_InputEvent
;
struct
PPP_Instance_1_1
{
PP_Bool
(
*
DidCreate
)
(
PP_Instance
instance
uint32_t
argc
const
char
*
argn
[
]
const
char
*
argv
[
]
)
;
void
(
*
DidDestroy
)
(
PP_Instance
instance
)
;
void
(
*
DidChangeView
)
(
PP_Instance
instance
PP_Resource
view
)
;
void
(
*
DidChangeFocus
)
(
PP_Instance
instance
PP_Bool
has_focus
)
;
PP_Bool
(
*
HandleDocumentLoad
)
(
PP_Instance
instance
PP_Resource
url_loader
)
;
}
;
typedef
struct
PPP_Instance_1_1
PPP_Instance
;
struct
PPP_Instance_1_0
{
PP_Bool
(
*
DidCreate
)
(
PP_Instance
instance
uint32_t
argc
const
char
*
argn
[
]
const
char
*
argv
[
]
)
;
void
(
*
DidDestroy
)
(
PP_Instance
instance
)
;
void
(
*
DidChangeView
)
(
PP_Instance
instance
const
struct
PP_Rect
*
position
const
struct
PP_Rect
*
clip
)
;
void
(
*
DidChangeFocus
)
(
PP_Instance
instance
PP_Bool
has_focus
)
;
PP_Bool
(
*
HandleDocumentLoad
)
(
PP_Instance
instance
PP_Resource
url_loader
)
;
}
;
struct
PPP_Messaging_1_0
{
void
(
*
HandleMessage
)
(
PP_Instance
instance
struct
PP_Var
message
)
;
}
;
typedef
struct
PPP_Messaging_1_0
PPP_Messaging
;
struct
PPP_MouseLock_1_0
{
void
(
*
MouseLockLost
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPP_MouseLock_1_0
PPP_MouseLock
;
struct
PPB_BrokerTrusted_0_3
{
PP_Resource
(
*
CreateTrusted
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsBrokerTrusted
)
(
PP_Resource
resource
)
;
int32_t
(
*
Connect
)
(
PP_Resource
broker
struct
PP_CompletionCallback
connect_callback
)
;
int32_t
(
*
GetHandle
)
(
PP_Resource
broker
int32_t
*
handle
)
;
PP_Bool
(
*
IsAllowed
)
(
PP_Resource
broker
)
;
}
;
typedef
struct
PPB_BrokerTrusted_0_3
PPB_BrokerTrusted
;
struct
PPB_BrokerTrusted_0_2
{
PP_Resource
(
*
CreateTrusted
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsBrokerTrusted
)
(
PP_Resource
resource
)
;
int32_t
(
*
Connect
)
(
PP_Resource
broker
struct
PP_CompletionCallback
connect_callback
)
;
int32_t
(
*
GetHandle
)
(
PP_Resource
broker
int32_t
*
handle
)
;
}
;
typedef
enum
{
PP_BROWSERFONT_TRUSTED_FAMILY_DEFAULT
=
0
PP_BROWSERFONT_TRUSTED_FAMILY_SERIF
=
1
PP_BROWSERFONT_TRUSTED_FAMILY_SANSSERIF
=
2
PP_BROWSERFONT_TRUSTED_FAMILY_MONOSPACE
=
3
}
PP_BrowserFont_Trusted_Family
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_BrowserFont_Trusted_Family
4
)
;
typedef
enum
{
PP_BROWSERFONT_TRUSTED_WEIGHT_100
=
0
PP_BROWSERFONT_TRUSTED_WEIGHT_200
=
1
PP_BROWSERFONT_TRUSTED_WEIGHT_300
=
2
PP_BROWSERFONT_TRUSTED_WEIGHT_400
=
3
PP_BROWSERFONT_TRUSTED_WEIGHT_500
=
4
PP_BROWSERFONT_TRUSTED_WEIGHT_600
=
5
PP_BROWSERFONT_TRUSTED_WEIGHT_700
=
6
PP_BROWSERFONT_TRUSTED_WEIGHT_800
=
7
PP_BROWSERFONT_TRUSTED_WEIGHT_900
=
8
PP_BROWSERFONT_TRUSTED_WEIGHT_NORMAL
=
PP_BROWSERFONT_TRUSTED_WEIGHT_400
PP_BROWSERFONT_TRUSTED_WEIGHT_BOLD
=
PP_BROWSERFONT_TRUSTED_WEIGHT_700
}
PP_BrowserFont_Trusted_Weight
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_BrowserFont_Trusted_Weight
4
)
;
struct
PP_BrowserFont_Trusted_Description
{
struct
PP_Var
face
;
PP_BrowserFont_Trusted_Family
family
;
uint32_t
size
;
PP_BrowserFont_Trusted_Weight
weight
;
PP_Bool
italic
;
PP_Bool
small_caps
;
int32_t
letter_spacing
;
int32_t
word_spacing
;
int32_t
padding
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_BrowserFont_Trusted_Description
48
)
;
struct
PP_BrowserFont_Trusted_Metrics
{
int32_t
height
;
int32_t
ascent
;
int32_t
descent
;
int32_t
line_spacing
;
int32_t
x_height
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_BrowserFont_Trusted_Metrics
20
)
;
struct
PP_BrowserFont_Trusted_TextRun
{
struct
PP_Var
text
;
PP_Bool
rtl
;
PP_Bool
override_direction
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_BrowserFont_Trusted_TextRun
24
)
;
struct
PPB_BrowserFont_Trusted_1_0
{
struct
PP_Var
(
*
GetFontFamilies
)
(
PP_Instance
instance
)
;
PP_Resource
(
*
Create
)
(
PP_Instance
instance
const
struct
PP_BrowserFont_Trusted_Description
*
description
)
;
PP_Bool
(
*
IsFont
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
Describe
)
(
PP_Resource
font
struct
PP_BrowserFont_Trusted_Description
*
description
struct
PP_BrowserFont_Trusted_Metrics
*
metrics
)
;
PP_Bool
(
*
DrawTextAt
)
(
PP_Resource
font
PP_Resource
image_data
const
struct
PP_BrowserFont_Trusted_TextRun
*
text
const
struct
PP_Point
*
position
uint32_t
color
const
struct
PP_Rect
*
clip
PP_Bool
image_data_is_opaque
)
;
int32_t
(
*
MeasureText
)
(
PP_Resource
font
const
struct
PP_BrowserFont_Trusted_TextRun
*
text
)
;
uint32_t
(
*
CharacterOffsetForPixel
)
(
PP_Resource
font
const
struct
PP_BrowserFont_Trusted_TextRun
*
text
int32_t
pixel_position
)
;
int32_t
(
*
PixelOffsetForCharacter
)
(
PP_Resource
font
const
struct
PP_BrowserFont_Trusted_TextRun
*
text
uint32_t
char_offset
)
;
}
;
typedef
struct
PPB_BrowserFont_Trusted_1_0
PPB_BrowserFont_Trusted
;
typedef
enum
{
PP_CHARSET_TRUSTED_CONVERSIONERROR_FAIL
PP_CHARSET_TRUSTED_CONVERSIONERROR_SKIP
PP_CHARSET_TRUSTED_CONVERSIONERROR_SUBSTITUTE
}
PP_CharSet_Trusted_ConversionError
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_CharSet_Trusted_ConversionError
4
)
;
struct
PPB_CharSet_Trusted_1_0
{
PP_Bool
(
*
UTF16ToCharSet
)
(
const
uint16_t
utf16
[
]
uint32_t
utf16_len
const
char
*
output_char_set
PP_CharSet_Trusted_ConversionError
on_error
char
*
output_buffer
uint32_t
*
output_length
)
;
PP_Bool
(
*
CharSetToUTF16
)
(
const
char
*
input
uint32_t
input_len
const
char
*
input_char_set
PP_CharSet_Trusted_ConversionError
on_error
uint16_t
*
output_buffer
uint32_t
*
output_utf16_length
)
;
struct
PP_Var
(
*
GetDefaultCharSet
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPB_CharSet_Trusted_1_0
PPB_CharSet_Trusted
;
struct
PPB_FileChooserTrusted_0_6
{
int32_t
(
*
ShowWithoutUserGesture
)
(
PP_Resource
chooser
PP_Bool
save_as
struct
PP_Var
suggested_file_name
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_FileChooserTrusted_0_6
PPB_FileChooserTrusted
;
struct
PPB_FileChooserTrusted_0_5
{
int32_t
(
*
ShowWithoutUserGesture
)
(
PP_Resource
chooser
PP_Bool
save_as
struct
PP_Var
suggested_file_name
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
void
(
*
PP_URLLoaderTrusted_StatusCallback
)
(
PP_Instance
pp_instance
PP_Resource
pp_resource
int64_t
bytes_sent
int64_t
total_bytes_to_be_sent
int64_t
bytes_received
int64_t
total_bytes_to_be_received
)
;
struct
PPB_URLLoaderTrusted_0_3
{
void
(
*
GrantUniversalAccess
)
(
PP_Resource
loader
)
;
void
(
*
RegisterStatusCallback
)
(
PP_Resource
loader
PP_URLLoaderTrusted_StatusCallback
cb
)
;
}
;
typedef
struct
PPB_URLLoaderTrusted_0_3
PPB_URLLoaderTrusted
;
#
include
"
ppapi
/
c
/
pp_instance
.
h
"
#
include
"
ppapi
/
c
/
pp_stdint
.
h
"
#
if
__GNUC__
>
=
4
#
define
PP_EXPORT
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
elif
defined
(
_MSC_VER
)
#
define
PP_EXPORT
__declspec
(
dllexport
)
#
endif
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
int32_t
(
*
PP_ConnectInstance_Func
)
(
PP_Instance
instance
int32_t
handle
)
;
PP_EXPORT
int32_t
PPP_InitializeBroker
(
PP_ConnectInstance_Func
*
connect_instance_func
)
;
PP_EXPORT
void
PPP_ShutdownBroker
(
)
;
#
ifdef
__cplusplus
}
#
endif
enum
PP_CursorType_Dev
{
PP_CURSORTYPE_CUSTOM
=
-
1
PP_CURSORTYPE_POINTER
=
0
PP_CURSORTYPE_CROSS
=
1
PP_CURSORTYPE_HAND
=
2
PP_CURSORTYPE_IBEAM
=
3
PP_CURSORTYPE_WAIT
=
4
PP_CURSORTYPE_HELP
=
5
PP_CURSORTYPE_EASTRESIZE
=
6
PP_CURSORTYPE_NORTHRESIZE
=
7
PP_CURSORTYPE_NORTHEASTRESIZE
=
8
PP_CURSORTYPE_NORTHWESTRESIZE
=
9
PP_CURSORTYPE_SOUTHRESIZE
=
10
PP_CURSORTYPE_SOUTHEASTRESIZE
=
11
PP_CURSORTYPE_SOUTHWESTRESIZE
=
12
PP_CURSORTYPE_WESTRESIZE
=
13
PP_CURSORTYPE_NORTHSOUTHRESIZE
=
14
PP_CURSORTYPE_EASTWESTRESIZE
=
15
PP_CURSORTYPE_NORTHEASTSOUTHWESTRESIZE
=
16
PP_CURSORTYPE_NORTHWESTSOUTHEASTRESIZE
=
17
PP_CURSORTYPE_COLUMNRESIZE
=
18
PP_CURSORTYPE_ROWRESIZE
=
19
PP_CURSORTYPE_MIDDLEPANNING
=
20
PP_CURSORTYPE_EASTPANNING
=
21
PP_CURSORTYPE_NORTHPANNING
=
22
PP_CURSORTYPE_NORTHEASTPANNING
=
23
PP_CURSORTYPE_NORTHWESTPANNING
=
24
PP_CURSORTYPE_SOUTHPANNING
=
25
PP_CURSORTYPE_SOUTHEASTPANNING
=
26
PP_CURSORTYPE_SOUTHWESTPANNING
=
27
PP_CURSORTYPE_WESTPANNING
=
28
PP_CURSORTYPE_MOVE
=
29
PP_CURSORTYPE_VERTICALTEXT
=
30
PP_CURSORTYPE_CELL
=
31
PP_CURSORTYPE_CONTEXTMENU
=
32
PP_CURSORTYPE_ALIAS
=
33
PP_CURSORTYPE_PROGRESS
=
34
PP_CURSORTYPE_NODROP
=
35
PP_CURSORTYPE_COPY
=
36
PP_CURSORTYPE_NONE
=
37
PP_CURSORTYPE_NOTALLOWED
=
38
PP_CURSORTYPE_ZOOMIN
=
39
PP_CURSORTYPE_ZOOMOUT
=
40
PP_CURSORTYPE_GRAB
=
41
PP_CURSORTYPE_GRABBING
=
42
}
;
PP_COMPILE_ASSERT_ENUM_SIZE_IN_BYTES
(
PP_CursorType_Dev
4
)
;
typedef
enum
{
PP_PRINTORIENTATION_NORMAL
=
0
PP_PRINTORIENTATION_ROTATED_90_CW
=
1
PP_PRINTORIENTATION_ROTATED_180
=
2
PP_PRINTORIENTATION_ROTATED_90_CCW
=
3
}
PP_PrintOrientation_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_PrintOrientation_Dev
4
)
;
typedef
enum
{
PP_PRINTOUTPUTFORMAT_RASTER
=
1u
<
<
0
PP_PRINTOUTPUTFORMAT_PDF
=
1u
<
<
1
PP_PRINTOUTPUTFORMAT_POSTSCRIPT
=
1u
<
<
2
PP_PRINTOUTPUTFORMAT_EMF
=
1u
<
<
3
}
PP_PrintOutputFormat_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_PrintOutputFormat_Dev
4
)
;
typedef
enum
{
PP_PRINTSCALINGOPTION_NONE
=
0
PP_PRINTSCALINGOPTION_FIT_TO_PRINTABLE_AREA
=
1
PP_PRINTSCALINGOPTION_SOURCE_SIZE
=
2
}
PP_PrintScalingOption_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_PrintScalingOption_Dev
4
)
;
struct
PP_PrintSettings_Dev
{
struct
PP_Rect
printable_area
;
struct
PP_Rect
content_area
;
struct
PP_Size
paper_size
;
int32_t
dpi
;
PP_PrintOrientation_Dev
orientation
;
PP_PrintScalingOption_Dev
print_scaling_option
;
PP_Bool
grayscale
;
PP_PrintOutputFormat_Dev
format
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_PrintSettings_Dev
60
)
;
struct
PP_VideoCaptureDeviceInfo_Dev
{
uint32_t
width
;
uint32_t
height
;
uint32_t
frames_per_second
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_VideoCaptureDeviceInfo_Dev
12
)
;
typedef
enum
{
PP_VIDEO_CAPTURE_STATUS_STOPPED
=
0
PP_VIDEO_CAPTURE_STATUS_STARTING
=
1
PP_VIDEO_CAPTURE_STATUS_STARTED
=
2
PP_VIDEO_CAPTURE_STATUS_PAUSED
=
3
PP_VIDEO_CAPTURE_STATUS_STOPPING
=
4
}
PP_VideoCaptureStatus_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_VideoCaptureStatus_Dev
4
)
;
typedef
enum
{
PP_VIDEODECODER_PROFILE_UNKNOWN
=
-
1
PP_VIDEODECODER_H264PROFILE_NONE
=
0
PP_VIDEODECODER_H264PROFILE_BASELINE
=
1
PP_VIDEODECODER_H264PROFILE_MAIN
=
2
PP_VIDEODECODER_H264PROFILE_EXTENDED
=
3
PP_VIDEODECODER_H264PROFILE_HIGH
=
4
PP_VIDEODECODER_H264PROFILE_HIGH10PROFILE
=
5
PP_VIDEODECODER_H264PROFILE_HIGH422PROFILE
=
6
PP_VIDEODECODER_H264PROFILE_HIGH444PREDICTIVEPROFILE
=
7
PP_VIDEODECODER_H264PROFILE_SCALABLEBASELINE
=
8
PP_VIDEODECODER_H264PROFILE_SCALABLEHIGH
=
9
PP_VIDEODECODER_H264PROFILE_STEREOHIGH
=
10
PP_VIDEODECODER_H264PROFILE_MULTIVIEWHIGH
=
11
PP_VIDEODECODER_VP8PROFILE_ANY
=
12
}
PP_VideoDecoder_Profile
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_VideoDecoder_Profile
4
)
;
struct
PP_VideoBitstreamBuffer_Dev
{
int32_t
id
;
PP_Resource
data
;
uint32_t
size
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_VideoBitstreamBuffer_Dev
12
)
;
struct
PP_PictureBuffer_Dev
{
int32_t
id
;
struct
PP_Size
size
;
uint32_t
texture_id
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_PictureBuffer_Dev
16
)
;
struct
PP_Picture_Dev
{
int32_t
picture_buffer_id
;
int32_t
bitstream_buffer_id
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_Picture_Dev
8
)
;
typedef
enum
{
PP_VIDEODECODERERROR_ILLEGAL_STATE
=
1
PP_VIDEODECODERERROR_INVALID_ARGUMENT
=
2
PP_VIDEODECODERERROR_UNREADABLE_INPUT
=
3
PP_VIDEODECODERERROR_PLATFORM_FAILURE
=
4
}
PP_VideoDecodeError_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_VideoDecodeError_Dev
4
)
;
typedef
void
(
*
PP_MonitorDeviceChangeCallback
)
(
void
*
user_data
uint32_t
device_count
const
PP_Resource
devices
[
]
)
;
typedef
enum
{
PP_DEVICETYPE_DEV_INVALID
=
0
PP_DEVICETYPE_DEV_AUDIOCAPTURE
=
1
PP_DEVICETYPE_DEV_VIDEOCAPTURE
=
2
}
PP_DeviceType_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_DeviceType_Dev
4
)
;
struct
PPB_DeviceRef_Dev_0_1
{
PP_Bool
(
*
IsDeviceRef
)
(
PP_Resource
resource
)
;
PP_DeviceType_Dev
(
*
GetType
)
(
PP_Resource
device_ref
)
;
struct
PP_Var
(
*
GetName
)
(
PP_Resource
device_ref
)
;
}
;
typedef
struct
PPB_DeviceRef_Dev_0_1
PPB_DeviceRef_Dev
;
typedef
void
(
*
PPB_AudioInput_Callback
)
(
const
void
*
sample_buffer
uint32_t
buffer_size_in_bytes
PP_TimeDelta
latency
void
*
user_data
)
;
typedef
void
(
*
PPB_AudioInput_Callback_0_3
)
(
const
void
*
sample_buffer
uint32_t
buffer_size_in_bytes
void
*
user_data
)
;
struct
PPB_AudioInput_Dev_0_4
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsAudioInput
)
(
PP_Resource
resource
)
;
int32_t
(
*
EnumerateDevices
)
(
PP_Resource
audio_input
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
MonitorDeviceChange
)
(
PP_Resource
audio_input
PP_MonitorDeviceChangeCallback
callback
void
*
user_data
)
;
int32_t
(
*
Open
)
(
PP_Resource
audio_input
PP_Resource
device_ref
PP_Resource
config
PPB_AudioInput_Callback
audio_input_callback
void
*
user_data
struct
PP_CompletionCallback
callback
)
;
PP_Resource
(
*
GetCurrentConfig
)
(
PP_Resource
audio_input
)
;
PP_Bool
(
*
StartCapture
)
(
PP_Resource
audio_input
)
;
PP_Bool
(
*
StopCapture
)
(
PP_Resource
audio_input
)
;
void
(
*
Close
)
(
PP_Resource
audio_input
)
;
}
;
typedef
struct
PPB_AudioInput_Dev_0_4
PPB_AudioInput_Dev
;
struct
PPB_AudioInput_Dev_0_3
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsAudioInput
)
(
PP_Resource
resource
)
;
int32_t
(
*
EnumerateDevices
)
(
PP_Resource
audio_input
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
MonitorDeviceChange
)
(
PP_Resource
audio_input
PP_MonitorDeviceChangeCallback
callback
void
*
user_data
)
;
int32_t
(
*
Open
)
(
PP_Resource
audio_input
PP_Resource
device_ref
PP_Resource
config
PPB_AudioInput_Callback_0_3
audio_input_callback
void
*
user_data
struct
PP_CompletionCallback
callback
)
;
PP_Resource
(
*
GetCurrentConfig
)
(
PP_Resource
audio_input
)
;
PP_Bool
(
*
StartCapture
)
(
PP_Resource
audio_input
)
;
PP_Bool
(
*
StopCapture
)
(
PP_Resource
audio_input
)
;
void
(
*
Close
)
(
PP_Resource
audio_input
)
;
}
;
struct
PPB_Buffer_Dev_0_4
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
uint32_t
size_in_bytes
)
;
PP_Bool
(
*
IsBuffer
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
Describe
)
(
PP_Resource
resource
uint32_t
*
size_in_bytes
)
;
void
*
(
*
Map
)
(
PP_Resource
resource
)
;
void
(
*
Unmap
)
(
PP_Resource
resource
)
;
}
;
typedef
struct
PPB_Buffer_Dev_0_4
PPB_Buffer_Dev
;
typedef
enum
{
PP_CHARSET_CONVERSIONERROR_FAIL
PP_CHARSET_CONVERSIONERROR_SKIP
PP_CHARSET_CONVERSIONERROR_SUBSTITUTE
}
PP_CharSet_ConversionError
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_CharSet_ConversionError
4
)
;
typedef
uint16_t
*
uint16_ptr_t
;
struct
PPB_CharSet_Dev_0_4
{
const
char
*
(
*
UTF16ToCharSet
)
(
PP_Instance
instance
const
uint16_t
utf16
[
]
uint32_t
utf16_len
const
char
*
output_char_set
PP_CharSet_ConversionError
on_error
uint32_t
*
output_length
)
;
uint16_ptr_t
(
*
CharSetToUTF16
)
(
PP_Instance
instance
const
char
*
input
uint32_t
input_len
const
char
*
input_char_set
PP_CharSet_ConversionError
on_error
uint32_t
*
output_utf16_length
)
;
struct
PP_Var
(
*
GetDefaultCharSet
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPB_CharSet_Dev_0_4
PPB_CharSet_Dev
;
struct
PPB_Crypto_Dev_0_1
{
void
(
*
GetRandomBytes
)
(
char
*
buffer
uint32_t
num_bytes
)
;
}
;
typedef
struct
PPB_Crypto_Dev_0_1
PPB_Crypto_Dev
;
struct
PPB_CursorControl_Dev_0_4
{
PP_Bool
(
*
SetCursor
)
(
PP_Instance
instance
enum
PP_CursorType_Dev
type
PP_Resource
custom_image
const
struct
PP_Point
*
hot_spot
)
;
PP_Bool
(
*
LockCursor
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
UnlockCursor
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
HasCursorLock
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
CanLockCursor
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPB_CursorControl_Dev_0_4
PPB_CursorControl_Dev
;
typedef
enum
{
PP_FILECHOOSERMODE_OPEN
=
0
PP_FILECHOOSERMODE_OPENMULTIPLE
=
1
}
PP_FileChooserMode_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_FileChooserMode_Dev
4
)
;
struct
PPB_FileChooser_Dev_0_6
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_FileChooserMode_Dev
mode
struct
PP_Var
accept_types
)
;
PP_Bool
(
*
IsFileChooser
)
(
PP_Resource
resource
)
;
int32_t
(
*
Show
)
(
PP_Resource
chooser
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_FileChooser_Dev_0_6
PPB_FileChooser_Dev
;
struct
PPB_FileChooser_Dev_0_5
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_FileChooserMode_Dev
mode
struct
PP_Var
accept_types
)
;
PP_Bool
(
*
IsFileChooser
)
(
PP_Resource
resource
)
;
int32_t
(
*
Show
)
(
PP_Resource
chooser
struct
PP_CompletionCallback
callback
)
;
PP_Resource
(
*
GetNextChosenFile
)
(
PP_Resource
chooser
)
;
}
;
typedef
enum
{
PP_FONTFAMILY_DEFAULT
=
0
PP_FONTFAMILY_SERIF
=
1
PP_FONTFAMILY_SANSSERIF
=
2
PP_FONTFAMILY_MONOSPACE
=
3
}
PP_FontFamily_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_FontFamily_Dev
4
)
;
typedef
enum
{
PP_FONTWEIGHT_100
=
0
PP_FONTWEIGHT_200
=
1
PP_FONTWEIGHT_300
=
2
PP_FONTWEIGHT_400
=
3
PP_FONTWEIGHT_500
=
4
PP_FONTWEIGHT_600
=
5
PP_FONTWEIGHT_700
=
6
PP_FONTWEIGHT_800
=
7
PP_FONTWEIGHT_900
=
8
PP_FONTWEIGHT_NORMAL
=
PP_FONTWEIGHT_400
PP_FONTWEIGHT_BOLD
=
PP_FONTWEIGHT_700
}
PP_FontWeight_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_FontWeight_Dev
4
)
;
struct
PP_FontDescription_Dev
{
struct
PP_Var
face
;
PP_FontFamily_Dev
family
;
uint32_t
size
;
PP_FontWeight_Dev
weight
;
PP_Bool
italic
;
PP_Bool
small_caps
;
int32_t
letter_spacing
;
int32_t
word_spacing
;
int32_t
padding
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_FontDescription_Dev
48
)
;
struct
PP_FontMetrics_Dev
{
int32_t
height
;
int32_t
ascent
;
int32_t
descent
;
int32_t
line_spacing
;
int32_t
x_height
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_FontMetrics_Dev
20
)
;
struct
PP_TextRun_Dev
{
struct
PP_Var
text
;
PP_Bool
rtl
;
PP_Bool
override_direction
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_TextRun_Dev
24
)
;
struct
PPB_Font_Dev_0_6
{
struct
PP_Var
(
*
GetFontFamilies
)
(
PP_Instance
instance
)
;
PP_Resource
(
*
Create
)
(
PP_Instance
instance
const
struct
PP_FontDescription_Dev
*
description
)
;
PP_Bool
(
*
IsFont
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
Describe
)
(
PP_Resource
font
struct
PP_FontDescription_Dev
*
description
struct
PP_FontMetrics_Dev
*
metrics
)
;
PP_Bool
(
*
DrawTextAt
)
(
PP_Resource
font
PP_Resource
image_data
const
struct
PP_TextRun_Dev
*
text
const
struct
PP_Point
*
position
uint32_t
color
const
struct
PP_Rect
*
clip
PP_Bool
image_data_is_opaque
)
;
int32_t
(
*
MeasureText
)
(
PP_Resource
font
const
struct
PP_TextRun_Dev
*
text
)
;
uint32_t
(
*
CharacterOffsetForPixel
)
(
PP_Resource
font
const
struct
PP_TextRun_Dev
*
text
int32_t
pixel_position
)
;
int32_t
(
*
PixelOffsetForCharacter
)
(
PP_Resource
font
const
struct
PP_TextRun_Dev
*
text
uint32_t
char_offset
)
;
}
;
typedef
struct
PPB_Font_Dev_0_6
PPB_Font_Dev
;
struct
PPB_IMEInputEvent_Dev_0_2
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
struct
PP_Var
text
uint32_t
segment_number
const
uint32_t
segment_offsets
[
]
int32_t
target_segment
uint32_t
selection_start
uint32_t
selection_end
)
;
PP_Bool
(
*
IsIMEInputEvent
)
(
PP_Resource
resource
)
;
struct
PP_Var
(
*
GetText
)
(
PP_Resource
ime_event
)
;
uint32_t
(
*
GetSegmentNumber
)
(
PP_Resource
ime_event
)
;
uint32_t
(
*
GetSegmentOffset
)
(
PP_Resource
ime_event
uint32_t
index
)
;
int32_t
(
*
GetTargetSegment
)
(
PP_Resource
ime_event
)
;
void
(
*
GetSelection
)
(
PP_Resource
ime_event
uint32_t
*
start
uint32_t
*
end
)
;
}
;
typedef
struct
PPB_IMEInputEvent_Dev_0_2
PPB_IMEInputEvent_Dev
;
struct
PPB_IMEInputEvent_Dev_0_1
{
PP_Bool
(
*
IsIMEInputEvent
)
(
PP_Resource
resource
)
;
struct
PP_Var
(
*
GetText
)
(
PP_Resource
ime_event
)
;
uint32_t
(
*
GetSegmentNumber
)
(
PP_Resource
ime_event
)
;
uint32_t
(
*
GetSegmentOffset
)
(
PP_Resource
ime_event
uint32_t
index
)
;
int32_t
(
*
GetTargetSegment
)
(
PP_Resource
ime_event
)
;
void
(
*
GetSelection
)
(
PP_Resource
ime_event
uint32_t
*
start
uint32_t
*
end
)
;
}
;
struct
PPB_Memory_Dev_0_1
{
void
*
(
*
MemAlloc
)
(
uint32_t
num_bytes
)
;
void
(
*
MemFree
)
(
void
*
ptr
)
;
}
;
typedef
struct
PPB_Memory_Dev_0_1
PPB_Memory_Dev
;
#
include
"
ppapi
/
c
/
pp_resource
.
h
"
#
include
"
ppapi
/
c
/
ppb_opengles2
.
h
"
struct
PPB_OpenGLES2DrawBuffers_Dev_1_0
{
void
(
*
DrawBuffersEXT
)
(
PP_Resource
context
GLsizei
count
const
GLenum
*
bufs
)
;
}
;
struct
PPB_OpenGLES2DrawBuffers_Dev
{
void
(
*
DrawBuffersEXT
)
(
PP_Resource
context
GLsizei
count
const
GLenum
*
bufs
)
;
}
;
struct
PPB_Printing_Dev_0_7
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
int32_t
(
*
GetDefaultPrintSettings
)
(
PP_Resource
resource
struct
PP_PrintSettings_Dev
*
print_settings
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_Printing_Dev_0_7
PPB_Printing_Dev
;
typedef
enum
{
PP_TEXTINPUT_TYPE_DEV_NONE
=
0
PP_TEXTINPUT_TYPE_DEV_TEXT
=
1
PP_TEXTINPUT_TYPE_DEV_PASSWORD
=
2
PP_TEXTINPUT_TYPE_DEV_SEARCH
=
3
PP_TEXTINPUT_TYPE_DEV_EMAIL
=
4
PP_TEXTINPUT_TYPE_DEV_NUMBER
=
5
PP_TEXTINPUT_TYPE_DEV_TELEPHONE
=
6
PP_TEXTINPUT_TYPE_DEV_URL
=
7
}
PP_TextInput_Type_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_TextInput_Type_Dev
4
)
;
struct
PPB_TextInput_Dev_0_2
{
void
(
*
SetTextInputType
)
(
PP_Instance
instance
PP_TextInput_Type_Dev
type
)
;
void
(
*
UpdateCaretPosition
)
(
PP_Instance
instance
const
struct
PP_Rect
*
caret
const
struct
PP_Rect
*
bounding_box
)
;
void
(
*
CancelCompositionText
)
(
PP_Instance
instance
)
;
void
(
*
UpdateSurroundingText
)
(
PP_Instance
instance
const
char
*
text
uint32_t
caret
uint32_t
anchor
)
;
void
(
*
SelectionChanged
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPB_TextInput_Dev_0_2
PPB_TextInput_Dev
;
struct
PPB_TextInput_Dev_0_1
{
void
(
*
SetTextInputType
)
(
PP_Instance
instance
PP_TextInput_Type_Dev
type
)
;
void
(
*
UpdateCaretPosition
)
(
PP_Instance
instance
const
struct
PP_Rect
*
caret
const
struct
PP_Rect
*
bounding_box
)
;
void
(
*
CancelCompositionText
)
(
PP_Instance
instance
)
;
}
;
typedef
int64_t
PP_TraceEventTime
;
struct
PPB_Trace_Event_Dev_0_2
{
void
*
(
*
GetCategoryEnabled
)
(
const
char
*
category_name
)
;
void
(
*
AddTraceEvent
)
(
int8_t
phase
const
void
*
category_enabled
const
char
*
name
uint64_t
id
uint32_t
num_args
const
char
*
arg_names
[
]
const
uint8_t
arg_types
[
]
const
uint64_t
arg_values
[
]
uint8_t
flags
)
;
void
(
*
AddTraceEventWithThreadIdAndTimestamp
)
(
int8_t
phase
const
void
*
category_enabled
const
char
*
name
uint64_t
id
int32_t
thread_id
PP_TraceEventTime
timestamp
uint32_t
num_args
const
char
*
arg_names
[
]
const
uint8_t
arg_types
[
]
const
uint64_t
arg_values
[
]
uint8_t
flags
)
;
PP_TraceEventTime
(
*
Now
)
(
void
)
;
void
(
*
SetThreadName
)
(
const
char
*
thread_name
)
;
}
;
typedef
struct
PPB_Trace_Event_Dev_0_2
PPB_Trace_Event_Dev
;
struct
PPB_Trace_Event_Dev_0_1
{
void
*
(
*
GetCategoryEnabled
)
(
const
char
*
category_name
)
;
void
(
*
AddTraceEvent
)
(
int8_t
phase
const
void
*
category_enabled
const
char
*
name
uint64_t
id
uint32_t
num_args
const
char
*
arg_names
[
]
const
uint8_t
arg_types
[
]
const
uint64_t
arg_values
[
]
uint8_t
flags
)
;
void
(
*
SetThreadName
)
(
const
char
*
thread_name
)
;
}
;
typedef
enum
{
PP_TRUETYPEFONTFAMILY_SERIF
=
0
PP_TRUETYPEFONTFAMILY_SANSSERIF
=
1
PP_TRUETYPEFONTFAMILY_CURSIVE
=
2
PP_TRUETYPEFONTFAMILY_FANTASY
=
3
PP_TRUETYPEFONTFAMILY_MONOSPACE
=
4
}
PP_TrueTypeFontFamily_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_TrueTypeFontFamily_Dev
4
)
;
typedef
enum
{
PP_TRUETYPEFONTSTYLE_NORMAL
=
0
PP_TRUETYPEFONTSTYLE_ITALIC
=
1
}
PP_TrueTypeFontStyle_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_TrueTypeFontStyle_Dev
4
)
;
typedef
enum
{
PP_TRUETYPEFONTWEIGHT_THIN
=
100
PP_TRUETYPEFONTWEIGHT_ULTRALIGHT
=
200
PP_TRUETYPEFONTWEIGHT_LIGHT
=
300
PP_TRUETYPEFONTWEIGHT_NORMAL
=
400
PP_TRUETYPEFONTWEIGHT_MEDIUM
=
500
PP_TRUETYPEFONTWEIGHT_SEMIBOLD
=
600
PP_TRUETYPEFONTWEIGHT_BOLD
=
700
PP_TRUETYPEFONTWEIGHT_ULTRABOLD
=
800
PP_TRUETYPEFONTWEIGHT_HEAVY
=
900
}
PP_TrueTypeFontWeight_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_TrueTypeFontWeight_Dev
4
)
;
typedef
enum
{
PP_TRUETYPEFONTWIDTH_ULTRACONDENSED
=
0
PP_TRUETYPEFONTWIDTH_EXTRACONDENSED
=
1
PP_TRUETYPEFONTWIDTH_CONDENSED
=
2
PP_TRUETYPEFONTWIDTH_SEMICONDENSED
=
3
PP_TRUETYPEFONTWIDTH_NORMAL
=
4
PP_TRUETYPEFONTWIDTH_SEMIEXPANDED
=
5
PP_TRUETYPEFONTWIDTH_EXPANDED
=
6
PP_TRUETYPEFONTWIDTH_EXTRAEXPANDED
=
7
PP_TRUETYPEFONTWIDTH_ULTRAEXPANDED
=
8
}
PP_TrueTypeFontWidth_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_TrueTypeFontWidth_Dev
4
)
;
typedef
enum
{
PP_TRUETYPEFONTCHARSET_ANSI
=
0
PP_TRUETYPEFONTCHARSET_DEFAULT
=
1
PP_TRUETYPEFONTCHARSET_SYMBOL
=
2
PP_TRUETYPEFONTCHARSET_MAC
=
77
PP_TRUETYPEFONTCHARSET_SHIFTJIS
=
128
PP_TRUETYPEFONTCHARSET_HANGUL
=
129
PP_TRUETYPEFONTCHARSET_JOHAB
=
130
PP_TRUETYPEFONTCHARSET_GB2312
=
134
PP_TRUETYPEFONTCHARSET_CHINESEBIG5
=
136
PP_TRUETYPEFONTCHARSET_GREEK
=
161
PP_TRUETYPEFONTCHARSET_TURKISH
=
162
PP_TRUETYPEFONTCHARSET_VIETNAMESE
=
163
PP_TRUETYPEFONTCHARSET_HEBREW
=
177
PP_TRUETYPEFONTCHARSET_ARABIC
=
178
PP_TRUETYPEFONTCHARSET_BALTIC
=
186
PP_TRUETYPEFONTCHARSET_RUSSIAN
=
204
PP_TRUETYPEFONTCHARSET_THAI
=
222
PP_TRUETYPEFONTCHARSET_EASTEUROPE
=
238
PP_TRUETYPEFONTCHARSET_OEM
=
255
}
PP_TrueTypeFontCharset_Dev
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_TrueTypeFontCharset_Dev
4
)
;
struct
PP_TrueTypeFontDesc_Dev
{
struct
PP_Var
family
;
PP_TrueTypeFontFamily_Dev
generic_family
;
PP_TrueTypeFontStyle_Dev
style
;
PP_TrueTypeFontWeight_Dev
weight
;
PP_TrueTypeFontWidth_Dev
width
;
PP_TrueTypeFontCharset_Dev
charset
;
int32_t
padding
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_TrueTypeFontDesc_Dev
40
)
;
struct
PPB_TrueTypeFont_Dev_0_1
{
int32_t
(
*
GetFontFamilies
)
(
PP_Instance
instance
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetFontsInFamily
)
(
PP_Instance
instance
struct
PP_Var
family
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
PP_Resource
(
*
Create
)
(
PP_Instance
instance
const
struct
PP_TrueTypeFontDesc_Dev
*
desc
)
;
PP_Bool
(
*
IsTrueTypeFont
)
(
PP_Resource
resource
)
;
int32_t
(
*
Describe
)
(
PP_Resource
font
struct
PP_TrueTypeFontDesc_Dev
*
desc
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetTableTags
)
(
PP_Resource
font
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetTable
)
(
PP_Resource
font
uint32_t
table
int32_t
offset
int32_t
max_data_length
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_TrueTypeFont_Dev_0_1
PPB_TrueTypeFont_Dev
;
struct
PP_URLComponent_Dev
{
int32_t
begin
;
int32_t
len
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_URLComponent_Dev
8
)
;
struct
PP_URLComponents_Dev
{
struct
PP_URLComponent_Dev
scheme
;
struct
PP_URLComponent_Dev
username
;
struct
PP_URLComponent_Dev
password
;
struct
PP_URLComponent_Dev
host
;
struct
PP_URLComponent_Dev
port
;
struct
PP_URLComponent_Dev
path
;
struct
PP_URLComponent_Dev
query
;
struct
PP_URLComponent_Dev
ref
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_URLComponents_Dev
64
)
;
struct
PPB_URLUtil_Dev_0_7
{
struct
PP_Var
(
*
Canonicalize
)
(
struct
PP_Var
url
struct
PP_URLComponents_Dev
*
components
)
;
struct
PP_Var
(
*
ResolveRelativeToURL
)
(
struct
PP_Var
base_url
struct
PP_Var
relative_string
struct
PP_URLComponents_Dev
*
components
)
;
struct
PP_Var
(
*
ResolveRelativeToDocument
)
(
PP_Instance
instance
struct
PP_Var
relative_string
struct
PP_URLComponents_Dev
*
components
)
;
PP_Bool
(
*
IsSameSecurityOrigin
)
(
struct
PP_Var
url_a
struct
PP_Var
url_b
)
;
PP_Bool
(
*
DocumentCanRequest
)
(
PP_Instance
instance
struct
PP_Var
url
)
;
PP_Bool
(
*
DocumentCanAccessDocument
)
(
PP_Instance
active
PP_Instance
target
)
;
struct
PP_Var
(
*
GetDocumentURL
)
(
PP_Instance
instance
struct
PP_URLComponents_Dev
*
components
)
;
struct
PP_Var
(
*
GetPluginInstanceURL
)
(
PP_Instance
instance
struct
PP_URLComponents_Dev
*
components
)
;
struct
PP_Var
(
*
GetPluginReferrerURL
)
(
PP_Instance
instance
struct
PP_URLComponents_Dev
*
components
)
;
}
;
typedef
struct
PPB_URLUtil_Dev_0_7
PPB_URLUtil_Dev
;
struct
PPB_URLUtil_Dev_0_6
{
struct
PP_Var
(
*
Canonicalize
)
(
struct
PP_Var
url
struct
PP_URLComponents_Dev
*
components
)
;
struct
PP_Var
(
*
ResolveRelativeToURL
)
(
struct
PP_Var
base_url
struct
PP_Var
relative_string
struct
PP_URLComponents_Dev
*
components
)
;
struct
PP_Var
(
*
ResolveRelativeToDocument
)
(
PP_Instance
instance
struct
PP_Var
relative_string
struct
PP_URLComponents_Dev
*
components
)
;
PP_Bool
(
*
IsSameSecurityOrigin
)
(
struct
PP_Var
url_a
struct
PP_Var
url_b
)
;
PP_Bool
(
*
DocumentCanRequest
)
(
PP_Instance
instance
struct
PP_Var
url
)
;
PP_Bool
(
*
DocumentCanAccessDocument
)
(
PP_Instance
active
PP_Instance
target
)
;
struct
PP_Var
(
*
GetDocumentURL
)
(
PP_Instance
instance
struct
PP_URLComponents_Dev
*
components
)
;
struct
PP_Var
(
*
GetPluginInstanceURL
)
(
PP_Instance
instance
struct
PP_URLComponents_Dev
*
components
)
;
}
;
struct
PPP_Class_Deprecated_1_0
{
PP_Bool
(
*
HasProperty
)
(
const
void
*
object
struct
PP_Var
name
struct
PP_Var
*
exception
)
;
PP_Bool
(
*
HasMethod
)
(
const
void
*
object
struct
PP_Var
name
struct
PP_Var
*
exception
)
;
struct
PP_Var
(
*
GetProperty
)
(
const
void
*
object
struct
PP_Var
name
struct
PP_Var
*
exception
)
;
void
(
*
GetAllPropertyNames
)
(
const
void
*
object
uint32_t
*
property_count
struct
PP_Var
*
*
properties
struct
PP_Var
*
exception
)
;
void
(
*
SetProperty
)
(
const
void
*
object
struct
PP_Var
name
struct
PP_Var
value
struct
PP_Var
*
exception
)
;
void
(
*
RemoveProperty
)
(
const
void
*
object
struct
PP_Var
name
struct
PP_Var
*
exception
)
;
struct
PP_Var
(
*
Call
)
(
const
void
*
object
struct
PP_Var
method_name
uint32_t
argc
const
struct
PP_Var
argv
[
]
struct
PP_Var
*
exception
)
;
struct
PP_Var
(
*
Construct
)
(
const
void
*
object
uint32_t
argc
const
struct
PP_Var
argv
[
]
struct
PP_Var
*
exception
)
;
void
(
*
Deallocate
)
(
const
void
*
object
)
;
}
;
typedef
struct
PPP_Class_Deprecated_1_0
PPP_Class_Deprecated
;
struct
PPB_Var_Deprecated_0_3
{
void
(
*
AddRef
)
(
struct
PP_Var
var
)
;
void
(
*
Release
)
(
struct
PP_Var
var
)
;
struct
PP_Var
(
*
VarFromUtf8
)
(
PP_Module
module
const
char
*
data
uint32_t
len
)
;
const
char
*
(
*
VarToUtf8
)
(
struct
PP_Var
var
uint32_t
*
len
)
;
PP_Bool
(
*
HasProperty
)
(
struct
PP_Var
object
struct
PP_Var
name
struct
PP_Var
*
exception
)
;
PP_Bool
(
*
HasMethod
)
(
struct
PP_Var
object
struct
PP_Var
name
struct
PP_Var
*
exception
)
;
struct
PP_Var
(
*
GetProperty
)
(
struct
PP_Var
object
struct
PP_Var
name
struct
PP_Var
*
exception
)
;
void
(
*
GetAllPropertyNames
)
(
struct
PP_Var
object
uint32_t
*
property_count
struct
PP_Var
*
*
properties
struct
PP_Var
*
exception
)
;
void
(
*
SetProperty
)
(
struct
PP_Var
object
struct
PP_Var
name
struct
PP_Var
value
struct
PP_Var
*
exception
)
;
void
(
*
RemoveProperty
)
(
struct
PP_Var
object
struct
PP_Var
name
struct
PP_Var
*
exception
)
;
struct
PP_Var
(
*
Call
)
(
struct
PP_Var
object
struct
PP_Var
method_name
uint32_t
argc
const
struct
PP_Var
argv
[
]
struct
PP_Var
*
exception
)
;
struct
PP_Var
(
*
Construct
)
(
struct
PP_Var
object
uint32_t
argc
const
struct
PP_Var
argv
[
]
struct
PP_Var
*
exception
)
;
PP_Bool
(
*
IsInstanceOf
)
(
struct
PP_Var
var
const
struct
PPP_Class_Deprecated_1_0
*
object_class
void
*
object_data
)
;
struct
PP_Var
(
*
CreateObject
)
(
PP_Instance
instance
const
struct
PPP_Class_Deprecated_1_0
*
object_class
void
*
object_data
)
;
struct
PP_Var
(
*
CreateObjectWithModuleDeprecated
)
(
PP_Module
module
const
struct
PPP_Class_Deprecated_1_0
*
object_class
void
*
object_data
)
;
}
;
typedef
struct
PPB_Var_Deprecated_0_3
PPB_Var_Deprecated
;
struct
PPB_VideoCapture_Dev_0_3
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsVideoCapture
)
(
PP_Resource
video_capture
)
;
int32_t
(
*
EnumerateDevices
)
(
PP_Resource
video_capture
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
MonitorDeviceChange
)
(
PP_Resource
video_capture
PP_MonitorDeviceChangeCallback
callback
void
*
user_data
)
;
int32_t
(
*
Open
)
(
PP_Resource
video_capture
PP_Resource
device_ref
const
struct
PP_VideoCaptureDeviceInfo_Dev
*
requested_info
uint32_t
buffer_count
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
StartCapture
)
(
PP_Resource
video_capture
)
;
int32_t
(
*
ReuseBuffer
)
(
PP_Resource
video_capture
uint32_t
buffer
)
;
int32_t
(
*
StopCapture
)
(
PP_Resource
video_capture
)
;
void
(
*
Close
)
(
PP_Resource
video_capture
)
;
}
;
typedef
struct
PPB_VideoCapture_Dev_0_3
PPB_VideoCapture_Dev
;
struct
PPB_VideoDecoder_Dev_0_16
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
PP_Resource
context
PP_VideoDecoder_Profile
profile
)
;
PP_Bool
(
*
IsVideoDecoder
)
(
PP_Resource
resource
)
;
int32_t
(
*
Decode
)
(
PP_Resource
video_decoder
const
struct
PP_VideoBitstreamBuffer_Dev
*
bitstream_buffer
struct
PP_CompletionCallback
callback
)
;
void
(
*
AssignPictureBuffers
)
(
PP_Resource
video_decoder
uint32_t
no_of_buffers
const
struct
PP_PictureBuffer_Dev
buffers
[
]
)
;
void
(
*
ReusePictureBuffer
)
(
PP_Resource
video_decoder
int32_t
picture_buffer_id
)
;
int32_t
(
*
Flush
)
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Reset
)
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
;
void
(
*
Destroy
)
(
PP_Resource
video_decoder
)
;
}
;
typedef
struct
PPB_VideoDecoder_Dev_0_16
PPB_VideoDecoder_Dev
;
struct
PPB_View_Dev_0_1
{
float
(
*
GetDeviceScale
)
(
PP_Resource
resource
)
;
float
(
*
GetCSSScale
)
(
PP_Resource
resource
)
;
}
;
typedef
struct
PPB_View_Dev_0_1
PPB_View_Dev
;
struct
PPP_NetworkState_Dev_0_1
{
void
(
*
SetOnLine
)
(
PP_Bool
is_online
)
;
}
;
typedef
struct
PPP_NetworkState_Dev_0_1
PPP_NetworkState_Dev
;
struct
PP_PrintPageNumberRange_Dev
{
uint32_t
first_page_number
;
uint32_t
last_page_number
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_PrintPageNumberRange_Dev
8
)
;
struct
PPP_Printing_Dev_0_6
{
uint32_t
(
*
QuerySupportedFormats
)
(
PP_Instance
instance
)
;
int32_t
(
*
Begin
)
(
PP_Instance
instance
const
struct
PP_PrintSettings_Dev
*
print_settings
)
;
PP_Resource
(
*
PrintPages
)
(
PP_Instance
instance
const
struct
PP_PrintPageNumberRange_Dev
*
page_ranges
uint32_t
page_range_count
)
;
void
(
*
End
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsScalingDisabled
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPP_Printing_Dev_0_6
PPP_Printing_Dev
;
struct
PPP_TextInput_Dev_0_1
{
void
(
*
RequestSurroundingText
)
(
PP_Instance
instance
uint32_t
desired_number_of_characters
)
;
}
;
typedef
struct
PPP_TextInput_Dev_0_1
PPP_TextInput_Dev
;
struct
PPP_VideoCapture_Dev_0_1
{
void
(
*
OnDeviceInfo
)
(
PP_Instance
instance
PP_Resource
video_capture
const
struct
PP_VideoCaptureDeviceInfo_Dev
*
info
uint32_t
buffer_count
const
PP_Resource
buffers
[
]
)
;
void
(
*
OnStatus
)
(
PP_Instance
instance
PP_Resource
video_capture
uint32_t
status
)
;
void
(
*
OnError
)
(
PP_Instance
instance
PP_Resource
video_capture
uint32_t
error_code
)
;
void
(
*
OnBufferReady
)
(
PP_Instance
instance
PP_Resource
video_capture
uint32_t
buffer
)
;
}
;
typedef
struct
PPP_VideoCapture_Dev_0_1
PPP_VideoCapture_Dev
;
struct
PPP_VideoDecoder_Dev_0_11
{
void
(
*
ProvidePictureBuffers
)
(
PP_Instance
instance
PP_Resource
decoder
uint32_t
req_num_of_bufs
const
struct
PP_Size
*
dimensions
uint32_t
texture_target
)
;
void
(
*
DismissPictureBuffer
)
(
PP_Instance
instance
PP_Resource
decoder
int32_t
picture_buffer_id
)
;
void
(
*
PictureReady
)
(
PP_Instance
instance
PP_Resource
decoder
const
struct
PP_Picture_Dev
*
picture
)
;
void
(
*
NotifyError
)
(
PP_Instance
instance
PP_Resource
decoder
PP_VideoDecodeError_Dev
error
)
;
}
;
typedef
struct
PPP_VideoDecoder_Dev_0_11
PPP_VideoDecoder_Dev
;
struct
PP_DecryptTrackingInfo
{
uint32_t
request_id
;
uint32_t
buffer_id
;
int64_t
timestamp
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_DecryptTrackingInfo
16
)
;
struct
PP_DecryptSubsampleDescription
{
uint32_t
clear_bytes
;
uint32_t
cipher_bytes
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_DecryptSubsampleDescription
8
)
;
struct
PP_EncryptedBlockInfo
{
struct
PP_DecryptTrackingInfo
tracking_info
;
uint32_t
data_size
;
uint8_t
key_id
[
64
]
;
uint32_t
key_id_size
;
uint8_t
iv
[
16
]
;
uint32_t
iv_size
;
struct
PP_DecryptSubsampleDescription
subsamples
[
32
]
;
uint32_t
num_subsamples
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_EncryptedBlockInfo
368
)
;
typedef
enum
{
PP_DECRYPTEDFRAMEFORMAT_UNKNOWN
=
0
PP_DECRYPTEDFRAMEFORMAT_YV12
=
1
PP_DECRYPTEDFRAMEFORMAT_I420
=
2
}
PP_DecryptedFrameFormat
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_DecryptedFrameFormat
4
)
;
typedef
enum
{
PP_DECRYPTEDSAMPLEFORMAT_UNKNOWN
=
0
PP_DECRYPTEDSAMPLEFORMAT_U8
=
1
PP_DECRYPTEDSAMPLEFORMAT_S16
=
2
PP_DECRYPTEDSAMPLEFORMAT_S32
=
3
PP_DECRYPTEDSAMPLEFORMAT_F32
=
4
PP_DECRYPTEDSAMPLEFORMAT_PLANAR_S16
=
5
PP_DECRYPTEDSAMPLEFORMAT_PLANAR_F32
=
6
}
PP_DecryptedSampleFormat
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_DecryptedSampleFormat
4
)
;
typedef
enum
{
PP_DECRYPTRESULT_SUCCESS
=
0
PP_DECRYPTRESULT_DECRYPT_NOKEY
=
1
PP_DECRYPTRESULT_NEEDMOREDATA
=
2
PP_DECRYPTRESULT_DECRYPT_ERROR
=
3
PP_DECRYPTRESULT_DECODE_ERROR
=
4
}
PP_DecryptResult
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_DecryptResult
4
)
;
struct
PP_DecryptedBlockInfo
{
PP_DecryptResult
result
;
uint32_t
data_size
;
struct
PP_DecryptTrackingInfo
tracking_info
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_DecryptedBlockInfo
24
)
;
typedef
enum
{
PP_DECRYPTEDFRAMEPLANES_Y
=
0
PP_DECRYPTEDFRAMEPLANES_U
=
1
PP_DECRYPTEDFRAMEPLANES_V
=
2
}
PP_DecryptedFramePlanes
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_DecryptedFramePlanes
4
)
;
struct
PP_DecryptedFrameInfo
{
PP_DecryptResult
result
;
PP_DecryptedFrameFormat
format
;
int32_t
plane_offsets
[
3
]
;
int32_t
strides
[
3
]
;
int32_t
width
;
int32_t
height
;
struct
PP_DecryptTrackingInfo
tracking_info
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_DecryptedFrameInfo
56
)
;
struct
PP_DecryptedSampleInfo
{
PP_DecryptResult
result
;
PP_DecryptedSampleFormat
format
;
uint32_t
data_size
;
uint32_t
padding
;
struct
PP_DecryptTrackingInfo
tracking_info
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_DecryptedSampleInfo
32
)
;
typedef
enum
{
PP_AUDIOCODEC_UNKNOWN
=
0
PP_AUDIOCODEC_VORBIS
=
1
PP_AUDIOCODEC_AAC
=
2
}
PP_AudioCodec
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_AudioCodec
4
)
;
struct
PP_AudioDecoderConfig
{
PP_AudioCodec
codec
;
int32_t
channel_count
;
int32_t
bits_per_channel
;
int32_t
samples_per_second
;
uint32_t
request_id
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_AudioDecoderConfig
20
)
;
typedef
enum
{
PP_VIDEOCODEC_UNKNOWN
=
0
PP_VIDEOCODEC_VP8
=
1
PP_VIDEOCODEC_H264
=
2
PP_VIDEOCODEC_VP9
=
3
}
PP_VideoCodec
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_VideoCodec
4
)
;
typedef
enum
{
PP_VIDEOCODECPROFILE_UNKNOWN
=
0
PP_VIDEOCODECPROFILE_NOT_NEEDED
=
1
PP_VIDEOCODECPROFILE_H264_BASELINE
=
2
PP_VIDEOCODECPROFILE_H264_MAIN
=
3
PP_VIDEOCODECPROFILE_H264_EXTENDED
=
4
PP_VIDEOCODECPROFILE_H264_HIGH
=
5
PP_VIDEOCODECPROFILE_H264_HIGH_10
=
6
PP_VIDEOCODECPROFILE_H264_HIGH_422
=
7
PP_VIDEOCODECPROFILE_H264_HIGH_444_PREDICTIVE
=
8
}
PP_VideoCodecProfile
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_VideoCodecProfile
4
)
;
struct
PP_VideoDecoderConfig
{
PP_VideoCodec
codec
;
PP_VideoCodecProfile
profile
;
PP_DecryptedFrameFormat
format
;
int32_t
width
;
int32_t
height
;
uint32_t
request_id
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_VideoDecoderConfig
24
)
;
typedef
enum
{
PP_DECRYPTORSTREAMTYPE_AUDIO
=
0
PP_DECRYPTORSTREAMTYPE_VIDEO
=
1
}
PP_DecryptorStreamType
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_DecryptorStreamType
4
)
;
typedef
enum
{
PP_SESSIONTYPE_TEMPORARY
=
0
PP_SESSIONTYPE_PERSISTENT_LICENSE
=
1
PP_SESSIONTYPE_PERSISTENT_RELEASE
=
2
}
PP_SessionType
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_SessionType
4
)
;
typedef
enum
{
PP_INITDATATYPE_CENC
=
0
PP_INITDATATYPE_KEYIDS
=
1
PP_INITDATATYPE_WEBM
=
2
}
PP_InitDataType
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_InitDataType
4
)
;
typedef
enum
{
PP_CDMEXCEPTIONCODE_NOTSUPPORTEDERROR
=
1
PP_CDMEXCEPTIONCODE_INVALIDSTATEERROR
=
2
PP_CDMEXCEPTIONCODE_INVALIDACCESSERROR
=
3
PP_CDMEXCEPTIONCODE_QUOTAEXCEEDEDERROR
=
4
PP_CDMEXCEPTIONCODE_UNKNOWNERROR
=
5
PP_CDMEXCEPTIONCODE_CLIENTERROR
=
6
PP_CDMEXCEPTIONCODE_OUTPUTERROR
=
7
}
PP_CdmExceptionCode
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_CdmExceptionCode
4
)
;
typedef
enum
{
PP_CDMMESSAGETYPE_LICENSE_REQUEST
=
0
PP_CDMMESSAGETYPE_LICENSE_RENEWAL
=
1
PP_CDMMESSAGETYPE_LICENSE_RELEASE
=
2
}
PP_CdmMessageType
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_CdmMessageType
4
)
;
typedef
enum
{
PP_CDMKEYSTATUS_USABLE
=
0
PP_CDMKEYSTATUS_INVALID
=
1
PP_CDMKEYSTATUS_EXPIRED
=
2
PP_CDMKEYSTATUS_OUTPUTRESTRICTED
=
3
PP_CDMKEYSTATUS_OUTPUTDOWNSCALED
=
4
PP_CDMKEYSTATUS_STATUSPENDING
=
5
PP_CDMKEYSTATUS_RELEASED
=
6
}
PP_CdmKeyStatus
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_CdmKeyStatus
4
)
;
struct
PP_KeyInformation
{
uint8_t
key_id
[
512
]
;
uint32_t
key_id_size
;
PP_CdmKeyStatus
key_status
;
uint32_t
system_code
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_KeyInformation
524
)
;
#
ifdef
_WIN32
#
include
<
windows
.
h
>
typedef
HANDLE
PP_FileHandle
;
static
const
PP_FileHandle
PP_kInvalidFileHandle
=
NULL
;
#
else
typedef
int
PP_FileHandle
;
static
const
PP_FileHandle
PP_kInvalidFileHandle
=
-
1
;
#
endif
typedef
enum
{
PP_PRIVATEFONTCHARSET_ANSI
=
0
PP_PRIVATEFONTCHARSET_DEFAULT
=
1
PP_PRIVATEFONTCHARSET_SYMBOL
=
2
PP_PRIVATEFONTCHARSET_MAC
=
77
PP_PRIVATEFONTCHARSET_SHIFTJIS
=
128
PP_PRIVATEFONTCHARSET_HANGUL
=
129
PP_PRIVATEFONTCHARSET_JOHAB
=
130
PP_PRIVATEFONTCHARSET_GB2312
=
134
PP_PRIVATEFONTCHARSET_CHINESEBIG5
=
136
PP_PRIVATEFONTCHARSET_GREEK
=
161
PP_PRIVATEFONTCHARSET_TURKISH
=
162
PP_PRIVATEFONTCHARSET_VIETNAMESE
=
163
PP_PRIVATEFONTCHARSET_HEBREW
=
177
PP_PRIVATEFONTCHARSET_ARABIC
=
178
PP_PRIVATEFONTCHARSET_BALTIC
=
186
PP_PRIVATEFONTCHARSET_RUSSIAN
=
204
PP_PRIVATEFONTCHARSET_THAI
=
222
PP_PRIVATEFONTCHARSET_EASTEUROPE
=
238
PP_PRIVATEFONTCHARSET_OEM
=
255
}
PP_PrivateFontCharset
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_PrivateFontCharset
4
)
;
struct
PP_VideoCaptureFormat
{
struct
PP_Size
frame_size
;
float
frame_rate
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_VideoCaptureFormat
12
)
;
struct
PP_VideoFrame_Private
{
PP_TimeTicks
timestamp
;
PP_Resource
image_data
;
int32_t
padding
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_VideoFrame_Private
16
)
;
struct
PPB_CameraCapabilities_Private_0_1
{
PP_Bool
(
*
IsCameraCapabilities
)
(
PP_Resource
resource
)
;
void
(
*
GetSupportedVideoCaptureFormats
)
(
PP_Resource
capabilities
uint32_t
*
array_size
struct
PP_VideoCaptureFormat
*
*
formats
)
;
}
;
typedef
struct
PPB_CameraCapabilities_Private_0_1
PPB_CameraCapabilities_Private
;
struct
PPB_CameraDevice_Private_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsCameraDevice
)
(
PP_Resource
resource
)
;
int32_t
(
*
Open
)
(
PP_Resource
camera_device
struct
PP_Var
device_id
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
camera_device
)
;
int32_t
(
*
GetCameraCapabilities
)
(
PP_Resource
camera_device
PP_Resource
*
capabilities
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_CameraDevice_Private_0_1
PPB_CameraDevice_Private
;
struct
PPB_ContentDecryptor_Private_0_14
{
void
(
*
PromiseResolved
)
(
PP_Instance
instance
uint32_t
promise_id
)
;
void
(
*
PromiseResolvedWithSession
)
(
PP_Instance
instance
uint32_t
promise_id
struct
PP_Var
session_id
)
;
void
(
*
PromiseRejected
)
(
PP_Instance
instance
uint32_t
promise_id
PP_CdmExceptionCode
exception_code
uint32_t
system_code
struct
PP_Var
error_description
)
;
void
(
*
SessionMessage
)
(
PP_Instance
instance
struct
PP_Var
session_id
PP_CdmMessageType
message_type
struct
PP_Var
message
struct
PP_Var
legacy_destination_url
)
;
void
(
*
SessionKeysChange
)
(
PP_Instance
instance
struct
PP_Var
session_id
PP_Bool
has_additional_usable_key
uint32_t
key_count
const
struct
PP_KeyInformation
key_information
[
]
)
;
void
(
*
SessionExpirationChange
)
(
PP_Instance
instance
struct
PP_Var
session_id
PP_Time
new_expiry_time
)
;
void
(
*
SessionClosed
)
(
PP_Instance
instance
struct
PP_Var
session_id
)
;
void
(
*
LegacySessionError
)
(
PP_Instance
instance
struct
PP_Var
session_id
PP_CdmExceptionCode
exception_code
uint32_t
system_code
struct
PP_Var
error_description
)
;
void
(
*
DeliverBlock
)
(
PP_Instance
instance
PP_Resource
decrypted_block
const
struct
PP_DecryptedBlockInfo
*
decrypted_block_info
)
;
void
(
*
DecoderInitializeDone
)
(
PP_Instance
instance
PP_DecryptorStreamType
decoder_type
uint32_t
request_id
PP_Bool
success
)
;
void
(
*
DecoderDeinitializeDone
)
(
PP_Instance
instance
PP_DecryptorStreamType
decoder_type
uint32_t
request_id
)
;
void
(
*
DecoderResetDone
)
(
PP_Instance
instance
PP_DecryptorStreamType
decoder_type
uint32_t
request_id
)
;
void
(
*
DeliverFrame
)
(
PP_Instance
instance
PP_Resource
decrypted_frame
const
struct
PP_DecryptedFrameInfo
*
decrypted_frame_info
)
;
void
(
*
DeliverSamples
)
(
PP_Instance
instance
PP_Resource
audio_frames
const
struct
PP_DecryptedSampleInfo
*
decrypted_sample_info
)
;
}
;
typedef
struct
PPB_ContentDecryptor_Private_0_14
PPB_ContentDecryptor_Private
;
struct
PPB_DisplayColorProfile_Private_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsDisplayColorProfile
)
(
PP_Resource
resource
)
;
int32_t
(
*
GetColorProfile
)
(
PP_Resource
display_color_profile_res
struct
PP_ArrayOutput
color_profile
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
RegisterColorProfileChangeCallback
)
(
PP_Resource
display_color_profile_res
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_DisplayColorProfile_Private_0_1
PPB_DisplayColorProfile_Private
;
struct
PPB_Ext_CrxFileSystem_Private_0_1
{
int32_t
(
*
Open
)
(
PP_Instance
instance
PP_Resource
*
file_system
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_Ext_CrxFileSystem_Private_0_1
PPB_Ext_CrxFileSystem_Private
;
#
include
"
ppapi
/
c
/
private
/
pp_file_handle
.
h
"
struct
PPB_FileIO_Private_0_1
{
int32_t
(
*
RequestOSFileHandle
)
(
PP_Resource
file_io
PP_FileHandle
*
handle
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_FileIO_Private_0_1
PPB_FileIO_Private
;
struct
PPB_FileRefPrivate_0_1
{
struct
PP_Var
(
*
GetAbsolutePath
)
(
PP_Resource
file_ref
)
;
}
;
typedef
struct
PPB_FileRefPrivate_0_1
PPB_FileRefPrivate
;
struct
PPB_Find_Private_0_3
{
void
(
*
SetPluginToHandleFindRequests
)
(
PP_Instance
instance
)
;
void
(
*
NumberOfFindResultsChanged
)
(
PP_Instance
instance
int32_t
total
PP_Bool
final_result
)
;
void
(
*
SelectedFindResultChanged
)
(
PP_Instance
instance
int32_t
index
)
;
void
(
*
SetTickmarks
)
(
PP_Instance
instance
const
struct
PP_Rect
tickmarks
[
]
uint32_t
count
)
;
}
;
typedef
struct
PPB_Find_Private_0_3
PPB_Find_Private
;
typedef
enum
{
PP_FLASHLSORESTRICTIONS_NONE
=
1
PP_FLASHLSORESTRICTIONS_BLOCK
=
2
PP_FLASHLSORESTRICTIONS_IN_MEMORY
=
3
}
PP_FlashLSORestrictions
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_FlashLSORestrictions
4
)
;
typedef
enum
{
PP_FLASHSETTING_3DENABLED
=
1
PP_FLASHSETTING_INCOGNITO
=
2
PP_FLASHSETTING_STAGE3DENABLED
=
3
PP_FLASHSETTING_LANGUAGE
=
4
PP_FLASHSETTING_NUMCORES
=
5
PP_FLASHSETTING_LSORESTRICTIONS
=
6
PP_FLASHSETTING_STAGE3DBASELINEENABLED
=
7
}
PP_FlashSetting
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_FlashSetting
4
)
;
typedef
enum
{
PP_FLASHCRASHKEY_URL
=
1
PP_FLASHCRASHKEY_RESOURCE_URL
=
2
}
PP_FlashCrashKey
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_FlashCrashKey
4
)
;
struct
PPB_Flash_13_0
{
void
(
*
SetInstanceAlwaysOnTop
)
(
PP_Instance
instance
PP_Bool
on_top
)
;
PP_Bool
(
*
DrawGlyphs
)
(
PP_Instance
instance
PP_Resource
pp_image_data
const
struct
PP_BrowserFont_Trusted_Description
*
font_desc
uint32_t
color
const
struct
PP_Point
*
position
const
struct
PP_Rect
*
clip
const
float
transformation
[
3
]
[
3
]
PP_Bool
allow_subpixel_aa
uint32_t
glyph_count
const
uint16_t
glyph_indices
[
]
const
struct
PP_Point
glyph_advances
[
]
)
;
struct
PP_Var
(
*
GetProxyForURL
)
(
PP_Instance
instance
const
char
*
url
)
;
int32_t
(
*
Navigate
)
(
PP_Resource
request_info
const
char
*
target
PP_Bool
from_user_action
)
;
double
(
*
GetLocalTimeZoneOffset
)
(
PP_Instance
instance
PP_Time
t
)
;
struct
PP_Var
(
*
GetCommandLineArgs
)
(
PP_Module
module
)
;
void
(
*
PreloadFontWin
)
(
const
void
*
logfontw
)
;
PP_Bool
(
*
IsRectTopmost
)
(
PP_Instance
instance
const
struct
PP_Rect
*
rect
)
;
void
(
*
UpdateActivity
)
(
PP_Instance
instance
)
;
struct
PP_Var
(
*
GetSetting
)
(
PP_Instance
instance
PP_FlashSetting
setting
)
;
PP_Bool
(
*
SetCrashData
)
(
PP_Instance
instance
PP_FlashCrashKey
key
struct
PP_Var
value
)
;
int32_t
(
*
EnumerateVideoCaptureDevices
)
(
PP_Instance
instance
PP_Resource
video_capture
struct
PP_ArrayOutput
devices
)
;
}
;
typedef
struct
PPB_Flash_13_0
PPB_Flash
;
struct
PPB_Flash_12_4
{
void
(
*
SetInstanceAlwaysOnTop
)
(
PP_Instance
instance
PP_Bool
on_top
)
;
PP_Bool
(
*
DrawGlyphs
)
(
PP_Instance
instance
PP_Resource
pp_image_data
const
struct
PP_BrowserFont_Trusted_Description
*
font_desc
uint32_t
color
const
struct
PP_Point
*
position
const
struct
PP_Rect
*
clip
const
float
transformation
[
3
]
[
3
]
PP_Bool
allow_subpixel_aa
uint32_t
glyph_count
const
uint16_t
glyph_indices
[
]
const
struct
PP_Point
glyph_advances
[
]
)
;
struct
PP_Var
(
*
GetProxyForURL
)
(
PP_Instance
instance
const
char
*
url
)
;
int32_t
(
*
Navigate
)
(
PP_Resource
request_info
const
char
*
target
PP_Bool
from_user_action
)
;
void
(
*
RunMessageLoop
)
(
PP_Instance
instance
)
;
void
(
*
QuitMessageLoop
)
(
PP_Instance
instance
)
;
double
(
*
GetLocalTimeZoneOffset
)
(
PP_Instance
instance
PP_Time
t
)
;
struct
PP_Var
(
*
GetCommandLineArgs
)
(
PP_Module
module
)
;
void
(
*
PreloadFontWin
)
(
const
void
*
logfontw
)
;
PP_Bool
(
*
IsRectTopmost
)
(
PP_Instance
instance
const
struct
PP_Rect
*
rect
)
;
int32_t
(
*
InvokePrinting
)
(
PP_Instance
instance
)
;
void
(
*
UpdateActivity
)
(
PP_Instance
instance
)
;
struct
PP_Var
(
*
GetDeviceID
)
(
PP_Instance
instance
)
;
int32_t
(
*
GetSettingInt
)
(
PP_Instance
instance
PP_FlashSetting
setting
)
;
struct
PP_Var
(
*
GetSetting
)
(
PP_Instance
instance
PP_FlashSetting
setting
)
;
}
;
struct
PPB_Flash_12_5
{
void
(
*
SetInstanceAlwaysOnTop
)
(
PP_Instance
instance
PP_Bool
on_top
)
;
PP_Bool
(
*
DrawGlyphs
)
(
PP_Instance
instance
PP_Resource
pp_image_data
const
struct
PP_BrowserFont_Trusted_Description
*
font_desc
uint32_t
color
const
struct
PP_Point
*
position
const
struct
PP_Rect
*
clip
const
float
transformation
[
3
]
[
3
]
PP_Bool
allow_subpixel_aa
uint32_t
glyph_count
const
uint16_t
glyph_indices
[
]
const
struct
PP_Point
glyph_advances
[
]
)
;
struct
PP_Var
(
*
GetProxyForURL
)
(
PP_Instance
instance
const
char
*
url
)
;
int32_t
(
*
Navigate
)
(
PP_Resource
request_info
const
char
*
target
PP_Bool
from_user_action
)
;
void
(
*
RunMessageLoop
)
(
PP_Instance
instance
)
;
void
(
*
QuitMessageLoop
)
(
PP_Instance
instance
)
;
double
(
*
GetLocalTimeZoneOffset
)
(
PP_Instance
instance
PP_Time
t
)
;
struct
PP_Var
(
*
GetCommandLineArgs
)
(
PP_Module
module
)
;
void
(
*
PreloadFontWin
)
(
const
void
*
logfontw
)
;
PP_Bool
(
*
IsRectTopmost
)
(
PP_Instance
instance
const
struct
PP_Rect
*
rect
)
;
int32_t
(
*
InvokePrinting
)
(
PP_Instance
instance
)
;
void
(
*
UpdateActivity
)
(
PP_Instance
instance
)
;
struct
PP_Var
(
*
GetDeviceID
)
(
PP_Instance
instance
)
;
int32_t
(
*
GetSettingInt
)
(
PP_Instance
instance
PP_FlashSetting
setting
)
;
struct
PP_Var
(
*
GetSetting
)
(
PP_Instance
instance
PP_FlashSetting
setting
)
;
PP_Bool
(
*
SetCrashData
)
(
PP_Instance
instance
PP_FlashCrashKey
key
struct
PP_Var
value
)
;
}
;
struct
PPB_Flash_12_6
{
void
(
*
SetInstanceAlwaysOnTop
)
(
PP_Instance
instance
PP_Bool
on_top
)
;
PP_Bool
(
*
DrawGlyphs
)
(
PP_Instance
instance
PP_Resource
pp_image_data
const
struct
PP_BrowserFont_Trusted_Description
*
font_desc
uint32_t
color
const
struct
PP_Point
*
position
const
struct
PP_Rect
*
clip
const
float
transformation
[
3
]
[
3
]
PP_Bool
allow_subpixel_aa
uint32_t
glyph_count
const
uint16_t
glyph_indices
[
]
const
struct
PP_Point
glyph_advances
[
]
)
;
struct
PP_Var
(
*
GetProxyForURL
)
(
PP_Instance
instance
const
char
*
url
)
;
int32_t
(
*
Navigate
)
(
PP_Resource
request_info
const
char
*
target
PP_Bool
from_user_action
)
;
void
(
*
RunMessageLoop
)
(
PP_Instance
instance
)
;
void
(
*
QuitMessageLoop
)
(
PP_Instance
instance
)
;
double
(
*
GetLocalTimeZoneOffset
)
(
PP_Instance
instance
PP_Time
t
)
;
struct
PP_Var
(
*
GetCommandLineArgs
)
(
PP_Module
module
)
;
void
(
*
PreloadFontWin
)
(
const
void
*
logfontw
)
;
PP_Bool
(
*
IsRectTopmost
)
(
PP_Instance
instance
const
struct
PP_Rect
*
rect
)
;
int32_t
(
*
InvokePrinting
)
(
PP_Instance
instance
)
;
void
(
*
UpdateActivity
)
(
PP_Instance
instance
)
;
struct
PP_Var
(
*
GetDeviceID
)
(
PP_Instance
instance
)
;
int32_t
(
*
GetSettingInt
)
(
PP_Instance
instance
PP_FlashSetting
setting
)
;
struct
PP_Var
(
*
GetSetting
)
(
PP_Instance
instance
PP_FlashSetting
setting
)
;
PP_Bool
(
*
SetCrashData
)
(
PP_Instance
instance
PP_FlashCrashKey
key
struct
PP_Var
value
)
;
int32_t
(
*
EnumerateVideoCaptureDevices
)
(
PP_Instance
instance
PP_Resource
video_capture
struct
PP_ArrayOutput
devices
)
;
}
;
typedef
enum
{
PP_FLASH_CLIPBOARD_TYPE_STANDARD
=
0
PP_FLASH_CLIPBOARD_TYPE_SELECTION
=
1
}
PP_Flash_Clipboard_Type
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_Flash_Clipboard_Type
4
)
;
typedef
enum
{
PP_FLASH_CLIPBOARD_FORMAT_INVALID
=
0
PP_FLASH_CLIPBOARD_FORMAT_PLAINTEXT
=
1
PP_FLASH_CLIPBOARD_FORMAT_HTML
=
2
PP_FLASH_CLIPBOARD_FORMAT_RTF
=
3
}
PP_Flash_Clipboard_Format
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_Flash_Clipboard_Format
4
)
;
struct
PPB_Flash_Clipboard_5_1
{
uint32_t
(
*
RegisterCustomFormat
)
(
PP_Instance
instance_id
const
char
*
format_name
)
;
PP_Bool
(
*
IsFormatAvailable
)
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
format
)
;
struct
PP_Var
(
*
ReadData
)
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
format
)
;
int32_t
(
*
WriteData
)
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
data_item_count
const
uint32_t
formats
[
]
const
struct
PP_Var
data_items
[
]
)
;
PP_Bool
(
*
GetSequenceNumber
)
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint64_t
*
sequence_number
)
;
}
;
typedef
struct
PPB_Flash_Clipboard_5_1
PPB_Flash_Clipboard
;
struct
PPB_Flash_Clipboard_4_0
{
PP_Bool
(
*
IsFormatAvailable
)
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
PP_Flash_Clipboard_Format
format
)
;
struct
PP_Var
(
*
ReadData
)
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
PP_Flash_Clipboard_Format
format
)
;
int32_t
(
*
WriteData
)
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
data_item_count
const
PP_Flash_Clipboard_Format
formats
[
]
const
struct
PP_Var
data_items
[
]
)
;
}
;
struct
PPB_Flash_Clipboard_5_0
{
uint32_t
(
*
RegisterCustomFormat
)
(
PP_Instance
instance_id
const
char
*
format_name
)
;
PP_Bool
(
*
IsFormatAvailable
)
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
format
)
;
struct
PP_Var
(
*
ReadData
)
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
format
)
;
int32_t
(
*
WriteData
)
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
data_item_count
const
uint32_t
formats
[
]
const
struct
PP_Var
data_items
[
]
)
;
}
;
struct
PPB_Flash_DeviceID_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
int32_t
(
*
GetDeviceID
)
(
PP_Resource
device_id
struct
PP_Var
*
id
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_Flash_DeviceID_1_0
PPB_Flash_DeviceID
;
struct
PPB_Flash_DRM_1_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
int32_t
(
*
GetDeviceID
)
(
PP_Resource
drm
struct
PP_Var
*
id
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
GetHmonitor
)
(
PP_Resource
drm
int64_t
*
hmonitor
)
;
int32_t
(
*
GetVoucherFile
)
(
PP_Resource
drm
PP_Resource
*
file_ref
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
MonitorIsExternal
)
(
PP_Resource
drm
PP_Bool
*
is_external
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_Flash_DRM_1_1
PPB_Flash_DRM
;
struct
PPB_Flash_DRM_1_0
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
int32_t
(
*
GetDeviceID
)
(
PP_Resource
drm
struct
PP_Var
*
id
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
GetHmonitor
)
(
PP_Resource
drm
int64_t
*
hmonitor
)
;
int32_t
(
*
GetVoucherFile
)
(
PP_Resource
drm
PP_Resource
*
file_ref
struct
PP_CompletionCallback
callback
)
;
}
;
struct
PP_DirEntry_Dev
{
char
*
name
;
PP_Bool
is_dir
;
}
;
struct
PP_DirContents_Dev
{
int32_t
count
;
struct
PP_DirEntry_Dev
*
entries
;
}
;
struct
PPB_Flash_File_ModuleLocal_3_0
{
PP_Bool
(
*
CreateThreadAdapterForInstance
)
(
PP_Instance
instance
)
;
void
(
*
ClearThreadAdapterForInstance
)
(
PP_Instance
instance
)
;
int32_t
(
*
OpenFile
)
(
PP_Instance
instance
const
char
*
path
int32_t
mode
PP_FileHandle
*
file
)
;
int32_t
(
*
RenameFile
)
(
PP_Instance
instance
const
char
*
path_from
const
char
*
path_to
)
;
int32_t
(
*
DeleteFileOrDir
)
(
PP_Instance
instance
const
char
*
path
PP_Bool
recursive
)
;
int32_t
(
*
CreateDir
)
(
PP_Instance
instance
const
char
*
path
)
;
int32_t
(
*
QueryFile
)
(
PP_Instance
instance
const
char
*
path
struct
PP_FileInfo
*
info
)
;
int32_t
(
*
GetDirContents
)
(
PP_Instance
instance
const
char
*
path
struct
PP_DirContents_Dev
*
*
contents
)
;
void
(
*
FreeDirContents
)
(
PP_Instance
instance
const
struct
PP_DirContents_Dev
*
contents
)
;
int32_t
(
*
CreateTemporaryFile
)
(
PP_Instance
instance
PP_FileHandle
*
file
)
;
}
;
typedef
struct
PPB_Flash_File_ModuleLocal_3_0
PPB_Flash_File_ModuleLocal
;
struct
PPB_Flash_File_FileRef_2_0
{
int32_t
(
*
OpenFile
)
(
PP_Resource
file_ref_id
int32_t
mode
PP_FileHandle
*
file
)
;
int32_t
(
*
QueryFile
)
(
PP_Resource
file_ref_id
struct
PP_FileInfo
*
info
)
;
}
;
typedef
struct
PPB_Flash_File_FileRef_2_0
PPB_Flash_File_FileRef
;
struct
PPB_Flash_FontFile_0_2
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
const
struct
PP_BrowserFont_Trusted_Description
*
description
PP_PrivateFontCharset
charset
)
;
PP_Bool
(
*
IsFlashFontFile
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
GetFontTable
)
(
PP_Resource
font_file
uint32_t
table
void
*
output
uint32_t
*
output_length
)
;
PP_Bool
(
*
IsSupportedForWindows
)
(
void
)
;
}
;
typedef
struct
PPB_Flash_FontFile_0_2
PPB_Flash_FontFile
;
struct
PPB_Flash_FontFile_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
const
struct
PP_BrowserFont_Trusted_Description
*
description
PP_PrivateFontCharset
charset
)
;
PP_Bool
(
*
IsFlashFontFile
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
GetFontTable
)
(
PP_Resource
font_file
uint32_t
table
void
*
output
uint32_t
*
output_length
)
;
}
;
struct
PPB_FlashFullscreen_1_0
{
PP_Bool
(
*
IsFullscreen
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
SetFullscreen
)
(
PP_Instance
instance
PP_Bool
fullscreen
)
;
PP_Bool
(
*
GetScreenSize
)
(
PP_Instance
instance
struct
PP_Size
*
size
)
;
}
;
typedef
struct
PPB_FlashFullscreen_1_0
PPB_FlashFullscreen
;
struct
PPB_FlashFullscreen_0_1
{
PP_Bool
(
*
IsFullscreen
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
SetFullscreen
)
(
PP_Instance
instance
PP_Bool
fullscreen
)
;
PP_Bool
(
*
GetScreenSize
)
(
PP_Instance
instance
struct
PP_Size
*
size
)
;
}
;
typedef
enum
{
PP_FLASH_MENUITEM_TYPE_NORMAL
=
0
PP_FLASH_MENUITEM_TYPE_CHECKBOX
=
1
PP_FLASH_MENUITEM_TYPE_SEPARATOR
=
2
PP_FLASH_MENUITEM_TYPE_SUBMENU
=
3
}
PP_Flash_MenuItem_Type
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_Flash_MenuItem_Type
4
)
;
struct
PP_Flash_MenuItem
{
PP_Flash_MenuItem_Type
type
;
char
*
name
;
int32_t
id
;
PP_Bool
enabled
;
PP_Bool
checked
;
struct
PP_Flash_Menu
*
submenu
;
}
;
struct
PP_Flash_Menu
{
uint32_t
count
;
struct
PP_Flash_MenuItem
*
items
;
}
;
struct
PPB_Flash_Menu_0_2
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance_id
const
struct
PP_Flash_Menu
*
menu_data
)
;
PP_Bool
(
*
IsFlashMenu
)
(
PP_Resource
resource_id
)
;
int32_t
(
*
Show
)
(
PP_Resource
menu_id
const
struct
PP_Point
*
location
int32_t
*
selected_id
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_Flash_Menu_0_2
PPB_Flash_Menu
;
struct
PPB_Flash_MessageLoop_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsFlashMessageLoop
)
(
PP_Resource
resource
)
;
int32_t
(
*
Run
)
(
PP_Resource
flash_message_loop
)
;
void
(
*
Quit
)
(
PP_Resource
flash_message_loop
)
;
}
;
typedef
struct
PPB_Flash_MessageLoop_0_1
PPB_Flash_MessageLoop
;
struct
PPB_Flash_Print_1_0
{
void
(
*
InvokePrinting
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPB_Flash_Print_1_0
PPB_Flash_Print
;
typedef
enum
{
PP_NETADDRESSFAMILY_PRIVATE_UNSPECIFIED
=
0
PP_NETADDRESSFAMILY_PRIVATE_IPV4
=
1
PP_NETADDRESSFAMILY_PRIVATE_IPV6
=
2
}
PP_NetAddressFamily_Private
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_NetAddressFamily_Private
4
)
;
struct
PP_NetAddress_Private
{
uint32_t
size
;
int8_t
data
[
128
]
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_NetAddress_Private
132
)
;
struct
PPB_NetAddress_Private_1_1
{
PP_Bool
(
*
AreEqual
)
(
const
struct
PP_NetAddress_Private
*
addr1
const
struct
PP_NetAddress_Private
*
addr2
)
;
PP_Bool
(
*
AreHostsEqual
)
(
const
struct
PP_NetAddress_Private
*
addr1
const
struct
PP_NetAddress_Private
*
addr2
)
;
struct
PP_Var
(
*
Describe
)
(
PP_Module
module
const
struct
PP_NetAddress_Private
*
addr
PP_Bool
include_port
)
;
PP_Bool
(
*
ReplacePort
)
(
const
struct
PP_NetAddress_Private
*
src_addr
uint16_t
port
struct
PP_NetAddress_Private
*
addr_out
)
;
void
(
*
GetAnyAddress
)
(
PP_Bool
is_ipv6
struct
PP_NetAddress_Private
*
addr
)
;
PP_NetAddressFamily_Private
(
*
GetFamily
)
(
const
struct
PP_NetAddress_Private
*
addr
)
;
uint16_t
(
*
GetPort
)
(
const
struct
PP_NetAddress_Private
*
addr
)
;
PP_Bool
(
*
GetAddress
)
(
const
struct
PP_NetAddress_Private
*
addr
void
*
address
uint16_t
address_size
)
;
uint32_t
(
*
GetScopeID
)
(
const
struct
PP_NetAddress_Private
*
addr
)
;
void
(
*
CreateFromIPv4Address
)
(
const
uint8_t
ip
[
4
]
uint16_t
port
struct
PP_NetAddress_Private
*
addr_out
)
;
void
(
*
CreateFromIPv6Address
)
(
const
uint8_t
ip
[
16
]
uint32_t
scope_id
uint16_t
port
struct
PP_NetAddress_Private
*
addr_out
)
;
}
;
typedef
struct
PPB_NetAddress_Private_1_1
PPB_NetAddress_Private
;
struct
PPB_NetAddress_Private_0_1
{
PP_Bool
(
*
AreEqual
)
(
const
struct
PP_NetAddress_Private
*
addr1
const
struct
PP_NetAddress_Private
*
addr2
)
;
PP_Bool
(
*
AreHostsEqual
)
(
const
struct
PP_NetAddress_Private
*
addr1
const
struct
PP_NetAddress_Private
*
addr2
)
;
struct
PP_Var
(
*
Describe
)
(
PP_Module
module
const
struct
PP_NetAddress_Private
*
addr
PP_Bool
include_port
)
;
PP_Bool
(
*
ReplacePort
)
(
const
struct
PP_NetAddress_Private
*
src_addr
uint16_t
port
struct
PP_NetAddress_Private
*
addr_out
)
;
void
(
*
GetAnyAddress
)
(
PP_Bool
is_ipv6
struct
PP_NetAddress_Private
*
addr
)
;
}
;
struct
PPB_NetAddress_Private_1_0
{
PP_Bool
(
*
AreEqual
)
(
const
struct
PP_NetAddress_Private
*
addr1
const
struct
PP_NetAddress_Private
*
addr2
)
;
PP_Bool
(
*
AreHostsEqual
)
(
const
struct
PP_NetAddress_Private
*
addr1
const
struct
PP_NetAddress_Private
*
addr2
)
;
struct
PP_Var
(
*
Describe
)
(
PP_Module
module
const
struct
PP_NetAddress_Private
*
addr
PP_Bool
include_port
)
;
PP_Bool
(
*
ReplacePort
)
(
const
struct
PP_NetAddress_Private
*
src_addr
uint16_t
port
struct
PP_NetAddress_Private
*
addr_out
)
;
void
(
*
GetAnyAddress
)
(
PP_Bool
is_ipv6
struct
PP_NetAddress_Private
*
addr
)
;
PP_NetAddressFamily_Private
(
*
GetFamily
)
(
const
struct
PP_NetAddress_Private
*
addr
)
;
uint16_t
(
*
GetPort
)
(
const
struct
PP_NetAddress_Private
*
addr
)
;
PP_Bool
(
*
GetAddress
)
(
const
struct
PP_NetAddress_Private
*
addr
void
*
address
uint16_t
address_size
)
;
}
;
typedef
enum
{
PP_HOST_RESOLVER_PRIVATE_FLAGS_CANONNAME
=
1
<
<
0
PP_HOST_RESOLVER_PRIVATE_FLAGS_LOOPBACK_ONLY
=
1
<
<
1
}
PP_HostResolver_Private_Flags
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_HostResolver_Private_Flags
4
)
;
struct
PP_HostResolver_Private_Hint
{
PP_NetAddressFamily_Private
family
;
int32_t
flags
;
}
;
PP_COMPILE_ASSERT_STRUCT_SIZE_IN_BYTES
(
PP_HostResolver_Private_Hint
8
)
;
struct
PPB_HostResolver_Private_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsHostResolver
)
(
PP_Resource
resource
)
;
int32_t
(
*
Resolve
)
(
PP_Resource
host_resolver
const
char
*
host
uint16_t
port
const
struct
PP_HostResolver_Private_Hint
*
hint
struct
PP_CompletionCallback
callback
)
;
struct
PP_Var
(
*
GetCanonicalName
)
(
PP_Resource
host_resolver
)
;
uint32_t
(
*
GetSize
)
(
PP_Resource
host_resolver
)
;
PP_Bool
(
*
GetNetAddress
)
(
PP_Resource
host_resolver
uint32_t
index
struct
PP_NetAddress_Private
*
addr
)
;
}
;
typedef
struct
PPB_HostResolver_Private_0_1
PPB_HostResolver_Private
;
typedef
enum
{
PP_EXTERNAL_PLUGIN_OK
=
0
PP_EXTERNAL_PLUGIN_FAILED
=
1
PP_EXTERNAL_PLUGIN_ERROR_MODULE
=
2
PP_EXTERNAL_PLUGIN_ERROR_INSTANCE
=
3
}
PP_ExternalPluginResult
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_ExternalPluginResult
4
)
;
struct
PPB_Instance_Private_0_1
{
struct
PP_Var
(
*
GetWindowObject
)
(
PP_Instance
instance
)
;
struct
PP_Var
(
*
GetOwnerElementObject
)
(
PP_Instance
instance
)
;
struct
PP_Var
(
*
ExecuteScript
)
(
PP_Instance
instance
struct
PP_Var
script
struct
PP_Var
*
exception
)
;
}
;
typedef
struct
PPB_Instance_Private_0_1
PPB_Instance_Private
;
typedef
enum
{
PP_ISOLATEDFILESYSTEMTYPE_PRIVATE_INVALID
=
0
PP_ISOLATEDFILESYSTEMTYPE_PRIVATE_CRX
=
1
PP_ISOLATEDFILESYSTEMTYPE_PRIVATE_PLUGINPRIVATE
=
2
}
PP_IsolatedFileSystemType_Private
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_IsolatedFileSystemType_Private
4
)
;
struct
PPB_IsolatedFileSystem_Private_0_2
{
int32_t
(
*
Open
)
(
PP_Instance
instance
PP_IsolatedFileSystemType_Private
type
PP_Resource
*
file_system
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_IsolatedFileSystem_Private_0_2
PPB_IsolatedFileSystem_Private
;
typedef
enum
{
PP_OUTPUT_PROTECTION_METHOD_PRIVATE_NONE
=
0
PP_OUTPUT_PROTECTION_METHOD_PRIVATE_HDCP
=
1
<
<
0
}
PP_OutputProtectionMethod_Private
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_OutputProtectionMethod_Private
4
)
;
typedef
enum
{
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_NONE
=
0
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_UNKNOWN
=
1
<
<
0
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_INTERNAL
=
1
<
<
1
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_VGA
=
1
<
<
2
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_HDMI
=
1
<
<
3
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_DVI
=
1
<
<
4
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_DISPLAYPORT
=
1
<
<
5
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_NETWORK
=
1
<
<
6
}
PP_OutputProtectionLinkType_Private
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_OutputProtectionLinkType_Private
4
)
;
struct
PPB_OutputProtection_Private_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsOutputProtection
)
(
PP_Resource
resource
)
;
int32_t
(
*
QueryStatus
)
(
PP_Resource
resource
uint32_t
*
link_mask
uint32_t
*
protection_mask
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
EnableProtection
)
(
PP_Resource
resource
uint32_t
desired_protection_mask
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_OutputProtection_Private_0_1
PPB_OutputProtection_Private
;
typedef
enum
{
PP_PDFFEATURE_HIDPI
=
0
PP_PDFFEATURE_PRINTING
=
1
}
PP_PDFFeature
;
struct
PP_PrivateFontFileDescription
{
char
*
face
;
uint32_t
weight
;
PP_Bool
italic
;
}
;
struct
PP_PrivateFindResult
{
int32_t
start_index
;
int32_t
length
;
}
;
struct
PP_PrivateAccessibilityViewportInfo
{
double
zoom
;
struct
PP_Point
scroll
;
struct
PP_Point
offset
;
}
;
struct
PP_PrivateAccessibilityDocInfo
{
uint32_t
page_count
;
PP_Bool
text_accessible
;
PP_Bool
text_copyable
;
}
;
typedef
enum
{
PP_PRIVATEDIRECTION_NONE
=
0
PP_PRIVATEDIRECTION_LTR
=
1
PP_PRIVATEDIRECTION_RTL
=
2
PP_PRIVATEDIRECTION_TTB
=
3
PP_PRIVATEDIRECTION_BTT
=
4
PP_PRIVATEDIRECTION_LAST
=
PP_PRIVATEDIRECTION_BTT
}
PP_PrivateDirection
;
struct
PP_PrivateAccessibilityPageInfo
{
uint32_t
page_index
;
struct
PP_Rect
bounds
;
uint32_t
text_run_count
;
uint32_t
char_count
;
}
;
struct
PP_PrivateAccessibilityTextRunInfo
{
uint32_t
len
;
double
font_size
;
struct
PP_FloatRect
bounds
;
PP_PrivateDirection
direction
;
}
;
struct
PP_PrivateAccessibilityCharInfo
{
uint32_t
unicode_character
;
double
char_width
;
}
;
struct
PPB_PDF_0_1
{
PP_Resource
(
*
GetFontFileWithFallback
)
(
PP_Instance
instance
const
struct
PP_BrowserFont_Trusted_Description
*
description
PP_PrivateFontCharset
charset
)
;
PP_Bool
(
*
GetFontTableForPrivateFontFile
)
(
PP_Resource
font_file
uint32_t
table
void
*
output
uint32_t
*
output_length
)
;
void
(
*
SearchString
)
(
PP_Instance
instance
const
void
*
str
const
void
*
term
PP_Bool
case_sensitive
struct
PP_PrivateFindResult
*
*
results
int32_t
*
count
)
;
void
(
*
DidStartLoading
)
(
PP_Instance
instance
)
;
void
(
*
DidStopLoading
)
(
PP_Instance
instance
)
;
void
(
*
SetContentRestriction
)
(
PP_Instance
instance
int32_t
restrictions
)
;
void
(
*
UserMetricsRecordAction
)
(
PP_Instance
instance
struct
PP_Var
action
)
;
void
(
*
HasUnsupportedFeature
)
(
PP_Instance
instance
)
;
void
(
*
SaveAs
)
(
PP_Instance
instance
)
;
void
(
*
Print
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsFeatureEnabled
)
(
PP_Instance
instance
PP_PDFFeature
feature
)
;
void
(
*
SetSelectedText
)
(
PP_Instance
instance
const
char
*
selected_text
)
;
void
(
*
SetLinkUnderCursor
)
(
PP_Instance
instance
const
char
*
url
)
;
void
(
*
GetV8ExternalSnapshotData
)
(
PP_Instance
instance
void
*
*
natives_data_out
int32_t
*
natives_size_out
void
*
*
snapshot_data_out
int32_t
*
snapshot_size_out
)
;
void
(
*
SetAccessibilityViewportInfo
)
(
PP_Instance
instance
const
struct
PP_PrivateAccessibilityViewportInfo
*
viewport_info
)
;
void
(
*
SetAccessibilityDocInfo
)
(
PP_Instance
instance
const
struct
PP_PrivateAccessibilityDocInfo
*
doc_info
)
;
void
(
*
SetAccessibilityPageInfo
)
(
PP_Instance
instance
const
struct
PP_PrivateAccessibilityPageInfo
*
page_info
const
struct
PP_PrivateAccessibilityTextRunInfo
text_runs
[
]
const
struct
PP_PrivateAccessibilityCharInfo
chars
[
]
)
;
void
(
*
SetCrashData
)
(
PP_Instance
instance
const
char
*
pdf_url
const
char
*
top_level_url
)
;
}
;
typedef
struct
PPB_PDF_0_1
PPB_PDF
;
struct
PPB_PlatformVerification_Private_0_2
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsPlatformVerification
)
(
PP_Resource
resource
)
;
int32_t
(
*
ChallengePlatform
)
(
PP_Resource
instance
struct
PP_Var
service_id
struct
PP_Var
challenge
struct
PP_Var
*
signed_data
struct
PP_Var
*
signed_data_signature
struct
PP_Var
*
platform_key_certificate
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_PlatformVerification_Private_0_2
PPB_PlatformVerification_Private
;
struct
PPB_TCPServerSocket_Private_0_2
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsTCPServerSocket
)
(
PP_Resource
resource
)
;
int32_t
(
*
Listen
)
(
PP_Resource
tcp_server_socket
const
struct
PP_NetAddress_Private
*
addr
int32_t
backlog
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Accept
)
(
PP_Resource
tcp_server_socket
PP_Resource
*
tcp_socket
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetLocalAddress
)
(
PP_Resource
tcp_server_socket
struct
PP_NetAddress_Private
*
addr
)
;
void
(
*
StopListening
)
(
PP_Resource
tcp_server_socket
)
;
}
;
typedef
struct
PPB_TCPServerSocket_Private_0_2
PPB_TCPServerSocket_Private
;
struct
PPB_TCPServerSocket_Private_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsTCPServerSocket
)
(
PP_Resource
resource
)
;
int32_t
(
*
Listen
)
(
PP_Resource
tcp_server_socket
const
struct
PP_NetAddress_Private
*
addr
int32_t
backlog
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Accept
)
(
PP_Resource
tcp_server_socket
PP_Resource
*
tcp_socket
struct
PP_CompletionCallback
callback
)
;
void
(
*
StopListening
)
(
PP_Resource
tcp_server_socket
)
;
}
;
typedef
enum
{
PP_TCPSOCKETOPTION_PRIVATE_INVALID
=
0
PP_TCPSOCKETOPTION_PRIVATE_NO_DELAY
=
1
}
PP_TCPSocketOption_Private
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_TCPSocketOption_Private
4
)
;
struct
PPB_TCPSocket_Private_0_5
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsTCPSocket
)
(
PP_Resource
resource
)
;
int32_t
(
*
Connect
)
(
PP_Resource
tcp_socket
const
char
*
host
uint16_t
port
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
ConnectWithNetAddress
)
(
PP_Resource
tcp_socket
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
GetLocalAddress
)
(
PP_Resource
tcp_socket
struct
PP_NetAddress_Private
*
local_addr
)
;
PP_Bool
(
*
GetRemoteAddress
)
(
PP_Resource
tcp_socket
struct
PP_NetAddress_Private
*
remote_addr
)
;
int32_t
(
*
SSLHandshake
)
(
PP_Resource
tcp_socket
const
char
*
server_name
uint16_t
server_port
struct
PP_CompletionCallback
callback
)
;
PP_Resource
(
*
GetServerCertificate
)
(
PP_Resource
tcp_socket
)
;
PP_Bool
(
*
AddChainBuildingCertificate
)
(
PP_Resource
tcp_socket
PP_Resource
certificate
PP_Bool
is_trusted
)
;
int32_t
(
*
Read
)
(
PP_Resource
tcp_socket
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Write
)
(
PP_Resource
tcp_socket
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
;
void
(
*
Disconnect
)
(
PP_Resource
tcp_socket
)
;
int32_t
(
*
SetOption
)
(
PP_Resource
tcp_socket
PP_TCPSocketOption_Private
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_TCPSocket_Private_0_5
PPB_TCPSocket_Private
;
struct
PPB_TCPSocket_Private_0_3
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsTCPSocket
)
(
PP_Resource
resource
)
;
int32_t
(
*
Connect
)
(
PP_Resource
tcp_socket
const
char
*
host
uint16_t
port
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
ConnectWithNetAddress
)
(
PP_Resource
tcp_socket
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
GetLocalAddress
)
(
PP_Resource
tcp_socket
struct
PP_NetAddress_Private
*
local_addr
)
;
PP_Bool
(
*
GetRemoteAddress
)
(
PP_Resource
tcp_socket
struct
PP_NetAddress_Private
*
remote_addr
)
;
int32_t
(
*
SSLHandshake
)
(
PP_Resource
tcp_socket
const
char
*
server_name
uint16_t
server_port
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Read
)
(
PP_Resource
tcp_socket
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Write
)
(
PP_Resource
tcp_socket
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
;
void
(
*
Disconnect
)
(
PP_Resource
tcp_socket
)
;
}
;
struct
PPB_TCPSocket_Private_0_4
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsTCPSocket
)
(
PP_Resource
resource
)
;
int32_t
(
*
Connect
)
(
PP_Resource
tcp_socket
const
char
*
host
uint16_t
port
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
ConnectWithNetAddress
)
(
PP_Resource
tcp_socket
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
GetLocalAddress
)
(
PP_Resource
tcp_socket
struct
PP_NetAddress_Private
*
local_addr
)
;
PP_Bool
(
*
GetRemoteAddress
)
(
PP_Resource
tcp_socket
struct
PP_NetAddress_Private
*
remote_addr
)
;
int32_t
(
*
SSLHandshake
)
(
PP_Resource
tcp_socket
const
char
*
server_name
uint16_t
server_port
struct
PP_CompletionCallback
callback
)
;
PP_Resource
(
*
GetServerCertificate
)
(
PP_Resource
tcp_socket
)
;
PP_Bool
(
*
AddChainBuildingCertificate
)
(
PP_Resource
tcp_socket
PP_Resource
certificate
PP_Bool
is_trusted
)
;
int32_t
(
*
Read
)
(
PP_Resource
tcp_socket
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
Write
)
(
PP_Resource
tcp_socket
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
;
void
(
*
Disconnect
)
(
PP_Resource
tcp_socket
)
;
}
;
struct
PPB_Testing_Private_1_0
{
PP_Bool
(
*
ReadImageData
)
(
PP_Resource
device_context_2d
PP_Resource
image
const
struct
PP_Point
*
top_left
)
;
void
(
*
RunMessageLoop
)
(
PP_Instance
instance
)
;
void
(
*
QuitMessageLoop
)
(
PP_Instance
instance
)
;
uint32_t
(
*
GetLiveObjectsForInstance
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsOutOfProcess
)
(
void
)
;
void
(
*
PostPowerSaverStatus
)
(
PP_Instance
instance
)
;
void
(
*
SubscribeToPowerSaverNotifications
)
(
PP_Instance
instance
)
;
void
(
*
SimulateInputEvent
)
(
PP_Instance
instance
PP_Resource
input_event
)
;
struct
PP_Var
(
*
GetDocumentURL
)
(
PP_Instance
instance
struct
PP_URLComponents_Dev
*
components
)
;
uint32_t
(
*
GetLiveVars
)
(
struct
PP_Var
live_vars
[
]
uint32_t
array_size
)
;
void
(
*
SetMinimumArrayBufferSizeForShmem
)
(
PP_Instance
instance
uint32_t
threshold
)
;
void
(
*
RunV8GC
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPB_Testing_Private_1_0
PPB_Testing_Private
;
typedef
enum
{
PP_UDPSOCKETFEATURE_PRIVATE_ADDRESS_REUSE
=
0
PP_UDPSOCKETFEATURE_PRIVATE_BROADCAST
=
1
PP_UDPSOCKETFEATURE_PRIVATE_COUNT
=
2
}
PP_UDPSocketFeature_Private
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_UDPSocketFeature_Private
4
)
;
struct
PPB_UDPSocket_Private_0_4
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance_id
)
;
PP_Bool
(
*
IsUDPSocket
)
(
PP_Resource
resource_id
)
;
int32_t
(
*
SetSocketFeature
)
(
PP_Resource
udp_socket
PP_UDPSocketFeature_Private
name
struct
PP_Var
value
)
;
int32_t
(
*
Bind
)
(
PP_Resource
udp_socket
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
GetBoundAddress
)
(
PP_Resource
udp_socket
struct
PP_NetAddress_Private
*
addr
)
;
int32_t
(
*
RecvFrom
)
(
PP_Resource
udp_socket
char
*
buffer
int32_t
num_bytes
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
GetRecvFromAddress
)
(
PP_Resource
udp_socket
struct
PP_NetAddress_Private
*
addr
)
;
int32_t
(
*
SendTo
)
(
PP_Resource
udp_socket
const
char
*
buffer
int32_t
num_bytes
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
udp_socket
)
;
}
;
typedef
struct
PPB_UDPSocket_Private_0_4
PPB_UDPSocket_Private
;
struct
PPB_UDPSocket_Private_0_2
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance_id
)
;
PP_Bool
(
*
IsUDPSocket
)
(
PP_Resource
resource_id
)
;
int32_t
(
*
Bind
)
(
PP_Resource
udp_socket
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
RecvFrom
)
(
PP_Resource
udp_socket
char
*
buffer
int32_t
num_bytes
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
GetRecvFromAddress
)
(
PP_Resource
udp_socket
struct
PP_NetAddress_Private
*
addr
)
;
int32_t
(
*
SendTo
)
(
PP_Resource
udp_socket
const
char
*
buffer
int32_t
num_bytes
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
udp_socket
)
;
}
;
struct
PPB_UDPSocket_Private_0_3
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance_id
)
;
PP_Bool
(
*
IsUDPSocket
)
(
PP_Resource
resource_id
)
;
int32_t
(
*
Bind
)
(
PP_Resource
udp_socket
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
GetBoundAddress
)
(
PP_Resource
udp_socket
struct
PP_NetAddress_Private
*
addr
)
;
int32_t
(
*
RecvFrom
)
(
PP_Resource
udp_socket
char
*
buffer
int32_t
num_bytes
struct
PP_CompletionCallback
callback
)
;
PP_Bool
(
*
GetRecvFromAddress
)
(
PP_Resource
udp_socket
struct
PP_NetAddress_Private
*
addr
)
;
int32_t
(
*
SendTo
)
(
PP_Resource
udp_socket
const
char
*
buffer
int32_t
num_bytes
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
udp_socket
)
;
}
;
struct
PPB_UMA_Private_0_3
{
void
(
*
HistogramCustomTimes
)
(
PP_Instance
instance
struct
PP_Var
name
int64_t
sample
int64_t
min
int64_t
max
uint32_t
bucket_count
)
;
void
(
*
HistogramCustomCounts
)
(
PP_Instance
instance
struct
PP_Var
name
int32_t
sample
int32_t
min
int32_t
max
uint32_t
bucket_count
)
;
void
(
*
HistogramEnumeration
)
(
PP_Instance
instance
struct
PP_Var
name
int32_t
sample
int32_t
boundary_value
)
;
int32_t
(
*
IsCrashReportingEnabled
)
(
PP_Instance
instance
struct
PP_CompletionCallback
callback
)
;
}
;
typedef
struct
PPB_UMA_Private_0_3
PPB_UMA_Private
;
struct
PPB_VideoDestination_Private_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsVideoDestination
)
(
PP_Resource
resource
)
;
int32_t
(
*
Open
)
(
PP_Resource
destination
struct
PP_Var
stream_url
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
PutFrame
)
(
PP_Resource
destination
const
struct
PP_VideoFrame_Private
*
frame
)
;
void
(
*
Close
)
(
PP_Resource
destination
)
;
}
;
typedef
struct
PPB_VideoDestination_Private_0_1
PPB_VideoDestination_Private
;
struct
PPB_VideoSource_Private_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsVideoSource
)
(
PP_Resource
resource
)
;
int32_t
(
*
Open
)
(
PP_Resource
source
struct
PP_Var
stream_url
struct
PP_CompletionCallback
callback
)
;
int32_t
(
*
GetFrame
)
(
PP_Resource
source
struct
PP_VideoFrame_Private
*
frame
struct
PP_CompletionCallback
callback
)
;
void
(
*
Close
)
(
PP_Resource
source
)
;
}
;
typedef
struct
PPB_VideoSource_Private_0_1
PPB_VideoSource_Private
;
typedef
enum
{
PP_X509CERTIFICATE_PRIVATE_ISSUER_COMMON_NAME
=
0
PP_X509CERTIFICATE_PRIVATE_ISSUER_LOCALITY_NAME
=
1
PP_X509CERTIFICATE_PRIVATE_ISSUER_STATE_OR_PROVINCE_NAME
=
2
PP_X509CERTIFICATE_PRIVATE_ISSUER_COUNTRY_NAME
=
3
PP_X509CERTIFICATE_PRIVATE_ISSUER_ORGANIZATION_NAME
=
4
PP_X509CERTIFICATE_PRIVATE_ISSUER_ORGANIZATION_UNIT_NAME
=
5
PP_X509CERTIFICATE_PRIVATE_ISSUER_UNIQUE_ID
=
6
PP_X509CERTIFICATE_PRIVATE_SUBJECT_COMMON_NAME
=
7
PP_X509CERTIFICATE_PRIVATE_SUBJECT_LOCALITY_NAME
=
8
PP_X509CERTIFICATE_PRIVATE_SUBJECT_STATE_OR_PROVINCE_NAME
=
9
PP_X509CERTIFICATE_PRIVATE_SUBJECT_COUNTRY_NAME
=
10
PP_X509CERTIFICATE_PRIVATE_SUBJECT_ORGANIZATION_NAME
=
11
PP_X509CERTIFICATE_PRIVATE_SUBJECT_ORGANIZATION_UNIT_NAME
=
12
PP_X509CERTIFICATE_PRIVATE_SUBJECT_UNIQUE_ID
=
13
PP_X509CERTIFICATE_PRIVATE_VERSION
=
14
PP_X509CERTIFICATE_PRIVATE_SERIAL_NUMBER
=
15
PP_X509CERTIFICATE_PRIVATE_SIGNATURE_ALGORITHM_OID
=
16
PP_X509CERTIFICATE_PRIVATE_SIGNATURE_ALGORITHM_PARAMATERS_RAW
=
17
PP_X509CERTIFICATE_PRIVATE_VALIDITY_NOT_BEFORE
=
18
PP_X509CERTIFICATE_PRIVATE_VALIDITY_NOT_AFTER
=
19
PP_X509CERTIFICATE_PRIVATE_SUBJECT_PUBLIC_KEY_ALGORITHM_OID
=
20
PP_X509CERTIFICATE_PRIVATE_SUBJECT_PUBLIC_KEY
=
21
PP_X509CERTIFICATE_PRIVATE_RAW
=
22
PP_X509CERTIFICATE_PRIVATE_ISSUER_DISTINGUISHED_NAME
=
23
PP_X509CERTIFICATE_PRIVATE_SUBJECT_DISTINGUISHED_NAME
=
24
}
PP_X509Certificate_Private_Field
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_X509Certificate_Private_Field
4
)
;
typedef
enum
{
PP_X509CERTIFICATE_PRIVATE_V1
=
0
PP_X509CERTIFICATE_PRIVATE_V2
=
1
PP_X509CERTIFICATE_PRIVATE_V3
=
2
}
PPB_X509Certificate_Private_Version
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PPB_X509Certificate_Private_Version
4
)
;
struct
PPB_X509Certificate_Private_0_1
{
PP_Resource
(
*
Create
)
(
PP_Instance
instance
)
;
PP_Bool
(
*
IsX509CertificatePrivate
)
(
PP_Resource
resource
)
;
PP_Bool
(
*
Initialize
)
(
PP_Resource
resource
const
char
*
bytes
uint32_t
length
)
;
struct
PP_Var
(
*
GetField
)
(
PP_Resource
resource
PP_X509Certificate_Private_Field
field
)
;
}
;
typedef
struct
PPB_X509Certificate_Private_0_1
PPB_X509Certificate_Private
;
struct
PPP_ContentDecryptor_Private_0_16
{
void
(
*
Initialize
)
(
PP_Instance
instance
uint32_t
promise_id
struct
PP_Var
key_system
PP_Bool
allow_distinctive_identifier
PP_Bool
allow_persistent_state
)
;
void
(
*
SetServerCertificate
)
(
PP_Instance
instance
uint32_t
promise_id
struct
PP_Var
server_certificate
)
;
void
(
*
CreateSessionAndGenerateRequest
)
(
PP_Instance
instance
uint32_t
promise_id
PP_SessionType
session_type
PP_InitDataType
init_data_type
struct
PP_Var
init_data
)
;
void
(
*
LoadSession
)
(
PP_Instance
instance
uint32_t
promise_id
PP_SessionType
session_type
struct
PP_Var
session_id
)
;
void
(
*
UpdateSession
)
(
PP_Instance
instance
uint32_t
promise_id
struct
PP_Var
session_id
struct
PP_Var
response
)
;
void
(
*
CloseSession
)
(
PP_Instance
instance
uint32_t
promise_id
struct
PP_Var
session_id
)
;
void
(
*
RemoveSession
)
(
PP_Instance
instance
uint32_t
promise_id
struct
PP_Var
session_id
)
;
void
(
*
Decrypt
)
(
PP_Instance
instance
PP_Resource
encrypted_block
const
struct
PP_EncryptedBlockInfo
*
encrypted_block_info
)
;
void
(
*
InitializeAudioDecoder
)
(
PP_Instance
instance
const
struct
PP_AudioDecoderConfig
*
decoder_config
PP_Resource
codec_extra_data
)
;
void
(
*
InitializeVideoDecoder
)
(
PP_Instance
instance
const
struct
PP_VideoDecoderConfig
*
decoder_config
PP_Resource
codec_extra_data
)
;
void
(
*
DeinitializeDecoder
)
(
PP_Instance
instance
PP_DecryptorStreamType
decoder_type
uint32_t
request_id
)
;
void
(
*
ResetDecoder
)
(
PP_Instance
instance
PP_DecryptorStreamType
decoder_type
uint32_t
request_id
)
;
void
(
*
DecryptAndDecode
)
(
PP_Instance
instance
PP_DecryptorStreamType
decoder_type
PP_Resource
encrypted_buffer
const
struct
PP_EncryptedBlockInfo
*
encrypted_block_info
)
;
}
;
typedef
struct
PPP_ContentDecryptor_Private_0_16
PPP_ContentDecryptor_Private
;
struct
PPP_Find_Private_0_3
{
PP_Bool
(
*
StartFind
)
(
PP_Instance
instance
const
char
*
text
PP_Bool
case_sensitive
)
;
void
(
*
SelectFindResult
)
(
PP_Instance
instance
PP_Bool
forward
)
;
void
(
*
StopFind
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPP_Find_Private_0_3
PPP_Find_Private
;
typedef
enum
{
PP_FLASH_BROWSEROPERATIONS_SETTINGTYPE_CAMERAMIC
=
0
PP_FLASH_BROWSEROPERATIONS_SETTINGTYPE_PEERNETWORKING
=
1
}
PP_Flash_BrowserOperations_SettingType
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_Flash_BrowserOperations_SettingType
4
)
;
typedef
enum
{
PP_FLASH_BROWSEROPERATIONS_PERMISSION_DEFAULT
=
0
PP_FLASH_BROWSEROPERATIONS_PERMISSION_ALLOW
=
1
PP_FLASH_BROWSEROPERATIONS_PERMISSION_BLOCK
=
2
PP_FLASH_BROWSEROPERATIONS_PERMISSION_ASK
=
3
}
PP_Flash_BrowserOperations_Permission
;
PP_COMPILE_ASSERT_SIZE_IN_BYTES
(
PP_Flash_BrowserOperations_Permission
4
)
;
struct
PP_Flash_BrowserOperations_SiteSetting
{
const
char
*
site
;
PP_Flash_BrowserOperations_Permission
permission
;
}
;
typedef
void
(
*
PPB_Flash_BrowserOperations_GetSettingsCallback
)
(
void
*
user_data
PP_Bool
success
PP_Flash_BrowserOperations_Permission
default_permission
uint32_t
site_count
const
struct
PP_Flash_BrowserOperations_SiteSetting
sites
[
]
)
;
struct
PPP_Flash_BrowserOperations_1_3
{
PP_Bool
(
*
ClearSiteData
)
(
const
char
*
plugin_data_path
const
char
*
site
uint64_t
flags
uint64_t
max_age
)
;
PP_Bool
(
*
DeauthorizeContentLicenses
)
(
const
char
*
plugin_data_path
)
;
void
(
*
GetPermissionSettings
)
(
const
char
*
plugin_data_path
PP_Flash_BrowserOperations_SettingType
setting_type
PPB_Flash_BrowserOperations_GetSettingsCallback
callback
void
*
user_data
)
;
PP_Bool
(
*
SetDefaultPermission
)
(
const
char
*
plugin_data_path
PP_Flash_BrowserOperations_SettingType
setting_type
PP_Flash_BrowserOperations_Permission
permission
PP_Bool
clear_site_specific
)
;
PP_Bool
(
*
SetSitePermission
)
(
const
char
*
plugin_data_path
PP_Flash_BrowserOperations_SettingType
setting_type
uint32_t
site_count
const
struct
PP_Flash_BrowserOperations_SiteSetting
sites
[
]
)
;
void
(
*
GetSitesWithData
)
(
const
char
*
plugin_data_path
char
*
*
*
sites
)
;
void
(
*
FreeSiteList
)
(
char
*
sites
[
]
)
;
}
;
typedef
struct
PPP_Flash_BrowserOperations_1_3
PPP_Flash_BrowserOperations
;
struct
PPP_Flash_BrowserOperations_1_0
{
PP_Bool
(
*
ClearSiteData
)
(
const
char
*
plugin_data_path
const
char
*
site
uint64_t
flags
uint64_t
max_age
)
;
}
;
struct
PPP_Flash_BrowserOperations_1_2
{
PP_Bool
(
*
ClearSiteData
)
(
const
char
*
plugin_data_path
const
char
*
site
uint64_t
flags
uint64_t
max_age
)
;
PP_Bool
(
*
DeauthorizeContentLicenses
)
(
const
char
*
plugin_data_path
)
;
void
(
*
GetPermissionSettings
)
(
const
char
*
plugin_data_path
PP_Flash_BrowserOperations_SettingType
setting_type
PPB_Flash_BrowserOperations_GetSettingsCallback
callback
void
*
user_data
)
;
PP_Bool
(
*
SetDefaultPermission
)
(
const
char
*
plugin_data_path
PP_Flash_BrowserOperations_SettingType
setting_type
PP_Flash_BrowserOperations_Permission
permission
PP_Bool
clear_site_specific
)
;
PP_Bool
(
*
SetSitePermission
)
(
const
char
*
plugin_data_path
PP_Flash_BrowserOperations_SettingType
setting_type
uint32_t
site_count
const
struct
PP_Flash_BrowserOperations_SiteSetting
sites
[
]
)
;
}
;
struct
PPP_Instance_Private_0_1
{
struct
PP_Var
(
*
GetInstanceObject
)
(
PP_Instance
instance
)
;
}
;
typedef
struct
PPP_Instance_Private_0_1
PPP_Instance_Private
;
#
include
"
ppapi
/
c
/
private
/
pp_file_handle
.
h
"
struct
PPP_PexeStreamHandler_1_0
{
void
(
*
DidCacheHit
)
(
void
*
user_data
PP_FileHandle
nexe_file_handle
)
;
void
(
*
DidCacheMiss
)
(
void
*
user_data
int64_t
expected_total_length
PP_FileHandle
temp_nexe_file
)
;
void
(
*
DidStreamData
)
(
void
*
user_data
const
void
*
data
int32_t
length
)
;
void
(
*
DidFinishStream
)
(
void
*
user_data
int32_t
pp_error
)
;
}
;
typedef
struct
PPP_PexeStreamHandler_1_0
PPP_PexeStreamHandler
;
#
include
"
host
/
rpc
.
h
"
#
include
"
json
/
json
.
cpp
"
using
namespace
std
;
using
namespace
JSON
;
const
string
ToString_PP_ArrayOutput_GetDataBuffer
(
const
PP_ArrayOutput_GetDataBuffer
&
v
)
;
void
FromJSON_PP_ArrayOutput_GetDataBuffer
(
JSONIterator
&
iterator
PP_ArrayOutput_GetDataBuffer
&
value
)
;
const
string
ToString_PP_ArrayOutput
(
const
PP_ArrayOutput
*
v
)
;
const
string
ToString_PP_ArrayOutput
(
const
PP_ArrayOutput
&
v
)
;
void
FromJSON_PP_ArrayOutput
(
JSONIterator
&
iterator
PP_ArrayOutput
&
value
)
;
const
string
ToString_PP_Bool
(
const
PP_Bool
*
v
)
;
const
string
ToString_PP_Bool
(
const
PP_Bool
&
v
)
;
void
FromJSON_PP_Bool
(
JSONIterator
&
iterator
PP_Bool
&
value
)
;
const
string
ToString_PP_VideoProfile
(
const
PP_VideoProfile
*
v
)
;
const
string
ToString_PP_VideoProfile
(
const
PP_VideoProfile
&
v
)
;
void
FromJSON_PP_VideoProfile
(
JSONIterator
&
iterator
PP_VideoProfile
&
value
)
;
const
string
ToString_PP_AudioProfile
(
const
PP_AudioProfile
*
v
)
;
const
string
ToString_PP_AudioProfile
(
const
PP_AudioProfile
&
v
)
;
void
FromJSON_PP_AudioProfile
(
JSONIterator
&
iterator
PP_AudioProfile
&
value
)
;
const
string
ToString_PP_HardwareAcceleration
(
const
PP_HardwareAcceleration
*
v
)
;
const
string
ToString_PP_HardwareAcceleration
(
const
PP_HardwareAcceleration
&
v
)
;
void
FromJSON_PP_HardwareAcceleration
(
JSONIterator
&
iterator
PP_HardwareAcceleration
&
value
)
;
const
string
ToString_PP_VideoPicture
(
const
PP_VideoPicture
*
v
)
;
const
string
ToString_PP_VideoPicture
(
const
PP_VideoPicture
&
v
)
;
void
FromJSON_PP_VideoPicture
(
JSONIterator
&
iterator
PP_VideoPicture
&
value
)
;
const
string
ToString_PP_VideoPicture_0_1
(
const
PP_VideoPicture_0_1
*
v
)
;
const
string
ToString_PP_VideoPicture_0_1
(
const
PP_VideoPicture_0_1
&
v
)
;
void
FromJSON_PP_VideoPicture_0_1
(
JSONIterator
&
iterator
PP_VideoPicture_0_1
&
value
)
;
const
string
ToString_PP_VideoProfileDescription
(
const
PP_VideoProfileDescription
*
v
)
;
const
string
ToString_PP_VideoProfileDescription
(
const
PP_VideoProfileDescription
&
v
)
;
void
FromJSON_PP_VideoProfileDescription
(
JSONIterator
&
iterator
PP_VideoProfileDescription
&
value
)
;
const
string
ToString_PP_VideoProfileDescription_0_1
(
const
PP_VideoProfileDescription_0_1
*
v
)
;
const
string
ToString_PP_VideoProfileDescription_0_1
(
const
PP_VideoProfileDescription_0_1
&
v
)
;
void
FromJSON_PP_VideoProfileDescription_0_1
(
JSONIterator
&
iterator
PP_VideoProfileDescription_0_1
&
value
)
;
const
string
ToString_PP_AudioProfileDescription
(
const
PP_AudioProfileDescription
*
v
)
;
const
string
ToString_PP_AudioProfileDescription
(
const
PP_AudioProfileDescription
&
v
)
;
void
FromJSON_PP_AudioProfileDescription
(
JSONIterator
&
iterator
PP_AudioProfileDescription
&
value
)
;
const
string
ToString_PP_BitstreamBuffer
(
const
PP_BitstreamBuffer
*
v
)
;
const
string
ToString_PP_BitstreamBuffer
(
const
PP_BitstreamBuffer
&
v
)
;
void
FromJSON_PP_BitstreamBuffer
(
JSONIterator
&
iterator
PP_BitstreamBuffer
&
value
)
;
const
string
ToString_PP_AudioBitstreamBuffer
(
const
PP_AudioBitstreamBuffer
*
v
)
;
const
string
ToString_PP_AudioBitstreamBuffer
(
const
PP_AudioBitstreamBuffer
&
v
)
;
void
FromJSON_PP_AudioBitstreamBuffer
(
JSONIterator
&
iterator
PP_AudioBitstreamBuffer
&
value
)
;
const
string
ToString_PP_CompletionCallback_Func
(
const
PP_CompletionCallback_Func
&
v
)
;
void
FromJSON_PP_CompletionCallback_Func
(
JSONIterator
&
iterator
PP_CompletionCallback_Func
&
value
)
;
const
string
ToString_PP_CompletionCallback_Flag
(
const
PP_CompletionCallback_Flag
*
v
)
;
const
string
ToString_PP_CompletionCallback_Flag
(
const
PP_CompletionCallback_Flag
&
v
)
;
void
FromJSON_PP_CompletionCallback_Flag
(
JSONIterator
&
iterator
PP_CompletionCallback_Flag
&
value
)
;
const
string
ToString_PP_CompletionCallback
(
const
PP_CompletionCallback
*
v
)
;
const
string
ToString_PP_CompletionCallback
(
const
PP_CompletionCallback
&
v
)
;
void
FromJSON_PP_CompletionCallback
(
JSONIterator
&
iterator
PP_CompletionCallback
&
value
)
;
const
string
ToString_PP_DirectoryEntry
(
const
PP_DirectoryEntry
*
v
)
;
const
string
ToString_PP_DirectoryEntry
(
const
PP_DirectoryEntry
&
v
)
;
void
FromJSON_PP_DirectoryEntry
(
JSONIterator
&
iterator
PP_DirectoryEntry
&
value
)
;
const
string
ToString_PP_FileType
(
const
PP_FileType
*
v
)
;
const
string
ToString_PP_FileType
(
const
PP_FileType
&
v
)
;
void
FromJSON_PP_FileType
(
JSONIterator
&
iterator
PP_FileType
&
value
)
;
const
string
ToString_PP_FileSystemType
(
const
PP_FileSystemType
*
v
)
;
const
string
ToString_PP_FileSystemType
(
const
PP_FileSystemType
&
v
)
;
void
FromJSON_PP_FileSystemType
(
JSONIterator
&
iterator
PP_FileSystemType
&
value
)
;
const
string
ToString_PP_FileInfo
(
const
PP_FileInfo
*
v
)
;
const
string
ToString_PP_FileInfo
(
const
PP_FileInfo
&
v
)
;
void
FromJSON_PP_FileInfo
(
JSONIterator
&
iterator
PP_FileInfo
&
value
)
;
const
string
ToString_PP_Graphics3DAttrib
(
const
PP_Graphics3DAttrib
*
v
)
;
const
string
ToString_PP_Graphics3DAttrib
(
const
PP_Graphics3DAttrib
&
v
)
;
void
FromJSON_PP_Graphics3DAttrib
(
JSONIterator
&
iterator
PP_Graphics3DAttrib
&
value
)
;
const
string
ToString_PP_InputEvent_Key
(
const
PP_InputEvent_Key
*
v
)
;
const
string
ToString_PP_InputEvent_Key
(
const
PP_InputEvent_Key
&
v
)
;
void
FromJSON_PP_InputEvent_Key
(
JSONIterator
&
iterator
PP_InputEvent_Key
&
value
)
;
const
string
ToString_PP_InputEvent_Character
(
const
PP_InputEvent_Character
*
v
)
;
const
string
ToString_PP_InputEvent_Character
(
const
PP_InputEvent_Character
&
v
)
;
void
FromJSON_PP_InputEvent_Character
(
JSONIterator
&
iterator
PP_InputEvent_Character
&
value
)
;
const
string
ToString_PP_InputEvent_Mouse
(
const
PP_InputEvent_Mouse
*
v
)
;
const
string
ToString_PP_InputEvent_Mouse
(
const
PP_InputEvent_Mouse
&
v
)
;
void
FromJSON_PP_InputEvent_Mouse
(
JSONIterator
&
iterator
PP_InputEvent_Mouse
&
value
)
;
const
string
ToString_PP_InputEvent_Wheel
(
const
PP_InputEvent_Wheel
*
v
)
;
const
string
ToString_PP_InputEvent_Wheel
(
const
PP_InputEvent_Wheel
&
v
)
;
void
FromJSON_PP_InputEvent_Wheel
(
JSONIterator
&
iterator
PP_InputEvent_Wheel
&
value
)
;
const
string
ToString_PP_Instance
(
const
PP_Instance
*
v
)
;
const
string
ToString_PP_Instance
(
const
PP_Instance
&
v
)
;
void
FromJSON_PP_Instance
(
JSONIterator
&
iterator
PP_Instance
&
value
)
;
const
string
ToString_PP_Module
(
const
PP_Module
*
v
)
;
const
string
ToString_PP_Module
(
const
PP_Module
&
v
)
;
void
FromJSON_PP_Module
(
JSONIterator
&
iterator
PP_Module
&
value
)
;
const
string
ToString_PP_Point
(
const
PP_Point
*
v
)
;
const
string
ToString_PP_Point
(
const
PP_Point
&
v
)
;
void
FromJSON_PP_Point
(
JSONIterator
&
iterator
PP_Point
&
value
)
;
const
string
ToString_PP_FloatPoint
(
const
PP_FloatPoint
*
v
)
;
const
string
ToString_PP_FloatPoint
(
const
PP_FloatPoint
&
v
)
;
void
FromJSON_PP_FloatPoint
(
JSONIterator
&
iterator
PP_FloatPoint
&
value
)
;
const
string
ToString_PP_Rect
(
const
PP_Rect
*
v
)
;
const
string
ToString_PP_Rect
(
const
PP_Rect
&
v
)
;
void
FromJSON_PP_Rect
(
JSONIterator
&
iterator
PP_Rect
&
value
)
;
const
string
ToString_PP_FloatRect
(
const
PP_FloatRect
*
v
)
;
const
string
ToString_PP_FloatRect
(
const
PP_FloatRect
&
v
)
;
void
FromJSON_PP_FloatRect
(
JSONIterator
&
iterator
PP_FloatRect
&
value
)
;
const
string
ToString_PP_Resource
(
const
PP_Resource
*
v
)
;
const
string
ToString_PP_Resource
(
const
PP_Resource
&
v
)
;
void
FromJSON_PP_Resource
(
JSONIterator
&
iterator
PP_Resource
&
value
)
;
const
string
ToString_PP_Size
(
const
PP_Size
*
v
)
;
const
string
ToString_PP_Size
(
const
PP_Size
&
v
)
;
void
FromJSON_PP_Size
(
JSONIterator
&
iterator
PP_Size
&
value
)
;
const
string
ToString_PP_FloatSize
(
const
PP_FloatSize
*
v
)
;
const
string
ToString_PP_FloatSize
(
const
PP_FloatSize
&
v
)
;
void
FromJSON_PP_FloatSize
(
JSONIterator
&
iterator
PP_FloatSize
&
value
)
;
const
string
ToString_PP_Time
(
const
PP_Time
*
v
)
;
const
string
ToString_PP_Time
(
const
PP_Time
&
v
)
;
void
FromJSON_PP_Time
(
JSONIterator
&
iterator
PP_Time
&
value
)
;
const
string
ToString_PP_TimeTicks
(
const
PP_TimeTicks
*
v
)
;
const
string
ToString_PP_TimeTicks
(
const
PP_TimeTicks
&
v
)
;
void
FromJSON_PP_TimeTicks
(
JSONIterator
&
iterator
PP_TimeTicks
&
value
)
;
const
string
ToString_PP_TimeDelta
(
const
PP_TimeDelta
*
v
)
;
const
string
ToString_PP_TimeDelta
(
const
PP_TimeDelta
&
v
)
;
void
FromJSON_PP_TimeDelta
(
JSONIterator
&
iterator
PP_TimeDelta
&
value
)
;
const
string
ToString_PP_TouchPoint
(
const
PP_TouchPoint
*
v
)
;
const
string
ToString_PP_TouchPoint
(
const
PP_TouchPoint
&
v
)
;
void
FromJSON_PP_TouchPoint
(
JSONIterator
&
iterator
PP_TouchPoint
&
value
)
;
const
string
ToString_PP_VarType
(
const
PP_VarType
*
v
)
;
const
string
ToString_PP_VarType
(
const
PP_VarType
&
v
)
;
void
FromJSON_PP_VarType
(
JSONIterator
&
iterator
PP_VarType
&
value
)
;
const
string
ToString_PP_VarValue
(
const
PP_VarValue
*
v
)
;
const
string
ToString_PP_VarValue
(
const
PP_VarValue
&
v
)
;
void
FromJSON_PP_VarValue
(
JSONIterator
&
iterator
PP_VarValue
&
value
)
;
const
string
ToString_PP_Var
(
const
PP_Var
*
v
)
;
const
string
ToString_PP_Var
(
const
PP_Var
&
v
)
;
void
FromJSON_PP_Var
(
JSONIterator
&
iterator
PP_Var
&
value
)
;
const
string
ToString_PPB_GetInterface
(
const
PPB_GetInterface
&
v
)
;
void
FromJSON_PPB_GetInterface
(
JSONIterator
&
iterator
PPB_GetInterface
&
value
)
;
const
string
ToString_PPB_Audio_Callback
(
const
PPB_Audio_Callback_1_0
&
v
)
;
void
FromJSON_PPB_Audio_Callback
(
JSONIterator
&
iterator
PPB_Audio_Callback_1_0
&
value
)
;
const
string
ToString_PPB_Audio_Callback
(
const
PPB_Audio_Callback
&
v
)
;
void
FromJSON_PPB_Audio_Callback
(
JSONIterator
&
iterator
PPB_Audio_Callback
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_Audio_1_0
*
_real_PPB_Audio_1_0
;
#
endif
const
string
ToString_PPB_Audio
(
const
PPB_Audio_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Audio_1_1
*
_real_PPB_Audio_1_1
;
#
endif
const
string
ToString_PPB_Audio
(
const
PPB_Audio_1_1
*
v
)
;
const
string
ToString_PP_AudioBuffer_SampleRate
(
const
PP_AudioBuffer_SampleRate
*
v
)
;
const
string
ToString_PP_AudioBuffer_SampleRate
(
const
PP_AudioBuffer_SampleRate
&
v
)
;
void
FromJSON_PP_AudioBuffer_SampleRate
(
JSONIterator
&
iterator
PP_AudioBuffer_SampleRate
&
value
)
;
const
string
ToString_PP_AudioBuffer_SampleSize
(
const
PP_AudioBuffer_SampleSize
*
v
)
;
const
string
ToString_PP_AudioBuffer_SampleSize
(
const
PP_AudioBuffer_SampleSize
&
v
)
;
void
FromJSON_PP_AudioBuffer_SampleSize
(
JSONIterator
&
iterator
PP_AudioBuffer_SampleSize
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_AudioBuffer_0_1
*
_real_PPB_AudioBuffer_0_1
;
#
endif
const
string
ToString_PPB_AudioBuffer
(
const
PPB_AudioBuffer_0_1
*
v
)
;
const
string
ToString_PP_AudioSampleRate
(
const
PP_AudioSampleRate
*
v
)
;
const
string
ToString_PP_AudioSampleRate
(
const
PP_AudioSampleRate
&
v
)
;
void
FromJSON_PP_AudioSampleRate
(
JSONIterator
&
iterator
PP_AudioSampleRate
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_AudioConfig_1_0
*
_real_PPB_AudioConfig_1_0
;
#
endif
const
string
ToString_PPB_AudioConfig
(
const
PPB_AudioConfig_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_AudioConfig_1_1
*
_real_PPB_AudioConfig_1_1
;
#
endif
const
string
ToString_PPB_AudioConfig
(
const
PPB_AudioConfig_1_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_AudioEncoder_0_1
*
_real_PPB_AudioEncoder_0_1
;
#
endif
const
string
ToString_PPB_AudioEncoder
(
const
PPB_AudioEncoder_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Compositor_0_1
*
_real_PPB_Compositor_0_1
;
#
endif
const
string
ToString_PPB_Compositor
(
const
PPB_Compositor_0_1
*
v
)
;
const
string
ToString_PP_BlendMode
(
const
PP_BlendMode
*
v
)
;
const
string
ToString_PP_BlendMode
(
const
PP_BlendMode
&
v
)
;
void
FromJSON_PP_BlendMode
(
JSONIterator
&
iterator
PP_BlendMode
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_CompositorLayer_0_1
*
_real_PPB_CompositorLayer_0_1
;
#
endif
const
string
ToString_PPB_CompositorLayer
(
const
PPB_CompositorLayer_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_CompositorLayer_0_2
*
_real_PPB_CompositorLayer_0_2
;
#
endif
const
string
ToString_PPB_CompositorLayer
(
const
PPB_CompositorLayer_0_2
*
v
)
;
const
string
ToString_PP_LogLevel
(
const
PP_LogLevel
*
v
)
;
const
string
ToString_PP_LogLevel
(
const
PP_LogLevel
&
v
)
;
void
FromJSON_PP_LogLevel
(
JSONIterator
&
iterator
PP_LogLevel
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_Console_1_0
*
_real_PPB_Console_1_0
;
#
endif
const
string
ToString_PPB_Console
(
const
PPB_Console_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Core_1_0
*
_real_PPB_Core_1_0
;
#
endif
const
string
ToString_PPB_Core
(
const
PPB_Core_1_0
*
v
)
;
const
string
ToString_PP_FileOpenFlags
(
const
PP_FileOpenFlags
*
v
)
;
const
string
ToString_PP_FileOpenFlags
(
const
PP_FileOpenFlags
&
v
)
;
void
FromJSON_PP_FileOpenFlags
(
JSONIterator
&
iterator
PP_FileOpenFlags
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_FileIO_1_0
*
_real_PPB_FileIO_1_0
;
#
endif
const
string
ToString_PPB_FileIO
(
const
PPB_FileIO_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_FileIO_1_1
*
_real_PPB_FileIO_1_1
;
#
endif
const
string
ToString_PPB_FileIO
(
const
PPB_FileIO_1_1
*
v
)
;
const
string
ToString_PP_MakeDirectoryFlags
(
const
PP_MakeDirectoryFlags
*
v
)
;
const
string
ToString_PP_MakeDirectoryFlags
(
const
PP_MakeDirectoryFlags
&
v
)
;
void
FromJSON_PP_MakeDirectoryFlags
(
JSONIterator
&
iterator
PP_MakeDirectoryFlags
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_FileRef_1_0
*
_real_PPB_FileRef_1_0
;
#
endif
const
string
ToString_PPB_FileRef
(
const
PPB_FileRef_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_FileRef_1_1
*
_real_PPB_FileRef_1_1
;
#
endif
const
string
ToString_PPB_FileRef
(
const
PPB_FileRef_1_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_FileRef_1_2
*
_real_PPB_FileRef_1_2
;
#
endif
const
string
ToString_PPB_FileRef
(
const
PPB_FileRef_1_2
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_FileSystem_1_0
*
_real_PPB_FileSystem_1_0
;
#
endif
const
string
ToString_PPB_FileSystem
(
const
PPB_FileSystem_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Fullscreen_1_0
*
_real_PPB_Fullscreen_1_0
;
#
endif
const
string
ToString_PPB_Fullscreen
(
const
PPB_Fullscreen_1_0
*
v
)
;
const
string
ToString_PP_GamepadSampleData
(
const
PP_GamepadSampleData
*
v
)
;
const
string
ToString_PP_GamepadSampleData
(
const
PP_GamepadSampleData
&
v
)
;
void
FromJSON_PP_GamepadSampleData
(
JSONIterator
&
iterator
PP_GamepadSampleData
&
value
)
;
const
string
ToString_PP_GamepadsSampleData
(
const
PP_GamepadsSampleData
*
v
)
;
const
string
ToString_PP_GamepadsSampleData
(
const
PP_GamepadsSampleData
&
v
)
;
void
FromJSON_PP_GamepadsSampleData
(
JSONIterator
&
iterator
PP_GamepadsSampleData
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_Gamepad_1_0
*
_real_PPB_Gamepad_1_0
;
#
endif
const
string
ToString_PPB_Gamepad
(
const
PPB_Gamepad_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Graphics2D_1_0
*
_real_PPB_Graphics2D_1_0
;
#
endif
const
string
ToString_PPB_Graphics2D
(
const
PPB_Graphics2D_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Graphics2D_1_1
*
_real_PPB_Graphics2D_1_1
;
#
endif
const
string
ToString_PPB_Graphics2D
(
const
PPB_Graphics2D_1_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Graphics2D_1_2
*
_real_PPB_Graphics2D_1_2
;
#
endif
const
string
ToString_PPB_Graphics2D
(
const
PPB_Graphics2D_1_2
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Graphics3D_1_0
*
_real_PPB_Graphics3D_1_0
;
#
endif
const
string
ToString_PPB_Graphics3D
(
const
PPB_Graphics3D_1_0
*
v
)
;
const
string
ToString_PP_HostResolver_Flag
(
const
PP_HostResolver_Flag
*
v
)
;
const
string
ToString_PP_HostResolver_Flag
(
const
PP_HostResolver_Flag
&
v
)
;
void
FromJSON_PP_HostResolver_Flag
(
JSONIterator
&
iterator
PP_HostResolver_Flag
&
value
)
;
const
string
ToString_PP_HostResolver_Hint
(
const
PP_HostResolver_Hint
*
v
)
;
const
string
ToString_PP_HostResolver_Hint
(
const
PP_HostResolver_Hint
&
v
)
;
void
FromJSON_PP_HostResolver_Hint
(
JSONIterator
&
iterator
PP_HostResolver_Hint
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_HostResolver_1_0
*
_real_PPB_HostResolver_1_0
;
#
endif
const
string
ToString_PPB_HostResolver
(
const
PPB_HostResolver_1_0
*
v
)
;
const
string
ToString_PP_ImageDataFormat
(
const
PP_ImageDataFormat
*
v
)
;
const
string
ToString_PP_ImageDataFormat
(
const
PP_ImageDataFormat
&
v
)
;
void
FromJSON_PP_ImageDataFormat
(
JSONIterator
&
iterator
PP_ImageDataFormat
&
value
)
;
const
string
ToString_PP_ImageDataDesc
(
const
PP_ImageDataDesc
*
v
)
;
const
string
ToString_PP_ImageDataDesc
(
const
PP_ImageDataDesc
&
v
)
;
void
FromJSON_PP_ImageDataDesc
(
JSONIterator
&
iterator
PP_ImageDataDesc
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_ImageData_1_0
*
_real_PPB_ImageData_1_0
;
#
endif
const
string
ToString_PPB_ImageData
(
const
PPB_ImageData_1_0
*
v
)
;
const
string
ToString_PP_InputEvent_Type
(
const
PP_InputEvent_Type
*
v
)
;
const
string
ToString_PP_InputEvent_Type
(
const
PP_InputEvent_Type
&
v
)
;
void
FromJSON_PP_InputEvent_Type
(
JSONIterator
&
iterator
PP_InputEvent_Type
&
value
)
;
const
string
ToString_PP_InputEvent_Modifier
(
const
PP_InputEvent_Modifier
*
v
)
;
const
string
ToString_PP_InputEvent_Modifier
(
const
PP_InputEvent_Modifier
&
v
)
;
void
FromJSON_PP_InputEvent_Modifier
(
JSONIterator
&
iterator
PP_InputEvent_Modifier
&
value
)
;
const
string
ToString_PP_InputEvent_MouseButton
(
const
PP_InputEvent_MouseButton
*
v
)
;
const
string
ToString_PP_InputEvent_MouseButton
(
const
PP_InputEvent_MouseButton
&
v
)
;
void
FromJSON_PP_InputEvent_MouseButton
(
JSONIterator
&
iterator
PP_InputEvent_MouseButton
&
value
)
;
const
string
ToString_PP_InputEvent_Class
(
const
PP_InputEvent_Class
*
v
)
;
const
string
ToString_PP_InputEvent_Class
(
const
PP_InputEvent_Class
&
v
)
;
void
FromJSON_PP_InputEvent_Class
(
JSONIterator
&
iterator
PP_InputEvent_Class
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_InputEvent_1_0
*
_real_PPB_InputEvent_1_0
;
#
endif
const
string
ToString_PPB_InputEvent
(
const
PPB_InputEvent_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_MouseInputEvent_1_0
*
_real_PPB_MouseInputEvent_1_0
;
#
endif
const
string
ToString_PPB_MouseInputEvent
(
const
PPB_MouseInputEvent_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_MouseInputEvent_1_1
*
_real_PPB_MouseInputEvent_1_1
;
#
endif
const
string
ToString_PPB_MouseInputEvent
(
const
PPB_MouseInputEvent_1_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_WheelInputEvent_1_0
*
_real_PPB_WheelInputEvent_1_0
;
#
endif
const
string
ToString_PPB_WheelInputEvent
(
const
PPB_WheelInputEvent_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_KeyboardInputEvent_1_0
*
_real_PPB_KeyboardInputEvent_1_0
;
#
endif
const
string
ToString_PPB_KeyboardInputEvent
(
const
PPB_KeyboardInputEvent_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_KeyboardInputEvent_1_2
*
_real_PPB_KeyboardInputEvent_1_2
;
#
endif
const
string
ToString_PPB_KeyboardInputEvent
(
const
PPB_KeyboardInputEvent_1_2
*
v
)
;
const
string
ToString_PP_TouchListType
(
const
PP_TouchListType
*
v
)
;
const
string
ToString_PP_TouchListType
(
const
PP_TouchListType
&
v
)
;
void
FromJSON_PP_TouchListType
(
JSONIterator
&
iterator
PP_TouchListType
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_TouchInputEvent_1_0
*
_real_PPB_TouchInputEvent_1_0
;
#
endif
const
string
ToString_PPB_TouchInputEvent
(
const
PPB_TouchInputEvent_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_IMEInputEvent_1_0
*
_real_PPB_IMEInputEvent_1_0
;
#
endif
const
string
ToString_PPB_IMEInputEvent
(
const
PPB_IMEInputEvent_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Instance_1_0
*
_real_PPB_Instance_1_0
;
#
endif
const
string
ToString_PPB_Instance
(
const
PPB_Instance_1_0
*
v
)
;
const
string
ToString_PP_MediaStreamAudioTrack_Attrib
(
const
PP_MediaStreamAudioTrack_Attrib
*
v
)
;
const
string
ToString_PP_MediaStreamAudioTrack_Attrib
(
const
PP_MediaStreamAudioTrack_Attrib
&
v
)
;
void
FromJSON_PP_MediaStreamAudioTrack_Attrib
(
JSONIterator
&
iterator
PP_MediaStreamAudioTrack_Attrib
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_MediaStreamAudioTrack_0_1
*
_real_PPB_MediaStreamAudioTrack_0_1
;
#
endif
const
string
ToString_PPB_MediaStreamAudioTrack
(
const
PPB_MediaStreamAudioTrack_0_1
*
v
)
;
const
string
ToString_PP_MediaStreamVideoTrack_Attrib
(
const
PP_MediaStreamVideoTrack_Attrib
*
v
)
;
const
string
ToString_PP_MediaStreamVideoTrack_Attrib
(
const
PP_MediaStreamVideoTrack_Attrib
&
v
)
;
void
FromJSON_PP_MediaStreamVideoTrack_Attrib
(
JSONIterator
&
iterator
PP_MediaStreamVideoTrack_Attrib
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_MediaStreamVideoTrack_0_1
*
_real_PPB_MediaStreamVideoTrack_0_1
;
#
endif
const
string
ToString_PPB_MediaStreamVideoTrack
(
const
PPB_MediaStreamVideoTrack_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_MediaStreamVideoTrack_1_0
*
_real_PPB_MediaStreamVideoTrack_1_0
;
#
endif
const
string
ToString_PPB_MediaStreamVideoTrack
(
const
PPB_MediaStreamVideoTrack_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_MessageLoop_1_0
*
_real_PPB_MessageLoop_1_0
;
#
endif
const
string
ToString_PPB_MessageLoop
(
const
PPB_MessageLoop_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Messaging_1_0
*
_real_PPB_Messaging_1_0
;
#
endif
const
string
ToString_PPB_Messaging
(
const
PPB_Messaging_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Messaging_1_2
*
_real_PPB_Messaging_1_2
;
#
endif
const
string
ToString_PPB_Messaging
(
const
PPB_Messaging_1_2
*
v
)
;
const
string
ToString_PP_MouseCursor_Type
(
const
PP_MouseCursor_Type
*
v
)
;
const
string
ToString_PP_MouseCursor_Type
(
const
PP_MouseCursor_Type
&
v
)
;
void
FromJSON_PP_MouseCursor_Type
(
JSONIterator
&
iterator
PP_MouseCursor_Type
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_MouseCursor_1_0
*
_real_PPB_MouseCursor_1_0
;
#
endif
const
string
ToString_PPB_MouseCursor
(
const
PPB_MouseCursor_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_MouseLock_1_0
*
_real_PPB_MouseLock_1_0
;
#
endif
const
string
ToString_PPB_MouseLock
(
const
PPB_MouseLock_1_0
*
v
)
;
const
string
ToString_PP_NetAddress_Family
(
const
PP_NetAddress_Family
*
v
)
;
const
string
ToString_PP_NetAddress_Family
(
const
PP_NetAddress_Family
&
v
)
;
void
FromJSON_PP_NetAddress_Family
(
JSONIterator
&
iterator
PP_NetAddress_Family
&
value
)
;
const
string
ToString_PP_NetAddress_IPv4
(
const
PP_NetAddress_IPv4
*
v
)
;
const
string
ToString_PP_NetAddress_IPv4
(
const
PP_NetAddress_IPv4
&
v
)
;
void
FromJSON_PP_NetAddress_IPv4
(
JSONIterator
&
iterator
PP_NetAddress_IPv4
&
value
)
;
const
string
ToString_PP_NetAddress_IPv6
(
const
PP_NetAddress_IPv6
*
v
)
;
const
string
ToString_PP_NetAddress_IPv6
(
const
PP_NetAddress_IPv6
&
v
)
;
void
FromJSON_PP_NetAddress_IPv6
(
JSONIterator
&
iterator
PP_NetAddress_IPv6
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_NetAddress_1_0
*
_real_PPB_NetAddress_1_0
;
#
endif
const
string
ToString_PPB_NetAddress
(
const
PPB_NetAddress_1_0
*
v
)
;
const
string
ToString_PP_NetworkList_Type
(
const
PP_NetworkList_Type
*
v
)
;
const
string
ToString_PP_NetworkList_Type
(
const
PP_NetworkList_Type
&
v
)
;
void
FromJSON_PP_NetworkList_Type
(
JSONIterator
&
iterator
PP_NetworkList_Type
&
value
)
;
const
string
ToString_PP_NetworkList_State
(
const
PP_NetworkList_State
*
v
)
;
const
string
ToString_PP_NetworkList_State
(
const
PP_NetworkList_State
&
v
)
;
void
FromJSON_PP_NetworkList_State
(
JSONIterator
&
iterator
PP_NetworkList_State
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_NetworkList_1_0
*
_real_PPB_NetworkList_1_0
;
#
endif
const
string
ToString_PPB_NetworkList
(
const
PPB_NetworkList_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_NetworkMonitor_1_0
*
_real_PPB_NetworkMonitor_1_0
;
#
endif
const
string
ToString_PPB_NetworkMonitor
(
const
PPB_NetworkMonitor_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_NetworkProxy_1_0
*
_real_PPB_NetworkProxy_1_0
;
#
endif
const
string
ToString_PPB_NetworkProxy
(
const
PPB_NetworkProxy_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_OpenGLES2_1_0
*
_real_PPB_OpenGLES2_1_0
;
#
endif
const
string
ToString_PPB_OpenGLES2
(
const
PPB_OpenGLES2_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_OpenGLES2InstancedArrays_1_0
*
_real_PPB_OpenGLES2InstancedArrays_1_0
;
#
endif
const
string
ToString_PPB_OpenGLES2InstancedArrays
(
const
PPB_OpenGLES2InstancedArrays_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_OpenGLES2FramebufferBlit_1_0
*
_real_PPB_OpenGLES2FramebufferBlit_1_0
;
#
endif
const
string
ToString_PPB_OpenGLES2FramebufferBlit
(
const
PPB_OpenGLES2FramebufferBlit_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_OpenGLES2FramebufferMultisample_1_0
*
_real_PPB_OpenGLES2FramebufferMultisample_1_0
;
#
endif
const
string
ToString_PPB_OpenGLES2FramebufferMultisample
(
const
PPB_OpenGLES2FramebufferMultisample_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_OpenGLES2ChromiumEnableFeature_1_0
*
_real_PPB_OpenGLES2ChromiumEnableFeature_1_0
;
#
endif
const
string
ToString_PPB_OpenGLES2ChromiumEnableFeature
(
const
PPB_OpenGLES2ChromiumEnableFeature_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_OpenGLES2ChromiumMapSub_1_0
*
_real_PPB_OpenGLES2ChromiumMapSub_1_0
;
#
endif
const
string
ToString_PPB_OpenGLES2ChromiumMapSub
(
const
PPB_OpenGLES2ChromiumMapSub_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_OpenGLES2Query_1_0
*
_real_PPB_OpenGLES2Query_1_0
;
#
endif
const
string
ToString_PPB_OpenGLES2Query
(
const
PPB_OpenGLES2Query_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_OpenGLES2VertexArrayObject_1_0
*
_real_PPB_OpenGLES2VertexArrayObject_1_0
;
#
endif
const
string
ToString_PPB_OpenGLES2VertexArrayObject
(
const
PPB_OpenGLES2VertexArrayObject_1_0
*
v
)
;
const
string
ToString_PP_TCPSocket_Option
(
const
PP_TCPSocket_Option
*
v
)
;
const
string
ToString_PP_TCPSocket_Option
(
const
PP_TCPSocket_Option
&
v
)
;
void
FromJSON_PP_TCPSocket_Option
(
JSONIterator
&
iterator
PP_TCPSocket_Option
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_TCPSocket_1_0
*
_real_PPB_TCPSocket_1_0
;
#
endif
const
string
ToString_PPB_TCPSocket
(
const
PPB_TCPSocket_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_TCPSocket_1_1
*
_real_PPB_TCPSocket_1_1
;
#
endif
const
string
ToString_PPB_TCPSocket
(
const
PPB_TCPSocket_1_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_TCPSocket_1_2
*
_real_PPB_TCPSocket_1_2
;
#
endif
const
string
ToString_PPB_TCPSocket
(
const
PPB_TCPSocket_1_2
*
v
)
;
const
string
ToString_PP_TextInput_Type
(
const
PP_TextInput_Type
*
v
)
;
const
string
ToString_PP_TextInput_Type
(
const
PP_TextInput_Type
&
v
)
;
void
FromJSON_PP_TextInput_Type
(
JSONIterator
&
iterator
PP_TextInput_Type
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_TextInputController_1_0
*
_real_PPB_TextInputController_1_0
;
#
endif
const
string
ToString_PPB_TextInputController
(
const
PPB_TextInputController_1_0
*
v
)
;
const
string
ToString_PP_UDPSocket_Option
(
const
PP_UDPSocket_Option
*
v
)
;
const
string
ToString_PP_UDPSocket_Option
(
const
PP_UDPSocket_Option
&
v
)
;
void
FromJSON_PP_UDPSocket_Option
(
JSONIterator
&
iterator
PP_UDPSocket_Option
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_UDPSocket_1_0
*
_real_PPB_UDPSocket_1_0
;
#
endif
const
string
ToString_PPB_UDPSocket
(
const
PPB_UDPSocket_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_UDPSocket_1_1
*
_real_PPB_UDPSocket_1_1
;
#
endif
const
string
ToString_PPB_UDPSocket
(
const
PPB_UDPSocket_1_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_UDPSocket_1_2
*
_real_PPB_UDPSocket_1_2
;
#
endif
const
string
ToString_PPB_UDPSocket
(
const
PPB_UDPSocket_1_2
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_URLLoader_1_0
*
_real_PPB_URLLoader_1_0
;
#
endif
const
string
ToString_PPB_URLLoader
(
const
PPB_URLLoader_1_0
*
v
)
;
const
string
ToString_PP_URLRequestProperty
(
const
PP_URLRequestProperty
*
v
)
;
const
string
ToString_PP_URLRequestProperty
(
const
PP_URLRequestProperty
&
v
)
;
void
FromJSON_PP_URLRequestProperty
(
JSONIterator
&
iterator
PP_URLRequestProperty
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_URLRequestInfo_1_0
*
_real_PPB_URLRequestInfo_1_0
;
#
endif
const
string
ToString_PPB_URLRequestInfo
(
const
PPB_URLRequestInfo_1_0
*
v
)
;
const
string
ToString_PP_URLResponseProperty
(
const
PP_URLResponseProperty
*
v
)
;
const
string
ToString_PP_URLResponseProperty
(
const
PP_URLResponseProperty
&
v
)
;
void
FromJSON_PP_URLResponseProperty
(
JSONIterator
&
iterator
PP_URLResponseProperty
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_URLResponseInfo_1_0
*
_real_PPB_URLResponseInfo_1_0
;
#
endif
const
string
ToString_PPB_URLResponseInfo
(
const
PPB_URLResponseInfo_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Var_1_0
*
_real_PPB_Var_1_0
;
#
endif
const
string
ToString_PPB_Var
(
const
PPB_Var_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Var_1_1
*
_real_PPB_Var_1_1
;
#
endif
const
string
ToString_PPB_Var
(
const
PPB_Var_1_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Var_1_2
*
_real_PPB_Var_1_2
;
#
endif
const
string
ToString_PPB_Var
(
const
PPB_Var_1_2
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VarArray_1_0
*
_real_PPB_VarArray_1_0
;
#
endif
const
string
ToString_PPB_VarArray
(
const
PPB_VarArray_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VarArrayBuffer_1_0
*
_real_PPB_VarArrayBuffer_1_0
;
#
endif
const
string
ToString_PPB_VarArrayBuffer
(
const
PPB_VarArrayBuffer_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VarDictionary_1_0
*
_real_PPB_VarDictionary_1_0
;
#
endif
const
string
ToString_PPB_VarDictionary
(
const
PPB_VarDictionary_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VideoDecoder_0_1
*
_real_PPB_VideoDecoder_0_1
;
#
endif
const
string
ToString_PPB_VideoDecoder
(
const
PPB_VideoDecoder_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VideoDecoder_0_2
*
_real_PPB_VideoDecoder_0_2
;
#
endif
const
string
ToString_PPB_VideoDecoder
(
const
PPB_VideoDecoder_0_2
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VideoDecoder_1_0
*
_real_PPB_VideoDecoder_1_0
;
#
endif
const
string
ToString_PPB_VideoDecoder
(
const
PPB_VideoDecoder_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VideoDecoder_1_1
*
_real_PPB_VideoDecoder_1_1
;
#
endif
const
string
ToString_PPB_VideoDecoder
(
const
PPB_VideoDecoder_1_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VideoEncoder_0_1
*
_real_PPB_VideoEncoder_0_1
;
#
endif
const
string
ToString_PPB_VideoEncoder
(
const
PPB_VideoEncoder_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VideoEncoder_0_2
*
_real_PPB_VideoEncoder_0_2
;
#
endif
const
string
ToString_PPB_VideoEncoder
(
const
PPB_VideoEncoder_0_2
*
v
)
;
const
string
ToString_PP_VideoFrame_Format
(
const
PP_VideoFrame_Format
*
v
)
;
const
string
ToString_PP_VideoFrame_Format
(
const
PP_VideoFrame_Format
&
v
)
;
void
FromJSON_PP_VideoFrame_Format
(
JSONIterator
&
iterator
PP_VideoFrame_Format
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_VideoFrame_0_1
*
_real_PPB_VideoFrame_0_1
;
#
endif
const
string
ToString_PPB_VideoFrame
(
const
PPB_VideoFrame_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_View_1_0
*
_real_PPB_View_1_0
;
#
endif
const
string
ToString_PPB_View
(
const
PPB_View_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_View_1_1
*
_real_PPB_View_1_1
;
#
endif
const
string
ToString_PPB_View
(
const
PPB_View_1_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_View_1_2
*
_real_PPB_View_1_2
;
#
endif
const
string
ToString_PPB_View
(
const
PPB_View_1_2
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VpnProvider_0_1
*
_real_PPB_VpnProvider_0_1
;
#
endif
const
string
ToString_PPB_VpnProvider
(
const
PPB_VpnProvider_0_1
*
v
)
;
const
string
ToString_PP_WebSocketReadyState
(
const
PP_WebSocketReadyState
*
v
)
;
const
string
ToString_PP_WebSocketReadyState
(
const
PP_WebSocketReadyState
&
v
)
;
void
FromJSON_PP_WebSocketReadyState
(
JSONIterator
&
iterator
PP_WebSocketReadyState
&
value
)
;
const
string
ToString_PP_WebSocketCloseCode
(
const
PP_WebSocketCloseCode
*
v
)
;
const
string
ToString_PP_WebSocketCloseCode
(
const
PP_WebSocketCloseCode
&
v
)
;
void
FromJSON_PP_WebSocketCloseCode
(
JSONIterator
&
iterator
PP_WebSocketCloseCode
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_WebSocket_1_0
*
_real_PPB_WebSocket_1_0
;
#
endif
const
string
ToString_PPB_WebSocket
(
const
PPB_WebSocket_1_0
*
v
)
;
const
string
ToString_PP_InitializeModule_Func
(
const
PP_InitializeModule_Func
&
v
)
;
void
FromJSON_PP_InitializeModule_Func
(
JSONIterator
&
iterator
PP_InitializeModule_Func
&
value
)
;
const
string
ToString_PP_ShutdownModule_Func
(
const
PP_ShutdownModule_Func
&
v
)
;
void
FromJSON_PP_ShutdownModule_Func
(
JSONIterator
&
iterator
PP_ShutdownModule_Func
&
value
)
;
const
string
ToString_PP_GetInterface_Func
(
const
PP_GetInterface_Func
&
v
)
;
void
FromJSON_PP_GetInterface_Func
(
JSONIterator
&
iterator
PP_GetInterface_Func
&
value
)
;
#
ifdef
INTERPOSE
static
PPP_Graphics3D_1_0
*
_real_PPP_Graphics3D_1_0
;
#
endif
static
char
*
Call_PPP_Graphics3D
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_InputEvent_0_1
*
_real_PPP_InputEvent_0_1
;
#
endif
static
char
*
Call_PPP_InputEvent
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_Instance_1_0
*
_real_PPP_Instance_1_0
;
#
endif
static
char
*
Call_PPP_Instance_1_0
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_Instance_1_1
*
_real_PPP_Instance_1_1
;
#
endif
static
char
*
Call_PPP_Instance
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_MessageHandler_0_2
*
_real_PPP_MessageHandler_0_2
;
#
endif
static
char
*
Call_PPP_MessageHandler
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_Messaging_1_0
*
_real_PPP_Messaging_1_0
;
#
endif
static
char
*
Call_PPP_Messaging
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_MouseLock_1_0
*
_real_PPP_MouseLock_1_0
;
#
endif
static
char
*
Call_PPP_MouseLock
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPB_BrokerTrusted_0_2
*
_real_PPB_BrokerTrusted_0_2
;
#
endif
const
string
ToString_PPB_BrokerTrusted
(
const
PPB_BrokerTrusted_0_2
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_BrokerTrusted_0_3
*
_real_PPB_BrokerTrusted_0_3
;
#
endif
const
string
ToString_PPB_BrokerTrusted
(
const
PPB_BrokerTrusted_0_3
*
v
)
;
const
string
ToString_PP_BrowserFont_Trusted_Family
(
const
PP_BrowserFont_Trusted_Family
*
v
)
;
const
string
ToString_PP_BrowserFont_Trusted_Family
(
const
PP_BrowserFont_Trusted_Family
&
v
)
;
void
FromJSON_PP_BrowserFont_Trusted_Family
(
JSONIterator
&
iterator
PP_BrowserFont_Trusted_Family
&
value
)
;
const
string
ToString_PP_BrowserFont_Trusted_Weight
(
const
PP_BrowserFont_Trusted_Weight
*
v
)
;
const
string
ToString_PP_BrowserFont_Trusted_Weight
(
const
PP_BrowserFont_Trusted_Weight
&
v
)
;
void
FromJSON_PP_BrowserFont_Trusted_Weight
(
JSONIterator
&
iterator
PP_BrowserFont_Trusted_Weight
&
value
)
;
const
string
ToString_PP_BrowserFont_Trusted_Description
(
const
PP_BrowserFont_Trusted_Description
*
v
)
;
const
string
ToString_PP_BrowserFont_Trusted_Description
(
const
PP_BrowserFont_Trusted_Description
&
v
)
;
void
FromJSON_PP_BrowserFont_Trusted_Description
(
JSONIterator
&
iterator
PP_BrowserFont_Trusted_Description
&
value
)
;
const
string
ToString_PP_BrowserFont_Trusted_Metrics
(
const
PP_BrowserFont_Trusted_Metrics
*
v
)
;
const
string
ToString_PP_BrowserFont_Trusted_Metrics
(
const
PP_BrowserFont_Trusted_Metrics
&
v
)
;
void
FromJSON_PP_BrowserFont_Trusted_Metrics
(
JSONIterator
&
iterator
PP_BrowserFont_Trusted_Metrics
&
value
)
;
const
string
ToString_PP_BrowserFont_Trusted_TextRun
(
const
PP_BrowserFont_Trusted_TextRun
*
v
)
;
const
string
ToString_PP_BrowserFont_Trusted_TextRun
(
const
PP_BrowserFont_Trusted_TextRun
&
v
)
;
void
FromJSON_PP_BrowserFont_Trusted_TextRun
(
JSONIterator
&
iterator
PP_BrowserFont_Trusted_TextRun
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_BrowserFont_Trusted_1_0
*
_real_PPB_BrowserFont_Trusted_1_0
;
#
endif
const
string
ToString_PPB_BrowserFont_Trusted
(
const
PPB_BrowserFont_Trusted_1_0
*
v
)
;
const
string
ToString_PP_CharSet_Trusted_ConversionError
(
const
PP_CharSet_Trusted_ConversionError
*
v
)
;
const
string
ToString_PP_CharSet_Trusted_ConversionError
(
const
PP_CharSet_Trusted_ConversionError
&
v
)
;
void
FromJSON_PP_CharSet_Trusted_ConversionError
(
JSONIterator
&
iterator
PP_CharSet_Trusted_ConversionError
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_CharSet_Trusted_1_0
*
_real_PPB_CharSet_Trusted_1_0
;
#
endif
const
string
ToString_PPB_CharSet_Trusted
(
const
PPB_CharSet_Trusted_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_FileChooserTrusted_0_5
*
_real_PPB_FileChooserTrusted_0_5
;
#
endif
const
string
ToString_PPB_FileChooserTrusted
(
const
PPB_FileChooserTrusted_0_5
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_FileChooserTrusted_0_6
*
_real_PPB_FileChooserTrusted_0_6
;
#
endif
const
string
ToString_PPB_FileChooserTrusted
(
const
PPB_FileChooserTrusted_0_6
*
v
)
;
const
string
ToString_PP_URLLoaderTrusted_StatusCallback
(
const
PP_URLLoaderTrusted_StatusCallback
&
v
)
;
void
FromJSON_PP_URLLoaderTrusted_StatusCallback
(
JSONIterator
&
iterator
PP_URLLoaderTrusted_StatusCallback
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_URLLoaderTrusted_0_3
*
_real_PPB_URLLoaderTrusted_0_3
;
#
endif
const
string
ToString_PPB_URLLoaderTrusted
(
const
PPB_URLLoaderTrusted_0_3
*
v
)
;
const
string
ToString_PP_CursorType_Dev
(
const
PP_CursorType_Dev
*
v
)
;
const
string
ToString_PP_CursorType_Dev
(
const
PP_CursorType_Dev
&
v
)
;
void
FromJSON_PP_CursorType_Dev
(
JSONIterator
&
iterator
PP_CursorType_Dev
&
value
)
;
const
string
ToString_PP_PrintOrientation_Dev
(
const
PP_PrintOrientation_Dev
*
v
)
;
const
string
ToString_PP_PrintOrientation_Dev
(
const
PP_PrintOrientation_Dev
&
v
)
;
void
FromJSON_PP_PrintOrientation_Dev
(
JSONIterator
&
iterator
PP_PrintOrientation_Dev
&
value
)
;
const
string
ToString_PP_PrintOutputFormat_Dev
(
const
PP_PrintOutputFormat_Dev
*
v
)
;
const
string
ToString_PP_PrintOutputFormat_Dev
(
const
PP_PrintOutputFormat_Dev
&
v
)
;
void
FromJSON_PP_PrintOutputFormat_Dev
(
JSONIterator
&
iterator
PP_PrintOutputFormat_Dev
&
value
)
;
const
string
ToString_PP_PrintScalingOption_Dev
(
const
PP_PrintScalingOption_Dev
*
v
)
;
const
string
ToString_PP_PrintScalingOption_Dev
(
const
PP_PrintScalingOption_Dev
&
v
)
;
void
FromJSON_PP_PrintScalingOption_Dev
(
JSONIterator
&
iterator
PP_PrintScalingOption_Dev
&
value
)
;
const
string
ToString_PP_PrintSettings_Dev
(
const
PP_PrintSettings_Dev
*
v
)
;
const
string
ToString_PP_PrintSettings_Dev
(
const
PP_PrintSettings_Dev
&
v
)
;
void
FromJSON_PP_PrintSettings_Dev
(
JSONIterator
&
iterator
PP_PrintSettings_Dev
&
value
)
;
const
string
ToString_PP_VideoCaptureDeviceInfo_Dev
(
const
PP_VideoCaptureDeviceInfo_Dev
*
v
)
;
const
string
ToString_PP_VideoCaptureDeviceInfo_Dev
(
const
PP_VideoCaptureDeviceInfo_Dev
&
v
)
;
void
FromJSON_PP_VideoCaptureDeviceInfo_Dev
(
JSONIterator
&
iterator
PP_VideoCaptureDeviceInfo_Dev
&
value
)
;
const
string
ToString_PP_VideoCaptureStatus_Dev
(
const
PP_VideoCaptureStatus_Dev
*
v
)
;
const
string
ToString_PP_VideoCaptureStatus_Dev
(
const
PP_VideoCaptureStatus_Dev
&
v
)
;
void
FromJSON_PP_VideoCaptureStatus_Dev
(
JSONIterator
&
iterator
PP_VideoCaptureStatus_Dev
&
value
)
;
const
string
ToString_PP_VideoDecoder_Profile
(
const
PP_VideoDecoder_Profile
*
v
)
;
const
string
ToString_PP_VideoDecoder_Profile
(
const
PP_VideoDecoder_Profile
&
v
)
;
void
FromJSON_PP_VideoDecoder_Profile
(
JSONIterator
&
iterator
PP_VideoDecoder_Profile
&
value
)
;
const
string
ToString_PP_VideoBitstreamBuffer_Dev
(
const
PP_VideoBitstreamBuffer_Dev
*
v
)
;
const
string
ToString_PP_VideoBitstreamBuffer_Dev
(
const
PP_VideoBitstreamBuffer_Dev
&
v
)
;
void
FromJSON_PP_VideoBitstreamBuffer_Dev
(
JSONIterator
&
iterator
PP_VideoBitstreamBuffer_Dev
&
value
)
;
const
string
ToString_PP_PictureBuffer_Dev
(
const
PP_PictureBuffer_Dev
*
v
)
;
const
string
ToString_PP_PictureBuffer_Dev
(
const
PP_PictureBuffer_Dev
&
v
)
;
void
FromJSON_PP_PictureBuffer_Dev
(
JSONIterator
&
iterator
PP_PictureBuffer_Dev
&
value
)
;
const
string
ToString_PP_Picture_Dev
(
const
PP_Picture_Dev
*
v
)
;
const
string
ToString_PP_Picture_Dev
(
const
PP_Picture_Dev
&
v
)
;
void
FromJSON_PP_Picture_Dev
(
JSONIterator
&
iterator
PP_Picture_Dev
&
value
)
;
const
string
ToString_PP_VideoDecodeError_Dev
(
const
PP_VideoDecodeError_Dev
*
v
)
;
const
string
ToString_PP_VideoDecodeError_Dev
(
const
PP_VideoDecodeError_Dev
&
v
)
;
void
FromJSON_PP_VideoDecodeError_Dev
(
JSONIterator
&
iterator
PP_VideoDecodeError_Dev
&
value
)
;
const
string
ToString_PPB_AudioInput_Callback
(
const
PPB_AudioInput_Callback_0_3
&
v
)
;
void
FromJSON_PPB_AudioInput_Callback
(
JSONIterator
&
iterator
PPB_AudioInput_Callback_0_3
&
value
)
;
const
string
ToString_PPB_AudioInput_Callback
(
const
PPB_AudioInput_Callback
&
v
)
;
void
FromJSON_PPB_AudioInput_Callback
(
JSONIterator
&
iterator
PPB_AudioInput_Callback
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_AudioInput_Dev_0_3
*
_real_PPB_AudioInput_Dev_0_3
;
#
endif
const
string
ToString_PPB_AudioInput_Dev
(
const
PPB_AudioInput_Dev_0_3
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_AudioInput_Dev_0_4
*
_real_PPB_AudioInput_Dev_0_4
;
#
endif
const
string
ToString_PPB_AudioInput_Dev
(
const
PPB_AudioInput_Dev_0_4
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Buffer_Dev_0_4
*
_real_PPB_Buffer_Dev_0_4
;
#
endif
const
string
ToString_PPB_Buffer_Dev
(
const
PPB_Buffer_Dev_0_4
*
v
)
;
const
string
ToString_PP_CharSet_ConversionError
(
const
PP_CharSet_ConversionError
*
v
)
;
const
string
ToString_PP_CharSet_ConversionError
(
const
PP_CharSet_ConversionError
&
v
)
;
void
FromJSON_PP_CharSet_ConversionError
(
JSONIterator
&
iterator
PP_CharSet_ConversionError
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_CharSet_Dev_0_4
*
_real_PPB_CharSet_Dev_0_4
;
#
endif
const
string
ToString_PPB_CharSet_Dev
(
const
PPB_CharSet_Dev_0_4
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Crypto_Dev_0_1
*
_real_PPB_Crypto_Dev_0_1
;
#
endif
const
string
ToString_PPB_Crypto_Dev
(
const
PPB_Crypto_Dev_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_CursorControl_Dev_0_4
*
_real_PPB_CursorControl_Dev_0_4
;
#
endif
const
string
ToString_PPB_CursorControl_Dev
(
const
PPB_CursorControl_Dev_0_4
*
v
)
;
const
string
ToString_PP_MonitorDeviceChangeCallback
(
const
PP_MonitorDeviceChangeCallback
&
v
)
;
void
FromJSON_PP_MonitorDeviceChangeCallback
(
JSONIterator
&
iterator
PP_MonitorDeviceChangeCallback
&
value
)
;
const
string
ToString_PP_DeviceType_Dev
(
const
PP_DeviceType_Dev
*
v
)
;
const
string
ToString_PP_DeviceType_Dev
(
const
PP_DeviceType_Dev
&
v
)
;
void
FromJSON_PP_DeviceType_Dev
(
JSONIterator
&
iterator
PP_DeviceType_Dev
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_DeviceRef_Dev_0_1
*
_real_PPB_DeviceRef_Dev_0_1
;
#
endif
const
string
ToString_PPB_DeviceRef_Dev
(
const
PPB_DeviceRef_Dev_0_1
*
v
)
;
const
string
ToString_PP_FileChooserMode_Dev
(
const
PP_FileChooserMode_Dev
*
v
)
;
const
string
ToString_PP_FileChooserMode_Dev
(
const
PP_FileChooserMode_Dev
&
v
)
;
void
FromJSON_PP_FileChooserMode_Dev
(
JSONIterator
&
iterator
PP_FileChooserMode_Dev
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_FileChooser_Dev_0_5
*
_real_PPB_FileChooser_Dev_0_5
;
#
endif
const
string
ToString_PPB_FileChooser_Dev
(
const
PPB_FileChooser_Dev_0_5
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_FileChooser_Dev_0_6
*
_real_PPB_FileChooser_Dev_0_6
;
#
endif
const
string
ToString_PPB_FileChooser_Dev
(
const
PPB_FileChooser_Dev_0_6
*
v
)
;
const
string
ToString_PP_FontFamily_Dev
(
const
PP_FontFamily_Dev
*
v
)
;
const
string
ToString_PP_FontFamily_Dev
(
const
PP_FontFamily_Dev
&
v
)
;
void
FromJSON_PP_FontFamily_Dev
(
JSONIterator
&
iterator
PP_FontFamily_Dev
&
value
)
;
const
string
ToString_PP_FontWeight_Dev
(
const
PP_FontWeight_Dev
*
v
)
;
const
string
ToString_PP_FontWeight_Dev
(
const
PP_FontWeight_Dev
&
v
)
;
void
FromJSON_PP_FontWeight_Dev
(
JSONIterator
&
iterator
PP_FontWeight_Dev
&
value
)
;
const
string
ToString_PP_FontDescription_Dev
(
const
PP_FontDescription_Dev
*
v
)
;
const
string
ToString_PP_FontDescription_Dev
(
const
PP_FontDescription_Dev
&
v
)
;
void
FromJSON_PP_FontDescription_Dev
(
JSONIterator
&
iterator
PP_FontDescription_Dev
&
value
)
;
const
string
ToString_PP_FontMetrics_Dev
(
const
PP_FontMetrics_Dev
*
v
)
;
const
string
ToString_PP_FontMetrics_Dev
(
const
PP_FontMetrics_Dev
&
v
)
;
void
FromJSON_PP_FontMetrics_Dev
(
JSONIterator
&
iterator
PP_FontMetrics_Dev
&
value
)
;
const
string
ToString_PP_TextRun_Dev
(
const
PP_TextRun_Dev
*
v
)
;
const
string
ToString_PP_TextRun_Dev
(
const
PP_TextRun_Dev
&
v
)
;
void
FromJSON_PP_TextRun_Dev
(
JSONIterator
&
iterator
PP_TextRun_Dev
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_Font_Dev_0_6
*
_real_PPB_Font_Dev_0_6
;
#
endif
const
string
ToString_PPB_Font_Dev
(
const
PPB_Font_Dev_0_6
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_IMEInputEvent_Dev_0_1
*
_real_PPB_IMEInputEvent_Dev_0_1
;
#
endif
const
string
ToString_PPB_IMEInputEvent_Dev
(
const
PPB_IMEInputEvent_Dev_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_IMEInputEvent_Dev_0_2
*
_real_PPB_IMEInputEvent_Dev_0_2
;
#
endif
const
string
ToString_PPB_IMEInputEvent_Dev
(
const
PPB_IMEInputEvent_Dev_0_2
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Memory_Dev_0_1
*
_real_PPB_Memory_Dev_0_1
;
#
endif
const
string
ToString_PPB_Memory_Dev
(
const
PPB_Memory_Dev_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_OpenGLES2DrawBuffers_Dev_1_0
*
_real_PPB_OpenGLES2DrawBuffers_Dev_1_0
;
#
endif
const
string
ToString_PPB_OpenGLES2DrawBuffers_Dev
(
const
PPB_OpenGLES2DrawBuffers_Dev_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Printing_Dev_0_7
*
_real_PPB_Printing_Dev_0_7
;
#
endif
const
string
ToString_PPB_Printing_Dev
(
const
PPB_Printing_Dev_0_7
*
v
)
;
const
string
ToString_PP_TextInput_Type_Dev
(
const
PP_TextInput_Type_Dev
*
v
)
;
const
string
ToString_PP_TextInput_Type_Dev
(
const
PP_TextInput_Type_Dev
&
v
)
;
void
FromJSON_PP_TextInput_Type_Dev
(
JSONIterator
&
iterator
PP_TextInput_Type_Dev
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_TextInput_Dev_0_1
*
_real_PPB_TextInput_Dev_0_1
;
#
endif
const
string
ToString_PPB_TextInput_Dev
(
const
PPB_TextInput_Dev_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_TextInput_Dev_0_2
*
_real_PPB_TextInput_Dev_0_2
;
#
endif
const
string
ToString_PPB_TextInput_Dev
(
const
PPB_TextInput_Dev_0_2
*
v
)
;
const
string
ToString_PP_TraceEventTime
(
const
PP_TraceEventTime
*
v
)
;
const
string
ToString_PP_TraceEventTime
(
const
PP_TraceEventTime
&
v
)
;
void
FromJSON_PP_TraceEventTime
(
JSONIterator
&
iterator
PP_TraceEventTime
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_Trace_Event_Dev_0_1
*
_real_PPB_Trace_Event_Dev_0_1
;
#
endif
const
string
ToString_PPB_Trace_Event_Dev
(
const
PPB_Trace_Event_Dev_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Trace_Event_Dev_0_2
*
_real_PPB_Trace_Event_Dev_0_2
;
#
endif
const
string
ToString_PPB_Trace_Event_Dev
(
const
PPB_Trace_Event_Dev_0_2
*
v
)
;
const
string
ToString_PP_TrueTypeFontFamily_Dev
(
const
PP_TrueTypeFontFamily_Dev
*
v
)
;
const
string
ToString_PP_TrueTypeFontFamily_Dev
(
const
PP_TrueTypeFontFamily_Dev
&
v
)
;
void
FromJSON_PP_TrueTypeFontFamily_Dev
(
JSONIterator
&
iterator
PP_TrueTypeFontFamily_Dev
&
value
)
;
const
string
ToString_PP_TrueTypeFontStyle_Dev
(
const
PP_TrueTypeFontStyle_Dev
*
v
)
;
const
string
ToString_PP_TrueTypeFontStyle_Dev
(
const
PP_TrueTypeFontStyle_Dev
&
v
)
;
void
FromJSON_PP_TrueTypeFontStyle_Dev
(
JSONIterator
&
iterator
PP_TrueTypeFontStyle_Dev
&
value
)
;
const
string
ToString_PP_TrueTypeFontWeight_Dev
(
const
PP_TrueTypeFontWeight_Dev
*
v
)
;
const
string
ToString_PP_TrueTypeFontWeight_Dev
(
const
PP_TrueTypeFontWeight_Dev
&
v
)
;
void
FromJSON_PP_TrueTypeFontWeight_Dev
(
JSONIterator
&
iterator
PP_TrueTypeFontWeight_Dev
&
value
)
;
const
string
ToString_PP_TrueTypeFontWidth_Dev
(
const
PP_TrueTypeFontWidth_Dev
*
v
)
;
const
string
ToString_PP_TrueTypeFontWidth_Dev
(
const
PP_TrueTypeFontWidth_Dev
&
v
)
;
void
FromJSON_PP_TrueTypeFontWidth_Dev
(
JSONIterator
&
iterator
PP_TrueTypeFontWidth_Dev
&
value
)
;
const
string
ToString_PP_TrueTypeFontCharset_Dev
(
const
PP_TrueTypeFontCharset_Dev
*
v
)
;
const
string
ToString_PP_TrueTypeFontCharset_Dev
(
const
PP_TrueTypeFontCharset_Dev
&
v
)
;
void
FromJSON_PP_TrueTypeFontCharset_Dev
(
JSONIterator
&
iterator
PP_TrueTypeFontCharset_Dev
&
value
)
;
const
string
ToString_PP_TrueTypeFontDesc_Dev
(
const
PP_TrueTypeFontDesc_Dev
*
v
)
;
const
string
ToString_PP_TrueTypeFontDesc_Dev
(
const
PP_TrueTypeFontDesc_Dev
&
v
)
;
void
FromJSON_PP_TrueTypeFontDesc_Dev
(
JSONIterator
&
iterator
PP_TrueTypeFontDesc_Dev
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_TrueTypeFont_Dev_0_1
*
_real_PPB_TrueTypeFont_Dev_0_1
;
#
endif
const
string
ToString_PPB_TrueTypeFont_Dev
(
const
PPB_TrueTypeFont_Dev_0_1
*
v
)
;
const
string
ToString_PP_URLComponent_Dev
(
const
PP_URLComponent_Dev
*
v
)
;
const
string
ToString_PP_URLComponent_Dev
(
const
PP_URLComponent_Dev
&
v
)
;
void
FromJSON_PP_URLComponent_Dev
(
JSONIterator
&
iterator
PP_URLComponent_Dev
&
value
)
;
const
string
ToString_PP_URLComponents_Dev
(
const
PP_URLComponents_Dev
*
v
)
;
const
string
ToString_PP_URLComponents_Dev
(
const
PP_URLComponents_Dev
&
v
)
;
void
FromJSON_PP_URLComponents_Dev
(
JSONIterator
&
iterator
PP_URLComponents_Dev
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_URLUtil_Dev_0_6
*
_real_PPB_URLUtil_Dev_0_6
;
#
endif
const
string
ToString_PPB_URLUtil_Dev
(
const
PPB_URLUtil_Dev_0_6
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_URLUtil_Dev_0_7
*
_real_PPB_URLUtil_Dev_0_7
;
#
endif
const
string
ToString_PPB_URLUtil_Dev
(
const
PPB_URLUtil_Dev_0_7
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Var_Deprecated_0_3
*
_real_PPB_Var_Deprecated_0_3
;
#
endif
const
string
ToString_PPB_Var_Deprecated
(
const
PPB_Var_Deprecated_0_3
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VideoCapture_Dev_0_3
*
_real_PPB_VideoCapture_Dev_0_3
;
#
endif
const
string
ToString_PPB_VideoCapture_Dev
(
const
PPB_VideoCapture_Dev_0_3
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VideoDecoder_Dev_0_16
*
_real_PPB_VideoDecoder_Dev_0_16
;
#
endif
const
string
ToString_PPB_VideoDecoder_Dev
(
const
PPB_VideoDecoder_Dev_0_16
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_View_Dev_0_1
*
_real_PPB_View_Dev_0_1
;
#
endif
const
string
ToString_PPB_View_Dev
(
const
PPB_View_Dev_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPP_Class_Deprecated_1_0
*
_real_PPP_Class_Deprecated_1_0
;
#
endif
static
char
*
Call_PPP_Class_Deprecated
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_NetworkState_Dev_0_1
*
_real_PPP_NetworkState_Dev_0_1
;
#
endif
static
char
*
Call_PPP_NetworkState_Dev
(
void
*
_interface
JSONIterator
&
iterator
)
;
const
string
ToString_PP_PrintPageNumberRange_Dev
(
const
PP_PrintPageNumberRange_Dev
*
v
)
;
const
string
ToString_PP_PrintPageNumberRange_Dev
(
const
PP_PrintPageNumberRange_Dev
&
v
)
;
void
FromJSON_PP_PrintPageNumberRange_Dev
(
JSONIterator
&
iterator
PP_PrintPageNumberRange_Dev
&
value
)
;
#
ifdef
INTERPOSE
static
PPP_Printing_Dev_0_6
*
_real_PPP_Printing_Dev_0_6
;
#
endif
static
char
*
Call_PPP_Printing_Dev
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_TextInput_Dev_0_1
*
_real_PPP_TextInput_Dev_0_1
;
#
endif
static
char
*
Call_PPP_TextInput_Dev
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_VideoCapture_Dev_0_1
*
_real_PPP_VideoCapture_Dev_0_1
;
#
endif
static
char
*
Call_PPP_VideoCapture_Dev
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_VideoDecoder_Dev_0_11
*
_real_PPP_VideoDecoder_Dev_0_11
;
#
endif
static
char
*
Call_PPP_VideoDecoder_Dev
(
void
*
_interface
JSONIterator
&
iterator
)
;
const
string
ToString_PP_DecryptTrackingInfo
(
const
PP_DecryptTrackingInfo
*
v
)
;
const
string
ToString_PP_DecryptTrackingInfo
(
const
PP_DecryptTrackingInfo
&
v
)
;
void
FromJSON_PP_DecryptTrackingInfo
(
JSONIterator
&
iterator
PP_DecryptTrackingInfo
&
value
)
;
const
string
ToString_PP_DecryptSubsampleDescription
(
const
PP_DecryptSubsampleDescription
*
v
)
;
const
string
ToString_PP_DecryptSubsampleDescription
(
const
PP_DecryptSubsampleDescription
&
v
)
;
void
FromJSON_PP_DecryptSubsampleDescription
(
JSONIterator
&
iterator
PP_DecryptSubsampleDescription
&
value
)
;
const
string
ToString_PP_EncryptedBlockInfo
(
const
PP_EncryptedBlockInfo
*
v
)
;
const
string
ToString_PP_EncryptedBlockInfo
(
const
PP_EncryptedBlockInfo
&
v
)
;
void
FromJSON_PP_EncryptedBlockInfo
(
JSONIterator
&
iterator
PP_EncryptedBlockInfo
&
value
)
;
const
string
ToString_PP_DecryptedFrameFormat
(
const
PP_DecryptedFrameFormat
*
v
)
;
const
string
ToString_PP_DecryptedFrameFormat
(
const
PP_DecryptedFrameFormat
&
v
)
;
void
FromJSON_PP_DecryptedFrameFormat
(
JSONIterator
&
iterator
PP_DecryptedFrameFormat
&
value
)
;
const
string
ToString_PP_DecryptedSampleFormat
(
const
PP_DecryptedSampleFormat
*
v
)
;
const
string
ToString_PP_DecryptedSampleFormat
(
const
PP_DecryptedSampleFormat
&
v
)
;
void
FromJSON_PP_DecryptedSampleFormat
(
JSONIterator
&
iterator
PP_DecryptedSampleFormat
&
value
)
;
const
string
ToString_PP_DecryptResult
(
const
PP_DecryptResult
*
v
)
;
const
string
ToString_PP_DecryptResult
(
const
PP_DecryptResult
&
v
)
;
void
FromJSON_PP_DecryptResult
(
JSONIterator
&
iterator
PP_DecryptResult
&
value
)
;
const
string
ToString_PP_DecryptedBlockInfo
(
const
PP_DecryptedBlockInfo
*
v
)
;
const
string
ToString_PP_DecryptedBlockInfo
(
const
PP_DecryptedBlockInfo
&
v
)
;
void
FromJSON_PP_DecryptedBlockInfo
(
JSONIterator
&
iterator
PP_DecryptedBlockInfo
&
value
)
;
const
string
ToString_PP_DecryptedFramePlanes
(
const
PP_DecryptedFramePlanes
*
v
)
;
const
string
ToString_PP_DecryptedFramePlanes
(
const
PP_DecryptedFramePlanes
&
v
)
;
void
FromJSON_PP_DecryptedFramePlanes
(
JSONIterator
&
iterator
PP_DecryptedFramePlanes
&
value
)
;
const
string
ToString_PP_DecryptedFrameInfo
(
const
PP_DecryptedFrameInfo
*
v
)
;
const
string
ToString_PP_DecryptedFrameInfo
(
const
PP_DecryptedFrameInfo
&
v
)
;
void
FromJSON_PP_DecryptedFrameInfo
(
JSONIterator
&
iterator
PP_DecryptedFrameInfo
&
value
)
;
const
string
ToString_PP_DecryptedSampleInfo
(
const
PP_DecryptedSampleInfo
*
v
)
;
const
string
ToString_PP_DecryptedSampleInfo
(
const
PP_DecryptedSampleInfo
&
v
)
;
void
FromJSON_PP_DecryptedSampleInfo
(
JSONIterator
&
iterator
PP_DecryptedSampleInfo
&
value
)
;
const
string
ToString_PP_AudioCodec
(
const
PP_AudioCodec
*
v
)
;
const
string
ToString_PP_AudioCodec
(
const
PP_AudioCodec
&
v
)
;
void
FromJSON_PP_AudioCodec
(
JSONIterator
&
iterator
PP_AudioCodec
&
value
)
;
const
string
ToString_PP_AudioDecoderConfig
(
const
PP_AudioDecoderConfig
*
v
)
;
const
string
ToString_PP_AudioDecoderConfig
(
const
PP_AudioDecoderConfig
&
v
)
;
void
FromJSON_PP_AudioDecoderConfig
(
JSONIterator
&
iterator
PP_AudioDecoderConfig
&
value
)
;
const
string
ToString_PP_VideoCodec
(
const
PP_VideoCodec
*
v
)
;
const
string
ToString_PP_VideoCodec
(
const
PP_VideoCodec
&
v
)
;
void
FromJSON_PP_VideoCodec
(
JSONIterator
&
iterator
PP_VideoCodec
&
value
)
;
const
string
ToString_PP_VideoCodecProfile
(
const
PP_VideoCodecProfile
*
v
)
;
const
string
ToString_PP_VideoCodecProfile
(
const
PP_VideoCodecProfile
&
v
)
;
void
FromJSON_PP_VideoCodecProfile
(
JSONIterator
&
iterator
PP_VideoCodecProfile
&
value
)
;
const
string
ToString_PP_VideoDecoderConfig
(
const
PP_VideoDecoderConfig
*
v
)
;
const
string
ToString_PP_VideoDecoderConfig
(
const
PP_VideoDecoderConfig
&
v
)
;
void
FromJSON_PP_VideoDecoderConfig
(
JSONIterator
&
iterator
PP_VideoDecoderConfig
&
value
)
;
const
string
ToString_PP_DecryptorStreamType
(
const
PP_DecryptorStreamType
*
v
)
;
const
string
ToString_PP_DecryptorStreamType
(
const
PP_DecryptorStreamType
&
v
)
;
void
FromJSON_PP_DecryptorStreamType
(
JSONIterator
&
iterator
PP_DecryptorStreamType
&
value
)
;
const
string
ToString_PP_SessionType
(
const
PP_SessionType
*
v
)
;
const
string
ToString_PP_SessionType
(
const
PP_SessionType
&
v
)
;
void
FromJSON_PP_SessionType
(
JSONIterator
&
iterator
PP_SessionType
&
value
)
;
const
string
ToString_PP_InitDataType
(
const
PP_InitDataType
*
v
)
;
const
string
ToString_PP_InitDataType
(
const
PP_InitDataType
&
v
)
;
void
FromJSON_PP_InitDataType
(
JSONIterator
&
iterator
PP_InitDataType
&
value
)
;
const
string
ToString_PP_CdmExceptionCode
(
const
PP_CdmExceptionCode
*
v
)
;
const
string
ToString_PP_CdmExceptionCode
(
const
PP_CdmExceptionCode
&
v
)
;
void
FromJSON_PP_CdmExceptionCode
(
JSONIterator
&
iterator
PP_CdmExceptionCode
&
value
)
;
const
string
ToString_PP_CdmMessageType
(
const
PP_CdmMessageType
*
v
)
;
const
string
ToString_PP_CdmMessageType
(
const
PP_CdmMessageType
&
v
)
;
void
FromJSON_PP_CdmMessageType
(
JSONIterator
&
iterator
PP_CdmMessageType
&
value
)
;
const
string
ToString_PP_CdmKeyStatus
(
const
PP_CdmKeyStatus
*
v
)
;
const
string
ToString_PP_CdmKeyStatus
(
const
PP_CdmKeyStatus
&
v
)
;
void
FromJSON_PP_CdmKeyStatus
(
JSONIterator
&
iterator
PP_CdmKeyStatus
&
value
)
;
const
string
ToString_PP_KeyInformation
(
const
PP_KeyInformation
*
v
)
;
const
string
ToString_PP_KeyInformation
(
const
PP_KeyInformation
&
v
)
;
void
FromJSON_PP_KeyInformation
(
JSONIterator
&
iterator
PP_KeyInformation
&
value
)
;
const
string
ToString_PP_PrivateFontCharset
(
const
PP_PrivateFontCharset
*
v
)
;
const
string
ToString_PP_PrivateFontCharset
(
const
PP_PrivateFontCharset
&
v
)
;
void
FromJSON_PP_PrivateFontCharset
(
JSONIterator
&
iterator
PP_PrivateFontCharset
&
value
)
;
const
string
ToString_PP_VideoCaptureFormat
(
const
PP_VideoCaptureFormat
*
v
)
;
const
string
ToString_PP_VideoCaptureFormat
(
const
PP_VideoCaptureFormat
&
v
)
;
void
FromJSON_PP_VideoCaptureFormat
(
JSONIterator
&
iterator
PP_VideoCaptureFormat
&
value
)
;
const
string
ToString_PP_VideoFrame_Private
(
const
PP_VideoFrame_Private
*
v
)
;
const
string
ToString_PP_VideoFrame_Private
(
const
PP_VideoFrame_Private
&
v
)
;
void
FromJSON_PP_VideoFrame_Private
(
JSONIterator
&
iterator
PP_VideoFrame_Private
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_CameraCapabilities_Private_0_1
*
_real_PPB_CameraCapabilities_Private_0_1
;
#
endif
const
string
ToString_PPB_CameraCapabilities_Private
(
const
PPB_CameraCapabilities_Private_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_CameraDevice_Private_0_1
*
_real_PPB_CameraDevice_Private_0_1
;
#
endif
const
string
ToString_PPB_CameraDevice_Private
(
const
PPB_CameraDevice_Private_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_ContentDecryptor_Private_0_14
*
_real_PPB_ContentDecryptor_Private_0_14
;
#
endif
const
string
ToString_PPB_ContentDecryptor_Private
(
const
PPB_ContentDecryptor_Private_0_14
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_DisplayColorProfile_Private_0_1
*
_real_PPB_DisplayColorProfile_Private_0_1
;
#
endif
const
string
ToString_PPB_DisplayColorProfile_Private
(
const
PPB_DisplayColorProfile_Private_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Ext_CrxFileSystem_Private_0_1
*
_real_PPB_Ext_CrxFileSystem_Private_0_1
;
#
endif
const
string
ToString_PPB_Ext_CrxFileSystem_Private
(
const
PPB_Ext_CrxFileSystem_Private_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_FileIO_Private_0_1
*
_real_PPB_FileIO_Private_0_1
;
#
endif
const
string
ToString_PPB_FileIO_Private
(
const
PPB_FileIO_Private_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_FileRefPrivate_0_1
*
_real_PPB_FileRefPrivate_0_1
;
#
endif
const
string
ToString_PPB_FileRefPrivate
(
const
PPB_FileRefPrivate_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Find_Private_0_3
*
_real_PPB_Find_Private_0_3
;
#
endif
const
string
ToString_PPB_Find_Private
(
const
PPB_Find_Private_0_3
*
v
)
;
const
string
ToString_PP_FlashLSORestrictions
(
const
PP_FlashLSORestrictions
*
v
)
;
const
string
ToString_PP_FlashLSORestrictions
(
const
PP_FlashLSORestrictions
&
v
)
;
void
FromJSON_PP_FlashLSORestrictions
(
JSONIterator
&
iterator
PP_FlashLSORestrictions
&
value
)
;
const
string
ToString_PP_FlashSetting
(
const
PP_FlashSetting
*
v
)
;
const
string
ToString_PP_FlashSetting
(
const
PP_FlashSetting
&
v
)
;
void
FromJSON_PP_FlashSetting
(
JSONIterator
&
iterator
PP_FlashSetting
&
value
)
;
const
string
ToString_PP_FlashCrashKey
(
const
PP_FlashCrashKey
*
v
)
;
const
string
ToString_PP_FlashCrashKey
(
const
PP_FlashCrashKey
&
v
)
;
void
FromJSON_PP_FlashCrashKey
(
JSONIterator
&
iterator
PP_FlashCrashKey
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_12_4
*
_real_PPB_Flash_12_4
;
#
endif
const
string
ToString_PPB_Flash
(
const
PPB_Flash_12_4
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_12_5
*
_real_PPB_Flash_12_5
;
#
endif
const
string
ToString_PPB_Flash
(
const
PPB_Flash_12_5
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_12_6
*
_real_PPB_Flash_12_6
;
#
endif
const
string
ToString_PPB_Flash
(
const
PPB_Flash_12_6
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_13_0
*
_real_PPB_Flash_13_0
;
#
endif
const
string
ToString_PPB_Flash
(
const
PPB_Flash_13_0
*
v
)
;
const
string
ToString_PP_Flash_Clipboard_Type
(
const
PP_Flash_Clipboard_Type
*
v
)
;
const
string
ToString_PP_Flash_Clipboard_Type
(
const
PP_Flash_Clipboard_Type
&
v
)
;
void
FromJSON_PP_Flash_Clipboard_Type
(
JSONIterator
&
iterator
PP_Flash_Clipboard_Type
&
value
)
;
const
string
ToString_PP_Flash_Clipboard_Format
(
const
PP_Flash_Clipboard_Format
*
v
)
;
const
string
ToString_PP_Flash_Clipboard_Format
(
const
PP_Flash_Clipboard_Format
&
v
)
;
void
FromJSON_PP_Flash_Clipboard_Format
(
JSONIterator
&
iterator
PP_Flash_Clipboard_Format
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_Clipboard_4_0
*
_real_PPB_Flash_Clipboard_4_0
;
#
endif
const
string
ToString_PPB_Flash_Clipboard
(
const
PPB_Flash_Clipboard_4_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_Clipboard_5_0
*
_real_PPB_Flash_Clipboard_5_0
;
#
endif
const
string
ToString_PPB_Flash_Clipboard
(
const
PPB_Flash_Clipboard_5_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_Clipboard_5_1
*
_real_PPB_Flash_Clipboard_5_1
;
#
endif
const
string
ToString_PPB_Flash_Clipboard
(
const
PPB_Flash_Clipboard_5_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_DeviceID_1_0
*
_real_PPB_Flash_DeviceID_1_0
;
#
endif
const
string
ToString_PPB_Flash_DeviceID
(
const
PPB_Flash_DeviceID_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_DRM_1_0
*
_real_PPB_Flash_DRM_1_0
;
#
endif
const
string
ToString_PPB_Flash_DRM
(
const
PPB_Flash_DRM_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_DRM_1_1
*
_real_PPB_Flash_DRM_1_1
;
#
endif
const
string
ToString_PPB_Flash_DRM
(
const
PPB_Flash_DRM_1_1
*
v
)
;
const
string
ToString_PP_DirEntry_Dev
(
const
PP_DirEntry_Dev
*
v
)
;
const
string
ToString_PP_DirEntry_Dev
(
const
PP_DirEntry_Dev
&
v
)
;
void
FromJSON_PP_DirEntry_Dev
(
JSONIterator
&
iterator
PP_DirEntry_Dev
&
value
)
;
const
string
ToString_PP_DirContents_Dev
(
const
PP_DirContents_Dev
*
v
)
;
const
string
ToString_PP_DirContents_Dev
(
const
PP_DirContents_Dev
&
v
)
;
void
FromJSON_PP_DirContents_Dev
(
JSONIterator
&
iterator
PP_DirContents_Dev
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_File_ModuleLocal_3_0
*
_real_PPB_Flash_File_ModuleLocal_3_0
;
#
endif
const
string
ToString_PPB_Flash_File_ModuleLocal
(
const
PPB_Flash_File_ModuleLocal_3_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_File_FileRef_2_0
*
_real_PPB_Flash_File_FileRef_2_0
;
#
endif
const
string
ToString_PPB_Flash_File_FileRef
(
const
PPB_Flash_File_FileRef_2_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_FontFile_0_1
*
_real_PPB_Flash_FontFile_0_1
;
#
endif
const
string
ToString_PPB_Flash_FontFile
(
const
PPB_Flash_FontFile_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_FontFile_0_2
*
_real_PPB_Flash_FontFile_0_2
;
#
endif
const
string
ToString_PPB_Flash_FontFile
(
const
PPB_Flash_FontFile_0_2
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_FlashFullscreen_0_1
*
_real_PPB_FlashFullscreen_0_1
;
#
endif
const
string
ToString_PPB_FlashFullscreen
(
const
PPB_FlashFullscreen_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_FlashFullscreen_1_0
*
_real_PPB_FlashFullscreen_1_0
;
#
endif
const
string
ToString_PPB_FlashFullscreen
(
const
PPB_FlashFullscreen_1_0
*
v
)
;
const
string
ToString_PP_Flash_MenuItem_Type
(
const
PP_Flash_MenuItem_Type
*
v
)
;
const
string
ToString_PP_Flash_MenuItem_Type
(
const
PP_Flash_MenuItem_Type
&
v
)
;
void
FromJSON_PP_Flash_MenuItem_Type
(
JSONIterator
&
iterator
PP_Flash_MenuItem_Type
&
value
)
;
const
string
ToString_PP_Flash_MenuItem
(
const
PP_Flash_MenuItem
*
v
)
;
const
string
ToString_PP_Flash_MenuItem
(
const
PP_Flash_MenuItem
&
v
)
;
void
FromJSON_PP_Flash_MenuItem
(
JSONIterator
&
iterator
PP_Flash_MenuItem
&
value
)
;
const
string
ToString_PP_Flash_Menu
(
const
PP_Flash_Menu
*
v
)
;
const
string
ToString_PP_Flash_Menu
(
const
PP_Flash_Menu
&
v
)
;
void
FromJSON_PP_Flash_Menu
(
JSONIterator
&
iterator
PP_Flash_Menu
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_Menu_0_2
*
_real_PPB_Flash_Menu_0_2
;
#
endif
const
string
ToString_PPB_Flash_Menu
(
const
PPB_Flash_Menu_0_2
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_MessageLoop_0_1
*
_real_PPB_Flash_MessageLoop_0_1
;
#
endif
const
string
ToString_PPB_Flash_MessageLoop
(
const
PPB_Flash_MessageLoop_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Flash_Print_1_0
*
_real_PPB_Flash_Print_1_0
;
#
endif
const
string
ToString_PPB_Flash_Print
(
const
PPB_Flash_Print_1_0
*
v
)
;
const
string
ToString_PP_HostResolver_Private_Flags
(
const
PP_HostResolver_Private_Flags
*
v
)
;
const
string
ToString_PP_HostResolver_Private_Flags
(
const
PP_HostResolver_Private_Flags
&
v
)
;
void
FromJSON_PP_HostResolver_Private_Flags
(
JSONIterator
&
iterator
PP_HostResolver_Private_Flags
&
value
)
;
const
string
ToString_PP_HostResolver_Private_Hint
(
const
PP_HostResolver_Private_Hint
*
v
)
;
const
string
ToString_PP_HostResolver_Private_Hint
(
const
PP_HostResolver_Private_Hint
&
v
)
;
void
FromJSON_PP_HostResolver_Private_Hint
(
JSONIterator
&
iterator
PP_HostResolver_Private_Hint
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_HostResolver_Private_0_1
*
_real_PPB_HostResolver_Private_0_1
;
#
endif
const
string
ToString_PPB_HostResolver_Private
(
const
PPB_HostResolver_Private_0_1
*
v
)
;
const
string
ToString_PP_ExternalPluginResult
(
const
PP_ExternalPluginResult
*
v
)
;
const
string
ToString_PP_ExternalPluginResult
(
const
PP_ExternalPluginResult
&
v
)
;
void
FromJSON_PP_ExternalPluginResult
(
JSONIterator
&
iterator
PP_ExternalPluginResult
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_Instance_Private_0_1
*
_real_PPB_Instance_Private_0_1
;
#
endif
const
string
ToString_PPB_Instance_Private
(
const
PPB_Instance_Private_0_1
*
v
)
;
const
string
ToString_PP_IsolatedFileSystemType_Private
(
const
PP_IsolatedFileSystemType_Private
*
v
)
;
const
string
ToString_PP_IsolatedFileSystemType_Private
(
const
PP_IsolatedFileSystemType_Private
&
v
)
;
void
FromJSON_PP_IsolatedFileSystemType_Private
(
JSONIterator
&
iterator
PP_IsolatedFileSystemType_Private
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_IsolatedFileSystem_Private_0_2
*
_real_PPB_IsolatedFileSystem_Private_0_2
;
#
endif
const
string
ToString_PPB_IsolatedFileSystem_Private
(
const
PPB_IsolatedFileSystem_Private_0_2
*
v
)
;
const
string
ToString_PP_NetAddressFamily_Private
(
const
PP_NetAddressFamily_Private
*
v
)
;
const
string
ToString_PP_NetAddressFamily_Private
(
const
PP_NetAddressFamily_Private
&
v
)
;
void
FromJSON_PP_NetAddressFamily_Private
(
JSONIterator
&
iterator
PP_NetAddressFamily_Private
&
value
)
;
const
string
ToString_PP_NetAddress_Private
(
const
PP_NetAddress_Private
*
v
)
;
const
string
ToString_PP_NetAddress_Private
(
const
PP_NetAddress_Private
&
v
)
;
void
FromJSON_PP_NetAddress_Private
(
JSONIterator
&
iterator
PP_NetAddress_Private
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_NetAddress_Private_0_1
*
_real_PPB_NetAddress_Private_0_1
;
#
endif
const
string
ToString_PPB_NetAddress_Private
(
const
PPB_NetAddress_Private_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_NetAddress_Private_1_0
*
_real_PPB_NetAddress_Private_1_0
;
#
endif
const
string
ToString_PPB_NetAddress_Private
(
const
PPB_NetAddress_Private_1_0
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_NetAddress_Private_1_1
*
_real_PPB_NetAddress_Private_1_1
;
#
endif
const
string
ToString_PPB_NetAddress_Private
(
const
PPB_NetAddress_Private_1_1
*
v
)
;
const
string
ToString_PP_OutputProtectionMethod_Private
(
const
PP_OutputProtectionMethod_Private
*
v
)
;
const
string
ToString_PP_OutputProtectionMethod_Private
(
const
PP_OutputProtectionMethod_Private
&
v
)
;
void
FromJSON_PP_OutputProtectionMethod_Private
(
JSONIterator
&
iterator
PP_OutputProtectionMethod_Private
&
value
)
;
const
string
ToString_PP_OutputProtectionLinkType_Private
(
const
PP_OutputProtectionLinkType_Private
*
v
)
;
const
string
ToString_PP_OutputProtectionLinkType_Private
(
const
PP_OutputProtectionLinkType_Private
&
v
)
;
void
FromJSON_PP_OutputProtectionLinkType_Private
(
JSONIterator
&
iterator
PP_OutputProtectionLinkType_Private
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_OutputProtection_Private_0_1
*
_real_PPB_OutputProtection_Private_0_1
;
#
endif
const
string
ToString_PPB_OutputProtection_Private
(
const
PPB_OutputProtection_Private_0_1
*
v
)
;
const
string
ToString_PP_PDFFeature
(
const
PP_PDFFeature
*
v
)
;
const
string
ToString_PP_PDFFeature
(
const
PP_PDFFeature
&
v
)
;
void
FromJSON_PP_PDFFeature
(
JSONIterator
&
iterator
PP_PDFFeature
&
value
)
;
const
string
ToString_PP_PrivateFontFileDescription
(
const
PP_PrivateFontFileDescription
*
v
)
;
const
string
ToString_PP_PrivateFontFileDescription
(
const
PP_PrivateFontFileDescription
&
v
)
;
void
FromJSON_PP_PrivateFontFileDescription
(
JSONIterator
&
iterator
PP_PrivateFontFileDescription
&
value
)
;
const
string
ToString_PP_PrivateFindResult
(
const
PP_PrivateFindResult
*
v
)
;
const
string
ToString_PP_PrivateFindResult
(
const
PP_PrivateFindResult
&
v
)
;
void
FromJSON_PP_PrivateFindResult
(
JSONIterator
&
iterator
PP_PrivateFindResult
&
value
)
;
const
string
ToString_PP_PrivateAccessibilityViewportInfo
(
const
PP_PrivateAccessibilityViewportInfo
*
v
)
;
const
string
ToString_PP_PrivateAccessibilityViewportInfo
(
const
PP_PrivateAccessibilityViewportInfo
&
v
)
;
void
FromJSON_PP_PrivateAccessibilityViewportInfo
(
JSONIterator
&
iterator
PP_PrivateAccessibilityViewportInfo
&
value
)
;
const
string
ToString_PP_PrivateAccessibilityDocInfo
(
const
PP_PrivateAccessibilityDocInfo
*
v
)
;
const
string
ToString_PP_PrivateAccessibilityDocInfo
(
const
PP_PrivateAccessibilityDocInfo
&
v
)
;
void
FromJSON_PP_PrivateAccessibilityDocInfo
(
JSONIterator
&
iterator
PP_PrivateAccessibilityDocInfo
&
value
)
;
const
string
ToString_PP_PrivateDirection
(
const
PP_PrivateDirection
*
v
)
;
const
string
ToString_PP_PrivateDirection
(
const
PP_PrivateDirection
&
v
)
;
void
FromJSON_PP_PrivateDirection
(
JSONIterator
&
iterator
PP_PrivateDirection
&
value
)
;
const
string
ToString_PP_PrivateAccessibilityPageInfo
(
const
PP_PrivateAccessibilityPageInfo
*
v
)
;
const
string
ToString_PP_PrivateAccessibilityPageInfo
(
const
PP_PrivateAccessibilityPageInfo
&
v
)
;
void
FromJSON_PP_PrivateAccessibilityPageInfo
(
JSONIterator
&
iterator
PP_PrivateAccessibilityPageInfo
&
value
)
;
const
string
ToString_PP_PrivateAccessibilityTextRunInfo
(
const
PP_PrivateAccessibilityTextRunInfo
*
v
)
;
const
string
ToString_PP_PrivateAccessibilityTextRunInfo
(
const
PP_PrivateAccessibilityTextRunInfo
&
v
)
;
void
FromJSON_PP_PrivateAccessibilityTextRunInfo
(
JSONIterator
&
iterator
PP_PrivateAccessibilityTextRunInfo
&
value
)
;
const
string
ToString_PP_PrivateAccessibilityCharInfo
(
const
PP_PrivateAccessibilityCharInfo
*
v
)
;
const
string
ToString_PP_PrivateAccessibilityCharInfo
(
const
PP_PrivateAccessibilityCharInfo
&
v
)
;
void
FromJSON_PP_PrivateAccessibilityCharInfo
(
JSONIterator
&
iterator
PP_PrivateAccessibilityCharInfo
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_PDF_0_1
*
_real_PPB_PDF_0_1
;
#
endif
const
string
ToString_PPB_PDF
(
const
PPB_PDF_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_PlatformVerification_Private_0_2
*
_real_PPB_PlatformVerification_Private_0_2
;
#
endif
const
string
ToString_PPB_PlatformVerification_Private
(
const
PPB_PlatformVerification_Private_0_2
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_TCPServerSocket_Private_0_1
*
_real_PPB_TCPServerSocket_Private_0_1
;
#
endif
const
string
ToString_PPB_TCPServerSocket_Private
(
const
PPB_TCPServerSocket_Private_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_TCPServerSocket_Private_0_2
*
_real_PPB_TCPServerSocket_Private_0_2
;
#
endif
const
string
ToString_PPB_TCPServerSocket_Private
(
const
PPB_TCPServerSocket_Private_0_2
*
v
)
;
const
string
ToString_PP_TCPSocketOption_Private
(
const
PP_TCPSocketOption_Private
*
v
)
;
const
string
ToString_PP_TCPSocketOption_Private
(
const
PP_TCPSocketOption_Private
&
v
)
;
void
FromJSON_PP_TCPSocketOption_Private
(
JSONIterator
&
iterator
PP_TCPSocketOption_Private
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_TCPSocket_Private_0_3
*
_real_PPB_TCPSocket_Private_0_3
;
#
endif
const
string
ToString_PPB_TCPSocket_Private
(
const
PPB_TCPSocket_Private_0_3
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_TCPSocket_Private_0_4
*
_real_PPB_TCPSocket_Private_0_4
;
#
endif
const
string
ToString_PPB_TCPSocket_Private
(
const
PPB_TCPSocket_Private_0_4
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_TCPSocket_Private_0_5
*
_real_PPB_TCPSocket_Private_0_5
;
#
endif
const
string
ToString_PPB_TCPSocket_Private
(
const
PPB_TCPSocket_Private_0_5
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_Testing_Private_1_0
*
_real_PPB_Testing_Private_1_0
;
#
endif
const
string
ToString_PPB_Testing_Private
(
const
PPB_Testing_Private_1_0
*
v
)
;
const
string
ToString_PP_UDPSocketFeature_Private
(
const
PP_UDPSocketFeature_Private
*
v
)
;
const
string
ToString_PP_UDPSocketFeature_Private
(
const
PP_UDPSocketFeature_Private
&
v
)
;
void
FromJSON_PP_UDPSocketFeature_Private
(
JSONIterator
&
iterator
PP_UDPSocketFeature_Private
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_UDPSocket_Private_0_2
*
_real_PPB_UDPSocket_Private_0_2
;
#
endif
const
string
ToString_PPB_UDPSocket_Private
(
const
PPB_UDPSocket_Private_0_2
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_UDPSocket_Private_0_3
*
_real_PPB_UDPSocket_Private_0_3
;
#
endif
const
string
ToString_PPB_UDPSocket_Private
(
const
PPB_UDPSocket_Private_0_3
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_UDPSocket_Private_0_4
*
_real_PPB_UDPSocket_Private_0_4
;
#
endif
const
string
ToString_PPB_UDPSocket_Private
(
const
PPB_UDPSocket_Private_0_4
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_UMA_Private_0_3
*
_real_PPB_UMA_Private_0_3
;
#
endif
const
string
ToString_PPB_UMA_Private
(
const
PPB_UMA_Private_0_3
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VideoDestination_Private_0_1
*
_real_PPB_VideoDestination_Private_0_1
;
#
endif
const
string
ToString_PPB_VideoDestination_Private
(
const
PPB_VideoDestination_Private_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPB_VideoSource_Private_0_1
*
_real_PPB_VideoSource_Private_0_1
;
#
endif
const
string
ToString_PPB_VideoSource_Private
(
const
PPB_VideoSource_Private_0_1
*
v
)
;
const
string
ToString_PP_X509Certificate_Private_Field
(
const
PP_X509Certificate_Private_Field
*
v
)
;
const
string
ToString_PP_X509Certificate_Private_Field
(
const
PP_X509Certificate_Private_Field
&
v
)
;
void
FromJSON_PP_X509Certificate_Private_Field
(
JSONIterator
&
iterator
PP_X509Certificate_Private_Field
&
value
)
;
const
string
ToString_PPB_X509Certificate_Private_Version
(
const
PPB_X509Certificate_Private_Version
*
v
)
;
const
string
ToString_PPB_X509Certificate_Private_Version
(
const
PPB_X509Certificate_Private_Version
&
v
)
;
void
FromJSON_PPB_X509Certificate_Private_Version
(
JSONIterator
&
iterator
PPB_X509Certificate_Private_Version
&
value
)
;
#
ifdef
INTERPOSE
static
PPB_X509Certificate_Private_0_1
*
_real_PPB_X509Certificate_Private_0_1
;
#
endif
const
string
ToString_PPB_X509Certificate_Private
(
const
PPB_X509Certificate_Private_0_1
*
v
)
;
#
ifdef
INTERPOSE
static
PPP_ContentDecryptor_Private_0_16
*
_real_PPP_ContentDecryptor_Private_0_16
;
#
endif
static
char
*
Call_PPP_ContentDecryptor_Private
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_Find_Private_0_3
*
_real_PPP_Find_Private_0_3
;
#
endif
static
char
*
Call_PPP_Find_Private
(
void
*
_interface
JSONIterator
&
iterator
)
;
const
string
ToString_PP_Flash_BrowserOperations_SettingType
(
const
PP_Flash_BrowserOperations_SettingType
*
v
)
;
const
string
ToString_PP_Flash_BrowserOperations_SettingType
(
const
PP_Flash_BrowserOperations_SettingType
&
v
)
;
void
FromJSON_PP_Flash_BrowserOperations_SettingType
(
JSONIterator
&
iterator
PP_Flash_BrowserOperations_SettingType
&
value
)
;
const
string
ToString_PP_Flash_BrowserOperations_Permission
(
const
PP_Flash_BrowserOperations_Permission
*
v
)
;
const
string
ToString_PP_Flash_BrowserOperations_Permission
(
const
PP_Flash_BrowserOperations_Permission
&
v
)
;
void
FromJSON_PP_Flash_BrowserOperations_Permission
(
JSONIterator
&
iterator
PP_Flash_BrowserOperations_Permission
&
value
)
;
const
string
ToString_PP_Flash_BrowserOperations_SiteSetting
(
const
PP_Flash_BrowserOperations_SiteSetting
*
v
)
;
const
string
ToString_PP_Flash_BrowserOperations_SiteSetting
(
const
PP_Flash_BrowserOperations_SiteSetting
&
v
)
;
void
FromJSON_PP_Flash_BrowserOperations_SiteSetting
(
JSONIterator
&
iterator
PP_Flash_BrowserOperations_SiteSetting
&
value
)
;
const
string
ToString_PPB_Flash_BrowserOperations_GetSettingsCallback
(
const
PPB_Flash_BrowserOperations_GetSettingsCallback
&
v
)
;
void
FromJSON_PPB_Flash_BrowserOperations_GetSettingsCallback
(
JSONIterator
&
iterator
PPB_Flash_BrowserOperations_GetSettingsCallback
&
value
)
;
#
ifdef
INTERPOSE
static
PPP_Flash_BrowserOperations_1_0
*
_real_PPP_Flash_BrowserOperations_1_0
;
#
endif
static
char
*
Call_PPP_Flash_BrowserOperations_1_0
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_Flash_BrowserOperations_1_2
*
_real_PPP_Flash_BrowserOperations_1_2
;
#
endif
static
char
*
Call_PPP_Flash_BrowserOperations_1_2
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_Flash_BrowserOperations_1_3
*
_real_PPP_Flash_BrowserOperations_1_3
;
#
endif
static
char
*
Call_PPP_Flash_BrowserOperations
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_Instance_Private_0_1
*
_real_PPP_Instance_Private_0_1
;
#
endif
static
char
*
Call_PPP_Instance_Private
(
void
*
_interface
JSONIterator
&
iterator
)
;
#
ifdef
INTERPOSE
static
PPP_PexeStreamHandler_1_0
*
_real_PPP_PexeStreamHandler_1_0
;
#
endif
static
char
*
Call_PPP_PexeStreamHandler
(
void
*
_interface
JSONIterator
&
iterator
)
;
const
string
ToString_PP_ArrayOutput_GetDataBuffer
(
const
PP_ArrayOutput_GetDataBuffer
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PP_ArrayOutput_GetDataBuffer
(
JSONIterator
&
iterator
PP_ArrayOutput_GetDataBuffer
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
const
string
ToString_PP_ArrayOutput
(
const
PP_ArrayOutput
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_ArrayOutput
(
*
v
)
;
}
const
string
ToString_PP_ArrayOutput
(
const
PP_ArrayOutput
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
GetDataBuffer
"
ToString_PP_ArrayOutput_GetDataBuffer
(
v
.
GetDataBuffer
)
)
;
AddProp
(
x
"
user_data
"
ToString_mem_t
(
v
.
user_data
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_ArrayOutput
(
JSONIterator
&
iterator
PP_ArrayOutput
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_ArrayOutput_GetDataBuffer
(
iterator
value
.
GetDataBuffer
)
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
value
.
user_data
)
;
}
const
string
ToString_PP_Bool
(
const
PP_Bool
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_FALSE
\
"
"
;
case
1
:
return
"
\
"
PP_TRUE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_Bool
(
const
PP_Bool
&
v
)
{
return
ToString_PP_Bool
(
&
v
)
;
}
void
FromJSON_PP_Bool
(
JSONIterator
&
iterator
PP_Bool
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_Bool
(
v
)
;
}
const
string
ToString_PP_VideoProfile
(
const
PP_VideoProfile
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_VIDEOPROFILE_H264BASELINE
\
"
"
;
case
1
:
return
"
\
"
PP_VIDEOPROFILE_H264MAIN
\
"
"
;
case
2
:
return
"
\
"
PP_VIDEOPROFILE_H264EXTENDED
\
"
"
;
case
3
:
return
"
\
"
PP_VIDEOPROFILE_H264HIGH
\
"
"
;
case
4
:
return
"
\
"
PP_VIDEOPROFILE_H264HIGH10PROFILE
\
"
"
;
case
5
:
return
"
\
"
PP_VIDEOPROFILE_H264HIGH422PROFILE
\
"
"
;
case
6
:
return
"
\
"
PP_VIDEOPROFILE_H264HIGH444PREDICTIVEPROFILE
\
"
"
;
case
7
:
return
"
\
"
PP_VIDEOPROFILE_H264SCALABLEBASELINE
\
"
"
;
case
8
:
return
"
\
"
PP_VIDEOPROFILE_H264SCALABLEHIGH
\
"
"
;
case
9
:
return
"
\
"
PP_VIDEOPROFILE_H264STEREOHIGH
\
"
"
;
case
10
:
return
"
\
"
PP_VIDEOPROFILE_H264MULTIVIEWHIGH
\
"
"
;
case
11
:
return
"
\
"
PP_VIDEOPROFILE_VP8_ANY
\
"
"
;
case
12
:
return
"
\
"
PP_VIDEOPROFILE_VP9_ANY
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_VideoProfile
(
const
PP_VideoProfile
&
v
)
{
return
ToString_PP_VideoProfile
(
&
v
)
;
}
void
FromJSON_PP_VideoProfile
(
JSONIterator
&
iterator
PP_VideoProfile
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_VideoProfile
(
v
)
;
}
const
string
ToString_PP_AudioProfile
(
const
PP_AudioProfile
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_AUDIOPROFILE_OPUS
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_AudioProfile
(
const
PP_AudioProfile
&
v
)
{
return
ToString_PP_AudioProfile
(
&
v
)
;
}
void
FromJSON_PP_AudioProfile
(
JSONIterator
&
iterator
PP_AudioProfile
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_AudioProfile
(
v
)
;
}
const
string
ToString_PP_HardwareAcceleration
(
const
PP_HardwareAcceleration
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_HARDWAREACCELERATION_ONLY
\
"
"
;
case
1
:
return
"
\
"
PP_HARDWAREACCELERATION_WITHFALLBACK
\
"
"
;
case
2
:
return
"
\
"
PP_HARDWAREACCELERATION_NONE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_HardwareAcceleration
(
const
PP_HardwareAcceleration
&
v
)
{
return
ToString_PP_HardwareAcceleration
(
&
v
)
;
}
void
FromJSON_PP_HardwareAcceleration
(
JSONIterator
&
iterator
PP_HardwareAcceleration
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_HardwareAcceleration
(
v
)
;
}
const
string
ToString_PP_VideoPicture
(
const
PP_VideoPicture
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_VideoPicture
(
*
v
)
;
}
const
string
ToString_PP_VideoPicture
(
const
PP_VideoPicture
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
decode_id
"
ToString_uint32_t
(
v
.
decode_id
)
)
;
AddProp
(
x
"
texture_id
"
ToString_uint32_t
(
v
.
texture_id
)
)
;
AddProp
(
x
"
texture_target
"
ToString_uint32_t
(
v
.
texture_target
)
)
;
AddProp
(
x
"
texture_size
"
ToString_PP_Size
(
v
.
texture_size
)
)
;
AddProp
(
x
"
visible_rect
"
ToString_PP_Rect
(
v
.
visible_rect
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_VideoPicture
(
JSONIterator
&
iterator
PP_VideoPicture
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
decode_id
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
texture_id
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
texture_target
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
value
.
texture_size
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Rect
(
iterator
value
.
visible_rect
)
;
}
const
string
ToString_PP_VideoPicture_0_1
(
const
PP_VideoPicture_0_1
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_VideoPicture_0_1
(
*
v
)
;
}
const
string
ToString_PP_VideoPicture_0_1
(
const
PP_VideoPicture_0_1
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
decode_id
"
ToString_uint32_t
(
v
.
decode_id
)
)
;
AddProp
(
x
"
texture_id
"
ToString_uint32_t
(
v
.
texture_id
)
)
;
AddProp
(
x
"
texture_target
"
ToString_uint32_t
(
v
.
texture_target
)
)
;
AddProp
(
x
"
texture_size
"
ToString_PP_Size
(
v
.
texture_size
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_VideoPicture_0_1
(
JSONIterator
&
iterator
PP_VideoPicture_0_1
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
decode_id
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
texture_id
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
texture_target
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
value
.
texture_size
)
;
}
const
string
ToString_PP_VideoProfileDescription
(
const
PP_VideoProfileDescription
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_VideoProfileDescription
(
*
v
)
;
}
const
string
ToString_PP_VideoProfileDescription
(
const
PP_VideoProfileDescription
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
profile
"
ToString_PP_VideoProfile
(
v
.
profile
)
)
;
AddProp
(
x
"
max_resolution
"
ToString_PP_Size
(
v
.
max_resolution
)
)
;
AddProp
(
x
"
max_framerate_numerator
"
ToString_uint32_t
(
v
.
max_framerate_numerator
)
)
;
AddProp
(
x
"
max_framerate_denominator
"
ToString_uint32_t
(
v
.
max_framerate_denominator
)
)
;
AddProp
(
x
"
hardware_accelerated
"
ToString_PP_Bool
(
v
.
hardware_accelerated
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_VideoProfileDescription
(
JSONIterator
&
iterator
PP_VideoProfileDescription
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_VideoProfile
(
iterator
value
.
profile
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
value
.
max_resolution
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
max_framerate_numerator
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
max_framerate_denominator
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
hardware_accelerated
)
;
}
const
string
ToString_PP_VideoProfileDescription_0_1
(
const
PP_VideoProfileDescription_0_1
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_VideoProfileDescription_0_1
(
*
v
)
;
}
const
string
ToString_PP_VideoProfileDescription_0_1
(
const
PP_VideoProfileDescription_0_1
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
profile
"
ToString_PP_VideoProfile
(
v
.
profile
)
)
;
AddProp
(
x
"
max_resolution
"
ToString_PP_Size
(
v
.
max_resolution
)
)
;
AddProp
(
x
"
max_framerate_numerator
"
ToString_uint32_t
(
v
.
max_framerate_numerator
)
)
;
AddProp
(
x
"
max_framerate_denominator
"
ToString_uint32_t
(
v
.
max_framerate_denominator
)
)
;
AddProp
(
x
"
acceleration
"
ToString_PP_HardwareAcceleration
(
v
.
acceleration
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_VideoProfileDescription_0_1
(
JSONIterator
&
iterator
PP_VideoProfileDescription_0_1
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_VideoProfile
(
iterator
value
.
profile
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
value
.
max_resolution
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
max_framerate_numerator
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
max_framerate_denominator
)
;
iterator
.
skip
(
)
;
FromJSON_PP_HardwareAcceleration
(
iterator
value
.
acceleration
)
;
}
const
string
ToString_PP_AudioProfileDescription
(
const
PP_AudioProfileDescription
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_AudioProfileDescription
(
*
v
)
;
}
const
string
ToString_PP_AudioProfileDescription
(
const
PP_AudioProfileDescription
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
profile
"
ToString_PP_AudioProfile
(
v
.
profile
)
)
;
AddProp
(
x
"
max_channels
"
ToString_uint32_t
(
v
.
max_channels
)
)
;
AddProp
(
x
"
sample_size
"
ToString_uint32_t
(
v
.
sample_size
)
)
;
AddProp
(
x
"
sample_rate
"
ToString_uint32_t
(
v
.
sample_rate
)
)
;
AddProp
(
x
"
hardware_accelerated
"
ToString_PP_Bool
(
v
.
hardware_accelerated
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_AudioProfileDescription
(
JSONIterator
&
iterator
PP_AudioProfileDescription
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_AudioProfile
(
iterator
value
.
profile
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
max_channels
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
sample_size
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
sample_rate
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
hardware_accelerated
)
;
}
const
string
ToString_PP_BitstreamBuffer
(
const
PP_BitstreamBuffer
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_BitstreamBuffer
(
*
v
)
;
}
const
string
ToString_PP_BitstreamBuffer
(
const
PP_BitstreamBuffer
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
size
"
ToString_uint32_t
(
v
.
size
)
)
;
AddProp
(
x
"
buffer
"
ToString_mem_t
(
v
.
buffer
)
)
;
AddProp
(
x
"
key_frame
"
ToString_PP_Bool
(
v
.
key_frame
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_BitstreamBuffer
(
JSONIterator
&
iterator
PP_BitstreamBuffer
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
size
)
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
value
.
buffer
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
key_frame
)
;
}
const
string
ToString_PP_AudioBitstreamBuffer
(
const
PP_AudioBitstreamBuffer
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_AudioBitstreamBuffer
(
*
v
)
;
}
const
string
ToString_PP_AudioBitstreamBuffer
(
const
PP_AudioBitstreamBuffer
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
size
"
ToString_uint32_t
(
v
.
size
)
)
;
AddProp
(
x
"
buffer
"
ToString_mem_t
(
v
.
buffer
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_AudioBitstreamBuffer
(
JSONIterator
&
iterator
PP_AudioBitstreamBuffer
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
size
)
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
value
.
buffer
)
;
}
const
string
ToString_PP_CompletionCallback_Func
(
const
PP_CompletionCallback_Func
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PP_CompletionCallback_Func
(
JSONIterator
&
iterator
PP_CompletionCallback_Func
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
const
string
ToString_PP_CompletionCallback_Flag
(
const
PP_CompletionCallback_Flag
*
v
)
{
switch
(
*
v
)
{
case
0
<
<
0
:
return
"
\
"
PP_COMPLETIONCALLBACK_FLAG_NONE
\
"
"
;
case
1
<
<
0
:
return
"
\
"
PP_COMPLETIONCALLBACK_FLAG_OPTIONAL
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_CompletionCallback_Flag
(
const
PP_CompletionCallback_Flag
&
v
)
{
return
ToString_PP_CompletionCallback_Flag
(
&
v
)
;
}
void
FromJSON_PP_CompletionCallback_Flag
(
JSONIterator
&
iterator
PP_CompletionCallback_Flag
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_CompletionCallback_Flag
(
v
)
;
}
const
string
ToString_PP_CompletionCallback
(
const
PP_CompletionCallback
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_CompletionCallback
(
*
v
)
;
}
const
string
ToString_PP_CompletionCallback
(
const
PP_CompletionCallback
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
func
"
ToString_PP_CompletionCallback_Func
(
v
.
func
)
)
;
AddProp
(
x
"
user_data
"
ToString_mem_t
(
v
.
user_data
)
)
;
AddProp
(
x
"
flags
"
ToString_int32_t
(
v
.
flags
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_CompletionCallback
(
JSONIterator
&
iterator
PP_CompletionCallback
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_CompletionCallback_Func
(
iterator
value
.
func
)
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
value
.
user_data
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
flags
)
;
}
const
string
ToString_PP_DirectoryEntry
(
const
PP_DirectoryEntry
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_DirectoryEntry
(
*
v
)
;
}
const
string
ToString_PP_DirectoryEntry
(
const
PP_DirectoryEntry
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
file_ref
"
ToString_PP_Resource
(
v
.
file_ref
)
)
;
AddProp
(
x
"
file_type
"
ToString_PP_FileType
(
v
.
file_type
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_DirectoryEntry
(
JSONIterator
&
iterator
PP_DirectoryEntry
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
value
.
file_ref
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FileType
(
iterator
value
.
file_type
)
;
}
const
string
ToString_PP_FileType
(
const
PP_FileType
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_FILETYPE_REGULAR
\
"
"
;
case
1
:
return
"
\
"
PP_FILETYPE_DIRECTORY
\
"
"
;
case
2
:
return
"
\
"
PP_FILETYPE_OTHER
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_FileType
(
const
PP_FileType
&
v
)
{
return
ToString_PP_FileType
(
&
v
)
;
}
void
FromJSON_PP_FileType
(
JSONIterator
&
iterator
PP_FileType
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_FileType
(
v
)
;
}
const
string
ToString_PP_FileSystemType
(
const
PP_FileSystemType
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_FILESYSTEMTYPE_INVALID
\
"
"
;
case
1
:
return
"
\
"
PP_FILESYSTEMTYPE_EXTERNAL
\
"
"
;
case
2
:
return
"
\
"
PP_FILESYSTEMTYPE_LOCALPERSISTENT
\
"
"
;
case
3
:
return
"
\
"
PP_FILESYSTEMTYPE_LOCALTEMPORARY
\
"
"
;
case
4
:
return
"
\
"
PP_FILESYSTEMTYPE_ISOLATED
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_FileSystemType
(
const
PP_FileSystemType
&
v
)
{
return
ToString_PP_FileSystemType
(
&
v
)
;
}
void
FromJSON_PP_FileSystemType
(
JSONIterator
&
iterator
PP_FileSystemType
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_FileSystemType
(
v
)
;
}
const
string
ToString_PP_FileInfo
(
const
PP_FileInfo
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_FileInfo
(
*
v
)
;
}
const
string
ToString_PP_FileInfo
(
const
PP_FileInfo
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
size
"
ToString_int64_t
(
v
.
size
)
)
;
AddProp
(
x
"
type
"
ToString_PP_FileType
(
v
.
type
)
)
;
AddProp
(
x
"
system_type
"
ToString_PP_FileSystemType
(
v
.
system_type
)
)
;
AddProp
(
x
"
creation_time
"
ToString_PP_Time
(
v
.
creation_time
)
)
;
AddProp
(
x
"
last_access_time
"
ToString_PP_Time
(
v
.
last_access_time
)
)
;
AddProp
(
x
"
last_modified_time
"
ToString_PP_Time
(
v
.
last_modified_time
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_FileInfo
(
JSONIterator
&
iterator
PP_FileInfo
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_int64_t
(
iterator
value
.
size
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FileType
(
iterator
value
.
type
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FileSystemType
(
iterator
value
.
system_type
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Time
(
iterator
value
.
creation_time
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Time
(
iterator
value
.
last_access_time
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Time
(
iterator
value
.
last_modified_time
)
;
}
const
string
ToString_PP_Graphics3DAttrib
(
const
PP_Graphics3DAttrib
*
v
)
{
switch
(
*
v
)
{
case
0x3021
:
return
"
\
"
PP_GRAPHICS3DATTRIB_ALPHA_SIZE
\
"
"
;
case
0x3022
:
return
"
\
"
PP_GRAPHICS3DATTRIB_BLUE_SIZE
\
"
"
;
case
0x3023
:
return
"
\
"
PP_GRAPHICS3DATTRIB_GREEN_SIZE
\
"
"
;
case
0x3024
:
return
"
\
"
PP_GRAPHICS3DATTRIB_RED_SIZE
\
"
"
;
case
0x3025
:
return
"
\
"
PP_GRAPHICS3DATTRIB_DEPTH_SIZE
\
"
"
;
case
0x3026
:
return
"
\
"
PP_GRAPHICS3DATTRIB_STENCIL_SIZE
\
"
"
;
case
0x3031
:
return
"
\
"
PP_GRAPHICS3DATTRIB_SAMPLES
\
"
"
;
case
0x3032
:
return
"
\
"
PP_GRAPHICS3DATTRIB_SAMPLE_BUFFERS
\
"
"
;
case
0x3038
:
return
"
\
"
PP_GRAPHICS3DATTRIB_NONE
\
"
"
;
case
0x3056
:
return
"
\
"
PP_GRAPHICS3DATTRIB_HEIGHT
\
"
"
;
case
0x3057
:
return
"
\
"
PP_GRAPHICS3DATTRIB_WIDTH
\
"
"
;
case
0x3093
:
return
"
\
"
PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR
\
"
"
;
case
0x3094
:
return
"
\
"
PP_GRAPHICS3DATTRIB_BUFFER_PRESERVED
\
"
"
;
case
0x3095
:
return
"
\
"
PP_GRAPHICS3DATTRIB_BUFFER_DESTROYED
\
"
"
;
case
0x11000
:
return
"
\
"
PP_GRAPHICS3DATTRIB_GPU_PREFERENCE
\
"
"
;
case
0x11001
:
return
"
\
"
PP_GRAPHICS3DATTRIB_GPU_PREFERENCE_LOW_POWER
\
"
"
;
case
0x11002
:
return
"
\
"
PP_GRAPHICS3DATTRIB_GPU_PREFERENCE_PERFORMANCE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_Graphics3DAttrib
(
const
PP_Graphics3DAttrib
&
v
)
{
return
ToString_PP_Graphics3DAttrib
(
&
v
)
;
}
void
FromJSON_PP_Graphics3DAttrib
(
JSONIterator
&
iterator
PP_Graphics3DAttrib
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_Graphics3DAttrib
(
v
)
;
}
const
string
ToString_PP_InputEvent_Key
(
const
PP_InputEvent_Key
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_InputEvent_Key
(
*
v
)
;
}
const
string
ToString_PP_InputEvent_Key
(
const
PP_InputEvent_Key
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
modifier
"
ToString_uint32_t
(
v
.
modifier
)
)
;
AddProp
(
x
"
key_code
"
ToString_uint32_t
(
v
.
key_code
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_InputEvent_Key
(
JSONIterator
&
iterator
PP_InputEvent_Key
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
modifier
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
key_code
)
;
}
const
string
ToString_PP_InputEvent_Character
(
const
PP_InputEvent_Character
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_InputEvent_Character
(
*
v
)
;
}
const
string
ToString_PP_InputEvent_Character
(
const
PP_InputEvent_Character
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
modifier
"
ToString_uint32_t
(
v
.
modifier
)
)
;
{
BeginProp
(
x
"
text
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
5
;
+
+
_n
)
{
AddElement
(
x
ToString_int8_t
(
v
.
text
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_InputEvent_Character
(
JSONIterator
&
iterator
PP_InputEvent_Character
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
modifier
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
5
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_int8_t
(
iterator
(
value
.
text
)
[
_n
]
)
;
}
}
}
const
string
ToString_PP_InputEvent_Mouse
(
const
PP_InputEvent_Mouse
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_InputEvent_Mouse
(
*
v
)
;
}
const
string
ToString_PP_InputEvent_Mouse
(
const
PP_InputEvent_Mouse
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
modifier
"
ToString_uint32_t
(
v
.
modifier
)
)
;
AddProp
(
x
"
button
"
ToString_PP_InputEvent_MouseButton
(
v
.
button
)
)
;
AddProp
(
x
"
x
"
ToString_float_t
(
v
.
x
)
)
;
AddProp
(
x
"
y
"
ToString_float_t
(
v
.
y
)
)
;
AddProp
(
x
"
click_count
"
ToString_int32_t
(
v
.
click_count
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_InputEvent_Mouse
(
JSONIterator
&
iterator
PP_InputEvent_Mouse
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
modifier
)
;
iterator
.
skip
(
)
;
FromJSON_PP_InputEvent_MouseButton
(
iterator
value
.
button
)
;
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
x
)
;
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
y
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
click_count
)
;
}
const
string
ToString_PP_InputEvent_Wheel
(
const
PP_InputEvent_Wheel
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_InputEvent_Wheel
(
*
v
)
;
}
const
string
ToString_PP_InputEvent_Wheel
(
const
PP_InputEvent_Wheel
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
modifier
"
ToString_uint32_t
(
v
.
modifier
)
)
;
AddProp
(
x
"
delta_x
"
ToString_float_t
(
v
.
delta_x
)
)
;
AddProp
(
x
"
delta_y
"
ToString_float_t
(
v
.
delta_y
)
)
;
AddProp
(
x
"
wheel_ticks_x
"
ToString_float_t
(
v
.
wheel_ticks_x
)
)
;
AddProp
(
x
"
wheel_ticks_y
"
ToString_float_t
(
v
.
wheel_ticks_y
)
)
;
AddProp
(
x
"
scroll_by_page
"
ToString_PP_Bool
(
v
.
scroll_by_page
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_InputEvent_Wheel
(
JSONIterator
&
iterator
PP_InputEvent_Wheel
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
modifier
)
;
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
delta_x
)
;
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
delta_y
)
;
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
wheel_ticks_x
)
;
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
wheel_ticks_y
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
scroll_by_page
)
;
}
const
string
ToString_PP_Instance
(
const
PP_Instance
*
v
)
{
return
ToString_int32_t
(
v
)
;
}
const
string
ToString_PP_Instance
(
const
PP_Instance
&
v
)
{
return
ToString_PP_Instance
(
&
v
)
;
}
void
FromJSON_PP_Instance
(
JSONIterator
&
iterator
PP_Instance
&
value
)
{
FromJSON_int32_t
(
iterator
value
)
;
}
const
string
ToString_PP_Module
(
const
PP_Module
*
v
)
{
return
ToString_int32_t
(
v
)
;
}
const
string
ToString_PP_Module
(
const
PP_Module
&
v
)
{
return
ToString_PP_Module
(
&
v
)
;
}
void
FromJSON_PP_Module
(
JSONIterator
&
iterator
PP_Module
&
value
)
{
FromJSON_int32_t
(
iterator
value
)
;
}
const
string
ToString_PP_Point
(
const
PP_Point
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_Point
(
*
v
)
;
}
const
string
ToString_PP_Point
(
const
PP_Point
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
x
"
ToString_int32_t
(
v
.
x
)
)
;
AddProp
(
x
"
y
"
ToString_int32_t
(
v
.
y
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_Point
(
JSONIterator
&
iterator
PP_Point
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
x
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
y
)
;
}
const
string
ToString_PP_FloatPoint
(
const
PP_FloatPoint
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_FloatPoint
(
*
v
)
;
}
const
string
ToString_PP_FloatPoint
(
const
PP_FloatPoint
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
x
"
ToString_float_t
(
v
.
x
)
)
;
AddProp
(
x
"
y
"
ToString_float_t
(
v
.
y
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_FloatPoint
(
JSONIterator
&
iterator
PP_FloatPoint
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
x
)
;
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
y
)
;
}
const
string
ToString_PP_Rect
(
const
PP_Rect
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_Rect
(
*
v
)
;
}
const
string
ToString_PP_Rect
(
const
PP_Rect
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
point
"
ToString_PP_Point
(
v
.
point
)
)
;
AddProp
(
x
"
size
"
ToString_PP_Size
(
v
.
size
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_Rect
(
JSONIterator
&
iterator
PP_Rect
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Point
(
iterator
value
.
point
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
value
.
size
)
;
}
const
string
ToString_PP_FloatRect
(
const
PP_FloatRect
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_FloatRect
(
*
v
)
;
}
const
string
ToString_PP_FloatRect
(
const
PP_FloatRect
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
point
"
ToString_PP_FloatPoint
(
v
.
point
)
)
;
AddProp
(
x
"
size
"
ToString_PP_FloatSize
(
v
.
size
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_FloatRect
(
JSONIterator
&
iterator
PP_FloatRect
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_FloatPoint
(
iterator
value
.
point
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FloatSize
(
iterator
value
.
size
)
;
}
const
string
ToString_PP_Resource
(
const
PP_Resource
*
v
)
{
return
ToString_int32_t
(
v
)
;
}
const
string
ToString_PP_Resource
(
const
PP_Resource
&
v
)
{
return
ToString_PP_Resource
(
&
v
)
;
}
void
FromJSON_PP_Resource
(
JSONIterator
&
iterator
PP_Resource
&
value
)
{
FromJSON_int32_t
(
iterator
value
)
;
}
const
string
ToString_PP_Size
(
const
PP_Size
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_Size
(
*
v
)
;
}
const
string
ToString_PP_Size
(
const
PP_Size
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
width
"
ToString_int32_t
(
v
.
width
)
)
;
AddProp
(
x
"
height
"
ToString_int32_t
(
v
.
height
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_Size
(
JSONIterator
&
iterator
PP_Size
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
width
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
height
)
;
}
const
string
ToString_PP_FloatSize
(
const
PP_FloatSize
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_FloatSize
(
*
v
)
;
}
const
string
ToString_PP_FloatSize
(
const
PP_FloatSize
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
width
"
ToString_float_t
(
v
.
width
)
)
;
AddProp
(
x
"
height
"
ToString_float_t
(
v
.
height
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_FloatSize
(
JSONIterator
&
iterator
PP_FloatSize
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
width
)
;
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
height
)
;
}
const
string
ToString_PP_Time
(
const
PP_Time
*
v
)
{
return
ToString_double_t
(
v
)
;
}
const
string
ToString_PP_Time
(
const
PP_Time
&
v
)
{
return
ToString_PP_Time
(
&
v
)
;
}
void
FromJSON_PP_Time
(
JSONIterator
&
iterator
PP_Time
&
value
)
{
FromJSON_double_t
(
iterator
value
)
;
}
const
string
ToString_PP_TimeTicks
(
const
PP_TimeTicks
*
v
)
{
return
ToString_double_t
(
v
)
;
}
const
string
ToString_PP_TimeTicks
(
const
PP_TimeTicks
&
v
)
{
return
ToString_PP_TimeTicks
(
&
v
)
;
}
void
FromJSON_PP_TimeTicks
(
JSONIterator
&
iterator
PP_TimeTicks
&
value
)
{
FromJSON_double_t
(
iterator
value
)
;
}
const
string
ToString_PP_TimeDelta
(
const
PP_TimeDelta
*
v
)
{
return
ToString_double_t
(
v
)
;
}
const
string
ToString_PP_TimeDelta
(
const
PP_TimeDelta
&
v
)
{
return
ToString_PP_TimeDelta
(
&
v
)
;
}
void
FromJSON_PP_TimeDelta
(
JSONIterator
&
iterator
PP_TimeDelta
&
value
)
{
FromJSON_double_t
(
iterator
value
)
;
}
const
string
ToString_PP_TouchPoint
(
const
PP_TouchPoint
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_TouchPoint
(
*
v
)
;
}
const
string
ToString_PP_TouchPoint
(
const
PP_TouchPoint
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
id
"
ToString_uint32_t
(
v
.
id
)
)
;
AddProp
(
x
"
position
"
ToString_PP_FloatPoint
(
v
.
position
)
)
;
AddProp
(
x
"
radius
"
ToString_PP_FloatPoint
(
v
.
radius
)
)
;
AddProp
(
x
"
rotation_angle
"
ToString_float_t
(
v
.
rotation_angle
)
)
;
AddProp
(
x
"
pressure
"
ToString_float_t
(
v
.
pressure
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_TouchPoint
(
JSONIterator
&
iterator
PP_TouchPoint
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
id
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FloatPoint
(
iterator
value
.
position
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FloatPoint
(
iterator
value
.
radius
)
;
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
rotation_angle
)
;
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
pressure
)
;
}
const
string
ToString_PP_VarType
(
const
PP_VarType
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_VARTYPE_UNDEFINED
\
"
"
;
case
1
:
return
"
\
"
PP_VARTYPE_NULL
\
"
"
;
case
2
:
return
"
\
"
PP_VARTYPE_BOOL
\
"
"
;
case
3
:
return
"
\
"
PP_VARTYPE_INT32
\
"
"
;
case
4
:
return
"
\
"
PP_VARTYPE_DOUBLE
\
"
"
;
case
5
:
return
"
\
"
PP_VARTYPE_STRING
\
"
"
;
case
6
:
return
"
\
"
PP_VARTYPE_OBJECT
\
"
"
;
case
7
:
return
"
\
"
PP_VARTYPE_ARRAY
\
"
"
;
case
8
:
return
"
\
"
PP_VARTYPE_DICTIONARY
\
"
"
;
case
9
:
return
"
\
"
PP_VARTYPE_ARRAY_BUFFER
\
"
"
;
case
10
:
return
"
\
"
PP_VARTYPE_RESOURCE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_VarType
(
const
PP_VarType
&
v
)
{
return
ToString_PP_VarType
(
&
v
)
;
}
void
FromJSON_PP_VarType
(
JSONIterator
&
iterator
PP_VarType
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_VarType
(
v
)
;
}
const
string
ToString_PP_VarValue
(
const
PP_VarValue
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_VarValue
(
*
v
)
;
}
const
string
ToString_PP_VarValue
(
const
PP_VarValue
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
as_bool
"
ToString_PP_Bool
(
v
.
as_bool
)
)
;
AddProp
(
x
"
as_int
"
ToString_int32_t
(
v
.
as_int
)
)
;
AddProp
(
x
"
as_double
"
ToString_double_t
(
v
.
as_double
)
)
;
AddProp
(
x
"
as_id
"
ToString_int64_t
(
v
.
as_id
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_VarValue
(
JSONIterator
&
iterator
PP_VarValue
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
string
name
=
iterator
.
getCurrentStringAndGotoNext
(
)
.
value
(
)
;
if
(
!
name
.
compare
(
"
as_bool
"
)
)
{
FromJSON_PP_Bool
(
iterator
value
.
as_bool
)
;
}
else
if
(
!
name
.
compare
(
"
as_int
"
)
)
{
FromJSON_int32_t
(
iterator
value
.
as_int
)
;
}
else
if
(
!
name
.
compare
(
"
as_double
"
)
)
{
FromJSON_double_t
(
iterator
value
.
as_double
)
;
}
else
if
(
!
name
.
compare
(
"
as_id
"
)
)
{
FromJSON_int64_t
(
iterator
value
.
as_id
)
;
}
}
const
string
ToString_PP_Var
(
const
PP_Var
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_Var
(
*
v
)
;
}
const
string
ToString_PP_Var
(
const
PP_Var
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
type
"
ToString_PP_VarType
(
v
.
type
)
)
;
AddProp
(
x
"
padding
"
ToString_int32_t
(
v
.
padding
)
)
;
AddProp
(
x
"
value
"
ToString_PP_VarValue
(
v
.
value
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_Var
(
JSONIterator
&
iterator
PP_Var
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_VarType
(
iterator
value
.
type
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
padding
)
;
iterator
.
skip
(
)
;
FromJSON_PP_VarValue
(
iterator
value
.
value
)
;
}
const
string
ToString_PPB_GetInterface
(
const
PPB_GetInterface
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PPB_GetInterface
(
JSONIterator
&
iterator
PPB_GetInterface
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
const
string
ToString_PPB_Audio_Callback
(
const
PPB_Audio_Callback_1_0
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PPB_Audio_Callback
(
JSONIterator
&
iterator
PPB_Audio_Callback_1_0
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
const
string
ToString_PPB_Audio_Callback
(
const
PPB_Audio_Callback
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PPB_Audio_Callback
(
JSONIterator
&
iterator
PPB_Audio_Callback
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
namespace
ns_PPB_Audio_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
PP_Resource
config
PPB_Audio_Callback_1_0
audio_callback
void
*
user_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Audio
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
config
"
ToString_PP_Resource
(
config
)
)
;
AddProp
(
ss
"
audio_callback
"
ToString_PPB_Audio_Callback
(
audio_callback
)
)
;
AddProp
(
ss
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
Logging_PPB_Audio_Callback_1_0_holder
*
audio_callback_holder
=
new
Logging_PPB_Audio_Callback_1_0_holder
(
)
;
audio_callback_holder
-
>
func
=
audio_callback
;
audio_callback_holder
-
>
user_data
=
user_data
;
user_data
=
audio_callback_holder
;
int32_t
rval
=
(
(
PPB_Audio_1_0
*
)
RealGetInterface
(
"
PPB_Audio
;
1
.
0
"
)
)
-
>
Create
(
instance
config
Logging_PPB_Audio_Callback_1_0
user_data
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsAudio_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Audio
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsAudio
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Audio_1_0
*
)
RealGetInterface
(
"
PPB_Audio
;
1
.
0
"
)
)
-
>
IsAudio
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetCurrentConfig_1_0
(
PP_Resource
audio
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Audio
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCurrentConfig
\
"
"
)
;
AddProp
(
ss
"
audio
"
ToString_PP_Resource
(
audio
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Audio_1_0
*
)
RealGetInterface
(
"
PPB_Audio
;
1
.
0
"
)
)
-
>
GetCurrentConfig
(
audio
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
StartPlayback_1_0
(
PP_Resource
audio
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Audio
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StartPlayback
\
"
"
)
;
AddProp
(
ss
"
audio
"
ToString_PP_Resource
(
audio
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Audio_1_0
*
)
RealGetInterface
(
"
PPB_Audio
;
1
.
0
"
)
)
-
>
StartPlayback
(
audio
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
StopPlayback_1_0
(
PP_Resource
audio
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Audio
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StopPlayback
\
"
"
)
;
AddProp
(
ss
"
audio
"
ToString_PP_Resource
(
audio
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Audio_1_0
*
)
RealGetInterface
(
"
PPB_Audio
;
1
.
0
"
)
)
-
>
StopPlayback
(
audio
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Audio_1_0
_PPB_Audio_1_0
=
{
ns_PPB_Audio_1_0
:
:
Create_1_0
ns_PPB_Audio_1_0
:
:
IsAudio_1_0
ns_PPB_Audio_1_0
:
:
GetCurrentConfig_1_0
ns_PPB_Audio_1_0
:
:
StartPlayback_1_0
ns_PPB_Audio_1_0
:
:
StopPlayback_1_0
}
;
const
string
ToString_PPB_Audio
(
const
PPB_Audio_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Audio_1_1
{
static
PP_Resource
Create_1_1
(
PP_Instance
instance
PP_Resource
config
PPB_Audio_Callback
audio_callback
void
*
user_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Audio
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
config
"
ToString_PP_Resource
(
config
)
)
;
AddProp
(
ss
"
audio_callback
"
ToString_PPB_Audio_Callback
(
audio_callback
)
)
;
AddProp
(
ss
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Audio_1_1
*
)
RealGetInterface
(
"
PPB_Audio
;
1
.
1
"
)
)
-
>
Create
(
instance
config
audio_callback
user_data
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsAudio_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Audio
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsAudio
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Audio_1_1
*
)
RealGetInterface
(
"
PPB_Audio
;
1
.
1
"
)
)
-
>
IsAudio
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetCurrentConfig_1_1
(
PP_Resource
audio
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Audio
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCurrentConfig
\
"
"
)
;
AddProp
(
ss
"
audio
"
ToString_PP_Resource
(
audio
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Audio_1_1
*
)
RealGetInterface
(
"
PPB_Audio
;
1
.
1
"
)
)
-
>
GetCurrentConfig
(
audio
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
StartPlayback_1_1
(
PP_Resource
audio
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Audio
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StartPlayback
\
"
"
)
;
AddProp
(
ss
"
audio
"
ToString_PP_Resource
(
audio
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Audio_1_1
*
)
RealGetInterface
(
"
PPB_Audio
;
1
.
1
"
)
)
-
>
StartPlayback
(
audio
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
StopPlayback_1_1
(
PP_Resource
audio
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Audio
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StopPlayback
\
"
"
)
;
AddProp
(
ss
"
audio
"
ToString_PP_Resource
(
audio
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Audio_1_1
*
)
RealGetInterface
(
"
PPB_Audio
;
1
.
1
"
)
)
-
>
StopPlayback
(
audio
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Audio_1_1
_PPB_Audio_1_1
=
{
ns_PPB_Audio_1_1
:
:
Create_1_1
ns_PPB_Audio_1_1
:
:
IsAudio_1_1
ns_PPB_Audio_1_1
:
:
GetCurrentConfig_1_1
ns_PPB_Audio_1_1
:
:
StartPlayback_1_1
ns_PPB_Audio_1_1
:
:
StopPlayback_1_1
}
;
const
string
ToString_PPB_Audio
(
const
PPB_Audio_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_AudioBuffer_SampleRate
(
const
PP_AudioBuffer_SampleRate
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_AUDIOBUFFER_SAMPLERATE_UNKNOWN
\
"
"
;
case
8000
:
return
"
\
"
PP_AUDIOBUFFER_SAMPLERATE_8000
\
"
"
;
case
16000
:
return
"
\
"
PP_AUDIOBUFFER_SAMPLERATE_16000
\
"
"
;
case
22050
:
return
"
\
"
PP_AUDIOBUFFER_SAMPLERATE_22050
\
"
"
;
case
32000
:
return
"
\
"
PP_AUDIOBUFFER_SAMPLERATE_32000
\
"
"
;
case
44100
:
return
"
\
"
PP_AUDIOBUFFER_SAMPLERATE_44100
\
"
"
;
case
48000
:
return
"
\
"
PP_AUDIOBUFFER_SAMPLERATE_48000
\
"
"
;
case
96000
:
return
"
\
"
PP_AUDIOBUFFER_SAMPLERATE_96000
\
"
"
;
case
192000
:
return
"
\
"
PP_AUDIOBUFFER_SAMPLERATE_192000
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_AudioBuffer_SampleRate
(
const
PP_AudioBuffer_SampleRate
&
v
)
{
return
ToString_PP_AudioBuffer_SampleRate
(
&
v
)
;
}
void
FromJSON_PP_AudioBuffer_SampleRate
(
JSONIterator
&
iterator
PP_AudioBuffer_SampleRate
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_AudioBuffer_SampleRate
(
v
)
;
}
const
string
ToString_PP_AudioBuffer_SampleSize
(
const
PP_AudioBuffer_SampleSize
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_AUDIOBUFFER_SAMPLESIZE_UNKNOWN
\
"
"
;
case
2
:
return
"
\
"
PP_AUDIOBUFFER_SAMPLESIZE_16_BITS
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_AudioBuffer_SampleSize
(
const
PP_AudioBuffer_SampleSize
&
v
)
{
return
ToString_PP_AudioBuffer_SampleSize
(
&
v
)
;
}
void
FromJSON_PP_AudioBuffer_SampleSize
(
JSONIterator
&
iterator
PP_AudioBuffer_SampleSize
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_AudioBuffer_SampleSize
(
v
)
;
}
namespace
ns_PPB_AudioBuffer_0_1
{
static
PP_Bool
IsAudioBuffer_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsAudioBuffer
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_AudioBuffer_0_1
*
)
RealGetInterface
(
"
PPB_AudioBuffer
;
0
.
1
"
)
)
-
>
IsAudioBuffer
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_TimeDelta
GetTimestamp_0_1
(
PP_Resource
buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTimestamp
\
"
"
)
;
AddProp
(
ss
"
buffer
"
ToString_PP_Resource
(
buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
double
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_TimeDelta
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
double
rval
=
(
(
PPB_AudioBuffer_0_1
*
)
RealGetInterface
(
"
PPB_AudioBuffer
;
0
.
1
"
)
)
-
>
GetTimestamp
(
buffer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_TimeDelta
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
SetTimestamp_0_1
(
PP_Resource
buffer
PP_TimeDelta
timestamp
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetTimestamp
\
"
"
)
;
AddProp
(
ss
"
buffer
"
ToString_PP_Resource
(
buffer
)
)
;
AddProp
(
ss
"
timestamp
"
ToString_PP_TimeDelta
(
timestamp
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_AudioBuffer_0_1
*
)
RealGetInterface
(
"
PPB_AudioBuffer
;
0
.
1
"
)
)
-
>
SetTimestamp
(
buffer
timestamp
)
;
#
endif
}
static
PP_AudioBuffer_SampleRate
GetSampleRate_0_1
(
PP_Resource
buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSampleRate
\
"
"
)
;
AddProp
(
ss
"
buffer
"
ToString_PP_Resource
(
buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_AudioBuffer_SampleRate
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_AudioBuffer_SampleRate
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_AudioBuffer_SampleRate
rval
=
(
(
PPB_AudioBuffer_0_1
*
)
RealGetInterface
(
"
PPB_AudioBuffer
;
0
.
1
"
)
)
-
>
GetSampleRate
(
buffer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_AudioBuffer_SampleRate
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_AudioBuffer_SampleSize
GetSampleSize_0_1
(
PP_Resource
buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSampleSize
\
"
"
)
;
AddProp
(
ss
"
buffer
"
ToString_PP_Resource
(
buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_AudioBuffer_SampleSize
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_AudioBuffer_SampleSize
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_AudioBuffer_SampleSize
rval
=
(
(
PPB_AudioBuffer_0_1
*
)
RealGetInterface
(
"
PPB_AudioBuffer
;
0
.
1
"
)
)
-
>
GetSampleSize
(
buffer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_AudioBuffer_SampleSize
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetNumberOfChannels_0_1
(
PP_Resource
buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetNumberOfChannels
\
"
"
)
;
AddProp
(
ss
"
buffer
"
ToString_PP_Resource
(
buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_AudioBuffer_0_1
*
)
RealGetInterface
(
"
PPB_AudioBuffer
;
0
.
1
"
)
)
-
>
GetNumberOfChannels
(
buffer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetNumberOfSamples_0_1
(
PP_Resource
buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetNumberOfSamples
\
"
"
)
;
AddProp
(
ss
"
buffer
"
ToString_PP_Resource
(
buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_AudioBuffer_0_1
*
)
RealGetInterface
(
"
PPB_AudioBuffer
;
0
.
1
"
)
)
-
>
GetNumberOfSamples
(
buffer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
*
GetDataBuffer_0_1
(
PP_Resource
buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDataBuffer
\
"
"
)
;
AddProp
(
ss
"
buffer
"
ToString_PP_Resource
(
buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
void
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_mem_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
void
*
rval
=
(
(
PPB_AudioBuffer_0_1
*
)
RealGetInterface
(
"
PPB_AudioBuffer
;
0
.
1
"
)
)
-
>
GetDataBuffer
(
buffer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_mem_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetDataBufferSize_0_1
(
PP_Resource
buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDataBufferSize
\
"
"
)
;
AddProp
(
ss
"
buffer
"
ToString_PP_Resource
(
buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_AudioBuffer_0_1
*
)
RealGetInterface
(
"
PPB_AudioBuffer
;
0
.
1
"
)
)
-
>
GetDataBufferSize
(
buffer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_AudioBuffer_0_1
_PPB_AudioBuffer_0_1
=
{
ns_PPB_AudioBuffer_0_1
:
:
IsAudioBuffer_0_1
ns_PPB_AudioBuffer_0_1
:
:
GetTimestamp_0_1
ns_PPB_AudioBuffer_0_1
:
:
SetTimestamp_0_1
ns_PPB_AudioBuffer_0_1
:
:
GetSampleRate_0_1
ns_PPB_AudioBuffer_0_1
:
:
GetSampleSize_0_1
ns_PPB_AudioBuffer_0_1
:
:
GetNumberOfChannels_0_1
ns_PPB_AudioBuffer_0_1
:
:
GetNumberOfSamples_0_1
ns_PPB_AudioBuffer_0_1
:
:
GetDataBuffer_0_1
ns_PPB_AudioBuffer_0_1
:
:
GetDataBufferSize_0_1
}
;
const
string
ToString_PPB_AudioBuffer
(
const
PPB_AudioBuffer_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_AudioSampleRate
(
const
PP_AudioSampleRate
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_AUDIOSAMPLERATE_NONE
\
"
"
;
case
44100
:
return
"
\
"
PP_AUDIOSAMPLERATE_44100
\
"
"
;
case
48000
:
return
"
\
"
PP_AUDIOSAMPLERATE_48000
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_AudioSampleRate
(
const
PP_AudioSampleRate
&
v
)
{
return
ToString_PP_AudioSampleRate
(
&
v
)
;
}
void
FromJSON_PP_AudioSampleRate
(
JSONIterator
&
iterator
PP_AudioSampleRate
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_AudioSampleRate
(
v
)
;
}
namespace
ns_PPB_AudioConfig_1_0
{
static
PP_Resource
CreateStereo16Bit_1_0
(
PP_Instance
instance
PP_AudioSampleRate
sample_rate
uint32_t
sample_frame_count
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioConfig
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateStereo16Bit
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
sample_rate
"
ToString_PP_AudioSampleRate
(
sample_rate
)
)
;
AddProp
(
ss
"
sample_frame_count
"
ToString_uint32_t
(
sample_frame_count
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_AudioConfig_1_0
*
)
RealGetInterface
(
"
PPB_AudioConfig
;
1
.
0
"
)
)
-
>
CreateStereo16Bit
(
instance
sample_rate
sample_frame_count
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
RecommendSampleFrameCount_1_0
(
PP_AudioSampleRate
sample_rate
uint32_t
requested_sample_frame_count
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioConfig
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecommendSampleFrameCount
\
"
"
)
;
AddProp
(
ss
"
sample_rate
"
ToString_PP_AudioSampleRate
(
sample_rate
)
)
;
AddProp
(
ss
"
requested_sample_frame_count
"
ToString_uint32_t
(
requested_sample_frame_count
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_AudioConfig_1_0
*
)
RealGetInterface
(
"
PPB_AudioConfig
;
1
.
0
"
)
)
-
>
RecommendSampleFrameCount
(
sample_rate
requested_sample_frame_count
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsAudioConfig_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioConfig
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsAudioConfig
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_AudioConfig_1_0
*
)
RealGetInterface
(
"
PPB_AudioConfig
;
1
.
0
"
)
)
-
>
IsAudioConfig
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_AudioSampleRate
GetSampleRate_1_0
(
PP_Resource
config
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioConfig
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSampleRate
\
"
"
)
;
AddProp
(
ss
"
config
"
ToString_PP_Resource
(
config
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_AudioSampleRate
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_AudioSampleRate
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_AudioSampleRate
rval
=
(
(
PPB_AudioConfig_1_0
*
)
RealGetInterface
(
"
PPB_AudioConfig
;
1
.
0
"
)
)
-
>
GetSampleRate
(
config
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_AudioSampleRate
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetSampleFrameCount_1_0
(
PP_Resource
config
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioConfig
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSampleFrameCount
\
"
"
)
;
AddProp
(
ss
"
config
"
ToString_PP_Resource
(
config
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_AudioConfig_1_0
*
)
RealGetInterface
(
"
PPB_AudioConfig
;
1
.
0
"
)
)
-
>
GetSampleFrameCount
(
config
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_AudioConfig_1_0
_PPB_AudioConfig_1_0
=
{
ns_PPB_AudioConfig_1_0
:
:
CreateStereo16Bit_1_0
ns_PPB_AudioConfig_1_0
:
:
RecommendSampleFrameCount_1_0
ns_PPB_AudioConfig_1_0
:
:
IsAudioConfig_1_0
ns_PPB_AudioConfig_1_0
:
:
GetSampleRate_1_0
ns_PPB_AudioConfig_1_0
:
:
GetSampleFrameCount_1_0
}
;
const
string
ToString_PPB_AudioConfig
(
const
PPB_AudioConfig_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_AudioConfig_1_1
{
static
PP_Resource
CreateStereo16Bit_1_1
(
PP_Instance
instance
PP_AudioSampleRate
sample_rate
uint32_t
sample_frame_count
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioConfig
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateStereo16Bit
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
sample_rate
"
ToString_PP_AudioSampleRate
(
sample_rate
)
)
;
AddProp
(
ss
"
sample_frame_count
"
ToString_uint32_t
(
sample_frame_count
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_AudioConfig_1_1
*
)
RealGetInterface
(
"
PPB_AudioConfig
;
1
.
1
"
)
)
-
>
CreateStereo16Bit
(
instance
sample_rate
sample_frame_count
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
RecommendSampleFrameCount_1_1
(
PP_Instance
instance
PP_AudioSampleRate
sample_rate
uint32_t
requested_sample_frame_count
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioConfig
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecommendSampleFrameCount
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
sample_rate
"
ToString_PP_AudioSampleRate
(
sample_rate
)
)
;
AddProp
(
ss
"
requested_sample_frame_count
"
ToString_uint32_t
(
requested_sample_frame_count
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_AudioConfig_1_1
*
)
RealGetInterface
(
"
PPB_AudioConfig
;
1
.
1
"
)
)
-
>
RecommendSampleFrameCount
(
instance
sample_rate
requested_sample_frame_count
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsAudioConfig_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioConfig
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsAudioConfig
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_AudioConfig_1_1
*
)
RealGetInterface
(
"
PPB_AudioConfig
;
1
.
1
"
)
)
-
>
IsAudioConfig
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_AudioSampleRate
GetSampleRate_1_1
(
PP_Resource
config
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioConfig
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSampleRate
\
"
"
)
;
AddProp
(
ss
"
config
"
ToString_PP_Resource
(
config
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_AudioSampleRate
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_AudioSampleRate
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_AudioSampleRate
rval
=
(
(
PPB_AudioConfig_1_1
*
)
RealGetInterface
(
"
PPB_AudioConfig
;
1
.
1
"
)
)
-
>
GetSampleRate
(
config
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_AudioSampleRate
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetSampleFrameCount_1_1
(
PP_Resource
config
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioConfig
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSampleFrameCount
\
"
"
)
;
AddProp
(
ss
"
config
"
ToString_PP_Resource
(
config
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_AudioConfig_1_1
*
)
RealGetInterface
(
"
PPB_AudioConfig
;
1
.
1
"
)
)
-
>
GetSampleFrameCount
(
config
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_AudioSampleRate
RecommendSampleRate_1_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioConfig
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecommendSampleRate
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_AudioSampleRate
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_AudioSampleRate
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_AudioSampleRate
rval
=
(
(
PPB_AudioConfig_1_1
*
)
RealGetInterface
(
"
PPB_AudioConfig
;
1
.
1
"
)
)
-
>
RecommendSampleRate
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_AudioSampleRate
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_AudioConfig_1_1
_PPB_AudioConfig_1_1
=
{
ns_PPB_AudioConfig_1_1
:
:
CreateStereo16Bit_1_1
ns_PPB_AudioConfig_1_1
:
:
RecommendSampleFrameCount_1_1
ns_PPB_AudioConfig_1_1
:
:
IsAudioConfig_1_1
ns_PPB_AudioConfig_1_1
:
:
GetSampleRate_1_1
ns_PPB_AudioConfig_1_1
:
:
GetSampleFrameCount_1_1
ns_PPB_AudioConfig_1_1
:
:
RecommendSampleRate_1_1
}
;
const
string
ToString_PPB_AudioConfig
(
const
PPB_AudioConfig_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_AudioEncoder_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_AudioEncoder_0_1
*
)
RealGetInterface
(
"
PPB_AudioEncoder
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsAudioEncoder_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsAudioEncoder
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_AudioEncoder_0_1
*
)
RealGetInterface
(
"
PPB_AudioEncoder
;
0
.
1
"
)
)
-
>
IsAudioEncoder
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetSupportedProfiles_0_1
(
PP_Resource
audio_encoder
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSupportedProfiles
\
"
"
)
;
AddProp
(
ss
"
audio_encoder
"
ToString_PP_Resource
(
audio_encoder
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_AudioEncoder_0_1
*
)
RealGetInterface
(
"
PPB_AudioEncoder
;
0
.
1
"
)
)
-
>
GetSupportedProfiles
(
audio_encoder
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Initialize_0_1
(
PP_Resource
audio_encoder
uint32_t
channels
PP_AudioBuffer_SampleRate
input_sample_rate
PP_AudioBuffer_SampleSize
input_sample_size
PP_AudioProfile
output_profile
uint32_t
initial_bitrate
PP_HardwareAcceleration
acceleration
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Initialize
\
"
"
)
;
AddProp
(
ss
"
audio_encoder
"
ToString_PP_Resource
(
audio_encoder
)
)
;
AddProp
(
ss
"
channels
"
ToString_uint32_t
(
channels
)
)
;
AddProp
(
ss
"
input_sample_rate
"
ToString_PP_AudioBuffer_SampleRate
(
input_sample_rate
)
)
;
AddProp
(
ss
"
input_sample_size
"
ToString_PP_AudioBuffer_SampleSize
(
input_sample_size
)
)
;
AddProp
(
ss
"
output_profile
"
ToString_PP_AudioProfile
(
output_profile
)
)
;
AddProp
(
ss
"
initial_bitrate
"
ToString_uint32_t
(
initial_bitrate
)
)
;
AddProp
(
ss
"
acceleration
"
ToString_PP_HardwareAcceleration
(
acceleration
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_AudioEncoder_0_1
*
)
RealGetInterface
(
"
PPB_AudioEncoder
;
0
.
1
"
)
)
-
>
Initialize
(
audio_encoder
channels
input_sample_rate
input_sample_size
output_profile
initial_bitrate
acceleration
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetNumberOfSamples_0_1
(
PP_Resource
audio_encoder
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetNumberOfSamples
\
"
"
)
;
AddProp
(
ss
"
audio_encoder
"
ToString_PP_Resource
(
audio_encoder
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_AudioEncoder_0_1
*
)
RealGetInterface
(
"
PPB_AudioEncoder
;
0
.
1
"
)
)
-
>
GetNumberOfSamples
(
audio_encoder
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetBuffer_0_1
(
PP_Resource
audio_encoder
PP_Resource
*
audio_buffer
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBuffer
\
"
"
)
;
AddProp
(
ss
"
audio_encoder
"
ToString_PP_Resource
(
audio_encoder
)
)
;
AddProp
(
ss
"
audio_buffer
"
PointerToString
(
audio_buffer
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
audio_buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_AudioEncoder_0_1
*
)
RealGetInterface
(
"
PPB_AudioEncoder
;
0
.
1
"
)
)
-
>
GetBuffer
(
audio_encoder
audio_buffer
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
audio_buffer
)
{
AddProp
(
os
"
audio_buffer
"
ToString_PP_Resource
(
audio_buffer
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Encode_0_1
(
PP_Resource
audio_encoder
PP_Resource
audio_buffer
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Encode
\
"
"
)
;
AddProp
(
ss
"
audio_encoder
"
ToString_PP_Resource
(
audio_encoder
)
)
;
AddProp
(
ss
"
audio_buffer
"
ToString_PP_Resource
(
audio_buffer
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_AudioEncoder_0_1
*
)
RealGetInterface
(
"
PPB_AudioEncoder
;
0
.
1
"
)
)
-
>
Encode
(
audio_encoder
audio_buffer
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetBitstreamBuffer_0_1
(
PP_Resource
audio_encoder
struct
PP_AudioBitstreamBuffer
*
bitstream_buffer
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBitstreamBuffer
\
"
"
)
;
AddProp
(
ss
"
audio_encoder
"
ToString_PP_Resource
(
audio_encoder
)
)
;
AddProp
(
ss
"
bitstream_buffer
"
PointerToString
(
bitstream_buffer
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
bitstream_buffer
)
{
iterator
.
skip
(
)
;
FromJSON_PP_AudioBitstreamBuffer
(
iterator
*
bitstream_buffer
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_AudioEncoder_0_1
*
)
RealGetInterface
(
"
PPB_AudioEncoder
;
0
.
1
"
)
)
-
>
GetBitstreamBuffer
(
audio_encoder
bitstream_buffer
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
bitstream_buffer
)
{
AddProp
(
os
"
bitstream_buffer
"
ToString_PP_AudioBitstreamBuffer
(
bitstream_buffer
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
RecycleBitstreamBuffer_0_1
(
PP_Resource
audio_encoder
const
struct
PP_AudioBitstreamBuffer
*
bitstream_buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecycleBitstreamBuffer
\
"
"
)
;
AddProp
(
ss
"
audio_encoder
"
ToString_PP_Resource
(
audio_encoder
)
)
;
AddProp
(
ss
"
bitstream_buffer
"
ToString_PP_AudioBitstreamBuffer
(
bitstream_buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_AudioEncoder_0_1
*
)
RealGetInterface
(
"
PPB_AudioEncoder
;
0
.
1
"
)
)
-
>
RecycleBitstreamBuffer
(
audio_encoder
bitstream_buffer
)
;
#
endif
}
static
void
RequestBitrateChange_0_1
(
PP_Resource
audio_encoder
uint32_t
bitrate
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RequestBitrateChange
\
"
"
)
;
AddProp
(
ss
"
audio_encoder
"
ToString_PP_Resource
(
audio_encoder
)
)
;
AddProp
(
ss
"
bitrate
"
ToString_uint32_t
(
bitrate
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_AudioEncoder_0_1
*
)
RealGetInterface
(
"
PPB_AudioEncoder
;
0
.
1
"
)
)
-
>
RequestBitrateChange
(
audio_encoder
bitrate
)
;
#
endif
}
static
void
Close_0_1
(
PP_Resource
audio_encoder
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
audio_encoder
"
ToString_PP_Resource
(
audio_encoder
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_AudioEncoder_0_1
*
)
RealGetInterface
(
"
PPB_AudioEncoder
;
0
.
1
"
)
)
-
>
Close
(
audio_encoder
)
;
#
endif
}
}
static
PPB_AudioEncoder_0_1
_PPB_AudioEncoder_0_1
=
{
ns_PPB_AudioEncoder_0_1
:
:
Create_0_1
ns_PPB_AudioEncoder_0_1
:
:
IsAudioEncoder_0_1
ns_PPB_AudioEncoder_0_1
:
:
GetSupportedProfiles_0_1
ns_PPB_AudioEncoder_0_1
:
:
Initialize_0_1
ns_PPB_AudioEncoder_0_1
:
:
GetNumberOfSamples_0_1
ns_PPB_AudioEncoder_0_1
:
:
GetBuffer_0_1
ns_PPB_AudioEncoder_0_1
:
:
Encode_0_1
ns_PPB_AudioEncoder_0_1
:
:
GetBitstreamBuffer_0_1
ns_PPB_AudioEncoder_0_1
:
:
RecycleBitstreamBuffer_0_1
ns_PPB_AudioEncoder_0_1
:
:
RequestBitrateChange_0_1
ns_PPB_AudioEncoder_0_1
:
:
Close_0_1
}
;
const
string
ToString_PPB_AudioEncoder
(
const
PPB_AudioEncoder_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Compositor_0_1
{
static
PP_Bool
IsCompositor_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Compositor
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsCompositor
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Compositor_0_1
*
)
RealGetInterface
(
"
PPB_Compositor
;
0
.
1
"
)
)
-
>
IsCompositor
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Compositor
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Compositor_0_1
*
)
RealGetInterface
(
"
PPB_Compositor
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
AddLayer_0_1
(
PP_Resource
compositor
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Compositor
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AddLayer
\
"
"
)
;
AddProp
(
ss
"
compositor
"
ToString_PP_Resource
(
compositor
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Compositor_0_1
*
)
RealGetInterface
(
"
PPB_Compositor
;
0
.
1
"
)
)
-
>
AddLayer
(
compositor
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
CommitLayers_0_1
(
PP_Resource
compositor
struct
PP_CompletionCallback
cc
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Compositor
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CommitLayers
\
"
"
)
;
AddProp
(
ss
"
compositor
"
ToString_PP_Resource
(
compositor
)
)
;
AddProp
(
ss
"
cc
"
ToString_PP_CompletionCallback
(
cc
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_cc
;
logging_cc
.
func
=
&
Logging_PP_CompletionCallback
;
logging_cc
.
user_data
=
new
PP_CompletionCallback
(
cc
)
;
logging_cc
.
flags
=
cc
.
flags
;
int32_t
rval
=
(
(
PPB_Compositor_0_1
*
)
RealGetInterface
(
"
PPB_Compositor
;
0
.
1
"
)
)
-
>
CommitLayers
(
compositor
logging_cc
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
ResetLayers_0_1
(
PP_Resource
compositor
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Compositor
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ResetLayers
\
"
"
)
;
AddProp
(
ss
"
compositor
"
ToString_PP_Resource
(
compositor
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Compositor_0_1
*
)
RealGetInterface
(
"
PPB_Compositor
;
0
.
1
"
)
)
-
>
ResetLayers
(
compositor
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Compositor_0_1
_PPB_Compositor_0_1
=
{
ns_PPB_Compositor_0_1
:
:
IsCompositor_0_1
ns_PPB_Compositor_0_1
:
:
Create_0_1
ns_PPB_Compositor_0_1
:
:
AddLayer_0_1
ns_PPB_Compositor_0_1
:
:
CommitLayers_0_1
ns_PPB_Compositor_0_1
:
:
ResetLayers_0_1
}
;
const
string
ToString_PPB_Compositor
(
const
PPB_Compositor_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_BlendMode
(
const
PP_BlendMode
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_BLENDMODE_NONE
\
"
"
;
case
1
:
return
"
\
"
PP_BLENDMODE_SRC_OVER
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_BlendMode
(
const
PP_BlendMode
&
v
)
{
return
ToString_PP_BlendMode
(
&
v
)
;
}
void
FromJSON_PP_BlendMode
(
JSONIterator
&
iterator
PP_BlendMode
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_BlendMode
(
v
)
;
}
namespace
ns_PPB_CompositorLayer_0_1
{
static
PP_Bool
IsCompositorLayer_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsCompositorLayer
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_CompositorLayer_0_1
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
1
"
)
)
-
>
IsCompositorLayer
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetColor_0_1
(
PP_Resource
layer
float
red
float
green
float
blue
float
alpha
const
struct
PP_Size
*
size
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetColor
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
red
"
ToString_float_t
(
red
)
)
;
AddProp
(
ss
"
green
"
ToString_float_t
(
green
)
)
;
AddProp
(
ss
"
blue
"
ToString_float_t
(
blue
)
)
;
AddProp
(
ss
"
alpha
"
ToString_float_t
(
alpha
)
)
;
AddProp
(
ss
"
size
"
ToString_PP_Size
(
size
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_1
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
1
"
)
)
-
>
SetColor
(
layer
red
green
blue
alpha
size
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetTexture_0_1
(
PP_Resource
layer
PP_Resource
context
uint32_t
texture
const
struct
PP_Size
*
size
struct
PP_CompletionCallback
cc
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetTexture
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
texture
"
ToString_uint32_t
(
texture
)
)
;
AddProp
(
ss
"
size
"
ToString_PP_Size
(
size
)
)
;
AddProp
(
ss
"
cc
"
ToString_PP_CompletionCallback
(
cc
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_cc
;
logging_cc
.
func
=
&
Logging_PP_CompletionCallback
;
logging_cc
.
user_data
=
new
PP_CompletionCallback
(
cc
)
;
logging_cc
.
flags
=
cc
.
flags
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_1
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
1
"
)
)
-
>
SetTexture
(
layer
context
texture
size
logging_cc
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetImage_0_1
(
PP_Resource
layer
PP_Resource
image_data
const
struct
PP_Size
*
size
struct
PP_CompletionCallback
cc
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetImage
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
AddProp
(
ss
"
size
"
ToString_PP_Size
(
size
)
)
;
AddProp
(
ss
"
cc
"
ToString_PP_CompletionCallback
(
cc
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_cc
;
logging_cc
.
func
=
&
Logging_PP_CompletionCallback
;
logging_cc
.
user_data
=
new
PP_CompletionCallback
(
cc
)
;
logging_cc
.
flags
=
cc
.
flags
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_1
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
1
"
)
)
-
>
SetImage
(
layer
image_data
size
logging_cc
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetClipRect_0_1
(
PP_Resource
layer
const
struct
PP_Rect
*
rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetClipRect
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
rect
"
ToString_PP_Rect
(
rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_1
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
1
"
)
)
-
>
SetClipRect
(
layer
rect
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetTransform_0_1
(
PP_Resource
layer
const
float
matrix
[
16
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetTransform
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
{
BeginProp
(
ss
"
matrix
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
16
;
+
+
_n
)
{
AddElement
(
ss
ToString_float_t
(
matrix
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_1
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
1
"
)
)
-
>
SetTransform
(
layer
matrix
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetOpacity_0_1
(
PP_Resource
layer
float
opacity
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetOpacity
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
opacity
"
ToString_float_t
(
opacity
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_1
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
1
"
)
)
-
>
SetOpacity
(
layer
opacity
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetBlendMode_0_1
(
PP_Resource
layer
PP_BlendMode
mode
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetBlendMode
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
mode
"
ToString_PP_BlendMode
(
mode
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_1
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
1
"
)
)
-
>
SetBlendMode
(
layer
mode
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetSourceRect_0_1
(
PP_Resource
layer
const
struct
PP_FloatRect
*
rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetSourceRect
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
rect
"
ToString_PP_FloatRect
(
rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_1
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
1
"
)
)
-
>
SetSourceRect
(
layer
rect
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetPremultipliedAlpha_0_1
(
PP_Resource
layer
PP_Bool
premult
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetPremultipliedAlpha
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
premult
"
ToString_PP_Bool
(
premult
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_1
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
1
"
)
)
-
>
SetPremultipliedAlpha
(
layer
premult
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_CompositorLayer_0_1
_PPB_CompositorLayer_0_1
=
{
ns_PPB_CompositorLayer_0_1
:
:
IsCompositorLayer_0_1
ns_PPB_CompositorLayer_0_1
:
:
SetColor_0_1
ns_PPB_CompositorLayer_0_1
:
:
SetTexture_0_1
ns_PPB_CompositorLayer_0_1
:
:
SetImage_0_1
ns_PPB_CompositorLayer_0_1
:
:
SetClipRect_0_1
ns_PPB_CompositorLayer_0_1
:
:
SetTransform_0_1
ns_PPB_CompositorLayer_0_1
:
:
SetOpacity_0_1
ns_PPB_CompositorLayer_0_1
:
:
SetBlendMode_0_1
ns_PPB_CompositorLayer_0_1
:
:
SetSourceRect_0_1
ns_PPB_CompositorLayer_0_1
:
:
SetPremultipliedAlpha_0_1
}
;
const
string
ToString_PPB_CompositorLayer
(
const
PPB_CompositorLayer_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_CompositorLayer_0_2
{
static
PP_Bool
IsCompositorLayer_0_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsCompositorLayer
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_CompositorLayer_0_2
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
2
"
)
)
-
>
IsCompositorLayer
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetColor_0_2
(
PP_Resource
layer
float
red
float
green
float
blue
float
alpha
const
struct
PP_Size
*
size
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetColor
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
red
"
ToString_float_t
(
red
)
)
;
AddProp
(
ss
"
green
"
ToString_float_t
(
green
)
)
;
AddProp
(
ss
"
blue
"
ToString_float_t
(
blue
)
)
;
AddProp
(
ss
"
alpha
"
ToString_float_t
(
alpha
)
)
;
AddProp
(
ss
"
size
"
ToString_PP_Size
(
size
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_2
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
2
"
)
)
-
>
SetColor
(
layer
red
green
blue
alpha
size
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetTexture_0_2
(
PP_Resource
layer
PP_Resource
context
uint32_t
target
uint32_t
texture
const
struct
PP_Size
*
size
struct
PP_CompletionCallback
cc
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetTexture
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_uint32_t
(
target
)
)
;
AddProp
(
ss
"
texture
"
ToString_uint32_t
(
texture
)
)
;
AddProp
(
ss
"
size
"
ToString_PP_Size
(
size
)
)
;
AddProp
(
ss
"
cc
"
ToString_PP_CompletionCallback
(
cc
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_cc
;
logging_cc
.
func
=
&
Logging_PP_CompletionCallback
;
logging_cc
.
user_data
=
new
PP_CompletionCallback
(
cc
)
;
logging_cc
.
flags
=
cc
.
flags
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_2
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
2
"
)
)
-
>
SetTexture
(
layer
context
target
texture
size
logging_cc
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetImage_0_2
(
PP_Resource
layer
PP_Resource
image_data
const
struct
PP_Size
*
size
struct
PP_CompletionCallback
cc
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetImage
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
AddProp
(
ss
"
size
"
ToString_PP_Size
(
size
)
)
;
AddProp
(
ss
"
cc
"
ToString_PP_CompletionCallback
(
cc
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_cc
;
logging_cc
.
func
=
&
Logging_PP_CompletionCallback
;
logging_cc
.
user_data
=
new
PP_CompletionCallback
(
cc
)
;
logging_cc
.
flags
=
cc
.
flags
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_2
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
2
"
)
)
-
>
SetImage
(
layer
image_data
size
logging_cc
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetClipRect_0_2
(
PP_Resource
layer
const
struct
PP_Rect
*
rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetClipRect
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
rect
"
ToString_PP_Rect
(
rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_2
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
2
"
)
)
-
>
SetClipRect
(
layer
rect
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetTransform_0_2
(
PP_Resource
layer
const
float
matrix
[
16
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetTransform
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
{
BeginProp
(
ss
"
matrix
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
16
;
+
+
_n
)
{
AddElement
(
ss
ToString_float_t
(
matrix
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_2
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
2
"
)
)
-
>
SetTransform
(
layer
matrix
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetOpacity_0_2
(
PP_Resource
layer
float
opacity
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetOpacity
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
opacity
"
ToString_float_t
(
opacity
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_2
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
2
"
)
)
-
>
SetOpacity
(
layer
opacity
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetBlendMode_0_2
(
PP_Resource
layer
PP_BlendMode
mode
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetBlendMode
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
mode
"
ToString_PP_BlendMode
(
mode
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_2
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
2
"
)
)
-
>
SetBlendMode
(
layer
mode
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetSourceRect_0_2
(
PP_Resource
layer
const
struct
PP_FloatRect
*
rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetSourceRect
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
rect
"
ToString_PP_FloatRect
(
rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_2
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
2
"
)
)
-
>
SetSourceRect
(
layer
rect
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetPremultipliedAlpha_0_2
(
PP_Resource
layer
PP_Bool
premult
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CompositorLayer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetPremultipliedAlpha
\
"
"
)
;
AddProp
(
ss
"
layer
"
ToString_PP_Resource
(
layer
)
)
;
AddProp
(
ss
"
premult
"
ToString_PP_Bool
(
premult
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CompositorLayer_0_2
*
)
RealGetInterface
(
"
PPB_CompositorLayer
;
0
.
2
"
)
)
-
>
SetPremultipliedAlpha
(
layer
premult
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_CompositorLayer_0_2
_PPB_CompositorLayer_0_2
=
{
ns_PPB_CompositorLayer_0_2
:
:
IsCompositorLayer_0_2
ns_PPB_CompositorLayer_0_2
:
:
SetColor_0_2
ns_PPB_CompositorLayer_0_2
:
:
SetTexture_0_2
ns_PPB_CompositorLayer_0_2
:
:
SetImage_0_2
ns_PPB_CompositorLayer_0_2
:
:
SetClipRect_0_2
ns_PPB_CompositorLayer_0_2
:
:
SetTransform_0_2
ns_PPB_CompositorLayer_0_2
:
:
SetOpacity_0_2
ns_PPB_CompositorLayer_0_2
:
:
SetBlendMode_0_2
ns_PPB_CompositorLayer_0_2
:
:
SetSourceRect_0_2
ns_PPB_CompositorLayer_0_2
:
:
SetPremultipliedAlpha_0_2
}
;
const
string
ToString_PPB_CompositorLayer
(
const
PPB_CompositorLayer_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_LogLevel
(
const
PP_LogLevel
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_LOGLEVEL_TIP
\
"
"
;
case
1
:
return
"
\
"
PP_LOGLEVEL_LOG
\
"
"
;
case
2
:
return
"
\
"
PP_LOGLEVEL_WARNING
\
"
"
;
case
3
:
return
"
\
"
PP_LOGLEVEL_ERROR
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_LogLevel
(
const
PP_LogLevel
&
v
)
{
return
ToString_PP_LogLevel
(
&
v
)
;
}
void
FromJSON_PP_LogLevel
(
JSONIterator
&
iterator
PP_LogLevel
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_LogLevel
(
v
)
;
}
namespace
ns_PPB_Console_1_0
{
static
void
Log_1_0
(
PP_Instance
instance
PP_LogLevel
level
struct
PP_Var
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Console
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Log
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
level
"
ToString_PP_LogLevel
(
level
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Console_1_0
*
)
RealGetInterface
(
"
PPB_Console
;
1
.
0
"
)
)
-
>
Log
(
instance
level
value
)
;
#
endif
}
static
void
LogWithSource_1_0
(
PP_Instance
instance
PP_LogLevel
level
struct
PP_Var
source
struct
PP_Var
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Console
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
LogWithSource
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
level
"
ToString_PP_LogLevel
(
level
)
)
;
AddProp
(
ss
"
source
"
ToString_PP_Var
(
source
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Console_1_0
*
)
RealGetInterface
(
"
PPB_Console
;
1
.
0
"
)
)
-
>
LogWithSource
(
instance
level
source
value
)
;
#
endif
}
}
static
PPB_Console_1_0
_PPB_Console_1_0
=
{
ns_PPB_Console_1_0
:
:
Log_1_0
ns_PPB_Console_1_0
:
:
LogWithSource_1_0
}
;
const
string
ToString_PPB_Console
(
const
PPB_Console_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Core_1_0
{
static
void
AddRefResource_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Core
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AddRefResource
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Core_1_0
*
)
RealGetInterface
(
"
PPB_Core
;
1
.
0
"
)
)
-
>
AddRefResource
(
resource
)
;
#
endif
}
static
void
ReleaseResource_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Core
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReleaseResource
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Core_1_0
*
)
RealGetInterface
(
"
PPB_Core
;
1
.
0
"
)
)
-
>
ReleaseResource
(
resource
)
;
#
endif
}
static
PP_Time
GetTime_1_0
(
void
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Core
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTime
\
"
"
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
double
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Time
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
double
rval
=
(
(
PPB_Core_1_0
*
)
RealGetInterface
(
"
PPB_Core
;
1
.
0
"
)
)
-
>
GetTime
(
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Time
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_TimeTicks
GetTimeTicks_1_0
(
void
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Core
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTimeTicks
\
"
"
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
double
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_TimeTicks
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
double
rval
=
(
(
PPB_Core_1_0
*
)
RealGetInterface
(
"
PPB_Core
;
1
.
0
"
)
)
-
>
GetTimeTicks
(
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_TimeTicks
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
CallOnMainThread_1_0
(
int32_t
delay_in_milliseconds
struct
PP_CompletionCallback
callback
int32_t
result
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Core
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CallOnMainThread
\
"
"
)
;
AddProp
(
ss
"
delay_in_milliseconds
"
ToString_int32_t
(
delay_in_milliseconds
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
AddProp
(
ss
"
result
"
ToString_int32_t
(
result
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MaybeNonMainThread
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
(
(
PPB_Core_1_0
*
)
RealGetInterface
(
"
PPB_Core
;
1
.
0
"
)
)
-
>
CallOnMainThread
(
delay_in_milliseconds
logging_callback
result
)
;
#
endif
}
static
PP_Bool
IsMainThread_1_0
(
void
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Core
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsMainThread
\
"
"
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MaybeNonMainThread
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Core_1_0
*
)
RealGetInterface
(
"
PPB_Core
;
1
.
0
"
)
)
-
>
IsMainThread
(
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Core_1_0
_PPB_Core_1_0
=
{
ns_PPB_Core_1_0
:
:
AddRefResource_1_0
ns_PPB_Core_1_0
:
:
ReleaseResource_1_0
ns_PPB_Core_1_0
:
:
GetTime_1_0
ns_PPB_Core_1_0
:
:
GetTimeTicks_1_0
ns_PPB_Core_1_0
:
:
CallOnMainThread_1_0
ns_PPB_Core_1_0
:
:
IsMainThread_1_0
}
;
const
string
ToString_PPB_Core
(
const
PPB_Core_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_FileOpenFlags
(
const
PP_FileOpenFlags
*
v
)
{
switch
(
*
v
)
{
case
1
<
<
0
:
return
"
\
"
PP_FILEOPENFLAG_READ
\
"
"
;
case
1
<
<
1
:
return
"
\
"
PP_FILEOPENFLAG_WRITE
\
"
"
;
case
1
<
<
2
:
return
"
\
"
PP_FILEOPENFLAG_CREATE
\
"
"
;
case
1
<
<
3
:
return
"
\
"
PP_FILEOPENFLAG_TRUNCATE
\
"
"
;
case
1
<
<
4
:
return
"
\
"
PP_FILEOPENFLAG_EXCLUSIVE
\
"
"
;
case
1
<
<
5
:
return
"
\
"
PP_FILEOPENFLAG_APPEND
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_FileOpenFlags
(
const
PP_FileOpenFlags
&
v
)
{
return
ToString_PP_FileOpenFlags
(
&
v
)
;
}
void
FromJSON_PP_FileOpenFlags
(
JSONIterator
&
iterator
PP_FileOpenFlags
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_FileOpenFlags
(
v
)
;
}
namespace
ns_PPB_FileIO_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_FileIO_1_0
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFileIO_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFileIO
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FileIO_1_0
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
0
"
)
)
-
>
IsFileIO
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Open_1_0
(
PP_Resource
file_io
PP_Resource
file_ref
int32_t
open_flags
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Open
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
open_flags
"
ToString_int32_t
(
open_flags
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_0
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
0
"
)
)
-
>
Open
(
file_io
file_ref
open_flags
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Query_1_0
(
PP_Resource
file_io
struct
PP_FileInfo
*
info
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Query
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
info
"
PointerToString
(
info
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
info
)
{
iterator
.
skip
(
)
;
FromJSON_PP_FileInfo
(
iterator
*
info
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_0
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
0
"
)
)
-
>
Query
(
file_io
info
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
info
)
{
AddProp
(
os
"
info
"
ToString_PP_FileInfo
(
info
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Touch_1_0
(
PP_Resource
file_io
PP_Time
last_access_time
PP_Time
last_modified_time
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Touch
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
last_access_time
"
ToString_PP_Time
(
last_access_time
)
)
;
AddProp
(
ss
"
last_modified_time
"
ToString_PP_Time
(
last_modified_time
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_0
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
0
"
)
)
-
>
Touch
(
file_io
last_access_time
last_modified_time
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Read_1_0
(
PP_Resource
file_io
int64_t
offset
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Read
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
offset
"
ToString_int64_t
(
offset
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_read
"
ToString_int32_t
(
bytes_to_read
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_0
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
0
"
)
)
-
>
Read
(
file_io
offset
buffer
bytes_to_read
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Write_1_0
(
PP_Resource
file_io
int64_t
offset
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Write
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
offset
"
ToString_int64_t
(
offset
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_write
"
ToString_int32_t
(
bytes_to_write
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_0
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
0
"
)
)
-
>
Write
(
file_io
offset
buffer
bytes_to_write
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetLength_1_0
(
PP_Resource
file_io
int64_t
length
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetLength
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
length
"
ToString_int64_t
(
length
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_0
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
0
"
)
)
-
>
SetLength
(
file_io
length
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Flush_1_0
(
PP_Resource
file_io
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Flush
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_0
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
0
"
)
)
-
>
Flush
(
file_io
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_1_0
(
PP_Resource
file_io
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_FileIO_1_0
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
0
"
)
)
-
>
Close
(
file_io
)
;
#
endif
}
}
static
PPB_FileIO_1_0
_PPB_FileIO_1_0
=
{
ns_PPB_FileIO_1_0
:
:
Create_1_0
ns_PPB_FileIO_1_0
:
:
IsFileIO_1_0
ns_PPB_FileIO_1_0
:
:
Open_1_0
ns_PPB_FileIO_1_0
:
:
Query_1_0
ns_PPB_FileIO_1_0
:
:
Touch_1_0
ns_PPB_FileIO_1_0
:
:
Read_1_0
ns_PPB_FileIO_1_0
:
:
Write_1_0
ns_PPB_FileIO_1_0
:
:
SetLength_1_0
ns_PPB_FileIO_1_0
:
:
Flush_1_0
ns_PPB_FileIO_1_0
:
:
Close_1_0
}
;
const
string
ToString_PPB_FileIO
(
const
PPB_FileIO_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_FileIO_1_1
{
static
PP_Resource
Create_1_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_FileIO_1_1
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFileIO_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFileIO
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FileIO_1_1
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
1
"
)
)
-
>
IsFileIO
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Open_1_1
(
PP_Resource
file_io
PP_Resource
file_ref
int32_t
open_flags
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Open
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
open_flags
"
ToString_int32_t
(
open_flags
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_1
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
1
"
)
)
-
>
Open
(
file_io
file_ref
open_flags
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Query_1_1
(
PP_Resource
file_io
struct
PP_FileInfo
*
info
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Query
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
info
"
PointerToString
(
info
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
info
)
{
iterator
.
skip
(
)
;
FromJSON_PP_FileInfo
(
iterator
*
info
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_1
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
1
"
)
)
-
>
Query
(
file_io
info
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
info
)
{
AddProp
(
os
"
info
"
ToString_PP_FileInfo
(
info
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Touch_1_1
(
PP_Resource
file_io
PP_Time
last_access_time
PP_Time
last_modified_time
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Touch
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
last_access_time
"
ToString_PP_Time
(
last_access_time
)
)
;
AddProp
(
ss
"
last_modified_time
"
ToString_PP_Time
(
last_modified_time
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_1
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
1
"
)
)
-
>
Touch
(
file_io
last_access_time
last_modified_time
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Read_1_1
(
PP_Resource
file_io
int64_t
offset
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Read
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
offset
"
ToString_int64_t
(
offset
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_read
"
ToString_int32_t
(
bytes_to_read
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_1
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
1
"
)
)
-
>
Read
(
file_io
offset
buffer
bytes_to_read
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Write_1_1
(
PP_Resource
file_io
int64_t
offset
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Write
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
offset
"
ToString_int64_t
(
offset
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_write
"
ToString_int32_t
(
bytes_to_write
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_1
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
1
"
)
)
-
>
Write
(
file_io
offset
buffer
bytes_to_write
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetLength_1_1
(
PP_Resource
file_io
int64_t
length
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetLength
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
length
"
ToString_int64_t
(
length
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_1
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
1
"
)
)
-
>
SetLength
(
file_io
length
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Flush_1_1
(
PP_Resource
file_io
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Flush
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_1
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
1
"
)
)
-
>
Flush
(
file_io
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_1_1
(
PP_Resource
file_io
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_FileIO_1_1
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
1
"
)
)
-
>
Close
(
file_io
)
;
#
endif
}
static
int32_t
ReadToArray_1_1
(
PP_Resource
file_io
int64_t
offset
int32_t
max_read_length
struct
PP_ArrayOutput
*
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReadToArray
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
offset
"
ToString_int64_t
(
offset
)
)
;
AddProp
(
ss
"
max_read_length
"
ToString_int32_t
(
max_read_length
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_ArrayOutput
(
iterator
*
output
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_1_1
*
)
RealGetInterface
(
"
PPB_FileIO
;
1
.
1
"
)
)
-
>
ReadToArray
(
file_io
offset
max_read_length
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FileIO_1_1
_PPB_FileIO_1_1
=
{
ns_PPB_FileIO_1_1
:
:
Create_1_1
ns_PPB_FileIO_1_1
:
:
IsFileIO_1_1
ns_PPB_FileIO_1_1
:
:
Open_1_1
ns_PPB_FileIO_1_1
:
:
Query_1_1
ns_PPB_FileIO_1_1
:
:
Touch_1_1
ns_PPB_FileIO_1_1
:
:
Read_1_1
ns_PPB_FileIO_1_1
:
:
Write_1_1
ns_PPB_FileIO_1_1
:
:
SetLength_1_1
ns_PPB_FileIO_1_1
:
:
Flush_1_1
ns_PPB_FileIO_1_1
:
:
Close_1_1
ns_PPB_FileIO_1_1
:
:
ReadToArray_1_1
}
;
const
string
ToString_PPB_FileIO
(
const
PPB_FileIO_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_MakeDirectoryFlags
(
const
PP_MakeDirectoryFlags
*
v
)
{
switch
(
*
v
)
{
case
0
<
<
0
:
return
"
\
"
PP_MAKEDIRECTORYFLAG_NONE
\
"
"
;
case
1
<
<
0
:
return
"
\
"
PP_MAKEDIRECTORYFLAG_WITH_ANCESTORS
\
"
"
;
case
1
<
<
1
:
return
"
\
"
PP_MAKEDIRECTORYFLAG_EXCLUSIVE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_MakeDirectoryFlags
(
const
PP_MakeDirectoryFlags
&
v
)
{
return
ToString_PP_MakeDirectoryFlags
(
&
v
)
;
}
void
FromJSON_PP_MakeDirectoryFlags
(
JSONIterator
&
iterator
PP_MakeDirectoryFlags
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_MakeDirectoryFlags
(
v
)
;
}
namespace
ns_PPB_FileRef_1_0
{
static
PP_Resource
Create_1_0
(
PP_Resource
file_system
const
char
*
path
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
file_system
"
ToString_PP_Resource
(
file_system
)
)
;
AddProp
(
ss
"
path
"
ToString_str_t
(
path
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_FileRef_1_0
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
0
"
)
)
-
>
Create
(
file_system
path
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFileRef_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFileRef
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FileRef_1_0
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
0
"
)
)
-
>
IsFileRef
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_FileSystemType
GetFileSystemType_1_0
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFileSystemType
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_FileSystemType
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_FileSystemType
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_FileSystemType
rval
=
(
(
PPB_FileRef_1_0
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
0
"
)
)
-
>
GetFileSystemType
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_FileSystemType
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetName_1_0
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetName
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_FileRef_1_0
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
0
"
)
)
-
>
GetName
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetPath_1_0
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPath
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_FileRef_1_0
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
0
"
)
)
-
>
GetPath
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetParent_1_0
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetParent
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_FileRef_1_0
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
0
"
)
)
-
>
GetParent
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
MakeDirectory_1_0
(
PP_Resource
directory_ref
PP_Bool
make_ancestors
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MakeDirectory
\
"
"
)
;
AddProp
(
ss
"
directory_ref
"
ToString_PP_Resource
(
directory_ref
)
)
;
AddProp
(
ss
"
make_ancestors
"
ToString_PP_Bool
(
make_ancestors
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_0
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
0
"
)
)
-
>
MakeDirectory
(
directory_ref
make_ancestors
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Touch_1_0
(
PP_Resource
file_ref
PP_Time
last_access_time
PP_Time
last_modified_time
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Touch
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
last_access_time
"
ToString_PP_Time
(
last_access_time
)
)
;
AddProp
(
ss
"
last_modified_time
"
ToString_PP_Time
(
last_modified_time
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_0
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
0
"
)
)
-
>
Touch
(
file_ref
last_access_time
last_modified_time
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Delete_1_0
(
PP_Resource
file_ref
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Delete
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_0
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
0
"
)
)
-
>
Delete
(
file_ref
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Rename_1_0
(
PP_Resource
file_ref
PP_Resource
new_file_ref
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Rename
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
new_file_ref
"
ToString_PP_Resource
(
new_file_ref
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_0
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
0
"
)
)
-
>
Rename
(
file_ref
new_file_ref
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FileRef_1_0
_PPB_FileRef_1_0
=
{
ns_PPB_FileRef_1_0
:
:
Create_1_0
ns_PPB_FileRef_1_0
:
:
IsFileRef_1_0
ns_PPB_FileRef_1_0
:
:
GetFileSystemType_1_0
ns_PPB_FileRef_1_0
:
:
GetName_1_0
ns_PPB_FileRef_1_0
:
:
GetPath_1_0
ns_PPB_FileRef_1_0
:
:
GetParent_1_0
ns_PPB_FileRef_1_0
:
:
MakeDirectory_1_0
ns_PPB_FileRef_1_0
:
:
Touch_1_0
ns_PPB_FileRef_1_0
:
:
Delete_1_0
ns_PPB_FileRef_1_0
:
:
Rename_1_0
}
;
const
string
ToString_PPB_FileRef
(
const
PPB_FileRef_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_FileRef_1_1
{
static
PP_Resource
Create_1_1
(
PP_Resource
file_system
const
char
*
path
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
file_system
"
ToString_PP_Resource
(
file_system
)
)
;
AddProp
(
ss
"
path
"
ToString_str_t
(
path
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_FileRef_1_1
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
1
"
)
)
-
>
Create
(
file_system
path
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFileRef_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFileRef
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FileRef_1_1
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
1
"
)
)
-
>
IsFileRef
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_FileSystemType
GetFileSystemType_1_1
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFileSystemType
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_FileSystemType
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_FileSystemType
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_FileSystemType
rval
=
(
(
PPB_FileRef_1_1
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
1
"
)
)
-
>
GetFileSystemType
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_FileSystemType
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetName_1_1
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetName
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_FileRef_1_1
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
1
"
)
)
-
>
GetName
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetPath_1_1
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPath
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_FileRef_1_1
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
1
"
)
)
-
>
GetPath
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetParent_1_1
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetParent
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_FileRef_1_1
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
1
"
)
)
-
>
GetParent
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
MakeDirectory_1_1
(
PP_Resource
directory_ref
PP_Bool
make_ancestors
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MakeDirectory
\
"
"
)
;
AddProp
(
ss
"
directory_ref
"
ToString_PP_Resource
(
directory_ref
)
)
;
AddProp
(
ss
"
make_ancestors
"
ToString_PP_Bool
(
make_ancestors
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_1
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
1
"
)
)
-
>
MakeDirectory
(
directory_ref
make_ancestors
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Touch_1_1
(
PP_Resource
file_ref
PP_Time
last_access_time
PP_Time
last_modified_time
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Touch
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
last_access_time
"
ToString_PP_Time
(
last_access_time
)
)
;
AddProp
(
ss
"
last_modified_time
"
ToString_PP_Time
(
last_modified_time
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_1
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
1
"
)
)
-
>
Touch
(
file_ref
last_access_time
last_modified_time
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Delete_1_1
(
PP_Resource
file_ref
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Delete
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_1
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
1
"
)
)
-
>
Delete
(
file_ref
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Rename_1_1
(
PP_Resource
file_ref
PP_Resource
new_file_ref
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Rename
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
new_file_ref
"
ToString_PP_Resource
(
new_file_ref
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_1
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
1
"
)
)
-
>
Rename
(
file_ref
new_file_ref
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Query_1_1
(
PP_Resource
file_ref
struct
PP_FileInfo
*
info
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Query
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
info
"
PointerToString
(
info
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
info
)
{
iterator
.
skip
(
)
;
FromJSON_PP_FileInfo
(
iterator
*
info
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_1
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
1
"
)
)
-
>
Query
(
file_ref
info
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
info
)
{
AddProp
(
os
"
info
"
ToString_PP_FileInfo
(
info
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
ReadDirectoryEntries_1_1
(
PP_Resource
file_ref
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReadDirectoryEntries
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_1
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
1
"
)
)
-
>
ReadDirectoryEntries
(
file_ref
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FileRef_1_1
_PPB_FileRef_1_1
=
{
ns_PPB_FileRef_1_1
:
:
Create_1_1
ns_PPB_FileRef_1_1
:
:
IsFileRef_1_1
ns_PPB_FileRef_1_1
:
:
GetFileSystemType_1_1
ns_PPB_FileRef_1_1
:
:
GetName_1_1
ns_PPB_FileRef_1_1
:
:
GetPath_1_1
ns_PPB_FileRef_1_1
:
:
GetParent_1_1
ns_PPB_FileRef_1_1
:
:
MakeDirectory_1_1
ns_PPB_FileRef_1_1
:
:
Touch_1_1
ns_PPB_FileRef_1_1
:
:
Delete_1_1
ns_PPB_FileRef_1_1
:
:
Rename_1_1
ns_PPB_FileRef_1_1
:
:
Query_1_1
ns_PPB_FileRef_1_1
:
:
ReadDirectoryEntries_1_1
}
;
const
string
ToString_PPB_FileRef
(
const
PPB_FileRef_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_FileRef_1_2
{
static
PP_Resource
Create_1_2
(
PP_Resource
file_system
const
char
*
path
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
file_system
"
ToString_PP_Resource
(
file_system
)
)
;
AddProp
(
ss
"
path
"
ToString_str_t
(
path
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_FileRef_1_2
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
2
"
)
)
-
>
Create
(
file_system
path
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFileRef_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFileRef
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FileRef_1_2
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
2
"
)
)
-
>
IsFileRef
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_FileSystemType
GetFileSystemType_1_2
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFileSystemType
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_FileSystemType
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_FileSystemType
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_FileSystemType
rval
=
(
(
PPB_FileRef_1_2
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
2
"
)
)
-
>
GetFileSystemType
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_FileSystemType
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetName_1_2
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetName
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_FileRef_1_2
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
2
"
)
)
-
>
GetName
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetPath_1_2
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPath
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_FileRef_1_2
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
2
"
)
)
-
>
GetPath
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetParent_1_2
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetParent
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_FileRef_1_2
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
2
"
)
)
-
>
GetParent
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
MakeDirectory_1_2
(
PP_Resource
directory_ref
int32_t
make_directory_flags
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MakeDirectory
\
"
"
)
;
AddProp
(
ss
"
directory_ref
"
ToString_PP_Resource
(
directory_ref
)
)
;
AddProp
(
ss
"
make_directory_flags
"
ToString_int32_t
(
make_directory_flags
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_2
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
2
"
)
)
-
>
MakeDirectory
(
directory_ref
make_directory_flags
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Touch_1_2
(
PP_Resource
file_ref
PP_Time
last_access_time
PP_Time
last_modified_time
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Touch
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
last_access_time
"
ToString_PP_Time
(
last_access_time
)
)
;
AddProp
(
ss
"
last_modified_time
"
ToString_PP_Time
(
last_modified_time
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_2
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
2
"
)
)
-
>
Touch
(
file_ref
last_access_time
last_modified_time
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Delete_1_2
(
PP_Resource
file_ref
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Delete
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_2
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
2
"
)
)
-
>
Delete
(
file_ref
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Rename_1_2
(
PP_Resource
file_ref
PP_Resource
new_file_ref
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Rename
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
new_file_ref
"
ToString_PP_Resource
(
new_file_ref
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_2
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
2
"
)
)
-
>
Rename
(
file_ref
new_file_ref
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Query_1_2
(
PP_Resource
file_ref
struct
PP_FileInfo
*
info
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Query
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
info
"
PointerToString
(
info
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
info
)
{
iterator
.
skip
(
)
;
FromJSON_PP_FileInfo
(
iterator
*
info
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_2
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
2
"
)
)
-
>
Query
(
file_ref
info
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
info
)
{
AddProp
(
os
"
info
"
ToString_PP_FileInfo
(
info
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
ReadDirectoryEntries_1_2
(
PP_Resource
file_ref
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReadDirectoryEntries
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileRef_1_2
*
)
RealGetInterface
(
"
PPB_FileRef
;
1
.
2
"
)
)
-
>
ReadDirectoryEntries
(
file_ref
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FileRef_1_2
_PPB_FileRef_1_2
=
{
ns_PPB_FileRef_1_2
:
:
Create_1_2
ns_PPB_FileRef_1_2
:
:
IsFileRef_1_2
ns_PPB_FileRef_1_2
:
:
GetFileSystemType_1_2
ns_PPB_FileRef_1_2
:
:
GetName_1_2
ns_PPB_FileRef_1_2
:
:
GetPath_1_2
ns_PPB_FileRef_1_2
:
:
GetParent_1_2
ns_PPB_FileRef_1_2
:
:
MakeDirectory_1_2
ns_PPB_FileRef_1_2
:
:
Touch_1_2
ns_PPB_FileRef_1_2
:
:
Delete_1_2
ns_PPB_FileRef_1_2
:
:
Rename_1_2
ns_PPB_FileRef_1_2
:
:
Query_1_2
ns_PPB_FileRef_1_2
:
:
ReadDirectoryEntries_1_2
}
;
const
string
ToString_PPB_FileRef
(
const
PPB_FileRef_1_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_FileSystem_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
PP_FileSystemType
type
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileSystem
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_FileSystemType
(
type
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_FileSystem_1_0
*
)
RealGetInterface
(
"
PPB_FileSystem
;
1
.
0
"
)
)
-
>
Create
(
instance
type
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFileSystem_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileSystem
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFileSystem
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FileSystem_1_0
*
)
RealGetInterface
(
"
PPB_FileSystem
;
1
.
0
"
)
)
-
>
IsFileSystem
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Open_1_0
(
PP_Resource
file_system
int64_t
expected_size
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileSystem
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Open
\
"
"
)
;
AddProp
(
ss
"
file_system
"
ToString_PP_Resource
(
file_system
)
)
;
AddProp
(
ss
"
expected_size
"
ToString_int64_t
(
expected_size
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileSystem_1_0
*
)
RealGetInterface
(
"
PPB_FileSystem
;
1
.
0
"
)
)
-
>
Open
(
file_system
expected_size
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_FileSystemType
GetType_1_0
(
PP_Resource
file_system
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileSystem
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetType
\
"
"
)
;
AddProp
(
ss
"
file_system
"
ToString_PP_Resource
(
file_system
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_FileSystemType
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_FileSystemType
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_FileSystemType
rval
=
(
(
PPB_FileSystem_1_0
*
)
RealGetInterface
(
"
PPB_FileSystem
;
1
.
0
"
)
)
-
>
GetType
(
file_system
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_FileSystemType
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FileSystem_1_0
_PPB_FileSystem_1_0
=
{
ns_PPB_FileSystem_1_0
:
:
Create_1_0
ns_PPB_FileSystem_1_0
:
:
IsFileSystem_1_0
ns_PPB_FileSystem_1_0
:
:
Open_1_0
ns_PPB_FileSystem_1_0
:
:
GetType_1_0
}
;
const
string
ToString_PPB_FileSystem
(
const
PPB_FileSystem_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Fullscreen_1_0
{
static
PP_Bool
IsFullscreen_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Fullscreen
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFullscreen
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Fullscreen_1_0
*
)
RealGetInterface
(
"
PPB_Fullscreen
;
1
.
0
"
)
)
-
>
IsFullscreen
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
SetFullscreen_1_0
(
PP_Instance
instance
PP_Bool
fullscreen
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Fullscreen
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetFullscreen
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
fullscreen
"
ToString_PP_Bool
(
fullscreen
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Fullscreen_1_0
*
)
RealGetInterface
(
"
PPB_Fullscreen
;
1
.
0
"
)
)
-
>
SetFullscreen
(
instance
fullscreen
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetScreenSize_1_0
(
PP_Instance
instance
struct
PP_Size
*
size
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Fullscreen
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetScreenSize
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
size
"
PointerToString
(
size
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
size
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
*
size
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Fullscreen_1_0
*
)
RealGetInterface
(
"
PPB_Fullscreen
;
1
.
0
"
)
)
-
>
GetScreenSize
(
instance
size
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
size
)
{
AddProp
(
os
"
size
"
ToString_PP_Size
(
size
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Fullscreen_1_0
_PPB_Fullscreen_1_0
=
{
ns_PPB_Fullscreen_1_0
:
:
IsFullscreen_1_0
ns_PPB_Fullscreen_1_0
:
:
SetFullscreen_1_0
ns_PPB_Fullscreen_1_0
:
:
GetScreenSize_1_0
}
;
const
string
ToString_PPB_Fullscreen
(
const
PPB_Fullscreen_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_GamepadSampleData
(
const
PP_GamepadSampleData
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_GamepadSampleData
(
*
v
)
;
}
const
string
ToString_PP_GamepadSampleData
(
const
PP_GamepadSampleData
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
axes_length
"
ToString_uint32_t
(
v
.
axes_length
)
)
;
{
BeginProp
(
x
"
axes
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
16
;
+
+
_n
)
{
AddElement
(
x
ToString_float_t
(
v
.
axes
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
AddProp
(
x
"
buttons_length
"
ToString_uint32_t
(
v
.
buttons_length
)
)
;
{
BeginProp
(
x
"
buttons
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
32
;
+
+
_n
)
{
AddElement
(
x
ToString_float_t
(
v
.
buttons
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
AddProp
(
x
"
timestamp
"
ToString_double_t
(
v
.
timestamp
)
)
;
{
BeginProp
(
x
"
id
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
128
;
+
+
_n
)
{
AddElement
(
x
ToString_uint16_t
(
v
.
id
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
AddProp
(
x
"
connected
"
ToString_PP_Bool
(
v
.
connected
)
)
;
{
BeginProp
(
x
"
unused_pad_
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
4
;
+
+
_n
)
{
AddElement
(
x
ToString_int8_t
(
v
.
unused_pad_
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_GamepadSampleData
(
JSONIterator
&
iterator
PP_GamepadSampleData
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
axes_length
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
16
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_float_t
(
iterator
(
value
.
axes
)
[
_n
]
)
;
}
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
buttons_length
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
32
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_float_t
(
iterator
(
value
.
buttons
)
[
_n
]
)
;
}
}
iterator
.
skip
(
)
;
FromJSON_double_t
(
iterator
value
.
timestamp
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
128
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_uint16_t
(
iterator
(
value
.
id
)
[
_n
]
)
;
}
}
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
connected
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
4
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_int8_t
(
iterator
(
value
.
unused_pad_
)
[
_n
]
)
;
}
}
}
const
string
ToString_PP_GamepadsSampleData
(
const
PP_GamepadsSampleData
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_GamepadsSampleData
(
*
v
)
;
}
const
string
ToString_PP_GamepadsSampleData
(
const
PP_GamepadsSampleData
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
length
"
ToString_uint32_t
(
v
.
length
)
)
;
{
BeginProp
(
x
"
unused_pad_
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
4
;
+
+
_n
)
{
AddElement
(
x
ToString_int8_t
(
v
.
unused_pad_
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
{
BeginProp
(
x
"
items
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
4
;
+
+
_n
)
{
AddElement
(
x
ToString_PP_GamepadSampleData
(
v
.
items
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_GamepadsSampleData
(
JSONIterator
&
iterator
PP_GamepadsSampleData
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
length
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
4
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_int8_t
(
iterator
(
value
.
unused_pad_
)
[
_n
]
)
;
}
}
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
4
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_PP_GamepadSampleData
(
iterator
(
value
.
items
)
[
_n
]
)
;
}
}
}
namespace
ns_PPB_Gamepad_1_0
{
static
void
Sample_1_0
(
PP_Instance
instance
struct
PP_GamepadsSampleData
*
data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Gamepad
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Sample
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
data
"
PointerToString
(
data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
data
)
{
iterator
.
skip
(
)
;
FromJSON_PP_GamepadsSampleData
(
iterator
*
data
)
;
}
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Gamepad_1_0
*
)
RealGetInterface
(
"
PPB_Gamepad
;
1
.
0
"
)
)
-
>
Sample
(
instance
data
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
data
)
{
AddProp
(
os
"
data
"
ToString_PP_GamepadsSampleData
(
data
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
}
static
PPB_Gamepad_1_0
_PPB_Gamepad_1_0
=
{
ns_PPB_Gamepad_1_0
:
:
Sample_1_0
}
;
const
string
ToString_PPB_Gamepad
(
const
PPB_Gamepad_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Graphics2D_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
const
struct
PP_Size
*
size
PP_Bool
is_always_opaque
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
size
"
ToString_PP_Size
(
size
)
)
;
AddProp
(
ss
"
is_always_opaque
"
ToString_PP_Bool
(
is_always_opaque
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Graphics2D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
0
"
)
)
-
>
Create
(
instance
size
is_always_opaque
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsGraphics2D_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsGraphics2D
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Graphics2D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
0
"
)
)
-
>
IsGraphics2D
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
Describe_1_0
(
PP_Resource
graphics_2d
struct
PP_Size
*
size
PP_Bool
*
is_always_opaque
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Describe
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
size
"
PointerToString
(
size
)
)
;
AddProp
(
ss
"
is_always_opaque
"
PointerToString
(
is_always_opaque
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
size
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
*
size
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
*
is_always_opaque
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Graphics2D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
0
"
)
)
-
>
Describe
(
graphics_2d
size
is_always_opaque
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
size
)
{
AddProp
(
os
"
size
"
ToString_PP_Size
(
size
)
)
;
}
AddProp
(
os
"
is_always_opaque
"
ToString_PP_Bool
(
is_always_opaque
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
PaintImageData_1_0
(
PP_Resource
graphics_2d
PP_Resource
image_data
const
struct
PP_Point
*
top_left
const
struct
PP_Rect
*
src_rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PaintImageData
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
AddProp
(
ss
"
top_left
"
ToString_PP_Point
(
top_left
)
)
;
AddProp
(
ss
"
src_rect
"
ToString_PP_Rect
(
src_rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Graphics2D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
0
"
)
)
-
>
PaintImageData
(
graphics_2d
image_data
top_left
src_rect
)
;
#
endif
}
static
void
Scroll_1_0
(
PP_Resource
graphics_2d
const
struct
PP_Rect
*
clip_rect
const
struct
PP_Point
*
amount
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Scroll
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
clip_rect
"
ToString_PP_Rect
(
clip_rect
)
)
;
AddProp
(
ss
"
amount
"
ToString_PP_Point
(
amount
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Graphics2D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
0
"
)
)
-
>
Scroll
(
graphics_2d
clip_rect
amount
)
;
#
endif
}
static
void
ReplaceContents_1_0
(
PP_Resource
graphics_2d
PP_Resource
image_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReplaceContents
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Graphics2D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
0
"
)
)
-
>
ReplaceContents
(
graphics_2d
image_data
)
;
#
endif
}
static
int32_t
Flush_1_0
(
PP_Resource
graphics_2d
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Flush
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Graphics2D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
0
"
)
)
-
>
Flush
(
graphics_2d
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Graphics2D_1_0
_PPB_Graphics2D_1_0
=
{
ns_PPB_Graphics2D_1_0
:
:
Create_1_0
ns_PPB_Graphics2D_1_0
:
:
IsGraphics2D_1_0
ns_PPB_Graphics2D_1_0
:
:
Describe_1_0
ns_PPB_Graphics2D_1_0
:
:
PaintImageData_1_0
ns_PPB_Graphics2D_1_0
:
:
Scroll_1_0
ns_PPB_Graphics2D_1_0
:
:
ReplaceContents_1_0
ns_PPB_Graphics2D_1_0
:
:
Flush_1_0
}
;
const
string
ToString_PPB_Graphics2D
(
const
PPB_Graphics2D_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Graphics2D_1_1
{
static
PP_Resource
Create_1_1
(
PP_Instance
instance
const
struct
PP_Size
*
size
PP_Bool
is_always_opaque
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
size
"
ToString_PP_Size
(
size
)
)
;
AddProp
(
ss
"
is_always_opaque
"
ToString_PP_Bool
(
is_always_opaque
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Graphics2D_1_1
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
1
"
)
)
-
>
Create
(
instance
size
is_always_opaque
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsGraphics2D_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsGraphics2D
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Graphics2D_1_1
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
1
"
)
)
-
>
IsGraphics2D
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
Describe_1_1
(
PP_Resource
graphics_2d
struct
PP_Size
*
size
PP_Bool
*
is_always_opaque
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Describe
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
size
"
PointerToString
(
size
)
)
;
AddProp
(
ss
"
is_always_opaque
"
PointerToString
(
is_always_opaque
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
size
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
*
size
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
*
is_always_opaque
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Graphics2D_1_1
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
1
"
)
)
-
>
Describe
(
graphics_2d
size
is_always_opaque
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
size
)
{
AddProp
(
os
"
size
"
ToString_PP_Size
(
size
)
)
;
}
AddProp
(
os
"
is_always_opaque
"
ToString_PP_Bool
(
is_always_opaque
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
PaintImageData_1_1
(
PP_Resource
graphics_2d
PP_Resource
image_data
const
struct
PP_Point
*
top_left
const
struct
PP_Rect
*
src_rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PaintImageData
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
AddProp
(
ss
"
top_left
"
ToString_PP_Point
(
top_left
)
)
;
AddProp
(
ss
"
src_rect
"
ToString_PP_Rect
(
src_rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Graphics2D_1_1
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
1
"
)
)
-
>
PaintImageData
(
graphics_2d
image_data
top_left
src_rect
)
;
#
endif
}
static
void
Scroll_1_1
(
PP_Resource
graphics_2d
const
struct
PP_Rect
*
clip_rect
const
struct
PP_Point
*
amount
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Scroll
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
clip_rect
"
ToString_PP_Rect
(
clip_rect
)
)
;
AddProp
(
ss
"
amount
"
ToString_PP_Point
(
amount
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Graphics2D_1_1
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
1
"
)
)
-
>
Scroll
(
graphics_2d
clip_rect
amount
)
;
#
endif
}
static
void
ReplaceContents_1_1
(
PP_Resource
graphics_2d
PP_Resource
image_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReplaceContents
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Graphics2D_1_1
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
1
"
)
)
-
>
ReplaceContents
(
graphics_2d
image_data
)
;
#
endif
}
static
int32_t
Flush_1_1
(
PP_Resource
graphics_2d
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Flush
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Graphics2D_1_1
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
1
"
)
)
-
>
Flush
(
graphics_2d
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
SetScale_1_1
(
PP_Resource
resource
float
scale
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetScale
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
scale
"
ToString_float_t
(
scale
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Graphics2D_1_1
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
1
"
)
)
-
>
SetScale
(
resource
scale
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
float
GetScale_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetScale
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
float
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_float_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
float
rval
=
(
(
PPB_Graphics2D_1_1
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
1
"
)
)
-
>
GetScale
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_float_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Graphics2D_1_1
_PPB_Graphics2D_1_1
=
{
ns_PPB_Graphics2D_1_1
:
:
Create_1_1
ns_PPB_Graphics2D_1_1
:
:
IsGraphics2D_1_1
ns_PPB_Graphics2D_1_1
:
:
Describe_1_1
ns_PPB_Graphics2D_1_1
:
:
PaintImageData_1_1
ns_PPB_Graphics2D_1_1
:
:
Scroll_1_1
ns_PPB_Graphics2D_1_1
:
:
ReplaceContents_1_1
ns_PPB_Graphics2D_1_1
:
:
Flush_1_1
ns_PPB_Graphics2D_1_1
:
:
SetScale_1_1
ns_PPB_Graphics2D_1_1
:
:
GetScale_1_1
}
;
const
string
ToString_PPB_Graphics2D
(
const
PPB_Graphics2D_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Graphics2D_1_2
{
static
PP_Resource
Create_1_2
(
PP_Instance
instance
const
struct
PP_Size
*
size
PP_Bool
is_always_opaque
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
size
"
ToString_PP_Size
(
size
)
)
;
AddProp
(
ss
"
is_always_opaque
"
ToString_PP_Bool
(
is_always_opaque
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Graphics2D_1_2
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
2
"
)
)
-
>
Create
(
instance
size
is_always_opaque
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsGraphics2D_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsGraphics2D
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Graphics2D_1_2
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
2
"
)
)
-
>
IsGraphics2D
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
Describe_1_2
(
PP_Resource
graphics_2d
struct
PP_Size
*
size
PP_Bool
*
is_always_opaque
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Describe
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
size
"
PointerToString
(
size
)
)
;
AddProp
(
ss
"
is_always_opaque
"
PointerToString
(
is_always_opaque
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
size
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
*
size
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
*
is_always_opaque
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Graphics2D_1_2
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
2
"
)
)
-
>
Describe
(
graphics_2d
size
is_always_opaque
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
size
)
{
AddProp
(
os
"
size
"
ToString_PP_Size
(
size
)
)
;
}
AddProp
(
os
"
is_always_opaque
"
ToString_PP_Bool
(
is_always_opaque
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
PaintImageData_1_2
(
PP_Resource
graphics_2d
PP_Resource
image_data
const
struct
PP_Point
*
top_left
const
struct
PP_Rect
*
src_rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PaintImageData
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
AddProp
(
ss
"
top_left
"
ToString_PP_Point
(
top_left
)
)
;
AddProp
(
ss
"
src_rect
"
ToString_PP_Rect
(
src_rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Graphics2D_1_2
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
2
"
)
)
-
>
PaintImageData
(
graphics_2d
image_data
top_left
src_rect
)
;
#
endif
}
static
void
Scroll_1_2
(
PP_Resource
graphics_2d
const
struct
PP_Rect
*
clip_rect
const
struct
PP_Point
*
amount
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Scroll
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
clip_rect
"
ToString_PP_Rect
(
clip_rect
)
)
;
AddProp
(
ss
"
amount
"
ToString_PP_Point
(
amount
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Graphics2D_1_2
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
2
"
)
)
-
>
Scroll
(
graphics_2d
clip_rect
amount
)
;
#
endif
}
static
void
ReplaceContents_1_2
(
PP_Resource
graphics_2d
PP_Resource
image_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReplaceContents
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Graphics2D_1_2
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
2
"
)
)
-
>
ReplaceContents
(
graphics_2d
image_data
)
;
#
endif
}
static
int32_t
Flush_1_2
(
PP_Resource
graphics_2d
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Flush
\
"
"
)
;
AddProp
(
ss
"
graphics_2d
"
ToString_PP_Resource
(
graphics_2d
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Graphics2D_1_2
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
2
"
)
)
-
>
Flush
(
graphics_2d
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
SetScale_1_2
(
PP_Resource
resource
float
scale
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetScale
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
scale
"
ToString_float_t
(
scale
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Graphics2D_1_2
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
2
"
)
)
-
>
SetScale
(
resource
scale
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
float
GetScale_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetScale
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
float
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_float_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
float
rval
=
(
(
PPB_Graphics2D_1_2
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
2
"
)
)
-
>
GetScale
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_float_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
SetLayerTransform_1_2
(
PP_Resource
resource
float
scale
const
struct
PP_Point
*
origin
const
struct
PP_Point
*
translate
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics2D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetLayerTransform
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
scale
"
ToString_float_t
(
scale
)
)
;
AddProp
(
ss
"
origin
"
ToString_PP_Point
(
origin
)
)
;
AddProp
(
ss
"
translate
"
ToString_PP_Point
(
translate
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Graphics2D_1_2
*
)
RealGetInterface
(
"
PPB_Graphics2D
;
1
.
2
"
)
)
-
>
SetLayerTransform
(
resource
scale
origin
translate
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Graphics2D_1_2
_PPB_Graphics2D_1_2
=
{
ns_PPB_Graphics2D_1_2
:
:
Create_1_2
ns_PPB_Graphics2D_1_2
:
:
IsGraphics2D_1_2
ns_PPB_Graphics2D_1_2
:
:
Describe_1_2
ns_PPB_Graphics2D_1_2
:
:
PaintImageData_1_2
ns_PPB_Graphics2D_1_2
:
:
Scroll_1_2
ns_PPB_Graphics2D_1_2
:
:
ReplaceContents_1_2
ns_PPB_Graphics2D_1_2
:
:
Flush_1_2
ns_PPB_Graphics2D_1_2
:
:
SetScale_1_2
ns_PPB_Graphics2D_1_2
:
:
GetScale_1_2
ns_PPB_Graphics2D_1_2
:
:
SetLayerTransform_1_2
}
;
const
string
ToString_PPB_Graphics2D
(
const
PPB_Graphics2D_1_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Graphics3D_1_0
{
static
int32_t
GetAttribMaxValue_1_0
(
PP_Resource
instance
int32_t
attribute
int32_t
*
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics3D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAttribMaxValue
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Resource
(
instance
)
)
;
AddProp
(
ss
"
attribute
"
ToString_int32_t
(
attribute
)
)
;
AddProp
(
ss
"
value
"
PointerToString
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
*
value
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Graphics3D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics3D
;
1
.
0
"
)
)
-
>
GetAttribMaxValue
(
instance
attribute
value
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
value
)
{
AddProp
(
os
"
value
"
ToString_int32_t
(
value
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
Create_1_0
(
PP_Instance
instance
PP_Resource
share_context
const
int32_t
attrib_list
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics3D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
share_context
"
ToString_PP_Resource
(
share_context
)
)
;
{
BeginProp
(
ss
"
attrib_list
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
attrib_list
[
_n
]
!
=
PP_GRAPHICS3DATTRIB_NONE
;
+
+
_n
)
{
AddElement
(
ss
ToString_int32_t
(
attrib_list
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Graphics3D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics3D
;
1
.
0
"
)
)
-
>
Create
(
instance
share_context
attrib_list
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsGraphics3D_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics3D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsGraphics3D
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Graphics3D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics3D
;
1
.
0
"
)
)
-
>
IsGraphics3D
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetAttribs_1_0
(
PP_Resource
context
int32_t
attrib_list
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics3D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAttribs
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
{
BeginProp
(
ss
"
attrib_list
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
attrib_list
[
_n
]
!
=
0
;
+
+
_n
)
{
AddElement
(
ss
ToString_int32_t
(
attrib_list
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_int32_t
(
iterator
(
attrib_list
)
[
_n
]
)
;
}
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Graphics3D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics3D
;
1
.
0
"
)
)
-
>
GetAttribs
(
context
attrib_list
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
{
BeginProp
(
os
"
attrib_list
"
)
;
BeginElements
(
os
)
;
for
(
uint32_t
_n
=
0
;
attrib_list
[
_n
]
!
=
0
;
+
+
_n
)
{
AddElement
(
os
ToString_int32_t
(
attrib_list
[
_n
]
)
)
;
}
EndElements
(
os
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetAttribs_1_0
(
PP_Resource
context
const
int32_t
attrib_list
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics3D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetAttribs
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
{
BeginProp
(
ss
"
attrib_list
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
attrib_list
[
_n
]
!
=
0
;
+
+
_n
)
{
AddElement
(
ss
ToString_int32_t
(
attrib_list
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Graphics3D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics3D
;
1
.
0
"
)
)
-
>
SetAttribs
(
context
attrib_list
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetError_1_0
(
PP_Resource
context
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics3D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetError
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Graphics3D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics3D
;
1
.
0
"
)
)
-
>
GetError
(
context
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
ResizeBuffers_1_0
(
PP_Resource
context
int32_t
width
int32_t
height
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics3D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ResizeBuffers
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
width
"
ToString_int32_t
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_int32_t
(
height
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Graphics3D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics3D
;
1
.
0
"
)
)
-
>
ResizeBuffers
(
context
width
height
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SwapBuffers_1_0
(
PP_Resource
context
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Graphics3D
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SwapBuffers
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Graphics3D_1_0
*
)
RealGetInterface
(
"
PPB_Graphics3D
;
1
.
0
"
)
)
-
>
SwapBuffers
(
context
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Graphics3D_1_0
_PPB_Graphics3D_1_0
=
{
ns_PPB_Graphics3D_1_0
:
:
GetAttribMaxValue_1_0
ns_PPB_Graphics3D_1_0
:
:
Create_1_0
ns_PPB_Graphics3D_1_0
:
:
IsGraphics3D_1_0
ns_PPB_Graphics3D_1_0
:
:
GetAttribs_1_0
ns_PPB_Graphics3D_1_0
:
:
SetAttribs_1_0
ns_PPB_Graphics3D_1_0
:
:
GetError_1_0
ns_PPB_Graphics3D_1_0
:
:
ResizeBuffers_1_0
ns_PPB_Graphics3D_1_0
:
:
SwapBuffers_1_0
}
;
const
string
ToString_PPB_Graphics3D
(
const
PPB_Graphics3D_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_HostResolver_Flag
(
const
PP_HostResolver_Flag
*
v
)
{
switch
(
*
v
)
{
case
1
<
<
0
:
return
"
\
"
PP_HOSTRESOLVER_FLAG_CANONNAME
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_HostResolver_Flag
(
const
PP_HostResolver_Flag
&
v
)
{
return
ToString_PP_HostResolver_Flag
(
&
v
)
;
}
void
FromJSON_PP_HostResolver_Flag
(
JSONIterator
&
iterator
PP_HostResolver_Flag
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_HostResolver_Flag
(
v
)
;
}
const
string
ToString_PP_HostResolver_Hint
(
const
PP_HostResolver_Hint
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_HostResolver_Hint
(
*
v
)
;
}
const
string
ToString_PP_HostResolver_Hint
(
const
PP_HostResolver_Hint
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
family
"
ToString_PP_NetAddress_Family
(
v
.
family
)
)
;
AddProp
(
x
"
flags
"
ToString_int32_t
(
v
.
flags
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_HostResolver_Hint
(
JSONIterator
&
iterator
PP_HostResolver_Hint
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Family
(
iterator
value
.
family
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
flags
)
;
}
namespace
ns_PPB_HostResolver_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_HostResolver
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_HostResolver_1_0
*
)
RealGetInterface
(
"
PPB_HostResolver
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsHostResolver_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_HostResolver
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsHostResolver
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_HostResolver_1_0
*
)
RealGetInterface
(
"
PPB_HostResolver
;
1
.
0
"
)
)
-
>
IsHostResolver
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Resolve_1_0
(
PP_Resource
host_resolver
const
char
*
host
uint16_t
port
const
struct
PP_HostResolver_Hint
*
hint
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_HostResolver
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Resolve
\
"
"
)
;
AddProp
(
ss
"
host_resolver
"
ToString_PP_Resource
(
host_resolver
)
)
;
AddProp
(
ss
"
host
"
ToString_str_t
(
host
)
)
;
AddProp
(
ss
"
port
"
ToString_uint16_t
(
port
)
)
;
AddProp
(
ss
"
hint
"
ToString_PP_HostResolver_Hint
(
hint
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_HostResolver_1_0
*
)
RealGetInterface
(
"
PPB_HostResolver
;
1
.
0
"
)
)
-
>
Resolve
(
host_resolver
host
port
hint
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetCanonicalName_1_0
(
PP_Resource
host_resolver
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_HostResolver
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCanonicalName
\
"
"
)
;
AddProp
(
ss
"
host_resolver
"
ToString_PP_Resource
(
host_resolver
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_HostResolver_1_0
*
)
RealGetInterface
(
"
PPB_HostResolver
;
1
.
0
"
)
)
-
>
GetCanonicalName
(
host_resolver
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetNetAddressCount_1_0
(
PP_Resource
host_resolver
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_HostResolver
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetNetAddressCount
\
"
"
)
;
AddProp
(
ss
"
host_resolver
"
ToString_PP_Resource
(
host_resolver
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_HostResolver_1_0
*
)
RealGetInterface
(
"
PPB_HostResolver
;
1
.
0
"
)
)
-
>
GetNetAddressCount
(
host_resolver
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetNetAddress_1_0
(
PP_Resource
host_resolver
uint32_t
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_HostResolver
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetNetAddress
\
"
"
)
;
AddProp
(
ss
"
host_resolver
"
ToString_PP_Resource
(
host_resolver
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_HostResolver_1_0
*
)
RealGetInterface
(
"
PPB_HostResolver
;
1
.
0
"
)
)
-
>
GetNetAddress
(
host_resolver
index
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_HostResolver_1_0
_PPB_HostResolver_1_0
=
{
ns_PPB_HostResolver_1_0
:
:
Create_1_0
ns_PPB_HostResolver_1_0
:
:
IsHostResolver_1_0
ns_PPB_HostResolver_1_0
:
:
Resolve_1_0
ns_PPB_HostResolver_1_0
:
:
GetCanonicalName_1_0
ns_PPB_HostResolver_1_0
:
:
GetNetAddressCount_1_0
ns_PPB_HostResolver_1_0
:
:
GetNetAddress_1_0
}
;
const
string
ToString_PPB_HostResolver
(
const
PPB_HostResolver_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_ImageDataFormat
(
const
PP_ImageDataFormat
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_IMAGEDATAFORMAT_BGRA_PREMUL
\
"
"
;
case
1
:
return
"
\
"
PP_IMAGEDATAFORMAT_RGBA_PREMUL
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_ImageDataFormat
(
const
PP_ImageDataFormat
&
v
)
{
return
ToString_PP_ImageDataFormat
(
&
v
)
;
}
void
FromJSON_PP_ImageDataFormat
(
JSONIterator
&
iterator
PP_ImageDataFormat
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_ImageDataFormat
(
v
)
;
}
const
string
ToString_PP_ImageDataDesc
(
const
PP_ImageDataDesc
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_ImageDataDesc
(
*
v
)
;
}
const
string
ToString_PP_ImageDataDesc
(
const
PP_ImageDataDesc
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
format
"
ToString_PP_ImageDataFormat
(
v
.
format
)
)
;
AddProp
(
x
"
size
"
ToString_PP_Size
(
v
.
size
)
)
;
AddProp
(
x
"
stride
"
ToString_int32_t
(
v
.
stride
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_ImageDataDesc
(
JSONIterator
&
iterator
PP_ImageDataDesc
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_ImageDataFormat
(
iterator
value
.
format
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
value
.
size
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
stride
)
;
}
namespace
ns_PPB_ImageData_1_0
{
static
PP_ImageDataFormat
GetNativeImageDataFormat_1_0
(
void
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ImageData
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetNativeImageDataFormat
\
"
"
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_ImageDataFormat
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_ImageDataFormat
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_ImageDataFormat
rval
=
(
(
PPB_ImageData_1_0
*
)
RealGetInterface
(
"
PPB_ImageData
;
1
.
0
"
)
)
-
>
GetNativeImageDataFormat
(
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_ImageDataFormat
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsImageDataFormatSupported_1_0
(
PP_ImageDataFormat
format
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ImageData
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsImageDataFormatSupported
\
"
"
)
;
AddProp
(
ss
"
format
"
ToString_PP_ImageDataFormat
(
format
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_ImageData_1_0
*
)
RealGetInterface
(
"
PPB_ImageData
;
1
.
0
"
)
)
-
>
IsImageDataFormatSupported
(
format
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
Create_1_0
(
PP_Instance
instance
PP_ImageDataFormat
format
const
struct
PP_Size
*
size
PP_Bool
init_to_zero
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ImageData
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
format
"
ToString_PP_ImageDataFormat
(
format
)
)
;
AddProp
(
ss
"
size
"
ToString_PP_Size
(
size
)
)
;
AddProp
(
ss
"
init_to_zero
"
ToString_PP_Bool
(
init_to_zero
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_ImageData_1_0
*
)
RealGetInterface
(
"
PPB_ImageData
;
1
.
0
"
)
)
-
>
Create
(
instance
format
size
init_to_zero
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsImageData_1_0
(
PP_Resource
image_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ImageData
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsImageData
\
"
"
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_ImageData_1_0
*
)
RealGetInterface
(
"
PPB_ImageData
;
1
.
0
"
)
)
-
>
IsImageData
(
image_data
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
Describe_1_0
(
PP_Resource
image_data
struct
PP_ImageDataDesc
*
desc
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ImageData
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Describe
\
"
"
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
AddProp
(
ss
"
desc
"
PointerToString
(
desc
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
desc
)
{
iterator
.
skip
(
)
;
FromJSON_PP_ImageDataDesc
(
iterator
*
desc
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_ImageData_1_0
*
)
RealGetInterface
(
"
PPB_ImageData
;
1
.
0
"
)
)
-
>
Describe
(
image_data
desc
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
desc
)
{
AddProp
(
os
"
desc
"
ToString_PP_ImageDataDesc
(
desc
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
*
Map_1_0
(
PP_Resource
image_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ImageData
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Map
\
"
"
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
void
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_mem_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
void
*
rval
=
(
(
PPB_ImageData_1_0
*
)
RealGetInterface
(
"
PPB_ImageData
;
1
.
0
"
)
)
-
>
Map
(
image_data
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_mem_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Unmap_1_0
(
PP_Resource
image_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ImageData
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Unmap
\
"
"
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ImageData_1_0
*
)
RealGetInterface
(
"
PPB_ImageData
;
1
.
0
"
)
)
-
>
Unmap
(
image_data
)
;
#
endif
}
}
static
PPB_ImageData_1_0
_PPB_ImageData_1_0
=
{
ns_PPB_ImageData_1_0
:
:
GetNativeImageDataFormat_1_0
ns_PPB_ImageData_1_0
:
:
IsImageDataFormatSupported_1_0
ns_PPB_ImageData_1_0
:
:
Create_1_0
ns_PPB_ImageData_1_0
:
:
IsImageData_1_0
ns_PPB_ImageData_1_0
:
:
Describe_1_0
ns_PPB_ImageData_1_0
:
:
Map_1_0
ns_PPB_ImageData_1_0
:
:
Unmap_1_0
}
;
const
string
ToString_PPB_ImageData
(
const
PPB_ImageData_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_InputEvent_Type
(
const
PP_InputEvent_Type
*
v
)
{
switch
(
*
v
)
{
case
-
1
:
return
"
\
"
PP_INPUTEVENT_TYPE_UNDEFINED
\
"
"
;
case
0
:
return
"
\
"
PP_INPUTEVENT_TYPE_MOUSEDOWN
\
"
"
;
case
1
:
return
"
\
"
PP_INPUTEVENT_TYPE_MOUSEUP
\
"
"
;
case
2
:
return
"
\
"
PP_INPUTEVENT_TYPE_MOUSEMOVE
\
"
"
;
case
3
:
return
"
\
"
PP_INPUTEVENT_TYPE_MOUSEENTER
\
"
"
;
case
4
:
return
"
\
"
PP_INPUTEVENT_TYPE_MOUSELEAVE
\
"
"
;
case
5
:
return
"
\
"
PP_INPUTEVENT_TYPE_WHEEL
\
"
"
;
case
6
:
return
"
\
"
PP_INPUTEVENT_TYPE_RAWKEYDOWN
\
"
"
;
case
7
:
return
"
\
"
PP_INPUTEVENT_TYPE_KEYDOWN
\
"
"
;
case
8
:
return
"
\
"
PP_INPUTEVENT_TYPE_KEYUP
\
"
"
;
case
9
:
return
"
\
"
PP_INPUTEVENT_TYPE_CHAR
\
"
"
;
case
10
:
return
"
\
"
PP_INPUTEVENT_TYPE_CONTEXTMENU
\
"
"
;
case
11
:
return
"
\
"
PP_INPUTEVENT_TYPE_IME_COMPOSITION_START
\
"
"
;
case
12
:
return
"
\
"
PP_INPUTEVENT_TYPE_IME_COMPOSITION_UPDATE
\
"
"
;
case
13
:
return
"
\
"
PP_INPUTEVENT_TYPE_IME_COMPOSITION_END
\
"
"
;
case
14
:
return
"
\
"
PP_INPUTEVENT_TYPE_IME_TEXT
\
"
"
;
case
15
:
return
"
\
"
PP_INPUTEVENT_TYPE_TOUCHSTART
\
"
"
;
case
16
:
return
"
\
"
PP_INPUTEVENT_TYPE_TOUCHMOVE
\
"
"
;
case
17
:
return
"
\
"
PP_INPUTEVENT_TYPE_TOUCHEND
\
"
"
;
case
18
:
return
"
\
"
PP_INPUTEVENT_TYPE_TOUCHCANCEL
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_InputEvent_Type
(
const
PP_InputEvent_Type
&
v
)
{
return
ToString_PP_InputEvent_Type
(
&
v
)
;
}
void
FromJSON_PP_InputEvent_Type
(
JSONIterator
&
iterator
PP_InputEvent_Type
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_InputEvent_Type
(
v
)
;
}
const
string
ToString_PP_InputEvent_Modifier
(
const
PP_InputEvent_Modifier
*
v
)
{
switch
(
*
v
)
{
case
1
<
<
0
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_SHIFTKEY
\
"
"
;
case
1
<
<
1
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_CONTROLKEY
\
"
"
;
case
1
<
<
2
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_ALTKEY
\
"
"
;
case
1
<
<
3
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_METAKEY
\
"
"
;
case
1
<
<
4
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_ISKEYPAD
\
"
"
;
case
1
<
<
5
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_ISAUTOREPEAT
\
"
"
;
case
1
<
<
6
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_LEFTBUTTONDOWN
\
"
"
;
case
1
<
<
7
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_MIDDLEBUTTONDOWN
\
"
"
;
case
1
<
<
8
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_RIGHTBUTTONDOWN
\
"
"
;
case
1
<
<
9
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_CAPSLOCKKEY
\
"
"
;
case
1
<
<
10
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_NUMLOCKKEY
\
"
"
;
case
1
<
<
11
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_ISLEFT
\
"
"
;
case
1
<
<
12
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_ISRIGHT
\
"
"
;
case
1
<
<
13
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_ISPEN
\
"
"
;
case
1
<
<
14
:
return
"
\
"
PP_INPUTEVENT_MODIFIER_ISERASER
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_InputEvent_Modifier
(
const
PP_InputEvent_Modifier
&
v
)
{
return
ToString_PP_InputEvent_Modifier
(
&
v
)
;
}
void
FromJSON_PP_InputEvent_Modifier
(
JSONIterator
&
iterator
PP_InputEvent_Modifier
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_InputEvent_Modifier
(
v
)
;
}
const
string
ToString_PP_InputEvent_MouseButton
(
const
PP_InputEvent_MouseButton
*
v
)
{
switch
(
*
v
)
{
case
-
1
:
return
"
\
"
PP_INPUTEVENT_MOUSEBUTTON_NONE
\
"
"
;
case
0
:
return
"
\
"
PP_INPUTEVENT_MOUSEBUTTON_LEFT
\
"
"
;
case
1
:
return
"
\
"
PP_INPUTEVENT_MOUSEBUTTON_MIDDLE
\
"
"
;
case
2
:
return
"
\
"
PP_INPUTEVENT_MOUSEBUTTON_RIGHT
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_InputEvent_MouseButton
(
const
PP_InputEvent_MouseButton
&
v
)
{
return
ToString_PP_InputEvent_MouseButton
(
&
v
)
;
}
void
FromJSON_PP_InputEvent_MouseButton
(
JSONIterator
&
iterator
PP_InputEvent_MouseButton
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_InputEvent_MouseButton
(
v
)
;
}
const
string
ToString_PP_InputEvent_Class
(
const
PP_InputEvent_Class
*
v
)
{
switch
(
*
v
)
{
case
1
<
<
0
:
return
"
\
"
PP_INPUTEVENT_CLASS_MOUSE
\
"
"
;
case
1
<
<
1
:
return
"
\
"
PP_INPUTEVENT_CLASS_KEYBOARD
\
"
"
;
case
1
<
<
2
:
return
"
\
"
PP_INPUTEVENT_CLASS_WHEEL
\
"
"
;
case
1
<
<
3
:
return
"
\
"
PP_INPUTEVENT_CLASS_TOUCH
\
"
"
;
case
1
<
<
4
:
return
"
\
"
PP_INPUTEVENT_CLASS_IME
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_InputEvent_Class
(
const
PP_InputEvent_Class
&
v
)
{
return
ToString_PP_InputEvent_Class
(
&
v
)
;
}
void
FromJSON_PP_InputEvent_Class
(
JSONIterator
&
iterator
PP_InputEvent_Class
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_InputEvent_Class
(
v
)
;
}
namespace
ns_PPB_InputEvent_1_0
{
static
int32_t
RequestInputEvents_1_0
(
PP_Instance
instance
uint32_t
event_classes
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_InputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RequestInputEvents
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
event_classes
"
ToString_uint32_t
(
event_classes
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_InputEvent_1_0
*
)
RealGetInterface
(
"
PPB_InputEvent
;
1
.
0
"
)
)
-
>
RequestInputEvents
(
instance
event_classes
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
RequestFilteringInputEvents_1_0
(
PP_Instance
instance
uint32_t
event_classes
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_InputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RequestFilteringInputEvents
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
event_classes
"
ToString_uint32_t
(
event_classes
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_InputEvent_1_0
*
)
RealGetInterface
(
"
PPB_InputEvent
;
1
.
0
"
)
)
-
>
RequestFilteringInputEvents
(
instance
event_classes
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
ClearInputEventRequest_1_0
(
PP_Instance
instance
uint32_t
event_classes
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_InputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ClearInputEventRequest
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
event_classes
"
ToString_uint32_t
(
event_classes
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_InputEvent_1_0
*
)
RealGetInterface
(
"
PPB_InputEvent
;
1
.
0
"
)
)
-
>
ClearInputEventRequest
(
instance
event_classes
)
;
#
endif
}
static
PP_Bool
IsInputEvent_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_InputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsInputEvent
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_InputEvent_1_0
*
)
RealGetInterface
(
"
PPB_InputEvent
;
1
.
0
"
)
)
-
>
IsInputEvent
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_InputEvent_Type
GetType_1_0
(
PP_Resource
event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_InputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetType
\
"
"
)
;
AddProp
(
ss
"
event
"
ToString_PP_Resource
(
event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_InputEvent_Type
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_InputEvent_Type
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_InputEvent_Type
rval
=
(
(
PPB_InputEvent_1_0
*
)
RealGetInterface
(
"
PPB_InputEvent
;
1
.
0
"
)
)
-
>
GetType
(
event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_InputEvent_Type
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_TimeTicks
GetTimeStamp_1_0
(
PP_Resource
event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_InputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTimeStamp
\
"
"
)
;
AddProp
(
ss
"
event
"
ToString_PP_Resource
(
event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
double
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_TimeTicks
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
double
rval
=
(
(
PPB_InputEvent_1_0
*
)
RealGetInterface
(
"
PPB_InputEvent
;
1
.
0
"
)
)
-
>
GetTimeStamp
(
event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_TimeTicks
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetModifiers_1_0
(
PP_Resource
event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_InputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetModifiers
\
"
"
)
;
AddProp
(
ss
"
event
"
ToString_PP_Resource
(
event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_InputEvent_1_0
*
)
RealGetInterface
(
"
PPB_InputEvent
;
1
.
0
"
)
)
-
>
GetModifiers
(
event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_InputEvent_1_0
_PPB_InputEvent_1_0
=
{
ns_PPB_InputEvent_1_0
:
:
RequestInputEvents_1_0
ns_PPB_InputEvent_1_0
:
:
RequestFilteringInputEvents_1_0
ns_PPB_InputEvent_1_0
:
:
ClearInputEventRequest_1_0
ns_PPB_InputEvent_1_0
:
:
IsInputEvent_1_0
ns_PPB_InputEvent_1_0
:
:
GetType_1_0
ns_PPB_InputEvent_1_0
:
:
GetTimeStamp_1_0
ns_PPB_InputEvent_1_0
:
:
GetModifiers_1_0
}
;
const
string
ToString_PPB_InputEvent
(
const
PPB_InputEvent_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_MouseInputEvent_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
uint32_t
modifiers
PP_InputEvent_MouseButton
mouse_button
const
struct
PP_Point
*
mouse_position
int32_t
click_count
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_InputEvent_Type
(
type
)
)
;
AddProp
(
ss
"
time_stamp
"
ToString_PP_TimeTicks
(
time_stamp
)
)
;
AddProp
(
ss
"
modifiers
"
ToString_uint32_t
(
modifiers
)
)
;
AddProp
(
ss
"
mouse_button
"
ToString_PP_InputEvent_MouseButton
(
mouse_button
)
)
;
AddProp
(
ss
"
mouse_position
"
ToString_PP_Point
(
mouse_position
)
)
;
AddProp
(
ss
"
click_count
"
ToString_int32_t
(
click_count
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MouseInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_MouseInputEvent
;
1
.
0
"
)
)
-
>
Create
(
instance
type
time_stamp
modifiers
mouse_button
mouse_position
click_count
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsMouseInputEvent_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsMouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_MouseInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_MouseInputEvent
;
1
.
0
"
)
)
-
>
IsMouseInputEvent
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_InputEvent_MouseButton
GetButton_1_0
(
PP_Resource
mouse_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetButton
\
"
"
)
;
AddProp
(
ss
"
mouse_event
"
ToString_PP_Resource
(
mouse_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_InputEvent_MouseButton
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_InputEvent_MouseButton
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_InputEvent_MouseButton
rval
=
(
(
PPB_MouseInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_MouseInputEvent
;
1
.
0
"
)
)
-
>
GetButton
(
mouse_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_InputEvent_MouseButton
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Point
GetPosition_1_0
(
PP_Resource
mouse_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPosition
\
"
"
)
;
AddProp
(
ss
"
mouse_event
"
ToString_PP_Resource
(
mouse_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Point
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Point
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Point
rval
=
(
(
PPB_MouseInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_MouseInputEvent
;
1
.
0
"
)
)
-
>
GetPosition
(
mouse_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Point
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetClickCount_1_0
(
PP_Resource
mouse_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetClickCount
\
"
"
)
;
AddProp
(
ss
"
mouse_event
"
ToString_PP_Resource
(
mouse_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MouseInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_MouseInputEvent
;
1
.
0
"
)
)
-
>
GetClickCount
(
mouse_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_MouseInputEvent_1_0
_PPB_MouseInputEvent_1_0
=
{
ns_PPB_MouseInputEvent_1_0
:
:
Create_1_0
ns_PPB_MouseInputEvent_1_0
:
:
IsMouseInputEvent_1_0
ns_PPB_MouseInputEvent_1_0
:
:
GetButton_1_0
ns_PPB_MouseInputEvent_1_0
:
:
GetPosition_1_0
ns_PPB_MouseInputEvent_1_0
:
:
GetClickCount_1_0
}
;
const
string
ToString_PPB_MouseInputEvent
(
const
PPB_MouseInputEvent_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_MouseInputEvent_1_1
{
static
PP_Resource
Create_1_1
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
uint32_t
modifiers
PP_InputEvent_MouseButton
mouse_button
const
struct
PP_Point
*
mouse_position
int32_t
click_count
const
struct
PP_Point
*
mouse_movement
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_InputEvent_Type
(
type
)
)
;
AddProp
(
ss
"
time_stamp
"
ToString_PP_TimeTicks
(
time_stamp
)
)
;
AddProp
(
ss
"
modifiers
"
ToString_uint32_t
(
modifiers
)
)
;
AddProp
(
ss
"
mouse_button
"
ToString_PP_InputEvent_MouseButton
(
mouse_button
)
)
;
AddProp
(
ss
"
mouse_position
"
ToString_PP_Point
(
mouse_position
)
)
;
AddProp
(
ss
"
click_count
"
ToString_int32_t
(
click_count
)
)
;
AddProp
(
ss
"
mouse_movement
"
ToString_PP_Point
(
mouse_movement
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MouseInputEvent_1_1
*
)
RealGetInterface
(
"
PPB_MouseInputEvent
;
1
.
1
"
)
)
-
>
Create
(
instance
type
time_stamp
modifiers
mouse_button
mouse_position
click_count
mouse_movement
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsMouseInputEvent_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsMouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_MouseInputEvent_1_1
*
)
RealGetInterface
(
"
PPB_MouseInputEvent
;
1
.
1
"
)
)
-
>
IsMouseInputEvent
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_InputEvent_MouseButton
GetButton_1_1
(
PP_Resource
mouse_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetButton
\
"
"
)
;
AddProp
(
ss
"
mouse_event
"
ToString_PP_Resource
(
mouse_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_InputEvent_MouseButton
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_InputEvent_MouseButton
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_InputEvent_MouseButton
rval
=
(
(
PPB_MouseInputEvent_1_1
*
)
RealGetInterface
(
"
PPB_MouseInputEvent
;
1
.
1
"
)
)
-
>
GetButton
(
mouse_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_InputEvent_MouseButton
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Point
GetPosition_1_1
(
PP_Resource
mouse_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPosition
\
"
"
)
;
AddProp
(
ss
"
mouse_event
"
ToString_PP_Resource
(
mouse_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Point
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Point
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Point
rval
=
(
(
PPB_MouseInputEvent_1_1
*
)
RealGetInterface
(
"
PPB_MouseInputEvent
;
1
.
1
"
)
)
-
>
GetPosition
(
mouse_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Point
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetClickCount_1_1
(
PP_Resource
mouse_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetClickCount
\
"
"
)
;
AddProp
(
ss
"
mouse_event
"
ToString_PP_Resource
(
mouse_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MouseInputEvent_1_1
*
)
RealGetInterface
(
"
PPB_MouseInputEvent
;
1
.
1
"
)
)
-
>
GetClickCount
(
mouse_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Point
GetMovement_1_1
(
PP_Resource
mouse_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetMovement
\
"
"
)
;
AddProp
(
ss
"
mouse_event
"
ToString_PP_Resource
(
mouse_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Point
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Point
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Point
rval
=
(
(
PPB_MouseInputEvent_1_1
*
)
RealGetInterface
(
"
PPB_MouseInputEvent
;
1
.
1
"
)
)
-
>
GetMovement
(
mouse_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Point
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_MouseInputEvent_1_1
_PPB_MouseInputEvent_1_1
=
{
ns_PPB_MouseInputEvent_1_1
:
:
Create_1_1
ns_PPB_MouseInputEvent_1_1
:
:
IsMouseInputEvent_1_1
ns_PPB_MouseInputEvent_1_1
:
:
GetButton_1_1
ns_PPB_MouseInputEvent_1_1
:
:
GetPosition_1_1
ns_PPB_MouseInputEvent_1_1
:
:
GetClickCount_1_1
ns_PPB_MouseInputEvent_1_1
:
:
GetMovement_1_1
}
;
const
string
ToString_PPB_MouseInputEvent
(
const
PPB_MouseInputEvent_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_WheelInputEvent_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
PP_TimeTicks
time_stamp
uint32_t
modifiers
const
struct
PP_FloatPoint
*
wheel_delta
const
struct
PP_FloatPoint
*
wheel_ticks
PP_Bool
scroll_by_page
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WheelInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
time_stamp
"
ToString_PP_TimeTicks
(
time_stamp
)
)
;
AddProp
(
ss
"
modifiers
"
ToString_uint32_t
(
modifiers
)
)
;
AddProp
(
ss
"
wheel_delta
"
ToString_PP_FloatPoint
(
wheel_delta
)
)
;
AddProp
(
ss
"
wheel_ticks
"
ToString_PP_FloatPoint
(
wheel_ticks
)
)
;
AddProp
(
ss
"
scroll_by_page
"
ToString_PP_Bool
(
scroll_by_page
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_WheelInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_WheelInputEvent
;
1
.
0
"
)
)
-
>
Create
(
instance
time_stamp
modifiers
wheel_delta
wheel_ticks
scroll_by_page
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsWheelInputEvent_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WheelInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsWheelInputEvent
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_WheelInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_WheelInputEvent
;
1
.
0
"
)
)
-
>
IsWheelInputEvent
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_FloatPoint
GetDelta_1_0
(
PP_Resource
wheel_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WheelInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDelta
\
"
"
)
;
AddProp
(
ss
"
wheel_event
"
ToString_PP_Resource
(
wheel_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_FloatPoint
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_FloatPoint
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_FloatPoint
rval
=
(
(
PPB_WheelInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_WheelInputEvent
;
1
.
0
"
)
)
-
>
GetDelta
(
wheel_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_FloatPoint
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_FloatPoint
GetTicks_1_0
(
PP_Resource
wheel_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WheelInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTicks
\
"
"
)
;
AddProp
(
ss
"
wheel_event
"
ToString_PP_Resource
(
wheel_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_FloatPoint
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_FloatPoint
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_FloatPoint
rval
=
(
(
PPB_WheelInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_WheelInputEvent
;
1
.
0
"
)
)
-
>
GetTicks
(
wheel_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_FloatPoint
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetScrollByPage_1_0
(
PP_Resource
wheel_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WheelInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetScrollByPage
\
"
"
)
;
AddProp
(
ss
"
wheel_event
"
ToString_PP_Resource
(
wheel_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_WheelInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_WheelInputEvent
;
1
.
0
"
)
)
-
>
GetScrollByPage
(
wheel_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_WheelInputEvent_1_0
_PPB_WheelInputEvent_1_0
=
{
ns_PPB_WheelInputEvent_1_0
:
:
Create_1_0
ns_PPB_WheelInputEvent_1_0
:
:
IsWheelInputEvent_1_0
ns_PPB_WheelInputEvent_1_0
:
:
GetDelta_1_0
ns_PPB_WheelInputEvent_1_0
:
:
GetTicks_1_0
ns_PPB_WheelInputEvent_1_0
:
:
GetScrollByPage_1_0
}
;
const
string
ToString_PPB_WheelInputEvent
(
const
PPB_WheelInputEvent_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_KeyboardInputEvent_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
uint32_t
modifiers
uint32_t
key_code
struct
PP_Var
character_text
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_KeyboardInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_InputEvent_Type
(
type
)
)
;
AddProp
(
ss
"
time_stamp
"
ToString_PP_TimeTicks
(
time_stamp
)
)
;
AddProp
(
ss
"
modifiers
"
ToString_uint32_t
(
modifiers
)
)
;
AddProp
(
ss
"
key_code
"
ToString_uint32_t
(
key_code
)
)
;
AddProp
(
ss
"
character_text
"
ToString_PP_Var
(
character_text
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_KeyboardInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_KeyboardInputEvent
;
1
.
0
"
)
)
-
>
Create
(
instance
type
time_stamp
modifiers
key_code
character_text
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsKeyboardInputEvent_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_KeyboardInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsKeyboardInputEvent
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_KeyboardInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_KeyboardInputEvent
;
1
.
0
"
)
)
-
>
IsKeyboardInputEvent
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetKeyCode_1_0
(
PP_Resource
key_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_KeyboardInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetKeyCode
\
"
"
)
;
AddProp
(
ss
"
key_event
"
ToString_PP_Resource
(
key_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_KeyboardInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_KeyboardInputEvent
;
1
.
0
"
)
)
-
>
GetKeyCode
(
key_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetCharacterText_1_0
(
PP_Resource
character_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_KeyboardInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCharacterText
\
"
"
)
;
AddProp
(
ss
"
character_event
"
ToString_PP_Resource
(
character_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_KeyboardInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_KeyboardInputEvent
;
1
.
0
"
)
)
-
>
GetCharacterText
(
character_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_KeyboardInputEvent_1_0
_PPB_KeyboardInputEvent_1_0
=
{
ns_PPB_KeyboardInputEvent_1_0
:
:
Create_1_0
ns_PPB_KeyboardInputEvent_1_0
:
:
IsKeyboardInputEvent_1_0
ns_PPB_KeyboardInputEvent_1_0
:
:
GetKeyCode_1_0
ns_PPB_KeyboardInputEvent_1_0
:
:
GetCharacterText_1_0
}
;
const
string
ToString_PPB_KeyboardInputEvent
(
const
PPB_KeyboardInputEvent_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_KeyboardInputEvent_1_2
{
static
PP_Resource
Create_1_2
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
uint32_t
modifiers
uint32_t
key_code
struct
PP_Var
character_text
struct
PP_Var
code
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_KeyboardInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_InputEvent_Type
(
type
)
)
;
AddProp
(
ss
"
time_stamp
"
ToString_PP_TimeTicks
(
time_stamp
)
)
;
AddProp
(
ss
"
modifiers
"
ToString_uint32_t
(
modifiers
)
)
;
AddProp
(
ss
"
key_code
"
ToString_uint32_t
(
key_code
)
)
;
AddProp
(
ss
"
character_text
"
ToString_PP_Var
(
character_text
)
)
;
AddProp
(
ss
"
code
"
ToString_PP_Var
(
code
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_KeyboardInputEvent_1_2
*
)
RealGetInterface
(
"
PPB_KeyboardInputEvent
;
1
.
2
"
)
)
-
>
Create
(
instance
type
time_stamp
modifiers
key_code
character_text
code
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsKeyboardInputEvent_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_KeyboardInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsKeyboardInputEvent
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_KeyboardInputEvent_1_2
*
)
RealGetInterface
(
"
PPB_KeyboardInputEvent
;
1
.
2
"
)
)
-
>
IsKeyboardInputEvent
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetKeyCode_1_2
(
PP_Resource
key_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_KeyboardInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetKeyCode
\
"
"
)
;
AddProp
(
ss
"
key_event
"
ToString_PP_Resource
(
key_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_KeyboardInputEvent_1_2
*
)
RealGetInterface
(
"
PPB_KeyboardInputEvent
;
1
.
2
"
)
)
-
>
GetKeyCode
(
key_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetCharacterText_1_2
(
PP_Resource
character_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_KeyboardInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCharacterText
\
"
"
)
;
AddProp
(
ss
"
character_event
"
ToString_PP_Resource
(
character_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_KeyboardInputEvent_1_2
*
)
RealGetInterface
(
"
PPB_KeyboardInputEvent
;
1
.
2
"
)
)
-
>
GetCharacterText
(
character_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetCode_1_2
(
PP_Resource
key_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_KeyboardInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCode
\
"
"
)
;
AddProp
(
ss
"
key_event
"
ToString_PP_Resource
(
key_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_KeyboardInputEvent_1_2
*
)
RealGetInterface
(
"
PPB_KeyboardInputEvent
;
1
.
2
"
)
)
-
>
GetCode
(
key_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_KeyboardInputEvent_1_2
_PPB_KeyboardInputEvent_1_2
=
{
ns_PPB_KeyboardInputEvent_1_2
:
:
Create_1_2
ns_PPB_KeyboardInputEvent_1_2
:
:
IsKeyboardInputEvent_1_2
ns_PPB_KeyboardInputEvent_1_2
:
:
GetKeyCode_1_2
ns_PPB_KeyboardInputEvent_1_2
:
:
GetCharacterText_1_2
ns_PPB_KeyboardInputEvent_1_2
:
:
GetCode_1_2
}
;
const
string
ToString_PPB_KeyboardInputEvent
(
const
PPB_KeyboardInputEvent_1_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_TouchListType
(
const
PP_TouchListType
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_TOUCHLIST_TYPE_TOUCHES
\
"
"
;
case
1
:
return
"
\
"
PP_TOUCHLIST_TYPE_CHANGEDTOUCHES
\
"
"
;
case
2
:
return
"
\
"
PP_TOUCHLIST_TYPE_TARGETTOUCHES
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_TouchListType
(
const
PP_TouchListType
&
v
)
{
return
ToString_PP_TouchListType
(
&
v
)
;
}
void
FromJSON_PP_TouchListType
(
JSONIterator
&
iterator
PP_TouchListType
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_TouchListType
(
v
)
;
}
namespace
ns_PPB_TouchInputEvent_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
uint32_t
modifiers
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TouchInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_InputEvent_Type
(
type
)
)
;
AddProp
(
ss
"
time_stamp
"
ToString_PP_TimeTicks
(
time_stamp
)
)
;
AddProp
(
ss
"
modifiers
"
ToString_uint32_t
(
modifiers
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TouchInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_TouchInputEvent
;
1
.
0
"
)
)
-
>
Create
(
instance
type
time_stamp
modifiers
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
AddTouchPoint_1_0
(
PP_Resource
touch_event
PP_TouchListType
list
const
struct
PP_TouchPoint
*
point
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TouchInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AddTouchPoint
\
"
"
)
;
AddProp
(
ss
"
touch_event
"
ToString_PP_Resource
(
touch_event
)
)
;
AddProp
(
ss
"
list
"
ToString_PP_TouchListType
(
list
)
)
;
AddProp
(
ss
"
point
"
ToString_PP_TouchPoint
(
point
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TouchInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_TouchInputEvent
;
1
.
0
"
)
)
-
>
AddTouchPoint
(
touch_event
list
point
)
;
#
endif
}
static
PP_Bool
IsTouchInputEvent_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TouchInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsTouchInputEvent
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TouchInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_TouchInputEvent
;
1
.
0
"
)
)
-
>
IsTouchInputEvent
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetTouchCount_1_0
(
PP_Resource
resource
PP_TouchListType
list
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TouchInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTouchCount
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
list
"
ToString_PP_TouchListType
(
list
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_TouchInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_TouchInputEvent
;
1
.
0
"
)
)
-
>
GetTouchCount
(
resource
list
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_TouchPoint
GetTouchByIndex_1_0
(
PP_Resource
resource
PP_TouchListType
list
uint32_t
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TouchInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTouchByIndex
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
list
"
ToString_PP_TouchListType
(
list
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_TouchPoint
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_TouchPoint
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_TouchPoint
rval
=
(
(
PPB_TouchInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_TouchInputEvent
;
1
.
0
"
)
)
-
>
GetTouchByIndex
(
resource
list
index
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_TouchPoint
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_TouchPoint
GetTouchById_1_0
(
PP_Resource
resource
PP_TouchListType
list
uint32_t
touch_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TouchInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTouchById
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
list
"
ToString_PP_TouchListType
(
list
)
)
;
AddProp
(
ss
"
touch_id
"
ToString_uint32_t
(
touch_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_TouchPoint
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_TouchPoint
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_TouchPoint
rval
=
(
(
PPB_TouchInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_TouchInputEvent
;
1
.
0
"
)
)
-
>
GetTouchById
(
resource
list
touch_id
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_TouchPoint
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_TouchInputEvent_1_0
_PPB_TouchInputEvent_1_0
=
{
ns_PPB_TouchInputEvent_1_0
:
:
Create_1_0
ns_PPB_TouchInputEvent_1_0
:
:
AddTouchPoint_1_0
ns_PPB_TouchInputEvent_1_0
:
:
IsTouchInputEvent_1_0
ns_PPB_TouchInputEvent_1_0
:
:
GetTouchCount_1_0
ns_PPB_TouchInputEvent_1_0
:
:
GetTouchByIndex_1_0
ns_PPB_TouchInputEvent_1_0
:
:
GetTouchById_1_0
}
;
const
string
ToString_PPB_TouchInputEvent
(
const
PPB_TouchInputEvent_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_IMEInputEvent_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
struct
PP_Var
text
uint32_t
segment_number
const
uint32_t
segment_offsets
[
]
int32_t
target_segment
uint32_t
selection_start
uint32_t
selection_end
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_InputEvent_Type
(
type
)
)
;
AddProp
(
ss
"
time_stamp
"
ToString_PP_TimeTicks
(
time_stamp
)
)
;
AddProp
(
ss
"
text
"
ToString_PP_Var
(
text
)
)
;
AddProp
(
ss
"
segment_number
"
ToString_uint32_t
(
segment_number
)
)
;
{
BeginProp
(
ss
"
segment_offsets
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
segment_offsets
[
_n
]
!
=
0
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint32_t
(
segment_offsets
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
target_segment
"
ToString_int32_t
(
target_segment
)
)
;
AddProp
(
ss
"
selection_start
"
ToString_uint32_t
(
selection_start
)
)
;
AddProp
(
ss
"
selection_end
"
ToString_uint32_t
(
selection_end
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_IMEInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
;
1
.
0
"
)
)
-
>
Create
(
instance
type
time_stamp
text
segment_number
segment_offsets
target_segment
selection_start
selection_end
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsIMEInputEvent_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsIMEInputEvent
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_IMEInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
;
1
.
0
"
)
)
-
>
IsIMEInputEvent
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetText_1_0
(
PP_Resource
ime_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetText
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_IMEInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
;
1
.
0
"
)
)
-
>
GetText
(
ime_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetSegmentNumber_1_0
(
PP_Resource
ime_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSegmentNumber
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_IMEInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
;
1
.
0
"
)
)
-
>
GetSegmentNumber
(
ime_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetSegmentOffset_1_0
(
PP_Resource
ime_event
uint32_t
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSegmentOffset
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_IMEInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
;
1
.
0
"
)
)
-
>
GetSegmentOffset
(
ime_event
index
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetTargetSegment_1_0
(
PP_Resource
ime_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTargetSegment
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_IMEInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
;
1
.
0
"
)
)
-
>
GetTargetSegment
(
ime_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
GetSelection_1_0
(
PP_Resource
ime_event
uint32_t
*
start
uint32_t
*
end
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSelection
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
AddProp
(
ss
"
start
"
PointerToString
(
start
)
)
;
AddProp
(
ss
"
end
"
PointerToString
(
end
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
start
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
end
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_IMEInputEvent_1_0
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
;
1
.
0
"
)
)
-
>
GetSelection
(
ime_event
start
end
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
start
)
{
AddProp
(
os
"
start
"
ToString_uint32_t
(
start
)
)
;
}
if
(
!
!
end
)
{
AddProp
(
os
"
end
"
ToString_uint32_t
(
end
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
}
static
PPB_IMEInputEvent_1_0
_PPB_IMEInputEvent_1_0
=
{
ns_PPB_IMEInputEvent_1_0
:
:
Create_1_0
ns_PPB_IMEInputEvent_1_0
:
:
IsIMEInputEvent_1_0
ns_PPB_IMEInputEvent_1_0
:
:
GetText_1_0
ns_PPB_IMEInputEvent_1_0
:
:
GetSegmentNumber_1_0
ns_PPB_IMEInputEvent_1_0
:
:
GetSegmentOffset_1_0
ns_PPB_IMEInputEvent_1_0
:
:
GetTargetSegment_1_0
ns_PPB_IMEInputEvent_1_0
:
:
GetSelection_1_0
}
;
const
string
ToString_PPB_IMEInputEvent
(
const
PPB_IMEInputEvent_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Instance_1_0
{
static
PP_Bool
BindGraphics_1_0
(
PP_Instance
instance
PP_Resource
device
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Instance
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BindGraphics
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
device
"
ToString_PP_Resource
(
device
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Instance_1_0
*
)
RealGetInterface
(
"
PPB_Instance
;
1
.
0
"
)
)
-
>
BindGraphics
(
instance
device
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFullFrame_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Instance
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFullFrame
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Instance_1_0
*
)
RealGetInterface
(
"
PPB_Instance
;
1
.
0
"
)
)
-
>
IsFullFrame
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Instance_1_0
_PPB_Instance_1_0
=
{
ns_PPB_Instance_1_0
:
:
BindGraphics_1_0
ns_PPB_Instance_1_0
:
:
IsFullFrame_1_0
}
;
const
string
ToString_PPB_Instance
(
const
PPB_Instance_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_MediaStreamAudioTrack_Attrib
(
const
PP_MediaStreamAudioTrack_Attrib
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_NONE
\
"
"
;
case
1
:
return
"
\
"
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_BUFFERS
\
"
"
;
case
2
:
return
"
\
"
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_SAMPLE_RATE
\
"
"
;
case
3
:
return
"
\
"
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_SAMPLE_SIZE
\
"
"
;
case
4
:
return
"
\
"
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_CHANNELS
\
"
"
;
case
5
:
return
"
\
"
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_DURATION
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_MediaStreamAudioTrack_Attrib
(
const
PP_MediaStreamAudioTrack_Attrib
&
v
)
{
return
ToString_PP_MediaStreamAudioTrack_Attrib
(
&
v
)
;
}
void
FromJSON_PP_MediaStreamAudioTrack_Attrib
(
JSONIterator
&
iterator
PP_MediaStreamAudioTrack_Attrib
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_MediaStreamAudioTrack_Attrib
(
v
)
;
}
namespace
ns_PPB_MediaStreamAudioTrack_0_1
{
static
PP_Bool
IsMediaStreamAudioTrack_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamAudioTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsMediaStreamAudioTrack
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_MediaStreamAudioTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamAudioTrack
;
0
.
1
"
)
)
-
>
IsMediaStreamAudioTrack
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Configure_0_1
(
PP_Resource
audio_track
const
int32_t
attrib_list
[
]
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamAudioTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Configure
\
"
"
)
;
AddProp
(
ss
"
audio_track
"
ToString_PP_Resource
(
audio_track
)
)
;
{
BeginProp
(
ss
"
attrib_list
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
attrib_list
[
_n
]
!
=
PP_MEDIASTREAMAUDIOTRACK_ATTRIB_NONE
;
+
+
_n
)
{
AddElement
(
ss
ToString_int32_t
(
attrib_list
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_MediaStreamAudioTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamAudioTrack
;
0
.
1
"
)
)
-
>
Configure
(
audio_track
attrib_list
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetAttrib_0_1
(
PP_Resource
audio_track
PP_MediaStreamAudioTrack_Attrib
attrib
int32_t
*
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamAudioTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAttrib
\
"
"
)
;
AddProp
(
ss
"
audio_track
"
ToString_PP_Resource
(
audio_track
)
)
;
AddProp
(
ss
"
attrib
"
ToString_PP_MediaStreamAudioTrack_Attrib
(
attrib
)
)
;
AddProp
(
ss
"
value
"
PointerToString
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
*
value
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MediaStreamAudioTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamAudioTrack
;
0
.
1
"
)
)
-
>
GetAttrib
(
audio_track
attrib
value
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
value
)
{
AddProp
(
os
"
value
"
ToString_int32_t
(
value
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetId_0_1
(
PP_Resource
audio_track
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamAudioTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetId
\
"
"
)
;
AddProp
(
ss
"
audio_track
"
ToString_PP_Resource
(
audio_track
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_MediaStreamAudioTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamAudioTrack
;
0
.
1
"
)
)
-
>
GetId
(
audio_track
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
HasEnded_0_1
(
PP_Resource
audio_track
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamAudioTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
HasEnded
\
"
"
)
;
AddProp
(
ss
"
audio_track
"
ToString_PP_Resource
(
audio_track
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_MediaStreamAudioTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamAudioTrack
;
0
.
1
"
)
)
-
>
HasEnded
(
audio_track
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetBuffer_0_1
(
PP_Resource
audio_track
PP_Resource
*
buffer
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamAudioTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBuffer
\
"
"
)
;
AddProp
(
ss
"
audio_track
"
ToString_PP_Resource
(
audio_track
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_MediaStreamAudioTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamAudioTrack
;
0
.
1
"
)
)
-
>
GetBuffer
(
audio_track
buffer
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
buffer
)
{
AddProp
(
os
"
buffer
"
ToString_PP_Resource
(
buffer
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
RecycleBuffer_0_1
(
PP_Resource
audio_track
PP_Resource
buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamAudioTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecycleBuffer
\
"
"
)
;
AddProp
(
ss
"
audio_track
"
ToString_PP_Resource
(
audio_track
)
)
;
AddProp
(
ss
"
buffer
"
ToString_PP_Resource
(
buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MediaStreamAudioTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamAudioTrack
;
0
.
1
"
)
)
-
>
RecycleBuffer
(
audio_track
buffer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_0_1
(
PP_Resource
audio_track
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamAudioTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
audio_track
"
ToString_PP_Resource
(
audio_track
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_MediaStreamAudioTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamAudioTrack
;
0
.
1
"
)
)
-
>
Close
(
audio_track
)
;
#
endif
}
}
static
PPB_MediaStreamAudioTrack_0_1
_PPB_MediaStreamAudioTrack_0_1
=
{
ns_PPB_MediaStreamAudioTrack_0_1
:
:
IsMediaStreamAudioTrack_0_1
ns_PPB_MediaStreamAudioTrack_0_1
:
:
Configure_0_1
ns_PPB_MediaStreamAudioTrack_0_1
:
:
GetAttrib_0_1
ns_PPB_MediaStreamAudioTrack_0_1
:
:
GetId_0_1
ns_PPB_MediaStreamAudioTrack_0_1
:
:
HasEnded_0_1
ns_PPB_MediaStreamAudioTrack_0_1
:
:
GetBuffer_0_1
ns_PPB_MediaStreamAudioTrack_0_1
:
:
RecycleBuffer_0_1
ns_PPB_MediaStreamAudioTrack_0_1
:
:
Close_0_1
}
;
const
string
ToString_PPB_MediaStreamAudioTrack
(
const
PPB_MediaStreamAudioTrack_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_MediaStreamVideoTrack_Attrib
(
const
PP_MediaStreamVideoTrack_Attrib
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_MEDIASTREAMVIDEOTRACK_ATTRIB_NONE
\
"
"
;
case
1
:
return
"
\
"
PP_MEDIASTREAMVIDEOTRACK_ATTRIB_BUFFERED_FRAMES
\
"
"
;
case
2
:
return
"
\
"
PP_MEDIASTREAMVIDEOTRACK_ATTRIB_WIDTH
\
"
"
;
case
3
:
return
"
\
"
PP_MEDIASTREAMVIDEOTRACK_ATTRIB_HEIGHT
\
"
"
;
case
4
:
return
"
\
"
PP_MEDIASTREAMVIDEOTRACK_ATTRIB_FORMAT
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_MediaStreamVideoTrack_Attrib
(
const
PP_MediaStreamVideoTrack_Attrib
&
v
)
{
return
ToString_PP_MediaStreamVideoTrack_Attrib
(
&
v
)
;
}
void
FromJSON_PP_MediaStreamVideoTrack_Attrib
(
JSONIterator
&
iterator
PP_MediaStreamVideoTrack_Attrib
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_MediaStreamVideoTrack_Attrib
(
v
)
;
}
namespace
ns_PPB_MediaStreamVideoTrack_0_1
{
static
PP_Bool
IsMediaStreamVideoTrack_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsMediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_MediaStreamVideoTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
0
.
1
"
)
)
-
>
IsMediaStreamVideoTrack
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Configure_0_1
(
PP_Resource
video_track
const
int32_t
attrib_list
[
]
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Configure
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
{
BeginProp
(
ss
"
attrib_list
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
attrib_list
[
_n
]
!
=
0
;
+
+
_n
)
{
AddElement
(
ss
ToString_int32_t
(
attrib_list
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_MediaStreamVideoTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
0
.
1
"
)
)
-
>
Configure
(
video_track
attrib_list
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetAttrib_0_1
(
PP_Resource
video_track
PP_MediaStreamVideoTrack_Attrib
attrib
int32_t
*
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAttrib
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
AddProp
(
ss
"
attrib
"
ToString_PP_MediaStreamVideoTrack_Attrib
(
attrib
)
)
;
AddProp
(
ss
"
value
"
PointerToString
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
*
value
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MediaStreamVideoTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
0
.
1
"
)
)
-
>
GetAttrib
(
video_track
attrib
value
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
value
)
{
AddProp
(
os
"
value
"
ToString_int32_t
(
value
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetId_0_1
(
PP_Resource
video_track
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetId
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_MediaStreamVideoTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
0
.
1
"
)
)
-
>
GetId
(
video_track
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
HasEnded_0_1
(
PP_Resource
video_track
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
HasEnded
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_MediaStreamVideoTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
0
.
1
"
)
)
-
>
HasEnded
(
video_track
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetFrame_0_1
(
PP_Resource
video_track
PP_Resource
*
frame
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFrame
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
AddProp
(
ss
"
frame
"
PointerToString
(
frame
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
frame
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_MediaStreamVideoTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
0
.
1
"
)
)
-
>
GetFrame
(
video_track
frame
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
frame
)
{
AddProp
(
os
"
frame
"
ToString_PP_Resource
(
frame
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
RecycleFrame_0_1
(
PP_Resource
video_track
PP_Resource
frame
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecycleFrame
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
AddProp
(
ss
"
frame
"
ToString_PP_Resource
(
frame
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MediaStreamVideoTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
0
.
1
"
)
)
-
>
RecycleFrame
(
video_track
frame
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_0_1
(
PP_Resource
video_track
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_MediaStreamVideoTrack_0_1
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
0
.
1
"
)
)
-
>
Close
(
video_track
)
;
#
endif
}
}
static
PPB_MediaStreamVideoTrack_0_1
_PPB_MediaStreamVideoTrack_0_1
=
{
ns_PPB_MediaStreamVideoTrack_0_1
:
:
IsMediaStreamVideoTrack_0_1
ns_PPB_MediaStreamVideoTrack_0_1
:
:
Configure_0_1
ns_PPB_MediaStreamVideoTrack_0_1
:
:
GetAttrib_0_1
ns_PPB_MediaStreamVideoTrack_0_1
:
:
GetId_0_1
ns_PPB_MediaStreamVideoTrack_0_1
:
:
HasEnded_0_1
ns_PPB_MediaStreamVideoTrack_0_1
:
:
GetFrame_0_1
ns_PPB_MediaStreamVideoTrack_0_1
:
:
RecycleFrame_0_1
ns_PPB_MediaStreamVideoTrack_0_1
:
:
Close_0_1
}
;
const
string
ToString_PPB_MediaStreamVideoTrack
(
const
PPB_MediaStreamVideoTrack_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_MediaStreamVideoTrack_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MediaStreamVideoTrack_1_0
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsMediaStreamVideoTrack_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsMediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_MediaStreamVideoTrack_1_0
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
1
.
0
"
)
)
-
>
IsMediaStreamVideoTrack
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Configure_1_0
(
PP_Resource
video_track
const
int32_t
attrib_list
[
]
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Configure
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
{
BeginProp
(
ss
"
attrib_list
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
attrib_list
[
_n
]
!
=
0
;
+
+
_n
)
{
AddElement
(
ss
ToString_int32_t
(
attrib_list
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_MediaStreamVideoTrack_1_0
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
1
.
0
"
)
)
-
>
Configure
(
video_track
attrib_list
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetAttrib_1_0
(
PP_Resource
video_track
PP_MediaStreamVideoTrack_Attrib
attrib
int32_t
*
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAttrib
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
AddProp
(
ss
"
attrib
"
ToString_PP_MediaStreamVideoTrack_Attrib
(
attrib
)
)
;
AddProp
(
ss
"
value
"
PointerToString
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
*
value
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MediaStreamVideoTrack_1_0
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
1
.
0
"
)
)
-
>
GetAttrib
(
video_track
attrib
value
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
value
)
{
AddProp
(
os
"
value
"
ToString_int32_t
(
value
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetId_1_0
(
PP_Resource
video_track
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetId
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_MediaStreamVideoTrack_1_0
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
1
.
0
"
)
)
-
>
GetId
(
video_track
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
HasEnded_1_0
(
PP_Resource
video_track
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
HasEnded
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_MediaStreamVideoTrack_1_0
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
1
.
0
"
)
)
-
>
HasEnded
(
video_track
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetFrame_1_0
(
PP_Resource
video_track
PP_Resource
*
frame
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFrame
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
AddProp
(
ss
"
frame
"
PointerToString
(
frame
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
frame
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_MediaStreamVideoTrack_1_0
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
1
.
0
"
)
)
-
>
GetFrame
(
video_track
frame
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
frame
)
{
AddProp
(
os
"
frame
"
ToString_PP_Resource
(
frame
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
RecycleFrame_1_0
(
PP_Resource
video_track
PP_Resource
frame
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecycleFrame
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
AddProp
(
ss
"
frame
"
ToString_PP_Resource
(
frame
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MediaStreamVideoTrack_1_0
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
1
.
0
"
)
)
-
>
RecycleFrame
(
video_track
frame
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_1_0
(
PP_Resource
video_track
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_MediaStreamVideoTrack_1_0
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
1
.
0
"
)
)
-
>
Close
(
video_track
)
;
#
endif
}
static
int32_t
GetEmptyFrame_1_0
(
PP_Resource
video_track
PP_Resource
*
frame
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetEmptyFrame
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
AddProp
(
ss
"
frame
"
PointerToString
(
frame
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
frame
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_MediaStreamVideoTrack_1_0
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
1
.
0
"
)
)
-
>
GetEmptyFrame
(
video_track
frame
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
frame
)
{
AddProp
(
os
"
frame
"
ToString_PP_Resource
(
frame
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
PutFrame_1_0
(
PP_Resource
video_track
PP_Resource
frame
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MediaStreamVideoTrack
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PutFrame
\
"
"
)
;
AddProp
(
ss
"
video_track
"
ToString_PP_Resource
(
video_track
)
)
;
AddProp
(
ss
"
frame
"
ToString_PP_Resource
(
frame
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MediaStreamVideoTrack_1_0
*
)
RealGetInterface
(
"
PPB_MediaStreamVideoTrack
;
1
.
0
"
)
)
-
>
PutFrame
(
video_track
frame
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_MediaStreamVideoTrack_1_0
_PPB_MediaStreamVideoTrack_1_0
=
{
ns_PPB_MediaStreamVideoTrack_1_0
:
:
Create_1_0
ns_PPB_MediaStreamVideoTrack_1_0
:
:
IsMediaStreamVideoTrack_1_0
ns_PPB_MediaStreamVideoTrack_1_0
:
:
Configure_1_0
ns_PPB_MediaStreamVideoTrack_1_0
:
:
GetAttrib_1_0
ns_PPB_MediaStreamVideoTrack_1_0
:
:
GetId_1_0
ns_PPB_MediaStreamVideoTrack_1_0
:
:
HasEnded_1_0
ns_PPB_MediaStreamVideoTrack_1_0
:
:
GetFrame_1_0
ns_PPB_MediaStreamVideoTrack_1_0
:
:
RecycleFrame_1_0
ns_PPB_MediaStreamVideoTrack_1_0
:
:
Close_1_0
ns_PPB_MediaStreamVideoTrack_1_0
:
:
GetEmptyFrame_1_0
ns_PPB_MediaStreamVideoTrack_1_0
:
:
PutFrame_1_0
}
;
const
string
ToString_PPB_MediaStreamVideoTrack
(
const
PPB_MediaStreamVideoTrack_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_MessageLoop_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MessageLoop
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MessageLoop_1_0
*
)
RealGetInterface
(
"
PPB_MessageLoop
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetForMainThread_1_0
(
void
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MessageLoop
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetForMainThread
\
"
"
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MessageLoop_1_0
*
)
RealGetInterface
(
"
PPB_MessageLoop
;
1
.
0
"
)
)
-
>
GetForMainThread
(
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetCurrent_1_0
(
void
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MessageLoop
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCurrent
\
"
"
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MessageLoop_1_0
*
)
RealGetInterface
(
"
PPB_MessageLoop
;
1
.
0
"
)
)
-
>
GetCurrent
(
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
AttachToCurrentThread_1_0
(
PP_Resource
message_loop
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MessageLoop
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AttachToCurrentThread
\
"
"
)
;
AddProp
(
ss
"
message_loop
"
ToString_PP_Resource
(
message_loop
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MessageLoop_1_0
*
)
RealGetInterface
(
"
PPB_MessageLoop
;
1
.
0
"
)
)
-
>
AttachToCurrentThread
(
message_loop
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Run_1_0
(
PP_Resource
message_loop
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MessageLoop
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Run
\
"
"
)
;
AddProp
(
ss
"
message_loop
"
ToString_PP_Resource
(
message_loop
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MessageLoop_1_0
*
)
RealGetInterface
(
"
PPB_MessageLoop
;
1
.
0
"
)
)
-
>
Run
(
message_loop
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
PostWork_1_0
(
PP_Resource
message_loop
struct
PP_CompletionCallback
callback
int64_t
delay_ms
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MessageLoop
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PostWork
\
"
"
)
;
AddProp
(
ss
"
message_loop
"
ToString_PP_Resource
(
message_loop
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
AddProp
(
ss
"
delay_ms
"
ToString_int64_t
(
delay_ms
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_MessageLoop_1_0
*
)
RealGetInterface
(
"
PPB_MessageLoop
;
1
.
0
"
)
)
-
>
PostWork
(
message_loop
logging_callback
delay_ms
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
PostQuit_1_0
(
PP_Resource
message_loop
PP_Bool
should_destroy
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MessageLoop
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PostQuit
\
"
"
)
;
AddProp
(
ss
"
message_loop
"
ToString_PP_Resource
(
message_loop
)
)
;
AddProp
(
ss
"
should_destroy
"
ToString_PP_Bool
(
should_destroy
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_MessageLoop_1_0
*
)
RealGetInterface
(
"
PPB_MessageLoop
;
1
.
0
"
)
)
-
>
PostQuit
(
message_loop
should_destroy
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_MessageLoop_1_0
_PPB_MessageLoop_1_0
=
{
ns_PPB_MessageLoop_1_0
:
:
Create_1_0
ns_PPB_MessageLoop_1_0
:
:
GetForMainThread_1_0
ns_PPB_MessageLoop_1_0
:
:
GetCurrent_1_0
ns_PPB_MessageLoop_1_0
:
:
AttachToCurrentThread_1_0
ns_PPB_MessageLoop_1_0
:
:
Run_1_0
ns_PPB_MessageLoop_1_0
:
:
PostWork_1_0
ns_PPB_MessageLoop_1_0
:
:
PostQuit_1_0
}
;
const
string
ToString_PPB_MessageLoop
(
const
PPB_MessageLoop_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Messaging_1_0
{
static
void
PostMessage_1_0
(
PP_Instance
instance
struct
PP_Var
message
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Messaging
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PostMessage
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
message
"
ToString_PP_Var
(
message
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Messaging_1_0
*
)
RealGetInterface
(
"
PPB_Messaging
;
1
.
0
"
)
)
-
>
PostMessage
(
instance
message
)
;
#
endif
}
}
static
PPB_Messaging_1_0
_PPB_Messaging_1_0
=
{
ns_PPB_Messaging_1_0
:
:
PostMessage_1_0
}
;
const
string
ToString_PPB_Messaging
(
const
PPB_Messaging_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Messaging_1_2
{
static
void
PostMessage_1_2
(
PP_Instance
instance
struct
PP_Var
message
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Messaging
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PostMessage
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
message
"
ToString_PP_Var
(
message
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Messaging_1_2
*
)
RealGetInterface
(
"
PPB_Messaging
;
1
.
2
"
)
)
-
>
PostMessage
(
instance
message
)
;
#
endif
}
static
int32_t
RegisterMessageHandler_1_2
(
PP_Instance
instance
void
*
user_data
const
struct
PPP_MessageHandler_0_2
*
handler
PP_Resource
message_loop
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Messaging
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RegisterMessageHandler
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
AddProp
(
ss
"
handler
"
ToString_PPP_MessageHandler
(
handler
)
)
;
AddProp
(
ss
"
message_loop
"
ToString_PP_Resource
(
message_loop
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Messaging_1_2
*
)
RealGetInterface
(
"
PPB_Messaging
;
1
.
2
"
)
)
-
>
RegisterMessageHandler
(
instance
user_data
handler
message_loop
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
UnregisterMessageHandler_1_2
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Messaging
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UnregisterMessageHandler
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Messaging_1_2
*
)
RealGetInterface
(
"
PPB_Messaging
;
1
.
2
"
)
)
-
>
UnregisterMessageHandler
(
instance
)
;
#
endif
}
}
static
PPB_Messaging_1_2
_PPB_Messaging_1_2
=
{
ns_PPB_Messaging_1_2
:
:
PostMessage_1_2
ns_PPB_Messaging_1_2
:
:
RegisterMessageHandler_1_2
ns_PPB_Messaging_1_2
:
:
UnregisterMessageHandler_1_2
}
;
const
string
ToString_PPB_Messaging
(
const
PPB_Messaging_1_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_MouseCursor_Type
(
const
PP_MouseCursor_Type
*
v
)
{
switch
(
*
v
)
{
case
-
1
:
return
"
\
"
PP_MOUSECURSOR_TYPE_CUSTOM
\
"
"
;
case
0
:
return
"
\
"
PP_MOUSECURSOR_TYPE_POINTER
\
"
"
;
case
1
:
return
"
\
"
PP_MOUSECURSOR_TYPE_CROSS
\
"
"
;
case
2
:
return
"
\
"
PP_MOUSECURSOR_TYPE_HAND
\
"
"
;
case
3
:
return
"
\
"
PP_MOUSECURSOR_TYPE_IBEAM
\
"
"
;
case
4
:
return
"
\
"
PP_MOUSECURSOR_TYPE_WAIT
\
"
"
;
case
5
:
return
"
\
"
PP_MOUSECURSOR_TYPE_HELP
\
"
"
;
case
6
:
return
"
\
"
PP_MOUSECURSOR_TYPE_EASTRESIZE
\
"
"
;
case
7
:
return
"
\
"
PP_MOUSECURSOR_TYPE_NORTHRESIZE
\
"
"
;
case
8
:
return
"
\
"
PP_MOUSECURSOR_TYPE_NORTHEASTRESIZE
\
"
"
;
case
9
:
return
"
\
"
PP_MOUSECURSOR_TYPE_NORTHWESTRESIZE
\
"
"
;
case
10
:
return
"
\
"
PP_MOUSECURSOR_TYPE_SOUTHRESIZE
\
"
"
;
case
11
:
return
"
\
"
PP_MOUSECURSOR_TYPE_SOUTHEASTRESIZE
\
"
"
;
case
12
:
return
"
\
"
PP_MOUSECURSOR_TYPE_SOUTHWESTRESIZE
\
"
"
;
case
13
:
return
"
\
"
PP_MOUSECURSOR_TYPE_WESTRESIZE
\
"
"
;
case
14
:
return
"
\
"
PP_MOUSECURSOR_TYPE_NORTHSOUTHRESIZE
\
"
"
;
case
15
:
return
"
\
"
PP_MOUSECURSOR_TYPE_EASTWESTRESIZE
\
"
"
;
case
16
:
return
"
\
"
PP_MOUSECURSOR_TYPE_NORTHEASTSOUTHWESTRESIZE
\
"
"
;
case
17
:
return
"
\
"
PP_MOUSECURSOR_TYPE_NORTHWESTSOUTHEASTRESIZE
\
"
"
;
case
18
:
return
"
\
"
PP_MOUSECURSOR_TYPE_COLUMNRESIZE
\
"
"
;
case
19
:
return
"
\
"
PP_MOUSECURSOR_TYPE_ROWRESIZE
\
"
"
;
case
20
:
return
"
\
"
PP_MOUSECURSOR_TYPE_MIDDLEPANNING
\
"
"
;
case
21
:
return
"
\
"
PP_MOUSECURSOR_TYPE_EASTPANNING
\
"
"
;
case
22
:
return
"
\
"
PP_MOUSECURSOR_TYPE_NORTHPANNING
\
"
"
;
case
23
:
return
"
\
"
PP_MOUSECURSOR_TYPE_NORTHEASTPANNING
\
"
"
;
case
24
:
return
"
\
"
PP_MOUSECURSOR_TYPE_NORTHWESTPANNING
\
"
"
;
case
25
:
return
"
\
"
PP_MOUSECURSOR_TYPE_SOUTHPANNING
\
"
"
;
case
26
:
return
"
\
"
PP_MOUSECURSOR_TYPE_SOUTHEASTPANNING
\
"
"
;
case
27
:
return
"
\
"
PP_MOUSECURSOR_TYPE_SOUTHWESTPANNING
\
"
"
;
case
28
:
return
"
\
"
PP_MOUSECURSOR_TYPE_WESTPANNING
\
"
"
;
case
29
:
return
"
\
"
PP_MOUSECURSOR_TYPE_MOVE
\
"
"
;
case
30
:
return
"
\
"
PP_MOUSECURSOR_TYPE_VERTICALTEXT
\
"
"
;
case
31
:
return
"
\
"
PP_MOUSECURSOR_TYPE_CELL
\
"
"
;
case
32
:
return
"
\
"
PP_MOUSECURSOR_TYPE_CONTEXTMENU
\
"
"
;
case
33
:
return
"
\
"
PP_MOUSECURSOR_TYPE_ALIAS
\
"
"
;
case
34
:
return
"
\
"
PP_MOUSECURSOR_TYPE_PROGRESS
\
"
"
;
case
35
:
return
"
\
"
PP_MOUSECURSOR_TYPE_NODROP
\
"
"
;
case
36
:
return
"
\
"
PP_MOUSECURSOR_TYPE_COPY
\
"
"
;
case
37
:
return
"
\
"
PP_MOUSECURSOR_TYPE_NONE
\
"
"
;
case
38
:
return
"
\
"
PP_MOUSECURSOR_TYPE_NOTALLOWED
\
"
"
;
case
39
:
return
"
\
"
PP_MOUSECURSOR_TYPE_ZOOMIN
\
"
"
;
case
40
:
return
"
\
"
PP_MOUSECURSOR_TYPE_ZOOMOUT
\
"
"
;
case
41
:
return
"
\
"
PP_MOUSECURSOR_TYPE_GRAB
\
"
"
;
case
42
:
return
"
\
"
PP_MOUSECURSOR_TYPE_GRABBING
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_MouseCursor_Type
(
const
PP_MouseCursor_Type
&
v
)
{
return
ToString_PP_MouseCursor_Type
(
&
v
)
;
}
void
FromJSON_PP_MouseCursor_Type
(
JSONIterator
&
iterator
PP_MouseCursor_Type
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_MouseCursor_Type
(
v
)
;
}
namespace
ns_PPB_MouseCursor_1_0
{
static
PP_Bool
SetCursor_1_0
(
PP_Instance
instance
enum
PP_MouseCursor_Type
type
PP_Resource
image
const
struct
PP_Point
*
hot_spot
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseCursor
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetCursor
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_MouseCursor_Type
(
type
)
)
;
AddProp
(
ss
"
image
"
ToString_PP_Resource
(
image
)
)
;
AddProp
(
ss
"
hot_spot
"
ToString_PP_Point
(
hot_spot
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_MouseCursor_1_0
*
)
RealGetInterface
(
"
PPB_MouseCursor
;
1
.
0
"
)
)
-
>
SetCursor
(
instance
type
image
hot_spot
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_MouseCursor_1_0
_PPB_MouseCursor_1_0
=
{
ns_PPB_MouseCursor_1_0
:
:
SetCursor_1_0
}
;
const
string
ToString_PPB_MouseCursor
(
const
PPB_MouseCursor_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_MouseLock_1_0
{
static
int32_t
LockMouse_1_0
(
PP_Instance
instance
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseLock
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
LockMouse
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_MouseLock_1_0
*
)
RealGetInterface
(
"
PPB_MouseLock
;
1
.
0
"
)
)
-
>
LockMouse
(
instance
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
UnlockMouse_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_MouseLock
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UnlockMouse
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_MouseLock_1_0
*
)
RealGetInterface
(
"
PPB_MouseLock
;
1
.
0
"
)
)
-
>
UnlockMouse
(
instance
)
;
#
endif
}
}
static
PPB_MouseLock_1_0
_PPB_MouseLock_1_0
=
{
ns_PPB_MouseLock_1_0
:
:
LockMouse_1_0
ns_PPB_MouseLock_1_0
:
:
UnlockMouse_1_0
}
;
const
string
ToString_PPB_MouseLock
(
const
PPB_MouseLock_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_NetAddress_Family
(
const
PP_NetAddress_Family
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_NETADDRESS_FAMILY_UNSPECIFIED
\
"
"
;
case
1
:
return
"
\
"
PP_NETADDRESS_FAMILY_IPV4
\
"
"
;
case
2
:
return
"
\
"
PP_NETADDRESS_FAMILY_IPV6
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_NetAddress_Family
(
const
PP_NetAddress_Family
&
v
)
{
return
ToString_PP_NetAddress_Family
(
&
v
)
;
}
void
FromJSON_PP_NetAddress_Family
(
JSONIterator
&
iterator
PP_NetAddress_Family
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_NetAddress_Family
(
v
)
;
}
const
string
ToString_PP_NetAddress_IPv4
(
const
PP_NetAddress_IPv4
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_NetAddress_IPv4
(
*
v
)
;
}
const
string
ToString_PP_NetAddress_IPv4
(
const
PP_NetAddress_IPv4
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
port
"
ToString_uint16_t
(
v
.
port
)
)
;
{
BeginProp
(
x
"
addr
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
4
;
+
+
_n
)
{
AddElement
(
x
ToString_uint8_t
(
v
.
addr
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_NetAddress_IPv4
(
JSONIterator
&
iterator
PP_NetAddress_IPv4
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint16_t
(
iterator
value
.
port
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
4
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_uint8_t
(
iterator
(
value
.
addr
)
[
_n
]
)
;
}
}
}
const
string
ToString_PP_NetAddress_IPv6
(
const
PP_NetAddress_IPv6
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_NetAddress_IPv6
(
*
v
)
;
}
const
string
ToString_PP_NetAddress_IPv6
(
const
PP_NetAddress_IPv6
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
port
"
ToString_uint16_t
(
v
.
port
)
)
;
{
BeginProp
(
x
"
addr
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
16
;
+
+
_n
)
{
AddElement
(
x
ToString_uint8_t
(
v
.
addr
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_NetAddress_IPv6
(
JSONIterator
&
iterator
PP_NetAddress_IPv6
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint16_t
(
iterator
value
.
port
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
16
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_uint8_t
(
iterator
(
value
.
addr
)
[
_n
]
)
;
}
}
}
namespace
ns_PPB_NetAddress_1_0
{
static
PP_Resource
CreateFromIPv4Address_1_0
(
PP_Instance
instance
const
struct
PP_NetAddress_IPv4
*
ipv4_addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateFromIPv4Address
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
ipv4_addr
"
ToString_PP_NetAddress_IPv4
(
ipv4_addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_NetAddress_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress
;
1
.
0
"
)
)
-
>
CreateFromIPv4Address
(
instance
ipv4_addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
CreateFromIPv6Address_1_0
(
PP_Instance
instance
const
struct
PP_NetAddress_IPv6
*
ipv6_addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateFromIPv6Address
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
ipv6_addr
"
ToString_PP_NetAddress_IPv6
(
ipv6_addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_NetAddress_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress
;
1
.
0
"
)
)
-
>
CreateFromIPv6Address
(
instance
ipv6_addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsNetAddress_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsNetAddress
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress
;
1
.
0
"
)
)
-
>
IsNetAddress
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_NetAddress_Family
GetFamily_1_0
(
PP_Resource
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFamily
\
"
"
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_NetAddress_Family
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_NetAddress_Family
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_NetAddress_Family
rval
=
(
(
PPB_NetAddress_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress
;
1
.
0
"
)
)
-
>
GetFamily
(
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_NetAddress_Family
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
DescribeAsString_1_0
(
PP_Resource
addr
PP_Bool
include_port
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DescribeAsString
\
"
"
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
include_port
"
ToString_PP_Bool
(
include_port
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_NetAddress_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress
;
1
.
0
"
)
)
-
>
DescribeAsString
(
addr
include_port
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
DescribeAsIPv4Address_1_0
(
PP_Resource
addr
struct
PP_NetAddress_IPv4
*
ipv4_addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DescribeAsIPv4Address
\
"
"
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
ipv4_addr
"
PointerToString
(
ipv4_addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
ipv4_addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_IPv4
(
iterator
*
ipv4_addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress
;
1
.
0
"
)
)
-
>
DescribeAsIPv4Address
(
addr
ipv4_addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
ipv4_addr
)
{
AddProp
(
os
"
ipv4_addr
"
ToString_PP_NetAddress_IPv4
(
ipv4_addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
DescribeAsIPv6Address_1_0
(
PP_Resource
addr
struct
PP_NetAddress_IPv6
*
ipv6_addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DescribeAsIPv6Address
\
"
"
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
ipv6_addr
"
PointerToString
(
ipv6_addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
ipv6_addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_IPv6
(
iterator
*
ipv6_addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress
;
1
.
0
"
)
)
-
>
DescribeAsIPv6Address
(
addr
ipv6_addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
ipv6_addr
)
{
AddProp
(
os
"
ipv6_addr
"
ToString_PP_NetAddress_IPv6
(
ipv6_addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_NetAddress_1_0
_PPB_NetAddress_1_0
=
{
ns_PPB_NetAddress_1_0
:
:
CreateFromIPv4Address_1_0
ns_PPB_NetAddress_1_0
:
:
CreateFromIPv6Address_1_0
ns_PPB_NetAddress_1_0
:
:
IsNetAddress_1_0
ns_PPB_NetAddress_1_0
:
:
GetFamily_1_0
ns_PPB_NetAddress_1_0
:
:
DescribeAsString_1_0
ns_PPB_NetAddress_1_0
:
:
DescribeAsIPv4Address_1_0
ns_PPB_NetAddress_1_0
:
:
DescribeAsIPv6Address_1_0
}
;
const
string
ToString_PPB_NetAddress
(
const
PPB_NetAddress_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_NetworkList_Type
(
const
PP_NetworkList_Type
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_NETWORKLIST_TYPE_UNKNOWN
\
"
"
;
case
1
:
return
"
\
"
PP_NETWORKLIST_TYPE_ETHERNET
\
"
"
;
case
2
:
return
"
\
"
PP_NETWORKLIST_TYPE_WIFI
\
"
"
;
case
3
:
return
"
\
"
PP_NETWORKLIST_TYPE_CELLULAR
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_NetworkList_Type
(
const
PP_NetworkList_Type
&
v
)
{
return
ToString_PP_NetworkList_Type
(
&
v
)
;
}
void
FromJSON_PP_NetworkList_Type
(
JSONIterator
&
iterator
PP_NetworkList_Type
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_NetworkList_Type
(
v
)
;
}
const
string
ToString_PP_NetworkList_State
(
const
PP_NetworkList_State
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_NETWORKLIST_STATE_DOWN
\
"
"
;
case
1
:
return
"
\
"
PP_NETWORKLIST_STATE_UP
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_NetworkList_State
(
const
PP_NetworkList_State
&
v
)
{
return
ToString_PP_NetworkList_State
(
&
v
)
;
}
void
FromJSON_PP_NetworkList_State
(
JSONIterator
&
iterator
PP_NetworkList_State
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_NetworkList_State
(
v
)
;
}
namespace
ns_PPB_NetworkList_1_0
{
static
PP_Bool
IsNetworkList_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetworkList
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsNetworkList
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetworkList_1_0
*
)
RealGetInterface
(
"
PPB_NetworkList
;
1
.
0
"
)
)
-
>
IsNetworkList
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetCount_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetworkList
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCount
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_NetworkList_1_0
*
)
RealGetInterface
(
"
PPB_NetworkList
;
1
.
0
"
)
)
-
>
GetCount
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetName_1_0
(
PP_Resource
resource
uint32_t
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetworkList
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetName
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_NetworkList_1_0
*
)
RealGetInterface
(
"
PPB_NetworkList
;
1
.
0
"
)
)
-
>
GetName
(
resource
index
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_NetworkList_Type
GetType_1_0
(
PP_Resource
resource
uint32_t
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetworkList
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetType
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_NetworkList_Type
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_NetworkList_Type
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_NetworkList_Type
rval
=
(
(
PPB_NetworkList_1_0
*
)
RealGetInterface
(
"
PPB_NetworkList
;
1
.
0
"
)
)
-
>
GetType
(
resource
index
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_NetworkList_Type
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_NetworkList_State
GetState_1_0
(
PP_Resource
resource
uint32_t
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetworkList
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetState
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_NetworkList_State
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_NetworkList_State
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_NetworkList_State
rval
=
(
(
PPB_NetworkList_1_0
*
)
RealGetInterface
(
"
PPB_NetworkList
;
1
.
0
"
)
)
-
>
GetState
(
resource
index
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_NetworkList_State
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetIpAddresses_1_0
(
PP_Resource
resource
uint32_t
index
struct
PP_ArrayOutput
output
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetworkList
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetIpAddresses
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_NetworkList_1_0
*
)
RealGetInterface
(
"
PPB_NetworkList
;
1
.
0
"
)
)
-
>
GetIpAddresses
(
resource
index
output
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetDisplayName_1_0
(
PP_Resource
resource
uint32_t
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetworkList
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDisplayName
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_NetworkList_1_0
*
)
RealGetInterface
(
"
PPB_NetworkList
;
1
.
0
"
)
)
-
>
GetDisplayName
(
resource
index
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetMTU_1_0
(
PP_Resource
resource
uint32_t
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetworkList
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetMTU
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_NetworkList_1_0
*
)
RealGetInterface
(
"
PPB_NetworkList
;
1
.
0
"
)
)
-
>
GetMTU
(
resource
index
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_NetworkList_1_0
_PPB_NetworkList_1_0
=
{
ns_PPB_NetworkList_1_0
:
:
IsNetworkList_1_0
ns_PPB_NetworkList_1_0
:
:
GetCount_1_0
ns_PPB_NetworkList_1_0
:
:
GetName_1_0
ns_PPB_NetworkList_1_0
:
:
GetType_1_0
ns_PPB_NetworkList_1_0
:
:
GetState_1_0
ns_PPB_NetworkList_1_0
:
:
GetIpAddresses_1_0
ns_PPB_NetworkList_1_0
:
:
GetDisplayName_1_0
ns_PPB_NetworkList_1_0
:
:
GetMTU_1_0
}
;
const
string
ToString_PPB_NetworkList
(
const
PPB_NetworkList_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_NetworkMonitor_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetworkMonitor
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_NetworkMonitor_1_0
*
)
RealGetInterface
(
"
PPB_NetworkMonitor
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
UpdateNetworkList_1_0
(
PP_Resource
network_monitor
PP_Resource
*
network_list
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetworkMonitor
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UpdateNetworkList
\
"
"
)
;
AddProp
(
ss
"
network_monitor
"
ToString_PP_Resource
(
network_monitor
)
)
;
AddProp
(
ss
"
network_list
"
PointerToString
(
network_list
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
network_list
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_NetworkMonitor_1_0
*
)
RealGetInterface
(
"
PPB_NetworkMonitor
;
1
.
0
"
)
)
-
>
UpdateNetworkList
(
network_monitor
network_list
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
network_list
)
{
AddProp
(
os
"
network_list
"
ToString_PP_Resource
(
network_list
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsNetworkMonitor_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetworkMonitor
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsNetworkMonitor
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetworkMonitor_1_0
*
)
RealGetInterface
(
"
PPB_NetworkMonitor
;
1
.
0
"
)
)
-
>
IsNetworkMonitor
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_NetworkMonitor_1_0
_PPB_NetworkMonitor_1_0
=
{
ns_PPB_NetworkMonitor_1_0
:
:
Create_1_0
ns_PPB_NetworkMonitor_1_0
:
:
UpdateNetworkList_1_0
ns_PPB_NetworkMonitor_1_0
:
:
IsNetworkMonitor_1_0
}
;
const
string
ToString_PPB_NetworkMonitor
(
const
PPB_NetworkMonitor_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_NetworkProxy_1_0
{
static
int32_t
GetProxyForURL_1_0
(
PP_Instance
instance
struct
PP_Var
url
struct
PP_Var
*
proxy_string
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetworkProxy
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetProxyForURL
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
url
"
ToString_PP_Var
(
url
)
)
;
AddProp
(
ss
"
proxy_string
"
PointerToString
(
proxy_string
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
proxy_string
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_NetworkProxy_1_0
*
)
RealGetInterface
(
"
PPB_NetworkProxy
;
1
.
0
"
)
)
-
>
GetProxyForURL
(
instance
url
proxy_string
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
proxy_string
)
{
AddProp
(
os
"
proxy_string
"
ToString_PP_Var
(
proxy_string
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_NetworkProxy_1_0
_PPB_NetworkProxy_1_0
=
{
ns_PPB_NetworkProxy_1_0
:
:
GetProxyForURL_1_0
}
;
const
string
ToString_PPB_NetworkProxy
(
const
PPB_NetworkProxy_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_OpenGLES2_1_0
{
static
void
ActiveTexture_1_0
(
PP_Resource
context
GLenum
texture
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ActiveTexture
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
texture
"
ToString_GLenum
(
texture
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
ActiveTexture
(
context
texture
)
;
#
endif
}
static
void
AttachShader_1_0
(
PP_Resource
context
GLuint
program
GLuint
shader
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AttachShader
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
AddProp
(
ss
"
shader
"
ToString_GLuint
(
shader
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
AttachShader
(
context
program
shader
)
;
#
endif
}
static
void
BindAttribLocation_1_0
(
PP_Resource
context
GLuint
program
GLuint
index
const
char
*
name
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BindAttribLocation
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
AddProp
(
ss
"
index
"
ToString_GLuint
(
index
)
)
;
AddProp
(
ss
"
name
"
ToString_cstr_t
(
name
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
BindAttribLocation
(
context
program
index
name
)
;
#
endif
}
static
void
BindBuffer_1_0
(
PP_Resource
context
GLenum
target
GLuint
buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BindBuffer
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
buffer
"
ToString_GLuint
(
buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
BindBuffer
(
context
target
buffer
)
;
#
endif
}
static
void
BindFramebuffer_1_0
(
PP_Resource
context
GLenum
target
GLuint
framebuffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BindFramebuffer
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
framebuffer
"
ToString_GLuint
(
framebuffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
BindFramebuffer
(
context
target
framebuffer
)
;
#
endif
}
static
void
BindRenderbuffer_1_0
(
PP_Resource
context
GLenum
target
GLuint
renderbuffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BindRenderbuffer
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
renderbuffer
"
ToString_GLuint
(
renderbuffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
BindRenderbuffer
(
context
target
renderbuffer
)
;
#
endif
}
static
void
BindTexture_1_0
(
PP_Resource
context
GLenum
target
GLuint
texture
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BindTexture
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
texture
"
ToString_GLuint
(
texture
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
BindTexture
(
context
target
texture
)
;
#
endif
}
static
void
BlendColor_1_0
(
PP_Resource
context
GLclampf
red
GLclampf
green
GLclampf
blue
GLclampf
alpha
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BlendColor
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
red
"
ToString_GLclampf
(
red
)
)
;
AddProp
(
ss
"
green
"
ToString_GLclampf
(
green
)
)
;
AddProp
(
ss
"
blue
"
ToString_GLclampf
(
blue
)
)
;
AddProp
(
ss
"
alpha
"
ToString_GLclampf
(
alpha
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
BlendColor
(
context
red
green
blue
alpha
)
;
#
endif
}
static
void
BlendEquation_1_0
(
PP_Resource
context
GLenum
mode
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BlendEquation
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
mode
"
ToString_GLenum
(
mode
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
BlendEquation
(
context
mode
)
;
#
endif
}
static
void
BlendEquationSeparate_1_0
(
PP_Resource
context
GLenum
modeRGB
GLenum
modeAlpha
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BlendEquationSeparate
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
modeRGB
"
ToString_GLenum
(
modeRGB
)
)
;
AddProp
(
ss
"
modeAlpha
"
ToString_GLenum
(
modeAlpha
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
BlendEquationSeparate
(
context
modeRGB
modeAlpha
)
;
#
endif
}
static
void
BlendFunc_1_0
(
PP_Resource
context
GLenum
sfactor
GLenum
dfactor
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BlendFunc
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
sfactor
"
ToString_GLenum
(
sfactor
)
)
;
AddProp
(
ss
"
dfactor
"
ToString_GLenum
(
dfactor
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
BlendFunc
(
context
sfactor
dfactor
)
;
#
endif
}
static
void
BlendFuncSeparate_1_0
(
PP_Resource
context
GLenum
srcRGB
GLenum
dstRGB
GLenum
srcAlpha
GLenum
dstAlpha
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BlendFuncSeparate
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
srcRGB
"
ToString_GLenum
(
srcRGB
)
)
;
AddProp
(
ss
"
dstRGB
"
ToString_GLenum
(
dstRGB
)
)
;
AddProp
(
ss
"
srcAlpha
"
ToString_GLenum
(
srcAlpha
)
)
;
AddProp
(
ss
"
dstAlpha
"
ToString_GLenum
(
dstAlpha
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
BlendFuncSeparate
(
context
srcRGB
dstRGB
srcAlpha
dstAlpha
)
;
#
endif
}
static
void
BufferData_1_0
(
PP_Resource
context
GLenum
target
GLsizeiptr
size
const
void
*
data
GLenum
usage
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BufferData
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
size
"
ToString_GLsizeiptr
(
size
)
)
;
AddProp
(
ss
"
data
"
ToString_mem_t
(
data
)
)
;
AddProp
(
ss
"
usage
"
ToString_GLenum
(
usage
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
BufferData
(
context
target
size
data
usage
)
;
#
endif
}
static
void
BufferSubData_1_0
(
PP_Resource
context
GLenum
target
GLintptr
offset
GLsizeiptr
size
const
void
*
data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BufferSubData
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
offset
"
ToString_GLintptr
(
offset
)
)
;
AddProp
(
ss
"
size
"
ToString_GLsizeiptr
(
size
)
)
;
AddProp
(
ss
"
data
"
ToString_mem_t
(
data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
BufferSubData
(
context
target
offset
size
data
)
;
#
endif
}
static
GLenum
CheckFramebufferStatus_1_0
(
PP_Resource
context
GLenum
target
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CheckFramebufferStatus
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLenum
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLenum
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLenum
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
CheckFramebufferStatus
(
context
target
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLenum
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Clear_1_0
(
PP_Resource
context
GLbitfield
mask
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Clear
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
mask
"
ToString_GLbitfield
(
mask
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Clear
(
context
mask
)
;
#
endif
}
static
void
ClearColor_1_0
(
PP_Resource
context
GLclampf
red
GLclampf
green
GLclampf
blue
GLclampf
alpha
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ClearColor
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
red
"
ToString_GLclampf
(
red
)
)
;
AddProp
(
ss
"
green
"
ToString_GLclampf
(
green
)
)
;
AddProp
(
ss
"
blue
"
ToString_GLclampf
(
blue
)
)
;
AddProp
(
ss
"
alpha
"
ToString_GLclampf
(
alpha
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
ClearColor
(
context
red
green
blue
alpha
)
;
#
endif
}
static
void
ClearDepthf_1_0
(
PP_Resource
context
GLclampf
depth
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ClearDepthf
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
depth
"
ToString_GLclampf
(
depth
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
ClearDepthf
(
context
depth
)
;
#
endif
}
static
void
ClearStencil_1_0
(
PP_Resource
context
GLint
s
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ClearStencil
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
s
"
ToString_GLint
(
s
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
ClearStencil
(
context
s
)
;
#
endif
}
static
void
ColorMask_1_0
(
PP_Resource
context
GLboolean
red
GLboolean
green
GLboolean
blue
GLboolean
alpha
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ColorMask
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
red
"
ToString_GLboolean
(
red
)
)
;
AddProp
(
ss
"
green
"
ToString_GLboolean
(
green
)
)
;
AddProp
(
ss
"
blue
"
ToString_GLboolean
(
blue
)
)
;
AddProp
(
ss
"
alpha
"
ToString_GLboolean
(
alpha
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
ColorMask
(
context
red
green
blue
alpha
)
;
#
endif
}
static
void
CompileShader_1_0
(
PP_Resource
context
GLuint
shader
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CompileShader
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
shader
"
ToString_GLuint
(
shader
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
CompileShader
(
context
shader
)
;
#
endif
}
static
void
CompressedTexImage2D_1_0
(
PP_Resource
context
GLenum
target
GLint
level
GLenum
internalformat
GLsizei
width
GLsizei
height
GLint
border
GLsizei
imageSize
const
void
*
data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CompressedTexImage2D
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
level
"
ToString_GLint
(
level
)
)
;
AddProp
(
ss
"
internalformat
"
ToString_GLenum
(
internalformat
)
)
;
AddProp
(
ss
"
width
"
ToString_GLsizei
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_GLsizei
(
height
)
)
;
AddProp
(
ss
"
border
"
ToString_GLint
(
border
)
)
;
AddProp
(
ss
"
imageSize
"
ToString_GLsizei
(
imageSize
)
)
;
AddProp
(
ss
"
data
"
ToString_mem_t
(
data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
CompressedTexImage2D
(
context
target
level
internalformat
width
height
border
imageSize
data
)
;
#
endif
}
static
void
CompressedTexSubImage2D_1_0
(
PP_Resource
context
GLenum
target
GLint
level
GLint
xoffset
GLint
yoffset
GLsizei
width
GLsizei
height
GLenum
format
GLsizei
imageSize
const
void
*
data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CompressedTexSubImage2D
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
level
"
ToString_GLint
(
level
)
)
;
AddProp
(
ss
"
xoffset
"
ToString_GLint
(
xoffset
)
)
;
AddProp
(
ss
"
yoffset
"
ToString_GLint
(
yoffset
)
)
;
AddProp
(
ss
"
width
"
ToString_GLsizei
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_GLsizei
(
height
)
)
;
AddProp
(
ss
"
format
"
ToString_GLenum
(
format
)
)
;
AddProp
(
ss
"
imageSize
"
ToString_GLsizei
(
imageSize
)
)
;
AddProp
(
ss
"
data
"
ToString_mem_t
(
data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
CompressedTexSubImage2D
(
context
target
level
xoffset
yoffset
width
height
format
imageSize
data
)
;
#
endif
}
static
void
CopyTexImage2D_1_0
(
PP_Resource
context
GLenum
target
GLint
level
GLenum
internalformat
GLint
x
GLint
y
GLsizei
width
GLsizei
height
GLint
border
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CopyTexImage2D
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
level
"
ToString_GLint
(
level
)
)
;
AddProp
(
ss
"
internalformat
"
ToString_GLenum
(
internalformat
)
)
;
AddProp
(
ss
"
x
"
ToString_GLint
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLint
(
y
)
)
;
AddProp
(
ss
"
width
"
ToString_GLsizei
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_GLsizei
(
height
)
)
;
AddProp
(
ss
"
border
"
ToString_GLint
(
border
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
CopyTexImage2D
(
context
target
level
internalformat
x
y
width
height
border
)
;
#
endif
}
static
void
CopyTexSubImage2D_1_0
(
PP_Resource
context
GLenum
target
GLint
level
GLint
xoffset
GLint
yoffset
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CopyTexSubImage2D
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
level
"
ToString_GLint
(
level
)
)
;
AddProp
(
ss
"
xoffset
"
ToString_GLint
(
xoffset
)
)
;
AddProp
(
ss
"
yoffset
"
ToString_GLint
(
yoffset
)
)
;
AddProp
(
ss
"
x
"
ToString_GLint
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLint
(
y
)
)
;
AddProp
(
ss
"
width
"
ToString_GLsizei
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_GLsizei
(
height
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
CopyTexSubImage2D
(
context
target
level
xoffset
yoffset
x
y
width
height
)
;
#
endif
}
static
GLuint
CreateProgram_1_0
(
PP_Resource
context
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateProgram
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLuint
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLuint
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLuint
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
CreateProgram
(
context
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLuint
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
GLuint
CreateShader_1_0
(
PP_Resource
context
GLenum
type
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateShader
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
type
"
ToString_GLenum
(
type
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLuint
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLuint
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLuint
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
CreateShader
(
context
type
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLuint
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
CullFace_1_0
(
PP_Resource
context
GLenum
mode
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CullFace
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
mode
"
ToString_GLenum
(
mode
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
CullFace
(
context
mode
)
;
#
endif
}
static
void
DeleteBuffers_1_0
(
PP_Resource
context
GLsizei
n
const
GLuint
*
buffers
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DeleteBuffers
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
{
BeginProp
(
ss
"
buffers
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
n
;
+
+
_n
)
{
AddElement
(
ss
ToString_GLuint
(
buffers
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DeleteBuffers
(
context
n
buffers
)
;
#
endif
}
static
void
DeleteFramebuffers_1_0
(
PP_Resource
context
GLsizei
n
const
GLuint
*
framebuffers
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DeleteFramebuffers
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
{
BeginProp
(
ss
"
framebuffers
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
n
;
+
+
_n
)
{
AddElement
(
ss
ToString_GLuint
(
framebuffers
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DeleteFramebuffers
(
context
n
framebuffers
)
;
#
endif
}
static
void
DeleteProgram_1_0
(
PP_Resource
context
GLuint
program
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DeleteProgram
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DeleteProgram
(
context
program
)
;
#
endif
}
static
void
DeleteRenderbuffers_1_0
(
PP_Resource
context
GLsizei
n
const
GLuint
*
renderbuffers
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DeleteRenderbuffers
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
{
BeginProp
(
ss
"
renderbuffers
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
n
;
+
+
_n
)
{
AddElement
(
ss
ToString_GLuint
(
renderbuffers
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DeleteRenderbuffers
(
context
n
renderbuffers
)
;
#
endif
}
static
void
DeleteShader_1_0
(
PP_Resource
context
GLuint
shader
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DeleteShader
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
shader
"
ToString_GLuint
(
shader
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DeleteShader
(
context
shader
)
;
#
endif
}
static
void
DeleteTextures_1_0
(
PP_Resource
context
GLsizei
n
const
GLuint
*
textures
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DeleteTextures
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
{
BeginProp
(
ss
"
textures
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
n
;
+
+
_n
)
{
AddElement
(
ss
ToString_GLuint
(
textures
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DeleteTextures
(
context
n
textures
)
;
#
endif
}
static
void
DepthFunc_1_0
(
PP_Resource
context
GLenum
func
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DepthFunc
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
func
"
ToString_GLenum
(
func
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DepthFunc
(
context
func
)
;
#
endif
}
static
void
DepthMask_1_0
(
PP_Resource
context
GLboolean
flag
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DepthMask
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
flag
"
ToString_GLboolean
(
flag
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DepthMask
(
context
flag
)
;
#
endif
}
static
void
DepthRangef_1_0
(
PP_Resource
context
GLclampf
zNear
GLclampf
zFar
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DepthRangef
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
zNear
"
ToString_GLclampf
(
zNear
)
)
;
AddProp
(
ss
"
zFar
"
ToString_GLclampf
(
zFar
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DepthRangef
(
context
zNear
zFar
)
;
#
endif
}
static
void
DetachShader_1_0
(
PP_Resource
context
GLuint
program
GLuint
shader
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DetachShader
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
AddProp
(
ss
"
shader
"
ToString_GLuint
(
shader
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DetachShader
(
context
program
shader
)
;
#
endif
}
static
void
Disable_1_0
(
PP_Resource
context
GLenum
cap
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Disable
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
cap
"
ToString_GLenum
(
cap
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Disable
(
context
cap
)
;
#
endif
}
static
void
DisableVertexAttribArray_1_0
(
PP_Resource
context
GLuint
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DisableVertexAttribArray
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
index
"
ToString_GLuint
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DisableVertexAttribArray
(
context
index
)
;
#
endif
}
static
void
DrawArrays_1_0
(
PP_Resource
context
GLenum
mode
GLint
first
GLsizei
count
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DrawArrays
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
mode
"
ToString_GLenum
(
mode
)
)
;
AddProp
(
ss
"
first
"
ToString_GLint
(
first
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DrawArrays
(
context
mode
first
count
)
;
#
endif
}
static
void
DrawElements_1_0
(
PP_Resource
context
GLenum
mode
GLsizei
count
GLenum
type
const
void
*
indices
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DrawElements
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
mode
"
ToString_GLenum
(
mode
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
type
"
ToString_GLenum
(
type
)
)
;
AddProp
(
ss
"
indices
"
ToString_mem_t
(
indices
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
DrawElements
(
context
mode
count
type
indices
)
;
#
endif
}
static
void
Enable_1_0
(
PP_Resource
context
GLenum
cap
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Enable
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
cap
"
ToString_GLenum
(
cap
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Enable
(
context
cap
)
;
#
endif
}
static
void
EnableVertexAttribArray_1_0
(
PP_Resource
context
GLuint
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
EnableVertexAttribArray
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
index
"
ToString_GLuint
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
EnableVertexAttribArray
(
context
index
)
;
#
endif
}
static
void
Finish_1_0
(
PP_Resource
context
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Finish
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Finish
(
context
)
;
#
endif
}
static
void
Flush_1_0
(
PP_Resource
context
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Flush
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Flush
(
context
)
;
#
endif
}
static
void
FramebufferRenderbuffer_1_0
(
PP_Resource
context
GLenum
target
GLenum
attachment
GLenum
renderbuffertarget
GLuint
renderbuffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
FramebufferRenderbuffer
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
attachment
"
ToString_GLenum
(
attachment
)
)
;
AddProp
(
ss
"
renderbuffertarget
"
ToString_GLenum
(
renderbuffertarget
)
)
;
AddProp
(
ss
"
renderbuffer
"
ToString_GLuint
(
renderbuffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
FramebufferRenderbuffer
(
context
target
attachment
renderbuffertarget
renderbuffer
)
;
#
endif
}
static
void
FramebufferTexture2D_1_0
(
PP_Resource
context
GLenum
target
GLenum
attachment
GLenum
textarget
GLuint
texture
GLint
level
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
FramebufferTexture2D
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
attachment
"
ToString_GLenum
(
attachment
)
)
;
AddProp
(
ss
"
textarget
"
ToString_GLenum
(
textarget
)
)
;
AddProp
(
ss
"
texture
"
ToString_GLuint
(
texture
)
)
;
AddProp
(
ss
"
level
"
ToString_GLint
(
level
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
FramebufferTexture2D
(
context
target
attachment
textarget
texture
level
)
;
#
endif
}
static
void
FrontFace_1_0
(
PP_Resource
context
GLenum
mode
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
FrontFace
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
mode
"
ToString_GLenum
(
mode
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
FrontFace
(
context
mode
)
;
#
endif
}
static
void
GenBuffers_1_0
(
PP_Resource
context
GLsizei
n
GLuint
*
buffers
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GenBuffers
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
AddProp
(
ss
"
buffers
"
PointerToString
(
buffers
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
n
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_GLuint
(
iterator
(
buffers
)
[
_n
]
)
;
}
}
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GenBuffers
(
context
n
buffers
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
{
BeginProp
(
os
"
buffers
"
)
;
BeginElements
(
os
)
;
for
(
uint32_t
_n
=
0
;
_n
<
n
;
+
+
_n
)
{
AddElement
(
os
ToString_GLuint
(
buffers
[
_n
]
)
)
;
}
EndElements
(
os
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GenerateMipmap_1_0
(
PP_Resource
context
GLenum
target
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GenerateMipmap
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GenerateMipmap
(
context
target
)
;
#
endif
}
static
void
GenFramebuffers_1_0
(
PP_Resource
context
GLsizei
n
GLuint
*
framebuffers
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GenFramebuffers
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
AddProp
(
ss
"
framebuffers
"
PointerToString
(
framebuffers
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLuint_ptr_t
(
iterator
framebuffers
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GenFramebuffers
(
context
n
framebuffers
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
framebuffers
"
ToString_GLuint_ptr_t
(
framebuffers
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GenRenderbuffers_1_0
(
PP_Resource
context
GLsizei
n
GLuint
*
renderbuffers
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GenRenderbuffers
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
AddProp
(
ss
"
renderbuffers
"
PointerToString
(
renderbuffers
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLuint_ptr_t
(
iterator
renderbuffers
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GenRenderbuffers
(
context
n
renderbuffers
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
renderbuffers
"
ToString_GLuint_ptr_t
(
renderbuffers
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GenTextures_1_0
(
PP_Resource
context
GLsizei
n
GLuint
*
textures
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GenTextures
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
AddProp
(
ss
"
textures
"
PointerToString
(
textures
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
n
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_GLuint
(
iterator
(
textures
)
[
_n
]
)
;
}
}
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GenTextures
(
context
n
textures
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
{
BeginProp
(
os
"
textures
"
)
;
BeginElements
(
os
)
;
for
(
uint32_t
_n
=
0
;
_n
<
n
;
+
+
_n
)
{
AddElement
(
os
ToString_GLuint
(
textures
[
_n
]
)
)
;
}
EndElements
(
os
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetActiveAttrib_1_0
(
PP_Resource
context
GLuint
program
GLuint
index
GLsizei
bufsize
GLsizei
*
length
GLint
*
size
GLenum
*
type
char
*
name
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetActiveAttrib
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
AddProp
(
ss
"
index
"
ToString_GLuint
(
index
)
)
;
AddProp
(
ss
"
bufsize
"
ToString_GLsizei
(
bufsize
)
)
;
AddProp
(
ss
"
length
"
PointerToString
(
length
)
)
;
AddProp
(
ss
"
size
"
PointerToString
(
size
)
)
;
AddProp
(
ss
"
type
"
PointerToString
(
type
)
)
;
AddProp
(
ss
"
name
"
PointerToString
(
name
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLsizei_ptr_t
(
iterator
length
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
size
)
;
iterator
.
skip
(
)
;
FromJSON_GLenum_ptr_t
(
iterator
type
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
name
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetActiveAttrib
(
context
program
index
bufsize
length
size
type
name
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
length
"
ToString_GLsizei_ptr_t
(
length
)
)
;
AddProp
(
os
"
size
"
ToString_GLint_ptr_t
(
size
)
)
;
AddProp
(
os
"
type
"
ToString_GLenum_ptr_t
(
type
)
)
;
AddProp
(
os
"
name
"
ToString_str_t
(
name
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetActiveUniform_1_0
(
PP_Resource
context
GLuint
program
GLuint
index
GLsizei
bufsize
GLsizei
*
length
GLint
*
size
GLenum
*
type
char
*
name
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetActiveUniform
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
AddProp
(
ss
"
index
"
ToString_GLuint
(
index
)
)
;
AddProp
(
ss
"
bufsize
"
ToString_GLsizei
(
bufsize
)
)
;
AddProp
(
ss
"
length
"
PointerToString
(
length
)
)
;
AddProp
(
ss
"
size
"
PointerToString
(
size
)
)
;
AddProp
(
ss
"
type
"
PointerToString
(
type
)
)
;
AddProp
(
ss
"
name
"
PointerToString
(
name
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLsizei_ptr_t
(
iterator
length
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
size
)
;
iterator
.
skip
(
)
;
FromJSON_GLenum_ptr_t
(
iterator
type
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
name
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetActiveUniform
(
context
program
index
bufsize
length
size
type
name
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
length
"
ToString_GLsizei_ptr_t
(
length
)
)
;
AddProp
(
os
"
size
"
ToString_GLint_ptr_t
(
size
)
)
;
AddProp
(
os
"
type
"
ToString_GLenum_ptr_t
(
type
)
)
;
AddProp
(
os
"
name
"
ToString_str_t
(
name
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetAttachedShaders_1_0
(
PP_Resource
context
GLuint
program
GLsizei
maxcount
GLsizei
*
count
GLuint
*
shaders
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAttachedShaders
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
AddProp
(
ss
"
maxcount
"
ToString_GLsizei
(
maxcount
)
)
;
AddProp
(
ss
"
count
"
PointerToString
(
count
)
)
;
AddProp
(
ss
"
shaders
"
PointerToString
(
shaders
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLsizei_ptr_t
(
iterator
count
)
;
iterator
.
skip
(
)
;
FromJSON_GLuint_ptr_t
(
iterator
shaders
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetAttachedShaders
(
context
program
maxcount
count
shaders
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
count
"
ToString_GLsizei_ptr_t
(
count
)
)
;
AddProp
(
os
"
shaders
"
ToString_GLuint_ptr_t
(
shaders
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
GLint
GetAttribLocation_1_0
(
PP_Resource
context
GLuint
program
const
char
*
name
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAttribLocation
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
AddProp
(
ss
"
name
"
ToString_cstr_t
(
name
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLint
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLint
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLint
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetAttribLocation
(
context
program
name
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLint
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
GetBooleanv_1_0
(
PP_Resource
context
GLenum
pname
GLboolean
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBooleanv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLboolean_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetBooleanv
(
context
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLboolean_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetBufferParameteriv_1_0
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBufferParameteriv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetBufferParameteriv
(
context
target
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLint_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
GLenum
GetError_1_0
(
PP_Resource
context
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetError
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLenum
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLenum
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLenum
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetError
(
context
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLenum
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
GetFloatv_1_0
(
PP_Resource
context
GLenum
pname
GLfloat
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFloatv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLfloat_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetFloatv
(
context
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLfloat_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetFramebufferAttachmentParameteriv_1_0
(
PP_Resource
context
GLenum
target
GLenum
attachment
GLenum
pname
GLint
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFramebufferAttachmentParameteriv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
attachment
"
ToString_GLenum
(
attachment
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetFramebufferAttachmentParameteriv
(
context
target
attachment
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLint_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetIntegerv_1_0
(
PP_Resource
context
GLenum
pname
GLint
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetIntegerv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetIntegerv
(
context
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLint_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetProgramiv_1_0
(
PP_Resource
context
GLuint
program
GLenum
pname
GLint
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetProgramiv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetProgramiv
(
context
program
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLint_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetProgramInfoLog_1_0
(
PP_Resource
context
GLuint
program
GLsizei
bufsize
GLsizei
*
length
char
*
infolog
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetProgramInfoLog
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
AddProp
(
ss
"
bufsize
"
ToString_GLsizei
(
bufsize
)
)
;
AddProp
(
ss
"
length
"
PointerToString
(
length
)
)
;
AddProp
(
ss
"
infolog
"
PointerToString
(
infolog
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLsizei_ptr_t
(
iterator
length
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
infolog
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetProgramInfoLog
(
context
program
bufsize
length
infolog
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
length
"
ToString_GLsizei_ptr_t
(
length
)
)
;
AddProp
(
os
"
infolog
"
ToString_str_t
(
infolog
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetRenderbufferParameteriv_1_0
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRenderbufferParameteriv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetRenderbufferParameteriv
(
context
target
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLint_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetShaderiv_1_0
(
PP_Resource
context
GLuint
shader
GLenum
pname
GLint
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetShaderiv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
shader
"
ToString_GLuint
(
shader
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetShaderiv
(
context
shader
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLint_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetShaderInfoLog_1_0
(
PP_Resource
context
GLuint
shader
GLsizei
bufsize
GLsizei
*
length
char
*
infolog
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetShaderInfoLog
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
shader
"
ToString_GLuint
(
shader
)
)
;
AddProp
(
ss
"
bufsize
"
ToString_GLsizei
(
bufsize
)
)
;
AddProp
(
ss
"
length
"
PointerToString
(
length
)
)
;
AddProp
(
ss
"
infolog
"
PointerToString
(
infolog
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLsizei_ptr_t
(
iterator
length
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
infolog
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetShaderInfoLog
(
context
shader
bufsize
length
infolog
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
length
"
ToString_GLsizei_ptr_t
(
length
)
)
;
AddProp
(
os
"
infolog
"
ToString_str_t
(
infolog
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetShaderPrecisionFormat_1_0
(
PP_Resource
context
GLenum
shadertype
GLenum
precisiontype
GLint
*
range
GLint
*
precision
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetShaderPrecisionFormat
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
shadertype
"
ToString_GLenum
(
shadertype
)
)
;
AddProp
(
ss
"
precisiontype
"
ToString_GLenum
(
precisiontype
)
)
;
AddProp
(
ss
"
range
"
PointerToString
(
range
)
)
;
AddProp
(
ss
"
precision
"
PointerToString
(
precision
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
range
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
precision
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetShaderPrecisionFormat
(
context
shadertype
precisiontype
range
precision
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
range
"
ToString_GLint_ptr_t
(
range
)
)
;
AddProp
(
os
"
precision
"
ToString_GLint_ptr_t
(
precision
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetShaderSource_1_0
(
PP_Resource
context
GLuint
shader
GLsizei
bufsize
GLsizei
*
length
char
*
source
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetShaderSource
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
shader
"
ToString_GLuint
(
shader
)
)
;
AddProp
(
ss
"
bufsize
"
ToString_GLsizei
(
bufsize
)
)
;
AddProp
(
ss
"
length
"
PointerToString
(
length
)
)
;
AddProp
(
ss
"
source
"
PointerToString
(
source
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLsizei_ptr_t
(
iterator
length
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
source
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetShaderSource
(
context
shader
bufsize
length
source
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
length
"
ToString_GLsizei_ptr_t
(
length
)
)
;
AddProp
(
os
"
source
"
ToString_str_t
(
source
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
const
GLubyte
*
GetString_1_0
(
PP_Resource
context
GLenum
name
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetString
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
name
"
ToString_GLenum
(
name
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLubyte
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLubyte_ptr_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
const
GLubyte
*
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetString
(
context
name
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLubyte_ptr_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
GetTexParameterfv_1_0
(
PP_Resource
context
GLenum
target
GLenum
pname
GLfloat
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTexParameterfv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLfloat_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetTexParameterfv
(
context
target
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLfloat_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetTexParameteriv_1_0
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTexParameteriv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetTexParameteriv
(
context
target
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLint_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetUniformfv_1_0
(
PP_Resource
context
GLuint
program
GLint
location
GLfloat
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetUniformfv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLfloat_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetUniformfv
(
context
program
location
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLfloat_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetUniformiv_1_0
(
PP_Resource
context
GLuint
program
GLint
location
GLint
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetUniformiv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetUniformiv
(
context
program
location
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLint_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
GLint
GetUniformLocation_1_0
(
PP_Resource
context
GLuint
program
const
char
*
name
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetUniformLocation
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
AddProp
(
ss
"
name
"
ToString_cstr_t
(
name
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLint
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLint
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLint
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetUniformLocation
(
context
program
name
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLint
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
GetVertexAttribfv_1_0
(
PP_Resource
context
GLuint
index
GLenum
pname
GLfloat
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetVertexAttribfv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
index
"
ToString_GLuint
(
index
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLfloat_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetVertexAttribfv
(
context
index
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLfloat_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetVertexAttribiv_1_0
(
PP_Resource
context
GLuint
index
GLenum
pname
GLint
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetVertexAttribiv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
index
"
ToString_GLuint
(
index
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetVertexAttribiv
(
context
index
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLint_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetVertexAttribPointerv_1_0
(
PP_Resource
context
GLuint
index
GLenum
pname
void
*
*
pointer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetVertexAttribPointerv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
index
"
ToString_GLuint
(
index
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
pointer
"
PointerToString
(
pointer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_mem_ptr_t
(
iterator
pointer
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
GetVertexAttribPointerv
(
context
index
pname
pointer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
pointer
"
ToString_mem_ptr_t
(
pointer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
Hint_1_0
(
PP_Resource
context
GLenum
target
GLenum
mode
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Hint
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
mode
"
ToString_GLenum
(
mode
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Hint
(
context
target
mode
)
;
#
endif
}
static
GLboolean
IsBuffer_1_0
(
PP_Resource
context
GLuint
buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsBuffer
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
buffer
"
ToString_GLuint
(
buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLboolean
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLboolean
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLboolean
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
IsBuffer
(
context
buffer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLboolean
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
GLboolean
IsEnabled_1_0
(
PP_Resource
context
GLenum
cap
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsEnabled
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
cap
"
ToString_GLenum
(
cap
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLboolean
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLboolean
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLboolean
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
IsEnabled
(
context
cap
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLboolean
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
GLboolean
IsFramebuffer_1_0
(
PP_Resource
context
GLuint
framebuffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFramebuffer
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
framebuffer
"
ToString_GLuint
(
framebuffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLboolean
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLboolean
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLboolean
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
IsFramebuffer
(
context
framebuffer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLboolean
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
GLboolean
IsProgram_1_0
(
PP_Resource
context
GLuint
program
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsProgram
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLboolean
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLboolean
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLboolean
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
IsProgram
(
context
program
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLboolean
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
GLboolean
IsRenderbuffer_1_0
(
PP_Resource
context
GLuint
renderbuffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsRenderbuffer
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
renderbuffer
"
ToString_GLuint
(
renderbuffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLboolean
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLboolean
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLboolean
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
IsRenderbuffer
(
context
renderbuffer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLboolean
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
GLboolean
IsShader_1_0
(
PP_Resource
context
GLuint
shader
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsShader
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
shader
"
ToString_GLuint
(
shader
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLboolean
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLboolean
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLboolean
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
IsShader
(
context
shader
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLboolean
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
GLboolean
IsTexture_1_0
(
PP_Resource
context
GLuint
texture
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsTexture
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
texture
"
ToString_GLuint
(
texture
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLboolean
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLboolean
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLboolean
rval
=
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
IsTexture
(
context
texture
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLboolean
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
LineWidth_1_0
(
PP_Resource
context
GLfloat
width
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
LineWidth
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
width
"
ToString_GLfloat
(
width
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
LineWidth
(
context
width
)
;
#
endif
}
static
void
LinkProgram_1_0
(
PP_Resource
context
GLuint
program
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
LinkProgram
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
LinkProgram
(
context
program
)
;
#
endif
}
static
void
PixelStorei_1_0
(
PP_Resource
context
GLenum
pname
GLint
param
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PixelStorei
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
param
"
ToString_GLint
(
param
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
PixelStorei
(
context
pname
param
)
;
#
endif
}
static
void
PolygonOffset_1_0
(
PP_Resource
context
GLfloat
factor
GLfloat
units
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PolygonOffset
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
factor
"
ToString_GLfloat
(
factor
)
)
;
AddProp
(
ss
"
units
"
ToString_GLfloat
(
units
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
PolygonOffset
(
context
factor
units
)
;
#
endif
}
static
void
ReadPixels_1_0
(
PP_Resource
context
GLint
x
GLint
y
GLsizei
width
GLsizei
height
GLenum
format
GLenum
type
void
*
pixels
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReadPixels
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
x
"
ToString_GLint
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLint
(
y
)
)
;
AddProp
(
ss
"
width
"
ToString_GLsizei
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_GLsizei
(
height
)
)
;
AddProp
(
ss
"
format
"
ToString_GLenum
(
format
)
)
;
AddProp
(
ss
"
type
"
ToString_GLenum
(
type
)
)
;
AddProp
(
ss
"
pixels
"
PointerToString
(
pixels
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
pixels
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
ReadPixels
(
context
x
y
width
height
format
type
pixels
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
pixels
"
ToString_mem_t
(
pixels
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
ReleaseShaderCompiler_1_0
(
PP_Resource
context
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReleaseShaderCompiler
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
ReleaseShaderCompiler
(
context
)
;
#
endif
}
static
void
RenderbufferStorage_1_0
(
PP_Resource
context
GLenum
target
GLenum
internalformat
GLsizei
width
GLsizei
height
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RenderbufferStorage
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
internalformat
"
ToString_GLenum
(
internalformat
)
)
;
AddProp
(
ss
"
width
"
ToString_GLsizei
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_GLsizei
(
height
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
RenderbufferStorage
(
context
target
internalformat
width
height
)
;
#
endif
}
static
void
SampleCoverage_1_0
(
PP_Resource
context
GLclampf
value
GLboolean
invert
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SampleCoverage
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
value
"
ToString_GLclampf
(
value
)
)
;
AddProp
(
ss
"
invert
"
ToString_GLboolean
(
invert
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
SampleCoverage
(
context
value
invert
)
;
#
endif
}
static
void
Scissor_1_0
(
PP_Resource
context
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Scissor
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
x
"
ToString_GLint
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLint
(
y
)
)
;
AddProp
(
ss
"
width
"
ToString_GLsizei
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_GLsizei
(
height
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Scissor
(
context
x
y
width
height
)
;
#
endif
}
static
void
ShaderBinary_1_0
(
PP_Resource
context
GLsizei
n
const
GLuint
*
shaders
GLenum
binaryformat
const
void
*
binary
GLsizei
length
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ShaderBinary
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
AddProp
(
ss
"
shaders
"
ToString_GLuint_ptr_t
(
shaders
)
)
;
AddProp
(
ss
"
binaryformat
"
ToString_GLenum
(
binaryformat
)
)
;
AddProp
(
ss
"
binary
"
ToString_mem_t
(
binary
)
)
;
AddProp
(
ss
"
length
"
ToString_GLsizei
(
length
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
ShaderBinary
(
context
n
shaders
binaryformat
binary
length
)
;
#
endif
}
static
void
ShaderSource_1_0
(
PP_Resource
context
GLuint
shader
GLsizei
count
const
char
*
*
str
const
GLint
*
length
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ShaderSource
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
shader
"
ToString_GLuint
(
shader
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
{
BeginProp
(
ss
"
str
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
count
;
+
+
_n
)
{
AddElement
(
ss
ToString_str_t
(
str
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
length
"
ToString_GLint_ptr_t
(
length
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
ShaderSource
(
context
shader
count
str
length
)
;
#
endif
}
static
void
StencilFunc_1_0
(
PP_Resource
context
GLenum
func
GLint
ref
GLuint
mask
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StencilFunc
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
func
"
ToString_GLenum
(
func
)
)
;
AddProp
(
ss
"
ref
"
ToString_GLint
(
ref
)
)
;
AddProp
(
ss
"
mask
"
ToString_GLuint
(
mask
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
StencilFunc
(
context
func
ref
mask
)
;
#
endif
}
static
void
StencilFuncSeparate_1_0
(
PP_Resource
context
GLenum
face
GLenum
func
GLint
ref
GLuint
mask
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StencilFuncSeparate
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
face
"
ToString_GLenum
(
face
)
)
;
AddProp
(
ss
"
func
"
ToString_GLenum
(
func
)
)
;
AddProp
(
ss
"
ref
"
ToString_GLint
(
ref
)
)
;
AddProp
(
ss
"
mask
"
ToString_GLuint
(
mask
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
StencilFuncSeparate
(
context
face
func
ref
mask
)
;
#
endif
}
static
void
StencilMask_1_0
(
PP_Resource
context
GLuint
mask
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StencilMask
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
mask
"
ToString_GLuint
(
mask
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
StencilMask
(
context
mask
)
;
#
endif
}
static
void
StencilMaskSeparate_1_0
(
PP_Resource
context
GLenum
face
GLuint
mask
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StencilMaskSeparate
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
face
"
ToString_GLenum
(
face
)
)
;
AddProp
(
ss
"
mask
"
ToString_GLuint
(
mask
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
StencilMaskSeparate
(
context
face
mask
)
;
#
endif
}
static
void
StencilOp_1_0
(
PP_Resource
context
GLenum
fail
GLenum
zfail
GLenum
zpass
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StencilOp
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
fail
"
ToString_GLenum
(
fail
)
)
;
AddProp
(
ss
"
zfail
"
ToString_GLenum
(
zfail
)
)
;
AddProp
(
ss
"
zpass
"
ToString_GLenum
(
zpass
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
StencilOp
(
context
fail
zfail
zpass
)
;
#
endif
}
static
void
StencilOpSeparate_1_0
(
PP_Resource
context
GLenum
face
GLenum
fail
GLenum
zfail
GLenum
zpass
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StencilOpSeparate
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
face
"
ToString_GLenum
(
face
)
)
;
AddProp
(
ss
"
fail
"
ToString_GLenum
(
fail
)
)
;
AddProp
(
ss
"
zfail
"
ToString_GLenum
(
zfail
)
)
;
AddProp
(
ss
"
zpass
"
ToString_GLenum
(
zpass
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
StencilOpSeparate
(
context
face
fail
zfail
zpass
)
;
#
endif
}
static
void
TexImage2D_1_0
(
PP_Resource
context
GLenum
target
GLint
level
GLint
internalformat
GLsizei
width
GLsizei
height
GLint
border
GLenum
format
GLenum
type
const
void
*
pixels
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
TexImage2D
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
level
"
ToString_GLint
(
level
)
)
;
AddProp
(
ss
"
internalformat
"
ToString_GLint
(
internalformat
)
)
;
AddProp
(
ss
"
width
"
ToString_GLsizei
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_GLsizei
(
height
)
)
;
AddProp
(
ss
"
border
"
ToString_GLint
(
border
)
)
;
AddProp
(
ss
"
format
"
ToString_GLenum
(
format
)
)
;
AddProp
(
ss
"
type
"
ToString_GLenum
(
type
)
)
;
AddProp
(
ss
"
pixels
"
ToString_mem_t
(
pixels
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
TexImage2D
(
context
target
level
internalformat
width
height
border
format
type
pixels
)
;
#
endif
}
static
void
TexParameterf_1_0
(
PP_Resource
context
GLenum
target
GLenum
pname
GLfloat
param
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
TexParameterf
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
param
"
ToString_GLfloat
(
param
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
TexParameterf
(
context
target
pname
param
)
;
#
endif
}
static
void
TexParameterfv_1_0
(
PP_Resource
context
GLenum
target
GLenum
pname
const
GLfloat
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
TexParameterfv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
ToString_GLfloat_ptr_t
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
TexParameterfv
(
context
target
pname
params
)
;
#
endif
}
static
void
TexParameteri_1_0
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
param
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
TexParameteri
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
param
"
ToString_GLint
(
param
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
TexParameteri
(
context
target
pname
param
)
;
#
endif
}
static
void
TexParameteriv_1_0
(
PP_Resource
context
GLenum
target
GLenum
pname
const
GLint
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
TexParameteriv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
ToString_GLint_ptr_t
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
TexParameteriv
(
context
target
pname
params
)
;
#
endif
}
static
void
TexSubImage2D_1_0
(
PP_Resource
context
GLenum
target
GLint
level
GLint
xoffset
GLint
yoffset
GLsizei
width
GLsizei
height
GLenum
format
GLenum
type
const
void
*
pixels
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
TexSubImage2D
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
level
"
ToString_GLint
(
level
)
)
;
AddProp
(
ss
"
xoffset
"
ToString_GLint
(
xoffset
)
)
;
AddProp
(
ss
"
yoffset
"
ToString_GLint
(
yoffset
)
)
;
AddProp
(
ss
"
width
"
ToString_GLsizei
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_GLsizei
(
height
)
)
;
AddProp
(
ss
"
format
"
ToString_GLenum
(
format
)
)
;
AddProp
(
ss
"
type
"
ToString_GLenum
(
type
)
)
;
AddProp
(
ss
"
pixels
"
ToString_mem_t
(
pixels
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
TexSubImage2D
(
context
target
level
xoffset
yoffset
width
height
format
type
pixels
)
;
#
endif
}
static
void
Uniform1f_1_0
(
PP_Resource
context
GLint
location
GLfloat
x
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform1f
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
x
"
ToString_GLfloat
(
x
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform1f
(
context
location
x
)
;
#
endif
}
static
void
Uniform1fv_1_0
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLfloat
*
v
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform1fv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
v
"
ToString_GLfloat_ptr_t
(
v
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform1fv
(
context
location
count
v
)
;
#
endif
}
static
void
Uniform1i_1_0
(
PP_Resource
context
GLint
location
GLint
x
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform1i
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
x
"
ToString_GLint
(
x
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform1i
(
context
location
x
)
;
#
endif
}
static
void
Uniform1iv_1_0
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLint
*
v
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform1iv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
v
"
ToString_GLint_ptr_t
(
v
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform1iv
(
context
location
count
v
)
;
#
endif
}
static
void
Uniform2f_1_0
(
PP_Resource
context
GLint
location
GLfloat
x
GLfloat
y
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform2f
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
x
"
ToString_GLfloat
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLfloat
(
y
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform2f
(
context
location
x
y
)
;
#
endif
}
static
void
Uniform2fv_1_0
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLfloat
*
v
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform2fv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
v
"
ToString_GLfloat_ptr_t
(
v
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform2fv
(
context
location
count
v
)
;
#
endif
}
static
void
Uniform2i_1_0
(
PP_Resource
context
GLint
location
GLint
x
GLint
y
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform2i
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
x
"
ToString_GLint
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLint
(
y
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform2i
(
context
location
x
y
)
;
#
endif
}
static
void
Uniform2iv_1_0
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLint
*
v
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform2iv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
v
"
ToString_GLint_ptr_t
(
v
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform2iv
(
context
location
count
v
)
;
#
endif
}
static
void
Uniform3f_1_0
(
PP_Resource
context
GLint
location
GLfloat
x
GLfloat
y
GLfloat
z
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform3f
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
x
"
ToString_GLfloat
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLfloat
(
y
)
)
;
AddProp
(
ss
"
z
"
ToString_GLfloat
(
z
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform3f
(
context
location
x
y
z
)
;
#
endif
}
static
void
Uniform3fv_1_0
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLfloat
*
v
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform3fv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
v
"
ToString_GLfloat_ptr_t
(
v
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform3fv
(
context
location
count
v
)
;
#
endif
}
static
void
Uniform3i_1_0
(
PP_Resource
context
GLint
location
GLint
x
GLint
y
GLint
z
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform3i
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
x
"
ToString_GLint
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLint
(
y
)
)
;
AddProp
(
ss
"
z
"
ToString_GLint
(
z
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform3i
(
context
location
x
y
z
)
;
#
endif
}
static
void
Uniform3iv_1_0
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLint
*
v
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform3iv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
v
"
ToString_GLint_ptr_t
(
v
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform3iv
(
context
location
count
v
)
;
#
endif
}
static
void
Uniform4f_1_0
(
PP_Resource
context
GLint
location
GLfloat
x
GLfloat
y
GLfloat
z
GLfloat
w
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform4f
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
x
"
ToString_GLfloat
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLfloat
(
y
)
)
;
AddProp
(
ss
"
z
"
ToString_GLfloat
(
z
)
)
;
AddProp
(
ss
"
w
"
ToString_GLfloat
(
w
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform4f
(
context
location
x
y
z
w
)
;
#
endif
}
static
void
Uniform4fv_1_0
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLfloat
*
v
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform4fv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
v
"
ToString_GLfloat_ptr_t
(
v
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform4fv
(
context
location
count
v
)
;
#
endif
}
static
void
Uniform4i_1_0
(
PP_Resource
context
GLint
location
GLint
x
GLint
y
GLint
z
GLint
w
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform4i
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
x
"
ToString_GLint
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLint
(
y
)
)
;
AddProp
(
ss
"
z
"
ToString_GLint
(
z
)
)
;
AddProp
(
ss
"
w
"
ToString_GLint
(
w
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform4i
(
context
location
x
y
z
w
)
;
#
endif
}
static
void
Uniform4iv_1_0
(
PP_Resource
context
GLint
location
GLsizei
count
const
GLint
*
v
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Uniform4iv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
v
"
ToString_GLint_ptr_t
(
v
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Uniform4iv
(
context
location
count
v
)
;
#
endif
}
static
void
UniformMatrix2fv_1_0
(
PP_Resource
context
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UniformMatrix2fv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
transpose
"
ToString_GLboolean
(
transpose
)
)
;
AddProp
(
ss
"
value
"
ToString_GLfloat_ptr_t
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
UniformMatrix2fv
(
context
location
count
transpose
value
)
;
#
endif
}
static
void
UniformMatrix3fv_1_0
(
PP_Resource
context
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UniformMatrix3fv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
transpose
"
ToString_GLboolean
(
transpose
)
)
;
{
BeginProp
(
ss
"
value
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
count
*
9
;
+
+
_n
)
{
AddElement
(
ss
ToString_GLfloat
(
value
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
UniformMatrix3fv
(
context
location
count
transpose
value
)
;
#
endif
}
static
void
UniformMatrix4fv_1_0
(
PP_Resource
context
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UniformMatrix4fv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
location
"
ToString_GLint
(
location
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
transpose
"
ToString_GLboolean
(
transpose
)
)
;
AddProp
(
ss
"
value
"
ToString_GLfloat_ptr_t
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
UniformMatrix4fv
(
context
location
count
transpose
value
)
;
#
endif
}
static
void
UseProgram_1_0
(
PP_Resource
context
GLuint
program
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UseProgram
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
UseProgram
(
context
program
)
;
#
endif
}
static
void
ValidateProgram_1_0
(
PP_Resource
context
GLuint
program
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ValidateProgram
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
program
"
ToString_GLuint
(
program
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
ValidateProgram
(
context
program
)
;
#
endif
}
static
void
VertexAttrib1f_1_0
(
PP_Resource
context
GLuint
indx
GLfloat
x
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VertexAttrib1f
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
indx
"
ToString_GLuint
(
indx
)
)
;
AddProp
(
ss
"
x
"
ToString_GLfloat
(
x
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
VertexAttrib1f
(
context
indx
x
)
;
#
endif
}
static
void
VertexAttrib1fv_1_0
(
PP_Resource
context
GLuint
indx
const
GLfloat
*
values
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VertexAttrib1fv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
indx
"
ToString_GLuint
(
indx
)
)
;
AddProp
(
ss
"
values
"
ToString_GLfloat_ptr_t
(
values
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
VertexAttrib1fv
(
context
indx
values
)
;
#
endif
}
static
void
VertexAttrib2f_1_0
(
PP_Resource
context
GLuint
indx
GLfloat
x
GLfloat
y
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VertexAttrib2f
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
indx
"
ToString_GLuint
(
indx
)
)
;
AddProp
(
ss
"
x
"
ToString_GLfloat
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLfloat
(
y
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
VertexAttrib2f
(
context
indx
x
y
)
;
#
endif
}
static
void
VertexAttrib2fv_1_0
(
PP_Resource
context
GLuint
indx
const
GLfloat
*
values
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VertexAttrib2fv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
indx
"
ToString_GLuint
(
indx
)
)
;
AddProp
(
ss
"
values
"
ToString_GLfloat_ptr_t
(
values
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
VertexAttrib2fv
(
context
indx
values
)
;
#
endif
}
static
void
VertexAttrib3f_1_0
(
PP_Resource
context
GLuint
indx
GLfloat
x
GLfloat
y
GLfloat
z
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VertexAttrib3f
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
indx
"
ToString_GLuint
(
indx
)
)
;
AddProp
(
ss
"
x
"
ToString_GLfloat
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLfloat
(
y
)
)
;
AddProp
(
ss
"
z
"
ToString_GLfloat
(
z
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
VertexAttrib3f
(
context
indx
x
y
z
)
;
#
endif
}
static
void
VertexAttrib3fv_1_0
(
PP_Resource
context
GLuint
indx
const
GLfloat
*
values
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VertexAttrib3fv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
indx
"
ToString_GLuint
(
indx
)
)
;
AddProp
(
ss
"
values
"
ToString_GLfloat_ptr_t
(
values
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
VertexAttrib3fv
(
context
indx
values
)
;
#
endif
}
static
void
VertexAttrib4f_1_0
(
PP_Resource
context
GLuint
indx
GLfloat
x
GLfloat
y
GLfloat
z
GLfloat
w
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VertexAttrib4f
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
indx
"
ToString_GLuint
(
indx
)
)
;
AddProp
(
ss
"
x
"
ToString_GLfloat
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLfloat
(
y
)
)
;
AddProp
(
ss
"
z
"
ToString_GLfloat
(
z
)
)
;
AddProp
(
ss
"
w
"
ToString_GLfloat
(
w
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
VertexAttrib4f
(
context
indx
x
y
z
w
)
;
#
endif
}
static
void
VertexAttrib4fv_1_0
(
PP_Resource
context
GLuint
indx
const
GLfloat
*
values
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VertexAttrib4fv
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
indx
"
ToString_GLuint
(
indx
)
)
;
AddProp
(
ss
"
values
"
ToString_GLfloat_ptr_t
(
values
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
VertexAttrib4fv
(
context
indx
values
)
;
#
endif
}
static
void
VertexAttribPointer_1_0
(
PP_Resource
context
GLuint
indx
GLint
size
GLenum
type
GLboolean
normalized
GLsizei
stride
const
void
*
ptr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VertexAttribPointer
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
indx
"
ToString_GLuint
(
indx
)
)
;
AddProp
(
ss
"
size
"
ToString_GLint
(
size
)
)
;
AddProp
(
ss
"
type
"
ToString_GLenum
(
type
)
)
;
AddProp
(
ss
"
normalized
"
ToString_GLboolean
(
normalized
)
)
;
AddProp
(
ss
"
stride
"
ToString_GLsizei
(
stride
)
)
;
AddProp
(
ss
"
ptr
"
ToString_mem_t
(
ptr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
VertexAttribPointer
(
context
indx
size
type
normalized
stride
ptr
)
;
#
endif
}
static
void
Viewport_1_0
(
PP_Resource
context
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Viewport
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
x
"
ToString_GLint
(
x
)
)
;
AddProp
(
ss
"
y
"
ToString_GLint
(
y
)
)
;
AddProp
(
ss
"
width
"
ToString_GLsizei
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_GLsizei
(
height
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2
;
1
.
0
"
)
)
-
>
Viewport
(
context
x
y
width
height
)
;
#
endif
}
}
static
PPB_OpenGLES2_1_0
_PPB_OpenGLES2_1_0
=
{
ns_PPB_OpenGLES2_1_0
:
:
ActiveTexture_1_0
ns_PPB_OpenGLES2_1_0
:
:
AttachShader_1_0
ns_PPB_OpenGLES2_1_0
:
:
BindAttribLocation_1_0
ns_PPB_OpenGLES2_1_0
:
:
BindBuffer_1_0
ns_PPB_OpenGLES2_1_0
:
:
BindFramebuffer_1_0
ns_PPB_OpenGLES2_1_0
:
:
BindRenderbuffer_1_0
ns_PPB_OpenGLES2_1_0
:
:
BindTexture_1_0
ns_PPB_OpenGLES2_1_0
:
:
BlendColor_1_0
ns_PPB_OpenGLES2_1_0
:
:
BlendEquation_1_0
ns_PPB_OpenGLES2_1_0
:
:
BlendEquationSeparate_1_0
ns_PPB_OpenGLES2_1_0
:
:
BlendFunc_1_0
ns_PPB_OpenGLES2_1_0
:
:
BlendFuncSeparate_1_0
ns_PPB_OpenGLES2_1_0
:
:
BufferData_1_0
ns_PPB_OpenGLES2_1_0
:
:
BufferSubData_1_0
ns_PPB_OpenGLES2_1_0
:
:
CheckFramebufferStatus_1_0
ns_PPB_OpenGLES2_1_0
:
:
Clear_1_0
ns_PPB_OpenGLES2_1_0
:
:
ClearColor_1_0
ns_PPB_OpenGLES2_1_0
:
:
ClearDepthf_1_0
ns_PPB_OpenGLES2_1_0
:
:
ClearStencil_1_0
ns_PPB_OpenGLES2_1_0
:
:
ColorMask_1_0
ns_PPB_OpenGLES2_1_0
:
:
CompileShader_1_0
ns_PPB_OpenGLES2_1_0
:
:
CompressedTexImage2D_1_0
ns_PPB_OpenGLES2_1_0
:
:
CompressedTexSubImage2D_1_0
ns_PPB_OpenGLES2_1_0
:
:
CopyTexImage2D_1_0
ns_PPB_OpenGLES2_1_0
:
:
CopyTexSubImage2D_1_0
ns_PPB_OpenGLES2_1_0
:
:
CreateProgram_1_0
ns_PPB_OpenGLES2_1_0
:
:
CreateShader_1_0
ns_PPB_OpenGLES2_1_0
:
:
CullFace_1_0
ns_PPB_OpenGLES2_1_0
:
:
DeleteBuffers_1_0
ns_PPB_OpenGLES2_1_0
:
:
DeleteFramebuffers_1_0
ns_PPB_OpenGLES2_1_0
:
:
DeleteProgram_1_0
ns_PPB_OpenGLES2_1_0
:
:
DeleteRenderbuffers_1_0
ns_PPB_OpenGLES2_1_0
:
:
DeleteShader_1_0
ns_PPB_OpenGLES2_1_0
:
:
DeleteTextures_1_0
ns_PPB_OpenGLES2_1_0
:
:
DepthFunc_1_0
ns_PPB_OpenGLES2_1_0
:
:
DepthMask_1_0
ns_PPB_OpenGLES2_1_0
:
:
DepthRangef_1_0
ns_PPB_OpenGLES2_1_0
:
:
DetachShader_1_0
ns_PPB_OpenGLES2_1_0
:
:
Disable_1_0
ns_PPB_OpenGLES2_1_0
:
:
DisableVertexAttribArray_1_0
ns_PPB_OpenGLES2_1_0
:
:
DrawArrays_1_0
ns_PPB_OpenGLES2_1_0
:
:
DrawElements_1_0
ns_PPB_OpenGLES2_1_0
:
:
Enable_1_0
ns_PPB_OpenGLES2_1_0
:
:
EnableVertexAttribArray_1_0
ns_PPB_OpenGLES2_1_0
:
:
Finish_1_0
ns_PPB_OpenGLES2_1_0
:
:
Flush_1_0
ns_PPB_OpenGLES2_1_0
:
:
FramebufferRenderbuffer_1_0
ns_PPB_OpenGLES2_1_0
:
:
FramebufferTexture2D_1_0
ns_PPB_OpenGLES2_1_0
:
:
FrontFace_1_0
ns_PPB_OpenGLES2_1_0
:
:
GenBuffers_1_0
ns_PPB_OpenGLES2_1_0
:
:
GenerateMipmap_1_0
ns_PPB_OpenGLES2_1_0
:
:
GenFramebuffers_1_0
ns_PPB_OpenGLES2_1_0
:
:
GenRenderbuffers_1_0
ns_PPB_OpenGLES2_1_0
:
:
GenTextures_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetActiveAttrib_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetActiveUniform_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetAttachedShaders_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetAttribLocation_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetBooleanv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetBufferParameteriv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetError_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetFloatv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetFramebufferAttachmentParameteriv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetIntegerv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetProgramiv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetProgramInfoLog_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetRenderbufferParameteriv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetShaderiv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetShaderInfoLog_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetShaderPrecisionFormat_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetShaderSource_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetString_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetTexParameterfv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetTexParameteriv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetUniformfv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetUniformiv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetUniformLocation_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetVertexAttribfv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetVertexAttribiv_1_0
ns_PPB_OpenGLES2_1_0
:
:
GetVertexAttribPointerv_1_0
ns_PPB_OpenGLES2_1_0
:
:
Hint_1_0
ns_PPB_OpenGLES2_1_0
:
:
IsBuffer_1_0
ns_PPB_OpenGLES2_1_0
:
:
IsEnabled_1_0
ns_PPB_OpenGLES2_1_0
:
:
IsFramebuffer_1_0
ns_PPB_OpenGLES2_1_0
:
:
IsProgram_1_0
ns_PPB_OpenGLES2_1_0
:
:
IsRenderbuffer_1_0
ns_PPB_OpenGLES2_1_0
:
:
IsShader_1_0
ns_PPB_OpenGLES2_1_0
:
:
IsTexture_1_0
ns_PPB_OpenGLES2_1_0
:
:
LineWidth_1_0
ns_PPB_OpenGLES2_1_0
:
:
LinkProgram_1_0
ns_PPB_OpenGLES2_1_0
:
:
PixelStorei_1_0
ns_PPB_OpenGLES2_1_0
:
:
PolygonOffset_1_0
ns_PPB_OpenGLES2_1_0
:
:
ReadPixels_1_0
ns_PPB_OpenGLES2_1_0
:
:
ReleaseShaderCompiler_1_0
ns_PPB_OpenGLES2_1_0
:
:
RenderbufferStorage_1_0
ns_PPB_OpenGLES2_1_0
:
:
SampleCoverage_1_0
ns_PPB_OpenGLES2_1_0
:
:
Scissor_1_0
ns_PPB_OpenGLES2_1_0
:
:
ShaderBinary_1_0
ns_PPB_OpenGLES2_1_0
:
:
ShaderSource_1_0
ns_PPB_OpenGLES2_1_0
:
:
StencilFunc_1_0
ns_PPB_OpenGLES2_1_0
:
:
StencilFuncSeparate_1_0
ns_PPB_OpenGLES2_1_0
:
:
StencilMask_1_0
ns_PPB_OpenGLES2_1_0
:
:
StencilMaskSeparate_1_0
ns_PPB_OpenGLES2_1_0
:
:
StencilOp_1_0
ns_PPB_OpenGLES2_1_0
:
:
StencilOpSeparate_1_0
ns_PPB_OpenGLES2_1_0
:
:
TexImage2D_1_0
ns_PPB_OpenGLES2_1_0
:
:
TexParameterf_1_0
ns_PPB_OpenGLES2_1_0
:
:
TexParameterfv_1_0
ns_PPB_OpenGLES2_1_0
:
:
TexParameteri_1_0
ns_PPB_OpenGLES2_1_0
:
:
TexParameteriv_1_0
ns_PPB_OpenGLES2_1_0
:
:
TexSubImage2D_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform1f_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform1fv_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform1i_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform1iv_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform2f_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform2fv_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform2i_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform2iv_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform3f_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform3fv_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform3i_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform3iv_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform4f_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform4fv_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform4i_1_0
ns_PPB_OpenGLES2_1_0
:
:
Uniform4iv_1_0
ns_PPB_OpenGLES2_1_0
:
:
UniformMatrix2fv_1_0
ns_PPB_OpenGLES2_1_0
:
:
UniformMatrix3fv_1_0
ns_PPB_OpenGLES2_1_0
:
:
UniformMatrix4fv_1_0
ns_PPB_OpenGLES2_1_0
:
:
UseProgram_1_0
ns_PPB_OpenGLES2_1_0
:
:
ValidateProgram_1_0
ns_PPB_OpenGLES2_1_0
:
:
VertexAttrib1f_1_0
ns_PPB_OpenGLES2_1_0
:
:
VertexAttrib1fv_1_0
ns_PPB_OpenGLES2_1_0
:
:
VertexAttrib2f_1_0
ns_PPB_OpenGLES2_1_0
:
:
VertexAttrib2fv_1_0
ns_PPB_OpenGLES2_1_0
:
:
VertexAttrib3f_1_0
ns_PPB_OpenGLES2_1_0
:
:
VertexAttrib3fv_1_0
ns_PPB_OpenGLES2_1_0
:
:
VertexAttrib4f_1_0
ns_PPB_OpenGLES2_1_0
:
:
VertexAttrib4fv_1_0
ns_PPB_OpenGLES2_1_0
:
:
VertexAttribPointer_1_0
ns_PPB_OpenGLES2_1_0
:
:
Viewport_1_0
}
;
const
string
ToString_PPB_OpenGLES2
(
const
PPB_OpenGLES2_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_OpenGLES2InstancedArrays_1_0
{
static
void
DrawArraysInstancedANGLE_1_0
(
PP_Resource
context
GLenum
mode
GLint
first
GLsizei
count
GLsizei
primcount
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2InstancedArrays
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DrawArraysInstancedANGLE
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
mode
"
ToString_GLenum
(
mode
)
)
;
AddProp
(
ss
"
first
"
ToString_GLint
(
first
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
primcount
"
ToString_GLsizei
(
primcount
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2InstancedArrays_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2InstancedArrays
;
1
.
0
"
)
)
-
>
DrawArraysInstancedANGLE
(
context
mode
first
count
primcount
)
;
#
endif
}
static
void
DrawElementsInstancedANGLE_1_0
(
PP_Resource
context
GLenum
mode
GLsizei
count
GLenum
type
const
void
*
indices
GLsizei
primcount
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2InstancedArrays
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DrawElementsInstancedANGLE
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
mode
"
ToString_GLenum
(
mode
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
type
"
ToString_GLenum
(
type
)
)
;
AddProp
(
ss
"
indices
"
ToString_mem_t
(
indices
)
)
;
AddProp
(
ss
"
primcount
"
ToString_GLsizei
(
primcount
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2InstancedArrays_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2InstancedArrays
;
1
.
0
"
)
)
-
>
DrawElementsInstancedANGLE
(
context
mode
count
type
indices
primcount
)
;
#
endif
}
static
void
VertexAttribDivisorANGLE_1_0
(
PP_Resource
context
GLuint
index
GLuint
divisor
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2InstancedArrays
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VertexAttribDivisorANGLE
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
index
"
ToString_GLuint
(
index
)
)
;
AddProp
(
ss
"
divisor
"
ToString_GLuint
(
divisor
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2InstancedArrays_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2InstancedArrays
;
1
.
0
"
)
)
-
>
VertexAttribDivisorANGLE
(
context
index
divisor
)
;
#
endif
}
}
static
PPB_OpenGLES2InstancedArrays_1_0
_PPB_OpenGLES2InstancedArrays_1_0
=
{
ns_PPB_OpenGLES2InstancedArrays_1_0
:
:
DrawArraysInstancedANGLE_1_0
ns_PPB_OpenGLES2InstancedArrays_1_0
:
:
DrawElementsInstancedANGLE_1_0
ns_PPB_OpenGLES2InstancedArrays_1_0
:
:
VertexAttribDivisorANGLE_1_0
}
;
const
string
ToString_PPB_OpenGLES2InstancedArrays
(
const
PPB_OpenGLES2InstancedArrays_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_OpenGLES2FramebufferBlit_1_0
{
static
void
BlitFramebufferEXT_1_0
(
PP_Resource
context
GLint
srcX0
GLint
srcY0
GLint
srcX1
GLint
srcY1
GLint
dstX0
GLint
dstY0
GLint
dstX1
GLint
dstY1
GLbitfield
mask
GLenum
filter
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2FramebufferBlit
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BlitFramebufferEXT
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
srcX0
"
ToString_GLint
(
srcX0
)
)
;
AddProp
(
ss
"
srcY0
"
ToString_GLint
(
srcY0
)
)
;
AddProp
(
ss
"
srcX1
"
ToString_GLint
(
srcX1
)
)
;
AddProp
(
ss
"
srcY1
"
ToString_GLint
(
srcY1
)
)
;
AddProp
(
ss
"
dstX0
"
ToString_GLint
(
dstX0
)
)
;
AddProp
(
ss
"
dstY0
"
ToString_GLint
(
dstY0
)
)
;
AddProp
(
ss
"
dstX1
"
ToString_GLint
(
dstX1
)
)
;
AddProp
(
ss
"
dstY1
"
ToString_GLint
(
dstY1
)
)
;
AddProp
(
ss
"
mask
"
ToString_GLbitfield
(
mask
)
)
;
AddProp
(
ss
"
filter
"
ToString_GLenum
(
filter
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2FramebufferBlit_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2FramebufferBlit
;
1
.
0
"
)
)
-
>
BlitFramebufferEXT
(
context
srcX0
srcY0
srcX1
srcY1
dstX0
dstY0
dstX1
dstY1
mask
filter
)
;
#
endif
}
}
static
PPB_OpenGLES2FramebufferBlit_1_0
_PPB_OpenGLES2FramebufferBlit_1_0
=
{
ns_PPB_OpenGLES2FramebufferBlit_1_0
:
:
BlitFramebufferEXT_1_0
}
;
const
string
ToString_PPB_OpenGLES2FramebufferBlit
(
const
PPB_OpenGLES2FramebufferBlit_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_OpenGLES2FramebufferMultisample_1_0
{
static
void
RenderbufferStorageMultisampleEXT_1_0
(
PP_Resource
context
GLenum
target
GLsizei
samples
GLenum
internalformat
GLsizei
width
GLsizei
height
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2FramebufferMultisample
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RenderbufferStorageMultisampleEXT
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
samples
"
ToString_GLsizei
(
samples
)
)
;
AddProp
(
ss
"
internalformat
"
ToString_GLenum
(
internalformat
)
)
;
AddProp
(
ss
"
width
"
ToString_GLsizei
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_GLsizei
(
height
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2FramebufferMultisample_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2FramebufferMultisample
;
1
.
0
"
)
)
-
>
RenderbufferStorageMultisampleEXT
(
context
target
samples
internalformat
width
height
)
;
#
endif
}
}
static
PPB_OpenGLES2FramebufferMultisample_1_0
_PPB_OpenGLES2FramebufferMultisample_1_0
=
{
ns_PPB_OpenGLES2FramebufferMultisample_1_0
:
:
RenderbufferStorageMultisampleEXT_1_0
}
;
const
string
ToString_PPB_OpenGLES2FramebufferMultisample
(
const
PPB_OpenGLES2FramebufferMultisample_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_OpenGLES2ChromiumEnableFeature_1_0
{
static
GLboolean
EnableFeatureCHROMIUM_1_0
(
PP_Resource
context
const
char
*
feature
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2ChromiumEnableFeature
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
EnableFeatureCHROMIUM
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
feature
"
ToString_cstr_t
(
feature
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLboolean
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLboolean
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLboolean
rval
=
(
(
PPB_OpenGLES2ChromiumEnableFeature_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2ChromiumEnableFeature
;
1
.
0
"
)
)
-
>
EnableFeatureCHROMIUM
(
context
feature
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLboolean
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_OpenGLES2ChromiumEnableFeature_1_0
_PPB_OpenGLES2ChromiumEnableFeature_1_0
=
{
ns_PPB_OpenGLES2ChromiumEnableFeature_1_0
:
:
EnableFeatureCHROMIUM_1_0
}
;
const
string
ToString_PPB_OpenGLES2ChromiumEnableFeature
(
const
PPB_OpenGLES2ChromiumEnableFeature_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_OpenGLES2ChromiumMapSub_1_0
{
static
void
*
MapBufferSubDataCHROMIUM_1_0
(
PP_Resource
context
GLuint
target
GLintptr
offset
GLsizeiptr
size
GLenum
access
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2ChromiumMapSub
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MapBufferSubDataCHROMIUM
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLuint
(
target
)
)
;
AddProp
(
ss
"
offset
"
ToString_GLintptr
(
offset
)
)
;
AddProp
(
ss
"
size
"
ToString_GLsizeiptr
(
size
)
)
;
AddProp
(
ss
"
access
"
ToString_GLenum
(
access
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
void
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_mem_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
void
*
rval
=
(
(
PPB_OpenGLES2ChromiumMapSub_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2ChromiumMapSub
;
1
.
0
"
)
)
-
>
MapBufferSubDataCHROMIUM
(
context
target
offset
size
access
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_mem_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
UnmapBufferSubDataCHROMIUM_1_0
(
PP_Resource
context
const
void
*
mem
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2ChromiumMapSub
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UnmapBufferSubDataCHROMIUM
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
mem
"
ToString_mem_t
(
mem
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2ChromiumMapSub_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2ChromiumMapSub
;
1
.
0
"
)
)
-
>
UnmapBufferSubDataCHROMIUM
(
context
mem
)
;
#
endif
}
static
void
*
MapTexSubImage2DCHROMIUM_1_0
(
PP_Resource
context
GLenum
target
GLint
level
GLint
xoffset
GLint
yoffset
GLsizei
width
GLsizei
height
GLenum
format
GLenum
type
GLenum
access
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2ChromiumMapSub
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MapTexSubImage2DCHROMIUM
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
level
"
ToString_GLint
(
level
)
)
;
AddProp
(
ss
"
xoffset
"
ToString_GLint
(
xoffset
)
)
;
AddProp
(
ss
"
yoffset
"
ToString_GLint
(
yoffset
)
)
;
AddProp
(
ss
"
width
"
ToString_GLsizei
(
width
)
)
;
AddProp
(
ss
"
height
"
ToString_GLsizei
(
height
)
)
;
AddProp
(
ss
"
format
"
ToString_GLenum
(
format
)
)
;
AddProp
(
ss
"
type
"
ToString_GLenum
(
type
)
)
;
AddProp
(
ss
"
access
"
ToString_GLenum
(
access
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
void
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_mem_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
void
*
rval
=
(
(
PPB_OpenGLES2ChromiumMapSub_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2ChromiumMapSub
;
1
.
0
"
)
)
-
>
MapTexSubImage2DCHROMIUM
(
context
target
level
xoffset
yoffset
width
height
format
type
access
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_mem_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
UnmapTexSubImage2DCHROMIUM_1_0
(
PP_Resource
context
const
void
*
mem
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2ChromiumMapSub
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UnmapTexSubImage2DCHROMIUM
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
mem
"
ToString_mem_t
(
mem
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2ChromiumMapSub_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2ChromiumMapSub
;
1
.
0
"
)
)
-
>
UnmapTexSubImage2DCHROMIUM
(
context
mem
)
;
#
endif
}
}
static
PPB_OpenGLES2ChromiumMapSub_1_0
_PPB_OpenGLES2ChromiumMapSub_1_0
=
{
ns_PPB_OpenGLES2ChromiumMapSub_1_0
:
:
MapBufferSubDataCHROMIUM_1_0
ns_PPB_OpenGLES2ChromiumMapSub_1_0
:
:
UnmapBufferSubDataCHROMIUM_1_0
ns_PPB_OpenGLES2ChromiumMapSub_1_0
:
:
MapTexSubImage2DCHROMIUM_1_0
ns_PPB_OpenGLES2ChromiumMapSub_1_0
:
:
UnmapTexSubImage2DCHROMIUM_1_0
}
;
const
string
ToString_PPB_OpenGLES2ChromiumMapSub
(
const
PPB_OpenGLES2ChromiumMapSub_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_OpenGLES2Query_1_0
{
static
void
GenQueriesEXT_1_0
(
PP_Resource
context
GLsizei
n
GLuint
*
queries
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2Query
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GenQueriesEXT
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
AddProp
(
ss
"
queries
"
PointerToString
(
queries
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLuint_ptr_t
(
iterator
queries
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2Query_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2Query
;
1
.
0
"
)
)
-
>
GenQueriesEXT
(
context
n
queries
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
queries
"
ToString_GLuint_ptr_t
(
queries
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
DeleteQueriesEXT_1_0
(
PP_Resource
context
GLsizei
n
const
GLuint
*
queries
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2Query
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DeleteQueriesEXT
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
AddProp
(
ss
"
queries
"
ToString_GLuint_ptr_t
(
queries
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2Query_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2Query
;
1
.
0
"
)
)
-
>
DeleteQueriesEXT
(
context
n
queries
)
;
#
endif
}
static
GLboolean
IsQueryEXT_1_0
(
PP_Resource
context
GLuint
id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2Query
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsQueryEXT
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
id
"
ToString_GLuint
(
id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLboolean
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLboolean
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLboolean
rval
=
(
(
PPB_OpenGLES2Query_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2Query
;
1
.
0
"
)
)
-
>
IsQueryEXT
(
context
id
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLboolean
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
BeginQueryEXT_1_0
(
PP_Resource
context
GLenum
target
GLuint
id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2Query
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BeginQueryEXT
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
id
"
ToString_GLuint
(
id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2Query_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2Query
;
1
.
0
"
)
)
-
>
BeginQueryEXT
(
context
target
id
)
;
#
endif
}
static
void
EndQueryEXT_1_0
(
PP_Resource
context
GLenum
target
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2Query
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
EndQueryEXT
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2Query_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2Query
;
1
.
0
"
)
)
-
>
EndQueryEXT
(
context
target
)
;
#
endif
}
static
void
GetQueryivEXT_1_0
(
PP_Resource
context
GLenum
target
GLenum
pname
GLint
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2Query
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetQueryivEXT
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
target
"
ToString_GLenum
(
target
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLint_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2Query_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2Query
;
1
.
0
"
)
)
-
>
GetQueryivEXT
(
context
target
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLint_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
GetQueryObjectuivEXT_1_0
(
PP_Resource
context
GLuint
id
GLenum
pname
GLuint
*
params
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2Query
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetQueryObjectuivEXT
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
id
"
ToString_GLuint
(
id
)
)
;
AddProp
(
ss
"
pname
"
ToString_GLenum
(
pname
)
)
;
AddProp
(
ss
"
params
"
PointerToString
(
params
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLuint_ptr_t
(
iterator
params
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2Query_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2Query
;
1
.
0
"
)
)
-
>
GetQueryObjectuivEXT
(
context
id
pname
params
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
params
"
ToString_GLuint_ptr_t
(
params
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
}
static
PPB_OpenGLES2Query_1_0
_PPB_OpenGLES2Query_1_0
=
{
ns_PPB_OpenGLES2Query_1_0
:
:
GenQueriesEXT_1_0
ns_PPB_OpenGLES2Query_1_0
:
:
DeleteQueriesEXT_1_0
ns_PPB_OpenGLES2Query_1_0
:
:
IsQueryEXT_1_0
ns_PPB_OpenGLES2Query_1_0
:
:
BeginQueryEXT_1_0
ns_PPB_OpenGLES2Query_1_0
:
:
EndQueryEXT_1_0
ns_PPB_OpenGLES2Query_1_0
:
:
GetQueryivEXT_1_0
ns_PPB_OpenGLES2Query_1_0
:
:
GetQueryObjectuivEXT_1_0
}
;
const
string
ToString_PPB_OpenGLES2Query
(
const
PPB_OpenGLES2Query_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_OpenGLES2VertexArrayObject_1_0
{
static
void
GenVertexArraysOES_1_0
(
PP_Resource
context
GLsizei
n
GLuint
*
arrays
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2VertexArrayObject
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GenVertexArraysOES
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
AddProp
(
ss
"
arrays
"
PointerToString
(
arrays
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_GLuint_ptr_t
(
iterator
arrays
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2VertexArrayObject_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2VertexArrayObject
;
1
.
0
"
)
)
-
>
GenVertexArraysOES
(
context
n
arrays
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
arrays
"
ToString_GLuint_ptr_t
(
arrays
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
DeleteVertexArraysOES_1_0
(
PP_Resource
context
GLsizei
n
const
GLuint
*
arrays
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2VertexArrayObject
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DeleteVertexArraysOES
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
n
"
ToString_GLsizei
(
n
)
)
;
AddProp
(
ss
"
arrays
"
ToString_GLuint_ptr_t
(
arrays
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2VertexArrayObject_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2VertexArrayObject
;
1
.
0
"
)
)
-
>
DeleteVertexArraysOES
(
context
n
arrays
)
;
#
endif
}
static
GLboolean
IsVertexArrayOES_1_0
(
PP_Resource
context
GLuint
array
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2VertexArrayObject
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVertexArrayOES
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
array
"
ToString_GLuint
(
array
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
GLboolean
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_GLboolean
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
GLboolean
rval
=
(
(
PPB_OpenGLES2VertexArrayObject_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2VertexArrayObject
;
1
.
0
"
)
)
-
>
IsVertexArrayOES
(
context
array
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_GLboolean
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
BindVertexArrayOES_1_0
(
PP_Resource
context
GLuint
array
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2VertexArrayObject
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
BindVertexArrayOES
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
array
"
ToString_GLuint
(
array
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2VertexArrayObject_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2VertexArrayObject
;
1
.
0
"
)
)
-
>
BindVertexArrayOES
(
context
array
)
;
#
endif
}
}
static
PPB_OpenGLES2VertexArrayObject_1_0
_PPB_OpenGLES2VertexArrayObject_1_0
=
{
ns_PPB_OpenGLES2VertexArrayObject_1_0
:
:
GenVertexArraysOES_1_0
ns_PPB_OpenGLES2VertexArrayObject_1_0
:
:
DeleteVertexArraysOES_1_0
ns_PPB_OpenGLES2VertexArrayObject_1_0
:
:
IsVertexArrayOES_1_0
ns_PPB_OpenGLES2VertexArrayObject_1_0
:
:
BindVertexArrayOES_1_0
}
;
const
string
ToString_PPB_OpenGLES2VertexArrayObject
(
const
PPB_OpenGLES2VertexArrayObject_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_TCPSocket_Option
(
const
PP_TCPSocket_Option
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_TCPSOCKET_OPTION_NO_DELAY
\
"
"
;
case
1
:
return
"
\
"
PP_TCPSOCKET_OPTION_SEND_BUFFER_SIZE
\
"
"
;
case
2
:
return
"
\
"
PP_TCPSOCKET_OPTION_RECV_BUFFER_SIZE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_TCPSocket_Option
(
const
PP_TCPSocket_Option
&
v
)
{
return
ToString_PP_TCPSocket_Option
(
&
v
)
;
}
void
FromJSON_PP_TCPSocket_Option
(
JSONIterator
&
iterator
PP_TCPSocket_Option
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_TCPSocket_Option
(
v
)
;
}
namespace
ns_PPB_TCPSocket_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_0
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsTCPSocket_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsTCPSocket
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_1_0
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
0
"
)
)
-
>
IsTCPSocket
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Connect_1_0
(
PP_Resource
tcp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Connect
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_0
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
0
"
)
)
-
>
Connect
(
tcp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetLocalAddress_1_0
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLocalAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_0
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
0
"
)
)
-
>
GetLocalAddress
(
tcp_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetRemoteAddress_1_0
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRemoteAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_0
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
0
"
)
)
-
>
GetRemoteAddress
(
tcp_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Read_1_0
(
PP_Resource
tcp_socket
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Read
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_read
"
ToString_int32_t
(
bytes_to_read
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_0
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
0
"
)
)
-
>
Read
(
tcp_socket
buffer
bytes_to_read
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Write_1_0
(
PP_Resource
tcp_socket
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Write
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_write
"
ToString_int32_t
(
bytes_to_write
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_0
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
0
"
)
)
-
>
Write
(
tcp_socket
buffer
bytes_to_write
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_1_0
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TCPSocket_1_0
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
0
"
)
)
-
>
Close
(
tcp_socket
)
;
#
endif
}
static
int32_t
SetOption_1_0
(
PP_Resource
tcp_socket
PP_TCPSocket_Option
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetOption
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_TCPSocket_Option
(
name
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_0
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
0
"
)
)
-
>
SetOption
(
tcp_socket
name
value
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_TCPSocket_1_0
_PPB_TCPSocket_1_0
=
{
ns_PPB_TCPSocket_1_0
:
:
Create_1_0
ns_PPB_TCPSocket_1_0
:
:
IsTCPSocket_1_0
ns_PPB_TCPSocket_1_0
:
:
Connect_1_0
ns_PPB_TCPSocket_1_0
:
:
GetLocalAddress_1_0
ns_PPB_TCPSocket_1_0
:
:
GetRemoteAddress_1_0
ns_PPB_TCPSocket_1_0
:
:
Read_1_0
ns_PPB_TCPSocket_1_0
:
:
Write_1_0
ns_PPB_TCPSocket_1_0
:
:
Close_1_0
ns_PPB_TCPSocket_1_0
:
:
SetOption_1_0
}
;
const
string
ToString_PPB_TCPSocket
(
const
PPB_TCPSocket_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_TCPSocket_1_1
{
static
PP_Resource
Create_1_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_1
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsTCPSocket_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsTCPSocket
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_1_1
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
1
"
)
)
-
>
IsTCPSocket
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Bind_1_1
(
PP_Resource
tcp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Bind
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_1
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
1
"
)
)
-
>
Bind
(
tcp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Connect_1_1
(
PP_Resource
tcp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Connect
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_1
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
1
"
)
)
-
>
Connect
(
tcp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetLocalAddress_1_1
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLocalAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_1
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
1
"
)
)
-
>
GetLocalAddress
(
tcp_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetRemoteAddress_1_1
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRemoteAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_1
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
1
"
)
)
-
>
GetRemoteAddress
(
tcp_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Read_1_1
(
PP_Resource
tcp_socket
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Read
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_read
"
ToString_int32_t
(
bytes_to_read
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_1
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
1
"
)
)
-
>
Read
(
tcp_socket
buffer
bytes_to_read
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Write_1_1
(
PP_Resource
tcp_socket
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Write
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_write
"
ToString_int32_t
(
bytes_to_write
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_1
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
1
"
)
)
-
>
Write
(
tcp_socket
buffer
bytes_to_write
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Listen_1_1
(
PP_Resource
tcp_socket
int32_t
backlog
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Listen
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
backlog
"
ToString_int32_t
(
backlog
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_1
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
1
"
)
)
-
>
Listen
(
tcp_socket
backlog
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Accept_1_1
(
PP_Resource
tcp_socket
PP_Resource
*
accepted_tcp_socket
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Accept
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
accepted_tcp_socket
"
PointerToString
(
accepted_tcp_socket
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
accepted_tcp_socket
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_1
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
1
"
)
)
-
>
Accept
(
tcp_socket
accepted_tcp_socket
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
accepted_tcp_socket
)
{
AddProp
(
os
"
accepted_tcp_socket
"
ToString_PP_Resource
(
accepted_tcp_socket
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_1_1
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TCPSocket_1_1
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
1
"
)
)
-
>
Close
(
tcp_socket
)
;
#
endif
}
static
int32_t
SetOption_1_1
(
PP_Resource
tcp_socket
PP_TCPSocket_Option
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetOption
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_TCPSocket_Option
(
name
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_1
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
1
"
)
)
-
>
SetOption
(
tcp_socket
name
value
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_TCPSocket_1_1
_PPB_TCPSocket_1_1
=
{
ns_PPB_TCPSocket_1_1
:
:
Create_1_1
ns_PPB_TCPSocket_1_1
:
:
IsTCPSocket_1_1
ns_PPB_TCPSocket_1_1
:
:
Bind_1_1
ns_PPB_TCPSocket_1_1
:
:
Connect_1_1
ns_PPB_TCPSocket_1_1
:
:
GetLocalAddress_1_1
ns_PPB_TCPSocket_1_1
:
:
GetRemoteAddress_1_1
ns_PPB_TCPSocket_1_1
:
:
Read_1_1
ns_PPB_TCPSocket_1_1
:
:
Write_1_1
ns_PPB_TCPSocket_1_1
:
:
Listen_1_1
ns_PPB_TCPSocket_1_1
:
:
Accept_1_1
ns_PPB_TCPSocket_1_1
:
:
Close_1_1
ns_PPB_TCPSocket_1_1
:
:
SetOption_1_1
}
;
const
string
ToString_PPB_TCPSocket
(
const
PPB_TCPSocket_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_TCPSocket_1_2
{
static
PP_Resource
Create_1_2
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_2
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
2
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsTCPSocket_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsTCPSocket
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_1_2
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
2
"
)
)
-
>
IsTCPSocket
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Bind_1_2
(
PP_Resource
tcp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Bind
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_2
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
2
"
)
)
-
>
Bind
(
tcp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Connect_1_2
(
PP_Resource
tcp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Connect
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_2
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
2
"
)
)
-
>
Connect
(
tcp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetLocalAddress_1_2
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLocalAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_2
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
2
"
)
)
-
>
GetLocalAddress
(
tcp_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetRemoteAddress_1_2
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRemoteAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_2
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
2
"
)
)
-
>
GetRemoteAddress
(
tcp_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Read_1_2
(
PP_Resource
tcp_socket
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Read
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_read
"
ToString_int32_t
(
bytes_to_read
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_2
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
2
"
)
)
-
>
Read
(
tcp_socket
buffer
bytes_to_read
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Write_1_2
(
PP_Resource
tcp_socket
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Write
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_write
"
ToString_int32_t
(
bytes_to_write
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_2
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
2
"
)
)
-
>
Write
(
tcp_socket
buffer
bytes_to_write
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Listen_1_2
(
PP_Resource
tcp_socket
int32_t
backlog
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Listen
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
backlog
"
ToString_int32_t
(
backlog
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_2
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
2
"
)
)
-
>
Listen
(
tcp_socket
backlog
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Accept_1_2
(
PP_Resource
tcp_socket
PP_Resource
*
accepted_tcp_socket
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Accept
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
accepted_tcp_socket
"
PointerToString
(
accepted_tcp_socket
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
accepted_tcp_socket
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_2
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
2
"
)
)
-
>
Accept
(
tcp_socket
accepted_tcp_socket
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
accepted_tcp_socket
)
{
AddProp
(
os
"
accepted_tcp_socket
"
ToString_PP_Resource
(
accepted_tcp_socket
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_1_2
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TCPSocket_1_2
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
2
"
)
)
-
>
Close
(
tcp_socket
)
;
#
endif
}
static
int32_t
SetOption_1_2
(
PP_Resource
tcp_socket
PP_TCPSocket_Option
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetOption
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_TCPSocket_Option
(
name
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_1_2
*
)
RealGetInterface
(
"
PPB_TCPSocket
;
1
.
2
"
)
)
-
>
SetOption
(
tcp_socket
name
value
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_TCPSocket_1_2
_PPB_TCPSocket_1_2
=
{
ns_PPB_TCPSocket_1_2
:
:
Create_1_2
ns_PPB_TCPSocket_1_2
:
:
IsTCPSocket_1_2
ns_PPB_TCPSocket_1_2
:
:
Bind_1_2
ns_PPB_TCPSocket_1_2
:
:
Connect_1_2
ns_PPB_TCPSocket_1_2
:
:
GetLocalAddress_1_2
ns_PPB_TCPSocket_1_2
:
:
GetRemoteAddress_1_2
ns_PPB_TCPSocket_1_2
:
:
Read_1_2
ns_PPB_TCPSocket_1_2
:
:
Write_1_2
ns_PPB_TCPSocket_1_2
:
:
Listen_1_2
ns_PPB_TCPSocket_1_2
:
:
Accept_1_2
ns_PPB_TCPSocket_1_2
:
:
Close_1_2
ns_PPB_TCPSocket_1_2
:
:
SetOption_1_2
}
;
const
string
ToString_PPB_TCPSocket
(
const
PPB_TCPSocket_1_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_TextInput_Type
(
const
PP_TextInput_Type
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_TEXTINPUT_TYPE_NONE
\
"
"
;
case
1
:
return
"
\
"
PP_TEXTINPUT_TYPE_TEXT
\
"
"
;
case
2
:
return
"
\
"
PP_TEXTINPUT_TYPE_PASSWORD
\
"
"
;
case
3
:
return
"
\
"
PP_TEXTINPUT_TYPE_SEARCH
\
"
"
;
case
4
:
return
"
\
"
PP_TEXTINPUT_TYPE_EMAIL
\
"
"
;
case
5
:
return
"
\
"
PP_TEXTINPUT_TYPE_NUMBER
\
"
"
;
case
6
:
return
"
\
"
PP_TEXTINPUT_TYPE_TELEPHONE
\
"
"
;
case
7
:
return
"
\
"
PP_TEXTINPUT_TYPE_URL
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_TextInput_Type
(
const
PP_TextInput_Type
&
v
)
{
return
ToString_PP_TextInput_Type
(
&
v
)
;
}
void
FromJSON_PP_TextInput_Type
(
JSONIterator
&
iterator
PP_TextInput_Type
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_TextInput_Type
(
v
)
;
}
namespace
ns_PPB_TextInputController_1_0
{
static
void
SetTextInputType_1_0
(
PP_Instance
instance
PP_TextInput_Type
type
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TextInputController
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetTextInputType
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_TextInput_Type
(
type
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TextInputController_1_0
*
)
RealGetInterface
(
"
PPB_TextInputController
;
1
.
0
"
)
)
-
>
SetTextInputType
(
instance
type
)
;
#
endif
}
static
void
UpdateCaretPosition_1_0
(
PP_Instance
instance
const
struct
PP_Rect
*
caret
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TextInputController
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UpdateCaretPosition
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
caret
"
ToString_PP_Rect
(
caret
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TextInputController_1_0
*
)
RealGetInterface
(
"
PPB_TextInputController
;
1
.
0
"
)
)
-
>
UpdateCaretPosition
(
instance
caret
)
;
#
endif
}
static
void
CancelCompositionText_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TextInputController
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CancelCompositionText
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TextInputController_1_0
*
)
RealGetInterface
(
"
PPB_TextInputController
;
1
.
0
"
)
)
-
>
CancelCompositionText
(
instance
)
;
#
endif
}
static
void
UpdateSurroundingText_1_0
(
PP_Instance
instance
struct
PP_Var
text
uint32_t
caret
uint32_t
anchor
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TextInputController
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UpdateSurroundingText
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
text
"
ToString_PP_Var
(
text
)
)
;
AddProp
(
ss
"
caret
"
ToString_uint32_t
(
caret
)
)
;
AddProp
(
ss
"
anchor
"
ToString_uint32_t
(
anchor
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TextInputController_1_0
*
)
RealGetInterface
(
"
PPB_TextInputController
;
1
.
0
"
)
)
-
>
UpdateSurroundingText
(
instance
text
caret
anchor
)
;
#
endif
}
}
static
PPB_TextInputController_1_0
_PPB_TextInputController_1_0
=
{
ns_PPB_TextInputController_1_0
:
:
SetTextInputType_1_0
ns_PPB_TextInputController_1_0
:
:
UpdateCaretPosition_1_0
ns_PPB_TextInputController_1_0
:
:
CancelCompositionText_1_0
ns_PPB_TextInputController_1_0
:
:
UpdateSurroundingText_1_0
}
;
const
string
ToString_PPB_TextInputController
(
const
PPB_TextInputController_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_UDPSocket_Option
(
const
PP_UDPSocket_Option
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_UDPSOCKET_OPTION_ADDRESS_REUSE
\
"
"
;
case
1
:
return
"
\
"
PP_UDPSOCKET_OPTION_BROADCAST
\
"
"
;
case
2
:
return
"
\
"
PP_UDPSOCKET_OPTION_SEND_BUFFER_SIZE
\
"
"
;
case
3
:
return
"
\
"
PP_UDPSOCKET_OPTION_RECV_BUFFER_SIZE
\
"
"
;
case
4
:
return
"
\
"
PP_UDPSOCKET_OPTION_MULTICAST_LOOP
\
"
"
;
case
5
:
return
"
\
"
PP_UDPSOCKET_OPTION_MULTICAST_TTL
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_UDPSocket_Option
(
const
PP_UDPSocket_Option
&
v
)
{
return
ToString_PP_UDPSocket_Option
(
&
v
)
;
}
void
FromJSON_PP_UDPSocket_Option
(
JSONIterator
&
iterator
PP_UDPSocket_Option
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_UDPSocket_Option
(
v
)
;
}
namespace
ns_PPB_UDPSocket_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_0
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsUDPSocket_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsUDPSocket
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_UDPSocket_1_0
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
0
"
)
)
-
>
IsUDPSocket
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Bind_1_0
(
PP_Resource
udp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Bind
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_0
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
0
"
)
)
-
>
Bind
(
udp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetBoundAddress_1_0
(
PP_Resource
udp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBoundAddress
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_0
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
0
"
)
)
-
>
GetBoundAddress
(
udp_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
RecvFrom_1_0
(
PP_Resource
udp_socket
char
*
buffer
int32_t
num_bytes
PP_Resource
*
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecvFrom
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_int32_t
(
num_bytes
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
addr
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_0
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
0
"
)
)
-
>
RecvFrom
(
udp_socket
buffer
num_bytes
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SendTo_1_0
(
PP_Resource
udp_socket
const
char
*
buffer
int32_t
num_bytes
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SendTo
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_int32_t
(
num_bytes
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_0
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
0
"
)
)
-
>
SendTo
(
udp_socket
buffer
num_bytes
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_1_0
(
PP_Resource
udp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_UDPSocket_1_0
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
0
"
)
)
-
>
Close
(
udp_socket
)
;
#
endif
}
static
int32_t
SetOption_1_0
(
PP_Resource
udp_socket
PP_UDPSocket_Option
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetOption
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_UDPSocket_Option
(
name
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_0
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
0
"
)
)
-
>
SetOption
(
udp_socket
name
value
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_UDPSocket_1_0
_PPB_UDPSocket_1_0
=
{
ns_PPB_UDPSocket_1_0
:
:
Create_1_0
ns_PPB_UDPSocket_1_0
:
:
IsUDPSocket_1_0
ns_PPB_UDPSocket_1_0
:
:
Bind_1_0
ns_PPB_UDPSocket_1_0
:
:
GetBoundAddress_1_0
ns_PPB_UDPSocket_1_0
:
:
RecvFrom_1_0
ns_PPB_UDPSocket_1_0
:
:
SendTo_1_0
ns_PPB_UDPSocket_1_0
:
:
Close_1_0
ns_PPB_UDPSocket_1_0
:
:
SetOption_1_0
}
;
const
string
ToString_PPB_UDPSocket
(
const
PPB_UDPSocket_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_UDPSocket_1_1
{
static
PP_Resource
Create_1_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_1
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsUDPSocket_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsUDPSocket
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_UDPSocket_1_1
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
1
"
)
)
-
>
IsUDPSocket
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Bind_1_1
(
PP_Resource
udp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Bind
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_1
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
1
"
)
)
-
>
Bind
(
udp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetBoundAddress_1_1
(
PP_Resource
udp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBoundAddress
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_1
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
1
"
)
)
-
>
GetBoundAddress
(
udp_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
RecvFrom_1_1
(
PP_Resource
udp_socket
char
*
buffer
int32_t
num_bytes
PP_Resource
*
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecvFrom
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_int32_t
(
num_bytes
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
addr
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_1
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
1
"
)
)
-
>
RecvFrom
(
udp_socket
buffer
num_bytes
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SendTo_1_1
(
PP_Resource
udp_socket
const
char
*
buffer
int32_t
num_bytes
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SendTo
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_int32_t
(
num_bytes
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_1
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
1
"
)
)
-
>
SendTo
(
udp_socket
buffer
num_bytes
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_1_1
(
PP_Resource
udp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_UDPSocket_1_1
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
1
"
)
)
-
>
Close
(
udp_socket
)
;
#
endif
}
static
int32_t
SetOption_1_1
(
PP_Resource
udp_socket
PP_UDPSocket_Option
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetOption
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_UDPSocket_Option
(
name
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_1
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
1
"
)
)
-
>
SetOption
(
udp_socket
name
value
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_UDPSocket_1_1
_PPB_UDPSocket_1_1
=
{
ns_PPB_UDPSocket_1_1
:
:
Create_1_1
ns_PPB_UDPSocket_1_1
:
:
IsUDPSocket_1_1
ns_PPB_UDPSocket_1_1
:
:
Bind_1_1
ns_PPB_UDPSocket_1_1
:
:
GetBoundAddress_1_1
ns_PPB_UDPSocket_1_1
:
:
RecvFrom_1_1
ns_PPB_UDPSocket_1_1
:
:
SendTo_1_1
ns_PPB_UDPSocket_1_1
:
:
Close_1_1
ns_PPB_UDPSocket_1_1
:
:
SetOption_1_1
}
;
const
string
ToString_PPB_UDPSocket
(
const
PPB_UDPSocket_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_UDPSocket_1_2
{
static
PP_Resource
Create_1_2
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_2
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
2
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsUDPSocket_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsUDPSocket
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_UDPSocket_1_2
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
2
"
)
)
-
>
IsUDPSocket
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Bind_1_2
(
PP_Resource
udp_socket
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Bind
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_2
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
2
"
)
)
-
>
Bind
(
udp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetBoundAddress_1_2
(
PP_Resource
udp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBoundAddress
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_2
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
2
"
)
)
-
>
GetBoundAddress
(
udp_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
RecvFrom_1_2
(
PP_Resource
udp_socket
char
*
buffer
int32_t
num_bytes
PP_Resource
*
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecvFrom
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_int32_t
(
num_bytes
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
addr
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_2
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
2
"
)
)
-
>
RecvFrom
(
udp_socket
buffer
num_bytes
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SendTo_1_2
(
PP_Resource
udp_socket
const
char
*
buffer
int32_t
num_bytes
PP_Resource
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SendTo
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_int32_t
(
num_bytes
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_Resource
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_2
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
2
"
)
)
-
>
SendTo
(
udp_socket
buffer
num_bytes
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_1_2
(
PP_Resource
udp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_UDPSocket_1_2
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
2
"
)
)
-
>
Close
(
udp_socket
)
;
#
endif
}
static
int32_t
SetOption_1_2
(
PP_Resource
udp_socket
PP_UDPSocket_Option
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetOption
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_UDPSocket_Option
(
name
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_2
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
2
"
)
)
-
>
SetOption
(
udp_socket
name
value
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
JoinGroup_1_2
(
PP_Resource
udp_socket
PP_Resource
group
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
JoinGroup
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
group
"
ToString_PP_Resource
(
group
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_2
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
2
"
)
)
-
>
JoinGroup
(
udp_socket
group
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
LeaveGroup_1_2
(
PP_Resource
udp_socket
PP_Resource
group
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
LeaveGroup
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
group
"
ToString_PP_Resource
(
group
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_1_2
*
)
RealGetInterface
(
"
PPB_UDPSocket
;
1
.
2
"
)
)
-
>
LeaveGroup
(
udp_socket
group
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_UDPSocket_1_2
_PPB_UDPSocket_1_2
=
{
ns_PPB_UDPSocket_1_2
:
:
Create_1_2
ns_PPB_UDPSocket_1_2
:
:
IsUDPSocket_1_2
ns_PPB_UDPSocket_1_2
:
:
Bind_1_2
ns_PPB_UDPSocket_1_2
:
:
GetBoundAddress_1_2
ns_PPB_UDPSocket_1_2
:
:
RecvFrom_1_2
ns_PPB_UDPSocket_1_2
:
:
SendTo_1_2
ns_PPB_UDPSocket_1_2
:
:
Close_1_2
ns_PPB_UDPSocket_1_2
:
:
SetOption_1_2
ns_PPB_UDPSocket_1_2
:
:
JoinGroup_1_2
ns_PPB_UDPSocket_1_2
:
:
LeaveGroup_1_2
}
;
const
string
ToString_PPB_UDPSocket
(
const
PPB_UDPSocket_1_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_URLLoader_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLLoader
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_URLLoader_1_0
*
)
RealGetInterface
(
"
PPB_URLLoader
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsURLLoader_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLLoader
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsURLLoader
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLLoader_1_0
*
)
RealGetInterface
(
"
PPB_URLLoader
;
1
.
0
"
)
)
-
>
IsURLLoader
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Open_1_0
(
PP_Resource
loader
PP_Resource
request_info
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLLoader
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Open
\
"
"
)
;
AddProp
(
ss
"
loader
"
ToString_PP_Resource
(
loader
)
)
;
AddProp
(
ss
"
request_info
"
ToString_PP_Resource
(
request_info
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_URLLoader_1_0
*
)
RealGetInterface
(
"
PPB_URLLoader
;
1
.
0
"
)
)
-
>
Open
(
loader
request_info
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
FollowRedirect_1_0
(
PP_Resource
loader
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLLoader
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
FollowRedirect
\
"
"
)
;
AddProp
(
ss
"
loader
"
ToString_PP_Resource
(
loader
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_URLLoader_1_0
*
)
RealGetInterface
(
"
PPB_URLLoader
;
1
.
0
"
)
)
-
>
FollowRedirect
(
loader
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetUploadProgress_1_0
(
PP_Resource
loader
int64_t
*
bytes_sent
int64_t
*
total_bytes_to_be_sent
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLLoader
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetUploadProgress
\
"
"
)
;
AddProp
(
ss
"
loader
"
ToString_PP_Resource
(
loader
)
)
;
AddProp
(
ss
"
bytes_sent
"
PointerToString
(
bytes_sent
)
)
;
AddProp
(
ss
"
total_bytes_to_be_sent
"
PointerToString
(
total_bytes_to_be_sent
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_int64_t
(
iterator
*
bytes_sent
)
;
iterator
.
skip
(
)
;
FromJSON_int64_t
(
iterator
*
total_bytes_to_be_sent
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLLoader_1_0
*
)
RealGetInterface
(
"
PPB_URLLoader
;
1
.
0
"
)
)
-
>
GetUploadProgress
(
loader
bytes_sent
total_bytes_to_be_sent
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
bytes_sent
)
{
AddProp
(
os
"
bytes_sent
"
ToString_int64_t
(
bytes_sent
)
)
;
}
if
(
!
!
total_bytes_to_be_sent
)
{
AddProp
(
os
"
total_bytes_to_be_sent
"
ToString_int64_t
(
total_bytes_to_be_sent
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetDownloadProgress_1_0
(
PP_Resource
loader
int64_t
*
bytes_received
int64_t
*
total_bytes_to_be_received
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLLoader
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDownloadProgress
\
"
"
)
;
AddProp
(
ss
"
loader
"
ToString_PP_Resource
(
loader
)
)
;
AddProp
(
ss
"
bytes_received
"
PointerToString
(
bytes_received
)
)
;
AddProp
(
ss
"
total_bytes_to_be_received
"
PointerToString
(
total_bytes_to_be_received
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_int64_t
(
iterator
*
bytes_received
)
;
iterator
.
skip
(
)
;
FromJSON_int64_t
(
iterator
*
total_bytes_to_be_received
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLLoader_1_0
*
)
RealGetInterface
(
"
PPB_URLLoader
;
1
.
0
"
)
)
-
>
GetDownloadProgress
(
loader
bytes_received
total_bytes_to_be_received
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
bytes_received
)
{
AddProp
(
os
"
bytes_received
"
ToString_int64_t
(
bytes_received
)
)
;
}
if
(
!
!
total_bytes_to_be_received
)
{
AddProp
(
os
"
total_bytes_to_be_received
"
ToString_int64_t
(
total_bytes_to_be_received
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetResponseInfo_1_0
(
PP_Resource
loader
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLLoader
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetResponseInfo
\
"
"
)
;
AddProp
(
ss
"
loader
"
ToString_PP_Resource
(
loader
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_URLLoader_1_0
*
)
RealGetInterface
(
"
PPB_URLLoader
;
1
.
0
"
)
)
-
>
GetResponseInfo
(
loader
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
ReadResponseBody_1_0
(
PP_Resource
loader
void
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLLoader
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReadResponseBody
\
"
"
)
;
AddProp
(
ss
"
loader
"
ToString_PP_Resource
(
loader
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_read
"
ToString_int32_t
(
bytes_to_read
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_URLLoader_1_0
*
)
RealGetInterface
(
"
PPB_URLLoader
;
1
.
0
"
)
)
-
>
ReadResponseBody
(
loader
buffer
bytes_to_read
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_mem_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
FinishStreamingToFile_1_0
(
PP_Resource
loader
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLLoader
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
FinishStreamingToFile
\
"
"
)
;
AddProp
(
ss
"
loader
"
ToString_PP_Resource
(
loader
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_URLLoader_1_0
*
)
RealGetInterface
(
"
PPB_URLLoader
;
1
.
0
"
)
)
-
>
FinishStreamingToFile
(
loader
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_1_0
(
PP_Resource
loader
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLLoader
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
loader
"
ToString_PP_Resource
(
loader
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_URLLoader_1_0
*
)
RealGetInterface
(
"
PPB_URLLoader
;
1
.
0
"
)
)
-
>
Close
(
loader
)
;
#
endif
}
}
static
PPB_URLLoader_1_0
_PPB_URLLoader_1_0
=
{
ns_PPB_URLLoader_1_0
:
:
Create_1_0
ns_PPB_URLLoader_1_0
:
:
IsURLLoader_1_0
ns_PPB_URLLoader_1_0
:
:
Open_1_0
ns_PPB_URLLoader_1_0
:
:
FollowRedirect_1_0
ns_PPB_URLLoader_1_0
:
:
GetUploadProgress_1_0
ns_PPB_URLLoader_1_0
:
:
GetDownloadProgress_1_0
ns_PPB_URLLoader_1_0
:
:
GetResponseInfo_1_0
ns_PPB_URLLoader_1_0
:
:
ReadResponseBody_1_0
ns_PPB_URLLoader_1_0
:
:
FinishStreamingToFile_1_0
ns_PPB_URLLoader_1_0
:
:
Close_1_0
}
;
const
string
ToString_PPB_URLLoader
(
const
PPB_URLLoader_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_URLRequestProperty
(
const
PP_URLRequestProperty
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_URLREQUESTPROPERTY_URL
\
"
"
;
case
1
:
return
"
\
"
PP_URLREQUESTPROPERTY_METHOD
\
"
"
;
case
2
:
return
"
\
"
PP_URLREQUESTPROPERTY_HEADERS
\
"
"
;
case
3
:
return
"
\
"
PP_URLREQUESTPROPERTY_STREAMTOFILE
\
"
"
;
case
4
:
return
"
\
"
PP_URLREQUESTPROPERTY_FOLLOWREDIRECTS
\
"
"
;
case
5
:
return
"
\
"
PP_URLREQUESTPROPERTY_RECORDDOWNLOADPROGRESS
\
"
"
;
case
6
:
return
"
\
"
PP_URLREQUESTPROPERTY_RECORDUPLOADPROGRESS
\
"
"
;
case
7
:
return
"
\
"
PP_URLREQUESTPROPERTY_CUSTOMREFERRERURL
\
"
"
;
case
8
:
return
"
\
"
PP_URLREQUESTPROPERTY_ALLOWCROSSORIGINREQUESTS
\
"
"
;
case
9
:
return
"
\
"
PP_URLREQUESTPROPERTY_ALLOWCREDENTIALS
\
"
"
;
case
10
:
return
"
\
"
PP_URLREQUESTPROPERTY_CUSTOMCONTENTTRANSFERENCODING
\
"
"
;
case
11
:
return
"
\
"
PP_URLREQUESTPROPERTY_PREFETCHBUFFERUPPERTHRESHOLD
\
"
"
;
case
12
:
return
"
\
"
PP_URLREQUESTPROPERTY_PREFETCHBUFFERLOWERTHRESHOLD
\
"
"
;
case
13
:
return
"
\
"
PP_URLREQUESTPROPERTY_CUSTOMUSERAGENT
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_URLRequestProperty
(
const
PP_URLRequestProperty
&
v
)
{
return
ToString_PP_URLRequestProperty
(
&
v
)
;
}
void
FromJSON_PP_URLRequestProperty
(
JSONIterator
&
iterator
PP_URLRequestProperty
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_URLRequestProperty
(
v
)
;
}
namespace
ns_PPB_URLRequestInfo_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLRequestInfo
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_URLRequestInfo_1_0
*
)
RealGetInterface
(
"
PPB_URLRequestInfo
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsURLRequestInfo_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLRequestInfo
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsURLRequestInfo
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLRequestInfo_1_0
*
)
RealGetInterface
(
"
PPB_URLRequestInfo
;
1
.
0
"
)
)
-
>
IsURLRequestInfo
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
SetProperty_1_0
(
PP_Resource
request
PP_URLRequestProperty
property
struct
PP_Var
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLRequestInfo
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetProperty
\
"
"
)
;
AddProp
(
ss
"
request
"
ToString_PP_Resource
(
request
)
)
;
AddProp
(
ss
"
property
"
ToString_PP_URLRequestProperty
(
property
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLRequestInfo_1_0
*
)
RealGetInterface
(
"
PPB_URLRequestInfo
;
1
.
0
"
)
)
-
>
SetProperty
(
request
property
value
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
AppendDataToBody_1_0
(
PP_Resource
request
const
void
*
data
uint32_t
len
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLRequestInfo
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AppendDataToBody
\
"
"
)
;
AddProp
(
ss
"
request
"
ToString_PP_Resource
(
request
)
)
;
AddProp
(
ss
"
data
"
ToString_mem_t
(
data
)
)
;
AddProp
(
ss
"
len
"
ToString_uint32_t
(
len
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLRequestInfo_1_0
*
)
RealGetInterface
(
"
PPB_URLRequestInfo
;
1
.
0
"
)
)
-
>
AppendDataToBody
(
request
data
len
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
AppendFileToBody_1_0
(
PP_Resource
request
PP_Resource
file_ref
int64_t
start_offset
int64_t
number_of_bytes
PP_Time
expected_last_modified_time
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLRequestInfo
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AppendFileToBody
\
"
"
)
;
AddProp
(
ss
"
request
"
ToString_PP_Resource
(
request
)
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
AddProp
(
ss
"
start_offset
"
ToString_int64_t
(
start_offset
)
)
;
AddProp
(
ss
"
number_of_bytes
"
ToString_int64_t
(
number_of_bytes
)
)
;
AddProp
(
ss
"
expected_last_modified_time
"
ToString_PP_Time
(
expected_last_modified_time
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLRequestInfo_1_0
*
)
RealGetInterface
(
"
PPB_URLRequestInfo
;
1
.
0
"
)
)
-
>
AppendFileToBody
(
request
file_ref
start_offset
number_of_bytes
expected_last_modified_time
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_URLRequestInfo_1_0
_PPB_URLRequestInfo_1_0
=
{
ns_PPB_URLRequestInfo_1_0
:
:
Create_1_0
ns_PPB_URLRequestInfo_1_0
:
:
IsURLRequestInfo_1_0
ns_PPB_URLRequestInfo_1_0
:
:
SetProperty_1_0
ns_PPB_URLRequestInfo_1_0
:
:
AppendDataToBody_1_0
ns_PPB_URLRequestInfo_1_0
:
:
AppendFileToBody_1_0
}
;
const
string
ToString_PPB_URLRequestInfo
(
const
PPB_URLRequestInfo_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_URLResponseProperty
(
const
PP_URLResponseProperty
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_URLRESPONSEPROPERTY_URL
\
"
"
;
case
1
:
return
"
\
"
PP_URLRESPONSEPROPERTY_REDIRECTURL
\
"
"
;
case
2
:
return
"
\
"
PP_URLRESPONSEPROPERTY_REDIRECTMETHOD
\
"
"
;
case
3
:
return
"
\
"
PP_URLRESPONSEPROPERTY_STATUSCODE
\
"
"
;
case
4
:
return
"
\
"
PP_URLRESPONSEPROPERTY_STATUSLINE
\
"
"
;
case
5
:
return
"
\
"
PP_URLRESPONSEPROPERTY_HEADERS
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_URLResponseProperty
(
const
PP_URLResponseProperty
&
v
)
{
return
ToString_PP_URLResponseProperty
(
&
v
)
;
}
void
FromJSON_PP_URLResponseProperty
(
JSONIterator
&
iterator
PP_URLResponseProperty
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_URLResponseProperty
(
v
)
;
}
namespace
ns_PPB_URLResponseInfo_1_0
{
static
PP_Bool
IsURLResponseInfo_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLResponseInfo
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsURLResponseInfo
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLResponseInfo_1_0
*
)
RealGetInterface
(
"
PPB_URLResponseInfo
;
1
.
0
"
)
)
-
>
IsURLResponseInfo
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetProperty_1_0
(
PP_Resource
response
PP_URLResponseProperty
property
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLResponseInfo
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetProperty
\
"
"
)
;
AddProp
(
ss
"
response
"
ToString_PP_Resource
(
response
)
)
;
AddProp
(
ss
"
property
"
ToString_PP_URLResponseProperty
(
property
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_URLResponseInfo_1_0
*
)
RealGetInterface
(
"
PPB_URLResponseInfo
;
1
.
0
"
)
)
-
>
GetProperty
(
response
property
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetBodyAsFileRef_1_0
(
PP_Resource
response
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLResponseInfo
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBodyAsFileRef
\
"
"
)
;
AddProp
(
ss
"
response
"
ToString_PP_Resource
(
response
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_URLResponseInfo_1_0
*
)
RealGetInterface
(
"
PPB_URLResponseInfo
;
1
.
0
"
)
)
-
>
GetBodyAsFileRef
(
response
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_URLResponseInfo_1_0
_PPB_URLResponseInfo_1_0
=
{
ns_PPB_URLResponseInfo_1_0
:
:
IsURLResponseInfo_1_0
ns_PPB_URLResponseInfo_1_0
:
:
GetProperty_1_0
ns_PPB_URLResponseInfo_1_0
:
:
GetBodyAsFileRef_1_0
}
;
const
string
ToString_PPB_URLResponseInfo
(
const
PPB_URLResponseInfo_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Var_1_0
{
static
void
AddRef_1_0
(
struct
PP_Var
var
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AddRef
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Var_1_0
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
0
"
)
)
-
>
AddRef
(
var
)
;
#
endif
}
static
void
Release_1_0
(
struct
PP_Var
var
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Release
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Var_1_0
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
0
"
)
)
-
>
Release
(
var
)
;
#
endif
}
static
struct
PP_Var
VarFromUtf8_1_0
(
PP_Module
module
const
char
*
data
uint32_t
len
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VarFromUtf8
\
"
"
)
;
AddProp
(
ss
"
module
"
ToString_PP_Module
(
module
)
)
;
AddProp
(
ss
"
data
"
ToString_str_t
(
data
)
)
;
AddProp
(
ss
"
len
"
ToString_uint32_t
(
len
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Var_1_0
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
0
"
)
)
-
>
VarFromUtf8
(
module
data
len
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
const
char
*
VarToUtf8_1_0
(
struct
PP_Var
var
uint32_t
*
len
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VarToUtf8
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
AddProp
(
ss
"
len
"
PointerToString
(
len
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
char
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_str_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
len
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
const
char
*
rval
=
(
(
PPB_Var_1_0
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
0
"
)
)
-
>
VarToUtf8
(
var
len
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_str_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
len
)
{
AddProp
(
os
"
len
"
ToString_uint32_t
(
len
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Var_1_0
_PPB_Var_1_0
=
{
ns_PPB_Var_1_0
:
:
AddRef_1_0
ns_PPB_Var_1_0
:
:
Release_1_0
ns_PPB_Var_1_0
:
:
VarFromUtf8_1_0
ns_PPB_Var_1_0
:
:
VarToUtf8_1_0
}
;
const
string
ToString_PPB_Var
(
const
PPB_Var_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Var_1_1
{
static
void
AddRef_1_1
(
struct
PP_Var
var
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AddRef
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Var_1_1
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
1
"
)
)
-
>
AddRef
(
var
)
;
#
endif
}
static
void
Release_1_1
(
struct
PP_Var
var
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Release
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Var_1_1
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
1
"
)
)
-
>
Release
(
var
)
;
#
endif
}
static
struct
PP_Var
VarFromUtf8_1_1
(
const
char
*
data
uint32_t
len
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VarFromUtf8
\
"
"
)
;
AddProp
(
ss
"
data
"
ToString_str_t
(
data
)
)
;
AddProp
(
ss
"
len
"
ToString_uint32_t
(
len
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Var_1_1
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
1
"
)
)
-
>
VarFromUtf8
(
data
len
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
const
char
*
VarToUtf8_1_1
(
struct
PP_Var
var
uint32_t
*
len
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VarToUtf8
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
AddProp
(
ss
"
len
"
PointerToString
(
len
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
char
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_str_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
len
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
const
char
*
rval
=
(
(
PPB_Var_1_1
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
1
"
)
)
-
>
VarToUtf8
(
var
len
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_str_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
len
)
{
AddProp
(
os
"
len
"
ToString_uint32_t
(
len
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Var_1_1
_PPB_Var_1_1
=
{
ns_PPB_Var_1_1
:
:
AddRef_1_1
ns_PPB_Var_1_1
:
:
Release_1_1
ns_PPB_Var_1_1
:
:
VarFromUtf8_1_1
ns_PPB_Var_1_1
:
:
VarToUtf8_1_1
}
;
const
string
ToString_PPB_Var
(
const
PPB_Var_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Var_1_2
{
static
void
AddRef_1_2
(
struct
PP_Var
var
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AddRef
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Var_1_2
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
2
"
)
)
-
>
AddRef
(
var
)
;
#
endif
}
static
void
Release_1_2
(
struct
PP_Var
var
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Release
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Var_1_2
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
2
"
)
)
-
>
Release
(
var
)
;
#
endif
}
static
struct
PP_Var
VarFromUtf8_1_2
(
const
char
*
data
uint32_t
len
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VarFromUtf8
\
"
"
)
;
AddProp
(
ss
"
data
"
ToString_str_t
(
data
)
)
;
AddProp
(
ss
"
len
"
ToString_uint32_t
(
len
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Var_1_2
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
2
"
)
)
-
>
VarFromUtf8
(
data
len
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
const
char
*
VarToUtf8_1_2
(
struct
PP_Var
var
uint32_t
*
len
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VarToUtf8
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
AddProp
(
ss
"
len
"
PointerToString
(
len
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
char
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_str_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
len
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
const
char
*
rval
=
(
(
PPB_Var_1_2
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
2
"
)
)
-
>
VarToUtf8
(
var
len
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_str_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
len
)
{
AddProp
(
os
"
len
"
ToString_uint32_t
(
len
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
VarToResource_1_2
(
struct
PP_Var
var
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VarToResource
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Var_1_2
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
2
"
)
)
-
>
VarToResource
(
var
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
VarFromResource_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VarFromResource
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Var_1_2
*
)
RealGetInterface
(
"
PPB_Var
;
1
.
2
"
)
)
-
>
VarFromResource
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Var_1_2
_PPB_Var_1_2
=
{
ns_PPB_Var_1_2
:
:
AddRef_1_2
ns_PPB_Var_1_2
:
:
Release_1_2
ns_PPB_Var_1_2
:
:
VarFromUtf8_1_2
ns_PPB_Var_1_2
:
:
VarToUtf8_1_2
ns_PPB_Var_1_2
:
:
VarToResource_1_2
ns_PPB_Var_1_2
:
:
VarFromResource_1_2
}
;
const
string
ToString_PPB_Var
(
const
PPB_Var_1_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VarArray_1_0
{
static
struct
PP_Var
Create_1_0
(
void
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarArray
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_VarArray_1_0
*
)
RealGetInterface
(
"
PPB_VarArray
;
1
.
0
"
)
)
-
>
Create
(
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
Get_1_0
(
struct
PP_Var
array
uint32_t
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarArray
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Get
\
"
"
)
;
AddProp
(
ss
"
array
"
ToString_PP_Var
(
array
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_VarArray_1_0
*
)
RealGetInterface
(
"
PPB_VarArray
;
1
.
0
"
)
)
-
>
Get
(
array
index
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
Set_1_0
(
struct
PP_Var
array
uint32_t
index
struct
PP_Var
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarArray
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Set
\
"
"
)
;
AddProp
(
ss
"
array
"
ToString_PP_Var
(
array
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VarArray_1_0
*
)
RealGetInterface
(
"
PPB_VarArray
;
1
.
0
"
)
)
-
>
Set
(
array
index
value
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetLength_1_0
(
struct
PP_Var
array
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarArray
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLength
\
"
"
)
;
AddProp
(
ss
"
array
"
ToString_PP_Var
(
array
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_VarArray_1_0
*
)
RealGetInterface
(
"
PPB_VarArray
;
1
.
0
"
)
)
-
>
GetLength
(
array
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
SetLength_1_0
(
struct
PP_Var
array
uint32_t
length
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarArray
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetLength
\
"
"
)
;
AddProp
(
ss
"
array
"
ToString_PP_Var
(
array
)
)
;
AddProp
(
ss
"
length
"
ToString_uint32_t
(
length
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VarArray_1_0
*
)
RealGetInterface
(
"
PPB_VarArray
;
1
.
0
"
)
)
-
>
SetLength
(
array
length
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_VarArray_1_0
_PPB_VarArray_1_0
=
{
ns_PPB_VarArray_1_0
:
:
Create_1_0
ns_PPB_VarArray_1_0
:
:
Get_1_0
ns_PPB_VarArray_1_0
:
:
Set_1_0
ns_PPB_VarArray_1_0
:
:
GetLength_1_0
ns_PPB_VarArray_1_0
:
:
SetLength_1_0
}
;
const
string
ToString_PPB_VarArray
(
const
PPB_VarArray_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VarArrayBuffer_1_0
{
static
struct
PP_Var
Create_1_0
(
uint32_t
size_in_bytes
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarArrayBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
size_in_bytes
"
ToString_uint32_t
(
size_in_bytes
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_VarArrayBuffer_1_0
*
)
RealGetInterface
(
"
PPB_VarArrayBuffer
;
1
.
0
"
)
)
-
>
Create
(
size_in_bytes
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
ByteLength_1_0
(
struct
PP_Var
array
uint32_t
*
byte_length
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarArrayBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ByteLength
\
"
"
)
;
AddProp
(
ss
"
array
"
ToString_PP_Var
(
array
)
)
;
AddProp
(
ss
"
byte_length
"
PointerToString
(
byte_length
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
byte_length
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VarArrayBuffer_1_0
*
)
RealGetInterface
(
"
PPB_VarArrayBuffer
;
1
.
0
"
)
)
-
>
ByteLength
(
array
byte_length
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
byte_length
)
{
AddProp
(
os
"
byte_length
"
ToString_uint32_t
(
byte_length
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
*
Map_1_0
(
struct
PP_Var
array
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarArrayBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Map
\
"
"
)
;
AddProp
(
ss
"
array
"
ToString_PP_Var
(
array
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
void
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_mem_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
void
*
rval
=
(
(
PPB_VarArrayBuffer_1_0
*
)
RealGetInterface
(
"
PPB_VarArrayBuffer
;
1
.
0
"
)
)
-
>
Map
(
array
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_mem_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Unmap_1_0
(
struct
PP_Var
array
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarArrayBuffer
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Unmap
\
"
"
)
;
AddProp
(
ss
"
array
"
ToString_PP_Var
(
array
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VarArrayBuffer_1_0
*
)
RealGetInterface
(
"
PPB_VarArrayBuffer
;
1
.
0
"
)
)
-
>
Unmap
(
array
)
;
#
endif
}
}
static
PPB_VarArrayBuffer_1_0
_PPB_VarArrayBuffer_1_0
=
{
ns_PPB_VarArrayBuffer_1_0
:
:
Create_1_0
ns_PPB_VarArrayBuffer_1_0
:
:
ByteLength_1_0
ns_PPB_VarArrayBuffer_1_0
:
:
Map_1_0
ns_PPB_VarArrayBuffer_1_0
:
:
Unmap_1_0
}
;
const
string
ToString_PPB_VarArrayBuffer
(
const
PPB_VarArrayBuffer_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VarDictionary_1_0
{
static
struct
PP_Var
Create_1_0
(
void
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarDictionary
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_VarDictionary_1_0
*
)
RealGetInterface
(
"
PPB_VarDictionary
;
1
.
0
"
)
)
-
>
Create
(
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
Get_1_0
(
struct
PP_Var
dict
struct
PP_Var
key
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarDictionary
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Get
\
"
"
)
;
AddProp
(
ss
"
dict
"
ToString_PP_Var
(
dict
)
)
;
AddProp
(
ss
"
key
"
ToString_PP_Var
(
key
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_VarDictionary_1_0
*
)
RealGetInterface
(
"
PPB_VarDictionary
;
1
.
0
"
)
)
-
>
Get
(
dict
key
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
Set_1_0
(
struct
PP_Var
dict
struct
PP_Var
key
struct
PP_Var
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarDictionary
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Set
\
"
"
)
;
AddProp
(
ss
"
dict
"
ToString_PP_Var
(
dict
)
)
;
AddProp
(
ss
"
key
"
ToString_PP_Var
(
key
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VarDictionary_1_0
*
)
RealGetInterface
(
"
PPB_VarDictionary
;
1
.
0
"
)
)
-
>
Set
(
dict
key
value
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Delete_1_0
(
struct
PP_Var
dict
struct
PP_Var
key
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarDictionary
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Delete
\
"
"
)
;
AddProp
(
ss
"
dict
"
ToString_PP_Var
(
dict
)
)
;
AddProp
(
ss
"
key
"
ToString_PP_Var
(
key
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VarDictionary_1_0
*
)
RealGetInterface
(
"
PPB_VarDictionary
;
1
.
0
"
)
)
-
>
Delete
(
dict
key
)
;
#
endif
}
static
PP_Bool
HasKey_1_0
(
struct
PP_Var
dict
struct
PP_Var
key
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarDictionary
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
HasKey
\
"
"
)
;
AddProp
(
ss
"
dict
"
ToString_PP_Var
(
dict
)
)
;
AddProp
(
ss
"
key
"
ToString_PP_Var
(
key
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VarDictionary_1_0
*
)
RealGetInterface
(
"
PPB_VarDictionary
;
1
.
0
"
)
)
-
>
HasKey
(
dict
key
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetKeys_1_0
(
struct
PP_Var
dict
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VarDictionary
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetKeys
\
"
"
)
;
AddProp
(
ss
"
dict
"
ToString_PP_Var
(
dict
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_VarDictionary_1_0
*
)
RealGetInterface
(
"
PPB_VarDictionary
;
1
.
0
"
)
)
-
>
GetKeys
(
dict
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_VarDictionary_1_0
_PPB_VarDictionary_1_0
=
{
ns_PPB_VarDictionary_1_0
:
:
Create_1_0
ns_PPB_VarDictionary_1_0
:
:
Get_1_0
ns_PPB_VarDictionary_1_0
:
:
Set_1_0
ns_PPB_VarDictionary_1_0
:
:
Delete_1_0
ns_PPB_VarDictionary_1_0
:
:
HasKey_1_0
ns_PPB_VarDictionary_1_0
:
:
GetKeys_1_0
}
;
const
string
ToString_PPB_VarDictionary
(
const
PPB_VarDictionary_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VideoDecoder_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoDecoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVideoDecoder_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVideoDecoder
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VideoDecoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
1
"
)
)
-
>
IsVideoDecoder
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Initialize_0_1
(
PP_Resource
video_decoder
PP_Resource
graphics3d_context
PP_VideoProfile
profile
PP_Bool
allow_software_fallback
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Initialize
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
graphics3d_context
"
ToString_PP_Resource
(
graphics3d_context
)
)
;
AddProp
(
ss
"
profile
"
ToString_PP_VideoProfile
(
profile
)
)
;
AddProp
(
ss
"
allow_software_fallback
"
ToString_PP_Bool
(
allow_software_fallback
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
1
"
)
)
-
>
Initialize
(
video_decoder
graphics3d_context
profile
allow_software_fallback
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Decode_0_1
(
PP_Resource
video_decoder
uint32_t
decode_id
uint32_t
size
const
void
*
buffer
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Decode
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
decode_id
"
ToString_uint32_t
(
decode_id
)
)
;
AddProp
(
ss
"
size
"
ToString_uint32_t
(
size
)
)
;
AddProp
(
ss
"
buffer
"
ToString_mem_t
(
buffer
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
1
"
)
)
-
>
Decode
(
video_decoder
decode_id
size
buffer
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetPicture_0_1
(
PP_Resource
video_decoder
struct
PP_VideoPicture_0_1
*
picture
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPicture
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
picture
"
PointerToString
(
picture
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
picture
)
{
iterator
.
skip
(
)
;
FromJSON_PP_VideoPicture_0_1
(
iterator
*
picture
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
1
"
)
)
-
>
GetPicture
(
video_decoder
picture
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
picture
)
{
AddProp
(
os
"
picture
"
ToString_PP_VideoPicture_0_1
(
picture
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
RecyclePicture_0_1
(
PP_Resource
video_decoder
const
struct
PP_VideoPicture
*
picture
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecyclePicture
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
picture
"
ToString_PP_VideoPicture
(
picture
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoDecoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
1
"
)
)
-
>
RecyclePicture
(
video_decoder
picture
)
;
#
endif
}
static
int32_t
Flush_0_1
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Flush
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
1
"
)
)
-
>
Flush
(
video_decoder
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Reset_0_1
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Reset
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
1
"
)
)
-
>
Reset
(
video_decoder
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_VideoDecoder_0_1
_PPB_VideoDecoder_0_1
=
{
ns_PPB_VideoDecoder_0_1
:
:
Create_0_1
ns_PPB_VideoDecoder_0_1
:
:
IsVideoDecoder_0_1
ns_PPB_VideoDecoder_0_1
:
:
Initialize_0_1
ns_PPB_VideoDecoder_0_1
:
:
Decode_0_1
ns_PPB_VideoDecoder_0_1
:
:
GetPicture_0_1
ns_PPB_VideoDecoder_0_1
:
:
RecyclePicture_0_1
ns_PPB_VideoDecoder_0_1
:
:
Flush_0_1
ns_PPB_VideoDecoder_0_1
:
:
Reset_0_1
}
;
const
string
ToString_PPB_VideoDecoder
(
const
PPB_VideoDecoder_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VideoDecoder_0_2
{
static
PP_Resource
Create_0_2
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoDecoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
2
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVideoDecoder_0_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVideoDecoder
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VideoDecoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
2
"
)
)
-
>
IsVideoDecoder
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Initialize_0_2
(
PP_Resource
video_decoder
PP_Resource
graphics3d_context
PP_VideoProfile
profile
PP_HardwareAcceleration
acceleration
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Initialize
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
graphics3d_context
"
ToString_PP_Resource
(
graphics3d_context
)
)
;
AddProp
(
ss
"
profile
"
ToString_PP_VideoProfile
(
profile
)
)
;
AddProp
(
ss
"
acceleration
"
ToString_PP_HardwareAcceleration
(
acceleration
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
2
"
)
)
-
>
Initialize
(
video_decoder
graphics3d_context
profile
acceleration
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Decode_0_2
(
PP_Resource
video_decoder
uint32_t
decode_id
uint32_t
size
const
void
*
buffer
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Decode
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
decode_id
"
ToString_uint32_t
(
decode_id
)
)
;
AddProp
(
ss
"
size
"
ToString_uint32_t
(
size
)
)
;
AddProp
(
ss
"
buffer
"
ToString_mem_t
(
buffer
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
2
"
)
)
-
>
Decode
(
video_decoder
decode_id
size
buffer
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetPicture_0_2
(
PP_Resource
video_decoder
struct
PP_VideoPicture_0_1
*
picture
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPicture
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
picture
"
PointerToString
(
picture
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
picture
)
{
iterator
.
skip
(
)
;
FromJSON_PP_VideoPicture_0_1
(
iterator
*
picture
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
2
"
)
)
-
>
GetPicture
(
video_decoder
picture
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
picture
)
{
AddProp
(
os
"
picture
"
ToString_PP_VideoPicture_0_1
(
picture
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
RecyclePicture_0_2
(
PP_Resource
video_decoder
const
struct
PP_VideoPicture
*
picture
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecyclePicture
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
picture
"
ToString_PP_VideoPicture
(
picture
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoDecoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
2
"
)
)
-
>
RecyclePicture
(
video_decoder
picture
)
;
#
endif
}
static
int32_t
Flush_0_2
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Flush
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
2
"
)
)
-
>
Flush
(
video_decoder
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Reset_0_2
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Reset
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
0
.
2
"
)
)
-
>
Reset
(
video_decoder
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_VideoDecoder_0_2
_PPB_VideoDecoder_0_2
=
{
ns_PPB_VideoDecoder_0_2
:
:
Create_0_2
ns_PPB_VideoDecoder_0_2
:
:
IsVideoDecoder_0_2
ns_PPB_VideoDecoder_0_2
:
:
Initialize_0_2
ns_PPB_VideoDecoder_0_2
:
:
Decode_0_2
ns_PPB_VideoDecoder_0_2
:
:
GetPicture_0_2
ns_PPB_VideoDecoder_0_2
:
:
RecyclePicture_0_2
ns_PPB_VideoDecoder_0_2
:
:
Flush_0_2
ns_PPB_VideoDecoder_0_2
:
:
Reset_0_2
}
;
const
string
ToString_PPB_VideoDecoder
(
const
PPB_VideoDecoder_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VideoDecoder_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoDecoder_1_0
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVideoDecoder_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVideoDecoder
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VideoDecoder_1_0
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
0
"
)
)
-
>
IsVideoDecoder
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Initialize_1_0
(
PP_Resource
video_decoder
PP_Resource
graphics3d_context
PP_VideoProfile
profile
PP_HardwareAcceleration
acceleration
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Initialize
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
graphics3d_context
"
ToString_PP_Resource
(
graphics3d_context
)
)
;
AddProp
(
ss
"
profile
"
ToString_PP_VideoProfile
(
profile
)
)
;
AddProp
(
ss
"
acceleration
"
ToString_PP_HardwareAcceleration
(
acceleration
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_1_0
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
0
"
)
)
-
>
Initialize
(
video_decoder
graphics3d_context
profile
acceleration
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Decode_1_0
(
PP_Resource
video_decoder
uint32_t
decode_id
uint32_t
size
const
void
*
buffer
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Decode
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
decode_id
"
ToString_uint32_t
(
decode_id
)
)
;
AddProp
(
ss
"
size
"
ToString_uint32_t
(
size
)
)
;
AddProp
(
ss
"
buffer
"
ToString_mem_t
(
buffer
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_1_0
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
0
"
)
)
-
>
Decode
(
video_decoder
decode_id
size
buffer
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetPicture_1_0
(
PP_Resource
video_decoder
struct
PP_VideoPicture
*
picture
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPicture
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
picture
"
PointerToString
(
picture
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
picture
)
{
iterator
.
skip
(
)
;
FromJSON_PP_VideoPicture
(
iterator
*
picture
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_1_0
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
0
"
)
)
-
>
GetPicture
(
video_decoder
picture
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
picture
)
{
AddProp
(
os
"
picture
"
ToString_PP_VideoPicture
(
picture
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
RecyclePicture_1_0
(
PP_Resource
video_decoder
const
struct
PP_VideoPicture
*
picture
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecyclePicture
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
picture
"
ToString_PP_VideoPicture
(
picture
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoDecoder_1_0
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
0
"
)
)
-
>
RecyclePicture
(
video_decoder
picture
)
;
#
endif
}
static
int32_t
Flush_1_0
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Flush
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_1_0
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
0
"
)
)
-
>
Flush
(
video_decoder
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Reset_1_0
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Reset
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_1_0
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
0
"
)
)
-
>
Reset
(
video_decoder
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_VideoDecoder_1_0
_PPB_VideoDecoder_1_0
=
{
ns_PPB_VideoDecoder_1_0
:
:
Create_1_0
ns_PPB_VideoDecoder_1_0
:
:
IsVideoDecoder_1_0
ns_PPB_VideoDecoder_1_0
:
:
Initialize_1_0
ns_PPB_VideoDecoder_1_0
:
:
Decode_1_0
ns_PPB_VideoDecoder_1_0
:
:
GetPicture_1_0
ns_PPB_VideoDecoder_1_0
:
:
RecyclePicture_1_0
ns_PPB_VideoDecoder_1_0
:
:
Flush_1_0
ns_PPB_VideoDecoder_1_0
:
:
Reset_1_0
}
;
const
string
ToString_PPB_VideoDecoder
(
const
PPB_VideoDecoder_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VideoDecoder_1_1
{
static
PP_Resource
Create_1_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoDecoder_1_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVideoDecoder_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVideoDecoder
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VideoDecoder_1_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
1
"
)
)
-
>
IsVideoDecoder
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Initialize_1_1
(
PP_Resource
video_decoder
PP_Resource
graphics3d_context
PP_VideoProfile
profile
PP_HardwareAcceleration
acceleration
uint32_t
min_picture_count
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Initialize
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
graphics3d_context
"
ToString_PP_Resource
(
graphics3d_context
)
)
;
AddProp
(
ss
"
profile
"
ToString_PP_VideoProfile
(
profile
)
)
;
AddProp
(
ss
"
acceleration
"
ToString_PP_HardwareAcceleration
(
acceleration
)
)
;
AddProp
(
ss
"
min_picture_count
"
ToString_uint32_t
(
min_picture_count
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_1_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
1
"
)
)
-
>
Initialize
(
video_decoder
graphics3d_context
profile
acceleration
min_picture_count
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Decode_1_1
(
PP_Resource
video_decoder
uint32_t
decode_id
uint32_t
size
const
void
*
buffer
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Decode
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
decode_id
"
ToString_uint32_t
(
decode_id
)
)
;
AddProp
(
ss
"
size
"
ToString_uint32_t
(
size
)
)
;
AddProp
(
ss
"
buffer
"
ToString_mem_t
(
buffer
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_1_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
1
"
)
)
-
>
Decode
(
video_decoder
decode_id
size
buffer
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetPicture_1_1
(
PP_Resource
video_decoder
struct
PP_VideoPicture
*
picture
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPicture
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
picture
"
PointerToString
(
picture
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
picture
)
{
iterator
.
skip
(
)
;
FromJSON_PP_VideoPicture
(
iterator
*
picture
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_1_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
1
"
)
)
-
>
GetPicture
(
video_decoder
picture
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
picture
)
{
AddProp
(
os
"
picture
"
ToString_PP_VideoPicture
(
picture
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
RecyclePicture_1_1
(
PP_Resource
video_decoder
const
struct
PP_VideoPicture
*
picture
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecyclePicture
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
picture
"
ToString_PP_VideoPicture
(
picture
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoDecoder_1_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
1
"
)
)
-
>
RecyclePicture
(
video_decoder
picture
)
;
#
endif
}
static
int32_t
Flush_1_1
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Flush
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_1_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
1
"
)
)
-
>
Flush
(
video_decoder
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Reset_1_1
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Reset
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_1_1
*
)
RealGetInterface
(
"
PPB_VideoDecoder
;
1
.
1
"
)
)
-
>
Reset
(
video_decoder
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_VideoDecoder_1_1
_PPB_VideoDecoder_1_1
=
{
ns_PPB_VideoDecoder_1_1
:
:
Create_1_1
ns_PPB_VideoDecoder_1_1
:
:
IsVideoDecoder_1_1
ns_PPB_VideoDecoder_1_1
:
:
Initialize_1_1
ns_PPB_VideoDecoder_1_1
:
:
Decode_1_1
ns_PPB_VideoDecoder_1_1
:
:
GetPicture_1_1
ns_PPB_VideoDecoder_1_1
:
:
RecyclePicture_1_1
ns_PPB_VideoDecoder_1_1
:
:
Flush_1_1
ns_PPB_VideoDecoder_1_1
:
:
Reset_1_1
}
;
const
string
ToString_PPB_VideoDecoder
(
const
PPB_VideoDecoder_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VideoEncoder_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVideoEncoder_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVideoEncoder
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VideoEncoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
1
"
)
)
-
>
IsVideoEncoder
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetSupportedProfiles_0_1
(
PP_Resource
video_encoder
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSupportedProfiles
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
1
"
)
)
-
>
GetSupportedProfiles
(
video_encoder
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Initialize_0_1
(
PP_Resource
video_encoder
PP_VideoFrame_Format
input_format
const
struct
PP_Size
*
input_visible_size
PP_VideoProfile
output_profile
uint32_t
initial_bitrate
PP_HardwareAcceleration
acceleration
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Initialize
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
input_format
"
ToString_PP_VideoFrame_Format
(
input_format
)
)
;
AddProp
(
ss
"
input_visible_size
"
ToString_PP_Size
(
input_visible_size
)
)
;
AddProp
(
ss
"
output_profile
"
ToString_PP_VideoProfile
(
output_profile
)
)
;
AddProp
(
ss
"
initial_bitrate
"
ToString_uint32_t
(
initial_bitrate
)
)
;
AddProp
(
ss
"
acceleration
"
ToString_PP_HardwareAcceleration
(
acceleration
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
1
"
)
)
-
>
Initialize
(
video_encoder
input_format
input_visible_size
output_profile
initial_bitrate
acceleration
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetFramesRequired_0_1
(
PP_Resource
video_encoder
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFramesRequired
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
1
"
)
)
-
>
GetFramesRequired
(
video_encoder
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetFrameCodedSize_0_1
(
PP_Resource
video_encoder
struct
PP_Size
*
coded_size
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFrameCodedSize
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
coded_size
"
PointerToString
(
coded_size
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
coded_size
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
*
coded_size
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
1
"
)
)
-
>
GetFrameCodedSize
(
video_encoder
coded_size
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
coded_size
)
{
AddProp
(
os
"
coded_size
"
ToString_PP_Size
(
coded_size
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetVideoFrame_0_1
(
PP_Resource
video_encoder
PP_Resource
*
video_frame
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetVideoFrame
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
video_frame
"
PointerToString
(
video_frame
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
video_frame
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
1
"
)
)
-
>
GetVideoFrame
(
video_encoder
video_frame
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
video_frame
)
{
AddProp
(
os
"
video_frame
"
ToString_PP_Resource
(
video_frame
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Encode_0_1
(
PP_Resource
video_encoder
PP_Resource
video_frame
PP_Bool
force_keyframe
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Encode
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
video_frame
"
ToString_PP_Resource
(
video_frame
)
)
;
AddProp
(
ss
"
force_keyframe
"
ToString_PP_Bool
(
force_keyframe
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
1
"
)
)
-
>
Encode
(
video_encoder
video_frame
force_keyframe
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetBitstreamBuffer_0_1
(
PP_Resource
video_encoder
struct
PP_BitstreamBuffer
*
bitstream_buffer
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBitstreamBuffer
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
bitstream_buffer
"
PointerToString
(
bitstream_buffer
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
bitstream_buffer
)
{
iterator
.
skip
(
)
;
FromJSON_PP_BitstreamBuffer
(
iterator
*
bitstream_buffer
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
1
"
)
)
-
>
GetBitstreamBuffer
(
video_encoder
bitstream_buffer
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
bitstream_buffer
)
{
AddProp
(
os
"
bitstream_buffer
"
ToString_PP_BitstreamBuffer
(
bitstream_buffer
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
RecycleBitstreamBuffer_0_1
(
PP_Resource
video_encoder
const
struct
PP_BitstreamBuffer
*
bitstream_buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecycleBitstreamBuffer
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
bitstream_buffer
"
ToString_PP_BitstreamBuffer
(
bitstream_buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoEncoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
1
"
)
)
-
>
RecycleBitstreamBuffer
(
video_encoder
bitstream_buffer
)
;
#
endif
}
static
void
RequestEncodingParametersChange_0_1
(
PP_Resource
video_encoder
uint32_t
bitrate
uint32_t
framerate
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RequestEncodingParametersChange
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
bitrate
"
ToString_uint32_t
(
bitrate
)
)
;
AddProp
(
ss
"
framerate
"
ToString_uint32_t
(
framerate
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoEncoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
1
"
)
)
-
>
RequestEncodingParametersChange
(
video_encoder
bitrate
framerate
)
;
#
endif
}
static
void
Close_0_1
(
PP_Resource
video_encoder
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoEncoder_0_1
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
1
"
)
)
-
>
Close
(
video_encoder
)
;
#
endif
}
}
static
PPB_VideoEncoder_0_1
_PPB_VideoEncoder_0_1
=
{
ns_PPB_VideoEncoder_0_1
:
:
Create_0_1
ns_PPB_VideoEncoder_0_1
:
:
IsVideoEncoder_0_1
ns_PPB_VideoEncoder_0_1
:
:
GetSupportedProfiles_0_1
ns_PPB_VideoEncoder_0_1
:
:
Initialize_0_1
ns_PPB_VideoEncoder_0_1
:
:
GetFramesRequired_0_1
ns_PPB_VideoEncoder_0_1
:
:
GetFrameCodedSize_0_1
ns_PPB_VideoEncoder_0_1
:
:
GetVideoFrame_0_1
ns_PPB_VideoEncoder_0_1
:
:
Encode_0_1
ns_PPB_VideoEncoder_0_1
:
:
GetBitstreamBuffer_0_1
ns_PPB_VideoEncoder_0_1
:
:
RecycleBitstreamBuffer_0_1
ns_PPB_VideoEncoder_0_1
:
:
RequestEncodingParametersChange_0_1
ns_PPB_VideoEncoder_0_1
:
:
Close_0_1
}
;
const
string
ToString_PPB_VideoEncoder
(
const
PPB_VideoEncoder_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VideoEncoder_0_2
{
static
PP_Resource
Create_0_2
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
2
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVideoEncoder_0_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVideoEncoder
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VideoEncoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
2
"
)
)
-
>
IsVideoEncoder
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetSupportedProfiles_0_2
(
PP_Resource
video_encoder
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSupportedProfiles
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
2
"
)
)
-
>
GetSupportedProfiles
(
video_encoder
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Initialize_0_2
(
PP_Resource
video_encoder
PP_VideoFrame_Format
input_format
const
struct
PP_Size
*
input_visible_size
PP_VideoProfile
output_profile
uint32_t
initial_bitrate
PP_HardwareAcceleration
acceleration
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Initialize
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
input_format
"
ToString_PP_VideoFrame_Format
(
input_format
)
)
;
AddProp
(
ss
"
input_visible_size
"
ToString_PP_Size
(
input_visible_size
)
)
;
AddProp
(
ss
"
output_profile
"
ToString_PP_VideoProfile
(
output_profile
)
)
;
AddProp
(
ss
"
initial_bitrate
"
ToString_uint32_t
(
initial_bitrate
)
)
;
AddProp
(
ss
"
acceleration
"
ToString_PP_HardwareAcceleration
(
acceleration
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
2
"
)
)
-
>
Initialize
(
video_encoder
input_format
input_visible_size
output_profile
initial_bitrate
acceleration
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetFramesRequired_0_2
(
PP_Resource
video_encoder
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFramesRequired
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
2
"
)
)
-
>
GetFramesRequired
(
video_encoder
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetFrameCodedSize_0_2
(
PP_Resource
video_encoder
struct
PP_Size
*
coded_size
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFrameCodedSize
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
coded_size
"
PointerToString
(
coded_size
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
coded_size
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
*
coded_size
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
2
"
)
)
-
>
GetFrameCodedSize
(
video_encoder
coded_size
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
coded_size
)
{
AddProp
(
os
"
coded_size
"
ToString_PP_Size
(
coded_size
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetVideoFrame_0_2
(
PP_Resource
video_encoder
PP_Resource
*
video_frame
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetVideoFrame
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
video_frame
"
PointerToString
(
video_frame
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
video_frame
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
2
"
)
)
-
>
GetVideoFrame
(
video_encoder
video_frame
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
video_frame
)
{
AddProp
(
os
"
video_frame
"
ToString_PP_Resource
(
video_frame
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Encode_0_2
(
PP_Resource
video_encoder
PP_Resource
video_frame
PP_Bool
force_keyframe
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Encode
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
video_frame
"
ToString_PP_Resource
(
video_frame
)
)
;
AddProp
(
ss
"
force_keyframe
"
ToString_PP_Bool
(
force_keyframe
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
2
"
)
)
-
>
Encode
(
video_encoder
video_frame
force_keyframe
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetBitstreamBuffer_0_2
(
PP_Resource
video_encoder
struct
PP_BitstreamBuffer
*
bitstream_buffer
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBitstreamBuffer
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
bitstream_buffer
"
PointerToString
(
bitstream_buffer
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
bitstream_buffer
)
{
iterator
.
skip
(
)
;
FromJSON_PP_BitstreamBuffer
(
iterator
*
bitstream_buffer
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoEncoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
2
"
)
)
-
>
GetBitstreamBuffer
(
video_encoder
bitstream_buffer
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
bitstream_buffer
)
{
AddProp
(
os
"
bitstream_buffer
"
ToString_PP_BitstreamBuffer
(
bitstream_buffer
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
RecycleBitstreamBuffer_0_2
(
PP_Resource
video_encoder
const
struct
PP_BitstreamBuffer
*
bitstream_buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecycleBitstreamBuffer
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
bitstream_buffer
"
ToString_PP_BitstreamBuffer
(
bitstream_buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoEncoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
2
"
)
)
-
>
RecycleBitstreamBuffer
(
video_encoder
bitstream_buffer
)
;
#
endif
}
static
void
RequestEncodingParametersChange_0_2
(
PP_Resource
video_encoder
uint32_t
bitrate
uint32_t
framerate
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RequestEncodingParametersChange
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
AddProp
(
ss
"
bitrate
"
ToString_uint32_t
(
bitrate
)
)
;
AddProp
(
ss
"
framerate
"
ToString_uint32_t
(
framerate
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoEncoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
2
"
)
)
-
>
RequestEncodingParametersChange
(
video_encoder
bitrate
framerate
)
;
#
endif
}
static
void
Close_0_2
(
PP_Resource
video_encoder
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoEncoder
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
video_encoder
"
ToString_PP_Resource
(
video_encoder
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoEncoder_0_2
*
)
RealGetInterface
(
"
PPB_VideoEncoder
;
0
.
2
"
)
)
-
>
Close
(
video_encoder
)
;
#
endif
}
}
static
PPB_VideoEncoder_0_2
_PPB_VideoEncoder_0_2
=
{
ns_PPB_VideoEncoder_0_2
:
:
Create_0_2
ns_PPB_VideoEncoder_0_2
:
:
IsVideoEncoder_0_2
ns_PPB_VideoEncoder_0_2
:
:
GetSupportedProfiles_0_2
ns_PPB_VideoEncoder_0_2
:
:
Initialize_0_2
ns_PPB_VideoEncoder_0_2
:
:
GetFramesRequired_0_2
ns_PPB_VideoEncoder_0_2
:
:
GetFrameCodedSize_0_2
ns_PPB_VideoEncoder_0_2
:
:
GetVideoFrame_0_2
ns_PPB_VideoEncoder_0_2
:
:
Encode_0_2
ns_PPB_VideoEncoder_0_2
:
:
GetBitstreamBuffer_0_2
ns_PPB_VideoEncoder_0_2
:
:
RecycleBitstreamBuffer_0_2
ns_PPB_VideoEncoder_0_2
:
:
RequestEncodingParametersChange_0_2
ns_PPB_VideoEncoder_0_2
:
:
Close_0_2
}
;
const
string
ToString_PPB_VideoEncoder
(
const
PPB_VideoEncoder_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_VideoFrame_Format
(
const
PP_VideoFrame_Format
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_VIDEOFRAME_FORMAT_UNKNOWN
\
"
"
;
case
1
:
return
"
\
"
PP_VIDEOFRAME_FORMAT_YV12
\
"
"
;
case
2
:
return
"
\
"
PP_VIDEOFRAME_FORMAT_I420
\
"
"
;
case
3
:
return
"
\
"
PP_VIDEOFRAME_FORMAT_BGRA
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_VideoFrame_Format
(
const
PP_VideoFrame_Format
&
v
)
{
return
ToString_PP_VideoFrame_Format
(
&
v
)
;
}
void
FromJSON_PP_VideoFrame_Format
(
JSONIterator
&
iterator
PP_VideoFrame_Format
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_VideoFrame_Format
(
v
)
;
}
namespace
ns_PPB_VideoFrame_0_1
{
static
PP_Bool
IsVideoFrame_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoFrame
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVideoFrame
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VideoFrame_0_1
*
)
RealGetInterface
(
"
PPB_VideoFrame
;
0
.
1
"
)
)
-
>
IsVideoFrame
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_TimeDelta
GetTimestamp_0_1
(
PP_Resource
frame
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoFrame
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTimestamp
\
"
"
)
;
AddProp
(
ss
"
frame
"
ToString_PP_Resource
(
frame
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
double
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_TimeDelta
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
double
rval
=
(
(
PPB_VideoFrame_0_1
*
)
RealGetInterface
(
"
PPB_VideoFrame
;
0
.
1
"
)
)
-
>
GetTimestamp
(
frame
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_TimeDelta
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
SetTimestamp_0_1
(
PP_Resource
frame
PP_TimeDelta
timestamp
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoFrame
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetTimestamp
\
"
"
)
;
AddProp
(
ss
"
frame
"
ToString_PP_Resource
(
frame
)
)
;
AddProp
(
ss
"
timestamp
"
ToString_PP_TimeDelta
(
timestamp
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoFrame_0_1
*
)
RealGetInterface
(
"
PPB_VideoFrame
;
0
.
1
"
)
)
-
>
SetTimestamp
(
frame
timestamp
)
;
#
endif
}
static
PP_VideoFrame_Format
GetFormat_0_1
(
PP_Resource
frame
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoFrame
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFormat
\
"
"
)
;
AddProp
(
ss
"
frame
"
ToString_PP_Resource
(
frame
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_VideoFrame_Format
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_VideoFrame_Format
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_VideoFrame_Format
rval
=
(
(
PPB_VideoFrame_0_1
*
)
RealGetInterface
(
"
PPB_VideoFrame
;
0
.
1
"
)
)
-
>
GetFormat
(
frame
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_VideoFrame_Format
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetSize_0_1
(
PP_Resource
frame
struct
PP_Size
*
size
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoFrame
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSize
\
"
"
)
;
AddProp
(
ss
"
frame
"
ToString_PP_Resource
(
frame
)
)
;
AddProp
(
ss
"
size
"
PointerToString
(
size
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
size
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
*
size
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VideoFrame_0_1
*
)
RealGetInterface
(
"
PPB_VideoFrame
;
0
.
1
"
)
)
-
>
GetSize
(
frame
size
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
size
)
{
AddProp
(
os
"
size
"
ToString_PP_Size
(
size
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
*
GetDataBuffer_0_1
(
PP_Resource
frame
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoFrame
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDataBuffer
\
"
"
)
;
AddProp
(
ss
"
frame
"
ToString_PP_Resource
(
frame
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
void
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_mem_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
void
*
rval
=
(
(
PPB_VideoFrame_0_1
*
)
RealGetInterface
(
"
PPB_VideoFrame
;
0
.
1
"
)
)
-
>
GetDataBuffer
(
frame
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_mem_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetDataBufferSize_0_1
(
PP_Resource
frame
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoFrame
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDataBufferSize
\
"
"
)
;
AddProp
(
ss
"
frame
"
ToString_PP_Resource
(
frame
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_VideoFrame_0_1
*
)
RealGetInterface
(
"
PPB_VideoFrame
;
0
.
1
"
)
)
-
>
GetDataBufferSize
(
frame
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_VideoFrame_0_1
_PPB_VideoFrame_0_1
=
{
ns_PPB_VideoFrame_0_1
:
:
IsVideoFrame_0_1
ns_PPB_VideoFrame_0_1
:
:
GetTimestamp_0_1
ns_PPB_VideoFrame_0_1
:
:
SetTimestamp_0_1
ns_PPB_VideoFrame_0_1
:
:
GetFormat_0_1
ns_PPB_VideoFrame_0_1
:
:
GetSize_0_1
ns_PPB_VideoFrame_0_1
:
:
GetDataBuffer_0_1
ns_PPB_VideoFrame_0_1
:
:
GetDataBufferSize_0_1
}
;
const
string
ToString_PPB_VideoFrame
(
const
PPB_VideoFrame_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_View_1_0
{
static
PP_Bool
IsView_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsView
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_0
*
)
RealGetInterface
(
"
PPB_View
;
1
.
0
"
)
)
-
>
IsView
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetRect_1_0
(
PP_Resource
resource
struct
PP_Rect
*
rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRect
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
rect
"
PointerToString
(
rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
rect
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Rect
(
iterator
*
rect
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_0
*
)
RealGetInterface
(
"
PPB_View
;
1
.
0
"
)
)
-
>
GetRect
(
resource
rect
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
rect
)
{
AddProp
(
os
"
rect
"
ToString_PP_Rect
(
rect
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFullscreen_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFullscreen
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_0
*
)
RealGetInterface
(
"
PPB_View
;
1
.
0
"
)
)
-
>
IsFullscreen
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVisible_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVisible
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_0
*
)
RealGetInterface
(
"
PPB_View
;
1
.
0
"
)
)
-
>
IsVisible
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsPageVisible_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsPageVisible
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_0
*
)
RealGetInterface
(
"
PPB_View
;
1
.
0
"
)
)
-
>
IsPageVisible
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetClipRect_1_0
(
PP_Resource
resource
struct
PP_Rect
*
clip
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetClipRect
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
clip
"
PointerToString
(
clip
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
clip
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Rect
(
iterator
*
clip
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_0
*
)
RealGetInterface
(
"
PPB_View
;
1
.
0
"
)
)
-
>
GetClipRect
(
resource
clip
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
clip
)
{
AddProp
(
os
"
clip
"
ToString_PP_Rect
(
clip
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_View_1_0
_PPB_View_1_0
=
{
ns_PPB_View_1_0
:
:
IsView_1_0
ns_PPB_View_1_0
:
:
GetRect_1_0
ns_PPB_View_1_0
:
:
IsFullscreen_1_0
ns_PPB_View_1_0
:
:
IsVisible_1_0
ns_PPB_View_1_0
:
:
IsPageVisible_1_0
ns_PPB_View_1_0
:
:
GetClipRect_1_0
}
;
const
string
ToString_PPB_View
(
const
PPB_View_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_View_1_1
{
static
PP_Bool
IsView_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsView
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_1
*
)
RealGetInterface
(
"
PPB_View
;
1
.
1
"
)
)
-
>
IsView
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetRect_1_1
(
PP_Resource
resource
struct
PP_Rect
*
rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRect
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
rect
"
PointerToString
(
rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
rect
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Rect
(
iterator
*
rect
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_1
*
)
RealGetInterface
(
"
PPB_View
;
1
.
1
"
)
)
-
>
GetRect
(
resource
rect
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
rect
)
{
AddProp
(
os
"
rect
"
ToString_PP_Rect
(
rect
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFullscreen_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFullscreen
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_1
*
)
RealGetInterface
(
"
PPB_View
;
1
.
1
"
)
)
-
>
IsFullscreen
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVisible_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVisible
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_1
*
)
RealGetInterface
(
"
PPB_View
;
1
.
1
"
)
)
-
>
IsVisible
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsPageVisible_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsPageVisible
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_1
*
)
RealGetInterface
(
"
PPB_View
;
1
.
1
"
)
)
-
>
IsPageVisible
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetClipRect_1_1
(
PP_Resource
resource
struct
PP_Rect
*
clip
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetClipRect
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
clip
"
PointerToString
(
clip
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
clip
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Rect
(
iterator
*
clip
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_1
*
)
RealGetInterface
(
"
PPB_View
;
1
.
1
"
)
)
-
>
GetClipRect
(
resource
clip
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
clip
)
{
AddProp
(
os
"
clip
"
ToString_PP_Rect
(
clip
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
float
GetDeviceScale_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDeviceScale
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
float
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_float_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
float
rval
=
(
(
PPB_View_1_1
*
)
RealGetInterface
(
"
PPB_View
;
1
.
1
"
)
)
-
>
GetDeviceScale
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_float_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
float
GetCSSScale_1_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCSSScale
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
float
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_float_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
float
rval
=
(
(
PPB_View_1_1
*
)
RealGetInterface
(
"
PPB_View
;
1
.
1
"
)
)
-
>
GetCSSScale
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_float_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_View_1_1
_PPB_View_1_1
=
{
ns_PPB_View_1_1
:
:
IsView_1_1
ns_PPB_View_1_1
:
:
GetRect_1_1
ns_PPB_View_1_1
:
:
IsFullscreen_1_1
ns_PPB_View_1_1
:
:
IsVisible_1_1
ns_PPB_View_1_1
:
:
IsPageVisible_1_1
ns_PPB_View_1_1
:
:
GetClipRect_1_1
ns_PPB_View_1_1
:
:
GetDeviceScale_1_1
ns_PPB_View_1_1
:
:
GetCSSScale_1_1
}
;
const
string
ToString_PPB_View
(
const
PPB_View_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_View_1_2
{
static
PP_Bool
IsView_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsView
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_2
*
)
RealGetInterface
(
"
PPB_View
;
1
.
2
"
)
)
-
>
IsView
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetRect_1_2
(
PP_Resource
resource
struct
PP_Rect
*
rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRect
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
rect
"
PointerToString
(
rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
rect
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Rect
(
iterator
*
rect
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_2
*
)
RealGetInterface
(
"
PPB_View
;
1
.
2
"
)
)
-
>
GetRect
(
resource
rect
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
rect
)
{
AddProp
(
os
"
rect
"
ToString_PP_Rect
(
rect
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFullscreen_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFullscreen
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_2
*
)
RealGetInterface
(
"
PPB_View
;
1
.
2
"
)
)
-
>
IsFullscreen
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVisible_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVisible
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_2
*
)
RealGetInterface
(
"
PPB_View
;
1
.
2
"
)
)
-
>
IsVisible
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsPageVisible_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsPageVisible
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_2
*
)
RealGetInterface
(
"
PPB_View
;
1
.
2
"
)
)
-
>
IsPageVisible
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetClipRect_1_2
(
PP_Resource
resource
struct
PP_Rect
*
clip
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetClipRect
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
clip
"
PointerToString
(
clip
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
clip
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Rect
(
iterator
*
clip
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_2
*
)
RealGetInterface
(
"
PPB_View
;
1
.
2
"
)
)
-
>
GetClipRect
(
resource
clip
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
clip
)
{
AddProp
(
os
"
clip
"
ToString_PP_Rect
(
clip
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
float
GetDeviceScale_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDeviceScale
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
float
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_float_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
float
rval
=
(
(
PPB_View_1_2
*
)
RealGetInterface
(
"
PPB_View
;
1
.
2
"
)
)
-
>
GetDeviceScale
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_float_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
float
GetCSSScale_1_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCSSScale
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
float
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_float_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
float
rval
=
(
(
PPB_View_1_2
*
)
RealGetInterface
(
"
PPB_View
;
1
.
2
"
)
)
-
>
GetCSSScale
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_float_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetScrollOffset_1_2
(
PP_Resource
resource
struct
PP_Point
*
offset
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetScrollOffset
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
offset
"
PointerToString
(
offset
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
offset
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Point
(
iterator
*
offset
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_View_1_2
*
)
RealGetInterface
(
"
PPB_View
;
1
.
2
"
)
)
-
>
GetScrollOffset
(
resource
offset
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
offset
)
{
AddProp
(
os
"
offset
"
ToString_PP_Point
(
offset
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_View_1_2
_PPB_View_1_2
=
{
ns_PPB_View_1_2
:
:
IsView_1_2
ns_PPB_View_1_2
:
:
GetRect_1_2
ns_PPB_View_1_2
:
:
IsFullscreen_1_2
ns_PPB_View_1_2
:
:
IsVisible_1_2
ns_PPB_View_1_2
:
:
IsPageVisible_1_2
ns_PPB_View_1_2
:
:
GetClipRect_1_2
ns_PPB_View_1_2
:
:
GetDeviceScale_1_2
ns_PPB_View_1_2
:
:
GetCSSScale_1_2
ns_PPB_View_1_2
:
:
GetScrollOffset_1_2
}
;
const
string
ToString_PPB_View
(
const
PPB_View_1_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VpnProvider_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VpnProvider
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VpnProvider_0_1
*
)
RealGetInterface
(
"
PPB_VpnProvider
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVpnProvider_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VpnProvider
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVpnProvider
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VpnProvider_0_1
*
)
RealGetInterface
(
"
PPB_VpnProvider
;
0
.
1
"
)
)
-
>
IsVpnProvider
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Bind_0_1
(
PP_Resource
vpn_provider
struct
PP_Var
configuration_id
struct
PP_Var
configuration_name
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VpnProvider
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Bind
\
"
"
)
;
AddProp
(
ss
"
vpn_provider
"
ToString_PP_Resource
(
vpn_provider
)
)
;
AddProp
(
ss
"
configuration_id
"
ToString_PP_Var
(
configuration_id
)
)
;
AddProp
(
ss
"
configuration_name
"
ToString_PP_Var
(
configuration_name
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VpnProvider_0_1
*
)
RealGetInterface
(
"
PPB_VpnProvider
;
0
.
1
"
)
)
-
>
Bind
(
vpn_provider
configuration_id
configuration_name
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SendPacket_0_1
(
PP_Resource
vpn_provider
struct
PP_Var
packet
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VpnProvider
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SendPacket
\
"
"
)
;
AddProp
(
ss
"
vpn_provider
"
ToString_PP_Resource
(
vpn_provider
)
)
;
AddProp
(
ss
"
packet
"
ToString_PP_Var
(
packet
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VpnProvider_0_1
*
)
RealGetInterface
(
"
PPB_VpnProvider
;
0
.
1
"
)
)
-
>
SendPacket
(
vpn_provider
packet
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
ReceivePacket_0_1
(
PP_Resource
vpn_provider
struct
PP_Var
*
packet
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VpnProvider
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReceivePacket
\
"
"
)
;
AddProp
(
ss
"
vpn_provider
"
ToString_PP_Resource
(
vpn_provider
)
)
;
AddProp
(
ss
"
packet
"
PointerToString
(
packet
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
packet
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VpnProvider_0_1
*
)
RealGetInterface
(
"
PPB_VpnProvider
;
0
.
1
"
)
)
-
>
ReceivePacket
(
vpn_provider
packet
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
packet
)
{
AddProp
(
os
"
packet
"
ToString_PP_Var
(
packet
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_VpnProvider_0_1
_PPB_VpnProvider_0_1
=
{
ns_PPB_VpnProvider_0_1
:
:
Create_0_1
ns_PPB_VpnProvider_0_1
:
:
IsVpnProvider_0_1
ns_PPB_VpnProvider_0_1
:
:
Bind_0_1
ns_PPB_VpnProvider_0_1
:
:
SendPacket_0_1
ns_PPB_VpnProvider_0_1
:
:
ReceivePacket_0_1
}
;
const
string
ToString_PPB_VpnProvider
(
const
PPB_VpnProvider_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_WebSocketReadyState
(
const
PP_WebSocketReadyState
*
v
)
{
switch
(
*
v
)
{
case
-
1
:
return
"
\
"
PP_WEBSOCKETREADYSTATE_INVALID
\
"
"
;
case
0
:
return
"
\
"
PP_WEBSOCKETREADYSTATE_CONNECTING
\
"
"
;
case
1
:
return
"
\
"
PP_WEBSOCKETREADYSTATE_OPEN
\
"
"
;
case
2
:
return
"
\
"
PP_WEBSOCKETREADYSTATE_CLOSING
\
"
"
;
case
3
:
return
"
\
"
PP_WEBSOCKETREADYSTATE_CLOSED
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_WebSocketReadyState
(
const
PP_WebSocketReadyState
&
v
)
{
return
ToString_PP_WebSocketReadyState
(
&
v
)
;
}
void
FromJSON_PP_WebSocketReadyState
(
JSONIterator
&
iterator
PP_WebSocketReadyState
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_WebSocketReadyState
(
v
)
;
}
const
string
ToString_PP_WebSocketCloseCode
(
const
PP_WebSocketCloseCode
*
v
)
{
switch
(
*
v
)
{
case
1005
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_NOT_SPECIFIED
\
"
"
;
case
1000
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_NORMAL_CLOSURE
\
"
"
;
case
1001
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_GOING_AWAY
\
"
"
;
case
1002
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_PROTOCOL_ERROR
\
"
"
;
case
1003
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_UNSUPPORTED_DATA
\
"
"
;
case
1006
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_ABNORMAL_CLOSURE
\
"
"
;
case
1007
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_INVALID_FRAME_PAYLOAD_DATA
\
"
"
;
case
1008
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_POLICY_VIOLATION
\
"
"
;
case
1009
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_MESSAGE_TOO_BIG
\
"
"
;
case
1010
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_MANDATORY_EXTENSION
\
"
"
;
case
1011
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_INTERNAL_SERVER_ERROR
\
"
"
;
case
1015
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_TLS_HANDSHAKE
\
"
"
;
case
3000
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MIN
\
"
"
;
case
3999
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MAX
\
"
"
;
case
4000
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MIN
\
"
"
;
case
4999
:
return
"
\
"
PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MAX
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_WebSocketCloseCode
(
const
PP_WebSocketCloseCode
&
v
)
{
return
ToString_PP_WebSocketCloseCode
(
&
v
)
;
}
void
FromJSON_PP_WebSocketCloseCode
(
JSONIterator
&
iterator
PP_WebSocketCloseCode
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_WebSocketCloseCode
(
v
)
;
}
namespace
ns_PPB_WebSocket_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsWebSocket_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsWebSocket
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
IsWebSocket
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Connect_1_0
(
PP_Resource
web_socket
struct
PP_Var
url
const
struct
PP_Var
protocols
[
]
uint32_t
protocol_count
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Connect
\
"
"
)
;
AddProp
(
ss
"
web_socket
"
ToString_PP_Resource
(
web_socket
)
)
;
AddProp
(
ss
"
url
"
ToString_PP_Var
(
url
)
)
;
{
BeginProp
(
ss
"
protocols
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
protocol_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Var
(
protocols
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
protocol_count
"
ToString_uint32_t
(
protocol_count
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
Connect
(
web_socket
url
protocols
protocol_count
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Close_1_0
(
PP_Resource
web_socket
uint16_t
code
struct
PP_Var
reason
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
web_socket
"
ToString_PP_Resource
(
web_socket
)
)
;
AddProp
(
ss
"
code
"
ToString_uint16_t
(
code
)
)
;
AddProp
(
ss
"
reason
"
ToString_PP_Var
(
reason
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
Close
(
web_socket
code
reason
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
ReceiveMessage_1_0
(
PP_Resource
web_socket
struct
PP_Var
*
message
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReceiveMessage
\
"
"
)
;
AddProp
(
ss
"
web_socket
"
ToString_PP_Resource
(
web_socket
)
)
;
AddProp
(
ss
"
message
"
PointerToString
(
message
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
message
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
ReceiveMessage
(
web_socket
message
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
message
)
{
AddProp
(
os
"
message
"
ToString_PP_Var
(
message
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SendMessage_1_0
(
PP_Resource
web_socket
struct
PP_Var
message
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SendMessage
\
"
"
)
;
AddProp
(
ss
"
web_socket
"
ToString_PP_Resource
(
web_socket
)
)
;
AddProp
(
ss
"
message
"
ToString_PP_Var
(
message
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
SendMessage
(
web_socket
message
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint64_t
GetBufferedAmount_1_0
(
PP_Resource
web_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBufferedAmount
\
"
"
)
;
AddProp
(
ss
"
web_socket
"
ToString_PP_Resource
(
web_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint64_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint64_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint64_t
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
GetBufferedAmount
(
web_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint64_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint16_t
GetCloseCode_1_0
(
PP_Resource
web_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCloseCode
\
"
"
)
;
AddProp
(
ss
"
web_socket
"
ToString_PP_Resource
(
web_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint16_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint16_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint16_t
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
GetCloseCode
(
web_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint16_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetCloseReason_1_0
(
PP_Resource
web_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCloseReason
\
"
"
)
;
AddProp
(
ss
"
web_socket
"
ToString_PP_Resource
(
web_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
GetCloseReason
(
web_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetCloseWasClean_1_0
(
PP_Resource
web_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCloseWasClean
\
"
"
)
;
AddProp
(
ss
"
web_socket
"
ToString_PP_Resource
(
web_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
GetCloseWasClean
(
web_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetExtensions_1_0
(
PP_Resource
web_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetExtensions
\
"
"
)
;
AddProp
(
ss
"
web_socket
"
ToString_PP_Resource
(
web_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
GetExtensions
(
web_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetProtocol_1_0
(
PP_Resource
web_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetProtocol
\
"
"
)
;
AddProp
(
ss
"
web_socket
"
ToString_PP_Resource
(
web_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
GetProtocol
(
web_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_WebSocketReadyState
GetReadyState_1_0
(
PP_Resource
web_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetReadyState
\
"
"
)
;
AddProp
(
ss
"
web_socket
"
ToString_PP_Resource
(
web_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_WebSocketReadyState
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_WebSocketReadyState
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_WebSocketReadyState
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
GetReadyState
(
web_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_WebSocketReadyState
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetURL_1_0
(
PP_Resource
web_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_WebSocket
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetURL
\
"
"
)
;
AddProp
(
ss
"
web_socket
"
ToString_PP_Resource
(
web_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_WebSocket_1_0
*
)
RealGetInterface
(
"
PPB_WebSocket
;
1
.
0
"
)
)
-
>
GetURL
(
web_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_WebSocket_1_0
_PPB_WebSocket_1_0
=
{
ns_PPB_WebSocket_1_0
:
:
Create_1_0
ns_PPB_WebSocket_1_0
:
:
IsWebSocket_1_0
ns_PPB_WebSocket_1_0
:
:
Connect_1_0
ns_PPB_WebSocket_1_0
:
:
Close_1_0
ns_PPB_WebSocket_1_0
:
:
ReceiveMessage_1_0
ns_PPB_WebSocket_1_0
:
:
SendMessage_1_0
ns_PPB_WebSocket_1_0
:
:
GetBufferedAmount_1_0
ns_PPB_WebSocket_1_0
:
:
GetCloseCode_1_0
ns_PPB_WebSocket_1_0
:
:
GetCloseReason_1_0
ns_PPB_WebSocket_1_0
:
:
GetCloseWasClean_1_0
ns_PPB_WebSocket_1_0
:
:
GetExtensions_1_0
ns_PPB_WebSocket_1_0
:
:
GetProtocol_1_0
ns_PPB_WebSocket_1_0
:
:
GetReadyState_1_0
ns_PPB_WebSocket_1_0
:
:
GetURL_1_0
}
;
const
string
ToString_PPB_WebSocket
(
const
PPB_WebSocket_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_InitializeModule_Func
(
const
PP_InitializeModule_Func
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PP_InitializeModule_Func
(
JSONIterator
&
iterator
PP_InitializeModule_Func
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
const
string
ToString_PP_ShutdownModule_Func
(
const
PP_ShutdownModule_Func
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PP_ShutdownModule_Func
(
JSONIterator
&
iterator
PP_ShutdownModule_Func
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
const
string
ToString_PP_GetInterface_Func
(
const
PP_GetInterface_Func
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PP_GetInterface_Func
(
JSONIterator
&
iterator
PP_GetInterface_Func
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
char
*
Call_PPP_Graphics3D_Graphics3DContextLost
(
const
PPP_Graphics3D
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
_interface
-
>
Graphics3DContextLost
(
(
PP_Instance
)
instance
)
;
return
nullptr
;
}
char
*
Call_PPP_Graphics3D
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
Graphics3DContextLost
"
)
)
{
return
Call_PPP_Graphics3D_Graphics3DContextLost
(
(
const
PPP_Graphics3D
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_InputEvent_HandleInputEvent
(
const
PPP_InputEvent
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
input_event
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
input_event
)
;
PP_Bool
rval
;
rval
=
_interface
-
>
HandleInputEvent
(
(
PP_Instance
)
instance
(
PP_Resource
)
input_event
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_InputEvent
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
HandleInputEvent
"
)
)
{
return
Call_PPP_InputEvent_HandleInputEvent
(
(
const
PPP_InputEvent
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_Instance_DidCreate
(
const
PPP_Instance_1_0
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
uint32_t
argc
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
argc
)
;
char
*
*
argn
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
argc
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
argn
=
new
char
*
[
argc
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_str_t
(
iterator
(
argn
)
[
_n
]
)
;
}
}
char
*
*
argv
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
argc
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
argv
=
new
char
*
[
argc
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_str_t
(
iterator
(
argv
)
[
_n
]
)
;
}
}
PP_Bool
rval
;
rval
=
_interface
-
>
DidCreate
(
(
PP_Instance
)
instance
(
uint32_t
)
argc
(
const
char
*
*
)
argn
(
const
char
*
*
)
argv
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Instance_DidDestroy
(
const
PPP_Instance_1_0
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
_interface
-
>
DidDestroy
(
(
PP_Instance
)
instance
)
;
return
nullptr
;
}
char
*
Call_PPP_Instance_DidChangeView
(
const
PPP_Instance_1_0
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
struct
PP_Rect
position
;
iterator
.
skip
(
)
;
FromJSON_PP_Rect
(
iterator
position
)
;
struct
PP_Rect
clip
;
iterator
.
skip
(
)
;
FromJSON_PP_Rect
(
iterator
clip
)
;
_interface
-
>
DidChangeView
(
(
PP_Instance
)
instance
(
const
struct
PP_Rect
*
)
&
position
(
const
struct
PP_Rect
*
)
&
clip
)
;
return
nullptr
;
}
char
*
Call_PPP_Instance_DidChangeFocus
(
const
PPP_Instance_1_0
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Bool
has_focus
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
has_focus
)
;
_interface
-
>
DidChangeFocus
(
(
PP_Instance
)
instance
(
PP_Bool
)
has_focus
)
;
return
nullptr
;
}
char
*
Call_PPP_Instance_HandleDocumentLoad
(
const
PPP_Instance_1_0
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
url_loader
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
url_loader
)
;
PP_Bool
rval
;
rval
=
_interface
-
>
HandleDocumentLoad
(
(
PP_Instance
)
instance
(
PP_Resource
)
url_loader
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Instance_1_0
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
DidCreate
"
)
)
{
return
Call_PPP_Instance_DidCreate
(
(
const
PPP_Instance_1_0
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DidDestroy
"
)
)
{
return
Call_PPP_Instance_DidDestroy
(
(
const
PPP_Instance_1_0
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DidChangeView
"
)
)
{
return
Call_PPP_Instance_DidChangeView
(
(
const
PPP_Instance_1_0
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DidChangeFocus
"
)
)
{
return
Call_PPP_Instance_DidChangeFocus
(
(
const
PPP_Instance_1_0
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
HandleDocumentLoad
"
)
)
{
return
Call_PPP_Instance_HandleDocumentLoad
(
(
const
PPP_Instance_1_0
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_Instance_DidCreate
(
const
PPP_Instance
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
uint32_t
argc
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
argc
)
;
char
*
*
argn
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
argc
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
argn
=
new
char
*
[
argc
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_str_t
(
iterator
(
argn
)
[
_n
]
)
;
}
}
char
*
*
argv
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
argc
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
argv
=
new
char
*
[
argc
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_str_t
(
iterator
(
argv
)
[
_n
]
)
;
}
}
PP_Bool
rval
;
rval
=
_interface
-
>
DidCreate
(
(
PP_Instance
)
instance
(
uint32_t
)
argc
(
const
char
*
*
)
argn
(
const
char
*
*
)
argv
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Instance_DidDestroy
(
const
PPP_Instance
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
_interface
-
>
DidDestroy
(
(
PP_Instance
)
instance
)
;
return
nullptr
;
}
char
*
Call_PPP_Instance_DidChangeView
(
const
PPP_Instance
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
view
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
view
)
;
_interface
-
>
DidChangeView
(
(
PP_Instance
)
instance
(
PP_Resource
)
view
)
;
return
nullptr
;
}
char
*
Call_PPP_Instance_DidChangeFocus
(
const
PPP_Instance
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Bool
has_focus
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
has_focus
)
;
_interface
-
>
DidChangeFocus
(
(
PP_Instance
)
instance
(
PP_Bool
)
has_focus
)
;
return
nullptr
;
}
char
*
Call_PPP_Instance_HandleDocumentLoad
(
const
PPP_Instance
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
url_loader
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
url_loader
)
;
PP_Bool
rval
;
rval
=
_interface
-
>
HandleDocumentLoad
(
(
PP_Instance
)
instance
(
PP_Resource
)
url_loader
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Instance
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
DidCreate
"
)
)
{
return
Call_PPP_Instance_DidCreate
(
(
const
PPP_Instance
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DidDestroy
"
)
)
{
return
Call_PPP_Instance_DidDestroy
(
(
const
PPP_Instance
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DidChangeView
"
)
)
{
return
Call_PPP_Instance_DidChangeView
(
(
const
PPP_Instance
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DidChangeFocus
"
)
)
{
return
Call_PPP_Instance_DidChangeFocus
(
(
const
PPP_Instance
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
HandleDocumentLoad
"
)
)
{
return
Call_PPP_Instance_HandleDocumentLoad
(
(
const
PPP_Instance
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_MessageHandler_HandleMessage
(
const
PPP_MessageHandler
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
void
*
user_data
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
user_data
)
;
struct
PP_Var
message
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
message
)
;
_interface
-
>
HandleMessage
(
(
PP_Instance
)
instance
(
void
*
)
user_data
(
const
struct
PP_Var
*
)
&
message
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_MessageHandler_HandleBlockingMessage
(
const
PPP_MessageHandler
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
void
*
user_data
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
user_data
)
;
struct
PP_Var
message
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
message
)
;
struct
PP_Var
response
;
_interface
-
>
HandleBlockingMessage
(
(
PP_Instance
)
instance
(
void
*
)
user_data
(
const
struct
PP_Var
*
)
&
message
(
struct
PP_Var
*
)
&
response
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
AddProp
(
os
"
response
"
ToString_PP_Var
(
response
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_MessageHandler_Destroy
(
const
PPP_MessageHandler
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
void
*
user_data
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
user_data
)
;
_interface
-
>
Destroy
(
(
PP_Instance
)
instance
(
void
*
)
user_data
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_MessageHandler
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
HandleMessage
"
)
)
{
return
Call_PPP_MessageHandler_HandleMessage
(
(
const
PPP_MessageHandler
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
HandleBlockingMessage
"
)
)
{
return
Call_PPP_MessageHandler_HandleBlockingMessage
(
(
const
PPP_MessageHandler
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
Destroy
"
)
)
{
return
Call_PPP_MessageHandler_Destroy
(
(
const
PPP_MessageHandler
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_Messaging_HandleMessage
(
const
PPP_Messaging
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
struct
PP_Var
message
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
message
)
;
_interface
-
>
HandleMessage
(
(
PP_Instance
)
instance
(
struct
PP_Var
)
message
)
;
return
nullptr
;
}
char
*
Call_PPP_Messaging
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
HandleMessage
"
)
)
{
return
Call_PPP_Messaging_HandleMessage
(
(
const
PPP_Messaging
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_MouseLock_MouseLockLost
(
const
PPP_MouseLock
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
_interface
-
>
MouseLockLost
(
(
PP_Instance
)
instance
)
;
return
nullptr
;
}
char
*
Call_PPP_MouseLock
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
MouseLockLost
"
)
)
{
return
Call_PPP_MouseLock_MouseLockLost
(
(
const
PPP_MouseLock
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
namespace
ns_PPB_BrokerTrusted_0_2
{
static
PP_Resource
CreateTrusted_0_2
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrokerTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateTrusted
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_BrokerTrusted_0_2
*
)
RealGetInterface
(
"
PPB_BrokerTrusted
;
0
.
2
"
)
)
-
>
CreateTrusted
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsBrokerTrusted_0_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrokerTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsBrokerTrusted
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_BrokerTrusted_0_2
*
)
RealGetInterface
(
"
PPB_BrokerTrusted
;
0
.
2
"
)
)
-
>
IsBrokerTrusted
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Connect_0_2
(
PP_Resource
broker
struct
PP_CompletionCallback
connect_callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrokerTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Connect
\
"
"
)
;
AddProp
(
ss
"
broker
"
ToString_PP_Resource
(
broker
)
)
;
AddProp
(
ss
"
connect_callback
"
ToString_PP_CompletionCallback
(
connect_callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_connect_callback
;
logging_connect_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_connect_callback
.
user_data
=
new
PP_CompletionCallback
(
connect_callback
)
;
logging_connect_callback
.
flags
=
connect_callback
.
flags
;
int32_t
rval
=
(
(
PPB_BrokerTrusted_0_2
*
)
RealGetInterface
(
"
PPB_BrokerTrusted
;
0
.
2
"
)
)
-
>
Connect
(
broker
logging_connect_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetHandle_0_2
(
PP_Resource
broker
int32_t
*
handle
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrokerTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetHandle
\
"
"
)
;
AddProp
(
ss
"
broker
"
ToString_PP_Resource
(
broker
)
)
;
AddProp
(
ss
"
handle
"
PointerToString
(
handle
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
*
handle
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_BrokerTrusted_0_2
*
)
RealGetInterface
(
"
PPB_BrokerTrusted
;
0
.
2
"
)
)
-
>
GetHandle
(
broker
handle
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
handle
)
{
AddProp
(
os
"
handle
"
ToString_int32_t
(
handle
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_BrokerTrusted_0_2
_PPB_BrokerTrusted_0_2
=
{
ns_PPB_BrokerTrusted_0_2
:
:
CreateTrusted_0_2
ns_PPB_BrokerTrusted_0_2
:
:
IsBrokerTrusted_0_2
ns_PPB_BrokerTrusted_0_2
:
:
Connect_0_2
ns_PPB_BrokerTrusted_0_2
:
:
GetHandle_0_2
}
;
const
string
ToString_PPB_BrokerTrusted
(
const
PPB_BrokerTrusted_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_BrokerTrusted_0_3
{
static
PP_Resource
CreateTrusted_0_3
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrokerTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateTrusted
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_BrokerTrusted_0_3
*
)
RealGetInterface
(
"
PPB_BrokerTrusted
;
0
.
3
"
)
)
-
>
CreateTrusted
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsBrokerTrusted_0_3
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrokerTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsBrokerTrusted
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_BrokerTrusted_0_3
*
)
RealGetInterface
(
"
PPB_BrokerTrusted
;
0
.
3
"
)
)
-
>
IsBrokerTrusted
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Connect_0_3
(
PP_Resource
broker
struct
PP_CompletionCallback
connect_callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrokerTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Connect
\
"
"
)
;
AddProp
(
ss
"
broker
"
ToString_PP_Resource
(
broker
)
)
;
AddProp
(
ss
"
connect_callback
"
ToString_PP_CompletionCallback
(
connect_callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_connect_callback
;
logging_connect_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_connect_callback
.
user_data
=
new
PP_CompletionCallback
(
connect_callback
)
;
logging_connect_callback
.
flags
=
connect_callback
.
flags
;
int32_t
rval
=
(
(
PPB_BrokerTrusted_0_3
*
)
RealGetInterface
(
"
PPB_BrokerTrusted
;
0
.
3
"
)
)
-
>
Connect
(
broker
logging_connect_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetHandle_0_3
(
PP_Resource
broker
int32_t
*
handle
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrokerTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetHandle
\
"
"
)
;
AddProp
(
ss
"
broker
"
ToString_PP_Resource
(
broker
)
)
;
AddProp
(
ss
"
handle
"
PointerToString
(
handle
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
*
handle
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_BrokerTrusted_0_3
*
)
RealGetInterface
(
"
PPB_BrokerTrusted
;
0
.
3
"
)
)
-
>
GetHandle
(
broker
handle
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
handle
)
{
AddProp
(
os
"
handle
"
ToString_int32_t
(
handle
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsAllowed_0_3
(
PP_Resource
broker
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrokerTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsAllowed
\
"
"
)
;
AddProp
(
ss
"
broker
"
ToString_PP_Resource
(
broker
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_BrokerTrusted_0_3
*
)
RealGetInterface
(
"
PPB_BrokerTrusted
;
0
.
3
"
)
)
-
>
IsAllowed
(
broker
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_BrokerTrusted_0_3
_PPB_BrokerTrusted_0_3
=
{
ns_PPB_BrokerTrusted_0_3
:
:
CreateTrusted_0_3
ns_PPB_BrokerTrusted_0_3
:
:
IsBrokerTrusted_0_3
ns_PPB_BrokerTrusted_0_3
:
:
Connect_0_3
ns_PPB_BrokerTrusted_0_3
:
:
GetHandle_0_3
ns_PPB_BrokerTrusted_0_3
:
:
IsAllowed_0_3
}
;
const
string
ToString_PPB_BrokerTrusted
(
const
PPB_BrokerTrusted_0_3
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_BrowserFont_Trusted_Family
(
const
PP_BrowserFont_Trusted_Family
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_FAMILY_DEFAULT
\
"
"
;
case
1
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_FAMILY_SERIF
\
"
"
;
case
2
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_FAMILY_SANSSERIF
\
"
"
;
case
3
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_FAMILY_MONOSPACE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_BrowserFont_Trusted_Family
(
const
PP_BrowserFont_Trusted_Family
&
v
)
{
return
ToString_PP_BrowserFont_Trusted_Family
(
&
v
)
;
}
void
FromJSON_PP_BrowserFont_Trusted_Family
(
JSONIterator
&
iterator
PP_BrowserFont_Trusted_Family
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_BrowserFont_Trusted_Family
(
v
)
;
}
const
string
ToString_PP_BrowserFont_Trusted_Weight
(
const
PP_BrowserFont_Trusted_Weight
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_WEIGHT_100
\
"
"
;
case
1
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_WEIGHT_200
\
"
"
;
case
2
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_WEIGHT_300
\
"
"
;
case
3
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_WEIGHT_400
\
"
"
;
case
4
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_WEIGHT_500
\
"
"
;
case
5
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_WEIGHT_600
\
"
"
;
case
6
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_WEIGHT_700
\
"
"
;
case
7
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_WEIGHT_800
\
"
"
;
case
8
:
return
"
\
"
PP_BROWSERFONT_TRUSTED_WEIGHT_900
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_BrowserFont_Trusted_Weight
(
const
PP_BrowserFont_Trusted_Weight
&
v
)
{
return
ToString_PP_BrowserFont_Trusted_Weight
(
&
v
)
;
}
void
FromJSON_PP_BrowserFont_Trusted_Weight
(
JSONIterator
&
iterator
PP_BrowserFont_Trusted_Weight
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_BrowserFont_Trusted_Weight
(
v
)
;
}
const
string
ToString_PP_BrowserFont_Trusted_Description
(
const
PP_BrowserFont_Trusted_Description
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_BrowserFont_Trusted_Description
(
*
v
)
;
}
const
string
ToString_PP_BrowserFont_Trusted_Description
(
const
PP_BrowserFont_Trusted_Description
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
face
"
ToString_PP_Var
(
v
.
face
)
)
;
AddProp
(
x
"
family
"
ToString_PP_BrowserFont_Trusted_Family
(
v
.
family
)
)
;
AddProp
(
x
"
size
"
ToString_uint32_t
(
v
.
size
)
)
;
AddProp
(
x
"
weight
"
ToString_PP_BrowserFont_Trusted_Weight
(
v
.
weight
)
)
;
AddProp
(
x
"
italic
"
ToString_PP_Bool
(
v
.
italic
)
)
;
AddProp
(
x
"
small_caps
"
ToString_PP_Bool
(
v
.
small_caps
)
)
;
AddProp
(
x
"
letter_spacing
"
ToString_int32_t
(
v
.
letter_spacing
)
)
;
AddProp
(
x
"
word_spacing
"
ToString_int32_t
(
v
.
word_spacing
)
)
;
AddProp
(
x
"
padding
"
ToString_int32_t
(
v
.
padding
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_BrowserFont_Trusted_Description
(
JSONIterator
&
iterator
PP_BrowserFont_Trusted_Description
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
value
.
face
)
;
iterator
.
skip
(
)
;
FromJSON_PP_BrowserFont_Trusted_Family
(
iterator
value
.
family
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
size
)
;
iterator
.
skip
(
)
;
FromJSON_PP_BrowserFont_Trusted_Weight
(
iterator
value
.
weight
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
italic
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
small_caps
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
letter_spacing
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
word_spacing
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
padding
)
;
}
const
string
ToString_PP_BrowserFont_Trusted_Metrics
(
const
PP_BrowserFont_Trusted_Metrics
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_BrowserFont_Trusted_Metrics
(
*
v
)
;
}
const
string
ToString_PP_BrowserFont_Trusted_Metrics
(
const
PP_BrowserFont_Trusted_Metrics
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
height
"
ToString_int32_t
(
v
.
height
)
)
;
AddProp
(
x
"
ascent
"
ToString_int32_t
(
v
.
ascent
)
)
;
AddProp
(
x
"
descent
"
ToString_int32_t
(
v
.
descent
)
)
;
AddProp
(
x
"
line_spacing
"
ToString_int32_t
(
v
.
line_spacing
)
)
;
AddProp
(
x
"
x_height
"
ToString_int32_t
(
v
.
x_height
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_BrowserFont_Trusted_Metrics
(
JSONIterator
&
iterator
PP_BrowserFont_Trusted_Metrics
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
height
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
ascent
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
descent
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
line_spacing
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
x_height
)
;
}
const
string
ToString_PP_BrowserFont_Trusted_TextRun
(
const
PP_BrowserFont_Trusted_TextRun
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_BrowserFont_Trusted_TextRun
(
*
v
)
;
}
const
string
ToString_PP_BrowserFont_Trusted_TextRun
(
const
PP_BrowserFont_Trusted_TextRun
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
text
"
ToString_PP_Var
(
v
.
text
)
)
;
AddProp
(
x
"
rtl
"
ToString_PP_Bool
(
v
.
rtl
)
)
;
AddProp
(
x
"
override_direction
"
ToString_PP_Bool
(
v
.
override_direction
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_BrowserFont_Trusted_TextRun
(
JSONIterator
&
iterator
PP_BrowserFont_Trusted_TextRun
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
value
.
text
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
rtl
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
override_direction
)
;
}
namespace
ns_PPB_BrowserFont_Trusted_1_0
{
static
struct
PP_Var
GetFontFamilies_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrowserFont_Trusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFontFamilies
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_BrowserFont_Trusted_1_0
*
)
RealGetInterface
(
"
PPB_BrowserFont_Trusted
;
1
.
0
"
)
)
-
>
GetFontFamilies
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
Create_1_0
(
PP_Instance
instance
const
struct
PP_BrowserFont_Trusted_Description
*
description
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrowserFont_Trusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
description
"
ToString_PP_BrowserFont_Trusted_Description
(
description
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_BrowserFont_Trusted_1_0
*
)
RealGetInterface
(
"
PPB_BrowserFont_Trusted
;
1
.
0
"
)
)
-
>
Create
(
instance
description
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFont_1_0
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrowserFont_Trusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFont
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_BrowserFont_Trusted_1_0
*
)
RealGetInterface
(
"
PPB_BrowserFont_Trusted
;
1
.
0
"
)
)
-
>
IsFont
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
Describe_1_0
(
PP_Resource
font
struct
PP_BrowserFont_Trusted_Description
*
description
struct
PP_BrowserFont_Trusted_Metrics
*
metrics
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrowserFont_Trusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Describe
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
description
"
PointerToString
(
description
)
)
;
AddProp
(
ss
"
metrics
"
PointerToString
(
metrics
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
description
)
{
iterator
.
skip
(
)
;
FromJSON_PP_BrowserFont_Trusted_Description
(
iterator
*
description
)
;
}
if
(
!
!
metrics
)
{
iterator
.
skip
(
)
;
FromJSON_PP_BrowserFont_Trusted_Metrics
(
iterator
*
metrics
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_BrowserFont_Trusted_1_0
*
)
RealGetInterface
(
"
PPB_BrowserFont_Trusted
;
1
.
0
"
)
)
-
>
Describe
(
font
description
metrics
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
description
)
{
AddProp
(
os
"
description
"
ToString_PP_BrowserFont_Trusted_Description
(
description
)
)
;
}
if
(
!
!
metrics
)
{
AddProp
(
os
"
metrics
"
ToString_PP_BrowserFont_Trusted_Metrics
(
metrics
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
DrawTextAt_1_0
(
PP_Resource
font
PP_Resource
image_data
const
struct
PP_BrowserFont_Trusted_TextRun
*
text
const
struct
PP_Point
*
position
uint32_t
color
const
struct
PP_Rect
*
clip
PP_Bool
image_data_is_opaque
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrowserFont_Trusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DrawTextAt
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
AddProp
(
ss
"
text
"
ToString_PP_BrowserFont_Trusted_TextRun
(
text
)
)
;
AddProp
(
ss
"
position
"
ToString_PP_Point
(
position
)
)
;
AddProp
(
ss
"
color
"
ToString_uint32_t
(
color
)
)
;
AddProp
(
ss
"
clip
"
ToString_PP_Rect
(
clip
)
)
;
AddProp
(
ss
"
image_data_is_opaque
"
ToString_PP_Bool
(
image_data_is_opaque
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_BrowserFont_Trusted_1_0
*
)
RealGetInterface
(
"
PPB_BrowserFont_Trusted
;
1
.
0
"
)
)
-
>
DrawTextAt
(
font
image_data
text
position
color
clip
image_data_is_opaque
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
MeasureText_1_0
(
PP_Resource
font
const
struct
PP_BrowserFont_Trusted_TextRun
*
text
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrowserFont_Trusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MeasureText
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
text
"
ToString_PP_BrowserFont_Trusted_TextRun
(
text
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_BrowserFont_Trusted_1_0
*
)
RealGetInterface
(
"
PPB_BrowserFont_Trusted
;
1
.
0
"
)
)
-
>
MeasureText
(
font
text
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
CharacterOffsetForPixel_1_0
(
PP_Resource
font
const
struct
PP_BrowserFont_Trusted_TextRun
*
text
int32_t
pixel_position
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrowserFont_Trusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CharacterOffsetForPixel
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
text
"
ToString_PP_BrowserFont_Trusted_TextRun
(
text
)
)
;
AddProp
(
ss
"
pixel_position
"
ToString_int32_t
(
pixel_position
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_BrowserFont_Trusted_1_0
*
)
RealGetInterface
(
"
PPB_BrowserFont_Trusted
;
1
.
0
"
)
)
-
>
CharacterOffsetForPixel
(
font
text
pixel_position
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
PixelOffsetForCharacter_1_0
(
PP_Resource
font
const
struct
PP_BrowserFont_Trusted_TextRun
*
text
uint32_t
char_offset
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_BrowserFont_Trusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PixelOffsetForCharacter
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
text
"
ToString_PP_BrowserFont_Trusted_TextRun
(
text
)
)
;
AddProp
(
ss
"
char_offset
"
ToString_uint32_t
(
char_offset
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_BrowserFont_Trusted_1_0
*
)
RealGetInterface
(
"
PPB_BrowserFont_Trusted
;
1
.
0
"
)
)
-
>
PixelOffsetForCharacter
(
font
text
char_offset
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_BrowserFont_Trusted_1_0
_PPB_BrowserFont_Trusted_1_0
=
{
ns_PPB_BrowserFont_Trusted_1_0
:
:
GetFontFamilies_1_0
ns_PPB_BrowserFont_Trusted_1_0
:
:
Create_1_0
ns_PPB_BrowserFont_Trusted_1_0
:
:
IsFont_1_0
ns_PPB_BrowserFont_Trusted_1_0
:
:
Describe_1_0
ns_PPB_BrowserFont_Trusted_1_0
:
:
DrawTextAt_1_0
ns_PPB_BrowserFont_Trusted_1_0
:
:
MeasureText_1_0
ns_PPB_BrowserFont_Trusted_1_0
:
:
CharacterOffsetForPixel_1_0
ns_PPB_BrowserFont_Trusted_1_0
:
:
PixelOffsetForCharacter_1_0
}
;
const
string
ToString_PPB_BrowserFont_Trusted
(
const
PPB_BrowserFont_Trusted_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_CharSet_Trusted_ConversionError
(
const
PP_CharSet_Trusted_ConversionError
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_CHARSET_TRUSTED_CONVERSIONERROR_FAIL
\
"
"
;
case
1
:
return
"
\
"
PP_CHARSET_TRUSTED_CONVERSIONERROR_SKIP
\
"
"
;
case
2
:
return
"
\
"
PP_CHARSET_TRUSTED_CONVERSIONERROR_SUBSTITUTE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_CharSet_Trusted_ConversionError
(
const
PP_CharSet_Trusted_ConversionError
&
v
)
{
return
ToString_PP_CharSet_Trusted_ConversionError
(
&
v
)
;
}
void
FromJSON_PP_CharSet_Trusted_ConversionError
(
JSONIterator
&
iterator
PP_CharSet_Trusted_ConversionError
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_CharSet_Trusted_ConversionError
(
v
)
;
}
namespace
ns_PPB_CharSet_Trusted_1_0
{
static
PP_Bool
UTF16ToCharSet_1_0
(
const
uint16_t
utf16
[
]
uint32_t
utf16_len
const
char
*
output_char_set
PP_CharSet_Trusted_ConversionError
on_error
char
*
output_buffer
uint32_t
*
output_length
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CharSet_Trusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UTF16ToCharSet
\
"
"
)
;
{
BeginProp
(
ss
"
utf16
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
utf16_len
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint16_t
(
utf16
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
utf16_len
"
ToString_uint32_t
(
utf16_len
)
)
;
AddProp
(
ss
"
output_char_set
"
ToString_str_t
(
output_char_set
)
)
;
AddProp
(
ss
"
on_error
"
ToString_PP_CharSet_Trusted_ConversionError
(
on_error
)
)
;
AddProp
(
ss
"
output_buffer
"
PointerToString
(
output_buffer
)
)
;
AddProp
(
ss
"
output_length
"
ToString_uint32_t
(
output_length
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
output_buffer
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
output_length
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_CharSet_Trusted_1_0
*
)
RealGetInterface
(
"
PPB_CharSet_Trusted
;
1
.
0
"
)
)
-
>
UTF16ToCharSet
(
utf16
utf16_len
output_char_set
on_error
output_buffer
output_length
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
output_buffer
"
ToString_str_t
(
output_buffer
)
)
;
AddProp
(
os
"
output_length
"
ToString_uint32_t
(
output_length
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
CharSetToUTF16_1_0
(
const
char
*
input
uint32_t
input_len
const
char
*
input_char_set
PP_CharSet_Trusted_ConversionError
on_error
uint16_t
*
output_buffer
uint32_t
*
output_utf16_length
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CharSet_Trusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CharSetToUTF16
\
"
"
)
;
AddProp
(
ss
"
input
"
ToString_str_t
(
input
)
)
;
AddProp
(
ss
"
input_len
"
ToString_uint32_t
(
input_len
)
)
;
AddProp
(
ss
"
input_char_set
"
ToString_str_t
(
input_char_set
)
)
;
AddProp
(
ss
"
on_error
"
ToString_PP_CharSet_Trusted_ConversionError
(
on_error
)
)
;
AddProp
(
ss
"
output_buffer
"
PointerToString
(
output_buffer
)
)
;
AddProp
(
ss
"
output_utf16_length
"
ToString_uint32_t
(
output_utf16_length
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint16_t
(
iterator
*
output_buffer
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
output_utf16_length
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_CharSet_Trusted_1_0
*
)
RealGetInterface
(
"
PPB_CharSet_Trusted
;
1
.
0
"
)
)
-
>
CharSetToUTF16
(
input
input_len
input_char_set
on_error
output_buffer
output_utf16_length
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
output_buffer
)
{
AddProp
(
os
"
output_buffer
"
ToString_uint16_t
(
output_buffer
)
)
;
}
AddProp
(
os
"
output_utf16_length
"
ToString_uint32_t
(
output_utf16_length
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetDefaultCharSet_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CharSet_Trusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDefaultCharSet
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_CharSet_Trusted_1_0
*
)
RealGetInterface
(
"
PPB_CharSet_Trusted
;
1
.
0
"
)
)
-
>
GetDefaultCharSet
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_CharSet_Trusted_1_0
_PPB_CharSet_Trusted_1_0
=
{
ns_PPB_CharSet_Trusted_1_0
:
:
UTF16ToCharSet_1_0
ns_PPB_CharSet_Trusted_1_0
:
:
CharSetToUTF16_1_0
ns_PPB_CharSet_Trusted_1_0
:
:
GetDefaultCharSet_1_0
}
;
const
string
ToString_PPB_CharSet_Trusted
(
const
PPB_CharSet_Trusted_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_FileChooserTrusted_0_5
{
static
int32_t
ShowWithoutUserGesture_0_5
(
PP_Resource
chooser
PP_Bool
save_as
struct
PP_Var
suggested_file_name
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileChooserTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ShowWithoutUserGesture
\
"
"
)
;
AddProp
(
ss
"
chooser
"
ToString_PP_Resource
(
chooser
)
)
;
AddProp
(
ss
"
save_as
"
ToString_PP_Bool
(
save_as
)
)
;
AddProp
(
ss
"
suggested_file_name
"
ToString_PP_Var
(
suggested_file_name
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileChooserTrusted_0_5
*
)
RealGetInterface
(
"
PPB_FileChooserTrusted
;
0
.
5
"
)
)
-
>
ShowWithoutUserGesture
(
chooser
save_as
suggested_file_name
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FileChooserTrusted_0_5
_PPB_FileChooserTrusted_0_5
=
{
ns_PPB_FileChooserTrusted_0_5
:
:
ShowWithoutUserGesture_0_5
}
;
const
string
ToString_PPB_FileChooserTrusted
(
const
PPB_FileChooserTrusted_0_5
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_FileChooserTrusted_0_6
{
static
int32_t
ShowWithoutUserGesture_0_6
(
PP_Resource
chooser
PP_Bool
save_as
struct
PP_Var
suggested_file_name
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileChooserTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ShowWithoutUserGesture
\
"
"
)
;
AddProp
(
ss
"
chooser
"
ToString_PP_Resource
(
chooser
)
)
;
AddProp
(
ss
"
save_as
"
ToString_PP_Bool
(
save_as
)
)
;
AddProp
(
ss
"
suggested_file_name
"
ToString_PP_Var
(
suggested_file_name
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileChooserTrusted_0_6
*
)
RealGetInterface
(
"
PPB_FileChooserTrusted
;
0
.
6
"
)
)
-
>
ShowWithoutUserGesture
(
chooser
save_as
suggested_file_name
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FileChooserTrusted_0_6
_PPB_FileChooserTrusted_0_6
=
{
ns_PPB_FileChooserTrusted_0_6
:
:
ShowWithoutUserGesture_0_6
}
;
const
string
ToString_PPB_FileChooserTrusted
(
const
PPB_FileChooserTrusted_0_6
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_URLLoaderTrusted_StatusCallback
(
const
PP_URLLoaderTrusted_StatusCallback
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PP_URLLoaderTrusted_StatusCallback
(
JSONIterator
&
iterator
PP_URLLoaderTrusted_StatusCallback
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
namespace
ns_PPB_URLLoaderTrusted_0_3
{
static
void
GrantUniversalAccess_0_3
(
PP_Resource
loader
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLLoaderTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GrantUniversalAccess
\
"
"
)
;
AddProp
(
ss
"
loader
"
ToString_PP_Resource
(
loader
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_URLLoaderTrusted_0_3
*
)
RealGetInterface
(
"
PPB_URLLoaderTrusted
;
0
.
3
"
)
)
-
>
GrantUniversalAccess
(
loader
)
;
#
endif
}
static
void
RegisterStatusCallback_0_3
(
PP_Resource
loader
PP_URLLoaderTrusted_StatusCallback
cb
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLLoaderTrusted
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RegisterStatusCallback
\
"
"
)
;
AddProp
(
ss
"
loader
"
ToString_PP_Resource
(
loader
)
)
;
AddProp
(
ss
"
cb
"
ToString_PP_URLLoaderTrusted_StatusCallback
(
cb
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_URLLoaderTrusted_0_3
*
)
RealGetInterface
(
"
PPB_URLLoaderTrusted
;
0
.
3
"
)
)
-
>
RegisterStatusCallback
(
loader
cb
)
;
#
endif
}
}
static
PPB_URLLoaderTrusted_0_3
_PPB_URLLoaderTrusted_0_3
=
{
ns_PPB_URLLoaderTrusted_0_3
:
:
GrantUniversalAccess_0_3
ns_PPB_URLLoaderTrusted_0_3
:
:
RegisterStatusCallback_0_3
}
;
const
string
ToString_PPB_URLLoaderTrusted
(
const
PPB_URLLoaderTrusted_0_3
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_CursorType_Dev
(
const
PP_CursorType_Dev
*
v
)
{
switch
(
*
v
)
{
case
-
1
:
return
"
\
"
PP_CURSORTYPE_CUSTOM
\
"
"
;
case
0
:
return
"
\
"
PP_CURSORTYPE_POINTER
\
"
"
;
case
1
:
return
"
\
"
PP_CURSORTYPE_CROSS
\
"
"
;
case
2
:
return
"
\
"
PP_CURSORTYPE_HAND
\
"
"
;
case
3
:
return
"
\
"
PP_CURSORTYPE_IBEAM
\
"
"
;
case
4
:
return
"
\
"
PP_CURSORTYPE_WAIT
\
"
"
;
case
5
:
return
"
\
"
PP_CURSORTYPE_HELP
\
"
"
;
case
6
:
return
"
\
"
PP_CURSORTYPE_EASTRESIZE
\
"
"
;
case
7
:
return
"
\
"
PP_CURSORTYPE_NORTHRESIZE
\
"
"
;
case
8
:
return
"
\
"
PP_CURSORTYPE_NORTHEASTRESIZE
\
"
"
;
case
9
:
return
"
\
"
PP_CURSORTYPE_NORTHWESTRESIZE
\
"
"
;
case
10
:
return
"
\
"
PP_CURSORTYPE_SOUTHRESIZE
\
"
"
;
case
11
:
return
"
\
"
PP_CURSORTYPE_SOUTHEASTRESIZE
\
"
"
;
case
12
:
return
"
\
"
PP_CURSORTYPE_SOUTHWESTRESIZE
\
"
"
;
case
13
:
return
"
\
"
PP_CURSORTYPE_WESTRESIZE
\
"
"
;
case
14
:
return
"
\
"
PP_CURSORTYPE_NORTHSOUTHRESIZE
\
"
"
;
case
15
:
return
"
\
"
PP_CURSORTYPE_EASTWESTRESIZE
\
"
"
;
case
16
:
return
"
\
"
PP_CURSORTYPE_NORTHEASTSOUTHWESTRESIZE
\
"
"
;
case
17
:
return
"
\
"
PP_CURSORTYPE_NORTHWESTSOUTHEASTRESIZE
\
"
"
;
case
18
:
return
"
\
"
PP_CURSORTYPE_COLUMNRESIZE
\
"
"
;
case
19
:
return
"
\
"
PP_CURSORTYPE_ROWRESIZE
\
"
"
;
case
20
:
return
"
\
"
PP_CURSORTYPE_MIDDLEPANNING
\
"
"
;
case
21
:
return
"
\
"
PP_CURSORTYPE_EASTPANNING
\
"
"
;
case
22
:
return
"
\
"
PP_CURSORTYPE_NORTHPANNING
\
"
"
;
case
23
:
return
"
\
"
PP_CURSORTYPE_NORTHEASTPANNING
\
"
"
;
case
24
:
return
"
\
"
PP_CURSORTYPE_NORTHWESTPANNING
\
"
"
;
case
25
:
return
"
\
"
PP_CURSORTYPE_SOUTHPANNING
\
"
"
;
case
26
:
return
"
\
"
PP_CURSORTYPE_SOUTHEASTPANNING
\
"
"
;
case
27
:
return
"
\
"
PP_CURSORTYPE_SOUTHWESTPANNING
\
"
"
;
case
28
:
return
"
\
"
PP_CURSORTYPE_WESTPANNING
\
"
"
;
case
29
:
return
"
\
"
PP_CURSORTYPE_MOVE
\
"
"
;
case
30
:
return
"
\
"
PP_CURSORTYPE_VERTICALTEXT
\
"
"
;
case
31
:
return
"
\
"
PP_CURSORTYPE_CELL
\
"
"
;
case
32
:
return
"
\
"
PP_CURSORTYPE_CONTEXTMENU
\
"
"
;
case
33
:
return
"
\
"
PP_CURSORTYPE_ALIAS
\
"
"
;
case
34
:
return
"
\
"
PP_CURSORTYPE_PROGRESS
\
"
"
;
case
35
:
return
"
\
"
PP_CURSORTYPE_NODROP
\
"
"
;
case
36
:
return
"
\
"
PP_CURSORTYPE_COPY
\
"
"
;
case
37
:
return
"
\
"
PP_CURSORTYPE_NONE
\
"
"
;
case
38
:
return
"
\
"
PP_CURSORTYPE_NOTALLOWED
\
"
"
;
case
39
:
return
"
\
"
PP_CURSORTYPE_ZOOMIN
\
"
"
;
case
40
:
return
"
\
"
PP_CURSORTYPE_ZOOMOUT
\
"
"
;
case
41
:
return
"
\
"
PP_CURSORTYPE_GRAB
\
"
"
;
case
42
:
return
"
\
"
PP_CURSORTYPE_GRABBING
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_CursorType_Dev
(
const
PP_CursorType_Dev
&
v
)
{
return
ToString_PP_CursorType_Dev
(
&
v
)
;
}
void
FromJSON_PP_CursorType_Dev
(
JSONIterator
&
iterator
PP_CursorType_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_CursorType_Dev
(
v
)
;
}
const
string
ToString_PP_PrintOrientation_Dev
(
const
PP_PrintOrientation_Dev
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_PRINTORIENTATION_NORMAL
\
"
"
;
case
1
:
return
"
\
"
PP_PRINTORIENTATION_ROTATED_90_CW
\
"
"
;
case
2
:
return
"
\
"
PP_PRINTORIENTATION_ROTATED_180
\
"
"
;
case
3
:
return
"
\
"
PP_PRINTORIENTATION_ROTATED_90_CCW
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_PrintOrientation_Dev
(
const
PP_PrintOrientation_Dev
&
v
)
{
return
ToString_PP_PrintOrientation_Dev
(
&
v
)
;
}
void
FromJSON_PP_PrintOrientation_Dev
(
JSONIterator
&
iterator
PP_PrintOrientation_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_PrintOrientation_Dev
(
v
)
;
}
const
string
ToString_PP_PrintOutputFormat_Dev
(
const
PP_PrintOutputFormat_Dev
*
v
)
{
switch
(
*
v
)
{
case
1u
<
<
0
:
return
"
\
"
PP_PRINTOUTPUTFORMAT_RASTER
\
"
"
;
case
1u
<
<
1
:
return
"
\
"
PP_PRINTOUTPUTFORMAT_PDF
\
"
"
;
case
1u
<
<
2
:
return
"
\
"
PP_PRINTOUTPUTFORMAT_POSTSCRIPT
\
"
"
;
case
1u
<
<
3
:
return
"
\
"
PP_PRINTOUTPUTFORMAT_EMF
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_PrintOutputFormat_Dev
(
const
PP_PrintOutputFormat_Dev
&
v
)
{
return
ToString_PP_PrintOutputFormat_Dev
(
&
v
)
;
}
void
FromJSON_PP_PrintOutputFormat_Dev
(
JSONIterator
&
iterator
PP_PrintOutputFormat_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_PrintOutputFormat_Dev
(
v
)
;
}
const
string
ToString_PP_PrintScalingOption_Dev
(
const
PP_PrintScalingOption_Dev
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_PRINTSCALINGOPTION_NONE
\
"
"
;
case
1
:
return
"
\
"
PP_PRINTSCALINGOPTION_FIT_TO_PRINTABLE_AREA
\
"
"
;
case
2
:
return
"
\
"
PP_PRINTSCALINGOPTION_SOURCE_SIZE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_PrintScalingOption_Dev
(
const
PP_PrintScalingOption_Dev
&
v
)
{
return
ToString_PP_PrintScalingOption_Dev
(
&
v
)
;
}
void
FromJSON_PP_PrintScalingOption_Dev
(
JSONIterator
&
iterator
PP_PrintScalingOption_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_PrintScalingOption_Dev
(
v
)
;
}
const
string
ToString_PP_PrintSettings_Dev
(
const
PP_PrintSettings_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_PrintSettings_Dev
(
*
v
)
;
}
const
string
ToString_PP_PrintSettings_Dev
(
const
PP_PrintSettings_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
printable_area
"
ToString_PP_Rect
(
v
.
printable_area
)
)
;
AddProp
(
x
"
content_area
"
ToString_PP_Rect
(
v
.
content_area
)
)
;
AddProp
(
x
"
paper_size
"
ToString_PP_Size
(
v
.
paper_size
)
)
;
AddProp
(
x
"
dpi
"
ToString_int32_t
(
v
.
dpi
)
)
;
AddProp
(
x
"
orientation
"
ToString_PP_PrintOrientation_Dev
(
v
.
orientation
)
)
;
AddProp
(
x
"
print_scaling_option
"
ToString_PP_PrintScalingOption_Dev
(
v
.
print_scaling_option
)
)
;
AddProp
(
x
"
grayscale
"
ToString_PP_Bool
(
v
.
grayscale
)
)
;
AddProp
(
x
"
format
"
ToString_PP_PrintOutputFormat_Dev
(
v
.
format
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_PrintSettings_Dev
(
JSONIterator
&
iterator
PP_PrintSettings_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Rect
(
iterator
value
.
printable_area
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Rect
(
iterator
value
.
content_area
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
value
.
paper_size
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
dpi
)
;
iterator
.
skip
(
)
;
FromJSON_PP_PrintOrientation_Dev
(
iterator
value
.
orientation
)
;
iterator
.
skip
(
)
;
FromJSON_PP_PrintScalingOption_Dev
(
iterator
value
.
print_scaling_option
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
grayscale
)
;
iterator
.
skip
(
)
;
FromJSON_PP_PrintOutputFormat_Dev
(
iterator
value
.
format
)
;
}
const
string
ToString_PP_VideoCaptureDeviceInfo_Dev
(
const
PP_VideoCaptureDeviceInfo_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_VideoCaptureDeviceInfo_Dev
(
*
v
)
;
}
const
string
ToString_PP_VideoCaptureDeviceInfo_Dev
(
const
PP_VideoCaptureDeviceInfo_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
width
"
ToString_uint32_t
(
v
.
width
)
)
;
AddProp
(
x
"
height
"
ToString_uint32_t
(
v
.
height
)
)
;
AddProp
(
x
"
frames_per_second
"
ToString_uint32_t
(
v
.
frames_per_second
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_VideoCaptureDeviceInfo_Dev
(
JSONIterator
&
iterator
PP_VideoCaptureDeviceInfo_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
width
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
height
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
frames_per_second
)
;
}
const
string
ToString_PP_VideoCaptureStatus_Dev
(
const
PP_VideoCaptureStatus_Dev
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_VIDEO_CAPTURE_STATUS_STOPPED
\
"
"
;
case
1
:
return
"
\
"
PP_VIDEO_CAPTURE_STATUS_STARTING
\
"
"
;
case
2
:
return
"
\
"
PP_VIDEO_CAPTURE_STATUS_STARTED
\
"
"
;
case
3
:
return
"
\
"
PP_VIDEO_CAPTURE_STATUS_PAUSED
\
"
"
;
case
4
:
return
"
\
"
PP_VIDEO_CAPTURE_STATUS_STOPPING
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_VideoCaptureStatus_Dev
(
const
PP_VideoCaptureStatus_Dev
&
v
)
{
return
ToString_PP_VideoCaptureStatus_Dev
(
&
v
)
;
}
void
FromJSON_PP_VideoCaptureStatus_Dev
(
JSONIterator
&
iterator
PP_VideoCaptureStatus_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_VideoCaptureStatus_Dev
(
v
)
;
}
const
string
ToString_PP_VideoDecoder_Profile
(
const
PP_VideoDecoder_Profile
*
v
)
{
switch
(
*
v
)
{
case
-
1
:
return
"
\
"
PP_VIDEODECODER_PROFILE_UNKNOWN
\
"
"
;
case
0
:
return
"
\
"
PP_VIDEODECODER_H264PROFILE_NONE
\
"
"
;
case
1
:
return
"
\
"
PP_VIDEODECODER_H264PROFILE_BASELINE
\
"
"
;
case
2
:
return
"
\
"
PP_VIDEODECODER_H264PROFILE_MAIN
\
"
"
;
case
3
:
return
"
\
"
PP_VIDEODECODER_H264PROFILE_EXTENDED
\
"
"
;
case
4
:
return
"
\
"
PP_VIDEODECODER_H264PROFILE_HIGH
\
"
"
;
case
5
:
return
"
\
"
PP_VIDEODECODER_H264PROFILE_HIGH10PROFILE
\
"
"
;
case
6
:
return
"
\
"
PP_VIDEODECODER_H264PROFILE_HIGH422PROFILE
\
"
"
;
case
7
:
return
"
\
"
PP_VIDEODECODER_H264PROFILE_HIGH444PREDICTIVEPROFILE
\
"
"
;
case
8
:
return
"
\
"
PP_VIDEODECODER_H264PROFILE_SCALABLEBASELINE
\
"
"
;
case
9
:
return
"
\
"
PP_VIDEODECODER_H264PROFILE_SCALABLEHIGH
\
"
"
;
case
10
:
return
"
\
"
PP_VIDEODECODER_H264PROFILE_STEREOHIGH
\
"
"
;
case
11
:
return
"
\
"
PP_VIDEODECODER_H264PROFILE_MULTIVIEWHIGH
\
"
"
;
case
12
:
return
"
\
"
PP_VIDEODECODER_VP8PROFILE_ANY
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_VideoDecoder_Profile
(
const
PP_VideoDecoder_Profile
&
v
)
{
return
ToString_PP_VideoDecoder_Profile
(
&
v
)
;
}
void
FromJSON_PP_VideoDecoder_Profile
(
JSONIterator
&
iterator
PP_VideoDecoder_Profile
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_VideoDecoder_Profile
(
v
)
;
}
const
string
ToString_PP_VideoBitstreamBuffer_Dev
(
const
PP_VideoBitstreamBuffer_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_VideoBitstreamBuffer_Dev
(
*
v
)
;
}
const
string
ToString_PP_VideoBitstreamBuffer_Dev
(
const
PP_VideoBitstreamBuffer_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
id
"
ToString_int32_t
(
v
.
id
)
)
;
AddProp
(
x
"
data
"
ToString_PP_Resource
(
v
.
data
)
)
;
AddProp
(
x
"
size
"
ToString_uint32_t
(
v
.
size
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_VideoBitstreamBuffer_Dev
(
JSONIterator
&
iterator
PP_VideoBitstreamBuffer_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
id
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
value
.
data
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
size
)
;
}
const
string
ToString_PP_PictureBuffer_Dev
(
const
PP_PictureBuffer_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_PictureBuffer_Dev
(
*
v
)
;
}
const
string
ToString_PP_PictureBuffer_Dev
(
const
PP_PictureBuffer_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
id
"
ToString_int32_t
(
v
.
id
)
)
;
AddProp
(
x
"
size
"
ToString_PP_Size
(
v
.
size
)
)
;
AddProp
(
x
"
texture_id
"
ToString_uint32_t
(
v
.
texture_id
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_PictureBuffer_Dev
(
JSONIterator
&
iterator
PP_PictureBuffer_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
id
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
value
.
size
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
texture_id
)
;
}
const
string
ToString_PP_Picture_Dev
(
const
PP_Picture_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_Picture_Dev
(
*
v
)
;
}
const
string
ToString_PP_Picture_Dev
(
const
PP_Picture_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
picture_buffer_id
"
ToString_int32_t
(
v
.
picture_buffer_id
)
)
;
AddProp
(
x
"
bitstream_buffer_id
"
ToString_int32_t
(
v
.
bitstream_buffer_id
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_Picture_Dev
(
JSONIterator
&
iterator
PP_Picture_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
picture_buffer_id
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
bitstream_buffer_id
)
;
}
const
string
ToString_PP_VideoDecodeError_Dev
(
const
PP_VideoDecodeError_Dev
*
v
)
{
switch
(
*
v
)
{
case
1
:
return
"
\
"
PP_VIDEODECODERERROR_ILLEGAL_STATE
\
"
"
;
case
2
:
return
"
\
"
PP_VIDEODECODERERROR_INVALID_ARGUMENT
\
"
"
;
case
3
:
return
"
\
"
PP_VIDEODECODERERROR_UNREADABLE_INPUT
\
"
"
;
case
4
:
return
"
\
"
PP_VIDEODECODERERROR_PLATFORM_FAILURE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_VideoDecodeError_Dev
(
const
PP_VideoDecodeError_Dev
&
v
)
{
return
ToString_PP_VideoDecodeError_Dev
(
&
v
)
;
}
void
FromJSON_PP_VideoDecodeError_Dev
(
JSONIterator
&
iterator
PP_VideoDecodeError_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_VideoDecodeError_Dev
(
v
)
;
}
const
string
ToString_PPB_AudioInput_Callback
(
const
PPB_AudioInput_Callback_0_3
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PPB_AudioInput_Callback
(
JSONIterator
&
iterator
PPB_AudioInput_Callback_0_3
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
const
string
ToString_PPB_AudioInput_Callback
(
const
PPB_AudioInput_Callback
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PPB_AudioInput_Callback
(
JSONIterator
&
iterator
PPB_AudioInput_Callback
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
namespace
ns_PPB_AudioInput_Dev_0_3
{
static
PP_Resource
Create_0_3
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_AudioInput_Dev_0_3
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
3
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsAudioInput_0_3
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsAudioInput
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_AudioInput_Dev_0_3
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
3
"
)
)
-
>
IsAudioInput
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
EnumerateDevices_0_3
(
PP_Resource
audio_input
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
EnumerateDevices
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_AudioInput_Dev_0_3
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
3
"
)
)
-
>
EnumerateDevices
(
audio_input
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
MonitorDeviceChange_0_3
(
PP_Resource
audio_input
PP_MonitorDeviceChangeCallback
callback
void
*
user_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MonitorDeviceChange
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_MonitorDeviceChangeCallback
(
callback
)
)
;
AddProp
(
ss
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_AudioInput_Dev_0_3
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
3
"
)
)
-
>
MonitorDeviceChange
(
audio_input
callback
user_data
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Open_0_3
(
PP_Resource
audio_input
PP_Resource
device_ref
PP_Resource
config
PPB_AudioInput_Callback_0_3
audio_input_callback
void
*
user_data
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Open
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
AddProp
(
ss
"
device_ref
"
ToString_PP_Resource
(
device_ref
)
)
;
AddProp
(
ss
"
config
"
ToString_PP_Resource
(
config
)
)
;
AddProp
(
ss
"
audio_input_callback
"
ToString_PPB_AudioInput_Callback
(
audio_input_callback
)
)
;
AddProp
(
ss
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_AudioInput_Dev_0_3
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
3
"
)
)
-
>
Open
(
audio_input
device_ref
config
audio_input_callback
user_data
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetCurrentConfig_0_3
(
PP_Resource
audio_input
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCurrentConfig
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_AudioInput_Dev_0_3
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
3
"
)
)
-
>
GetCurrentConfig
(
audio_input
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
StartCapture_0_3
(
PP_Resource
audio_input
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StartCapture
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_AudioInput_Dev_0_3
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
3
"
)
)
-
>
StartCapture
(
audio_input
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
StopCapture_0_3
(
PP_Resource
audio_input
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StopCapture
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_AudioInput_Dev_0_3
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
3
"
)
)
-
>
StopCapture
(
audio_input
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_0_3
(
PP_Resource
audio_input
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_AudioInput_Dev_0_3
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
3
"
)
)
-
>
Close
(
audio_input
)
;
#
endif
}
}
static
PPB_AudioInput_Dev_0_3
_PPB_AudioInput_Dev_0_3
=
{
ns_PPB_AudioInput_Dev_0_3
:
:
Create_0_3
ns_PPB_AudioInput_Dev_0_3
:
:
IsAudioInput_0_3
ns_PPB_AudioInput_Dev_0_3
:
:
EnumerateDevices_0_3
ns_PPB_AudioInput_Dev_0_3
:
:
MonitorDeviceChange_0_3
ns_PPB_AudioInput_Dev_0_3
:
:
Open_0_3
ns_PPB_AudioInput_Dev_0_3
:
:
GetCurrentConfig_0_3
ns_PPB_AudioInput_Dev_0_3
:
:
StartCapture_0_3
ns_PPB_AudioInput_Dev_0_3
:
:
StopCapture_0_3
ns_PPB_AudioInput_Dev_0_3
:
:
Close_0_3
}
;
const
string
ToString_PPB_AudioInput_Dev
(
const
PPB_AudioInput_Dev_0_3
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_AudioInput_Dev_0_4
{
static
PP_Resource
Create_0_4
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_AudioInput_Dev_0_4
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
4
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsAudioInput_0_4
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsAudioInput
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_AudioInput_Dev_0_4
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
4
"
)
)
-
>
IsAudioInput
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
EnumerateDevices_0_4
(
PP_Resource
audio_input
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
EnumerateDevices
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_AudioInput_Dev_0_4
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
4
"
)
)
-
>
EnumerateDevices
(
audio_input
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
MonitorDeviceChange_0_4
(
PP_Resource
audio_input
PP_MonitorDeviceChangeCallback
callback
void
*
user_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MonitorDeviceChange
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_MonitorDeviceChangeCallback
(
callback
)
)
;
AddProp
(
ss
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_AudioInput_Dev_0_4
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
4
"
)
)
-
>
MonitorDeviceChange
(
audio_input
callback
user_data
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Open_0_4
(
PP_Resource
audio_input
PP_Resource
device_ref
PP_Resource
config
PPB_AudioInput_Callback
audio_input_callback
void
*
user_data
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Open
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
AddProp
(
ss
"
device_ref
"
ToString_PP_Resource
(
device_ref
)
)
;
AddProp
(
ss
"
config
"
ToString_PP_Resource
(
config
)
)
;
AddProp
(
ss
"
audio_input_callback
"
ToString_PPB_AudioInput_Callback
(
audio_input_callback
)
)
;
AddProp
(
ss
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_AudioInput_Dev_0_4
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
4
"
)
)
-
>
Open
(
audio_input
device_ref
config
audio_input_callback
user_data
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetCurrentConfig_0_4
(
PP_Resource
audio_input
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCurrentConfig
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_AudioInput_Dev_0_4
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
4
"
)
)
-
>
GetCurrentConfig
(
audio_input
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
StartCapture_0_4
(
PP_Resource
audio_input
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StartCapture
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_AudioInput_Dev_0_4
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
4
"
)
)
-
>
StartCapture
(
audio_input
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
StopCapture_0_4
(
PP_Resource
audio_input
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StopCapture
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_AudioInput_Dev_0_4
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
4
"
)
)
-
>
StopCapture
(
audio_input
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_0_4
(
PP_Resource
audio_input
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_AudioInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
audio_input
"
ToString_PP_Resource
(
audio_input
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_AudioInput_Dev_0_4
*
)
RealGetInterface
(
"
PPB_AudioInput
(
Dev
)
;
0
.
4
"
)
)
-
>
Close
(
audio_input
)
;
#
endif
}
}
static
PPB_AudioInput_Dev_0_4
_PPB_AudioInput_Dev_0_4
=
{
ns_PPB_AudioInput_Dev_0_4
:
:
Create_0_4
ns_PPB_AudioInput_Dev_0_4
:
:
IsAudioInput_0_4
ns_PPB_AudioInput_Dev_0_4
:
:
EnumerateDevices_0_4
ns_PPB_AudioInput_Dev_0_4
:
:
MonitorDeviceChange_0_4
ns_PPB_AudioInput_Dev_0_4
:
:
Open_0_4
ns_PPB_AudioInput_Dev_0_4
:
:
GetCurrentConfig_0_4
ns_PPB_AudioInput_Dev_0_4
:
:
StartCapture_0_4
ns_PPB_AudioInput_Dev_0_4
:
:
StopCapture_0_4
ns_PPB_AudioInput_Dev_0_4
:
:
Close_0_4
}
;
const
string
ToString_PPB_AudioInput_Dev
(
const
PPB_AudioInput_Dev_0_4
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Buffer_Dev_0_4
{
static
PP_Resource
Create_0_4
(
PP_Instance
instance
uint32_t
size_in_bytes
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Buffer_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
size_in_bytes
"
ToString_uint32_t
(
size_in_bytes
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Buffer_Dev_0_4
*
)
RealGetInterface
(
"
PPB_Buffer
(
Dev
)
;
0
.
4
"
)
)
-
>
Create
(
instance
size_in_bytes
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsBuffer_0_4
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Buffer_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsBuffer
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Buffer_Dev_0_4
*
)
RealGetInterface
(
"
PPB_Buffer
(
Dev
)
;
0
.
4
"
)
)
-
>
IsBuffer
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
Describe_0_4
(
PP_Resource
resource
uint32_t
*
size_in_bytes
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Buffer_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Describe
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
size_in_bytes
"
PointerToString
(
size_in_bytes
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
size_in_bytes
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Buffer_Dev_0_4
*
)
RealGetInterface
(
"
PPB_Buffer
(
Dev
)
;
0
.
4
"
)
)
-
>
Describe
(
resource
size_in_bytes
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
size_in_bytes
)
{
AddProp
(
os
"
size_in_bytes
"
ToString_uint32_t
(
size_in_bytes
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
*
Map_0_4
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Buffer_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Map
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
void
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_mem_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
void
*
rval
=
(
(
PPB_Buffer_Dev_0_4
*
)
RealGetInterface
(
"
PPB_Buffer
(
Dev
)
;
0
.
4
"
)
)
-
>
Map
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_mem_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Unmap_0_4
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Buffer_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Unmap
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Buffer_Dev_0_4
*
)
RealGetInterface
(
"
PPB_Buffer
(
Dev
)
;
0
.
4
"
)
)
-
>
Unmap
(
resource
)
;
#
endif
}
}
static
PPB_Buffer_Dev_0_4
_PPB_Buffer_Dev_0_4
=
{
ns_PPB_Buffer_Dev_0_4
:
:
Create_0_4
ns_PPB_Buffer_Dev_0_4
:
:
IsBuffer_0_4
ns_PPB_Buffer_Dev_0_4
:
:
Describe_0_4
ns_PPB_Buffer_Dev_0_4
:
:
Map_0_4
ns_PPB_Buffer_Dev_0_4
:
:
Unmap_0_4
}
;
const
string
ToString_PPB_Buffer_Dev
(
const
PPB_Buffer_Dev_0_4
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_CharSet_ConversionError
(
const
PP_CharSet_ConversionError
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_CHARSET_CONVERSIONERROR_FAIL
\
"
"
;
case
1
:
return
"
\
"
PP_CHARSET_CONVERSIONERROR_SKIP
\
"
"
;
case
2
:
return
"
\
"
PP_CHARSET_CONVERSIONERROR_SUBSTITUTE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_CharSet_ConversionError
(
const
PP_CharSet_ConversionError
&
v
)
{
return
ToString_PP_CharSet_ConversionError
(
&
v
)
;
}
void
FromJSON_PP_CharSet_ConversionError
(
JSONIterator
&
iterator
PP_CharSet_ConversionError
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_CharSet_ConversionError
(
v
)
;
}
namespace
ns_PPB_CharSet_Dev_0_4
{
static
const
char
*
UTF16ToCharSet_0_4
(
PP_Instance
instance
const
uint16_t
utf16
[
]
uint32_t
utf16_len
const
char
*
output_char_set
PP_CharSet_ConversionError
on_error
uint32_t
*
output_length
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CharSet_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UTF16ToCharSet
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
{
BeginProp
(
ss
"
utf16
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
utf16_len
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint16_t
(
utf16
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
utf16_len
"
ToString_uint32_t
(
utf16_len
)
)
;
AddProp
(
ss
"
output_char_set
"
ToString_str_t
(
output_char_set
)
)
;
AddProp
(
ss
"
on_error
"
ToString_PP_CharSet_ConversionError
(
on_error
)
)
;
AddProp
(
ss
"
output_length
"
PointerToString
(
output_length
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
char
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_str_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
output_length
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
const
char
*
rval
=
(
(
PPB_CharSet_Dev_0_4
*
)
RealGetInterface
(
"
PPB_CharSet
(
Dev
)
;
0
.
4
"
)
)
-
>
UTF16ToCharSet
(
instance
utf16
utf16_len
output_char_set
on_error
output_length
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_str_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
output_length
)
{
AddProp
(
os
"
output_length
"
ToString_uint32_t
(
output_length
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint16_ptr_t
CharSetToUTF16_0_4
(
PP_Instance
instance
const
char
*
input
uint32_t
input_len
const
char
*
input_char_set
PP_CharSet_ConversionError
on_error
uint32_t
*
output_utf16_length
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CharSet_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CharSetToUTF16
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
{
BeginProp
(
ss
"
input
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
input_len
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint8_t
(
input
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
input_len
"
ToString_uint32_t
(
input_len
)
)
;
AddProp
(
ss
"
input_char_set
"
ToString_str_t
(
input_char_set
)
)
;
AddProp
(
ss
"
on_error
"
ToString_PP_CharSet_ConversionError
(
on_error
)
)
;
AddProp
(
ss
"
output_utf16_length
"
PointerToString
(
output_utf16_length
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint16_ptr_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
size_t
length
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
rval
=
new
uint16_t
[
length
]
;
for
(
size_t
i
=
0
;
i
<
length
;
+
+
i
)
{
FromJSON_uint16_t
(
iterator
rval
[
i
]
)
;
}
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
output_utf16_length
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint16_ptr_t
rval
=
(
(
PPB_CharSet_Dev_0_4
*
)
RealGetInterface
(
"
PPB_CharSet
(
Dev
)
;
0
.
4
"
)
)
-
>
CharSetToUTF16
(
instance
input
input_len
input_char_set
on_error
output_utf16_length
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_uint16_ptr_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
output_utf16_length
)
{
AddProp
(
os
"
output_utf16_length
"
ToString_uint32_t
(
output_utf16_length
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetDefaultCharSet_0_4
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CharSet_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDefaultCharSet
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_CharSet_Dev_0_4
*
)
RealGetInterface
(
"
PPB_CharSet
(
Dev
)
;
0
.
4
"
)
)
-
>
GetDefaultCharSet
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_CharSet_Dev_0_4
_PPB_CharSet_Dev_0_4
=
{
ns_PPB_CharSet_Dev_0_4
:
:
UTF16ToCharSet_0_4
ns_PPB_CharSet_Dev_0_4
:
:
CharSetToUTF16_0_4
ns_PPB_CharSet_Dev_0_4
:
:
GetDefaultCharSet_0_4
}
;
const
string
ToString_PPB_CharSet_Dev
(
const
PPB_CharSet_Dev_0_4
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Crypto_Dev_0_1
{
static
void
GetRandomBytes_0_1
(
char
*
buffer
uint32_t
num_bytes
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Crypto_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRandomBytes
\
"
"
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_uint32_t
(
num_bytes
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Crypto_Dev_0_1
*
)
RealGetInterface
(
"
PPB_Crypto
(
Dev
)
;
0
.
1
"
)
)
-
>
GetRandomBytes
(
buffer
num_bytes
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
}
static
PPB_Crypto_Dev_0_1
_PPB_Crypto_Dev_0_1
=
{
ns_PPB_Crypto_Dev_0_1
:
:
GetRandomBytes_0_1
}
;
const
string
ToString_PPB_Crypto_Dev
(
const
PPB_Crypto_Dev_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_CursorControl_Dev_0_4
{
static
PP_Bool
SetCursor_0_4
(
PP_Instance
instance
enum
PP_CursorType_Dev
type
PP_Resource
custom_image
const
struct
PP_Point
*
hot_spot
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CursorControl_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetCursor
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_CursorType_Dev
(
type
)
)
;
AddProp
(
ss
"
custom_image
"
ToString_PP_Resource
(
custom_image
)
)
;
AddProp
(
ss
"
hot_spot
"
ToString_PP_Point
(
hot_spot
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_CursorControl_Dev_0_4
*
)
RealGetInterface
(
"
PPB_CursorControl
(
Dev
)
;
0
.
4
"
)
)
-
>
SetCursor
(
instance
type
custom_image
hot_spot
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
LockCursor_0_4
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CursorControl_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
LockCursor
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_CursorControl_Dev_0_4
*
)
RealGetInterface
(
"
PPB_CursorControl
(
Dev
)
;
0
.
4
"
)
)
-
>
LockCursor
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
UnlockCursor_0_4
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CursorControl_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UnlockCursor
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_CursorControl_Dev_0_4
*
)
RealGetInterface
(
"
PPB_CursorControl
(
Dev
)
;
0
.
4
"
)
)
-
>
UnlockCursor
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
HasCursorLock_0_4
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CursorControl_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
HasCursorLock
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_CursorControl_Dev_0_4
*
)
RealGetInterface
(
"
PPB_CursorControl
(
Dev
)
;
0
.
4
"
)
)
-
>
HasCursorLock
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
CanLockCursor_0_4
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CursorControl_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CanLockCursor
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_CursorControl_Dev_0_4
*
)
RealGetInterface
(
"
PPB_CursorControl
(
Dev
)
;
0
.
4
"
)
)
-
>
CanLockCursor
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_CursorControl_Dev_0_4
_PPB_CursorControl_Dev_0_4
=
{
ns_PPB_CursorControl_Dev_0_4
:
:
SetCursor_0_4
ns_PPB_CursorControl_Dev_0_4
:
:
LockCursor_0_4
ns_PPB_CursorControl_Dev_0_4
:
:
UnlockCursor_0_4
ns_PPB_CursorControl_Dev_0_4
:
:
HasCursorLock_0_4
ns_PPB_CursorControl_Dev_0_4
:
:
CanLockCursor_0_4
}
;
const
string
ToString_PPB_CursorControl_Dev
(
const
PPB_CursorControl_Dev_0_4
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_MonitorDeviceChangeCallback
(
const
PP_MonitorDeviceChangeCallback
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PP_MonitorDeviceChangeCallback
(
JSONIterator
&
iterator
PP_MonitorDeviceChangeCallback
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
const
string
ToString_PP_DeviceType_Dev
(
const
PP_DeviceType_Dev
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_DEVICETYPE_DEV_INVALID
\
"
"
;
case
1
:
return
"
\
"
PP_DEVICETYPE_DEV_AUDIOCAPTURE
\
"
"
;
case
2
:
return
"
\
"
PP_DEVICETYPE_DEV_VIDEOCAPTURE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_DeviceType_Dev
(
const
PP_DeviceType_Dev
&
v
)
{
return
ToString_PP_DeviceType_Dev
(
&
v
)
;
}
void
FromJSON_PP_DeviceType_Dev
(
JSONIterator
&
iterator
PP_DeviceType_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_DeviceType_Dev
(
v
)
;
}
namespace
ns_PPB_DeviceRef_Dev_0_1
{
static
PP_Bool
IsDeviceRef_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_DeviceRef_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsDeviceRef
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_DeviceRef_Dev_0_1
*
)
RealGetInterface
(
"
PPB_DeviceRef
(
Dev
)
;
0
.
1
"
)
)
-
>
IsDeviceRef
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_DeviceType_Dev
GetType_0_1
(
PP_Resource
device_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_DeviceRef_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetType
\
"
"
)
;
AddProp
(
ss
"
device_ref
"
ToString_PP_Resource
(
device_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_DeviceType_Dev
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_DeviceType_Dev
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_DeviceType_Dev
rval
=
(
(
PPB_DeviceRef_Dev_0_1
*
)
RealGetInterface
(
"
PPB_DeviceRef
(
Dev
)
;
0
.
1
"
)
)
-
>
GetType
(
device_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_DeviceType_Dev
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetName_0_1
(
PP_Resource
device_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_DeviceRef_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetName
\
"
"
)
;
AddProp
(
ss
"
device_ref
"
ToString_PP_Resource
(
device_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_DeviceRef_Dev_0_1
*
)
RealGetInterface
(
"
PPB_DeviceRef
(
Dev
)
;
0
.
1
"
)
)
-
>
GetName
(
device_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_DeviceRef_Dev_0_1
_PPB_DeviceRef_Dev_0_1
=
{
ns_PPB_DeviceRef_Dev_0_1
:
:
IsDeviceRef_0_1
ns_PPB_DeviceRef_Dev_0_1
:
:
GetType_0_1
ns_PPB_DeviceRef_Dev_0_1
:
:
GetName_0_1
}
;
const
string
ToString_PPB_DeviceRef_Dev
(
const
PPB_DeviceRef_Dev_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_FileChooserMode_Dev
(
const
PP_FileChooserMode_Dev
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_FILECHOOSERMODE_OPEN
\
"
"
;
case
1
:
return
"
\
"
PP_FILECHOOSERMODE_OPENMULTIPLE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_FileChooserMode_Dev
(
const
PP_FileChooserMode_Dev
&
v
)
{
return
ToString_PP_FileChooserMode_Dev
(
&
v
)
;
}
void
FromJSON_PP_FileChooserMode_Dev
(
JSONIterator
&
iterator
PP_FileChooserMode_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_FileChooserMode_Dev
(
v
)
;
}
namespace
ns_PPB_FileChooser_Dev_0_5
{
static
PP_Resource
Create_0_5
(
PP_Instance
instance
PP_FileChooserMode_Dev
mode
struct
PP_Var
accept_types
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileChooser_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
mode
"
ToString_PP_FileChooserMode_Dev
(
mode
)
)
;
AddProp
(
ss
"
accept_types
"
ToString_PP_Var
(
accept_types
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_FileChooser_Dev_0_5
*
)
RealGetInterface
(
"
PPB_FileChooser
(
Dev
)
;
0
.
5
"
)
)
-
>
Create
(
instance
mode
accept_types
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFileChooser_0_5
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileChooser_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFileChooser
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FileChooser_Dev_0_5
*
)
RealGetInterface
(
"
PPB_FileChooser
(
Dev
)
;
0
.
5
"
)
)
-
>
IsFileChooser
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Show_0_5
(
PP_Resource
chooser
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileChooser_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Show
\
"
"
)
;
AddProp
(
ss
"
chooser
"
ToString_PP_Resource
(
chooser
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileChooser_Dev_0_5
*
)
RealGetInterface
(
"
PPB_FileChooser
(
Dev
)
;
0
.
5
"
)
)
-
>
Show
(
chooser
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetNextChosenFile_0_5
(
PP_Resource
chooser
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileChooser_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetNextChosenFile
\
"
"
)
;
AddProp
(
ss
"
chooser
"
ToString_PP_Resource
(
chooser
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_FileChooser_Dev_0_5
*
)
RealGetInterface
(
"
PPB_FileChooser
(
Dev
)
;
0
.
5
"
)
)
-
>
GetNextChosenFile
(
chooser
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FileChooser_Dev_0_5
_PPB_FileChooser_Dev_0_5
=
{
ns_PPB_FileChooser_Dev_0_5
:
:
Create_0_5
ns_PPB_FileChooser_Dev_0_5
:
:
IsFileChooser_0_5
ns_PPB_FileChooser_Dev_0_5
:
:
Show_0_5
ns_PPB_FileChooser_Dev_0_5
:
:
GetNextChosenFile_0_5
}
;
const
string
ToString_PPB_FileChooser_Dev
(
const
PPB_FileChooser_Dev_0_5
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_FileChooser_Dev_0_6
{
static
PP_Resource
Create_0_6
(
PP_Instance
instance
PP_FileChooserMode_Dev
mode
struct
PP_Var
accept_types
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileChooser_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
mode
"
ToString_PP_FileChooserMode_Dev
(
mode
)
)
;
AddProp
(
ss
"
accept_types
"
ToString_PP_Var
(
accept_types
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_FileChooser_Dev_0_6
*
)
RealGetInterface
(
"
PPB_FileChooser
(
Dev
)
;
0
.
6
"
)
)
-
>
Create
(
instance
mode
accept_types
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFileChooser_0_6
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileChooser_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFileChooser
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FileChooser_Dev_0_6
*
)
RealGetInterface
(
"
PPB_FileChooser
(
Dev
)
;
0
.
6
"
)
)
-
>
IsFileChooser
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Show_0_6
(
PP_Resource
chooser
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileChooser_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Show
\
"
"
)
;
AddProp
(
ss
"
chooser
"
ToString_PP_Resource
(
chooser
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileChooser_Dev_0_6
*
)
RealGetInterface
(
"
PPB_FileChooser
(
Dev
)
;
0
.
6
"
)
)
-
>
Show
(
chooser
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FileChooser_Dev_0_6
_PPB_FileChooser_Dev_0_6
=
{
ns_PPB_FileChooser_Dev_0_6
:
:
Create_0_6
ns_PPB_FileChooser_Dev_0_6
:
:
IsFileChooser_0_6
ns_PPB_FileChooser_Dev_0_6
:
:
Show_0_6
}
;
const
string
ToString_PPB_FileChooser_Dev
(
const
PPB_FileChooser_Dev_0_6
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_FontFamily_Dev
(
const
PP_FontFamily_Dev
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_FONTFAMILY_DEFAULT
\
"
"
;
case
1
:
return
"
\
"
PP_FONTFAMILY_SERIF
\
"
"
;
case
2
:
return
"
\
"
PP_FONTFAMILY_SANSSERIF
\
"
"
;
case
3
:
return
"
\
"
PP_FONTFAMILY_MONOSPACE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_FontFamily_Dev
(
const
PP_FontFamily_Dev
&
v
)
{
return
ToString_PP_FontFamily_Dev
(
&
v
)
;
}
void
FromJSON_PP_FontFamily_Dev
(
JSONIterator
&
iterator
PP_FontFamily_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_FontFamily_Dev
(
v
)
;
}
const
string
ToString_PP_FontWeight_Dev
(
const
PP_FontWeight_Dev
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_FONTWEIGHT_100
\
"
"
;
case
1
:
return
"
\
"
PP_FONTWEIGHT_200
\
"
"
;
case
2
:
return
"
\
"
PP_FONTWEIGHT_300
\
"
"
;
case
3
:
return
"
\
"
PP_FONTWEIGHT_400
\
"
"
;
case
4
:
return
"
\
"
PP_FONTWEIGHT_500
\
"
"
;
case
5
:
return
"
\
"
PP_FONTWEIGHT_600
\
"
"
;
case
6
:
return
"
\
"
PP_FONTWEIGHT_700
\
"
"
;
case
7
:
return
"
\
"
PP_FONTWEIGHT_800
\
"
"
;
case
8
:
return
"
\
"
PP_FONTWEIGHT_900
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_FontWeight_Dev
(
const
PP_FontWeight_Dev
&
v
)
{
return
ToString_PP_FontWeight_Dev
(
&
v
)
;
}
void
FromJSON_PP_FontWeight_Dev
(
JSONIterator
&
iterator
PP_FontWeight_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_FontWeight_Dev
(
v
)
;
}
const
string
ToString_PP_FontDescription_Dev
(
const
PP_FontDescription_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_FontDescription_Dev
(
*
v
)
;
}
const
string
ToString_PP_FontDescription_Dev
(
const
PP_FontDescription_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
face
"
ToString_PP_Var
(
v
.
face
)
)
;
AddProp
(
x
"
family
"
ToString_PP_FontFamily_Dev
(
v
.
family
)
)
;
AddProp
(
x
"
size
"
ToString_uint32_t
(
v
.
size
)
)
;
AddProp
(
x
"
weight
"
ToString_PP_FontWeight_Dev
(
v
.
weight
)
)
;
AddProp
(
x
"
italic
"
ToString_PP_Bool
(
v
.
italic
)
)
;
AddProp
(
x
"
small_caps
"
ToString_PP_Bool
(
v
.
small_caps
)
)
;
AddProp
(
x
"
letter_spacing
"
ToString_int32_t
(
v
.
letter_spacing
)
)
;
AddProp
(
x
"
word_spacing
"
ToString_int32_t
(
v
.
word_spacing
)
)
;
AddProp
(
x
"
padding
"
ToString_int32_t
(
v
.
padding
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_FontDescription_Dev
(
JSONIterator
&
iterator
PP_FontDescription_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
value
.
face
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FontFamily_Dev
(
iterator
value
.
family
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
size
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FontWeight_Dev
(
iterator
value
.
weight
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
italic
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
small_caps
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
letter_spacing
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
word_spacing
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
padding
)
;
}
const
string
ToString_PP_FontMetrics_Dev
(
const
PP_FontMetrics_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_FontMetrics_Dev
(
*
v
)
;
}
const
string
ToString_PP_FontMetrics_Dev
(
const
PP_FontMetrics_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
height
"
ToString_int32_t
(
v
.
height
)
)
;
AddProp
(
x
"
ascent
"
ToString_int32_t
(
v
.
ascent
)
)
;
AddProp
(
x
"
descent
"
ToString_int32_t
(
v
.
descent
)
)
;
AddProp
(
x
"
line_spacing
"
ToString_int32_t
(
v
.
line_spacing
)
)
;
AddProp
(
x
"
x_height
"
ToString_int32_t
(
v
.
x_height
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_FontMetrics_Dev
(
JSONIterator
&
iterator
PP_FontMetrics_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
height
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
ascent
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
descent
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
line_spacing
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
x_height
)
;
}
const
string
ToString_PP_TextRun_Dev
(
const
PP_TextRun_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_TextRun_Dev
(
*
v
)
;
}
const
string
ToString_PP_TextRun_Dev
(
const
PP_TextRun_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
text
"
ToString_PP_Var
(
v
.
text
)
)
;
AddProp
(
x
"
rtl
"
ToString_PP_Bool
(
v
.
rtl
)
)
;
AddProp
(
x
"
override_direction
"
ToString_PP_Bool
(
v
.
override_direction
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_TextRun_Dev
(
JSONIterator
&
iterator
PP_TextRun_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
value
.
text
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
rtl
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
override_direction
)
;
}
namespace
ns_PPB_Font_Dev_0_6
{
static
struct
PP_Var
GetFontFamilies_0_6
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Font_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFontFamilies
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Font_Dev_0_6
*
)
RealGetInterface
(
"
PPB_Font
(
Dev
)
;
0
.
6
"
)
)
-
>
GetFontFamilies
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
Create_0_6
(
PP_Instance
instance
const
struct
PP_FontDescription_Dev
*
description
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Font_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
description
"
ToString_PP_FontDescription_Dev
(
description
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Font_Dev_0_6
*
)
RealGetInterface
(
"
PPB_Font
(
Dev
)
;
0
.
6
"
)
)
-
>
Create
(
instance
description
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFont_0_6
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Font_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFont
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Font_Dev_0_6
*
)
RealGetInterface
(
"
PPB_Font
(
Dev
)
;
0
.
6
"
)
)
-
>
IsFont
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
Describe_0_6
(
PP_Resource
font
struct
PP_FontDescription_Dev
*
description
struct
PP_FontMetrics_Dev
*
metrics
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Font_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Describe
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
description
"
PointerToString
(
description
)
)
;
AddProp
(
ss
"
metrics
"
PointerToString
(
metrics
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
description
)
{
iterator
.
skip
(
)
;
FromJSON_PP_FontDescription_Dev
(
iterator
*
description
)
;
}
if
(
!
!
metrics
)
{
iterator
.
skip
(
)
;
FromJSON_PP_FontMetrics_Dev
(
iterator
*
metrics
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Font_Dev_0_6
*
)
RealGetInterface
(
"
PPB_Font
(
Dev
)
;
0
.
6
"
)
)
-
>
Describe
(
font
description
metrics
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
description
)
{
AddProp
(
os
"
description
"
ToString_PP_FontDescription_Dev
(
description
)
)
;
}
if
(
!
!
metrics
)
{
AddProp
(
os
"
metrics
"
ToString_PP_FontMetrics_Dev
(
metrics
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
DrawTextAt_0_6
(
PP_Resource
font
PP_Resource
image_data
const
struct
PP_TextRun_Dev
*
text
const
struct
PP_Point
*
position
uint32_t
color
const
struct
PP_Rect
*
clip
PP_Bool
image_data_is_opaque
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Font_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DrawTextAt
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
image_data
"
ToString_PP_Resource
(
image_data
)
)
;
AddProp
(
ss
"
text
"
ToString_PP_TextRun_Dev
(
text
)
)
;
AddProp
(
ss
"
position
"
ToString_PP_Point
(
position
)
)
;
AddProp
(
ss
"
color
"
ToString_uint32_t
(
color
)
)
;
AddProp
(
ss
"
clip
"
ToString_PP_Rect
(
clip
)
)
;
AddProp
(
ss
"
image_data_is_opaque
"
ToString_PP_Bool
(
image_data_is_opaque
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Font_Dev_0_6
*
)
RealGetInterface
(
"
PPB_Font
(
Dev
)
;
0
.
6
"
)
)
-
>
DrawTextAt
(
font
image_data
text
position
color
clip
image_data_is_opaque
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
MeasureText_0_6
(
PP_Resource
font
const
struct
PP_TextRun_Dev
*
text
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Font_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MeasureText
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
text
"
ToString_PP_TextRun_Dev
(
text
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Font_Dev_0_6
*
)
RealGetInterface
(
"
PPB_Font
(
Dev
)
;
0
.
6
"
)
)
-
>
MeasureText
(
font
text
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
CharacterOffsetForPixel_0_6
(
PP_Resource
font
const
struct
PP_TextRun_Dev
*
text
int32_t
pixel_position
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Font_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CharacterOffsetForPixel
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
text
"
ToString_PP_TextRun_Dev
(
text
)
)
;
AddProp
(
ss
"
pixel_position
"
ToString_int32_t
(
pixel_position
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_Font_Dev_0_6
*
)
RealGetInterface
(
"
PPB_Font
(
Dev
)
;
0
.
6
"
)
)
-
>
CharacterOffsetForPixel
(
font
text
pixel_position
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
PixelOffsetForCharacter_0_6
(
PP_Resource
font
const
struct
PP_TextRun_Dev
*
text
uint32_t
char_offset
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Font_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PixelOffsetForCharacter
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
text
"
ToString_PP_TextRun_Dev
(
text
)
)
;
AddProp
(
ss
"
char_offset
"
ToString_uint32_t
(
char_offset
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Font_Dev_0_6
*
)
RealGetInterface
(
"
PPB_Font
(
Dev
)
;
0
.
6
"
)
)
-
>
PixelOffsetForCharacter
(
font
text
char_offset
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Font_Dev_0_6
_PPB_Font_Dev_0_6
=
{
ns_PPB_Font_Dev_0_6
:
:
GetFontFamilies_0_6
ns_PPB_Font_Dev_0_6
:
:
Create_0_6
ns_PPB_Font_Dev_0_6
:
:
IsFont_0_6
ns_PPB_Font_Dev_0_6
:
:
Describe_0_6
ns_PPB_Font_Dev_0_6
:
:
DrawTextAt_0_6
ns_PPB_Font_Dev_0_6
:
:
MeasureText_0_6
ns_PPB_Font_Dev_0_6
:
:
CharacterOffsetForPixel_0_6
ns_PPB_Font_Dev_0_6
:
:
PixelOffsetForCharacter_0_6
}
;
const
string
ToString_PPB_Font_Dev
(
const
PPB_Font_Dev_0_6
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_IMEInputEvent_Dev_0_1
{
static
PP_Bool
IsIMEInputEvent_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsIMEInputEvent
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_IMEInputEvent_Dev_0_1
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
1
"
)
)
-
>
IsIMEInputEvent
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetText_0_1
(
PP_Resource
ime_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetText
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_IMEInputEvent_Dev_0_1
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
1
"
)
)
-
>
GetText
(
ime_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetSegmentNumber_0_1
(
PP_Resource
ime_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSegmentNumber
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_IMEInputEvent_Dev_0_1
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
1
"
)
)
-
>
GetSegmentNumber
(
ime_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetSegmentOffset_0_1
(
PP_Resource
ime_event
uint32_t
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSegmentOffset
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_IMEInputEvent_Dev_0_1
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
1
"
)
)
-
>
GetSegmentOffset
(
ime_event
index
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetTargetSegment_0_1
(
PP_Resource
ime_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTargetSegment
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_IMEInputEvent_Dev_0_1
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
1
"
)
)
-
>
GetTargetSegment
(
ime_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
GetSelection_0_1
(
PP_Resource
ime_event
uint32_t
*
start
uint32_t
*
end
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSelection
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
AddProp
(
ss
"
start
"
PointerToString
(
start
)
)
;
AddProp
(
ss
"
end
"
PointerToString
(
end
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
start
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
end
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_IMEInputEvent_Dev_0_1
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
1
"
)
)
-
>
GetSelection
(
ime_event
start
end
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
start
)
{
AddProp
(
os
"
start
"
ToString_uint32_t
(
start
)
)
;
}
if
(
!
!
end
)
{
AddProp
(
os
"
end
"
ToString_uint32_t
(
end
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
}
static
PPB_IMEInputEvent_Dev_0_1
_PPB_IMEInputEvent_Dev_0_1
=
{
ns_PPB_IMEInputEvent_Dev_0_1
:
:
IsIMEInputEvent_0_1
ns_PPB_IMEInputEvent_Dev_0_1
:
:
GetText_0_1
ns_PPB_IMEInputEvent_Dev_0_1
:
:
GetSegmentNumber_0_1
ns_PPB_IMEInputEvent_Dev_0_1
:
:
GetSegmentOffset_0_1
ns_PPB_IMEInputEvent_Dev_0_1
:
:
GetTargetSegment_0_1
ns_PPB_IMEInputEvent_Dev_0_1
:
:
GetSelection_0_1
}
;
const
string
ToString_PPB_IMEInputEvent_Dev
(
const
PPB_IMEInputEvent_Dev_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_IMEInputEvent_Dev_0_2
{
static
PP_Resource
Create_0_2
(
PP_Instance
instance
PP_InputEvent_Type
type
PP_TimeTicks
time_stamp
struct
PP_Var
text
uint32_t
segment_number
const
uint32_t
segment_offsets
[
]
int32_t
target_segment
uint32_t
selection_start
uint32_t
selection_end
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_InputEvent_Type
(
type
)
)
;
AddProp
(
ss
"
time_stamp
"
ToString_PP_TimeTicks
(
time_stamp
)
)
;
AddProp
(
ss
"
text
"
ToString_PP_Var
(
text
)
)
;
AddProp
(
ss
"
segment_number
"
ToString_uint32_t
(
segment_number
)
)
;
{
BeginProp
(
ss
"
segment_offsets
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
segment_offsets
[
_n
]
!
=
0
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint32_t
(
segment_offsets
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
target_segment
"
ToString_int32_t
(
target_segment
)
)
;
AddProp
(
ss
"
selection_start
"
ToString_uint32_t
(
selection_start
)
)
;
AddProp
(
ss
"
selection_end
"
ToString_uint32_t
(
selection_end
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_IMEInputEvent_Dev_0_2
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
2
"
)
)
-
>
Create
(
instance
type
time_stamp
text
segment_number
segment_offsets
target_segment
selection_start
selection_end
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsIMEInputEvent_0_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsIMEInputEvent
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_IMEInputEvent_Dev_0_2
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
2
"
)
)
-
>
IsIMEInputEvent
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetText_0_2
(
PP_Resource
ime_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetText
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_IMEInputEvent_Dev_0_2
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
2
"
)
)
-
>
GetText
(
ime_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetSegmentNumber_0_2
(
PP_Resource
ime_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSegmentNumber
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_IMEInputEvent_Dev_0_2
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
2
"
)
)
-
>
GetSegmentNumber
(
ime_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetSegmentOffset_0_2
(
PP_Resource
ime_event
uint32_t
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSegmentOffset
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_IMEInputEvent_Dev_0_2
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
2
"
)
)
-
>
GetSegmentOffset
(
ime_event
index
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetTargetSegment_0_2
(
PP_Resource
ime_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTargetSegment
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_IMEInputEvent_Dev_0_2
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
2
"
)
)
-
>
GetTargetSegment
(
ime_event
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
GetSelection_0_2
(
PP_Resource
ime_event
uint32_t
*
start
uint32_t
*
end
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IMEInputEvent_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSelection
\
"
"
)
;
AddProp
(
ss
"
ime_event
"
ToString_PP_Resource
(
ime_event
)
)
;
AddProp
(
ss
"
start
"
PointerToString
(
start
)
)
;
AddProp
(
ss
"
end
"
PointerToString
(
end
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
start
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
end
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_IMEInputEvent_Dev_0_2
*
)
RealGetInterface
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
2
"
)
)
-
>
GetSelection
(
ime_event
start
end
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
start
)
{
AddProp
(
os
"
start
"
ToString_uint32_t
(
start
)
)
;
}
if
(
!
!
end
)
{
AddProp
(
os
"
end
"
ToString_uint32_t
(
end
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
}
static
PPB_IMEInputEvent_Dev_0_2
_PPB_IMEInputEvent_Dev_0_2
=
{
ns_PPB_IMEInputEvent_Dev_0_2
:
:
Create_0_2
ns_PPB_IMEInputEvent_Dev_0_2
:
:
IsIMEInputEvent_0_2
ns_PPB_IMEInputEvent_Dev_0_2
:
:
GetText_0_2
ns_PPB_IMEInputEvent_Dev_0_2
:
:
GetSegmentNumber_0_2
ns_PPB_IMEInputEvent_Dev_0_2
:
:
GetSegmentOffset_0_2
ns_PPB_IMEInputEvent_Dev_0_2
:
:
GetTargetSegment_0_2
ns_PPB_IMEInputEvent_Dev_0_2
:
:
GetSelection_0_2
}
;
const
string
ToString_PPB_IMEInputEvent_Dev
(
const
PPB_IMEInputEvent_Dev_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Memory_Dev_0_1
{
static
void
*
MemAlloc_0_1
(
uint32_t
num_bytes
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Memory_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MemAlloc
\
"
"
)
;
AddProp
(
ss
"
num_bytes
"
ToString_uint32_t
(
num_bytes
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
void
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_mem_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
void
*
rval
=
(
(
PPB_Memory_Dev_0_1
*
)
RealGetInterface
(
"
PPB_Memory
(
Dev
)
;
0
.
1
"
)
)
-
>
MemAlloc
(
num_bytes
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_mem_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
MemFree_0_1
(
void
*
ptr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Memory_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MemFree
\
"
"
)
;
AddProp
(
ss
"
ptr
"
ToString_mem_t
(
ptr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Memory_Dev_0_1
*
)
RealGetInterface
(
"
PPB_Memory
(
Dev
)
;
0
.
1
"
)
)
-
>
MemFree
(
ptr
)
;
#
endif
}
}
static
PPB_Memory_Dev_0_1
_PPB_Memory_Dev_0_1
=
{
ns_PPB_Memory_Dev_0_1
:
:
MemAlloc_0_1
ns_PPB_Memory_Dev_0_1
:
:
MemFree_0_1
}
;
const
string
ToString_PPB_Memory_Dev
(
const
PPB_Memory_Dev_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_OpenGLES2DrawBuffers_Dev_1_0
{
static
void
DrawBuffersEXT_1_0
(
PP_Resource
context
GLsizei
count
const
GLenum
*
bufs
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OpenGLES2DrawBuffers_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DrawBuffersEXT
\
"
"
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
count
"
ToString_GLsizei
(
count
)
)
;
AddProp
(
ss
"
bufs
"
ToString_GLenum_ptr_t
(
bufs
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_OpenGLES2DrawBuffers_Dev_1_0
*
)
RealGetInterface
(
"
PPB_OpenGLES2DrawBuffers
(
Dev
)
;
1
.
0
"
)
)
-
>
DrawBuffersEXT
(
context
count
bufs
)
;
#
endif
}
}
static
PPB_OpenGLES2DrawBuffers_Dev_1_0
_PPB_OpenGLES2DrawBuffers_Dev_1_0
=
{
ns_PPB_OpenGLES2DrawBuffers_Dev_1_0
:
:
DrawBuffersEXT_1_0
}
;
const
string
ToString_PPB_OpenGLES2DrawBuffers_Dev
(
const
PPB_OpenGLES2DrawBuffers_Dev_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Printing_Dev_0_7
{
static
PP_Resource
Create_0_7
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Printing_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
7
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Printing_Dev_0_7
*
)
RealGetInterface
(
"
PPB_Printing
(
Dev
)
;
0
.
7
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetDefaultPrintSettings_0_7
(
PP_Resource
resource
struct
PP_PrintSettings_Dev
*
print_settings
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Printing_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
7
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDefaultPrintSettings
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
print_settings
"
PointerToString
(
print_settings
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
print_settings
)
{
iterator
.
skip
(
)
;
FromJSON_PP_PrintSettings_Dev
(
iterator
*
print_settings
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Printing_Dev_0_7
*
)
RealGetInterface
(
"
PPB_Printing
(
Dev
)
;
0
.
7
"
)
)
-
>
GetDefaultPrintSettings
(
resource
print_settings
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
print_settings
)
{
AddProp
(
os
"
print_settings
"
ToString_PP_PrintSettings_Dev
(
print_settings
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Printing_Dev_0_7
_PPB_Printing_Dev_0_7
=
{
ns_PPB_Printing_Dev_0_7
:
:
Create_0_7
ns_PPB_Printing_Dev_0_7
:
:
GetDefaultPrintSettings_0_7
}
;
const
string
ToString_PPB_Printing_Dev
(
const
PPB_Printing_Dev_0_7
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_TextInput_Type_Dev
(
const
PP_TextInput_Type_Dev
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_TEXTINPUT_TYPE_DEV_NONE
\
"
"
;
case
1
:
return
"
\
"
PP_TEXTINPUT_TYPE_DEV_TEXT
\
"
"
;
case
2
:
return
"
\
"
PP_TEXTINPUT_TYPE_DEV_PASSWORD
\
"
"
;
case
3
:
return
"
\
"
PP_TEXTINPUT_TYPE_DEV_SEARCH
\
"
"
;
case
4
:
return
"
\
"
PP_TEXTINPUT_TYPE_DEV_EMAIL
\
"
"
;
case
5
:
return
"
\
"
PP_TEXTINPUT_TYPE_DEV_NUMBER
\
"
"
;
case
6
:
return
"
\
"
PP_TEXTINPUT_TYPE_DEV_TELEPHONE
\
"
"
;
case
7
:
return
"
\
"
PP_TEXTINPUT_TYPE_DEV_URL
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_TextInput_Type_Dev
(
const
PP_TextInput_Type_Dev
&
v
)
{
return
ToString_PP_TextInput_Type_Dev
(
&
v
)
;
}
void
FromJSON_PP_TextInput_Type_Dev
(
JSONIterator
&
iterator
PP_TextInput_Type_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_TextInput_Type_Dev
(
v
)
;
}
namespace
ns_PPB_TextInput_Dev_0_1
{
static
void
SetTextInputType_0_1
(
PP_Instance
instance
PP_TextInput_Type_Dev
type
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TextInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetTextInputType
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_TextInput_Type_Dev
(
type
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TextInput_Dev_0_1
*
)
RealGetInterface
(
"
PPB_TextInput
(
Dev
)
;
0
.
1
"
)
)
-
>
SetTextInputType
(
instance
type
)
;
#
endif
}
static
void
UpdateCaretPosition_0_1
(
PP_Instance
instance
const
struct
PP_Rect
*
caret
const
struct
PP_Rect
*
bounding_box
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TextInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UpdateCaretPosition
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
caret
"
ToString_PP_Rect
(
caret
)
)
;
AddProp
(
ss
"
bounding_box
"
ToString_PP_Rect
(
bounding_box
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TextInput_Dev_0_1
*
)
RealGetInterface
(
"
PPB_TextInput
(
Dev
)
;
0
.
1
"
)
)
-
>
UpdateCaretPosition
(
instance
caret
bounding_box
)
;
#
endif
}
static
void
CancelCompositionText_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TextInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CancelCompositionText
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TextInput_Dev_0_1
*
)
RealGetInterface
(
"
PPB_TextInput
(
Dev
)
;
0
.
1
"
)
)
-
>
CancelCompositionText
(
instance
)
;
#
endif
}
}
static
PPB_TextInput_Dev_0_1
_PPB_TextInput_Dev_0_1
=
{
ns_PPB_TextInput_Dev_0_1
:
:
SetTextInputType_0_1
ns_PPB_TextInput_Dev_0_1
:
:
UpdateCaretPosition_0_1
ns_PPB_TextInput_Dev_0_1
:
:
CancelCompositionText_0_1
}
;
const
string
ToString_PPB_TextInput_Dev
(
const
PPB_TextInput_Dev_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_TextInput_Dev_0_2
{
static
void
SetTextInputType_0_2
(
PP_Instance
instance
PP_TextInput_Type_Dev
type
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TextInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetTextInputType
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_TextInput_Type_Dev
(
type
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TextInput_Dev_0_2
*
)
RealGetInterface
(
"
PPB_TextInput
(
Dev
)
;
0
.
2
"
)
)
-
>
SetTextInputType
(
instance
type
)
;
#
endif
}
static
void
UpdateCaretPosition_0_2
(
PP_Instance
instance
const
struct
PP_Rect
*
caret
const
struct
PP_Rect
*
bounding_box
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TextInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UpdateCaretPosition
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
caret
"
ToString_PP_Rect
(
caret
)
)
;
AddProp
(
ss
"
bounding_box
"
ToString_PP_Rect
(
bounding_box
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TextInput_Dev_0_2
*
)
RealGetInterface
(
"
PPB_TextInput
(
Dev
)
;
0
.
2
"
)
)
-
>
UpdateCaretPosition
(
instance
caret
bounding_box
)
;
#
endif
}
static
void
CancelCompositionText_0_2
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TextInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CancelCompositionText
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TextInput_Dev_0_2
*
)
RealGetInterface
(
"
PPB_TextInput
(
Dev
)
;
0
.
2
"
)
)
-
>
CancelCompositionText
(
instance
)
;
#
endif
}
static
void
UpdateSurroundingText_0_2
(
PP_Instance
instance
const
char
*
text
uint32_t
caret
uint32_t
anchor
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TextInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UpdateSurroundingText
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
text
"
ToString_str_t
(
text
)
)
;
AddProp
(
ss
"
caret
"
ToString_uint32_t
(
caret
)
)
;
AddProp
(
ss
"
anchor
"
ToString_uint32_t
(
anchor
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TextInput_Dev_0_2
*
)
RealGetInterface
(
"
PPB_TextInput
(
Dev
)
;
0
.
2
"
)
)
-
>
UpdateSurroundingText
(
instance
text
caret
anchor
)
;
#
endif
}
static
void
SelectionChanged_0_2
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TextInput_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SelectionChanged
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TextInput_Dev_0_2
*
)
RealGetInterface
(
"
PPB_TextInput
(
Dev
)
;
0
.
2
"
)
)
-
>
SelectionChanged
(
instance
)
;
#
endif
}
}
static
PPB_TextInput_Dev_0_2
_PPB_TextInput_Dev_0_2
=
{
ns_PPB_TextInput_Dev_0_2
:
:
SetTextInputType_0_2
ns_PPB_TextInput_Dev_0_2
:
:
UpdateCaretPosition_0_2
ns_PPB_TextInput_Dev_0_2
:
:
CancelCompositionText_0_2
ns_PPB_TextInput_Dev_0_2
:
:
UpdateSurroundingText_0_2
ns_PPB_TextInput_Dev_0_2
:
:
SelectionChanged_0_2
}
;
const
string
ToString_PPB_TextInput_Dev
(
const
PPB_TextInput_Dev_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_TraceEventTime
(
const
PP_TraceEventTime
*
v
)
{
return
ToString_int64_t
(
v
)
;
}
const
string
ToString_PP_TraceEventTime
(
const
PP_TraceEventTime
&
v
)
{
return
ToString_PP_TraceEventTime
(
&
v
)
;
}
void
FromJSON_PP_TraceEventTime
(
JSONIterator
&
iterator
PP_TraceEventTime
&
value
)
{
FromJSON_int64_t
(
iterator
value
)
;
}
namespace
ns_PPB_Trace_Event_Dev_0_1
{
static
void
*
GetCategoryEnabled_0_1
(
const
char
*
category_name
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Trace_Event_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCategoryEnabled
\
"
"
)
;
AddProp
(
ss
"
category_name
"
ToString_cstr_t
(
category_name
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
void
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_mem_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
void
*
rval
=
(
(
PPB_Trace_Event_Dev_0_1
*
)
RealGetInterface
(
"
PPB_Trace_Event
(
Dev
)
;
0
.
1
"
)
)
-
>
GetCategoryEnabled
(
category_name
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_mem_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
AddTraceEvent_0_1
(
int8_t
phase
const
void
*
category_enabled
const
char
*
name
uint64_t
id
uint32_t
num_args
const
char
*
arg_names
[
]
const
uint8_t
arg_types
[
]
const
uint64_t
arg_values
[
]
uint8_t
flags
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Trace_Event_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AddTraceEvent
\
"
"
)
;
AddProp
(
ss
"
phase
"
ToString_int8_t
(
phase
)
)
;
AddProp
(
ss
"
category_enabled
"
ToString_mem_t
(
category_enabled
)
)
;
AddProp
(
ss
"
name
"
ToString_cstr_t
(
name
)
)
;
AddProp
(
ss
"
id
"
ToString_uint64_t
(
id
)
)
;
AddProp
(
ss
"
num_args
"
ToString_uint32_t
(
num_args
)
)
;
{
BeginProp
(
ss
"
arg_names
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
num_args
;
+
+
_n
)
{
AddElement
(
ss
ToString_str_t
(
arg_names
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
arg_types
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
num_args
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint8_t
(
arg_types
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
arg_values
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
num_args
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint64_t
(
arg_values
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
flags
"
ToString_uint8_t
(
flags
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Trace_Event_Dev_0_1
*
)
RealGetInterface
(
"
PPB_Trace_Event
(
Dev
)
;
0
.
1
"
)
)
-
>
AddTraceEvent
(
phase
category_enabled
name
id
num_args
arg_names
arg_types
arg_values
flags
)
;
#
endif
}
static
void
SetThreadName_0_1
(
const
char
*
thread_name
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Trace_Event_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetThreadName
\
"
"
)
;
AddProp
(
ss
"
thread_name
"
ToString_cstr_t
(
thread_name
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Trace_Event_Dev_0_1
*
)
RealGetInterface
(
"
PPB_Trace_Event
(
Dev
)
;
0
.
1
"
)
)
-
>
SetThreadName
(
thread_name
)
;
#
endif
}
}
static
PPB_Trace_Event_Dev_0_1
_PPB_Trace_Event_Dev_0_1
=
{
ns_PPB_Trace_Event_Dev_0_1
:
:
GetCategoryEnabled_0_1
ns_PPB_Trace_Event_Dev_0_1
:
:
AddTraceEvent_0_1
ns_PPB_Trace_Event_Dev_0_1
:
:
SetThreadName_0_1
}
;
const
string
ToString_PPB_Trace_Event_Dev
(
const
PPB_Trace_Event_Dev_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Trace_Event_Dev_0_2
{
static
void
*
GetCategoryEnabled_0_2
(
const
char
*
category_name
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Trace_Event_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCategoryEnabled
\
"
"
)
;
AddProp
(
ss
"
category_name
"
ToString_cstr_t
(
category_name
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
void
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_mem_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
void
*
rval
=
(
(
PPB_Trace_Event_Dev_0_2
*
)
RealGetInterface
(
"
PPB_Trace_Event
(
Dev
)
;
0
.
2
"
)
)
-
>
GetCategoryEnabled
(
category_name
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_mem_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
AddTraceEvent_0_2
(
int8_t
phase
const
void
*
category_enabled
const
char
*
name
uint64_t
id
uint32_t
num_args
const
char
*
arg_names
[
]
const
uint8_t
arg_types
[
]
const
uint64_t
arg_values
[
]
uint8_t
flags
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Trace_Event_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AddTraceEvent
\
"
"
)
;
AddProp
(
ss
"
phase
"
ToString_int8_t
(
phase
)
)
;
AddProp
(
ss
"
category_enabled
"
ToString_mem_t
(
category_enabled
)
)
;
AddProp
(
ss
"
name
"
ToString_cstr_t
(
name
)
)
;
AddProp
(
ss
"
id
"
ToString_uint64_t
(
id
)
)
;
AddProp
(
ss
"
num_args
"
ToString_uint32_t
(
num_args
)
)
;
{
BeginProp
(
ss
"
arg_names
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
num_args
;
+
+
_n
)
{
AddElement
(
ss
ToString_str_t
(
arg_names
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
arg_types
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
num_args
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint8_t
(
arg_types
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
arg_values
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
num_args
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint64_t
(
arg_values
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
flags
"
ToString_uint8_t
(
flags
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Trace_Event_Dev_0_2
*
)
RealGetInterface
(
"
PPB_Trace_Event
(
Dev
)
;
0
.
2
"
)
)
-
>
AddTraceEvent
(
phase
category_enabled
name
id
num_args
arg_names
arg_types
arg_values
flags
)
;
#
endif
}
static
void
AddTraceEventWithThreadIdAndTimestamp_0_2
(
int8_t
phase
const
void
*
category_enabled
const
char
*
name
uint64_t
id
int32_t
thread_id
PP_TraceEventTime
timestamp
uint32_t
num_args
const
char
*
arg_names
[
]
const
uint8_t
arg_types
[
]
const
uint64_t
arg_values
[
]
uint8_t
flags
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Trace_Event_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AddTraceEventWithThreadIdAndTimestamp
\
"
"
)
;
AddProp
(
ss
"
phase
"
ToString_int8_t
(
phase
)
)
;
AddProp
(
ss
"
category_enabled
"
ToString_mem_t
(
category_enabled
)
)
;
AddProp
(
ss
"
name
"
ToString_cstr_t
(
name
)
)
;
AddProp
(
ss
"
id
"
ToString_uint64_t
(
id
)
)
;
AddProp
(
ss
"
thread_id
"
ToString_int32_t
(
thread_id
)
)
;
AddProp
(
ss
"
timestamp
"
ToString_PP_TraceEventTime
(
timestamp
)
)
;
AddProp
(
ss
"
num_args
"
ToString_uint32_t
(
num_args
)
)
;
{
BeginProp
(
ss
"
arg_names
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
num_args
;
+
+
_n
)
{
AddElement
(
ss
ToString_str_t
(
arg_names
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
arg_types
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
num_args
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint8_t
(
arg_types
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
arg_values
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
num_args
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint64_t
(
arg_values
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
flags
"
ToString_uint8_t
(
flags
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Trace_Event_Dev_0_2
*
)
RealGetInterface
(
"
PPB_Trace_Event
(
Dev
)
;
0
.
2
"
)
)
-
>
AddTraceEventWithThreadIdAndTimestamp
(
phase
category_enabled
name
id
thread_id
timestamp
num_args
arg_names
arg_types
arg_values
flags
)
;
#
endif
}
static
PP_TraceEventTime
Now_0_2
(
void
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Trace_Event_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Now
\
"
"
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int64_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_TraceEventTime
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int64_t
rval
=
(
(
PPB_Trace_Event_Dev_0_2
*
)
RealGetInterface
(
"
PPB_Trace_Event
(
Dev
)
;
0
.
2
"
)
)
-
>
Now
(
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_TraceEventTime
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
SetThreadName_0_2
(
const
char
*
thread_name
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Trace_Event_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetThreadName
\
"
"
)
;
AddProp
(
ss
"
thread_name
"
ToString_cstr_t
(
thread_name
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Trace_Event_Dev_0_2
*
)
RealGetInterface
(
"
PPB_Trace_Event
(
Dev
)
;
0
.
2
"
)
)
-
>
SetThreadName
(
thread_name
)
;
#
endif
}
}
static
PPB_Trace_Event_Dev_0_2
_PPB_Trace_Event_Dev_0_2
=
{
ns_PPB_Trace_Event_Dev_0_2
:
:
GetCategoryEnabled_0_2
ns_PPB_Trace_Event_Dev_0_2
:
:
AddTraceEvent_0_2
ns_PPB_Trace_Event_Dev_0_2
:
:
AddTraceEventWithThreadIdAndTimestamp_0_2
ns_PPB_Trace_Event_Dev_0_2
:
:
Now_0_2
ns_PPB_Trace_Event_Dev_0_2
:
:
SetThreadName_0_2
}
;
const
string
ToString_PPB_Trace_Event_Dev
(
const
PPB_Trace_Event_Dev_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_TrueTypeFontFamily_Dev
(
const
PP_TrueTypeFontFamily_Dev
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_TRUETYPEFONTFAMILY_SERIF
\
"
"
;
case
1
:
return
"
\
"
PP_TRUETYPEFONTFAMILY_SANSSERIF
\
"
"
;
case
2
:
return
"
\
"
PP_TRUETYPEFONTFAMILY_CURSIVE
\
"
"
;
case
3
:
return
"
\
"
PP_TRUETYPEFONTFAMILY_FANTASY
\
"
"
;
case
4
:
return
"
\
"
PP_TRUETYPEFONTFAMILY_MONOSPACE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_TrueTypeFontFamily_Dev
(
const
PP_TrueTypeFontFamily_Dev
&
v
)
{
return
ToString_PP_TrueTypeFontFamily_Dev
(
&
v
)
;
}
void
FromJSON_PP_TrueTypeFontFamily_Dev
(
JSONIterator
&
iterator
PP_TrueTypeFontFamily_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_TrueTypeFontFamily_Dev
(
v
)
;
}
const
string
ToString_PP_TrueTypeFontStyle_Dev
(
const
PP_TrueTypeFontStyle_Dev
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_TRUETYPEFONTSTYLE_NORMAL
\
"
"
;
case
1
:
return
"
\
"
PP_TRUETYPEFONTSTYLE_ITALIC
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_TrueTypeFontStyle_Dev
(
const
PP_TrueTypeFontStyle_Dev
&
v
)
{
return
ToString_PP_TrueTypeFontStyle_Dev
(
&
v
)
;
}
void
FromJSON_PP_TrueTypeFontStyle_Dev
(
JSONIterator
&
iterator
PP_TrueTypeFontStyle_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_TrueTypeFontStyle_Dev
(
v
)
;
}
const
string
ToString_PP_TrueTypeFontWeight_Dev
(
const
PP_TrueTypeFontWeight_Dev
*
v
)
{
switch
(
*
v
)
{
case
100
:
return
"
\
"
PP_TRUETYPEFONTWEIGHT_THIN
\
"
"
;
case
200
:
return
"
\
"
PP_TRUETYPEFONTWEIGHT_ULTRALIGHT
\
"
"
;
case
300
:
return
"
\
"
PP_TRUETYPEFONTWEIGHT_LIGHT
\
"
"
;
case
400
:
return
"
\
"
PP_TRUETYPEFONTWEIGHT_NORMAL
\
"
"
;
case
500
:
return
"
\
"
PP_TRUETYPEFONTWEIGHT_MEDIUM
\
"
"
;
case
600
:
return
"
\
"
PP_TRUETYPEFONTWEIGHT_SEMIBOLD
\
"
"
;
case
700
:
return
"
\
"
PP_TRUETYPEFONTWEIGHT_BOLD
\
"
"
;
case
800
:
return
"
\
"
PP_TRUETYPEFONTWEIGHT_ULTRABOLD
\
"
"
;
case
900
:
return
"
\
"
PP_TRUETYPEFONTWEIGHT_HEAVY
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_TrueTypeFontWeight_Dev
(
const
PP_TrueTypeFontWeight_Dev
&
v
)
{
return
ToString_PP_TrueTypeFontWeight_Dev
(
&
v
)
;
}
void
FromJSON_PP_TrueTypeFontWeight_Dev
(
JSONIterator
&
iterator
PP_TrueTypeFontWeight_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_TrueTypeFontWeight_Dev
(
v
)
;
}
const
string
ToString_PP_TrueTypeFontWidth_Dev
(
const
PP_TrueTypeFontWidth_Dev
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_TRUETYPEFONTWIDTH_ULTRACONDENSED
\
"
"
;
case
1
:
return
"
\
"
PP_TRUETYPEFONTWIDTH_EXTRACONDENSED
\
"
"
;
case
2
:
return
"
\
"
PP_TRUETYPEFONTWIDTH_CONDENSED
\
"
"
;
case
3
:
return
"
\
"
PP_TRUETYPEFONTWIDTH_SEMICONDENSED
\
"
"
;
case
4
:
return
"
\
"
PP_TRUETYPEFONTWIDTH_NORMAL
\
"
"
;
case
5
:
return
"
\
"
PP_TRUETYPEFONTWIDTH_SEMIEXPANDED
\
"
"
;
case
6
:
return
"
\
"
PP_TRUETYPEFONTWIDTH_EXPANDED
\
"
"
;
case
7
:
return
"
\
"
PP_TRUETYPEFONTWIDTH_EXTRAEXPANDED
\
"
"
;
case
8
:
return
"
\
"
PP_TRUETYPEFONTWIDTH_ULTRAEXPANDED
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_TrueTypeFontWidth_Dev
(
const
PP_TrueTypeFontWidth_Dev
&
v
)
{
return
ToString_PP_TrueTypeFontWidth_Dev
(
&
v
)
;
}
void
FromJSON_PP_TrueTypeFontWidth_Dev
(
JSONIterator
&
iterator
PP_TrueTypeFontWidth_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_TrueTypeFontWidth_Dev
(
v
)
;
}
const
string
ToString_PP_TrueTypeFontCharset_Dev
(
const
PP_TrueTypeFontCharset_Dev
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_ANSI
\
"
"
;
case
1
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_DEFAULT
\
"
"
;
case
2
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_SYMBOL
\
"
"
;
case
77
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_MAC
\
"
"
;
case
128
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_SHIFTJIS
\
"
"
;
case
129
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_HANGUL
\
"
"
;
case
130
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_JOHAB
\
"
"
;
case
134
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_GB2312
\
"
"
;
case
136
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_CHINESEBIG5
\
"
"
;
case
161
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_GREEK
\
"
"
;
case
162
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_TURKISH
\
"
"
;
case
163
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_VIETNAMESE
\
"
"
;
case
177
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_HEBREW
\
"
"
;
case
178
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_ARABIC
\
"
"
;
case
186
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_BALTIC
\
"
"
;
case
204
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_RUSSIAN
\
"
"
;
case
222
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_THAI
\
"
"
;
case
238
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_EASTEUROPE
\
"
"
;
case
255
:
return
"
\
"
PP_TRUETYPEFONTCHARSET_OEM
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_TrueTypeFontCharset_Dev
(
const
PP_TrueTypeFontCharset_Dev
&
v
)
{
return
ToString_PP_TrueTypeFontCharset_Dev
(
&
v
)
;
}
void
FromJSON_PP_TrueTypeFontCharset_Dev
(
JSONIterator
&
iterator
PP_TrueTypeFontCharset_Dev
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_TrueTypeFontCharset_Dev
(
v
)
;
}
const
string
ToString_PP_TrueTypeFontDesc_Dev
(
const
PP_TrueTypeFontDesc_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_TrueTypeFontDesc_Dev
(
*
v
)
;
}
const
string
ToString_PP_TrueTypeFontDesc_Dev
(
const
PP_TrueTypeFontDesc_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
family
"
ToString_PP_Var
(
v
.
family
)
)
;
AddProp
(
x
"
generic_family
"
ToString_PP_TrueTypeFontFamily_Dev
(
v
.
generic_family
)
)
;
AddProp
(
x
"
style
"
ToString_PP_TrueTypeFontStyle_Dev
(
v
.
style
)
)
;
AddProp
(
x
"
weight
"
ToString_PP_TrueTypeFontWeight_Dev
(
v
.
weight
)
)
;
AddProp
(
x
"
width
"
ToString_PP_TrueTypeFontWidth_Dev
(
v
.
width
)
)
;
AddProp
(
x
"
charset
"
ToString_PP_TrueTypeFontCharset_Dev
(
v
.
charset
)
)
;
AddProp
(
x
"
padding
"
ToString_int32_t
(
v
.
padding
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_TrueTypeFontDesc_Dev
(
JSONIterator
&
iterator
PP_TrueTypeFontDesc_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
value
.
family
)
;
iterator
.
skip
(
)
;
FromJSON_PP_TrueTypeFontFamily_Dev
(
iterator
value
.
generic_family
)
;
iterator
.
skip
(
)
;
FromJSON_PP_TrueTypeFontStyle_Dev
(
iterator
value
.
style
)
;
iterator
.
skip
(
)
;
FromJSON_PP_TrueTypeFontWeight_Dev
(
iterator
value
.
weight
)
;
iterator
.
skip
(
)
;
FromJSON_PP_TrueTypeFontWidth_Dev
(
iterator
value
.
width
)
;
iterator
.
skip
(
)
;
FromJSON_PP_TrueTypeFontCharset_Dev
(
iterator
value
.
charset
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
padding
)
;
}
namespace
ns_PPB_TrueTypeFont_Dev_0_1
{
static
int32_t
GetFontFamilies_0_1
(
PP_Instance
instance
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TrueTypeFont_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFontFamilies
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TrueTypeFont_Dev_0_1
*
)
RealGetInterface
(
"
PPB_TrueTypeFont
(
Dev
)
;
0
.
1
"
)
)
-
>
GetFontFamilies
(
instance
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetFontsInFamily_0_1
(
PP_Instance
instance
struct
PP_Var
family
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TrueTypeFont_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFontsInFamily
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
family
"
ToString_PP_Var
(
family
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TrueTypeFont_Dev_0_1
*
)
RealGetInterface
(
"
PPB_TrueTypeFont
(
Dev
)
;
0
.
1
"
)
)
-
>
GetFontsInFamily
(
instance
family
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
Create_0_1
(
PP_Instance
instance
const
struct
PP_TrueTypeFontDesc_Dev
*
desc
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TrueTypeFont_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
desc
"
ToString_PP_TrueTypeFontDesc_Dev
(
desc
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TrueTypeFont_Dev_0_1
*
)
RealGetInterface
(
"
PPB_TrueTypeFont
(
Dev
)
;
0
.
1
"
)
)
-
>
Create
(
instance
desc
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsTrueTypeFont_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TrueTypeFont_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsTrueTypeFont
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TrueTypeFont_Dev_0_1
*
)
RealGetInterface
(
"
PPB_TrueTypeFont
(
Dev
)
;
0
.
1
"
)
)
-
>
IsTrueTypeFont
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Describe_0_1
(
PP_Resource
font
struct
PP_TrueTypeFontDesc_Dev
*
desc
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TrueTypeFont_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Describe
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
desc
"
PointerToString
(
desc
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
desc
)
{
iterator
.
skip
(
)
;
FromJSON_PP_TrueTypeFontDesc_Dev
(
iterator
*
desc
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TrueTypeFont_Dev_0_1
*
)
RealGetInterface
(
"
PPB_TrueTypeFont
(
Dev
)
;
0
.
1
"
)
)
-
>
Describe
(
font
desc
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
desc
)
{
AddProp
(
os
"
desc
"
ToString_PP_TrueTypeFontDesc_Dev
(
desc
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetTableTags_0_1
(
PP_Resource
font
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TrueTypeFont_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTableTags
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TrueTypeFont_Dev_0_1
*
)
RealGetInterface
(
"
PPB_TrueTypeFont
(
Dev
)
;
0
.
1
"
)
)
-
>
GetTableTags
(
font
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetTable_0_1
(
PP_Resource
font
uint32_t
table
int32_t
offset
int32_t
max_data_length
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TrueTypeFont_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetTable
\
"
"
)
;
AddProp
(
ss
"
font
"
ToString_PP_Resource
(
font
)
)
;
AddProp
(
ss
"
table
"
ToString_uint32_t
(
table
)
)
;
AddProp
(
ss
"
offset
"
ToString_int32_t
(
offset
)
)
;
AddProp
(
ss
"
max_data_length
"
ToString_int32_t
(
max_data_length
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TrueTypeFont_Dev_0_1
*
)
RealGetInterface
(
"
PPB_TrueTypeFont
(
Dev
)
;
0
.
1
"
)
)
-
>
GetTable
(
font
table
offset
max_data_length
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_TrueTypeFont_Dev_0_1
_PPB_TrueTypeFont_Dev_0_1
=
{
ns_PPB_TrueTypeFont_Dev_0_1
:
:
GetFontFamilies_0_1
ns_PPB_TrueTypeFont_Dev_0_1
:
:
GetFontsInFamily_0_1
ns_PPB_TrueTypeFont_Dev_0_1
:
:
Create_0_1
ns_PPB_TrueTypeFont_Dev_0_1
:
:
IsTrueTypeFont_0_1
ns_PPB_TrueTypeFont_Dev_0_1
:
:
Describe_0_1
ns_PPB_TrueTypeFont_Dev_0_1
:
:
GetTableTags_0_1
ns_PPB_TrueTypeFont_Dev_0_1
:
:
GetTable_0_1
}
;
const
string
ToString_PPB_TrueTypeFont_Dev
(
const
PPB_TrueTypeFont_Dev_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_URLComponent_Dev
(
const
PP_URLComponent_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_URLComponent_Dev
(
*
v
)
;
}
const
string
ToString_PP_URLComponent_Dev
(
const
PP_URLComponent_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
begin
"
ToString_int32_t
(
v
.
begin
)
)
;
AddProp
(
x
"
len
"
ToString_int32_t
(
v
.
len
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_URLComponent_Dev
(
JSONIterator
&
iterator
PP_URLComponent_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
begin
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
len
)
;
}
const
string
ToString_PP_URLComponents_Dev
(
const
PP_URLComponents_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_URLComponents_Dev
(
*
v
)
;
}
const
string
ToString_PP_URLComponents_Dev
(
const
PP_URLComponents_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
scheme
"
ToString_PP_URLComponent_Dev
(
v
.
scheme
)
)
;
AddProp
(
x
"
username
"
ToString_PP_URLComponent_Dev
(
v
.
username
)
)
;
AddProp
(
x
"
password
"
ToString_PP_URLComponent_Dev
(
v
.
password
)
)
;
AddProp
(
x
"
host
"
ToString_PP_URLComponent_Dev
(
v
.
host
)
)
;
AddProp
(
x
"
port
"
ToString_PP_URLComponent_Dev
(
v
.
port
)
)
;
AddProp
(
x
"
path
"
ToString_PP_URLComponent_Dev
(
v
.
path
)
)
;
AddProp
(
x
"
query
"
ToString_PP_URLComponent_Dev
(
v
.
query
)
)
;
AddProp
(
x
"
ref
"
ToString_PP_URLComponent_Dev
(
v
.
ref
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_URLComponents_Dev
(
JSONIterator
&
iterator
PP_URLComponents_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_URLComponent_Dev
(
iterator
value
.
scheme
)
;
iterator
.
skip
(
)
;
FromJSON_PP_URLComponent_Dev
(
iterator
value
.
username
)
;
iterator
.
skip
(
)
;
FromJSON_PP_URLComponent_Dev
(
iterator
value
.
password
)
;
iterator
.
skip
(
)
;
FromJSON_PP_URLComponent_Dev
(
iterator
value
.
host
)
;
iterator
.
skip
(
)
;
FromJSON_PP_URLComponent_Dev
(
iterator
value
.
port
)
;
iterator
.
skip
(
)
;
FromJSON_PP_URLComponent_Dev
(
iterator
value
.
path
)
;
iterator
.
skip
(
)
;
FromJSON_PP_URLComponent_Dev
(
iterator
value
.
query
)
;
iterator
.
skip
(
)
;
FromJSON_PP_URLComponent_Dev
(
iterator
value
.
ref
)
;
}
namespace
ns_PPB_URLUtil_Dev_0_6
{
static
struct
PP_Var
Canonicalize_0_6
(
struct
PP_Var
url
struct
PP_URLComponents_Dev
*
components
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Canonicalize
\
"
"
)
;
AddProp
(
ss
"
url
"
ToString_PP_Var
(
url
)
)
;
AddProp
(
ss
"
components
"
PointerToString
(
components
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
components
)
{
iterator
.
skip
(
)
;
FromJSON_PP_URLComponents_Dev
(
iterator
*
components
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_URLUtil_Dev_0_6
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
6
"
)
)
-
>
Canonicalize
(
url
components
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
components
)
{
AddProp
(
os
"
components
"
ToString_PP_URLComponents_Dev
(
components
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
ResolveRelativeToURL_0_6
(
struct
PP_Var
base_url
struct
PP_Var
relative_string
struct
PP_URLComponents_Dev
*
components
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ResolveRelativeToURL
\
"
"
)
;
AddProp
(
ss
"
base_url
"
ToString_PP_Var
(
base_url
)
)
;
AddProp
(
ss
"
relative_string
"
ToString_PP_Var
(
relative_string
)
)
;
AddProp
(
ss
"
components
"
PointerToString
(
components
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
components
)
{
iterator
.
skip
(
)
;
FromJSON_PP_URLComponents_Dev
(
iterator
*
components
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_URLUtil_Dev_0_6
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
6
"
)
)
-
>
ResolveRelativeToURL
(
base_url
relative_string
components
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
components
)
{
AddProp
(
os
"
components
"
ToString_PP_URLComponents_Dev
(
components
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
ResolveRelativeToDocument_0_6
(
PP_Instance
instance
struct
PP_Var
relative_string
struct
PP_URLComponents_Dev
*
components
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ResolveRelativeToDocument
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
relative_string
"
ToString_PP_Var
(
relative_string
)
)
;
AddProp
(
ss
"
components
"
PointerToString
(
components
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
components
)
{
iterator
.
skip
(
)
;
FromJSON_PP_URLComponents_Dev
(
iterator
*
components
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_URLUtil_Dev_0_6
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
6
"
)
)
-
>
ResolveRelativeToDocument
(
instance
relative_string
components
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
components
)
{
AddProp
(
os
"
components
"
ToString_PP_URLComponents_Dev
(
components
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsSameSecurityOrigin_0_6
(
struct
PP_Var
url_a
struct
PP_Var
url_b
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsSameSecurityOrigin
\
"
"
)
;
AddProp
(
ss
"
url_a
"
ToString_PP_Var
(
url_a
)
)
;
AddProp
(
ss
"
url_b
"
ToString_PP_Var
(
url_b
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLUtil_Dev_0_6
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
6
"
)
)
-
>
IsSameSecurityOrigin
(
url_a
url_b
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
DocumentCanRequest_0_6
(
PP_Instance
instance
struct
PP_Var
url
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DocumentCanRequest
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
url
"
ToString_PP_Var
(
url
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLUtil_Dev_0_6
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
6
"
)
)
-
>
DocumentCanRequest
(
instance
url
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
DocumentCanAccessDocument_0_6
(
PP_Instance
active
PP_Instance
target
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DocumentCanAccessDocument
\
"
"
)
;
AddProp
(
ss
"
active
"
ToString_PP_Instance
(
active
)
)
;
AddProp
(
ss
"
target
"
ToString_PP_Instance
(
target
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLUtil_Dev_0_6
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
6
"
)
)
-
>
DocumentCanAccessDocument
(
active
target
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetDocumentURL_0_6
(
PP_Instance
instance
struct
PP_URLComponents_Dev
*
components
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDocumentURL
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
components
"
PointerToString
(
components
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
components
)
{
iterator
.
skip
(
)
;
FromJSON_PP_URLComponents_Dev
(
iterator
*
components
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_URLUtil_Dev_0_6
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
6
"
)
)
-
>
GetDocumentURL
(
instance
components
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
components
)
{
AddProp
(
os
"
components
"
ToString_PP_URLComponents_Dev
(
components
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetPluginInstanceURL_0_6
(
PP_Instance
instance
struct
PP_URLComponents_Dev
*
components
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPluginInstanceURL
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
components
"
PointerToString
(
components
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
components
)
{
iterator
.
skip
(
)
;
FromJSON_PP_URLComponents_Dev
(
iterator
*
components
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_URLUtil_Dev_0_6
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
6
"
)
)
-
>
GetPluginInstanceURL
(
instance
components
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
components
)
{
AddProp
(
os
"
components
"
ToString_PP_URLComponents_Dev
(
components
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_URLUtil_Dev_0_6
_PPB_URLUtil_Dev_0_6
=
{
ns_PPB_URLUtil_Dev_0_6
:
:
Canonicalize_0_6
ns_PPB_URLUtil_Dev_0_6
:
:
ResolveRelativeToURL_0_6
ns_PPB_URLUtil_Dev_0_6
:
:
ResolveRelativeToDocument_0_6
ns_PPB_URLUtil_Dev_0_6
:
:
IsSameSecurityOrigin_0_6
ns_PPB_URLUtil_Dev_0_6
:
:
DocumentCanRequest_0_6
ns_PPB_URLUtil_Dev_0_6
:
:
DocumentCanAccessDocument_0_6
ns_PPB_URLUtil_Dev_0_6
:
:
GetDocumentURL_0_6
ns_PPB_URLUtil_Dev_0_6
:
:
GetPluginInstanceURL_0_6
}
;
const
string
ToString_PPB_URLUtil_Dev
(
const
PPB_URLUtil_Dev_0_6
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_URLUtil_Dev_0_7
{
static
struct
PP_Var
Canonicalize_0_7
(
struct
PP_Var
url
struct
PP_URLComponents_Dev
*
components
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
7
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Canonicalize
\
"
"
)
;
AddProp
(
ss
"
url
"
ToString_PP_Var
(
url
)
)
;
AddProp
(
ss
"
components
"
PointerToString
(
components
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
components
)
{
iterator
.
skip
(
)
;
FromJSON_PP_URLComponents_Dev
(
iterator
*
components
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_URLUtil_Dev_0_7
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
7
"
)
)
-
>
Canonicalize
(
url
components
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
components
)
{
AddProp
(
os
"
components
"
ToString_PP_URLComponents_Dev
(
components
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
ResolveRelativeToURL_0_7
(
struct
PP_Var
base_url
struct
PP_Var
relative_string
struct
PP_URLComponents_Dev
*
components
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
7
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ResolveRelativeToURL
\
"
"
)
;
AddProp
(
ss
"
base_url
"
ToString_PP_Var
(
base_url
)
)
;
AddProp
(
ss
"
relative_string
"
ToString_PP_Var
(
relative_string
)
)
;
AddProp
(
ss
"
components
"
PointerToString
(
components
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
components
)
{
iterator
.
skip
(
)
;
FromJSON_PP_URLComponents_Dev
(
iterator
*
components
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_URLUtil_Dev_0_7
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
7
"
)
)
-
>
ResolveRelativeToURL
(
base_url
relative_string
components
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
components
)
{
AddProp
(
os
"
components
"
ToString_PP_URLComponents_Dev
(
components
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
ResolveRelativeToDocument_0_7
(
PP_Instance
instance
struct
PP_Var
relative_string
struct
PP_URLComponents_Dev
*
components
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
7
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ResolveRelativeToDocument
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
relative_string
"
ToString_PP_Var
(
relative_string
)
)
;
AddProp
(
ss
"
components
"
PointerToString
(
components
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
components
)
{
iterator
.
skip
(
)
;
FromJSON_PP_URLComponents_Dev
(
iterator
*
components
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_URLUtil_Dev_0_7
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
7
"
)
)
-
>
ResolveRelativeToDocument
(
instance
relative_string
components
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
components
)
{
AddProp
(
os
"
components
"
ToString_PP_URLComponents_Dev
(
components
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsSameSecurityOrigin_0_7
(
struct
PP_Var
url_a
struct
PP_Var
url_b
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
7
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsSameSecurityOrigin
\
"
"
)
;
AddProp
(
ss
"
url_a
"
ToString_PP_Var
(
url_a
)
)
;
AddProp
(
ss
"
url_b
"
ToString_PP_Var
(
url_b
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLUtil_Dev_0_7
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
7
"
)
)
-
>
IsSameSecurityOrigin
(
url_a
url_b
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
DocumentCanRequest_0_7
(
PP_Instance
instance
struct
PP_Var
url
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
7
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DocumentCanRequest
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
url
"
ToString_PP_Var
(
url
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLUtil_Dev_0_7
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
7
"
)
)
-
>
DocumentCanRequest
(
instance
url
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
DocumentCanAccessDocument_0_7
(
PP_Instance
active
PP_Instance
target
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
7
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DocumentCanAccessDocument
\
"
"
)
;
AddProp
(
ss
"
active
"
ToString_PP_Instance
(
active
)
)
;
AddProp
(
ss
"
target
"
ToString_PP_Instance
(
target
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_URLUtil_Dev_0_7
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
7
"
)
)
-
>
DocumentCanAccessDocument
(
active
target
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetDocumentURL_0_7
(
PP_Instance
instance
struct
PP_URLComponents_Dev
*
components
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
7
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDocumentURL
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
components
"
PointerToString
(
components
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
components
)
{
iterator
.
skip
(
)
;
FromJSON_PP_URLComponents_Dev
(
iterator
*
components
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_URLUtil_Dev_0_7
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
7
"
)
)
-
>
GetDocumentURL
(
instance
components
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
components
)
{
AddProp
(
os
"
components
"
ToString_PP_URLComponents_Dev
(
components
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetPluginInstanceURL_0_7
(
PP_Instance
instance
struct
PP_URLComponents_Dev
*
components
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
7
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPluginInstanceURL
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
components
"
PointerToString
(
components
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
components
)
{
iterator
.
skip
(
)
;
FromJSON_PP_URLComponents_Dev
(
iterator
*
components
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_URLUtil_Dev_0_7
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
7
"
)
)
-
>
GetPluginInstanceURL
(
instance
components
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
components
)
{
AddProp
(
os
"
components
"
ToString_PP_URLComponents_Dev
(
components
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetPluginReferrerURL_0_7
(
PP_Instance
instance
struct
PP_URLComponents_Dev
*
components
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_URLUtil_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
7
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPluginReferrerURL
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
components
"
PointerToString
(
components
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
components
)
{
iterator
.
skip
(
)
;
FromJSON_PP_URLComponents_Dev
(
iterator
*
components
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_URLUtil_Dev_0_7
*
)
RealGetInterface
(
"
PPB_URLUtil
(
Dev
)
;
0
.
7
"
)
)
-
>
GetPluginReferrerURL
(
instance
components
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
components
)
{
AddProp
(
os
"
components
"
ToString_PP_URLComponents_Dev
(
components
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_URLUtil_Dev_0_7
_PPB_URLUtil_Dev_0_7
=
{
ns_PPB_URLUtil_Dev_0_7
:
:
Canonicalize_0_7
ns_PPB_URLUtil_Dev_0_7
:
:
ResolveRelativeToURL_0_7
ns_PPB_URLUtil_Dev_0_7
:
:
ResolveRelativeToDocument_0_7
ns_PPB_URLUtil_Dev_0_7
:
:
IsSameSecurityOrigin_0_7
ns_PPB_URLUtil_Dev_0_7
:
:
DocumentCanRequest_0_7
ns_PPB_URLUtil_Dev_0_7
:
:
DocumentCanAccessDocument_0_7
ns_PPB_URLUtil_Dev_0_7
:
:
GetDocumentURL_0_7
ns_PPB_URLUtil_Dev_0_7
:
:
GetPluginInstanceURL_0_7
ns_PPB_URLUtil_Dev_0_7
:
:
GetPluginReferrerURL_0_7
}
;
const
string
ToString_PPB_URLUtil_Dev
(
const
PPB_URLUtil_Dev_0_7
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Var_Deprecated_0_3
{
static
void
AddRef_0_3
(
struct
PP_Var
var
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AddRef
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
AddRef
(
var
)
;
#
endif
}
static
void
Release_0_3
(
struct
PP_Var
var
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Release
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
Release
(
var
)
;
#
endif
}
static
struct
PP_Var
VarFromUtf8_0_3
(
PP_Module
module
const
char
*
data
uint32_t
len
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VarFromUtf8
\
"
"
)
;
AddProp
(
ss
"
module
"
ToString_PP_Module
(
module
)
)
;
AddProp
(
ss
"
data
"
ToString_str_t
(
data
)
)
;
AddProp
(
ss
"
len
"
ToString_uint32_t
(
len
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
VarFromUtf8
(
module
data
len
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
const
char
*
VarToUtf8_0_3
(
struct
PP_Var
var
uint32_t
*
len
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
VarToUtf8
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
AddProp
(
ss
"
len
"
PointerToString
(
len
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
char
*
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_str_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
len
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
const
char
*
rval
=
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
VarToUtf8
(
var
len
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_str_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
len
)
{
AddProp
(
os
"
len
"
ToString_uint32_t
(
len
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
HasProperty_0_3
(
struct
PP_Var
object
struct
PP_Var
name
struct
PP_Var
*
exception
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
HasProperty
\
"
"
)
;
AddProp
(
ss
"
object
"
ToString_PP_Var
(
object
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_Var
(
name
)
)
;
AddProp
(
ss
"
exception
"
PointerToString
(
exception
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
exception
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
HasProperty
(
object
name
exception
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
exception
)
{
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
HasMethod_0_3
(
struct
PP_Var
object
struct
PP_Var
name
struct
PP_Var
*
exception
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
HasMethod
\
"
"
)
;
AddProp
(
ss
"
object
"
ToString_PP_Var
(
object
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_Var
(
name
)
)
;
AddProp
(
ss
"
exception
"
PointerToString
(
exception
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
exception
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
HasMethod
(
object
name
exception
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
exception
)
{
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetProperty_0_3
(
struct
PP_Var
object
struct
PP_Var
name
struct
PP_Var
*
exception
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetProperty
\
"
"
)
;
AddProp
(
ss
"
object
"
ToString_PP_Var
(
object
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_Var
(
name
)
)
;
AddProp
(
ss
"
exception
"
PointerToString
(
exception
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
exception
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
GetProperty
(
object
name
exception
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
exception
)
{
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
GetAllPropertyNames_0_3
(
struct
PP_Var
object
uint32_t
*
property_count
struct
PP_Var
*
*
properties
struct
PP_Var
*
exception
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAllPropertyNames
\
"
"
)
;
AddProp
(
ss
"
object
"
ToString_PP_Var
(
object
)
)
;
AddProp
(
ss
"
property_count
"
PointerToString
(
property_count
)
)
;
AddProp
(
ss
"
properties
"
PointerToString
(
properties
)
)
;
AddProp
(
ss
"
exception
"
PointerToString
(
exception
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
property_count
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
*
property_count
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
*
properties
=
new
struct
PP_Var
[
*
property_count
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_PP_Var
(
iterator
(
*
properties
)
[
_n
]
)
;
}
}
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
exception
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
GetAllPropertyNames
(
object
property_count
properties
exception
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
property_count
)
{
AddProp
(
os
"
property_count
"
ToString_uint32_t
(
property_count
)
)
;
}
{
BeginProp
(
os
"
properties
"
)
;
BeginElements
(
os
)
;
for
(
uint32_t
_n
=
0
;
_n
<
*
property_count
;
+
+
_n
)
{
AddElement
(
os
ToString_PP_Var
(
properties
[
_n
]
)
)
;
}
EndElements
(
os
)
;
}
if
(
!
!
exception
)
{
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
SetProperty_0_3
(
struct
PP_Var
object
struct
PP_Var
name
struct
PP_Var
value
struct
PP_Var
*
exception
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetProperty
\
"
"
)
;
AddProp
(
ss
"
object
"
ToString_PP_Var
(
object
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_Var
(
name
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
AddProp
(
ss
"
exception
"
PointerToString
(
exception
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
exception
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
SetProperty
(
object
name
value
exception
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
exception
)
{
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
RemoveProperty_0_3
(
struct
PP_Var
object
struct
PP_Var
name
struct
PP_Var
*
exception
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RemoveProperty
\
"
"
)
;
AddProp
(
ss
"
object
"
ToString_PP_Var
(
object
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_Var
(
name
)
)
;
AddProp
(
ss
"
exception
"
PointerToString
(
exception
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
exception
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
RemoveProperty
(
object
name
exception
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
exception
)
{
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
struct
PP_Var
Call_0_3
(
struct
PP_Var
object
struct
PP_Var
method_name
uint32_t
argc
const
struct
PP_Var
argv
[
]
struct
PP_Var
*
exception
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Call
\
"
"
)
;
AddProp
(
ss
"
object
"
ToString_PP_Var
(
object
)
)
;
AddProp
(
ss
"
method_name
"
ToString_PP_Var
(
method_name
)
)
;
AddProp
(
ss
"
argc
"
ToString_uint32_t
(
argc
)
)
;
{
BeginProp
(
ss
"
argv
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
argc
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Var
(
argv
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
exception
"
PointerToString
(
exception
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
exception
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
Call
(
object
method_name
argc
argv
exception
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
exception
)
{
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
Construct_0_3
(
struct
PP_Var
object
uint32_t
argc
const
struct
PP_Var
argv
[
]
struct
PP_Var
*
exception
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Construct
\
"
"
)
;
AddProp
(
ss
"
object
"
ToString_PP_Var
(
object
)
)
;
AddProp
(
ss
"
argc
"
ToString_uint32_t
(
argc
)
)
;
{
BeginProp
(
ss
"
argv
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
argc
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Var
(
argv
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
exception
"
PointerToString
(
exception
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
exception
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
Construct
(
object
argc
argv
exception
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
exception
)
{
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsInstanceOf_0_3
(
struct
PP_Var
var
const
struct
PPP_Class_Deprecated_1_0
*
object_class
void
*
object_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsInstanceOf
\
"
"
)
;
AddProp
(
ss
"
var
"
ToString_PP_Var
(
var
)
)
;
AddProp
(
ss
"
object_class
"
ToString_PPP_Class_Deprecated
(
object_class
)
)
;
AddProp
(
ss
"
object_data
"
PointerToString
(
object_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
object_data
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
Logging_PPP_Class_Deprecated_holder
*
logging_object_class
=
new
Logging_PPP_Class_Deprecated_holder
(
)
;
logging_object_class
-
>
_real_PPP_Class_Deprecated
=
object_class
;
logging_object_class
-
>
object
=
object_data
;
object_data
=
logging_object_class
;
PP_Bool
rval
=
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
IsInstanceOf
(
var
&
_interpose_PPP_Class_Deprecated_1_0
object_data
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
object_data
"
ToString_mem_t
(
object_data
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
CreateObject_0_3
(
PP_Instance
instance
const
struct
PPP_Class_Deprecated_1_0
*
object_class
void
*
object_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateObject
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
object_class
"
ToString_PPP_Class_Deprecated
(
object_class
)
)
;
AddProp
(
ss
"
object_data
"
ToString_mem_t
(
object_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
Logging_PPP_Class_Deprecated_holder
*
logging_object_class
=
new
Logging_PPP_Class_Deprecated_holder
(
)
;
logging_object_class
-
>
_real_PPP_Class_Deprecated
=
object_class
;
logging_object_class
-
>
object
=
object_data
;
object_data
=
logging_object_class
;
struct
PP_Var
rval
=
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
CreateObject
(
instance
&
_interpose_PPP_Class_Deprecated_1_0
object_data
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
CreateObjectWithModuleDeprecated_0_3
(
PP_Module
module
const
struct
PPP_Class_Deprecated_1_0
*
object_class
void
*
object_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Var_Deprecated
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateObjectWithModuleDeprecated
\
"
"
)
;
AddProp
(
ss
"
module
"
ToString_PP_Module
(
module
)
)
;
AddProp
(
ss
"
object_class
"
ToString_PPP_Class_Deprecated
(
object_class
)
)
;
AddProp
(
ss
"
object_data
"
ToString_mem_t
(
object_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
Logging_PPP_Class_Deprecated_holder
*
logging_object_class
=
new
Logging_PPP_Class_Deprecated_holder
(
)
;
logging_object_class
-
>
_real_PPP_Class_Deprecated
=
object_class
;
logging_object_class
-
>
object
=
object_data
;
object_data
=
logging_object_class
;
struct
PP_Var
rval
=
(
(
PPB_Var_Deprecated_0_3
*
)
RealGetInterface
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
)
)
-
>
CreateObjectWithModuleDeprecated
(
module
&
_interpose_PPP_Class_Deprecated_1_0
object_data
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Var_Deprecated_0_3
_PPB_Var_Deprecated_0_3
=
{
ns_PPB_Var_Deprecated_0_3
:
:
AddRef_0_3
ns_PPB_Var_Deprecated_0_3
:
:
Release_0_3
ns_PPB_Var_Deprecated_0_3
:
:
VarFromUtf8_0_3
ns_PPB_Var_Deprecated_0_3
:
:
VarToUtf8_0_3
ns_PPB_Var_Deprecated_0_3
:
:
HasProperty_0_3
ns_PPB_Var_Deprecated_0_3
:
:
HasMethod_0_3
ns_PPB_Var_Deprecated_0_3
:
:
GetProperty_0_3
ns_PPB_Var_Deprecated_0_3
:
:
GetAllPropertyNames_0_3
ns_PPB_Var_Deprecated_0_3
:
:
SetProperty_0_3
ns_PPB_Var_Deprecated_0_3
:
:
RemoveProperty_0_3
ns_PPB_Var_Deprecated_0_3
:
:
Call_0_3
ns_PPB_Var_Deprecated_0_3
:
:
Construct_0_3
ns_PPB_Var_Deprecated_0_3
:
:
IsInstanceOf_0_3
ns_PPB_Var_Deprecated_0_3
:
:
CreateObject_0_3
ns_PPB_Var_Deprecated_0_3
:
:
CreateObjectWithModuleDeprecated_0_3
}
;
const
string
ToString_PPB_Var_Deprecated
(
const
PPB_Var_Deprecated_0_3
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VideoCapture_Dev_0_3
{
static
PP_Resource
Create_0_3
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoCapture_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoCapture_Dev_0_3
*
)
RealGetInterface
(
"
PPB_VideoCapture
(
Dev
)
;
0
.
3
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVideoCapture_0_3
(
PP_Resource
video_capture
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoCapture_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVideoCapture
\
"
"
)
;
AddProp
(
ss
"
video_capture
"
ToString_PP_Resource
(
video_capture
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VideoCapture_Dev_0_3
*
)
RealGetInterface
(
"
PPB_VideoCapture
(
Dev
)
;
0
.
3
"
)
)
-
>
IsVideoCapture
(
video_capture
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
EnumerateDevices_0_3
(
PP_Resource
video_capture
struct
PP_ArrayOutput
output
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoCapture_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
EnumerateDevices
\
"
"
)
;
AddProp
(
ss
"
video_capture
"
ToString_PP_Resource
(
video_capture
)
)
;
AddProp
(
ss
"
output
"
ToString_PP_ArrayOutput
(
output
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoCapture_Dev_0_3
*
)
RealGetInterface
(
"
PPB_VideoCapture
(
Dev
)
;
0
.
3
"
)
)
-
>
EnumerateDevices
(
video_capture
output
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
MonitorDeviceChange_0_3
(
PP_Resource
video_capture
PP_MonitorDeviceChangeCallback
callback
void
*
user_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoCapture_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MonitorDeviceChange
\
"
"
)
;
AddProp
(
ss
"
video_capture
"
ToString_PP_Resource
(
video_capture
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_MonitorDeviceChangeCallback
(
callback
)
)
;
AddProp
(
ss
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoCapture_Dev_0_3
*
)
RealGetInterface
(
"
PPB_VideoCapture
(
Dev
)
;
0
.
3
"
)
)
-
>
MonitorDeviceChange
(
video_capture
callback
user_data
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Open_0_3
(
PP_Resource
video_capture
PP_Resource
device_ref
const
struct
PP_VideoCaptureDeviceInfo_Dev
*
requested_info
uint32_t
buffer_count
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoCapture_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Open
\
"
"
)
;
AddProp
(
ss
"
video_capture
"
ToString_PP_Resource
(
video_capture
)
)
;
AddProp
(
ss
"
device_ref
"
ToString_PP_Resource
(
device_ref
)
)
;
AddProp
(
ss
"
requested_info
"
ToString_PP_VideoCaptureDeviceInfo_Dev
(
requested_info
)
)
;
AddProp
(
ss
"
buffer_count
"
ToString_uint32_t
(
buffer_count
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoCapture_Dev_0_3
*
)
RealGetInterface
(
"
PPB_VideoCapture
(
Dev
)
;
0
.
3
"
)
)
-
>
Open
(
video_capture
device_ref
requested_info
buffer_count
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
StartCapture_0_3
(
PP_Resource
video_capture
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoCapture_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StartCapture
\
"
"
)
;
AddProp
(
ss
"
video_capture
"
ToString_PP_Resource
(
video_capture
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoCapture_Dev_0_3
*
)
RealGetInterface
(
"
PPB_VideoCapture
(
Dev
)
;
0
.
3
"
)
)
-
>
StartCapture
(
video_capture
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
ReuseBuffer_0_3
(
PP_Resource
video_capture
uint32_t
buffer
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoCapture_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReuseBuffer
\
"
"
)
;
AddProp
(
ss
"
video_capture
"
ToString_PP_Resource
(
video_capture
)
)
;
AddProp
(
ss
"
buffer
"
ToString_uint32_t
(
buffer
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoCapture_Dev_0_3
*
)
RealGetInterface
(
"
PPB_VideoCapture
(
Dev
)
;
0
.
3
"
)
)
-
>
ReuseBuffer
(
video_capture
buffer
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
StopCapture_0_3
(
PP_Resource
video_capture
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoCapture_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StopCapture
\
"
"
)
;
AddProp
(
ss
"
video_capture
"
ToString_PP_Resource
(
video_capture
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoCapture_Dev_0_3
*
)
RealGetInterface
(
"
PPB_VideoCapture
(
Dev
)
;
0
.
3
"
)
)
-
>
StopCapture
(
video_capture
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_0_3
(
PP_Resource
video_capture
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoCapture_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
video_capture
"
ToString_PP_Resource
(
video_capture
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoCapture_Dev_0_3
*
)
RealGetInterface
(
"
PPB_VideoCapture
(
Dev
)
;
0
.
3
"
)
)
-
>
Close
(
video_capture
)
;
#
endif
}
}
static
PPB_VideoCapture_Dev_0_3
_PPB_VideoCapture_Dev_0_3
=
{
ns_PPB_VideoCapture_Dev_0_3
:
:
Create_0_3
ns_PPB_VideoCapture_Dev_0_3
:
:
IsVideoCapture_0_3
ns_PPB_VideoCapture_Dev_0_3
:
:
EnumerateDevices_0_3
ns_PPB_VideoCapture_Dev_0_3
:
:
MonitorDeviceChange_0_3
ns_PPB_VideoCapture_Dev_0_3
:
:
Open_0_3
ns_PPB_VideoCapture_Dev_0_3
:
:
StartCapture_0_3
ns_PPB_VideoCapture_Dev_0_3
:
:
ReuseBuffer_0_3
ns_PPB_VideoCapture_Dev_0_3
:
:
StopCapture_0_3
ns_PPB_VideoCapture_Dev_0_3
:
:
Close_0_3
}
;
const
string
ToString_PPB_VideoCapture_Dev
(
const
PPB_VideoCapture_Dev_0_3
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VideoDecoder_Dev_0_16
{
static
PP_Resource
Create_0_16
(
PP_Instance
instance
PP_Resource
context
PP_VideoDecoder_Profile
profile
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
16
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
context
"
ToString_PP_Resource
(
context
)
)
;
AddProp
(
ss
"
profile
"
ToString_PP_VideoDecoder_Profile
(
profile
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoDecoder_Dev_0_16
*
)
RealGetInterface
(
"
PPB_VideoDecoder
(
Dev
)
;
0
.
16
"
)
)
-
>
Create
(
instance
context
profile
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVideoDecoder_0_16
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
16
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVideoDecoder
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VideoDecoder_Dev_0_16
*
)
RealGetInterface
(
"
PPB_VideoDecoder
(
Dev
)
;
0
.
16
"
)
)
-
>
IsVideoDecoder
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Decode_0_16
(
PP_Resource
video_decoder
const
struct
PP_VideoBitstreamBuffer_Dev
*
bitstream_buffer
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
16
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Decode
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
bitstream_buffer
"
ToString_PP_VideoBitstreamBuffer_Dev
(
bitstream_buffer
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_Dev_0_16
*
)
RealGetInterface
(
"
PPB_VideoDecoder
(
Dev
)
;
0
.
16
"
)
)
-
>
Decode
(
video_decoder
bitstream_buffer
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
AssignPictureBuffers_0_16
(
PP_Resource
video_decoder
uint32_t
no_of_buffers
const
struct
PP_PictureBuffer_Dev
buffers
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
16
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AssignPictureBuffers
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
no_of_buffers
"
ToString_uint32_t
(
no_of_buffers
)
)
;
{
BeginProp
(
ss
"
buffers
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
no_of_buffers
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_PictureBuffer_Dev
(
buffers
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoDecoder_Dev_0_16
*
)
RealGetInterface
(
"
PPB_VideoDecoder
(
Dev
)
;
0
.
16
"
)
)
-
>
AssignPictureBuffers
(
video_decoder
no_of_buffers
buffers
)
;
#
endif
}
static
void
ReusePictureBuffer_0_16
(
PP_Resource
video_decoder
int32_t
picture_buffer_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
16
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReusePictureBuffer
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
picture_buffer_id
"
ToString_int32_t
(
picture_buffer_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoDecoder_Dev_0_16
*
)
RealGetInterface
(
"
PPB_VideoDecoder
(
Dev
)
;
0
.
16
"
)
)
-
>
ReusePictureBuffer
(
video_decoder
picture_buffer_id
)
;
#
endif
}
static
int32_t
Flush_0_16
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
16
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Flush
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_Dev_0_16
*
)
RealGetInterface
(
"
PPB_VideoDecoder
(
Dev
)
;
0
.
16
"
)
)
-
>
Flush
(
video_decoder
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Reset_0_16
(
PP_Resource
video_decoder
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
16
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Reset
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDecoder_Dev_0_16
*
)
RealGetInterface
(
"
PPB_VideoDecoder
(
Dev
)
;
0
.
16
"
)
)
-
>
Reset
(
video_decoder
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Destroy_0_16
(
PP_Resource
video_decoder
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDecoder_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
16
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Destroy
\
"
"
)
;
AddProp
(
ss
"
video_decoder
"
ToString_PP_Resource
(
video_decoder
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoDecoder_Dev_0_16
*
)
RealGetInterface
(
"
PPB_VideoDecoder
(
Dev
)
;
0
.
16
"
)
)
-
>
Destroy
(
video_decoder
)
;
#
endif
}
}
static
PPB_VideoDecoder_Dev_0_16
_PPB_VideoDecoder_Dev_0_16
=
{
ns_PPB_VideoDecoder_Dev_0_16
:
:
Create_0_16
ns_PPB_VideoDecoder_Dev_0_16
:
:
IsVideoDecoder_0_16
ns_PPB_VideoDecoder_Dev_0_16
:
:
Decode_0_16
ns_PPB_VideoDecoder_Dev_0_16
:
:
AssignPictureBuffers_0_16
ns_PPB_VideoDecoder_Dev_0_16
:
:
ReusePictureBuffer_0_16
ns_PPB_VideoDecoder_Dev_0_16
:
:
Flush_0_16
ns_PPB_VideoDecoder_Dev_0_16
:
:
Reset_0_16
ns_PPB_VideoDecoder_Dev_0_16
:
:
Destroy_0_16
}
;
const
string
ToString_PPB_VideoDecoder_Dev
(
const
PPB_VideoDecoder_Dev_0_16
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_View_Dev_0_1
{
static
float
GetDeviceScale_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDeviceScale
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
float
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_float_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
float
rval
=
(
(
PPB_View_Dev_0_1
*
)
RealGetInterface
(
"
PPB_View
(
Dev
)
;
0
.
1
"
)
)
-
>
GetDeviceScale
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_float_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
float
GetCSSScale_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_View_Dev
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCSSScale
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
float
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_float_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
float
rval
=
(
(
PPB_View_Dev_0_1
*
)
RealGetInterface
(
"
PPB_View
(
Dev
)
;
0
.
1
"
)
)
-
>
GetCSSScale
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_float_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_View_Dev_0_1
_PPB_View_Dev_0_1
=
{
ns_PPB_View_Dev_0_1
:
:
GetDeviceScale_0_1
ns_PPB_View_Dev_0_1
:
:
GetCSSScale_0_1
}
;
const
string
ToString_PPB_View_Dev
(
const
PPB_View_Dev_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
char
*
Call_PPP_Class_Deprecated_HasProperty
(
const
PPP_Class_Deprecated
*
_interface
JSONIterator
&
iterator
)
{
void
*
object
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
object
)
;
struct
PP_Var
name
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
name
)
;
struct
PP_Var
exception
;
PP_Bool
rval
;
rval
=
_interface
-
>
HasProperty
(
(
const
void
*
)
object
(
struct
PP_Var
)
name
(
struct
PP_Var
*
)
&
exception
)
;
stringstream
os
;
BeginElements
(
os
)
;
AddElement
(
os
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
BeginElement
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Class_Deprecated_HasMethod
(
const
PPP_Class_Deprecated
*
_interface
JSONIterator
&
iterator
)
{
void
*
object
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
object
)
;
struct
PP_Var
name
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
name
)
;
struct
PP_Var
exception
;
PP_Bool
rval
;
rval
=
_interface
-
>
HasMethod
(
(
const
void
*
)
object
(
struct
PP_Var
)
name
(
struct
PP_Var
*
)
&
exception
)
;
stringstream
os
;
BeginElements
(
os
)
;
AddElement
(
os
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
BeginElement
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Class_Deprecated_GetProperty
(
const
PPP_Class_Deprecated
*
_interface
JSONIterator
&
iterator
)
{
void
*
object
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
object
)
;
struct
PP_Var
name
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
name
)
;
struct
PP_Var
exception
;
struct
PP_Var
rval
;
rval
=
_interface
-
>
GetProperty
(
(
const
void
*
)
object
(
struct
PP_Var
)
name
(
struct
PP_Var
*
)
&
exception
)
;
stringstream
os
;
BeginElements
(
os
)
;
AddElement
(
os
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
BeginElement
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Class_Deprecated_GetAllPropertyNames
(
const
PPP_Class_Deprecated
*
_interface
JSONIterator
&
iterator
)
{
void
*
object
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
object
)
;
uint32_t
property_count
;
struct
PP_Var
*
properties
;
iterator
.
skip
(
)
;
PointerValueFromJSON
(
iterator
properties
)
;
struct
PP_Var
exception
;
_interface
-
>
GetAllPropertyNames
(
(
const
void
*
)
object
(
uint32_t
*
)
&
property_count
(
struct
PP_Var
*
*
)
&
properties
(
struct
PP_Var
*
)
&
exception
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
property_count
"
ToString_uint32_t
(
property_count
)
)
;
{
BeginProp
(
os
"
properties
"
)
;
BeginElements
(
os
)
;
for
(
uint32_t
_n
=
0
;
_n
<
property_count
;
+
+
_n
)
{
AddElement
(
os
ToString_PP_Var
(
properties
[
_n
]
)
)
;
}
EndElements
(
os
)
;
}
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Class_Deprecated_SetProperty
(
const
PPP_Class_Deprecated
*
_interface
JSONIterator
&
iterator
)
{
void
*
object
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
object
)
;
struct
PP_Var
name
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
name
)
;
struct
PP_Var
value
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
value
)
;
struct
PP_Var
exception
;
_interface
-
>
SetProperty
(
(
const
void
*
)
object
(
struct
PP_Var
)
name
(
struct
PP_Var
)
value
(
struct
PP_Var
*
)
&
exception
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Class_Deprecated_RemoveProperty
(
const
PPP_Class_Deprecated
*
_interface
JSONIterator
&
iterator
)
{
void
*
object
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
object
)
;
struct
PP_Var
name
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
name
)
;
struct
PP_Var
exception
;
_interface
-
>
RemoveProperty
(
(
const
void
*
)
object
(
struct
PP_Var
)
name
(
struct
PP_Var
*
)
&
exception
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Class_Deprecated_Call
(
const
PPP_Class_Deprecated
*
_interface
JSONIterator
&
iterator
)
{
void
*
object
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
object
)
;
struct
PP_Var
method_name
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
method_name
)
;
uint32_t
argc
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
argc
)
;
struct
PP_Var
*
argv
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
argc
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
argv
=
new
struct
PP_Var
[
argc
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_PP_Var
(
iterator
(
argv
)
[
_n
]
)
;
}
}
struct
PP_Var
exception
;
struct
PP_Var
rval
;
rval
=
_interface
-
>
Call
(
(
const
void
*
)
object
(
struct
PP_Var
)
method_name
(
uint32_t
)
argc
(
const
struct
PP_Var
*
)
argv
(
struct
PP_Var
*
)
&
exception
)
;
stringstream
os
;
BeginElements
(
os
)
;
AddElement
(
os
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
BeginElement
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Class_Deprecated_Construct
(
const
PPP_Class_Deprecated
*
_interface
JSONIterator
&
iterator
)
{
void
*
object
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
object
)
;
uint32_t
argc
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
argc
)
;
struct
PP_Var
*
argv
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
argc
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
argv
=
new
struct
PP_Var
[
argc
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_PP_Var
(
iterator
(
argv
)
[
_n
]
)
;
}
}
struct
PP_Var
exception
;
struct
PP_Var
rval
;
rval
=
_interface
-
>
Construct
(
(
const
void
*
)
object
(
uint32_t
)
argc
(
const
struct
PP_Var
*
)
argv
(
struct
PP_Var
*
)
&
exception
)
;
stringstream
os
;
BeginElements
(
os
)
;
AddElement
(
os
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
BeginElement
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Class_Deprecated_Deallocate
(
const
PPP_Class_Deprecated
*
_interface
JSONIterator
&
iterator
)
{
void
*
object
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
object
)
;
_interface
-
>
Deallocate
(
(
const
void
*
)
object
)
;
return
nullptr
;
}
char
*
Call_PPP_Class_Deprecated
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
HasProperty
"
)
)
{
return
Call_PPP_Class_Deprecated_HasProperty
(
(
const
PPP_Class_Deprecated
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
HasMethod
"
)
)
{
return
Call_PPP_Class_Deprecated_HasMethod
(
(
const
PPP_Class_Deprecated
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
GetProperty
"
)
)
{
return
Call_PPP_Class_Deprecated_GetProperty
(
(
const
PPP_Class_Deprecated
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
GetAllPropertyNames
"
)
)
{
return
Call_PPP_Class_Deprecated_GetAllPropertyNames
(
(
const
PPP_Class_Deprecated
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
SetProperty
"
)
)
{
return
Call_PPP_Class_Deprecated_SetProperty
(
(
const
PPP_Class_Deprecated
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
RemoveProperty
"
)
)
{
return
Call_PPP_Class_Deprecated_RemoveProperty
(
(
const
PPP_Class_Deprecated
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
Call
"
)
)
{
return
Call_PPP_Class_Deprecated_Call
(
(
const
PPP_Class_Deprecated
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
Construct
"
)
)
{
return
Call_PPP_Class_Deprecated_Construct
(
(
const
PPP_Class_Deprecated
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
Deallocate
"
)
)
{
return
Call_PPP_Class_Deprecated_Deallocate
(
(
const
PPP_Class_Deprecated
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_NetworkState_Dev_SetOnLine
(
const
PPP_NetworkState_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Bool
is_online
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
is_online
)
;
_interface
-
>
SetOnLine
(
(
PP_Bool
)
is_online
)
;
return
nullptr
;
}
char
*
Call_PPP_NetworkState_Dev
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
SetOnLine
"
)
)
{
return
Call_PPP_NetworkState_Dev_SetOnLine
(
(
const
PPP_NetworkState_Dev
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
const
string
ToString_PP_PrintPageNumberRange_Dev
(
const
PP_PrintPageNumberRange_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_PrintPageNumberRange_Dev
(
*
v
)
;
}
const
string
ToString_PP_PrintPageNumberRange_Dev
(
const
PP_PrintPageNumberRange_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
first_page_number
"
ToString_uint32_t
(
v
.
first_page_number
)
)
;
AddProp
(
x
"
last_page_number
"
ToString_uint32_t
(
v
.
last_page_number
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_PrintPageNumberRange_Dev
(
JSONIterator
&
iterator
PP_PrintPageNumberRange_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
first_page_number
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
last_page_number
)
;
}
char
*
Call_PPP_Printing_Dev_QuerySupportedFormats
(
const
PPP_Printing_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
uint32_t
rval
;
rval
=
_interface
-
>
QuerySupportedFormats
(
(
PP_Instance
)
instance
)
;
return
strdup
(
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Printing_Dev_Begin
(
const
PPP_Printing_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
struct
PP_PrintSettings_Dev
print_settings
;
iterator
.
skip
(
)
;
FromJSON_PP_PrintSettings_Dev
(
iterator
print_settings
)
;
int32_t
rval
;
rval
=
_interface
-
>
Begin
(
(
PP_Instance
)
instance
(
const
struct
PP_PrintSettings_Dev
*
)
&
print_settings
)
;
return
strdup
(
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Printing_Dev_PrintPages
(
const
PPP_Printing_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
struct
PP_PrintPageNumberRange_Dev
page_ranges
;
iterator
.
skip
(
)
;
FromJSON_PP_PrintPageNumberRange_Dev
(
iterator
page_ranges
)
;
uint32_t
page_range_count
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
page_range_count
)
;
int32_t
rval
;
rval
=
_interface
-
>
PrintPages
(
(
PP_Instance
)
instance
(
const
struct
PP_PrintPageNumberRange_Dev
*
)
&
page_ranges
(
uint32_t
)
page_range_count
)
;
return
strdup
(
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Printing_Dev_End
(
const
PPP_Printing_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
_interface
-
>
End
(
(
PP_Instance
)
instance
)
;
return
nullptr
;
}
char
*
Call_PPP_Printing_Dev_IsScalingDisabled
(
const
PPP_Printing_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Bool
rval
;
rval
=
_interface
-
>
IsScalingDisabled
(
(
PP_Instance
)
instance
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Printing_Dev
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
QuerySupportedFormats
"
)
)
{
return
Call_PPP_Printing_Dev_QuerySupportedFormats
(
(
const
PPP_Printing_Dev
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
Begin
"
)
)
{
return
Call_PPP_Printing_Dev_Begin
(
(
const
PPP_Printing_Dev
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
PrintPages
"
)
)
{
return
Call_PPP_Printing_Dev_PrintPages
(
(
const
PPP_Printing_Dev
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
End
"
)
)
{
return
Call_PPP_Printing_Dev_End
(
(
const
PPP_Printing_Dev
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
IsScalingDisabled
"
)
)
{
return
Call_PPP_Printing_Dev_IsScalingDisabled
(
(
const
PPP_Printing_Dev
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_TextInput_Dev_RequestSurroundingText
(
const
PPP_TextInput_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
uint32_t
desired_number_of_characters
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
desired_number_of_characters
)
;
_interface
-
>
RequestSurroundingText
(
(
PP_Instance
)
instance
(
uint32_t
)
desired_number_of_characters
)
;
return
nullptr
;
}
char
*
Call_PPP_TextInput_Dev
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
RequestSurroundingText
"
)
)
{
return
Call_PPP_TextInput_Dev_RequestSurroundingText
(
(
const
PPP_TextInput_Dev
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_VideoCapture_Dev_OnDeviceInfo
(
const
PPP_VideoCapture_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
video_capture
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
video_capture
)
;
struct
PP_VideoCaptureDeviceInfo_Dev
info
;
iterator
.
skip
(
)
;
FromJSON_PP_VideoCaptureDeviceInfo_Dev
(
iterator
info
)
;
uint32_t
buffer_count
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
buffer_count
)
;
PP_Resource
*
buffers
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
buffer_count
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
buffers
=
new
PP_Resource
[
buffer_count
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_PP_Resource
(
iterator
(
buffers
)
[
_n
]
)
;
}
}
_interface
-
>
OnDeviceInfo
(
(
PP_Instance
)
instance
(
PP_Resource
)
video_capture
(
const
struct
PP_VideoCaptureDeviceInfo_Dev
*
)
&
info
(
uint32_t
)
buffer_count
(
const
PP_Resource
*
)
buffers
)
;
return
nullptr
;
}
char
*
Call_PPP_VideoCapture_Dev_OnStatus
(
const
PPP_VideoCapture_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
video_capture
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
video_capture
)
;
uint32_t
status
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
status
)
;
_interface
-
>
OnStatus
(
(
PP_Instance
)
instance
(
PP_Resource
)
video_capture
(
uint32_t
)
status
)
;
return
nullptr
;
}
char
*
Call_PPP_VideoCapture_Dev_OnError
(
const
PPP_VideoCapture_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
video_capture
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
video_capture
)
;
uint32_t
error_code
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
error_code
)
;
_interface
-
>
OnError
(
(
PP_Instance
)
instance
(
PP_Resource
)
video_capture
(
uint32_t
)
error_code
)
;
return
nullptr
;
}
char
*
Call_PPP_VideoCapture_Dev_OnBufferReady
(
const
PPP_VideoCapture_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
video_capture
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
video_capture
)
;
uint32_t
buffer
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
buffer
)
;
_interface
-
>
OnBufferReady
(
(
PP_Instance
)
instance
(
PP_Resource
)
video_capture
(
uint32_t
)
buffer
)
;
return
nullptr
;
}
char
*
Call_PPP_VideoCapture_Dev
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
OnDeviceInfo
"
)
)
{
return
Call_PPP_VideoCapture_Dev_OnDeviceInfo
(
(
const
PPP_VideoCapture_Dev
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
OnStatus
"
)
)
{
return
Call_PPP_VideoCapture_Dev_OnStatus
(
(
const
PPP_VideoCapture_Dev
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
OnError
"
)
)
{
return
Call_PPP_VideoCapture_Dev_OnError
(
(
const
PPP_VideoCapture_Dev
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
OnBufferReady
"
)
)
{
return
Call_PPP_VideoCapture_Dev_OnBufferReady
(
(
const
PPP_VideoCapture_Dev
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_VideoDecoder_Dev_ProvidePictureBuffers
(
const
PPP_VideoDecoder_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
decoder
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
decoder
)
;
uint32_t
req_num_of_bufs
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
req_num_of_bufs
)
;
struct
PP_Size
dimensions
;
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
dimensions
)
;
uint32_t
texture_target
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
texture_target
)
;
_interface
-
>
ProvidePictureBuffers
(
(
PP_Instance
)
instance
(
PP_Resource
)
decoder
(
uint32_t
)
req_num_of_bufs
(
const
struct
PP_Size
*
)
&
dimensions
(
uint32_t
)
texture_target
)
;
return
nullptr
;
}
char
*
Call_PPP_VideoDecoder_Dev_DismissPictureBuffer
(
const
PPP_VideoDecoder_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
decoder
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
decoder
)
;
int32_t
picture_buffer_id
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
picture_buffer_id
)
;
_interface
-
>
DismissPictureBuffer
(
(
PP_Instance
)
instance
(
PP_Resource
)
decoder
(
int32_t
)
picture_buffer_id
)
;
return
nullptr
;
}
char
*
Call_PPP_VideoDecoder_Dev_PictureReady
(
const
PPP_VideoDecoder_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
decoder
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
decoder
)
;
struct
PP_Picture_Dev
picture
;
iterator
.
skip
(
)
;
FromJSON_PP_Picture_Dev
(
iterator
picture
)
;
_interface
-
>
PictureReady
(
(
PP_Instance
)
instance
(
PP_Resource
)
decoder
(
const
struct
PP_Picture_Dev
*
)
&
picture
)
;
return
nullptr
;
}
char
*
Call_PPP_VideoDecoder_Dev_NotifyError
(
const
PPP_VideoDecoder_Dev
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
decoder
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
decoder
)
;
PP_VideoDecodeError_Dev
error
;
iterator
.
skip
(
)
;
FromJSON_PP_VideoDecodeError_Dev
(
iterator
error
)
;
_interface
-
>
NotifyError
(
(
PP_Instance
)
instance
(
PP_Resource
)
decoder
(
PP_VideoDecodeError_Dev
)
error
)
;
return
nullptr
;
}
char
*
Call_PPP_VideoDecoder_Dev
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
ProvidePictureBuffers
"
)
)
{
return
Call_PPP_VideoDecoder_Dev_ProvidePictureBuffers
(
(
const
PPP_VideoDecoder_Dev
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DismissPictureBuffer
"
)
)
{
return
Call_PPP_VideoDecoder_Dev_DismissPictureBuffer
(
(
const
PPP_VideoDecoder_Dev
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
PictureReady
"
)
)
{
return
Call_PPP_VideoDecoder_Dev_PictureReady
(
(
const
PPP_VideoDecoder_Dev
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
NotifyError
"
)
)
{
return
Call_PPP_VideoDecoder_Dev_NotifyError
(
(
const
PPP_VideoDecoder_Dev
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
const
string
ToString_PP_DecryptTrackingInfo
(
const
PP_DecryptTrackingInfo
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_DecryptTrackingInfo
(
*
v
)
;
}
const
string
ToString_PP_DecryptTrackingInfo
(
const
PP_DecryptTrackingInfo
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
request_id
"
ToString_uint32_t
(
v
.
request_id
)
)
;
AddProp
(
x
"
buffer_id
"
ToString_uint32_t
(
v
.
buffer_id
)
)
;
AddProp
(
x
"
timestamp
"
ToString_int64_t
(
v
.
timestamp
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_DecryptTrackingInfo
(
JSONIterator
&
iterator
PP_DecryptTrackingInfo
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
request_id
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
buffer_id
)
;
iterator
.
skip
(
)
;
FromJSON_int64_t
(
iterator
value
.
timestamp
)
;
}
const
string
ToString_PP_DecryptSubsampleDescription
(
const
PP_DecryptSubsampleDescription
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_DecryptSubsampleDescription
(
*
v
)
;
}
const
string
ToString_PP_DecryptSubsampleDescription
(
const
PP_DecryptSubsampleDescription
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
clear_bytes
"
ToString_uint32_t
(
v
.
clear_bytes
)
)
;
AddProp
(
x
"
cipher_bytes
"
ToString_uint32_t
(
v
.
cipher_bytes
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_DecryptSubsampleDescription
(
JSONIterator
&
iterator
PP_DecryptSubsampleDescription
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
clear_bytes
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
cipher_bytes
)
;
}
const
string
ToString_PP_EncryptedBlockInfo
(
const
PP_EncryptedBlockInfo
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_EncryptedBlockInfo
(
*
v
)
;
}
const
string
ToString_PP_EncryptedBlockInfo
(
const
PP_EncryptedBlockInfo
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
tracking_info
"
ToString_PP_DecryptTrackingInfo
(
v
.
tracking_info
)
)
;
AddProp
(
x
"
data_size
"
ToString_uint32_t
(
v
.
data_size
)
)
;
{
BeginProp
(
x
"
key_id
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
64
;
+
+
_n
)
{
AddElement
(
x
ToString_uint8_t
(
v
.
key_id
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
AddProp
(
x
"
key_id_size
"
ToString_uint32_t
(
v
.
key_id_size
)
)
;
{
BeginProp
(
x
"
iv
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
16
;
+
+
_n
)
{
AddElement
(
x
ToString_uint8_t
(
v
.
iv
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
AddProp
(
x
"
iv_size
"
ToString_uint32_t
(
v
.
iv_size
)
)
;
{
BeginProp
(
x
"
subsamples
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
32
;
+
+
_n
)
{
AddElement
(
x
ToString_PP_DecryptSubsampleDescription
(
v
.
subsamples
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
AddProp
(
x
"
num_subsamples
"
ToString_uint32_t
(
v
.
num_subsamples
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_EncryptedBlockInfo
(
JSONIterator
&
iterator
PP_EncryptedBlockInfo
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_DecryptTrackingInfo
(
iterator
value
.
tracking_info
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
data_size
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
64
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_uint8_t
(
iterator
(
value
.
key_id
)
[
_n
]
)
;
}
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
key_id_size
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
16
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_uint8_t
(
iterator
(
value
.
iv
)
[
_n
]
)
;
}
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
iv_size
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
32
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_PP_DecryptSubsampleDescription
(
iterator
(
value
.
subsamples
)
[
_n
]
)
;
}
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
num_subsamples
)
;
}
const
string
ToString_PP_DecryptedFrameFormat
(
const
PP_DecryptedFrameFormat
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_DECRYPTEDFRAMEFORMAT_UNKNOWN
\
"
"
;
case
1
:
return
"
\
"
PP_DECRYPTEDFRAMEFORMAT_YV12
\
"
"
;
case
2
:
return
"
\
"
PP_DECRYPTEDFRAMEFORMAT_I420
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_DecryptedFrameFormat
(
const
PP_DecryptedFrameFormat
&
v
)
{
return
ToString_PP_DecryptedFrameFormat
(
&
v
)
;
}
void
FromJSON_PP_DecryptedFrameFormat
(
JSONIterator
&
iterator
PP_DecryptedFrameFormat
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_DecryptedFrameFormat
(
v
)
;
}
const
string
ToString_PP_DecryptedSampleFormat
(
const
PP_DecryptedSampleFormat
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_DECRYPTEDSAMPLEFORMAT_UNKNOWN
\
"
"
;
case
1
:
return
"
\
"
PP_DECRYPTEDSAMPLEFORMAT_U8
\
"
"
;
case
2
:
return
"
\
"
PP_DECRYPTEDSAMPLEFORMAT_S16
\
"
"
;
case
3
:
return
"
\
"
PP_DECRYPTEDSAMPLEFORMAT_S32
\
"
"
;
case
4
:
return
"
\
"
PP_DECRYPTEDSAMPLEFORMAT_F32
\
"
"
;
case
5
:
return
"
\
"
PP_DECRYPTEDSAMPLEFORMAT_PLANAR_S16
\
"
"
;
case
6
:
return
"
\
"
PP_DECRYPTEDSAMPLEFORMAT_PLANAR_F32
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_DecryptedSampleFormat
(
const
PP_DecryptedSampleFormat
&
v
)
{
return
ToString_PP_DecryptedSampleFormat
(
&
v
)
;
}
void
FromJSON_PP_DecryptedSampleFormat
(
JSONIterator
&
iterator
PP_DecryptedSampleFormat
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_DecryptedSampleFormat
(
v
)
;
}
const
string
ToString_PP_DecryptResult
(
const
PP_DecryptResult
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_DECRYPTRESULT_SUCCESS
\
"
"
;
case
1
:
return
"
\
"
PP_DECRYPTRESULT_DECRYPT_NOKEY
\
"
"
;
case
2
:
return
"
\
"
PP_DECRYPTRESULT_NEEDMOREDATA
\
"
"
;
case
3
:
return
"
\
"
PP_DECRYPTRESULT_DECRYPT_ERROR
\
"
"
;
case
4
:
return
"
\
"
PP_DECRYPTRESULT_DECODE_ERROR
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_DecryptResult
(
const
PP_DecryptResult
&
v
)
{
return
ToString_PP_DecryptResult
(
&
v
)
;
}
void
FromJSON_PP_DecryptResult
(
JSONIterator
&
iterator
PP_DecryptResult
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_DecryptResult
(
v
)
;
}
const
string
ToString_PP_DecryptedBlockInfo
(
const
PP_DecryptedBlockInfo
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_DecryptedBlockInfo
(
*
v
)
;
}
const
string
ToString_PP_DecryptedBlockInfo
(
const
PP_DecryptedBlockInfo
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
result
"
ToString_PP_DecryptResult
(
v
.
result
)
)
;
AddProp
(
x
"
data_size
"
ToString_uint32_t
(
v
.
data_size
)
)
;
AddProp
(
x
"
tracking_info
"
ToString_PP_DecryptTrackingInfo
(
v
.
tracking_info
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_DecryptedBlockInfo
(
JSONIterator
&
iterator
PP_DecryptedBlockInfo
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_DecryptResult
(
iterator
value
.
result
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
data_size
)
;
iterator
.
skip
(
)
;
FromJSON_PP_DecryptTrackingInfo
(
iterator
value
.
tracking_info
)
;
}
const
string
ToString_PP_DecryptedFramePlanes
(
const
PP_DecryptedFramePlanes
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_DECRYPTEDFRAMEPLANES_Y
\
"
"
;
case
1
:
return
"
\
"
PP_DECRYPTEDFRAMEPLANES_U
\
"
"
;
case
2
:
return
"
\
"
PP_DECRYPTEDFRAMEPLANES_V
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_DecryptedFramePlanes
(
const
PP_DecryptedFramePlanes
&
v
)
{
return
ToString_PP_DecryptedFramePlanes
(
&
v
)
;
}
void
FromJSON_PP_DecryptedFramePlanes
(
JSONIterator
&
iterator
PP_DecryptedFramePlanes
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_DecryptedFramePlanes
(
v
)
;
}
const
string
ToString_PP_DecryptedFrameInfo
(
const
PP_DecryptedFrameInfo
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_DecryptedFrameInfo
(
*
v
)
;
}
const
string
ToString_PP_DecryptedFrameInfo
(
const
PP_DecryptedFrameInfo
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
result
"
ToString_PP_DecryptResult
(
v
.
result
)
)
;
AddProp
(
x
"
format
"
ToString_PP_DecryptedFrameFormat
(
v
.
format
)
)
;
{
BeginProp
(
x
"
plane_offsets
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
3
;
+
+
_n
)
{
AddElement
(
x
ToString_int32_t
(
v
.
plane_offsets
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
{
BeginProp
(
x
"
strides
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
3
;
+
+
_n
)
{
AddElement
(
x
ToString_int32_t
(
v
.
strides
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
AddProp
(
x
"
width
"
ToString_int32_t
(
v
.
width
)
)
;
AddProp
(
x
"
height
"
ToString_int32_t
(
v
.
height
)
)
;
AddProp
(
x
"
tracking_info
"
ToString_PP_DecryptTrackingInfo
(
v
.
tracking_info
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_DecryptedFrameInfo
(
JSONIterator
&
iterator
PP_DecryptedFrameInfo
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_DecryptResult
(
iterator
value
.
result
)
;
iterator
.
skip
(
)
;
FromJSON_PP_DecryptedFrameFormat
(
iterator
value
.
format
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
3
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_int32_t
(
iterator
(
value
.
plane_offsets
)
[
_n
]
)
;
}
}
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
3
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_int32_t
(
iterator
(
value
.
strides
)
[
_n
]
)
;
}
}
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
width
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
height
)
;
iterator
.
skip
(
)
;
FromJSON_PP_DecryptTrackingInfo
(
iterator
value
.
tracking_info
)
;
}
const
string
ToString_PP_DecryptedSampleInfo
(
const
PP_DecryptedSampleInfo
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_DecryptedSampleInfo
(
*
v
)
;
}
const
string
ToString_PP_DecryptedSampleInfo
(
const
PP_DecryptedSampleInfo
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
result
"
ToString_PP_DecryptResult
(
v
.
result
)
)
;
AddProp
(
x
"
format
"
ToString_PP_DecryptedSampleFormat
(
v
.
format
)
)
;
AddProp
(
x
"
data_size
"
ToString_uint32_t
(
v
.
data_size
)
)
;
AddProp
(
x
"
padding
"
ToString_uint32_t
(
v
.
padding
)
)
;
AddProp
(
x
"
tracking_info
"
ToString_PP_DecryptTrackingInfo
(
v
.
tracking_info
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_DecryptedSampleInfo
(
JSONIterator
&
iterator
PP_DecryptedSampleInfo
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_DecryptResult
(
iterator
value
.
result
)
;
iterator
.
skip
(
)
;
FromJSON_PP_DecryptedSampleFormat
(
iterator
value
.
format
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
data_size
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
padding
)
;
iterator
.
skip
(
)
;
FromJSON_PP_DecryptTrackingInfo
(
iterator
value
.
tracking_info
)
;
}
const
string
ToString_PP_AudioCodec
(
const
PP_AudioCodec
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_AUDIOCODEC_UNKNOWN
\
"
"
;
case
1
:
return
"
\
"
PP_AUDIOCODEC_VORBIS
\
"
"
;
case
2
:
return
"
\
"
PP_AUDIOCODEC_AAC
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_AudioCodec
(
const
PP_AudioCodec
&
v
)
{
return
ToString_PP_AudioCodec
(
&
v
)
;
}
void
FromJSON_PP_AudioCodec
(
JSONIterator
&
iterator
PP_AudioCodec
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_AudioCodec
(
v
)
;
}
const
string
ToString_PP_AudioDecoderConfig
(
const
PP_AudioDecoderConfig
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_AudioDecoderConfig
(
*
v
)
;
}
const
string
ToString_PP_AudioDecoderConfig
(
const
PP_AudioDecoderConfig
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
codec
"
ToString_PP_AudioCodec
(
v
.
codec
)
)
;
AddProp
(
x
"
channel_count
"
ToString_int32_t
(
v
.
channel_count
)
)
;
AddProp
(
x
"
bits_per_channel
"
ToString_int32_t
(
v
.
bits_per_channel
)
)
;
AddProp
(
x
"
samples_per_second
"
ToString_int32_t
(
v
.
samples_per_second
)
)
;
AddProp
(
x
"
request_id
"
ToString_uint32_t
(
v
.
request_id
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_AudioDecoderConfig
(
JSONIterator
&
iterator
PP_AudioDecoderConfig
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_AudioCodec
(
iterator
value
.
codec
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
channel_count
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
bits_per_channel
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
samples_per_second
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
request_id
)
;
}
const
string
ToString_PP_VideoCodec
(
const
PP_VideoCodec
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_VIDEOCODEC_UNKNOWN
\
"
"
;
case
1
:
return
"
\
"
PP_VIDEOCODEC_VP8
\
"
"
;
case
2
:
return
"
\
"
PP_VIDEOCODEC_H264
\
"
"
;
case
3
:
return
"
\
"
PP_VIDEOCODEC_VP9
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_VideoCodec
(
const
PP_VideoCodec
&
v
)
{
return
ToString_PP_VideoCodec
(
&
v
)
;
}
void
FromJSON_PP_VideoCodec
(
JSONIterator
&
iterator
PP_VideoCodec
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_VideoCodec
(
v
)
;
}
const
string
ToString_PP_VideoCodecProfile
(
const
PP_VideoCodecProfile
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_VIDEOCODECPROFILE_UNKNOWN
\
"
"
;
case
1
:
return
"
\
"
PP_VIDEOCODECPROFILE_NOT_NEEDED
\
"
"
;
case
2
:
return
"
\
"
PP_VIDEOCODECPROFILE_H264_BASELINE
\
"
"
;
case
3
:
return
"
\
"
PP_VIDEOCODECPROFILE_H264_MAIN
\
"
"
;
case
4
:
return
"
\
"
PP_VIDEOCODECPROFILE_H264_EXTENDED
\
"
"
;
case
5
:
return
"
\
"
PP_VIDEOCODECPROFILE_H264_HIGH
\
"
"
;
case
6
:
return
"
\
"
PP_VIDEOCODECPROFILE_H264_HIGH_10
\
"
"
;
case
7
:
return
"
\
"
PP_VIDEOCODECPROFILE_H264_HIGH_422
\
"
"
;
case
8
:
return
"
\
"
PP_VIDEOCODECPROFILE_H264_HIGH_444_PREDICTIVE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_VideoCodecProfile
(
const
PP_VideoCodecProfile
&
v
)
{
return
ToString_PP_VideoCodecProfile
(
&
v
)
;
}
void
FromJSON_PP_VideoCodecProfile
(
JSONIterator
&
iterator
PP_VideoCodecProfile
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_VideoCodecProfile
(
v
)
;
}
const
string
ToString_PP_VideoDecoderConfig
(
const
PP_VideoDecoderConfig
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_VideoDecoderConfig
(
*
v
)
;
}
const
string
ToString_PP_VideoDecoderConfig
(
const
PP_VideoDecoderConfig
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
codec
"
ToString_PP_VideoCodec
(
v
.
codec
)
)
;
AddProp
(
x
"
profile
"
ToString_PP_VideoCodecProfile
(
v
.
profile
)
)
;
AddProp
(
x
"
format
"
ToString_PP_DecryptedFrameFormat
(
v
.
format
)
)
;
AddProp
(
x
"
width
"
ToString_int32_t
(
v
.
width
)
)
;
AddProp
(
x
"
height
"
ToString_int32_t
(
v
.
height
)
)
;
AddProp
(
x
"
request_id
"
ToString_uint32_t
(
v
.
request_id
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_VideoDecoderConfig
(
JSONIterator
&
iterator
PP_VideoDecoderConfig
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_VideoCodec
(
iterator
value
.
codec
)
;
iterator
.
skip
(
)
;
FromJSON_PP_VideoCodecProfile
(
iterator
value
.
profile
)
;
iterator
.
skip
(
)
;
FromJSON_PP_DecryptedFrameFormat
(
iterator
value
.
format
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
width
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
height
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
request_id
)
;
}
const
string
ToString_PP_DecryptorStreamType
(
const
PP_DecryptorStreamType
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_DECRYPTORSTREAMTYPE_AUDIO
\
"
"
;
case
1
:
return
"
\
"
PP_DECRYPTORSTREAMTYPE_VIDEO
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_DecryptorStreamType
(
const
PP_DecryptorStreamType
&
v
)
{
return
ToString_PP_DecryptorStreamType
(
&
v
)
;
}
void
FromJSON_PP_DecryptorStreamType
(
JSONIterator
&
iterator
PP_DecryptorStreamType
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_DecryptorStreamType
(
v
)
;
}
const
string
ToString_PP_SessionType
(
const
PP_SessionType
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_SESSIONTYPE_TEMPORARY
\
"
"
;
case
1
:
return
"
\
"
PP_SESSIONTYPE_PERSISTENT_LICENSE
\
"
"
;
case
2
:
return
"
\
"
PP_SESSIONTYPE_PERSISTENT_RELEASE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_SessionType
(
const
PP_SessionType
&
v
)
{
return
ToString_PP_SessionType
(
&
v
)
;
}
void
FromJSON_PP_SessionType
(
JSONIterator
&
iterator
PP_SessionType
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_SessionType
(
v
)
;
}
const
string
ToString_PP_InitDataType
(
const
PP_InitDataType
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_INITDATATYPE_CENC
\
"
"
;
case
1
:
return
"
\
"
PP_INITDATATYPE_KEYIDS
\
"
"
;
case
2
:
return
"
\
"
PP_INITDATATYPE_WEBM
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_InitDataType
(
const
PP_InitDataType
&
v
)
{
return
ToString_PP_InitDataType
(
&
v
)
;
}
void
FromJSON_PP_InitDataType
(
JSONIterator
&
iterator
PP_InitDataType
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_InitDataType
(
v
)
;
}
const
string
ToString_PP_CdmExceptionCode
(
const
PP_CdmExceptionCode
*
v
)
{
switch
(
*
v
)
{
case
1
:
return
"
\
"
PP_CDMEXCEPTIONCODE_NOTSUPPORTEDERROR
\
"
"
;
case
2
:
return
"
\
"
PP_CDMEXCEPTIONCODE_INVALIDSTATEERROR
\
"
"
;
case
3
:
return
"
\
"
PP_CDMEXCEPTIONCODE_INVALIDACCESSERROR
\
"
"
;
case
4
:
return
"
\
"
PP_CDMEXCEPTIONCODE_QUOTAEXCEEDEDERROR
\
"
"
;
case
5
:
return
"
\
"
PP_CDMEXCEPTIONCODE_UNKNOWNERROR
\
"
"
;
case
6
:
return
"
\
"
PP_CDMEXCEPTIONCODE_CLIENTERROR
\
"
"
;
case
7
:
return
"
\
"
PP_CDMEXCEPTIONCODE_OUTPUTERROR
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_CdmExceptionCode
(
const
PP_CdmExceptionCode
&
v
)
{
return
ToString_PP_CdmExceptionCode
(
&
v
)
;
}
void
FromJSON_PP_CdmExceptionCode
(
JSONIterator
&
iterator
PP_CdmExceptionCode
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_CdmExceptionCode
(
v
)
;
}
const
string
ToString_PP_CdmMessageType
(
const
PP_CdmMessageType
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_CDMMESSAGETYPE_LICENSE_REQUEST
\
"
"
;
case
1
:
return
"
\
"
PP_CDMMESSAGETYPE_LICENSE_RENEWAL
\
"
"
;
case
2
:
return
"
\
"
PP_CDMMESSAGETYPE_LICENSE_RELEASE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_CdmMessageType
(
const
PP_CdmMessageType
&
v
)
{
return
ToString_PP_CdmMessageType
(
&
v
)
;
}
void
FromJSON_PP_CdmMessageType
(
JSONIterator
&
iterator
PP_CdmMessageType
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_CdmMessageType
(
v
)
;
}
const
string
ToString_PP_CdmKeyStatus
(
const
PP_CdmKeyStatus
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_CDMKEYSTATUS_USABLE
\
"
"
;
case
1
:
return
"
\
"
PP_CDMKEYSTATUS_INVALID
\
"
"
;
case
2
:
return
"
\
"
PP_CDMKEYSTATUS_EXPIRED
\
"
"
;
case
3
:
return
"
\
"
PP_CDMKEYSTATUS_OUTPUTRESTRICTED
\
"
"
;
case
4
:
return
"
\
"
PP_CDMKEYSTATUS_OUTPUTDOWNSCALED
\
"
"
;
case
5
:
return
"
\
"
PP_CDMKEYSTATUS_STATUSPENDING
\
"
"
;
case
6
:
return
"
\
"
PP_CDMKEYSTATUS_RELEASED
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_CdmKeyStatus
(
const
PP_CdmKeyStatus
&
v
)
{
return
ToString_PP_CdmKeyStatus
(
&
v
)
;
}
void
FromJSON_PP_CdmKeyStatus
(
JSONIterator
&
iterator
PP_CdmKeyStatus
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_CdmKeyStatus
(
v
)
;
}
const
string
ToString_PP_KeyInformation
(
const
PP_KeyInformation
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_KeyInformation
(
*
v
)
;
}
const
string
ToString_PP_KeyInformation
(
const
PP_KeyInformation
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
{
BeginProp
(
x
"
key_id
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
512
;
+
+
_n
)
{
AddElement
(
x
ToString_uint8_t
(
v
.
key_id
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
AddProp
(
x
"
key_id_size
"
ToString_uint32_t
(
v
.
key_id_size
)
)
;
AddProp
(
x
"
key_status
"
ToString_PP_CdmKeyStatus
(
v
.
key_status
)
)
;
AddProp
(
x
"
system_code
"
ToString_uint32_t
(
v
.
system_code
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_KeyInformation
(
JSONIterator
&
iterator
PP_KeyInformation
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
512
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_uint8_t
(
iterator
(
value
.
key_id
)
[
_n
]
)
;
}
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
key_id_size
)
;
iterator
.
skip
(
)
;
FromJSON_PP_CdmKeyStatus
(
iterator
value
.
key_status
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
system_code
)
;
}
const
string
ToString_PP_PrivateFontCharset
(
const
PP_PrivateFontCharset
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_PRIVATEFONTCHARSET_ANSI
\
"
"
;
case
1
:
return
"
\
"
PP_PRIVATEFONTCHARSET_DEFAULT
\
"
"
;
case
2
:
return
"
\
"
PP_PRIVATEFONTCHARSET_SYMBOL
\
"
"
;
case
77
:
return
"
\
"
PP_PRIVATEFONTCHARSET_MAC
\
"
"
;
case
128
:
return
"
\
"
PP_PRIVATEFONTCHARSET_SHIFTJIS
\
"
"
;
case
129
:
return
"
\
"
PP_PRIVATEFONTCHARSET_HANGUL
\
"
"
;
case
130
:
return
"
\
"
PP_PRIVATEFONTCHARSET_JOHAB
\
"
"
;
case
134
:
return
"
\
"
PP_PRIVATEFONTCHARSET_GB2312
\
"
"
;
case
136
:
return
"
\
"
PP_PRIVATEFONTCHARSET_CHINESEBIG5
\
"
"
;
case
161
:
return
"
\
"
PP_PRIVATEFONTCHARSET_GREEK
\
"
"
;
case
162
:
return
"
\
"
PP_PRIVATEFONTCHARSET_TURKISH
\
"
"
;
case
163
:
return
"
\
"
PP_PRIVATEFONTCHARSET_VIETNAMESE
\
"
"
;
case
177
:
return
"
\
"
PP_PRIVATEFONTCHARSET_HEBREW
\
"
"
;
case
178
:
return
"
\
"
PP_PRIVATEFONTCHARSET_ARABIC
\
"
"
;
case
186
:
return
"
\
"
PP_PRIVATEFONTCHARSET_BALTIC
\
"
"
;
case
204
:
return
"
\
"
PP_PRIVATEFONTCHARSET_RUSSIAN
\
"
"
;
case
222
:
return
"
\
"
PP_PRIVATEFONTCHARSET_THAI
\
"
"
;
case
238
:
return
"
\
"
PP_PRIVATEFONTCHARSET_EASTEUROPE
\
"
"
;
case
255
:
return
"
\
"
PP_PRIVATEFONTCHARSET_OEM
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_PrivateFontCharset
(
const
PP_PrivateFontCharset
&
v
)
{
return
ToString_PP_PrivateFontCharset
(
&
v
)
;
}
void
FromJSON_PP_PrivateFontCharset
(
JSONIterator
&
iterator
PP_PrivateFontCharset
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_PrivateFontCharset
(
v
)
;
}
const
string
ToString_PP_VideoCaptureFormat
(
const
PP_VideoCaptureFormat
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_VideoCaptureFormat
(
*
v
)
;
}
const
string
ToString_PP_VideoCaptureFormat
(
const
PP_VideoCaptureFormat
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
frame_size
"
ToString_PP_Size
(
v
.
frame_size
)
)
;
AddProp
(
x
"
frame_rate
"
ToString_float_t
(
v
.
frame_rate
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_VideoCaptureFormat
(
JSONIterator
&
iterator
PP_VideoCaptureFormat
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
value
.
frame_size
)
;
iterator
.
skip
(
)
;
FromJSON_float_t
(
iterator
value
.
frame_rate
)
;
}
const
string
ToString_PP_VideoFrame_Private
(
const
PP_VideoFrame_Private
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_VideoFrame_Private
(
*
v
)
;
}
const
string
ToString_PP_VideoFrame_Private
(
const
PP_VideoFrame_Private
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
timestamp
"
ToString_PP_TimeTicks
(
v
.
timestamp
)
)
;
AddProp
(
x
"
image_data
"
ToString_PP_Resource
(
v
.
image_data
)
)
;
AddProp
(
x
"
padding
"
ToString_int32_t
(
v
.
padding
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_VideoFrame_Private
(
JSONIterator
&
iterator
PP_VideoFrame_Private
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_TimeTicks
(
iterator
value
.
timestamp
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
value
.
image_data
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
padding
)
;
}
namespace
ns_PPB_CameraCapabilities_Private_0_1
{
static
PP_Bool
IsCameraCapabilities_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CameraCapabilities_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsCameraCapabilities
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_CameraCapabilities_Private_0_1
*
)
RealGetInterface
(
"
PPB_CameraCapabilities_Private
;
0
.
1
"
)
)
-
>
IsCameraCapabilities
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
GetSupportedVideoCaptureFormats_0_1
(
PP_Resource
capabilities
uint32_t
*
array_size
struct
PP_VideoCaptureFormat
*
*
formats
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CameraCapabilities_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSupportedVideoCaptureFormats
\
"
"
)
;
AddProp
(
ss
"
capabilities
"
ToString_PP_Resource
(
capabilities
)
)
;
AddProp
(
ss
"
array_size
"
PointerToString
(
array_size
)
)
;
AddProp
(
ss
"
formats
"
PointerToString
(
formats
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
array_size
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
*
array_size
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
*
formats
=
new
struct
PP_VideoCaptureFormat
[
*
array_size
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_PP_VideoCaptureFormat
(
iterator
(
*
formats
)
[
_n
]
)
;
}
}
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_CameraCapabilities_Private_0_1
*
)
RealGetInterface
(
"
PPB_CameraCapabilities_Private
;
0
.
1
"
)
)
-
>
GetSupportedVideoCaptureFormats
(
capabilities
array_size
formats
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
array_size
)
{
AddProp
(
os
"
array_size
"
ToString_uint32_t
(
array_size
)
)
;
}
{
BeginProp
(
os
"
formats
"
)
;
BeginElements
(
os
)
;
for
(
uint32_t
_n
=
0
;
_n
<
*
array_size
;
+
+
_n
)
{
AddElement
(
os
ToString_PP_VideoCaptureFormat
(
formats
[
_n
]
)
)
;
}
EndElements
(
os
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
}
static
PPB_CameraCapabilities_Private_0_1
_PPB_CameraCapabilities_Private_0_1
=
{
ns_PPB_CameraCapabilities_Private_0_1
:
:
IsCameraCapabilities_0_1
ns_PPB_CameraCapabilities_Private_0_1
:
:
GetSupportedVideoCaptureFormats_0_1
}
;
const
string
ToString_PPB_CameraCapabilities_Private
(
const
PPB_CameraCapabilities_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_CameraDevice_Private_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CameraDevice_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_CameraDevice_Private_0_1
*
)
RealGetInterface
(
"
PPB_CameraDevice_Private
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsCameraDevice_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CameraDevice_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsCameraDevice
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_CameraDevice_Private_0_1
*
)
RealGetInterface
(
"
PPB_CameraDevice_Private
;
0
.
1
"
)
)
-
>
IsCameraDevice
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Open_0_1
(
PP_Resource
camera_device
struct
PP_Var
device_id
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CameraDevice_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Open
\
"
"
)
;
AddProp
(
ss
"
camera_device
"
ToString_PP_Resource
(
camera_device
)
)
;
AddProp
(
ss
"
device_id
"
ToString_PP_Var
(
device_id
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_CameraDevice_Private_0_1
*
)
RealGetInterface
(
"
PPB_CameraDevice_Private
;
0
.
1
"
)
)
-
>
Open
(
camera_device
device_id
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_0_1
(
PP_Resource
camera_device
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CameraDevice_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
camera_device
"
ToString_PP_Resource
(
camera_device
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_CameraDevice_Private_0_1
*
)
RealGetInterface
(
"
PPB_CameraDevice_Private
;
0
.
1
"
)
)
-
>
Close
(
camera_device
)
;
#
endif
}
static
int32_t
GetCameraCapabilities_0_1
(
PP_Resource
camera_device
PP_Resource
*
capabilities
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_CameraDevice_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCameraCapabilities
\
"
"
)
;
AddProp
(
ss
"
camera_device
"
ToString_PP_Resource
(
camera_device
)
)
;
AddProp
(
ss
"
capabilities
"
PointerToString
(
capabilities
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
capabilities
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_CameraDevice_Private_0_1
*
)
RealGetInterface
(
"
PPB_CameraDevice_Private
;
0
.
1
"
)
)
-
>
GetCameraCapabilities
(
camera_device
capabilities
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
capabilities
)
{
AddProp
(
os
"
capabilities
"
ToString_PP_Resource
(
capabilities
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_CameraDevice_Private_0_1
_PPB_CameraDevice_Private_0_1
=
{
ns_PPB_CameraDevice_Private_0_1
:
:
Create_0_1
ns_PPB_CameraDevice_Private_0_1
:
:
IsCameraDevice_0_1
ns_PPB_CameraDevice_Private_0_1
:
:
Open_0_1
ns_PPB_CameraDevice_Private_0_1
:
:
Close_0_1
ns_PPB_CameraDevice_Private_0_1
:
:
GetCameraCapabilities_0_1
}
;
const
string
ToString_PPB_CameraDevice_Private
(
const
PPB_CameraDevice_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_ContentDecryptor_Private_0_14
{
static
void
PromiseResolved_0_14
(
PP_Instance
instance
uint32_t
promise_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PromiseResolved
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
promise_id
"
ToString_uint32_t
(
promise_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
PromiseResolved
(
instance
promise_id
)
;
#
endif
}
static
void
PromiseResolvedWithSession_0_14
(
PP_Instance
instance
uint32_t
promise_id
struct
PP_Var
session_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PromiseResolvedWithSession
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
promise_id
"
ToString_uint32_t
(
promise_id
)
)
;
AddProp
(
ss
"
session_id
"
ToString_PP_Var
(
session_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
PromiseResolvedWithSession
(
instance
promise_id
session_id
)
;
#
endif
}
static
void
PromiseRejected_0_14
(
PP_Instance
instance
uint32_t
promise_id
PP_CdmExceptionCode
exception_code
uint32_t
system_code
struct
PP_Var
error_description
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PromiseRejected
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
promise_id
"
ToString_uint32_t
(
promise_id
)
)
;
AddProp
(
ss
"
exception_code
"
ToString_PP_CdmExceptionCode
(
exception_code
)
)
;
AddProp
(
ss
"
system_code
"
ToString_uint32_t
(
system_code
)
)
;
AddProp
(
ss
"
error_description
"
ToString_PP_Var
(
error_description
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
PromiseRejected
(
instance
promise_id
exception_code
system_code
error_description
)
;
#
endif
}
static
void
SessionMessage_0_14
(
PP_Instance
instance
struct
PP_Var
session_id
PP_CdmMessageType
message_type
struct
PP_Var
message
struct
PP_Var
legacy_destination_url
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SessionMessage
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
session_id
"
ToString_PP_Var
(
session_id
)
)
;
AddProp
(
ss
"
message_type
"
ToString_PP_CdmMessageType
(
message_type
)
)
;
AddProp
(
ss
"
message
"
ToString_PP_Var
(
message
)
)
;
AddProp
(
ss
"
legacy_destination_url
"
ToString_PP_Var
(
legacy_destination_url
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
SessionMessage
(
instance
session_id
message_type
message
legacy_destination_url
)
;
#
endif
}
static
void
SessionKeysChange_0_14
(
PP_Instance
instance
struct
PP_Var
session_id
PP_Bool
has_additional_usable_key
uint32_t
key_count
const
struct
PP_KeyInformation
key_information
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SessionKeysChange
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
session_id
"
ToString_PP_Var
(
session_id
)
)
;
AddProp
(
ss
"
has_additional_usable_key
"
ToString_PP_Bool
(
has_additional_usable_key
)
)
;
AddProp
(
ss
"
key_count
"
ToString_uint32_t
(
key_count
)
)
;
{
BeginProp
(
ss
"
key_information
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
key_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_KeyInformation
(
key_information
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
SessionKeysChange
(
instance
session_id
has_additional_usable_key
key_count
key_information
)
;
#
endif
}
static
void
SessionExpirationChange_0_14
(
PP_Instance
instance
struct
PP_Var
session_id
PP_Time
new_expiry_time
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SessionExpirationChange
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
session_id
"
ToString_PP_Var
(
session_id
)
)
;
AddProp
(
ss
"
new_expiry_time
"
ToString_PP_Time
(
new_expiry_time
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
SessionExpirationChange
(
instance
session_id
new_expiry_time
)
;
#
endif
}
static
void
SessionClosed_0_14
(
PP_Instance
instance
struct
PP_Var
session_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SessionClosed
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
session_id
"
ToString_PP_Var
(
session_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
SessionClosed
(
instance
session_id
)
;
#
endif
}
static
void
LegacySessionError_0_14
(
PP_Instance
instance
struct
PP_Var
session_id
PP_CdmExceptionCode
exception_code
uint32_t
system_code
struct
PP_Var
error_description
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
LegacySessionError
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
session_id
"
ToString_PP_Var
(
session_id
)
)
;
AddProp
(
ss
"
exception_code
"
ToString_PP_CdmExceptionCode
(
exception_code
)
)
;
AddProp
(
ss
"
system_code
"
ToString_uint32_t
(
system_code
)
)
;
AddProp
(
ss
"
error_description
"
ToString_PP_Var
(
error_description
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
LegacySessionError
(
instance
session_id
exception_code
system_code
error_description
)
;
#
endif
}
static
void
DeliverBlock_0_14
(
PP_Instance
instance
PP_Resource
decrypted_block
const
struct
PP_DecryptedBlockInfo
*
decrypted_block_info
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DeliverBlock
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
decrypted_block
"
ToString_PP_Resource
(
decrypted_block
)
)
;
AddProp
(
ss
"
decrypted_block_info
"
ToString_PP_DecryptedBlockInfo
(
decrypted_block_info
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
DeliverBlock
(
instance
decrypted_block
decrypted_block_info
)
;
#
endif
}
static
void
DecoderInitializeDone_0_14
(
PP_Instance
instance
PP_DecryptorStreamType
decoder_type
uint32_t
request_id
PP_Bool
success
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DecoderInitializeDone
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
decoder_type
"
ToString_PP_DecryptorStreamType
(
decoder_type
)
)
;
AddProp
(
ss
"
request_id
"
ToString_uint32_t
(
request_id
)
)
;
AddProp
(
ss
"
success
"
ToString_PP_Bool
(
success
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
DecoderInitializeDone
(
instance
decoder_type
request_id
success
)
;
#
endif
}
static
void
DecoderDeinitializeDone_0_14
(
PP_Instance
instance
PP_DecryptorStreamType
decoder_type
uint32_t
request_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DecoderDeinitializeDone
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
decoder_type
"
ToString_PP_DecryptorStreamType
(
decoder_type
)
)
;
AddProp
(
ss
"
request_id
"
ToString_uint32_t
(
request_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
DecoderDeinitializeDone
(
instance
decoder_type
request_id
)
;
#
endif
}
static
void
DecoderResetDone_0_14
(
PP_Instance
instance
PP_DecryptorStreamType
decoder_type
uint32_t
request_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DecoderResetDone
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
decoder_type
"
ToString_PP_DecryptorStreamType
(
decoder_type
)
)
;
AddProp
(
ss
"
request_id
"
ToString_uint32_t
(
request_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
DecoderResetDone
(
instance
decoder_type
request_id
)
;
#
endif
}
static
void
DeliverFrame_0_14
(
PP_Instance
instance
PP_Resource
decrypted_frame
const
struct
PP_DecryptedFrameInfo
*
decrypted_frame_info
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DeliverFrame
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
decrypted_frame
"
ToString_PP_Resource
(
decrypted_frame
)
)
;
AddProp
(
ss
"
decrypted_frame_info
"
ToString_PP_DecryptedFrameInfo
(
decrypted_frame_info
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
DeliverFrame
(
instance
decrypted_frame
decrypted_frame_info
)
;
#
endif
}
static
void
DeliverSamples_0_14
(
PP_Instance
instance
PP_Resource
audio_frames
const
struct
PP_DecryptedSampleInfo
*
decrypted_sample_info
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_ContentDecryptor_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
14
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DeliverSamples
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
audio_frames
"
ToString_PP_Resource
(
audio_frames
)
)
;
AddProp
(
ss
"
decrypted_sample_info
"
ToString_PP_DecryptedSampleInfo
(
decrypted_sample_info
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_ContentDecryptor_Private_0_14
*
)
RealGetInterface
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
)
)
-
>
DeliverSamples
(
instance
audio_frames
decrypted_sample_info
)
;
#
endif
}
}
static
PPB_ContentDecryptor_Private_0_14
_PPB_ContentDecryptor_Private_0_14
=
{
ns_PPB_ContentDecryptor_Private_0_14
:
:
PromiseResolved_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
PromiseResolvedWithSession_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
PromiseRejected_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
SessionMessage_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
SessionKeysChange_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
SessionExpirationChange_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
SessionClosed_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
LegacySessionError_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
DeliverBlock_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
DecoderInitializeDone_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
DecoderDeinitializeDone_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
DecoderResetDone_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
DeliverFrame_0_14
ns_PPB_ContentDecryptor_Private_0_14
:
:
DeliverSamples_0_14
}
;
const
string
ToString_PPB_ContentDecryptor_Private
(
const
PPB_ContentDecryptor_Private_0_14
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_DisplayColorProfile_Private_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_DisplayColorProfile_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_DisplayColorProfile_Private_0_1
*
)
RealGetInterface
(
"
PPB_DisplayColorProfile_Private
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsDisplayColorProfile_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_DisplayColorProfile_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsDisplayColorProfile
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_DisplayColorProfile_Private_0_1
*
)
RealGetInterface
(
"
PPB_DisplayColorProfile_Private
;
0
.
1
"
)
)
-
>
IsDisplayColorProfile
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetColorProfile_0_1
(
PP_Resource
display_color_profile_res
struct
PP_ArrayOutput
color_profile
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_DisplayColorProfile_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetColorProfile
\
"
"
)
;
AddProp
(
ss
"
display_color_profile_res
"
ToString_PP_Resource
(
display_color_profile_res
)
)
;
AddProp
(
ss
"
color_profile
"
ToString_PP_ArrayOutput
(
color_profile
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_DisplayColorProfile_Private_0_1
*
)
RealGetInterface
(
"
PPB_DisplayColorProfile_Private
;
0
.
1
"
)
)
-
>
GetColorProfile
(
display_color_profile_res
color_profile
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
RegisterColorProfileChangeCallback_0_1
(
PP_Resource
display_color_profile_res
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_DisplayColorProfile_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RegisterColorProfileChangeCallback
\
"
"
)
;
AddProp
(
ss
"
display_color_profile_res
"
ToString_PP_Resource
(
display_color_profile_res
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_DisplayColorProfile_Private_0_1
*
)
RealGetInterface
(
"
PPB_DisplayColorProfile_Private
;
0
.
1
"
)
)
-
>
RegisterColorProfileChangeCallback
(
display_color_profile_res
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_DisplayColorProfile_Private_0_1
_PPB_DisplayColorProfile_Private_0_1
=
{
ns_PPB_DisplayColorProfile_Private_0_1
:
:
Create_0_1
ns_PPB_DisplayColorProfile_Private_0_1
:
:
IsDisplayColorProfile_0_1
ns_PPB_DisplayColorProfile_Private_0_1
:
:
GetColorProfile_0_1
ns_PPB_DisplayColorProfile_Private_0_1
:
:
RegisterColorProfileChangeCallback_0_1
}
;
const
string
ToString_PPB_DisplayColorProfile_Private
(
const
PPB_DisplayColorProfile_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Ext_CrxFileSystem_Private_0_1
{
static
int32_t
Open_0_1
(
PP_Instance
instance
PP_Resource
*
file_system
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Ext_CrxFileSystem_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Open
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
file_system
"
PointerToString
(
file_system
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
file_system
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Ext_CrxFileSystem_Private_0_1
*
)
RealGetInterface
(
"
PPB_Ext_CrxFileSystem_Private
;
0
.
1
"
)
)
-
>
Open
(
instance
file_system
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
file_system
)
{
AddProp
(
os
"
file_system
"
ToString_PP_Resource
(
file_system
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Ext_CrxFileSystem_Private_0_1
_PPB_Ext_CrxFileSystem_Private_0_1
=
{
ns_PPB_Ext_CrxFileSystem_Private_0_1
:
:
Open_0_1
}
;
const
string
ToString_PPB_Ext_CrxFileSystem_Private
(
const
PPB_Ext_CrxFileSystem_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_FileIO_Private_0_1
{
static
int32_t
RequestOSFileHandle_0_1
(
PP_Resource
file_io
PP_FileHandle
*
handle
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileIO_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RequestOSFileHandle
\
"
"
)
;
AddProp
(
ss
"
file_io
"
ToString_PP_Resource
(
file_io
)
)
;
AddProp
(
ss
"
handle
"
PointerToString
(
handle
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FileHandle
(
iterator
*
handle
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_FileIO_Private_0_1
*
)
RealGetInterface
(
"
PPB_FileIO_Private
;
0
.
1
"
)
)
-
>
RequestOSFileHandle
(
file_io
handle
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
handle
)
{
AddProp
(
os
"
handle
"
ToString_PP_FileHandle
(
handle
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FileIO_Private_0_1
_PPB_FileIO_Private_0_1
=
{
ns_PPB_FileIO_Private_0_1
:
:
RequestOSFileHandle_0_1
}
;
const
string
ToString_PPB_FileIO_Private
(
const
PPB_FileIO_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_FileRefPrivate_0_1
{
static
struct
PP_Var
GetAbsolutePath_0_1
(
PP_Resource
file_ref
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FileRefPrivate
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAbsolutePath
\
"
"
)
;
AddProp
(
ss
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_FileRefPrivate_0_1
*
)
RealGetInterface
(
"
PPB_FileRefPrivate
;
0
.
1
"
)
)
-
>
GetAbsolutePath
(
file_ref
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FileRefPrivate_0_1
_PPB_FileRefPrivate_0_1
=
{
ns_PPB_FileRefPrivate_0_1
:
:
GetAbsolutePath_0_1
}
;
const
string
ToString_PPB_FileRefPrivate
(
const
PPB_FileRefPrivate_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Find_Private_0_3
{
static
void
SetPluginToHandleFindRequests_0_3
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Find_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetPluginToHandleFindRequests
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Find_Private_0_3
*
)
RealGetInterface
(
"
PPB_Find_Private
;
0
.
3
"
)
)
-
>
SetPluginToHandleFindRequests
(
instance
)
;
#
endif
}
static
void
NumberOfFindResultsChanged_0_3
(
PP_Instance
instance
int32_t
total
PP_Bool
final_result
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Find_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
NumberOfFindResultsChanged
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
total
"
ToString_int32_t
(
total
)
)
;
AddProp
(
ss
"
final_result
"
ToString_PP_Bool
(
final_result
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Find_Private_0_3
*
)
RealGetInterface
(
"
PPB_Find_Private
;
0
.
3
"
)
)
-
>
NumberOfFindResultsChanged
(
instance
total
final_result
)
;
#
endif
}
static
void
SelectedFindResultChanged_0_3
(
PP_Instance
instance
int32_t
index
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Find_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SelectedFindResultChanged
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
index
"
ToString_int32_t
(
index
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Find_Private_0_3
*
)
RealGetInterface
(
"
PPB_Find_Private
;
0
.
3
"
)
)
-
>
SelectedFindResultChanged
(
instance
index
)
;
#
endif
}
static
void
SetTickmarks_0_3
(
PP_Instance
instance
const
struct
PP_Rect
tickmarks
[
]
uint32_t
count
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Find_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetTickmarks
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
{
BeginProp
(
ss
"
tickmarks
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Rect
(
tickmarks
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
count
"
ToString_uint32_t
(
count
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Find_Private_0_3
*
)
RealGetInterface
(
"
PPB_Find_Private
;
0
.
3
"
)
)
-
>
SetTickmarks
(
instance
tickmarks
count
)
;
#
endif
}
}
static
PPB_Find_Private_0_3
_PPB_Find_Private_0_3
=
{
ns_PPB_Find_Private_0_3
:
:
SetPluginToHandleFindRequests_0_3
ns_PPB_Find_Private_0_3
:
:
NumberOfFindResultsChanged_0_3
ns_PPB_Find_Private_0_3
:
:
SelectedFindResultChanged_0_3
ns_PPB_Find_Private_0_3
:
:
SetTickmarks_0_3
}
;
const
string
ToString_PPB_Find_Private
(
const
PPB_Find_Private_0_3
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_FlashLSORestrictions
(
const
PP_FlashLSORestrictions
*
v
)
{
switch
(
*
v
)
{
case
1
:
return
"
\
"
PP_FLASHLSORESTRICTIONS_NONE
\
"
"
;
case
2
:
return
"
\
"
PP_FLASHLSORESTRICTIONS_BLOCK
\
"
"
;
case
3
:
return
"
\
"
PP_FLASHLSORESTRICTIONS_IN_MEMORY
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_FlashLSORestrictions
(
const
PP_FlashLSORestrictions
&
v
)
{
return
ToString_PP_FlashLSORestrictions
(
&
v
)
;
}
void
FromJSON_PP_FlashLSORestrictions
(
JSONIterator
&
iterator
PP_FlashLSORestrictions
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_FlashLSORestrictions
(
v
)
;
}
const
string
ToString_PP_FlashSetting
(
const
PP_FlashSetting
*
v
)
{
switch
(
*
v
)
{
case
1
:
return
"
\
"
PP_FLASHSETTING_3DENABLED
\
"
"
;
case
2
:
return
"
\
"
PP_FLASHSETTING_INCOGNITO
\
"
"
;
case
3
:
return
"
\
"
PP_FLASHSETTING_STAGE3DENABLED
\
"
"
;
case
4
:
return
"
\
"
PP_FLASHSETTING_LANGUAGE
\
"
"
;
case
5
:
return
"
\
"
PP_FLASHSETTING_NUMCORES
\
"
"
;
case
6
:
return
"
\
"
PP_FLASHSETTING_LSORESTRICTIONS
\
"
"
;
case
7
:
return
"
\
"
PP_FLASHSETTING_STAGE3DBASELINEENABLED
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_FlashSetting
(
const
PP_FlashSetting
&
v
)
{
return
ToString_PP_FlashSetting
(
&
v
)
;
}
void
FromJSON_PP_FlashSetting
(
JSONIterator
&
iterator
PP_FlashSetting
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_FlashSetting
(
v
)
;
}
const
string
ToString_PP_FlashCrashKey
(
const
PP_FlashCrashKey
*
v
)
{
switch
(
*
v
)
{
case
1
:
return
"
\
"
PP_FLASHCRASHKEY_URL
\
"
"
;
case
2
:
return
"
\
"
PP_FLASHCRASHKEY_RESOURCE_URL
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_FlashCrashKey
(
const
PP_FlashCrashKey
&
v
)
{
return
ToString_PP_FlashCrashKey
(
&
v
)
;
}
void
FromJSON_PP_FlashCrashKey
(
JSONIterator
&
iterator
PP_FlashCrashKey
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_FlashCrashKey
(
v
)
;
}
namespace
ns_PPB_Flash_12_4
{
static
void
SetInstanceAlwaysOnTop_12_4
(
PP_Instance
instance
PP_Bool
on_top
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetInstanceAlwaysOnTop
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
on_top
"
ToString_PP_Bool
(
on_top
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
SetInstanceAlwaysOnTop
(
instance
on_top
)
;
#
endif
}
static
PP_Bool
DrawGlyphs_12_4
(
PP_Instance
instance
PP_Resource
pp_image_data
const
struct
PP_BrowserFont_Trusted_Description
*
font_desc
uint32_t
color
const
struct
PP_Point
*
position
const
struct
PP_Rect
*
clip
const
float
transformation
[
3
]
[
3
]
PP_Bool
allow_subpixel_aa
uint32_t
glyph_count
const
uint16_t
glyph_indices
[
]
const
struct
PP_Point
glyph_advances
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DrawGlyphs
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
pp_image_data
"
ToString_PP_Resource
(
pp_image_data
)
)
;
AddProp
(
ss
"
font_desc
"
ToString_PP_BrowserFont_Trusted_Description
(
font_desc
)
)
;
AddProp
(
ss
"
color
"
ToString_uint32_t
(
color
)
)
;
AddProp
(
ss
"
position
"
ToString_PP_Point
(
position
)
)
;
AddProp
(
ss
"
clip
"
ToString_PP_Rect
(
clip
)
)
;
{
BeginProp
(
ss
"
transformation
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
3
;
+
+
_n
)
{
AddElement
(
ss
ToString_float_t
(
transformation
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
allow_subpixel_aa
"
ToString_PP_Bool
(
allow_subpixel_aa
)
)
;
AddProp
(
ss
"
glyph_count
"
ToString_uint32_t
(
glyph_count
)
)
;
{
BeginProp
(
ss
"
glyph_indices
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
glyph_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint16_t
(
glyph_indices
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
glyph_advances
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
glyph_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Point
(
glyph_advances
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
DrawGlyphs
(
instance
pp_image_data
font_desc
color
position
clip
transformation
allow_subpixel_aa
glyph_count
glyph_indices
glyph_advances
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetProxyForURL_12_4
(
PP_Instance
instance
const
char
*
url
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetProxyForURL
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
url
"
ToString_str_t
(
url
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
GetProxyForURL
(
instance
url
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Navigate_12_4
(
PP_Resource
request_info
const
char
*
target
PP_Bool
from_user_action
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Navigate
\
"
"
)
;
AddProp
(
ss
"
request_info
"
ToString_PP_Resource
(
request_info
)
)
;
AddProp
(
ss
"
target
"
ToString_str_t
(
target
)
)
;
AddProp
(
ss
"
from_user_action
"
ToString_PP_Bool
(
from_user_action
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
Navigate
(
request_info
target
from_user_action
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
RunMessageLoop_12_4
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RunMessageLoop
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
RunMessageLoop
(
instance
)
;
#
endif
}
static
void
QuitMessageLoop_12_4
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
QuitMessageLoop
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
QuitMessageLoop
(
instance
)
;
#
endif
}
static
double
GetLocalTimeZoneOffset_12_4
(
PP_Instance
instance
PP_Time
t
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLocalTimeZoneOffset
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
t
"
ToString_PP_Time
(
t
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
double
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_double_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
double
rval
=
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
GetLocalTimeZoneOffset
(
instance
t
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_double_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetCommandLineArgs_12_4
(
PP_Module
module
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCommandLineArgs
\
"
"
)
;
AddProp
(
ss
"
module
"
ToString_PP_Module
(
module
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
GetCommandLineArgs
(
module
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
PreloadFontWin_12_4
(
const
void
*
logfontw
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PreloadFontWin
\
"
"
)
;
AddProp
(
ss
"
logfontw
"
ToString_mem_t
(
logfontw
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
PreloadFontWin
(
logfontw
)
;
#
endif
}
static
PP_Bool
IsRectTopmost_12_4
(
PP_Instance
instance
const
struct
PP_Rect
*
rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsRectTopmost
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
rect
"
ToString_PP_Rect
(
rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
IsRectTopmost
(
instance
rect
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
InvokePrinting_12_4
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
InvokePrinting
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
InvokePrinting
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
UpdateActivity_12_4
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UpdateActivity
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
UpdateActivity
(
instance
)
;
#
endif
}
static
struct
PP_Var
GetDeviceID_12_4
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDeviceID
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
GetDeviceID
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetSettingInt_12_4
(
PP_Instance
instance
PP_FlashSetting
setting
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSettingInt
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
setting
"
ToString_PP_FlashSetting
(
setting
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
GetSettingInt
(
instance
setting
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetSetting_12_4
(
PP_Instance
instance
PP_FlashSetting
setting
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSetting
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
setting
"
ToString_PP_FlashSetting
(
setting
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_12_4
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
4
"
)
)
-
>
GetSetting
(
instance
setting
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_12_4
_PPB_Flash_12_4
=
{
ns_PPB_Flash_12_4
:
:
SetInstanceAlwaysOnTop_12_4
ns_PPB_Flash_12_4
:
:
DrawGlyphs_12_4
ns_PPB_Flash_12_4
:
:
GetProxyForURL_12_4
ns_PPB_Flash_12_4
:
:
Navigate_12_4
ns_PPB_Flash_12_4
:
:
RunMessageLoop_12_4
ns_PPB_Flash_12_4
:
:
QuitMessageLoop_12_4
ns_PPB_Flash_12_4
:
:
GetLocalTimeZoneOffset_12_4
ns_PPB_Flash_12_4
:
:
GetCommandLineArgs_12_4
ns_PPB_Flash_12_4
:
:
PreloadFontWin_12_4
ns_PPB_Flash_12_4
:
:
IsRectTopmost_12_4
ns_PPB_Flash_12_4
:
:
InvokePrinting_12_4
ns_PPB_Flash_12_4
:
:
UpdateActivity_12_4
ns_PPB_Flash_12_4
:
:
GetDeviceID_12_4
ns_PPB_Flash_12_4
:
:
GetSettingInt_12_4
ns_PPB_Flash_12_4
:
:
GetSetting_12_4
}
;
const
string
ToString_PPB_Flash
(
const
PPB_Flash_12_4
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_12_5
{
static
void
SetInstanceAlwaysOnTop_12_5
(
PP_Instance
instance
PP_Bool
on_top
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetInstanceAlwaysOnTop
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
on_top
"
ToString_PP_Bool
(
on_top
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
SetInstanceAlwaysOnTop
(
instance
on_top
)
;
#
endif
}
static
PP_Bool
DrawGlyphs_12_5
(
PP_Instance
instance
PP_Resource
pp_image_data
const
struct
PP_BrowserFont_Trusted_Description
*
font_desc
uint32_t
color
const
struct
PP_Point
*
position
const
struct
PP_Rect
*
clip
const
float
transformation
[
3
]
[
3
]
PP_Bool
allow_subpixel_aa
uint32_t
glyph_count
const
uint16_t
glyph_indices
[
]
const
struct
PP_Point
glyph_advances
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DrawGlyphs
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
pp_image_data
"
ToString_PP_Resource
(
pp_image_data
)
)
;
AddProp
(
ss
"
font_desc
"
ToString_PP_BrowserFont_Trusted_Description
(
font_desc
)
)
;
AddProp
(
ss
"
color
"
ToString_uint32_t
(
color
)
)
;
AddProp
(
ss
"
position
"
ToString_PP_Point
(
position
)
)
;
AddProp
(
ss
"
clip
"
ToString_PP_Rect
(
clip
)
)
;
{
BeginProp
(
ss
"
transformation
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
3
;
+
+
_n
)
{
AddElement
(
ss
ToString_float_t
(
transformation
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
allow_subpixel_aa
"
ToString_PP_Bool
(
allow_subpixel_aa
)
)
;
AddProp
(
ss
"
glyph_count
"
ToString_uint32_t
(
glyph_count
)
)
;
{
BeginProp
(
ss
"
glyph_indices
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
glyph_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint16_t
(
glyph_indices
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
glyph_advances
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
glyph_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Point
(
glyph_advances
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
DrawGlyphs
(
instance
pp_image_data
font_desc
color
position
clip
transformation
allow_subpixel_aa
glyph_count
glyph_indices
glyph_advances
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetProxyForURL_12_5
(
PP_Instance
instance
const
char
*
url
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetProxyForURL
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
url
"
ToString_str_t
(
url
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
GetProxyForURL
(
instance
url
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Navigate_12_5
(
PP_Resource
request_info
const
char
*
target
PP_Bool
from_user_action
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Navigate
\
"
"
)
;
AddProp
(
ss
"
request_info
"
ToString_PP_Resource
(
request_info
)
)
;
AddProp
(
ss
"
target
"
ToString_str_t
(
target
)
)
;
AddProp
(
ss
"
from_user_action
"
ToString_PP_Bool
(
from_user_action
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
Navigate
(
request_info
target
from_user_action
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
RunMessageLoop_12_5
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RunMessageLoop
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
RunMessageLoop
(
instance
)
;
#
endif
}
static
void
QuitMessageLoop_12_5
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
QuitMessageLoop
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
QuitMessageLoop
(
instance
)
;
#
endif
}
static
double
GetLocalTimeZoneOffset_12_5
(
PP_Instance
instance
PP_Time
t
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLocalTimeZoneOffset
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
t
"
ToString_PP_Time
(
t
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
double
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_double_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
double
rval
=
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
GetLocalTimeZoneOffset
(
instance
t
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_double_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetCommandLineArgs_12_5
(
PP_Module
module
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCommandLineArgs
\
"
"
)
;
AddProp
(
ss
"
module
"
ToString_PP_Module
(
module
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
GetCommandLineArgs
(
module
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
PreloadFontWin_12_5
(
const
void
*
logfontw
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PreloadFontWin
\
"
"
)
;
AddProp
(
ss
"
logfontw
"
ToString_mem_t
(
logfontw
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
PreloadFontWin
(
logfontw
)
;
#
endif
}
static
PP_Bool
IsRectTopmost_12_5
(
PP_Instance
instance
const
struct
PP_Rect
*
rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsRectTopmost
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
rect
"
ToString_PP_Rect
(
rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
IsRectTopmost
(
instance
rect
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
InvokePrinting_12_5
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
InvokePrinting
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
InvokePrinting
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
UpdateActivity_12_5
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UpdateActivity
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
UpdateActivity
(
instance
)
;
#
endif
}
static
struct
PP_Var
GetDeviceID_12_5
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDeviceID
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
GetDeviceID
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetSettingInt_12_5
(
PP_Instance
instance
PP_FlashSetting
setting
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSettingInt
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
setting
"
ToString_PP_FlashSetting
(
setting
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
GetSettingInt
(
instance
setting
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetSetting_12_5
(
PP_Instance
instance
PP_FlashSetting
setting
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSetting
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
setting
"
ToString_PP_FlashSetting
(
setting
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
GetSetting
(
instance
setting
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
SetCrashData_12_5
(
PP_Instance
instance
PP_FlashCrashKey
key
struct
PP_Var
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetCrashData
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
key
"
ToString_PP_FlashCrashKey
(
key
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_12_5
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
5
"
)
)
-
>
SetCrashData
(
instance
key
value
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_12_5
_PPB_Flash_12_5
=
{
ns_PPB_Flash_12_5
:
:
SetInstanceAlwaysOnTop_12_5
ns_PPB_Flash_12_5
:
:
DrawGlyphs_12_5
ns_PPB_Flash_12_5
:
:
GetProxyForURL_12_5
ns_PPB_Flash_12_5
:
:
Navigate_12_5
ns_PPB_Flash_12_5
:
:
RunMessageLoop_12_5
ns_PPB_Flash_12_5
:
:
QuitMessageLoop_12_5
ns_PPB_Flash_12_5
:
:
GetLocalTimeZoneOffset_12_5
ns_PPB_Flash_12_5
:
:
GetCommandLineArgs_12_5
ns_PPB_Flash_12_5
:
:
PreloadFontWin_12_5
ns_PPB_Flash_12_5
:
:
IsRectTopmost_12_5
ns_PPB_Flash_12_5
:
:
InvokePrinting_12_5
ns_PPB_Flash_12_5
:
:
UpdateActivity_12_5
ns_PPB_Flash_12_5
:
:
GetDeviceID_12_5
ns_PPB_Flash_12_5
:
:
GetSettingInt_12_5
ns_PPB_Flash_12_5
:
:
GetSetting_12_5
ns_PPB_Flash_12_5
:
:
SetCrashData_12_5
}
;
const
string
ToString_PPB_Flash
(
const
PPB_Flash_12_5
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_12_6
{
static
void
SetInstanceAlwaysOnTop_12_6
(
PP_Instance
instance
PP_Bool
on_top
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetInstanceAlwaysOnTop
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
on_top
"
ToString_PP_Bool
(
on_top
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
SetInstanceAlwaysOnTop
(
instance
on_top
)
;
#
endif
}
static
PP_Bool
DrawGlyphs_12_6
(
PP_Instance
instance
PP_Resource
pp_image_data
const
struct
PP_BrowserFont_Trusted_Description
*
font_desc
uint32_t
color
const
struct
PP_Point
*
position
const
struct
PP_Rect
*
clip
const
float
transformation
[
3
]
[
3
]
PP_Bool
allow_subpixel_aa
uint32_t
glyph_count
const
uint16_t
glyph_indices
[
]
const
struct
PP_Point
glyph_advances
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DrawGlyphs
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
pp_image_data
"
ToString_PP_Resource
(
pp_image_data
)
)
;
AddProp
(
ss
"
font_desc
"
ToString_PP_BrowserFont_Trusted_Description
(
font_desc
)
)
;
AddProp
(
ss
"
color
"
ToString_uint32_t
(
color
)
)
;
AddProp
(
ss
"
position
"
ToString_PP_Point
(
position
)
)
;
AddProp
(
ss
"
clip
"
ToString_PP_Rect
(
clip
)
)
;
{
BeginProp
(
ss
"
transformation
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
3
;
+
+
_n
)
{
AddElement
(
ss
ToString_float_t
(
transformation
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
allow_subpixel_aa
"
ToString_PP_Bool
(
allow_subpixel_aa
)
)
;
AddProp
(
ss
"
glyph_count
"
ToString_uint32_t
(
glyph_count
)
)
;
{
BeginProp
(
ss
"
glyph_indices
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
glyph_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint16_t
(
glyph_indices
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
glyph_advances
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
glyph_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Point
(
glyph_advances
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
DrawGlyphs
(
instance
pp_image_data
font_desc
color
position
clip
transformation
allow_subpixel_aa
glyph_count
glyph_indices
glyph_advances
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetProxyForURL_12_6
(
PP_Instance
instance
const
char
*
url
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetProxyForURL
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
url
"
ToString_str_t
(
url
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
GetProxyForURL
(
instance
url
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Navigate_12_6
(
PP_Resource
request_info
const
char
*
target
PP_Bool
from_user_action
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Navigate
\
"
"
)
;
AddProp
(
ss
"
request_info
"
ToString_PP_Resource
(
request_info
)
)
;
AddProp
(
ss
"
target
"
ToString_str_t
(
target
)
)
;
AddProp
(
ss
"
from_user_action
"
ToString_PP_Bool
(
from_user_action
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
Navigate
(
request_info
target
from_user_action
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
RunMessageLoop_12_6
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RunMessageLoop
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
RunMessageLoop
(
instance
)
;
#
endif
}
static
void
QuitMessageLoop_12_6
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
QuitMessageLoop
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
QuitMessageLoop
(
instance
)
;
#
endif
}
static
double
GetLocalTimeZoneOffset_12_6
(
PP_Instance
instance
PP_Time
t
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLocalTimeZoneOffset
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
t
"
ToString_PP_Time
(
t
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
double
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_double_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
double
rval
=
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
GetLocalTimeZoneOffset
(
instance
t
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_double_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetCommandLineArgs_12_6
(
PP_Module
module
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCommandLineArgs
\
"
"
)
;
AddProp
(
ss
"
module
"
ToString_PP_Module
(
module
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
GetCommandLineArgs
(
module
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
PreloadFontWin_12_6
(
const
void
*
logfontw
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PreloadFontWin
\
"
"
)
;
AddProp
(
ss
"
logfontw
"
ToString_mem_t
(
logfontw
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
PreloadFontWin
(
logfontw
)
;
#
endif
}
static
PP_Bool
IsRectTopmost_12_6
(
PP_Instance
instance
const
struct
PP_Rect
*
rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsRectTopmost
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
rect
"
ToString_PP_Rect
(
rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
IsRectTopmost
(
instance
rect
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
InvokePrinting_12_6
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
InvokePrinting
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
InvokePrinting
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
UpdateActivity_12_6
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UpdateActivity
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
UpdateActivity
(
instance
)
;
#
endif
}
static
struct
PP_Var
GetDeviceID_12_6
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDeviceID
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
GetDeviceID
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetSettingInt_12_6
(
PP_Instance
instance
PP_FlashSetting
setting
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSettingInt
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
setting
"
ToString_PP_FlashSetting
(
setting
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
GetSettingInt
(
instance
setting
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetSetting_12_6
(
PP_Instance
instance
PP_FlashSetting
setting
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSetting
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
setting
"
ToString_PP_FlashSetting
(
setting
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
GetSetting
(
instance
setting
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
SetCrashData_12_6
(
PP_Instance
instance
PP_FlashCrashKey
key
struct
PP_Var
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetCrashData
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
key
"
ToString_PP_FlashCrashKey
(
key
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
SetCrashData
(
instance
key
value
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
EnumerateVideoCaptureDevices_12_6
(
PP_Instance
instance
PP_Resource
video_capture
struct
PP_ArrayOutput
devices
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
12
.
6
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
EnumerateVideoCaptureDevices
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
video_capture
"
ToString_PP_Resource
(
video_capture
)
)
;
AddProp
(
ss
"
devices
"
ToString_PP_ArrayOutput
(
devices
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_12_6
*
)
RealGetInterface
(
"
PPB_Flash
;
12
.
6
"
)
)
-
>
EnumerateVideoCaptureDevices
(
instance
video_capture
devices
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_12_6
_PPB_Flash_12_6
=
{
ns_PPB_Flash_12_6
:
:
SetInstanceAlwaysOnTop_12_6
ns_PPB_Flash_12_6
:
:
DrawGlyphs_12_6
ns_PPB_Flash_12_6
:
:
GetProxyForURL_12_6
ns_PPB_Flash_12_6
:
:
Navigate_12_6
ns_PPB_Flash_12_6
:
:
RunMessageLoop_12_6
ns_PPB_Flash_12_6
:
:
QuitMessageLoop_12_6
ns_PPB_Flash_12_6
:
:
GetLocalTimeZoneOffset_12_6
ns_PPB_Flash_12_6
:
:
GetCommandLineArgs_12_6
ns_PPB_Flash_12_6
:
:
PreloadFontWin_12_6
ns_PPB_Flash_12_6
:
:
IsRectTopmost_12_6
ns_PPB_Flash_12_6
:
:
InvokePrinting_12_6
ns_PPB_Flash_12_6
:
:
UpdateActivity_12_6
ns_PPB_Flash_12_6
:
:
GetDeviceID_12_6
ns_PPB_Flash_12_6
:
:
GetSettingInt_12_6
ns_PPB_Flash_12_6
:
:
GetSetting_12_6
ns_PPB_Flash_12_6
:
:
SetCrashData_12_6
ns_PPB_Flash_12_6
:
:
EnumerateVideoCaptureDevices_12_6
}
;
const
string
ToString_PPB_Flash
(
const
PPB_Flash_12_6
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_13_0
{
static
void
SetInstanceAlwaysOnTop_13_0
(
PP_Instance
instance
PP_Bool
on_top
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
13
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetInstanceAlwaysOnTop
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
on_top
"
ToString_PP_Bool
(
on_top
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_13_0
*
)
RealGetInterface
(
"
PPB_Flash
;
13
.
0
"
)
)
-
>
SetInstanceAlwaysOnTop
(
instance
on_top
)
;
#
endif
}
static
PP_Bool
DrawGlyphs_13_0
(
PP_Instance
instance
PP_Resource
pp_image_data
const
struct
PP_BrowserFont_Trusted_Description
*
font_desc
uint32_t
color
const
struct
PP_Point
*
position
const
struct
PP_Rect
*
clip
const
float
transformation
[
3
]
[
3
]
PP_Bool
allow_subpixel_aa
uint32_t
glyph_count
const
uint16_t
glyph_indices
[
]
const
struct
PP_Point
glyph_advances
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
13
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DrawGlyphs
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
pp_image_data
"
ToString_PP_Resource
(
pp_image_data
)
)
;
AddProp
(
ss
"
font_desc
"
ToString_PP_BrowserFont_Trusted_Description
(
font_desc
)
)
;
AddProp
(
ss
"
color
"
ToString_uint32_t
(
color
)
)
;
AddProp
(
ss
"
position
"
ToString_PP_Point
(
position
)
)
;
AddProp
(
ss
"
clip
"
ToString_PP_Rect
(
clip
)
)
;
{
BeginProp
(
ss
"
transformation
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
3
;
+
+
_n
)
{
AddElement
(
ss
ToString_float_t
(
transformation
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
allow_subpixel_aa
"
ToString_PP_Bool
(
allow_subpixel_aa
)
)
;
AddProp
(
ss
"
glyph_count
"
ToString_uint32_t
(
glyph_count
)
)
;
{
BeginProp
(
ss
"
glyph_indices
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
glyph_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint16_t
(
glyph_indices
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
glyph_advances
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
glyph_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Point
(
glyph_advances
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_13_0
*
)
RealGetInterface
(
"
PPB_Flash
;
13
.
0
"
)
)
-
>
DrawGlyphs
(
instance
pp_image_data
font_desc
color
position
clip
transformation
allow_subpixel_aa
glyph_count
glyph_indices
glyph_advances
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetProxyForURL_13_0
(
PP_Instance
instance
const
char
*
url
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
13
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetProxyForURL
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
url
"
ToString_str_t
(
url
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_13_0
*
)
RealGetInterface
(
"
PPB_Flash
;
13
.
0
"
)
)
-
>
GetProxyForURL
(
instance
url
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Navigate_13_0
(
PP_Resource
request_info
const
char
*
target
PP_Bool
from_user_action
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
13
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Navigate
\
"
"
)
;
AddProp
(
ss
"
request_info
"
ToString_PP_Resource
(
request_info
)
)
;
AddProp
(
ss
"
target
"
ToString_str_t
(
target
)
)
;
AddProp
(
ss
"
from_user_action
"
ToString_PP_Bool
(
from_user_action
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_13_0
*
)
RealGetInterface
(
"
PPB_Flash
;
13
.
0
"
)
)
-
>
Navigate
(
request_info
target
from_user_action
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
double
GetLocalTimeZoneOffset_13_0
(
PP_Instance
instance
PP_Time
t
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
13
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLocalTimeZoneOffset
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
t
"
ToString_PP_Time
(
t
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
double
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_double_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
double
rval
=
(
(
PPB_Flash_13_0
*
)
RealGetInterface
(
"
PPB_Flash
;
13
.
0
"
)
)
-
>
GetLocalTimeZoneOffset
(
instance
t
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_double_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetCommandLineArgs_13_0
(
PP_Module
module
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
13
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCommandLineArgs
\
"
"
)
;
AddProp
(
ss
"
module
"
ToString_PP_Module
(
module
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_13_0
*
)
RealGetInterface
(
"
PPB_Flash
;
13
.
0
"
)
)
-
>
GetCommandLineArgs
(
module
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
PreloadFontWin_13_0
(
const
void
*
logfontw
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
13
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PreloadFontWin
\
"
"
)
;
AddProp
(
ss
"
logfontw
"
ToString_mem_t
(
logfontw
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_13_0
*
)
RealGetInterface
(
"
PPB_Flash
;
13
.
0
"
)
)
-
>
PreloadFontWin
(
logfontw
)
;
#
endif
}
static
PP_Bool
IsRectTopmost_13_0
(
PP_Instance
instance
const
struct
PP_Rect
*
rect
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
13
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsRectTopmost
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
rect
"
ToString_PP_Rect
(
rect
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_13_0
*
)
RealGetInterface
(
"
PPB_Flash
;
13
.
0
"
)
)
-
>
IsRectTopmost
(
instance
rect
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
UpdateActivity_13_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
13
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UpdateActivity
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_13_0
*
)
RealGetInterface
(
"
PPB_Flash
;
13
.
0
"
)
)
-
>
UpdateActivity
(
instance
)
;
#
endif
}
static
struct
PP_Var
GetSetting_13_0
(
PP_Instance
instance
PP_FlashSetting
setting
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
13
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSetting
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
setting
"
ToString_PP_FlashSetting
(
setting
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_13_0
*
)
RealGetInterface
(
"
PPB_Flash
;
13
.
0
"
)
)
-
>
GetSetting
(
instance
setting
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
SetCrashData_13_0
(
PP_Instance
instance
PP_FlashCrashKey
key
struct
PP_Var
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
13
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetCrashData
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
key
"
ToString_PP_FlashCrashKey
(
key
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_13_0
*
)
RealGetInterface
(
"
PPB_Flash
;
13
.
0
"
)
)
-
>
SetCrashData
(
instance
key
value
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
EnumerateVideoCaptureDevices_13_0
(
PP_Instance
instance
PP_Resource
video_capture
struct
PP_ArrayOutput
devices
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
13
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
EnumerateVideoCaptureDevices
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
video_capture
"
ToString_PP_Resource
(
video_capture
)
)
;
AddProp
(
ss
"
devices
"
ToString_PP_ArrayOutput
(
devices
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_13_0
*
)
RealGetInterface
(
"
PPB_Flash
;
13
.
0
"
)
)
-
>
EnumerateVideoCaptureDevices
(
instance
video_capture
devices
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_13_0
_PPB_Flash_13_0
=
{
ns_PPB_Flash_13_0
:
:
SetInstanceAlwaysOnTop_13_0
ns_PPB_Flash_13_0
:
:
DrawGlyphs_13_0
ns_PPB_Flash_13_0
:
:
GetProxyForURL_13_0
ns_PPB_Flash_13_0
:
:
Navigate_13_0
ns_PPB_Flash_13_0
:
:
GetLocalTimeZoneOffset_13_0
ns_PPB_Flash_13_0
:
:
GetCommandLineArgs_13_0
ns_PPB_Flash_13_0
:
:
PreloadFontWin_13_0
ns_PPB_Flash_13_0
:
:
IsRectTopmost_13_0
ns_PPB_Flash_13_0
:
:
UpdateActivity_13_0
ns_PPB_Flash_13_0
:
:
GetSetting_13_0
ns_PPB_Flash_13_0
:
:
SetCrashData_13_0
ns_PPB_Flash_13_0
:
:
EnumerateVideoCaptureDevices_13_0
}
;
const
string
ToString_PPB_Flash
(
const
PPB_Flash_13_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_Flash_Clipboard_Type
(
const
PP_Flash_Clipboard_Type
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_FLASH_CLIPBOARD_TYPE_STANDARD
\
"
"
;
case
1
:
return
"
\
"
PP_FLASH_CLIPBOARD_TYPE_SELECTION
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_Flash_Clipboard_Type
(
const
PP_Flash_Clipboard_Type
&
v
)
{
return
ToString_PP_Flash_Clipboard_Type
(
&
v
)
;
}
void
FromJSON_PP_Flash_Clipboard_Type
(
JSONIterator
&
iterator
PP_Flash_Clipboard_Type
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_Flash_Clipboard_Type
(
v
)
;
}
const
string
ToString_PP_Flash_Clipboard_Format
(
const
PP_Flash_Clipboard_Format
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_FLASH_CLIPBOARD_FORMAT_INVALID
\
"
"
;
case
1
:
return
"
\
"
PP_FLASH_CLIPBOARD_FORMAT_PLAINTEXT
\
"
"
;
case
2
:
return
"
\
"
PP_FLASH_CLIPBOARD_FORMAT_HTML
\
"
"
;
case
3
:
return
"
\
"
PP_FLASH_CLIPBOARD_FORMAT_RTF
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_Flash_Clipboard_Format
(
const
PP_Flash_Clipboard_Format
&
v
)
{
return
ToString_PP_Flash_Clipboard_Format
(
&
v
)
;
}
void
FromJSON_PP_Flash_Clipboard_Format
(
JSONIterator
&
iterator
PP_Flash_Clipboard_Format
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_Flash_Clipboard_Format
(
v
)
;
}
namespace
ns_PPB_Flash_Clipboard_4_0
{
static
PP_Bool
IsFormatAvailable_4_0
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
PP_Flash_Clipboard_Format
format
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Clipboard
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
4
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFormatAvailable
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
clipboard_type
"
ToString_PP_Flash_Clipboard_Type
(
clipboard_type
)
)
;
AddProp
(
ss
"
format
"
ToString_PP_Flash_Clipboard_Format
(
format
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_Clipboard_4_0
*
)
RealGetInterface
(
"
PPB_Flash_Clipboard
;
4
.
0
"
)
)
-
>
IsFormatAvailable
(
instance_id
clipboard_type
format
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
ReadData_4_0
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
PP_Flash_Clipboard_Format
format
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Clipboard
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
4
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReadData
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
clipboard_type
"
ToString_PP_Flash_Clipboard_Type
(
clipboard_type
)
)
;
AddProp
(
ss
"
format
"
ToString_PP_Flash_Clipboard_Format
(
format
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_Clipboard_4_0
*
)
RealGetInterface
(
"
PPB_Flash_Clipboard
;
4
.
0
"
)
)
-
>
ReadData
(
instance_id
clipboard_type
format
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
WriteData_4_0
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
data_item_count
const
PP_Flash_Clipboard_Format
formats
[
]
const
struct
PP_Var
data_items
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Clipboard
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
4
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
WriteData
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
clipboard_type
"
ToString_PP_Flash_Clipboard_Type
(
clipboard_type
)
)
;
AddProp
(
ss
"
data_item_count
"
ToString_uint32_t
(
data_item_count
)
)
;
{
BeginProp
(
ss
"
formats
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
data_item_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Flash_Clipboard_Format
(
formats
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
data_items
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
data_item_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Var
(
data_items
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_Clipboard_4_0
*
)
RealGetInterface
(
"
PPB_Flash_Clipboard
;
4
.
0
"
)
)
-
>
WriteData
(
instance_id
clipboard_type
data_item_count
formats
data_items
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_Clipboard_4_0
_PPB_Flash_Clipboard_4_0
=
{
ns_PPB_Flash_Clipboard_4_0
:
:
IsFormatAvailable_4_0
ns_PPB_Flash_Clipboard_4_0
:
:
ReadData_4_0
ns_PPB_Flash_Clipboard_4_0
:
:
WriteData_4_0
}
;
const
string
ToString_PPB_Flash_Clipboard
(
const
PPB_Flash_Clipboard_4_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_Clipboard_5_0
{
static
uint32_t
RegisterCustomFormat_5_0
(
PP_Instance
instance_id
const
char
*
format_name
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Clipboard
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
5
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RegisterCustomFormat
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
format_name
"
ToString_str_t
(
format_name
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_Flash_Clipboard_5_0
*
)
RealGetInterface
(
"
PPB_Flash_Clipboard
;
5
.
0
"
)
)
-
>
RegisterCustomFormat
(
instance_id
format_name
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFormatAvailable_5_0
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
format
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Clipboard
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
5
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFormatAvailable
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
clipboard_type
"
ToString_PP_Flash_Clipboard_Type
(
clipboard_type
)
)
;
AddProp
(
ss
"
format
"
ToString_uint32_t
(
format
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_Clipboard_5_0
*
)
RealGetInterface
(
"
PPB_Flash_Clipboard
;
5
.
0
"
)
)
-
>
IsFormatAvailable
(
instance_id
clipboard_type
format
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
ReadData_5_0
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
format
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Clipboard
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
5
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReadData
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
clipboard_type
"
ToString_PP_Flash_Clipboard_Type
(
clipboard_type
)
)
;
AddProp
(
ss
"
format
"
ToString_uint32_t
(
format
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_Clipboard_5_0
*
)
RealGetInterface
(
"
PPB_Flash_Clipboard
;
5
.
0
"
)
)
-
>
ReadData
(
instance_id
clipboard_type
format
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
WriteData_5_0
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
data_item_count
const
uint32_t
formats
[
]
const
struct
PP_Var
data_items
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Clipboard
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
5
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
WriteData
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
clipboard_type
"
ToString_PP_Flash_Clipboard_Type
(
clipboard_type
)
)
;
AddProp
(
ss
"
data_item_count
"
ToString_uint32_t
(
data_item_count
)
)
;
{
BeginProp
(
ss
"
formats
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
data_item_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint32_t
(
formats
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
data_items
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
data_item_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Var
(
data_items
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_Clipboard_5_0
*
)
RealGetInterface
(
"
PPB_Flash_Clipboard
;
5
.
0
"
)
)
-
>
WriteData
(
instance_id
clipboard_type
data_item_count
formats
data_items
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_Clipboard_5_0
_PPB_Flash_Clipboard_5_0
=
{
ns_PPB_Flash_Clipboard_5_0
:
:
RegisterCustomFormat_5_0
ns_PPB_Flash_Clipboard_5_0
:
:
IsFormatAvailable_5_0
ns_PPB_Flash_Clipboard_5_0
:
:
ReadData_5_0
ns_PPB_Flash_Clipboard_5_0
:
:
WriteData_5_0
}
;
const
string
ToString_PPB_Flash_Clipboard
(
const
PPB_Flash_Clipboard_5_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_Clipboard_5_1
{
static
uint32_t
RegisterCustomFormat_5_1
(
PP_Instance
instance_id
const
char
*
format_name
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Clipboard
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
5
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RegisterCustomFormat
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
format_name
"
ToString_str_t
(
format_name
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_Flash_Clipboard_5_1
*
)
RealGetInterface
(
"
PPB_Flash_Clipboard
;
5
.
1
"
)
)
-
>
RegisterCustomFormat
(
instance_id
format_name
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFormatAvailable_5_1
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
format
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Clipboard
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
5
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFormatAvailable
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
clipboard_type
"
ToString_PP_Flash_Clipboard_Type
(
clipboard_type
)
)
;
AddProp
(
ss
"
format
"
ToString_uint32_t
(
format
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_Clipboard_5_1
*
)
RealGetInterface
(
"
PPB_Flash_Clipboard
;
5
.
1
"
)
)
-
>
IsFormatAvailable
(
instance_id
clipboard_type
format
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
ReadData_5_1
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
format
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Clipboard
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
5
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReadData
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
clipboard_type
"
ToString_PP_Flash_Clipboard_Type
(
clipboard_type
)
)
;
AddProp
(
ss
"
format
"
ToString_uint32_t
(
format
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Flash_Clipboard_5_1
*
)
RealGetInterface
(
"
PPB_Flash_Clipboard
;
5
.
1
"
)
)
-
>
ReadData
(
instance_id
clipboard_type
format
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
WriteData_5_1
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint32_t
data_item_count
const
uint32_t
formats
[
]
const
struct
PP_Var
data_items
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Clipboard
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
5
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
WriteData
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
clipboard_type
"
ToString_PP_Flash_Clipboard_Type
(
clipboard_type
)
)
;
AddProp
(
ss
"
data_item_count
"
ToString_uint32_t
(
data_item_count
)
)
;
{
BeginProp
(
ss
"
formats
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
data_item_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint32_t
(
formats
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
data_items
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
data_item_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Var
(
data_items
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_Clipboard_5_1
*
)
RealGetInterface
(
"
PPB_Flash_Clipboard
;
5
.
1
"
)
)
-
>
WriteData
(
instance_id
clipboard_type
data_item_count
formats
data_items
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetSequenceNumber_5_1
(
PP_Instance
instance_id
PP_Flash_Clipboard_Type
clipboard_type
uint64_t
*
sequence_number
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Clipboard
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
5
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSequenceNumber
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
clipboard_type
"
ToString_PP_Flash_Clipboard_Type
(
clipboard_type
)
)
;
AddProp
(
ss
"
sequence_number
"
PointerToString
(
sequence_number
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint64_t
(
iterator
*
sequence_number
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_Clipboard_5_1
*
)
RealGetInterface
(
"
PPB_Flash_Clipboard
;
5
.
1
"
)
)
-
>
GetSequenceNumber
(
instance_id
clipboard_type
sequence_number
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
sequence_number
)
{
AddProp
(
os
"
sequence_number
"
ToString_uint64_t
(
sequence_number
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_Clipboard_5_1
_PPB_Flash_Clipboard_5_1
=
{
ns_PPB_Flash_Clipboard_5_1
:
:
RegisterCustomFormat_5_1
ns_PPB_Flash_Clipboard_5_1
:
:
IsFormatAvailable_5_1
ns_PPB_Flash_Clipboard_5_1
:
:
ReadData_5_1
ns_PPB_Flash_Clipboard_5_1
:
:
WriteData_5_1
ns_PPB_Flash_Clipboard_5_1
:
:
GetSequenceNumber_5_1
}
;
const
string
ToString_PPB_Flash_Clipboard
(
const
PPB_Flash_Clipboard_5_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_DeviceID_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_DeviceID
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_DeviceID_1_0
*
)
RealGetInterface
(
"
PPB_Flash_DeviceID
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetDeviceID_1_0
(
PP_Resource
device_id
struct
PP_Var
*
id
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_DeviceID
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDeviceID
\
"
"
)
;
AddProp
(
ss
"
device_id
"
ToString_PP_Resource
(
device_id
)
)
;
AddProp
(
ss
"
id
"
PointerToString
(
id
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
id
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Flash_DeviceID_1_0
*
)
RealGetInterface
(
"
PPB_Flash_DeviceID
;
1
.
0
"
)
)
-
>
GetDeviceID
(
device_id
id
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
id
)
{
AddProp
(
os
"
id
"
ToString_PP_Var
(
id
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_DeviceID_1_0
_PPB_Flash_DeviceID_1_0
=
{
ns_PPB_Flash_DeviceID_1_0
:
:
Create_1_0
ns_PPB_Flash_DeviceID_1_0
:
:
GetDeviceID_1_0
}
;
const
string
ToString_PPB_Flash_DeviceID
(
const
PPB_Flash_DeviceID_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_DRM_1_0
{
static
PP_Resource
Create_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_DRM
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_DRM_1_0
*
)
RealGetInterface
(
"
PPB_Flash_DRM
;
1
.
0
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetDeviceID_1_0
(
PP_Resource
drm
struct
PP_Var
*
id
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_DRM
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDeviceID
\
"
"
)
;
AddProp
(
ss
"
drm
"
ToString_PP_Resource
(
drm
)
)
;
AddProp
(
ss
"
id
"
PointerToString
(
id
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
id
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Flash_DRM_1_0
*
)
RealGetInterface
(
"
PPB_Flash_DRM
;
1
.
0
"
)
)
-
>
GetDeviceID
(
drm
id
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
id
)
{
AddProp
(
os
"
id
"
ToString_PP_Var
(
id
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetHmonitor_1_0
(
PP_Resource
drm
int64_t
*
hmonitor
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_DRM
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetHmonitor
\
"
"
)
;
AddProp
(
ss
"
drm
"
ToString_PP_Resource
(
drm
)
)
;
AddProp
(
ss
"
hmonitor
"
PointerToString
(
hmonitor
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_int64_t
(
iterator
*
hmonitor
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_DRM_1_0
*
)
RealGetInterface
(
"
PPB_Flash_DRM
;
1
.
0
"
)
)
-
>
GetHmonitor
(
drm
hmonitor
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
hmonitor
)
{
AddProp
(
os
"
hmonitor
"
ToString_int64_t
(
hmonitor
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetVoucherFile_1_0
(
PP_Resource
drm
PP_Resource
*
file_ref
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_DRM
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetVoucherFile
\
"
"
)
;
AddProp
(
ss
"
drm
"
ToString_PP_Resource
(
drm
)
)
;
AddProp
(
ss
"
file_ref
"
PointerToString
(
file_ref
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
file_ref
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Flash_DRM_1_0
*
)
RealGetInterface
(
"
PPB_Flash_DRM
;
1
.
0
"
)
)
-
>
GetVoucherFile
(
drm
file_ref
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
file_ref
)
{
AddProp
(
os
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_DRM_1_0
_PPB_Flash_DRM_1_0
=
{
ns_PPB_Flash_DRM_1_0
:
:
Create_1_0
ns_PPB_Flash_DRM_1_0
:
:
GetDeviceID_1_0
ns_PPB_Flash_DRM_1_0
:
:
GetHmonitor_1_0
ns_PPB_Flash_DRM_1_0
:
:
GetVoucherFile_1_0
}
;
const
string
ToString_PPB_Flash_DRM
(
const
PPB_Flash_DRM_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_DRM_1_1
{
static
PP_Resource
Create_1_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_DRM
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_DRM_1_1
*
)
RealGetInterface
(
"
PPB_Flash_DRM
;
1
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetDeviceID_1_1
(
PP_Resource
drm
struct
PP_Var
*
id
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_DRM
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDeviceID
\
"
"
)
;
AddProp
(
ss
"
drm
"
ToString_PP_Resource
(
drm
)
)
;
AddProp
(
ss
"
id
"
PointerToString
(
id
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
id
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Flash_DRM_1_1
*
)
RealGetInterface
(
"
PPB_Flash_DRM
;
1
.
1
"
)
)
-
>
GetDeviceID
(
drm
id
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
id
)
{
AddProp
(
os
"
id
"
ToString_PP_Var
(
id
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetHmonitor_1_1
(
PP_Resource
drm
int64_t
*
hmonitor
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_DRM
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetHmonitor
\
"
"
)
;
AddProp
(
ss
"
drm
"
ToString_PP_Resource
(
drm
)
)
;
AddProp
(
ss
"
hmonitor
"
PointerToString
(
hmonitor
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_int64_t
(
iterator
*
hmonitor
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_DRM_1_1
*
)
RealGetInterface
(
"
PPB_Flash_DRM
;
1
.
1
"
)
)
-
>
GetHmonitor
(
drm
hmonitor
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
hmonitor
)
{
AddProp
(
os
"
hmonitor
"
ToString_int64_t
(
hmonitor
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetVoucherFile_1_1
(
PP_Resource
drm
PP_Resource
*
file_ref
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_DRM
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetVoucherFile
\
"
"
)
;
AddProp
(
ss
"
drm
"
ToString_PP_Resource
(
drm
)
)
;
AddProp
(
ss
"
file_ref
"
PointerToString
(
file_ref
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
file_ref
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Flash_DRM_1_1
*
)
RealGetInterface
(
"
PPB_Flash_DRM
;
1
.
1
"
)
)
-
>
GetVoucherFile
(
drm
file_ref
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
file_ref
)
{
AddProp
(
os
"
file_ref
"
ToString_PP_Resource
(
file_ref
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
MonitorIsExternal_1_1
(
PP_Resource
drm
PP_Bool
*
is_external
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_DRM
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
MonitorIsExternal
\
"
"
)
;
AddProp
(
ss
"
drm
"
ToString_PP_Resource
(
drm
)
)
;
AddProp
(
ss
"
is_external
"
PointerToString
(
is_external
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
*
is_external
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Flash_DRM_1_1
*
)
RealGetInterface
(
"
PPB_Flash_DRM
;
1
.
1
"
)
)
-
>
MonitorIsExternal
(
drm
is_external
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
is_external
"
ToString_PP_Bool
(
is_external
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_DRM_1_1
_PPB_Flash_DRM_1_1
=
{
ns_PPB_Flash_DRM_1_1
:
:
Create_1_1
ns_PPB_Flash_DRM_1_1
:
:
GetDeviceID_1_1
ns_PPB_Flash_DRM_1_1
:
:
GetHmonitor_1_1
ns_PPB_Flash_DRM_1_1
:
:
GetVoucherFile_1_1
ns_PPB_Flash_DRM_1_1
:
:
MonitorIsExternal_1_1
}
;
const
string
ToString_PPB_Flash_DRM
(
const
PPB_Flash_DRM_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_DirEntry_Dev
(
const
PP_DirEntry_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_DirEntry_Dev
(
*
v
)
;
}
const
string
ToString_PP_DirEntry_Dev
(
const
PP_DirEntry_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
name
"
ToString_str_t
(
v
.
name
)
)
;
AddProp
(
x
"
is_dir
"
ToString_PP_Bool
(
v
.
is_dir
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_DirEntry_Dev
(
JSONIterator
&
iterator
PP_DirEntry_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
value
.
name
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
is_dir
)
;
}
const
string
ToString_PP_DirContents_Dev
(
const
PP_DirContents_Dev
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_DirContents_Dev
(
*
v
)
;
}
const
string
ToString_PP_DirContents_Dev
(
const
PP_DirContents_Dev
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
count
"
ToString_int32_t
(
v
.
count
)
)
;
{
BeginProp
(
x
"
entries
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
v
.
count
;
+
+
_n
)
{
AddElement
(
x
ToString_PP_DirEntry_Dev
(
v
.
entries
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_DirContents_Dev
(
JSONIterator
&
iterator
PP_DirContents_Dev
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
count
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
value
.
count
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_PP_DirEntry_Dev
(
iterator
(
value
.
entries
)
[
_n
]
)
;
}
}
}
namespace
ns_PPB_Flash_File_ModuleLocal_3_0
{
static
PP_Bool
CreateThreadAdapterForInstance_3_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_File_ModuleLocal
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
3
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateThreadAdapterForInstance
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_File_ModuleLocal_3_0
*
)
RealGetInterface
(
"
PPB_Flash_File_ModuleLocal
;
3
.
0
"
)
)
-
>
CreateThreadAdapterForInstance
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
ClearThreadAdapterForInstance_3_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_File_ModuleLocal
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
3
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ClearThreadAdapterForInstance
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_File_ModuleLocal_3_0
*
)
RealGetInterface
(
"
PPB_Flash_File_ModuleLocal
;
3
.
0
"
)
)
-
>
ClearThreadAdapterForInstance
(
instance
)
;
#
endif
}
static
int32_t
OpenFile_3_0
(
PP_Instance
instance
const
char
*
path
int32_t
mode
PP_FileHandle
*
file
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_File_ModuleLocal
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
3
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
OpenFile
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
path
"
ToString_str_t
(
path
)
)
;
AddProp
(
ss
"
mode
"
ToString_int32_t
(
mode
)
)
;
AddProp
(
ss
"
file
"
PointerToString
(
file
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FileHandle
(
iterator
*
file
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_File_ModuleLocal_3_0
*
)
RealGetInterface
(
"
PPB_Flash_File_ModuleLocal
;
3
.
0
"
)
)
-
>
OpenFile
(
instance
path
mode
file
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
file
)
{
AddProp
(
os
"
file
"
ToString_PP_FileHandle
(
file
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
RenameFile_3_0
(
PP_Instance
instance
const
char
*
path_from
const
char
*
path_to
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_File_ModuleLocal
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
3
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RenameFile
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
path_from
"
ToString_str_t
(
path_from
)
)
;
AddProp
(
ss
"
path_to
"
ToString_str_t
(
path_to
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_File_ModuleLocal_3_0
*
)
RealGetInterface
(
"
PPB_Flash_File_ModuleLocal
;
3
.
0
"
)
)
-
>
RenameFile
(
instance
path_from
path_to
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
DeleteFileOrDir_3_0
(
PP_Instance
instance
const
char
*
path
PP_Bool
recursive
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_File_ModuleLocal
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
3
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DeleteFileOrDir
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
path
"
ToString_str_t
(
path
)
)
;
AddProp
(
ss
"
recursive
"
ToString_PP_Bool
(
recursive
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_File_ModuleLocal_3_0
*
)
RealGetInterface
(
"
PPB_Flash_File_ModuleLocal
;
3
.
0
"
)
)
-
>
DeleteFileOrDir
(
instance
path
recursive
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
CreateDir_3_0
(
PP_Instance
instance
const
char
*
path
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_File_ModuleLocal
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
3
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateDir
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
path
"
ToString_str_t
(
path
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_File_ModuleLocal_3_0
*
)
RealGetInterface
(
"
PPB_Flash_File_ModuleLocal
;
3
.
0
"
)
)
-
>
CreateDir
(
instance
path
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
QueryFile_3_0
(
PP_Instance
instance
const
char
*
path
struct
PP_FileInfo
*
info
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_File_ModuleLocal
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
3
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
QueryFile
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
path
"
ToString_str_t
(
path
)
)
;
AddProp
(
ss
"
info
"
PointerToString
(
info
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
info
)
{
iterator
.
skip
(
)
;
FromJSON_PP_FileInfo
(
iterator
*
info
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_File_ModuleLocal_3_0
*
)
RealGetInterface
(
"
PPB_Flash_File_ModuleLocal
;
3
.
0
"
)
)
-
>
QueryFile
(
instance
path
info
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
info
)
{
AddProp
(
os
"
info
"
ToString_PP_FileInfo
(
info
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetDirContents_3_0
(
PP_Instance
instance
const
char
*
path
struct
PP_DirContents_Dev
*
*
contents
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_File_ModuleLocal
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
3
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDirContents
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
path
"
ToString_str_t
(
path
)
)
;
AddProp
(
ss
"
contents
"
PointerToString
(
contents
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
contents
)
{
iterator
.
skip
(
)
;
FromJSON_PP_DirContents_Dev
(
iterator
*
contents
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_File_ModuleLocal_3_0
*
)
RealGetInterface
(
"
PPB_Flash_File_ModuleLocal
;
3
.
0
"
)
)
-
>
GetDirContents
(
instance
path
contents
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
contents
)
{
AddProp
(
os
"
contents
"
ToString_PP_DirContents_Dev
(
contents
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
FreeDirContents_3_0
(
PP_Instance
instance
const
struct
PP_DirContents_Dev
*
contents
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_File_ModuleLocal
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
3
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
FreeDirContents
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
contents
"
ToString_PP_DirContents_Dev
(
contents
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_File_ModuleLocal_3_0
*
)
RealGetInterface
(
"
PPB_Flash_File_ModuleLocal
;
3
.
0
"
)
)
-
>
FreeDirContents
(
instance
contents
)
;
#
endif
}
static
int32_t
CreateTemporaryFile_3_0
(
PP_Instance
instance
PP_FileHandle
*
file
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_File_ModuleLocal
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
3
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateTemporaryFile
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
file
"
PointerToString
(
file
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FileHandle
(
iterator
*
file
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_File_ModuleLocal_3_0
*
)
RealGetInterface
(
"
PPB_Flash_File_ModuleLocal
;
3
.
0
"
)
)
-
>
CreateTemporaryFile
(
instance
file
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
file
)
{
AddProp
(
os
"
file
"
ToString_PP_FileHandle
(
file
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_File_ModuleLocal_3_0
_PPB_Flash_File_ModuleLocal_3_0
=
{
ns_PPB_Flash_File_ModuleLocal_3_0
:
:
CreateThreadAdapterForInstance_3_0
ns_PPB_Flash_File_ModuleLocal_3_0
:
:
ClearThreadAdapterForInstance_3_0
ns_PPB_Flash_File_ModuleLocal_3_0
:
:
OpenFile_3_0
ns_PPB_Flash_File_ModuleLocal_3_0
:
:
RenameFile_3_0
ns_PPB_Flash_File_ModuleLocal_3_0
:
:
DeleteFileOrDir_3_0
ns_PPB_Flash_File_ModuleLocal_3_0
:
:
CreateDir_3_0
ns_PPB_Flash_File_ModuleLocal_3_0
:
:
QueryFile_3_0
ns_PPB_Flash_File_ModuleLocal_3_0
:
:
GetDirContents_3_0
ns_PPB_Flash_File_ModuleLocal_3_0
:
:
FreeDirContents_3_0
ns_PPB_Flash_File_ModuleLocal_3_0
:
:
CreateTemporaryFile_3_0
}
;
const
string
ToString_PPB_Flash_File_ModuleLocal
(
const
PPB_Flash_File_ModuleLocal_3_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_File_FileRef_2_0
{
static
int32_t
OpenFile_2_0
(
PP_Resource
file_ref_id
int32_t
mode
PP_FileHandle
*
file
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_File_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
2
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
OpenFile
\
"
"
)
;
AddProp
(
ss
"
file_ref_id
"
ToString_PP_Resource
(
file_ref_id
)
)
;
AddProp
(
ss
"
mode
"
ToString_int32_t
(
mode
)
)
;
AddProp
(
ss
"
file
"
PointerToString
(
file
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FileHandle
(
iterator
*
file
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_File_FileRef_2_0
*
)
RealGetInterface
(
"
PPB_Flash_File_FileRef
;
2
.
0
"
)
)
-
>
OpenFile
(
file_ref_id
mode
file
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
file
)
{
AddProp
(
os
"
file
"
ToString_PP_FileHandle
(
file
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
QueryFile_2_0
(
PP_Resource
file_ref_id
struct
PP_FileInfo
*
info
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_File_FileRef
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
2
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
QueryFile
\
"
"
)
;
AddProp
(
ss
"
file_ref_id
"
ToString_PP_Resource
(
file_ref_id
)
)
;
AddProp
(
ss
"
info
"
PointerToString
(
info
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
info
)
{
iterator
.
skip
(
)
;
FromJSON_PP_FileInfo
(
iterator
*
info
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_File_FileRef_2_0
*
)
RealGetInterface
(
"
PPB_Flash_File_FileRef
;
2
.
0
"
)
)
-
>
QueryFile
(
file_ref_id
info
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
info
)
{
AddProp
(
os
"
info
"
ToString_PP_FileInfo
(
info
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_File_FileRef_2_0
_PPB_Flash_File_FileRef_2_0
=
{
ns_PPB_Flash_File_FileRef_2_0
:
:
OpenFile_2_0
ns_PPB_Flash_File_FileRef_2_0
:
:
QueryFile_2_0
}
;
const
string
ToString_PPB_Flash_File_FileRef
(
const
PPB_Flash_File_FileRef_2_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_FontFile_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
const
struct
PP_BrowserFont_Trusted_Description
*
description
PP_PrivateFontCharset
charset
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_FontFile
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
description
"
ToString_PP_BrowserFont_Trusted_Description
(
description
)
)
;
AddProp
(
ss
"
charset
"
ToString_PP_PrivateFontCharset
(
charset
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_FontFile_0_1
*
)
RealGetInterface
(
"
PPB_Flash_FontFile
;
0
.
1
"
)
)
-
>
Create
(
instance
description
charset
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFlashFontFile_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_FontFile
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFlashFontFile
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_FontFile_0_1
*
)
RealGetInterface
(
"
PPB_Flash_FontFile
;
0
.
1
"
)
)
-
>
IsFlashFontFile
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetFontTable_0_1
(
PP_Resource
font_file
uint32_t
table
void
*
output
uint32_t
*
output_length
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_FontFile
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFontTable
\
"
"
)
;
AddProp
(
ss
"
font_file
"
ToString_PP_Resource
(
font_file
)
)
;
AddProp
(
ss
"
table
"
ToString_uint32_t
(
table
)
)
;
AddProp
(
ss
"
output
"
PointerToString
(
output
)
)
;
AddProp
(
ss
"
output_length
"
PointerToString
(
output_length
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
output
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
output_length
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_FontFile_0_1
*
)
RealGetInterface
(
"
PPB_Flash_FontFile
;
0
.
1
"
)
)
-
>
GetFontTable
(
font_file
table
output
output_length
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
output
"
ToString_mem_t
(
output
)
)
;
if
(
!
!
output_length
)
{
AddProp
(
os
"
output_length
"
ToString_uint32_t
(
output_length
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_FontFile_0_1
_PPB_Flash_FontFile_0_1
=
{
ns_PPB_Flash_FontFile_0_1
:
:
Create_0_1
ns_PPB_Flash_FontFile_0_1
:
:
IsFlashFontFile_0_1
ns_PPB_Flash_FontFile_0_1
:
:
GetFontTable_0_1
}
;
const
string
ToString_PPB_Flash_FontFile
(
const
PPB_Flash_FontFile_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_FontFile_0_2
{
static
PP_Resource
Create_0_2
(
PP_Instance
instance
const
struct
PP_BrowserFont_Trusted_Description
*
description
PP_PrivateFontCharset
charset
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_FontFile
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
description
"
ToString_PP_BrowserFont_Trusted_Description
(
description
)
)
;
AddProp
(
ss
"
charset
"
ToString_PP_PrivateFontCharset
(
charset
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_FontFile_0_2
*
)
RealGetInterface
(
"
PPB_Flash_FontFile
;
0
.
2
"
)
)
-
>
Create
(
instance
description
charset
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFlashFontFile_0_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_FontFile
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFlashFontFile
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_FontFile_0_2
*
)
RealGetInterface
(
"
PPB_Flash_FontFile
;
0
.
2
"
)
)
-
>
IsFlashFontFile
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetFontTable_0_2
(
PP_Resource
font_file
uint32_t
table
void
*
output
uint32_t
*
output_length
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_FontFile
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFontTable
\
"
"
)
;
AddProp
(
ss
"
font_file
"
ToString_PP_Resource
(
font_file
)
)
;
AddProp
(
ss
"
table
"
ToString_uint32_t
(
table
)
)
;
AddProp
(
ss
"
output
"
PointerToString
(
output
)
)
;
AddProp
(
ss
"
output_length
"
PointerToString
(
output_length
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
output
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
output_length
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_FontFile_0_2
*
)
RealGetInterface
(
"
PPB_Flash_FontFile
;
0
.
2
"
)
)
-
>
GetFontTable
(
font_file
table
output
output_length
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
output
"
ToString_mem_t
(
output
)
)
;
if
(
!
!
output_length
)
{
AddProp
(
os
"
output_length
"
ToString_uint32_t
(
output_length
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsSupportedForWindows_0_2
(
void
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_FontFile
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsSupportedForWindows
\
"
"
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_FontFile_0_2
*
)
RealGetInterface
(
"
PPB_Flash_FontFile
;
0
.
2
"
)
)
-
>
IsSupportedForWindows
(
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_FontFile_0_2
_PPB_Flash_FontFile_0_2
=
{
ns_PPB_Flash_FontFile_0_2
:
:
Create_0_2
ns_PPB_Flash_FontFile_0_2
:
:
IsFlashFontFile_0_2
ns_PPB_Flash_FontFile_0_2
:
:
GetFontTable_0_2
ns_PPB_Flash_FontFile_0_2
:
:
IsSupportedForWindows_0_2
}
;
const
string
ToString_PPB_Flash_FontFile
(
const
PPB_Flash_FontFile_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_FlashFullscreen_0_1
{
static
PP_Bool
IsFullscreen_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FlashFullscreen
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFullscreen
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FlashFullscreen_0_1
*
)
RealGetInterface
(
"
PPB_FlashFullscreen
;
0
.
1
"
)
)
-
>
IsFullscreen
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
SetFullscreen_0_1
(
PP_Instance
instance
PP_Bool
fullscreen
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FlashFullscreen
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetFullscreen
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
fullscreen
"
ToString_PP_Bool
(
fullscreen
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FlashFullscreen_0_1
*
)
RealGetInterface
(
"
PPB_FlashFullscreen
;
0
.
1
"
)
)
-
>
SetFullscreen
(
instance
fullscreen
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetScreenSize_0_1
(
PP_Instance
instance
struct
PP_Size
*
size
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FlashFullscreen
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetScreenSize
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
size
"
PointerToString
(
size
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
size
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
*
size
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FlashFullscreen_0_1
*
)
RealGetInterface
(
"
PPB_FlashFullscreen
;
0
.
1
"
)
)
-
>
GetScreenSize
(
instance
size
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
size
)
{
AddProp
(
os
"
size
"
ToString_PP_Size
(
size
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FlashFullscreen_0_1
_PPB_FlashFullscreen_0_1
=
{
ns_PPB_FlashFullscreen_0_1
:
:
IsFullscreen_0_1
ns_PPB_FlashFullscreen_0_1
:
:
SetFullscreen_0_1
ns_PPB_FlashFullscreen_0_1
:
:
GetScreenSize_0_1
}
;
const
string
ToString_PPB_FlashFullscreen
(
const
PPB_FlashFullscreen_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_FlashFullscreen_1_0
{
static
PP_Bool
IsFullscreen_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FlashFullscreen
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFullscreen
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FlashFullscreen_1_0
*
)
RealGetInterface
(
"
PPB_FlashFullscreen
;
1
.
0
"
)
)
-
>
IsFullscreen
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
SetFullscreen_1_0
(
PP_Instance
instance
PP_Bool
fullscreen
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FlashFullscreen
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetFullscreen
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
fullscreen
"
ToString_PP_Bool
(
fullscreen
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FlashFullscreen_1_0
*
)
RealGetInterface
(
"
PPB_FlashFullscreen
;
1
.
0
"
)
)
-
>
SetFullscreen
(
instance
fullscreen
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetScreenSize_1_0
(
PP_Instance
instance
struct
PP_Size
*
size
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_FlashFullscreen
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetScreenSize
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
size
"
PointerToString
(
size
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
size
)
{
iterator
.
skip
(
)
;
FromJSON_PP_Size
(
iterator
*
size
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_FlashFullscreen_1_0
*
)
RealGetInterface
(
"
PPB_FlashFullscreen
;
1
.
0
"
)
)
-
>
GetScreenSize
(
instance
size
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
size
)
{
AddProp
(
os
"
size
"
ToString_PP_Size
(
size
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_FlashFullscreen_1_0
_PPB_FlashFullscreen_1_0
=
{
ns_PPB_FlashFullscreen_1_0
:
:
IsFullscreen_1_0
ns_PPB_FlashFullscreen_1_0
:
:
SetFullscreen_1_0
ns_PPB_FlashFullscreen_1_0
:
:
GetScreenSize_1_0
}
;
const
string
ToString_PPB_FlashFullscreen
(
const
PPB_FlashFullscreen_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_Flash_MenuItem_Type
(
const
PP_Flash_MenuItem_Type
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_FLASH_MENUITEM_TYPE_NORMAL
\
"
"
;
case
1
:
return
"
\
"
PP_FLASH_MENUITEM_TYPE_CHECKBOX
\
"
"
;
case
2
:
return
"
\
"
PP_FLASH_MENUITEM_TYPE_SEPARATOR
\
"
"
;
case
3
:
return
"
\
"
PP_FLASH_MENUITEM_TYPE_SUBMENU
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_Flash_MenuItem_Type
(
const
PP_Flash_MenuItem_Type
&
v
)
{
return
ToString_PP_Flash_MenuItem_Type
(
&
v
)
;
}
void
FromJSON_PP_Flash_MenuItem_Type
(
JSONIterator
&
iterator
PP_Flash_MenuItem_Type
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_Flash_MenuItem_Type
(
v
)
;
}
const
string
ToString_PP_Flash_MenuItem
(
const
PP_Flash_MenuItem
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_Flash_MenuItem
(
*
v
)
;
}
const
string
ToString_PP_Flash_MenuItem
(
const
PP_Flash_MenuItem
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
type
"
ToString_PP_Flash_MenuItem_Type
(
v
.
type
)
)
;
AddProp
(
x
"
name
"
ToString_str_t
(
v
.
name
)
)
;
AddProp
(
x
"
id
"
ToString_int32_t
(
v
.
id
)
)
;
AddProp
(
x
"
enabled
"
ToString_PP_Bool
(
v
.
enabled
)
)
;
AddProp
(
x
"
checked
"
ToString_PP_Bool
(
v
.
checked
)
)
;
AddProp
(
x
"
submenu
"
ToString_PP_Flash_Menu
(
v
.
submenu
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_Flash_MenuItem
(
JSONIterator
&
iterator
PP_Flash_MenuItem
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_Flash_MenuItem_Type
(
iterator
value
.
type
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
value
.
name
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
id
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
enabled
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
checked
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Flash_Menu
(
iterator
value
.
submenu
)
;
}
const
string
ToString_PP_Flash_Menu
(
const
PP_Flash_Menu
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_Flash_Menu
(
*
v
)
;
}
const
string
ToString_PP_Flash_Menu
(
const
PP_Flash_Menu
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
count
"
ToString_uint32_t
(
v
.
count
)
)
;
{
BeginProp
(
x
"
items
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
v
.
count
;
+
+
_n
)
{
AddElement
(
x
ToString_PP_Flash_MenuItem
(
v
.
items
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_Flash_Menu
(
JSONIterator
&
iterator
PP_Flash_Menu
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
count
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
value
.
count
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_PP_Flash_MenuItem
(
iterator
(
value
.
items
)
[
_n
]
)
;
}
}
}
namespace
ns_PPB_Flash_Menu_0_2
{
static
PP_Resource
Create_0_2
(
PP_Instance
instance_id
const
struct
PP_Flash_Menu
*
menu_data
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Menu
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
AddProp
(
ss
"
menu_data
"
ToString_PP_Flash_Menu
(
menu_data
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_Menu_0_2
*
)
RealGetInterface
(
"
PPB_Flash_Menu
;
0
.
2
"
)
)
-
>
Create
(
instance_id
menu_data
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFlashMenu_0_2
(
PP_Resource
resource_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Menu
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFlashMenu
\
"
"
)
;
AddProp
(
ss
"
resource_id
"
ToString_PP_Resource
(
resource_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_Menu_0_2
*
)
RealGetInterface
(
"
PPB_Flash_Menu
;
0
.
2
"
)
)
-
>
IsFlashMenu
(
resource_id
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Show_0_2
(
PP_Resource
menu_id
const
struct
PP_Point
*
location
int32_t
*
selected_id
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Menu
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Show
\
"
"
)
;
AddProp
(
ss
"
menu_id
"
ToString_PP_Resource
(
menu_id
)
)
;
AddProp
(
ss
"
location
"
ToString_PP_Point
(
location
)
)
;
AddProp
(
ss
"
selected_id
"
PointerToString
(
selected_id
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
*
selected_id
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_Flash_Menu_0_2
*
)
RealGetInterface
(
"
PPB_Flash_Menu
;
0
.
2
"
)
)
-
>
Show
(
menu_id
location
selected_id
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
selected_id
)
{
AddProp
(
os
"
selected_id
"
ToString_int32_t
(
selected_id
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Flash_Menu_0_2
_PPB_Flash_Menu_0_2
=
{
ns_PPB_Flash_Menu_0_2
:
:
Create_0_2
ns_PPB_Flash_Menu_0_2
:
:
IsFlashMenu_0_2
ns_PPB_Flash_Menu_0_2
:
:
Show_0_2
}
;
const
string
ToString_PPB_Flash_Menu
(
const
PPB_Flash_Menu_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_MessageLoop_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_MessageLoop
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_MessageLoop_0_1
*
)
RealGetInterface
(
"
PPB_Flash_MessageLoop
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsFlashMessageLoop_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_MessageLoop
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFlashMessageLoop
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Flash_MessageLoop_0_1
*
)
RealGetInterface
(
"
PPB_Flash_MessageLoop
;
0
.
1
"
)
)
-
>
IsFlashMessageLoop
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Run_0_1
(
PP_Resource
flash_message_loop
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_MessageLoop
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Run
\
"
"
)
;
AddProp
(
ss
"
flash_message_loop
"
ToString_PP_Resource
(
flash_message_loop
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_Flash_MessageLoop_0_1
*
)
RealGetInterface
(
"
PPB_Flash_MessageLoop
;
0
.
1
"
)
)
-
>
Run
(
flash_message_loop
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Quit_0_1
(
PP_Resource
flash_message_loop
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_MessageLoop
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Quit
\
"
"
)
;
AddProp
(
ss
"
flash_message_loop
"
ToString_PP_Resource
(
flash_message_loop
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MaybeNonMainThread
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_MessageLoop_0_1
*
)
RealGetInterface
(
"
PPB_Flash_MessageLoop
;
0
.
1
"
)
)
-
>
Quit
(
flash_message_loop
)
;
#
endif
}
}
static
PPB_Flash_MessageLoop_0_1
_PPB_Flash_MessageLoop_0_1
=
{
ns_PPB_Flash_MessageLoop_0_1
:
:
Create_0_1
ns_PPB_Flash_MessageLoop_0_1
:
:
IsFlashMessageLoop_0_1
ns_PPB_Flash_MessageLoop_0_1
:
:
Run_0_1
ns_PPB_Flash_MessageLoop_0_1
:
:
Quit_0_1
}
;
const
string
ToString_PPB_Flash_MessageLoop
(
const
PPB_Flash_MessageLoop_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Flash_Print_1_0
{
static
void
InvokePrinting_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Flash_Print
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
InvokePrinting
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Flash_Print_1_0
*
)
RealGetInterface
(
"
PPB_Flash_Print
;
1
.
0
"
)
)
-
>
InvokePrinting
(
instance
)
;
#
endif
}
}
static
PPB_Flash_Print_1_0
_PPB_Flash_Print_1_0
=
{
ns_PPB_Flash_Print_1_0
:
:
InvokePrinting_1_0
}
;
const
string
ToString_PPB_Flash_Print
(
const
PPB_Flash_Print_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_HostResolver_Private_Flags
(
const
PP_HostResolver_Private_Flags
*
v
)
{
switch
(
*
v
)
{
case
1
<
<
0
:
return
"
\
"
PP_HOST_RESOLVER_PRIVATE_FLAGS_CANONNAME
\
"
"
;
case
1
<
<
1
:
return
"
\
"
PP_HOST_RESOLVER_PRIVATE_FLAGS_LOOPBACK_ONLY
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_HostResolver_Private_Flags
(
const
PP_HostResolver_Private_Flags
&
v
)
{
return
ToString_PP_HostResolver_Private_Flags
(
&
v
)
;
}
void
FromJSON_PP_HostResolver_Private_Flags
(
JSONIterator
&
iterator
PP_HostResolver_Private_Flags
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_HostResolver_Private_Flags
(
v
)
;
}
const
string
ToString_PP_HostResolver_Private_Hint
(
const
PP_HostResolver_Private_Hint
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_HostResolver_Private_Hint
(
*
v
)
;
}
const
string
ToString_PP_HostResolver_Private_Hint
(
const
PP_HostResolver_Private_Hint
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
family
"
ToString_PP_NetAddressFamily_Private
(
v
.
family
)
)
;
AddProp
(
x
"
flags
"
ToString_int32_t
(
v
.
flags
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_HostResolver_Private_Hint
(
JSONIterator
&
iterator
PP_HostResolver_Private_Hint
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_PP_NetAddressFamily_Private
(
iterator
value
.
family
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
flags
)
;
}
namespace
ns_PPB_HostResolver_Private_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_HostResolver_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_HostResolver_Private_0_1
*
)
RealGetInterface
(
"
PPB_HostResolver_Private
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsHostResolver_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_HostResolver_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsHostResolver
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_HostResolver_Private_0_1
*
)
RealGetInterface
(
"
PPB_HostResolver_Private
;
0
.
1
"
)
)
-
>
IsHostResolver
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Resolve_0_1
(
PP_Resource
host_resolver
const
char
*
host
uint16_t
port
const
struct
PP_HostResolver_Private_Hint
*
hint
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_HostResolver_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Resolve
\
"
"
)
;
AddProp
(
ss
"
host_resolver
"
ToString_PP_Resource
(
host_resolver
)
)
;
AddProp
(
ss
"
host
"
ToString_str_t
(
host
)
)
;
AddProp
(
ss
"
port
"
ToString_uint16_t
(
port
)
)
;
AddProp
(
ss
"
hint
"
ToString_PP_HostResolver_Private_Hint
(
hint
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_HostResolver_Private_0_1
*
)
RealGetInterface
(
"
PPB_HostResolver_Private
;
0
.
1
"
)
)
-
>
Resolve
(
host_resolver
host
port
hint
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetCanonicalName_0_1
(
PP_Resource
host_resolver
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_HostResolver_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetCanonicalName
\
"
"
)
;
AddProp
(
ss
"
host_resolver
"
ToString_PP_Resource
(
host_resolver
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_HostResolver_Private_0_1
*
)
RealGetInterface
(
"
PPB_HostResolver_Private
;
0
.
1
"
)
)
-
>
GetCanonicalName
(
host_resolver
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetSize_0_1
(
PP_Resource
host_resolver
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_HostResolver_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetSize
\
"
"
)
;
AddProp
(
ss
"
host_resolver
"
ToString_PP_Resource
(
host_resolver
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_HostResolver_Private_0_1
*
)
RealGetInterface
(
"
PPB_HostResolver_Private
;
0
.
1
"
)
)
-
>
GetSize
(
host_resolver
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetNetAddress_0_1
(
PP_Resource
host_resolver
uint32_t
index
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_HostResolver_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetNetAddress
\
"
"
)
;
AddProp
(
ss
"
host_resolver
"
ToString_PP_Resource
(
host_resolver
)
)
;
AddProp
(
ss
"
index
"
ToString_uint32_t
(
index
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_HostResolver_Private_0_1
*
)
RealGetInterface
(
"
PPB_HostResolver_Private
;
0
.
1
"
)
)
-
>
GetNetAddress
(
host_resolver
index
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_HostResolver_Private_0_1
_PPB_HostResolver_Private_0_1
=
{
ns_PPB_HostResolver_Private_0_1
:
:
Create_0_1
ns_PPB_HostResolver_Private_0_1
:
:
IsHostResolver_0_1
ns_PPB_HostResolver_Private_0_1
:
:
Resolve_0_1
ns_PPB_HostResolver_Private_0_1
:
:
GetCanonicalName_0_1
ns_PPB_HostResolver_Private_0_1
:
:
GetSize_0_1
ns_PPB_HostResolver_Private_0_1
:
:
GetNetAddress_0_1
}
;
const
string
ToString_PPB_HostResolver_Private
(
const
PPB_HostResolver_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_ExternalPluginResult
(
const
PP_ExternalPluginResult
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_EXTERNAL_PLUGIN_OK
\
"
"
;
case
1
:
return
"
\
"
PP_EXTERNAL_PLUGIN_FAILED
\
"
"
;
case
2
:
return
"
\
"
PP_EXTERNAL_PLUGIN_ERROR_MODULE
\
"
"
;
case
3
:
return
"
\
"
PP_EXTERNAL_PLUGIN_ERROR_INSTANCE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_ExternalPluginResult
(
const
PP_ExternalPluginResult
&
v
)
{
return
ToString_PP_ExternalPluginResult
(
&
v
)
;
}
void
FromJSON_PP_ExternalPluginResult
(
JSONIterator
&
iterator
PP_ExternalPluginResult
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_ExternalPluginResult
(
v
)
;
}
namespace
ns_PPB_Instance_Private_0_1
{
static
struct
PP_Var
GetWindowObject_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Instance_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetWindowObject
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Instance_Private_0_1
*
)
RealGetInterface
(
"
PPB_Instance_Private
;
0
.
1
"
)
)
-
>
GetWindowObject
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetOwnerElementObject_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Instance_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetOwnerElementObject
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Instance_Private_0_1
*
)
RealGetInterface
(
"
PPB_Instance_Private
;
0
.
1
"
)
)
-
>
GetOwnerElementObject
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
ExecuteScript_0_1
(
PP_Instance
instance
struct
PP_Var
script
struct
PP_Var
*
exception
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Instance_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ExecuteScript
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
script
"
ToString_PP_Var
(
script
)
)
;
AddProp
(
ss
"
exception
"
PointerToString
(
exception
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
exception
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Instance_Private_0_1
*
)
RealGetInterface
(
"
PPB_Instance_Private
;
0
.
1
"
)
)
-
>
ExecuteScript
(
instance
script
exception
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
exception
)
{
AddProp
(
os
"
exception
"
ToString_PP_Var
(
exception
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_Instance_Private_0_1
_PPB_Instance_Private_0_1
=
{
ns_PPB_Instance_Private_0_1
:
:
GetWindowObject_0_1
ns_PPB_Instance_Private_0_1
:
:
GetOwnerElementObject_0_1
ns_PPB_Instance_Private_0_1
:
:
ExecuteScript_0_1
}
;
const
string
ToString_PPB_Instance_Private
(
const
PPB_Instance_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_IsolatedFileSystemType_Private
(
const
PP_IsolatedFileSystemType_Private
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_ISOLATEDFILESYSTEMTYPE_PRIVATE_INVALID
\
"
"
;
case
1
:
return
"
\
"
PP_ISOLATEDFILESYSTEMTYPE_PRIVATE_CRX
\
"
"
;
case
2
:
return
"
\
"
PP_ISOLATEDFILESYSTEMTYPE_PRIVATE_PLUGINPRIVATE
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_IsolatedFileSystemType_Private
(
const
PP_IsolatedFileSystemType_Private
&
v
)
{
return
ToString_PP_IsolatedFileSystemType_Private
(
&
v
)
;
}
void
FromJSON_PP_IsolatedFileSystemType_Private
(
JSONIterator
&
iterator
PP_IsolatedFileSystemType_Private
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_IsolatedFileSystemType_Private
(
v
)
;
}
namespace
ns_PPB_IsolatedFileSystem_Private_0_2
{
static
int32_t
Open_0_2
(
PP_Instance
instance
PP_IsolatedFileSystemType_Private
type
PP_Resource
*
file_system
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_IsolatedFileSystem_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Open
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
type
"
ToString_PP_IsolatedFileSystemType_Private
(
type
)
)
;
AddProp
(
ss
"
file_system
"
PointerToString
(
file_system
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
file_system
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_IsolatedFileSystem_Private_0_2
*
)
RealGetInterface
(
"
PPB_IsolatedFileSystem_Private
;
0
.
2
"
)
)
-
>
Open
(
instance
type
file_system
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
file_system
)
{
AddProp
(
os
"
file_system
"
ToString_PP_Resource
(
file_system
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_IsolatedFileSystem_Private_0_2
_PPB_IsolatedFileSystem_Private_0_2
=
{
ns_PPB_IsolatedFileSystem_Private_0_2
:
:
Open_0_2
}
;
const
string
ToString_PPB_IsolatedFileSystem_Private
(
const
PPB_IsolatedFileSystem_Private_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_NetAddressFamily_Private
(
const
PP_NetAddressFamily_Private
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_NETADDRESSFAMILY_PRIVATE_UNSPECIFIED
\
"
"
;
case
1
:
return
"
\
"
PP_NETADDRESSFAMILY_PRIVATE_IPV4
\
"
"
;
case
2
:
return
"
\
"
PP_NETADDRESSFAMILY_PRIVATE_IPV6
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_NetAddressFamily_Private
(
const
PP_NetAddressFamily_Private
&
v
)
{
return
ToString_PP_NetAddressFamily_Private
(
&
v
)
;
}
void
FromJSON_PP_NetAddressFamily_Private
(
JSONIterator
&
iterator
PP_NetAddressFamily_Private
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_NetAddressFamily_Private
(
v
)
;
}
const
string
ToString_PP_NetAddress_Private
(
const
PP_NetAddress_Private
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_NetAddress_Private
(
*
v
)
;
}
const
string
ToString_PP_NetAddress_Private
(
const
PP_NetAddress_Private
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
size
"
ToString_uint32_t
(
v
.
size
)
)
;
{
BeginProp
(
x
"
data
"
)
;
BeginElements
(
x
)
;
for
(
uint32_t
_n
=
0
;
_n
<
128
;
+
+
_n
)
{
AddElement
(
x
ToString_int8_t
(
v
.
data
[
_n
]
)
)
;
}
EndElements
(
x
)
;
}
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_NetAddress_Private
(
JSONIterator
&
iterator
PP_NetAddress_Private
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
size
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
128
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_int8_t
(
iterator
(
value
.
data
)
[
_n
]
)
;
}
}
}
namespace
ns_PPB_NetAddress_Private_0_1
{
static
PP_Bool
AreEqual_0_1
(
const
struct
PP_NetAddress_Private
*
addr1
const
struct
PP_NetAddress_Private
*
addr2
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AreEqual
\
"
"
)
;
AddProp
(
ss
"
addr1
"
ToString_PP_NetAddress_Private
(
addr1
)
)
;
AddProp
(
ss
"
addr2
"
ToString_PP_NetAddress_Private
(
addr2
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_Private_0_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
0
.
1
"
)
)
-
>
AreEqual
(
addr1
addr2
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
AreHostsEqual_0_1
(
const
struct
PP_NetAddress_Private
*
addr1
const
struct
PP_NetAddress_Private
*
addr2
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AreHostsEqual
\
"
"
)
;
AddProp
(
ss
"
addr1
"
ToString_PP_NetAddress_Private
(
addr1
)
)
;
AddProp
(
ss
"
addr2
"
ToString_PP_NetAddress_Private
(
addr2
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_Private_0_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
0
.
1
"
)
)
-
>
AreHostsEqual
(
addr1
addr2
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
Describe_0_1
(
PP_Module
module
const
struct
PP_NetAddress_Private
*
addr
PP_Bool
include_port
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Describe
\
"
"
)
;
AddProp
(
ss
"
module
"
ToString_PP_Module
(
module
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
include_port
"
ToString_PP_Bool
(
include_port
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_NetAddress_Private_0_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
0
.
1
"
)
)
-
>
Describe
(
module
addr
include_port
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
ReplacePort_0_1
(
const
struct
PP_NetAddress_Private
*
src_addr
uint16_t
port
struct
PP_NetAddress_Private
*
addr_out
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReplacePort
\
"
"
)
;
AddProp
(
ss
"
src_addr
"
ToString_PP_NetAddress_Private
(
src_addr
)
)
;
AddProp
(
ss
"
port
"
ToString_uint16_t
(
port
)
)
;
AddProp
(
ss
"
addr_out
"
PointerToString
(
addr_out
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr_out
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr_out
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_Private_0_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
0
.
1
"
)
)
-
>
ReplacePort
(
src_addr
port
addr_out
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr_out
)
{
AddProp
(
os
"
addr_out
"
ToString_PP_NetAddress_Private
(
addr_out
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
GetAnyAddress_0_1
(
PP_Bool
is_ipv6
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAnyAddress
\
"
"
)
;
AddProp
(
ss
"
is_ipv6
"
ToString_PP_Bool
(
is_ipv6
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr
)
;
}
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_NetAddress_Private_0_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
0
.
1
"
)
)
-
>
GetAnyAddress
(
is_ipv6
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
}
static
PPB_NetAddress_Private_0_1
_PPB_NetAddress_Private_0_1
=
{
ns_PPB_NetAddress_Private_0_1
:
:
AreEqual_0_1
ns_PPB_NetAddress_Private_0_1
:
:
AreHostsEqual_0_1
ns_PPB_NetAddress_Private_0_1
:
:
Describe_0_1
ns_PPB_NetAddress_Private_0_1
:
:
ReplacePort_0_1
ns_PPB_NetAddress_Private_0_1
:
:
GetAnyAddress_0_1
}
;
const
string
ToString_PPB_NetAddress_Private
(
const
PPB_NetAddress_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_NetAddress_Private_1_0
{
static
PP_Bool
AreEqual_1_0
(
const
struct
PP_NetAddress_Private
*
addr1
const
struct
PP_NetAddress_Private
*
addr2
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AreEqual
\
"
"
)
;
AddProp
(
ss
"
addr1
"
ToString_PP_NetAddress_Private
(
addr1
)
)
;
AddProp
(
ss
"
addr2
"
ToString_PP_NetAddress_Private
(
addr2
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_Private_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
0
"
)
)
-
>
AreEqual
(
addr1
addr2
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
AreHostsEqual_1_0
(
const
struct
PP_NetAddress_Private
*
addr1
const
struct
PP_NetAddress_Private
*
addr2
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AreHostsEqual
\
"
"
)
;
AddProp
(
ss
"
addr1
"
ToString_PP_NetAddress_Private
(
addr1
)
)
;
AddProp
(
ss
"
addr2
"
ToString_PP_NetAddress_Private
(
addr2
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_Private_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
0
"
)
)
-
>
AreHostsEqual
(
addr1
addr2
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
Describe_1_0
(
PP_Module
module
const
struct
PP_NetAddress_Private
*
addr
PP_Bool
include_port
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Describe
\
"
"
)
;
AddProp
(
ss
"
module
"
ToString_PP_Module
(
module
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
include_port
"
ToString_PP_Bool
(
include_port
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_NetAddress_Private_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
0
"
)
)
-
>
Describe
(
module
addr
include_port
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
ReplacePort_1_0
(
const
struct
PP_NetAddress_Private
*
src_addr
uint16_t
port
struct
PP_NetAddress_Private
*
addr_out
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReplacePort
\
"
"
)
;
AddProp
(
ss
"
src_addr
"
ToString_PP_NetAddress_Private
(
src_addr
)
)
;
AddProp
(
ss
"
port
"
ToString_uint16_t
(
port
)
)
;
AddProp
(
ss
"
addr_out
"
PointerToString
(
addr_out
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr_out
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr_out
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_Private_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
0
"
)
)
-
>
ReplacePort
(
src_addr
port
addr_out
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr_out
)
{
AddProp
(
os
"
addr_out
"
ToString_PP_NetAddress_Private
(
addr_out
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
GetAnyAddress_1_0
(
PP_Bool
is_ipv6
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAnyAddress
\
"
"
)
;
AddProp
(
ss
"
is_ipv6
"
ToString_PP_Bool
(
is_ipv6
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr
)
;
}
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_NetAddress_Private_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
0
"
)
)
-
>
GetAnyAddress
(
is_ipv6
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
PP_NetAddressFamily_Private
GetFamily_1_0
(
const
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFamily
\
"
"
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_NetAddressFamily_Private
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_NetAddressFamily_Private
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_NetAddressFamily_Private
rval
=
(
(
PPB_NetAddress_Private_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
0
"
)
)
-
>
GetFamily
(
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_NetAddressFamily_Private
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint16_t
GetPort_1_0
(
const
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPort
\
"
"
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint16_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint16_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint16_t
rval
=
(
(
PPB_NetAddress_Private_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
0
"
)
)
-
>
GetPort
(
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint16_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetAddress_1_0
(
const
struct
PP_NetAddress_Private
*
addr
void
*
address
uint16_t
address_size
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAddress
\
"
"
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
address
"
PointerToString
(
address
)
)
;
AddProp
(
ss
"
address_size
"
ToString_uint16_t
(
address_size
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
address
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_Private_1_0
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
0
"
)
)
-
>
GetAddress
(
addr
address
address_size
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
address
"
ToString_mem_t
(
address
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_NetAddress_Private_1_0
_PPB_NetAddress_Private_1_0
=
{
ns_PPB_NetAddress_Private_1_0
:
:
AreEqual_1_0
ns_PPB_NetAddress_Private_1_0
:
:
AreHostsEqual_1_0
ns_PPB_NetAddress_Private_1_0
:
:
Describe_1_0
ns_PPB_NetAddress_Private_1_0
:
:
ReplacePort_1_0
ns_PPB_NetAddress_Private_1_0
:
:
GetAnyAddress_1_0
ns_PPB_NetAddress_Private_1_0
:
:
GetFamily_1_0
ns_PPB_NetAddress_Private_1_0
:
:
GetPort_1_0
ns_PPB_NetAddress_Private_1_0
:
:
GetAddress_1_0
}
;
const
string
ToString_PPB_NetAddress_Private
(
const
PPB_NetAddress_Private_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_NetAddress_Private_1_1
{
static
PP_Bool
AreEqual_1_1
(
const
struct
PP_NetAddress_Private
*
addr1
const
struct
PP_NetAddress_Private
*
addr2
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AreEqual
\
"
"
)
;
AddProp
(
ss
"
addr1
"
ToString_PP_NetAddress_Private
(
addr1
)
)
;
AddProp
(
ss
"
addr2
"
ToString_PP_NetAddress_Private
(
addr2
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_Private_1_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
1
"
)
)
-
>
AreEqual
(
addr1
addr2
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
AreHostsEqual_1_1
(
const
struct
PP_NetAddress_Private
*
addr1
const
struct
PP_NetAddress_Private
*
addr2
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AreHostsEqual
\
"
"
)
;
AddProp
(
ss
"
addr1
"
ToString_PP_NetAddress_Private
(
addr1
)
)
;
AddProp
(
ss
"
addr2
"
ToString_PP_NetAddress_Private
(
addr2
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_Private_1_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
1
"
)
)
-
>
AreHostsEqual
(
addr1
addr2
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
Describe_1_1
(
PP_Module
module
const
struct
PP_NetAddress_Private
*
addr
PP_Bool
include_port
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Describe
\
"
"
)
;
AddProp
(
ss
"
module
"
ToString_PP_Module
(
module
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
include_port
"
ToString_PP_Bool
(
include_port
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_NetAddress_Private_1_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
1
"
)
)
-
>
Describe
(
module
addr
include_port
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
ReplacePort_1_1
(
const
struct
PP_NetAddress_Private
*
src_addr
uint16_t
port
struct
PP_NetAddress_Private
*
addr_out
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReplacePort
\
"
"
)
;
AddProp
(
ss
"
src_addr
"
ToString_PP_NetAddress_Private
(
src_addr
)
)
;
AddProp
(
ss
"
port
"
ToString_uint16_t
(
port
)
)
;
AddProp
(
ss
"
addr_out
"
PointerToString
(
addr_out
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr_out
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr_out
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_Private_1_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
1
"
)
)
-
>
ReplacePort
(
src_addr
port
addr_out
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr_out
)
{
AddProp
(
os
"
addr_out
"
ToString_PP_NetAddress_Private
(
addr_out
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
GetAnyAddress_1_1
(
PP_Bool
is_ipv6
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAnyAddress
\
"
"
)
;
AddProp
(
ss
"
is_ipv6
"
ToString_PP_Bool
(
is_ipv6
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr
)
;
}
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_NetAddress_Private_1_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
1
"
)
)
-
>
GetAnyAddress
(
is_ipv6
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
PP_NetAddressFamily_Private
GetFamily_1_1
(
const
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFamily
\
"
"
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_NetAddressFamily_Private
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_NetAddressFamily_Private
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_NetAddressFamily_Private
rval
=
(
(
PPB_NetAddress_Private_1_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
1
"
)
)
-
>
GetFamily
(
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_NetAddressFamily_Private
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint16_t
GetPort_1_1
(
const
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetPort
\
"
"
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint16_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint16_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint16_t
rval
=
(
(
PPB_NetAddress_Private_1_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
1
"
)
)
-
>
GetPort
(
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint16_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetAddress_1_1
(
const
struct
PP_NetAddress_Private
*
addr
void
*
address
uint16_t
address_size
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetAddress
\
"
"
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
address
"
PointerToString
(
address
)
)
;
AddProp
(
ss
"
address_size
"
ToString_uint16_t
(
address_size
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
address
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_NetAddress_Private_1_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
1
"
)
)
-
>
GetAddress
(
addr
address
address_size
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
address
"
ToString_mem_t
(
address
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetScopeID_1_1
(
const
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetScopeID
\
"
"
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_NetAddress_Private_1_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
1
"
)
)
-
>
GetScopeID
(
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
CreateFromIPv4Address_1_1
(
const
uint8_t
ip
[
4
]
uint16_t
port
struct
PP_NetAddress_Private
*
addr_out
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateFromIPv4Address
\
"
"
)
;
{
BeginProp
(
ss
"
ip
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
4
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint8_t
(
ip
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
port
"
ToString_uint16_t
(
port
)
)
;
AddProp
(
ss
"
addr_out
"
PointerToString
(
addr_out
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr_out
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr_out
)
;
}
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_NetAddress_Private_1_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
1
"
)
)
-
>
CreateFromIPv4Address
(
ip
port
addr_out
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr_out
)
{
AddProp
(
os
"
addr_out
"
ToString_PP_NetAddress_Private
(
addr_out
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
CreateFromIPv6Address_1_1
(
const
uint8_t
ip
[
16
]
uint32_t
scope_id
uint16_t
port
struct
PP_NetAddress_Private
*
addr_out
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_NetAddress_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
CreateFromIPv6Address
\
"
"
)
;
{
BeginProp
(
ss
"
ip
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
16
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint8_t
(
ip
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
scope_id
"
ToString_uint32_t
(
scope_id
)
)
;
AddProp
(
ss
"
port
"
ToString_uint16_t
(
port
)
)
;
AddProp
(
ss
"
addr_out
"
PointerToString
(
addr_out
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr_out
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr_out
)
;
}
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_NetAddress_Private_1_1
*
)
RealGetInterface
(
"
PPB_NetAddress_Private
;
1
.
1
"
)
)
-
>
CreateFromIPv6Address
(
ip
scope_id
port
addr_out
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr_out
)
{
AddProp
(
os
"
addr_out
"
ToString_PP_NetAddress_Private
(
addr_out
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
}
static
PPB_NetAddress_Private_1_1
_PPB_NetAddress_Private_1_1
=
{
ns_PPB_NetAddress_Private_1_1
:
:
AreEqual_1_1
ns_PPB_NetAddress_Private_1_1
:
:
AreHostsEqual_1_1
ns_PPB_NetAddress_Private_1_1
:
:
Describe_1_1
ns_PPB_NetAddress_Private_1_1
:
:
ReplacePort_1_1
ns_PPB_NetAddress_Private_1_1
:
:
GetAnyAddress_1_1
ns_PPB_NetAddress_Private_1_1
:
:
GetFamily_1_1
ns_PPB_NetAddress_Private_1_1
:
:
GetPort_1_1
ns_PPB_NetAddress_Private_1_1
:
:
GetAddress_1_1
ns_PPB_NetAddress_Private_1_1
:
:
GetScopeID_1_1
ns_PPB_NetAddress_Private_1_1
:
:
CreateFromIPv4Address_1_1
ns_PPB_NetAddress_Private_1_1
:
:
CreateFromIPv6Address_1_1
}
;
const
string
ToString_PPB_NetAddress_Private
(
const
PPB_NetAddress_Private_1_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_OutputProtectionMethod_Private
(
const
PP_OutputProtectionMethod_Private
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_OUTPUT_PROTECTION_METHOD_PRIVATE_NONE
\
"
"
;
case
1
<
<
0
:
return
"
\
"
PP_OUTPUT_PROTECTION_METHOD_PRIVATE_HDCP
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_OutputProtectionMethod_Private
(
const
PP_OutputProtectionMethod_Private
&
v
)
{
return
ToString_PP_OutputProtectionMethod_Private
(
&
v
)
;
}
void
FromJSON_PP_OutputProtectionMethod_Private
(
JSONIterator
&
iterator
PP_OutputProtectionMethod_Private
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_OutputProtectionMethod_Private
(
v
)
;
}
const
string
ToString_PP_OutputProtectionLinkType_Private
(
const
PP_OutputProtectionLinkType_Private
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_NONE
\
"
"
;
case
1
<
<
0
:
return
"
\
"
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_UNKNOWN
\
"
"
;
case
1
<
<
1
:
return
"
\
"
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_INTERNAL
\
"
"
;
case
1
<
<
2
:
return
"
\
"
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_VGA
\
"
"
;
case
1
<
<
3
:
return
"
\
"
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_HDMI
\
"
"
;
case
1
<
<
4
:
return
"
\
"
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_DVI
\
"
"
;
case
1
<
<
5
:
return
"
\
"
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_DISPLAYPORT
\
"
"
;
case
1
<
<
6
:
return
"
\
"
PP_OUTPUT_PROTECTION_LINK_TYPE_PRIVATE_NETWORK
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_OutputProtectionLinkType_Private
(
const
PP_OutputProtectionLinkType_Private
&
v
)
{
return
ToString_PP_OutputProtectionLinkType_Private
(
&
v
)
;
}
void
FromJSON_PP_OutputProtectionLinkType_Private
(
JSONIterator
&
iterator
PP_OutputProtectionLinkType_Private
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_OutputProtectionLinkType_Private
(
v
)
;
}
namespace
ns_PPB_OutputProtection_Private_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OutputProtection_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_OutputProtection_Private_0_1
*
)
RealGetInterface
(
"
PPB_OutputProtection_Private
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsOutputProtection_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OutputProtection_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsOutputProtection
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_OutputProtection_Private_0_1
*
)
RealGetInterface
(
"
PPB_OutputProtection_Private
;
0
.
1
"
)
)
-
>
IsOutputProtection
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
QueryStatus_0_1
(
PP_Resource
resource
uint32_t
*
link_mask
uint32_t
*
protection_mask
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OutputProtection_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
QueryStatus
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
link_mask
"
PointerToString
(
link_mask
)
)
;
AddProp
(
ss
"
protection_mask
"
PointerToString
(
protection_mask
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
link_mask
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
protection_mask
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_OutputProtection_Private_0_1
*
)
RealGetInterface
(
"
PPB_OutputProtection_Private
;
0
.
1
"
)
)
-
>
QueryStatus
(
resource
link_mask
protection_mask
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
link_mask
)
{
AddProp
(
os
"
link_mask
"
ToString_uint32_t
(
link_mask
)
)
;
}
if
(
!
!
protection_mask
)
{
AddProp
(
os
"
protection_mask
"
ToString_uint32_t
(
protection_mask
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
EnableProtection_0_1
(
PP_Resource
resource
uint32_t
desired_protection_mask
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_OutputProtection_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
EnableProtection
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
desired_protection_mask
"
ToString_uint32_t
(
desired_protection_mask
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_OutputProtection_Private_0_1
*
)
RealGetInterface
(
"
PPB_OutputProtection_Private
;
0
.
1
"
)
)
-
>
EnableProtection
(
resource
desired_protection_mask
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_OutputProtection_Private_0_1
_PPB_OutputProtection_Private_0_1
=
{
ns_PPB_OutputProtection_Private_0_1
:
:
Create_0_1
ns_PPB_OutputProtection_Private_0_1
:
:
IsOutputProtection_0_1
ns_PPB_OutputProtection_Private_0_1
:
:
QueryStatus_0_1
ns_PPB_OutputProtection_Private_0_1
:
:
EnableProtection_0_1
}
;
const
string
ToString_PPB_OutputProtection_Private
(
const
PPB_OutputProtection_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_PDFFeature
(
const
PP_PDFFeature
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_PDFFEATURE_HIDPI
\
"
"
;
case
1
:
return
"
\
"
PP_PDFFEATURE_PRINTING
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_PDFFeature
(
const
PP_PDFFeature
&
v
)
{
return
ToString_PP_PDFFeature
(
&
v
)
;
}
void
FromJSON_PP_PDFFeature
(
JSONIterator
&
iterator
PP_PDFFeature
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_PDFFeature
(
v
)
;
}
const
string
ToString_PP_PrivateFontFileDescription
(
const
PP_PrivateFontFileDescription
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_PrivateFontFileDescription
(
*
v
)
;
}
const
string
ToString_PP_PrivateFontFileDescription
(
const
PP_PrivateFontFileDescription
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
face
"
ToString_str_t
(
v
.
face
)
)
;
AddProp
(
x
"
weight
"
ToString_uint32_t
(
v
.
weight
)
)
;
AddProp
(
x
"
italic
"
ToString_PP_Bool
(
v
.
italic
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_PrivateFontFileDescription
(
JSONIterator
&
iterator
PP_PrivateFontFileDescription
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
value
.
face
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
weight
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
italic
)
;
}
const
string
ToString_PP_PrivateFindResult
(
const
PP_PrivateFindResult
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_PrivateFindResult
(
*
v
)
;
}
const
string
ToString_PP_PrivateFindResult
(
const
PP_PrivateFindResult
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
start_index
"
ToString_int32_t
(
v
.
start_index
)
)
;
AddProp
(
x
"
length
"
ToString_int32_t
(
v
.
length
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_PrivateFindResult
(
JSONIterator
&
iterator
PP_PrivateFindResult
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
start_index
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
value
.
length
)
;
}
const
string
ToString_PP_PrivateAccessibilityViewportInfo
(
const
PP_PrivateAccessibilityViewportInfo
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_PrivateAccessibilityViewportInfo
(
*
v
)
;
}
const
string
ToString_PP_PrivateAccessibilityViewportInfo
(
const
PP_PrivateAccessibilityViewportInfo
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
zoom
"
ToString_double_t
(
v
.
zoom
)
)
;
AddProp
(
x
"
scroll
"
ToString_PP_Point
(
v
.
scroll
)
)
;
AddProp
(
x
"
offset
"
ToString_PP_Point
(
v
.
offset
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_PrivateAccessibilityViewportInfo
(
JSONIterator
&
iterator
PP_PrivateAccessibilityViewportInfo
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_double_t
(
iterator
value
.
zoom
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Point
(
iterator
value
.
scroll
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Point
(
iterator
value
.
offset
)
;
}
const
string
ToString_PP_PrivateAccessibilityDocInfo
(
const
PP_PrivateAccessibilityDocInfo
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_PrivateAccessibilityDocInfo
(
*
v
)
;
}
const
string
ToString_PP_PrivateAccessibilityDocInfo
(
const
PP_PrivateAccessibilityDocInfo
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
page_count
"
ToString_uint32_t
(
v
.
page_count
)
)
;
AddProp
(
x
"
text_accessible
"
ToString_PP_Bool
(
v
.
text_accessible
)
)
;
AddProp
(
x
"
text_copyable
"
ToString_PP_Bool
(
v
.
text_copyable
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_PrivateAccessibilityDocInfo
(
JSONIterator
&
iterator
PP_PrivateAccessibilityDocInfo
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
page_count
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
text_accessible
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
value
.
text_copyable
)
;
}
const
string
ToString_PP_PrivateDirection
(
const
PP_PrivateDirection
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_PRIVATEDIRECTION_NONE
\
"
"
;
case
1
:
return
"
\
"
PP_PRIVATEDIRECTION_LTR
\
"
"
;
case
2
:
return
"
\
"
PP_PRIVATEDIRECTION_RTL
\
"
"
;
case
3
:
return
"
\
"
PP_PRIVATEDIRECTION_TTB
\
"
"
;
case
4
:
return
"
\
"
PP_PRIVATEDIRECTION_BTT
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_PrivateDirection
(
const
PP_PrivateDirection
&
v
)
{
return
ToString_PP_PrivateDirection
(
&
v
)
;
}
void
FromJSON_PP_PrivateDirection
(
JSONIterator
&
iterator
PP_PrivateDirection
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_PrivateDirection
(
v
)
;
}
const
string
ToString_PP_PrivateAccessibilityPageInfo
(
const
PP_PrivateAccessibilityPageInfo
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_PrivateAccessibilityPageInfo
(
*
v
)
;
}
const
string
ToString_PP_PrivateAccessibilityPageInfo
(
const
PP_PrivateAccessibilityPageInfo
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
page_index
"
ToString_uint32_t
(
v
.
page_index
)
)
;
AddProp
(
x
"
bounds
"
ToString_PP_Rect
(
v
.
bounds
)
)
;
AddProp
(
x
"
text_run_count
"
ToString_uint32_t
(
v
.
text_run_count
)
)
;
AddProp
(
x
"
char_count
"
ToString_uint32_t
(
v
.
char_count
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_PrivateAccessibilityPageInfo
(
JSONIterator
&
iterator
PP_PrivateAccessibilityPageInfo
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
page_index
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Rect
(
iterator
value
.
bounds
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
text_run_count
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
char_count
)
;
}
const
string
ToString_PP_PrivateAccessibilityTextRunInfo
(
const
PP_PrivateAccessibilityTextRunInfo
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_PrivateAccessibilityTextRunInfo
(
*
v
)
;
}
const
string
ToString_PP_PrivateAccessibilityTextRunInfo
(
const
PP_PrivateAccessibilityTextRunInfo
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
len
"
ToString_uint32_t
(
v
.
len
)
)
;
AddProp
(
x
"
font_size
"
ToString_double_t
(
v
.
font_size
)
)
;
AddProp
(
x
"
bounds
"
ToString_PP_FloatRect
(
v
.
bounds
)
)
;
AddProp
(
x
"
direction
"
ToString_PP_PrivateDirection
(
v
.
direction
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_PrivateAccessibilityTextRunInfo
(
JSONIterator
&
iterator
PP_PrivateAccessibilityTextRunInfo
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
len
)
;
iterator
.
skip
(
)
;
FromJSON_double_t
(
iterator
value
.
font_size
)
;
iterator
.
skip
(
)
;
FromJSON_PP_FloatRect
(
iterator
value
.
bounds
)
;
iterator
.
skip
(
)
;
FromJSON_PP_PrivateDirection
(
iterator
value
.
direction
)
;
}
const
string
ToString_PP_PrivateAccessibilityCharInfo
(
const
PP_PrivateAccessibilityCharInfo
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_PrivateAccessibilityCharInfo
(
*
v
)
;
}
const
string
ToString_PP_PrivateAccessibilityCharInfo
(
const
PP_PrivateAccessibilityCharInfo
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
unicode_character
"
ToString_uint32_t
(
v
.
unicode_character
)
)
;
AddProp
(
x
"
char_width
"
ToString_double_t
(
v
.
char_width
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_PrivateAccessibilityCharInfo
(
JSONIterator
&
iterator
PP_PrivateAccessibilityCharInfo
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
value
.
unicode_character
)
;
iterator
.
skip
(
)
;
FromJSON_double_t
(
iterator
value
.
char_width
)
;
}
namespace
ns_PPB_PDF_0_1
{
static
PP_Resource
GetFontFileWithFallback_0_1
(
PP_Instance
instance
const
struct
PP_BrowserFont_Trusted_Description
*
description
PP_PrivateFontCharset
charset
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFontFileWithFallback
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
description
"
ToString_PP_BrowserFont_Trusted_Description
(
description
)
)
;
AddProp
(
ss
"
charset
"
ToString_PP_PrivateFontCharset
(
charset
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
GetFontFileWithFallback
(
instance
description
charset
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetFontTableForPrivateFontFile_0_1
(
PP_Resource
font_file
uint32_t
table
void
*
output
uint32_t
*
output_length
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFontTableForPrivateFontFile
\
"
"
)
;
AddProp
(
ss
"
font_file
"
ToString_PP_Resource
(
font_file
)
)
;
AddProp
(
ss
"
table
"
ToString_uint32_t
(
table
)
)
;
AddProp
(
ss
"
output
"
PointerToString
(
output
)
)
;
AddProp
(
ss
"
output_length
"
PointerToString
(
output_length
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
output
)
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
*
output_length
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
GetFontTableForPrivateFontFile
(
font_file
table
output
output_length
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
output
"
ToString_mem_t
(
output
)
)
;
if
(
!
!
output_length
)
{
AddProp
(
os
"
output_length
"
ToString_uint32_t
(
output_length
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
SearchString_0_1
(
PP_Instance
instance
const
void
*
str
const
void
*
term
PP_Bool
case_sensitive
struct
PP_PrivateFindResult
*
*
results
int32_t
*
count
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SearchString
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
str
"
ToString_mem_t
(
str
)
)
;
AddProp
(
ss
"
term
"
ToString_mem_t
(
term
)
)
;
AddProp
(
ss
"
case_sensitive
"
ToString_PP_Bool
(
case_sensitive
)
)
;
AddProp
(
ss
"
results
"
PointerToString
(
results
)
)
;
AddProp
(
ss
"
count
"
PointerToString
(
count
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
*
results
=
new
struct
PP_PrivateFindResult
[
children
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_PP_PrivateFindResult
(
iterator
(
*
results
)
[
_n
]
)
;
}
}
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
*
count
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
SearchString
(
instance
str
term
case_sensitive
results
count
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
{
BeginProp
(
os
"
results
"
)
;
BeginElements
(
os
)
;
for
(
uint32_t
_n
=
0
;
results
[
_n
]
!
=
0
;
+
+
_n
)
{
AddElement
(
os
ToString_PP_PrivateFindResult
(
results
[
_n
]
)
)
;
}
EndElements
(
os
)
;
}
if
(
!
!
count
)
{
AddProp
(
os
"
count
"
ToString_int32_t
(
count
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
DidStartLoading_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DidStartLoading
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
DidStartLoading
(
instance
)
;
#
endif
}
static
void
DidStopLoading_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
DidStopLoading
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
DidStopLoading
(
instance
)
;
#
endif
}
static
void
SetContentRestriction_0_1
(
PP_Instance
instance
int32_t
restrictions
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetContentRestriction
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
restrictions
"
ToString_int32_t
(
restrictions
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
SetContentRestriction
(
instance
restrictions
)
;
#
endif
}
static
void
UserMetricsRecordAction_0_1
(
PP_Instance
instance
struct
PP_Var
action
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
UserMetricsRecordAction
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
action
"
ToString_PP_Var
(
action
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
UserMetricsRecordAction
(
instance
action
)
;
#
endif
}
static
void
HasUnsupportedFeature_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
HasUnsupportedFeature
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
HasUnsupportedFeature
(
instance
)
;
#
endif
}
static
void
SaveAs_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SaveAs
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
SaveAs
(
instance
)
;
#
endif
}
static
void
Print_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Print
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
Print
(
instance
)
;
#
endif
}
static
PP_Bool
IsFeatureEnabled_0_1
(
PP_Instance
instance
PP_PDFFeature
feature
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsFeatureEnabled
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
feature
"
ToString_PP_PDFFeature
(
feature
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
IsFeatureEnabled
(
instance
feature
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
SetSelectedText_0_1
(
PP_Instance
instance
const
char
*
selected_text
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetSelectedText
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
selected_text
"
ToString_str_t
(
selected_text
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
SetSelectedText
(
instance
selected_text
)
;
#
endif
}
static
void
SetLinkUnderCursor_0_1
(
PP_Instance
instance
const
char
*
url
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetLinkUnderCursor
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
url
"
ToString_str_t
(
url
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
SetLinkUnderCursor
(
instance
url
)
;
#
endif
}
static
void
GetV8ExternalSnapshotData_0_1
(
PP_Instance
instance
void
*
*
natives_data_out
int32_t
*
natives_size_out
void
*
*
snapshot_data_out
int32_t
*
snapshot_size_out
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetV8ExternalSnapshotData
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
natives_data_out
"
PointerToString
(
natives_data_out
)
)
;
AddProp
(
ss
"
natives_size_out
"
PointerToString
(
natives_size_out
)
)
;
AddProp
(
ss
"
snapshot_data_out
"
PointerToString
(
snapshot_data_out
)
)
;
AddProp
(
ss
"
snapshot_size_out
"
PointerToString
(
snapshot_size_out
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_mem_ptr_t
(
iterator
natives_data_out
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
*
natives_size_out
)
;
iterator
.
skip
(
)
;
FromJSON_mem_ptr_t
(
iterator
snapshot_data_out
)
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
*
snapshot_size_out
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
GetV8ExternalSnapshotData
(
instance
natives_data_out
natives_size_out
snapshot_data_out
snapshot_size_out
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
natives_data_out
"
ToString_mem_ptr_t
(
natives_data_out
)
)
;
if
(
!
!
natives_size_out
)
{
AddProp
(
os
"
natives_size_out
"
ToString_int32_t
(
natives_size_out
)
)
;
}
AddProp
(
os
"
snapshot_data_out
"
ToString_mem_ptr_t
(
snapshot_data_out
)
)
;
if
(
!
!
snapshot_size_out
)
{
AddProp
(
os
"
snapshot_size_out
"
ToString_int32_t
(
snapshot_size_out
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
#
endif
}
static
void
SetAccessibilityViewportInfo_0_1
(
PP_Instance
instance
const
struct
PP_PrivateAccessibilityViewportInfo
*
viewport_info
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetAccessibilityViewportInfo
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
viewport_info
"
ToString_PP_PrivateAccessibilityViewportInfo
(
viewport_info
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
SetAccessibilityViewportInfo
(
instance
viewport_info
)
;
#
endif
}
static
void
SetAccessibilityDocInfo_0_1
(
PP_Instance
instance
const
struct
PP_PrivateAccessibilityDocInfo
*
doc_info
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetAccessibilityDocInfo
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
doc_info
"
ToString_PP_PrivateAccessibilityDocInfo
(
doc_info
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
SetAccessibilityDocInfo
(
instance
doc_info
)
;
#
endif
}
static
void
SetAccessibilityPageInfo_0_1
(
PP_Instance
instance
const
struct
PP_PrivateAccessibilityPageInfo
*
page_info
const
struct
PP_PrivateAccessibilityTextRunInfo
text_runs
[
]
const
struct
PP_PrivateAccessibilityCharInfo
chars
[
]
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetAccessibilityPageInfo
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
page_info
"
ToString_PP_PrivateAccessibilityPageInfo
(
page_info
)
)
;
{
BeginProp
(
ss
"
text_runs
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
page_info
-
>
text_run_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_PrivateAccessibilityTextRunInfo
(
text_runs
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
{
BeginProp
(
ss
"
chars
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
page_info
-
>
char_count
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_PrivateAccessibilityCharInfo
(
chars
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
SetAccessibilityPageInfo
(
instance
page_info
text_runs
chars
)
;
#
endif
}
static
void
SetCrashData_0_1
(
PP_Instance
instance
const
char
*
pdf_url
const
char
*
top_level_url
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PDF
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetCrashData
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
pdf_url
"
ToString_str_t
(
pdf_url
)
)
;
AddProp
(
ss
"
top_level_url
"
ToString_str_t
(
top_level_url
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_PDF_0_1
*
)
RealGetInterface
(
"
PPB_PDF
;
0
.
1
"
)
)
-
>
SetCrashData
(
instance
pdf_url
top_level_url
)
;
#
endif
}
}
static
PPB_PDF_0_1
_PPB_PDF_0_1
=
{
ns_PPB_PDF_0_1
:
:
GetFontFileWithFallback_0_1
ns_PPB_PDF_0_1
:
:
GetFontTableForPrivateFontFile_0_1
ns_PPB_PDF_0_1
:
:
SearchString_0_1
ns_PPB_PDF_0_1
:
:
DidStartLoading_0_1
ns_PPB_PDF_0_1
:
:
DidStopLoading_0_1
ns_PPB_PDF_0_1
:
:
SetContentRestriction_0_1
ns_PPB_PDF_0_1
:
:
UserMetricsRecordAction_0_1
ns_PPB_PDF_0_1
:
:
HasUnsupportedFeature_0_1
ns_PPB_PDF_0_1
:
:
SaveAs_0_1
ns_PPB_PDF_0_1
:
:
Print_0_1
ns_PPB_PDF_0_1
:
:
IsFeatureEnabled_0_1
ns_PPB_PDF_0_1
:
:
SetSelectedText_0_1
ns_PPB_PDF_0_1
:
:
SetLinkUnderCursor_0_1
ns_PPB_PDF_0_1
:
:
GetV8ExternalSnapshotData_0_1
ns_PPB_PDF_0_1
:
:
SetAccessibilityViewportInfo_0_1
ns_PPB_PDF_0_1
:
:
SetAccessibilityDocInfo_0_1
ns_PPB_PDF_0_1
:
:
SetAccessibilityPageInfo_0_1
ns_PPB_PDF_0_1
:
:
SetCrashData_0_1
}
;
const
string
ToString_PPB_PDF
(
const
PPB_PDF_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_PlatformVerification_Private_0_2
{
static
PP_Resource
Create_0_2
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PlatformVerification_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_PlatformVerification_Private_0_2
*
)
RealGetInterface
(
"
PPB_PlatformVerification_Private
;
0
.
2
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsPlatformVerification_0_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PlatformVerification_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsPlatformVerification
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_PlatformVerification_Private_0_2
*
)
RealGetInterface
(
"
PPB_PlatformVerification_Private
;
0
.
2
"
)
)
-
>
IsPlatformVerification
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
ChallengePlatform_0_2
(
PP_Resource
instance
struct
PP_Var
service_id
struct
PP_Var
challenge
struct
PP_Var
*
signed_data
struct
PP_Var
*
signed_data_signature
struct
PP_Var
*
platform_key_certificate
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_PlatformVerification_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ChallengePlatform
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Resource
(
instance
)
)
;
AddProp
(
ss
"
service_id
"
ToString_PP_Var
(
service_id
)
)
;
AddProp
(
ss
"
challenge
"
ToString_PP_Var
(
challenge
)
)
;
AddProp
(
ss
"
signed_data
"
PointerToString
(
signed_data
)
)
;
AddProp
(
ss
"
signed_data_signature
"
PointerToString
(
signed_data_signature
)
)
;
AddProp
(
ss
"
platform_key_certificate
"
PointerToString
(
platform_key_certificate
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
signed_data
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
signed_data_signature
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
*
platform_key_certificate
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_PlatformVerification_Private_0_2
*
)
RealGetInterface
(
"
PPB_PlatformVerification_Private
;
0
.
2
"
)
)
-
>
ChallengePlatform
(
instance
service_id
challenge
signed_data
signed_data_signature
platform_key_certificate
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
signed_data
)
{
AddProp
(
os
"
signed_data
"
ToString_PP_Var
(
signed_data
)
)
;
}
if
(
!
!
signed_data_signature
)
{
AddProp
(
os
"
signed_data_signature
"
ToString_PP_Var
(
signed_data_signature
)
)
;
}
if
(
!
!
platform_key_certificate
)
{
AddProp
(
os
"
platform_key_certificate
"
ToString_PP_Var
(
platform_key_certificate
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_PlatformVerification_Private_0_2
_PPB_PlatformVerification_Private_0_2
=
{
ns_PPB_PlatformVerification_Private_0_2
:
:
Create_0_2
ns_PPB_PlatformVerification_Private_0_2
:
:
IsPlatformVerification_0_2
ns_PPB_PlatformVerification_Private_0_2
:
:
ChallengePlatform_0_2
}
;
const
string
ToString_PPB_PlatformVerification_Private
(
const
PPB_PlatformVerification_Private_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_TCPServerSocket_Private_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPServerSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPServerSocket_Private_0_1
*
)
RealGetInterface
(
"
PPB_TCPServerSocket_Private
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsTCPServerSocket_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPServerSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsTCPServerSocket
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPServerSocket_Private_0_1
*
)
RealGetInterface
(
"
PPB_TCPServerSocket_Private
;
0
.
1
"
)
)
-
>
IsTCPServerSocket
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Listen_0_1
(
PP_Resource
tcp_server_socket
const
struct
PP_NetAddress_Private
*
addr
int32_t
backlog
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPServerSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Listen
\
"
"
)
;
AddProp
(
ss
"
tcp_server_socket
"
ToString_PP_Resource
(
tcp_server_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
backlog
"
ToString_int32_t
(
backlog
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPServerSocket_Private_0_1
*
)
RealGetInterface
(
"
PPB_TCPServerSocket_Private
;
0
.
1
"
)
)
-
>
Listen
(
tcp_server_socket
addr
backlog
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Accept_0_1
(
PP_Resource
tcp_server_socket
PP_Resource
*
tcp_socket
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPServerSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Accept
\
"
"
)
;
AddProp
(
ss
"
tcp_server_socket
"
ToString_PP_Resource
(
tcp_server_socket
)
)
;
AddProp
(
ss
"
tcp_socket
"
PointerToString
(
tcp_socket
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
tcp_socket
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPServerSocket_Private_0_1
*
)
RealGetInterface
(
"
PPB_TCPServerSocket_Private
;
0
.
1
"
)
)
-
>
Accept
(
tcp_server_socket
tcp_socket
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
tcp_socket
)
{
AddProp
(
os
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
StopListening_0_1
(
PP_Resource
tcp_server_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPServerSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StopListening
\
"
"
)
;
AddProp
(
ss
"
tcp_server_socket
"
ToString_PP_Resource
(
tcp_server_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TCPServerSocket_Private_0_1
*
)
RealGetInterface
(
"
PPB_TCPServerSocket_Private
;
0
.
1
"
)
)
-
>
StopListening
(
tcp_server_socket
)
;
#
endif
}
}
static
PPB_TCPServerSocket_Private_0_1
_PPB_TCPServerSocket_Private_0_1
=
{
ns_PPB_TCPServerSocket_Private_0_1
:
:
Create_0_1
ns_PPB_TCPServerSocket_Private_0_1
:
:
IsTCPServerSocket_0_1
ns_PPB_TCPServerSocket_Private_0_1
:
:
Listen_0_1
ns_PPB_TCPServerSocket_Private_0_1
:
:
Accept_0_1
ns_PPB_TCPServerSocket_Private_0_1
:
:
StopListening_0_1
}
;
const
string
ToString_PPB_TCPServerSocket_Private
(
const
PPB_TCPServerSocket_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_TCPServerSocket_Private_0_2
{
static
PP_Resource
Create_0_2
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPServerSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPServerSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_TCPServerSocket_Private
;
0
.
2
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsTCPServerSocket_0_2
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPServerSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsTCPServerSocket
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPServerSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_TCPServerSocket_Private
;
0
.
2
"
)
)
-
>
IsTCPServerSocket
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Listen_0_2
(
PP_Resource
tcp_server_socket
const
struct
PP_NetAddress_Private
*
addr
int32_t
backlog
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPServerSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Listen
\
"
"
)
;
AddProp
(
ss
"
tcp_server_socket
"
ToString_PP_Resource
(
tcp_server_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
backlog
"
ToString_int32_t
(
backlog
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPServerSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_TCPServerSocket_Private
;
0
.
2
"
)
)
-
>
Listen
(
tcp_server_socket
addr
backlog
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Accept_0_2
(
PP_Resource
tcp_server_socket
PP_Resource
*
tcp_socket
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPServerSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Accept
\
"
"
)
;
AddProp
(
ss
"
tcp_server_socket
"
ToString_PP_Resource
(
tcp_server_socket
)
)
;
AddProp
(
ss
"
tcp_socket
"
PointerToString
(
tcp_socket
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
*
tcp_socket
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPServerSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_TCPServerSocket_Private
;
0
.
2
"
)
)
-
>
Accept
(
tcp_server_socket
tcp_socket
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
tcp_socket
)
{
AddProp
(
os
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetLocalAddress_0_2
(
PP_Resource
tcp_server_socket
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPServerSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLocalAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_server_socket
"
ToString_PP_Resource
(
tcp_server_socket
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPServerSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_TCPServerSocket_Private
;
0
.
2
"
)
)
-
>
GetLocalAddress
(
tcp_server_socket
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
StopListening_0_2
(
PP_Resource
tcp_server_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPServerSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
StopListening
\
"
"
)
;
AddProp
(
ss
"
tcp_server_socket
"
ToString_PP_Resource
(
tcp_server_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TCPServerSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_TCPServerSocket_Private
;
0
.
2
"
)
)
-
>
StopListening
(
tcp_server_socket
)
;
#
endif
}
}
static
PPB_TCPServerSocket_Private_0_2
_PPB_TCPServerSocket_Private_0_2
=
{
ns_PPB_TCPServerSocket_Private_0_2
:
:
Create_0_2
ns_PPB_TCPServerSocket_Private_0_2
:
:
IsTCPServerSocket_0_2
ns_PPB_TCPServerSocket_Private_0_2
:
:
Listen_0_2
ns_PPB_TCPServerSocket_Private_0_2
:
:
Accept_0_2
ns_PPB_TCPServerSocket_Private_0_2
:
:
GetLocalAddress_0_2
ns_PPB_TCPServerSocket_Private_0_2
:
:
StopListening_0_2
}
;
const
string
ToString_PPB_TCPServerSocket_Private
(
const
PPB_TCPServerSocket_Private_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_TCPSocketOption_Private
(
const
PP_TCPSocketOption_Private
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_TCPSOCKETOPTION_PRIVATE_INVALID
\
"
"
;
case
1
:
return
"
\
"
PP_TCPSOCKETOPTION_PRIVATE_NO_DELAY
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_TCPSocketOption_Private
(
const
PP_TCPSocketOption_Private
&
v
)
{
return
ToString_PP_TCPSocketOption_Private
(
&
v
)
;
}
void
FromJSON_PP_TCPSocketOption_Private
(
JSONIterator
&
iterator
PP_TCPSocketOption_Private
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_TCPSocketOption_Private
(
v
)
;
}
namespace
ns_PPB_TCPSocket_Private_0_3
{
static
PP_Resource
Create_0_3
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
3
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsTCPSocket_0_3
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsTCPSocket
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
3
"
)
)
-
>
IsTCPSocket
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Connect_0_3
(
PP_Resource
tcp_socket
const
char
*
host
uint16_t
port
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Connect
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
host
"
ToString_str_t
(
host
)
)
;
AddProp
(
ss
"
port
"
ToString_uint16_t
(
port
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
3
"
)
)
-
>
Connect
(
tcp_socket
host
port
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
ConnectWithNetAddress_0_3
(
PP_Resource
tcp_socket
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ConnectWithNetAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
3
"
)
)
-
>
ConnectWithNetAddress
(
tcp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetLocalAddress_0_3
(
PP_Resource
tcp_socket
struct
PP_NetAddress_Private
*
local_addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLocalAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
local_addr
"
PointerToString
(
local_addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
local_addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
local_addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
3
"
)
)
-
>
GetLocalAddress
(
tcp_socket
local_addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
local_addr
)
{
AddProp
(
os
"
local_addr
"
ToString_PP_NetAddress_Private
(
local_addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetRemoteAddress_0_3
(
PP_Resource
tcp_socket
struct
PP_NetAddress_Private
*
remote_addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRemoteAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
remote_addr
"
PointerToString
(
remote_addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
remote_addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
remote_addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
3
"
)
)
-
>
GetRemoteAddress
(
tcp_socket
remote_addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
remote_addr
)
{
AddProp
(
os
"
remote_addr
"
ToString_PP_NetAddress_Private
(
remote_addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SSLHandshake_0_3
(
PP_Resource
tcp_socket
const
char
*
server_name
uint16_t
server_port
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SSLHandshake
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
server_name
"
ToString_str_t
(
server_name
)
)
;
AddProp
(
ss
"
server_port
"
ToString_uint16_t
(
server_port
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
3
"
)
)
-
>
SSLHandshake
(
tcp_socket
server_name
server_port
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Read_0_3
(
PP_Resource
tcp_socket
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Read
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_read
"
ToString_int32_t
(
bytes_to_read
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
3
"
)
)
-
>
Read
(
tcp_socket
buffer
bytes_to_read
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Write_0_3
(
PP_Resource
tcp_socket
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Write
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
{
BeginProp
(
ss
"
buffer
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
bytes_to_write
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint8_t
(
buffer
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
bytes_to_write
"
ToString_int32_t
(
bytes_to_write
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
3
"
)
)
-
>
Write
(
tcp_socket
buffer
bytes_to_write
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Disconnect_0_3
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Disconnect
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TCPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
3
"
)
)
-
>
Disconnect
(
tcp_socket
)
;
#
endif
}
}
static
PPB_TCPSocket_Private_0_3
_PPB_TCPSocket_Private_0_3
=
{
ns_PPB_TCPSocket_Private_0_3
:
:
Create_0_3
ns_PPB_TCPSocket_Private_0_3
:
:
IsTCPSocket_0_3
ns_PPB_TCPSocket_Private_0_3
:
:
Connect_0_3
ns_PPB_TCPSocket_Private_0_3
:
:
ConnectWithNetAddress_0_3
ns_PPB_TCPSocket_Private_0_3
:
:
GetLocalAddress_0_3
ns_PPB_TCPSocket_Private_0_3
:
:
GetRemoteAddress_0_3
ns_PPB_TCPSocket_Private_0_3
:
:
SSLHandshake_0_3
ns_PPB_TCPSocket_Private_0_3
:
:
Read_0_3
ns_PPB_TCPSocket_Private_0_3
:
:
Write_0_3
ns_PPB_TCPSocket_Private_0_3
:
:
Disconnect_0_3
}
;
const
string
ToString_PPB_TCPSocket_Private
(
const
PPB_TCPSocket_Private_0_3
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_TCPSocket_Private_0_4
{
static
PP_Resource
Create_0_4
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
4
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsTCPSocket_0_4
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsTCPSocket
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
4
"
)
)
-
>
IsTCPSocket
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Connect_0_4
(
PP_Resource
tcp_socket
const
char
*
host
uint16_t
port
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Connect
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
host
"
ToString_str_t
(
host
)
)
;
AddProp
(
ss
"
port
"
ToString_uint16_t
(
port
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
4
"
)
)
-
>
Connect
(
tcp_socket
host
port
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
ConnectWithNetAddress_0_4
(
PP_Resource
tcp_socket
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ConnectWithNetAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
4
"
)
)
-
>
ConnectWithNetAddress
(
tcp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetLocalAddress_0_4
(
PP_Resource
tcp_socket
struct
PP_NetAddress_Private
*
local_addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLocalAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
local_addr
"
PointerToString
(
local_addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
local_addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
local_addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
4
"
)
)
-
>
GetLocalAddress
(
tcp_socket
local_addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
local_addr
)
{
AddProp
(
os
"
local_addr
"
ToString_PP_NetAddress_Private
(
local_addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetRemoteAddress_0_4
(
PP_Resource
tcp_socket
struct
PP_NetAddress_Private
*
remote_addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRemoteAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
remote_addr
"
PointerToString
(
remote_addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
remote_addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
remote_addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
4
"
)
)
-
>
GetRemoteAddress
(
tcp_socket
remote_addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
remote_addr
)
{
AddProp
(
os
"
remote_addr
"
ToString_PP_NetAddress_Private
(
remote_addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SSLHandshake_0_4
(
PP_Resource
tcp_socket
const
char
*
server_name
uint16_t
server_port
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SSLHandshake
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
server_name
"
ToString_str_t
(
server_name
)
)
;
AddProp
(
ss
"
server_port
"
ToString_uint16_t
(
server_port
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
4
"
)
)
-
>
SSLHandshake
(
tcp_socket
server_name
server_port
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetServerCertificate_0_4
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetServerCertificate
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
4
"
)
)
-
>
GetServerCertificate
(
tcp_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
AddChainBuildingCertificate_0_4
(
PP_Resource
tcp_socket
PP_Resource
certificate
PP_Bool
is_trusted
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AddChainBuildingCertificate
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
certificate
"
ToString_PP_Resource
(
certificate
)
)
;
AddProp
(
ss
"
is_trusted
"
ToString_PP_Bool
(
is_trusted
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
4
"
)
)
-
>
AddChainBuildingCertificate
(
tcp_socket
certificate
is_trusted
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Read_0_4
(
PP_Resource
tcp_socket
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Read
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_read
"
ToString_int32_t
(
bytes_to_read
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
4
"
)
)
-
>
Read
(
tcp_socket
buffer
bytes_to_read
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Write_0_4
(
PP_Resource
tcp_socket
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Write
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
{
BeginProp
(
ss
"
buffer
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
bytes_to_write
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint8_t
(
buffer
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
bytes_to_write
"
ToString_int32_t
(
bytes_to_write
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
4
"
)
)
-
>
Write
(
tcp_socket
buffer
bytes_to_write
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Disconnect_0_4
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Disconnect
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TCPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
4
"
)
)
-
>
Disconnect
(
tcp_socket
)
;
#
endif
}
}
static
PPB_TCPSocket_Private_0_4
_PPB_TCPSocket_Private_0_4
=
{
ns_PPB_TCPSocket_Private_0_4
:
:
Create_0_4
ns_PPB_TCPSocket_Private_0_4
:
:
IsTCPSocket_0_4
ns_PPB_TCPSocket_Private_0_4
:
:
Connect_0_4
ns_PPB_TCPSocket_Private_0_4
:
:
ConnectWithNetAddress_0_4
ns_PPB_TCPSocket_Private_0_4
:
:
GetLocalAddress_0_4
ns_PPB_TCPSocket_Private_0_4
:
:
GetRemoteAddress_0_4
ns_PPB_TCPSocket_Private_0_4
:
:
SSLHandshake_0_4
ns_PPB_TCPSocket_Private_0_4
:
:
GetServerCertificate_0_4
ns_PPB_TCPSocket_Private_0_4
:
:
AddChainBuildingCertificate_0_4
ns_PPB_TCPSocket_Private_0_4
:
:
Read_0_4
ns_PPB_TCPSocket_Private_0_4
:
:
Write_0_4
ns_PPB_TCPSocket_Private_0_4
:
:
Disconnect_0_4
}
;
const
string
ToString_PPB_TCPSocket_Private
(
const
PPB_TCPSocket_Private_0_4
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_TCPSocket_Private_0_5
{
static
PP_Resource
Create_0_5
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsTCPSocket_0_5
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsTCPSocket
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
IsTCPSocket
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Connect_0_5
(
PP_Resource
tcp_socket
const
char
*
host
uint16_t
port
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Connect
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
host
"
ToString_str_t
(
host
)
)
;
AddProp
(
ss
"
port
"
ToString_uint16_t
(
port
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
Connect
(
tcp_socket
host
port
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
ConnectWithNetAddress_0_5
(
PP_Resource
tcp_socket
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ConnectWithNetAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
ConnectWithNetAddress
(
tcp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetLocalAddress_0_5
(
PP_Resource
tcp_socket
struct
PP_NetAddress_Private
*
local_addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLocalAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
local_addr
"
PointerToString
(
local_addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
local_addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
local_addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
GetLocalAddress
(
tcp_socket
local_addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
local_addr
)
{
AddProp
(
os
"
local_addr
"
ToString_PP_NetAddress_Private
(
local_addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetRemoteAddress_0_5
(
PP_Resource
tcp_socket
struct
PP_NetAddress_Private
*
remote_addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRemoteAddress
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
remote_addr
"
PointerToString
(
remote_addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
remote_addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
remote_addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
GetRemoteAddress
(
tcp_socket
remote_addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
remote_addr
)
{
AddProp
(
os
"
remote_addr
"
ToString_PP_NetAddress_Private
(
remote_addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SSLHandshake_0_5
(
PP_Resource
tcp_socket
const
char
*
server_name
uint16_t
server_port
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SSLHandshake
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
server_name
"
ToString_str_t
(
server_name
)
)
;
AddProp
(
ss
"
server_port
"
ToString_uint16_t
(
server_port
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
SSLHandshake
(
tcp_socket
server_name
server_port
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Resource
GetServerCertificate_0_5
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetServerCertificate
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
GetServerCertificate
(
tcp_socket
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
AddChainBuildingCertificate_0_5
(
PP_Resource
tcp_socket
PP_Resource
certificate
PP_Bool
is_trusted
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
AddChainBuildingCertificate
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
certificate
"
ToString_PP_Resource
(
certificate
)
)
;
AddProp
(
ss
"
is_trusted
"
ToString_PP_Bool
(
is_trusted
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
AddChainBuildingCertificate
(
tcp_socket
certificate
is_trusted
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Read_0_5
(
PP_Resource
tcp_socket
char
*
buffer
int32_t
bytes_to_read
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Read
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
bytes_to_read
"
ToString_int32_t
(
bytes_to_read
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
Read
(
tcp_socket
buffer
bytes_to_read
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Write_0_5
(
PP_Resource
tcp_socket
const
char
*
buffer
int32_t
bytes_to_write
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Write
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
{
BeginProp
(
ss
"
buffer
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
bytes_to_write
;
+
+
_n
)
{
AddElement
(
ss
ToString_uint8_t
(
buffer
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
bytes_to_write
"
ToString_int32_t
(
bytes_to_write
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
Write
(
tcp_socket
buffer
bytes_to_write
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Disconnect_0_5
(
PP_Resource
tcp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Disconnect
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
Disconnect
(
tcp_socket
)
;
#
endif
}
static
int32_t
SetOption_0_5
(
PP_Resource
tcp_socket
PP_TCPSocketOption_Private
name
struct
PP_Var
value
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_TCPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
5
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetOption
\
"
"
)
;
AddProp
(
ss
"
tcp_socket
"
ToString_PP_Resource
(
tcp_socket
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_TCPSocketOption_Private
(
name
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_TCPSocket_Private_0_5
*
)
RealGetInterface
(
"
PPB_TCPSocket_Private
;
0
.
5
"
)
)
-
>
SetOption
(
tcp_socket
name
value
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_TCPSocket_Private_0_5
_PPB_TCPSocket_Private_0_5
=
{
ns_PPB_TCPSocket_Private_0_5
:
:
Create_0_5
ns_PPB_TCPSocket_Private_0_5
:
:
IsTCPSocket_0_5
ns_PPB_TCPSocket_Private_0_5
:
:
Connect_0_5
ns_PPB_TCPSocket_Private_0_5
:
:
ConnectWithNetAddress_0_5
ns_PPB_TCPSocket_Private_0_5
:
:
GetLocalAddress_0_5
ns_PPB_TCPSocket_Private_0_5
:
:
GetRemoteAddress_0_5
ns_PPB_TCPSocket_Private_0_5
:
:
SSLHandshake_0_5
ns_PPB_TCPSocket_Private_0_5
:
:
GetServerCertificate_0_5
ns_PPB_TCPSocket_Private_0_5
:
:
AddChainBuildingCertificate_0_5
ns_PPB_TCPSocket_Private_0_5
:
:
Read_0_5
ns_PPB_TCPSocket_Private_0_5
:
:
Write_0_5
ns_PPB_TCPSocket_Private_0_5
:
:
Disconnect_0_5
ns_PPB_TCPSocket_Private_0_5
:
:
SetOption_0_5
}
;
const
string
ToString_PPB_TCPSocket_Private
(
const
PPB_TCPSocket_Private_0_5
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_Testing_Private_1_0
{
static
PP_Bool
ReadImageData_1_0
(
PP_Resource
device_context_2d
PP_Resource
image
const
struct
PP_Point
*
top_left
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Testing_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
ReadImageData
\
"
"
)
;
AddProp
(
ss
"
device_context_2d
"
ToString_PP_Resource
(
device_context_2d
)
)
;
AddProp
(
ss
"
image
"
ToString_PP_Resource
(
image
)
)
;
AddProp
(
ss
"
top_left
"
ToString_PP_Point
(
top_left
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Testing_Private_1_0
*
)
RealGetInterface
(
"
PPB_Testing_Private
;
1
.
0
"
)
)
-
>
ReadImageData
(
device_context_2d
image
top_left
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
RunMessageLoop_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Testing_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RunMessageLoop
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Testing_Private_1_0
*
)
RealGetInterface
(
"
PPB_Testing_Private
;
1
.
0
"
)
)
-
>
RunMessageLoop
(
instance
)
;
#
endif
}
static
void
QuitMessageLoop_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Testing_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
QuitMessageLoop
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Testing_Private_1_0
*
)
RealGetInterface
(
"
PPB_Testing_Private
;
1
.
0
"
)
)
-
>
QuitMessageLoop
(
instance
)
;
#
endif
}
static
uint32_t
GetLiveObjectsForInstance_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Testing_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLiveObjectsForInstance
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_Testing_Private_1_0
*
)
RealGetInterface
(
"
PPB_Testing_Private
;
1
.
0
"
)
)
-
>
GetLiveObjectsForInstance
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsOutOfProcess_1_0
(
void
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Testing_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsOutOfProcess
\
"
"
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_Testing_Private_1_0
*
)
RealGetInterface
(
"
PPB_Testing_Private
;
1
.
0
"
)
)
-
>
IsOutOfProcess
(
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
PostPowerSaverStatus_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Testing_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PostPowerSaverStatus
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Testing_Private_1_0
*
)
RealGetInterface
(
"
PPB_Testing_Private
;
1
.
0
"
)
)
-
>
PostPowerSaverStatus
(
instance
)
;
#
endif
}
static
void
SubscribeToPowerSaverNotifications_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Testing_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SubscribeToPowerSaverNotifications
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Testing_Private_1_0
*
)
RealGetInterface
(
"
PPB_Testing_Private
;
1
.
0
"
)
)
-
>
SubscribeToPowerSaverNotifications
(
instance
)
;
#
endif
}
static
void
SimulateInputEvent_1_0
(
PP_Instance
instance
PP_Resource
input_event
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Testing_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SimulateInputEvent
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
input_event
"
ToString_PP_Resource
(
input_event
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Testing_Private_1_0
*
)
RealGetInterface
(
"
PPB_Testing_Private
;
1
.
0
"
)
)
-
>
SimulateInputEvent
(
instance
input_event
)
;
#
endif
}
static
struct
PP_Var
GetDocumentURL_1_0
(
PP_Instance
instance
struct
PP_URLComponents_Dev
*
components
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Testing_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetDocumentURL
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
components
"
PointerToString
(
components
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
components
)
{
iterator
.
skip
(
)
;
FromJSON_PP_URLComponents_Dev
(
iterator
*
components
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_Testing_Private_1_0
*
)
RealGetInterface
(
"
PPB_Testing_Private
;
1
.
0
"
)
)
-
>
GetDocumentURL
(
instance
components
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
components
)
{
AddProp
(
os
"
components
"
ToString_PP_URLComponents_Dev
(
components
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
uint32_t
GetLiveVars_1_0
(
struct
PP_Var
live_vars
[
]
uint32_t
array_size
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Testing_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetLiveVars
\
"
"
)
;
{
BeginProp
(
ss
"
live_vars
"
)
;
BeginElements
(
ss
)
;
for
(
uint32_t
_n
=
0
;
_n
<
array_size
;
+
+
_n
)
{
AddElement
(
ss
ToString_PP_Var
(
live_vars
[
_n
]
)
)
;
}
EndElements
(
ss
)
;
}
AddProp
(
ss
"
array_size
"
ToString_uint32_t
(
array_size
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
uint32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_uint32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
uint32_t
rval
=
(
(
PPB_Testing_Private_1_0
*
)
RealGetInterface
(
"
PPB_Testing_Private
;
1
.
0
"
)
)
-
>
GetLiveVars
(
live_vars
array_size
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_uint32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
SetMinimumArrayBufferSizeForShmem_1_0
(
PP_Instance
instance
uint32_t
threshold
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Testing_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetMinimumArrayBufferSizeForShmem
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
threshold
"
ToString_uint32_t
(
threshold
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Testing_Private_1_0
*
)
RealGetInterface
(
"
PPB_Testing_Private
;
1
.
0
"
)
)
-
>
SetMinimumArrayBufferSizeForShmem
(
instance
threshold
)
;
#
endif
}
static
void
RunV8GC_1_0
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_Testing_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
1
.
0
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RunV8GC
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_Testing_Private_1_0
*
)
RealGetInterface
(
"
PPB_Testing_Private
;
1
.
0
"
)
)
-
>
RunV8GC
(
instance
)
;
#
endif
}
}
static
PPB_Testing_Private_1_0
_PPB_Testing_Private_1_0
=
{
ns_PPB_Testing_Private_1_0
:
:
ReadImageData_1_0
ns_PPB_Testing_Private_1_0
:
:
RunMessageLoop_1_0
ns_PPB_Testing_Private_1_0
:
:
QuitMessageLoop_1_0
ns_PPB_Testing_Private_1_0
:
:
GetLiveObjectsForInstance_1_0
ns_PPB_Testing_Private_1_0
:
:
IsOutOfProcess_1_0
ns_PPB_Testing_Private_1_0
:
:
PostPowerSaverStatus_1_0
ns_PPB_Testing_Private_1_0
:
:
SubscribeToPowerSaverNotifications_1_0
ns_PPB_Testing_Private_1_0
:
:
SimulateInputEvent_1_0
ns_PPB_Testing_Private_1_0
:
:
GetDocumentURL_1_0
ns_PPB_Testing_Private_1_0
:
:
GetLiveVars_1_0
ns_PPB_Testing_Private_1_0
:
:
SetMinimumArrayBufferSizeForShmem_1_0
ns_PPB_Testing_Private_1_0
:
:
RunV8GC_1_0
}
;
const
string
ToString_PPB_Testing_Private
(
const
PPB_Testing_Private_1_0
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_UDPSocketFeature_Private
(
const
PP_UDPSocketFeature_Private
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_UDPSOCKETFEATURE_PRIVATE_ADDRESS_REUSE
\
"
"
;
case
1
:
return
"
\
"
PP_UDPSOCKETFEATURE_PRIVATE_BROADCAST
\
"
"
;
case
2
:
return
"
\
"
PP_UDPSOCKETFEATURE_PRIVATE_COUNT
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_UDPSocketFeature_Private
(
const
PP_UDPSocketFeature_Private
&
v
)
{
return
ToString_PP_UDPSocketFeature_Private
(
&
v
)
;
}
void
FromJSON_PP_UDPSocketFeature_Private
(
JSONIterator
&
iterator
PP_UDPSocketFeature_Private
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_UDPSocketFeature_Private
(
v
)
;
}
namespace
ns_PPB_UDPSocket_Private_0_2
{
static
PP_Resource
Create_0_2
(
PP_Instance
instance_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
2
"
)
)
-
>
Create
(
instance_id
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsUDPSocket_0_2
(
PP_Resource
resource_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsUDPSocket
\
"
"
)
;
AddProp
(
ss
"
resource_id
"
ToString_PP_Resource
(
resource_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_UDPSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
2
"
)
)
-
>
IsUDPSocket
(
resource_id
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Bind_0_2
(
PP_Resource
udp_socket
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Bind
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
2
"
)
)
-
>
Bind
(
udp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
RecvFrom_0_2
(
PP_Resource
udp_socket
char
*
buffer
int32_t
num_bytes
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecvFrom
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_int32_t
(
num_bytes
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
2
"
)
)
-
>
RecvFrom
(
udp_socket
buffer
num_bytes
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetRecvFromAddress_0_2
(
PP_Resource
udp_socket
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRecvFromAddress
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_UDPSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
2
"
)
)
-
>
GetRecvFromAddress
(
udp_socket
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SendTo_0_2
(
PP_Resource
udp_socket
const
char
*
buffer
int32_t
num_bytes
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SendTo
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_int32_t
(
num_bytes
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
2
"
)
)
-
>
SendTo
(
udp_socket
buffer
num_bytes
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_0_2
(
PP_Resource
udp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
2
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_UDPSocket_Private_0_2
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
2
"
)
)
-
>
Close
(
udp_socket
)
;
#
endif
}
}
static
PPB_UDPSocket_Private_0_2
_PPB_UDPSocket_Private_0_2
=
{
ns_PPB_UDPSocket_Private_0_2
:
:
Create_0_2
ns_PPB_UDPSocket_Private_0_2
:
:
IsUDPSocket_0_2
ns_PPB_UDPSocket_Private_0_2
:
:
Bind_0_2
ns_PPB_UDPSocket_Private_0_2
:
:
RecvFrom_0_2
ns_PPB_UDPSocket_Private_0_2
:
:
GetRecvFromAddress_0_2
ns_PPB_UDPSocket_Private_0_2
:
:
SendTo_0_2
ns_PPB_UDPSocket_Private_0_2
:
:
Close_0_2
}
;
const
string
ToString_PPB_UDPSocket_Private
(
const
PPB_UDPSocket_Private_0_2
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_UDPSocket_Private_0_3
{
static
PP_Resource
Create_0_3
(
PP_Instance
instance_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
3
"
)
)
-
>
Create
(
instance_id
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsUDPSocket_0_3
(
PP_Resource
resource_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsUDPSocket
\
"
"
)
;
AddProp
(
ss
"
resource_id
"
ToString_PP_Resource
(
resource_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_UDPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
3
"
)
)
-
>
IsUDPSocket
(
resource_id
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Bind_0_3
(
PP_Resource
udp_socket
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Bind
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
3
"
)
)
-
>
Bind
(
udp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetBoundAddress_0_3
(
PP_Resource
udp_socket
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBoundAddress
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_UDPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
3
"
)
)
-
>
GetBoundAddress
(
udp_socket
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
RecvFrom_0_3
(
PP_Resource
udp_socket
char
*
buffer
int32_t
num_bytes
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecvFrom
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_int32_t
(
num_bytes
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
3
"
)
)
-
>
RecvFrom
(
udp_socket
buffer
num_bytes
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetRecvFromAddress_0_3
(
PP_Resource
udp_socket
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRecvFromAddress
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_UDPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
3
"
)
)
-
>
GetRecvFromAddress
(
udp_socket
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SendTo_0_3
(
PP_Resource
udp_socket
const
char
*
buffer
int32_t
num_bytes
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SendTo
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_int32_t
(
num_bytes
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
3
"
)
)
-
>
SendTo
(
udp_socket
buffer
num_bytes
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_0_3
(
PP_Resource
udp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_UDPSocket_Private_0_3
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
3
"
)
)
-
>
Close
(
udp_socket
)
;
#
endif
}
}
static
PPB_UDPSocket_Private_0_3
_PPB_UDPSocket_Private_0_3
=
{
ns_PPB_UDPSocket_Private_0_3
:
:
Create_0_3
ns_PPB_UDPSocket_Private_0_3
:
:
IsUDPSocket_0_3
ns_PPB_UDPSocket_Private_0_3
:
:
Bind_0_3
ns_PPB_UDPSocket_Private_0_3
:
:
GetBoundAddress_0_3
ns_PPB_UDPSocket_Private_0_3
:
:
RecvFrom_0_3
ns_PPB_UDPSocket_Private_0_3
:
:
GetRecvFromAddress_0_3
ns_PPB_UDPSocket_Private_0_3
:
:
SendTo_0_3
ns_PPB_UDPSocket_Private_0_3
:
:
Close_0_3
}
;
const
string
ToString_PPB_UDPSocket_Private
(
const
PPB_UDPSocket_Private_0_3
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_UDPSocket_Private_0_4
{
static
PP_Resource
Create_0_4
(
PP_Instance
instance_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance_id
"
ToString_PP_Instance
(
instance_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
4
"
)
)
-
>
Create
(
instance_id
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsUDPSocket_0_4
(
PP_Resource
resource_id
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsUDPSocket
\
"
"
)
;
AddProp
(
ss
"
resource_id
"
ToString_PP_Resource
(
resource_id
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_UDPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
4
"
)
)
-
>
IsUDPSocket
(
resource_id
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SetSocketFeature_0_4
(
PP_Resource
udp_socket
PP_UDPSocketFeature_Private
name
struct
PP_Var
value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SetSocketFeature
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_UDPSocketFeature_Private
(
name
)
)
;
AddProp
(
ss
"
value
"
ToString_PP_Var
(
value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
4
"
)
)
-
>
SetSocketFeature
(
udp_socket
name
value
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Bind_0_4
(
PP_Resource
udp_socket
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Bind
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
4
"
)
)
-
>
Bind
(
udp_socket
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetBoundAddress_0_4
(
PP_Resource
udp_socket
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetBoundAddress
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_UDPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
4
"
)
)
-
>
GetBoundAddress
(
udp_socket
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
RecvFrom_0_4
(
PP_Resource
udp_socket
char
*
buffer
int32_t
num_bytes
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
RecvFrom
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
buffer
"
PointerToString
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_int32_t
(
num_bytes
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
buffer
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
4
"
)
)
-
>
RecvFrom
(
udp_socket
buffer
num_bytes
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
AddProp
(
os
"
buffer
"
ToString_str_t
(
buffer
)
)
;
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
GetRecvFromAddress_0_4
(
PP_Resource
udp_socket
struct
PP_NetAddress_Private
*
addr
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetRecvFromAddress
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
addr
"
PointerToString
(
addr
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
addr
)
{
iterator
.
skip
(
)
;
FromJSON_PP_NetAddress_Private
(
iterator
*
addr
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_UDPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
4
"
)
)
-
>
GetRecvFromAddress
(
udp_socket
addr
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
addr
)
{
AddProp
(
os
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
SendTo_0_4
(
PP_Resource
udp_socket
const
char
*
buffer
int32_t
num_bytes
const
struct
PP_NetAddress_Private
*
addr
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
SendTo
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
AddProp
(
ss
"
buffer
"
ToString_str_t
(
buffer
)
)
;
AddProp
(
ss
"
num_bytes
"
ToString_int32_t
(
num_bytes
)
)
;
AddProp
(
ss
"
addr
"
ToString_PP_NetAddress_Private
(
addr
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UDPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
4
"
)
)
-
>
SendTo
(
udp_socket
buffer
num_bytes
addr
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_0_4
(
PP_Resource
udp_socket
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UDPSocket_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
4
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
udp_socket
"
ToString_PP_Resource
(
udp_socket
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_UDPSocket_Private_0_4
*
)
RealGetInterface
(
"
PPB_UDPSocket_Private
;
0
.
4
"
)
)
-
>
Close
(
udp_socket
)
;
#
endif
}
}
static
PPB_UDPSocket_Private_0_4
_PPB_UDPSocket_Private_0_4
=
{
ns_PPB_UDPSocket_Private_0_4
:
:
Create_0_4
ns_PPB_UDPSocket_Private_0_4
:
:
IsUDPSocket_0_4
ns_PPB_UDPSocket_Private_0_4
:
:
SetSocketFeature_0_4
ns_PPB_UDPSocket_Private_0_4
:
:
Bind_0_4
ns_PPB_UDPSocket_Private_0_4
:
:
GetBoundAddress_0_4
ns_PPB_UDPSocket_Private_0_4
:
:
RecvFrom_0_4
ns_PPB_UDPSocket_Private_0_4
:
:
GetRecvFromAddress_0_4
ns_PPB_UDPSocket_Private_0_4
:
:
SendTo_0_4
ns_PPB_UDPSocket_Private_0_4
:
:
Close_0_4
}
;
const
string
ToString_PPB_UDPSocket_Private
(
const
PPB_UDPSocket_Private_0_4
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_UMA_Private_0_3
{
static
void
HistogramCustomTimes_0_3
(
PP_Instance
instance
struct
PP_Var
name
int64_t
sample
int64_t
min
int64_t
max
uint32_t
bucket_count
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UMA_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
HistogramCustomTimes
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_Var
(
name
)
)
;
AddProp
(
ss
"
sample
"
ToString_int64_t
(
sample
)
)
;
AddProp
(
ss
"
min
"
ToString_int64_t
(
min
)
)
;
AddProp
(
ss
"
max
"
ToString_int64_t
(
max
)
)
;
AddProp
(
ss
"
bucket_count
"
ToString_uint32_t
(
bucket_count
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_UMA_Private_0_3
*
)
RealGetInterface
(
"
PPB_UMA_Private
;
0
.
3
"
)
)
-
>
HistogramCustomTimes
(
instance
name
sample
min
max
bucket_count
)
;
#
endif
}
static
void
HistogramCustomCounts_0_3
(
PP_Instance
instance
struct
PP_Var
name
int32_t
sample
int32_t
min
int32_t
max
uint32_t
bucket_count
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UMA_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
HistogramCustomCounts
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_Var
(
name
)
)
;
AddProp
(
ss
"
sample
"
ToString_int32_t
(
sample
)
)
;
AddProp
(
ss
"
min
"
ToString_int32_t
(
min
)
)
;
AddProp
(
ss
"
max
"
ToString_int32_t
(
max
)
)
;
AddProp
(
ss
"
bucket_count
"
ToString_uint32_t
(
bucket_count
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_UMA_Private_0_3
*
)
RealGetInterface
(
"
PPB_UMA_Private
;
0
.
3
"
)
)
-
>
HistogramCustomCounts
(
instance
name
sample
min
max
bucket_count
)
;
#
endif
}
static
void
HistogramEnumeration_0_3
(
PP_Instance
instance
struct
PP_Var
name
int32_t
sample
int32_t
boundary_value
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UMA_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
HistogramEnumeration
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
name
"
ToString_PP_Var
(
name
)
)
;
AddProp
(
ss
"
sample
"
ToString_int32_t
(
sample
)
)
;
AddProp
(
ss
"
boundary_value
"
ToString_int32_t
(
boundary_value
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_UMA_Private_0_3
*
)
RealGetInterface
(
"
PPB_UMA_Private
;
0
.
3
"
)
)
-
>
HistogramEnumeration
(
instance
name
sample
boundary_value
)
;
#
endif
}
static
int32_t
IsCrashReportingEnabled_0_3
(
PP_Instance
instance
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_UMA_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
3
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsCrashReportingEnabled
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_UMA_Private_0_3
*
)
RealGetInterface
(
"
PPB_UMA_Private
;
0
.
3
"
)
)
-
>
IsCrashReportingEnabled
(
instance
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_UMA_Private_0_3
_PPB_UMA_Private_0_3
=
{
ns_PPB_UMA_Private_0_3
:
:
HistogramCustomTimes_0_3
ns_PPB_UMA_Private_0_3
:
:
HistogramCustomCounts_0_3
ns_PPB_UMA_Private_0_3
:
:
HistogramEnumeration_0_3
ns_PPB_UMA_Private_0_3
:
:
IsCrashReportingEnabled_0_3
}
;
const
string
ToString_PPB_UMA_Private
(
const
PPB_UMA_Private_0_3
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VideoDestination_Private_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDestination_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoDestination_Private_0_1
*
)
RealGetInterface
(
"
PPB_VideoDestination_Private
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVideoDestination_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDestination_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVideoDestination
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VideoDestination_Private_0_1
*
)
RealGetInterface
(
"
PPB_VideoDestination_Private
;
0
.
1
"
)
)
-
>
IsVideoDestination
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Open_0_1
(
PP_Resource
destination
struct
PP_Var
stream_url
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDestination_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Open
\
"
"
)
;
AddProp
(
ss
"
destination
"
ToString_PP_Resource
(
destination
)
)
;
AddProp
(
ss
"
stream_url
"
ToString_PP_Var
(
stream_url
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoDestination_Private_0_1
*
)
RealGetInterface
(
"
PPB_VideoDestination_Private
;
0
.
1
"
)
)
-
>
Open
(
destination
stream_url
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
PutFrame_0_1
(
PP_Resource
destination
const
struct
PP_VideoFrame_Private
*
frame
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDestination_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
PutFrame
\
"
"
)
;
AddProp
(
ss
"
destination
"
ToString_PP_Resource
(
destination
)
)
;
AddProp
(
ss
"
frame
"
ToString_PP_VideoFrame_Private
(
frame
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoDestination_Private_0_1
*
)
RealGetInterface
(
"
PPB_VideoDestination_Private
;
0
.
1
"
)
)
-
>
PutFrame
(
destination
frame
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_0_1
(
PP_Resource
destination
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoDestination_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
destination
"
ToString_PP_Resource
(
destination
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoDestination_Private_0_1
*
)
RealGetInterface
(
"
PPB_VideoDestination_Private
;
0
.
1
"
)
)
-
>
Close
(
destination
)
;
#
endif
}
}
static
PPB_VideoDestination_Private_0_1
_PPB_VideoDestination_Private_0_1
=
{
ns_PPB_VideoDestination_Private_0_1
:
:
Create_0_1
ns_PPB_VideoDestination_Private_0_1
:
:
IsVideoDestination_0_1
ns_PPB_VideoDestination_Private_0_1
:
:
Open_0_1
ns_PPB_VideoDestination_Private_0_1
:
:
PutFrame_0_1
ns_PPB_VideoDestination_Private_0_1
:
:
Close_0_1
}
;
const
string
ToString_PPB_VideoDestination_Private
(
const
PPB_VideoDestination_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
namespace
ns_PPB_VideoSource_Private_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoSource_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_VideoSource_Private_0_1
*
)
RealGetInterface
(
"
PPB_VideoSource_Private
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsVideoSource_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoSource_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsVideoSource
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_VideoSource_Private_0_1
*
)
RealGetInterface
(
"
PPB_VideoSource_Private
;
0
.
1
"
)
)
-
>
IsVideoSource
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
Open_0_1
(
PP_Resource
source
struct
PP_Var
stream_url
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoSource_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Open
\
"
"
)
;
AddProp
(
ss
"
source
"
ToString_PP_Resource
(
source
)
)
;
AddProp
(
ss
"
stream_url
"
ToString_PP_Var
(
stream_url
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoSource_Private_0_1
*
)
RealGetInterface
(
"
PPB_VideoSource_Private
;
0
.
1
"
)
)
-
>
Open
(
source
stream_url
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
int32_t
GetFrame_0_1
(
PP_Resource
source
struct
PP_VideoFrame_Private
*
frame
struct
PP_CompletionCallback
callback
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoSource_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetFrame
\
"
"
)
;
AddProp
(
ss
"
source
"
ToString_PP_Resource
(
source
)
)
;
AddProp
(
ss
"
frame
"
PointerToString
(
frame
)
)
;
AddProp
(
ss
"
callback
"
ToString_PP_CompletionCallback
(
callback
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_int32_t
(
iterator
rval
)
;
iterator
.
expectObjectAndGotoFirstProperty
(
)
;
if
(
!
!
frame
)
{
iterator
.
skip
(
)
;
FromJSON_PP_VideoFrame_Private
(
iterator
*
frame
)
;
}
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_CompletionCallback
logging_callback
;
logging_callback
.
func
=
&
Logging_PP_CompletionCallback
;
logging_callback
.
user_data
=
new
PP_CompletionCallback
(
callback
)
;
logging_callback
.
flags
=
callback
.
flags
;
int32_t
rval
=
(
(
PPB_VideoSource_Private_0_1
*
)
RealGetInterface
(
"
PPB_VideoSource_Private
;
0
.
1
"
)
)
-
>
GetFrame
(
source
frame
logging_callback
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
[
"
)
;
printf
(
"
%
s
"
ToString_int32_t
(
rval
)
.
c_str
(
)
)
;
printf
(
"
"
)
;
std
:
:
stringstream
os
;
BeginProps
(
os
)
;
if
(
!
!
frame
)
{
AddProp
(
os
"
frame
"
ToString_PP_VideoFrame_Private
(
frame
)
)
;
}
EndProps
(
os
)
;
printf
(
"
%
s
]
"
os
.
str
(
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
void
Close_0_1
(
PP_Resource
source
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_VideoSource_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Close
\
"
"
)
;
AddProp
(
ss
"
source
"
ToString_PP_Resource
(
source
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
RPC
<
MainThreadOnly
>
(
ss
)
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
(
(
PPB_VideoSource_Private_0_1
*
)
RealGetInterface
(
"
PPB_VideoSource_Private
;
0
.
1
"
)
)
-
>
Close
(
source
)
;
#
endif
}
}
static
PPB_VideoSource_Private_0_1
_PPB_VideoSource_Private_0_1
=
{
ns_PPB_VideoSource_Private_0_1
:
:
Create_0_1
ns_PPB_VideoSource_Private_0_1
:
:
IsVideoSource_0_1
ns_PPB_VideoSource_Private_0_1
:
:
Open_0_1
ns_PPB_VideoSource_Private_0_1
:
:
GetFrame_0_1
ns_PPB_VideoSource_Private_0_1
:
:
Close_0_1
}
;
const
string
ToString_PPB_VideoSource_Private
(
const
PPB_VideoSource_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
const
string
ToString_PP_X509Certificate_Private_Field
(
const
PP_X509Certificate_Private_Field
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_ISSUER_COMMON_NAME
\
"
"
;
case
1
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_ISSUER_LOCALITY_NAME
\
"
"
;
case
2
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_ISSUER_STATE_OR_PROVINCE_NAME
\
"
"
;
case
3
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_ISSUER_COUNTRY_NAME
\
"
"
;
case
4
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_ISSUER_ORGANIZATION_NAME
\
"
"
;
case
5
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_ISSUER_ORGANIZATION_UNIT_NAME
\
"
"
;
case
6
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_ISSUER_UNIQUE_ID
\
"
"
;
case
7
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SUBJECT_COMMON_NAME
\
"
"
;
case
8
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SUBJECT_LOCALITY_NAME
\
"
"
;
case
9
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SUBJECT_STATE_OR_PROVINCE_NAME
\
"
"
;
case
10
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SUBJECT_COUNTRY_NAME
\
"
"
;
case
11
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SUBJECT_ORGANIZATION_NAME
\
"
"
;
case
12
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SUBJECT_ORGANIZATION_UNIT_NAME
\
"
"
;
case
13
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SUBJECT_UNIQUE_ID
\
"
"
;
case
14
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_VERSION
\
"
"
;
case
15
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SERIAL_NUMBER
\
"
"
;
case
16
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SIGNATURE_ALGORITHM_OID
\
"
"
;
case
17
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SIGNATURE_ALGORITHM_PARAMATERS_RAW
\
"
"
;
case
18
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_VALIDITY_NOT_BEFORE
\
"
"
;
case
19
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_VALIDITY_NOT_AFTER
\
"
"
;
case
20
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SUBJECT_PUBLIC_KEY_ALGORITHM_OID
\
"
"
;
case
21
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SUBJECT_PUBLIC_KEY
\
"
"
;
case
22
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_RAW
\
"
"
;
case
23
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_ISSUER_DISTINGUISHED_NAME
\
"
"
;
case
24
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_SUBJECT_DISTINGUISHED_NAME
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_X509Certificate_Private_Field
(
const
PP_X509Certificate_Private_Field
&
v
)
{
return
ToString_PP_X509Certificate_Private_Field
(
&
v
)
;
}
void
FromJSON_PP_X509Certificate_Private_Field
(
JSONIterator
&
iterator
PP_X509Certificate_Private_Field
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_X509Certificate_Private_Field
(
v
)
;
}
const
string
ToString_PPB_X509Certificate_Private_Version
(
const
PPB_X509Certificate_Private_Version
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_V1
\
"
"
;
case
1
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_V2
\
"
"
;
case
2
:
return
"
\
"
PP_X509CERTIFICATE_PRIVATE_V3
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PPB_X509Certificate_Private_Version
(
const
PPB_X509Certificate_Private_Version
&
v
)
{
return
ToString_PPB_X509Certificate_Private_Version
(
&
v
)
;
}
void
FromJSON_PPB_X509Certificate_Private_Version
(
JSONIterator
&
iterator
PPB_X509Certificate_Private_Version
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PPB_X509Certificate_Private_Version
(
v
)
;
}
namespace
ns_PPB_X509Certificate_Private_0_1
{
static
PP_Resource
Create_0_1
(
PP_Instance
instance
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_X509Certificate_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Create
\
"
"
)
;
AddProp
(
ss
"
instance
"
ToString_PP_Instance
(
instance
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
int32_t
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Resource
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
int32_t
rval
=
(
(
PPB_X509Certificate_Private_0_1
*
)
RealGetInterface
(
"
PPB_X509Certificate_Private
;
0
.
1
"
)
)
-
>
Create
(
instance
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Resource
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
IsX509CertificatePrivate_0_1
(
PP_Resource
resource
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_X509Certificate_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
IsX509CertificatePrivate
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_X509Certificate_Private_0_1
*
)
RealGetInterface
(
"
PPB_X509Certificate_Private
;
0
.
1
"
)
)
-
>
IsX509CertificatePrivate
(
resource
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
PP_Bool
Initialize_0_1
(
PP_Resource
resource
const
char
*
bytes
uint32_t
length
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_X509Certificate_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
Initialize
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
bytes
"
ToString_str_t
(
bytes
)
)
;
AddProp
(
ss
"
length
"
ToString_uint32_t
(
length
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
PP_Bool
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Bool
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
PP_Bool
rval
=
(
(
PPB_X509Certificate_Private_0_1
*
)
RealGetInterface
(
"
PPB_X509Certificate_Private
;
0
.
1
"
)
)
-
>
Initialize
(
resource
bytes
length
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
static
struct
PP_Var
GetField_0_1
(
PP_Resource
resource
PP_X509Certificate_Private_Field
field
)
{
stringstream
ss
;
BeginProps
(
ss
)
;
AddProp
(
ss
"
__interface
"
"
\
"
PPB_X509Certificate_Private
\
"
"
)
;
AddProp
(
ss
"
__version
"
"
\
"
0
.
1
\
"
"
)
;
AddProp
(
ss
"
__method
"
"
\
"
GetField
\
"
"
)
;
AddProp
(
ss
"
resource
"
ToString_PP_Resource
(
resource
)
)
;
AddProp
(
ss
"
field
"
ToString_PP_X509Certificate_Private_Field
(
field
)
)
;
EndProps
(
ss
)
;
#
ifndef
INTERPOSE
string
json
=
RPCWithResult
<
MainThreadOnly
>
(
ss
)
;
struct
PP_Var
rval
;
JSONIterator
iterator
(
json
)
;
iterator
.
expectArrayAndGotoFirstItem
(
)
;
FromJSON_PP_Var
(
iterator
rval
)
;
return
rval
;
#
else
printf
(
"
%
s
\
n
"
ss
.
str
(
)
.
c_str
(
)
)
;
struct
PP_Var
rval
=
(
(
PPB_X509Certificate_Private_0_1
*
)
RealGetInterface
(
"
PPB_X509Certificate_Private
;
0
.
1
"
)
)
-
>
GetField
(
resource
field
)
;
printf
(
"
RPC
response
:
[
"
)
;
printf
(
"
%
s
"
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
printf
(
"
]
\
n
"
)
;
return
rval
;
#
endif
}
}
static
PPB_X509Certificate_Private_0_1
_PPB_X509Certificate_Private_0_1
=
{
ns_PPB_X509Certificate_Private_0_1
:
:
Create_0_1
ns_PPB_X509Certificate_Private_0_1
:
:
IsX509CertificatePrivate_0_1
ns_PPB_X509Certificate_Private_0_1
:
:
Initialize_0_1
ns_PPB_X509Certificate_Private_0_1
:
:
GetField_0_1
}
;
const
string
ToString_PPB_X509Certificate_Private
(
const
PPB_X509Certificate_Private_0_1
*
v
)
{
stringstream
s
;
s
<
<
v
;
return
s
.
str
(
)
;
}
char
*
Call_PPP_ContentDecryptor_Private_Initialize
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
uint32_t
promise_id
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
promise_id
)
;
struct
PP_Var
key_system
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
key_system
)
;
PP_Bool
allow_distinctive_identifier
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
allow_distinctive_identifier
)
;
PP_Bool
allow_persistent_state
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
allow_persistent_state
)
;
_interface
-
>
Initialize
(
(
PP_Instance
)
instance
(
uint32_t
)
promise_id
(
struct
PP_Var
)
key_system
(
PP_Bool
)
allow_distinctive_identifier
(
PP_Bool
)
allow_persistent_state
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private_SetServerCertificate
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
uint32_t
promise_id
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
promise_id
)
;
struct
PP_Var
server_certificate
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
server_certificate
)
;
_interface
-
>
SetServerCertificate
(
(
PP_Instance
)
instance
(
uint32_t
)
promise_id
(
struct
PP_Var
)
server_certificate
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private_CreateSessionAndGenerateRequest
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
uint32_t
promise_id
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
promise_id
)
;
PP_SessionType
session_type
;
iterator
.
skip
(
)
;
FromJSON_PP_SessionType
(
iterator
session_type
)
;
PP_InitDataType
init_data_type
;
iterator
.
skip
(
)
;
FromJSON_PP_InitDataType
(
iterator
init_data_type
)
;
struct
PP_Var
init_data
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
init_data
)
;
_interface
-
>
CreateSessionAndGenerateRequest
(
(
PP_Instance
)
instance
(
uint32_t
)
promise_id
(
PP_SessionType
)
session_type
(
PP_InitDataType
)
init_data_type
(
struct
PP_Var
)
init_data
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private_LoadSession
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
uint32_t
promise_id
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
promise_id
)
;
PP_SessionType
session_type
;
iterator
.
skip
(
)
;
FromJSON_PP_SessionType
(
iterator
session_type
)
;
struct
PP_Var
session_id
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
session_id
)
;
_interface
-
>
LoadSession
(
(
PP_Instance
)
instance
(
uint32_t
)
promise_id
(
PP_SessionType
)
session_type
(
struct
PP_Var
)
session_id
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private_UpdateSession
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
uint32_t
promise_id
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
promise_id
)
;
struct
PP_Var
session_id
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
session_id
)
;
struct
PP_Var
response
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
response
)
;
_interface
-
>
UpdateSession
(
(
PP_Instance
)
instance
(
uint32_t
)
promise_id
(
struct
PP_Var
)
session_id
(
struct
PP_Var
)
response
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private_CloseSession
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
uint32_t
promise_id
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
promise_id
)
;
struct
PP_Var
session_id
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
session_id
)
;
_interface
-
>
CloseSession
(
(
PP_Instance
)
instance
(
uint32_t
)
promise_id
(
struct
PP_Var
)
session_id
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private_RemoveSession
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
uint32_t
promise_id
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
promise_id
)
;
struct
PP_Var
session_id
;
iterator
.
skip
(
)
;
FromJSON_PP_Var
(
iterator
session_id
)
;
_interface
-
>
RemoveSession
(
(
PP_Instance
)
instance
(
uint32_t
)
promise_id
(
struct
PP_Var
)
session_id
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private_Decrypt
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Resource
encrypted_block
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
encrypted_block
)
;
struct
PP_EncryptedBlockInfo
encrypted_block_info
;
iterator
.
skip
(
)
;
FromJSON_PP_EncryptedBlockInfo
(
iterator
encrypted_block_info
)
;
_interface
-
>
Decrypt
(
(
PP_Instance
)
instance
(
PP_Resource
)
encrypted_block
(
const
struct
PP_EncryptedBlockInfo
*
)
&
encrypted_block_info
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private_InitializeAudioDecoder
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
struct
PP_AudioDecoderConfig
decoder_config
;
iterator
.
skip
(
)
;
FromJSON_PP_AudioDecoderConfig
(
iterator
decoder_config
)
;
PP_Resource
codec_extra_data
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
codec_extra_data
)
;
_interface
-
>
InitializeAudioDecoder
(
(
PP_Instance
)
instance
(
const
struct
PP_AudioDecoderConfig
*
)
&
decoder_config
(
PP_Resource
)
codec_extra_data
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private_InitializeVideoDecoder
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
struct
PP_VideoDecoderConfig
decoder_config
;
iterator
.
skip
(
)
;
FromJSON_PP_VideoDecoderConfig
(
iterator
decoder_config
)
;
PP_Resource
codec_extra_data
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
codec_extra_data
)
;
_interface
-
>
InitializeVideoDecoder
(
(
PP_Instance
)
instance
(
const
struct
PP_VideoDecoderConfig
*
)
&
decoder_config
(
PP_Resource
)
codec_extra_data
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private_DeinitializeDecoder
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_DecryptorStreamType
decoder_type
;
iterator
.
skip
(
)
;
FromJSON_PP_DecryptorStreamType
(
iterator
decoder_type
)
;
uint32_t
request_id
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
request_id
)
;
_interface
-
>
DeinitializeDecoder
(
(
PP_Instance
)
instance
(
PP_DecryptorStreamType
)
decoder_type
(
uint32_t
)
request_id
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private_ResetDecoder
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_DecryptorStreamType
decoder_type
;
iterator
.
skip
(
)
;
FromJSON_PP_DecryptorStreamType
(
iterator
decoder_type
)
;
uint32_t
request_id
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
request_id
)
;
_interface
-
>
ResetDecoder
(
(
PP_Instance
)
instance
(
PP_DecryptorStreamType
)
decoder_type
(
uint32_t
)
request_id
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private_DecryptAndDecode
(
const
PPP_ContentDecryptor_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_DecryptorStreamType
decoder_type
;
iterator
.
skip
(
)
;
FromJSON_PP_DecryptorStreamType
(
iterator
decoder_type
)
;
PP_Resource
encrypted_buffer
;
iterator
.
skip
(
)
;
FromJSON_PP_Resource
(
iterator
encrypted_buffer
)
;
struct
PP_EncryptedBlockInfo
encrypted_block_info
;
iterator
.
skip
(
)
;
FromJSON_PP_EncryptedBlockInfo
(
iterator
encrypted_block_info
)
;
_interface
-
>
DecryptAndDecode
(
(
PP_Instance
)
instance
(
PP_DecryptorStreamType
)
decoder_type
(
PP_Resource
)
encrypted_buffer
(
const
struct
PP_EncryptedBlockInfo
*
)
&
encrypted_block_info
)
;
return
nullptr
;
}
char
*
Call_PPP_ContentDecryptor_Private
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
Initialize
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_Initialize
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
SetServerCertificate
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_SetServerCertificate
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
CreateSessionAndGenerateRequest
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_CreateSessionAndGenerateRequest
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
LoadSession
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_LoadSession
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
UpdateSession
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_UpdateSession
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
CloseSession
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_CloseSession
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
RemoveSession
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_RemoveSession
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
Decrypt
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_Decrypt
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
InitializeAudioDecoder
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_InitializeAudioDecoder
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
InitializeVideoDecoder
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_InitializeVideoDecoder
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DeinitializeDecoder
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_DeinitializeDecoder
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
ResetDecoder
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_ResetDecoder
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DecryptAndDecode
"
)
)
{
return
Call_PPP_ContentDecryptor_Private_DecryptAndDecode
(
(
const
PPP_ContentDecryptor_Private
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_Find_Private_StartFind
(
const
PPP_Find_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
char
*
text
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
text
)
;
PP_Bool
case_sensitive
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
case_sensitive
)
;
PP_Bool
rval
;
rval
=
_interface
-
>
StartFind
(
(
PP_Instance
)
instance
(
const
char
*
)
text
(
PP_Bool
)
case_sensitive
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Find_Private_SelectFindResult
(
const
PPP_Find_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
PP_Bool
forward
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
forward
)
;
_interface
-
>
SelectFindResult
(
(
PP_Instance
)
instance
(
PP_Bool
)
forward
)
;
return
nullptr
;
}
char
*
Call_PPP_Find_Private_StopFind
(
const
PPP_Find_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
_interface
-
>
StopFind
(
(
PP_Instance
)
instance
)
;
return
nullptr
;
}
char
*
Call_PPP_Find_Private
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
StartFind
"
)
)
{
return
Call_PPP_Find_Private_StartFind
(
(
const
PPP_Find_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
SelectFindResult
"
)
)
{
return
Call_PPP_Find_Private_SelectFindResult
(
(
const
PPP_Find_Private
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
StopFind
"
)
)
{
return
Call_PPP_Find_Private_StopFind
(
(
const
PPP_Find_Private
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
const
string
ToString_PP_Flash_BrowserOperations_SettingType
(
const
PP_Flash_BrowserOperations_SettingType
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_FLASH_BROWSEROPERATIONS_SETTINGTYPE_CAMERAMIC
\
"
"
;
case
1
:
return
"
\
"
PP_FLASH_BROWSEROPERATIONS_SETTINGTYPE_PEERNETWORKING
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_Flash_BrowserOperations_SettingType
(
const
PP_Flash_BrowserOperations_SettingType
&
v
)
{
return
ToString_PP_Flash_BrowserOperations_SettingType
(
&
v
)
;
}
void
FromJSON_PP_Flash_BrowserOperations_SettingType
(
JSONIterator
&
iterator
PP_Flash_BrowserOperations_SettingType
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_Flash_BrowserOperations_SettingType
(
v
)
;
}
const
string
ToString_PP_Flash_BrowserOperations_Permission
(
const
PP_Flash_BrowserOperations_Permission
*
v
)
{
switch
(
*
v
)
{
case
0
:
return
"
\
"
PP_FLASH_BROWSEROPERATIONS_PERMISSION_DEFAULT
\
"
"
;
case
1
:
return
"
\
"
PP_FLASH_BROWSEROPERATIONS_PERMISSION_ALLOW
\
"
"
;
case
2
:
return
"
\
"
PP_FLASH_BROWSEROPERATIONS_PERMISSION_BLOCK
\
"
"
;
case
3
:
return
"
\
"
PP_FLASH_BROWSEROPERATIONS_PERMISSION_ASK
\
"
"
;
default
:
return
"
\
"
?
?
?
\
"
"
;
}
}
const
string
ToString_PP_Flash_BrowserOperations_Permission
(
const
PP_Flash_BrowserOperations_Permission
&
v
)
{
return
ToString_PP_Flash_BrowserOperations_Permission
(
&
v
)
;
}
void
FromJSON_PP_Flash_BrowserOperations_Permission
(
JSONIterator
&
iterator
PP_Flash_BrowserOperations_Permission
&
value
)
{
long
int
v
;
FromJSON_int
(
iterator
v
)
;
value
=
PP_Flash_BrowserOperations_Permission
(
v
)
;
}
const
string
ToString_PP_Flash_BrowserOperations_SiteSetting
(
const
PP_Flash_BrowserOperations_SiteSetting
*
v
)
{
if
(
!
v
)
{
return
"
null
"
;
}
return
ToString_PP_Flash_BrowserOperations_SiteSetting
(
*
v
)
;
}
const
string
ToString_PP_Flash_BrowserOperations_SiteSetting
(
const
PP_Flash_BrowserOperations_SiteSetting
&
v
)
{
stringstream
x
;
BeginProps
(
x
)
;
AddProp
(
x
"
site
"
ToString_cstr_t
(
v
.
site
)
)
;
AddProp
(
x
"
permission
"
ToString_PP_Flash_BrowserOperations_Permission
(
v
.
permission
)
)
;
EndProps
(
x
)
;
return
x
.
str
(
)
;
}
void
FromJSON_PP_Flash_BrowserOperations_SiteSetting
(
JSONIterator
&
iterator
PP_Flash_BrowserOperations_SiteSetting
&
value
)
{
const
JSON
:
:
Token
&
current
=
iterator
.
getCurrentAndGotoNext
(
)
;
if
(
current
.
isPrimitive
(
)
&
&
!
current
.
value
(
)
.
compare
(
"
null
"
)
)
{
return
;
}
if
(
!
current
.
isObject
(
)
)
{
Fail
(
"
Expected
object
!
"
"
"
)
;
}
iterator
.
skip
(
)
;
FromJSON_cstr_t
(
iterator
value
.
site
)
;
iterator
.
skip
(
)
;
FromJSON_PP_Flash_BrowserOperations_Permission
(
iterator
value
.
permission
)
;
}
const
string
ToString_PPB_Flash_BrowserOperations_GetSettingsCallback
(
const
PPB_Flash_BrowserOperations_GetSettingsCallback
&
v
)
{
return
PointerToString
(
v
)
;
}
void
FromJSON_PPB_Flash_BrowserOperations_GetSettingsCallback
(
JSONIterator
&
iterator
PPB_Flash_BrowserOperations_GetSettingsCallback
&
value
)
{
PointerValueFromJSON
(
iterator
value
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_ClearSiteData
(
const
PPP_Flash_BrowserOperations_1_0
*
_interface
JSONIterator
&
iterator
)
{
char
*
plugin_data_path
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
plugin_data_path
)
;
char
*
site
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
site
)
;
uint64_t
flags
;
iterator
.
skip
(
)
;
FromJSON_uint64_t
(
iterator
flags
)
;
uint64_t
max_age
;
iterator
.
skip
(
)
;
FromJSON_uint64_t
(
iterator
max_age
)
;
PP_Bool
rval
;
rval
=
_interface
-
>
ClearSiteData
(
(
const
char
*
)
plugin_data_path
(
const
char
*
)
site
(
uint64_t
)
flags
(
uint64_t
)
max_age
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_1_0
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
ClearSiteData
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_ClearSiteData
(
(
const
PPP_Flash_BrowserOperations_1_0
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_Flash_BrowserOperations_ClearSiteData
(
const
PPP_Flash_BrowserOperations_1_2
*
_interface
JSONIterator
&
iterator
)
{
char
*
plugin_data_path
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
plugin_data_path
)
;
char
*
site
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
site
)
;
uint64_t
flags
;
iterator
.
skip
(
)
;
FromJSON_uint64_t
(
iterator
flags
)
;
uint64_t
max_age
;
iterator
.
skip
(
)
;
FromJSON_uint64_t
(
iterator
max_age
)
;
PP_Bool
rval
;
rval
=
_interface
-
>
ClearSiteData
(
(
const
char
*
)
plugin_data_path
(
const
char
*
)
site
(
uint64_t
)
flags
(
uint64_t
)
max_age
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_DeauthorizeContentLicenses
(
const
PPP_Flash_BrowserOperations_1_2
*
_interface
JSONIterator
&
iterator
)
{
char
*
plugin_data_path
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
plugin_data_path
)
;
PP_Bool
rval
;
rval
=
_interface
-
>
DeauthorizeContentLicenses
(
(
const
char
*
)
plugin_data_path
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_GetPermissionSettings
(
const
PPP_Flash_BrowserOperations_1_2
*
_interface
JSONIterator
&
iterator
)
{
char
*
plugin_data_path
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
plugin_data_path
)
;
PP_Flash_BrowserOperations_SettingType
setting_type
;
iterator
.
skip
(
)
;
FromJSON_PP_Flash_BrowserOperations_SettingType
(
iterator
setting_type
)
;
PPB_Flash_BrowserOperations_GetSettingsCallback
callback
;
iterator
.
skip
(
)
;
FromJSON_PPB_Flash_BrowserOperations_GetSettingsCallback
(
iterator
callback
)
;
void
*
user_data
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
user_data
)
;
_interface
-
>
GetPermissionSettings
(
(
const
char
*
)
plugin_data_path
(
PP_Flash_BrowserOperations_SettingType
)
setting_type
(
PPB_Flash_BrowserOperations_GetSettingsCallback
)
callback
(
void
*
)
user_data
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_SetDefaultPermission
(
const
PPP_Flash_BrowserOperations_1_2
*
_interface
JSONIterator
&
iterator
)
{
char
*
plugin_data_path
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
plugin_data_path
)
;
PP_Flash_BrowserOperations_SettingType
setting_type
;
iterator
.
skip
(
)
;
FromJSON_PP_Flash_BrowserOperations_SettingType
(
iterator
setting_type
)
;
PP_Flash_BrowserOperations_Permission
permission
;
iterator
.
skip
(
)
;
FromJSON_PP_Flash_BrowserOperations_Permission
(
iterator
permission
)
;
PP_Bool
clear_site_specific
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
clear_site_specific
)
;
PP_Bool
rval
;
rval
=
_interface
-
>
SetDefaultPermission
(
(
const
char
*
)
plugin_data_path
(
PP_Flash_BrowserOperations_SettingType
)
setting_type
(
PP_Flash_BrowserOperations_Permission
)
permission
(
PP_Bool
)
clear_site_specific
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_SetSitePermission
(
const
PPP_Flash_BrowserOperations_1_2
*
_interface
JSONIterator
&
iterator
)
{
char
*
plugin_data_path
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
plugin_data_path
)
;
PP_Flash_BrowserOperations_SettingType
setting_type
;
iterator
.
skip
(
)
;
FromJSON_PP_Flash_BrowserOperations_SettingType
(
iterator
setting_type
)
;
uint32_t
site_count
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
site_count
)
;
struct
PP_Flash_BrowserOperations_SiteSetting
*
sites
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
site_count
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
sites
=
new
struct
PP_Flash_BrowserOperations_SiteSetting
[
site_count
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_PP_Flash_BrowserOperations_SiteSetting
(
iterator
(
sites
)
[
_n
]
)
;
}
}
PP_Bool
rval
;
rval
=
_interface
-
>
SetSitePermission
(
(
const
char
*
)
plugin_data_path
(
PP_Flash_BrowserOperations_SettingType
)
setting_type
(
uint32_t
)
site_count
(
const
struct
PP_Flash_BrowserOperations_SiteSetting
*
)
sites
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_1_2
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
ClearSiteData
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_ClearSiteData
(
(
const
PPP_Flash_BrowserOperations_1_2
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DeauthorizeContentLicenses
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_DeauthorizeContentLicenses
(
(
const
PPP_Flash_BrowserOperations_1_2
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
GetPermissionSettings
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_GetPermissionSettings
(
(
const
PPP_Flash_BrowserOperations_1_2
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
SetDefaultPermission
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_SetDefaultPermission
(
(
const
PPP_Flash_BrowserOperations_1_2
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
SetSitePermission
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_SetSitePermission
(
(
const
PPP_Flash_BrowserOperations_1_2
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_Flash_BrowserOperations_ClearSiteData
(
const
PPP_Flash_BrowserOperations
*
_interface
JSONIterator
&
iterator
)
{
char
*
plugin_data_path
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
plugin_data_path
)
;
char
*
site
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
site
)
;
uint64_t
flags
;
iterator
.
skip
(
)
;
FromJSON_uint64_t
(
iterator
flags
)
;
uint64_t
max_age
;
iterator
.
skip
(
)
;
FromJSON_uint64_t
(
iterator
max_age
)
;
PP_Bool
rval
;
rval
=
_interface
-
>
ClearSiteData
(
(
const
char
*
)
plugin_data_path
(
const
char
*
)
site
(
uint64_t
)
flags
(
uint64_t
)
max_age
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_DeauthorizeContentLicenses
(
const
PPP_Flash_BrowserOperations
*
_interface
JSONIterator
&
iterator
)
{
char
*
plugin_data_path
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
plugin_data_path
)
;
PP_Bool
rval
;
rval
=
_interface
-
>
DeauthorizeContentLicenses
(
(
const
char
*
)
plugin_data_path
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_GetPermissionSettings
(
const
PPP_Flash_BrowserOperations
*
_interface
JSONIterator
&
iterator
)
{
char
*
plugin_data_path
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
plugin_data_path
)
;
PP_Flash_BrowserOperations_SettingType
setting_type
;
iterator
.
skip
(
)
;
FromJSON_PP_Flash_BrowserOperations_SettingType
(
iterator
setting_type
)
;
PPB_Flash_BrowserOperations_GetSettingsCallback
callback
;
iterator
.
skip
(
)
;
FromJSON_PPB_Flash_BrowserOperations_GetSettingsCallback
(
iterator
callback
)
;
void
*
user_data
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
user_data
)
;
_interface
-
>
GetPermissionSettings
(
(
const
char
*
)
plugin_data_path
(
PP_Flash_BrowserOperations_SettingType
)
setting_type
(
PPB_Flash_BrowserOperations_GetSettingsCallback
)
callback
(
void
*
)
user_data
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_SetDefaultPermission
(
const
PPP_Flash_BrowserOperations
*
_interface
JSONIterator
&
iterator
)
{
char
*
plugin_data_path
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
plugin_data_path
)
;
PP_Flash_BrowserOperations_SettingType
setting_type
;
iterator
.
skip
(
)
;
FromJSON_PP_Flash_BrowserOperations_SettingType
(
iterator
setting_type
)
;
PP_Flash_BrowserOperations_Permission
permission
;
iterator
.
skip
(
)
;
FromJSON_PP_Flash_BrowserOperations_Permission
(
iterator
permission
)
;
PP_Bool
clear_site_specific
;
iterator
.
skip
(
)
;
FromJSON_PP_Bool
(
iterator
clear_site_specific
)
;
PP_Bool
rval
;
rval
=
_interface
-
>
SetDefaultPermission
(
(
const
char
*
)
plugin_data_path
(
PP_Flash_BrowserOperations_SettingType
)
setting_type
(
PP_Flash_BrowserOperations_Permission
)
permission
(
PP_Bool
)
clear_site_specific
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_SetSitePermission
(
const
PPP_Flash_BrowserOperations
*
_interface
JSONIterator
&
iterator
)
{
char
*
plugin_data_path
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
plugin_data_path
)
;
PP_Flash_BrowserOperations_SettingType
setting_type
;
iterator
.
skip
(
)
;
FromJSON_PP_Flash_BrowserOperations_SettingType
(
iterator
setting_type
)
;
uint32_t
site_count
;
iterator
.
skip
(
)
;
FromJSON_uint32_t
(
iterator
site_count
)
;
struct
PP_Flash_BrowserOperations_SiteSetting
*
sites
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
if
(
children
>
site_count
)
{
Fail
(
"
Too
many
items
in
array
\
n
"
"
"
)
;
}
sites
=
new
struct
PP_Flash_BrowserOperations_SiteSetting
[
site_count
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_PP_Flash_BrowserOperations_SiteSetting
(
iterator
(
sites
)
[
_n
]
)
;
}
}
PP_Bool
rval
;
rval
=
_interface
-
>
SetSitePermission
(
(
const
char
*
)
plugin_data_path
(
PP_Flash_BrowserOperations_SettingType
)
setting_type
(
uint32_t
)
site_count
(
const
struct
PP_Flash_BrowserOperations_SiteSetting
*
)
sites
)
;
return
strdup
(
ToString_PP_Bool
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_GetSitesWithData
(
const
PPP_Flash_BrowserOperations
*
_interface
JSONIterator
&
iterator
)
{
char
*
plugin_data_path
;
iterator
.
skip
(
)
;
FromJSON_str_t
(
iterator
plugin_data_path
)
;
char
*
*
sites
;
iterator
.
skip
(
)
;
PointerValueFromJSON
(
iterator
sites
)
;
_interface
-
>
GetSitesWithData
(
(
const
char
*
)
plugin_data_path
(
char
*
*
*
)
&
sites
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
{
BeginProp
(
os
"
sites
"
)
;
BeginElements
(
os
)
;
for
(
uint32_t
_n
=
0
;
sites
[
_n
]
!
=
0
;
+
+
_n
)
{
AddElement
(
os
ToString_str_t
(
sites
[
_n
]
)
)
;
}
EndElements
(
os
)
;
}
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations_FreeSiteList
(
const
PPP_Flash_BrowserOperations
*
_interface
JSONIterator
&
iterator
)
{
char
*
*
sites
;
iterator
.
skip
(
)
;
{
size_t
children
=
iterator
.
expectArrayAndGotoFirstItem
(
)
;
sites
=
new
char
*
[
children
]
;
for
(
uint32_t
_n
=
0
;
_n
<
children
;
+
+
_n
)
{
FromJSON_str_t
(
iterator
(
sites
)
[
_n
]
)
;
}
}
_interface
-
>
FreeSiteList
(
(
char
*
*
)
sites
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
{
BeginProp
(
os
"
sites
"
)
;
BeginElements
(
os
)
;
for
(
uint32_t
_n
=
0
;
sites
[
_n
]
!
=
0
;
+
+
_n
)
{
AddElement
(
os
ToString_str_t
(
sites
[
_n
]
)
)
;
}
EndElements
(
os
)
;
}
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Flash_BrowserOperations
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
ClearSiteData
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_ClearSiteData
(
(
const
PPP_Flash_BrowserOperations
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DeauthorizeContentLicenses
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_DeauthorizeContentLicenses
(
(
const
PPP_Flash_BrowserOperations
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
GetPermissionSettings
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_GetPermissionSettings
(
(
const
PPP_Flash_BrowserOperations
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
SetDefaultPermission
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_SetDefaultPermission
(
(
const
PPP_Flash_BrowserOperations
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
SetSitePermission
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_SetSitePermission
(
(
const
PPP_Flash_BrowserOperations
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
GetSitesWithData
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_GetSitesWithData
(
(
const
PPP_Flash_BrowserOperations
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
FreeSiteList
"
)
)
{
return
Call_PPP_Flash_BrowserOperations_FreeSiteList
(
(
const
PPP_Flash_BrowserOperations
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_Instance_Private_GetInstanceObject
(
const
PPP_Instance_Private
*
_interface
JSONIterator
&
iterator
)
{
PP_Instance
instance
;
iterator
.
skip
(
)
;
FromJSON_PP_Instance
(
iterator
instance
)
;
struct
PP_Var
rval
;
rval
=
_interface
-
>
GetInstanceObject
(
(
PP_Instance
)
instance
)
;
return
strdup
(
ToString_PP_Var
(
rval
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_Instance_Private
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
GetInstanceObject
"
)
)
{
return
Call_PPP_Instance_Private_GetInstanceObject
(
(
const
PPP_Instance_Private
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
char
*
Call_PPP_PexeStreamHandler_DidCacheHit
(
const
PPP_PexeStreamHandler
*
_interface
JSONIterator
&
iterator
)
{
void
*
user_data
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
user_data
)
;
PP_FileHandle
nexe_file_handle
;
iterator
.
skip
(
)
;
FromJSON_PP_FileHandle
(
iterator
nexe_file_handle
)
;
_interface
-
>
DidCacheHit
(
(
void
*
)
user_data
(
PP_FileHandle
)
nexe_file_handle
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_PexeStreamHandler_DidCacheMiss
(
const
PPP_PexeStreamHandler
*
_interface
JSONIterator
&
iterator
)
{
void
*
user_data
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
user_data
)
;
int64_t
expected_total_length
;
iterator
.
skip
(
)
;
FromJSON_int64_t
(
iterator
expected_total_length
)
;
PP_FileHandle
temp_nexe_file
;
iterator
.
skip
(
)
;
FromJSON_PP_FileHandle
(
iterator
temp_nexe_file
)
;
_interface
-
>
DidCacheMiss
(
(
void
*
)
user_data
(
int64_t
)
expected_total_length
(
PP_FileHandle
)
temp_nexe_file
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_PexeStreamHandler_DidStreamData
(
const
PPP_PexeStreamHandler
*
_interface
JSONIterator
&
iterator
)
{
void
*
user_data
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
user_data
)
;
void
*
data
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
data
)
;
int32_t
length
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
length
)
;
_interface
-
>
DidStreamData
(
(
void
*
)
user_data
(
const
void
*
)
data
(
int32_t
)
length
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_PexeStreamHandler_DidFinishStream
(
const
PPP_PexeStreamHandler
*
_interface
JSONIterator
&
iterator
)
{
void
*
user_data
;
iterator
.
skip
(
)
;
FromJSON_mem_t
(
iterator
user_data
)
;
int32_t
pp_error
;
iterator
.
skip
(
)
;
FromJSON_int32_t
(
iterator
pp_error
)
;
_interface
-
>
DidFinishStream
(
(
void
*
)
user_data
(
int32_t
)
pp_error
)
;
stringstream
os
;
BeginElements
(
os
)
;
BeginProps
(
os
)
;
AddProp
(
os
"
user_data
"
ToString_mem_t
(
user_data
)
)
;
EndProps
(
os
)
;
EndElements
(
os
)
;
return
strdup
(
os
.
str
(
)
.
c_str
(
)
)
;
}
char
*
Call_PPP_PexeStreamHandler
(
const
void
*
_interface
JSONIterator
&
iterator
)
{
iterator
.
skip
(
)
;
const
Token
&
member
=
iterator
.
getCurrentStringAndGotoNext
(
)
;
string
memberName
=
member
.
value
(
)
;
if
(
!
memberName
.
compare
(
"
DidCacheHit
"
)
)
{
return
Call_PPP_PexeStreamHandler_DidCacheHit
(
(
const
PPP_PexeStreamHandler
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DidCacheMiss
"
)
)
{
return
Call_PPP_PexeStreamHandler_DidCacheMiss
(
(
const
PPP_PexeStreamHandler
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DidStreamData
"
)
)
{
return
Call_PPP_PexeStreamHandler_DidStreamData
(
(
const
PPP_PexeStreamHandler
*
)
_interface
iterator
)
;
}
if
(
!
memberName
.
compare
(
"
DidFinishStream
"
)
)
{
return
Call_PPP_PexeStreamHandler_DidFinishStream
(
(
const
PPP_PexeStreamHandler
*
)
_interface
iterator
)
;
}
return
nullptr
;
}
static
map
<
string
void
*
>
gInterfaces
;
typedef
char
*
(
*
InterfaceMemberCallFunc
)
(
const
void
*
JSONIterator
&
)
;
static
map
<
string
InterfaceMemberCallFunc
>
gInterfaceMemberCallers
;
void
InitializeInterfaceList
(
)
{
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Audio
;
1
.
0
"
&
_PPB_Audio_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Audio
;
1
.
1
"
&
_PPB_Audio_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_AudioBuffer
;
0
.
1
"
&
_PPB_AudioBuffer_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_AudioConfig
;
1
.
0
"
&
_PPB_AudioConfig_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_AudioConfig
;
1
.
1
"
&
_PPB_AudioConfig_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_AudioEncoder
;
0
.
1
"
&
_PPB_AudioEncoder_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Compositor
;
0
.
1
"
&
_PPB_Compositor_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_CompositorLayer
;
0
.
1
"
&
_PPB_CompositorLayer_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_CompositorLayer
;
0
.
2
"
&
_PPB_CompositorLayer_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Console
;
1
.
0
"
&
_PPB_Console_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Core
;
1
.
0
"
&
_PPB_Core_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FileIO
;
1
.
0
"
&
_PPB_FileIO_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FileIO
;
1
.
1
"
&
_PPB_FileIO_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FileRef
;
1
.
0
"
&
_PPB_FileRef_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FileRef
;
1
.
1
"
&
_PPB_FileRef_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FileRef
;
1
.
2
"
&
_PPB_FileRef_1_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FileSystem
;
1
.
0
"
&
_PPB_FileSystem_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Fullscreen
;
1
.
0
"
&
_PPB_Fullscreen_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Gamepad
;
1
.
0
"
&
_PPB_Gamepad_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Graphics2D
;
1
.
0
"
&
_PPB_Graphics2D_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Graphics2D
;
1
.
1
"
&
_PPB_Graphics2D_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Graphics2D
;
1
.
2
"
&
_PPB_Graphics2D_1_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Graphics3D
;
1
.
0
"
&
_PPB_Graphics3D_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_HostResolver
;
1
.
0
"
&
_PPB_HostResolver_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_ImageData
;
1
.
0
"
&
_PPB_ImageData_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_InputEvent
;
1
.
0
"
&
_PPB_InputEvent_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_MouseInputEvent
;
1
.
0
"
&
_PPB_MouseInputEvent_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_MouseInputEvent
;
1
.
1
"
&
_PPB_MouseInputEvent_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_WheelInputEvent
;
1
.
0
"
&
_PPB_WheelInputEvent_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_KeyboardInputEvent
;
1
.
0
"
&
_PPB_KeyboardInputEvent_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_KeyboardInputEvent
;
1
.
2
"
&
_PPB_KeyboardInputEvent_1_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TouchInputEvent
;
1
.
0
"
&
_PPB_TouchInputEvent_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_IMEInputEvent
;
1
.
0
"
&
_PPB_IMEInputEvent_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Instance
;
1
.
0
"
&
_PPB_Instance_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_MediaStreamAudioTrack
;
0
.
1
"
&
_PPB_MediaStreamAudioTrack_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_MediaStreamVideoTrack
;
0
.
1
"
&
_PPB_MediaStreamVideoTrack_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_MediaStreamVideoTrack
;
1
.
0
"
&
_PPB_MediaStreamVideoTrack_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_MessageLoop
;
1
.
0
"
&
_PPB_MessageLoop_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Messaging
;
1
.
0
"
&
_PPB_Messaging_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Messaging
;
1
.
2
"
&
_PPB_Messaging_1_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_MouseCursor
;
1
.
0
"
&
_PPB_MouseCursor_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_MouseLock
;
1
.
0
"
&
_PPB_MouseLock_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_NetAddress
;
1
.
0
"
&
_PPB_NetAddress_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_NetworkList
;
1
.
0
"
&
_PPB_NetworkList_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_NetworkMonitor
;
1
.
0
"
&
_PPB_NetworkMonitor_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_NetworkProxy
;
1
.
0
"
&
_PPB_NetworkProxy_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_OpenGLES2
;
1
.
0
"
&
_PPB_OpenGLES2_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_OpenGLES2InstancedArrays
;
1
.
0
"
&
_PPB_OpenGLES2InstancedArrays_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_OpenGLES2FramebufferBlit
;
1
.
0
"
&
_PPB_OpenGLES2FramebufferBlit_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_OpenGLES2FramebufferMultisample
;
1
.
0
"
&
_PPB_OpenGLES2FramebufferMultisample_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_OpenGLES2ChromiumEnableFeature
;
1
.
0
"
&
_PPB_OpenGLES2ChromiumEnableFeature_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_OpenGLES2ChromiumMapSub
;
1
.
0
"
&
_PPB_OpenGLES2ChromiumMapSub_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_OpenGLES2Query
;
1
.
0
"
&
_PPB_OpenGLES2Query_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_OpenGLES2VertexArrayObject
;
1
.
0
"
&
_PPB_OpenGLES2VertexArrayObject_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TCPSocket
;
1
.
0
"
&
_PPB_TCPSocket_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TCPSocket
;
1
.
1
"
&
_PPB_TCPSocket_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TCPSocket
;
1
.
2
"
&
_PPB_TCPSocket_1_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TextInputController
;
1
.
0
"
&
_PPB_TextInputController_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_UDPSocket
;
1
.
0
"
&
_PPB_UDPSocket_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_UDPSocket
;
1
.
1
"
&
_PPB_UDPSocket_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_UDPSocket
;
1
.
2
"
&
_PPB_UDPSocket_1_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_URLLoader
;
1
.
0
"
&
_PPB_URLLoader_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_URLRequestInfo
;
1
.
0
"
&
_PPB_URLRequestInfo_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_URLResponseInfo
;
1
.
0
"
&
_PPB_URLResponseInfo_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Var
;
1
.
0
"
&
_PPB_Var_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Var
;
1
.
1
"
&
_PPB_Var_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Var
;
1
.
2
"
&
_PPB_Var_1_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VarArray
;
1
.
0
"
&
_PPB_VarArray_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VarArrayBuffer
;
1
.
0
"
&
_PPB_VarArrayBuffer_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VarDictionary
;
1
.
0
"
&
_PPB_VarDictionary_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VideoDecoder
;
0
.
1
"
&
_PPB_VideoDecoder_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VideoDecoder
;
0
.
2
"
&
_PPB_VideoDecoder_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VideoDecoder
;
1
.
0
"
&
_PPB_VideoDecoder_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VideoDecoder
;
1
.
1
"
&
_PPB_VideoDecoder_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VideoEncoder
;
0
.
1
"
&
_PPB_VideoEncoder_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VideoEncoder
;
0
.
2
"
&
_PPB_VideoEncoder_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VideoFrame
;
0
.
1
"
&
_PPB_VideoFrame_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_View
;
1
.
0
"
&
_PPB_View_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_View
;
1
.
1
"
&
_PPB_View_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_View
;
1
.
2
"
&
_PPB_View_1_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VpnProvider
;
0
.
1
"
&
_PPB_VpnProvider_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_WebSocket
;
1
.
0
"
&
_PPB_WebSocket_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_BrokerTrusted
;
0
.
2
"
&
_PPB_BrokerTrusted_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_BrokerTrusted
;
0
.
3
"
&
_PPB_BrokerTrusted_0_3
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_BrowserFont_Trusted
;
1
.
0
"
&
_PPB_BrowserFont_Trusted_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_CharSet_Trusted
;
1
.
0
"
&
_PPB_CharSet_Trusted_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FileChooserTrusted
;
0
.
5
"
&
_PPB_FileChooserTrusted_0_5
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FileChooserTrusted
;
0
.
6
"
&
_PPB_FileChooserTrusted_0_6
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_URLLoaderTrusted
;
0
.
3
"
&
_PPB_URLLoaderTrusted_0_3
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_AudioInput
(
Dev
)
;
0
.
3
"
&
_PPB_AudioInput_Dev_0_3
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_AudioInput
(
Dev
)
;
0
.
4
"
&
_PPB_AudioInput_Dev_0_4
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Buffer
(
Dev
)
;
0
.
4
"
&
_PPB_Buffer_Dev_0_4
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_CharSet
(
Dev
)
;
0
.
4
"
&
_PPB_CharSet_Dev_0_4
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Crypto
(
Dev
)
;
0
.
1
"
&
_PPB_Crypto_Dev_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_CursorControl
(
Dev
)
;
0
.
4
"
&
_PPB_CursorControl_Dev_0_4
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_DeviceRef
(
Dev
)
;
0
.
1
"
&
_PPB_DeviceRef_Dev_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FileChooser
(
Dev
)
;
0
.
5
"
&
_PPB_FileChooser_Dev_0_5
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FileChooser
(
Dev
)
;
0
.
6
"
&
_PPB_FileChooser_Dev_0_6
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Font
(
Dev
)
;
0
.
6
"
&
_PPB_Font_Dev_0_6
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
1
"
&
_PPB_IMEInputEvent_Dev_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_IMEInputEvent
(
Dev
)
;
0
.
2
"
&
_PPB_IMEInputEvent_Dev_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Memory
(
Dev
)
;
0
.
1
"
&
_PPB_Memory_Dev_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_OpenGLES2DrawBuffers
(
Dev
)
;
1
.
0
"
&
_PPB_OpenGLES2DrawBuffers_Dev_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Printing
(
Dev
)
;
0
.
7
"
&
_PPB_Printing_Dev_0_7
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TextInput
(
Dev
)
;
0
.
1
"
&
_PPB_TextInput_Dev_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TextInput
(
Dev
)
;
0
.
2
"
&
_PPB_TextInput_Dev_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Trace_Event
(
Dev
)
;
0
.
1
"
&
_PPB_Trace_Event_Dev_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Trace_Event
(
Dev
)
;
0
.
2
"
&
_PPB_Trace_Event_Dev_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TrueTypeFont
(
Dev
)
;
0
.
1
"
&
_PPB_TrueTypeFont_Dev_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_URLUtil
(
Dev
)
;
0
.
6
"
&
_PPB_URLUtil_Dev_0_6
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_URLUtil
(
Dev
)
;
0
.
7
"
&
_PPB_URLUtil_Dev_0_7
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Var
(
Deprecated
)
;
0
.
3
"
&
_PPB_Var_Deprecated_0_3
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VideoCapture
(
Dev
)
;
0
.
3
"
&
_PPB_VideoCapture_Dev_0_3
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VideoDecoder
(
Dev
)
;
0
.
16
"
&
_PPB_VideoDecoder_Dev_0_16
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_View
(
Dev
)
;
0
.
1
"
&
_PPB_View_Dev_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_CameraCapabilities_Private
;
0
.
1
"
&
_PPB_CameraCapabilities_Private_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_CameraDevice_Private
;
0
.
1
"
&
_PPB_CameraDevice_Private_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_ContentDecryptor_Private
;
0
.
14
"
&
_PPB_ContentDecryptor_Private_0_14
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_DisplayColorProfile_Private
;
0
.
1
"
&
_PPB_DisplayColorProfile_Private_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Ext_CrxFileSystem_Private
;
0
.
1
"
&
_PPB_Ext_CrxFileSystem_Private_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FileIO_Private
;
0
.
1
"
&
_PPB_FileIO_Private_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FileRefPrivate
;
0
.
1
"
&
_PPB_FileRefPrivate_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Find_Private
;
0
.
3
"
&
_PPB_Find_Private_0_3
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash
;
12
.
4
"
&
_PPB_Flash_12_4
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash
;
12
.
5
"
&
_PPB_Flash_12_5
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash
;
12
.
6
"
&
_PPB_Flash_12_6
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash
;
13
.
0
"
&
_PPB_Flash_13_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_Clipboard
;
4
.
0
"
&
_PPB_Flash_Clipboard_4_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_Clipboard
;
5
.
0
"
&
_PPB_Flash_Clipboard_5_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_Clipboard
;
5
.
1
"
&
_PPB_Flash_Clipboard_5_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_DeviceID
;
1
.
0
"
&
_PPB_Flash_DeviceID_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_DRM
;
1
.
0
"
&
_PPB_Flash_DRM_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_DRM
;
1
.
1
"
&
_PPB_Flash_DRM_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_File_ModuleLocal
;
3
"
&
_PPB_Flash_File_ModuleLocal_3_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_File_FileRef
;
2
"
&
_PPB_Flash_File_FileRef_2_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_FontFile
;
0
.
1
"
&
_PPB_Flash_FontFile_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_FontFile
;
0
.
2
"
&
_PPB_Flash_FontFile_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FlashFullscreen
;
0
.
1
"
&
_PPB_FlashFullscreen_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_FlashFullscreen
;
1
.
0
"
&
_PPB_FlashFullscreen_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_Menu
;
0
.
2
"
&
_PPB_Flash_Menu_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_MessageLoop
;
0
.
1
"
&
_PPB_Flash_MessageLoop_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Flash_Print
;
1
.
0
"
&
_PPB_Flash_Print_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_HostResolver_Private
;
0
.
1
"
&
_PPB_HostResolver_Private_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Instance_Private
;
0
.
1
"
&
_PPB_Instance_Private_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_IsolatedFileSystem_Private
;
0
.
2
"
&
_PPB_IsolatedFileSystem_Private_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_NetAddress_Private
;
0
.
1
"
&
_PPB_NetAddress_Private_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_NetAddress_Private
;
1
.
0
"
&
_PPB_NetAddress_Private_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_NetAddress_Private
;
1
.
1
"
&
_PPB_NetAddress_Private_1_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_OutputProtection_Private
;
0
.
1
"
&
_PPB_OutputProtection_Private_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_PDF
;
1
"
&
_PPB_PDF_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_PlatformVerification_Private
;
0
.
2
"
&
_PPB_PlatformVerification_Private_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TCPServerSocket_Private
;
0
.
1
"
&
_PPB_TCPServerSocket_Private_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TCPServerSocket_Private
;
0
.
2
"
&
_PPB_TCPServerSocket_Private_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TCPSocket_Private
;
0
.
3
"
&
_PPB_TCPSocket_Private_0_3
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TCPSocket_Private
;
0
.
4
"
&
_PPB_TCPSocket_Private_0_4
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_TCPSocket_Private
;
0
.
5
"
&
_PPB_TCPSocket_Private_0_5
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_Testing_Private
;
1
.
0
"
&
_PPB_Testing_Private_1_0
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_UDPSocket_Private
;
0
.
2
"
&
_PPB_UDPSocket_Private_0_2
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_UDPSocket_Private
;
0
.
3
"
&
_PPB_UDPSocket_Private_0_3
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_UDPSocket_Private
;
0
.
4
"
&
_PPB_UDPSocket_Private_0_4
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_UMA_Private
;
0
.
3
"
&
_PPB_UMA_Private_0_3
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VideoDestination_Private
;
0
.
1
"
&
_PPB_VideoDestination_Private_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_VideoSource_Private
;
0
.
1
"
&
_PPB_VideoSource_Private_0_1
)
)
;
gInterfaces
.
insert
(
pair
<
string
void
*
>
(
"
PPB_X509Certificate_Private
;
0
.
1
"
&
_PPB_X509Certificate_Private_0_1
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_Graphics_3D
;
1
.
0
"
Call_PPP_Graphics3D
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_InputEvent
;
0
.
1
"
Call_PPP_InputEvent
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_Instance
;
1
.
0
"
Call_PPP_Instance_1_0
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_Instance
;
1
.
1
"
Call_PPP_Instance
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_MessageHandler
;
0
.
2
"
Call_PPP_MessageHandler
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_Messaging
;
1
.
0
"
Call_PPP_Messaging
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_MouseLock
;
1
.
0
"
Call_PPP_MouseLock
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_Class_Deprecated
;
1
.
0
"
Call_PPP_Class_Deprecated
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_NetworkState
(
Dev
)
;
0
.
1
"
Call_PPP_NetworkState_Dev
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_Printing
(
Dev
)
;
0
.
6
"
Call_PPP_Printing_Dev
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_TextInput
(
Dev
)
;
0
.
1
"
Call_PPP_TextInput_Dev
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_VideoCapture
(
Dev
)
;
0
.
1
"
Call_PPP_VideoCapture_Dev
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_VideoDecoder
(
Dev
)
;
0
.
11
"
Call_PPP_VideoDecoder_Dev
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_ContentDecryptor_Private
;
0
.
16
"
Call_PPP_ContentDecryptor_Private
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_Find_Private
;
0
.
3
"
Call_PPP_Find_Private
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_Flash_BrowserOperations
;
1
.
0
"
Call_PPP_Flash_BrowserOperations_1_0
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_Flash_BrowserOperations
;
1
.
2
"
Call_PPP_Flash_BrowserOperations_1_2
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_Flash_BrowserOperations
;
1
.
3
"
Call_PPP_Flash_BrowserOperations
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_Instance_Private
;
0
.
1
"
Call_PPP_Instance_Private
)
)
;
gInterfaceMemberCallers
.
insert
(
pair
<
string
InterfaceMemberCallFunc
>
(
"
PPP_PexeStreamHandler
;
1
.
0
"
Call_PPP_PexeStreamHandler
)
)
;
}
;
