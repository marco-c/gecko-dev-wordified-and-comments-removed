Components
.
utils
.
import
(
'
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
'
)
;
Components
.
utils
.
import
(
'
resource
:
/
/
gre
/
modules
/
Services
.
jsm
'
)
;
Components
.
utils
.
import
(
'
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
'
)
;
Components
.
utils
.
import
(
'
chrome
:
/
/
shumway
/
content
/
StartupInfo
.
jsm
'
)
;
Components
.
utils
.
import
(
'
chrome
:
/
/
shumway
/
content
/
ShumwayCom
.
jsm
'
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
'
PrivateBrowsingUtils
'
'
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
'
)
;
function
log
(
str
)
{
var
msg
=
'
plugin
.
js
:
'
+
str
;
Services
.
console
.
logStringMessage
(
msg
)
;
dump
(
msg
+
'
\
n
'
)
;
}
function
runViewer
(
)
{
function
handlerOOP
(
)
{
var
frameLoader
=
pluginElement
.
frameLoader
;
var
messageManager
=
frameLoader
.
messageManager
;
var
externalInterface
;
messageManager
.
addMessageListener
(
'
Shumway
:
running
'
function
(
message
)
{
externalInterface
=
message
.
objects
.
externalInterface
;
}
)
;
messageManager
.
addMessageListener
(
'
Shumway
:
message
'
function
(
message
)
{
var
data
=
message
.
data
;
var
result
=
shumwayActions
.
invoke
(
data
.
action
data
.
data
)
;
if
(
message
.
sync
)
{
return
result
=
=
=
undefined
?
'
undefined
'
:
JSON
.
stringify
(
result
)
;
}
}
)
;
messageManager
.
addMessageListener
(
'
Shumway
:
enableDebug
'
function
(
message
)
{
enableDebug
(
)
;
}
)
;
shumwayActions
.
onExternalCallback
=
function
(
call
)
{
return
externalInterface
.
callback
(
JSON
.
stringify
(
call
)
)
;
}
;
shumwayActions
.
onLoadFileCallback
=
function
(
args
)
{
messageManager
.
sendAsyncMessage
(
'
Shumway
:
loadFile
'
args
)
;
}
;
messageManager
.
addMessageListener
(
'
Shumway
:
constructed
'
function
(
message
)
{
messageManager
.
sendAsyncMessage
(
'
Shumway
:
init
'
getEnvironment
(
)
)
;
}
)
;
}
function
getEnvironment
(
)
{
return
{
swfUrl
:
startupInfo
.
url
privateBrowsing
:
startupInfo
.
privateBrowsing
}
;
}
function
enableDebug
(
)
{
DebugUtils
.
enableDebug
(
startupInfo
.
url
)
;
setTimeout
(
function
(
)
{
}
1000
)
;
}
var
startupInfo
=
getStartupInfo
(
pluginElement
)
;
if
(
!
startupInfo
.
url
)
{
if
(
startupInfo
.
embedTag
)
{
setupSimpleExternalInterface
(
startupInfo
.
embedTag
)
;
}
return
;
}
var
document
=
pluginElement
.
ownerDocument
;
var
window
=
document
.
defaultView
;
var
shumwayActions
=
ShumwayCom
.
createActions
(
startupInfo
window
document
)
;
handlerOOP
(
)
;
}
function
setupSimpleExternalInterface
(
embedTag
)
{
Components
.
utils
.
exportFunction
(
function
(
variable
)
{
switch
(
variable
)
{
case
'
version
'
:
return
'
SHUMWAY
10
0
0
'
;
default
:
log
(
'
Unsupported
GetVariable
(
)
call
:
'
+
variable
)
;
return
undefined
;
}
}
embedTag
.
wrappedJSObject
{
defineAs
:
'
GetVariable
'
}
)
;
}
runViewer
(
)
;
