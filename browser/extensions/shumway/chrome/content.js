Components
.
utils
.
import
(
'
resource
:
/
/
gre
/
modules
/
Services
.
jsm
'
)
;
Components
.
utils
.
import
(
'
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
'
)
;
Components
.
utils
.
import
(
'
chrome
:
/
/
shumway
/
content
/
ShumwayCom
.
jsm
'
)
;
var
messageManager
viewerReady
;
if
(
typeof
document
=
=
=
'
undefined
'
)
{
messageManager
=
this
;
viewerReady
=
Promise
.
resolve
(
content
)
;
messageManager
.
sendAsyncMessage
(
'
Shumway
:
constructed
'
null
)
;
}
else
{
messageManager
=
window
.
QueryInterface
(
Components
.
interfaces
.
nsIInterfaceRequestor
)
.
getInterface
(
Components
.
interfaces
.
nsIDocShell
)
.
QueryInterface
(
Components
.
interfaces
.
nsIInterfaceRequestor
)
.
getInterface
(
Components
.
interfaces
.
nsIContentFrameMessageManager
)
;
var
viewer
=
document
.
getElementById
(
'
viewer
'
)
;
viewerReady
=
new
Promise
(
function
(
resolve
)
{
viewer
.
addEventListener
(
'
load
'
function
(
)
{
messageManager
.
sendAsyncMessage
(
'
Shumway
:
constructed
'
null
)
;
resolve
(
viewer
.
contentWindow
)
;
}
)
;
}
)
;
}
var
externalInterfaceWrapper
=
{
callback
:
function
(
call
)
{
if
(
!
shumwayComAdapterHooks
.
onExternalCallback
)
{
return
undefined
;
}
return
shumwayComAdapterHooks
.
onExternalCallback
(
Components
.
utils
.
cloneInto
(
JSON
.
parse
(
call
)
content
)
)
;
}
}
;
var
shumwayComAdapterHooks
=
{
}
;
function
sendMessage
(
action
data
sync
)
{
var
detail
=
{
action
:
action
data
:
data
sync
:
sync
}
;
if
(
!
sync
)
{
messageManager
.
sendAsyncMessage
(
'
Shumway
:
message
'
detail
)
;
return
;
}
var
result
=
String
(
messageManager
.
sendSyncMessage
(
'
Shumway
:
message
'
detail
)
)
;
result
=
result
=
=
'
undefined
'
?
undefined
:
JSON
.
parse
(
result
)
;
return
Components
.
utils
.
cloneInto
(
result
content
)
;
}
function
enableDebug
(
)
{
messageManager
.
sendAsyncMessage
(
'
Shumway
:
enableDebug
'
null
)
;
}
messageManager
.
addMessageListener
(
'
Shumway
:
init
'
function
(
message
)
{
var
environment
=
message
.
data
;
messageManager
.
sendAsyncMessage
(
'
Shumway
:
running
'
{
}
{
externalInterface
:
externalInterfaceWrapper
}
)
;
viewerReady
.
then
(
function
(
viewerWindow
)
{
ShumwayCom
.
createAdapter
(
viewerWindow
.
wrappedJSObject
{
sendMessage
:
sendMessage
enableDebug
:
enableDebug
getEnvironment
:
function
(
)
{
return
environment
;
}
}
shumwayComAdapterHooks
)
;
viewerWindow
.
wrappedJSObject
.
runViewer
(
)
;
}
)
;
}
)
;
messageManager
.
addMessageListener
(
'
Shumway
:
loadFile
'
function
(
message
)
{
if
(
!
shumwayComAdapterHooks
.
onLoadFileCallback
)
{
return
;
}
shumwayComAdapterHooks
.
onLoadFileCallback
(
Components
.
utils
.
cloneInto
(
message
.
data
content
)
)
;
}
)
;
