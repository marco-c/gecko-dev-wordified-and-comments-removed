'
use
strict
'
;
var
EXPORTED_SYMBOLS
=
[
'
ShumwayBootstrapUtils
'
]
;
const
PREF_PREFIX
=
'
shumway
.
'
;
const
PREF_IGNORE_CTP
=
PREF_PREFIX
+
'
ignoreCTP
'
;
const
PREF_WHITELIST
=
PREF_PREFIX
+
'
swf
.
whitelist
'
;
const
SWF_CONTENT_TYPE
=
'
application
/
x
-
shockwave
-
flash
'
;
const
PLUGIN_HANLDER_URI
=
'
chrome
:
/
/
shumway
/
content
/
content
.
html
'
;
let
Cc
=
Components
.
classes
;
let
Ci
=
Components
.
interfaces
;
let
Cm
=
Components
.
manager
;
let
Cu
=
Components
.
utils
;
Cu
.
import
(
'
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
'
)
;
Cu
.
import
(
'
resource
:
/
/
gre
/
modules
/
Services
.
jsm
'
)
;
let
Ph
=
Cc
[
"
mozilla
.
org
/
plugin
/
host
;
1
"
]
.
getService
(
Ci
.
nsIPluginHost
)
;
function
getBoolPref
(
pref
def
)
{
try
{
return
Services
.
prefs
.
getBoolPref
(
pref
)
;
}
catch
(
ex
)
{
return
def
;
}
}
function
getStringPref
(
pref
def
)
{
try
{
return
Services
.
prefs
.
getComplexValue
(
pref
Ci
.
nsISupportsString
)
.
data
;
}
catch
(
ex
)
{
return
def
;
}
}
function
log
(
str
)
{
var
msg
=
'
ShumwayBootstrapUtils
.
jsm
:
'
+
str
;
Services
.
console
.
logStringMessage
(
msg
)
;
dump
(
msg
+
'
\
n
'
)
;
}
function
Factory
(
)
{
}
Factory
.
prototype
=
{
register
:
function
register
(
targetConstructor
)
{
var
proto
=
targetConstructor
.
prototype
;
this
.
_classID
=
proto
.
classID
;
var
factory
=
XPCOMUtils
.
_getFactory
(
targetConstructor
)
;
this
.
_factory
=
factory
;
var
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
registerFactory
(
proto
.
classID
proto
.
classDescription
proto
.
contractID
factory
)
;
if
(
proto
.
classID2
)
{
this
.
_classID2
=
proto
.
classID2
;
registrar
.
registerFactory
(
proto
.
classID2
proto
.
classDescription
proto
.
contractID2
factory
)
;
}
}
unregister
:
function
unregister
(
)
{
var
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
unregisterFactory
(
this
.
_classID
this
.
_factory
)
;
if
(
this
.
_classID2
)
{
registrar
.
unregisterFactory
(
this
.
_classID2
this
.
_factory
)
;
}
}
}
;
function
allowedPlatformForMedia
(
)
{
var
oscpu
=
Cc
[
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
http
"
]
.
getService
(
Ci
.
nsIHttpProtocolHandler
)
.
oscpu
;
if
(
oscpu
.
indexOf
(
'
Windows
NT
'
)
=
=
=
0
)
{
return
oscpu
.
indexOf
(
'
Windows
NT
5
'
)
<
0
;
}
if
(
oscpu
.
indexOf
(
'
Intel
Mac
OS
X
'
)
=
=
=
0
)
{
return
true
;
}
return
false
;
}
var
ShumwayBootstrapUtils
=
{
isRegistered
:
false
isJSPluginsSupported
:
false
register
:
function
(
)
{
if
(
this
.
isRegistered
)
{
return
;
}
this
.
isRegistered
=
true
;
this
.
isJSPluginsSupported
=
!
!
Ph
.
registerFakePlugin
&
&
getBoolPref
(
'
shumway
.
jsplugins
'
false
)
;
if
(
this
.
isJSPluginsSupported
)
{
let
initPluginDict
=
{
handlerURI
:
PLUGIN_HANLDER_URI
mimeEntries
:
[
{
type
:
SWF_CONTENT_TYPE
description
:
'
Shockwave
Flash
'
extension
:
'
swf
'
}
]
niceName
:
'
Shumway
plugin
'
name
:
'
Shumway
'
supersedeExisting
:
true
sandboxScript
:
'
chrome
:
/
/
shumway
/
content
/
plugin
.
js
'
version
:
'
10
.
0
.
0
.
0
'
}
;
Ph
.
registerFakePlugin
(
initPluginDict
)
;
}
else
{
Cu
.
import
(
'
resource
:
/
/
shumway
/
ShumwayStreamConverter
.
jsm
'
)
;
let
converterFactory
=
new
Factory
(
)
;
converterFactory
.
register
(
ShumwayStreamConverter
)
;
this
.
converterFactory
=
converterFactory
;
}
}
unregister
:
function
(
)
{
if
(
!
this
.
isRegistered
)
{
return
;
}
this
.
isRegistered
=
false
;
if
(
this
.
isJSPluginsSupported
)
{
Ph
.
unregisterFakePlugin
(
PLUGIN_HANLDER_URI
)
;
}
else
{
this
.
converterFactory
.
unregister
(
)
;
this
.
converterFactory
=
null
;
}
}
}
;
