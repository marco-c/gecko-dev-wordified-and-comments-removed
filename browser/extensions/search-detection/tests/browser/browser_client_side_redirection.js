"
use
strict
"
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
AddonTestUtils
.
initMochitest
(
this
)
;
const
TELEMETRY_EVENTS_FILTERS
=
{
category
:
"
addonsSearchDetection
"
method
:
"
etld_change
"
}
;
const
TELEMETRY_TEST_UTILS_OPTIONS
=
{
clear
:
true
process
:
"
dynamic
"
}
;
async
function
testClientSideRedirect
(
{
background
permissions
telemetryExpected
=
false
}
)
{
Services
.
telemetry
.
clearEvents
(
)
;
const
addonId
=
"
some
addon
-
id
"
;
const
addonVersion
=
"
1
.
2
.
3
"
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
version
:
addonVersion
browser_specific_settings
:
{
gecko
:
{
id
:
addonId
}
}
permissions
}
useAddonManager
:
"
temporary
"
background
}
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
ready
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
https
:
/
/
example
.
com
/
search
?
q
=
babar
"
}
(
)
=
>
{
}
)
;
await
extension
.
unload
(
)
;
TelemetryTestUtils
.
assertEvents
(
telemetryExpected
?
[
{
object
:
"
webrequest
"
value
:
"
extension
"
extra
:
{
addonId
addonVersion
from
:
"
example
.
com
"
to
:
"
mochi
.
test
"
}
}
]
:
[
]
TELEMETRY_EVENTS_FILTERS
TELEMETRY_TEST_UTILS_OPTIONS
)
;
}
add_task
(
async
function
setup
(
)
{
const
searchEngineName
=
"
test
search
engine
"
;
let
searchEngine
;
registerCleanupFunction
(
async
(
)
=
>
{
await
searchEngine
.
unload
(
)
;
ok
(
!
Services
.
search
.
getEngineByName
(
searchEngineName
)
"
test
search
engine
unregistered
"
)
;
}
)
;
searchEngine
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
chrome_settings_overrides
:
{
search_provider
:
{
name
:
searchEngineName
keyword
:
"
test
"
search_url
:
"
https
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
}
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
searchEngine
.
startup
(
)
;
await
AddonTestUtils
.
waitForSearchProviderStartup
(
searchEngine
)
;
ok
(
Services
.
search
.
getEngineByName
(
searchEngineName
)
"
test
search
engine
registered
"
)
;
}
)
;
add_task
(
function
test_onBeforeRequest
(
)
{
return
testClientSideRedirect
(
{
background
(
)
{
browser
.
webRequest
.
onBeforeRequest
.
addListener
(
(
)
=
>
{
return
{
redirectUrl
:
"
http
:
/
/
mochi
.
test
:
8888
/
"
}
;
}
{
urls
:
[
"
*
:
/
/
example
.
com
/
*
"
]
}
[
"
blocking
"
]
)
;
browser
.
test
.
sendMessage
(
"
ready
"
)
;
}
permissions
:
[
"
webRequest
"
"
webRequestBlocking
"
"
*
:
/
/
example
.
com
/
*
"
]
telemetryExpected
:
true
}
)
;
}
)
;
add_task
(
function
test_onBeforeRequest_url_not_monitored
(
)
{
return
testClientSideRedirect
(
{
background
(
)
{
browser
.
webRequest
.
onBeforeRequest
.
addListener
(
(
)
=
>
{
return
{
redirectUrl
:
"
http
:
/
/
mochi
.
test
:
8888
/
"
}
;
}
{
urls
:
[
"
*
:
/
/
google
.
com
/
*
"
]
}
[
"
blocking
"
]
)
;
browser
.
test
.
sendMessage
(
"
ready
"
)
;
}
permissions
:
[
"
webRequest
"
"
webRequestBlocking
"
"
*
:
/
/
google
.
com
/
*
"
]
telemetryExpected
:
false
}
)
;
}
)
;
add_task
(
function
test_onHeadersReceived
(
)
{
return
testClientSideRedirect
(
{
background
(
)
{
browser
.
webRequest
.
onHeadersReceived
.
addListener
(
(
)
=
>
{
return
{
redirectUrl
:
"
http
:
/
/
mochi
.
test
:
8888
/
"
}
;
}
{
urls
:
[
"
*
:
/
/
example
.
com
/
*
"
]
types
:
[
"
main_frame
"
]
}
[
"
blocking
"
]
)
;
browser
.
test
.
sendMessage
(
"
ready
"
)
;
}
permissions
:
[
"
webRequest
"
"
webRequestBlocking
"
"
*
:
/
/
example
.
com
/
*
"
]
telemetryExpected
:
true
}
)
;
}
)
;
add_task
(
function
test_onHeadersReceived_url_not_monitored
(
)
{
return
testClientSideRedirect
(
{
background
(
)
{
browser
.
webRequest
.
onHeadersReceived
.
addListener
(
(
)
=
>
{
return
{
redirectUrl
:
"
http
:
/
/
mochi
.
test
:
8888
/
"
}
;
}
{
urls
:
[
"
*
:
/
/
google
.
com
/
*
"
]
types
:
[
"
main_frame
"
]
}
[
"
blocking
"
]
)
;
browser
.
test
.
sendMessage
(
"
ready
"
)
;
}
permissions
:
[
"
webRequest
"
"
webRequestBlocking
"
"
*
:
/
/
google
.
com
/
*
"
]
telemetryExpected
:
false
}
)
;
}
)
;
