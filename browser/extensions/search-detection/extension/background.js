"
use
strict
"
;
const
TELEMETRY_VALUE_EXTENSION
=
"
extension
"
;
const
TELEMETRY_VALUE_SERVER
=
"
server
"
;
class
AddonsSearchDetection
{
constructor
(
)
{
this
.
engines
=
[
]
;
this
.
onRedirectedListener
=
this
.
onRedirectedListener
.
bind
(
this
)
;
}
async
getEngines
(
)
{
try
{
this
.
engines
=
await
browser
.
addonsSearchDetection
.
getEngines
(
)
;
}
catch
(
err
)
{
console
.
error
(
failed
to
retrieve
the
list
of
URL
patterns
:
{
err
}
)
;
this
.
engines
=
[
]
;
}
return
this
.
engines
;
}
async
monitor
(
)
{
if
(
browser
.
addonsSearchDetection
.
onRedirected
.
hasListener
(
this
.
onRedirectedListener
)
)
{
browser
.
addonsSearchDetection
.
onRedirected
.
removeListener
(
this
.
onRedirectedListener
)
;
}
const
engines
=
await
this
.
getEngines
(
)
;
const
patterns
=
new
Set
(
engines
.
map
(
e
=
>
e
.
baseUrl
+
"
*
"
)
)
;
if
(
patterns
.
size
=
=
=
0
)
{
return
;
}
browser
.
addonsSearchDetection
.
onRedirected
.
addListener
(
this
.
onRedirectedListener
{
urls
:
[
.
.
.
patterns
]
}
)
;
}
async
onRedirectedListener
(
{
addonId
firstUrl
lastUrl
}
)
{
const
maybeServerSideRedirect
=
!
addonId
;
let
engines
=
this
.
getEnginesForUrl
(
firstUrl
)
;
let
addonIds
=
[
]
;
if
(
maybeServerSideRedirect
)
{
addonIds
=
engines
.
filter
(
e
=
>
e
.
addonId
)
.
map
(
e
=
>
e
.
addonId
)
;
}
else
if
(
addonId
)
{
addonIds
=
[
addonId
]
;
}
if
(
addonIds
.
length
=
=
=
0
)
{
return
;
}
const
from
=
await
browser
.
addonsSearchDetection
.
getPublicSuffix
(
firstUrl
)
;
const
to
=
await
browser
.
addonsSearchDetection
.
getPublicSuffix
(
lastUrl
)
;
let
sameSite
=
from
=
=
=
to
;
let
paramChanged
=
false
;
if
(
sameSite
)
{
let
firstParams
=
new
URLSearchParams
(
new
URL
(
firstUrl
)
.
search
)
;
let
lastParams
=
new
URLSearchParams
(
new
URL
(
lastUrl
)
.
search
)
;
for
(
let
{
paramName
}
of
engines
.
filter
(
e
=
>
e
.
paramName
)
)
{
if
(
firstParams
.
get
(
paramName
)
!
=
=
lastParams
.
get
(
paramName
)
)
{
paramChanged
=
true
;
break
;
}
}
}
for
(
const
id
of
addonIds
)
{
const
addonVersion
=
await
browser
.
addonsSearchDetection
.
getAddonVersion
(
id
)
;
const
extra
=
{
addonId
:
id
addonVersion
from
to
value
:
maybeServerSideRedirect
?
TELEMETRY_VALUE_SERVER
:
TELEMETRY_VALUE_EXTENSION
}
;
if
(
sameSite
)
{
browser
.
addonsSearchDetection
.
reportSameSiteRedirect
(
{
addonId
:
id
addonVersion
origin
:
from
paramChanged
}
)
;
}
else
if
(
maybeServerSideRedirect
)
{
browser
.
addonsSearchDetection
.
reportETLDChangeOther
(
extra
)
;
}
else
{
browser
.
addonsSearchDetection
.
reportETLDChangeWebrequest
(
extra
)
;
}
}
}
getEnginesForUrl
(
url
)
{
return
this
.
engines
.
filter
(
e
=
>
url
.
startsWith
(
e
.
baseUrl
)
)
;
}
}
const
exp
=
new
AddonsSearchDetection
(
)
;
exp
.
monitor
(
)
;
browser
.
addonsSearchDetection
.
onSearchEngineModified
.
addListener
(
async
(
)
=
>
{
await
exp
.
monitor
(
)
;
}
)
;
