"
use
strict
"
;
const
TELEMETRY_VALUE_EXTENSION
=
"
extension
"
;
const
TELEMETRY_VALUE_SERVER
=
"
server
"
;
class
AddonsSearchDetection
{
constructor
(
)
{
this
.
matchPatterns
=
{
}
;
this
.
onRedirectedListener
=
this
.
onRedirectedListener
.
bind
(
this
)
;
}
async
getMatchPatterns
(
)
{
try
{
this
.
matchPatterns
=
await
browser
.
addonsSearchDetection
.
getMatchPatterns
(
)
;
}
catch
(
err
)
{
console
.
error
(
failed
to
retrieve
the
list
of
URL
patterns
:
{
err
}
)
;
this
.
matchPatterns
=
{
}
;
}
return
this
.
matchPatterns
;
}
async
monitor
(
)
{
if
(
browser
.
addonsSearchDetection
.
onRedirected
.
hasListener
(
this
.
onRedirectedListener
)
)
{
browser
.
addonsSearchDetection
.
onRedirected
.
removeListener
(
this
.
onRedirectedListener
)
;
}
const
matchPatterns
=
await
this
.
getMatchPatterns
(
)
;
const
patterns
=
Object
.
keys
(
matchPatterns
)
;
if
(
patterns
.
length
=
=
=
0
)
{
return
;
}
browser
.
addonsSearchDetection
.
onRedirected
.
addListener
(
this
.
onRedirectedListener
{
urls
:
patterns
}
)
;
}
async
onRedirectedListener
(
{
addonId
firstUrl
lastUrl
}
)
{
const
maybeServerSideRedirect
=
!
addonId
;
let
addonIds
=
[
]
;
if
(
maybeServerSideRedirect
)
{
addonIds
=
this
.
getAddonIdsForUrl
(
firstUrl
)
;
}
else
if
(
addonId
)
{
addonIds
=
[
addonId
]
;
}
if
(
addonIds
.
length
=
=
=
0
)
{
return
;
}
const
from
=
await
browser
.
addonsSearchDetection
.
getPublicSuffix
(
firstUrl
)
;
const
to
=
await
browser
.
addonsSearchDetection
.
getPublicSuffix
(
lastUrl
)
;
if
(
from
=
=
=
to
)
{
return
;
}
for
(
const
id
of
addonIds
)
{
const
addonVersion
=
await
browser
.
addonsSearchDetection
.
getAddonVersion
(
id
)
;
const
extra
=
{
addonId
:
id
addonVersion
from
to
value
:
maybeServerSideRedirect
?
TELEMETRY_VALUE_SERVER
:
TELEMETRY_VALUE_EXTENSION
}
;
browser
.
addonsSearchDetection
.
report
(
maybeServerSideRedirect
extra
)
;
}
}
getAddonIdsForUrl
(
url
)
{
for
(
const
pattern
of
Object
.
keys
(
this
.
matchPatterns
)
)
{
const
urlPrefix
=
pattern
.
slice
(
0
-
1
)
;
if
(
url
.
startsWith
(
urlPrefix
)
)
{
return
this
.
matchPatterns
[
pattern
]
;
}
}
return
[
]
;
}
}
const
exp
=
new
AddonsSearchDetection
(
)
;
exp
.
monitor
(
)
;
browser
.
addonsSearchDetection
.
onSearchEngineModified
.
addListener
(
async
(
)
=
>
{
await
exp
.
monitor
(
)
;
}
)
;
