"
use
strict
"
;
const
{
AddonManager
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
sys
.
mjs
"
)
;
const
{
WebRequest
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
WebRequest
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
AddonSearchEngine
:
"
resource
:
/
/
gre
/
modules
/
AddonSearchEngine
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyGlobalGetters
(
this
[
"
ChannelWrapper
"
]
)
;
ChromeUtils
.
defineLazyGetter
(
this
"
searchInitialized
"
(
)
=
>
{
if
(
Services
.
search
.
isInitialized
)
{
return
Promise
.
resolve
(
)
;
}
return
ExtensionUtils
.
promiseObserved
(
"
browser
-
search
-
service
"
(
_
data
)
=
>
data
=
=
=
"
init
-
complete
"
)
;
}
)
;
const
SEARCH_TOPIC_ENGINE_MODIFIED
=
"
browser
-
search
-
engine
-
modified
"
;
this
.
addonsSearchDetection
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
const
{
extension
}
=
context
;
this
.
firstMatchedUrls
=
{
}
;
return
{
addonsSearchDetection
:
{
async
getMatchPatterns
(
)
{
const
patterns
=
{
}
;
try
{
await
searchInitialized
;
const
visibleEngines
=
await
Services
.
search
.
getEngines
(
)
;
visibleEngines
.
forEach
(
engine
=
>
{
if
(
!
(
engine
instanceof
lazy
.
AddonSearchEngine
)
)
{
return
;
}
const
{
_extensionID
_urls
}
=
engine
.
wrappedJSObject
;
if
(
!
_extensionID
)
{
return
;
}
_urls
.
filter
(
(
{
type
}
)
=
>
type
=
=
=
"
text
/
html
"
)
.
forEach
(
(
{
template
}
)
=
>
{
const
pattern
=
template
.
split
(
"
?
"
)
[
0
]
+
"
*
"
;
if
(
!
patterns
[
pattern
]
)
{
patterns
[
pattern
]
=
[
]
;
}
if
(
!
patterns
[
pattern
]
.
includes
(
_extensionID
)
&
&
!
_extensionID
.
endsWith
(
"
search
.
mozilla
.
org
"
)
)
{
patterns
[
pattern
]
.
push
(
_extensionID
)
;
}
}
)
;
}
)
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
return
patterns
;
}
async
getAddonVersion
(
addonId
)
{
const
addon
=
await
AddonManager
.
getAddonByID
(
addonId
)
;
return
addon
&
&
addon
.
version
;
}
async
getPublicSuffix
(
url
)
{
try
{
return
Services
.
eTLD
.
getBaseDomain
(
Services
.
io
.
newURI
(
url
)
)
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
return
null
;
}
}
onSearchEngineModified
:
new
ExtensionCommon
.
EventManager
(
{
context
name
:
"
addonsSearchDetection
.
onSearchEngineModified
"
register
:
fire
=
>
{
const
onSearchEngineModifiedObserver
=
(
aSubject
aTopic
aData
)
=
>
{
if
(
aTopic
!
=
=
SEARCH_TOPIC_ENGINE_MODIFIED
|
|
!
[
"
engine
-
added
"
"
engine
-
removed
"
"
engine
-
changed
"
]
.
includes
(
aData
)
)
{
return
;
}
fire
.
async
(
)
;
}
;
Services
.
obs
.
addObserver
(
onSearchEngineModifiedObserver
SEARCH_TOPIC_ENGINE_MODIFIED
)
;
return
(
)
=
>
{
Services
.
obs
.
removeObserver
(
onSearchEngineModifiedObserver
SEARCH_TOPIC_ENGINE_MODIFIED
)
;
}
;
}
}
)
.
api
(
)
onRedirected
:
new
ExtensionCommon
.
EventManager
(
{
context
name
:
"
addonsSearchDetection
.
onRedirected
"
register
:
(
fire
filter
)
=
>
{
const
stopListener
=
event
=
>
{
if
(
event
.
type
!
=
"
stop
"
)
{
return
;
}
const
wrapper
=
event
.
currentTarget
;
const
{
channel
id
:
requestId
}
=
wrapper
;
let
addonId
;
try
{
addonId
=
channel
?
.
QueryInterface
(
Ci
.
nsIPropertyBag
)
?
.
getProperty
(
"
redirectedByExtension
"
)
;
}
catch
(
err
)
{
console
.
error
(
err
)
;
}
const
firstUrl
=
this
.
firstMatchedUrls
[
requestId
]
;
delete
this
.
firstMatchedUrls
[
requestId
]
;
const
lastUrl
=
wrapper
.
finalURL
;
if
(
!
firstUrl
|
|
!
lastUrl
)
{
return
;
}
fire
.
sync
(
{
addonId
firstUrl
lastUrl
}
)
;
}
;
const
listener
=
(
{
requestId
url
originUrl
}
)
=
>
{
if
(
originUrl
!
=
=
undefined
)
{
return
;
}
if
(
!
this
.
firstMatchedUrls
[
requestId
]
)
{
this
.
firstMatchedUrls
[
requestId
]
=
url
;
const
wrapper
=
ChannelWrapper
.
getRegisteredChannel
(
requestId
context
.
extension
.
policy
context
.
xulBrowser
.
frameLoader
.
remoteTab
)
;
wrapper
.
addEventListener
(
"
stop
"
stopListener
)
;
}
}
;
WebRequest
.
onBeforeRedirect
.
addListener
(
listener
{
types
:
[
"
main_frame
"
]
urls
:
ExtensionUtils
.
parseMatchPatterns
(
filter
.
urls
)
}
[
]
{
addonId
:
extension
.
id
policy
:
extension
.
policy
blockingAllowed
:
false
}
)
;
return
(
)
=
>
{
WebRequest
.
onBeforeRedirect
.
removeListener
(
listener
)
;
}
;
}
}
)
.
api
(
)
}
}
;
}
}
;
