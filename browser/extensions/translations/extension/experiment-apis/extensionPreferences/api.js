"
use
strict
"
;
this
.
extensionPreferences
=
class
extends
ExtensionAPI
{
getAPI
(
)
{
const
{
Preferences
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
{
}
)
;
const
{
ExtensionUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
{
}
)
;
const
{
ExtensionError
}
=
ExtensionUtils
;
const
telemetryInactivityThresholdInSecondsOverridePrefName
=
extensions
.
translations
.
telemetryInactivityThresholdInSecondsOverride
;
return
{
experiments
:
{
extensionPreferences
:
{
async
getTelemetryInactivityThresholdInSecondsOverridePref
(
)
{
try
{
const
value
=
Preferences
.
get
(
telemetryInactivityThresholdInSecondsOverridePrefName
false
)
;
if
(
!
value
)
{
return
false
;
}
return
parseFloat
(
value
)
;
}
catch
(
error
)
{
console
.
error
(
error
.
message
error
.
stack
)
;
throw
new
ExtensionError
(
error
.
message
)
;
}
}
}
}
}
;
}
}
;
