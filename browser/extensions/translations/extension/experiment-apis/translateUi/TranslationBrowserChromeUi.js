const
{
setTimeout
clearTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
{
}
)
;
const
TranslationInfoBarStates
=
{
STATE_OFFER
:
0
STATE_TRANSLATING
:
1
STATE_TRANSLATED
:
2
STATE_ERROR
:
3
STATE_UNAVAILABLE
:
4
}
;
class
TranslationBrowserChromeUi
{
constructor
(
Services
browser
context
apiEventEmitter
tabId
)
{
this
.
Services
=
Services
;
this
.
uiState
=
null
;
this
.
browser
=
browser
;
this
.
context
=
context
;
this
.
translationInfoBarShown
=
false
;
this
.
shouldShowTranslationProgressTimer
=
undefined
;
this
.
importTranslationNotification
(
)
;
this
.
translationBrowserChromeUiNotificationManager
=
new
TranslationBrowserChromeUiNotificationManager
(
browser
apiEventEmitter
tabId
TranslationInfoBarStates
)
;
}
get
notificationBox
(
)
{
return
this
.
browser
.
ownerGlobal
.
gBrowser
.
getNotificationBox
(
this
.
browser
)
;
}
importTranslationNotification
(
)
{
const
chromeWin
=
this
.
browser
.
ownerGlobal
;
chromeWin
.
now
=
Date
.
now
(
)
;
try
{
chromeWin
.
customElements
.
setElementCreationCallback
(
translation
-
notification
-
{
chromeWin
.
now
}
(
)
=
>
{
this
.
Services
.
scriptloader
.
loadSubScript
(
this
.
context
.
extension
.
getURL
(
"
experiment
-
apis
/
translateUi
/
content
/
translation
-
notification
.
js
"
)
+
"
?
cachebuster
=
"
+
chromeWin
.
now
chromeWin
)
;
}
)
;
}
catch
(
e
)
{
console
.
log
(
"
Error
occurred
when
attempting
to
load
the
translation
notification
script
but
we
continue
nevertheless
"
e
)
;
}
}
onUiStateUpdate
(
uiState
)
{
this
.
translationBrowserChromeUiNotificationManager
.
uiState
=
uiState
;
this
.
setInfobarState
(
uiState
.
infobarState
)
;
this
.
updateTranslationProgress
(
uiState
)
;
const
showInfoBar
=
this
.
shouldShowInfoBar
(
this
.
browser
.
contentPrincipal
)
;
if
(
showInfoBar
)
{
this
.
showTranslationInfoBarIfNotAlreadyShown
(
)
;
}
else
{
this
.
hideTranslationInfoBarIfShown
(
)
;
}
this
.
showURLBarIcon
(
showInfoBar
)
;
}
setInfobarState
(
val
)
{
const
notif
=
this
.
notificationBox
.
getNotificationWithValue
(
"
translation
"
)
;
if
(
notif
)
{
notif
.
state
=
val
;
}
}
updateTranslationProgress
(
uiState
)
{
if
(
this
.
translationBrowserChromeUiNotificationManager
.
uiState
.
infobarState
!
=
=
TranslationInfoBarStates
.
STATE_TRANSLATING
)
{
return
;
}
const
notif
=
this
.
notificationBox
.
getNotificationWithValue
(
"
translation
"
)
;
if
(
notif
)
{
const
{
modelDownloading
translationDurationMs
localizedTranslationProgressText
}
=
uiState
;
if
(
this
.
shouldShowTranslationProgressTimer
)
{
clearTimeout
(
this
.
shouldShowTranslationProgressTimer
)
;
}
let
shouldShowTranslationProgress
;
const
thresholdMsAfterWhichToShouldTranslationProgress
=
3000
;
if
(
translationDurationMs
>
=
thresholdMsAfterWhichToShouldTranslationProgress
|
|
modelDownloading
)
{
shouldShowTranslationProgress
=
true
;
}
else
{
this
.
shouldShowTranslationProgressTimer
=
setTimeout
(
(
)
=
>
{
notif
.
updateTranslationProgress
(
true
localizedTranslationProgressText
)
;
clearTimeout
(
this
.
shouldShowTranslationProgressTimer
)
;
}
thresholdMsAfterWhichToShouldTranslationProgress
-
translationDurationMs
)
;
shouldShowTranslationProgress
=
false
;
}
notif
.
updateTranslationProgress
(
shouldShowTranslationProgress
localizedTranslationProgressText
)
;
}
}
shouldShowInfoBar
(
principal
)
{
if
(
!
[
TranslationInfoBarStates
.
STATE_OFFER
TranslationInfoBarStates
.
STATE_TRANSLATING
TranslationInfoBarStates
.
STATE_TRANSLATED
TranslationInfoBarStates
.
STATE_ERROR
]
.
includes
(
this
.
translationBrowserChromeUiNotificationManager
.
uiState
.
infobarState
)
)
{
return
false
;
}
if
(
!
this
.
translationBrowserChromeUiNotificationManager
.
uiState
.
detectedLanguageResults
)
{
return
false
;
}
if
(
!
this
.
translationBrowserChromeUiNotificationManager
.
uiState
.
detectedLanguageResults
.
confident
)
{
return
false
;
}
const
neverForLangs
=
this
.
Services
.
prefs
.
getCharPref
(
"
browser
.
translation
.
neverForLanguages
"
)
;
if
(
neverForLangs
.
split
(
"
"
)
.
includes
(
this
.
translationBrowserChromeUiNotificationManager
.
uiState
.
detectedLanguageResults
.
language
)
)
{
return
false
;
}
const
perms
=
this
.
Services
.
perms
;
if
(
perms
.
testExactPermissionFromPrincipal
(
principal
"
translate
"
)
=
=
=
perms
.
DENY_ACTION
)
{
return
false
;
}
return
true
;
}
hideURLBarIcon
(
)
{
const
chromeWin
=
this
.
browser
.
ownerGlobal
;
const
PopupNotifications
=
chromeWin
.
PopupNotifications
;
const
removeId
=
this
.
translationBrowserChromeUiNotificationManager
.
uiState
.
originalShown
?
"
translated
"
:
"
translate
"
;
const
notification
=
PopupNotifications
.
getNotification
(
removeId
this
.
browser
)
;
if
(
notification
)
{
PopupNotifications
.
remove
(
notification
)
;
}
}
showURLBarIcon
(
showInfoBar
)
{
const
chromeWin
=
this
.
browser
.
ownerGlobal
;
const
PopupNotifications
=
chromeWin
.
PopupNotifications
;
const
inactive
=
!
showInfoBar
|
|
this
.
translationBrowserChromeUiNotificationManager
.
uiState
.
originalShown
;
[
"
translated
"
"
translate
"
]
.
forEach
(
id
=
>
{
const
notification
=
PopupNotifications
.
getNotification
(
id
this
.
browser
)
;
if
(
notification
)
{
PopupNotifications
.
remove
(
notification
)
;
}
}
)
;
const
onClickCallback
=
(
topic
)
=
>
{
if
(
topic
=
=
=
"
swapping
"
)
{
const
infoBarVisible
=
this
.
notificationBox
.
getNotificationWithValue
(
"
translation
"
)
;
if
(
infoBarVisible
)
{
this
.
showTranslationInfoBar
(
)
;
}
return
true
;
}
if
(
topic
!
=
=
"
showing
"
)
{
return
false
;
}
const
translationNotification
=
this
.
notificationBox
.
getNotificationWithValue
(
"
translation
"
)
;
if
(
translationNotification
)
{
translationNotification
.
close
(
)
;
}
else
{
this
.
showTranslationInfoBar
(
)
;
}
return
true
;
}
;
const
addId
=
inactive
?
"
translate
"
:
"
translated
"
;
PopupNotifications
.
show
(
this
.
browser
addId
null
addId
+
"
-
notification
-
icon
"
null
null
{
dismissed
:
true
eventCallback
:
onClickCallback
}
)
;
}
showTranslationInfoBarIfNotAlreadyShown
(
)
{
const
translationNotification
=
this
.
notificationBox
.
getNotificationWithValue
(
"
translation
"
)
;
if
(
!
translationNotification
&
&
!
this
.
translationInfoBarShown
)
{
this
.
showTranslationInfoBar
(
)
;
}
}
hideTranslationInfoBarIfShown
(
)
{
const
translationNotification
=
this
.
notificationBox
.
getNotificationWithValue
(
"
translation
"
)
;
if
(
translationNotification
)
{
translationNotification
.
close
(
)
;
}
this
.
translationInfoBarShown
=
false
;
}
showTranslationInfoBar
(
)
{
console
.
debug
(
"
showTranslationInfoBar
"
)
;
this
.
translationInfoBarShown
=
true
;
const
notificationBox
=
this
.
notificationBox
;
const
chromeWin
=
this
.
browser
.
ownerGlobal
;
const
notif
=
notificationBox
.
appendNotification
(
"
translation
"
{
label
:
"
"
priority
:
notificationBox
.
PRIORITY_INFO_HIGH
is
:
translation
-
notification
-
{
chromeWin
.
now
}
}
)
;
notif
.
init
(
this
.
translationBrowserChromeUiNotificationManager
)
;
this
.
translationBrowserChromeUiNotificationManager
.
infobarDisplayed
(
notif
.
_getSourceLang
(
)
notif
.
_getTargetLang
(
)
)
;
return
notif
;
}
}
