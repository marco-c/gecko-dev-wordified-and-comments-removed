"
use
strict
"
;
const
TEST_URL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
mochitest
.
youtube
.
com
:
443
"
)
+
"
test
-
mock
-
wrapper
.
html
"
;
add_task
(
async
function
test_mock_mute_button
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
await
ensureVideosReady
(
browser
)
;
let
videoID
=
"
mock
-
video
-
controls
"
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
await
toggleMute
(
browser
pipWin
)
;
ok
(
await
isVideoMuted
(
browser
videoID
)
"
The
audio
is
muted
.
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
muteButton
=
content
.
document
.
querySelector
(
"
.
mute
-
button
"
)
;
ok
(
muteButton
.
getAttribute
(
"
isMuted
"
)
"
muteButton
has
isMuted
attribute
.
"
)
;
}
)
;
await
toggleMute
(
browser
pipWin
)
;
ok
(
!
(
await
isVideoMuted
(
browser
videoID
)
)
"
The
audio
is
playing
.
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
muteButton
=
content
.
document
.
querySelector
(
"
.
mute
-
button
"
)
;
ok
(
!
muteButton
.
getAttribute
(
"
isMuted
"
)
"
muteButton
does
not
have
isMuted
attribute
"
)
;
}
)
;
let
pipClosed
=
BrowserTestUtils
.
domWindowClosed
(
pipWin
)
;
let
closeButton
=
pipWin
.
document
.
getElementById
(
"
close
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
closeButton
{
}
pipWin
)
;
await
pipClosed
;
}
)
;
}
)
;
add_task
(
async
function
test_mock_play_pause_button
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
browser
=
>
{
await
ensureVideosReady
(
browser
)
;
await
setupVideoListeners
(
browser
)
;
let
videoID
=
"
mock
-
video
-
controls
"
;
let
pipWin
=
await
triggerPictureInPicture
(
browser
videoID
)
;
ok
(
pipWin
"
Got
Picture
-
in
-
Picture
window
.
"
)
;
info
(
"
Test
a
wrapper
method
with
a
correct
selector
"
)
;
let
playbackPromise
=
waitForVideoEvent
(
browser
"
playing
"
)
;
let
playPause
=
pipWin
.
document
.
getElementById
(
"
playpause
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
playPause
{
}
pipWin
)
;
await
playbackPromise
;
ok
(
!
(
await
isVideoPaused
(
browser
videoID
)
)
"
The
video
is
playing
.
"
)
;
info
(
"
Test
a
wrapper
method
with
an
incorrect
selector
"
)
;
let
pausePromise
=
waitForVideoEvent
(
browser
"
pause
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
playPause
{
}
pipWin
)
;
await
pausePromise
;
ok
(
await
isVideoPaused
(
browser
videoID
)
"
The
video
is
paused
.
"
)
;
let
pipClosed
=
BrowserTestUtils
.
domWindowClosed
(
pipWin
)
;
let
closeButton
=
pipWin
.
document
.
getElementById
(
"
close
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
closeButton
{
}
pipWin
)
;
await
pipClosed
;
}
)
;
}
)
;
function
waitForVideoEvent
(
browser
eventType
)
{
return
BrowserTestUtils
.
waitForContentEvent
(
browser
eventType
true
)
;
}
async
function
toggleMute
(
browser
pipWin
)
{
let
mutedPromise
=
waitForVideoEvent
(
browser
"
volumechange
"
)
;
let
audioButton
=
pipWin
.
document
.
getElementById
(
"
audio
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
audioButton
{
}
pipWin
)
;
await
mutedPromise
;
}
async
function
setupVideoListeners
(
browser
)
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
video
=
content
.
document
.
querySelector
(
"
video
"
)
;
video
.
addEventListener
(
"
playing
"
async
(
)
=
>
{
info
(
"
Got
playing
event
!
"
)
;
let
playPauseButton
=
content
.
document
.
querySelector
(
"
.
play
-
pause
-
button
"
)
;
ok
(
!
playPauseButton
.
getAttribute
(
"
isPaused
"
)
"
playPauseButton
does
not
have
isPaused
attribute
.
"
)
;
}
)
;
video
.
addEventListener
(
"
pause
"
async
(
)
=
>
{
info
(
"
Got
pause
event
!
"
)
;
let
playPauseButton
=
content
.
document
.
querySelector
(
"
.
play
-
pause
-
button
"
)
;
ok
(
!
playPauseButton
.
getAttribute
(
"
isPaused
"
)
"
playPauseButton
still
doesn
'
t
have
isPaused
attribute
.
"
)
;
}
)
;
}
)
;
}
