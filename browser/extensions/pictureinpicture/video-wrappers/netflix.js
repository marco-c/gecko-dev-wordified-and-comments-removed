"
use
strict
"
;
class
PictureInPictureVideoWrapper
{
constructor
(
)
{
let
netflixPlayerAPI
=
window
.
wrappedJSObject
.
netflix
.
appContext
.
state
.
playerApp
.
getAPI
(
)
.
videoPlayer
;
let
sessionId
=
null
;
for
(
let
id
of
netflixPlayerAPI
.
getAllPlayerSessionIds
(
)
)
{
if
(
id
.
startsWith
(
"
watch
-
"
)
)
{
sessionId
=
id
;
break
;
}
}
this
.
player
=
netflixPlayerAPI
.
getVideoPlayerBySessionId
(
sessionId
)
;
}
getCurrentTime
(
)
{
return
this
.
player
.
getCurrentTime
(
)
/
1000
;
}
getDuration
(
)
{
return
this
.
player
.
getDuration
(
)
/
1000
;
}
play
(
)
{
this
.
player
.
play
(
)
;
}
pause
(
)
{
this
.
player
.
pause
(
)
;
}
setCaptionContainerObserver
(
video
updateCaptionsFunction
)
{
let
container
=
document
.
querySelector
(
"
.
watch
-
video
"
)
;
if
(
container
)
{
updateCaptionsFunction
(
"
"
)
;
const
callback
=
function
(
)
{
let
text
=
container
.
querySelector
(
"
.
player
-
timedtext
"
)
.
innerText
;
updateCaptionsFunction
(
text
)
;
}
;
callback
(
[
1
]
null
)
;
this
.
captionsObserver
=
new
MutationObserver
(
callback
)
;
this
.
captionsObserver
.
observe
(
container
{
attributes
:
false
childList
:
true
subtree
:
true
}
)
;
}
}
removeCaptionContainerObserver
(
)
{
this
.
captionsObserver
?
.
disconnect
(
)
;
}
setCurrentTime
(
video
position
)
{
this
.
player
.
seek
(
position
*
1000
)
;
}
setVolume
(
video
volume
)
{
this
.
player
.
setVolume
(
volume
)
;
}
getVolume
(
)
{
return
this
.
player
.
getVolume
(
)
;
}
setMuted
(
video
shouldMute
)
{
this
.
player
.
setMuted
(
shouldMute
)
;
}
isMuted
(
)
{
return
this
.
player
.
isMuted
(
)
;
}
}
this
.
PictureInPictureVideoWrapper
=
PictureInPictureVideoWrapper
;
