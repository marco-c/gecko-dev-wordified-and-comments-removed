const
Cm
=
Components
.
manager
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
PRESENTATION_DEVICE_PROMPT_PATH
=
"
chrome
:
/
/
presentation
/
content
/
PresentationDevicePrompt
.
jsm
"
;
function
log
(
aMsg
)
{
}
function
install
(
aData
aReason
)
{
}
function
uninstall
(
aData
aReason
)
{
}
function
startup
(
aData
aReason
)
{
log
(
"
startup
"
)
;
Presentation
.
init
(
)
;
}
function
shutdown
(
aData
aReason
)
{
log
(
"
shutdown
"
)
;
Presentation
.
uninit
(
)
;
}
function
Factory
(
)
{
}
Factory
.
prototype
=
{
register
(
targetConstructor
)
{
let
proto
=
targetConstructor
.
prototype
;
this
.
_classID
=
proto
.
classID
;
let
factory
=
XPCOMUtils
.
_getFactory
(
targetConstructor
)
;
this
.
_factory
=
factory
;
let
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
registerFactory
(
proto
.
classID
proto
.
classDescription
proto
.
contractID
factory
)
;
}
unregister
(
)
{
let
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
unregisterFactory
(
this
.
_classID
this
.
_factory
)
;
this
.
_factory
=
null
;
this
.
_classID
=
null
;
}
}
;
var
Presentation
=
{
init
(
)
{
log
(
"
init
"
)
;
let
{
PresentationDevicePrompt
}
=
ChromeUtils
.
import
(
PRESENTATION_DEVICE_PROMPT_PATH
{
}
)
;
this
.
PresentationDevicePrompt
=
PresentationDevicePrompt
;
this
.
_register
(
)
;
}
uninit
(
)
{
log
(
"
uninit
"
)
;
this
.
_unregister
(
)
;
delete
this
.
PresentationDevicePrompt
;
Cu
.
unload
(
PRESENTATION_DEVICE_PROMPT_PATH
)
;
}
_register
(
)
{
log
(
"
_register
"
)
;
this
.
_devicePromptFactory
=
new
Factory
(
)
;
this
.
_devicePromptFactory
.
register
(
this
.
PresentationDevicePrompt
)
;
}
_unregister
(
)
{
log
(
"
_unregister
"
)
;
this
.
_devicePromptFactory
.
unregister
(
)
;
delete
this
.
_devicePromptFactory
;
}
}
;
