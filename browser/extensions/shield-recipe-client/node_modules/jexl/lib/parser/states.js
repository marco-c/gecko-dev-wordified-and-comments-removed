var
h
=
require
(
'
.
/
handlers
'
)
;
exports
.
states
=
{
expectOperand
:
{
tokenTypes
:
{
literal
:
{
toState
:
'
expectBinOp
'
}
identifier
:
{
toState
:
'
identifier
'
}
unaryOp
:
{
}
openParen
:
{
toState
:
'
subExpression
'
}
openCurl
:
{
toState
:
'
expectObjKey
'
handler
:
h
.
objStart
}
dot
:
{
toState
:
'
traverse
'
}
openBracket
:
{
toState
:
'
arrayVal
'
handler
:
h
.
arrayStart
}
}
}
expectBinOp
:
{
tokenTypes
:
{
binaryOp
:
{
toState
:
'
expectOperand
'
}
pipe
:
{
toState
:
'
expectTransform
'
}
dot
:
{
toState
:
'
traverse
'
}
question
:
{
toState
:
'
ternaryMid
'
handler
:
h
.
ternaryStart
}
}
completable
:
true
}
expectTransform
:
{
tokenTypes
:
{
identifier
:
{
toState
:
'
postTransform
'
handler
:
h
.
transform
}
}
}
expectObjKey
:
{
tokenTypes
:
{
identifier
:
{
toState
:
'
expectKeyValSep
'
handler
:
h
.
objKey
}
closeCurl
:
{
toState
:
'
expectBinOp
'
}
}
}
expectKeyValSep
:
{
tokenTypes
:
{
colon
:
{
toState
:
'
objVal
'
}
}
}
postTransform
:
{
tokenTypes
:
{
openParen
:
{
toState
:
'
argVal
'
}
binaryOp
:
{
toState
:
'
expectOperand
'
}
dot
:
{
toState
:
'
traverse
'
}
openBracket
:
{
toState
:
'
filter
'
}
pipe
:
{
toState
:
'
expectTransform
'
}
}
completable
:
true
}
postTransformArgs
:
{
tokenTypes
:
{
binaryOp
:
{
toState
:
'
expectOperand
'
}
dot
:
{
toState
:
'
traverse
'
}
openBracket
:
{
toState
:
'
filter
'
}
pipe
:
{
toState
:
'
expectTransform
'
}
}
completable
:
true
}
identifier
:
{
tokenTypes
:
{
binaryOp
:
{
toState
:
'
expectOperand
'
}
dot
:
{
toState
:
'
traverse
'
}
openBracket
:
{
toState
:
'
filter
'
}
pipe
:
{
toState
:
'
expectTransform
'
}
question
:
{
toState
:
'
ternaryMid
'
handler
:
h
.
ternaryStart
}
}
completable
:
true
}
traverse
:
{
tokenTypes
:
{
'
identifier
'
:
{
toState
:
'
identifier
'
}
}
}
filter
:
{
subHandler
:
h
.
filter
endStates
:
{
closeBracket
:
'
identifier
'
}
}
subExpression
:
{
subHandler
:
h
.
subExpression
endStates
:
{
closeParen
:
'
expectBinOp
'
}
}
argVal
:
{
subHandler
:
h
.
argVal
endStates
:
{
comma
:
'
argVal
'
closeParen
:
'
postTransformArgs
'
}
}
objVal
:
{
subHandler
:
h
.
objVal
endStates
:
{
comma
:
'
expectObjKey
'
closeCurl
:
'
expectBinOp
'
}
}
arrayVal
:
{
subHandler
:
h
.
arrayVal
endStates
:
{
comma
:
'
arrayVal
'
closeBracket
:
'
expectBinOp
'
}
}
ternaryMid
:
{
subHandler
:
h
.
ternaryMid
endStates
:
{
colon
:
'
ternaryEnd
'
}
}
ternaryEnd
:
{
subHandler
:
h
.
ternaryEnd
completable
:
true
}
}
;
