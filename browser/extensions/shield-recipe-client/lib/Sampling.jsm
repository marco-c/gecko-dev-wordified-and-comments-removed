"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
"
crypto
"
"
TextEncoder
"
]
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
Sampling
"
]
;
const
log
=
Log
.
repository
.
getLogger
(
"
extensions
.
shield
-
recipe
-
client
"
)
;
function
fractionToKey
(
frac
)
{
const
hashBits
=
48
;
const
hashLength
=
hashBits
/
4
;
if
(
frac
<
0
|
|
frac
>
1
)
{
throw
new
Error
(
frac
must
be
between
0
and
1
inclusive
(
got
{
frac
}
)
)
;
}
const
mult
=
Math
.
pow
(
2
hashBits
)
-
1
;
const
inDecimal
=
Math
.
floor
(
frac
*
mult
)
;
let
hexDigits
=
inDecimal
.
toString
(
16
)
;
if
(
hexDigits
.
length
<
hashLength
)
{
hexDigits
=
Array
(
hashLength
-
hexDigits
.
length
+
1
)
.
join
(
"
0
"
)
+
hexDigits
;
}
if
(
hexDigits
.
length
>
hashLength
)
{
hexDigits
=
Array
(
hashLength
+
1
)
.
join
(
"
f
"
)
;
}
return
hexDigits
;
}
function
bufferToHex
(
buffer
)
{
const
hexCodes
=
[
]
;
const
view
=
new
DataView
(
buffer
)
;
for
(
let
i
=
0
;
i
<
view
.
byteLength
;
i
+
=
4
)
{
const
value
=
view
.
getUint32
(
i
)
;
hexCodes
.
push
(
value
.
toString
(
16
)
.
padStart
(
8
"
0
"
)
)
;
}
return
hexCodes
.
join
(
"
"
)
;
}
this
.
Sampling
=
{
stableSample
(
input
rate
)
{
const
hasher
=
crypto
.
subtle
;
return
hasher
.
digest
(
"
SHA
-
256
"
new
TextEncoder
(
"
utf
-
8
"
)
.
encode
(
JSON
.
stringify
(
input
)
)
)
.
then
(
hash
=
>
{
const
inputHash
=
bufferToHex
(
hash
)
.
slice
(
0
12
)
;
const
samplePoint
=
fractionToKey
(
rate
)
;
if
(
samplePoint
.
length
!
=
=
12
|
|
inputHash
.
length
!
=
=
12
)
{
throw
new
Error
(
"
Unexpected
hash
length
"
)
;
}
return
inputHash
<
samplePoint
;
}
)
.
catch
(
error
=
>
{
log
.
error
(
Error
:
{
error
}
)
;
}
)
;
}
}
;
