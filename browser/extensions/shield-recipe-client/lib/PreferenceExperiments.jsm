"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CleanupManager
"
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
CleanupManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
JSONFile
"
"
resource
:
/
/
gre
/
modules
/
JSONFile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
LogManager
"
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
LogManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Preferences
"
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
TelemetryEnvironment
"
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
PreferenceExperiments
"
]
;
const
EXPERIMENT_FILE
=
"
shield
-
preference
-
experiments
.
json
"
;
const
PREFERENCE_TYPE_MAP
=
{
boolean
:
Services
.
prefs
.
PREF_BOOL
string
:
Services
.
prefs
.
PREF_STRING
integer
:
Services
.
prefs
.
PREF_INT
}
;
const
DefaultPreferences
=
new
Preferences
(
{
defaultBranch
:
true
}
)
;
const
PreferenceBranchType
=
{
user
:
Preferences
default
:
DefaultPreferences
}
;
let
storePromise
;
function
ensureStorage
(
)
{
if
(
storePromise
=
=
=
undefined
)
{
const
path
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
EXPERIMENT_FILE
)
;
const
storage
=
new
JSONFile
(
{
path
}
)
;
storePromise
=
storage
.
load
(
)
.
then
(
(
)
=
>
storage
)
;
}
return
storePromise
;
}
const
log
=
LogManager
.
getLogger
(
"
preference
-
experiments
"
)
;
let
experimentObservers
=
new
Map
(
)
;
CleanupManager
.
addCleanupHandler
(
(
)
=
>
PreferenceExperiments
.
stopAllObservers
(
)
)
;
this
.
PreferenceExperiments
=
{
async
init
(
)
{
for
(
const
experiment
of
await
this
.
getAllActive
(
)
)
{
if
(
experiment
.
preferenceBranchType
=
=
=
"
default
"
)
{
DefaultPreferences
.
set
(
experiment
.
preferenceName
experiment
.
preferenceValue
)
;
}
if
(
Preferences
.
get
(
experiment
.
preferenceName
undefined
)
!
=
=
experiment
.
preferenceValue
)
{
log
.
info
(
Stopping
experiment
"
{
experiment
.
name
}
"
because
its
value
changed
)
;
await
this
.
stop
(
experiment
.
name
false
)
;
continue
;
}
TelemetryEnvironment
.
setExperimentActive
(
experiment
.
name
experiment
.
branch
)
;
this
.
startObserver
(
experiment
.
name
experiment
.
preferenceName
experiment
.
preferenceValue
)
;
}
}
withMockExperiments
(
testFunction
)
{
return
async
function
inner
(
.
.
.
args
)
{
const
oldPromise
=
storePromise
;
const
mockExperiments
=
{
}
;
storePromise
=
Promise
.
resolve
(
{
data
:
mockExperiments
saveSoon
(
)
{
}
}
)
;
const
oldObservers
=
experimentObservers
;
experimentObservers
=
new
Map
(
)
;
try
{
await
testFunction
(
.
.
.
args
mockExperiments
)
;
}
finally
{
storePromise
=
oldPromise
;
PreferenceExperiments
.
stopAllObservers
(
)
;
experimentObservers
=
oldObservers
;
}
}
;
}
async
clearAllExperimentStorage
(
)
{
const
store
=
await
ensureStorage
(
)
;
store
.
data
=
{
}
;
store
.
saveSoon
(
)
;
}
async
start
(
{
name
branch
preferenceName
preferenceValue
preferenceBranchType
preferenceType
}
)
{
log
.
debug
(
PreferenceExperiments
.
start
(
{
name
}
{
branch
}
)
)
;
const
store
=
await
ensureStorage
(
)
;
if
(
name
in
store
.
data
)
{
throw
new
Error
(
A
preference
experiment
named
"
{
name
}
"
already
exists
.
)
;
}
const
activeExperiments
=
Object
.
values
(
store
.
data
)
.
filter
(
e
=
>
!
e
.
expired
)
;
const
hasConflictingExperiment
=
activeExperiments
.
some
(
e
=
>
e
.
preferenceName
=
=
=
preferenceName
)
;
if
(
hasConflictingExperiment
)
{
throw
new
Error
(
Another
preference
experiment
for
the
pref
"
{
preferenceName
}
"
is
currently
active
.
)
;
}
const
preferences
=
PreferenceBranchType
[
preferenceBranchType
]
;
if
(
!
preferences
)
{
throw
new
Error
(
Invalid
value
for
preferenceBranchType
:
{
preferenceBranchType
}
)
;
}
const
experiment
=
{
name
branch
expired
:
false
lastSeen
:
new
Date
(
)
.
toJSON
(
)
preferenceName
preferenceValue
preferenceType
previousPreferenceValue
:
preferences
.
get
(
preferenceName
undefined
)
preferenceBranchType
}
;
const
prevPrefType
=
Services
.
prefs
.
getPrefType
(
preferenceName
)
;
const
givenPrefType
=
PREFERENCE_TYPE_MAP
[
preferenceType
]
;
if
(
!
preferenceType
|
|
!
givenPrefType
)
{
throw
new
Error
(
Invalid
preferenceType
provided
(
given
"
{
preferenceType
}
"
)
)
;
}
if
(
prevPrefType
!
=
=
Services
.
prefs
.
PREF_INVALID
&
&
prevPrefType
!
=
=
givenPrefType
)
{
throw
new
Error
(
Previous
preference
value
is
of
type
"
{
prevPrefType
}
"
but
was
given
+
"
{
givenPrefType
}
"
(
{
preferenceType
}
)
)
;
}
preferences
.
set
(
preferenceName
preferenceValue
)
;
PreferenceExperiments
.
startObserver
(
name
preferenceName
preferenceValue
)
;
store
.
data
[
name
]
=
experiment
;
store
.
saveSoon
(
)
;
TelemetryEnvironment
.
setExperimentActive
(
name
branch
)
;
}
startObserver
(
experimentName
preferenceName
preferenceValue
)
{
log
.
debug
(
PreferenceExperiments
.
startObserver
(
{
experimentName
}
)
)
;
if
(
experimentObservers
.
has
(
experimentName
)
)
{
throw
new
Error
(
An
observer
for
the
preference
experiment
{
experimentName
}
is
already
active
.
)
;
}
const
observerInfo
=
{
preferenceName
observer
(
newValue
)
{
if
(
newValue
!
=
=
preferenceValue
)
{
PreferenceExperiments
.
stop
(
experimentName
false
)
;
}
}
}
;
experimentObservers
.
set
(
experimentName
observerInfo
)
;
Preferences
.
observe
(
preferenceName
observerInfo
.
observer
)
;
}
hasObserver
(
experimentName
)
{
log
.
debug
(
PreferenceExperiments
.
hasObserver
(
{
experimentName
}
)
)
;
return
experimentObservers
.
has
(
experimentName
)
;
}
stopObserver
(
experimentName
)
{
log
.
debug
(
PreferenceExperiments
.
stopObserver
(
{
experimentName
}
)
)
;
if
(
!
experimentObservers
.
has
(
experimentName
)
)
{
throw
new
Error
(
No
observer
for
the
preference
experiment
{
experimentName
}
found
.
)
;
}
const
{
preferenceName
observer
}
=
experimentObservers
.
get
(
experimentName
)
;
Preferences
.
ignore
(
preferenceName
observer
)
;
experimentObservers
.
delete
(
experimentName
)
;
}
stopAllObservers
(
)
{
log
.
debug
(
"
PreferenceExperiments
.
stopAllObservers
(
)
"
)
;
for
(
const
{
preferenceName
observer
}
of
experimentObservers
.
values
(
)
)
{
Preferences
.
ignore
(
preferenceName
observer
)
;
}
experimentObservers
.
clear
(
)
;
}
async
markLastSeen
(
experimentName
)
{
log
.
debug
(
PreferenceExperiments
.
markLastSeen
(
{
experimentName
}
)
)
;
const
store
=
await
ensureStorage
(
)
;
if
(
!
(
experimentName
in
store
.
data
)
)
{
throw
new
Error
(
Could
not
find
a
preference
experiment
named
"
{
experimentName
}
"
)
;
}
store
.
data
[
experimentName
]
.
lastSeen
=
new
Date
(
)
.
toJSON
(
)
;
store
.
saveSoon
(
)
;
}
async
stop
(
experimentName
resetValue
=
true
)
{
log
.
debug
(
PreferenceExperiments
.
stop
(
{
experimentName
}
)
)
;
const
store
=
await
ensureStorage
(
)
;
if
(
!
(
experimentName
in
store
.
data
)
)
{
throw
new
Error
(
Could
not
find
a
preference
experiment
named
"
{
experimentName
}
"
)
;
}
const
experiment
=
store
.
data
[
experimentName
]
;
if
(
experiment
.
expired
)
{
throw
new
Error
(
Cannot
stop
preference
experiment
"
{
experimentName
}
"
because
it
is
already
expired
)
;
}
if
(
PreferenceExperiments
.
hasObserver
(
experimentName
)
)
{
PreferenceExperiments
.
stopObserver
(
experimentName
)
;
}
if
(
resetValue
)
{
const
{
preferenceName
previousPreferenceValue
preferenceBranchType
}
=
experiment
;
const
preferences
=
PreferenceBranchType
[
preferenceBranchType
]
;
if
(
previousPreferenceValue
!
=
=
undefined
)
{
preferences
.
set
(
preferenceName
previousPreferenceValue
)
;
}
else
{
preferences
.
reset
(
preferenceName
)
;
}
}
experiment
.
expired
=
true
;
store
.
saveSoon
(
)
;
TelemetryEnvironment
.
setExperimentInactive
(
experimentName
experiment
.
branch
)
;
}
async
get
(
experimentName
)
{
log
.
debug
(
PreferenceExperiments
.
get
(
{
experimentName
}
)
)
;
const
store
=
await
ensureStorage
(
)
;
if
(
!
(
experimentName
in
store
.
data
)
)
{
throw
new
Error
(
Could
not
find
a
preference
experiment
named
"
{
experimentName
}
"
)
;
}
return
Object
.
assign
(
{
}
store
.
data
[
experimentName
]
)
;
}
async
getAll
(
)
{
const
store
=
await
ensureStorage
(
)
;
return
Object
.
values
(
store
.
data
)
.
map
(
experiment
=
>
Object
.
assign
(
{
}
experiment
)
)
;
}
async
getAllActive
(
)
{
log
.
debug
(
"
PreferenceExperiments
.
getAllActive
(
)
"
)
;
const
store
=
await
ensureStorage
(
)
;
return
Object
.
values
(
store
.
data
)
.
filter
(
e
=
>
!
e
.
expired
)
.
map
(
e
=
>
Object
.
assign
(
{
}
e
)
)
;
}
async
has
(
experimentName
)
{
log
.
debug
(
PreferenceExperiments
.
has
(
{
experimentName
}
)
)
;
const
store
=
await
ensureStorage
(
)
;
return
experimentName
in
store
.
data
;
}
}
;
