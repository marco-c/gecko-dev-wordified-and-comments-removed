"
use
strict
"
;
const
{
utils
:
Cu
interfaces
:
Ci
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
LogManager
"
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
LogManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
RecipeRunner
"
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
RecipeRunner
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CleanupManager
"
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
CleanupManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PreferenceExperiments
"
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
PreferenceExperiments
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AboutPages
"
"
resource
:
/
/
shield
-
recipe
-
client
-
content
/
AboutPages
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ShieldPreferences
"
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
ShieldPreferences
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonStudies
"
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
AddonStudies
.
jsm
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
ShieldRecipeClient
"
]
;
const
{
PREF_STRING
PREF_BOOL
PREF_INT
}
=
Ci
.
nsIPrefBranch
;
const
REASONS
=
{
APP_STARTUP
:
1
APP_SHUTDOWN
:
2
ADDON_ENABLE
:
3
ADDON_DISABLE
:
4
ADDON_INSTALL
:
5
ADDON_UNINSTALL
:
6
ADDON_UPGRADE
:
7
ADDON_DOWNGRADE
:
8
}
;
const
PREF_DEV_MODE
=
"
extensions
.
shield
-
recipe
-
client
.
dev_mode
"
;
const
PREF_LOGGING_LEVEL
=
"
extensions
.
shield
-
recipe
-
client
.
logging
.
level
"
;
let
log
=
null
;
this
.
ShieldRecipeClient
=
{
async
startup
(
)
{
LogManager
.
configure
(
Services
.
prefs
.
getIntPref
(
PREF_LOGGING_LEVEL
)
)
;
Services
.
prefs
.
addObserver
(
PREF_LOGGING_LEVEL
LogManager
.
configure
)
;
CleanupManager
.
addCleanupHandler
(
(
)
=
>
Services
.
prefs
.
removeObserver
(
PREF_LOGGING_LEVEL
LogManager
.
configure
)
)
;
log
=
LogManager
.
getLogger
(
"
bootstrap
"
)
;
try
{
await
AboutPages
.
init
(
)
;
}
catch
(
err
)
{
log
.
error
(
"
Failed
to
initialize
about
pages
:
"
err
)
;
}
try
{
await
AddonStudies
.
init
(
)
;
}
catch
(
err
)
{
log
.
error
(
"
Failed
to
initialize
addon
studies
:
"
err
)
;
}
try
{
await
PreferenceExperiments
.
init
(
)
;
}
catch
(
err
)
{
log
.
error
(
"
Failed
to
initialize
preference
experiments
:
"
err
)
;
}
try
{
ShieldPreferences
.
init
(
)
;
}
catch
(
err
)
{
log
.
error
(
"
Failed
to
initialize
preferences
UI
:
"
err
)
;
}
await
RecipeRunner
.
init
(
)
;
}
shutdown
(
reason
)
{
CleanupManager
.
cleanup
(
)
;
}
}
;
