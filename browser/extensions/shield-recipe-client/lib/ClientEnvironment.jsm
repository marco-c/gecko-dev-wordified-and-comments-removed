"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ShellService
"
"
resource
:
/
/
/
modules
/
ShellService
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
TelemetryArchive
"
"
resource
:
/
/
gre
/
modules
/
TelemetryArchive
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NormandyApi
"
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
NormandyApi
.
jsm
"
)
;
const
{
generateUUID
}
=
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
ClientEnvironment
"
]
;
let
_classifyRequest
=
null
;
this
.
ClientEnvironment
=
{
getClientClassification
:
Task
.
async
(
function
*
(
)
{
if
(
!
_classifyRequest
)
{
_classifyRequest
=
NormandyApi
.
classifyClient
(
)
;
}
return
yield
_classifyRequest
;
}
)
clearClassifyCache
(
)
{
_classifyRequest
=
null
;
}
withMockClassify
(
data
testGenerator
)
{
return
function
*
inner
(
)
{
const
oldRequest
=
_classifyRequest
;
_classifyRequest
=
Promise
.
resolve
(
data
)
;
yield
testGenerator
(
)
;
_classifyRequest
=
oldRequest
;
}
;
}
getEnvironment
(
)
{
const
environment
=
{
}
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
userId
"
(
)
=
>
{
let
id
=
Preferences
.
get
(
"
extensions
.
shield
-
recipe
-
client
.
user_id
"
"
"
)
;
if
(
!
id
)
{
id
=
generateUUID
(
)
.
toString
(
)
.
slice
(
1
-
1
)
;
Preferences
.
set
(
"
extensions
.
shield
-
recipe
-
client
.
user_id
"
id
)
;
}
return
id
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
country
"
(
)
=
>
{
return
ClientEnvironment
.
getClientClassification
(
)
.
then
(
classification
=
>
classification
.
country
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
request_time
"
(
)
=
>
{
return
ClientEnvironment
.
getClientClassification
(
)
.
then
(
classification
=
>
classification
.
request_time
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
distribution
"
(
)
=
>
{
return
Preferences
.
get
(
"
distribution
.
id
"
"
default
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
telemetry
"
Task
.
async
(
function
*
(
)
{
const
pings
=
yield
TelemetryArchive
.
promiseArchivedPingList
(
)
;
const
mostRecentPings
=
{
}
;
for
(
const
ping
of
pings
)
{
if
(
ping
.
type
in
mostRecentPings
)
{
if
(
mostRecentPings
[
ping
.
type
]
.
timeStampCreated
<
ping
.
timeStampCreated
)
{
mostRecentPings
[
ping
.
type
]
=
ping
;
}
}
else
{
mostRecentPings
[
ping
.
type
]
=
ping
;
}
}
const
telemetry
=
{
}
;
for
(
const
key
in
mostRecentPings
)
{
const
ping
=
mostRecentPings
[
key
]
;
telemetry
[
ping
.
type
]
=
yield
TelemetryArchive
.
promiseArchivedPingById
(
ping
.
id
)
;
}
return
telemetry
;
}
)
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
version
"
(
)
=
>
{
return
Services
.
appinfo
.
version
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
channel
"
(
)
=
>
{
return
Services
.
appinfo
.
defaultUpdateChannel
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
isDefaultBrowser
"
(
)
=
>
{
return
ShellService
.
isDefaultBrowser
(
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
searchEngine
"
Task
.
async
(
function
*
(
)
{
const
searchInitialized
=
yield
new
Promise
(
resolve
=
>
Services
.
search
.
init
(
resolve
)
)
;
if
(
Components
.
isSuccessCode
(
searchInitialized
)
)
{
return
Services
.
search
.
defaultEngine
.
identifier
;
}
return
null
;
}
)
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
syncSetup
"
(
)
=
>
{
return
Preferences
.
isSet
(
"
services
.
sync
.
username
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
syncDesktopDevices
"
(
)
=
>
{
return
Preferences
.
get
(
"
services
.
sync
.
clients
.
devices
.
desktop
"
0
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
syncMobileDevices
"
(
)
=
>
{
return
Preferences
.
get
(
"
services
.
sync
.
clients
.
devices
.
mobile
"
0
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
syncTotalDevices
"
(
)
=
>
{
return
Preferences
.
get
(
"
services
.
sync
.
numClients
"
0
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
plugins
"
Task
.
async
(
function
*
(
)
{
const
plugins
=
yield
AddonManager
.
getAddonsByTypes
(
[
"
plugin
"
]
)
;
return
plugins
.
reduce
(
(
pluginMap
plugin
)
=
>
{
pluginMap
[
plugin
.
name
]
=
{
name
:
plugin
.
name
description
:
plugin
.
description
version
:
plugin
.
version
}
;
return
pluginMap
;
}
{
}
)
;
}
)
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
locale
"
(
)
=
>
{
return
Cc
[
"
mozilla
.
org
/
chrome
/
chrome
-
registry
;
1
"
]
.
getService
(
Ci
.
nsIXULChromeRegistry
)
.
getSelectedLocale
(
"
browser
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
environment
"
doNotTrack
"
(
)
=
>
{
return
Preferences
.
get
(
"
privacy
.
donottrackheader
.
enabled
"
false
)
;
}
)
;
return
environment
;
}
}
;
