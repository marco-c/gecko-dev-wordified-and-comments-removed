"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
LogManager
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
NormandyDriver
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
EnvExpressions
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
NormandyApi
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
SandboxManager
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
"
fetch
"
]
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
RecipeRunner
"
]
;
const
log
=
LogManager
.
getLogger
(
"
recipe
-
runner
"
)
;
const
prefs
=
Services
.
prefs
.
getBranch
(
"
extensions
.
shield
-
recipe
-
client
.
"
)
;
this
.
RecipeRunner
=
{
init
(
)
{
if
(
!
this
.
checkPrefs
(
)
)
{
return
;
}
let
delay
;
if
(
prefs
.
getBoolPref
(
"
dev_mode
"
)
)
{
delay
=
0
;
}
else
{
delay
=
prefs
.
getIntPref
(
"
startup_delay_seconds
"
)
*
1000
;
}
setTimeout
(
this
.
start
.
bind
(
this
)
delay
)
;
}
checkPrefs
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
toolkit
.
telemetry
.
unified
"
)
)
{
log
.
info
(
"
Disabling
RecipeRunner
because
Unified
Telemetry
is
disabled
.
"
)
;
return
false
;
}
if
(
!
prefs
.
getBoolPref
(
"
enabled
"
)
)
{
log
.
info
(
"
Recipe
Client
is
disabled
.
"
)
;
return
false
;
}
const
apiUrl
=
prefs
.
getCharPref
(
"
api_url
"
)
;
if
(
!
apiUrl
|
|
!
apiUrl
.
startsWith
(
"
https
:
/
/
"
)
)
{
log
.
error
(
Non
HTTPS
URL
provided
for
extensions
.
shield
-
recipe
-
client
.
api_url
:
{
apiUrl
}
)
;
return
false
;
}
return
true
;
}
start
:
Task
.
async
(
function
*
(
)
{
let
recipes
;
try
{
recipes
=
yield
NormandyApi
.
fetchRecipes
(
{
enabled
:
true
}
)
;
}
catch
(
e
)
{
const
apiUrl
=
prefs
.
getCharPref
(
"
api_url
"
)
;
log
.
error
(
Could
not
fetch
recipes
from
{
apiUrl
}
:
"
{
e
}
"
)
;
return
;
}
let
extraContext
;
try
{
extraContext
=
yield
this
.
getExtraContext
(
)
;
}
catch
(
e
)
{
log
.
warn
(
Couldn
'
t
get
extra
filter
context
:
{
e
}
)
;
extraContext
=
{
}
;
}
const
recipesToRun
=
[
]
;
for
(
const
recipe
of
recipes
)
{
if
(
yield
this
.
checkFilter
(
recipe
extraContext
)
)
{
recipesToRun
.
push
(
recipe
)
;
}
}
if
(
recipesToRun
.
length
=
=
=
0
)
{
log
.
debug
(
"
No
recipes
to
execute
"
)
;
}
else
{
for
(
const
recipe
of
recipesToRun
)
{
try
{
log
.
debug
(
Executing
recipe
"
{
recipe
.
name
}
"
(
action
=
{
recipe
.
action
}
)
)
;
yield
this
.
executeRecipe
(
recipe
extraContext
)
;
}
catch
(
e
)
{
log
.
error
(
Could
not
execute
recipe
{
recipe
.
name
}
:
e
)
;
}
}
}
}
)
getExtraContext
(
)
{
return
NormandyApi
.
classifyClient
(
)
.
then
(
clientData
=
>
(
{
normandy
:
clientData
}
)
)
;
}
checkFilter
(
recipe
extraContext
)
{
return
EnvExpressions
.
eval
(
recipe
.
filter_expression
extraContext
)
.
then
(
result
=
>
{
return
!
!
result
;
}
)
.
catch
(
error
=
>
{
log
.
error
(
Error
checking
filter
for
"
{
recipe
.
name
}
"
)
;
log
.
error
(
Filter
:
"
{
recipe
.
filter_expression
}
"
)
;
log
.
error
(
Error
:
"
{
error
}
"
)
;
}
)
;
}
executeRecipe
:
Task
.
async
(
function
*
(
recipe
extraContext
)
{
const
action
=
yield
NormandyApi
.
fetchAction
(
recipe
.
action
)
;
const
response
=
yield
fetch
(
action
.
implementation_url
)
;
const
actionScript
=
yield
response
.
text
(
)
;
yield
this
.
executeAction
(
recipe
extraContext
actionScript
)
;
}
)
executeAction
(
recipe
extraContext
actionScript
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
const
sandboxManager
=
new
SandboxManager
(
)
;
const
{
sandbox
}
=
sandboxManager
;
const
prepScript
=
function
registerAction
(
name
Action
)
{
let
a
=
new
Action
(
sandboxedDriver
sandboxedRecipe
)
;
a
.
execute
(
)
.
then
(
actionFinished
)
.
catch
(
actionFailed
)
;
}
;
this
.
window
=
this
;
this
.
registerAction
=
registerAction
;
this
.
setTimeout
=
sandboxedDriver
.
setTimeout
;
this
.
clearTimeout
=
sandboxedDriver
.
clearTimeout
;
;
const
driver
=
new
NormandyDriver
(
sandboxManager
extraContext
)
;
sandbox
.
sandboxedDriver
=
Cu
.
cloneInto
(
driver
sandbox
{
cloneFunctions
:
true
}
)
;
sandbox
.
sandboxedRecipe
=
Cu
.
cloneInto
(
recipe
sandbox
)
;
sandbox
.
actionFinished
=
result
=
>
{
const
clonedResult
=
Cu
.
cloneInto
(
result
{
}
)
;
sandboxManager
.
removeHold
(
"
recipeExecution
"
)
;
resolve
(
clonedResult
)
;
}
;
sandbox
.
actionFailed
=
err
=
>
{
Cu
.
reportError
(
err
)
;
const
message
=
err
.
message
;
sandboxManager
.
removeHold
(
"
recipeExecution
"
)
;
reject
(
new
Error
(
message
)
)
;
}
;
sandboxManager
.
addHold
(
"
recipeExecution
"
)
;
Cu
.
evalInSandbox
(
prepScript
sandbox
)
;
Cu
.
evalInSandbox
(
actionScript
sandbox
)
;
}
)
;
}
}
;
