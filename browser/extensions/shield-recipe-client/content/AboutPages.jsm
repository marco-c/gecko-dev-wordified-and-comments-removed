"
use
strict
"
;
const
{
interfaces
:
Ci
results
:
Cr
manager
:
Cm
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CleanupManager
"
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
CleanupManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonStudies
"
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
AddonStudies
.
jsm
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
AboutPages
"
]
;
const
SHIELD_LEARN_MORE_URL_PREF
=
"
extensions
.
shield
-
recipe
-
client
.
shieldLearnMoreUrl
"
;
const
PROCESS_SCRIPT
=
(
resource
:
/
/
shield
-
recipe
-
client
-
content
/
shield
-
content
-
process
.
js
?
{
Math
.
random
(
)
}
)
;
const
FRAME_SCRIPT
=
(
resource
:
/
/
shield
-
recipe
-
client
-
content
/
shield
-
content
-
frame
.
js
?
{
Math
.
random
(
)
}
)
;
class
AboutPage
{
constructor
(
{
chromeUrl
aboutHost
classId
description
uriFlags
}
)
{
this
.
chromeUrl
=
chromeUrl
;
this
.
aboutHost
=
aboutHost
;
this
.
classId
=
Components
.
ID
(
classId
)
;
this
.
description
=
description
;
this
.
uriFlags
=
uriFlags
;
}
getURIFlags
(
)
{
return
this
.
uriFlags
;
}
newChannel
(
uri
loadInfo
)
{
const
newURI
=
Services
.
io
.
newURI
(
this
.
chromeUrl
)
;
const
channel
=
Services
.
io
.
newChannelFromURIWithLoadInfo
(
newURI
loadInfo
)
;
channel
.
originalURI
=
uri
;
if
(
this
.
uriFlags
&
Ci
.
nsIAboutModule
.
URI_SAFE_FOR_UNTRUSTED_CONTENT
)
{
const
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
uri
{
}
)
;
channel
.
owner
=
principal
;
}
return
channel
;
}
createInstance
(
outer
iid
)
{
if
(
outer
!
=
=
null
)
{
throw
Cr
.
NS_ERROR_NO_AGGREGATION
;
}
return
this
.
QueryInterface
(
iid
)
;
}
register
(
)
{
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
.
registerFactory
(
this
.
classId
this
.
description
mozilla
.
org
/
network
/
protocol
/
about
;
1
?
what
=
{
this
.
aboutHost
}
this
)
;
}
unregister
(
)
{
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
.
unregisterFactory
(
this
.
classId
this
)
;
}
}
AboutPage
.
prototype
.
QueryInterface
=
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIAboutModule
]
)
;
this
.
AboutPages
=
{
async
init
(
)
{
Services
.
ppmm
.
loadProcessScript
(
PROCESS_SCRIPT
true
)
;
Services
.
mm
.
loadFrameScript
(
FRAME_SCRIPT
true
)
;
this
.
aboutStudies
.
register
(
)
;
this
.
aboutStudies
.
registerParentListeners
(
)
;
CleanupManager
.
addCleanupHandler
(
(
)
=
>
{
Services
.
ppmm
.
removeDelayedProcessScript
(
PROCESS_SCRIPT
)
;
Services
.
ppmm
.
broadcastAsyncMessage
(
"
Shield
:
ShuttingDown
"
)
;
Services
.
mm
.
removeDelayedFrameScript
(
FRAME_SCRIPT
)
;
Services
.
mm
.
broadcastAsyncMessage
(
"
Shield
:
ShuttingDown
"
)
;
this
.
aboutStudies
.
unregisterParentListeners
(
)
;
this
.
aboutStudies
.
unregister
(
)
;
}
)
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
this
.
AboutPages
"
aboutStudies
"
(
)
=
>
{
const
aboutStudies
=
new
AboutPage
(
{
chromeUrl
:
"
resource
:
/
/
shield
-
recipe
-
client
-
content
/
about
-
studies
/
about
-
studies
.
html
"
aboutHost
:
"
studies
"
classId
:
"
{
6ab96943
-
a163
-
482c
-
9622
-
4faedc0e827f
}
"
description
:
"
Shield
Study
Listing
"
uriFlags
:
(
Ci
.
nsIAboutModule
.
ALLOW_SCRIPT
|
Ci
.
nsIAboutModule
.
URI_SAFE_FOR_UNTRUSTED_CONTENT
|
Ci
.
nsIAboutModule
.
URI_MUST_LOAD_IN_CHILD
)
}
)
;
Object
.
assign
(
aboutStudies
{
registerParentListeners
(
)
{
Services
.
mm
.
addMessageListener
(
"
Shield
:
GetStudyList
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
Shield
:
RemoveStudy
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
Shield
:
OpenDataPreferences
"
this
)
;
}
unregisterParentListeners
(
)
{
Services
.
mm
.
removeMessageListener
(
"
Shield
:
GetStudyList
"
this
)
;
Services
.
mm
.
removeMessageListener
(
"
Shield
:
RemoveStudy
"
this
)
;
Services
.
mm
.
removeMessageListener
(
"
Shield
:
OpenDataPreferences
"
this
)
;
}
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
Shield
:
GetStudyList
"
:
this
.
sendStudyList
(
message
.
target
)
;
break
;
case
"
Shield
:
RemoveStudy
"
:
this
.
removeStudy
(
message
.
data
)
;
break
;
case
"
Shield
:
OpenDataPreferences
"
:
this
.
openDataPreferences
(
)
;
break
;
}
}
async
sendStudyList
(
target
)
{
try
{
target
.
messageManager
.
sendAsyncMessage
(
"
Shield
:
ReceiveStudyList
"
{
studies
:
await
AddonStudies
.
getAll
(
)
}
)
;
}
catch
(
err
)
{
Cu
.
reportError
(
err
)
;
}
}
async
removeStudy
(
recipeId
)
{
await
AddonStudies
.
stop
(
recipeId
)
;
Services
.
mm
.
broadcastAsyncMessage
(
"
Shield
:
ReceiveStudyList
"
{
studies
:
await
AddonStudies
.
getAll
(
)
}
)
;
}
openDataPreferences
(
)
{
const
browserWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
browserWindow
.
openPreferences
(
"
privacy
-
reports
"
{
origin
:
"
aboutStudies
"
}
)
;
}
getShieldLearnMoreHref
(
)
{
return
Services
.
urlFormatter
.
formatURLPref
(
SHIELD_LEARN_MORE_URL_PREF
)
;
}
}
)
;
return
aboutStudies
;
}
)
;
