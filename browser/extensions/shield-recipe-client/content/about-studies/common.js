"
use
strict
"
;
const
r
=
React
.
createElement
;
window
.
InfoBox
=
class
InfoBox
extends
React
.
Component
{
render
(
)
{
return
(
r
(
"
div
"
{
className
:
"
info
-
box
"
}
r
(
"
div
"
{
className
:
"
info
-
box
-
content
"
}
this
.
props
.
children
)
)
)
;
}
}
;
window
.
InfoBox
.
propTypes
=
{
children
:
PropTypes
.
node
}
;
window
.
FxButton
=
class
FxButton
extends
React
.
Component
{
render
(
)
{
return
(
r
(
"
button
"
Object
.
assign
(
{
}
this
.
props
{
children
:
undefined
}
)
r
(
"
div
"
{
className
:
"
button
-
box
"
}
this
.
props
.
children
)
)
)
;
}
}
;
window
.
FxButton
.
propTypes
=
{
children
:
PropTypes
.
node
}
;
class
RemoteValue
{
constructor
(
name
defaultValue
=
null
)
{
this
.
name
=
name
;
this
.
handlers
=
[
]
;
this
.
value
=
defaultValue
;
document
.
addEventListener
(
ReceiveRemoteValue
:
{
this
.
name
}
this
)
;
sendPageEvent
(
GetRemoteValue
:
{
this
.
name
}
)
;
}
subscribe
(
handler
)
{
this
.
handlers
.
push
(
handler
)
;
handler
.
receiveRemoteValue
(
this
.
name
this
.
value
)
;
}
unsubscribe
(
handler
)
{
this
.
handlers
=
this
.
handlers
.
filter
(
h
=
>
h
!
=
=
handler
)
;
}
handleEvent
(
event
)
{
this
.
value
=
event
.
detail
;
for
(
const
handler
of
this
.
handlers
)
{
handler
.
receiveRemoteValue
(
this
.
name
this
.
value
)
;
}
}
}
const
remoteValues
=
{
studyList
:
new
RemoteValue
(
"
StudyList
"
)
shieldLearnMoreHref
:
new
RemoteValue
(
"
ShieldLearnMoreHref
"
)
studiesEnabled
:
new
RemoteValue
(
"
StudiesEnabled
"
)
}
;
function
sendPageEvent
(
action
data
)
{
const
event
=
new
CustomEvent
(
"
ShieldPageEvent
"
{
bubbles
:
true
detail
:
{
action
data
}
}
)
;
document
.
dispatchEvent
(
event
)
;
}
