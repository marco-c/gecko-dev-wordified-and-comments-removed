"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
NormandyDriver
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
shield
-
recipe
-
client
/
lib
/
SandboxManager
.
jsm
"
this
)
;
const
sandboxManager
=
new
SandboxManager
(
)
;
sandboxManager
.
addHold
(
"
test
running
"
)
;
const
driver
=
new
NormandyDriver
(
sandboxManager
)
;
const
sandboxedDriver
=
Cu
.
cloneInto
(
driver
sandboxManager
.
sandbox
{
cloneFunctions
:
true
}
)
;
const
eventEmitter
=
new
sandboxManager
.
sandbox
.
EventEmitter
(
sandboxedDriver
)
.
wrappedJSObject
;
const
evidence
=
{
a
:
0
b
:
0
c
:
0
log
:
"
"
}
;
function
listenerA
(
x
=
1
)
{
evidence
.
a
+
=
x
;
evidence
.
log
+
=
"
a
"
;
}
function
listenerB
(
x
=
1
)
{
evidence
.
b
+
=
x
;
evidence
.
log
+
=
"
b
"
;
}
function
listenerC
(
x
=
1
)
{
evidence
.
c
+
=
x
;
evidence
.
log
+
=
"
c
"
;
}
add_task
(
function
*
(
)
{
eventEmitter
.
on
(
"
nothing
"
)
;
eventEmitter
.
on
(
"
event
"
listenerA
)
;
eventEmitter
.
on
(
"
event
"
listenerB
)
;
eventEmitter
.
once
(
"
event
"
listenerC
)
;
eventEmitter
.
emit
(
"
event
"
)
;
eventEmitter
.
emit
(
"
event
"
10
)
;
Assert
.
deepEqual
(
evidence
{
a
:
0
b
:
0
c
:
0
log
:
"
"
}
"
events
are
fired
async
"
)
;
yield
Promise
.
resolve
(
)
;
Assert
.
deepEqual
(
evidence
{
a
:
11
b
:
11
c
:
1
log
:
"
abcab
"
}
"
intermediate
events
are
fired
"
)
;
eventEmitter
.
off
(
"
event
"
listenerB
)
;
eventEmitter
.
emit
(
"
event
"
100
)
;
eventEmitter
.
on
(
"
nothing
"
)
;
yield
Promise
.
resolve
(
)
;
Assert
.
deepEqual
(
evidence
{
a
:
111
b
:
11
c
:
1
log
:
"
abcaba
"
}
"
events
fired
as
expected
"
)
;
sandboxManager
.
removeHold
(
"
test
running
"
)
;
yield
sandboxManager
.
isNuked
(
)
.
then
(
(
)
=
>
ok
(
true
"
sandbox
is
nuked
"
)
)
.
catch
(
e
=
>
ok
(
false
"
sandbox
is
nuked
"
e
)
)
;
}
)
;
