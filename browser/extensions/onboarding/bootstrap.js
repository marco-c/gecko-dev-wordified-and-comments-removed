"
use
strict
"
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
OnboardingTourType
"
"
resource
:
/
/
onboarding
/
modules
/
OnboardingTourType
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Preferences
"
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
fxAccounts
"
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
;
const
BROWSER_READY_NOTIFICATION
=
"
browser
-
delayed
-
startup
-
finished
"
;
const
BROWSER_SESSION_STORE_NOTIFICATION
=
"
sessionstore
-
windows
-
restored
"
;
const
PREF_WHITELIST
=
[
"
browser
.
onboarding
.
enabled
"
"
browser
.
onboarding
.
hidden
"
"
browser
.
onboarding
.
notification
.
finished
"
"
browser
.
onboarding
.
notification
.
prompt
-
count
"
"
browser
.
onboarding
.
notification
.
last
-
time
-
of
-
changing
-
tour
-
sec
"
"
browser
.
onboarding
.
notification
.
tour
-
ids
-
queue
"
]
;
[
"
onboarding
-
tour
-
addons
"
"
onboarding
-
tour
-
customize
"
"
onboarding
-
tour
-
default
-
browser
"
"
onboarding
-
tour
-
library
"
"
onboarding
-
tour
-
performance
"
"
onboarding
-
tour
-
private
-
browsing
"
"
onboarding
-
tour
-
search
"
"
onboarding
-
tour
-
singlesearch
"
"
onboarding
-
tour
-
sync
"
]
.
forEach
(
tourId
=
>
PREF_WHITELIST
.
push
(
browser
.
onboarding
.
tour
.
{
tourId
}
.
completed
)
)
;
let
waitingForBrowserReady
=
true
;
function
setPrefs
(
prefs
)
{
prefs
.
forEach
(
pref
=
>
{
if
(
PREF_WHITELIST
.
includes
(
pref
.
name
)
)
{
Preferences
.
set
(
pref
.
name
pref
.
value
)
;
}
}
)
;
}
function
initContentMessageListener
(
)
{
Services
.
mm
.
addMessageListener
(
"
Onboarding
:
OnContentMessage
"
msg
=
>
{
switch
(
msg
.
data
.
action
)
{
case
"
set
-
prefs
"
:
setPrefs
(
msg
.
data
.
params
)
;
break
;
}
}
)
;
}
let
syncTourChecker
=
{
registered
:
false
observe
(
)
{
this
.
setComplete
(
)
;
}
init
(
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
onboarding
.
tour
.
onboarding
-
tour
-
sync
.
completed
"
false
)
)
{
return
;
}
fxAccounts
.
getSignedInUser
(
)
.
then
(
user
=
>
{
if
(
user
)
{
this
.
setComplete
(
)
;
return
;
}
this
.
register
(
)
;
}
)
;
}
register
(
)
{
if
(
this
.
registered
)
{
return
;
}
Services
.
obs
.
addObserver
(
this
"
fxaccounts
:
onverified
"
)
;
this
.
registered
=
true
;
}
setComplete
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
onboarding
.
tour
.
onboarding
-
tour
-
sync
.
completed
"
true
)
;
this
.
unregister
(
)
;
}
unregister
(
)
{
if
(
!
this
.
registered
)
{
return
;
}
Services
.
obs
.
removeObserver
(
this
"
fxaccounts
:
onverified
"
)
;
this
.
registered
=
false
;
}
uninit
(
)
{
this
.
unregister
(
)
;
}
}
function
onBrowserReady
(
)
{
waitingForBrowserReady
=
false
;
OnboardingTourType
.
check
(
)
;
Services
.
mm
.
loadFrameScript
(
"
resource
:
/
/
onboarding
/
onboarding
.
js
"
true
)
;
initContentMessageListener
(
)
;
}
function
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
BROWSER_READY_NOTIFICATION
:
Services
.
obs
.
removeObserver
(
observe
BROWSER_READY_NOTIFICATION
)
;
onBrowserReady
(
)
;
break
;
case
BROWSER_SESSION_STORE_NOTIFICATION
:
Services
.
obs
.
removeObserver
(
observe
BROWSER_SESSION_STORE_NOTIFICATION
)
;
Services
.
tm
.
idleDispatchToMainThread
(
(
)
=
>
syncTourChecker
.
init
(
)
)
;
break
;
}
}
function
install
(
aData
aReason
)
{
}
function
uninstall
(
aData
aReason
)
{
}
function
startup
(
aData
aReason
)
{
if
(
aReason
=
=
=
APP_STARTUP
|
|
aReason
=
=
=
ADDON_INSTALL
)
{
Services
.
obs
.
addObserver
(
observe
BROWSER_READY_NOTIFICATION
)
;
Services
.
obs
.
addObserver
(
observe
BROWSER_SESSION_STORE_NOTIFICATION
)
;
}
else
{
onBrowserReady
(
)
;
syncTourChecker
.
init
(
)
;
}
}
function
shutdown
(
aData
aReason
)
{
if
(
waitingForBrowserReady
)
{
Services
.
obs
.
removeObserver
(
observe
BROWSER_READY_NOTIFICATION
)
;
}
syncTourChecker
.
uninit
(
)
;
}
