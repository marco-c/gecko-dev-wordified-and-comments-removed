"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
OnboardingTelemetry
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
PingCentre
:
"
resource
:
/
/
/
modules
/
PingCentre
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gUUIDGenerator
"
"
mozilla
.
org
/
uuid
-
generator
;
1
"
"
nsIUUIDGenerator
"
)
;
function
hasString
(
str
)
{
return
typeof
str
=
=
"
string
"
&
&
str
.
length
>
0
;
}
function
isEmptyString
(
str
)
{
return
typeof
str
=
=
"
string
"
&
&
str
=
=
=
"
"
;
}
function
isInteger
(
i
)
{
return
Number
.
isInteger
(
i
)
;
}
function
isPositiveInteger
(
i
)
{
return
Number
.
isInteger
(
i
)
&
&
i
>
0
;
}
function
isMinusOne
(
num
)
{
return
num
=
=
=
-
1
;
}
function
isValidCategory
(
category
)
{
return
[
"
logo
-
interactions
"
"
onboarding
-
interactions
"
"
overlay
-
interactions
"
"
notification
-
interactions
"
]
.
includes
(
category
)
;
}
function
isValidPage
(
page
)
{
return
[
"
about
:
newtab
"
"
about
:
home
"
"
about
:
welcome
"
]
.
includes
(
page
)
;
}
function
isValidTourType
(
type
)
{
return
[
"
new
"
"
update
"
]
.
includes
(
type
)
;
}
function
isValidBubbleState
(
str
)
{
return
[
"
bubble
"
"
dot
"
"
hide
"
]
.
includes
(
str
)
;
}
function
isValidLogoState
(
str
)
{
return
[
"
logo
"
"
watermark
"
]
.
includes
(
str
)
;
}
function
isValidNotificationState
(
str
)
{
return
[
"
show
"
"
hide
"
"
finished
"
]
.
includes
(
str
)
;
}
function
definePerPing
(
column
)
{
return
function
(
)
{
throw
new
Error
(
Must
define
the
'
{
column
}
'
validator
per
ping
because
it
is
not
the
same
for
all
pings
)
;
}
;
}
const
BASIC_SESSION_SCHEMA
=
{
addon_version
:
hasString
category
:
isValidCategory
page
:
isValidPage
parent_session_id
:
hasString
root_session_id
:
hasString
session_begin
:
isInteger
session_end
:
isInteger
session_id
:
hasString
tour_type
:
isValidTourType
type
:
hasString
}
;
const
BASIC_EVENT_SCHEMA
=
{
addon_version
:
hasString
bubble_state
:
definePerPing
(
"
bubble_state
"
)
category
:
isValidCategory
current_tour_id
:
definePerPing
(
"
current_tour_id
"
)
logo_state
:
definePerPing
(
"
logo_state
"
)
notification_impression
:
definePerPing
(
"
notification_impression
"
)
notification_state
:
definePerPing
(
"
notification_state
"
)
page
:
isValidPage
parent_session_id
:
hasString
root_session_id
:
hasString
target_tour_id
:
definePerPing
(
"
target_tour_id
"
)
timestamp
:
isInteger
tour_type
:
isValidTourType
type
:
hasString
width
:
isPositiveInteger
}
;
const
EVENT_WHITELIST
=
{
"
notification
-
appear
"
:
{
topic
:
"
firefox
-
onboarding
-
event2
"
category
:
"
notification
-
interactions
"
parent
:
"
notification
-
session
"
validators
:
Object
.
assign
(
{
}
BASIC_EVENT_SCHEMA
{
bubble_state
:
isValidBubbleState
current_tour_id
:
hasString
logo_state
:
isValidLogoState
notification_impression
:
isPositiveInteger
notification_state
:
isValidNotificationState
target_tour_id
:
isEmptyString
}
)
}
"
notification
-
close
-
button
-
click
"
:
{
topic
:
"
firefox
-
onboarding
-
event2
"
category
:
"
notification
-
interactions
"
parent
:
"
notification
-
session
"
validators
:
Object
.
assign
(
{
}
BASIC_EVENT_SCHEMA
{
bubble_state
:
isValidBubbleState
current_tour_id
:
hasString
logo_state
:
isValidLogoState
notification_impression
:
isPositiveInteger
notification_state
:
isValidNotificationState
target_tour_id
:
hasString
}
)
}
"
notification
-
cta
-
click
"
:
{
topic
:
"
firefox
-
onboarding
-
event2
"
category
:
"
notification
-
interactions
"
parent
:
"
notification
-
session
"
validators
:
Object
.
assign
(
{
}
BASIC_EVENT_SCHEMA
{
bubble_state
:
isValidBubbleState
current_tour_id
:
hasString
logo_state
:
isValidLogoState
notification_impression
:
isPositiveInteger
notification_state
:
isValidNotificationState
target_tour_id
:
hasString
}
)
}
"
notification
-
session
"
:
{
topic
:
"
firefox
-
onboarding
-
session2
"
category
:
"
notification
-
interactions
"
parent
:
"
onboarding
-
session
"
validators
:
BASIC_SESSION_SCHEMA
}
"
notification
-
session
-
begin
"
:
{
topic
:
"
internal
"
}
"
notification
-
session
-
end
"
:
{
topic
:
"
internal
"
}
"
onboarding
-
logo
-
click
"
:
{
topic
:
"
firefox
-
onboarding
-
event2
"
category
:
"
logo
-
interactions
"
parent
:
"
onboarding
-
session
"
validators
:
Object
.
assign
(
{
}
BASIC_EVENT_SCHEMA
{
bubble_state
:
isValidBubbleState
current_tour_id
:
isEmptyString
logo_state
:
isValidLogoState
notification_impression
:
isMinusOne
notification_state
:
isValidNotificationState
target_tour_id
:
isEmptyString
}
)
}
"
onboarding
-
noshow
-
smallscreen
"
:
{
topic
:
"
firefox
-
onboarding
-
event2
"
category
:
"
onboarding
-
interactions
"
parent
:
"
onboarding
-
session
"
validators
:
Object
.
assign
(
{
}
BASIC_EVENT_SCHEMA
{
bubble_state
:
isEmptyString
current_tour_id
:
isEmptyString
logo_state
:
isEmptyString
notification_impression
:
isMinusOne
notification_state
:
isEmptyString
target_tour_id
:
isEmptyString
}
)
}
"
onboarding
-
register
-
session
"
:
{
topic
:
"
internal
"
}
"
onboarding
-
session
"
:
{
topic
:
"
firefox
-
onboarding
-
session2
"
category
:
"
onboarding
-
interactions
"
parent
:
"
onboarding
-
session
"
validators
:
BASIC_SESSION_SCHEMA
}
"
onboarding
-
session
-
begin
"
:
{
topic
:
"
internal
"
}
"
onboarding
-
session
-
end
"
:
{
topic
:
"
internal
"
}
"
overlay
-
close
-
button
-
click
"
:
{
topic
:
"
firefox
-
onboarding
-
event2
"
category
:
"
overlay
-
interactions
"
parent
:
"
overlay
-
session
"
validators
:
Object
.
assign
(
{
}
BASIC_EVENT_SCHEMA
{
bubble_state
:
isEmptyString
current_tour_id
:
hasString
logo_state
:
isEmptyString
notification_impression
:
isMinusOne
notification_state
:
isEmptyString
target_tour_id
:
hasString
}
)
}
"
overlay
-
close
-
outside
-
click
"
:
{
topic
:
"
firefox
-
onboarding
-
event2
"
category
:
"
overlay
-
interactions
"
parent
:
"
overlay
-
session
"
validators
:
Object
.
assign
(
{
}
BASIC_EVENT_SCHEMA
{
bubble_state
:
isEmptyString
current_tour_id
:
hasString
logo_state
:
isEmptyString
notification_impression
:
isMinusOne
notification_state
:
isEmptyString
target_tour_id
:
hasString
}
)
}
"
overlay
-
cta
-
click
"
:
{
topic
:
"
firefox
-
onboarding
-
event2
"
category
:
"
overlay
-
interactions
"
parent
:
"
overlay
-
session
"
validators
:
Object
.
assign
(
{
}
BASIC_EVENT_SCHEMA
{
bubble_state
:
isEmptyString
current_tour_id
:
hasString
logo_state
:
isEmptyString
notification_impression
:
isMinusOne
notification_state
:
isEmptyString
target_tour_id
:
hasString
}
)
}
"
overlay
-
current
-
tour
"
:
{
topic
:
"
firefox
-
onboarding
-
event2
"
category
:
"
overlay
-
interactions
"
parent
:
"
overlay
-
session
"
validators
:
Object
.
assign
(
{
}
BASIC_EVENT_SCHEMA
{
bubble_state
:
isEmptyString
current_tour_id
:
hasString
logo_state
:
isEmptyString
notification_impression
:
isMinusOne
notification_state
:
isEmptyString
target_tour_id
:
isEmptyString
}
)
}
"
overlay
-
disapear
-
resize
"
:
{
topic
:
"
firefox
-
onboarding
-
event2
"
category
:
"
overlay
-
interactions
"
parent
:
"
overlay
-
session
"
validators
:
Object
.
assign
(
{
}
BASIC_EVENT_SCHEMA
{
bubble_state
:
isEmptyString
current_tour_id
:
isEmptyString
logo_state
:
isEmptyString
notification_impression
:
isMinusOne
notification_state
:
isEmptyString
target_tour_id
:
isEmptyString
}
)
}
"
overlay
-
nav
-
click
"
:
{
topic
:
"
firefox
-
onboarding
-
event2
"
category
:
"
overlay
-
interactions
"
parent
:
"
overlay
-
session
"
validators
:
Object
.
assign
(
{
}
BASIC_EVENT_SCHEMA
{
bubble_state
:
isEmptyString
current_tour_id
:
hasString
logo_state
:
isEmptyString
notification_impression
:
isMinusOne
notification_state
:
isEmptyString
target_tour_id
:
hasString
}
)
}
"
overlay
-
session
"
:
{
topic
:
"
firefox
-
onboarding
-
session2
"
category
:
"
overlay
-
interactions
"
parent
:
"
onboarding
-
session
"
validators
:
BASIC_SESSION_SCHEMA
}
"
overlay
-
session
-
begin
"
:
{
topic
:
"
internal
"
}
"
overlay
-
session
-
end
"
:
{
topic
:
"
internal
"
}
"
overlay
-
skip
-
tour
"
:
{
topic
:
"
firefox
-
onboarding
-
event2
"
category
:
"
overlay
-
interactions
"
parent
:
"
overlay
-
session
"
validators
:
Object
.
assign
(
{
}
BASIC_EVENT_SCHEMA
{
bubble_state
:
isEmptyString
current_tour_id
:
hasString
logo_state
:
isEmptyString
notification_impression
:
isMinusOne
notification_state
:
isEmptyString
target_tour_id
:
isEmptyString
}
)
}
}
;
const
ONBOARDING_ID
=
"
onboarding
"
;
let
OnboardingTelemetry
=
{
sessionProbe
:
null
eventProbe
:
null
state
:
{
sessions
:
{
}
}
init
(
startupData
)
{
this
.
sessionProbe
=
new
PingCentre
(
{
topic
:
"
firefox
-
onboarding
-
session2
"
}
)
;
this
.
eventProbe
=
new
PingCentre
(
{
topic
:
"
firefox
-
onboarding
-
event2
"
}
)
;
this
.
state
.
addon_version
=
startupData
.
version
;
}
registerNewOnboardingSession
(
data
)
{
let
{
page
session_key
tour_type
}
=
data
;
if
(
this
.
state
.
sessions
[
session_key
]
)
{
return
;
}
if
(
!
session_key
|
|
!
page
|
|
!
tour_type
)
{
throw
new
Error
(
"
session_key
page
url
and
tour_type
are
required
for
onboarding
-
register
-
session
"
)
;
}
let
onboarding_session_id
=
gUUIDGenerator
.
generateUUID
(
)
.
toString
(
)
;
this
.
state
.
sessions
[
session_key
]
=
{
onboarding_session_id
overlay_session_id
:
"
"
notification_session_id
:
"
"
page
tour_type
}
;
}
process
(
data
)
{
let
{
type
session_key
}
=
data
;
if
(
type
=
=
=
"
onboarding
-
register
-
session
"
)
{
this
.
registerNewOnboardingSession
(
data
)
;
return
;
}
if
(
!
this
.
state
.
sessions
[
session_key
]
)
{
throw
new
Error
(
{
type
}
should
pass
valid
session_key
)
;
}
switch
(
type
)
{
case
"
onboarding
-
session
-
begin
"
:
if
(
!
this
.
state
.
sessions
[
session_key
]
.
onboarding_session_id
)
{
throw
new
Error
(
should
fire
onboarding
-
register
-
session
event
before
{
type
}
)
;
}
this
.
state
.
sessions
[
session_key
]
.
onboarding_session_begin
=
Date
.
now
(
)
;
return
;
case
"
onboarding
-
session
-
end
"
:
data
=
Object
.
assign
(
{
}
data
{
type
:
"
onboarding
-
session
"
}
)
;
this
.
state
.
sessions
[
session_key
]
.
onboarding_session_end
=
Date
.
now
(
)
;
break
;
case
"
overlay
-
session
-
begin
"
:
this
.
state
.
sessions
[
session_key
]
.
overlay_session_id
=
gUUIDGenerator
.
generateUUID
(
)
.
toString
(
)
;
this
.
state
.
sessions
[
session_key
]
.
overlay_session_begin
=
Date
.
now
(
)
;
return
;
case
"
overlay
-
session
-
end
"
:
data
=
Object
.
assign
(
{
}
data
{
type
:
"
overlay
-
session
"
}
)
;
this
.
state
.
sessions
[
session_key
]
.
overlay_session_end
=
Date
.
now
(
)
;
break
;
case
"
notification
-
session
-
begin
"
:
this
.
state
.
sessions
[
session_key
]
.
notification_session_id
=
gUUIDGenerator
.
generateUUID
(
)
.
toString
(
)
;
this
.
state
.
sessions
[
session_key
]
.
notification_session_begin
=
Date
.
now
(
)
;
return
;
case
"
notification
-
session
-
end
"
:
data
=
Object
.
assign
(
{
}
data
{
type
:
"
notification
-
session
"
}
)
;
this
.
state
.
sessions
[
session_key
]
.
notification_session_end
=
Date
.
now
(
)
;
break
;
}
let
topic
=
EVENT_WHITELIST
[
data
.
type
]
&
&
EVENT_WHITELIST
[
data
.
type
]
.
topic
;
if
(
!
topic
)
{
throw
new
Error
(
ping
-
centre
doesn
'
t
know
{
type
}
after
processPings
only
knows
{
Object
.
keys
(
EVENT_WHITELIST
)
}
)
;
}
this
.
_sendPing
(
topic
data
)
;
}
_sendPing
(
topic
data
)
{
if
(
topic
=
=
=
"
internal
"
)
{
throw
new
Error
(
internal
ping
{
data
.
type
}
should
be
processed
within
processPings
)
;
}
let
{
addon_version
}
=
this
.
state
;
let
{
bubble_state
=
"
"
current_tour_id
=
"
"
logo_state
=
"
"
notification_impression
=
-
1
notification_state
=
"
"
session_key
target_tour_id
=
"
"
type
width
}
=
data
;
let
{
notification_session_begin
notification_session_end
notification_session_id
onboarding_session_begin
onboarding_session_end
onboarding_session_id
overlay_session_begin
overlay_session_end
overlay_session_id
page
tour_type
}
=
this
.
state
.
sessions
[
session_key
]
;
let
{
category
parent
}
=
EVENT_WHITELIST
[
type
]
;
let
parent_session_id
;
let
payload
;
let
session_begin
;
let
session_end
;
let
session_id
;
let
root_session_id
=
onboarding_session_id
;
switch
(
parent
)
{
case
"
onboarding
-
session
"
:
parent_session_id
=
onboarding_session_id
;
break
;
case
"
overlay
-
session
"
:
parent_session_id
=
overlay_session_id
;
break
;
case
"
notification
-
session
"
:
parent_session_id
=
notification_session_id
;
break
;
}
if
(
!
parent_session_id
)
{
throw
new
Error
(
Unable
to
find
the
{
parent
}
parent
session
for
the
event
{
type
}
)
;
}
switch
(
topic
)
{
case
"
firefox
-
onboarding
-
session2
"
:
switch
(
type
)
{
case
"
onboarding
-
session
"
:
session_id
=
onboarding_session_id
;
session_begin
=
onboarding_session_begin
;
session_end
=
onboarding_session_end
;
delete
this
.
state
.
sessions
[
session_key
]
;
break
;
case
"
overlay
-
session
"
:
session_id
=
overlay_session_id
;
session_begin
=
overlay_session_begin
;
session_end
=
overlay_session_end
;
break
;
case
"
notification
-
session
"
:
session_id
=
notification_session_id
;
session_begin
=
notification_session_begin
;
session_end
=
notification_session_end
;
break
;
}
if
(
!
session_id
|
|
!
session_begin
|
|
!
session_end
)
{
throw
new
Error
(
should
fire
{
type
}
-
begin
and
{
type
}
-
end
event
before
{
type
}
)
;
}
payload
=
{
addon_version
category
page
parent_session_id
root_session_id
session_begin
session_end
session_id
tour_type
type
}
;
this
.
_validatePayload
(
payload
)
;
this
.
sessionProbe
&
&
this
.
sessionProbe
.
sendPing
(
payload
{
filter
:
ONBOARDING_ID
}
)
;
break
;
case
"
firefox
-
onboarding
-
event2
"
:
let
timestamp
=
Date
.
now
(
)
;
payload
=
{
addon_version
bubble_state
category
current_tour_id
logo_state
notification_impression
notification_state
page
parent_session_id
root_session_id
target_tour_id
timestamp
tour_type
type
width
}
;
this
.
_validatePayload
(
payload
)
;
this
.
eventProbe
&
&
this
.
eventProbe
.
sendPing
(
payload
{
filter
:
ONBOARDING_ID
}
)
;
break
;
}
}
_validatePayload
(
payload
)
{
let
type
=
payload
.
type
;
let
{
validators
}
=
EVENT_WHITELIST
[
type
]
;
if
(
!
validators
)
{
throw
new
Error
(
Event
{
type
}
without
validators
should
not
be
sent
.
)
;
}
let
validatorKeys
=
Object
.
keys
(
validators
)
;
if
(
Object
.
keys
(
payload
)
.
length
>
validatorKeys
.
length
)
{
throw
new
Error
(
Event
{
type
}
want
to
send
more
columns
than
expect
should
not
be
sent
.
)
;
}
let
results
=
{
}
;
let
failed
=
false
;
for
(
let
key
of
validatorKeys
)
{
if
(
payload
[
key
]
!
=
=
undefined
)
{
results
[
key
]
=
validators
[
key
]
(
payload
[
key
]
)
;
if
(
!
results
[
key
]
)
{
failed
=
true
;
}
}
else
{
results
[
key
]
=
false
;
failed
=
true
;
}
}
if
(
failed
)
{
throw
new
Error
(
Event
{
type
}
contains
incorrect
data
:
{
JSON
.
stringify
(
results
)
}
should
not
be
sent
.
)
;
}
}
}
;
