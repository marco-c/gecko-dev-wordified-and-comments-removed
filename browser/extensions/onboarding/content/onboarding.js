"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
ONBOARDING_CSS_URL
=
"
resource
:
/
/
onboarding
/
onboarding
.
css
"
;
const
ABOUT_HOME_URL
=
"
about
:
home
"
;
const
ABOUT_NEWTAB_URL
=
"
about
:
newtab
"
;
const
BUNDLE_URI
=
"
chrome
:
/
/
onboarding
/
locale
/
onboarding
.
properties
"
;
class
Onboarding
{
constructor
(
contentWindow
)
{
this
.
init
(
contentWindow
)
;
this
.
_bundle
=
Services
.
strings
.
createBundle
(
BUNDLE_URI
)
;
}
async
init
(
contentWindow
)
{
this
.
_window
=
contentWindow
;
await
this
.
_loadCSS
(
)
;
this
.
_overlayIcon
=
this
.
_renderOverlayIcon
(
)
;
this
.
_overlay
=
this
.
_renderOverlay
(
)
;
this
.
_window
.
document
.
body
.
appendChild
(
this
.
_overlayIcon
)
;
this
.
_window
.
document
.
body
.
appendChild
(
this
.
_overlay
)
;
this
.
_overlayIcon
.
addEventListener
(
"
click
"
this
)
;
this
.
_overlay
.
addEventListener
(
"
click
"
this
)
;
this
.
_window
.
addEventListener
(
"
unload
"
(
)
=
>
this
.
destroy
(
)
)
;
}
handleEvent
(
evt
)
{
switch
(
evt
.
target
.
id
)
{
case
"
onboarding
-
overlay
-
icon
"
:
case
"
onboarding
-
overlay
-
close
-
btn
"
:
case
"
onboarding
-
overlay
"
:
this
.
toggleOverlay
(
)
;
break
;
}
}
destroy
(
)
{
this
.
_overlayIcon
.
remove
(
)
;
this
.
_overlay
.
remove
(
)
;
}
toggleOverlay
(
)
{
this
.
_overlay
.
classList
.
toggle
(
"
opened
"
)
;
}
_renderOverlay
(
)
{
const
BRAND_SHORT_NAME
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
)
.
GetStringFromName
(
"
brandShortName
"
)
;
let
div
=
this
.
_window
.
document
.
createElement
(
"
div
"
)
;
div
.
id
=
"
onboarding
-
overlay
"
;
div
.
innerHTML
=
<
div
id
=
"
onboarding
-
overlay
-
dialog
"
>
<
span
id
=
"
onboarding
-
overlay
-
close
-
btn
"
>
<
/
span
>
<
header
id
=
"
onboarding
-
header
"
>
<
/
header
>
<
nav
>
<
ul
>
<
/
ul
>
<
/
nav
>
<
footer
>
<
/
footer
>
<
/
div
>
;
div
.
querySelector
(
"
#
onboarding
-
header
"
)
.
textContent
=
this
.
_bundle
.
formatStringFromName
(
"
onboarding
.
overlay
-
title
"
[
BRAND_SHORT_NAME
]
1
)
;
return
div
;
}
_renderOverlayIcon
(
)
{
let
img
=
this
.
_window
.
document
.
createElement
(
"
div
"
)
;
img
.
id
=
"
onboarding
-
overlay
-
icon
"
;
return
img
;
}
_loadCSS
(
)
{
return
new
Promise
(
resolve
=
>
{
let
doc
=
this
.
_window
.
document
;
let
link
=
doc
.
createElement
(
"
link
"
)
;
link
.
rel
=
"
stylesheet
"
;
link
.
type
=
"
text
/
css
"
;
link
.
href
=
ONBOARDING_CSS_URL
;
link
.
addEventListener
(
"
load
"
resolve
)
;
doc
.
head
.
appendChild
(
link
)
;
}
)
;
}
}
addEventListener
(
"
load
"
function
onLoad
(
evt
)
{
if
(
!
content
|
|
evt
.
target
!
=
content
.
document
)
{
return
;
}
removeEventListener
(
"
load
"
onLoad
)
;
let
window
=
evt
.
target
.
defaultView
;
if
(
(
window
.
location
.
href
=
=
ABOUT_NEWTAB_URL
|
|
window
.
location
.
href
=
=
ABOUT_HOME_URL
)
&
&
Services
.
prefs
.
getBoolPref
(
"
browser
.
onboarding
.
enabled
"
false
)
)
{
window
.
requestIdleCallback
(
(
)
=
>
{
new
Onboarding
(
window
)
;
}
)
;
}
}
true
)
;
