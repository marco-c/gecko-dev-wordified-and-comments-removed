"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
const
ONBOARDING_CSS_URL
=
"
resource
:
/
/
onboarding
/
onboarding
.
css
"
;
const
ABOUT_HOME_URL
=
"
about
:
home
"
;
const
ABOUT_NEWTAB_URL
=
"
about
:
newtab
"
;
const
BUNDLE_URI
=
"
chrome
:
/
/
onboarding
/
locale
/
onboarding
.
properties
"
;
const
UITOUR_JS_URI
=
"
resource
:
/
/
onboarding
/
lib
/
UITour
-
lib
.
js
"
;
const
TOUR_AGENT_JS_URI
=
"
resource
:
/
/
onboarding
/
onboarding
-
tour
-
agent
.
js
"
;
const
BRAND_SHORT_NAME
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
)
.
GetStringFromName
(
"
brandShortName
"
)
;
var
onboardingTours
=
[
{
id
:
"
onboarding
-
tour
-
private
-
browsing
"
tourNameId
:
"
onboarding
.
tour
-
private
-
browsing
"
getNotificationStrings
(
bundle
)
{
return
{
title
:
bundle
.
GetStringFromName
(
"
onboarding
.
notification
.
onboarding
-
tour
-
private
-
browsing
.
title
"
)
message
:
bundle
.
GetStringFromName
(
"
onboarding
.
notification
.
onboarding
-
tour
-
private
-
browsing
.
message
"
)
button
:
bundle
.
GetStringFromName
(
"
onboarding
.
button
.
learnMore
"
)
}
;
}
getPage
(
win
)
{
let
div
=
win
.
document
.
createElement
(
"
div
"
)
;
div
.
innerHTML
=
<
section
class
=
"
onboarding
-
tour
-
description
"
>
<
h1
data
-
l10n
-
id
=
"
onboarding
.
tour
-
private
-
browsing
.
title
"
>
<
/
h1
>
<
p
data
-
l10n
-
id
=
"
onboarding
.
tour
-
private
-
browsing
.
description
"
>
<
/
p
>
<
/
section
>
<
section
class
=
"
onboarding
-
tour
-
content
"
>
<
img
src
=
"
resource
:
/
/
onboarding
/
img
/
figure_private
.
svg
"
/
>
<
/
section
>
<
aside
class
=
"
onboarding
-
tour
-
button
"
>
<
button
id
=
"
onboarding
-
tour
-
private
-
browsing
-
button
"
data
-
l10n
-
id
=
"
onboarding
.
tour
-
private
-
browsing
.
button
"
>
<
/
button
>
<
/
aside
>
;
return
div
;
}
}
{
id
:
"
onboarding
-
tour
-
addons
"
tourNameId
:
"
onboarding
.
tour
-
addons
"
getNotificationStrings
(
bundle
)
{
return
{
title
:
bundle
.
GetStringFromName
(
"
onboarding
.
notification
.
onboarding
-
tour
-
addons
.
title
"
)
message
:
bundle
.
formatStringFromName
(
"
onboarding
.
notification
.
onboarding
-
tour
-
addons
.
message
"
[
BRAND_SHORT_NAME
]
1
)
button
:
bundle
.
GetStringFromName
(
"
onboarding
.
button
.
learnMore
"
)
}
;
}
getPage
(
win
)
{
let
div
=
win
.
document
.
createElement
(
"
div
"
)
;
div
.
innerHTML
=
<
section
class
=
"
onboarding
-
tour
-
description
"
>
<
h1
data
-
l10n
-
id
=
"
onboarding
.
tour
-
addons
.
title
"
>
<
/
h1
>
<
p
data
-
l10n
-
id
=
"
onboarding
.
tour
-
addons
.
description
"
>
<
/
p
>
<
/
section
>
<
section
class
=
"
onboarding
-
tour
-
content
"
>
<
img
src
=
"
resource
:
/
/
onboarding
/
img
/
figure_addons
.
svg
"
/
>
<
/
section
>
<
aside
class
=
"
onboarding
-
tour
-
button
"
>
<
button
id
=
"
onboarding
-
tour
-
addons
-
button
"
data
-
l10n
-
id
=
"
onboarding
.
tour
-
addons
.
button
"
>
<
/
button
>
<
/
aside
>
;
return
div
;
}
}
{
id
:
"
onboarding
-
tour
-
customize
"
tourNameId
:
"
onboarding
.
tour
-
customize
"
getNotificationStrings
(
bundle
)
{
return
{
title
:
bundle
.
GetStringFromName
(
"
onboarding
.
notification
.
onboarding
-
tour
-
customize
.
title
"
)
message
:
bundle
.
formatStringFromName
(
"
onboarding
.
notification
.
onboarding
-
tour
-
customize
.
message
"
[
BRAND_SHORT_NAME
]
1
)
button
:
bundle
.
GetStringFromName
(
"
onboarding
.
button
.
learnMore
"
)
}
;
}
getPage
(
win
)
{
let
div
=
win
.
document
.
createElement
(
"
div
"
)
;
div
.
innerHTML
=
<
section
class
=
"
onboarding
-
tour
-
description
"
>
<
h1
data
-
l10n
-
id
=
"
onboarding
.
tour
-
customize
.
title
"
>
<
/
h1
>
<
p
data
-
l10n
-
id
=
"
onboarding
.
tour
-
customize
.
description
"
>
<
/
p
>
<
/
section
>
<
section
class
=
"
onboarding
-
tour
-
content
"
>
<
img
src
=
"
resource
:
/
/
onboarding
/
img
/
figure_customize
.
svg
"
/
>
<
/
section
>
<
aside
class
=
"
onboarding
-
tour
-
button
"
>
<
button
id
=
"
onboarding
-
tour
-
customize
-
button
"
data
-
l10n
-
id
=
"
onboarding
.
tour
-
customize
.
button
"
>
<
/
button
>
<
/
aside
>
;
return
div
;
}
}
{
id
:
"
onboarding
-
tour
-
search
"
tourNameId
:
"
onboarding
.
tour
-
search
"
getNotificationStrings
(
bundle
)
{
return
{
title
:
bundle
.
GetStringFromName
(
"
onboarding
.
notification
.
onboarding
-
tour
-
search
.
title
"
)
message
:
bundle
.
GetStringFromName
(
"
onboarding
.
notification
.
onboarding
-
tour
-
search
.
message
"
)
button
:
bundle
.
GetStringFromName
(
"
onboarding
.
button
.
learnMore
"
)
}
;
}
getPage
(
win
)
{
let
div
=
win
.
document
.
createElement
(
"
div
"
)
;
div
.
innerHTML
=
<
section
class
=
"
onboarding
-
tour
-
description
"
>
<
h1
data
-
l10n
-
id
=
"
onboarding
.
tour
-
search
.
title
"
>
<
/
h1
>
<
p
data
-
l10n
-
id
=
"
onboarding
.
tour
-
search
.
description
"
>
<
/
p
>
<
/
section
>
<
section
class
=
"
onboarding
-
tour
-
content
"
>
<
img
src
=
"
resource
:
/
/
onboarding
/
img
/
figure_search
.
svg
"
/
>
<
/
section
>
<
aside
class
=
"
onboarding
-
tour
-
button
"
>
<
button
id
=
"
onboarding
-
tour
-
search
-
button
"
data
-
l10n
-
id
=
"
onboarding
.
tour
-
search
.
button
"
>
<
/
button
>
<
/
aside
>
;
return
div
;
}
}
{
id
:
"
onboarding
-
tour
-
default
-
browser
"
tourNameId
:
"
onboarding
.
tour
-
default
-
browser
"
getNotificationStrings
(
bundle
)
{
return
{
title
:
bundle
.
formatStringFromName
(
"
onboarding
.
notification
.
onboarding
-
tour
-
default
-
browser
.
title
"
[
BRAND_SHORT_NAME
]
1
)
message
:
bundle
.
formatStringFromName
(
"
onboarding
.
notification
.
onboarding
-
tour
-
default
-
browser
.
message
"
[
BRAND_SHORT_NAME
]
1
)
button
:
bundle
.
GetStringFromName
(
"
onboarding
.
button
.
learnMore
"
)
}
;
}
getPage
(
win
)
{
let
div
=
win
.
document
.
createElement
(
"
div
"
)
;
let
defaultBrowserButtonId
=
win
.
matchMedia
(
"
(
-
moz
-
os
-
version
:
windows
-
win7
)
"
)
.
matches
?
"
onboarding
.
tour
-
default
-
browser
.
win7
.
button
"
:
"
onboarding
.
tour
-
default
-
browser
.
button
"
;
div
.
innerHTML
=
<
section
class
=
"
onboarding
-
tour
-
description
"
>
<
h1
data
-
l10n
-
id
=
"
onboarding
.
tour
-
default
-
browser
.
title
"
>
<
/
h1
>
<
p
data
-
l10n
-
id
=
"
onboarding
.
tour
-
default
-
browser
.
description
"
>
<
/
p
>
<
/
section
>
<
section
class
=
"
onboarding
-
tour
-
content
"
>
<
img
src
=
"
resource
:
/
/
onboarding
/
img
/
figure_default
.
svg
"
/
>
<
/
section
>
<
aside
class
=
"
onboarding
-
tour
-
button
"
>
<
button
id
=
"
onboarding
-
tour
-
default
-
browser
-
button
"
data
-
l10n
-
id
=
"
{
defaultBrowserButtonId
}
"
>
<
/
button
>
<
/
aside
>
;
return
div
;
}
}
]
;
class
Onboarding
{
constructor
(
contentWindow
)
{
this
.
init
(
contentWindow
)
;
}
async
init
(
contentWindow
)
{
this
.
_window
=
contentWindow
;
this
.
_tourItems
=
[
]
;
this
.
_tourPages
=
[
]
;
await
this
.
_loadCSS
(
)
;
this
.
_bundle
=
Services
.
strings
.
createBundle
(
BUNDLE_URI
)
;
this
.
_overlayIcon
=
this
.
_renderOverlayIcon
(
)
;
this
.
_overlay
=
this
.
_renderOverlay
(
)
;
this
.
_window
.
document
.
body
.
appendChild
(
this
.
_overlayIcon
)
;
this
.
_window
.
document
.
body
.
appendChild
(
this
.
_overlay
)
;
this
.
_loadJS
(
UITOUR_JS_URI
)
;
this
.
_loadJS
(
TOUR_AGENT_JS_URI
)
;
this
.
_overlayIcon
.
addEventListener
(
"
click
"
this
)
;
this
.
_overlay
.
addEventListener
(
"
click
"
this
)
;
this
.
_window
.
addEventListener
(
"
unload
"
(
)
=
>
this
.
destroy
(
)
)
;
this
.
_initPrefObserver
(
)
;
this
.
_initNotification
(
)
;
}
_initNotification
(
)
{
let
doc
=
this
.
_window
.
document
;
if
(
doc
.
hidden
)
{
let
onVisible
=
(
)
=
>
{
if
(
!
doc
.
hidden
)
{
doc
.
removeEventListener
(
"
visibilitychange
"
onVisible
)
;
this
.
showNotification
(
)
;
}
}
;
doc
.
addEventListener
(
"
visibilitychange
"
onVisible
)
;
}
else
{
this
.
showNotification
(
)
;
}
}
_initPrefObserver
(
)
{
if
(
this
.
_prefsObserved
)
{
return
;
}
this
.
_prefsObserved
=
new
Map
(
)
;
this
.
_prefsObserved
.
set
(
"
browser
.
onboarding
.
hidden
"
prefValue
=
>
{
if
(
prefValue
)
{
this
.
destroy
(
)
;
}
}
)
;
for
(
let
[
name
callback
]
of
this
.
_prefsObserved
)
{
Preferences
.
observe
(
name
callback
)
;
}
}
_clearPrefObserver
(
)
{
if
(
this
.
_prefsObserved
)
{
for
(
let
[
name
callback
]
of
this
.
_prefsObserved
)
{
Preferences
.
ignore
(
name
callback
)
;
}
this
.
_prefsObserved
=
null
;
}
}
sendMessageToChrome
(
action
params
)
{
sendAsyncMessage
(
"
Onboarding
:
OnContentMessage
"
{
action
params
}
)
;
}
handleEvent
(
evt
)
{
switch
(
evt
.
target
.
id
)
{
case
"
onboarding
-
overlay
-
icon
"
:
case
"
onboarding
-
overlay
-
close
-
btn
"
:
case
"
onboarding
-
overlay
"
:
this
.
toggleOverlay
(
)
;
break
;
case
"
onboarding
-
notification
-
close
-
btn
"
:
this
.
hideNotification
(
)
;
break
;
case
"
onboarding
-
notification
-
action
-
btn
"
:
let
tourId
=
this
.
_notificationBar
.
dataset
.
targetTourId
;
this
.
toggleOverlay
(
)
;
this
.
gotoPage
(
tourId
)
;
break
;
}
if
(
evt
.
target
.
classList
.
contains
(
"
onboarding
-
tour
-
item
"
)
)
{
this
.
gotoPage
(
evt
.
target
.
id
)
;
}
}
destroy
(
)
{
this
.
_clearPrefObserver
(
)
;
this
.
_overlayIcon
.
remove
(
)
;
this
.
_overlay
.
remove
(
)
;
if
(
this
.
_notificationBar
)
{
this
.
_notificationBar
.
remove
(
)
;
}
}
toggleOverlay
(
)
{
if
(
this
.
_tourItems
.
length
=
=
0
)
{
this
.
_loadTours
(
onboardingTours
)
;
}
this
.
hideNotification
(
)
;
this
.
_overlay
.
classList
.
toggle
(
"
onboarding
-
opened
"
)
;
let
hiddenCheckbox
=
this
.
_window
.
document
.
getElementById
(
"
onboarding
-
tour
-
hidden
-
checkbox
"
)
;
if
(
hiddenCheckbox
.
checked
)
{
this
.
hide
(
)
;
}
}
gotoPage
(
tourId
)
{
let
targetPageId
=
{
tourId
}
-
page
;
for
(
let
page
of
this
.
_tourPages
)
{
page
.
style
.
display
=
page
.
id
!
=
targetPageId
?
"
none
"
:
"
"
;
}
for
(
let
li
of
this
.
_tourItems
)
{
if
(
li
.
id
=
=
tourId
)
{
li
.
classList
.
add
(
"
onboarding
-
active
"
)
;
}
else
{
li
.
classList
.
remove
(
"
onboarding
-
active
"
)
;
}
}
}
isTourCompleted
(
tourId
)
{
return
Preferences
.
get
(
browser
.
onboarding
.
tour
.
{
tourId
}
.
completed
false
)
;
}
showNotification
(
)
{
if
(
Preferences
.
get
(
"
browser
.
onboarding
.
notification
.
finished
"
false
)
)
{
return
;
}
let
targetTour
=
null
;
let
lastPromptedId
=
onboardingTours
[
onboardingTours
.
length
-
1
]
.
id
;
lastPromptedId
=
Preferences
.
get
(
"
browser
.
onboarding
.
notification
.
lastPrompted
"
lastPromptedId
)
;
let
lastTourIndex
=
onboardingTours
.
findIndex
(
tour
=
>
tour
.
id
=
=
lastPromptedId
)
;
if
(
lastTourIndex
<
0
)
{
lastTourIndex
=
onboardingTours
.
length
-
1
;
}
let
toursToNotify
=
[
.
.
.
onboardingTours
.
slice
(
lastTourIndex
+
1
)
.
.
.
onboardingTours
.
slice
(
0
lastTourIndex
+
1
)
]
;
targetTour
=
toursToNotify
.
find
(
tour
=
>
!
this
.
isTourCompleted
(
tour
.
id
)
)
;
if
(
!
targetTour
)
{
this
.
sendMessageToChrome
(
"
set
-
prefs
"
[
{
name
:
"
browser
.
onboarding
.
notification
.
finished
"
value
:
true
}
]
)
;
return
;
}
this
.
_notificationBar
=
this
.
_renderNotificationBar
(
)
;
this
.
_notificationBar
.
addEventListener
(
"
click
"
this
)
;
this
.
_window
.
document
.
body
.
appendChild
(
this
.
_notificationBar
)
;
this
.
_notificationBar
.
dataset
.
targetTourId
=
targetTour
.
id
;
let
notificationStrings
=
targetTour
.
getNotificationStrings
(
this
.
_bundle
)
;
let
actionBtn
=
this
.
_notificationBar
.
querySelector
(
"
#
onboarding
-
notification
-
action
-
btn
"
)
;
actionBtn
.
textContent
=
notificationStrings
.
button
;
let
tourTitle
=
this
.
_notificationBar
.
querySelector
(
"
#
onboarding
-
notification
-
tour
-
title
"
)
;
tourTitle
.
textContent
=
notificationStrings
.
title
;
let
tourMessage
=
this
.
_notificationBar
.
querySelector
(
"
#
onboarding
-
notification
-
tour
-
message
"
)
;
tourMessage
.
textContent
=
notificationStrings
.
message
;
this
.
_notificationBar
.
addEventListener
(
"
transitionend
"
(
)
=
>
{
this
.
_notificationBar
.
dataset
.
cssTransition
=
"
end
"
;
}
{
once
:
true
}
)
;
this
.
_window
.
requestAnimationFrame
(
(
)
=
>
{
this
.
_window
.
requestAnimationFrame
(
(
)
=
>
this
.
_notificationBar
.
classList
.
add
(
"
onboarding
-
opened
"
)
)
;
}
)
;
this
.
sendMessageToChrome
(
"
set
-
prefs
"
[
{
name
:
"
browser
.
onboarding
.
notification
.
lastPrompted
"
value
:
targetTour
.
id
}
]
)
;
}
hideNotification
(
)
{
if
(
this
.
_notificationBar
)
{
this
.
_notificationBar
.
classList
.
remove
(
"
onboarding
-
opened
"
)
;
delete
this
.
_notificationBar
.
dataset
.
cssTransition
;
}
}
_renderNotificationBar
(
)
{
let
div
=
this
.
_window
.
document
.
createElement
(
"
div
"
)
;
div
.
id
=
"
onboarding
-
notification
-
bar
"
;
div
.
innerHTML
=
<
div
id
=
"
onboarding
-
notification
-
icon
"
>
<
/
div
>
<
section
id
=
"
onboarding
-
notification
-
message
-
section
"
>
<
div
id
=
"
onboarding
-
notification
-
tour
-
icon
"
>
<
/
div
>
<
div
id
=
"
onboarding
-
notification
-
body
"
>
<
h6
id
=
"
onboarding
-
notification
-
tour
-
title
"
>
<
/
h6
>
<
span
id
=
"
onboarding
-
notification
-
tour
-
message
"
>
<
/
span
>
<
/
div
>
<
button
id
=
"
onboarding
-
notification
-
action
-
btn
"
>
<
/
button
>
<
/
section
>
<
button
id
=
"
onboarding
-
notification
-
close
-
btn
"
>
<
/
button
>
;
let
toolTip
=
this
.
_bundle
.
formatStringFromName
(
"
onboarding
.
notification
-
icon
-
tool
-
tip
"
[
BRAND_SHORT_NAME
]
1
)
;
div
.
querySelector
(
"
#
onboarding
-
notification
-
icon
"
)
.
setAttribute
(
"
data
-
tooltip
"
toolTip
)
;
return
div
;
}
hide
(
)
{
this
.
sendMessageToChrome
(
"
set
-
prefs
"
[
{
name
:
"
browser
.
onboarding
.
hidden
"
value
:
true
}
{
name
:
"
browser
.
onboarding
.
notification
.
finished
"
value
:
true
}
]
)
;
}
_renderOverlay
(
)
{
let
div
=
this
.
_window
.
document
.
createElement
(
"
div
"
)
;
div
.
id
=
"
onboarding
-
overlay
"
;
div
.
innerHTML
=
<
div
id
=
"
onboarding
-
overlay
-
dialog
"
>
<
span
id
=
"
onboarding
-
overlay
-
close
-
btn
"
>
<
/
span
>
<
header
id
=
"
onboarding
-
header
"
>
<
/
header
>
<
nav
>
<
ul
id
=
"
onboarding
-
tour
-
list
"
>
<
/
ul
>
<
/
nav
>
<
footer
id
=
"
onboarding
-
footer
"
>
<
input
type
=
"
checkbox
"
id
=
"
onboarding
-
tour
-
hidden
-
checkbox
"
/
>
<
label
for
=
"
onboarding
-
tour
-
hidden
-
checkbox
"
>
<
/
label
>
<
/
footer
>
<
/
div
>
;
div
.
querySelector
(
"
label
[
for
=
'
onboarding
-
tour
-
hidden
-
checkbox
'
]
"
)
.
textContent
=
this
.
_bundle
.
GetStringFromName
(
"
onboarding
.
hidden
-
checkbox
-
label
"
)
;
div
.
querySelector
(
"
#
onboarding
-
header
"
)
.
textContent
=
this
.
_bundle
.
formatStringFromName
(
"
onboarding
.
overlay
-
title
"
[
BRAND_SHORT_NAME
]
1
)
;
return
div
;
}
_renderOverlayIcon
(
)
{
let
img
=
this
.
_window
.
document
.
createElement
(
"
div
"
)
;
img
.
id
=
"
onboarding
-
overlay
-
icon
"
;
return
img
;
}
_loadTours
(
tours
)
{
let
itemsFrag
=
this
.
_window
.
document
.
createDocumentFragment
(
)
;
let
pagesFrag
=
this
.
_window
.
document
.
createDocumentFragment
(
)
;
for
(
let
tour
of
tours
)
{
let
li
=
this
.
_window
.
document
.
createElement
(
"
li
"
)
;
li
.
textContent
=
this
.
_bundle
.
GetStringFromName
(
tour
.
tourNameId
)
;
li
.
id
=
tour
.
id
;
li
.
className
=
"
onboarding
-
tour
-
item
"
;
itemsFrag
.
appendChild
(
li
)
;
let
div
=
tour
.
getPage
(
this
.
_window
)
;
let
l10nElements
=
div
.
querySelectorAll
(
"
[
data
-
l10n
-
id
]
"
)
;
for
(
let
i
=
0
;
i
<
l10nElements
.
length
;
i
+
+
)
{
let
element
=
l10nElements
[
i
]
;
element
.
textContent
=
this
.
_bundle
.
formatStringFromName
(
element
.
dataset
.
l10nId
[
BRAND_SHORT_NAME
]
1
)
;
}
div
.
id
=
{
tour
.
id
}
-
page
;
div
.
classList
.
add
(
"
onboarding
-
tour
-
page
"
)
;
div
.
style
.
display
=
"
none
"
;
pagesFrag
.
appendChild
(
div
)
;
this
.
_tourItems
.
push
(
li
)
;
this
.
_tourPages
.
push
(
div
)
;
}
let
dialog
=
this
.
_window
.
document
.
getElementById
(
"
onboarding
-
overlay
-
dialog
"
)
;
let
ul
=
this
.
_window
.
document
.
getElementById
(
"
onboarding
-
tour
-
list
"
)
;
ul
.
appendChild
(
itemsFrag
)
;
let
footer
=
this
.
_window
.
document
.
getElementById
(
"
onboarding
-
footer
"
)
;
dialog
.
insertBefore
(
pagesFrag
footer
)
;
this
.
gotoPage
(
tours
[
0
]
.
id
)
;
}
_loadCSS
(
)
{
return
new
Promise
(
resolve
=
>
{
let
doc
=
this
.
_window
.
document
;
let
link
=
doc
.
createElement
(
"
link
"
)
;
link
.
rel
=
"
stylesheet
"
;
link
.
type
=
"
text
/
css
"
;
link
.
href
=
ONBOARDING_CSS_URL
;
link
.
addEventListener
(
"
load
"
resolve
)
;
doc
.
head
.
appendChild
(
link
)
;
}
)
;
}
_loadJS
(
uri
)
{
let
doc
=
this
.
_window
.
document
;
let
script
=
doc
.
createElement
(
"
script
"
)
;
script
.
type
=
"
text
/
javascript
"
;
script
.
src
=
uri
;
doc
.
head
.
appendChild
(
script
)
;
}
}
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
onboarding
.
enabled
"
false
)
&
&
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
onboarding
.
hidden
"
false
)
)
{
addEventListener
(
"
load
"
function
onLoad
(
evt
)
{
if
(
!
content
|
|
evt
.
target
!
=
content
.
document
)
{
return
;
}
removeEventListener
(
"
load
"
onLoad
)
;
let
window
=
evt
.
target
.
defaultView
;
let
location
=
window
.
location
.
href
;
if
(
location
=
=
ABOUT_NEWTAB_URL
|
|
location
=
=
ABOUT_HOME_URL
)
{
window
.
requestIdleCallback
(
(
)
=
>
{
new
Onboarding
(
window
)
;
}
)
;
}
}
true
)
;
}
