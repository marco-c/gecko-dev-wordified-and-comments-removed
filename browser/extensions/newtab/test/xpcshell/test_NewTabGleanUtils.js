"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
NewTabGleanUtils
:
"
resource
:
/
/
newtab
/
lib
/
NewTabGleanUtils
.
sys
.
mjs
"
sinon
:
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
}
)
;
const
TEST_RESOURCE_URI
=
"
resource
:
/
/
test
.
json
"
;
function
test_setup
(
)
{
const
sandbox
=
sinon
.
createSandbox
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
sandbox
.
stub
(
NewTabGleanUtils
"
readJSON
"
)
.
returns
(
"
{
}
"
)
;
return
sandbox
;
}
add_task
(
async
function
test_registerMetricsAndPings_emptyFile
(
)
{
const
sandbox
=
test_setup
(
)
;
let
result
=
await
NewTabGleanUtils
.
registerMetricsAndPings
(
TEST_RESOURCE_URI
)
;
Assert
.
ok
(
!
result
"
No
metrics
or
ping
registration
for
empty
file
"
)
;
sandbox
.
restore
(
)
;
}
)
;
add_task
(
async
function
test_registerMetricsAndPings_invalidFormat
(
)
{
const
sandbox
=
test_setup
(
)
;
NewTabGleanUtils
.
readJSON
.
returns
(
{
pings
:
{
ping1
:
{
include_client_id
:
true
}
ping2
:
{
include_client_id
:
false
}
}
metrics
:
{
category
:
{
metric1
:
{
type
:
"
counter
"
}
metric2
:
{
type
:
"
string
"
}
}
}
}
)
;
let
result
=
await
NewTabGleanUtils
.
registerMetricsAndPings
(
TEST_RESOURCE_URI
)
;
Assert
.
ok
(
!
result
"
Registration
failure
for
invalid
metric
and
ping
format
"
)
;
sandbox
.
restore
(
)
;
}
)
;
add_task
(
async
function
test_registerMetricsAndPings_validFormat
(
)
{
const
sandbox
=
test_setup
(
)
;
NewTabGleanUtils
.
readJSON
.
returns
(
{
pings
:
{
newtab_ping
:
{
includeClientId
:
false
sendIfEmpty
:
false
preciseTimestamps
:
true
includeInfoSections
:
true
enabled
:
true
schedulesPings
:
[
]
reasonCodes
:
[
]
followsCollectionEnabled
:
true
uploaderCapabilities
:
[
]
}
}
metrics
:
{
newtab_category
:
{
metric1
:
{
type
:
"
text
"
description
:
"
test
-
description
"
lifetime
:
"
ping
"
pings
:
[
"
newtab
"
]
disabled
:
false
}
}
}
}
)
;
let
result
=
await
NewTabGleanUtils
.
registerMetricsAndPings
(
TEST_RESOURCE_URI
)
;
Assert
.
ok
(
result
"
Registration
success
for
valid
metric
and
ping
formats
"
)
;
sandbox
.
restore
(
)
;
}
)
;
add_task
(
async
function
test_registerMetricsAndPings_metricDescriptionOptional
(
)
{
const
sandbox
=
test_setup
(
)
;
NewTabGleanUtils
.
readJSON
.
returns
(
{
metrics
:
{
newtab
:
{
metric2
:
{
type
:
"
text
"
lifetime
:
"
ping
"
pings
:
[
"
newtab
"
]
disabled
:
false
}
}
}
}
)
;
let
result
=
await
NewTabGleanUtils
.
registerMetricsAndPings
(
TEST_RESOURCE_URI
)
;
Assert
.
ok
(
result
Registration
success
for
metric2
with
missing
description
.
Description
property
not
required
in
JSON
for
metric
registration
)
;
sandbox
.
restore
(
)
;
}
)
;
add_task
(
async
function
test_registerMetricIfNeeded_telemetrySent
(
)
{
const
validOptions
=
{
name
:
"
metric1
"
type
:
"
text
"
category
:
"
test
"
pings
:
[
"
newtab
"
]
lifetime
:
"
ping
"
disabled
:
false
}
;
NewTabGleanUtils
.
registerMetricIfNeeded
(
validOptions
)
;
Assert
.
ok
(
Glean
.
newtab
.
metricRegistered
.
metric1
.
testGetValue
(
)
"
Glean
metricRegistered
telemetry
sent
with
value
as
true
"
)
;
const
invalidOptions
=
{
name
:
"
metric2
"
type
:
"
text
"
category
:
"
test
"
pings
:
[
"
newtab
"
]
disabled
:
false
}
;
Assert
.
throws
(
(
)
=
>
NewTabGleanUtils
.
registerMetricIfNeeded
(
invalidOptions
)
/
Failure
while
registering
metrics
metric2
/
"
Throws
when
metric
registration
fails
due
to
missing
lifetime
param
"
)
;
Assert
.
strictEqual
(
Glean
.
newtab
.
metricRegistered
.
metric2
.
testGetValue
(
)
false
"
Glean
metricRegistered
telemetry
sent
with
value
as
false
"
)
;
}
)
;
add_task
(
async
function
test_registerPingIfNeeded_telemetrySent
(
)
{
const
validOptions
=
{
name
:
"
ping1
"
includeClientId
:
false
sendIfEmpty
:
false
preciseTimestamps
:
true
includeInfoSections
:
true
enabled
:
true
schedulesPings
:
[
]
reasonCodes
:
[
]
followsCollectionEnabled
:
true
uploaderCapabilities
:
[
]
}
;
NewTabGleanUtils
.
registerPingIfNeeded
(
validOptions
)
;
Assert
.
ok
(
Glean
.
newtab
.
pingRegistered
.
ping1
.
testGetValue
(
)
"
Glean
pingRegistered
telemetry
sent
with
value
as
true
for
ping1
"
)
;
const
invalidOptions
=
{
name
:
"
ping2
"
includeClientId
:
false
sendIfEmpty
:
false
preciseTimestamps
:
true
includeInfoSections
:
true
enabled
:
true
schedulesPings
:
[
]
reasonCodes
:
[
]
followsCollectionEnabled
:
true
}
;
Assert
.
throws
(
(
)
=
>
NewTabGleanUtils
.
registerPingIfNeeded
(
invalidOptions
)
/
Failure
while
registering
ping
ping2
/
"
Throws
when
ping
registration
fails
due
to
missing
uploaderCapabilities
param
"
)
;
Assert
.
strictEqual
(
Glean
.
newtab
.
pingRegistered
.
ping2
.
testGetValue
(
)
false
"
Glean
pingRegistered
telemetry
sent
with
value
as
false
for
ping2
"
)
;
}
)
;
add_task
(
async
function
test_registerMetricIfNeeded_eventMetrics
(
)
{
const
options
=
{
name
:
"
event1
"
category
:
"
test_category
"
type
:
"
event
"
pings
:
[
"
events
"
]
lifetime
:
"
ping
"
disabled
:
false
}
;
NewTabGleanUtils
.
registerMetricIfNeeded
(
options
)
;
Assert
.
ok
(
Glean
.
newtab
.
metricRegistered
.
event1
.
testGetValue
(
)
"
Glean
metricRegistered
telemetry
sent
with
value
as
true
"
)
;
const
optionsWithExtra
=
{
name
:
"
event2
"
category
:
"
test_category
"
type
:
"
event
"
pings
:
[
"
events
"
]
lifetime
:
"
ping
"
disabled
:
false
extraArgs
:
{
allowed_extra_keys
:
[
"
extra1
"
"
extra2
"
]
}
}
;
NewTabGleanUtils
.
registerMetricIfNeeded
(
optionsWithExtra
)
;
Assert
.
ok
(
Glean
.
newtab
.
metricRegistered
.
event2
.
testGetValue
(
)
"
Glean
metricRegistered
telemetry
sent
with
value
as
true
"
)
;
let
extra
=
{
extra1
:
"
extra1
value
"
extra2
:
"
extra2
value
"
}
;
Glean
.
testCategory
.
event2
.
record
(
extra
)
;
let
events
=
Glean
.
testCategory
.
event2
.
testGetValue
(
)
;
Assert
.
equal
(
1
events
.
length
"
Events
recorded
count
"
)
;
}
)
;
add_task
(
async
function
test_registerMetricIfNeeded_nonEventMetrics
(
)
{
const
options
=
{
name
:
"
event3
"
type
:
"
text
"
category
:
"
test_category1
"
pings
:
[
"
events
"
]
lifetime
:
"
ping
"
disabled
:
false
extraArgs
:
{
allowed_extra_keys
:
[
"
extra1
"
"
extra2
"
]
}
}
;
NewTabGleanUtils
.
registerMetricIfNeeded
(
options
)
;
Assert
.
ok
(
Glean
.
newtab
.
metricRegistered
.
event3
.
testGetValue
(
)
"
Glean
metricRegistered
telemetry
sent
with
value
as
true
"
)
;
let
extra
=
{
extra1
:
"
extra1
value
"
extra2
:
"
extra2
value
"
}
;
Assert
.
throws
(
(
)
=
>
Glean
.
testCategory1
.
event3
.
record
(
extra
)
/
TypeError
/
"
Throws
when
using
record
for
non
event
type
"
)
;
Glean
.
testCategory1
.
event3
.
set
(
"
Test
"
)
;
Assert
.
equal
(
"
Test
"
Glean
.
testCategory1
.
event3
.
testGetValue
(
)
"
Success
when
using
set
to
send
data
of
type
text
"
)
;
}
)
;
