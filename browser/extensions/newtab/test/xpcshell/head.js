"
use
strict
"
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
sys
.
mjs
"
)
;
const
{
ExtensionTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
ExtensionXPCShellUtils
.
sys
.
mjs
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AboutNewTab
:
"
resource
:
/
/
/
modules
/
AboutNewTab
.
sys
.
mjs
"
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
sys
.
mjs
"
AddonManagerPrivate
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
sys
.
mjs
"
ExtensionParent
:
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
sys
.
mjs
"
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
sys
.
mjs
"
}
)
;
do_get_profile
(
)
;
ExtensionTestUtils
.
init
(
this
)
;
AddonTestUtils
.
init
(
this
)
;
AddonTestUtils
.
overrideCertDB
(
)
;
async
function
loadExtension
(
)
{
const
scopes
=
AddonManager
.
SCOPE_PROFILE
|
AddonManager
.
SCOPE_APPLICATION
;
Services
.
prefs
.
setIntPref
(
"
extensions
.
enabledScopes
"
scopes
)
;
const
EXTENSION_ID
=
"
newtab
mozilla
.
org
"
;
const
builtinsConfig
=
await
fetch
(
"
chrome
:
/
/
browser
/
content
/
built_in_addons
.
json
"
)
.
then
(
res
=
>
res
.
json
(
)
)
;
await
AddonTestUtils
.
overrideBuiltIns
(
{
system
:
[
]
builtins
:
builtinsConfig
.
builtins
.
filter
(
entry
=
>
entry
.
addon_id
=
=
=
EXTENSION_ID
)
}
)
;
await
AddonTestUtils
.
promiseShutdownManager
(
{
clearL10nRegistry
:
false
}
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
const
addon
=
await
AddonManager
.
getAddonByID
(
EXTENSION_ID
)
;
Assert
.
ok
(
addon
"
Expect
newtab
addon
to
be
found
"
)
;
}
add_setup
(
async
function
head_initialize
(
)
{
AddonTestUtils
.
createAppInfo
(
"
xpcshell
tests
.
mozilla
.
org
"
"
XPCShell
"
"
1
"
"
142
"
)
;
await
AddonTestUtils
.
promiseStartupManager
(
)
;
if
(
AppConstants
.
BROWSER_NEWTAB_AS_ADDON
)
{
Services
.
prefs
.
setBoolPref
(
"
extensions
.
experiments
.
enabled
"
true
)
;
await
loadExtension
(
)
;
}
AboutNewTab
.
init
(
)
;
}
)
;
function
assertNewTabResourceMapping
(
expectedRootURISpec
=
null
)
{
const
resProto
=
Cc
[
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
resource
"
]
.
getService
(
Ci
.
nsIResProtocolHandler
)
;
const
chromeRegistry
=
Cc
[
"
mozilla
.
org
/
chrome
/
chrome
-
registry
;
1
"
]
.
getService
(
Ci
.
nsIChromeRegistry
)
;
const
expectedSpec
=
expectedRootURISpec
?
?
{
resProto
.
getSubstitution
(
"
builtin
-
addons
"
)
.
spec
}
newtab
/
;
Assert
.
equal
(
resProto
.
getSubstitution
(
"
newtab
"
)
?
.
spec
expectedSpec
"
Got
the
expected
resource
:
/
/
newtab
/
substitution
"
)
;
Assert
.
equal
(
chromeRegistry
.
convertChromeURL
(
Services
.
io
.
newURI
(
"
chrome
:
/
/
newtab
/
content
/
css
/
"
)
)
?
.
spec
{
expectedSpec
}
data
/
css
/
"
Got
the
expected
chrome
:
/
/
newtab
/
content
substitution
"
)
;
}
