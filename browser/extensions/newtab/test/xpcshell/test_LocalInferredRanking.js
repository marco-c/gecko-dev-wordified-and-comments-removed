"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
scoreItemInferred
:
"
resource
:
/
/
newtab
/
lib
/
InferredModel
/
GreedyContentRanker
.
mjs
"
}
)
;
add_task
(
async
function
test_scoreItemInferred_combines_normalized_local_and_server
(
)
{
const
inferredInterests
=
{
parenting
:
0
.
6
news_reader
:
0
.
2
clicks
:
2
}
;
const
weights
=
{
local
:
0
.
6
server
:
0
.
4
inferred_norm
:
0
.
8
}
;
const
item
=
{
id
:
"
a1
"
section
:
"
top_stories_section
"
item_score
:
0
server_score
:
0
.
5
features
:
{
s_parenting
:
1
s_news_reader
:
1
other
:
1
}
}
;
const
ret
=
await
scoreItemInferred
(
item
inferredInterests
weights
)
;
Assert
.
strictEqual
(
ret
item
"
returns
same
object
"
)
;
const
expected
=
(
0
.
6
*
0
.
8
)
/
(
0
.
8
+
1e
-
6
)
+
0
.
4
*
0
.
5
;
Assert
.
greater
(
item
.
score
0
"
score
is
positive
"
)
;
Assert
.
less
(
Math
.
abs
(
item
.
score
-
expected
)
1e
-
6
"
score
matches
normalized
formula
with
epsilon
"
)
;
Assert
.
equal
(
item
.
score
item
.
item_score
"
score
mirrors
item_score
"
)
;
}
)
;
add_task
(
async
function
test_scoreItemInferred_server_nullish_is_zero
(
)
{
const
inferredInterests
=
{
tech
:
0
.
8
}
;
const
weights
=
{
local
:
1
.
0
server
:
0
.
4
inferred_norm
:
0
.
8
}
;
const
item
=
{
id
:
"
a2
"
section
:
"
top_stories_section
"
features
:
{
s_tech
:
1
}
}
;
await
scoreItemInferred
(
item
inferredInterests
weights
)
;
const
expected
=
(
1
.
0
*
0
.
8
)
/
(
0
.
8
+
1e
-
6
)
+
0
.
4
*
0
;
Assert
.
less
(
Math
.
abs
(
item
.
score
-
expected
)
1e
-
6
"
merino
nullish
0
"
)
;
}
)
;
