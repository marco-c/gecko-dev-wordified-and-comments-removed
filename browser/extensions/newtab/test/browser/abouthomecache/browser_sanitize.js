"
use
strict
"
;
add_task
(
async
function
test_sanitize
(
)
{
let
testFlags
=
[
[
"
downloads
"
Ci
.
nsIClearDataService
.
CLEAR_DOWNLOADS
]
[
"
history
"
Ci
.
nsIClearDataService
.
CLEAR_HISTORY
]
]
;
await
withFullyLoadedAboutHome
(
async
browser
=
>
{
for
(
let
[
type
flag
]
of
testFlags
)
{
await
simulateRestart
(
browser
)
;
await
ensureCachedAboutHome
(
browser
)
;
info
(
"
Testing
that
the
about
:
home
startup
cache
is
cleared
when
"
+
clearing
{
type
}
)
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
Services
.
clearData
.
deleteData
(
flag
{
onDataDeleted
(
resultFlags
)
{
if
(
!
resultFlags
)
{
resolve
(
)
;
}
else
{
reject
(
new
Error
(
Failed
with
flags
:
{
resultFlags
}
)
)
;
}
}
}
)
;
}
)
;
await
simulateRestart
(
browser
{
withAutoShutdownWrite
:
false
ensureCacheWinsRace
:
false
}
)
;
await
ensureDynamicAboutHome
(
browser
AboutHomeStartupCache
.
CACHE_RESULT_SCALARS
.
DOES_NOT_EXIST
)
;
}
}
)
;
}
)
;
