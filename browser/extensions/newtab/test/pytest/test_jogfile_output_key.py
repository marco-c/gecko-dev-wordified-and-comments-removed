import
io
import
sys
from
os
import
path
from
pathlib
import
Path
import
mozunit
ROOT_PATH
=
path
.
abspath
(
    
path
.
join
(
        
path
.
dirname
(
__file__
)
        
path
.
pardir
        
path
.
pardir
        
path
.
pardir
        
path
.
pardir
        
path
.
pardir
    
)
)
WEBEXT_METRICS_PATH
=
path
.
join
(
    
ROOT_PATH
"
browser
"
"
extensions
"
"
newtab
"
"
webext
-
glue
"
"
metrics
"
)
sys
.
path
.
append
(
WEBEXT_METRICS_PATH
)
import
glean_utils
GLEAN_TESTS_PATH
=
path
.
join
(
    
ROOT_PATH
"
toolkit
"
"
components
"
"
glean
"
"
tests
"
"
pytest
"
)
sys
.
path
.
append
(
GLEAN_TESTS_PATH
)
from
expect_helper
import
expect
GLEAN_BUILD_SCRIPTS_PATH
=
path
.
join
(
    
ROOT_PATH
"
toolkit
"
"
components
"
"
glean
"
"
build_scripts
"
"
glean_parser_ext
"
)
sys
.
path
.
append
(
GLEAN_BUILD_SCRIPTS_PATH
)
import
run_glean_parser
def
test_jogfile_output_key
(
)
:
    
"
"
"
    
A
regression
test
.
Very
fragile
.
    
It
generates
a
jogfile
with
keys
for
metrics_test
.
yaml
and
compares
that
JSON
with
an
expected
output
JSON
file
.
    
To
generate
new
expected
output
files
set
UPDATE_EXPECT
=
1
when
running
the
test
suite
:
    
UPDATE_EXPECT
=
1
mach
test
toolkit
/
components
/
glean
/
tests
/
pytest
    
"
"
"
    
options
=
{
"
allow_reserved
"
:
False
}
    
input_files
=
[
        
Path
(
GLEAN_TESTS_PATH
)
/
"
metrics_test
.
yaml
"
        
Path
(
GLEAN_TESTS_PATH
)
/
"
pings_test
.
yaml
"
    
]
    
all_objs
options
=
run_glean_parser
.
parse_with_options
(
input_files
options
)
    
output_fd
=
io
.
StringIO
(
)
    
glean_utils
.
output_file_with_key
(
all_objs
output_fd
options
)
    
expect
(
        
Path
(
path
.
dirname
(
__file__
)
)
/
"
jogfile_output_key
"
output_fd
.
getvalue
(
)
True
    
)
if
__name__
=
=
"
__main__
"
:
    
mozunit
.
main
(
)
