const
PAGE_TEMPLATE_RESOURCE_PATH
=
"
resource
:
/
/
newtab
/
data
/
content
/
abouthomecache
/
page
.
html
.
template
"
;
const
SCRIPT_TEMPLATE_RESOURCE_PATH
=
"
resource
:
/
/
newtab
/
data
/
content
/
abouthomecache
/
script
.
js
.
template
"
;
let
window
=
self
;
window
.
requestAnimationFrame
=
(
)
=
>
{
}
;
window
.
cancelAnimationFrame
=
(
)
=
>
{
}
;
importScripts
(
"
resource
:
/
/
gre
/
modules
/
workers
/
require
.
js
"
)
;
{
let
oldChromeUtils
=
ChromeUtils
;
ChromeUtils
=
undefined
;
importScripts
(
"
chrome
:
/
/
global
/
content
/
vendor
/
react
.
js
"
"
chrome
:
/
/
global
/
content
/
vendor
/
react
-
dom
.
js
"
"
chrome
:
/
/
global
/
content
/
vendor
/
react
-
dom
-
server
.
js
"
"
chrome
:
/
/
global
/
content
/
vendor
/
redux
.
js
"
"
chrome
:
/
/
global
/
content
/
vendor
/
react
-
transition
-
group
.
js
"
"
chrome
:
/
/
global
/
content
/
vendor
/
prop
-
types
.
js
"
"
chrome
:
/
/
global
/
content
/
vendor
/
react
-
redux
.
js
"
"
resource
:
/
/
newtab
/
data
/
content
/
activity
-
stream
.
bundle
.
js
"
)
;
ChromeUtils
=
oldChromeUtils
;
}
let
PromiseWorker
=
require
(
"
resource
:
/
/
gre
/
modules
/
workers
/
PromiseWorker
.
js
"
)
;
let
Agent
=
{
_templates
:
null
getOrCreateTemplates
(
)
{
if
(
this
.
_templates
)
{
return
this
.
_templates
;
}
const
templateResources
=
new
Map
(
[
[
"
pageTemplate
"
PAGE_TEMPLATE_RESOURCE_PATH
]
[
"
scriptTemplate
"
SCRIPT_TEMPLATE_RESOURCE_PATH
]
]
)
;
this
.
_templates
=
{
}
;
for
(
let
[
templateName
path
]
of
templateResources
)
{
const
xhr
=
new
XMLHttpRequest
(
)
;
xhr
.
open
(
"
GET
"
path
false
)
;
xhr
.
responseType
=
"
text
"
;
xhr
.
send
(
null
)
;
this
.
_templates
[
templateName
]
=
xhr
.
responseText
;
}
return
this
.
_templates
;
}
construct
(
state
)
{
try
{
return
this
.
_construct
(
state
)
;
}
catch
(
e
)
{
console
.
error
(
"
about
:
home
startup
cache
construction
failed
:
"
e
)
;
return
{
page
:
null
script
:
null
}
;
}
}
_construct
(
state
)
{
state
.
App
.
isForStartupCache
=
true
;
let
fakeStore
=
{
getState
(
)
{
return
state
;
}
dispatch
(
)
{
}
}
;
let
markup
=
ReactDOMServer
.
renderToString
(
NewtabRenderUtils
.
NewTab
(
{
store
:
fakeStore
isFirstrun
:
false
}
)
)
;
let
{
pageTemplate
scriptTemplate
}
=
this
.
getOrCreateTemplates
(
)
;
let
cacheTime
=
new
Date
(
)
.
toUTCString
(
)
;
let
page
=
pageTemplate
.
replace
(
"
{
{
MARKUP
}
}
"
markup
)
.
replace
(
"
{
{
CACHE_TIME
}
}
"
cacheTime
)
;
let
script
=
scriptTemplate
.
replace
(
"
{
{
STATE
}
}
"
JSON
.
stringify
(
state
null
"
\
t
"
)
)
;
return
{
page
script
}
;
}
}
;
let
worker
=
new
PromiseWorker
.
AbstractWorker
(
)
;
worker
.
dispatch
=
function
(
method
args
=
[
]
)
{
return
Agent
[
method
]
(
.
.
.
args
)
;
}
;
worker
.
postMessage
=
function
(
result
.
.
.
transfers
)
{
self
.
postMessage
(
result
.
.
.
transfers
)
;
}
;
worker
.
close
=
function
(
)
{
self
.
close
(
)
;
}
;
self
.
addEventListener
(
"
message
"
msg
=
>
worker
.
handleMessage
(
msg
)
)
;
self
.
addEventListener
(
"
unhandledrejection
"
function
(
error
)
{
throw
error
.
reason
;
}
)
;
