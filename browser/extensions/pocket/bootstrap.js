const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
manager
:
Cm
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
services
-
common
/
utils
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
RecentWindow
"
"
resource
:
/
/
/
modules
/
RecentWindow
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
SocialService
"
"
resource
:
/
/
gre
/
modules
/
SocialService
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ReaderMode
"
"
resource
:
/
/
gre
/
modules
/
ReaderMode
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Pocket
"
"
chrome
:
/
/
pocket
/
content
/
Pocket
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gPocketBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
pocket
/
locale
/
pocket
.
properties
"
)
;
}
)
;
const
PREF_BRANCH
=
"
extensions
.
pocket
.
"
;
const
PREFS
=
{
enabled
:
true
api
:
"
api
.
getpocket
.
com
"
site
:
"
getpocket
.
com
"
oAuthConsumerKey
:
"
40249
-
e88c401e1b1f2242d9e441c4
"
}
;
function
setDefaultPrefs
(
)
{
let
branch
=
Services
.
prefs
.
getDefaultBranch
(
PREF_BRANCH
)
;
for
(
let
[
key
val
]
in
Iterator
(
PREFS
)
)
{
switch
(
typeof
val
)
{
case
"
boolean
"
:
branch
.
setBoolPref
(
key
val
)
;
break
;
case
"
number
"
:
branch
.
setIntPref
(
key
val
)
;
break
;
case
"
string
"
:
branch
.
setCharPref
(
key
val
)
;
break
;
}
}
}
function
*
allBrowserWindows
(
)
{
var
winEnum
=
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
while
(
winEnum
.
hasMoreElements
(
)
)
{
let
win
=
winEnum
.
getNext
(
)
;
if
(
win
.
closed
)
continue
;
yield
win
;
}
}
function
createElementWithAttrs
(
document
type
attrs
)
{
let
element
=
document
.
createElement
(
type
)
;
Object
.
keys
(
attrs
)
.
forEach
(
function
(
attr
)
{
element
.
setAttribute
(
attr
attrs
[
attr
]
)
;
}
)
return
element
;
}
function
CreatePocketWidget
(
reason
)
{
let
id
=
"
pocket
-
button
"
let
widget
=
CustomizableUI
.
getWidget
(
id
)
;
if
(
widget
&
&
widget
.
provider
=
=
CustomizableUI
.
PROVIDER_API
)
return
;
let
seenWidget
=
CustomizableUI
.
getPlacementOfWidget
(
"
pocket
-
button
"
false
true
)
;
let
pocketButton
=
{
id
:
"
pocket
-
button
"
defaultArea
:
CustomizableUI
.
AREA_NAVBAR
introducedInVersion
:
"
pref
"
type
:
"
view
"
viewId
:
"
PanelUI
-
pocketView
"
label
:
gPocketBundle
.
GetStringFromName
(
"
pocket
-
button
.
label
"
)
tooltiptext
:
gPocketBundle
.
GetStringFromName
(
"
pocket
-
button
.
tooltiptext
"
)
onViewShowing
:
function
(
)
{
return
Pocket
.
onPanelViewShowing
.
apply
(
this
arguments
)
;
}
onViewHiding
:
function
(
)
{
return
Pocket
.
onPanelViewHiding
.
apply
(
this
arguments
)
;
}
onBeforeCreated
:
function
(
doc
)
{
if
(
doc
.
getElementById
(
"
PanelUI
-
pocketView
"
)
)
return
;
let
view
=
doc
.
createElement
(
"
panelview
"
)
;
view
.
id
=
"
PanelUI
-
pocketView
"
;
let
panel
=
doc
.
createElement
(
"
vbox
"
)
;
panel
.
setAttribute
(
"
class
"
"
panel
-
subview
-
body
"
)
;
view
.
appendChild
(
panel
)
;
doc
.
getElementById
(
"
PanelUI
-
multiView
"
)
.
appendChild
(
view
)
;
}
}
;
CustomizableUI
.
createWidget
(
pocketButton
)
;
CustomizableUI
.
addListener
(
pocketButton
)
;
let
placed
=
CustomizableUI
.
getPlacementOfWidget
(
"
pocket
-
button
"
)
;
if
(
reason
=
=
ADDON_ENABLE
&
&
!
seenWidget
&
&
placed
)
{
let
widgets
=
CustomizableUI
.
getWidgetIdsInArea
(
CustomizableUI
.
AREA_NAVBAR
)
;
let
bmbtn
=
widgets
.
indexOf
(
"
bookmarks
-
menu
-
button
"
)
;
if
(
bmbtn
>
-
1
)
{
CustomizableUI
.
moveWidgetWithinArea
(
"
pocket
-
button
"
bmbtn
+
1
)
;
}
}
let
origin
=
"
https
:
/
/
getpocket
.
com
"
;
SocialService
.
getProvider
(
origin
provider
=
>
{
if
(
provider
)
{
let
pref
=
"
social
.
backup
.
getpocket
-
com
"
;
if
(
!
Services
.
prefs
.
prefHasUserValue
(
pref
)
)
{
let
str
=
Cc
[
"
mozilla
.
org
/
supports
-
string
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsString
)
;
str
.
data
=
JSON
.
stringify
(
provider
.
manifest
)
;
Services
.
prefs
.
setComplexValue
(
pref
Ci
.
nsISupportsString
str
)
;
SocialService
.
uninstallProvider
(
origin
(
)
=
>
{
}
)
;
}
}
}
)
;
}
;
var
PocketContextMenu
=
{
init
:
function
(
)
{
Services
.
obs
.
addObserver
(
this
"
on
-
build
-
contextmenu
"
false
)
;
}
shutdown
:
function
(
)
{
Services
.
obs
.
removeObserver
(
this
"
on
-
build
-
contextmenu
"
)
;
for
(
let
win
of
allBrowserWindows
(
)
)
{
let
document
=
win
.
document
;
for
(
let
id
in
[
"
context
-
pocket
"
"
context
-
savelinktopocket
"
]
)
{
let
element
=
document
.
getElementById
(
id
)
;
if
(
element
)
element
.
remove
(
)
;
}
}
}
observe
:
function
(
aSubject
aTopic
aData
)
{
let
subject
=
aSubject
.
wrappedJSObject
;
;
let
document
=
subject
.
menu
.
ownerDocument
;
let
window
=
document
.
defaultView
;
let
pocketEnabled
=
CustomizableUI
.
getPlacementOfWidget
(
"
pocket
-
button
"
)
;
let
showSaveCurrentPageToPocket
=
!
(
subject
.
onTextInput
|
|
subject
.
onLink
|
|
subject
.
isContentSelected
|
|
subject
.
onImage
|
|
subject
.
onCanvas
|
|
subject
.
onVideo
|
|
subject
.
onAudio
)
;
let
targetUrl
=
subject
.
onLink
?
subject
.
linkUrl
:
subject
.
pageUrl
;
let
targetURI
=
Services
.
io
.
newURI
(
targetUrl
null
null
)
;
let
canPocket
=
pocketEnabled
&
&
(
targetURI
.
schemeIs
(
"
http
"
)
|
|
targetURI
.
schemeIs
(
"
https
"
)
|
|
(
targetURI
.
schemeIs
(
"
about
"
)
&
&
ReaderMode
.
getOriginalUrl
(
targetUrl
)
)
)
;
let
showSaveLinkToPocket
=
canPocket
&
&
!
showSaveCurrentPageToPocket
&
&
subject
.
onLink
;
let
menu
=
document
.
getElementById
(
"
context
-
pocket
"
)
;
if
(
!
menu
)
{
menu
=
createElementWithAttrs
(
document
"
menuitem
"
{
"
id
"
:
"
context
-
pocket
"
"
label
"
:
gPocketBundle
.
GetStringFromName
(
"
saveToPocketCmd
.
label
"
)
"
accesskey
"
:
gPocketBundle
.
GetStringFromName
(
"
saveToPocketCmd
.
accesskey
"
)
"
oncommand
"
:
"
Pocket
.
savePage
(
gContextMenu
.
browser
gContextMenu
.
browser
.
currentURI
.
spec
gContextMenu
.
browser
.
contentTitle
)
;
"
}
)
;
let
sibling
=
document
.
getElementById
(
"
context
-
savepage
"
)
;
if
(
sibling
.
nextSibling
)
{
sibling
.
parentNode
.
insertBefore
(
menu
sibling
.
nextSibling
)
;
}
else
{
sibling
.
parentNode
.
appendChild
(
menu
)
;
}
}
menu
.
hidden
=
!
(
canPocket
&
&
showSaveCurrentPageToPocket
)
;
menu
=
document
.
getElementById
(
"
context
-
savelinktopocket
"
)
;
if
(
!
menu
)
{
menu
=
createElementWithAttrs
(
document
"
menuitem
"
{
"
id
"
:
"
context
-
savelinktopocket
"
"
label
"
:
gPocketBundle
.
GetStringFromName
(
"
saveLinkToPocketCmd
.
label
"
)
"
accesskey
"
:
gPocketBundle
.
GetStringFromName
(
"
saveLinkToPocketCmd
.
accesskey
"
)
"
oncommand
"
:
"
Pocket
.
savePage
(
gContextMenu
.
browser
gContextMenu
.
linkURL
)
;
"
}
)
;
sibling
=
document
.
getElementById
(
"
context
-
savelink
"
)
;
if
(
sibling
.
nextSibling
)
{
sibling
.
parentNode
.
insertBefore
(
menu
sibling
.
nextSibling
)
;
}
else
{
sibling
.
parentNode
.
appendChild
(
menu
)
;
}
}
menu
.
hidden
=
!
showSaveLinkToPocket
;
}
}
var
PocketReader
=
{
startup
:
function
(
)
{
let
mm
=
Services
.
mm
;
mm
.
addMessageListener
(
"
Reader
:
OnSetup
"
this
)
;
mm
.
addMessageListener
(
"
Reader
:
Clicked
-
pocket
-
button
"
this
)
;
mm
.
broadcastAsyncMessage
(
"
Reader
:
AddButton
"
{
id
:
"
pocket
-
button
"
title
:
gPocketBundle
.
GetStringFromName
(
"
pocket
-
button
.
tooltiptext
"
)
image
:
"
chrome
:
/
/
pocket
/
content
/
panels
/
img
/
pocket
.
svg
#
pocket
-
mark
"
}
)
;
}
shutdown
:
function
(
)
{
let
mm
=
Services
.
mm
;
mm
.
removeMessageListener
(
"
Reader
:
OnSetup
"
this
)
;
mm
.
removeMessageListener
(
"
Reader
:
Clicked
-
pocket
-
button
"
this
)
;
mm
.
broadcastAsyncMessage
(
"
Reader
:
RemoveButton
"
{
id
:
"
pocket
-
button
"
}
)
;
}
receiveMessage
:
function
(
message
)
{
switch
(
message
.
name
)
{
case
"
Reader
:
OnSetup
"
:
{
message
.
target
.
messageManager
.
sendAsyncMessage
(
"
Reader
:
AddButton
"
{
id
:
"
pocket
-
button
"
title
:
gPocketBundle
.
GetStringFromName
(
"
pocket
-
button
.
tooltiptext
"
)
image
:
"
chrome
:
/
/
pocket
/
content
/
panels
/
img
/
pocket
.
svg
#
pocket
-
mark
"
}
)
;
break
;
}
case
"
Reader
:
Clicked
-
pocket
-
button
"
:
{
let
doc
=
message
.
target
.
ownerDocument
;
let
pocketWidget
=
doc
.
getElementById
(
"
pocket
-
button
"
)
;
let
placement
=
CustomizableUI
.
getPlacementOfWidget
(
"
pocket
-
button
"
)
;
if
(
placement
)
{
if
(
placement
.
area
=
=
CustomizableUI
.
AREA_PANEL
)
{
doc
.
defaultView
.
PanelUI
.
show
(
)
.
then
(
function
(
)
{
pocketWidget
=
doc
.
getElementById
(
"
pocket
-
button
"
)
;
pocketWidget
.
doCommand
(
)
;
}
)
;
}
else
{
pocketWidget
.
doCommand
(
)
;
}
}
break
;
}
}
}
}
function
pktUIGetter
(
prop
window
)
{
return
{
get
:
function
(
)
{
delete
window
.
pktUI
;
delete
window
.
pktUIMessaging
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
pocket
/
content
/
main
.
js
"
window
)
;
return
window
[
prop
]
;
}
configurable
:
true
enumerable
:
true
}
;
}
var
PocketOverlay
=
{
startup
:
function
(
reason
)
{
CreatePocketWidget
(
reason
)
;
Services
.
obs
.
addObserver
(
this
"
browser
-
delayed
-
startup
-
finished
"
false
)
;
CustomizableUI
.
addListener
(
this
)
;
PocketContextMenu
.
init
(
)
;
PocketReader
.
startup
(
)
;
if
(
reason
=
=
ADDON_ENABLE
)
{
for
(
let
win
of
allBrowserWindows
(
)
)
{
this
.
setWindowScripts
(
win
)
;
this
.
addStyles
(
win
)
;
this
.
updateWindow
(
win
)
;
}
}
}
shutdown
:
function
(
reason
)
{
CustomizableUI
.
removeListener
(
this
)
;
for
(
let
window
of
allBrowserWindows
(
)
)
{
for
(
let
id
of
[
"
panelMenu_pocket
"
"
menu_pocket
"
"
BMB_pocket
"
"
panelMenu_pocketSeparator
"
"
menu_pocketSeparator
"
"
BMB_pocketSeparator
"
]
)
{
let
element
=
window
.
document
.
getElementById
(
id
)
;
if
(
element
)
element
.
remove
(
)
;
}
this
.
removeStyles
(
window
)
;
delete
window
.
Pocket
;
delete
window
.
pktUI
;
delete
window
.
pktUIMessaging
;
}
CustomizableUI
.
destroyWidget
(
"
pocket
-
button
"
)
;
PocketContextMenu
.
shutdown
(
)
;
PocketReader
.
shutdown
(
)
;
}
observe
:
function
(
aSubject
aTopic
aData
)
{
let
window
=
aSubject
;
this
.
setWindowScripts
(
window
)
;
this
.
addStyles
(
window
)
;
this
.
updateWindow
(
window
)
;
}
setWindowScripts
:
function
(
window
)
{
XPCOMUtils
.
defineLazyModuleGetter
(
window
"
Pocket
"
"
chrome
:
/
/
pocket
/
content
/
Pocket
.
jsm
"
)
;
Object
.
defineProperty
(
window
"
pktUI
"
pktUIGetter
(
"
pktUI
"
window
)
)
;
Object
.
defineProperty
(
window
"
pktUIMessaging
"
pktUIGetter
(
"
pktUIMessaging
"
window
)
)
;
}
updateWindow
:
function
(
window
)
{
let
document
=
window
.
document
;
let
sib
=
document
.
getElementById
(
"
menu_bookmarkThisPage
"
)
;
if
(
sib
&
&
!
document
.
getElementById
(
"
menu_pocket
"
)
)
{
let
menu
=
createElementWithAttrs
(
document
"
menuitem
"
{
"
id
"
:
"
menu_pocket
"
"
label
"
:
gPocketBundle
.
GetStringFromName
(
"
pocketMenuitem
.
label
"
)
"
class
"
:
"
menuitem
-
iconic
"
"
oncommand
"
:
"
openUILink
(
Pocket
.
listURL
event
)
;
"
}
)
;
let
sep
=
createElementWithAttrs
(
document
"
menuseparator
"
{
"
id
"
:
"
menu_pocketSeparator
"
}
)
;
sib
.
parentNode
.
insertBefore
(
menu
sib
)
;
sib
.
parentNode
.
insertBefore
(
sep
sib
)
;
}
sib
=
document
.
getElementById
(
"
BMB_subscribeToPageMenuitem
"
)
;
if
(
sib
&
&
!
document
.
getElementById
(
"
BMB_pocket
"
)
)
{
let
menu
=
createElementWithAttrs
(
document
"
menuitem
"
{
"
id
"
:
"
BMB_pocket
"
"
label
"
:
gPocketBundle
.
GetStringFromName
(
"
pocketMenuitem
.
label
"
)
"
class
"
:
"
menuitem
-
iconic
bookmark
-
item
subviewbutton
"
"
oncommand
"
:
"
openUILink
(
Pocket
.
listURL
event
)
;
"
}
)
;
let
sep
=
createElementWithAttrs
(
document
"
menuseparator
"
{
"
id
"
:
"
BMB_pocketSeparator
"
}
)
;
sib
.
parentNode
.
insertBefore
(
menu
sib
)
;
sib
.
parentNode
.
insertBefore
(
sep
sib
)
;
}
sib
=
document
.
getElementById
(
"
panelMenuBookmarkThisPage
"
)
;
if
(
sib
&
&
!
document
.
getElementById
(
"
panelMenu_pocket
"
)
)
{
let
menu
=
createElementWithAttrs
(
document
"
toolbarbutton
"
{
"
id
"
:
"
panelMenu_pocket
"
"
label
"
:
gPocketBundle
.
GetStringFromName
(
"
pocketMenuitem
.
label
"
)
"
class
"
:
"
subviewbutton
cui
-
withicon
"
"
oncommand
"
:
"
openUILink
(
Pocket
.
listURL
event
)
;
"
}
)
;
let
sep
=
createElementWithAttrs
(
document
"
toolbarseparator
"
{
"
id
"
:
"
panelMenu_pocketSeparator
"
}
)
;
sib
=
sib
.
nextSibling
;
sib
.
parentNode
.
insertBefore
(
sep
sib
)
;
sib
.
parentNode
.
insertBefore
(
menu
sib
)
;
}
this
.
updatePocketItemVisibility
(
document
)
;
}
onWidgetAdded
:
function
(
aWidgetId
aArea
aPosition
)
{
for
(
let
win
of
allBrowserWindows
(
)
)
{
this
.
updatePocketItemVisibility
(
win
.
document
)
;
}
}
onWidgetRemoved
:
function
(
aWidgetId
aArea
aPosition
)
{
for
(
let
win
of
allBrowserWindows
(
)
)
{
this
.
updatePocketItemVisibility
(
win
.
document
)
;
}
}
onWidgetReset
:
function
(
aNode
aContainer
)
{
let
widgets
=
CustomizableUI
.
getWidgetIdsInArea
(
CustomizableUI
.
AREA_NAVBAR
)
;
let
bmbtn
=
widgets
.
indexOf
(
"
bookmarks
-
menu
-
button
"
)
;
if
(
bmbtn
>
-
1
)
{
CustomizableUI
.
addWidgetToArea
(
"
pocket
-
button
"
CustomizableUI
.
AREA_NAVBAR
bmbtn
+
1
)
;
}
else
{
CustomizableUI
.
addWidgetToArea
(
"
pocket
-
button
"
CustomizableUI
.
AREA_NAVBAR
)
;
}
}
updatePocketItemVisibility
:
function
(
doc
)
{
let
hidden
=
!
CustomizableUI
.
getPlacementOfWidget
(
"
pocket
-
button
"
)
;
for
(
let
prefix
of
[
"
panelMenu_
"
"
menu_
"
"
BMB_
"
]
)
{
let
element
=
doc
.
getElementById
(
prefix
+
"
pocket
"
)
;
if
(
element
)
{
element
.
hidden
=
hidden
;
doc
.
getElementById
(
prefix
+
"
pocketSeparator
"
)
.
hidden
=
hidden
;
}
}
if
(
hidden
)
{
PocketReader
.
shutdown
(
)
;
}
else
{
PocketReader
.
startup
(
)
;
}
}
addStyles
:
function
(
win
)
{
let
xmlPI
=
win
.
document
.
createProcessingInstruction
(
"
xml
-
stylesheet
"
"
type
=
\
"
text
/
css
\
"
href
=
\
"
chrome
:
/
/
pocket
/
skin
/
pocket
.
css
\
"
"
)
;
win
.
document
.
insertBefore
(
xmlPI
win
.
document
.
documentElement
)
;
}
removeStyles
:
function
(
win
)
{
let
el
=
win
.
document
.
documentElement
.
previousSibling
;
while
(
el
)
{
if
(
el
.
nodeType
=
=
el
.
PROCESSING_INSTRUCTION_NODE
&
&
el
.
sheet
&
&
el
.
sheet
.
href
=
=
"
chrome
:
/
/
pocket
/
skin
/
pocket
.
css
"
)
{
el
.
remove
(
)
;
break
;
}
el
=
el
.
previousSibling
;
}
}
}
function
prefObserver
(
aSubject
aTopic
aData
)
{
let
enabled
=
Services
.
prefs
.
getBoolPref
(
"
extensions
.
pocket
.
enabled
"
)
;
if
(
enabled
)
PocketOverlay
.
startup
(
ADDON_ENABLE
)
;
else
PocketOverlay
.
shutdown
(
ADDON_DISABLE
)
;
}
function
startup
(
data
reason
)
{
AddonManager
.
getAddonByID
(
"
isreaditlater
ideashower
.
com
"
addon
=
>
{
if
(
addon
&
&
addon
.
isActive
)
return
;
setDefaultPrefs
(
)
;
if
(
Services
.
prefs
.
prefHasUserValue
(
"
browser
.
pocket
.
enabled
"
)
)
{
Services
.
prefs
.
setBoolPref
(
"
extensions
.
pocket
.
enabled
"
Services
.
prefs
.
getBoolPref
(
"
browser
.
pocket
.
enabled
"
)
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
pocket
.
enabled
"
)
;
}
Services
.
prefs
.
addObserver
(
"
extensions
.
pocket
.
enabled
"
prefObserver
false
)
;
if
(
Services
.
prefs
.
prefHasUserValue
(
"
extensions
.
pocket
.
enabled
"
)
&
&
!
Services
.
prefs
.
getBoolPref
(
"
extensions
.
pocket
.
enabled
"
)
)
return
;
PocketOverlay
.
startup
(
reason
)
;
}
)
;
}
function
shutdown
(
data
reason
)
{
if
(
reason
=
=
ADDON_DISABLE
)
{
Services
.
prefs
.
removeObserver
(
"
extensions
.
pocket
.
enabled
"
prefObserver
)
;
PocketOverlay
.
shutdown
(
reason
)
;
}
}
function
install
(
)
{
}
function
uninstall
(
)
{
}
