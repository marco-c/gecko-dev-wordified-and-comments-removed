requestLongerTimeout
(
2
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
this
)
;
const
RELATIVE_DIR
=
"
browser
/
extensions
/
pdfjs
/
test
/
"
;
const
TESTROOT
=
"
http
:
/
/
example
.
com
/
browser
/
"
+
RELATIVE_DIR
;
const
PDF_OUTLINE_ITEMS
=
17
;
const
TESTS
=
[
{
action
:
{
selector
:
"
button
#
next
"
event
:
"
click
"
}
expectedPage
:
2
message
:
"
navigated
to
next
page
using
NEXT
button
"
}
{
action
:
{
selector
:
"
button
#
previous
"
event
:
"
click
"
}
expectedPage
:
1
message
:
"
navigated
to
previous
page
using
PREV
button
"
}
{
action
:
{
selector
:
"
button
#
next
"
event
:
"
click
"
}
expectedPage
:
2
message
:
"
navigated
to
next
page
using
NEXT
button
"
}
{
action
:
{
selector
:
"
input
#
pageNumber
"
value
:
1
event
:
"
change
"
}
expectedPage
:
1
message
:
"
navigated
to
first
page
using
pagenumber
"
}
{
action
:
{
selector
:
"
#
thumbnailView
a
:
nth
-
child
(
4
)
"
event
:
"
click
"
}
expectedPage
:
4
message
:
"
navigated
to
4th
page
using
thumbnail
view
"
}
{
action
:
{
selector
:
"
#
thumbnailView
a
:
nth
-
child
(
2
)
"
event
:
"
click
"
}
expectedPage
:
2
message
:
"
navigated
to
2nd
page
using
thumbnail
view
"
}
{
action
:
{
selector
:
"
#
viewer
"
event
:
"
keydown
"
keyCode
:
36
}
expectedPage
:
1
message
:
"
navigated
to
1st
page
using
'
home
'
key
"
}
{
action
:
{
selector
:
"
#
viewer
"
event
:
"
keydown
"
keyCode
:
34
}
expectedPage
:
2
message
:
"
navigated
to
2nd
page
using
'
Page
Down
'
key
"
}
{
action
:
{
selector
:
"
#
viewer
"
event
:
"
keydown
"
keyCode
:
33
}
expectedPage
:
1
message
:
"
navigated
to
1st
page
using
'
Page
Up
'
key
"
}
{
action
:
{
selector
:
"
#
viewer
"
event
:
"
keydown
"
keyCode
:
39
}
expectedPage
:
2
message
:
"
navigated
to
2nd
page
using
'
right
'
key
"
}
{
action
:
{
selector
:
"
#
viewer
"
event
:
"
keydown
"
keyCode
:
37
}
expectedPage
:
1
message
:
"
navigated
to
1st
page
using
'
left
'
key
"
}
{
action
:
{
selector
:
"
#
viewer
"
event
:
"
keydown
"
keyCode
:
35
}
expectedPage
:
5
message
:
"
navigated
to
last
page
using
'
home
'
key
"
}
{
action
:
{
selector
:
"
.
outlineItem
:
nth
-
child
(
1
)
a
"
event
:
"
click
"
}
expectedPage
:
1
message
:
"
navigated
to
1st
page
using
outline
view
"
}
{
action
:
{
selector
:
"
.
outlineItem
:
nth
-
child
(
"
+
PDF_OUTLINE_ITEMS
+
"
)
a
"
event
:
"
click
"
}
expectedPage
:
4
message
:
"
navigated
to
4th
page
using
outline
view
"
}
{
action
:
{
selector
:
"
input
#
pageNumber
"
value
:
5
event
:
"
change
"
}
expectedPage
:
5
message
:
"
navigated
to
5th
page
using
pagenumber
"
}
]
;
add_task
(
function
*
test
(
)
{
let
mimeService
=
Cc
[
"
mozilla
.
org
/
mime
;
1
"
]
.
getService
(
Ci
.
nsIMIMEService
)
;
let
handlerInfo
=
mimeService
.
getFromTypeAndExtension
(
'
application
/
pdf
'
'
pdf
'
)
;
is
(
handlerInfo
.
alwaysAskBeforeHandling
false
'
pdf
handler
defaults
to
always
-
ask
is
false
'
)
;
is
(
handlerInfo
.
preferredAction
Ci
.
nsIHandlerInfo
.
handleInternally
'
pdf
handler
defaults
to
internal
'
)
;
info
(
'
Pref
action
:
'
+
handlerInfo
.
preferredAction
)
;
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
blank
"
}
function
*
(
newTabBrowser
)
{
yield
waitForPdfJS
(
newTabBrowser
TESTROOT
+
"
file_pdfjs_test
.
pdf
"
)
;
yield
ContentTask
.
spawn
(
newTabBrowser
null
function
*
(
)
{
ok
(
content
.
document
.
querySelector
(
'
div
#
viewer
'
)
"
document
content
has
viewer
UI
"
)
;
ok
(
'
PDFJS
'
in
content
.
wrappedJSObject
"
window
content
has
PDFJS
object
"
)
;
}
)
;
yield
ContentTask
.
spawn
(
newTabBrowser
null
contentSetUp
)
;
yield
Task
.
spawn
(
runTests
(
newTabBrowser
)
)
;
yield
ContentTask
.
spawn
(
newTabBrowser
null
function
*
(
)
{
let
pageNumber
=
content
.
document
.
querySelector
(
'
input
#
pageNumber
'
)
;
is
(
pageNumber
.
value
pageNumber
.
max
"
Document
is
left
on
the
last
page
"
)
;
}
)
;
}
)
;
}
)
;
function
*
contentSetUp
(
)
{
function
waitForOutlineItems
(
document
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
document
.
addEventListener
(
"
outlineloaded
"
function
outlineLoaded
(
evt
)
{
document
.
removeEventListener
(
"
outlineloaded
"
outlineLoaded
)
;
var
outlineCount
=
evt
.
detail
.
outlineCount
;
if
(
document
.
querySelectorAll
(
"
.
outlineItem
"
)
.
length
=
=
=
outlineCount
)
{
resolve
(
)
;
}
else
{
reject
(
)
;
}
}
)
;
}
)
;
}
function
setZoomToPageFit
(
document
)
{
return
new
Promise
(
(
resolve
)
=
>
{
document
.
addEventListener
(
"
pagerendered
"
function
onZoom
(
e
)
{
document
.
removeEventListener
(
"
pagerendered
"
onZoom
)
;
document
.
querySelector
(
"
#
viewer
"
)
.
click
(
)
;
resolve
(
)
;
}
)
;
var
select
=
document
.
querySelector
(
"
select
#
scaleSelect
"
)
;
select
.
selectedIndex
=
2
;
select
.
dispatchEvent
(
new
Event
(
"
change
"
)
)
;
}
)
;
}
yield
waitForOutlineItems
(
content
.
document
)
;
yield
setZoomToPageFit
(
content
.
document
)
;
}
function
*
runTests
(
browser
)
{
yield
ContentTask
.
spawn
(
browser
TESTS
function
*
(
TESTS
)
{
let
window
=
content
;
let
document
=
window
.
document
;
for
(
let
test
of
TESTS
)
{
let
deferred
=
{
}
;
deferred
.
promise
=
new
Promise
(
(
resolve
reject
)
=
>
{
deferred
.
resolve
=
resolve
;
deferred
.
reject
=
reject
;
}
)
;
let
pageNumber
=
document
.
querySelector
(
'
input
#
pageNumber
'
)
;
let
timeout
=
window
.
setTimeout
(
(
)
=
>
deferred
.
reject
(
)
5000
)
;
window
.
addEventListener
(
'
pagechange
'
function
pageChange
(
)
{
if
(
pageNumber
.
value
=
=
test
.
expectedPage
)
{
window
.
removeEventListener
(
'
pagechange
'
pageChange
)
;
window
.
clearTimeout
(
timeout
)
;
deferred
.
resolve
(
+
pageNumber
.
value
)
;
}
}
)
;
var
el
=
document
.
querySelector
(
test
.
action
.
selector
)
;
ok
(
el
"
Element
'
"
+
test
.
action
.
selector
+
"
'
has
been
found
"
)
;
if
(
test
.
action
.
value
)
el
.
value
=
test
.
action
.
value
;
if
(
test
.
action
.
event
=
=
"
keydown
"
)
{
var
ev
=
document
.
createEvent
(
"
KeyboardEvent
"
)
;
ev
.
initKeyEvent
(
"
keydown
"
true
true
null
false
false
false
false
test
.
action
.
keyCode
0
)
;
el
.
dispatchEvent
(
ev
)
;
}
else
{
var
ev
=
new
Event
(
test
.
action
.
event
)
;
}
el
.
dispatchEvent
(
ev
)
;
let
pgNumber
=
yield
deferred
.
promise
;
is
(
pgNumber
test
.
expectedPage
test
.
message
)
;
}
var
viewer
=
content
.
wrappedJSObject
.
PDFViewerApplication
;
yield
viewer
.
close
(
)
;
}
)
;
}
