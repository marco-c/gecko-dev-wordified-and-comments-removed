"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PdfjsContentUtils
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
PdfjsContentUtils
=
{
_mm
:
null
init
(
)
{
if
(
!
this
.
_mm
)
{
this
.
_mm
=
Services
.
cpmm
;
this
.
_mm
.
addMessageListener
(
"
PDFJS
:
Child
:
updateSettings
"
this
)
;
Services
.
obs
.
addObserver
(
this
"
quit
-
application
"
)
;
}
}
uninit
(
)
{
if
(
this
.
_mm
)
{
this
.
_mm
.
removeMessageListener
(
"
PDFJS
:
Child
:
updateSettings
"
this
)
;
Services
.
obs
.
removeObserver
(
this
"
quit
-
application
"
)
;
}
this
.
_mm
=
null
;
}
clearUserPref
(
aPrefName
)
{
this
.
_mm
.
sendSyncMessage
(
"
PDFJS
:
Parent
:
clearUserPref
"
{
name
:
aPrefName
}
)
;
}
setIntPref
(
aPrefName
aPrefValue
)
{
this
.
_mm
.
sendSyncMessage
(
"
PDFJS
:
Parent
:
setIntPref
"
{
name
:
aPrefName
value
:
aPrefValue
}
)
;
}
setBoolPref
(
aPrefName
aPrefValue
)
{
this
.
_mm
.
sendSyncMessage
(
"
PDFJS
:
Parent
:
setBoolPref
"
{
name
:
aPrefName
value
:
aPrefValue
}
)
;
}
setCharPref
(
aPrefName
aPrefValue
)
{
this
.
_mm
.
sendSyncMessage
(
"
PDFJS
:
Parent
:
setCharPref
"
{
name
:
aPrefName
value
:
aPrefValue
}
)
;
}
setStringPref
(
aPrefName
aPrefValue
)
{
this
.
_mm
.
sendSyncMessage
(
"
PDFJS
:
Parent
:
setStringPref
"
{
name
:
aPrefName
value
:
aPrefValue
}
)
;
}
displayWarning
(
aWindow
aMessage
aLabel
aAccessKey
)
{
let
winmm
=
aWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDocShell
)
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIContentFrameMessageManager
)
;
winmm
.
sendAsyncMessage
(
"
PDFJS
:
Parent
:
displayWarning
"
{
message
:
aMessage
label
:
aLabel
accessKey
:
aAccessKey
}
)
;
}
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
quit
-
application
"
)
{
this
.
uninit
(
)
;
}
}
receiveMessage
(
aMsg
)
{
switch
(
aMsg
.
name
)
{
case
"
PDFJS
:
Child
:
updateSettings
"
:
if
(
Services
.
appinfo
.
processType
=
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
)
{
let
jsm
=
"
resource
:
/
/
pdf
.
js
/
PdfJs
.
jsm
"
;
let
pdfjs
=
ChromeUtils
.
import
(
jsm
{
}
)
.
PdfJs
;
if
(
aMsg
.
data
.
enabled
)
{
pdfjs
.
ensureRegistered
(
)
;
}
else
{
pdfjs
.
ensureUnregistered
(
)
;
}
}
break
;
}
}
}
;
