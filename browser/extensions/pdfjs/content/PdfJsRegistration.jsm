"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PdfJsRegistration
"
]
;
const
Cm
=
Components
.
manager
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
function
StreamConverterFactory
(
)
{
}
StreamConverterFactory
.
prototype
=
{
_classID
:
Components
.
ID
(
"
{
d0c5195d
-
e798
-
49d4
-
b1d3
-
9324328b2291
}
"
)
_classDescription
:
"
pdf
.
js
Component
"
_contractID
:
"
mozilla
.
org
/
streamconv
;
1
?
from
=
application
/
pdf
&
to
=
*
/
*
"
_classID2
:
Components
.
ID
(
"
{
d0c5195d
-
e798
-
49d4
-
b1d3
-
9324328b2292
}
"
)
_contractID2
:
"
mozilla
.
org
/
streamconv
;
1
?
from
=
application
/
pdf
&
to
=
text
/
html
"
register
:
function
register
(
)
{
ChromeUtils
.
import
(
"
resource
:
/
/
pdf
.
js
/
PdfStreamConverter
.
jsm
"
)
;
var
factory
=
XPCOMUtils
.
_getFactory
(
PdfStreamConverter
)
;
this
.
_factory
=
factory
;
var
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
registerFactory
(
this
.
_classID
this
.
_classDescription
this
.
_contractID
factory
)
;
registrar
.
registerFactory
(
this
.
_classID2
this
.
_classDescription
this
.
_contractID2
factory
)
;
}
unregister
:
function
unregister
(
)
{
var
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
unregisterFactory
(
this
.
_classID
this
.
_factory
)
;
if
(
this
.
_classID2
)
{
registrar
.
unregisterFactory
(
this
.
_classID2
this
.
_factory
)
;
}
this
.
_factory
=
null
;
}
}
;
var
PdfJsRegistration
=
{
_registered
:
false
ensureRegistered
:
function
ensureRegistered
(
)
{
if
(
this
.
_registered
)
{
return
;
}
this
.
_pdfStreamConverterFactory
=
new
StreamConverterFactory
(
)
;
this
.
_pdfStreamConverterFactory
.
register
(
)
;
this
.
_registered
=
true
;
}
ensureUnregistered
:
function
ensureUnregistered
(
)
{
if
(
!
this
.
_registered
)
{
return
;
}
this
.
_pdfStreamConverterFactory
.
unregister
(
)
;
Cu
.
unload
(
"
resource
:
/
/
pdf
.
js
/
PdfStreamConverter
.
jsm
"
)
;
delete
this
.
_pdfStreamConverterFactory
;
this
.
_registered
=
false
;
}
}
;
