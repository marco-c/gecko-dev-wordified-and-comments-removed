"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PdfJsRegistration
"
]
;
const
Cm
=
Components
.
manager
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
function
StreamConverterFactory
(
)
{
}
StreamConverterFactory
.
prototype
=
{
register
:
function
register
(
)
{
ChromeUtils
.
import
(
"
resource
:
/
/
pdf
.
js
/
PdfStreamConverter
.
jsm
"
)
;
var
proto
=
PdfStreamConverter
.
prototype
;
this
.
_classID
=
proto
.
classID
;
var
factory
=
XPCOMUtils
.
_getFactory
(
PdfStreamConverter
)
;
this
.
_factory
=
factory
;
var
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
registerFactory
(
proto
.
classID
proto
.
classDescription
proto
.
contractID
factory
)
;
if
(
proto
.
classID2
)
{
this
.
_classID2
=
proto
.
classID2
;
registrar
.
registerFactory
(
proto
.
classID2
proto
.
classDescription
proto
.
contractID2
factory
)
;
}
}
unregister
:
function
unregister
(
)
{
var
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
unregisterFactory
(
this
.
_classID
this
.
_factory
)
;
if
(
this
.
_classID2
)
{
registrar
.
unregisterFactory
(
this
.
_classID2
this
.
_factory
)
;
}
this
.
_factory
=
null
;
}
}
;
var
PdfJsRegistration
=
{
_registered
:
false
ensureRegistered
:
function
ensureRegistered
(
)
{
if
(
this
.
_registered
)
{
return
;
}
this
.
_pdfStreamConverterFactory
=
new
StreamConverterFactory
(
)
;
this
.
_pdfStreamConverterFactory
.
register
(
)
;
this
.
_registered
=
true
;
}
ensureUnregistered
:
function
ensureUnregistered
(
)
{
if
(
!
this
.
_registered
)
{
return
;
}
this
.
_pdfStreamConverterFactory
.
unregister
(
)
;
delete
this
.
_pdfStreamConverterFactory
;
this
.
_registered
=
false
;
}
}
;
