"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PdfJsTelemetry
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
PdfJsTelemetry
=
{
onViewerIsUsed
(
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
PDF_VIEWER_USED
"
)
;
histogram
.
add
(
true
)
;
}
onFallback
(
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
PDF_VIEWER_FALLBACK_SHOWN
"
)
;
histogram
.
add
(
true
)
;
}
onDocumentSize
(
size
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
PDF_VIEWER_DOCUMENT_SIZE_KB
"
)
;
histogram
.
add
(
size
/
1024
)
;
}
onDocumentVersion
(
versionId
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
PDF_VIEWER_DOCUMENT_VERSION
"
)
;
histogram
.
add
(
versionId
)
;
}
onDocumentGenerator
(
generatorId
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
PDF_VIEWER_DOCUMENT_GENERATOR
"
)
;
histogram
.
add
(
generatorId
)
;
}
onEmbed
(
isObject
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
PDF_VIEWER_EMBED
"
)
;
histogram
.
add
(
isObject
)
;
}
onFontType
(
fontTypeId
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
PDF_VIEWER_FONT_TYPES
"
)
;
histogram
.
add
(
fontTypeId
)
;
}
onForm
(
isAcroform
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
PDF_VIEWER_FORM
"
)
;
histogram
.
add
(
isAcroform
)
;
}
onPrint
(
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
PDF_VIEWER_PRINT
"
)
;
histogram
.
add
(
true
)
;
}
onStreamType
(
streamTypeId
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
PDF_VIEWER_STREAM_TYPES
"
)
;
histogram
.
add
(
streamTypeId
)
;
}
onTimeToView
(
ms
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
PDF_VIEWER_TIME_TO_VIEW_MS
"
)
;
histogram
.
add
(
ms
)
;
}
}
;
