const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
)
;
const
TEST_THRESHOLD
=
{
"
beta
"
:
0
.
5
}
;
const
PREF_COHORT_SAMPLE
=
"
e10s
.
rollout
.
cohortSample
"
;
const
PREF_COHORT_NAME
=
"
e10s
.
rollout
.
cohort
"
;
const
PREF_E10S_OPTED_IN
=
"
browser
.
tabs
.
remote
.
autostart
"
;
const
PREF_E10S_FORCE_ENABLED
=
"
browser
.
tabs
.
remote
.
force
-
enable
"
;
const
PREF_E10S_FORCE_DISABLED
=
"
browser
.
tabs
.
remote
.
force
-
disable
"
;
const
PREF_TOGGLE_E10S
=
"
browser
.
tabs
.
remote
.
autostart
.
2
"
;
function
startup
(
)
{
defineCohort
(
)
;
}
function
install
(
)
{
defineCohort
(
)
;
}
let
cohortDefinedOnThisSession
=
false
;
function
defineCohort
(
)
{
if
(
cohortDefinedOnThisSession
)
{
return
;
}
cohortDefinedOnThisSession
=
true
;
let
updateChannel
=
UpdateUtils
.
getUpdateChannel
(
false
)
;
if
(
!
(
updateChannel
in
TEST_THRESHOLD
)
)
{
setCohort
(
"
unsupportedChannel
"
)
;
return
;
}
let
userOptedOut
=
optedOut
(
)
;
let
userOptedIn
=
optedIn
(
)
;
let
disqualified
=
(
Services
.
appinfo
.
multiprocessBlockPolicy
!
=
0
)
;
let
testGroup
=
(
getUserSample
(
)
<
TEST_THRESHOLD
[
updateChannel
]
)
;
if
(
userOptedOut
)
{
setCohort
(
"
optedOut
"
)
;
}
else
if
(
userOptedIn
)
{
setCohort
(
"
optedIn
"
)
;
}
else
if
(
testGroup
)
{
setCohort
(
disqualified
?
"
disqualified
-
test
"
:
"
test
"
)
;
Preferences
.
set
(
PREF_TOGGLE_E10S
true
)
;
}
else
{
setCohort
(
disqualified
?
"
disqualified
-
control
"
:
"
control
"
)
;
Preferences
.
reset
(
PREF_TOGGLE_E10S
)
;
}
}
function
shutdown
(
data
reason
)
{
}
function
uninstall
(
)
{
}
function
getUserSample
(
)
{
let
prefValue
=
Preferences
.
get
(
PREF_COHORT_SAMPLE
undefined
)
;
let
value
=
0
.
0
;
if
(
typeof
(
prefValue
)
=
=
"
string
"
)
{
value
=
parseFloat
(
prefValue
10
)
;
return
value
;
}
if
(
typeof
(
prefValue
)
=
=
"
number
"
)
{
value
=
prefValue
/
100
;
}
else
{
value
=
Math
.
random
(
)
;
}
Preferences
.
set
(
PREF_COHORT_SAMPLE
value
.
toString
(
)
.
substr
(
0
8
)
)
;
return
value
;
}
function
setCohort
(
cohortName
)
{
Preferences
.
set
(
PREF_COHORT_NAME
cohortName
)
;
try
{
if
(
Ci
.
nsICrashReporter
)
{
Services
.
appinfo
.
QueryInterface
(
Ci
.
nsICrashReporter
)
.
annotateCrashReport
(
"
E10SCohort
"
cohortName
)
;
}
}
catch
(
e
)
{
}
}
function
optedIn
(
)
{
return
Preferences
.
get
(
PREF_E10S_OPTED_IN
false
)
|
|
Preferences
.
get
(
PREF_E10S_FORCE_ENABLED
false
)
;
}
function
optedOut
(
)
{
return
Preferences
.
get
(
PREF_E10S_FORCE_DISABLED
false
)
|
|
(
Preferences
.
isSet
(
PREF_TOGGLE_E10S
)
&
&
Preferences
.
get
(
PREF_TOGGLE_E10S
)
=
=
false
)
;
}
