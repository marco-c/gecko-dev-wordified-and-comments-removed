"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
)
;
const
TEST_THRESHOLD
=
{
"
beta
"
:
0
.
9
"
release
"
:
1
.
0
"
esr
"
:
1
.
0
}
;
const
MULTI_EXPERIMENT
=
{
"
beta
"
:
{
buckets
:
{
1
:
.
5
4
:
1
}
addonsDisableExperiment
(
prefix
)
{
return
getAddonsDisqualifyForMulti
(
)
;
}
}
"
release
"
:
{
buckets
:
{
1
:
.
5
4
:
1
}
addonsDisableExperiment
(
prefix
)
{
return
getAddonsDisqualifyForMulti
(
)
;
}
}
}
;
const
ADDON_ROLLOUT_POLICY
=
{
"
beta
"
:
"
50allmpc
"
"
release
"
:
"
50allmpc
"
"
esr
"
:
"
esrA
"
}
;
if
(
AppConstants
.
RELEASE_OR_BETA
)
{
TEST_THRESHOLD
.
default
=
TEST_THRESHOLD
.
release
;
ADDON_ROLLOUT_POLICY
.
default
=
ADDON_ROLLOUT_POLICY
.
release
;
}
const
PREF_COHORT_SAMPLE
=
"
e10s
.
rollout
.
cohortSample
"
;
const
PREF_COHORT_NAME
=
"
e10s
.
rollout
.
cohort
"
;
const
PREF_E10S_OPTED_IN
=
"
browser
.
tabs
.
remote
.
autostart
"
;
const
PREF_E10S_FORCE_ENABLED
=
"
browser
.
tabs
.
remote
.
force
-
enable
"
;
const
PREF_E10S_FORCE_DISABLED
=
"
browser
.
tabs
.
remote
.
force
-
disable
"
;
const
PREF_TOGGLE_E10S
=
"
browser
.
tabs
.
remote
.
autostart
.
2
"
;
const
PREF_E10S_ADDON_POLICY
=
"
extensions
.
e10s
.
rollout
.
policy
"
;
const
PREF_E10S_ADDON_BLOCKLIST
=
"
extensions
.
e10s
.
rollout
.
blocklist
"
;
const
PREF_E10S_HAS_NONEXEMPT_ADDON
=
"
extensions
.
e10s
.
rollout
.
hasAddon
"
;
const
PREF_E10S_MULTI_OPTOUT
=
"
dom
.
ipc
.
multiOptOut
"
;
const
PREF_E10S_PROCESSCOUNT
=
"
dom
.
ipc
.
processCount
"
;
const
PREF_USE_DEFAULT_PERF_SETTINGS
=
"
browser
.
preferences
.
defaultPerformanceSettings
.
enabled
"
;
const
PREF_E10S_MULTI_ADDON_BLOCKS
=
"
extensions
.
e10sMultiBlocksEnabling
"
;
const
PREF_E10S_MULTI_BLOCKED_BY_ADDONS
=
"
extensions
.
e10sMultiBlockedByAddons
"
;
function
startup
(
)
{
defineCohort
(
)
;
}
function
install
(
)
{
defineCohort
(
)
;
}
let
cohortDefinedOnThisSession
=
false
;
function
defineCohort
(
)
{
if
(
cohortDefinedOnThisSession
)
{
return
;
}
cohortDefinedOnThisSession
=
true
;
let
updateChannel
=
UpdateUtils
.
getUpdateChannel
(
false
)
;
if
(
!
(
updateChannel
in
TEST_THRESHOLD
)
)
{
setCohort
(
"
unsupportedChannel
"
)
;
return
;
}
let
addonPolicy
=
"
unknown
"
;
if
(
updateChannel
in
ADDON_ROLLOUT_POLICY
)
{
addonPolicy
=
ADDON_ROLLOUT_POLICY
[
updateChannel
]
;
Services
.
prefs
.
setStringPref
(
PREF_E10S_ADDON_POLICY
addonPolicy
)
;
Services
.
prefs
.
setStringPref
(
PREF_E10S_ADDON_BLOCKLIST
"
"
)
;
}
else
{
Services
.
prefs
.
clearUserPref
(
PREF_E10S_ADDON_POLICY
)
;
}
let
userOptedOut
=
optedOut
(
)
;
let
userOptedIn
=
optedIn
(
)
;
let
disqualified
=
(
Services
.
appinfo
.
multiprocessBlockPolicy
!
=
0
)
;
let
testThreshold
=
TEST_THRESHOLD
[
updateChannel
]
;
let
testGroup
=
(
getUserSample
(
false
)
<
testThreshold
)
;
let
hasNonExemptAddon
=
Services
.
prefs
.
getBoolPref
(
PREF_E10S_HAS_NONEXEMPT_ADDON
false
)
;
let
temporaryDisqualification
=
getTemporaryDisqualification
(
)
;
let
temporaryQualification
=
getTemporaryQualification
(
)
;
let
cohortPrefix
=
"
"
;
if
(
disqualified
)
{
cohortPrefix
=
"
disqualified
-
"
;
}
else
if
(
hasNonExemptAddon
)
{
cohortPrefix
=
addons
-
set
{
addonPolicy
}
-
;
}
let
eligibleForMulti
=
false
;
if
(
userOptedOut
.
e10s
|
|
userOptedOut
.
multi
)
{
setCohort
(
"
optedOut
"
)
;
}
else
if
(
userOptedIn
.
e10s
)
{
setCohort
(
"
optedIn
"
)
;
eligibleForMulti
=
true
;
}
else
if
(
temporaryDisqualification
!
=
"
"
)
{
setCohort
(
temp
-
disqualified
-
{
temporaryDisqualification
}
)
;
Services
.
prefs
.
clearUserPref
(
PREF_TOGGLE_E10S
)
;
Services
.
prefs
.
clearUserPref
(
PREF_E10S_PROCESSCOUNT
+
"
.
web
"
)
;
}
else
if
(
!
disqualified
&
&
testThreshold
<
1
.
0
&
&
temporaryQualification
!
=
"
"
)
{
setCohort
(
temp
-
qualified
-
{
temporaryQualification
}
)
;
Services
.
prefs
.
setBoolPref
(
PREF_TOGGLE_E10S
true
)
;
eligibleForMulti
=
true
;
}
else
if
(
testGroup
)
{
setCohort
(
{
cohortPrefix
}
test
)
;
Services
.
prefs
.
setBoolPref
(
PREF_TOGGLE_E10S
true
)
;
eligibleForMulti
=
true
;
}
else
{
setCohort
(
{
cohortPrefix
}
control
)
;
Services
.
prefs
.
clearUserPref
(
PREF_TOGGLE_E10S
)
;
Services
.
prefs
.
clearUserPref
(
PREF_E10S_PROCESSCOUNT
+
"
.
web
"
)
;
}
if
(
!
(
updateChannel
in
MULTI_EXPERIMENT
)
|
|
MULTI_EXPERIMENT
[
updateChannel
]
.
addonsDisableExperiment
(
cohortPrefix
)
|
|
!
eligibleForMulti
|
|
userOptedIn
.
multi
|
|
disqualified
)
{
Services
.
prefs
.
clearUserPref
(
PREF_E10S_PROCESSCOUNT
+
"
.
web
"
)
;
return
;
}
if
(
cohortPrefix
&
&
!
getAddonsDisqualifyForMulti
(
)
)
{
cohortPrefix
=
"
webextensions
-
"
;
}
let
buckets
=
MULTI_EXPERIMENT
[
updateChannel
]
.
buckets
;
let
multiUserSample
=
getUserSample
(
true
)
;
for
(
let
sampleName
of
Object
.
getOwnPropertyNames
(
buckets
)
)
{
if
(
multiUserSample
<
buckets
[
sampleName
]
)
{
setCohort
(
{
cohortPrefix
}
multiBucket
{
sampleName
}
)
;
Services
.
prefs
.
setIntPref
(
PREF_E10S_PROCESSCOUNT
+
"
.
web
"
+
sampleName
)
;
break
;
}
}
}
function
shutdown
(
data
reason
)
{
}
function
uninstall
(
)
{
}
function
getUserSample
(
multi
)
{
let
pref
=
multi
?
(
PREF_COHORT_SAMPLE
+
"
.
multi
"
)
:
PREF_COHORT_SAMPLE
;
let
prefType
=
Services
.
prefs
.
getPrefType
(
pref
)
;
if
(
prefType
=
=
Ci
.
nsIPrefBranch
.
PREF_STRING
)
{
return
parseFloat
(
Services
.
prefs
.
getStringPref
(
pref
)
10
)
;
}
let
value
=
0
.
0
;
if
(
prefType
=
=
Ci
.
nsIPrefBranch
.
PREF_INT
)
{
value
=
Services
.
prefs
.
getIntPref
(
pref
)
/
100
;
}
else
{
value
=
Math
.
random
(
)
;
}
Services
.
prefs
.
setStringPref
(
pref
value
.
toString
(
)
.
substr
(
0
8
)
)
;
return
value
;
}
function
setCohort
(
cohortName
)
{
Services
.
prefs
.
setStringPref
(
PREF_COHORT_NAME
cohortName
)
;
if
(
cohortName
!
=
"
unsupportedChannel
"
)
{
TelemetryEnvironment
.
setExperimentActive
(
"
e10sCohort
"
cohortName
)
;
}
try
{
if
(
Ci
.
nsICrashReporter
)
{
Services
.
appinfo
.
QueryInterface
(
Ci
.
nsICrashReporter
)
.
annotateCrashReport
(
"
E10SCohort
"
cohortName
)
;
}
}
catch
(
e
)
{
}
}
function
optedIn
(
)
{
let
e10s
=
Services
.
prefs
.
getBoolPref
(
PREF_E10S_OPTED_IN
false
)
|
|
Services
.
prefs
.
getBoolPref
(
PREF_E10S_FORCE_ENABLED
false
)
;
let
multi
=
Services
.
prefs
.
prefHasUserValue
(
PREF_E10S_PROCESSCOUNT
)
|
|
!
Services
.
prefs
.
getBoolPref
(
PREF_USE_DEFAULT_PERF_SETTINGS
true
)
;
return
{
e10s
multi
}
;
}
function
optedOut
(
)
{
let
e10s
=
Services
.
prefs
.
getBoolPref
(
PREF_E10S_FORCE_DISABLED
false
)
|
|
(
Services
.
prefs
.
prefHasUserValue
(
PREF_TOGGLE_E10S
)
&
&
Services
.
prefs
.
getBoolPref
(
PREF_TOGGLE_E10S
)
=
=
false
)
;
let
multi
=
Services
.
prefs
.
getIntPref
(
PREF_E10S_MULTI_OPTOUT
0
)
>
=
Services
.
appinfo
.
E10S_MULTI_EXPERIMENT
;
return
{
e10s
multi
}
;
}
function
getTemporaryDisqualification
(
)
{
return
"
"
;
}
function
getTemporaryQualification
(
)
{
const
PREF_OPENED_DEVTOOLS
=
"
devtools
.
telemetry
.
tools
.
opened
.
version
"
;
let
hasOpenedDevTools
=
Services
.
prefs
.
prefHasUserValue
(
PREF_OPENED_DEVTOOLS
)
;
if
(
hasOpenedDevTools
)
{
return
"
devtools
"
;
}
return
"
"
;
}
function
getAddonsDisqualifyForMulti
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
extensions
.
e10sMultiBlocksEnabling
"
false
)
&
&
Services
.
prefs
.
getBoolPref
(
"
extensions
.
e10sMultiBlockedByAddons
"
false
)
;
}
