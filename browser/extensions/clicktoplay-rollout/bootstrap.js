"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
)
;
const
TEST_THRESHOLD
=
{
"
beta
"
:
0
.
5
"
release
"
:
0
.
05
}
;
if
(
AppConstants
.
RELEASE_OR_BETA
)
{
TEST_THRESHOLD
.
default
=
TEST_THRESHOLD
.
release
;
}
const
PREF_COHORT_SAMPLE
=
"
plugins
.
ctprollout
.
cohortSample
"
;
const
PREF_COHORT_NAME
=
"
plugins
.
ctprollout
.
cohort
"
;
const
PREF_FLASH_STATE
=
"
plugin
.
state
.
flash
"
;
function
startup
(
)
{
defineCohort
(
)
;
}
function
defineCohort
(
)
{
let
updateChannel
=
UpdateUtils
.
getUpdateChannel
(
false
)
;
if
(
!
(
updateChannel
in
TEST_THRESHOLD
)
)
{
return
;
}
let
cohort
=
Preferences
.
get
(
PREF_COHORT_NAME
)
;
if
(
!
cohort
)
{
let
currentPluginState
=
Preferences
.
get
(
PREF_FLASH_STATE
)
;
switch
(
currentPluginState
)
{
case
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
:
cohort
=
"
early
-
adopter
-
ctp
"
;
break
;
case
Ci
.
nsIPluginTag
.
STATE_DISABLED
:
cohort
=
"
early
-
adopter
-
disabled
"
;
break
;
default
:
break
;
}
}
switch
(
cohort
)
{
case
undefined
:
case
"
test
"
:
case
"
control
"
:
{
let
testThreshold
=
TEST_THRESHOLD
[
updateChannel
]
;
let
testGroup
=
(
getUserSample
(
false
)
<
testThreshold
)
;
if
(
testGroup
)
{
cohort
=
"
test
"
;
let
defaultPrefs
=
new
Preferences
(
{
defaultBranch
:
true
}
)
;
defaultPrefs
.
set
(
PREF_FLASH_STATE
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
)
;
}
else
{
cohort
=
"
control
"
;
}
setCohort
(
cohort
)
;
watchForPrefChanges
(
)
;
break
;
}
case
"
early
-
adopter
-
ctp
"
:
case
"
early
-
adopter
-
disabled
"
:
default
:
setCohort
(
cohort
)
;
break
;
}
}
function
getUserSample
(
)
{
let
prefValue
=
Preferences
.
get
(
PREF_COHORT_SAMPLE
undefined
)
;
let
value
=
0
.
0
;
if
(
typeof
(
prefValue
)
=
=
"
string
"
)
{
value
=
parseFloat
(
prefValue
10
)
;
return
value
;
}
value
=
Math
.
random
(
)
;
Preferences
.
set
(
PREF_COHORT_SAMPLE
value
.
toString
(
)
.
substr
(
0
8
)
)
;
return
value
;
}
function
setCohort
(
cohortName
)
{
Preferences
.
set
(
PREF_COHORT_NAME
cohortName
)
;
TelemetryEnvironment
.
setExperimentActive
(
"
clicktoplay
-
rollout
"
cohortName
)
;
try
{
if
(
Ci
.
nsICrashReporter
)
{
Services
.
appinfo
.
QueryInterface
(
Ci
.
nsICrashReporter
)
.
annotateCrashReport
(
"
CTPCohort
"
cohortName
)
;
}
}
catch
(
e
)
{
}
}
function
watchForPrefChanges
(
)
{
Preferences
.
observe
(
PREF_FLASH_STATE
function
(
)
{
let
currentCohort
=
Preferences
.
get
(
PREF_COHORT_NAME
"
unknown
"
)
;
setCohort
(
user
-
changed
-
from
-
{
currentCohort
}
)
;
}
)
;
}
function
install
(
)
{
}
function
shutdown
(
data
reason
)
{
}
function
uninstall
(
)
{
}
