"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
const
{
setTimeout
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
let
gNetworkLinkService
=
Cc
[
"
mozilla
.
org
/
network
/
network
-
link
-
service
;
1
"
]
.
getService
(
Ci
.
nsINetworkLinkService
)
;
function
sleep
(
ms
)
{
return
new
Promise
(
resolve
=
>
setTimeout
(
resolve
ms
)
)
;
}
let
netChangeWaiting
=
false
;
this
.
netChange
=
class
netChange
extends
ExtensionAPI
{
getAPI
(
context
)
{
return
{
experiments
:
{
netChange
:
{
onConnectionChanged
:
new
ExtensionCommon
.
EventManager
(
{
context
name
:
"
netChange
.
onConnectionChanged
"
register
:
fire
=
>
{
let
observer
=
async
(
subject
topic
data
)
=
>
{
if
(
netChangeWaiting
)
{
return
;
}
if
(
data
=
=
=
"
changed
"
|
|
data
=
=
=
"
up
"
)
{
netChangeWaiting
=
true
;
await
sleep
(
60000
)
;
if
(
gNetworkLinkService
.
linkStatusKnown
&
&
gNetworkLinkService
.
isLinkUp
)
{
fire
.
async
(
data
)
;
}
netChangeWaiting
=
false
;
}
}
;
Services
.
obs
.
addObserver
(
observer
"
network
:
link
-
status
-
changed
"
)
;
return
(
)
=
>
{
Services
.
obs
.
removeObserver
(
observer
"
network
:
link
-
status
-
changed
"
)
;
}
;
}
}
)
.
api
(
)
}
}
}
;
}
}
;
