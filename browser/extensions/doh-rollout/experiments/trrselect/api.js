"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
const
kCommitSelectionPref
=
"
doh
-
rollout
.
trr
-
selection
.
commit
-
result
"
;
const
kDryRunResultPref
=
"
doh
-
rollout
.
trr
-
selection
.
dry
-
run
-
result
"
;
const
kRolloutURIPref
=
"
doh
-
rollout
.
uri
"
;
const
kTRRListPref
=
"
network
.
trr
.
resolvers
"
;
const
TRRSELECT_TELEMETRY_CATEGORY
=
"
security
.
doh
.
trrPerformance
"
;
Services
.
telemetry
.
setEventRecordingEnabled
(
TRRSELECT_TELEMETRY_CATEGORY
true
)
;
this
.
trrselect
=
class
trrselect
extends
ExtensionAPI
{
getAPI
(
)
{
return
{
experiments
:
{
trrselect
:
{
async
dryRun
(
)
{
if
(
Services
.
prefs
.
prefHasUserValue
(
kDryRunResultPref
)
)
{
let
dryRunResult
=
Services
.
prefs
.
getCharPref
(
kDryRunResultPref
)
;
let
defaultTRRs
=
JSON
.
parse
(
Services
.
prefs
.
getDefaultBranch
(
"
"
)
.
getCharPref
(
kTRRListPref
)
)
;
let
dryRunResultIsValid
=
defaultTRRs
.
some
(
trr
=
>
trr
.
url
=
=
dryRunResult
)
;
if
(
dryRunResultIsValid
)
{
return
;
}
}
let
setDryRunResultAndRecordTelemetry
=
trr
=
>
{
Services
.
prefs
.
setCharPref
(
kDryRunResultPref
trr
)
;
Services
.
telemetry
.
recordEvent
(
TRRSELECT_TELEMETRY_CATEGORY
"
trrselect
"
"
dryrunresult
"
trr
.
substring
(
0
40
)
)
;
}
;
if
(
Cu
.
isInAutomation
)
{
setDryRunResultAndRecordTelemetry
(
"
dummyTRR
"
)
;
return
;
}
let
{
TRRRacer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
TRRPerformance
.
jsm
"
)
;
await
new
Promise
(
resolve
=
>
{
let
racer
=
new
TRRRacer
(
(
)
=
>
{
setDryRunResultAndRecordTelemetry
(
racer
.
getFastestTRR
(
true
)
)
;
resolve
(
)
;
}
)
;
racer
.
run
(
)
;
}
)
;
}
async
run
(
)
{
if
(
Services
.
prefs
.
prefHasUserValue
(
kRolloutURIPref
)
)
{
return
;
}
await
this
.
dryRun
(
)
;
if
(
!
Services
.
prefs
.
getBoolPref
(
kCommitSelectionPref
false
)
)
{
return
;
}
Services
.
prefs
.
setCharPref
(
kRolloutURIPref
Services
.
prefs
.
getCharPref
(
kDryRunResultPref
)
)
;
}
}
}
}
;
}
}
;
