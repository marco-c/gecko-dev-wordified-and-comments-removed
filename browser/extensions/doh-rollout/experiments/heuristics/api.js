"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
this
)
;
let
pcs
=
Cc
[
"
mozilla
.
org
/
parental
-
controls
-
service
;
1
"
]
.
getService
(
Ci
.
nsIParentalControlsService
)
;
const
TELEMETRY_CATEGORY
=
"
doh
"
;
const
TELEMETRY_EVENTS
=
{
evaluate
:
{
methods
:
[
"
evaluate
"
]
objects
:
[
"
heuristics
"
]
extra_keys
:
[
"
google
"
"
youtube
"
"
zscalerCanary
"
"
canary
"
"
modifiedRoots
"
"
browserParent
"
"
thirdPartyRoots
"
"
policy
"
"
evaluateReason
"
]
record_on_release
:
true
}
state
:
{
methods
:
[
"
state
"
]
objects
:
[
"
loaded
"
"
enabled
"
"
disabled
"
"
manuallyDisabled
"
"
uninstalled
"
"
UIOk
"
"
UIDisabled
"
]
extra_keys
:
[
]
record_on_release
:
true
}
}
;
this
.
heuristics
=
class
heuristics
extends
ExtensionAPI
{
getAPI
(
)
{
return
{
experiments
:
{
heuristics
:
{
async
isTesting
(
)
{
return
Cu
.
isInAutomation
;
}
setupTelemetry
(
)
{
Services
.
telemetry
.
registerEvents
(
TELEMETRY_CATEGORY
TELEMETRY_EVENTS
)
;
}
sendHeuristicsPing
(
decision
results
)
{
Services
.
telemetry
.
recordEvent
(
TELEMETRY_CATEGORY
"
evaluate
"
"
heuristics
"
decision
results
)
;
}
sendStatePing
(
state
)
{
Services
.
telemetry
.
recordEvent
(
TELEMETRY_CATEGORY
"
state
"
state
"
null
"
)
;
}
async
checkEnterprisePolicies
(
)
{
if
(
Services
.
policies
.
status
=
=
=
Services
.
policies
.
ACTIVE
)
{
let
policies
=
Services
.
policies
.
getActivePolicies
(
)
;
if
(
!
policies
.
hasOwnProperty
(
"
DNSOverHTTPS
"
)
)
{
return
"
policy_without_doh
"
;
}
if
(
policies
.
DNSOverHTTPS
.
Enabled
=
=
=
true
)
{
return
"
enable_doh
"
;
}
return
"
disable_doh
"
;
}
return
"
no_policy_set
"
;
}
async
checkParentalControls
(
)
{
if
(
pcs
.
parentalControlsEnabled
)
{
return
"
disable_doh
"
;
}
return
"
enable_doh
"
;
}
async
checkThirdPartyRoots
(
)
{
let
certdb
=
Cc
[
"
mozilla
.
org
/
security
/
x509certdb
;
1
"
]
.
getService
(
Ci
.
nsIX509CertDB
)
;
let
allCerts
=
certdb
.
getCerts
(
)
;
for
(
let
cert
of
allCerts
)
{
if
(
certdb
.
isCertTrusted
(
cert
Ci
.
nsIX509Cert
.
CA_CERT
Ci
.
nsIX509CertDB
.
TRUSTED_SSL
)
)
{
if
(
!
cert
.
isBuiltInRoot
)
{
return
"
disable_doh
"
;
}
}
}
return
"
enable_doh
"
;
}
}
}
}
;
}
}
;
