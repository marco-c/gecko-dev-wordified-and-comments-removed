"
use
strict
"
;
var
[
gHandlers
]
=
LoopAPI
.
inspect
(
)
;
function
promiseBrowserSwitch
(
)
{
return
new
Promise
(
resolve
=
>
{
LoopAPI
.
stub
(
[
{
sendAsyncMessage
:
function
(
messageName
data
)
{
if
(
data
[
0
]
=
=
"
BrowserSwitch
"
)
{
LoopAPI
.
restore
(
)
;
resolve
(
)
;
}
}
}
]
)
;
}
)
;
}
add_task
(
function
*
setup
(
)
{
Services
.
prefs
.
setBoolPref
(
"
loop
.
remote
.
autostart
"
true
)
;
gHandlers
.
AddBrowserSharingListener
(
{
data
:
[
42
]
}
(
)
=
>
{
}
)
;
let
newTab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
true
)
;
registerCleanupFunction
(
function
*
(
)
{
gHandlers
.
RemoveBrowserSharingListener
(
{
data
:
[
42
]
}
function
(
)
{
}
)
;
yield
BrowserTestUtils
.
removeTab
(
newTab
)
;
Services
.
prefs
.
clearUserPref
(
"
loop
.
remote
.
autostart
"
)
;
}
)
;
}
)
;
add_task
(
function
*
test_notifyOnTitleChanged
(
)
{
let
browserSwitchPromise
=
promiseBrowserSwitch
(
)
;
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
"
about
:
mozilla
"
)
;
yield
browserSwitchPromise
;
Assert
.
ok
(
true
"
We
got
notification
of
the
browser
switch
"
)
;
}
)
;
