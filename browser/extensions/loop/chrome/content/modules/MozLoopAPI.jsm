"
use
strict
"
;
var
_slicedToArray
=
function
(
)
{
function
sliceIterator
(
arr
i
)
{
var
_arr
=
[
]
;
var
_n
=
true
;
var
_d
=
false
;
var
_e
=
undefined
;
try
{
for
(
var
_i
=
arr
[
Symbol
.
iterator
]
(
)
_s
;
!
(
_n
=
(
_s
=
_i
.
next
(
)
)
.
done
)
;
_n
=
true
)
{
_arr
.
push
(
_s
.
value
)
;
if
(
i
&
&
_arr
.
length
=
=
=
i
)
break
;
}
}
catch
(
err
)
{
_d
=
true
;
_e
=
err
;
}
finally
{
try
{
if
(
!
_n
&
&
_i
[
"
return
"
]
)
_i
[
"
return
"
]
(
)
;
}
finally
{
if
(
_d
)
throw
_e
;
}
}
return
_arr
;
}
return
function
(
arr
i
)
{
if
(
Array
.
isArray
(
arr
)
)
{
return
arr
;
}
else
if
(
Symbol
.
iterator
in
Object
(
arr
)
)
{
return
sliceIterator
(
arr
i
)
;
}
else
{
throw
new
TypeError
(
"
Invalid
attempt
to
destructure
non
-
iterable
instance
"
)
;
}
}
;
}
(
)
;
var
_typeof
=
typeof
Symbol
=
=
=
"
function
"
&
&
typeof
Symbol
.
iterator
=
=
=
"
symbol
"
?
function
(
obj
)
{
return
typeof
obj
;
}
:
function
(
obj
)
{
return
obj
&
&
typeof
Symbol
=
=
=
"
function
"
&
&
obj
.
constructor
=
=
=
Symbol
?
"
symbol
"
:
typeof
obj
;
}
;
function
_toConsumableArray
(
arr
)
{
if
(
Array
.
isArray
(
arr
)
)
{
for
(
var
i
=
0
arr2
=
Array
(
arr
.
length
)
;
i
<
arr
.
length
;
i
+
+
)
{
arr2
[
i
]
=
arr
[
i
]
;
}
return
arr2
;
}
else
{
return
Array
.
from
(
arr
)
;
}
}
var
_Components
=
Components
;
var
Cc
=
_Components
.
classes
;
var
Ci
=
_Components
.
interfaces
;
var
Cu
=
_Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
services
-
common
/
utils
.
js
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
chrome
:
/
/
loop
/
content
/
modules
/
MozLoopService
.
jsm
"
)
;
Cu
.
import
(
"
chrome
:
/
/
loop
/
content
/
modules
/
LoopRooms
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
"
Blob
"
]
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
NewTabURL
"
"
resource
:
/
/
/
modules
/
NewTabURL
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PageMetadata
"
"
resource
:
/
/
gre
/
modules
/
PageMetadata
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PluralForm
"
"
resource
:
/
/
gre
/
modules
/
PluralForm
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
UpdateUtils
"
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
UITour
"
"
resource
:
/
/
/
modules
/
UITour
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Social
"
"
resource
:
/
/
/
modules
/
Social
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Promise
"
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
appInfo
"
function
(
)
{
return
Cc
[
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
]
.
getService
(
Ci
.
nsIXULAppInfo
)
.
QueryInterface
(
Ci
.
nsIXULRuntime
)
;
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
clipboardHelper
"
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
"
nsIClipboardHelper
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
extProtocolSvc
"
"
mozilla
.
org
/
uriloader
/
external
-
protocol
-
service
;
1
"
"
nsIExternalProtocolService
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
LoopAPI
"
]
;
var
cloneableError
=
function
cloneableError
(
source
)
{
var
error
=
{
}
;
if
(
typeof
source
=
=
"
string
"
)
{
source
=
new
Error
(
source
)
;
}
var
props
=
Object
.
getOwnPropertyNames
(
source
)
;
if
(
!
props
.
length
)
{
props
.
push
(
"
message
"
"
filename
"
"
lineNumber
"
"
columnNumber
"
"
stack
"
)
;
}
var
_iteratorNormalCompletion
=
true
;
var
_didIteratorError
=
false
;
var
_iteratorError
=
undefined
;
try
{
for
(
var
_iterator
=
props
[
Symbol
.
iterator
]
(
)
_step
;
!
(
_iteratorNormalCompletion
=
(
_step
=
_iterator
.
next
(
)
)
.
done
)
;
_iteratorNormalCompletion
=
true
)
{
var
prop
=
_step
.
value
;
var
value
=
source
[
prop
]
;
var
type
=
typeof
value
=
=
=
"
undefined
"
?
"
undefined
"
:
_typeof
(
value
)
;
if
(
type
=
=
"
function
"
|
|
type
=
=
"
undefined
"
)
{
continue
;
}
if
(
/
boolean
|
number
|
string
/
.
test
(
type
)
)
{
error
[
prop
]
=
value
;
}
else
{
error
[
prop
]
=
"
"
+
value
;
}
}
}
catch
(
err
)
{
_didIteratorError
=
true
;
_iteratorError
=
err
;
}
finally
{
try
{
if
(
!
_iteratorNormalCompletion
&
&
_iterator
.
return
)
{
_iterator
.
return
(
)
;
}
}
finally
{
if
(
_didIteratorError
)
{
throw
_iteratorError
;
}
}
}
error
.
isError
=
true
;
return
error
;
}
;
var
getObjectAPIFunctionName
=
function
getObjectAPIFunctionName
(
action
)
{
var
funcName
=
action
.
split
(
"
:
"
)
.
pop
(
)
;
return
funcName
.
charAt
(
0
)
.
toLowerCase
(
)
+
funcName
.
substr
(
1
)
;
}
;
var
updateSocialProvidersCache
=
function
updateSocialProvidersCache
(
)
{
var
providers
=
[
]
;
var
_iteratorNormalCompletion2
=
true
;
var
_didIteratorError2
=
false
;
var
_iteratorError2
=
undefined
;
try
{
for
(
var
_iterator2
=
Social
.
providers
[
Symbol
.
iterator
]
(
)
_step2
;
!
(
_iteratorNormalCompletion2
=
(
_step2
=
_iterator2
.
next
(
)
)
.
done
)
;
_iteratorNormalCompletion2
=
true
)
{
var
provider
=
_step2
.
value
;
if
(
!
provider
.
shareURL
)
{
continue
;
}
providers
.
push
(
{
iconURL
:
provider
.
iconURL
name
:
provider
.
name
origin
:
provider
.
origin
}
)
;
}
}
catch
(
err
)
{
_didIteratorError2
=
true
;
_iteratorError2
=
err
;
}
finally
{
try
{
if
(
!
_iteratorNormalCompletion2
&
&
_iterator2
.
return
)
{
_iterator2
.
return
(
)
;
}
}
finally
{
if
(
_didIteratorError2
)
{
throw
_iteratorError2
;
}
}
}
var
providersWasSet
=
!
!
gSocialProviders
;
gSocialProviders
=
providers
.
sort
(
function
(
a
b
)
{
return
(
a
.
name
.
toLowerCase
(
)
.
localeCompare
(
b
.
name
.
toLowerCase
(
)
)
)
;
}
)
;
if
(
!
providersWasSet
)
{
Services
.
obs
.
addObserver
(
updateSocialProvidersCache
"
social
:
providers
-
changed
"
false
)
;
}
else
{
LoopAPIInternal
.
broadcastPushMessage
(
"
SocialProvidersChanged
"
)
;
}
return
gSocialProviders
;
}
;
var
isMultiProcessActive
=
function
isMultiProcessActive
(
)
{
var
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
return
!
!
win
.
gMultiProcessBrowser
;
}
;
var
gAppVersionInfo
=
null
;
var
gBrowserSharingListeners
=
new
Set
(
)
;
var
gBrowserSharingWindows
=
new
Set
(
)
;
var
gPageListeners
=
null
;
var
gOriginalPageListeners
=
null
;
var
gSocialProviders
=
null
;
var
gStringBundle
=
null
;
var
gStubbedMessageHandlers
=
null
;
var
kBatchMessage
=
"
Batch
"
;
var
kMaxLoopCount
=
10
;
var
kMessageName
=
"
Loop
:
Message
"
;
var
kPushMessageName
=
"
Loop
:
Message
:
Push
"
;
var
kPushSubscription
=
"
pushSubscription
"
;
var
kRoomsPushPrefix
=
"
Rooms
:
"
;
var
kMauPrefMap
=
new
Map
(
Object
.
getOwnPropertyNames
(
LOOP_MAU_TYPE
)
.
map
(
function
(
name
)
{
var
parts
=
name
.
toLowerCase
(
)
.
split
(
"
_
"
)
;
return
[
LOOP_MAU_TYPE
[
name
]
parts
[
0
]
+
parts
[
1
]
.
charAt
(
0
)
.
toUpperCase
(
)
+
parts
[
1
]
.
substr
(
1
)
]
;
}
)
)
;
var
kMessageHandlers
=
{
AddBrowserSharingListener
:
function
AddBrowserSharingListener
(
message
reply
)
{
var
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
var
browser
=
win
&
&
win
.
gBrowser
.
selectedBrowser
;
if
(
!
win
|
|
!
browser
)
{
var
err
=
new
Error
(
"
No
tabs
available
to
share
.
"
)
;
MozLoopService
.
log
.
error
(
err
)
;
reply
(
cloneableError
(
err
)
)
;
return
;
}
var
autoStart
=
MozLoopService
.
getLoopPref
(
"
remote
.
autostart
"
)
;
if
(
!
autoStart
&
&
browser
.
getAttribute
(
"
remote
"
)
=
=
"
true
"
)
{
var
_err
=
new
Error
(
"
Tab
sharing
is
not
supported
for
e10s
-
enabled
browsers
"
)
;
MozLoopService
.
log
.
error
(
_err
)
;
reply
(
cloneableError
(
_err
)
)
;
return
;
}
var
_message
data
=
_slicedToArray
(
message
.
data
1
)
;
var
windowId
=
_message
data
[
0
]
;
win
.
LoopUI
.
startBrowserSharing
(
windowId
)
;
NewTabURL
.
override
(
"
about
:
home
"
)
;
gBrowserSharingWindows
.
add
(
Cu
.
getWeakReference
(
win
)
)
;
gBrowserSharingListeners
.
add
(
windowId
)
;
reply
(
)
;
}
AddRemoteCursorOverlay
:
function
AddRemoteCursorOverlay
(
message
reply
)
{
var
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
win
)
{
win
.
LoopUI
.
addRemoteCursor
(
message
.
data
[
0
]
)
;
}
reply
(
)
;
}
ClickRemoteCursor
:
function
ClickRemoteCursor
(
message
reply
)
{
var
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
win
)
{
win
.
LoopUI
.
clickRemoteCursor
(
message
.
data
[
0
]
)
;
}
reply
(
)
;
}
AddConversationContext
:
function
AddConversationContext
(
message
reply
)
{
var
_message
data2
=
_slicedToArray
(
message
.
data
3
)
;
var
windowId
=
_message
data2
[
0
]
;
var
sessionId
=
_message
data2
[
1
]
;
var
callid
=
_message
data2
[
2
]
;
MozLoopService
.
addConversationContext
(
windowId
{
sessionId
:
sessionId
callId
:
callid
}
)
;
reply
(
)
;
}
AddSocialShareProvider
:
function
AddSocialShareProvider
(
message
reply
)
{
var
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
!
win
|
|
!
win
.
SocialShare
)
{
reply
(
)
;
return
;
}
win
.
SocialShare
.
showDirectory
(
win
.
LoopUI
.
toolbarButton
.
anchor
)
;
reply
(
)
;
}
ComposeEmail
:
function
ComposeEmail
(
message
reply
)
{
var
_message
data3
=
_slicedToArray
(
message
.
data
3
)
;
var
subject
=
_message
data3
[
0
]
;
var
body
=
_message
data3
[
1
]
;
var
recipient
=
_message
data3
[
2
]
;
recipient
=
recipient
|
|
"
"
;
var
mailtoURL
=
"
mailto
:
"
+
encodeURIComponent
(
recipient
)
+
"
?
subject
=
"
+
encodeURIComponent
(
subject
)
+
"
&
body
=
"
+
encodeURIComponent
(
body
)
;
extProtocolSvc
.
loadURI
(
CommonUtils
.
makeURI
(
mailtoURL
)
)
;
reply
(
)
;
}
Confirm
:
function
Confirm
(
message
reply
)
{
var
options
=
message
.
data
[
0
]
;
var
buttonFlags
=
void
0
;
if
(
options
.
okButton
&
&
options
.
cancelButton
)
{
buttonFlags
=
Ci
.
nsIPrompt
.
BUTTON_POS_0
*
Ci
.
nsIPrompt
.
BUTTON_TITLE_IS_STRING
+
Ci
.
nsIPrompt
.
BUTTON_POS_1
*
Ci
.
nsIPrompt
.
BUTTON_TITLE_IS_STRING
;
}
else
if
(
!
options
.
okButton
&
&
!
options
.
cancelButton
)
{
buttonFlags
=
Services
.
prompt
.
STD_YES_NO_BUTTONS
;
}
else
{
reply
(
cloneableError
(
"
confirm
:
missing
button
options
"
)
)
;
return
;
}
try
{
var
chosenButton
=
Services
.
prompt
.
confirmEx
(
null
"
"
options
.
message
buttonFlags
options
.
okButton
options
.
cancelButton
null
null
{
}
)
;
reply
(
chosenButton
=
=
0
)
;
}
catch
(
ex
)
{
reply
(
ex
)
;
}
}
CopyString
:
function
CopyString
(
message
reply
)
{
var
str
=
message
.
data
[
0
]
;
clipboardHelper
.
copyString
(
str
)
;
reply
(
)
;
}
GenerateUUID
:
function
GenerateUUID
(
message
reply
)
{
reply
(
MozLoopService
.
generateUUID
(
)
)
;
}
GetAllStrings
:
function
GetAllStrings
(
message
reply
)
{
if
(
gStringBundle
)
{
reply
(
gStringBundle
)
;
return
;
}
var
strings
=
MozLoopService
.
getStrings
(
)
;
gStringBundle
=
{
}
;
var
_iteratorNormalCompletion3
=
true
;
var
_didIteratorError3
=
false
;
var
_iteratorError3
=
undefined
;
try
{
for
(
var
_iterator3
=
strings
.
entries
(
)
[
Symbol
.
iterator
]
(
)
_step3
;
!
(
_iteratorNormalCompletion3
=
(
_step3
=
_iterator3
.
next
(
)
)
.
done
)
;
_iteratorNormalCompletion3
=
true
)
{
var
_ref
=
_step3
.
value
;
var
_ref2
=
_slicedToArray
(
_ref
2
)
;
var
key
=
_ref2
[
0
]
;
var
value
=
_ref2
[
1
]
;
gStringBundle
[
key
]
=
value
;
}
}
catch
(
err
)
{
_didIteratorError3
=
true
;
_iteratorError3
=
err
;
}
finally
{
try
{
if
(
!
_iteratorNormalCompletion3
&
&
_iterator3
.
return
)
{
_iterator3
.
return
(
)
;
}
}
finally
{
if
(
_didIteratorError3
)
{
throw
_iteratorError3
;
}
}
}
reply
(
gStringBundle
)
;
}
GetAllConstants
:
function
GetAllConstants
(
message
reply
)
{
reply
(
{
COPY_PANEL
:
COPY_PANEL
LOOP_SESSION_TYPE
:
LOOP_SESSION_TYPE
LOOP_MAU_TYPE
:
LOOP_MAU_TYPE
ROOM_CREATE
:
ROOM_CREATE
ROOM_DELETE
:
ROOM_DELETE
SHARING_ROOM_URL
:
SHARING_ROOM_URL
SHARING_SCREEN
:
SHARING_SCREEN
TWO_WAY_MEDIA_CONN_LENGTH
:
TWO_WAY_MEDIA_CONN_LENGTH
}
)
;
}
GetAppVersionInfo
:
function
GetAppVersionInfo
(
message
reply
)
{
if
(
!
gAppVersionInfo
)
{
try
{
gAppVersionInfo
=
{
channel
:
UpdateUtils
.
UpdateChannel
version
:
appInfo
.
version
OS
:
appInfo
.
OS
}
;
}
catch
(
ex
)
{
}
}
reply
(
gAppVersionInfo
)
;
}
GetAudioBlob
:
function
GetAudioBlob
(
message
reply
)
{
var
name
=
message
.
data
[
0
]
;
var
request
=
Cc
[
"
mozilla
.
org
/
xmlextras
/
xmlhttprequest
;
1
"
]
.
createInstance
(
Ci
.
nsIXMLHttpRequest
)
;
var
url
=
"
chrome
:
/
/
loop
/
content
/
shared
/
sounds
/
"
+
name
+
"
.
ogg
"
;
request
.
open
(
"
GET
"
url
true
)
;
request
.
responseType
=
"
arraybuffer
"
;
request
.
onload
=
function
(
)
{
if
(
request
.
status
<
200
|
|
request
.
status
>
=
300
)
{
reply
(
cloneableError
(
request
.
status
+
"
"
+
request
.
statusText
)
)
;
return
;
}
var
blob
=
new
Blob
(
[
request
.
response
]
{
type
:
"
audio
/
ogg
"
}
)
;
reply
(
blob
)
;
}
;
request
.
send
(
)
;
}
GetConversationWindowData
:
function
GetConversationWindowData
(
message
reply
)
{
reply
(
MozLoopService
.
getConversationWindowData
(
message
.
data
[
0
]
)
)
;
}
GetDoNotDisturb
:
function
GetDoNotDisturb
(
message
reply
)
{
reply
(
MozLoopService
.
doNotDisturb
)
;
}
GetErrors
:
function
GetErrors
(
message
reply
)
{
var
errors
=
{
}
;
var
_iteratorNormalCompletion4
=
true
;
var
_didIteratorError4
=
false
;
var
_iteratorError4
=
undefined
;
try
{
for
(
var
_iterator4
=
MozLoopService
.
errors
[
Symbol
.
iterator
]
(
)
_step4
;
!
(
_iteratorNormalCompletion4
=
(
_step4
=
_iterator4
.
next
(
)
)
.
done
)
;
_iteratorNormalCompletion4
=
true
)
{
var
_ref3
=
_step4
.
value
;
var
_ref4
=
_slicedToArray
(
_ref3
2
)
;
var
type
=
_ref4
[
0
]
;
var
error
=
_ref4
[
1
]
;
if
(
error
.
error
instanceof
Ci
.
nsIException
)
{
MozLoopService
.
log
.
debug
(
"
Warning
:
Some
errors
were
omitted
from
MozLoopAPI
.
errors
"
+
"
due
to
issues
copying
nsIException
across
boundaries
.
"
error
.
error
)
;
delete
error
.
error
;
}
errors
[
type
]
=
cloneableError
(
error
)
;
}
}
catch
(
err
)
{
_didIteratorError4
=
true
;
_iteratorError4
=
err
;
}
finally
{
try
{
if
(
!
_iteratorNormalCompletion4
&
&
_iterator4
.
return
)
{
_iterator4
.
return
(
)
;
}
}
finally
{
if
(
_didIteratorError4
)
{
throw
_iteratorError4
;
}
}
}
return
reply
(
errors
)
;
}
GetHasEncryptionKey
:
function
GetHasEncryptionKey
(
message
reply
)
{
reply
(
MozLoopService
.
hasEncryptionKey
)
;
}
GetLocale
:
function
GetLocale
(
message
reply
)
{
reply
(
MozLoopService
.
locale
)
;
}
GetAddonVersion
:
function
GetAddonVersion
(
message
reply
)
{
reply
(
MozLoopService
.
addonVersion
)
;
}
GetLoopPref
:
function
GetLoopPref
(
message
reply
)
{
var
_message
data4
=
_slicedToArray
(
message
.
data
2
)
;
var
prefName
=
_message
data4
[
0
]
;
var
prefType
=
_message
data4
[
1
]
;
reply
(
MozLoopService
.
getLoopPref
(
prefName
prefType
)
)
;
}
GetPluralRule
:
function
GetPluralRule
(
message
reply
)
{
reply
(
PluralForm
.
ruleNum
)
;
}
GetSelectedTabMetadata
:
function
GetSelectedTabMetadata
(
message
reply
)
{
var
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
var
browser
=
win
&
&
win
.
gBrowser
.
selectedBrowser
;
if
(
!
win
|
|
!
browser
)
{
MozLoopService
.
log
.
error
(
"
Error
occurred
whilst
fetching
page
metadata
"
)
;
reply
(
)
;
return
;
}
if
(
!
browser
.
getAttribute
(
"
remote
"
)
=
=
=
"
true
"
)
{
reply
(
null
)
;
}
win
.
messageManager
.
addMessageListener
(
"
PageMetadata
:
PageDataResult
"
function
onPageDataResult
(
msg
)
{
win
.
messageManager
.
removeMessageListener
(
"
PageMetadata
:
PageDataResult
"
onPageDataResult
)
;
var
pageData
=
msg
.
json
;
win
.
LoopUI
.
getFavicon
(
function
(
err
favicon
)
{
if
(
err
&
&
err
!
=
=
"
favicon
not
found
for
uri
"
)
{
MozLoopService
.
log
.
error
(
"
Error
occurred
whilst
fetching
favicon
"
err
)
;
}
pageData
.
favicon
=
favicon
|
|
null
;
reply
(
pageData
)
;
}
)
;
}
)
;
win
.
gBrowser
.
selectedBrowser
.
messageManager
.
sendAsyncMessage
(
"
PageMetadata
:
GetPageData
"
)
;
}
GetSocialShareProviders
:
function
GetSocialShareProviders
(
message
reply
)
{
if
(
!
gSocialProviders
)
{
updateSocialProvidersCache
(
)
;
}
reply
(
gSocialProviders
)
;
}
GetUserProfile
:
function
GetUserProfile
(
message
reply
)
{
if
(
!
MozLoopService
.
userProfile
)
{
reply
(
null
)
;
return
;
}
reply
(
{
email
:
MozLoopService
.
userProfile
.
email
uid
:
MozLoopService
.
userProfile
.
uid
}
)
;
}
HangupAllChatWindows
:
function
HangupAllChatWindows
(
message
reply
)
{
MozLoopService
.
hangupAllChatWindows
(
)
;
reply
(
)
;
}
HangupNow
:
function
HangupNow
(
message
reply
)
{
var
_message
data5
=
_slicedToArray
(
message
.
data
3
)
;
var
roomToken
=
_message
data5
[
0
]
;
var
sessionToken
=
_message
data5
[
1
]
;
var
windowId
=
_message
data5
[
2
]
;
if
(
!
windowId
)
{
windowId
=
sessionToken
;
}
LoopRooms
.
logDomains
(
roomToken
)
;
LoopRooms
.
leave
(
roomToken
)
;
MozLoopService
.
setScreenShareState
(
windowId
false
)
;
LoopAPI
.
sendMessageToHandler
(
{
name
:
"
RemoveBrowserSharingListener
"
data
:
[
windowId
]
}
)
;
reply
(
)
;
}
IsMultiProcessActive
:
function
IsMultiProcessActive
(
message
reply
)
{
reply
(
isMultiProcessActive
(
)
)
;
}
IsTabShareable
:
function
IsTabShareable
(
message
reply
)
{
var
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
var
browser
=
win
&
&
win
.
gBrowser
.
selectedBrowser
;
if
(
!
win
|
|
!
browser
)
{
reply
(
false
)
;
return
;
}
var
e10sActive
=
isMultiProcessActive
(
)
;
var
tabRemote
=
browser
.
getAttribute
(
"
remote
"
)
=
=
=
"
true
"
;
reply
(
!
e10sActive
|
|
e10sActive
&
&
tabRemote
)
;
}
LoginToFxA
:
function
LoginToFxA
(
message
reply
)
{
var
forceReAuth
=
message
.
data
[
0
]
;
MozLoopService
.
logInToFxA
(
forceReAuth
)
;
reply
(
)
;
}
LogoutFromFxA
:
function
LogoutFromFxA
(
message
reply
)
{
MozLoopService
.
logOutFromFxA
(
)
;
reply
(
)
;
}
NotifyUITour
:
function
NotifyUITour
(
message
reply
)
{
var
_message
data6
=
_slicedToArray
(
message
.
data
2
)
;
var
subject
=
_message
data6
[
0
]
;
var
params
=
_message
data6
[
1
]
;
UITour
.
notify
(
subject
params
)
;
reply
(
)
;
}
OpenGettingStartedTour
:
function
OpenGettingStartedTour
(
message
reply
)
{
MozLoopService
.
openGettingStartedTour
(
)
;
reply
(
)
;
}
GettingStartedURL
:
function
GettingStartedURL
(
message
reply
)
{
var
aSrc
=
message
.
data
[
0
]
|
|
null
;
var
aAdditionalParams
=
message
.
data
[
1
]
|
|
{
}
;
reply
(
MozLoopService
.
getTourURL
(
aSrc
aAdditionalParams
)
.
href
)
;
}
OpenFxASettings
:
function
OpenFxASettings
(
message
reply
)
{
MozLoopService
.
openFxASettings
(
)
;
reply
(
)
;
}
OpenNonE10sWindow
:
function
OpenNonE10sWindow
(
message
reply
)
{
var
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
var
url
=
message
.
data
[
0
]
?
message
.
data
[
0
]
:
"
about
:
home
"
;
win
.
openDialog
(
"
chrome
:
/
/
browser
/
content
/
"
"
_blank
"
"
chrome
all
dialog
=
no
non
-
remote
"
url
)
;
reply
(
)
;
}
OpenURL
:
function
OpenURL
(
message
reply
)
{
var
url
=
message
.
data
[
0
]
;
MozLoopService
.
openURL
(
url
)
;
reply
(
)
;
}
RemoveBrowserSharingListener
:
function
RemoveBrowserSharingListener
(
message
reply
)
{
if
(
!
gBrowserSharingListeners
.
size
)
{
reply
(
)
;
return
;
}
var
_message
data7
=
_slicedToArray
(
message
.
data
1
)
;
var
windowId
=
_message
data7
[
0
]
;
gBrowserSharingListeners
.
delete
(
windowId
)
;
if
(
gBrowserSharingListeners
.
size
>
0
)
{
reply
(
)
;
return
;
}
var
_iteratorNormalCompletion5
=
true
;
var
_didIteratorError5
=
false
;
var
_iteratorError5
=
undefined
;
try
{
for
(
var
_iterator5
=
gBrowserSharingWindows
[
Symbol
.
iterator
]
(
)
_step5
;
!
(
_iteratorNormalCompletion5
=
(
_step5
=
_iterator5
.
next
(
)
)
.
done
)
;
_iteratorNormalCompletion5
=
true
)
{
var
win
=
_step5
.
value
;
win
=
win
.
get
(
)
;
if
(
!
win
)
{
continue
;
}
win
.
LoopUI
.
stopBrowserSharing
(
)
;
}
}
catch
(
err
)
{
_didIteratorError5
=
true
;
_iteratorError5
=
err
;
}
finally
{
try
{
if
(
!
_iteratorNormalCompletion5
&
&
_iterator5
.
return
)
{
_iterator5
.
return
(
)
;
}
}
finally
{
if
(
_didIteratorError5
)
{
throw
_iteratorError5
;
}
}
}
NewTabURL
.
reset
(
)
;
gBrowserSharingWindows
.
clear
(
)
;
reply
(
)
;
}
"
Rooms
:
*
"
:
function
Rooms
(
action
message
reply
)
{
LoopAPIInternal
.
handleObjectAPIMessage
(
LoopRooms
kRoomsPushPrefix
action
message
reply
)
;
}
SetDoNotDisturb
:
function
SetDoNotDisturb
(
message
reply
)
{
MozLoopService
.
doNotDisturb
=
message
.
data
[
0
]
;
reply
(
)
;
}
SetLoopPref
:
function
SetLoopPref
(
message
reply
)
{
var
_message
data8
=
_slicedToArray
(
message
.
data
3
)
;
var
prefName
=
_message
data8
[
0
]
;
var
value
=
_message
data8
[
1
]
;
var
prefType
=
_message
data8
[
2
]
;
MozLoopService
.
setLoopPref
(
prefName
value
prefType
)
;
reply
(
)
;
}
SetNameNewRoom
:
function
SetNameNewRoom
(
message
reply
)
{
var
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
win
&
&
win
.
LoopUI
.
renameRoom
(
)
;
reply
(
)
;
}
SetScreenShareState
:
function
SetScreenShareState
(
message
reply
)
{
var
_message
data9
=
_slicedToArray
(
message
.
data
2
)
;
var
windowId
=
_message
data9
[
0
]
;
var
active
=
_message
data9
[
1
]
;
MozLoopService
.
setScreenShareState
(
windowId
active
)
;
reply
(
)
;
}
SocialShareRoom
:
function
SocialShareRoom
(
message
reply
)
{
var
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
!
win
|
|
!
win
.
SocialShare
)
{
reply
(
)
;
return
;
}
var
_message
data10
=
_slicedToArray
(
message
.
data
4
)
;
var
providerOrigin
=
_message
data10
[
0
]
;
var
roomURL
=
_message
data10
[
1
]
;
var
title
=
_message
data10
[
2
]
;
var
body
=
_message
data10
[
3
]
;
var
graphData
=
{
url
:
roomURL
title
:
title
}
;
if
(
body
)
{
graphData
.
body
=
body
;
}
win
.
SocialShare
.
sharePage
(
providerOrigin
graphData
null
win
.
LoopUI
.
toolbarButton
.
anchor
)
;
reply
(
)
;
}
TelemetryAddValue
:
function
TelemetryAddValue
(
message
reply
)
{
var
_message
data11
=
_slicedToArray
(
message
.
data
2
)
;
var
histogramId
=
_message
data11
[
0
]
;
var
value
=
_message
data11
[
1
]
;
if
(
histogramId
=
=
=
"
LOOP_ACTIVITY_COUNTER
"
)
{
var
pref
=
"
mau
.
"
+
kMauPrefMap
.
get
(
value
)
;
var
prefDate
=
MozLoopService
.
getLoopPref
(
pref
)
*
1000
;
var
delta
=
Date
.
now
(
)
-
prefDate
;
if
(
pref
=
=
=
0
|
|
delta
>
=
2592000
*
1000
)
{
try
{
Services
.
telemetry
.
getHistogramById
(
histogramId
)
.
add
(
value
)
;
}
catch
(
ex
)
{
MozLoopService
.
log
.
error
(
"
TelemetryAddValue
failed
for
histogram
'
"
+
histogramId
+
"
'
"
ex
)
;
}
MozLoopService
.
setLoopPref
(
pref
Math
.
floor
(
Date
.
now
(
)
/
1000
)
)
;
}
}
else
{
try
{
Services
.
telemetry
.
getHistogramById
(
histogramId
)
.
add
(
value
)
;
}
catch
(
ex
)
{
MozLoopService
.
log
.
error
(
"
TelemetryAddValue
failed
for
histogram
'
"
+
histogramId
+
"
'
"
ex
)
;
}
}
reply
(
)
;
}
}
;
var
LoopAPIInternal
=
{
initialize
:
function
initialize
(
)
{
if
(
gPageListeners
)
{
return
;
}
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
RemotePageManager
.
jsm
"
)
;
gPageListeners
=
[
new
RemotePages
(
"
about
:
looppanel
"
)
new
RemotePages
(
"
about
:
loopconversation
"
)
new
RemotePages
(
"
chrome
:
/
/
loop
/
content
/
panels
/
slideshow
.
html
"
)
]
;
var
_iteratorNormalCompletion6
=
true
;
var
_didIteratorError6
=
false
;
var
_iteratorError6
=
undefined
;
try
{
for
(
var
_iterator6
=
gPageListeners
[
Symbol
.
iterator
]
(
)
_step6
;
!
(
_iteratorNormalCompletion6
=
(
_step6
=
_iterator6
.
next
(
)
)
.
done
)
;
_iteratorNormalCompletion6
=
true
)
{
var
page
=
_step6
.
value
;
page
.
addMessageListener
(
kMessageName
this
.
handleMessage
.
bind
(
this
)
)
;
}
}
catch
(
err
)
{
_didIteratorError6
=
true
;
_iteratorError6
=
err
;
}
finally
{
try
{
if
(
!
_iteratorNormalCompletion6
&
&
_iterator6
.
return
)
{
_iterator6
.
return
(
)
;
}
}
finally
{
if
(
_didIteratorError6
)
{
throw
_iteratorError6
;
}
}
}
Services
.
obs
.
addObserver
(
this
.
handleStatusChanged
"
loop
-
status
-
changed
"
false
)
;
}
handleMessage
:
function
handleMessage
(
message
reply
)
{
var
seq
=
message
.
data
.
shift
(
)
;
var
action
=
message
.
data
.
shift
(
)
;
var
actionParts
=
action
.
split
(
"
:
"
)
;
var
handlerName
=
actionParts
.
shift
(
)
;
if
(
!
reply
)
{
reply
=
function
reply
(
result
)
{
try
{
message
.
target
.
sendAsyncMessage
(
message
.
name
[
seq
result
]
)
;
}
catch
(
ex
)
{
MozLoopService
.
log
.
error
(
"
Failed
to
send
reply
back
to
content
:
"
ex
)
;
}
}
;
}
if
(
handlerName
=
=
kBatchMessage
)
{
this
.
handleBatchMessage
(
seq
message
reply
)
;
return
;
}
var
wildcardName
=
handlerName
+
"
:
*
"
;
if
(
kMessageHandlers
[
wildcardName
]
)
{
if
(
gStubbedMessageHandlers
&
&
gStubbedMessageHandlers
[
wildcardName
]
)
{
gStubbedMessageHandlers
[
wildcardName
]
(
action
message
reply
)
;
}
else
{
kMessageHandlers
[
wildcardName
]
(
action
message
reply
)
;
}
return
;
}
if
(
gStubbedMessageHandlers
&
&
gStubbedMessageHandlers
[
handlerName
]
)
{
gStubbedMessageHandlers
[
handlerName
]
(
message
reply
)
;
return
;
}
if
(
!
kMessageHandlers
[
handlerName
]
)
{
var
msg
=
"
Ouch
no
message
handler
available
for
'
"
+
handlerName
+
"
'
"
;
MozLoopService
.
log
.
error
(
msg
)
;
reply
(
cloneableError
(
msg
)
)
;
return
;
}
kMessageHandlers
[
handlerName
]
(
message
reply
)
;
}
handleBatchMessage
:
function
handleBatchMessage
(
seq
message
reply
)
{
var
_this
=
this
;
var
requests
=
message
.
data
[
0
]
;
if
(
!
requests
.
length
)
{
MozLoopService
.
log
.
error
(
"
Ough
a
batch
call
with
no
requests
is
not
much
"
+
"
of
a
batch
now
is
it
?
"
)
;
return
;
}
if
(
!
(
"
loopCount
"
in
reply
)
)
{
reply
.
loopCount
=
0
;
}
else
if
(
+
+
reply
.
loopCount
>
kMaxLoopCount
)
{
reply
(
cloneableError
(
"
Too
many
nested
calls
"
)
)
;
return
;
}
var
resultSet
=
{
}
;
Promise
.
all
(
requests
.
map
(
function
(
requestSet
)
{
var
requestSeq
=
requestSet
[
0
]
;
return
new
Promise
(
function
(
resolve
)
{
return
_this
.
handleMessage
(
{
data
:
requestSet
}
function
(
result
)
{
resultSet
[
requestSeq
]
=
result
;
resolve
(
)
;
}
)
;
}
)
;
}
)
)
.
then
(
function
(
)
{
return
reply
(
resultSet
)
;
}
)
;
}
handleObjectAPIMessage
:
function
handleObjectAPIMessage
(
api
pushMessagePrefix
action
message
reply
)
{
var
funcName
=
getObjectAPIFunctionName
(
action
)
;
if
(
funcName
=
=
kPushSubscription
)
{
var
_ret
=
function
(
)
{
var
events
=
message
.
data
[
0
]
;
if
(
!
events
|
|
!
events
.
length
)
{
var
msg
=
"
Oops
don
'
t
forget
to
pass
in
event
names
when
you
try
to
"
+
"
subscribe
to
them
!
"
;
MozLoopService
.
log
.
error
(
msg
)
;
reply
(
cloneableError
(
msg
)
)
;
return
{
v
:
void
0
}
;
}
var
handlerFunc
=
function
handlerFunc
(
e
)
{
for
(
var
_len
=
arguments
.
length
data
=
Array
(
_len
>
1
?
_len
-
1
:
0
)
_key
=
1
;
_key
<
_len
;
_key
+
+
)
{
data
[
_key
-
1
]
=
arguments
[
_key
]
;
}
var
prettyEventName
=
e
.
charAt
(
0
)
.
toUpperCase
(
)
+
e
.
substr
(
1
)
;
try
{
message
.
target
.
sendAsyncMessage
(
kPushMessageName
[
pushMessagePrefix
+
prettyEventName
data
]
)
;
}
catch
(
ex
)
{
MozLoopService
.
log
.
debug
(
"
Unable
to
send
event
through
to
target
:
"
+
ex
.
message
)
;
var
_iteratorNormalCompletion7
=
true
;
var
_didIteratorError7
=
false
;
var
_iteratorError7
=
undefined
;
try
{
for
(
var
_iterator7
=
events
[
Symbol
.
iterator
]
(
)
_step7
;
!
(
_iteratorNormalCompletion7
=
(
_step7
=
_iterator7
.
next
(
)
)
.
done
)
;
_iteratorNormalCompletion7
=
true
)
{
var
eventName
=
_step7
.
value
;
api
.
off
(
eventName
handlerFunc
)
;
}
}
catch
(
err
)
{
_didIteratorError7
=
true
;
_iteratorError7
=
err
;
}
finally
{
try
{
if
(
!
_iteratorNormalCompletion7
&
&
_iterator7
.
return
)
{
_iterator7
.
return
(
)
;
}
}
finally
{
if
(
_didIteratorError7
)
{
throw
_iteratorError7
;
}
}
}
}
}
;
var
_iteratorNormalCompletion8
=
true
;
var
_didIteratorError8
=
false
;
var
_iteratorError8
=
undefined
;
try
{
for
(
var
_iterator8
=
events
[
Symbol
.
iterator
]
(
)
_step8
;
!
(
_iteratorNormalCompletion8
=
(
_step8
=
_iterator8
.
next
(
)
)
.
done
)
;
_iteratorNormalCompletion8
=
true
)
{
var
eventName
=
_step8
.
value
;
api
.
on
(
eventName
handlerFunc
)
;
}
}
catch
(
err
)
{
_didIteratorError8
=
true
;
_iteratorError8
=
err
;
}
finally
{
try
{
if
(
!
_iteratorNormalCompletion8
&
&
_iterator8
.
return
)
{
_iterator8
.
return
(
)
;
}
}
finally
{
if
(
_didIteratorError8
)
{
throw
_iteratorError8
;
}
}
}
reply
(
)
;
return
{
v
:
void
0
}
;
}
(
)
;
if
(
(
typeof
_ret
=
=
=
"
undefined
"
?
"
undefined
"
:
_typeof
(
_ret
)
)
=
=
=
"
object
"
)
return
_ret
.
v
;
}
if
(
typeof
api
[
funcName
]
!
=
"
function
"
)
{
reply
(
cloneableError
(
"
Sorry
function
'
"
+
funcName
+
"
'
does
not
exist
!
"
)
)
;
return
;
}
api
[
funcName
]
.
apply
(
api
_toConsumableArray
(
message
.
data
)
.
concat
(
[
function
(
err
result
)
{
reply
(
err
?
cloneableError
(
err
)
:
result
)
;
}
]
)
)
;
}
handleStatusChanged
:
function
handleStatusChanged
(
)
{
LoopAPIInternal
.
broadcastPushMessage
(
"
LoopStatusChanged
"
)
;
}
broadcastPushMessage
:
function
broadcastPushMessage
(
name
data
)
{
if
(
!
gPageListeners
)
{
return
;
}
var
_iteratorNormalCompletion9
=
true
;
var
_didIteratorError9
=
false
;
var
_iteratorError9
=
undefined
;
try
{
for
(
var
_iterator9
=
gPageListeners
[
Symbol
.
iterator
]
(
)
_step9
;
!
(
_iteratorNormalCompletion9
=
(
_step9
=
_iterator9
.
next
(
)
)
.
done
)
;
_iteratorNormalCompletion9
=
true
)
{
var
page
=
_step9
.
value
;
try
{
page
.
sendAsyncMessage
(
kPushMessageName
[
name
data
]
)
;
}
catch
(
ex
)
{
if
(
ex
.
result
!
=
Components
.
results
.
NS_ERROR_NOT_INITIALIZED
)
{
throw
ex
;
}
}
}
}
catch
(
err
)
{
_didIteratorError9
=
true
;
_iteratorError9
=
err
;
}
finally
{
try
{
if
(
!
_iteratorNormalCompletion9
&
&
_iterator9
.
return
)
{
_iterator9
.
return
(
)
;
}
}
finally
{
if
(
_didIteratorError9
)
{
throw
_iteratorError9
;
}
}
}
}
destroy
:
function
destroy
(
)
{
if
(
!
gPageListeners
)
{
return
;
}
var
_iteratorNormalCompletion10
=
true
;
var
_didIteratorError10
=
false
;
var
_iteratorError10
=
undefined
;
try
{
for
(
var
_iterator10
=
gPageListeners
[
Symbol
.
iterator
]
(
)
_step10
;
!
(
_iteratorNormalCompletion10
=
(
_step10
=
_iterator10
.
next
(
)
)
.
done
)
;
_iteratorNormalCompletion10
=
true
)
{
var
listener
=
_step10
.
value
;
listener
.
destroy
(
)
;
}
}
catch
(
err
)
{
_didIteratorError10
=
true
;
_iteratorError10
=
err
;
}
finally
{
try
{
if
(
!
_iteratorNormalCompletion10
&
&
_iterator10
.
return
)
{
_iterator10
.
return
(
)
;
}
}
finally
{
if
(
_didIteratorError10
)
{
throw
_iteratorError10
;
}
}
}
gPageListeners
=
null
;
Services
.
obs
.
removeObserver
(
this
.
handleStatusChanged
"
loop
-
status
-
changed
"
)
;
if
(
gSocialProviders
)
{
Services
.
obs
.
removeObserver
(
updateSocialProvidersCache
"
social
:
providers
-
changed
"
)
;
}
}
}
;
this
.
LoopAPI
=
Object
.
freeze
(
{
initialize
:
function
initialize
(
)
{
LoopAPIInternal
.
initialize
(
)
;
}
broadcastPushMessage
:
function
broadcastPushMessage
(
name
data
)
{
LoopAPIInternal
.
broadcastPushMessage
(
name
data
)
;
}
destroy
:
function
destroy
(
)
{
LoopAPIInternal
.
destroy
(
)
;
}
sendMessageToHandler
:
function
sendMessageToHandler
(
message
reply
)
{
reply
=
reply
|
|
function
(
)
{
}
;
var
handlerName
=
message
.
name
;
var
handler
=
kMessageHandlers
[
handlerName
]
;
if
(
gStubbedMessageHandlers
&
&
gStubbedMessageHandlers
[
handlerName
]
)
{
handler
=
gStubbedMessageHandlers
[
handlerName
]
;
}
if
(
!
handler
)
{
var
msg
=
"
Ouch
no
message
handler
available
for
'
"
+
handlerName
+
"
'
"
;
MozLoopService
.
log
.
error
(
msg
)
;
reply
(
cloneableError
(
msg
)
)
;
return
;
}
if
(
!
message
.
data
)
{
message
.
data
=
[
]
;
}
if
(
handlerName
.
endsWith
(
"
*
"
)
)
{
handler
(
message
.
action
message
reply
)
;
}
else
{
handler
(
message
reply
)
;
}
}
inspect
:
function
inspect
(
)
{
return
[
Object
.
create
(
LoopAPIInternal
)
Object
.
create
(
kMessageHandlers
)
gPageListeners
?
[
]
.
concat
(
_toConsumableArray
(
gPageListeners
)
)
:
null
]
;
}
stub
:
function
stub
(
pageListeners
)
{
if
(
!
gOriginalPageListeners
)
{
gOriginalPageListeners
=
gPageListeners
;
}
gPageListeners
=
pageListeners
;
}
stubMessageHandlers
:
function
stubMessageHandlers
(
handlers
)
{
gStubbedMessageHandlers
=
handlers
;
}
restore
:
function
restore
(
)
{
if
(
gOriginalPageListeners
)
{
gPageListeners
=
gOriginalPageListeners
;
}
gStubbedMessageHandlers
=
null
;
}
}
)
;
