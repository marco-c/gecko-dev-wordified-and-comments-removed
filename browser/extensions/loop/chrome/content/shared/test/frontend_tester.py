from
marionette
import
MarionetteTestCase
from
marionette_driver
.
errors
import
NoSuchElementException
import
threading
import
SimpleHTTPServer
import
SocketServer
import
BaseHTTPServer
import
urllib
import
urlparse
import
os
DEBUG
=
False
gCommonDir
=
None
REDIRECTIONS
=
{
    
"
/
test
/
vendor
"
:
"
/
chrome
/
content
/
shared
/
test
/
vendor
"
    
"
/
shared
/
js
"
:
"
/
chrome
/
content
/
shared
/
js
"
    
"
/
shared
/
test
"
:
"
/
chrome
/
content
/
shared
/
test
"
    
"
/
shared
/
vendor
"
:
"
/
chrome
/
content
/
shared
/
vendor
"
    
"
/
add
-
on
/
panels
/
vendor
"
:
"
/
chrome
/
content
/
panels
/
vendor
"
    
"
/
add
-
on
/
panels
/
js
"
:
"
/
chrome
/
content
/
panels
/
js
"
    
"
/
add
-
on
/
shared
/
js
"
:
"
/
chrome
/
content
/
shared
/
js
"
    
"
/
add
-
on
/
shared
/
vendor
"
:
"
/
chrome
/
content
/
shared
/
vendor
"
}
class
ThreadingSimpleServer
(
SocketServer
.
ThreadingMixIn
                            
BaseHTTPServer
.
HTTPServer
)
:
    
pass
class
HttpRequestHandler
(
SimpleHTTPServer
.
SimpleHTTPRequestHandler
)
:
    
def
do_HEAD
(
s
)
:
        
lastSlash
=
s
.
path
.
rfind
(
"
/
"
)
        
path
=
s
.
path
[
:
lastSlash
]
        
if
(
path
in
REDIRECTIONS
)
:
            
filename
=
s
.
path
[
lastSlash
:
]
            
s
.
send_response
(
301
)
            
s
.
send_header
(
"
Location
"
"
/
"
+
gCommonDir
+
REDIRECTIONS
.
get
(
path
"
/
"
)
+
filename
)
            
s
.
end_headers
(
)
        
else
:
            
SimpleHTTPServer
.
SimpleHTTPRequestHandler
.
do_HEAD
(
s
)
    
def
do_GET
(
s
)
:
        
lastSlash
=
s
.
path
.
rfind
(
"
/
"
)
        
path
=
s
.
path
[
:
lastSlash
]
        
if
(
path
in
REDIRECTIONS
)
:
            
s
.
do_HEAD
(
)
        
else
:
            
SimpleHTTPServer
.
SimpleHTTPRequestHandler
.
do_GET
(
s
)
    
def
log_message
(
self
format
*
args
*
*
kwargs
)
:
        
if
DEBUG
:
            
BaseHTTPServer
.
BaseHTTPRequestHandler
.
log_message
(
self
format
*
args
*
*
kwargs
)
        
else
:
            
pass
class
BaseTestFrontendUnits
(
MarionetteTestCase
)
:
    
classmethod
    
def
setUpClass
(
cls
)
:
        
super
(
BaseTestFrontendUnits
cls
)
.
setUpClass
(
)
        
cls
.
server
=
ThreadingSimpleServer
(
(
'
'
0
)
HttpRequestHandler
)
        
cls
.
ip
cls
.
port
=
cls
.
server
.
server_address
        
cls
.
server_thread
=
threading
.
Thread
(
target
=
cls
.
server
.
serve_forever
)
        
cls
.
server_thread
.
daemon
=
False
        
cls
.
server_thread
.
start
(
)
    
classmethod
    
def
tearDownClass
(
cls
)
:
        
cls
.
server
.
shutdown
(
)
        
cls
.
server_thread
.
join
(
)
        
cls
.
server_thread
=
None
        
cls
.
server
=
None
    
def
setUp
(
self
)
:
        
super
(
BaseTestFrontendUnits
self
)
.
setUp
(
)
        
self
.
marionette
.
enforce_gecko_prefs
(
{
            
"
browser
.
tabs
.
remote
.
autostart
"
:
True
        
}
)
        
self
.
marionette
.
set_search_timeout
(
120000
)
        
self
.
marionette
.
timeouts
(
"
page
load
"
120000
)
    
def
set_server_prefix
(
self
srcdir_path
)
:
        
global
gCommonDir
        
commonPath
=
os
.
path
.
commonprefix
(
[
__file__
os
.
getcwd
(
)
]
)
        
self
.
relPath
=
os
.
path
.
relpath
(
os
.
path
.
dirname
(
__file__
)
commonPath
)
        
self
.
relPath
=
urllib
.
pathname2url
(
os
.
path
.
join
(
self
.
relPath
srcdir_path
)
)
        
gCommonDir
=
os
.
path
.
normpath
(
self
.
relPath
)
.
replace
(
"
\
\
"
"
/
/
"
)
        
self
.
server_prefix
=
urlparse
.
urljoin
(
"
http
:
/
/
localhost
:
"
+
str
(
self
.
port
)
                                              
self
.
relPath
)
    
def
check_page
(
self
page
)
:
        
self
.
marionette
.
navigate
(
urlparse
.
urljoin
(
self
.
server_prefix
page
)
)
        
try
:
            
self
.
marionette
.
find_element
(
"
id
"
'
complete
'
)
        
except
NoSuchElementException
:
            
fullPageUrl
=
urlparse
.
urljoin
(
self
.
relPath
page
)
            
details
=
"
%
s
:
1
failure
encountered
\
n
%
s
"
%
\
                      
(
fullPageUrl
                       
self
.
get_failure_summary
(
                           
fullPageUrl
"
Waiting
for
Completion
"
                           
"
Could
not
find
the
test
complete
indicator
"
)
)
            
raise
AssertionError
(
details
)
        
fail_node
=
self
.
marionette
.
find_element
(
"
css
selector
"
                                                 
'
.
failures
>
em
'
)
        
if
fail_node
.
text
=
=
"
0
"
:
            
return
        
raise
AssertionError
(
self
.
get_failure_details
(
page
)
)
    
def
get_failure_summary
(
self
fullPageUrl
testName
testError
)
:
        
return
"
TEST
-
UNEXPECTED
-
FAIL
|
%
s
|
%
s
-
%
s
"
%
(
fullPageUrl
testName
testError
)
    
def
get_failure_details
(
self
page
)
:
        
fail_nodes
=
self
.
marionette
.
find_elements
(
"
css
selector
"
                                                   
'
.
test
.
fail
'
)
        
fullPageUrl
=
urlparse
.
urljoin
(
self
.
relPath
page
)
        
details
=
[
"
%
s
:
%
d
failure
(
s
)
encountered
:
"
%
(
fullPageUrl
len
(
fail_nodes
)
)
]
        
for
node
in
fail_nodes
:
            
errorText
=
node
.
find_element
(
"
css
selector
"
'
.
error
'
)
.
text
            
details
.
append
(
                
self
.
get_failure_summary
(
page
                                         
node
.
find_element
(
"
tag
name
"
'
h2
'
)
.
text
.
split
(
"
\
n
"
)
[
0
]
                                         
errorText
.
split
(
"
\
n
"
)
[
0
]
)
)
            
details
.
append
(
                
errorText
)
        
return
"
\
n
"
.
join
(
details
)
