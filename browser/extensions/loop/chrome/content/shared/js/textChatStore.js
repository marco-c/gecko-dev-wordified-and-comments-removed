"
use
strict
"
;
var
loop
=
loop
|
|
{
}
;
loop
.
store
=
loop
.
store
|
|
{
}
;
loop
.
store
.
TextChatStore
=
function
(
)
{
"
use
strict
"
;
var
CHAT_MESSAGE_TYPES
=
loop
.
store
.
CHAT_MESSAGE_TYPES
=
{
RECEIVED
:
"
recv
"
SENT
:
"
sent
"
SPECIAL
:
"
special
"
}
;
var
CHAT_CONTENT_TYPES
=
loop
.
shared
.
utils
.
CHAT_CONTENT_TYPES
;
var
TextChatStore
=
loop
.
store
.
createStore
(
{
actions
:
[
"
dataChannelsAvailable
"
"
receivedTextChatMessage
"
"
sendTextChatMessage
"
"
updateRoomInfo
"
"
updateRoomContext
"
"
remotePeerDisconnected
"
"
remotePeerConnected
"
]
initialize
:
function
initialize
(
options
)
{
options
=
options
|
|
{
}
;
if
(
!
options
.
sdkDriver
)
{
throw
new
Error
(
"
Missing
option
sdkDriver
"
)
;
}
this
.
_sdkDriver
=
options
.
sdkDriver
;
}
getInitialStoreState
:
function
getInitialStoreState
(
)
{
return
{
textChatEnabled
:
false
messageList
:
[
]
roomName
:
null
length
:
0
}
;
}
dataChannelsAvailable
:
function
dataChannelsAvailable
(
actionData
)
{
this
.
setStoreState
(
{
textChatEnabled
:
actionData
.
available
}
)
;
if
(
actionData
.
available
)
{
window
.
dispatchEvent
(
new
CustomEvent
(
"
LoopChatEnabled
"
)
)
;
}
}
_appendTextChatMessage
:
function
_appendTextChatMessage
(
type
messageData
)
{
var
message
=
{
type
:
type
contentType
:
messageData
.
contentType
message
:
messageData
.
message
extraData
:
messageData
.
extraData
sentTimestamp
:
messageData
.
sentTimestamp
receivedTimestamp
:
messageData
.
receivedTimestamp
}
;
var
newList
=
[
]
.
concat
(
this
.
_storeState
.
messageList
)
;
var
isContext
=
message
.
contentType
=
=
=
CHAT_CONTENT_TYPES
.
CONTEXT
;
if
(
isContext
)
{
var
contextUpdated
=
false
;
for
(
var
i
=
0
l
=
newList
.
length
;
i
<
l
;
+
+
i
)
{
if
(
newList
[
i
]
.
contentType
=
=
=
CHAT_CONTENT_TYPES
.
CONTEXT
)
{
newList
[
i
]
=
message
;
contextUpdated
=
true
;
break
;
}
}
if
(
!
contextUpdated
)
{
newList
.
push
(
message
)
;
}
}
else
{
newList
.
push
(
message
)
;
}
this
.
setStoreState
(
{
messageList
:
newList
}
)
;
if
(
message
.
contentType
!
=
=
CHAT_CONTENT_TYPES
.
CONTEXT
&
&
message
.
contentType
!
=
=
CHAT_CONTENT_TYPES
.
NOTIFICATION
)
{
if
(
this
.
_storeState
.
textChatEnabled
)
{
window
.
dispatchEvent
(
new
CustomEvent
(
"
LoopChatMessageAppended
"
)
)
;
}
else
{
window
.
dispatchEvent
(
new
CustomEvent
(
"
LoopChatDisabledMessageAppended
"
)
)
;
}
}
}
receivedTextChatMessage
:
function
receivedTextChatMessage
(
actionData
)
{
if
(
actionData
.
contentType
!
=
=
CHAT_CONTENT_TYPES
.
TEXT
&
&
actionData
.
contentType
!
=
=
CHAT_CONTENT_TYPES
.
CONTEXT_TILE
&
&
actionData
.
contentType
!
=
=
CHAT_CONTENT_TYPES
.
NOTIFICATION
)
{
return
;
}
this
.
_appendTextChatMessage
(
CHAT_MESSAGE_TYPES
.
RECEIVED
actionData
)
;
}
sendTextChatMessage
:
function
sendTextChatMessage
(
actionData
)
{
this
.
_appendTextChatMessage
(
CHAT_MESSAGE_TYPES
.
SENT
actionData
)
;
this
.
_sdkDriver
.
sendTextChatMessage
(
actionData
)
;
}
updateRoomInfo
:
function
updateRoomInfo
(
actionData
)
{
if
(
actionData
.
roomName
)
{
var
roomName
=
actionData
.
roomName
;
if
(
!
roomName
&
&
actionData
.
roomContextUrls
&
&
actionData
.
roomContextUrls
.
length
)
{
roomName
=
actionData
.
roomContextUrls
[
0
]
.
description
|
|
actionData
.
roomContextUrls
[
0
]
.
url
;
}
this
.
setStoreState
(
{
roomName
:
roomName
}
)
;
}
if
(
"
roomContextUrls
"
in
actionData
&
&
actionData
.
roomContextUrls
&
&
actionData
.
roomContextUrls
.
length
)
{
var
urlData
=
actionData
.
roomContextUrls
[
0
]
;
this
.
_appendTextChatMessage
(
CHAT_MESSAGE_TYPES
.
SPECIAL
{
contentType
:
CHAT_CONTENT_TYPES
.
CONTEXT
message
:
urlData
.
description
extraData
:
{
location
:
urlData
.
location
thumbnail
:
urlData
.
thumbnail
}
}
)
;
}
}
updateRoomContext
:
function
updateRoomContext
(
actionData
)
{
var
contextTile
=
null
;
for
(
var
i
=
this
.
_storeState
.
messageList
.
length
-
1
;
i
>
=
0
;
i
-
-
)
{
if
(
this
.
_storeState
.
messageList
[
i
]
.
contentType
=
=
=
CHAT_CONTENT_TYPES
.
CONTEXT_TILE
)
{
contextTile
=
this
.
_storeState
.
messageList
[
i
]
;
break
;
}
}
if
(
!
contextTile
)
{
this
.
_appendContextTileMessage
(
actionData
)
;
return
;
}
var
oldDomain
=
new
URL
(
contextTile
.
extraData
.
newRoomURL
)
.
hostname
;
var
currentDomain
=
new
URL
(
actionData
.
newRoomURL
)
.
hostname
;
if
(
oldDomain
=
=
=
currentDomain
)
{
return
;
}
this
.
_appendContextTileMessage
(
actionData
)
;
}
remotePeerDisconnected
:
function
remotePeerDisconnected
(
actionData
)
{
var
notificationTextKey
;
if
(
actionData
.
peerHungup
)
{
notificationTextKey
=
"
peer_left_session
"
;
}
else
{
notificationTextKey
=
"
peer_unexpected_quit
"
;
}
var
message
=
{
contentType
:
CHAT_CONTENT_TYPES
.
NOTIFICATION
message
:
notificationTextKey
receivedTimestamp
:
new
Date
(
)
.
toISOString
(
)
extraData
:
{
peerStatus
:
"
disconnected
"
}
}
;
this
.
_appendTextChatMessage
(
CHAT_MESSAGE_TYPES
.
RECEIVED
message
)
;
}
remotePeerConnected
:
function
remotePeerConnected
(
)
{
var
notificationTextKey
=
"
peer_join_session
"
;
var
message
=
{
contentType
:
CHAT_CONTENT_TYPES
.
NOTIFICATION
message
:
notificationTextKey
receivedTimestamp
:
new
Date
(
)
.
toISOString
(
)
extraData
:
{
peerStatus
:
"
connected
"
}
}
;
this
.
_appendTextChatMessage
(
CHAT_MESSAGE_TYPES
.
RECEIVED
message
)
;
}
_appendContextTileMessage
:
function
_appendContextTileMessage
(
data
)
{
var
msgData
=
{
contentType
:
CHAT_CONTENT_TYPES
.
CONTEXT_TILE
message
:
data
.
newRoomDescription
extraData
:
{
roomToken
:
data
.
roomToken
newRoomThumbnail
:
data
.
newRoomThumbnail
newRoomURL
:
data
.
newRoomURL
}
sentTimestamp
:
new
Date
(
)
.
toISOString
(
)
}
;
this
.
sendTextChatMessage
(
msgData
)
;
}
}
)
;
return
TextChatStore
;
}
(
)
;
