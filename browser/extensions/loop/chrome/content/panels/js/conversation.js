"
use
strict
"
;
var
loop
=
loop
|
|
{
}
;
loop
.
conversation
=
function
(
mozL10n
)
{
"
use
strict
"
;
var
sharedMixins
=
loop
.
shared
.
mixins
;
var
sharedActions
=
loop
.
shared
.
actions
;
var
FAILURE_DETAILS
=
loop
.
shared
.
utils
.
FAILURE_DETAILS
;
var
DesktopRoomConversationView
=
loop
.
roomViews
.
DesktopRoomConversationView
;
var
FeedbackView
=
loop
.
feedbackViews
.
FeedbackView
;
var
RoomFailureView
=
loop
.
roomViews
.
RoomFailureView
;
var
AppControllerView
=
React
.
createClass
(
{
displayName
:
"
AppControllerView
"
mixins
:
[
Backbone
.
Events
loop
.
store
.
StoreMixin
(
"
conversationAppStore
"
)
sharedMixins
.
DocumentTitleMixin
sharedMixins
.
WindowCloseMixin
]
propTypes
:
{
cursorStore
:
React
.
PropTypes
.
instanceOf
(
loop
.
store
.
RemoteCursorStore
)
.
isRequired
dispatcher
:
React
.
PropTypes
.
instanceOf
(
loop
.
Dispatcher
)
.
isRequired
roomStore
:
React
.
PropTypes
.
instanceOf
(
loop
.
store
.
RoomStore
)
}
componentWillMount
:
function
componentWillMount
(
)
{
this
.
listenTo
(
this
.
props
.
cursorStore
"
change
:
remoteCursorPosition
"
this
.
_onRemoteCursorPositionChange
)
;
this
.
listenTo
(
this
.
props
.
cursorStore
"
change
:
remoteCursorClick
"
this
.
_onRemoteCursorClick
)
;
}
_onRemoteCursorPositionChange
:
function
_onRemoteCursorPositionChange
(
)
{
loop
.
request
(
"
AddRemoteCursorOverlay
"
this
.
props
.
cursorStore
.
getStoreState
(
"
remoteCursorPosition
"
)
)
;
}
_onRemoteCursorClick
:
function
_onRemoteCursorClick
(
)
{
var
click
=
this
.
props
.
cursorStore
.
getStoreState
(
"
remoteCursorClick
"
)
;
if
(
!
click
)
{
return
;
}
this
.
props
.
cursorStore
.
setStoreState
(
{
remoteCursorClick
:
false
}
)
;
loop
.
request
(
"
ClickRemoteCursor
"
click
)
;
}
getInitialState
:
function
getInitialState
(
)
{
return
this
.
getStoreState
(
)
;
}
_renderFeedbackForm
:
function
_renderFeedbackForm
(
)
{
this
.
setTitle
(
mozL10n
.
get
(
"
conversation_has_ended
"
)
)
;
return
React
.
createElement
(
FeedbackView
{
onAfterFeedbackReceived
:
this
.
closeWindow
}
)
;
}
handleCallTerminated
:
function
handleCallTerminated
(
)
{
this
.
props
.
dispatcher
.
dispatch
(
new
sharedActions
.
LeaveConversation
(
)
)
;
}
render
:
function
render
(
)
{
if
(
this
.
state
.
showFeedbackForm
)
{
return
this
.
_renderFeedbackForm
(
)
;
}
switch
(
this
.
state
.
windowType
)
{
case
"
room
"
:
{
return
React
.
createElement
(
DesktopRoomConversationView
{
chatWindowDetached
:
this
.
state
.
chatWindowDetached
cursorStore
:
this
.
props
.
cursorStore
dispatcher
:
this
.
props
.
dispatcher
facebookEnabled
:
this
.
state
.
facebookEnabled
onCallTerminated
:
this
.
handleCallTerminated
roomStore
:
this
.
props
.
roomStore
}
)
;
}
case
"
failed
"
:
{
return
React
.
createElement
(
RoomFailureView
{
dispatcher
:
this
.
props
.
dispatcher
failureReason
:
FAILURE_DETAILS
.
UNKNOWN
}
)
;
}
default
:
{
return
null
;
}
}
}
}
)
;
function
init
(
)
{
var
locationHash
=
loop
.
shared
.
utils
.
locationData
(
)
.
hash
;
var
windowId
;
var
hash
=
locationHash
.
match
(
/
#
(
.
*
)
/
)
;
if
(
hash
)
{
windowId
=
hash
[
1
]
;
}
var
requests
=
[
[
"
GetAllConstants
"
]
[
"
GetAllStrings
"
]
[
"
GetLocale
"
]
[
"
GetLoopPref
"
"
ot
.
guid
"
]
[
"
GetLoopPref
"
"
feedback
.
periodSec
"
]
[
"
GetLoopPref
"
"
feedback
.
dateLastSeenSec
"
]
[
"
GetLoopPref
"
"
facebook
.
enabled
"
]
]
;
var
prefetch
=
[
[
"
GetConversationWindowData
"
windowId
]
]
;
return
loop
.
requestMulti
.
apply
(
null
requests
.
concat
(
prefetch
)
)
.
then
(
function
(
results
)
{
var
requestIdx
=
0
;
var
constants
=
results
[
requestIdx
]
;
var
stringBundle
=
results
[
+
+
requestIdx
]
;
var
locale
=
results
[
+
+
requestIdx
]
;
mozL10n
.
initialize
(
{
locale
:
locale
getStrings
:
function
getStrings
(
key
)
{
if
(
!
(
key
in
stringBundle
)
)
{
console
.
error
(
"
No
string
found
for
key
:
"
key
)
;
return
"
{
textContent
:
'
'
}
"
;
}
return
JSON
.
stringify
(
{
textContent
:
stringBundle
[
key
]
}
)
;
}
}
)
;
var
currGuid
=
results
[
+
+
requestIdx
]
;
window
.
OT
.
overrideGuidStorage
(
{
get
:
function
get
(
callback
)
{
callback
(
null
currGuid
)
;
}
set
:
function
set
(
guid
callback
)
{
var
PREF_STRING
=
32
;
currGuid
=
guid
;
loop
.
request
(
"
SetLoopPref
"
"
ot
.
guid
"
guid
PREF_STRING
)
;
callback
(
null
)
;
}
}
)
;
var
dispatcher
=
new
loop
.
Dispatcher
(
)
;
var
sdkDriver
=
new
loop
.
OTSdkDriver
(
{
constants
:
constants
isDesktop
:
true
useDataChannels
:
true
dispatcher
:
dispatcher
sdk
:
OT
}
)
;
loop
.
conversation
.
_sdkDriver
=
sdkDriver
;
var
activeRoomStore
=
new
loop
.
store
.
ActiveRoomStore
(
dispatcher
{
isDesktop
:
true
sdkDriver
:
sdkDriver
}
)
;
var
conversationAppStore
=
new
loop
.
store
.
ConversationAppStore
(
dispatcher
{
activeRoomStore
:
activeRoomStore
feedbackPeriod
:
results
[
+
+
requestIdx
]
feedbackTimestamp
:
results
[
+
+
requestIdx
]
facebookEnabled
:
results
[
+
+
requestIdx
]
}
)
;
prefetch
.
forEach
(
function
(
req
)
{
req
.
shift
(
)
;
loop
.
storeRequest
(
req
results
[
+
+
requestIdx
]
)
;
}
)
;
var
roomStore
=
new
loop
.
store
.
RoomStore
(
dispatcher
{
activeRoomStore
:
activeRoomStore
constants
:
constants
}
)
;
var
textChatStore
=
new
loop
.
store
.
TextChatStore
(
dispatcher
{
sdkDriver
:
sdkDriver
}
)
;
var
remoteCursorStore
=
new
loop
.
store
.
RemoteCursorStore
(
dispatcher
{
sdkDriver
:
sdkDriver
}
)
;
loop
.
store
.
StoreMixin
.
register
(
{
conversationAppStore
:
conversationAppStore
remoteCursorStore
:
remoteCursorStore
textChatStore
:
textChatStore
}
)
;
ReactDOM
.
render
(
React
.
createElement
(
AppControllerView
{
cursorStore
:
remoteCursorStore
dispatcher
:
dispatcher
roomStore
:
roomStore
}
)
document
.
querySelector
(
"
#
main
"
)
)
;
document
.
documentElement
.
setAttribute
(
"
lang
"
mozL10n
.
language
.
code
)
;
document
.
documentElement
.
setAttribute
(
"
dir
"
mozL10n
.
language
.
direction
)
;
document
.
body
.
setAttribute
(
"
platform
"
loop
.
shared
.
utils
.
getPlatform
(
)
)
;
dispatcher
.
dispatch
(
new
sharedActions
.
GetWindowData
(
{
windowId
:
windowId
}
)
)
;
loop
.
request
(
"
TelemetryAddValue
"
"
LOOP_ACTIVITY_COUNTER
"
constants
.
LOOP_MAU_TYPE
.
OPEN_CONVERSATION
)
;
}
)
;
}
return
{
AppControllerView
:
AppControllerView
init
:
init
_sdkDriver
:
null
}
;
}
(
document
.
mozL10n
)
;
document
.
addEventListener
(
"
DOMContentLoaded
"
loop
.
conversation
.
init
)
;
