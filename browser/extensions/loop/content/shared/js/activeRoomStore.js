var
loop
=
loop
|
|
{
}
;
loop
.
store
=
loop
.
store
|
|
{
}
;
loop
.
store
.
ROOM_STATES
=
{
INIT
:
"
room
-
init
"
GATHER
:
"
room
-
gather
"
READY
:
"
room
-
ready
"
MEDIA_WAIT
:
"
room
-
media
-
wait
"
JOINING
:
"
room
-
joining
"
JOINED
:
"
room
-
joined
"
SESSION_CONNECTED
:
"
room
-
session
-
connected
"
HAS_PARTICIPANTS
:
"
room
-
has
-
participants
"
FAILED
:
"
room
-
failed
"
FULL
:
"
room
-
full
"
ENDED
:
"
room
-
ended
"
CLOSING
:
"
room
-
closing
"
}
;
loop
.
store
.
ActiveRoomStore
=
(
function
(
)
{
"
use
strict
"
;
var
sharedActions
=
loop
.
shared
.
actions
;
var
crypto
=
loop
.
crypto
;
var
CHAT_CONTENT_TYPES
=
loop
.
shared
.
utils
.
CHAT_CONTENT_TYPES
;
var
FAILURE_DETAILS
=
loop
.
shared
.
utils
.
FAILURE_DETAILS
;
var
SCREEN_SHARE_STATES
=
loop
.
shared
.
utils
.
SCREEN_SHARE_STATES
;
var
REST_ERRNOS
=
loop
.
shared
.
utils
.
REST_ERRNOS
;
var
ROOM_STATES
=
loop
.
store
.
ROOM_STATES
;
var
ROOM_INFO_FAILURES
=
loop
.
shared
.
utils
.
ROOM_INFO_FAILURES
;
var
OPTIONAL_ROOMINFO_FIELDS
=
{
participants
:
"
participants
"
roomContextUrls
:
"
roomContextUrls
"
roomDescription
:
"
roomDescription
"
roomInfoFailure
:
"
roomInfoFailure
"
roomName
:
"
roomName
"
roomState
:
"
roomState
"
socialShareProviders
:
"
socialShareProviders
"
}
;
var
ActiveRoomStore
=
loop
.
store
.
createStore
(
{
expiresTimeFactor
:
0
.
9
actions
:
[
"
setupWindowData
"
"
fetchServerData
"
]
initialize
:
function
(
options
)
{
if
(
!
options
.
sdkDriver
)
{
throw
new
Error
(
"
Missing
option
sdkDriver
"
)
;
}
this
.
_sdkDriver
=
options
.
sdkDriver
;
this
.
_isDesktop
=
options
.
isDesktop
|
|
false
;
}
_statesToResetOnLeave
:
[
"
audioMuted
"
"
chatMessageExchanged
"
"
localSrcMediaElement
"
"
localVideoDimensions
"
"
mediaConnected
"
"
receivingScreenShare
"
"
remoteSrcMediaElement
"
"
remoteVideoDimensions
"
"
remoteVideoEnabled
"
"
screenSharingState
"
"
screenShareMediaElement
"
"
videoMuted
"
]
getInitialStoreState
:
function
(
)
{
return
{
roomState
:
ROOM_STATES
.
INIT
audioMuted
:
false
videoMuted
:
false
remoteVideoEnabled
:
false
failureReason
:
undefined
userAgentHandlesRoom
:
undefined
used
:
false
localVideoDimensions
:
{
}
remoteVideoDimensions
:
{
}
screenSharingState
:
SCREEN_SHARE_STATES
.
INACTIVE
receivingScreenShare
:
false
roomContextUrls
:
null
roomDescription
:
null
roomInfoFailure
:
null
roomName
:
null
socialShareProviders
:
null
mediaConnected
:
false
chatMessageExchanged
:
false
}
;
}
roomFailure
:
function
(
actionData
)
{
function
getReason
(
serverCode
)
{
switch
(
serverCode
)
{
case
REST_ERRNOS
.
INVALID_TOKEN
:
case
REST_ERRNOS
.
EXPIRED
:
return
FAILURE_DETAILS
.
EXPIRED_OR_INVALID
;
case
undefined
:
return
FAILURE_DETAILS
.
COULD_NOT_CONNECT
;
default
:
return
FAILURE_DETAILS
.
UNKNOWN
;
}
}
console
.
error
(
"
Error
in
state
"
+
this
.
_storeState
.
roomState
+
"
:
"
actionData
.
error
)
;
var
exitState
=
this
.
_storeState
.
roomState
!
=
=
ROOM_STATES
.
FAILED
?
this
.
_storeState
.
roomState
:
this
.
_storeState
.
failureExitState
;
this
.
setStoreState
(
{
error
:
actionData
.
error
failureReason
:
getReason
(
actionData
.
error
.
errno
)
failureExitState
:
exitState
}
)
;
this
.
_leaveRoom
(
actionData
.
error
.
errno
=
=
=
REST_ERRNOS
.
ROOM_FULL
?
ROOM_STATES
.
FULL
:
ROOM_STATES
.
FAILED
actionData
.
failedJoinRequest
)
;
}
retryAfterRoomFailure
:
function
(
)
{
if
(
this
.
_storeState
.
failureReason
=
=
=
FAILURE_DETAILS
.
EXPIRED_OR_INVALID
)
{
console
.
error
(
"
Invalid
retry
attempt
for
expired
or
invalid
url
"
)
;
return
;
}
switch
(
this
.
_storeState
.
failureExitState
)
{
case
ROOM_STATES
.
GATHER
:
this
.
dispatchAction
(
new
sharedActions
.
FetchServerData
(
{
cryptoKey
:
this
.
_storeState
.
roomCryptoKey
token
:
this
.
_storeState
.
roomToken
windowType
:
"
room
"
}
)
)
;
return
;
case
ROOM_STATES
.
INIT
:
case
ROOM_STATES
.
ENDED
:
case
ROOM_STATES
.
CLOSING
:
console
.
error
(
"
Unexpected
retry
for
exit
state
"
this
.
_storeState
.
failureExitState
)
;
return
;
default
:
this
.
joinRoom
(
)
;
return
;
}
}
_registerPostSetupActions
:
function
(
)
{
if
(
this
.
_registeredActions
)
{
return
;
}
this
.
_registeredActions
=
true
;
var
actions
=
[
"
roomFailure
"
"
retryAfterRoomFailure
"
"
updateRoomInfo
"
"
userAgentHandlesRoom
"
"
gotMediaPermission
"
"
joinRoom
"
"
joinedRoom
"
"
connectedToSdkServers
"
"
connectionFailure
"
"
setMute
"
"
screenSharingState
"
"
receivingScreenShare
"
"
remotePeerDisconnected
"
"
remotePeerConnected
"
"
windowUnload
"
"
leaveRoom
"
"
feedbackComplete
"
"
mediaStreamCreated
"
"
mediaStreamDestroyed
"
"
remoteVideoStatus
"
"
videoDimensionsChanged
"
"
startBrowserShare
"
"
endScreenShare
"
"
updateSocialShareInfo
"
"
connectionStatus
"
"
mediaConnected
"
]
;
if
(
this
.
_isDesktop
)
{
actions
.
push
(
"
receivedTextChatMessage
"
"
sendTextChatMessage
"
)
;
}
this
.
dispatcher
.
register
(
this
actions
)
;
this
.
_onUpdateListener
=
this
.
_handleRoomUpdate
.
bind
(
this
)
;
this
.
_onDeleteListener
=
this
.
_handleRoomDelete
.
bind
(
this
)
;
this
.
_onSocialShareUpdate
=
this
.
_handleSocialShareUpdate
.
bind
(
this
)
;
var
roomToken
=
this
.
_storeState
.
roomToken
;
loop
.
request
(
"
Rooms
:
PushSubscription
"
[
"
delete
:
"
+
roomToken
"
update
:
"
+
roomToken
]
)
;
loop
.
subscribe
(
"
Rooms
:
Delete
:
"
+
roomToken
this
.
_handleRoomDelete
.
bind
(
this
)
)
;
loop
.
subscribe
(
"
Rooms
:
Update
:
"
+
roomToken
this
.
_handleRoomUpdate
.
bind
(
this
)
)
;
loop
.
subscribe
(
"
SocialProvidersChanged
"
this
.
_onSocialShareUpdate
)
;
}
setupWindowData
:
function
(
actionData
)
{
if
(
actionData
.
type
!
=
=
"
room
"
)
{
return
Promise
.
resolve
(
)
;
}
this
.
setStoreState
(
{
roomState
:
ROOM_STATES
.
GATHER
roomToken
:
actionData
.
roomToken
windowId
:
actionData
.
windowId
}
)
;
this
.
_registerPostSetupActions
(
)
;
return
loop
.
requestMulti
(
[
"
Rooms
:
Get
"
actionData
.
roomToken
]
[
"
GetSocialShareProviders
"
]
)
.
then
(
function
(
results
)
{
var
room
=
results
[
0
]
;
var
socialShareProviders
=
results
[
1
]
;
if
(
room
.
isError
)
{
this
.
dispatchAction
(
new
sharedActions
.
RoomFailure
(
{
error
:
room
failedJoinRequest
:
false
}
)
)
;
return
;
}
this
.
dispatchAction
(
new
sharedActions
.
UpdateRoomInfo
(
{
participants
:
room
.
participants
roomContextUrls
:
room
.
decryptedContext
.
urls
roomDescription
:
room
.
decryptedContext
.
description
roomName
:
room
.
decryptedContext
.
roomName
roomState
:
ROOM_STATES
.
READY
roomUrl
:
room
.
roomUrl
socialShareProviders
:
socialShareProviders
}
)
)
;
this
.
dispatchAction
(
new
sharedActions
.
JoinRoom
(
)
)
;
}
.
bind
(
this
)
)
;
}
fetchServerData
:
function
(
actionData
)
{
if
(
actionData
.
windowType
!
=
=
"
room
"
)
{
return
Promise
.
resolve
(
)
;
}
this
.
setStoreState
(
{
roomState
:
ROOM_STATES
.
GATHER
roomToken
:
actionData
.
token
standalone
:
true
}
)
;
this
.
_registerPostSetupActions
(
)
;
var
dataPromise
=
this
.
_getRoomDataForStandalone
(
actionData
.
cryptoKey
)
;
var
userAgentHandlesPromise
=
this
.
_promiseDetectUserAgentHandles
(
)
;
return
Promise
.
all
(
[
dataPromise
userAgentHandlesPromise
]
)
.
then
(
function
(
results
)
{
results
.
forEach
(
function
(
result
)
{
this
.
dispatcher
.
dispatch
(
result
)
;
}
.
bind
(
this
)
)
;
}
.
bind
(
this
)
)
;
}
_getRoomDataForStandalone
:
function
(
roomCryptoKey
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
loop
.
request
(
"
Rooms
:
Get
"
this
.
_storeState
.
roomToken
)
.
then
(
function
(
result
)
{
if
(
result
.
isError
)
{
resolve
(
new
sharedActions
.
RoomFailure
(
{
error
:
result
failedJoinRequest
:
false
}
)
)
;
return
;
}
var
roomInfoData
=
new
sharedActions
.
UpdateRoomInfo
(
{
roomState
:
ROOM_STATES
.
READY
roomUrl
:
result
.
roomUrl
}
)
;
if
(
!
result
.
context
&
&
!
result
.
roomName
)
{
roomInfoData
.
roomInfoFailure
=
ROOM_INFO_FAILURES
.
NO_DATA
;
resolve
(
roomInfoData
)
;
return
;
}
if
(
result
.
roomName
&
&
!
result
.
context
)
{
roomInfoData
.
roomName
=
result
.
roomName
;
resolve
(
roomInfoData
)
;
return
;
}
if
(
!
crypto
.
isSupported
(
)
)
{
roomInfoData
.
roomInfoFailure
=
ROOM_INFO_FAILURES
.
WEB_CRYPTO_UNSUPPORTED
;
resolve
(
roomInfoData
)
;
return
;
}
if
(
!
roomCryptoKey
)
{
roomInfoData
.
roomInfoFailure
=
ROOM_INFO_FAILURES
.
NO_CRYPTO_KEY
;
resolve
(
roomInfoData
)
;
return
;
}
crypto
.
decryptBytes
(
roomCryptoKey
result
.
context
.
value
)
.
then
(
function
(
decryptedResult
)
{
var
realResult
=
JSON
.
parse
(
decryptedResult
)
;
roomInfoData
.
roomDescription
=
realResult
.
description
;
roomInfoData
.
roomContextUrls
=
realResult
.
urls
;
roomInfoData
.
roomName
=
realResult
.
roomName
;
resolve
(
roomInfoData
)
;
}
function
(
error
)
{
roomInfoData
.
roomInfoFailure
=
ROOM_INFO_FAILURES
.
DECRYPT_FAILED
;
resolve
(
roomInfoData
)
;
}
)
;
}
.
bind
(
this
)
)
;
}
.
bind
(
this
)
)
;
}
_promiseDetectUserAgentHandles
:
function
(
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
function
resolveWithNotHandlingResponse
(
)
{
resolve
(
new
sharedActions
.
UserAgentHandlesRoom
(
{
handlesRoom
:
false
}
)
)
;
}
if
(
!
loop
.
shared
.
utils
.
isFirefox
(
navigator
.
userAgent
)
)
{
resolveWithNotHandlingResponse
(
)
;
return
;
}
var
timer
=
setTimeout
(
resolveWithNotHandlingResponse
250
)
;
var
webChannelListenerFunc
;
function
webChannelListener
(
e
)
{
if
(
e
.
detail
.
id
!
=
=
"
loop
-
link
-
clicker
"
)
{
return
;
}
clearTimeout
(
timer
)
;
window
.
removeEventListener
(
"
WebChannelMessageToContent
"
webChannelListenerFunc
)
;
resolve
(
new
sharedActions
.
UserAgentHandlesRoom
(
{
handlesRoom
:
!
!
e
.
detail
.
message
&
&
e
.
detail
.
message
.
response
}
)
)
;
}
webChannelListenerFunc
=
webChannelListener
.
bind
(
this
)
;
window
.
addEventListener
(
"
WebChannelMessageToContent
"
webChannelListenerFunc
)
;
window
.
dispatchEvent
(
new
window
.
CustomEvent
(
"
WebChannelMessageToChrome
"
{
detail
:
{
id
:
"
loop
-
link
-
clicker
"
message
:
{
command
:
"
checkWillOpenRoom
"
roomToken
:
this
.
_storeState
.
roomToken
}
}
}
)
)
;
}
.
bind
(
this
)
)
;
}
updateRoomInfo
:
function
(
actionData
)
{
var
newState
=
{
roomUrl
:
actionData
.
roomUrl
}
;
Object
.
keys
(
OPTIONAL_ROOMINFO_FIELDS
)
.
forEach
(
function
(
field
)
{
if
(
actionData
[
field
]
!
=
=
undefined
)
{
newState
[
OPTIONAL_ROOMINFO_FIELDS
[
field
]
]
=
actionData
[
field
]
;
}
}
)
;
this
.
setStoreState
(
newState
)
;
}
userAgentHandlesRoom
:
function
(
actionData
)
{
this
.
setStoreState
(
{
userAgentHandlesRoom
:
actionData
.
handlesRoom
}
)
;
}
updateSocialShareInfo
:
function
(
actionData
)
{
this
.
setStoreState
(
{
socialShareProviders
:
actionData
.
socialShareProviders
}
)
;
}
_handleRoomUpdate
:
function
(
roomData
)
{
this
.
dispatchAction
(
new
sharedActions
.
UpdateRoomInfo
(
{
roomContextUrls
:
roomData
.
decryptedContext
.
urls
roomDescription
:
roomData
.
decryptedContext
.
description
participants
:
roomData
.
participants
roomName
:
roomData
.
decryptedContext
.
roomName
roomUrl
:
roomData
.
roomUrl
}
)
)
;
}
_handleRoomDelete
:
function
(
roomData
)
{
this
.
_sdkDriver
.
forceDisconnectAll
(
function
(
)
{
window
.
close
(
)
;
}
)
;
}
_handleSocialShareUpdate
:
function
(
)
{
loop
.
request
(
"
GetSocialShareProviders
"
)
.
then
(
function
(
result
)
{
this
.
dispatchAction
(
new
sharedActions
.
UpdateSocialShareInfo
(
{
socialShareProviders
:
result
}
)
)
;
}
.
bind
(
this
)
)
;
}
_checkDevicesAndJoinRoom
:
function
(
)
{
loop
.
shared
.
utils
.
hasAudioOrVideoDevices
(
function
(
hasDevices
)
{
if
(
hasDevices
)
{
this
.
setStoreState
(
{
roomState
:
ROOM_STATES
.
MEDIA_WAIT
}
)
;
}
else
{
this
.
dispatchAction
(
new
sharedActions
.
ConnectionFailure
(
{
reason
:
FAILURE_DETAILS
.
NO_MEDIA
}
)
)
;
}
}
.
bind
(
this
)
)
;
}
_handoffRoomJoin
:
function
(
)
{
var
channelListener
;
function
handleRoomJoinResponse
(
e
)
{
if
(
e
.
detail
.
id
!
=
=
"
loop
-
link
-
clicker
"
)
{
return
;
}
window
.
removeEventListener
(
"
WebChannelMessageToContent
"
channelListener
)
;
if
(
!
e
.
detail
.
message
|
|
!
e
.
detail
.
message
.
response
)
{
console
.
error
(
"
Firefox
didn
'
t
handle
room
it
said
it
could
.
"
)
;
}
else
{
if
(
e
.
detail
.
message
.
alreadyOpen
)
{
this
.
dispatcher
.
dispatch
(
new
sharedActions
.
ConnectionFailure
(
{
reason
:
FAILURE_DETAILS
.
ROOM_ALREADY_OPEN
}
)
)
;
}
else
{
this
.
dispatcher
.
dispatch
(
new
sharedActions
.
JoinedRoom
(
{
apiKey
:
"
"
sessionToken
:
"
"
sessionId
:
"
"
expires
:
0
}
)
)
;
}
}
}
channelListener
=
handleRoomJoinResponse
.
bind
(
this
)
;
window
.
addEventListener
(
"
WebChannelMessageToContent
"
channelListener
)
;
window
.
dispatchEvent
(
new
window
.
CustomEvent
(
"
WebChannelMessageToChrome
"
{
detail
:
{
id
:
"
loop
-
link
-
clicker
"
message
:
{
command
:
"
openRoom
"
roomToken
:
this
.
_storeState
.
roomToken
}
}
}
)
)
;
}
joinRoom
:
function
(
)
{
if
(
this
.
getStoreState
(
)
.
failureReason
)
{
this
.
setStoreState
(
{
failureReason
:
undefined
}
)
;
}
if
(
this
.
_storeState
.
standalone
&
&
this
.
_storeState
.
userAgentHandlesRoom
)
{
this
.
dispatcher
.
dispatch
(
new
sharedActions
.
MetricsLogJoinRoom
(
{
userAgentHandledRoom
:
true
ownRoom
:
true
}
)
)
;
this
.
_handoffRoomJoin
(
)
;
return
;
}
this
.
dispatcher
.
dispatch
(
new
sharedActions
.
MetricsLogJoinRoom
(
{
userAgentHandledRoom
:
false
}
)
)
;
this
.
_checkDevicesAndJoinRoom
(
)
;
}
gotMediaPermission
:
function
(
)
{
this
.
setStoreState
(
{
roomState
:
ROOM_STATES
.
JOINING
}
)
;
loop
.
request
(
"
Rooms
:
Join
"
this
.
_storeState
.
roomToken
)
.
then
(
function
(
result
)
{
if
(
result
.
isError
)
{
this
.
dispatchAction
(
new
sharedActions
.
RoomFailure
(
{
error
:
result
failedJoinRequest
:
true
}
)
)
;
return
;
}
this
.
dispatchAction
(
new
sharedActions
.
JoinedRoom
(
{
apiKey
:
result
.
apiKey
sessionToken
:
result
.
sessionToken
sessionId
:
result
.
sessionId
expires
:
result
.
expires
}
)
)
;
}
.
bind
(
this
)
)
;
}
joinedRoom
:
function
(
actionData
)
{
if
(
this
.
_storeState
.
standalone
&
&
this
.
_storeState
.
userAgentHandlesRoom
)
{
this
.
setStoreState
(
{
roomState
:
ROOM_STATES
.
JOINED
}
)
;
return
;
}
this
.
setStoreState
(
{
apiKey
:
actionData
.
apiKey
sessionToken
:
actionData
.
sessionToken
sessionId
:
actionData
.
sessionId
roomState
:
ROOM_STATES
.
JOINED
}
)
;
this
.
_setRefreshTimeout
(
actionData
.
expires
)
;
actionData
.
sendTwoWayMediaTelemetry
=
this
.
_isDesktop
;
this
.
_sdkDriver
.
connectSession
(
actionData
)
;
loop
.
request
(
"
AddConversationContext
"
this
.
_storeState
.
windowId
actionData
.
sessionId
"
"
)
;
}
connectedToSdkServers
:
function
(
)
{
this
.
setStoreState
(
{
roomState
:
ROOM_STATES
.
SESSION_CONNECTED
}
)
;
}
connectionFailure
:
function
(
actionData
)
{
var
exitState
=
this
.
_storeState
.
roomState
=
=
=
ROOM_STATES
.
FAILED
?
this
.
_storeState
.
failureExitState
:
this
.
_storeState
.
roomState
;
this
.
setStoreState
(
{
failureReason
:
actionData
.
reason
failureExitState
:
exitState
}
)
;
this
.
_leaveRoom
(
ROOM_STATES
.
FAILED
)
;
}
setMute
:
function
(
actionData
)
{
var
muteState
=
{
}
;
muteState
[
actionData
.
type
+
"
Muted
"
]
=
!
actionData
.
enabled
;
this
.
setStoreState
(
muteState
)
;
}
mediaStreamCreated
:
function
(
actionData
)
{
if
(
actionData
.
isLocal
)
{
this
.
setStoreState
(
{
localVideoEnabled
:
actionData
.
hasVideo
localSrcMediaElement
:
actionData
.
srcMediaElement
}
)
;
return
;
}
this
.
setStoreState
(
{
remoteVideoEnabled
:
actionData
.
hasVideo
remoteSrcMediaElement
:
actionData
.
srcMediaElement
}
)
;
}
mediaStreamDestroyed
:
function
(
actionData
)
{
if
(
actionData
.
isLocal
)
{
this
.
setStoreState
(
{
localSrcMediaElement
:
null
}
)
;
return
;
}
this
.
setStoreState
(
{
remoteSrcMediaElement
:
null
}
)
;
}
remoteVideoStatus
:
function
(
actionData
)
{
this
.
setStoreState
(
{
remoteVideoEnabled
:
actionData
.
videoEnabled
}
)
;
}
mediaConnected
:
function
(
)
{
this
.
setStoreState
(
{
mediaConnected
:
true
}
)
;
}
screenSharingState
:
function
(
actionData
)
{
this
.
setStoreState
(
{
screenSharingState
:
actionData
.
state
}
)
;
loop
.
request
(
"
SetScreenShareState
"
this
.
getStoreState
(
)
.
windowId
actionData
.
state
=
=
=
SCREEN_SHARE_STATES
.
ACTIVE
)
;
}
receivingScreenShare
:
function
(
actionData
)
{
if
(
!
actionData
.
receiving
&
&
this
.
getStoreState
(
)
.
remoteVideoDimensions
.
screen
)
{
var
newDimensions
=
_
.
extend
(
this
.
getStoreState
(
)
.
remoteVideoDimensions
)
;
delete
newDimensions
.
screen
;
this
.
setStoreState
(
{
receivingScreenShare
:
actionData
.
receiving
remoteVideoDimensions
:
newDimensions
screenShareMediaElement
:
null
}
)
;
}
else
{
this
.
setStoreState
(
{
receivingScreenShare
:
actionData
.
receiving
screenShareMediaElement
:
actionData
.
srcMediaElement
?
actionData
.
srcMediaElement
:
null
}
)
;
}
}
_handleSwitchBrowserShare
:
function
(
windowId
)
{
if
(
Array
.
isArray
(
windowId
)
)
{
windowId
=
windowId
[
0
]
;
}
if
(
!
windowId
)
{
return
;
}
if
(
windowId
.
isError
)
{
console
.
error
(
"
Error
getting
the
windowId
:
"
+
windowId
.
message
)
;
this
.
dispatchAction
(
new
sharedActions
.
ScreenSharingState
(
{
state
:
SCREEN_SHARE_STATES
.
INACTIVE
}
)
)
;
return
;
}
var
screenSharingState
=
this
.
getStoreState
(
)
.
screenSharingState
;
if
(
screenSharingState
=
=
=
SCREEN_SHARE_STATES
.
PENDING
)
{
var
options
=
{
videoSource
:
"
browser
"
constraints
:
{
browserWindow
:
windowId
scrollWithPage
:
true
}
}
;
this
.
_sdkDriver
.
startScreenShare
(
options
)
;
}
else
if
(
screenSharingState
=
=
=
SCREEN_SHARE_STATES
.
ACTIVE
)
{
this
.
_sdkDriver
.
switchAcquiredWindow
(
windowId
)
;
}
else
{
console
.
error
(
"
Unexpectedly
received
windowId
for
browser
sharing
when
pending
"
)
;
}
}
startBrowserShare
:
function
(
actionData
)
{
this
.
setStoreState
(
{
screenSharingState
:
SCREEN_SHARE_STATES
.
PENDING
}
)
;
this
.
dispatchAction
(
new
sharedActions
.
ScreenSharingState
(
{
state
:
SCREEN_SHARE_STATES
.
PENDING
}
)
)
;
var
options
=
{
videoSource
:
"
browser
"
}
;
this
.
_browserSharingListener
=
this
.
_handleSwitchBrowserShare
.
bind
(
this
)
;
loop
.
request
(
"
AddBrowserSharingListener
"
this
.
getStoreState
(
)
.
windowId
)
.
then
(
this
.
_browserSharingListener
)
;
loop
.
subscribe
(
"
BrowserSwitch
"
this
.
_browserSharingListener
)
;
}
endScreenShare
:
function
(
)
{
if
(
this
.
_browserSharingListener
)
{
loop
.
request
(
"
RemoveBrowserSharingListener
"
)
;
loop
.
unsubscribe
(
"
BrowserSwitch
"
this
.
_browserSharingListener
)
;
this
.
_browserSharingListener
=
null
;
}
if
(
this
.
_sdkDriver
.
endScreenShare
(
)
)
{
this
.
dispatchAction
(
new
sharedActions
.
ScreenSharingState
(
{
state
:
SCREEN_SHARE_STATES
.
INACTIVE
}
)
)
;
}
}
remotePeerConnected
:
function
(
)
{
this
.
setStoreState
(
{
roomState
:
ROOM_STATES
.
HAS_PARTICIPANTS
used
:
true
}
)
;
}
remotePeerDisconnected
:
function
(
)
{
var
participants
=
this
.
getStoreState
(
"
participants
"
)
;
if
(
participants
)
{
participants
=
participants
.
filter
(
function
(
participant
)
{
return
participant
.
owner
;
}
)
;
}
this
.
setStoreState
(
{
mediaConnected
:
false
participants
:
participants
roomState
:
ROOM_STATES
.
SESSION_CONNECTED
remoteSrcMediaElement
:
null
}
)
;
}
connectionStatus
:
function
(
actionData
)
{
loop
.
request
(
"
Rooms
:
SendConnectionStatus
"
this
.
getStoreState
(
"
roomToken
"
)
this
.
getStoreState
(
"
sessionToken
"
)
actionData
)
;
}
windowUnload
:
function
(
)
{
this
.
_leaveRoom
(
ROOM_STATES
.
CLOSING
)
;
if
(
!
this
.
_onUpdateListener
)
{
return
;
}
var
roomToken
=
this
.
getStoreState
(
)
.
roomToken
;
loop
.
unsubscribe
(
"
Rooms
:
Update
:
"
+
roomToken
this
.
_onUpdateListener
)
;
loop
.
unsubscribe
(
"
Rooms
:
Delete
:
"
+
roomToken
this
.
_onDeleteListener
)
;
loop
.
unsubscribe
(
"
SocialProvidersChanged
"
this
.
_onSocialProvidersUpdate
)
;
delete
this
.
_onUpdateListener
;
delete
this
.
_onDeleteListener
;
delete
this
.
_onShareWidgetUpdate
;
delete
this
.
_onSocialProvidersUpdate
;
}
leaveRoom
:
function
(
)
{
this
.
_leaveRoom
(
ROOM_STATES
.
ENDED
)
;
}
_setRefreshTimeout
:
function
(
expireTime
)
{
this
.
_timeout
=
setTimeout
(
this
.
_refreshMembership
.
bind
(
this
)
expireTime
*
this
.
expiresTimeFactor
*
1000
)
;
}
_refreshMembership
:
function
(
)
{
loop
.
request
(
"
Rooms
:
RefreshMembership
"
this
.
_storeState
.
roomToken
this
.
_storeState
.
sessionToken
)
.
then
(
function
(
result
)
{
if
(
result
.
isError
)
{
this
.
dispatchAction
(
new
sharedActions
.
RoomFailure
(
{
error
:
result
failedJoinRequest
:
false
}
)
)
;
return
;
}
this
.
_setRefreshTimeout
(
result
.
expires
)
;
}
.
bind
(
this
)
)
;
}
_leaveRoom
:
function
(
nextState
failedJoinRequest
)
{
if
(
this
.
_storeState
.
standalone
&
&
this
.
_storeState
.
userAgentHandlesRoom
)
{
this
.
setStoreState
(
{
roomState
:
nextState
}
)
;
return
;
}
if
(
loop
.
standaloneMedia
)
{
loop
.
standaloneMedia
.
multiplexGum
.
reset
(
)
;
}
var
requests
=
[
[
"
SetScreenShareState
"
this
.
getStoreState
(
)
.
windowId
false
]
]
;
if
(
this
.
_browserSharingListener
)
{
requests
.
push
(
[
"
RemoveBrowserSharingListener
"
]
)
;
loop
.
unsubscribe
(
"
BrowserSwitch
"
this
.
_browserSharingListener
)
;
this
.
_browserSharingListener
=
null
;
}
this
.
_sdkDriver
.
disconnectSession
(
)
;
var
originalStoreState
=
this
.
getInitialStoreState
(
)
;
var
newStoreState
=
{
}
;
this
.
_statesToResetOnLeave
.
forEach
(
function
(
state
)
{
newStoreState
[
state
]
=
originalStoreState
[
state
]
;
}
)
;
this
.
setStoreState
(
newStoreState
)
;
if
(
this
.
_timeout
)
{
clearTimeout
(
this
.
_timeout
)
;
delete
this
.
_timeout
;
}
if
(
!
failedJoinRequest
&
&
(
this
.
_storeState
.
roomState
=
=
=
ROOM_STATES
.
JOINING
|
|
this
.
_storeState
.
roomState
=
=
=
ROOM_STATES
.
JOINED
|
|
this
.
_storeState
.
roomState
=
=
=
ROOM_STATES
.
SESSION_CONNECTED
|
|
this
.
_storeState
.
roomState
=
=
=
ROOM_STATES
.
HAS_PARTICIPANTS
)
)
{
requests
.
push
(
[
"
Rooms
:
Leave
"
this
.
_storeState
.
roomToken
this
.
_storeState
.
sessionToken
]
)
;
}
loop
.
requestMulti
.
apply
(
null
requests
)
;
this
.
setStoreState
(
{
roomState
:
nextState
}
)
;
}
feedbackComplete
:
function
(
)
{
this
.
setStoreState
(
{
roomState
:
ROOM_STATES
.
READY
used
:
false
}
)
;
}
videoDimensionsChanged
:
function
(
actionData
)
{
var
storeProp
=
(
actionData
.
isLocal
?
"
local
"
:
"
remote
"
)
+
"
VideoDimensions
"
;
var
nextState
=
{
}
;
nextState
[
storeProp
]
=
this
.
getStoreState
(
)
[
storeProp
]
;
nextState
[
storeProp
]
[
actionData
.
videoType
]
=
actionData
.
dimensions
;
this
.
setStoreState
(
nextState
)
;
}
_handleTextChatMessage
:
function
(
actionData
)
{
if
(
!
this
.
_isDesktop
|
|
this
.
getStoreState
(
)
.
chatMessageExchanged
|
|
actionData
.
contentType
!
=
=
CHAT_CONTENT_TYPES
.
TEXT
)
{
return
;
}
this
.
setStoreState
(
{
chatMessageExchanged
:
true
}
)
;
this
.
dispatcher
.
unregister
(
this
[
"
receivedTextChatMessage
"
"
sendTextChatMessage
"
]
)
;
loop
.
request
(
"
TelemetryAddValue
"
"
LOOP_ROOM_SESSION_WITHCHAT
"
1
)
;
}
receivedTextChatMessage
:
function
(
actionData
)
{
this
.
_handleTextChatMessage
(
actionData
)
;
}
sendTextChatMessage
:
function
(
actionData
)
{
this
.
_handleTextChatMessage
(
actionData
)
;
}
}
)
;
return
ActiveRoomStore
;
}
)
(
)
;
