var
loop
=
loop
|
|
{
}
;
loop
.
shared
=
loop
.
shared
|
|
{
}
;
loop
.
shared
.
views
=
(
function
(
_
mozL10n
)
{
"
use
strict
"
;
var
sharedActions
=
loop
.
shared
.
actions
;
var
sharedModels
=
loop
.
shared
.
models
;
var
sharedMixins
=
loop
.
shared
.
mixins
;
var
HangUpControlButton
=
React
.
createClass
(
{
displayName
:
"
HangUpControlButton
"
mixins
:
[
React
.
addons
.
PureRenderMixin
]
propTypes
:
{
action
:
React
.
PropTypes
.
func
.
isRequired
title
:
React
.
PropTypes
.
string
}
handleClick
:
function
(
)
{
this
.
props
.
action
(
)
;
}
render
:
function
(
)
{
return
(
React
.
createElement
(
"
button
"
{
className
:
"
btn
btn
-
hangup
"
onClick
:
this
.
handleClick
title
:
this
.
props
.
title
}
)
)
;
}
}
)
;
var
MediaControlButton
=
React
.
createClass
(
{
displayName
:
"
MediaControlButton
"
propTypes
:
{
action
:
React
.
PropTypes
.
func
.
isRequired
enabled
:
React
.
PropTypes
.
bool
.
isRequired
scope
:
React
.
PropTypes
.
string
.
isRequired
title
:
React
.
PropTypes
.
string
type
:
React
.
PropTypes
.
string
.
isRequired
visible
:
React
.
PropTypes
.
bool
.
isRequired
}
getDefaultProps
:
function
(
)
{
return
{
enabled
:
true
visible
:
true
}
;
}
handleClick
:
function
(
)
{
this
.
props
.
action
(
)
;
}
_getClasses
:
function
(
)
{
var
cx
=
classNames
;
var
classesObj
=
{
"
btn
"
:
true
"
media
-
control
"
:
true
"
transparent
-
button
"
:
true
"
local
-
media
"
:
this
.
props
.
scope
=
=
=
"
local
"
"
muted
"
:
!
this
.
props
.
enabled
"
hide
"
:
!
this
.
props
.
visible
}
;
classesObj
[
"
btn
-
mute
-
"
+
this
.
props
.
type
]
=
true
;
return
cx
(
classesObj
)
;
}
_getTitle
:
function
(
enabled
)
{
if
(
this
.
props
.
title
)
{
return
this
.
props
.
title
;
}
var
prefix
=
this
.
props
.
enabled
?
"
mute
"
:
"
unmute
"
;
var
suffix
=
(
this
.
props
.
type
=
=
=
"
video
"
)
?
"
button_title2
"
:
"
button_title
"
;
var
msgId
=
[
prefix
this
.
props
.
scope
this
.
props
.
type
suffix
]
.
join
(
"
_
"
)
;
return
mozL10n
.
get
(
msgId
)
;
}
render
:
function
(
)
{
return
(
React
.
createElement
(
"
button
"
{
className
:
this
.
_getClasses
(
)
onClick
:
this
.
handleClick
title
:
this
.
_getTitle
(
)
}
)
)
;
}
}
)
;
var
SettingsControlButton
=
React
.
createClass
(
{
displayName
:
"
SettingsControlButton
"
propTypes
:
{
menuBelow
:
React
.
PropTypes
.
bool
menuItems
:
React
.
PropTypes
.
array
}
mixins
:
[
sharedMixins
.
DropdownMenuMixin
(
)
React
.
addons
.
PureRenderMixin
]
getDefaultProps
:
function
(
)
{
return
{
menuBelow
:
false
}
;
}
_repositionMenu
:
function
(
)
{
if
(
this
.
refs
.
menu
&
&
this
.
state
.
showMenu
)
{
var
menuNode
=
this
.
refs
.
menu
&
&
this
.
refs
.
menu
.
getDOMNode
(
)
;
if
(
menuNode
)
{
var
boundOffset
=
4
;
var
menuNodeRect
=
menuNode
.
getBoundingClientRect
(
)
;
var
menuComputedStyle
=
window
.
getComputedStyle
(
menuNode
)
;
var
documentBody
=
this
.
getDOMNode
(
)
.
ownerDocument
.
body
;
var
bodyRect
=
documentBody
.
getBoundingClientRect
(
)
;
var
menuLeft
=
parseFloat
(
menuNodeRect
.
left
)
;
var
menuRight
=
parseFloat
(
menuNodeRect
.
right
)
;
var
bodyRight
=
parseFloat
(
bodyRect
.
right
)
;
menuNode
.
style
.
left
=
"
auto
"
;
if
(
menuLeft
<
-
boundOffset
)
{
menuNode
.
style
.
right
=
(
parseFloat
(
menuComputedStyle
.
right
)
+
menuLeft
-
boundOffset
)
+
"
px
"
;
}
if
(
menuRight
>
bodyRight
-
boundOffset
)
{
menuNode
.
style
.
right
=
(
parseFloat
(
menuComputedStyle
.
right
)
+
(
menuRight
-
bodyRight
)
+
boundOffset
)
+
"
px
"
;
}
}
}
}
getHandleToggleEdit
:
function
(
editItem
)
{
return
function
_handleToglleEdit
(
event
)
{
event
.
preventDefault
(
)
;
if
(
editItem
.
onClick
)
{
editItem
.
onClick
(
!
editItem
.
enabled
)
;
}
}
;
}
handleHelpEntry
:
function
(
event
)
{
event
.
preventDefault
(
)
;
loop
.
request
(
"
GetLoopPref
"
"
support_url
"
)
.
then
(
function
(
helloSupportUrl
)
{
loop
.
request
(
"
OpenURL
"
helloSupportUrl
)
;
}
)
;
}
getItemInfo
:
function
(
menuItem
)
{
var
cx
=
classNames
;
switch
(
menuItem
.
id
)
{
case
"
help
"
:
return
{
cssClasses
:
"
dropdown
-
menu
-
item
"
handler
:
this
.
handleHelpEntry
label
:
mozL10n
.
get
(
"
help_label
"
)
}
;
case
"
edit
"
:
return
{
cssClasses
:
cx
(
{
"
dropdown
-
menu
-
item
"
:
true
"
entry
-
settings
-
edit
"
:
true
"
hide
"
:
!
menuItem
.
visible
}
)
handler
:
this
.
getHandleToggleEdit
(
menuItem
)
label
:
mozL10n
.
get
(
menuItem
.
enabled
?
"
conversation_settings_menu_edit_context
"
:
"
conversation_settings_menu_hide_context
"
)
scope
:
"
local
"
type
:
"
edit
"
}
;
default
:
console
.
error
(
"
Invalid
menu
item
"
menuItem
)
;
return
null
;
}
}
generateMenuItem
:
function
(
menuItem
)
{
var
itemInfo
=
this
.
getItemInfo
(
menuItem
)
;
if
(
!
itemInfo
)
{
return
null
;
}
return
(
React
.
createElement
(
"
li
"
{
className
:
itemInfo
.
cssClasses
key
:
menuItem
.
id
onClick
:
itemInfo
.
handler
scope
:
itemInfo
.
scope
|
|
"
"
type
:
itemInfo
.
type
|
|
"
"
}
itemInfo
.
label
)
)
;
}
render
:
function
(
)
{
if
(
!
this
.
props
.
menuItems
|
|
!
this
.
props
.
menuItems
.
length
)
{
return
null
;
}
var
menuItemRows
=
this
.
props
.
menuItems
.
map
(
this
.
generateMenuItem
)
.
filter
(
function
(
item
)
{
return
item
;
}
)
;
if
(
!
menuItemRows
|
|
!
menuItemRows
.
length
)
{
return
null
;
}
var
cx
=
classNames
;
var
settingsDropdownMenuClasses
=
cx
(
{
"
settings
-
menu
"
:
true
"
dropdown
-
menu
"
:
true
"
menu
-
below
"
:
this
.
props
.
menuBelow
"
hide
"
:
!
this
.
state
.
showMenu
}
)
;
return
(
React
.
createElement
(
"
div
"
{
className
:
"
settings
-
control
"
}
React
.
createElement
(
"
button
"
{
className
:
"
btn
btn
-
settings
transparent
-
button
"
onClick
:
this
.
toggleDropdownMenu
ref
:
"
anchor
"
title
:
mozL10n
.
get
(
"
settings_menu_button_tooltip
"
)
}
)
React
.
createElement
(
"
ul
"
{
className
:
settingsDropdownMenuClasses
ref
:
"
menu
"
}
menuItemRows
)
)
)
;
}
}
)
;
var
ConversationToolbar
=
React
.
createClass
(
{
displayName
:
"
ConversationToolbar
"
getDefaultProps
:
function
(
)
{
return
{
video
:
{
enabled
:
true
visible
:
true
}
audio
:
{
enabled
:
true
visible
:
true
}
settingsMenuItems
:
null
showHangup
:
true
}
;
}
getInitialState
:
function
(
)
{
return
{
idle
:
false
}
;
}
propTypes
:
{
audio
:
React
.
PropTypes
.
object
.
isRequired
dispatcher
:
React
.
PropTypes
.
instanceOf
(
loop
.
Dispatcher
)
.
isRequired
hangup
:
React
.
PropTypes
.
func
.
isRequired
publishStream
:
React
.
PropTypes
.
func
.
isRequired
settingsMenuItems
:
React
.
PropTypes
.
array
show
:
React
.
PropTypes
.
bool
.
isRequired
showHangup
:
React
.
PropTypes
.
bool
video
:
React
.
PropTypes
.
object
.
isRequired
}
handleClickHangup
:
function
(
)
{
this
.
props
.
hangup
(
)
;
}
handleToggleVideo
:
function
(
)
{
this
.
props
.
publishStream
(
"
video
"
!
this
.
props
.
video
.
enabled
)
;
}
handleToggleAudio
:
function
(
)
{
this
.
props
.
publishStream
(
"
audio
"
!
this
.
props
.
audio
.
enabled
)
;
}
componentDidMount
:
function
(
)
{
this
.
userActivity
=
false
;
this
.
startIdleCountDown
(
)
;
document
.
body
.
addEventListener
(
"
mousemove
"
this
.
_onBodyMouseMove
)
;
}
componentWillUnmount
:
function
(
)
{
clearTimeout
(
this
.
inactivityTimeout
)
;
clearInterval
(
this
.
inactivityPollInterval
)
;
document
.
body
.
removeEventListener
(
"
mousemove
"
this
.
_onBodyMouseMove
)
;
}
_onBodyMouseMove
:
function
(
)
{
if
(
this
.
state
.
idle
)
{
this
.
setState
(
{
idle
:
false
}
)
;
this
.
startIdleCountDown
(
)
;
}
else
{
this
.
userActivity
=
true
;
}
}
checkUserActivity
:
function
(
)
{
this
.
inactivityPollInterval
=
setInterval
(
function
(
)
{
if
(
this
.
userActivity
)
{
this
.
userActivity
=
false
;
this
.
restartIdleCountDown
(
)
;
}
}
.
bind
(
this
)
4000
)
;
}
restartIdleCountDown
:
function
(
)
{
clearTimeout
(
this
.
inactivityTimeout
)
;
this
.
startIdleCountDown
(
)
;
}
startIdleCountDown
:
function
(
)
{
this
.
checkUserActivity
(
)
;
this
.
inactivityTimeout
=
setTimeout
(
function
(
)
{
this
.
setState
(
{
idle
:
true
}
)
;
clearInterval
(
this
.
inactivityPollInterval
)
;
}
.
bind
(
this
)
6000
)
;
}
render
:
function
(
)
{
if
(
!
this
.
props
.
show
)
{
return
null
;
}
var
cx
=
classNames
;
var
conversationToolbarCssClasses
=
cx
(
{
"
conversation
-
toolbar
"
:
true
"
idle
"
:
this
.
state
.
idle
}
)
;
var
showButtons
=
this
.
props
.
video
.
visible
|
|
this
.
props
.
audio
.
visible
;
var
mediaButtonGroupCssClasses
=
cx
(
{
"
conversation
-
toolbar
-
media
-
btn
-
group
-
box
"
:
true
"
hide
"
:
!
showButtons
}
)
;
return
(
React
.
createElement
(
"
ul
"
{
className
:
conversationToolbarCssClasses
}
this
.
props
.
showHangup
&
&
showButtons
?
React
.
createElement
(
"
li
"
{
className
:
"
conversation
-
toolbar
-
btn
-
box
btn
-
hangup
-
entry
"
}
React
.
createElement
(
HangUpControlButton
{
action
:
this
.
handleClickHangup
title
:
mozL10n
.
get
(
"
rooms_leave_button_label
"
)
}
)
)
:
null
React
.
createElement
(
"
li
"
{
className
:
"
conversation
-
toolbar
-
btn
-
box
"
}
React
.
createElement
(
"
div
"
{
className
:
mediaButtonGroupCssClasses
}
React
.
createElement
(
MediaControlButton
{
action
:
this
.
handleToggleVideo
enabled
:
this
.
props
.
video
.
enabled
scope
:
"
local
"
type
:
"
video
"
visible
:
this
.
props
.
video
.
visible
}
)
React
.
createElement
(
MediaControlButton
{
action
:
this
.
handleToggleAudio
enabled
:
this
.
props
.
audio
.
enabled
scope
:
"
local
"
type
:
"
audio
"
visible
:
this
.
props
.
audio
.
visible
}
)
)
)
React
.
createElement
(
"
li
"
{
className
:
"
conversation
-
toolbar
-
btn
-
box
btn
-
edit
-
entry
"
}
React
.
createElement
(
SettingsControlButton
{
menuItems
:
this
.
props
.
settingsMenuItems
}
)
)
)
)
;
}
}
)
;
var
NotificationView
=
React
.
createClass
(
{
displayName
:
"
NotificationView
"
mixins
:
[
Backbone
.
Events
]
propTypes
:
{
notification
:
React
.
PropTypes
.
object
.
isRequired
}
render
:
function
(
)
{
var
notification
=
this
.
props
.
notification
;
return
(
React
.
createElement
(
"
div
"
{
className
:
"
notificationContainer
"
}
React
.
createElement
(
"
div
"
{
className
:
"
alert
alert
-
"
+
notification
.
get
(
"
level
"
)
}
React
.
createElement
(
"
span
"
{
className
:
"
message
"
}
notification
.
get
(
"
message
"
)
)
)
React
.
createElement
(
"
div
"
{
className
:
"
detailsBar
details
-
"
+
notification
.
get
(
"
level
"
)
hidden
:
!
notification
.
get
(
"
details
"
)
}
React
.
createElement
(
"
button
"
{
className
:
"
detailsButton
btn
-
info
"
hidden
:
!
notification
.
get
(
"
detailsButtonLabel
"
)
|
|
!
notification
.
get
(
"
detailsButtonCallback
"
)
onClick
:
notification
.
get
(
"
detailsButtonCallback
"
)
}
notification
.
get
(
"
detailsButtonLabel
"
)
)
React
.
createElement
(
"
span
"
{
className
:
"
details
"
}
notification
.
get
(
"
details
"
)
)
)
)
)
;
}
}
)
;
var
NotificationListView
=
React
.
createClass
(
{
displayName
:
"
NotificationListView
"
mixins
:
[
Backbone
.
Events
sharedMixins
.
DocumentVisibilityMixin
]
propTypes
:
{
clearOnDocumentHidden
:
React
.
PropTypes
.
bool
notifications
:
React
.
PropTypes
.
object
.
isRequired
}
getDefaultProps
:
function
(
)
{
return
{
clearOnDocumentHidden
:
false
}
;
}
componentDidMount
:
function
(
)
{
this
.
listenTo
(
this
.
props
.
notifications
"
reset
add
remove
"
function
(
)
{
this
.
forceUpdate
(
)
;
}
)
;
}
componentWillUnmount
:
function
(
)
{
this
.
stopListening
(
this
.
props
.
notifications
)
;
}
onDocumentHidden
:
function
(
)
{
if
(
this
.
props
.
clearOnDocumentHidden
&
&
this
.
props
.
notifications
.
length
>
0
)
{
this
.
props
.
notifications
.
reset
(
[
]
{
silent
:
true
}
)
;
this
.
forceUpdate
(
)
;
}
}
render
:
function
(
)
{
return
(
React
.
createElement
(
"
div
"
{
className
:
"
messages
"
}
this
.
props
.
notifications
.
map
(
function
(
notification
key
)
{
return
React
.
createElement
(
NotificationView
{
key
:
key
notification
:
notification
}
)
;
}
)
)
)
;
}
}
)
;
var
Button
=
React
.
createClass
(
{
displayName
:
"
Button
"
propTypes
:
{
additionalClass
:
React
.
PropTypes
.
string
caption
:
React
.
PropTypes
.
string
.
isRequired
children
:
React
.
PropTypes
.
element
disabled
:
React
.
PropTypes
.
bool
htmlId
:
React
.
PropTypes
.
string
onClick
:
React
.
PropTypes
.
func
.
isRequired
}
getDefaultProps
:
function
(
)
{
return
{
disabled
:
false
additionalClass
:
"
"
htmlId
:
"
"
}
;
}
render
:
function
(
)
{
var
cx
=
classNames
;
var
classObject
=
{
button
:
true
disabled
:
this
.
props
.
disabled
}
;
if
(
this
.
props
.
additionalClass
)
{
classObject
[
this
.
props
.
additionalClass
]
=
true
;
}
return
(
React
.
createElement
(
"
button
"
{
className
:
cx
(
classObject
)
disabled
:
this
.
props
.
disabled
id
:
this
.
props
.
htmlId
onClick
:
this
.
props
.
onClick
}
React
.
createElement
(
"
span
"
{
className
:
"
button
-
caption
"
}
this
.
props
.
caption
)
this
.
props
.
children
)
)
;
}
}
)
;
var
ButtonGroup
=
React
.
createClass
(
{
displayName
:
"
ButtonGroup
"
propTypes
:
{
additionalClass
:
React
.
PropTypes
.
string
children
:
React
.
PropTypes
.
oneOfType
(
[
React
.
PropTypes
.
element
React
.
PropTypes
.
arrayOf
(
React
.
PropTypes
.
element
)
]
)
}
getDefaultProps
:
function
(
)
{
return
{
additionalClass
:
"
"
}
;
}
render
:
function
(
)
{
var
cx
=
classNames
;
var
classObject
=
{
"
button
-
group
"
:
true
}
;
if
(
this
.
props
.
additionalClass
)
{
classObject
[
this
.
props
.
additionalClass
]
=
true
;
}
return
(
React
.
createElement
(
"
div
"
{
className
:
cx
(
classObject
)
}
this
.
props
.
children
)
)
;
}
}
)
;
var
Checkbox
=
React
.
createClass
(
{
displayName
:
"
Checkbox
"
propTypes
:
{
additionalClass
:
React
.
PropTypes
.
string
checked
:
React
.
PropTypes
.
bool
disabled
:
React
.
PropTypes
.
bool
label
:
React
.
PropTypes
.
string
onChange
:
React
.
PropTypes
.
func
.
isRequired
useEllipsis
:
React
.
PropTypes
.
bool
value
:
React
.
PropTypes
.
string
}
getDefaultProps
:
function
(
)
{
return
{
additionalClass
:
"
"
checked
:
false
disabled
:
false
label
:
null
useEllipsis
:
false
value
:
"
"
}
;
}
componentWillReceiveProps
:
function
(
nextProps
)
{
if
(
this
.
props
.
checked
!
=
=
nextProps
.
checked
&
&
this
.
state
.
checked
!
=
=
nextProps
.
checked
)
{
this
.
setState
(
{
checked
:
nextProps
.
checked
}
)
;
}
}
getInitialState
:
function
(
)
{
return
{
checked
:
this
.
props
.
checked
value
:
this
.
props
.
checked
?
this
.
props
.
value
:
"
"
}
;
}
_handleClick
:
function
(
event
)
{
event
.
preventDefault
(
)
;
var
newState
=
{
checked
:
!
this
.
state
.
checked
value
:
this
.
state
.
checked
?
"
"
:
this
.
props
.
value
}
;
this
.
setState
(
newState
)
;
this
.
props
.
onChange
(
newState
)
;
}
render
:
function
(
)
{
var
cx
=
classNames
;
var
wrapperClasses
=
{
"
checkbox
-
wrapper
"
:
true
disabled
:
this
.
props
.
disabled
}
;
var
checkClasses
=
{
checkbox
:
true
checked
:
this
.
state
.
checked
disabled
:
this
.
props
.
disabled
}
;
var
labelClasses
=
{
"
checkbox
-
label
"
:
true
"
ellipsis
"
:
this
.
props
.
useEllipsis
}
;
if
(
this
.
props
.
additionalClass
)
{
wrapperClasses
[
this
.
props
.
additionalClass
]
=
true
;
}
return
(
React
.
createElement
(
"
div
"
{
className
:
cx
(
wrapperClasses
)
disabled
:
this
.
props
.
disabled
onClick
:
this
.
_handleClick
}
React
.
createElement
(
"
div
"
{
className
:
cx
(
checkClasses
)
}
)
this
.
props
.
label
?
React
.
createElement
(
"
div
"
{
className
:
cx
(
labelClasses
)
title
:
this
.
props
.
useEllipsis
?
this
.
props
.
label
:
"
"
}
this
.
props
.
label
)
:
null
)
)
;
}
}
)
;
var
AvatarView
=
React
.
createClass
(
{
displayName
:
"
AvatarView
"
mixins
:
[
React
.
addons
.
PureRenderMixin
]
render
:
function
(
)
{
return
React
.
createElement
(
"
div
"
{
className
:
"
avatar
"
}
)
;
}
}
)
;
var
LoadingView
=
React
.
createClass
(
{
displayName
:
"
LoadingView
"
mixins
:
[
React
.
addons
.
PureRenderMixin
]
render
:
function
(
)
{
return
(
React
.
createElement
(
"
div
"
{
className
:
"
loading
-
background
"
}
React
.
createElement
(
"
div
"
{
className
:
"
loading
-
stream
"
}
)
)
)
;
}
}
)
;
var
ContextUrlView
=
React
.
createClass
(
{
displayName
:
"
ContextUrlView
"
mixins
:
[
React
.
addons
.
PureRenderMixin
]
propTypes
:
{
allowClick
:
React
.
PropTypes
.
bool
.
isRequired
description
:
React
.
PropTypes
.
string
.
isRequired
dispatcher
:
React
.
PropTypes
.
instanceOf
(
loop
.
Dispatcher
)
thumbnail
:
React
.
PropTypes
.
string
url
:
React
.
PropTypes
.
string
useDesktopPaths
:
React
.
PropTypes
.
bool
.
isRequired
}
handleLinkClick
:
function
(
)
{
if
(
!
this
.
props
.
allowClick
)
{
return
;
}
this
.
props
.
dispatcher
.
dispatch
(
new
sharedActions
.
RecordClick
(
{
linkInfo
:
"
Shared
URL
"
}
)
)
;
}
render
:
function
(
)
{
var
hostname
;
try
{
hostname
=
new
URL
(
this
.
props
.
url
)
.
hostname
;
}
catch
(
ex
)
{
return
null
;
}
var
thumbnail
=
this
.
props
.
thumbnail
;
if
(
!
thumbnail
)
{
thumbnail
=
this
.
props
.
useDesktopPaths
?
"
shared
/
img
/
icons
-
16x16
.
svg
#
globe
"
:
"
shared
/
img
/
icons
-
16x16
.
svg
#
globe
"
;
}
var
wrapperClasses
=
classNames
(
{
"
context
-
wrapper
"
:
true
"
clicks
-
allowed
"
:
this
.
props
.
allowClick
}
)
;
return
(
React
.
createElement
(
"
div
"
{
className
:
"
context
-
content
"
}
React
.
createElement
(
"
a
"
{
className
:
wrapperClasses
href
:
this
.
props
.
allowClick
?
this
.
props
.
url
:
null
onClick
:
this
.
handleLinkClick
rel
:
"
noreferrer
"
target
:
"
_blank
"
}
React
.
createElement
(
"
img
"
{
className
:
"
context
-
preview
"
src
:
thumbnail
}
)
React
.
createElement
(
"
span
"
{
className
:
"
context
-
info
"
}
this
.
props
.
description
React
.
createElement
(
"
span
"
{
className
:
"
context
-
url
"
}
hostname
)
)
)
)
)
;
}
}
)
;
var
MediaView
=
React
.
createClass
(
{
displayName
:
"
MediaView
"
mixins
:
[
React
.
addons
.
PureRenderMixin
]
propTypes
:
{
displayAvatar
:
React
.
PropTypes
.
bool
.
isRequired
isLoading
:
React
.
PropTypes
.
bool
.
isRequired
mediaType
:
React
.
PropTypes
.
string
.
isRequired
posterUrl
:
React
.
PropTypes
.
string
srcMediaElement
:
React
.
PropTypes
.
object
}
componentDidMount
:
function
(
)
{
if
(
!
this
.
props
.
displayAvatar
)
{
this
.
attachVideo
(
this
.
props
.
srcMediaElement
)
;
}
}
componentDidUpdate
:
function
(
)
{
if
(
!
this
.
props
.
displayAvatar
)
{
this
.
attachVideo
(
this
.
props
.
srcMediaElement
)
;
}
}
attachVideo
:
function
(
srcMediaElement
)
{
if
(
!
srcMediaElement
)
{
return
;
}
var
videoElement
=
this
.
getDOMNode
(
)
;
if
(
videoElement
.
tagName
.
toLowerCase
(
)
!
=
=
"
video
"
)
{
return
;
}
var
attrName
=
"
"
;
if
(
"
srcObject
"
in
videoElement
)
{
attrName
=
"
srcObject
"
;
}
else
if
(
"
mozSrcObject
"
in
videoElement
)
{
attrName
=
"
mozSrcObject
"
;
}
else
if
(
"
src
"
in
videoElement
)
{
attrName
=
"
src
"
;
}
else
{
console
.
error
(
"
Error
attaching
stream
to
element
-
no
supported
"
+
"
attribute
found
"
)
;
return
;
}
if
(
videoElement
[
attrName
]
!
=
=
srcMediaElement
[
attrName
]
)
{
videoElement
[
attrName
]
=
srcMediaElement
[
attrName
]
;
}
videoElement
.
play
(
)
;
}
render
:
function
(
)
{
if
(
this
.
props
.
isLoading
)
{
return
React
.
createElement
(
LoadingView
null
)
;
}
if
(
this
.
props
.
displayAvatar
)
{
return
React
.
createElement
(
AvatarView
null
)
;
}
if
(
!
this
.
props
.
srcMediaElement
&
&
!
this
.
props
.
posterUrl
)
{
return
React
.
createElement
(
"
div
"
{
className
:
"
no
-
video
"
}
)
;
}
var
optionalPoster
=
{
}
;
if
(
this
.
props
.
posterUrl
)
{
optionalPoster
.
poster
=
this
.
props
.
posterUrl
;
}
return
(
React
.
createElement
(
"
video
"
React
.
__spread
(
{
}
optionalPoster
{
className
:
this
.
props
.
mediaType
+
"
-
video
"
muted
:
true
}
)
)
)
;
}
}
)
;
var
MediaLayoutView
=
React
.
createClass
(
{
displayName
:
"
MediaLayoutView
"
propTypes
:
{
children
:
React
.
PropTypes
.
node
dispatcher
:
React
.
PropTypes
.
instanceOf
(
loop
.
Dispatcher
)
.
isRequired
displayScreenShare
:
React
.
PropTypes
.
bool
.
isRequired
isLocalLoading
:
React
.
PropTypes
.
bool
.
isRequired
isRemoteLoading
:
React
.
PropTypes
.
bool
.
isRequired
isScreenShareLoading
:
React
.
PropTypes
.
bool
.
isRequired
localPosterUrl
:
React
.
PropTypes
.
string
localSrcMediaElement
:
React
.
PropTypes
.
object
localVideoMuted
:
React
.
PropTypes
.
bool
.
isRequired
matchMedia
:
React
.
PropTypes
.
func
.
isRequired
remotePosterUrl
:
React
.
PropTypes
.
string
remoteSrcMediaElement
:
React
.
PropTypes
.
object
renderRemoteVideo
:
React
.
PropTypes
.
bool
.
isRequired
screenShareMediaElement
:
React
.
PropTypes
.
object
screenSharePosterUrl
:
React
.
PropTypes
.
string
showInitialContext
:
React
.
PropTypes
.
bool
.
isRequired
useDesktopPaths
:
React
.
PropTypes
.
bool
.
isRequired
}
isLocalMediaAbsolutelyPositioned
:
function
(
matchMedia
)
{
if
(
!
matchMedia
)
{
matchMedia
=
this
.
props
.
matchMedia
;
}
return
matchMedia
&
&
(
(
matchMedia
(
"
screen
and
(
max
-
width
:
640px
)
"
)
.
matches
&
&
!
this
.
props
.
displayScreenShare
)
|
|
(
matchMedia
(
"
screen
and
(
max
-
width
:
300px
)
"
)
.
matches
)
)
;
}
getInitialState
:
function
(
)
{
return
{
localMediaAboslutelyPositioned
:
this
.
isLocalMediaAbsolutelyPositioned
(
)
}
;
}
componentWillReceiveProps
:
function
(
nextProps
)
{
if
(
this
.
props
.
matchMedia
!
=
=
nextProps
.
matchMedia
)
{
this
.
updateLocalMediaState
(
null
nextProps
.
matchMedia
)
;
}
}
componentDidMount
:
function
(
)
{
window
.
addEventListener
(
"
resize
"
this
.
updateLocalMediaState
)
;
}
componentWillUnmount
:
function
(
)
{
window
.
removeEventListener
(
"
resize
"
this
.
updateLocalMediaState
)
;
}
updateLocalMediaState
:
function
(
event
matchMedia
)
{
var
newState
=
this
.
isLocalMediaAbsolutelyPositioned
(
matchMedia
)
;
if
(
this
.
state
.
localMediaAboslutelyPositioned
!
=
=
newState
)
{
this
.
setState
(
{
localMediaAboslutelyPositioned
:
newState
}
)
;
}
}
renderLocalVideo
:
function
(
)
{
return
(
React
.
createElement
(
"
div
"
{
className
:
"
local
"
}
React
.
createElement
(
MediaView
{
displayAvatar
:
this
.
props
.
localVideoMuted
isLoading
:
this
.
props
.
isLocalLoading
mediaType
:
"
local
"
posterUrl
:
this
.
props
.
localPosterUrl
srcMediaElement
:
this
.
props
.
localSrcMediaElement
}
)
)
)
;
}
render
:
function
(
)
{
var
remoteStreamClasses
=
classNames
(
{
"
remote
"
:
true
"
focus
-
stream
"
:
!
this
.
props
.
displayScreenShare
}
)
;
var
screenShareStreamClasses
=
classNames
(
{
"
screen
"
:
true
"
focus
-
stream
"
:
this
.
props
.
displayScreenShare
}
)
;
var
mediaWrapperClasses
=
classNames
(
{
"
media
-
wrapper
"
:
true
"
receiving
-
screen
-
share
"
:
this
.
props
.
displayScreenShare
"
showing
-
local
-
streams
"
:
this
.
props
.
localSrcMediaElement
|
|
this
.
props
.
localPosterUrl
"
showing
-
remote
-
streams
"
:
this
.
props
.
remoteSrcMediaElement
|
|
this
.
props
.
remotePosterUrl
|
|
this
.
props
.
isRemoteLoading
}
)
;
return
(
React
.
createElement
(
"
div
"
{
className
:
"
media
-
layout
"
}
React
.
createElement
(
"
div
"
{
className
:
mediaWrapperClasses
}
React
.
createElement
(
"
span
"
{
className
:
"
self
-
view
-
hidden
-
message
"
}
mozL10n
.
get
(
"
self_view_hidden_message
"
)
)
React
.
createElement
(
"
div
"
{
className
:
remoteStreamClasses
}
React
.
createElement
(
MediaView
{
displayAvatar
:
!
this
.
props
.
renderRemoteVideo
isLoading
:
this
.
props
.
isRemoteLoading
mediaType
:
"
remote
"
posterUrl
:
this
.
props
.
remotePosterUrl
srcMediaElement
:
this
.
props
.
remoteSrcMediaElement
}
)
this
.
state
.
localMediaAboslutelyPositioned
?
this
.
renderLocalVideo
(
)
:
null
this
.
props
.
displayScreenShare
?
null
:
this
.
props
.
children
)
React
.
createElement
(
"
div
"
{
className
:
screenShareStreamClasses
}
React
.
createElement
(
MediaView
{
displayAvatar
:
false
isLoading
:
this
.
props
.
isScreenShareLoading
mediaType
:
"
screen
-
share
"
posterUrl
:
this
.
props
.
screenSharePosterUrl
srcMediaElement
:
this
.
props
.
screenShareMediaElement
}
)
this
.
props
.
displayScreenShare
?
this
.
props
.
children
:
null
)
React
.
createElement
(
loop
.
shared
.
views
.
chat
.
TextChatView
{
dispatcher
:
this
.
props
.
dispatcher
showInitialContext
:
this
.
props
.
showInitialContext
useDesktopPaths
:
this
.
props
.
useDesktopPaths
}
)
this
.
state
.
localMediaAboslutelyPositioned
?
null
:
this
.
renderLocalVideo
(
)
)
)
)
;
}
}
)
;
return
{
AvatarView
:
AvatarView
Button
:
Button
ButtonGroup
:
ButtonGroup
Checkbox
:
Checkbox
ContextUrlView
:
ContextUrlView
ConversationToolbar
:
ConversationToolbar
MediaControlButton
:
MediaControlButton
MediaLayoutView
:
MediaLayoutView
MediaView
:
MediaView
LoadingView
:
LoadingView
SettingsControlButton
:
SettingsControlButton
NotificationListView
:
NotificationListView
}
;
}
)
(
_
navigator
.
mozL10n
|
|
document
.
mozL10n
)
;
