"
use
strict
"
;
const
{
interfaces
:
Ci
utils
:
Cu
classes
:
Cc
}
=
Components
;
const
kNSXUL
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
const
kBrowserSharingNotificationId
=
"
loop
-
sharing
-
notification
"
;
const
kPrefBrowserSharingInfoBar
=
"
browserSharing
.
showInfoBar
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Task
"
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
var
WindowListener
=
{
setupBrowserUI
:
function
(
window
)
{
let
document
=
window
.
document
;
let
gBrowser
=
window
.
gBrowser
;
let
xhrClass
=
Cc
[
"
mozilla
.
org
/
xmlextras
/
xmlhttprequest
;
1
"
]
;
let
FileReader
=
window
.
FileReader
;
var
LoopUI
=
{
get
toolbarButton
(
)
{
delete
this
.
toolbarButton
;
return
(
this
.
toolbarButton
=
CustomizableUI
.
getWidget
(
"
loop
-
button
"
)
.
forWindow
(
window
)
)
;
}
get
panel
(
)
{
delete
this
.
panel
;
return
(
this
.
panel
=
document
.
getElementById
(
"
loop
-
notification
-
panel
"
)
)
;
}
get
browser
(
)
{
let
browser
=
document
.
querySelector
(
"
#
loop
-
notification
-
panel
>
#
loop
-
panel
-
iframe
"
)
;
if
(
browser
)
{
delete
this
.
browser
;
this
.
browser
=
browser
;
}
return
browser
;
}
get
selectedTab
(
)
{
if
(
!
this
.
browser
)
{
return
null
;
}
let
selectedTab
=
this
.
browser
.
contentDocument
.
querySelector
(
"
.
tab
-
view
>
.
selected
"
)
;
return
selectedTab
&
&
selectedTab
.
getAttribute
(
"
data
-
tab
-
name
"
)
;
}
promiseDocumentVisible
(
aDocument
)
{
if
(
!
aDocument
.
hidden
)
{
return
Promise
.
resolve
(
aDocument
)
;
}
return
new
Promise
(
(
resolve
)
=
>
{
aDocument
.
addEventListener
(
"
visibilitychange
"
function
onVisibilityChanged
(
)
{
aDocument
.
removeEventListener
(
"
visibilitychange
"
onVisibilityChanged
)
;
resolve
(
aDocument
)
;
}
)
;
}
)
;
}
togglePanel
:
function
(
event
tabId
=
null
)
{
if
(
!
this
.
panel
)
{
let
obs
=
win
=
>
{
Services
.
obs
.
removeObserver
(
obs
"
browser
-
delayed
-
startup
-
finished
"
)
;
win
.
LoopUI
.
togglePanel
(
event
tabId
)
;
}
;
Services
.
obs
.
addObserver
(
obs
"
browser
-
delayed
-
startup
-
finished
"
false
)
;
return
window
.
OpenBrowserWindow
(
)
;
}
if
(
this
.
panel
.
state
=
=
"
open
"
)
{
return
new
Promise
(
resolve
=
>
{
this
.
panel
.
hidePopup
(
)
;
resolve
(
)
;
}
)
;
}
return
this
.
openCallPanel
(
event
tabId
)
.
then
(
doc
=
>
{
let
fm
=
Services
.
focus
;
fm
.
moveFocus
(
doc
.
defaultView
null
fm
.
MOVEFOCUS_FIRST
fm
.
FLAG_NOSCROLL
)
;
}
)
.
catch
(
err
=
>
{
Cu
.
reportError
(
err
)
;
}
)
;
}
openCallPanel
:
function
(
event
tabId
=
null
)
{
return
new
Promise
(
(
resolve
)
=
>
{
let
callback
=
iframe
=
>
{
function
showTab
(
)
{
if
(
!
tabId
)
{
resolve
(
LoopUI
.
promiseDocumentVisible
(
iframe
.
contentDocument
)
)
;
return
;
}
let
win
=
iframe
.
contentWindow
;
let
ev
=
new
win
.
CustomEvent
(
"
UIAction
"
Cu
.
cloneInto
(
{
detail
:
{
action
:
"
selectTab
"
tab
:
tabId
}
}
win
)
)
;
win
.
dispatchEvent
(
ev
)
;
resolve
(
LoopUI
.
promiseDocumentVisible
(
iframe
.
contentDocument
)
)
;
}
if
(
(
"
contentWindow
"
in
iframe
)
&
&
iframe
.
contentWindow
.
document
.
readyState
=
=
"
complete
"
)
{
showTab
(
)
;
return
;
}
let
documentDOMLoaded
=
(
)
=
>
{
iframe
.
removeEventListener
(
"
DOMContentLoaded
"
documentDOMLoaded
true
)
;
this
.
hookWindowCloseForPanelClose
(
iframe
.
contentWindow
)
;
iframe
.
contentWindow
.
addEventListener
(
"
loopPanelInitialized
"
function
loopPanelInitialized
(
)
{
iframe
.
contentWindow
.
removeEventListener
(
"
loopPanelInitialized
"
loopPanelInitialized
)
;
showTab
(
)
;
}
)
;
}
;
iframe
.
addEventListener
(
"
DOMContentLoaded
"
documentDOMLoaded
true
)
;
}
;
Services
.
obs
.
notifyObservers
(
null
"
loop
-
status
-
changed
"
null
)
;
this
.
shouldResumeTour
(
)
.
then
(
(
resume
)
=
>
{
if
(
resume
)
{
this
.
MozLoopService
.
resumeTour
(
"
waiting
"
)
;
resolve
(
)
;
return
;
}
this
.
LoopAPI
.
initialize
(
)
;
let
anchor
=
event
?
event
.
target
:
this
.
toolbarButton
.
anchor
;
let
setHeight
=
410
;
if
(
gBrowser
.
selectedBrowser
.
getAttribute
(
"
remote
"
)
=
=
=
"
true
"
)
{
setHeight
=
262
;
}
this
.
PanelFrame
.
showPopup
(
window
anchor
"
loop
"
null
"
about
:
looppanel
"
{
width
:
330
height
:
setHeight
}
callback
)
;
}
)
;
}
)
;
}
shouldResumeTour
:
Task
.
async
(
function
*
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
loop
.
gettingStarted
.
resumeOnFirstJoin
"
)
)
{
return
false
;
}
if
(
!
this
.
LoopRooms
.
participantsCount
)
{
return
false
;
}
let
roomsWithNonOwners
=
yield
this
.
roomsWithNonOwners
(
)
;
if
(
!
roomsWithNonOwners
.
length
)
{
return
false
;
}
return
true
;
}
)
roomsWithNonOwners
:
function
(
)
{
return
new
Promise
(
resolve
=
>
{
this
.
LoopRooms
.
getAll
(
(
error
rooms
)
=
>
{
let
roomsWithNonOwners
=
[
]
;
for
(
let
room
of
rooms
)
{
if
(
!
(
"
participants
"
in
room
)
)
{
continue
;
}
let
numNonOwners
=
room
.
participants
.
filter
(
participant
=
>
!
participant
.
owner
)
.
length
;
if
(
!
numNonOwners
)
{
continue
;
}
roomsWithNonOwners
.
push
(
room
)
;
}
resolve
(
roomsWithNonOwners
)
;
}
)
;
}
)
;
}
init
:
function
(
)
{
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
this
.
uninit
(
)
;
}
)
;
Services
.
obs
.
addObserver
(
this
"
loop
-
status
-
changed
"
false
)
;
this
.
MozLoopService
.
initialize
(
)
.
catch
(
ex
=
>
{
if
(
!
ex
.
message
|
|
(
!
ex
.
message
.
contains
(
"
not
enabled
"
)
&
&
!
ex
.
message
.
contains
(
"
not
needed
"
)
)
)
{
console
.
error
(
ex
)
;
}
}
)
;
this
.
updateToolbarState
(
)
;
}
uninit
:
function
(
)
{
Services
.
obs
.
removeObserver
(
this
"
loop
-
status
-
changed
"
)
;
}
observe
:
function
(
subject
topic
data
)
{
if
(
topic
!
=
"
loop
-
status
-
changed
"
)
{
return
;
}
this
.
updateToolbarState
(
data
)
;
}
updateToolbarState
:
function
(
aReason
=
null
)
{
if
(
!
this
.
toolbarButton
.
node
)
{
return
;
}
let
state
=
"
"
;
let
mozL10nId
=
"
loop
-
call
-
button3
"
;
let
suffix
=
"
.
tooltiptext
"
;
if
(
this
.
MozLoopService
.
errors
.
size
)
{
state
=
"
error
"
;
mozL10nId
+
=
"
-
error
"
;
}
else
if
(
this
.
MozLoopService
.
screenShareActive
)
{
state
=
"
action
"
;
mozL10nId
+
=
"
-
screensharing
"
;
}
else
if
(
aReason
=
=
"
login
"
&
&
this
.
MozLoopService
.
userProfile
)
{
state
=
"
active
"
;
mozL10nId
+
=
"
-
active
"
;
suffix
+
=
"
2
"
;
}
else
if
(
this
.
MozLoopService
.
doNotDisturb
)
{
state
=
"
disabled
"
;
mozL10nId
+
=
"
-
donotdisturb
"
;
}
else
if
(
this
.
MozLoopService
.
roomsParticipantsCount
>
0
)
{
state
=
"
active
"
;
this
.
roomsWithNonOwners
(
)
.
then
(
roomsWithNonOwners
=
>
{
if
(
roomsWithNonOwners
.
length
>
0
)
{
mozL10nId
+
=
"
-
participantswaiting
"
;
}
else
{
mozL10nId
+
=
"
-
active
"
;
}
suffix
+
=
"
2
"
;
this
.
updateTooltiptext
(
mozL10nId
+
suffix
)
;
this
.
toolbarButton
.
node
.
setAttribute
(
"
state
"
state
)
;
}
)
;
return
;
}
else
{
suffix
+
=
"
2
"
;
}
this
.
toolbarButton
.
node
.
setAttribute
(
"
state
"
state
)
;
this
.
updateTooltiptext
(
mozL10nId
+
suffix
)
;
}
updateTooltiptext
:
function
(
mozL10nId
)
{
this
.
toolbarButton
.
node
.
setAttribute
(
"
tooltiptext
"
mozL10nId
)
;
var
tooltiptext
=
CustomizableUI
.
getLocalizedProperty
(
this
.
toolbarButton
"
tooltiptext
"
)
;
this
.
toolbarButton
.
node
.
setAttribute
(
"
tooltiptext
"
tooltiptext
)
;
}
showNotification
:
function
(
options
)
{
if
(
this
.
MozLoopService
.
doNotDisturb
)
{
return
;
}
if
(
!
options
.
title
)
{
throw
new
Error
(
"
Missing
title
can
not
display
notification
"
)
;
}
let
notificationOptions
=
{
body
:
options
.
message
|
|
"
"
}
;
if
(
options
.
icon
)
{
notificationOptions
.
icon
=
options
.
icon
;
}
if
(
options
.
sound
)
{
notificationOptions
.
mozbehavior
=
{
soundFile
:
"
"
}
;
this
.
playSound
(
options
.
sound
)
;
}
let
notification
=
new
window
.
Notification
(
options
.
title
notificationOptions
)
;
notification
.
addEventListener
(
"
click
"
e
=
>
{
if
(
window
.
closed
)
{
return
;
}
try
{
window
.
focus
(
)
;
}
catch
(
ex
)
{
}
window
.
setTimeout
(
(
)
=
>
{
if
(
typeof
options
.
onclick
=
=
"
function
"
)
{
options
.
onclick
(
)
;
}
else
{
this
.
openCallPanel
(
null
options
.
selectTab
|
|
null
)
;
}
}
0
)
;
}
)
;
}
playSound
:
function
(
name
)
{
if
(
this
.
ActiveSound
|
|
this
.
MozLoopService
.
doNotDisturb
)
{
return
;
}
this
.
activeSound
=
new
window
.
Audio
(
)
;
this
.
activeSound
.
src
=
chrome
:
/
/
loop
/
content
/
shared
/
sounds
/
{
name
}
.
ogg
;
this
.
activeSound
.
load
(
)
;
this
.
activeSound
.
play
(
)
;
this
.
activeSound
.
addEventListener
(
"
ended
"
(
)
=
>
this
.
activeSound
=
undefined
false
)
;
}
startBrowserSharing
:
function
(
)
{
if
(
!
this
.
_listeningToTabSelect
)
{
gBrowser
.
tabContainer
.
addEventListener
(
"
TabSelect
"
this
)
;
this
.
_listeningToTabSelect
=
true
;
}
this
.
_maybeShowBrowserSharingInfoBar
(
)
;
this
.
LoopAPI
.
broadcastPushMessage
(
"
BrowserSwitch
"
gBrowser
.
selectedBrowser
.
outerWindowID
)
;
}
stopBrowserSharing
:
function
(
)
{
if
(
!
this
.
_listeningToTabSelect
)
{
return
;
}
this
.
_hideBrowserSharingInfoBar
(
)
;
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabSelect
"
this
)
;
this
.
_listeningToTabSelect
=
false
;
}
_getString
:
function
(
key
)
{
let
str
=
this
.
MozLoopService
.
getStrings
(
key
)
;
if
(
str
)
{
str
=
JSON
.
parse
(
str
)
.
textContent
;
}
return
str
;
}
_maybeShowBrowserSharingInfoBar
:
function
(
)
{
this
.
_hideBrowserSharingInfoBar
(
)
;
if
(
!
this
.
MozLoopService
.
getLoopPref
(
kPrefBrowserSharingInfoBar
)
)
{
return
;
}
let
box
=
gBrowser
.
getNotificationBox
(
)
;
let
paused
=
false
;
let
bar
=
box
.
appendNotification
(
this
.
_getString
(
"
infobar_screenshare_browser_message
"
)
kBrowserSharingNotificationId
null
box
.
PRIORITY_WARNING_LOW
[
{
label
:
this
.
_getString
(
"
infobar_button_pause_label
"
)
accessKey
:
this
.
_getString
(
"
infobar_button_pause_accesskey
"
)
isDefault
:
false
callback
:
(
event
buttonInfo
buttonNode
)
=
>
{
paused
=
!
paused
;
bar
.
label
=
paused
?
this
.
_getString
(
"
infobar_screenshare_paused_browser_message
"
)
:
this
.
_getString
(
"
infobar_screenshare_browser_message
"
)
;
bar
.
classList
.
toggle
(
"
paused
"
paused
)
;
buttonNode
.
label
=
paused
?
this
.
_getString
(
"
infobar_button_resume_label
"
)
:
this
.
_getString
(
"
infobar_button_pause_label
"
)
;
buttonNode
.
accessKey
=
paused
?
this
.
_getString
(
"
infobar_button_resume_accesskey
"
)
:
this
.
_getString
(
"
infobar_button_pause_accesskey
"
)
;
return
true
;
}
}
{
label
:
this
.
_getString
(
"
infobar_button_stop_label
"
)
accessKey
:
this
.
_getString
(
"
infobar_button_stop_accesskey
"
)
isDefault
:
true
callback
:
(
)
=
>
{
this
.
_hideBrowserSharingInfoBar
(
)
;
LoopUI
.
MozLoopService
.
hangupAllChatWindows
(
)
;
}
}
]
)
;
bar
.
persistence
=
-
1
;
}
_hideBrowserSharingInfoBar
:
function
(
permanently
=
false
browser
)
{
browser
=
browser
|
|
gBrowser
.
selectedBrowser
;
let
box
=
gBrowser
.
getNotificationBox
(
browser
)
;
let
notification
=
box
.
getNotificationWithValue
(
kBrowserSharingNotificationId
)
;
let
removed
=
false
;
if
(
notification
)
{
box
.
removeNotification
(
notification
)
;
removed
=
true
;
}
if
(
permanently
)
{
this
.
MozLoopService
.
setLoopPref
(
kPrefBrowserSharingInfoBar
false
)
;
}
return
removed
;
}
handleEvent
:
function
(
event
)
{
if
(
event
.
type
!
=
"
TabSelect
"
)
{
return
;
}
let
wasVisible
=
false
;
if
(
event
.
detail
.
previousTab
)
{
wasVisible
=
this
.
_hideBrowserSharingInfoBar
(
false
event
.
detail
.
previousTab
.
linkedBrowser
)
;
}
this
.
LoopAPI
.
broadcastPushMessage
(
"
BrowserSwitch
"
gBrowser
.
selectedBrowser
.
outerWindowID
)
;
if
(
wasVisible
)
{
this
.
_maybeShowBrowserSharingInfoBar
(
)
;
}
}
getFavicon
:
function
(
callback
)
{
let
pageURI
=
gBrowser
.
selectedTab
.
linkedBrowser
.
currentURI
.
spec
;
if
(
!
/
^
https
?
:
/
.
test
(
pageURI
)
)
{
callback
(
)
;
return
;
}
this
.
PlacesUtils
.
promiseFaviconLinkUrl
(
pageURI
)
.
then
(
uri
=
>
{
let
xhr
=
xhrClass
.
createInstance
(
Ci
.
nsIXMLHttpRequest
)
;
xhr
.
open
(
"
get
"
uri
.
spec
true
)
;
xhr
.
responseType
=
"
blob
"
;
xhr
.
overrideMimeType
(
"
image
/
x
-
icon
"
)
;
xhr
.
onload
=
(
)
=
>
{
if
(
xhr
.
status
!
=
200
)
{
callback
(
new
Error
(
"
Invalid
status
code
received
for
favicon
XHR
:
"
+
xhr
.
status
)
)
;
return
;
}
let
reader
=
new
FileReader
(
)
;
reader
.
onload
=
reader
.
onload
=
(
)
=
>
callback
(
null
reader
.
result
)
;
reader
.
onerror
=
callback
;
reader
.
readAsDataURL
(
xhr
.
response
)
;
}
;
xhr
.
onerror
=
callback
;
xhr
.
send
(
)
;
}
)
.
catch
(
err
=
>
{
callback
(
err
|
|
new
Error
(
"
No
favicon
found
"
)
)
;
}
)
;
}
}
;
XPCOMUtils
.
defineLazyModuleGetter
(
LoopUI
"
hookWindowCloseForPanelClose
"
"
resource
:
/
/
gre
/
modules
/
MozSocialAPI
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
LoopUI
"
LoopAPI
"
"
chrome
:
/
/
loop
/
content
/
modules
/
MozLoopAPI
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
LoopUI
"
LoopRooms
"
"
chrome
:
/
/
loop
/
content
/
modules
/
LoopRooms
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
LoopUI
"
MozLoopService
"
"
chrome
:
/
/
loop
/
content
/
modules
/
MozLoopService
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
LoopUI
"
PanelFrame
"
"
resource
:
/
/
/
modules
/
PanelFrame
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
LoopUI
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
LoopUI
.
init
(
)
;
window
.
LoopUI
=
LoopUI
;
}
tearDownBrowserUI
:
function
(
window
)
{
let
document
=
window
.
document
;
}
onOpenWindow
:
function
(
xulWindow
)
{
let
domWindow
=
xulWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
domWindow
.
addEventListener
(
"
load
"
function
listener
(
)
{
domWindow
.
removeEventListener
(
"
load
"
listener
false
)
;
if
(
domWindow
.
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
=
=
"
navigator
:
browser
"
)
{
WindowListener
.
setupBrowserUI
(
domWindow
)
;
}
}
false
)
;
}
onCloseWindow
:
function
(
xulWindow
)
{
}
onWindowTitleChange
:
function
(
xulWindow
newTitle
)
{
}
}
;
function
createLoopButton
(
)
{
CustomizableUI
.
createWidget
(
{
id
:
"
loop
-
button
"
type
:
"
custom
"
label
:
"
loop
-
call
-
button3
.
label
"
tooltiptext
:
"
loop
-
call
-
button3
.
tooltiptext2
"
privateBrowsingTooltiptext
:
"
loop
-
call
-
button3
-
pb
.
tooltiptext
"
defaultArea
:
CustomizableUI
.
AREA_NAVBAR
removable
:
true
onBuild
:
function
(
aDocument
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
loop
.
enabled
"
)
)
{
return
null
;
}
let
isWindowPrivate
=
PrivateBrowsingUtils
.
isWindowPrivate
(
aDocument
.
defaultView
)
;
let
node
=
aDocument
.
createElementNS
(
kNSXUL
"
toolbarbutton
"
)
;
node
.
setAttribute
(
"
id
"
this
.
id
)
;
node
.
classList
.
add
(
"
toolbarbutton
-
1
"
)
;
node
.
classList
.
add
(
"
chromeclass
-
toolbar
-
additional
"
)
;
node
.
classList
.
add
(
"
badged
-
button
"
)
;
node
.
setAttribute
(
"
label
"
CustomizableUI
.
getLocalizedProperty
(
this
"
label
"
)
)
;
if
(
isWindowPrivate
)
{
node
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
let
tooltiptext
=
isWindowPrivate
?
CustomizableUI
.
getLocalizedProperty
(
this
"
privateBrowsingTooltiptext
"
[
CustomizableUI
.
getLocalizedProperty
(
this
"
label
"
)
]
)
:
CustomizableUI
.
getLocalizedProperty
(
this
"
tooltiptext
"
)
;
node
.
setAttribute
(
"
tooltiptext
"
tooltiptext
)
;
node
.
setAttribute
(
"
removable
"
"
true
"
)
;
node
.
addEventListener
(
"
command
"
function
(
event
)
{
aDocument
.
defaultView
.
LoopUI
.
togglePanel
(
event
)
;
}
)
;
return
node
;
}
}
)
;
}
function
loadDefaultPrefs
(
)
{
var
branch
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
loop
/
content
/
preferences
/
prefs
.
js
"
{
pref
:
(
key
val
)
=
>
{
switch
(
typeof
val
)
{
case
"
boolean
"
:
branch
.
setBoolPref
(
key
val
)
;
break
;
case
"
number
"
:
branch
.
setIntPref
(
key
val
)
;
break
;
case
"
string
"
:
branch
.
setCharPref
(
key
val
)
;
break
;
}
}
}
)
;
}
function
startup
(
)
{
loadDefaultPrefs
(
)
;
createLoopButton
(
)
;
try
{
WindowListener
.
setupBrowserUI
(
Services
.
appShell
.
hiddenDOMWindow
)
;
}
catch
(
ex
)
{
let
topic
=
"
browser
-
delayed
-
startup
-
finished
"
;
Services
.
obs
.
addObserver
(
function
observer
(
)
{
Services
.
obs
.
removeObserver
(
observer
topic
)
;
WindowListener
.
setupBrowserUI
(
Services
.
appShell
.
hiddenDOMWindow
)
;
}
topic
false
)
;
}
let
wm
=
Cc
[
"
mozilla
.
org
/
appshell
/
window
-
mediator
;
1
"
]
.
getService
(
Ci
.
nsIWindowMediator
)
;
let
windows
=
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
while
(
windows
.
hasMoreElements
(
)
)
{
let
domWindow
=
windows
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIDOMWindow
)
;
WindowListener
.
setupBrowserUI
(
domWindow
)
;
}
wm
.
addListener
(
WindowListener
)
;
let
styleSheetService
=
Cc
[
"
mozilla
.
org
/
content
/
style
-
sheet
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIStyleSheetService
)
;
let
sheets
=
[
"
chrome
:
/
/
loop
-
shared
/
skin
/
loop
.
css
"
"
chrome
:
/
/
loop
/
skin
/
platform
.
css
"
]
;
for
(
let
sheet
of
sheets
)
{
let
styleSheetURI
=
Services
.
io
.
newURI
(
sheet
null
null
)
;
styleSheetService
.
loadAndRegisterSheet
(
styleSheetURI
styleSheetService
.
AUTHOR_SHEET
)
;
}
}
function
shutdown
(
)
{
Cu
.
import
(
"
resource
:
/
/
/
modules
/
Chat
.
jsm
"
)
;
let
isLoopURL
=
(
{
src
}
)
=
>
/
^
about
:
loopconversation
#
/
.
test
(
src
)
;
[
.
.
.
Chat
.
chatboxes
]
.
filter
(
isLoopURL
)
.
forEach
(
chatbox
=
>
{
chatbox
.
content
.
contentWindow
.
close
(
)
;
}
)
;
WindowListener
.
tearDownBrowserUI
(
Services
.
appShell
.
hiddenDOMWindow
)
;
let
wm
=
Cc
[
"
mozilla
.
org
/
appshell
/
window
-
mediator
;
1
"
]
.
getService
(
Ci
.
nsIWindowMediator
)
;
let
windows
=
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
while
(
windows
.
hasMoreElements
(
)
)
{
let
domWindow
=
windows
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIDOMWindow
)
;
WindowListener
.
tearDownBrowserUI
(
domWindow
)
;
}
wm
.
removeListener
(
WindowListener
)
;
CustomizableUI
.
destroyWidget
(
"
loop
-
button
"
)
;
let
styleSheetService
=
Cc
[
"
mozilla
.
org
/
content
/
style
-
sheet
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIStyleSheetService
)
;
let
sheets
=
[
"
chrome
:
/
/
loop
/
content
/
addon
/
css
/
loop
.
css
"
"
chrome
:
/
/
loop
/
skin
/
platform
.
css
"
]
;
for
(
let
sheet
of
sheets
)
{
let
styleSheetURI
=
Services
.
io
.
newURI
(
sheet
null
null
)
;
if
(
styleSheetService
.
sheetRegistered
(
styleSheetURI
styleSheetService
.
USER_SHEET
)
)
{
styleSheetService
.
unregisterSheet
(
styleSheetURI
styleSheetService
.
USER_SHEET
)
;
}
}
Cu
.
unload
(
"
chrome
:
/
/
loop
/
content
/
modules
/
MozLoopAPI
.
jsm
"
)
;
Cu
.
unload
(
"
chrome
:
/
/
loop
/
content
/
modules
/
LoopRooms
.
jsm
"
)
;
Cu
.
unload
(
"
chrome
:
/
/
loop
/
content
/
modules
/
MozLoopService
.
jsm
"
)
;
}
function
install
(
)
{
}
function
uninstall
(
)
{
}
