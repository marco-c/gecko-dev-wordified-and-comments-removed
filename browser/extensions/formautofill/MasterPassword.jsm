"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
MasterPassword
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
this
.
MasterPassword
=
{
async
waitForExistingDialog
(
)
{
if
(
!
Services
.
logins
.
uiBusy
)
{
log
.
debug
(
"
waitForExistingDialog
:
Dialog
isn
'
t
showing
.
isLoggedIn
:
"
Services
.
logins
.
isLoggedIn
)
;
return
Services
.
logins
.
isLoggedIn
;
}
return
new
Promise
(
(
resolve
)
=
>
{
log
.
debug
(
"
waitForExistingDialog
:
Observing
the
open
dialog
"
)
;
let
observer
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
observe
(
subject
topic
data
)
{
log
.
debug
(
"
waitForExistingDialog
:
Got
notification
:
"
topic
)
;
Services
.
obs
.
removeObserver
(
this
"
passwordmgr
-
crypto
-
login
"
)
;
Services
.
obs
.
removeObserver
(
this
"
passwordmgr
-
crypto
-
loginCanceled
"
)
;
if
(
topic
=
=
"
passwordmgr
-
crypto
-
loginCanceled
"
)
{
resolve
(
false
)
;
return
;
}
resolve
(
true
)
;
}
}
;
Services
.
obs
.
addObserver
(
observer
"
passwordmgr
-
crypto
-
login
"
)
;
Services
.
obs
.
addObserver
(
observer
"
passwordmgr
-
crypto
-
loginCanceled
"
)
;
let
promptWin
=
Services
.
wm
.
getMostRecentWindow
(
"
prompt
:
promptPassword
"
)
;
promptWin
.
focus
(
)
;
promptWin
.
getAttention
(
)
;
}
)
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
ConsoleAPI
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
.
ConsoleAPI
;
return
new
ConsoleAPI
(
{
maxLogLevelPref
:
"
masterPassword
.
loglevel
"
prefix
:
"
Master
Password
"
}
)
;
}
)
;
