"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FormAutofillContent
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
manager
:
Cm
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ProfileAutoCompleteResult
"
"
resource
:
/
/
formautofill
/
ProfileAutoCompleteResult
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FormAutofillHandler
"
"
resource
:
/
/
formautofill
/
FormAutofillHandler
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FormLikeFactory
"
"
resource
:
/
/
gre
/
modules
/
FormLikeFactory
.
jsm
"
)
;
const
formFillController
=
Cc
[
"
mozilla
.
org
/
satchel
/
form
-
fill
-
controller
;
1
"
]
.
getService
(
Ci
.
nsIFormFillController
)
;
const
AUTOFILL_FIELDS_THRESHOLD
=
3
;
function
AutocompleteFactory
(
)
{
}
AutocompleteFactory
.
prototype
=
{
register
(
targetConstructor
)
{
let
proto
=
targetConstructor
.
prototype
;
this
.
_classID
=
proto
.
classID
;
let
factory
=
XPCOMUtils
.
_getFactory
(
targetConstructor
)
;
this
.
_factory
=
factory
;
let
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
registerFactory
(
proto
.
classID
proto
.
classDescription
proto
.
contractID
factory
)
;
if
(
proto
.
classID2
)
{
this
.
_classID2
=
proto
.
classID2
;
registrar
.
registerFactory
(
proto
.
classID2
proto
.
classDescription
proto
.
contractID2
factory
)
;
}
}
unregister
(
)
{
let
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
unregisterFactory
(
this
.
_classID
this
.
_factory
)
;
if
(
this
.
_classID2
)
{
registrar
.
unregisterFactory
(
this
.
_classID2
this
.
_factory
)
;
}
this
.
_factory
=
null
;
}
}
;
function
AutofillProfileAutoCompleteSearch
(
)
{
}
AutofillProfileAutoCompleteSearch
.
prototype
=
{
classID
:
Components
.
ID
(
"
4f9f1e4c
-
7f2c
-
439e
-
9c9e
-
566b68bc187d
"
)
contractID
:
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
autofill
-
profiles
"
classDescription
:
"
AutofillProfileAutoCompleteSearch
"
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIAutoCompleteSearch
]
)
startSearch
(
searchString
searchParam
previousResult
listener
)
{
this
.
forceStop
=
false
;
let
info
=
this
.
getInputDetails
(
)
;
this
.
getProfiles
(
{
info
searchString
}
)
.
then
(
(
profiles
)
=
>
{
if
(
this
.
forceStop
)
{
return
;
}
let
result
=
new
ProfileAutoCompleteResult
(
searchString
info
profiles
{
}
)
;
listener
.
onSearchResult
(
this
result
)
;
}
)
;
}
stopSearch
(
)
{
this
.
forceStop
=
true
;
}
getProfiles
(
data
)
{
return
new
Promise
(
(
resolve
)
=
>
{
Services
.
cpmm
.
addMessageListener
(
"
FormAutofill
:
Profiles
"
function
getResult
(
result
)
{
Services
.
cpmm
.
removeMessageListener
(
"
FormAutofill
:
Profiles
"
getResult
)
;
resolve
(
result
.
data
)
;
}
)
;
Services
.
cpmm
.
sendAsyncMessage
(
"
FormAutofill
:
GetProfiles
"
data
)
;
}
)
;
}
getInputDetails
(
)
{
return
FormAutofillContent
.
getInputDetails
(
formFillController
.
focusedInput
)
;
}
getFormDetails
(
)
{
return
FormAutofillContent
.
getFormDetails
(
formFillController
.
focusedInput
)
;
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
AutofillProfileAutoCompleteSearch
]
)
;
let
ProfileAutocomplete
=
{
_registered
:
false
_factory
:
null
ensureRegistered
(
)
{
if
(
this
.
_registered
)
{
return
;
}
this
.
_factory
=
new
AutocompleteFactory
(
)
;
this
.
_factory
.
register
(
AutofillProfileAutoCompleteSearch
)
;
this
.
_registered
=
true
;
}
ensureUnregistered
(
)
{
if
(
!
this
.
_registered
)
{
return
;
}
this
.
_factory
.
unregister
(
)
;
this
.
_factory
=
null
;
this
.
_registered
=
false
;
}
}
;
var
FormAutofillContent
=
{
_formsDetails
:
[
]
init
(
)
{
Services
.
cpmm
.
addMessageListener
(
"
FormAutofill
:
enabledStatus
"
(
result
)
=
>
{
if
(
result
.
data
)
{
ProfileAutocomplete
.
ensureRegistered
(
)
;
}
else
{
ProfileAutocomplete
.
ensureUnregistered
(
)
;
}
}
)
;
Services
.
cpmm
.
sendAsyncMessage
(
"
FormAutofill
:
getEnabledStatus
"
)
;
}
getInputDetails
(
element
)
{
for
(
let
formDetails
of
this
.
_formsDetails
)
{
for
(
let
detail
of
formDetails
)
{
if
(
element
=
=
detail
.
element
)
{
return
this
.
_serializeInfo
(
detail
)
;
}
}
}
return
null
;
}
getFormDetails
(
element
)
{
for
(
let
formDetails
of
this
.
_formsDetails
)
{
if
(
formDetails
.
some
(
(
detail
)
=
>
detail
.
element
=
=
element
)
)
{
return
formDetails
.
map
(
(
detail
)
=
>
this
.
_serializeInfo
(
detail
)
)
;
}
}
return
null
;
}
_serializeInfo
(
detail
)
{
let
info
=
Object
.
assign
(
{
}
detail
)
;
delete
info
.
element
;
return
info
;
}
_identifyAutofillFields
(
doc
)
{
let
forms
=
[
]
;
for
(
let
field
of
doc
.
getElementsByTagName
(
"
input
"
)
)
{
if
(
!
field
.
mozIsTextField
(
true
)
)
{
continue
;
}
let
formLike
=
FormLikeFactory
.
createFromField
(
field
)
;
if
(
!
forms
.
some
(
form
=
>
form
.
rootElement
=
=
=
formLike
.
rootElement
)
)
{
forms
.
push
(
formLike
)
;
}
}
forms
.
forEach
(
form
=
>
{
let
formHandler
=
new
FormAutofillHandler
(
form
)
;
formHandler
.
collectFormFields
(
)
;
if
(
formHandler
.
fieldDetails
.
length
<
AUTOFILL_FIELDS_THRESHOLD
)
{
return
;
}
this
.
_formsDetails
.
push
(
formHandler
.
fieldDetails
)
;
formHandler
.
fieldDetails
.
forEach
(
detail
=
>
this
.
_markAsAutofillField
(
detail
.
element
)
)
;
}
)
;
}
_markAsAutofillField
(
field
)
{
formFillController
.
markAsAutofillField
(
field
)
;
}
}
;
FormAutofillContent
.
init
(
)
;
