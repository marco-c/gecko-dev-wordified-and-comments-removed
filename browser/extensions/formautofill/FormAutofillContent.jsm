"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
FormAutofillContent
"
]
;
const
Cm
=
Components
.
manager
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AddressResult
"
"
resource
:
/
/
formautofill
/
ProfileAutoCompleteResult
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CreditCardResult
"
"
resource
:
/
/
formautofill
/
ProfileAutoCompleteResult
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FormAutofill
"
"
resource
:
/
/
formautofill
/
FormAutofill
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FormAutofillHandler
"
"
resource
:
/
/
formautofill
/
FormAutofillHandler
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FormAutofillUtils
"
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FormLikeFactory
"
"
resource
:
/
/
gre
/
modules
/
FormLikeFactory
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
InsecurePasswordUtils
"
"
resource
:
/
/
gre
/
modules
/
InsecurePasswordUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
const
formFillController
=
Cc
[
"
mozilla
.
org
/
satchel
/
form
-
fill
-
controller
;
1
"
]
.
getService
(
Ci
.
nsIFormFillController
)
;
const
autocompleteController
=
Cc
[
"
mozilla
.
org
/
autocomplete
/
controller
;
1
"
]
.
getService
(
Ci
.
nsIAutoCompleteController
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
ADDRESSES_COLLECTION_NAME
"
(
)
=
>
FormAutofillUtils
.
ADDRESSES_COLLECTION_NAME
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
CREDITCARDS_COLLECTION_NAME
"
(
)
=
>
FormAutofillUtils
.
CREDITCARDS_COLLECTION_NAME
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
FIELD_STATES
"
(
)
=
>
FormAutofillUtils
.
FIELD_STATES
)
;
function
AutocompleteFactory
(
)
{
}
AutocompleteFactory
.
prototype
=
{
register
(
targetConstructor
)
{
let
proto
=
targetConstructor
.
prototype
;
this
.
_classID
=
proto
.
classID
;
let
factory
=
XPCOMUtils
.
_getFactory
(
targetConstructor
)
;
this
.
_factory
=
factory
;
let
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
registerFactory
(
proto
.
classID
proto
.
classDescription
proto
.
contractID
factory
)
;
if
(
proto
.
classID2
)
{
this
.
_classID2
=
proto
.
classID2
;
registrar
.
registerFactory
(
proto
.
classID2
proto
.
classDescription
proto
.
contractID2
factory
)
;
}
}
unregister
(
)
{
let
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
unregisterFactory
(
this
.
_classID
this
.
_factory
)
;
if
(
this
.
_classID2
)
{
registrar
.
unregisterFactory
(
this
.
_classID2
this
.
_factory
)
;
}
this
.
_factory
=
null
;
}
}
;
function
AutofillProfileAutoCompleteSearch
(
)
{
FormAutofill
.
defineLazyLogGetter
(
this
"
AutofillProfileAutoCompleteSearch
"
)
;
}
AutofillProfileAutoCompleteSearch
.
prototype
=
{
classID
:
Components
.
ID
(
"
4f9f1e4c
-
7f2c
-
439e
-
9c9e
-
566b68bc187d
"
)
contractID
:
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
autofill
-
profiles
"
classDescription
:
"
AutofillProfileAutoCompleteSearch
"
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIAutoCompleteSearch
]
)
startSearch
(
searchString
searchParam
previousResult
listener
)
{
let
{
activeInput
activeSection
activeFieldDetail
savedFieldNames
}
=
FormAutofillContent
;
this
.
forceStop
=
false
;
this
.
debug
(
"
startSearch
:
for
"
searchString
"
with
input
"
activeInput
)
;
let
isAddressField
=
FormAutofillUtils
.
isAddressField
(
activeFieldDetail
.
fieldName
)
;
let
isInputAutofilled
=
activeFieldDetail
.
state
=
=
FIELD_STATES
.
AUTO_FILLED
;
let
allFieldNames
=
activeSection
.
allFieldNames
;
let
filledRecordGUID
=
activeSection
.
filledRecordGUID
;
let
searchPermitted
=
isAddressField
?
FormAutofill
.
isAutofillAddressesEnabled
:
FormAutofill
.
isAutofillCreditCardsEnabled
;
let
AutocompleteResult
=
isAddressField
?
AddressResult
:
CreditCardResult
;
let
isFormAutofillSearch
=
true
;
let
pendingSearchResult
=
null
;
ProfileAutocomplete
.
lastProfileAutoCompleteFocusedInput
=
activeInput
;
if
(
!
searchPermitted
|
|
!
savedFieldNames
.
has
(
activeFieldDetail
.
fieldName
)
|
|
(
!
isInputAutofilled
&
&
filledRecordGUID
)
|
|
(
isAddressField
&
&
allFieldNames
.
filter
(
field
=
>
savedFieldNames
.
has
(
field
)
)
.
length
<
FormAutofillUtils
.
AUTOFILL_FIELDS_THRESHOLD
)
)
{
isFormAutofillSearch
=
false
;
if
(
activeInput
.
autocomplete
=
=
"
off
"
)
{
pendingSearchResult
=
new
AutocompleteResult
(
"
"
"
"
[
]
[
]
{
}
)
;
}
else
{
pendingSearchResult
=
new
Promise
(
resolve
=
>
{
let
formHistory
=
Cc
[
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
form
-
history
"
]
.
createInstance
(
Ci
.
nsIAutoCompleteSearch
)
;
formHistory
.
startSearch
(
searchString
searchParam
previousResult
{
onSearchResult
:
(
_
result
)
=
>
resolve
(
result
)
}
)
;
}
)
;
}
}
else
if
(
isInputAutofilled
)
{
pendingSearchResult
=
new
AutocompleteResult
(
searchString
"
"
[
]
[
]
{
isInputAutofilled
}
)
;
}
else
{
let
infoWithoutElement
=
{
.
.
.
activeFieldDetail
}
;
delete
infoWithoutElement
.
elementWeakRef
;
let
data
=
{
collectionName
:
isAddressField
?
ADDRESSES_COLLECTION_NAME
:
CREDITCARDS_COLLECTION_NAME
info
:
infoWithoutElement
searchString
}
;
pendingSearchResult
=
this
.
_getRecords
(
data
)
.
then
(
records
=
>
{
if
(
this
.
forceStop
)
{
return
null
;
}
records
.
sort
(
(
a
b
)
=
>
b
.
timeLastUsed
-
a
.
timeLastUsed
)
;
let
adaptedRecords
=
activeSection
.
getAdaptedProfiles
(
records
)
;
let
handler
=
FormAutofillContent
.
activeHandler
;
let
isSecure
=
InsecurePasswordUtils
.
isFormSecure
(
handler
.
form
)
;
return
new
AutocompleteResult
(
searchString
activeFieldDetail
.
fieldName
allFieldNames
adaptedRecords
{
isSecure
isInputAutofilled
}
)
;
}
)
;
}
Promise
.
resolve
(
pendingSearchResult
)
.
then
(
result
=
>
{
listener
.
onSearchResult
(
this
result
)
;
if
(
isFormAutofillSearch
)
{
ProfileAutocomplete
.
lastProfileAutoCompleteResult
=
result
;
autocompleteController
.
resetInternalState
(
)
;
}
else
{
ProfileAutocomplete
.
lastProfileAutoCompleteResult
=
null
;
}
}
)
;
}
stopSearch
(
)
{
ProfileAutocomplete
.
lastProfileAutoCompleteResult
=
null
;
this
.
forceStop
=
true
;
}
_getRecords
(
data
)
{
this
.
debug
(
"
_getRecords
with
data
:
"
data
)
;
return
new
Promise
(
resolve
=
>
{
Services
.
cpmm
.
addMessageListener
(
"
FormAutofill
:
Records
"
function
getResult
(
result
)
{
Services
.
cpmm
.
removeMessageListener
(
"
FormAutofill
:
Records
"
getResult
)
;
resolve
(
result
.
data
)
;
}
)
;
Services
.
cpmm
.
sendAsyncMessage
(
"
FormAutofill
:
GetRecords
"
data
)
;
}
)
;
}
}
;
let
ProfileAutocomplete
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
lastProfileAutoCompleteResult
:
null
lastProfileAutoCompleteFocusedInput
:
null
_registered
:
false
_factory
:
null
ensureRegistered
(
)
{
if
(
this
.
_registered
)
{
return
;
}
FormAutofill
.
defineLazyLogGetter
(
this
"
ProfileAutocomplete
"
)
;
this
.
debug
(
"
ensureRegistered
"
)
;
this
.
_factory
=
new
AutocompleteFactory
(
)
;
this
.
_factory
.
register
(
AutofillProfileAutoCompleteSearch
)
;
this
.
_registered
=
true
;
Services
.
obs
.
addObserver
(
this
"
autocomplete
-
will
-
enter
-
text
"
)
;
this
.
debug
(
"
ensureRegistered
.
Finished
with
_registered
:
"
this
.
_registered
)
;
}
ensureUnregistered
(
)
{
if
(
!
this
.
_registered
)
{
return
;
}
this
.
debug
(
"
ensureUnregistered
"
)
;
this
.
_factory
.
unregister
(
)
;
this
.
_factory
=
null
;
this
.
_registered
=
false
;
this
.
_lastAutoCompleteResult
=
null
;
Services
.
obs
.
removeObserver
(
this
"
autocomplete
-
will
-
enter
-
text
"
)
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
autocomplete
-
will
-
enter
-
text
"
:
{
if
(
!
FormAutofillContent
.
activeInput
)
{
break
;
}
this
.
_fillFromAutocompleteRow
(
FormAutofillContent
.
activeInput
)
;
break
;
}
}
}
getActorFromWindow
(
contentWindow
)
{
return
contentWindow
.
getWindowGlobalChild
(
)
.
getActor
(
"
AutoComplete
"
)
;
}
_getSelectedIndex
(
contentWindow
)
{
let
actor
=
this
.
getActorFromWindow
(
contentWindow
)
;
if
(
!
actor
)
{
throw
new
Error
(
"
Invalid
autocomplete
selectedIndex
"
)
;
}
return
actor
.
selectedIndex
;
}
_fillFromAutocompleteRow
(
focusedInput
)
{
this
.
debug
(
"
_fillFromAutocompleteRow
:
"
focusedInput
)
;
let
formDetails
=
FormAutofillContent
.
activeFormDetails
;
if
(
!
formDetails
)
{
return
;
}
let
selectedIndex
=
this
.
_getSelectedIndex
(
focusedInput
.
ownerGlobal
)
;
if
(
selectedIndex
=
=
-
1
|
|
!
this
.
lastProfileAutoCompleteResult
|
|
this
.
lastProfileAutoCompleteResult
.
getStyleAt
(
selectedIndex
)
!
=
"
autofill
-
profile
"
)
{
return
;
}
let
profile
=
JSON
.
parse
(
this
.
lastProfileAutoCompleteResult
.
getCommentAt
(
selectedIndex
)
)
;
FormAutofillContent
.
activeHandler
.
autofillFormFields
(
profile
)
;
}
_clearProfilePreview
(
)
{
if
(
!
this
.
lastProfileAutoCompleteFocusedInput
|
|
!
FormAutofillContent
.
activeSection
)
{
return
;
}
FormAutofillContent
.
activeSection
.
clearPreviewedFormFields
(
)
;
}
_previewSelectedProfile
(
selectedIndex
)
{
if
(
!
FormAutofillContent
.
activeInput
|
|
!
FormAutofillContent
.
activeFormDetails
)
{
return
;
}
if
(
!
this
.
lastProfileAutoCompleteResult
|
|
this
.
lastProfileAutoCompleteResult
.
getStyleAt
(
selectedIndex
)
!
=
"
autofill
-
profile
"
)
{
return
;
}
let
profile
=
JSON
.
parse
(
this
.
lastProfileAutoCompleteResult
.
getCommentAt
(
selectedIndex
)
)
;
FormAutofillContent
.
activeSection
.
previewFormFields
(
profile
)
;
}
}
;
var
FormAutofillContent
=
{
_formsDetails
:
new
WeakMap
(
)
get
savedFieldNames
(
)
{
return
Services
.
cpmm
.
sharedData
.
get
(
"
FormAutofill
:
savedFieldNames
"
)
;
}
_activeItems
:
{
}
init
(
)
{
FormAutofill
.
defineLazyLogGetter
(
this
"
FormAutofillContent
"
)
;
this
.
debug
(
"
init
"
)
;
Services
.
cpmm
.
sharedData
.
addEventListener
(
"
change
"
this
)
;
let
autofillEnabled
=
Services
.
cpmm
.
sharedData
.
get
(
"
FormAutofill
:
enabled
"
)
;
let
shouldEnableAutofill
=
autofillEnabled
=
=
=
undefined
&
&
(
FormAutofill
.
isAutofillAddressesEnabled
|
|
FormAutofill
.
isAutofillCreditCardsEnabled
)
;
if
(
autofillEnabled
|
|
shouldEnableAutofill
)
{
ProfileAutocomplete
.
ensureRegistered
(
)
;
}
}
_onFormSubmit
(
profile
domWin
timeStartedFillingMS
)
{
let
mm
=
this
.
_messageManagerFromWindow
(
domWin
)
;
mm
.
sendAsyncMessage
(
"
FormAutofill
:
OnFormSubmit
"
{
profile
timeStartedFillingMS
}
)
;
}
formSubmitted
(
formElement
domWin
=
formElement
.
ownerGlobal
)
{
this
.
debug
(
"
Handling
form
submission
"
)
;
if
(
!
FormAutofill
.
isAutofillEnabled
)
{
this
.
debug
(
"
Form
Autofill
is
disabled
"
)
;
return
;
}
if
(
domWin
&
&
PrivateBrowsingUtils
.
isContentWindowPrivate
(
domWin
)
)
{
this
.
debug
(
"
Ignoring
submission
in
a
private
window
"
)
;
return
;
}
let
handler
=
this
.
_formsDetails
.
get
(
formElement
)
;
if
(
!
handler
)
{
this
.
debug
(
"
Form
element
could
not
map
to
an
existing
handler
"
)
;
return
;
}
let
records
=
handler
.
createRecords
(
)
;
if
(
!
Object
.
values
(
records
)
.
some
(
typeRecords
=
>
typeRecords
.
length
)
)
{
return
;
}
this
.
_onFormSubmit
(
records
domWin
handler
.
timeStartedFillingMS
)
;
}
handleEvent
(
evt
)
{
switch
(
evt
.
type
)
{
case
"
change
"
:
{
if
(
!
evt
.
changedKeys
.
includes
(
"
FormAutofill
:
enabled
"
)
)
{
return
;
}
if
(
Services
.
cpmm
.
sharedData
.
get
(
"
FormAutofill
:
enabled
"
)
)
{
ProfileAutocomplete
.
ensureRegistered
(
)
;
}
else
{
ProfileAutocomplete
.
ensureUnregistered
(
)
;
}
break
;
}
}
}
_getFormHandler
(
element
)
{
if
(
!
element
)
{
return
null
;
}
let
rootElement
=
FormLikeFactory
.
findRootForField
(
element
)
;
return
this
.
_formsDetails
.
get
(
rootElement
)
;
}
get
activeFormDetails
(
)
{
let
formHandler
=
this
.
activeHandler
;
return
formHandler
?
formHandler
.
fieldDetails
:
null
;
}
updateActiveInput
(
element
)
{
element
=
element
|
|
formFillController
.
focusedInput
;
if
(
!
element
)
{
this
.
_activeItems
=
{
}
;
return
;
}
this
.
_activeItems
=
{
elementWeakRef
:
Cu
.
getWeakReference
(
element
)
fieldDetail
:
null
}
;
}
get
activeInput
(
)
{
let
elementWeakRef
=
this
.
_activeItems
.
elementWeakRef
;
return
elementWeakRef
?
elementWeakRef
.
get
(
)
:
null
;
}
get
activeHandler
(
)
{
const
activeInput
=
this
.
activeInput
;
if
(
!
activeInput
)
{
return
null
;
}
let
handler
=
this
.
_getFormHandler
(
activeInput
)
;
if
(
handler
)
{
handler
.
focusedInput
=
activeInput
;
}
return
handler
;
}
get
activeSection
(
)
{
let
formHandler
=
this
.
activeHandler
;
return
formHandler
?
formHandler
.
activeSection
:
null
;
}
get
activeFieldDetail
(
)
{
if
(
!
this
.
_activeItems
.
fieldDetail
)
{
let
formDetails
=
this
.
activeFormDetails
;
if
(
!
formDetails
)
{
return
null
;
}
for
(
let
detail
of
formDetails
)
{
let
detailElement
=
detail
.
elementWeakRef
.
get
(
)
;
if
(
detailElement
&
&
this
.
activeInput
=
=
detailElement
)
{
this
.
_activeItems
.
fieldDetail
=
detail
;
break
;
}
}
}
return
this
.
_activeItems
.
fieldDetail
;
}
identifyAutofillFields
(
element
)
{
this
.
debug
(
"
identifyAutofillFields
:
"
String
(
element
.
ownerDocument
.
location
)
)
;
if
(
!
this
.
savedFieldNames
)
{
this
.
debug
(
"
identifyAutofillFields
:
savedFieldNames
are
not
known
yet
"
)
;
Services
.
cpmm
.
sendAsyncMessage
(
"
FormAutofill
:
InitStorage
"
)
;
}
let
formHandler
=
this
.
_getFormHandler
(
element
)
;
if
(
!
formHandler
)
{
let
formLike
=
FormLikeFactory
.
createFromField
(
element
)
;
formHandler
=
new
FormAutofillHandler
(
formLike
)
;
}
else
if
(
!
formHandler
.
updateFormIfNeeded
(
element
)
)
{
this
.
debug
(
"
No
control
is
removed
or
inserted
since
last
collection
.
"
)
;
return
;
}
let
validDetails
=
formHandler
.
collectFormFields
(
)
;
this
.
_formsDetails
.
set
(
formHandler
.
form
.
rootElement
formHandler
)
;
this
.
debug
(
"
Adding
form
handler
to
_formsDetails
:
"
formHandler
)
;
validDetails
.
forEach
(
detail
=
>
this
.
_markAsAutofillField
(
detail
.
elementWeakRef
.
get
(
)
)
)
;
}
clearForm
(
)
{
let
focusedInput
=
this
.
activeInput
|
|
ProfileAutocomplete
.
_lastAutoCompleteFocusedInput
;
if
(
!
focusedInput
)
{
return
;
}
this
.
activeSection
.
clearPopulatedForm
(
)
;
}
previewProfile
(
doc
)
{
let
docWin
=
doc
.
ownerGlobal
;
let
selectedIndex
=
ProfileAutocomplete
.
_getSelectedIndex
(
docWin
)
;
let
lastAutoCompleteResult
=
ProfileAutocomplete
.
lastProfileAutoCompleteResult
;
let
focusedInput
=
this
.
activeInput
;
let
mm
=
this
.
_messageManagerFromWindow
(
docWin
)
;
if
(
selectedIndex
=
=
=
-
1
|
|
!
focusedInput
|
|
!
lastAutoCompleteResult
|
|
lastAutoCompleteResult
.
getStyleAt
(
selectedIndex
)
!
=
"
autofill
-
profile
"
)
{
mm
.
sendAsyncMessage
(
"
FormAutofill
:
UpdateWarningMessage
"
{
}
)
;
ProfileAutocomplete
.
_clearProfilePreview
(
)
;
}
else
{
let
focusedInputDetails
=
this
.
activeFieldDetail
;
let
profile
=
JSON
.
parse
(
lastAutoCompleteResult
.
getCommentAt
(
selectedIndex
)
)
;
let
allFieldNames
=
FormAutofillContent
.
activeSection
.
allFieldNames
;
let
profileFields
=
allFieldNames
.
filter
(
fieldName
=
>
!
!
profile
[
fieldName
]
)
;
let
focusedCategory
=
FormAutofillUtils
.
getCategoryFromFieldName
(
focusedInputDetails
.
fieldName
)
;
let
categories
=
FormAutofillUtils
.
getCategoriesFromFieldNames
(
profileFields
)
;
mm
.
sendAsyncMessage
(
"
FormAutofill
:
UpdateWarningMessage
"
{
focusedCategory
categories
}
)
;
ProfileAutocomplete
.
_previewSelectedProfile
(
selectedIndex
)
;
}
}
onPopupClosed
(
selectedRowStyle
)
{
ProfileAutocomplete
.
_clearProfilePreview
(
)
;
let
lastAutoCompleteResult
=
ProfileAutocomplete
.
lastProfileAutoCompleteResult
;
let
focusedInput
=
FormAutofillContent
.
activeInput
;
if
(
lastAutoCompleteResult
&
&
FormAutofillContent
.
_keyDownEnterForInput
&
&
focusedInput
=
=
=
FormAutofillContent
.
_keyDownEnterForInput
&
&
focusedInput
=
=
=
ProfileAutocomplete
.
lastProfileAutoCompleteFocusedInput
)
{
if
(
selectedRowStyle
=
=
"
autofill
-
footer
"
)
{
Services
.
cpmm
.
sendAsyncMessage
(
"
FormAutofill
:
OpenPreferences
"
)
;
}
else
if
(
selectedRowStyle
=
=
"
autofill
-
clear
-
button
"
)
{
FormAutofillContent
.
clearForm
(
)
;
}
}
}
_markAsAutofillField
(
field
)
{
if
(
!
field
|
|
ChromeUtils
.
getClassName
(
field
)
!
=
=
"
HTMLInputElement
"
)
{
return
;
}
formFillController
.
markAsAutofillField
(
field
)
;
}
_messageManagerFromWindow
(
win
)
{
return
win
.
docShell
.
messageManager
;
}
_onKeyDown
(
e
)
{
delete
FormAutofillContent
.
_keyDownEnterForInput
;
let
lastAutoCompleteResult
=
ProfileAutocomplete
.
lastProfileAutoCompleteResult
;
let
focusedInput
=
FormAutofillContent
.
activeInput
;
if
(
e
.
keyCode
!
=
e
.
DOM_VK_RETURN
|
|
!
lastAutoCompleteResult
|
|
!
focusedInput
|
|
focusedInput
!
=
ProfileAutocomplete
.
lastProfileAutoCompleteFocusedInput
)
{
return
;
}
FormAutofillContent
.
_keyDownEnterForInput
=
focusedInput
;
}
}
;
FormAutofillContent
.
init
(
)
;
