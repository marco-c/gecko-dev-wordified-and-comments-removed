"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
formAutofillParent
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
FormAutofill
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofill
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
CreditCard
:
"
resource
:
/
/
gre
/
modules
/
CreditCard
.
jsm
"
FormAutofillPreferences
:
"
resource
:
/
/
formautofill
/
FormAutofillPreferences
.
jsm
"
FormAutofillDoorhanger
:
"
resource
:
/
/
formautofill
/
FormAutofillDoorhanger
.
jsm
"
FormAutofillUtils
:
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
OSKeyStore
:
"
resource
:
/
/
formautofill
/
OSKeyStore
.
jsm
"
}
)
;
this
.
log
=
null
;
FormAutofill
.
defineLazyLogGetter
(
this
EXPORTED_SYMBOLS
[
0
]
)
;
const
{
ENABLED_AUTOFILL_ADDRESSES_PREF
ENABLED_AUTOFILL_CREDITCARDS_PREF
}
=
FormAutofill
;
const
{
ADDRESSES_COLLECTION_NAME
CREDITCARDS_COLLECTION_NAME
}
=
FormAutofillUtils
;
function
FormAutofillParent
(
)
{
XPCOMUtils
.
defineLazyGetter
(
this
"
formAutofillStorage
"
(
)
=
>
{
let
{
formAutofillStorage
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillStorage
.
jsm
"
)
;
log
.
debug
(
"
Loading
formAutofillStorage
"
)
;
formAutofillStorage
.
initialize
(
)
.
then
(
(
)
=
>
{
this
.
_updateSavedFieldNames
(
)
;
}
)
;
return
formAutofillStorage
;
}
)
;
}
FormAutofillParent
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
_active
:
null
_initialized
:
false
get
initialized
(
)
{
return
this
.
_initialized
;
}
async
init
(
)
{
if
(
this
.
_initialized
)
{
return
;
}
this
.
_initialized
=
true
;
Services
.
obs
.
addObserver
(
this
"
sync
-
pane
-
loaded
"
)
;
Services
.
ppmm
.
addMessageListener
(
"
FormAutofill
:
InitStorage
"
this
)
;
Services
.
ppmm
.
addMessageListener
(
"
FormAutofill
:
GetRecords
"
this
)
;
Services
.
ppmm
.
addMessageListener
(
"
FormAutofill
:
SaveAddress
"
this
)
;
Services
.
ppmm
.
addMessageListener
(
"
FormAutofill
:
RemoveAddresses
"
this
)
;
Services
.
ppmm
.
addMessageListener
(
"
FormAutofill
:
OpenPreferences
"
this
)
;
Services
.
mm
.
addMessageListener
(
"
FormAutofill
:
OnFormSubmit
"
this
)
;
Services
.
prefs
.
addObserver
(
ENABLED_AUTOFILL_ADDRESSES_PREF
this
)
;
Services
.
obs
.
addObserver
(
this
"
formautofill
-
storage
-
changed
"
)
;
if
(
FormAutofill
.
isAutofillCreditCardsAvailable
)
{
Services
.
ppmm
.
addMessageListener
(
"
FormAutofill
:
SaveCreditCard
"
this
)
;
Services
.
ppmm
.
addMessageListener
(
"
FormAutofill
:
RemoveCreditCards
"
this
)
;
Services
.
ppmm
.
addMessageListener
(
"
FormAutofill
:
GetDecryptedString
"
this
)
;
Services
.
prefs
.
addObserver
(
ENABLED_AUTOFILL_CREDITCARDS_PREF
this
)
;
}
}
observe
(
subject
topic
data
)
{
log
.
debug
(
"
observe
:
"
topic
"
with
data
:
"
data
)
;
switch
(
topic
)
{
case
"
sync
-
pane
-
loaded
"
:
{
let
formAutofillPreferences
=
new
FormAutofillPreferences
(
)
;
let
document
=
subject
.
document
;
let
prefFragment
=
formAutofillPreferences
.
init
(
document
)
;
let
formAutofillGroupBox
=
document
.
getElementById
(
"
formAutofillGroupBox
"
)
;
formAutofillGroupBox
.
appendChild
(
prefFragment
)
;
break
;
}
case
"
nsPref
:
changed
"
:
{
this
.
_updateStatus
(
)
;
break
;
}
case
"
formautofill
-
storage
-
changed
"
:
{
if
(
data
=
=
"
notifyUsed
"
)
{
break
;
}
this
.
_updateSavedFieldNames
(
)
;
break
;
}
default
:
{
throw
new
Error
(
FormAutofillParent
:
Unexpected
topic
observed
:
{
topic
}
)
;
}
}
}
_onStatusChanged
(
)
{
log
.
debug
(
"
_onStatusChanged
:
Status
changed
to
"
this
.
_active
)
;
Services
.
ppmm
.
broadcastAsyncMessage
(
"
FormAutofill
:
enabledStatus
"
this
.
_active
)
;
Services
.
ppmm
.
initialProcessData
.
autofillEnabled
=
this
.
_active
;
}
_computeStatus
(
)
{
const
savedFieldNames
=
Services
.
ppmm
.
initialProcessData
.
autofillSavedFieldNames
;
return
(
Services
.
prefs
.
getBoolPref
(
ENABLED_AUTOFILL_ADDRESSES_PREF
)
|
|
Services
.
prefs
.
getBoolPref
(
ENABLED_AUTOFILL_CREDITCARDS_PREF
)
)
&
&
savedFieldNames
&
&
savedFieldNames
.
size
>
0
;
}
_updateStatus
(
)
{
log
.
debug
(
"
_updateStatus
"
)
;
let
wasActive
=
this
.
_active
;
this
.
_active
=
this
.
_computeStatus
(
)
;
if
(
this
.
_active
!
=
=
wasActive
)
{
this
.
_onStatusChanged
(
)
;
}
}
async
receiveMessage
(
{
name
data
target
}
)
{
switch
(
name
)
{
case
"
FormAutofill
:
InitStorage
"
:
{
await
this
.
formAutofillStorage
.
initialize
(
)
;
break
;
}
case
"
FormAutofill
:
GetRecords
"
:
{
await
this
.
_getRecords
(
data
target
)
;
break
;
}
case
"
FormAutofill
:
SaveAddress
"
:
{
if
(
data
.
guid
)
{
await
this
.
formAutofillStorage
.
addresses
.
update
(
data
.
guid
data
.
address
)
;
}
else
{
await
this
.
formAutofillStorage
.
addresses
.
add
(
data
.
address
)
;
}
break
;
}
case
"
FormAutofill
:
SaveCreditCard
"
:
{
if
(
!
await
OSKeyStore
.
ensureLoggedIn
(
)
)
{
log
.
warn
(
"
User
canceled
encryption
login
"
)
;
return
;
}
await
this
.
formAutofillStorage
.
creditCards
.
add
(
data
.
creditcard
)
;
break
;
}
case
"
FormAutofill
:
RemoveAddresses
"
:
{
data
.
guids
.
forEach
(
guid
=
>
this
.
formAutofillStorage
.
addresses
.
remove
(
guid
)
)
;
break
;
}
case
"
FormAutofill
:
RemoveCreditCards
"
:
{
data
.
guids
.
forEach
(
guid
=
>
this
.
formAutofillStorage
.
creditCards
.
remove
(
guid
)
)
;
break
;
}
case
"
FormAutofill
:
OnFormSubmit
"
:
{
await
this
.
_onFormSubmit
(
data
target
)
;
break
;
}
case
"
FormAutofill
:
OpenPreferences
"
:
{
const
win
=
BrowserWindowTracker
.
getTopWindow
(
)
;
win
.
openPreferences
(
"
privacy
-
form
-
autofill
"
{
origin
:
"
autofillFooter
"
}
)
;
break
;
}
case
"
FormAutofill
:
GetDecryptedString
"
:
{
let
{
cipherText
reauth
}
=
data
;
let
string
;
try
{
string
=
await
OSKeyStore
.
decrypt
(
cipherText
reauth
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_ABORT
)
{
throw
e
;
}
log
.
warn
(
"
User
canceled
encryption
login
"
)
;
}
target
.
sendAsyncMessage
(
"
FormAutofill
:
DecryptedString
"
string
)
;
break
;
}
}
}
_uninit
(
)
{
this
.
formAutofillStorage
.
_saveImmediately
(
)
;
Services
.
ppmm
.
removeMessageListener
(
"
FormAutofill
:
InitStorage
"
this
)
;
Services
.
ppmm
.
removeMessageListener
(
"
FormAutofill
:
GetRecords
"
this
)
;
Services
.
ppmm
.
removeMessageListener
(
"
FormAutofill
:
SaveAddress
"
this
)
;
Services
.
ppmm
.
removeMessageListener
(
"
FormAutofill
:
RemoveAddresses
"
this
)
;
Services
.
obs
.
removeObserver
(
this
"
sync
-
pane
-
loaded
"
)
;
Services
.
prefs
.
removeObserver
(
ENABLED_AUTOFILL_ADDRESSES_PREF
this
)
;
if
(
FormAutofill
.
isAutofillCreditCardsAvailable
)
{
Services
.
ppmm
.
removeMessageListener
(
"
FormAutofill
:
SaveCreditCard
"
this
)
;
Services
.
ppmm
.
removeMessageListener
(
"
FormAutofill
:
RemoveCreditCards
"
this
)
;
Services
.
ppmm
.
removeMessageListener
(
"
FormAutofill
:
GetDecryptedString
"
this
)
;
Services
.
prefs
.
removeObserver
(
ENABLED_AUTOFILL_CREDITCARDS_PREF
this
)
;
}
}
async
_getRecords
(
{
collectionName
searchString
info
}
target
)
{
let
collection
=
this
.
formAutofillStorage
[
collectionName
]
;
if
(
!
collection
)
{
target
.
sendAsyncMessage
(
"
FormAutofill
:
Records
"
[
]
)
;
return
;
}
let
recordsInCollection
=
await
collection
.
getAll
(
)
;
if
(
!
info
|
|
!
info
.
fieldName
|
|
!
recordsInCollection
.
length
)
{
target
.
sendAsyncMessage
(
"
FormAutofill
:
Records
"
recordsInCollection
)
;
return
;
}
let
isCC
=
collectionName
=
=
CREDITCARDS_COLLECTION_NAME
;
if
(
isCC
&
&
info
.
fieldName
=
=
"
cc
-
number
"
)
{
recordsInCollection
=
recordsInCollection
.
filter
(
record
=
>
!
!
record
[
"
cc
-
number
"
]
)
;
target
.
sendAsyncMessage
(
"
FormAutofill
:
Records
"
recordsInCollection
)
;
return
;
}
let
records
=
[
]
;
let
lcSearchString
=
searchString
.
toLowerCase
(
)
;
for
(
let
record
of
recordsInCollection
)
{
let
fieldValue
=
record
[
info
.
fieldName
]
;
if
(
!
fieldValue
)
{
continue
;
}
if
(
collectionName
=
=
ADDRESSES_COLLECTION_NAME
&
&
record
.
country
&
&
!
FormAutofill
.
supportedCountries
.
includes
(
record
.
country
)
)
{
continue
;
}
if
(
lcSearchString
&
&
!
String
(
fieldValue
)
.
toLowerCase
(
)
.
startsWith
(
lcSearchString
)
)
{
continue
;
}
records
.
push
(
record
)
;
}
target
.
sendAsyncMessage
(
"
FormAutofill
:
Records
"
records
)
;
}
_updateSavedFieldNames
(
)
{
log
.
debug
(
"
_updateSavedFieldNames
"
)
;
if
(
FormAutofill
.
isAutofillCreditCardsAvailable
)
{
Services
.
ppmm
.
initialProcessData
.
autofillSavedFieldNames
=
new
Set
(
[
.
.
.
this
.
formAutofillStorage
.
addresses
.
getSavedFieldNames
(
)
.
.
.
this
.
formAutofillStorage
.
creditCards
.
getSavedFieldNames
(
)
]
)
;
}
else
{
Services
.
ppmm
.
initialProcessData
.
autofillSavedFieldNames
=
this
.
formAutofillStorage
.
addresses
.
getSavedFieldNames
(
)
;
}
Services
.
ppmm
.
broadcastAsyncMessage
(
"
FormAutofill
:
savedFieldNames
"
Services
.
ppmm
.
initialProcessData
.
autofillSavedFieldNames
)
;
this
.
_updateStatus
(
)
;
}
async
_onAddressSubmit
(
address
target
timeStartedFillingMS
)
{
let
showDoorhanger
=
null
;
if
(
address
.
guid
)
{
let
originalAddress
=
await
this
.
formAutofillStorage
.
addresses
.
get
(
address
.
guid
)
;
for
(
let
field
in
address
.
record
)
{
if
(
address
.
untouchedFields
.
includes
(
field
)
&
&
originalAddress
[
field
]
)
{
address
.
record
[
field
]
=
originalAddress
[
field
]
;
}
}
if
(
!
await
this
.
formAutofillStorage
.
addresses
.
mergeIfPossible
(
address
.
guid
address
.
record
true
)
)
{
this
.
_recordFormFillingTime
(
"
address
"
"
autofill
-
update
"
timeStartedFillingMS
)
;
showDoorhanger
=
async
(
)
=
>
{
const
description
=
FormAutofillUtils
.
getAddressLabel
(
address
.
record
)
;
const
state
=
await
FormAutofillDoorhanger
.
show
(
target
"
updateAddress
"
description
)
;
let
changedGUIDs
=
await
this
.
formAutofillStorage
.
addresses
.
mergeToStorage
(
address
.
record
true
)
;
switch
(
state
)
{
case
"
create
"
:
if
(
!
changedGUIDs
.
length
)
{
changedGUIDs
.
push
(
await
this
.
formAutofillStorage
.
addresses
.
add
(
address
.
record
)
)
;
}
break
;
case
"
update
"
:
if
(
!
changedGUIDs
.
length
)
{
await
this
.
formAutofillStorage
.
addresses
.
update
(
address
.
guid
address
.
record
true
)
;
changedGUIDs
.
push
(
address
.
guid
)
;
}
else
{
this
.
formAutofillStorage
.
addresses
.
remove
(
address
.
guid
)
;
}
break
;
}
changedGUIDs
.
forEach
(
guid
=
>
this
.
formAutofillStorage
.
addresses
.
notifyUsed
(
guid
)
)
;
}
;
Services
.
telemetry
.
scalarAdd
(
"
formautofill
.
addresses
.
fill_type_autofill_update
"
1
)
;
}
else
{
this
.
_recordFormFillingTime
(
"
address
"
"
autofill
"
timeStartedFillingMS
)
;
this
.
formAutofillStorage
.
addresses
.
notifyUsed
(
address
.
guid
)
;
Services
.
telemetry
.
scalarAdd
(
"
formautofill
.
addresses
.
fill_type_autofill
"
1
)
;
}
}
else
{
let
changedGUIDs
=
await
this
.
formAutofillStorage
.
addresses
.
mergeToStorage
(
address
.
record
)
;
if
(
!
changedGUIDs
.
length
)
{
changedGUIDs
.
push
(
await
this
.
formAutofillStorage
.
addresses
.
add
(
address
.
record
)
)
;
}
changedGUIDs
.
forEach
(
guid
=
>
this
.
formAutofillStorage
.
addresses
.
notifyUsed
(
guid
)
)
;
this
.
_recordFormFillingTime
(
"
address
"
"
manual
"
timeStartedFillingMS
)
;
if
(
FormAutofill
.
isAutofillAddressesFirstTimeUse
)
{
Services
.
prefs
.
setBoolPref
(
FormAutofill
.
ADDRESSES_FIRST_TIME_USE_PREF
false
)
;
showDoorhanger
=
async
(
)
=
>
{
const
description
=
FormAutofillUtils
.
getAddressLabel
(
address
.
record
)
;
const
state
=
await
FormAutofillDoorhanger
.
show
(
target
"
firstTimeUse
"
description
)
;
if
(
state
!
=
=
"
open
-
pref
"
)
{
return
;
}
target
.
ownerGlobal
.
openPreferences
(
"
privacy
-
address
-
autofill
"
{
origin
:
"
autofillDoorhanger
"
}
)
;
}
;
}
else
{
Services
.
telemetry
.
scalarAdd
(
"
formautofill
.
addresses
.
fill_type_manual
"
1
)
;
}
}
return
showDoorhanger
;
}
async
_onCreditCardSubmit
(
creditCard
target
timeStartedFillingMS
)
{
let
setUsedStatus
=
status
=
>
{
if
(
FormAutofill
.
AutofillCreditCardsUsedStatus
<
status
)
{
Services
.
prefs
.
setIntPref
(
FormAutofill
.
CREDITCARDS_USED_STATUS_PREF
status
)
;
}
}
;
if
(
creditCard
.
record
[
"
cc
-
type
"
]
&
&
!
CreditCard
.
isValidNetwork
(
creditCard
.
record
[
"
cc
-
type
"
]
)
)
{
delete
creditCard
.
record
[
"
cc
-
type
"
]
;
}
if
(
creditCard
.
guid
)
{
setUsedStatus
(
3
)
;
let
originalCCData
=
await
this
.
formAutofillStorage
.
creditCards
.
get
(
creditCard
.
guid
)
;
let
recordUnchanged
=
true
;
for
(
let
field
in
creditCard
.
record
)
{
if
(
creditCard
.
record
[
field
]
=
=
=
"
"
&
&
!
originalCCData
[
field
]
)
{
continue
;
}
let
untouched
=
creditCard
.
untouchedFields
.
includes
(
field
)
;
if
(
untouched
&
&
field
!
=
=
"
cc
-
number
"
)
{
creditCard
.
record
[
field
]
=
originalCCData
[
field
]
;
}
recordUnchanged
&
=
untouched
;
}
if
(
recordUnchanged
)
{
this
.
formAutofillStorage
.
creditCards
.
notifyUsed
(
creditCard
.
guid
)
;
Services
.
telemetry
.
scalarAdd
(
"
formautofill
.
creditCards
.
fill_type_autofill
"
1
)
;
this
.
_recordFormFillingTime
(
"
creditCard
"
"
autofill
"
timeStartedFillingMS
)
;
return
false
;
}
Services
.
telemetry
.
scalarAdd
(
"
formautofill
.
creditCards
.
fill_type_autofill_modified
"
1
)
;
this
.
_recordFormFillingTime
(
"
creditCard
"
"
autofill
-
update
"
timeStartedFillingMS
)
;
}
else
{
setUsedStatus
(
1
)
;
Services
.
telemetry
.
scalarAdd
(
"
formautofill
.
creditCards
.
fill_type_manual
"
1
)
;
this
.
_recordFormFillingTime
(
"
creditCard
"
"
manual
"
timeStartedFillingMS
)
;
}
let
dupGuid
=
await
this
.
formAutofillStorage
.
creditCards
.
getDuplicateGuid
(
creditCard
.
record
)
;
if
(
dupGuid
)
{
this
.
formAutofillStorage
.
creditCards
.
notifyUsed
(
dupGuid
)
;
return
false
;
}
setUsedStatus
(
2
)
;
return
async
(
)
=
>
{
if
(
!
FormAutofill
.
isAutofillCreditCardsEnabled
)
{
return
;
}
let
number
=
creditCard
.
record
[
"
cc
-
number
"
]
|
|
creditCard
.
record
[
"
cc
-
number
-
decrypted
"
]
;
let
name
=
creditCard
.
record
[
"
cc
-
name
"
]
;
const
description
=
await
CreditCard
.
getLabel
(
{
name
number
}
)
;
const
state
=
await
FormAutofillDoorhanger
.
show
(
target
creditCard
.
guid
?
"
updateCreditCard
"
:
"
addCreditCard
"
description
)
;
if
(
state
=
=
"
cancel
"
)
{
return
;
}
if
(
state
=
=
"
disable
"
)
{
Services
.
prefs
.
setBoolPref
(
"
extensions
.
formautofill
.
creditCards
.
enabled
"
false
)
;
return
;
}
if
(
!
await
OSKeyStore
.
ensureLoggedIn
(
)
)
{
log
.
warn
(
"
User
canceled
encryption
login
"
)
;
return
;
}
let
changedGUIDs
=
[
]
;
if
(
creditCard
.
guid
)
{
if
(
state
=
=
"
update
"
)
{
await
this
.
formAutofillStorage
.
creditCards
.
update
(
creditCard
.
guid
creditCard
.
record
true
)
;
changedGUIDs
.
push
(
creditCard
.
guid
)
;
}
else
if
(
"
create
"
)
{
changedGUIDs
.
push
(
await
this
.
formAutofillStorage
.
creditCards
.
add
(
creditCard
.
record
)
)
;
}
}
else
{
changedGUIDs
.
push
(
.
.
.
await
this
.
formAutofillStorage
.
creditCards
.
mergeToStorage
(
creditCard
.
record
)
)
;
if
(
!
changedGUIDs
.
length
)
{
changedGUIDs
.
push
(
await
this
.
formAutofillStorage
.
creditCards
.
add
(
creditCard
.
record
)
)
;
}
}
changedGUIDs
.
forEach
(
guid
=
>
this
.
formAutofillStorage
.
creditCards
.
notifyUsed
(
guid
)
)
;
}
;
}
async
_onFormSubmit
(
data
target
)
{
let
{
profile
:
{
address
creditCard
}
timeStartedFillingMS
}
=
data
;
if
(
address
.
length
>
1
|
|
creditCard
.
length
>
1
)
{
timeStartedFillingMS
=
null
;
}
await
Promise
.
all
(
[
await
Promise
.
all
(
address
.
map
(
addrRecord
=
>
this
.
_onAddressSubmit
(
addrRecord
target
timeStartedFillingMS
)
)
)
await
Promise
.
all
(
creditCard
.
map
(
ccRecord
=
>
this
.
_onCreditCardSubmit
(
ccRecord
target
timeStartedFillingMS
)
)
)
]
.
map
(
pendingDoorhangers
=
>
{
return
pendingDoorhangers
.
filter
(
pendingDoorhanger
=
>
!
!
pendingDoorhanger
&
&
typeof
pendingDoorhanger
=
=
"
function
"
)
;
}
)
.
map
(
pendingDoorhangers
=
>
new
Promise
(
async
resolve
=
>
{
for
(
const
showDoorhanger
of
pendingDoorhangers
)
{
await
showDoorhanger
(
)
;
}
resolve
(
)
;
}
)
)
)
;
}
_recordFormFillingTime
(
formType
fillingType
startedFillingMS
)
{
if
(
!
startedFillingMS
)
{
return
;
}
let
histogram
=
Services
.
telemetry
.
getKeyedHistogramById
(
"
FORM_FILLING_REQUIRED_TIME_MS
"
)
;
histogram
.
add
(
{
formType
}
-
{
fillingType
}
Date
.
now
(
)
-
startedFillingMS
)
;
}
}
;
var
formAutofillParent
=
new
FormAutofillParent
(
)
;
