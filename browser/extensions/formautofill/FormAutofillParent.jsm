"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FormAutofillParent
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
profileStorage
"
"
resource
:
/
/
formautofill
/
ProfileStorage
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FormAutofillPreferences
"
"
resource
:
/
/
formautofill
/
FormAutofillPreferences
.
jsm
"
)
;
this
.
log
=
null
;
FormAutofillUtils
.
defineLazyLogGetter
(
this
this
.
EXPORTED_SYMBOLS
[
0
]
)
;
const
ENABLED_PREF
=
"
browser
.
formautofill
.
enabled
"
;
function
FormAutofillParent
(
)
{
}
FormAutofillParent
.
prototype
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsISupports
Ci
.
nsIObserver
]
)
_enabled
:
false
async
init
(
)
{
log
.
debug
(
"
init
"
)
;
await
profileStorage
.
initialize
(
)
;
Services
.
obs
.
addObserver
(
this
"
advanced
-
pane
-
loaded
"
)
;
Services
.
ppmm
.
addMessageListener
(
"
FormAutofill
:
GetAddresses
"
this
)
;
Services
.
ppmm
.
addMessageListener
(
"
FormAutofill
:
SaveAddress
"
this
)
;
Services
.
ppmm
.
addMessageListener
(
"
FormAutofill
:
RemoveAddresses
"
this
)
;
Services
.
prefs
.
addObserver
(
ENABLED_PREF
this
)
;
Services
.
obs
.
addObserver
(
this
"
formautofill
-
storage
-
changed
"
)
;
this
.
_setStatus
(
this
.
_getStatus
(
)
)
;
this
.
_updateSavedFieldNames
(
)
;
}
observe
(
subject
topic
data
)
{
log
.
debug
(
"
observe
:
"
topic
"
with
data
:
"
data
)
;
switch
(
topic
)
{
case
"
advanced
-
pane
-
loaded
"
:
{
let
useOldOrganization
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
preferences
.
useOldOrganization
"
false
)
;
let
formAutofillPreferences
=
new
FormAutofillPreferences
(
{
useOldOrganization
}
)
;
let
document
=
subject
.
document
;
let
prefGroup
=
formAutofillPreferences
.
init
(
document
)
;
let
parentNode
=
useOldOrganization
?
document
.
getElementById
(
"
mainPrefPane
"
)
:
document
.
getElementById
(
"
passwordsGroup
"
)
;
let
insertBeforeNode
=
useOldOrganization
?
document
.
getElementById
(
"
locationBarGroup
"
)
:
document
.
getElementById
(
"
masterPasswordRow
"
)
;
parentNode
.
insertBefore
(
prefGroup
insertBeforeNode
)
;
break
;
}
case
"
nsPref
:
changed
"
:
{
let
currentStatus
=
this
.
_getStatus
(
)
;
if
(
currentStatus
!
=
=
this
.
_enabled
)
{
this
.
_setStatus
(
currentStatus
)
;
}
break
;
}
case
"
formautofill
-
storage
-
changed
"
:
{
if
(
data
!
=
"
add
"
&
&
data
!
=
"
remove
"
)
{
break
;
}
this
.
_updateSavedFieldNames
(
)
;
let
currentStatus
=
this
.
_getStatus
(
)
;
if
(
currentStatus
!
=
=
this
.
_enabled
)
{
this
.
_setStatus
(
currentStatus
)
;
}
break
;
}
default
:
{
throw
new
Error
(
FormAutofillParent
:
Unexpected
topic
observed
:
{
topic
}
)
;
}
}
}
_onStatusChanged
(
)
{
log
.
debug
(
"
_onStatusChanged
:
Status
changed
to
"
this
.
_enabled
)
;
Services
.
ppmm
.
broadcastAsyncMessage
(
"
FormAutofill
:
enabledStatus
"
this
.
_enabled
)
;
Services
.
ppmm
.
initialProcessData
.
autofillEnabled
=
this
.
_enabled
;
}
_getStatus
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
ENABLED_PREF
)
)
{
return
false
;
}
return
profileStorage
.
getAll
(
)
.
length
>
0
;
}
_setStatus
(
newStatus
)
{
this
.
_enabled
=
newStatus
;
this
.
_onStatusChanged
(
)
;
}
receiveMessage
(
{
name
data
target
}
)
{
switch
(
name
)
{
case
"
FormAutofill
:
GetAddresses
"
:
{
this
.
_getAddresses
(
data
target
)
;
break
;
}
case
"
FormAutofill
:
SaveAddress
"
:
{
if
(
data
.
guid
)
{
profileStorage
.
update
(
data
.
guid
data
.
address
)
;
}
else
{
profileStorage
.
add
(
data
.
address
)
;
}
break
;
}
case
"
FormAutofill
:
RemoveAddresses
"
:
{
data
.
guids
.
forEach
(
guid
=
>
profileStorage
.
remove
(
guid
)
)
;
break
;
}
}
}
_uninit
(
)
{
profileStorage
.
_saveImmediately
(
)
;
Services
.
ppmm
.
removeMessageListener
(
"
FormAutofill
:
GetAddresses
"
this
)
;
Services
.
ppmm
.
removeMessageListener
(
"
FormAutofill
:
SaveAddress
"
this
)
;
Services
.
ppmm
.
removeMessageListener
(
"
FormAutofill
:
RemoveAddresses
"
this
)
;
Services
.
obs
.
removeObserver
(
this
"
advanced
-
pane
-
loaded
"
)
;
Services
.
prefs
.
removeObserver
(
ENABLED_PREF
this
)
;
}
_getAddresses
(
{
searchString
info
}
target
)
{
let
addresses
=
[
]
;
if
(
info
&
&
info
.
fieldName
)
{
addresses
=
profileStorage
.
getByFilter
(
{
searchString
info
}
)
;
}
else
{
addresses
=
profileStorage
.
getAll
(
)
;
}
target
.
sendAsyncMessage
(
"
FormAutofill
:
Addresses
"
addresses
)
;
}
_updateSavedFieldNames
(
)
{
if
(
!
Services
.
ppmm
.
initialProcessData
.
autofillSavedFieldNames
)
{
Services
.
ppmm
.
initialProcessData
.
autofillSavedFieldNames
=
new
Set
(
)
;
}
else
{
Services
.
ppmm
.
initialProcessData
.
autofillSavedFieldNames
.
clear
(
)
;
}
profileStorage
.
getAll
(
)
.
forEach
(
(
address
)
=
>
{
Object
.
keys
(
address
)
.
forEach
(
(
fieldName
)
=
>
{
if
(
!
address
[
fieldName
]
)
{
return
;
}
Services
.
ppmm
.
initialProcessData
.
autofillSavedFieldNames
.
add
(
fieldName
)
;
}
)
;
}
)
;
profileStorage
.
INTERNAL_FIELDS
.
forEach
(
(
fieldName
)
=
>
{
Services
.
ppmm
.
initialProcessData
.
autofillSavedFieldNames
.
delete
(
fieldName
)
;
}
)
;
Services
.
ppmm
.
broadcastAsyncMessage
(
"
FormAutofill
:
savedFieldNames
"
Services
.
ppmm
.
initialProcessData
.
autofillSavedFieldNames
)
;
}
}
;
