"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
ProfileStorage
"
"
resource
:
/
/
formautofill
/
ProfileStorage
.
jsm
"
)
;
const
PROFILE_JSON_FILE_NAME
=
"
autofill
-
profiles
.
json
"
;
let
FormAutofillParent
=
{
_profileStore
:
null
init
:
function
(
)
{
let
storePath
=
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
PROFILE_JSON_FILE_NAME
)
;
this
.
_profileStore
=
new
ProfileStorage
(
storePath
)
;
this
.
_profileStore
.
initialize
(
)
;
let
mm
=
Cc
[
"
mozilla
.
org
/
globalmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageListenerManager
)
;
mm
.
addMessageListener
(
"
FormAutofill
:
PopulateFieldValues
"
this
)
;
mm
.
addMessageListener
(
"
FormAutofill
:
GetProfiles
"
this
)
;
}
receiveMessage
:
function
(
{
name
data
target
}
)
{
switch
(
name
)
{
case
"
FormAutofill
:
PopulateFieldValues
"
:
this
.
_populateFieldValues
(
data
target
)
;
break
;
case
"
FormAutofill
:
GetProfiles
"
:
this
.
_getProfiles
(
data
target
)
;
break
;
}
}
getProfileStore
:
function
(
)
{
return
this
.
_profileStore
;
}
_uninit
:
function
(
)
{
if
(
this
.
_profileStore
)
{
this
.
_profileStore
.
_saveImmediately
(
)
;
this
.
_profileStore
=
null
;
}
let
mm
=
Cc
[
"
mozilla
.
org
/
globalmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageListenerManager
)
;
mm
.
removeMessageListener
(
"
FormAutofill
:
PopulateFieldValues
"
this
)
;
mm
.
removeMessageListener
(
"
FormAutofill
:
GetProfiles
"
this
)
;
}
_populateFieldValues
(
{
guid
fields
}
target
)
{
this
.
_profileStore
.
notifyUsed
(
guid
)
;
this
.
_fillInFields
(
this
.
_profileStore
.
get
(
guid
)
fields
)
;
target
.
sendAsyncMessage
(
"
FormAutofill
:
fillForm
"
{
fields
}
)
;
}
_getProfiles
(
{
searchString
info
}
target
)
{
let
profiles
=
[
]
;
if
(
info
&
&
info
.
fieldName
)
{
profiles
=
this
.
_profileStore
.
getByFilter
(
{
searchString
info
}
)
;
}
else
{
profiles
=
this
.
_profileStore
.
getAll
(
)
;
}
target
.
messageManager
.
sendAsyncMessage
(
"
FormAutofill
:
Profiles
"
profiles
)
;
}
_camelCase
(
str
)
{
return
str
.
toLowerCase
(
)
.
replace
(
/
-
(
[
a
-
z
]
)
/
g
s
=
>
s
[
1
]
.
toUpperCase
(
)
)
;
}
_getDataByFieldName
(
profile
fieldName
)
{
let
key
=
this
.
_camelCase
(
fieldName
)
;
return
profile
[
key
]
;
}
_fillInFields
(
profile
fields
)
{
for
(
let
field
of
fields
)
{
let
value
=
this
.
_getDataByFieldName
(
profile
field
.
fieldName
)
;
if
(
value
!
=
=
undefined
)
{
field
.
value
=
value
;
}
}
}
}
;
this
.
EXPORTED_SYMBOLS
=
[
"
FormAutofillParent
"
]
;
