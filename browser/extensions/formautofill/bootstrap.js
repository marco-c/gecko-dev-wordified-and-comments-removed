"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
const
STYLESHEET_URI
=
"
chrome
:
/
/
formautofill
/
content
/
formautofill
.
css
"
;
const
CACHED_STYLESHEETS
=
new
WeakMap
(
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonManagerPrivate
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
formAutofillParent
"
"
resource
:
/
/
formautofill
/
FormAutofillParent
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FormAutofillUtils
"
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
function
insertStyleSheet
(
domWindow
url
)
{
let
doc
=
domWindow
.
document
;
let
styleSheetAttr
=
href
=
"
{
url
}
"
type
=
"
text
/
css
"
;
let
styleSheet
=
doc
.
createProcessingInstruction
(
"
xml
-
stylesheet
"
styleSheetAttr
)
;
doc
.
insertBefore
(
styleSheet
doc
.
documentElement
)
;
if
(
CACHED_STYLESHEETS
.
has
(
domWindow
)
)
{
CACHED_STYLESHEETS
.
get
(
domWindow
)
.
push
(
styleSheet
)
;
}
else
{
CACHED_STYLESHEETS
.
set
(
domWindow
[
styleSheet
]
)
;
}
}
function
onMaybeOpenPopup
(
evt
)
{
let
domWindow
=
evt
.
target
.
ownerGlobal
;
if
(
CACHED_STYLESHEETS
.
has
(
domWindow
)
)
{
return
;
}
insertStyleSheet
(
domWindow
STYLESHEET_URI
)
;
}
function
addUpgradeListener
(
instanceID
)
{
AddonManager
.
addUpgradeListener
(
instanceID
upgrade
=
>
{
}
)
;
}
function
isAvailable
(
)
{
let
availablePref
=
Services
.
prefs
.
getCharPref
(
"
extensions
.
formautofill
.
available
"
)
;
if
(
availablePref
=
=
"
on
"
)
{
return
true
;
}
else
if
(
availablePref
=
=
"
detect
"
)
{
let
locale
=
Services
.
locale
.
getRequestedLocale
(
)
;
let
region
=
Services
.
prefs
.
getCharPref
(
"
browser
.
search
.
region
"
"
"
)
;
let
supportedCountries
=
Services
.
prefs
.
getCharPref
(
"
extensions
.
formautofill
.
supportedCountries
"
)
.
split
(
"
"
)
;
return
locale
=
=
"
en
-
US
"
&
&
supportedCountries
.
includes
(
region
)
;
}
return
false
;
}
function
startup
(
data
)
{
if
(
!
isAvailable
(
)
)
{
Services
.
prefs
.
clearUserPref
(
"
dom
.
forms
.
autocomplete
.
formautofill
"
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
engine
.
addresses
.
available
"
)
;
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
engine
.
creditcards
.
available
"
)
;
Services
.
telemetry
.
scalarSet
(
"
formautofill
.
availability
"
false
)
;
return
;
}
if
(
data
.
hasOwnProperty
(
"
instanceID
"
)
&
&
data
.
instanceID
)
{
if
(
AddonManagerPrivate
.
isDBLoaded
(
)
)
{
addUpgradeListener
(
data
.
instanceID
)
;
}
else
{
Services
.
obs
.
addObserver
(
function
xpiDatabaseLoaded
(
)
{
Services
.
obs
.
removeObserver
(
xpiDatabaseLoaded
"
xpi
-
database
-
loaded
"
)
;
addUpgradeListener
(
data
.
instanceID
)
;
}
"
xpi
-
database
-
loaded
"
)
;
}
}
else
{
throw
Error
(
"
no
instanceID
passed
to
bootstrap
startup
"
)
;
}
Services
.
prefs
.
setBoolPref
(
"
dom
.
forms
.
autocomplete
.
formautofill
"
true
)
;
Services
.
telemetry
.
scalarSet
(
"
formautofill
.
availability
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
services
.
sync
.
engine
.
addresses
.
available
"
true
)
;
if
(
FormAutofillUtils
.
isAutofillCreditCardsAvailable
)
{
Services
.
prefs
.
setBoolPref
(
"
services
.
sync
.
engine
.
creditcards
.
available
"
true
)
;
}
else
{
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
engine
.
creditcards
.
available
"
)
;
}
Services
.
mm
.
addMessageListener
(
"
FormAutoComplete
:
MaybeOpenPopup
"
onMaybeOpenPopup
)
;
formAutofillParent
.
init
(
)
.
catch
(
Cu
.
reportError
)
;
Services
.
ppmm
.
loadProcessScript
(
"
data
:
new
"
+
function
(
)
{
Components
.
utils
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillContent
.
jsm
"
)
;
}
true
)
;
Services
.
mm
.
loadFrameScript
(
"
chrome
:
/
/
formautofill
/
content
/
FormAutofillFrameScript
.
js
"
true
)
;
}
function
shutdown
(
)
{
Services
.
mm
.
removeMessageListener
(
"
FormAutoComplete
:
MaybeOpenPopup
"
onMaybeOpenPopup
)
;
let
enumerator
=
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
while
(
enumerator
.
hasMoreElements
(
)
)
{
let
win
=
enumerator
.
getNext
(
)
;
let
domWindow
=
win
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
let
cachedStyleSheets
=
CACHED_STYLESHEETS
.
get
(
domWindow
)
;
if
(
!
cachedStyleSheets
)
{
continue
;
}
while
(
cachedStyleSheets
.
length
!
=
=
0
)
{
cachedStyleSheets
.
pop
(
)
.
remove
(
)
;
}
}
}
function
install
(
)
{
}
function
uninstall
(
)
{
}
