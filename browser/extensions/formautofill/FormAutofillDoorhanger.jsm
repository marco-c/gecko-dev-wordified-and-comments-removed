"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FormAutofillDoorhanger
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
this
.
log
=
null
;
FormAutofillUtils
.
defineLazyLogGetter
(
this
this
.
EXPORTED_SYMBOLS
[
0
]
)
;
const
GetStringFromName
=
FormAutofillUtils
.
stringBundle
.
GetStringFromName
;
const
formatStringFromName
=
FormAutofillUtils
.
stringBundle
.
formatStringFromName
;
const
brandShortName
=
FormAutofillUtils
.
brandBundle
.
GetStringFromName
(
"
brandShortName
"
)
;
let
changeAutofillOptsKey
=
"
changeAutofillOptions
"
;
let
autofillOptsKey
=
"
autofillOptionsLink
"
;
let
autofillSecurityOptionsKey
=
"
autofillSecurityOptionsLink
"
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
changeAutofillOptsKey
+
=
"
OSX
"
;
autofillOptsKey
+
=
"
OSX
"
;
autofillSecurityOptionsKey
+
=
"
OSX
"
;
}
const
CONTENT
=
{
firstTimeUse
:
{
notificationId
:
"
autofill
-
address
"
message
:
formatStringFromName
(
"
saveAddressesMessage
"
[
brandShortName
]
1
)
anchor
:
{
id
:
"
autofill
-
address
-
notification
-
icon
"
URL
:
"
chrome
:
/
/
formautofill
/
content
/
formfill
-
anchor
.
svg
"
tooltiptext
:
GetStringFromName
(
"
openAutofillMessagePanel
"
)
}
mainAction
:
{
label
:
GetStringFromName
(
changeAutofillOptsKey
)
accessKey
:
"
C
"
callbackState
:
"
open
-
pref
"
disableHighlight
:
true
}
options
:
{
persistWhileVisible
:
true
popupIconURL
:
"
chrome
:
/
/
formautofill
/
content
/
icon
-
address
-
save
.
svg
"
checkbox
:
{
get
checked
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
services
.
sync
.
engine
.
addresses
"
)
;
}
get
label
(
)
{
return
Services
.
prefs
.
prefHasUserValue
(
"
services
.
sync
.
username
"
)
?
GetStringFromName
(
"
addressesSyncCheckbox
"
)
:
null
;
}
callback
(
event
)
{
let
checked
=
event
.
target
.
checked
;
Services
.
prefs
.
setBoolPref
(
"
services
.
sync
.
engine
.
addresses
"
checked
)
;
log
.
debug
(
"
Set
addresses
sync
to
"
checked
)
;
}
}
hideClose
:
true
}
}
update
:
{
notificationId
:
"
autofill
-
address
"
message
:
GetStringFromName
(
"
updateAddressMessage
"
)
linkMessage
:
GetStringFromName
(
autofillOptsKey
)
anchor
:
{
id
:
"
autofill
-
address
-
notification
-
icon
"
URL
:
"
chrome
:
/
/
formautofill
/
content
/
formfill
-
anchor
.
svg
"
tooltiptext
:
GetStringFromName
(
"
openAutofillMessagePanel
"
)
}
mainAction
:
{
label
:
GetStringFromName
(
"
updateAddressLabel
"
)
accessKey
:
"
U
"
callbackState
:
"
update
"
}
secondaryActions
:
[
{
label
:
GetStringFromName
(
"
createAddressLabel
"
)
accessKey
:
"
C
"
callbackState
:
"
create
"
}
]
options
:
{
persistWhileVisible
:
true
popupIconURL
:
"
chrome
:
/
/
formautofill
/
content
/
icon
-
address
-
update
.
svg
"
hideClose
:
true
}
}
creditCard
:
{
notificationId
:
"
autofill
-
credit
-
card
"
message
:
formatStringFromName
(
"
saveCreditCardMessage
"
[
brandShortName
]
1
)
linkMessage
:
GetStringFromName
(
autofillSecurityOptionsKey
)
anchor
:
{
id
:
"
autofill
-
credit
-
card
-
notification
-
icon
"
URL
:
"
chrome
:
/
/
formautofill
/
content
/
formfill
-
anchor
.
svg
"
tooltiptext
:
GetStringFromName
(
"
openAutofillMessagePanel
"
)
}
mainAction
:
{
label
:
GetStringFromName
(
"
saveCreditCardLabel
"
)
accessKey
:
"
S
"
callbackState
:
"
save
"
}
secondaryActions
:
[
{
label
:
GetStringFromName
(
"
cancelCreditCardLabel
"
)
accessKey
:
"
D
"
callbackState
:
"
cancel
"
}
{
label
:
GetStringFromName
(
"
neverSaveCreditCardLabel
"
)
accessKey
:
"
N
"
callbackState
:
"
disable
"
}
]
options
:
{
persistWhileVisible
:
true
popupIconURL
:
"
chrome
:
/
/
formautofill
/
content
/
icon
-
credit
-
card
.
svg
"
hideClose
:
true
}
}
}
;
let
FormAutofillDoorhanger
=
{
_createActions
(
mainActionParams
secondaryActionParams
resolve
)
{
if
(
!
mainActionParams
)
{
return
[
null
null
]
;
}
let
{
label
accessKey
disableHighlight
callbackState
}
=
mainActionParams
;
let
callback
=
resolve
.
bind
(
null
callbackState
)
;
let
mainAction
=
{
label
accessKey
callback
disableHighlight
}
;
if
(
!
secondaryActionParams
)
{
return
[
mainAction
null
]
;
}
let
secondaryActions
=
[
]
;
for
(
let
params
of
secondaryActionParams
)
{
let
cb
=
resolve
.
bind
(
null
params
.
callbackState
)
;
secondaryActions
.
push
(
{
label
:
params
.
label
accessKey
:
params
.
accessKey
callback
:
cb
}
)
;
}
return
[
mainAction
secondaryActions
]
;
}
_appendPrivacyPanelLink
(
browser
id
message
)
{
let
notificationId
=
id
+
"
-
notification
"
;
let
chromeDoc
=
browser
.
ownerDocument
;
let
notification
=
chromeDoc
.
getElementById
(
notificationId
)
;
if
(
!
notification
.
querySelector
(
"
popupnotificationcontent
"
)
)
{
let
notificationcontent
=
chromeDoc
.
createElement
(
"
popupnotificationcontent
"
)
;
let
privacyLinkElement
=
chromeDoc
.
createElement
(
"
label
"
)
;
privacyLinkElement
.
className
=
"
text
-
link
"
;
privacyLinkElement
.
setAttribute
(
"
useoriginprincipal
"
true
)
;
privacyLinkElement
.
setAttribute
(
"
href
"
"
about
:
preferences
#
privacy
"
)
;
privacyLinkElement
.
setAttribute
(
"
value
"
message
)
;
notificationcontent
.
appendChild
(
privacyLinkElement
)
;
notification
.
append
(
notificationcontent
)
;
}
}
_setAnchor
(
browser
anchor
)
{
let
chromeDoc
=
browser
.
ownerDocument
;
let
{
id
URL
tooltiptext
}
=
anchor
;
let
anchorEt
=
chromeDoc
.
getElementById
(
id
)
;
if
(
!
anchorEt
)
{
let
notificationPopupBox
=
chromeDoc
.
getElementById
(
"
notification
-
popup
-
box
"
)
;
let
anchorElement
=
chromeDoc
.
createElement
(
"
image
"
)
;
anchorElement
.
id
=
id
;
anchorElement
.
setAttribute
(
"
src
"
URL
)
;
anchorElement
.
classList
.
add
(
"
notification
-
anchor
-
icon
"
)
;
anchorElement
.
setAttribute
(
"
role
"
"
button
"
)
;
anchorElement
.
setAttribute
(
"
tooltiptext
"
tooltiptext
)
;
notificationPopupBox
.
appendChild
(
anchorElement
)
;
}
}
_addCheckboxListener
(
browser
{
notificationId
options
}
)
{
if
(
!
options
.
checkbox
)
{
return
;
}
let
id
=
notificationId
+
"
-
notification
"
;
let
chromeDoc
=
browser
.
ownerDocument
;
let
notification
=
chromeDoc
.
getElementById
(
id
)
;
let
cb
=
notification
.
checkbox
;
if
(
cb
)
{
cb
.
addEventListener
(
"
command
"
options
.
checkbox
.
callback
)
;
}
}
_removeCheckboxListener
(
browser
{
notificationId
options
}
)
{
if
(
!
options
.
checkbox
)
{
return
;
}
let
id
=
notificationId
+
"
-
notification
"
;
let
chromeDoc
=
browser
.
ownerDocument
;
let
notification
=
chromeDoc
.
getElementById
(
id
)
;
let
cb
=
notification
.
checkbox
;
if
(
cb
)
{
cb
.
removeEventListener
(
"
command
"
options
.
checkbox
.
callback
)
;
}
}
async
show
(
browser
type
)
{
log
.
debug
(
"
show
doorhanger
with
type
:
"
type
)
;
return
new
Promise
(
(
resolve
)
=
>
{
let
{
notificationId
message
linkMessage
anchor
mainAction
secondaryActions
options
}
=
CONTENT
[
type
]
;
let
chromeWin
=
browser
.
ownerGlobal
;
options
.
eventCallback
=
(
topic
)
=
>
{
log
.
debug
(
"
eventCallback
:
"
topic
)
;
if
(
topic
=
=
"
removed
"
|
|
topic
=
=
"
dismissed
"
)
{
this
.
_removeCheckboxListener
(
browser
{
notificationId
options
}
)
;
return
;
}
if
(
topic
!
=
"
shown
"
)
{
return
;
}
this
.
_addCheckboxListener
(
browser
{
notificationId
options
}
)
;
if
(
type
=
=
"
firstTimeUse
"
)
{
return
;
}
this
.
_appendPrivacyPanelLink
(
browser
notificationId
linkMessage
)
;
}
;
this
.
_setAnchor
(
browser
anchor
)
;
chromeWin
.
PopupNotifications
.
show
(
browser
notificationId
message
anchor
.
id
.
.
.
this
.
_createActions
(
mainAction
secondaryActions
resolve
)
options
)
;
}
)
;
}
}
;
