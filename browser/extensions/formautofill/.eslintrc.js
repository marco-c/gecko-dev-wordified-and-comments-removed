"
use
strict
"
;
module
.
exports
=
{
"
extends
"
:
"
.
.
/
.
.
/
.
eslintrc
.
js
"
"
globals
"
:
{
"
addMessageListener
"
:
false
"
Components
"
:
true
"
dump
"
:
true
"
removeMessageListener
"
:
false
"
sendAsyncMessage
"
:
false
"
TextDecoder
"
:
false
"
TextEncoder
"
:
false
}
"
rules
"
:
{
"
mozilla
/
balanced
-
listeners
"
:
"
error
"
"
mozilla
/
no
-
aArgs
"
:
"
warn
"
"
mozilla
/
no
-
cpows
-
in
-
tests
"
:
"
warn
"
"
mozilla
/
var
-
only
-
at
-
top
-
level
"
:
"
warn
"
"
valid
-
jsdoc
"
:
[
"
error
"
{
"
prefer
"
:
{
"
return
"
:
"
returns
"
}
"
preferType
"
:
{
"
Boolean
"
:
"
boolean
"
"
Number
"
:
"
number
"
"
String
"
:
"
string
"
"
bool
"
:
"
boolean
"
}
"
requireParamDescription
"
:
false
"
requireReturn
"
:
false
"
requireReturnDescription
"
:
false
}
]
"
block
-
spacing
"
:
"
warn
"
"
array
-
bracket
-
spacing
"
:
[
"
error
"
"
never
"
]
"
object
-
curly
-
spacing
"
:
[
"
error
"
"
never
"
]
"
space
-
in
-
parens
"
:
[
"
error
"
"
never
"
]
"
brace
-
style
"
:
[
"
error
"
"
1tbs
"
{
"
allowSingleLine
"
:
true
}
]
"
comma
-
style
"
:
"
error
"
"
computed
-
property
-
spacing
"
:
[
"
warn
"
"
never
"
]
"
consistent
-
return
"
:
"
off
"
"
curly
"
:
[
"
error
"
"
all
"
]
"
generator
-
star
-
spacing
"
:
[
"
error
"
{
"
before
"
:
false
"
after
"
:
true
}
]
"
indent
"
:
[
"
error
"
2
{
"
SwitchCase
"
:
1
}
]
"
key
-
spacing
"
:
[
"
error
"
{
"
beforeColon
"
:
false
"
afterColon
"
:
true
"
mode
"
:
"
minimum
"
}
]
"
new
-
parens
"
:
"
error
"
"
no
-
array
-
constructor
"
:
"
error
"
"
no
-
empty
"
:
"
error
"
"
no
-
extra
-
boolean
-
cast
"
:
"
warn
"
"
no
-
lonely
-
if
"
:
"
warn
"
"
no
-
multi
-
spaces
"
:
"
warn
"
"
no
-
spaced
-
func
"
:
"
warn
"
"
no
-
unused
-
expressions
"
:
"
error
"
"
no
-
unused
-
vars
"
:
[
"
error
"
{
"
args
"
:
"
none
"
"
varsIgnorePattern
"
:
"
^
(
Cc
|
Ci
|
Cr
|
Cu
|
EXPORTED_SYMBOLS
)
"
}
]
"
no
-
use
-
before
-
define
"
:
"
error
"
"
semi
"
:
[
"
error
"
"
always
"
]
"
space
-
before
-
function
-
paren
"
:
[
"
error
"
{
"
anonymous
"
:
"
never
"
"
named
"
:
"
never
"
}
]
"
space
-
infix
-
ops
"
:
[
"
error
"
{
"
int32Hint
"
:
true
}
]
"
space
-
unary
-
ops
"
:
[
"
warn
"
{
"
nonwords
"
:
false
}
]
"
block
-
scoped
-
var
"
:
"
error
"
"
comma
-
dangle
"
:
[
"
error
"
"
always
-
multiline
"
]
"
complexity
"
:
"
warn
"
"
default
-
case
"
:
"
off
"
"
dot
-
location
"
:
[
"
error
"
"
property
"
]
"
dot
-
notation
"
:
"
error
"
"
eqeqeq
"
:
"
off
"
"
func
-
names
"
:
"
off
"
"
func
-
style
"
:
"
off
"
"
max
-
depth
"
:
"
off
"
"
max
-
len
"
:
[
"
off
"
80
]
"
max
-
nested
-
callbacks
"
:
[
"
error
"
4
]
"
max
-
params
"
:
"
off
"
"
max
-
statements
"
:
"
off
"
"
new
-
cap
"
:
[
"
off
"
{
"
capIsNew
"
:
false
}
]
"
no
-
bitwise
"
:
"
off
"
"
no
-
caller
"
:
"
error
"
"
no
-
catch
-
shadow
"
:
"
off
"
"
no
-
console
"
:
"
error
"
"
no
-
constant
-
condition
"
:
"
off
"
"
no
-
continue
"
:
"
off
"
"
no
-
control
-
regex
"
:
"
error
"
"
no
-
div
-
regex
"
:
"
off
"
"
no
-
eval
"
:
"
error
"
"
no
-
extend
-
native
"
:
"
error
"
"
no
-
extra
-
parens
"
:
"
off
"
"
no
-
fallthrough
"
:
"
error
"
"
no
-
floating
-
decimal
"
:
"
off
"
"
no
-
inline
-
comments
"
:
"
off
"
"
no
-
labels
"
:
[
"
error
"
{
"
allowLoop
"
:
true
}
]
"
no
-
multi
-
str
"
:
"
warn
"
"
no
-
multiple
-
empty
-
lines
"
:
[
"
warn
"
{
"
max
"
:
2
}
]
"
no
-
param
-
reassign
"
:
"
off
"
"
no
-
path
-
concat
"
:
"
off
"
"
no
-
plusplus
"
:
"
off
"
"
no
-
process
-
env
"
:
"
off
"
"
no
-
process
-
exit
"
:
"
off
"
"
no
-
proto
"
:
"
error
"
"
no
-
reserved
-
keys
"
:
"
off
"
"
no
-
restricted
-
modules
"
:
"
off
"
"
no
-
return
-
assign
"
:
"
error
"
"
no
-
shadow
"
:
"
off
"
"
no
-
sync
"
:
"
off
"
"
no
-
ternary
"
:
"
off
"
"
no
-
throw
-
literal
"
:
"
error
"
"
no
-
underscore
-
dangle
"
:
"
off
"
"
no
-
undefined
"
:
"
off
"
"
no
-
unneeded
-
ternary
"
:
"
error
"
"
no
-
var
"
:
"
off
"
"
no
-
warning
-
comments
"
:
"
off
"
"
object
-
shorthand
"
:
"
off
"
"
one
-
var
"
:
"
off
"
"
padded
-
blocks
"
:
[
"
warn
"
"
never
"
]
"
quote
-
props
"
:
"
off
"
"
quotes
"
:
[
"
warn
"
"
double
"
{
"
avoidEscape
"
:
true
"
allowTemplateLiterals
"
:
true
}
]
"
radix
"
:
"
error
"
"
semi
-
spacing
"
:
[
"
error
"
{
"
before
"
:
false
"
after
"
:
true
}
]
"
sort
-
vars
"
:
"
off
"
"
spaced
-
comment
"
:
[
"
error
"
"
always
"
]
"
strict
"
:
[
"
error
"
"
global
"
]
"
vars
-
on
-
top
"
:
"
off
"
"
wrap
-
iife
"
:
"
off
"
"
wrap
-
regex
"
:
"
off
"
"
yoda
"
:
"
error
"
"
no
-
implied
-
eval
"
:
"
error
"
"
no
-
inner
-
declarations
"
:
"
error
"
"
no
-
label
-
var
"
:
"
error
"
"
no
-
new
-
wrappers
"
:
"
error
"
}
}
;
