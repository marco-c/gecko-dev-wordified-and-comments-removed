"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ProfileAutoCompleteResult
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
this
.
ProfileAutoCompleteResult
=
function
(
searchString
fieldName
matchingProfiles
{
resultCode
=
null
}
)
{
this
.
searchString
=
searchString
;
this
.
_fieldName
=
fieldName
;
this
.
_matchingProfiles
=
matchingProfiles
;
if
(
resultCode
)
{
this
.
searchResult
=
resultCode
;
}
else
if
(
matchingProfiles
.
length
>
0
)
{
this
.
searchResult
=
Ci
.
nsIAutoCompleteResult
.
RESULT_SUCCESS
;
}
else
{
this
.
searchResult
=
Ci
.
nsIAutoCompleteResult
.
RESULT_NOMATCH
;
}
}
;
ProfileAutoCompleteResult
.
prototype
=
{
searchString
:
"
"
defaultIndex
:
0
errorDescription
:
"
"
searchResult
:
null
_fieldName
:
"
"
_matchingProfiles
:
null
get
matchCount
(
)
{
return
this
.
_matchingProfiles
.
length
;
}
_checkIndexBounds
(
index
)
{
if
(
index
<
0
|
|
index
>
=
this
.
_matchingProfiles
.
length
)
{
throw
Components
.
Exception
(
"
Index
out
of
range
.
"
Cr
.
NS_ERROR_ILLEGAL_VALUE
)
;
}
}
getValueAt
(
index
)
{
this
.
_checkIndexBounds
(
index
)
;
return
this
.
_matchingProfiles
[
index
]
.
guid
;
}
getLabelAt
(
index
)
{
this
.
_checkIndexBounds
(
index
)
;
return
this
.
_matchingProfiles
[
index
]
.
organization
;
}
getCommentAt
(
index
)
{
this
.
_checkIndexBounds
(
index
)
;
return
this
.
_matchingProfiles
[
index
]
.
streetAddress
;
}
getStyleAt
(
index
)
{
this
.
_checkIndexBounds
(
index
)
;
return
"
autofill
-
profile
"
;
}
getImageAt
(
index
)
{
this
.
_checkIndexBounds
(
index
)
;
return
"
"
;
}
getFinalCompleteValueAt
(
index
)
{
return
this
.
getValueAt
(
index
)
;
}
removeValueAt
(
index
removeFromDatabase
)
{
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIAutoCompleteResult
]
)
}
;
