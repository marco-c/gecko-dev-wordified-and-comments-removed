"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
ProfileAutoCompleteResult
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
this
.
log
=
null
;
FormAutofillUtils
.
defineLazyLogGetter
(
this
this
.
EXPORTED_SYMBOLS
[
0
]
)
;
this
.
ProfileAutoCompleteResult
=
function
(
searchString
focusedFieldName
allFieldNames
matchingProfiles
{
resultCode
=
null
}
)
{
log
.
debug
(
"
Constructing
new
ProfileAutoCompleteResult
:
"
[
.
.
.
arguments
]
)
;
this
.
searchString
=
searchString
;
this
.
_focusedFieldName
=
focusedFieldName
;
this
.
_allFieldNames
=
allFieldNames
;
this
.
_matchingProfiles
=
matchingProfiles
;
if
(
resultCode
)
{
this
.
searchResult
=
resultCode
;
}
else
if
(
matchingProfiles
.
length
>
0
)
{
this
.
searchResult
=
Ci
.
nsIAutoCompleteResult
.
RESULT_SUCCESS
;
}
else
{
this
.
searchResult
=
Ci
.
nsIAutoCompleteResult
.
RESULT_NOMATCH
;
}
this
.
_popupLabels
=
this
.
_generateLabels
(
this
.
_focusedFieldName
this
.
_allFieldNames
this
.
_matchingProfiles
)
;
}
;
ProfileAutoCompleteResult
.
prototype
=
{
searchString
:
"
"
defaultIndex
:
0
errorDescription
:
"
"
searchResult
:
null
_focusedFieldName
:
"
"
_allFieldNames
:
null
_matchingProfiles
:
null
_popupLabels
:
null
get
matchCount
(
)
{
return
this
.
_popupLabels
.
length
;
}
_checkIndexBounds
(
index
)
{
if
(
index
<
0
|
|
index
>
=
this
.
_popupLabels
.
length
)
{
throw
Components
.
Exception
(
"
Index
out
of
range
.
"
Cr
.
NS_ERROR_ILLEGAL_VALUE
)
;
}
}
_getSecondaryLabel
(
focusedFieldName
allFieldNames
profile
)
{
const
possibleNameFields
=
[
"
name
"
"
given
-
name
"
"
additional
-
name
"
"
family
-
name
"
]
;
focusedFieldName
=
possibleNameFields
.
includes
(
focusedFieldName
)
?
"
name
"
:
focusedFieldName
;
const
secondaryLabelOrder
=
[
"
street
-
address
"
"
name
"
"
address
-
level2
"
"
organization
"
"
address
-
level1
"
"
country
"
"
postal
-
code
"
"
tel
"
"
email
"
]
;
for
(
const
currentFieldName
of
secondaryLabelOrder
)
{
if
(
focusedFieldName
=
=
currentFieldName
|
|
!
profile
[
currentFieldName
]
)
{
continue
;
}
let
matching
;
if
(
currentFieldName
=
=
"
name
"
)
{
matching
=
allFieldNames
.
some
(
fieldName
=
>
possibleNameFields
.
includes
(
fieldName
)
)
;
}
else
{
matching
=
allFieldNames
.
includes
(
currentFieldName
)
;
}
if
(
matching
)
{
return
profile
[
currentFieldName
]
;
}
}
return
"
"
;
}
_generateLabels
(
focusedFieldName
allFieldNames
profiles
)
{
return
profiles
.
filter
(
profile
=
>
{
return
!
!
profile
[
focusedFieldName
]
;
}
)
.
map
(
profile
=
>
{
return
{
primary
:
profile
[
focusedFieldName
]
secondary
:
this
.
_getSecondaryLabel
(
focusedFieldName
allFieldNames
profile
)
}
;
}
)
;
}
getValueAt
(
index
)
{
this
.
_checkIndexBounds
(
index
)
;
return
this
.
_popupLabels
[
index
]
.
primary
;
}
getLabelAt
(
index
)
{
this
.
_checkIndexBounds
(
index
)
;
return
JSON
.
stringify
(
this
.
_popupLabels
[
index
]
)
;
}
getCommentAt
(
index
)
{
this
.
_checkIndexBounds
(
index
)
;
return
JSON
.
stringify
(
this
.
_matchingProfiles
[
index
]
)
;
}
getStyleAt
(
index
)
{
this
.
_checkIndexBounds
(
index
)
;
return
"
autofill
-
profile
"
;
}
getImageAt
(
index
)
{
this
.
_checkIndexBounds
(
index
)
;
return
"
"
;
}
getFinalCompleteValueAt
(
index
)
{
return
this
.
getValueAt
(
index
)
;
}
removeValueAt
(
index
removeFromDatabase
)
{
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIAutoCompleteResult
]
)
}
;
