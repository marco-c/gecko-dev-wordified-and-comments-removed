"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FormAutofillHandler
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FormAutofillHeuristics
"
"
resource
:
/
/
formautofill
/
FormAutofillHeuristics
.
jsm
"
)
;
this
.
log
=
null
;
FormAutofillUtils
.
defineLazyLogGetter
(
this
this
.
EXPORTED_SYMBOLS
[
0
]
)
;
function
FormAutofillHandler
(
form
)
{
this
.
form
=
form
;
this
.
fieldDetails
=
[
]
;
}
FormAutofillHandler
.
prototype
=
{
form
:
null
fieldDetails
:
null
filledProfileGUID
:
null
collectFormFields
(
)
{
let
fieldDetails
=
FormAutofillHeuristics
.
getFormInfo
(
this
.
form
)
;
this
.
fieldDetails
=
fieldDetails
?
fieldDetails
:
[
]
;
log
.
debug
(
"
Collected
details
on
"
this
.
fieldDetails
.
length
"
fields
"
)
;
}
autofillFormFields
(
profile
focusedInput
)
{
log
.
debug
(
"
profile
in
autofillFormFields
:
"
profile
)
;
this
.
filledProfileGUID
=
profile
.
guid
;
for
(
let
fieldDetail
of
this
.
fieldDetails
)
{
let
element
=
fieldDetail
.
elementWeakRef
.
get
(
)
;
if
(
!
element
|
|
element
=
=
=
focusedInput
)
{
continue
;
}
let
value
=
profile
[
fieldDetail
.
fieldName
]
;
if
(
element
instanceof
Ci
.
nsIDOMHTMLInputElement
&
&
value
)
{
if
(
element
.
value
)
{
continue
;
}
element
.
setUserInput
(
value
)
;
}
else
if
(
element
instanceof
Ci
.
nsIDOMHTMLSelectElement
)
{
for
(
let
option
of
element
.
options
)
{
if
(
value
=
=
=
option
.
textContent
|
|
value
=
=
=
option
.
value
)
{
if
(
option
.
selected
)
{
break
;
}
option
.
selected
=
true
;
element
.
dispatchEvent
(
new
Event
(
"
input
"
{
"
bubbles
"
:
true
}
)
)
;
element
.
dispatchEvent
(
new
Event
(
"
change
"
{
"
bubbles
"
:
true
}
)
)
;
break
;
}
}
}
}
}
previewFormFields
(
profile
)
{
log
.
debug
(
"
preview
profile
in
autofillFormFields
:
"
profile
)
;
}
clearPreviewedFormFields
(
)
{
log
.
debug
(
"
clear
previewed
fields
in
:
"
this
.
form
)
;
}
createProfile
(
)
{
let
profile
=
{
}
;
this
.
fieldDetails
.
forEach
(
detail
=
>
{
let
element
=
detail
.
elementWeakRef
.
get
(
)
;
let
value
=
element
&
&
element
.
value
.
trim
(
)
;
if
(
!
value
)
{
return
;
}
profile
[
detail
.
fieldName
]
=
value
;
}
)
;
return
profile
;
}
}
;
