"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FormAutofillHandler
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FormAutofillHeuristics
"
"
resource
:
/
/
formautofill
/
FormAutofillHeuristics
.
jsm
"
)
;
this
.
log
=
null
;
FormAutofillUtils
.
defineLazyLogGetter
(
this
this
.
EXPORTED_SYMBOLS
[
0
]
)
;
function
FormAutofillHandler
(
form
)
{
this
.
form
=
form
;
this
.
fieldDetails
=
[
]
;
}
FormAutofillHandler
.
prototype
=
{
form
:
null
fieldDetails
:
null
filledProfileGUID
:
null
collectFormFields
(
)
{
this
.
fieldDetails
=
[
]
;
for
(
let
element
of
this
.
form
.
elements
)
{
let
info
=
FormAutofillHeuristics
.
getInfo
(
element
)
;
if
(
!
info
)
{
continue
;
}
if
(
this
.
fieldDetails
.
some
(
f
=
>
f
.
section
=
=
info
.
section
&
&
f
.
addressType
=
=
info
.
addressType
&
&
f
.
contactType
=
=
info
.
contactType
&
&
f
.
fieldName
=
=
info
.
fieldName
)
)
{
log
.
debug
(
"
Not
collecting
a
field
matching
another
with
the
same
info
:
"
info
)
;
continue
;
}
let
formatWithElement
=
{
section
:
info
.
section
addressType
:
info
.
addressType
contactType
:
info
.
contactType
fieldName
:
info
.
fieldName
elementWeakRef
:
Cu
.
getWeakReference
(
element
)
}
;
this
.
fieldDetails
.
push
(
formatWithElement
)
;
}
log
.
debug
(
"
Collected
details
on
"
this
.
fieldDetails
.
length
"
fields
"
)
;
}
autofillFormFields
(
profile
focusedInput
)
{
log
.
debug
(
"
profile
in
autofillFormFields
:
"
profile
)
;
this
.
filledProfileGUID
=
profile
.
guid
;
for
(
let
fieldDetail
of
this
.
fieldDetails
)
{
let
element
=
fieldDetail
.
elementWeakRef
.
get
(
)
;
if
(
!
element
|
|
element
=
=
=
focusedInput
|
|
element
.
value
)
{
continue
;
}
let
value
=
profile
[
fieldDetail
.
fieldName
]
;
if
(
value
)
{
element
.
setUserInput
(
value
)
;
}
}
}
previewFormFields
(
profile
)
{
log
.
debug
(
"
preview
profile
in
autofillFormFields
:
"
profile
)
;
}
clearPreviewedFormFields
(
)
{
log
.
debug
(
"
clear
previewed
fields
in
:
"
this
.
form
)
;
}
}
;
