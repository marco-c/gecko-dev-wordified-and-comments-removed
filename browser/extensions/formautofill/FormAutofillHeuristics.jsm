"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FormAutofillHeuristics
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
this
.
log
=
null
;
FormAutofillUtils
.
defineLazyLogGetter
(
this
this
.
EXPORTED_SYMBOLS
[
0
]
)
;
const
PREF_HEURISTICS_ENABLED
=
"
extensions
.
formautofill
.
heuristics
.
enabled
"
;
class
FieldScanner
{
constructor
(
elements
)
{
this
.
_elementsWeakRef
=
Cu
.
getWeakReference
(
elements
)
;
this
.
fieldDetails
=
[
]
;
this
.
_parsingIndex
=
0
;
}
get
_elements
(
)
{
return
this
.
_elementsWeakRef
.
get
(
)
;
}
get
parsingIndex
(
)
{
return
this
.
_parsingIndex
;
}
set
parsingIndex
(
index
)
{
if
(
index
>
this
.
fieldDetails
.
length
)
{
throw
new
Error
(
"
The
parsing
index
is
out
of
range
.
"
)
;
}
this
.
_parsingIndex
=
index
;
}
getFieldDetailByIndex
(
index
)
{
if
(
index
>
=
this
.
_elements
.
length
)
{
throw
new
Error
(
The
index
{
index
}
is
out
of
range
.
(
{
this
.
_elements
.
length
}
)
)
;
}
if
(
index
<
this
.
fieldDetails
.
length
)
{
return
this
.
fieldDetails
[
index
]
;
}
for
(
let
i
=
this
.
fieldDetails
.
length
;
i
<
(
index
+
1
)
;
i
+
+
)
{
this
.
pushDetail
(
)
;
}
return
this
.
fieldDetails
[
index
]
;
}
get
parsingFinished
(
)
{
return
this
.
parsingIndex
>
=
this
.
_elements
.
length
;
}
pushDetail
(
)
{
let
elementIndex
=
this
.
fieldDetails
.
length
;
if
(
elementIndex
>
=
this
.
_elements
.
length
)
{
throw
new
Error
(
"
Try
to
push
the
non
-
existing
element
info
.
"
)
;
}
let
element
=
this
.
_elements
[
elementIndex
]
;
let
info
=
FormAutofillHeuristics
.
getInfo
(
element
)
;
if
(
!
info
)
{
info
=
{
}
;
}
let
fieldInfo
=
{
section
:
info
.
section
addressType
:
info
.
addressType
contactType
:
info
.
contactType
fieldName
:
info
.
fieldName
elementWeakRef
:
Cu
.
getWeakReference
(
element
)
}
;
if
(
this
.
findSameField
(
info
)
!
=
-
1
)
{
log
.
debug
(
"
Not
collecting
a
field
matching
another
with
the
same
info
:
"
info
)
;
fieldInfo
.
_duplicated
=
true
;
}
this
.
fieldDetails
.
push
(
fieldInfo
)
;
}
updateFieldName
(
index
fieldName
)
{
if
(
index
>
=
this
.
fieldDetails
.
length
)
{
throw
new
Error
(
"
Try
to
update
the
non
-
existing
field
detail
.
"
)
;
}
this
.
fieldDetails
[
index
]
.
fieldName
=
fieldName
;
delete
this
.
fieldDetails
[
index
]
.
_duplicated
;
let
indexSame
=
this
.
findSameField
(
this
.
fieldDetails
[
index
]
)
;
if
(
indexSame
!
=
index
&
&
indexSame
!
=
-
1
)
{
this
.
fieldDetails
[
index
]
.
_duplicated
=
true
;
}
}
findSameField
(
info
)
{
return
this
.
fieldDetails
.
findIndex
(
f
=
>
f
.
section
=
=
info
.
section
&
&
f
.
addressType
=
=
info
.
addressType
&
&
f
.
contactType
=
=
info
.
contactType
&
&
f
.
fieldName
=
=
info
.
fieldName
)
;
}
get
trimmedFieldDetail
(
)
{
return
this
.
fieldDetails
.
filter
(
f
=
>
f
.
fieldName
&
&
!
f
.
_duplicated
)
;
}
}
this
.
FormAutofillHeuristics
=
{
FIELD_GROUPS
:
{
NAME
:
[
"
name
"
"
given
-
name
"
"
additional
-
name
"
"
family
-
name
"
]
ADDRESS
:
[
"
organization
"
"
street
-
address
"
"
address
-
line1
"
"
address
-
line2
"
"
address
-
line3
"
"
address
-
level2
"
"
address
-
level1
"
"
postal
-
code
"
"
country
"
]
TEL
:
[
"
tel
"
]
EMAIL
:
[
"
email
"
]
}
RULES
:
null
_parseAddressFields
(
fieldScanner
)
{
let
parsedFields
=
false
;
let
addressLines
=
[
"
address
-
line1
"
"
address
-
line2
"
"
address
-
line3
"
]
;
for
(
let
i
=
0
;
!
fieldScanner
.
parsingFinished
&
&
i
<
addressLines
.
length
;
i
+
+
)
{
let
detail
=
fieldScanner
.
getFieldDetailByIndex
(
fieldScanner
.
parsingIndex
)
;
if
(
!
detail
|
|
!
addressLines
.
includes
(
detail
.
fieldName
)
)
{
break
;
}
fieldScanner
.
updateFieldName
(
fieldScanner
.
parsingIndex
addressLines
[
i
]
)
;
fieldScanner
.
parsingIndex
+
+
;
parsedFields
=
true
;
}
return
parsedFields
;
}
getFormInfo
(
form
)
{
if
(
form
.
autocomplete
=
=
"
off
"
|
|
form
.
elements
.
length
<
=
0
)
{
return
[
]
;
}
let
fieldScanner
=
new
FieldScanner
(
form
.
elements
)
;
while
(
!
fieldScanner
.
parsingFinished
)
{
let
parsedAddressFields
=
this
.
_parseAddressFields
(
fieldScanner
)
;
if
(
!
parsedAddressFields
)
{
fieldScanner
.
parsingIndex
+
+
;
}
}
return
fieldScanner
.
trimmedFieldDetail
;
}
_matchStringToFieldName
(
string
)
{
let
result
=
{
fieldName
:
"
"
section
:
"
"
addressType
:
"
"
contactType
:
"
"
}
;
if
(
this
.
RULES
.
email
.
test
(
string
)
)
{
result
.
fieldName
=
"
email
"
;
return
result
;
}
if
(
this
.
RULES
.
tel
.
test
(
string
)
)
{
result
.
fieldName
=
"
tel
"
;
return
result
;
}
for
(
let
fieldName
of
this
.
FIELD_GROUPS
.
ADDRESS
)
{
if
(
this
.
RULES
[
fieldName
]
.
test
(
string
)
)
{
result
.
fieldName
=
fieldName
;
return
result
;
}
}
for
(
let
fieldName
of
this
.
FIELD_GROUPS
.
NAME
)
{
if
(
this
.
RULES
[
fieldName
]
.
test
(
string
)
)
{
result
.
fieldName
=
fieldName
;
return
result
;
}
}
return
null
;
}
getInfo
(
element
)
{
if
(
!
FormAutofillUtils
.
isFieldEligibleForAutofill
(
element
)
)
{
return
null
;
}
let
info
=
element
.
getAutocompleteInfo
(
)
;
if
(
info
&
&
info
.
fieldName
&
&
info
.
fieldName
!
=
"
on
"
)
{
return
info
;
}
if
(
!
this
.
_prefEnabled
)
{
return
null
;
}
if
(
element
.
type
=
=
"
email
"
)
{
return
{
fieldName
:
"
email
"
section
:
"
"
addressType
:
"
"
contactType
:
"
"
}
;
}
for
(
let
elementString
of
[
element
.
id
element
.
name
]
)
{
let
fieldNameResult
=
this
.
_matchStringToFieldName
(
elementString
)
;
if
(
fieldNameResult
)
{
return
fieldNameResult
;
}
}
let
labels
=
FormAutofillUtils
.
findLabelElements
(
element
)
;
if
(
!
labels
|
|
labels
.
length
=
=
0
)
{
log
.
debug
(
"
No
label
found
for
"
element
)
;
return
null
;
}
for
(
let
label
of
labels
)
{
let
strings
=
FormAutofillUtils
.
extractLabelStrings
(
label
)
;
for
(
let
string
of
strings
)
{
let
fieldNameResult
=
this
.
_matchStringToFieldName
(
string
)
;
if
(
fieldNameResult
)
{
return
fieldNameResult
;
}
}
}
return
null
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
this
.
FormAutofillHeuristics
"
RULES
"
(
)
=
>
{
let
sandbox
=
{
}
;
let
scriptLoader
=
Cc
[
"
mozilla
.
org
/
moz
/
jssubscript
-
loader
;
1
"
]
.
getService
(
Ci
.
mozIJSSubScriptLoader
)
;
const
HEURISTICS_REGEXP
=
"
chrome
:
/
/
formautofill
/
content
/
heuristicsRegexp
.
js
"
;
scriptLoader
.
loadSubScript
(
HEURISTICS_REGEXP
sandbox
"
utf
-
8
"
)
;
return
sandbox
.
HeuristicsRegExp
.
RULES
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
.
FormAutofillHeuristics
"
_prefEnabled
"
(
)
=
>
{
return
Services
.
prefs
.
getBoolPref
(
PREF_HEURISTICS_ENABLED
)
;
}
)
;
Services
.
prefs
.
addObserver
(
PREF_HEURISTICS_ENABLED
(
)
=
>
{
this
.
FormAutofillHeuristics
.
_prefEnabled
=
Services
.
prefs
.
getBoolPref
(
PREF_HEURISTICS_ENABLED
)
;
}
)
;
