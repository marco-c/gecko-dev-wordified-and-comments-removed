"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FormAutofillHeuristics
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
this
.
FormAutofillHeuristics
=
{
VALID_FIELDS
:
[
"
given
-
name
"
"
additional
-
name
"
"
family
-
name
"
"
organization
"
"
street
-
address
"
"
address
-
level2
"
"
address
-
level1
"
"
postal
-
code
"
"
country
"
"
tel
"
"
email
"
]
getFormInfo
(
form
)
{
let
fieldDetails
=
[
]
;
for
(
let
element
of
form
.
elements
)
{
let
info
=
this
.
getInfo
(
element
)
;
if
(
!
info
)
{
continue
;
}
if
(
fieldDetails
.
some
(
f
=
>
f
.
section
=
=
info
.
section
&
&
f
.
addressType
=
=
info
.
addressType
&
&
f
.
contactType
=
=
info
.
contactType
&
&
f
.
fieldName
=
=
info
.
fieldName
)
)
{
log
.
debug
(
"
Not
collecting
a
field
matching
another
with
the
same
info
:
"
info
)
;
continue
;
}
let
formatWithElement
=
{
section
:
info
.
section
addressType
:
info
.
addressType
contactType
:
info
.
contactType
fieldName
:
info
.
fieldName
elementWeakRef
:
Cu
.
getWeakReference
(
element
)
}
;
fieldDetails
.
push
(
formatWithElement
)
;
}
return
fieldDetails
;
}
getInfo
(
element
)
{
if
(
!
(
element
instanceof
Ci
.
nsIDOMHTMLInputElement
)
)
{
return
null
;
}
let
info
=
element
.
getAutocompleteInfo
(
)
;
if
(
!
info
|
|
!
info
.
fieldName
|
|
!
this
.
VALID_FIELDS
.
includes
(
info
.
fieldName
)
)
{
return
null
;
}
return
info
;
}
}
;
