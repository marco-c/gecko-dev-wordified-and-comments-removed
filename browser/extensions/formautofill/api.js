"
use
strict
"
;
const
CACHED_STYLESHEETS
=
new
WeakMap
(
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
FormAutofill
:
"
resource
:
/
/
autofill
/
FormAutofill
.
sys
.
mjs
"
FormAutofillParent
:
"
resource
:
/
/
autofill
/
FormAutofillParent
.
sys
.
mjs
"
FormAutofillStatus
:
"
resource
:
/
/
autofill
/
FormAutofillParent
.
sys
.
mjs
"
AutoCompleteParent
:
"
resource
:
/
/
gre
/
actors
/
AutoCompleteParent
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
resProto
"
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
resource
"
"
nsISubstitutingProtocolHandler
"
)
;
const
RESOURCE_HOST
=
"
formautofill
"
;
function
insertStyleSheet
(
domWindow
url
)
{
let
doc
=
domWindow
.
document
;
let
styleSheetAttr
=
href
=
"
{
url
}
"
type
=
"
text
/
css
"
;
let
styleSheet
=
doc
.
createProcessingInstruction
(
"
xml
-
stylesheet
"
styleSheetAttr
)
;
doc
.
insertBefore
(
styleSheet
doc
.
documentElement
)
;
if
(
CACHED_STYLESHEETS
.
has
(
domWindow
)
)
{
CACHED_STYLESHEETS
.
get
(
domWindow
)
.
push
(
styleSheet
)
;
}
else
{
CACHED_STYLESHEETS
.
set
(
domWindow
[
styleSheet
]
)
;
}
}
function
ensureCssLoaded
(
domWindow
)
{
if
(
CACHED_STYLESHEETS
.
has
(
domWindow
)
)
{
return
;
}
insertStyleSheet
(
domWindow
"
chrome
:
/
/
formautofill
/
content
/
formautofill
.
css
"
)
;
}
this
.
formautofill
=
class
extends
ExtensionAPI
{
adjustAndCheckFormAutofillPrefs
(
addressAutofillAvailable
creditCardAutofillAvailable
)
{
if
(
!
creditCardAutofillAvailable
)
{
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
engine
.
creditcards
.
available
"
)
;
}
if
(
!
addressAutofillAvailable
)
{
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
engine
.
addresses
.
available
"
)
;
}
if
(
!
addressAutofillAvailable
&
&
!
creditCardAutofillAvailable
)
{
Services
.
prefs
.
clearUserPref
(
"
dom
.
forms
.
autocomplete
.
formautofill
"
)
;
Glean
.
formautofill
.
availability
.
set
(
false
)
;
return
;
}
Services
.
prefs
.
setBoolPref
(
"
dom
.
forms
.
autocomplete
.
formautofill
"
true
)
;
Glean
.
formautofill
.
availability
.
set
(
true
)
;
if
(
FormAutofill
.
isAutofillAddressesAvailable
)
{
Services
.
prefs
.
setBoolPref
(
"
services
.
sync
.
engine
.
addresses
.
available
"
true
)
;
}
else
{
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
engine
.
addresses
.
available
"
)
;
}
if
(
FormAutofill
.
isAutofillCreditCardsAvailable
)
{
Services
.
prefs
.
setBoolPref
(
"
services
.
sync
.
engine
.
creditcards
.
available
"
true
)
;
}
else
{
Services
.
prefs
.
clearUserPref
(
"
services
.
sync
.
engine
.
creditcards
.
available
"
)
;
}
}
onStartup
(
)
{
let
uri
=
Services
.
io
.
newURI
(
"
chrome
/
res
/
"
null
this
.
extension
.
rootURI
)
;
resProto
.
setSubstitution
(
RESOURCE_HOST
uri
)
;
let
aomStartup
=
Cc
[
"
mozilla
.
org
/
addons
/
addon
-
manager
-
startup
;
1
"
]
.
getService
(
Ci
.
amIAddonManagerStartup
)
;
const
manifestURI
=
Services
.
io
.
newURI
(
"
manifest
.
json
"
null
this
.
extension
.
rootURI
)
;
this
.
chromeHandle
=
aomStartup
.
registerChrome
(
manifestURI
[
[
"
content
"
"
formautofill
"
"
chrome
/
content
/
"
]
]
)
;
if
(
this
.
extension
.
rootURI
instanceof
Ci
.
nsIJARURI
)
{
this
.
autofillManifest
=
this
.
extension
.
rootURI
.
JARFile
.
QueryInterface
(
Ci
.
nsIFileURL
)
.
file
;
}
else
if
(
this
.
extension
.
rootURI
instanceof
Ci
.
nsIFileURL
)
{
this
.
autofillManifest
=
this
.
extension
.
rootURI
.
file
;
}
if
(
this
.
autofillManifest
)
{
Components
.
manager
.
addBootstrappedManifestLocation
(
this
.
autofillManifest
)
;
}
else
{
console
.
error
(
"
Cannot
find
formautofill
chrome
.
manifest
for
registring
translated
strings
"
)
;
}
let
addressAutofillAvailable
=
FormAutofill
.
isAutofillAddressesAvailable
;
let
creditCardAutofillAvailable
=
FormAutofill
.
isAutofillCreditCardsAvailable
;
this
.
adjustAndCheckFormAutofillPrefs
(
addressAutofillAvailable
creditCardAutofillAvailable
)
;
if
(
!
creditCardAutofillAvailable
&
&
!
addressAutofillAvailable
)
{
return
;
}
AutoCompleteParent
.
addPopupStateListener
(
ensureCssLoaded
)
;
FormAutofillParent
.
addMessageObserver
(
this
)
;
this
.
onFormSubmitted
=
(
data
window
)
=
>
ensureCssLoaded
(
window
)
;
FormAutofillStatus
.
init
(
)
;
ChromeUtils
.
registerWindowActor
(
"
FormAutofill
"
{
parent
:
{
esModuleURI
:
"
resource
:
/
/
autofill
/
FormAutofillParent
.
sys
.
mjs
"
}
child
:
{
esModuleURI
:
"
resource
:
/
/
autofill
/
FormAutofillChild
.
sys
.
mjs
"
events
:
{
focusin
:
{
}
"
form
-
submission
-
detected
"
:
{
createActor
:
false
}
}
}
allFrames
:
true
}
)
;
}
onShutdown
(
isAppShutdown
)
{
if
(
isAppShutdown
)
{
return
;
}
resProto
.
setSubstitution
(
RESOURCE_HOST
null
)
;
this
.
chromeHandle
.
destruct
(
)
;
this
.
chromeHandle
=
null
;
if
(
this
.
autofillManifest
)
{
Components
.
manager
.
removeBootstrappedManifestLocation
(
this
.
autofillManifest
)
;
}
ChromeUtils
.
unregisterWindowActor
(
"
FormAutofill
"
)
;
AutoCompleteParent
.
removePopupStateListener
(
ensureCssLoaded
)
;
FormAutofillParent
.
removeMessageObserver
(
this
)
;
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
let
cachedStyleSheets
=
CACHED_STYLESHEETS
.
get
(
win
)
;
if
(
!
cachedStyleSheets
)
{
continue
;
}
while
(
cachedStyleSheets
.
length
!
=
=
0
)
{
cachedStyleSheets
.
pop
(
)
.
remove
(
)
;
}
}
}
}
;
