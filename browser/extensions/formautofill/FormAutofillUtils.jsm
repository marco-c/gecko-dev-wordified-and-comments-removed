"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
FormAutofillUtils
"
"
AddressDataLoader
"
]
;
const
ADDRESS_METADATA_PATH
=
"
resource
:
/
/
formautofill
/
addressmetadata
/
"
;
const
ADDRESS_REFERENCES
=
"
addressReferences
.
js
"
;
const
ADDRESS_REFERENCES_EXT
=
"
addressReferencesExt
.
js
"
;
const
ADDRESSES_COLLECTION_NAME
=
"
addresses
"
;
const
CREDITCARDS_COLLECTION_NAME
=
"
creditCards
"
;
const
MANAGE_ADDRESSES_KEYWORDS
=
[
"
manageAddressesTitle
"
"
addNewAddressTitle
"
]
;
const
EDIT_ADDRESS_KEYWORDS
=
[
"
givenName
"
"
additionalName
"
"
familyName
"
"
organization2
"
"
streetAddress
"
"
state
"
"
province
"
"
city
"
"
country
"
"
zip
"
"
postalCode
"
"
email
"
"
tel
"
]
;
const
MANAGE_CREDITCARDS_KEYWORDS
=
[
"
manageCreditCardsTitle
"
"
addNewCreditCardTitle
"
"
showCreditCardsBtnLabel
"
]
;
const
EDIT_CREDITCARD_KEYWORDS
=
[
"
cardNumber
"
"
nameOnCard
"
"
cardExpiresMonth
"
"
cardExpiresYear
"
]
;
const
FIELD_STATES
=
{
NORMAL
:
"
NORMAL
"
AUTO_FILLED
:
"
AUTO_FILLED
"
PREVIEW
:
"
PREVIEW
"
}
;
const
SECTION_TYPES
=
{
ADDRESS
:
"
address
"
CREDIT_CARD
:
"
creditCard
"
}
;
const
MAX_FIELD_VALUE_LENGTH
=
200
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofill
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CreditCard
"
"
resource
:
/
/
gre
/
modules
/
CreditCard
.
jsm
"
)
;
let
AddressDataLoader
=
{
_dataLoaded
:
{
country
:
false
level1
:
new
Set
(
)
}
_loadScripts
(
path
)
{
let
sandbox
=
{
}
;
let
extSandbox
=
{
}
;
try
{
sandbox
=
FormAutofillUtils
.
loadDataFromScript
(
path
+
ADDRESS_REFERENCES
)
;
extSandbox
=
FormAutofillUtils
.
loadDataFromScript
(
path
+
ADDRESS_REFERENCES_EXT
)
;
}
catch
(
e
)
{
return
sandbox
;
}
if
(
extSandbox
.
addressDataExt
)
{
for
(
let
key
in
extSandbox
.
addressDataExt
)
{
Object
.
assign
(
sandbox
.
addressData
[
key
]
extSandbox
.
addressDataExt
[
key
]
)
;
}
}
return
sandbox
;
}
_parse
(
data
)
{
if
(
!
data
)
{
return
null
;
}
const
properties
=
[
"
languages
"
"
sub_keys
"
"
sub_names
"
"
sub_lnames
"
]
;
for
(
let
key
of
properties
)
{
if
(
!
data
[
key
]
)
{
continue
;
}
if
(
Array
.
isArray
(
data
[
key
]
)
)
{
return
data
;
}
data
[
key
]
=
data
[
key
]
.
split
(
"
~
"
)
;
}
return
data
;
}
_loadData
(
country
level1
=
null
)
{
if
(
!
this
.
_dataLoaded
.
country
)
{
this
.
_addressData
=
this
.
_loadScripts
(
ADDRESS_METADATA_PATH
)
.
addressData
;
this
.
_dataLoaded
.
country
=
true
;
}
if
(
!
level1
)
{
return
this
.
_parse
(
this
.
_addressData
[
data
/
{
country
}
]
)
;
}
if
(
!
this
.
_dataLoaded
.
level1
.
has
(
country
)
)
{
Object
.
assign
(
this
.
_addressData
this
.
_loadScripts
(
{
ADDRESS_METADATA_PATH
}
{
country
}
/
)
.
addressData
)
;
this
.
_dataLoaded
.
level1
.
add
(
country
)
;
}
return
this
.
_parse
(
this
.
_addressData
[
data
/
{
country
}
/
{
level1
}
]
)
;
}
getData
(
country
level1
=
null
)
{
let
defaultLocale
=
this
.
_loadData
(
country
level1
)
;
if
(
!
defaultLocale
)
{
return
null
;
}
let
countryData
=
this
.
_parse
(
this
.
_addressData
[
data
/
{
country
}
]
)
;
let
locales
=
[
]
;
if
(
countryData
.
languages
)
{
let
list
=
countryData
.
languages
.
filter
(
key
=
>
key
!
=
=
countryData
.
lang
)
;
locales
=
list
.
map
(
key
=
>
this
.
_parse
(
this
.
_addressData
[
{
defaultLocale
.
id
}
-
-
{
key
}
]
)
)
;
}
return
{
defaultLocale
locales
}
;
}
}
;
this
.
FormAutofillUtils
=
{
get
AUTOFILL_FIELDS_THRESHOLD
(
)
{
return
3
;
}
ADDRESSES_COLLECTION_NAME
CREDITCARDS_COLLECTION_NAME
MANAGE_ADDRESSES_KEYWORDS
EDIT_ADDRESS_KEYWORDS
MANAGE_CREDITCARDS_KEYWORDS
EDIT_CREDITCARD_KEYWORDS
MAX_FIELD_VALUE_LENGTH
FIELD_STATES
SECTION_TYPES
_fieldNameInfo
:
{
"
name
"
:
"
name
"
"
given
-
name
"
:
"
name
"
"
additional
-
name
"
:
"
name
"
"
family
-
name
"
:
"
name
"
"
organization
"
:
"
organization
"
"
street
-
address
"
:
"
address
"
"
address
-
line1
"
:
"
address
"
"
address
-
line2
"
:
"
address
"
"
address
-
line3
"
:
"
address
"
"
address
-
level1
"
:
"
address
"
"
address
-
level2
"
:
"
address
"
"
postal
-
code
"
:
"
address
"
"
country
"
:
"
address
"
"
country
-
name
"
:
"
address
"
"
tel
"
:
"
tel
"
"
tel
-
country
-
code
"
:
"
tel
"
"
tel
-
national
"
:
"
tel
"
"
tel
-
area
-
code
"
:
"
tel
"
"
tel
-
local
"
:
"
tel
"
"
tel
-
local
-
prefix
"
:
"
tel
"
"
tel
-
local
-
suffix
"
:
"
tel
"
"
tel
-
extension
"
:
"
tel
"
"
email
"
:
"
email
"
"
cc
-
name
"
:
"
creditCard
"
"
cc
-
given
-
name
"
:
"
creditCard
"
"
cc
-
additional
-
name
"
:
"
creditCard
"
"
cc
-
family
-
name
"
:
"
creditCard
"
"
cc
-
number
"
:
"
creditCard
"
"
cc
-
exp
-
month
"
:
"
creditCard
"
"
cc
-
exp
-
year
"
:
"
creditCard
"
"
cc
-
exp
"
:
"
creditCard
"
}
_collators
:
{
}
_reAlternativeCountryNames
:
{
}
isAddressField
(
fieldName
)
{
return
!
!
this
.
_fieldNameInfo
[
fieldName
]
&
&
!
this
.
isCreditCardField
(
fieldName
)
;
}
isCreditCardField
(
fieldName
)
{
return
this
.
_fieldNameInfo
[
fieldName
]
=
=
"
creditCard
"
;
}
isCCNumber
(
ccNumber
)
{
let
card
=
new
CreditCard
(
{
number
:
ccNumber
}
)
;
return
card
.
isValidNumber
(
)
;
}
getCategoryFromFieldName
(
fieldName
)
{
return
this
.
_fieldNameInfo
[
fieldName
]
;
}
getCategoriesFromFieldNames
(
fieldNames
)
{
let
categories
=
new
Set
(
)
;
for
(
let
fieldName
of
fieldNames
)
{
let
info
=
this
.
getCategoryFromFieldName
(
fieldName
)
;
if
(
info
)
{
categories
.
add
(
info
)
;
}
}
return
Array
.
from
(
categories
)
;
}
getAddressSeparator
(
)
{
return
"
"
;
}
getAddressLabel
(
address
addressFields
=
null
)
{
let
fieldOrder
=
[
"
name
"
"
-
moz
-
street
-
address
-
one
-
line
"
"
address
-
level2
"
"
organization
"
"
address
-
level1
"
"
country
-
name
"
"
postal
-
code
"
"
tel
"
"
email
"
]
;
address
=
{
.
.
.
address
}
;
let
parts
=
[
]
;
if
(
addressFields
)
{
let
requiredFields
=
addressFields
.
trim
(
)
.
split
(
/
\
s
+
/
)
;
fieldOrder
=
fieldOrder
.
filter
(
name
=
>
requiredFields
.
includes
(
name
)
)
;
}
if
(
address
[
"
street
-
address
"
]
)
{
address
[
"
-
moz
-
street
-
address
-
one
-
line
"
]
=
this
.
toOneLineAddress
(
address
[
"
street
-
address
"
]
)
;
}
for
(
const
fieldName
of
fieldOrder
)
{
let
string
=
address
[
fieldName
]
;
if
(
string
)
{
parts
.
push
(
string
)
;
}
if
(
parts
.
length
=
=
2
&
&
!
addressFields
)
{
break
;
}
}
return
parts
.
join
(
"
"
)
;
}
toOneLineAddress
(
address
delimiter
=
"
\
n
"
)
{
let
array
=
typeof
address
=
=
"
string
"
?
address
.
split
(
delimiter
)
:
address
;
if
(
!
Array
.
isArray
(
array
)
)
{
return
"
"
;
}
return
array
.
map
(
s
=
>
s
?
s
.
trim
(
)
:
"
"
)
.
filter
(
s
=
>
s
)
.
join
(
this
.
getAddressSeparator
(
)
)
;
}
compressTel
(
address
)
{
let
telCountryCode
=
address
[
"
tel
-
country
-
code
"
]
|
|
"
"
;
let
telAreaCode
=
address
[
"
tel
-
area
-
code
"
]
|
|
"
"
;
if
(
!
address
.
tel
)
{
if
(
address
[
"
tel
-
national
"
]
)
{
address
.
tel
=
telCountryCode
+
address
[
"
tel
-
national
"
]
;
}
else
if
(
address
[
"
tel
-
local
"
]
)
{
address
.
tel
=
telCountryCode
+
telAreaCode
+
address
[
"
tel
-
local
"
]
;
}
else
if
(
address
[
"
tel
-
local
-
prefix
"
]
&
&
address
[
"
tel
-
local
-
suffix
"
]
)
{
address
.
tel
=
telCountryCode
+
telAreaCode
+
address
[
"
tel
-
local
-
prefix
"
]
+
address
[
"
tel
-
local
-
suffix
"
]
;
}
}
for
(
let
field
in
address
)
{
if
(
field
!
=
"
tel
"
&
&
this
.
getCategoryFromFieldName
(
field
)
=
=
"
tel
"
)
{
delete
address
[
field
]
;
}
}
}
autofillFieldSelector
(
doc
)
{
return
doc
.
querySelectorAll
(
"
input
select
"
)
;
}
ALLOWED_TYPES
:
[
"
text
"
"
email
"
"
tel
"
"
number
"
"
month
"
]
isFieldEligibleForAutofill
(
element
)
{
let
tagName
=
element
.
tagName
;
if
(
tagName
=
=
"
INPUT
"
)
{
if
(
!
this
.
ALLOWED_TYPES
.
includes
(
element
.
type
)
)
{
return
false
;
}
}
else
if
(
tagName
!
=
"
SELECT
"
)
{
return
false
;
}
return
true
;
}
loadDataFromScript
(
url
sandbox
=
{
}
)
{
Services
.
scriptloader
.
loadSubScript
(
url
sandbox
"
utf
-
8
"
)
;
return
sandbox
;
}
getCountryAddressRawData
(
country
=
FormAutofill
.
DEFAULT_REGION
level1
=
null
)
{
let
metadata
=
AddressDataLoader
.
getData
(
country
level1
)
;
if
(
!
metadata
)
{
if
(
level1
)
{
return
null
;
}
if
(
country
!
=
FormAutofill
.
DEFAULT_REGION
)
{
metadata
=
AddressDataLoader
.
getData
(
FormAutofill
.
DEFAULT_REGION
)
;
}
}
if
(
!
metadata
)
{
metadata
=
AddressDataLoader
.
getData
(
"
US
"
)
;
}
return
metadata
;
}
getCountryAddressData
(
country
level1
)
{
let
metadata
=
this
.
getCountryAddressRawData
(
country
level1
)
;
return
metadata
&
&
metadata
.
defaultLocale
;
}
getCountryAddressDataWithLocales
(
country
level1
)
{
let
metadata
=
this
.
getCountryAddressRawData
(
country
level1
)
;
return
metadata
&
&
[
metadata
.
defaultLocale
.
.
.
metadata
.
locales
]
;
}
getCollators
(
country
)
{
if
(
!
this
.
_collators
[
country
]
)
{
let
dataset
=
this
.
getCountryAddressData
(
country
)
;
let
languages
=
dataset
.
languages
|
|
[
dataset
.
lang
]
;
this
.
_collators
[
country
]
=
languages
.
map
(
lang
=
>
new
Intl
.
Collator
(
lang
{
sensitivity
:
"
base
"
ignorePunctuation
:
true
}
)
)
;
}
return
this
.
_collators
[
country
]
;
}
parseAddressFormat
(
fmt
)
{
if
(
!
fmt
)
{
throw
new
Error
(
"
fmt
string
is
missing
.
"
)
;
}
const
fieldsLookup
=
{
N
:
"
name
"
O
:
"
organization
"
A
:
"
street
-
address
"
S
:
"
address
-
level1
"
C
:
"
address
-
level2
"
Z
:
"
postal
-
code
"
n
:
"
newLine
"
}
;
return
fmt
.
match
(
/
%
[
^
%
]
/
g
)
.
reduce
(
(
parsed
part
)
=
>
{
let
fieldId
=
fieldsLookup
[
part
[
1
]
]
;
if
(
!
fieldId
)
{
return
parsed
;
}
if
(
fieldId
=
=
"
newLine
"
)
{
let
size
=
parsed
.
length
;
if
(
size
)
{
parsed
[
size
-
1
]
.
newLine
=
true
;
}
return
parsed
;
}
return
parsed
.
concat
(
{
fieldId
}
)
;
}
[
]
)
;
}
identifyCountryCode
(
countryName
countrySpecified
)
{
let
countries
=
countrySpecified
?
[
countrySpecified
]
:
FormAutofill
.
supportedCountries
;
for
(
let
country
of
countries
)
{
let
collators
=
this
.
getCollators
(
country
)
;
let
metadata
=
this
.
getCountryAddressData
(
country
)
;
let
alternativeCountryNames
=
metadata
.
alternative_names
|
|
[
metadata
.
name
]
;
let
reAlternativeCountryNames
=
this
.
_reAlternativeCountryNames
[
country
]
;
if
(
!
reAlternativeCountryNames
)
{
reAlternativeCountryNames
=
this
.
_reAlternativeCountryNames
[
country
]
=
[
]
;
}
for
(
let
i
=
0
;
i
<
alternativeCountryNames
.
length
;
i
+
+
)
{
let
name
=
alternativeCountryNames
[
i
]
;
let
reName
=
reAlternativeCountryNames
[
i
]
;
if
(
!
reName
)
{
reName
=
reAlternativeCountryNames
[
i
]
=
new
RegExp
(
"
\
\
b
"
+
this
.
escapeRegExp
(
name
)
+
"
\
\
b
"
"
i
"
)
;
}
if
(
this
.
strCompare
(
name
countryName
collators
)
|
|
reName
.
test
(
countryName
)
)
{
return
country
;
}
}
}
return
null
;
}
findSelectOption
(
selectEl
record
fieldName
)
{
if
(
this
.
isAddressField
(
fieldName
)
)
{
return
this
.
findAddressSelectOption
(
selectEl
record
fieldName
)
;
}
if
(
this
.
isCreditCardField
(
fieldName
)
)
{
return
this
.
findCreditCardSelectOption
(
selectEl
record
fieldName
)
;
}
return
null
;
}
getAbbreviatedSubregionName
(
subregionValues
country
)
{
let
values
=
Array
.
isArray
(
subregionValues
)
?
subregionValues
:
[
subregionValues
]
;
let
collators
=
this
.
getCollators
(
country
)
;
for
(
let
metadata
of
this
.
getCountryAddressDataWithLocales
(
country
)
)
{
let
{
sub_keys
:
subKeys
sub_names
:
subNames
sub_lnames
:
subLnames
}
=
metadata
;
if
(
!
subKeys
)
{
continue
;
}
subNames
=
subNames
|
|
subLnames
;
let
speculatedSubIndexes
=
[
]
;
for
(
const
val
of
values
)
{
let
identifiedValue
=
this
.
identifyValue
(
subKeys
subNames
val
collators
)
;
if
(
identifiedValue
)
{
return
identifiedValue
;
}
[
subKeys
subNames
]
.
forEach
(
sub
=
>
{
speculatedSubIndexes
.
push
(
sub
.
findIndex
(
token
=
>
{
let
pattern
=
new
RegExp
(
"
\
\
b
"
+
this
.
escapeRegExp
(
token
)
+
"
\
\
b
"
)
;
return
pattern
.
test
(
val
)
;
}
)
)
;
}
)
;
}
let
subKey
=
subKeys
[
speculatedSubIndexes
.
find
(
i
=
>
!
!
~
i
)
]
;
if
(
subKey
)
{
return
subKey
;
}
}
return
null
;
}
findAddressSelectOption
(
selectEl
address
fieldName
)
{
let
value
=
address
[
fieldName
]
;
if
(
!
value
)
{
return
null
;
}
let
collators
=
this
.
getCollators
(
address
.
country
)
;
for
(
let
option
of
selectEl
.
options
)
{
if
(
this
.
strCompare
(
value
option
.
value
collators
)
|
|
this
.
strCompare
(
value
option
.
text
collators
)
)
{
return
option
;
}
}
switch
(
fieldName
)
{
case
"
address
-
level1
"
:
{
let
{
country
}
=
address
;
let
identifiedValue
=
this
.
getAbbreviatedSubregionName
(
[
value
]
country
)
;
if
(
!
identifiedValue
)
{
return
null
;
}
for
(
let
dataset
of
this
.
getCountryAddressDataWithLocales
(
country
)
)
{
let
keys
=
dataset
.
sub_keys
;
if
(
!
keys
)
{
continue
;
}
let
names
=
dataset
.
sub_names
|
|
dataset
.
sub_lnames
;
let
pattern
=
new
RegExp
(
"
\
\
b
"
+
this
.
escapeRegExp
(
identifiedValue
)
+
"
\
\
b
"
"
i
"
)
;
for
(
let
option
of
selectEl
.
options
)
{
let
optionValue
=
this
.
identifyValue
(
keys
names
option
.
value
collators
)
;
let
optionText
=
this
.
identifyValue
(
keys
names
option
.
text
collators
)
;
if
(
identifiedValue
=
=
=
optionValue
|
|
identifiedValue
=
=
=
optionText
|
|
pattern
.
test
(
option
.
value
)
)
{
return
option
;
}
}
}
break
;
}
case
"
country
"
:
{
if
(
this
.
getCountryAddressData
(
value
)
.
alternative_names
)
{
for
(
let
option
of
selectEl
.
options
)
{
if
(
this
.
identifyCountryCode
(
option
.
text
value
)
|
|
this
.
identifyCountryCode
(
option
.
value
value
)
)
{
return
option
;
}
}
}
break
;
}
}
return
null
;
}
findCreditCardSelectOption
(
selectEl
creditCard
fieldName
)
{
let
oneDigitMonth
=
creditCard
[
"
cc
-
exp
-
month
"
]
?
creditCard
[
"
cc
-
exp
-
month
"
]
.
toString
(
)
:
null
;
let
twoDigitsMonth
=
oneDigitMonth
?
oneDigitMonth
.
padStart
(
2
"
0
"
)
:
null
;
let
fourDigitsYear
=
creditCard
[
"
cc
-
exp
-
year
"
]
?
creditCard
[
"
cc
-
exp
-
year
"
]
.
toString
(
)
:
null
;
let
twoDigitsYear
=
fourDigitsYear
?
fourDigitsYear
.
substr
(
2
2
)
:
null
;
let
options
=
Array
.
from
(
selectEl
.
options
)
;
switch
(
fieldName
)
{
case
"
cc
-
exp
-
month
"
:
{
if
(
!
oneDigitMonth
)
{
return
null
;
}
for
(
let
option
of
options
)
{
if
(
[
option
.
text
option
.
label
option
.
value
]
.
some
(
s
=
>
{
let
result
=
/
[
1
-
9
]
\
d
*
/
.
exec
(
s
)
;
return
result
&
&
result
[
0
]
=
=
oneDigitMonth
;
}
)
)
{
return
option
;
}
}
break
;
}
case
"
cc
-
exp
-
year
"
:
{
if
(
!
fourDigitsYear
)
{
return
null
;
}
for
(
let
option
of
options
)
{
if
(
[
option
.
text
option
.
label
option
.
value
]
.
some
(
s
=
>
s
=
=
twoDigitsYear
|
|
s
=
=
fourDigitsYear
)
)
{
return
option
;
}
}
break
;
}
case
"
cc
-
exp
"
:
{
if
(
!
oneDigitMonth
|
|
!
fourDigitsYear
)
{
return
null
;
}
let
patterns
=
[
oneDigitMonth
+
"
/
"
+
twoDigitsYear
oneDigitMonth
+
"
/
"
+
fourDigitsYear
twoDigitsMonth
+
"
/
"
+
twoDigitsYear
twoDigitsMonth
+
"
/
"
+
fourDigitsYear
oneDigitMonth
+
"
-
"
+
twoDigitsYear
oneDigitMonth
+
"
-
"
+
fourDigitsYear
twoDigitsMonth
+
"
-
"
+
twoDigitsYear
twoDigitsMonth
+
"
-
"
+
fourDigitsYear
twoDigitsYear
+
"
-
"
+
twoDigitsMonth
fourDigitsYear
+
"
-
"
+
twoDigitsMonth
fourDigitsYear
+
"
/
"
+
oneDigitMonth
twoDigitsMonth
+
twoDigitsYear
twoDigitsYear
+
twoDigitsMonth
]
;
for
(
let
option
of
options
)
{
if
(
[
option
.
text
option
.
label
option
.
value
]
.
some
(
str
=
>
patterns
.
some
(
pattern
=
>
str
.
includes
(
pattern
)
)
)
)
{
return
option
;
}
}
break
;
}
}
return
null
;
}
identifyValue
(
keys
names
value
collators
)
{
let
resultKey
=
keys
.
find
(
key
=
>
this
.
strCompare
(
value
key
collators
)
)
;
if
(
resultKey
)
{
return
resultKey
;
}
let
index
=
names
.
findIndex
(
name
=
>
this
.
strCompare
(
value
name
collators
)
)
;
if
(
index
!
=
=
-
1
)
{
return
keys
[
index
]
;
}
return
null
;
}
strCompare
(
a
=
"
"
b
=
"
"
collators
)
{
return
collators
.
some
(
collator
=
>
!
collator
.
compare
(
a
b
)
)
;
}
escapeRegExp
(
string
)
{
return
string
.
replace
(
/
[
.
*
+
?
^
{
}
(
)
|
[
\
]
\
\
]
/
g
"
\
\
&
"
)
;
}
getFormFormat
(
country
)
{
const
dataset
=
this
.
getCountryAddressData
(
country
)
;
return
{
"
addressLevel1Label
"
:
dataset
.
state_name_type
|
|
"
province
"
"
postalCodeLabel
"
:
dataset
.
zip_name_type
|
|
"
postalCode
"
"
fieldsOrder
"
:
this
.
parseAddressFormat
(
dataset
.
fmt
|
|
"
%
N
%
n
%
O
%
n
%
A
%
n
%
C
%
S
%
Z
"
)
"
postalCodePattern
"
:
dataset
.
zip
}
;
}
localizeAttributeForElement
(
element
attributeName
)
{
switch
(
attributeName
)
{
case
"
data
-
localization
"
:
{
element
.
textContent
=
this
.
stringBundle
.
GetStringFromName
(
element
.
getAttribute
(
attributeName
)
)
;
element
.
removeAttribute
(
attributeName
)
;
break
;
}
case
"
data
-
localization
-
region
"
:
{
let
regionCode
=
element
.
getAttribute
(
attributeName
)
;
element
.
textContent
=
Services
.
intl
.
getRegionDisplayNames
(
undefined
[
regionCode
]
)
;
element
.
removeAttribute
(
attributeName
)
;
return
;
}
default
:
throw
new
Error
(
"
Unexpected
attributeName
"
)
;
}
}
localizeMarkup
(
root
)
{
let
elements
=
root
.
querySelectorAll
(
"
[
data
-
localization
]
"
)
;
for
(
let
element
of
elements
)
{
this
.
localizeAttributeForElement
(
element
"
data
-
localization
"
)
;
}
elements
=
root
.
querySelectorAll
(
"
[
data
-
localization
-
region
]
"
)
;
for
(
let
element
of
elements
)
{
this
.
localizeAttributeForElement
(
element
"
data
-
localization
-
region
"
)
;
}
}
}
;
this
.
log
=
null
;
this
.
FormAutofill
.
defineLazyLogGetter
(
this
EXPORTED_SYMBOLS
[
0
]
)
;
XPCOMUtils
.
defineLazyGetter
(
FormAutofillUtils
"
stringBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
formautofill
/
locale
/
formautofill
.
properties
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
FormAutofillUtils
"
brandBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
)
;
}
)
;
