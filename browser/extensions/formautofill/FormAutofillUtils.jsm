"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FormAutofillUtils
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
const
ADDRESS_REFERENCES
=
"
chrome
:
/
/
formautofill
/
content
/
addressReferences
.
js
"
;
const
ALTERNATIVE_COUNTRY_NAMES
=
{
"
US
"
:
[
"
US
"
"
United
States
of
America
"
"
United
States
"
"
America
"
"
U
.
S
.
"
"
USA
"
"
U
.
S
.
A
.
"
"
U
.
S
.
A
"
]
}
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
this
.
FormAutofillUtils
=
{
get
AUTOFILL_FIELDS_THRESHOLD
(
)
{
return
3
;
}
_fieldNameInfo
:
{
"
name
"
:
"
name
"
"
given
-
name
"
:
"
name
"
"
additional
-
name
"
:
"
name
"
"
family
-
name
"
:
"
name
"
"
organization
"
:
"
organization
"
"
street
-
address
"
:
"
address
"
"
address
-
line1
"
:
"
address
"
"
address
-
line2
"
:
"
address
"
"
address
-
line3
"
:
"
address
"
"
address
-
level1
"
:
"
address
"
"
address
-
level2
"
:
"
address
"
"
postal
-
code
"
:
"
address
"
"
country
"
:
"
address
"
"
country
-
name
"
:
"
address
"
"
tel
"
:
"
tel
"
"
tel
-
country
-
code
"
:
"
tel
"
"
tel
-
national
"
:
"
tel
"
"
tel
-
area
-
code
"
:
"
tel
"
"
tel
-
local
"
:
"
tel
"
"
tel
-
local
-
prefix
"
:
"
tel
"
"
tel
-
local
-
suffix
"
:
"
tel
"
"
tel
-
extension
"
:
"
tel
"
"
email
"
:
"
email
"
"
cc
-
name
"
:
"
creditCard
"
"
cc
-
number
"
:
"
creditCard
"
"
cc
-
exp
-
month
"
:
"
creditCard
"
"
cc
-
exp
-
year
"
:
"
creditCard
"
}
_addressDataLoaded
:
false
_collators
:
{
}
_reAlternativeCountryNames
:
{
}
isAddressField
(
fieldName
)
{
return
!
!
this
.
_fieldNameInfo
[
fieldName
]
&
&
!
this
.
isCreditCardField
(
fieldName
)
;
}
isCreditCardField
(
fieldName
)
{
return
this
.
_fieldNameInfo
[
fieldName
]
=
=
"
creditCard
"
;
}
getCategoryFromFieldName
(
fieldName
)
{
return
this
.
_fieldNameInfo
[
fieldName
]
;
}
getCategoriesFromFieldNames
(
fieldNames
)
{
let
categories
=
new
Set
(
)
;
for
(
let
fieldName
of
fieldNames
)
{
let
info
=
this
.
getCategoryFromFieldName
(
fieldName
)
;
if
(
info
)
{
categories
.
add
(
info
)
;
}
}
return
Array
.
from
(
categories
)
;
}
getAddressSeparator
(
)
{
return
"
"
;
}
toOneLineAddress
(
address
delimiter
=
"
\
n
"
)
{
let
array
=
typeof
address
=
=
"
string
"
?
address
.
split
(
delimiter
)
:
address
;
if
(
!
Array
.
isArray
(
array
)
)
{
return
"
"
;
}
return
array
.
map
(
s
=
>
s
?
s
.
trim
(
)
:
"
"
)
.
filter
(
s
=
>
s
)
.
join
(
this
.
getAddressSeparator
(
)
)
;
}
defineLazyLogGetter
(
scope
logPrefix
)
{
XPCOMUtils
.
defineLazyGetter
(
scope
"
log
"
(
)
=
>
{
let
ConsoleAPI
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
.
ConsoleAPI
;
return
new
ConsoleAPI
(
{
maxLogLevelPref
:
"
extensions
.
formautofill
.
loglevel
"
prefix
:
logPrefix
}
)
;
}
)
;
}
autofillFieldSelector
(
doc
)
{
return
doc
.
querySelectorAll
(
"
input
select
"
)
;
}
ALLOWED_TYPES
:
[
"
text
"
"
email
"
"
tel
"
"
number
"
]
isFieldEligibleForAutofill
(
element
)
{
if
(
element
.
autocomplete
=
=
"
off
"
)
{
return
false
;
}
if
(
element
instanceof
Ci
.
nsIDOMHTMLInputElement
)
{
if
(
!
this
.
ALLOWED_TYPES
.
includes
(
element
.
type
)
)
{
return
false
;
}
}
else
if
(
!
(
element
instanceof
Ci
.
nsIDOMHTMLSelectElement
)
)
{
return
false
;
}
return
true
;
}
loadDataFromScript
(
url
sandbox
=
{
}
)
{
let
scriptLoader
=
Cc
[
"
mozilla
.
org
/
moz
/
jssubscript
-
loader
;
1
"
]
.
getService
(
Ci
.
mozIJSSubScriptLoader
)
;
scriptLoader
.
loadSubScript
(
url
sandbox
"
utf
-
8
"
)
;
return
sandbox
;
}
getCountryAddressData
(
country
)
{
if
(
!
this
.
_addressDataLoaded
)
{
Object
.
assign
(
this
this
.
loadDataFromScript
(
ADDRESS_REFERENCES
)
)
;
this
.
_addressDataLoaded
=
true
;
}
return
this
.
addressData
[
data
/
{
country
}
]
|
|
this
.
addressData
[
"
data
/
US
"
]
;
}
getCollators
(
country
)
{
if
(
!
this
.
_collators
[
country
]
)
{
let
dataset
=
this
.
getCountryAddressData
(
country
)
;
let
languages
=
dataset
.
languages
?
dataset
.
languages
.
split
(
"
~
"
)
:
[
dataset
.
lang
]
;
this
.
_collators
[
country
]
=
languages
.
map
(
lang
=
>
new
Intl
.
Collator
(
lang
{
sensitivity
:
"
base
"
ignorePunctuation
:
true
}
)
)
;
}
return
this
.
_collators
[
country
]
;
}
identifyCountryCode
(
countryName
countrySpecified
)
{
let
countries
=
countrySpecified
?
[
countrySpecified
]
:
Object
.
keys
(
ALTERNATIVE_COUNTRY_NAMES
)
;
for
(
let
country
of
countries
)
{
let
collators
=
this
.
getCollators
(
country
)
;
let
alternativeCountryNames
=
ALTERNATIVE_COUNTRY_NAMES
[
country
]
;
let
reAlternativeCountryNames
=
this
.
_reAlternativeCountryNames
[
country
]
;
if
(
!
reAlternativeCountryNames
)
{
reAlternativeCountryNames
=
this
.
_reAlternativeCountryNames
[
country
]
=
[
]
;
}
for
(
let
i
=
0
;
i
<
alternativeCountryNames
.
length
;
i
+
+
)
{
let
name
=
alternativeCountryNames
[
i
]
;
let
reName
=
reAlternativeCountryNames
[
i
]
;
if
(
!
reName
)
{
reName
=
reAlternativeCountryNames
[
i
]
=
new
RegExp
(
"
\
\
b
"
+
this
.
escapeRegExp
(
name
)
+
"
\
\
b
"
"
i
"
)
;
}
if
(
this
.
strCompare
(
name
countryName
collators
)
|
|
reName
.
test
(
countryName
)
)
{
return
country
;
}
}
}
return
null
;
}
getAbbreviatedStateName
(
stateValues
country
=
this
.
DEFAULT_COUNTRY_CODE
)
{
let
values
=
Array
.
isArray
(
stateValues
)
?
stateValues
:
[
stateValues
]
;
let
collators
=
this
.
getCollators
(
country
)
;
let
{
sub_keys
:
subKeys
sub_names
:
subNames
}
=
this
.
getCountryAddressData
(
country
)
;
if
(
!
Array
.
isArray
(
subKeys
)
)
{
subKeys
=
subKeys
.
split
(
"
~
"
)
;
}
if
(
!
Array
.
isArray
(
subNames
)
)
{
subNames
=
subNames
.
split
(
"
~
"
)
;
}
let
speculatedSubIndexes
=
[
]
;
for
(
const
val
of
values
)
{
let
identifiedValue
=
this
.
identifyValue
(
subKeys
subNames
val
collators
)
;
if
(
identifiedValue
)
{
return
identifiedValue
;
}
[
subKeys
subNames
]
.
forEach
(
sub
=
>
{
speculatedSubIndexes
.
push
(
sub
.
findIndex
(
token
=
>
{
let
pattern
=
new
RegExp
(
"
\
\
b
"
+
this
.
escapeRegExp
(
token
)
+
"
\
\
b
"
)
;
return
pattern
.
test
(
val
)
;
}
)
)
;
}
)
;
}
return
subKeys
[
speculatedSubIndexes
.
find
(
i
=
>
!
!
~
i
)
]
|
|
null
;
}
findSelectOption
(
selectEl
address
fieldName
)
{
let
value
=
address
[
fieldName
]
;
if
(
!
value
)
{
return
null
;
}
let
country
=
address
.
country
|
|
this
.
DEFAULT_COUNTRY_CODE
;
let
dataset
=
this
.
getCountryAddressData
(
country
)
;
let
collators
=
this
.
getCollators
(
country
)
;
for
(
let
option
of
selectEl
.
options
)
{
if
(
this
.
strCompare
(
value
option
.
value
collators
)
|
|
this
.
strCompare
(
value
option
.
text
collators
)
)
{
return
option
;
}
}
switch
(
fieldName
)
{
case
"
address
-
level1
"
:
{
if
(
!
Array
.
isArray
(
dataset
.
sub_keys
)
)
{
dataset
.
sub_keys
=
dataset
.
sub_keys
.
split
(
"
~
"
)
;
}
if
(
!
Array
.
isArray
(
dataset
.
sub_names
)
)
{
dataset
.
sub_names
=
dataset
.
sub_names
.
split
(
"
~
"
)
;
}
let
keys
=
dataset
.
sub_keys
;
let
names
=
dataset
.
sub_names
;
let
identifiedValue
=
this
.
identifyValue
(
keys
names
value
collators
)
;
if
(
!
identifiedValue
)
{
return
null
;
}
let
pattern
=
new
RegExp
(
"
\
\
b
"
+
this
.
escapeRegExp
(
identifiedValue
)
+
"
\
\
b
"
"
i
"
)
;
for
(
let
option
of
selectEl
.
options
)
{
let
optionValue
=
this
.
identifyValue
(
keys
names
option
.
value
collators
)
;
let
optionText
=
this
.
identifyValue
(
keys
names
option
.
text
collators
)
;
if
(
identifiedValue
=
=
=
optionValue
|
|
identifiedValue
=
=
=
optionText
|
|
pattern
.
test
(
option
.
value
)
)
{
return
option
;
}
}
break
;
}
case
"
country
"
:
{
if
(
ALTERNATIVE_COUNTRY_NAMES
[
value
]
)
{
for
(
let
option
of
selectEl
.
options
)
{
if
(
this
.
identifyCountryCode
(
option
.
text
value
)
|
|
this
.
identifyCountryCode
(
option
.
value
value
)
)
{
return
option
;
}
}
}
break
;
}
}
return
null
;
}
identifyValue
(
keys
names
value
collators
)
{
let
resultKey
=
keys
.
find
(
key
=
>
this
.
strCompare
(
value
key
collators
)
)
;
if
(
resultKey
)
{
return
resultKey
;
}
let
index
=
names
.
findIndex
(
name
=
>
this
.
strCompare
(
value
name
collators
)
)
;
if
(
index
!
=
=
-
1
)
{
return
keys
[
index
]
;
}
return
null
;
}
strCompare
(
a
=
"
"
b
=
"
"
collators
)
{
return
collators
.
some
(
collator
=
>
!
collator
.
compare
(
a
b
)
)
;
}
escapeRegExp
(
string
)
{
return
string
.
replace
(
/
[
.
*
+
?
^
{
}
(
)
|
[
\
]
\
\
]
/
g
"
\
\
&
"
)
;
}
getFormFormat
(
country
)
{
const
dataset
=
this
.
getCountryAddressData
(
country
)
;
return
{
"
addressLevel1Label
"
:
dataset
.
state_name_type
|
|
"
province
"
"
postalCodeLabel
"
:
dataset
.
zip_name_type
|
|
"
postalCode
"
}
;
}
localizeMarkup
(
bundleURI
root
)
{
const
bundle
=
Services
.
strings
.
createBundle
(
bundleURI
)
;
let
elements
=
root
.
querySelectorAll
(
"
[
data
-
localization
]
"
)
;
for
(
let
element
of
elements
)
{
element
.
textContent
=
bundle
.
GetStringFromName
(
element
.
getAttribute
(
"
data
-
localization
"
)
)
;
element
.
removeAttribute
(
"
data
-
localization
"
)
;
}
}
}
;
XPCOMUtils
.
defineLazyGetter
(
this
.
FormAutofillUtils
"
DEFAULT_COUNTRY_CODE
"
(
)
=
>
{
return
Services
.
prefs
.
getCharPref
(
"
browser
.
search
.
countryCode
"
"
US
"
)
;
}
)
;
this
.
log
=
null
;
this
.
FormAutofillUtils
.
defineLazyLogGetter
(
this
this
.
EXPORTED_SYMBOLS
[
0
]
)
;
XPCOMUtils
.
defineLazyGetter
(
FormAutofillUtils
"
stringBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
formautofill
/
locale
/
formautofill
.
properties
"
)
;
}
)
;
