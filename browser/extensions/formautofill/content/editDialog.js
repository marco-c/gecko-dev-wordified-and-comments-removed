"
use
strict
"
;
const
AUTOFILL_BUNDLE_URI
=
"
chrome
:
/
/
formautofill
/
locale
/
formautofill
.
properties
"
;
const
REGIONS_BUNDLE_URI
=
"
chrome
:
/
/
global
/
locale
/
regionNames
.
properties
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
profileStorage
"
"
resource
:
/
/
formautofill
/
FormAutofillStorage
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
MasterPassword
"
"
resource
:
/
/
formautofill
/
MasterPassword
.
jsm
"
)
;
class
EditDialog
{
constructor
(
subStorageName
elements
record
)
{
this
.
_storageInitPromise
=
profileStorage
.
initialize
(
)
;
this
.
_subStorageName
=
subStorageName
;
this
.
_elements
=
elements
;
this
.
_record
=
record
;
this
.
localizeDocument
(
)
;
window
.
addEventListener
(
"
DOMContentLoaded
"
this
{
once
:
true
}
)
;
}
async
init
(
)
{
if
(
this
.
_record
)
{
await
this
.
loadInitialValues
(
this
.
_record
)
;
}
this
.
attachEventListeners
(
)
;
window
.
dispatchEvent
(
new
CustomEvent
(
"
FormReady
"
)
)
;
}
uninit
(
)
{
this
.
detachEventListeners
(
)
;
this
.
_elements
=
null
;
}
loadInitialValues
(
record
)
{
for
(
let
field
in
record
)
{
let
input
=
document
.
getElementById
(
field
)
;
if
(
input
)
{
input
.
value
=
record
[
field
]
;
}
}
}
buildFormObject
(
)
{
return
Array
.
from
(
document
.
forms
[
0
]
.
elements
)
.
reduce
(
(
obj
input
)
=
>
{
if
(
input
.
value
)
{
obj
[
input
.
id
]
=
input
.
value
;
}
return
obj
;
}
{
}
)
;
}
async
getStorage
(
)
{
await
this
.
_storageInitPromise
;
return
profileStorage
[
this
.
_subStorageName
]
;
}
async
saveRecord
(
record
guid
)
{
let
storage
=
await
this
.
getStorage
(
)
;
if
(
guid
)
{
storage
.
update
(
guid
record
)
;
}
else
{
storage
.
add
(
record
)
;
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
{
this
.
init
(
)
;
break
;
}
case
"
unload
"
:
{
this
.
uninit
(
)
;
break
;
}
case
"
click
"
:
{
this
.
handleClick
(
event
)
;
break
;
}
case
"
input
"
:
{
this
.
handleInput
(
event
)
;
break
;
}
case
"
keypress
"
:
{
this
.
handleKeyPress
(
event
)
;
break
;
}
case
"
change
"
:
{
this
.
handleChange
(
event
)
;
break
;
}
case
"
contextmenu
"
:
{
if
(
!
(
event
.
target
instanceof
HTMLInputElement
)
&
&
!
(
event
.
target
instanceof
HTMLTextAreaElement
)
)
{
event
.
preventDefault
(
)
;
}
break
;
}
}
}
handleClick
(
event
)
{
if
(
event
.
target
=
=
this
.
_elements
.
cancel
)
{
window
.
close
(
)
;
}
if
(
event
.
target
=
=
this
.
_elements
.
save
)
{
this
.
handleSubmit
(
)
;
}
}
handleInput
(
event
)
{
if
(
Object
.
keys
(
this
.
buildFormObject
(
)
)
.
length
=
=
0
)
{
this
.
_elements
.
save
.
setAttribute
(
"
disabled
"
true
)
;
}
else
{
this
.
_elements
.
save
.
removeAttribute
(
"
disabled
"
)
;
}
}
handleKeyPress
(
event
)
{
if
(
event
.
keyCode
=
=
KeyEvent
.
DOM_VK_ESCAPE
)
{
window
.
close
(
)
;
}
}
attachEventListeners
(
)
{
window
.
addEventListener
(
"
keypress
"
this
)
;
window
.
addEventListener
(
"
contextmenu
"
this
)
;
this
.
_elements
.
controlsContainer
.
addEventListener
(
"
click
"
this
)
;
document
.
addEventListener
(
"
input
"
this
)
;
}
detachEventListeners
(
)
{
window
.
removeEventListener
(
"
keypress
"
this
)
;
window
.
removeEventListener
(
"
contextmenu
"
this
)
;
this
.
_elements
.
controlsContainer
.
removeEventListener
(
"
click
"
this
)
;
document
.
removeEventListener
(
"
input
"
this
)
;
}
localizeDocument
(
)
{
}
handleSubmit
(
event
)
{
}
handleChange
(
event
)
{
}
}
class
EditAddress
extends
EditDialog
{
constructor
(
elements
record
)
{
let
country
=
record
?
record
.
country
:
FormAutofillUtils
.
supportedCountries
.
find
(
supported
=
>
supported
=
=
FormAutofillUtils
.
DEFAULT_REGION
)
;
super
(
"
addresses
"
elements
record
|
|
{
country
}
)
;
this
.
formatForm
(
country
)
;
}
formatForm
(
country
)
{
const
{
addressLevel1Label
postalCodeLabel
fieldsOrder
}
=
FormAutofillUtils
.
getFormFormat
(
country
)
;
this
.
_elements
.
addressLevel1Label
.
dataset
.
localization
=
addressLevel1Label
;
this
.
_elements
.
postalCodeLabel
.
dataset
.
localization
=
postalCodeLabel
;
FormAutofillUtils
.
localizeMarkup
(
AUTOFILL_BUNDLE_URI
document
)
;
this
.
arrangeFields
(
fieldsOrder
)
;
}
arrangeFields
(
fieldsOrder
)
{
let
fields
=
[
"
name
"
"
organization
"
"
street
-
address
"
"
address
-
level2
"
"
address
-
level1
"
"
postal
-
code
"
]
;
let
inputs
=
[
]
;
for
(
let
i
=
0
;
i
<
fieldsOrder
.
length
;
i
+
+
)
{
let
{
fieldId
newLine
}
=
fieldsOrder
[
i
]
;
let
container
=
document
.
getElementById
(
{
fieldId
}
-
container
)
;
inputs
.
push
(
.
.
.
container
.
querySelectorAll
(
"
input
textarea
select
"
)
)
;
container
.
style
.
display
=
"
flex
"
;
container
.
style
.
order
=
i
;
container
.
style
.
pageBreakAfter
=
newLine
?
"
always
"
:
"
auto
"
;
fields
.
splice
(
fields
.
indexOf
(
fieldId
)
1
)
;
}
for
(
let
i
=
0
;
i
<
inputs
.
length
;
i
+
+
)
{
inputs
[
i
]
.
tabIndex
=
i
+
1
;
}
for
(
let
field
of
fields
)
{
let
container
=
document
.
getElementById
(
{
field
}
-
container
)
;
container
.
style
.
display
=
"
none
"
;
}
}
localizeDocument
(
)
{
if
(
this
.
_record
)
{
this
.
_elements
.
title
.
dataset
.
localization
=
"
editAddressTitle
"
;
}
let
fragment
=
document
.
createDocumentFragment
(
)
;
for
(
let
country
of
FormAutofillUtils
.
supportedCountries
)
{
let
option
=
new
Option
(
)
;
option
.
value
=
country
;
option
.
dataset
.
localization
=
country
.
toLowerCase
(
)
;
fragment
.
appendChild
(
option
)
;
}
this
.
_elements
.
country
.
appendChild
(
fragment
)
;
FormAutofillUtils
.
localizeMarkup
(
REGIONS_BUNDLE_URI
this
.
_elements
.
country
)
;
}
async
handleSubmit
(
)
{
await
this
.
saveRecord
(
this
.
buildFormObject
(
)
this
.
_record
?
this
.
_record
.
guid
:
null
)
;
window
.
close
(
)
;
}
handleChange
(
event
)
{
this
.
formatForm
(
event
.
target
.
value
)
;
}
attachEventListeners
(
)
{
this
.
_elements
.
country
.
addEventListener
(
"
change
"
this
)
;
super
.
attachEventListeners
(
)
;
}
detachEventListeners
(
)
{
this
.
_elements
.
country
.
removeEventListener
(
"
change
"
this
)
;
super
.
detachEventListeners
(
)
;
}
}
class
EditCreditCard
extends
EditDialog
{
constructor
(
elements
record
)
{
super
(
"
creditCards
"
elements
record
)
;
this
.
generateYears
(
)
;
}
generateYears
(
)
{
const
count
=
11
;
const
currentYear
=
new
Date
(
)
.
getFullYear
(
)
;
const
ccExpYear
=
this
.
_record
&
&
this
.
_record
[
"
cc
-
exp
-
year
"
]
;
if
(
ccExpYear
&
&
ccExpYear
<
currentYear
)
{
this
.
_elements
.
year
.
appendChild
(
new
Option
(
ccExpYear
)
)
;
}
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
let
year
=
currentYear
+
i
;
let
option
=
new
Option
(
year
)
;
this
.
_elements
.
year
.
appendChild
(
option
)
;
}
if
(
ccExpYear
&
&
ccExpYear
>
currentYear
+
count
)
{
this
.
_elements
.
year
.
appendChild
(
new
Option
(
ccExpYear
)
)
;
}
}
localizeDocument
(
)
{
if
(
this
.
_record
)
{
this
.
_elements
.
title
.
dataset
.
localization
=
"
editCreditCardTitle
"
;
}
FormAutofillUtils
.
localizeMarkup
(
AUTOFILL_BUNDLE_URI
document
)
;
}
async
loadInitialValues
(
creditCard
)
{
let
decryptedCC
=
await
MasterPassword
.
decrypt
(
creditCard
[
"
cc
-
number
-
encrypted
"
]
)
;
super
.
loadInitialValues
(
Object
.
assign
(
{
}
creditCard
{
"
cc
-
number
"
:
decryptedCC
}
)
)
;
}
async
handleSubmit
(
)
{
let
creditCard
=
this
.
buildFormObject
(
)
;
if
(
!
FormAutofillUtils
.
isCCNumber
(
creditCard
[
"
cc
-
number
"
]
)
)
{
this
.
_elements
.
ccNumber
.
setCustomValidity
(
true
)
;
return
;
}
if
(
await
MasterPassword
.
ensureLoggedIn
(
)
)
{
await
this
.
saveRecord
(
creditCard
this
.
_record
?
this
.
_record
.
guid
:
null
)
;
}
window
.
close
(
)
;
}
handleInput
(
event
)
{
if
(
event
.
target
=
=
this
.
_elements
.
ccNumber
&
&
FormAutofillUtils
.
isCCNumber
(
this
.
_elements
.
ccNumber
.
value
)
)
{
this
.
_elements
.
ccNumber
.
setCustomValidity
(
"
"
)
;
}
super
.
handleInput
(
event
)
;
}
}
