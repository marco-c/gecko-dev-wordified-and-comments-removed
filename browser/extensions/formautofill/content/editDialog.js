"
use
strict
"
;
const
{
FormAutofill
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
autofill
/
FormAutofill
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
formAutofillStorage
"
"
resource
:
/
/
autofill
/
FormAutofillStorage
.
jsm
"
)
;
class
AutofillEditDialog
{
constructor
(
subStorageName
elements
record
)
{
this
.
_storageInitPromise
=
formAutofillStorage
.
initialize
(
)
;
this
.
_subStorageName
=
subStorageName
;
this
.
_elements
=
elements
;
this
.
_record
=
record
;
this
.
localizeDocument
(
)
;
window
.
addEventListener
(
"
DOMContentLoaded
"
this
{
once
:
true
}
)
;
}
async
init
(
)
{
this
.
updateSaveButtonState
(
)
;
this
.
attachEventListeners
(
)
;
window
.
dispatchEvent
(
new
CustomEvent
(
"
FormReady
"
)
)
;
}
async
getStorage
(
)
{
await
this
.
_storageInitPromise
;
return
formAutofillStorage
[
this
.
_subStorageName
]
;
}
async
saveRecord
(
record
guid
)
{
let
storage
=
await
this
.
getStorage
(
)
;
if
(
guid
)
{
await
storage
.
update
(
guid
record
)
;
}
else
{
await
storage
.
add
(
record
)
;
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
{
this
.
init
(
)
;
break
;
}
case
"
click
"
:
{
this
.
handleClick
(
event
)
;
break
;
}
case
"
input
"
:
{
this
.
handleInput
(
event
)
;
break
;
}
case
"
keypress
"
:
{
this
.
handleKeyPress
(
event
)
;
break
;
}
case
"
contextmenu
"
:
{
if
(
!
HTMLInputElement
.
isInstance
(
event
.
target
)
&
&
!
HTMLTextAreaElement
.
isInstance
(
event
.
target
)
)
{
event
.
preventDefault
(
)
;
}
break
;
}
}
}
handleClick
(
event
)
{
if
(
event
.
target
=
=
this
.
_elements
.
cancel
)
{
window
.
close
(
)
;
}
if
(
event
.
target
=
=
this
.
_elements
.
save
)
{
this
.
handleSubmit
(
)
;
}
}
handleInput
(
event
)
{
this
.
updateSaveButtonState
(
)
;
}
handleKeyPress
(
event
)
{
if
(
event
.
keyCode
=
=
KeyEvent
.
DOM_VK_ESCAPE
)
{
window
.
close
(
)
;
}
}
updateSaveButtonState
(
)
{
if
(
!
Object
.
keys
(
this
.
_elements
.
fieldContainer
.
buildFormObject
(
)
)
.
length
)
{
this
.
_elements
.
save
.
setAttribute
(
"
disabled
"
true
)
;
}
else
{
this
.
_elements
.
save
.
removeAttribute
(
"
disabled
"
)
;
}
}
attachEventListeners
(
)
{
window
.
addEventListener
(
"
keypress
"
this
)
;
window
.
addEventListener
(
"
contextmenu
"
this
)
;
this
.
_elements
.
controlsContainer
.
addEventListener
(
"
click
"
this
)
;
document
.
addEventListener
(
"
input
"
this
)
;
}
localizeDocument
(
)
{
}
}
class
EditAddressDialog
extends
AutofillEditDialog
{
constructor
(
elements
record
)
{
super
(
"
addresses
"
elements
record
)
;
}
localizeDocument
(
)
{
if
(
this
.
_record
?
.
guid
)
{
this
.
_elements
.
title
.
dataset
.
localization
=
"
editAddressTitle
"
;
}
}
async
handleSubmit
(
)
{
await
this
.
saveRecord
(
this
.
_elements
.
fieldContainer
.
buildFormObject
(
)
this
.
_record
?
this
.
_record
.
guid
:
null
)
;
window
.
close
(
)
;
}
}
class
EditCreditCardDialog
extends
AutofillEditDialog
{
constructor
(
elements
record
)
{
elements
.
fieldContainer
.
_elements
.
billingAddress
.
disabled
=
true
;
super
(
"
creditCards
"
elements
record
)
;
elements
.
fieldContainer
.
_elements
.
ccNumber
.
addEventListener
(
"
blur
"
this
.
_onCCNumberFieldBlur
.
bind
(
this
)
)
;
if
(
record
)
{
Services
.
telemetry
.
recordEvent
(
"
creditcard
"
"
show_entry
"
"
manage
"
)
;
}
}
_onCCNumberFieldBlur
(
)
{
let
elem
=
this
.
_elements
.
fieldContainer
.
_elements
.
ccNumber
;
this
.
_elements
.
fieldContainer
.
updateCustomValidity
(
elem
)
;
}
localizeDocument
(
)
{
if
(
this
.
_record
?
.
guid
)
{
this
.
_elements
.
title
.
dataset
.
localization
=
"
editCreditCardTitle
"
;
}
}
async
handleSubmit
(
)
{
let
creditCard
=
this
.
_elements
.
fieldContainer
.
buildFormObject
(
)
;
if
(
!
this
.
_elements
.
fieldContainer
.
_elements
.
form
.
reportValidity
(
)
)
{
return
;
}
try
{
await
this
.
saveRecord
(
creditCard
this
.
_record
?
this
.
_record
.
guid
:
null
)
;
if
(
this
.
_record
?
.
guid
)
{
Services
.
telemetry
.
recordEvent
(
"
creditcard
"
"
edit
"
"
manage
"
)
;
}
else
{
Services
.
telemetry
.
recordEvent
(
"
creditcard
"
"
add
"
"
manage
"
)
;
}
window
.
close
(
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
}
