"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
formAutofillStorage
"
"
resource
:
/
/
formautofill
/
FormAutofillStorage
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
MasterPassword
"
"
resource
:
/
/
formautofill
/
MasterPassword
.
jsm
"
)
;
class
AutofillEditDialog
{
constructor
(
subStorageName
elements
record
)
{
this
.
_storageInitPromise
=
formAutofillStorage
.
initialize
(
)
;
this
.
_subStorageName
=
subStorageName
;
this
.
_elements
=
elements
;
this
.
_record
=
record
;
this
.
localizeDocument
(
)
;
window
.
addEventListener
(
"
DOMContentLoaded
"
this
{
once
:
true
}
)
;
}
async
init
(
)
{
if
(
this
.
_record
)
{
await
this
.
loadInitialValues
(
this
.
_record
)
;
}
this
.
attachEventListeners
(
)
;
window
.
dispatchEvent
(
new
CustomEvent
(
"
FormReady
"
)
)
;
}
loadInitialValues
(
record
)
{
for
(
let
field
in
record
)
{
let
input
=
document
.
getElementById
(
field
)
;
if
(
input
)
{
input
.
value
=
record
[
field
]
;
}
}
}
async
getStorage
(
)
{
await
this
.
_storageInitPromise
;
return
formAutofillStorage
[
this
.
_subStorageName
]
;
}
async
saveRecord
(
record
guid
)
{
let
storage
=
await
this
.
getStorage
(
)
;
if
(
guid
)
{
storage
.
update
(
guid
record
)
;
}
else
{
storage
.
add
(
record
)
;
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
{
this
.
init
(
)
;
break
;
}
case
"
click
"
:
{
this
.
handleClick
(
event
)
;
break
;
}
case
"
input
"
:
{
this
.
handleInput
(
event
)
;
break
;
}
case
"
keypress
"
:
{
this
.
handleKeyPress
(
event
)
;
break
;
}
case
"
contextmenu
"
:
{
if
(
!
(
event
.
target
instanceof
HTMLInputElement
)
&
&
!
(
event
.
target
instanceof
HTMLTextAreaElement
)
)
{
event
.
preventDefault
(
)
;
}
break
;
}
}
}
handleClick
(
event
)
{
if
(
event
.
target
=
=
this
.
_elements
.
cancel
)
{
window
.
close
(
)
;
}
if
(
event
.
target
=
=
this
.
_elements
.
save
)
{
this
.
handleSubmit
(
)
;
}
}
handleInput
(
event
)
{
if
(
Object
.
keys
(
this
.
_elements
.
fieldContainer
.
buildFormObject
(
)
)
.
length
=
=
0
)
{
this
.
_elements
.
save
.
setAttribute
(
"
disabled
"
true
)
;
}
else
{
this
.
_elements
.
save
.
removeAttribute
(
"
disabled
"
)
;
}
}
handleKeyPress
(
event
)
{
if
(
event
.
keyCode
=
=
KeyEvent
.
DOM_VK_ESCAPE
)
{
window
.
close
(
)
;
}
}
attachEventListeners
(
)
{
window
.
addEventListener
(
"
keypress
"
this
)
;
window
.
addEventListener
(
"
contextmenu
"
this
)
;
this
.
_elements
.
controlsContainer
.
addEventListener
(
"
click
"
this
)
;
document
.
addEventListener
(
"
input
"
this
)
;
}
localizeDocument
(
)
{
}
}
class
EditAddressDialog
extends
AutofillEditDialog
{
constructor
(
elements
record
)
{
let
country
=
record
?
record
.
country
:
FormAutofillUtils
.
supportedCountries
.
find
(
supported
=
>
supported
=
=
FormAutofillUtils
.
DEFAULT_REGION
)
;
super
(
"
addresses
"
elements
record
|
|
{
country
}
)
;
}
localizeDocument
(
)
{
if
(
this
.
_record
)
{
this
.
_elements
.
title
.
dataset
.
localization
=
"
editAddressTitle
"
;
}
FormAutofillUtils
.
localizeMarkup
(
document
)
;
}
async
handleSubmit
(
)
{
await
this
.
saveRecord
(
this
.
_elements
.
fieldContainer
.
buildFormObject
(
)
this
.
_record
?
this
.
_record
.
guid
:
null
)
;
window
.
close
(
)
;
}
}
class
EditCreditCardDialog
extends
AutofillEditDialog
{
constructor
(
elements
record
)
{
super
(
"
creditCards
"
elements
record
)
;
}
localizeDocument
(
)
{
if
(
this
.
_record
)
{
this
.
_elements
.
title
.
dataset
.
localization
=
"
editCreditCardTitle
"
;
}
FormAutofillUtils
.
localizeMarkup
(
document
)
;
}
async
loadInitialValues
(
creditCard
)
{
let
decryptedCC
=
await
MasterPassword
.
decrypt
(
creditCard
[
"
cc
-
number
-
encrypted
"
]
)
;
super
.
loadInitialValues
(
Object
.
assign
(
{
}
creditCard
{
"
cc
-
number
"
:
decryptedCC
}
)
)
;
}
async
handleSubmit
(
)
{
let
creditCard
=
this
.
_elements
.
fieldContainer
.
buildFormObject
(
)
;
if
(
!
FormAutofillUtils
.
isCCNumber
(
creditCard
[
"
cc
-
number
"
]
)
)
{
this
.
_elements
.
ccNumber
.
setCustomValidity
(
true
)
;
return
;
}
if
(
await
MasterPassword
.
ensureLoggedIn
(
)
)
{
await
this
.
saveRecord
(
creditCard
this
.
_record
?
this
.
_record
.
guid
:
null
)
;
}
window
.
close
(
)
;
}
}
