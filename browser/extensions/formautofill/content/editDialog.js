"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
const
AUTOFILL_BUNDLE_URI
=
"
chrome
:
/
/
formautofill
/
locale
/
formautofill
.
properties
"
;
const
REGIONS_BUNDLE_URI
=
"
chrome
:
/
/
global
/
locale
/
regionNames
.
properties
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
function
EditDialog
(
)
{
this
.
_address
=
window
.
arguments
&
&
window
.
arguments
[
0
]
;
window
.
addEventListener
(
"
DOMContentLoaded
"
this
{
once
:
true
}
)
;
}
EditDialog
.
prototype
=
{
get
_elements
(
)
{
if
(
this
.
_elementRefs
)
{
return
this
.
_elementRefs
;
}
this
.
_elementRefs
=
{
title
:
document
.
querySelector
(
"
title
"
)
addressLevel1Label
:
document
.
querySelector
(
"
#
address
-
level1
-
container
>
span
"
)
postalCodeLabel
:
document
.
querySelector
(
"
#
postal
-
code
-
container
>
span
"
)
country
:
document
.
getElementById
(
"
country
"
)
controlsContainer
:
document
.
getElementById
(
"
controls
-
container
"
)
cancel
:
document
.
getElementById
(
"
cancel
"
)
save
:
document
.
getElementById
(
"
save
"
)
}
;
return
this
.
_elementRefs
;
}
set
_elements
(
refs
)
{
this
.
_elementRefs
=
refs
;
}
init
(
)
{
this
.
attachEventListeners
(
)
;
}
uninit
(
)
{
this
.
detachEventListeners
(
)
;
this
.
_elements
=
null
;
}
formatForm
(
country
)
{
const
{
addressLevel1Label
postalCodeLabel
}
=
FormAutofillUtils
.
getFormFormat
(
country
)
;
this
.
_elements
.
addressLevel1Label
.
dataset
.
localization
=
addressLevel1Label
;
this
.
_elements
.
postalCodeLabel
.
dataset
.
localization
=
postalCodeLabel
;
FormAutofillUtils
.
localizeMarkup
(
AUTOFILL_BUNDLE_URI
document
)
;
}
localizeDocument
(
)
{
if
(
this
.
_address
)
{
this
.
_elements
.
title
.
dataset
.
localization
=
"
editDialogTitle
"
;
}
FormAutofillUtils
.
localizeMarkup
(
REGIONS_BUNDLE_URI
this
.
_elements
.
country
)
;
this
.
formatForm
(
this
.
_address
&
&
this
.
_address
.
country
)
;
}
saveAddress
(
data
)
{
Services
.
cpmm
.
sendAsyncMessage
(
"
FormAutofill
:
SaveAddress
"
data
)
;
}
loadInitialValues
(
address
)
{
for
(
let
field
in
address
)
{
let
input
=
document
.
getElementById
(
field
)
;
if
(
input
)
{
input
.
value
=
address
[
field
]
;
}
}
}
buildAddressObject
(
)
{
return
Array
.
from
(
document
.
forms
[
0
]
.
elements
)
.
reduce
(
(
obj
input
)
=
>
{
if
(
input
.
value
)
{
obj
[
input
.
id
]
=
input
.
value
;
}
return
obj
;
}
{
}
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
{
this
.
init
(
)
;
if
(
this
.
_address
)
{
this
.
loadInitialValues
(
this
.
_address
)
;
}
break
;
}
case
"
click
"
:
{
this
.
handleClick
(
event
)
;
break
;
}
case
"
input
"
:
{
if
(
Object
.
keys
(
this
.
buildAddressObject
(
)
)
.
length
=
=
0
)
{
this
.
_elements
.
save
.
setAttribute
(
"
disabled
"
true
)
;
}
else
{
this
.
_elements
.
save
.
removeAttribute
(
"
disabled
"
)
;
}
break
;
}
case
"
unload
"
:
{
this
.
uninit
(
)
;
break
;
}
case
"
keypress
"
:
{
this
.
handleKeyPress
(
event
)
;
break
;
}
}
}
handleClick
(
event
)
{
if
(
event
.
target
=
=
this
.
_elements
.
cancel
)
{
window
.
close
(
)
;
}
if
(
event
.
target
=
=
this
.
_elements
.
save
)
{
if
(
this
.
_address
)
{
this
.
saveAddress
(
{
guid
:
this
.
_address
.
guid
address
:
this
.
buildAddressObject
(
)
}
)
;
}
else
{
this
.
saveAddress
(
{
address
:
this
.
buildAddressObject
(
)
}
)
;
}
window
.
close
(
)
;
}
}
handleKeyPress
(
event
)
{
if
(
event
.
keyCode
=
=
KeyEvent
.
DOM_VK_ESCAPE
)
{
window
.
close
(
)
;
}
}
attachEventListeners
(
)
{
window
.
addEventListener
(
"
keypress
"
this
)
;
this
.
_elements
.
controlsContainer
.
addEventListener
(
"
click
"
this
)
;
document
.
addEventListener
(
"
input
"
this
)
;
}
detachEventListeners
(
)
{
window
.
removeEventListener
(
"
keypress
"
this
)
;
this
.
_elements
.
controlsContainer
.
removeEventListener
(
"
click
"
this
)
;
document
.
removeEventListener
(
"
input
"
this
)
;
}
}
;
window
.
dialog
=
new
EditDialog
(
)
;
