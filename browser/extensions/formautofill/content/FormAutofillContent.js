"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
manager
:
Cm
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
let
{
FormAutoCompleteResult
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
nsFormAutoCompleteResult
.
jsm
"
{
}
)
;
function
FormAutofillHandler
(
form
)
{
this
.
form
=
form
;
this
.
fieldDetails
=
[
]
;
}
FormAutofillHandler
.
prototype
=
{
form
:
null
fieldDetails
:
null
collectFormFields
(
)
{
let
autofillData
=
[
]
;
for
(
let
element
of
this
.
form
.
elements
)
{
if
(
!
(
element
instanceof
Ci
.
nsIDOMHTMLInputElement
)
)
{
continue
;
}
let
info
=
element
.
getAutocompleteInfo
(
)
;
if
(
!
info
.
fieldName
|
|
[
"
on
"
"
off
"
]
.
includes
(
info
.
fieldName
)
)
{
continue
;
}
if
(
this
.
fieldDetails
.
some
(
f
=
>
f
.
section
=
=
info
.
section
&
&
f
.
addressType
=
=
info
.
addressType
&
&
f
.
contactType
=
=
info
.
contactType
&
&
f
.
fieldName
=
=
info
.
fieldName
)
)
{
return
null
;
}
let
inputFormat
=
{
section
:
info
.
section
addressType
:
info
.
addressType
contactType
:
info
.
contactType
fieldName
:
info
.
fieldName
}
;
let
formatWithElement
=
Object
.
assign
(
{
}
inputFormat
)
;
inputFormat
.
index
=
autofillData
.
length
;
autofillData
.
push
(
inputFormat
)
;
formatWithElement
.
element
=
element
;
this
.
fieldDetails
.
push
(
formatWithElement
)
;
}
return
autofillData
;
}
autofillFormFields
(
autofillResult
)
{
for
(
let
field
of
autofillResult
)
{
let
fieldDetail
=
this
.
fieldDetails
[
field
.
index
]
;
if
(
!
fieldDetail
|
|
!
field
.
value
)
{
continue
;
}
let
info
=
fieldDetail
.
element
.
getAutocompleteInfo
(
)
;
if
(
field
.
section
!
=
info
.
section
|
|
field
.
addressType
!
=
info
.
addressType
|
|
field
.
contactType
!
=
info
.
contactType
|
|
field
.
fieldName
!
=
info
.
fieldName
)
{
Cu
.
reportError
(
"
Autocomplete
tokens
mismatched
"
)
;
continue
;
}
fieldDetail
.
element
.
setUserInput
(
field
.
value
)
;
}
}
}
;
function
AutocompleteFactory
(
)
{
}
AutocompleteFactory
.
prototype
=
{
register
(
targetConstructor
)
{
let
proto
=
targetConstructor
.
prototype
;
this
.
_classID
=
proto
.
classID
;
let
factory
=
XPCOMUtils
.
_getFactory
(
targetConstructor
)
;
this
.
_factory
=
factory
;
let
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
registerFactory
(
proto
.
classID
proto
.
classDescription
proto
.
contractID
factory
)
;
if
(
proto
.
classID2
)
{
this
.
_classID2
=
proto
.
classID2
;
registrar
.
registerFactory
(
proto
.
classID2
proto
.
classDescription
proto
.
contractID2
factory
)
;
}
}
unregister
(
)
{
let
registrar
=
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
;
registrar
.
unregisterFactory
(
this
.
_classID
this
.
_factory
)
;
if
(
this
.
_classID2
)
{
registrar
.
unregisterFactory
(
this
.
_classID2
this
.
_factory
)
;
}
this
.
_factory
=
null
;
}
}
;
function
AutofillProfileAutoCompleteSearch
(
)
{
}
AutofillProfileAutoCompleteSearch
.
prototype
=
{
classID
:
Components
.
ID
(
"
4f9f1e4c
-
7f2c
-
439e
-
9c9e
-
566b68bc187d
"
)
contractID
:
"
mozilla
.
org
/
autocomplete
/
search
;
1
?
name
=
autofill
-
profiles
"
classDescription
:
"
AutofillProfileAutoCompleteSearch
"
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIAutoCompleteSearch
]
)
startSearch
(
searchString
searchParam
previousResult
listener
)
{
let
labels
=
[
"
Mary
"
"
John
"
]
;
let
values
=
[
"
Mary
S
.
"
"
John
S
.
"
]
;
let
comments
=
[
"
123
Sesame
Street
.
"
"
331
E
.
Evelyn
Avenue
"
]
;
let
result
=
new
FormAutoCompleteResult
(
searchString
Ci
.
nsIAutoCompleteResult
.
RESULT_SUCCESS
0
"
"
values
labels
comments
)
;
listener
.
onSearchResult
(
this
result
)
;
}
stopSearch
(
)
{
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
AutofillProfileAutoCompleteSearch
]
)
;
let
ProfileAutocomplete
=
{
_registered
:
false
_factory
:
null
ensureRegistered
(
)
{
if
(
this
.
_registered
)
{
return
;
}
this
.
_factory
=
new
AutocompleteFactory
(
)
;
this
.
_factory
.
register
(
AutofillProfileAutoCompleteSearch
)
;
this
.
_registered
=
true
;
}
ensureUnregistered
(
)
{
if
(
!
this
.
_registered
)
{
return
;
}
this
.
_factory
.
unregister
(
)
;
this
.
_factory
=
null
;
this
.
_registered
=
false
;
}
}
;
