"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillContent
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FormAutofill
"
"
resource
:
/
/
formautofill
/
FormAutofill
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FormAutofillUtils
"
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
var
FormAutofillFrameScript
=
{
_nextHandleElement
:
null
_alreadyDOMContentLoaded
:
false
_hasDOMContentLoadedHandler
:
false
_hasPendingTask
:
false
_doIdentifyAutofillFields
(
)
{
if
(
this
.
_hasPendingTask
)
{
return
;
}
this
.
_hasPendingTask
=
true
;
setTimeout
(
(
)
=
>
{
FormAutofillContent
.
identifyAutofillFields
(
this
.
_nextHandleElement
)
;
this
.
_hasPendingTask
=
false
;
this
.
_nextHandleElement
=
null
;
sendAsyncMessage
(
"
FormAutofill
:
FieldsIdentified
"
)
;
FormAutofillContent
.
updateActiveInput
(
)
;
}
)
;
}
init
(
)
{
addEventListener
(
"
focusin
"
this
)
;
addMessageListener
(
"
FormAutofill
:
PreviewProfile
"
this
)
;
addMessageListener
(
"
FormAutofill
:
ClearForm
"
this
)
;
addMessageListener
(
"
FormAutoComplete
:
PopupClosed
"
this
)
;
addMessageListener
(
"
FormAutoComplete
:
PopupOpened
"
this
)
;
}
handleEvent
(
evt
)
{
if
(
!
evt
.
isTrusted
|
|
!
FormAutofill
.
isAutofillEnabled
)
{
return
;
}
FormAutofillContent
.
updateActiveInput
(
)
;
let
element
=
evt
.
target
;
if
(
!
FormAutofillUtils
.
isFieldEligibleForAutofill
(
element
)
)
{
return
;
}
this
.
_nextHandleElement
=
element
;
if
(
!
this
.
_alreadyDOMContentLoaded
)
{
let
doc
=
element
.
ownerDocument
;
if
(
doc
.
readyState
=
=
=
"
loading
"
)
{
if
(
!
this
.
_hasDOMContentLoadedHandler
)
{
this
.
_hasDOMContentLoadedHandler
=
true
;
doc
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
this
.
_doIdentifyAutofillFields
(
)
{
once
:
true
}
)
;
}
return
;
}
this
.
_alreadyDOMContentLoaded
=
true
;
}
this
.
_doIdentifyAutofillFields
(
)
;
}
receiveMessage
(
message
)
{
if
(
!
FormAutofill
.
isAutofillEnabled
)
{
return
;
}
const
doc
=
content
.
document
;
const
{
chromeEventHandler
}
=
doc
.
ownerGlobal
.
getInterface
(
Ci
.
nsIDocShell
)
;
switch
(
message
.
name
)
{
case
"
FormAutofill
:
PreviewProfile
"
:
{
FormAutofillContent
.
previewProfile
(
doc
)
;
break
;
}
case
"
FormAutofill
:
ClearForm
"
:
{
FormAutofillContent
.
clearForm
(
)
;
break
;
}
case
"
FormAutoComplete
:
PopupClosed
"
:
{
FormAutofillContent
.
onPopupClosed
(
message
.
data
.
selectedRowStyle
)
;
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
{
chromeEventHandler
.
removeEventListener
(
"
keydown
"
FormAutofillContent
.
_onKeyDown
true
)
;
}
)
;
break
;
}
case
"
FormAutoComplete
:
PopupOpened
"
:
{
chromeEventHandler
.
addEventListener
(
"
keydown
"
FormAutofillContent
.
_onKeyDown
true
)
;
break
;
}
}
}
}
;
FormAutofillFrameScript
.
init
(
)
;
