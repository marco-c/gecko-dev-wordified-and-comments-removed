"
use
strict
"
;
const
EDIT_ADDRESS_URL
=
"
chrome
:
/
/
formautofill
/
content
/
editAddress
.
xhtml
"
;
const
EDIT_CREDIT_CARD_URL
=
"
chrome
:
/
/
formautofill
/
content
/
editCreditCard
.
xhtml
"
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
FormAutofill
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofill
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CreditCard
"
"
resource
:
/
/
gre
/
modules
/
CreditCard
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
formAutofillStorage
"
"
resource
:
/
/
formautofill
/
FormAutofillStorage
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FormAutofillUtils
"
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
OSKeyStore
"
"
resource
:
/
/
formautofill
/
OSKeyStore
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
reauthPasswordPromptMessage
"
(
)
=
>
{
const
brandShortName
=
FormAutofillUtils
.
brandBundle
.
GetStringFromName
(
"
brandShortName
"
)
;
return
FormAutofillUtils
.
stringBundle
.
formatStringFromName
(
editCreditCardPasswordPrompt
.
{
AppConstants
.
platform
}
[
brandShortName
]
)
;
}
)
;
this
.
log
=
null
;
FormAutofill
.
defineLazyLogGetter
(
this
"
manageAddresses
"
)
;
class
ManageRecords
{
constructor
(
subStorageName
elements
)
{
this
.
_storageInitPromise
=
formAutofillStorage
.
initialize
(
)
;
this
.
_subStorageName
=
subStorageName
;
this
.
_elements
=
elements
;
this
.
_newRequest
=
false
;
this
.
_isLoadingRecords
=
false
;
this
.
prefWin
=
window
.
opener
;
this
.
localizeDocument
(
)
;
window
.
addEventListener
(
"
DOMContentLoaded
"
this
{
once
:
true
}
)
;
}
async
init
(
)
{
await
this
.
loadRecords
(
)
;
this
.
attachEventListeners
(
)
;
window
.
dispatchEvent
(
new
CustomEvent
(
"
FormReady
"
)
)
;
}
uninit
(
)
{
log
.
debug
(
"
uninit
"
)
;
this
.
detachEventListeners
(
)
;
this
.
_elements
=
null
;
}
localizeDocument
(
)
{
document
.
documentElement
.
style
.
minWidth
=
FormAutofillUtils
.
stringBundle
.
GetStringFromName
(
"
manageDialogsWidth
"
)
;
FormAutofillUtils
.
localizeMarkup
(
document
)
;
}
get
_selectedOptions
(
)
{
return
Array
.
from
(
this
.
_elements
.
records
.
selectedOptions
)
;
}
async
getStorage
(
)
{
await
this
.
_storageInitPromise
;
return
formAutofillStorage
[
this
.
_subStorageName
]
;
}
async
loadRecords
(
)
{
if
(
this
.
_isLoadingRecords
)
{
this
.
_newRequest
=
true
;
return
;
}
this
.
_isLoadingRecords
=
true
;
await
this
.
_loadRecords
(
)
;
while
(
this
.
_newRequest
)
{
this
.
_newRequest
=
false
;
await
this
.
_loadRecords
(
)
;
}
this
.
_isLoadingRecords
=
false
;
this
.
_elements
.
records
.
dispatchEvent
(
new
CustomEvent
(
"
RecordsLoaded
"
)
)
;
}
async
_loadRecords
(
)
{
let
storage
=
await
this
.
getStorage
(
)
;
let
records
=
await
storage
.
getAll
(
)
;
records
.
sort
(
(
a
b
)
=
>
{
let
aLastUsed
=
a
.
timeLastUsed
|
|
a
.
timeLastModified
;
let
bLastUsed
=
b
.
timeLastUsed
|
|
b
.
timeLastModified
;
return
bLastUsed
-
aLastUsed
;
}
)
;
await
this
.
renderRecordElements
(
records
)
;
this
.
updateButtonsStates
(
this
.
_selectedOptions
.
length
)
;
}
async
renderRecordElements
(
records
)
{
let
selectedGuids
=
this
.
_selectedOptions
.
map
(
option
=
>
option
.
value
)
;
this
.
clearRecordElements
(
)
;
for
(
let
record
of
records
)
{
let
option
=
new
Option
(
this
.
getLabel
(
record
)
record
.
guid
false
selectedGuids
.
includes
(
record
.
guid
)
)
;
option
.
record
=
record
;
this
.
_elements
.
records
.
appendChild
(
option
)
;
}
}
clearRecordElements
(
)
{
let
parent
=
this
.
_elements
.
records
;
while
(
parent
.
lastChild
)
{
parent
.
removeChild
(
parent
.
lastChild
)
;
}
}
async
removeRecords
(
options
)
{
let
storage
=
await
this
.
getStorage
(
)
;
Services
.
obs
.
removeObserver
(
this
"
formautofill
-
storage
-
changed
"
)
;
for
(
let
option
of
options
)
{
storage
.
remove
(
option
.
value
)
;
option
.
remove
(
)
;
}
this
.
updateButtonsStates
(
this
.
_selectedOptions
)
;
Services
.
obs
.
addObserver
(
this
"
formautofill
-
storage
-
changed
"
)
;
this
.
_elements
.
records
.
dispatchEvent
(
new
CustomEvent
(
"
RecordsRemoved
"
)
)
;
}
updateButtonsStates
(
selectedCount
)
{
log
.
debug
(
"
updateButtonsStates
:
"
selectedCount
)
;
if
(
selectedCount
=
=
0
)
{
this
.
_elements
.
edit
.
setAttribute
(
"
disabled
"
"
disabled
"
)
;
this
.
_elements
.
remove
.
setAttribute
(
"
disabled
"
"
disabled
"
)
;
}
else
if
(
selectedCount
=
=
1
)
{
this
.
_elements
.
edit
.
removeAttribute
(
"
disabled
"
)
;
this
.
_elements
.
remove
.
removeAttribute
(
"
disabled
"
)
;
}
else
if
(
selectedCount
>
1
)
{
this
.
_elements
.
edit
.
setAttribute
(
"
disabled
"
"
disabled
"
)
;
this
.
_elements
.
remove
.
removeAttribute
(
"
disabled
"
)
;
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
{
this
.
init
(
)
;
break
;
}
case
"
click
"
:
{
this
.
handleClick
(
event
)
;
break
;
}
case
"
change
"
:
{
this
.
updateButtonsStates
(
this
.
_selectedOptions
.
length
)
;
break
;
}
case
"
unload
"
:
{
this
.
uninit
(
)
;
break
;
}
case
"
keypress
"
:
{
this
.
handleKeyPress
(
event
)
;
break
;
}
case
"
contextmenu
"
:
{
event
.
preventDefault
(
)
;
break
;
}
}
}
handleClick
(
event
)
{
if
(
event
.
target
=
=
this
.
_elements
.
remove
)
{
this
.
removeRecords
(
this
.
_selectedOptions
)
;
}
else
if
(
event
.
target
=
=
this
.
_elements
.
add
)
{
this
.
openEditDialog
(
)
;
}
else
if
(
event
.
target
=
=
this
.
_elements
.
edit
|
|
event
.
target
.
parentNode
=
=
this
.
_elements
.
records
&
&
event
.
detail
>
1
)
{
this
.
openEditDialog
(
this
.
_selectedOptions
[
0
]
.
record
)
;
}
}
handleKeyPress
(
event
)
{
if
(
event
.
keyCode
=
=
KeyEvent
.
DOM_VK_ESCAPE
)
{
window
.
close
(
)
;
}
if
(
event
.
keyCode
=
=
KeyEvent
.
DOM_VK_DELETE
)
{
this
.
removeRecords
(
this
.
_selectedOptions
)
;
}
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
formautofill
-
storage
-
changed
"
:
{
this
.
loadRecords
(
)
;
}
}
}
attachEventListeners
(
)
{
window
.
addEventListener
(
"
unload
"
this
{
once
:
true
}
)
;
window
.
addEventListener
(
"
keypress
"
this
)
;
window
.
addEventListener
(
"
contextmenu
"
this
)
;
this
.
_elements
.
records
.
addEventListener
(
"
change
"
this
)
;
this
.
_elements
.
records
.
addEventListener
(
"
click
"
this
)
;
this
.
_elements
.
controlsContainer
.
addEventListener
(
"
click
"
this
)
;
Services
.
obs
.
addObserver
(
this
"
formautofill
-
storage
-
changed
"
)
;
}
detachEventListeners
(
)
{
window
.
removeEventListener
(
"
keypress
"
this
)
;
window
.
removeEventListener
(
"
contextmenu
"
this
)
;
this
.
_elements
.
records
.
removeEventListener
(
"
change
"
this
)
;
this
.
_elements
.
records
.
removeEventListener
(
"
click
"
this
)
;
this
.
_elements
.
controlsContainer
.
removeEventListener
(
"
click
"
this
)
;
Services
.
obs
.
removeObserver
(
this
"
formautofill
-
storage
-
changed
"
)
;
}
}
class
ManageAddresses
extends
ManageRecords
{
constructor
(
elements
)
{
super
(
"
addresses
"
elements
)
;
elements
.
add
.
setAttribute
(
"
searchkeywords
"
FormAutofillUtils
.
EDIT_ADDRESS_KEYWORDS
.
map
(
key
=
>
FormAutofillUtils
.
stringBundle
.
GetStringFromName
(
key
)
)
.
join
(
"
\
n
"
)
)
;
}
openEditDialog
(
address
)
{
this
.
prefWin
.
gSubDialog
.
open
(
EDIT_ADDRESS_URL
null
{
record
:
address
noValidate
:
true
}
)
;
}
getLabel
(
address
)
{
return
FormAutofillUtils
.
getAddressLabel
(
address
)
;
}
}
class
ManageCreditCards
extends
ManageRecords
{
constructor
(
elements
)
{
super
(
"
creditCards
"
elements
)
;
elements
.
add
.
setAttribute
(
"
searchkeywords
"
FormAutofillUtils
.
EDIT_CREDITCARD_KEYWORDS
.
map
(
key
=
>
FormAutofillUtils
.
stringBundle
.
GetStringFromName
(
key
)
)
.
join
(
"
\
n
"
)
)
;
this
.
_isDecrypted
=
false
;
}
async
openEditDialog
(
creditCard
)
{
if
(
!
creditCard
|
|
await
OSKeyStore
.
ensureLoggedIn
(
reauthPasswordPromptMessage
)
)
{
let
decryptedCCNumObj
=
{
}
;
if
(
creditCard
&
&
creditCard
[
"
cc
-
number
-
encrypted
"
]
)
{
try
{
decryptedCCNumObj
[
"
cc
-
number
"
]
=
await
OSKeyStore
.
decrypt
(
creditCard
[
"
cc
-
number
-
encrypted
"
]
)
;
}
catch
(
ex
)
{
if
(
ex
.
result
=
=
Cr
.
NS_ERROR_ABORT
)
{
return
;
}
decryptedCCNumObj
[
"
cc
-
number
"
]
=
"
"
;
Cu
.
reportError
(
ex
)
;
}
}
let
decryptedCreditCard
=
Object
.
assign
(
{
}
creditCard
decryptedCCNumObj
)
;
this
.
prefWin
.
gSubDialog
.
open
(
EDIT_CREDIT_CARD_URL
"
resizable
=
no
"
{
record
:
decryptedCreditCard
}
)
;
}
}
getLabel
(
creditCard
)
{
return
CreditCard
.
getLabel
(
{
name
:
creditCard
[
"
cc
-
name
"
]
number
:
creditCard
[
"
cc
-
number
"
]
}
)
;
}
async
renderRecordElements
(
records
)
{
this
.
_isDecrypted
=
false
;
this
.
_elements
.
records
.
classList
.
toggle
(
"
branded
"
AppConstants
.
MOZILLA_OFFICIAL
)
;
await
super
.
renderRecordElements
(
records
)
;
let
options
=
this
.
_elements
.
records
.
options
;
for
(
let
option
of
options
)
{
let
record
=
option
.
record
;
if
(
record
&
&
record
[
"
cc
-
type
"
]
)
{
option
.
setAttribute
(
"
cc
-
type
"
record
[
"
cc
-
type
"
]
)
;
}
else
{
option
.
removeAttribute
(
"
cc
-
type
"
)
;
}
}
}
updateButtonsStates
(
selectedCount
)
{
super
.
updateButtonsStates
(
selectedCount
)
;
}
handleClick
(
event
)
{
super
.
handleClick
(
event
)
;
}
}
