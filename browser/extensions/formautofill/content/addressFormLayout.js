ChromeUtils
.
defineESModuleGetters
(
this
{
FormAutofill
:
"
resource
:
/
/
autofill
/
FormAutofill
.
sys
.
mjs
"
FormAutofillUtils
:
"
resource
:
/
/
gre
/
modules
/
shared
/
FormAutofillUtils
.
sys
.
mjs
"
}
)
;
const
fieldTemplates
=
{
commonAttributes
(
item
)
{
return
{
id
:
item
.
fieldId
name
:
item
.
fieldId
required
:
item
.
required
value
:
item
.
value
?
?
"
"
}
;
}
input
(
item
)
{
return
{
tag
:
"
input
"
type
:
item
.
type
?
?
"
text
"
.
.
.
this
.
commonAttributes
(
item
)
}
;
}
textarea
(
item
)
{
return
{
tag
:
"
textarea
"
.
.
.
this
.
commonAttributes
(
item
)
}
;
}
select
(
item
)
{
return
{
tag
:
"
select
"
children
:
item
.
options
.
map
(
(
{
value
text
}
)
=
>
(
{
tag
:
"
option
"
selected
:
value
=
=
=
item
.
value
value
text
}
)
)
.
.
.
this
.
commonAttributes
(
item
)
}
;
}
}
;
const
createElement
=
(
tag
{
children
=
[
]
.
.
.
attributes
}
)
=
>
{
const
element
=
document
.
createElement
(
tag
)
;
for
(
let
[
attributeName
attributeValue
]
of
Object
.
entries
(
attributes
)
)
{
if
(
attributeName
in
element
)
{
element
[
attributeName
]
=
attributeValue
;
}
else
{
element
.
setAttribute
(
attributeName
attributeValue
)
;
}
}
for
(
let
{
tag
:
childTag
.
.
.
childRest
}
of
children
)
{
element
.
appendChild
(
createElement
(
childTag
childRest
)
)
;
}
return
element
;
}
;
function
*
convertLayoutToUI
(
fields
l10nStrings
)
{
for
(
const
item
of
fields
)
{
const
fieldTag
=
item
.
options
?
"
select
"
:
item
.
multiline
?
"
textarea
"
:
"
input
"
;
const
fieldUI
=
{
label
:
{
id
:
{
item
.
fieldId
}
-
container
class
:
container
{
item
.
newLine
?
"
new
-
line
"
:
"
"
}
}
field
:
fieldTemplates
[
fieldTag
]
(
item
)
span
:
{
class
:
"
label
-
text
"
textContent
:
l10nStrings
[
item
.
l10nId
]
?
?
"
"
}
}
;
const
label
=
createElement
(
"
label
"
fieldUI
.
label
)
;
const
{
tag
.
.
.
rest
}
=
fieldUI
.
field
;
const
field
=
createElement
(
tag
rest
)
;
label
.
appendChild
(
field
)
;
const
span
=
createElement
(
"
span
"
fieldUI
.
span
)
;
label
.
appendChild
(
span
)
;
yield
label
;
}
}
const
getCurrentFormData
=
(
)
=
>
{
const
formElement
=
document
.
querySelector
(
"
form
"
)
;
const
formData
=
new
FormData
(
formElement
)
;
return
Object
.
fromEntries
(
formData
.
entries
(
)
)
;
}
;
const
canSubmitForm
=
(
)
=
>
{
const
formData
=
getCurrentFormData
(
)
;
const
validValues
=
Object
.
values
(
formData
)
.
filter
(
Boolean
)
;
return
validValues
.
length
>
=
2
;
}
;
const
createFormLayoutFromRecord
=
(
formElement
record
=
{
country
:
FormAutofill
.
DEFAULT_REGION
}
l10nStrings
=
{
}
)
=
>
{
const
selects
=
formElement
.
querySelectorAll
(
"
select
:
not
(
#
country
)
"
)
;
for
(
const
select
of
selects
)
{
select
.
value
=
"
"
;
}
const
formData
=
getCurrentFormData
(
)
;
record
=
{
.
.
.
record
.
.
.
formData
}
;
formElement
.
innerHTML
=
"
"
;
const
fields
=
FormAutofillUtils
.
getFormLayout
(
record
)
;
const
layoutGenerator
=
convertLayoutToUI
(
fields
l10nStrings
)
;
for
(
const
fieldElement
of
layoutGenerator
)
{
formElement
.
appendChild
(
fieldElement
)
;
}
document
.
querySelector
(
"
#
country
"
)
.
addEventListener
(
"
change
"
ev
=
>
setTimeout
(
(
)
=
>
{
record
.
country
=
ev
.
target
.
value
;
createFormLayoutFromRecord
(
formElement
record
l10nStrings
)
;
}
300
)
{
once
:
true
}
)
;
window
.
dispatchEvent
(
new
CustomEvent
(
"
FormReadyForTests
"
)
)
;
}
;
