"
use
strict
"
;
let
formFillChromeScript
;
let
expectingPopup
=
null
;
const
{
FormAutofillUtils
}
=
SpecialPowers
.
Cu
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
async
function
sleep
(
ms
=
500
reason
=
"
Intentionally
wait
for
UI
ready
"
)
{
SimpleTest
.
requestFlakyTimeout
(
reason
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
ms
)
)
;
}
async
function
setInput
(
selector
value
)
{
let
input
=
document
.
querySelector
(
"
input
"
+
selector
)
;
input
.
value
=
value
;
input
.
focus
(
)
;
await
sleep
(
500
"
Guarantee
asynchronous
identifyAutofillFields
is
invoked
"
)
;
return
input
;
}
function
clickOnElement
(
selector
)
{
let
element
=
document
.
querySelector
(
selector
)
;
if
(
!
element
)
{
throw
new
Error
(
"
Can
not
find
the
element
"
)
;
}
SimpleTest
.
executeSoon
(
(
)
=
>
element
.
click
(
)
)
;
}
async
function
onStorageChanged
(
type
)
{
return
new
Promise
(
resolve
=
>
{
formFillChromeScript
.
addMessageListener
(
"
formautofill
-
storage
-
changed
"
function
onChanged
(
data
)
{
formFillChromeScript
.
removeMessageListener
(
"
formautofill
-
storage
-
changed
"
onChanged
)
;
is
(
data
.
data
type
Receive
{
type
}
storage
changed
event
)
;
resolve
(
)
;
}
)
;
}
)
;
}
function
checkMenuEntries
(
expectedValues
isFormAutofillResult
=
true
)
{
let
actualValues
=
getMenuEntries
(
)
;
let
expectedLength
=
isFormAutofillResult
?
expectedValues
.
length
+
1
:
expectedValues
.
length
;
is
(
actualValues
.
length
expectedLength
"
Checking
length
of
expected
menu
"
)
;
for
(
let
i
=
0
;
i
<
expectedValues
.
length
;
i
+
+
)
{
is
(
actualValues
[
i
]
expectedValues
[
i
]
"
Checking
menu
entry
#
"
+
i
)
;
}
}
function
invokeAsyncChromeTask
(
message
response
payload
=
{
}
)
{
return
new
Promise
(
resolve
=
>
{
formFillChromeScript
.
sendAsyncMessage
(
message
payload
)
;
formFillChromeScript
.
addMessageListener
(
response
function
onReceived
(
data
)
{
formFillChromeScript
.
removeMessageListener
(
response
onReceived
)
;
resolve
(
data
)
;
}
)
;
}
)
;
}
async
function
addAddress
(
address
)
{
await
invokeAsyncChromeTask
(
"
FormAutofillTest
:
AddAddress
"
"
FormAutofillTest
:
AddressAdded
"
{
address
}
)
;
await
sleep
(
)
;
}
async
function
removeAddress
(
guid
)
{
return
invokeAsyncChromeTask
(
"
FormAutofillTest
:
RemoveAddress
"
"
FormAutofillTest
:
AddressRemoved
"
{
guid
}
)
;
}
async
function
updateAddress
(
guid
address
)
{
return
invokeAsyncChromeTask
(
"
FormAutofillTest
:
UpdateAddress
"
"
FormAutofillTest
:
AddressUpdated
"
{
address
guid
}
)
;
}
async
function
checkAddresses
(
expectedAddresses
)
{
return
invokeAsyncChromeTask
(
"
FormAutofillTest
:
CheckAddresses
"
"
FormAutofillTest
:
areAddressesMatching
"
{
expectedAddresses
}
)
;
}
async
function
cleanUpAddresses
(
)
{
return
invokeAsyncChromeTask
(
"
FormAutofillTest
:
CleanUpAddresses
"
"
FormAutofillTest
:
AddressesCleanedUp
"
)
;
}
async
function
addCreditCard
(
creditcard
)
{
await
invokeAsyncChromeTask
(
"
FormAutofillTest
:
AddCreditCard
"
"
FormAutofillTest
:
CreditCardAdded
"
{
creditcard
}
)
;
await
sleep
(
)
;
}
async
function
removeCreditCard
(
guid
)
{
return
invokeAsyncChromeTask
(
"
FormAutofillTest
:
RemoveCreditCard
"
"
FormAutofillTest
:
CreditCardRemoved
"
{
guid
}
)
;
}
async
function
checkCreditCards
(
expectedCreditCards
)
{
return
invokeAsyncChromeTask
(
"
FormAutofillTest
:
CheckCreditCards
"
"
FormAutofillTest
:
areCreditCardsMatching
"
{
expectedCreditCards
}
)
;
}
async
function
cleanUpCreditCards
(
)
{
return
invokeAsyncChromeTask
(
"
FormAutofillTest
:
CleanUpCreditCards
"
"
FormAutofillTest
:
CreditCardsCleanedUp
"
)
;
}
async
function
cleanUpStorage
(
)
{
await
cleanUpAddresses
(
)
;
await
cleanUpCreditCards
(
)
;
}
function
patchRecordCCNumber
(
record
)
{
const
ccNumber
=
record
[
"
cc
-
number
"
]
;
const
normalizedCCNumber
=
"
*
"
.
repeat
(
ccNumber
.
length
-
4
)
+
ccNumber
.
substr
(
-
4
)
;
const
ccNumberFmt
=
FormAutofillUtils
.
fmtMaskedCreditCardLabel
(
normalizedCCNumber
)
;
return
Object
.
assign
(
{
}
record
{
ccNumberFmt
}
)
;
}
function
expectPopup
(
)
{
info
(
"
expecting
a
popup
"
)
;
return
new
Promise
(
resolve
=
>
{
expectingPopup
=
resolve
;
}
)
;
}
function
notExpectPopup
(
ms
=
500
)
{
info
(
"
not
expecting
a
popup
"
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
expectingPopup
=
reject
.
bind
(
this
"
Unexpected
Popup
"
)
;
setTimeout
(
resolve
ms
)
;
}
)
;
}
function
popupShownListener
(
)
{
info
(
"
popup
shown
for
test
"
)
;
if
(
expectingPopup
)
{
expectingPopup
(
)
;
expectingPopup
=
null
;
}
}
function
initPopupListener
(
)
{
registerPopupShownListener
(
popupShownListener
)
;
}
function
formAutoFillCommonSetup
(
)
{
let
chromeURL
=
SimpleTest
.
getTestFileURL
(
"
formautofill_parent_utils
.
js
"
)
;
formFillChromeScript
=
SpecialPowers
.
loadChromeScript
(
chromeURL
)
;
formFillChromeScript
.
addMessageListener
(
"
onpopupshown
"
(
{
results
}
)
=
>
{
gLastAutoCompleteResults
=
results
;
if
(
gPopupShownListener
)
{
gPopupShownListener
(
{
results
}
)
;
}
}
)
;
SimpleTest
.
registerCleanupFunction
(
(
)
=
>
{
formFillChromeScript
.
sendAsyncMessage
(
"
cleanup
"
)
;
formFillChromeScript
.
destroy
(
)
;
expectingPopup
=
null
;
}
)
;
}
formAutoFillCommonSetup
(
)
;
