"
use
strict
"
;
const
SUPPORT_COUNTRIES_TESTCASES
=
[
{
country
:
"
US
"
properties
:
[
"
languages
"
"
alternative_names
"
"
sub_keys
"
"
sub_names
"
]
}
{
country
:
"
CA
"
properties
:
[
"
languages
"
"
name
"
"
sub_keys
"
"
sub_names
"
]
}
{
country
:
"
DE
"
properties
:
[
"
name
"
]
}
]
;
var
AddressMetaDataLoader
FormAutofillUtils
;
add_setup
(
async
(
)
=
>
{
(
{
FormAutofillUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
shared
/
FormAutofillUtils
.
sys
.
mjs
"
)
)
;
(
{
AddressMetaDataLoader
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
shared
/
AddressMetaDataLoader
.
sys
.
mjs
"
)
)
;
}
)
;
add_task
(
async
function
test_initalState
(
)
{
Assert
.
deepEqual
(
AddressMetaDataLoader
.
addressData
{
}
)
;
Assert
.
equal
(
AddressMetaDataLoader
.
dataLoaded
.
country
false
)
;
Assert
.
equal
(
AddressMetaDataLoader
.
dataLoaded
.
level1
.
size
0
)
;
}
)
;
add_task
(
async
function
test_loadDataCountry
(
)
{
sinon
.
spy
(
AddressMetaDataLoader
"
loadAddressMetaData
"
)
;
let
metadata
=
FormAutofillUtils
.
getCountryAddressData
(
"
US
"
)
;
Assert
.
ok
(
AddressMetaDataLoader
.
addressData
"
addressData
exists
"
)
;
Assert
.
equal
(
AddressMetaDataLoader
.
dataLoaded
.
country
true
)
;
Assert
.
equal
(
AddressMetaDataLoader
.
dataLoaded
.
level1
.
size
0
)
;
sinon
.
assert
.
called
(
AddressMetaDataLoader
.
loadAddressMetaData
)
;
Assert
.
equal
(
metadata
.
id
"
data
/
US
"
)
;
Assert
.
ok
(
metadata
.
alternative_names
"
US
alternative
names
should
be
loaded
from
extension
"
)
;
AddressMetaDataLoader
.
loadAddressMetaData
.
resetHistory
(
)
;
let
newMetadata
=
FormAutofillUtils
.
getCountryAddressData
(
)
;
sinon
.
assert
.
notCalled
(
AddressMetaDataLoader
.
loadAddressMetaData
)
;
Assert
.
deepEqual
(
metadata
newMetadata
"
metadata
should
be
US
if
country
is
not
specified
"
)
;
AddressMetaDataLoader
.
loadAddressMetaData
.
resetHistory
(
)
;
}
)
;
add_task
(
async
function
test_loadDataState
(
)
{
sinon
.
spy
(
AddressMetaDataLoader
"
loadAddressMetaData
"
)
;
let
undefinedMetadata
=
FormAutofillUtils
.
getCountryAddressData
(
"
US
"
"
CA
"
)
;
sinon
.
assert
.
called
(
AddressMetaDataLoader
.
loadAddressMetaData
)
;
Assert
.
equal
(
undefinedMetadata
undefined
"
metadata
should
be
undefined
"
)
;
Assert
.
ok
(
AddressMetaDataLoader
.
dataLoaded
.
level1
.
has
(
"
US
"
)
"
level
1
state
array
should
be
set
even
there
'
s
no
valid
metadata
"
)
;
AddressMetaDataLoader
.
loadAddressMetaData
.
resetHistory
(
)
;
undefinedMetadata
=
FormAutofillUtils
.
getCountryAddressData
(
"
US
"
"
AS
"
)
;
Assert
.
equal
(
undefinedMetadata
undefined
"
metadata
should
be
undefined
"
)
;
sinon
.
assert
.
notCalled
(
AddressMetaDataLoader
.
loadAddressMetaData
)
;
}
)
.
skip
(
)
;
SUPPORT_COUNTRIES_TESTCASES
.
forEach
(
testcase
=
>
{
add_task
(
async
function
test_support_country
(
)
{
info
(
"
Starting
testcase
:
Check
"
+
testcase
.
country
+
"
metadata
"
)
;
let
metadata
=
FormAutofillUtils
.
getCountryAddressData
(
testcase
.
country
)
;
Assert
.
ok
(
testcase
.
properties
.
every
(
key
=
>
metadata
[
key
]
)
"
These
properties
should
exist
:
"
+
testcase
.
properties
)
;
if
(
metadata
.
languages
&
&
metadata
.
languages
.
length
>
1
)
{
let
locales
=
FormAutofillUtils
.
getCountryAddressDataWithLocales
(
testcase
.
country
)
;
Assert
.
equal
(
metadata
.
languages
.
length
locales
.
length
"
Total
supported
locales
should
be
matched
"
)
;
metadata
.
languages
.
forEach
(
(
lang
index
)
=
>
{
Assert
.
equal
(
lang
locales
[
index
]
.
lang
Should
support
{
lang
}
)
;
}
)
;
}
}
)
;
}
)
;
