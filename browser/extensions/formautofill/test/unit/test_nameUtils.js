"
use
strict
"
;
var
FormAutofillNameUtils
;
add_task
(
async
function
(
)
{
(
{
FormAutofillNameUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
autofill
/
FormAutofillNameUtils
.
jsm
"
)
)
;
}
)
;
const
TESTCASES
=
[
{
description
:
"
Full
name
including
given
middle
and
family
names
"
fullName
:
"
Homer
Jay
Simpson
"
nameParts
:
{
given
:
"
Homer
"
middle
:
"
Jay
"
family
:
"
Simpson
"
}
}
{
description
:
"
No
middle
name
"
fullName
:
"
Moe
Szyslak
"
nameParts
:
{
given
:
"
Moe
"
middle
:
"
"
family
:
"
Szyslak
"
}
}
{
description
:
"
Common
name
prefixes
removed
"
fullName
:
"
Reverend
Timothy
Lovejoy
"
nameParts
:
{
given
:
"
Timothy
"
middle
:
"
"
family
:
"
Lovejoy
"
}
expectedFullName
:
"
Timothy
Lovejoy
"
}
{
description
:
"
Common
name
suffixes
removed
"
fullName
:
"
John
Frink
Phd
"
nameParts
:
{
given
:
"
John
"
middle
:
"
"
family
:
"
Frink
"
}
expectedFullName
:
"
John
Frink
"
}
{
description
:
"
Exception
to
the
name
suffix
removal
"
fullName
:
"
John
Ma
"
nameParts
:
{
given
:
"
John
"
middle
:
"
"
family
:
"
Ma
"
}
}
{
description
:
"
Common
family
name
prefixes
not
considered
a
middle
name
"
fullName
:
"
Milhouse
Van
Houten
"
nameParts
:
{
given
:
"
Milhouse
"
middle
:
"
"
family
:
"
Van
Houten
"
}
}
{
description
:
"
Chinese
name
Unihan
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
expectedFullName
:
"
"
}
{
description
:
'
Chinese
name
Unihan
"
IDEOGRAPHIC
SPACE
"
'
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
expectedFullName
:
"
"
}
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
expectedFullName
:
"
"
}
{
description
:
"
Japanese
name
Unihan
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
expectedFullName
:
"
"
}
{
description
:
"
Foreign
name
in
Japanese
Katakana
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
expectedFullName
:
"
"
}
{
description
:
"
Foreign
name
in
Japanese
Katakana
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
expectedFullName
:
"
"
}
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
(
Simplified
)
Chinese
name
Unihan
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
(
Traditional
)
Chinese
name
Unihan
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
(
Traditional
)
Chinese
name
Unihan
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
Korean
name
Hangul
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
Bogus
"
fullName
:
"
Homer
"
nameParts
:
{
given
:
"
Homer
"
middle
:
"
"
family
:
"
"
}
}
{
description
:
"
Bogus
"
fullName
:
"
Simpson
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
Simpson
"
}
}
{
description
:
"
CJK
has
a
middle
-
name
too
unusual
"
fullName
:
"
"
nameParts
:
{
given
:
"
"
middle
:
"
"
family
:
"
"
}
}
]
;
add_task
(
async
function
test_splitName
(
)
{
TESTCASES
.
forEach
(
testcase
=
>
{
if
(
testcase
.
fullName
)
{
info
(
"
Starting
testcase
:
"
+
testcase
.
description
)
;
let
nameParts
=
FormAutofillNameUtils
.
splitName
(
testcase
.
fullName
)
;
Assert
.
deepEqual
(
nameParts
testcase
.
nameParts
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_joinName
(
)
{
TESTCASES
.
forEach
(
testcase
=
>
{
info
(
"
Starting
testcase
:
"
+
testcase
.
description
)
;
let
name
=
FormAutofillNameUtils
.
joinNameParts
(
testcase
.
nameParts
)
;
Assert
.
equal
(
name
testcase
.
expectedFullName
|
|
testcase
.
fullName
)
;
}
)
;
}
)
;
