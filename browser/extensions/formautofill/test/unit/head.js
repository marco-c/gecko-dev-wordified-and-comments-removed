"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
MockDocument
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
DownloadPaths
"
"
resource
:
/
/
gre
/
modules
/
DownloadPaths
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
do_get_profile
(
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
let
self
=
{
}
;
var
sinon
;
Services
.
scriptloader
.
loadSubScript
(
"
resource
:
/
/
testing
-
common
/
sinon
-
1
.
16
.
1
.
js
"
)
;
const
EXTENSION_ID
=
"
formautofill
mozilla
.
org
"
;
let
extensionDir
=
Services
.
dirsvc
.
get
(
"
GreD
"
Ci
.
nsIFile
)
;
extensionDir
.
append
(
"
browser
"
)
;
extensionDir
.
append
(
"
features
"
)
;
extensionDir
.
append
(
EXTENSION_ID
)
;
if
(
!
extensionDir
.
exists
(
)
)
{
extensionDir
=
extensionDir
.
parent
;
extensionDir
.
append
(
EXTENSION_ID
+
"
.
xpi
"
)
;
}
Components
.
manager
.
addBootstrappedManifestLocation
(
extensionDir
)
;
let
gFileCounter
=
Math
.
floor
(
Math
.
random
(
)
*
1000000
)
;
function
getTempFile
(
leafName
)
{
let
[
base
ext
]
=
DownloadPaths
.
splitBaseNameAndExtension
(
leafName
)
;
let
finalLeafName
=
base
+
"
-
"
+
gFileCounter
+
ext
;
gFileCounter
+
+
;
let
file
=
FileUtils
.
getFile
(
"
TmpD
"
[
finalLeafName
]
)
;
do_check_false
(
file
.
exists
(
)
)
;
do_register_cleanup
(
function
(
)
{
if
(
file
.
exists
(
)
)
{
file
.
remove
(
false
)
;
}
}
)
;
return
file
;
}
function
runHeuristicsTest
(
patterns
fixturePathPrefix
)
{
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
FormLikeFactory
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillHeuristics
.
jsm
"
)
;
const
QUERY_STRING
=
[
"
input
"
]
;
patterns
.
forEach
(
testPattern
=
>
{
add_task
(
function
*
(
)
{
do_print
(
"
Starting
test
fixture
:
"
+
testPattern
.
fixturePath
)
;
let
file
=
do_get_file
(
fixturePathPrefix
+
testPattern
.
fixturePath
)
;
let
doc
=
MockDocument
.
createTestDocumentFromFile
(
"
http
:
/
/
localhost
:
8080
/
test
/
"
file
)
;
let
forms
=
[
]
;
for
(
let
query
of
QUERY_STRING
)
{
for
(
let
field
of
doc
.
querySelectorAll
(
query
)
)
{
let
formLike
=
FormLikeFactory
.
createFromField
(
field
)
;
if
(
!
forms
.
some
(
form
=
>
form
.
rootElement
=
=
=
formLike
.
rootElement
)
)
{
forms
.
push
(
formLike
)
;
}
}
}
Assert
.
equal
(
forms
.
length
testPattern
.
expectedResult
.
length
"
Expected
form
count
.
"
)
;
forms
.
forEach
(
(
form
formIndex
)
=
>
{
let
formInfo
=
FormAutofillHeuristics
.
getFormInfo
(
form
)
;
formInfo
.
forEach
(
(
field
fieldIndex
)
=
>
{
let
expectedField
=
testPattern
.
expectedResult
[
formIndex
]
[
fieldIndex
]
;
expectedField
.
elementWeakRef
=
field
.
elementWeakRef
;
Assert
.
deepEqual
(
field
expectedField
)
;
}
)
;
}
)
;
}
)
;
}
)
;
}
add_task
(
function
*
head_initialize
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
formautofill
.
experimental
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
forms
.
autocomplete
.
experimental
"
true
)
;
do_register_cleanup
(
function
head_cleanup
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
formautofill
.
experimental
"
)
;
Services
.
prefs
.
clearUserPref
(
"
dom
.
forms
.
autocomplete
.
experimental
"
)
;
}
)
;
}
)
;
