"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
MockDocument
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
DownloadPaths
"
"
resource
:
/
/
gre
/
modules
/
DownloadPaths
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FileUtils
"
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
const
EXTENSION_ID
=
"
formautofill
mozilla
.
org
"
;
let
extensionDir
=
Services
.
dirsvc
.
get
(
"
GreD
"
Ci
.
nsIFile
)
;
extensionDir
.
append
(
"
browser
"
)
;
extensionDir
.
append
(
"
features
"
)
;
extensionDir
.
append
(
EXTENSION_ID
)
;
if
(
!
extensionDir
.
exists
(
)
)
{
extensionDir
=
extensionDir
.
parent
;
extensionDir
.
append
(
EXTENSION_ID
+
"
.
xpi
"
)
;
}
Components
.
manager
.
addBootstrappedManifestLocation
(
extensionDir
)
;
let
gFileCounter
=
Math
.
floor
(
Math
.
random
(
)
*
1000000
)
;
function
loadFormAutofillContent
(
)
{
let
facGlobal
=
{
addEventListener
:
function
(
)
{
}
}
;
let
loader
=
Cc
[
"
mozilla
.
org
/
moz
/
jssubscript
-
loader
;
1
"
]
.
getService
(
Ci
.
mozIJSSubScriptLoader
)
;
loader
.
loadSubScriptWithOptions
(
"
chrome
:
/
/
formautofill
/
content
/
FormAutofillContent
.
js
"
{
target
:
facGlobal
}
)
;
return
facGlobal
;
}
function
getTempFile
(
leafName
)
{
let
[
base
ext
]
=
DownloadPaths
.
splitBaseNameAndExtension
(
leafName
)
;
let
finalLeafName
=
base
+
"
-
"
+
gFileCounter
+
ext
;
gFileCounter
+
+
;
let
file
=
FileUtils
.
getFile
(
"
TmpD
"
[
finalLeafName
]
)
;
do_check_false
(
file
.
exists
(
)
)
;
do_register_cleanup
(
function
(
)
{
if
(
file
.
exists
(
)
)
{
file
.
remove
(
false
)
;
}
}
)
;
return
file
;
}
add_task
(
function
*
test_common_initialize
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
formautofill
.
experimental
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
dom
.
forms
.
autocomplete
.
experimental
"
true
)
;
do_register_cleanup
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
formautofill
.
experimental
"
)
;
Services
.
prefs
.
clearUserPref
(
"
dom
.
forms
.
autocomplete
.
experimental
"
)
;
}
)
;
}
)
;
