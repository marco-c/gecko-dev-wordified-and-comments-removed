"
use
strict
"
;
const
{
MockRegistrar
}
=
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
MockRegistrar
.
jsm
"
{
}
)
;
let
{
MasterPassword
}
=
Cu
.
import
(
"
resource
:
/
/
formautofill
/
MasterPassword
.
jsm
"
{
}
)
;
const
TESTCASES
=
[
{
description
:
"
With
master
password
set
"
masterPassword
:
"
fakemp
"
mpEnabled
:
true
}
{
description
:
"
Without
master
password
set
"
masterPassword
:
"
"
mpEnabled
:
false
}
]
;
let
gMockPrompter
=
{
passwordToTry
:
null
numPrompts
:
0
promptPassword
(
dialogTitle
text
password
checkMsg
checkValue
)
{
this
.
numPrompts
+
+
;
if
(
this
.
numPrompts
>
1
)
{
return
false
;
}
equal
(
text
"
Please
enter
your
master
password
.
"
"
password
prompt
text
should
be
as
expected
"
)
;
equal
(
checkMsg
null
"
checkMsg
should
be
null
"
)
;
ok
(
this
.
passwordToTry
"
passwordToTry
should
be
non
-
null
"
)
;
password
.
value
=
this
.
passwordToTry
;
return
true
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIPrompt
]
)
}
;
let
gWindowWatcher
=
{
getNewPrompter
:
(
)
=
>
gMockPrompter
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIWindowWatcher
]
)
}
;
do_get_profile
(
)
;
let
windowWatcherCID
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
embedcomp
/
window
-
watcher
;
1
"
gWindowWatcher
)
;
registerCleanupFunction
(
(
)
=
>
{
MockRegistrar
.
unregister
(
windowWatcherCID
)
;
}
)
;
TESTCASES
.
forEach
(
testcase
=
>
{
let
token
=
MasterPassword
.
_token
;
add_task
(
async
function
test_encrypt_decrypt
(
)
{
info
(
"
Starting
testcase
:
"
+
testcase
.
description
)
;
token
.
initPassword
(
testcase
.
masterPassword
)
;
token
.
login
(
false
)
;
Assert
.
equal
(
testcase
.
mpEnabled
token
.
isLoggedIn
(
)
"
Token
should
now
be
logged
into
"
)
;
Assert
.
equal
(
MasterPassword
.
isEnabled
testcase
.
mpEnabled
)
;
let
testText
=
"
test
string
"
;
let
cipherText
=
await
MasterPassword
.
encrypt
(
testText
)
;
Assert
.
notEqual
(
testText
cipherText
)
;
let
plainText
=
await
MasterPassword
.
decrypt
(
cipherText
)
;
Assert
.
equal
(
testText
plainText
)
;
if
(
token
.
isLoggedIn
(
)
)
{
gMockPrompter
.
numPrompts
=
0
;
token
.
logoutSimple
(
)
;
ok
(
!
token
.
isLoggedIn
(
)
"
Token
should
be
logged
out
after
calling
logoutSimple
(
)
"
)
;
gMockPrompter
.
passwordToTry
=
testcase
.
masterPassword
;
await
MasterPassword
.
encrypt
(
testText
)
;
Assert
.
equal
(
gMockPrompter
.
numPrompts
1
"
should
have
prompted
for
encryption
"
)
;
gMockPrompter
.
numPrompts
=
0
;
token
.
logoutSimple
(
)
;
try
{
gMockPrompter
.
passwordToTry
=
"
XXX
"
;
await
MasterPassword
.
decrypt
(
cipherText
)
;
throw
new
Error
(
"
Not
receiving
canceled
master
password
error
"
)
;
}
catch
(
e
)
{
Assert
.
equal
(
e
.
message
"
User
canceled
master
password
entry
"
)
;
}
}
token
.
reset
(
)
;
}
)
;
}
)
;
