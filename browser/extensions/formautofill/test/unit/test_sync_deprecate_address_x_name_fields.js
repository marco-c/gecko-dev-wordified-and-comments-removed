"
use
strict
"
;
const
{
Service
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
services
-
sync
/
service
.
sys
.
mjs
"
)
;
const
{
AddressesEngine
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
autofill
/
FormAutofillSync
.
sys
.
mjs
"
)
;
Services
.
prefs
.
setCharPref
(
"
extensions
.
formautofill
.
loglevel
"
"
Debug
"
)
;
initTestLogging
(
"
Trace
"
)
;
const
TEST_STORE_FILE_NAME
=
"
test
-
profile
.
json
"
;
function
expectProfiles
(
profiles
expected
)
{
expected
.
sort
(
(
a
b
)
=
>
a
.
guid
.
localeCompare
(
b
.
guid
)
)
;
profiles
.
sort
(
(
a
b
)
=
>
a
.
guid
.
localeCompare
(
b
.
guid
)
)
;
try
{
deepEqual
(
profiles
.
map
(
p
=
>
p
.
guid
)
expected
.
map
(
p
=
>
p
.
guid
)
)
;
for
(
let
i
=
0
;
i
<
expected
.
length
;
i
+
+
)
{
let
thisExpected
=
expected
[
i
]
;
let
thisGot
=
profiles
[
i
]
;
equal
(
thisExpected
.
deleted
thisGot
.
deleted
)
;
ok
(
objectMatches
(
thisGot
thisExpected
)
)
;
}
}
catch
(
ex
)
{
info
(
"
Comparing
expected
profiles
:
"
)
;
info
(
JSON
.
stringify
(
expected
undefined
2
)
)
;
info
(
"
against
actual
profiles
:
"
)
;
info
(
JSON
.
stringify
(
profiles
undefined
2
)
)
;
throw
ex
;
}
}
async
function
expectServerProfiles
(
collection
expected
)
{
const
profiles
=
collection
.
payloads
(
)
.
map
(
payload
=
>
Object
.
assign
(
{
guid
:
payload
.
id
}
payload
.
entry
)
)
;
expectProfiles
(
profiles
expected
)
;
}
async
function
expectLocalProfiles
(
profileStorage
expected
)
{
const
profiles
=
await
profileStorage
.
addresses
.
getAll
(
{
rawData
:
true
includeDeleted
:
true
}
)
;
expectProfiles
(
profiles
expected
)
;
}
async
function
setup
(
)
{
let
profileStorage
=
await
initProfileStorage
(
TEST_STORE_FILE_NAME
)
;
Assert
.
equal
(
(
await
profileStorage
.
addresses
.
getAll
(
{
includeDeleted
:
true
}
)
)
.
length
0
)
;
Services
.
prefs
.
setCharPref
(
"
services
.
sync
.
log
.
logger
.
engine
.
addresses
"
"
Trace
"
)
;
let
engine
=
new
AddressesEngine
(
Service
)
;
await
engine
.
initialize
(
)
;
Service
.
scheduler
.
syncThreshold
=
10000000
;
let
syncID
=
await
engine
.
resetLocalSyncID
(
)
;
let
server
=
serverForUsers
(
{
foo
:
"
password
"
}
{
meta
:
{
global
:
{
engines
:
{
addresses
:
{
version
:
engine
.
version
syncID
}
}
}
}
addresses
:
{
}
}
)
;
Service
.
engineManager
.
_engines
.
addresses
=
engine
;
engine
.
enabled
=
true
;
engine
.
_store
.
_storage
=
profileStorage
.
addresses
;
generateNewKeys
(
Service
.
collectionKeys
)
;
await
SyncTestingInfrastructure
(
server
)
;
let
collection
=
server
.
user
(
"
foo
"
)
.
collection
(
"
addresses
"
)
;
return
{
profileStorage
server
collection
engine
}
;
}
async
function
cleanup
(
server
)
{
let
promiseStartOver
=
promiseOneObserver
(
"
weave
:
service
:
start
-
over
:
finish
"
)
;
await
Service
.
startOver
(
)
;
await
promiseStartOver
;
await
promiseStopServer
(
server
)
;
}
function
setupServerRecords
(
server
records
)
{
for
(
const
record
of
records
)
{
server
.
insertWBO
(
"
foo
"
"
addresses
"
new
ServerWBO
(
record
.
guid
encryptPayload
(
{
id
:
record
.
guid
entry
:
Object
.
assign
(
{
}
record
)
}
)
getDateForSync
(
)
)
)
;
}
}
function
assertNumberRecordUploadedBySync
(
engine
expectedNumber
)
{
const
uploadOutgoing
=
engine
.
_uploadOutgoing
;
engine
.
_uploadOutgoing
=
async
function
(
)
{
engine
.
_uploadOutgoing
=
uploadOutgoing
;
try
{
await
uploadOutgoing
.
call
(
this
)
;
}
finally
{
Assert
.
equal
(
this
.
_modified
.
ids
(
)
.
length
expectedNumber
)
;
}
}
;
}
add_task
(
async
function
test_local_upload
(
)
{
const
{
collection
profileStorage
server
engine
}
=
await
setup
(
)
;
try
{
const
localGuid
=
await
profileStorage
.
addresses
.
add
(
{
name
:
"
Mr
John
William
Doe
"
"
street
-
address
"
:
"
Some
Address
"
}
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectServerProfiles
(
collection
[
{
guid
:
localGuid
version
:
1
name
:
"
Mr
John
William
Doe
"
"
given
-
name
"
:
"
John
"
"
additional
-
name
"
:
"
William
"
"
family
-
name
"
:
"
Doe
"
"
street
-
address
"
:
"
Some
Address
"
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_local_upload_no_addtional_name
(
)
{
const
{
collection
profileStorage
server
engine
}
=
await
setup
(
)
;
try
{
const
localGuid
=
await
profileStorage
.
addresses
.
add
(
{
name
:
"
Timothy
Berners
-
Lee
"
"
street
-
address
"
:
"
Some
Address
"
}
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectServerProfiles
(
collection
[
{
guid
:
localGuid
version
:
1
name
:
"
Timothy
Berners
-
Lee
"
"
given
-
name
"
:
"
Timothy
"
"
additional
-
name
"
:
undefined
"
family
-
name
"
:
"
Berners
-
Lee
"
"
street
-
address
"
:
"
Some
Address
"
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_local_upload_no_name
(
)
{
const
{
collection
profileStorage
server
engine
}
=
await
setup
(
)
;
try
{
const
localGuid
=
await
profileStorage
.
addresses
.
add
(
{
"
street
-
address
"
:
"
Some
Address
"
}
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectServerProfiles
(
collection
[
{
guid
:
localGuid
version
:
1
name
:
undefined
"
given
-
name
"
:
undefined
"
additional
-
name
"
:
undefined
"
family
-
name
"
:
undefined
"
street
-
address
"
:
"
Some
Address
"
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming
(
)
{
const
{
profileStorage
server
engine
}
=
await
setup
(
)
;
try
{
setupServerRecords
(
server
[
{
guid
:
"
86d961c7717a
"
version
:
1
name
:
"
Mr
.
John
William
Doe
"
"
given
-
name
"
:
"
John
"
"
additional
-
name
"
:
"
William
"
"
family
-
name
"
:
"
Doe
"
organization
:
"
Mozilla
"
}
]
)
;
assertNumberRecordUploadedBySync
(
engine
0
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
:
"
86d961c7717a
"
version
:
1
name
:
"
Mr
.
John
William
Doe
"
organization
:
"
Mozilla
"
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_legacy
(
)
{
const
{
profileStorage
server
engine
}
=
await
setup
(
)
;
try
{
setupServerRecords
(
server
[
{
guid
:
"
86d961c7717a
"
version
:
1
"
given
-
name
"
:
"
John
"
"
additional
-
name
"
:
"
William
"
"
family
-
name
"
:
"
Doe
"
organization
:
"
Mozilla
"
}
]
)
;
assertNumberRecordUploadedBySync
(
engine
0
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
:
"
86d961c7717a
"
version
:
1
name
:
"
John
William
Doe
"
organization
:
"
Mozilla
"
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_without_name
(
)
{
const
{
profileStorage
server
engine
}
=
await
setup
(
)
;
try
{
setupServerRecords
(
server
[
{
guid
:
"
86d961c7717a
"
version
:
1
"
street
-
address
"
:
"
Some
Address
"
}
]
)
;
assertNumberRecordUploadedBySync
(
engine
0
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
:
"
86d961c7717a
"
version
:
1
"
street
-
address
"
:
"
Some
Address
"
name
:
undefined
"
given
-
name
"
:
undefined
"
additional
-
name
"
:
undefined
"
family
-
name
"
:
undefined
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_repalce
(
)
{
const
{
profileStorage
server
engine
}
=
await
setup
(
)
;
try
{
const
localGuid
=
await
profileStorage
.
addresses
.
add
(
{
name
:
"
Mr
John
William
Doe
"
"
street
-
address
"
:
"
Some
Address
"
email
:
"
john
.
doe
mozilla
.
org
"
}
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
setupServerRecords
(
server
[
{
guid
:
localGuid
version
:
1
name
:
"
Dr
Timothy
Berners
Lee
"
"
given
-
name
"
:
"
Timothy
"
"
additional
-
name
"
:
"
Berners
"
"
family
-
name
"
:
"
Lee
"
"
street
-
address
"
:
"
32
Vassar
Street
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
assertNumberRecordUploadedBySync
(
engine
0
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
:
localGuid
version
:
1
name
:
"
Dr
Timothy
Berners
Lee
"
"
street
-
address
"
:
"
32
Vassar
Street
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_legacy_replace_name_is_updated
(
)
{
const
{
profileStorage
server
engine
}
=
await
setup
(
)
;
try
{
const
localGuid
=
await
profileStorage
.
addresses
.
add
(
{
name
:
"
Mr
John
William
Doe
"
"
street
-
address
"
:
"
Some
Address
"
email
:
"
john
.
doe
mozilla
.
org
"
}
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
setupServerRecords
(
server
[
{
guid
:
localGuid
version
:
1
"
given
-
name
"
:
"
John
"
"
additional
-
name
"
:
"
William
"
"
family
-
name
"
:
"
Doe
"
"
street
-
address
"
:
"
32
Vassar
Street
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
assertNumberRecordUploadedBySync
(
engine
0
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
:
localGuid
version
:
1
name
:
"
Mr
John
William
Doe
"
"
street
-
address
"
:
"
32
Vassar
Street
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_legacy_replace_name_is_not_updated
(
)
{
const
{
profileStorage
server
engine
}
=
await
setup
(
)
;
try
{
const
localGuid
=
await
profileStorage
.
addresses
.
add
(
{
name
:
"
Mr
John
William
Doe
"
"
street
-
address
"
:
"
Some
Address
"
email
:
"
john
.
doe
mozilla
.
org
"
}
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
setupServerRecords
(
server
[
{
guid
:
localGuid
version
:
1
"
given
-
name
"
:
"
Timothy
"
"
additional
-
name
"
:
"
Berners
"
"
family
-
name
"
:
"
Lee
"
"
street
-
address
"
:
"
32
Vassar
Street
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
assertNumberRecordUploadedBySync
(
engine
0
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
:
localGuid
version
:
1
name
:
"
Timothy
Berners
Lee
"
"
street
-
address
"
:
"
32
Vassar
Street
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_legacy_repalce_local_without_name
(
)
{
const
{
profileStorage
server
engine
}
=
await
setup
(
)
;
try
{
const
localGuid
=
await
profileStorage
.
addresses
.
add
(
{
"
street
-
address
"
:
"
Some
Address
"
email
:
"
john
.
doe
mozilla
.
org
"
}
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
setupServerRecords
(
server
[
{
guid
:
localGuid
version
:
1
"
given
-
name
"
:
"
Timothy
"
"
additional
-
name
"
:
"
Berners
"
"
family
-
name
"
:
"
Lee
"
"
street
-
address
"
:
"
32
Vassar
Street
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
assertNumberRecordUploadedBySync
(
engine
0
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
:
localGuid
version
:
1
name
:
"
Timothy
Berners
Lee
"
"
street
-
address
"
:
"
32
Vassar
Street
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_without_name_replace
(
)
{
const
{
profileStorage
server
engine
}
=
await
setup
(
)
;
try
{
const
localGuid
=
await
profileStorage
.
addresses
.
add
(
{
name
:
"
Mr
.
John
William
Doe
"
"
street
-
address
"
:
"
Some
Address
"
email
:
"
john
.
doe
mozilla
.
org
"
}
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
setupServerRecords
(
server
[
{
guid
:
localGuid
version
:
1
"
street
-
address
"
:
"
32
Vassar
Street
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
assertNumberRecordUploadedBySync
(
engine
0
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
:
localGuid
version
:
1
name
:
undefined
"
street
-
address
"
:
"
32
Vassar
Street
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_merge
(
)
{
const
{
collection
profileStorage
server
engine
}
=
await
setup
(
)
;
const
LOCAL_ENTRY
=
{
name
:
"
Mr
John
William
Doe
"
"
street
-
address
"
:
"
Some
Address
"
email
:
"
john
.
doe
mozilla
.
org
"
}
;
try
{
const
guid
=
await
profileStorage
.
addresses
.
add
(
LOCAL_ENTRY
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
let
localCopy
=
Object
.
assign
(
{
}
LOCAL_ENTRY
)
;
localCopy
[
"
street
-
address
"
]
=
"
I
moved
!
"
;
await
profileStorage
.
addresses
.
update
(
guid
localCopy
)
;
setupServerRecords
(
server
[
{
guid
version
:
1
name
:
"
Dr
Timothy
Berners
Lee
"
"
given
-
name
"
:
"
Timothy
"
"
additional
-
name
"
:
"
Berners
"
"
family
-
name
"
:
"
Lee
"
"
street
-
address
"
:
"
Some
Address
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
version
:
1
name
:
"
Dr
Timothy
Berners
Lee
"
"
street
-
address
"
:
"
I
moved
!
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
await
expectServerProfiles
(
collection
[
{
guid
version
:
1
name
:
"
Dr
Timothy
Berners
Lee
"
"
given
-
name
"
:
"
Timothy
"
"
additional
-
name
"
:
"
Berners
"
"
family
-
name
"
:
"
Lee
"
"
street
-
address
"
:
"
I
moved
!
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_legacy_merge_name_is_not_updated
(
)
{
const
{
collection
profileStorage
server
engine
}
=
await
setup
(
)
;
const
LOCAL_ENTRY
=
{
name
:
"
Mr
John
William
Doe
"
"
street
-
address
"
:
"
Some
Address
"
email
:
"
john
.
doe
mozilla
.
org
"
}
;
try
{
const
guid
=
await
profileStorage
.
addresses
.
add
(
LOCAL_ENTRY
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
let
localCopy
=
Object
.
assign
(
{
}
LOCAL_ENTRY
)
;
localCopy
[
"
street
-
address
"
]
=
"
I
moved
!
"
;
await
profileStorage
.
addresses
.
update
(
guid
localCopy
)
;
setupServerRecords
(
server
[
{
guid
version
:
1
"
given
-
name
"
:
"
John
"
"
additional
-
name
"
:
"
William
"
"
family
-
name
"
:
"
Doe
"
"
street
-
address
"
:
"
Some
Address
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
version
:
1
name
:
"
Mr
John
William
Doe
"
"
street
-
address
"
:
"
I
moved
!
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
await
expectServerProfiles
(
collection
[
{
guid
version
:
1
name
:
"
Mr
John
William
Doe
"
"
given
-
name
"
:
"
John
"
"
additional
-
name
"
:
"
William
"
"
family
-
name
"
:
"
Doe
"
"
street
-
address
"
:
"
I
moved
!
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_legacy_merge_name_is_updated
(
)
{
const
{
collection
profileStorage
server
engine
}
=
await
setup
(
)
;
const
LOCAL_ENTRY
=
{
name
:
"
Mr
John
William
Doe
"
"
street
-
address
"
:
"
Some
Address
"
email
:
"
john
.
doe
mozilla
.
org
"
}
;
try
{
const
guid
=
await
profileStorage
.
addresses
.
add
(
LOCAL_ENTRY
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
let
localCopy
=
Object
.
assign
(
{
}
LOCAL_ENTRY
)
;
localCopy
[
"
street
-
address
"
]
=
"
I
moved
!
"
;
await
profileStorage
.
addresses
.
update
(
guid
localCopy
)
;
setupServerRecords
(
server
[
{
guid
version
:
1
"
given
-
name
"
:
"
Timothy
"
"
additional
-
name
"
:
"
Berners
"
"
family
-
name
"
:
"
Lee
"
"
street
-
address
"
:
"
Some
Address
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
version
:
1
name
:
"
Timothy
Berners
Lee
"
"
street
-
address
"
:
"
I
moved
!
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
await
expectServerProfiles
(
collection
[
{
guid
version
:
1
name
:
"
Timothy
Berners
Lee
"
"
given
-
name
"
:
"
Timothy
"
"
additional
-
name
"
:
"
Berners
"
"
family
-
name
"
:
"
Lee
"
"
street
-
address
"
:
"
I
moved
!
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_legacy_merge_local_without_name
(
)
{
const
{
collection
profileStorage
server
engine
}
=
await
setup
(
)
;
const
LOCAL_ENTRY
=
{
"
street
-
address
"
:
"
Some
Address
"
email
:
"
john
.
doe
mozilla
.
org
"
}
;
try
{
const
guid
=
await
profileStorage
.
addresses
.
add
(
LOCAL_ENTRY
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
let
localCopy
=
Object
.
assign
(
{
}
LOCAL_ENTRY
)
;
localCopy
[
"
street
-
address
"
]
=
"
I
moved
!
"
;
await
profileStorage
.
addresses
.
update
(
guid
localCopy
)
;
setupServerRecords
(
server
[
{
guid
version
:
1
"
given
-
name
"
:
"
Timothy
"
"
additional
-
name
"
:
"
Berners
"
"
family
-
name
"
:
"
Lee
"
"
street
-
address
"
:
"
Some
Address
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
version
:
1
name
:
"
Timothy
Berners
Lee
"
"
street
-
address
"
:
"
I
moved
!
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
await
expectServerProfiles
(
collection
[
{
guid
version
:
1
name
:
"
Timothy
Berners
Lee
"
"
given
-
name
"
:
"
Timothy
"
"
additional
-
name
"
:
"
Berners
"
"
family
-
name
"
:
"
Lee
"
"
street
-
address
"
:
"
I
moved
!
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_without_name_merge
(
)
{
const
{
collection
profileStorage
server
engine
}
=
await
setup
(
)
;
const
LOCAL_ENTRY
=
{
"
street
-
address
"
:
"
Some
Address
"
email
:
"
john
.
doe
mozilla
.
org
"
}
;
try
{
const
guid
=
await
profileStorage
.
addresses
.
add
(
LOCAL_ENTRY
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
let
localCopy
=
Object
.
assign
(
{
}
LOCAL_ENTRY
)
;
localCopy
[
"
street
-
address
"
]
=
"
I
moved
!
"
;
await
profileStorage
.
addresses
.
update
(
guid
localCopy
)
;
setupServerRecords
(
server
[
{
guid
version
:
1
"
street
-
address
"
:
"
Some
Address
"
organization
:
"
Mozilla
"
}
]
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
version
:
1
"
street
-
address
"
:
"
I
moved
!
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
await
expectServerProfiles
(
collection
[
{
guid
version
:
1
"
street
-
address
"
:
"
I
moved
!
"
organization
:
"
Mozilla
"
email
:
undefined
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_dedupe
(
)
{
const
{
collection
profileStorage
server
engine
}
=
await
setup
(
)
;
const
LOCAL_ENTRY
=
{
name
:
"
Mr
John
William
Doe
"
"
street
-
address
"
:
"
Some
Address
"
country
:
"
US
"
}
;
try
{
const
localGuid
=
await
profileStorage
.
addresses
.
add
(
LOCAL_ENTRY
)
;
const
remoteGuid
=
Utils
.
makeGUID
(
)
;
notEqual
(
localGuid
remoteGuid
)
;
setupServerRecords
(
server
[
{
guid
:
remoteGuid
version
:
1
name
:
"
Mr
John
William
Doe
"
"
given
-
name
"
:
"
John
"
"
additional
-
name
"
:
"
William
"
"
family
-
name
"
:
"
Doe
"
"
street
-
address
"
:
"
Some
Address
"
country
:
"
US
"
}
]
)
;
assertNumberRecordUploadedBySync
(
engine
1
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
:
remoteGuid
version
:
1
name
:
"
Mr
John
William
Doe
"
"
street
-
address
"
:
"
Some
Address
"
country
:
"
US
"
}
]
)
;
await
expectServerProfiles
(
collection
[
{
guid
:
remoteGuid
version
:
1
name
:
"
Mr
John
William
Doe
"
"
given
-
name
"
:
"
John
"
"
additional
-
name
"
:
"
William
"
"
family
-
name
"
:
"
Doe
"
"
street
-
address
"
:
"
Some
Address
"
country
:
"
US
"
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_legacy_dedupe
(
)
{
const
{
collection
profileStorage
server
engine
}
=
await
setup
(
)
;
const
LOCAL_ENTRY
=
{
name
:
"
John
William
Doe
"
"
street
-
address
"
:
"
Some
Address
"
country
:
"
US
"
}
;
try
{
const
localGuid
=
await
profileStorage
.
addresses
.
add
(
LOCAL_ENTRY
)
;
const
remoteGuid
=
Utils
.
makeGUID
(
)
;
notEqual
(
localGuid
remoteGuid
)
;
setupServerRecords
(
server
[
{
guid
:
remoteGuid
version
:
1
"
given
-
name
"
:
"
John
"
"
additional
-
name
"
:
"
William
"
"
family
-
name
"
:
"
Doe
"
"
street
-
address
"
:
"
Some
Address
"
country
:
"
US
"
}
]
)
;
assertNumberRecordUploadedBySync
(
engine
1
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
:
remoteGuid
version
:
1
name
:
"
John
William
Doe
"
"
street
-
address
"
:
"
Some
Address
"
country
:
"
US
"
}
]
)
;
await
expectServerProfiles
(
collection
[
{
guid
:
remoteGuid
version
:
1
name
:
"
John
William
Doe
"
"
given
-
name
"
:
"
John
"
"
additional
-
name
"
:
"
William
"
"
family
-
name
"
:
"
Doe
"
"
street
-
address
"
:
"
Some
Address
"
country
:
"
US
"
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
add_task
(
async
function
test_apply_incoming_without_name_dedupe
(
)
{
const
{
collection
profileStorage
server
engine
}
=
await
setup
(
)
;
const
LOCAL_ENTRY
=
{
"
street
-
address
"
:
"
Some
Address
"
country
:
"
US
"
}
;
try
{
const
localGuid
=
await
profileStorage
.
addresses
.
add
(
LOCAL_ENTRY
)
;
const
remoteGuid
=
Utils
.
makeGUID
(
)
;
notEqual
(
localGuid
remoteGuid
)
;
setupServerRecords
(
server
[
{
guid
:
remoteGuid
version
:
1
"
street
-
address
"
:
"
Some
Address
"
country
:
"
US
"
}
]
)
;
assertNumberRecordUploadedBySync
(
engine
1
)
;
await
engine
.
setLastSync
(
0
)
;
await
engine
.
sync
(
)
;
await
expectLocalProfiles
(
profileStorage
[
{
guid
:
remoteGuid
version
:
1
"
street
-
address
"
:
"
Some
Address
"
country
:
"
US
"
}
]
)
;
await
expectServerProfiles
(
collection
[
{
guid
:
remoteGuid
version
:
1
"
street
-
address
"
:
"
Some
Address
"
country
:
"
US
"
}
]
)
;
}
finally
{
await
cleanup
(
server
)
;
}
}
)
;
