"
use
strict
"
;
const
ADDRESS_URL
=
"
http
:
/
/
example
.
org
/
browser
/
browser
/
extensions
/
formautofill
/
test
/
browser
/
autocomplete_basic
.
html
"
;
const
CC_URL
=
"
https
:
/
/
example
.
org
/
browser
/
browser
/
extensions
/
formautofill
/
test
/
browser
/
creditCard
/
autocomplete_creditcard_basic
.
html
"
;
add_task
(
async
function
setup_storage
(
)
{
await
setStorage
(
TEST_ADDRESS_1
TEST_ADDRESS_2
TEST_ADDRESS_3
TEST_CREDIT_CARD_1
TEST_CREDIT_CARD_2
TEST_CREDIT_CARD_3
)
;
}
)
;
add_task
(
async
function
test_active_delay
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
notification_enable_delay
"
1000
]
[
"
extensions
.
formautofill
.
reauth
.
enabled
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
CC_URL
}
async
function
(
browser
)
{
const
focusInput
=
"
#
cc
-
number
"
;
await
SimpleTest
.
promiseFocus
(
browser
)
;
const
start
=
performance
.
now
(
)
;
await
runAndWaitForAutocompletePopupOpen
(
browser
async
(
)
=
>
{
await
focusAndWaitForFieldsIdentified
(
browser
focusInput
)
;
}
)
;
const
firstItem
=
getDisplayedPopupItems
(
browser
)
[
0
]
;
ok
(
firstItem
.
disabled
"
Popup
should
be
disbled
upon
opening
.
"
)
;
is
(
browser
.
autoCompletePopup
.
selectedIndex
-
1
"
No
item
selected
at
first
"
)
;
firstItem
.
click
(
)
;
is
(
browser
.
autoCompletePopup
.
selectedIndex
-
1
"
No
item
selected
after
clicking
on
disabled
item
"
)
;
await
waitForPopupEnabled
(
browser
)
;
const
delta
=
performance
.
now
(
)
-
start
;
info
(
Popup
was
disabled
for
{
delta
}
ms
)
;
Assert
.
greaterOrEqual
(
delta
1000
"
Popup
was
disabled
for
at
least
1000
ms
"
)
;
firstItem
.
click
(
)
;
is
(
browser
.
autoCompletePopup
.
selectedIndex
0
"
First
item
selected
after
clicking
on
enabled
item
"
)
;
await
closePopup
(
browser
)
;
}
)
;
}
)
;
add_task
(
async
function
test_no_delay
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
notification_enable_delay
"
1000
]
[
"
extensions
.
formautofill
.
reauth
.
enabled
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
ADDRESS_URL
}
async
function
(
browser
)
{
const
focusInput
=
"
#
organization
"
;
await
SimpleTest
.
promiseFocus
(
browser
)
;
await
runAndWaitForAutocompletePopupOpen
(
browser
async
(
)
=
>
{
await
focusAndWaitForFieldsIdentified
(
browser
focusInput
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
browser
)
;
}
)
;
const
firstItem
=
getDisplayedPopupItems
(
browser
)
[
0
]
;
ok
(
!
firstItem
.
disabled
"
Popup
should
be
enabled
upon
opening
.
"
)
;
is
(
browser
.
autoCompletePopup
.
selectedIndex
-
1
"
No
item
selected
at
first
"
)
;
firstItem
.
click
(
)
;
is
(
browser
.
autoCompletePopup
.
selectedIndex
0
"
First
item
selected
after
clicking
on
enabled
item
"
)
;
await
closePopup
(
browser
)
;
}
)
;
}
)
;
