"
use
strict
"
;
const
VALID_ADDRESS
=
{
"
given
-
name
"
:
"
John
"
"
street
-
address
"
:
"
32
Vassar
Street
"
"
address
-
level1
"
:
"
California
"
"
address
-
level2
"
:
"
Cambridge
"
country
:
"
US
"
}
;
const
INVALID_ADDRESS
=
{
"
address
-
level1
"
:
"
ZZ
"
organization
:
"
?
?
?
"
email
:
"
john
.
doe
work
mozilla
.
org
"
tel
:
"
2
-
800
-
555
-
1234
"
"
postal
-
code
"
:
"
1234
"
}
;
async
function
expectSavedAddresses
(
expectedCount
)
{
const
addresses
=
await
getAddresses
(
)
;
is
(
addresses
.
length
expectedCount
{
addresses
.
length
}
address
in
the
storage
)
;
return
addresses
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
formautofill
.
addresses
.
capture
.
v2
.
enabled
"
true
]
[
"
extensions
.
formautofill
.
addresses
.
supported
"
"
on
"
]
]
}
)
;
}
)
;
add_task
(
async
function
test_do_not_save_invalid_fields
(
)
{
let
addresses
=
await
expectSavedAddresses
(
0
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
ADDRESS_FORM_URL
}
async
browser
=
>
{
const
onSavePopupShown
=
waitForPopupShown
(
)
;
await
focusUpdateSubmitForm
(
browser
{
focusSelector
:
"
#
given
-
name
"
newValues
:
{
"
#
given
-
name
"
:
VALID_ADDRESS
[
"
given
-
name
"
]
"
#
family
-
name
"
:
VALID_ADDRESS
[
"
family
-
name
"
]
"
#
street
-
address
"
:
VALID_ADDRESS
[
"
street
-
address
"
]
"
#
address
-
level1
"
:
VALID_ADDRESS
[
"
address
-
level1
"
]
"
#
address
-
level2
"
:
VALID_ADDRESS
[
"
address
-
level2
"
]
"
#
organization
"
:
INVALID_ADDRESS
.
organization
"
#
email
"
:
INVALID_ADDRESS
.
email
"
#
tel
"
:
INVALID_ADDRESS
.
tel
"
#
postal
-
code
"
:
INVALID_ADDRESS
[
"
postal
-
code
"
]
}
}
)
;
await
onSavePopupShown
;
await
clickAddressDoorhangerButton
(
MAIN_BUTTON
)
;
}
)
;
addresses
=
await
expectSavedAddresses
(
1
)
;
for
(
const
[
key
value
]
of
Object
.
entries
(
VALID_ADDRESS
)
)
{
Assert
.
equal
(
addresses
[
0
]
[
key
]
?
?
"
"
value
{
key
}
field
is
saved
)
;
}
for
(
const
[
key
value
]
of
Object
.
entries
(
INVALID_ADDRESS
)
)
{
Assert
.
notEqual
(
addresses
[
0
]
[
key
]
?
?
"
"
value
{
key
}
field
is
not
saved
)
;
}
await
removeAllRecords
(
)
;
}
)
;
add_task
(
async
function
test_do_not_update_invalid_fields
(
)
{
await
setStorage
(
VALID_ADDRESS
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
ADDRESS_FORM_URL
}
async
browser
=
>
{
const
onUpdatePopupShown
=
waitForPopupShown
(
)
;
await
focusUpdateSubmitForm
(
browser
{
focusSelector
:
"
#
given
-
name
"
newValues
:
{
"
#
given
-
name
"
:
VALID_ADDRESS
[
"
given
-
name
"
]
"
#
family
-
name
"
:
"
Doe
"
"
#
street
-
address
"
:
VALID_ADDRESS
[
"
street
-
address
"
]
"
#
address
-
level1
"
:
INVALID_ADDRESS
[
"
address
-
level1
"
]
"
#
organization
"
:
INVALID_ADDRESS
.
organization
"
#
email
"
:
INVALID_ADDRESS
.
email
"
#
tel
"
:
INVALID_ADDRESS
.
tel
"
#
postal
-
code
"
:
INVALID_ADDRESS
[
"
postal
-
code
"
]
}
}
)
;
await
onUpdatePopupShown
;
await
clickAddressDoorhangerButton
(
MAIN_BUTTON
)
;
}
)
;
const
addresses
=
await
expectSavedAddresses
(
1
)
;
Assert
.
equal
(
addresses
[
0
]
[
"
family
-
name
"
]
"
Doe
"
family
-
name
field
is
update
)
;
for
(
const
[
key
value
]
of
Object
.
entries
(
VALID_ADDRESS
)
)
{
Assert
.
equal
(
addresses
[
0
]
[
key
]
?
?
"
"
value
{
key
}
field
is
saved
)
;
}
for
(
const
[
key
value
]
of
Object
.
entries
(
INVALID_ADDRESS
)
)
{
Assert
.
notEqual
(
addresses
[
0
]
[
key
]
?
?
"
"
value
{
key
}
field
is
not
saved
)
;
}
await
removeAllRecords
(
)
;
}
)
;
add_task
(
async
function
test_do_not_remove_invalid_fields_of_exising_address
(
)
{
const
STORED_ADDRESS
=
{
.
.
.
VALID_ADDRESS
.
.
.
INVALID_ADDRESS
}
;
delete
STORED_ADDRESS
[
"
address
-
level1
"
]
;
await
setStorage
(
STORED_ADDRESS
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
ADDRESS_FORM_URL
}
async
browser
=
>
{
const
onUpdatePopupShown
=
waitForPopupShown
(
)
;
await
focusUpdateSubmitForm
(
browser
{
focusSelector
:
"
#
given
-
name
"
newValues
:
{
"
#
given
-
name
"
:
VALID_ADDRESS
[
"
given
-
name
"
]
"
#
family
-
name
"
:
"
Doe
"
"
#
street
-
address
"
:
VALID_ADDRESS
[
"
street
-
address
"
]
"
#
address
-
level2
"
:
VALID_ADDRESS
[
"
address
-
level2
"
]
}
}
)
;
await
onUpdatePopupShown
;
await
clickAddressDoorhangerButton
(
MAIN_BUTTON
)
;
}
)
;
const
addresses
=
await
expectSavedAddresses
(
1
)
;
Assert
.
equal
(
addresses
[
0
]
[
"
family
-
name
"
]
"
Doe
"
family
-
name
field
is
update
)
;
for
(
const
[
key
value
]
of
Object
.
entries
(
STORED_ADDRESS
)
)
{
Assert
.
equal
(
addresses
[
0
]
[
key
]
?
?
"
"
value
{
key
}
field
is
saved
)
;
}
await
removeAllRecords
(
)
;
}
)
;
add_task
(
async
function
test_do_not_show_invalid_fields_in_edit_doorhanger
(
)
{
const
STORED_ADDRESS
=
{
.
.
.
INVALID_ADDRESS
.
.
.
VALID_ADDRESS
}
;
await
setStorage
(
STORED_ADDRESS
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
ADDRESS_FORM_URL
}
async
browser
=
>
{
const
onUpdatePopupShown
=
waitForPopupShown
(
)
;
await
focusUpdateSubmitForm
(
browser
{
focusSelector
:
"
#
given
-
name
"
newValues
:
{
"
#
given
-
name
"
:
VALID_ADDRESS
[
"
given
-
name
"
]
"
#
family
-
name
"
:
"
Doe
"
"
#
street
-
address
"
:
VALID_ADDRESS
[
"
street
-
address
"
]
"
#
address
-
level2
"
:
VALID_ADDRESS
[
"
address
-
level2
"
]
}
}
)
;
await
onUpdatePopupShown
;
const
onEditPopupShown
=
waitForPopupShown
(
)
;
await
clickAddressDoorhangerButton
(
EDIT_ADDRESS_BUTTON
)
;
await
onEditPopupShown
;
await
clickAddressDoorhangerButton
(
MAIN_BUTTON
)
;
}
)
;
const
addresses
=
await
expectSavedAddresses
(
1
)
;
Assert
.
equal
(
addresses
[
0
]
[
"
family
-
name
"
]
"
Doe
"
family
-
name
field
is
update
)
;
for
(
const
[
key
value
]
of
Object
.
entries
(
STORED_ADDRESS
)
)
{
Assert
.
equal
(
addresses
[
0
]
[
key
]
?
?
"
"
value
{
key
}
field
is
saved
)
;
}
await
removeAllRecords
(
)
;
}
)
;
