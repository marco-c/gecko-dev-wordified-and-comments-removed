"
use
strict
"
;
const
IFRAME_URL_PATH
=
BASE_URL
+
"
autocomplete_iframe
.
html
"
;
const
PRIVACY_PREF_URL
=
"
about
:
preferences
#
privacy
"
;
add_task
(
async
function
setup_storage
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
ENABLED_AUTOFILL_ADDRESSES_PREF
true
]
[
ENABLED_AUTOFILL_ADDRESSES_CAPTURE_PREF
true
]
]
}
)
;
await
saveAddress
(
TEST_ADDRESS_2
)
;
await
saveAddress
(
TEST_ADDRESS_4
)
;
await
saveAddress
(
TEST_ADDRESS_5
)
;
}
)
;
add_task
(
async
function
test_iframe_autocomplete
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
CREDITCARDS_USED_STATUS_PREF
0
]
]
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
IFRAME_URL_PATH
true
)
;
let
browser
=
tab
.
linkedBrowser
;
let
iframeBC
=
browser
.
browsingContext
.
children
[
1
]
;
await
openPopupForSubframe
(
browser
iframeBC
"
#
street
-
address
"
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
iframeBC
)
;
await
expectWarningText
(
browser
"
Autofills
address
"
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
iframeBC
)
;
await
expectWarningText
(
browser
"
Also
autofills
organization
email
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
)
;
let
promiseShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
1000
)
)
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
true
)
;
await
SpecialPowers
.
spawn
(
iframeBC
[
]
async
function
(
)
{
Assert
.
equal
(
content
.
document
.
getElementById
(
"
street
-
address
"
)
.
value
"
32
Vassar
Street
MIT
Room
32
-
G524
"
)
;
Assert
.
equal
(
content
.
document
.
getElementById
(
"
country
"
)
.
value
"
US
"
)
;
let
org
=
content
.
document
.
getElementById
(
"
organization
"
)
;
Assert
.
equal
(
org
.
value
"
World
Wide
Web
Consortium
"
)
;
org
.
setUserInput
(
"
Example
Inc
.
"
)
;
await
new
Promise
(
resolve
=
>
content
.
setTimeout
(
resolve
1000
)
)
;
content
.
document
.
querySelector
(
"
input
[
type
=
submit
]
"
)
.
click
(
)
;
}
)
;
await
loadPromise
;
await
promiseShown
;
let
onChanged
=
TestUtils
.
topicObserved
(
"
formautofill
-
storage
-
changed
"
)
;
await
clickDoorhangerButton
(
MAIN_BUTTON
)
;
await
onChanged
;
let
addresses
=
await
getAddresses
(
)
;
is
(
addresses
.
length
3
"
Still
1
address
in
storage
"
)
;
is
(
addresses
[
1
]
.
organization
"
Example
Inc
.
"
"
Verify
the
organization
field
"
)
;
await
openPopupForSubframe
(
browser
iframeBC
"
#
street
-
address
"
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
iframeBC
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
1000
)
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
iframeBC
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
iframeBC
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
1000
)
)
;
await
SpecialPowers
.
spawn
(
iframeBC
[
]
async
function
(
)
{
Assert
.
equal
(
content
.
document
.
getElementById
(
"
street
-
address
"
)
.
value
"
"
)
;
Assert
.
equal
(
content
.
document
.
getElementById
(
"
country
"
)
.
value
"
"
)
;
Assert
.
equal
(
content
.
document
.
getElementById
(
"
organization
"
)
.
value
"
"
)
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_iframe_autocomplete_preferences
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
CREDITCARDS_USED_STATUS_PREF
0
]
]
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
IFRAME_URL_PATH
true
)
;
let
browser
=
tab
.
linkedBrowser
;
let
iframeBC
=
browser
.
browsingContext
.
children
[
1
]
;
await
openPopupForSubframe
(
browser
iframeBC
"
#
organization
"
)
;
await
expectWarningText
(
browser
"
Also
autofills
address
email
"
)
;
const
prefTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
PRIVACY_PREF_URL
)
;
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
;
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
)
;
info
(
expecting
tab
:
about
:
preferences
#
privacy
opened
)
;
const
prefTab
=
await
prefTabPromise
;
info
(
expecting
tab
:
about
:
preferences
#
privacy
removed
)
;
BrowserTestUtils
.
removeTab
(
prefTab
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
