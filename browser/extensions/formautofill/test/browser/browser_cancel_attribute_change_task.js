"
use
strict
"
;
add_setup
(
async
function
setup_storage
(
)
{
await
setStorage
(
TEST_ADDRESS_1
)
;
}
)
;
add_task
(
async
function
test_autocomplete_popup_is_displayed_under_focused_element
(
)
{
const
url
=
"
https
:
/
/
example
.
org
/
browser
/
browser
/
extensions
/
formautofill
/
test
/
browser
/
autocomplete_basic
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
}
async
function
(
browser
)
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
const
tel
=
content
.
document
.
getElementById
(
"
tel
"
)
;
tel
.
onchange
=
(
)
=
>
tel
.
setAttribute
(
"
autocomplete
"
"
new
-
password
"
)
;
const
addressLevel1
=
content
.
document
.
getElementById
(
"
address
-
level1
"
)
;
addressLevel1
.
focus
(
)
;
}
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
browser
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
browser
.
autoCompletePopup
.
popupOpen
;
}
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
browser
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
const
addressLevel1
=
content
.
document
.
getElementById
(
"
address
-
level1
"
)
;
addressLevel1
.
focus
(
)
;
}
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
browser
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
browser
.
autoCompletePopup
.
popupOpen
;
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
const
formFillController
=
Cc
[
"
mozilla
.
org
/
satchel
/
form
-
fill
-
controller
;
1
"
]
.
getService
(
Ci
.
nsIFormFillController
)
;
Assert
.
equal
(
formFillController
.
focusedInput
?
.
id
"
address
-
level1
"
"
formFillController
has
correct
focusedInput
"
)
;
}
)
;
}
)
;
}
)
;
