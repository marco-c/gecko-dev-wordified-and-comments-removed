"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FormAutofillPreferences
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
const
BUNDLE_URI
=
"
chrome
:
/
/
formautofill
/
locale
/
formautofill
.
properties
"
;
const
MANAGE_ADDRESSES_URL
=
"
chrome
:
/
/
formautofill
/
content
/
manageAddresses
.
xhtml
"
;
const
MANAGE_CREDITCARDS_URL
=
"
chrome
:
/
/
formautofill
/
content
/
manageCreditCards
.
xhtml
"
;
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
const
{
ENABLED_AUTOFILL_ADDRESSES_PREF
ENABLED_AUTOFILL_CREDITCARDS_PREF
}
=
FormAutofillUtils
;
this
.
log
=
null
;
FormAutofillUtils
.
defineLazyLogGetter
(
this
this
.
EXPORTED_SYMBOLS
[
0
]
)
;
function
FormAutofillPreferences
(
)
{
this
.
bundle
=
Services
.
strings
.
createBundle
(
BUNDLE_URI
)
;
}
FormAutofillPreferences
.
prototype
=
{
init
(
document
)
{
this
.
createPreferenceGroup
(
document
)
;
this
.
attachEventListeners
(
)
;
return
this
.
refs
.
formAutofillGroup
;
}
uninit
(
)
{
this
.
detachEventListeners
(
)
;
this
.
refs
.
formAutofillGroup
.
remove
(
)
;
}
createPreferenceGroup
(
document
)
{
let
learnMoreURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
autofill
-
card
-
address
"
;
let
formAutofillGroup
=
document
.
createElementNS
(
XUL_NS
"
vbox
"
)
;
let
addressAutofill
=
document
.
createElementNS
(
XUL_NS
"
hbox
"
)
;
let
addressAutofillCheckboxGroup
=
document
.
createElementNS
(
XUL_NS
"
description
"
)
;
let
addressAutofillCheckbox
=
document
.
createElementNS
(
XUL_NS
"
checkbox
"
)
;
let
addressAutofillLearnMore
=
document
.
createElementNS
(
XUL_NS
"
label
"
)
;
let
savedAddressesBtn
=
document
.
createElementNS
(
XUL_NS
"
button
"
)
;
savedAddressesBtn
.
className
=
"
accessory
-
button
"
;
addressAutofillLearnMore
.
className
=
"
learnMore
text
-
link
"
;
formAutofillGroup
.
id
=
"
formAutofillGroup
"
;
addressAutofill
.
id
=
"
addressAutofill
"
;
addressAutofillLearnMore
.
id
=
"
addressAutofillLearnMore
"
;
addressAutofillLearnMore
.
setAttribute
(
"
value
"
this
.
bundle
.
GetStringFromName
(
"
learnMore
"
)
)
;
addressAutofillCheckbox
.
setAttribute
(
"
label
"
this
.
bundle
.
GetStringFromName
(
"
enableAddressAutofill
"
)
)
;
savedAddressesBtn
.
setAttribute
(
"
label
"
this
.
bundle
.
GetStringFromName
(
"
savedAddresses
"
)
)
;
addressAutofillLearnMore
.
setAttribute
(
"
href
"
learnMoreURL
)
;
if
(
FormAutofillUtils
.
isAutofillAddressesEnabled
)
{
addressAutofillCheckbox
.
setAttribute
(
"
checked
"
true
)
;
}
addressAutofillCheckboxGroup
.
flex
=
1
;
formAutofillGroup
.
appendChild
(
addressAutofill
)
;
addressAutofill
.
appendChild
(
addressAutofillCheckboxGroup
)
;
addressAutofillCheckboxGroup
.
appendChild
(
addressAutofillCheckbox
)
;
addressAutofillCheckboxGroup
.
appendChild
(
addressAutofillLearnMore
)
;
addressAutofill
.
appendChild
(
savedAddressesBtn
)
;
this
.
refs
=
{
formAutofillGroup
addressAutofillCheckbox
savedAddressesBtn
}
;
if
(
FormAutofillUtils
.
isAutofillCreditCardsAvailable
)
{
let
creditCardAutofill
=
document
.
createElementNS
(
XUL_NS
"
hbox
"
)
;
let
creditCardAutofillCheckboxGroup
=
document
.
createElementNS
(
XUL_NS
"
description
"
)
;
let
creditCardAutofillCheckbox
=
document
.
createElementNS
(
XUL_NS
"
checkbox
"
)
;
let
creditCardAutofillLearnMore
=
document
.
createElementNS
(
XUL_NS
"
label
"
)
;
let
savedCreditCardsBtn
=
document
.
createElementNS
(
XUL_NS
"
button
"
)
;
savedCreditCardsBtn
.
className
=
"
accessory
-
button
"
;
creditCardAutofillLearnMore
.
className
=
"
learnMore
text
-
link
"
;
creditCardAutofill
.
id
=
"
creditCardAutofill
"
;
creditCardAutofillLearnMore
.
id
=
"
creditCardAutofillLearnMore
"
;
creditCardAutofillLearnMore
.
setAttribute
(
"
value
"
this
.
bundle
.
GetStringFromName
(
"
learnMore
"
)
)
;
creditCardAutofillCheckbox
.
setAttribute
(
"
label
"
this
.
bundle
.
GetStringFromName
(
"
enableCreditCardAutofill
"
)
)
;
savedCreditCardsBtn
.
setAttribute
(
"
label
"
this
.
bundle
.
GetStringFromName
(
"
savedCreditCards
"
)
)
;
creditCardAutofillLearnMore
.
setAttribute
(
"
href
"
learnMoreURL
)
;
if
(
FormAutofillUtils
.
isAutofillCreditCardsEnabled
)
{
creditCardAutofillCheckbox
.
setAttribute
(
"
checked
"
true
)
;
}
creditCardAutofillCheckboxGroup
.
flex
=
1
;
formAutofillGroup
.
appendChild
(
creditCardAutofill
)
;
creditCardAutofill
.
appendChild
(
creditCardAutofillCheckboxGroup
)
;
creditCardAutofillCheckboxGroup
.
appendChild
(
creditCardAutofillCheckbox
)
;
creditCardAutofillCheckboxGroup
.
appendChild
(
creditCardAutofillLearnMore
)
;
creditCardAutofill
.
appendChild
(
savedCreditCardsBtn
)
;
this
.
refs
.
creditCardAutofillCheckbox
=
creditCardAutofillCheckbox
;
this
.
refs
.
savedCreditCardsBtn
=
savedCreditCardsBtn
;
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
command
"
:
{
let
target
=
event
.
target
;
if
(
target
=
=
this
.
refs
.
addressAutofillCheckbox
)
{
Services
.
prefs
.
setBoolPref
(
ENABLED_AUTOFILL_ADDRESSES_PREF
target
.
checked
)
;
}
else
if
(
target
=
=
this
.
refs
.
creditCardAutofillCheckbox
)
{
Services
.
prefs
.
setBoolPref
(
ENABLED_AUTOFILL_CREDITCARDS_PREF
target
.
checked
)
;
}
else
if
(
target
=
=
this
.
refs
.
savedAddressesBtn
)
{
target
.
ownerGlobal
.
gSubDialog
.
open
(
MANAGE_ADDRESSES_URL
)
;
}
else
if
(
target
=
=
this
.
refs
.
savedCreditCardsBtn
)
{
target
.
ownerGlobal
.
gSubDialog
.
open
(
MANAGE_CREDITCARDS_URL
)
;
}
break
;
}
}
}
attachEventListeners
(
)
{
this
.
refs
.
formAutofillGroup
.
addEventListener
(
"
command
"
this
)
;
}
detachEventListeners
(
)
{
this
.
refs
.
formAutofillGroup
.
removeEventListener
(
"
command
"
this
)
;
}
}
;
