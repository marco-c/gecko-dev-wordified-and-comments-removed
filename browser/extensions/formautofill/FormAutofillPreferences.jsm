"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
FormAutofillPreferences
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
const
PREF_AUTOFILL_ENABLED
=
"
browser
.
formautofill
.
enabled
"
;
const
BUNDLE_URI
=
"
chrome
:
/
/
formautofill
/
locale
/
formautofill
.
properties
"
;
const
MANAGE_PROFILES_URL
=
"
chrome
:
/
/
formautofill
/
content
/
manageProfiles
.
xhtml
"
;
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
formautofill
/
FormAutofillUtils
.
jsm
"
)
;
this
.
log
=
null
;
FormAutofillUtils
.
defineLazyLogGetter
(
this
this
.
EXPORTED_SYMBOLS
[
0
]
)
;
function
FormAutofillPreferences
(
{
useOldOrganization
}
)
{
this
.
useOldOrganization
=
useOldOrganization
;
this
.
bundle
=
Services
.
strings
.
createBundle
(
BUNDLE_URI
)
;
}
FormAutofillPreferences
.
prototype
=
{
get
isAutofillEnabled
(
)
{
return
Services
.
prefs
.
getBoolPref
(
PREF_AUTOFILL_ENABLED
)
;
}
init
(
document
)
{
this
.
createPreferenceGroup
(
document
)
;
this
.
attachEventListeners
(
)
;
return
this
.
refs
.
formAutofillGroup
;
}
uninit
(
)
{
this
.
detachEventListeners
(
)
;
this
.
refs
.
formAutofillGroup
.
remove
(
)
;
}
createPreferenceGroup
(
document
)
{
let
formAutofillGroup
;
let
profileAutofill
=
document
.
createElementNS
(
XUL_NS
"
hbox
"
)
;
let
profileAutofillCheckbox
=
document
.
createElementNS
(
XUL_NS
"
checkbox
"
)
;
let
spacer
=
document
.
createElementNS
(
XUL_NS
"
spacer
"
)
;
let
savedProfilesBtn
=
document
.
createElementNS
(
XUL_NS
"
button
"
)
;
if
(
this
.
useOldOrganization
)
{
let
caption
=
document
.
createElementNS
(
XUL_NS
"
caption
"
)
;
let
captionLabel
=
document
.
createElementNS
(
XUL_NS
"
label
"
)
;
formAutofillGroup
=
document
.
createElementNS
(
XUL_NS
"
groupbox
"
)
;
formAutofillGroup
.
hidden
=
document
.
location
.
href
!
=
"
about
:
preferences
#
privacy
"
;
formAutofillGroup
.
setAttribute
(
"
data
-
category
"
"
panePrivacy
"
)
;
formAutofillGroup
.
appendChild
(
caption
)
;
caption
.
appendChild
(
captionLabel
)
;
captionLabel
.
textContent
=
this
.
bundle
.
GetStringFromName
(
"
preferenceGroupTitle
"
)
;
}
else
{
formAutofillGroup
=
document
.
createElementNS
(
XUL_NS
"
vbox
"
)
;
}
this
.
refs
=
{
formAutofillGroup
profileAutofillCheckbox
savedProfilesBtn
}
;
formAutofillGroup
.
id
=
"
formAutofillGroup
"
;
profileAutofill
.
id
=
"
profileAutofill
"
;
savedProfilesBtn
.
setAttribute
(
"
label
"
this
.
bundle
.
GetStringFromName
(
"
savedProfiles
"
)
)
;
profileAutofillCheckbox
.
setAttribute
(
"
label
"
this
.
bundle
.
GetStringFromName
(
"
enableProfileAutofill
"
)
)
;
if
(
this
.
isAutofillEnabled
)
{
profileAutofillCheckbox
.
setAttribute
(
"
checked
"
true
)
;
}
spacer
.
flex
=
1
;
formAutofillGroup
.
appendChild
(
profileAutofill
)
;
profileAutofill
.
appendChild
(
profileAutofillCheckbox
)
;
profileAutofill
.
appendChild
(
spacer
)
;
profileAutofill
.
appendChild
(
savedProfilesBtn
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
command
"
:
{
let
target
=
event
.
target
;
if
(
target
=
=
this
.
refs
.
profileAutofillCheckbox
)
{
Services
.
prefs
.
setBoolPref
(
PREF_AUTOFILL_ENABLED
target
.
checked
)
;
}
else
if
(
target
=
=
this
.
refs
.
savedProfilesBtn
)
{
target
.
ownerGlobal
.
gSubDialog
.
open
(
MANAGE_PROFILES_URL
)
;
}
break
;
}
}
}
attachEventListeners
(
)
{
this
.
refs
.
formAutofillGroup
.
addEventListener
(
"
command
"
this
)
;
}
detachEventListeners
(
)
{
this
.
refs
.
formAutofillGroup
.
removeEventListener
(
"
command
"
this
)
;
}
}
;
