"
use
strict
"
;
this
.
testUtils
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
const
{
EventManager
}
=
ExtensionCommon
;
let
messageListener
;
return
{
testUtils
:
{
onMessage
:
new
EventManager
(
{
context
name
:
"
testUtils
.
onMessage
"
register
:
fire
=
>
{
if
(
!
messageListener
)
{
const
obs
=
{
receiveMessage
(
{
data
}
)
{
fire
.
async
(
data
)
.
then
(
retval
=
>
{
Services
.
ppmm
.
broadcastAsyncMessage
(
WebCompat
:
{
data
.
name
}
:
Done
retval
)
;
}
)
.
catch
(
(
)
=
>
{
}
)
;
}
}
;
Services
.
cpmm
.
addMessageListener
(
"
WebCompat
"
obs
)
;
messageListener
=
(
)
=
>
{
Services
.
cpmm
.
removeMessageListener
(
"
WebCompat
"
obs
)
;
}
;
}
return
messageListener
;
}
}
)
.
api
(
)
async
interventionsActive
(
)
{
Services
.
ppmm
.
sharedData
.
set
(
"
WebCompatTests
:
InterventionsStatus
"
"
active
"
)
;
}
async
interventionsInactive
(
)
{
Services
.
ppmm
.
sharedData
.
set
(
"
WebCompatTests
:
InterventionsStatus
"
"
inactive
"
)
;
}
async
shimsActive
(
)
{
Services
.
ppmm
.
sharedData
.
set
(
"
WebCompatTests
:
ShimsStatus
"
"
active
"
)
;
}
async
shimsInactive
(
)
{
Services
.
ppmm
.
sharedData
.
set
(
"
WebCompatTests
:
ShimsStatus
"
"
inactive
"
)
;
}
}
}
;
}
}
;
