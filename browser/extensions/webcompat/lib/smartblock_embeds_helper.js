"
use
strict
"
;
const
SMARTBLOCK_EMBED_OBSERVER_TIMEOUT_MS
=
10000
;
const
embedHelperLib
=
(
(
)
=
>
{
let
prevRanShims
=
new
Set
(
)
;
let
originalEmbedContainers
=
[
]
;
let
embedPlaceholders
=
[
]
;
let
observerTimeout
;
let
newEmbedObserver
;
function
sendMessageToAddon
(
message
shimId
)
{
return
browser
.
runtime
.
sendMessage
(
{
message
shimId
}
)
;
}
function
addonMessageHandler
(
message
SHIM_INFO
)
{
const
{
topic
shimId
:
sendingShimId
}
=
message
;
const
{
shimId
:
handlingShimId
scriptURL
}
=
SHIM_INFO
;
if
(
sendingShimId
!
=
handlingShimId
)
{
return
;
}
if
(
topic
=
=
=
"
smartblock
:
unblock
-
embed
"
)
{
if
(
newEmbedObserver
)
{
newEmbedObserver
.
disconnect
(
)
;
newEmbedObserver
=
null
;
}
if
(
observerTimeout
)
{
clearTimeout
(
observerTimeout
)
;
observerTimeout
=
null
;
}
embedPlaceholders
.
forEach
(
(
p
idx
)
=
>
{
p
.
replaceWith
(
originalEmbedContainers
[
idx
]
)
;
}
)
;
let
scriptElement
=
document
.
createElement
(
"
script
"
)
;
scriptElement
.
wrappedJSObject
.
src
=
scriptURL
;
document
.
body
.
appendChild
(
scriptElement
)
;
}
}
async
function
createShimPlaceholders
(
embedContainers
SHIM_INFO
)
{
const
{
shimId
embedSelector
embedLogoURL
isTestShim
}
=
SHIM_INFO
;
const
[
titleString
descriptionString
buttonString
]
=
await
sendMessageToAddon
(
"
smartblockGetFluentString
"
shimId
)
;
if
(
!
embedContainers
.
length
)
{
embedContainers
=
document
.
querySelectorAll
(
embedSelector
)
;
}
embedContainers
.
forEach
(
originalContainer
=
>
{
const
SMARTBLOCK_PLACEHOLDER_HTML_STRING
=
<
style
>
#
smartblock
-
placeholder
-
wrapper
{
min
-
height
:
225px
;
width
:
400px
;
padding
:
32px
24px
;
display
:
block
;
align
-
content
:
center
;
text
-
align
:
center
;
background
-
color
:
light
-
dark
(
rgb
(
255
255
255
)
rgb
(
28
27
34
)
)
;
color
:
light
-
dark
(
rgb
(
43
42
51
)
rgb
(
251
251
254
)
)
;
border
-
radius
:
8px
;
border
:
2px
dashed
#
0250bb
;
font
-
size
:
14px
;
line
-
height
:
1
.
2
;
font
-
family
:
system
-
ui
;
}
#
smartblock
-
placeholder
-
button
{
min
-
height
:
32px
;
padding
:
8px
14px
;
border
-
radius
:
4px
;
font
-
weight
:
600
;
border
:
0
;
/
*
Colours
match
light
/
dark
theme
from
https
:
/
/
searchfox
.
org
/
mozilla
-
central
/
source
/
browser
/
themes
/
addons
/
light
/
manifest
.
json
https
:
/
/
searchfox
.
org
/
mozilla
-
central
/
source
/
browser
/
themes
/
addons
/
dark
/
manifest
.
json
*
/
background
-
color
:
light
-
dark
(
rgb
(
0
97
224
)
rgb
(
0
221
255
)
)
;
color
:
light
-
dark
(
rgb
(
251
251
254
)
rgb
(
43
42
51
)
)
;
}
#
smartblock
-
placeholder
-
button
:
hover
{
/
*
Colours
match
light
/
dark
theme
from
https
:
/
/
searchfox
.
org
/
mozilla
-
central
/
source
/
browser
/
themes
/
addons
/
light
/
manifest
.
json
https
:
/
/
searchfox
.
org
/
mozilla
-
central
/
source
/
browser
/
themes
/
addons
/
dark
/
manifest
.
json
*
/
background
-
color
:
light
-
dark
(
rgb
(
2
80
187
)
rgb
(
128
235
255
)
)
;
}
#
smartblock
-
placeholder
-
button
:
hover
:
active
{
/
*
Colours
match
light
/
dark
theme
from
https
:
/
/
searchfox
.
org
/
mozilla
-
central
/
source
/
browser
/
themes
/
addons
/
light
/
manifest
.
json
https
:
/
/
searchfox
.
org
/
mozilla
-
central
/
source
/
browser
/
themes
/
addons
/
dark
/
manifest
.
json
*
/
background
-
color
:
light
-
dark
(
rgb
(
5
62
148
)
rgb
(
170
242
255
)
)
;
}
#
smartblock
-
placeholder
-
title
{
margin
-
block
:
14px
;
font
-
size
:
16px
;
font
-
weight
:
bold
;
}
#
smartblock
-
placeholder
-
desc
{
margin
-
block
:
14px
;
}
<
/
style
>
<
div
id
=
"
smartblock
-
placeholder
-
wrapper
"
>
<
img
id
=
"
smartblock
-
placeholder
-
image
"
width
=
"
24
"
height
=
"
24
"
/
>
<
p
id
=
"
smartblock
-
placeholder
-
title
"
>
<
/
p
>
<
p
id
=
"
smartblock
-
placeholder
-
desc
"
>
<
/
p
>
<
button
id
=
"
smartblock
-
placeholder
-
button
"
>
<
/
button
>
<
/
div
>
;
const
placeholderDiv
=
document
.
createElement
(
"
div
"
)
;
if
(
isTestShim
)
{
placeholderDiv
.
classList
.
add
(
"
shimmed
-
embedded
-
content
"
)
;
}
const
shadowRoot
=
placeholderDiv
.
attachShadow
(
{
mode
:
"
closed
"
}
)
;
shadowRoot
.
innerHTML
=
SMARTBLOCK_PLACEHOLDER_HTML_STRING
;
shadowRoot
.
getElementById
(
"
smartblock
-
placeholder
-
image
"
)
.
src
=
embedLogoURL
;
shadowRoot
.
getElementById
(
"
smartblock
-
placeholder
-
title
"
)
.
textContent
=
titleString
;
shadowRoot
.
getElementById
(
"
smartblock
-
placeholder
-
desc
"
)
.
textContent
=
descriptionString
;
shadowRoot
.
getElementById
(
"
smartblock
-
placeholder
-
button
"
)
.
textContent
=
buttonString
;
shadowRoot
.
getElementById
(
"
smartblock
-
placeholder
-
button
"
)
.
addEventListener
(
"
click
"
(
{
isTrusted
}
)
=
>
{
if
(
!
isTrusted
)
{
return
;
}
sendMessageToAddon
(
"
embedClicked
"
shimId
)
;
}
)
;
embedPlaceholders
.
push
(
placeholderDiv
)
;
originalEmbedContainers
.
push
(
originalContainer
)
;
originalContainer
.
replaceWith
(
placeholderDiv
)
;
sendMessageToAddon
(
"
smartblockEmbedReplaced
"
shimId
)
;
}
)
;
if
(
isTestShim
)
{
const
finishedEvent
=
new
CustomEvent
(
"
smartblockEmbedScriptFinished
"
{
bubbles
:
true
composed
:
true
}
)
;
window
.
dispatchEvent
(
finishedEvent
)
;
}
}
function
createEmbedMutationObserver
(
SHIM_INFO
)
{
const
{
embedSelector
}
=
SHIM_INFO
;
newEmbedObserver
=
new
MutationObserver
(
mutations
=
>
{
for
(
let
{
addedNodes
target
type
}
of
mutations
)
{
const
nodes
=
type
=
=
=
"
attributes
"
?
[
target
]
:
addedNodes
;
for
(
const
node
of
nodes
)
{
if
(
node
.
matches
(
embedSelector
)
)
{
createShimPlaceholders
(
[
node
]
SHIM_INFO
)
;
}
else
{
let
maybeEmbedNodeList
=
node
.
querySelectorAll
?
.
(
embedSelector
)
;
if
(
maybeEmbedNodeList
)
{
createShimPlaceholders
(
maybeEmbedNodeList
SHIM_INFO
)
;
}
}
}
}
}
)
;
newEmbedObserver
.
observe
(
document
.
documentElement
{
childList
:
true
subtree
:
true
attributes
:
true
attributeFilter
:
[
"
id
"
"
class
"
]
}
)
;
observerTimeout
=
setTimeout
(
(
)
=
>
{
if
(
newEmbedObserver
)
{
newEmbedObserver
.
disconnect
(
)
;
}
}
SMARTBLOCK_EMBED_OBSERVER_TIMEOUT_MS
)
;
}
function
initEmbedShim
(
SHIM_INFO
)
{
let
{
shimId
}
=
SHIM_INFO
;
if
(
prevRanShims
.
has
(
shimId
)
)
{
return
;
}
prevRanShims
.
add
(
shimId
)
;
browser
.
runtime
.
onMessage
.
addListener
(
request
=
>
{
addonMessageHandler
(
request
SHIM_INFO
)
;
}
)
;
createEmbedMutationObserver
(
SHIM_INFO
)
;
createShimPlaceholders
(
[
]
SHIM_INFO
)
;
}
return
{
initEmbedShim
}
;
}
)
(
)
;
