"
use
strict
"
;
const
AUTOPLAY_FLAG
=
"
shimPlayAfterStorageAccess
"
;
const
SELECTOR_PREVIEW_PLAY
=
'
div
[
data
-
testid
=
"
preview
-
play
-
pause
"
]
>
button
'
;
const
SELECTOR_FULL_PLAY
=
'
button
[
data
-
testid
=
"
play
-
pause
-
button
"
]
'
;
function
waitForDOMContentLoaded
(
)
{
return
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
"
DOMContentLoaded
"
resolve
{
once
:
true
}
)
;
}
)
;
}
function
previewPlayButtonListener
(
event
)
{
const
{
target
isTrusted
}
=
event
;
if
(
!
isTrusted
)
{
return
;
}
const
button
=
target
.
closest
(
"
button
"
)
;
if
(
!
button
)
{
return
;
}
if
(
!
button
.
matches
(
SELECTOR_PREVIEW_PLAY
)
)
{
return
;
}
button
.
style
.
opacity
=
0
.
5
;
event
.
stopPropagation
(
)
;
event
.
preventDefault
(
)
;
console
.
debug
(
"
Requesting
storage
access
.
"
location
.
origin
)
;
document
.
requestStorageAccess
(
)
.
then
(
(
)
=
>
{
sessionStorage
.
setItem
(
AUTOPLAY_FLAG
"
true
"
)
;
console
.
debug
(
"
Reloading
after
storage
access
grant
.
"
)
;
location
.
reload
(
)
;
}
)
.
catch
(
(
)
=
>
{
button
.
click
(
)
;
}
)
.
finally
(
(
)
=
>
{
button
.
style
.
opacity
=
1
.
0
;
}
)
;
}
async
function
startFullPlayback
(
)
{
await
document
.
requestStorageAccess
(
)
;
await
waitForDOMContentLoaded
(
)
;
let
numTries
=
0
;
let
intervalId
=
setInterval
(
(
)
=
>
{
try
{
document
.
querySelector
(
SELECTOR_FULL_PLAY
)
.
click
(
)
;
clearInterval
(
intervalId
)
;
console
.
debug
(
"
Clicked
play
after
storage
access
grant
.
"
)
;
}
catch
(
e
)
{
}
numTries
+
+
;
if
(
numTries
>
=
50
)
{
console
.
debug
(
"
Can
not
start
playback
.
Giving
up
.
"
)
;
clearInterval
(
intervalId
)
;
}
}
200
)
;
}
(
async
(
)
=
>
{
if
(
window
.
top
=
=
window
)
{
return
;
}
console
.
warn
(
When
using
the
Spotify
embedded
player
Firefox
calls
the
Storage
Access
API
on
behalf
of
the
site
.
See
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1792395
for
details
.
)
;
if
(
sessionStorage
.
getItem
(
AUTOPLAY_FLAG
)
=
=
"
true
"
)
{
sessionStorage
.
removeItem
(
AUTOPLAY_FLAG
)
;
await
startFullPlayback
(
)
;
return
;
}
document
.
documentElement
.
addEventListener
(
"
click
"
previewPlayButtonListener
{
capture
:
true
}
)
;
}
)
(
)
;
