ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
UserAgentOverrides
"
"
resource
:
/
/
gre
/
modules
/
UserAgentOverrides
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
eTLDService
"
"
mozilla
.
org
/
network
/
effective
-
tld
-
service
;
1
"
"
nsIEffectiveTLDService
"
)
;
class
UAOverrider
{
constructor
(
overrides
)
{
this
.
_overrides
=
{
}
;
this
.
initOverrides
(
overrides
)
;
}
initOverrides
(
overrides
)
{
for
(
let
override
of
overrides
)
{
if
(
!
this
.
_overrides
[
override
.
baseDomain
]
)
{
this
.
_overrides
[
override
.
baseDomain
]
=
[
]
;
}
if
(
!
override
.
uriMatcher
)
{
override
.
uriMatcher
=
(
)
=
>
true
;
}
this
.
_overrides
[
override
.
baseDomain
]
.
push
(
override
)
;
}
}
init
(
)
{
UserAgentOverrides
.
addComplexOverride
(
this
.
overrideCallback
.
bind
(
this
)
)
;
}
overrideCallback
(
channel
defaultUA
)
{
let
uaOverride
=
this
.
lookupUAOverride
(
channel
.
URI
defaultUA
)
;
if
(
uaOverride
)
{
console
.
log
(
"
The
user
agent
has
been
overridden
for
compatibility
reasons
.
"
)
;
return
uaOverride
;
}
return
false
;
}
getBaseDomainFromURI
(
uri
)
{
try
{
return
eTLDService
.
getBaseDomain
(
uri
)
;
}
catch
(
_
)
{
return
false
;
}
}
lookupUAOverride
(
uri
defaultUA
)
{
let
baseDomain
=
this
.
getBaseDomainFromURI
(
uri
)
;
if
(
baseDomain
&
&
this
.
_overrides
[
baseDomain
]
)
{
for
(
let
uaOverride
of
this
.
_overrides
[
baseDomain
]
)
{
if
(
uaOverride
.
uriMatcher
(
uri
.
specIgnoringRef
)
)
{
return
uaOverride
.
uaTransformer
(
defaultUA
)
;
}
}
}
return
false
;
}
}
var
EXPORTED_SYMBOLS
=
[
"
UAOverrider
"
]
;
