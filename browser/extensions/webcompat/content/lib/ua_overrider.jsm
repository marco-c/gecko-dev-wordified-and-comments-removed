const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
)
;
const
DefaultUA
=
Cc
[
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
http
"
]
.
getService
(
Ci
.
nsIHttpProtocolHandler
)
.
userAgent
;
const
NS_HTTP_ON_USERAGENT_REQUEST_TOPIC
=
"
http
-
on
-
useragent
-
request
"
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
eTLDService
"
"
mozilla
.
org
/
network
/
effective
-
tld
-
service
;
1
"
"
nsIEffectiveTLDService
"
)
;
class
UAOverrider
{
constructor
(
overrides
)
{
this
.
_overrides
=
{
}
;
this
.
initOverrides
(
overrides
)
;
}
initOverrides
(
overrides
)
{
for
(
let
override
of
overrides
)
{
if
(
!
this
.
_overrides
[
override
.
baseDomain
]
)
{
this
.
_overrides
[
override
.
baseDomain
]
=
[
]
;
}
if
(
!
override
.
uriMatcher
)
{
override
.
uriMatcher
=
(
)
=
>
true
;
}
this
.
_overrides
[
override
.
baseDomain
]
.
push
(
override
)
;
}
}
init
(
)
{
Services
.
obs
.
addObserver
(
this
NS_HTTP_ON_USERAGENT_REQUEST_TOPIC
false
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
NS_HTTP_ON_USERAGENT_REQUEST_TOPIC
)
;
}
observe
(
subject
topic
)
{
if
(
topic
!
=
=
NS_HTTP_ON_USERAGENT_REQUEST_TOPIC
)
{
return
;
}
let
channel
=
subject
.
QueryInterface
(
Components
.
interfaces
.
nsIHttpChannel
)
;
let
uaOverride
=
this
.
lookupUAOverride
(
channel
.
URI
)
;
if
(
uaOverride
)
{
console
.
log
(
"
The
user
agent
has
been
overridden
for
compatibility
reasons
.
"
)
;
channel
.
setRequestHeader
(
"
User
-
Agent
"
uaOverride
false
)
;
}
}
getBaseDomainFromURI
(
uri
)
{
try
{
return
eTLDService
.
getBaseDomain
(
uri
)
;
}
catch
(
_
)
{
return
false
;
}
}
lookupUAOverride
(
uri
)
{
let
baseDomain
=
this
.
getBaseDomainFromURI
(
uri
)
;
if
(
baseDomain
&
&
this
.
_overrides
[
baseDomain
]
)
{
for
(
let
uaOverride
of
this
.
_overrides
[
baseDomain
]
)
{
if
(
uaOverride
.
uriMatcher
(
uri
.
specIgnoringRef
)
)
{
return
uaOverride
.
uaTransformer
(
DefaultUA
)
;
}
}
}
return
false
;
}
}
this
.
EXPORTED_SYMBOLS
=
[
"
UAOverrider
"
]
;
