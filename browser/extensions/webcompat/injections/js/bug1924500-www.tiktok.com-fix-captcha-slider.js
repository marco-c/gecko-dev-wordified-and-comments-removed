"
use
strict
"
;
(
function
(
)
{
let
lastClientX
=
0
;
const
win
=
window
.
wrappedJSObject
;
Object
.
defineProperty
(
win
.
DragEvent
.
prototype
"
clientX
"
{
get
:
exportFunction
(
function
(
)
{
return
lastClientX
;
}
window
)
set
:
exportFunction
(
function
(
)
{
}
window
)
configurable
:
true
}
)
;
function
setLastClientX
(
evt
)
{
lastClientX
=
evt
.
clientX
;
}
const
captchaOverlayQuery
=
"
.
TUXModal
-
overlay
"
;
function
activate
(
)
{
document
.
documentElement
.
addEventListener
(
"
mousemove
"
setLastClientX
)
;
document
.
documentElement
.
addEventListener
(
"
dragover
"
setLastClientX
)
;
}
function
deactivate
(
)
{
lastClientX
=
0
;
document
.
documentElement
.
removeEventListener
(
"
mousemove
"
setLastClientX
)
;
document
.
documentElement
.
removeEventListener
(
"
dragover
"
setLastClientX
)
;
}
const
captchaObserver
=
new
MutationObserver
(
mutations
=
>
{
for
(
let
{
addedNodes
removedNodes
}
of
mutations
)
{
for
(
const
node
of
addedNodes
)
{
try
{
if
(
node
.
matches
(
captchaOverlayQuery
)
)
{
activate
(
)
;
}
}
catch
(
_
)
{
}
}
for
(
const
node
of
removedNodes
)
{
try
{
if
(
node
.
matches
(
captchaOverlayQuery
)
)
{
deactivate
(
)
;
}
}
catch
(
_
)
{
}
}
}
}
)
;
captchaObserver
.
observe
(
document
.
documentElement
{
childList
:
true
subtree
:
true
}
)
;
}
)
(
)
;
