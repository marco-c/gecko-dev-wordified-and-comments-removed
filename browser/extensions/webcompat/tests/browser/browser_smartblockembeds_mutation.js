"
use
strict
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
test
.
wait300msAfterTabSwitch
"
true
]
[
SEC_DELAY_PREF
1000
]
[
TRACKING_PREF
true
]
[
SMARTBLOCK_EMBEDS_ENABLED_PREF
true
]
]
}
)
;
await
UrlClassifierTestUtils
.
addTestTrackers
(
)
;
await
generateTestShims
(
)
;
registerCleanupFunction
(
(
)
=
>
{
UrlClassifierTestUtils
.
cleanupTestTrackers
(
)
;
}
)
;
Services
.
fog
.
testResetFOG
(
)
;
}
)
;
add_task
(
async
function
test_smartblock_embed_replaced_after_init_load
(
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
waitForLoad
:
true
}
)
;
await
loadSmartblockPageOnTab
(
tab
)
;
const
TrackingProtection
=
gProtectionsHandler
.
blockers
.
TrackingProtection
;
ok
(
TrackingProtection
"
TP
is
attached
to
the
tab
"
)
;
ok
(
TrackingProtection
.
enabled
"
TP
is
enabled
"
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
let
placeholders
=
content
.
document
.
querySelectorAll
(
"
.
shimmed
-
embedded
-
content
"
)
;
is
(
placeholders
.
length
1
"
Embed
is
replaced
with
a
placeholder
"
)
;
}
)
;
let
smartblockScriptFinished
=
BrowserTestUtils
.
waitForContentEvent
(
tab
.
linkedBrowser
"
smartblockEmbedScriptFinished
"
false
null
true
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
let
newPlaceholder
=
content
.
document
.
createElement
(
"
div
"
)
;
newPlaceholder
.
classList
.
add
(
"
broken
-
embed
-
content
"
)
;
content
.
document
.
body
.
appendChild
(
newPlaceholder
)
;
}
)
;
await
smartblockScriptFinished
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
let
placeholders
=
content
.
document
.
querySelectorAll
(
"
.
shimmed
-
embedded
-
content
"
)
;
is
(
placeholders
.
length
2
"
Embed
is
replaced
with
a
placeholder
"
)
;
}
)
;
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
