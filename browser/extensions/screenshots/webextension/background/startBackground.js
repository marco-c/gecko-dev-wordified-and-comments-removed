this
.
startBackground
=
(
function
(
)
{
let
exports
=
{
}
;
const
backgroundScripts
=
[
"
log
.
js
"
"
makeUuid
.
js
"
"
catcher
.
js
"
"
background
/
selectorLoader
.
js
"
"
background
/
communication
.
js
"
"
background
/
auth
.
js
"
"
background
/
senderror
.
js
"
"
build
/
raven
.
js
"
"
build
/
shot
.
js
"
"
background
/
analytics
.
js
"
"
background
/
deviceInfo
.
js
"
"
background
/
takeshot
.
js
"
"
background
/
main
.
js
"
]
;
const
CHECK_MIGRATION_DELAY
=
2000
;
browser
.
browserAction
.
onClicked
.
addListener
(
(
tab
)
=
>
{
loadIfNecessary
(
)
.
then
(
(
)
=
>
{
main
.
onClicked
(
tab
)
;
}
)
.
catch
(
(
error
)
=
>
{
console
.
error
(
"
Error
loading
Screenshots
:
"
error
)
;
}
)
;
}
)
;
browser
.
contextMenus
.
create
(
{
id
:
"
create
-
screenshot
"
title
:
browser
.
i18n
.
getMessage
(
"
contextMenuLabel
"
)
contexts
:
[
"
page
"
]
documentUrlPatterns
:
[
"
<
all_urls
>
"
]
}
)
;
browser
.
contextMenus
.
onClicked
.
addListener
(
(
info
tab
)
=
>
{
loadIfNecessary
(
)
.
then
(
(
)
=
>
{
main
.
onClickedContextMenu
(
info
tab
)
;
}
)
.
catch
(
(
error
)
=
>
{
console
.
error
(
"
Error
loading
Screenshots
:
"
error
)
;
}
)
;
}
)
;
let
iconPath
=
null
;
browser
.
storage
.
local
.
get
(
[
"
hasSeenOnboarding
"
]
)
.
then
(
(
result
)
=
>
{
let
hasSeenOnboarding
=
!
!
result
.
hasSeenOnboarding
;
if
(
!
hasSeenOnboarding
)
{
let
path
=
"
icons
/
icon
-
starred
-
32
-
v2
.
svg
"
;
if
(
!
usePhotonPageAction
)
{
browser
.
browserAction
.
setIcon
(
{
path
}
)
;
}
else
{
iconPath
=
path
;
if
(
photonPageActionPort
)
{
photonPageActionPort
.
postMessage
(
{
type
:
"
setProperties
"
iconPath
}
)
;
}
}
}
}
)
.
catch
(
(
error
)
=
>
{
console
.
error
(
"
Error
loading
Screenshots
onboarding
flag
:
"
error
)
;
}
)
;
browser
.
runtime
.
onMessage
.
addListener
(
(
req
sender
sendResponse
)
=
>
{
loadIfNecessary
(
)
.
then
(
(
)
=
>
{
return
communication
.
onMessage
(
req
sender
sendResponse
)
;
}
)
.
catch
(
(
error
)
=
>
{
console
.
error
(
"
Error
loading
Screenshots
:
"
error
)
;
}
)
;
return
true
;
}
)
;
let
usePhotonPageAction
=
false
;
let
photonPageActionPort
=
null
;
initPhotonPageAction
(
)
;
requestIdleCallback
(
(
)
=
>
{
browser
.
runtime
.
sendMessage
(
{
funcName
:
"
getOldDeviceInfo
"
}
)
.
then
(
(
result
)
=
>
{
if
(
result
&
&
result
.
type
=
=
"
success
"
&
&
result
.
value
)
{
return
loadIfNecessary
(
)
;
}
if
(
!
result
)
{
throw
new
Error
(
"
Got
no
result
from
getOldDeviceInfo
"
)
;
}
if
(
result
.
type
=
=
"
error
"
)
{
throw
new
Error
(
Error
from
getOldDeviceInfo
:
{
result
.
name
}
)
;
}
}
)
.
catch
(
(
error
)
=
>
{
if
(
error
&
&
error
.
message
=
=
"
Could
not
establish
connection
.
Receiving
end
does
not
exist
"
)
{
}
else
{
console
.
error
(
"
Screenshots
error
checking
for
Page
Shot
migration
:
"
error
)
;
}
}
)
;
}
{
timeout
:
CHECK_MIGRATION_DELAY
}
)
;
let
loadedPromise
;
function
loadIfNecessary
(
)
{
if
(
loadedPromise
)
{
return
loadedPromise
;
}
loadedPromise
=
Promise
.
resolve
(
)
;
backgroundScripts
.
forEach
(
(
script
)
=
>
{
loadedPromise
=
loadedPromise
.
then
(
(
)
=
>
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
tag
=
document
.
createElement
(
"
script
"
)
;
tag
.
src
=
browser
.
extension
.
getURL
(
script
)
;
tag
.
onload
=
(
)
=
>
{
resolve
(
)
;
}
;
tag
.
onerror
=
(
error
)
=
>
{
let
exc
=
new
Error
(
Error
loading
script
:
{
error
.
message
}
)
;
exc
.
scriptName
=
script
;
reject
(
exc
)
;
}
;
document
.
head
.
appendChild
(
tag
)
;
}
)
;
}
)
;
}
)
;
return
loadedPromise
;
}
function
initPhotonPageAction
(
)
{
photonPageActionPort
=
browser
.
runtime
.
connect
(
{
name
:
"
photonPageActionPort
"
}
)
;
photonPageActionPort
.
onMessage
.
addListener
(
(
message
)
=
>
{
switch
(
message
.
type
)
{
case
"
setUsePhotonPageAction
"
:
usePhotonPageAction
=
message
.
value
;
break
;
case
"
click
"
:
loadIfNecessary
(
)
.
then
(
(
)
=
>
{
main
.
onClicked
(
message
.
tab
)
;
}
)
.
catch
(
(
error
)
=
>
{
console
.
error
(
"
Error
loading
Screenshots
:
"
error
)
;
}
)
;
break
;
default
:
console
.
error
(
"
Unrecognized
message
:
"
message
)
;
break
;
}
}
)
;
photonPageActionPort
.
postMessage
(
{
type
:
"
setProperties
"
title
:
browser
.
i18n
.
getMessage
(
"
contextMenuLabel
"
)
iconPath
}
)
;
Object
.
defineProperties
(
exports
{
"
photonPageActionPort
"
:
{
enumerable
:
true
get
(
)
{
return
photonPageActionPort
;
}
}
"
usePhotonPageAction
"
:
{
enumerable
:
true
get
(
)
{
return
usePhotonPageAction
;
}
}
}
)
;
}
return
exports
;
}
)
(
)
;
