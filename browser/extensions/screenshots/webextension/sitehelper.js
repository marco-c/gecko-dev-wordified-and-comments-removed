"
use
strict
"
;
this
.
sitehelper
=
(
function
(
)
{
const
ContentXMLHttpRequest
=
content
.
XMLHttpRequest
;
catcher
.
registerHandler
(
(
errorObj
)
=
>
{
callBackground
(
"
reportError
"
errorObj
)
;
}
)
;
function
sendCustomEvent
(
name
detail
)
{
if
(
typeof
detail
=
=
=
"
object
"
)
{
detail
=
JSON
.
stringify
(
detail
)
;
}
document
.
dispatchEvent
(
new
CustomEvent
(
name
{
detail
}
)
)
;
}
function
sendBackupCookieRequest
(
authHeaders
)
{
if
(
Object
.
toString
.
apply
(
ContentXMLHttpRequest
)
!
=
=
"
function
XMLHttpRequest
(
)
{
\
n
[
native
code
]
\
n
}
"
)
{
console
.
warn
(
"
Insecure
copy
of
XMLHttpRequest
"
)
;
return
;
}
const
req
=
new
ContentXMLHttpRequest
(
)
;
req
.
open
(
"
POST
"
"
/
api
/
set
-
login
-
cookie
"
)
;
for
(
const
name
in
authHeaders
)
{
req
.
setRequestHeader
(
name
authHeaders
[
name
]
)
;
}
req
.
send
(
"
"
)
;
req
.
onload
=
(
)
=
>
{
if
(
req
.
status
!
=
=
200
)
{
console
.
warn
(
"
Attempt
to
set
Screenshots
cookie
via
/
api
/
set
-
login
-
cookie
failed
:
"
req
.
status
req
.
statusText
req
.
responseText
)
;
}
}
;
}
document
.
addEventListener
(
"
delete
-
everything
"
catcher
.
watchFunction
(
(
event
)
=
>
{
}
false
)
)
;
document
.
addEventListener
(
"
request
-
login
"
catcher
.
watchFunction
(
(
event
)
=
>
{
const
shotId
=
event
.
detail
;
catcher
.
watchPromise
(
callBackground
(
"
getAuthInfo
"
shotId
|
|
null
)
.
then
(
(
info
)
=
>
{
sendBackupCookieRequest
(
info
.
authHeaders
)
;
sendCustomEvent
(
"
login
-
successful
"
{
deviceId
:
info
.
deviceId
isOwner
:
info
.
isOwner
backupCookieRequest
:
true
}
)
;
}
)
)
;
}
)
)
;
document
.
addEventListener
(
"
request
-
onboarding
"
catcher
.
watchFunction
(
(
event
)
=
>
{
callBackground
(
"
requestOnboarding
"
)
;
}
)
)
;
document
.
addEventListener
(
"
request
-
addon
-
present
"
catcher
.
watchFunction
(
(
)
=
>
{
sendCustomEvent
(
"
addon
-
present
"
)
;
}
)
)
;
sendCustomEvent
(
"
addon
-
present
"
)
;
}
)
(
)
;
null
;
