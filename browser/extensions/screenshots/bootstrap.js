const
OLD_ADDON_PREF_NAME
=
"
extensions
.
jid1
-
NeEaf3sAHdKHPA
jetpack
.
deviceIdInfo
"
;
const
OLD_ADDON_ID
=
"
jid1
-
NeEaf3sAHdKHPA
jetpack
"
;
const
ADDON_ID
=
"
screenshots
mozilla
.
org
"
;
const
TELEMETRY_ENABLED_PREF
=
"
datareporting
.
healthreport
.
uploadEnabled
"
;
const
PREF_BRANCH
=
"
extensions
.
screenshots
.
"
;
const
USER_DISABLE_PREF
=
"
extensions
.
screenshots
.
disabled
"
;
const
HISTORY_ENABLED_PREF
=
"
places
.
history
.
enabled
"
;
const
{
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Console
"
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
LegacyExtensionsUtils
"
"
resource
:
/
/
gre
/
modules
/
LegacyExtensionsUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PageActions
"
"
resource
:
/
/
/
modules
/
PageActions
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
let
addonResourceURI
;
let
appStartupDone
;
let
appStartupPromise
=
new
Promise
(
(
resolve
reject
)
=
>
{
appStartupDone
=
resolve
;
}
)
;
const
prefs
=
Services
.
prefs
;
const
prefObserver
=
{
register
(
)
{
prefs
.
addObserver
(
PREF_BRANCH
this
false
)
;
}
unregister
(
)
{
prefs
.
removeObserver
(
PREF_BRANCH
this
false
)
;
}
observe
(
aSubject
aTopic
aData
)
{
if
(
aData
=
=
USER_DISABLE_PREF
)
{
appStartupPromise
=
appStartupPromise
.
then
(
handleStartup
)
;
}
}
}
;
const
appStartupObserver
=
{
register
(
)
{
Services
.
obs
.
addObserver
(
this
"
sessionstore
-
windows
-
restored
"
false
)
;
}
unregister
(
)
{
Services
.
obs
.
removeObserver
(
this
"
sessionstore
-
windows
-
restored
"
false
)
;
}
observe
(
)
{
appStartupDone
(
)
;
this
.
unregister
(
)
;
}
}
const
LibraryButton
=
{
ITEM_ID
:
"
appMenu
-
library
-
screenshots
"
init
(
webExtension
)
{
this
.
_initialized
=
true
;
let
permissionPages
=
[
.
.
.
webExtension
.
extension
.
permissions
]
.
filter
(
p
=
>
(
/
^
https
?
:
\
/
\
/
/
i
)
.
test
(
p
)
)
;
if
(
permissionPages
.
length
>
1
)
{
Cu
.
reportError
(
new
Error
(
"
Should
not
have
more
than
1
permission
page
but
got
:
"
+
JSON
.
stringify
(
permissionPages
)
)
)
;
}
this
.
PAGE_TO_OPEN
=
permissionPages
.
length
=
=
1
?
permissionPages
[
0
]
.
replace
(
/
\
*
/
"
"
)
:
"
https
:
/
/
screenshots
.
firefox
.
com
/
"
;
this
.
PAGE_TO_OPEN
+
=
"
shots
"
;
this
.
ICON_URL
=
webExtension
.
extension
.
getURL
(
"
icons
/
icon
-
16
-
v2
.
svg
"
)
;
this
.
ICON_URL_2X
=
webExtension
.
extension
.
getURL
(
"
icons
/
icon
-
32
-
v2
.
svg
"
)
;
this
.
LABEL
=
webExtension
.
extension
.
localizeMessage
(
"
libraryLabel
"
)
;
CustomizableUI
.
addListener
(
this
)
;
for
(
let
win
of
CustomizableUI
.
windows
)
{
this
.
onWindowOpened
(
win
)
;
}
}
uninit
(
)
{
if
(
!
this
.
_initialized
)
{
return
;
}
for
(
let
win
of
CustomizableUI
.
windows
)
{
let
item
=
win
.
document
.
getElementById
(
this
.
ITEM_ID
)
;
if
(
item
)
{
item
.
remove
(
)
;
}
}
CustomizableUI
.
removeListener
(
this
)
;
this
.
_initialized
=
false
;
}
onWindowOpened
(
win
)
{
let
libraryViewInsertionPoint
=
win
.
document
.
getElementById
(
"
appMenu
-
library
-
remotetabs
-
button
"
)
;
if
(
!
libraryViewInsertionPoint
)
{
return
;
}
let
parent
=
libraryViewInsertionPoint
.
parentNode
;
let
{
nextSibling
}
=
libraryViewInsertionPoint
;
let
item
=
win
.
document
.
createElement
(
"
toolbarbutton
"
)
;
item
.
className
=
"
subviewbutton
subviewbutton
-
iconic
"
;
item
.
addEventListener
(
"
command
"
(
)
=
>
win
.
openUILinkIn
(
this
.
PAGE_TO_OPEN
"
tab
"
)
)
;
item
.
id
=
this
.
ITEM_ID
;
let
iconURL
=
win
.
devicePixelRatio
>
=
1
.
1
?
this
.
ICON_URL_2X
:
this
.
ICON_URL
;
item
.
setAttribute
(
"
image
"
iconURL
)
;
item
.
setAttribute
(
"
label
"
this
.
LABEL
)
;
parent
.
insertBefore
(
item
nextSibling
)
;
}
}
;
const
APP_STARTUP
=
1
;
const
APP_SHUTDOWN
=
2
;
let
startupReason
;
function
startup
(
data
reason
)
{
startupReason
=
reason
;
if
(
reason
=
=
=
APP_STARTUP
)
{
appStartupObserver
.
register
(
)
;
}
else
{
appStartupDone
(
)
;
}
prefObserver
.
register
(
)
;
addonResourceURI
=
data
.
resourceURI
;
appStartupPromise
=
appStartupPromise
.
then
(
handleStartup
)
;
}
function
shutdown
(
data
reason
)
{
prefObserver
.
unregister
(
)
;
const
webExtension
=
LegacyExtensionsUtils
.
getEmbeddedExtensionFor
(
{
id
:
ADDON_ID
resourceURI
:
addonResourceURI
}
)
;
if
(
reason
=
=
=
APP_SHUTDOWN
)
{
stop
(
webExtension
reason
)
;
return
;
}
appStartupPromise
=
appStartupPromise
.
then
(
(
)
=
>
{
stop
(
webExtension
reason
)
;
}
)
;
}
function
install
(
data
reason
)
{
}
function
uninstall
(
data
reason
)
{
}
function
getBoolPref
(
pref
)
{
return
prefs
.
getPrefType
(
pref
)
&
&
prefs
.
getBoolPref
(
pref
)
;
}
function
shouldDisable
(
)
{
return
getBoolPref
(
USER_DISABLE_PREF
)
;
}
function
handleStartup
(
)
{
const
webExtension
=
LegacyExtensionsUtils
.
getEmbeddedExtensionFor
(
{
id
:
ADDON_ID
resourceURI
:
addonResourceURI
}
)
;
if
(
!
shouldDisable
(
)
&
&
!
webExtension
.
started
)
{
return
start
(
webExtension
)
;
}
else
if
(
shouldDisable
(
)
)
{
return
stop
(
webExtension
ADDON_DISABLE
)
;
}
}
function
start
(
webExtension
)
{
return
webExtension
.
startup
(
startupReason
)
.
then
(
(
api
)
=
>
{
api
.
browser
.
runtime
.
onMessage
.
addListener
(
handleMessage
)
;
LibraryButton
.
init
(
webExtension
)
;
initPhotonPageAction
(
api
webExtension
)
;
}
)
.
catch
(
(
err
)
=
>
{
console
.
error
(
err
)
;
if
(
err
.
message
!
=
=
"
This
embedded
extension
has
already
been
started
"
)
{
}
}
)
;
}
function
stop
(
webExtension
reason
)
{
if
(
reason
!
=
APP_SHUTDOWN
)
{
LibraryButton
.
uninit
(
)
;
if
(
photonPageAction
)
{
photonPageAction
.
remove
(
)
;
photonPageAction
=
null
;
}
}
return
Promise
.
resolve
(
webExtension
.
shutdown
(
reason
)
)
;
}
function
handleMessage
(
msg
sender
sendReply
)
{
if
(
!
msg
)
{
return
;
}
if
(
msg
.
funcName
=
=
=
"
getTelemetryPref
"
)
{
let
telemetryEnabled
=
getBoolPref
(
TELEMETRY_ENABLED_PREF
)
;
sendReply
(
{
type
:
"
success
"
value
:
telemetryEnabled
}
)
;
}
else
if
(
msg
.
funcName
=
=
=
"
getOldDeviceInfo
"
)
{
let
oldDeviceInfo
=
prefs
.
prefHasUserValue
(
OLD_ADDON_PREF_NAME
)
&
&
prefs
.
getCharPref
(
OLD_ADDON_PREF_NAME
)
;
sendReply
(
{
type
:
"
success
"
value
:
oldDeviceInfo
|
|
null
}
)
;
}
else
if
(
msg
.
funcName
=
=
=
"
removeOldAddon
"
)
{
AddonManager
.
getAddonByID
(
OLD_ADDON_ID
(
addon
)
=
>
{
prefs
.
clearUserPref
(
OLD_ADDON_PREF_NAME
)
;
if
(
addon
)
{
addon
.
uninstall
(
)
;
}
sendReply
(
{
type
:
"
success
"
value
:
!
!
addon
}
)
;
}
)
;
return
true
;
}
else
if
(
msg
.
funcName
=
=
=
"
getHistoryPref
"
)
{
let
historyEnabled
=
getBoolPref
(
HISTORY_ENABLED_PREF
)
;
sendReply
(
{
type
:
"
success
"
value
:
historyEnabled
}
)
;
}
else
if
(
msg
.
funcName
=
=
=
"
incrementDownloadCount
"
)
{
Services
.
telemetry
.
scalarAdd
(
'
screenshots
.
download
'
1
)
;
sendReply
(
{
type
:
"
success
"
value
:
true
}
)
;
}
else
if
(
msg
.
funcName
=
=
=
"
incrementUploadCount
"
)
{
Services
.
telemetry
.
scalarAdd
(
'
screenshots
.
upload
'
1
)
;
sendReply
(
{
type
:
"
success
"
value
:
true
}
)
;
}
else
if
(
msg
.
funcName
=
=
=
"
incrementCopyCount
"
)
{
Services
.
telemetry
.
scalarAdd
(
'
screenshots
.
copy
'
1
)
;
sendReply
(
{
type
:
"
success
"
value
:
true
}
)
;
}
}
let
photonPageAction
;
function
initPhotonPageAction
(
api
webExtension
)
{
let
id
=
"
screenshots
"
;
let
port
=
null
;
let
{
tabManager
}
=
webExtension
.
extension
;
photonPageAction
=
PageActions
.
actionForID
(
id
)
|
|
PageActions
.
addAction
(
new
PageActions
.
Action
(
{
id
title
:
"
Take
a
Screenshot
"
iconURL
:
webExtension
.
extension
.
getURL
(
"
icons
/
icon
-
32
-
v2
.
svg
"
)
_insertBeforeActionID
:
null
onCommand
(
event
buttonNode
)
{
if
(
port
)
{
let
browserWin
=
buttonNode
.
ownerGlobal
;
let
tab
=
tabManager
.
getWrapper
(
browserWin
.
gBrowser
.
selectedTab
)
;
port
.
postMessage
(
{
type
:
"
click
"
tab
:
{
id
:
tab
.
id
url
:
tab
.
url
}
}
)
;
}
}
}
)
)
;
api
.
browser
.
runtime
.
onConnect
.
addListener
(
(
listenerPort
)
=
>
{
if
(
listenerPort
.
name
!
=
"
photonPageActionPort
"
)
{
return
;
}
port
=
listenerPort
;
port
.
onMessage
.
addListener
(
(
message
)
=
>
{
switch
(
message
.
type
)
{
case
"
setProperties
"
:
if
(
message
.
title
)
{
photonPageAction
.
setTitle
(
message
.
title
)
;
}
if
(
message
.
iconPath
)
{
photonPageAction
.
setIconURL
(
webExtension
.
extension
.
getURL
(
message
.
iconPath
)
)
;
}
break
;
default
:
console
.
error
(
"
Unrecognized
message
:
"
message
)
;
break
;
}
}
)
;
}
)
;
}
