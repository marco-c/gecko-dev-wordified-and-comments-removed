"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
add_task
(
async
function
test_inject_srcdoc
(
)
{
const
addon
=
await
AddonManager
.
getAddonByID
(
"
screenshots
mozilla
.
org
"
)
;
const
isEnabled
=
addon
.
enabled
;
if
(
!
isEnabled
)
{
await
addon
.
enable
(
{
allowSystemAddons
:
true
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
addon
.
disable
(
{
allowSystemAddons
:
true
}
)
;
}
)
;
}
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
injection
-
page
.
html
"
async
browser
=
>
{
let
response
=
null
;
let
responsePromise
=
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
content
.
wrappedJSObject
.
responseHandler
=
Cu
.
exportFunction
(
function
(
arg
)
{
resolve
(
arg
)
;
}
content
)
;
}
)
;
}
)
.
then
(
r
=
>
{
ok
(
false
"
Should
not
have
gotten
HTML
but
got
:
"
+
r
)
;
response
=
r
;
}
(
)
=
>
{
}
)
;
let
error
;
let
errorPromise
=
new
Promise
(
resolve
=
>
{
SpecialPowers
.
registerConsoleListener
(
msg
=
>
{
if
(
msg
.
message
?
.
match
(
/
iframe
URL
does
not
match
expected
blank
.
html
/
)
)
{
error
=
msg
;
resolve
(
)
;
}
}
)
;
}
)
;
CustomizableUI
.
addWidgetToArea
(
"
screenshot
-
button
"
CustomizableUI
.
AREA_NAVBAR
)
;
let
screenshotBtn
=
document
.
getElementById
(
"
screenshot
-
button
"
)
;
screenshotBtn
.
click
(
)
;
await
Promise
.
race
(
[
errorPromise
responsePromise
]
)
;
ok
(
error
"
Should
get
the
relevant
error
:
"
+
error
?
.
message
)
;
ok
(
!
response
"
Should
not
get
a
response
from
the
webpage
.
"
)
;
SpecialPowers
.
postConsoleSentinel
(
)
;
}
)
;
}
)
;
