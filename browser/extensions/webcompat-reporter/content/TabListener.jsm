this
.
EXPORTED_SYMBOLS
=
[
"
TabListener
"
]
;
let
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
const
WIDGET_ID
=
"
webcompat
-
reporter
-
button
"
;
class
TabListener
{
constructor
(
win
)
{
this
.
win
=
win
;
this
.
browser
=
win
.
gBrowser
;
this
.
addListeners
(
)
;
}
addListeners
(
)
{
this
.
browser
.
addTabsProgressListener
(
this
)
;
this
.
browser
.
tabContainer
.
addEventListener
(
"
TabSelect
"
this
)
;
}
removeListeners
(
)
{
this
.
browser
.
removeTabsProgressListener
(
this
)
;
this
.
browser
.
tabContainer
.
removeEventListener
(
"
TabSelect
"
this
)
;
}
handleEvent
(
e
)
{
switch
(
e
.
type
)
{
case
"
TabSelect
"
:
this
.
setButtonState
(
e
.
target
.
linkedBrowser
.
currentURI
.
scheme
)
;
break
;
}
}
onLocationChange
(
browser
webProgress
request
uri
flags
)
{
this
.
setButtonState
(
uri
.
scheme
)
;
}
static
isReportableScheme
(
scheme
)
{
return
[
"
http
"
"
https
"
]
.
some
(
(
prefix
)
=
>
scheme
.
startsWith
(
prefix
)
)
;
}
setButtonState
(
scheme
)
{
if
(
!
CustomizableUI
.
getPlacementOfWidget
(
WIDGET_ID
)
)
{
return
;
}
if
(
TabListener
.
isReportableScheme
(
scheme
)
)
{
CustomizableUI
.
getWidget
(
WIDGET_ID
)
.
forWindow
(
this
.
win
)
.
node
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
CustomizableUI
.
getWidget
(
WIDGET_ID
)
.
forWindow
(
this
.
win
)
.
node
.
setAttribute
(
"
disabled
"
true
)
;
}
}
}
