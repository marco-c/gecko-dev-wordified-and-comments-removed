var
EXPORTED_SYMBOLS
=
[
"
WebCompatReporter
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PageActions
"
"
resource
:
/
/
/
modules
/
PageActions
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
wcStrings
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
webcompat
-
reporter
/
locale
/
webcompat
.
properties
"
)
;
}
)
;
let
prefs
=
{
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
prefs
"
gfx
.
webrender
.
all
"
"
gfx
.
webrender
.
all
"
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
prefs
"
gfx
.
webrender
.
blob
-
images
"
"
gfx
.
webrender
.
blob
-
images
"
true
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
prefs
"
gfx
.
webrender
.
enabled
"
"
gfx
.
webrender
.
enabled
"
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
prefs
"
image
.
mem
.
shared
"
"
image
.
mem
.
shared
"
true
)
;
if
(
AppConstants
.
platform
=
=
"
linux
"
)
{
XPCOMUtils
.
defineLazyPreferenceGetter
(
prefs
"
layers
.
acceleration
.
force
-
enabled
"
"
layers
.
acceleration
.
force
-
enabled
"
false
)
;
}
let
WebCompatReporter
=
{
get
endpoint
(
)
{
return
Services
.
urlFormatter
.
formatURLPref
(
"
extensions
.
webcompat
-
reporter
.
newIssueEndpoint
"
)
;
}
init
(
)
{
PageActions
.
addAction
(
new
PageActions
.
Action
(
{
id
:
"
webcompat
-
reporter
-
button
"
title
:
wcStrings
.
GetStringFromName
(
"
wc
-
reporter
.
label2
"
)
iconURL
:
"
chrome
:
/
/
webcompat
-
reporter
/
skin
/
lightbulb
.
svg
"
labelForHistogram
:
"
webcompat
"
onCommand
:
(
e
)
=
>
this
.
reportIssue
(
e
.
target
.
ownerGlobal
)
onLocationChange
:
(
window
)
=
>
this
.
onLocationChange
(
window
)
}
)
)
;
}
uninit
(
)
{
let
action
=
PageActions
.
actionForID
(
"
webcompat
-
reporter
-
button
"
)
;
action
.
remove
(
)
;
}
onLocationChange
(
window
)
{
let
action
=
PageActions
.
actionForID
(
"
webcompat
-
reporter
-
button
"
)
;
let
scheme
=
window
.
gBrowser
.
currentURI
.
scheme
;
let
isReportable
=
[
"
http
"
"
https
"
]
.
includes
(
scheme
)
;
action
.
setDisabled
(
!
isReportable
window
)
;
}
getScreenshot
(
gBrowser
)
{
const
FRAMESCRIPT
=
"
chrome
:
/
/
webcompat
-
reporter
/
content
/
tab
-
frame
.
js
"
;
const
TABDATA_MESSAGE
=
"
WebCompat
:
SendTabData
"
;
return
new
Promise
(
(
resolve
)
=
>
{
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
mm
.
loadFrameScript
(
FRAMESCRIPT
false
)
;
mm
.
addMessageListener
(
TABDATA_MESSAGE
function
receiveFn
(
message
)
{
mm
.
removeMessageListener
(
TABDATA_MESSAGE
receiveFn
)
;
resolve
(
[
gBrowser
message
.
json
]
)
;
}
)
;
}
)
;
}
openWebCompatTab
(
[
gBrowser
tabData
]
)
{
const
SCREENSHOT_MESSAGE
=
"
WebCompat
:
SendScreenshot
"
;
const
FRAMESCRIPT
=
"
chrome
:
/
/
webcompat
-
reporter
/
content
/
wc
-
frame
.
js
"
;
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
const
WEBCOMPAT_ORIGIN
=
new
win
.
URL
(
WebCompatReporter
.
endpoint
)
.
origin
;
let
params
=
new
URLSearchParams
(
)
;
params
.
append
(
"
url
"
{
tabData
.
url
}
)
;
params
.
append
(
"
src
"
"
desktop
-
reporter
"
)
;
params
.
append
(
"
details
"
JSON
.
stringify
(
prefs
)
)
;
if
(
prefs
[
"
gfx
.
webrender
.
all
"
]
|
|
prefs
[
"
gfx
.
webrender
.
enabled
"
]
)
{
params
.
append
(
"
label
"
"
type
-
webrender
-
enabled
"
)
;
}
let
tab
=
gBrowser
.
loadOneTab
(
{
WebCompatReporter
.
endpoint
}
?
{
params
}
{
inBackground
:
false
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
if
(
tabData
&
&
tabData
.
blob
)
{
let
browser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
let
loadedListener
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
"
nsIWebProgressListener
"
"
nsISupportsWeakReference
"
]
)
onStateChange
(
webProgress
request
flags
status
)
{
let
isStopped
=
flags
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
;
let
isNetwork
=
flags
&
Ci
.
nsIWebProgressListener
.
STATE_IS_NETWORK
;
if
(
isStopped
&
&
isNetwork
&
&
webProgress
.
isTopLevel
)
{
let
location
;
try
{
location
=
request
.
QueryInterface
(
Ci
.
nsIChannel
)
.
URI
;
}
catch
(
ex
)
{
}
if
(
location
&
&
location
.
prePath
=
=
=
WEBCOMPAT_ORIGIN
)
{
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
mm
.
loadFrameScript
(
FRAMESCRIPT
false
)
;
mm
.
sendAsyncMessage
(
SCREENSHOT_MESSAGE
{
screenshot
:
tabData
.
blob
origin
:
WEBCOMPAT_ORIGIN
}
)
;
browser
.
removeProgressListener
(
this
)
;
}
}
}
}
;
browser
.
addProgressListener
(
loadedListener
)
;
}
}
reportIssue
(
global
)
{
this
.
getScreenshot
(
global
.
gBrowser
)
.
then
(
this
.
openWebCompatTab
)
.
catch
(
Cu
.
reportError
)
;
}
}
;
