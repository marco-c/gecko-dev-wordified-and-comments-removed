"
use
strict
"
;
const
{
Subprocess
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Subprocess
.
sys
.
mjs
"
)
;
function
_getBinaryUtil
(
binaryUtilName
)
{
let
utilBin
=
Services
.
dirsvc
.
get
(
"
GreD
"
Ci
.
nsIFile
)
;
if
(
binaryUtilName
=
=
=
"
certutil
"
)
{
utilBin
=
Services
.
dirsvc
.
get
(
"
GreBinD
"
Ci
.
nsIFile
)
;
}
utilBin
.
append
(
binaryUtilName
+
mozinfo
.
bin_suffix
)
;
if
(
!
utilBin
.
exists
(
)
)
{
utilBin
=
Services
.
dirsvc
.
get
(
"
CurWorkD
"
Ci
.
nsIFile
)
;
while
(
utilBin
.
path
.
includes
(
"
xpcshell
"
)
)
{
utilBin
=
utilBin
.
parent
;
}
utilBin
.
append
(
"
bin
"
)
;
utilBin
.
append
(
binaryUtilName
+
mozinfo
.
bin_suffix
)
;
}
if
(
!
utilBin
.
exists
(
)
)
{
utilBin
.
initWithPath
(
"
/
data
/
local
/
xpcb
/
"
)
;
utilBin
.
append
(
binaryUtilName
)
;
}
Assert
.
ok
(
utilBin
.
exists
(
)
Binary
util
{
binaryUtilName
}
should
exist
)
;
return
utilBin
;
}
add_task
(
async
function
test_openFile
(
)
{
const
executableFile
=
_getBinaryUtil
(
"
test_stub_installer
"
)
;
const
command
=
executableFile
.
path
;
const
proc
=
await
Subprocess
.
call
(
{
command
}
)
;
let
{
exitCode
}
=
await
proc
.
wait
(
)
;
Assert
.
equal
(
0
exitCode
)
;
let
stdout
=
await
proc
.
stdout
.
readString
(
)
;
Assert
.
equal
(
"
All
stub
installer
tests
passed
"
stdout
)
;
}
)
;
