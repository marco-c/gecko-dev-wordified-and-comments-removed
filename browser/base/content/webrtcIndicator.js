const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
webrtcUI
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
webrtcUI
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
MacOSWebRTCStatusbarIndicator
"
"
resource
:
/
/
/
modules
/
webrtcUI
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
BrowserWindowTracker
"
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gScreenManager
"
"
mozilla
.
org
/
gfx
/
screenmanager
;
1
"
"
nsIScreenManager
"
)
;
function
updateIndicatorState
(
)
{
WebRTCIndicator
.
updateIndicatorState
(
)
;
}
function
closingInternally
(
)
{
WebRTCIndicator
.
closingInternally
(
)
;
}
const
WebRTCIndicator
=
{
VERTICAL_OFFSET_PX
:
80
init
(
event
)
{
addEventListener
(
"
load
"
this
)
;
addEventListener
(
"
unload
"
this
)
;
this
.
positionCustomized
=
false
;
this
.
updatingIndicatorState
=
false
;
this
.
loaded
=
false
;
this
.
isClosingInternally
=
false
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
this
.
macOSIndicator
=
new
MacOSWebRTCStatusbarIndicator
(
)
;
}
}
updateIndicatorState
(
initialLayout
=
false
)
{
if
(
this
.
macOSIndicator
)
{
this
.
macOSIndicator
.
updateIndicatorState
(
)
;
}
if
(
!
this
.
loaded
)
{
return
;
}
this
.
updatingIndicatorState
=
true
;
this
.
updateWindowAttr
(
"
sharingvideo
"
webrtcUI
.
showCameraIndicator
)
;
this
.
updateWindowAttr
(
"
sharingaudio
"
webrtcUI
.
showMicrophoneIndicator
)
;
let
sharingScreen
=
webrtcUI
.
showScreenSharingIndicator
.
startsWith
(
"
Screen
"
)
;
this
.
updateWindowAttr
(
"
sharingscreen
"
sharingScreen
)
;
let
sharingWindow
=
webrtcUI
.
showScreenSharingIndicator
.
startsWith
(
"
Window
"
)
;
this
.
updateWindowAttr
(
"
sharingwindow
"
sharingWindow
)
;
if
(
sharingWindow
)
{
let
activeStreams
=
webrtcUI
.
getActiveStreams
(
false
false
false
true
)
;
let
hasBrowserWindow
=
activeStreams
.
some
(
stream
=
>
{
return
stream
.
devices
.
some
(
device
=
>
device
.
scary
)
;
}
)
;
this
.
updateWindowAttr
(
"
sharingbrowserwindow
"
hasBrowserWindow
)
;
this
.
sharingBrowserWindow
=
hasBrowserWindow
;
}
else
{
this
.
updateWindowAttr
(
"
sharingbrowserwindow
"
)
;
this
.
sharingBrowserWindow
=
false
;
}
let
displayShare
=
document
.
getElementById
(
"
display
-
share
"
)
;
let
labelledBy
;
if
(
sharingScreen
)
{
labelledBy
=
"
screen
-
share
-
info
"
;
}
else
if
(
this
.
sharingBrowserWindow
)
{
labelledBy
=
"
browser
-
window
-
share
-
info
"
;
}
else
if
(
sharingWindow
)
{
labelledBy
=
"
window
-
share
-
info
"
;
}
displayShare
.
setAttribute
(
"
aria
-
labelledby
"
labelledBy
)
;
if
(
window
.
windowState
!
=
window
.
STATE_MINIMIZED
)
{
let
docElStyle
=
document
.
documentElement
.
style
;
docElStyle
.
minWidth
=
docElStyle
.
maxWidth
=
"
unset
"
;
docElStyle
.
minHeight
=
docElStyle
.
maxHeight
=
"
unset
"
;
window
.
sizeToContent
(
)
;
if
(
AppConstants
.
platform
=
=
"
linux
"
)
{
let
{
width
height
}
=
window
.
windowUtils
.
getBoundsWithoutFlushing
(
document
.
documentElement
)
;
docElStyle
.
minWidth
=
docElStyle
.
maxWidth
=
{
width
}
px
;
docElStyle
.
minHeight
=
docElStyle
.
maxHeight
=
{
height
}
px
;
}
this
.
ensureOnScreen
(
)
;
if
(
!
this
.
positionCustomized
)
{
this
.
centerOnDisplay
(
initialLayout
)
;
}
}
this
.
updatingIndicatorState
=
false
;
}
ensureOnScreen
(
)
{
let
desiredX
=
Math
.
max
(
window
.
screenX
screen
.
availLeft
)
;
let
maxX
=
screen
.
availLeft
+
screen
.
availWidth
-
document
.
documentElement
.
clientWidth
;
window
.
moveTo
(
Math
.
min
(
desiredX
maxX
)
window
.
screenY
)
;
}
centerOnDisplay
(
aInitialLayout
)
{
let
{
height
:
windowHeight
width
:
windowWidth
}
=
window
.
windowUtils
.
getBoundsWithoutFlushing
(
document
.
documentElement
)
;
let
screen
;
if
(
aInitialLayout
)
{
let
recentWindow
=
BrowserWindowTracker
.
getTopWindow
(
)
;
let
{
height
:
originatorHeight
width
:
originatorWidth
}
=
recentWindow
.
windowUtils
.
getBoundsWithoutFlushing
(
recentWindow
.
document
.
documentElement
)
;
screen
=
gScreenManager
.
screenForRect
(
recentWindow
.
screenX
recentWindow
.
screenY
originatorWidth
originatorHeight
)
;
}
else
{
screen
=
gScreenManager
.
screenForRect
(
window
.
screenX
window
.
screenY
windowWidth
windowHeight
)
;
}
let
scaleFactor
=
screen
.
contentsScaleFactor
/
screen
.
defaultCSSScaleFactor
;
let
leftDevPix
=
{
}
;
let
widthDevPix
=
{
}
;
screen
.
GetRectDisplayPix
(
leftDevPix
{
}
widthDevPix
{
}
)
;
let
screenWidth
=
widthDevPix
.
value
*
scaleFactor
;
let
availTopDevPix
=
{
}
;
let
availHeightDevPix
=
{
}
;
screen
.
GetAvailRectDisplayPix
(
{
}
availTopDevPix
{
}
availHeightDevPix
)
;
let
left
=
leftDevPix
.
value
*
scaleFactor
;
let
availHeight
=
(
availTopDevPix
.
value
+
availHeightDevPix
.
value
)
*
scaleFactor
;
window
.
moveTo
(
left
+
(
screenWidth
-
windowWidth
)
/
2
availHeight
-
windowHeight
-
this
.
VERTICAL_OFFSET_PX
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
load
"
:
{
this
.
onLoad
(
)
;
break
;
}
case
"
unload
"
:
{
this
.
onUnload
(
)
;
break
;
}
case
"
click
"
:
{
this
.
onClick
(
event
)
;
break
;
}
case
"
MozUpdateWindowPos
"
:
{
if
(
!
this
.
updatingIndicatorState
)
{
this
.
positionCustomized
=
true
;
}
break
;
}
case
"
sizemodechange
"
:
{
if
(
window
.
windowState
!
=
window
.
STATE_MINIMIZED
)
{
this
.
updateIndicatorState
(
)
;
}
break
;
}
}
}
onLoad
(
)
{
this
.
loaded
=
true
;
this
.
updateIndicatorState
(
true
)
;
window
.
addEventListener
(
"
click
"
this
)
;
window
.
addEventListener
(
"
sizemodechange
"
this
)
;
window
.
windowRoot
.
addEventListener
(
"
MozUpdateWindowPos
"
this
)
;
let
ev
=
new
CustomEvent
(
"
AlertActive
"
{
bubbles
:
true
cancelable
:
true
}
)
;
document
.
documentElement
.
dispatchEvent
(
ev
)
;
this
.
loaded
=
true
;
}
onUnload
(
)
{
if
(
this
.
macOSIndicator
)
{
this
.
macOSIndicator
.
close
(
)
;
}
if
(
!
this
.
isClosingInternally
)
{
let
activeStreams
=
webrtcUI
.
getActiveStreams
(
true
true
true
true
)
;
webrtcUI
.
stopSharingStreams
(
activeStreams
)
;
}
}
onClick
(
event
)
{
switch
(
event
.
target
.
id
)
{
case
"
stop
-
sharing
-
screen
"
:
{
let
activeStreams
=
webrtcUI
.
getActiveStreams
(
false
false
true
false
)
;
webrtcUI
.
stopSharingStreams
(
activeStreams
)
;
break
;
}
case
"
stop
-
sharing
-
window
"
:
{
let
activeStreams
=
webrtcUI
.
getActiveStreams
(
false
false
false
true
)
;
if
(
this
.
sharingBrowserWindow
)
{
let
browserWindowStreams
=
activeStreams
.
filter
(
stream
=
>
{
return
stream
.
devices
.
some
(
device
=
>
device
.
scary
)
;
}
)
;
webrtcUI
.
stopSharingStreams
(
browserWindowStreams
false
false
false
true
)
;
break
;
}
webrtcUI
.
stopSharingStreams
(
activeStreams
)
;
break
;
}
case
"
microphone
-
button
"
:
case
"
camera
-
button
"
:
{
let
activeStreams
=
webrtcUI
.
getActiveStreams
(
true
true
false
)
;
this
.
showSharingDoorhanger
(
activeStreams
)
;
break
;
}
case
"
minimize
"
:
{
window
.
minimize
(
)
;
break
;
}
}
}
showSharingDoorhanger
(
activeStreams
)
{
if
(
!
activeStreams
.
length
)
{
return
;
}
let
index
=
activeStreams
.
length
-
1
;
webrtcUI
.
showSharingDoorhanger
(
activeStreams
[
index
]
)
;
}
updateWindowAttr
(
attr
value
)
{
let
docEl
=
document
.
documentElement
;
if
(
value
)
{
docEl
.
setAttribute
(
attr
"
true
"
)
;
}
else
{
docEl
.
removeAttribute
(
attr
)
;
}
}
closingInternally
(
)
{
this
.
isClosingInternally
=
true
;
}
}
;
WebRTCIndicator
.
init
(
)
;
