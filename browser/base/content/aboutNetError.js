let
searchParams
=
new
URLSearchParams
(
document
.
documentURI
.
split
(
"
?
"
)
[
1
]
)
;
let
gIsCertError
;
function
getErrorCode
(
)
{
return
searchParams
.
get
(
"
e
"
)
;
}
function
getCSSClass
(
)
{
return
searchParams
.
get
(
"
s
"
)
;
}
function
getDescription
(
)
{
return
searchParams
.
get
(
"
d
"
)
;
}
function
isCaptive
(
)
{
return
searchParams
.
get
(
"
captive
"
)
=
=
"
true
"
;
}
function
retryThis
(
buttonEl
)
{
try
{
location
.
reload
(
)
;
}
catch
(
e
)
{
}
buttonEl
.
disabled
=
true
;
}
function
toggleDisplay
(
node
)
{
const
toggle
=
{
"
"
:
"
block
"
"
none
"
:
"
block
"
"
block
"
:
"
none
"
}
;
return
(
node
.
style
.
display
=
toggle
[
node
.
style
.
display
]
)
;
}
function
showCertificateErrorReporting
(
)
{
document
.
getElementById
(
"
certificateErrorReporting
"
)
.
style
.
display
=
"
block
"
;
}
function
showPrefChangeContainer
(
)
{
const
panel
=
document
.
getElementById
(
"
prefChangeContainer
"
)
;
panel
.
style
.
display
=
"
block
"
;
document
.
getElementById
(
"
netErrorButtonContainer
"
)
.
style
.
display
=
"
none
"
;
document
.
getElementById
(
"
prefResetButton
"
)
.
addEventListener
(
"
click
"
function
resetPreferences
(
e
)
{
const
event
=
new
CustomEvent
(
"
AboutNetErrorResetPreferences
"
{
bubbles
:
true
}
)
;
document
.
dispatchEvent
(
event
)
;
}
)
;
addAutofocus
(
"
prefResetButton
"
"
beforeend
"
)
;
}
function
setupAdvancedButton
(
)
{
var
panel
=
document
.
getElementById
(
"
badCertAdvancedPanel
"
)
;
for
(
var
span
of
panel
.
querySelectorAll
(
"
span
.
hostname
"
)
)
{
span
.
textContent
=
document
.
location
.
hostname
;
}
document
.
getElementById
(
"
advancedButton
"
)
.
addEventListener
(
"
click
"
togglePanelVisibility
)
;
function
togglePanelVisibility
(
)
{
toggleDisplay
(
panel
)
;
if
(
gIsCertError
)
{
var
div
=
document
.
getElementById
(
"
certificateErrorDebugInformation
"
)
;
div
.
style
.
display
=
"
none
"
;
}
if
(
panel
.
style
.
display
=
=
"
block
"
)
{
var
event
=
new
CustomEvent
(
"
AboutNetErrorUIExpanded
"
{
bubbles
:
true
}
)
;
document
.
dispatchEvent
(
event
)
;
}
}
if
(
!
gIsCertError
)
{
return
;
}
if
(
getCSSClass
(
)
=
=
"
expertBadCert
"
)
{
toggleDisplay
(
document
.
getElementById
(
"
badCertAdvancedPanel
"
)
)
;
var
div
=
document
.
getElementById
(
"
certificateErrorDebugInformation
"
)
;
div
.
style
.
display
=
"
none
"
;
}
disallowCertOverridesIfNeeded
(
)
;
}
function
disallowCertOverridesIfNeeded
(
)
{
var
cssClass
=
getCSSClass
(
)
;
if
(
cssClass
=
=
"
badStsCert
"
|
|
window
!
=
top
)
{
document
.
getElementById
(
"
exceptionDialogButton
"
)
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
if
(
cssClass
=
=
"
badStsCert
"
)
{
document
.
getElementById
(
"
badStsCertExplanation
"
)
.
removeAttribute
(
"
hidden
"
)
;
let
stsReturnButtonText
=
document
.
getElementById
(
"
stsReturnButtonText
"
)
.
textContent
;
document
.
getElementById
(
"
returnButton
"
)
.
textContent
=
stsReturnButtonText
;
document
.
getElementById
(
"
advancedPanelReturnButton
"
)
.
textContent
=
stsReturnButtonText
;
let
stsMitmWhatCanYouDoAboutIt3
=
document
.
getElementById
(
"
stsMitmWhatCanYouDoAboutIt3
"
)
.
innerHTML
;
document
.
getElementById
(
"
mitmWhatCanYouDoAboutIt3
"
)
.
innerHTML
=
stsMitmWhatCanYouDoAboutIt3
;
}
}
function
initPage
(
)
{
var
err
=
getErrorCode
(
)
;
let
illustratedErrors
=
[
"
malformedURI
"
"
dnsNotFound
"
"
connectionFailure
"
"
netInterrupt
"
"
netTimeout
"
"
netReset
"
"
netOffline
"
]
;
if
(
illustratedErrors
.
includes
(
err
)
)
{
document
.
body
.
classList
.
add
(
"
illustrated
"
err
)
;
}
if
(
err
=
=
"
blockedByPolicy
"
)
{
document
.
body
.
classList
.
add
(
"
blocked
"
)
;
}
gIsCertError
=
(
err
=
=
"
nssBadCert
"
)
;
let
showCaptivePortalUI
=
isCaptive
(
)
&
&
gIsCertError
;
if
(
showCaptivePortalUI
)
{
err
=
"
captivePortal
"
;
}
let
l10nErrId
=
err
;
let
className
=
getCSSClass
(
)
;
if
(
className
)
{
document
.
body
.
classList
.
add
(
className
)
;
}
if
(
gIsCertError
&
&
(
window
!
=
=
window
.
top
|
|
className
=
=
"
badStsCert
"
)
)
{
l10nErrId
+
=
"
_sts
"
;
}
let
pageTitle
=
document
.
getElementById
(
"
ept_
"
+
l10nErrId
)
;
if
(
pageTitle
)
{
document
.
title
=
pageTitle
.
textContent
;
}
var
errTitle
=
document
.
getElementById
(
"
et_
"
+
l10nErrId
)
;
var
errDesc
=
document
.
getElementById
(
"
ed_
"
+
l10nErrId
)
;
if
(
!
errTitle
|
|
!
errDesc
)
{
errTitle
=
document
.
getElementById
(
"
et_generic
"
)
;
errDesc
=
document
.
getElementById
(
"
ed_generic
"
)
;
}
document
.
querySelector
(
"
.
title
-
text
"
)
.
innerHTML
=
errTitle
.
innerHTML
;
var
sd
=
document
.
getElementById
(
"
errorShortDescText
"
)
;
if
(
sd
)
{
if
(
gIsCertError
)
{
sd
.
innerHTML
=
errDesc
.
innerHTML
;
}
else
{
sd
.
textContent
=
getDescription
(
)
;
}
}
if
(
showCaptivePortalUI
)
{
initPageCaptivePortal
(
)
;
return
;
}
if
(
gIsCertError
)
{
initPageCertError
(
)
;
updateContainerPosition
(
)
;
return
;
}
addAutofocus
(
"
errorTryAgain
"
)
;
document
.
body
.
classList
.
add
(
"
neterror
"
)
;
var
ld
=
document
.
getElementById
(
"
errorLongDesc
"
)
;
if
(
ld
)
{
ld
.
innerHTML
=
errDesc
.
innerHTML
;
}
if
(
err
=
=
"
sslv3Used
"
)
{
document
.
getElementById
(
"
learnMoreContainer
"
)
.
style
.
display
=
"
block
"
;
document
.
body
.
className
=
"
certerror
"
;
}
var
errContainer
=
document
.
getElementById
(
"
errorContainer
"
)
;
errContainer
.
remove
(
)
;
if
(
err
=
=
"
remoteXUL
"
)
{
document
.
getElementById
(
"
netErrorButtonContainer
"
)
.
style
.
display
=
"
none
"
;
}
if
(
err
=
=
"
cspBlocked
"
)
{
document
.
getElementById
(
"
netErrorButtonContainer
"
)
.
style
.
display
=
"
none
"
;
}
window
.
addEventListener
(
"
AboutNetErrorOptions
"
function
(
evt
)
{
if
(
getErrorCode
(
)
=
=
"
nssFailure2
"
)
{
let
shortDesc
=
document
.
getElementById
(
"
errorShortDescText
"
)
.
textContent
;
document
.
getElementById
(
"
learnMoreContainer
"
)
.
style
.
display
=
"
block
"
;
var
options
=
JSON
.
parse
(
evt
.
detail
)
;
if
(
options
&
&
options
.
enabled
)
{
var
checkbox
=
document
.
getElementById
(
"
automaticallyReportInFuture
"
)
;
showCertificateErrorReporting
(
)
;
if
(
options
.
automatic
)
{
checkbox
.
checked
=
true
;
}
checkbox
.
addEventListener
(
"
change
"
function
(
changeEvt
)
{
var
event
=
new
CustomEvent
(
"
AboutNetErrorSetAutomatic
"
{
bubbles
:
true
detail
:
changeEvt
.
target
.
checked
}
)
;
document
.
dispatchEvent
(
event
)
;
}
)
;
}
const
hasPrefStyleError
=
[
"
interrupted
"
"
SSL_ERROR_PROTOCOL_VERSION_ALERT
"
"
SSL_ERROR_UNSUPPORTED_VERSION
"
"
SSL_ERROR_NO_CYPHER_OVERLAP
"
"
SSL_ERROR_NO_CIPHERS_SUPPORTED
"
]
.
some
(
(
substring
)
=
>
shortDesc
.
includes
(
substring
)
)
;
if
(
getErrorCode
(
)
=
=
"
nssFailure2
"
&
&
hasPrefStyleError
&
&
options
&
&
options
.
changedCertPrefs
)
{
showPrefChangeContainer
(
)
;
}
}
if
(
getErrorCode
(
)
=
=
"
sslv3Used
"
)
{
document
.
getElementById
(
"
advancedButton
"
)
.
style
.
display
=
"
none
"
;
}
}
true
true
)
;
var
event
=
new
CustomEvent
(
"
AboutNetErrorLoad
"
{
bubbles
:
true
}
)
;
document
.
dispatchEvent
(
event
)
;
if
(
err
=
=
"
inadequateSecurityError
"
|
|
err
=
=
"
blockedByPolicy
"
)
{
document
.
getElementById
(
"
errorTryAgain
"
)
.
style
.
display
=
"
none
"
;
var
container
=
document
.
getElementById
(
"
errorLongDesc
"
)
;
for
(
var
span
of
container
.
querySelectorAll
(
"
span
.
hostname
"
)
)
{
span
.
textContent
=
document
.
location
.
hostname
;
}
}
}
function
updateContainerPosition
(
)
{
let
textContainer
=
document
.
getElementById
(
"
text
-
container
"
)
;
if
(
window
.
parent
=
=
window
)
{
textContainer
.
style
.
marginTop
=
calc
(
50vh
-
{
textContainer
.
clientHeight
/
2
}
px
)
;
}
else
{
let
offset
=
(
document
.
documentElement
.
clientHeight
/
2
)
-
(
textContainer
.
clientHeight
/
2
)
;
if
(
offset
>
0
)
{
textContainer
.
style
.
marginTop
=
{
offset
}
px
;
}
}
}
function
initPageCaptivePortal
(
)
{
document
.
body
.
className
=
"
captiveportal
"
;
document
.
getElementById
(
"
openPortalLoginPageButton
"
)
.
addEventListener
(
"
click
"
(
)
=
>
{
RPMSendAsyncMessage
(
"
Browser
:
OpenCaptivePortalPage
"
)
;
}
)
;
addAutofocus
(
"
openPortalLoginPageButton
"
)
;
setupAdvancedButton
(
)
;
RPMAddMessageListener
(
"
AboutNetErrorCaptivePortalFreed
"
(
)
=
>
{
document
.
location
.
reload
(
)
;
}
)
;
}
function
initPageCertError
(
)
{
document
.
body
.
classList
.
add
(
"
certerror
"
)
;
for
(
let
host
of
document
.
querySelectorAll
(
"
.
hostname
"
)
)
{
host
.
textContent
=
document
.
location
.
hostname
;
}
addAutofocus
(
"
returnButton
"
)
;
setupAdvancedButton
(
)
;
document
.
getElementById
(
"
learnMoreContainer
"
)
.
style
.
display
=
"
block
"
;
let
checkbox
=
document
.
getElementById
(
"
automaticallyReportInFuture
"
)
;
checkbox
.
addEventListener
(
"
change
"
function
(
{
target
:
{
checked
}
}
)
{
document
.
dispatchEvent
(
new
CustomEvent
(
"
AboutNetErrorSetAutomatic
"
{
detail
:
checked
bubbles
:
true
}
)
)
;
}
)
;
addEventListener
(
"
AboutNetErrorOptions
"
function
(
event
)
{
var
options
=
JSON
.
parse
(
event
.
detail
)
;
if
(
options
&
&
options
.
enabled
)
{
document
.
getElementById
(
"
certificateErrorReporting
"
)
.
style
.
display
=
"
block
"
;
checkbox
.
checked
=
!
!
options
.
automatic
;
}
if
(
options
&
&
options
.
hideAddExceptionButton
)
{
document
.
querySelector
(
"
.
exceptionDialogButtonContainer
"
)
.
hidden
=
true
;
}
}
true
true
)
;
let
event
=
new
CustomEvent
(
"
AboutNetErrorLoad
"
{
bubbles
:
true
}
)
;
document
.
getElementById
(
"
advancedButton
"
)
.
dispatchEvent
(
event
)
;
}
function
addAutofocus
(
buttonId
position
=
"
afterbegin
"
)
{
if
(
window
.
top
=
=
window
)
{
var
button
=
document
.
getElementById
(
buttonId
)
;
var
parent
=
button
.
parentNode
;
button
.
remove
(
)
;
button
.
setAttribute
(
"
autofocus
"
"
true
"
)
;
parent
.
insertAdjacentElement
(
position
button
)
;
}
}
let
errorTryAgain
=
document
.
getElementById
(
"
errorTryAgain
"
)
;
errorTryAgain
.
addEventListener
(
"
click
"
function
(
)
{
retryThis
(
this
)
;
}
)
;
let
advancedPanelErrorTryAgain
=
document
.
getElementById
(
"
advancedPanelErrorTryAgain
"
)
;
advancedPanelErrorTryAgain
.
addEventListener
(
"
click
"
function
(
)
{
retryThis
(
this
)
;
}
)
;
initPage
(
)
;
