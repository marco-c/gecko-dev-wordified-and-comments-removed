let
searchParams
=
new
URLSearchParams
(
document
.
documentURI
.
split
(
"
?
"
)
[
1
]
)
;
let
gIsCertError
;
function
getErrorCode
(
)
{
return
searchParams
.
get
(
"
e
"
)
;
}
function
getCSSClass
(
)
{
return
searchParams
.
get
(
"
s
"
)
;
}
function
getDescription
(
)
{
return
searchParams
.
get
(
"
d
"
)
;
}
function
isCaptive
(
)
{
return
searchParams
.
get
(
"
captive
"
)
=
=
"
true
"
;
}
function
retryThis
(
buttonEl
)
{
try
{
location
.
reload
(
)
;
}
catch
(
e
)
{
}
buttonEl
.
disabled
=
true
;
}
function
toggleDisplay
(
node
)
{
const
toggle
=
{
"
"
:
"
block
"
"
none
"
:
"
block
"
"
block
"
:
"
none
"
}
;
return
(
node
.
style
.
display
=
toggle
[
node
.
style
.
display
]
)
;
}
function
showCertificateErrorReporting
(
)
{
document
.
getElementById
(
"
certificateErrorReporting
"
)
.
style
.
display
=
"
block
"
;
}
function
showPrefChangeContainer
(
)
{
const
panel
=
document
.
getElementById
(
"
prefChangeContainer
"
)
;
panel
.
style
.
display
=
"
block
"
;
document
.
getElementById
(
"
netErrorButtonContainer
"
)
.
style
.
display
=
"
none
"
;
document
.
getElementById
(
"
prefResetButton
"
)
.
addEventListener
(
"
click
"
function
resetPreferences
(
e
)
{
const
event
=
new
CustomEvent
(
"
AboutNetErrorResetPreferences
"
{
bubbles
:
true
}
)
;
document
.
dispatchEvent
(
event
)
;
}
)
;
addAutofocus
(
"
#
prefResetButton
"
"
beforeend
"
)
;
}
function
setupAdvancedButton
(
)
{
var
panel
=
document
.
getElementById
(
"
badCertAdvancedPanel
"
)
;
for
(
var
span
of
panel
.
querySelectorAll
(
"
span
.
hostname
"
)
)
{
span
.
textContent
=
document
.
location
.
hostname
;
}
document
.
getElementById
(
"
advancedButton
"
)
.
addEventListener
(
"
click
"
togglePanelVisibility
)
;
function
togglePanelVisibility
(
)
{
toggleDisplay
(
panel
)
;
if
(
gIsCertError
)
{
var
div
=
document
.
getElementById
(
"
certificateErrorDebugInformation
"
)
;
div
.
style
.
display
=
"
none
"
;
}
if
(
panel
.
style
.
display
=
=
"
block
"
)
{
var
event
=
new
CustomEvent
(
"
AboutNetErrorUIExpanded
"
{
bubbles
:
true
}
)
;
document
.
dispatchEvent
(
event
)
;
}
}
if
(
!
gIsCertError
)
{
return
;
}
if
(
getCSSClass
(
)
=
=
"
expertBadCert
"
)
{
toggleDisplay
(
document
.
getElementById
(
"
badCertAdvancedPanel
"
)
)
;
var
div
=
document
.
getElementById
(
"
certificateErrorDebugInformation
"
)
;
div
.
style
.
display
=
"
none
"
;
}
disallowCertOverridesIfNeeded
(
)
;
}
function
disallowCertOverridesIfNeeded
(
)
{
var
cssClass
=
getCSSClass
(
)
;
if
(
cssClass
=
=
"
badStsCert
"
|
|
window
!
=
top
)
{
document
.
getElementById
(
"
exceptionDialogButton
"
)
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
if
(
cssClass
=
=
"
badStsCert
"
)
{
document
.
getElementById
(
"
badStsCertExplanation
"
)
.
removeAttribute
(
"
hidden
"
)
;
let
stsReturnButtonText
=
document
.
getElementById
(
"
stsReturnButtonText
"
)
.
textContent
;
document
.
getElementById
(
"
returnButton
"
)
.
textContent
=
stsReturnButtonText
;
document
.
getElementById
(
"
advancedPanelReturnButton
"
)
.
textContent
=
stsReturnButtonText
;
let
stsMitmWhatCanYouDoAboutIt3
=
document
.
getElementById
(
"
stsMitmWhatCanYouDoAboutIt3
"
)
.
innerHTML
;
document
.
getElementById
(
"
mitmWhatCanYouDoAboutIt3
"
)
.
innerHTML
=
stsMitmWhatCanYouDoAboutIt3
;
}
}
function
initPage
(
)
{
var
err
=
getErrorCode
(
)
;
let
illustratedErrors
=
[
"
malformedURI
"
"
dnsNotFound
"
"
connectionFailure
"
"
netInterrupt
"
"
netTimeout
"
"
netReset
"
"
netOffline
"
]
;
if
(
illustratedErrors
.
includes
(
err
)
)
{
document
.
body
.
classList
.
add
(
"
illustrated
"
err
)
;
}
if
(
err
=
=
"
blockedByPolicy
"
)
{
document
.
body
.
classList
.
add
(
"
blocked
"
)
;
}
gIsCertError
=
(
err
=
=
"
nssBadCert
"
)
;
let
showCaptivePortalUI
=
isCaptive
(
)
&
&
gIsCertError
;
if
(
showCaptivePortalUI
)
{
err
=
"
captivePortal
"
;
}
let
l10nErrId
=
err
;
let
className
=
getCSSClass
(
)
;
if
(
className
)
{
document
.
body
.
classList
.
add
(
className
)
;
}
if
(
gIsCertError
&
&
(
window
!
=
=
window
.
top
|
|
className
=
=
"
badStsCert
"
)
)
{
l10nErrId
+
=
"
_sts
"
;
}
let
pageTitle
=
document
.
getElementById
(
"
ept_
"
+
l10nErrId
)
;
if
(
pageTitle
)
{
document
.
title
=
pageTitle
.
textContent
;
}
var
errTitle
=
document
.
getElementById
(
"
et_
"
+
l10nErrId
)
;
var
errDesc
=
document
.
getElementById
(
"
ed_
"
+
l10nErrId
)
;
if
(
!
errTitle
|
|
!
errDesc
)
{
errTitle
=
document
.
getElementById
(
"
et_generic
"
)
;
errDesc
=
document
.
getElementById
(
"
ed_generic
"
)
;
}
document
.
querySelector
(
"
.
title
-
text
"
)
.
innerHTML
=
errTitle
.
innerHTML
;
var
sd
=
document
.
getElementById
(
"
errorShortDescText
"
)
;
if
(
sd
)
{
if
(
gIsCertError
)
{
sd
.
innerHTML
=
errDesc
.
innerHTML
;
}
else
{
sd
.
textContent
=
getDescription
(
)
;
}
}
if
(
showCaptivePortalUI
)
{
initPageCaptivePortal
(
)
;
return
;
}
if
(
gIsCertError
)
{
initPageCertError
(
)
;
updateContainerPosition
(
)
;
return
;
}
addAutofocus
(
"
#
netErrorButtonContainer
>
.
try
-
again
"
)
;
document
.
body
.
classList
.
add
(
"
neterror
"
)
;
var
ld
=
document
.
getElementById
(
"
errorLongDesc
"
)
;
if
(
ld
)
{
ld
.
innerHTML
=
errDesc
.
innerHTML
;
}
if
(
err
=
=
"
sslv3Used
"
)
{
document
.
getElementById
(
"
learnMoreContainer
"
)
.
style
.
display
=
"
block
"
;
document
.
body
.
className
=
"
certerror
"
;
}
var
errContainer
=
document
.
getElementById
(
"
errorContainer
"
)
;
errContainer
.
remove
(
)
;
if
(
err
=
=
"
remoteXUL
"
)
{
document
.
getElementById
(
"
netErrorButtonContainer
"
)
.
style
.
display
=
"
none
"
;
}
if
(
err
=
=
"
cspBlocked
"
)
{
document
.
getElementById
(
"
netErrorButtonContainer
"
)
.
style
.
display
=
"
none
"
;
}
window
.
addEventListener
(
"
AboutNetErrorOptions
"
function
(
evt
)
{
if
(
getErrorCode
(
)
=
=
"
nssFailure2
"
)
{
let
shortDesc
=
document
.
getElementById
(
"
errorShortDescText
"
)
.
textContent
;
document
.
getElementById
(
"
learnMoreContainer
"
)
.
style
.
display
=
"
block
"
;
var
options
=
JSON
.
parse
(
evt
.
detail
)
;
if
(
options
&
&
options
.
enabled
)
{
var
checkbox
=
document
.
getElementById
(
"
automaticallyReportInFuture
"
)
;
showCertificateErrorReporting
(
)
;
if
(
options
.
automatic
)
{
checkbox
.
checked
=
true
;
}
checkbox
.
addEventListener
(
"
change
"
function
(
changeEvt
)
{
var
event
=
new
CustomEvent
(
"
AboutNetErrorSetAutomatic
"
{
bubbles
:
true
detail
:
changeEvt
.
target
.
checked
}
)
;
document
.
dispatchEvent
(
event
)
;
}
)
;
}
const
hasPrefStyleError
=
[
"
interrupted
"
"
SSL_ERROR_PROTOCOL_VERSION_ALERT
"
"
SSL_ERROR_UNSUPPORTED_VERSION
"
"
SSL_ERROR_NO_CYPHER_OVERLAP
"
"
SSL_ERROR_NO_CIPHERS_SUPPORTED
"
]
.
some
(
(
substring
)
=
>
shortDesc
.
includes
(
substring
)
)
;
if
(
getErrorCode
(
)
=
=
"
nssFailure2
"
&
&
hasPrefStyleError
&
&
options
&
&
options
.
changedCertPrefs
)
{
showPrefChangeContainer
(
)
;
}
}
if
(
getErrorCode
(
)
=
=
"
sslv3Used
"
)
{
document
.
getElementById
(
"
advancedButton
"
)
.
style
.
display
=
"
none
"
;
}
}
true
true
)
;
var
event
=
new
CustomEvent
(
"
AboutNetErrorLoad
"
{
bubbles
:
true
}
)
;
document
.
dispatchEvent
(
event
)
;
if
(
err
=
=
"
inadequateSecurityError
"
|
|
err
=
=
"
blockedByPolicy
"
)
{
document
.
getElementById
(
"
netErrorButtonContainer
"
)
.
style
.
display
=
"
none
"
;
var
container
=
document
.
getElementById
(
"
errorLongDesc
"
)
;
for
(
var
span
of
container
.
querySelectorAll
(
"
span
.
hostname
"
)
)
{
span
.
textContent
=
document
.
location
.
hostname
;
}
}
}
function
updateContainerPosition
(
)
{
let
textContainer
=
document
.
getElementById
(
"
text
-
container
"
)
;
if
(
window
.
parent
=
=
window
)
{
textContainer
.
style
.
marginTop
=
calc
(
50vh
-
{
textContainer
.
clientHeight
/
2
}
px
)
;
}
else
{
let
offset
=
(
document
.
documentElement
.
clientHeight
/
2
)
-
(
textContainer
.
clientHeight
/
2
)
;
if
(
offset
>
0
)
{
textContainer
.
style
.
marginTop
=
{
offset
}
px
;
}
}
}
function
initPageCaptivePortal
(
)
{
document
.
body
.
className
=
"
captiveportal
"
;
document
.
getElementById
(
"
openPortalLoginPageButton
"
)
.
addEventListener
(
"
click
"
(
)
=
>
{
RPMSendAsyncMessage
(
"
Browser
:
OpenCaptivePortalPage
"
)
;
}
)
;
addAutofocus
(
"
#
openPortalLoginPageButton
"
)
;
setupAdvancedButton
(
)
;
RPMAddMessageListener
(
"
AboutNetErrorCaptivePortalFreed
"
(
)
=
>
{
document
.
location
.
reload
(
)
;
}
)
;
}
function
initPageCertError
(
)
{
document
.
body
.
classList
.
add
(
"
certerror
"
)
;
for
(
let
host
of
document
.
querySelectorAll
(
"
.
hostname
"
)
)
{
host
.
textContent
=
document
.
location
.
hostname
;
}
addAutofocus
(
"
#
returnButton
"
)
;
setupAdvancedButton
(
)
;
document
.
getElementById
(
"
learnMoreContainer
"
)
.
style
.
display
=
"
block
"
;
let
checkbox
=
document
.
getElementById
(
"
automaticallyReportInFuture
"
)
;
checkbox
.
addEventListener
(
"
change
"
function
(
{
target
:
{
checked
}
}
)
{
document
.
dispatchEvent
(
new
CustomEvent
(
"
AboutNetErrorSetAutomatic
"
{
detail
:
checked
bubbles
:
true
}
)
)
;
}
)
;
addEventListener
(
"
AboutNetErrorOptions
"
function
(
event
)
{
var
options
=
JSON
.
parse
(
event
.
detail
)
;
if
(
options
&
&
options
.
enabled
)
{
document
.
getElementById
(
"
certificateErrorReporting
"
)
.
style
.
display
=
"
block
"
;
checkbox
.
checked
=
!
!
options
.
automatic
;
}
if
(
options
&
&
options
.
hideAddExceptionButton
)
{
document
.
querySelector
(
"
.
exceptionDialogButtonContainer
"
)
.
hidden
=
true
;
}
}
true
true
)
;
let
event
=
new
CustomEvent
(
"
AboutNetErrorLoad
"
{
bubbles
:
true
}
)
;
document
.
getElementById
(
"
advancedButton
"
)
.
dispatchEvent
(
event
)
;
setTechnicalDetailsOnCertError
(
)
;
}
function
setTechnicalDetailsOnCertError
(
)
{
let
technicalInfo
=
document
.
getElementById
(
"
badCertTechnicalInfo
"
)
;
function
setL10NLabel
(
l10nId
args
=
{
}
attrs
=
{
}
rewrite
=
true
)
{
let
elem
=
document
.
createElement
(
"
label
"
)
;
if
(
rewrite
)
{
technicalInfo
.
textContent
=
"
"
;
}
technicalInfo
.
appendChild
(
elem
)
;
let
newLines
=
document
.
createTextNode
(
"
\
n
\
n
"
)
;
technicalInfo
.
appendChild
(
newLines
)
;
if
(
attrs
)
{
let
link
=
document
.
createElement
(
"
a
"
)
;
for
(
let
attr
of
Object
.
keys
(
attrs
)
)
{
link
.
setAttribute
(
attr
attrs
[
attr
]
)
;
}
elem
.
appendChild
(
link
)
;
}
if
(
args
)
{
document
.
l10n
.
setAttributes
(
elem
l10nId
args
)
;
}
else
{
document
.
l10n
.
setAttributes
(
elem
l10nId
)
;
}
}
let
cssClass
=
getCSSClass
(
)
;
let
error
=
getErrorCode
(
)
;
let
hostString
=
document
.
location
.
hostname
;
let
port
=
document
.
location
.
port
;
if
(
port
&
&
port
!
=
443
)
{
hostString
+
=
"
:
"
+
port
;
}
let
l10nId
;
let
args
=
{
hostname
:
hostString
}
;
let
failedCertInfo
=
document
.
getFailedCertSecurityInfo
(
)
;
if
(
failedCertInfo
.
isUntrusted
)
{
switch
(
failedCertInfo
.
errorCodeString
)
{
case
"
MOZILLA_PKIX_ERROR_MITM_DETECTED
"
:
setL10NLabel
(
"
cert
-
error
-
mitm
-
intro
"
)
;
setL10NLabel
(
"
cert
-
error
-
mitm
-
mozilla
"
{
}
{
}
false
)
;
setL10NLabel
(
"
cert
-
error
-
mitm
-
connection
"
{
}
{
}
false
)
;
break
;
case
"
SEC_ERROR_UNKNOWN_ISSUER
"
:
setL10NLabel
(
"
cert
-
error
-
trust
-
unknown
-
issuer
-
intro
"
)
;
setL10NLabel
(
"
cert
-
error
-
trust
-
unknown
-
issuer
"
args
{
}
false
)
;
break
;
case
"
SEC_ERROR_CA_CERT_INVALID
"
:
setL10NLabel
(
"
cert
-
error
-
intro
"
args
)
;
setL10NLabel
(
"
cert
-
error
-
trust
-
cert
-
invalid
"
{
}
{
}
false
)
;
break
;
case
"
SEC_ERROR_UNTRUSTED_ISSUER
"
:
setL10NLabel
(
"
cert
-
error
-
intro
"
args
)
;
setL10NLabel
(
"
cert
-
error
-
trust
-
untrusted
-
issuer
"
{
}
{
}
false
)
;
break
;
case
"
SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED
"
:
setL10NLabel
(
"
cert
-
error
-
intro
"
args
)
;
setL10NLabel
(
"
cert
-
error
-
trust
-
signature
-
algorithm
-
disabled
"
{
}
{
}
false
)
;
break
;
case
"
SEC_ERROR_EXPIRED_ISSUER_CERTIFICATE
"
:
setL10NLabel
(
"
cert
-
error
-
intro
"
args
)
;
setL10NLabel
(
"
cert
-
error
-
trust
-
expired
-
issuer
"
{
}
{
}
false
)
;
break
;
case
"
MOZILLA_PKIX_ERROR_SELF_SIGNED_CERT
"
:
setL10NLabel
(
"
cert
-
error
-
intro
"
args
)
;
setL10NLabel
(
"
cert
-
error
-
trust
-
self
-
signed
"
{
}
{
}
false
)
;
break
;
case
"
MOZILLA_PKIX_ERROR_ADDITIONAL_POLICY_CONSTRAINT_FAILED
"
:
setL10NLabel
(
"
cert
-
error
-
intro
"
args
)
;
setL10NLabel
(
"
cert
-
error
-
trust
-
symantec
"
{
}
{
}
false
)
;
break
;
default
:
setL10NLabel
(
"
cert
-
error
-
intro
"
args
)
;
setL10NLabel
(
"
cert
-
error
-
untrusted
-
default
"
{
}
{
}
false
)
;
}
}
if
(
failedCertInfo
.
isDomainMismatch
)
{
let
subjectAltNames
=
failedCertInfo
.
subjectAltNames
.
split
(
"
"
)
;
subjectAltNames
=
subjectAltNames
.
filter
(
name
=
>
name
.
length
>
0
)
;
let
numSubjectAltNames
=
subjectAltNames
.
length
;
if
(
numSubjectAltNames
!
=
0
)
{
if
(
numSubjectAltNames
=
=
1
)
{
args
[
"
alt
-
name
"
]
=
subjectAltNames
[
0
]
;
let
okHost
=
failedCertInfo
.
subjectAltNames
;
let
href
=
"
"
;
let
thisHost
=
document
.
location
.
hostname
;
let
proto
=
document
.
location
.
protocol
+
"
/
/
"
;
okHost
=
okHost
.
replace
(
/
^
\
*
\
.
/
"
www
.
"
)
;
if
(
okHost
.
endsWith
(
"
.
"
+
thisHost
)
)
{
href
=
proto
+
okHost
;
}
if
(
thisHost
.
endsWith
(
"
.
"
+
okHost
)
)
{
href
=
proto
+
okHost
;
}
if
(
href
&
&
cssClass
!
=
"
expertBadCert
"
)
{
document
.
getElementById
(
"
badCertAdvancedPanel
"
)
.
style
.
display
=
"
block
"
;
if
(
error
=
=
"
nssBadCert
"
)
{
let
div
=
document
.
getElementById
(
"
certificateErrorDebugInformation
"
)
;
div
.
style
.
display
=
"
none
"
;
}
}
if
(
href
)
{
setL10NLabel
(
"
cert
-
error
-
domain
-
mismatch
-
single
"
args
{
"
href
"
:
href
"
data
-
l10n
-
name
"
:
"
domain
-
mismatch
-
link
"
"
id
"
:
"
cert_domain_link
"
}
)
;
}
else
{
setL10NLabel
(
"
cert
-
error
-
domain
-
mismatch
-
single
-
nolink
"
args
)
;
}
}
else
{
let
names
=
subjectAltNames
.
join
(
"
"
)
;
args
[
"
subject
-
alt
-
names
"
]
=
names
;
setL10NLabel
(
"
cert
-
error
-
domain
-
mismatch
-
multiple
"
args
)
;
}
}
else
{
setL10NLabel
(
"
cert
-
error
-
domain
-
mismatch
"
{
hostname
:
hostString
}
)
;
}
}
if
(
failedCertInfo
.
isNotValidAtThisTime
)
{
let
notBefore
=
failedCertInfo
.
validNotBefore
;
let
notAfter
=
failedCertInfo
.
validNotAfter
;
let
formatter
=
new
Intl
.
DateTimeFormat
(
"
default
"
)
;
args
=
{
hostname
:
hostString
}
;
if
(
notBefore
&
&
(
Date
.
now
(
)
<
notAfter
)
)
{
let
notBeforeLocalTime
=
formatter
.
format
(
new
Date
(
notBefore
)
)
;
l10nId
=
"
cert
-
error
-
not
-
yet
-
valid
-
now
"
;
args
[
"
not
-
before
-
local
-
time
"
]
=
notBeforeLocalTime
;
}
else
{
let
notAfterLocalTime
=
formatter
.
format
(
new
Date
(
notAfter
)
)
;
l10nId
=
"
cert
-
error
-
expired
-
now
"
;
args
[
"
not
-
after
-
local
-
time
"
]
=
notAfterLocalTime
;
}
setL10NLabel
(
l10nId
args
)
;
}
setL10NLabel
(
"
cert
-
error
-
code
-
prefix
-
link
"
{
error
:
failedCertInfo
.
errorCodeString
}
{
"
title
"
:
failedCertInfo
.
errorCodeString
"
id
"
:
"
errorCode
"
"
data
-
l10n
-
name
"
:
"
error
-
code
-
link
"
"
data
-
telemetry
-
id
"
:
"
error_code_link
"
}
false
)
;
let
errorCodeLink
=
document
.
getElementById
(
"
errorCode
"
)
;
if
(
errorCodeLink
)
{
technicalInfo
.
addEventListener
(
"
click
"
handleErrorCodeClick
)
;
}
}
function
handleErrorCodeClick
(
event
)
{
if
(
event
.
target
.
id
!
=
=
"
errorCode
"
)
{
return
;
}
let
debugInfo
=
document
.
getElementById
(
"
certificateErrorDebugInformation
"
)
;
debugInfo
.
style
.
display
=
"
block
"
;
debugInfo
.
scrollIntoView
(
{
block
:
"
start
"
behavior
:
"
smooth
"
}
)
;
}
function
addAutofocus
(
selector
position
=
"
afterbegin
"
)
{
if
(
window
.
top
=
=
window
)
{
var
button
=
document
.
querySelector
(
selector
)
;
var
parent
=
button
.
parentNode
;
button
.
remove
(
)
;
button
.
setAttribute
(
"
autofocus
"
"
true
"
)
;
parent
.
insertAdjacentElement
(
position
button
)
;
}
}
for
(
let
button
of
document
.
querySelectorAll
(
"
.
try
-
again
"
)
)
{
button
.
addEventListener
(
"
click
"
function
(
)
{
retryThis
(
this
)
;
}
)
;
}
initPage
(
)
;
