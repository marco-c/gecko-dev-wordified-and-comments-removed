var
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
var
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NotificationDB
.
jsm
"
)
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AboutReaderParent
:
"
resource
:
/
/
/
actors
/
AboutReaderParent
.
sys
.
mjs
"
BrowserSearchTelemetry
:
"
resource
:
/
/
/
modules
/
BrowserSearchTelemetry
.
sys
.
mjs
"
BrowserTelemetryUtils
:
"
resource
:
/
/
gre
/
modules
/
BrowserTelemetryUtils
.
sys
.
mjs
"
Color
:
"
resource
:
/
/
gre
/
modules
/
Color
.
sys
.
mjs
"
DevToolsSocketStatus
:
"
resource
:
/
/
devtools
/
shared
/
security
/
DevToolsSocketStatus
.
sys
.
mjs
"
FirefoxViewNotificationManager
:
"
resource
:
/
/
/
modules
/
firefox
-
view
-
notification
-
manager
.
sys
.
mjs
"
LightweightThemeConsumer
:
"
resource
:
/
/
gre
/
modules
/
LightweightThemeConsumer
.
sys
.
mjs
"
Log
:
"
resource
:
/
/
gre
/
modules
/
Log
.
sys
.
mjs
"
NewTabUtils
:
"
resource
:
/
/
gre
/
modules
/
NewTabUtils
.
sys
.
mjs
"
PictureInPicture
:
"
resource
:
/
/
gre
/
modules
/
PictureInPicture
.
sys
.
mjs
"
PlacesTransactions
:
"
resource
:
/
/
gre
/
modules
/
PlacesTransactions
.
sys
.
mjs
"
PlacesUIUtils
:
"
resource
:
/
/
/
modules
/
PlacesUIUtils
.
sys
.
mjs
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
sys
.
mjs
"
PromiseUtils
:
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
sys
.
mjs
"
ScreenshotsUtils
:
"
resource
:
/
/
/
modules
/
ScreenshotsUtils
.
sys
.
mjs
"
ShortcutUtils
:
"
resource
:
/
/
gre
/
modules
/
ShortcutUtils
.
sys
.
mjs
"
SubDialog
:
"
resource
:
/
/
gre
/
modules
/
SubDialog
.
sys
.
mjs
"
SubDialogManager
:
"
resource
:
/
/
gre
/
modules
/
SubDialog
.
sys
.
mjs
"
UpdateUtils
:
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
sys
.
mjs
"
UrlbarInput
:
"
resource
:
/
/
/
modules
/
UrlbarInput
.
sys
.
mjs
"
UrlbarPrefs
:
"
resource
:
/
/
/
modules
/
UrlbarPrefs
.
sys
.
mjs
"
UrlbarProviderSearchTips
:
"
resource
:
/
/
/
modules
/
UrlbarProviderSearchTips
.
sys
.
mjs
"
UrlbarTokenizer
:
"
resource
:
/
/
/
modules
/
UrlbarTokenizer
.
sys
.
mjs
"
UrlbarUtils
:
"
resource
:
/
/
/
modules
/
UrlbarUtils
.
sys
.
mjs
"
UrlbarValueFormatter
:
"
resource
:
/
/
/
modules
/
UrlbarValueFormatter
.
sys
.
mjs
"
WebsiteFilter
:
"
resource
:
/
/
/
modules
/
policies
/
WebsiteFilter
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AboutNewTab
:
"
resource
:
/
/
/
modules
/
AboutNewTab
.
jsm
"
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
AMTelemetry
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
NewTabPagePreloading
:
"
resource
:
/
/
/
modules
/
NewTabPagePreloading
.
jsm
"
BrowserUsageTelemetry
:
"
resource
:
/
/
/
modules
/
BrowserUsageTelemetry
.
jsm
"
BrowserUIUtils
:
"
resource
:
/
/
/
modules
/
BrowserUIUtils
.
jsm
"
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
CFRPageActions
:
"
resource
:
/
/
activity
-
stream
/
lib
/
CFRPageActions
.
jsm
"
ContextualIdentityService
:
"
resource
:
/
/
gre
/
modules
/
ContextualIdentityService
.
jsm
"
CustomizableUI
:
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
Deprecated
:
"
resource
:
/
/
gre
/
modules
/
Deprecated
.
jsm
"
DownloadsCommon
:
"
resource
:
/
/
/
modules
/
DownloadsCommon
.
jsm
"
DownloadUtils
:
"
resource
:
/
/
gre
/
modules
/
DownloadUtils
.
jsm
"
E10SUtils
:
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
NimbusFeatures
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
ExtensionsUI
:
"
resource
:
/
/
/
modules
/
ExtensionsUI
.
jsm
"
HomePage
:
"
resource
:
/
/
/
modules
/
HomePage
.
jsm
"
LoginHelper
:
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
LoginManagerParent
:
"
resource
:
/
/
gre
/
modules
/
LoginManagerParent
.
jsm
"
MigrationUtils
:
"
resource
:
/
/
/
modules
/
MigrationUtils
.
jsm
"
NetUtil
:
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
OpenInTabsUtils
:
"
resource
:
/
/
/
modules
/
OpenInTabsUtils
.
jsm
"
PageActions
:
"
resource
:
/
/
/
modules
/
PageActions
.
jsm
"
PageThumbs
:
"
resource
:
/
/
gre
/
modules
/
PageThumbs
.
jsm
"
PanelMultiView
:
"
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
PanelView
:
"
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
PluralForm
:
"
resource
:
/
/
gre
/
modules
/
PluralForm
.
jsm
"
Pocket
:
"
chrome
:
/
/
pocket
/
content
/
Pocket
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
ProcessHangMonitor
:
"
resource
:
/
/
/
modules
/
ProcessHangMonitor
.
jsm
"
PromptUtils
:
"
resource
:
/
/
gre
/
modules
/
SharedPromptUtils
.
jsm
"
ReaderMode
:
"
resource
:
/
/
gre
/
modules
/
ReaderMode
.
jsm
"
RFPHelper
:
"
resource
:
/
/
gre
/
modules
/
RFPHelper
.
jsm
"
SafeBrowsing
:
"
resource
:
/
/
gre
/
modules
/
SafeBrowsing
.
jsm
"
Sanitizer
:
"
resource
:
/
/
/
modules
/
Sanitizer
.
jsm
"
SaveToPocket
:
"
chrome
:
/
/
pocket
/
content
/
SaveToPocket
.
jsm
"
SessionStartup
:
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStartup
.
jsm
"
SessionStore
:
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStore
.
jsm
"
SiteDataManager
:
"
resource
:
/
/
/
modules
/
SiteDataManager
.
jsm
"
SitePermissions
:
"
resource
:
/
/
/
modules
/
SitePermissions
.
jsm
"
TabModalPrompt
:
"
chrome
:
/
/
global
/
content
/
tabprompts
.
jsm
"
TabCrashHandler
:
"
resource
:
/
/
/
modules
/
ContentCrashHandlers
.
jsm
"
TelemetryEnvironment
:
"
resource
:
/
/
gre
/
modules
/
TelemetryEnvironment
.
jsm
"
Translation
:
"
resource
:
/
/
/
modules
/
translation
/
TranslationParent
.
jsm
"
UITour
:
"
resource
:
/
/
/
modules
/
UITour
.
jsm
"
Weave
:
"
resource
:
/
/
services
-
sync
/
main
.
js
"
WebNavigationFrames
:
"
resource
:
/
/
gre
/
modules
/
WebNavigationFrames
.
jsm
"
webrtcUI
:
"
resource
:
/
/
/
modules
/
webrtcUI
.
jsm
"
ZoomUI
:
"
resource
:
/
/
/
modules
/
ZoomUI
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
fxAccounts
"
(
)
=
>
{
return
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
.
getFxAccountsSingleton
(
)
;
}
)
;
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
ChromeUtils
.
defineModuleGetter
(
this
"
PluginCrashReporter
"
"
resource
:
/
/
/
modules
/
ContentCrashHandlers
.
jsm
"
)
;
}
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
PlacesTreeView
"
"
chrome
:
/
/
browser
/
content
/
places
/
treeView
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
PlacesInsertionPoint
"
"
PlacesController
"
"
PlacesControllerDragHelper
"
]
"
chrome
:
/
/
browser
/
content
/
places
/
controller
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
PrintUtils
"
"
chrome
:
/
/
global
/
content
/
printUtils
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
ZoomManager
"
"
chrome
:
/
/
global
/
content
/
viewZoomOverlay
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
FullZoom
"
"
chrome
:
/
/
browser
/
content
/
browser
-
fullZoom
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
PanelUI
"
"
chrome
:
/
/
browser
/
content
/
customizableui
/
panelUI
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gViewSourceUtils
"
"
chrome
:
/
/
global
/
content
/
viewSourceUtils
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gTabsPanel
"
"
chrome
:
/
/
browser
/
content
/
browser
-
allTabsMenu
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
BrowserAddonUI
"
"
gExtensionsNotifications
"
"
gUnifiedExtensions
"
"
gXPInstallObserver
"
]
"
chrome
:
/
/
browser
/
content
/
browser
-
addons
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
ctrlTab
"
"
chrome
:
/
/
browser
/
content
/
browser
-
ctrlTab
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
CustomizationHandler
"
"
AutoHideMenubar
"
]
"
chrome
:
/
/
browser
/
content
/
browser
-
customization
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
PointerLock
"
"
FullScreen
"
]
"
chrome
:
/
/
browser
/
content
/
browser
-
fullScreenAndPointerLock
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gIdentityHandler
"
"
chrome
:
/
/
browser
/
content
/
browser
-
siteIdentity
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gPermissionPanel
"
"
chrome
:
/
/
browser
/
content
/
browser
-
sitePermissionPanel
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gProtectionsHandler
"
"
chrome
:
/
/
browser
/
content
/
browser
-
siteProtections
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
gGestureSupport
"
"
gHistorySwipeAnimation
"
]
"
chrome
:
/
/
browser
/
content
/
browser
-
gestureSupport
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gSafeBrowsing
"
"
chrome
:
/
/
browser
/
content
/
browser
-
safebrowsing
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gSync
"
"
chrome
:
/
/
browser
/
content
/
browser
-
sync
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gBrowserThumbnails
"
"
chrome
:
/
/
browser
/
content
/
browser
-
thumbnails
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
openContextMenu
"
"
nsContextMenu
"
]
"
chrome
:
/
/
browser
/
content
/
nsContextMenu
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
DownloadsPanel
"
"
DownloadsOverlayLoader
"
"
DownloadsView
"
"
DownloadsViewUI
"
"
DownloadsViewController
"
"
DownloadsSummary
"
"
DownloadsFooter
"
"
DownloadsBlockedSubview
"
]
"
chrome
:
/
/
browser
/
content
/
downloads
/
downloads
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
DownloadsButton
"
"
DownloadsIndicatorView
"
]
"
chrome
:
/
/
browser
/
content
/
downloads
/
indicator
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gEditItemOverlay
"
"
chrome
:
/
/
browser
/
content
/
places
/
instantEditBookmark
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gGfxUtils
"
"
chrome
:
/
/
browser
/
content
/
browser
-
graphics
-
utils
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
pktUI
"
"
chrome
:
/
/
pocket
/
content
/
pktUI
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
ToolbarKeyboardNavigator
"
"
chrome
:
/
/
browser
/
content
/
browser
-
toolbarKeyNav
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
A11yUtils
"
"
chrome
:
/
/
browser
/
content
/
browser
-
a11yUtils
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gSharedTabWarning
"
"
chrome
:
/
/
browser
/
content
/
browser
-
webrtc
.
js
"
)
;
XPCOMUtils
.
defineLazyServiceGetters
(
this
{
ContentPrefService2
:
[
"
mozilla
.
org
/
content
-
pref
/
service
;
1
"
"
nsIContentPrefService2
"
]
classifierService
:
[
"
mozilla
.
org
/
url
-
classifier
/
dbservice
;
1
"
"
nsIURIClassifier
"
]
Favicons
:
[
"
mozilla
.
org
/
browser
/
favicon
-
service
;
1
"
"
nsIFaviconService
"
]
gDNSService
:
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
"
nsIDNSService
"
]
gSerializationHelper
:
[
"
mozilla
.
org
/
network
/
serialization
-
helper
;
1
"
"
nsISerializationHelper
"
]
WindowsUIUtils
:
[
"
mozilla
.
org
/
windows
-
ui
-
utils
;
1
"
"
nsIWindowsUIUtils
"
]
BrowserHandler
:
[
"
mozilla
.
org
/
browser
/
clh
;
1
"
"
nsIBrowserHandler
"
]
}
)
;
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gCrashReporter
"
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
"
nsICrashReporter
"
)
;
}
if
(
AppConstants
.
ENABLE_WEBDRIVER
)
{
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
Marionette
"
"
mozilla
.
org
/
remote
/
marionette
;
1
"
"
nsIMarionette
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
RemoteAgent
"
"
mozilla
.
org
/
remote
/
agent
;
1
"
"
nsIRemoteAgent
"
)
;
}
else
{
this
.
Marionette
=
{
running
:
false
}
;
this
.
RemoteAgent
=
{
running
:
false
}
;
}
XPCOMUtils
.
defineLazyGetter
(
this
"
RTL_UI
"
(
)
=
>
{
return
Services
.
locale
.
isAppLocaleRTL
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gBrandBundle
"
(
)
=
>
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gBrowserBundle
"
(
)
=
>
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
browser
.
properties
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gTabBrowserBundle
"
(
)
=
>
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
tabbrowser
.
properties
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gCustomizeMode
"
(
)
=
>
{
let
{
CustomizeMode
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizeMode
.
jsm
"
)
;
return
new
CustomizeMode
(
window
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gNavToolbox
"
(
)
=
>
{
return
document
.
getElementById
(
"
navigator
-
toolbox
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gURLBar
"
(
)
=
>
{
let
urlbar
=
new
UrlbarInput
(
{
textbox
:
document
.
getElementById
(
"
urlbar
"
)
eventTelemetryCategory
:
"
urlbar
"
}
)
;
let
beforeFocusOrSelect
=
event
=
>
{
if
(
CustomizationHandler
.
isCustomizing
(
)
|
|
CustomizationHandler
.
isExitingCustomizeMode
)
{
gNavToolbox
.
addEventListener
(
"
aftercustomization
"
(
)
=
>
{
if
(
event
.
type
=
=
"
beforeselect
"
)
{
gURLBar
.
select
(
)
;
}
else
{
gURLBar
.
focus
(
)
;
}
}
{
once
:
true
}
)
;
event
.
preventDefault
(
)
;
return
;
}
if
(
window
.
fullScreen
)
{
FullScreen
.
showNavToolbox
(
)
;
}
}
;
urlbar
.
addEventListener
(
"
beforefocus
"
beforeFocusOrSelect
)
;
urlbar
.
addEventListener
(
"
beforeselect
"
beforeFocusOrSelect
)
;
return
urlbar
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
ReferrerInfo
"
(
)
=
>
Components
.
Constructor
(
"
mozilla
.
org
/
referrer
-
info
;
1
"
"
nsIReferrerInfo
"
"
init
"
)
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gNotificationBox
"
(
)
=
>
{
return
new
MozElements
.
NotificationBox
(
element
=
>
{
element
.
classList
.
add
(
"
global
-
notificationbox
"
)
;
element
.
setAttribute
(
"
notificationside
"
"
top
"
)
;
element
.
setAttribute
(
"
prepend
-
notifications
"
true
)
;
let
outer
=
document
.
createElement
(
"
div
"
)
;
outer
.
appendChild
(
element
)
;
let
tabNotifications
=
document
.
getElementById
(
"
tab
-
notification
-
deck
"
)
;
gNavToolbox
.
insertBefore
(
outer
tabNotifications
)
;
}
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
InlineSpellCheckerUI
"
(
)
=
>
{
let
{
InlineSpellChecker
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
InlineSpellChecker
.
sys
.
mjs
"
)
;
return
new
InlineSpellChecker
(
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
PopupNotifications
"
(
)
=
>
{
let
{
PopupNotifications
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
PopupNotifications
.
sys
.
mjs
"
)
;
try
{
let
shouldSuppress
=
(
)
=
>
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
!
=
"
valid
"
&
&
gURLBar
.
focused
)
|
|
shouldSuppressPopupNotifications
(
)
;
return
new
PopupNotifications
(
gBrowser
document
.
getElementById
(
"
notification
-
popup
"
)
document
.
getElementById
(
"
notification
-
popup
-
box
"
)
{
shouldSuppress
}
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
return
null
;
}
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
MacUserActivityUpdater
"
(
)
=
>
{
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
{
return
null
;
}
return
Cc
[
"
mozilla
.
org
/
widget
/
macuseractivityupdater
;
1
"
]
.
getService
(
Ci
.
nsIMacUserActivityUpdater
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
Win7Features
"
(
)
=
>
{
if
(
AppConstants
.
platform
!
=
"
win
"
)
{
return
null
;
}
const
WINTASKBAR_CONTRACTID
=
"
mozilla
.
org
/
windows
-
taskbar
;
1
"
;
if
(
WINTASKBAR_CONTRACTID
in
Cc
&
&
Cc
[
WINTASKBAR_CONTRACTID
]
.
getService
(
Ci
.
nsIWinTaskbar
)
.
available
)
{
let
{
AeroPeek
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
WindowsPreviewPerTab
.
jsm
"
)
;
return
{
onOpenWindow
(
)
{
AeroPeek
.
onOpenWindow
(
window
)
;
this
.
handledOpening
=
true
;
}
onCloseWindow
(
)
{
if
(
this
.
handledOpening
)
{
AeroPeek
.
onCloseWindow
(
window
)
;
}
}
handledOpening
:
false
}
;
}
return
null
;
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
gToolbarKeyNavEnabled
"
"
browser
.
toolbars
.
keyboard_navigation
"
false
(
aPref
aOldVal
aNewVal
)
=
>
{
if
(
window
.
closed
)
{
return
;
}
if
(
aNewVal
)
{
ToolbarKeyboardNavigator
.
init
(
)
;
}
else
{
ToolbarKeyboardNavigator
.
uninit
(
)
;
}
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
gBookmarksToolbarVisibility
"
"
browser
.
toolbars
.
bookmarks
.
visibility
"
"
newtab
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
gFxaToolbarEnabled
"
"
identity
.
fxaccounts
.
toolbar
.
enabled
"
false
(
aPref
aOldVal
aNewVal
)
=
>
{
updateFxaToolbarMenu
(
aNewVal
)
;
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
gFxaToolbarAccessed
"
"
identity
.
fxaccounts
.
toolbar
.
accessed
"
false
(
aPref
aOldVal
aNewVal
)
=
>
{
updateFxaToolbarMenu
(
gFxaToolbarEnabled
)
;
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
gAddonAbuseReportEnabled
"
"
extensions
.
abuseReport
.
enabled
"
false
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
gAlwaysOpenPanel
"
"
browser
.
download
.
alwaysOpenPanel
"
true
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
gScreenshotsDisabled
"
"
extensions
.
screenshots
.
disabled
"
false
(
)
=
>
{
Services
.
obs
.
notifyObservers
(
window
"
toggle
-
screenshot
-
disable
"
gScreenshots
.
shouldScreenshotsButtonBeDisabled
(
)
)
;
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
gScreenshotsComponentEnabled
"
"
screenshots
.
browser
.
component
.
enabled
"
false
(
)
=
>
{
Services
.
obs
.
notifyObservers
(
window
"
toggle
-
screenshot
-
disable
"
gScreenshots
.
shouldScreenshotsButtonBeDisabled
(
)
)
;
}
)
;
customElements
.
setElementCreationCallback
(
"
translation
-
notification
"
(
)
=
>
{
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
browser
/
content
/
translation
-
notification
.
js
"
window
)
;
}
)
;
customElements
.
setElementCreationCallback
(
"
screenshots
-
buttons
"
(
)
=
>
{
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
browser
/
content
/
screenshots
/
screenshots
-
buttons
.
js
"
window
)
;
}
)
;
var
gBrowser
;
var
gContextMenu
=
null
;
var
gMultiProcessBrowser
=
window
.
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
.
useRemoteTabs
;
var
gFissionBrowser
=
window
.
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
.
useRemoteSubframes
;
var
gBrowserAllowScriptsToCloseInitialTabs
=
false
;
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
{
var
gEditUIVisible
=
true
;
}
Object
.
defineProperty
(
this
"
gReduceMotion
"
{
enumerable
:
true
get
(
)
{
return
typeof
gReduceMotionOverride
=
=
"
boolean
"
?
gReduceMotionOverride
:
gReduceMotionSetting
;
}
}
)
;
let
gReduceMotionSetting
=
true
;
var
gReduceMotionOverride
;
Object
.
defineProperty
(
this
"
gFindBar
"
{
enumerable
:
true
get
(
)
{
return
gBrowser
.
getCachedFindBar
(
)
;
}
}
)
;
Object
.
defineProperty
(
this
"
gFindBarInitialized
"
{
enumerable
:
true
get
(
)
{
return
gBrowser
.
isFindBarInitialized
(
)
;
}
}
)
;
Object
.
defineProperty
(
this
"
gFindBarPromise
"
{
enumerable
:
true
get
(
)
{
return
gBrowser
.
getFindBar
(
)
;
}
}
)
;
function
shouldSuppressPopupNotifications
(
)
{
return
(
window
.
windowState
=
=
window
.
STATE_MINIMIZED
|
|
gBrowser
?
.
selectedBrowser
.
hasAttribute
(
"
tabmodalChromePromptShowing
"
)
|
|
gBrowser
?
.
selectedBrowser
.
hasAttribute
(
"
tabDialogShowing
"
)
|
|
gDialogBox
?
.
isOpen
)
;
}
async
function
gLazyFindCommand
(
cmd
.
.
.
args
)
{
let
fb
=
await
gFindBarPromise
;
if
(
fb
&
&
fb
[
cmd
]
)
{
fb
[
cmd
]
.
apply
(
fb
args
)
;
}
}
var
gPageIcons
=
{
"
about
:
home
"
:
"
chrome
:
/
/
branding
/
content
/
icon32
.
png
"
"
about
:
newtab
"
:
"
chrome
:
/
/
branding
/
content
/
icon32
.
png
"
"
about
:
welcome
"
:
"
chrome
:
/
/
branding
/
content
/
icon32
.
png
"
"
about
:
privatebrowsing
"
:
"
chrome
:
/
/
browser
/
skin
/
privatebrowsing
/
favicon
.
svg
"
}
;
var
gInitialPages
=
[
"
about
:
blank
"
"
about
:
home
"
"
about
:
firefoxview
"
"
about
:
newtab
"
"
about
:
privatebrowsing
"
"
about
:
sessionrestore
"
"
about
:
welcome
"
"
about
:
welcomeback
"
]
;
function
isInitialPage
(
url
)
{
if
(
!
(
url
instanceof
Ci
.
nsIURI
)
)
{
try
{
url
=
Services
.
io
.
newURI
(
url
)
;
}
catch
(
ex
)
{
return
false
;
}
}
let
nonQuery
=
url
.
prePath
+
url
.
filePath
;
return
gInitialPages
.
includes
(
nonQuery
)
|
|
nonQuery
=
=
BROWSER_NEW_TAB_URL
;
}
function
browserWindows
(
)
{
return
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
}
var
gNavigatorBundle
=
{
getString
(
key
)
{
return
gBrowserBundle
.
GetStringFromName
(
key
)
;
}
getFormattedString
(
key
array
)
{
return
gBrowserBundle
.
formatStringFromName
(
key
array
)
;
}
}
;
var
gScreenshots
=
{
shouldScreenshotsButtonBeDisabled
(
)
{
let
uri
=
gBrowser
.
currentURI
;
let
shouldBeDisabled
=
gScreenshotsDisabled
|
|
(
!
gScreenshotsComponentEnabled
&
&
uri
.
scheme
=
=
=
"
about
"
&
&
!
uri
.
spec
.
startsWith
(
"
about
:
reader
"
)
)
;
return
shouldBeDisabled
;
}
}
;
function
updateFxaToolbarMenu
(
enable
isInitialUpdate
=
false
)
{
const
syncEnabled
=
Services
.
prefs
.
getBoolPref
(
"
identity
.
fxaccounts
.
enabled
"
false
)
;
const
mainWindowEl
=
document
.
documentElement
;
const
fxaPanelEl
=
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
"
)
;
const
statusGuess
=
!
!
Services
.
prefs
.
getStringPref
(
"
identity
.
fxaccounts
.
account
.
device
.
name
"
"
"
)
;
mainWindowEl
.
setAttribute
(
"
fxastatus
"
statusGuess
?
"
signed_in
"
:
"
not_configured
"
)
;
fxaPanelEl
.
addEventListener
(
"
ViewShowing
"
gSync
.
updateSendToDeviceTitle
)
;
Services
.
telemetry
.
setEventRecordingEnabled
(
"
fxa_app_menu
"
true
)
;
if
(
enable
&
&
syncEnabled
)
{
mainWindowEl
.
setAttribute
(
"
fxatoolbarmenu
"
"
visible
"
)
;
if
(
!
isInitialUpdate
)
{
gSync
.
maybeUpdateUIState
(
)
;
}
Services
.
telemetry
.
setEventRecordingEnabled
(
"
fxa_avatar_menu
"
true
)
;
}
else
{
mainWindowEl
.
removeAttribute
(
"
fxatoolbarmenu
"
)
;
}
}
function
UpdateBackForwardCommands
(
aWebNavigation
)
{
var
backCommand
=
document
.
getElementById
(
"
Browser
:
Back
"
)
;
var
forwardCommand
=
document
.
getElementById
(
"
Browser
:
Forward
"
)
;
var
backDisabled
=
backCommand
.
hasAttribute
(
"
disabled
"
)
;
var
forwardDisabled
=
forwardCommand
.
hasAttribute
(
"
disabled
"
)
;
if
(
backDisabled
=
=
aWebNavigation
.
canGoBack
)
{
if
(
backDisabled
)
{
backCommand
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
backCommand
.
setAttribute
(
"
disabled
"
true
)
;
}
}
if
(
forwardDisabled
=
=
aWebNavigation
.
canGoForward
)
{
if
(
forwardDisabled
)
{
forwardCommand
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
forwardCommand
.
setAttribute
(
"
disabled
"
true
)
;
}
}
}
function
SetClickAndHoldHandlers
(
)
{
let
popup
=
document
.
getElementById
(
"
backForwardMenu
"
)
.
cloneNode
(
true
)
;
popup
.
removeAttribute
(
"
id
"
)
;
popup
.
setAttribute
(
"
context
"
"
"
)
;
let
backButton
=
document
.
getElementById
(
"
back
-
button
"
)
;
backButton
.
setAttribute
(
"
type
"
"
menu
"
)
;
backButton
.
prepend
(
popup
)
;
gClickAndHoldListenersOnElement
.
add
(
backButton
)
;
let
forwardButton
=
document
.
getElementById
(
"
forward
-
button
"
)
;
popup
=
popup
.
cloneNode
(
true
)
;
forwardButton
.
setAttribute
(
"
type
"
"
menu
"
)
;
forwardButton
.
prepend
(
popup
)
;
gClickAndHoldListenersOnElement
.
add
(
forwardButton
)
;
}
const
gClickAndHoldListenersOnElement
=
{
_timers
:
new
Map
(
)
_mousedownHandler
(
aEvent
)
{
if
(
aEvent
.
button
!
=
0
|
|
aEvent
.
currentTarget
.
open
|
|
aEvent
.
currentTarget
.
disabled
)
{
return
;
}
aEvent
.
currentTarget
.
menupopup
.
hidden
=
true
;
aEvent
.
currentTarget
.
addEventListener
(
"
mouseout
"
this
)
;
aEvent
.
currentTarget
.
addEventListener
(
"
mouseup
"
this
)
;
this
.
_timers
.
set
(
aEvent
.
currentTarget
setTimeout
(
b
=
>
this
.
_openMenu
(
b
)
500
aEvent
.
currentTarget
)
)
;
}
_clickHandler
(
aEvent
)
{
if
(
aEvent
.
button
=
=
0
&
&
aEvent
.
target
=
=
aEvent
.
currentTarget
&
&
!
aEvent
.
currentTarget
.
open
&
&
!
aEvent
.
currentTarget
.
disabled
)
{
let
cmdEvent
=
document
.
createEvent
(
"
xulcommandevent
"
)
;
cmdEvent
.
initCommandEvent
(
"
command
"
true
true
window
0
aEvent
.
ctrlKey
aEvent
.
altKey
aEvent
.
shiftKey
aEvent
.
metaKey
0
null
aEvent
.
mozInputSource
)
;
aEvent
.
currentTarget
.
dispatchEvent
(
cmdEvent
)
;
aEvent
.
preventDefault
(
)
;
}
}
_openMenu
(
aButton
)
{
this
.
_cancelHold
(
aButton
)
;
aButton
.
firstElementChild
.
hidden
=
false
;
aButton
.
open
=
true
;
}
_mouseoutHandler
(
aEvent
)
{
let
buttonRect
=
aEvent
.
currentTarget
.
getBoundingClientRect
(
)
;
if
(
aEvent
.
clientX
>
=
buttonRect
.
left
&
&
aEvent
.
clientX
<
=
buttonRect
.
right
&
&
aEvent
.
clientY
>
=
buttonRect
.
bottom
)
{
this
.
_openMenu
(
aEvent
.
currentTarget
)
;
}
else
{
this
.
_cancelHold
(
aEvent
.
currentTarget
)
;
}
}
_mouseupHandler
(
aEvent
)
{
this
.
_cancelHold
(
aEvent
.
currentTarget
)
;
}
_cancelHold
(
aButton
)
{
clearTimeout
(
this
.
_timers
.
get
(
aButton
)
)
;
aButton
.
removeEventListener
(
"
mouseout
"
this
)
;
aButton
.
removeEventListener
(
"
mouseup
"
this
)
;
}
_keypressHandler
(
aEvent
)
{
if
(
aEvent
.
key
=
=
"
"
|
|
aEvent
.
key
=
=
"
Enter
"
)
{
aEvent
.
target
.
click
(
)
;
}
}
handleEvent
(
e
)
{
switch
(
e
.
type
)
{
case
"
mouseout
"
:
this
.
_mouseoutHandler
(
e
)
;
break
;
case
"
mousedown
"
:
this
.
_mousedownHandler
(
e
)
;
break
;
case
"
click
"
:
this
.
_clickHandler
(
e
)
;
break
;
case
"
mouseup
"
:
this
.
_mouseupHandler
(
e
)
;
break
;
case
"
keypress
"
:
this
.
_keypressHandler
(
e
)
;
break
;
}
}
remove
(
aButton
)
{
aButton
.
removeEventListener
(
"
mousedown
"
this
true
)
;
aButton
.
removeEventListener
(
"
click
"
this
true
)
;
aButton
.
removeEventListener
(
"
keypress
"
this
true
)
;
}
add
(
aElm
)
{
this
.
_timers
.
delete
(
aElm
)
;
aElm
.
addEventListener
(
"
mousedown
"
this
true
)
;
aElm
.
addEventListener
(
"
click
"
this
true
)
;
aElm
.
addEventListener
(
"
keypress
"
this
true
)
;
}
}
;
const
gSessionHistoryObserver
=
{
observe
(
subject
topic
data
)
{
if
(
topic
!
=
"
browser
:
purge
-
session
-
history
"
)
{
return
;
}
var
backCommand
=
document
.
getElementById
(
"
Browser
:
Back
"
)
;
backCommand
.
setAttribute
(
"
disabled
"
"
true
"
)
;
var
fwdCommand
=
document
.
getElementById
(
"
Browser
:
Forward
"
)
;
fwdCommand
.
setAttribute
(
"
disabled
"
"
true
"
)
;
gURLBar
.
editor
.
transactionManager
.
clear
(
)
;
}
}
;
const
gStoragePressureObserver
=
{
_lastNotificationTime
:
-
1
async
observe
(
subject
topic
data
)
{
if
(
topic
!
=
"
QuotaManager
:
:
StoragePressure
"
)
{
return
;
}
const
NOTIFICATION_VALUE
=
"
storage
-
pressure
-
notification
"
;
if
(
gNotificationBox
.
getNotificationWithValue
(
NOTIFICATION_VALUE
)
)
{
return
;
}
const
MIN_NOTIFICATION_INTERVAL_MS
=
Services
.
prefs
.
getIntPref
(
"
browser
.
storageManager
.
pressureNotification
.
minIntervalMS
"
)
;
let
duration
=
Date
.
now
(
)
-
this
.
_lastNotificationTime
;
if
(
duration
<
=
MIN_NOTIFICATION_INTERVAL_MS
)
{
return
;
}
this
.
_lastNotificationTime
=
Date
.
now
(
)
;
MozXULElement
.
insertFTLIfNeeded
(
"
branding
/
brand
.
ftl
"
)
;
MozXULElement
.
insertFTLIfNeeded
(
"
browser
/
preferences
/
preferences
.
ftl
"
)
;
const
BYTES_IN_GIGABYTE
=
1073741824
;
const
USAGE_THRESHOLD_BYTES
=
BYTES_IN_GIGABYTE
*
Services
.
prefs
.
getIntPref
(
"
browser
.
storageManager
.
pressureNotification
.
usageThresholdGB
"
)
;
let
messageFragment
=
document
.
createDocumentFragment
(
)
;
let
message
=
document
.
createElement
(
"
span
"
)
;
let
buttons
=
[
{
supportPage
:
"
storage
-
permissions
"
}
]
;
let
usage
=
subject
.
QueryInterface
(
Ci
.
nsISupportsPRUint64
)
.
data
;
if
(
usage
<
USAGE_THRESHOLD_BYTES
)
{
document
.
l10n
.
setAttributes
(
message
"
space
-
alert
-
under
-
5gb
-
message2
"
)
;
}
else
{
document
.
l10n
.
setAttributes
(
message
"
space
-
alert
-
over
-
5gb
-
message2
"
)
;
buttons
.
push
(
{
"
l10n
-
id
"
:
"
space
-
alert
-
over
-
5gb
-
settings
-
button
"
callback
(
notificationBar
button
)
{
openPreferences
(
"
privacy
-
sitedata
"
)
;
}
}
)
;
}
messageFragment
.
appendChild
(
message
)
;
gNotificationBox
.
appendNotification
(
NOTIFICATION_VALUE
{
label
:
messageFragment
priority
:
gNotificationBox
.
PRIORITY_WARNING_HIGH
}
buttons
)
;
document
.
l10n
.
translateFragment
(
gNotificationBox
.
currentNotification
)
;
}
}
;
var
gPopupBlockerObserver
=
{
handleEvent
(
aEvent
)
{
if
(
aEvent
.
originalTarget
!
=
gBrowser
.
selectedBrowser
)
{
return
;
}
gPermissionPanel
.
refreshPermissionIcons
(
)
;
let
popupCount
=
gBrowser
.
selectedBrowser
.
popupBlocker
.
getBlockedPopupCount
(
)
;
if
(
!
popupCount
)
{
let
notificationBox
=
gBrowser
.
getNotificationBox
(
)
;
let
notification
=
notificationBox
.
getNotificationWithValue
(
"
popup
-
blocked
"
)
;
if
(
notification
)
{
notificationBox
.
removeNotification
(
notification
false
)
;
}
return
;
}
if
(
gBrowser
.
selectedBrowser
.
popupBlocker
.
shouldShowNotification
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
privacy
.
popups
.
showBrowserMessage
"
)
)
{
var
brandBundle
=
document
.
getElementById
(
"
bundle_brand
"
)
;
var
brandShortName
=
brandBundle
.
getString
(
"
brandShortName
"
)
;
var
stringKey
=
AppConstants
.
platform
=
=
"
win
"
?
"
popupWarningButton
"
:
"
popupWarningButtonUnix
"
;
var
popupButtonText
=
gNavigatorBundle
.
getString
(
stringKey
)
;
var
popupButtonAccesskey
=
gNavigatorBundle
.
getString
(
stringKey
+
"
.
accesskey
"
)
;
let
messageBase
;
if
(
popupCount
<
this
.
maxReportedPopups
)
{
messageBase
=
gNavigatorBundle
.
getString
(
"
popupWarning
.
message
"
)
;
}
else
{
messageBase
=
gNavigatorBundle
.
getString
(
"
popupWarning
.
exceeded
.
message
"
)
;
}
var
message
=
PluralForm
.
get
(
popupCount
messageBase
)
.
replace
(
"
#
1
"
brandShortName
)
.
replace
(
"
#
2
"
popupCount
)
;
let
notificationBox
=
gBrowser
.
getNotificationBox
(
)
;
let
notification
=
notificationBox
.
getNotificationWithValue
(
"
popup
-
blocked
"
)
;
if
(
notification
)
{
notification
.
label
=
message
;
}
else
{
var
buttons
=
[
{
label
:
popupButtonText
accessKey
:
popupButtonAccesskey
popup
:
"
blockedPopupOptions
"
callback
:
null
}
]
;
const
priority
=
notificationBox
.
PRIORITY_INFO_MEDIUM
;
notificationBox
.
appendNotification
(
"
popup
-
blocked
"
{
label
:
message
image
:
"
chrome
:
/
/
browser
/
skin
/
notification
-
icons
/
popup
.
svg
"
priority
}
buttons
)
;
}
}
gBrowser
.
selectedBrowser
.
popupBlocker
.
didShowNotification
(
)
;
}
}
toggleAllowPopupsForSite
(
aEvent
)
{
var
pm
=
Services
.
perms
;
var
shouldBlock
=
aEvent
.
target
.
getAttribute
(
"
block
"
)
=
=
"
true
"
;
var
perm
=
shouldBlock
?
pm
.
DENY_ACTION
:
pm
.
ALLOW_ACTION
;
pm
.
addFromPrincipal
(
gBrowser
.
contentPrincipal
"
popup
"
perm
)
;
if
(
!
shouldBlock
)
{
gBrowser
.
selectedBrowser
.
popupBlocker
.
unblockAllPopups
(
)
;
}
gBrowser
.
getNotificationBox
(
)
.
removeCurrentNotification
(
)
;
}
fillPopupList
(
aEvent
)
{
let
browser
=
gBrowser
.
selectedBrowser
;
var
uriOrPrincipal
=
browser
.
contentPrincipal
.
isContentPrincipal
?
browser
.
contentPrincipal
:
browser
.
currentURI
;
var
blockedPopupAllowSite
=
document
.
getElementById
(
"
blockedPopupAllowSite
"
)
;
try
{
blockedPopupAllowSite
.
removeAttribute
(
"
hidden
"
)
;
let
uriHost
=
uriOrPrincipal
.
asciiHost
?
uriOrPrincipal
.
host
:
uriOrPrincipal
.
spec
;
var
pm
=
Services
.
perms
;
if
(
pm
.
testPermissionFromPrincipal
(
browser
.
contentPrincipal
"
popup
"
)
=
=
pm
.
ALLOW_ACTION
)
{
document
.
l10n
.
setAttributes
(
blockedPopupAllowSite
"
popups
-
infobar
-
block
"
{
uriHost
}
)
;
blockedPopupAllowSite
.
setAttribute
(
"
block
"
"
true
"
)
;
}
else
{
document
.
l10n
.
setAttributes
(
blockedPopupAllowSite
"
popups
-
infobar
-
allow
"
{
uriHost
}
)
;
blockedPopupAllowSite
.
removeAttribute
(
"
block
"
)
;
}
}
catch
(
e
)
{
blockedPopupAllowSite
.
hidden
=
true
;
}
let
blockedPopupDontShowMessage
=
document
.
getElementById
(
"
blockedPopupDontShowMessage
"
)
;
let
showMessage
=
Services
.
prefs
.
getBoolPref
(
"
privacy
.
popups
.
showBrowserMessage
"
)
;
blockedPopupDontShowMessage
.
setAttribute
(
"
checked
"
!
showMessage
)
;
let
blockedPopupsSeparator
=
document
.
getElementById
(
"
blockedPopupsSeparator
"
)
;
blockedPopupsSeparator
.
hidden
=
true
;
browser
.
popupBlocker
.
getBlockedPopups
(
)
.
then
(
blockedPopups
=
>
{
let
foundUsablePopupURI
=
false
;
if
(
blockedPopups
)
{
for
(
let
i
=
0
;
i
<
blockedPopups
.
length
;
i
+
+
)
{
let
blockedPopup
=
blockedPopups
[
i
]
;
if
(
!
blockedPopup
.
popupWindowURISpec
)
{
continue
;
}
var
popupURIspec
=
blockedPopup
.
popupWindowURISpec
;
if
(
popupURIspec
=
=
"
"
|
|
popupURIspec
=
=
"
about
:
blank
"
|
|
popupURIspec
=
=
"
<
self
>
"
|
|
popupURIspec
=
=
uriOrPrincipal
.
spec
)
{
continue
;
}
foundUsablePopupURI
=
true
;
var
menuitem
=
document
.
createXULElement
(
"
menuitem
"
)
;
var
label
=
gNavigatorBundle
.
getFormattedString
(
"
popupShowPopupPrefix
"
[
popupURIspec
]
)
;
menuitem
.
setAttribute
(
"
label
"
label
)
;
menuitem
.
setAttribute
(
"
oncommand
"
"
gPopupBlockerObserver
.
showBlockedPopup
(
event
)
;
"
)
;
menuitem
.
setAttribute
(
"
popupReportIndex
"
i
)
;
menuitem
.
setAttribute
(
"
popupInnerWindowId
"
blockedPopup
.
innerWindowId
)
;
menuitem
.
browsingContext
=
blockedPopup
.
browsingContext
;
menuitem
.
popupReportBrowser
=
browser
;
aEvent
.
target
.
appendChild
(
menuitem
)
;
}
}
if
(
foundUsablePopupURI
)
{
blockedPopupsSeparator
.
removeAttribute
(
"
hidden
"
)
;
}
}
null
)
;
}
onPopupHiding
(
aEvent
)
{
let
item
=
aEvent
.
target
.
lastElementChild
;
while
(
item
&
&
item
.
id
!
=
"
blockedPopupsSeparator
"
)
{
let
next
=
item
.
previousElementSibling
;
item
.
remove
(
)
;
item
=
next
;
}
}
showBlockedPopup
(
aEvent
)
{
let
target
=
aEvent
.
target
;
let
browsingContext
=
target
.
browsingContext
;
let
innerWindowId
=
target
.
getAttribute
(
"
popupInnerWindowId
"
)
;
let
popupReportIndex
=
target
.
getAttribute
(
"
popupReportIndex
"
)
;
let
browser
=
target
.
popupReportBrowser
;
browser
.
popupBlocker
.
unblockPopup
(
browsingContext
innerWindowId
popupReportIndex
)
;
}
editPopupSettings
(
)
{
openPreferences
(
"
privacy
-
permissions
-
block
-
popups
"
)
;
}
dontShowMessage
(
)
{
var
showMessage
=
Services
.
prefs
.
getBoolPref
(
"
privacy
.
popups
.
showBrowserMessage
"
)
;
Services
.
prefs
.
setBoolPref
(
"
privacy
.
popups
.
showBrowserMessage
"
!
showMessage
)
;
gBrowser
.
getNotificationBox
(
)
.
removeCurrentNotification
(
)
;
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
gPopupBlockerObserver
"
maxReportedPopups
"
"
privacy
.
popups
.
maxReported
"
)
;
var
gKeywordURIFixup
=
{
check
(
browser
{
fixedURI
keywordProviderName
preferredURI
}
)
{
if
(
!
keywordProviderName
|
|
!
fixedURI
|
|
!
fixedURI
.
host
|
|
UrlbarPrefs
.
get
(
"
browser
.
fixup
.
dns_first_for_single_words
"
)
|
|
UrlbarPrefs
.
get
(
"
dnsResolveSingleWordsAfterSearch
"
)
=
=
0
)
{
return
;
}
let
contentPrincipal
=
browser
.
contentPrincipal
;
let
previousURI
=
browser
.
currentURI
;
let
weakBrowser
=
Cu
.
getWeakReference
(
browser
)
;
browser
=
null
;
let
hostName
=
fixedURI
.
displayHost
;
let
asciiHost
=
fixedURI
.
asciiHost
;
let
onLookupCompleteListener
=
{
onLookupComplete
(
request
record
status
)
{
let
browserRef
=
weakBrowser
.
get
(
)
;
if
(
!
Components
.
isSuccessCode
(
status
)
|
|
!
browserRef
)
{
return
;
}
let
currentURI
=
browserRef
.
currentURI
;
if
(
!
currentURI
.
equals
(
previousURI
)
&
&
!
currentURI
.
equals
(
preferredURI
)
)
{
return
;
}
let
notificationBox
=
gBrowser
.
getNotificationBox
(
browserRef
)
;
if
(
notificationBox
.
getNotificationWithValue
(
"
keyword
-
uri
-
fixup
"
)
)
{
return
;
}
let
displayHostName
=
"
http
:
/
/
"
+
hostName
+
"
/
"
;
let
message
=
gNavigatorBundle
.
getFormattedString
(
"
keywordURIFixup
.
message
"
[
displayHostName
]
)
;
let
yesMessage
=
gNavigatorBundle
.
getFormattedString
(
"
keywordURIFixup
.
goTo
"
[
displayHostName
]
)
;
let
buttons
=
[
{
label
:
yesMessage
accessKey
:
gNavigatorBundle
.
getString
(
"
keywordURIFixup
.
goTo
.
accesskey
"
)
callback
(
)
{
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
let
prefHost
=
asciiHost
;
if
(
prefHost
.
indexOf
(
"
.
"
)
=
=
prefHost
.
length
-
1
)
{
prefHost
=
prefHost
.
slice
(
0
-
1
)
;
}
let
pref
=
"
browser
.
fixup
.
domainwhitelist
.
"
+
prefHost
;
Services
.
prefs
.
setBoolPref
(
pref
true
)
;
}
openTrustedLinkIn
(
fixedURI
.
spec
"
current
"
)
;
}
}
]
;
let
notification
=
notificationBox
.
appendNotification
(
"
keyword
-
uri
-
fixup
"
{
label
:
message
priority
:
notificationBox
.
PRIORITY_INFO_HIGH
}
buttons
)
;
notification
.
persistence
=
1
;
}
}
;
Services
.
uriFixup
.
checkHost
(
fixedURI
onLookupCompleteListener
contentPrincipal
.
originAttributes
)
;
}
observe
(
fixupInfo
topic
data
)
{
fixupInfo
.
QueryInterface
(
Ci
.
nsIURIFixupInfo
)
;
let
browser
=
fixupInfo
.
consumer
?
.
top
?
.
embedderElement
;
if
(
!
browser
|
|
browser
.
ownerGlobal
!
=
window
)
{
return
;
}
this
.
check
(
browser
fixupInfo
)
;
}
}
;
function
serializeInputStream
(
aStream
)
{
let
data
=
{
content
:
NetUtil
.
readInputStreamToString
(
aStream
aStream
.
available
(
)
)
}
;
if
(
aStream
instanceof
Ci
.
nsIMIMEInputStream
)
{
data
.
headers
=
new
Map
(
)
;
aStream
.
visitHeaders
(
(
name
value
)
=
>
{
data
.
headers
.
set
(
name
value
)
;
}
)
;
}
return
data
;
}
function
handleUriInChrome
(
aBrowser
aUri
)
{
if
(
aUri
.
scheme
=
=
"
file
"
)
{
try
{
let
mimeType
=
Cc
[
"
mozilla
.
org
/
mime
;
1
"
]
.
getService
(
Ci
.
nsIMIMEService
)
.
getTypeFromURI
(
aUri
)
;
if
(
mimeType
=
=
"
application
/
x
-
xpinstall
"
)
{
let
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
AddonManager
.
getInstallForURL
(
aUri
.
spec
{
telemetryInfo
:
{
source
:
"
file
-
url
"
}
}
)
.
then
(
install
=
>
{
AddonManager
.
installAddonFromWebpage
(
mimeType
aBrowser
systemPrincipal
install
)
;
}
)
;
return
true
;
}
}
catch
(
e
)
{
return
false
;
}
}
return
false
;
}
function
_createNullPrincipalFromTabUserContextId
(
tab
=
gBrowser
.
selectedTab
)
{
let
userContextId
;
if
(
tab
.
hasAttribute
(
"
usercontextid
"
)
)
{
userContextId
=
tab
.
getAttribute
(
"
usercontextid
"
)
;
}
return
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
userContextId
}
)
;
}
function
_loadURI
(
browser
uri
params
=
{
}
)
{
if
(
!
uri
)
{
uri
=
"
about
:
blank
"
;
}
let
{
triggeringPrincipal
referrerInfo
postData
userContextId
csp
remoteTypeOverride
hasValidUserGestureActivation
globalHistoryOptions
}
=
params
|
|
{
}
;
let
loadFlags
=
params
.
loadFlags
|
|
params
.
flags
|
|
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_NONE
;
hasValidUserGestureActivation
?
?
=
document
.
hasValidTransientUserGestureActivation
;
if
(
!
triggeringPrincipal
)
{
throw
new
Error
(
"
Must
load
with
a
triggering
Principal
"
)
;
}
if
(
userContextId
&
&
userContextId
!
=
browser
.
getAttribute
(
"
usercontextid
"
)
)
{
throw
new
Error
(
"
Cannot
load
with
mismatched
userContextId
"
)
;
}
let
fixupFlags
=
Ci
.
nsIURIFixup
.
FIXUP_FLAG_NONE
;
if
(
loadFlags
&
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP
)
{
fixupFlags
|
=
Ci
.
nsIURIFixup
.
FIXUP_FLAG_ALLOW_KEYWORD_LOOKUP
;
}
if
(
loadFlags
&
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_FIXUP_SCHEME_TYPOS
)
{
fixupFlags
|
=
Ci
.
nsIURIFixup
.
FIXUP_FLAG_FIX_SCHEME_TYPOS
;
}
if
(
PrivateBrowsingUtils
.
isBrowserPrivate
(
browser
)
)
{
fixupFlags
|
=
Ci
.
nsIURIFixup
.
FIXUP_FLAG_PRIVATE_CONTEXT
;
}
try
{
let
uriObject
=
Services
.
uriFixup
.
getFixupURIInfo
(
uri
fixupFlags
)
.
preferredURI
;
if
(
uriObject
&
&
handleUriInChrome
(
browser
uriObject
)
)
{
return
;
}
}
catch
(
e
)
{
}
browser
.
isNavigating
=
true
;
if
(
globalHistoryOptions
?
.
triggeringSearchEngine
)
{
browser
.
setAttribute
(
"
triggeringSearchEngine
"
globalHistoryOptions
.
triggeringSearchEngine
)
;
browser
.
setAttribute
(
"
triggeringSearchEngineURL
"
uri
)
;
}
else
{
browser
.
removeAttribute
(
"
triggeringSearchEngine
"
)
;
browser
.
removeAttribute
(
"
triggeringSearchEngineURL
"
)
;
}
if
(
globalHistoryOptions
?
.
triggeringSponsoredURL
)
{
try
{
const
triggeringSponsoredURL
=
Services
.
uriFixup
.
getFixupURIInfo
(
globalHistoryOptions
.
triggeringSponsoredURL
fixupFlags
)
.
fixedURI
.
spec
;
browser
.
setAttribute
(
"
triggeringSponsoredURL
"
triggeringSponsoredURL
)
;
const
time
=
globalHistoryOptions
.
triggeringSponsoredURLVisitTimeMS
|
|
Date
.
now
(
)
;
browser
.
setAttribute
(
"
triggeringSponsoredURLVisitTimeMS
"
time
)
;
}
catch
(
e
)
{
}
}
let
loadURIOptions
=
{
triggeringPrincipal
csp
loadFlags
referrerInfo
postData
hasValidUserGestureActivation
remoteTypeOverride
}
;
try
{
browser
.
webNavigation
.
loadURI
(
uri
loadURIOptions
)
;
}
finally
{
browser
.
isNavigating
=
false
;
}
}
let
_resolveDelayedStartup
;
var
delayedStartupPromise
=
new
Promise
(
resolve
=
>
{
_resolveDelayedStartup
=
resolve
;
}
)
;
var
gBrowserInit
=
{
delayedStartupFinished
:
false
idleTasksFinishedPromise
:
null
idleTaskPromiseResolve
:
null
domContentLoaded
:
false
_tabToAdopt
:
undefined
getTabToAdopt
(
)
{
if
(
this
.
_tabToAdopt
!
=
=
undefined
)
{
return
this
.
_tabToAdopt
;
}
if
(
window
.
arguments
&
&
window
.
XULElement
.
isInstance
(
window
.
arguments
[
0
]
)
)
{
this
.
_tabToAdopt
=
window
.
arguments
[
0
]
;
window
.
arguments
[
0
]
=
null
;
}
else
{
this
.
_tabToAdopt
=
null
;
}
return
this
.
_tabToAdopt
;
}
_clearTabToAdopt
(
)
{
this
.
_tabToAdopt
=
null
;
}
isAdoptingTab
(
)
{
return
!
!
this
.
getTabToAdopt
(
)
;
}
onBeforeInitialXULLayout
(
)
{
BookmarkingUI
.
updateEmptyToolbarMessage
(
)
;
setToolbarVisibility
(
BookmarkingUI
.
toolbar
gBookmarksToolbarVisibility
false
false
)
;
if
(
Services
.
prefs
.
getBoolPref
(
"
privacy
.
resistFingerprinting
"
)
)
{
document
.
documentElement
.
setAttribute
(
"
sizemode
"
"
normal
"
)
;
}
else
if
(
!
document
.
documentElement
.
hasAttribute
(
"
width
"
)
)
{
const
TARGET_WIDTH
=
1280
;
const
TARGET_HEIGHT
=
1040
;
let
width
=
Math
.
min
(
screen
.
availWidth
*
0
.
9
TARGET_WIDTH
)
;
let
height
=
Math
.
min
(
screen
.
availHeight
*
0
.
9
TARGET_HEIGHT
)
;
document
.
documentElement
.
setAttribute
(
"
width
"
width
)
;
document
.
documentElement
.
setAttribute
(
"
height
"
height
)
;
if
(
width
<
TARGET_WIDTH
&
&
height
<
TARGET_HEIGHT
)
{
document
.
documentElement
.
setAttribute
(
"
sizemode
"
"
maximized
"
)
;
}
}
if
(
AppConstants
.
MENUBAR_CAN_AUTOHIDE
)
{
const
toolbarMenubar
=
document
.
getElementById
(
"
toolbar
-
menubar
"
)
;
if
(
!
toolbarMenubar
.
hasAttribute
(
"
autohide
"
)
)
{
toolbarMenubar
.
setAttribute
(
"
autohide
"
true
)
;
}
toolbarMenubar
.
setAttribute
(
"
data
-
l10n
-
id
"
"
toolbar
-
context
-
menu
-
menu
-
bar
-
cmd
"
)
;
toolbarMenubar
.
setAttribute
(
"
data
-
l10n
-
attrs
"
"
toolbarname
"
)
;
}
AutoHideMenubar
.
init
(
)
;
window
.
TabBarVisibility
.
update
(
)
;
TabsInTitlebar
.
init
(
)
;
new
LightweightThemeConsumer
(
document
)
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
if
(
window
.
matchMedia
(
"
(
-
moz
-
platform
:
windows
-
win8
)
"
)
.
matches
&
&
window
.
matchMedia
(
"
(
-
moz
-
windows
-
default
-
theme
)
"
)
.
matches
)
{
let
windowFrameColor
=
new
Color
(
.
.
.
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
Windows8WindowFrameColor
.
sys
.
mjs
"
)
.
Windows8WindowFrameColor
.
get
(
)
)
;
if
(
!
windowFrameColor
.
isContrastRatioAcceptable
(
new
Color
(
0
0
0
)
)
)
{
document
.
documentElement
.
setAttribute
(
"
darkwindowframe
"
"
true
"
)
;
}
}
else
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
)
{
TelemetryEnvironment
.
onInitialized
(
)
.
then
(
(
)
=
>
{
if
(
TelemetryEnvironment
.
currentEnvironment
.
system
.
os
.
windowsBuildNumber
<
17763
)
{
document
.
documentElement
.
setAttribute
(
"
always
-
use
-
accent
-
color
-
for
-
window
-
border
"
"
"
)
;
}
}
)
;
}
}
if
(
Services
.
prefs
.
getBoolPref
(
"
toolkit
.
legacyUserProfileCustomizations
.
windowIcon
"
false
)
)
{
document
.
documentElement
.
setAttribute
(
"
icon
"
"
main
-
window
"
)
;
}
ToolbarIconColor
.
init
(
)
;
}
onDOMContentLoaded
(
)
{
window
.
docShell
.
treeOwner
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIAppWindow
)
.
XULBrowserWindow
=
window
.
XULBrowserWindow
;
window
.
browserDOMWindow
=
new
nsBrowserAccess
(
)
;
gBrowser
=
window
.
_gBrowser
;
delete
window
.
_gBrowser
;
gBrowser
.
init
(
)
;
BrowserWindowTracker
.
track
(
window
)
;
FirefoxViewHandler
.
init
(
)
;
gNavToolbox
.
palette
=
document
.
getElementById
(
"
BrowserToolbarPalette
"
)
.
content
;
let
areas
=
CustomizableUI
.
areas
;
areas
.
splice
(
areas
.
indexOf
(
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
)
1
)
;
for
(
let
area
of
areas
)
{
let
node
=
document
.
getElementById
(
area
)
;
CustomizableUI
.
registerToolbarNode
(
node
)
;
}
BrowserSearch
.
initPlaceHolder
(
)
;
this
.
_callWithURIToLoad
(
uriToLoad
=
>
{
let
url
;
try
{
url
=
Services
.
io
.
newURI
(
uriToLoad
)
;
}
catch
(
e
)
{
return
;
}
let
nonQuery
=
url
.
prePath
+
url
.
filePath
;
if
(
nonQuery
in
gPageIcons
)
{
gBrowser
.
setIcon
(
gBrowser
.
selectedTab
gPageIcons
[
nonQuery
]
)
;
}
}
)
;
updateFxaToolbarMenu
(
gFxaToolbarEnabled
true
)
;
gUnifiedExtensions
.
init
(
)
;
this
.
_setInitialFocus
(
)
;
this
.
domContentLoaded
=
true
;
}
onLoad
(
)
{
gBrowser
.
addEventListener
(
"
DOMUpdateBlockedPopups
"
gPopupBlockerObserver
)
;
window
.
addEventListener
(
"
AppCommand
"
HandleAppCommandEvent
true
)
;
CaptivePortalWatcher
.
init
(
)
;
ZoomUI
.
init
(
window
)
;
if
(
!
gMultiProcessBrowser
)
{
Services
.
els
.
addSystemEventListener
(
gBrowser
.
tabpanels
"
click
"
contentAreaClick
true
)
;
}
gBrowser
.
addProgressListener
(
window
.
XULBrowserWindow
)
;
gBrowser
.
addTabsProgressListener
(
window
.
TabsProgressListener
)
;
SidebarUI
.
init
(
)
;
DownloadsButton
.
init
(
)
;
Services
.
obs
.
notifyObservers
(
window
"
browser
-
window
-
before
-
show
"
)
;
if
(
!
window
.
toolbar
.
visible
)
{
gURLBar
.
readOnly
=
true
;
}
gUIDensity
.
init
(
)
;
TabletModeUpdater
.
init
(
)
;
CombinedStopReload
.
ensureInitialized
(
)
;
gPrivateBrowsingUI
.
init
(
)
;
BrowserSearch
.
init
(
)
;
BrowserPageActions
.
init
(
)
;
if
(
gToolbarKeyNavEnabled
)
{
ToolbarKeyboardNavigator
.
init
(
)
;
}
gRemoteControl
.
updateVisualCue
(
)
;
let
tabToAdopt
=
this
.
getTabToAdopt
(
)
;
if
(
tabToAdopt
)
{
let
evt
=
new
CustomEvent
(
"
before
-
initial
-
tab
-
adopted
"
{
bubbles
:
true
}
)
;
gBrowser
.
tabpanels
.
dispatchEvent
(
evt
)
;
gBrowser
.
stop
(
)
;
gBrowser
.
docShell
;
gURLBar
.
removeAttribute
(
"
focused
"
)
;
let
swapBrowsers
=
(
)
=
>
{
try
{
gBrowser
.
swapBrowsersAndCloseOther
(
gBrowser
.
selectedTab
tabToAdopt
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
this
.
_clearTabToAdopt
(
)
;
}
;
if
(
tabToAdopt
.
linkedBrowser
.
isRemoteBrowser
)
{
addEventListener
(
"
MozAfterPaint
"
swapBrowsers
{
once
:
true
}
)
;
}
else
{
swapBrowsers
(
)
;
}
}
this
.
_boundDelayedStartup
=
this
.
_delayedStartup
.
bind
(
this
)
;
window
.
addEventListener
(
"
MozAfterPaint
"
this
.
_boundDelayedStartup
)
;
if
(
!
PrivateBrowsingUtils
.
enabled
)
{
document
.
getElementById
(
"
Tools
:
PrivateBrowsing
"
)
.
hidden
=
true
;
document
.
getElementById
(
"
key_privatebrowsing
"
)
.
remove
(
)
;
}
if
(
BrowserUIUtils
.
quitShortcutDisabled
)
{
document
.
getElementById
(
"
key_quitApplication
"
)
.
remove
(
)
;
document
.
getElementById
(
"
menu_FileQuitItem
"
)
.
removeAttribute
(
"
key
"
)
;
PanelMultiView
.
getViewNode
(
document
"
appMenu
-
quit
-
button2
"
)
?
.
removeAttribute
(
"
key
"
)
;
}
this
.
_loadHandled
=
true
;
}
_cancelDelayedStartup
(
)
{
window
.
removeEventListener
(
"
MozAfterPaint
"
this
.
_boundDelayedStartup
)
;
this
.
_boundDelayedStartup
=
null
;
}
_delayedStartup
(
)
{
let
{
TelemetryTimestamps
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryTimestamps
.
jsm
"
)
;
TelemetryTimestamps
.
add
(
"
delayedStartupStarted
"
)
;
this
.
_cancelDelayedStartup
(
)
;
Services
.
appShell
.
hiddenDOMWindow
;
gBrowser
.
addEventListener
(
"
PermissionStateChange
"
function
(
)
{
gIdentityHandler
.
refreshIdentityBlock
(
)
;
gPermissionPanel
.
updateSharingIndicator
(
)
;
}
true
)
;
this
.
_handleURIToLoad
(
)
;
Services
.
obs
.
addObserver
(
gIdentityHandler
"
perm
-
changed
"
)
;
Services
.
obs
.
addObserver
(
gRemoteControl
"
devtools
-
socket
"
)
;
Services
.
obs
.
addObserver
(
gRemoteControl
"
marionette
-
listening
"
)
;
Services
.
obs
.
addObserver
(
gRemoteControl
"
remote
-
listening
"
)
;
Services
.
obs
.
addObserver
(
gSessionHistoryObserver
"
browser
:
purge
-
session
-
history
"
)
;
Services
.
obs
.
addObserver
(
gStoragePressureObserver
"
QuotaManager
:
:
StoragePressure
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
disabled
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
started
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
blocked
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
fullscreen
-
blocked
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
origin
-
blocked
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
policy
-
blocked
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
webapi
-
blocked
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
failed
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
confirmation
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
complete
"
)
;
Services
.
obs
.
addObserver
(
gKeywordURIFixup
"
keyword
-
uri
-
fixup
"
)
;
BrowserOffline
.
init
(
)
;
CanvasPermissionPromptHelper
.
init
(
)
;
WebAuthnPromptHelper
.
init
(
)
;
FullZoom
.
init
(
)
;
PanelUI
.
init
(
shouldSuppressPopupNotifications
)
;
UpdateUrlbarSearchSplitterState
(
)
;
BookmarkingUI
.
init
(
)
;
BrowserSearch
.
delayedStartupInit
(
)
;
gProtectionsHandler
.
init
(
)
;
HomePage
.
delayedStartup
(
)
.
catch
(
Cu
.
reportError
)
;
let
safeMode
=
document
.
getElementById
(
"
helpSafeMode
"
)
;
if
(
Services
.
appinfo
.
inSafeMode
)
{
document
.
l10n
.
setAttributes
(
safeMode
"
menu
-
help
-
exit
-
troubleshoot
-
mode
"
)
;
safeMode
.
setAttribute
(
"
appmenu
-
data
-
l10n
-
id
"
"
appmenu
-
help
-
exit
-
troubleshoot
-
mode
"
)
;
}
gBidiUI
=
isBidiEnabled
(
)
;
if
(
gBidiUI
)
{
document
.
getElementById
(
"
documentDirection
-
separator
"
)
.
hidden
=
false
;
document
.
getElementById
(
"
documentDirection
-
swap
"
)
.
hidden
=
false
;
document
.
getElementById
(
"
textfieldDirection
-
separator
"
)
.
hidden
=
false
;
document
.
getElementById
(
"
textfieldDirection
-
swap
"
)
.
hidden
=
false
;
}
if
(
!
Services
.
prefs
.
getBoolPref
(
"
ui
.
click_hold_context_menus
"
false
)
)
{
SetClickAndHoldHandlers
(
)
;
}
function
initBackForwardButtonTooltip
(
tooltipId
l10nId
shortcutId
)
{
let
shortcut
=
document
.
getElementById
(
shortcutId
)
;
shortcut
=
ShortcutUtils
.
prettifyShortcut
(
shortcut
)
;
let
tooltip
=
document
.
getElementById
(
tooltipId
)
;
document
.
l10n
.
setAttributes
(
tooltip
l10nId
{
shortcut
}
)
;
}
initBackForwardButtonTooltip
(
"
back
-
button
-
tooltip
-
description
"
"
navbar
-
tooltip
-
back
-
2
"
"
goBackKb
"
)
;
initBackForwardButtonTooltip
(
"
forward
-
button
-
tooltip
-
description
"
"
navbar
-
tooltip
-
forward
-
2
"
"
goForwardKb
"
)
;
PlacesToolbarHelper
.
init
(
)
;
ctrlTab
.
readPref
(
)
;
Services
.
prefs
.
addObserver
(
ctrlTab
.
prefName
ctrlTab
)
;
DownloadsButton
.
initializeIndicator
(
)
;
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
{
updateEditUIVisibility
(
)
;
let
placesContext
=
document
.
getElementById
(
"
placesContext
"
)
;
placesContext
.
addEventListener
(
"
popupshowing
"
updateEditUIVisibility
)
;
placesContext
.
addEventListener
(
"
popuphiding
"
updateEditUIVisibility
)
;
}
FullScreen
.
init
(
)
;
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
)
{
MenuTouchModeObserver
.
init
(
)
;
}
if
(
AppConstants
.
MOZ_DATA_REPORTING
)
{
gDataNotificationInfoBar
.
init
(
)
;
}
if
(
!
AppConstants
.
MOZILLA_OFFICIAL
)
{
DevelopmentHelpers
.
init
(
)
;
}
gExtensionsNotifications
.
init
(
)
;
let
wasMinimized
=
window
.
windowState
=
=
window
.
STATE_MINIMIZED
;
window
.
addEventListener
(
"
sizemodechange
"
(
)
=
>
{
let
isMinimized
=
window
.
windowState
=
=
window
.
STATE_MINIMIZED
;
if
(
wasMinimized
!
=
isMinimized
)
{
wasMinimized
=
isMinimized
;
UpdatePopupNotificationsVisibility
(
)
;
}
}
)
;
window
.
addEventListener
(
"
mousemove
"
MousePosTracker
)
;
window
.
addEventListener
(
"
dragover
"
MousePosTracker
)
;
gNavToolbox
.
addEventListener
(
"
customizationstarting
"
CustomizationHandler
)
;
gNavToolbox
.
addEventListener
(
"
aftercustomization
"
CustomizationHandler
)
;
SessionStore
.
promiseInitialized
.
then
(
(
)
=
>
{
if
(
window
.
closed
)
{
return
;
}
RestoreLastSessionObserver
.
init
(
)
;
SidebarUI
.
startDelayedLoad
(
)
;
PanicButtonNotifier
.
init
(
)
;
}
)
;
if
(
BrowserHandler
.
kiosk
)
{
if
(
!
gURLBar
.
readOnly
)
{
window
.
fullScreen
=
true
;
}
}
if
(
Services
.
policies
.
status
=
=
=
Services
.
policies
.
ACTIVE
)
{
if
(
!
Services
.
policies
.
isAllowed
(
"
hideShowMenuBar
"
)
)
{
document
.
getElementById
(
"
toolbar
-
menubar
"
)
.
removeAttribute
(
"
toolbarname
"
)
;
}
let
policies
=
Services
.
policies
.
getActivePolicies
(
)
;
if
(
"
ManagedBookmarks
"
in
policies
)
{
let
managedBookmarks
=
policies
.
ManagedBookmarks
;
let
children
=
managedBookmarks
.
filter
(
child
=
>
!
(
"
toplevel_name
"
in
child
)
)
;
if
(
children
.
length
)
{
let
managedBookmarksButton
=
document
.
createXULElement
(
"
toolbarbutton
"
)
;
managedBookmarksButton
.
setAttribute
(
"
id
"
"
managed
-
bookmarks
"
)
;
managedBookmarksButton
.
setAttribute
(
"
class
"
"
bookmark
-
item
"
)
;
let
toplevel
=
managedBookmarks
.
find
(
element
=
>
"
toplevel_name
"
in
element
)
;
if
(
toplevel
)
{
managedBookmarksButton
.
setAttribute
(
"
label
"
toplevel
.
toplevel_name
)
;
}
else
{
managedBookmarksButton
.
setAttribute
(
"
data
-
l10n
-
id
"
"
managed
-
bookmarks
"
)
;
}
managedBookmarksButton
.
setAttribute
(
"
context
"
"
placesContext
"
)
;
managedBookmarksButton
.
setAttribute
(
"
container
"
"
true
"
)
;
managedBookmarksButton
.
setAttribute
(
"
removable
"
"
false
"
)
;
managedBookmarksButton
.
setAttribute
(
"
type
"
"
menu
"
)
;
let
managedBookmarksPopup
=
document
.
createXULElement
(
"
menupopup
"
)
;
managedBookmarksPopup
.
setAttribute
(
"
id
"
"
managed
-
bookmarks
-
popup
"
)
;
managedBookmarksPopup
.
setAttribute
(
"
oncommand
"
"
PlacesToolbarHelper
.
openManagedBookmark
(
event
)
;
"
)
;
managedBookmarksPopup
.
setAttribute
(
"
ondragover
"
"
event
.
dataTransfer
.
effectAllowed
=
'
none
'
;
"
)
;
managedBookmarksPopup
.
setAttribute
(
"
ondragstart
"
"
PlacesToolbarHelper
.
onDragStartManaged
(
event
)
;
"
)
;
managedBookmarksPopup
.
setAttribute
(
"
onpopupshowing
"
"
PlacesToolbarHelper
.
populateManagedBookmarks
(
this
)
;
"
)
;
managedBookmarksPopup
.
setAttribute
(
"
placespopup
"
"
true
"
)
;
managedBookmarksPopup
.
setAttribute
(
"
is
"
"
places
-
popup
"
)
;
managedBookmarksButton
.
appendChild
(
managedBookmarksPopup
)
;
gNavToolbox
.
palette
.
appendChild
(
managedBookmarksButton
)
;
CustomizableUI
.
ensureWidgetPlacedInWindow
(
"
managed
-
bookmarks
"
window
)
;
if
(
!
CustomizableUI
.
getPlacementOfWidget
(
"
managed
-
bookmarks
"
)
)
{
CustomizableUI
.
addWidgetToArea
(
"
managed
-
bookmarks
"
CustomizableUI
.
AREA_BOOKMARKS
0
)
;
}
}
}
}
CaptivePortalWatcher
.
delayedStartup
(
)
;
SessionStore
.
promiseAllWindowsRestored
.
then
(
(
)
=
>
{
this
.
_schedulePerWindowIdleTasks
(
)
;
document
.
documentElement
.
setAttribute
(
"
sessionrestored
"
"
true
"
)
;
}
)
;
this
.
delayedStartupFinished
=
true
;
_resolveDelayedStartup
(
)
;
Services
.
obs
.
notifyObservers
(
window
"
browser
-
delayed
-
startup
-
finished
"
)
;
TelemetryTimestamps
.
add
(
"
delayedStartupFinished
"
)
;
}
get
firstContentWindowPaintPromise
(
)
{
return
this
.
_firstContentWindowPaintDeferred
.
promise
;
}
_setInitialFocus
(
)
{
let
initiallyFocusedElement
=
document
.
commandDispatcher
.
focusedElement
;
let
shouldRemoveFocusedAttribute
=
true
;
this
.
_callWithURIToLoad
(
uriToLoad
=
>
{
const
aboutWelcomeSkipUrlBarFocus
=
uriToLoad
=
=
"
about
:
welcome
"
&
&
NimbusFeatures
.
aboutwelcome
.
getVariable
(
"
skipFocus
"
)
;
if
(
(
isBlankPageURL
(
uriToLoad
)
&
&
!
aboutWelcomeSkipUrlBarFocus
)
|
|
uriToLoad
=
=
"
about
:
privatebrowsing
"
|
|
this
.
getTabToAdopt
(
)
?
.
isEmpty
)
{
gURLBar
.
select
(
)
;
shouldRemoveFocusedAttribute
=
false
;
return
;
}
let
promise
=
gBrowser
.
selectedBrowser
.
isRemoteBrowser
?
this
.
_firstContentWindowPaintDeferred
.
promise
:
Promise
.
resolve
(
)
;
promise
.
then
(
(
)
=
>
{
if
(
document
.
commandDispatcher
.
focusedElement
=
=
initiallyFocusedElement
)
{
gBrowser
.
selectedBrowser
.
focus
(
)
;
}
}
)
;
}
)
;
if
(
shouldRemoveFocusedAttribute
)
{
window
.
requestAnimationFrame
(
(
)
=
>
{
if
(
shouldRemoveFocusedAttribute
)
{
gURLBar
.
removeAttribute
(
"
focused
"
)
;
}
}
)
;
}
}
_handleURIToLoad
(
)
{
this
.
_callWithURIToLoad
(
uriToLoad
=
>
{
if
(
!
uriToLoad
)
{
return
;
}
if
(
Array
.
isArray
(
uriToLoad
)
)
{
try
{
gBrowser
.
loadTabs
(
uriToLoad
{
inBackground
:
false
replace
:
true
userContextId
:
window
.
arguments
[
5
]
triggeringPrincipal
:
window
.
arguments
[
8
]
|
|
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
allowInheritPrincipal
:
window
.
arguments
[
9
]
csp
:
window
.
arguments
[
10
]
fromExternal
:
true
}
)
;
}
catch
(
e
)
{
}
}
else
if
(
window
.
arguments
.
length
>
=
3
)
{
let
userContextId
=
window
.
arguments
[
5
]
!
=
undefined
?
window
.
arguments
[
5
]
:
Ci
.
nsIScriptSecurityManager
.
DEFAULT_USER_CONTEXT_ID
;
let
hasValidUserGestureActivation
=
undefined
;
let
fromExternal
=
undefined
;
let
globalHistoryOptions
=
undefined
;
if
(
window
.
arguments
[
1
]
)
{
if
(
!
(
window
.
arguments
[
1
]
instanceof
Ci
.
nsIPropertyBag2
)
)
{
throw
new
Error
(
"
window
.
arguments
[
1
]
must
be
null
or
Ci
.
nsIPropertyBag2
!
"
)
;
}
let
extraOptions
=
window
.
arguments
[
1
]
;
if
(
extraOptions
.
hasKey
(
"
hasValidUserGestureActivation
"
)
)
{
hasValidUserGestureActivation
=
extraOptions
.
getPropertyAsBool
(
"
hasValidUserGestureActivation
"
)
;
}
if
(
extraOptions
.
hasKey
(
"
fromExternal
"
)
)
{
fromExternal
=
extraOptions
.
getPropertyAsBool
(
"
fromExternal
"
)
;
}
if
(
extraOptions
.
hasKey
(
"
triggeringSponsoredURL
"
)
)
{
globalHistoryOptions
=
{
triggeringSponsoredURL
:
extraOptions
.
getPropertyAsACString
(
"
triggeringSponsoredURL
"
)
}
;
if
(
extraOptions
.
hasKey
(
"
triggeringSponsoredURLVisitTimeMS
"
)
)
{
globalHistoryOptions
.
triggeringSponsoredURLVisitTimeMS
=
extraOptions
.
getPropertyAsUint64
(
"
triggeringSponsoredURLVisitTimeMS
"
)
;
}
}
}
try
{
openLinkIn
(
uriToLoad
"
current
"
{
referrerInfo
:
window
.
arguments
[
2
]
|
|
null
postData
:
window
.
arguments
[
3
]
|
|
null
allowThirdPartyFixup
:
window
.
arguments
[
4
]
|
|
false
userContextId
originPrincipal
:
window
.
arguments
[
6
]
originStoragePrincipal
:
window
.
arguments
[
7
]
triggeringPrincipal
:
window
.
arguments
[
8
]
allowInheritPrincipal
:
window
.
arguments
[
9
]
!
=
=
false
csp
:
window
.
arguments
[
10
]
forceAboutBlankViewerInCurrent
:
!
!
window
.
arguments
[
6
]
hasValidUserGestureActivation
fromExternal
globalHistoryOptions
}
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
window
.
focus
(
)
;
}
else
{
loadOneOrMoreURIs
(
uriToLoad
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
null
)
;
}
}
)
;
}
_schedulePerWindowIdleTasks
(
)
{
if
(
window
.
closed
)
{
return
;
}
function
scheduleIdleTask
(
func
options
)
{
requestIdleCallback
(
function
idleTaskRunner
(
)
{
if
(
!
window
.
closed
)
{
func
(
)
;
}
}
options
)
;
}
scheduleIdleTask
(
(
)
=
>
{
gSync
.
init
(
)
;
}
)
;
scheduleIdleTask
(
(
)
=
>
{
let
reduceMotionQuery
=
window
.
matchMedia
(
"
(
prefers
-
reduced
-
motion
:
reduce
)
"
)
;
function
readSetting
(
)
{
gReduceMotionSetting
=
reduceMotionQuery
.
matches
;
}
reduceMotionQuery
.
addListener
(
readSetting
)
;
readSetting
(
)
;
}
)
;
scheduleIdleTask
(
(
)
=
>
{
gGestureSupport
.
init
(
true
)
;
gHistorySwipeAnimation
.
init
(
)
;
}
)
;
scheduleIdleTask
(
(
)
=
>
{
gBrowserThumbnails
.
init
(
)
;
}
)
;
scheduleIdleTask
(
(
)
=
>
{
try
{
DownloadsCommon
.
initializeAllDataLinks
(
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
DownloadsTaskbar
.
jsm
"
)
.
DownloadsTaskbar
.
registerIndicator
(
window
)
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
DownloadsMacFinderProgress
.
jsm
"
)
.
DownloadsMacFinderProgress
.
register
(
)
;
}
Services
.
telemetry
.
setEventRecordingEnabled
(
"
downloads
"
true
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
{
timeout
:
10000
}
)
;
if
(
Win7Features
)
{
scheduleIdleTask
(
(
)
=
>
Win7Features
.
onOpenWindow
(
)
)
;
}
scheduleIdleTask
(
async
(
)
=
>
{
NewTabPagePreloading
.
maybeCreatePreloadedBrowser
(
window
)
;
}
)
;
scheduleIdleTask
(
(
)
=
>
{
gGfxUtils
.
init
(
)
;
}
)
;
scheduleIdleTask
(
(
)
=
>
{
this
.
idleTaskPromiseResolve
(
)
;
Services
.
obs
.
notifyObservers
(
window
"
browser
-
idle
-
startup
-
tasks
-
finished
"
)
;
}
)
;
}
get
uriToLoadPromise
(
)
{
delete
this
.
uriToLoadPromise
;
return
(
this
.
uriToLoadPromise
=
(
function
(
)
{
let
uri
=
window
.
arguments
?
.
[
0
]
;
if
(
!
uri
|
|
window
.
XULElement
.
isInstance
(
uri
)
)
{
return
null
;
}
let
defaultArgs
=
BrowserHandler
.
defaultArgs
;
if
(
uri
!
=
defaultArgs
)
{
AboutNewTab
.
noteNonDefaultStartup
(
)
;
if
(
uri
instanceof
Ci
.
nsIArray
)
{
return
Array
.
from
(
uri
.
enumerate
(
Ci
.
nsISupportsString
)
supportStr
=
>
supportStr
.
data
)
;
}
else
if
(
uri
instanceof
Ci
.
nsISupportsString
)
{
return
uri
.
data
;
}
return
uri
;
}
let
willOverride
=
SessionStartup
.
willOverrideHomepage
;
if
(
typeof
willOverride
=
=
"
boolean
"
)
{
return
willOverride
?
null
:
uri
;
}
return
willOverride
.
then
(
willOverrideHomepage
=
>
willOverrideHomepage
?
null
:
uri
)
;
}
)
(
)
)
;
}
_callWithURIToLoad
(
callback
)
{
let
uriToLoad
=
this
.
uriToLoadPromise
;
if
(
uriToLoad
&
&
uriToLoad
.
then
)
{
uriToLoad
.
then
(
callback
)
;
}
else
{
callback
(
uriToLoad
)
;
}
}
onUnload
(
)
{
gUIDensity
.
uninit
(
)
;
TabsInTitlebar
.
uninit
(
)
;
ToolbarIconColor
.
uninit
(
)
;
if
(
!
this
.
_loadHandled
)
{
return
;
}
CombinedStopReload
.
uninit
(
)
;
gGestureSupport
.
init
(
false
)
;
gHistorySwipeAnimation
.
uninit
(
)
;
FullScreen
.
uninit
(
)
;
gSync
.
uninit
(
)
;
gExtensionsNotifications
.
uninit
(
)
;
try
{
gBrowser
.
removeProgressListener
(
window
.
XULBrowserWindow
)
;
gBrowser
.
removeTabsProgressListener
(
window
.
TabsProgressListener
)
;
}
catch
(
ex
)
{
}
PlacesToolbarHelper
.
uninit
(
)
;
BookmarkingUI
.
uninit
(
)
;
TabletModeUpdater
.
uninit
(
)
;
gTabletModePageCounter
.
finish
(
)
;
CaptivePortalWatcher
.
uninit
(
)
;
SidebarUI
.
uninit
(
)
;
DownloadsButton
.
uninit
(
)
;
if
(
gToolbarKeyNavEnabled
)
{
ToolbarKeyboardNavigator
.
uninit
(
)
;
}
BrowserSearch
.
uninit
(
)
;
NewTabPagePreloading
.
removePreloadedBrowser
(
window
)
;
FirefoxViewHandler
.
uninit
(
)
;
if
(
this
.
_boundDelayedStartup
)
{
this
.
_cancelDelayedStartup
(
)
;
}
else
{
if
(
Win7Features
)
{
Win7Features
.
onCloseWindow
(
)
;
}
Services
.
prefs
.
removeObserver
(
ctrlTab
.
prefName
ctrlTab
)
;
ctrlTab
.
uninit
(
)
;
gBrowserThumbnails
.
uninit
(
)
;
gProtectionsHandler
.
uninit
(
)
;
FullZoom
.
destroy
(
)
;
Services
.
obs
.
removeObserver
(
gIdentityHandler
"
perm
-
changed
"
)
;
Services
.
obs
.
removeObserver
(
gRemoteControl
"
devtools
-
socket
"
)
;
Services
.
obs
.
removeObserver
(
gRemoteControl
"
marionette
-
listening
"
)
;
Services
.
obs
.
removeObserver
(
gRemoteControl
"
remote
-
listening
"
)
;
Services
.
obs
.
removeObserver
(
gSessionHistoryObserver
"
browser
:
purge
-
session
-
history
"
)
;
Services
.
obs
.
removeObserver
(
gStoragePressureObserver
"
QuotaManager
:
:
StoragePressure
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
disabled
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
started
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
blocked
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
fullscreen
-
blocked
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
origin
-
blocked
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
policy
-
blocked
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
webapi
-
blocked
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
failed
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
confirmation
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
complete
"
)
;
Services
.
obs
.
removeObserver
(
gKeywordURIFixup
"
keyword
-
uri
-
fixup
"
)
;
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
)
{
MenuTouchModeObserver
.
uninit
(
)
;
}
BrowserOffline
.
uninit
(
)
;
CanvasPermissionPromptHelper
.
uninit
(
)
;
WebAuthnPromptHelper
.
uninit
(
)
;
PanelUI
.
uninit
(
)
;
}
gBrowser
.
destroy
(
)
;
window
.
XULBrowserWindow
=
null
;
window
.
docShell
.
treeOwner
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIAppWindow
)
.
XULBrowserWindow
=
null
;
window
.
browserDOMWindow
=
null
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
gBrowserInit
"
_firstContentWindowPaintDeferred
"
(
)
=
>
PromiseUtils
.
defer
(
)
)
;
gBrowserInit
.
idleTasksFinishedPromise
=
new
Promise
(
resolve
=
>
{
gBrowserInit
.
idleTaskPromiseResolve
=
resolve
;
}
)
;
function
HandleAppCommandEvent
(
evt
)
{
switch
(
evt
.
command
)
{
case
"
Back
"
:
BrowserBack
(
)
;
break
;
case
"
Forward
"
:
BrowserForward
(
)
;
break
;
case
"
Reload
"
:
BrowserReloadSkipCache
(
)
;
break
;
case
"
Stop
"
:
if
(
XULBrowserWindow
.
stopCommand
.
getAttribute
(
"
disabled
"
)
!
=
"
true
"
)
{
BrowserStop
(
)
;
}
break
;
case
"
Search
"
:
BrowserSearch
.
webSearch
(
)
;
break
;
case
"
Bookmarks
"
:
SidebarUI
.
toggle
(
"
viewBookmarksSidebar
"
)
;
break
;
case
"
Home
"
:
BrowserHome
(
)
;
break
;
case
"
New
"
:
BrowserOpenTab
(
)
;
break
;
case
"
Close
"
:
BrowserCloseTabOrWindow
(
)
;
break
;
case
"
Find
"
:
gLazyFindCommand
(
"
onFindCommand
"
)
;
break
;
case
"
Help
"
:
openHelpLink
(
"
firefox
-
help
"
)
;
break
;
case
"
Open
"
:
BrowserOpenFileWindow
(
)
;
break
;
case
"
Print
"
:
PrintUtils
.
startPrintWindow
(
gBrowser
.
selectedBrowser
.
browsingContext
)
;
break
;
case
"
Save
"
:
saveBrowser
(
gBrowser
.
selectedBrowser
)
;
break
;
case
"
SendMail
"
:
MailIntegration
.
sendLinkForBrowser
(
gBrowser
.
selectedBrowser
)
;
break
;
default
:
return
;
}
evt
.
stopPropagation
(
)
;
evt
.
preventDefault
(
)
;
}
function
gotoHistoryIndex
(
aEvent
)
{
aEvent
=
getRootEvent
(
aEvent
)
;
let
index
=
aEvent
.
target
.
getAttribute
(
"
index
"
)
;
if
(
!
index
)
{
return
false
;
}
let
where
=
whereToOpenLink
(
aEvent
)
;
if
(
where
=
=
"
current
"
)
{
try
{
gBrowser
.
gotoIndex
(
index
)
;
}
catch
(
ex
)
{
return
false
;
}
return
true
;
}
let
historyindex
=
aEvent
.
target
.
getAttribute
(
"
historyindex
"
)
;
duplicateTabIn
(
gBrowser
.
selectedTab
where
Number
(
historyindex
)
)
;
return
true
;
}
function
BrowserForward
(
aEvent
)
{
let
where
=
whereToOpenLink
(
aEvent
false
true
)
;
if
(
where
=
=
"
current
"
)
{
try
{
gBrowser
.
goForward
(
)
;
}
catch
(
ex
)
{
}
}
else
{
duplicateTabIn
(
gBrowser
.
selectedTab
where
1
)
;
}
}
function
BrowserBack
(
aEvent
)
{
let
where
=
whereToOpenLink
(
aEvent
false
true
)
;
if
(
where
=
=
"
current
"
)
{
try
{
gBrowser
.
goBack
(
)
;
}
catch
(
ex
)
{
}
}
else
{
duplicateTabIn
(
gBrowser
.
selectedTab
where
-
1
)
;
}
}
function
BrowserHandleBackspace
(
)
{
switch
(
Services
.
prefs
.
getIntPref
(
"
browser
.
backspace_action
"
)
)
{
case
0
:
BrowserBack
(
)
;
break
;
case
1
:
goDoCommand
(
"
cmd_scrollPageUp
"
)
;
break
;
}
}
function
BrowserHandleShiftBackspace
(
)
{
switch
(
Services
.
prefs
.
getIntPref
(
"
browser
.
backspace_action
"
)
)
{
case
0
:
BrowserForward
(
)
;
break
;
case
1
:
goDoCommand
(
"
cmd_scrollPageDown
"
)
;
break
;
}
}
function
BrowserStop
(
)
{
gBrowser
.
webNavigation
.
stop
(
Ci
.
nsIWebNavigation
.
STOP_ALL
)
;
}
function
BrowserReloadOrDuplicate
(
aEvent
)
{
aEvent
=
getRootEvent
(
aEvent
)
;
let
accelKeyPressed
=
AppConstants
.
platform
=
=
"
macosx
"
?
aEvent
.
metaKey
:
aEvent
.
ctrlKey
;
var
backgroundTabModifier
=
aEvent
.
button
=
=
1
|
|
accelKeyPressed
;
if
(
aEvent
.
shiftKey
&
&
!
backgroundTabModifier
)
{
BrowserReloadSkipCache
(
)
;
return
;
}
let
where
=
whereToOpenLink
(
aEvent
false
true
)
;
if
(
where
=
=
"
current
"
)
{
BrowserReload
(
)
;
}
else
{
duplicateTabIn
(
gBrowser
.
selectedTab
where
)
;
}
}
function
BrowserReload
(
)
{
if
(
gBrowser
.
currentURI
.
schemeIs
(
"
view
-
source
"
)
)
{
return
BrowserReloadSkipCache
(
)
;
}
const
reloadFlags
=
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_NONE
;
BrowserReloadWithFlags
(
reloadFlags
)
;
}
const
kSkipCacheFlags
=
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_PROXY
|
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_CACHE
;
function
BrowserReloadSkipCache
(
)
{
BrowserReloadWithFlags
(
kSkipCacheFlags
)
;
}
function
BrowserHome
(
aEvent
)
{
if
(
aEvent
&
&
"
button
"
in
aEvent
&
&
aEvent
.
button
=
=
2
)
{
return
;
}
var
homePage
=
HomePage
.
get
(
window
)
;
var
where
=
whereToOpenLink
(
aEvent
false
true
)
;
var
urls
;
var
notifyObservers
;
if
(
where
=
=
"
current
"
&
&
(
gBrowser
?
.
selectedTab
.
pinned
|
|
gBrowser
?
.
selectedTab
.
hidden
)
)
{
where
=
"
tab
"
;
}
switch
(
where
)
{
case
"
current
"
:
if
(
isInitialPage
(
homePage
)
)
{
gBrowser
.
selectedBrowser
.
initialPageLoadedFromUserAction
=
homePage
;
}
loadOneOrMoreURIs
(
homePage
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
null
)
;
if
(
isBlankPageURL
(
homePage
)
)
{
gURLBar
.
select
(
)
;
}
else
{
gBrowser
.
selectedBrowser
.
focus
(
)
;
}
notifyObservers
=
true
;
aEvent
?
.
preventDefault
(
)
;
break
;
case
"
tabshifted
"
:
case
"
tab
"
:
urls
=
homePage
.
split
(
"
|
"
)
;
var
loadInBackground
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
loadBookmarksInBackground
"
false
)
;
notifyObservers
=
!
loadInBackground
;
gBrowser
.
loadTabs
(
urls
{
inBackground
:
loadInBackground
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
csp
:
null
}
)
;
if
(
!
loadInBackground
)
{
if
(
isBlankPageURL
(
homePage
)
)
{
gURLBar
.
select
(
)
;
}
else
{
gBrowser
.
selectedBrowser
.
focus
(
)
;
}
}
aEvent
?
.
preventDefault
(
)
;
break
;
case
"
window
"
:
notifyObservers
=
false
;
OpenBrowserWindow
(
)
;
aEvent
?
.
preventDefault
(
)
;
break
;
}
if
(
notifyObservers
)
{
Services
.
obs
.
notifyObservers
(
null
"
browser
-
open
-
homepage
-
start
"
)
;
}
}
function
loadOneOrMoreURIs
(
aURIString
aTriggeringPrincipal
aCsp
)
{
if
(
window
.
location
.
href
!
=
AppConstants
.
BROWSER_CHROME_URL
)
{
window
.
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
"
all
dialog
=
no
"
aURIString
)
;
return
;
}
try
{
gBrowser
.
loadTabs
(
aURIString
.
split
(
"
|
"
)
{
inBackground
:
false
replace
:
true
triggeringPrincipal
:
aTriggeringPrincipal
csp
:
aCsp
}
)
;
}
catch
(
e
)
{
}
}
function
openLocation
(
event
)
{
if
(
window
.
location
.
href
=
=
AppConstants
.
BROWSER_CHROME_URL
)
{
gURLBar
.
select
(
)
;
gURLBar
.
view
.
autoOpen
(
{
event
}
)
;
return
;
}
let
win
=
getTopWin
(
)
;
if
(
win
)
{
win
.
focus
(
)
;
win
.
openLocation
(
)
;
return
;
}
window
.
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
"
chrome
all
dialog
=
no
"
BROWSER_NEW_TAB_URL
)
;
}
function
BrowserOpenTab
(
event
)
{
let
where
=
"
tab
"
;
let
relatedToCurrent
=
false
;
if
(
event
)
{
where
=
whereToOpenLink
(
event
false
true
)
;
switch
(
where
)
{
case
"
tab
"
:
case
"
tabshifted
"
:
relatedToCurrent
=
true
;
break
;
case
"
current
"
:
where
=
"
tab
"
;
break
;
}
}
Services
.
obs
.
notifyObservers
(
{
wrappedJSObject
:
new
Promise
(
resolve
=
>
{
openTrustedLinkIn
(
BROWSER_NEW_TAB_URL
where
{
relatedToCurrent
resolveOnNewTabCreated
:
resolve
}
)
;
}
)
}
"
browser
-
open
-
newtab
-
start
"
)
;
}
var
gLastOpenDirectory
=
{
_lastDir
:
null
get
path
(
)
{
if
(
!
this
.
_lastDir
|
|
!
this
.
_lastDir
.
exists
(
)
)
{
try
{
this
.
_lastDir
=
Services
.
prefs
.
getComplexValue
(
"
browser
.
open
.
lastDir
"
Ci
.
nsIFile
)
;
if
(
!
this
.
_lastDir
.
exists
(
)
)
{
this
.
_lastDir
=
null
;
}
}
catch
(
e
)
{
}
}
return
this
.
_lastDir
;
}
set
path
(
val
)
{
try
{
if
(
!
val
|
|
!
val
.
isDirectory
(
)
)
{
return
;
}
}
catch
(
e
)
{
return
;
}
this
.
_lastDir
=
val
.
clone
(
)
;
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
Services
.
prefs
.
setComplexValue
(
"
browser
.
open
.
lastDir
"
Ci
.
nsIFile
this
.
_lastDir
)
;
}
}
reset
(
)
{
this
.
_lastDir
=
null
;
}
}
;
function
BrowserOpenFileWindow
(
)
{
try
{
const
nsIFilePicker
=
Ci
.
nsIFilePicker
;
let
fp
=
Cc
[
"
mozilla
.
org
/
filepicker
;
1
"
]
.
createInstance
(
nsIFilePicker
)
;
let
fpCallback
=
function
fpCallback_done
(
aResult
)
{
if
(
aResult
=
=
nsIFilePicker
.
returnOK
)
{
try
{
if
(
fp
.
file
)
{
gLastOpenDirectory
.
path
=
fp
.
file
.
parent
.
QueryInterface
(
Ci
.
nsIFile
)
;
}
}
catch
(
ex
)
{
}
openTrustedLinkIn
(
fp
.
fileURL
.
spec
"
current
"
)
;
}
}
;
fp
.
init
(
window
gNavigatorBundle
.
getString
(
"
openFile
"
)
nsIFilePicker
.
modeOpen
)
;
fp
.
appendFilters
(
nsIFilePicker
.
filterAll
|
nsIFilePicker
.
filterText
|
nsIFilePicker
.
filterImages
|
nsIFilePicker
.
filterXML
|
nsIFilePicker
.
filterHTML
)
;
fp
.
displayDirectory
=
gLastOpenDirectory
.
path
;
fp
.
open
(
fpCallback
)
;
}
catch
(
ex
)
{
}
}
function
BrowserCloseTabOrWindow
(
event
)
{
if
(
window
.
location
.
href
!
=
AppConstants
.
BROWSER_CHROME_URL
)
{
closeWindow
(
true
)
;
return
;
}
if
(
gBrowser
.
multiSelectedTabsCount
)
{
gBrowser
.
removeMultiSelectedTabs
(
)
;
return
;
}
if
(
event
&
&
(
event
.
ctrlKey
|
|
event
.
metaKey
|
|
event
.
altKey
)
&
&
gBrowser
.
selectedTab
.
pinned
)
{
if
(
gBrowser
.
visibleTabs
.
length
>
gBrowser
.
_numPinnedTabs
)
{
gBrowser
.
tabContainer
.
selectedIndex
=
gBrowser
.
_numPinnedTabs
;
}
return
;
}
gBrowser
.
removeCurrentTab
(
{
animate
:
true
}
)
;
}
function
BrowserTryToCloseWindow
(
event
)
{
if
(
WindowIsClosing
(
event
)
)
{
window
.
close
(
)
;
}
}
function
loadURI
(
uri
referrerInfo
postData
allowThirdPartyFixup
userContextId
originPrincipal
originStoragePrincipal
forceAboutBlankViewerInCurrent
triggeringPrincipal
allowInheritPrincipal
=
false
csp
=
null
)
{
if
(
!
triggeringPrincipal
)
{
throw
new
Error
(
"
Must
load
with
a
triggering
Principal
"
)
;
}
try
{
openLinkIn
(
uri
"
current
"
{
referrerInfo
postData
allowThirdPartyFixup
userContextId
originPrincipal
originStoragePrincipal
triggeringPrincipal
csp
forceAboutBlankViewerInCurrent
allowInheritPrincipal
}
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
function
getLoadContext
(
)
{
return
window
.
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
;
}
function
readFromClipboard
(
)
{
var
url
;
try
{
var
trans
=
Cc
[
"
mozilla
.
org
/
widget
/
transferable
;
1
"
]
.
createInstance
(
Ci
.
nsITransferable
)
;
trans
.
init
(
getLoadContext
(
)
)
;
trans
.
addDataFlavor
(
"
text
/
unicode
"
)
;
if
(
Services
.
clipboard
.
supportsSelectionClipboard
(
)
)
{
Services
.
clipboard
.
getData
(
trans
Services
.
clipboard
.
kSelectionClipboard
)
;
}
else
{
Services
.
clipboard
.
getData
(
trans
Services
.
clipboard
.
kGlobalClipboard
)
;
}
var
data
=
{
}
;
trans
.
getTransferData
(
"
text
/
unicode
"
data
)
;
if
(
data
)
{
data
=
data
.
value
.
QueryInterface
(
Ci
.
nsISupportsString
)
;
url
=
data
.
data
;
}
}
catch
(
ex
)
{
}
return
url
;
}
async
function
BrowserViewSourceOfDocument
(
args
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
view_source
.
editor
.
external
"
)
)
{
try
{
await
top
.
gViewSourceUtils
.
openInExternalEditor
(
args
)
;
return
;
}
catch
(
data
)
{
}
}
let
tabBrowser
=
gBrowser
;
let
preferredRemoteType
;
let
initialBrowsingContextGroupId
;
if
(
args
.
browser
)
{
preferredRemoteType
=
args
.
browser
.
remoteType
;
initialBrowsingContextGroupId
=
args
.
browser
.
browsingContext
.
group
.
id
;
}
else
{
if
(
!
tabBrowser
)
{
throw
new
Error
(
"
BrowserViewSourceOfDocument
should
be
passed
the
"
+
"
subject
browser
if
called
from
a
window
without
"
+
"
gBrowser
defined
.
"
)
;
}
var
oa
=
E10SUtils
.
predictOriginAttributes
(
{
window
}
)
;
preferredRemoteType
=
E10SUtils
.
getRemoteTypeForURI
(
args
.
URL
gMultiProcessBrowser
gFissionBrowser
E10SUtils
.
DEFAULT_REMOTE_TYPE
null
oa
)
;
}
if
(
!
tabBrowser
|
|
!
window
.
toolbar
.
visible
)
{
let
browserWindow
=
BrowserWindowTracker
.
getTopWindow
(
)
;
tabBrowser
=
browserWindow
.
gBrowser
;
}
const
inNewWindow
=
!
Services
.
prefs
.
getBoolPref
(
"
view_source
.
tab
"
)
;
let
tab
=
tabBrowser
.
loadOneTab
(
"
about
:
blank
"
{
relatedToCurrent
:
true
inBackground
:
inNewWindow
skipAnimation
:
inNewWindow
preferredRemoteType
initialBrowsingContextGroupId
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
skipLoad
:
true
}
)
;
args
.
viewSourceBrowser
=
tabBrowser
.
getBrowserForTab
(
tab
)
;
top
.
gViewSourceUtils
.
viewSourceInBrowser
(
args
)
;
if
(
inNewWindow
)
{
tabBrowser
.
hideTab
(
tab
)
;
tabBrowser
.
replaceTabWithWindow
(
tab
)
;
}
}
function
BrowserViewSource
(
browser
)
{
BrowserViewSourceOfDocument
(
{
browser
outerWindowID
:
browser
.
outerWindowID
URL
:
browser
.
currentURI
.
spec
}
)
;
}
function
BrowserPageInfo
(
documentURL
initialTab
imageElement
browsingContext
browser
)
{
if
(
HTMLDocument
.
isInstance
(
documentURL
)
)
{
Deprecated
.
warning
(
"
Please
pass
the
location
URL
instead
of
the
document
"
+
"
to
BrowserPageInfo
(
)
as
the
first
argument
.
"
"
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1238180
"
)
;
documentURL
=
documentURL
.
location
;
}
let
args
=
{
initialTab
imageElement
browsingContext
browser
}
;
documentURL
=
documentURL
|
|
window
.
gBrowser
.
selectedBrowser
.
currentURI
.
spec
;
let
isPrivate
=
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
;
for
(
let
currentWindow
of
Services
.
wm
.
getEnumerator
(
"
Browser
:
page
-
info
"
)
)
{
if
(
currentWindow
.
closed
)
{
continue
;
}
if
(
currentWindow
.
document
.
documentElement
.
getAttribute
(
"
relatedUrl
"
)
=
=
documentURL
&
&
PrivateBrowsingUtils
.
isWindowPrivate
(
currentWindow
)
=
=
isPrivate
)
{
currentWindow
.
focus
(
)
;
currentWindow
.
resetPageInfo
(
args
)
;
return
currentWindow
;
}
}
let
options
=
"
chrome
toolbar
dialog
=
no
resizable
"
;
if
(
isPrivate
)
{
options
+
=
"
private
"
;
}
return
openDialog
(
"
chrome
:
/
/
browser
/
content
/
pageinfo
/
pageInfo
.
xhtml
"
"
"
options
args
)
;
}
function
UpdateUrlbarSearchSplitterState
(
)
{
var
splitter
=
document
.
getElementById
(
"
urlbar
-
search
-
splitter
"
)
;
var
urlbar
=
document
.
getElementById
(
"
urlbar
-
container
"
)
;
var
searchbar
=
document
.
getElementById
(
"
search
-
container
"
)
;
if
(
document
.
documentElement
.
getAttribute
(
"
customizing
"
)
=
=
"
true
"
)
{
if
(
splitter
)
{
splitter
.
remove
(
)
;
}
return
;
}
if
(
splitter
&
&
(
(
splitter
.
nextElementSibling
=
=
searchbar
&
&
splitter
.
previousElementSibling
=
=
urlbar
)
|
|
(
splitter
.
nextElementSibling
=
=
urlbar
&
&
splitter
.
previousElementSibling
=
=
searchbar
)
)
)
{
return
;
}
var
ibefore
=
null
;
if
(
urlbar
&
&
searchbar
)
{
if
(
urlbar
.
nextElementSibling
=
=
searchbar
)
{
ibefore
=
searchbar
;
}
else
if
(
searchbar
.
nextElementSibling
=
=
urlbar
)
{
ibefore
=
urlbar
;
}
}
if
(
ibefore
)
{
if
(
!
splitter
)
{
splitter
=
document
.
createXULElement
(
"
splitter
"
)
;
splitter
.
id
=
"
urlbar
-
search
-
splitter
"
;
splitter
.
setAttribute
(
"
resizebefore
"
"
flex
"
)
;
splitter
.
setAttribute
(
"
resizeafter
"
"
flex
"
)
;
splitter
.
setAttribute
(
"
skipintoolbarset
"
"
true
"
)
;
splitter
.
setAttribute
(
"
overflows
"
"
false
"
)
;
splitter
.
className
=
"
chromeclass
-
toolbar
-
additional
"
;
}
urlbar
.
parentNode
.
insertBefore
(
splitter
ibefore
)
;
}
else
if
(
splitter
)
{
splitter
.
remove
(
)
;
}
}
function
UpdatePopupNotificationsVisibility
(
)
{
if
(
!
Object
.
getOwnPropertyDescriptor
(
window
"
PopupNotifications
"
)
.
get
)
{
PopupNotifications
.
anchorVisibilityChange
(
)
;
}
PanelUI
?
.
updateNotifications
(
)
;
}
function
PageProxyClickHandler
(
aEvent
)
{
if
(
aEvent
.
button
=
=
1
&
&
Services
.
prefs
.
getBoolPref
(
"
middlemouse
.
paste
"
)
)
{
middleMousePaste
(
aEvent
)
;
}
}
var
BrowserOnClick
=
{
ignoreWarningLink
(
reason
blockedInfo
browsingContext
)
{
let
triggeringPrincipal
=
blockedInfo
.
triggeringPrincipal
|
|
_createNullPrincipalFromTabUserContextId
(
)
;
browsingContext
.
loadURI
(
blockedInfo
.
uri
{
triggeringPrincipal
flags
:
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_CLASSIFIER
}
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
Services
.
io
.
newURI
(
blockedInfo
.
uri
)
browsingContext
.
currentWindowGlobal
.
documentPrincipal
.
originAttributes
)
;
Services
.
perms
.
addFromPrincipal
(
principal
"
safe
-
browsing
"
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
Ci
.
nsIPermissionManager
.
EXPIRE_SESSION
)
;
let
buttons
=
[
{
label
:
gNavigatorBundle
.
getString
(
"
safebrowsing
.
getMeOutOfHereButton
.
label
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
safebrowsing
.
getMeOutOfHereButton
.
accessKey
"
)
callback
(
)
{
getMeOutOfHere
(
browsingContext
)
;
}
}
]
;
let
title
;
if
(
reason
=
=
=
"
malware
"
)
{
let
reportUrl
=
gSafeBrowsing
.
getReportURL
(
"
MalwareMistake
"
blockedInfo
)
;
title
=
gNavigatorBundle
.
getString
(
"
safebrowsing
.
reportedAttackSite
"
)
;
if
(
reportUrl
)
{
buttons
[
1
]
=
{
label
:
gNavigatorBundle
.
getString
(
"
safebrowsing
.
notAnAttackButton
.
label
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
safebrowsing
.
notAnAttackButton
.
accessKey
"
)
callback
(
)
{
openTrustedLinkIn
(
reportUrl
"
tab
"
)
;
}
}
;
}
}
else
if
(
reason
=
=
=
"
phishing
"
)
{
let
reportUrl
=
gSafeBrowsing
.
getReportURL
(
"
PhishMistake
"
blockedInfo
)
;
title
=
gNavigatorBundle
.
getString
(
"
safebrowsing
.
deceptiveSite
"
)
;
if
(
reportUrl
)
{
buttons
[
1
]
=
{
label
:
gNavigatorBundle
.
getString
(
"
safebrowsing
.
notADeceptiveSiteButton
.
label
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
safebrowsing
.
notADeceptiveSiteButton
.
accessKey
"
)
callback
(
)
{
openTrustedLinkIn
(
reportUrl
"
tab
"
)
;
}
}
;
}
}
else
if
(
reason
=
=
=
"
unwanted
"
)
{
title
=
gNavigatorBundle
.
getString
(
"
safebrowsing
.
reportedUnwantedSite
"
)
;
}
else
if
(
reason
=
=
=
"
harmful
"
)
{
title
=
gNavigatorBundle
.
getString
(
"
safebrowsing
.
reportedHarmfulSite
"
)
;
}
SafeBrowsingNotificationBox
.
show
(
title
buttons
)
;
}
}
;
function
getMeOutOfHere
(
browsingContext
)
{
browsingContext
.
top
.
loadURI
(
getDefaultHomePage
(
)
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
}
function
getDefaultHomePage
(
)
{
let
url
=
BROWSER_NEW_TAB_URL
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
return
url
;
}
url
=
HomePage
.
getDefault
(
)
;
if
(
url
.
includes
(
"
|
"
)
)
{
url
=
url
.
split
(
"
|
"
)
[
0
]
;
}
return
url
;
}
function
BrowserFullScreen
(
)
{
window
.
fullScreen
=
!
window
.
fullScreen
|
|
BrowserHandler
.
kiosk
;
}
function
BrowserReloadWithFlags
(
reloadFlags
)
{
let
unchangedRemoteness
=
[
]
;
for
(
let
tab
of
gBrowser
.
selectedTabs
)
{
let
browser
=
tab
.
linkedBrowser
;
let
url
=
browser
.
currentURI
.
spec
;
let
principal
=
tab
.
linkedBrowser
.
contentPrincipal
;
if
(
gBrowser
.
updateBrowserRemotenessByURL
(
browser
url
)
)
{
if
(
tab
.
linkedPanel
)
{
loadBrowserURI
(
browser
url
principal
)
;
}
else
{
tab
.
addEventListener
(
"
SSTabRestoring
"
(
)
=
>
loadBrowserURI
(
browser
url
principal
)
{
once
:
true
}
)
;
gBrowser
.
_insertBrowser
(
tab
)
;
}
}
else
{
unchangedRemoteness
.
push
(
tab
)
;
}
}
if
(
!
unchangedRemoteness
.
length
)
{
return
;
}
for
(
let
tab
of
unchangedRemoteness
)
{
SitePermissions
.
clearTemporaryBlockPermissions
(
tab
.
linkedBrowser
)
;
delete
tab
.
linkedBrowser
.
authPromptAbuseCounter
;
}
gIdentityHandler
.
hidePopup
(
)
;
gPermissionPanel
.
hidePopup
(
)
;
let
handlingUserInput
=
document
.
hasValidTransientUserGestureActivation
;
for
(
let
tab
of
unchangedRemoteness
)
{
if
(
tab
.
linkedPanel
)
{
sendReloadMessage
(
tab
)
;
}
else
{
tab
.
addEventListener
(
"
SSTabRestoring
"
(
)
=
>
sendReloadMessage
(
tab
)
{
once
:
true
}
)
;
gBrowser
.
_insertBrowser
(
tab
)
;
}
}
function
loadBrowserURI
(
browser
url
principal
)
{
browser
.
loadURI
(
url
{
flags
:
reloadFlags
triggeringPrincipal
:
principal
}
)
;
}
function
sendReloadMessage
(
tab
)
{
tab
.
linkedBrowser
.
sendMessageToActor
(
"
Browser
:
Reload
"
{
flags
:
reloadFlags
handlingUserInput
}
"
BrowserTab
"
)
;
}
}
function
getSecurityInfo
(
securityInfoAsString
)
{
if
(
!
securityInfoAsString
)
{
return
null
;
}
let
securityInfo
=
gSerializationHelper
.
deserializeObject
(
securityInfoAsString
)
;
securityInfo
.
QueryInterface
(
Ci
.
nsITransportSecurityInfo
)
;
return
securityInfo
;
}
function
getPEMString
(
cert
)
{
var
derb64
=
cert
.
getBase64DERString
(
)
;
var
wrapped
=
derb64
.
replace
(
/
(
\
S
{
64
}
(
?
!
)
)
/
g
"
1
\
r
\
n
"
)
;
return
(
"
-
-
-
-
-
BEGIN
CERTIFICATE
-
-
-
-
-
\
r
\
n
"
+
wrapped
+
"
\
r
\
n
-
-
-
-
-
END
CERTIFICATE
-
-
-
-
-
\
r
\
n
"
)
;
}
var
browserDragAndDrop
=
{
canDropLink
:
aEvent
=
>
Services
.
droppedLinkHandler
.
canDropLink
(
aEvent
true
)
dragOver
(
aEvent
)
{
if
(
this
.
canDropLink
(
aEvent
)
)
{
aEvent
.
preventDefault
(
)
;
}
}
getTriggeringPrincipal
(
aEvent
)
{
return
Services
.
droppedLinkHandler
.
getTriggeringPrincipal
(
aEvent
)
;
}
getCSP
(
aEvent
)
{
return
Services
.
droppedLinkHandler
.
getCSP
(
aEvent
)
;
}
validateURIsForDrop
(
aEvent
aURIs
)
{
return
Services
.
droppedLinkHandler
.
validateURIsForDrop
(
aEvent
aURIs
)
;
}
dropLinks
(
aEvent
aDisallowInherit
)
{
return
Services
.
droppedLinkHandler
.
dropLinks
(
aEvent
aDisallowInherit
)
;
}
}
;
var
homeButtonObserver
=
{
onDrop
(
aEvent
)
{
let
links
=
browserDragAndDrop
.
dropLinks
(
aEvent
true
)
;
if
(
links
.
length
)
{
let
urls
=
[
]
;
for
(
let
link
of
links
)
{
if
(
link
.
url
.
includes
(
"
|
"
)
)
{
urls
.
push
(
.
.
.
link
.
url
.
split
(
"
|
"
)
)
;
}
else
{
urls
.
push
(
link
.
url
)
;
}
}
try
{
browserDragAndDrop
.
validateURIsForDrop
(
aEvent
urls
)
;
}
catch
(
e
)
{
return
;
}
setTimeout
(
openHomeDialog
0
urls
.
join
(
"
|
"
)
)
;
}
}
onDragOver
(
aEvent
)
{
if
(
HomePage
.
locked
)
{
return
;
}
browserDragAndDrop
.
dragOver
(
aEvent
)
;
aEvent
.
dropEffect
=
"
link
"
;
}
}
;
function
openHomeDialog
(
aURL
)
{
var
promptTitle
=
gNavigatorBundle
.
getString
(
"
droponhometitle
"
)
;
var
promptMsg
;
if
(
aURL
.
includes
(
"
|
"
)
)
{
promptMsg
=
gNavigatorBundle
.
getString
(
"
droponhomemsgMultiple
"
)
;
}
else
{
promptMsg
=
gNavigatorBundle
.
getString
(
"
droponhomemsg
"
)
;
}
var
pressedVal
=
Services
.
prompt
.
confirmEx
(
window
promptTitle
promptMsg
Services
.
prompt
.
STD_YES_NO_BUTTONS
null
null
null
null
{
value
:
0
}
)
;
if
(
pressedVal
=
=
0
)
{
HomePage
.
set
(
aURL
)
.
catch
(
Cu
.
reportError
)
;
}
}
var
newTabButtonObserver
=
{
onDragOver
(
aEvent
)
{
browserDragAndDrop
.
dragOver
(
aEvent
)
;
}
async
onDrop
(
aEvent
)
{
let
links
=
browserDragAndDrop
.
dropLinks
(
aEvent
)
;
if
(
links
.
length
>
=
Services
.
prefs
.
getIntPref
(
"
browser
.
tabs
.
maxOpenBeforeWarn
"
)
)
{
let
answer
=
await
OpenInTabsUtils
.
promiseConfirmOpenInTabs
(
links
.
length
window
)
;
if
(
!
answer
)
{
return
;
}
}
let
where
=
aEvent
.
shiftKey
?
"
tabshifted
"
:
"
tab
"
;
let
triggeringPrincipal
=
browserDragAndDrop
.
getTriggeringPrincipal
(
aEvent
)
;
let
csp
=
browserDragAndDrop
.
getCSP
(
aEvent
)
;
for
(
let
link
of
links
)
{
if
(
link
.
url
)
{
let
data
=
await
UrlbarUtils
.
getShortcutOrURIAndPostData
(
link
.
url
)
;
openLinkIn
(
data
.
url
where
{
postData
:
data
.
postData
allowThirdPartyFixup
:
true
triggeringPrincipal
csp
}
)
;
}
}
}
}
;
var
newWindowButtonObserver
=
{
onDragOver
(
aEvent
)
{
browserDragAndDrop
.
dragOver
(
aEvent
)
;
}
async
onDrop
(
aEvent
)
{
let
links
=
browserDragAndDrop
.
dropLinks
(
aEvent
)
;
if
(
links
.
length
>
=
Services
.
prefs
.
getIntPref
(
"
browser
.
tabs
.
maxOpenBeforeWarn
"
)
)
{
let
answer
=
await
OpenInTabsUtils
.
promiseConfirmOpenInTabs
(
links
.
length
window
)
;
if
(
!
answer
)
{
return
;
}
}
let
triggeringPrincipal
=
browserDragAndDrop
.
getTriggeringPrincipal
(
aEvent
)
;
let
csp
=
browserDragAndDrop
.
getCSP
(
aEvent
)
;
for
(
let
link
of
links
)
{
if
(
link
.
url
)
{
let
data
=
await
UrlbarUtils
.
getShortcutOrURIAndPostData
(
link
.
url
)
;
openLinkIn
(
data
.
url
"
window
"
{
allowInheritPrincipal
:
true
postData
:
data
.
postData
allowThirdPartyFixup
:
true
triggeringPrincipal
csp
}
)
;
}
}
}
}
;
const
BrowserSearch
=
{
_searchInitComplete
:
false
init
(
)
{
Services
.
obs
.
addObserver
(
this
"
browser
-
search
-
engine
-
modified
"
)
;
}
delayedStartupInit
(
)
{
this
.
_updateURLBarPlaceholderFromDefaultEngine
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
true
)
.
then
(
(
)
=
>
{
this
.
_searchInitComplete
=
true
;
}
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
"
browser
-
search
-
engine
-
modified
"
)
;
}
observe
(
engine
topic
data
)
{
let
engineName
=
engine
.
wrappedJSObject
.
name
;
switch
(
data
)
{
case
"
engine
-
removed
"
:
this
.
_addMaybeOfferedEngine
(
engineName
)
;
break
;
case
"
engine
-
added
"
:
this
.
_removeMaybeOfferedEngine
(
engineName
)
;
break
;
case
"
engine
-
default
"
:
if
(
this
.
_searchInitComplete
&
&
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
this
.
_updateURLBarPlaceholder
(
engineName
false
)
;
}
break
;
case
"
engine
-
default
-
private
"
:
if
(
this
.
_searchInitComplete
&
&
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
this
.
_updateURLBarPlaceholder
(
engineName
true
)
;
}
break
;
}
}
_addMaybeOfferedEngine
(
engineName
)
{
let
selectedBrowserOffersEngine
=
false
;
for
(
let
browser
of
gBrowser
.
browsers
)
{
for
(
let
i
=
0
;
i
<
(
browser
.
hiddenEngines
|
|
[
]
)
.
length
;
i
+
+
)
{
if
(
browser
.
hiddenEngines
[
i
]
.
title
=
=
engineName
)
{
if
(
!
browser
.
engines
)
{
browser
.
engines
=
[
]
;
}
browser
.
engines
.
push
(
browser
.
hiddenEngines
[
i
]
)
;
browser
.
hiddenEngines
.
splice
(
i
1
)
;
if
(
browser
=
=
gBrowser
.
selectedBrowser
)
{
selectedBrowserOffersEngine
=
true
;
}
break
;
}
}
}
if
(
selectedBrowserOffersEngine
)
{
this
.
updateOpenSearchBadge
(
)
;
}
}
_removeMaybeOfferedEngine
(
engineName
)
{
let
selectedBrowserOffersEngine
=
false
;
for
(
let
browser
of
gBrowser
.
browsers
)
{
for
(
let
i
=
0
;
i
<
(
browser
.
engines
|
|
[
]
)
.
length
;
i
+
+
)
{
if
(
browser
.
engines
[
i
]
.
title
=
=
engineName
)
{
if
(
!
browser
.
hiddenEngines
)
{
browser
.
hiddenEngines
=
[
]
;
}
browser
.
hiddenEngines
.
push
(
browser
.
engines
[
i
]
)
;
browser
.
engines
.
splice
(
i
1
)
;
if
(
browser
=
=
gBrowser
.
selectedBrowser
)
{
selectedBrowserOffersEngine
=
true
;
}
break
;
}
}
}
if
(
selectedBrowserOffersEngine
)
{
this
.
updateOpenSearchBadge
(
)
;
}
}
initPlaceHolder
(
force
=
false
)
{
const
prefName
=
"
browser
.
urlbar
.
placeholderName
"
+
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
?
"
.
private
"
:
"
"
)
;
let
engineName
=
Services
.
prefs
.
getStringPref
(
prefName
"
"
)
;
if
(
engineName
|
|
force
)
{
this
.
_setURLBarPlaceholder
(
engineName
)
;
}
}
async
_updateURLBarPlaceholderFromDefaultEngine
(
isPrivate
delayUpdate
=
false
)
{
const
getDefault
=
isPrivate
?
Services
.
search
.
getDefaultPrivate
:
Services
.
search
.
getDefault
;
let
defaultEngine
=
await
getDefault
(
)
;
this
.
_updateURLBarPlaceholder
(
defaultEngine
.
name
isPrivate
delayUpdate
)
;
}
_updateURLBarPlaceholder
(
engineName
isPrivate
delayUpdate
=
false
)
{
if
(
!
engineName
)
{
throw
new
Error
(
"
Expected
an
engineName
to
be
specified
"
)
;
}
const
engine
=
Services
.
search
.
getEngineByName
(
engineName
)
;
const
prefName
=
"
browser
.
urlbar
.
placeholderName
"
+
(
isPrivate
?
"
.
private
"
:
"
"
)
;
if
(
engine
.
isAppProvided
)
{
Services
.
prefs
.
setStringPref
(
prefName
engineName
)
;
}
else
{
Services
.
prefs
.
clearUserPref
(
prefName
)
;
engineName
=
"
"
;
}
if
(
delayUpdate
&
&
!
gURLBar
.
value
)
{
let
placeholderUpdateListener
=
(
)
=
>
{
if
(
gURLBar
.
value
&
&
!
gURLBar
.
searchMode
)
{
this
.
_updateURLBarPlaceholderFromDefaultEngine
(
isPrivate
false
)
;
gURLBar
.
removeEventListener
(
"
input
"
placeholderUpdateListener
)
;
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabSelect
"
placeholderUpdateListener
)
;
}
}
;
gURLBar
.
addEventListener
(
"
input
"
placeholderUpdateListener
)
;
gBrowser
.
tabContainer
.
addEventListener
(
"
TabSelect
"
placeholderUpdateListener
)
;
}
else
if
(
!
gURLBar
.
searchMode
)
{
this
.
_setURLBarPlaceholder
(
engineName
)
;
}
}
_setURLBarPlaceholder
(
name
)
{
document
.
l10n
.
setAttributes
(
gURLBar
.
inputField
name
?
"
urlbar
-
placeholder
-
with
-
name
"
:
"
urlbar
-
placeholder
"
name
?
{
name
}
:
undefined
)
;
}
addEngine
(
browser
engine
)
{
if
(
!
this
.
_searchInitComplete
)
{
return
;
}
if
(
browser
.
engines
)
{
if
(
browser
.
engines
.
some
(
e
=
>
e
.
title
=
=
engine
.
title
)
)
{
return
;
}
}
var
hidden
=
false
;
if
(
Services
.
search
.
getEngineByName
(
engine
.
title
)
)
{
hidden
=
true
;
}
var
engines
=
(
hidden
?
browser
.
hiddenEngines
:
browser
.
engines
)
|
|
[
]
;
engines
.
push
(
{
uri
:
engine
.
href
title
:
engine
.
title
get
icon
(
)
{
return
browser
.
mIconURL
;
}
}
)
;
if
(
hidden
)
{
browser
.
hiddenEngines
=
engines
;
}
else
{
browser
.
engines
=
engines
;
if
(
browser
=
=
gBrowser
.
selectedBrowser
)
{
this
.
updateOpenSearchBadge
(
)
;
}
}
}
updateOpenSearchBadge
(
)
{
gURLBar
.
addSearchEngineHelper
.
setEnginesFromBrowser
(
gBrowser
.
selectedBrowser
)
;
var
searchBar
=
this
.
searchBar
;
if
(
!
searchBar
)
{
return
;
}
var
engines
=
gBrowser
.
selectedBrowser
.
engines
;
if
(
engines
&
&
engines
.
length
)
{
searchBar
.
setAttribute
(
"
addengines
"
"
true
"
)
;
}
else
{
searchBar
.
removeAttribute
(
"
addengines
"
)
;
}
}
webSearch
:
function
BrowserSearch_webSearch
(
)
{
if
(
window
.
location
.
href
!
=
AppConstants
.
BROWSER_CHROME_URL
|
|
gURLBar
.
readOnly
)
{
let
win
=
getTopWin
(
{
skipPopups
:
true
}
)
;
if
(
win
)
{
win
.
focus
(
)
;
win
.
BrowserSearch
.
webSearch
(
)
;
}
else
{
var
observer
=
function
(
subject
topic
data
)
{
if
(
subject
=
=
win
)
{
BrowserSearch
.
webSearch
(
)
;
Services
.
obs
.
removeObserver
(
observer
"
browser
-
delayed
-
startup
-
finished
"
)
;
}
}
;
win
=
window
.
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
"
chrome
all
dialog
=
no
"
"
about
:
blank
"
)
;
Services
.
obs
.
addObserver
(
observer
"
browser
-
delayed
-
startup
-
finished
"
)
;
}
return
;
}
let
focusUrlBarIfSearchFieldIsNotActive
=
function
(
aSearchBar
)
{
if
(
!
aSearchBar
|
|
document
.
activeElement
!
=
aSearchBar
.
textbox
)
{
gURLBar
.
searchModeShortcut
(
)
;
}
}
;
let
searchBar
=
this
.
searchBar
;
let
placement
=
CustomizableUI
.
getPlacementOfWidget
(
"
search
-
container
"
)
;
let
focusSearchBar
=
(
)
=
>
{
searchBar
=
this
.
searchBar
;
searchBar
.
select
(
)
;
focusUrlBarIfSearchFieldIsNotActive
(
searchBar
)
;
}
;
if
(
placement
&
&
searchBar
&
&
(
(
searchBar
.
parentNode
.
getAttribute
(
"
overflowedItem
"
)
=
=
"
true
"
&
&
placement
.
area
=
=
CustomizableUI
.
AREA_NAVBAR
)
|
|
placement
.
area
=
=
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
)
)
{
let
navBar
=
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
navBar
.
overflowable
.
show
(
)
.
then
(
focusSearchBar
)
;
return
;
}
if
(
searchBar
)
{
if
(
window
.
fullScreen
)
{
FullScreen
.
showNavToolbox
(
)
;
}
searchBar
.
select
(
)
;
}
focusUrlBarIfSearchFieldIsNotActive
(
searchBar
)
;
}
async
_loadSearch
(
searchText
where
usePrivate
purpose
triggeringPrincipal
csp
inBackground
=
false
engine
=
null
tab
=
null
)
{
if
(
!
triggeringPrincipal
)
{
throw
new
Error
(
"
Required
argument
triggeringPrincipal
missing
within
_loadSearch
"
)
;
}
if
(
!
engine
)
{
engine
=
usePrivate
?
await
Services
.
search
.
getDefaultPrivate
(
)
:
await
Services
.
search
.
getDefault
(
)
;
}
let
submission
=
engine
.
getSubmission
(
searchText
null
purpose
)
;
if
(
!
submission
)
{
return
null
;
}
openLinkIn
(
submission
.
uri
.
spec
where
|
|
"
current
"
{
private
:
usePrivate
&
&
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
postData
:
submission
.
postData
inBackground
relatedToCurrent
:
true
triggeringPrincipal
csp
targetBrowser
:
tab
?
.
linkedBrowser
globalHistoryOptions
:
{
triggeringSearchEngine
:
engine
.
name
}
}
)
;
return
{
engine
url
:
submission
.
uri
}
;
}
async
loadSearchFromContext
(
terms
usePrivate
triggeringPrincipal
csp
event
)
{
event
=
getRootEvent
(
event
)
;
let
where
=
whereToOpenLink
(
event
)
;
if
(
where
=
=
"
current
"
)
{
where
=
"
tab
"
;
}
if
(
usePrivate
&
&
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
where
=
"
window
"
;
}
let
inBackground
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
search
.
context
.
loadInBackground
"
)
;
if
(
event
.
button
=
=
1
|
|
event
.
ctrlKey
)
{
inBackground
=
!
inBackground
;
}
let
{
engine
url
}
=
await
BrowserSearch
.
_loadSearch
(
terms
where
usePrivate
"
contextmenu
"
Services
.
scriptSecurityManager
.
createNullPrincipal
(
triggeringPrincipal
.
originAttributes
)
csp
inBackground
)
;
if
(
engine
)
{
BrowserSearchTelemetry
.
recordSearch
(
gBrowser
.
selectedBrowser
engine
"
contextmenu
"
{
url
}
)
;
}
}
async
loadSearchFromCommandLine
(
terms
usePrivate
triggeringPrincipal
csp
)
{
let
{
engine
url
}
=
await
BrowserSearch
.
_loadSearch
(
terms
"
current
"
usePrivate
"
system
"
triggeringPrincipal
csp
)
;
if
(
engine
)
{
BrowserSearchTelemetry
.
recordSearch
(
gBrowser
.
selectedBrowser
engine
"
system
"
{
url
}
)
;
}
}
async
loadSearchFromExtension
(
terms
engine
tab
triggeringPrincipal
)
{
const
result
=
await
BrowserSearch
.
_loadSearch
(
terms
tab
?
"
current
"
:
"
tab
"
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
"
webextension
"
triggeringPrincipal
null
false
engine
tab
)
;
BrowserSearchTelemetry
.
recordSearch
(
gBrowser
.
selectedBrowser
result
.
engine
"
webextension
"
{
url
:
result
.
url
}
)
;
}
get
searchBar
(
)
{
return
document
.
getElementById
(
"
searchbar
"
)
;
}
removalOfSearchEngineNotificationBox
(
oldEngine
newEngine
)
{
let
messageFragment
=
document
.
createDocumentFragment
(
)
;
let
message
=
document
.
createElement
(
"
span
"
)
;
let
link
=
document
.
createXULElement
(
"
label
"
{
is
:
"
text
-
link
"
}
)
;
link
.
href
=
Services
.
urlFormatter
.
formatURLPref
(
"
browser
.
search
.
searchEngineRemoval
"
)
;
link
.
setAttribute
(
"
data
-
l10n
-
name
"
"
remove
-
search
-
engine
-
article
"
)
;
document
.
l10n
.
setAttributes
(
message
"
removed
-
search
-
engine
-
message
"
{
oldEngine
newEngine
}
)
;
message
.
appendChild
(
link
)
;
messageFragment
.
appendChild
(
message
)
;
let
button
=
[
{
"
l10n
-
id
"
:
"
remove
-
search
-
engine
-
button
"
primary
:
true
callback
(
)
{
const
notificationBox
=
gNotificationBox
.
getNotificationWithValue
(
"
search
-
engine
-
removal
"
)
;
gNotificationBox
.
removeNotification
(
notificationBox
)
;
}
}
]
;
gNotificationBox
.
appendNotification
(
"
search
-
engine
-
removal
"
{
label
:
messageFragment
priority
:
gNotificationBox
.
PRIORITY_SYSTEM
}
button
)
;
this
.
_updateURLBarPlaceholderFromDefaultEngine
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
false
)
.
catch
(
Cu
.
reportError
)
;
}
}
;
XPCOMUtils
.
defineConstant
(
this
"
BrowserSearch
"
BrowserSearch
)
;
function
CreateContainerTabMenu
(
event
)
{
createUserContextMenu
(
event
{
useAccessKeys
:
false
showDefaultTab
:
true
}
)
;
}
function
FillHistoryMenu
(
aParent
)
{
if
(
!
aParent
.
hasStatusListener
)
{
aParent
.
addEventListener
(
"
DOMMenuItemActive
"
function
(
aEvent
)
{
if
(
!
aEvent
.
target
.
hasAttribute
(
"
checked
"
)
)
{
XULBrowserWindow
.
setOverLink
(
aEvent
.
target
.
getAttribute
(
"
uri
"
)
)
;
}
}
)
;
aParent
.
addEventListener
(
"
DOMMenuItemInactive
"
function
(
)
{
XULBrowserWindow
.
setOverLink
(
"
"
)
;
}
)
;
aParent
.
hasStatusListener
=
true
;
}
let
children
=
aParent
.
children
;
for
(
var
i
=
children
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
if
(
children
[
i
]
.
hasAttribute
(
"
index
"
)
)
{
aParent
.
removeChild
(
children
[
i
]
)
;
}
}
const
MAX_HISTORY_MENU_ITEMS
=
15
;
const
tooltipBack
=
gNavigatorBundle
.
getString
(
"
tabHistory
.
goBack
"
)
;
const
tooltipCurrent
=
gNavigatorBundle
.
getString
(
"
tabHistory
.
reloadCurrent
"
)
;
const
tooltipForward
=
gNavigatorBundle
.
getString
(
"
tabHistory
.
goForward
"
)
;
function
updateSessionHistory
(
sessionHistory
initial
ssInParent
)
{
let
count
=
ssInParent
?
sessionHistory
.
count
:
sessionHistory
.
entries
.
length
;
if
(
!
initial
)
{
if
(
count
<
=
1
)
{
aParent
.
hidePopup
(
)
;
return
;
}
else
if
(
aParent
.
id
!
=
"
backForwardMenu
"
&
&
!
aParent
.
parentNode
.
open
)
{
aParent
.
parentNode
.
open
=
true
;
return
;
}
}
let
index
=
sessionHistory
.
index
;
let
half_length
=
Math
.
floor
(
MAX_HISTORY_MENU_ITEMS
/
2
)
;
let
start
=
Math
.
max
(
index
-
half_length
0
)
;
let
end
=
Math
.
min
(
start
=
=
0
?
MAX_HISTORY_MENU_ITEMS
:
index
+
half_length
+
1
count
)
;
if
(
end
=
=
count
)
{
start
=
Math
.
max
(
count
-
MAX_HISTORY_MENU_ITEMS
0
)
;
}
let
existingIndex
=
0
;
for
(
let
j
=
end
-
1
;
j
>
=
start
;
j
-
-
)
{
let
entry
=
ssInParent
?
sessionHistory
.
getEntryAtIndex
(
j
)
:
sessionHistory
.
entries
[
j
]
;
if
(
BrowserUtils
.
navigationRequireUserInteraction
&
&
entry
.
hasUserInteraction
=
=
=
false
&
&
j
!
=
end
-
1
&
&
j
!
=
start
)
{
continue
;
}
let
uri
=
ssInParent
?
entry
.
URI
.
spec
:
entry
.
url
;
let
item
=
existingIndex
<
children
.
length
?
children
[
existingIndex
]
:
document
.
createXULElement
(
"
menuitem
"
)
;
item
.
setAttribute
(
"
uri
"
uri
)
;
item
.
setAttribute
(
"
label
"
entry
.
title
|
|
uri
)
;
item
.
setAttribute
(
"
index
"
j
)
;
item
.
setAttribute
(
"
historyindex
"
j
-
index
)
;
if
(
j
!
=
index
)
{
item
.
style
.
listStyleImage
=
url
(
page
-
icon
:
{
uri
}
)
;
}
if
(
j
<
index
)
{
item
.
className
=
"
unified
-
nav
-
back
menuitem
-
iconic
menuitem
-
with
-
favicon
"
;
item
.
setAttribute
(
"
tooltiptext
"
tooltipBack
)
;
}
else
if
(
j
=
=
index
)
{
item
.
setAttribute
(
"
type
"
"
radio
"
)
;
item
.
setAttribute
(
"
checked
"
"
true
"
)
;
item
.
className
=
"
unified
-
nav
-
current
"
;
item
.
setAttribute
(
"
tooltiptext
"
tooltipCurrent
)
;
}
else
{
item
.
className
=
"
unified
-
nav
-
forward
menuitem
-
iconic
menuitem
-
with
-
favicon
"
;
item
.
setAttribute
(
"
tooltiptext
"
tooltipForward
)
;
}
if
(
!
item
.
parentNode
)
{
aParent
.
appendChild
(
item
)
;
}
existingIndex
+
+
;
}
if
(
!
initial
)
{
let
existingLength
=
children
.
length
;
while
(
existingIndex
<
existingLength
)
{
aParent
.
removeChild
(
aParent
.
lastElementChild
)
;
existingIndex
+
+
;
}
}
}
let
sessionHistory
=
gBrowser
.
selectedBrowser
.
browsingContext
.
sessionHistory
;
if
(
sessionHistory
?
.
count
)
{
if
(
sessionHistory
.
count
<
=
1
)
{
return
false
;
}
updateSessionHistory
(
sessionHistory
true
true
)
;
}
else
{
sessionHistory
=
SessionStore
.
getSessionHistory
(
gBrowser
.
selectedTab
updateSessionHistory
)
;
updateSessionHistory
(
sessionHistory
true
false
)
;
}
return
true
;
}
function
BrowserDownloadsUI
(
)
{
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
openTrustedLinkIn
(
"
about
:
downloads
"
"
tab
"
)
;
}
else
{
PlacesCommandHook
.
showPlacesOrganizer
(
"
Downloads
"
)
;
}
}
function
toOpenWindowByType
(
inType
uri
features
)
{
var
topWindow
=
Services
.
wm
.
getMostRecentWindow
(
inType
)
;
if
(
topWindow
)
{
topWindow
.
focus
(
)
;
}
else
if
(
features
)
{
window
.
open
(
uri
"
_blank
"
features
)
;
}
else
{
window
.
open
(
uri
"
_blank
"
"
chrome
extrachrome
menubar
resizable
scrollbars
status
toolbar
"
)
;
}
}
function
OpenBrowserWindow
(
options
)
{
var
telemetryObj
=
{
}
;
TelemetryStopwatch
.
start
(
"
FX_NEW_WINDOW_MS
"
telemetryObj
)
;
var
defaultArgs
=
BrowserHandler
.
defaultArgs
;
var
wintype
=
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
;
var
extraFeatures
=
"
"
;
if
(
options
&
&
options
.
private
&
&
PrivateBrowsingUtils
.
enabled
)
{
extraFeatures
=
"
private
"
;
if
(
!
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
{
defaultArgs
=
"
about
:
privatebrowsing
"
;
}
}
else
{
extraFeatures
=
"
non
-
private
"
;
}
if
(
options
&
&
options
.
remote
)
{
extraFeatures
+
=
"
remote
"
;
}
else
if
(
options
&
&
options
.
remote
=
=
=
false
)
{
extraFeatures
+
=
"
non
-
remote
"
;
}
if
(
options
&
&
options
.
fission
)
{
extraFeatures
+
=
"
fission
"
;
}
else
if
(
options
&
&
options
.
fission
=
=
=
false
)
{
extraFeatures
+
=
"
non
-
fission
"
;
}
if
(
window
.
windowState
=
=
window
.
STATE_MAXIMIZED
)
{
extraFeatures
+
=
"
suppressanimation
"
;
}
var
win
;
if
(
window
&
&
wintype
=
=
"
navigator
:
browser
"
&
&
window
.
content
&
&
window
.
content
.
document
)
{
var
DocCharset
=
window
.
content
.
document
.
characterSet
;
let
charsetArg
=
"
charset
=
"
+
DocCharset
;
win
=
window
.
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
"
chrome
all
dialog
=
no
"
+
extraFeatures
defaultArgs
charsetArg
)
;
}
else
{
win
=
window
.
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
"
chrome
all
dialog
=
no
"
+
extraFeatures
defaultArgs
)
;
}
win
.
addEventListener
(
"
MozAfterPaint
"
(
)
=
>
{
TelemetryStopwatch
.
finish
(
"
FX_NEW_WINDOW_MS
"
telemetryObj
)
;
if
(
Services
.
prefs
.
getIntPref
(
"
browser
.
startup
.
page
"
)
=
=
1
&
&
defaultArgs
=
=
HomePage
.
get
(
)
)
{
Services
.
obs
.
notifyObservers
(
win
"
browser
-
open
-
homepage
-
start
"
)
;
}
}
{
once
:
true
}
)
;
return
win
;
}
function
updateEditUIVisibility
(
)
{
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
return
;
}
let
editMenuPopupState
=
document
.
getElementById
(
"
menu_EditPopup
"
)
.
state
;
let
contextMenuPopupState
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
.
state
;
let
placesContextMenuPopupState
=
document
.
getElementById
(
"
placesContext
"
)
.
state
;
let
oldVisible
=
gEditUIVisible
;
gEditUIVisible
=
editMenuPopupState
=
=
"
showing
"
|
|
editMenuPopupState
=
=
"
open
"
|
|
contextMenuPopupState
=
=
"
showing
"
|
|
contextMenuPopupState
=
=
"
open
"
|
|
placesContextMenuPopupState
=
=
"
showing
"
|
|
placesContextMenuPopupState
=
=
"
open
"
;
const
kOpenPopupStates
=
[
"
showing
"
"
open
"
]
;
if
(
!
gEditUIVisible
)
{
let
placement
=
CustomizableUI
.
getPlacementOfWidget
(
"
edit
-
controls
"
)
;
let
areaType
=
placement
?
CustomizableUI
.
getAreaType
(
placement
.
area
)
:
"
"
;
if
(
areaType
=
=
CustomizableUI
.
TYPE_MENU_PANEL
)
{
let
customizablePanel
=
PanelUI
.
overflowPanel
;
gEditUIVisible
=
kOpenPopupStates
.
includes
(
customizablePanel
.
state
)
;
}
else
if
(
areaType
=
=
CustomizableUI
.
TYPE_TOOLBAR
&
&
window
.
toolbar
.
visible
)
{
if
(
placement
.
area
=
=
"
nav
-
bar
"
)
{
let
editControls
=
document
.
getElementById
(
"
edit
-
controls
"
)
;
gEditUIVisible
=
!
editControls
.
hasAttribute
(
"
overflowedItem
"
)
|
|
kOpenPopupStates
.
includes
(
document
.
getElementById
(
"
widget
-
overflow
"
)
.
state
)
;
}
else
{
gEditUIVisible
=
true
;
}
}
}
if
(
!
gEditUIVisible
)
{
gEditUIVisible
=
kOpenPopupStates
.
includes
(
PanelUI
.
panel
.
state
)
;
}
if
(
gEditUIVisible
=
=
oldVisible
)
{
return
;
}
if
(
gEditUIVisible
)
{
goUpdateGlobalEditMenuItems
(
)
;
}
else
{
goSetCommandEnabled
(
"
cmd_undo
"
true
)
;
goSetCommandEnabled
(
"
cmd_redo
"
true
)
;
goSetCommandEnabled
(
"
cmd_cut
"
true
)
;
goSetCommandEnabled
(
"
cmd_copy
"
true
)
;
goSetCommandEnabled
(
"
cmd_paste
"
true
)
;
goSetCommandEnabled
(
"
cmd_selectAll
"
true
)
;
goSetCommandEnabled
(
"
cmd_delete
"
true
)
;
goSetCommandEnabled
(
"
cmd_switchTextDirection
"
true
)
;
}
}
let
gFileMenu
=
{
updateUserContextUIVisibility
(
)
{
let
menu
=
document
.
getElementById
(
"
menu_newUserContext
"
)
;
menu
.
hidden
=
!
Services
.
prefs
.
getBoolPref
(
"
privacy
.
userContext
.
enabled
"
false
)
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
menu
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
updateImportCommandEnabledState
(
)
{
if
(
!
Services
.
policies
.
isAllowed
(
"
profileImport
"
)
)
{
document
.
getElementById
(
"
cmd_file_importFromAnotherBrowser
"
)
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
updateTabCloseCountState
(
)
{
document
.
l10n
.
setAttributes
(
document
.
getElementById
(
"
menu_close
"
)
"
menu
-
file
-
close
-
tab
"
{
tabCount
:
gBrowser
.
selectedTabs
.
length
}
)
;
}
onPopupShowing
(
event
)
{
if
(
event
.
target
.
id
!
=
"
menu_FilePopup
"
)
{
return
;
}
this
.
updateUserContextUIVisibility
(
)
;
this
.
updateImportCommandEnabledState
(
)
;
this
.
updateTabCloseCountState
(
)
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
gShareUtils
.
updateShareURLMenuItem
(
gBrowser
.
selectedBrowser
document
.
getElementById
(
"
menu_savePage
"
)
)
;
}
PrintUtils
.
updatePrintSetupMenuHiddenState
(
)
;
}
}
;
let
gShareUtils
=
{
updateShareURLMenuItem
(
browser
insertAfterEl
)
{
if
(
AppConstants
.
platform
!
=
"
macosx
"
&
&
!
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
6
.
4
"
)
)
{
return
;
}
let
shareURL
=
insertAfterEl
.
nextElementSibling
;
if
(
!
shareURL
?
.
matches
(
"
.
share
-
tab
-
url
-
item
"
)
)
{
shareURL
=
this
.
_createShareURLMenuItem
(
insertAfterEl
)
;
}
shareURL
.
browserToShare
=
Cu
.
getWeakReference
(
browser
)
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
shareURL
.
hidden
=
!
BrowserUtils
.
isShareableURL
(
browser
.
currentURI
)
;
}
}
_createShareURLMenuItem
(
insertAfterEl
)
{
let
menu
=
insertAfterEl
.
parentNode
;
let
shareURL
=
null
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
shareURL
=
this
.
_buildShareURLItem
(
menu
.
id
)
;
}
else
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
shareURL
=
this
.
_buildShareURLMenu
(
menu
.
id
)
;
}
shareURL
.
className
=
"
share
-
tab
-
url
-
item
"
;
let
l10nID
=
menu
.
id
=
=
"
tabContextMenu
"
?
"
tab
-
context
-
share
-
url
"
:
"
menu
-
file
-
share
-
url
"
;
document
.
l10n
.
setAttributes
(
shareURL
l10nID
)
;
menu
.
insertBefore
(
shareURL
insertAfterEl
.
nextSibling
)
;
return
shareURL
;
}
_buildShareURLItem
(
)
{
let
shareURLMenuItem
=
document
.
createXULElement
(
"
menuitem
"
)
;
shareURLMenuItem
.
addEventListener
(
"
command
"
this
)
;
return
shareURLMenuItem
;
}
_buildShareURLMenu
(
)
{
let
menu
=
document
.
createXULElement
(
"
menu
"
)
;
let
menuPopup
=
document
.
createXULElement
(
"
menupopup
"
)
;
menuPopup
.
addEventListener
(
"
popupshowing
"
this
)
;
menu
.
appendChild
(
menuPopup
)
;
return
menu
;
}
getDataToShare
(
node
)
{
let
browser
=
node
.
browserToShare
?
.
get
(
)
;
let
urlToShare
=
null
;
let
titleToShare
=
null
;
if
(
browser
&
&
BrowserUtils
.
isShareableURL
(
browser
.
currentURI
)
)
{
urlToShare
=
browser
.
currentURI
;
titleToShare
=
browser
.
contentTitle
;
}
return
{
urlToShare
titleToShare
}
;
}
initializeShareURLPopup
(
menuPopup
)
{
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
{
return
;
}
while
(
menuPopup
.
firstChild
)
{
menuPopup
.
firstChild
.
remove
(
)
;
}
let
{
urlToShare
}
=
this
.
getDataToShare
(
menuPopup
.
parentNode
)
;
let
shouldEnable
=
!
!
urlToShare
;
if
(
!
urlToShare
)
{
urlToShare
=
makeURI
(
"
https
:
/
/
mozilla
.
org
/
"
)
;
}
let
sharingService
=
gBrowser
.
MacSharingService
;
let
currentURI
=
gURLBar
.
makeURIReadable
(
urlToShare
)
.
displaySpec
;
let
services
=
sharingService
.
getSharingProviders
(
currentURI
)
;
services
.
forEach
(
share
=
>
{
let
item
=
document
.
createXULElement
(
"
menuitem
"
)
;
item
.
classList
.
add
(
"
menuitem
-
iconic
"
)
;
item
.
setAttribute
(
"
label
"
share
.
menuItemTitle
)
;
item
.
setAttribute
(
"
share
-
name
"
share
.
name
)
;
item
.
setAttribute
(
"
image
"
share
.
image
)
;
if
(
!
shouldEnable
)
{
item
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
menuPopup
.
appendChild
(
item
)
;
}
)
;
menuPopup
.
appendChild
(
document
.
createXULElement
(
"
menuseparator
"
)
)
;
let
moreItem
=
document
.
createXULElement
(
"
menuitem
"
)
;
document
.
l10n
.
setAttributes
(
moreItem
"
menu
-
share
-
more
"
)
;
moreItem
.
classList
.
add
(
"
menuitem
-
iconic
"
"
share
-
more
-
button
"
)
;
menuPopup
.
appendChild
(
moreItem
)
;
menuPopup
.
addEventListener
(
"
command
"
this
)
;
menuPopup
.
parentNode
.
closest
(
"
menupopup
"
)
.
addEventListener
(
"
popuphiding
"
this
)
;
menuPopup
.
setAttribute
(
"
data
-
initialized
"
true
)
;
}
onShareURLCommand
(
event
)
{
let
target
=
event
.
target
.
closest
(
"
.
share
-
tab
-
url
-
item
"
)
;
if
(
!
target
)
{
return
;
}
if
(
event
.
target
.
classList
.
contains
(
"
share
-
more
-
button
"
)
)
{
gBrowser
.
MacSharingService
.
openSharingPreferences
(
)
;
return
;
}
let
{
urlToShare
titleToShare
}
=
this
.
getDataToShare
(
target
)
;
let
currentURI
=
gURLBar
.
makeURIReadable
(
urlToShare
)
.
displaySpec
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
WindowsUIUtils
.
shareUrl
(
currentURI
titleToShare
)
;
return
;
}
let
shareName
=
event
.
target
.
getAttribute
(
"
share
-
name
"
)
;
if
(
shareName
)
{
gBrowser
.
MacSharingService
.
shareUrl
(
shareName
currentURI
titleToShare
)
;
}
}
onPopupHiding
(
event
)
{
if
(
event
.
target
.
parentNode
.
closest
(
"
menupopup
"
)
)
{
return
;
}
let
menupopup
=
event
.
target
.
querySelector
(
"
.
share
-
tab
-
url
-
item
"
)
?
.
menupopup
;
menupopup
?
.
removeAttribute
(
"
data
-
initialized
"
)
;
event
.
target
.
removeEventListener
(
"
popuphiding
"
this
)
;
}
onPopupShowing
(
event
)
{
if
(
!
event
.
target
.
hasAttribute
(
"
data
-
initialized
"
)
)
{
this
.
initializeShareURLPopup
(
event
.
target
)
;
}
}
handleEvent
(
aEvent
)
{
switch
(
aEvent
.
type
)
{
case
"
command
"
:
this
.
onShareURLCommand
(
aEvent
)
;
break
;
case
"
popuphiding
"
:
this
.
onPopupHiding
(
aEvent
)
;
break
;
case
"
popupshowing
"
:
this
.
onPopupShowing
(
aEvent
)
;
break
;
}
}
}
;
function
openNewUserContextTab
(
event
)
{
openTrustedLinkIn
(
BROWSER_NEW_TAB_URL
"
tab
"
{
userContextId
:
parseInt
(
event
.
target
.
getAttribute
(
"
data
-
usercontextid
"
)
)
}
)
;
}
function
updateUserContextUIIndicator
(
)
{
function
replaceContainerClass
(
classType
element
value
)
{
let
prefix
=
"
identity
-
"
+
classType
+
"
-
"
;
if
(
value
&
&
element
.
classList
.
contains
(
prefix
+
value
)
)
{
return
;
}
for
(
let
className
of
element
.
classList
)
{
if
(
className
.
startsWith
(
prefix
)
)
{
element
.
classList
.
remove
(
className
)
;
}
}
if
(
value
)
{
element
.
classList
.
add
(
prefix
+
value
)
;
}
}
let
hbox
=
document
.
getElementById
(
"
userContext
-
icons
"
)
;
let
userContextId
=
gBrowser
.
selectedBrowser
.
getAttribute
(
"
usercontextid
"
)
;
if
(
!
userContextId
)
{
replaceContainerClass
(
"
color
"
hbox
"
"
)
;
hbox
.
hidden
=
true
;
return
;
}
let
identity
=
ContextualIdentityService
.
getPublicIdentityFromId
(
userContextId
)
;
if
(
!
identity
)
{
replaceContainerClass
(
"
color
"
hbox
"
"
)
;
hbox
.
hidden
=
true
;
return
;
}
replaceContainerClass
(
"
color
"
hbox
identity
.
color
)
;
let
label
=
ContextualIdentityService
.
getUserContextLabel
(
userContextId
)
;
document
.
getElementById
(
"
userContext
-
label
"
)
.
setAttribute
(
"
value
"
label
)
;
hbox
.
setAttribute
(
"
tooltiptext
"
label
)
;
let
indicator
=
document
.
getElementById
(
"
userContext
-
indicator
"
)
;
replaceContainerClass
(
"
icon
"
indicator
identity
.
icon
)
;
hbox
.
hidden
=
false
;
}
var
XULBrowserWindow
=
{
status
:
"
"
defaultStatus
:
"
"
overLink
:
"
"
startTime
:
0
isBusy
:
false
busyUI
:
false
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIWebProgressListener
"
"
nsIWebProgressListener2
"
"
nsISupportsWeakReference
"
"
nsIXULBrowserWindow
"
]
)
get
stopCommand
(
)
{
delete
this
.
stopCommand
;
return
(
this
.
stopCommand
=
document
.
getElementById
(
"
Browser
:
Stop
"
)
)
;
}
get
reloadCommand
(
)
{
delete
this
.
reloadCommand
;
return
(
this
.
reloadCommand
=
document
.
getElementById
(
"
Browser
:
Reload
"
)
)
;
}
get
_elementsForTextBasedTypes
(
)
{
delete
this
.
_elementsForTextBasedTypes
;
return
(
this
.
_elementsForTextBasedTypes
=
[
document
.
getElementById
(
"
pageStyleMenu
"
)
document
.
getElementById
(
"
context
-
viewpartialsource
-
selection
"
)
document
.
getElementById
(
"
context
-
print
-
selection
"
)
]
)
;
}
get
_elementsForFind
(
)
{
delete
this
.
_elementsForFind
;
return
(
this
.
_elementsForFind
=
[
document
.
getElementById
(
"
cmd_find
"
)
document
.
getElementById
(
"
cmd_findAgain
"
)
document
.
getElementById
(
"
cmd_findPrevious
"
)
]
)
;
}
get
_elementsForViewSource
(
)
{
delete
this
.
_elementsForViewSource
;
return
(
this
.
_elementsForViewSource
=
[
document
.
getElementById
(
"
context
-
viewsource
"
)
document
.
getElementById
(
"
View
:
PageSource
"
)
]
)
;
}
get
_menuItemForRepairTextEncoding
(
)
{
delete
this
.
_menuItemForRepairTextEncoding
;
return
(
this
.
_menuItemForRepairTextEncoding
=
document
.
getElementById
(
"
repair
-
text
-
encoding
"
)
)
;
}
setDefaultStatus
(
status
)
{
this
.
defaultStatus
=
status
;
StatusPanel
.
update
(
)
;
}
setOverLink
(
url
)
{
if
(
url
)
{
url
=
Services
.
textToSubURI
.
unEscapeURIForUI
(
url
)
;
url
=
url
.
replace
(
/
[
\
u200e
\
u200f
\
u202a
\
u202b
\
u202c
\
u202d
\
u202e
]
/
g
encodeURIComponent
)
;
if
(
UrlbarPrefs
.
get
(
"
trimURLs
"
)
)
{
url
=
BrowserUIUtils
.
trimURL
(
url
)
;
}
}
this
.
overLink
=
url
;
LinkTargetDisplay
.
update
(
)
;
}
showTooltip
(
xDevPix
yDevPix
tooltip
direction
browser
)
{
if
(
Cc
[
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
]
.
getService
(
Ci
.
nsIDragService
)
.
getCurrentSession
(
)
)
{
return
;
}
let
elt
=
document
.
getElementById
(
"
remoteBrowserTooltip
"
)
;
elt
.
label
=
tooltip
;
elt
.
style
.
direction
=
direction
;
elt
.
openPopupAtScreen
(
xDevPix
/
window
.
devicePixelRatio
yDevPix
/
window
.
devicePixelRatio
false
null
)
;
}
hideTooltip
(
)
{
let
elt
=
document
.
getElementById
(
"
remoteBrowserTooltip
"
)
;
elt
.
hidePopup
(
)
;
}
getTabCount
(
)
{
return
gBrowser
.
tabs
.
length
;
}
onProgressChange
(
aWebProgress
aRequest
aCurSelfProgress
aMaxSelfProgress
aCurTotalProgress
aMaxTotalProgress
)
{
}
onProgressChange64
(
aWebProgress
aRequest
aCurSelfProgress
aMaxSelfProgress
aCurTotalProgress
aMaxTotalProgress
)
{
return
this
.
onProgressChange
(
aWebProgress
aRequest
aCurSelfProgress
aMaxSelfProgress
aCurTotalProgress
aMaxTotalProgress
)
;
}
onStateChange
(
aWebProgress
aRequest
aStateFlags
aStatus
)
{
const
nsIWebProgressListener
=
Ci
.
nsIWebProgressListener
;
let
browser
=
gBrowser
.
selectedBrowser
;
gProtectionsHandler
.
onStateChange
(
aWebProgress
aStateFlags
)
;
if
(
aStateFlags
&
nsIWebProgressListener
.
STATE_START
&
&
aStateFlags
&
nsIWebProgressListener
.
STATE_IS_NETWORK
)
{
if
(
aRequest
&
&
aWebProgress
.
isTopLevel
)
{
browser
.
engines
=
null
;
}
this
.
isBusy
=
true
;
if
(
!
(
aStateFlags
&
nsIWebProgressListener
.
STATE_RESTORING
)
)
{
this
.
busyUI
=
true
;
this
.
stopCommand
.
removeAttribute
(
"
disabled
"
)
;
CombinedStopReload
.
switchToStop
(
aRequest
aWebProgress
)
;
}
}
else
if
(
aStateFlags
&
nsIWebProgressListener
.
STATE_STOP
)
{
if
(
aRequest
)
{
let
msg
=
"
"
;
let
location
;
let
canViewSource
=
true
;
if
(
aRequest
instanceof
Ci
.
nsIChannel
|
|
"
URI
"
in
aRequest
)
{
location
=
aRequest
.
URI
;
if
(
location
.
scheme
=
=
"
keyword
"
&
&
aWebProgress
.
isTopLevel
)
{
gBrowser
.
userTypedValue
=
null
;
}
canViewSource
=
location
.
scheme
!
=
"
view
-
source
"
;
if
(
location
.
spec
!
=
"
about
:
blank
"
)
{
switch
(
aStatus
)
{
case
Cr
.
NS_ERROR_NET_TIMEOUT
:
msg
=
gNavigatorBundle
.
getString
(
"
nv_timeout
"
)
;
break
;
}
}
}
this
.
status
=
"
"
;
this
.
setDefaultStatus
(
msg
)
;
let
isText
=
browser
.
documentContentType
&
&
BrowserUtils
.
mimeTypeIsTextBased
(
browser
.
documentContentType
)
;
for
(
let
element
of
this
.
_elementsForViewSource
)
{
if
(
canViewSource
&
&
isText
)
{
element
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
element
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
this
.
_updateElementsForContentType
(
)
;
let
button
=
document
.
getElementById
(
"
characterencoding
-
button
"
)
;
if
(
browser
.
mayEnableCharacterEncodingMenu
)
{
this
.
_menuItemForRepairTextEncoding
.
removeAttribute
(
"
disabled
"
)
;
button
?
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
this
.
_menuItemForRepairTextEncoding
.
setAttribute
(
"
disabled
"
"
true
"
)
;
button
?
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
this
.
isBusy
=
false
;
if
(
this
.
busyUI
)
{
this
.
busyUI
=
false
;
this
.
stopCommand
.
setAttribute
(
"
disabled
"
"
true
"
)
;
CombinedStopReload
.
switchToReload
(
aRequest
aWebProgress
)
;
}
}
}
onLocationChange
(
aWebProgress
aRequest
aLocationURI
aFlags
aIsSimulated
)
{
var
location
=
aLocationURI
?
aLocationURI
.
spec
:
"
"
;
UpdateBackForwardCommands
(
gBrowser
.
webNavigation
)
;
Services
.
obs
.
notifyObservers
(
aWebProgress
"
touchbar
-
location
-
change
"
location
)
;
if
(
!
aWebProgress
.
isTopLevel
)
{
return
;
}
this
.
hideOverLinkImmediately
=
true
;
this
.
setOverLink
(
"
"
)
;
this
.
hideOverLinkImmediately
=
false
;
let
isSameDocument
=
aFlags
&
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
;
if
(
(
location
=
=
"
about
:
blank
"
&
&
BrowserUIUtils
.
checkEmptyPageOrigin
(
gBrowser
.
selectedBrowser
)
)
|
|
location
=
=
"
"
)
{
this
.
reloadCommand
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
else
{
this
.
reloadCommand
.
removeAttribute
(
"
disabled
"
)
;
}
let
isSessionRestore
=
!
!
(
aFlags
&
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SESSION_STORE
)
;
gURLBar
.
setURI
(
aLocationURI
aIsSimulated
isSessionRestore
aRequest
instanceof
Ci
.
nsIChannel
?
aRequest
.
originalURI
:
null
)
;
BookmarkingUI
.
onLocationChange
(
)
;
if
(
!
isSameDocument
)
{
let
bookmarksToolbar
=
gNavToolbox
.
querySelector
(
"
#
PersonalToolbar
"
)
;
setToolbarVisibility
(
bookmarksToolbar
gBookmarksToolbarVisibility
false
false
)
;
}
let
closeOpenPanels
=
selector
=
>
{
for
(
let
panel
of
document
.
querySelectorAll
(
selector
)
)
{
if
(
panel
.
state
!
=
"
closed
"
)
{
panel
.
hidePopup
(
)
;
}
}
}
;
if
(
aIsSimulated
)
{
closeOpenPanels
(
"
panel
[
tabspecific
=
'
true
'
]
"
)
;
}
if
(
!
isSameDocument
)
{
closeOpenPanels
(
"
panel
[
locationspecific
=
'
true
'
]
"
)
;
}
let
screenshotsButtonsDisabled
=
gScreenshots
.
shouldScreenshotsButtonBeDisabled
(
)
;
Services
.
obs
.
notifyObservers
(
window
"
toggle
-
screenshot
-
disable
"
screenshotsButtonsDisabled
)
;
gPermissionPanel
.
onLocationChange
(
)
;
gProtectionsHandler
.
onLocationChange
(
)
;
BrowserPageActions
.
onLocationChange
(
)
;
SafeBrowsingNotificationBox
.
onLocationChange
(
aLocationURI
)
;
SaveToPocket
.
onLocationChange
(
window
)
;
UrlbarProviderSearchTips
.
onLocationChange
(
window
aLocationURI
aWebProgress
aFlags
)
;
gTabletModePageCounter
.
inc
(
)
;
this
.
_updateElementsForContentType
(
)
;
this
.
_updateMacUserActivity
(
window
aLocationURI
aWebProgress
)
;
let
button
=
document
.
getElementById
(
"
characterencoding
-
button
"
)
;
this
.
_menuItemForRepairTextEncoding
.
setAttribute
(
"
disabled
"
"
true
"
)
;
button
?
.
setAttribute
(
"
disabled
"
"
true
"
)
;
if
(
location
=
=
"
about
:
blank
"
&
&
gBrowser
.
selectedTab
.
hasAttribute
(
"
customizemode
"
)
)
{
gCustomizeMode
.
enter
(
)
;
}
else
if
(
CustomizationHandler
.
isEnteringCustomizeMode
|
|
CustomizationHandler
.
isCustomizing
(
)
)
{
gCustomizeMode
.
exit
(
)
;
}
CFRPageActions
.
updatePageActions
(
gBrowser
.
selectedBrowser
)
;
AboutReaderParent
.
updateReaderButton
(
gBrowser
.
selectedBrowser
)
;
if
(
!
gMultiProcessBrowser
)
{
gGestureSupport
.
restoreRotationState
(
)
;
}
if
(
aRequest
)
{
setTimeout
(
function
(
)
{
XULBrowserWindow
.
asyncUpdateUI
(
)
;
}
0
)
;
}
else
{
this
.
asyncUpdateUI
(
)
;
}
if
(
AppConstants
.
MOZ_CRASHREPORTER
&
&
aLocationURI
)
{
let
uri
=
aLocationURI
;
try
{
uri
=
aLocationURI
.
mutate
(
)
.
setUserPass
(
"
"
)
.
finalize
(
)
;
}
catch
(
ex
)
{
}
try
{
gCrashReporter
.
annotateCrashReport
(
"
URL
"
uri
.
spec
)
;
}
catch
(
ex
)
{
if
(
ex
.
result
!
=
Cr
.
NS_ERROR_NOT_INITIALIZED
)
{
throw
ex
;
}
}
}
}
_updateElementsForContentType
(
)
{
let
browser
=
gBrowser
.
selectedBrowser
;
let
isText
=
browser
.
documentContentType
&
&
BrowserUtils
.
mimeTypeIsTextBased
(
browser
.
documentContentType
)
;
for
(
let
element
of
this
.
_elementsForTextBasedTypes
)
{
if
(
isText
)
{
element
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
element
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
let
enableFind
=
browser
.
contentPrincipal
?
.
spec
=
=
"
resource
:
/
/
pdf
.
js
/
web
/
viewer
.
html
"
|
|
(
isText
&
&
BrowserUtils
.
canFindInPage
(
gBrowser
.
currentURI
.
spec
)
)
;
for
(
let
element
of
this
.
_elementsForFind
)
{
if
(
enableFind
)
{
element
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
element
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
}
_updateMacUserActivity
(
win
uri
webProgress
)
{
if
(
!
webProgress
.
isTopLevel
|
|
AppConstants
.
platform
!
=
"
macosx
"
)
{
return
;
}
let
url
=
uri
.
spec
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
url
=
"
"
;
}
let
baseWin
=
win
.
docShell
.
treeOwner
.
QueryInterface
(
Ci
.
nsIBaseWindow
)
;
MacUserActivityUpdater
.
updateLocation
(
url
win
.
gBrowser
.
contentTitle
baseWin
)
;
}
asyncUpdateUI
(
)
{
BrowserSearch
.
updateOpenSearchBadge
(
)
;
}
onStatusChange
(
aWebProgress
aRequest
aStatus
aMessage
)
{
this
.
status
=
aMessage
;
StatusPanel
.
update
(
)
;
}
_state
:
null
_lastLocation
:
null
_event
:
null
_lastLocationForEvent
:
null
_isSecureContext
:
null
onContentBlockingEvent
(
aWebProgress
aRequest
aEvent
aIsSimulated
)
{
let
uri
=
gBrowser
.
currentURI
;
let
spec
=
uri
.
spec
;
if
(
this
.
_event
=
=
aEvent
&
&
this
.
_lastLocationForEvent
=
=
spec
)
{
return
;
}
this
.
_lastLocationForEvent
=
spec
;
if
(
typeof
aIsSimulated
!
=
"
boolean
"
&
&
typeof
aIsSimulated
!
=
"
undefined
"
)
{
throw
new
Error
(
"
onContentBlockingEvent
:
aIsSimulated
receieved
an
unexpected
type
"
)
;
}
gProtectionsHandler
.
onContentBlockingEvent
(
aEvent
aWebProgress
aIsSimulated
this
.
_event
)
;
this
.
_event
=
aEvent
;
}
onSecurityChange
(
aWebProgress
aRequest
aState
aIsSimulated
)
{
let
uri
=
gBrowser
.
currentURI
;
let
spec
=
uri
.
spec
;
let
isSecureContext
=
gBrowser
.
securityUI
.
isSecureContext
;
if
(
this
.
_state
=
=
aState
&
&
this
.
_lastLocation
=
=
spec
&
&
this
.
_isSecureContext
=
=
=
isSecureContext
)
{
gIdentityHandler
.
refreshIdentityBlock
(
)
;
return
;
}
this
.
_state
=
aState
;
this
.
_lastLocation
=
spec
;
this
.
_isSecureContext
=
isSecureContext
;
gURLBar
.
formatValue
(
)
;
try
{
uri
=
Services
.
io
.
createExposableURI
(
uri
)
;
}
catch
(
e
)
{
}
gIdentityHandler
.
updateIdentity
(
this
.
_state
uri
)
;
}
onUpdateCurrentBrowser
:
function
XWB_onUpdateCurrentBrowser
(
aStateFlags
aStatus
aMessage
aTotalProgress
)
{
if
(
FullZoom
.
updateBackgroundTabs
)
{
FullZoom
.
onLocationChange
(
gBrowser
.
currentURI
true
)
;
}
CombinedStopReload
.
onTabSwitch
(
)
;
this
.
hideTooltip
(
)
;
document
.
getElementById
(
"
aHTMLTooltip
"
)
.
hidePopup
(
)
;
var
nsIWebProgressListener
=
Ci
.
nsIWebProgressListener
;
var
loadingDone
=
aStateFlags
&
nsIWebProgressListener
.
STATE_STOP
;
this
.
onStateChange
(
gBrowser
.
webProgress
{
URI
:
gBrowser
.
currentURI
}
loadingDone
?
nsIWebProgressListener
.
STATE_STOP
:
nsIWebProgressListener
.
STATE_START
aStatus
)
;
if
(
loadingDone
)
{
return
;
}
this
.
onStatusChange
(
gBrowser
.
webProgress
null
0
aMessage
)
;
}
}
;
var
LinkTargetDisplay
=
{
get
DELAY_SHOW
(
)
{
delete
this
.
DELAY_SHOW
;
return
(
this
.
DELAY_SHOW
=
Services
.
prefs
.
getIntPref
(
"
browser
.
overlink
-
delay
"
)
)
;
}
DELAY_HIDE
:
250
_timer
:
0
get
_contextMenu
(
)
{
delete
this
.
_contextMenu
;
return
(
this
.
_contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
)
;
}
update
(
)
{
if
(
this
.
_contextMenu
.
state
=
=
"
open
"
|
|
this
.
_contextMenu
.
state
=
=
"
showing
"
)
{
this
.
_contextMenu
.
addEventListener
(
"
popuphidden
"
(
)
=
>
this
.
update
(
)
{
once
:
true
}
)
;
return
;
}
clearTimeout
(
this
.
_timer
)
;
window
.
removeEventListener
(
"
mousemove
"
this
true
)
;
if
(
!
XULBrowserWindow
.
overLink
)
{
if
(
XULBrowserWindow
.
hideOverLinkImmediately
)
{
this
.
_hide
(
)
;
}
else
{
this
.
_timer
=
setTimeout
(
this
.
_hide
.
bind
(
this
)
this
.
DELAY_HIDE
)
;
}
return
;
}
if
(
StatusPanel
.
isVisible
)
{
StatusPanel
.
update
(
)
;
}
else
{
this
.
_showDelayed
(
)
;
window
.
addEventListener
(
"
mousemove
"
this
true
)
;
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
mousemove
"
:
clearTimeout
(
this
.
_timer
)
;
this
.
_showDelayed
(
)
;
break
;
}
}
_showDelayed
(
)
{
this
.
_timer
=
setTimeout
(
function
(
self
)
{
StatusPanel
.
update
(
)
;
window
.
removeEventListener
(
"
mousemove
"
self
true
)
;
}
this
.
DELAY_SHOW
this
)
;
}
_hide
(
)
{
clearTimeout
(
this
.
_timer
)
;
StatusPanel
.
update
(
)
;
}
}
;
var
CombinedStopReload
=
{
ensureInitialized
(
)
{
if
(
this
.
_initialized
)
{
return
true
;
}
if
(
this
.
_destroyed
)
{
return
false
;
}
let
reload
=
document
.
getElementById
(
"
reload
-
button
"
)
;
let
stop
=
document
.
getElementById
(
"
stop
-
button
"
)
;
if
(
!
stop
|
|
!
reload
)
{
return
false
;
}
this
.
_initialized
=
true
;
if
(
XULBrowserWindow
.
stopCommand
.
getAttribute
(
"
disabled
"
)
!
=
"
true
"
)
{
reload
.
setAttribute
(
"
displaystop
"
"
true
"
)
;
}
stop
.
addEventListener
(
"
click
"
this
)
;
for
(
let
button
of
[
stop
reload
]
)
{
if
(
button
.
hasAttribute
(
"
disabled
"
)
)
{
let
command
=
document
.
getElementById
(
button
.
getAttribute
(
"
command
"
)
)
;
if
(
!
command
.
hasAttribute
(
"
disabled
"
)
)
{
button
.
removeAttribute
(
"
disabled
"
)
;
}
}
}
this
.
reload
=
reload
;
this
.
stop
=
stop
;
this
.
stopReloadContainer
=
this
.
reload
.
parentNode
;
this
.
timeWhenSwitchedToStop
=
0
;
this
.
stopReloadContainer
.
addEventListener
(
"
animationend
"
this
)
;
this
.
stopReloadContainer
.
addEventListener
(
"
animationcancel
"
this
)
;
return
true
;
}
uninit
(
)
{
this
.
_destroyed
=
true
;
if
(
!
this
.
_initialized
)
{
return
;
}
this
.
_cancelTransition
(
)
;
this
.
stop
.
removeEventListener
(
"
click
"
this
)
;
this
.
stopReloadContainer
.
removeEventListener
(
"
animationend
"
this
)
;
this
.
stopReloadContainer
.
removeEventListener
(
"
animationcancel
"
this
)
;
this
.
stopReloadContainer
=
null
;
this
.
reload
=
null
;
this
.
stop
=
null
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
click
"
:
if
(
event
.
button
=
=
0
&
&
!
this
.
stop
.
disabled
)
{
this
.
_stopClicked
=
true
;
}
break
;
case
"
animationcancel
"
:
case
"
animationend
"
:
{
if
(
event
.
target
.
classList
.
contains
(
"
toolbarbutton
-
animatable
-
image
"
)
&
&
(
event
.
animationName
=
=
"
reload
-
to
-
stop
"
|
|
event
.
animationName
=
=
"
stop
-
to
-
reload
"
)
)
{
this
.
stopReloadContainer
.
removeAttribute
(
"
animate
"
)
;
}
}
}
}
onTabSwitch
(
)
{
this
.
timeWhenSwitchedToStop
=
window
.
performance
.
now
(
)
;
}
switchToStop
(
aRequest
aWebProgress
)
{
if
(
!
this
.
ensureInitialized
(
)
|
|
!
this
.
_shouldSwitch
(
aRequest
aWebProgress
)
)
{
return
;
}
if
(
aRequest
instanceof
Ci
.
nsIRequest
)
{
this
.
timeWhenSwitchedToStop
=
window
.
performance
.
now
(
)
;
}
let
shouldAnimate
=
aRequest
instanceof
Ci
.
nsIRequest
&
&
aWebProgress
.
isTopLevel
&
&
aWebProgress
.
isLoadingDocument
&
&
!
gBrowser
.
tabAnimationsInProgress
&
&
!
gReduceMotion
&
&
this
.
stopReloadContainer
.
closest
(
"
#
nav
-
bar
-
customization
-
target
"
)
;
this
.
_cancelTransition
(
)
;
if
(
shouldAnimate
)
{
BrowserUIUtils
.
setToolbarButtonHeightProperty
(
this
.
stopReloadContainer
)
;
this
.
stopReloadContainer
.
setAttribute
(
"
animate
"
"
true
"
)
;
}
else
{
this
.
stopReloadContainer
.
removeAttribute
(
"
animate
"
)
;
}
this
.
reload
.
setAttribute
(
"
displaystop
"
"
true
"
)
;
}
switchToReload
(
aRequest
aWebProgress
)
{
if
(
!
this
.
ensureInitialized
(
)
|
|
!
this
.
reload
.
hasAttribute
(
"
displaystop
"
)
)
{
return
;
}
let
shouldAnimate
=
aRequest
instanceof
Ci
.
nsIRequest
&
&
aWebProgress
.
isTopLevel
&
&
!
aWebProgress
.
isLoadingDocument
&
&
!
gBrowser
.
tabAnimationsInProgress
&
&
!
gReduceMotion
&
&
this
.
_loadTimeExceedsMinimumForAnimation
(
)
&
&
this
.
stopReloadContainer
.
closest
(
"
#
nav
-
bar
-
customization
-
target
"
)
;
if
(
shouldAnimate
)
{
BrowserUIUtils
.
setToolbarButtonHeightProperty
(
this
.
stopReloadContainer
)
;
this
.
stopReloadContainer
.
setAttribute
(
"
animate
"
"
true
"
)
;
}
else
{
this
.
stopReloadContainer
.
removeAttribute
(
"
animate
"
)
;
}
this
.
reload
.
removeAttribute
(
"
displaystop
"
)
;
if
(
!
shouldAnimate
|
|
this
.
_stopClicked
)
{
this
.
_stopClicked
=
false
;
this
.
_cancelTransition
(
)
;
this
.
reload
.
disabled
=
XULBrowserWindow
.
reloadCommand
.
getAttribute
(
"
disabled
"
)
=
=
"
true
"
;
return
;
}
if
(
this
.
_timer
)
{
return
;
}
this
.
reload
.
disabled
=
true
;
this
.
_timer
=
setTimeout
(
function
(
self
)
{
self
.
_timer
=
0
;
self
.
reload
.
disabled
=
XULBrowserWindow
.
reloadCommand
.
getAttribute
(
"
disabled
"
)
=
=
"
true
"
;
}
650
this
)
;
}
_loadTimeExceedsMinimumForAnimation
(
)
{
return
(
this
.
timeWhenSwitchedToStop
&
&
window
.
performance
.
now
(
)
-
this
.
timeWhenSwitchedToStop
>
150
)
;
}
_shouldSwitch
(
aRequest
aWebProgress
)
{
if
(
aRequest
&
&
aRequest
.
originalURI
&
&
(
aRequest
.
originalURI
.
schemeIs
(
"
chrome
"
)
|
|
(
aRequest
.
originalURI
.
schemeIs
(
"
about
"
)
&
&
aWebProgress
.
isTopLevel
&
&
!
aRequest
.
originalURI
.
spec
.
startsWith
(
"
about
:
reader
"
)
)
)
)
{
return
false
;
}
return
true
;
}
_cancelTransition
(
)
{
if
(
this
.
_timer
)
{
clearTimeout
(
this
.
_timer
)
;
this
.
_timer
=
0
;
}
}
}
;
var
TabsProgressListener
=
{
onStateChange
(
aBrowser
aWebProgress
aRequest
aStateFlags
aStatus
)
{
if
(
aWebProgress
.
isTopLevel
&
&
(
!
aRequest
.
originalURI
|
|
aRequest
.
originalURI
.
scheme
!
=
"
about
"
)
)
{
let
histogram
=
"
FX_PAGE_LOAD_MS_2
"
;
let
recordLoadTelemetry
=
true
;
if
(
aWebProgress
.
loadType
&
Ci
.
nsIDocShell
.
LOAD_CMD_RELOAD
)
{
if
(
aWebProgress
.
loadType
&
(
kSkipCacheFlags
<
<
16
)
)
{
histogram
=
"
FX_PAGE_RELOAD_SKIP_CACHE_MS
"
;
}
else
if
(
aWebProgress
.
loadType
=
=
Ci
.
nsIDocShell
.
LOAD_CMD_RELOAD
)
{
histogram
=
"
FX_PAGE_RELOAD_NORMAL_MS
"
;
}
else
{
recordLoadTelemetry
=
false
;
}
}
let
stopwatchRunning
=
TelemetryStopwatch
.
running
(
histogram
aBrowser
)
;
if
(
aStateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_IS_WINDOW
)
{
if
(
aStateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_START
)
{
if
(
stopwatchRunning
)
{
if
(
recordLoadTelemetry
)
{
TelemetryStopwatch
.
cancel
(
histogram
aBrowser
)
;
}
}
if
(
recordLoadTelemetry
)
{
TelemetryStopwatch
.
start
(
histogram
aBrowser
)
;
}
Services
.
telemetry
.
getHistogramById
(
"
FX_TOTAL_TOP_VISITS
"
)
.
add
(
true
)
;
}
else
if
(
aStateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
&
&
stopwatchRunning
)
{
if
(
recordLoadTelemetry
)
{
TelemetryStopwatch
.
finish
(
histogram
aBrowser
)
;
BrowserTelemetryUtils
.
recordSiteOriginTelemetry
(
browserWindows
(
)
)
;
}
}
}
else
if
(
aStateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
&
&
aStatus
=
=
Cr
.
NS_BINDING_ABORTED
&
&
stopwatchRunning
)
{
if
(
recordLoadTelemetry
)
{
TelemetryStopwatch
.
cancel
(
histogram
aBrowser
)
;
}
}
}
}
onLocationChange
(
aBrowser
aWebProgress
aRequest
aLocationURI
aFlags
)
{
if
(
aFlags
&
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
)
{
aBrowser
.
sendMessageToActor
(
"
Reader
:
PushState
"
{
isArticle
:
aBrowser
.
isArticle
}
"
AboutReader
"
)
;
return
;
}
if
(
!
aWebProgress
.
isTopLevel
)
{
return
;
}
if
(
!
Object
.
getOwnPropertyDescriptor
(
window
"
PopupNotifications
"
)
.
get
)
{
PopupNotifications
.
locationChange
(
aBrowser
)
;
}
let
tab
=
gBrowser
.
getTabForBrowser
(
aBrowser
)
;
if
(
tab
&
&
tab
.
_sharingState
)
{
gBrowser
.
resetBrowserSharing
(
aBrowser
)
;
}
gBrowser
.
readNotificationBox
(
aBrowser
)
?
.
removeTransientNotifications
(
)
;
FullZoom
.
onLocationChange
(
aLocationURI
false
aBrowser
)
;
CaptivePortalWatcher
.
onLocationChange
(
aBrowser
)
;
}
onLinkIconAvailable
(
browser
dataURI
iconURI
)
{
if
(
!
iconURI
)
{
return
;
}
if
(
browser
=
=
gBrowser
.
selectedBrowser
)
{
BrowserSearch
.
updateOpenSearchBadge
(
)
;
}
}
}
;
function
nsBrowserAccess
(
)
{
}
nsBrowserAccess
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIBrowserDOMWindow
"
]
)
_openURIInNewTab
(
aURI
aReferrerInfo
aIsPrivate
aIsExternal
aForceNotRemote
=
false
aUserContextId
=
Ci
.
nsIScriptSecurityManager
.
DEFAULT_USER_CONTEXT_ID
aOpenWindowInfo
=
null
aOpenerBrowser
=
null
aTriggeringPrincipal
=
null
aName
=
"
"
aCsp
=
null
aSkipLoad
=
false
)
{
let
win
needToFocusWin
;
if
(
window
.
toolbar
.
visible
)
{
win
=
window
;
}
else
{
win
=
BrowserWindowTracker
.
getTopWindow
(
{
private
:
aIsPrivate
}
)
;
needToFocusWin
=
true
;
}
if
(
!
win
)
{
return
null
;
}
if
(
aIsExternal
&
&
(
!
aURI
|
|
aURI
.
spec
=
=
"
about
:
blank
"
)
)
{
win
.
BrowserOpenTab
(
)
;
win
.
focus
(
)
;
return
win
.
gBrowser
.
selectedBrowser
;
}
let
loadInBackground
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
loadDivertedInBackground
"
)
;
let
tab
=
win
.
gBrowser
.
loadOneTab
(
aURI
?
aURI
.
spec
:
"
about
:
blank
"
{
triggeringPrincipal
:
aTriggeringPrincipal
referrerInfo
:
aReferrerInfo
userContextId
:
aUserContextId
fromExternal
:
aIsExternal
inBackground
:
loadInBackground
forceNotRemote
:
aForceNotRemote
openWindowInfo
:
aOpenWindowInfo
openerBrowser
:
aOpenerBrowser
name
:
aName
csp
:
aCsp
skipLoad
:
aSkipLoad
}
)
;
let
browser
=
win
.
gBrowser
.
getBrowserForTab
(
tab
)
;
if
(
needToFocusWin
|
|
(
!
loadInBackground
&
&
aIsExternal
)
)
{
win
.
focus
(
)
;
}
return
browser
;
}
createContentWindow
(
aURI
aOpenWindowInfo
aWhere
aFlags
aTriggeringPrincipal
aCsp
)
{
return
this
.
getContentWindowOrOpenURI
(
null
aOpenWindowInfo
aWhere
aFlags
aTriggeringPrincipal
aCsp
true
)
;
}
openURI
(
aURI
aOpenWindowInfo
aWhere
aFlags
aTriggeringPrincipal
aCsp
)
{
if
(
!
aURI
)
{
Cu
.
reportError
(
"
openURI
should
only
be
called
with
a
valid
URI
"
)
;
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_FAILURE
)
;
}
return
this
.
getContentWindowOrOpenURI
(
aURI
aOpenWindowInfo
aWhere
aFlags
aTriggeringPrincipal
aCsp
false
)
;
}
getContentWindowOrOpenURI
(
aURI
aOpenWindowInfo
aWhere
aFlags
aTriggeringPrincipal
aCsp
aSkipLoad
)
{
var
browsingContext
=
null
;
var
isExternal
=
!
!
(
aFlags
&
Ci
.
nsIBrowserDOMWindow
.
OPEN_EXTERNAL
)
;
if
(
aOpenWindowInfo
&
&
isExternal
)
{
Cu
.
reportError
(
"
nsBrowserAccess
.
openURI
did
not
expect
aOpenWindowInfo
to
be
"
+
"
passed
if
the
context
is
OPEN_EXTERNAL
.
"
)
;
throw
Components
.
Exception
(
"
"
Cr
.
NS_ERROR_FAILURE
)
;
}
if
(
isExternal
&
&
aURI
&
&
aURI
.
schemeIs
(
"
chrome
"
)
)
{
dump
(
"
use
-
-
chrome
command
-
line
option
to
load
external
chrome
urls
\
n
"
)
;
return
null
;
}
if
(
aWhere
=
=
Ci
.
nsIBrowserDOMWindow
.
OPEN_DEFAULTWINDOW
)
{
if
(
isExternal
&
&
Services
.
prefs
.
prefHasUserValue
(
"
browser
.
link
.
open_newwindow
.
override
.
external
"
)
)
{
aWhere
=
Services
.
prefs
.
getIntPref
(
"
browser
.
link
.
open_newwindow
.
override
.
external
"
)
;
}
else
{
aWhere
=
Services
.
prefs
.
getIntPref
(
"
browser
.
link
.
open_newwindow
"
)
;
}
}
let
referrerInfo
;
if
(
aFlags
&
Ci
.
nsIBrowserDOMWindow
.
OPEN_NO_REFERRER
)
{
referrerInfo
=
new
ReferrerInfo
(
Ci
.
nsIReferrerInfo
.
EMPTY
false
null
)
;
}
else
if
(
aOpenWindowInfo
&
&
aOpenWindowInfo
.
parent
&
&
aOpenWindowInfo
.
parent
.
window
)
{
referrerInfo
=
new
ReferrerInfo
(
aOpenWindowInfo
.
parent
.
window
.
document
.
referrerInfo
.
referrerPolicy
true
makeURI
(
aOpenWindowInfo
.
parent
.
window
.
location
.
href
)
)
;
}
else
{
referrerInfo
=
new
ReferrerInfo
(
Ci
.
nsIReferrerInfo
.
EMPTY
true
null
)
;
}
let
isPrivate
=
aOpenWindowInfo
?
aOpenWindowInfo
.
originAttributes
.
privateBrowsingId
!
=
0
:
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
;
switch
(
aWhere
)
{
case
Ci
.
nsIBrowserDOMWindow
.
OPEN_NEWWINDOW
:
var
url
=
aURI
&
&
aURI
.
spec
;
let
features
=
"
all
dialog
=
no
"
;
if
(
isPrivate
)
{
features
+
=
"
private
"
;
}
try
{
let
extraOptions
=
Cc
[
"
mozilla
.
org
/
hash
-
property
-
bag
;
1
"
]
.
createInstance
(
Ci
.
nsIWritablePropertyBag2
)
;
extraOptions
.
setPropertyAsBool
(
"
fromExternal
"
isExternal
)
;
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
features
url
extraOptions
null
null
null
null
null
null
aTriggeringPrincipal
null
aCsp
aOpenWindowInfo
)
;
browsingContext
=
null
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
break
;
case
Ci
.
nsIBrowserDOMWindow
.
OPEN_NEWTAB
:
{
let
forceNotRemote
=
aOpenWindowInfo
&
&
!
aOpenWindowInfo
.
isRemote
;
let
userContextId
=
aOpenWindowInfo
?
aOpenWindowInfo
.
originAttributes
.
userContextId
:
Ci
.
nsIScriptSecurityManager
.
DEFAULT_USER_CONTEXT_ID
;
let
browser
=
this
.
_openURIInNewTab
(
aURI
referrerInfo
isPrivate
isExternal
forceNotRemote
userContextId
aOpenWindowInfo
aOpenWindowInfo
?
.
parent
?
.
top
.
embedderElement
aTriggeringPrincipal
"
"
aCsp
aSkipLoad
)
;
if
(
browser
)
{
browsingContext
=
browser
.
browsingContext
;
}
break
;
}
case
Ci
.
nsIBrowserDOMWindow
.
OPEN_PRINT_BROWSER
:
{
let
browser
=
PrintUtils
.
handleStaticCloneCreatedForPrint
(
aOpenWindowInfo
)
;
if
(
browser
)
{
browsingContext
=
browser
.
browsingContext
;
}
break
;
}
default
:
browsingContext
=
window
.
gBrowser
.
selectedBrowser
.
browsingContext
;
if
(
aURI
)
{
let
loadFlags
=
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_NONE
;
if
(
isExternal
)
{
loadFlags
|
=
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_FROM_EXTERNAL
;
}
else
if
(
!
aTriggeringPrincipal
.
isSystemPrincipal
)
{
loadFlags
|
=
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_FIRST_LOAD
;
}
gBrowser
.
loadURI
(
aURI
.
spec
{
triggeringPrincipal
:
aTriggeringPrincipal
csp
:
aCsp
loadFlags
referrerInfo
}
)
;
}
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
loadDivertedInBackground
"
)
)
{
window
.
focus
(
)
;
}
}
return
browsingContext
;
}
createContentWindowInFrame
:
function
browser_createContentWindowInFrame
(
aURI
aParams
aWhere
aFlags
aName
)
{
return
this
.
getContentWindowOrOpenURIInFrame
(
null
aParams
aWhere
aFlags
aName
true
)
;
}
openURIInFrame
:
function
browser_openURIInFrame
(
aURI
aParams
aWhere
aFlags
aName
)
{
return
this
.
getContentWindowOrOpenURIInFrame
(
aURI
aParams
aWhere
aFlags
aName
false
)
;
}
getContentWindowOrOpenURIInFrame
:
function
browser_getContentWindowOrOpenURIInFrame
(
aURI
aParams
aWhere
aFlags
aName
aSkipLoad
)
{
if
(
aWhere
=
=
Ci
.
nsIBrowserDOMWindow
.
OPEN_PRINT_BROWSER
)
{
return
PrintUtils
.
handleStaticCloneCreatedForPrint
(
aParams
.
openWindowInfo
)
;
}
if
(
aWhere
!
=
Ci
.
nsIBrowserDOMWindow
.
OPEN_NEWTAB
)
{
dump
(
"
Error
:
openURIInFrame
can
only
open
in
new
tabs
or
print
"
)
;
return
null
;
}
var
isExternal
=
!
!
(
aFlags
&
Ci
.
nsIBrowserDOMWindow
.
OPEN_EXTERNAL
)
;
var
userContextId
=
aParams
.
openerOriginAttributes
&
&
"
userContextId
"
in
aParams
.
openerOriginAttributes
?
aParams
.
openerOriginAttributes
.
userContextId
:
Ci
.
nsIScriptSecurityManager
.
DEFAULT_USER_CONTEXT_ID
;
return
this
.
_openURIInNewTab
(
aURI
aParams
.
referrerInfo
aParams
.
isPrivate
isExternal
false
userContextId
aParams
.
openWindowInfo
aParams
.
openerBrowser
aParams
.
triggeringPrincipal
aName
aParams
.
csp
aSkipLoad
)
;
}
canClose
(
)
{
return
CanCloseWindow
(
)
;
}
get
tabCount
(
)
{
return
gBrowser
.
tabs
.
length
;
}
}
;
function
showFullScreenViewContextMenuItems
(
popup
)
{
for
(
let
node
of
popup
.
querySelectorAll
(
'
[
contexttype
=
"
fullscreen
"
]
'
)
)
{
node
.
hidden
=
!
window
.
fullScreen
;
}
let
autoHide
=
popup
.
querySelector
(
"
.
fullscreen
-
context
-
autohide
"
)
;
if
(
autoHide
)
{
FullScreen
.
updateAutohideMenuitem
(
autoHide
)
;
}
}
function
onViewToolbarsPopupShowing
(
aEvent
aInsertPoint
)
{
var
popup
=
aEvent
.
target
;
if
(
popup
!
=
aEvent
.
currentTarget
)
{
return
;
}
for
(
var
i
=
popup
.
children
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
var
deadItem
=
popup
.
children
[
i
]
;
if
(
deadItem
.
hasAttribute
(
"
toolbarId
"
)
)
{
popup
.
removeChild
(
deadItem
)
;
}
}
MozXULElement
.
insertFTLIfNeeded
(
"
browser
/
toolbarContextMenu
.
ftl
"
)
;
let
firstMenuItem
=
aInsertPoint
|
|
popup
.
firstElementChild
;
let
toolbarNodes
=
gNavToolbox
.
querySelectorAll
(
"
toolbar
"
)
;
for
(
let
toolbar
of
toolbarNodes
)
{
if
(
!
toolbar
.
hasAttribute
(
"
toolbarname
"
)
)
{
continue
;
}
if
(
toolbar
.
id
=
=
"
PersonalToolbar
"
)
{
let
menu
=
BookmarkingUI
.
buildBookmarksToolbarSubmenu
(
toolbar
)
;
popup
.
insertBefore
(
menu
firstMenuItem
)
;
}
else
{
let
menuItem
=
document
.
createXULElement
(
"
menuitem
"
)
;
menuItem
.
setAttribute
(
"
id
"
"
toggle_
"
+
toolbar
.
id
)
;
menuItem
.
setAttribute
(
"
toolbarId
"
toolbar
.
id
)
;
menuItem
.
setAttribute
(
"
type
"
"
checkbox
"
)
;
menuItem
.
setAttribute
(
"
label
"
toolbar
.
getAttribute
(
"
toolbarname
"
)
)
;
let
hidingAttribute
=
toolbar
.
getAttribute
(
"
type
"
)
=
=
"
menubar
"
?
"
autohide
"
:
"
collapsed
"
;
menuItem
.
setAttribute
(
"
checked
"
toolbar
.
getAttribute
(
hidingAttribute
)
!
=
"
true
"
)
;
menuItem
.
setAttribute
(
"
accesskey
"
toolbar
.
getAttribute
(
"
accesskey
"
)
)
;
if
(
popup
.
id
!
=
"
toolbar
-
context
-
menu
"
)
{
menuItem
.
setAttribute
(
"
key
"
toolbar
.
getAttribute
(
"
key
"
)
)
;
}
popup
.
insertBefore
(
menuItem
firstMenuItem
)
;
menuItem
.
addEventListener
(
"
command
"
onViewToolbarCommand
)
;
}
}
let
moveToPanel
=
popup
.
querySelector
(
"
.
customize
-
context
-
moveToPanel
"
)
;
let
removeFromToolbar
=
popup
.
querySelector
(
"
.
customize
-
context
-
removeFromToolbar
"
)
;
showFullScreenViewContextMenuItems
(
popup
)
;
if
(
!
moveToPanel
|
|
!
removeFromToolbar
)
{
return
;
}
let
toolbarItem
=
popup
.
triggerNode
;
if
(
toolbarItem
&
&
toolbarItem
.
localName
=
=
"
toolbarpaletteitem
"
)
{
toolbarItem
=
toolbarItem
.
firstElementChild
;
}
else
if
(
toolbarItem
&
&
toolbarItem
.
localName
!
=
"
toolbar
"
)
{
while
(
toolbarItem
&
&
toolbarItem
.
parentElement
)
{
let
parent
=
toolbarItem
.
parentElement
;
if
(
(
parent
.
classList
&
&
parent
.
classList
.
contains
(
"
customization
-
target
"
)
)
|
|
parent
.
getAttribute
(
"
overflowfortoolbar
"
)
|
|
parent
.
localName
=
=
"
toolbarpaletteitem
"
|
|
parent
.
localName
=
=
"
toolbar
"
)
{
break
;
}
toolbarItem
=
parent
;
}
}
else
{
toolbarItem
=
null
;
}
let
showTabStripItems
=
toolbarItem
&
&
toolbarItem
.
id
=
=
"
tabbrowser
-
tabs
"
;
for
(
let
node
of
popup
.
querySelectorAll
(
'
menuitem
[
contexttype
=
"
toolbaritem
"
]
'
)
)
{
node
.
hidden
=
showTabStripItems
;
}
for
(
let
node
of
popup
.
querySelectorAll
(
'
menuitem
[
contexttype
=
"
tabbar
"
]
'
)
)
{
node
.
hidden
=
!
showTabStripItems
;
}
document
.
getElementById
(
"
toolbar
-
context
-
menu
"
)
.
querySelectorAll
(
"
[
data
-
lazy
-
l10n
-
id
]
"
)
.
forEach
(
el
=
>
{
el
.
setAttribute
(
"
data
-
l10n
-
id
"
el
.
getAttribute
(
"
data
-
lazy
-
l10n
-
id
"
)
)
;
el
.
removeAttribute
(
"
data
-
lazy
-
l10n
-
id
"
)
;
}
)
;
let
menuSeparator
=
document
.
getElementById
(
"
toolbarItemsMenuSeparator
"
)
;
menuSeparator
.
hidden
=
false
;
document
.
getElementById
(
"
toolbarNavigatorItemsMenuSeparator
"
)
.
hidden
=
!
showTabStripItems
;
if
(
!
CustomizationHandler
.
isCustomizing
(
)
&
&
CustomizableUI
.
isSpecialWidget
(
toolbarItem
?
.
id
|
|
"
"
)
)
{
moveToPanel
.
hidden
=
true
;
removeFromToolbar
.
hidden
=
true
;
menuSeparator
.
hidden
=
!
showTabStripItems
;
}
if
(
showTabStripItems
)
{
let
multipleTabsSelected
=
!
!
gBrowser
.
multiSelectedTabsCount
;
document
.
getElementById
(
"
toolbar
-
context
-
bookmarkSelectedTabs
"
)
.
hidden
=
!
multipleTabsSelected
;
document
.
getElementById
(
"
toolbar
-
context
-
bookmarkSelectedTab
"
)
.
hidden
=
multipleTabsSelected
;
document
.
getElementById
(
"
toolbar
-
context
-
reloadSelectedTabs
"
)
.
hidden
=
!
multipleTabsSelected
;
document
.
getElementById
(
"
toolbar
-
context
-
reloadSelectedTab
"
)
.
hidden
=
multipleTabsSelected
;
document
.
getElementById
(
"
toolbar
-
context
-
selectAllTabs
"
)
.
disabled
=
gBrowser
.
allTabsSelected
(
)
;
document
.
getElementById
(
"
toolbar
-
context
-
undoCloseTab
"
)
.
disabled
=
SessionStore
.
getClosedTabCount
(
window
)
=
=
0
;
return
;
}
let
movable
=
toolbarItem
&
&
toolbarItem
.
id
&
&
CustomizableUI
.
isWidgetRemovable
(
toolbarItem
)
;
if
(
movable
)
{
if
(
CustomizableUI
.
isSpecialWidget
(
toolbarItem
.
id
)
)
{
moveToPanel
.
setAttribute
(
"
disabled
"
true
)
;
}
else
{
moveToPanel
.
removeAttribute
(
"
disabled
"
)
;
}
removeFromToolbar
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
moveToPanel
.
setAttribute
(
"
disabled
"
true
)
;
removeFromToolbar
.
setAttribute
(
"
disabled
"
true
)
;
}
}
function
onViewToolbarCommand
(
aEvent
)
{
let
node
=
aEvent
.
originalTarget
;
let
menuId
;
let
toolbarId
;
let
isVisible
;
if
(
node
.
dataset
.
bookmarksToolbarVisibility
)
{
isVisible
=
node
.
dataset
.
visibilityEnum
;
toolbarId
=
"
PersonalToolbar
"
;
menuId
=
node
.
parentNode
.
parentNode
.
parentNode
.
id
;
Services
.
prefs
.
setCharPref
(
"
browser
.
toolbars
.
bookmarks
.
visibility
"
isVisible
)
;
}
else
{
menuId
=
node
.
parentNode
.
id
;
toolbarId
=
node
.
getAttribute
(
"
toolbarId
"
)
;
isVisible
=
node
.
getAttribute
(
"
checked
"
)
=
=
"
true
"
;
}
CustomizableUI
.
setToolbarVisibility
(
toolbarId
isVisible
)
;
BrowserUsageTelemetry
.
recordToolbarVisibility
(
toolbarId
isVisible
menuId
)
;
}
function
setToolbarVisibility
(
toolbar
isVisible
persist
=
true
animated
=
true
)
{
let
hidingAttribute
;
if
(
toolbar
.
getAttribute
(
"
type
"
)
=
=
"
menubar
"
)
{
hidingAttribute
=
"
autohide
"
;
if
(
AppConstants
.
platform
=
=
"
linux
"
)
{
Services
.
prefs
.
setBoolPref
(
"
ui
.
key
.
menuAccessKeyFocuses
"
!
isVisible
)
;
}
}
else
{
hidingAttribute
=
"
collapsed
"
;
}
if
(
persist
&
&
toolbar
.
id
=
=
"
PersonalToolbar
"
)
{
let
prefValue
;
if
(
typeof
isVisible
=
=
"
string
"
)
{
prefValue
=
isVisible
;
}
else
{
prefValue
=
isVisible
?
"
always
"
:
"
never
"
;
}
Services
.
prefs
.
setCharPref
(
"
browser
.
toolbars
.
bookmarks
.
visibility
"
prefValue
)
;
}
if
(
typeof
isVisible
=
=
"
string
"
)
{
switch
(
isVisible
)
{
case
"
always
"
:
isVisible
=
true
;
break
;
case
"
never
"
:
isVisible
=
false
;
break
;
case
"
newtab
"
:
let
currentURI
=
gBrowser
?
.
currentURI
;
if
(
!
gBrowserInit
.
domContentLoaded
)
{
let
uriToLoad
=
gBrowserInit
.
uriToLoadPromise
;
if
(
uriToLoad
)
{
if
(
Array
.
isArray
(
uriToLoad
)
)
{
uriToLoad
=
uriToLoad
[
0
]
;
}
try
{
currentURI
=
Services
.
io
.
newURI
(
uriToLoad
)
;
}
catch
(
ex
)
{
}
}
}
isVisible
=
!
!
currentURI
&
&
BookmarkingUI
.
isOnNewTabPage
(
{
currentURI
}
)
;
break
;
}
}
if
(
toolbar
.
getAttribute
(
hidingAttribute
)
=
=
(
!
isVisible
)
.
toString
(
)
)
{
return
;
}
toolbar
.
classList
.
toggle
(
"
instant
"
!
animated
)
;
toolbar
.
setAttribute
(
hidingAttribute
!
isVisible
)
;
if
(
persist
&
&
toolbar
.
id
!
=
"
PersonalToolbar
"
)
{
Services
.
xulStore
.
persist
(
toolbar
hidingAttribute
)
;
}
let
eventParams
=
{
detail
:
{
visible
:
isVisible
}
bubbles
:
true
}
;
let
event
=
new
CustomEvent
(
"
toolbarvisibilitychange
"
eventParams
)
;
toolbar
.
dispatchEvent
(
event
)
;
}
function
updateToggleControlLabel
(
control
)
{
if
(
!
control
.
hasAttribute
(
"
label
-
checked
"
)
)
{
return
;
}
if
(
!
control
.
hasAttribute
(
"
label
-
unchecked
"
)
)
{
control
.
setAttribute
(
"
label
-
unchecked
"
control
.
getAttribute
(
"
label
"
)
)
;
}
let
prefix
=
control
.
getAttribute
(
"
checked
"
)
=
=
"
true
"
?
"
"
:
"
un
"
;
control
.
setAttribute
(
"
label
"
control
.
getAttribute
(
label
-
{
prefix
}
checked
)
)
;
}
var
TabletModeUpdater
=
{
init
(
)
{
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
)
{
this
.
update
(
WindowsUIUtils
.
inTabletMode
)
;
Services
.
obs
.
addObserver
(
this
"
tablet
-
mode
-
change
"
)
;
}
}
uninit
(
)
{
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
)
{
Services
.
obs
.
removeObserver
(
this
"
tablet
-
mode
-
change
"
)
;
}
}
observe
(
subject
topic
data
)
{
this
.
update
(
data
=
=
"
tablet
-
mode
"
)
;
}
update
(
isInTabletMode
)
{
let
wasInTabletMode
=
document
.
documentElement
.
hasAttribute
(
"
tabletmode
"
)
;
if
(
isInTabletMode
)
{
document
.
documentElement
.
setAttribute
(
"
tabletmode
"
"
true
"
)
;
}
else
{
document
.
documentElement
.
removeAttribute
(
"
tabletmode
"
)
;
}
if
(
wasInTabletMode
!
=
isInTabletMode
)
{
gUIDensity
.
update
(
)
;
}
}
}
;
var
gTabletModePageCounter
=
{
enabled
:
false
inc
(
)
{
this
.
enabled
=
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
.
0
"
)
;
if
(
!
this
.
enabled
)
{
this
.
inc
=
(
)
=
>
{
}
;
return
;
}
this
.
inc
=
this
.
_realInc
;
this
.
inc
(
)
;
}
_desktopCount
:
0
_tabletCount
:
0
_realInc
(
)
{
let
inTabletMode
=
document
.
documentElement
.
hasAttribute
(
"
tabletmode
"
)
;
this
[
inTabletMode
?
"
_tabletCount
"
:
"
_desktopCount
"
]
+
+
;
}
finish
(
)
{
if
(
this
.
enabled
)
{
let
histogram
=
Services
.
telemetry
.
getKeyedHistogramById
(
"
FX_TABLETMODE_PAGE_LOAD
"
)
;
histogram
.
add
(
"
tablet
"
this
.
_tabletCount
)
;
histogram
.
add
(
"
desktop
"
this
.
_desktopCount
)
;
}
}
}
;
function
displaySecurityInfo
(
)
{
BrowserPageInfo
(
null
"
securityTab
"
)
;
}
var
gUIDensity
=
{
MODE_NORMAL
:
0
MODE_COMPACT
:
1
MODE_TOUCH
:
2
uiDensityPref
:
"
browser
.
uidensity
"
autoTouchModePref
:
"
browser
.
touchmode
.
auto
"
init
(
)
{
this
.
update
(
)
;
Services
.
prefs
.
addObserver
(
this
.
uiDensityPref
this
)
;
Services
.
prefs
.
addObserver
(
this
.
autoTouchModePref
this
)
;
}
uninit
(
)
{
Services
.
prefs
.
removeObserver
(
this
.
uiDensityPref
this
)
;
Services
.
prefs
.
removeObserver
(
this
.
autoTouchModePref
this
)
;
}
observe
(
aSubject
aTopic
aPrefName
)
{
if
(
aTopic
!
=
"
nsPref
:
changed
"
|
|
(
aPrefName
!
=
this
.
uiDensityPref
&
&
aPrefName
!
=
this
.
autoTouchModePref
)
)
{
return
;
}
this
.
update
(
)
;
}
getCurrentDensity
(
)
{
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
&
&
WindowsUIUtils
.
inTabletMode
&
&
Services
.
prefs
.
getBoolPref
(
this
.
autoTouchModePref
)
)
{
return
{
mode
:
this
.
MODE_TOUCH
overridden
:
true
}
;
}
return
{
mode
:
Services
.
prefs
.
getIntPref
(
this
.
uiDensityPref
)
overridden
:
false
}
;
}
update
(
mode
)
{
if
(
mode
=
=
null
)
{
mode
=
this
.
getCurrentDensity
(
)
.
mode
;
}
let
docs
=
[
document
.
documentElement
]
;
let
shouldUpdateSidebar
=
SidebarUI
.
initialized
&
&
SidebarUI
.
isOpen
;
if
(
shouldUpdateSidebar
)
{
docs
.
push
(
SidebarUI
.
browser
.
contentDocument
.
documentElement
)
;
}
for
(
let
doc
of
docs
)
{
switch
(
mode
)
{
case
this
.
MODE_COMPACT
:
doc
.
setAttribute
(
"
uidensity
"
"
compact
"
)
;
break
;
case
this
.
MODE_TOUCH
:
doc
.
setAttribute
(
"
uidensity
"
"
touch
"
)
;
break
;
default
:
doc
.
removeAttribute
(
"
uidensity
"
)
;
break
;
}
}
if
(
shouldUpdateSidebar
)
{
let
tree
=
SidebarUI
.
browser
.
contentDocument
.
querySelector
(
"
.
sidebar
-
placesTree
"
)
;
if
(
tree
)
{
tree
.
style
.
border
=
"
1px
"
;
tree
.
style
.
border
=
"
"
;
}
}
gBrowser
.
tabContainer
.
uiDensityChanged
(
)
;
gURLBar
.
updateLayoutBreakout
(
)
;
}
}
;
const
nodeToTooltipMap
=
{
"
bookmarks
-
menu
-
button
"
:
"
bookmarksMenuButton
.
tooltip
"
"
context
-
reload
"
:
"
reloadButton
.
tooltip
"
"
context
-
stop
"
:
"
stopButton
.
tooltip
"
"
downloads
-
button
"
:
"
downloads
.
tooltip
"
"
fullscreen
-
button
"
:
"
fullscreenButton
.
tooltip
"
"
appMenu
-
fullscreen
-
button2
"
:
"
fullscreenButton
.
tooltip
"
"
new
-
window
-
button
"
:
"
newWindowButton
.
tooltip
"
"
new
-
tab
-
button
"
:
"
newTabButton
.
tooltip
"
"
tabs
-
newtab
-
button
"
:
"
newTabButton
.
tooltip
"
"
reload
-
button
"
:
"
reloadButton
.
tooltip
"
"
stop
-
button
"
:
"
stopButton
.
tooltip
"
"
urlbar
-
zoom
-
button
"
:
"
urlbar
-
zoom
-
button
.
tooltip
"
"
appMenu
-
zoomEnlarge
-
button2
"
:
"
zoomEnlarge
-
button
.
tooltip
"
"
appMenu
-
zoomReset
-
button2
"
:
"
zoomReset
-
button
.
tooltip
"
"
appMenu
-
zoomReduce
-
button2
"
:
"
zoomReduce
-
button
.
tooltip
"
"
reader
-
mode
-
button
"
:
"
reader
-
mode
-
button
.
tooltip
"
"
reader
-
mode
-
button
-
icon
"
:
"
reader
-
mode
-
button
.
tooltip
"
}
;
const
nodeToShortcutMap
=
{
"
bookmarks
-
menu
-
button
"
:
"
manBookmarkKb
"
"
context
-
reload
"
:
"
key_reload
"
"
context
-
stop
"
:
"
key_stop
"
"
downloads
-
button
"
:
"
key_openDownloads
"
"
fullscreen
-
button
"
:
"
key_fullScreen
"
"
appMenu
-
fullscreen
-
button2
"
:
"
key_fullScreen
"
"
new
-
window
-
button
"
:
"
key_newNavigator
"
"
new
-
tab
-
button
"
:
"
key_newNavigatorTab
"
"
tabs
-
newtab
-
button
"
:
"
key_newNavigatorTab
"
"
reload
-
button
"
:
"
key_reload
"
"
stop
-
button
"
:
"
key_stop
"
"
urlbar
-
zoom
-
button
"
:
"
key_fullZoomReset
"
"
appMenu
-
zoomEnlarge
-
button2
"
:
"
key_fullZoomEnlarge
"
"
appMenu
-
zoomReset
-
button2
"
:
"
key_fullZoomReset
"
"
appMenu
-
zoomReduce
-
button2
"
:
"
key_fullZoomReduce
"
"
reader
-
mode
-
button
"
:
"
key_toggleReaderMode
"
"
reader
-
mode
-
button
-
icon
"
:
"
key_toggleReaderMode
"
}
;
const
gDynamicTooltipCache
=
new
Map
(
)
;
function
GetDynamicShortcutTooltipText
(
nodeId
)
{
if
(
!
gDynamicTooltipCache
.
has
(
nodeId
)
&
&
nodeId
in
nodeToTooltipMap
)
{
let
strId
=
nodeToTooltipMap
[
nodeId
]
;
let
args
=
[
]
;
if
(
nodeId
in
nodeToShortcutMap
)
{
let
shortcutId
=
nodeToShortcutMap
[
nodeId
]
;
let
shortcut
=
document
.
getElementById
(
shortcutId
)
;
if
(
shortcut
)
{
args
.
push
(
ShortcutUtils
.
prettifyShortcut
(
shortcut
)
)
;
}
}
gDynamicTooltipCache
.
set
(
nodeId
gNavigatorBundle
.
getFormattedString
(
strId
args
)
)
;
}
return
gDynamicTooltipCache
.
get
(
nodeId
)
;
}
function
UpdateDynamicShortcutTooltipText
(
aTooltip
)
{
let
nodeId
=
aTooltip
.
triggerNode
.
id
|
|
aTooltip
.
triggerNode
.
getAttribute
(
"
anonid
"
)
;
aTooltip
.
setAttribute
(
"
label
"
GetDynamicShortcutTooltipText
(
nodeId
)
)
;
}
function
hrefAndLinkNodeForClickEvent
(
event
)
{
function
isHTMLLink
(
aNode
)
{
return
(
(
HTMLAnchorElement
.
isInstance
(
aNode
)
&
&
aNode
.
href
)
|
|
(
HTMLAreaElement
.
isInstance
(
aNode
)
&
&
aNode
.
href
)
|
|
HTMLLinkElement
.
isInstance
(
aNode
)
)
;
}
let
node
=
event
.
composedTarget
;
while
(
node
&
&
!
isHTMLLink
(
node
)
)
{
node
=
node
.
flattenedTreeParentNode
;
}
if
(
node
)
{
return
[
node
.
href
node
]
;
}
let
href
baseURI
;
node
=
event
.
composedTarget
;
while
(
node
&
&
!
href
)
{
if
(
node
.
nodeType
=
=
Node
.
ELEMENT_NODE
&
&
(
node
.
localName
=
=
"
a
"
|
|
node
.
namespaceURI
=
=
"
http
:
/
/
www
.
w3
.
org
/
1998
/
Math
/
MathML
"
)
)
{
href
=
node
.
getAttribute
(
"
href
"
)
|
|
node
.
getAttributeNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xlink
"
"
href
"
)
;
if
(
href
)
{
baseURI
=
node
.
baseURI
;
break
;
}
}
node
=
node
.
flattenedTreeParentNode
;
}
return
[
href
?
makeURLAbsolute
(
baseURI
href
)
:
null
null
]
;
}
function
contentAreaClick
(
event
isPanelClick
)
{
if
(
!
event
.
isTrusted
|
|
event
.
defaultPrevented
|
|
event
.
button
!
=
0
)
{
return
;
}
let
[
href
linkNode
]
=
hrefAndLinkNodeForClickEvent
(
event
)
;
if
(
!
href
)
{
if
(
event
.
button
=
=
1
&
&
Services
.
prefs
.
getBoolPref
(
"
middlemouse
.
contentLoadURL
"
)
&
&
!
Services
.
prefs
.
getBoolPref
(
"
general
.
autoScroll
"
)
)
{
middleMousePaste
(
event
)
;
event
.
preventDefault
(
)
;
}
return
;
}
if
(
linkNode
&
&
event
.
button
=
=
0
&
&
!
event
.
ctrlKey
&
&
!
event
.
shiftKey
&
&
!
event
.
altKey
&
&
!
event
.
metaKey
)
{
let
target
=
linkNode
.
target
;
let
mainTarget
=
!
target
|
|
target
=
=
"
_content
"
|
|
target
=
=
"
_main
"
;
if
(
isPanelClick
&
&
mainTarget
)
{
if
(
linkNode
.
getAttribute
(
"
onclick
"
)
|
|
href
.
startsWith
(
"
javascript
:
"
)
|
|
href
.
startsWith
(
"
data
:
"
)
)
{
return
;
}
try
{
urlSecurityCheck
(
href
linkNode
.
ownerDocument
.
nodePrincipal
)
;
}
catch
(
ex
)
{
event
.
preventDefault
(
)
;
return
;
}
loadURI
(
href
null
null
false
)
;
event
.
preventDefault
(
)
;
return
;
}
}
handleLinkClick
(
event
href
linkNode
)
;
try
{
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
PlacesUIUtils
.
markPageAsFollowedLink
(
href
)
;
}
}
catch
(
ex
)
{
}
}
function
handleLinkClick
(
event
href
linkNode
)
{
if
(
event
.
button
=
=
2
)
{
return
false
;
}
var
where
=
whereToOpenLink
(
event
)
;
if
(
where
=
=
"
current
"
)
{
return
false
;
}
var
doc
=
event
.
target
.
ownerDocument
;
let
referrerInfo
=
Cc
[
"
mozilla
.
org
/
referrer
-
info
;
1
"
]
.
createInstance
(
Ci
.
nsIReferrerInfo
)
;
if
(
linkNode
)
{
referrerInfo
.
initWithElement
(
linkNode
)
;
}
else
{
referrerInfo
.
initWithDocument
(
doc
)
;
}
if
(
where
=
=
"
save
"
)
{
saveURL
(
href
null
linkNode
?
gatherTextUnder
(
linkNode
)
:
"
"
null
true
true
referrerInfo
doc
.
cookieJarSettings
doc
)
;
event
.
preventDefault
(
)
;
return
true
;
}
let
frameID
=
WebNavigationFrames
.
getFrameId
(
doc
.
defaultView
)
;
urlSecurityCheck
(
href
doc
.
nodePrincipal
)
;
let
params
=
{
charset
:
doc
.
characterSet
referrerInfo
originPrincipal
:
doc
.
nodePrincipal
originStoragePrincipal
:
doc
.
effectiveStoragePrincipal
triggeringPrincipal
:
doc
.
nodePrincipal
csp
:
doc
.
csp
frameID
}
;
if
(
doc
.
nodePrincipal
.
originAttributes
.
userContextId
)
{
params
.
userContextId
=
doc
.
nodePrincipal
.
originAttributes
.
userContextId
;
}
openLinkIn
(
href
where
params
)
;
event
.
preventDefault
(
)
;
return
true
;
}
function
middleMousePaste
(
event
)
{
let
clipboard
=
readFromClipboard
(
)
;
if
(
!
clipboard
)
{
return
;
}
clipboard
=
clipboard
.
replace
(
/
\
s
*
\
n
\
s
*
/
g
"
"
)
;
clipboard
=
UrlbarUtils
.
stripUnsafeProtocolOnPaste
(
clipboard
)
;
let
where
=
whereToOpenLink
(
event
true
false
)
;
let
lastLocationChange
;
if
(
where
=
=
"
current
"
)
{
lastLocationChange
=
gBrowser
.
selectedBrowser
.
lastLocationChange
;
}
UrlbarUtils
.
getShortcutOrURIAndPostData
(
clipboard
)
.
then
(
data
=
>
{
try
{
makeURI
(
data
.
url
)
;
}
catch
(
ex
)
{
return
;
}
try
{
UrlbarUtils
.
addToUrlbarHistory
(
data
.
url
window
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
if
(
where
!
=
"
current
"
|
|
lastLocationChange
=
=
gBrowser
.
selectedBrowser
.
lastLocationChange
)
{
openUILink
(
data
.
url
event
{
ignoreButton
:
true
allowInheritPrincipal
:
data
.
mayInheritPrincipal
triggeringPrincipal
:
gBrowser
.
selectedBrowser
.
contentPrincipal
csp
:
gBrowser
.
selectedBrowser
.
csp
}
)
;
}
}
)
;
if
(
Event
.
isInstance
(
event
)
)
{
event
.
stopPropagation
(
)
;
}
}
function
handleDroppedLink
(
event
urlOrLinks
nameOrTriggeringPrincipal
triggeringPrincipal
)
{
let
links
;
if
(
Array
.
isArray
(
urlOrLinks
)
)
{
links
=
urlOrLinks
;
triggeringPrincipal
=
nameOrTriggeringPrincipal
;
}
else
{
links
=
[
{
url
:
urlOrLinks
nameOrTriggeringPrincipal
type
:
"
"
}
]
;
}
let
lastLocationChange
=
gBrowser
.
selectedBrowser
.
lastLocationChange
;
let
userContextId
=
gBrowser
.
selectedBrowser
.
getAttribute
(
"
usercontextid
"
)
;
let
inBackground
=
false
;
if
(
event
)
{
inBackground
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
loadInBackground
"
)
;
if
(
event
.
shiftKey
)
{
inBackground
=
!
inBackground
;
}
}
(
async
function
(
)
{
if
(
links
.
length
>
=
Services
.
prefs
.
getIntPref
(
"
browser
.
tabs
.
maxOpenBeforeWarn
"
)
)
{
let
answer
=
await
OpenInTabsUtils
.
promiseConfirmOpenInTabs
(
links
.
length
window
)
;
if
(
!
answer
)
{
return
;
}
}
let
urls
=
[
]
;
let
postDatas
=
[
]
;
for
(
let
link
of
links
)
{
let
data
=
await
UrlbarUtils
.
getShortcutOrURIAndPostData
(
link
.
url
)
;
urls
.
push
(
data
.
url
)
;
postDatas
.
push
(
data
.
postData
)
;
}
if
(
lastLocationChange
=
=
gBrowser
.
selectedBrowser
.
lastLocationChange
)
{
gBrowser
.
loadTabs
(
urls
{
inBackground
replace
:
true
allowThirdPartyFixup
:
false
postDatas
userContextId
triggeringPrincipal
}
)
;
}
}
)
(
)
;
if
(
event
)
{
event
.
preventDefault
(
)
;
}
}
function
BrowserForceEncodingDetection
(
)
{
gBrowser
.
selectedBrowser
.
forceEncodingDetection
(
)
;
BrowserReloadWithFlags
(
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_CHARSET_CHANGE
)
;
}
var
ToolbarContextMenu
=
{
updateDownloadsAutoHide
(
popup
)
{
let
checkbox
=
document
.
getElementById
(
"
toolbar
-
context
-
autohide
-
downloads
-
button
"
)
;
let
isDownloads
=
popup
.
triggerNode
&
&
[
"
downloads
-
button
"
"
wrapper
-
downloads
-
button
"
]
.
includes
(
popup
.
triggerNode
.
id
)
;
checkbox
.
hidden
=
!
isDownloads
;
if
(
DownloadsButton
.
autoHideDownloadsButton
)
{
checkbox
.
setAttribute
(
"
checked
"
"
true
"
)
;
}
else
{
checkbox
.
removeAttribute
(
"
checked
"
)
;
}
}
onDownloadsAutoHideChange
(
event
)
{
let
autoHide
=
event
.
target
.
getAttribute
(
"
checked
"
)
=
=
"
true
"
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
download
.
autohideButton
"
autoHide
)
;
}
updateDownloadsAlwaysOpenPanel
(
popup
)
{
let
separator
=
document
.
getElementById
(
"
toolbarDownloadsAnchorMenuSeparator
"
)
;
let
checkbox
=
document
.
getElementById
(
"
toolbar
-
context
-
always
-
open
-
downloads
-
panel
"
)
;
let
isDownloads
=
popup
.
triggerNode
&
&
[
"
downloads
-
button
"
"
wrapper
-
downloads
-
button
"
]
.
includes
(
popup
.
triggerNode
.
id
)
;
separator
.
hidden
=
checkbox
.
hidden
=
!
isDownloads
;
gAlwaysOpenPanel
?
checkbox
.
setAttribute
(
"
checked
"
"
true
"
)
:
checkbox
.
removeAttribute
(
"
checked
"
)
;
}
onDownloadsAlwaysOpenPanelChange
(
event
)
{
let
alwaysOpen
=
event
.
target
.
getAttribute
(
"
checked
"
)
=
=
"
true
"
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
download
.
alwaysOpenPanel
"
alwaysOpen
)
;
}
_getUnwrappedTriggerNode
(
popup
)
{
let
{
triggerNode
}
=
popup
;
if
(
triggerNode
&
&
gCustomizeMode
.
isWrappedToolbarItem
(
triggerNode
)
)
{
return
triggerNode
.
firstElementChild
;
}
return
triggerNode
;
}
_getExtensionId
(
popup
)
{
let
node
=
this
.
_getUnwrappedTriggerNode
(
popup
)
;
return
node
&
&
node
.
getAttribute
(
"
data
-
extensionid
"
)
;
}
async
updateExtension
(
popup
)
{
let
removeExtension
=
popup
.
querySelector
(
"
.
customize
-
context
-
removeExtension
"
)
;
let
manageExtension
=
popup
.
querySelector
(
"
.
customize
-
context
-
manageExtension
"
)
;
let
reportExtension
=
popup
.
querySelector
(
"
.
customize
-
context
-
reportExtension
"
)
;
let
separator
=
reportExtension
.
nextElementSibling
;
let
id
=
this
.
_getExtensionId
(
popup
)
;
let
addon
=
id
&
&
(
await
AddonManager
.
getAddonByID
(
id
)
)
;
for
(
let
element
of
[
removeExtension
manageExtension
separator
]
)
{
element
.
hidden
=
!
addon
;
}
reportExtension
.
hidden
=
!
addon
|
|
!
gAddonAbuseReportEnabled
;
if
(
addon
)
{
removeExtension
.
disabled
=
!
(
addon
.
permissions
&
AddonManager
.
PERM_CAN_UNINSTALL
)
;
ExtensionsUI
.
originControlsMenu
(
popup
id
)
;
}
}
async
removeExtensionForContextAction
(
popup
)
{
let
id
=
this
.
_getExtensionId
(
popup
)
;
await
BrowserAddonUI
.
removeAddon
(
id
"
browserAction
"
)
;
}
async
reportExtensionForContextAction
(
popup
reportEntryPoint
)
{
let
id
=
this
.
_getExtensionId
(
popup
)
;
await
BrowserAddonUI
.
reportAddon
(
id
reportEntryPoint
)
;
}
async
openAboutAddonsForContextAction
(
popup
)
{
let
id
=
this
.
_getExtensionId
(
popup
)
;
await
BrowserAddonUI
.
manageAddon
(
id
"
browserAction
"
)
;
}
}
;
var
gPageStyleMenu
=
{
_pageStyleSheets
:
new
WeakMap
(
)
addBrowserStyleSheets
(
styleSheets
permanentKey
)
{
let
sheetData
=
this
.
_pageStyleSheets
.
get
(
permanentKey
)
;
if
(
!
sheetData
)
{
this
.
_pageStyleSheets
.
set
(
permanentKey
styleSheets
)
;
return
;
}
sheetData
.
filteredStyleSheets
.
push
(
.
.
.
styleSheets
.
filteredStyleSheets
)
;
sheetData
.
preferredStyleSheetSet
=
sheetData
.
preferredStyleSheetSet
|
|
styleSheets
.
preferredStyleSheetSet
;
}
clearBrowserStyleSheets
(
permanentKey
)
{
this
.
_pageStyleSheets
.
delete
(
permanentKey
)
;
}
_getStyleSheetInfo
(
browser
)
{
let
data
=
this
.
_pageStyleSheets
.
get
(
browser
.
permanentKey
)
;
if
(
!
data
)
{
return
{
filteredStyleSheets
:
[
]
authorStyleDisabled
:
false
preferredStyleSheetSet
:
true
}
;
}
return
data
;
}
fillPopup
(
menuPopup
)
{
let
styleSheetInfo
=
this
.
_getStyleSheetInfo
(
gBrowser
.
selectedBrowser
)
;
var
noStyle
=
menuPopup
.
firstElementChild
;
var
persistentOnly
=
noStyle
.
nextElementSibling
;
var
sep
=
persistentOnly
.
nextElementSibling
;
while
(
sep
.
nextElementSibling
)
{
menuPopup
.
removeChild
(
sep
.
nextElementSibling
)
;
}
let
styleSheets
=
styleSheetInfo
.
filteredStyleSheets
;
var
currentStyleSheets
=
{
}
;
var
styleDisabled
=
styleSheetInfo
.
authorStyleDisabled
;
var
haveAltSheets
=
false
;
var
altStyleSelected
=
false
;
for
(
let
currentStyleSheet
of
styleSheets
)
{
if
(
!
currentStyleSheet
.
disabled
)
{
altStyleSelected
=
true
;
}
haveAltSheets
=
true
;
let
lastWithSameTitle
=
null
;
if
(
currentStyleSheet
.
title
in
currentStyleSheets
)
{
lastWithSameTitle
=
currentStyleSheets
[
currentStyleSheet
.
title
]
;
}
if
(
!
lastWithSameTitle
)
{
let
menuItem
=
document
.
createXULElement
(
"
menuitem
"
)
;
menuItem
.
setAttribute
(
"
type
"
"
radio
"
)
;
menuItem
.
setAttribute
(
"
label
"
currentStyleSheet
.
title
)
;
menuItem
.
setAttribute
(
"
data
"
currentStyleSheet
.
title
)
;
menuItem
.
setAttribute
(
"
checked
"
!
currentStyleSheet
.
disabled
&
&
!
styleDisabled
)
;
menuItem
.
setAttribute
(
"
oncommand
"
"
gPageStyleMenu
.
switchStyleSheet
(
this
.
getAttribute
(
'
data
'
)
)
;
"
)
;
menuPopup
.
appendChild
(
menuItem
)
;
currentStyleSheets
[
currentStyleSheet
.
title
]
=
menuItem
;
}
else
if
(
currentStyleSheet
.
disabled
)
{
lastWithSameTitle
.
removeAttribute
(
"
checked
"
)
;
}
}
noStyle
.
setAttribute
(
"
checked
"
styleDisabled
)
;
persistentOnly
.
setAttribute
(
"
checked
"
!
altStyleSelected
&
&
!
styleDisabled
)
;
persistentOnly
.
hidden
=
styleSheetInfo
.
preferredStyleSheetSet
?
haveAltSheets
:
false
;
sep
.
hidden
=
(
noStyle
.
hidden
&
&
persistentOnly
.
hidden
)
|
|
!
haveAltSheets
;
}
_sendMessageToAll
(
message
data
)
{
let
contextsToVisit
=
[
gBrowser
.
selectedBrowser
.
browsingContext
]
;
while
(
contextsToVisit
.
length
)
{
let
currentContext
=
contextsToVisit
.
pop
(
)
;
let
global
=
currentContext
.
currentWindowGlobal
;
if
(
!
global
)
{
continue
;
}
let
actor
=
global
.
getActor
(
"
PageStyle
"
)
;
actor
.
sendAsyncMessage
(
message
data
)
;
contextsToVisit
.
push
(
.
.
.
currentContext
.
children
)
;
}
}
switchStyleSheet
(
title
)
{
let
{
permanentKey
}
=
gBrowser
.
selectedBrowser
;
let
sheetData
=
this
.
_pageStyleSheets
.
get
(
permanentKey
)
;
if
(
sheetData
&
&
sheetData
.
filteredStyleSheets
)
{
sheetData
.
authorStyleDisabled
=
false
;
for
(
let
sheet
of
sheetData
.
filteredStyleSheets
)
{
sheet
.
disabled
=
sheet
.
title
!
=
=
title
;
}
}
this
.
_sendMessageToAll
(
"
PageStyle
:
Switch
"
{
title
}
)
;
}
disableStyle
(
)
{
let
{
permanentKey
}
=
gBrowser
.
selectedBrowser
;
let
sheetData
=
this
.
_pageStyleSheets
.
get
(
permanentKey
)
;
if
(
sheetData
)
{
sheetData
.
authorStyleDisabled
=
true
;
}
this
.
_sendMessageToAll
(
"
PageStyle
:
Disable
"
{
}
)
;
}
}
;
var
BrowserOffline
=
{
_inited
:
false
init
(
)
{
if
(
!
this
.
_uiElement
)
{
this
.
_uiElement
=
document
.
getElementById
(
"
cmd_toggleOfflineStatus
"
)
;
}
Services
.
obs
.
addObserver
(
this
"
network
:
offline
-
status
-
changed
"
)
;
this
.
_updateOfflineUI
(
Services
.
io
.
offline
)
;
this
.
_inited
=
true
;
}
uninit
(
)
{
if
(
this
.
_inited
)
{
Services
.
obs
.
removeObserver
(
this
"
network
:
offline
-
status
-
changed
"
)
;
}
}
toggleOfflineStatus
(
)
{
var
ioService
=
Services
.
io
;
if
(
!
ioService
.
offline
&
&
!
this
.
_canGoOffline
(
)
)
{
this
.
_updateOfflineUI
(
false
)
;
return
;
}
ioService
.
offline
=
!
ioService
.
offline
;
}
observe
(
aSubject
aTopic
aState
)
{
if
(
aTopic
!
=
"
network
:
offline
-
status
-
changed
"
)
{
return
;
}
this
.
_updateOfflineUI
(
Services
.
io
.
offline
)
;
}
_canGoOffline
(
)
{
try
{
var
cancelGoOffline
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
Services
.
obs
.
notifyObservers
(
cancelGoOffline
"
offline
-
requested
"
)
;
if
(
cancelGoOffline
.
data
)
{
return
false
;
}
}
catch
(
ex
)
{
}
return
true
;
}
_uiElement
:
null
_updateOfflineUI
(
aOffline
)
{
var
offlineLocked
=
Services
.
prefs
.
prefIsLocked
(
"
network
.
online
"
)
;
if
(
offlineLocked
)
{
this
.
_uiElement
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
this
.
_uiElement
.
setAttribute
(
"
checked
"
aOffline
)
;
}
}
;
var
CanvasPermissionPromptHelper
=
{
_permissionsPrompt
:
"
canvas
-
permissions
-
prompt
"
_permissionsPromptHideDoorHanger
:
"
canvas
-
permissions
-
prompt
-
hide
-
doorhanger
"
_notificationIcon
:
"
canvas
-
notification
-
icon
"
init
(
)
{
Services
.
obs
.
addObserver
(
this
this
.
_permissionsPrompt
)
;
Services
.
obs
.
addObserver
(
this
this
.
_permissionsPromptHideDoorHanger
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
this
.
_permissionsPrompt
)
;
Services
.
obs
.
removeObserver
(
this
this
.
_permissionsPromptHideDoorHanger
)
;
}
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
!
=
this
.
_permissionsPrompt
&
&
aTopic
!
=
this
.
_permissionsPromptHideDoorHanger
)
{
return
;
}
let
browser
;
if
(
aSubject
instanceof
Ci
.
nsIDOMWindow
)
{
browser
=
aSubject
.
docShell
.
chromeEventHandler
;
}
else
{
browser
=
aSubject
;
}
if
(
gBrowser
.
selectedBrowser
!
=
=
browser
)
{
return
;
}
let
message
=
gNavigatorBundle
.
getFormattedString
(
"
canvas
.
siteprompt2
"
[
"
<
>
"
]
1
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
aData
)
;
function
setCanvasPermission
(
aPerm
aPersistent
)
{
Services
.
perms
.
addFromPrincipal
(
principal
"
canvas
"
aPerm
aPersistent
?
Ci
.
nsIPermissionManager
.
EXPIRE_NEVER
:
Ci
.
nsIPermissionManager
.
EXPIRE_SESSION
)
;
}
let
mainAction
=
{
label
:
gNavigatorBundle
.
getString
(
"
canvas
.
allow2
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
canvas
.
allow2
.
accesskey
"
)
callback
(
state
)
{
setCanvasPermission
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
state
&
&
state
.
checkboxChecked
)
;
}
}
;
let
secondaryActions
=
[
{
label
:
gNavigatorBundle
.
getString
(
"
canvas
.
block
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
canvas
.
block
.
accesskey
"
)
callback
(
state
)
{
setCanvasPermission
(
Ci
.
nsIPermissionManager
.
DENY_ACTION
state
&
&
state
.
checkboxChecked
)
;
}
}
]
;
let
checkbox
=
{
show
:
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
}
;
if
(
checkbox
.
show
)
{
checkbox
.
checked
=
true
;
checkbox
.
label
=
gBrowserBundle
.
GetStringFromName
(
"
canvas
.
remember2
"
)
;
}
let
options
=
{
checkbox
name
:
principal
.
host
learnMoreURL
:
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
fingerprint
-
permission
"
dismissed
:
aTopic
=
=
this
.
_permissionsPromptHideDoorHanger
eventCallback
(
e
)
{
if
(
e
=
=
"
showing
"
)
{
this
.
browser
.
ownerDocument
.
getElementById
(
"
canvas
-
permissions
-
prompt
-
warning
"
)
.
textContent
=
gBrowserBundle
.
GetStringFromName
(
"
canvas
.
siteprompt2
.
warning
"
)
;
}
}
}
;
PopupNotifications
.
show
(
browser
this
.
_permissionsPrompt
message
this
.
_notificationIcon
mainAction
secondaryActions
options
)
;
}
}
;
var
WebAuthnPromptHelper
=
{
_icon
:
"
webauthn
-
notification
-
icon
"
_topic
:
"
webauthn
-
prompt
"
_current
:
null
_tid
:
0
init
(
)
{
Services
.
obs
.
addObserver
(
this
this
.
_topic
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
this
.
_topic
)
;
}
observe
(
aSubject
aTopic
aData
)
{
let
mgr
=
aSubject
.
QueryInterface
(
Ci
.
nsIU2FTokenManager
)
;
let
data
=
JSON
.
parse
(
aData
)
;
if
(
data
.
action
=
=
"
cancel
"
)
{
this
.
cancel
(
data
)
;
}
if
(
data
.
browsingContextId
!
=
=
gBrowser
.
selectedBrowser
.
browsingContext
.
id
)
{
return
;
}
if
(
data
.
action
=
=
"
register
"
)
{
this
.
register
(
mgr
data
)
;
}
else
if
(
data
.
action
=
=
"
register
-
direct
"
)
{
this
.
registerDirect
(
mgr
data
)
;
}
else
if
(
data
.
action
=
=
"
sign
"
)
{
this
.
sign
(
mgr
data
)
;
}
}
register
(
mgr
{
origin
tid
}
)
{
let
mainAction
=
this
.
buildCancelAction
(
mgr
tid
)
;
this
.
show
(
tid
"
register
"
"
webauthn
.
registerPrompt2
"
origin
mainAction
)
;
}
registerDirect
(
mgr
{
origin
tid
}
)
{
let
mainAction
=
this
.
buildProceedAction
(
mgr
tid
)
;
let
secondaryActions
=
[
this
.
buildCancelAction
(
mgr
tid
)
]
;
let
learnMoreURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
webauthn
-
direct
-
attestation
"
;
let
options
=
{
learnMoreURL
checkbox
:
{
label
:
gNavigatorBundle
.
getString
(
"
webauthn
.
anonymize
"
)
}
hintText
:
"
webauthn
.
registerDirectPromptHint
"
}
;
this
.
show
(
tid
"
register
-
direct
"
"
webauthn
.
registerDirectPrompt3
"
origin
mainAction
secondaryActions
options
)
;
}
sign
(
mgr
{
origin
tid
}
)
{
let
mainAction
=
this
.
buildCancelAction
(
mgr
tid
)
;
this
.
show
(
tid
"
sign
"
"
webauthn
.
signPrompt2
"
origin
mainAction
)
;
}
show
(
tid
id
stringId
origin
mainAction
secondaryActions
=
[
]
options
=
{
}
)
{
this
.
reset
(
)
;
try
{
origin
=
Services
.
io
.
newURI
(
origin
)
.
asciiHost
;
}
catch
(
e
)
{
}
let
brandShortName
=
document
.
getElementById
(
"
bundle_brand
"
)
.
getString
(
"
brandShortName
"
)
;
let
message
=
gNavigatorBundle
.
getFormattedString
(
stringId
[
"
<
>
"
brandShortName
]
)
;
if
(
options
.
hintText
)
{
options
.
hintText
=
gNavigatorBundle
.
getFormattedString
(
options
.
hintText
[
brandShortName
]
)
;
}
options
.
name
=
origin
;
options
.
hideClose
=
true
;
options
.
persistent
=
true
;
options
.
eventCallback
=
event
=
>
{
if
(
event
=
=
"
removed
"
)
{
this
.
_current
=
null
;
this
.
_tid
=
0
;
}
}
;
this
.
_tid
=
tid
;
this
.
_current
=
PopupNotifications
.
show
(
gBrowser
.
selectedBrowser
webauthn
-
prompt
-
{
id
}
message
this
.
_icon
mainAction
secondaryActions
options
)
;
}
cancel
(
{
tid
}
)
{
if
(
this
.
_tid
=
=
tid
)
{
this
.
reset
(
)
;
}
}
reset
(
)
{
if
(
this
.
_current
)
{
this
.
_current
.
remove
(
)
;
}
}
buildProceedAction
(
mgr
tid
)
{
return
{
label
:
gNavigatorBundle
.
getString
(
"
webauthn
.
proceed
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
webauthn
.
proceed
.
accesskey
"
)
callback
(
state
)
{
mgr
.
resumeRegister
(
tid
state
.
checkboxChecked
)
;
}
}
;
}
buildCancelAction
(
mgr
tid
)
{
return
{
label
:
gNavigatorBundle
.
getString
(
"
webauthn
.
cancel
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
webauthn
.
cancel
.
accesskey
"
)
callback
(
)
{
mgr
.
cancel
(
tid
)
;
}
}
;
}
}
;
function
CanCloseWindow
(
)
{
if
(
Services
.
startup
.
shuttingDown
|
|
window
.
skipNextCanClose
)
{
return
true
;
}
for
(
let
browser
of
gBrowser
.
browsers
)
{
if
(
!
browser
.
isConnected
)
{
continue
;
}
let
{
permitUnload
}
=
browser
.
permitUnload
(
)
;
if
(
!
permitUnload
)
{
return
false
;
}
}
return
true
;
}
function
WindowIsClosing
(
event
)
{
let
source
;
if
(
event
)
{
let
target
=
event
.
sourceEvent
?
.
target
;
if
(
target
?
.
id
?
.
startsWith
(
"
menu_
"
)
)
{
source
=
"
menuitem
"
;
}
else
if
(
target
?
.
nodeName
=
=
"
toolbarbutton
"
)
{
source
=
"
close
-
button
"
;
}
else
{
let
key
=
AppConstants
.
platform
=
=
"
macosx
"
?
"
metaKey
"
:
"
ctrlKey
"
;
source
=
event
[
key
]
?
"
shortcut
"
:
"
OS
"
;
}
}
if
(
!
closeWindow
(
false
warnAboutClosingWindow
source
)
)
{
return
false
;
}
if
(
CanCloseWindow
(
)
)
{
window
.
skipNextCanClose
=
true
;
return
true
;
}
return
false
;
}
function
warnAboutClosingWindow
(
source
)
{
let
isPBWindow
=
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
&
&
!
PrivateBrowsingUtils
.
permanentPrivateBrowsing
;
let
closingTabs
=
gBrowser
.
tabs
.
length
-
gBrowser
.
_removingTabs
.
length
;
if
(
!
isPBWindow
&
&
!
toolbar
.
visible
)
{
return
gBrowser
.
warnAboutClosingTabs
(
closingTabs
gBrowser
.
closingTabsEnum
.
ALL
source
)
;
}
let
otherPBWindowExists
=
false
;
let
otherWindowExists
=
false
;
for
(
let
win
of
browserWindows
(
)
)
{
if
(
!
win
.
closed
&
&
win
!
=
window
)
{
otherWindowExists
=
true
;
if
(
isPBWindow
&
&
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
{
otherPBWindowExists
=
true
;
}
if
(
!
isPBWindow
|
|
otherPBWindowExists
)
{
break
;
}
}
}
if
(
isPBWindow
&
&
!
otherPBWindowExists
)
{
let
exitingCanceled
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
exitingCanceled
.
data
=
false
;
Services
.
obs
.
notifyObservers
(
exitingCanceled
"
last
-
pb
-
context
-
exiting
"
)
;
if
(
exitingCanceled
.
data
)
{
return
false
;
}
}
if
(
otherWindowExists
)
{
return
(
isPBWindow
|
|
gBrowser
.
warnAboutClosingTabs
(
closingTabs
gBrowser
.
closingTabsEnum
.
ALL
source
)
)
;
}
let
os
=
Services
.
obs
;
let
closingCanceled
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
os
.
notifyObservers
(
closingCanceled
"
browser
-
lastwindow
-
close
-
requested
"
)
;
if
(
closingCanceled
.
data
)
{
return
false
;
}
os
.
notifyObservers
(
null
"
browser
-
lastwindow
-
close
-
granted
"
)
;
return
(
AppConstants
.
platform
!
=
"
macosx
"
|
|
isPBWindow
|
|
gBrowser
.
warnAboutClosingTabs
(
closingTabs
gBrowser
.
closingTabsEnum
.
ALL
source
)
)
;
}
var
MailIntegration
=
{
sendLinkForBrowser
(
aBrowser
)
{
this
.
sendMessage
(
gURLBar
.
makeURIReadable
(
aBrowser
.
currentURI
)
.
displaySpec
aBrowser
.
contentTitle
)
;
}
sendMessage
(
aBody
aSubject
)
{
var
mailtoUrl
=
"
mailto
:
"
;
if
(
aBody
)
{
mailtoUrl
+
=
"
?
body
=
"
+
encodeURIComponent
(
aBody
)
;
mailtoUrl
+
=
"
&
subject
=
"
+
encodeURIComponent
(
aSubject
)
;
}
var
uri
=
makeURI
(
mailtoUrl
)
;
this
.
_launchExternalUrl
(
uri
)
;
}
_launchExternalUrl
(
aURL
)
{
var
extProtocolSvc
=
Cc
[
"
mozilla
.
org
/
uriloader
/
external
-
protocol
-
service
;
1
"
]
.
getService
(
Ci
.
nsIExternalProtocolService
)
;
if
(
extProtocolSvc
)
{
extProtocolSvc
.
loadURI
(
aURL
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
}
}
}
;
function
BrowserOpenAddonsMgr
(
aView
{
selectTabByViewId
=
false
}
=
{
}
)
{
return
new
Promise
(
resolve
=
>
{
let
emWindow
;
let
browserWindow
;
var
receivePong
=
function
(
aSubject
aTopic
aData
)
{
let
browserWin
=
aSubject
.
browsingContext
.
topChromeWindow
;
if
(
!
emWindow
|
|
browserWin
=
=
window
)
{
if
(
selectTabByViewId
&
&
aSubject
.
gViewController
.
currentViewId
!
=
=
aView
)
{
return
;
}
emWindow
=
aSubject
;
browserWindow
=
browserWin
;
}
}
;
Services
.
obs
.
addObserver
(
receivePong
"
EM
-
pong
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
EM
-
ping
"
)
;
Services
.
obs
.
removeObserver
(
receivePong
"
EM
-
pong
"
)
;
if
(
emWindow
)
{
if
(
aView
&
&
!
selectTabByViewId
)
{
emWindow
.
loadView
(
aView
)
;
}
let
tab
=
browserWindow
.
gBrowser
.
getTabForBrowser
(
emWindow
.
docShell
.
chromeEventHandler
)
;
browserWindow
.
gBrowser
.
selectedTab
=
tab
;
emWindow
.
focus
(
)
;
resolve
(
emWindow
)
;
return
;
}
if
(
selectTabByViewId
)
{
const
target
=
isBlankPageURL
(
gBrowser
.
currentURI
.
spec
)
?
"
current
"
:
"
tab
"
;
openTrustedLinkIn
(
"
about
:
addons
"
target
)
;
}
else
{
switchToTabHavingURI
(
"
about
:
addons
"
true
)
;
}
Services
.
obs
.
addObserver
(
function
observer
(
aSubject
aTopic
aData
)
{
Services
.
obs
.
removeObserver
(
observer
aTopic
)
;
if
(
aView
)
{
aSubject
.
loadView
(
aView
)
;
}
aSubject
.
focus
(
)
;
resolve
(
aSubject
)
;
}
"
EM
-
loaded
"
)
;
}
)
;
}
function
AddKeywordForSearchField
(
)
{
if
(
!
gContextMenu
)
{
throw
new
Error
(
"
Context
menu
doesn
'
t
seem
to
be
open
.
"
)
;
}
gContextMenu
.
addKeywordForSearchField
(
)
;
}
function
undoCloseTab
(
aIndex
)
{
let
blankTabToRemove
=
null
;
if
(
gBrowser
.
tabs
.
length
=
=
1
&
&
gBrowser
.
selectedTab
.
isEmpty
)
{
blankTabToRemove
=
gBrowser
.
selectedTab
;
}
let
tab
=
null
;
let
tabsToRemove
=
aIndex
!
=
=
undefined
?
[
aIndex
]
:
new
Array
(
SessionStore
.
getLastClosedTabCount
(
window
)
)
.
fill
(
0
)
;
let
tabsRemoved
=
false
;
for
(
let
index
of
tabsToRemove
)
{
if
(
SessionStore
.
getClosedTabCount
(
window
)
>
index
)
{
tab
=
SessionStore
.
undoCloseTab
(
window
index
)
;
tabsRemoved
=
true
;
}
}
if
(
tabsRemoved
&
&
blankTabToRemove
)
{
gBrowser
.
removeTab
(
blankTabToRemove
)
;
}
return
tab
;
}
function
undoCloseWindow
(
aIndex
)
{
let
window
=
null
;
if
(
SessionStore
.
getClosedWindowCount
(
)
>
(
aIndex
|
|
0
)
)
{
window
=
SessionStore
.
undoCloseWindow
(
aIndex
|
|
0
)
;
}
return
window
;
}
function
ReportFalseDeceptiveSite
(
)
{
let
contextsToVisit
=
[
gBrowser
.
selectedBrowser
.
browsingContext
]
;
while
(
contextsToVisit
.
length
)
{
let
currentContext
=
contextsToVisit
.
pop
(
)
;
let
global
=
currentContext
.
currentWindowGlobal
;
if
(
!
global
)
{
continue
;
}
let
docURI
=
global
.
documentURI
;
if
(
docURI
&
&
docURI
.
spec
.
startsWith
(
"
about
:
blocked
?
e
=
deceptiveBlocked
"
)
)
{
let
actor
=
global
.
getActor
(
"
BlockedSite
"
)
;
actor
.
sendQuery
(
"
DeceptiveBlockedDetails
"
)
.
then
(
data
=
>
{
let
reportUrl
=
gSafeBrowsing
.
getReportURL
(
"
PhishMistake
"
data
.
blockedInfo
)
;
if
(
reportUrl
)
{
openTrustedLinkIn
(
reportUrl
"
tab
"
)
;
}
else
{
let
bundle
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
safebrowsing
/
safebrowsing
.
properties
"
)
;
Services
.
prompt
.
alert
(
window
bundle
.
GetStringFromName
(
"
errorReportFalseDeceptiveTitle
"
)
bundle
.
formatStringFromName
(
"
errorReportFalseDeceptiveMessage
"
[
data
.
blockedInfo
.
provider
]
)
)
;
}
}
)
;
}
contextsToVisit
.
push
(
.
.
.
currentContext
.
children
)
;
}
}
function
ReportSiteIssue
(
)
{
let
subject
=
{
wrappedJSObject
:
gBrowser
.
selectedTab
}
;
Services
.
obs
.
notifyObservers
(
subject
"
report
-
site
-
issue
"
)
;
}
const
gRemoteControl
=
{
observe
(
subject
topic
data
)
{
gRemoteControl
.
updateVisualCue
(
)
;
}
updateVisualCue
(
)
{
const
disableRemoteControlCue
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
chrome
.
disableRemoteControlCueForTests
"
false
)
;
if
(
disableRemoteControlCue
&
&
Cu
.
isInAutomation
)
{
return
;
}
const
mainWindow
=
document
.
documentElement
;
const
remoteControlComponent
=
this
.
getRemoteControlComponent
(
)
;
if
(
remoteControlComponent
)
{
mainWindow
.
setAttribute
(
"
remotecontrol
"
"
true
"
)
;
const
remoteControlIcon
=
document
.
getElementById
(
"
remote
-
control
-
icon
"
)
;
document
.
l10n
.
setAttributes
(
remoteControlIcon
"
urlbar
-
remote
-
control
-
notification
-
anchor2
"
{
component
:
remoteControlComponent
}
)
;
}
else
{
mainWindow
.
removeAttribute
(
"
remotecontrol
"
)
;
}
}
getRemoteControlComponent
(
)
{
if
(
DevToolsSocketStatus
.
hasSocketOpened
(
{
excludeBrowserToolboxSockets
:
true
}
)
)
{
return
"
DevTools
"
;
}
if
(
Marionette
.
running
)
{
return
"
Marionette
"
;
}
if
(
RemoteAgent
.
running
)
{
return
"
RemoteAgent
"
;
}
return
null
;
}
}
;
var
gPrivateBrowsingUI
=
{
init
:
function
PBUI_init
(
)
{
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
return
;
}
document
.
getElementById
(
"
Tools
:
Sanitize
"
)
.
setAttribute
(
"
disabled
"
"
true
"
)
;
if
(
window
.
location
.
href
!
=
AppConstants
.
BROWSER_CHROME_URL
)
{
return
;
}
let
docElement
=
document
.
documentElement
;
docElement
.
setAttribute
(
"
privatebrowsingmode
"
PrivateBrowsingUtils
.
permanentPrivateBrowsing
?
"
permanent
"
:
"
temporary
"
)
;
docElement
.
toggleAttribute
(
"
privatebrowsingnewindicator
"
NimbusFeatures
.
majorRelease2022
.
getVariable
(
"
feltPrivacyPBMNewIndicator
"
)
)
;
gBrowser
.
updateTitlebar
(
)
;
if
(
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
{
let
newWindow
=
document
.
getElementById
(
"
menu_newNavigator
"
)
;
let
newPrivateWindow
=
document
.
getElementById
(
"
menu_newPrivateWindow
"
)
;
if
(
newWindow
&
&
newPrivateWindow
)
{
newPrivateWindow
.
hidden
=
true
;
newWindow
.
label
=
newPrivateWindow
.
label
;
newWindow
.
accessKey
=
newPrivateWindow
.
accessKey
;
newWindow
.
command
=
newPrivateWindow
.
command
;
}
}
}
}
;
function
switchToTabHavingURI
(
aURI
aOpenNew
aOpenParams
=
{
}
)
{
const
kPrivateBrowsingWhitelist
=
new
Set
(
[
"
about
:
addons
"
]
)
;
let
ignoreFragment
=
aOpenParams
.
ignoreFragment
;
let
ignoreQueryString
=
aOpenParams
.
ignoreQueryString
;
let
replaceQueryString
=
aOpenParams
.
replaceQueryString
;
let
adoptIntoActiveWindow
=
aOpenParams
.
adoptIntoActiveWindow
;
delete
aOpenParams
.
ignoreFragment
;
delete
aOpenParams
.
ignoreQueryString
;
delete
aOpenParams
.
replaceQueryString
;
delete
aOpenParams
.
adoptIntoActiveWindow
;
let
isBrowserWindow
=
!
!
window
.
gBrowser
;
function
switchIfURIInWindow
(
aWindow
)
{
if
(
!
kPrivateBrowsingWhitelist
.
has
(
aURI
.
spec
)
&
&
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
!
=
=
PrivateBrowsingUtils
.
isWindowPrivate
(
aWindow
)
)
{
return
false
;
}
function
cleanURL
(
url
removeQuery
removeFragment
)
{
let
ret
=
url
;
if
(
removeFragment
)
{
ret
=
ret
.
split
(
"
#
"
)
[
0
]
;
if
(
removeQuery
)
{
ret
=
ret
.
split
(
"
?
"
)
[
0
]
;
}
}
else
if
(
removeQuery
)
{
let
fragment
=
ret
.
split
(
"
#
"
)
[
1
]
;
ret
=
ret
.
split
(
"
?
"
)
[
0
]
.
concat
(
fragment
!
=
undefined
?
"
#
"
.
concat
(
fragment
)
:
"
"
)
;
}
return
ret
;
}
let
ignoreFragmentWhenComparing
=
typeof
ignoreFragment
=
=
"
string
"
&
&
ignoreFragment
.
startsWith
(
"
whenComparing
"
)
;
let
requestedCompare
=
cleanURL
(
aURI
.
displaySpec
ignoreQueryString
|
|
replaceQueryString
ignoreFragmentWhenComparing
)
;
let
browsers
=
aWindow
.
gBrowser
.
browsers
;
for
(
let
i
=
0
;
i
<
browsers
.
length
;
i
+
+
)
{
let
browser
=
browsers
[
i
]
;
let
browserCompare
=
cleanURL
(
browser
.
currentURI
.
displaySpec
ignoreQueryString
|
|
replaceQueryString
ignoreFragmentWhenComparing
)
;
if
(
requestedCompare
=
=
browserCompare
)
{
let
doAdopt
=
adoptIntoActiveWindow
&
&
isBrowserWindow
&
&
aWindow
!
=
window
;
if
(
doAdopt
)
{
const
newTab
=
window
.
gBrowser
.
adoptTab
(
aWindow
.
gBrowser
.
getTabForBrowser
(
browser
)
window
.
gBrowser
.
tabContainer
.
selectedIndex
+
1
true
)
;
if
(
!
newTab
)
{
doAdopt
=
false
;
}
}
if
(
!
doAdopt
)
{
aWindow
.
focus
(
)
;
}
if
(
ignoreFragment
=
=
"
whenComparingAndReplace
"
|
|
replaceQueryString
)
{
browser
.
loadURI
(
aURI
.
spec
{
triggeringPrincipal
:
aOpenParams
.
triggeringPrincipal
|
|
_createNullPrincipalFromTabUserContextId
(
)
}
)
;
}
if
(
!
doAdopt
)
{
aWindow
.
gBrowser
.
tabContainer
.
selectedIndex
=
i
;
}
return
true
;
}
}
return
false
;
}
if
(
!
(
aURI
instanceof
Ci
.
nsIURI
)
)
{
aURI
=
Services
.
io
.
newURI
(
aURI
)
;
}
if
(
isBrowserWindow
&
&
switchIfURIInWindow
(
window
)
)
{
return
true
;
}
for
(
let
browserWin
of
browserWindows
(
)
)
{
if
(
browserWin
.
closed
|
|
browserWin
=
=
window
)
{
continue
;
}
if
(
switchIfURIInWindow
(
browserWin
)
)
{
return
true
;
}
}
if
(
aOpenNew
)
{
if
(
isBrowserWindow
&
&
gBrowser
.
selectedTab
.
isEmpty
)
{
openTrustedLinkIn
(
aURI
.
spec
"
current
"
aOpenParams
)
;
}
else
{
openTrustedLinkIn
(
aURI
.
spec
"
tab
"
aOpenParams
)
;
}
}
return
false
;
}
var
RestoreLastSessionObserver
=
{
init
(
)
{
if
(
SessionStore
.
canRestoreLastSession
&
&
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
Services
.
obs
.
addObserver
(
this
"
sessionstore
-
last
-
session
-
cleared
"
true
)
;
goSetCommandEnabled
(
"
Browser
:
RestoreLastSession
"
true
)
;
}
else
if
(
SessionStore
.
willAutoRestore
)
{
document
.
getElementById
(
"
Browser
:
RestoreLastSession
"
)
.
hidden
=
true
;
}
}
observe
(
)
{
Services
.
obs
.
removeObserver
(
this
"
sessionstore
-
last
-
session
-
cleared
"
)
;
goSetCommandEnabled
(
"
Browser
:
RestoreLastSession
"
false
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
"
nsISupportsWeakReference
"
]
)
}
;
var
MenuTouchModeObserver
=
{
init
(
)
{
window
.
addEventListener
(
"
popupshowing
"
this
true
)
;
}
handleEvent
(
event
)
{
let
target
=
event
.
originalTarget
;
if
(
event
.
mozInputSource
=
=
MouseEvent
.
MOZ_SOURCE_TOUCH
)
{
target
.
setAttribute
(
"
touchmode
"
"
true
"
)
;
}
else
{
target
.
removeAttribute
(
"
touchmode
"
)
;
}
}
uninit
(
)
{
window
.
removeEventListener
(
"
popupshowing
"
this
true
)
;
}
}
;
function
safeModeRestart
(
)
{
if
(
Services
.
appinfo
.
inSafeMode
)
{
let
cancelQuit
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
Services
.
obs
.
notifyObservers
(
cancelQuit
"
quit
-
application
-
requested
"
"
restart
"
)
;
if
(
cancelQuit
.
data
)
{
return
;
}
Services
.
startup
.
quit
(
Ci
.
nsIAppStartup
.
eRestart
|
Ci
.
nsIAppStartup
.
eAttemptQuit
)
;
return
;
}
Services
.
obs
.
notifyObservers
(
window
"
restart
-
in
-
safe
-
mode
"
)
;
}
function
duplicateTabIn
(
aTab
where
delta
)
{
switch
(
where
)
{
case
"
window
"
:
let
otherWin
=
OpenBrowserWindow
(
{
private
:
PrivateBrowsingUtils
.
isBrowserPrivate
(
aTab
.
linkedBrowser
)
}
)
;
let
delayedStartupFinished
=
(
subject
topic
)
=
>
{
if
(
topic
=
=
"
browser
-
delayed
-
startup
-
finished
"
&
&
subject
=
=
otherWin
)
{
Services
.
obs
.
removeObserver
(
delayedStartupFinished
topic
)
;
let
otherGBrowser
=
otherWin
.
gBrowser
;
let
otherTab
=
otherGBrowser
.
selectedTab
;
SessionStore
.
duplicateTab
(
otherWin
aTab
delta
)
;
otherGBrowser
.
removeTab
(
otherTab
{
animate
:
false
}
)
;
}
}
;
Services
.
obs
.
addObserver
(
delayedStartupFinished
"
browser
-
delayed
-
startup
-
finished
"
)
;
break
;
case
"
tabshifted
"
:
SessionStore
.
duplicateTab
(
window
aTab
delta
)
;
break
;
case
"
tab
"
:
SessionStore
.
duplicateTab
(
window
aTab
delta
true
{
inBackground
:
false
}
)
;
break
;
}
}
var
MousePosTracker
=
{
_listeners
:
new
Set
(
)
_x
:
0
_y
:
0
addListener
(
listener
)
{
if
(
this
.
_listeners
.
has
(
listener
)
)
{
return
;
}
listener
.
_hover
=
false
;
this
.
_listeners
.
add
(
listener
)
;
this
.
_callListener
(
listener
)
;
}
removeListener
(
listener
)
{
this
.
_listeners
.
delete
(
listener
)
;
}
handleEvent
(
event
)
{
let
fullZoom
=
window
.
windowUtils
.
fullZoom
;
this
.
_x
=
event
.
screenX
/
fullZoom
-
window
.
mozInnerScreenX
;
this
.
_y
=
event
.
screenY
/
fullZoom
-
window
.
mozInnerScreenY
;
this
.
_listeners
.
forEach
(
listener
=
>
{
try
{
this
.
_callListener
(
listener
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
)
;
}
_callListener
(
listener
)
{
let
rect
=
listener
.
getMouseTargetRect
(
)
;
let
hover
=
this
.
_x
>
=
rect
.
left
&
&
this
.
_x
<
=
rect
.
right
&
&
this
.
_y
>
=
rect
.
top
&
&
this
.
_y
<
=
rect
.
bottom
;
if
(
hover
=
=
listener
.
_hover
)
{
return
;
}
listener
.
_hover
=
hover
;
if
(
hover
)
{
if
(
listener
.
onMouseEnter
)
{
listener
.
onMouseEnter
(
)
;
}
}
else
if
(
listener
.
onMouseLeave
)
{
listener
.
onMouseLeave
(
)
;
}
}
}
;
var
ToolbarIconColor
=
{
_windowState
:
{
active
:
false
fullscreen
:
false
tabsintitlebar
:
false
}
init
(
)
{
this
.
_initialized
=
true
;
window
.
addEventListener
(
"
nativethemechange
"
this
)
;
window
.
addEventListener
(
"
activate
"
this
)
;
window
.
addEventListener
(
"
deactivate
"
this
)
;
window
.
addEventListener
(
"
toolbarvisibilitychange
"
this
)
;
window
.
addEventListener
(
"
windowlwthemeupdate
"
this
)
;
if
(
Services
.
focus
.
activeWindow
=
=
window
)
{
this
.
inferFromText
(
"
activate
"
)
;
}
}
uninit
(
)
{
this
.
_initialized
=
false
;
window
.
removeEventListener
(
"
nativethemechange
"
this
)
;
window
.
removeEventListener
(
"
activate
"
this
)
;
window
.
removeEventListener
(
"
deactivate
"
this
)
;
window
.
removeEventListener
(
"
toolbarvisibilitychange
"
this
)
;
window
.
removeEventListener
(
"
windowlwthemeupdate
"
this
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
activate
"
:
case
"
deactivate
"
:
case
"
nativethemechange
"
:
case
"
windowlwthemeupdate
"
:
this
.
inferFromText
(
event
.
type
)
;
break
;
case
"
toolbarvisibilitychange
"
:
this
.
inferFromText
(
event
.
type
event
.
visible
)
;
break
;
}
}
_toolbarLuminanceCache
:
new
Map
(
)
inferFromText
(
reason
reasonValue
)
{
if
(
!
this
.
_initialized
)
{
return
;
}
function
parseRGB
(
aColorString
)
{
let
rgb
=
aColorString
.
match
(
/
^
rgba
?
\
(
(
\
d
+
)
(
\
d
+
)
(
\
d
+
)
/
)
;
rgb
.
shift
(
)
;
return
rgb
.
map
(
x
=
>
parseInt
(
x
)
)
;
}
switch
(
reason
)
{
case
"
activate
"
:
case
"
deactivate
"
:
this
.
_windowState
.
active
=
reason
=
=
=
"
activate
"
;
break
;
case
"
fullscreen
"
:
this
.
_windowState
.
fullscreen
=
reasonValue
;
break
;
case
"
nativethemechange
"
:
case
"
windowlwthemeupdate
"
:
this
.
_toolbarLuminanceCache
.
clear
(
)
;
break
;
case
"
toolbarvisibilitychange
"
:
break
;
case
"
tabsintitlebar
"
:
this
.
_windowState
.
tabsintitlebar
=
reasonValue
;
break
;
}
let
toolbarSelector
=
"
.
browser
-
toolbar
:
not
(
[
collapsed
=
true
]
)
"
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
toolbarSelector
+
=
"
:
not
(
[
type
=
menubar
]
)
"
;
}
let
cachedLuminances
=
this
.
_toolbarLuminanceCache
;
let
luminances
=
new
Map
(
)
;
for
(
let
toolbar
of
document
.
querySelectorAll
(
toolbarSelector
)
)
{
let
cacheKey
=
toolbar
.
id
&
&
toolbar
.
id
+
JSON
.
stringify
(
this
.
_windowState
)
;
let
luminance
=
cacheKey
&
&
cachedLuminances
.
get
(
cacheKey
)
;
if
(
isNaN
(
luminance
)
)
{
let
[
r
g
b
]
=
parseRGB
(
getComputedStyle
(
toolbar
)
.
color
)
;
luminance
=
0
.
2125
*
r
+
0
.
7154
*
g
+
0
.
0721
*
b
;
if
(
cacheKey
)
{
cachedLuminances
.
set
(
cacheKey
luminance
)
;
}
}
luminances
.
set
(
toolbar
luminance
)
;
}
const
luminanceThreshold
=
127
;
for
(
let
[
toolbar
luminance
]
of
luminances
)
{
if
(
luminance
<
=
luminanceThreshold
)
{
toolbar
.
removeAttribute
(
"
brighttext
"
)
;
}
else
{
toolbar
.
setAttribute
(
"
brighttext
"
"
true
"
)
;
}
}
}
}
;
var
PanicButtonNotifier
=
{
init
(
)
{
this
.
_initialized
=
true
;
if
(
window
.
PanicButtonNotifierShouldNotify
)
{
delete
window
.
PanicButtonNotifierShouldNotify
;
this
.
notify
(
)
;
}
}
createPanelIfNeeded
(
)
{
if
(
!
document
.
getElementById
(
"
panic
-
button
-
success
-
notification
"
)
)
{
let
template
=
document
.
getElementById
(
"
panicButtonNotificationTemplate
"
)
;
template
.
replaceWith
(
template
.
content
)
;
}
}
notify
(
)
{
if
(
!
this
.
_initialized
)
{
window
.
PanicButtonNotifierShouldNotify
=
true
;
return
;
}
try
{
this
.
createPanelIfNeeded
(
)
;
let
popup
=
document
.
getElementById
(
"
panic
-
button
-
success
-
notification
"
)
;
popup
.
hidden
=
false
;
let
onTimeout
=
(
)
=
>
{
PanicButtonNotifier
.
close
(
)
;
removeListeners
(
)
;
}
;
popup
.
addEventListener
(
"
popupshown
"
function
(
)
{
PanicButtonNotifier
.
timer
=
setTimeout
(
onTimeout
3000
)
;
}
)
;
let
onUserInteractsWithPopup
=
(
)
=
>
{
clearTimeout
(
PanicButtonNotifier
.
timer
)
;
removeListeners
(
)
;
}
;
popup
.
addEventListener
(
"
mouseover
"
onUserInteractsWithPopup
)
;
window
.
addEventListener
(
"
keydown
"
onUserInteractsWithPopup
)
;
let
removeListeners
=
(
)
=
>
{
popup
.
removeEventListener
(
"
mouseover
"
onUserInteractsWithPopup
)
;
window
.
removeEventListener
(
"
keydown
"
onUserInteractsWithPopup
)
;
popup
.
removeEventListener
(
"
popuphidden
"
removeListeners
)
;
}
;
popup
.
addEventListener
(
"
popuphidden
"
removeListeners
)
;
let
widget
=
CustomizableUI
.
getWidget
(
"
panic
-
button
"
)
.
forWindow
(
window
)
;
let
anchor
=
widget
.
anchor
.
icon
;
popup
.
openPopup
(
anchor
popup
.
getAttribute
(
"
position
"
)
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
close
(
)
{
let
popup
=
document
.
getElementById
(
"
panic
-
button
-
success
-
notification
"
)
;
popup
.
hidePopup
(
)
;
}
}
;
const
SafeBrowsingNotificationBox
=
{
_currentURIBaseDomain
:
null
show
(
title
buttons
)
{
let
uri
=
gBrowser
.
currentURI
;
try
{
this
.
_currentURIBaseDomain
=
Services
.
eTLD
.
getBaseDomain
(
uri
)
;
}
catch
(
e
)
{
this
.
_currentURIBaseDomain
=
uri
.
asciiHost
|
|
uri
.
asciiSpec
;
}
let
notificationBox
=
gBrowser
.
getNotificationBox
(
)
;
let
value
=
"
blocked
-
badware
-
page
"
;
let
previousNotification
=
notificationBox
.
getNotificationWithValue
(
value
)
;
if
(
previousNotification
)
{
notificationBox
.
removeNotification
(
previousNotification
)
;
}
let
notification
=
notificationBox
.
appendNotification
(
value
{
label
:
title
image
:
"
chrome
:
/
/
global
/
skin
/
icons
/
blocked
.
svg
"
priority
:
notificationBox
.
PRIORITY_CRITICAL_HIGH
}
buttons
)
;
notification
.
persistence
=
-
1
;
}
onLocationChange
(
aLocationURI
)
{
if
(
!
this
.
_currentURIBaseDomain
)
{
return
;
}
let
newURIBaseDomain
=
Services
.
eTLD
.
getBaseDomain
(
aLocationURI
)
;
if
(
newURIBaseDomain
!
=
=
this
.
_currentURIBaseDomain
)
{
let
notificationBox
=
gBrowser
.
getNotificationBox
(
)
;
let
notification
=
notificationBox
.
getNotificationWithValue
(
"
blocked
-
badware
-
page
"
)
;
if
(
notification
)
{
notificationBox
.
removeNotification
(
notification
false
)
;
}
this
.
_currentURIBaseDomain
=
null
;
}
}
}
;
class
TabDialogBox
{
static
_containerFor
(
browser
)
{
return
browser
.
parentNode
.
parentNode
;
}
constructor
(
browser
)
{
this
.
_weakBrowserRef
=
Cu
.
getWeakReference
(
browser
)
;
let
template
=
document
.
getElementById
(
"
dialogStackTemplate
"
)
;
let
dialogStack
=
template
.
content
.
cloneNode
(
true
)
.
firstElementChild
;
dialogStack
.
classList
.
add
(
"
tab
-
prompt
-
dialog
"
)
;
TabDialogBox
.
_containerFor
(
browser
)
.
appendChild
(
dialogStack
)
;
let
dialogTemplate
=
dialogStack
.
firstElementChild
;
this
.
_tabDialogManager
=
new
SubDialogManager
(
{
dialogStack
dialogTemplate
orderType
:
SubDialogManager
.
ORDER_QUEUE
allowDuplicateDialogs
:
true
dialogOptions
:
{
consumeOutsideClicks
:
false
}
}
)
;
}
open
(
aURL
{
features
=
null
allowDuplicateDialogs
=
true
sizeTo
keepOpenSameOriginNav
modalType
=
null
allowFocusCheckbox
=
false
}
=
{
}
.
.
.
aParams
)
{
let
resolveClosed
;
let
closedPromise
=
new
Promise
(
resolve
=
>
(
resolveClosed
=
resolve
)
)
;
let
dialogManager
=
modalType
=
=
=
Ci
.
nsIPrompt
.
MODAL_TYPE_CONTENT
?
this
.
getContentDialogManager
(
)
:
this
.
_tabDialogManager
;
let
hasDialogs
=
(
)
=
>
this
.
_tabDialogManager
.
hasDialogs
|
|
this
.
_contentDialogManager
?
.
hasDialogs
;
if
(
!
hasDialogs
(
)
)
{
this
.
_onFirstDialogOpen
(
)
;
}
let
closingCallback
=
event
=
>
{
if
(
!
hasDialogs
(
)
)
{
this
.
_onLastDialogClose
(
)
;
}
if
(
allowFocusCheckbox
&
&
!
event
.
detail
?
.
abort
)
{
this
.
maybeSetAllowTabSwitchPermission
(
event
.
target
)
;
}
}
;
if
(
modalType
=
=
Ci
.
nsIPrompt
.
MODAL_TYPE_CONTENT
)
{
sizeTo
=
"
limitheight
"
;
}
let
dialog
=
dialogManager
.
open
(
aURL
{
features
allowDuplicateDialogs
sizeTo
closingCallback
closedCallback
:
resolveClosed
}
.
.
.
aParams
)
;
if
(
dialog
)
{
dialog
.
_keepOpenSameOriginNav
=
keepOpenSameOriginNav
;
}
return
{
closedPromise
dialog
}
;
}
_onFirstDialogOpen
(
)
{
this
.
browser
.
setAttribute
(
"
tabDialogShowing
"
true
)
;
UpdatePopupNotificationsVisibility
(
)
;
this
.
_lastPrincipal
=
this
.
browser
.
contentPrincipal
;
this
.
browser
.
addProgressListener
(
this
Ci
.
nsIWebProgress
.
NOTIFY_LOCATION
)
;
this
.
tab
?
.
addEventListener
(
"
TabClose
"
this
)
;
}
_onLastDialogClose
(
)
{
this
.
browser
.
removeAttribute
(
"
tabDialogShowing
"
)
;
UpdatePopupNotificationsVisibility
(
)
;
this
.
browser
.
removeProgressListener
(
this
)
;
this
.
_lastPrincipal
=
null
;
this
.
tab
?
.
removeEventListener
(
"
TabClose
"
this
)
;
}
_buildContentPromptDialog
(
)
{
let
template
=
document
.
getElementById
(
"
dialogStackTemplate
"
)
;
let
contentDialogStack
=
template
.
content
.
cloneNode
(
true
)
.
firstElementChild
;
contentDialogStack
.
classList
.
add
(
"
content
-
prompt
-
dialog
"
)
;
let
browserContainer
=
TabDialogBox
.
_containerFor
(
this
.
browser
)
;
let
tabPromptDialog
=
browserContainer
.
querySelector
(
"
.
tab
-
prompt
-
dialog
"
)
;
browserContainer
.
insertBefore
(
contentDialogStack
tabPromptDialog
)
;
let
contentDialogTemplate
=
contentDialogStack
.
firstElementChild
;
this
.
_contentDialogManager
=
new
SubDialogManager
(
{
dialogStack
:
contentDialogStack
dialogTemplate
:
contentDialogTemplate
orderType
:
SubDialogManager
.
ORDER_QUEUE
allowDuplicateDialogs
:
true
dialogOptions
:
{
consumeOutsideClicks
:
false
}
}
)
;
}
handleEvent
(
event
)
{
if
(
event
.
type
!
=
=
"
TabClose
"
)
{
return
;
}
this
.
abortAllDialogs
(
)
;
}
abortAllDialogs
(
)
{
this
.
_tabDialogManager
.
abortDialogs
(
)
;
this
.
_contentDialogManager
?
.
abortDialogs
(
)
;
}
focus
(
)
{
if
(
this
.
_tabDialogManager
.
_dialogs
.
length
)
{
this
.
_tabDialogManager
.
focusTopDialog
(
)
;
return
;
}
this
.
_contentDialogManager
?
.
focusTopDialog
(
)
;
}
onLocationChange
(
aWebProgress
aRequest
aLocation
aFlags
)
{
if
(
!
aWebProgress
.
isTopLevel
|
|
aFlags
&
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
)
{
return
;
}
let
filterFn
;
if
(
this
.
_lastPrincipal
?
.
isSameOrigin
(
aLocation
this
.
browser
.
browsingContext
.
usePrivateBrowsing
)
)
{
filterFn
=
dialog
=
>
!
dialog
.
_keepOpenSameOriginNav
;
}
this
.
_lastPrincipal
=
this
.
browser
.
contentPrincipal
;
this
.
_tabDialogManager
.
abortDialogs
(
filterFn
)
;
this
.
_contentDialogManager
?
.
abortDialogs
(
filterFn
)
;
}
get
tab
(
)
{
return
gBrowser
.
getTabForBrowser
(
this
.
browser
)
;
}
get
browser
(
)
{
let
browser
=
this
.
_weakBrowserRef
.
get
(
)
;
if
(
!
browser
)
{
throw
new
Error
(
"
Stale
dialog
box
!
The
associated
browser
is
gone
.
"
)
;
}
return
browser
;
}
getTabDialogManager
(
)
{
return
this
.
_tabDialogManager
;
}
getContentDialogManager
(
)
{
if
(
!
this
.
_contentDialogManager
)
{
this
.
_buildContentPromptDialog
(
)
;
}
return
this
.
_contentDialogManager
;
}
onNextPromptShowAllowFocusCheckboxFor
(
principal
)
{
this
.
_allowTabFocusByPromptPrincipal
=
principal
;
}
maybeSetAllowTabSwitchPermission
(
dialog
)
{
let
checkbox
=
dialog
.
querySelector
(
"
checkbox
"
)
;
if
(
checkbox
.
checked
)
{
Services
.
perms
.
addFromPrincipal
(
this
.
_allowTabFocusByPromptPrincipal
"
focus
-
tab
-
by
-
prompt
"
Services
.
perms
.
ALLOW_ACTION
)
;
}
this
.
_allowTabFocusByPromptPrincipal
=
null
;
}
}
TabDialogBox
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIWebProgressListener
"
"
nsISupportsWeakReference
"
]
)
;
function
TabModalPromptBox
(
browser
)
{
this
.
_weakBrowserRef
=
Cu
.
getWeakReference
(
browser
)
;
this
.
_contentPrompts
=
new
WeakMap
(
)
;
this
.
_tabPrompts
=
new
WeakMap
(
)
;
}
TabModalPromptBox
.
prototype
=
{
_promptCloseCallback
(
onCloseCallback
principalToAllowFocusFor
allowFocusCheckbox
.
.
.
args
)
{
if
(
principalToAllowFocusFor
&
&
allowFocusCheckbox
&
&
allowFocusCheckbox
.
checked
)
{
Services
.
perms
.
addFromPrincipal
(
principalToAllowFocusFor
"
focus
-
tab
-
by
-
prompt
"
Services
.
perms
.
ALLOW_ACTION
)
;
}
onCloseCallback
.
apply
(
this
args
)
;
}
getPrompt
(
promptEl
)
{
if
(
promptEl
.
classList
.
contains
(
"
tab
-
prompt
"
)
)
{
return
this
.
_tabPrompts
.
get
(
promptEl
)
;
}
return
this
.
_contentPrompts
.
get
(
promptEl
)
;
}
appendPrompt
(
args
onCloseCallback
)
{
let
browser
=
this
.
browser
;
let
newPrompt
=
new
TabModalPrompt
(
browser
.
ownerGlobal
)
;
if
(
args
.
modalType
=
=
=
Ci
.
nsIPrompt
.
MODAL_TYPE_TAB
)
{
newPrompt
.
element
.
classList
.
add
(
"
tab
-
prompt
"
)
;
this
.
_tabPrompts
.
set
(
newPrompt
.
element
newPrompt
)
;
}
else
{
newPrompt
.
element
.
classList
.
add
(
"
content
-
prompt
"
)
;
this
.
_contentPrompts
.
set
(
newPrompt
.
element
newPrompt
)
;
}
browser
.
parentNode
.
insertBefore
(
newPrompt
.
element
browser
.
nextElementSibling
)
;
browser
.
setAttribute
(
"
tabmodalPromptShowing
"
true
)
;
if
(
args
.
modalType
=
=
=
Ci
.
nsIPrompt
.
MODAL_TYPE_TAB
&
&
!
browser
.
hasAttribute
(
"
tabmodalChromePromptShowing
"
)
)
{
browser
.
setAttribute
(
"
tabmodalChromePromptShowing
"
true
)
;
UpdatePopupNotificationsVisibility
(
)
;
}
let
prompts
=
this
.
listPrompts
(
args
.
modalType
)
;
if
(
prompts
.
length
>
1
)
{
newPrompt
.
element
.
hidden
=
true
;
}
let
principalToAllowFocusFor
=
this
.
_allowTabFocusByPromptPrincipal
;
delete
this
.
_allowTabFocusByPromptPrincipal
;
let
allowFocusCheckbox
;
let
hostForAllowFocusCheckbox
=
"
"
;
try
{
hostForAllowFocusCheckbox
=
principalToAllowFocusFor
.
URI
.
host
;
}
catch
(
ex
)
{
}
if
(
hostForAllowFocusCheckbox
)
{
let
allowFocusRow
=
document
.
createElement
(
"
div
"
)
;
let
spacer
=
document
.
createElement
(
"
div
"
)
;
allowFocusRow
.
appendChild
(
spacer
)
;
allowFocusCheckbox
=
document
.
createXULElement
(
"
checkbox
"
)
;
document
.
l10n
.
setAttributes
(
allowFocusCheckbox
"
tabbrowser
-
allow
-
dialogs
-
to
-
get
-
focus
"
{
domain
:
hostForAllowFocusCheckbox
}
)
;
allowFocusRow
.
appendChild
(
allowFocusCheckbox
)
;
newPrompt
.
ui
.
rows
.
append
(
allowFocusRow
)
;
}
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
let
closeCB
=
this
.
_promptCloseCallback
.
bind
(
null
onCloseCallback
principalToAllowFocusFor
allowFocusCheckbox
)
;
newPrompt
.
init
(
args
tab
closeCB
)
;
return
newPrompt
;
}
removePrompt
(
aPrompt
)
{
let
{
modalType
}
=
aPrompt
.
args
;
if
(
modalType
=
=
=
Ci
.
nsIPrompt
.
MODAL_TYPE_TAB
)
{
this
.
_tabPrompts
.
delete
(
aPrompt
.
element
)
;
}
else
{
this
.
_contentPrompts
.
delete
(
aPrompt
.
element
)
;
}
let
browser
=
this
.
browser
;
aPrompt
.
element
.
remove
(
)
;
let
prompts
=
this
.
listPrompts
(
modalType
)
;
if
(
prompts
.
length
)
{
let
prompt
=
prompts
[
prompts
.
length
-
1
]
;
prompt
.
element
.
hidden
=
false
;
prompt
.
Dialog
.
setDefaultFocus
(
)
;
}
else
if
(
modalType
=
=
=
Ci
.
nsIPrompt
.
MODAL_TYPE_TAB
)
{
browser
.
removeAttribute
(
"
tabmodalChromePromptShowing
"
)
;
UpdatePopupNotificationsVisibility
(
)
;
}
if
(
!
this
.
_hasPrompts
(
)
)
{
browser
.
removeAttribute
(
"
tabmodalPromptShowing
"
)
;
browser
.
focus
(
)
;
}
}
_hasPrompts
(
)
{
return
!
!
this
.
_getPromptElements
(
)
.
length
;
}
_getPromptElements
(
aModalType
=
null
)
{
let
selector
=
"
tabmodalprompt
"
;
if
(
aModalType
!
=
null
)
{
if
(
aModalType
=
=
=
Ci
.
nsIPrompt
.
MODAL_TYPE_TAB
)
{
selector
+
=
"
.
tab
-
prompt
"
;
}
else
{
selector
+
=
"
.
content
-
prompt
"
;
}
}
return
this
.
browser
.
parentNode
.
querySelectorAll
(
selector
)
;
}
listPrompts
(
aModalType
=
null
)
{
let
promptMap
;
if
(
aModalType
)
{
if
(
aModalType
=
=
=
Ci
.
nsIPrompt
.
MODAL_TYPE_TAB
)
{
promptMap
=
this
.
_tabPrompts
;
}
else
{
promptMap
=
this
.
_contentPrompts
;
}
}
let
elements
=
this
.
_getPromptElements
(
aModalType
)
;
if
(
promptMap
)
{
return
[
.
.
.
elements
]
.
map
(
el
=
>
promptMap
.
get
(
el
)
)
;
}
return
[
.
.
.
elements
]
.
map
(
el
=
>
this
.
_contentPrompts
.
get
(
el
)
|
|
this
.
_tabPrompts
.
get
(
el
)
)
;
}
onNextPromptShowAllowFocusCheckboxFor
(
principal
)
{
this
.
_allowTabFocusByPromptPrincipal
=
principal
;
}
get
browser
(
)
{
let
browser
=
this
.
_weakBrowserRef
.
get
(
)
;
if
(
!
browser
)
{
throw
new
Error
(
"
Stale
promptbox
!
The
associated
browser
is
gone
.
"
)
;
}
return
browser
;
}
}
;
var
gDialogBox
=
{
_dialog
:
null
_nextOpenJumpsQueue
:
false
_queued
:
[
]
_didCloseHTMLDialog
:
null
_didOpenHTMLDialog
:
false
get
dialog
(
)
{
return
this
.
_dialog
;
}
get
isOpen
(
)
{
return
!
!
this
.
_dialog
;
}
replaceDialogIfOpen
(
)
{
this
.
_dialog
?
.
close
(
)
;
this
.
_nextOpenJumpsQueue
=
true
;
}
async
open
(
uri
args
)
{
const
queueMethod
=
this
.
_nextOpenJumpsQueue
?
"
unshift
"
:
"
push
"
;
this
.
_nextOpenJumpsQueue
=
false
;
if
(
this
.
isOpen
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
this
.
_queued
[
queueMethod
]
(
{
resolve
reject
uri
args
}
)
;
}
)
;
}
if
(
window
.
windowUtils
.
isInModalState
(
)
&
&
!
args
.
getProperty
(
"
async
"
)
)
{
throw
Components
.
Exception
(
"
Prompt
could
not
be
shown
.
"
Cr
.
NS_ERROR_NOT_AVAILABLE
)
;
}
this
.
_didOpenHTMLDialog
=
false
;
let
haveClosedPromise
=
new
Promise
(
resolve
=
>
{
this
.
_didCloseHTMLDialog
=
resolve
;
}
)
;
window
.
focus
(
)
;
try
{
await
this
.
_open
(
uri
args
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
finally
{
let
dialog
=
document
.
getElementById
(
"
window
-
modal
-
dialog
"
)
;
if
(
dialog
.
open
)
{
dialog
.
close
(
)
;
}
if
(
this
.
_didOpenHTMLDialog
)
{
await
haveClosedPromise
;
}
dialog
.
style
.
visibility
=
"
hidden
"
;
dialog
.
style
.
height
=
"
0
"
;
dialog
.
style
.
width
=
"
0
"
;
document
.
documentElement
.
removeAttribute
(
"
window
-
modal
-
open
"
)
;
dialog
.
removeEventListener
(
"
dialogopen
"
this
)
;
dialog
.
removeEventListener
(
"
close
"
this
)
;
this
.
_updateMenuAndCommandState
(
true
)
;
this
.
_dialog
=
null
;
UpdatePopupNotificationsVisibility
(
)
;
}
if
(
this
.
_queued
.
length
)
{
setTimeout
(
(
)
=
>
this
.
_openNextDialog
(
)
0
)
;
}
return
args
;
}
_openNextDialog
(
)
{
if
(
!
this
.
isOpen
)
{
let
{
resolve
reject
uri
args
}
=
this
.
_queued
.
shift
(
)
;
this
.
open
(
uri
args
)
.
then
(
resolve
reject
)
;
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
dialogopen
"
:
this
.
_dialog
.
focus
(
true
)
;
break
;
case
"
close
"
:
this
.
_didCloseHTMLDialog
(
)
;
this
.
_dialog
.
close
(
)
;
break
;
}
}
_open
(
uri
args
)
{
let
offset
=
window
.
windowUtils
.
getBoundsWithoutFlushing
(
gBrowser
.
selectedBrowser
)
.
top
;
let
parentElement
=
document
.
getElementById
(
"
window
-
modal
-
dialog
"
)
;
parentElement
.
style
.
setProperty
(
"
-
-
chrome
-
offset
"
offset
+
"
px
"
)
;
parentElement
.
style
.
removeProperty
(
"
visibility
"
)
;
parentElement
.
style
.
removeProperty
(
"
width
"
)
;
parentElement
.
style
.
removeProperty
(
"
height
"
)
;
document
.
documentElement
.
setAttribute
(
"
window
-
modal
-
open
"
true
)
;
parentElement
.
showModal
(
)
;
this
.
_didOpenHTMLDialog
=
true
;
this
.
_updateMenuAndCommandState
(
false
)
;
let
template
=
document
.
getElementById
(
"
window
-
modal
-
dialog
-
template
"
)
.
content
.
firstElementChild
;
parentElement
.
addEventListener
(
"
dialogopen
"
this
)
;
parentElement
.
addEventListener
(
"
close
"
this
)
;
this
.
_dialog
=
new
SubDialog
(
{
template
parentElement
id
:
"
window
-
modal
-
dialog
-
subdialog
"
options
:
{
consumeOutsideClicks
:
false
}
}
)
;
let
closedPromise
=
new
Promise
(
resolve
=
>
{
this
.
_closedCallback
=
function
(
)
{
PromptUtils
.
fireDialogEvent
(
window
"
DOMModalDialogClosed
"
)
;
resolve
(
)
;
}
;
}
)
;
this
.
_dialog
.
open
(
uri
{
features
:
"
resizable
=
no
"
modalType
:
Ci
.
nsIPrompt
.
MODAL_TYPE_INTERNAL_WINDOW
closedCallback
:
(
)
=
>
{
this
.
_closedCallback
(
)
;
}
}
args
)
;
UpdatePopupNotificationsVisibility
(
)
;
return
closedPromise
;
}
_nonUpdatableElements
:
new
Set
(
[
"
key_browserConsole
"
"
key_browserToolbox
"
"
key_undo
"
"
key_redo
"
"
key_cut
"
"
key_copy
"
"
key_paste
"
"
key_delete
"
"
key_selectAll
"
]
)
_updateMenuAndCommandState
(
shouldBeEnabled
)
{
let
editorCommands
=
document
.
getElementById
(
"
editMenuCommands
"
)
;
for
(
let
element
of
document
.
querySelectorAll
(
"
menubar
>
menu
command
key
:
not
(
[
command
]
)
"
)
)
{
if
(
editorCommands
?
.
contains
(
element
)
|
|
(
element
.
id
&
&
this
.
_nonUpdatableElements
.
has
(
element
.
id
)
)
)
{
continue
;
}
if
(
element
.
nodeName
=
=
"
key
"
&
&
element
.
command
)
{
continue
;
}
if
(
!
shouldBeEnabled
)
{
if
(
element
.
getAttribute
(
"
disabled
"
)
!
=
"
true
"
)
{
element
.
setAttribute
(
"
disabled
"
true
)
;
}
else
{
element
.
setAttribute
(
"
wasdisabled
"
true
)
;
}
}
else
if
(
element
.
getAttribute
(
"
wasdisabled
"
)
!
=
"
true
"
)
{
element
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
element
.
removeAttribute
(
"
wasdisabled
"
)
;
}
}
}
}
;
if
(
window
.
location
.
href
!
=
AppConstants
.
BROWSER_CHROME_URL
)
{
gDialogBox
=
null
;
}
var
ConfirmationHint
=
{
_timerID
:
null
show
(
anchor
messageId
options
=
{
}
)
{
this
.
_reset
(
)
;
this
.
_message
.
textContent
=
gBrowserBundle
.
GetStringFromName
(
confirmationHint
.
{
messageId
}
.
label
)
;
if
(
options
.
showDescription
)
{
this
.
_description
.
textContent
=
gBrowserBundle
.
GetStringFromName
(
confirmationHint
.
{
messageId
}
.
description
)
;
this
.
_description
.
hidden
=
false
;
this
.
_panel
.
classList
.
add
(
"
with
-
description
"
)
;
}
else
{
this
.
_description
.
hidden
=
true
;
this
.
_panel
.
classList
.
remove
(
"
with
-
description
"
)
;
}
this
.
_panel
.
setAttribute
(
"
data
-
message
-
id
"
messageId
)
;
const
DURATION
=
options
.
showDescription
?
4000
:
1500
;
this
.
_panel
.
addEventListener
(
"
popupshown
"
(
)
=
>
{
this
.
_animationBox
.
setAttribute
(
"
animate
"
"
true
"
)
;
this
.
_timerID
=
setTimeout
(
(
)
=
>
{
this
.
_panel
.
hidePopup
(
true
)
;
}
DURATION
+
120
)
;
}
{
once
:
true
}
)
;
this
.
_panel
.
addEventListener
(
"
popuphidden
"
(
)
=
>
{
this
.
_reset
(
)
;
}
{
once
:
true
}
)
;
this
.
_panel
.
openPopup
(
anchor
{
position
:
"
bottomcenter
topleft
"
triggerEvent
:
options
.
event
}
)
;
}
_reset
(
)
{
if
(
this
.
_timerID
)
{
clearTimeout
(
this
.
_timerID
)
;
this
.
_timerID
=
null
;
}
if
(
this
.
__panel
)
{
this
.
_animationBox
.
removeAttribute
(
"
animate
"
)
;
this
.
_panel
.
removeAttribute
(
"
data
-
message
-
id
"
)
;
}
}
get
_panel
(
)
{
this
.
_ensurePanel
(
)
;
return
this
.
__panel
;
}
get
_animationBox
(
)
{
this
.
_ensurePanel
(
)
;
delete
this
.
_animationBox
;
return
(
this
.
_animationBox
=
document
.
getElementById
(
"
confirmation
-
hint
-
checkmark
-
animation
-
container
"
)
)
;
}
get
_message
(
)
{
this
.
_ensurePanel
(
)
;
delete
this
.
_message
;
return
(
this
.
_message
=
document
.
getElementById
(
"
confirmation
-
hint
-
message
"
)
)
;
}
get
_description
(
)
{
this
.
_ensurePanel
(
)
;
delete
this
.
_description
;
return
(
this
.
_description
=
document
.
getElementById
(
"
confirmation
-
hint
-
description
"
)
)
;
}
_ensurePanel
(
)
{
if
(
!
this
.
__panel
)
{
let
wrapper
=
document
.
getElementById
(
"
confirmation
-
hint
-
wrapper
"
)
;
wrapper
.
replaceWith
(
wrapper
.
content
)
;
this
.
__panel
=
document
.
getElementById
(
"
confirmation
-
hint
"
)
;
}
}
}
;
var
FirefoxViewHandler
=
{
tab
:
null
BUTTON_ID
:
"
firefox
-
view
-
button
"
_enabled
:
false
get
button
(
)
{
return
document
.
getElementById
(
this
.
BUTTON_ID
)
;
}
init
(
)
{
CustomizableUI
.
addListener
(
this
)
;
this
.
_updateEnabledState
=
this
.
_updateEnabledState
.
bind
(
this
)
;
this
.
_updateEnabledState
(
)
;
NimbusFeatures
.
majorRelease2022
.
onUpdate
(
this
.
_updateEnabledState
)
;
if
(
this
.
_enabled
)
{
this
.
_toggleNotificationDot
(
FirefoxViewNotificationManager
.
shouldNotificationDotBeShowing
(
)
)
;
}
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
SyncedTabs
:
"
resource
:
/
/
services
-
sync
/
SyncedTabs
.
jsm
"
}
)
;
Services
.
obs
.
addObserver
(
this
"
firefoxview
-
notification
-
dot
-
update
"
)
;
}
uninit
(
)
{
CustomizableUI
.
removeListener
(
this
)
;
Services
.
obs
.
removeObserver
(
this
"
firefoxview
-
notification
-
dot
-
update
"
)
;
NimbusFeatures
.
majorRelease2022
.
off
(
this
.
_updateEnabledState
)
;
}
_updateEnabledState
(
)
{
this
.
_enabled
=
NimbusFeatures
.
majorRelease2022
.
getVariable
(
"
firefoxView
"
)
;
document
.
documentElement
.
toggleAttribute
(
"
firefoxviewhidden
"
!
this
.
_enabled
)
;
document
.
getElementById
(
"
menu_openFirefoxView
"
)
.
hidden
=
!
this
.
_enabled
;
}
onWidgetRemoved
(
aWidgetId
)
{
if
(
aWidgetId
=
=
this
.
BUTTON_ID
&
&
this
.
tab
)
{
gBrowser
.
removeTab
(
this
.
tab
)
;
}
}
onWidgetAdded
(
aWidgetId
)
{
if
(
aWidgetId
=
=
=
this
.
BUTTON_ID
)
{
this
.
button
.
removeAttribute
(
"
open
"
)
;
}
}
openTab
(
event
)
{
if
(
event
?
.
type
=
=
"
mousedown
"
&
&
event
?
.
button
!
=
0
)
{
return
;
}
if
(
!
CustomizableUI
.
getPlacementOfWidget
(
this
.
BUTTON_ID
)
)
{
CustomizableUI
.
addWidgetToArea
(
this
.
BUTTON_ID
CustomizableUI
.
AREA_TABSTRIP
CustomizableUI
.
getPlacementOfWidget
(
"
tabbrowser
-
tabs
"
)
.
position
)
;
}
if
(
!
this
.
tab
)
{
this
.
tab
=
gBrowser
.
addTrustedTab
(
"
about
:
firefoxview
"
)
;
this
.
tab
.
addEventListener
(
"
TabClose
"
this
{
once
:
true
}
)
;
gBrowser
.
tabContainer
.
addEventListener
(
"
TabSelect
"
this
)
;
window
.
addEventListener
(
"
activate
"
this
)
;
gBrowser
.
hideTab
(
this
.
tab
)
;
this
.
button
.
setAttribute
(
"
aria
-
controls
"
this
.
tab
.
linkedPanel
)
;
}
gBrowser
.
selectedTab
=
this
.
tab
;
}
handleEvent
(
e
)
{
switch
(
e
.
type
)
{
case
"
TabSelect
"
:
this
.
button
?
.
toggleAttribute
(
"
open
"
e
.
target
=
=
this
.
tab
)
;
this
.
button
?
.
setAttribute
(
"
aria
-
selected
"
e
.
target
=
=
this
.
tab
)
;
this
.
_recordViewIfTabSelected
(
)
;
this
.
_onTabForegrounded
(
)
;
break
;
case
"
TabClose
"
:
this
.
tab
=
null
;
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabSelect
"
this
)
;
this
.
button
?
.
removeAttribute
(
"
aria
-
controls
"
)
;
break
;
case
"
activate
"
:
this
.
_onTabForegrounded
(
)
;
break
;
}
}
observe
(
sub
topic
data
)
{
switch
(
topic
)
{
case
"
firefoxview
-
notification
-
dot
-
update
"
:
let
shouldShow
=
data
=
=
=
"
true
"
;
this
.
_toggleNotificationDot
(
shouldShow
)
;
break
;
}
}
_onTabForegrounded
(
)
{
if
(
this
.
tab
?
.
selected
)
{
this
.
SyncedTabs
.
syncTabs
(
)
;
Services
.
obs
.
notifyObservers
(
null
"
firefoxview
-
notification
-
dot
-
update
"
"
false
"
)
;
}
}
_recordViewIfTabSelected
(
)
{
if
(
this
.
tab
?
.
selected
)
{
const
PREF_NAME
=
"
browser
.
firefox
-
view
.
view
-
count
"
;
const
MAX_VIEW_COUNT
=
10
;
let
viewCount
=
Services
.
prefs
.
getIntPref
(
PREF_NAME
0
)
;
if
(
viewCount
<
MAX_VIEW_COUNT
)
{
Services
.
prefs
.
setIntPref
(
PREF_NAME
viewCount
+
1
)
;
}
}
}
_toggleNotificationDot
(
shouldShow
)
{
this
.
button
?
.
toggleAttribute
(
"
attention
"
shouldShow
)
;
}
}
;
