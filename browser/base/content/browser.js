ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
NotificationDB
.
jsm
"
)
;
const
{
WebExtensionPolicy
}
=
Cu
.
getGlobalForObject
(
Services
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
BrowserUsageTelemetry
:
"
resource
:
/
/
/
modules
/
BrowserUsageTelemetry
.
jsm
"
BrowserUtils
:
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
BrowserWindowTracker
:
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
CFRPageActions
:
"
resource
:
/
/
activity
-
stream
/
lib
/
CFRPageActions
.
jsm
"
CharsetMenu
:
"
resource
:
/
/
gre
/
modules
/
CharsetMenu
.
jsm
"
Color
:
"
resource
:
/
/
gre
/
modules
/
Color
.
jsm
"
ContentSearch
:
"
resource
:
/
/
/
modules
/
ContentSearch
.
jsm
"
ContextualIdentityService
:
"
resource
:
/
/
gre
/
modules
/
ContextualIdentityService
.
jsm
"
CustomizableUI
:
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
Deprecated
:
"
resource
:
/
/
gre
/
modules
/
Deprecated
.
jsm
"
DownloadsCommon
:
"
resource
:
/
/
/
modules
/
DownloadsCommon
.
jsm
"
E10SUtils
:
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
ExtensionsUI
:
"
resource
:
/
/
/
modules
/
ExtensionsUI
.
jsm
"
FormValidationHandler
:
"
resource
:
/
/
/
modules
/
FormValidationHandler
.
jsm
"
LanguagePrompt
:
"
resource
:
/
/
gre
/
modules
/
LanguagePrompt
.
jsm
"
HomePage
:
"
resource
:
/
/
/
modules
/
HomePage
.
jsm
"
LightweightThemeConsumer
:
"
resource
:
/
/
gre
/
modules
/
LightweightThemeConsumer
.
jsm
"
LightweightThemeManager
:
"
resource
:
/
/
gre
/
modules
/
LightweightThemeManager
.
jsm
"
Log
:
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
LoginManagerParent
:
"
resource
:
/
/
gre
/
modules
/
LoginManagerParent
.
jsm
"
NetUtil
:
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
NewTabUtils
:
"
resource
:
/
/
gre
/
modules
/
NewTabUtils
.
jsm
"
OpenInTabsUtils
:
"
resource
:
/
/
/
modules
/
OpenInTabsUtils
.
jsm
"
PageActions
:
"
resource
:
/
/
/
modules
/
PageActions
.
jsm
"
PageThumbs
:
"
resource
:
/
/
gre
/
modules
/
PageThumbs
.
jsm
"
PanelMultiView
:
"
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
PanelView
:
"
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
PlacesUIUtils
:
"
resource
:
/
/
/
modules
/
PlacesUIUtils
.
jsm
"
PlacesTransactions
:
"
resource
:
/
/
gre
/
modules
/
PlacesTransactions
.
jsm
"
PluralForm
:
"
resource
:
/
/
gre
/
modules
/
PluralForm
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
ProcessHangMonitor
:
"
resource
:
/
/
/
modules
/
ProcessHangMonitor
.
jsm
"
PromiseUtils
:
"
resource
:
/
/
gre
/
modules
/
PromiseUtils
.
jsm
"
ReaderMode
:
"
resource
:
/
/
gre
/
modules
/
ReaderMode
.
jsm
"
ReaderParent
:
"
resource
:
/
/
/
modules
/
ReaderParent
.
jsm
"
SafeBrowsing
:
"
resource
:
/
/
gre
/
modules
/
SafeBrowsing
.
jsm
"
Sanitizer
:
"
resource
:
/
/
/
modules
/
Sanitizer
.
jsm
"
SessionStartup
:
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStartup
.
jsm
"
SessionStore
:
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStore
.
jsm
"
SchedulePressure
:
"
resource
:
/
/
/
modules
/
SchedulePressure
.
jsm
"
ShortcutUtils
:
"
resource
:
/
/
gre
/
modules
/
ShortcutUtils
.
jsm
"
SimpleServiceDiscovery
:
"
resource
:
/
/
gre
/
modules
/
SimpleServiceDiscovery
.
jsm
"
SiteDataManager
:
"
resource
:
/
/
/
modules
/
SiteDataManager
.
jsm
"
SitePermissions
:
"
resource
:
/
/
/
modules
/
SitePermissions
.
jsm
"
TabCrashHandler
:
"
resource
:
/
/
/
modules
/
ContentCrashHandlers
.
jsm
"
TelemetryStopwatch
:
"
resource
:
/
/
gre
/
modules
/
TelemetryStopwatch
.
jsm
"
Translation
:
"
resource
:
/
/
/
modules
/
translation
/
Translation
.
jsm
"
UITour
:
"
resource
:
/
/
/
modules
/
UITour
.
jsm
"
UpdateUtils
:
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
Utils
:
"
resource
:
/
/
gre
/
modules
/
sessionstore
/
Utils
.
jsm
"
Weave
:
"
resource
:
/
/
services
-
sync
/
main
.
js
"
WebNavigationFrames
:
"
resource
:
/
/
gre
/
modules
/
WebNavigationFrames
.
jsm
"
fxAccounts
:
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
webrtcUI
:
"
resource
:
/
/
/
modules
/
webrtcUI
.
jsm
"
ZoomUI
:
"
resource
:
/
/
/
modules
/
ZoomUI
.
jsm
"
}
)
;
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
ChromeUtils
.
defineModuleGetter
(
this
"
PluginCrashReporter
"
"
resource
:
/
/
/
modules
/
ContentCrashHandlers
.
jsm
"
)
;
}
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
PlacesTreeView
"
"
chrome
:
/
/
browser
/
content
/
places
/
treeView
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
PlacesInsertionPoint
"
"
PlacesController
"
"
PlacesControllerDragHelper
"
]
"
chrome
:
/
/
browser
/
content
/
places
/
controller
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
PrintUtils
"
"
chrome
:
/
/
global
/
content
/
printUtils
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
ZoomManager
"
"
chrome
:
/
/
global
/
content
/
viewZoomOverlay
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
FullZoom
"
"
chrome
:
/
/
browser
/
content
/
browser
-
fullZoom
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
PanelUI
"
"
chrome
:
/
/
browser
/
content
/
customizableui
/
panelUI
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gViewSourceUtils
"
"
chrome
:
/
/
global
/
content
/
viewSourceUtils
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gTabsPanel
"
"
chrome
:
/
/
browser
/
content
/
browser
-
allTabsMenu
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
LightWeightThemeWebInstaller
"
"
gExtensionsNotifications
"
"
gXPInstallObserver
"
]
"
chrome
:
/
/
browser
/
content
/
browser
-
addons
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
ctrlTab
"
"
chrome
:
/
/
browser
/
content
/
browser
-
ctrlTab
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
CustomizationHandler
"
"
chrome
:
/
/
browser
/
content
/
browser
-
customization
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
PointerLock
"
"
FullScreen
"
]
"
chrome
:
/
/
browser
/
content
/
browser
-
fullScreenAndPointerLock
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
gGestureSupport
"
"
gHistorySwipeAnimation
"
]
"
chrome
:
/
/
browser
/
content
/
browser
-
gestureSupport
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gSafeBrowsing
"
"
chrome
:
/
/
browser
/
content
/
browser
-
safebrowsing
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gSync
"
"
chrome
:
/
/
browser
/
content
/
browser
-
sync
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gBrowserThumbnails
"
"
chrome
:
/
/
browser
/
content
/
browser
-
thumbnails
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
setContextMenuContentData
"
"
openContextMenu
"
"
nsContextMenu
"
]
"
chrome
:
/
/
browser
/
content
/
nsContextMenu
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
DownloadsPanel
"
"
DownloadsOverlayLoader
"
"
DownloadsSubview
"
"
DownloadsView
"
"
DownloadsViewUI
"
"
DownloadsViewController
"
"
DownloadsSummary
"
"
DownloadsFooter
"
"
DownloadsBlockedSubview
"
]
"
chrome
:
/
/
browser
/
content
/
downloads
/
downloads
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
[
"
DownloadsButton
"
"
DownloadsIndicatorView
"
]
"
chrome
:
/
/
browser
/
content
/
downloads
/
indicator
.
js
"
)
;
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gEditItemOverlay
"
"
chrome
:
/
/
browser
/
content
/
places
/
editBookmark
.
js
"
)
;
if
(
AppConstants
.
NIGHTLY_BUILD
)
{
XPCOMUtils
.
defineLazyScriptGetter
(
this
"
gWebRender
"
"
chrome
:
/
/
browser
/
content
/
browser
-
webrender
.
js
"
)
;
}
XPCOMUtils
.
defineLazyServiceGetters
(
this
{
Favicons
:
[
"
mozilla
.
org
/
browser
/
favicon
-
service
;
1
"
"
nsIFaviconService
"
]
gAboutNewTabService
:
[
"
mozilla
.
org
/
browser
/
aboutnewtab
-
service
;
1
"
"
nsIAboutNewTabService
"
]
gDNSService
:
[
"
mozilla
.
org
/
network
/
dns
-
service
;
1
"
"
nsIDNSService
"
]
gSerializationHelper
:
[
"
mozilla
.
org
/
network
/
serialization
-
helper
;
1
"
"
nsISerializationHelper
"
]
Marionette
:
[
"
mozilla
.
org
/
remote
/
marionette
;
1
"
"
nsIMarionette
"
]
WindowsUIUtils
:
[
"
mozilla
.
org
/
windows
-
ui
-
utils
;
1
"
"
nsIWindowsUIUtils
"
]
}
)
;
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
gCrashReporter
"
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
"
nsICrashReporter
"
)
;
}
XPCOMUtils
.
defineLazyGetter
(
this
"
gBrowserBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
browser
.
properties
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gNavigatorBundle
"
function
(
)
{
return
{
getString
(
key
)
{
return
gBrowserBundle
.
GetStringFromName
(
key
)
;
}
getFormattedString
(
key
array
)
{
return
gBrowserBundle
.
formatStringFromName
(
key
array
array
.
length
)
;
}
}
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gTabBrowserBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
tabbrowser
.
properties
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gCustomizeMode
"
function
(
)
{
let
scope
=
{
}
;
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizeMode
.
jsm
"
scope
)
;
return
new
scope
.
CustomizeMode
(
window
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
InlineSpellCheckerUI
"
function
(
)
{
let
tmp
=
{
}
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
InlineSpellChecker
.
jsm
"
tmp
)
;
return
new
tmp
.
InlineSpellChecker
(
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
PageMenuParent
"
function
(
)
{
let
tmp
=
{
}
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PageMenu
.
jsm
"
tmp
)
;
return
new
tmp
.
PageMenuParent
(
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
PopupNotifications
"
function
(
)
{
let
tmp
=
{
}
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PopupNotifications
.
jsm
"
tmp
)
;
try
{
let
shouldSuppress
=
(
)
=
>
{
return
window
.
windowState
=
=
window
.
STATE_MINIMIZED
|
|
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
!
=
"
valid
"
&
&
gURLBar
.
focused
)
;
}
;
return
new
tmp
.
PopupNotifications
(
gBrowser
document
.
getElementById
(
"
notification
-
popup
"
)
document
.
getElementById
(
"
notification
-
popup
-
box
"
)
{
shouldSuppress
}
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
return
null
;
}
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
Win7Features
"
function
(
)
{
if
(
AppConstants
.
platform
!
=
"
win
"
)
return
null
;
const
WINTASKBAR_CONTRACTID
=
"
mozilla
.
org
/
windows
-
taskbar
;
1
"
;
if
(
WINTASKBAR_CONTRACTID
in
Cc
&
&
Cc
[
WINTASKBAR_CONTRACTID
]
.
getService
(
Ci
.
nsIWinTaskbar
)
.
available
)
{
let
AeroPeek
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
WindowsPreviewPerTab
.
jsm
"
{
}
)
.
AeroPeek
;
return
{
onOpenWindow
(
)
{
AeroPeek
.
onOpenWindow
(
window
)
;
this
.
handledOpening
=
true
;
}
onCloseWindow
(
)
{
if
(
this
.
handledOpening
)
{
AeroPeek
.
onCloseWindow
(
window
)
;
}
}
handledOpening
:
false
}
;
}
return
null
;
}
)
;
var
gBrowser
;
var
gLastValidURLStr
=
"
"
;
var
gInPrintPreviewMode
=
false
;
var
gContextMenu
=
null
;
var
gMultiProcessBrowser
=
window
.
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
.
useRemoteTabs
;
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
{
var
gEditUIVisible
=
true
;
}
[
[
"
gNavToolbox
"
"
navigator
-
toolbox
"
]
[
"
gURLBar
"
"
urlbar
"
]
]
.
forEach
(
function
(
elementGlobal
)
{
var
[
name
id
]
=
elementGlobal
;
Object
.
defineProperty
(
window
name
{
configurable
:
true
enumerable
:
true
get
(
)
{
var
element
=
document
.
getElementById
(
id
)
;
if
(
!
element
)
return
null
;
delete
window
[
name
]
;
return
window
[
name
]
=
element
;
}
set
(
val
)
{
delete
window
[
name
]
;
return
window
[
name
]
=
val
;
}
}
)
;
}
)
;
Object
.
defineProperty
(
this
"
gFindBar
"
{
configurable
:
true
enumerable
:
true
get
(
)
{
return
gBrowser
.
getCachedFindBar
(
)
;
}
}
)
;
Object
.
defineProperty
(
this
"
gFindBarInitialized
"
{
configurable
:
true
enumerable
:
true
get
(
)
{
return
gBrowser
.
isFindBarInitialized
(
)
;
}
}
)
;
Object
.
defineProperty
(
this
"
gFindBarPromise
"
{
configurable
:
true
enumerable
:
true
get
(
)
{
return
gBrowser
.
getFindBar
(
)
;
}
}
)
;
async
function
gLazyFindCommand
(
cmd
.
.
.
args
)
{
let
fb
=
await
gFindBarPromise
;
if
(
fb
&
&
fb
[
cmd
]
)
{
fb
[
cmd
]
.
apply
(
fb
args
)
;
}
}
Object
.
defineProperty
(
this
"
AddonManager
"
{
configurable
:
true
enumerable
:
true
get
(
)
{
let
tmp
=
{
}
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
tmp
)
;
return
this
.
AddonManager
=
tmp
.
AddonManager
;
}
set
(
val
)
{
delete
this
.
AddonManager
;
return
this
.
AddonManager
=
val
;
}
}
)
;
var
gInitialPages
=
[
"
about
:
blank
"
"
about
:
newtab
"
"
about
:
home
"
"
about
:
privatebrowsing
"
"
about
:
welcomeback
"
"
about
:
sessionrestore
"
"
about
:
welcome
"
]
;
function
isInitialPage
(
url
)
{
return
gInitialPages
.
includes
(
url
)
|
|
url
=
=
BROWSER_NEW_TAB_URL
;
}
function
browserWindows
(
)
{
return
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
}
function
UpdateBackForwardCommands
(
aWebNavigation
)
{
var
backCommand
=
document
.
getElementById
(
"
Browser
:
Back
"
)
;
var
forwardCommand
=
document
.
getElementById
(
"
Browser
:
Forward
"
)
;
var
backDisabled
=
backCommand
.
hasAttribute
(
"
disabled
"
)
;
var
forwardDisabled
=
forwardCommand
.
hasAttribute
(
"
disabled
"
)
;
if
(
backDisabled
=
=
aWebNavigation
.
canGoBack
)
{
if
(
backDisabled
)
backCommand
.
removeAttribute
(
"
disabled
"
)
;
else
backCommand
.
setAttribute
(
"
disabled
"
true
)
;
}
if
(
forwardDisabled
=
=
aWebNavigation
.
canGoForward
)
{
if
(
forwardDisabled
)
forwardCommand
.
removeAttribute
(
"
disabled
"
)
;
else
forwardCommand
.
setAttribute
(
"
disabled
"
true
)
;
}
}
function
SetClickAndHoldHandlers
(
)
{
let
popup
=
document
.
getElementById
(
"
backForwardMenu
"
)
.
cloneNode
(
true
)
;
popup
.
removeAttribute
(
"
id
"
)
;
popup
.
setAttribute
(
"
context
"
"
"
)
;
let
backButton
=
document
.
getElementById
(
"
back
-
button
"
)
;
backButton
.
setAttribute
(
"
type
"
"
menu
"
)
;
backButton
.
appendChild
(
popup
)
;
gClickAndHoldListenersOnElement
.
add
(
backButton
)
;
let
forwardButton
=
document
.
getElementById
(
"
forward
-
button
"
)
;
popup
=
popup
.
cloneNode
(
true
)
;
forwardButton
.
setAttribute
(
"
type
"
"
menu
"
)
;
forwardButton
.
appendChild
(
popup
)
;
gClickAndHoldListenersOnElement
.
add
(
forwardButton
)
;
}
const
gClickAndHoldListenersOnElement
=
{
_timers
:
new
Map
(
)
_mousedownHandler
(
aEvent
)
{
if
(
aEvent
.
button
!
=
0
|
|
aEvent
.
currentTarget
.
open
|
|
aEvent
.
currentTarget
.
disabled
)
return
;
aEvent
.
currentTarget
.
firstElementChild
.
hidden
=
true
;
aEvent
.
currentTarget
.
addEventListener
(
"
mouseout
"
this
)
;
aEvent
.
currentTarget
.
addEventListener
(
"
mouseup
"
this
)
;
this
.
_timers
.
set
(
aEvent
.
currentTarget
setTimeout
(
(
b
)
=
>
this
.
_openMenu
(
b
)
500
aEvent
.
currentTarget
)
)
;
}
_clickHandler
(
aEvent
)
{
if
(
aEvent
.
button
=
=
0
&
&
aEvent
.
target
=
=
aEvent
.
currentTarget
&
&
!
aEvent
.
currentTarget
.
open
&
&
!
aEvent
.
currentTarget
.
disabled
)
{
let
cmdEvent
=
document
.
createEvent
(
"
xulcommandevent
"
)
;
cmdEvent
.
initCommandEvent
(
"
command
"
true
true
window
0
aEvent
.
ctrlKey
aEvent
.
altKey
aEvent
.
shiftKey
aEvent
.
metaKey
null
aEvent
.
mozInputSource
)
;
aEvent
.
currentTarget
.
dispatchEvent
(
cmdEvent
)
;
aEvent
.
preventDefault
(
)
;
}
}
_openMenu
(
aButton
)
{
this
.
_cancelHold
(
aButton
)
;
aButton
.
firstElementChild
.
hidden
=
false
;
aButton
.
open
=
true
;
}
_mouseoutHandler
(
aEvent
)
{
let
buttonRect
=
aEvent
.
currentTarget
.
getBoundingClientRect
(
)
;
if
(
aEvent
.
clientX
>
=
buttonRect
.
left
&
&
aEvent
.
clientX
<
=
buttonRect
.
right
&
&
aEvent
.
clientY
>
=
buttonRect
.
bottom
)
this
.
_openMenu
(
aEvent
.
currentTarget
)
;
else
this
.
_cancelHold
(
aEvent
.
currentTarget
)
;
}
_mouseupHandler
(
aEvent
)
{
this
.
_cancelHold
(
aEvent
.
currentTarget
)
;
}
_cancelHold
(
aButton
)
{
clearTimeout
(
this
.
_timers
.
get
(
aButton
)
)
;
aButton
.
removeEventListener
(
"
mouseout
"
this
)
;
aButton
.
removeEventListener
(
"
mouseup
"
this
)
;
}
handleEvent
(
e
)
{
switch
(
e
.
type
)
{
case
"
mouseout
"
:
this
.
_mouseoutHandler
(
e
)
;
break
;
case
"
mousedown
"
:
this
.
_mousedownHandler
(
e
)
;
break
;
case
"
click
"
:
this
.
_clickHandler
(
e
)
;
break
;
case
"
mouseup
"
:
this
.
_mouseupHandler
(
e
)
;
break
;
}
}
remove
(
aButton
)
{
aButton
.
removeEventListener
(
"
mousedown
"
this
true
)
;
aButton
.
removeEventListener
(
"
click
"
this
true
)
;
}
add
(
aElm
)
{
this
.
_timers
.
delete
(
aElm
)
;
aElm
.
addEventListener
(
"
mousedown
"
this
true
)
;
aElm
.
addEventListener
(
"
click
"
this
true
)
;
}
}
;
const
gSessionHistoryObserver
=
{
observe
(
subject
topic
data
)
{
if
(
topic
!
=
"
browser
:
purge
-
session
-
history
"
)
return
;
var
backCommand
=
document
.
getElementById
(
"
Browser
:
Back
"
)
;
backCommand
.
setAttribute
(
"
disabled
"
"
true
"
)
;
var
fwdCommand
=
document
.
getElementById
(
"
Browser
:
Forward
"
)
;
fwdCommand
.
setAttribute
(
"
disabled
"
"
true
"
)
;
gURLBar
.
editor
.
transactionManager
.
clear
(
)
;
}
}
;
const
gStoragePressureObserver
=
{
_lastNotificationTime
:
-
1
observe
(
subject
topic
data
)
{
if
(
topic
!
=
"
QuotaManager
:
:
StoragePressure
"
)
{
return
;
}
const
NOTIFICATION_VALUE
=
"
storage
-
pressure
-
notification
"
;
let
notificationBox
=
document
.
getElementById
(
"
high
-
priority
-
global
-
notificationbox
"
)
;
if
(
notificationBox
.
getNotificationWithValue
(
NOTIFICATION_VALUE
)
)
{
return
;
}
const
MIN_NOTIFICATION_INTERVAL_MS
=
Services
.
prefs
.
getIntPref
(
"
browser
.
storageManager
.
pressureNotification
.
minIntervalMS
"
)
;
let
duration
=
Date
.
now
(
)
-
this
.
_lastNotificationTime
;
if
(
duration
<
=
MIN_NOTIFICATION_INTERVAL_MS
)
{
return
;
}
this
.
_lastNotificationTime
=
Date
.
now
(
)
;
const
BYTES_IN_GIGABYTE
=
1073741824
;
const
USAGE_THRESHOLD_BYTES
=
BYTES_IN_GIGABYTE
*
Services
.
prefs
.
getIntPref
(
"
browser
.
storageManager
.
pressureNotification
.
usageThresholdGB
"
)
;
let
msg
=
"
"
;
let
buttons
=
[
]
;
let
usage
=
subject
.
QueryInterface
(
Ci
.
nsISupportsPRUint64
)
.
data
;
let
prefStrBundle
=
document
.
getElementById
(
"
bundle_preferences
"
)
;
let
brandShortName
=
document
.
getElementById
(
"
bundle_brand
"
)
.
getString
(
"
brandShortName
"
)
;
buttons
.
push
(
{
label
:
prefStrBundle
.
getString
(
"
spaceAlert
.
learnMoreButton
.
label
"
)
accessKey
:
prefStrBundle
.
getString
(
"
spaceAlert
.
learnMoreButton
.
accesskey
"
)
callback
(
notificationBar
button
)
{
let
learnMoreURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
storage
-
permissions
"
;
gBrowser
.
selectedTab
=
gBrowser
.
addTrustedTab
(
learnMoreURL
)
;
}
}
)
;
if
(
usage
<
USAGE_THRESHOLD_BYTES
)
{
msg
=
prefStrBundle
.
getFormattedString
(
"
spaceAlert
.
under5GB
.
message
"
[
brandShortName
]
)
;
buttons
.
push
(
{
label
:
prefStrBundle
.
getString
(
"
spaceAlert
.
under5GB
.
okButton
.
label
"
)
accessKey
:
prefStrBundle
.
getString
(
"
spaceAlert
.
under5GB
.
okButton
.
accesskey
"
)
callback
(
)
{
}
}
)
;
}
else
{
let
descriptionStringID
=
"
spaceAlert
.
over5GB
.
message1
"
;
let
prefButtonLabelStringID
=
"
spaceAlert
.
over5GB
.
prefButton
.
label
"
;
let
prefButtonAccesskeyStringID
=
"
spaceAlert
.
over5GB
.
prefButton
.
accesskey
"
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
descriptionStringID
=
"
spaceAlert
.
over5GB
.
messageWin1
"
;
prefButtonLabelStringID
=
"
spaceAlert
.
over5GB
.
prefButtonWin
.
label
"
;
prefButtonAccesskeyStringID
=
"
spaceAlert
.
over5GB
.
prefButtonWin
.
accesskey
"
;
}
msg
=
prefStrBundle
.
getFormattedString
(
descriptionStringID
[
brandShortName
]
)
;
buttons
.
push
(
{
label
:
prefStrBundle
.
getString
(
prefButtonLabelStringID
)
accessKey
:
prefStrBundle
.
getString
(
prefButtonAccesskeyStringID
)
callback
(
notificationBar
button
)
{
let
win
=
gBrowser
.
ownerGlobal
;
win
.
openPreferences
(
"
privacy
-
sitedata
"
{
origin
:
"
storagePressure
"
}
)
;
}
}
)
;
}
notificationBox
.
appendNotification
(
msg
NOTIFICATION_VALUE
null
notificationBox
.
PRIORITY_WARNING_HIGH
buttons
null
)
;
}
}
;
var
gPopupBlockerObserver
=
{
handleEvent
(
aEvent
)
{
if
(
aEvent
.
originalTarget
!
=
gBrowser
.
selectedBrowser
)
return
;
gIdentityHandler
.
refreshIdentityBlock
(
)
;
if
(
!
gBrowser
.
selectedBrowser
.
blockedPopups
|
|
!
gBrowser
.
selectedBrowser
.
blockedPopups
.
length
)
{
let
notificationBox
=
gBrowser
.
getNotificationBox
(
)
;
let
notification
=
notificationBox
.
getNotificationWithValue
(
"
popup
-
blocked
"
)
;
if
(
notification
)
{
notificationBox
.
removeNotification
(
notification
false
)
;
}
return
;
}
if
(
!
gBrowser
.
selectedBrowser
.
blockedPopups
.
reported
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
privacy
.
popups
.
showBrowserMessage
"
)
)
{
var
brandBundle
=
document
.
getElementById
(
"
bundle_brand
"
)
;
var
brandShortName
=
brandBundle
.
getString
(
"
brandShortName
"
)
;
var
popupCount
=
gBrowser
.
selectedBrowser
.
blockedPopups
.
length
;
var
stringKey
=
AppConstants
.
platform
=
=
"
win
"
?
"
popupWarningButton
"
:
"
popupWarningButtonUnix
"
;
var
popupButtonText
=
gNavigatorBundle
.
getString
(
stringKey
)
;
var
popupButtonAccesskey
=
gNavigatorBundle
.
getString
(
stringKey
+
"
.
accesskey
"
)
;
var
messageBase
=
gNavigatorBundle
.
getString
(
"
popupWarning
.
message
"
)
;
var
message
=
PluralForm
.
get
(
popupCount
messageBase
)
.
replace
(
"
#
1
"
brandShortName
)
.
replace
(
"
#
2
"
popupCount
)
;
let
notificationBox
=
gBrowser
.
getNotificationBox
(
)
;
let
notification
=
notificationBox
.
getNotificationWithValue
(
"
popup
-
blocked
"
)
;
if
(
notification
)
{
notification
.
label
=
message
;
}
else
{
var
buttons
=
[
{
label
:
popupButtonText
accessKey
:
popupButtonAccesskey
popup
:
"
blockedPopupOptions
"
callback
:
null
}
]
;
const
priority
=
notificationBox
.
PRIORITY_WARNING_MEDIUM
;
notificationBox
.
appendNotification
(
message
"
popup
-
blocked
"
"
chrome
:
/
/
browser
/
skin
/
notification
-
icons
/
popup
.
svg
"
priority
buttons
)
;
}
}
gBrowser
.
selectedBrowser
.
blockedPopups
.
reported
=
true
;
}
}
toggleAllowPopupsForSite
(
aEvent
)
{
var
pm
=
Services
.
perms
;
var
shouldBlock
=
aEvent
.
target
.
getAttribute
(
"
block
"
)
=
=
"
true
"
;
var
perm
=
shouldBlock
?
pm
.
DENY_ACTION
:
pm
.
ALLOW_ACTION
;
pm
.
addFromPrincipal
(
gBrowser
.
contentPrincipal
"
popup
"
perm
)
;
if
(
!
shouldBlock
)
this
.
showAllBlockedPopups
(
gBrowser
.
selectedBrowser
)
;
gBrowser
.
getNotificationBox
(
)
.
removeCurrentNotification
(
)
;
}
fillPopupList
(
aEvent
)
{
let
browser
=
gBrowser
.
selectedBrowser
;
var
uri
=
browser
.
contentPrincipal
.
URI
|
|
browser
.
currentURI
;
var
blockedPopupAllowSite
=
document
.
getElementById
(
"
blockedPopupAllowSite
"
)
;
try
{
blockedPopupAllowSite
.
removeAttribute
(
"
hidden
"
)
;
let
uriHost
=
uri
.
asciiHost
?
uri
.
host
:
uri
.
spec
;
var
pm
=
Services
.
perms
;
if
(
pm
.
testPermission
(
uri
"
popup
"
)
=
=
pm
.
ALLOW_ACTION
)
{
let
blockString
=
gNavigatorBundle
.
getFormattedString
(
"
popupBlock
"
[
uriHost
]
)
;
blockedPopupAllowSite
.
setAttribute
(
"
label
"
blockString
)
;
blockedPopupAllowSite
.
setAttribute
(
"
block
"
"
true
"
)
;
}
else
{
let
allowString
=
gNavigatorBundle
.
getFormattedString
(
"
popupAllow
"
[
uriHost
]
)
;
blockedPopupAllowSite
.
setAttribute
(
"
label
"
allowString
)
;
blockedPopupAllowSite
.
removeAttribute
(
"
block
"
)
;
}
}
catch
(
e
)
{
blockedPopupAllowSite
.
setAttribute
(
"
hidden
"
"
true
"
)
;
}
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
blockedPopupAllowSite
.
setAttribute
(
"
disabled
"
"
true
"
)
;
else
blockedPopupAllowSite
.
removeAttribute
(
"
disabled
"
)
;
let
blockedPopupDontShowMessage
=
document
.
getElementById
(
"
blockedPopupDontShowMessage
"
)
;
let
showMessage
=
Services
.
prefs
.
getBoolPref
(
"
privacy
.
popups
.
showBrowserMessage
"
)
;
blockedPopupDontShowMessage
.
setAttribute
(
"
checked
"
!
showMessage
)
;
blockedPopupDontShowMessage
.
setAttribute
(
"
label
"
gNavigatorBundle
.
getString
(
"
popupWarningDontShowFromMessage
"
)
)
;
let
blockedPopupsSeparator
=
document
.
getElementById
(
"
blockedPopupsSeparator
"
)
;
blockedPopupsSeparator
.
setAttribute
(
"
hidden
"
true
)
;
gBrowser
.
selectedBrowser
.
retrieveListOfBlockedPopups
(
)
.
then
(
blockedPopups
=
>
{
let
foundUsablePopupURI
=
false
;
if
(
blockedPopups
)
{
for
(
let
i
=
0
;
i
<
blockedPopups
.
length
;
i
+
+
)
{
let
blockedPopup
=
blockedPopups
[
i
]
;
if
(
!
blockedPopup
.
popupWindowURIspec
)
continue
;
var
popupURIspec
=
blockedPopup
.
popupWindowURIspec
;
if
(
popupURIspec
=
=
"
"
|
|
popupURIspec
=
=
"
about
:
blank
"
|
|
popupURIspec
=
=
"
<
self
>
"
|
|
popupURIspec
=
=
uri
.
spec
)
continue
;
foundUsablePopupURI
=
true
;
var
menuitem
=
document
.
createXULElement
(
"
menuitem
"
)
;
var
label
=
gNavigatorBundle
.
getFormattedString
(
"
popupShowPopupPrefix
"
[
popupURIspec
]
)
;
menuitem
.
setAttribute
(
"
label
"
label
)
;
menuitem
.
setAttribute
(
"
oncommand
"
"
gPopupBlockerObserver
.
showBlockedPopup
(
event
)
;
"
)
;
menuitem
.
setAttribute
(
"
popupReportIndex
"
i
)
;
menuitem
.
popupReportBrowser
=
browser
;
aEvent
.
target
.
appendChild
(
menuitem
)
;
}
}
if
(
foundUsablePopupURI
)
blockedPopupsSeparator
.
removeAttribute
(
"
hidden
"
)
;
}
null
)
;
}
onPopupHiding
(
aEvent
)
{
let
item
=
aEvent
.
target
.
lastElementChild
;
while
(
item
&
&
item
.
id
!
=
"
blockedPopupsSeparator
"
)
{
let
next
=
item
.
previousElementSibling
;
item
.
remove
(
)
;
item
=
next
;
}
}
showBlockedPopup
(
aEvent
)
{
var
target
=
aEvent
.
target
;
var
popupReportIndex
=
target
.
getAttribute
(
"
popupReportIndex
"
)
;
let
browser
=
target
.
popupReportBrowser
;
browser
.
unblockPopup
(
popupReportIndex
)
;
}
showAllBlockedPopups
(
aBrowser
)
{
aBrowser
.
retrieveListOfBlockedPopups
(
)
.
then
(
popups
=
>
{
for
(
let
i
=
0
;
i
<
popups
.
length
;
i
+
+
)
{
if
(
popups
[
i
]
.
popupWindowURIspec
)
aBrowser
.
unblockPopup
(
i
)
;
}
}
null
)
;
}
editPopupSettings
(
)
{
let
prefillValue
=
"
"
;
try
{
let
principalURI
=
gBrowser
.
contentPrincipal
.
URI
|
|
gBrowser
.
currentURI
;
if
(
principalURI
)
{
if
(
principalURI
.
asciiHost
)
{
prefillValue
=
principalURI
.
prePath
;
}
else
{
prefillValue
=
principalURI
.
spec
;
}
}
}
catch
(
e
)
{
}
var
params
=
{
blockVisible
:
false
sessionVisible
:
false
allowVisible
:
true
prefilledHost
:
prefillValue
permissionType
:
"
popup
"
}
;
var
existingWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
Browser
:
Permissions
"
)
;
if
(
existingWindow
)
{
existingWindow
.
initWithParams
(
params
)
;
existingWindow
.
focus
(
)
;
}
else
window
.
openDialog
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
permissions
.
xul
"
"
_blank
"
"
resizable
dialog
=
no
centerscreen
"
params
)
;
}
dontShowMessage
(
)
{
var
showMessage
=
Services
.
prefs
.
getBoolPref
(
"
privacy
.
popups
.
showBrowserMessage
"
)
;
Services
.
prefs
.
setBoolPref
(
"
privacy
.
popups
.
showBrowserMessage
"
!
showMessage
)
;
gBrowser
.
getNotificationBox
(
)
.
removeCurrentNotification
(
)
;
}
}
;
function
gKeywordURIFixup
(
{
target
:
browser
data
:
fixupInfo
}
)
{
let
deserializeURI
=
(
spec
)
=
>
spec
?
makeURI
(
spec
)
:
null
;
let
alternativeURI
=
deserializeURI
(
fixupInfo
.
fixedURI
)
;
if
(
!
fixupInfo
.
keywordProviderName
|
|
!
alternativeURI
|
|
!
alternativeURI
.
host
)
{
return
;
}
let
contentPrincipal
=
browser
.
contentPrincipal
;
let
previousURI
=
browser
.
currentURI
;
let
preferredURI
=
deserializeURI
(
fixupInfo
.
preferredURI
)
;
let
weakBrowser
=
Cu
.
getWeakReference
(
browser
)
;
browser
=
null
;
let
hostName
=
alternativeURI
.
displayHost
;
let
asciiHost
=
alternativeURI
.
asciiHost
;
if
(
asciiHost
.
indexOf
(
"
.
"
)
=
=
asciiHost
.
length
-
1
)
{
asciiHost
=
asciiHost
.
slice
(
0
-
1
)
;
}
let
isIPv4Address
=
host
=
>
{
let
parts
=
host
.
split
(
"
.
"
)
;
if
(
parts
.
length
!
=
4
)
{
return
false
;
}
return
parts
.
every
(
part
=
>
{
let
n
=
parseInt
(
part
10
)
;
return
n
>
=
0
&
&
n
<
=
255
;
}
)
;
}
;
if
(
isIPv4Address
(
asciiHost
)
|
|
/
^
(
?
:
\
d
+
|
0x
[
a
-
f0
-
9
]
+
)
/
i
.
test
(
asciiHost
)
)
return
;
let
onLookupComplete
=
(
request
record
status
)
=
>
{
let
browserRef
=
weakBrowser
.
get
(
)
;
if
(
!
Components
.
isSuccessCode
(
status
)
|
|
!
browserRef
)
return
;
let
currentURI
=
browserRef
.
currentURI
;
if
(
!
currentURI
.
equals
(
previousURI
)
&
&
!
currentURI
.
equals
(
preferredURI
)
)
{
return
;
}
let
notificationBox
=
gBrowser
.
getNotificationBox
(
browserRef
)
;
if
(
notificationBox
.
getNotificationWithValue
(
"
keyword
-
uri
-
fixup
"
)
)
return
;
let
message
=
gNavigatorBundle
.
getFormattedString
(
"
keywordURIFixup
.
message
"
[
hostName
]
)
;
let
yesMessage
=
gNavigatorBundle
.
getFormattedString
(
"
keywordURIFixup
.
goTo
"
[
hostName
]
)
;
let
buttons
=
[
{
label
:
yesMessage
accessKey
:
gNavigatorBundle
.
getString
(
"
keywordURIFixup
.
goTo
.
accesskey
"
)
callback
(
)
{
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
let
pref
=
"
browser
.
fixup
.
domainwhitelist
.
"
+
asciiHost
;
Services
.
prefs
.
setBoolPref
(
pref
true
)
;
}
openTrustedLinkIn
(
alternativeURI
.
spec
"
current
"
)
;
}
}
{
label
:
gNavigatorBundle
.
getString
(
"
keywordURIFixup
.
dismiss
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
keywordURIFixup
.
dismiss
.
accesskey
"
)
callback
(
)
{
let
notification
=
notificationBox
.
getNotificationWithValue
(
"
keyword
-
uri
-
fixup
"
)
;
notificationBox
.
removeNotification
(
notification
true
)
;
}
}
]
;
let
notification
=
notificationBox
.
appendNotification
(
message
"
keyword
-
uri
-
fixup
"
null
notificationBox
.
PRIORITY_INFO_HIGH
buttons
)
;
notification
.
persistence
=
1
;
}
;
try
{
gDNSService
.
asyncResolve
(
hostName
0
onLookupComplete
Services
.
tm
.
mainThread
contentPrincipal
.
originAttributes
)
;
}
catch
(
ex
)
{
if
(
ex
.
result
!
=
Cr
.
NS_ERROR_UNKNOWN_HOST
)
{
Cu
.
reportError
(
ex
)
;
}
}
}
function
serializeInputStream
(
aStream
)
{
let
data
=
{
content
:
NetUtil
.
readInputStreamToString
(
aStream
aStream
.
available
(
)
)
}
;
if
(
aStream
instanceof
Ci
.
nsIMIMEInputStream
)
{
data
.
headers
=
new
Map
(
)
;
aStream
.
visitHeaders
(
(
name
value
)
=
>
{
data
.
headers
.
set
(
name
value
)
;
}
)
;
}
return
data
;
}
function
handleUriInChrome
(
aBrowser
aUri
)
{
if
(
aUri
.
scheme
=
=
"
file
"
)
{
try
{
let
mimeType
=
Cc
[
"
mozilla
.
org
/
mime
;
1
"
]
.
getService
(
Ci
.
nsIMIMEService
)
.
getTypeFromURI
(
aUri
)
;
if
(
mimeType
=
=
"
application
/
x
-
xpinstall
"
)
{
let
systemPrincipal
=
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
;
AddonManager
.
getInstallForURL
(
aUri
.
spec
mimeType
)
.
then
(
install
=
>
{
AddonManager
.
installAddonFromWebpage
(
mimeType
aBrowser
systemPrincipal
install
)
;
}
)
;
return
true
;
}
}
catch
(
e
)
{
return
false
;
}
}
return
false
;
}
function
_loadURI
(
browser
uri
params
=
{
}
)
{
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
if
(
tab
)
{
maybeRecordAbandonmentTelemetry
(
tab
"
newURI
"
)
;
}
if
(
!
uri
)
{
uri
=
"
about
:
blank
"
;
}
let
{
flags
=
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_NONE
referrerURI
referrerPolicy
=
Ci
.
nsIHttpChannel
.
REFERRER_POLICY_UNSET
triggeringPrincipal
postData
userContextId
}
=
params
|
|
{
}
;
let
{
uriObject
requiredRemoteType
mustChangeProcess
newFrameloader
}
=
E10SUtils
.
shouldLoadURIInBrowser
(
browser
uri
gMultiProcessBrowser
flags
)
;
if
(
uriObject
&
&
handleUriInChrome
(
browser
uriObject
)
)
{
return
;
}
if
(
newFrameloader
)
{
browser
.
removeAttribute
(
"
preloadedState
"
)
;
}
if
(
!
requiredRemoteType
)
{
browser
.
inLoadURI
=
true
;
}
try
{
if
(
!
mustChangeProcess
)
{
if
(
userContextId
)
{
browser
.
webNavigation
.
setOriginAttributesBeforeLoading
(
{
userContextId
}
)
;
}
browser
.
webNavigation
.
loadURIWithOptions
(
uri
flags
referrerURI
referrerPolicy
postData
null
null
triggeringPrincipal
)
;
}
else
{
let
{
permitUnload
timedOut
}
=
browser
.
permitUnload
(
)
;
if
(
!
timedOut
&
&
!
permitUnload
)
{
return
;
}
if
(
postData
)
{
postData
=
serializeInputStream
(
postData
)
;
}
let
loadParams
=
{
uri
triggeringPrincipal
:
triggeringPrincipal
?
gSerializationHelper
.
serializeToString
(
triggeringPrincipal
)
:
null
flags
referrer
:
referrerURI
?
referrerURI
.
spec
:
null
referrerPolicy
remoteType
:
requiredRemoteType
postData
newFrameloader
}
;
if
(
userContextId
)
{
loadParams
.
userContextId
=
userContextId
;
}
LoadInOtherProcess
(
browser
loadParams
)
;
}
}
catch
(
e
)
{
if
(
mustChangeProcess
)
{
Cu
.
reportError
(
e
)
;
gBrowser
.
updateBrowserRemotenessByURL
(
browser
uri
)
;
if
(
userContextId
)
{
browser
.
webNavigation
.
setOriginAttributesBeforeLoading
(
{
userContextId
}
)
;
}
browser
.
webNavigation
.
loadURIWithOptions
(
uri
flags
referrerURI
referrerPolicy
postData
null
null
triggeringPrincipal
)
;
}
else
{
throw
e
;
}
}
finally
{
if
(
!
requiredRemoteType
)
{
browser
.
inLoadURI
=
false
;
}
}
}
function
LoadInOtherProcess
(
browser
loadOptions
historyIndex
=
-
1
)
{
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
SessionStore
.
navigateAndRestore
(
tab
loadOptions
historyIndex
)
;
}
function
RedirectLoad
(
{
target
:
browser
data
}
)
{
if
(
browser
.
getAttribute
(
"
preloadedState
"
)
=
=
=
"
consumed
"
)
{
browser
.
removeAttribute
(
"
preloadedState
"
)
;
data
.
loadOptions
.
newFrameloader
=
true
;
}
if
(
data
.
loadOptions
.
reloadInFreshProcess
)
{
data
.
loadOptions
.
remoteType
=
E10SUtils
.
LARGE_ALLOCATION_REMOTE_TYPE
;
data
.
loadOptions
.
newFrameloader
=
true
;
}
else
if
(
browser
.
remoteType
=
=
E10SUtils
.
LARGE_ALLOCATION_REMOTE_TYPE
)
{
data
.
loadOptions
.
remoteType
=
E10SUtils
.
getRemoteTypeForURI
(
data
.
loadOptions
.
uri
gMultiProcessBrowser
)
;
}
if
(
gBrowserInit
.
delayedStartupFinished
)
{
LoadInOtherProcess
(
browser
data
.
loadOptions
data
.
historyIndex
)
;
}
else
{
let
delayedStartupFinished
=
(
subject
topic
)
=
>
{
if
(
topic
=
=
"
browser
-
delayed
-
startup
-
finished
"
&
&
subject
=
=
window
)
{
Services
.
obs
.
removeObserver
(
delayedStartupFinished
topic
)
;
LoadInOtherProcess
(
browser
data
.
loadOptions
data
.
historyIndex
)
;
}
}
;
Services
.
obs
.
addObserver
(
delayedStartupFinished
"
browser
-
delayed
-
startup
-
finished
"
)
;
}
}
let
_resolveDelayedStartup
;
var
delayedStartupPromise
=
new
Promise
(
resolve
=
>
{
_resolveDelayedStartup
=
resolve
;
}
)
;
var
gBrowserInit
=
{
delayedStartupFinished
:
false
idleTasksFinished
:
false
_tabToAdopt
:
undefined
getTabToAdopt
(
)
{
if
(
this
.
_tabToAdopt
!
=
=
undefined
)
{
return
this
.
_tabToAdopt
;
}
if
(
window
.
arguments
&
&
window
.
arguments
[
0
]
instanceof
window
.
XULElement
)
{
this
.
_tabToAdopt
=
window
.
arguments
[
0
]
;
window
.
arguments
[
0
]
=
null
;
}
else
{
this
.
_tabToAdopt
=
null
;
}
return
this
.
_tabToAdopt
;
}
_clearTabToAdopt
(
)
{
this
.
_tabToAdopt
=
null
;
}
isAdoptingTab
(
)
{
return
!
!
this
.
getTabToAdopt
(
)
;
}
onBeforeInitialXULLayout
(
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
privacy
.
resistFingerprinting
"
)
)
{
document
.
documentElement
.
setAttribute
(
"
sizemode
"
"
normal
"
)
;
}
else
if
(
!
document
.
documentElement
.
hasAttribute
(
"
width
"
)
)
{
const
TARGET_WIDTH
=
1280
;
const
TARGET_HEIGHT
=
1040
;
let
width
=
Math
.
min
(
screen
.
availWidth
*
.
9
TARGET_WIDTH
)
;
let
height
=
Math
.
min
(
screen
.
availHeight
*
.
9
TARGET_HEIGHT
)
;
document
.
documentElement
.
setAttribute
(
"
width
"
width
)
;
document
.
documentElement
.
setAttribute
(
"
height
"
height
)
;
if
(
width
<
TARGET_WIDTH
&
&
height
<
TARGET_HEIGHT
)
{
document
.
documentElement
.
setAttribute
(
"
sizemode
"
"
maximized
"
)
;
}
}
window
.
TabBarVisibility
.
update
(
)
;
TabsInTitlebar
.
init
(
)
;
new
LightweightThemeConsumer
(
document
)
;
CompactTheme
.
init
(
)
;
if
(
window
.
matchMedia
(
"
(
-
moz
-
os
-
version
:
windows
-
win8
)
"
)
.
matches
&
&
window
.
matchMedia
(
"
(
-
moz
-
windows
-
default
-
theme
)
"
)
.
matches
)
{
let
windowFrameColor
=
new
Color
(
.
.
.
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
Windows8WindowFrameColor
.
jsm
"
{
}
)
.
Windows8WindowFrameColor
.
get
(
)
)
;
if
(
!
windowFrameColor
.
isContrastRatioAcceptable
(
new
Color
(
0
0
0
)
)
)
{
document
.
documentElement
.
setAttribute
(
"
darkwindowframe
"
"
true
"
)
;
}
}
ToolbarIconColor
.
init
(
)
;
}
onDOMContentLoaded
(
)
{
gBrowser
=
window
.
_gBrowser
;
delete
window
.
_gBrowser
;
gBrowser
.
init
(
)
;
window
.
docShell
.
treeOwner
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIXULWindow
)
.
XULBrowserWindow
=
window
.
XULBrowserWindow
;
window
.
browserDOMWindow
=
new
nsBrowserAccess
(
)
;
BrowserWindowTracker
.
track
(
window
)
;
let
initBrowser
=
gBrowser
.
initialBrowser
;
let
isRemote
=
gMultiProcessBrowser
;
let
remoteType
;
let
sameProcessAsFrameLoader
;
let
tabArgument
=
this
.
getTabToAdopt
(
)
;
if
(
tabArgument
)
{
if
(
tabArgument
.
hasAttribute
(
"
usercontextid
"
)
)
{
initBrowser
.
setAttribute
(
"
usercontextid
"
tabArgument
.
getAttribute
(
"
usercontextid
"
)
)
;
}
let
linkedBrowser
=
tabArgument
.
linkedBrowser
;
if
(
linkedBrowser
)
{
remoteType
=
linkedBrowser
.
remoteType
;
isRemote
=
remoteType
!
=
E10SUtils
.
NOT_REMOTE
;
sameProcessAsFrameLoader
=
linkedBrowser
.
frameLoader
;
}
initBrowser
.
removeAttribute
(
"
blank
"
)
;
}
gBrowser
.
updateBrowserRemoteness
(
initBrowser
isRemote
{
remoteType
sameProcessAsFrameLoader
}
)
;
BrowserSearch
.
initPlaceHolder
(
)
;
this
.
_callWithURIToLoad
(
uriToLoad
=
>
{
if
(
uriToLoad
=
=
"
about
:
home
"
|
|
uriToLoad
=
=
"
about
:
newtab
"
|
|
uriToLoad
=
=
"
about
:
welcome
"
)
{
gBrowser
.
setIcon
(
gBrowser
.
selectedTab
"
chrome
:
/
/
branding
/
content
/
icon32
.
png
"
)
;
}
else
if
(
uriToLoad
=
=
"
about
:
privatebrowsing
"
)
{
gBrowser
.
setIcon
(
gBrowser
.
selectedTab
"
chrome
:
/
/
browser
/
skin
/
privatebrowsing
/
favicon
.
svg
"
)
;
}
}
)
;
this
.
_setInitialFocus
(
)
;
gUIDensity
.
init
(
)
;
TabsInTitlebar
.
whenWindowLayoutReady
(
)
;
}
onLoad
(
)
{
gBrowser
.
addEventListener
(
"
DOMUpdateBlockedPopups
"
gPopupBlockerObserver
)
;
Services
.
obs
.
addObserver
(
gPluginHandler
.
NPAPIPluginCrashed
"
plugin
-
crashed
"
)
;
window
.
addEventListener
(
"
AppCommand
"
HandleAppCommandEvent
true
)
;
DOMEventHandler
.
init
(
)
;
gPageStyleMenu
.
init
(
)
;
LanguageDetectionListener
.
init
(
)
;
BrowserOnClick
.
init
(
)
;
FeedHandler
.
init
(
)
;
ContentBlocking
.
init
(
)
;
CaptivePortalWatcher
.
init
(
)
;
ZoomUI
.
init
(
window
)
;
let
mm
=
window
.
getGroupMessageManager
(
"
browsers
"
)
;
mm
.
loadFrameScript
(
"
chrome
:
/
/
browser
/
content
/
tab
-
content
.
js
"
true
true
)
;
mm
.
loadFrameScript
(
"
chrome
:
/
/
browser
/
content
/
content
.
js
"
true
true
)
;
mm
.
loadFrameScript
(
"
chrome
:
/
/
global
/
content
/
content
-
HybridContentTelemetry
.
js
"
true
)
;
window
.
messageManager
.
addMessageListener
(
"
Browser
:
LoadURI
"
RedirectLoad
)
;
if
(
!
gMultiProcessBrowser
)
{
Services
.
els
.
addSystemEventListener
(
gBrowser
.
tabpanels
"
click
"
contentAreaClick
true
)
;
}
gBrowser
.
addProgressListener
(
window
.
XULBrowserWindow
)
;
gBrowser
.
addTabsProgressListener
(
window
.
TabsProgressListener
)
;
SidebarUI
.
init
(
)
;
DownloadsButton
.
init
(
)
;
Services
.
obs
.
notifyObservers
(
window
"
browser
-
window
-
before
-
show
"
)
;
if
(
!
window
.
toolbar
.
visible
)
{
gURLBar
.
setAttribute
(
"
readonly
"
"
true
"
)
;
}
TabletModeUpdater
.
init
(
)
;
CombinedStopReload
.
ensureInitialized
(
)
;
gPrivateBrowsingUI
.
init
(
)
;
BrowserSearch
.
init
(
)
;
BrowserPageActions
.
init
(
)
;
gAccessibilityServiceIndicator
.
init
(
)
;
AccessibilityRefreshBlocker
.
init
(
)
;
gRemoteControl
.
updateVisualCue
(
Marionette
.
running
)
;
let
tabToAdopt
=
this
.
getTabToAdopt
(
)
;
if
(
tabToAdopt
)
{
gBrowser
.
stop
(
)
;
gBrowser
.
docShell
;
gURLBar
.
removeAttribute
(
"
focused
"
)
;
try
{
gBrowser
.
swapBrowsersAndCloseOther
(
gBrowser
.
selectedTab
tabToAdopt
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
this
.
_clearTabToAdopt
(
)
;
}
this
.
_boundDelayedStartup
=
this
.
_delayedStartup
.
bind
(
this
)
;
window
.
addEventListener
(
"
MozAfterPaint
"
this
.
_boundDelayedStartup
)
;
if
(
!
PrivateBrowsingUtils
.
enabled
)
{
document
.
getElementById
(
"
Tools
:
PrivateBrowsing
"
)
.
hidden
=
true
;
document
.
getElementById
(
"
key_privatebrowsing
"
)
.
remove
(
)
;
}
this
.
_loadHandled
=
true
;
}
_cancelDelayedStartup
(
)
{
window
.
removeEventListener
(
"
MozAfterPaint
"
this
.
_boundDelayedStartup
)
;
this
.
_boundDelayedStartup
=
null
;
}
_delayedStartup
(
)
{
let
{
TelemetryTimestamps
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
TelemetryTimestamps
.
jsm
"
{
}
)
;
TelemetryTimestamps
.
add
(
"
delayedStartupStarted
"
)
;
this
.
_cancelDelayedStartup
(
)
;
OfflineApps
.
init
(
)
;
gBrowser
.
addEventListener
(
"
AboutTabCrashedLoad
"
function
(
event
)
{
let
ownerDoc
=
event
.
originalTarget
;
if
(
!
ownerDoc
.
documentURI
.
startsWith
(
"
about
:
tabcrashed
"
)
)
{
return
;
}
let
browser
=
gBrowser
.
getBrowserForDocument
(
event
.
target
)
;
ZoomManager
.
setZoomForBrowser
(
browser
1
)
;
}
false
true
)
;
gBrowser
.
addEventListener
(
"
InsecureLoginFormsStateChange
"
function
(
)
{
gIdentityHandler
.
refreshForInsecureLoginForms
(
)
;
}
true
)
;
gBrowser
.
addEventListener
(
"
PermissionStateChange
"
function
(
)
{
gIdentityHandler
.
refreshIdentityBlock
(
)
;
}
true
)
;
gAboutNewTabService
.
QueryInterface
(
Ci
.
nsISupports
)
;
this
.
_handleURIToLoad
(
)
;
Services
.
obs
.
addObserver
(
gIdentityHandler
"
perm
-
changed
"
)
;
Services
.
obs
.
addObserver
(
gRemoteControl
"
remote
-
active
"
)
;
Services
.
obs
.
addObserver
(
gSessionHistoryObserver
"
browser
:
purge
-
session
-
history
"
)
;
Services
.
obs
.
addObserver
(
gStoragePressureObserver
"
QuotaManager
:
:
StoragePressure
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
disabled
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
started
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
blocked
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
origin
-
blocked
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
failed
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
confirmation
"
)
;
Services
.
obs
.
addObserver
(
gXPInstallObserver
"
addon
-
install
-
complete
"
)
;
window
.
messageManager
.
addMessageListener
(
"
Browser
:
URIFixup
"
gKeywordURIFixup
)
;
BrowserOffline
.
init
(
)
;
IndexedDBPromptHelper
.
init
(
)
;
CanvasPermissionPromptHelper
.
init
(
)
;
WebAuthnPromptHelper
.
init
(
)
;
FullZoom
.
init
(
)
;
PanelUI
.
init
(
)
;
UpdateUrlbarSearchSplitterState
(
)
;
BookmarkingUI
.
init
(
)
;
BrowserSearch
.
delayedStartupInit
(
)
;
AutoShowBookmarksToolbar
.
init
(
)
;
let
safeMode
=
document
.
getElementById
(
"
helpSafeMode
"
)
;
if
(
Services
.
appinfo
.
inSafeMode
)
{
safeMode
.
label
=
safeMode
.
getAttribute
(
"
stoplabel
"
)
;
safeMode
.
accesskey
=
safeMode
.
getAttribute
(
"
stopaccesskey
"
)
;
}
gBidiUI
=
isBidiEnabled
(
)
;
if
(
gBidiUI
)
{
document
.
getElementById
(
"
documentDirection
-
separator
"
)
.
hidden
=
false
;
document
.
getElementById
(
"
documentDirection
-
swap
"
)
.
hidden
=
false
;
document
.
getElementById
(
"
textfieldDirection
-
separator
"
)
.
hidden
=
false
;
document
.
getElementById
(
"
textfieldDirection
-
swap
"
)
.
hidden
=
false
;
}
if
(
!
getBoolPref
(
"
ui
.
click_hold_context_menus
"
false
)
)
SetClickAndHoldHandlers
(
)
;
PlacesToolbarHelper
.
init
(
)
;
ctrlTab
.
readPref
(
)
;
Services
.
prefs
.
addObserver
(
ctrlTab
.
prefName
ctrlTab
)
;
DownloadsButton
.
initializeIndicator
(
)
;
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
{
updateEditUIVisibility
(
)
;
let
placesContext
=
document
.
getElementById
(
"
placesContext
"
)
;
placesContext
.
addEventListener
(
"
popupshowing
"
updateEditUIVisibility
)
;
placesContext
.
addEventListener
(
"
popuphiding
"
updateEditUIVisibility
)
;
}
LightWeightThemeWebInstaller
.
init
(
)
;
FullScreen
.
init
(
)
;
PointerLock
.
init
(
)
;
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
)
{
MenuTouchModeObserver
.
init
(
)
;
}
if
(
AppConstants
.
MOZ_DATA_REPORTING
)
gDataNotificationInfoBar
.
init
(
)
;
if
(
!
AppConstants
.
MOZILLA_OFFICIAL
)
DevelopmentHelpers
.
init
(
)
;
gExtensionsNotifications
.
init
(
)
;
let
wasMinimized
=
window
.
windowState
=
=
window
.
STATE_MINIMIZED
;
window
.
addEventListener
(
"
sizemodechange
"
(
)
=
>
{
let
isMinimized
=
window
.
windowState
=
=
window
.
STATE_MINIMIZED
;
if
(
wasMinimized
!
=
isMinimized
)
{
wasMinimized
=
isMinimized
;
UpdatePopupNotificationsVisibility
(
)
;
}
}
)
;
window
.
addEventListener
(
"
mousemove
"
MousePosTracker
)
;
window
.
addEventListener
(
"
dragover
"
MousePosTracker
)
;
gNavToolbox
.
addEventListener
(
"
customizationstarting
"
CustomizationHandler
)
;
gNavToolbox
.
addEventListener
(
"
customizationending
"
CustomizationHandler
)
;
if
(
AppConstants
.
platform
=
=
"
linux
"
)
{
let
{
WindowDraggingElement
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
WindowDraggingUtils
.
jsm
"
{
}
)
;
new
WindowDraggingElement
(
document
.
getElementById
(
"
titlebar
"
)
)
;
}
SessionStore
.
promiseInitialized
.
then
(
(
)
=
>
{
if
(
window
.
closed
)
{
return
;
}
RestoreLastSessionObserver
.
init
(
)
;
SidebarUI
.
startDelayedLoad
(
)
;
PanicButtonNotifier
.
init
(
)
;
}
)
;
gBrowser
.
tabContainer
.
addEventListener
(
"
TabSelect
"
gURLBar
)
;
gBrowser
.
tabContainer
.
addEventListener
(
"
TabSelect
"
function
(
)
{
for
(
let
panel
of
document
.
querySelectorAll
(
"
panel
[
tabspecific
=
'
true
'
]
"
)
)
{
if
(
panel
.
state
=
=
"
open
"
)
{
panel
.
hidePopup
(
)
;
}
}
}
)
;
this
.
delayedStartupFinished
=
true
;
_resolveDelayedStartup
(
)
;
SessionStore
.
promiseAllWindowsRestored
.
then
(
(
)
=
>
{
this
.
_schedulePerWindowIdleTasks
(
)
;
document
.
documentElement
.
setAttribute
(
"
sessionrestored
"
"
true
"
)
;
}
)
;
Services
.
obs
.
notifyObservers
(
window
"
browser
-
delayed
-
startup
-
finished
"
)
;
TelemetryTimestamps
.
add
(
"
delayedStartupFinished
"
)
;
}
_setInitialFocus
(
)
{
let
initiallyFocusedElement
=
document
.
commandDispatcher
.
focusedElement
;
let
firstBrowserPaintDeferred
=
{
}
;
firstBrowserPaintDeferred
.
promise
=
new
Promise
(
resolve
=
>
{
firstBrowserPaintDeferred
.
resolve
=
resolve
;
}
)
;
let
mm
=
window
.
messageManager
;
mm
.
addMessageListener
(
"
Browser
:
FirstPaint
"
function
onFirstPaint
(
)
{
mm
.
removeMessageListener
(
"
Browser
:
FirstPaint
"
onFirstPaint
)
;
firstBrowserPaintDeferred
.
resolve
(
)
;
}
)
;
let
initialBrowser
=
gBrowser
.
selectedBrowser
;
mm
.
addMessageListener
(
"
Browser
:
FirstNonBlankPaint
"
function
onFirstNonBlankPaint
(
)
{
mm
.
removeMessageListener
(
"
Browser
:
FirstNonBlankPaint
"
onFirstNonBlankPaint
)
;
initialBrowser
.
removeAttribute
(
"
blank
"
)
;
}
)
;
let
shouldRemoveFocusedAttribute
=
true
;
this
.
_callWithURIToLoad
(
uriToLoad
=
>
{
if
(
isBlankPageURL
(
uriToLoad
)
|
|
uriToLoad
=
=
"
about
:
privatebrowsing
"
)
{
focusAndSelectUrlBar
(
)
;
shouldRemoveFocusedAttribute
=
false
;
return
;
}
if
(
gBrowser
.
selectedBrowser
.
isRemoteBrowser
)
{
firstBrowserPaintDeferred
.
promise
.
then
(
(
)
=
>
{
if
(
document
.
commandDispatcher
.
focusedElement
=
=
initiallyFocusedElement
)
{
gBrowser
.
selectedBrowser
.
focus
(
)
;
}
}
)
;
}
else
{
gBrowser
.
selectedBrowser
.
focus
(
)
;
}
}
)
;
if
(
shouldRemoveFocusedAttribute
)
{
window
.
requestAnimationFrame
(
(
)
=
>
{
if
(
shouldRemoveFocusedAttribute
)
gURLBar
.
removeAttribute
(
"
focused
"
)
;
}
)
;
}
}
_handleURIToLoad
(
)
{
this
.
_callWithURIToLoad
(
uriToLoad
=
>
{
if
(
!
uriToLoad
|
|
uriToLoad
=
=
"
about
:
blank
"
)
{
return
;
}
if
(
uriToLoad
instanceof
Ci
.
nsIArray
)
{
let
count
=
uriToLoad
.
length
;
let
specs
=
[
]
;
for
(
let
i
=
0
;
i
<
count
;
i
+
+
)
{
let
urisstring
=
uriToLoad
.
queryElementAt
(
i
Ci
.
nsISupportsString
)
;
specs
.
push
(
urisstring
.
data
)
;
}
try
{
gBrowser
.
loadTabs
(
specs
{
inBackground
:
false
replace
:
true
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
}
catch
(
e
)
{
}
}
else
if
(
window
.
arguments
.
length
>
=
3
)
{
let
referrerURI
=
window
.
arguments
[
2
]
;
if
(
typeof
(
referrerURI
)
=
=
"
string
"
)
{
try
{
referrerURI
=
makeURI
(
referrerURI
)
;
}
catch
(
e
)
{
referrerURI
=
null
;
}
}
let
referrerPolicy
=
(
window
.
arguments
[
5
]
!
=
undefined
?
window
.
arguments
[
5
]
:
Ci
.
nsIHttpChannel
.
REFERRER_POLICY_UNSET
)
;
let
userContextId
=
(
window
.
arguments
[
6
]
!
=
undefined
?
window
.
arguments
[
6
]
:
Ci
.
nsIScriptSecurityManager
.
DEFAULT_USER_CONTEXT_ID
)
;
loadURI
(
uriToLoad
referrerURI
window
.
arguments
[
3
]
|
|
null
window
.
arguments
[
4
]
|
|
false
referrerPolicy
userContextId
window
.
arguments
[
7
]
!
!
window
.
arguments
[
7
]
window
.
arguments
[
8
]
true
)
;
window
.
focus
(
)
;
}
else
{
loadOneOrMoreURIs
(
uriToLoad
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
}
}
)
;
}
_schedulePerWindowIdleTasks
(
)
{
if
(
window
.
closed
)
{
return
;
}
function
scheduleIdleTask
(
func
options
)
{
requestIdleCallback
(
function
idleTaskRunner
(
)
{
if
(
!
window
.
closed
)
{
func
(
)
;
}
}
options
)
;
}
scheduleIdleTask
(
(
)
=
>
{
gSync
.
init
(
)
;
}
)
;
scheduleIdleTask
(
(
)
=
>
{
gTabsPanel
.
init
(
)
;
}
)
;
scheduleIdleTask
(
(
)
=
>
{
CombinedStopReload
.
startAnimationPrefMonitoring
(
)
;
}
)
;
scheduleIdleTask
(
(
)
=
>
{
gGestureSupport
.
init
(
true
)
;
gHistorySwipeAnimation
.
init
(
)
;
}
)
;
scheduleIdleTask
(
(
)
=
>
{
gBrowserThumbnails
.
init
(
)
;
}
)
;
scheduleIdleTask
(
(
)
=
>
{
try
{
DownloadsCommon
.
initializeAllDataLinks
(
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
DownloadsTaskbar
.
jsm
"
{
}
)
.
DownloadsTaskbar
.
registerIndicator
(
window
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
{
timeout
:
10000
}
)
;
if
(
Win7Features
)
{
scheduleIdleTask
(
(
)
=
>
Win7Features
.
onOpenWindow
(
)
)
;
}
scheduleIdleTask
(
(
)
=
>
{
this
.
idleTasksFinished
=
true
;
Services
.
obs
.
notifyObservers
(
window
"
browser
-
idle
-
startup
-
tasks
-
finished
"
)
;
}
)
;
}
get
_uriToLoadPromise
(
)
{
delete
this
.
_uriToLoadPromise
;
return
this
.
_uriToLoadPromise
=
function
(
)
{
if
(
!
window
.
arguments
|
|
!
window
.
arguments
[
0
]
)
{
return
null
;
}
let
uri
=
window
.
arguments
[
0
]
;
let
defaultArgs
=
Cc
[
"
mozilla
.
org
/
browser
/
clh
;
1
"
]
.
getService
(
Ci
.
nsIBrowserHandler
)
.
defaultArgs
;
if
(
uri
!
=
defaultArgs
)
{
return
uri
;
}
let
willOverride
=
SessionStartup
.
willOverrideHomepage
;
if
(
typeof
willOverride
=
=
"
boolean
"
)
{
return
willOverride
?
null
:
uri
;
}
return
willOverride
.
then
(
willOverrideHomepage
=
>
willOverrideHomepage
?
null
:
uri
)
;
}
(
)
;
}
_callWithURIToLoad
(
callback
)
{
let
uriToLoad
=
this
.
_uriToLoadPromise
;
if
(
!
uriToLoad
|
|
!
uriToLoad
.
then
)
callback
(
uriToLoad
)
;
else
uriToLoad
.
then
(
callback
)
;
}
onUnload
(
)
{
gUIDensity
.
uninit
(
)
;
TabsInTitlebar
.
uninit
(
)
;
ToolbarIconColor
.
uninit
(
)
;
CompactTheme
.
uninit
(
)
;
if
(
!
this
.
_loadHandled
)
return
;
CombinedStopReload
.
uninit
(
)
;
gGestureSupport
.
init
(
false
)
;
gHistorySwipeAnimation
.
uninit
(
)
;
FullScreen
.
uninit
(
)
;
gSync
.
uninit
(
)
;
gExtensionsNotifications
.
uninit
(
)
;
Services
.
obs
.
removeObserver
(
gPluginHandler
.
NPAPIPluginCrashed
"
plugin
-
crashed
"
)
;
try
{
gBrowser
.
removeProgressListener
(
window
.
XULBrowserWindow
)
;
gBrowser
.
removeTabsProgressListener
(
window
.
TabsProgressListener
)
;
}
catch
(
ex
)
{
}
PlacesToolbarHelper
.
uninit
(
)
;
BookmarkingUI
.
uninit
(
)
;
TabletModeUpdater
.
uninit
(
)
;
gTabletModePageCounter
.
finish
(
)
;
BrowserOnClick
.
uninit
(
)
;
FeedHandler
.
uninit
(
)
;
ContentBlocking
.
uninit
(
)
;
CaptivePortalWatcher
.
uninit
(
)
;
SidebarUI
.
uninit
(
)
;
DownloadsButton
.
uninit
(
)
;
gAccessibilityServiceIndicator
.
uninit
(
)
;
AccessibilityRefreshBlocker
.
uninit
(
)
;
LanguagePrompt
.
uninit
(
)
;
BrowserSearch
.
uninit
(
)
;
if
(
this
.
_boundDelayedStartup
)
{
this
.
_cancelDelayedStartup
(
)
;
}
else
{
if
(
Win7Features
)
{
Win7Features
.
onCloseWindow
(
)
;
}
Services
.
prefs
.
removeObserver
(
ctrlTab
.
prefName
ctrlTab
)
;
ctrlTab
.
uninit
(
)
;
gBrowserThumbnails
.
uninit
(
)
;
FullZoom
.
destroy
(
)
;
Services
.
obs
.
removeObserver
(
gIdentityHandler
"
perm
-
changed
"
)
;
Services
.
obs
.
removeObserver
(
gRemoteControl
"
remote
-
active
"
)
;
Services
.
obs
.
removeObserver
(
gSessionHistoryObserver
"
browser
:
purge
-
session
-
history
"
)
;
Services
.
obs
.
removeObserver
(
gStoragePressureObserver
"
QuotaManager
:
:
StoragePressure
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
disabled
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
started
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
blocked
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
origin
-
blocked
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
failed
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
confirmation
"
)
;
Services
.
obs
.
removeObserver
(
gXPInstallObserver
"
addon
-
install
-
complete
"
)
;
window
.
messageManager
.
removeMessageListener
(
"
Browser
:
URIFixup
"
gKeywordURIFixup
)
;
window
.
messageManager
.
removeMessageListener
(
"
Browser
:
LoadURI
"
RedirectLoad
)
;
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
)
{
MenuTouchModeObserver
.
uninit
(
)
;
}
BrowserOffline
.
uninit
(
)
;
IndexedDBPromptHelper
.
uninit
(
)
;
CanvasPermissionPromptHelper
.
uninit
(
)
;
WebAuthnPromptHelper
.
uninit
(
)
;
PanelUI
.
uninit
(
)
;
AutoShowBookmarksToolbar
.
uninit
(
)
;
}
gBrowser
.
destroy
(
)
;
window
.
XULBrowserWindow
=
null
;
window
.
docShell
.
treeOwner
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIXULWindow
)
.
XULBrowserWindow
=
null
;
window
.
browserDOMWindow
=
null
;
}
}
;
function
HandleAppCommandEvent
(
evt
)
{
switch
(
evt
.
command
)
{
case
"
Back
"
:
BrowserBack
(
)
;
break
;
case
"
Forward
"
:
BrowserForward
(
)
;
break
;
case
"
Reload
"
:
BrowserReloadSkipCache
(
)
;
break
;
case
"
Stop
"
:
if
(
XULBrowserWindow
.
stopCommand
.
getAttribute
(
"
disabled
"
)
!
=
"
true
"
)
BrowserStop
(
)
;
break
;
case
"
Search
"
:
BrowserSearch
.
webSearch
(
)
;
break
;
case
"
Bookmarks
"
:
SidebarUI
.
toggle
(
"
viewBookmarksSidebar
"
)
;
break
;
case
"
Home
"
:
BrowserHome
(
)
;
break
;
case
"
New
"
:
BrowserOpenTab
(
)
;
break
;
case
"
Close
"
:
BrowserCloseTabOrWindow
(
)
;
break
;
case
"
Find
"
:
gLazyFindCommand
(
"
onFindCommand
"
)
;
break
;
case
"
Help
"
:
openHelpLink
(
"
firefox
-
help
"
)
;
break
;
case
"
Open
"
:
BrowserOpenFileWindow
(
)
;
break
;
case
"
Print
"
:
PrintUtils
.
printWindow
(
gBrowser
.
selectedBrowser
.
outerWindowID
gBrowser
.
selectedBrowser
)
;
break
;
case
"
Save
"
:
saveBrowser
(
gBrowser
.
selectedBrowser
)
;
break
;
case
"
SendMail
"
:
MailIntegration
.
sendLinkForBrowser
(
gBrowser
.
selectedBrowser
)
;
break
;
default
:
return
;
}
evt
.
stopPropagation
(
)
;
evt
.
preventDefault
(
)
;
}
function
maybeRecordAbandonmentTelemetry
(
tab
type
)
{
if
(
!
tab
.
hasAttribute
(
"
busy
"
)
)
{
return
;
}
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
BUSY_TAB_ABANDONED
"
)
;
histogram
.
add
(
type
)
;
}
function
gotoHistoryIndex
(
aEvent
)
{
let
index
=
aEvent
.
target
.
getAttribute
(
"
index
"
)
;
if
(
!
index
)
return
false
;
let
where
=
whereToOpenLink
(
aEvent
)
;
if
(
where
=
=
"
current
"
)
{
try
{
maybeRecordAbandonmentTelemetry
(
gBrowser
.
selectedTab
"
historyNavigation
"
)
;
gBrowser
.
gotoIndex
(
index
)
;
}
catch
(
ex
)
{
return
false
;
}
return
true
;
}
let
historyindex
=
aEvent
.
target
.
getAttribute
(
"
historyindex
"
)
;
duplicateTabIn
(
gBrowser
.
selectedTab
where
Number
(
historyindex
)
)
;
return
true
;
}
function
BrowserForward
(
aEvent
)
{
let
where
=
whereToOpenLink
(
aEvent
false
true
)
;
if
(
where
=
=
"
current
"
)
{
try
{
maybeRecordAbandonmentTelemetry
(
gBrowser
.
selectedTab
"
forward
"
)
;
gBrowser
.
goForward
(
)
;
}
catch
(
ex
)
{
}
}
else
{
duplicateTabIn
(
gBrowser
.
selectedTab
where
1
)
;
}
}
function
BrowserBack
(
aEvent
)
{
let
where
=
whereToOpenLink
(
aEvent
false
true
)
;
if
(
where
=
=
"
current
"
)
{
try
{
maybeRecordAbandonmentTelemetry
(
gBrowser
.
selectedTab
"
back
"
)
;
gBrowser
.
goBack
(
)
;
}
catch
(
ex
)
{
}
}
else
{
duplicateTabIn
(
gBrowser
.
selectedTab
where
-
1
)
;
}
}
function
BrowserHandleBackspace
(
)
{
switch
(
Services
.
prefs
.
getIntPref
(
"
browser
.
backspace_action
"
)
)
{
case
0
:
BrowserBack
(
)
;
break
;
case
1
:
goDoCommand
(
"
cmd_scrollPageUp
"
)
;
break
;
}
}
function
BrowserHandleShiftBackspace
(
)
{
switch
(
Services
.
prefs
.
getIntPref
(
"
browser
.
backspace_action
"
)
)
{
case
0
:
BrowserForward
(
)
;
break
;
case
1
:
goDoCommand
(
"
cmd_scrollPageDown
"
)
;
break
;
}
}
function
BrowserStop
(
)
{
maybeRecordAbandonmentTelemetry
(
gBrowser
.
selectedTab
"
stop
"
)
;
gBrowser
.
webNavigation
.
stop
(
Ci
.
nsIWebNavigation
.
STOP_ALL
)
;
}
function
BrowserReloadOrDuplicate
(
aEvent
)
{
let
metaKeyPressed
=
AppConstants
.
platform
=
=
"
macosx
"
?
aEvent
.
metaKey
:
aEvent
.
ctrlKey
;
var
backgroundTabModifier
=
aEvent
.
button
=
=
1
|
|
metaKeyPressed
;
if
(
aEvent
.
shiftKey
&
&
!
backgroundTabModifier
)
{
BrowserReloadSkipCache
(
)
;
return
;
}
let
where
=
whereToOpenLink
(
aEvent
false
true
)
;
if
(
where
=
=
"
current
"
)
BrowserReload
(
)
;
else
duplicateTabIn
(
gBrowser
.
selectedTab
where
)
;
}
function
BrowserReload
(
)
{
if
(
gBrowser
.
currentURI
.
schemeIs
(
"
view
-
source
"
)
)
{
return
BrowserReloadSkipCache
(
)
;
}
const
reloadFlags
=
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_NONE
;
BrowserReloadWithFlags
(
reloadFlags
)
;
}
function
BrowserReloadSkipCache
(
)
{
const
reloadFlags
=
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_PROXY
|
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_CACHE
;
BrowserReloadWithFlags
(
reloadFlags
)
;
}
var
BrowserHome
=
BrowserGoHome
;
function
BrowserGoHome
(
aEvent
)
{
if
(
aEvent
&
&
"
button
"
in
aEvent
&
&
aEvent
.
button
=
=
2
)
return
;
var
homePage
=
HomePage
.
get
(
)
;
var
where
=
whereToOpenLink
(
aEvent
false
true
)
;
var
urls
;
var
notifyObservers
;
if
(
where
=
=
"
current
"
&
&
gBrowser
&
&
gBrowser
.
selectedTab
.
pinned
)
where
=
"
tab
"
;
switch
(
where
)
{
case
"
current
"
:
loadOneOrMoreURIs
(
homePage
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
)
;
if
(
isBlankPageURL
(
homePage
)
)
{
focusAndSelectUrlBar
(
)
;
}
else
{
gBrowser
.
selectedBrowser
.
focus
(
)
;
}
notifyObservers
=
true
;
break
;
case
"
tabshifted
"
:
case
"
tab
"
:
urls
=
homePage
.
split
(
"
|
"
)
;
var
loadInBackground
=
getBoolPref
(
"
browser
.
tabs
.
loadBookmarksInBackground
"
false
)
;
notifyObservers
=
!
loadInBackground
;
gBrowser
.
loadTabs
(
urls
{
inBackground
:
loadInBackground
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
break
;
case
"
window
"
:
notifyObservers
=
false
;
OpenBrowserWindow
(
)
;
break
;
}
if
(
notifyObservers
)
{
Services
.
obs
.
notifyObservers
(
null
"
browser
-
open
-
homepage
-
start
"
)
;
}
}
function
loadOneOrMoreURIs
(
aURIString
aTriggeringPrincipal
)
{
if
(
window
.
location
.
href
!
=
AppConstants
.
BROWSER_CHROME_URL
)
{
window
.
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
"
all
dialog
=
no
"
aURIString
)
;
return
;
}
try
{
gBrowser
.
loadTabs
(
aURIString
.
split
(
"
|
"
)
{
inBackground
:
false
replace
:
true
triggeringPrincipal
:
aTriggeringPrincipal
}
)
;
}
catch
(
e
)
{
}
}
function
focusAndSelectUrlBar
(
userInitiatedFocus
=
false
)
{
if
(
CustomizationHandler
.
isExitingCustomizeMode
)
{
gNavToolbox
.
addEventListener
(
"
aftercustomization
"
function
(
)
{
focusAndSelectUrlBar
(
userInitiatedFocus
)
;
}
{
once
:
true
}
)
;
return
;
}
if
(
window
.
fullScreen
)
{
FullScreen
.
showNavToolbox
(
)
;
}
gURLBar
.
userInitiatedFocus
=
userInitiatedFocus
;
gURLBar
.
select
(
)
;
gURLBar
.
userInitiatedFocus
=
false
;
}
function
openLocation
(
)
{
if
(
window
.
location
.
href
=
=
AppConstants
.
BROWSER_CHROME_URL
)
{
focusAndSelectUrlBar
(
true
)
;
return
;
}
let
win
=
getTopWin
(
)
;
if
(
win
)
{
win
.
focus
(
)
;
win
.
openLocation
(
)
;
return
;
}
window
.
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
"
chrome
all
dialog
=
no
"
BROWSER_NEW_TAB_URL
)
;
}
function
BrowserOpenTab
(
event
)
{
let
where
=
"
tab
"
;
let
relatedToCurrent
=
false
;
if
(
event
)
{
where
=
whereToOpenLink
(
event
false
true
)
;
switch
(
where
)
{
case
"
tab
"
:
case
"
tabshifted
"
:
relatedToCurrent
=
true
;
break
;
case
"
current
"
:
where
=
"
tab
"
;
break
;
}
}
Services
.
obs
.
notifyObservers
(
{
wrappedJSObject
:
new
Promise
(
resolve
=
>
{
openTrustedLinkIn
(
BROWSER_NEW_TAB_URL
where
{
relatedToCurrent
resolveOnNewTabCreated
:
resolve
}
)
;
}
)
}
"
browser
-
open
-
newtab
-
start
"
)
;
}
var
gLastOpenDirectory
=
{
_lastDir
:
null
get
path
(
)
{
if
(
!
this
.
_lastDir
|
|
!
this
.
_lastDir
.
exists
(
)
)
{
try
{
this
.
_lastDir
=
Services
.
prefs
.
getComplexValue
(
"
browser
.
open
.
lastDir
"
Ci
.
nsIFile
)
;
if
(
!
this
.
_lastDir
.
exists
(
)
)
this
.
_lastDir
=
null
;
}
catch
(
e
)
{
}
}
return
this
.
_lastDir
;
}
set
path
(
val
)
{
try
{
if
(
!
val
|
|
!
val
.
isDirectory
(
)
)
return
;
}
catch
(
e
)
{
return
;
}
this
.
_lastDir
=
val
.
clone
(
)
;
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
Services
.
prefs
.
setComplexValue
(
"
browser
.
open
.
lastDir
"
Ci
.
nsIFile
this
.
_lastDir
)
;
}
reset
(
)
{
this
.
_lastDir
=
null
;
}
}
;
function
BrowserOpenFileWindow
(
)
{
try
{
const
nsIFilePicker
=
Ci
.
nsIFilePicker
;
let
fp
=
Cc
[
"
mozilla
.
org
/
filepicker
;
1
"
]
.
createInstance
(
nsIFilePicker
)
;
let
fpCallback
=
function
fpCallback_done
(
aResult
)
{
if
(
aResult
=
=
nsIFilePicker
.
returnOK
)
{
try
{
if
(
fp
.
file
)
{
gLastOpenDirectory
.
path
=
fp
.
file
.
parent
.
QueryInterface
(
Ci
.
nsIFile
)
;
}
}
catch
(
ex
)
{
}
openTrustedLinkIn
(
fp
.
fileURL
.
spec
"
current
"
)
;
}
}
;
fp
.
init
(
window
gNavigatorBundle
.
getString
(
"
openFile
"
)
nsIFilePicker
.
modeOpen
)
;
fp
.
appendFilters
(
nsIFilePicker
.
filterAll
|
nsIFilePicker
.
filterText
|
nsIFilePicker
.
filterImages
|
nsIFilePicker
.
filterXML
|
nsIFilePicker
.
filterHTML
)
;
fp
.
displayDirectory
=
gLastOpenDirectory
.
path
;
fp
.
open
(
fpCallback
)
;
}
catch
(
ex
)
{
}
}
function
BrowserCloseTabOrWindow
(
event
)
{
if
(
window
.
location
.
href
!
=
AppConstants
.
BROWSER_CHROME_URL
)
{
closeWindow
(
true
)
;
return
;
}
if
(
gBrowser
.
multiSelectedTabsCount
)
{
gBrowser
.
removeMultiSelectedTabs
(
)
;
return
;
}
if
(
event
&
&
(
event
.
ctrlKey
|
|
event
.
metaKey
|
|
event
.
altKey
)
&
&
gBrowser
.
selectedTab
.
pinned
)
{
if
(
gBrowser
.
visibleTabs
.
length
>
gBrowser
.
_numPinnedTabs
)
{
gBrowser
.
tabContainer
.
selectedIndex
=
gBrowser
.
_numPinnedTabs
;
}
return
;
}
gBrowser
.
removeCurrentTab
(
{
animate
:
true
}
)
;
}
function
BrowserTryToCloseWindow
(
)
{
if
(
WindowIsClosing
(
)
)
window
.
close
(
)
;
}
function
loadURI
(
uri
referrer
postData
allowThirdPartyFixup
referrerPolicy
userContextId
originPrincipal
forceAboutBlankViewerInCurrent
triggeringPrincipal
allowInheritPrincipal
=
false
)
{
try
{
openLinkIn
(
uri
"
current
"
{
referrerURI
:
referrer
referrerPolicy
postData
allowThirdPartyFixup
userContextId
originPrincipal
triggeringPrincipal
forceAboutBlankViewerInCurrent
allowInheritPrincipal
}
)
;
}
catch
(
e
)
{
}
}
async
function
getShortcutOrURIAndPostData
(
url
)
{
let
mayInheritPrincipal
=
false
;
let
postData
=
null
;
let
[
keyword
param
=
"
"
]
=
url
.
trim
(
)
.
split
(
/
\
s
(
.
+
)
/
2
)
;
if
(
!
keyword
)
{
return
{
url
postData
mayInheritPrincipal
}
;
}
let
engine
=
Services
.
search
.
getEngineByAlias
(
keyword
)
;
if
(
engine
)
{
let
submission
=
engine
.
getSubmission
(
param
null
"
keyword
"
)
;
return
{
url
:
submission
.
uri
.
spec
postData
:
submission
.
postData
mayInheritPrincipal
}
;
}
let
entry
=
null
;
try
{
entry
=
await
PlacesUtils
.
keywords
.
fetch
(
keyword
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
Unable
to
fetch
Places
keyword
"
{
keyword
}
"
:
{
ex
}
)
;
}
if
(
!
entry
|
|
!
entry
.
url
)
{
return
{
url
postData
mayInheritPrincipal
}
;
}
try
{
[
url
postData
]
=
await
BrowserUtils
.
parseUrlAndPostData
(
entry
.
url
.
href
entry
.
postData
param
)
;
if
(
postData
)
{
postData
=
getPostDataStream
(
postData
)
;
}
mayInheritPrincipal
=
true
;
}
catch
(
ex
)
{
}
return
{
url
postData
mayInheritPrincipal
}
;
}
function
getPostDataStream
(
aPostDataString
aType
=
"
application
/
x
-
www
-
form
-
urlencoded
"
)
{
let
dataStream
=
Cc
[
"
mozilla
.
org
/
io
/
string
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIStringInputStream
)
;
dataStream
.
data
=
aPostDataString
;
let
mimeStream
=
Cc
[
"
mozilla
.
org
/
network
/
mime
-
input
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIMIMEInputStream
)
;
mimeStream
.
addHeader
(
"
Content
-
Type
"
aType
)
;
mimeStream
.
setData
(
dataStream
)
;
return
mimeStream
.
QueryInterface
(
Ci
.
nsIInputStream
)
;
}
function
getLoadContext
(
)
{
return
window
.
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
;
}
function
readFromClipboard
(
)
{
var
url
;
try
{
var
trans
=
Cc
[
"
mozilla
.
org
/
widget
/
transferable
;
1
"
]
.
createInstance
(
Ci
.
nsITransferable
)
;
trans
.
init
(
getLoadContext
(
)
)
;
trans
.
addDataFlavor
(
"
text
/
unicode
"
)
;
if
(
Services
.
clipboard
.
supportsSelectionClipboard
(
)
)
Services
.
clipboard
.
getData
(
trans
Services
.
clipboard
.
kSelectionClipboard
)
;
else
Services
.
clipboard
.
getData
(
trans
Services
.
clipboard
.
kGlobalClipboard
)
;
var
data
=
{
}
;
var
dataLen
=
{
}
;
trans
.
getTransferData
(
"
text
/
unicode
"
data
dataLen
)
;
if
(
data
)
{
data
=
data
.
value
.
QueryInterface
(
Ci
.
nsISupportsString
)
;
url
=
data
.
data
.
substring
(
0
dataLen
.
value
/
2
)
;
}
}
catch
(
ex
)
{
}
return
url
;
}
async
function
BrowserViewSourceOfDocument
(
aArgsOrDocument
)
{
let
args
;
if
(
aArgsOrDocument
instanceof
Document
)
{
let
doc
=
aArgsOrDocument
;
if
(
Cu
.
isCrossProcessWrapper
(
doc
)
)
{
throw
new
Error
(
"
BrowserViewSourceOfDocument
cannot
accept
a
CPOW
"
+
"
as
a
document
.
"
)
;
}
let
win
=
doc
.
defaultView
;
let
browser
=
win
.
docShell
.
chromeEventHandler
;
let
outerWindowID
=
win
.
windowUtils
.
outerWindowID
;
let
URL
=
browser
.
currentURI
.
spec
;
args
=
{
browser
outerWindowID
URL
}
;
}
else
{
args
=
aArgsOrDocument
;
}
if
(
Services
.
prefs
.
getBoolPref
(
"
view_source
.
editor
.
external
"
)
)
{
try
{
await
top
.
gViewSourceUtils
.
openInExternalEditor
(
args
)
;
return
;
}
catch
(
data
)
{
}
}
let
tabBrowser
=
gBrowser
;
let
preferredRemoteType
;
if
(
args
.
browser
)
{
preferredRemoteType
=
args
.
browser
.
remoteType
;
}
else
{
if
(
!
tabBrowser
)
{
throw
new
Error
(
"
BrowserViewSourceOfDocument
should
be
passed
the
"
+
"
subject
browser
if
called
from
a
window
without
"
+
"
gBrowser
defined
.
"
)
;
}
preferredRemoteType
=
E10SUtils
.
getRemoteTypeForURI
(
args
.
URL
gMultiProcessBrowser
)
;
}
if
(
!
tabBrowser
|
|
!
window
.
toolbar
.
visible
)
{
let
browserWindow
=
BrowserWindowTracker
.
getTopWindow
(
)
;
tabBrowser
=
browserWindow
.
gBrowser
;
}
let
tab
=
tabBrowser
.
loadOneTab
(
"
about
:
blank
"
{
relatedToCurrent
:
true
inBackground
:
false
preferredRemoteType
sameProcessAsFrameLoader
:
args
.
browser
?
args
.
browser
.
frameLoader
:
null
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
args
.
viewSourceBrowser
=
tabBrowser
.
getBrowserForTab
(
tab
)
;
top
.
gViewSourceUtils
.
viewSourceInBrowser
(
args
)
;
}
function
BrowserViewSource
(
browser
)
{
BrowserViewSourceOfDocument
(
{
browser
outerWindowID
:
browser
.
outerWindowID
URL
:
browser
.
currentURI
.
spec
}
)
;
}
function
BrowserPageInfo
(
documentURL
initialTab
imageElement
frameOuterWindowID
browser
)
{
if
(
documentURL
instanceof
HTMLDocument
)
{
Deprecated
.
warning
(
"
Please
pass
the
location
URL
instead
of
the
document
"
+
"
to
BrowserPageInfo
(
)
as
the
first
argument
.
"
"
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1238180
"
)
;
documentURL
=
documentURL
.
location
;
}
let
args
=
{
initialTab
imageElement
frameOuterWindowID
browser
}
;
documentURL
=
documentURL
|
|
window
.
gBrowser
.
selectedBrowser
.
currentURI
.
spec
;
for
(
let
currentWindow
of
Services
.
wm
.
getEnumerator
(
"
Browser
:
page
-
info
"
)
)
{
if
(
currentWindow
.
closed
)
{
continue
;
}
if
(
currentWindow
.
document
.
documentElement
.
getAttribute
(
"
relatedUrl
"
)
=
=
documentURL
)
{
currentWindow
.
focus
(
)
;
currentWindow
.
resetPageInfo
(
args
)
;
return
currentWindow
;
}
}
return
openDialog
(
"
chrome
:
/
/
browser
/
content
/
pageinfo
/
pageInfo
.
xul
"
"
"
"
chrome
toolbar
dialog
=
no
resizable
"
args
)
;
}
function
URLBarSetURI
(
aURI
)
{
var
value
=
gBrowser
.
userTypedValue
;
var
valid
=
false
;
if
(
value
=
=
=
null
)
{
let
uri
=
aURI
|
|
gBrowser
.
currentURI
;
try
{
uri
=
Services
.
uriFixup
.
createExposableURI
(
uri
)
;
}
catch
(
e
)
{
}
if
(
isInitialPage
(
uri
.
spec
)
&
&
checkEmptyPageOrigin
(
gBrowser
.
selectedBrowser
uri
)
)
{
value
=
"
"
;
}
else
{
try
{
value
=
losslessDecodeURI
(
uri
)
;
}
catch
(
ex
)
{
value
=
"
about
:
blank
"
;
}
}
valid
=
!
isBlankPageURL
(
uri
.
spec
)
|
|
uri
.
schemeIs
(
"
moz
-
extension
"
)
;
}
else
if
(
isInitialPage
(
value
)
&
&
checkEmptyPageOrigin
(
gBrowser
.
selectedBrowser
)
)
{
value
=
"
"
;
valid
=
true
;
}
let
isDifferentValidValue
=
valid
&
&
value
!
=
gURLBar
.
value
;
gURLBar
.
value
=
value
;
gURLBar
.
valueIsTyped
=
!
valid
;
gURLBar
.
removeAttribute
(
"
usertyping
"
)
;
if
(
isDifferentValidValue
)
{
gURLBar
.
selectionStart
=
gURLBar
.
selectionEnd
=
0
;
}
SetPageProxyState
(
valid
?
"
valid
"
:
"
invalid
"
)
;
}
function
losslessDecodeURI
(
aURI
)
{
let
scheme
=
aURI
.
scheme
;
if
(
scheme
=
=
"
moz
-
action
"
)
throw
new
Error
(
"
losslessDecodeURI
should
never
get
a
moz
-
action
URI
"
)
;
var
value
=
aURI
.
displaySpec
;
let
decodeASCIIOnly
=
!
[
"
https
"
"
http
"
"
file
"
"
ftp
"
]
.
includes
(
scheme
)
;
if
(
!
/
%
25
(
?
:
3B
|
2F
|
3F
|
3A
|
40
|
26
|
3D
|
2B
|
24
|
2C
|
23
)
/
i
.
test
(
value
)
)
{
if
(
decodeASCIIOnly
)
{
value
=
value
.
replace
(
/
%
(
2
[
0
-
4
]
|
2
[
6
-
9a
-
f
]
|
[
3
-
6
]
[
0
-
9a
-
f
]
|
7
[
0
-
9a
-
e
]
)
/
g
decodeURI
)
;
}
else
{
try
{
value
=
decodeURI
(
value
)
.
replace
(
/
%
(
?
!
3B
|
2F
|
3F
|
3A
|
40
|
26
|
3D
|
2B
|
24
|
2C
|
23
)
|
[
\
r
\
n
\
t
]
|
\
s
(
?
=
\
s
)
|
\
s
/
ig
encodeURIComponent
)
;
}
catch
(
e
)
{
}
}
}
value
=
value
.
replace
(
/
[
\
u0000
-
\
u001f
\
u007f
-
\
u00a0
\
u2028
\
u2029
\
ufffc
]
/
g
encodeURIComponent
)
;
value
=
value
.
replace
(
/
[
\
u00ad
\
u034f
\
u061c
\
u115f
-
\
u1160
\
u17b4
-
\
u17b5
\
u180b
-
\
u180d
\
u200b
\
u200e
-
\
u200f
\
u202a
-
\
u202e
\
u2060
-
\
u206f
\
u3164
\
ufe00
-
\
ufe0f
\
ufeff
\
uffa0
\
ufff0
-
\
ufff8
]
|
\
ud834
[
\
udd73
-
\
udd7a
]
|
[
\
udb40
-
\
udb43
]
[
\
udc00
-
\
udfff
]
/
g
encodeURIComponent
)
;
return
value
;
}
function
UpdateUrlbarSearchSplitterState
(
)
{
var
splitter
=
document
.
getElementById
(
"
urlbar
-
search
-
splitter
"
)
;
var
urlbar
=
document
.
getElementById
(
"
urlbar
-
container
"
)
;
var
searchbar
=
document
.
getElementById
(
"
search
-
container
"
)
;
if
(
document
.
documentElement
.
getAttribute
(
"
customizing
"
)
=
=
"
true
"
)
{
if
(
splitter
)
{
splitter
.
remove
(
)
;
}
return
;
}
if
(
splitter
&
&
(
(
splitter
.
nextElementSibling
=
=
searchbar
&
&
splitter
.
previousElementSibling
=
=
urlbar
)
|
|
(
splitter
.
nextElementSibling
=
=
urlbar
&
&
splitter
.
previousElementSibling
=
=
searchbar
)
)
)
{
return
;
}
var
ibefore
=
null
;
if
(
urlbar
&
&
searchbar
)
{
if
(
urlbar
.
nextElementSibling
=
=
searchbar
)
ibefore
=
searchbar
;
else
if
(
searchbar
.
nextElementSibling
=
=
urlbar
)
ibefore
=
urlbar
;
}
if
(
ibefore
)
{
if
(
!
splitter
)
{
splitter
=
document
.
createXULElement
(
"
splitter
"
)
;
splitter
.
id
=
"
urlbar
-
search
-
splitter
"
;
splitter
.
setAttribute
(
"
resizebefore
"
"
flex
"
)
;
splitter
.
setAttribute
(
"
resizeafter
"
"
flex
"
)
;
splitter
.
setAttribute
(
"
skipintoolbarset
"
"
true
"
)
;
splitter
.
setAttribute
(
"
overflows
"
"
false
"
)
;
splitter
.
className
=
"
chromeclass
-
toolbar
-
additional
"
;
}
urlbar
.
parentNode
.
insertBefore
(
splitter
ibefore
)
;
}
else
if
(
splitter
)
splitter
.
remove
(
)
;
}
function
UpdatePageProxyState
(
)
{
if
(
gURLBar
&
&
gURLBar
.
value
!
=
gLastValidURLStr
)
SetPageProxyState
(
"
invalid
"
)
;
}
function
SetPageProxyState
(
aState
)
{
if
(
!
gURLBar
)
return
;
let
oldPageProxyState
=
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
;
gURLBar
.
setAttribute
(
"
pageproxystate
"
aState
)
;
if
(
aState
=
=
"
valid
"
)
{
gLastValidURLStr
=
gURLBar
.
value
;
gURLBar
.
addEventListener
(
"
input
"
UpdatePageProxyState
)
;
}
else
if
(
aState
=
=
"
invalid
"
)
{
gURLBar
.
removeEventListener
(
"
input
"
UpdatePageProxyState
)
;
}
if
(
oldPageProxyState
=
=
aState
)
{
return
;
}
UpdatePopupNotificationsVisibility
(
)
;
}
function
UpdatePopupNotificationsVisibility
(
)
{
if
(
Object
.
getOwnPropertyDescriptor
(
window
"
PopupNotifications
"
)
.
get
)
{
return
;
}
PopupNotifications
.
anchorVisibilityChange
(
)
;
}
function
PageProxyClickHandler
(
aEvent
)
{
if
(
aEvent
.
button
=
=
1
&
&
Services
.
prefs
.
getBoolPref
(
"
middlemouse
.
paste
"
)
)
middleMousePaste
(
aEvent
)
;
}
const
TLS_ERROR_REPORT_TELEMETRY_AUTO_CHECKED
=
2
;
const
TLS_ERROR_REPORT_TELEMETRY_AUTO_UNCHECKED
=
3
;
const
PREF_SSL_IMPACT_ROOTS
=
[
"
security
.
tls
.
version
.
"
"
security
.
ssl3
.
"
]
;
var
BrowserOnClick
=
{
init
(
)
{
let
mm
=
window
.
messageManager
;
mm
.
addMessageListener
(
"
Browser
:
CertExceptionError
"
this
)
;
mm
.
addMessageListener
(
"
Browser
:
OpenCaptivePortalPage
"
this
)
;
mm
.
addMessageListener
(
"
Browser
:
SiteBlockedError
"
this
)
;
mm
.
addMessageListener
(
"
Browser
:
EnableOnlineMode
"
this
)
;
mm
.
addMessageListener
(
"
Browser
:
SetSSLErrorReportAuto
"
this
)
;
mm
.
addMessageListener
(
"
Browser
:
ResetSSLPreferences
"
this
)
;
mm
.
addMessageListener
(
"
Browser
:
SSLErrorReportTelemetry
"
this
)
;
mm
.
addMessageListener
(
"
Browser
:
SSLErrorGoBack
"
this
)
;
Services
.
obs
.
addObserver
(
this
"
captive
-
portal
-
login
-
abort
"
)
;
Services
.
obs
.
addObserver
(
this
"
captive
-
portal
-
login
-
success
"
)
;
}
uninit
(
)
{
let
mm
=
window
.
messageManager
;
mm
.
removeMessageListener
(
"
Browser
:
CertExceptionError
"
this
)
;
mm
.
removeMessageListener
(
"
Browser
:
SiteBlockedError
"
this
)
;
mm
.
removeMessageListener
(
"
Browser
:
EnableOnlineMode
"
this
)
;
mm
.
removeMessageListener
(
"
Browser
:
SetSSLErrorReportAuto
"
this
)
;
mm
.
removeMessageListener
(
"
Browser
:
ResetSSLPreferences
"
this
)
;
mm
.
removeMessageListener
(
"
Browser
:
SSLErrorReportTelemetry
"
this
)
;
mm
.
removeMessageListener
(
"
Browser
:
SSLErrorGoBack
"
this
)
;
Services
.
obs
.
removeObserver
(
this
"
captive
-
portal
-
login
-
abort
"
)
;
Services
.
obs
.
removeObserver
(
this
"
captive
-
portal
-
login
-
success
"
)
;
}
observe
(
aSubject
aTopic
aData
)
{
switch
(
aTopic
)
{
case
"
captive
-
portal
-
login
-
abort
"
:
case
"
captive
-
portal
-
login
-
success
"
:
window
.
messageManager
.
broadcastAsyncMessage
(
"
Browser
:
CaptivePortalFreed
"
)
;
break
;
}
}
receiveMessage
(
msg
)
{
switch
(
msg
.
name
)
{
case
"
Browser
:
CertExceptionError
"
:
this
.
onCertError
(
msg
.
target
msg
.
data
.
elementId
msg
.
data
.
isTopFrame
msg
.
data
.
location
msg
.
data
.
securityInfoAsString
msg
.
data
.
frameId
)
;
break
;
case
"
Browser
:
OpenCaptivePortalPage
"
:
CaptivePortalWatcher
.
ensureCaptivePortalTab
(
)
;
break
;
case
"
Browser
:
SiteBlockedError
"
:
this
.
onAboutBlocked
(
msg
.
data
.
elementId
msg
.
data
.
reason
msg
.
data
.
isTopFrame
msg
.
data
.
location
msg
.
data
.
blockedInfo
)
;
break
;
case
"
Browser
:
EnableOnlineMode
"
:
if
(
Services
.
io
.
offline
)
{
Services
.
io
.
offline
=
false
;
msg
.
target
.
reload
(
)
;
}
break
;
case
"
Browser
:
ResetSSLPreferences
"
:
let
prefSSLImpact
=
PREF_SSL_IMPACT_ROOTS
.
reduce
(
(
prefs
root
)
=
>
{
return
prefs
.
concat
(
Services
.
prefs
.
getChildList
(
root
)
)
;
}
[
]
)
;
for
(
let
prefName
of
prefSSLImpact
)
{
Services
.
prefs
.
clearUserPref
(
prefName
)
;
}
msg
.
target
.
reload
(
)
;
break
;
case
"
Browser
:
SetSSLErrorReportAuto
"
:
Services
.
prefs
.
setBoolPref
(
"
security
.
ssl
.
errorReporting
.
automatic
"
msg
.
json
.
automatic
)
;
let
bin
=
TLS_ERROR_REPORT_TELEMETRY_AUTO_UNCHECKED
;
if
(
msg
.
json
.
automatic
)
{
bin
=
TLS_ERROR_REPORT_TELEMETRY_AUTO_CHECKED
;
}
Services
.
telemetry
.
getHistogramById
(
"
TLS_ERROR_REPORT_UI
"
)
.
add
(
bin
)
;
break
;
case
"
Browser
:
SSLErrorReportTelemetry
"
:
let
reportStatus
=
msg
.
data
.
reportStatus
;
Services
.
telemetry
.
getHistogramById
(
"
TLS_ERROR_REPORT_UI
"
)
.
add
(
reportStatus
)
;
break
;
case
"
Browser
:
SSLErrorGoBack
"
:
goBackFromErrorPage
(
)
;
break
;
}
}
onCertError
(
browser
elementId
isTopFrame
location
securityInfoAsString
frameId
)
{
let
secHistogram
=
Services
.
telemetry
.
getHistogramById
(
"
SECURITY_UI
"
)
;
let
securityInfo
;
let
sslStatus
;
switch
(
elementId
)
{
case
"
exceptionDialogButton
"
:
if
(
isTopFrame
)
{
secHistogram
.
add
(
Ci
.
nsISecurityUITelemetry
.
WARNING_BAD_CERT_TOP_CLICK_ADD_EXCEPTION
)
;
}
securityInfo
=
getSecurityInfo
(
securityInfoAsString
)
;
sslStatus
=
securityInfo
.
SSLStatus
;
let
params
=
{
exceptionAdded
:
false
sslStatus
}
;
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
security
.
newcerterrorpage
.
enabled
"
false
)
)
{
let
overrideService
=
Cc
[
"
mozilla
.
org
/
security
/
certoverride
;
1
"
]
.
getService
(
Ci
.
nsICertOverrideService
)
;
let
flags
=
0
;
if
(
sslStatus
.
isUntrusted
)
{
flags
|
=
overrideService
.
ERROR_UNTRUSTED
;
}
if
(
sslStatus
.
isDomainMismatch
)
{
flags
|
=
overrideService
.
ERROR_MISMATCH
;
}
if
(
sslStatus
.
isNotValidAtThisTime
)
{
flags
|
=
overrideService
.
ERROR_TIME
;
}
let
uri
=
Services
.
uriFixup
.
createFixupURI
(
location
0
)
;
let
cert
=
sslStatus
.
serverCert
;
overrideService
.
rememberValidityOverride
(
uri
.
asciiHost
uri
.
port
cert
flags
true
)
;
browser
.
reload
(
)
;
return
;
}
try
{
switch
(
Services
.
prefs
.
getIntPref
(
"
browser
.
ssl_override_behavior
"
)
)
{
case
2
:
params
.
prefetchCert
=
true
;
case
1
:
params
.
location
=
location
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
"
Couldn
'
t
get
ssl_override
pref
:
"
+
e
)
;
}
window
.
openDialog
(
"
chrome
:
/
/
pippki
/
content
/
exceptionDialog
.
xul
"
"
"
"
chrome
centerscreen
modal
"
params
)
;
if
(
params
.
exceptionAdded
)
{
browser
.
reload
(
)
;
}
break
;
case
"
returnButton
"
:
if
(
isTopFrame
)
{
secHistogram
.
add
(
Ci
.
nsISecurityUITelemetry
.
WARNING_BAD_CERT_TOP_GET_ME_OUT_OF_HERE
)
;
}
goBackFromErrorPage
(
)
;
break
;
case
"
advancedPanelReturnButton
"
:
goBackFromErrorPage
(
)
;
break
;
case
"
advancedButton
"
:
case
"
moreInformationButton
"
:
if
(
isTopFrame
)
{
secHistogram
.
add
(
Ci
.
nsISecurityUITelemetry
.
WARNING_BAD_CERT_TOP_UNDERSTAND_RISKS
)
;
}
securityInfo
=
getSecurityInfo
(
securityInfoAsString
)
;
sslStatus
=
securityInfo
.
SSLStatus
;
let
errorInfo
=
getDetailedCertErrorInfo
(
location
securityInfo
)
;
let
validityInfo
=
{
notAfter
:
sslStatus
.
serverCert
.
validity
.
notAfter
notBefore
:
sslStatus
.
serverCert
.
validity
.
notBefore
notAfterLocalTime
:
sslStatus
.
serverCert
.
validity
.
notAfterLocalTime
notBeforeLocalTime
:
sslStatus
.
serverCert
.
validity
.
notBeforeLocalTime
}
;
browser
.
messageManager
.
sendAsyncMessage
(
"
CertErrorDetails
"
{
code
:
securityInfo
.
errorCode
info
:
errorInfo
codeString
:
securityInfo
.
errorCodeString
certIsUntrusted
:
sslStatus
.
isUntrusted
certSubjectAltNames
:
sslStatus
.
serverCert
.
subjectAltNames
validity
:
validityInfo
url
:
location
isDomainMismatch
:
sslStatus
.
isDomainMismatch
isNotValidAtThisTime
:
sslStatus
.
isNotValidAtThisTime
frameId
}
)
;
break
;
case
"
copyToClipboard
"
:
const
gClipboardHelper
=
Cc
[
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
]
.
getService
(
Ci
.
nsIClipboardHelper
)
;
securityInfo
=
getSecurityInfo
(
securityInfoAsString
)
;
let
detailedInfo
=
getDetailedCertErrorInfo
(
location
securityInfo
)
;
gClipboardHelper
.
copyString
(
detailedInfo
)
;
break
;
}
}
onAboutBlocked
(
elementId
reason
isTopFrame
location
blockedInfo
)
{
let
bucketName
=
"
"
;
let
sendTelemetry
=
false
;
if
(
reason
=
=
=
"
malware
"
)
{
sendTelemetry
=
true
;
bucketName
=
"
WARNING_MALWARE_PAGE_
"
;
}
else
if
(
reason
=
=
=
"
phishing
"
)
{
sendTelemetry
=
true
;
bucketName
=
"
WARNING_PHISHING_PAGE_
"
;
}
else
if
(
reason
=
=
=
"
unwanted
"
)
{
sendTelemetry
=
true
;
bucketName
=
"
WARNING_UNWANTED_PAGE_
"
;
}
else
if
(
reason
=
=
=
"
harmful
"
)
{
sendTelemetry
=
true
;
bucketName
=
"
WARNING_HARMFUL_PAGE_
"
;
}
let
secHistogram
=
Services
.
telemetry
.
getHistogramById
(
"
URLCLASSIFIER_UI_EVENTS
"
)
;
let
nsISecTel
=
Ci
.
IUrlClassifierUITelemetry
;
bucketName
+
=
isTopFrame
?
"
TOP_
"
:
"
FRAME_
"
;
switch
(
elementId
)
{
case
"
goBackButton
"
:
if
(
sendTelemetry
)
{
secHistogram
.
add
(
nsISecTel
[
bucketName
+
"
GET_ME_OUT_OF_HERE
"
]
)
;
}
getMeOutOfHere
(
)
;
break
;
case
"
ignore_warning_link
"
:
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
safebrowsing
.
allowOverride
"
)
)
{
if
(
sendTelemetry
)
{
secHistogram
.
add
(
nsISecTel
[
bucketName
+
"
IGNORE_WARNING
"
]
)
;
}
this
.
ignoreWarningLink
(
reason
blockedInfo
)
;
}
break
;
}
}
ignoreWarningLink
(
reason
blockedInfo
)
{
gBrowser
.
loadURI
(
gBrowser
.
currentURI
.
spec
{
flags
:
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_BYPASS_CLASSIFIER
}
)
;
Services
.
perms
.
add
(
gBrowser
.
currentURI
"
safe
-
browsing
"
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
Ci
.
nsIPermissionManager
.
EXPIRE_SESSION
)
;
let
buttons
=
[
{
label
:
gNavigatorBundle
.
getString
(
"
safebrowsing
.
getMeOutOfHereButton
.
label
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
safebrowsing
.
getMeOutOfHereButton
.
accessKey
"
)
callback
(
)
{
getMeOutOfHere
(
)
;
}
}
]
;
let
title
;
if
(
reason
=
=
=
"
malware
"
)
{
let
reportUrl
=
gSafeBrowsing
.
getReportURL
(
"
MalwareMistake
"
blockedInfo
)
;
title
=
gNavigatorBundle
.
getString
(
"
safebrowsing
.
reportedAttackSite
"
)
;
if
(
reportUrl
)
{
buttons
[
1
]
=
{
label
:
gNavigatorBundle
.
getString
(
"
safebrowsing
.
notAnAttackButton
.
label
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
safebrowsing
.
notAnAttackButton
.
accessKey
"
)
callback
(
)
{
openTrustedLinkIn
(
reportUrl
"
tab
"
)
;
}
}
;
}
}
else
if
(
reason
=
=
=
"
phishing
"
)
{
let
reportUrl
=
gSafeBrowsing
.
getReportURL
(
"
PhishMistake
"
blockedInfo
)
;
title
=
gNavigatorBundle
.
getString
(
"
safebrowsing
.
deceptiveSite
"
)
;
if
(
reportUrl
)
{
buttons
[
1
]
=
{
label
:
gNavigatorBundle
.
getString
(
"
safebrowsing
.
notADeceptiveSiteButton
.
label
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
safebrowsing
.
notADeceptiveSiteButton
.
accessKey
"
)
callback
(
)
{
openTrustedLinkIn
(
reportUrl
"
tab
"
)
;
}
}
;
}
}
else
if
(
reason
=
=
=
"
unwanted
"
)
{
title
=
gNavigatorBundle
.
getString
(
"
safebrowsing
.
reportedUnwantedSite
"
)
;
}
else
if
(
reason
=
=
=
"
harmful
"
)
{
title
=
gNavigatorBundle
.
getString
(
"
safebrowsing
.
reportedHarmfulSite
"
)
;
}
SafeBrowsingNotificationBox
.
show
(
title
buttons
)
;
}
}
;
function
getMeOutOfHere
(
)
{
gBrowser
.
loadURI
(
getDefaultHomePage
(
)
)
;
}
function
goBackFromErrorPage
(
)
{
let
state
=
JSON
.
parse
(
SessionStore
.
getTabState
(
gBrowser
.
selectedTab
)
)
;
if
(
state
.
index
=
=
1
)
{
gBrowser
.
loadURI
(
getDefaultHomePage
(
)
)
;
}
else
{
BrowserBack
(
)
;
}
}
function
getDefaultHomePage
(
)
{
let
url
=
BROWSER_NEW_TAB_URL
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
return
url
;
url
=
HomePage
.
getDefault
(
)
;
if
(
url
.
includes
(
"
|
"
)
)
{
url
=
url
.
split
(
"
|
"
)
[
0
]
;
}
return
url
;
}
function
BrowserFullScreen
(
)
{
window
.
fullScreen
=
!
window
.
fullScreen
;
}
function
getWebNavigation
(
)
{
return
gBrowser
.
webNavigation
;
}
function
BrowserReloadWithFlags
(
reloadFlags
)
{
let
url
=
gBrowser
.
currentURI
.
spec
;
if
(
gBrowser
.
updateBrowserRemotenessByURL
(
gBrowser
.
selectedBrowser
url
)
)
{
gBrowser
.
loadURI
(
url
{
flags
:
reloadFlags
}
)
;
return
;
}
maybeRecordAbandonmentTelemetry
(
gBrowser
.
selectedTab
"
reload
"
)
;
SitePermissions
.
clearTemporaryPermissions
(
gBrowser
.
selectedBrowser
)
;
PanelMultiView
.
hidePopup
(
gIdentityHandler
.
_identityPopup
)
;
let
handlingUserInput
=
window
.
windowUtils
.
isHandlingUserInput
;
gBrowser
.
selectedBrowser
.
messageManager
.
sendAsyncMessage
(
"
Browser
:
Reload
"
{
flags
:
reloadFlags
handlingUserInput
}
)
;
}
function
getSecurityInfo
(
securityInfoAsString
)
{
if
(
!
securityInfoAsString
)
return
null
;
const
serhelper
=
Cc
[
"
mozilla
.
org
/
network
/
serialization
-
helper
;
1
"
]
.
getService
(
Ci
.
nsISerializationHelper
)
;
let
securityInfo
=
serhelper
.
deserializeObject
(
securityInfoAsString
)
;
securityInfo
.
QueryInterface
(
Ci
.
nsITransportSecurityInfo
)
;
return
securityInfo
;
}
function
getDetailedCertErrorInfo
(
location
securityInfo
)
{
if
(
!
securityInfo
)
return
"
"
;
let
certErrorDetails
=
location
;
let
code
=
securityInfo
.
errorCode
;
let
errors
=
Cc
[
"
mozilla
.
org
/
nss_errors_service
;
1
"
]
.
getService
(
Ci
.
nsINSSErrorsService
)
;
certErrorDetails
+
=
"
\
r
\
n
\
r
\
n
"
+
errors
.
getErrorMessage
(
errors
.
getXPCOMFromNSSError
(
code
)
)
;
const
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
let
flags
=
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
?
Ci
.
nsISocketProvider
.
NO_PERMANENT_STORAGE
:
0
;
let
uri
=
Services
.
io
.
newURI
(
location
)
;
let
hasHSTS
=
sss
.
isSecureURI
(
sss
.
HEADER_HSTS
uri
flags
)
;
let
hasHPKP
=
sss
.
isSecureURI
(
sss
.
HEADER_HPKP
uri
flags
)
;
certErrorDetails
+
=
"
\
r
\
n
\
r
\
n
"
+
gNavigatorBundle
.
getFormattedString
(
"
certErrorDetailsHSTS
.
label
"
[
hasHSTS
]
)
;
certErrorDetails
+
=
"
\
r
\
n
"
+
gNavigatorBundle
.
getFormattedString
(
"
certErrorDetailsKeyPinning
.
label
"
[
hasHPKP
]
)
;
let
certChain
=
"
"
;
if
(
securityInfo
.
failedCertChain
)
{
for
(
let
cert
of
securityInfo
.
failedCertChain
.
getEnumerator
(
)
)
{
certChain
+
=
getPEMString
(
cert
)
;
}
}
certErrorDetails
+
=
"
\
r
\
n
\
r
\
n
"
+
gNavigatorBundle
.
getString
(
"
certErrorDetailsCertChain
.
label
"
)
+
"
\
r
\
n
\
r
\
n
"
+
certChain
;
return
certErrorDetails
;
}
function
getDERString
(
cert
)
{
var
length
=
{
}
;
var
derArray
=
cert
.
getRawDER
(
length
)
;
var
derString
=
"
"
;
for
(
var
i
=
0
;
i
<
derArray
.
length
;
i
+
+
)
{
derString
+
=
String
.
fromCharCode
(
derArray
[
i
]
)
;
}
return
derString
;
}
function
getPEMString
(
cert
)
{
var
derb64
=
btoa
(
getDERString
(
cert
)
)
;
var
wrapped
=
derb64
.
replace
(
/
(
\
S
{
64
}
(
?
!
)
)
/
g
"
1
\
r
\
n
"
)
;
return
"
-
-
-
-
-
BEGIN
CERTIFICATE
-
-
-
-
-
\
r
\
n
"
+
wrapped
+
"
\
r
\
n
-
-
-
-
-
END
CERTIFICATE
-
-
-
-
-
\
r
\
n
"
;
}
var
PrintPreviewListener
=
{
_printPreviewTab
:
null
_simplifiedPrintPreviewTab
:
null
_tabBeforePrintPreview
:
null
_simplifyPageTab
:
null
_lastRequestedPrintPreviewTab
:
null
_createPPBrowser
(
)
{
let
browser
=
this
.
getSourceBrowser
(
)
;
let
preferredRemoteType
=
browser
.
remoteType
;
return
gBrowser
.
loadOneTab
(
"
about
:
printpreview
"
{
inBackground
:
true
preferredRemoteType
sameProcessAsFrameLoader
:
browser
.
frameLoader
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
}
getPrintPreviewBrowser
(
)
{
if
(
!
this
.
_printPreviewTab
)
{
this
.
_printPreviewTab
=
this
.
_createPPBrowser
(
)
;
}
gBrowser
.
_allowTabChange
=
true
;
this
.
_lastRequestedPrintPreviewTab
=
gBrowser
.
selectedTab
=
this
.
_printPreviewTab
;
gBrowser
.
_allowTabChange
=
false
;
return
gBrowser
.
getBrowserForTab
(
this
.
_printPreviewTab
)
;
}
getSimplifiedPrintPreviewBrowser
(
)
{
if
(
!
this
.
_simplifiedPrintPreviewTab
)
{
this
.
_simplifiedPrintPreviewTab
=
this
.
_createPPBrowser
(
)
;
}
gBrowser
.
_allowTabChange
=
true
;
this
.
_lastRequestedPrintPreviewTab
=
gBrowser
.
selectedTab
=
this
.
_simplifiedPrintPreviewTab
;
gBrowser
.
_allowTabChange
=
false
;
return
gBrowser
.
getBrowserForTab
(
this
.
_simplifiedPrintPreviewTab
)
;
}
createSimplifiedBrowser
(
)
{
let
browser
=
this
.
getSourceBrowser
(
)
;
this
.
_simplifyPageTab
=
gBrowser
.
loadOneTab
(
"
about
:
printpreview
"
{
inBackground
:
true
sameProcessAsFrameLoader
:
browser
.
frameLoader
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
return
this
.
getSimplifiedSourceBrowser
(
)
;
}
getSourceBrowser
(
)
{
if
(
!
this
.
_tabBeforePrintPreview
)
{
this
.
_tabBeforePrintPreview
=
gBrowser
.
selectedTab
;
}
return
this
.
_tabBeforePrintPreview
.
linkedBrowser
;
}
getSimplifiedSourceBrowser
(
)
{
return
this
.
_simplifyPageTab
?
gBrowser
.
getBrowserForTab
(
this
.
_simplifyPageTab
)
:
null
;
}
getNavToolbox
(
)
{
return
gNavToolbox
;
}
onEnter
(
)
{
if
(
gBrowser
.
selectedTab
!
=
this
.
_lastRequestedPrintPreviewTab
)
{
gBrowser
.
selectedTab
=
this
.
_lastRequestedPrintPreviewTab
;
}
gInPrintPreviewMode
=
true
;
this
.
_toggleAffectedChrome
(
)
;
}
onExit
(
)
{
gBrowser
.
_allowTabChange
=
true
;
gBrowser
.
selectedTab
=
this
.
_tabBeforePrintPreview
;
gBrowser
.
_allowTabChange
=
false
;
this
.
_tabBeforePrintPreview
=
null
;
gInPrintPreviewMode
=
false
;
this
.
_toggleAffectedChrome
(
)
;
let
tabsToRemove
=
[
"
_simplifyPageTab
"
"
_printPreviewTab
"
"
_simplifiedPrintPreviewTab
"
]
;
for
(
let
tabProp
of
tabsToRemove
)
{
if
(
this
[
tabProp
]
)
{
gBrowser
.
removeTab
(
this
[
tabProp
]
)
;
this
[
tabProp
]
=
null
;
}
}
gBrowser
.
deactivatePrintPreviewBrowsers
(
)
;
this
.
_lastRequestedPrintPreviewTab
=
null
;
}
_toggleAffectedChrome
(
)
{
gNavToolbox
.
collapsed
=
gInPrintPreviewMode
;
if
(
gInPrintPreviewMode
)
this
.
_hideChrome
(
)
;
else
this
.
_showChrome
(
)
;
TabsInTitlebar
.
allowedBy
(
"
print
-
preview
"
!
gInPrintPreviewMode
)
;
}
_hideChrome
(
)
{
this
.
_chromeState
=
{
}
;
this
.
_chromeState
.
sidebarOpen
=
SidebarUI
.
isOpen
;
this
.
_sidebarCommand
=
SidebarUI
.
currentID
;
SidebarUI
.
hide
(
)
;
var
notificationBox
=
gBrowser
.
getNotificationBox
(
)
;
this
.
_chromeState
.
notificationsOpen
=
!
notificationBox
.
notificationsHidden
;
notificationBox
.
notificationsHidden
=
true
;
this
.
_chromeState
.
findOpen
=
gFindBarInitialized
&
&
!
gFindBar
.
hidden
;
if
(
gFindBarInitialized
)
gFindBar
.
close
(
)
;
var
globalNotificationBox
=
document
.
getElementById
(
"
global
-
notificationbox
"
)
;
this
.
_chromeState
.
globalNotificationsOpen
=
!
globalNotificationBox
.
notificationsHidden
;
globalNotificationBox
.
notificationsHidden
=
true
;
this
.
_chromeState
.
syncNotificationsOpen
=
false
;
var
syncNotifications
=
document
.
getElementById
(
"
sync
-
notifications
"
)
;
if
(
syncNotifications
)
{
this
.
_chromeState
.
syncNotificationsOpen
=
!
syncNotifications
.
notificationsHidden
;
syncNotifications
.
notificationsHidden
=
true
;
}
}
_showChrome
(
)
{
if
(
this
.
_chromeState
.
notificationsOpen
)
gBrowser
.
getNotificationBox
(
)
.
notificationsHidden
=
false
;
if
(
this
.
_chromeState
.
findOpen
)
gLazyFindCommand
(
"
open
"
)
;
if
(
this
.
_chromeState
.
globalNotificationsOpen
)
document
.
getElementById
(
"
global
-
notificationbox
"
)
.
notificationsHidden
=
false
;
if
(
this
.
_chromeState
.
syncNotificationsOpen
)
document
.
getElementById
(
"
sync
-
notifications
"
)
.
notificationsHidden
=
false
;
if
(
this
.
_chromeState
.
sidebarOpen
)
SidebarUI
.
show
(
this
.
_sidebarCommand
)
;
}
activateBrowser
(
browser
)
{
gBrowser
.
activateBrowserForPrintPreview
(
browser
)
;
}
}
;
var
browserDragAndDrop
=
{
canDropLink
:
aEvent
=
>
Services
.
droppedLinkHandler
.
canDropLink
(
aEvent
true
)
dragOver
(
aEvent
)
{
if
(
this
.
canDropLink
(
aEvent
)
)
{
aEvent
.
preventDefault
(
)
;
}
}
getTriggeringPrincipal
(
aEvent
)
{
return
Services
.
droppedLinkHandler
.
getTriggeringPrincipal
(
aEvent
)
;
}
validateURIsForDrop
(
aEvent
aURIsCount
aURIs
)
{
return
Services
.
droppedLinkHandler
.
validateURIsForDrop
(
aEvent
aURIsCount
aURIs
)
;
}
dropLinks
(
aEvent
aDisallowInherit
)
{
return
Services
.
droppedLinkHandler
.
dropLinks
(
aEvent
aDisallowInherit
)
;
}
}
;
var
homeButtonObserver
=
{
onDrop
(
aEvent
)
{
let
links
=
browserDragAndDrop
.
dropLinks
(
aEvent
true
)
;
if
(
links
.
length
)
{
let
urls
=
[
]
;
for
(
let
link
of
links
)
{
if
(
link
.
url
.
includes
(
"
|
"
)
)
{
urls
.
push
(
.
.
.
link
.
url
.
split
(
"
|
"
)
)
;
}
else
{
urls
.
push
(
link
.
url
)
;
}
}
try
{
browserDragAndDrop
.
validateURIsForDrop
(
aEvent
urls
.
length
urls
)
;
}
catch
(
e
)
{
return
;
}
setTimeout
(
openHomeDialog
0
urls
.
join
(
"
|
"
)
)
;
}
}
onDragOver
(
aEvent
)
{
if
(
Services
.
prefs
.
prefIsLocked
(
"
browser
.
startup
.
homepage
"
)
)
{
return
;
}
browserDragAndDrop
.
dragOver
(
aEvent
)
;
aEvent
.
dropEffect
=
"
link
"
;
}
onDragExit
(
aEvent
)
{
}
}
;
function
openHomeDialog
(
aURL
)
{
var
promptTitle
=
gNavigatorBundle
.
getString
(
"
droponhometitle
"
)
;
var
promptMsg
;
if
(
aURL
.
includes
(
"
|
"
)
)
{
promptMsg
=
gNavigatorBundle
.
getString
(
"
droponhomemsgMultiple
"
)
;
}
else
{
promptMsg
=
gNavigatorBundle
.
getString
(
"
droponhomemsg
"
)
;
}
var
pressedVal
=
Services
.
prompt
.
confirmEx
(
window
promptTitle
promptMsg
Services
.
prompt
.
STD_YES_NO_BUTTONS
null
null
null
null
{
value
:
0
}
)
;
if
(
pressedVal
=
=
0
)
{
try
{
HomePage
.
set
(
aURL
)
;
}
catch
(
ex
)
{
dump
(
"
Failed
to
set
the
home
page
.
\
n
"
+
ex
+
"
\
n
"
)
;
}
}
}
var
newTabButtonObserver
=
{
onDragOver
(
aEvent
)
{
browserDragAndDrop
.
dragOver
(
aEvent
)
;
}
onDragExit
(
aEvent
)
{
}
async
onDrop
(
aEvent
)
{
let
shiftKey
=
aEvent
.
shiftKey
;
let
links
=
browserDragAndDrop
.
dropLinks
(
aEvent
)
;
let
triggeringPrincipal
=
browserDragAndDrop
.
getTriggeringPrincipal
(
aEvent
)
;
if
(
links
.
length
>
=
Services
.
prefs
.
getIntPref
(
"
browser
.
tabs
.
maxOpenBeforeWarn
"
)
)
{
let
answer
=
await
OpenInTabsUtils
.
promiseConfirmOpenInTabs
(
links
.
length
window
)
;
if
(
!
answer
)
{
return
;
}
}
for
(
let
link
of
links
)
{
if
(
link
.
url
)
{
let
data
=
await
getShortcutOrURIAndPostData
(
link
.
url
)
;
openNewTabWith
(
data
.
url
shiftKey
{
allowInheritPrincipal
:
true
postData
:
data
.
postData
allowThirdPartyFixup
:
true
triggeringPrincipal
}
)
;
}
}
}
}
;
var
newWindowButtonObserver
=
{
onDragOver
(
aEvent
)
{
browserDragAndDrop
.
dragOver
(
aEvent
)
;
}
onDragExit
(
aEvent
)
{
}
async
onDrop
(
aEvent
)
{
let
links
=
browserDragAndDrop
.
dropLinks
(
aEvent
)
;
let
triggeringPrincipal
=
browserDragAndDrop
.
getTriggeringPrincipal
(
aEvent
)
;
if
(
links
.
length
>
=
Services
.
prefs
.
getIntPref
(
"
browser
.
tabs
.
maxOpenBeforeWarn
"
)
)
{
let
answer
=
await
OpenInTabsUtils
.
promiseConfirmOpenInTabs
(
links
.
length
window
)
;
if
(
!
answer
)
{
return
;
}
}
for
(
let
link
of
links
)
{
if
(
link
.
url
)
{
let
data
=
await
getShortcutOrURIAndPostData
(
link
.
url
)
;
openNewWindowWith
(
data
.
url
{
allowInheritPrincipal
:
true
postData
:
data
.
postData
allowThirdPartyFixup
:
true
triggeringPrincipal
}
)
;
}
}
}
}
;
const
DOMEventHandler
=
{
init
(
)
{
let
mm
=
window
.
messageManager
;
mm
.
addMessageListener
(
"
Link
:
AddFeed
"
this
)
;
mm
.
addMessageListener
(
"
Link
:
LoadingIcon
"
this
)
;
mm
.
addMessageListener
(
"
Link
:
SetIcon
"
this
)
;
mm
.
addMessageListener
(
"
Link
:
SetFailedIcon
"
this
)
;
mm
.
addMessageListener
(
"
Link
:
AddSearch
"
this
)
;
mm
.
addMessageListener
(
"
Meta
:
SetPageInfo
"
this
)
;
}
receiveMessage
(
aMsg
)
{
switch
(
aMsg
.
name
)
{
case
"
Link
:
AddFeed
"
:
let
link
=
{
type
:
aMsg
.
data
.
type
href
:
aMsg
.
data
.
href
title
:
aMsg
.
data
.
title
}
;
FeedHandler
.
addFeed
(
link
aMsg
.
target
)
;
break
;
case
"
Link
:
LoadingIcon
"
:
if
(
aMsg
.
data
.
canUseForTab
)
{
this
.
setPendingIcon
(
aMsg
.
target
)
;
}
break
;
case
"
Link
:
SetIcon
"
:
this
.
setIconFromLink
(
aMsg
.
target
aMsg
.
data
.
originalURL
aMsg
.
data
.
canUseForTab
aMsg
.
data
.
expiration
aMsg
.
data
.
iconURL
)
;
break
;
case
"
Link
:
SetFailedIcon
"
:
if
(
aMsg
.
data
.
canUseForTab
)
{
this
.
clearPendingIcon
(
aMsg
.
target
)
;
}
break
;
case
"
Link
:
AddSearch
"
:
this
.
addSearch
(
aMsg
.
target
aMsg
.
data
.
engine
aMsg
.
data
.
url
)
;
break
;
case
"
Meta
:
SetPageInfo
"
:
this
.
setPageInfo
(
aMsg
.
data
)
;
break
;
}
}
setPageInfo
(
aData
)
{
const
{
url
description
previewImageURL
}
=
aData
;
gBrowser
.
setPageInfo
(
url
description
previewImageURL
)
;
return
true
;
}
setPendingIcon
(
aBrowser
)
{
let
tab
=
gBrowser
.
getTabForBrowser
(
aBrowser
)
;
if
(
tab
.
hasAttribute
(
"
busy
"
)
)
{
tab
.
setAttribute
(
"
pendingicon
"
"
true
"
)
;
}
}
clearPendingIcon
(
aBrowser
)
{
let
tab
=
gBrowser
.
getTabForBrowser
(
aBrowser
)
;
tab
.
removeAttribute
(
"
pendingicon
"
)
;
}
setIconFromLink
(
aBrowser
aOriginalURL
aCanUseForTab
aExpiration
aIconURL
)
{
let
tab
=
gBrowser
.
getTabForBrowser
(
aBrowser
)
;
if
(
!
tab
)
return
false
;
try
{
PlacesUIUtils
.
loadFavicon
(
aBrowser
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
makeURI
(
aOriginalURL
)
aExpiration
makeURI
(
aIconURL
)
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
if
(
aCanUseForTab
)
{
this
.
clearPendingIcon
(
aBrowser
)
;
gBrowser
.
setIcon
(
tab
aIconURL
aOriginalURL
)
;
}
return
true
;
}
addSearch
(
aBrowser
aEngine
aURL
)
{
let
tab
=
gBrowser
.
getTabForBrowser
(
aBrowser
)
;
if
(
!
tab
)
return
;
BrowserSearch
.
addEngine
(
aBrowser
aEngine
makeURI
(
aURL
)
)
;
}
}
;
const
BrowserSearch
=
{
_searchInitComplete
:
false
init
(
)
{
Services
.
obs
.
addObserver
(
this
"
browser
-
search
-
engine
-
modified
"
)
;
}
delayedStartupInit
(
)
{
Services
.
search
.
init
(
rv
=
>
{
if
(
Components
.
isSuccessCode
(
rv
)
)
{
this
.
_updateURLBarPlaceholder
(
Services
.
search
.
currentEngine
true
)
;
this
.
_searchInitComplete
=
true
;
}
}
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
"
browser
-
search
-
engine
-
modified
"
)
;
}
observe
(
engine
topic
data
)
{
let
engineName
=
engine
.
wrappedJSObject
.
name
;
switch
(
data
)
{
case
"
engine
-
removed
"
:
this
.
_addMaybeOfferedEngine
(
engineName
)
;
break
;
case
"
engine
-
added
"
:
this
.
_removeMaybeOfferedEngine
(
engineName
)
;
break
;
case
"
engine
-
current
"
:
if
(
this
.
_searchInitComplete
)
{
this
.
_updateURLBarPlaceholder
(
engine
)
;
}
break
;
}
}
_addMaybeOfferedEngine
(
engineName
)
{
let
selectedBrowserOffersEngine
=
false
;
for
(
let
browser
of
gBrowser
.
browsers
)
{
for
(
let
i
=
0
;
i
<
(
browser
.
hiddenEngines
|
|
[
]
)
.
length
;
i
+
+
)
{
if
(
browser
.
hiddenEngines
[
i
]
.
title
=
=
engineName
)
{
if
(
!
browser
.
engines
)
{
browser
.
engines
=
[
]
;
}
browser
.
engines
.
push
(
browser
.
hiddenEngines
[
i
]
)
;
browser
.
hiddenEngines
.
splice
(
i
1
)
;
if
(
browser
=
=
gBrowser
.
selectedBrowser
)
{
selectedBrowserOffersEngine
=
true
;
}
break
;
}
}
}
if
(
selectedBrowserOffersEngine
)
{
this
.
updateOpenSearchBadge
(
)
;
}
}
_removeMaybeOfferedEngine
(
engineName
)
{
let
selectedBrowserOffersEngine
=
false
;
for
(
let
browser
of
gBrowser
.
browsers
)
{
for
(
let
i
=
0
;
i
<
(
browser
.
engines
|
|
[
]
)
.
length
;
i
+
+
)
{
if
(
browser
.
engines
[
i
]
.
title
=
=
engineName
)
{
if
(
!
browser
.
hiddenEngines
)
{
browser
.
hiddenEngines
=
[
]
;
}
browser
.
hiddenEngines
.
push
(
browser
.
engines
[
i
]
)
;
browser
.
engines
.
splice
(
i
1
)
;
if
(
browser
=
=
gBrowser
.
selectedBrowser
)
{
selectedBrowserOffersEngine
=
true
;
}
break
;
}
}
}
if
(
selectedBrowserOffersEngine
)
{
this
.
updateOpenSearchBadge
(
)
;
}
}
initPlaceHolder
(
)
{
let
engineName
=
Services
.
prefs
.
getStringPref
(
"
browser
.
urlbar
.
placeholderName
"
"
"
)
;
if
(
engineName
)
{
this
.
_setURLBarPlaceholder
(
engineName
)
;
}
}
_updateURLBarPlaceholder
(
engine
delayUpdate
=
false
)
{
if
(
!
engine
)
{
throw
new
Error
(
"
Expected
an
engine
to
be
specified
"
)
;
}
let
engineName
=
"
"
;
if
(
Services
.
search
.
getDefaultEngines
(
)
.
includes
(
engine
)
)
{
engineName
=
engine
.
name
;
Services
.
prefs
.
setStringPref
(
"
browser
.
urlbar
.
placeholderName
"
engineName
)
;
}
else
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
urlbar
.
placeholderName
"
)
;
}
if
(
delayUpdate
&
&
!
gURLBar
.
value
)
{
let
placeholderUpdateListener
=
(
)
=
>
{
if
(
gURLBar
.
value
)
{
this
.
_setURLBarPlaceholder
(
engineName
)
;
gURLBar
.
removeEventListener
(
"
input
"
placeholderUpdateListener
)
;
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabSelect
"
placeholderUpdateListener
)
;
}
}
;
gURLBar
.
addEventListener
(
"
input
"
placeholderUpdateListener
)
;
gBrowser
.
tabContainer
.
addEventListener
(
"
TabSelect
"
placeholderUpdateListener
)
;
}
else
{
this
.
_setURLBarPlaceholder
(
engineName
)
;
}
}
_setURLBarPlaceholder
(
name
)
{
let
placeholder
;
if
(
name
)
{
placeholder
=
gBrowserBundle
.
formatStringFromName
(
"
urlbar
.
placeholder
"
[
name
]
1
)
;
}
else
{
placeholder
=
gURLBar
.
getAttribute
(
"
defaultPlaceholder
"
)
;
}
gURLBar
.
setAttribute
(
"
placeholder
"
placeholder
)
;
}
addEngine
(
browser
engine
uri
)
{
if
(
browser
.
engines
)
{
if
(
browser
.
engines
.
some
(
e
=
>
e
.
title
=
=
engine
.
title
)
)
return
;
}
var
hidden
=
false
;
if
(
Services
.
search
.
getEngineByName
(
engine
.
title
)
)
hidden
=
true
;
var
engines
=
(
hidden
?
browser
.
hiddenEngines
:
browser
.
engines
)
|
|
[
]
;
engines
.
push
(
{
uri
:
engine
.
href
title
:
engine
.
title
get
icon
(
)
{
return
browser
.
mIconURL
;
}
}
)
;
if
(
hidden
)
browser
.
hiddenEngines
=
engines
;
else
{
browser
.
engines
=
engines
;
if
(
browser
=
=
gBrowser
.
selectedBrowser
)
this
.
updateOpenSearchBadge
(
)
;
}
}
updateOpenSearchBadge
(
)
{
BrowserPageActions
.
addSearchEngine
.
updateEngines
(
)
;
var
searchBar
=
this
.
searchBar
;
if
(
!
searchBar
)
return
;
var
engines
=
gBrowser
.
selectedBrowser
.
engines
;
if
(
engines
&
&
engines
.
length
>
0
)
searchBar
.
setAttribute
(
"
addengines
"
"
true
"
)
;
else
searchBar
.
removeAttribute
(
"
addengines
"
)
;
}
webSearch
:
function
BrowserSearch_webSearch
(
)
{
if
(
window
.
location
.
href
!
=
AppConstants
.
BROWSER_CHROME_URL
)
{
var
win
=
getTopWin
(
)
;
if
(
win
)
{
win
.
focus
(
)
;
win
.
BrowserSearch
.
webSearch
(
)
;
}
else
{
var
observer
=
function
(
subject
topic
data
)
{
if
(
subject
=
=
win
)
{
BrowserSearch
.
webSearch
(
)
;
Services
.
obs
.
removeObserver
(
observer
"
browser
-
delayed
-
startup
-
finished
"
)
;
}
}
;
win
=
window
.
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
"
chrome
all
dialog
=
no
"
"
about
:
blank
"
)
;
Services
.
obs
.
addObserver
(
observer
"
browser
-
delayed
-
startup
-
finished
"
)
;
}
return
;
}
let
focusUrlBarIfSearchFieldIsNotActive
=
function
(
aSearchBar
)
{
if
(
!
aSearchBar
|
|
document
.
activeElement
!
=
aSearchBar
.
textbox
.
inputField
)
{
focusAndSelectUrlBar
(
true
)
;
}
}
;
let
searchBar
=
this
.
searchBar
;
let
placement
=
CustomizableUI
.
getPlacementOfWidget
(
"
search
-
container
"
)
;
let
focusSearchBar
=
(
)
=
>
{
searchBar
=
this
.
searchBar
;
searchBar
.
select
(
)
;
focusUrlBarIfSearchFieldIsNotActive
(
searchBar
)
;
}
;
if
(
placement
&
&
searchBar
&
&
(
(
searchBar
.
parentNode
.
getAttribute
(
"
overflowedItem
"
)
=
=
"
true
"
&
&
placement
.
area
=
=
CustomizableUI
.
AREA_NAVBAR
)
|
|
placement
.
area
=
=
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
)
)
{
let
navBar
=
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
navBar
.
overflowable
.
show
(
)
.
then
(
focusSearchBar
)
;
return
;
}
if
(
searchBar
)
{
if
(
window
.
fullScreen
)
FullScreen
.
showNavToolbox
(
)
;
searchBar
.
select
(
)
;
}
focusUrlBarIfSearchFieldIsNotActive
(
searchBar
)
;
}
_loadSearch
(
searchText
useNewTab
purpose
triggeringPrincipal
)
{
let
engine
;
if
(
!
triggeringPrincipal
)
{
throw
new
Error
(
"
Required
argument
triggeringPrincipal
missing
within
_loadSearch
"
)
;
}
if
(
isElementVisible
(
this
.
searchBar
)
)
engine
=
Services
.
search
.
currentEngine
;
else
engine
=
Services
.
search
.
defaultEngine
;
let
submission
=
engine
.
getSubmission
(
searchText
null
purpose
)
;
if
(
!
submission
)
{
return
null
;
}
let
inBackground
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
search
.
context
.
loadInBackground
"
)
;
openLinkIn
(
submission
.
uri
.
spec
useNewTab
?
"
tab
"
:
"
current
"
{
postData
:
submission
.
postData
inBackground
relatedToCurrent
:
true
triggeringPrincipal
}
)
;
return
engine
;
}
loadSearchFromContext
(
terms
triggeringPrincipal
)
{
let
engine
=
BrowserSearch
.
_loadSearch
(
terms
true
"
contextmenu
"
triggeringPrincipal
)
;
if
(
engine
)
{
BrowserSearch
.
recordSearchInTelemetry
(
engine
"
contextmenu
"
)
;
}
}
pasteAndSearch
(
event
)
{
BrowserSearch
.
searchBar
.
select
(
)
;
goDoCommand
(
"
cmd_paste
"
)
;
BrowserSearch
.
searchBar
.
handleSearchCommand
(
event
)
;
}
get
searchBar
(
)
{
return
document
.
getElementById
(
"
searchbar
"
)
;
}
get
searchEnginesURL
(
)
{
return
formatURL
(
"
browser
.
search
.
searchEnginesURL
"
true
)
;
}
loadAddEngines
:
function
BrowserSearch_loadAddEngines
(
)
{
var
newWindowPref
=
Services
.
prefs
.
getIntPref
(
"
browser
.
link
.
open_newwindow
"
)
;
var
where
=
newWindowPref
=
=
3
?
"
tab
"
:
"
window
"
;
openTrustedLinkIn
(
this
.
searchEnginesURL
where
)
;
}
recordSearchInTelemetry
(
engine
source
details
=
{
}
)
{
try
{
BrowserUsageTelemetry
.
recordSearch
(
engine
source
details
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
recordOneoffSearchInTelemetry
(
engine
source
type
where
)
{
try
{
const
details
=
{
type
isOneOff
:
true
}
;
BrowserUsageTelemetry
.
recordSearch
(
engine
source
details
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
}
;
XPCOMUtils
.
defineConstant
(
this
"
BrowserSearch
"
BrowserSearch
)
;
function
FillHistoryMenu
(
aParent
)
{
if
(
!
aParent
.
hasStatusListener
)
{
aParent
.
addEventListener
(
"
DOMMenuItemActive
"
function
(
aEvent
)
{
if
(
!
aEvent
.
target
.
hasAttribute
(
"
checked
"
)
)
XULBrowserWindow
.
setOverLink
(
aEvent
.
target
.
getAttribute
(
"
uri
"
)
)
;
}
)
;
aParent
.
addEventListener
(
"
DOMMenuItemInactive
"
function
(
)
{
XULBrowserWindow
.
setOverLink
(
"
"
)
;
}
)
;
aParent
.
hasStatusListener
=
true
;
}
let
children
=
aParent
.
children
;
for
(
var
i
=
children
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
if
(
children
[
i
]
.
hasAttribute
(
"
index
"
)
)
aParent
.
removeChild
(
children
[
i
]
)
;
}
const
MAX_HISTORY_MENU_ITEMS
=
15
;
const
tooltipBack
=
gNavigatorBundle
.
getString
(
"
tabHistory
.
goBack
"
)
;
const
tooltipCurrent
=
gNavigatorBundle
.
getString
(
"
tabHistory
.
current
"
)
;
const
tooltipForward
=
gNavigatorBundle
.
getString
(
"
tabHistory
.
goForward
"
)
;
function
updateSessionHistory
(
sessionHistory
initial
)
{
let
count
=
sessionHistory
.
entries
.
length
;
if
(
!
initial
)
{
if
(
count
<
=
1
)
{
aParent
.
hidePopup
(
)
;
return
;
}
else
if
(
aParent
.
id
!
=
"
backForwardMenu
"
&
&
!
aParent
.
parentNode
.
open
)
{
aParent
.
parentNode
.
open
=
true
;
return
;
}
}
let
index
=
sessionHistory
.
index
;
let
half_length
=
Math
.
floor
(
MAX_HISTORY_MENU_ITEMS
/
2
)
;
let
start
=
Math
.
max
(
index
-
half_length
0
)
;
let
end
=
Math
.
min
(
start
=
=
0
?
MAX_HISTORY_MENU_ITEMS
:
index
+
half_length
+
1
count
)
;
if
(
end
=
=
count
)
{
start
=
Math
.
max
(
count
-
MAX_HISTORY_MENU_ITEMS
0
)
;
}
let
existingIndex
=
0
;
for
(
let
j
=
end
-
1
;
j
>
=
start
;
j
-
-
)
{
let
entry
=
sessionHistory
.
entries
[
j
]
;
let
uri
=
entry
.
url
;
let
item
=
existingIndex
<
children
.
length
?
children
[
existingIndex
]
:
document
.
createXULElement
(
"
menuitem
"
)
;
item
.
setAttribute
(
"
uri
"
uri
)
;
item
.
setAttribute
(
"
label
"
entry
.
title
|
|
uri
)
;
item
.
setAttribute
(
"
index
"
j
)
;
item
.
setAttribute
(
"
historyindex
"
j
-
index
)
;
if
(
j
!
=
index
)
{
item
.
style
.
listStyleImage
=
url
(
page
-
icon
:
{
uri
}
)
;
}
if
(
j
<
index
)
{
item
.
className
=
"
unified
-
nav
-
back
menuitem
-
iconic
menuitem
-
with
-
favicon
"
;
item
.
setAttribute
(
"
tooltiptext
"
tooltipBack
)
;
}
else
if
(
j
=
=
index
)
{
item
.
setAttribute
(
"
type
"
"
radio
"
)
;
item
.
setAttribute
(
"
checked
"
"
true
"
)
;
item
.
className
=
"
unified
-
nav
-
current
"
;
item
.
setAttribute
(
"
tooltiptext
"
tooltipCurrent
)
;
}
else
{
item
.
className
=
"
unified
-
nav
-
forward
menuitem
-
iconic
menuitem
-
with
-
favicon
"
;
item
.
setAttribute
(
"
tooltiptext
"
tooltipForward
)
;
}
if
(
!
item
.
parentNode
)
{
aParent
.
appendChild
(
item
)
;
}
existingIndex
+
+
;
}
if
(
!
initial
)
{
let
existingLength
=
children
.
length
;
while
(
existingIndex
<
existingLength
)
{
aParent
.
removeChild
(
aParent
.
lastElementChild
)
;
existingIndex
+
+
;
}
}
}
let
sessionHistory
=
SessionStore
.
getSessionHistory
(
gBrowser
.
selectedTab
updateSessionHistory
)
;
if
(
!
sessionHistory
)
return
false
;
if
(
sessionHistory
.
entries
.
length
<
=
1
)
return
false
;
updateSessionHistory
(
sessionHistory
true
)
;
return
true
;
}
function
addToUrlbarHistory
(
aUrlToAdd
)
{
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
&
&
aUrlToAdd
&
&
!
aUrlToAdd
.
includes
(
"
"
)
&
&
!
/
[
\
x00
-
\
x1F
]
/
.
test
(
aUrlToAdd
)
)
PlacesUIUtils
.
markPageAsTyped
(
aUrlToAdd
)
;
}
function
BrowserDownloadsUI
(
)
{
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
openTrustedLinkIn
(
"
about
:
downloads
"
"
tab
"
)
;
}
else
{
PlacesCommandHook
.
showPlacesOrganizer
(
"
Downloads
"
)
;
}
}
function
toOpenWindowByType
(
inType
uri
features
)
{
var
topWindow
=
Services
.
wm
.
getMostRecentWindow
(
inType
)
;
if
(
topWindow
)
topWindow
.
focus
(
)
;
else
if
(
features
)
window
.
open
(
uri
"
_blank
"
features
)
;
else
window
.
open
(
uri
"
_blank
"
"
chrome
extrachrome
menubar
resizable
scrollbars
status
toolbar
"
)
;
}
function
OpenBrowserWindow
(
options
)
{
var
telemetryObj
=
{
}
;
TelemetryStopwatch
.
start
(
"
FX_NEW_WINDOW_MS
"
telemetryObj
)
;
var
handler
=
Cc
[
"
mozilla
.
org
/
browser
/
clh
;
1
"
]
.
getService
(
Ci
.
nsIBrowserHandler
)
;
var
defaultArgs
=
handler
.
defaultArgs
;
var
wintype
=
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
;
var
extraFeatures
=
"
"
;
if
(
options
&
&
options
.
private
&
&
PrivateBrowsingUtils
.
enabled
)
{
extraFeatures
=
"
private
"
;
if
(
!
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
{
defaultArgs
=
"
about
:
privatebrowsing
"
;
}
}
else
{
extraFeatures
=
"
non
-
private
"
;
}
if
(
options
&
&
options
.
remote
)
{
extraFeatures
+
=
"
remote
"
;
}
else
if
(
options
&
&
options
.
remote
=
=
=
false
)
{
extraFeatures
+
=
"
non
-
remote
"
;
}
if
(
window
.
windowState
=
=
window
.
STATE_MAXIMIZED
)
{
extraFeatures
+
=
"
suppressanimation
"
;
}
var
win
;
if
(
window
&
&
(
wintype
=
=
"
navigator
:
browser
"
)
&
&
window
.
content
&
&
window
.
content
.
document
)
{
var
DocCharset
=
window
.
content
.
document
.
characterSet
;
let
charsetArg
=
"
charset
=
"
+
DocCharset
;
win
=
window
.
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
"
chrome
all
dialog
=
no
"
+
extraFeatures
defaultArgs
charsetArg
)
;
}
else
{
win
=
window
.
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
"
chrome
all
dialog
=
no
"
+
extraFeatures
defaultArgs
)
;
}
win
.
addEventListener
(
"
MozAfterPaint
"
(
)
=
>
{
TelemetryStopwatch
.
finish
(
"
FX_NEW_WINDOW_MS
"
telemetryObj
)
;
if
(
Services
.
prefs
.
getIntPref
(
"
browser
.
startup
.
page
"
)
=
=
1
&
&
defaultArgs
=
=
HomePage
.
get
(
)
)
{
Services
.
obs
.
notifyObservers
(
win
"
browser
-
open
-
homepage
-
start
"
)
;
}
}
{
once
:
true
}
)
;
return
win
;
}
function
updateEditUIVisibility
(
)
{
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
return
;
let
editMenuPopupState
=
document
.
getElementById
(
"
menu_EditPopup
"
)
.
state
;
let
contextMenuPopupState
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
.
state
;
let
placesContextMenuPopupState
=
document
.
getElementById
(
"
placesContext
"
)
.
state
;
let
oldVisible
=
gEditUIVisible
;
gEditUIVisible
=
editMenuPopupState
=
=
"
showing
"
|
|
editMenuPopupState
=
=
"
open
"
|
|
contextMenuPopupState
=
=
"
showing
"
|
|
contextMenuPopupState
=
=
"
open
"
|
|
placesContextMenuPopupState
=
=
"
showing
"
|
|
placesContextMenuPopupState
=
=
"
open
"
;
const
kOpenPopupStates
=
[
"
showing
"
"
open
"
]
;
if
(
!
gEditUIVisible
)
{
let
placement
=
CustomizableUI
.
getPlacementOfWidget
(
"
edit
-
controls
"
)
;
let
areaType
=
placement
?
CustomizableUI
.
getAreaType
(
placement
.
area
)
:
"
"
;
if
(
areaType
=
=
CustomizableUI
.
TYPE_MENU_PANEL
)
{
let
customizablePanel
=
PanelUI
.
overflowPanel
;
gEditUIVisible
=
kOpenPopupStates
.
includes
(
customizablePanel
.
state
)
;
}
else
if
(
areaType
=
=
CustomizableUI
.
TYPE_TOOLBAR
&
&
window
.
toolbar
.
visible
)
{
if
(
placement
.
area
=
=
"
nav
-
bar
"
)
{
let
editControls
=
document
.
getElementById
(
"
edit
-
controls
"
)
;
gEditUIVisible
=
!
editControls
.
hasAttribute
(
"
overflowedItem
"
)
|
|
kOpenPopupStates
.
includes
(
document
.
getElementById
(
"
widget
-
overflow
"
)
.
state
)
;
}
else
{
gEditUIVisible
=
true
;
}
}
}
if
(
!
gEditUIVisible
)
{
gEditUIVisible
=
kOpenPopupStates
.
includes
(
PanelUI
.
panel
.
state
)
;
}
if
(
gEditUIVisible
=
=
oldVisible
)
{
return
;
}
if
(
gEditUIVisible
)
{
goUpdateGlobalEditMenuItems
(
)
;
}
else
{
goSetCommandEnabled
(
"
cmd_undo
"
true
)
;
goSetCommandEnabled
(
"
cmd_redo
"
true
)
;
goSetCommandEnabled
(
"
cmd_cut
"
true
)
;
goSetCommandEnabled
(
"
cmd_copy
"
true
)
;
goSetCommandEnabled
(
"
cmd_paste
"
true
)
;
goSetCommandEnabled
(
"
cmd_selectAll
"
true
)
;
goSetCommandEnabled
(
"
cmd_delete
"
true
)
;
goSetCommandEnabled
(
"
cmd_switchTextDirection
"
true
)
;
}
}
function
openNewUserContextTab
(
event
)
{
openTrustedLinkIn
(
BROWSER_NEW_TAB_URL
"
tab
"
{
userContextId
:
parseInt
(
event
.
target
.
getAttribute
(
"
data
-
usercontextid
"
)
)
}
)
;
}
function
updateFileMenuUserContextUIVisibility
(
id
)
{
let
menu
=
document
.
getElementById
(
id
)
;
menu
.
hidden
=
!
Services
.
prefs
.
getBoolPref
(
"
privacy
.
userContext
.
enabled
"
false
)
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
menu
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
function
updateUserContextUIIndicator
(
)
{
let
hbox
=
document
.
getElementById
(
"
userContext
-
icons
"
)
;
let
userContextId
=
gBrowser
.
selectedBrowser
.
getAttribute
(
"
usercontextid
"
)
;
if
(
!
userContextId
)
{
hbox
.
setAttribute
(
"
data
-
identity
-
color
"
"
"
)
;
hbox
.
hidden
=
true
;
return
;
}
let
identity
=
ContextualIdentityService
.
getPublicIdentityFromId
(
userContextId
)
;
if
(
!
identity
)
{
hbox
.
setAttribute
(
"
data
-
identity
-
color
"
"
"
)
;
hbox
.
hidden
=
true
;
return
;
}
hbox
.
setAttribute
(
"
data
-
identity
-
color
"
identity
.
color
)
;
let
label
=
document
.
getElementById
(
"
userContext
-
label
"
)
;
label
.
setAttribute
(
"
value
"
ContextualIdentityService
.
getUserContextLabel
(
userContextId
)
)
;
let
indicator
=
document
.
getElementById
(
"
userContext
-
indicator
"
)
;
indicator
.
setAttribute
(
"
data
-
identity
-
icon
"
identity
.
icon
)
;
hbox
.
hidden
=
false
;
}
function
updateCharacterEncodingMenuState
(
)
{
let
charsetMenu
=
document
.
getElementById
(
"
charsetMenu
"
)
;
if
(
gBrowser
&
&
gBrowser
.
selectedBrowser
.
mayEnableCharacterEncodingMenu
)
{
if
(
charsetMenu
)
{
charsetMenu
.
removeAttribute
(
"
disabled
"
)
;
}
}
else
if
(
charsetMenu
)
{
charsetMenu
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
var
XULBrowserWindow
=
{
status
:
"
"
defaultStatus
:
"
"
overLink
:
"
"
startTime
:
0
isBusy
:
false
busyUI
:
false
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIWebProgressListener
"
"
nsIWebProgressListener2
"
"
nsISupportsWeakReference
"
"
nsIXULBrowserWindow
"
]
)
get
stopCommand
(
)
{
delete
this
.
stopCommand
;
return
this
.
stopCommand
=
document
.
getElementById
(
"
Browser
:
Stop
"
)
;
}
get
reloadCommand
(
)
{
delete
this
.
reloadCommand
;
return
this
.
reloadCommand
=
document
.
getElementById
(
"
Browser
:
Reload
"
)
;
}
get
elementsForTextBasedTypes
(
)
{
delete
this
.
elementsForTextBasedTypes
;
return
this
.
elementsForTextBasedTypes
=
[
document
.
getElementById
(
"
pageStyleMenu
"
)
document
.
getElementById
(
"
context
-
viewpartialsource
-
selection
"
)
document
.
getElementById
(
"
cmd_find
"
)
document
.
getElementById
(
"
cmd_findAgain
"
)
document
.
getElementById
(
"
cmd_findPrevious
"
)
]
;
}
get
elementsForViewSource
(
)
{
delete
this
.
elementsForViewSource
;
return
this
.
elementsForViewSource
=
[
document
.
getElementById
(
"
context
-
viewsource
"
)
document
.
getElementById
(
"
View
:
PageSource
"
)
]
;
}
forceInitialBrowserNonRemote
(
aOpener
)
{
gBrowser
.
updateBrowserRemoteness
(
gBrowser
.
initialBrowser
false
{
opener
:
aOpener
}
)
;
}
setDefaultStatus
(
status
)
{
this
.
defaultStatus
=
status
;
StatusPanel
.
update
(
)
;
}
setOverLink
(
url
anchorElt
)
{
if
(
url
)
{
url
=
Services
.
textToSubURI
.
unEscapeURIForUI
(
"
UTF
-
8
"
url
)
;
url
=
url
.
replace
(
/
[
\
u200e
\
u200f
\
u202a
\
u202b
\
u202c
\
u202d
\
u202e
]
/
g
encodeURIComponent
)
;
if
(
gURLBar
.
_mayTrimURLs
)
url
=
trimURL
(
url
)
;
}
this
.
overLink
=
url
;
LinkTargetDisplay
.
update
(
)
;
}
showTooltip
(
x
y
tooltip
direction
browser
)
{
if
(
Cc
[
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
]
.
getService
(
Ci
.
nsIDragService
)
.
getCurrentSession
(
)
)
{
return
;
}
let
elt
=
document
.
getElementById
(
"
remoteBrowserTooltip
"
)
;
elt
.
label
=
tooltip
;
elt
.
style
.
direction
=
direction
;
elt
.
openPopupAtScreen
(
browser
.
boxObject
.
screenX
+
x
browser
.
boxObject
.
screenY
+
y
false
null
)
;
}
hideTooltip
(
)
{
let
elt
=
document
.
getElementById
(
"
remoteBrowserTooltip
"
)
;
elt
.
hidePopup
(
)
;
}
getTabCount
(
)
{
return
gBrowser
.
tabs
.
length
;
}
onBeforeLinkTraversal
(
originalTarget
linkURI
linkNode
isAppTab
)
{
return
BrowserUtils
.
onBeforeLinkTraversal
(
originalTarget
linkURI
linkNode
isAppTab
)
;
}
shouldLoadURI
(
aDocShell
aURI
aReferrer
aHasPostData
aTriggeringPrincipal
)
{
if
(
!
gMultiProcessBrowser
)
return
true
;
let
browser
=
aDocShell
.
QueryInterface
(
Ci
.
nsIDocShellTreeItem
)
.
sameTypeRootTreeItem
.
QueryInterface
(
Ci
.
nsIDocShell
)
.
chromeEventHandler
;
if
(
browser
.
localName
!
=
"
browser
"
|
|
!
browser
.
getTabBrowser
|
|
browser
.
getTabBrowser
(
)
!
=
gBrowser
)
return
true
;
if
(
!
E10SUtils
.
shouldLoadURI
(
aDocShell
aURI
aReferrer
aHasPostData
)
)
{
E10SUtils
.
redirectLoad
(
aDocShell
aURI
aReferrer
aTriggeringPrincipal
false
)
;
return
false
;
}
return
true
;
}
onProgressChange
(
aWebProgress
aRequest
aCurSelfProgress
aMaxSelfProgress
aCurTotalProgress
aMaxTotalProgress
)
{
}
onProgressChange64
(
aWebProgress
aRequest
aCurSelfProgress
aMaxSelfProgress
aCurTotalProgress
aMaxTotalProgress
)
{
return
this
.
onProgressChange
(
aWebProgress
aRequest
aCurSelfProgress
aMaxSelfProgress
aCurTotalProgress
aMaxTotalProgress
)
;
}
onStateChange
(
aWebProgress
aRequest
aStateFlags
aStatus
)
{
const
nsIWebProgressListener
=
Ci
.
nsIWebProgressListener
;
let
browser
=
gBrowser
.
selectedBrowser
;
if
(
aStateFlags
&
nsIWebProgressListener
.
STATE_START
&
&
aStateFlags
&
nsIWebProgressListener
.
STATE_IS_NETWORK
)
{
if
(
aRequest
&
&
aWebProgress
.
isTopLevel
)
{
browser
.
feeds
=
null
;
browser
.
engines
=
null
;
}
this
.
isBusy
=
true
;
if
(
!
(
aStateFlags
&
nsIWebProgressListener
.
STATE_RESTORING
)
)
{
this
.
busyUI
=
true
;
this
.
stopCommand
.
removeAttribute
(
"
disabled
"
)
;
CombinedStopReload
.
switchToStop
(
aRequest
aWebProgress
)
;
}
}
else
if
(
aStateFlags
&
nsIWebProgressListener
.
STATE_STOP
)
{
if
(
aRequest
)
{
let
msg
=
"
"
;
let
location
;
let
canViewSource
=
true
;
if
(
aRequest
instanceof
Ci
.
nsIChannel
|
|
"
URI
"
in
aRequest
)
{
location
=
aRequest
.
URI
;
if
(
location
.
scheme
=
=
"
keyword
"
&
&
aWebProgress
.
isTopLevel
)
gBrowser
.
userTypedValue
=
null
;
canViewSource
=
location
.
scheme
!
=
"
view
-
source
"
;
if
(
location
.
spec
!
=
"
about
:
blank
"
)
{
switch
(
aStatus
)
{
case
Cr
.
NS_ERROR_NET_TIMEOUT
:
msg
=
gNavigatorBundle
.
getString
(
"
nv_timeout
"
)
;
break
;
}
}
}
this
.
status
=
"
"
;
this
.
setDefaultStatus
(
msg
)
;
let
isText
=
browser
.
documentContentType
&
&
BrowserUtils
.
mimeTypeIsTextBased
(
browser
.
documentContentType
)
;
for
(
let
element
of
this
.
elementsForTextBasedTypes
)
{
if
(
isText
)
{
element
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
element
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
for
(
let
element
of
this
.
elementsForViewSource
)
{
if
(
canViewSource
&
&
isText
)
{
element
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
element
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
}
this
.
isBusy
=
false
;
if
(
this
.
busyUI
)
{
this
.
busyUI
=
false
;
this
.
stopCommand
.
setAttribute
(
"
disabled
"
"
true
"
)
;
CombinedStopReload
.
switchToReload
(
aRequest
aWebProgress
)
;
}
}
}
onLocationChange
(
aWebProgress
aRequest
aLocationURI
aFlags
)
{
var
location
=
aLocationURI
?
aLocationURI
.
spec
:
"
"
;
let
pageTooltip
=
document
.
getElementById
(
"
aHTMLTooltip
"
)
;
let
tooltipNode
=
pageTooltip
.
triggerNode
;
if
(
tooltipNode
)
{
if
(
aWebProgress
.
isTopLevel
)
{
pageTooltip
.
hidePopup
(
)
;
}
else
{
for
(
let
tooltipWindow
=
tooltipNode
.
ownerGlobal
;
tooltipWindow
!
=
tooltipWindow
.
parent
;
tooltipWindow
=
tooltipWindow
.
parent
)
{
if
(
tooltipWindow
=
=
aWebProgress
.
DOMWindow
)
{
pageTooltip
.
hidePopup
(
)
;
break
;
}
}
}
}
let
browser
=
gBrowser
.
selectedBrowser
;
let
isText
=
browser
.
documentContentType
&
&
BrowserUtils
.
mimeTypeIsTextBased
(
browser
.
documentContentType
)
;
for
(
let
element
of
this
.
elementsForTextBasedTypes
)
{
if
(
isText
)
{
element
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
element
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
this
.
hideOverLinkImmediately
=
true
;
this
.
setOverLink
(
"
"
null
)
;
this
.
hideOverLinkImmediately
=
false
;
if
(
aWebProgress
.
isTopLevel
)
{
if
(
(
location
=
=
"
about
:
blank
"
&
&
checkEmptyPageOrigin
(
)
)
|
|
location
=
=
"
"
)
{
this
.
reloadCommand
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
else
{
this
.
reloadCommand
.
removeAttribute
(
"
disabled
"
)
;
}
URLBarSetURI
(
aLocationURI
)
;
BookmarkingUI
.
onLocationChange
(
)
;
gIdentityHandler
.
onLocationChange
(
)
;
BrowserPageActions
.
onLocationChange
(
)
;
SafeBrowsingNotificationBox
.
onLocationChange
(
aLocationURI
)
;
gTabletModePageCounter
.
inc
(
)
;
var
shouldDisableFind
=
function
(
aDocument
)
{
let
docElt
=
aDocument
.
documentElement
;
return
docElt
&
&
docElt
.
getAttribute
(
"
disablefastfind
"
)
=
=
"
true
"
;
}
;
var
disableFindCommands
=
function
(
aDisable
)
{
let
findCommands
=
[
document
.
getElementById
(
"
cmd_find
"
)
document
.
getElementById
(
"
cmd_findAgain
"
)
document
.
getElementById
(
"
cmd_findPrevious
"
)
]
;
for
(
let
elt
of
findCommands
)
{
if
(
aDisable
)
elt
.
setAttribute
(
"
disabled
"
"
true
"
)
;
else
elt
.
removeAttribute
(
"
disabled
"
)
;
}
}
;
var
onContentRSChange
=
function
(
e
)
{
if
(
e
.
target
.
readyState
!
=
"
interactive
"
&
&
e
.
target
.
readyState
!
=
"
complete
"
)
return
;
e
.
target
.
removeEventListener
(
"
readystatechange
"
onContentRSChange
)
;
disableFindCommands
(
shouldDisableFind
(
e
.
target
)
)
;
}
;
if
(
!
gMultiProcessBrowser
&
&
aLocationURI
&
&
(
aLocationURI
.
schemeIs
(
"
about
"
)
|
|
aLocationURI
.
schemeIs
(
"
chrome
"
)
)
)
{
if
(
!
(
aFlags
&
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
)
)
{
if
(
window
.
content
.
document
.
readyState
=
=
"
interactive
"
|
|
window
.
content
.
document
.
readyState
=
=
"
complete
"
)
disableFindCommands
(
shouldDisableFind
(
window
.
content
.
document
)
)
;
else
{
window
.
content
.
document
.
addEventListener
(
"
readystatechange
"
onContentRSChange
)
;
}
}
}
else
disableFindCommands
(
false
)
;
if
(
location
=
=
"
about
:
blank
"
&
&
gBrowser
.
selectedTab
.
hasAttribute
(
"
customizemode
"
)
)
{
gCustomizeMode
.
enter
(
)
;
}
else
if
(
CustomizationHandler
.
isEnteringCustomizeMode
|
|
CustomizationHandler
.
isCustomizing
(
)
)
{
gCustomizeMode
.
exit
(
)
;
}
CFRPageActions
.
updatePageActions
(
gBrowser
.
selectedBrowser
)
;
}
UpdateBackForwardCommands
(
gBrowser
.
webNavigation
)
;
ReaderParent
.
updateReaderButton
(
gBrowser
.
selectedBrowser
)
;
if
(
!
gMultiProcessBrowser
)
gGestureSupport
.
restoreRotationState
(
)
;
if
(
aRequest
)
setTimeout
(
function
(
)
{
XULBrowserWindow
.
asyncUpdateUI
(
)
;
}
0
)
;
else
this
.
asyncUpdateUI
(
)
;
if
(
AppConstants
.
MOZ_CRASHREPORTER
&
&
aLocationURI
)
{
let
uri
=
aLocationURI
;
try
{
uri
=
aLocationURI
.
mutate
(
)
.
setUserPass
(
"
"
)
.
finalize
(
)
;
}
catch
(
ex
)
{
}
try
{
gCrashReporter
.
annotateCrashReport
(
"
URL
"
uri
.
spec
)
;
}
catch
(
ex
)
{
if
(
ex
.
result
!
=
Cr
.
NS_ERROR_NOT_INITIALIZED
)
{
throw
ex
;
}
}
}
}
asyncUpdateUI
(
)
{
FeedHandler
.
updateFeeds
(
)
;
BrowserSearch
.
updateOpenSearchBadge
(
)
;
}
onStatusChange
(
aWebProgress
aRequest
aStatus
aMessage
)
{
this
.
status
=
aMessage
;
StatusPanel
.
update
(
)
;
}
_state
:
null
_lastLocation
:
null
onSecurityChange
(
aWebProgress
aRequest
aState
aIsSimulated
)
{
let
uri
=
gBrowser
.
currentURI
;
let
spec
=
uri
.
spec
;
if
(
this
.
_state
=
=
aState
&
&
this
.
_lastLocation
=
=
spec
)
{
gIdentityHandler
.
refreshIdentityBlock
(
)
;
return
;
}
this
.
_state
=
aState
;
this
.
_lastLocation
=
spec
;
if
(
typeof
(
aIsSimulated
)
!
=
"
boolean
"
&
&
typeof
(
aIsSimulated
)
!
=
"
undefined
"
)
{
throw
"
onSecurityChange
:
aIsSimulated
receieved
an
unexpected
type
"
;
}
gURLBar
.
formatValue
(
)
;
try
{
uri
=
Services
.
uriFixup
.
createExposableURI
(
uri
)
;
}
catch
(
e
)
{
}
gIdentityHandler
.
updateIdentity
(
this
.
_state
uri
)
;
ContentBlocking
.
onSecurityChange
(
this
.
_state
aWebProgress
aIsSimulated
)
;
}
onUpdateCurrentBrowser
:
function
XWB_onUpdateCurrentBrowser
(
aStateFlags
aStatus
aMessage
aTotalProgress
)
{
if
(
FullZoom
.
updateBackgroundTabs
)
FullZoom
.
onLocationChange
(
gBrowser
.
currentURI
true
)
;
CombinedStopReload
.
onTabSwitch
(
)
;
var
nsIWebProgressListener
=
Ci
.
nsIWebProgressListener
;
var
loadingDone
=
aStateFlags
&
nsIWebProgressListener
.
STATE_STOP
;
this
.
onStateChange
(
gBrowser
.
webProgress
{
URI
:
gBrowser
.
currentURI
}
loadingDone
?
nsIWebProgressListener
.
STATE_STOP
:
nsIWebProgressListener
.
STATE_START
aStatus
)
;
if
(
loadingDone
)
return
;
this
.
onStatusChange
(
gBrowser
.
webProgress
null
0
aMessage
)
;
}
navigateAndRestoreByIndex
:
function
XWB_navigateAndRestoreByIndex
(
aBrowser
aIndex
)
{
let
tab
=
gBrowser
.
getTabForBrowser
(
aBrowser
)
;
if
(
tab
)
{
SessionStore
.
navigateAndRestore
(
tab
{
}
aIndex
)
;
return
;
}
throw
new
Error
(
"
Trying
to
navigateAndRestore
a
browser
which
was
"
+
"
not
attached
to
this
tabbrowser
is
unsupported
"
)
;
}
}
;
var
LinkTargetDisplay
=
{
get
DELAY_SHOW
(
)
{
delete
this
.
DELAY_SHOW
;
return
this
.
DELAY_SHOW
=
Services
.
prefs
.
getIntPref
(
"
browser
.
overlink
-
delay
"
)
;
}
DELAY_HIDE
:
250
_timer
:
0
update
(
)
{
clearTimeout
(
this
.
_timer
)
;
window
.
removeEventListener
(
"
mousemove
"
this
true
)
;
if
(
!
XULBrowserWindow
.
overLink
)
{
if
(
XULBrowserWindow
.
hideOverLinkImmediately
)
this
.
_hide
(
)
;
else
this
.
_timer
=
setTimeout
(
this
.
_hide
.
bind
(
this
)
this
.
DELAY_HIDE
)
;
return
;
}
if
(
StatusPanel
.
isVisible
)
{
StatusPanel
.
update
(
)
;
}
else
{
this
.
_showDelayed
(
)
;
window
.
addEventListener
(
"
mousemove
"
this
true
)
;
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
mousemove
"
:
clearTimeout
(
this
.
_timer
)
;
this
.
_showDelayed
(
)
;
break
;
}
}
_showDelayed
(
)
{
this
.
_timer
=
setTimeout
(
function
(
self
)
{
StatusPanel
.
update
(
)
;
window
.
removeEventListener
(
"
mousemove
"
self
true
)
;
}
this
.
DELAY_SHOW
this
)
;
}
_hide
(
)
{
clearTimeout
(
this
.
_timer
)
;
StatusPanel
.
update
(
)
;
}
}
;
var
CombinedStopReload
=
{
ensureInitialized
(
)
{
if
(
this
.
_initialized
)
return
true
;
if
(
this
.
_destroyed
)
return
false
;
let
reload
=
document
.
getElementById
(
"
reload
-
button
"
)
;
let
stop
=
document
.
getElementById
(
"
stop
-
button
"
)
;
if
(
!
stop
|
|
!
reload
)
return
false
;
this
.
_initialized
=
true
;
if
(
XULBrowserWindow
.
stopCommand
.
getAttribute
(
"
disabled
"
)
!
=
"
true
"
)
reload
.
setAttribute
(
"
displaystop
"
"
true
"
)
;
stop
.
addEventListener
(
"
click
"
this
)
;
for
(
let
button
of
[
stop
reload
]
)
{
if
(
button
.
hasAttribute
(
"
disabled
"
)
)
{
let
command
=
document
.
getElementById
(
button
.
getAttribute
(
"
command
"
)
)
;
if
(
!
command
.
hasAttribute
(
"
disabled
"
)
)
{
button
.
removeAttribute
(
"
disabled
"
)
;
}
}
}
this
.
reload
=
reload
;
this
.
stop
=
stop
;
this
.
stopReloadContainer
=
this
.
reload
.
parentNode
;
this
.
timeWhenSwitchedToStop
=
0
;
if
(
this
.
_shouldStartPrefMonitoring
)
{
this
.
startAnimationPrefMonitoring
(
)
;
}
return
true
;
}
uninit
(
)
{
this
.
_destroyed
=
true
;
if
(
!
this
.
_initialized
)
return
;
Services
.
prefs
.
removeObserver
(
"
toolkit
.
cosmeticAnimations
.
enabled
"
this
)
;
this
.
_cancelTransition
(
)
;
this
.
stop
.
removeEventListener
(
"
click
"
this
)
;
this
.
stopReloadContainer
.
removeEventListener
(
"
animationend
"
this
)
;
this
.
stopReloadContainer
=
null
;
this
.
reload
=
null
;
this
.
stop
=
null
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
click
"
:
if
(
event
.
button
=
=
0
&
&
!
this
.
stop
.
disabled
)
{
this
.
_stopClicked
=
true
;
}
case
"
animationend
"
:
{
if
(
event
.
target
.
classList
.
contains
(
"
toolbarbutton
-
animatable
-
image
"
)
&
&
(
event
.
animationName
=
=
"
reload
-
to
-
stop
"
|
|
event
.
animationName
=
=
"
stop
-
to
-
reload
"
|
|
event
.
animationName
=
=
"
reload
-
to
-
stop
-
rtl
"
|
|
event
.
animationName
=
=
"
stop
-
to
-
reload
-
rtl
"
)
)
{
this
.
stopReloadContainer
.
removeAttribute
(
"
animate
"
)
;
}
}
}
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
nsPref
:
changed
"
)
{
this
.
animate
=
Services
.
prefs
.
getBoolPref
(
"
toolkit
.
cosmeticAnimations
.
enabled
"
)
;
}
}
startAnimationPrefMonitoring
(
)
{
if
(
this
.
_destroyed
)
return
;
if
(
!
this
.
ensureInitialized
(
)
)
{
this
.
_shouldStartPrefMonitoring
=
true
;
return
;
}
this
.
animate
=
Services
.
prefs
.
getBoolPref
(
"
toolkit
.
cosmeticAnimations
.
enabled
"
)
&
&
Services
.
prefs
.
getBoolPref
(
"
browser
.
stopReloadAnimation
.
enabled
"
)
;
Services
.
prefs
.
addObserver
(
"
toolkit
.
cosmeticAnimations
.
enabled
"
this
)
;
this
.
stopReloadContainer
.
addEventListener
(
"
animationend
"
this
)
;
}
onTabSwitch
(
)
{
this
.
timeWhenSwitchedToStop
=
window
.
performance
.
now
(
)
;
}
switchToStop
(
aRequest
aWebProgress
)
{
if
(
!
this
.
ensureInitialized
(
)
|
|
!
this
.
_shouldSwitch
(
aRequest
aWebProgress
)
)
{
return
;
}
if
(
aRequest
instanceof
Ci
.
nsIRequest
)
{
this
.
timeWhenSwitchedToStop
=
window
.
performance
.
now
(
)
;
}
let
shouldAnimate
=
aRequest
instanceof
Ci
.
nsIRequest
&
&
aWebProgress
.
isTopLevel
&
&
aWebProgress
.
isLoadingDocument
&
&
!
gBrowser
.
tabAnimationsInProgress
&
&
this
.
stopReloadContainer
.
closest
(
"
#
nav
-
bar
-
customization
-
target
"
)
&
&
this
.
animate
;
this
.
_cancelTransition
(
)
;
if
(
shouldAnimate
)
{
BrowserUtils
.
setToolbarButtonHeightProperty
(
this
.
stopReloadContainer
)
;
this
.
stopReloadContainer
.
setAttribute
(
"
animate
"
"
true
"
)
;
}
else
{
this
.
stopReloadContainer
.
removeAttribute
(
"
animate
"
)
;
}
this
.
reload
.
setAttribute
(
"
displaystop
"
"
true
"
)
;
}
switchToReload
(
aRequest
aWebProgress
)
{
if
(
!
this
.
ensureInitialized
(
)
|
|
!
this
.
reload
.
hasAttribute
(
"
displaystop
"
)
)
{
return
;
}
let
shouldAnimate
=
aRequest
instanceof
Ci
.
nsIRequest
&
&
aWebProgress
.
isTopLevel
&
&
!
aWebProgress
.
isLoadingDocument
&
&
!
gBrowser
.
tabAnimationsInProgress
&
&
this
.
_loadTimeExceedsMinimumForAnimation
(
)
&
&
this
.
stopReloadContainer
.
closest
(
"
#
nav
-
bar
-
customization
-
target
"
)
&
&
this
.
animate
;
if
(
shouldAnimate
)
{
BrowserUtils
.
setToolbarButtonHeightProperty
(
this
.
stopReloadContainer
)
;
this
.
stopReloadContainer
.
setAttribute
(
"
animate
"
"
true
"
)
;
}
else
{
this
.
stopReloadContainer
.
removeAttribute
(
"
animate
"
)
;
}
this
.
reload
.
removeAttribute
(
"
displaystop
"
)
;
if
(
!
shouldAnimate
|
|
this
.
_stopClicked
)
{
this
.
_stopClicked
=
false
;
this
.
_cancelTransition
(
)
;
this
.
reload
.
disabled
=
XULBrowserWindow
.
reloadCommand
.
getAttribute
(
"
disabled
"
)
=
=
"
true
"
;
return
;
}
if
(
this
.
_timer
)
return
;
this
.
reload
.
disabled
=
true
;
this
.
_timer
=
setTimeout
(
function
(
self
)
{
self
.
_timer
=
0
;
self
.
reload
.
disabled
=
XULBrowserWindow
.
reloadCommand
.
getAttribute
(
"
disabled
"
)
=
=
"
true
"
;
}
650
this
)
;
}
_loadTimeExceedsMinimumForAnimation
(
)
{
return
this
.
timeWhenSwitchedToStop
&
&
window
.
performance
.
now
(
)
-
this
.
timeWhenSwitchedToStop
>
150
;
}
_shouldSwitch
(
aRequest
aWebProgress
)
{
if
(
aRequest
&
&
aRequest
.
originalURI
&
&
(
aRequest
.
originalURI
.
schemeIs
(
"
chrome
"
)
|
|
(
aRequest
.
originalURI
.
schemeIs
(
"
about
"
)
&
&
aWebProgress
.
isTopLevel
&
&
!
aRequest
.
originalURI
.
spec
.
startsWith
(
"
about
:
reader
"
)
)
)
)
{
return
false
;
}
return
true
;
}
_cancelTransition
(
)
{
if
(
this
.
_timer
)
{
clearTimeout
(
this
.
_timer
)
;
this
.
_timer
=
0
;
}
}
}
;
const
AccessibilityRefreshBlocker
=
{
PREF
:
"
accessibility
.
blockautorefresh
"
init
(
)
{
if
(
Services
.
prefs
.
getBoolPref
(
this
.
PREF
)
)
{
this
.
loadFrameScript
(
)
;
}
else
{
Services
.
prefs
.
addObserver
(
this
.
PREF
this
)
;
}
}
uninit
(
)
{
Services
.
prefs
.
removeObserver
(
this
.
PREF
this
)
;
}
observe
(
aSubject
aTopic
aPrefName
)
{
if
(
aTopic
=
=
"
nsPref
:
changed
"
&
&
aPrefName
=
=
this
.
PREF
&
&
Services
.
prefs
.
getBoolPref
(
this
.
PREF
)
)
{
this
.
loadFrameScript
(
)
;
Services
.
prefs
.
removeObserver
(
this
.
PREF
this
)
;
}
}
loadFrameScript
(
)
{
if
(
!
this
.
_loaded
)
{
this
.
_loaded
=
true
;
let
mm
=
window
.
getGroupMessageManager
(
"
browsers
"
)
;
mm
.
loadFrameScript
(
"
chrome
:
/
/
browser
/
content
/
content
-
refreshblocker
.
js
"
true
true
)
;
}
}
}
;
var
TabsProgressListener
=
{
onStateChange
(
aBrowser
aWebProgress
aRequest
aStateFlags
aStatus
)
{
if
(
aWebProgress
.
isTopLevel
&
&
(
!
aRequest
.
originalURI
|
|
aRequest
.
originalURI
.
spec
.
scheme
!
=
"
about
"
)
)
{
let
stopwatchRunning
=
TelemetryStopwatch
.
running
(
"
FX_PAGE_LOAD_MS
"
aBrowser
)
;
if
(
aStateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_IS_WINDOW
)
{
if
(
aStateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_START
)
{
if
(
stopwatchRunning
)
{
TelemetryStopwatch
.
cancel
(
"
FX_PAGE_LOAD_MS
"
aBrowser
)
;
}
TelemetryStopwatch
.
start
(
"
FX_PAGE_LOAD_MS
"
aBrowser
)
;
Services
.
telemetry
.
getHistogramById
(
"
FX_TOTAL_TOP_VISITS
"
)
.
add
(
true
)
;
}
else
if
(
aStateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
&
&
stopwatchRunning
)
{
TelemetryStopwatch
.
finish
(
"
FX_PAGE_LOAD_MS
"
aBrowser
)
;
}
}
else
if
(
aStateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
&
&
aStatus
=
=
Cr
.
NS_BINDING_ABORTED
&
&
stopwatchRunning
)
{
TelemetryStopwatch
.
cancel
(
"
FX_PAGE_LOAD_MS
"
aBrowser
)
;
}
}
}
onLocationChange
(
aBrowser
aWebProgress
aRequest
aLocationURI
aFlags
)
{
if
(
aFlags
&
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
)
{
aBrowser
.
messageManager
.
sendAsyncMessage
(
"
Reader
:
PushState
"
{
isArticle
:
aBrowser
.
isArticle
}
)
;
return
;
}
if
(
!
aWebProgress
.
isTopLevel
)
return
;
if
(
!
Object
.
getOwnPropertyDescriptor
(
window
"
PopupNotifications
"
)
.
get
)
PopupNotifications
.
locationChange
(
aBrowser
)
;
let
tab
=
gBrowser
.
getTabForBrowser
(
aBrowser
)
;
if
(
tab
&
&
tab
.
_sharingState
)
{
gBrowser
.
setBrowserSharing
(
aBrowser
{
}
)
;
}
webrtcUI
.
forgetStreamsFromBrowser
(
aBrowser
)
;
gBrowser
.
getNotificationBox
(
aBrowser
)
.
removeTransientNotifications
(
)
;
FullZoom
.
onLocationChange
(
aLocationURI
false
aBrowser
)
;
}
}
;
function
nsBrowserAccess
(
)
{
}
nsBrowserAccess
.
prototype
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIBrowserDOMWindow
]
)
_openURIInNewTab
(
aURI
aReferrer
aReferrerPolicy
aIsPrivate
aIsExternal
aForceNotRemote
=
false
aUserContextId
=
Ci
.
nsIScriptSecurityManager
.
DEFAULT_USER_CONTEXT_ID
aOpenerWindow
=
null
aOpenerBrowser
=
null
aTriggeringPrincipal
=
null
aNextTabParentId
=
0
aName
=
"
"
)
{
let
win
needToFocusWin
;
if
(
window
.
toolbar
.
visible
)
win
=
window
;
else
{
win
=
BrowserWindowTracker
.
getTopWindow
(
{
private
:
aIsPrivate
}
)
;
needToFocusWin
=
true
;
}
if
(
!
win
)
{
return
null
;
}
if
(
aIsExternal
&
&
(
!
aURI
|
|
aURI
.
spec
=
=
"
about
:
blank
"
)
)
{
win
.
BrowserOpenTab
(
)
;
win
.
focus
(
)
;
return
win
.
gBrowser
.
selectedBrowser
;
}
let
loadInBackground
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
loadDivertedInBackground
"
)
;
let
tab
=
win
.
gBrowser
.
loadOneTab
(
aURI
?
aURI
.
spec
:
"
about
:
blank
"
{
triggeringPrincipal
:
aTriggeringPrincipal
referrerURI
:
aReferrer
referrerPolicy
:
aReferrerPolicy
userContextId
:
aUserContextId
fromExternal
:
aIsExternal
inBackground
:
loadInBackground
forceNotRemote
:
aForceNotRemote
opener
:
aOpenerWindow
openerBrowser
:
aOpenerBrowser
nextTabParentId
:
aNextTabParentId
name
:
aName
}
)
;
let
browser
=
win
.
gBrowser
.
getBrowserForTab
(
tab
)
;
if
(
needToFocusWin
|
|
(
!
loadInBackground
&
&
aIsExternal
)
)
win
.
focus
(
)
;
return
browser
;
}
createContentWindow
(
aURI
aOpener
aWhere
aFlags
aTriggeringPrincipal
)
{
return
this
.
getContentWindowOrOpenURI
(
null
aOpener
aWhere
aFlags
aTriggeringPrincipal
)
;
}
openURI
(
aURI
aOpener
aWhere
aFlags
aTriggeringPrincipal
)
{
if
(
!
aURI
)
{
Cu
.
reportError
(
"
openURI
should
only
be
called
with
a
valid
URI
"
)
;
throw
Cr
.
NS_ERROR_FAILURE
;
}
return
this
.
getContentWindowOrOpenURI
(
aURI
aOpener
aWhere
aFlags
aTriggeringPrincipal
)
;
}
getContentWindowOrOpenURI
(
aURI
aOpener
aWhere
aFlags
aTriggeringPrincipal
)
{
if
(
aOpener
&
&
Cu
.
isCrossProcessWrapper
(
aOpener
)
)
{
Cu
.
reportError
(
"
nsBrowserAccess
.
openURI
was
passed
a
CPOW
for
aOpener
.
"
+
"
openURI
should
only
ever
be
called
from
non
-
remote
browsers
.
"
)
;
throw
Cr
.
NS_ERROR_FAILURE
;
}
var
newWindow
=
null
;
var
isExternal
=
!
!
(
aFlags
&
Ci
.
nsIBrowserDOMWindow
.
OPEN_EXTERNAL
)
;
if
(
aOpener
&
&
isExternal
)
{
Cu
.
reportError
(
"
nsBrowserAccess
.
openURI
did
not
expect
an
opener
to
be
"
+
"
passed
if
the
context
is
OPEN_EXTERNAL
.
"
)
;
throw
Cr
.
NS_ERROR_FAILURE
;
}
if
(
isExternal
&
&
aURI
&
&
aURI
.
schemeIs
(
"
chrome
"
)
)
{
dump
(
"
use
-
-
chrome
command
-
line
option
to
load
external
chrome
urls
\
n
"
)
;
return
null
;
}
if
(
aWhere
=
=
Ci
.
nsIBrowserDOMWindow
.
OPEN_DEFAULTWINDOW
)
{
if
(
isExternal
&
&
Services
.
prefs
.
prefHasUserValue
(
"
browser
.
link
.
open_newwindow
.
override
.
external
"
)
)
aWhere
=
Services
.
prefs
.
getIntPref
(
"
browser
.
link
.
open_newwindow
.
override
.
external
"
)
;
else
aWhere
=
Services
.
prefs
.
getIntPref
(
"
browser
.
link
.
open_newwindow
"
)
;
}
let
referrer
=
aOpener
?
makeURI
(
aOpener
.
location
.
href
)
:
null
;
let
referrerPolicy
=
Ci
.
nsIHttpChannel
.
REFERRER_POLICY_UNSET
;
if
(
aOpener
&
&
aOpener
.
document
)
{
referrerPolicy
=
aOpener
.
document
.
referrerPolicy
;
}
let
isPrivate
=
aOpener
?
PrivateBrowsingUtils
.
isContentWindowPrivate
(
aOpener
)
:
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
;
switch
(
aWhere
)
{
case
Ci
.
nsIBrowserDOMWindow
.
OPEN_NEWWINDOW
:
var
url
=
aURI
?
aURI
.
spec
:
"
about
:
blank
"
;
let
features
=
"
all
dialog
=
no
"
;
if
(
isPrivate
)
{
features
+
=
"
private
"
;
}
try
{
newWindow
=
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
features
url
null
null
null
null
null
null
null
aTriggeringPrincipal
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
break
;
case
Ci
.
nsIBrowserDOMWindow
.
OPEN_NEWTAB
:
let
forceNotRemote
=
!
!
aOpener
;
let
userContextId
=
aOpener
&
&
aOpener
.
document
?
aOpener
.
document
.
nodePrincipal
.
originAttributes
.
userContextId
:
Ci
.
nsIScriptSecurityManager
.
DEFAULT_USER_CONTEXT_ID
;
let
openerWindow
=
(
aFlags
&
Ci
.
nsIBrowserDOMWindow
.
OPEN_NO_OPENER
)
?
null
:
aOpener
;
let
browser
=
this
.
_openURIInNewTab
(
aURI
referrer
referrerPolicy
isPrivate
isExternal
forceNotRemote
userContextId
openerWindow
null
aTriggeringPrincipal
)
;
if
(
browser
)
newWindow
=
browser
.
contentWindow
;
break
;
default
:
newWindow
=
window
.
content
;
if
(
aURI
)
{
let
loadflags
=
isExternal
?
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_FROM_EXTERNAL
:
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_NONE
;
gBrowser
.
loadURI
(
aURI
.
spec
{
triggeringPrincipal
:
aTriggeringPrincipal
flags
:
loadflags
referrerURI
:
referrer
referrerPolicy
}
)
;
}
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
loadDivertedInBackground
"
)
)
window
.
focus
(
)
;
}
return
newWindow
;
}
createContentWindowInFrame
:
function
browser_createContentWindowInFrame
(
aURI
aParams
aWhere
aFlags
aNextTabParentId
aName
)
{
return
this
.
getContentWindowOrOpenURIInFrame
(
null
aParams
aWhere
aFlags
aNextTabParentId
aName
)
;
}
openURIInFrame
:
function
browser_openURIInFrame
(
aURI
aParams
aWhere
aFlags
aNextTabParentId
aName
)
{
return
this
.
getContentWindowOrOpenURIInFrame
(
aURI
aParams
aWhere
aFlags
aNextTabParentId
aName
)
;
}
getContentWindowOrOpenURIInFrame
:
function
browser_getContentWindowOrOpenURIInFrame
(
aURI
aParams
aWhere
aFlags
aNextTabParentId
aName
)
{
if
(
aWhere
!
=
Ci
.
nsIBrowserDOMWindow
.
OPEN_NEWTAB
)
{
dump
(
"
Error
:
openURIInFrame
can
only
open
in
new
tabs
"
)
;
return
null
;
}
var
isExternal
=
!
!
(
aFlags
&
Ci
.
nsIBrowserDOMWindow
.
OPEN_EXTERNAL
)
;
var
userContextId
=
aParams
.
openerOriginAttributes
&
&
(
"
userContextId
"
in
aParams
.
openerOriginAttributes
)
?
aParams
.
openerOriginAttributes
.
userContextId
:
Ci
.
nsIScriptSecurityManager
.
DEFAULT_USER_CONTEXT_ID
;
let
referrer
=
aParams
.
referrer
?
makeURI
(
aParams
.
referrer
)
:
null
;
return
this
.
_openURIInNewTab
(
aURI
referrer
aParams
.
referrerPolicy
aParams
.
isPrivate
isExternal
false
userContextId
null
aParams
.
openerBrowser
aParams
.
triggeringPrincipal
aNextTabParentId
aName
)
;
}
isTabContentWindow
(
aWindow
)
{
return
gBrowser
.
browsers
.
some
(
browser
=
>
browser
.
contentWindow
=
=
aWindow
)
;
}
canClose
(
)
{
return
CanCloseWindow
(
)
;
}
}
;
function
onViewToolbarsPopupShowing
(
aEvent
aInsertPoint
)
{
var
popup
=
aEvent
.
target
;
if
(
popup
!
=
aEvent
.
currentTarget
)
return
;
for
(
var
i
=
popup
.
children
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
var
deadItem
=
popup
.
children
[
i
]
;
if
(
deadItem
.
hasAttribute
(
"
toolbarId
"
)
)
popup
.
removeChild
(
deadItem
)
;
}
var
firstMenuItem
=
aInsertPoint
|
|
popup
.
firstElementChild
;
let
toolbarNodes
=
gNavToolbox
.
children
;
for
(
let
toolbar
of
toolbarNodes
)
{
if
(
!
toolbar
.
hasAttribute
(
"
toolbarname
"
)
)
{
continue
;
}
let
menuItem
=
document
.
createXULElement
(
"
menuitem
"
)
;
let
hidingAttribute
=
toolbar
.
getAttribute
(
"
type
"
)
=
=
"
menubar
"
?
"
autohide
"
:
"
collapsed
"
;
menuItem
.
setAttribute
(
"
id
"
"
toggle_
"
+
toolbar
.
id
)
;
menuItem
.
setAttribute
(
"
toolbarId
"
toolbar
.
id
)
;
menuItem
.
setAttribute
(
"
type
"
"
checkbox
"
)
;
menuItem
.
setAttribute
(
"
label
"
toolbar
.
getAttribute
(
"
toolbarname
"
)
)
;
menuItem
.
setAttribute
(
"
checked
"
toolbar
.
getAttribute
(
hidingAttribute
)
!
=
"
true
"
)
;
menuItem
.
setAttribute
(
"
accesskey
"
toolbar
.
getAttribute
(
"
accesskey
"
)
)
;
if
(
popup
.
id
!
=
"
toolbar
-
context
-
menu
"
)
menuItem
.
setAttribute
(
"
key
"
toolbar
.
getAttribute
(
"
key
"
)
)
;
popup
.
insertBefore
(
menuItem
firstMenuItem
)
;
menuItem
.
addEventListener
(
"
command
"
onViewToolbarCommand
)
;
}
let
moveToPanel
=
popup
.
querySelector
(
"
.
customize
-
context
-
moveToPanel
"
)
;
let
removeFromToolbar
=
popup
.
querySelector
(
"
.
customize
-
context
-
removeFromToolbar
"
)
;
if
(
!
moveToPanel
|
|
!
removeFromToolbar
)
{
return
;
}
let
toolbarItem
=
popup
.
triggerNode
;
if
(
toolbarItem
&
&
toolbarItem
.
localName
=
=
"
toolbarpaletteitem
"
)
{
toolbarItem
=
toolbarItem
.
firstElementChild
;
}
else
if
(
toolbarItem
&
&
toolbarItem
.
localName
!
=
"
toolbar
"
)
{
while
(
toolbarItem
&
&
toolbarItem
.
parentNode
)
{
let
parent
=
toolbarItem
.
parentNode
;
if
(
parent
.
nodeType
!
=
=
Node
.
ELEMENT_NODE
|
|
(
parent
.
classList
&
&
parent
.
classList
.
contains
(
"
customization
-
target
"
)
)
|
|
parent
.
getAttribute
(
"
overflowfortoolbar
"
)
|
|
parent
.
localName
=
=
"
toolbarpaletteitem
"
|
|
parent
.
localName
=
=
"
toolbar
"
)
break
;
toolbarItem
=
parent
;
}
}
else
{
toolbarItem
=
null
;
}
let
showTabStripItems
=
toolbarItem
&
&
toolbarItem
.
id
=
=
"
tabbrowser
-
tabs
"
;
for
(
let
node
of
popup
.
querySelectorAll
(
'
menuitem
[
contexttype
=
"
toolbaritem
"
]
'
)
)
{
node
.
hidden
=
showTabStripItems
;
}
for
(
let
node
of
popup
.
querySelectorAll
(
'
menuitem
[
contexttype
=
"
tabbar
"
]
'
)
)
{
node
.
hidden
=
!
showTabStripItems
;
}
if
(
showTabStripItems
)
{
PlacesCommandHook
.
updateBookmarkAllTabsCommand
(
)
;
let
haveMultipleTabs
=
gBrowser
.
visibleTabs
.
length
>
1
;
document
.
getElementById
(
"
toolbar
-
context
-
reloadAllTabs
"
)
.
disabled
=
!
haveMultipleTabs
;
document
.
getElementById
(
"
toolbar
-
context
-
undoCloseTab
"
)
.
disabled
=
SessionStore
.
getClosedTabCount
(
window
)
=
=
0
;
return
;
}
let
movable
=
toolbarItem
&
&
toolbarItem
.
parentNode
&
&
CustomizableUI
.
isWidgetRemovable
(
toolbarItem
)
;
let
isSpecial
=
toolbarItem
&
&
CustomizableUI
.
isSpecialWidget
(
toolbarItem
.
id
)
;
if
(
movable
)
{
if
(
isSpecial
)
{
moveToPanel
.
setAttribute
(
"
disabled
"
true
)
;
}
else
{
moveToPanel
.
removeAttribute
(
"
disabled
"
)
;
}
removeFromToolbar
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
moveToPanel
.
setAttribute
(
"
disabled
"
true
)
;
removeFromToolbar
.
setAttribute
(
"
disabled
"
true
)
;
}
}
function
onViewToolbarCommand
(
aEvent
)
{
let
node
=
aEvent
.
originalTarget
;
let
toolbarId
=
node
.
getAttribute
(
"
toolbarId
"
)
;
let
isVisible
=
node
.
getAttribute
(
"
checked
"
)
=
=
"
true
"
;
CustomizableUI
.
setToolbarVisibility
(
toolbarId
isVisible
)
;
updateToggleControlLabel
(
node
)
;
}
function
setToolbarVisibility
(
toolbar
isVisible
persist
=
true
)
{
let
hidingAttribute
;
if
(
toolbar
.
getAttribute
(
"
type
"
)
=
=
"
menubar
"
)
{
hidingAttribute
=
"
autohide
"
;
if
(
AppConstants
.
platform
=
=
"
linux
"
)
{
Services
.
prefs
.
setBoolPref
(
"
ui
.
key
.
menuAccessKeyFocuses
"
!
isVisible
)
;
}
}
else
{
hidingAttribute
=
"
collapsed
"
;
}
toolbar
.
setAttribute
(
hidingAttribute
!
isVisible
)
;
if
(
persist
)
{
Services
.
xulStore
.
persist
(
toolbar
hidingAttribute
)
;
}
let
eventParams
=
{
detail
:
{
visible
:
isVisible
}
bubbles
:
true
}
;
let
event
=
new
CustomEvent
(
"
toolbarvisibilitychange
"
eventParams
)
;
toolbar
.
dispatchEvent
(
event
)
;
if
(
toolbar
.
getAttribute
(
"
type
"
)
=
=
"
menubar
"
&
&
CustomizationHandler
.
isCustomizing
(
)
)
{
gCustomizeMode
.
_updateDragSpaceCheckbox
(
)
;
}
}
function
updateToggleControlLabel
(
control
)
{
if
(
!
control
.
hasAttribute
(
"
label
-
checked
"
)
)
{
return
;
}
if
(
!
control
.
hasAttribute
(
"
label
-
unchecked
"
)
)
{
control
.
setAttribute
(
"
label
-
unchecked
"
control
.
getAttribute
(
"
label
"
)
)
;
}
let
prefix
=
(
control
.
getAttribute
(
"
checked
"
)
=
=
"
true
"
)
?
"
"
:
"
un
"
;
control
.
setAttribute
(
"
label
"
control
.
getAttribute
(
label
-
{
prefix
}
checked
)
)
;
}
var
TabletModeUpdater
=
{
init
(
)
{
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
)
{
this
.
update
(
WindowsUIUtils
.
inTabletMode
)
;
Services
.
obs
.
addObserver
(
this
"
tablet
-
mode
-
change
"
)
;
}
}
uninit
(
)
{
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
)
{
Services
.
obs
.
removeObserver
(
this
"
tablet
-
mode
-
change
"
)
;
}
}
observe
(
subject
topic
data
)
{
this
.
update
(
data
=
=
"
tablet
-
mode
"
)
;
}
update
(
isInTabletMode
)
{
let
wasInTabletMode
=
document
.
documentElement
.
hasAttribute
(
"
tabletmode
"
)
;
if
(
isInTabletMode
)
{
document
.
documentElement
.
setAttribute
(
"
tabletmode
"
"
true
"
)
;
}
else
{
document
.
documentElement
.
removeAttribute
(
"
tabletmode
"
)
;
}
if
(
wasInTabletMode
!
=
isInTabletMode
)
{
gUIDensity
.
update
(
)
;
}
}
}
;
var
gTabletModePageCounter
=
{
enabled
:
false
inc
(
)
{
this
.
enabled
=
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
.
0
"
)
;
if
(
!
this
.
enabled
)
{
this
.
inc
=
(
)
=
>
{
}
;
return
;
}
this
.
inc
=
this
.
_realInc
;
this
.
inc
(
)
;
}
_desktopCount
:
0
_tabletCount
:
0
_realInc
(
)
{
let
inTabletMode
=
document
.
documentElement
.
hasAttribute
(
"
tabletmode
"
)
;
this
[
inTabletMode
?
"
_tabletCount
"
:
"
_desktopCount
"
]
+
+
;
}
finish
(
)
{
if
(
this
.
enabled
)
{
let
histogram
=
Services
.
telemetry
.
getKeyedHistogramById
(
"
FX_TABLETMODE_PAGE_LOAD
"
)
;
histogram
.
add
(
"
tablet
"
this
.
_tabletCount
)
;
histogram
.
add
(
"
desktop
"
this
.
_desktopCount
)
;
}
}
}
;
function
displaySecurityInfo
(
)
{
BrowserPageInfo
(
null
"
securityTab
"
)
;
}
var
gUIDensity
=
{
MODE_NORMAL
:
0
MODE_COMPACT
:
1
MODE_TOUCH
:
2
uiDensityPref
:
"
browser
.
uidensity
"
autoTouchModePref
:
"
browser
.
touchmode
.
auto
"
init
(
)
{
this
.
update
(
)
;
Services
.
prefs
.
addObserver
(
this
.
uiDensityPref
this
)
;
Services
.
prefs
.
addObserver
(
this
.
autoTouchModePref
this
)
;
}
uninit
(
)
{
Services
.
prefs
.
removeObserver
(
this
.
uiDensityPref
this
)
;
Services
.
prefs
.
removeObserver
(
this
.
autoTouchModePref
this
)
;
}
observe
(
aSubject
aTopic
aPrefName
)
{
if
(
aTopic
!
=
"
nsPref
:
changed
"
|
|
(
aPrefName
!
=
this
.
uiDensityPref
&
&
aPrefName
!
=
this
.
autoTouchModePref
)
)
{
return
;
}
this
.
update
(
)
;
}
getCurrentDensity
(
)
{
if
(
AppConstants
.
isPlatformAndVersionAtLeast
(
"
win
"
"
10
"
)
&
&
WindowsUIUtils
.
inTabletMode
&
&
Services
.
prefs
.
getBoolPref
(
this
.
autoTouchModePref
)
)
{
return
{
mode
:
this
.
MODE_TOUCH
overridden
:
true
}
;
}
return
{
mode
:
Services
.
prefs
.
getIntPref
(
this
.
uiDensityPref
)
overridden
:
false
}
;
}
update
(
mode
)
{
if
(
mode
=
=
null
)
{
mode
=
this
.
getCurrentDensity
(
)
.
mode
;
}
let
docs
=
[
document
.
documentElement
]
;
let
shouldUpdateSidebar
=
SidebarUI
.
initialized
&
&
SidebarUI
.
isOpen
;
if
(
shouldUpdateSidebar
)
{
docs
.
push
(
SidebarUI
.
browser
.
contentDocument
.
documentElement
)
;
}
for
(
let
doc
of
docs
)
{
switch
(
mode
)
{
case
this
.
MODE_COMPACT
:
doc
.
setAttribute
(
"
uidensity
"
"
compact
"
)
;
break
;
case
this
.
MODE_TOUCH
:
doc
.
setAttribute
(
"
uidensity
"
"
touch
"
)
;
break
;
default
:
doc
.
removeAttribute
(
"
uidensity
"
)
;
break
;
}
}
if
(
shouldUpdateSidebar
)
{
let
tree
=
SidebarUI
.
browser
.
contentDocument
.
querySelector
(
"
.
sidebar
-
placesTree
"
)
;
if
(
tree
)
{
tree
.
style
.
border
=
"
1px
"
;
tree
.
style
.
border
=
"
"
;
}
}
TabsInTitlebar
.
update
(
)
;
gBrowser
.
tabContainer
.
uiDensityChanged
(
)
;
}
}
;
const
nodeToTooltipMap
=
{
"
bookmarks
-
menu
-
button
"
:
"
bookmarksMenuButton
.
tooltip
"
"
context
-
reload
"
:
"
reloadButton
.
tooltip
"
"
context
-
stop
"
:
"
stopButton
.
tooltip
"
"
downloads
-
button
"
:
"
downloads
.
tooltip
"
"
fullscreen
-
button
"
:
"
fullscreenButton
.
tooltip
"
"
appMenu
-
fullscreen
-
button
"
:
"
fullscreenButton
.
tooltip
"
"
new
-
window
-
button
"
:
"
newWindowButton
.
tooltip
"
"
new
-
tab
-
button
"
:
"
newTabButton
.
tooltip
"
"
tabs
-
newtab
-
button
"
:
"
newTabButton
.
tooltip
"
"
reload
-
button
"
:
"
reloadButton
.
tooltip
"
"
stop
-
button
"
:
"
stopButton
.
tooltip
"
"
urlbar
-
zoom
-
button
"
:
"
urlbar
-
zoom
-
button
.
tooltip
"
"
appMenu
-
cut
-
button
"
:
"
cut
-
button
.
tooltip
"
"
appMenu
-
copy
-
button
"
:
"
copy
-
button
.
tooltip
"
"
appMenu
-
paste
-
button
"
:
"
paste
-
button
.
tooltip
"
"
appMenu
-
zoomEnlarge
-
button
"
:
"
zoomEnlarge
-
button
.
tooltip
"
"
appMenu
-
zoomReset
-
button
"
:
"
zoomReset
-
button
.
tooltip
"
"
appMenu
-
zoomReduce
-
button
"
:
"
zoomReduce
-
button
.
tooltip
"
"
reader
-
mode
-
button
"
:
"
reader
-
mode
-
button
.
tooltip
"
}
;
const
nodeToShortcutMap
=
{
"
bookmarks
-
menu
-
button
"
:
"
manBookmarkKb
"
"
context
-
reload
"
:
"
key_reload
"
"
context
-
stop
"
:
"
key_stop
"
"
downloads
-
button
"
:
"
key_openDownloads
"
"
fullscreen
-
button
"
:
"
key_fullScreen
"
"
appMenu
-
fullscreen
-
button
"
:
"
key_fullScreen
"
"
new
-
window
-
button
"
:
"
key_newNavigator
"
"
new
-
tab
-
button
"
:
"
key_newNavigatorTab
"
"
tabs
-
newtab
-
button
"
:
"
key_newNavigatorTab
"
"
reload
-
button
"
:
"
key_reload
"
"
stop
-
button
"
:
"
key_stop
"
"
urlbar
-
zoom
-
button
"
:
"
key_fullZoomReset
"
"
appMenu
-
cut
-
button
"
:
"
key_cut
"
"
appMenu
-
copy
-
button
"
:
"
key_copy
"
"
appMenu
-
paste
-
button
"
:
"
key_paste
"
"
appMenu
-
zoomEnlarge
-
button
"
:
"
key_fullZoomEnlarge
"
"
appMenu
-
zoomReset
-
button
"
:
"
key_fullZoomReset
"
"
appMenu
-
zoomReduce
-
button
"
:
"
key_fullZoomReduce
"
"
reader
-
mode
-
button
"
:
"
key_toggleReaderMode
"
}
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
nodeToTooltipMap
[
"
print
-
button
"
]
=
"
printButton
.
tooltip
"
;
nodeToShortcutMap
[
"
print
-
button
"
]
=
"
printKb
"
;
}
const
gDynamicTooltipCache
=
new
Map
(
)
;
function
UpdateDynamicShortcutTooltipText
(
aTooltip
)
{
let
nodeId
=
aTooltip
.
triggerNode
.
id
|
|
aTooltip
.
triggerNode
.
getAttribute
(
"
anonid
"
)
;
if
(
!
gDynamicTooltipCache
.
has
(
nodeId
)
&
&
nodeId
in
nodeToTooltipMap
)
{
let
strId
=
nodeToTooltipMap
[
nodeId
]
;
let
args
=
[
]
;
if
(
nodeId
in
nodeToShortcutMap
)
{
let
shortcutId
=
nodeToShortcutMap
[
nodeId
]
;
let
shortcut
=
document
.
getElementById
(
shortcutId
)
;
if
(
shortcut
)
{
args
.
push
(
ShortcutUtils
.
prettifyShortcut
(
shortcut
)
)
;
}
}
gDynamicTooltipCache
.
set
(
nodeId
gNavigatorBundle
.
getFormattedString
(
strId
args
)
)
;
}
aTooltip
.
setAttribute
(
"
label
"
gDynamicTooltipCache
.
get
(
nodeId
)
)
;
}
function
hrefAndLinkNodeForClickEvent
(
event
)
{
function
isHTMLLink
(
aNode
)
{
return
(
(
aNode
instanceof
HTMLAnchorElement
&
&
aNode
.
href
)
|
|
(
aNode
instanceof
HTMLAreaElement
&
&
aNode
.
href
)
|
|
aNode
instanceof
HTMLLinkElement
)
;
}
let
node
=
event
.
composedTarget
;
while
(
node
&
&
!
isHTMLLink
(
node
)
)
{
node
=
node
.
flattenedTreeParentNode
;
}
if
(
node
)
return
[
node
.
href
node
]
;
let
href
baseURI
;
node
=
event
.
composedTarget
;
while
(
node
&
&
!
href
)
{
if
(
node
.
nodeType
=
=
Node
.
ELEMENT_NODE
&
&
(
node
.
localName
=
=
"
a
"
|
|
node
.
namespaceURI
=
=
"
http
:
/
/
www
.
w3
.
org
/
1998
/
Math
/
MathML
"
)
)
{
href
=
node
.
getAttribute
(
"
href
"
)
|
|
node
.
getAttributeNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xlink
"
"
href
"
)
;
if
(
href
)
{
baseURI
=
node
.
baseURI
;
break
;
}
}
node
=
node
.
flattenedTreeParentNode
;
}
return
[
href
?
makeURLAbsolute
(
baseURI
href
)
:
null
null
]
;
}
function
contentAreaClick
(
event
isPanelClick
)
{
if
(
!
event
.
isTrusted
|
|
event
.
defaultPrevented
|
|
event
.
button
=
=
2
)
return
;
let
[
href
linkNode
]
=
hrefAndLinkNodeForClickEvent
(
event
)
;
if
(
!
href
)
{
if
(
event
.
button
=
=
1
&
&
Services
.
prefs
.
getBoolPref
(
"
middlemouse
.
contentLoadURL
"
)
&
&
!
Services
.
prefs
.
getBoolPref
(
"
general
.
autoScroll
"
)
)
{
middleMousePaste
(
event
)
;
event
.
preventDefault
(
)
;
}
return
;
}
if
(
linkNode
&
&
event
.
button
=
=
0
&
&
!
event
.
ctrlKey
&
&
!
event
.
shiftKey
&
&
!
event
.
altKey
&
&
!
event
.
metaKey
)
{
let
target
=
linkNode
.
target
;
let
mainTarget
=
!
target
|
|
target
=
=
"
_content
"
|
|
target
=
=
"
_main
"
;
if
(
isPanelClick
&
&
mainTarget
)
{
if
(
linkNode
.
getAttribute
(
"
onclick
"
)
|
|
href
.
startsWith
(
"
javascript
:
"
)
|
|
href
.
startsWith
(
"
data
:
"
)
)
return
;
try
{
urlSecurityCheck
(
href
linkNode
.
ownerDocument
.
nodePrincipal
)
;
}
catch
(
ex
)
{
event
.
preventDefault
(
)
;
return
;
}
loadURI
(
href
null
null
false
)
;
event
.
preventDefault
(
)
;
return
;
}
}
handleLinkClick
(
event
href
linkNode
)
;
try
{
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
PlacesUIUtils
.
markPageAsFollowedLink
(
href
)
;
}
catch
(
ex
)
{
}
}
function
handleLinkClick
(
event
href
linkNode
)
{
if
(
event
.
button
=
=
2
)
return
false
;
var
where
=
whereToOpenLink
(
event
)
;
if
(
where
=
=
"
current
"
)
return
false
;
var
doc
=
event
.
target
.
ownerDocument
;
if
(
where
=
=
"
save
"
)
{
saveURL
(
href
linkNode
?
gatherTextUnder
(
linkNode
)
:
"
"
null
true
true
doc
.
documentURIObject
doc
)
;
event
.
preventDefault
(
)
;
return
true
;
}
var
referrerURI
=
doc
.
documentURIObject
;
var
persistAllowMixedContentInChildTab
=
false
;
if
(
where
=
=
"
tab
"
&
&
gBrowser
.
docShell
.
mixedContentChannel
)
{
const
sm
=
Services
.
scriptSecurityManager
;
try
{
var
targetURI
=
makeURI
(
href
)
;
sm
.
checkSameOriginURI
(
referrerURI
targetURI
false
)
;
persistAllowMixedContentInChildTab
=
true
;
}
catch
(
e
)
{
}
}
let
referrerPolicy
=
doc
.
referrerPolicy
;
if
(
linkNode
)
{
let
referrerAttrValue
=
Services
.
netUtils
.
parseAttributePolicyString
(
linkNode
.
getAttribute
(
"
referrerpolicy
"
)
)
;
if
(
referrerAttrValue
!
=
Ci
.
nsIHttpChannel
.
REFERRER_POLICY_UNSET
)
{
referrerPolicy
=
referrerAttrValue
;
}
}
let
frameOuterWindowID
=
WebNavigationFrames
.
getFrameId
(
doc
.
defaultView
)
;
urlSecurityCheck
(
href
doc
.
nodePrincipal
)
;
let
params
=
{
charset
:
doc
.
characterSet
allowMixedContent
:
persistAllowMixedContentInChildTab
referrerURI
referrerPolicy
noReferrer
:
BrowserUtils
.
linkHasNoReferrer
(
linkNode
)
originPrincipal
:
doc
.
nodePrincipal
triggeringPrincipal
:
doc
.
nodePrincipal
frameOuterWindowID
}
;
if
(
doc
.
nodePrincipal
.
originAttributes
.
userContextId
)
{
params
.
userContextId
=
doc
.
nodePrincipal
.
originAttributes
.
userContextId
;
}
openLinkIn
(
href
where
params
)
;
event
.
preventDefault
(
)
;
return
true
;
}
function
middleMousePaste
(
event
)
{
let
clipboard
=
readFromClipboard
(
)
;
if
(
!
clipboard
)
return
;
clipboard
=
clipboard
.
replace
(
/
\
s
*
\
n
\
s
*
/
g
"
"
)
;
clipboard
=
stripUnsafeProtocolOnPaste
(
clipboard
)
;
let
where
=
whereToOpenLink
(
event
true
false
)
;
let
lastLocationChange
;
if
(
where
=
=
"
current
"
)
{
lastLocationChange
=
gBrowser
.
selectedBrowser
.
lastLocationChange
;
}
getShortcutOrURIAndPostData
(
clipboard
)
.
then
(
data
=
>
{
try
{
makeURI
(
data
.
url
)
;
}
catch
(
ex
)
{
return
;
}
try
{
addToUrlbarHistory
(
data
.
url
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
if
(
where
!
=
"
current
"
|
|
lastLocationChange
=
=
gBrowser
.
selectedBrowser
.
lastLocationChange
)
{
openUILink
(
data
.
url
event
{
ignoreButton
:
true
allowInheritPrincipal
:
data
.
mayInheritPrincipal
triggeringPrincipal
:
gBrowser
.
selectedBrowser
.
contentPrincipal
}
)
;
}
}
)
;
if
(
event
instanceof
Event
)
{
event
.
stopPropagation
(
)
;
}
}
function
stripUnsafeProtocolOnPaste
(
pasteData
)
{
while
(
true
)
{
let
scheme
=
"
"
;
try
{
scheme
=
Services
.
io
.
extractScheme
(
pasteData
)
;
}
catch
(
ex
)
{
}
if
(
scheme
!
=
"
javascript
"
)
{
break
;
}
pasteData
=
pasteData
.
substring
(
pasteData
.
indexOf
(
"
:
"
)
+
1
)
;
}
return
pasteData
;
}
function
handleDroppedLink
(
event
urlOrLinks
nameOrTriggeringPrincipal
triggeringPrincipal
)
{
let
links
;
if
(
Array
.
isArray
(
urlOrLinks
)
)
{
links
=
urlOrLinks
;
triggeringPrincipal
=
nameOrTriggeringPrincipal
;
}
else
{
links
=
[
{
url
:
urlOrLinks
nameOrTriggeringPrincipal
type
:
"
"
}
]
;
}
let
lastLocationChange
=
gBrowser
.
selectedBrowser
.
lastLocationChange
;
let
userContextId
=
gBrowser
.
selectedBrowser
.
getAttribute
(
"
usercontextid
"
)
;
let
inBackground
=
false
;
if
(
event
)
{
inBackground
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
loadInBackground
"
)
;
if
(
event
.
shiftKey
)
inBackground
=
!
inBackground
;
}
(
async
function
(
)
{
if
(
links
.
length
>
=
Services
.
prefs
.
getIntPref
(
"
browser
.
tabs
.
maxOpenBeforeWarn
"
)
)
{
let
answer
=
await
OpenInTabsUtils
.
promiseConfirmOpenInTabs
(
links
.
length
window
)
;
if
(
!
answer
)
{
return
;
}
}
let
urls
=
[
]
;
let
postDatas
=
[
]
;
for
(
let
link
of
links
)
{
let
data
=
await
getShortcutOrURIAndPostData
(
link
.
url
)
;
urls
.
push
(
data
.
url
)
;
postDatas
.
push
(
data
.
postData
)
;
}
if
(
lastLocationChange
=
=
gBrowser
.
selectedBrowser
.
lastLocationChange
)
{
gBrowser
.
loadTabs
(
urls
{
inBackground
replace
:
true
allowThirdPartyFixup
:
false
postDatas
userContextId
triggeringPrincipal
}
)
;
}
}
)
(
)
;
if
(
event
)
{
event
.
preventDefault
(
)
;
}
}
function
BrowserSetForcedCharacterSet
(
aCharset
)
{
if
(
aCharset
)
{
gBrowser
.
selectedBrowser
.
characterSet
=
aCharset
;
PlacesUIUtils
.
setCharsetForPage
(
getWebNavigation
(
)
.
currentURI
aCharset
window
)
.
catch
(
Cu
.
reportError
)
;
}
BrowserCharsetReload
(
)
;
}
function
BrowserCharsetReload
(
)
{
BrowserReloadWithFlags
(
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_CHARSET_CHANGE
)
;
}
function
UpdateCurrentCharset
(
target
)
{
let
selectedCharset
=
CharsetMenu
.
foldCharset
(
gBrowser
.
selectedBrowser
.
characterSet
)
;
for
(
let
menuItem
of
target
.
getElementsByTagName
(
"
menuitem
"
)
)
{
let
isSelected
=
menuItem
.
getAttribute
(
"
charset
"
)
=
=
=
selectedCharset
;
menuItem
.
setAttribute
(
"
checked
"
isSelected
)
;
}
}
var
ToolbarContextMenu
=
{
updateDownloadsAutoHide
(
popup
)
{
let
checkbox
=
popup
.
querySelector
(
"
.
customize
-
context
-
autoHide
"
)
;
let
isDownloads
=
popup
.
triggerNode
&
&
[
"
downloads
-
button
"
"
wrapper
-
downloads
-
button
"
]
.
includes
(
popup
.
triggerNode
.
id
)
;
checkbox
.
hidden
=
!
isDownloads
;
if
(
DownloadsButton
.
autoHideDownloadsButton
)
{
checkbox
.
setAttribute
(
"
checked
"
"
true
"
)
;
}
else
{
checkbox
.
removeAttribute
(
"
checked
"
)
;
}
}
onDownloadsAutoHideChange
(
event
)
{
let
autoHide
=
event
.
target
.
getAttribute
(
"
checked
"
)
=
=
"
true
"
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
download
.
autohideButton
"
autoHide
)
;
}
_getUnwrappedTriggerNode
(
popup
)
{
let
{
triggerNode
}
=
popup
;
if
(
triggerNode
&
&
gCustomizeMode
.
isWrappedToolbarItem
(
triggerNode
)
)
{
return
triggerNode
.
firstElementChild
;
}
return
triggerNode
;
}
updateExtension
(
popup
)
{
let
removeExtension
=
popup
.
querySelector
(
"
.
customize
-
context
-
removeExtension
"
)
;
let
manageExtension
=
removeExtension
.
nextElementSibling
;
let
separator
=
manageExtension
.
nextElementSibling
;
let
node
=
this
.
_getUnwrappedTriggerNode
(
popup
)
;
let
isWebExt
=
node
&
&
node
.
hasAttribute
(
"
data
-
extensionid
"
)
;
removeExtension
.
hidden
=
manageExtension
.
hidden
=
separator
.
hidden
=
!
isWebExt
;
}
async
removeExtensionForContextAction
(
popup
)
{
let
id
=
this
.
_getUnwrappedTriggerNode
(
popup
)
.
getAttribute
(
"
data
-
extensionid
"
)
;
let
addon
=
await
AddonManager
.
getAddonByID
(
id
)
;
let
{
name
}
=
addon
;
let
brand
=
document
.
getElementById
(
"
bundle_brand
"
)
.
getString
(
"
brandShorterName
"
)
;
let
{
getFormattedString
getString
}
=
gNavigatorBundle
;
let
title
=
getFormattedString
(
"
webext
.
remove
.
confirmation
.
title
"
[
name
]
)
;
let
message
=
getFormattedString
(
"
webext
.
remove
.
confirmation
.
message
"
[
name
brand
]
)
;
let
btnTitle
=
getString
(
"
webext
.
remove
.
confirmation
.
button
"
)
;
let
{
BUTTON_TITLE_IS_STRING
:
titleString
BUTTON_TITLE_CANCEL
:
titleCancel
BUTTON_POS_0
BUTTON_POS_1
confirmEx
}
=
Services
.
prompt
;
let
btnFlags
=
BUTTON_POS_0
*
titleString
+
BUTTON_POS_1
*
titleCancel
;
let
response
=
confirmEx
(
null
title
message
btnFlags
btnTitle
null
null
null
{
value
:
0
}
)
;
if
(
response
=
=
0
)
{
addon
.
uninstall
(
)
;
}
}
openAboutAddonsForContextAction
(
popup
)
{
let
id
=
this
.
_getUnwrappedTriggerNode
(
popup
)
.
getAttribute
(
"
data
-
extensionid
"
)
;
let
viewID
=
"
addons
:
/
/
detail
/
"
+
encodeURIComponent
(
id
)
;
BrowserOpenAddonsMgr
(
viewID
)
;
}
}
;
var
gPageStyleMenu
=
{
_pageStyleSheets
:
new
WeakMap
(
)
init
(
)
{
let
mm
=
window
.
messageManager
;
mm
.
addMessageListener
(
"
PageStyle
:
StyleSheets
"
(
msg
)
=
>
{
this
.
_pageStyleSheets
.
set
(
msg
.
target
.
permanentKey
msg
.
data
)
;
}
)
;
}
getBrowserStyleSheets
(
browser
)
{
if
(
!
browser
)
{
browser
=
gBrowser
.
selectedBrowser
;
}
let
data
=
this
.
_pageStyleSheets
.
get
(
browser
.
permanentKey
)
;
if
(
!
data
)
{
return
[
]
;
}
return
data
.
filteredStyleSheets
;
}
_getStyleSheetInfo
(
browser
)
{
let
data
=
this
.
_pageStyleSheets
.
get
(
browser
.
permanentKey
)
;
if
(
!
data
)
{
return
{
filteredStyleSheets
:
[
]
authorStyleDisabled
:
false
preferredStyleSheetSet
:
true
}
;
}
return
data
;
}
fillPopup
(
menuPopup
)
{
let
styleSheetInfo
=
this
.
_getStyleSheetInfo
(
gBrowser
.
selectedBrowser
)
;
var
noStyle
=
menuPopup
.
firstElementChild
;
var
persistentOnly
=
noStyle
.
nextElementSibling
;
var
sep
=
persistentOnly
.
nextElementSibling
;
while
(
sep
.
nextElementSibling
)
menuPopup
.
removeChild
(
sep
.
nextElementSibling
)
;
let
styleSheets
=
styleSheetInfo
.
filteredStyleSheets
;
var
currentStyleSheets
=
{
}
;
var
styleDisabled
=
styleSheetInfo
.
authorStyleDisabled
;
var
haveAltSheets
=
false
;
var
altStyleSelected
=
false
;
for
(
let
currentStyleSheet
of
styleSheets
)
{
if
(
!
currentStyleSheet
.
disabled
)
altStyleSelected
=
true
;
haveAltSheets
=
true
;
let
lastWithSameTitle
=
null
;
if
(
currentStyleSheet
.
title
in
currentStyleSheets
)
lastWithSameTitle
=
currentStyleSheets
[
currentStyleSheet
.
title
]
;
if
(
!
lastWithSameTitle
)
{
let
menuItem
=
document
.
createXULElement
(
"
menuitem
"
)
;
menuItem
.
setAttribute
(
"
type
"
"
radio
"
)
;
menuItem
.
setAttribute
(
"
label
"
currentStyleSheet
.
title
)
;
menuItem
.
setAttribute
(
"
data
"
currentStyleSheet
.
title
)
;
menuItem
.
setAttribute
(
"
checked
"
!
currentStyleSheet
.
disabled
&
&
!
styleDisabled
)
;
menuItem
.
setAttribute
(
"
oncommand
"
"
gPageStyleMenu
.
switchStyleSheet
(
this
.
getAttribute
(
'
data
'
)
)
;
"
)
;
menuPopup
.
appendChild
(
menuItem
)
;
currentStyleSheets
[
currentStyleSheet
.
title
]
=
menuItem
;
}
else
if
(
currentStyleSheet
.
disabled
)
{
lastWithSameTitle
.
removeAttribute
(
"
checked
"
)
;
}
}
noStyle
.
setAttribute
(
"
checked
"
styleDisabled
)
;
persistentOnly
.
setAttribute
(
"
checked
"
!
altStyleSelected
&
&
!
styleDisabled
)
;
persistentOnly
.
hidden
=
styleSheetInfo
.
preferredStyleSheetSet
?
haveAltSheets
:
false
;
sep
.
hidden
=
(
noStyle
.
hidden
&
&
persistentOnly
.
hidden
)
|
|
!
haveAltSheets
;
}
switchStyleSheet
(
title
)
{
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
mm
.
sendAsyncMessage
(
"
PageStyle
:
Switch
"
{
title
}
)
;
}
disableStyle
(
)
{
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
mm
.
sendAsyncMessage
(
"
PageStyle
:
Disable
"
)
;
}
}
;
var
LanguageDetectionListener
=
{
init
(
)
{
window
.
messageManager
.
addMessageListener
(
"
Translation
:
DocumentState
"
msg
=
>
{
Translation
.
documentStateReceived
(
msg
.
target
msg
.
data
)
;
}
)
;
}
}
;
var
BrowserOffline
=
{
_inited
:
false
init
(
)
{
if
(
!
this
.
_uiElement
)
this
.
_uiElement
=
document
.
getElementById
(
"
cmd_toggleOfflineStatus
"
)
;
Services
.
obs
.
addObserver
(
this
"
network
:
offline
-
status
-
changed
"
)
;
this
.
_updateOfflineUI
(
Services
.
io
.
offline
)
;
this
.
_inited
=
true
;
}
uninit
(
)
{
if
(
this
.
_inited
)
{
Services
.
obs
.
removeObserver
(
this
"
network
:
offline
-
status
-
changed
"
)
;
}
}
toggleOfflineStatus
(
)
{
var
ioService
=
Services
.
io
;
if
(
!
ioService
.
offline
&
&
!
this
.
_canGoOffline
(
)
)
{
this
.
_updateOfflineUI
(
false
)
;
return
;
}
ioService
.
offline
=
!
ioService
.
offline
;
}
observe
(
aSubject
aTopic
aState
)
{
if
(
aTopic
!
=
"
network
:
offline
-
status
-
changed
"
)
return
;
this
.
_updateOfflineUI
(
Services
.
io
.
offline
)
;
}
_canGoOffline
(
)
{
try
{
var
cancelGoOffline
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
Services
.
obs
.
notifyObservers
(
cancelGoOffline
"
offline
-
requested
"
)
;
if
(
cancelGoOffline
.
data
)
return
false
;
}
catch
(
ex
)
{
}
return
true
;
}
_uiElement
:
null
_updateOfflineUI
(
aOffline
)
{
var
offlineLocked
=
Services
.
prefs
.
prefIsLocked
(
"
network
.
online
"
)
;
if
(
offlineLocked
)
this
.
_uiElement
.
setAttribute
(
"
disabled
"
"
true
"
)
;
this
.
_uiElement
.
setAttribute
(
"
checked
"
aOffline
)
;
}
}
;
var
OfflineApps
=
{
warnUsage
(
browser
uri
)
{
if
(
!
browser
)
return
;
let
mainAction
=
{
label
:
gNavigatorBundle
.
getString
(
"
offlineApps
.
manageUsage
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
offlineApps
.
manageUsageAccessKey
"
)
callback
:
this
.
manage
}
;
let
warnQuotaKB
=
Services
.
prefs
.
getIntPref
(
"
offline
-
apps
.
quota
.
warn
"
)
;
let
message
=
gNavigatorBundle
.
getFormattedString
(
"
offlineApps
.
usage
"
[
uri
.
host
warnQuotaKB
/
1024
]
)
;
let
anchorID
=
"
indexedDB
-
notification
-
icon
"
;
let
options
=
{
persistent
:
true
hideClose
:
true
}
;
PopupNotifications
.
show
(
browser
"
offline
-
app
-
usage
"
message
anchorID
mainAction
null
options
)
;
Services
.
perms
.
add
(
uri
"
offline
-
app
"
Ci
.
nsIOfflineCacheUpdateService
.
ALLOW_NO_WARN
)
;
}
_getOfflineAppUsage
(
host
groups
)
{
let
cacheService
=
Cc
[
"
mozilla
.
org
/
network
/
application
-
cache
-
service
;
1
"
]
.
getService
(
Ci
.
nsIApplicationCacheService
)
;
if
(
!
groups
)
{
try
{
groups
=
cacheService
.
getGroups
(
)
;
}
catch
(
ex
)
{
return
0
;
}
}
let
usage
=
0
;
for
(
let
group
of
groups
)
{
let
uri
=
Services
.
io
.
newURI
(
group
)
;
if
(
uri
.
asciiHost
=
=
host
)
{
let
cache
=
cacheService
.
getActiveCache
(
group
)
;
usage
+
=
cache
.
usage
;
}
}
return
usage
;
}
_usedMoreThanWarnQuota
(
uri
)
{
if
(
Services
.
perms
.
testExactPermission
(
uri
"
offline
-
app
"
)
!
=
Ci
.
nsIOfflineCacheUpdateService
.
ALLOW_NO_WARN
)
{
let
usageBytes
=
this
.
_getOfflineAppUsage
(
uri
.
asciiHost
)
;
let
warnQuotaKB
=
Services
.
prefs
.
getIntPref
(
"
offline
-
apps
.
quota
.
warn
"
)
;
if
(
usageBytes
>
=
warnQuotaKB
*
1024
)
{
return
true
;
}
}
return
false
;
}
requestPermission
(
browser
docId
uri
)
{
let
host
=
uri
.
asciiHost
;
let
notificationID
=
"
offline
-
app
-
requested
-
"
+
host
;
let
notification
=
PopupNotifications
.
getNotification
(
notificationID
browser
)
;
if
(
notification
)
{
notification
.
options
.
controlledItems
.
push
(
[
Cu
.
getWeakReference
(
browser
)
docId
uri
]
)
;
}
else
{
let
mainAction
=
{
label
:
gNavigatorBundle
.
getString
(
"
offlineApps
.
allowStoring
.
label
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
offlineApps
.
allowStoring
.
accesskey
"
)
callback
(
)
{
for
(
let
[
ciBrowser
ciDocId
ciUri
]
of
notification
.
options
.
controlledItems
)
{
OfflineApps
.
allowSite
(
ciBrowser
ciDocId
ciUri
)
;
}
}
}
;
let
secondaryActions
=
[
{
label
:
gNavigatorBundle
.
getString
(
"
offlineApps
.
dontAllow
.
label
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
offlineApps
.
dontAllow
.
accesskey
"
)
callback
(
)
{
for
(
let
[
ciUri
]
of
notification
.
options
.
controlledItems
)
{
OfflineApps
.
disallowSite
(
ciUri
)
;
}
}
}
]
;
let
message
=
gNavigatorBundle
.
getFormattedString
(
"
offlineApps
.
available2
"
[
host
]
)
;
let
anchorID
=
"
indexedDB
-
notification
-
icon
"
;
let
options
=
{
persistent
:
true
hideClose
:
true
controlledItems
:
[
[
Cu
.
getWeakReference
(
browser
)
docId
uri
]
]
}
;
notification
=
PopupNotifications
.
show
(
browser
notificationID
message
anchorID
mainAction
secondaryActions
options
)
;
}
}
disallowSite
(
uri
)
{
Services
.
perms
.
add
(
uri
"
offline
-
app
"
Services
.
perms
.
DENY_ACTION
)
;
}
allowSite
(
browserRef
docId
uri
)
{
Services
.
perms
.
add
(
uri
"
offline
-
app
"
Services
.
perms
.
ALLOW_ACTION
)
;
let
browser
=
browserRef
.
get
(
)
;
if
(
browser
&
&
browser
.
messageManager
)
{
browser
.
messageManager
.
sendAsyncMessage
(
"
OfflineApps
:
StartFetching
"
{
docId
}
)
;
}
}
manage
(
)
{
openPreferences
(
"
panePrivacy
"
{
origin
:
"
offlineApps
"
}
)
;
}
receiveMessage
(
msg
)
{
switch
(
msg
.
name
)
{
case
"
OfflineApps
:
CheckUsage
"
:
let
uri
=
makeURI
(
msg
.
data
.
uri
)
;
if
(
this
.
_usedMoreThanWarnQuota
(
uri
)
)
{
this
.
warnUsage
(
msg
.
target
uri
)
;
}
break
;
case
"
OfflineApps
:
RequestPermission
"
:
this
.
requestPermission
(
msg
.
target
msg
.
data
.
docId
makeURI
(
msg
.
data
.
uri
)
)
;
break
;
}
}
init
(
)
{
let
mm
=
window
.
messageManager
;
mm
.
addMessageListener
(
"
OfflineApps
:
CheckUsage
"
this
)
;
mm
.
addMessageListener
(
"
OfflineApps
:
RequestPermission
"
this
)
;
}
}
;
var
IndexedDBPromptHelper
=
{
_permissionsPrompt
:
"
indexedDB
-
permissions
-
prompt
"
_permissionsResponse
:
"
indexedDB
-
permissions
-
response
"
_notificationIcon
:
"
indexedDB
-
notification
-
icon
"
init
:
function
IndexedDBPromptHelper_init
(
)
{
Services
.
obs
.
addObserver
(
this
this
.
_permissionsPrompt
)
;
}
uninit
:
function
IndexedDBPromptHelper_uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
this
.
_permissionsPrompt
)
;
}
observe
:
function
IndexedDBPromptHelper_observe
(
subject
topic
data
)
{
if
(
topic
!
=
this
.
_permissionsPrompt
)
{
throw
new
Error
(
"
Unexpected
topic
!
"
)
;
}
var
request
=
subject
.
QueryInterface
(
Ci
.
nsIIDBPermissionsRequest
)
;
var
browser
=
request
.
browserElement
;
if
(
browser
.
ownerGlobal
!
=
window
)
{
return
;
}
var
host
=
browser
.
currentURI
.
asciiHost
|
|
browser
.
currentURI
.
pathQueryRef
;
var
message
;
var
responseTopic
;
if
(
topic
=
=
this
.
_permissionsPrompt
)
{
message
=
gNavigatorBundle
.
getFormattedString
(
"
offlineApps
.
available2
"
[
host
]
)
;
responseTopic
=
this
.
_permissionsResponse
;
}
var
observer
=
request
.
responseObserver
;
var
mainAction
=
{
label
:
gNavigatorBundle
.
getString
(
"
offlineApps
.
allowStoring
.
label
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
offlineApps
.
allowStoring
.
accesskey
"
)
callback
(
)
{
observer
.
observe
(
null
responseTopic
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
}
}
;
var
secondaryActions
=
[
{
label
:
gNavigatorBundle
.
getString
(
"
offlineApps
.
dontAllow
.
label
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
offlineApps
.
dontAllow
.
accesskey
"
)
callback
(
)
{
observer
.
observe
(
null
responseTopic
Ci
.
nsIPermissionManager
.
DENY_ACTION
)
;
}
}
]
;
PopupNotifications
.
show
(
browser
topic
message
this
.
_notificationIcon
mainAction
secondaryActions
{
persistent
:
true
hideClose
:
!
Services
.
prefs
.
getBoolPref
(
"
privacy
.
permissionPrompts
.
showCloseButton
"
)
}
)
;
}
}
;
var
CanvasPermissionPromptHelper
=
{
_permissionsPrompt
:
"
canvas
-
permissions
-
prompt
"
_notificationIcon
:
"
canvas
-
notification
-
icon
"
init
(
)
{
Services
.
obs
.
addObserver
(
this
this
.
_permissionsPrompt
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
this
.
_permissionsPrompt
)
;
}
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
!
=
this
.
_permissionsPrompt
)
{
return
;
}
let
browser
;
if
(
aSubject
instanceof
Ci
.
nsIDOMWindow
)
{
let
contentWindow
=
aSubject
.
QueryInterface
(
Ci
.
nsIDOMWindow
)
;
browser
=
gBrowser
.
getBrowserForContentWindow
(
contentWindow
)
;
}
else
{
browser
=
aSubject
.
QueryInterface
(
Ci
.
nsIBrowser
)
;
}
let
uri
=
Services
.
io
.
newURI
(
aData
)
;
if
(
gBrowser
.
selectedBrowser
!
=
=
browser
)
{
return
;
}
let
message
=
gNavigatorBundle
.
getFormattedString
(
"
canvas
.
siteprompt
"
[
"
<
>
"
]
1
)
;
function
setCanvasPermission
(
aURI
aPerm
aPersistent
)
{
Services
.
perms
.
add
(
aURI
"
canvas
"
aPerm
aPersistent
?
Ci
.
nsIPermissionManager
.
EXPIRE_NEVER
:
Ci
.
nsIPermissionManager
.
EXPIRE_SESSION
)
;
}
let
mainAction
=
{
label
:
gNavigatorBundle
.
getString
(
"
canvas
.
allow
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
canvas
.
allow
.
accesskey
"
)
callback
(
state
)
{
setCanvasPermission
(
uri
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
state
&
&
state
.
checkboxChecked
)
;
}
}
;
let
secondaryActions
=
[
{
label
:
gNavigatorBundle
.
getString
(
"
canvas
.
notAllow
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
canvas
.
notAllow
.
accesskey
"
)
callback
(
state
)
{
setCanvasPermission
(
uri
Ci
.
nsIPermissionManager
.
DENY_ACTION
state
&
&
state
.
checkboxChecked
)
;
}
}
]
;
let
checkbox
=
{
show
:
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
}
;
if
(
checkbox
.
show
)
{
checkbox
.
checked
=
true
;
checkbox
.
label
=
gBrowserBundle
.
GetStringFromName
(
"
canvas
.
remember
"
)
;
}
let
options
=
{
checkbox
name
:
uri
.
asciiHost
learnMoreURL
:
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
fingerprint
-
permission
"
}
;
PopupNotifications
.
show
(
browser
aTopic
message
this
.
_notificationIcon
mainAction
secondaryActions
options
)
;
}
}
;
var
WebAuthnPromptHelper
=
{
_icon
:
"
webauthn
-
notification
-
icon
"
_topic
:
"
webauthn
-
prompt
"
_current
:
null
_tid
:
0
init
(
)
{
Services
.
obs
.
addObserver
(
this
this
.
_topic
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
this
.
_topic
)
;
}
observe
(
aSubject
aTopic
aData
)
{
let
mgr
=
aSubject
.
QueryInterface
(
Ci
.
nsIU2FTokenManager
)
;
let
data
=
JSON
.
parse
(
aData
)
;
if
(
data
.
action
=
=
"
register
"
)
{
this
.
register
(
mgr
data
)
;
}
else
if
(
data
.
action
=
=
"
register
-
direct
"
)
{
this
.
registerDirect
(
mgr
data
)
;
}
else
if
(
data
.
action
=
=
"
sign
"
)
{
this
.
sign
(
mgr
data
)
;
}
else
if
(
data
.
action
=
=
"
cancel
"
)
{
this
.
cancel
(
data
)
;
}
}
register
(
mgr
{
origin
tid
}
)
{
let
mainAction
=
this
.
buildCancelAction
(
mgr
tid
)
;
this
.
show
(
tid
"
register
"
"
webauthn
.
registerPrompt2
"
origin
mainAction
)
;
}
registerDirect
(
mgr
{
origin
tid
}
)
{
let
mainAction
=
this
.
buildProceedAction
(
mgr
tid
)
;
let
secondaryActions
=
[
this
.
buildCancelAction
(
mgr
tid
)
]
;
let
learnMoreURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
webauthn
-
direct
-
attestation
"
;
let
options
=
{
learnMoreURL
checkbox
:
{
label
:
gNavigatorBundle
.
getString
(
"
webauthn
.
anonymize
"
)
}
}
;
this
.
show
(
tid
"
register
-
direct
"
"
webauthn
.
registerDirectPrompt2
"
origin
mainAction
secondaryActions
options
)
;
}
sign
(
mgr
{
origin
tid
}
)
{
let
mainAction
=
this
.
buildCancelAction
(
mgr
tid
)
;
this
.
show
(
tid
"
sign
"
"
webauthn
.
signPrompt2
"
origin
mainAction
)
;
}
show
(
tid
id
stringId
origin
mainAction
secondaryActions
=
[
]
options
=
{
}
)
{
this
.
reset
(
)
;
try
{
origin
=
Services
.
io
.
newURI
(
origin
)
.
asciiHost
;
}
catch
(
e
)
{
}
let
brandShortName
=
document
.
getElementById
(
"
bundle_brand
"
)
.
getString
(
"
brandShortName
"
)
;
let
message
=
gNavigatorBundle
.
getFormattedString
(
stringId
[
"
<
>
"
brandShortName
]
1
)
;
options
.
name
=
origin
;
options
.
hideClose
=
true
;
options
.
eventCallback
=
event
=
>
{
if
(
event
=
=
"
removed
"
)
{
this
.
_current
=
null
;
this
.
_tid
=
0
;
}
}
;
this
.
_tid
=
tid
;
this
.
_current
=
PopupNotifications
.
show
(
gBrowser
.
selectedBrowser
webauthn
-
prompt
-
{
id
}
message
this
.
_icon
mainAction
secondaryActions
options
)
;
}
cancel
(
{
tid
}
)
{
if
(
this
.
_tid
=
=
tid
)
{
this
.
reset
(
)
;
}
}
reset
(
)
{
if
(
this
.
_current
)
{
this
.
_current
.
remove
(
)
;
}
}
buildProceedAction
(
mgr
tid
)
{
return
{
label
:
gNavigatorBundle
.
getString
(
"
webauthn
.
proceed
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
webauthn
.
proceed
.
accesskey
"
)
callback
(
state
)
{
mgr
.
resumeRegister
(
tid
state
.
checkboxChecked
)
;
}
}
;
}
buildCancelAction
(
mgr
tid
)
{
return
{
label
:
gNavigatorBundle
.
getString
(
"
webauthn
.
cancel
"
)
accessKey
:
gNavigatorBundle
.
getString
(
"
webauthn
.
cancel
.
accesskey
"
)
callback
(
)
{
mgr
.
cancel
(
tid
)
;
}
}
;
}
}
;
function
CanCloseWindow
(
)
{
if
(
Services
.
startup
.
shuttingDown
|
|
window
.
skipNextCanClose
)
{
return
true
;
}
let
timedOutProcesses
=
new
WeakSet
(
)
;
for
(
let
browser
of
gBrowser
.
browsers
)
{
if
(
!
browser
.
isConnected
)
{
continue
;
}
let
pmm
=
browser
.
messageManager
.
processMessageManager
;
if
(
timedOutProcesses
.
has
(
pmm
)
)
{
continue
;
}
let
{
permitUnload
timedOut
}
=
browser
.
permitUnload
(
)
;
if
(
timedOut
)
{
timedOutProcesses
.
add
(
pmm
)
;
continue
;
}
if
(
!
permitUnload
)
{
return
false
;
}
}
return
true
;
}
function
WindowIsClosing
(
)
{
if
(
!
closeWindow
(
false
warnAboutClosingWindow
)
)
return
false
;
if
(
CanCloseWindow
(
)
)
{
window
.
skipNextCanClose
=
true
;
return
true
;
}
return
false
;
}
function
warnAboutClosingWindow
(
)
{
let
isPBWindow
=
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
&
&
!
PrivateBrowsingUtils
.
permanentPrivateBrowsing
;
let
closingTabs
=
gBrowser
.
tabs
.
length
-
gBrowser
.
_removingTabs
.
length
;
if
(
!
isPBWindow
&
&
!
toolbar
.
visible
)
return
gBrowser
.
warnAboutClosingTabs
(
closingTabs
gBrowser
.
closingTabsEnum
.
ALL
)
;
let
otherPBWindowExists
=
false
;
let
nonPopupPresent
=
false
;
for
(
let
win
of
browserWindows
(
)
)
{
if
(
!
win
.
closed
&
&
win
!
=
window
)
{
if
(
isPBWindow
&
&
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
)
otherPBWindowExists
=
true
;
if
(
win
.
toolbar
.
visible
)
nonPopupPresent
=
true
;
if
(
(
!
isPBWindow
|
|
otherPBWindowExists
)
&
&
nonPopupPresent
)
break
;
}
}
if
(
isPBWindow
&
&
!
otherPBWindowExists
)
{
let
exitingCanceled
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
exitingCanceled
.
data
=
false
;
Services
.
obs
.
notifyObservers
(
exitingCanceled
"
last
-
pb
-
context
-
exiting
"
)
;
if
(
exitingCanceled
.
data
)
return
false
;
}
if
(
nonPopupPresent
)
{
return
isPBWindow
|
|
gBrowser
.
warnAboutClosingTabs
(
closingTabs
gBrowser
.
closingTabsEnum
.
ALL
)
;
}
let
os
=
Services
.
obs
;
let
closingCanceled
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
os
.
notifyObservers
(
closingCanceled
"
browser
-
lastwindow
-
close
-
requested
"
)
;
if
(
closingCanceled
.
data
)
return
false
;
os
.
notifyObservers
(
null
"
browser
-
lastwindow
-
close
-
granted
"
)
;
return
AppConstants
.
platform
!
=
"
macosx
"
|
|
(
isPBWindow
|
|
gBrowser
.
warnAboutClosingTabs
(
closingTabs
gBrowser
.
closingTabsEnum
.
ALL
)
)
;
}
var
MailIntegration
=
{
sendLinkForBrowser
(
aBrowser
)
{
this
.
sendMessage
(
gURLBar
.
makeURIReadable
(
aBrowser
.
currentURI
)
.
displaySpec
aBrowser
.
contentTitle
)
;
}
sendMessage
(
aBody
aSubject
)
{
var
mailtoUrl
=
"
mailto
:
"
;
if
(
aBody
)
{
mailtoUrl
+
=
"
?
body
=
"
+
encodeURIComponent
(
aBody
)
;
mailtoUrl
+
=
"
&
subject
=
"
+
encodeURIComponent
(
aSubject
)
;
}
var
uri
=
makeURI
(
mailtoUrl
)
;
this
.
_launchExternalUrl
(
uri
)
;
}
_launchExternalUrl
(
aURL
)
{
var
extProtocolSvc
=
Cc
[
"
mozilla
.
org
/
uriloader
/
external
-
protocol
-
service
;
1
"
]
.
getService
(
Ci
.
nsIExternalProtocolService
)
;
if
(
extProtocolSvc
)
extProtocolSvc
.
loadURI
(
aURL
)
;
}
}
;
function
BrowserOpenAddonsMgr
(
aView
)
{
return
new
Promise
(
resolve
=
>
{
let
emWindow
;
let
browserWindow
;
var
receivePong
=
function
(
aSubject
aTopic
aData
)
{
let
browserWin
=
aSubject
.
docShell
.
rootTreeItem
.
domWindow
;
if
(
!
emWindow
|
|
browserWin
=
=
window
)
{
emWindow
=
aSubject
;
browserWindow
=
browserWin
;
}
}
;
Services
.
obs
.
addObserver
(
receivePong
"
EM
-
pong
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
EM
-
ping
"
)
;
Services
.
obs
.
removeObserver
(
receivePong
"
EM
-
pong
"
)
;
if
(
emWindow
)
{
if
(
aView
)
{
emWindow
.
loadView
(
aView
)
;
}
browserWindow
.
gBrowser
.
selectedTab
=
browserWindow
.
gBrowser
.
_getTabForContentWindow
(
emWindow
)
;
emWindow
.
focus
(
)
;
resolve
(
emWindow
)
;
return
;
}
let
whereToOpen
=
(
window
.
gBrowser
&
&
isTabEmpty
(
gBrowser
.
selectedTab
)
)
?
"
current
"
:
"
tab
"
;
openTrustedLinkIn
(
"
about
:
addons
"
whereToOpen
)
;
Services
.
obs
.
addObserver
(
function
observer
(
aSubject
aTopic
aData
)
{
Services
.
obs
.
removeObserver
(
observer
aTopic
)
;
if
(
aView
)
{
aSubject
.
loadView
(
aView
)
;
}
aSubject
.
QueryInterface
(
Ci
.
nsIDOMWindow
)
;
aSubject
.
focus
(
)
;
resolve
(
aSubject
)
;
}
"
EM
-
loaded
"
)
;
}
)
;
}
function
BeginRecordExecution
(
)
{
gBrowser
.
selectedTab
=
gBrowser
.
addWebTab
(
"
about
:
blank
"
{
recordExecution
:
"
*
"
}
)
;
}
function
SaveRecordedExecution
(
)
{
let
fp
=
Cc
[
"
mozilla
.
org
/
filepicker
;
1
"
]
.
createInstance
(
Ci
.
nsIFilePicker
)
;
let
window
=
gBrowser
.
ownerGlobal
;
fp
.
init
(
window
null
Ci
.
nsIFilePicker
.
modeSave
)
;
fp
.
open
(
rv
=
>
{
if
(
rv
=
=
Ci
.
nsIFilePicker
.
returnOK
|
|
rv
=
=
Ci
.
nsIFilePicker
.
returnReplace
)
{
var
tabParent
=
gBrowser
.
selectedTab
.
linkedBrowser
.
frameLoader
.
tabParent
;
if
(
!
tabParent
|
|
!
tabParent
.
saveRecording
(
fp
.
file
.
path
)
)
{
window
.
alert
(
"
Current
tab
is
not
recording
"
)
;
}
}
}
)
;
}
function
BeginReplayExecution
(
)
{
let
fp
=
Cc
[
"
mozilla
.
org
/
filepicker
;
1
"
]
.
createInstance
(
Ci
.
nsIFilePicker
)
;
let
window
=
gBrowser
.
ownerGlobal
;
fp
.
init
(
window
null
Ci
.
nsIFilePicker
.
modeOpen
)
;
fp
.
open
(
rv
=
>
{
if
(
rv
=
=
Ci
.
nsIFilePicker
.
returnOK
|
|
rv
=
=
Ci
.
nsIFilePicker
.
returnReplace
)
{
gBrowser
.
selectedTab
=
gBrowser
.
addWebTab
(
null
{
replayExecution
:
fp
.
file
.
path
}
)
;
}
}
)
;
}
function
AddKeywordForSearchField
(
)
{
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
let
onMessage
=
(
message
)
=
>
{
mm
.
removeMessageListener
(
"
ContextMenu
:
SearchFieldBookmarkData
:
Result
"
onMessage
)
;
let
bookmarkData
=
message
.
data
;
let
title
=
gNavigatorBundle
.
getFormattedString
(
"
addKeywordTitleAutoFill
"
[
bookmarkData
.
title
]
)
;
PlacesUIUtils
.
showBookmarkDialog
(
{
action
:
"
add
"
type
:
"
bookmark
"
uri
:
makeURI
(
bookmarkData
.
spec
)
title
keyword
:
"
"
postData
:
bookmarkData
.
postData
charSet
:
bookmarkData
.
charset
hiddenRows
:
[
"
location
"
"
tags
"
]
}
window
)
;
}
;
mm
.
addMessageListener
(
"
ContextMenu
:
SearchFieldBookmarkData
:
Result
"
onMessage
)
;
mm
.
sendAsyncMessage
(
"
ContextMenu
:
SearchFieldBookmarkData
"
{
}
{
target
:
gContextMenu
.
target
}
)
;
}
function
undoCloseTab
(
aIndex
)
{
var
blankTabToRemove
=
null
;
if
(
gBrowser
.
tabs
.
length
=
=
1
&
&
isTabEmpty
(
gBrowser
.
selectedTab
)
)
blankTabToRemove
=
gBrowser
.
selectedTab
;
var
tab
=
null
;
if
(
SessionStore
.
getClosedTabCount
(
window
)
>
(
aIndex
|
|
0
)
)
{
tab
=
SessionStore
.
undoCloseTab
(
window
aIndex
|
|
0
)
;
if
(
blankTabToRemove
)
gBrowser
.
removeTab
(
blankTabToRemove
)
;
}
return
tab
;
}
function
undoCloseWindow
(
aIndex
)
{
let
window
=
null
;
if
(
SessionStore
.
getClosedWindowCount
(
)
>
(
aIndex
|
|
0
)
)
window
=
SessionStore
.
undoCloseWindow
(
aIndex
|
|
0
)
;
return
window
;
}
function
isTabEmpty
(
aTab
)
{
if
(
aTab
.
hasAttribute
(
"
busy
"
)
)
return
false
;
if
(
aTab
.
hasAttribute
(
"
customizemode
"
)
)
return
false
;
let
browser
=
aTab
.
linkedBrowser
;
if
(
!
isBlankPageURL
(
browser
.
currentURI
.
spec
)
)
return
false
;
if
(
!
checkEmptyPageOrigin
(
browser
)
)
return
false
;
if
(
browser
.
canGoForward
|
|
browser
.
canGoBack
)
return
false
;
return
true
;
}
function
checkEmptyPageOrigin
(
browser
=
gBrowser
.
selectedBrowser
uri
=
browser
.
currentURI
)
{
if
(
browser
.
hasContentOpener
)
{
return
false
;
}
let
contentPrincipal
=
browser
.
contentPrincipal
;
if
(
contentPrincipal
.
URI
)
{
let
uriToCheck
=
browser
.
documentURI
|
|
uri
;
if
(
(
uriToCheck
.
spec
=
=
"
about
:
blank
"
&
&
contentPrincipal
.
isNullPrincipal
)
|
|
contentPrincipal
.
URI
.
spec
=
=
"
about
:
blank
"
)
{
return
true
;
}
return
contentPrincipal
.
URI
.
equals
(
uri
)
;
}
let
ssm
=
Services
.
scriptSecurityManager
;
return
ssm
.
isSystemPrincipal
(
contentPrincipal
)
;
}
function
ReportFalseDeceptiveSite
(
)
{
let
docURI
=
gBrowser
.
selectedBrowser
.
documentURI
;
let
isPhishingPage
=
docURI
&
&
docURI
.
spec
.
startsWith
(
"
about
:
blocked
?
e
=
deceptiveBlocked
"
)
;
if
(
isPhishingPage
)
{
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
let
onMessage
=
(
message
)
=
>
{
mm
.
removeMessageListener
(
"
DeceptiveBlockedDetails
:
Result
"
onMessage
)
;
let
reportUrl
=
gSafeBrowsing
.
getReportURL
(
"
PhishMistake
"
message
.
data
.
blockedInfo
)
;
if
(
reportUrl
)
{
openTrustedLinkIn
(
reportUrl
"
tab
"
)
;
}
else
{
let
bundle
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
safebrowsing
/
safebrowsing
.
properties
"
)
;
Services
.
prompt
.
alert
(
window
bundle
.
GetStringFromName
(
"
errorReportFalseDeceptiveTitle
"
)
bundle
.
formatStringFromName
(
"
errorReportFalseDeceptiveMessage
"
[
message
.
data
.
blockedInfo
.
provider
]
1
)
)
;
}
}
;
mm
.
addMessageListener
(
"
DeceptiveBlockedDetails
:
Result
"
onMessage
)
;
mm
.
sendAsyncMessage
(
"
DeceptiveBlockedDetails
"
)
;
}
}
function
formatURL
(
aFormat
aIsPref
)
{
return
aIsPref
?
Services
.
urlFormatter
.
formatURLPref
(
aFormat
)
:
Services
.
urlFormatter
.
formatURL
(
aFormat
)
;
}
const
gRemoteControl
=
{
observe
(
subject
topic
data
)
{
gRemoteControl
.
updateVisualCue
(
data
)
;
}
updateVisualCue
(
enabled
)
{
const
mainWindow
=
document
.
documentElement
;
if
(
enabled
)
{
mainWindow
.
setAttribute
(
"
remotecontrol
"
"
true
"
)
;
}
else
{
mainWindow
.
removeAttribute
(
"
remotecontrol
"
)
;
}
}
}
;
function
getTabModalPromptBox
(
aWindow
)
{
var
foundBrowser
=
gBrowser
.
getBrowserForDocument
(
aWindow
.
document
)
;
if
(
foundBrowser
)
return
gBrowser
.
getTabModalPromptBox
(
foundBrowser
)
;
return
null
;
}
function
getBrowser
(
)
{
return
gBrowser
;
}
const
gAccessibilityServiceIndicator
=
{
init
(
)
{
Services
.
prefs
.
addObserver
(
"
accessibility
.
indicator
.
enabled
"
this
)
;
Services
.
obs
.
addObserver
(
this
"
a11y
-
init
-
or
-
shutdown
"
)
;
this
.
update
(
Services
.
appinfo
.
accessibilityEnabled
)
;
}
update
(
accessibilityEnabled
=
false
)
{
if
(
this
.
enabled
&
&
accessibilityEnabled
)
{
this
.
_active
=
true
;
document
.
documentElement
.
setAttribute
(
"
accessibilitymode
"
"
true
"
)
;
[
.
.
.
document
.
querySelectorAll
(
"
.
accessibility
-
indicator
"
)
]
.
forEach
(
indicator
=
>
[
"
click
"
"
keypress
"
]
.
forEach
(
type
=
>
indicator
.
addEventListener
(
type
this
)
)
)
;
TabsInTitlebar
.
update
(
)
;
}
else
if
(
this
.
_active
)
{
this
.
_active
=
false
;
document
.
documentElement
.
removeAttribute
(
"
accessibilitymode
"
)
;
[
.
.
.
document
.
querySelectorAll
(
"
.
accessibility
-
indicator
"
)
]
.
forEach
(
indicator
=
>
[
"
click
"
"
keypress
"
]
.
forEach
(
type
=
>
indicator
.
removeEventListener
(
type
this
)
)
)
;
TabsInTitlebar
.
update
(
)
;
}
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
nsPref
:
changed
"
&
&
data
=
=
=
"
accessibility
.
indicator
.
enabled
"
)
{
this
.
update
(
Services
.
appinfo
.
accessibilityEnabled
)
;
}
else
if
(
topic
=
=
=
"
a11y
-
init
-
or
-
shutdown
"
)
{
this
.
update
(
data
=
=
=
"
1
"
)
;
}
}
get
enabled
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
accessibility
.
indicator
.
enabled
"
)
;
}
handleEvent
(
{
key
type
}
)
{
if
(
(
type
=
=
=
"
keypress
"
&
&
[
"
"
"
Enter
"
]
.
includes
(
key
)
)
|
|
type
=
=
=
"
click
"
)
{
let
a11yServicesSupportURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
accessibility
.
support
.
url
"
)
;
gBrowser
.
selectedTab
=
gBrowser
.
addTrustedTab
(
a11yServicesSupportURL
)
;
Services
.
telemetry
.
scalarSet
(
"
a11y
.
indicator_acted_on
"
true
)
;
}
}
uninit
(
)
{
Services
.
prefs
.
removeObserver
(
"
accessibility
.
indicator
.
enabled
"
this
)
;
Services
.
obs
.
removeObserver
(
this
"
a11y
-
init
-
or
-
shutdown
"
)
;
this
.
update
(
)
;
}
}
;
var
gPrivateBrowsingUI
=
{
init
:
function
PBUI_init
(
)
{
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
return
;
}
document
.
getElementById
(
"
Tools
:
Sanitize
"
)
.
setAttribute
(
"
disabled
"
"
true
"
)
;
if
(
window
.
location
.
href
=
=
AppConstants
.
BROWSER_CHROME_URL
)
{
let
docElement
=
document
.
documentElement
;
if
(
!
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
{
docElement
.
setAttribute
(
"
title
"
docElement
.
getAttribute
(
"
title_privatebrowsing
"
)
)
;
docElement
.
setAttribute
(
"
titlemodifier
"
docElement
.
getAttribute
(
"
titlemodifier_privatebrowsing
"
)
)
;
}
docElement
.
setAttribute
(
"
privatebrowsingmode
"
PrivateBrowsingUtils
.
permanentPrivateBrowsing
?
"
permanent
"
:
"
temporary
"
)
;
gBrowser
.
updateTitlebar
(
)
;
if
(
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
{
[
{
normal
:
"
menu_newNavigator
"
private
:
"
menu_newPrivateWindow
"
}
]
.
forEach
(
function
(
menu
)
{
let
newWindow
=
document
.
getElementById
(
menu
.
normal
)
;
let
newPrivateWindow
=
document
.
getElementById
(
menu
.
private
)
;
if
(
newWindow
&
&
newPrivateWindow
)
{
newPrivateWindow
.
hidden
=
true
;
newWindow
.
label
=
newPrivateWindow
.
label
;
newWindow
.
accessKey
=
newPrivateWindow
.
accessKey
;
newWindow
.
command
=
newPrivateWindow
.
command
;
}
}
)
;
}
}
let
urlBarSearchParam
=
gURLBar
.
getAttribute
(
"
autocompletesearchparam
"
)
|
|
"
"
;
if
(
!
PrivateBrowsingUtils
.
permanentPrivateBrowsing
&
&
!
urlBarSearchParam
.
includes
(
"
disable
-
private
-
actions
"
)
)
{
urlBarSearchParam
+
=
"
disable
-
private
-
actions
"
;
}
if
(
!
urlBarSearchParam
.
includes
(
"
private
-
window
"
)
)
{
urlBarSearchParam
+
=
"
private
-
window
"
;
}
gURLBar
.
setAttribute
(
"
autocompletesearchparam
"
urlBarSearchParam
)
;
}
}
;
function
switchToTabHavingURI
(
aURI
aOpenNew
aOpenParams
=
{
}
)
{
const
kPrivateBrowsingWhitelist
=
new
Set
(
[
"
about
:
addons
"
]
)
;
let
ignoreFragment
=
aOpenParams
.
ignoreFragment
;
let
ignoreQueryString
=
aOpenParams
.
ignoreQueryString
;
let
replaceQueryString
=
aOpenParams
.
replaceQueryString
;
let
adoptIntoActiveWindow
=
aOpenParams
.
adoptIntoActiveWindow
;
delete
aOpenParams
.
ignoreFragment
;
delete
aOpenParams
.
ignoreQueryString
;
delete
aOpenParams
.
replaceQueryString
;
delete
aOpenParams
.
adoptIntoActiveWindow
;
let
isBrowserWindow
=
!
!
window
.
gBrowser
;
function
switchIfURIInWindow
(
aWindow
)
{
if
(
!
kPrivateBrowsingWhitelist
.
has
(
aURI
.
spec
)
&
&
(
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
|
|
PrivateBrowsingUtils
.
isWindowPrivate
(
aWindow
)
)
&
&
!
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
{
return
false
;
}
function
cleanURL
(
url
removeQuery
removeFragment
)
{
let
ret
=
url
;
if
(
removeFragment
)
{
ret
=
ret
.
split
(
"
#
"
)
[
0
]
;
if
(
removeQuery
)
{
ret
=
ret
.
split
(
"
?
"
)
[
0
]
;
}
}
else
if
(
removeQuery
)
{
let
fragment
=
ret
.
split
(
"
#
"
)
[
1
]
;
ret
=
ret
.
split
(
"
?
"
)
[
0
]
.
concat
(
(
fragment
!
=
undefined
)
?
"
#
"
.
concat
(
fragment
)
:
"
"
)
;
}
return
ret
;
}
let
ignoreFragmentWhenComparing
=
typeof
ignoreFragment
=
=
"
string
"
&
&
ignoreFragment
.
startsWith
(
"
whenComparing
"
)
;
let
requestedCompare
=
cleanURL
(
aURI
.
displaySpec
ignoreQueryString
|
|
replaceQueryString
ignoreFragmentWhenComparing
)
;
let
browsers
=
aWindow
.
gBrowser
.
browsers
;
for
(
let
i
=
0
;
i
<
browsers
.
length
;
i
+
+
)
{
let
browser
=
browsers
[
i
]
;
let
browserCompare
=
cleanURL
(
browser
.
currentURI
.
displaySpec
ignoreQueryString
|
|
replaceQueryString
ignoreFragmentWhenComparing
)
;
if
(
requestedCompare
=
=
browserCompare
)
{
let
doAdopt
=
adoptIntoActiveWindow
&
&
isBrowserWindow
&
&
aWindow
!
=
window
;
if
(
doAdopt
)
{
window
.
gBrowser
.
adoptTab
(
aWindow
.
gBrowser
.
getTabForBrowser
(
browser
)
window
.
gBrowser
.
tabContainer
.
selectedIndex
+
1
true
)
;
}
else
{
aWindow
.
focus
(
)
;
}
if
(
ignoreFragment
=
=
"
whenComparingAndReplace
"
|
|
replaceQueryString
)
{
browser
.
loadURI
(
aURI
.
spec
)
;
}
if
(
!
doAdopt
)
{
aWindow
.
gBrowser
.
tabContainer
.
selectedIndex
=
i
;
}
return
true
;
}
}
return
false
;
}
if
(
!
(
aURI
instanceof
Ci
.
nsIURI
)
)
aURI
=
Services
.
io
.
newURI
(
aURI
)
;
if
(
isBrowserWindow
&
&
switchIfURIInWindow
(
window
)
)
return
true
;
for
(
let
browserWin
of
browserWindows
(
)
)
{
if
(
browserWin
.
closed
|
|
browserWin
=
=
window
)
continue
;
if
(
switchIfURIInWindow
(
browserWin
)
)
return
true
;
}
if
(
aOpenNew
)
{
if
(
isBrowserWindow
&
&
isTabEmpty
(
gBrowser
.
selectedTab
)
)
openTrustedLinkIn
(
aURI
.
spec
"
current
"
aOpenParams
)
;
else
openTrustedLinkIn
(
aURI
.
spec
"
tab
"
aOpenParams
)
;
}
return
false
;
}
var
RestoreLastSessionObserver
=
{
init
(
)
{
if
(
SessionStore
.
canRestoreLastSession
&
&
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
{
Services
.
obs
.
addObserver
(
this
"
sessionstore
-
last
-
session
-
cleared
"
true
)
;
goSetCommandEnabled
(
"
Browser
:
RestoreLastSession
"
true
)
;
}
else
if
(
SessionStartup
.
isAutomaticRestoreEnabled
(
)
)
{
document
.
getElementById
(
"
Browser
:
RestoreLastSession
"
)
.
setAttribute
(
"
hidden
"
true
)
;
}
}
observe
(
)
{
Services
.
obs
.
removeObserver
(
this
"
sessionstore
-
last
-
session
-
cleared
"
)
;
goSetCommandEnabled
(
"
Browser
:
RestoreLastSession
"
false
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
}
;
var
MenuTouchModeObserver
=
{
init
(
)
{
window
.
addEventListener
(
"
popupshowing
"
this
true
)
;
}
handleEvent
(
event
)
{
let
target
=
event
.
originalTarget
;
if
(
event
.
mozInputSource
=
=
MouseEvent
.
MOZ_SOURCE_TOUCH
)
{
target
.
setAttribute
(
"
touchmode
"
"
true
"
)
;
}
else
{
target
.
removeAttribute
(
"
touchmode
"
)
;
}
}
uninit
(
)
{
window
.
removeEventListener
(
"
popupshowing
"
this
true
)
;
}
}
;
function
safeModeRestart
(
)
{
if
(
Services
.
appinfo
.
inSafeMode
)
{
let
cancelQuit
=
Cc
[
"
mozilla
.
org
/
supports
-
PRBool
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRBool
)
;
Services
.
obs
.
notifyObservers
(
cancelQuit
"
quit
-
application
-
requested
"
"
restart
"
)
;
if
(
cancelQuit
.
data
)
return
;
Services
.
startup
.
quit
(
Ci
.
nsIAppStartup
.
eRestart
|
Ci
.
nsIAppStartup
.
eAttemptQuit
)
;
return
;
}
Services
.
obs
.
notifyObservers
(
null
"
restart
-
in
-
safe
-
mode
"
)
;
}
function
duplicateTabIn
(
aTab
where
delta
)
{
switch
(
where
)
{
case
"
window
"
:
let
otherWin
=
OpenBrowserWindow
(
)
;
let
delayedStartupFinished
=
(
subject
topic
)
=
>
{
if
(
topic
=
=
"
browser
-
delayed
-
startup
-
finished
"
&
&
subject
=
=
otherWin
)
{
Services
.
obs
.
removeObserver
(
delayedStartupFinished
topic
)
;
let
otherGBrowser
=
otherWin
.
gBrowser
;
let
otherTab
=
otherGBrowser
.
selectedTab
;
SessionStore
.
duplicateTab
(
otherWin
aTab
delta
)
;
otherGBrowser
.
removeTab
(
otherTab
{
animate
:
false
}
)
;
}
}
;
Services
.
obs
.
addObserver
(
delayedStartupFinished
"
browser
-
delayed
-
startup
-
finished
"
)
;
break
;
case
"
tabshifted
"
:
SessionStore
.
duplicateTab
(
window
aTab
delta
)
;
break
;
case
"
tab
"
:
let
newTab
=
SessionStore
.
duplicateTab
(
window
aTab
delta
)
;
gBrowser
.
selectedTab
=
newTab
;
break
;
}
}
var
MousePosTracker
=
{
_listeners
:
new
Set
(
)
_x
:
0
_y
:
0
_mostRecentEvent
:
null
addListener
(
listener
)
{
if
(
this
.
_listeners
.
has
(
listener
)
)
{
return
;
}
listener
.
_hover
=
false
;
this
.
_listeners
.
add
(
listener
)
;
window
.
promiseDocumentFlushed
(
(
)
=
>
{
if
(
this
.
_listeners
.
has
(
listener
)
)
{
this
.
_callListeners
(
[
listener
]
)
;
window
.
requestAnimationFrame
(
(
)
=
>
{
if
(
this
.
_listeners
.
has
(
listener
)
&
&
listener
.
onTrackingStarted
)
{
listener
.
onTrackingStarted
(
)
;
}
}
)
;
}
}
)
;
}
removeListener
(
listener
)
{
this
.
_listeners
.
delete
(
listener
)
;
}
handleEvent
(
event
)
{
let
firstEvent
=
!
this
.
_mostRecentEvent
;
this
.
_mostRecentEvent
=
event
;
if
(
firstEvent
)
{
window
.
promiseDocumentFlushed
(
(
)
=
>
{
this
.
onDocumentFlushed
(
)
;
this
.
_mostRecentEvent
=
null
;
}
)
;
}
}
onDocumentFlushed
(
)
{
let
event
=
this
.
_mostRecentEvent
;
if
(
event
)
{
let
fullZoom
=
window
.
windowUtils
.
fullZoom
;
this
.
_x
=
event
.
screenX
/
fullZoom
-
window
.
mozInnerScreenX
;
this
.
_y
=
event
.
screenY
/
fullZoom
-
window
.
mozInnerScreenY
;
this
.
_callListeners
(
this
.
_listeners
)
;
}
}
_callListeners
(
listeners
)
{
let
functionsToCall
=
[
]
;
for
(
let
listener
of
listeners
)
{
let
rect
;
try
{
rect
=
listener
.
getMouseTargetRect
(
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
continue
;
}
let
hover
=
this
.
_x
>
=
rect
.
left
&
&
this
.
_x
<
=
rect
.
right
&
&
this
.
_y
>
=
rect
.
top
&
&
this
.
_y
<
=
rect
.
bottom
;
if
(
hover
=
=
listener
.
_hover
)
{
continue
;
}
listener
.
_hover
=
hover
;
if
(
hover
)
{
if
(
listener
.
onMouseEnter
)
{
functionsToCall
.
push
(
listener
.
onMouseEnter
.
bind
(
listener
)
)
;
}
}
else
if
(
listener
.
onMouseLeave
)
{
functionsToCall
.
push
(
listener
.
onMouseLeave
.
bind
(
listener
)
)
;
}
}
window
.
requestAnimationFrame
(
(
)
=
>
{
for
(
let
fn
of
functionsToCall
)
{
try
{
fn
(
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
}
)
;
}
}
;
var
ToolbarIconColor
=
{
_windowState
:
{
"
active
"
:
false
"
fullscreen
"
:
false
"
tabsintitlebar
"
:
false
}
init
(
)
{
this
.
_initialized
=
true
;
window
.
addEventListener
(
"
activate
"
this
)
;
window
.
addEventListener
(
"
deactivate
"
this
)
;
window
.
addEventListener
(
"
toolbarvisibilitychange
"
this
)
;
Services
.
obs
.
addObserver
(
this
"
lightweight
-
theme
-
styling
-
update
"
)
;
if
(
Services
.
focus
.
activeWindow
=
=
window
)
{
this
.
inferFromText
(
"
activate
"
)
;
}
}
uninit
(
)
{
this
.
_initialized
=
false
;
window
.
removeEventListener
(
"
activate
"
this
)
;
window
.
removeEventListener
(
"
deactivate
"
this
)
;
window
.
removeEventListener
(
"
toolbarvisibilitychange
"
this
)
;
Services
.
obs
.
removeObserver
(
this
"
lightweight
-
theme
-
styling
-
update
"
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
activate
"
:
case
"
deactivate
"
:
this
.
inferFromText
(
event
.
type
)
;
break
;
case
"
toolbarvisibilitychange
"
:
this
.
inferFromText
(
event
.
type
event
.
visible
)
;
break
;
}
}
observe
(
aSubject
aTopic
aData
)
{
switch
(
aTopic
)
{
case
"
lightweight
-
theme
-
styling
-
update
"
:
setTimeout
(
(
)
=
>
{
this
.
inferFromText
(
aTopic
)
;
}
0
)
;
break
;
}
}
_toolbarLuminanceCache
:
new
Map
(
)
inferFromText
(
reason
reasonValue
)
{
if
(
!
this
.
_initialized
)
return
;
function
parseRGB
(
aColorString
)
{
let
rgb
=
aColorString
.
match
(
/
^
rgba
?
\
(
(
\
d
+
)
(
\
d
+
)
(
\
d
+
)
/
)
;
rgb
.
shift
(
)
;
return
rgb
.
map
(
x
=
>
parseInt
(
x
)
)
;
}
switch
(
reason
)
{
case
"
activate
"
:
case
"
deactivate
"
:
this
.
_windowState
.
active
=
(
reason
=
=
=
"
activate
"
)
;
break
;
case
"
fullscreen
"
:
this
.
_windowState
.
fullscreen
=
reasonValue
;
break
;
case
"
lightweight
-
theme
-
styling
-
update
"
:
this
.
_toolbarLuminanceCache
.
clear
(
)
;
break
;
case
"
toolbarvisibilitychange
"
:
break
;
case
"
tabsintitlebar
"
:
this
.
_windowState
.
tabsintitlebar
=
reasonValue
;
break
;
}
let
toolbarSelector
=
"
.
browser
-
toolbar
:
not
(
[
collapsed
=
true
]
)
"
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
toolbarSelector
+
=
"
:
not
(
[
type
=
menubar
]
)
"
;
let
cachedLuminances
=
this
.
_toolbarLuminanceCache
;
let
luminances
=
new
Map
(
)
;
for
(
let
toolbar
of
document
.
querySelectorAll
(
toolbarSelector
)
)
{
let
cacheKey
=
toolbar
.
id
&
&
toolbar
.
id
+
JSON
.
stringify
(
this
.
_windowState
)
;
let
luminance
=
cacheKey
&
&
cachedLuminances
.
get
(
cacheKey
)
;
if
(
isNaN
(
luminance
)
)
{
let
[
r
g
b
]
=
parseRGB
(
getComputedStyle
(
toolbar
)
.
color
)
;
luminance
=
0
.
2125
*
r
+
0
.
7154
*
g
+
0
.
0721
*
b
;
if
(
cacheKey
)
{
cachedLuminances
.
set
(
cacheKey
luminance
)
;
}
}
luminances
.
set
(
toolbar
luminance
)
;
}
for
(
let
[
toolbar
luminance
]
of
luminances
)
{
if
(
luminance
<
=
110
)
toolbar
.
removeAttribute
(
"
brighttext
"
)
;
else
toolbar
.
setAttribute
(
"
brighttext
"
"
true
"
)
;
}
}
}
;
var
PanicButtonNotifier
=
{
init
(
)
{
this
.
_initialized
=
true
;
if
(
window
.
PanicButtonNotifierShouldNotify
)
{
delete
window
.
PanicButtonNotifierShouldNotify
;
this
.
notify
(
)
;
}
}
notify
(
)
{
if
(
!
this
.
_initialized
)
{
window
.
PanicButtonNotifierShouldNotify
=
true
;
return
;
}
try
{
let
popup
=
document
.
getElementById
(
"
panic
-
button
-
success
-
notification
"
)
;
popup
.
hidden
=
false
;
let
onTimeout
=
(
)
=
>
{
PanicButtonNotifier
.
close
(
)
;
removeListeners
(
)
;
}
;
popup
.
addEventListener
(
"
popupshown
"
function
(
)
{
PanicButtonNotifier
.
timer
=
setTimeout
(
onTimeout
3000
)
;
}
)
;
let
onUserInteractsWithPopup
=
(
)
=
>
{
clearTimeout
(
PanicButtonNotifier
.
timer
)
;
removeListeners
(
)
;
}
;
popup
.
addEventListener
(
"
mouseover
"
onUserInteractsWithPopup
)
;
window
.
addEventListener
(
"
keydown
"
onUserInteractsWithPopup
)
;
let
removeListeners
=
(
)
=
>
{
popup
.
removeEventListener
(
"
mouseover
"
onUserInteractsWithPopup
)
;
window
.
removeEventListener
(
"
keydown
"
onUserInteractsWithPopup
)
;
popup
.
removeEventListener
(
"
popuphidden
"
removeListeners
)
;
}
;
popup
.
addEventListener
(
"
popuphidden
"
removeListeners
)
;
let
widget
=
CustomizableUI
.
getWidget
(
"
panic
-
button
"
)
.
forWindow
(
window
)
;
let
anchor
=
widget
.
anchor
;
anchor
=
document
.
getAnonymousElementByAttribute
(
anchor
"
class
"
"
toolbarbutton
-
icon
"
)
;
popup
.
openPopup
(
anchor
popup
.
getAttribute
(
"
position
"
)
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
}
}
close
(
)
{
let
popup
=
document
.
getElementById
(
"
panic
-
button
-
success
-
notification
"
)
;
popup
.
hidePopup
(
)
;
}
}
;
const
SafeBrowsingNotificationBox
=
{
_currentURIBaseDomain
:
null
show
(
title
buttons
)
{
let
uri
=
gBrowser
.
currentURI
;
this
.
_currentURIBaseDomain
=
Services
.
eTLD
.
getBaseDomain
(
uri
)
;
let
notificationBox
=
gBrowser
.
getNotificationBox
(
)
;
let
value
=
"
blocked
-
badware
-
page
"
;
let
previousNotification
=
notificationBox
.
getNotificationWithValue
(
value
)
;
if
(
previousNotification
)
{
notificationBox
.
removeNotification
(
previousNotification
)
;
}
let
notification
=
notificationBox
.
appendNotification
(
title
value
"
chrome
:
/
/
global
/
skin
/
icons
/
blacklist_favicon
.
png
"
notificationBox
.
PRIORITY_CRITICAL_HIGH
buttons
)
;
notification
.
persistence
=
-
1
;
}
onLocationChange
(
aLocationURI
)
{
if
(
!
this
.
_currentURIBaseDomain
)
{
return
;
}
let
newURIBaseDomain
=
Services
.
eTLD
.
getBaseDomain
(
aLocationURI
)
;
if
(
newURIBaseDomain
!
=
=
this
.
_currentURIBaseDomain
)
{
let
notificationBox
=
gBrowser
.
getNotificationBox
(
)
;
let
notification
=
notificationBox
.
getNotificationWithValue
(
"
blocked
-
badware
-
page
"
)
;
if
(
notification
)
{
notificationBox
.
removeNotification
(
notification
false
)
;
}
this
.
_currentURIBaseDomain
=
null
;
}
}
}
;
function
TabModalPromptBox
(
browser
)
{
this
.
_weakBrowserRef
=
Cu
.
getWeakReference
(
browser
)
;
}
TabModalPromptBox
.
prototype
=
{
_promptCloseCallback
(
onCloseCallback
principalToAllowFocusFor
allowFocusCheckbox
.
.
.
args
)
{
if
(
principalToAllowFocusFor
&
&
allowFocusCheckbox
&
&
allowFocusCheckbox
.
checked
)
{
Services
.
perms
.
addFromPrincipal
(
principalToAllowFocusFor
"
focus
-
tab
-
by
-
prompt
"
Services
.
perms
.
ALLOW_ACTION
)
;
}
onCloseCallback
.
apply
(
this
args
)
;
}
appendPrompt
(
args
onCloseCallback
)
{
let
newPrompt
=
document
.
createXULElement
(
"
tabmodalprompt
"
)
;
let
browser
=
this
.
browser
;
browser
.
parentNode
.
insertBefore
(
newPrompt
browser
.
nextElementSibling
)
;
browser
.
setAttribute
(
"
tabmodalPromptShowing
"
true
)
;
newPrompt
.
clientTop
;
let
prompts
=
this
.
listPrompts
(
)
;
if
(
prompts
.
length
>
1
)
{
newPrompt
.
hidden
=
true
;
}
let
principalToAllowFocusFor
=
this
.
_allowTabFocusByPromptPrincipal
;
delete
this
.
_allowTabFocusByPromptPrincipal
;
let
allowFocusCheckbox
;
let
hostForAllowFocusCheckbox
=
"
"
;
try
{
hostForAllowFocusCheckbox
=
principalToAllowFocusFor
.
URI
.
host
;
}
catch
(
ex
)
{
}
if
(
hostForAllowFocusCheckbox
)
{
let
allowFocusRow
=
document
.
createXULElement
(
"
row
"
)
;
allowFocusCheckbox
=
document
.
createXULElement
(
"
checkbox
"
)
;
let
spacer
=
document
.
createXULElement
(
"
spacer
"
)
;
allowFocusRow
.
appendChild
(
spacer
)
;
let
label
=
gTabBrowserBundle
.
formatStringFromName
(
"
tabs
.
allowTabFocusByPromptForSite
"
[
hostForAllowFocusCheckbox
]
1
)
;
allowFocusCheckbox
.
setAttribute
(
"
label
"
label
)
;
allowFocusRow
.
appendChild
(
allowFocusCheckbox
)
;
newPrompt
.
appendChild
(
allowFocusRow
)
;
}
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
let
closeCB
=
this
.
_promptCloseCallback
.
bind
(
null
onCloseCallback
principalToAllowFocusFor
allowFocusCheckbox
)
;
newPrompt
.
init
(
args
tab
closeCB
)
;
return
newPrompt
;
}
removePrompt
(
aPrompt
)
{
let
browser
=
this
.
browser
;
browser
.
parentNode
.
removeChild
(
aPrompt
)
;
let
prompts
=
this
.
listPrompts
(
)
;
if
(
prompts
.
length
)
{
let
prompt
=
prompts
[
prompts
.
length
-
1
]
;
prompt
.
hidden
=
false
;
prompt
.
Dialog
.
setDefaultFocus
(
)
;
}
else
{
browser
.
removeAttribute
(
"
tabmodalPromptShowing
"
)
;
browser
.
focus
(
)
;
}
}
listPrompts
(
aPrompt
)
{
const
XUL_NS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
let
els
=
this
.
browser
.
parentNode
.
getElementsByTagNameNS
(
XUL_NS
"
tabmodalprompt
"
)
;
return
Array
.
from
(
els
)
;
}
onNextPromptShowAllowFocusCheckboxFor
(
principal
)
{
this
.
_allowTabFocusByPromptPrincipal
=
principal
;
}
get
browser
(
)
{
let
browser
=
this
.
_weakBrowserRef
.
get
(
)
;
if
(
!
browser
)
{
throw
"
Stale
promptbox
!
The
associated
browser
is
gone
.
"
;
}
return
browser
;
}
}
;
var
ConfirmationHint
=
{
show
(
anchor
messageId
options
=
{
}
)
{
this
.
_message
.
textContent
=
gBrowserBundle
.
GetStringFromName
(
"
confirmationHint
.
"
+
messageId
+
"
.
label
"
)
;
if
(
options
.
hideArrow
)
{
this
.
_panel
.
setAttribute
(
"
hidearrow
"
"
true
"
)
;
}
this
.
_panel
.
addEventListener
(
"
popupshown
"
(
)
=
>
{
this
.
_animationBox
.
setAttribute
(
"
animate
"
"
true
"
)
;
const
DURATION
=
1500
;
setTimeout
(
(
)
=
>
{
this
.
_panel
.
hidePopup
(
true
)
;
}
DURATION
+
120
)
;
}
{
once
:
true
}
)
;
this
.
_panel
.
addEventListener
(
"
popuphidden
"
(
)
=
>
{
this
.
_panel
.
removeAttribute
(
"
hidearrow
"
)
;
this
.
_animationBox
.
removeAttribute
(
"
animate
"
)
;
}
{
once
:
true
}
)
;
this
.
_panel
.
hidden
=
false
;
this
.
_panel
.
openPopup
(
anchor
{
position
:
"
bottomcenter
topright
"
triggerEvent
:
options
.
event
}
)
;
}
get
_panel
(
)
{
delete
this
.
_panel
;
return
this
.
_panel
=
document
.
getElementById
(
"
confirmation
-
hint
"
)
;
}
get
_animationBox
(
)
{
delete
this
.
_animationBox
;
return
this
.
_animationBox
=
document
.
getElementById
(
"
confirmation
-
hint
-
checkmark
-
animation
-
container
"
)
;
}
get
_message
(
)
{
delete
this
.
_message
;
return
this
.
_message
=
document
.
getElementById
(
"
confirmation
-
hint
-
message
"
)
;
}
}
;
