var
gProtectionsHandler
=
{
get
_protectionsPopup
(
)
{
delete
this
.
_protectionsPopup
;
return
this
.
_protectionsPopup
=
document
.
getElementById
(
"
protections
-
popup
"
)
;
}
get
_protectionsIconBox
(
)
{
delete
this
.
_protectionsIconBox
;
return
this
.
_protectionsIconBox
=
document
.
getElementById
(
"
tracking
-
protection
-
icon
-
animatable
-
box
"
)
;
}
get
_protectionsPopupMainViewHeaderLabel
(
)
{
delete
this
.
_protectionsPopupMainViewHeaderLabel
;
return
this
.
_protectionsPopupMainViewHeaderLabel
=
document
.
getElementById
(
"
protections
-
popup
-
mainView
-
panel
-
header
-
span
"
)
;
}
get
_protectionsPopupTPSwitch
(
)
{
delete
this
.
_protectionsPopupTPSwitch
;
return
this
.
_protectionsPopupTPSwitch
=
document
.
getElementById
(
"
protections
-
popup
-
tp
-
switch
"
)
;
}
get
_protectionPopupSettingsButton
(
)
{
delete
this
.
_protectionPopupSettingsButton
;
return
this
.
_protectionPopupSettingsButton
=
document
.
getElementById
(
"
protections
-
popup
-
settings
-
button
"
)
;
}
get
_protectionPopupFooter
(
)
{
delete
this
.
_protectionPopupFooter
;
return
this
.
_protectionPopupFooter
=
document
.
getElementById
(
"
protections
-
popup
-
footer
"
)
;
}
get
_protectionPopupTrackersCounterDescription
(
)
{
delete
this
.
_protectionPopupTrackersCounterDescription
;
return
this
.
_protectionPopupTrackersCounterDescription
=
document
.
getElementById
(
"
protections
-
popup
-
trackers
-
blocked
-
counter
-
description
"
)
;
}
handleProtectionsButtonEvent
(
event
)
{
event
.
stopPropagation
(
)
;
if
(
(
event
.
type
=
=
"
click
"
&
&
event
.
button
!
=
0
)
|
|
(
event
.
type
=
=
"
keypress
"
&
&
event
.
charCode
!
=
KeyEvent
.
DOM_VK_SPACE
&
&
event
.
keyCode
!
=
KeyEvent
.
DOM_VK_RETURN
)
)
{
return
;
}
this
.
_protectionsPopup
.
hidden
=
false
;
this
.
refreshProtectionsPopup
(
)
;
PanelMultiView
.
openPopup
(
this
.
_protectionsPopup
gIdentityHandler
.
_identityIcon
{
position
:
"
bottomcenter
topleft
"
triggerEvent
:
event
}
)
.
catch
(
Cu
.
reportError
)
;
}
onPopupShown
(
event
)
{
if
(
event
.
target
=
=
this
.
_protectionsPopup
)
{
window
.
addEventListener
(
"
focus
"
this
true
)
;
}
}
onPopupHidden
(
event
)
{
if
(
event
.
target
=
=
this
.
_protectionsPopup
)
{
window
.
removeEventListener
(
"
focus
"
this
true
)
;
this
.
_protectionsPopup
.
removeAttribute
(
"
open
"
)
;
}
}
handleEvent
(
event
)
{
let
elem
=
document
.
activeElement
;
let
position
=
elem
.
compareDocumentPosition
(
this
.
_protectionsPopup
)
;
if
(
!
(
position
&
(
Node
.
DOCUMENT_POSITION_CONTAINS
|
Node
.
DOCUMENT_POSITION_CONTAINED_BY
)
)
&
&
!
this
.
_protectionsPopup
.
hasAttribute
(
"
noautohide
"
)
)
{
PanelMultiView
.
hidePopup
(
this
.
_protectionsPopup
)
;
}
}
refreshProtectionsPopup
(
)
{
this
.
_protectionsPopupTPSwitch
.
toggleAttribute
(
"
enabled
"
!
this
.
_protectionsPopup
.
hasAttribute
(
"
hasException
"
)
)
;
let
host
=
gIdentityHandler
.
getHostForDisplay
(
)
;
this
.
_protectionsPopupMainViewHeaderLabel
.
textContent
=
Tracking
Protections
for
{
host
}
;
let
currentlyEnabled
=
!
this
.
_protectionsPopup
.
hasAttribute
(
"
hasException
"
)
;
this
.
_protectionsPopupTPSwitch
.
toggleAttribute
(
"
enabled
"
currentlyEnabled
)
;
this
.
setTrackersBlockedCounter
(
244051
)
;
}
async
onTPSwitchCommand
(
event
)
{
if
(
this
.
_TPSwitchCommanding
)
{
return
;
}
this
.
_TPSwitchCommanding
=
true
;
let
newExceptionState
=
this
.
_protectionsPopup
.
toggleAttribute
(
"
hasException
"
)
;
this
.
_protectionsPopupTPSwitch
.
toggleAttribute
(
"
enabled
"
!
newExceptionState
)
;
await
new
Promise
(
(
resolve
)
=
>
setTimeout
(
resolve
500
)
)
;
if
(
newExceptionState
)
{
ContentBlocking
.
disableForCurrentPage
(
)
;
gIdentityHandler
.
recordClick
(
"
unblock
"
)
;
}
else
{
ContentBlocking
.
enableForCurrentPage
(
)
;
gIdentityHandler
.
recordClick
(
"
block
"
)
;
}
PanelMultiView
.
hidePopup
(
this
.
_protectionsPopup
)
;
delete
this
.
_TPSwitchCommanding
;
}
setTrackersBlockedCounter
(
trackerCount
)
{
this
.
_protectionPopupTrackersCounterDescription
.
textContent
=
Trackers
blocked
this
week
:
{
trackerCount
.
toLocaleString
(
)
}
;
}
}
;
