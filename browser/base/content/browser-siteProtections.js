var
gProtectionsHandler
=
{
get
_protectionsPopup
(
)
{
delete
this
.
_protectionsPopup
;
return
(
this
.
_protectionsPopup
=
document
.
getElementById
(
"
protections
-
popup
"
)
)
;
}
get
_protectionsIconBox
(
)
{
delete
this
.
_protectionsIconBox
;
return
(
this
.
_protectionsIconBox
=
document
.
getElementById
(
"
tracking
-
protection
-
icon
-
animatable
-
box
"
)
)
;
}
get
_protectionsPopupMultiView
(
)
{
delete
this
.
_protectionsPopupMultiView
;
return
(
this
.
_protectionsPopupMultiView
=
document
.
getElementById
(
"
protections
-
popup
-
multiView
"
)
)
;
}
get
_protectionsPopupMainView
(
)
{
delete
this
.
_protectionsPopupMainView
;
return
(
this
.
_protectionsPopupMainView
=
document
.
getElementById
(
"
protections
-
popup
-
mainView
"
)
)
;
}
get
_protectionsPopupMainViewHeaderLabel
(
)
{
delete
this
.
_protectionsPopupMainViewHeaderLabel
;
return
(
this
.
_protectionsPopupMainViewHeaderLabel
=
document
.
getElementById
(
"
protections
-
popup
-
mainView
-
panel
-
header
-
span
"
)
)
;
}
get
_protectionsPopupTPSwitchBreakageLink
(
)
{
delete
this
.
_protectionsPopupTPSwitchBreakageLink
;
return
(
this
.
_protectionsPopupTPSwitchBreakageLink
=
document
.
getElementById
(
"
protections
-
popup
-
tp
-
switch
-
breakage
-
link
"
)
)
;
}
get
_protectionsPopupTPSwitch
(
)
{
delete
this
.
_protectionsPopupTPSwitch
;
return
(
this
.
_protectionsPopupTPSwitch
=
document
.
getElementById
(
"
protections
-
popup
-
tp
-
switch
"
)
)
;
}
get
_protectionPopupSettingsButton
(
)
{
delete
this
.
_protectionPopupSettingsButton
;
return
(
this
.
_protectionPopupSettingsButton
=
document
.
getElementById
(
"
protections
-
popup
-
settings
-
button
"
)
)
;
}
get
_protectionPopupFooter
(
)
{
delete
this
.
_protectionPopupFooter
;
return
(
this
.
_protectionPopupFooter
=
document
.
getElementById
(
"
protections
-
popup
-
footer
"
)
)
;
}
get
_protectionPopupTrackersCounterDescription
(
)
{
delete
this
.
_protectionPopupTrackersCounterDescription
;
return
(
this
.
_protectionPopupTrackersCounterDescription
=
document
.
getElementById
(
"
protections
-
popup
-
trackers
-
blocked
-
counter
-
description
"
)
)
;
}
get
_protectionsPopupSiteNotWorkingTPSwitch
(
)
{
delete
this
.
_protectionsPopupSiteNotWorkingTPSwitch
;
return
(
this
.
_protectionsPopupSiteNotWorkingTPSwitch
=
document
.
getElementById
(
"
protections
-
popup
-
siteNotWorking
-
tp
-
switch
"
)
)
;
}
get
_protectionsPopupSendReportLearnMore
(
)
{
delete
this
.
_protectionsPopupSendReportLearnMore
;
return
(
this
.
_protectionsPopupSendReportLearnMore
=
document
.
getElementById
(
"
protections
-
popup
-
sendReportView
-
learn
-
more
"
)
)
;
}
get
_protectionsPopupSendReportURL
(
)
{
delete
this
.
_protectionsPopupSendReportURL
;
return
(
this
.
_protectionsPopupSendReportURL
=
document
.
getElementById
(
"
protections
-
popup
-
sendReportView
-
collection
-
url
"
)
)
;
}
get
_protectionsPopupToastTimeout
(
)
{
delete
this
.
_protectionsPopupToastTimeout
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
_protectionsPopupToastTimeout
"
"
browser
.
protections_panel
.
toast
.
timeout
"
5000
)
;
return
this
.
_protectionsPopupToastTimeout
;
}
handleProtectionsButtonEvent
(
event
)
{
event
.
stopPropagation
(
)
;
if
(
(
event
.
type
=
=
"
click
"
&
&
event
.
button
!
=
0
)
|
|
(
event
.
type
=
=
"
keypress
"
&
&
event
.
charCode
!
=
KeyEvent
.
DOM_VK_SPACE
&
&
event
.
keyCode
!
=
KeyEvent
.
DOM_VK_RETURN
)
)
{
return
;
}
this
.
showProtectionsPopup
(
{
event
}
)
;
}
onPopupShown
(
event
)
{
if
(
event
.
target
=
=
this
.
_protectionsPopup
)
{
window
.
addEventListener
(
"
focus
"
this
true
)
;
}
}
onPopupHidden
(
event
)
{
if
(
event
.
target
=
=
this
.
_protectionsPopup
)
{
window
.
removeEventListener
(
"
focus
"
this
true
)
;
this
.
_protectionsPopup
.
removeAttribute
(
"
open
"
)
;
}
}
onHeaderClicked
(
event
)
{
if
(
this
.
_protectionsPopup
.
hasAttribute
(
"
toast
"
)
)
{
PanelMultiView
.
hidePopup
(
this
.
_protectionsPopup
)
;
this
.
showProtectionsPopup
(
{
event
}
)
;
}
}
onLocationChange
(
)
{
if
(
!
this
.
_showToastAfterRefresh
)
{
return
;
}
this
.
_showToastAfterRefresh
=
false
;
if
(
this
.
_previousURI
!
=
gBrowser
.
currentURI
.
spec
|
|
this
.
_previousOuterWindowID
!
=
gBrowser
.
selectedBrowser
.
outerWindowID
)
{
return
;
}
this
.
showProtectionsPopup
(
{
toast
:
true
}
)
;
}
handleEvent
(
event
)
{
let
elem
=
document
.
activeElement
;
let
position
=
elem
.
compareDocumentPosition
(
this
.
_protectionsPopup
)
;
if
(
!
(
position
&
(
Node
.
DOCUMENT_POSITION_CONTAINS
|
Node
.
DOCUMENT_POSITION_CONTAINED_BY
)
)
&
&
!
this
.
_protectionsPopup
.
hasAttribute
(
"
noautohide
"
)
)
{
PanelMultiView
.
hidePopup
(
this
.
_protectionsPopup
)
;
}
}
refreshProtectionsPopup
(
)
{
let
host
=
gIdentityHandler
.
getHostForDisplay
(
)
;
this
.
_protectionsPopupMainViewHeaderLabel
.
textContent
=
Tracking
Protections
for
{
host
}
;
let
currentlyEnabled
=
!
this
.
_protectionsPopup
.
hasAttribute
(
"
hasException
"
)
;
for
(
let
tpSwitch
of
[
this
.
_protectionsPopupTPSwitch
this
.
_protectionsPopupSiteNotWorkingTPSwitch
]
)
{
tpSwitch
.
toggleAttribute
(
"
enabled
"
currentlyEnabled
)
;
}
this
.
_protectionsPopupTPSwitchBreakageLink
.
hidden
=
!
currentlyEnabled
;
this
.
setTrackersBlockedCounter
(
244051
)
;
}
async
onTPSwitchCommand
(
event
)
{
if
(
this
.
_TPSwitchCommanding
)
{
return
;
}
this
.
_TPSwitchCommanding
=
true
;
let
newExceptionState
=
this
.
_protectionsPopup
.
toggleAttribute
(
"
hasException
"
)
;
for
(
let
tpSwitch
of
[
this
.
_protectionsPopupTPSwitch
this
.
_protectionsPopupSiteNotWorkingTPSwitch
]
)
{
tpSwitch
.
toggleAttribute
(
"
enabled
"
!
newExceptionState
)
;
}
this
.
_showToastAfterRefresh
=
true
;
this
.
_previousURI
=
gBrowser
.
currentURI
.
spec
;
this
.
_previousOuterWindowID
=
gBrowser
.
selectedBrowser
.
outerWindowID
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
500
)
)
;
if
(
newExceptionState
)
{
ContentBlocking
.
disableForCurrentPage
(
)
;
gIdentityHandler
.
recordClick
(
"
unblock
"
)
;
}
else
{
ContentBlocking
.
enableForCurrentPage
(
)
;
gIdentityHandler
.
recordClick
(
"
block
"
)
;
}
PanelMultiView
.
hidePopup
(
this
.
_protectionsPopup
)
;
delete
this
.
_TPSwitchCommanding
;
}
setTrackersBlockedCounter
(
trackerCount
)
{
this
.
_protectionPopupTrackersCounterDescription
.
textContent
=
Trackers
blocked
this
week
:
{
trackerCount
.
toLocaleString
(
)
}
;
}
showProtectionsPopup
(
options
=
{
}
)
{
const
{
event
toast
}
=
options
;
if
(
this
.
_toastPanelTimer
)
{
clearTimeout
(
this
.
_toastPanelTimer
)
;
delete
this
.
_toastPanelTimer
;
}
this
.
_protectionsPopup
.
hidden
=
false
;
this
.
_protectionsPopup
.
toggleAttribute
(
"
toast
"
!
!
toast
)
;
if
(
!
toast
)
{
this
.
refreshProtectionsPopup
(
)
;
}
if
(
toast
)
{
this
.
_protectionsPopup
.
addEventListener
(
"
popupshown
"
(
)
=
>
{
this
.
_toastPanelTimer
=
setTimeout
(
(
)
=
>
{
PanelMultiView
.
hidePopup
(
this
.
_protectionsPopup
)
;
delete
this
.
_toastPanelTimer
;
}
this
.
_protectionsPopupToastTimeout
)
;
}
{
once
:
true
}
)
;
}
PanelMultiView
.
openPopup
(
this
.
_protectionsPopup
gIdentityHandler
.
_identityIcon
{
position
:
"
bottomcenter
topleft
"
triggerEvent
:
event
}
)
.
catch
(
Cu
.
reportError
)
;
}
showSiteNotWorkingView
(
)
{
this
.
_protectionsPopupMultiView
.
showSubView
(
"
protections
-
popup
-
siteNotWorkingView
"
)
;
}
showSendReportView
(
)
{
this
.
reportURI
=
gBrowser
.
currentURI
;
let
urlWithoutQuery
=
this
.
reportURI
.
asciiSpec
.
replace
(
"
?
"
+
this
.
reportURI
.
query
"
"
)
;
this
.
_protectionsPopupSendReportURL
.
value
=
urlWithoutQuery
;
this
.
_protectionsPopupMultiView
.
showSubView
(
"
protections
-
popup
-
sendReportView
"
)
;
}
onSendReportClicked
(
)
{
this
.
_protectionsPopup
.
hidePopup
(
)
;
let
comments
=
document
.
getElementById
(
"
protections
-
popup
-
sendReportView
-
collection
-
comments
"
)
;
ContentBlocking
.
submitBreakageReport
(
this
.
reportURI
comments
)
;
}
}
;
let
baseURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
;
gProtectionsHandler
.
_protectionsPopupSendReportLearnMore
.
href
=
baseURL
+
"
blocking
-
breakage
"
;
