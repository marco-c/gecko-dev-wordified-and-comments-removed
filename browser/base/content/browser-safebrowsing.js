var
gSafeBrowsing
=
{
setReportPhishingMenu
(
)
{
var
docURI
=
gBrowser
.
selectedBrowser
.
documentURI
;
var
isPhishingPage
=
docURI
&
&
docURI
.
spec
.
startsWith
(
"
about
:
blocked
?
e
=
deceptiveBlocked
"
)
;
document
.
getElementById
(
"
menu_HelpPopup_reportPhishingtoolmenu
"
)
.
hidden
=
isPhishingPage
;
document
.
getElementById
(
"
menu_HelpPopup_reportPhishingErrortoolmenu
"
)
.
hidden
=
!
isPhishingPage
;
const
uri
=
gBrowser
.
currentURI
;
const
isReportablePage
=
uri
&
&
(
uri
.
schemeIs
(
"
http
"
)
|
|
uri
.
schemeIs
(
"
https
"
)
)
;
const
disabledByPolicy
=
!
Services
.
policies
.
isAllowed
(
"
feedbackCommands
"
)
;
const
reportBroadcaster
=
document
.
getElementById
(
"
reportPhishingBroadcaster
"
)
;
if
(
disabledByPolicy
|
|
isPhishingPage
|
|
!
isReportablePage
)
{
reportBroadcaster
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
else
{
reportBroadcaster
.
removeAttribute
(
"
disabled
"
)
;
}
const
reportErrorBroadcaster
=
document
.
getElementById
(
"
reportPhishingErrorBroadcaster
"
)
;
if
(
disabledByPolicy
|
|
!
isPhishingPage
|
|
!
isReportablePage
)
{
reportErrorBroadcaster
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
else
{
reportErrorBroadcaster
.
removeAttribute
(
"
disabled
"
)
;
}
}
getReportURL
(
name
info
)
{
let
reportInfo
=
info
;
if
(
!
reportInfo
)
{
let
pageUri
=
gBrowser
.
currentURI
.
clone
(
)
;
if
(
pageUri
instanceof
Ci
.
nsIURL
)
{
pageUri
=
pageUri
.
mutate
(
)
.
setQuery
(
"
"
)
.
finalize
(
)
;
}
reportInfo
=
{
uri
:
pageUri
.
asciiSpec
}
;
}
return
SafeBrowsing
.
getReportURL
(
name
reportInfo
)
;
}
}
;
