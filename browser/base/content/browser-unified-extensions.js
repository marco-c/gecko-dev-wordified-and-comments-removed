ChromeUtils
.
defineModuleGetter
(
this
"
OriginControls
"
"
resource
:
/
/
gre
/
modules
/
ExtensionPermissions
.
jsm
"
)
;
customElements
.
define
(
"
unified
-
extensions
-
item
"
class
extends
HTMLElement
{
setAddon
(
addon
)
{
this
.
addon
=
addon
;
}
connectedCallback
(
)
{
if
(
this
.
_menuButton
)
{
return
;
}
const
template
=
document
.
getElementById
(
"
unified
-
extensions
-
item
-
template
"
)
;
this
.
appendChild
(
template
.
content
.
cloneNode
(
true
)
)
;
this
.
_actionButton
=
this
.
querySelector
(
"
.
unified
-
extensions
-
item
-
action
-
button
"
)
;
this
.
_menuButton
=
this
.
querySelector
(
"
.
unified
-
extensions
-
item
-
menu
-
button
"
)
;
this
.
_menuButton
.
addEventListener
(
"
blur
"
this
)
;
this
.
_menuButton
.
addEventListener
(
"
focus
"
this
)
;
this
.
addEventListener
(
"
command
"
this
)
;
this
.
addEventListener
(
"
mouseout
"
this
)
;
this
.
addEventListener
(
"
mouseover
"
this
)
;
this
.
render
(
)
;
}
handleEvent
(
event
)
{
const
{
target
}
=
event
;
switch
(
event
.
type
)
{
case
"
command
"
:
if
(
target
=
=
=
this
.
_menuButton
)
{
const
popup
=
target
.
ownerDocument
.
getElementById
(
"
unified
-
extensions
-
context
-
menu
"
)
;
popup
.
openPopup
(
target
"
after_end
"
0
0
true
false
event
)
;
}
else
if
(
target
=
=
=
this
.
_actionButton
)
{
const
extension
=
WebExtensionPolicy
.
getByID
(
this
.
addon
.
id
)
?
.
extension
;
if
(
!
extension
)
{
return
;
}
const
win
=
event
.
target
.
ownerGlobal
;
const
tab
=
win
.
gBrowser
.
selectedTab
;
extension
.
tabManager
.
addActiveTabPermission
(
tab
)
;
extension
.
tabManager
.
activateScripts
(
tab
)
;
}
break
;
case
"
blur
"
:
case
"
mouseout
"
:
if
(
target
=
=
=
this
.
_menuButton
)
{
this
.
removeAttribute
(
"
secondary
-
button
-
hovered
"
)
;
}
else
if
(
target
=
=
=
this
.
_actionButton
)
{
this
.
_updateStateMessage
(
)
;
}
break
;
case
"
focus
"
:
case
"
mouseover
"
:
if
(
target
=
=
=
this
.
_menuButton
)
{
this
.
setAttribute
(
"
secondary
-
button
-
hovered
"
true
)
;
}
else
if
(
target
=
=
=
this
.
_actionButton
)
{
this
.
_updateStateMessage
(
{
hover
:
true
}
)
;
}
break
;
}
}
async
_updateStateMessage
(
{
hover
=
false
}
=
{
}
)
{
const
messages
=
OriginControls
.
getStateMessageIDs
(
{
policy
:
WebExtensionPolicy
.
getByID
(
this
.
addon
.
id
)
uri
:
this
.
ownerGlobal
.
gBrowser
.
currentURI
}
)
;
if
(
!
messages
)
{
return
;
}
const
messageElement
=
this
.
querySelector
(
"
.
unified
-
extensions
-
item
-
message
-
default
"
)
;
let
adjustMinHeight
=
false
;
if
(
hover
&
&
messages
.
onHover
)
{
this
.
ownerDocument
.
l10n
.
setAttributes
(
messageElement
messages
.
onHover
)
;
}
else
if
(
messages
.
default
)
{
this
.
ownerDocument
.
l10n
.
setAttributes
(
messageElement
messages
.
default
)
;
adjustMinHeight
=
true
;
}
await
document
.
l10n
.
translateElements
(
[
messageElement
]
)
;
if
(
adjustMinHeight
)
{
const
contentsElement
=
this
.
querySelector
(
"
.
unified
-
extensions
-
item
-
contents
"
)
;
const
{
height
}
=
getComputedStyle
(
contentsElement
)
;
contentsElement
.
style
.
minHeight
=
height
;
}
}
_hasAction
(
)
{
const
policy
=
WebExtensionPolicy
.
getByID
(
this
.
addon
.
id
)
;
const
state
=
OriginControls
.
getState
(
policy
this
.
ownerGlobal
.
gBrowser
.
currentURI
)
;
return
state
&
&
state
.
whenClicked
&
&
!
state
.
hasAccess
;
}
render
(
)
{
if
(
!
this
.
addon
)
{
throw
new
Error
(
"
unified
-
extensions
-
item
requires
an
add
-
on
forgot
to
call
setAddon
(
)
?
"
)
;
}
this
.
setAttribute
(
"
extension
-
id
"
this
.
addon
.
id
)
;
this
.
classList
.
add
(
"
unified
-
extensions
-
item
"
)
;
this
.
_actionButton
.
dataset
.
extensionid
=
this
.
addon
.
id
;
let
policy
=
WebExtensionPolicy
.
getByID
(
this
.
addon
.
id
)
;
this
.
toggleAttribute
(
"
attention
"
OriginControls
.
getAttention
(
policy
this
.
ownerGlobal
)
)
;
this
.
querySelector
(
"
.
unified
-
extensions
-
item
-
name
"
)
.
textContent
=
this
.
addon
.
name
;
const
iconURL
=
AddonManager
.
getPreferredIconURL
(
this
.
addon
32
window
)
;
if
(
iconURL
)
{
this
.
querySelector
(
"
.
unified
-
extensions
-
item
-
icon
"
)
.
setAttribute
(
"
src
"
iconURL
)
;
}
this
.
_actionButton
.
disabled
=
!
this
.
_hasAction
(
)
;
this
.
_menuButton
.
dataset
.
extensionid
=
this
.
addon
.
id
;
this
.
_menuButton
.
setAttribute
(
"
data
-
l10n
-
args
"
JSON
.
stringify
(
{
extensionName
:
this
.
addon
.
name
}
)
)
;
this
.
_updateStateMessage
(
)
;
}
}
)
;
