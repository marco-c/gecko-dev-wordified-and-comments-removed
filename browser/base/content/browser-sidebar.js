var
SidebarUI
=
{
browser
:
null
POSITION_START_PREF
:
"
sidebar
.
position_start
"
_box
:
null
_title
:
null
_splitter
:
null
_icon
:
null
_reversePositionButton
:
null
_switcherPanel
:
null
_switcherTarget
:
null
_switcherArrow
:
null
init
(
)
{
this
.
_box
=
document
.
getElementById
(
"
sidebar
-
box
"
)
;
this
.
browser
=
document
.
getElementById
(
"
sidebar
"
)
;
this
.
_title
=
document
.
getElementById
(
"
sidebar
-
title
"
)
;
this
.
_splitter
=
document
.
getElementById
(
"
sidebar
-
splitter
"
)
;
this
.
_icon
=
document
.
getElementById
(
"
sidebar
-
icon
"
)
;
this
.
_reversePositionButton
=
document
.
getElementById
(
"
sidebar
-
reverse
-
position
"
)
;
this
.
_switcherPanel
=
document
.
getElementById
(
"
sidebarMenu
-
popup
"
)
;
this
.
_switcherTarget
=
document
.
getElementById
(
"
sidebar
-
switcher
-
target
"
)
;
this
.
_switcherArrow
=
document
.
getElementById
(
"
sidebar
-
switcher
-
arrow
"
)
;
this
.
_switcherTarget
.
addEventListener
(
"
command
"
(
)
=
>
{
this
.
toggleSwitcherPanel
(
)
;
}
)
;
}
uninit
(
)
{
let
enumerator
=
Services
.
wm
.
getEnumerator
(
null
)
;
enumerator
.
getNext
(
)
;
if
(
!
enumerator
.
hasMoreElements
(
)
)
{
document
.
persist
(
"
sidebar
-
box
"
"
sidebarcommand
"
)
;
document
.
persist
(
"
sidebar
-
box
"
"
width
"
)
;
document
.
persist
(
"
sidebar
-
box
"
"
src
"
)
;
document
.
persist
(
"
sidebar
-
title
"
"
value
"
)
;
}
}
toggleSwitcherPanel
(
)
{
if
(
this
.
_switcherPanel
.
state
=
=
"
open
"
|
|
this
.
_switcherPanel
.
state
=
=
"
showing
"
)
{
this
.
hideSwitcherPanel
(
)
;
}
else
{
this
.
showSwitcherPanel
(
)
;
}
}
hideSwitcherPanel
(
)
{
this
.
_switcherPanel
.
hidePopup
(
)
;
}
showSwitcherPanel
(
)
{
this
.
_ensureShortcutsShown
(
)
;
this
.
_switcherPanel
.
addEventListener
(
"
popuphiding
"
(
)
=
>
{
this
.
_switcherTarget
.
classList
.
remove
(
"
active
"
)
;
}
{
once
:
true
}
)
;
let
label
=
this
.
_positionStart
=
=
this
.
isRTL
?
gNavigatorBundle
.
getString
(
"
sidebar
.
moveToLeft
"
)
:
gNavigatorBundle
.
getString
(
"
sidebar
.
moveToRight
"
)
;
this
.
_reversePositionButton
.
setAttribute
(
"
label
"
label
)
;
this
.
_switcherPanel
.
hidden
=
false
;
this
.
_switcherPanel
.
openPopup
(
this
.
_icon
)
;
this
.
_switcherTarget
.
classList
.
add
(
"
active
"
)
;
}
_addedShortcuts
:
false
_ensureShortcutsShown
(
)
{
if
(
this
.
_addedShortcuts
)
{
return
;
}
this
.
_addedShortcuts
=
true
;
for
(
let
button
of
this
.
_switcherPanel
.
querySelectorAll
(
"
toolbarbutton
[
key
]
"
)
)
{
let
keyId
=
button
.
getAttribute
(
"
key
"
)
;
let
key
=
document
.
getElementById
(
keyId
)
;
if
(
!
key
)
{
continue
;
}
button
.
setAttribute
(
"
shortcut
"
ShortcutUtils
.
prettifyShortcut
(
key
)
)
;
}
}
reversePosition
(
)
{
Services
.
prefs
.
setBoolPref
(
this
.
POSITION_START_PREF
!
this
.
_positionStart
)
;
}
setPosition
(
)
{
let
browser
=
document
.
getElementById
(
"
browser
"
)
;
[
.
.
.
browser
.
childNodes
]
.
forEach
(
(
node
i
)
=
>
{
node
.
ordinal
=
i
+
1
;
}
)
;
if
(
!
this
.
_positionStart
)
{
let
appcontent
=
document
.
getElementById
(
"
appcontent
"
)
;
let
boxOrdinal
=
this
.
_box
.
ordinal
;
this
.
_box
.
ordinal
=
appcontent
.
ordinal
;
appcontent
.
ordinal
=
boxOrdinal
;
}
this
.
hideSwitcherPanel
(
)
;
}
adoptFromWindow
(
sourceWindow
)
{
let
sourceUI
=
sourceWindow
.
SidebarUI
;
if
(
!
sourceUI
|
|
!
sourceUI
.
_box
)
{
return
false
;
}
if
(
sourceUI
.
_box
.
hidden
)
{
return
true
;
}
let
commandID
=
sourceUI
.
_box
.
getAttribute
(
"
sidebarcommand
"
)
;
let
commandElem
=
document
.
getElementById
(
commandID
)
;
if
(
!
commandElem
)
{
return
true
;
}
this
.
_title
.
setAttribute
(
"
value
"
sourceUI
.
_title
.
getAttribute
(
"
value
"
)
)
;
this
.
_box
.
setAttribute
(
"
width
"
sourceUI
.
_box
.
boxObject
.
width
)
;
this
.
_box
.
setAttribute
(
"
sidebarcommand
"
commandID
)
;
this
.
_box
.
setAttribute
(
"
src
"
sourceUI
.
browser
.
getAttribute
(
"
src
"
)
)
;
this
.
_setVisibility
(
true
)
;
commandElem
.
setAttribute
(
"
checked
"
"
true
"
)
;
this
.
browser
.
setAttribute
(
"
src
"
this
.
_box
.
getAttribute
(
"
src
"
)
)
;
return
true
;
}
windowPrivacyMatches
(
w1
w2
)
{
return
PrivateBrowsingUtils
.
isWindowPrivate
(
w1
)
=
=
=
PrivateBrowsingUtils
.
isWindowPrivate
(
w2
)
;
}
startDelayedLoad
(
)
{
let
sourceWindow
=
window
.
opener
;
if
(
sourceWindow
)
{
if
(
sourceWindow
.
closed
|
|
sourceWindow
.
location
.
protocol
!
=
"
chrome
:
"
|
|
!
this
.
windowPrivacyMatches
(
sourceWindow
window
)
)
{
return
;
}
if
(
this
.
adoptFromWindow
(
sourceWindow
)
)
{
return
;
}
}
let
commandID
=
this
.
_box
.
getAttribute
(
"
sidebarcommand
"
)
;
if
(
!
commandID
)
{
return
;
}
let
command
=
document
.
getElementById
(
commandID
)
;
if
(
command
)
{
this
.
_setVisibility
(
true
)
;
command
.
setAttribute
(
"
checked
"
"
true
"
)
;
this
.
browser
.
setAttribute
(
"
src
"
this
.
_box
.
getAttribute
(
"
src
"
)
)
;
}
else
{
this
.
_box
.
removeAttribute
(
"
sidebarcommand
"
)
;
}
}
_fireFocusedEvent
(
)
{
let
event
=
new
CustomEvent
(
"
SidebarFocused
"
{
bubbles
:
true
}
)
;
this
.
browser
.
contentWindow
.
dispatchEvent
(
event
)
;
fireSidebarFocusedEvent
(
)
;
}
get
isOpen
(
)
{
return
!
this
.
_box
.
hidden
;
}
get
currentID
(
)
{
return
this
.
_box
.
getAttribute
(
"
sidebarcommand
"
)
;
}
get
title
(
)
{
return
this
.
_title
.
value
;
}
set
title
(
value
)
{
this
.
_title
.
value
=
value
;
}
_setVisibility
(
visible
)
{
this
.
_box
.
hidden
=
!
visible
;
this
.
_splitter
.
hidden
=
!
visible
;
if
(
visible
)
{
this
.
setPosition
(
)
;
}
}
toggle
(
commandID
=
this
.
currentID
)
{
if
(
this
.
isOpen
&
&
commandID
=
=
this
.
currentID
)
{
this
.
hide
(
)
;
return
Promise
.
resolve
(
)
;
}
return
this
.
show
(
commandID
)
;
}
show
(
commandID
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
sidebarBroadcaster
=
document
.
getElementById
(
commandID
)
;
if
(
!
sidebarBroadcaster
|
|
sidebarBroadcaster
.
localName
!
=
"
broadcaster
"
)
{
reject
(
new
Error
(
"
Invalid
sidebar
broadcaster
specified
:
"
+
commandID
)
)
;
return
;
}
if
(
this
.
isOpen
&
&
commandID
!
=
this
.
currentID
)
{
BrowserUITelemetry
.
countSidebarEvent
(
this
.
currentID
"
hide
"
)
;
}
let
broadcasters
=
document
.
getElementsByAttribute
(
"
group
"
"
sidebar
"
)
;
for
(
let
broadcaster
of
broadcasters
)
{
if
(
broadcaster
.
localName
!
=
"
broadcaster
"
)
{
continue
;
}
if
(
broadcaster
!
=
sidebarBroadcaster
)
{
broadcaster
.
removeAttribute
(
"
checked
"
)
;
}
else
{
sidebarBroadcaster
.
setAttribute
(
"
checked
"
"
true
"
)
;
}
}
this
.
_setVisibility
(
true
)
;
this
.
hideSwitcherPanel
(
)
;
this
.
_box
.
setAttribute
(
"
sidebarcommand
"
sidebarBroadcaster
.
id
)
;
this
.
lastOpenedId
=
sidebarBroadcaster
.
id
;
let
title
=
sidebarBroadcaster
.
getAttribute
(
"
sidebartitle
"
)
;
if
(
!
title
)
{
title
=
sidebarBroadcaster
.
getAttribute
(
"
label
"
)
;
}
this
.
_title
.
value
=
title
;
let
url
=
sidebarBroadcaster
.
getAttribute
(
"
sidebarurl
"
)
;
this
.
browser
.
setAttribute
(
"
src
"
url
)
;
this
.
_box
.
setAttribute
(
"
src
"
url
)
;
if
(
this
.
browser
.
contentDocument
.
location
.
href
!
=
url
)
{
this
.
browser
.
addEventListener
(
"
load
"
event
=
>
{
setTimeout
(
(
)
=
>
this
.
_fireFocusedEvent
(
)
0
)
;
sidebarOnLoad
(
event
)
;
resolve
(
)
;
}
{
capture
:
true
once
:
true
}
)
;
}
else
{
this
.
_fireFocusedEvent
(
)
;
resolve
(
)
;
}
let
selBrowser
=
gBrowser
.
selectedBrowser
;
selBrowser
.
messageManager
.
sendAsyncMessage
(
"
Sidebar
:
VisibilityChange
"
{
commandID
isOpen
:
true
}
)
;
BrowserUITelemetry
.
countSidebarEvent
(
commandID
"
show
"
)
;
}
)
;
}
hide
(
)
{
if
(
!
this
.
isOpen
)
{
return
;
}
this
.
hideSwitcherPanel
(
)
;
let
commandID
=
this
.
_box
.
getAttribute
(
"
sidebarcommand
"
)
;
let
sidebarBroadcaster
=
document
.
getElementById
(
commandID
)
;
if
(
sidebarBroadcaster
.
getAttribute
(
"
checked
"
)
!
=
"
true
"
)
{
return
;
}
this
.
browser
.
setAttribute
(
"
src
"
"
about
:
blank
"
)
;
this
.
browser
.
docShell
.
createAboutBlankContentViewer
(
null
)
;
sidebarBroadcaster
.
removeAttribute
(
"
checked
"
)
;
this
.
_box
.
setAttribute
(
"
sidebarcommand
"
"
"
)
;
this
.
_title
.
value
=
"
"
;
this
.
_setVisibility
(
false
)
;
let
selBrowser
=
gBrowser
.
selectedBrowser
;
selBrowser
.
focus
(
)
;
selBrowser
.
messageManager
.
sendAsyncMessage
(
"
Sidebar
:
VisibilityChange
"
{
commandID
isOpen
:
false
}
)
;
BrowserUITelemetry
.
countSidebarEvent
(
commandID
"
hide
"
)
;
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
SidebarUI
"
_positionStart
"
SidebarUI
.
POSITION_START_PREF
true
SidebarUI
.
setPosition
.
bind
(
SidebarUI
)
)
;
XPCOMUtils
.
defineLazyGetter
(
SidebarUI
"
isRTL
"
(
)
=
>
{
return
getComputedStyle
(
document
.
documentElement
)
.
direction
=
=
"
rtl
"
;
}
)
;
function
fireSidebarFocusedEvent
(
)
{
}
function
sidebarOnLoad
(
event
)
{
}
function
toggleSidebar
(
commandID
forceOpen
=
false
)
{
Deprecated
.
warning
(
"
toggleSidebar
(
)
is
deprecated
please
use
SidebarUI
.
toggle
(
)
or
SidebarUI
.
show
(
)
instead
"
"
https
:
/
/
developer
.
mozilla
.
org
/
en
-
US
/
Add
-
ons
/
Code_snippets
/
Sidebar
"
)
;
if
(
forceOpen
)
{
SidebarUI
.
show
(
commandID
)
;
}
else
{
SidebarUI
.
toggle
(
commandID
)
;
}
}
