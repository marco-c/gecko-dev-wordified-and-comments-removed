var
CompactTheme
=
{
styleSheetLocation
:
"
chrome
:
/
/
browser
/
skin
/
compacttheme
.
css
"
styleSheet
:
null
initialized
:
false
get
isStyleSheetEnabled
(
)
{
return
this
.
styleSheet
&
&
!
this
.
styleSheet
.
sheet
.
disabled
;
}
get
isThemeCurrentlyApplied
(
)
{
let
theme
=
LightweightThemeManager
.
currentTheme
;
return
theme
&
&
(
theme
.
id
=
=
"
firefox
-
compact
-
dark
mozilla
.
org
"
|
|
theme
.
id
=
=
"
firefox
-
compact
-
light
mozilla
.
org
"
)
;
}
init
(
)
{
this
.
initialized
=
true
;
Services
.
obs
.
addObserver
(
this
"
lightweight
-
theme
-
styling
-
update
"
)
;
if
(
this
.
isThemeCurrentlyApplied
)
{
this
.
_toggleStyleSheet
(
true
)
;
}
}
createStyleSheet
(
)
{
let
styleSheetAttr
=
href
=
"
{
this
.
styleSheetLocation
}
"
type
=
"
text
/
css
"
;
this
.
styleSheet
=
document
.
createProcessingInstruction
(
"
xml
-
stylesheet
"
styleSheetAttr
)
;
this
.
styleSheet
.
addEventListener
(
"
load
"
this
)
;
document
.
insertBefore
(
this
.
styleSheet
document
.
documentElement
)
;
this
.
styleSheet
.
sheet
.
disabled
=
true
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
lightweight
-
theme
-
styling
-
update
"
)
{
let
newTheme
=
JSON
.
parse
(
data
)
;
if
(
newTheme
&
&
(
newTheme
.
id
=
=
"
firefox
-
compact
-
light
mozilla
.
org
"
|
|
newTheme
.
id
=
=
"
firefox
-
compact
-
dark
mozilla
.
org
"
)
)
{
this
.
_toggleStyleSheet
(
true
)
;
}
else
{
this
.
_toggleStyleSheet
(
false
)
;
}
}
}
handleEvent
(
e
)
{
if
(
e
.
type
=
=
=
"
load
"
)
{
this
.
styleSheet
.
removeEventListener
(
"
load
"
this
)
;
this
.
refreshBrowserDisplay
(
)
;
}
}
refreshBrowserDisplay
(
)
{
if
(
this
.
initialized
)
{
gBrowser
.
tabContainer
.
themeLayoutChanged
(
)
;
}
}
_toggleStyleSheet
(
enabled
)
{
let
wasEnabled
=
this
.
isStyleSheetEnabled
;
if
(
enabled
)
{
if
(
!
this
.
styleSheet
)
{
this
.
createStyleSheet
(
)
;
}
this
.
styleSheet
.
sheet
.
disabled
=
false
;
this
.
refreshBrowserDisplay
(
)
;
}
else
if
(
!
enabled
&
&
wasEnabled
)
{
this
.
styleSheet
.
sheet
.
disabled
=
true
;
this
.
refreshBrowserDisplay
(
)
;
}
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
"
lightweight
-
theme
-
styling
-
update
"
)
;
if
(
this
.
styleSheet
)
{
this
.
styleSheet
.
removeEventListener
(
"
load
"
this
)
;
}
this
.
styleSheet
=
null
;
}
}
;
if
(
AppConstants
.
INSTALL_COMPACT_THEMES
&
&
this
!
=
Services
.
appShell
.
hiddenDOMWindow
&
&
CompactTheme
.
isThemeCurrentlyApplied
)
{
CompactTheme
.
createStyleSheet
(
)
;
}
