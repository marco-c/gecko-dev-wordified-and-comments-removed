var
{
Sanitizer
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
Sanitizer
.
sys
.
mjs
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
DownloadUtils
:
"
resource
:
/
/
gre
/
modules
/
DownloadUtils
.
sys
.
mjs
"
SiteDataManager
:
"
resource
:
/
/
/
modules
/
SiteDataManager
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
USE_OLD_DIALOG
"
"
privacy
.
sanitize
.
useOldClearHistoryDialog
"
false
)
;
Preferences
.
addAll
(
[
{
id
:
"
privacy
.
cpd
.
history
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
cpd
.
formdata
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
cpd
.
downloads
"
type
:
"
bool
"
disabled
:
true
}
{
id
:
"
privacy
.
cpd
.
cookies
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
cpd
.
cache
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
cpd
.
sessions
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
cpd
.
offlineApps
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
cpd
.
siteSettings
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
sanitize
.
timeSpan
"
type
:
"
int
"
}
{
id
:
"
privacy
.
clearOnShutdown
.
history
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
clearOnShutdown
.
formdata
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
clearOnShutdown
.
downloads
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
clearOnShutdown
.
cookies
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
clearOnShutdown
.
cache
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
clearOnShutdown
.
offlineApps
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
clearOnShutdown
.
sessions
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
clearOnShutdown
.
siteSettings
"
type
:
"
bool
"
}
]
)
;
var
gSanitizePromptDialog
=
{
get
selectedTimespan
(
)
{
var
durList
=
document
.
getElementById
(
"
sanitizeDurationChoice
"
)
;
return
parseInt
(
durList
.
value
)
;
}
get
warningBox
(
)
{
return
document
.
getElementById
(
"
sanitizeEverythingWarningBox
"
)
;
}
async
init
(
)
{
this
.
_inited
=
true
;
this
.
_dialog
=
document
.
querySelector
(
"
dialog
"
)
;
this
.
siteDataSizes
=
{
}
;
this
.
cacheSize
=
[
]
;
this
.
downloadSizes
=
{
}
;
if
(
!
lazy
.
USE_OLD_DIALOG
)
{
this
.
_cookiesAndSiteDataCheckbox
=
document
.
getElementById
(
"
cookies
"
)
;
this
.
_cacheCheckbox
=
document
.
getElementById
(
"
cache
"
)
;
this
.
_downloadHistoryCheckbox
=
document
.
getElementById
(
"
downloads
"
)
;
}
let
arg
=
window
.
arguments
?
.
[
0
]
|
|
{
}
;
let
updateUsageData
=
true
;
if
(
!
lazy
.
USE_OLD_DIALOG
&
&
arg
.
updateUsageData
!
=
undefined
)
{
updateUsageData
=
arg
.
updateUsageData
|
|
arg
.
inBrowserWindow
;
}
this
.
_inClearOnShutdownNewDialog
=
false
;
this
.
_inClearSiteDataNewDialog
=
false
;
if
(
arg
.
mode
&
&
!
lazy
.
USE_OLD_DIALOG
)
{
this
.
_inClearOnShutdownNewDialog
=
arg
.
mode
=
=
"
clearOnShutdown
"
;
this
.
_inClearSiteDataNewDialog
=
arg
.
mode
=
=
"
clearSiteData
"
;
}
if
(
arg
.
inBrowserWindow
)
{
this
.
_dialog
.
setAttribute
(
"
inbrowserwindow
"
"
true
"
)
;
this
.
_observeTitleForChanges
(
)
;
}
else
if
(
arg
.
wrappedJSObject
?
.
needNativeUI
)
{
document
.
getElementById
(
"
sanitizeDurationChoice
"
)
.
setAttribute
(
"
native
"
"
true
"
)
;
for
(
let
cb
of
document
.
querySelectorAll
(
"
checkbox
"
)
)
{
cb
.
setAttribute
(
"
native
"
"
true
"
)
;
}
}
this
.
dataSizesFinishedUpdatingPromise
=
this
.
getAndUpdateDataSizes
(
updateUsageData
)
;
let
OKButton
=
this
.
_dialog
.
getButton
(
"
accept
"
)
;
let
clearOnShutdownGroupbox
=
document
.
getElementById
(
"
clearOnShutdownGroupbox
"
)
;
let
clearPrivateDataGroupbox
=
document
.
getElementById
(
"
clearPrivateDataGroupbox
"
)
;
let
okButtonl10nID
=
"
sanitize
-
button
-
ok
"
;
if
(
this
.
_inClearOnShutdownNewDialog
)
{
okButtonl10nID
=
"
sanitize
-
button
-
ok
-
on
-
shutdown
"
;
this
.
_dialog
.
setAttribute
(
"
inClearOnShutdown
"
"
true
"
)
;
clearPrivateDataGroupbox
.
remove
(
)
;
}
else
if
(
!
lazy
.
USE_OLD_DIALOG
)
{
okButtonl10nID
=
"
sanitize
-
button
-
ok2
"
;
clearOnShutdownGroupbox
.
remove
(
)
;
}
document
.
l10n
.
setAttributes
(
OKButton
okButtonl10nID
)
;
if
(
!
lazy
.
USE_OLD_DIALOG
&
&
!
this
.
_inClearOnShutdownNewDialog
)
{
let
checkboxes
=
document
.
querySelectorAll
(
"
#
clearPrivateDataGroupbox
.
clearingItemCheckbox
"
)
;
for
(
let
checkbox
of
checkboxes
)
{
let
pref
=
checkbox
.
getAttribute
(
"
data
-
l10n
-
id
"
)
;
let
value
=
true
;
if
(
pref
=
=
"
item
-
site
-
prefs
"
)
{
value
=
false
;
}
else
if
(
this
.
_inClearSiteDataNewDialog
&
&
(
pref
=
=
"
item
-
browsing
-
and
-
search
"
|
|
pref
=
=
"
item
-
download
-
history
"
)
)
{
value
=
false
;
}
checkbox
.
checked
=
value
;
}
}
document
.
addEventListener
(
"
dialogaccept
"
e
=
>
{
if
(
this
.
_inClearOnShutdownNewDialog
)
{
this
.
updatePrefs
(
)
;
}
else
{
this
.
sanitize
(
e
)
;
}
}
)
;
this
.
registerSyncFromPrefListeners
(
)
;
if
(
this
.
selectedTimespan
=
=
=
Sanitizer
.
TIMESPAN_EVERYTHING
&
&
!
arg
.
inClearOnShutdown
)
{
this
.
prepareWarning
(
)
;
this
.
warningBox
.
hidden
=
false
;
if
(
lazy
.
USE_OLD_DIALOG
)
{
document
.
l10n
.
setAttributes
(
document
.
documentElement
"
sanitize
-
dialog
-
title
-
everything
"
)
;
}
let
warningDesc
=
document
.
getElementById
(
"
sanitizeEverythingWarning
"
)
;
await
document
.
l10n
.
translateFragment
(
warningDesc
)
;
let
rootWin
=
window
.
browsingContext
.
topChromeWindow
;
await
rootWin
.
promiseDocumentFlushed
(
(
)
=
>
{
}
)
;
}
else
{
this
.
warningBox
.
hidden
=
true
;
}
await
this
.
dataSizesFinishedUpdatingPromise
;
}
selectByTimespan
(
)
{
if
(
!
this
.
_inited
)
{
return
;
}
var
warningBox
=
this
.
warningBox
;
if
(
this
.
selectedTimespan
=
=
=
Sanitizer
.
TIMESPAN_EVERYTHING
)
{
this
.
prepareWarning
(
)
;
if
(
warningBox
.
hidden
)
{
warningBox
.
hidden
=
false
;
let
diff
=
warningBox
.
nextElementSibling
.
getBoundingClientRect
(
)
.
top
-
warningBox
.
previousElementSibling
.
getBoundingClientRect
(
)
.
bottom
;
window
.
resizeBy
(
0
diff
)
;
}
if
(
lazy
.
USE_OLD_DIALOG
)
{
document
.
l10n
.
setAttributes
(
document
.
documentElement
"
sanitize
-
dialog
-
title
-
everything
"
)
;
}
else
{
this
.
updateDataSizesInUI
(
)
;
}
return
;
}
if
(
!
warningBox
.
hidden
)
{
let
diff
=
warningBox
.
nextElementSibling
.
getBoundingClientRect
(
)
.
top
-
warningBox
.
previousElementSibling
.
getBoundingClientRect
(
)
.
bottom
;
window
.
resizeBy
(
0
-
diff
)
;
warningBox
.
hidden
=
true
;
}
let
datal1OnId
=
lazy
.
USE_OLD_DIALOG
?
"
sanitize
-
dialog
-
title
"
:
"
sanitize
-
dialog
-
title2
"
;
document
.
l10n
.
setAttributes
(
document
.
documentElement
datal1OnId
)
;
if
(
!
lazy
.
USE_OLD_DIALOG
)
{
this
.
updateDataSizesInUI
(
)
;
}
}
sanitize
(
event
)
{
this
.
updatePrefs
(
)
;
let
acceptButton
=
this
.
_dialog
.
getButton
(
"
accept
"
)
;
acceptButton
.
disabled
=
true
;
document
.
l10n
.
setAttributes
(
acceptButton
"
sanitize
-
button
-
clearing
"
)
;
this
.
_dialog
.
getButton
(
"
cancel
"
)
.
disabled
=
true
;
try
{
let
range
=
Sanitizer
.
getClearRange
(
this
.
selectedTimespan
)
;
let
options
=
{
ignoreTimespan
:
!
range
range
}
;
let
itemsToClear
=
this
.
getItemsToClear
(
)
;
Sanitizer
.
sanitize
(
itemsToClear
options
)
.
catch
(
console
.
error
)
.
then
(
(
)
=
>
window
.
close
(
)
)
.
catch
(
console
.
error
)
;
event
.
preventDefault
(
)
;
}
catch
(
er
)
{
console
.
error
(
"
Exception
during
sanitize
:
"
er
)
;
}
}
prepareWarning
(
)
{
var
warningDesc
=
document
.
getElementById
(
"
sanitizeEverythingWarning
"
)
;
if
(
this
.
hasNonSelectedItems
(
)
)
{
document
.
l10n
.
setAttributes
(
warningDesc
"
sanitize
-
selected
-
warning
"
)
;
}
else
{
document
.
l10n
.
setAttributes
(
warningDesc
"
sanitize
-
everything
-
warning
"
)
;
}
}
_getItemPrefs
(
)
{
return
Preferences
.
getAll
(
)
.
filter
(
pref
=
>
{
if
(
pref
.
id
=
=
"
privacy
.
sanitize
.
timeSpan
"
)
{
return
false
;
}
return
!
(
lazy
.
USE_OLD_DIALOG
&
&
pref
.
id
=
=
"
privacy
.
cpd
.
downloads
"
)
;
}
)
;
}
onReadGeneric
(
)
{
var
found
=
this
.
_getItemPrefs
(
)
.
some
(
pref
=
>
!
!
pref
.
value
&
&
!
pref
.
disabled
)
;
try
{
this
.
_dialog
.
getButton
(
"
accept
"
)
.
disabled
=
!
found
;
}
catch
(
e
)
{
}
this
.
prepareWarning
(
)
;
return
undefined
;
}
async
getAndUpdateDataSizes
(
doUpdateSites
)
{
if
(
lazy
.
USE_OLD_DIALOG
)
{
return
;
}
if
(
doUpdateSites
)
{
await
lazy
.
SiteDataManager
.
updateSites
(
)
;
}
const
ALL_TIMESPANS
=
[
"
TIMESPAN_HOUR
"
"
TIMESPAN_2HOURS
"
"
TIMESPAN_4HOURS
"
"
TIMESPAN_TODAY
"
"
TIMESPAN_EVERYTHING
"
]
;
let
[
quotaUsage
cacheSize
downloadCount
]
=
await
Promise
.
all
(
[
lazy
.
SiteDataManager
.
getQuotaUsageForTimeRanges
(
ALL_TIMESPANS
)
lazy
.
SiteDataManager
.
getCacheSize
(
)
lazy
.
SiteDataManager
.
getDownloadCountForTimeRanges
(
ALL_TIMESPANS
)
]
)
;
for
(
const
timespan
in
quotaUsage
)
{
this
.
siteDataSizes
[
timespan
]
=
lazy
.
DownloadUtils
.
convertByteUnits
(
quotaUsage
[
timespan
]
)
;
}
this
.
cacheSize
=
lazy
.
DownloadUtils
.
convertByteUnits
(
cacheSize
)
;
this
.
downloadSizes
=
downloadCount
;
this
.
updateDataSizesInUI
(
)
;
}
updatePrefs
(
)
{
Services
.
prefs
.
setIntPref
(
Sanitizer
.
PREF_TIMESPAN
this
.
selectedTimespan
)
;
if
(
lazy
.
USE_OLD_DIALOG
)
{
let
historyValue
=
Preferences
.
get
(
privacy
.
cpd
.
history
)
.
value
;
Preferences
.
get
(
"
privacy
.
cpd
.
downloads
"
)
.
value
=
historyValue
;
Services
.
prefs
.
setBoolPref
(
"
privacy
.
cpd
.
downloads
"
historyValue
)
;
}
else
if
(
gSanitizePromptDialog
.
_inClearOnShutdownNewDialog
)
{
let
historyValue
=
Preferences
.
get
(
privacy
.
clearOnShutdown
.
history
)
.
value
;
Preferences
.
get
(
privacy
.
clearOnShutdown
.
formdata
)
.
value
=
historyValue
;
let
cookiesValue
=
Preferences
.
get
(
"
privacy
.
clearOnShutdown
.
cookies
"
)
.
value
;
Preferences
.
get
(
privacy
.
clearOnShutdown
.
sessions
)
.
value
=
cookiesValue
;
Preferences
.
get
(
privacy
.
clearOnShutdown
.
offlineApps
)
.
value
=
cookiesValue
;
}
var
prefs
=
this
.
_getItemPrefs
(
)
;
for
(
let
i
=
0
;
i
<
prefs
.
length
;
+
+
i
)
{
var
p
=
prefs
[
i
]
;
Services
.
prefs
.
setBoolPref
(
p
.
id
p
.
value
)
;
}
}
hasNonSelectedItems
(
)
{
let
checkboxes
=
document
.
querySelectorAll
(
"
checkbox
[
preference
]
"
)
;
for
(
let
i
=
0
;
i
<
checkboxes
.
length
;
+
+
i
)
{
let
pref
=
Preferences
.
get
(
checkboxes
[
i
]
.
getAttribute
(
"
preference
"
)
)
;
if
(
!
pref
.
value
)
{
return
true
;
}
}
return
false
;
}
registerSyncFromPrefListeners
(
)
{
let
checkboxes
=
document
.
querySelectorAll
(
"
checkbox
[
preference
]
"
)
;
for
(
let
checkbox
of
checkboxes
)
{
Preferences
.
addSyncFromPrefListener
(
checkbox
(
)
=
>
this
.
onReadGeneric
(
)
)
;
}
}
_titleChanged
(
)
{
let
title
=
document
.
documentElement
.
getAttribute
(
"
title
"
)
;
if
(
title
)
{
document
.
getElementById
(
"
titleText
"
)
.
textContent
=
title
;
}
}
_observeTitleForChanges
(
)
{
this
.
_titleChanged
(
)
;
this
.
_mutObs
=
new
MutationObserver
(
(
)
=
>
{
this
.
_titleChanged
(
)
;
}
)
;
this
.
_mutObs
.
observe
(
document
.
documentElement
{
attributes
:
true
attributeFilter
:
[
"
title
"
]
}
)
;
}
updateDataSizesInUI
(
)
{
const
TIMESPAN_SELECTION_MAP
=
{
0
:
"
TIMESPAN_EVERYTHING
"
1
:
"
TIMESPAN_HOUR
"
2
:
"
TIMESPAN_2HOURS
"
3
:
"
TIMESPAN_4HOURS
"
4
:
"
TIMESPAN_TODAY
"
5
:
"
TIMESPAN_5MINS
"
6
:
"
TIMESPAN_24HOURS
"
}
;
let
index
=
this
.
selectedTimespan
;
let
timeSpanSelected
=
TIMESPAN_SELECTION_MAP
[
index
]
;
let
[
amount
unit
]
=
this
.
siteDataSizes
[
timeSpanSelected
]
;
document
.
l10n
.
setAttributes
(
this
.
_cookiesAndSiteDataCheckbox
"
item
-
cookies
-
site
-
data
-
with
-
size
"
{
amount
unit
}
)
;
[
amount
unit
]
=
this
.
cacheSize
;
document
.
l10n
.
setAttributes
(
this
.
_cacheCheckbox
"
item
-
cached
-
content
-
with
-
size
"
{
amount
unit
}
)
;
const
downloadcount
=
this
.
downloadSizes
[
timeSpanSelected
]
;
document
.
l10n
.
setAttributes
(
this
.
_downloadHistoryCheckbox
"
item
-
download
-
history
-
with
-
size
"
{
count
:
downloadcount
}
)
;
}
getItemsToClear
(
)
{
if
(
lazy
.
USE_OLD_DIALOG
)
{
return
null
;
}
let
items
=
[
]
;
let
clearPrivateDataGroupbox
=
document
.
getElementById
(
"
clearPrivateDataGroupbox
"
)
;
for
(
let
cb
of
clearPrivateDataGroupbox
.
querySelectorAll
(
"
checkbox
"
)
)
{
if
(
cb
.
checked
)
{
if
(
cb
.
id
=
=
"
history
"
)
{
items
.
push
(
"
formdata
"
)
;
}
else
if
(
cb
.
id
=
=
"
cookies
"
)
{
items
.
push
(
"
offlineApps
"
)
;
items
.
push
(
"
sessions
"
)
;
}
items
.
push
(
cb
.
id
)
;
}
}
return
items
;
}
}
;
document
.
mozSubdialogReady
=
new
Promise
(
resolve
=
>
{
window
.
addEventListener
(
"
load
"
function
(
)
{
gSanitizePromptDialog
.
init
(
)
.
then
(
resolve
)
;
}
{
once
:
true
}
)
;
}
)
;
