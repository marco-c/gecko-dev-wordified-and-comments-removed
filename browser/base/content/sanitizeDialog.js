var
Cc
=
Components
.
classes
;
var
Ci
=
Components
.
interfaces
;
var
Cu
=
Components
.
utils
;
var
{
Sanitizer
}
=
Cu
.
import
(
"
resource
:
/
/
/
modules
/
Sanitizer
.
jsm
"
{
}
)
;
Preferences
.
addAll
(
[
{
id
:
"
privacy
.
cpd
.
history
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
cpd
.
formdata
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
cpd
.
downloads
"
type
:
"
bool
"
disabled
:
true
}
{
id
:
"
privacy
.
cpd
.
cookies
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
cpd
.
cache
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
cpd
.
sessions
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
cpd
.
offlineApps
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
cpd
.
siteSettings
"
type
:
"
bool
"
}
{
id
:
"
privacy
.
sanitize
.
timeSpan
"
type
:
"
int
"
}
]
)
;
var
gSanitizePromptDialog
=
{
get
bundleBrowser
(
)
{
if
(
!
this
.
_bundleBrowser
)
this
.
_bundleBrowser
=
document
.
getElementById
(
"
bundleBrowser
"
)
;
return
this
.
_bundleBrowser
;
}
get
selectedTimespan
(
)
{
var
durList
=
document
.
getElementById
(
"
sanitizeDurationChoice
"
)
;
return
parseInt
(
durList
.
value
)
;
}
get
warningBox
(
)
{
return
document
.
getElementById
(
"
sanitizeEverythingWarningBox
"
)
;
}
init
(
)
{
this
.
_inited
=
true
;
var
s
=
new
Sanitizer
(
)
;
s
.
prefDomain
=
"
privacy
.
cpd
.
"
;
document
.
documentElement
.
getButton
(
"
accept
"
)
.
label
=
this
.
bundleBrowser
.
getString
(
"
sanitizeButtonOK
"
)
;
if
(
this
.
selectedTimespan
=
=
=
Sanitizer
.
TIMESPAN_EVERYTHING
)
{
this
.
prepareWarning
(
)
;
this
.
warningBox
.
hidden
=
false
;
document
.
title
=
this
.
bundleBrowser
.
getString
(
"
sanitizeDialog2
.
everything
.
title
"
)
;
}
else
this
.
warningBox
.
hidden
=
true
;
}
selectByTimespan
(
)
{
if
(
!
this
.
_inited
)
return
;
var
warningBox
=
this
.
warningBox
;
if
(
this
.
selectedTimespan
=
=
=
Sanitizer
.
TIMESPAN_EVERYTHING
)
{
this
.
prepareWarning
(
)
;
if
(
warningBox
.
hidden
)
{
warningBox
.
hidden
=
false
;
window
.
resizeBy
(
0
warningBox
.
boxObject
.
height
)
;
}
window
.
document
.
title
=
this
.
bundleBrowser
.
getString
(
"
sanitizeDialog2
.
everything
.
title
"
)
;
return
;
}
if
(
!
warningBox
.
hidden
)
{
window
.
resizeBy
(
0
-
warningBox
.
boxObject
.
height
)
;
warningBox
.
hidden
=
true
;
}
window
.
document
.
title
=
window
.
document
.
documentElement
.
getAttribute
(
"
noneverythingtitle
"
)
;
}
sanitize
(
)
{
this
.
updatePrefs
(
)
;
var
s
=
new
Sanitizer
(
)
;
s
.
prefDomain
=
"
privacy
.
cpd
.
"
;
s
.
range
=
Sanitizer
.
getClearRange
(
this
.
selectedTimespan
)
;
s
.
ignoreTimespan
=
!
s
.
range
;
let
docElt
=
document
.
documentElement
;
let
acceptButton
=
docElt
.
getButton
(
"
accept
"
)
;
acceptButton
.
disabled
=
true
;
acceptButton
.
setAttribute
(
"
label
"
this
.
bundleBrowser
.
getString
(
"
sanitizeButtonClearing
"
)
)
;
docElt
.
getButton
(
"
cancel
"
)
.
disabled
=
true
;
try
{
s
.
sanitize
(
)
.
catch
(
Components
.
utils
.
reportError
)
.
then
(
(
)
=
>
window
.
close
(
)
)
.
catch
(
Components
.
utils
.
reportError
)
;
return
false
;
}
catch
(
er
)
{
Components
.
utils
.
reportError
(
"
Exception
during
sanitize
:
"
+
er
)
;
return
true
;
}
}
prepareWarning
(
aDontShowItemList
)
{
var
warningStringID
;
if
(
this
.
hasNonSelectedItems
(
)
)
{
warningStringID
=
"
sanitizeSelectedWarning
"
;
if
(
!
aDontShowItemList
)
this
.
showItemList
(
)
;
}
else
{
warningStringID
=
"
sanitizeEverythingWarning2
"
;
}
var
warningDesc
=
document
.
getElementById
(
"
sanitizeEverythingWarning
"
)
;
warningDesc
.
textContent
=
this
.
bundleBrowser
.
getString
(
warningStringID
)
;
}
_getItemPrefs
(
)
{
return
Preferences
.
getAll
(
)
.
filter
(
p
=
>
p
.
id
!
=
=
"
privacy
.
sanitize
.
timeSpan
"
)
;
}
onReadGeneric
(
)
{
var
found
=
this
.
_getItemPrefs
(
)
.
some
(
pref
=
>
!
!
pref
.
value
&
&
!
pref
.
disabled
)
;
try
{
document
.
documentElement
.
getButton
(
"
accept
"
)
.
disabled
=
!
found
;
}
catch
(
e
)
{
}
this
.
prepareWarning
(
true
)
;
return
undefined
;
}
updatePrefs
(
)
{
Sanitizer
.
prefs
.
setIntPref
(
"
timeSpan
"
this
.
selectedTimespan
)
;
Preferences
.
get
(
"
privacy
.
cpd
.
downloads
"
)
.
value
=
Preferences
.
get
(
"
privacy
.
cpd
.
history
"
)
.
value
;
var
prefs
=
this
.
_getItemPrefs
(
)
;
for
(
let
i
=
0
;
i
<
prefs
.
length
;
+
+
i
)
{
var
p
=
prefs
[
i
]
;
Services
.
prefs
.
setBoolPref
(
p
.
name
p
.
value
)
;
}
}
hasNonSelectedItems
(
)
{
let
checkboxes
=
document
.
querySelectorAll
(
"
#
itemList
>
[
preference
]
"
)
;
for
(
let
i
=
0
;
i
<
checkboxes
.
length
;
+
+
i
)
{
let
pref
=
Preferences
.
get
(
checkboxes
[
i
]
.
getAttribute
(
"
preference
"
)
)
;
if
(
!
pref
.
value
)
return
true
;
}
return
false
;
}
showItemList
(
)
{
var
itemList
=
document
.
getElementById
(
"
itemList
"
)
;
var
expanderButton
=
document
.
getElementById
(
"
detailsExpander
"
)
;
if
(
itemList
.
collapsed
)
{
expanderButton
.
className
=
"
expander
-
up
"
;
itemList
.
setAttribute
(
"
collapsed
"
"
false
"
)
;
if
(
document
.
documentElement
.
boxObject
.
height
)
window
.
resizeBy
(
0
itemList
.
boxObject
.
height
)
;
}
}
hideItemList
(
)
{
var
itemList
=
document
.
getElementById
(
"
itemList
"
)
;
var
expanderButton
=
document
.
getElementById
(
"
detailsExpander
"
)
;
if
(
!
itemList
.
collapsed
)
{
expanderButton
.
className
=
"
expander
-
down
"
;
window
.
resizeBy
(
0
-
itemList
.
boxObject
.
height
)
;
itemList
.
setAttribute
(
"
collapsed
"
"
true
"
)
;
}
}
toggleItemList
(
)
{
var
itemList
=
document
.
getElementById
(
"
itemList
"
)
;
if
(
itemList
.
collapsed
)
this
.
showItemList
(
)
;
else
this
.
hideItemList
(
)
;
}
}
;
