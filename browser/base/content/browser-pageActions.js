var
BrowserPageActions
=
{
get
mainButtonNode
(
)
{
delete
this
.
mainButtonNode
;
return
this
.
mainButtonNode
=
document
.
getElementById
(
"
pageActionButton
"
)
;
}
get
panelNode
(
)
{
delete
this
.
panelNode
;
return
this
.
panelNode
=
document
.
getElementById
(
"
pageActionPanel
"
)
;
}
get
multiViewNode
(
)
{
delete
this
.
multiViewNode
;
return
this
.
multiViewNode
=
document
.
getElementById
(
"
pageActionPanelMultiView
"
)
;
}
get
mainViewNode
(
)
{
delete
this
.
mainViewNode
;
return
this
.
mainViewNode
=
document
.
getElementById
(
"
pageActionPanelMainView
"
)
;
}
get
mainViewBodyNode
(
)
{
delete
this
.
mainViewBodyNode
;
return
this
.
mainViewBodyNode
=
this
.
mainViewNode
.
querySelector
(
"
.
panel
-
subview
-
body
"
)
;
}
init
(
)
{
for
(
let
action
of
PageActions
.
actions
)
{
this
.
placeAction
(
action
PageActions
.
insertBeforeActionIDInUrlbar
(
action
)
)
;
}
}
placeAction
(
action
panelInsertBeforeID
urlbarInsertBeforeID
)
{
if
(
action
.
__isSeparator
)
{
this
.
_appendPanelSeparator
(
action
)
;
return
;
}
this
.
placeActionInPanel
(
action
panelInsertBeforeID
)
;
this
.
placeActionInUrlbar
(
action
urlbarInsertBeforeID
)
;
}
placeActionInPanel
(
action
insertBeforeID
)
{
let
id
=
this
.
_panelButtonNodeIDForActionID
(
action
.
id
)
;
let
node
=
document
.
getElementById
(
id
)
;
if
(
!
node
)
{
let
panelViewNode
;
[
node
panelViewNode
]
=
this
.
_makePanelButtonNodeForAction
(
action
)
;
node
.
id
=
id
;
let
insertBeforeNode
=
null
;
if
(
insertBeforeID
)
{
let
insertBeforeNodeID
=
this
.
_panelButtonNodeIDForActionID
(
insertBeforeID
)
;
insertBeforeNode
=
document
.
getElementById
(
insertBeforeNodeID
)
;
}
this
.
mainViewBodyNode
.
insertBefore
(
node
insertBeforeNode
)
;
action
.
onPlacedInPanel
(
node
)
;
if
(
panelViewNode
)
{
action
.
subview
.
onPlaced
(
panelViewNode
)
;
}
}
return
node
;
}
_makePanelButtonNodeForAction
(
action
)
{
let
buttonNode
=
document
.
createElement
(
"
toolbarbutton
"
)
;
buttonNode
.
classList
.
add
(
"
subviewbutton
"
"
subviewbutton
-
iconic
"
"
pageAction
-
panel
-
button
"
)
;
buttonNode
.
setAttribute
(
"
label
"
action
.
title
)
;
if
(
action
.
iconURL
)
{
buttonNode
.
style
.
listStyleImage
=
url
(
'
{
action
.
iconURL
}
'
)
;
}
if
(
action
.
nodeAttributes
)
{
for
(
let
name
in
action
.
nodeAttributes
)
{
buttonNode
.
setAttribute
(
name
action
.
nodeAttributes
[
name
]
)
;
}
}
let
panelViewNode
=
null
;
if
(
action
.
subview
)
{
buttonNode
.
classList
.
add
(
"
subviewbutton
-
nav
"
)
;
panelViewNode
=
this
.
_makePanelViewNodeForAction
(
action
false
)
;
this
.
multiViewNode
.
appendChild
(
panelViewNode
)
;
}
buttonNode
.
addEventListener
(
"
command
"
event
=
>
{
if
(
panelViewNode
)
{
action
.
subview
.
onShowing
(
panelViewNode
)
;
this
.
multiViewNode
.
showSubView
(
panelViewNode
buttonNode
)
;
return
;
}
if
(
action
.
wantsIframe
)
{
this
.
_toggleTempPanelForAction
(
action
)
;
return
;
}
this
.
panelNode
.
hidePopup
(
)
;
action
.
onCommand
(
event
buttonNode
)
;
}
)
;
return
[
buttonNode
panelViewNode
]
;
}
_makePanelViewNodeForAction
(
action
forUrlbar
)
{
let
panelViewNode
=
document
.
createElement
(
"
panelview
"
)
;
let
placementID
=
forUrlbar
?
"
urlbar
"
:
"
panel
"
;
panelViewNode
.
id
=
pageAction
-
{
placementID
}
-
{
action
.
id
}
-
subview
;
panelViewNode
.
classList
.
add
(
"
PanelUI
-
subView
"
)
;
let
bodyNode
=
document
.
createElement
(
"
vbox
"
)
;
bodyNode
.
id
=
panelViewNode
.
id
+
"
-
body
"
;
bodyNode
.
classList
.
add
(
"
panel
-
subview
-
body
"
)
;
panelViewNode
.
appendChild
(
bodyNode
)
;
for
(
let
button
of
action
.
subview
.
buttons
)
{
let
buttonNode
=
document
.
createElement
(
"
toolbarbutton
"
)
;
let
buttonNodeID
=
forUrlbar
?
this
.
_urlbarButtonNodeIDForActionID
(
action
.
id
)
:
this
.
_panelButtonNodeIDForActionID
(
action
.
id
)
;
buttonNodeID
+
=
"
-
"
+
button
.
id
;
buttonNode
.
id
=
buttonNodeID
;
buttonNode
.
classList
.
add
(
"
subviewbutton
"
"
subviewbutton
-
iconic
"
)
;
buttonNode
.
setAttribute
(
"
label
"
button
.
title
)
;
if
(
button
.
shortcut
)
{
buttonNode
.
setAttribute
(
"
shortcut
"
button
.
shortcut
)
;
}
if
(
button
.
disabled
)
{
buttonNode
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
buttonNode
.
addEventListener
(
"
command
"
event
=
>
{
button
.
onCommand
(
event
buttonNode
)
;
}
)
;
bodyNode
.
appendChild
(
buttonNode
)
;
}
return
panelViewNode
;
}
_toggleTempPanelForAction
(
action
)
{
let
panelNodeID
=
"
pageActionTempPanel
"
;
let
panelNode
=
document
.
getElementById
(
panelNodeID
)
;
if
(
panelNode
)
{
panelNode
.
hidePopup
(
)
;
return
;
}
panelNode
=
document
.
createElement
(
"
panel
"
)
;
panelNode
.
id
=
panelNodeID
;
panelNode
.
classList
.
add
(
"
cui
-
widget
-
panel
"
)
;
panelNode
.
setAttribute
(
"
role
"
"
group
"
)
;
panelNode
.
setAttribute
(
"
type
"
"
arrow
"
)
;
panelNode
.
setAttribute
(
"
flip
"
"
slide
"
)
;
panelNode
.
setAttribute
(
"
noautofocus
"
"
true
"
)
;
let
panelViewNode
=
null
;
let
iframeNode
=
null
;
if
(
action
.
subview
)
{
let
multiViewNode
=
document
.
createElement
(
"
photonpanelmultiview
"
)
;
panelViewNode
=
this
.
_makePanelViewNodeForAction
(
action
true
)
;
multiViewNode
.
appendChild
(
panelViewNode
)
;
panelNode
.
appendChild
(
multiViewNode
)
;
}
else
if
(
action
.
wantsIframe
)
{
iframeNode
=
document
.
createElement
(
"
iframe
"
)
;
iframeNode
.
setAttribute
(
"
type
"
"
content
"
)
;
panelNode
.
appendChild
(
iframeNode
)
;
}
let
popupSet
=
document
.
getElementById
(
"
mainPopupSet
"
)
;
popupSet
.
appendChild
(
panelNode
)
;
panelNode
.
addEventListener
(
"
popuphidden
"
(
)
=
>
{
panelNode
.
remove
(
)
;
}
{
once
:
true
}
)
;
if
(
panelViewNode
)
{
action
.
subview
.
onPlaced
(
panelViewNode
)
;
action
.
subview
.
onShowing
(
panelViewNode
)
;
}
this
.
panelNode
.
hidePopup
(
)
;
let
urlbarNodeID
=
this
.
_urlbarButtonNodeIDForActionID
(
action
.
id
)
;
let
anchorNode
=
document
.
getElementById
(
urlbarNodeID
)
|
|
this
.
mainButtonNode
;
panelNode
.
openPopup
(
anchorNode
"
bottomcenter
topright
"
)
;
if
(
iframeNode
)
{
action
.
onIframeShown
(
iframeNode
panelNode
)
;
}
}
placeActionInUrlbar
(
action
insertBeforeID
)
{
let
id
=
this
.
_urlbarButtonNodeIDForActionID
(
action
.
id
)
;
let
node
=
document
.
getElementById
(
id
)
;
if
(
!
action
.
shownInUrlbar
)
{
if
(
node
)
{
if
(
action
.
__urlbarNodeInMarkup
)
{
node
.
hidden
=
true
;
}
else
{
node
.
remove
(
)
;
}
}
return
null
;
}
let
newlyPlaced
=
false
;
if
(
action
.
__urlbarNodeInMarkup
)
{
newlyPlaced
=
node
&
&
node
.
hidden
;
node
.
hidden
=
false
;
}
else
if
(
!
node
)
{
newlyPlaced
=
true
;
node
=
this
.
_makeUrlbarButtonNode
(
action
)
;
node
.
id
=
id
;
}
if
(
newlyPlaced
)
{
let
parentNode
=
this
.
mainButtonNode
.
parentNode
;
let
insertBeforeNode
=
null
;
if
(
insertBeforeID
)
{
let
insertBeforeNodeID
=
this
.
_urlbarButtonNodeIDForActionID
(
insertBeforeID
)
;
insertBeforeNode
=
document
.
getElementById
(
insertBeforeNodeID
)
;
}
parentNode
.
insertBefore
(
node
insertBeforeNode
)
;
action
.
onPlacedInUrlbar
(
node
)
;
if
(
!
node
.
hasAttribute
(
"
tooltiptext
"
)
)
{
let
panelNodeID
=
this
.
_panelButtonNodeIDForActionID
(
action
.
id
)
;
let
panelNode
=
document
.
getElementById
(
panelNodeID
)
;
if
(
panelNode
)
{
node
.
setAttribute
(
"
tooltiptext
"
panelNode
.
getAttribute
(
"
label
"
)
)
;
}
}
}
return
node
;
}
_makeUrlbarButtonNode
(
action
)
{
let
buttonNode
=
document
.
createElement
(
"
image
"
)
;
buttonNode
.
classList
.
add
(
"
urlbar
-
icon
"
)
;
if
(
action
.
tooltip
)
{
buttonNode
.
setAttribute
(
"
tooltiptext
"
action
.
tooltip
)
;
}
if
(
action
.
iconURL
)
{
buttonNode
.
style
.
listStyleImage
=
url
(
'
{
action
.
iconURL
}
'
)
;
}
if
(
action
.
nodeAttributes
)
{
for
(
let
name
in
action
.
nodeAttributes
)
{
buttonNode
.
setAttribute
(
name
action
.
nodeAttributes
[
name
]
)
;
}
}
buttonNode
.
addEventListener
(
"
click
"
event
=
>
{
if
(
event
.
button
!
=
0
)
{
return
;
}
if
(
action
.
subview
|
|
action
.
wantsIframe
)
{
this
.
_toggleTempPanelForAction
(
action
)
;
return
;
}
action
.
onCommand
(
event
buttonNode
)
;
}
)
;
return
buttonNode
;
}
_appendPanelSeparator
(
action
)
{
let
node
=
document
.
createElement
(
"
toolbarseparator
"
)
;
node
.
id
=
this
.
_panelButtonNodeIDForActionID
(
action
.
id
)
;
this
.
mainViewBodyNode
.
appendChild
(
node
)
;
}
removeAction
(
action
)
{
this
.
_removeActionFromPanel
(
action
)
;
this
.
_removeActionFromUrlbar
(
action
)
;
}
_removeActionFromPanel
(
action
)
{
let
id
=
this
.
_panelButtonNodeIDForActionID
(
action
.
id
)
;
let
node
=
document
.
getElementById
(
id
)
;
if
(
node
)
{
node
.
remove
(
)
;
}
if
(
action
.
subview
)
{
let
panelViewNodeID
=
this
.
_panelViewNodeIDFromActionID
(
action
.
id
)
;
let
panelViewNode
=
document
.
getElementById
(
panelViewNodeID
)
;
if
(
panelViewNode
)
{
panelViewNode
.
remove
(
)
;
}
}
}
_removeActionFromUrlbar
(
action
)
{
let
id
=
this
.
_urlbarButtonNodeIDForActionID
(
action
.
id
)
;
let
node
=
document
.
getElementById
(
id
)
;
if
(
node
)
{
node
.
remove
(
)
;
}
}
updateActionIconURL
(
action
)
{
let
url
=
action
.
iconURL
?
url
(
'
{
action
.
iconURL
}
'
)
:
null
;
let
nodeIDs
=
[
this
.
_panelButtonNodeIDForActionID
(
action
.
id
)
this
.
_urlbarButtonNodeIDForActionID
(
action
.
id
)
]
;
for
(
let
nodeID
of
nodeIDs
)
{
let
node
=
document
.
getElementById
(
nodeID
)
;
if
(
node
)
{
if
(
url
)
{
node
.
style
.
listStyleImage
=
url
;
}
else
{
node
.
style
.
removeProperty
(
"
list
-
style
-
image
"
)
;
}
}
}
}
updateActionTitle
(
action
)
{
let
id
=
this
.
_panelButtonNodeIDForActionID
(
action
.
id
)
;
let
node
=
document
.
getElementById
(
id
)
;
if
(
node
)
{
node
.
setAttribute
(
"
label
"
action
.
title
)
;
}
}
actionForNode
(
node
)
{
if
(
!
node
)
{
return
null
;
}
let
actionID
=
this
.
_actionIDForNodeID
(
node
.
id
)
;
return
PageActions
.
actionForID
(
actionID
)
;
}
_panelButtonNodeIDForActionID
(
actionID
)
{
return
"
pageAction
-
panel
-
"
+
actionID
;
}
_urlbarButtonNodeIDForActionID
(
actionID
)
{
let
action
=
PageActions
.
actionForID
(
actionID
)
;
if
(
action
&
&
action
.
urlbarIDOverride
)
{
return
action
.
urlbarIDOverride
;
}
return
"
pageAction
-
urlbar
-
"
+
actionID
;
}
_actionIDForNodeID
(
nodeID
)
{
if
(
!
nodeID
)
{
return
null
;
}
let
match
=
nodeID
.
match
(
/
^
pageAction
-
(
?
:
panel
|
urlbar
)
-
(
.
+
)
/
)
;
return
match
?
match
[
1
]
:
null
;
}
mainButtonClicked
(
event
)
{
event
.
stopPropagation
(
)
;
if
(
(
event
.
type
=
=
"
click
"
&
&
event
.
button
!
=
0
)
|
|
(
event
.
type
=
=
"
keypress
"
&
&
event
.
charCode
!
=
KeyEvent
.
DOM_VK_SPACE
&
&
event
.
keyCode
!
=
KeyEvent
.
DOM_VK_RETURN
)
)
{
return
;
}
for
(
let
action
of
PageActions
.
actions
)
{
let
buttonNodeID
=
this
.
_panelButtonNodeIDForActionID
(
action
.
id
)
;
let
buttonNode
=
document
.
getElementById
(
buttonNodeID
)
;
action
.
onShowingInPanel
(
buttonNode
)
;
}
this
.
panelNode
.
hidden
=
false
;
this
.
panelNode
.
openPopup
(
this
.
mainButtonNode
{
position
:
"
bottomcenter
topright
"
triggerEvent
:
event
}
)
;
}
onContextMenu
(
event
)
{
let
node
=
event
.
originalTarget
;
this
.
_contextAction
=
this
.
actionForNode
(
node
)
;
}
onContextMenuShowing
(
event
popup
)
{
if
(
event
.
target
!
=
popup
)
{
return
;
}
let
toggleItem
=
popup
.
firstChild
;
let
toggleItemLabel
=
null
;
if
(
this
.
_contextAction
)
{
toggleItem
.
disabled
=
false
;
if
(
this
.
_contextAction
.
shownInUrlbar
)
{
toggleItemLabel
=
toggleItem
.
getAttribute
(
"
remove
-
label
"
)
;
}
}
if
(
!
toggleItemLabel
)
{
toggleItemLabel
=
toggleItem
.
getAttribute
(
"
add
-
label
"
)
;
}
toggleItem
.
label
=
toggleItemLabel
;
}
toggleShownInUrlbarForContextAction
(
)
{
if
(
!
this
.
_contextAction
)
{
return
;
}
this
.
_contextAction
.
shownInUrlbar
=
!
this
.
_contextAction
.
shownInUrlbar
;
}
_contextAction
:
null
takeNodeAttributeFromPanel
(
node
attrName
)
{
let
panelAttrName
=
node
.
getAttribute
(
attrName
)
;
if
(
!
panelAttrName
&
&
attrName
=
=
"
title
"
)
{
attrName
=
"
label
"
;
panelAttrName
=
node
.
getAttribute
(
attrName
)
;
}
if
(
panelAttrName
)
{
let
attrValue
=
this
.
panelNode
.
getAttribute
(
panelAttrName
)
;
if
(
attrValue
)
{
node
.
setAttribute
(
attrName
attrValue
)
;
}
}
}
}
;
BrowserPageActions
.
bookmark
=
{
onShowingInPanel
(
buttonNode
)
{
BookmarkingUI
.
updateBookmarkPageMenuItem
(
)
;
}
onCommand
(
event
buttonNode
)
{
BrowserPageActions
.
panelNode
.
hidePopup
(
)
;
BookmarkingUI
.
onStarCommand
(
event
)
;
}
}
;
BrowserPageActions
.
copyURL
=
{
onPlacedInPanel
(
buttonNode
)
{
BrowserPageActions
.
takeNodeAttributeFromPanel
(
buttonNode
"
title
"
)
;
}
onCommand
(
event
buttonNode
)
{
BrowserPageActions
.
panelNode
.
hidePopup
(
)
;
Cc
[
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
]
.
getService
(
Ci
.
nsIClipboardHelper
)
.
copyString
(
gBrowser
.
selectedBrowser
.
currentURI
.
spec
)
;
}
}
;
BrowserPageActions
.
emailLink
=
{
onPlacedInPanel
(
buttonNode
)
{
BrowserPageActions
.
takeNodeAttributeFromPanel
(
buttonNode
"
title
"
)
;
}
onCommand
(
event
buttonNode
)
{
BrowserPageActions
.
panelNode
.
hidePopup
(
)
;
MailIntegration
.
sendLinkForBrowser
(
gBrowser
.
selectedBrowser
)
;
}
}
;
BrowserPageActions
.
sendToDevice
=
{
onPlacedInPanel
(
buttonNode
)
{
BrowserPageActions
.
takeNodeAttributeFromPanel
(
buttonNode
"
title
"
)
;
}
onSubviewPlaced
(
panelViewNode
)
{
let
bodyNode
=
panelViewNode
.
firstChild
;
for
(
let
node
of
bodyNode
.
childNodes
)
{
BrowserPageActions
.
takeNodeAttributeFromPanel
(
node
"
title
"
)
;
BrowserPageActions
.
takeNodeAttributeFromPanel
(
node
"
shortcut
"
)
;
}
}
onShowingInPanel
(
buttonNode
)
{
let
browser
=
gBrowser
.
selectedBrowser
;
let
url
=
browser
.
currentURI
.
spec
;
if
(
gSync
.
isSendableURI
(
url
)
)
{
buttonNode
.
removeAttribute
(
"
disabled
"
)
;
}
else
{
buttonNode
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
}
onShowingSubview
(
panelViewNode
)
{
let
browser
=
gBrowser
.
selectedBrowser
;
let
url
=
browser
.
currentURI
.
spec
;
let
title
=
browser
.
contentTitle
;
let
bodyNode
=
panelViewNode
.
firstChild
;
gSync
.
populateSendTabToDevicesMenu
(
bodyNode
url
title
(
clientId
name
clientType
)
=
>
{
if
(
!
name
)
{
return
document
.
createElement
(
"
toolbarseparator
"
)
;
}
let
item
=
document
.
createElement
(
"
toolbarbutton
"
)
;
item
.
classList
.
add
(
"
pageAction
-
sendToDevice
-
device
"
"
subviewbutton
"
)
;
if
(
clientId
)
{
item
.
classList
.
add
(
"
subviewbutton
-
iconic
"
)
;
}
item
.
setAttribute
(
"
tooltiptext
"
name
)
;
return
item
;
}
)
;
bodyNode
.
removeAttribute
(
"
state
"
)
;
if
(
gSync
.
syncConfiguredAndLoading
)
{
bodyNode
.
setAttribute
(
"
state
"
"
notready
"
)
;
Services
.
tm
.
dispatchToMainThread
(
async
(
)
=
>
{
await
Weave
.
Service
.
sync
(
[
]
)
;
if
(
!
window
.
closed
&
&
!
gSync
.
syncConfiguredAndLoading
)
{
this
.
onShowingSubview
(
panelViewNode
)
;
}
}
)
;
}
}
}
;
