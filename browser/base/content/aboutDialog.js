Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
function
init
(
aEvent
)
{
if
(
aEvent
.
target
!
=
document
)
return
;
try
{
var
distroId
=
Services
.
prefs
.
getCharPref
(
"
distribution
.
id
"
)
;
if
(
distroId
)
{
var
distroVersion
=
Services
.
prefs
.
getCharPref
(
"
distribution
.
version
"
)
;
var
distroIdField
=
document
.
getElementById
(
"
distributionId
"
)
;
distroIdField
.
value
=
distroId
+
"
-
"
+
distroVersion
;
distroIdField
.
style
.
display
=
"
block
"
;
try
{
var
distroAbout
=
Services
.
prefs
.
getComplexValue
(
"
distribution
.
about
"
Components
.
interfaces
.
nsISupportsString
)
;
var
distroField
=
document
.
getElementById
(
"
distribution
"
)
;
distroField
.
value
=
distroAbout
;
distroField
.
style
.
display
=
"
block
"
;
}
catch
(
ex
)
{
Components
.
utils
.
reportError
(
ex
)
;
}
}
}
catch
(
e
)
{
}
let
version
=
Services
.
appinfo
.
version
;
if
(
/
a
\
d
+
/
.
test
(
version
)
)
{
let
buildID
=
Services
.
appinfo
.
appBuildID
;
let
buildDate
=
buildID
.
slice
(
0
4
)
+
"
-
"
+
buildID
.
slice
(
4
6
)
+
"
-
"
+
buildID
.
slice
(
6
8
)
;
document
.
getElementById
(
"
version
"
)
.
textContent
+
=
"
(
"
+
buildDate
+
"
)
"
;
document
.
getElementById
(
"
experimental
"
)
.
hidden
=
false
;
document
.
getElementById
(
"
communityDesc
"
)
.
hidden
=
true
;
}
if
(
AppConstants
.
MOZ_UPDATER
)
{
gAppUpdater
=
new
appUpdater
(
)
;
let
defaults
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
let
channelLabel
=
document
.
getElementById
(
"
currentChannel
"
)
;
let
currentChannelText
=
document
.
getElementById
(
"
currentChannelText
"
)
;
channelLabel
.
value
=
UpdateUtils
.
UpdateChannel
;
if
(
/
^
release
(
|
\
-
)
/
.
test
(
channelLabel
.
value
)
)
currentChannelText
.
hidden
=
true
;
}
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
window
.
sizeToContent
(
)
;
window
.
moveTo
(
(
screen
.
availWidth
/
2
)
-
(
window
.
outerWidth
/
2
)
screen
.
availHeight
/
5
)
;
}
}
