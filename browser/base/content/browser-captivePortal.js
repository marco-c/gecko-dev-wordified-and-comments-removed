XPCOMUtils
.
defineLazyServiceGetter
(
this
"
cps
"
"
mozilla
.
org
/
network
/
captive
-
portal
-
service
;
1
"
"
nsICaptivePortalService
"
)
;
var
CaptivePortalWatcher
=
{
PORTAL_RECHECK_DELAY_MS
:
Services
.
prefs
.
getIntPref
(
"
captivedetect
.
portalRecheckDelayMS
"
500
)
PORTAL_NOTIFICATION_VALUE
:
"
captive
-
portal
-
detected
"
_captivePortalTab
:
null
_delayedCaptivePortalDetectedInProgress
:
false
_waitingForRecheck
:
false
get
_captivePortalNotification
(
)
{
let
nb
=
document
.
getElementById
(
"
high
-
priority
-
global
-
notificationbox
"
)
;
return
nb
.
getNotificationWithValue
(
this
.
PORTAL_NOTIFICATION_VALUE
)
;
}
get
canonicalURL
(
)
{
return
Services
.
prefs
.
getCharPref
(
"
captivedetect
.
canonicalURL
"
)
;
}
get
_browserBundle
(
)
{
delete
this
.
_browserBundle
;
return
this
.
_browserBundle
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
browser
.
properties
"
)
;
}
init
(
)
{
Services
.
obs
.
addObserver
(
this
"
captive
-
portal
-
login
"
)
;
Services
.
obs
.
addObserver
(
this
"
captive
-
portal
-
login
-
abort
"
)
;
Services
.
obs
.
addObserver
(
this
"
captive
-
portal
-
login
-
success
"
)
;
if
(
cps
.
state
=
=
cps
.
LOCKED_PORTAL
)
{
this
.
_captivePortalDetected
(
)
;
let
windows
=
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
if
(
windows
.
getNext
(
)
=
=
window
&
&
!
windows
.
hasMoreElements
(
)
)
{
this
.
ensureCaptivePortalTab
(
)
;
}
}
else
if
(
cps
.
state
=
=
cps
.
UNKNOWN
)
{
this
.
_delayedRecheckPending
=
true
;
Services
.
obs
.
addObserver
(
this
"
browser
-
delayed
-
startup
-
finished
"
)
;
}
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
PORTAL_RECHECK_DELAY_MS
"
"
captivedetect
.
portalRecheckDelayMS
"
500
)
;
}
uninit
(
)
{
Services
.
obs
.
removeObserver
(
this
"
captive
-
portal
-
login
"
)
;
Services
.
obs
.
removeObserver
(
this
"
captive
-
portal
-
login
-
abort
"
)
;
Services
.
obs
.
removeObserver
(
this
"
captive
-
portal
-
login
-
success
"
)
;
if
(
this
.
_delayedRecheckPending
)
{
Services
.
obs
.
removeObserver
(
this
"
browser
-
delayed
-
startup
-
finished
"
)
;
}
if
(
this
.
_delayedCaptivePortalDetectedInProgress
)
{
Services
.
obs
.
removeObserver
(
this
"
xul
-
window
-
visible
"
)
;
}
}
observe
(
aSubject
aTopic
aData
)
{
switch
(
aTopic
)
{
case
"
browser
-
delayed
-
startup
-
finished
"
:
Services
.
obs
.
removeObserver
(
this
"
browser
-
delayed
-
startup
-
finished
"
)
;
delete
this
.
_delayedRecheckPending
;
cps
.
recheckCaptivePortal
(
)
;
break
;
case
"
captive
-
portal
-
login
"
:
this
.
_captivePortalDetected
(
)
;
break
;
case
"
captive
-
portal
-
login
-
abort
"
:
case
"
captive
-
portal
-
login
-
success
"
:
this
.
_captivePortalGone
(
)
;
break
;
case
"
xul
-
window
-
visible
"
:
this
.
_delayedCaptivePortalDetected
(
)
;
break
;
}
}
_captivePortalDetected
(
)
{
if
(
this
.
_delayedCaptivePortalDetectedInProgress
)
{
return
;
}
let
win
=
BrowserWindowTracker
.
getTopWindow
(
)
;
if
(
win
!
=
Services
.
ww
.
activeWindow
)
{
this
.
_delayedCaptivePortalDetectedInProgress
=
true
;
Services
.
obs
.
addObserver
(
this
"
xul
-
window
-
visible
"
)
;
}
this
.
_showNotification
(
)
;
}
_delayedCaptivePortalDetected
(
)
{
if
(
!
this
.
_delayedCaptivePortalDetectedInProgress
)
{
return
;
}
let
win
=
BrowserWindowTracker
.
getTopWindow
(
)
;
if
(
win
!
=
Services
.
ww
.
activeWindow
)
{
return
;
}
Services
.
obs
.
removeObserver
(
this
"
xul
-
window
-
visible
"
)
;
this
.
_delayedCaptivePortalDetectedInProgress
=
false
;
if
(
win
!
=
window
)
{
return
;
}
cps
.
recheckCaptivePortal
(
)
;
this
.
_waitingForRecheck
=
true
;
let
requestTime
=
Date
.
now
(
)
;
let
self
=
this
;
Services
.
obs
.
addObserver
(
function
observer
(
)
{
let
time
=
Date
.
now
(
)
-
requestTime
;
Services
.
obs
.
removeObserver
(
observer
"
captive
-
portal
-
check
-
complete
"
)
;
self
.
_waitingForRecheck
=
false
;
if
(
cps
.
state
!
=
cps
.
LOCKED_PORTAL
)
{
return
;
}
if
(
time
<
=
self
.
PORTAL_RECHECK_DELAY_MS
)
{
self
.
ensureCaptivePortalTab
(
)
;
}
}
"
captive
-
portal
-
check
-
complete
"
)
;
}
_captivePortalGone
(
)
{
if
(
this
.
_delayedCaptivePortalDetectedInProgress
)
{
Services
.
obs
.
removeObserver
(
this
"
xul
-
window
-
visible
"
)
;
this
.
_delayedCaptivePortalDetectedInProgress
=
false
;
}
this
.
_removeNotification
(
)
;
}
handleEvent
(
aEvent
)
{
if
(
aEvent
.
type
!
=
"
TabSelect
"
|
|
!
this
.
_captivePortalTab
|
|
!
this
.
_captivePortalNotification
)
{
return
;
}
let
tab
=
this
.
_captivePortalTab
.
get
(
)
;
let
n
=
this
.
_captivePortalNotification
;
if
(
!
tab
|
|
!
n
)
{
return
;
}
let
doc
=
tab
.
ownerDocument
;
let
button
=
n
.
querySelector
(
"
button
.
notification
-
button
"
)
;
if
(
doc
.
defaultView
.
gBrowser
.
selectedTab
=
=
tab
)
{
button
.
style
.
visibility
=
"
hidden
"
;
}
else
{
button
.
style
.
visibility
=
"
visible
"
;
}
}
_showNotification
(
)
{
let
buttons
=
[
{
label
:
this
.
_browserBundle
.
GetStringFromName
(
"
captivePortal
.
showLoginPage2
"
)
callback
:
(
)
=
>
{
this
.
ensureCaptivePortalTab
(
)
;
return
true
;
}
isDefault
:
true
}
]
;
let
message
=
this
.
_browserBundle
.
GetStringFromName
(
"
captivePortal
.
infoMessage3
"
)
;
let
closeHandler
=
(
aEventName
)
=
>
{
if
(
aEventName
!
=
"
removed
"
)
{
return
;
}
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabSelect
"
this
)
;
}
;
let
nb
=
document
.
getElementById
(
"
high
-
priority
-
global
-
notificationbox
"
)
;
nb
.
appendNotification
(
message
this
.
PORTAL_NOTIFICATION_VALUE
"
"
nb
.
PRIORITY_INFO_MEDIUM
buttons
closeHandler
)
;
gBrowser
.
tabContainer
.
addEventListener
(
"
TabSelect
"
this
)
;
}
_removeNotification
(
)
{
let
n
=
this
.
_captivePortalNotification
;
if
(
!
n
|
|
!
n
.
parentNode
)
{
return
;
}
n
.
close
(
)
;
}
ensureCaptivePortalTab
(
)
{
let
tab
;
if
(
this
.
_captivePortalTab
)
{
tab
=
this
.
_captivePortalTab
.
get
(
)
;
}
if
(
!
tab
|
|
tab
.
closing
|
|
!
tab
.
parentNode
)
{
tab
=
gBrowser
.
addWebTab
(
this
.
canonicalURL
{
ownerTab
:
gBrowser
.
selectedTab
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
userContextId
:
gBrowser
.
contentPrincipal
.
userContextId
}
)
}
)
;
this
.
_captivePortalTab
=
Cu
.
getWeakReference
(
tab
)
;
}
gBrowser
.
selectedTab
=
tab
;
let
canonicalURI
=
makeURI
(
this
.
canonicalURL
)
;
let
tabCloser
=
(
)
=
>
{
Services
.
obs
.
removeObserver
(
tabCloser
"
captive
-
portal
-
login
-
abort
"
)
;
Services
.
obs
.
removeObserver
(
tabCloser
"
captive
-
portal
-
login
-
success
"
)
;
if
(
!
tab
|
|
tab
.
closing
|
|
!
tab
.
parentNode
|
|
!
tab
.
linkedBrowser
|
|
!
tab
.
linkedBrowser
.
currentURI
.
equalsExceptRef
(
canonicalURI
)
)
{
return
;
}
gBrowser
.
removeTab
(
tab
)
;
}
;
Services
.
obs
.
addObserver
(
tabCloser
"
captive
-
portal
-
login
-
abort
"
)
;
Services
.
obs
.
addObserver
(
tabCloser
"
captive
-
portal
-
login
-
success
"
)
;
}
}
;
