var
CustomizationHandler
=
{
handleEvent
(
aEvent
)
{
switch
(
aEvent
.
type
)
{
case
"
customizationstarting
"
:
this
.
_customizationStarting
(
)
;
break
;
case
"
customizationending
"
:
this
.
_customizationEnding
(
aEvent
.
detail
)
;
break
;
}
}
isCustomizing
(
)
{
return
document
.
documentElement
.
hasAttribute
(
"
customizing
"
)
;
}
_customizationStarting
(
)
{
let
menubar
=
document
.
getElementById
(
"
main
-
menubar
"
)
;
for
(
let
childNode
of
menubar
.
children
)
childNode
.
setAttribute
(
"
disabled
"
true
)
;
let
cmd
=
document
.
getElementById
(
"
cmd_CustomizeToolbars
"
)
;
cmd
.
setAttribute
(
"
disabled
"
"
true
"
)
;
UpdateUrlbarSearchSplitterState
(
)
;
PlacesToolbarHelper
.
customizeStart
(
)
;
}
_customizationEnding
(
aDetails
)
{
if
(
aDetails
.
changed
&
&
AppConstants
.
platform
!
=
"
macosx
"
)
{
updateEditUIVisibility
(
)
;
}
PlacesToolbarHelper
.
customizeDone
(
)
;
UpdateUrlbarSearchSplitterState
(
)
;
URLBarSetURI
(
)
;
XULBrowserWindow
.
asyncUpdateUI
(
)
;
let
menubar
=
document
.
getElementById
(
"
main
-
menubar
"
)
;
for
(
let
childNode
of
menubar
.
children
)
childNode
.
setAttribute
(
"
disabled
"
false
)
;
let
cmd
=
document
.
getElementById
(
"
cmd_CustomizeToolbars
"
)
;
cmd
.
removeAttribute
(
"
disabled
"
)
;
gBrowser
.
selectedBrowser
.
focus
(
)
;
}
}
;
