var
CustomizationHandler
=
{
handleEvent
(
aEvent
)
{
switch
(
aEvent
.
type
)
{
case
"
customizationstarting
"
:
this
.
_customizationStarting
(
)
;
break
;
case
"
customizationchange
"
:
this
.
_customizationChange
(
)
;
break
;
case
"
customizationending
"
:
this
.
_customizationEnding
(
aEvent
.
detail
)
;
break
;
}
}
isCustomizing
(
)
{
return
document
.
documentElement
.
hasAttribute
(
"
customizing
"
)
;
}
_customizationStarting
(
)
{
let
menubar
=
document
.
getElementById
(
"
main
-
menubar
"
)
;
for
(
let
childNode
of
menubar
.
childNodes
)
childNode
.
setAttribute
(
"
disabled
"
true
)
;
let
cmd
=
document
.
getElementById
(
"
cmd_CustomizeToolbars
"
)
;
cmd
.
setAttribute
(
"
disabled
"
"
true
"
)
;
UpdateUrlbarSearchSplitterState
(
)
;
CombinedStopReload
.
uninit
(
)
;
PlacesToolbarHelper
.
customizeStart
(
)
;
DownloadsButton
.
customizeStart
(
)
;
let
tabContainer
=
gBrowser
.
tabContainer
;
if
(
tabContainer
.
getAttribute
(
"
overflow
"
)
=
=
"
true
"
)
{
let
tabstrip
=
tabContainer
.
mTabstrip
;
tabstrip
.
ensureElementIsVisible
(
gBrowser
.
selectedTab
true
)
;
}
}
_customizationChange
(
)
{
PlacesToolbarHelper
.
customizeChange
(
)
;
}
_customizationEnding
(
aDetails
)
{
if
(
aDetails
.
changed
)
{
gURLBar
=
document
.
getElementById
(
"
urlbar
"
)
;
gHomeButton
.
updateTooltip
(
)
;
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
updateEditUIVisibility
(
)
;
if
(
!
window
.
__lookupGetter__
(
"
PopupNotifications
"
)
)
{
PopupNotifications
.
iconBox
=
document
.
getElementById
(
"
notification
-
popup
-
box
"
)
;
}
}
PlacesToolbarHelper
.
customizeDone
(
)
;
DownloadsButton
.
customizeDone
(
)
;
CombinedStopReload
.
init
(
)
;
UpdateUrlbarSearchSplitterState
(
)
;
URLBarSetURI
(
)
;
XULBrowserWindow
.
asyncUpdateUI
(
)
;
let
menubar
=
document
.
getElementById
(
"
main
-
menubar
"
)
;
for
(
let
childNode
of
menubar
.
childNodes
)
childNode
.
setAttribute
(
"
disabled
"
false
)
;
let
cmd
=
document
.
getElementById
(
"
cmd_CustomizeToolbars
"
)
;
cmd
.
removeAttribute
(
"
disabled
"
)
;
gBrowser
.
selectedBrowser
.
focus
(
)
;
}
}
