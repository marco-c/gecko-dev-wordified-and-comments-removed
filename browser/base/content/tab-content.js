var
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
E10SUtils
"
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
BrowserUtils
"
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
)
;
var
{
ActorManagerChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ActorManagerChild
.
jsm
"
)
;
ActorManagerChild
.
attach
(
this
"
browsers
"
)
;
var
global
=
this
;
var
trHandler
=
null
;
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
translation
.
detectLanguage
"
)
)
{
var
{
TranslationContentHandler
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
translation
/
TranslationContentHandler
.
jsm
"
)
;
trHandler
=
new
TranslationContentHandler
(
global
docShell
)
;
}
var
WebBrowserChrome
=
{
onBeforeLinkTraversal
(
originalTarget
linkURI
linkNode
isAppTab
)
{
return
BrowserUtils
.
onBeforeLinkTraversal
(
originalTarget
linkURI
linkNode
isAppTab
)
;
}
shouldLoadURI
(
aDocShell
aURI
aReferrer
aHasPostData
aTriggeringPrincipal
aCsp
)
{
if
(
!
E10SUtils
.
shouldLoadURI
(
aDocShell
aURI
aReferrer
aHasPostData
)
)
{
E10SUtils
.
redirectLoad
(
aDocShell
aURI
aReferrer
aTriggeringPrincipal
false
null
aCsp
)
;
return
false
;
}
return
true
;
}
shouldLoadURIInThisProcess
(
aURI
)
{
return
E10SUtils
.
shouldLoadURIInThisProcess
(
aURI
)
;
}
reloadInFreshProcess
(
aDocShell
aURI
aReferrer
aTriggeringPrincipal
aLoadFlags
aCsp
)
{
E10SUtils
.
redirectLoad
(
aDocShell
aURI
aReferrer
aTriggeringPrincipal
true
aLoadFlags
aCsp
)
;
return
true
;
}
}
;
if
(
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
)
{
let
tabchild
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsITabChild
)
;
tabchild
.
webBrowserChrome
=
WebBrowserChrome
;
}
Services
.
obs
.
notifyObservers
(
this
"
tab
-
content
-
frameloader
-
created
"
)
;
addEventListener
(
"
MozAfterPaint
"
function
onFirstNonBlankPaint
(
)
{
if
(
content
.
document
.
documentURI
=
=
"
about
:
blank
"
&
&
!
content
.
opener
)
return
;
removeEventListener
(
"
MozAfterPaint
"
onFirstNonBlankPaint
)
;
sendAsyncMessage
(
"
Browser
:
FirstNonBlankPaint
"
)
;
}
)
;
