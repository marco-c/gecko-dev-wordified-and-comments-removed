var
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
E10SUtils
"
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
BrowserUtils
"
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
)
;
var
{
ActorManagerChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ActorManagerChild
.
jsm
"
)
;
ActorManagerChild
.
attach
(
this
"
browsers
"
)
;
var
global
=
this
;
var
WebBrowserChrome
=
{
onBeforeLinkTraversal
(
originalTarget
linkURI
linkNode
isAppTab
)
{
return
BrowserUtils
.
onBeforeLinkTraversal
(
originalTarget
linkURI
linkNode
isAppTab
)
;
}
shouldLoadURI
(
aDocShell
aURI
aReferrerInfo
aHasPostData
aTriggeringPrincipal
aCsp
)
{
if
(
!
E10SUtils
.
shouldLoadURI
(
aDocShell
aURI
aHasPostData
)
)
{
E10SUtils
.
redirectLoad
(
aDocShell
aURI
aReferrerInfo
aTriggeringPrincipal
null
aCsp
)
;
return
false
;
}
return
true
;
}
shouldLoadURIInThisProcess
(
aURI
)
{
let
remoteSubframes
=
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
.
useRemoteSubframes
;
return
E10SUtils
.
shouldLoadURIInThisProcess
(
aURI
remoteSubframes
)
;
}
}
;
if
(
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
)
{
let
tabchild
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIBrowserChild
)
;
tabchild
.
webBrowserChrome
=
WebBrowserChrome
;
}
Services
.
obs
.
notifyObservers
(
this
"
tab
-
content
-
frameloader
-
created
"
)
;
void
content
;
