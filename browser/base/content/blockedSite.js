function
getErrorCode
(
)
{
var
url
=
document
.
documentURI
;
var
error
=
url
.
search
(
/
e
\
=
/
)
;
var
duffUrl
=
url
.
search
(
/
\
&
u
\
=
/
)
;
return
decodeURIComponent
(
url
.
slice
(
error
+
2
duffUrl
)
)
;
}
function
getURL
(
)
{
var
url
=
document
.
documentURI
;
var
match
=
url
.
match
(
/
&
u
=
(
[
^
&
]
+
)
&
/
)
;
if
(
!
match
)
{
return
"
"
;
}
url
=
decodeURIComponent
(
match
[
1
]
)
;
if
(
url
.
startsWith
(
"
view
-
source
:
"
)
)
{
url
=
url
.
slice
(
12
)
;
}
return
url
;
}
function
getOverride
(
)
{
var
url
=
document
.
documentURI
;
var
match
=
url
.
match
(
/
&
o
=
1
&
/
)
;
return
!
!
match
;
}
function
getHostString
(
)
{
try
{
return
document
.
location
.
hostname
;
}
catch
(
e
)
{
return
getURL
(
)
;
}
}
function
onClickSeeDetails
(
)
{
let
details
=
document
.
getElementById
(
"
errorDescriptionContainer
"
)
;
details
.
hidden
=
!
details
.
hidden
;
}
function
initPage
(
)
{
const
errorMap
=
{
malwareBlocked
:
"
malware
"
deceptiveBlocked
:
"
phishing
"
unwantedBlocked
:
"
unwanted
"
harmfulBlocked
:
"
harmful
"
}
;
const
error
=
errorMap
[
getErrorCode
(
)
]
;
if
(
error
=
=
=
undefined
)
{
return
;
}
const
messageIDs
=
{
malware
:
{
title
:
"
safeb
-
blocked
-
malware
-
page
-
title
"
shortDesc
:
"
safeb
-
blocked
-
malware
-
page
-
short
-
desc
"
innerDescOverride
:
"
safeb
-
blocked
-
malware
-
page
-
error
-
desc
-
override
-
sumo
"
innerDescNoOverride
:
"
safeb
-
blocked
-
malware
-
page
-
error
-
desc
-
no
-
override
-
sumo
"
learnMore
:
"
safeb
-
blocked
-
malware
-
page
-
learn
-
more
-
sumo
"
}
phishing
:
{
title
:
"
safeb
-
blocked
-
phishing
-
page
-
title
"
shortDesc
:
"
safeb
-
blocked
-
phishing
-
page
-
short
-
desc
"
innerDescOverride
:
"
safeb
-
blocked
-
phishing
-
page
-
error
-
desc
-
override
"
innerDescNoOverride
:
"
safeb
-
blocked
-
phishing
-
page
-
error
-
desc
-
no
-
override
"
learnMore
:
"
safeb
-
blocked
-
phishing
-
page
-
learn
-
more
"
}
unwanted
:
{
title
:
"
safeb
-
blocked
-
unwanted
-
page
-
title
"
shortDesc
:
"
safeb
-
blocked
-
unwanted
-
page
-
short
-
desc
"
innerDescOverride
:
"
safeb
-
blocked
-
unwanted
-
page
-
error
-
desc
-
override
"
innerDescNoOverride
:
"
safeb
-
blocked
-
unwanted
-
page
-
error
-
desc
-
no
-
override
"
learnMore
:
"
safeb
-
blocked
-
unwanted
-
page
-
learn
-
more
"
}
harmful
:
{
title
:
"
safeb
-
blocked
-
harmful
-
page
-
title
"
shortDesc
:
"
safeb
-
blocked
-
harmful
-
page
-
short
-
desc
"
innerDescOverride
:
"
safeb
-
blocked
-
harmful
-
page
-
error
-
desc
-
override
"
innerDescNoOverride
:
"
safeb
-
blocked
-
harmful
-
page
-
error
-
desc
-
no
-
override
"
learnMore
:
"
safeb
-
blocked
-
harmful
-
page
-
learn
-
more
"
}
}
;
let
titleText
=
document
.
getElementById
(
"
errorTitleText
"
)
;
document
.
l10n
.
setAttributes
(
titleText
messageIDs
[
error
]
.
title
)
;
let
shortDesc
=
document
.
getElementById
(
"
errorShortDescText
"
)
;
document
.
l10n
.
setAttributes
(
shortDesc
messageIDs
[
error
]
.
shortDesc
)
;
let
innerDesc
=
document
.
getElementById
(
"
errorInnerDescription
"
)
;
let
innerDescL10nID
;
if
(
!
getOverride
(
)
)
{
innerDescL10nID
=
messageIDs
[
error
]
.
innerDescNoOverride
;
document
.
getElementById
(
"
ignore_warning_link
"
)
.
remove
(
)
;
}
else
{
innerDescL10nID
=
messageIDs
[
error
]
.
innerDescOverride
;
}
if
(
error
=
=
"
unwanted
"
|
|
error
=
=
"
harmful
"
)
{
document
.
getElementById
(
"
report_detection
"
)
.
remove
(
)
;
}
document
.
l10n
.
setAttributes
(
innerDesc
innerDescL10nID
{
sitename
:
getHostString
(
)
}
)
;
let
learnMore
=
document
.
getElementById
(
"
learn_more
"
)
;
document
.
l10n
.
setAttributes
(
learnMore
messageIDs
[
error
]
.
learnMore
)
;
let
errorSitename
=
document
.
getElementById
(
"
error_desc_sitename
"
)
;
errorSitename
.
setAttribute
(
"
class
"
"
sitename
"
)
;
let
titleEl
=
document
.
createElement
(
"
title
"
)
;
document
.
l10n
.
setAttributes
(
titleEl
messageIDs
[
error
]
.
title
)
;
document
.
head
.
appendChild
(
titleEl
)
;
var
event
=
new
CustomEvent
(
"
AboutBlockedLoaded
"
{
bubbles
:
true
detail
:
{
url
:
this
.
getURL
(
)
err
:
error
}
}
)
;
document
.
dispatchEvent
(
event
)
;
}
let
seeDetailsButton
=
document
.
getElementById
(
"
seeDetailsButton
"
)
;
seeDetailsButton
.
addEventListener
(
"
click
"
onClickSeeDetails
)
;
initPage
(
)
;
