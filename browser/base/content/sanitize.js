Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FormHistory
"
"
resource
:
/
/
gre
/
modules
/
FormHistory
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Downloads
"
"
resource
:
/
/
gre
/
modules
/
Downloads
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Promise
"
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Task
"
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
DownloadsCommon
"
"
resource
:
/
/
/
modules
/
DownloadsCommon
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
TelemetryStopwatch
"
"
resource
:
/
/
gre
/
modules
/
TelemetryStopwatch
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
console
"
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Preferences
"
"
resource
:
/
/
gre
/
modules
/
Preferences
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
setTimeout
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
const
YIELD_PERIOD
=
10
;
function
Sanitizer
(
)
{
}
Sanitizer
.
prototype
=
{
clearItem
:
function
(
aItemName
)
{
this
.
items
[
aItemName
]
.
clear
(
)
;
}
prefDomain
:
"
"
getNameFromPreference
:
function
(
aPreferenceName
)
{
return
aPreferenceName
.
substr
(
this
.
prefDomain
.
length
)
;
}
sanitize
:
Task
.
async
(
function
*
(
aItemsToClear
=
null
)
{
let
progress
=
{
}
;
let
promise
=
this
.
_sanitize
(
aItemsToClear
progress
)
;
let
shutdownClient
=
Cc
[
"
mozilla
.
org
/
browser
/
nav
-
history
-
service
;
1
"
]
.
getService
(
Ci
.
nsPIPlacesDatabase
)
.
shutdownClient
.
jsclient
;
shutdownClient
.
addBlocker
(
"
sanitize
.
js
:
Sanitize
"
promise
{
fetchState
:
(
)
=
>
{
return
{
progress
}
;
}
}
)
;
try
{
yield
promise
;
}
finally
{
Services
.
obs
.
notifyObservers
(
null
"
sanitizer
-
sanitization
-
complete
"
"
"
)
;
}
}
)
_sanitize
:
Task
.
async
(
function
*
(
aItemsToClear
progress
=
{
}
)
{
let
seenError
=
false
;
let
itemsToClear
;
if
(
Array
.
isArray
(
aItemsToClear
)
)
{
itemsToClear
=
[
.
.
.
aItemsToClear
]
;
}
else
{
let
branch
=
Services
.
prefs
.
getBranch
(
this
.
prefDomain
)
;
itemsToClear
=
Object
.
keys
(
this
.
items
)
.
filter
(
itemName
=
>
{
try
{
return
branch
.
getBoolPref
(
itemName
)
;
}
catch
(
ex
)
{
return
false
;
}
}
)
;
}
Preferences
.
set
(
Sanitizer
.
PREF_SANITIZE_IN_PROGRESS
JSON
.
stringify
(
itemsToClear
)
)
;
for
(
let
k
of
itemsToClear
)
{
progress
[
k
]
=
"
ready
"
;
}
let
openWindowsIndex
=
itemsToClear
.
indexOf
(
"
openWindows
"
)
;
if
(
openWindowsIndex
!
=
-
1
)
{
itemsToClear
.
splice
(
openWindowsIndex
1
)
;
yield
this
.
items
.
openWindows
.
clear
(
)
;
progress
.
openWindows
=
"
cleared
"
;
}
let
range
=
null
;
if
(
!
this
.
ignoreTimespan
)
{
range
=
this
.
range
|
|
Sanitizer
.
getClearRange
(
)
;
}
for
(
let
itemName
of
itemsToClear
)
{
let
item
=
this
.
items
[
itemName
]
;
if
(
!
(
"
clear
"
in
item
)
)
{
progress
[
itemName
]
=
"
clear
not
in
item
"
;
continue
;
}
item
.
range
=
range
;
let
refObj
=
{
}
;
try
{
TelemetryStopwatch
.
start
(
"
FX_SANITIZE_TOTAL
"
refObj
)
;
yield
item
.
clear
(
)
;
progress
[
itemName
]
=
"
cleared
"
;
}
catch
(
er
)
{
progress
[
itemName
]
=
"
failed
"
;
seenError
=
true
;
console
.
error
(
"
Error
sanitizing
"
+
itemName
er
)
;
}
finally
{
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_TOTAL
"
refObj
)
;
}
}
Preferences
.
reset
(
Sanitizer
.
PREF_SANITIZE_IN_PROGRESS
)
;
progress
=
{
}
;
if
(
seenError
)
{
throw
new
Error
(
"
Error
sanitizing
"
)
;
}
}
)
ignoreTimespan
:
true
range
:
null
items
:
{
cache
:
{
clear
:
function
(
)
{
let
refObj
=
{
}
;
TelemetryStopwatch
.
start
(
"
FX_SANITIZE_CACHE
"
refObj
)
;
var
cache
=
Cc
[
"
mozilla
.
org
/
netwerk
/
cache
-
storage
-
service
;
1
"
]
.
getService
(
Ci
.
nsICacheStorageService
)
;
try
{
cache
.
clear
(
)
;
}
catch
(
er
)
{
}
var
imageCache
=
Cc
[
"
mozilla
.
org
/
image
/
tools
;
1
"
]
.
getService
(
Ci
.
imgITools
)
.
getImgCacheForDocument
(
null
)
;
try
{
imageCache
.
clearCache
(
false
)
;
}
catch
(
er
)
{
}
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_CACHE
"
refObj
)
;
}
}
cookies
:
{
clear
:
Task
.
async
(
function
*
(
)
{
let
yieldCounter
=
0
;
let
refObj
=
{
}
;
TelemetryStopwatch
.
start
(
"
FX_SANITIZE_COOKIES
"
refObj
)
;
TelemetryStopwatch
.
start
(
"
FX_SANITIZE_COOKIES_2
"
refObj
)
;
var
cookieMgr
=
Components
.
classes
[
"
mozilla
.
org
/
cookiemanager
;
1
"
]
.
getService
(
Ci
.
nsICookieManager
)
;
if
(
this
.
range
)
{
var
cookiesEnum
=
cookieMgr
.
enumerator
;
while
(
cookiesEnum
.
hasMoreElements
(
)
)
{
var
cookie
=
cookiesEnum
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsICookie2
)
;
if
(
cookie
.
creationTime
>
this
.
range
[
0
]
)
{
cookieMgr
.
remove
(
cookie
.
host
cookie
.
name
cookie
.
path
false
)
;
if
(
+
+
yieldCounter
%
YIELD_PERIOD
=
=
0
)
{
yield
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
}
}
}
}
else
{
cookieMgr
.
removeAll
(
)
;
yield
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
}
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_COOKIES_2
"
refObj
)
;
let
mediaMgr
=
Components
.
classes
[
"
mozilla
.
org
/
mediaManagerService
;
1
"
]
.
getService
(
Ci
.
nsIMediaManagerService
)
;
mediaMgr
.
sanitizeDeviceIds
(
this
.
range
&
&
this
.
range
[
0
]
)
;
TelemetryStopwatch
.
start
(
"
FX_SANITIZE_PLUGINS
"
refObj
)
;
yield
this
.
promiseClearPluginCookies
(
)
;
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_PLUGINS
"
refObj
)
;
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_COOKIES
"
refObj
)
;
}
)
promiseClearPluginCookies
:
Task
.
async
(
function
*
(
)
{
const
phInterface
=
Ci
.
nsIPluginHost
;
const
FLAG_CLEAR_ALL
=
phInterface
.
FLAG_CLEAR_ALL
;
let
ph
=
Cc
[
"
mozilla
.
org
/
plugin
/
host
;
1
"
]
.
getService
(
phInterface
)
;
let
age
=
this
.
range
?
(
Date
.
now
(
)
/
1000
-
this
.
range
[
0
]
/
1000000
)
:
-
1
;
if
(
!
this
.
range
|
|
age
>
=
0
)
{
let
tags
=
ph
.
getPluginTags
(
)
;
for
(
let
tag
of
tags
)
{
try
{
let
rv
=
yield
new
Promise
(
resolve
=
>
ph
.
clearSiteData
(
tag
null
FLAG_CLEAR_ALL
age
resolve
)
)
;
if
(
rv
=
=
Components
.
results
.
NS_ERROR_PLUGIN_TIME_RANGE_NOT_SUPPORTED
)
{
yield
new
Promise
(
resolve
=
>
ph
.
clearSiteData
(
tag
null
FLAG_CLEAR_ALL
-
1
resolve
)
)
;
}
}
catch
(
ex
)
{
}
}
}
}
)
}
offlineApps
:
{
clear
:
function
(
)
{
let
refObj
=
{
}
;
TelemetryStopwatch
.
start
(
"
FX_SANITIZE_OFFLINEAPPS
"
refObj
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
/
modules
/
offlineAppCache
.
jsm
"
)
;
OfflineAppCacheHelper
.
clear
(
)
;
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_OFFLINEAPPS
"
refObj
)
;
}
}
history
:
{
clear
:
Task
.
async
(
function
*
(
)
{
let
refObj
=
{
}
;
TelemetryStopwatch
.
start
(
"
FX_SANITIZE_HISTORY
"
refObj
)
;
try
{
if
(
this
.
range
)
{
yield
PlacesUtils
.
history
.
removeVisitsByFilter
(
{
beginDate
:
new
Date
(
this
.
range
[
0
]
/
1000
)
endDate
:
new
Date
(
this
.
range
[
1
]
/
1000
)
}
)
;
}
else
{
yield
PlacesUtils
.
history
.
clear
(
)
;
}
try
{
let
clearStartingTime
=
this
.
range
?
String
(
this
.
range
[
0
]
)
:
"
"
;
Services
.
obs
.
notifyObservers
(
null
"
browser
:
purge
-
session
-
history
"
clearStartingTime
)
;
}
catch
(
e
)
{
}
try
{
let
predictor
=
Components
.
classes
[
"
mozilla
.
org
/
network
/
predictor
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsINetworkPredictor
)
;
predictor
.
reset
(
)
;
}
catch
(
e
)
{
console
.
error
(
"
Error
while
resetting
the
predictor
"
e
)
;
}
}
finally
{
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_HISTORY
"
refObj
)
;
}
}
)
}
formdata
:
{
clear
:
function
(
)
{
let
refObj
=
{
}
;
TelemetryStopwatch
.
start
(
"
FX_SANITIZE_FORMDATA
"
refObj
)
;
var
windowManager
=
Components
.
classes
[
'
mozilla
.
org
/
appshell
/
window
-
mediator
;
1
'
]
.
getService
(
Components
.
interfaces
.
nsIWindowMediator
)
;
var
windows
=
windowManager
.
getEnumerator
(
"
navigator
:
browser
"
)
;
while
(
windows
.
hasMoreElements
(
)
)
{
let
currentWindow
=
windows
.
getNext
(
)
;
let
currentDocument
=
currentWindow
.
document
;
let
searchBar
=
currentDocument
.
getElementById
(
"
searchbar
"
)
;
if
(
searchBar
)
searchBar
.
textbox
.
reset
(
)
;
let
tabBrowser
=
currentWindow
.
gBrowser
;
for
(
let
tab
of
tabBrowser
.
tabs
)
{
if
(
tabBrowser
.
isFindBarInitialized
(
tab
)
)
tabBrowser
.
getFindBar
(
tab
)
.
clear
(
)
;
}
tabBrowser
.
_lastFindValue
=
"
"
;
}
let
change
=
{
op
:
"
remove
"
}
;
if
(
this
.
range
)
{
[
change
.
firstUsedStart
change
.
firstUsedEnd
]
=
this
.
range
;
}
FormHistory
.
update
(
change
)
;
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_FORMDATA
"
refObj
)
;
}
}
downloads
:
{
clear
:
function
(
)
{
let
refObj
=
{
}
;
TelemetryStopwatch
.
start
(
"
FX_SANITIZE_DOWNLOADS
"
refObj
)
;
Task
.
spawn
(
function
*
(
)
{
let
filterByTime
=
null
;
if
(
this
.
range
)
{
let
rangeBeginMs
=
this
.
range
[
0
]
/
1000
;
let
rangeEndMs
=
this
.
range
[
1
]
/
1000
;
filterByTime
=
download
=
>
download
.
startTime
>
=
rangeBeginMs
&
&
download
.
startTime
<
=
rangeEndMs
;
}
let
list
=
yield
Downloads
.
getList
(
Downloads
.
ALL
)
;
list
.
removeFinished
(
filterByTime
)
;
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_DOWNLOADS
"
refObj
)
;
}
.
bind
(
this
)
)
.
then
(
null
error
=
>
{
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_DOWNLOADS
"
refObj
)
;
Components
.
utils
.
reportError
(
error
)
;
}
)
;
}
}
sessions
:
{
clear
:
function
(
)
{
let
refObj
=
{
}
;
TelemetryStopwatch
.
start
(
"
FX_SANITIZE_SESSIONS
"
refObj
)
;
var
sdr
=
Components
.
classes
[
"
mozilla
.
org
/
security
/
sdr
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsISecretDecoderRing
)
;
sdr
.
logoutAndTeardown
(
)
;
var
os
=
Components
.
classes
[
"
mozilla
.
org
/
observer
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIObserverService
)
;
os
.
notifyObservers
(
null
"
net
:
clear
-
active
-
logins
"
null
)
;
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_SESSIONS
"
refObj
)
;
}
}
siteSettings
:
{
clear
:
function
(
)
{
let
refObj
=
{
}
;
TelemetryStopwatch
.
start
(
"
FX_SANITIZE_SITESETTINGS
"
refObj
)
;
let
startDateMS
=
this
.
range
=
=
null
?
null
:
this
.
range
[
0
]
/
1000
;
var
pm
=
Components
.
classes
[
"
mozilla
.
org
/
permissionmanager
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPermissionManager
)
;
if
(
startDateMS
=
=
null
)
{
pm
.
removeAll
(
)
;
}
else
{
pm
.
removeAllSince
(
startDateMS
)
;
}
var
cps
=
Components
.
classes
[
"
mozilla
.
org
/
content
-
pref
/
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIContentPrefService2
)
;
if
(
startDateMS
=
=
null
)
{
cps
.
removeAllDomains
(
null
)
;
}
else
{
cps
.
removeAllDomainsSince
(
startDateMS
null
)
;
}
var
pwmgr
=
Components
.
classes
[
"
mozilla
.
org
/
login
-
manager
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsILoginManager
)
;
var
hosts
=
pwmgr
.
getAllDisabledHosts
(
)
;
for
(
var
host
of
hosts
)
{
pwmgr
.
setLoginSavingEnabled
(
host
true
)
;
}
var
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
sss
.
clearAll
(
)
;
try
{
var
push
=
Cc
[
"
mozilla
.
org
/
push
/
Service
;
1
"
]
.
getService
(
Ci
.
nsIPushService
)
;
push
.
clearForDomain
(
"
*
"
status
=
>
{
if
(
!
Components
.
isSuccessCode
(
status
)
)
{
dump
(
"
Error
clearing
Web
Push
data
:
"
+
status
+
"
\
n
"
)
;
}
}
)
;
}
catch
(
e
)
{
dump
(
"
Web
Push
may
not
be
available
.
\
n
"
)
;
}
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_SITESETTINGS
"
refObj
)
;
}
}
openWindows
:
{
privateStateForNewWindow
:
"
non
-
private
"
_canCloseWindow
:
function
(
aWindow
)
{
if
(
aWindow
.
CanCloseWindow
(
)
)
{
aWindow
.
skipNextCanClose
=
true
;
return
true
;
}
}
_resetAllWindowClosures
:
function
(
aWindowList
)
{
for
(
let
win
of
aWindowList
)
{
win
.
skipNextCanClose
=
false
;
}
}
clear
:
Task
.
async
(
function
*
(
)
{
let
existingWindow
=
Services
.
appShell
.
hiddenDOMWindow
;
let
startDate
=
existingWindow
.
performance
.
now
(
)
;
let
windowEnumerator
=
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
let
windowList
=
[
]
;
while
(
windowEnumerator
.
hasMoreElements
(
)
)
{
let
someWin
=
windowEnumerator
.
getNext
(
)
;
windowList
.
push
(
someWin
)
;
if
(
!
this
.
_canCloseWindow
(
someWin
)
)
{
this
.
_resetAllWindowClosures
(
windowList
)
;
throw
new
Error
(
"
Sanitize
could
not
close
windows
:
cancelled
by
user
"
)
;
}
if
(
existingWindow
.
performance
.
now
(
)
>
(
startDate
+
60
*
1000
)
)
{
this
.
_resetAllWindowClosures
(
windowList
)
;
throw
new
Error
(
"
Sanitize
could
not
close
windows
:
timeout
"
)
;
}
}
let
refObj
=
{
}
;
TelemetryStopwatch
.
start
(
"
FX_SANITIZE_OPENWINDOWS
"
refObj
)
;
let
handler
=
Cc
[
"
mozilla
.
org
/
browser
/
clh
;
1
"
]
.
getService
(
Ci
.
nsIBrowserHandler
)
;
let
defaultArgs
=
handler
.
defaultArgs
;
let
features
=
"
chrome
all
dialog
=
no
"
+
this
.
privateStateForNewWindow
;
let
newWindow
=
existingWindow
.
openDialog
(
"
chrome
:
/
/
browser
/
content
/
"
"
_blank
"
features
defaultArgs
)
;
let
onFullScreen
=
null
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
onFullScreen
=
function
(
e
)
{
newWindow
.
removeEventListener
(
"
fullscreen
"
onFullScreen
)
;
let
docEl
=
newWindow
.
document
.
documentElement
;
let
sizemode
=
docEl
.
getAttribute
(
"
sizemode
"
)
;
if
(
!
newWindow
.
fullScreen
&
&
sizemode
=
=
"
fullscreen
"
)
{
docEl
.
setAttribute
(
"
sizemode
"
"
normal
"
)
;
e
.
preventDefault
(
)
;
e
.
stopPropagation
(
)
;
return
false
;
}
}
newWindow
.
addEventListener
(
"
fullscreen
"
onFullScreen
)
;
}
let
promiseReady
=
new
Promise
(
resolve
=
>
{
let
newWindowOpened
=
false
;
let
onWindowOpened
=
function
(
subject
topic
data
)
{
if
(
subject
!
=
newWindow
)
return
;
Services
.
obs
.
removeObserver
(
onWindowOpened
"
browser
-
delayed
-
startup
-
finished
"
)
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
newWindow
.
removeEventListener
(
"
fullscreen
"
onFullScreen
)
;
}
newWindowOpened
=
true
;
if
(
numWindowsClosing
=
=
0
)
{
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_OPENWINDOWS
"
refObj
)
;
resolve
(
)
;
}
}
let
numWindowsClosing
=
windowList
.
length
;
let
onWindowClosed
=
function
(
)
{
numWindowsClosing
-
-
;
if
(
numWindowsClosing
=
=
0
)
{
Services
.
obs
.
removeObserver
(
onWindowClosed
"
xul
-
window
-
destroyed
"
)
;
if
(
newWindowOpened
)
{
TelemetryStopwatch
.
finish
(
"
FX_SANITIZE_OPENWINDOWS
"
refObj
)
;
resolve
(
)
;
}
}
}
Services
.
obs
.
addObserver
(
onWindowOpened
"
browser
-
delayed
-
startup
-
finished
"
false
)
;
Services
.
obs
.
addObserver
(
onWindowClosed
"
xul
-
window
-
destroyed
"
false
)
;
}
)
;
while
(
windowList
.
length
)
{
windowList
.
pop
(
)
.
close
(
)
;
}
newWindow
.
focus
(
)
;
yield
promiseReady
;
}
)
}
}
}
;
Sanitizer
.
PREF_DOMAIN
=
"
privacy
.
sanitize
.
"
;
Sanitizer
.
PREF_SANITIZE_ON_SHUTDOWN
=
"
privacy
.
sanitize
.
sanitizeOnShutdown
"
;
Sanitizer
.
PREF_SANITIZE_IN_PROGRESS
=
"
privacy
.
sanitize
.
sanitizeInProgress
"
;
Sanitizer
.
PREF_SANITIZE_DID_SHUTDOWN
=
"
privacy
.
sanitize
.
didShutdownSanitize
"
;
Sanitizer
.
TIMESPAN_EVERYTHING
=
0
;
Sanitizer
.
TIMESPAN_HOUR
=
1
;
Sanitizer
.
TIMESPAN_2HOURS
=
2
;
Sanitizer
.
TIMESPAN_4HOURS
=
3
;
Sanitizer
.
TIMESPAN_TODAY
=
4
;
Sanitizer
.
TIMESPAN_5MIN
=
5
;
Sanitizer
.
TIMESPAN_24HOURS
=
6
;
Sanitizer
.
getClearRange
=
function
(
ts
)
{
if
(
ts
=
=
=
undefined
)
ts
=
Sanitizer
.
prefs
.
getIntPref
(
"
timeSpan
"
)
;
if
(
ts
=
=
=
Sanitizer
.
TIMESPAN_EVERYTHING
)
return
null
;
var
endDate
=
Date
.
now
(
)
*
1000
;
switch
(
ts
)
{
case
Sanitizer
.
TIMESPAN_5MIN
:
var
startDate
=
endDate
-
300000000
;
break
;
case
Sanitizer
.
TIMESPAN_HOUR
:
startDate
=
endDate
-
3600000000
;
break
;
case
Sanitizer
.
TIMESPAN_2HOURS
:
startDate
=
endDate
-
7200000000
;
break
;
case
Sanitizer
.
TIMESPAN_4HOURS
:
startDate
=
endDate
-
14400000000
;
break
;
case
Sanitizer
.
TIMESPAN_TODAY
:
var
d
=
new
Date
(
)
;
d
.
setHours
(
0
)
;
d
.
setMinutes
(
0
)
;
d
.
setSeconds
(
0
)
;
startDate
=
d
.
valueOf
(
)
*
1000
;
break
;
case
Sanitizer
.
TIMESPAN_24HOURS
:
startDate
=
endDate
-
86400000000
;
break
;
default
:
throw
"
Invalid
time
span
for
clear
private
data
:
"
+
ts
;
}
return
[
startDate
endDate
]
;
}
;
Sanitizer
.
_prefs
=
null
;
Sanitizer
.
__defineGetter__
(
"
prefs
"
function
(
)
{
return
Sanitizer
.
_prefs
?
Sanitizer
.
_prefs
:
Sanitizer
.
_prefs
=
Components
.
classes
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPrefService
)
.
getBranch
(
Sanitizer
.
PREF_DOMAIN
)
;
}
)
;
Sanitizer
.
showUI
=
function
(
aParentWindow
)
{
var
ww
=
Components
.
classes
[
"
mozilla
.
org
/
embedcomp
/
window
-
watcher
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIWindowWatcher
)
;
let
win
=
AppConstants
.
platform
=
=
"
macosx
"
?
null
:
aParentWindow
;
ww
.
openWindow
(
win
"
chrome
:
/
/
browser
/
content
/
sanitize
.
xul
"
"
Sanitize
"
"
chrome
titlebar
dialog
centerscreen
modal
"
null
)
;
}
;
Sanitizer
.
sanitize
=
function
(
aParentWindow
)
{
Sanitizer
.
showUI
(
aParentWindow
)
;
}
;
Sanitizer
.
onStartup
=
Task
.
async
(
function
*
(
)
{
let
shutdownClient
=
Cc
[
"
mozilla
.
org
/
browser
/
nav
-
history
-
service
;
1
"
]
.
getService
(
Ci
.
nsPIPlacesDatabase
)
.
shutdownClient
.
jsclient
;
shutdownClient
.
addBlocker
(
"
sanitize
.
js
:
Sanitize
on
shutdown
"
(
)
=
>
Sanitizer
.
onShutdown
(
)
)
;
if
(
!
Services
.
prefs
.
getBoolPref
(
"
privacy
.
sanitize
.
migrateClearSavedPwdsOnExit
"
)
)
{
let
deprecatedPref
=
"
privacy
.
clearOnShutdown
.
passwords
"
;
let
doUpdate
=
Services
.
prefs
.
getBoolPref
(
"
privacy
.
sanitize
.
sanitizeOnShutdown
"
)
&
&
Services
.
prefs
.
prefHasUserValue
(
deprecatedPref
)
&
&
Services
.
prefs
.
getBoolPref
(
deprecatedPref
)
;
if
(
doUpdate
)
{
Services
.
logins
.
removeAllLogins
(
)
;
Services
.
prefs
.
setBoolPref
(
"
signon
.
rememberSignons
"
false
)
;
}
Services
.
prefs
.
clearUserPref
(
deprecatedPref
)
;
Services
.
prefs
.
setBoolPref
(
"
privacy
.
sanitize
.
migrateClearSavedPwdsOnExit
"
true
)
;
}
if
(
Preferences
.
has
(
Sanitizer
.
PREF_SANITIZE_IN_PROGRESS
)
)
{
let
s
=
new
Sanitizer
(
)
;
let
json
=
Preferences
.
get
(
Sanitizer
.
PREF_SANITIZE_IN_PROGRESS
)
;
let
itemsToClear
=
JSON
.
parse
(
json
)
;
yield
s
.
sanitize
(
itemsToClear
)
;
}
if
(
Preferences
.
has
(
Sanitizer
.
PREF_SANITIZE_DID_SHUTDOWN
)
)
{
yield
Sanitizer
.
onShutdown
(
)
;
}
}
)
;
Sanitizer
.
onShutdown
=
Task
.
async
(
function
*
(
)
{
if
(
!
Preferences
.
get
(
Sanitizer
.
PREF_SANITIZE_ON_SHUTDOWN
)
)
{
return
;
}
let
s
=
new
Sanitizer
(
)
;
s
.
prefDomain
=
"
privacy
.
clearOnShutdown
.
"
;
yield
s
.
sanitize
(
)
;
Preferences
.
set
(
Sanitizer
.
PREF_SANITIZE_DID_SHUTDOWN
true
)
;
}
)
;
