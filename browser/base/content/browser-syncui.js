#
This
Source
Code
Form
is
subject
to
the
terms
of
the
Mozilla
Public
#
License
v
.
2
.
0
.
If
a
copy
of
the
MPL
was
not
distributed
with
this
#
file
You
can
obtain
one
at
http
:
/
/
mozilla
.
org
/
MPL
/
2
.
0
/
.
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
#
ifdef
MOZ_SERVICES_CLOUDSYNC
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CloudSync
"
"
resource
:
/
/
gre
/
modules
/
CloudSync
.
jsm
"
)
;
#
else
var
CloudSync
=
null
;
#
endif
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
fxAccounts
"
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
;
var
gSyncUI
=
{
_obs
:
[
"
weave
:
service
:
sync
:
start
"
"
weave
:
service
:
sync
:
finish
"
"
weave
:
service
:
sync
:
error
"
"
weave
:
service
:
setup
-
complete
"
"
weave
:
service
:
login
:
start
"
"
weave
:
service
:
login
:
finish
"
"
weave
:
service
:
login
:
error
"
"
weave
:
service
:
logout
:
finish
"
"
weave
:
service
:
start
-
over
"
"
weave
:
service
:
start
-
over
:
finish
"
"
weave
:
ui
:
login
:
error
"
"
weave
:
ui
:
sync
:
error
"
"
weave
:
ui
:
sync
:
finish
"
"
weave
:
ui
:
clear
-
error
"
]
_unloaded
:
false
_numActiveSyncTasks
:
0
init
:
function
(
)
{
Cu
.
import
(
"
resource
:
/
/
services
-
common
/
stringbundle
.
js
"
)
;
if
(
this
.
weaveService
.
ready
)
{
this
.
initUI
(
)
;
return
;
}
Services
.
obs
.
addObserver
(
this
"
weave
:
service
:
ready
"
true
)
;
window
.
addEventListener
(
"
unload
"
function
onUnload
(
)
{
gSyncUI
.
_unloaded
=
true
;
window
.
removeEventListener
(
"
unload
"
onUnload
false
)
;
Services
.
obs
.
removeObserver
(
gSyncUI
"
weave
:
service
:
ready
"
)
;
if
(
Weave
.
Status
.
ready
)
{
gSyncUI
.
_obs
.
forEach
(
function
(
topic
)
{
Services
.
obs
.
removeObserver
(
gSyncUI
topic
)
;
}
)
;
}
}
false
)
;
}
initUI
:
function
SUI_initUI
(
)
{
if
(
gBrowser
)
{
this
.
_obs
.
push
(
"
weave
:
notification
:
added
"
)
;
}
this
.
_obs
.
forEach
(
function
(
topic
)
{
Services
.
obs
.
addObserver
(
this
topic
true
)
;
}
this
)
;
if
(
gBrowser
&
&
Weave
.
Notifications
.
notifications
.
length
)
{
this
.
initNotifications
(
)
;
}
this
.
updateUI
(
)
;
}
initNotifications
:
function
SUI_initNotifications
(
)
{
const
XULNS
=
"
http
:
/
/
www
.
mozilla
.
org
/
keymaster
/
gatekeeper
/
there
.
is
.
only
.
xul
"
;
let
notificationbox
=
document
.
createElementNS
(
XULNS
"
notificationbox
"
)
;
notificationbox
.
id
=
"
sync
-
notifications
"
;
notificationbox
.
setAttribute
(
"
flex
"
"
1
"
)
;
let
bottombox
=
document
.
getElementById
(
"
browser
-
bottombox
"
)
;
bottombox
.
insertBefore
(
notificationbox
bottombox
.
firstChild
)
;
notificationbox
.
clientTop
;
Services
.
obs
.
removeObserver
(
this
"
weave
:
notification
:
added
"
)
;
let
idx
=
this
.
_obs
.
indexOf
(
"
weave
:
notification
:
added
"
)
;
if
(
idx
>
=
0
)
{
this
.
_obs
.
splice
(
idx
1
)
;
}
}
_needsSetup
(
)
{
if
(
this
.
weaveService
.
fxAccountsEnabled
)
{
return
fxAccounts
.
getSignedInUser
(
)
.
then
(
user
=
>
{
return
!
(
user
&
&
user
.
verified
)
;
}
)
;
}
let
firstSync
=
"
"
;
try
{
firstSync
=
Services
.
prefs
.
getCharPref
(
"
services
.
sync
.
firstSync
"
)
;
}
catch
(
e
)
{
}
return
Promise
.
resolve
(
Weave
.
Status
.
checkSetup
(
)
=
=
Weave
.
CLIENT_NOT_CONFIGURED
|
|
firstSync
=
=
"
notReady
"
)
;
}
_needsVerification
(
)
{
if
(
this
.
weaveService
.
fxAccountsEnabled
)
{
return
fxAccounts
.
getSignedInUser
(
)
.
then
(
user
=
>
{
if
(
!
user
)
{
return
false
;
}
return
!
user
.
verified
;
}
)
;
}
return
Promise
.
resolve
(
false
)
;
}
_loginFailed
:
function
(
)
{
this
.
log
.
debug
(
"
_loginFailed
has
sync
state
=
{
sync
}
"
{
sync
:
Weave
.
Status
.
login
}
)
;
return
Weave
.
Status
.
login
=
=
Weave
.
LOGIN_FAILED_LOGIN_REJECTED
;
}
updateUI
(
)
{
this
.
_promiseUpdateUI
(
)
.
catch
(
err
=
>
{
this
.
log
.
error
(
"
updateUI
failed
"
err
)
;
}
)
}
_promiseUpdateUI
(
)
{
return
this
.
_needsSetup
(
)
.
then
(
needsSetup
=
>
{
let
loginFailed
=
this
.
_loginFailed
(
)
;
document
.
getElementById
(
"
sync
-
reauth
-
state
"
)
.
hidden
=
true
;
document
.
getElementById
(
"
sync
-
setup
-
state
"
)
.
hidden
=
true
;
document
.
getElementById
(
"
sync
-
syncnow
-
state
"
)
.
hidden
=
true
;
if
(
CloudSync
&
&
CloudSync
.
ready
&
&
CloudSync
(
)
.
adapters
.
count
)
{
document
.
getElementById
(
"
sync
-
syncnow
-
state
"
)
.
hidden
=
false
;
}
else
if
(
loginFailed
)
{
document
.
getElementById
(
"
sync
-
reauth
-
state
"
)
.
hidden
=
false
;
}
else
if
(
needsSetup
)
{
document
.
getElementById
(
"
sync
-
setup
-
state
"
)
.
hidden
=
false
;
}
else
{
document
.
getElementById
(
"
sync
-
syncnow
-
state
"
)
.
hidden
=
false
;
}
return
this
.
_updateSyncButtonsTooltip
(
)
;
}
)
;
}
onActivityStart
(
)
{
if
(
!
gBrowser
)
return
;
this
.
log
.
debug
(
"
onActivityStart
with
numActive
"
this
.
_numActiveSyncTasks
)
;
if
(
+
+
this
.
_numActiveSyncTasks
=
=
1
)
{
let
button
=
document
.
getElementById
(
"
sync
-
button
"
)
;
if
(
button
)
{
button
.
setAttribute
(
"
status
"
"
active
"
)
;
}
let
container
=
document
.
getElementById
(
"
PanelUI
-
footer
-
fxa
"
)
;
if
(
container
)
{
container
.
setAttribute
(
"
syncstatus
"
"
active
"
)
;
}
}
this
.
updateUI
(
)
;
}
onActivityStop
(
)
{
if
(
!
gBrowser
)
return
;
this
.
log
.
debug
(
"
onActivityStop
with
numActive
"
this
.
_numActiveSyncTasks
)
;
if
(
-
-
this
.
_numActiveSyncTasks
)
{
if
(
this
.
_numActiveSyncTasks
<
0
)
{
this
.
log
.
error
(
"
mismatched
onActivityStart
/
Stop
calls
"
new
Error
(
"
active
=
"
+
this
.
_numActiveSyncTasks
)
)
;
}
return
;
}
let
syncButton
=
document
.
getElementById
(
"
sync
-
button
"
)
;
if
(
syncButton
)
{
syncButton
.
removeAttribute
(
"
status
"
)
;
}
let
fxaContainer
=
document
.
getElementById
(
"
PanelUI
-
footer
-
fxa
"
)
;
if
(
fxaContainer
)
{
fxaContainer
.
removeAttribute
(
"
syncstatus
"
)
;
}
this
.
updateUI
(
)
;
}
onLoginError
:
function
SUI_onLoginError
(
)
{
this
.
log
.
debug
(
"
onLoginError
:
login
=
{
login
}
sync
=
{
sync
}
"
Weave
.
Status
)
;
Weave
.
Notifications
.
removeAll
(
)
;
this
.
updateUI
(
)
;
}
onLogout
:
function
SUI_onLogout
(
)
{
this
.
updateUI
(
)
;
}
onStartOver
:
function
SUI_onStartOver
(
)
{
this
.
clearError
(
)
;
}
_getAppName
:
function
(
)
{
let
brand
=
new
StringBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
)
;
return
brand
.
get
(
"
brandShortName
"
)
;
}
doSync
(
)
{
this
.
_needsSetup
(
)
.
then
(
needsSetup
=
>
{
if
(
!
needsSetup
)
{
setTimeout
(
(
)
=
>
Weave
.
Service
.
errorHandler
.
syncAndReportErrors
(
)
0
)
;
}
Services
.
obs
.
notifyObservers
(
null
"
cloudsync
:
user
-
sync
"
null
)
;
}
)
.
catch
(
err
=
>
{
this
.
log
.
error
(
"
Failed
to
force
a
sync
"
err
)
;
}
)
;
}
handleToolbarButton
(
)
{
this
.
_needsSetup
(
)
.
then
(
needsSetup
=
>
{
if
(
needsSetup
|
|
this
.
_loginFailed
(
)
)
{
this
.
openSetup
(
)
;
}
else
{
return
this
.
doSync
(
)
;
}
}
)
.
catch
(
err
=
>
{
this
.
log
.
error
(
"
Failed
to
handle
toolbar
button
command
"
err
)
;
}
)
;
}
openSetup
:
function
SUI_openSetup
(
wizardType
entryPoint
=
"
syncbutton
"
)
{
if
(
this
.
weaveService
.
fxAccountsEnabled
)
{
if
(
UITour
.
tourBrowsersByWindow
.
get
(
window
)
&
&
UITour
.
tourBrowsersByWindow
.
get
(
window
)
.
has
(
gBrowser
.
selectedBrowser
)
)
{
entryPoint
=
"
uitour
"
;
}
this
.
openPrefs
(
entryPoint
)
;
}
else
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
Weave
:
AccountSetup
"
)
;
if
(
win
)
win
.
focus
(
)
;
else
{
window
.
openDialog
(
"
chrome
:
/
/
browser
/
content
/
sync
/
setup
.
xul
"
"
weaveSetup
"
"
centerscreen
chrome
resizable
=
no
"
wizardType
)
;
}
}
}
openAddDevice
:
function
(
)
{
if
(
!
Weave
.
Utils
.
ensureMPUnlocked
(
)
)
return
;
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
Sync
:
AddDevice
"
)
;
if
(
win
)
win
.
focus
(
)
;
else
window
.
openDialog
(
"
chrome
:
/
/
browser
/
content
/
sync
/
addDevice
.
xul
"
"
syncAddDevice
"
"
centerscreen
chrome
resizable
=
no
"
)
;
}
openPrefs
:
function
(
entryPoint
)
{
openPreferences
(
"
paneSync
"
{
urlParams
:
{
entrypoint
:
entryPoint
}
}
)
;
}
openSignInAgainPage
:
function
(
entryPoint
=
"
syncbutton
"
)
{
gFxAccounts
.
openSignInAgainPage
(
entryPoint
)
;
}
_updateSyncButtonsTooltip
:
Task
.
async
(
function
*
(
)
{
if
(
!
gBrowser
)
return
;
let
email
;
try
{
email
=
Services
.
prefs
.
getCharPref
(
"
services
.
sync
.
username
"
)
;
}
catch
(
ex
)
{
}
let
needsSetup
=
yield
this
.
_needsSetup
(
)
;
let
needsVerification
=
yield
this
.
_needsVerification
(
)
;
let
loginFailed
=
this
.
_loginFailed
(
)
;
let
tooltiptext
;
if
(
needsVerification
)
{
tooltiptext
=
gFxAccounts
.
strings
.
formatStringFromName
(
"
verifyDescription
"
[
email
]
1
)
;
}
else
if
(
needsSetup
)
{
tooltiptext
=
this
.
_stringBundle
.
GetStringFromName
(
"
signInToSync
.
description
"
)
;
}
else
if
(
loginFailed
)
{
tooltiptext
=
gFxAccounts
.
strings
.
formatStringFromName
(
"
reconnectDescription
"
[
email
]
1
)
;
}
else
{
try
{
let
lastSync
=
new
Date
(
Services
.
prefs
.
getCharPref
(
"
services
.
sync
.
lastSync
"
)
)
;
let
lastSyncDateString
=
lastSync
.
toLocaleFormat
(
"
%
a
%
H
:
%
M
"
)
;
tooltiptext
=
this
.
_stringBundle
.
formatStringFromName
(
"
lastSync2
.
label
"
[
lastSyncDateString
]
1
)
;
}
catch
(
e
)
{
}
}
if
(
!
gBrowser
)
return
;
let
syncButton
=
document
.
getElementById
(
"
sync
-
button
"
)
;
let
statusButton
=
document
.
getElementById
(
"
PanelUI
-
fxa
-
icon
"
)
;
for
(
let
button
of
[
syncButton
statusButton
]
)
{
if
(
button
)
{
if
(
tooltiptext
)
{
button
.
setAttribute
(
"
tooltiptext
"
tooltiptext
)
;
}
else
{
button
.
removeAttribute
(
"
tooltiptext
"
)
;
}
}
}
}
)
clearError
:
function
SUI_clearError
(
errorString
)
{
Weave
.
Notifications
.
removeAll
(
errorString
)
;
this
.
updateUI
(
)
;
}
onSyncFinish
:
function
SUI_onSyncFinish
(
)
{
let
title
=
this
.
_stringBundle
.
GetStringFromName
(
"
error
.
sync
.
title
"
)
;
this
.
clearError
(
title
)
;
}
observe
:
function
SUI_observe
(
subject
topic
data
)
{
this
.
log
.
debug
(
"
observed
"
topic
)
;
if
(
this
.
_unloaded
)
{
Cu
.
reportError
(
"
SyncUI
observer
called
after
unload
:
"
+
topic
)
;
return
;
}
if
(
subject
&
&
typeof
subject
=
=
"
object
"
&
&
(
"
wrappedJSObject
"
in
subject
)
&
&
(
"
observersModuleSubjectWrapper
"
in
subject
.
wrappedJSObject
)
)
{
subject
=
subject
.
wrappedJSObject
.
object
;
}
switch
(
topic
)
{
case
"
weave
:
service
:
sync
:
start
"
:
this
.
onActivityStart
(
)
;
break
;
case
"
weave
:
service
:
sync
:
finish
"
:
case
"
weave
:
service
:
sync
:
error
"
:
this
.
onActivityStop
(
)
;
break
;
}
switch
(
topic
)
{
case
"
weave
:
ui
:
sync
:
finish
"
:
this
.
onSyncFinish
(
)
;
break
;
case
"
weave
:
ui
:
sync
:
error
"
:
case
"
weave
:
service
:
setup
-
complete
"
:
case
"
weave
:
service
:
login
:
finish
"
:
case
"
weave
:
service
:
login
:
start
"
:
this
.
updateUI
(
)
;
break
;
case
"
weave
:
ui
:
login
:
error
"
:
this
.
onLoginError
(
)
;
break
;
case
"
weave
:
service
:
logout
:
finish
"
:
this
.
onLogout
(
)
;
break
;
case
"
weave
:
service
:
start
-
over
"
:
this
.
onStartOver
(
)
;
break
;
case
"
weave
:
service
:
start
-
over
:
finish
"
:
this
.
updateUI
(
)
;
break
;
case
"
weave
:
service
:
ready
"
:
this
.
initUI
(
)
;
break
;
case
"
weave
:
notification
:
added
"
:
this
.
initNotifications
(
)
;
break
;
case
"
weave
:
ui
:
clear
-
error
"
:
this
.
clearError
(
)
;
break
;
}
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
}
;
XPCOMUtils
.
defineLazyGetter
(
gSyncUI
"
_stringBundle
"
function
(
)
{
return
Cc
[
"
mozilla
.
org
/
intl
/
stringbundle
;
1
"
]
.
getService
(
Ci
.
nsIStringBundleService
)
.
createBundle
(
"
chrome
:
/
/
weave
/
locale
/
services
/
sync
.
properties
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
gSyncUI
"
log
"
function
(
)
{
return
Log
.
repository
.
getLogger
(
"
browserwindow
.
syncui
"
)
;
}
)
;
XPCOMUtils
.
defineLazyGetter
(
gSyncUI
"
weaveService
"
function
(
)
{
return
Components
.
classes
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsISupports
)
.
wrappedJSObject
;
}
)
;
