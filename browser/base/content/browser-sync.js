const
{
UIState
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
UIState
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
FxAccounts
"
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
EnsureFxAccountsWebChannel
"
"
resource
:
/
/
gre
/
modules
/
FxAccountsWebChannel
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Weave
"
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
SyncedTabs
:
"
resource
:
/
/
services
-
sync
/
SyncedTabs
.
jsm
"
}
)
;
const
MIN_STATUS_ANIMATION_DURATION
=
1600
;
this
.
SyncedTabsPanelList
=
class
SyncedTabsPanelList
{
static
sRemoteTabsDeckIndices
=
{
DECKINDEX_TABS
:
0
DECKINDEX_FETCHING
:
1
DECKINDEX_TABSDISABLED
:
2
DECKINDEX_NOCLIENTS
:
3
}
;
static
sRemoteTabsPerPage
=
25
;
static
sRemoteTabsNextPageMinTabs
=
5
;
constructor
(
panelview
deck
tabsList
separator
)
{
this
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
"
nsISupportsWeakReference
"
]
)
;
Services
.
obs
.
addObserver
(
this
SyncedTabs
.
TOPIC_TABS_CHANGED
true
)
;
this
.
deck
=
deck
;
this
.
tabsList
=
tabsList
;
this
.
separator
=
separator
;
this
.
_showSyncedTabsPromise
=
Promise
.
resolve
(
)
;
this
.
createSyncedTabs
(
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
SyncedTabs
.
TOPIC_TABS_CHANGED
)
{
this
.
_showSyncedTabs
(
)
;
}
}
createSyncedTabs
(
)
{
if
(
SyncedTabs
.
isConfiguredToSyncTabs
)
{
if
(
SyncedTabs
.
hasSyncedThisSession
)
{
this
.
deck
.
selectedIndex
=
SyncedTabsPanelList
.
sRemoteTabsDeckIndices
.
DECKINDEX_TABS
;
}
else
{
this
.
deck
.
selectedIndex
=
SyncedTabsPanelList
.
sRemoteTabsDeckIndices
.
DECKINDEX_FETCHING
;
}
SyncedTabs
.
syncTabs
(
)
.
catch
(
ex
=
>
{
Cu
.
reportError
(
ex
)
;
}
)
;
this
.
deck
.
toggleAttribute
(
"
syncingtabs
"
true
)
;
this
.
_showSyncedTabs
(
)
;
if
(
this
.
separator
)
{
this
.
separator
.
hidden
=
false
;
}
}
else
{
this
.
deck
.
selectedIndex
=
SyncedTabsPanelList
.
sRemoteTabsDeckIndices
.
DECKINDEX_TABSDISABLED
;
this
.
deck
.
toggleAttribute
(
"
syncingtabs
"
false
)
;
if
(
this
.
separator
)
{
this
.
separator
.
hidden
=
true
;
}
}
}
_showSyncedTabs
(
paginationInfo
)
{
this
.
_showSyncedTabsPromise
=
this
.
_showSyncedTabsPromise
.
then
(
(
)
=
>
{
return
this
.
__showSyncedTabs
(
paginationInfo
)
;
}
e
=
>
{
Cu
.
reportError
(
e
)
;
}
)
;
}
__showSyncedTabs
(
paginationInfo
)
{
if
(
!
this
.
tabsList
)
{
return
undefined
;
}
const
syncPrefsButtonEl
=
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
-
menu
-
sync
-
prefs
-
button
"
)
;
return
SyncedTabs
.
getTabClients
(
)
.
then
(
clients
=
>
{
let
noTabs
=
!
UIState
.
get
(
)
.
syncEnabled
|
|
!
clients
.
length
;
this
.
deck
.
toggleAttribute
(
"
syncingtabs
"
!
noTabs
)
;
if
(
this
.
separator
)
{
this
.
separator
.
hidden
=
noTabs
;
}
syncPrefsButtonEl
.
hidden
=
!
UIState
.
get
(
)
.
syncEnabled
|
|
clients
.
length
<
=
1
;
if
(
!
this
.
tabsList
)
{
return
;
}
if
(
clients
.
length
=
=
=
0
&
&
!
SyncedTabs
.
hasSyncedThisSession
)
{
return
;
}
if
(
clients
.
length
=
=
=
0
)
{
this
.
deck
.
selectedIndex
=
SyncedTabsPanelList
.
sRemoteTabsDeckIndices
.
DECKINDEX_NOCLIENTS
;
return
;
}
this
.
deck
.
selectedIndex
=
SyncedTabsPanelList
.
sRemoteTabsDeckIndices
.
DECKINDEX_TABS
;
this
.
_clearSyncedTabList
(
)
;
SyncedTabs
.
sortTabClientsByLastUsed
(
clients
)
;
let
fragment
=
document
.
createDocumentFragment
(
)
;
let
clientNumber
=
0
;
for
(
let
client
of
clients
)
{
if
(
fragment
.
lastElementChild
)
{
let
separator
=
document
.
createXULElement
(
"
menuseparator
"
)
;
fragment
.
appendChild
(
separator
)
;
}
let
labelId
=
synced
-
tabs
-
client
-
{
clientNumber
+
+
}
;
let
container
=
document
.
createXULElement
(
"
vbox
"
)
;
container
.
classList
.
add
(
"
PanelUI
-
remotetabs
-
clientcontainer
"
)
;
container
.
setAttribute
(
"
role
"
"
group
"
)
;
container
.
setAttribute
(
"
aria
-
labelledby
"
labelId
)
;
if
(
paginationInfo
&
&
paginationInfo
.
clientId
=
=
client
.
id
)
{
this
.
_appendSyncClient
(
client
container
labelId
paginationInfo
.
maxTabs
)
;
}
else
{
this
.
_appendSyncClient
(
client
container
labelId
)
;
}
fragment
.
appendChild
(
container
)
;
}
this
.
tabsList
.
appendChild
(
fragment
)
;
PanelView
.
forNode
(
this
.
tabsList
.
closest
(
"
panelview
"
)
)
.
descriptionHeightWorkaround
(
)
;
}
)
.
catch
(
err
=
>
{
Cu
.
reportError
(
err
)
;
}
)
.
then
(
(
)
=
>
{
Services
.
obs
.
notifyObservers
(
null
"
synced
-
tabs
-
menu
:
test
:
tabs
-
updated
"
)
;
}
)
;
}
_clearSyncedTabList
(
)
{
let
list
=
this
.
tabsList
;
while
(
list
.
lastChild
)
{
list
.
lastChild
.
remove
(
)
;
}
}
_appendMessageLabel
(
messageAttr
appendTo
=
null
)
{
if
(
!
appendTo
)
{
appendTo
=
this
.
tabsList
;
}
let
message
=
this
.
tabsList
.
getAttribute
(
messageAttr
)
;
let
messageLabel
=
document
.
createXULElement
(
"
label
"
)
;
messageLabel
.
textContent
=
message
;
appendTo
.
appendChild
(
messageLabel
)
;
return
messageLabel
;
}
_appendSyncClient
(
client
container
labelId
maxTabs
=
SyncedTabsPanelList
.
sRemoteTabsPerPage
)
{
let
clientItem
=
document
.
createXULElement
(
"
label
"
)
;
clientItem
.
setAttribute
(
"
id
"
labelId
)
;
clientItem
.
setAttribute
(
"
itemtype
"
"
client
"
)
;
clientItem
.
setAttribute
(
"
tooltiptext
"
gSync
.
fluentStrings
.
formatValueSync
(
"
appmenu
-
fxa
-
last
-
sync
"
{
time
:
gSync
.
formatLastSyncDate
(
new
Date
(
client
.
lastModified
)
)
}
)
)
;
clientItem
.
textContent
=
client
.
name
;
container
.
appendChild
(
clientItem
)
;
if
(
!
client
.
tabs
.
length
)
{
let
label
=
this
.
_appendMessageLabel
(
"
notabsforclientlabel
"
container
)
;
label
.
setAttribute
(
"
class
"
"
PanelUI
-
remotetabs
-
notabsforclient
-
label
"
)
;
}
else
{
let
hasNextPage
=
client
.
tabs
.
length
>
maxTabs
;
let
nextPageIsLastPage
=
hasNextPage
&
&
maxTabs
+
SyncedTabsPanelList
.
sRemoteTabsPerPage
>
=
client
.
tabs
.
length
;
if
(
nextPageIsLastPage
)
{
maxTabs
=
Math
.
min
(
client
.
tabs
.
length
-
SyncedTabsPanelList
.
sRemoteTabsNextPageMinTabs
maxTabs
)
;
}
if
(
hasNextPage
)
{
client
.
tabs
=
client
.
tabs
.
slice
(
0
maxTabs
)
;
}
for
(
let
tab
of
client
.
tabs
)
{
let
tabEnt
=
this
.
_createSyncedTabElement
(
tab
)
;
container
.
appendChild
(
tabEnt
)
;
}
if
(
hasNextPage
)
{
let
showAllEnt
=
this
.
_createShowMoreSyncedTabsElement
(
client
.
id
)
;
container
.
appendChild
(
showAllEnt
)
;
}
}
}
_createSyncedTabElement
(
tabInfo
)
{
let
item
=
document
.
createXULElement
(
"
toolbarbutton
"
)
;
let
tooltipText
=
(
tabInfo
.
title
?
tabInfo
.
title
+
"
\
n
"
:
"
"
)
+
tabInfo
.
url
;
item
.
setAttribute
(
"
itemtype
"
"
tab
"
)
;
item
.
setAttribute
(
"
class
"
"
subviewbutton
"
)
;
item
.
setAttribute
(
"
targetURI
"
tabInfo
.
url
)
;
item
.
setAttribute
(
"
label
"
tabInfo
.
title
!
=
"
"
?
tabInfo
.
title
:
tabInfo
.
url
)
;
item
.
setAttribute
(
"
image
"
tabInfo
.
icon
)
;
item
.
setAttribute
(
"
tooltiptext
"
tooltipText
)
;
item
.
addEventListener
(
"
click
"
e
=
>
{
document
.
defaultView
.
openUILink
(
tabInfo
.
url
e
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
}
)
;
if
(
document
.
defaultView
.
whereToOpenLink
(
e
)
!
=
"
current
"
)
{
e
.
preventDefault
(
)
;
e
.
stopPropagation
(
)
;
}
else
{
CustomizableUI
.
hidePanelForNode
(
item
)
;
}
}
)
;
return
item
;
}
_createShowMoreSyncedTabsElement
(
clientId
)
{
let
labelAttr
=
"
showMoreLabel
"
;
let
tooltipAttr
=
"
showMoreTooltipText
"
;
let
showCount
=
Infinity
;
let
showMoreItem
=
document
.
createXULElement
(
"
toolbarbutton
"
)
;
showMoreItem
.
setAttribute
(
"
itemtype
"
"
showmorebutton
"
)
;
showMoreItem
.
classList
.
add
(
"
subviewbutton
"
"
subviewbutton
-
nav
"
"
subviewbutton
-
nav
-
down
"
)
;
let
label
=
gSync
.
fluentStrings
.
formatValueSync
(
this
.
tabsList
.
getAttribute
(
labelAttr
)
)
;
showMoreItem
.
setAttribute
(
"
label
"
label
)
;
let
tooltipText
=
this
.
tabsList
.
getAttribute
(
tooltipAttr
)
;
showMoreItem
.
setAttribute
(
"
tooltiptext
"
tooltipText
)
;
showMoreItem
.
addEventListener
(
"
click
"
e
=
>
{
e
.
preventDefault
(
)
;
e
.
stopPropagation
(
)
;
this
.
_showSyncedTabs
(
{
clientId
maxTabs
:
showCount
}
)
;
}
)
;
return
showMoreItem
;
}
destroy
(
)
{
Services
.
obs
.
removeObserver
(
this
SyncedTabs
.
TOPIC_TABS_CHANGED
)
;
this
.
tabsList
=
null
;
this
.
deck
=
null
;
this
.
separator
=
null
;
}
}
;
var
gSync
=
{
_initialized
:
false
_isCurrentlySyncing
:
false
_syncStartTime
:
0
_syncAnimationTimer
:
0
_obs
:
[
"
weave
:
engine
:
sync
:
finish
"
"
quit
-
application
"
UIState
.
ON_UPDATE
]
get
log
(
)
{
if
(
!
this
.
_log
)
{
const
{
Log
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
)
;
let
syncLog
=
Log
.
repository
.
getLogger
(
"
Sync
.
Browser
"
)
;
syncLog
.
manageLevelFromPref
(
"
services
.
sync
.
log
.
logger
.
browser
"
)
;
this
.
_log
=
syncLog
;
}
return
this
.
_log
;
}
get
fxaStrings
(
)
{
delete
this
.
fxaStrings
;
return
(
this
.
fxaStrings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
accounts
.
properties
"
)
)
;
}
get
fluentStrings
(
)
{
delete
this
.
fluentStrings
;
return
(
this
.
fluentStrings
=
new
Localization
(
[
"
branding
/
brand
.
ftl
"
"
browser
/
accounts
.
ftl
"
"
browser
/
appmenu
.
ftl
"
"
browser
/
sync
.
ftl
"
"
browser
/
branding
/
sync
-
brand
.
ftl
"
]
true
)
)
;
}
get
syncStrings
(
)
{
delete
this
.
syncStrings
;
return
(
this
.
syncStrings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
weave
/
locale
/
sync
.
properties
"
)
)
;
}
get
sendTabConfiguredAndLoading
(
)
{
return
(
UIState
.
get
(
)
.
status
=
=
UIState
.
STATUS_SIGNED_IN
&
&
!
fxAccounts
.
device
.
recentDeviceList
)
;
}
get
isSignedIn
(
)
{
return
UIState
.
get
(
)
.
status
=
=
UIState
.
STATUS_SIGNED_IN
;
}
shouldHideSendContextMenuItems
(
enabled
)
{
const
state
=
UIState
.
get
(
)
;
if
(
enabled
&
&
state
.
status
=
=
UIState
.
STATUS_SIGNED_IN
&
&
state
.
syncEnabled
&
&
this
.
getSendTabTargets
(
)
.
length
)
{
return
false
;
}
return
true
;
}
getSendTabTargets
(
)
{
let
getClientRecord
=
(
)
=
>
undefined
;
if
(
UIState
.
get
(
)
.
syncEnabled
&
&
Weave
.
Service
.
clientsEngine
)
{
getClientRecord
=
id
=
>
Weave
.
Service
.
clientsEngine
.
getClientByFxaDeviceId
(
id
)
;
}
let
targets
=
[
]
;
if
(
!
fxAccounts
.
device
.
recentDeviceList
)
{
return
targets
;
}
for
(
let
d
of
fxAccounts
.
device
.
recentDeviceList
)
{
if
(
d
.
isCurrentDevice
)
{
continue
;
}
let
clientRecord
=
getClientRecord
(
d
.
id
)
;
if
(
clientRecord
|
|
fxAccounts
.
commands
.
sendTab
.
isDeviceCompatible
(
d
)
)
{
targets
.
push
(
{
clientRecord
.
.
.
d
}
)
;
}
}
return
targets
.
sort
(
(
a
b
)
=
>
a
.
name
.
localeCompare
(
b
.
name
)
)
;
}
_definePrefGetters
(
)
{
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
FXA_ENABLED
"
"
identity
.
fxaccounts
.
enabled
"
)
;
}
maybeUpdateUIState
(
)
{
if
(
UIState
.
isReady
(
)
)
{
const
state
=
UIState
.
get
(
)
;
if
(
state
.
status
!
=
UIState
.
STATUS_NOT_CONFIGURED
)
{
this
.
updateAllUI
(
state
)
;
}
}
}
init
(
)
{
if
(
this
.
_initialized
)
{
return
;
}
this
.
_definePrefGetters
(
)
;
if
(
!
this
.
FXA_ENABLED
)
{
this
.
onFxaDisabled
(
)
;
return
;
}
MozXULElement
.
insertFTLIfNeeded
(
"
browser
/
sync
.
ftl
"
)
;
const
appMenuLabel
=
PanelMultiView
.
getViewNode
(
document
PanelUI
.
protonAppMenuEnabled
?
"
appMenu
-
fxa
-
label2
"
:
"
appMenu
-
fxa
-
label
"
)
;
if
(
!
appMenuLabel
)
{
return
;
}
document
.
getElementById
(
"
sync
-
setup
"
)
.
hidden
=
false
;
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
remotetabs
-
setupsync
"
)
.
hidden
=
false
;
if
(
PanelUI
.
protonAppMenuEnabled
)
{
const
appMenuHeaderTitle
=
PanelMultiView
.
getViewNode
(
document
"
appMenu
-
header
-
title
"
)
;
const
appMenuHeaderDescription
=
PanelMultiView
.
getViewNode
(
document
"
appMenu
-
header
-
description
"
)
;
const
appMenuHeaderText
=
PanelMultiView
.
getViewNode
(
document
"
appMenu
-
fxa
-
text
"
)
;
appMenuHeaderTitle
.
hidden
=
true
;
appMenuHeaderDescription
.
value
=
this
.
fluentStrings
.
formatValueSync
(
"
appmenu
-
fxa
-
signed
-
in
-
label
"
)
;
appMenuHeaderText
.
textContent
=
this
.
fluentStrings
.
formatValueSync
(
"
appmenu
-
fxa
-
sync
-
and
-
save
-
data2
"
)
;
}
for
(
let
topic
of
this
.
_obs
)
{
Services
.
obs
.
addObserver
(
this
topic
true
)
;
}
this
.
maybeUpdateUIState
(
)
;
EnsureFxAccountsWebChannel
(
)
;
let
fxaPanelView
=
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
"
)
;
fxaPanelView
.
addEventListener
(
"
ViewShowing
"
this
)
;
fxaPanelView
.
addEventListener
(
"
ViewHiding
"
this
)
;
this
.
_initialized
=
true
;
}
uninit
(
)
{
if
(
!
this
.
_initialized
)
{
return
;
}
for
(
let
topic
of
this
.
_obs
)
{
Services
.
obs
.
removeObserver
(
this
topic
)
;
}
this
.
_initialized
=
false
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
ViewShowing
"
:
{
this
.
onFxAPanelViewShowing
(
event
.
target
)
;
break
;
}
case
"
ViewHiding
"
:
{
this
.
onFxAPanelViewHiding
(
event
.
target
)
;
}
}
}
onFxAPanelViewShowing
(
panelview
)
{
let
syncNowBtn
=
panelview
.
querySelector
(
"
.
syncnow
-
label
"
)
;
let
l10nId
=
syncNowBtn
.
getAttribute
(
this
.
_isCurrentlySyncing
?
"
syncing
-
data
-
l10n
-
id
"
:
"
sync
-
now
-
data
-
l10n
-
id
"
)
;
syncNowBtn
.
setAttribute
(
"
data
-
l10n
-
id
"
l10nId
)
;
panelview
.
syncedTabsPanelList
=
new
SyncedTabsPanelList
(
panelview
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
-
remotetabs
-
deck
"
)
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
-
remotetabs
-
tabslist
"
)
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
remote
-
tabs
-
separator
"
)
)
;
}
onFxAPanelViewHiding
(
panelview
)
{
panelview
.
syncedTabsPanelList
.
destroy
(
)
;
panelview
.
syncedTabsPanelList
=
null
;
}
observe
(
subject
topic
data
)
{
if
(
!
this
.
_initialized
)
{
Cu
.
reportError
(
"
browser
-
sync
observer
called
after
unload
:
"
+
topic
)
;
return
;
}
switch
(
topic
)
{
case
UIState
.
ON_UPDATE
:
const
state
=
UIState
.
get
(
)
;
this
.
updateAllUI
(
state
)
;
break
;
case
"
quit
-
application
"
:
clearTimeout
(
this
.
_syncAnimationTimer
)
;
break
;
case
"
weave
:
engine
:
sync
:
finish
"
:
if
(
data
!
=
"
clients
"
)
{
return
;
}
this
.
onClientsSynced
(
)
;
this
.
updateFxAPanel
(
UIState
.
get
(
)
)
;
break
;
}
}
updateAllUI
(
state
)
{
this
.
updatePanelPopup
(
state
)
;
this
.
updateState
(
state
)
;
this
.
updateSyncButtonsTooltip
(
state
)
;
this
.
updateSyncStatus
(
state
)
;
this
.
updateFxAPanel
(
state
)
;
this
.
ensureFxaDevices
(
)
;
}
async
ensureFxaDevices
(
options
)
{
if
(
UIState
.
get
(
)
.
status
!
=
UIState
.
STATUS_SIGNED_IN
)
{
console
.
info
(
"
Skipping
device
list
refresh
;
not
signed
in
"
)
;
return
;
}
if
(
!
fxAccounts
.
device
.
recentDeviceList
)
{
if
(
await
this
.
refreshFxaDevices
(
)
)
{
if
(
!
fxAccounts
.
device
.
recentDeviceList
)
{
console
.
warn
(
"
Refreshing
device
list
didn
'
t
find
any
devices
.
"
)
;
}
}
}
}
async
refreshFxaDevices
(
)
{
if
(
UIState
.
get
(
)
.
status
!
=
UIState
.
STATUS_SIGNED_IN
)
{
console
.
info
(
"
Skipping
device
list
refresh
;
not
signed
in
"
)
;
return
false
;
}
try
{
await
fxAccounts
.
device
.
refreshDeviceList
(
{
ignoreCached
:
true
}
)
;
return
true
;
}
catch
(
e
)
{
this
.
log
.
error
(
"
Refreshing
device
list
failed
.
"
e
)
;
return
false
;
}
}
updateSendToDeviceTitle
(
)
{
let
string
=
gBrowserBundle
.
GetStringFromName
(
"
sendTabsToDevice
.
label
"
)
;
let
title
=
PluralForm
.
get
(
1
string
)
.
replace
(
"
#
1
"
1
)
;
if
(
gBrowser
.
selectedTab
.
multiselected
)
{
let
tabCount
=
gBrowser
.
selectedTabs
.
length
;
title
=
PluralForm
.
get
(
tabCount
string
)
.
replace
(
"
#
1
"
tabCount
)
;
}
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
-
menu
-
sendtab
-
button
"
)
.
setAttribute
(
"
label
"
title
)
;
}
showSendToDeviceView
(
anchor
)
{
PanelUI
.
showSubView
(
"
PanelUI
-
sendTabToDevice
"
anchor
)
;
let
panelViewNode
=
document
.
getElementById
(
"
PanelUI
-
sendTabToDevice
"
)
;
this
.
populateSendTabToDevicesView
(
panelViewNode
)
;
}
showSendToDeviceViewFromFxaMenu
(
anchor
)
{
const
{
status
}
=
UIState
.
get
(
)
;
if
(
status
=
=
=
UIState
.
STATUS_NOT_CONFIGURED
)
{
PanelUI
.
showSubView
(
"
PanelUI
-
fxa
-
menu
-
sendtab
-
not
-
configured
"
anchor
)
;
return
;
}
const
targets
=
this
.
sendTabConfiguredAndLoading
?
[
]
:
this
.
getSendTabTargets
(
)
;
if
(
!
targets
.
length
)
{
PanelUI
.
showSubView
(
"
PanelUI
-
fxa
-
menu
-
sendtab
-
no
-
devices
"
anchor
)
;
return
;
}
this
.
showSendToDeviceView
(
anchor
)
;
this
.
emitFxaToolbarTelemetry
(
"
send_tab
"
anchor
)
;
}
showRemoteTabsFromFxaMenu
(
panel
)
{
PanelUI
.
showSubView
(
"
PanelUI
-
remotetabs
"
panel
)
;
this
.
emitFxaToolbarTelemetry
(
"
sync_tabs
"
panel
)
;
}
showSidebarFromFxaMenu
(
panel
)
{
SidebarUI
.
toggle
(
"
viewTabsSidebar
"
)
;
this
.
emitFxaToolbarTelemetry
(
"
sync_tabs_sidebar
"
panel
)
;
}
populateSendTabToDevicesView
(
panelViewNode
reloadDevices
=
true
)
{
let
bodyNode
=
panelViewNode
.
querySelector
(
"
.
panel
-
subview
-
body
"
)
;
let
panelNode
=
panelViewNode
.
closest
(
"
panel
"
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
let
url
=
browser
.
currentURI
.
spec
;
let
title
=
browser
.
contentTitle
;
let
multiselected
=
gBrowser
.
selectedTab
.
multiselected
;
this
.
populateSendTabToDevicesMenu
(
bodyNode
url
title
multiselected
(
clientId
name
clientType
lastModified
)
=
>
{
if
(
!
name
)
{
return
document
.
createXULElement
(
"
toolbarseparator
"
)
;
}
let
item
=
document
.
createXULElement
(
"
toolbarbutton
"
)
;
item
.
setAttribute
(
"
wrap
"
true
)
;
item
.
setAttribute
(
"
align
"
"
start
"
)
;
item
.
classList
.
add
(
"
sendToDevice
-
device
"
"
subviewbutton
"
)
;
if
(
clientId
)
{
item
.
classList
.
add
(
"
subviewbutton
-
iconic
"
)
;
if
(
lastModified
)
{
let
lastSyncDate
=
gSync
.
formatLastSyncDate
(
lastModified
)
;
if
(
lastSyncDate
)
{
item
.
setAttribute
(
"
tooltiptext
"
this
.
fluentStrings
.
formatValueSync
(
"
appmenu
-
fxa
-
last
-
sync
"
{
time
:
lastSyncDate
}
)
)
;
}
}
}
item
.
addEventListener
(
"
command
"
event
=
>
{
if
(
panelNode
)
{
PanelMultiView
.
hidePopup
(
panelNode
)
;
}
}
)
;
return
item
;
}
)
;
bodyNode
.
removeAttribute
(
"
state
"
)
;
if
(
gSync
.
sendTabConfiguredAndLoading
)
{
bodyNode
.
setAttribute
(
"
state
"
"
notready
"
)
;
}
if
(
reloadDevices
)
{
this
.
refreshFxaDevices
(
)
.
then
(
_
=
>
{
if
(
!
window
.
closed
)
{
this
.
populateSendTabToDevicesView
(
panelViewNode
false
)
;
}
}
)
;
}
}
toggleAccountPanel
(
anchor
=
document
.
getElementById
(
"
fxa
-
toolbar
-
menu
-
button
"
)
aEvent
)
{
if
(
document
.
documentElement
.
hasAttribute
(
"
customizing
"
)
)
{
return
;
}
if
(
(
aEvent
.
type
=
=
"
mousedown
"
&
&
aEvent
.
button
!
=
0
)
|
|
(
aEvent
.
type
=
=
"
keypress
"
&
&
aEvent
.
charCode
!
=
KeyEvent
.
DOM_VK_SPACE
&
&
aEvent
.
keyCode
!
=
KeyEvent
.
DOM_VK_RETURN
)
)
{
return
;
}
let
fxaStatus
=
document
.
documentElement
.
getAttribute
(
"
fxastatus
"
)
;
if
(
PanelUI
.
protonAppMenuEnabled
&
&
fxaStatus
=
=
"
not_configured
"
)
{
this
.
openFxAEmailFirstPageFromFxaMenu
(
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
"
)
)
;
PanelUI
.
hide
(
)
;
return
;
}
if
(
!
gFxaToolbarAccessed
)
{
Services
.
prefs
.
setBoolPref
(
"
identity
.
fxaccounts
.
toolbar
.
accessed
"
true
)
;
}
const
fxaSignOutButtonEl
=
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
-
menu
-
account
-
signout
-
button
"
)
;
const
fxaSignOutSeparator
=
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
sign
-
out
-
separator
"
)
;
fxaSignOutButtonEl
.
hidden
=
fxaSignOutSeparator
.
hidden
=
UIState
.
get
(
)
=
=
=
UIState
.
STATUS_NOT_CONFIGURED
;
this
.
enableSendTabIfValidTab
(
)
;
if
(
!
this
.
getSendTabTargets
(
)
.
length
)
{
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
-
menu
-
sendtab
-
button
"
)
.
hidden
=
true
;
}
if
(
anchor
.
getAttribute
(
"
open
"
)
=
=
"
true
"
)
{
PanelUI
.
hide
(
)
;
}
else
{
this
.
emitFxaToolbarTelemetry
(
"
toolbar_icon
"
anchor
)
;
PanelUI
.
showSubView
(
"
PanelUI
-
fxa
"
anchor
aEvent
)
;
}
}
updateFxAPanel
(
state
=
{
}
)
{
const
mainWindowEl
=
document
.
documentElement
;
if
(
PanelUI
.
protonAppMenuEnabled
)
{
PanelMultiView
.
getViewNode
(
document
"
fxa
-
menu
-
avatar
"
)
.
hidden
=
true
;
}
let
stateValue
=
"
not_configured
"
;
const
menuHeaderTitleEl
=
PanelMultiView
.
getViewNode
(
document
"
fxa
-
menu
-
header
-
title
"
)
;
const
menuHeaderDescriptionEl
=
PanelMultiView
.
getViewNode
(
document
"
fxa
-
menu
-
header
-
description
"
)
;
const
cadButtonEl
=
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
-
menu
-
connect
-
device
-
button
"
)
;
const
syncSetupButtonEl
=
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
-
menu
-
setup
-
sync
-
button
"
)
;
const
syncNowButtonEl
=
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
-
menu
-
syncnow
-
button
"
)
;
const
fxaMenuPanel
=
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
"
)
;
const
fxaMenuAccountButtonEl
=
PanelMultiView
.
getViewNode
(
document
"
fxa
-
manage
-
account
-
button
"
)
;
let
headerTitle
=
menuHeaderTitleEl
.
getAttribute
(
"
defaultLabel
"
)
;
let
headerDescription
=
this
.
fluentStrings
.
formatValueSync
(
"
fxa
-
menu
-
turn
-
on
-
sync
-
default
"
)
;
if
(
PanelUI
.
protonAppMenuEnabled
)
{
let
toolbarbuttons
=
fxaMenuPanel
.
querySelectorAll
(
"
toolbarbutton
"
)
;
for
(
let
toolbarbutton
of
toolbarbuttons
)
{
toolbarbutton
.
classList
.
remove
(
"
subviewbutton
-
iconic
"
)
;
}
}
cadButtonEl
.
setAttribute
(
"
disabled
"
true
)
;
syncNowButtonEl
.
hidden
=
true
;
fxaMenuAccountButtonEl
.
classList
.
remove
(
"
subviewbutton
-
nav
"
)
;
fxaMenuAccountButtonEl
.
removeAttribute
(
"
closemenu
"
)
;
syncSetupButtonEl
.
removeAttribute
(
"
hidden
"
)
;
if
(
state
.
status
=
=
=
UIState
.
STATUS_NOT_CONFIGURED
)
{
mainWindowEl
.
style
.
removeProperty
(
"
-
-
avatar
-
image
-
url
"
)
;
if
(
PanelUI
.
protonAppMenuEnabled
)
{
headerDescription
=
this
.
fluentStrings
.
formatValueSync
(
"
appmenu
-
fxa
-
signed
-
in
-
label
"
)
;
}
}
else
if
(
state
.
status
=
=
=
UIState
.
STATUS_LOGIN_FAILED
)
{
stateValue
=
"
login
-
failed
"
;
headerTitle
=
this
.
fluentStrings
.
formatValueSync
(
"
account
-
disconnected2
"
)
;
headerDescription
=
state
.
email
;
mainWindowEl
.
style
.
removeProperty
(
"
-
-
avatar
-
image
-
url
"
)
;
}
else
if
(
state
.
status
=
=
=
UIState
.
STATUS_NOT_VERIFIED
)
{
stateValue
=
"
unverified
"
;
headerTitle
=
this
.
fluentStrings
.
formatValueSync
(
"
account
-
finish
-
account
-
setup
"
)
;
headerDescription
=
state
.
email
;
}
else
if
(
state
.
status
=
=
=
UIState
.
STATUS_SIGNED_IN
)
{
stateValue
=
"
signedin
"
;
if
(
state
.
avatarURL
&
&
!
state
.
avatarIsDefault
)
{
const
bgImage
=
url
(
"
{
state
.
avatarURL
}
"
)
;
let
img
=
new
Image
(
)
;
img
.
onload
=
(
)
=
>
{
mainWindowEl
.
style
.
setProperty
(
"
-
-
avatar
-
image
-
url
"
bgImage
)
;
}
;
img
.
onerror
=
(
)
=
>
{
mainWindowEl
.
style
.
removeProperty
(
"
-
-
avatar
-
image
-
url
"
)
;
}
;
img
.
src
=
state
.
avatarURL
;
}
else
{
mainWindowEl
.
style
.
removeProperty
(
"
-
-
avatar
-
image
-
url
"
)
;
}
cadButtonEl
.
removeAttribute
(
"
disabled
"
)
;
if
(
state
.
syncEnabled
)
{
syncNowButtonEl
.
removeAttribute
(
"
hidden
"
)
;
syncSetupButtonEl
.
hidden
=
true
;
}
headerTitle
=
this
.
fluentStrings
.
formatValueSync
(
"
appmenuitem
-
fxa
-
manage
-
account
"
)
;
headerDescription
=
state
.
email
;
}
mainWindowEl
.
setAttribute
(
"
fxastatus
"
stateValue
)
;
menuHeaderTitleEl
.
value
=
headerTitle
;
menuHeaderDescriptionEl
.
value
=
headerDescription
;
menuHeaderDescriptionEl
.
removeAttribute
(
"
data
-
l10n
-
id
"
)
;
}
enableSendTabIfValidTab
(
)
{
let
canSendAllURIs
=
gBrowser
.
selectedTabs
.
every
(
t
=
>
BrowserUtils
.
isShareableURL
(
t
.
linkedBrowser
.
currentURI
)
)
;
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
-
menu
-
sendtab
-
button
"
)
.
hidden
=
!
canSendAllURIs
;
}
emitFxaToolbarTelemetry
(
type
panel
)
{
if
(
UIState
.
isReady
(
)
&
&
panel
)
{
const
state
=
UIState
.
get
(
)
;
const
hasAvatar
=
state
.
avatarURL
&
&
!
state
.
avatarIsDefault
;
let
extraOptions
=
{
fxa_status
:
state
.
status
fxa_avatar
:
hasAvatar
?
"
true
"
:
"
false
"
}
;
let
eventName
=
"
fxa_avatar_menu
"
;
if
(
this
.
isPanelInsideAppMenu
(
panel
)
)
{
eventName
=
"
fxa_app_menu
"
;
}
Services
.
telemetry
.
recordEvent
(
eventName
"
click
"
type
null
extraOptions
)
;
}
}
isPanelInsideAppMenu
(
panel
=
undefined
)
{
const
appMenuPanel
=
document
.
getElementById
(
"
appMenu
-
popup
"
)
;
if
(
panel
&
&
appMenuPanel
.
contains
(
panel
)
)
{
return
true
;
}
return
false
;
}
updatePanelPopup
(
state
)
{
const
appMenuStatus
=
PanelMultiView
.
getViewNode
(
document
PanelUI
.
protonAppMenuEnabled
?
"
appMenu
-
fxa
-
status2
"
:
"
appMenu
-
fxa
-
status
"
)
;
const
appMenuLabel
=
PanelMultiView
.
getViewNode
(
document
PanelUI
.
protonAppMenuEnabled
?
"
appMenu
-
fxa
-
label2
"
:
"
appMenu
-
fxa
-
label
"
)
;
const
appMenuAvatar
=
PanelMultiView
.
getViewNode
(
document
"
appMenu
-
fxa
-
avatar
"
)
;
const
appMenuHeaderText
=
PanelMultiView
.
getViewNode
(
document
"
appMenu
-
fxa
-
text
"
)
;
const
appMenuHeaderTitle
=
PanelMultiView
.
getViewNode
(
document
"
appMenu
-
header
-
title
"
)
;
const
appMenuHeaderDescription
=
PanelMultiView
.
getViewNode
(
document
"
appMenu
-
header
-
description
"
)
;
const
fxaPanelView
=
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
"
)
;
let
defaultLabel
=
PanelUI
.
protonAppMenuEnabled
?
this
.
fluentStrings
.
formatValueSync
(
"
appmenu
-
fxa
-
signed
-
in
-
label
"
)
:
appMenuStatus
.
getAttribute
(
"
defaultlabel
"
)
;
const
status
=
state
.
status
;
appMenuLabel
.
setAttribute
(
"
label
"
defaultLabel
)
;
appMenuLabel
.
removeAttribute
(
"
aria
-
labelledby
"
)
;
appMenuStatus
.
removeAttribute
(
"
fxastatus
"
)
;
appMenuAvatar
.
style
.
removeProperty
(
"
list
-
style
-
image
"
)
;
if
(
status
=
=
UIState
.
STATUS_NOT_CONFIGURED
)
{
if
(
PanelUI
.
protonAppMenuEnabled
)
{
appMenuHeaderText
.
hidden
=
false
;
appMenuStatus
.
classList
.
add
(
"
toolbaritem
-
combined
-
buttons
"
)
;
appMenuLabel
.
classList
.
remove
(
"
subviewbutton
-
nav
"
)
;
appMenuHeaderTitle
.
hidden
=
true
;
appMenuHeaderDescription
.
value
=
defaultLabel
;
}
return
;
}
appMenuLabel
.
classList
.
remove
(
"
subviewbutton
-
nav
"
)
;
if
(
PanelUI
.
protonAppMenuEnabled
)
{
appMenuHeaderText
.
hidden
=
true
;
appMenuStatus
.
classList
.
remove
(
"
toolbaritem
-
combined
-
buttons
"
)
;
}
if
(
status
=
=
UIState
.
STATUS_LOGIN_FAILED
)
{
let
tooltipDescription
=
this
.
fxaStrings
.
formatStringFromName
(
"
reconnectDescription
"
[
state
.
email
]
)
;
appMenuStatus
.
setAttribute
(
"
fxastatus
"
"
login
-
failed
"
)
;
let
errorLabel
=
this
.
fluentStrings
.
formatValueSync
(
"
account
-
disconnected2
"
)
;
appMenuStatus
.
setAttribute
(
"
tooltiptext
"
tooltipDescription
)
;
if
(
PanelUI
.
protonAppMenuEnabled
)
{
appMenuLabel
.
classList
.
add
(
"
subviewbutton
-
nav
"
)
;
appMenuHeaderTitle
.
hidden
=
false
;
appMenuHeaderTitle
.
value
=
errorLabel
;
appMenuHeaderDescription
.
value
=
state
.
email
;
appMenuLabel
.
removeAttribute
(
"
label
"
)
;
appMenuLabel
.
setAttribute
(
"
aria
-
labelledby
"
{
appMenuHeaderTitle
.
id
}
{
appMenuHeaderDescription
.
id
}
)
;
}
else
{
appMenuLabel
.
setAttribute
(
"
label
"
errorLabel
)
;
}
return
;
}
else
if
(
status
=
=
UIState
.
STATUS_NOT_VERIFIED
)
{
let
tooltipDescription
=
this
.
fxaStrings
.
formatStringFromName
(
"
verifyDescription
"
[
state
.
email
]
)
;
appMenuStatus
.
setAttribute
(
"
fxastatus
"
"
unverified
"
)
;
let
unverifiedLabel
=
this
.
fluentStrings
.
formatValueSync
(
"
account
-
finish
-
account
-
setup
"
)
;
appMenuStatus
.
setAttribute
(
"
tooltiptext
"
tooltipDescription
)
;
if
(
PanelUI
.
protonAppMenuEnabled
)
{
appMenuLabel
.
classList
.
add
(
"
subviewbutton
-
nav
"
)
;
appMenuHeaderTitle
.
hidden
=
false
;
appMenuHeaderTitle
.
value
=
unverifiedLabel
;
appMenuHeaderDescription
.
value
=
state
.
email
;
appMenuLabel
.
removeAttribute
(
"
label
"
)
;
appMenuLabel
.
setAttribute
(
"
aria
-
labelledby
"
{
appMenuHeaderTitle
.
id
}
{
appMenuHeaderDescription
.
id
}
)
;
}
else
{
appMenuLabel
.
setAttribute
(
"
label
"
unverifiedLabel
)
;
}
return
;
}
if
(
PanelUI
.
protonAppMenuEnabled
)
{
appMenuHeaderTitle
.
hidden
=
true
;
appMenuHeaderDescription
.
value
=
state
.
email
;
}
else
{
appMenuLabel
.
classList
.
add
(
"
subviewbutton
-
iconic
"
)
;
}
appMenuStatus
.
setAttribute
(
"
fxastatus
"
"
signedin
"
)
;
appMenuLabel
.
setAttribute
(
"
label
"
state
.
email
)
;
appMenuLabel
.
classList
.
add
(
"
subviewbutton
-
nav
"
)
;
fxaPanelView
.
setAttribute
(
"
title
"
this
.
fluentStrings
.
formatValueSync
(
"
appmenu
-
fxa
-
header2
"
)
)
;
appMenuStatus
.
removeAttribute
(
"
tooltiptext
"
)
;
}
updateState
(
state
)
{
for
(
let
[
shown
menuId
boxId
]
of
[
[
state
.
status
=
=
UIState
.
STATUS_NOT_CONFIGURED
"
sync
-
setup
"
"
PanelUI
-
remotetabs
-
setupsync
"
]
[
state
.
status
=
=
UIState
.
STATUS_SIGNED_IN
&
&
!
state
.
syncEnabled
"
sync
-
enable
"
"
PanelUI
-
remotetabs
-
syncdisabled
"
]
[
state
.
status
=
=
UIState
.
STATUS_LOGIN_FAILED
"
sync
-
reauthitem
"
"
PanelUI
-
remotetabs
-
reauthsync
"
]
[
state
.
status
=
=
UIState
.
STATUS_NOT_VERIFIED
"
sync
-
unverifieditem
"
"
PanelUI
-
remotetabs
-
unverified
"
]
[
state
.
status
=
=
UIState
.
STATUS_SIGNED_IN
&
&
state
.
syncEnabled
"
sync
-
syncnowitem
"
"
PanelUI
-
remotetabs
-
main
"
]
]
)
{
document
.
getElementById
(
menuId
)
.
hidden
=
PanelMultiView
.
getViewNode
(
document
boxId
)
.
hidden
=
!
shown
;
}
}
updateSyncStatus
(
state
)
{
let
syncNow
=
document
.
querySelector
(
"
.
syncNowBtn
"
)
|
|
document
.
getElementById
(
"
appMenu
-
viewCache
"
)
.
content
.
querySelector
(
"
.
syncNowBtn
"
)
;
const
syncingUI
=
syncNow
.
getAttribute
(
"
syncstatus
"
)
=
=
"
active
"
;
if
(
state
.
syncing
!
=
syncingUI
)
{
state
.
syncing
?
this
.
onActivityStart
(
)
:
this
.
onActivityStop
(
)
;
}
}
async
openSignInAgainPage
(
entryPoint
)
{
const
url
=
await
FxAccounts
.
config
.
promiseForceSigninURI
(
entryPoint
)
;
switchToTabHavingURI
(
url
true
{
replaceQueryString
:
true
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
}
async
openDevicesManagementPage
(
entryPoint
)
{
let
url
=
await
FxAccounts
.
config
.
promiseManageDevicesURI
(
entryPoint
)
;
switchToTabHavingURI
(
url
true
{
replaceQueryString
:
true
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
}
async
openConnectAnotherDevice
(
entryPoint
)
{
const
url
=
await
FxAccounts
.
config
.
promiseConnectDeviceURI
(
entryPoint
)
;
openTrustedLinkIn
(
url
"
tab
"
)
;
}
async
openConnectAnotherDeviceFromFxaMenu
(
panel
=
undefined
)
{
this
.
emitFxaToolbarTelemetry
(
"
cad
"
panel
)
;
let
entryPoint
=
"
fxa_discoverability_native
"
;
if
(
this
.
isPanelInsideAppMenu
(
panel
)
)
{
entryPoint
=
"
fxa_app_menu
"
;
}
this
.
openConnectAnotherDevice
(
entryPoint
)
;
}
openSendToDevicePromo
(
)
{
const
url
=
Services
.
urlFormatter
.
formatURLPref
(
"
identity
.
sendtabpromo
.
url
"
)
;
switchToTabHavingURI
(
url
true
{
replaceQueryString
:
true
}
)
;
}
async
clickFxAMenuHeaderButton
(
panel
=
undefined
)
{
const
{
status
}
=
UIState
.
get
(
)
;
switch
(
status
)
{
case
UIState
.
STATUS_NOT_CONFIGURED
:
this
.
openFxAEmailFirstPageFromFxaMenu
(
panel
)
;
break
;
case
UIState
.
STATUS_LOGIN_FAILED
:
case
UIState
.
STATUS_NOT_VERIFIED
:
this
.
openPrefsFromFxaMenu
(
"
sync_settings
"
panel
)
;
break
;
case
UIState
.
STATUS_SIGNED_IN
:
this
.
openFxAManagePageFromFxaMenu
(
panel
)
;
}
}
async
openFxAEmailFirstPage
(
entryPoint
)
{
const
url
=
await
FxAccounts
.
config
.
promiseConnectAccountURI
(
entryPoint
)
;
switchToTabHavingURI
(
url
true
{
replaceQueryString
:
true
}
)
;
}
async
openFxAEmailFirstPageFromFxaMenu
(
panel
=
undefined
)
{
this
.
emitFxaToolbarTelemetry
(
"
login
"
panel
)
;
let
entryPoint
=
"
fxa_discoverability_native
"
;
if
(
this
.
isPanelInsideAppMenu
(
panel
)
|
|
(
PanelUI
.
protonAppMenuEnabled
&
&
panel
)
)
{
entryPoint
=
"
fxa_app_menu
"
;
}
this
.
openFxAEmailFirstPage
(
entryPoint
)
;
}
async
openFxAManagePage
(
entryPoint
)
{
const
url
=
await
FxAccounts
.
config
.
promiseManageURI
(
entryPoint
)
;
switchToTabHavingURI
(
url
true
{
replaceQueryString
:
true
}
)
;
}
async
openFxAManagePageFromFxaMenu
(
panel
=
undefined
)
{
this
.
emitFxaToolbarTelemetry
(
"
account_settings
"
panel
)
;
let
entryPoint
=
"
fxa_discoverability_native
"
;
if
(
this
.
isPanelInsideAppMenu
(
panel
)
)
{
entryPoint
=
"
fxa_app_menu
"
;
}
this
.
openFxAManagePage
(
entryPoint
)
;
}
async
sendTabToDevice
(
url
targets
title
)
{
const
fxaCommandsDevices
=
[
]
;
const
oldSendTabClients
=
[
]
;
for
(
const
target
of
targets
)
{
if
(
fxAccounts
.
commands
.
sendTab
.
isDeviceCompatible
(
target
)
)
{
fxaCommandsDevices
.
push
(
target
)
;
}
else
if
(
target
.
clientRecord
)
{
oldSendTabClients
.
push
(
target
.
clientRecord
)
;
}
else
{
this
.
log
.
error
(
Target
{
target
.
id
}
unsuitable
for
send
tab
.
)
;
}
}
let
cryptoSDR
=
Cc
[
"
mozilla
.
org
/
login
-
manager
/
crypto
/
SDR
;
1
"
]
.
getService
(
Ci
.
nsILoginManagerCrypto
)
;
if
(
!
cryptoSDR
.
isLoggedIn
)
{
if
(
cryptoSDR
.
uiBusy
)
{
this
.
log
.
info
(
"
Master
password
UI
is
busy
-
not
sending
the
tabs
"
)
;
return
false
;
}
try
{
cryptoSDR
.
encrypt
(
"
bacon
"
)
;
}
catch
(
e
)
{
this
.
log
.
info
(
"
Master
password
remains
unlocked
-
not
sending
the
tabs
"
)
;
return
false
;
}
}
let
numFailed
=
0
;
if
(
fxaCommandsDevices
.
length
)
{
this
.
log
.
info
(
Sending
a
tab
to
{
fxaCommandsDevices
.
map
(
d
=
>
d
.
id
)
.
join
(
"
"
)
}
using
FxA
commands
.
)
;
const
report
=
await
fxAccounts
.
commands
.
sendTab
.
send
(
fxaCommandsDevices
{
url
title
}
)
;
for
(
let
{
device
error
}
of
report
.
failed
)
{
this
.
log
.
error
(
Failed
to
send
a
tab
with
FxA
commands
for
{
device
.
id
}
.
error
)
;
numFailed
+
+
;
}
}
for
(
let
client
of
oldSendTabClients
)
{
try
{
this
.
log
.
info
(
Sending
a
tab
to
{
client
.
id
}
using
Sync
.
)
;
await
Weave
.
Service
.
clientsEngine
.
sendURIToClientForDisplay
(
url
client
.
id
title
)
;
}
catch
(
e
)
{
numFailed
+
+
;
this
.
log
.
error
(
"
Could
not
send
tab
to
device
.
"
e
)
;
}
}
return
numFailed
<
targets
.
length
;
}
populateSendTabToDevicesMenu
(
devicesPopup
url
title
multiselected
createDeviceNodeFn
)
{
if
(
!
createDeviceNodeFn
)
{
createDeviceNodeFn
=
(
targetId
name
targetType
lastModified
)
=
>
{
let
eltName
=
name
?
"
menuitem
"
:
"
menuseparator
"
;
return
document
.
createXULElement
(
eltName
)
;
}
;
}
for
(
let
i
=
devicesPopup
.
children
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
let
child
=
devicesPopup
.
children
[
i
]
;
if
(
child
.
classList
.
contains
(
"
sync
-
menuitem
"
)
)
{
child
.
remove
(
)
;
}
}
if
(
gSync
.
sendTabConfiguredAndLoading
)
{
return
;
}
const
fragment
=
document
.
createDocumentFragment
(
)
;
const
state
=
UIState
.
get
(
)
;
if
(
state
.
status
=
=
UIState
.
STATUS_SIGNED_IN
)
{
const
targets
=
this
.
getSendTabTargets
(
)
;
if
(
targets
.
length
)
{
this
.
_appendSendTabDeviceList
(
targets
fragment
createDeviceNodeFn
url
title
multiselected
)
;
}
else
{
this
.
_appendSendTabSingleDevice
(
fragment
createDeviceNodeFn
)
;
}
}
else
if
(
state
.
status
=
=
UIState
.
STATUS_NOT_VERIFIED
|
|
state
.
status
=
=
UIState
.
STATUS_LOGIN_FAILED
)
{
this
.
_appendSendTabVerify
(
fragment
createDeviceNodeFn
)
;
}
else
{
this
.
_appendSendTabUnconfigured
(
fragment
createDeviceNodeFn
)
;
}
devicesPopup
.
appendChild
(
fragment
)
;
}
_appendSendTabDeviceList
(
targets
fragment
createDeviceNodeFn
url
title
multiselected
)
{
let
tabsToSend
=
multiselected
?
gBrowser
.
selectedTabs
.
map
(
t
=
>
{
return
{
url
:
t
.
linkedBrowser
.
currentURI
.
spec
title
:
t
.
linkedBrowser
.
contentTitle
}
;
}
)
:
[
{
url
title
}
]
;
const
send
=
to
=
>
{
Promise
.
all
(
tabsToSend
.
map
(
t
=
>
this
.
sendTabToDevice
(
t
.
url
to
t
.
title
)
)
)
.
then
(
results
=
>
{
if
(
results
.
includes
(
true
)
)
{
let
fxastatus
=
document
.
documentElement
.
getAttribute
(
"
fxastatus
"
)
;
let
anchorNode
=
(
fxastatus
&
&
fxastatus
!
=
"
not_configured
"
&
&
document
.
getElementById
(
"
fxa
-
toolbar
-
menu
-
button
"
)
)
|
|
document
.
getElementById
(
"
PanelUI
-
menu
-
button
"
)
;
ConfirmationHint
.
show
(
anchorNode
"
sendToDevice
"
)
;
}
fxAccounts
.
flushLogFile
(
)
;
}
)
;
}
;
const
onSendAllCommand
=
event
=
>
{
send
(
targets
)
;
}
;
const
onTargetDeviceCommand
=
event
=
>
{
const
targetId
=
event
.
target
.
getAttribute
(
"
clientId
"
)
;
const
target
=
targets
.
find
(
t
=
>
t
.
id
=
=
targetId
)
;
send
(
[
target
]
)
;
}
;
function
addTargetDevice
(
targetId
name
targetType
lastModified
)
{
const
targetDevice
=
createDeviceNodeFn
(
targetId
name
targetType
lastModified
)
;
targetDevice
.
addEventListener
(
"
command
"
targetId
?
onTargetDeviceCommand
:
onSendAllCommand
true
)
;
targetDevice
.
classList
.
add
(
"
sync
-
menuitem
"
"
sendtab
-
target
"
)
;
targetDevice
.
setAttribute
(
"
clientId
"
targetId
)
;
targetDevice
.
setAttribute
(
"
clientType
"
targetType
)
;
targetDevice
.
setAttribute
(
"
label
"
name
)
;
fragment
.
appendChild
(
targetDevice
)
;
}
for
(
let
target
of
targets
)
{
let
type
lastModified
;
if
(
target
.
clientRecord
)
{
type
=
Weave
.
Service
.
clientsEngine
.
getClientType
(
target
.
clientRecord
.
id
)
;
lastModified
=
new
Date
(
target
.
clientRecord
.
serverLastModified
*
1000
)
;
}
else
{
type
=
target
.
type
=
=
"
mobile
"
?
"
phone
"
:
target
.
type
;
lastModified
=
target
.
lastAccessTime
?
new
Date
(
target
.
lastAccessTime
)
:
null
;
}
addTargetDevice
(
target
.
id
target
.
name
type
lastModified
)
;
}
if
(
targets
.
length
>
1
)
{
const
separator
=
createDeviceNodeFn
(
)
;
separator
.
classList
.
add
(
"
sync
-
menuitem
"
)
;
fragment
.
appendChild
(
separator
)
;
const
allDevicesLabel
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendToAllDevices
.
menuitem
"
)
;
addTargetDevice
(
"
"
allDevicesLabel
"
"
)
;
const
manageDevicesLabel
=
this
.
fxaStrings
.
GetStringFromName
(
"
manageDevices
.
menuitem
"
)
;
const
targetDevice
=
createDeviceNodeFn
(
null
manageDevicesLabel
null
null
)
;
targetDevice
.
addEventListener
(
"
command
"
(
)
=
>
gSync
.
openDevicesManagementPage
(
"
sendtab
"
)
true
)
;
targetDevice
.
classList
.
add
(
"
sync
-
menuitem
"
"
sendtab
-
target
"
)
;
targetDevice
.
setAttribute
(
"
label
"
manageDevicesLabel
)
;
fragment
.
appendChild
(
targetDevice
)
;
}
}
_appendSendTabSingleDevice
(
fragment
createDeviceNodeFn
)
{
const
noDevices
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
singledevice
.
status
"
)
;
const
learnMore
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
singledevice
"
)
;
const
connectDevice
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
connectdevice
"
)
;
const
actions
=
[
{
label
:
connectDevice
command
:
(
)
=
>
this
.
openConnectAnotherDevice
(
"
sendtab
"
)
}
{
label
:
learnMore
command
:
(
)
=
>
this
.
openSendToDevicePromo
(
)
}
]
;
this
.
_appendSendTabInfoItems
(
fragment
createDeviceNodeFn
noDevices
actions
)
;
}
_appendSendTabVerify
(
fragment
createDeviceNodeFn
)
{
const
notVerified
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
verify
.
status
"
)
;
const
verifyAccount
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
verify
"
)
;
const
actions
=
[
{
label
:
verifyAccount
command
:
(
)
=
>
this
.
openPrefs
(
"
sendtab
"
)
}
]
;
this
.
_appendSendTabInfoItems
(
fragment
createDeviceNodeFn
notVerified
actions
)
;
}
_appendSendTabUnconfigured
(
fragment
createDeviceNodeFn
)
{
const
brandProductName
=
gBrandBundle
.
GetStringFromName
(
"
brandProductName
"
)
;
const
notConnected
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
unconfigured
.
label2
"
)
;
const
learnMore
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
unconfigured
"
)
;
const
actions
=
[
{
label
:
learnMore
command
:
(
)
=
>
this
.
openSendToDevicePromo
(
)
}
]
;
this
.
_appendSendTabInfoItems
(
fragment
createDeviceNodeFn
notConnected
actions
)
;
const
signInToFxA
=
this
.
fxaStrings
.
formatStringFromName
(
"
sendTabToDevice
.
signintofxa
"
[
brandProductName
]
)
;
let
signInItem
=
createDeviceNodeFn
(
null
signInToFxA
null
)
;
signInItem
.
classList
.
add
(
"
sync
-
menuitem
"
)
;
signInItem
.
setAttribute
(
"
label
"
signInToFxA
)
;
if
(
signInItem
.
classList
.
contains
(
"
subviewbutton
"
)
)
{
signInItem
.
classList
.
add
(
"
subviewbutton
-
iconic
"
"
signintosync
"
)
;
}
signInItem
.
addEventListener
(
"
command
"
(
)
=
>
{
this
.
openPrefs
(
"
sendtab
"
)
;
}
)
;
fragment
.
insertBefore
(
signInItem
fragment
.
lastElementChild
)
;
}
_appendSendTabInfoItems
(
fragment
createDeviceNodeFn
statusLabel
actions
)
{
const
status
=
createDeviceNodeFn
(
null
statusLabel
null
)
;
status
.
setAttribute
(
"
label
"
statusLabel
)
;
status
.
setAttribute
(
"
disabled
"
true
)
;
status
.
classList
.
add
(
"
sync
-
menuitem
"
)
;
fragment
.
appendChild
(
status
)
;
const
separator
=
createDeviceNodeFn
(
null
null
null
)
;
separator
.
classList
.
add
(
"
sync
-
menuitem
"
)
;
fragment
.
appendChild
(
separator
)
;
for
(
let
{
label
command
}
of
actions
)
{
const
actionItem
=
createDeviceNodeFn
(
null
label
null
)
;
actionItem
.
addEventListener
(
"
command
"
command
true
)
;
actionItem
.
classList
.
add
(
"
sync
-
menuitem
"
)
;
actionItem
.
setAttribute
(
"
label
"
label
)
;
fragment
.
appendChild
(
actionItem
)
;
}
}
updateTabContextMenu
(
aPopupMenu
aTargetTab
)
{
this
.
init
(
)
;
if
(
!
this
.
FXA_ENABLED
)
{
return
;
}
let
hasASendableURI
=
false
;
for
(
let
tab
of
aTargetTab
.
multiselected
?
gBrowser
.
selectedTabs
:
[
aTargetTab
]
)
{
if
(
BrowserUtils
.
isShareableURL
(
tab
.
linkedBrowser
.
currentURI
)
)
{
hasASendableURI
=
true
;
break
;
}
}
const
enabled
=
!
this
.
sendTabConfiguredAndLoading
&
&
hasASendableURI
;
const
hideItems
=
this
.
shouldHideSendContextMenuItems
(
enabled
)
;
let
sendTabsToDevice
=
document
.
getElementById
(
"
context_sendTabToDevice
"
)
;
sendTabsToDevice
.
disabled
=
!
enabled
;
if
(
hideItems
|
|
!
hasASendableURI
)
{
sendTabsToDevice
.
hidden
=
true
;
}
else
{
let
tabCount
=
aTargetTab
.
multiselected
?
gBrowser
.
multiSelectedTabsCount
:
1
;
sendTabsToDevice
.
label
=
PluralForm
.
get
(
tabCount
gNavigatorBundle
.
getString
(
"
sendTabsToDevice
.
label
"
)
)
.
replace
(
"
#
1
"
tabCount
.
toLocaleString
(
)
)
;
sendTabsToDevice
.
accessKey
=
gNavigatorBundle
.
getString
(
"
sendTabsToDevice
.
accesskey
"
)
;
sendTabsToDevice
.
hidden
=
false
;
}
}
updateContentContextMenu
(
contextMenu
)
{
if
(
!
this
.
FXA_ENABLED
)
{
return
false
;
}
const
showSendLink
=
contextMenu
.
onSaveableLink
|
|
contextMenu
.
onPlainTextLink
;
const
showSendPage
=
!
showSendLink
&
&
!
(
contextMenu
.
isContentSelected
|
|
contextMenu
.
onImage
|
|
contextMenu
.
onCanvas
|
|
contextMenu
.
onVideo
|
|
contextMenu
.
onAudio
|
|
contextMenu
.
onLink
|
|
contextMenu
.
onTextInput
)
;
const
targetURI
=
showSendLink
?
contextMenu
.
getLinkURI
(
)
:
contextMenu
.
browser
.
currentURI
;
const
enabled
=
!
this
.
sendTabConfiguredAndLoading
&
&
BrowserUtils
.
isShareableURL
(
targetURI
)
;
const
hideItems
=
this
.
shouldHideSendContextMenuItems
(
enabled
)
;
contextMenu
.
showItem
(
"
context
-
sendpagetodevice
"
!
hideItems
&
&
showSendPage
)
;
contextMenu
.
showItem
(
"
context
-
sendlinktodevice
"
!
hideItems
&
&
showSendLink
)
;
if
(
!
showSendLink
&
&
!
showSendPage
)
{
return
false
;
}
contextMenu
.
setItemAttr
(
showSendPage
?
"
context
-
sendpagetodevice
"
:
"
context
-
sendlinktodevice
"
"
disabled
"
!
enabled
|
|
null
)
;
return
!
hideItems
&
&
(
showSendPage
|
|
showSendLink
)
;
}
onActivityStart
(
)
{
this
.
_isCurrentlySyncing
=
true
;
clearTimeout
(
this
.
_syncAnimationTimer
)
;
this
.
_syncStartTime
=
Date
.
now
(
)
;
document
.
querySelectorAll
(
"
.
syncnow
-
label
"
)
.
forEach
(
el
=
>
{
let
l10nId
=
el
.
getAttribute
(
"
syncing
-
data
-
l10n
-
id
"
)
;
el
.
setAttribute
(
"
data
-
l10n
-
id
"
l10nId
)
;
}
)
;
document
.
querySelectorAll
(
"
.
syncNowBtn
"
)
.
forEach
(
el
=
>
{
el
.
setAttribute
(
"
syncstatus
"
"
active
"
)
;
}
)
;
document
.
getElementById
(
"
appMenu
-
viewCache
"
)
.
content
.
querySelectorAll
(
"
.
syncNowBtn
"
)
.
forEach
(
el
=
>
{
el
.
setAttribute
(
"
syncstatus
"
"
active
"
)
;
}
)
;
}
_onActivityStop
(
)
{
this
.
_isCurrentlySyncing
=
false
;
if
(
!
gBrowser
)
{
return
;
}
document
.
querySelectorAll
(
"
.
syncnow
-
label
"
)
.
forEach
(
el
=
>
{
let
l10nId
=
el
.
getAttribute
(
"
sync
-
now
-
data
-
l10n
-
id
"
)
;
el
.
setAttribute
(
"
data
-
l10n
-
id
"
l10nId
)
;
}
)
;
document
.
querySelectorAll
(
"
.
syncNowBtn
"
)
.
forEach
(
el
=
>
{
el
.
removeAttribute
(
"
syncstatus
"
)
;
}
)
;
document
.
getElementById
(
"
appMenu
-
viewCache
"
)
.
content
.
querySelectorAll
(
"
.
syncNowBtn
"
)
.
forEach
(
el
=
>
{
el
.
removeAttribute
(
"
syncstatus
"
)
;
}
)
;
Services
.
obs
.
notifyObservers
(
null
"
test
:
browser
-
sync
:
activity
-
stop
"
)
;
}
onActivityStop
(
)
{
let
now
=
Date
.
now
(
)
;
let
syncDuration
=
now
-
this
.
_syncStartTime
;
if
(
syncDuration
<
MIN_STATUS_ANIMATION_DURATION
)
{
let
animationTime
=
MIN_STATUS_ANIMATION_DURATION
-
syncDuration
;
clearTimeout
(
this
.
_syncAnimationTimer
)
;
this
.
_syncAnimationTimer
=
setTimeout
(
(
)
=
>
this
.
_onActivityStop
(
)
animationTime
)
;
}
else
{
this
.
_onActivityStop
(
)
;
}
}
async
disconnect
(
{
confirm
=
true
disconnectAccount
=
true
}
=
{
}
)
{
if
(
disconnectAccount
)
{
let
deleteLocalData
=
false
;
if
(
confirm
)
{
let
options
=
await
this
.
_confirmFxaAndSyncDisconnect
(
)
;
if
(
!
options
.
userConfirmedDisconnect
)
{
return
false
;
}
deleteLocalData
=
options
.
deleteLocalData
;
}
return
this
.
_disconnectFxaAndSync
(
deleteLocalData
)
;
}
if
(
confirm
&
&
!
(
await
this
.
_confirmSyncDisconnect
(
)
)
)
{
return
false
;
}
return
this
.
_disconnectSync
(
)
;
}
async
_confirmFxaAndSyncDisconnect
(
)
{
let
options
=
{
userConfirmedDisconnect
:
false
deleteLocalData
:
false
}
;
let
[
title
body
button
checkbox
]
=
await
document
.
l10n
.
formatValues
(
[
{
id
:
"
fxa
-
signout
-
dialog2
-
title
"
}
{
id
:
"
fxa
-
signout
-
dialog
-
body
"
}
{
id
:
"
fxa
-
signout
-
dialog2
-
button
"
}
{
id
:
"
fxa
-
signout
-
dialog2
-
checkbox
"
}
]
)
;
const
flags
=
Services
.
prompt
.
BUTTON_TITLE_IS_STRING
*
Services
.
prompt
.
BUTTON_POS_0
+
Services
.
prompt
.
BUTTON_TITLE_CANCEL
*
Services
.
prompt
.
BUTTON_POS_1
;
if
(
!
UIState
.
get
(
)
.
syncEnabled
)
{
checkbox
=
null
;
}
const
result
=
await
Services
.
prompt
.
asyncConfirmEx
(
window
.
browsingContext
Services
.
prompt
.
MODAL_TYPE_INTERNAL_WINDOW
title
body
flags
button
null
null
checkbox
false
)
;
const
propBag
=
result
.
QueryInterface
(
Ci
.
nsIPropertyBag2
)
;
options
.
userConfirmedDisconnect
=
propBag
.
get
(
"
buttonNumClicked
"
)
=
=
0
;
options
.
deleteLocalData
=
propBag
.
get
(
"
checked
"
)
;
return
options
;
}
async
_disconnectFxaAndSync
(
deleteLocalData
)
{
const
{
SyncDisconnect
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
services
-
sync
/
SyncDisconnect
.
jsm
"
)
;
await
fxAccounts
.
telemetry
.
recordDisconnection
(
null
"
ui
"
)
;
await
SyncDisconnect
.
disconnect
(
deleteLocalData
)
.
catch
(
e
=
>
{
console
.
error
(
"
Failed
to
disconnect
.
"
e
)
;
}
)
;
return
true
;
}
async
_confirmSyncDisconnect
(
)
{
const
[
title
body
button
]
=
await
document
.
l10n
.
formatValues
(
[
{
id
:
sync
-
disconnect
-
dialog
-
title2
}
{
id
:
sync
-
disconnect
-
dialog
-
body
}
{
id
:
"
sync
-
disconnect
-
dialog
-
button
"
}
]
)
;
const
flags
=
Services
.
prompt
.
BUTTON_TITLE_IS_STRING
*
Services
.
prompt
.
BUTTON_POS_0
+
Services
.
prompt
.
BUTTON_TITLE_CANCEL
*
Services
.
prompt
.
BUTTON_POS_1
;
const
buttonPressed
=
Services
.
prompt
.
confirmEx
(
window
title
body
flags
button
null
null
null
{
}
)
;
return
buttonPressed
=
=
0
;
}
async
_disconnectSync
(
)
{
await
fxAccounts
.
telemetry
.
recordDisconnection
(
"
sync
"
"
ui
"
)
;
await
Weave
.
Service
.
promiseInitialized
;
await
Weave
.
Service
.
startOver
(
)
;
return
true
;
}
doSync
(
)
{
if
(
!
UIState
.
isReady
(
)
)
{
return
;
}
const
state
=
UIState
.
get
(
)
;
if
(
state
.
status
=
=
UIState
.
STATUS_SIGNED_IN
)
{
this
.
updateSyncStatus
(
{
syncing
:
true
}
)
;
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
{
fxAccounts
.
commands
.
pollDeviceCommands
(
)
.
catch
(
e
=
>
{
this
.
log
.
error
(
"
Fetching
missed
remote
commands
failed
.
"
e
)
;
}
)
;
Weave
.
Service
.
sync
(
)
;
}
)
;
}
}
doSyncFromFxaMenu
(
panel
)
{
this
.
doSync
(
)
;
this
.
emitFxaToolbarTelemetry
(
"
sync_now
"
panel
)
;
}
openPrefs
(
entryPoint
=
"
syncbutton
"
origin
=
undefined
)
{
window
.
openPreferences
(
"
paneSync
"
{
origin
urlParams
:
{
entrypoint
:
entryPoint
}
}
)
;
}
openPrefsFromFxaMenu
(
type
panel
)
{
this
.
emitFxaToolbarTelemetry
(
type
panel
)
;
let
entryPoint
=
"
fxa_discoverability_native
"
;
if
(
this
.
isPanelInsideAppMenu
(
panel
)
)
{
entryPoint
=
"
fxa_app_menu
"
;
}
this
.
openPrefs
(
entryPoint
)
;
}
openSyncedTabsPanel
(
)
{
let
placement
=
CustomizableUI
.
getPlacementOfWidget
(
"
sync
-
button
"
)
;
let
area
=
placement
&
&
placement
.
area
;
let
anchor
=
document
.
getElementById
(
"
sync
-
button
"
)
|
|
document
.
getElementById
(
"
PanelUI
-
menu
-
button
"
)
;
if
(
area
=
=
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
)
{
let
navbar
=
document
.
getElementById
(
CustomizableUI
.
AREA_NAVBAR
)
;
navbar
.
overflowable
.
show
(
)
.
then
(
(
)
=
>
{
PanelUI
.
showSubView
(
"
PanelUI
-
remotetabs
"
anchor
)
;
}
Cu
.
reportError
)
;
}
else
{
PanelUI
.
showSubView
(
"
PanelUI
-
remotetabs
"
anchor
)
;
}
}
refreshSyncButtonsTooltip
(
)
{
const
state
=
UIState
.
get
(
)
;
this
.
updateSyncButtonsTooltip
(
state
)
;
}
updateSyncButtonsTooltip
(
state
)
{
const
status
=
state
.
status
;
let
tooltiptext
;
if
(
status
=
=
UIState
.
STATUS_NOT_VERIFIED
)
{
tooltiptext
=
this
.
fxaStrings
.
formatStringFromName
(
"
verifyDescription
"
[
state
.
email
]
)
;
}
else
if
(
status
=
=
UIState
.
STATUS_NOT_CONFIGURED
)
{
tooltiptext
=
this
.
syncStrings
.
GetStringFromName
(
"
signInToSync
.
description
"
)
;
}
else
if
(
status
=
=
UIState
.
STATUS_LOGIN_FAILED
)
{
tooltiptext
=
this
.
fxaStrings
.
formatStringFromName
(
"
reconnectDescription
"
[
state
.
email
]
)
;
}
else
{
let
lastSyncDate
=
this
.
formatLastSyncDate
(
state
.
lastSync
)
;
if
(
lastSyncDate
)
{
tooltiptext
=
this
.
fluentStrings
.
formatValueSync
(
"
appmenu
-
fxa
-
last
-
sync
"
{
time
:
lastSyncDate
}
)
;
}
}
let
syncNowBtns
=
[
"
PanelUI
-
remotetabs
-
syncnow
"
"
PanelUI
-
fxa
-
menu
-
syncnow
-
button
"
]
;
syncNowBtns
.
forEach
(
id
=
>
{
let
el
=
PanelMultiView
.
getViewNode
(
document
id
)
;
if
(
tooltiptext
)
{
el
.
setAttribute
(
"
tooltiptext
"
tooltiptext
)
;
}
else
{
el
.
removeAttribute
(
"
tooltiptext
"
)
;
}
}
)
;
}
get
relativeTimeFormat
(
)
{
delete
this
.
relativeTimeFormat
;
return
(
this
.
relativeTimeFormat
=
new
Services
.
intl
.
RelativeTimeFormat
(
undefined
{
style
:
"
long
"
}
)
)
;
}
formatLastSyncDate
(
date
)
{
if
(
!
date
)
{
return
null
;
}
try
{
let
adjustedDate
=
new
Date
(
Date
.
now
(
)
-
1000
)
;
let
relativeDateStr
=
this
.
relativeTimeFormat
.
formatBestUnit
(
date
<
adjustedDate
?
date
:
adjustedDate
)
;
return
relativeDateStr
;
}
catch
(
ex
)
{
this
.
log
.
warn
(
"
failed
to
format
lastSync
time
"
date
ex
)
;
return
null
;
}
}
onClientsSynced
(
)
{
let
element
=
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
remotetabs
-
main
"
)
;
if
(
element
)
{
if
(
Weave
.
Service
.
clientsEngine
.
stats
.
numClients
>
1
)
{
element
.
setAttribute
(
"
devices
-
status
"
"
multi
"
)
;
}
else
{
element
.
setAttribute
(
"
devices
-
status
"
"
single
"
)
;
}
}
}
onFxaDisabled
(
)
{
document
.
documentElement
.
setAttribute
(
"
fxadisabled
"
true
)
;
const
toHide
=
[
.
.
.
document
.
querySelectorAll
(
"
.
sync
-
ui
-
item
"
)
]
;
for
(
const
item
of
toHide
)
{
item
.
hidden
=
true
;
}
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
"
nsISupportsWeakReference
"
]
)
}
;
