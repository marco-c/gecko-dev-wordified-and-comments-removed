Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
UIState
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
EnsureFxAccountsWebChannel
"
"
resource
:
/
/
gre
/
modules
/
FxAccountsWebChannel
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Weave
"
"
resource
:
/
/
services
-
sync
/
main
.
js
"
)
;
const
MIN_STATUS_ANIMATION_DURATION
=
1600
;
var
gSync
=
{
_initialized
:
false
_syncStartTime
:
0
_syncAnimationTimer
:
0
_obs
:
[
"
weave
:
engine
:
sync
:
finish
"
"
quit
-
application
"
UIState
.
ON_UPDATE
]
get
fxaStrings
(
)
{
delete
this
.
fxaStrings
;
return
this
.
fxaStrings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
accounts
.
properties
"
)
;
}
get
syncStrings
(
)
{
delete
this
.
syncStrings
;
return
this
.
syncStrings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
weave
/
locale
/
sync
.
properties
"
)
;
}
get
syncReady
(
)
{
return
Cc
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
)
.
wrappedJSObject
.
ready
;
}
get
syncConfiguredAndLoading
(
)
{
return
UIState
.
get
(
)
.
status
=
=
UIState
.
STATUS_SIGNED_IN
&
&
(
!
this
.
syncReady
|
|
Weave
.
Service
.
clientsEngine
.
lastSync
=
=
0
)
;
}
get
isSignedIn
(
)
{
return
UIState
.
get
(
)
.
status
=
=
UIState
.
STATUS_SIGNED_IN
;
}
get
remoteClients
(
)
{
return
Weave
.
Service
.
clientsEngine
.
remoteClients
.
sort
(
(
a
b
)
=
>
a
.
name
.
localeCompare
(
b
.
name
)
)
;
}
_generateNodeGetters
(
)
{
for
(
let
k
of
[
"
Status
"
"
Avatar
"
"
Label
"
"
Container
"
]
)
{
let
prop
=
"
appMenu
"
+
k
;
let
suffix
=
k
.
toLowerCase
(
)
;
delete
this
[
prop
]
;
this
.
__defineGetter__
(
prop
function
(
)
{
delete
this
[
prop
]
;
return
this
[
prop
]
=
document
.
getElementById
(
"
appMenu
-
fxa
-
"
+
suffix
)
;
}
)
;
}
}
_maybeUpdateUIState
(
)
{
if
(
UIState
.
isReady
(
)
)
{
const
state
=
UIState
.
get
(
)
;
if
(
state
.
status
!
=
UIState
.
STATUS_NOT_CONFIGURED
)
{
this
.
updateAllUI
(
state
)
;
}
}
}
init
(
)
{
if
(
this
.
_initialized
)
{
return
;
}
for
(
let
topic
of
this
.
_obs
)
{
Services
.
obs
.
addObserver
(
this
topic
true
)
;
}
this
.
_generateNodeGetters
(
)
;
let
broadcaster
=
document
.
getElementById
(
"
sync
-
status
"
)
;
broadcaster
.
setAttribute
(
"
label
"
this
.
syncStrings
.
GetStringFromName
(
"
syncnow
.
label
"
)
)
;
this
.
_maybeUpdateUIState
(
)
;
EnsureFxAccountsWebChannel
(
)
;
this
.
_initialized
=
true
;
}
uninit
(
)
{
if
(
!
this
.
_initialized
)
{
return
;
}
for
(
let
topic
of
this
.
_obs
)
{
Services
.
obs
.
removeObserver
(
this
topic
)
;
}
this
.
_initialized
=
false
;
}
observe
(
subject
topic
data
)
{
if
(
!
this
.
_initialized
)
{
Cu
.
reportError
(
"
browser
-
sync
observer
called
after
unload
:
"
+
topic
)
;
return
;
}
switch
(
topic
)
{
case
UIState
.
ON_UPDATE
:
const
state
=
UIState
.
get
(
)
;
this
.
updateAllUI
(
state
)
;
break
;
case
"
quit
-
application
"
:
clearTimeout
(
this
.
_syncAnimationTimer
)
;
break
;
case
"
weave
:
engine
:
sync
:
finish
"
:
if
(
data
!
=
"
clients
"
)
{
return
;
}
this
.
onClientsSynced
(
)
;
break
;
}
}
updateAllUI
(
state
)
{
this
.
updatePanelPopup
(
state
)
;
this
.
updateStateBroadcasters
(
state
)
;
this
.
updateSyncButtonsTooltip
(
state
)
;
this
.
updateSyncStatus
(
state
)
;
}
updatePanelPopup
(
state
)
{
let
defaultLabel
=
this
.
appMenuStatus
.
getAttribute
(
"
defaultlabel
"
)
;
let
defaultTooltiptext
=
this
.
appMenuStatus
.
getAttribute
(
"
signedinTooltiptext
"
)
;
const
status
=
state
.
status
;
this
.
appMenuLabel
.
setAttribute
(
"
label
"
defaultLabel
)
;
this
.
appMenuStatus
.
setAttribute
(
"
tooltiptext
"
defaultTooltiptext
)
;
this
.
appMenuContainer
.
removeAttribute
(
"
fxastatus
"
)
;
this
.
appMenuAvatar
.
style
.
removeProperty
(
"
list
-
style
-
image
"
)
;
if
(
status
=
=
UIState
.
STATUS_NOT_CONFIGURED
)
{
return
;
}
if
(
status
=
=
UIState
.
STATUS_LOGIN_FAILED
)
{
let
tooltipDescription
=
this
.
fxaStrings
.
formatStringFromName
(
"
reconnectDescription
"
[
state
.
email
]
1
)
;
let
errorLabel
=
this
.
appMenuStatus
.
getAttribute
(
"
errorlabel
"
)
;
this
.
appMenuContainer
.
setAttribute
(
"
fxastatus
"
"
login
-
failed
"
)
;
this
.
appMenuLabel
.
setAttribute
(
"
label
"
errorLabel
)
;
this
.
appMenuStatus
.
setAttribute
(
"
tooltiptext
"
tooltipDescription
)
;
return
;
}
else
if
(
status
=
=
UIState
.
STATUS_NOT_VERIFIED
)
{
let
tooltipDescription
=
this
.
fxaStrings
.
formatStringFromName
(
"
verifyDescription
"
[
state
.
email
]
1
)
;
let
unverifiedLabel
=
this
.
appMenuStatus
.
getAttribute
(
"
unverifiedlabel
"
)
;
this
.
appMenuContainer
.
setAttribute
(
"
fxastatus
"
"
unverified
"
)
;
this
.
appMenuLabel
.
setAttribute
(
"
label
"
unverifiedLabel
)
;
this
.
appMenuStatus
.
setAttribute
(
"
tooltiptext
"
tooltipDescription
)
;
return
;
}
this
.
appMenuContainer
.
setAttribute
(
"
fxastatus
"
"
signedin
"
)
;
this
.
appMenuLabel
.
setAttribute
(
"
label
"
state
.
displayName
|
|
state
.
email
)
;
if
(
state
.
avatarURL
)
{
let
bgImage
=
"
url
(
\
"
"
+
state
.
avatarURL
+
"
\
"
)
"
;
this
.
appMenuAvatar
.
style
.
listStyleImage
=
bgImage
;
let
img
=
new
Image
(
)
;
img
.
onerror
=
(
)
=
>
{
if
(
this
.
appMenuAvatar
.
style
.
listStyleImage
=
=
=
bgImage
)
{
this
.
appMenuAvatar
.
style
.
removeProperty
(
"
list
-
style
-
image
"
)
;
}
}
;
img
.
src
=
state
.
avatarURL
;
}
}
updateStateBroadcasters
(
state
)
{
const
status
=
state
.
status
;
document
.
getElementById
(
"
sync
-
reauth
-
state
"
)
.
hidden
=
true
;
document
.
getElementById
(
"
sync
-
setup
-
state
"
)
.
hidden
=
true
;
document
.
getElementById
(
"
sync
-
syncnow
-
state
"
)
.
hidden
=
true
;
if
(
status
=
=
UIState
.
STATUS_LOGIN_FAILED
)
{
document
.
getElementById
(
"
sync
-
reauth
-
state
"
)
.
hidden
=
false
;
}
else
if
(
status
=
=
UIState
.
STATUS_NOT_CONFIGURED
|
|
status
=
=
UIState
.
STATUS_NOT_VERIFIED
)
{
document
.
getElementById
(
"
sync
-
setup
-
state
"
)
.
hidden
=
false
;
}
else
{
document
.
getElementById
(
"
sync
-
syncnow
-
state
"
)
.
hidden
=
false
;
}
}
updateSyncStatus
(
state
)
{
const
broadcaster
=
document
.
getElementById
(
"
sync
-
status
"
)
;
const
syncingUI
=
broadcaster
.
getAttribute
(
"
syncstatus
"
)
=
=
"
active
"
;
if
(
state
.
syncing
!
=
syncingUI
)
{
state
.
syncing
?
this
.
onActivityStart
(
)
:
this
.
onActivityStop
(
)
;
}
}
onMenuPanelCommand
(
)
{
switch
(
this
.
appMenuContainer
.
getAttribute
(
"
fxastatus
"
)
)
{
case
"
signedin
"
:
this
.
openPrefs
(
"
menupanel
"
"
fxaSignedin
"
)
;
break
;
case
"
error
"
:
if
(
this
.
appMenuContainer
.
getAttribute
(
"
fxastatus
"
)
=
=
"
unverified
"
)
{
this
.
openPrefs
(
"
menupanel
"
"
fxaError
"
)
;
}
else
{
this
.
openSignInAgainPage
(
"
menupanel
"
)
;
}
break
;
default
:
this
.
openPrefs
(
"
menupanel
"
"
fxa
"
)
;
break
;
}
PanelUI
.
hide
(
)
;
}
openAccountsPage
(
action
urlParams
=
{
}
)
{
let
params
=
new
URLSearchParams
(
)
;
if
(
action
)
{
params
.
set
(
"
action
"
action
)
;
}
for
(
let
name
in
urlParams
)
{
if
(
urlParams
[
name
]
!
=
=
undefined
)
{
params
.
set
(
name
urlParams
[
name
]
)
;
}
}
let
url
=
"
about
:
accounts
?
"
+
params
;
switchToTabHavingURI
(
url
true
{
replaceQueryString
:
true
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
}
openSignInAgainPage
(
entryPoint
)
{
this
.
openAccountsPage
(
"
reauth
"
{
entrypoint
:
entryPoint
}
)
;
}
async
openDevicesManagementPage
(
entryPoint
)
{
let
url
=
await
fxAccounts
.
promiseAccountsManageDevicesURI
(
entryPoint
)
;
switchToTabHavingURI
(
url
true
{
replaceQueryString
:
true
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
}
openSendToDevicePromo
(
)
{
let
url
=
Services
.
prefs
.
getCharPref
(
"
app
.
productInfo
.
baseURL
"
)
;
url
+
=
"
send
-
tabs
/
?
utm_source
=
"
+
Services
.
appinfo
.
name
.
toLowerCase
(
)
;
switchToTabHavingURI
(
url
true
{
replaceQueryString
:
true
}
)
;
}
sendTabToDevice
(
url
clientId
title
)
{
Weave
.
Service
.
clientsEngine
.
sendURIToClientForDisplay
(
url
clientId
title
)
.
catch
(
e
=
>
{
console
.
error
(
"
Could
not
send
tab
to
device
"
e
)
;
}
)
;
}
populateSendTabToDevicesMenu
(
devicesPopup
url
title
createDeviceNodeFn
)
{
if
(
!
createDeviceNodeFn
)
{
createDeviceNodeFn
=
(
clientId
name
clientType
)
=
>
{
let
eltName
=
name
?
"
menuitem
"
:
"
menuseparator
"
;
return
document
.
createElement
(
eltName
)
;
}
;
}
for
(
let
i
=
devicesPopup
.
childNodes
.
length
-
1
;
i
>
=
0
;
-
-
i
)
{
let
child
=
devicesPopup
.
childNodes
[
i
]
;
if
(
child
.
classList
.
contains
(
"
sync
-
menuitem
"
)
)
{
child
.
remove
(
)
;
}
}
if
(
gSync
.
syncConfiguredAndLoading
)
{
return
;
}
const
fragment
=
document
.
createDocumentFragment
(
)
;
const
state
=
UIState
.
get
(
)
;
if
(
state
.
status
=
=
UIState
.
STATUS_SIGNED_IN
&
&
this
.
remoteClients
.
length
>
0
)
{
this
.
_appendSendTabDeviceList
(
fragment
createDeviceNodeFn
url
title
)
;
}
else
if
(
state
.
status
=
=
UIState
.
STATUS_SIGNED_IN
)
{
this
.
_appendSendTabSingleDevice
(
fragment
createDeviceNodeFn
)
;
}
else
if
(
state
.
status
=
=
UIState
.
STATUS_NOT_VERIFIED
|
|
state
.
status
=
=
UIState
.
STATUS_LOGIN_FAILED
)
{
this
.
_appendSendTabVerify
(
fragment
createDeviceNodeFn
)
;
}
else
{
this
.
_appendSendTabUnconfigured
(
fragment
createDeviceNodeFn
)
;
}
devicesPopup
.
appendChild
(
fragment
)
;
}
_appendSendTabDeviceList
(
fragment
createDeviceNodeFn
url
title
)
{
const
onTargetDeviceCommand
=
(
event
)
=
>
{
let
clients
=
event
.
target
.
getAttribute
(
"
clientId
"
)
?
[
event
.
target
.
getAttribute
(
"
clientId
"
)
]
:
this
.
remoteClients
.
map
(
client
=
>
client
.
id
)
;
clients
.
forEach
(
clientId
=
>
this
.
sendTabToDevice
(
url
clientId
title
)
)
;
BrowserPageActions
.
panelNode
.
hidePopup
(
)
;
}
function
addTargetDevice
(
clientId
name
clientType
)
{
const
targetDevice
=
createDeviceNodeFn
(
clientId
name
clientType
)
;
targetDevice
.
addEventListener
(
"
command
"
onTargetDeviceCommand
true
)
;
targetDevice
.
classList
.
add
(
"
sync
-
menuitem
"
"
sendtab
-
target
"
)
;
targetDevice
.
setAttribute
(
"
clientId
"
clientId
)
;
targetDevice
.
setAttribute
(
"
clientType
"
clientType
)
;
targetDevice
.
setAttribute
(
"
label
"
name
)
;
fragment
.
appendChild
(
targetDevice
)
;
}
const
clients
=
this
.
remoteClients
;
for
(
let
client
of
clients
)
{
const
type
=
client
.
formfactor
&
&
client
.
formfactor
.
includes
(
"
tablet
"
)
?
"
tablet
"
:
client
.
type
;
addTargetDevice
(
client
.
id
client
.
name
type
)
;
}
if
(
clients
.
length
>
1
)
{
const
separator
=
createDeviceNodeFn
(
)
;
separator
.
classList
.
add
(
"
sync
-
menuitem
"
)
;
fragment
.
appendChild
(
separator
)
;
const
allDevicesLabel
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendToAllDevices
.
menuitem
"
)
;
addTargetDevice
(
"
"
allDevicesLabel
"
"
)
;
}
}
_appendSendTabSingleDevice
(
fragment
createDeviceNodeFn
)
{
const
noDevices
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
singledevice
.
status
"
)
;
const
learnMore
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
singledevice
"
)
;
this
.
_appendSendTabInfoItems
(
fragment
createDeviceNodeFn
noDevices
learnMore
(
)
=
>
{
this
.
openSendToDevicePromo
(
)
;
BrowserPageActions
.
panelNode
.
hidePopup
(
)
;
}
)
;
}
_appendSendTabVerify
(
fragment
createDeviceNodeFn
)
{
const
notVerified
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
verify
.
status
"
)
;
const
verifyAccount
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
verify
"
)
;
this
.
_appendSendTabInfoItems
(
fragment
createDeviceNodeFn
notVerified
verifyAccount
(
)
=
>
{
this
.
openPrefs
(
"
sendtab
"
)
;
BrowserPageActions
.
panelNode
.
hidePopup
(
)
;
}
)
;
}
_appendSendTabUnconfigured
(
fragment
createDeviceNodeFn
)
{
const
notConnected
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
unconfigured
.
status
"
)
;
const
learnMore
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
unconfigured
"
)
;
this
.
_appendSendTabInfoItems
(
fragment
createDeviceNodeFn
notConnected
learnMore
(
)
=
>
{
this
.
openSendToDevicePromo
(
)
;
BrowserPageActions
.
panelNode
.
hidePopup
(
)
;
}
)
;
const
signInToSync
=
this
.
fxaStrings
.
GetStringFromName
(
"
sendTabToDevice
.
signintosync
"
)
;
let
signInItem
=
createDeviceNodeFn
(
null
signInToSync
null
)
;
signInItem
.
classList
.
add
(
"
sync
-
menuitem
"
)
;
signInItem
.
setAttribute
(
"
label
"
signInToSync
)
;
if
(
signInItem
.
classList
.
contains
(
"
subviewbutton
"
)
)
{
signInItem
.
classList
.
add
(
"
subviewbutton
-
iconic
"
"
signintosync
"
)
;
}
signInItem
.
addEventListener
(
"
command
"
(
)
=
>
{
this
.
openPrefs
(
"
sendtab
"
)
;
BrowserPageActions
.
panelNode
.
hidePopup
(
)
;
}
)
;
fragment
.
insertBefore
(
signInItem
fragment
.
lastChild
)
;
}
_appendSendTabInfoItems
(
fragment
createDeviceNodeFn
statusLabel
actionLabel
actionCommand
)
{
const
status
=
createDeviceNodeFn
(
null
statusLabel
null
)
;
status
.
setAttribute
(
"
label
"
statusLabel
)
;
status
.
setAttribute
(
"
disabled
"
true
)
;
status
.
classList
.
add
(
"
sync
-
menuitem
"
)
;
fragment
.
appendChild
(
status
)
;
const
separator
=
createDeviceNodeFn
(
null
null
null
)
;
separator
.
classList
.
add
(
"
sync
-
menuitem
"
)
;
fragment
.
appendChild
(
separator
)
;
const
actionItem
=
createDeviceNodeFn
(
null
actionLabel
null
)
;
actionItem
.
addEventListener
(
"
command
"
actionCommand
true
)
;
actionItem
.
classList
.
add
(
"
sync
-
menuitem
"
)
;
actionItem
.
setAttribute
(
"
label
"
actionLabel
)
;
fragment
.
appendChild
(
actionItem
)
;
}
isSendableURI
(
aURISpec
)
{
if
(
!
aURISpec
)
{
return
false
;
}
if
(
aURISpec
.
length
>
65535
)
{
return
false
;
}
try
{
const
unsendableRegexp
=
new
RegExp
(
Services
.
prefs
.
getCharPref
(
"
services
.
sync
.
engine
.
tabs
.
filteredUrls
"
)
"
i
"
)
;
return
!
unsendableRegexp
.
test
(
aURISpec
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
Failed
to
build
url
filter
regexp
for
send
tab
:
{
e
}
)
;
return
true
;
}
}
updateTabContextMenu
(
aPopupMenu
aTargetTab
)
{
const
enabled
=
!
this
.
syncConfiguredAndLoading
&
&
this
.
isSendableURI
(
aTargetTab
.
linkedBrowser
.
currentURI
.
spec
)
;
document
.
getElementById
(
"
context_sendTabToDevice
"
)
.
disabled
=
!
enabled
;
}
updateContentContextMenu
(
contextMenu
)
{
const
showSendLink
=
contextMenu
.
onSaveableLink
|
|
contextMenu
.
onPlainTextLink
;
const
showSendPage
=
!
showSendLink
&
&
!
(
contextMenu
.
isContentSelected
|
|
contextMenu
.
onImage
|
|
contextMenu
.
onCanvas
|
|
contextMenu
.
onVideo
|
|
contextMenu
.
onAudio
|
|
contextMenu
.
onLink
|
|
contextMenu
.
onTextInput
)
;
[
"
context
-
sendpagetodevice
"
"
context
-
sep
-
sendpagetodevice
"
]
.
forEach
(
id
=
>
contextMenu
.
showItem
(
id
showSendPage
)
)
;
[
"
context
-
sendlinktodevice
"
"
context
-
sep
-
sendlinktodevice
"
]
.
forEach
(
id
=
>
contextMenu
.
showItem
(
id
showSendLink
)
)
;
if
(
!
showSendLink
&
&
!
showSendPage
)
{
return
;
}
const
targetURI
=
showSendLink
?
contextMenu
.
linkURL
:
contextMenu
.
browser
.
currentURI
.
spec
;
const
enabled
=
!
this
.
syncConfiguredAndLoading
&
&
this
.
isSendableURI
(
targetURI
)
;
contextMenu
.
setItemAttr
(
showSendPage
?
"
context
-
sendpagetodevice
"
:
"
context
-
sendlinktodevice
"
"
disabled
"
!
enabled
|
|
null
)
;
}
onActivityStart
(
)
{
clearTimeout
(
this
.
_syncAnimationTimer
)
;
this
.
_syncStartTime
=
Date
.
now
(
)
;
let
broadcaster
=
document
.
getElementById
(
"
sync
-
status
"
)
;
broadcaster
.
setAttribute
(
"
syncstatus
"
"
active
"
)
;
broadcaster
.
setAttribute
(
"
label
"
this
.
syncStrings
.
GetStringFromName
(
"
syncingtabs
.
label
"
)
)
;
broadcaster
.
setAttribute
(
"
disabled
"
"
true
"
)
;
}
_onActivityStop
(
)
{
if
(
!
gBrowser
)
return
;
let
broadcaster
=
document
.
getElementById
(
"
sync
-
status
"
)
;
broadcaster
.
removeAttribute
(
"
syncstatus
"
)
;
broadcaster
.
removeAttribute
(
"
disabled
"
)
;
broadcaster
.
setAttribute
(
"
label
"
this
.
syncStrings
.
GetStringFromName
(
"
syncnow
.
label
"
)
)
;
Services
.
obs
.
notifyObservers
(
null
"
test
:
browser
-
sync
:
activity
-
stop
"
)
;
}
onActivityStop
(
)
{
let
now
=
Date
.
now
(
)
;
let
syncDuration
=
now
-
this
.
_syncStartTime
;
if
(
syncDuration
<
MIN_STATUS_ANIMATION_DURATION
)
{
let
animationTime
=
MIN_STATUS_ANIMATION_DURATION
-
syncDuration
;
clearTimeout
(
this
.
_syncAnimationTimer
)
;
this
.
_syncAnimationTimer
=
setTimeout
(
(
)
=
>
this
.
_onActivityStop
(
)
animationTime
)
;
}
else
{
this
.
_onActivityStop
(
)
;
}
}
doSync
(
)
{
if
(
!
UIState
.
isReady
(
)
)
{
return
;
}
const
state
=
UIState
.
get
(
)
;
if
(
state
.
status
=
=
UIState
.
STATUS_SIGNED_IN
)
{
setTimeout
(
(
)
=
>
Weave
.
Service
.
errorHandler
.
syncAndReportErrors
(
)
0
)
;
}
}
openPrefs
(
entryPoint
=
"
syncbutton
"
origin
=
undefined
)
{
window
.
openPreferences
(
"
paneSync
"
{
origin
urlParams
:
{
entrypoint
:
entryPoint
}
}
)
;
}
openSyncedTabsPanel
(
)
{
let
placement
=
CustomizableUI
.
getPlacementOfWidget
(
"
sync
-
button
"
)
;
let
area
=
placement
?
placement
.
area
:
CustomizableUI
.
AREA_NAVBAR
;
let
anchor
=
document
.
getElementById
(
"
sync
-
button
"
)
|
|
document
.
getElementById
(
"
PanelUI
-
menu
-
button
"
)
;
if
(
area
=
=
CustomizableUI
.
AREA_PANEL
)
{
PanelUI
.
show
(
)
.
then
(
(
)
=
>
{
PanelUI
.
showSubView
(
"
PanelUI
-
remotetabs
"
anchor
area
)
;
}
)
.
catch
(
Cu
.
reportError
)
;
}
else
{
PanelUI
.
showSubView
(
"
PanelUI
-
remotetabs
"
anchor
area
)
;
}
}
updateSyncButtonsTooltip
(
state
)
{
const
status
=
state
.
status
;
let
tooltiptext
;
if
(
status
=
=
UIState
.
STATUS_NOT_VERIFIED
)
{
tooltiptext
=
this
.
fxaStrings
.
formatStringFromName
(
"
verifyDescription
"
[
state
.
email
]
1
)
;
}
else
if
(
status
=
=
UIState
.
STATUS_NOT_CONFIGURED
)
{
tooltiptext
=
this
.
syncStrings
.
GetStringFromName
(
"
signInToSync
.
description
"
)
;
}
else
if
(
status
=
=
UIState
.
STATUS_LOGIN_FAILED
)
{
tooltiptext
=
this
.
fxaStrings
.
formatStringFromName
(
"
reconnectDescription
"
[
state
.
email
]
1
)
;
}
else
{
tooltiptext
=
this
.
formatLastSyncDate
(
state
.
lastSync
)
;
}
let
broadcaster
=
document
.
getElementById
(
"
sync
-
status
"
)
;
if
(
broadcaster
)
{
if
(
tooltiptext
)
{
broadcaster
.
setAttribute
(
"
tooltiptext
"
tooltiptext
)
;
}
else
{
broadcaster
.
removeAttribute
(
"
tooltiptext
"
)
;
}
}
}
get
withinLastWeekFormat
(
)
{
delete
this
.
withinLastWeekFormat
;
return
this
.
withinLastWeekFormat
=
new
Intl
.
DateTimeFormat
(
undefined
{
weekday
:
"
long
"
hour
:
"
numeric
"
minute
:
"
numeric
"
}
)
;
}
get
oneWeekOrOlderFormat
(
)
{
delete
this
.
oneWeekOrOlderFormat
;
return
this
.
oneWeekOrOlderFormat
=
new
Intl
.
DateTimeFormat
(
undefined
{
month
:
"
long
"
day
:
"
numeric
"
}
)
;
}
formatLastSyncDate
(
date
)
{
let
sixDaysAgo
=
(
(
)
=
>
{
let
tempDate
=
new
Date
(
)
;
tempDate
.
setDate
(
tempDate
.
getDate
(
)
-
6
)
;
tempDate
.
setHours
(
0
0
0
0
)
;
return
tempDate
;
}
)
(
)
;
let
dateFormat
=
date
<
sixDaysAgo
?
this
.
oneWeekOrOlderFormat
:
this
.
withinLastWeekFormat
;
let
lastSyncDateString
=
dateFormat
.
format
(
date
)
;
return
this
.
syncStrings
.
formatStringFromName
(
"
lastSync2
.
label
"
[
lastSyncDateString
]
1
)
;
}
onClientsSynced
(
)
{
let
broadcaster
=
document
.
getElementById
(
"
sync
-
syncnow
-
state
"
)
;
if
(
broadcaster
)
{
if
(
Weave
.
Service
.
clientsEngine
.
stats
.
numClients
>
1
)
{
broadcaster
.
setAttribute
(
"
devices
-
status
"
"
multi
"
)
;
}
else
{
broadcaster
.
setAttribute
(
"
devices
-
status
"
"
single
"
)
;
}
}
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
}
;
