var
gPageStyleMenu
=
{
_pageStyleSheets
:
new
WeakMap
(
)
addBrowserStyleSheets
(
styleSheets
permanentKey
)
{
let
sheetData
=
this
.
_pageStyleSheets
.
get
(
permanentKey
)
;
if
(
!
sheetData
)
{
this
.
_pageStyleSheets
.
set
(
permanentKey
styleSheets
)
;
return
;
}
sheetData
.
filteredStyleSheets
.
push
(
.
.
.
styleSheets
.
filteredStyleSheets
)
;
sheetData
.
preferredStyleSheetSet
=
sheetData
.
preferredStyleSheetSet
|
|
styleSheets
.
preferredStyleSheetSet
;
}
clearBrowserStyleSheets
(
permanentKey
)
{
this
.
_pageStyleSheets
.
delete
(
permanentKey
)
;
}
_getStyleSheetInfo
(
browser
)
{
let
data
=
this
.
_pageStyleSheets
.
get
(
browser
.
permanentKey
)
;
if
(
!
data
)
{
return
{
filteredStyleSheets
:
[
]
authorStyleDisabled
:
false
preferredStyleSheetSet
:
true
}
;
}
return
data
;
}
fillPopup
(
menuPopup
)
{
let
styleSheetInfo
=
this
.
_getStyleSheetInfo
(
gBrowser
.
selectedBrowser
)
;
var
noStyle
=
menuPopup
.
firstElementChild
;
var
persistentOnly
=
noStyle
.
nextElementSibling
;
var
sep
=
persistentOnly
.
nextElementSibling
;
while
(
sep
.
nextElementSibling
)
{
menuPopup
.
removeChild
(
sep
.
nextElementSibling
)
;
}
let
styleSheets
=
styleSheetInfo
.
filteredStyleSheets
;
var
currentStyleSheets
=
{
}
;
var
styleDisabled
=
styleSheetInfo
.
authorStyleDisabled
;
var
haveAltSheets
=
false
;
var
altStyleSelected
=
false
;
for
(
let
currentStyleSheet
of
styleSheets
)
{
if
(
!
currentStyleSheet
.
disabled
)
{
altStyleSelected
=
true
;
}
haveAltSheets
=
true
;
let
lastWithSameTitle
=
null
;
if
(
currentStyleSheet
.
title
in
currentStyleSheets
)
{
lastWithSameTitle
=
currentStyleSheets
[
currentStyleSheet
.
title
]
;
}
if
(
!
lastWithSameTitle
)
{
let
menuItem
=
document
.
createXULElement
(
"
menuitem
"
)
;
menuItem
.
setAttribute
(
"
type
"
"
radio
"
)
;
menuItem
.
setAttribute
(
"
label
"
currentStyleSheet
.
title
)
;
menuItem
.
setAttribute
(
"
data
"
currentStyleSheet
.
title
)
;
menuItem
.
setAttribute
(
"
checked
"
!
currentStyleSheet
.
disabled
&
&
!
styleDisabled
)
;
menuItem
.
setAttribute
(
"
oncommand
"
"
gPageStyleMenu
.
switchStyleSheet
(
this
.
getAttribute
(
'
data
'
)
)
;
"
)
;
menuPopup
.
appendChild
(
menuItem
)
;
currentStyleSheets
[
currentStyleSheet
.
title
]
=
menuItem
;
}
else
if
(
currentStyleSheet
.
disabled
)
{
lastWithSameTitle
.
removeAttribute
(
"
checked
"
)
;
}
}
noStyle
.
setAttribute
(
"
checked
"
styleDisabled
)
;
persistentOnly
.
setAttribute
(
"
checked
"
!
altStyleSelected
&
&
!
styleDisabled
)
;
persistentOnly
.
hidden
=
styleSheetInfo
.
preferredStyleSheetSet
?
haveAltSheets
:
false
;
sep
.
hidden
=
(
noStyle
.
hidden
&
&
persistentOnly
.
hidden
)
|
|
!
haveAltSheets
;
}
_sendMessageToAll
(
message
data
)
{
let
contextsToVisit
=
[
gBrowser
.
selectedBrowser
.
browsingContext
]
;
while
(
contextsToVisit
.
length
)
{
let
currentContext
=
contextsToVisit
.
pop
(
)
;
let
global
=
currentContext
.
currentWindowGlobal
;
if
(
!
global
)
{
continue
;
}
let
actor
=
global
.
getActor
(
"
PageStyle
"
)
;
actor
.
sendAsyncMessage
(
message
data
)
;
contextsToVisit
.
push
(
.
.
.
currentContext
.
children
)
;
}
}
switchStyleSheet
(
title
)
{
let
{
permanentKey
}
=
gBrowser
.
selectedBrowser
;
let
sheetData
=
this
.
_pageStyleSheets
.
get
(
permanentKey
)
;
if
(
sheetData
&
&
sheetData
.
filteredStyleSheets
)
{
sheetData
.
authorStyleDisabled
=
false
;
for
(
let
sheet
of
sheetData
.
filteredStyleSheets
)
{
sheet
.
disabled
=
sheet
.
title
!
=
=
title
;
}
}
this
.
_sendMessageToAll
(
"
PageStyle
:
Switch
"
{
title
}
)
;
}
disableStyle
(
)
{
let
{
permanentKey
}
=
gBrowser
.
selectedBrowser
;
let
sheetData
=
this
.
_pageStyleSheets
.
get
(
permanentKey
)
;
if
(
sheetData
)
{
sheetData
.
authorStyleDisabled
=
true
;
}
this
.
_sendMessageToAll
(
"
PageStyle
:
Disable
"
{
}
)
;
}
}
;
