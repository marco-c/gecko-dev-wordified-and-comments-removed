function
initFeedTab
(
feeds
)
{
for
(
const
[
name
type
url
]
of
feeds
)
{
addRow
(
name
type
url
)
;
}
const
feedListbox
=
document
.
getElementById
(
"
feedListbox
"
)
;
document
.
getElementById
(
"
feedTab
"
)
.
hidden
=
feedListbox
.
getRowCount
(
)
=
=
0
;
}
function
addRow
(
name
type
url
)
{
const
item
=
document
.
createXULElement
(
"
richlistitem
"
)
;
const
top
=
document
.
createXULElement
(
"
hbox
"
)
;
top
.
setAttribute
(
"
flex
"
"
1
"
)
;
item
.
appendChild
(
top
)
;
const
bottom
=
document
.
createXULElement
(
"
hbox
"
)
;
bottom
.
setAttribute
(
"
flex
"
"
1
"
)
;
item
.
appendChild
(
bottom
)
;
const
nameLabel
=
document
.
createXULElement
(
"
label
"
)
;
nameLabel
.
className
=
"
feedTitle
"
;
nameLabel
.
textContent
=
name
;
nameLabel
.
setAttribute
(
"
flex
"
"
1
"
)
;
top
.
appendChild
(
nameLabel
)
;
const
typeLabel
=
document
.
createXULElement
(
"
label
"
)
;
typeLabel
.
textContent
=
type
;
top
.
appendChild
(
typeLabel
)
;
const
urlContainer
=
document
.
createXULElement
(
"
hbox
"
)
;
urlContainer
.
setAttribute
(
"
flex
"
"
1
"
)
;
bottom
.
appendChild
(
urlContainer
)
;
const
urlLabel
=
document
.
createXULElement
(
"
label
"
)
;
urlLabel
.
className
=
"
text
-
link
"
;
urlLabel
.
textContent
=
url
;
urlLabel
.
setAttribute
(
"
tooltiptext
"
url
)
;
urlLabel
.
addEventListener
(
"
click
"
ev
=
>
openUILink
(
this
.
value
ev
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
createNullPrincipal
(
{
}
)
}
)
)
;
urlContainer
.
appendChild
(
urlLabel
)
;
const
subscribeButton
=
document
.
createXULElement
(
"
button
"
)
;
subscribeButton
.
className
=
"
feed
-
subscribe
"
;
subscribeButton
.
addEventListener
(
"
click
"
(
)
=
>
openWebLinkIn
(
url
"
current
"
{
ignoreAlt
:
true
}
)
)
;
subscribeButton
.
setAttribute
(
"
label
"
gBundle
.
getString
(
"
feedSubscribe
"
)
)
;
subscribeButton
.
setAttribute
(
"
accesskey
"
gBundle
.
getString
(
"
feedSubscribe
.
accesskey
"
)
)
;
bottom
.
appendChild
(
subscribeButton
)
;
document
.
getElementById
(
"
feedListbox
"
)
.
appendChild
(
item
)
;
}
