Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
LoginHelper
"
"
resource
:
/
/
gre
/
modules
/
LoginHelper
.
jsm
"
)
;
var
security
=
{
init
(
uri
windowInfo
)
{
this
.
uri
=
uri
;
this
.
windowInfo
=
windowInfo
;
}
viewCert
(
)
{
var
cert
=
security
.
_cert
;
viewCertHelper
(
window
cert
)
;
}
_getSecurityInfo
(
)
{
const
nsISSLStatusProvider
=
Components
.
interfaces
.
nsISSLStatusProvider
;
const
nsISSLStatus
=
Components
.
interfaces
.
nsISSLStatus
;
if
(
!
this
.
windowInfo
.
isTopWindow
)
return
null
;
var
hostName
=
this
.
windowInfo
.
hostName
;
var
ui
=
security
.
_getSecurityUI
(
)
;
if
(
!
ui
)
return
null
;
var
isBroken
=
(
ui
.
state
&
Components
.
interfaces
.
nsIWebProgressListener
.
STATE_IS_BROKEN
)
;
var
isMixed
=
(
ui
.
state
&
(
Components
.
interfaces
.
nsIWebProgressListener
.
STATE_LOADED_MIXED_ACTIVE_CONTENT
|
Components
.
interfaces
.
nsIWebProgressListener
.
STATE_LOADED_MIXED_DISPLAY_CONTENT
)
)
;
var
isInsecure
=
(
ui
.
state
&
Components
.
interfaces
.
nsIWebProgressListener
.
STATE_IS_INSECURE
)
;
var
isEV
=
(
ui
.
state
&
Components
.
interfaces
.
nsIWebProgressListener
.
STATE_IDENTITY_EV_TOPLEVEL
)
;
ui
.
QueryInterface
(
nsISSLStatusProvider
)
;
var
status
=
ui
.
SSLStatus
;
if
(
!
isInsecure
&
&
status
)
{
status
.
QueryInterface
(
nsISSLStatus
)
;
var
cert
=
status
.
serverCert
;
var
issuerName
=
cert
.
issuerOrganization
|
|
cert
.
issuerName
;
var
retval
=
{
hostName
cAName
:
issuerName
encryptionAlgorithm
:
undefined
encryptionStrength
:
undefined
version
:
undefined
isBroken
isMixed
isEV
cert
certificateTransparency
:
undefined
}
;
var
version
;
try
{
retval
.
encryptionAlgorithm
=
status
.
cipherName
;
retval
.
encryptionStrength
=
status
.
secretKeyLength
;
version
=
status
.
protocolVersion
;
}
catch
(
e
)
{
}
switch
(
version
)
{
case
nsISSLStatus
.
SSL_VERSION_3
:
retval
.
version
=
"
SSL
3
"
;
break
;
case
nsISSLStatus
.
TLS_VERSION_1
:
retval
.
version
=
"
TLS
1
.
0
"
;
break
;
case
nsISSLStatus
.
TLS_VERSION_1_1
:
retval
.
version
=
"
TLS
1
.
1
"
;
break
;
case
nsISSLStatus
.
TLS_VERSION_1_2
:
retval
.
version
=
"
TLS
1
.
2
"
;
break
;
case
nsISSLStatus
.
TLS_VERSION_1_3
:
retval
.
version
=
"
TLS
1
.
3
"
;
break
;
}
switch
(
status
.
certificateTransparencyStatus
)
{
case
nsISSLStatus
.
CERTIFICATE_TRANSPARENCY_NOT_APPLICABLE
:
case
nsISSLStatus
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS
:
case
nsISSLStatus
.
CERTIFICATE_TRANSPARENCY_POLICY_NOT_DIVERSE_SCTS
:
retval
.
certificateTransparency
=
null
;
break
;
case
nsISSLStatus
.
CERTIFICATE_TRANSPARENCY_POLICY_COMPLIANT
:
retval
.
certificateTransparency
=
"
Compliant
"
;
break
;
}
return
retval
;
}
return
{
hostName
cAName
:
"
"
encryptionAlgorithm
:
"
"
encryptionStrength
:
0
version
:
"
"
isBroken
isMixed
isEV
cert
:
null
certificateTransparency
:
null
}
;
}
_getSecurityUI
(
)
{
if
(
window
.
opener
.
gBrowser
)
return
window
.
opener
.
gBrowser
.
securityUI
;
return
null
;
}
viewCookies
(
)
{
var
win
=
Services
.
wm
.
getMostRecentWindow
(
"
Browser
:
Cookies
"
)
;
var
eTLD
;
try
{
eTLD
=
Services
.
eTLD
.
getBaseDomain
(
this
.
uri
)
;
}
catch
(
e
)
{
eTLD
=
this
.
uri
.
asciiHost
;
}
if
(
win
)
{
win
.
gCookiesWindow
.
setFilter
(
eTLD
)
;
win
.
focus
(
)
;
}
else
window
.
openDialog
(
"
chrome
:
/
/
browser
/
content
/
preferences
/
cookies
.
xul
"
"
Browser
:
Cookies
"
"
"
{
filterString
:
eTLD
}
)
;
}
viewPasswords
(
)
{
LoginHelper
.
openPasswordManager
(
window
this
.
_getSecurityInfo
(
)
.
hostName
)
;
}
_cert
:
null
}
;
function
securityOnLoad
(
uri
windowInfo
)
{
security
.
init
(
uri
windowInfo
)
;
var
info
=
security
.
_getSecurityInfo
(
)
;
if
(
!
info
)
{
document
.
getElementById
(
"
securityTab
"
)
.
hidden
=
true
;
return
;
}
document
.
getElementById
(
"
securityTab
"
)
.
hidden
=
false
;
const
pageInfoBundle
=
document
.
getElementById
(
"
pageinfobundle
"
)
;
setText
(
"
security
-
identity
-
domain
-
value
"
info
.
hostName
)
;
var
owner
verifier
validity
;
if
(
info
.
cert
&
&
!
info
.
isBroken
)
{
validity
=
info
.
cert
.
validity
.
notAfterLocalDay
;
if
(
info
.
isEV
)
{
owner
=
info
.
cert
.
organization
;
verifier
=
info
.
cAName
;
}
else
{
owner
=
pageInfoBundle
.
getString
(
"
securityNoOwner
"
)
;
verifier
=
info
.
cAName
|
|
info
.
cert
.
issuerCommonName
|
|
info
.
cert
.
issuerName
;
}
}
else
{
owner
=
pageInfoBundle
.
getString
(
"
securityNoOwner
"
)
;
verifier
=
pageInfoBundle
.
getString
(
"
notset
"
)
;
}
setText
(
"
security
-
identity
-
owner
-
value
"
owner
)
;
setText
(
"
security
-
identity
-
verifier
-
value
"
verifier
)
;
if
(
validity
)
{
setText
(
"
security
-
identity
-
validity
-
value
"
validity
)
;
}
else
{
document
.
getElementById
(
"
security
-
identity
-
validity
-
row
"
)
.
hidden
=
true
;
}
var
viewCert
=
document
.
getElementById
(
"
security
-
view
-
cert
"
)
;
if
(
info
.
cert
)
{
security
.
_cert
=
info
.
cert
;
viewCert
.
collapsed
=
false
;
}
else
viewCert
.
collapsed
=
true
;
var
yesStr
=
pageInfoBundle
.
getString
(
"
yes
"
)
;
var
noStr
=
pageInfoBundle
.
getString
(
"
no
"
)
;
setText
(
"
security
-
privacy
-
cookies
-
value
"
hostHasCookies
(
uri
)
?
yesStr
:
noStr
)
;
setText
(
"
security
-
privacy
-
passwords
-
value
"
realmHasPasswords
(
uri
)
?
yesStr
:
noStr
)
;
var
visitCount
=
previousVisitCount
(
info
.
hostName
)
;
if
(
visitCount
>
1
)
{
setText
(
"
security
-
privacy
-
history
-
value
"
pageInfoBundle
.
getFormattedString
(
"
securityNVisits
"
[
visitCount
.
toLocaleString
(
)
]
)
)
;
}
else
if
(
visitCount
=
=
1
)
{
setText
(
"
security
-
privacy
-
history
-
value
"
pageInfoBundle
.
getString
(
"
securityOneVisit
"
)
)
;
}
else
{
setText
(
"
security
-
privacy
-
history
-
value
"
noStr
)
;
}
const
pkiBundle
=
document
.
getElementById
(
"
pkiBundle
"
)
;
var
hdr
;
var
msg1
;
var
msg2
;
if
(
info
.
isBroken
)
{
if
(
info
.
isMixed
)
{
hdr
=
pkiBundle
.
getString
(
"
pageInfo_MixedContent
"
)
;
msg1
=
pkiBundle
.
getString
(
"
pageInfo_MixedContent2
"
)
;
}
else
{
hdr
=
pkiBundle
.
getFormattedString
(
"
pageInfo_BrokenEncryption
"
[
info
.
encryptionAlgorithm
info
.
encryptionStrength
+
"
"
info
.
version
]
)
;
msg1
=
pkiBundle
.
getString
(
"
pageInfo_WeakCipher
"
)
;
}
msg2
=
pkiBundle
.
getString
(
"
pageInfo_Privacy_None2
"
)
;
}
else
if
(
info
.
encryptionStrength
>
0
)
{
hdr
=
pkiBundle
.
getFormattedString
(
"
pageInfo_EncryptionWithBitsAndProtocol
"
[
info
.
encryptionAlgorithm
info
.
encryptionStrength
+
"
"
info
.
version
]
)
;
msg1
=
pkiBundle
.
getString
(
"
pageInfo_Privacy_Encrypted1
"
)
;
msg2
=
pkiBundle
.
getString
(
"
pageInfo_Privacy_Encrypted2
"
)
;
security
.
_cert
=
info
.
cert
;
}
else
{
hdr
=
pkiBundle
.
getString
(
"
pageInfo_NoEncryption
"
)
;
if
(
info
.
hostName
!
=
null
)
msg1
=
pkiBundle
.
getFormattedString
(
"
pageInfo_Privacy_None1
"
[
info
.
hostName
]
)
;
else
msg1
=
pkiBundle
.
getString
(
"
pageInfo_Privacy_None4
"
)
;
msg2
=
pkiBundle
.
getString
(
"
pageInfo_Privacy_None2
"
)
;
}
setText
(
"
security
-
technical
-
shortform
"
hdr
)
;
setText
(
"
security
-
technical
-
longform1
"
msg1
)
;
setText
(
"
security
-
technical
-
longform2
"
msg2
)
;
const
ctStatus
=
document
.
getElementById
(
"
security
-
technical
-
certificate
-
transparency
"
)
;
if
(
info
.
certificateTransparency
)
{
ctStatus
.
hidden
=
false
;
ctStatus
.
value
=
pkiBundle
.
getString
(
"
pageInfo_CertificateTransparency_
"
+
info
.
certificateTransparency
)
;
}
else
{
ctStatus
.
hidden
=
true
;
}
}
function
setText
(
id
value
)
{
var
element
=
document
.
getElementById
(
id
)
;
if
(
!
element
)
return
;
if
(
element
.
localName
=
=
"
textbox
"
|
|
element
.
localName
=
=
"
label
"
)
element
.
value
=
value
;
else
{
if
(
element
.
hasChildNodes
(
)
)
element
.
firstChild
.
remove
(
)
;
var
textNode
=
document
.
createTextNode
(
value
)
;
element
.
appendChild
(
textNode
)
;
}
}
function
viewCertHelper
(
parent
cert
)
{
if
(
!
cert
)
return
;
var
cd
=
Components
.
classes
[
CERTIFICATEDIALOGS_CONTRACTID
]
.
getService
(
nsICertificateDialogs
)
;
cd
.
viewCert
(
parent
cert
)
;
}
function
hostHasCookies
(
uri
)
{
return
Services
.
cookies
.
countCookiesFromHost
(
uri
.
asciiHost
)
>
0
;
}
function
realmHasPasswords
(
uri
)
{
return
Services
.
logins
.
countLogins
(
uri
.
prePath
"
"
"
"
)
>
0
;
}
function
previousVisitCount
(
host
endTimeReference
)
{
if
(
!
host
)
return
false
;
var
historyService
=
Components
.
classes
[
"
mozilla
.
org
/
browser
/
nav
-
history
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsINavHistoryService
)
;
var
options
=
historyService
.
getNewQueryOptions
(
)
;
options
.
resultType
=
options
.
RESULTS_AS_VISIT
;
var
query
=
historyService
.
getNewQuery
(
)
;
query
.
endTimeReference
=
query
.
TIME_RELATIVE_TODAY
;
query
.
endTime
=
0
;
query
.
domain
=
host
;
var
result
=
historyService
.
executeQuery
(
query
options
)
;
result
.
root
.
containerOpen
=
true
;
var
cc
=
result
.
root
.
childCount
;
result
.
root
.
containerOpen
=
false
;
return
cc
;
}
