var
AboutTabCrashed
=
{
hasReport
:
false
MESSAGES
:
[
"
SetCrashReportAvailable
"
"
CrashReportSent
"
"
UpdateCount
"
]
CLICK_TARGETS
:
[
"
closeTab
"
"
restoreTab
"
"
restoreAll
"
"
sendReport
"
]
get
pageData
(
)
{
delete
this
.
pageData
;
let
URL
=
document
.
documentURI
;
let
queryString
=
URL
.
replace
(
/
^
about
:
tabcrashed
?
e
=
tabcrashed
/
"
"
)
;
let
titleMatch
=
queryString
.
match
(
/
d
=
(
[
^
&
]
*
)
/
)
;
let
URLMatch
=
queryString
.
match
(
/
u
=
(
[
^
&
]
*
)
/
)
;
return
(
this
.
pageData
=
{
title
:
titleMatch
&
&
titleMatch
[
1
]
?
decodeURIComponent
(
titleMatch
[
1
]
)
:
"
"
URL
:
URLMatch
&
&
URLMatch
[
1
]
?
decodeURIComponent
(
URLMatch
[
1
]
)
:
"
"
}
)
;
}
init
(
)
{
addEventListener
(
"
DOMContentLoaded
"
this
)
;
document
.
title
=
this
.
pageData
.
title
;
}
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
UpdateCount
"
:
{
this
.
setMultiple
(
message
.
data
.
count
>
1
)
;
break
;
}
case
"
SetCrashReportAvailable
"
:
{
this
.
onSetCrashReportAvailable
(
message
)
;
break
;
}
case
"
CrashReportSent
"
:
{
this
.
onCrashReportSent
(
)
;
break
;
}
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
DOMContentLoaded
"
:
{
this
.
onDOMContentLoaded
(
)
;
break
;
}
case
"
click
"
:
{
this
.
onClick
(
event
)
;
break
;
}
case
"
input
"
:
{
this
.
onInput
(
event
)
;
break
;
}
}
}
onDOMContentLoaded
(
)
{
this
.
MESSAGES
.
forEach
(
msg
=
>
RPMAddMessageListener
(
msg
this
.
receiveMessage
.
bind
(
this
)
)
)
;
this
.
CLICK_TARGETS
.
forEach
(
targetID
=
>
{
let
el
=
document
.
getElementById
(
targetID
)
;
el
.
addEventListener
(
"
click
"
this
)
;
}
)
;
document
.
getElementById
(
"
email
"
)
.
addEventListener
(
"
input
"
this
)
;
let
event
=
new
CustomEvent
(
"
AboutTabCrashedLoad
"
{
bubbles
:
true
}
)
;
document
.
dispatchEvent
(
event
)
;
RPMSendAsyncMessage
(
"
Load
"
)
;
}
onClick
(
event
)
{
switch
(
event
.
target
.
id
)
{
case
"
closeTab
"
:
{
this
.
sendMessage
(
"
closeTab
"
)
;
break
;
}
case
"
restoreTab
"
:
{
this
.
sendMessage
(
"
restoreTab
"
)
;
break
;
}
case
"
restoreAll
"
:
{
this
.
sendMessage
(
"
restoreAll
"
)
;
break
;
}
case
"
sendReport
"
:
{
this
.
showCrashReportUI
(
event
.
target
.
checked
)
;
break
;
}
}
}
onInput
(
event
)
{
switch
(
event
.
target
.
id
)
{
case
"
email
"
:
{
document
.
getElementById
(
"
emailMe
"
)
.
checked
=
!
!
event
.
target
.
value
;
break
;
}
}
}
onSetCrashReportAvailable
(
message
)
{
let
data
=
message
.
data
;
if
(
data
.
hasReport
)
{
this
.
hasReport
=
true
;
document
.
documentElement
.
classList
.
add
(
"
crashDumpAvailable
"
)
;
document
.
getElementById
(
"
sendReport
"
)
.
checked
=
data
.
sendReport
;
document
.
getElementById
(
"
includeURL
"
)
.
checked
=
data
.
includeURL
;
if
(
data
.
requestEmail
)
{
document
.
getElementById
(
"
requestEmail
"
)
.
hidden
=
false
;
document
.
getElementById
(
"
emailMe
"
)
.
checked
=
data
.
emailMe
;
if
(
data
.
emailMe
)
{
document
.
getElementById
(
"
email
"
)
.
value
=
data
.
email
;
}
}
this
.
showCrashReportUI
(
data
.
sendReport
)
;
}
else
{
this
.
showCrashReportUI
(
false
)
;
}
if
(
data
.
requestAutoSubmit
)
{
document
.
getElementById
(
"
requestAutoSubmit
"
)
.
hidden
=
false
;
}
let
event
=
new
CustomEvent
(
"
AboutTabCrashedReady
"
{
bubbles
:
true
}
)
;
document
.
dispatchEvent
(
event
)
;
}
onCrashReportSent
(
)
{
document
.
documentElement
.
classList
.
remove
(
"
crashDumpAvailable
"
)
;
document
.
documentElement
.
classList
.
add
(
"
crashDumpSubmitted
"
)
;
}
showCrashReportUI
(
shouldShow
)
{
let
options
=
document
.
getElementById
(
"
options
"
)
;
options
.
hidden
=
!
shouldShow
;
}
setMultiple
(
hasMultiple
)
{
let
main
=
document
.
getElementById
(
"
main
"
)
;
main
.
setAttribute
(
"
multiple
"
hasMultiple
)
;
let
restoreTab
=
document
.
getElementById
(
"
restoreTab
"
)
;
if
(
hasMultiple
)
{
restoreTab
.
classList
.
remove
(
"
primary
"
)
;
}
else
{
restoreTab
.
classList
.
add
(
"
primary
"
)
;
}
}
sendMessage
(
messageName
)
{
let
comments
=
"
"
;
let
email
=
"
"
;
let
URL
=
"
"
;
let
sendReport
=
false
;
let
emailMe
=
false
;
let
includeURL
=
false
;
let
autoSubmit
=
false
;
if
(
this
.
hasReport
)
{
sendReport
=
document
.
getElementById
(
"
sendReport
"
)
.
checked
;
if
(
sendReport
)
{
comments
=
document
.
getElementById
(
"
comments
"
)
.
value
.
trim
(
)
;
includeURL
=
document
.
getElementById
(
"
includeURL
"
)
.
checked
;
if
(
includeURL
)
{
URL
=
this
.
pageData
.
URL
.
trim
(
)
;
}
if
(
!
document
.
getElementById
(
"
requestEmail
"
)
.
hidden
)
{
emailMe
=
document
.
getElementById
(
"
emailMe
"
)
.
checked
;
if
(
emailMe
)
{
email
=
document
.
getElementById
(
"
email
"
)
.
value
.
trim
(
)
;
}
}
}
}
let
requestAutoSubmit
=
document
.
getElementById
(
"
requestAutoSubmit
"
)
;
if
(
requestAutoSubmit
.
hidden
)
{
autoSubmit
=
true
;
}
else
{
autoSubmit
=
document
.
getElementById
(
"
autoSubmit
"
)
.
checked
;
}
RPMSendAsyncMessage
(
messageName
{
sendReport
comments
email
emailMe
includeURL
URL
autoSubmit
hasReport
:
this
.
hasReport
}
)
;
}
}
;
AboutTabCrashed
.
init
(
)
;
