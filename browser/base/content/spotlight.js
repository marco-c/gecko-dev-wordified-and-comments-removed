const
browser
=
window
.
docShell
.
chromeEventHandler
;
const
{
document
:
gDoc
XPCOMUtils
}
=
browser
.
ownerGlobal
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AboutWelcomeParent
:
"
resource
:
/
/
/
actors
/
AboutWelcomeParent
.
jsm
"
RemoteL10n
:
"
resource
:
/
/
activity
-
stream
/
lib
/
RemoteL10n
.
jsm
"
}
)
;
const
[
CONFIG
PARAMS
]
=
window
.
arguments
[
0
]
;
function
cloneTemplate
(
id
)
{
return
document
.
getElementById
(
id
)
.
content
.
cloneNode
(
true
)
;
}
function
addStylesheet
(
href
)
{
const
link
=
document
.
head
.
appendChild
(
document
.
createElement
(
"
link
"
)
)
;
link
.
rel
=
"
stylesheet
"
;
link
.
href
=
href
;
}
async
function
renderSpotlight
(
ready
)
{
const
{
template
logo
=
{
}
body
extra
=
{
}
}
=
CONFIG
;
addStylesheet
(
"
chrome
:
/
/
browser
/
skin
/
spotlight
.
css
"
)
;
const
clone
=
cloneTemplate
(
template
)
;
document
.
body
.
classList
.
add
(
template
)
;
let
imageEl
=
clone
.
querySelector
(
"
.
logo
"
)
;
if
(
logo
.
imageURL
)
{
imageEl
.
src
=
logo
.
imageURL
;
}
else
{
imageEl
.
style
.
visibility
=
"
hidden
"
;
}
imageEl
.
style
.
height
=
imageEl
.
style
.
width
=
logo
.
size
;
const
setText
=
(
className
config
)
=
>
{
const
el
=
clone
.
querySelector
(
.
{
className
}
)
;
if
(
!
config
.
label
)
{
el
.
remove
(
)
;
return
;
}
el
.
appendChild
(
RemoteL10n
.
createElement
(
document
"
span
"
{
content
:
config
.
label
}
)
)
;
el
.
style
.
fontSize
=
config
.
size
;
}
;
Object
.
entries
(
body
)
.
forEach
(
entry
=
>
setText
(
.
.
.
entry
)
)
;
const
{
expanded
}
=
extra
;
if
(
expanded
)
{
clone
.
querySelector
(
"
#
content
"
)
.
append
(
cloneTemplate
(
"
extra
-
content
-
expanded
"
)
)
;
setText
(
"
expanded
"
expanded
)
;
const
toggleBtn
=
clone
.
querySelector
(
"
#
learn
-
more
-
toggle
"
)
;
const
toggle
=
(
)
=
>
{
const
toExpand
=
!
!
toggleBtn
.
dataset
.
l10nId
?
.
includes
(
"
collapsed
"
)
;
document
.
l10n
.
setAttributes
(
toggleBtn
toExpand
?
"
spotlight
-
learn
-
more
-
expanded
"
:
"
spotlight
-
learn
-
more
-
collapsed
"
)
;
toggleBtn
.
setAttribute
(
"
aria
-
expanded
"
toExpand
)
;
}
;
toggleBtn
.
addEventListener
(
"
click
"
toggle
)
;
toggle
(
)
;
}
document
.
body
.
appendChild
(
clone
)
;
let
primaryBtn
=
document
.
getElementById
(
"
primary
"
)
;
let
secondaryBtn
=
document
.
getElementById
(
"
secondary
"
)
;
if
(
primaryBtn
)
{
primaryBtn
.
addEventListener
(
"
click
"
(
)
=
>
{
PARAMS
.
primaryBtn
=
true
;
window
.
close
(
)
;
}
)
;
requestAnimationFrame
(
(
)
=
>
{
primaryBtn
.
focus
(
{
focusVisible
:
false
}
)
;
}
)
;
}
if
(
secondaryBtn
)
{
secondaryBtn
.
addEventListener
(
"
click
"
(
)
=
>
{
PARAMS
.
secondaryBtn
=
true
;
window
.
close
(
)
;
}
)
;
}
await
document
.
l10n
.
ready
;
await
document
.
l10n
.
translateElements
(
clone
.
children
)
;
requestAnimationFrame
(
(
)
=
>
requestAnimationFrame
(
ready
)
)
;
}
function
renderMultistage
(
ready
)
{
const
AWParent
=
new
AboutWelcomeParent
(
)
;
const
receive
=
name
=
>
data
=
>
AWParent
.
onContentMessage
(
AWPage
:
{
name
}
data
browser
)
;
window
.
AWGetDefaultSites
=
(
)
=
>
{
}
;
window
.
AWGetFeatureConfig
=
(
)
=
>
CONFIG
;
window
.
AWGetFxAMetricsFlowURI
=
(
)
=
>
{
}
;
window
.
AWGetImportableSites
=
(
)
=
>
"
[
]
"
;
window
.
AWGetRegion
=
receive
(
"
GET_REGION
"
)
;
window
.
AWGetSelectedTheme
=
receive
(
"
GET_SELECTED_THEME
"
)
;
window
.
AWSendEventTelemetry
=
CONFIG
?
.
metrics
=
=
=
"
block
"
?
(
)
=
>
{
}
:
receive
(
"
TELEMETRY_EVENT
"
)
;
window
.
AWSendToDeviceEmailsSupported
=
receive
(
"
SEND_TO_DEVICE_EMAILS_SUPPORTED
"
)
;
window
.
AWSendToParent
=
(
name
data
)
=
>
receive
(
name
)
(
data
)
;
window
.
AWFinish
=
(
)
=
>
{
window
.
close
(
)
;
}
;
window
.
AWWaitForMigrationClose
=
receive
(
"
WAIT_FOR_MIGRATION_CLOSE
"
)
;
addStylesheet
(
"
chrome
:
/
/
activity
-
stream
/
content
/
aboutwelcome
/
aboutwelcome
.
css
"
)
;
document
.
body
.
classList
.
add
(
"
onboardingContainer
"
)
;
document
.
body
.
id
=
"
root
"
;
const
{
classList
}
=
browser
.
closest
(
"
.
dialogBox
"
)
;
classList
.
add
(
"
noShadow
"
"
fullScreen
"
)
;
addEventListener
(
"
pagehide
"
(
)
=
>
classList
.
remove
(
"
noShadow
"
"
fullScreen
"
)
)
;
document
.
head
.
appendChild
(
document
.
createElement
(
"
script
"
)
)
.
src
=
"
resource
:
/
/
activity
-
stream
/
aboutwelcome
/
aboutwelcome
.
bundle
.
js
"
;
ready
(
)
;
}
document
.
mozSubdialogReady
=
new
Promise
(
resolve
=
>
document
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
(
CONFIG
.
template
=
=
=
"
multistage
"
?
renderMultistage
:
renderSpotlight
)
(
resolve
)
{
once
:
true
}
)
)
;
