const
browser
=
window
.
docShell
.
chromeEventHandler
;
const
{
document
:
gDoc
XPCOMUtils
}
=
browser
.
ownerGlobal
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AboutWelcomeParent
:
"
resource
:
/
/
/
actors
/
AboutWelcomeParent
.
sys
.
mjs
"
E10SUtils
:
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
sys
.
mjs
"
}
)
;
const
CONFIG
=
window
.
arguments
[
0
]
;
function
addStylesheet
(
href
)
{
const
link
=
document
.
head
.
appendChild
(
document
.
createElement
(
"
link
"
)
)
;
link
.
rel
=
"
stylesheet
"
;
link
.
href
=
href
;
}
function
disableEscClose
(
)
{
addEventListener
(
"
keydown
"
event
=
>
{
if
(
event
.
key
=
=
=
"
Escape
"
)
{
event
.
preventDefault
(
)
;
event
.
stopPropagation
(
)
;
}
}
)
;
}
function
renderMultistage
(
ready
)
{
const
AWParent
=
new
AboutWelcomeParent
(
)
;
const
receive
=
name
=
>
data
=
>
AWParent
.
onContentMessage
(
AWPage
:
{
name
}
data
browser
)
;
window
.
AWGetFeatureConfig
=
(
)
=
>
CONFIG
;
window
.
AWGetSelectedTheme
=
receive
(
"
GET_SELECTED_THEME
"
)
;
window
.
AWGetInstalledAddons
=
receive
(
"
GET_INSTALLED_ADDONS
"
)
;
window
.
AWSelectTheme
=
data
=
>
receive
(
"
SELECT_THEME
"
)
(
data
?
.
toUpperCase
(
)
)
;
if
(
CONFIG
?
.
metrics
!
=
=
"
block
"
)
{
window
.
AWSendEventTelemetry
=
receive
(
"
TELEMETRY_EVENT
"
)
;
}
window
.
AWSendToDeviceEmailsSupported
=
receive
(
"
SEND_TO_DEVICE_EMAILS_SUPPORTED
"
)
;
window
.
AWAddScreenImpression
=
receive
(
"
ADD_SCREEN_IMPRESSION
"
)
;
window
.
AWSendToParent
=
(
name
data
)
=
>
receive
(
name
)
(
data
)
;
window
.
AWFinish
=
(
)
=
>
{
window
.
close
(
)
;
}
;
window
.
AWWaitForMigrationClose
=
receive
(
"
WAIT_FOR_MIGRATION_CLOSE
"
)
;
window
.
AWEvaluateScreenTargeting
=
receive
(
"
EVALUATE_SCREEN_TARGETING
"
)
;
window
.
AWEvaluateAttributeTargeting
=
receive
(
"
EVALUATE_ATTRIBUTE_TARGETING
"
)
;
window
.
AWPredictRemoteType
=
(
{
browserEl
url
}
)
=
>
{
const
originAttributes
=
E10SUtils
.
predictOriginAttributes
(
{
browser
:
browserEl
}
)
;
const
loadContext
=
window
.
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
;
const
useRemoteTabs
=
loadContext
.
useRemoteTabs
;
const
useRemoteSubframes
=
loadContext
.
useRemoteSubframes
;
return
E10SUtils
.
getRemoteTypeForURI
(
url
useRemoteTabs
useRemoteSubframes
E10SUtils
.
DEFAULT_REMOTE_TYPE
null
originAttributes
)
;
}
;
addStylesheet
(
"
chrome
:
/
/
browser
/
content
/
aboutwelcome
/
aboutwelcome
.
css
"
)
;
document
.
body
.
classList
.
add
(
"
onboardingContainer
"
)
;
document
.
body
.
id
=
"
multi
-
stage
-
message
-
root
"
;
document
.
body
.
dataset
.
page
=
"
spotlight
"
;
const
box
=
browser
.
closest
(
"
.
dialogBox
"
)
;
const
dialog
=
box
.
closest
(
"
dialog
"
)
;
box
.
classList
.
add
(
"
spotlightBox
"
)
;
dialog
?
.
classList
.
add
(
"
spotlight
"
)
;
box
.
setAttribute
(
"
sizeto
"
"
available
"
)
;
addEventListener
(
"
pagehide
"
(
)
=
>
{
box
.
classList
.
remove
(
"
spotlightBox
"
)
;
dialog
?
.
classList
.
remove
(
"
spotlight
"
)
;
box
.
removeAttribute
(
"
sizeto
"
)
;
}
)
;
if
(
CONFIG
?
.
disableEscClose
)
{
disableEscClose
(
)
;
}
document
.
head
.
appendChild
(
document
.
createElement
(
"
script
"
)
)
.
src
=
"
chrome
:
/
/
browser
/
content
/
aboutwelcome
/
aboutwelcome
.
bundle
.
js
"
;
ready
(
)
;
}
document
.
mozSubdialogReady
=
new
Promise
(
resolve
=
>
document
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
renderMultistage
(
resolve
)
{
once
:
true
}
)
)
;
