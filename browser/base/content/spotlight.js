const
browser
=
window
.
docShell
.
chromeEventHandler
;
const
{
document
:
gDoc
XPCOMUtils
}
=
browser
.
ownerGlobal
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AboutWelcomeParent
:
"
resource
:
/
/
/
actors
/
AboutWelcomeParent
.
jsm
"
}
)
;
const
[
CONFIG
]
=
window
.
arguments
[
0
]
;
function
addStylesheet
(
href
)
{
const
link
=
document
.
head
.
appendChild
(
document
.
createElement
(
"
link
"
)
)
;
link
.
rel
=
"
stylesheet
"
;
link
.
href
=
href
;
}
function
renderMultistage
(
ready
)
{
const
AWParent
=
new
AboutWelcomeParent
(
)
;
const
receive
=
name
=
>
data
=
>
AWParent
.
onContentMessage
(
AWPage
:
{
name
}
data
browser
)
;
window
.
AWGetFeatureConfig
=
(
)
=
>
CONFIG
;
window
.
AWGetRegion
=
receive
(
"
GET_REGION
"
)
;
window
.
AWGetSelectedTheme
=
receive
(
"
GET_SELECTED_THEME
"
)
;
window
.
AWSelectTheme
=
data
=
>
receive
(
"
SELECT_THEME
"
)
(
data
?
.
toUpperCase
(
)
)
;
if
(
CONFIG
?
.
metrics
!
=
=
"
block
"
)
{
window
.
AWSendEventTelemetry
=
receive
(
"
TELEMETRY_EVENT
"
)
;
}
window
.
AWSendToDeviceEmailsSupported
=
receive
(
"
SEND_TO_DEVICE_EMAILS_SUPPORTED
"
)
;
window
.
AWSendToParent
=
(
name
data
)
=
>
receive
(
name
)
(
data
)
;
window
.
AWFinish
=
(
)
=
>
{
window
.
close
(
)
;
}
;
window
.
AWWaitForMigrationClose
=
receive
(
"
WAIT_FOR_MIGRATION_CLOSE
"
)
;
addStylesheet
(
"
chrome
:
/
/
activity
-
stream
/
content
/
aboutwelcome
/
aboutwelcome
.
css
"
)
;
document
.
body
.
classList
.
add
(
"
onboardingContainer
"
)
;
document
.
body
.
id
=
"
root
"
;
const
box
=
browser
.
closest
(
"
.
dialogBox
"
)
;
const
dialog
=
box
.
closest
(
"
dialog
"
)
;
box
.
classList
.
add
(
"
spotlightBox
"
)
;
dialog
?
.
classList
.
add
(
"
spotlight
"
)
;
box
.
setAttribute
(
"
sizeto
"
"
available
"
)
;
addEventListener
(
"
pagehide
"
(
)
=
>
{
box
.
classList
.
remove
(
"
spotlightBox
"
)
;
dialog
?
.
classList
.
remove
(
"
spotlight
"
)
;
box
.
removeAttribute
(
"
sizeto
"
)
;
}
)
;
document
.
head
.
appendChild
(
document
.
createElement
(
"
script
"
)
)
.
src
=
"
resource
:
/
/
activity
-
stream
/
aboutwelcome
/
aboutwelcome
.
bundle
.
js
"
;
ready
(
)
;
}
document
.
mozSubdialogReady
=
new
Promise
(
resolve
=
>
document
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
renderMultistage
(
resolve
)
{
once
:
true
}
)
)
;
