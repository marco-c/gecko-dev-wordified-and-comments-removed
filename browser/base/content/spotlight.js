const
{
document
:
gDoc
ChromeUtils
}
=
window
.
docShell
.
chromeEventHandler
.
ownerGlobal
;
const
{
RemoteL10n
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
RemoteL10n
.
jsm
"
)
;
function
cloneTemplate
(
id
)
{
return
document
.
getElementById
(
id
)
.
content
.
cloneNode
(
true
)
;
}
async
function
renderSpotlight
(
ready
)
{
const
[
{
template
logo
=
{
}
body
extra
=
{
}
}
params
]
=
window
.
arguments
[
0
]
;
const
clone
=
cloneTemplate
(
template
)
;
document
.
body
.
classList
.
add
(
template
)
;
let
imageEl
=
clone
.
querySelector
(
"
.
logo
"
)
;
imageEl
.
src
=
logo
.
imageURL
?
?
window
.
arguments
[
0
]
[
0
]
.
logoImageURL
;
imageEl
.
style
.
height
=
imageEl
.
style
.
width
=
logo
.
size
;
const
setText
=
(
className
config
)
=
>
{
const
el
=
clone
.
querySelector
(
.
{
className
}
)
;
if
(
!
config
.
label
)
{
el
.
remove
(
)
;
return
;
}
el
.
appendChild
(
RemoteL10n
.
createElement
(
document
"
span
"
{
content
:
config
.
label
}
)
)
;
el
.
style
.
fontSize
=
config
.
size
;
}
;
Object
.
entries
(
body
)
.
forEach
(
entry
=
>
setText
(
.
.
.
entry
)
)
;
const
{
expanded
}
=
extra
;
if
(
expanded
)
{
clone
.
querySelector
(
"
#
content
"
)
.
append
(
cloneTemplate
(
"
extra
-
content
-
expanded
"
)
)
;
setText
(
"
expanded
"
expanded
)
;
const
toggleBtn
=
clone
.
querySelector
(
"
#
learn
-
more
-
toggle
"
)
;
const
toggle
=
(
)
=
>
{
const
toExpand
=
!
!
toggleBtn
.
dataset
.
l10nId
?
.
includes
(
"
collapsed
"
)
;
document
.
l10n
.
setAttributes
(
toggleBtn
toExpand
?
"
spotlight
-
learn
-
more
-
expanded
"
:
"
spotlight
-
learn
-
more
-
collapsed
"
)
;
toggleBtn
.
setAttribute
(
"
aria
-
expanded
"
toExpand
)
;
}
;
toggleBtn
.
addEventListener
(
"
click
"
toggle
)
;
toggle
(
)
;
}
document
.
body
.
appendChild
(
clone
)
;
let
primaryBtn
=
document
.
getElementById
(
"
primary
"
)
;
let
secondaryBtn
=
document
.
getElementById
(
"
secondary
"
)
;
if
(
primaryBtn
)
{
primaryBtn
.
addEventListener
(
"
click
"
(
)
=
>
{
params
.
primaryBtn
=
true
;
window
.
close
(
)
;
}
)
;
requestAnimationFrame
(
(
)
=
>
{
primaryBtn
.
focus
(
{
preventFocusRing
:
true
}
)
;
}
)
;
}
if
(
secondaryBtn
)
{
secondaryBtn
.
addEventListener
(
"
click
"
(
)
=
>
{
params
.
secondaryBtn
=
true
;
window
.
close
(
)
;
}
)
;
}
await
document
.
l10n
.
ready
;
await
document
.
l10n
.
translateElements
(
clone
.
children
)
;
requestAnimationFrame
(
(
)
=
>
requestAnimationFrame
(
ready
)
)
;
}
document
.
mozSubdialogReady
=
new
Promise
(
resolve
=
>
document
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
renderSpotlight
(
resolve
)
{
once
:
true
}
)
)
;
