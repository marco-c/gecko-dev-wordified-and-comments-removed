const
{
document
:
gDoc
ChromeUtils
}
=
window
.
docShell
.
chromeEventHandler
.
ownerGlobal
;
const
{
RemoteL10n
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
activity
-
stream
/
lib
/
RemoteL10n
.
jsm
"
)
;
function
renderSpotlight
(
)
{
const
[
content
params
]
=
window
.
arguments
[
0
]
;
const
template
=
document
.
querySelector
(
#
{
content
?
.
template
}
)
;
const
clone
=
template
.
content
.
cloneNode
(
true
)
;
document
.
body
.
classList
.
add
(
content
.
template
)
;
let
imageEl
=
clone
.
querySelector
(
"
.
logo
"
)
;
imageEl
.
src
=
content
.
logoImageURL
;
for
(
let
textProp
in
content
.
body
)
{
let
el
=
clone
.
querySelector
(
.
{
textProp
}
)
;
if
(
!
content
.
body
[
textProp
]
?
.
label
)
{
el
.
remove
(
)
;
continue
;
}
el
.
appendChild
(
RemoteL10n
.
createElement
(
this
.
window
.
document
"
span
"
{
content
:
content
.
body
[
textProp
]
.
label
}
)
)
;
}
document
.
body
.
appendChild
(
clone
)
;
let
primaryBtn
=
document
.
getElementById
(
"
primary
"
)
;
let
secondaryBtn
=
document
.
getElementById
(
"
secondary
"
)
;
if
(
primaryBtn
)
{
primaryBtn
.
addEventListener
(
"
click
"
(
)
=
>
{
params
.
primaryBtn
=
true
;
window
.
close
(
)
;
}
)
;
requestAnimationFrame
(
(
)
=
>
{
primaryBtn
.
focus
(
{
preventFocusRing
:
true
}
)
;
}
)
;
}
if
(
secondaryBtn
)
{
secondaryBtn
.
addEventListener
(
"
click
"
(
)
=
>
{
params
.
secondaryBtn
=
true
;
window
.
close
(
)
;
}
)
;
}
}
renderSpotlight
(
)
;
