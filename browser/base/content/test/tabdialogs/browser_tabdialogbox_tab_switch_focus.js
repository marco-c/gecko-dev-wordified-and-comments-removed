"
use
strict
"
;
const
TEST_ROOT_CHROME
=
getRootDirectory
(
gTestPath
)
;
const
TEST_DIALOG_PATH
=
TEST_ROOT_CHROME
+
"
subdialog
.
xhtml
"
;
add_task
(
async
function
test_tabdialogbox_tab_switch_focus
(
)
{
let
tabPromises
=
[
]
;
for
(
let
i
=
0
;
i
<
3
;
i
+
=
1
)
{
tabPromises
.
push
(
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
com
"
true
)
)
;
}
let
tabs
=
await
Promise
.
all
(
tabPromises
)
;
let
dialogs
=
[
]
;
for
(
let
i
=
0
;
i
<
2
;
i
+
=
1
)
{
let
dialogBox
=
gBrowser
.
getTabDialogBox
(
tabs
[
i
]
.
linkedBrowser
)
;
dialogBox
.
open
(
TEST_DIALOG_PATH
)
;
dialogs
.
push
(
dialogBox
.
_dialogManager
.
_topDialog
)
;
}
await
Promise
.
all
(
[
dialogs
[
0
]
.
_dialogReady
dialogs
[
1
]
.
_dialogReady
]
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
0
]
)
;
let
dialogTextbox
=
dialogs
[
0
]
.
_frame
.
contentDocument
.
querySelector
(
"
#
textbox
"
)
;
is
(
Services
.
focus
.
focusedElement
dialogTextbox
"
Dialog
textbox
is
focused
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
1
]
)
;
let
dialogTextbox2
=
dialogs
[
1
]
.
_frame
.
contentDocument
.
querySelector
(
"
#
textbox
"
)
;
is
(
Services
.
focus
.
focusedElement
dialogTextbox2
"
Dialog2
textbox
is
focused
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabs
[
2
]
)
;
is
(
Services
.
focus
.
focusedElement
tabs
[
2
]
.
linkedBrowser
"
Top
level
browser
is
focused
"
)
;
tabs
.
forEach
(
tab
=
>
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
}
)
;
