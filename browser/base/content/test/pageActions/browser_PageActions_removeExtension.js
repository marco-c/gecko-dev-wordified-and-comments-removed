"
use
strict
"
;
const
TELEMETRY_EVENTS_FILTERS
=
{
category
:
"
addonsManager
"
method
:
"
action
"
}
;
add_setup
(
async
function
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
http
:
/
/
example
.
com
/
"
}
)
;
let
{
prompt
}
=
Services
;
registerCleanupFunction
(
async
(
)
=
>
{
BrowserTestUtils
.
removeTab
(
tab
)
;
Services
.
prompt
=
prompt
;
}
)
;
}
)
;
add_task
(
async
function
contextMenu_removeExtension_panel
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
name
:
"
Test
contextMenu
"
page_action
:
{
show_matches
:
[
"
<
all_urls
>
"
]
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
extension
.
startup
(
)
;
let
actionId
=
ExtensionCommon
.
makeWidgetId
(
extension
.
id
)
;
const
url
=
"
data
:
text
/
html
<
h1
>
A
Page
<
/
h1
>
"
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
SimpleTest
.
promiseFocus
(
win
)
;
BrowserTestUtils
.
loadURIString
(
win
.
gBrowser
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
win
.
gBrowser
.
selectedBrowser
)
;
info
(
"
Shrink
the
window
if
necessary
check
the
meatball
menu
is
visible
"
)
;
let
originalOuterWidth
=
win
.
outerWidth
;
await
promiseStableResize
(
500
win
)
;
await
promiseAnimationFrame
(
win
)
;
let
meatballButton
=
win
.
document
.
getElementById
(
"
pageActionButton
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
meatballButton
)
)
;
await
promisePageActionPanelOpen
(
win
)
;
info
(
"
Open
the
context
menu
"
)
;
let
panelButton
=
win
.
BrowserPageActions
.
panelButtonNodeForActionID
(
actionId
)
;
let
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
win
)
;
EventUtils
.
synthesizeMouseAtCenter
(
panelButton
{
type
:
"
contextmenu
"
button
:
2
}
win
)
;
let
contextMenu
=
await
contextMenuPromise
;
let
removeExtensionItem
=
getRemoveExtensionItem
(
win
)
;
Assert
.
ok
(
removeExtensionItem
"
'
Remove
'
item
exists
"
)
;
Assert
.
ok
(
!
removeExtensionItem
.
hidden
"
'
Remove
'
item
is
visible
"
)
;
Assert
.
ok
(
!
removeExtensionItem
.
disabled
"
'
Remove
'
item
is
not
disabled
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
win
)
;
let
addonUninstalledPromise
=
promiseAddonUninstalled
(
extension
.
id
)
;
mockPromptService
(
)
;
contextMenu
.
activateItem
(
removeExtensionItem
)
;
await
Promise
.
all
(
[
contextMenuPromise
addonUninstalledPromise
]
)
;
await
extension
.
unload
(
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
object
:
"
pageAction
"
value
:
"
accepted
"
extra
:
{
addonId
:
extension
.
id
action
:
"
uninstall
"
}
}
]
TELEMETRY_EVENTS_FILTERS
)
;
await
promiseStableResize
(
originalOuterWidth
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
contextMenu_removeExtension_urlbar
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
name
:
"
Test
contextMenu
"
page_action
:
{
show_matches
:
[
"
<
all_urls
>
"
]
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
extension
.
startup
(
)
;
await
promiseAnimationFrame
(
)
;
let
actionId
=
ExtensionCommon
.
makeWidgetId
(
extension
.
id
)
;
let
urlbarButton
=
BrowserPageActions
.
urlbarButtonNodeForActionID
(
actionId
)
;
let
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
urlbarButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
let
contextMenu
=
await
contextMenuPromise
;
let
menuItems
=
collectContextMenuItems
(
)
;
Assert
.
equal
(
menuItems
.
length
2
"
Context
menu
has
two
children
"
)
;
let
removeExtensionItem
=
getRemoveExtensionItem
(
)
;
Assert
.
ok
(
removeExtensionItem
"
'
Remove
'
item
exists
"
)
;
Assert
.
ok
(
!
removeExtensionItem
.
hidden
"
'
Remove
'
item
is
visible
"
)
;
Assert
.
ok
(
!
removeExtensionItem
.
disabled
"
'
Remove
'
item
is
not
disabled
"
)
;
let
manageExtensionItem
=
getManageExtensionItem
(
)
;
Assert
.
ok
(
manageExtensionItem
"
'
Manage
'
item
exists
"
)
;
Assert
.
ok
(
!
manageExtensionItem
.
hidden
"
'
Manage
'
item
is
visible
"
)
;
Assert
.
ok
(
!
manageExtensionItem
.
disabled
"
'
Manage
'
item
is
not
disabled
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
)
;
let
promptService
=
mockPromptService
(
)
;
let
promptCancelledPromise
=
new
Promise
(
resolve
=
>
{
promptService
.
confirmEx
=
(
)
=
>
resolve
(
)
;
}
)
;
contextMenu
.
activateItem
(
removeExtensionItem
)
;
await
Promise
.
all
(
[
contextMenuPromise
promptCancelledPromise
]
)
;
await
extension
.
unload
(
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
object
:
"
pageAction
"
value
:
"
cancelled
"
extra
:
{
addonId
:
extension
.
id
action
:
"
uninstall
"
}
}
]
TELEMETRY_EVENTS_FILTERS
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
type
:
"
mousemove
"
}
)
;
gURLBar
.
focus
(
)
;
}
)
;
add_task
(
async
function
contextMenu_removeExtension_disabled_in_urlbar
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
name
:
"
Test
contextMenu
"
page_action
:
{
show_matches
:
[
"
<
all_urls
>
"
]
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
extension
.
startup
(
)
;
await
promiseAnimationFrame
(
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
{
policies
:
{
Extensions
:
{
Locked
:
[
extension
.
id
]
}
}
}
)
;
let
actionId
=
ExtensionCommon
.
makeWidgetId
(
extension
.
id
)
;
let
urlbarButton
=
BrowserPageActions
.
urlbarButtonNodeForActionID
(
actionId
)
;
let
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
urlbarButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
let
contextMenu
=
await
contextMenuPromise
;
let
menuItems
=
collectContextMenuItems
(
)
;
Assert
.
equal
(
menuItems
.
length
2
"
Context
menu
has
two
children
"
)
;
let
removeExtensionItem
=
getRemoveExtensionItem
(
)
;
Assert
.
ok
(
removeExtensionItem
"
'
Remove
'
item
exists
"
)
;
Assert
.
ok
(
!
removeExtensionItem
.
hidden
"
'
Remove
'
item
is
visible
"
)
;
Assert
.
ok
(
removeExtensionItem
.
disabled
"
'
Remove
'
item
is
disabled
"
)
;
let
manageExtensionItem
=
getManageExtensionItem
(
)
;
Assert
.
ok
(
manageExtensionItem
"
'
Manage
'
item
exists
"
)
;
Assert
.
ok
(
!
manageExtensionItem
.
hidden
"
'
Manage
'
item
is
visible
"
)
;
Assert
.
ok
(
!
manageExtensionItem
.
disabled
"
'
Manage
'
item
is
not
disabled
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
)
;
contextMenu
.
hidePopup
(
)
;
await
contextMenuPromise
;
await
extension
.
unload
(
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
"
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
type
:
"
mousemove
"
}
)
;
gURLBar
.
focus
(
)
;
}
)
;
add_task
(
async
function
contextMenu_removeExtension_disabled_in_panel
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
name
:
"
Test
contextMenu
"
page_action
:
{
show_matches
:
[
"
<
all_urls
>
"
]
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
extension
.
startup
(
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
{
policies
:
{
Extensions
:
{
Locked
:
[
extension
.
id
]
}
}
}
)
;
let
actionId
=
ExtensionCommon
.
makeWidgetId
(
extension
.
id
)
;
const
url
=
"
data
:
text
/
html
<
h1
>
A
Page
<
/
h1
>
"
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
SimpleTest
.
promiseFocus
(
win
)
;
BrowserTestUtils
.
loadURIString
(
win
.
gBrowser
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
win
.
gBrowser
.
selectedBrowser
)
;
info
(
"
Shrink
the
window
if
necessary
check
the
meatball
menu
is
visible
"
)
;
let
originalOuterWidth
=
win
.
outerWidth
;
await
promiseStableResize
(
500
win
)
;
await
promiseAnimationFrame
(
win
)
;
let
meatballButton
=
win
.
document
.
getElementById
(
"
pageActionButton
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_visible
(
meatballButton
)
)
;
await
promisePageActionPanelOpen
(
win
)
;
info
(
"
Open
the
context
menu
"
)
;
let
panelButton
=
win
.
BrowserPageActions
.
panelButtonNodeForActionID
(
actionId
)
;
let
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
win
)
;
EventUtils
.
synthesizeMouseAtCenter
(
panelButton
{
type
:
"
contextmenu
"
button
:
2
}
win
)
;
let
contextMenu
=
await
contextMenuPromise
;
let
removeExtensionItem
=
getRemoveExtensionItem
(
win
)
;
Assert
.
ok
(
removeExtensionItem
"
'
Remove
'
item
exists
"
)
;
Assert
.
ok
(
!
removeExtensionItem
.
hidden
"
'
Remove
'
item
is
visible
"
)
;
Assert
.
ok
(
removeExtensionItem
.
disabled
"
'
Remove
'
item
is
disabled
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
win
)
;
contextMenu
.
hidePopup
(
)
;
await
contextMenuPromise
;
await
extension
.
unload
(
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
"
"
)
;
await
promiseStableResize
(
originalOuterWidth
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
function
promiseAddonUninstalled
(
addonId
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
}
;
listener
.
onUninstalled
=
addon
=
>
{
if
(
addon
.
id
=
=
addonId
)
{
AddonManager
.
removeAddonListener
(
listener
)
;
resolve
(
)
;
}
}
;
AddonManager
.
addAddonListener
(
listener
)
;
}
)
;
}
function
mockPromptService
(
)
{
let
promptService
=
{
_response
:
0
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIPromptService
"
]
)
confirmEx
:
(
)
=
>
promptService
.
_response
}
;
Services
.
prompt
=
promptService
;
return
promptService
;
}
function
getRemoveExtensionItem
(
win
=
window
)
{
return
win
.
document
.
querySelector
(
"
#
pageActionContextMenu
>
menuitem
[
label
=
'
Remove
Extension
'
]
"
)
;
}
function
getManageExtensionItem
(
win
=
window
)
{
return
win
.
document
.
querySelector
(
"
#
pageActionContextMenu
>
menuitem
[
label
=
'
Manage
Extension
'
]
"
)
;
}
function
collectContextMenuItems
(
win
=
window
)
{
let
contextMenu
=
win
.
document
.
getElementById
(
"
pageActionContextMenu
"
)
;
return
Array
.
prototype
.
filter
.
call
(
contextMenu
.
children
node
=
>
{
return
win
.
getComputedStyle
(
node
)
.
visibility
=
=
"
visible
"
;
}
)
;
}
