"
use
strict
"
;
const
{
EnterprisePolicyTesting
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
EnterprisePolicyTesting
.
jsm
"
)
;
const
{
ExtensionCommon
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionCommon
.
jsm
"
)
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
const
TELEMETRY_EVENTS_FILTERS
=
{
category
:
"
addonsManager
"
method
:
"
action
"
}
;
add_task
(
async
function
init
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
http
:
/
/
example
.
com
/
"
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
}
)
;
add_task
(
async
function
contextMenu_removeExtension_panel
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
name
:
"
Test
contextMenu
"
page_action
:
{
show_matches
:
[
"
<
all_urls
>
"
]
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
extension
.
startup
(
)
;
let
actionId
=
ExtensionCommon
.
makeWidgetId
(
extension
.
id
)
;
await
promisePageActionPanelOpen
(
)
;
let
panelButton
=
BrowserPageActions
.
panelButtonNodeForActionID
(
actionId
)
;
let
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
panelButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
contextMenuPromise
;
let
removeExtensionItem
=
getRemoveExtensionItem
(
)
;
Assert
.
ok
(
removeExtensionItem
"
'
Remove
'
item
exists
"
)
;
Assert
.
ok
(
!
removeExtensionItem
.
hidden
"
'
Remove
'
item
is
visible
"
)
;
Assert
.
ok
(
!
removeExtensionItem
.
disabled
"
'
Remove
'
item
is
not
disabled
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
)
;
let
addonUninstalledPromise
=
promiseAddonUninstalled
(
extension
.
id
)
;
mockPromptService
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
removeExtensionItem
{
}
)
;
await
Promise
.
all
(
[
contextMenuPromise
addonUninstalledPromise
]
)
;
await
extension
.
unload
(
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
object
:
"
pageAction
"
value
:
"
accepted
"
extra
:
{
addonId
:
extension
.
id
action
:
"
uninstall
"
}
}
]
TELEMETRY_EVENTS_FILTERS
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
type
:
"
mousemove
"
}
)
;
gURLBar
.
focus
(
)
;
}
)
;
add_task
(
async
function
contextMenu_removeExtension_urlbar
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
name
:
"
Test
contextMenu
"
page_action
:
{
show_matches
:
[
"
<
all_urls
>
"
]
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
extension
.
startup
(
)
;
await
promiseAnimationFrame
(
)
;
let
actionId
=
ExtensionCommon
.
makeWidgetId
(
extension
.
id
)
;
let
urlbarButton
=
BrowserPageActions
.
urlbarButtonNodeForActionID
(
actionId
)
;
let
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
urlbarButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
contextMenuPromise
;
let
removeExtensionItem
=
getRemoveExtensionItem
(
)
;
Assert
.
ok
(
removeExtensionItem
"
'
Remove
'
item
exists
"
)
;
Assert
.
ok
(
!
removeExtensionItem
.
hidden
"
'
Remove
'
item
is
visible
"
)
;
Assert
.
ok
(
!
removeExtensionItem
.
disabled
"
'
Remove
'
item
is
not
disabled
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
)
;
let
promptService
=
mockPromptService
(
)
;
let
promptCancelledPromise
=
new
Promise
(
resolve
=
>
{
promptService
.
confirmEx
=
(
)
=
>
resolve
(
)
;
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
removeExtensionItem
{
}
)
;
await
Promise
.
all
(
[
contextMenuPromise
promptCancelledPromise
]
)
;
await
extension
.
unload
(
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
object
:
"
pageAction
"
value
:
"
cancelled
"
extra
:
{
addonId
:
extension
.
id
action
:
"
uninstall
"
}
}
]
TELEMETRY_EVENTS_FILTERS
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
type
:
"
mousemove
"
}
)
;
gURLBar
.
focus
(
)
;
}
)
;
add_task
(
async
function
contextMenu_removeExtension_disabled_in_panel
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
name
:
"
Test
contextMenu
"
page_action
:
{
show_matches
:
[
"
<
all_urls
>
"
]
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
extension
.
startup
(
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
{
policies
:
{
Extensions
:
{
Locked
:
[
extension
.
id
]
}
}
}
)
;
let
actionId
=
ExtensionCommon
.
makeWidgetId
(
extension
.
id
)
;
await
promisePageActionPanelOpen
(
)
;
let
panelButton
=
BrowserPageActions
.
panelButtonNodeForActionID
(
actionId
)
;
let
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
panelButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
contextMenuPromise
;
let
removeExtensionItem
=
getRemoveExtensionItem
(
)
;
Assert
.
ok
(
removeExtensionItem
"
'
Remove
'
item
exists
"
)
;
Assert
.
ok
(
!
removeExtensionItem
.
hidden
"
'
Remove
'
item
is
visible
"
)
;
Assert
.
ok
(
removeExtensionItem
.
disabled
"
'
Remove
'
item
is
disabled
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
contextMenuPromise
;
await
extension
.
unload
(
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
"
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
type
:
"
mousemove
"
}
)
;
gURLBar
.
focus
(
)
;
}
)
;
add_task
(
async
function
contextMenu_removeExtension_disabled_in_urlbar
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
manifest
:
{
name
:
"
Test
contextMenu
"
page_action
:
{
show_matches
:
[
"
<
all_urls
>
"
]
}
}
useAddonManager
:
"
temporary
"
}
)
;
await
extension
.
startup
(
)
;
await
promiseAnimationFrame
(
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
{
policies
:
{
Extensions
:
{
Locked
:
[
extension
.
id
]
}
}
}
)
;
let
actionId
=
ExtensionCommon
.
makeWidgetId
(
extension
.
id
)
;
let
urlbarButton
=
BrowserPageActions
.
urlbarButtonNodeForActionID
(
actionId
)
;
let
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
urlbarButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
contextMenuPromise
;
let
removeExtensionItem
=
getRemoveExtensionItem
(
)
;
Assert
.
ok
(
removeExtensionItem
"
'
Remove
'
item
exists
"
)
;
Assert
.
ok
(
!
removeExtensionItem
.
hidden
"
'
Remove
'
item
is
visible
"
)
;
Assert
.
ok
(
removeExtensionItem
.
disabled
"
'
Remove
'
item
is
disabled
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
contextMenuPromise
;
await
extension
.
unload
(
)
;
await
EnterprisePolicyTesting
.
setupPolicyEngineWithJson
(
"
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
type
:
"
mousemove
"
}
)
;
gURLBar
.
focus
(
)
;
}
)
;
function
promiseAddonUninstalled
(
addonId
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
}
;
listener
.
onUninstalled
=
addon
=
>
{
if
(
addon
.
id
=
=
addonId
)
{
AddonManager
.
removeAddonListener
(
listener
)
;
resolve
(
)
;
}
}
;
AddonManager
.
addAddonListener
(
listener
)
;
}
)
;
}
function
mockPromptService
(
)
{
let
{
prompt
}
=
Services
;
let
promptService
=
{
_response
:
0
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIPromptService
]
)
confirmEx
:
(
)
=
>
promptService
.
_response
}
;
Services
.
prompt
=
promptService
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prompt
=
prompt
;
}
)
;
return
promptService
;
}
function
getRemoveExtensionItem
(
)
{
return
document
.
querySelector
(
"
#
pageActionContextMenu
>
menuitem
[
label
=
'
Remove
Extension
'
]
"
)
;
}
async
function
promiseAnimationFrame
(
win
=
window
)
{
await
new
Promise
(
resolve
=
>
win
.
requestAnimationFrame
(
resolve
)
)
;
let
{
tm
}
=
Services
;
return
new
Promise
(
resolve
=
>
tm
.
dispatchToMainThread
(
resolve
)
)
;
}
