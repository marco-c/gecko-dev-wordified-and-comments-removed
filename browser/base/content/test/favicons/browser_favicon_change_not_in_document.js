"
use
strict
"
;
const
TEST_ROOT
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
base
/
content
/
test
/
favicons
/
"
;
const
TEST_URL
=
TEST_ROOT
+
"
file_favicon_change_not_in_document
.
html
"
;
function
runInDoc
(
browser
task
)
{
return
ContentTask
.
spawn
(
browser
(
{
task
.
toString
(
)
}
)
(
)
;
scriptStr
=
>
{
let
script
=
content
.
document
.
createElement
(
"
script
"
)
;
script
.
textContent
=
scriptStr
;
content
.
document
.
body
.
appendChild
(
script
)
;
return
new
Promise
(
resolve
=
>
content
.
setTimeout
(
resolve
0
)
)
;
}
)
;
}
add_task
(
async
function
(
)
{
let
extraTab
=
(
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
TEST_ROOT
)
)
;
let
domLinkAddedFired
=
0
;
let
domLinkChangedFired
=
0
;
const
linkAddedHandler
=
(
)
=
>
domLinkAddedFired
+
+
;
const
linkChangedhandler
=
(
)
=
>
domLinkChangedFired
+
+
;
BrowserTestUtils
.
addContentEventListener
(
gBrowser
.
selectedBrowser
"
DOMLinkAdded
"
linkAddedHandler
)
;
BrowserTestUtils
.
addContentEventListener
(
gBrowser
.
selectedBrowser
"
DOMLinkChanged
"
linkChangedhandler
)
;
let
expectedFavicon
=
TEST_ROOT
+
"
file_generic_favicon
.
ico
"
;
let
faviconPromise
=
waitForFavicon
(
extraTab
.
linkedBrowser
expectedFavicon
)
;
BrowserTestUtils
.
startLoadingURIString
(
extraTab
.
linkedBrowser
TEST_URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
extraTab
.
linkedBrowser
)
;
await
faviconPromise
;
is
(
domLinkAddedFired
2
"
Should
fire
the
correct
number
of
DOMLinkAdded
event
.
"
)
;
is
(
domLinkChangedFired
0
"
Should
not
fire
any
DOMLinkChanged
event
.
"
)
;
gBrowser
.
removeTab
(
extraTab
)
;
}
)
;
add_task
(
async
function
(
)
{
let
extraTab
=
(
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
TEST_ROOT
)
)
;
let
browser
=
extraTab
.
linkedBrowser
;
let
domLinkAddedFired
=
0
;
let
domLinkChangedFired
=
0
;
const
linkAddedHandler
=
(
)
=
>
domLinkAddedFired
+
+
;
const
linkChangedhandler
=
(
)
=
>
domLinkChangedFired
+
+
;
BrowserTestUtils
.
addContentEventListener
(
browser
"
DOMLinkAdded
"
linkAddedHandler
)
;
BrowserTestUtils
.
addContentEventListener
(
browser
"
DOMLinkChanged
"
linkChangedhandler
)
;
BrowserTestUtils
.
startLoadingURIString
(
browser
TEST_ROOT
+
"
blank
.
html
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
is
(
domLinkAddedFired
0
"
Should
have
been
no
link
add
events
"
)
;
is
(
domLinkChangedFired
0
"
Should
have
been
no
link
change
events
"
)
;
await
runInDoc
(
browser
(
)
=
>
{
let
fragment
=
document
.
createRange
(
)
.
createContextualFragment
(
'
<
link
type
=
"
image
/
ico
"
href
=
"
file_generic_favicon
.
ico
"
rel
=
"
icon
"
>
'
)
;
fragment
.
firstElementChild
.
setAttribute
(
"
type
"
"
image
/
png
"
)
;
}
)
;
is
(
domLinkAddedFired
0
"
Should
have
been
no
link
add
events
"
)
;
is
(
domLinkChangedFired
0
"
Should
have
been
no
link
change
events
"
)
;
await
runInDoc
(
browser
(
)
=
>
{
let
fragment
=
document
.
createDocumentFragment
(
)
;
let
link
=
document
.
createElement
(
"
link
"
)
;
link
.
setAttribute
(
"
href
"
"
file_generic_favicon
.
ico
"
)
;
link
.
setAttribute
(
"
rel
"
"
icon
"
)
;
link
.
setAttribute
(
"
type
"
"
image
/
ico
"
)
;
fragment
.
appendChild
(
link
)
;
link
.
setAttribute
(
"
type
"
"
image
/
png
"
)
;
}
)
;
is
(
domLinkAddedFired
0
"
Should
have
been
no
link
add
events
"
)
;
is
(
domLinkChangedFired
0
"
Should
have
been
no
link
change
events
"
)
;
let
expectedFavicon
=
TEST_ROOT
+
"
file_generic_favicon
.
ico
"
;
let
faviconPromise
=
waitForFavicon
(
browser
expectedFavicon
)
;
await
runInDoc
(
browser
(
)
=
>
{
let
fragment
=
document
.
createRange
(
)
.
createContextualFragment
(
'
<
link
type
=
"
image
/
ico
"
href
=
"
file_generic_favicon
.
ico
"
rel
=
"
icon
"
>
'
)
;
document
.
head
.
appendChild
(
fragment
)
;
}
)
;
is
(
domLinkAddedFired
1
"
Should
have
been
one
link
add
events
"
)
;
is
(
domLinkChangedFired
0
"
Should
have
been
no
link
change
events
"
)
;
await
faviconPromise
;
gBrowser
.
removeTab
(
extraTab
)
;
}
)
;
