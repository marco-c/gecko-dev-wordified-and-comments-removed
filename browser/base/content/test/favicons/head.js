ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
Services
.
cache2
.
clear
(
)
;
function
waitForFaviconMessage
(
isTabIcon
=
undefined
expectedURL
=
undefined
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
listener
=
msg
=
>
{
if
(
isTabIcon
!
=
undefined
&
&
isTabIcon
!
=
msg
.
data
.
canUseForTab
)
{
return
;
}
if
(
expectedURL
&
&
msg
.
data
.
originalURL
!
=
expectedURL
)
{
return
;
}
window
.
messageManager
.
removeMessageListener
(
"
Link
:
SetIcon
"
listener
)
;
window
.
messageManager
.
removeMessageListener
(
"
Link
:
SetFailedIcon
"
listener
)
;
if
(
msg
.
name
=
=
"
Link
:
SetIcon
"
)
{
resolve
(
{
iconURL
:
msg
.
data
.
originalURL
dataURL
:
msg
.
data
.
iconURL
canUseForTab
:
msg
.
data
.
canUseForTab
}
)
;
}
else
{
reject
(
{
iconURL
:
msg
.
data
.
originalURL
canUseForTab
:
msg
.
data
.
canUseForTab
}
)
;
}
}
;
window
.
messageManager
.
addMessageListener
(
"
Link
:
SetIcon
"
listener
)
;
window
.
messageManager
.
addMessageListener
(
"
Link
:
SetFailedIcon
"
listener
)
;
}
)
;
}
function
waitForFavicon
(
browser
url
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
onLinkIconAvailable
(
b
dataURI
iconURI
)
{
if
(
b
!
=
=
browser
|
|
iconURI
!
=
url
)
{
return
;
}
gBrowser
.
removeTabsProgressListener
(
listener
)
;
resolve
(
)
;
}
}
;
gBrowser
.
addTabsProgressListener
(
listener
)
;
}
)
;
}
function
waitForLinkAvailable
(
browser
)
{
let
resolve
reject
;
let
listener
=
{
onLinkIconAvailable
(
b
dataURI
iconURI
)
{
if
(
browser
!
=
=
b
|
|
!
iconURI
)
{
return
;
}
gBrowser
.
removeTabsProgressListener
(
listener
)
;
resolve
(
iconURI
)
;
}
}
;
let
promise
=
new
Promise
(
(
res
rej
)
=
>
{
resolve
=
res
;
reject
=
rej
;
gBrowser
.
addTabsProgressListener
(
listener
)
;
}
)
;
promise
.
cancel
=
(
)
=
>
{
gBrowser
.
removeTabsProgressListener
(
listener
)
;
reject
(
)
;
}
;
return
promise
;
}
