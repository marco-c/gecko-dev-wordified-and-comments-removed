var
gTestRoot
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
127
.
0
.
0
.
1
:
8888
/
"
)
;
var
gPluginHost
=
Cc
[
"
mozilla
.
org
/
plugin
/
host
;
1
"
]
.
getService
(
Ci
.
nsIPluginHost
)
;
var
gTestBrowser
=
null
;
function
updateAllTestPlugins
(
aState
)
{
setTestPluginEnabledState
(
aState
"
Test
Plug
-
in
"
)
;
setTestPluginEnabledState
(
aState
"
Second
Test
Plug
-
in
"
)
;
}
add_task
(
async
function
(
)
{
registerCleanupFunction
(
async
function
(
)
{
clearAllPluginPermissions
(
)
;
setTestPluginEnabledState
(
Ci
.
nsIPluginTag
.
STATE_ENABLED
"
Test
Plug
-
in
"
)
;
setTestPluginEnabledState
(
Ci
.
nsIPluginTag
.
STATE_ENABLED
"
Second
Test
Plug
-
in
"
)
;
await
asyncSetAndUpdateBlocklist
(
gTestRoot
+
"
blockNoPlugins
"
gTestBrowser
)
;
resetBlocklist
(
)
;
gTestBrowser
=
null
;
gBrowser
.
removeCurrentTab
(
)
;
window
.
focus
(
)
;
}
)
;
}
)
;
add_task
(
async
function
(
)
{
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
gTestBrowser
=
gBrowser
.
selectedBrowser
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
blocklist
.
suppressUI
"
true
)
;
updateAllTestPlugins
(
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
data
:
text
/
html
<
html
>
<
/
html
>
"
)
;
await
asyncSetAndUpdateBlocklist
(
gTestRoot
+
"
blockNoPlugins
"
gTestBrowser
)
;
}
)
;
add_task
(
async
function
(
)
{
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_unknown
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
let
pluginInfo
=
await
promiseForPluginInfo
(
"
unknown
"
)
;
is
(
pluginInfo
.
pluginFallbackType
Ci
.
nsIObjectLoadingContent
.
PLUGIN_UNSUPPORTED
"
Test
1a
plugin
fallback
type
should
be
PLUGIN_UNSUPPORTED
"
)
;
}
)
;
add_task
(
async
function
(
)
{
updateAllTestPlugins
(
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_test
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
await
promisePopupNotification
(
"
click
-
to
-
play
-
plugins
"
)
;
let
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
ok
(
!
pluginInfo
.
activated
"
Plugin
should
not
be
activated
"
)
;
let
notification
=
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
;
await
promiseForNotificationShown
(
notification
)
;
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
ok
(
pluginInfo
.
activated
"
Plugin
should
be
activated
"
)
;
await
promiseForNotificationShown
(
notification
)
;
PopupNotifications
.
panel
.
firstElementChild
.
secondaryButton
.
click
(
)
;
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
ok
(
!
pluginInfo
.
activated
"
Plugin
should
not
be
activated
"
)
;
let
browserLoaded
=
BrowserTestUtils
.
browserLoaded
(
gTestBrowser
)
;
gTestBrowser
.
reload
(
)
;
await
browserLoaded
;
notification
=
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
test
"
)
;
let
bounds
=
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
main
"
)
.
getBoundingClientRect
(
)
;
let
left
=
(
bounds
.
left
+
bounds
.
right
)
/
2
;
let
top
=
(
bounds
.
top
+
bounds
.
bottom
)
/
2
;
let
utils
=
content
.
windowUtils
;
utils
.
sendMouseEvent
(
"
mousedown
"
left
top
0
1
0
false
0
0
)
;
utils
.
sendMouseEvent
(
"
mouseup
"
left
top
0
1
0
false
0
0
)
;
}
)
;
ok
(
!
notification
.
dismissed
"
A
plugin
notification
should
be
shown
.
"
)
;
clearAllPluginPermissions
(
)
;
}
)
;
add_task
(
async
function
(
)
{
updateAllTestPlugins
(
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_test
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
await
promisePopupNotification
(
"
click
-
to
-
play
-
plugins
"
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
data
:
text
/
html
<
html
>
hi
<
/
html
>
"
)
;
let
notification
=
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
;
ok
(
!
notification
"
Test
11b
Should
not
have
a
click
-
to
-
play
notification
"
)
;
gTestBrowser
.
webNavigation
.
goBack
(
)
;
await
promisePopupNotification
(
"
click
-
to
-
play
-
plugins
"
)
;
}
)
;
add_task
(
async
function
(
)
{
updateAllTestPlugins
(
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_test
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
await
promisePopupNotification
(
"
click
-
to
-
play
-
plugins
"
)
;
let
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
ok
(
!
pluginInfo
.
activated
"
Test
12a
Plugin
should
not
be
activated
"
)
;
let
notification
=
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
;
await
promiseForNotificationShown
(
notification
)
;
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
ok
(
pluginInfo
.
activated
"
Test
12a
Plugin
should
be
activated
"
)
;
}
)
;
add_task
(
async
function
(
)
{
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_two_types
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
await
promisePopupNotification
(
"
click
-
to
-
play
-
plugins
"
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
test
=
content
.
document
.
getElementById
(
"
test
"
)
;
let
secondtestA
=
content
.
document
.
getElementById
(
"
secondtestA
"
)
;
let
secondtestB
=
content
.
document
.
getElementById
(
"
secondtestB
"
)
;
Assert
.
ok
(
test
.
activated
&
&
!
secondtestA
.
activated
&
&
!
secondtestB
.
activated
"
Content
plugins
are
set
up
"
)
;
}
)
;
clearAllPluginPermissions
(
)
;
}
)
;
add_task
(
async
function
(
)
{
updateAllTestPlugins
(
Ci
.
nsIPluginTag
.
STATE_ENABLED
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_test2
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
let
pluginInfo
=
await
promiseForPluginInfo
(
"
test1
"
)
;
ok
(
pluginInfo
.
activated
"
Test
14
Plugin
should
be
activated
"
)
;
}
)
;
add_task
(
async
function
(
)
{
updateAllTestPlugins
(
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_alternate_content
.
html
"
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
test
"
)
;
let
mainBox
=
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
main
"
)
;
Assert
.
ok
(
!
!
mainBox
"
Test
15
Plugin
overlay
should
exist
"
)
;
}
)
;
}
)
;
add_task
(
async
function
(
)
{
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_bug749455
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
let
notification
=
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
;
ok
(
notification
"
Test
17
Should
have
a
click
-
to
-
play
notification
"
)
;
}
)
;
add_task
(
async
function
(
)
{
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_test
.
html
"
)
;
await
asyncSetAndUpdateBlocklist
(
gTestRoot
+
"
blockNoPlugins
"
gTestBrowser
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
let
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
ok
(
!
pluginInfo
.
activated
"
Test
18g
Plugin
should
not
be
activated
"
)
;
ok
(
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
.
dismissed
"
Test
19a
Doorhanger
should
start
out
dismissed
"
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
test
"
)
;
let
icon
=
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
icon
"
)
;
let
bounds
=
icon
.
getBoundingClientRect
(
)
;
let
left
=
(
bounds
.
left
+
bounds
.
right
)
/
2
;
let
top
=
(
bounds
.
top
+
bounds
.
bottom
)
/
2
;
let
utils
=
content
.
windowUtils
;
utils
.
sendMouseEvent
(
"
mousedown
"
left
top
0
1
0
false
0
0
)
;
utils
.
sendMouseEvent
(
"
mouseup
"
left
top
0
1
0
false
0
0
)
;
}
)
;
let
condition
=
(
)
=
>
!
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
.
dismissed
;
await
promiseForCondition
(
condition
)
;
}
)
;
add_task
(
async
function
(
)
{
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_test
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
let
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
ok
(
!
pluginInfo
.
activated
"
Test
18g
Plugin
should
not
be
activated
"
)
;
ok
(
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
.
dismissed
"
Test
19c
Doorhanger
should
start
out
dismissed
"
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
test
"
)
;
let
text
=
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
clickToPlay
"
)
;
let
bounds
=
text
.
getBoundingClientRect
(
)
;
let
left
=
(
bounds
.
left
+
bounds
.
right
)
/
2
;
let
top
=
(
bounds
.
top
+
bounds
.
bottom
)
/
2
;
let
utils
=
content
.
windowUtils
;
utils
.
sendMouseEvent
(
"
mousedown
"
left
top
0
1
0
false
0
0
)
;
utils
.
sendMouseEvent
(
"
mouseup
"
left
top
0
1
0
false
0
0
)
;
}
)
;
let
condition
=
(
)
=
>
!
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
.
dismissed
;
await
promiseForCondition
(
condition
)
;
}
)
;
add_task
(
async
function
(
)
{
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_test
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
let
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
ok
(
!
pluginInfo
.
activated
"
Test
18g
Plugin
should
not
be
activated
"
)
;
ok
(
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
.
dismissed
"
Test
19e
Doorhanger
should
start
out
dismissed
"
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
utils
=
content
.
windowUtils
;
utils
.
sendMouseEvent
(
"
mousedown
"
50
50
0
1
0
false
0
0
)
;
utils
.
sendMouseEvent
(
"
mouseup
"
50
50
0
1
0
false
0
0
)
;
}
)
;
let
condition
=
(
)
=
>
!
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
.
dismissed
&
&
PopupNotifications
.
panel
.
firstElementChild
;
await
promiseForCondition
(
condition
)
;
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
ok
(
pluginInfo
.
activated
"
Test
19e
Plugin
should
not
be
activated
"
)
;
clearAllPluginPermissions
(
)
;
}
)
;
add_task
(
async
function
(
)
{
updateAllTestPlugins
(
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_hidden_to_visible
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
let
notification
=
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
;
ok
(
notification
"
Test
20a
Should
have
a
click
-
to
-
play
notification
"
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
test
"
)
;
let
overlay
=
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
main
"
)
;
Assert
.
ok
(
!
!
overlay
"
Test
20a
Plugin
overlay
should
exist
"
)
;
}
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
test
"
)
;
let
mainBox
=
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
main
"
)
;
let
overlayRect
=
mainBox
.
getBoundingClientRect
(
)
;
Assert
.
ok
(
overlayRect
.
width
=
=
0
&
&
overlayRect
.
height
=
=
0
"
Test
20a
plugin
should
have
an
overlay
with
0px
width
and
height
"
)
;
}
)
;
let
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
ok
(
!
pluginInfo
.
activated
"
Test
20b
plugin
should
not
be
activated
"
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
div
=
doc
.
getElementById
(
"
container
"
)
;
Assert
.
equal
(
div
.
style
.
display
"
none
"
"
Test
20b
container
div
should
be
display
:
none
"
)
;
}
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
div
=
doc
.
getElementById
(
"
container
"
)
;
div
.
style
.
display
=
"
block
"
;
}
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
await
new
Promise
(
resolve
=
>
content
.
requestAnimationFrame
(
resolve
)
)
;
await
new
Promise
(
resolve
=
>
content
.
requestAnimationFrame
(
resolve
)
)
;
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
test
"
)
;
let
mainBox
=
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
main
"
)
;
let
overlayRect
=
mainBox
.
getBoundingClientRect
(
)
;
Assert
.
ok
(
overlayRect
.
width
=
=
200
&
&
overlayRect
.
height
=
=
200
"
Test
20c
plugin
should
have
overlay
dims
of
200px
"
)
;
}
)
;
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
ok
(
!
pluginInfo
.
activated
"
Test
20b
plugin
should
not
be
activated
"
)
;
ok
(
notification
.
dismissed
"
Test
20c
Doorhanger
should
start
out
dismissed
"
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
test
"
)
;
let
bounds
=
plugin
.
getBoundingClientRect
(
)
;
let
left
=
(
bounds
.
left
+
bounds
.
right
)
/
2
;
let
top
=
(
bounds
.
top
+
bounds
.
bottom
)
/
2
;
let
utils
=
content
.
windowUtils
;
utils
.
sendMouseEvent
(
"
mousedown
"
left
top
0
1
0
false
0
0
)
;
utils
.
sendMouseEvent
(
"
mouseup
"
left
top
0
1
0
false
0
0
)
;
}
)
;
let
condition
=
(
)
=
>
!
notification
.
dismissed
&
&
!
!
PopupNotifications
.
panel
.
firstElementChild
;
await
promiseForCondition
(
condition
)
;
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
ok
(
pluginInfo
.
activated
"
Test
20c
plugin
should
be
activated
"
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
test
"
)
;
Assert
.
ok
(
!
plugin
.
openOrClosedShadowRoot
"
Test
20c
CTP
UA
Widget
Shadow
Root
is
removed
"
)
;
}
)
;
clearAllPluginPermissions
(
)
;
}
)
;
add_task
(
async
function
(
)
{
clearAllPluginPermissions
(
)
;
updateAllTestPlugins
(
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_test
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
let
notification
=
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
gTestBrowser
)
;
ok
(
notification
"
Test
22
Should
have
a
click
-
to
-
play
notification
"
)
;
let
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
is
(
pluginInfo
.
pluginFallbackType
Ci
.
nsIObjectLoadingContent
.
PLUGIN_CLICK_TO_PLAY
"
Test
23
plugin
fallback
type
should
be
PLUGIN_CLICK_TO_PLAY
"
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
test
"
)
;
plugin
.
type
=
null
;
plugin
.
parentNode
.
appendChild
(
plugin
)
;
}
)
;
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
is
(
pluginInfo
.
displayedType
Ci
.
nsIObjectLoadingContent
.
TYPE_NULL
"
Test
23
plugin
should
be
TYPE_NULL
"
)
;
await
ContentTask
.
spawn
(
gTestBrowser
null
async
function
(
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
test
"
)
;
plugin
.
type
=
"
application
/
x
-
test
"
;
plugin
.
parentNode
.
appendChild
(
plugin
)
;
}
)
;
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
is
(
pluginInfo
.
displayedType
Ci
.
nsIObjectLoadingContent
.
TYPE_NULL
"
Test
23
plugin
should
be
TYPE_NULL
"
)
;
is
(
pluginInfo
.
pluginFallbackType
Ci
.
nsIObjectLoadingContent
.
PLUGIN_CLICK_TO_PLAY
"
Test
23
plugin
fallback
type
should
be
PLUGIN_CLICK_TO_PLAY
"
)
;
ok
(
!
pluginInfo
.
activated
"
Test
23
plugin
node
should
not
be
activated
"
)
;
}
)
;
add_task
(
async
function
blockPluginSyncRemoved
(
)
{
updateAllTestPlugins
(
Ci
.
nsIPluginTag
.
STATE_CLICKTOPLAY
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_syncRemoved
.
html
"
)
;
await
waitForMs
(
500
)
;
let
notification
=
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
)
;
ok
(
notification
"
Test
25
:
There
should
be
a
plugin
notification
even
if
the
plugin
was
immediately
removed
"
)
;
ok
(
notification
.
dismissed
"
Test
25
:
The
notification
should
be
dismissed
by
default
"
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
data
:
text
/
html
<
html
>
hi
<
/
html
>
"
)
;
}
)
;
add_task
(
async
function
blockPluginInfoURL
(
)
{
clearAllPluginPermissions
(
)
;
await
asyncSetAndUpdateBlocklist
(
gTestRoot
+
"
blockPluginInfoURL
"
gTestBrowser
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_test
.
html
"
)
;
info
(
"
Waiting
for
plugin
bindings
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
let
notification
=
PopupNotifications
.
getNotification
(
"
click
-
to
-
play
-
plugins
"
)
;
info
(
"
Waiting
for
notification
to
be
shown
"
)
;
await
promiseForNotificationShown
(
notification
)
;
info
(
"
Waiting
for
plugin
info
"
)
;
let
pluginInfo
=
await
promiseForPluginInfo
(
"
test
"
)
;
is
(
pluginInfo
.
pluginFallbackType
Ci
.
nsIObjectLoadingContent
.
PLUGIN_BLOCKLISTED
"
Test
26
plugin
fallback
type
should
be
PLUGIN_BLOCKLISTED
"
)
;
ok
(
!
pluginInfo
.
activated
"
Plugin
should
be
activated
.
"
)
;
}
)
;
