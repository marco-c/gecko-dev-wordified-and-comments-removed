ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
CrashSubmit
.
jsm
"
this
)
;
const
SERVER_URL
=
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
crashreporter
/
test
/
browser
/
crashreport
.
sjs
"
;
var
gTestRoot
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
127
.
0
.
0
.
1
:
8888
/
"
)
;
var
gTestBrowser
=
null
;
var
config
=
{
}
;
add_task
(
async
function
(
)
{
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
let
noReport
=
env
.
get
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
)
;
let
serverUrl
=
env
.
get
(
"
MOZ_CRASHREPORTER_URL
"
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
"
"
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_URL
"
SERVER_URL
)
;
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
gTestBrowser
=
gBrowser
.
selectedBrowser
;
Services
.
prefs
.
setIntPref
(
"
dom
.
ipc
.
plugins
.
timeoutSecs
"
0
)
;
registerCleanupFunction
(
async
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
dom
.
ipc
.
plugins
.
timeoutSecs
"
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
noReport
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_URL
"
serverUrl
)
;
env
=
null
;
config
=
null
;
gTestBrowser
=
null
;
gBrowser
.
removeCurrentTab
(
)
;
window
.
focus
(
)
;
}
)
;
}
)
;
add_task
(
async
function
(
)
{
config
=
{
shouldSubmissionUIBeVisible
:
true
comment
:
"
"
urlOptIn
:
false
}
;
setTestPluginEnabledState
(
Ci
.
nsIPluginTag
.
STATE_ENABLED
)
;
let
pluginCrashed
=
promisePluginCrashed
(
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_crashCommentAndURL
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
await
pluginCrashed
;
let
crashReportStatus
=
TestUtils
.
topicObserved
(
"
crash
-
report
-
status
"
onSubmitStatus
)
;
await
ContentTask
.
spawn
(
gTestBrowser
config
async
function
(
aConfig
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
plugin
"
)
;
let
pleaseSubmit
=
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
pleaseSubmit
"
)
;
let
submitButton
=
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
submitButton
"
)
;
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
submitURLOptIn
"
)
.
checked
=
aConfig
.
urlOptIn
;
submitButton
.
click
(
)
;
Assert
.
equal
(
content
.
getComputedStyle
(
pleaseSubmit
)
.
display
=
=
"
block
"
aConfig
.
shouldSubmissionUIBeVisible
"
The
crash
UI
should
be
visible
"
)
;
}
)
;
await
crashReportStatus
;
}
)
;
add_task
(
async
function
(
)
{
config
=
{
shouldSubmissionUIBeVisible
:
true
comment
:
"
a
test
comment
"
urlOptIn
:
true
}
;
setTestPluginEnabledState
(
Ci
.
nsIPluginTag
.
STATE_ENABLED
)
;
let
pluginCrashed
=
promisePluginCrashed
(
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_crashCommentAndURL
.
html
"
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
await
pluginCrashed
;
let
crashReportStatus
=
TestUtils
.
topicObserved
(
"
crash
-
report
-
status
"
onSubmitStatus
)
;
await
ContentTask
.
spawn
(
gTestBrowser
config
async
function
(
aConfig
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
plugin
"
)
;
let
pleaseSubmit
=
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
pleaseSubmit
"
)
;
let
submitButton
=
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
submitButton
"
)
;
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
submitURLOptIn
"
)
.
checked
=
aConfig
.
urlOptIn
;
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
submitComment
"
)
.
value
=
aConfig
.
comment
;
submitButton
.
click
(
)
;
Assert
.
equal
(
content
.
getComputedStyle
(
pleaseSubmit
)
.
display
=
=
"
block
"
aConfig
.
shouldSubmissionUIBeVisible
"
The
crash
UI
should
be
visible
"
)
;
}
)
;
await
crashReportStatus
;
}
)
;
add_task
(
async
function
(
)
{
config
=
{
shouldSubmissionUIBeVisible
:
false
comment
:
"
"
urlOptIn
:
true
}
;
let
crashDeferred
=
PromiseUtils
.
defer
(
)
;
let
crashObserver
=
(
subject
topic
data
)
=
>
{
if
(
topic
!
=
"
plugin
-
crashed
"
)
{
return
;
}
let
propBag
=
subject
.
QueryInterface
(
Ci
.
nsIPropertyBag2
)
;
let
minidumpID
=
propBag
.
getPropertyAsAString
(
"
pluginDumpID
"
)
;
Services
.
crashmanager
.
ensureCrashIsPresent
(
minidumpID
)
.
then
(
(
)
=
>
{
let
minidumpDir
=
Services
.
dirsvc
.
get
(
"
UAppData
"
Ci
.
nsIFile
)
;
minidumpDir
.
append
(
"
Crash
Reports
"
)
;
minidumpDir
.
append
(
"
pending
"
)
;
let
pluginDumpFile
=
minidumpDir
.
clone
(
)
;
pluginDumpFile
.
append
(
minidumpID
+
"
.
dmp
"
)
;
let
extraFile
=
minidumpDir
.
clone
(
)
;
extraFile
.
append
(
minidumpID
+
"
.
extra
"
)
;
pluginDumpFile
.
remove
(
false
)
;
extraFile
.
remove
(
false
)
;
crashDeferred
.
resolve
(
)
;
}
)
;
}
;
Services
.
obs
.
addObserver
(
crashObserver
"
plugin
-
crashed
"
)
;
setTestPluginEnabledState
(
Ci
.
nsIPluginTag
.
STATE_ENABLED
)
;
let
pluginCrashed
=
promisePluginCrashed
(
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
gTestRoot
+
"
plugin_crashCommentAndURL
.
html
?
"
+
encodeURIComponent
(
JSON
.
stringify
(
{
width
:
300
height
:
300
}
)
)
)
;
await
promiseUpdatePluginBindings
(
gTestBrowser
)
;
await
pluginCrashed
;
await
ContentTask
.
spawn
(
gTestBrowser
config
async
function
(
aConfig
)
{
let
doc
=
content
.
document
;
let
plugin
=
doc
.
getElementById
(
"
plugin
"
)
;
let
pleaseSubmit
=
plugin
.
openOrClosedShadowRoot
.
getElementById
(
"
pleaseSubmit
"
)
;
Assert
.
equal
(
!
!
pleaseSubmit
&
&
content
.
getComputedStyle
(
pleaseSubmit
)
.
display
=
=
"
block
"
aConfig
.
shouldSubmissionUIBeVisible
"
Plugin
crash
UI
should
not
be
visible
"
)
;
}
)
;
await
crashDeferred
.
promise
;
Services
.
obs
.
removeObserver
(
crashObserver
"
plugin
-
crashed
"
)
;
}
)
;
function
promisePluginCrashed
(
)
{
return
new
ContentTask
.
spawn
(
gTestBrowser
{
}
async
function
(
)
{
await
new
Promise
(
resolve
=
>
{
addEventListener
(
"
PluginCrashReporterDisplayed
"
function
onPluginCrashed
(
)
{
removeEventListener
(
"
PluginCrashReporterDisplayed
"
onPluginCrashed
)
;
resolve
(
)
;
}
)
;
}
)
;
}
)
;
}
function
onSubmitStatus
(
aSubject
aData
)
{
if
(
aData
=
=
=
"
submitting
"
)
{
return
false
;
}
is
(
aData
"
success
"
"
The
crash
report
should
be
submitted
successfully
"
)
;
let
propBag
=
aSubject
.
QueryInterface
(
Ci
.
nsIPropertyBag
)
;
if
(
aData
=
=
"
success
"
)
{
let
remoteID
=
getPropertyBagValue
(
propBag
"
serverCrashID
"
)
;
ok
(
!
!
remoteID
"
serverCrashID
should
be
set
"
)
;
let
file
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
file
.
initWithPath
(
Services
.
crashmanager
.
_submittedDumpsDir
)
;
file
.
append
(
remoteID
+
"
.
txt
"
)
;
ok
(
file
.
exists
(
)
"
Submitted
report
file
should
exist
"
)
;
file
.
remove
(
false
)
;
}
let
extra
=
getPropertyBagValue
(
propBag
"
extra
"
)
;
ok
(
extra
instanceof
Ci
.
nsIPropertyBag
"
Extra
data
should
be
property
bag
"
)
;
let
val
=
getPropertyBagValue
(
extra
"
PluginUserComment
"
)
;
if
(
config
.
comment
)
{
is
(
val
config
.
comment
"
Comment
in
extra
data
should
match
comment
in
textbox
"
)
;
}
else
{
ok
(
val
=
=
=
undefined
"
Comment
should
be
absent
from
extra
data
when
textbox
is
empty
"
)
;
}
val
=
getPropertyBagValue
(
extra
"
PluginContentURL
"
)
;
if
(
config
.
urlOptIn
)
{
is
(
val
gBrowser
.
currentURI
.
spec
"
URL
in
extra
data
should
match
browser
URL
when
opt
-
in
checked
"
)
;
}
else
{
ok
(
val
=
=
=
undefined
"
URL
should
be
absent
from
extra
data
when
opt
-
in
not
checked
"
)
;
}
return
true
;
}
function
getPropertyBagValue
(
bag
key
)
{
try
{
var
val
=
bag
.
getProperty
(
key
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_FAILURE
)
{
throw
e
;
}
}
return
val
;
}
