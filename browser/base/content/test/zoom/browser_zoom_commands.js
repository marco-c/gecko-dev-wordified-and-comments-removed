"
use
strict
"
;
const
TEST_PAGE_URL
=
"
data
:
text
/
html
;
charset
=
utf
-
8
<
body
>
test_zoom_levels
<
/
body
>
"
;
async
function
waitForCommandEnabledState
(
expectedState
)
{
const
COMMAND_MAP
=
{
enlarge
:
"
cmd_fullZoomEnlarge
"
reduce
:
"
cmd_fullZoomReduce
"
reset
:
"
cmd_fullZoomReset
"
}
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
for
(
let
commandKey
in
expectedState
)
{
let
commandID
=
COMMAND_MAP
[
commandKey
]
;
let
command
=
document
.
getElementById
(
commandID
)
;
let
expectedEnabled
=
expectedState
[
commandKey
]
;
if
(
command
.
hasAttribute
(
"
disabled
"
)
=
=
expectedEnabled
)
{
return
false
;
}
}
Assert
.
ok
(
"
Commands
finally
reached
the
expected
state
.
"
)
;
return
true
;
}
"
Waiting
for
commands
to
reach
the
right
state
.
"
)
;
}
function
assertTextZoomCommandCheckedState
(
isChecked
)
{
let
command
=
document
.
getElementById
(
"
cmd_fullZoomToggle
"
)
;
Assert
.
equal
(
command
.
getAttribute
(
"
checked
"
)
"
"
+
isChecked
"
Text
zoom
command
has
expected
checked
attribute
"
)
;
}
add_task
(
async
function
test_update_browser_zoom
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_PAGE_URL
async
browser
=
>
{
let
currentZoom
=
await
FullZoomHelper
.
getGlobalValue
(
)
;
Assert
.
equal
(
currentZoom
1
"
We
expect
to
start
at
the
default
zoom
level
.
"
)
;
await
waitForCommandEnabledState
(
{
enlarge
:
true
reduce
:
true
reset
:
false
}
)
;
assertTextZoomCommandCheckedState
(
false
)
;
for
(
let
textZoom
of
[
true
false
]
)
{
info
(
Running
variation
with
textZoom
set
to
{
textZoom
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
zoom
.
full
"
!
textZoom
]
]
}
)
;
info
(
"
Changing
default
zoom
by
a
single
level
"
)
;
ZoomManager
.
zoom
=
1
.
2
;
await
waitForCommandEnabledState
(
{
enlarge
:
true
reduce
:
true
reset
:
true
}
)
;
await
assertTextZoomCommandCheckedState
(
textZoom
)
;
ZoomManager
.
zoom
=
ZoomManager
.
MAX
;
await
waitForCommandEnabledState
(
{
enlarge
:
false
reduce
:
true
reset
:
true
}
)
;
await
assertTextZoomCommandCheckedState
(
textZoom
)
;
ZoomManager
.
zoom
=
ZoomManager
.
MIN
;
await
waitForCommandEnabledState
(
{
enlarge
:
true
reduce
:
false
reset
:
true
}
)
;
await
assertTextZoomCommandCheckedState
(
textZoom
)
;
ZoomManager
.
zoom
=
1
;
await
waitForCommandEnabledState
(
{
enlarge
:
true
reduce
:
true
reset
:
false
}
)
;
await
assertTextZoomCommandCheckedState
(
textZoom
)
;
}
}
)
;
}
)
;
add_task
(
async
function
test_update_browser_zoom
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_PAGE_URL
async
browser
=
>
{
let
currentZoom
=
await
FullZoomHelper
.
getGlobalValue
(
)
;
Assert
.
equal
(
currentZoom
1
"
We
expect
to
start
at
the
default
zoom
level
.
"
)
;
await
FullZoomHelper
.
changeDefaultZoom
(
200
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
FullZoomHelper
.
changeDefaultZoom
(
100
)
;
}
)
;
await
waitForCommandEnabledState
(
{
enlarge
:
true
reduce
:
true
reset
:
false
}
)
;
info
(
"
Changing
default
zoom
by
a
single
level
"
)
;
ZoomManager
.
zoom
=
2
.
2
;
await
waitForCommandEnabledState
(
{
enlarge
:
true
reduce
:
true
reset
:
true
}
)
;
await
assertTextZoomCommandCheckedState
(
false
)
;
ZoomManager
.
zoom
=
ZoomManager
.
MAX
;
await
waitForCommandEnabledState
(
{
enlarge
:
false
reduce
:
true
reset
:
true
}
)
;
await
assertTextZoomCommandCheckedState
(
false
)
;
ZoomManager
.
zoom
=
ZoomManager
.
MIN
;
await
waitForCommandEnabledState
(
{
enlarge
:
true
reduce
:
false
reset
:
true
}
)
;
await
assertTextZoomCommandCheckedState
(
false
)
;
ZoomManager
.
zoom
=
2
;
await
waitForCommandEnabledState
(
{
enlarge
:
true
reduce
:
true
reset
:
false
}
)
;
await
assertTextZoomCommandCheckedState
(
false
)
;
}
)
;
}
)
;
