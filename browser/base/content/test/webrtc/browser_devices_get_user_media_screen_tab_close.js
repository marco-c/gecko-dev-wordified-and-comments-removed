"
use
strict
"
;
const
TEST_ROOT
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
https
:
/
/
example
.
com
/
"
)
;
const
TEST_PAGE
=
TEST_ROOT
+
"
get_user_media
.
html
"
;
function
testSelected
(
aTab
)
{
is
(
aTab
gBrowser
.
selectedTab
"
Tab
is
gBrowser
.
selectedTab
"
)
;
is
(
aTab
.
getAttribute
(
"
selected
"
)
"
true
"
"
Tab
has
property
'
selected
'
"
)
;
is
(
aTab
.
getAttribute
(
"
visuallyselected
"
)
"
true
"
"
Tab
has
property
'
visuallyselected
'
"
)
;
}
add_task
(
async
function
testScreenSharingTabClose
(
)
{
let
initialTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_PAGE
)
;
testSelected
(
tab
)
;
await
shareDevices
(
tab
.
linkedBrowser
false
false
SHARE_WINDOW
)
;
ok
(
tab
.
_sharingState
.
webRTC
.
screen
"
Tab
has
webRTC
screen
sharing
state
"
)
;
let
recordingEndedPromise
=
expectObserverCalled
(
"
recording
-
window
-
ended
"
1
tab
.
linkedBrowser
.
browsingContext
)
;
let
tabClosedPromise
=
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
selectedTab
=
=
initialTab
"
Waiting
for
tab
to
close
"
)
;
BrowserTestUtils
.
removeTab
(
tab
{
animate
:
true
byMouse
:
true
}
)
;
await
recordingEndedPromise
;
await
tabClosedPromise
;
testSelected
(
initialTab
)
;
ok
(
!
gBrowser
.
selectedTab
.
_sharingState
?
.
webRTC
?
.
screen
"
Selected
tab
doesn
'
t
have
webRTC
screen
sharing
state
"
)
;
BrowserTestUtils
.
removeTab
(
initialTab
)
;
}
)
;
