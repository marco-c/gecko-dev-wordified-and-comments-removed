function
setCameraMuted
(
mute
)
{
return
sendObserverNotification
(
mute
?
"
getUserMedia
:
muteVideo
"
:
"
getUserMedia
:
unmuteVideo
"
)
;
}
function
setMicrophoneMuted
(
mute
)
{
return
sendObserverNotification
(
mute
?
"
getUserMedia
:
muteAudio
"
:
"
getUserMedia
:
unmuteAudio
"
)
;
}
function
sendObserverNotification
(
topic
)
{
const
windowId
=
gBrowser
.
selectedBrowser
.
innerWindowID
;
return
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
{
topic
windowId
}
]
function
(
args
)
{
Services
.
obs
.
notifyObservers
(
content
.
window
args
.
topic
JSON
.
stringify
(
args
.
windowId
)
)
;
}
)
;
}
function
setTrackEnabled
(
audio
video
)
{
return
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
{
audio
video
}
]
function
(
args
)
{
let
stream
=
content
.
wrappedJSObject
.
gStreams
[
0
]
;
if
(
args
.
audio
!
=
null
)
{
stream
.
getAudioTracks
(
)
[
0
]
.
enabled
=
args
.
audio
;
}
if
(
args
.
video
!
=
null
)
{
stream
.
getVideoTracks
(
)
[
0
]
.
enabled
=
args
.
video
;
}
}
)
;
}
async
function
getVideoTrackMuted
(
)
{
return
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
content
.
wrappedJSObject
.
gStreams
[
0
]
.
getVideoTracks
(
)
[
0
]
.
muted
)
;
}
async
function
getVideoTrackEvents
(
)
{
return
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
content
.
wrappedJSObject
.
gVideoEvents
)
;
}
async
function
getAudioTrackMuted
(
)
{
return
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
content
.
wrappedJSObject
.
gStreams
[
0
]
.
getAudioTracks
(
)
[
0
]
.
muted
)
;
}
async
function
getAudioTrackEvents
(
)
{
return
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
(
)
=
>
content
.
wrappedJSObject
.
gAudioEvents
)
;
}
function
cloneTracks
(
audio
video
)
{
return
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
{
audio
video
}
]
function
(
args
)
{
if
(
!
content
.
wrappedJSObject
.
gClones
)
{
content
.
wrappedJSObject
.
gClones
=
[
]
;
}
let
clones
=
content
.
wrappedJSObject
.
gClones
;
let
stream
=
content
.
wrappedJSObject
.
gStreams
[
0
]
;
if
(
args
.
audio
!
=
null
)
{
clones
.
push
(
stream
.
getAudioTracks
(
)
[
0
]
.
clone
(
)
)
;
}
if
(
args
.
video
!
=
null
)
{
clones
.
push
(
stream
.
getVideoTracks
(
)
[
0
]
.
clone
(
)
)
;
}
}
)
;
}
function
stopClonedTracks
(
audio
video
)
{
return
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
{
audio
video
}
]
function
(
args
)
{
let
clones
=
content
.
wrappedJSObject
.
gClones
|
|
[
]
;
if
(
args
.
audio
!
=
null
)
{
clones
.
filter
(
t
=
>
t
.
kind
=
=
"
audio
"
)
.
forEach
(
t
=
>
t
.
stop
(
)
)
;
}
if
(
args
.
video
!
=
null
)
{
clones
.
filter
(
t
=
>
t
.
kind
=
=
"
video
"
)
.
forEach
(
t
=
>
t
.
stop
(
)
)
;
}
let
liveClones
=
clones
.
filter
(
t
=
>
t
.
readyState
=
=
"
live
"
)
;
if
(
!
liveClones
.
length
)
{
delete
content
.
wrappedJSObject
.
gClones
;
}
else
{
content
.
wrappedJSObject
.
gClones
=
liveClones
;
}
}
)
;
}
var
gTests
=
[
{
desc
:
"
getUserMedia
audio
+
video
:
disabling
the
stream
shows
the
paused
indicator
"
run
:
async
function
checkDisabled
(
)
{
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
true
true
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
2
)
;
await
setTrackEnabled
(
false
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_DISABLED
"
video
should
be
disabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_DISABLED
audio
:
STATE_CAPTURE_DISABLED
}
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setTrackEnabled
(
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
microphone
=
=
STATE_CAPTURE_ENABLED
"
audio
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_DISABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setTrackEnabled
(
null
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_ENABLED
"
video
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
await
closeStream
(
)
;
}
}
{
desc
:
"
getUserMedia
audio
+
video
:
disabling
the
original
tracks
and
stopping
enabled
clones
shows
the
paused
indicator
"
run
:
async
function
checkDisabledAfterCloneStop
(
)
{
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
true
true
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
await
cloneTracks
(
true
true
)
;
await
setTrackEnabled
(
false
false
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
2
)
;
await
stopClonedTracks
(
true
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_DISABLED
&
&
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
microphone
=
=
STATE_CAPTURE_DISABLED
"
video
and
audio
should
be
disabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_DISABLED
audio
:
STATE_CAPTURE_DISABLED
}
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setTrackEnabled
(
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
microphone
=
=
STATE_CAPTURE_ENABLED
"
audio
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_DISABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setTrackEnabled
(
null
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_ENABLED
"
video
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
await
closeStream
(
)
;
}
}
{
desc
:
"
getUserMedia
screen
:
disabling
the
stream
shows
the
paused
indicator
"
run
:
async
function
checkScreenDisabled
(
)
{
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
false
true
null
"
screen
"
)
;
await
promise
;
await
observerPromise
;
is
(
PopupNotifications
.
getNotification
(
"
webRTC
-
shareDevices
"
)
.
anchorID
"
webRTC
-
shareScreen
-
notification
-
icon
"
"
anchored
to
device
icon
"
)
;
checkDeviceSelectors
(
false
false
true
)
;
let
notification
=
PopupNotifications
.
panel
.
firstElementChild
;
let
iconclass
=
notification
.
getAttribute
(
"
iconclass
"
)
;
ok
(
iconclass
.
includes
(
"
screen
-
icon
"
)
"
panel
using
screen
icon
"
)
;
let
menulist
=
document
.
getElementById
(
"
webRTC
-
selectWindow
-
menulist
"
)
;
menulist
.
getItemAtIndex
(
menulist
.
itemCount
-
1
)
.
doCommand
(
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
screen
:
"
Screen
"
}
"
expected
screen
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
screen
:
"
Screen
"
}
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setTrackEnabled
(
null
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
screen
=
=
"
ScreenPaused
"
"
screen
should
be
disabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
screen
:
"
ScreenPaused
"
}
window
{
screen
:
"
Screen
"
}
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setTrackEnabled
(
null
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
screen
=
=
"
Screen
"
"
screen
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
screen
:
"
Screen
"
}
)
;
await
closeStream
(
)
;
}
}
{
desc
:
"
getUserMedia
audio
+
video
:
muting
the
camera
shows
the
muted
indicator
"
run
:
async
function
checkCameraMuted
(
)
{
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
true
true
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
is
(
await
getVideoTrackMuted
(
)
false
"
video
track
starts
unmuted
"
)
;
Assert
.
deepEqual
(
await
getVideoTrackEvents
(
)
[
]
"
no
video
track
events
fired
yet
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setCameraMuted
(
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_DISABLED
"
video
should
be
muted
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_DISABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
is
(
await
getVideoTrackMuted
(
)
true
"
video
track
is
muted
"
)
;
Assert
.
deepEqual
(
await
getVideoTrackEvents
(
)
[
"
mute
"
]
"
mute
fired
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setCameraMuted
(
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_ENABLED
"
video
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
is
(
await
getVideoTrackMuted
(
)
false
"
video
track
is
unmuted
"
)
;
Assert
.
deepEqual
(
await
getVideoTrackEvents
(
)
[
"
mute
"
"
unmute
"
]
"
unmute
fired
"
)
;
await
closeStream
(
)
;
}
}
{
desc
:
"
getUserMedia
audio
+
video
:
muting
the
microphone
shows
the
muted
indicator
"
run
:
async
function
checkMicrophoneMuted
(
)
{
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
true
true
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
is
(
await
getAudioTrackMuted
(
)
false
"
audio
track
starts
unmuted
"
)
;
Assert
.
deepEqual
(
await
getAudioTrackEvents
(
)
[
]
"
no
audio
track
events
fired
yet
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setMicrophoneMuted
(
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
microphone
=
=
STATE_CAPTURE_DISABLED
"
audio
should
be
muted
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_DISABLED
}
)
;
is
(
await
getAudioTrackMuted
(
)
true
"
audio
track
is
muted
"
)
;
Assert
.
deepEqual
(
await
getAudioTrackEvents
(
)
[
"
mute
"
]
"
mute
fired
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setMicrophoneMuted
(
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
microphone
=
=
STATE_CAPTURE_ENABLED
"
audio
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
is
(
await
getAudioTrackMuted
(
)
false
"
audio
track
is
unmuted
"
)
;
Assert
.
deepEqual
(
await
getAudioTrackEvents
(
)
[
"
mute
"
"
unmute
"
]
"
unmute
fired
"
)
;
await
closeStream
(
)
;
}
}
{
desc
:
"
getUserMedia
audio
+
video
:
disabling
&
muting
camera
in
combination
"
run
:
async
function
checkDisabledMutedCombination
(
)
{
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
true
true
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setTrackEnabled
(
null
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_DISABLED
"
video
should
be
disabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_DISABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
is
(
await
getVideoTrackMuted
(
)
false
"
video
track
still
unmuted
"
)
;
Assert
.
deepEqual
(
await
getVideoTrackEvents
(
)
[
]
"
no
video
track
events
fired
yet
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
2
)
;
await
setCameraMuted
(
true
)
;
await
setTrackEnabled
(
false
null
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
microphone
=
=
STATE_CAPTURE_DISABLED
"
audio
should
be
disabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_DISABLED
audio
:
STATE_CAPTURE_DISABLED
}
)
;
is
(
await
getVideoTrackMuted
(
)
true
"
video
track
is
muted
"
)
;
Assert
.
deepEqual
(
await
getVideoTrackEvents
(
)
[
"
mute
"
]
"
mute
is
still
fired
even
though
track
was
disabled
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
2
)
;
await
setTrackEnabled
(
true
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
microphone
=
=
STATE_CAPTURE_ENABLED
"
audio
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_DISABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
is
(
await
getVideoTrackMuted
(
)
true
"
video
track
is
still
muted
"
)
;
Assert
.
deepEqual
(
await
getVideoTrackEvents
(
)
[
"
mute
"
]
"
no
new
events
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setCameraMuted
(
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_ENABLED
"
video
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
is
(
await
getVideoTrackMuted
(
)
false
"
video
track
is
unmuted
"
)
;
Assert
.
deepEqual
(
await
getVideoTrackEvents
(
)
[
"
mute
"
"
unmute
"
]
"
unmute
fired
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
3
)
;
await
setCameraMuted
(
true
)
;
await
setTrackEnabled
(
false
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_DISABLED
"
video
should
be
disabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_DISABLED
audio
:
STATE_CAPTURE_DISABLED
}
)
;
is
(
await
getVideoTrackMuted
(
)
true
"
video
track
is
muted
"
)
;
Assert
.
deepEqual
(
await
getVideoTrackEvents
(
)
[
"
mute
"
"
unmute
"
"
mute
"
]
"
mute
fired
afain
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
2
)
;
await
setCameraMuted
(
false
)
;
await
setTrackEnabled
(
true
null
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
microphone
=
=
STATE_CAPTURE_ENABLED
"
audio
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_DISABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
is
(
await
getVideoTrackMuted
(
)
false
"
video
track
is
unmuted
"
)
;
Assert
.
deepEqual
(
await
getVideoTrackEvents
(
)
[
"
mute
"
"
unmute
"
"
mute
"
"
unmute
"
]
"
unmute
fired
even
though
track
is
disabled
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setTrackEnabled
(
null
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_ENABLED
"
video
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
is
(
await
getVideoTrackMuted
(
)
false
"
video
track
remains
unmuted
"
)
;
Assert
.
deepEqual
(
await
getVideoTrackEvents
(
)
[
"
mute
"
"
unmute
"
"
mute
"
"
unmute
"
]
"
no
new
events
fired
"
)
;
await
closeStream
(
)
;
}
}
{
desc
:
"
getUserMedia
audio
+
video
:
disabling
&
muting
microphone
in
combination
"
run
:
async
function
checkDisabledMutedCombination
(
)
{
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
true
true
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setTrackEnabled
(
false
null
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
microphone
=
=
STATE_CAPTURE_DISABLED
"
audio
should
be
disabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_DISABLED
}
)
;
is
(
await
getAudioTrackMuted
(
)
false
"
audio
track
still
unmuted
"
)
;
Assert
.
deepEqual
(
await
getAudioTrackEvents
(
)
[
]
"
no
audio
track
events
fired
yet
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
2
)
;
await
setMicrophoneMuted
(
true
)
;
await
setTrackEnabled
(
null
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_DISABLED
"
camera
should
be
disabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_DISABLED
audio
:
STATE_CAPTURE_DISABLED
}
)
;
is
(
await
getAudioTrackMuted
(
)
true
"
audio
track
is
muted
"
)
;
Assert
.
deepEqual
(
await
getAudioTrackEvents
(
)
[
"
mute
"
]
"
mute
is
still
fired
even
though
track
was
disabled
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
2
)
;
await
setTrackEnabled
(
true
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_ENABLED
"
video
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_DISABLED
}
)
;
is
(
await
getAudioTrackMuted
(
)
true
"
audio
track
is
still
muted
"
)
;
Assert
.
deepEqual
(
await
getAudioTrackEvents
(
)
[
"
mute
"
]
"
no
new
events
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setMicrophoneMuted
(
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
microphone
=
=
STATE_CAPTURE_ENABLED
"
audio
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
is
(
await
getAudioTrackMuted
(
)
false
"
audio
track
is
unmuted
"
)
;
Assert
.
deepEqual
(
await
getAudioTrackEvents
(
)
[
"
mute
"
"
unmute
"
]
"
unmute
fired
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
3
)
;
await
setMicrophoneMuted
(
true
)
;
await
setTrackEnabled
(
false
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
microphone
=
=
STATE_CAPTURE_DISABLED
"
audio
should
be
disabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_DISABLED
audio
:
STATE_CAPTURE_DISABLED
}
)
;
is
(
await
getAudioTrackMuted
(
)
true
"
audio
track
is
muted
"
)
;
Assert
.
deepEqual
(
await
getAudioTrackEvents
(
)
[
"
mute
"
"
unmute
"
"
mute
"
]
"
mute
fired
again
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
2
)
;
await
setMicrophoneMuted
(
false
)
;
await
setTrackEnabled
(
null
true
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
camera
=
=
STATE_CAPTURE_ENABLED
"
video
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_DISABLED
}
)
;
is
(
await
getAudioTrackMuted
(
)
false
"
audio
track
is
unmuted
"
)
;
Assert
.
deepEqual
(
await
getAudioTrackEvents
(
)
[
"
mute
"
"
unmute
"
"
mute
"
"
unmute
"
]
"
unmute
fired
even
though
track
is
disabled
"
)
;
observerPromise
=
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
await
setTrackEnabled
(
true
null
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
window
.
gIdentityHandler
.
_sharingState
.
webRTC
.
microphone
=
=
STATE_CAPTURE_ENABLED
"
audio
should
be
enabled
"
)
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
STATE_CAPTURE_ENABLED
audio
:
STATE_CAPTURE_ENABLED
}
)
;
is
(
await
getAudioTrackMuted
(
)
false
"
audio
track
remains
unmuted
"
)
;
Assert
.
deepEqual
(
await
getAudioTrackEvents
(
)
[
"
mute
"
"
unmute
"
"
mute
"
"
unmute
"
]
"
no
new
events
fired
"
)
;
await
closeStream
(
)
;
}
}
]
;
add_task
(
async
function
test
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
media
.
getusermedia
.
camera
.
off_while_disabled
.
delay_ms
"
0
]
[
"
media
.
getusermedia
.
microphone
.
off_while_disabled
.
delay_ms
"
0
]
]
}
)
;
SimpleTest
.
requestCompleteLog
(
)
;
await
runTests
(
gTests
)
;
}
)
;
