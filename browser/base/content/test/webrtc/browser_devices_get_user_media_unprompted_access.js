const
permissionError
=
"
error
:
NotAllowedError
:
The
request
is
not
allowed
"
+
"
by
the
user
agent
or
the
platform
in
the
current
context
.
"
;
var
gTests
=
[
{
desc
:
"
getUserMedia
audio
+
camera
"
run
:
function
*
checkAudioVideoWhileLiveTracksExist_audio_camera
(
)
{
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
yield
promiseRequestDevice
(
true
true
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
yield
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstChild
.
button
.
click
(
)
;
}
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
yield
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
Assert
.
deepEqual
(
(
yield
getMediaCaptureState
(
)
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
yield
indicator
;
yield
checkSharingUI
(
{
audio
:
true
video
:
true
}
)
;
promise
=
promiseMessage
(
"
ok
"
)
;
yield
promiseRequestDevice
(
true
true
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
yield
promiseNoPopupNotification
(
"
webRTC
-
shareDevices
"
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
yield
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
Assert
.
deepEqual
(
(
yield
getMediaCaptureState
(
)
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
yield
checkSharingUI
(
{
audio
:
true
video
:
true
}
)
;
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
yield
promiseRequestDevice
(
false
true
null
"
screen
"
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
is
(
PopupNotifications
.
getNotification
(
"
webRTC
-
shareDevices
"
)
.
anchorID
"
webRTC
-
shareScreen
-
notification
-
icon
"
"
anchored
to
device
icon
"
)
;
checkDeviceSelectors
(
false
false
true
)
;
yield
promiseMessage
(
permissionError
(
)
=
>
{
PopupNotifications
.
panel
.
firstChild
.
button
.
click
(
)
;
}
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
deny
"
)
;
SitePermissions
.
remove
(
null
"
screen
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
camera
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
microphone
"
gBrowser
.
selectedBrowser
)
;
yield
closeStream
(
)
;
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
yield
promiseRequestDevice
(
true
true
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
checkDeviceSelectors
(
true
true
)
;
yield
promiseMessage
(
permissionError
(
)
=
>
{
activateSecondaryAction
(
kActionDeny
)
;
}
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
deny
"
)
;
yield
expectObserverCalled
(
"
recording
-
window
-
ended
"
)
;
yield
checkNotSharing
(
)
;
SitePermissions
.
remove
(
null
"
screen
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
camera
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
microphone
"
gBrowser
.
selectedBrowser
)
;
}
}
{
desc
:
"
getUserMedia
camera
"
run
:
function
*
checkAudioVideoWhileLiveTracksExist_camera
(
)
{
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
yield
promiseRequestDevice
(
false
true
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
yield
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstChild
.
button
.
click
(
)
;
}
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
yield
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
Assert
.
deepEqual
(
(
yield
getMediaCaptureState
(
)
)
{
video
:
true
}
"
expected
camera
to
be
shared
"
)
;
yield
indicator
;
yield
checkSharingUI
(
{
audio
:
false
video
:
true
}
)
;
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
yield
promiseRequestDevice
(
true
false
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
checkDeviceSelectors
(
true
false
)
;
yield
promiseMessage
(
permissionError
(
)
=
>
{
activateSecondaryAction
(
kActionDeny
)
;
}
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
deny
"
)
;
SitePermissions
.
remove
(
null
"
screen
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
camera
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
microphone
"
gBrowser
.
selectedBrowser
)
;
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
yield
promiseRequestDevice
(
true
true
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
checkDeviceSelectors
(
true
true
)
;
yield
promiseMessage
(
permissionError
(
)
=
>
{
activateSecondaryAction
(
kActionDeny
)
;
}
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
deny
"
)
;
SitePermissions
.
remove
(
null
"
screen
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
camera
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
microphone
"
gBrowser
.
selectedBrowser
)
;
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
yield
promiseRequestDevice
(
false
true
null
"
screen
"
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
is
(
PopupNotifications
.
getNotification
(
"
webRTC
-
shareDevices
"
)
.
anchorID
"
webRTC
-
shareScreen
-
notification
-
icon
"
"
anchored
to
device
icon
"
)
;
checkDeviceSelectors
(
false
false
true
)
;
yield
promiseMessage
(
permissionError
(
)
=
>
{
PopupNotifications
.
panel
.
firstChild
.
button
.
click
(
)
;
}
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
deny
"
)
;
SitePermissions
.
remove
(
null
"
screen
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
camera
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
microphone
"
gBrowser
.
selectedBrowser
)
;
promise
=
promiseMessage
(
"
ok
"
)
;
yield
promiseRequestDevice
(
false
true
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
yield
promiseNoPopupNotification
(
"
webRTC
-
shareDevices
"
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
yield
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
Assert
.
deepEqual
(
(
yield
getMediaCaptureState
(
)
)
{
video
:
true
}
"
expected
camera
to
be
shared
"
)
;
yield
checkSharingUI
(
{
audio
:
false
video
:
true
}
)
;
yield
closeStream
(
)
;
}
}
{
desc
:
"
getUserMedia
audio
"
run
:
function
*
checkAudioVideoWhileLiveTracksExist_audio
(
)
{
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
yield
promiseRequestDevice
(
true
false
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
yield
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstChild
.
button
.
click
(
)
;
}
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
yield
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
Assert
.
deepEqual
(
(
yield
getMediaCaptureState
(
)
)
{
audio
:
true
}
"
expected
microphone
to
be
shared
"
)
;
yield
indicator
;
yield
checkSharingUI
(
{
audio
:
true
video
:
false
}
)
;
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
yield
promiseRequestDevice
(
false
true
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
checkDeviceSelectors
(
false
true
)
;
yield
promiseMessage
(
permissionError
(
)
=
>
{
activateSecondaryAction
(
kActionDeny
)
;
}
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
deny
"
)
;
SitePermissions
.
remove
(
null
"
screen
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
camera
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
microphone
"
gBrowser
.
selectedBrowser
)
;
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
yield
promiseRequestDevice
(
true
true
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
checkDeviceSelectors
(
true
true
)
;
yield
promiseMessage
(
permissionError
(
)
=
>
{
activateSecondaryAction
(
kActionDeny
)
;
}
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
deny
"
)
;
SitePermissions
.
remove
(
null
"
screen
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
camera
"
gBrowser
.
selectedBrowser
)
;
SitePermissions
.
remove
(
null
"
microphone
"
gBrowser
.
selectedBrowser
)
;
promise
=
promiseMessage
(
"
ok
"
)
;
yield
promiseRequestDevice
(
true
false
)
;
yield
promise
;
yield
expectObserverCalled
(
"
getUserMedia
:
request
"
)
;
yield
promiseNoPopupNotification
(
"
webRTC
-
shareDevices
"
)
;
yield
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
)
;
yield
expectObserverCalled
(
"
recording
-
device
-
events
"
)
;
Assert
.
deepEqual
(
(
yield
getMediaCaptureState
(
)
)
{
audio
:
true
}
"
expected
microphone
to
be
shared
"
)
;
yield
checkSharingUI
(
{
audio
:
true
video
:
false
}
)
;
yield
closeStream
(
)
;
}
}
]
;
add_task
(
async
function
test
(
)
{
await
runTests
(
gTests
)
;
}
)
;
