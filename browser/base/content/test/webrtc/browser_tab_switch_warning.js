"
use
strict
"
;
const
NEW_BACKGROUND_TABS_TO_OPEN
=
5
;
const
WARNING_PANEL_ID
=
"
sharing
-
tabs
-
warning
-
panel
"
;
const
ALLOW_BUTTON_ID
=
"
sharing
-
warning
-
proceed
-
to
-
tab
"
;
const
DISABLE_WARNING_FOR_SESSION_CHECKBOX_ID
=
"
sharing
-
warning
-
disable
-
for
-
session
"
;
const
WINDOW_SHARING_HEADER_ID
=
"
sharing
-
warning
-
window
-
panel
-
header
"
;
const
SCREEN_SHARING_HEADER_ID
=
"
sharing
-
warning
-
screen
-
panel
-
header
"
;
const
WARNING_PANEL_TIMEOUT_MS
=
1000
;
const
CTRL_TAB_RUO_PREF
=
"
browser
.
ctrlTab
.
sortByRecentlyUsed
"
;
async
function
pretendToShareDisplay
(
doFirstTabSwitch
)
{
Assert
.
equal
(
gBrowser
.
selectedTab
gBrowser
.
tabs
[
0
]
"
Should
start
on
the
first
tab
.
"
)
;
webrtcUI
.
sharingDisplay
=
true
;
if
(
doFirstTabSwitch
)
{
await
BrowserTestUtils
.
switchTab
(
gBrowser
gBrowser
.
tabs
[
1
]
)
;
}
}
async
function
pretendToShareWindow
(
aWindow
doFirstTabSwitch
=
true
)
{
webrtcUI
.
sharedBrowserWindows
.
add
(
aWindow
)
;
await
pretendToShareDisplay
(
doFirstTabSwitch
)
;
}
async
function
pretendToShareScreen
(
doFirstTabSwitch
=
true
)
{
webrtcUI
.
sharingScreen
=
true
;
await
pretendToShareDisplay
(
doFirstTabSwitch
)
;
}
async
function
resetDisplaySharingState
(
)
{
let
firstTabBC
=
gBrowser
.
browsers
[
0
]
.
browsingContext
;
webrtcUI
.
streamAddedOrRemoved
(
firstTabBC
{
remove
:
true
}
)
;
if
(
gBrowser
.
selectedTab
!
=
=
gBrowser
.
tabs
[
0
]
)
{
await
BrowserTestUtils
.
switchTab
(
gBrowser
gBrowser
.
tabs
[
0
]
)
;
}
let
panel
=
document
.
getElementById
(
WARNING_PANEL_ID
)
;
if
(
panel
&
&
(
panel
.
state
=
=
"
open
"
|
|
panel
.
state
=
=
"
showing
"
)
)
{
info
(
"
Closing
the
warning
panel
.
"
)
;
let
panelHidden
=
BrowserTestUtils
.
waitForEvent
(
panel
"
popuphidden
"
)
;
panel
.
hidePopup
(
)
;
await
panelHidden
;
}
}
async
function
ensureNoWarning
(
)
{
let
timerExpired
=
false
;
let
sawWarning
=
false
;
let
resolver
;
let
timeoutOrPopupShowingPromise
=
new
Promise
(
resolve
=
>
{
resolver
=
resolve
;
}
)
;
let
onPopupShowing
=
event
=
>
{
if
(
event
.
target
.
id
=
=
WARNING_PANEL_ID
)
{
sawWarning
=
true
;
resolver
(
)
;
}
}
;
window
.
addEventListener
(
"
popupshowing
"
onPopupShowing
)
;
let
timer
=
setTimeout
(
(
)
=
>
{
timerExpired
=
true
;
resolver
(
)
;
}
WARNING_PANEL_TIMEOUT_MS
)
;
await
timeoutOrPopupShowingPromise
;
clearTimeout
(
timer
)
;
window
.
removeEventListener
(
"
popupshowing
"
onPopupShowing
)
;
Assert
.
ok
(
timerExpired
"
Timer
should
have
expired
.
"
)
;
Assert
.
ok
(
!
sawWarning
"
Should
not
have
shown
the
tab
switch
warning
.
"
)
;
}
async
function
ensureWarning
(
tab
)
{
let
popupShowingEvent
=
await
BrowserTestUtils
.
waitForEvent
(
window
"
popupshowing
"
false
event
=
>
{
return
event
.
target
.
id
=
=
WARNING_PANEL_ID
;
}
)
;
let
panel
=
popupShowingEvent
.
target
;
Assert
.
equal
(
panel
.
anchorNode
tab
"
Expected
the
warning
to
be
anchored
to
the
right
tab
.
"
)
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
webrtc
.
sharedTabWarning
"
true
]
]
}
)
;
let
uris
=
new
Array
(
NEW_BACKGROUND_TABS_TO_OPEN
)
.
fill
(
"
about
:
blank
"
)
;
let
loadPromises
=
Promise
.
all
(
uris
.
map
(
uri
=
>
BrowserTestUtils
.
waitForNewTab
(
gBrowser
uri
false
true
)
)
)
;
gBrowser
.
loadTabs
(
uris
{
inBackground
:
true
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
await
loadPromises
;
registerCleanupFunction
(
async
(
)
=
>
{
await
resetDisplaySharingState
(
)
;
gBrowser
.
removeAllTabsBut
(
gBrowser
.
tabs
[
0
]
)
;
}
)
;
}
)
;
add_task
(
async
function
testFirstTabSwitchAllowed
(
)
{
pretendToShareWindow
(
window
false
)
;
let
targetTab
=
gBrowser
.
tabs
[
1
]
;
let
noWarningPromise
=
ensureNoWarning
(
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
targetTab
)
;
await
noWarningPromise
;
await
resetDisplaySharingState
(
)
;
}
)
;
add_task
(
async
function
testWarningOnSecondTabSwitch
(
)
{
pretendToShareWindow
(
window
)
;
let
originalTab
=
gBrowser
.
selectedTab
;
let
targetTab
=
gBrowser
.
tabs
[
2
]
;
let
warningPromise
=
ensureWarning
(
targetTab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
targetTab
)
;
await
warningPromise
;
Assert
.
equal
(
gBrowser
.
selectedTab
originalTab
"
Should
still
be
on
the
original
tab
.
"
)
;
let
tabSwitchPromise
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
"
TabSwitchDone
"
)
;
let
allowButton
=
document
.
getElementById
(
ALLOW_BUTTON_ID
)
;
allowButton
.
click
(
)
;
await
tabSwitchPromise
;
Assert
.
equal
(
gBrowser
.
selectedTab
targetTab
"
Should
have
switched
tabs
to
the
target
.
"
)
;
let
noWarningPromise
=
ensureNoWarning
(
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
originalTab
)
;
await
noWarningPromise
;
Assert
.
equal
(
gBrowser
.
selectedTab
originalTab
"
Should
have
switched
tabs
back
to
the
original
tab
.
"
)
;
noWarningPromise
=
ensureNoWarning
(
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
targetTab
)
;
await
noWarningPromise
;
Assert
.
equal
(
gBrowser
.
selectedTab
targetTab
"
Should
have
switched
tabs
back
to
the
target
tab
.
"
)
;
await
resetDisplaySharingState
(
)
;
pretendToShareWindow
(
window
)
;
warningPromise
=
ensureWarning
(
targetTab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
targetTab
)
;
await
warningPromise
;
await
resetDisplaySharingState
(
)
;
}
)
;
add_task
(
async
function
testDisableWarningForSession
(
)
{
pretendToShareWindow
(
window
)
;
let
targetTab
=
gBrowser
.
tabs
[
2
]
;
let
warningPromise
=
ensureWarning
(
targetTab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
targetTab
)
;
await
warningPromise
;
let
checkbox
=
document
.
getElementById
(
DISABLE_WARNING_FOR_SESSION_CHECKBOX_ID
)
;
checkbox
.
checked
=
true
;
let
tabSwitchPromise
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
"
TabSwitchDone
"
)
;
let
allowButton
=
document
.
getElementById
(
ALLOW_BUTTON_ID
)
;
allowButton
.
click
(
)
;
await
tabSwitchPromise
;
Assert
.
equal
(
gBrowser
.
selectedTab
targetTab
"
Should
have
switched
tabs
to
the
target
tab
.
"
)
;
let
noWarningPromise
=
ensureNoWarning
(
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
gBrowser
.
tabs
[
3
]
)
;
await
noWarningPromise
;
noWarningPromise
=
ensureNoWarning
(
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
gBrowser
.
tabs
[
4
]
)
;
await
noWarningPromise
;
await
resetDisplaySharingState
(
)
;
pretendToShareWindow
(
window
)
;
warningPromise
=
ensureWarning
(
targetTab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
targetTab
)
;
await
warningPromise
;
await
resetDisplaySharingState
(
)
;
}
)
;
add_task
(
async
function
testOtherWindow
(
)
{
let
otherWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
SimpleTest
.
promiseFocus
(
window
)
;
pretendToShareWindow
(
otherWin
)
;
let
noWarningPromise
=
ensureNoWarning
(
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
gBrowser
.
tabs
[
3
]
)
;
await
noWarningPromise
;
noWarningPromise
=
ensureNoWarning
(
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
gBrowser
.
tabs
[
4
]
)
;
await
noWarningPromise
;
await
BrowserTestUtils
.
closeWindow
(
otherWin
)
;
await
resetDisplaySharingState
(
)
;
}
)
;
add_task
(
async
function
testWindowVsScreenLabel
(
)
{
pretendToShareWindow
(
window
)
;
let
targetTab
=
gBrowser
.
tabs
[
2
]
;
let
warningPromise
=
ensureWarning
(
targetTab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
targetTab
)
;
await
warningPromise
;
let
windowHeader
=
document
.
getElementById
(
WINDOW_SHARING_HEADER_ID
)
;
let
screenHeader
=
document
.
getElementById
(
SCREEN_SHARING_HEADER_ID
)
;
Assert
.
ok
(
!
BrowserTestUtils
.
is_hidden
(
windowHeader
)
"
Should
be
showing
window
sharing
header
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
screenHeader
)
"
Should
not
be
showing
screen
sharing
header
"
)
;
await
resetDisplaySharingState
(
)
;
pretendToShareScreen
(
)
;
warningPromise
=
ensureWarning
(
targetTab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
targetTab
)
;
await
warningPromise
;
Assert
.
ok
(
BrowserTestUtils
.
is_hidden
(
windowHeader
)
"
Should
not
be
showing
window
sharing
header
"
)
;
Assert
.
ok
(
!
BrowserTestUtils
.
is_hidden
(
screenHeader
)
"
Should
be
showing
screen
sharing
header
"
)
;
await
resetDisplaySharingState
(
)
;
}
)
;
add_task
(
async
function
testKeyboardTabSwitching
(
)
{
let
pressCtrlTab
=
async
(
expectPanel
=
false
)
=
>
{
let
promise
;
if
(
expectPanel
)
{
promise
=
BrowserTestUtils
.
waitForEvent
(
ctrlTab
.
panel
"
popupshown
"
)
;
}
else
{
promise
=
BrowserTestUtils
.
waitForEvent
(
document
"
keyup
"
)
;
}
EventUtils
.
synthesizeKey
(
"
VK_TAB
"
{
ctrlKey
:
true
shiftKey
:
false
}
)
;
await
promise
;
}
;
let
releaseCtrl
=
async
(
)
=
>
{
let
promise
;
if
(
ctrlTab
.
isOpen
)
{
promise
=
BrowserTestUtils
.
waitForEvent
(
ctrlTab
.
panel
"
popuphidden
"
)
;
}
else
{
promise
=
BrowserTestUtils
.
waitForEvent
(
document
"
keyup
"
)
;
}
EventUtils
.
synthesizeKey
(
"
VK_CONTROL
"
{
type
:
"
keyup
"
}
)
;
return
promise
;
}
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
CTRL_TAB_RUO_PREF
true
]
]
}
)
;
pretendToShareWindow
(
window
)
;
let
originalTab
=
gBrowser
.
selectedTab
;
await
pressCtrlTab
(
true
)
;
let
targetTab
=
ctrlTab
.
tabList
[
2
]
;
await
pressCtrlTab
(
)
;
let
warningPromise
=
ensureWarning
(
targetTab
)
;
await
releaseCtrl
(
)
;
await
warningPromise
;
let
panel
=
document
.
getElementById
(
WARNING_PANEL_ID
)
;
panel
.
hidePopup
(
)
;
Assert
.
equal
(
gBrowser
.
selectedTab
originalTab
"
Should
not
have
changed
from
the
original
tab
.
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
CTRL_TAB_RUO_PREF
false
]
]
}
)
;
targetTab
=
gBrowser
.
tabs
[
2
]
;
warningPromise
=
ensureWarning
(
targetTab
)
;
await
pressCtrlTab
(
)
;
await
warningPromise
;
await
resetDisplaySharingState
(
)
;
}
)
;
