SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
featurePolicy
.
enabled
"
true
]
[
"
permissions
.
delegation
.
enabled
"
true
]
]
}
)
;
let
gShouldObserveSubframes
;
var
gTests
=
[
{
desc
:
"
getUserMedia
audio
+
video
"
run
:
async
function
checkAudioVideo
(
)
{
let
frame1BC
=
gShouldObserveSubframes
?
gBrowser
.
selectedBrowser
.
browsingContext
.
getChildren
(
)
[
0
]
:
undefined
;
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
1
frame1BC
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
"
frame1
"
)
;
await
promise
;
await
observerPromise
;
is
(
PopupNotifications
.
getNotification
(
"
webRTC
-
shareDevices
"
)
.
anchorID
"
webRTC
-
shareDevices
-
notification
-
icon
"
"
anchored
to
device
icon
"
)
;
checkDeviceSelectors
(
true
true
)
;
is
(
PopupNotifications
.
panel
.
firstElementChild
.
getAttribute
(
"
popupid
"
)
"
webRTC
-
shareDevices
"
"
panel
using
devices
icon
"
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
1
frame1BC
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
1
frame1BC
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
audio
:
true
video
:
true
}
)
;
await
closeStream
(
false
"
frame1
"
)
;
}
}
{
desc
:
"
getUserMedia
audio
+
video
:
stop
sharing
"
run
:
async
function
checkStopSharing
(
)
{
let
frame1BC
=
gShouldObserveSubframes
?
gBrowser
.
selectedBrowser
.
browsingContext
.
getChildren
(
)
[
0
]
:
undefined
;
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
1
frame1BC
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
"
frame1
"
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
true
true
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
1
frame1BC
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
1
frame1BC
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
activateSecondaryAction
(
kActionAlways
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
video
:
true
audio
:
true
}
)
;
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
/
"
)
;
is
(
PermissionTestUtils
.
testExactPermission
(
uri
"
microphone
"
)
Services
.
perms
.
ALLOW_ACTION
"
microphone
persistently
allowed
"
)
;
is
(
PermissionTestUtils
.
testExactPermission
(
uri
"
camera
"
)
Services
.
perms
.
ALLOW_ACTION
"
camera
persistently
allowed
"
)
;
await
stopSharing
(
"
camera
"
false
frame1BC
)
;
is
(
PermissionTestUtils
.
testExactPermission
(
uri
"
microphone
"
)
Services
.
perms
.
UNKNOWN_ACTION
"
microphone
not
persistently
allowed
"
)
;
is
(
PermissionTestUtils
.
testExactPermission
(
uri
"
camera
"
)
Services
.
perms
.
UNKNOWN_ACTION
"
camera
not
persistently
allowed
"
)
;
await
closeStream
(
true
"
frame1
"
)
;
}
}
{
desc
:
"
getUserMedia
audio
+
video
:
reloading
the
frame
removes
all
sharing
UI
"
run
:
async
function
checkReloading
(
)
{
let
frame1BC
=
gShouldObserveSubframes
?
gBrowser
.
selectedBrowser
.
browsingContext
.
getChildren
(
)
[
0
]
:
undefined
;
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
1
frame1BC
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
"
frame1
"
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
true
true
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
1
frame1BC
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
1
frame1BC
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
video
:
true
audio
:
true
}
)
;
await
disableObserverVerification
(
)
;
info
(
"
reloading
the
frame
"
)
;
let
promises
=
[
expectObserverCalledOnClose
(
"
recording
-
device
-
stopped
"
1
frame1BC
)
expectObserverCalledOnClose
(
"
recording
-
device
-
events
"
1
frame1BC
)
expectObserverCalledOnClose
(
"
recording
-
window
-
ended
"
1
frame1BC
)
]
;
await
promiseReloadFrame
(
"
frame1
"
)
;
await
Promise
.
all
(
promises
)
;
await
enableObserverVerification
(
)
;
await
checkNotSharing
(
)
;
}
}
{
desc
:
"
getUserMedia
audio
+
video
:
reloading
the
frame
removes
prompts
"
run
:
async
function
checkReloadingRemovesPrompts
(
)
{
let
frame1BC
=
gShouldObserveSubframes
?
gBrowser
.
selectedBrowser
.
browsingContext
.
getChildren
(
)
[
0
]
:
undefined
;
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
1
frame1BC
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
"
frame1
"
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
true
true
)
;
info
(
"
reloading
the
frame
"
)
;
promise
=
expectObserverCalledOnClose
(
"
recording
-
window
-
ended
"
1
frame1BC
)
;
await
promiseReloadFrame
(
"
frame1
"
)
;
await
promise
;
await
promiseNoPopupNotification
(
"
webRTC
-
shareDevices
"
)
;
await
checkNotSharing
(
)
;
}
}
{
desc
:
"
getUserMedia
audio
+
video
:
with
two
frames
sharing
at
the
same
time
sharing
UI
shows
all
shared
devices
"
run
:
async
function
checkFrameOverridingSharingUI
(
)
{
let
frame1BC
=
gShouldObserveSubframes
?
gBrowser
.
selectedBrowser
.
browsingContext
.
getChildren
(
)
[
0
]
:
undefined
;
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
1
frame1BC
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
"
frame1
"
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
true
true
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
1
frame1BC
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
1
frame1BC
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
video
:
true
audio
:
true
}
)
;
let
frame2BC
=
gShouldObserveSubframes
?
gBrowser
.
selectedBrowser
.
browsingContext
.
getChildren
(
)
[
1
]
:
undefined
;
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
1
frame2BC
)
;
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
false
true
"
frame2
"
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
false
true
)
;
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
1
frame2BC
)
;
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
1
frame2BC
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
checkSharingUI
(
{
video
:
true
audio
:
true
}
)
;
observerPromise
=
expectObserverCalledOnClose
(
"
recording
-
window
-
ended
"
1
frame2BC
)
;
promise
=
expectObserverCalledOnClose
(
"
recording
-
device
-
events
"
1
frame2BC
)
;
await
promiseReloadFrame
(
"
frame2
"
)
;
await
promise
;
await
observerPromise
;
await
checkSharingUI
(
{
video
:
true
audio
:
true
}
)
;
await
closeStream
(
false
"
frame1
"
)
;
await
checkNotSharing
(
)
;
}
}
{
desc
:
"
getUserMedia
audio
+
video
:
reloading
a
frame
updates
the
sharing
UI
"
run
:
async
function
checkUpdateWhenReloading
(
)
{
let
frame1BC
=
gShouldObserveSubframes
?
gBrowser
.
selectedBrowser
.
browsingContext
.
getChildren
(
)
[
0
]
:
undefined
;
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
1
frame1BC
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
false
true
"
frame1
"
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
false
true
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
1
frame1BC
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
1
frame1BC
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
video
:
true
}
"
expected
camera
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
video
:
true
audio
:
false
}
)
;
let
frame2BC
=
gShouldObserveSubframes
?
gBrowser
.
selectedBrowser
.
browsingContext
.
getChildren
(
)
[
1
]
:
undefined
;
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
1
frame2BC
)
;
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
"
frame2
"
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
true
true
)
;
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
1
frame2BC
)
;
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
1
frame2BC
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
checkSharingUI
(
{
video
:
true
audio
:
true
}
)
;
info
(
"
reloading
the
second
frame
"
)
;
observerPromise1
=
expectObserverCalledOnClose
(
"
recording
-
device
-
events
"
1
frame2BC
)
;
observerPromise2
=
expectObserverCalledOnClose
(
"
recording
-
window
-
ended
"
1
frame2BC
)
;
await
promiseReloadFrame
(
"
frame2
"
)
;
await
observerPromise1
;
await
observerPromise2
;
await
checkSharingUI
(
{
video
:
true
audio
:
false
}
)
;
await
closeStream
(
false
"
frame1
"
)
;
await
checkNotSharing
(
)
;
}
}
{
desc
:
"
getUserMedia
audio
+
video
:
reloading
the
top
level
page
removes
all
sharing
UI
"
run
:
async
function
checkReloading
(
)
{
let
frame1BC
=
gShouldObserveSubframes
?
gBrowser
.
selectedBrowser
.
browsingContext
.
getChildren
(
)
[
0
]
:
undefined
;
let
observerPromise
=
expectObserverCalled
(
"
getUserMedia
:
request
"
1
frame1BC
)
;
let
promise
=
promisePopupNotificationShown
(
"
webRTC
-
shareDevices
"
)
;
await
promiseRequestDevice
(
true
true
"
frame1
"
)
;
await
promise
;
await
observerPromise
;
checkDeviceSelectors
(
true
true
)
;
let
indicator
=
promiseIndicatorWindow
(
)
;
let
observerPromise1
=
expectObserverCalled
(
"
getUserMedia
:
response
:
allow
"
1
frame1BC
)
;
let
observerPromise2
=
expectObserverCalled
(
"
recording
-
device
-
events
"
1
frame1BC
)
;
await
promiseMessage
(
"
ok
"
(
)
=
>
{
PopupNotifications
.
panel
.
firstElementChild
.
button
.
click
(
)
;
}
)
;
await
observerPromise1
;
await
observerPromise2
;
Assert
.
deepEqual
(
await
getMediaCaptureState
(
)
{
audio
:
true
video
:
true
}
"
expected
camera
and
microphone
to
be
shared
"
)
;
await
indicator
;
await
checkSharingUI
(
{
video
:
true
audio
:
true
}
)
;
await
reloadAndAssertClosedStreams
(
)
;
}
}
]
;
add_task
(
async
function
test_inprocess
(
)
{
await
runTests
(
gTests
{
relativeURI
:
"
get_user_media_in_frame
.
html
"
}
)
;
}
)
;
add_task
(
async
function
test_outofprocess
(
)
{
gShouldObserveSubframes
=
Services
.
prefs
.
getBoolPref
(
"
fission
.
autostart
"
)
;
let
observeSubFrameIds
=
gShouldObserveSubframes
?
[
"
frame1
"
"
frame2
"
]
:
[
]
;
await
runTests
(
gTests
{
relativeURI
:
"
get_user_media_in_oop_frame
.
html
"
observeSubFrameIds
}
)
;
}
)
;
