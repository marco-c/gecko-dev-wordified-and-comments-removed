const
HTTPS_ONLY_PERMISSION
=
"
https
-
only
-
load
-
insecure
"
;
const
WEBSITE
=
scheme
=
>
{
scheme
}
:
/
/
example
.
com
;
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_only_mode
"
true
]
]
}
)
;
await
runTest
(
{
name
:
"
No
HTTPS
-
Only
UI
"
initialScheme
:
"
https
"
initialPermission
:
0
permissionScheme
:
"
https
"
isUiVisible
:
false
}
)
;
await
runTest
(
{
name
:
"
Add
HTTPS
-
Only
exemption
"
initialScheme
:
"
http
"
initialPermission
:
0
permissionScheme
:
"
https
"
isUiVisible
:
true
selectPermission
:
1
expectReload
:
true
finalScheme
:
"
https
"
}
)
;
await
runTest
(
{
name
:
"
Switch
between
HTTPS
-
Only
exemption
modes
"
initialScheme
:
"
http
"
initialPermission
:
1
permissionScheme
:
"
http
"
isUiVisible
:
true
selectPermission
:
2
expectReload
:
false
finalScheme
:
"
http
"
}
)
;
await
runTest
(
{
name
:
"
Remove
HTTPS
-
Only
exemption
again
"
initialScheme
:
"
http
"
initialPermission
:
2
permissionScheme
:
"
http
"
isUiVisible
:
true
selectPermission
:
0
expectReload
:
true
finalScheme
:
"
https
"
}
)
;
await
SpecialPowers
.
flushPrefEnv
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
https_first
"
true
]
]
}
)
;
await
runTest
(
{
name
:
"
No
HTTPS
-
Only
UI
"
initialScheme
:
"
https
"
initialPermission
:
0
permissionScheme
:
"
https
"
isUiVisible
:
false
}
)
;
await
runTest
(
{
name
:
"
Add
HTTPS
-
Only
exemption
"
initialScheme
:
"
http
"
initialPermission
:
0
permissionScheme
:
"
https
"
isUiVisible
:
true
selectPermission
:
1
expectReload
:
true
finalScheme
:
"
https
"
}
)
;
await
runTest
(
{
name
:
"
Switch
between
HTTPS
-
Only
exemption
modes
"
initialScheme
:
"
http
"
initialPermission
:
1
permissionScheme
:
"
http
"
isUiVisible
:
true
selectPermission
:
2
expectReload
:
false
finalScheme
:
"
http
"
}
)
;
await
runTest
(
{
name
:
"
Remove
HTTPS
-
Only
exemption
again
"
initialScheme
:
"
http
"
initialPermission
:
2
permissionScheme
:
"
http
"
isUiVisible
:
true
selectPermission
:
0
expectReload
:
true
finalScheme
:
"
https
"
}
)
;
}
)
;
async
function
runTest
(
options
)
{
setPermission
(
WEBSITE
(
options
.
permissionScheme
)
options
.
initialPermission
)
;
await
BrowserTestUtils
.
withNewTab
(
WEBSITE
(
options
.
initialScheme
)
async
function
(
browser
)
{
const
name
=
options
.
name
+
"
|
"
;
is
(
browser
.
currentURI
.
scheme
options
.
permissionScheme
name
+
"
Expected
scheme
should
match
actual
scheme
"
)
;
let
{
gIdentityHandler
}
=
gBrowser
.
ownerGlobal
;
let
promisePanelOpen
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
ownerGlobal
"
popupshown
"
true
event
=
>
event
.
target
=
=
gIdentityHandler
.
_identityPopup
)
;
gIdentityHandler
.
_identityIconBox
.
click
(
)
;
await
promisePanelOpen
;
const
httpsOnlyUI
=
document
.
getElementById
(
"
identity
-
popup
-
security
-
httpsonlymode
"
)
;
is
(
gBrowser
.
ownerGlobal
.
getComputedStyle
(
httpsOnlyUI
)
.
display
!
=
"
none
"
options
.
isUiVisible
options
.
isUiVisible
?
name
+
"
HTTPS
-
Only
UI
should
be
visible
.
"
:
name
+
"
HTTPS
-
Only
UI
shouldn
'
t
be
visible
.
"
)
;
if
(
!
options
.
isUiVisible
)
{
return
;
}
const
httpsOnlyMenulist
=
document
.
getElementById
(
"
identity
-
popup
-
security
-
httpsonlymode
-
menulist
"
)
;
is
(
parseInt
(
httpsOnlyMenulist
.
value
10
)
options
.
initialPermission
name
+
"
Menulist
value
should
match
expected
permission
value
.
"
)
;
if
(
options
.
expectReload
)
{
const
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
httpsOnlyMenulist
.
getItemAtIndex
(
options
.
selectPermission
)
.
doCommand
(
)
;
await
loaded
;
}
else
{
httpsOnlyMenulist
.
getItemAtIndex
(
options
.
selectPermission
)
.
doCommand
(
)
;
}
is
(
browser
.
currentURI
.
scheme
options
.
finalScheme
name
+
"
Unexpected
scheme
after
page
reloaded
.
"
)
;
is
(
getPermission
(
WEBSITE
(
options
.
permissionScheme
)
)
options
.
selectPermission
name
+
"
Set
permission
should
match
the
one
selected
from
the
menulist
.
"
)
;
}
)
;
Services
.
perms
.
removeAll
(
)
;
}
function
setPermission
(
url
newValue
)
{
let
uri
=
Services
.
io
.
newURI
(
url
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
}
)
;
if
(
newValue
=
=
=
0
)
{
Services
.
perms
.
removeFromPrincipal
(
principal
HTTPS_ONLY_PERMISSION
)
;
}
else
if
(
newValue
=
=
=
1
)
{
Services
.
perms
.
addFromPrincipal
(
principal
HTTPS_ONLY_PERMISSION
Ci
.
nsIHttpsOnlyModePermission
.
LOAD_INSECURE_ALLOW
Ci
.
nsIPermissionManager
.
EXPIRE_NEVER
)
;
}
else
{
Services
.
perms
.
addFromPrincipal
(
principal
HTTPS_ONLY_PERMISSION
Ci
.
nsIHttpsOnlyModePermission
.
LOAD_INSECURE_ALLOW_SESSION
Ci
.
nsIPermissionManager
.
EXPIRE_SESSION
)
;
}
}
function
getPermission
(
url
)
{
let
uri
=
Services
.
io
.
newURI
(
url
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
}
)
;
const
state
=
Services
.
perms
.
testPermissionFromPrincipal
(
principal
HTTPS_ONLY_PERMISSION
)
;
switch
(
state
)
{
case
Ci
.
nsIHttpsOnlyModePermission
.
LOAD_INSECURE_ALLOW_SESSION
:
return
2
;
case
Ci
.
nsIHttpsOnlyModePermission
.
LOAD_INSECURE_ALLOW
:
return
1
;
default
:
return
0
;
}
}
