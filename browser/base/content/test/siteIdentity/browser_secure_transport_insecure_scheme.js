add_task
(
async
function
(
)
{
let
uri
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
dummy_page
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
uri
async
browser
=
>
{
await
ContentTask
.
spawn
(
browser
null
async
(
)
=
>
{
let
debug
=
{
hello
:
"
world
"
}
;
let
blob
=
new
Blob
(
[
JSON
.
stringify
(
debug
null
2
)
]
{
type
:
"
application
/
json
"
}
)
;
let
blobUri
=
URL
.
createObjectURL
(
blob
)
;
content
.
document
.
location
=
blobUri
;
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
identityMode
=
window
.
document
.
getElementById
(
"
identity
-
box
"
)
.
className
;
is
(
identityMode
"
unknownIdentity
"
"
identity
should
be
'
unknown
'
"
)
;
}
)
;
}
)
;
function
startServer
(
cert
)
{
let
tlsServer
=
Cc
[
"
mozilla
.
org
/
network
/
tls
-
server
-
socket
;
1
"
]
.
createInstance
(
Ci
.
nsITLSServerSocket
)
;
tlsServer
.
init
(
-
1
true
-
1
)
;
tlsServer
.
serverCert
=
cert
;
let
input
output
;
let
listener
=
{
onSocketAccepted
(
socket
transport
)
{
let
connectionInfo
=
transport
.
securityInfo
.
QueryInterface
(
Ci
.
nsITLSServerConnectionInfo
)
;
connectionInfo
.
setSecurityObserver
(
listener
)
;
input
=
transport
.
openInputStream
(
0
0
0
)
;
output
=
transport
.
openOutputStream
(
0
0
0
)
;
}
onHandshakeDone
(
socket
status
)
{
input
.
asyncWait
(
{
onInputStreamReady
(
readyInput
)
{
try
{
let
request
=
NetUtil
.
readInputStreamToString
(
readyInput
readyInput
.
available
(
)
)
;
ok
(
request
.
startsWith
(
"
GET
"
)
&
&
request
.
includes
(
"
HTTP
/
1
.
1
"
)
"
expecting
an
HTTP
/
1
.
1
GET
request
"
)
;
let
response
=
"
HTTP
/
1
.
1
200
OK
\
r
\
nContent
-
Type
:
text
/
plain
\
r
\
n
"
+
"
Connection
:
Close
\
r
\
nContent
-
Length
:
2
\
r
\
n
\
r
\
nOK
"
;
output
.
write
(
response
response
.
length
)
;
}
catch
(
e
)
{
info
(
e
)
;
}
}
}
0
0
Services
.
tm
.
currentThread
)
;
}
onStopListening
(
)
{
input
.
close
(
)
;
output
.
close
(
)
;
}
}
;
tlsServer
.
setSessionTickets
(
false
)
;
tlsServer
.
asyncListen
(
listener
)
;
return
tlsServer
;
}
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
dns
.
disableIPv6
"
true
]
]
}
)
;
let
certService
=
Cc
[
"
mozilla
.
org
/
security
/
local
-
cert
-
service
;
1
"
]
.
getService
(
Ci
.
nsILocalCertService
)
;
let
certOverrideService
=
Cc
[
"
mozilla
.
org
/
security
/
certoverride
;
1
"
]
.
getService
(
Ci
.
nsICertOverrideService
)
;
let
cert
=
await
new
Promise
(
(
resolve
reject
)
=
>
{
certService
.
getOrCreateCert
(
"
http
-
over
-
https
-
proxy
"
{
handleCert
(
c
rv
)
{
if
(
!
Components
.
isSuccessCode
(
rv
)
)
{
reject
(
rv
)
;
return
;
}
resolve
(
c
)
;
}
}
)
;
}
)
;
let
server
=
startServer
(
cert
)
;
let
overrideBits
=
Ci
.
nsICertOverrideService
.
ERROR_UNTRUSTED
|
Ci
.
nsICertOverrideService
.
ERROR_MISMATCH
;
certOverrideService
.
rememberValidityOverride
(
"
localhost
"
server
.
port
cert
overrideBits
true
)
;
let
systemProxySettings
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsISystemProxySettings
]
)
mainThreadOnly
:
true
PACURI
:
null
getProxyForURI
:
(
aSpec
aScheme
aHost
aPort
)
=
>
{
return
HTTPS
localhost
:
{
server
.
port
}
;
}
}
;
let
oldProxyType
=
Services
.
prefs
.
getIntPref
(
"
network
.
proxy
.
type
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
Ci
.
nsIProtocolProxyService
.
PROXYCONFIG_SYSTEM
)
;
let
{
MockRegistrar
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
MockRegistrar
.
jsm
"
)
;
let
mockProxy
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
system
-
proxy
-
settings
;
1
"
systemProxySettings
)
;
registerCleanupFunction
(
(
)
=
>
{
certOverrideService
.
clearValidityOverride
(
"
localhost
"
server
.
port
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
oldProxyType
)
;
MockRegistrar
.
unregister
(
mockProxy
)
;
server
.
close
(
)
;
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
/
"
async
browser
=
>
{
let
identityMode
=
window
.
document
.
getElementById
(
"
identity
-
box
"
)
.
className
;
is
(
identityMode
"
notSecure
"
"
identity
should
be
'
not
secure
'
"
)
;
}
)
;
}
)
;
