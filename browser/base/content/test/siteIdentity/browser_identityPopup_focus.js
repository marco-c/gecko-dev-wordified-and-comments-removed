async
function
focusIdentityBox
(
)
{
gURLBar
.
inputField
.
focus
(
)
;
is
(
document
.
activeElement
gURLBar
.
inputField
"
urlbar
should
be
focused
"
)
;
const
focused
=
BrowserTestUtils
.
waitForEvent
(
gIdentityHandler
.
_identityIconBox
"
focus
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_TAB
"
{
shiftKey
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
ArrowRight
"
)
;
await
focused
;
}
add_task
(
async
function
testIdentityPopupFocusClick
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
accessibility
.
tabfocus
"
7
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
)
{
let
shown
=
BrowserTestUtils
.
waitForEvent
(
window
"
popupshown
"
true
event
=
>
event
.
target
=
=
gIdentityHandler
.
_identityPopup
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gIdentityHandler
.
_identityIconBox
{
}
)
;
await
shown
;
isnot
(
Services
.
focus
.
focusedElement
document
.
getElementById
(
"
identity
-
popup
-
security
-
expander
"
)
)
;
}
)
;
}
)
;
add_task
(
async
function
testIdentityPopupFocusKeyboard
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
accessibility
.
tabfocus
"
7
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
)
{
await
focusIdentityBox
(
)
;
let
shown
=
BrowserTestUtils
.
waitForEvent
(
window
"
popupshown
"
true
event
=
>
event
.
target
=
=
gIdentityHandler
.
_identityPopup
)
;
EventUtils
.
sendString
(
"
"
)
;
await
shown
;
is
(
Services
.
focus
.
focusedElement
document
.
getElementById
(
"
identity
-
popup
-
security
-
button
"
)
)
;
}
)
;
}
)
;
add_task
(
async
function
testSiteSecurityTabOrder
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
accessibility
.
tabfocus
"
7
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
)
{
await
focusIdentityBox
(
)
;
let
shown
=
BrowserTestUtils
.
waitForEvent
(
window
"
popupshown
"
true
event
=
>
event
.
target
=
=
gIdentityHandler
.
_identityPopup
)
;
EventUtils
.
sendString
(
"
"
)
;
await
shown
;
is
(
Services
.
focus
.
focusedElement
document
.
getElementById
(
"
identity
-
popup
-
security
-
button
"
)
)
;
let
securityView
=
document
.
getElementById
(
"
identity
-
popup
-
securityView
"
)
;
shown
=
BrowserTestUtils
.
waitForEvent
(
securityView
"
ViewShown
"
)
;
EventUtils
.
sendString
(
"
"
)
;
await
shown
;
let
customRootLearnMore
=
document
.
getElementById
(
"
identity
-
popup
-
custom
-
root
-
learn
-
more
"
)
;
is
(
Services
.
focus
.
focusedElement
customRootLearnMore
"
learn
more
option
for
custom
roots
is
focused
"
)
;
let
moreInfoButton
=
document
.
getElementById
(
"
identity
-
popup
-
more
-
info
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
gIdentityHandler
.
_identityPopup
"
focusin
"
)
;
EventUtils
.
sendKey
(
"
tab
"
)
;
await
focused
;
is
(
Services
.
focus
.
focusedElement
moreInfoButton
"
more
info
button
is
focused
"
)
;
let
backButton
=
gIdentityHandler
.
_identityPopup
.
querySelector
(
"
.
subviewbutton
-
back
"
)
;
focused
=
BrowserTestUtils
.
waitForEvent
(
gIdentityHandler
.
_identityPopup
"
focusin
"
)
;
EventUtils
.
sendKey
(
"
tab
"
)
;
await
focused
;
is
(
Services
.
focus
.
focusedElement
backButton
"
back
button
is
focused
"
)
;
}
)
;
}
)
;
