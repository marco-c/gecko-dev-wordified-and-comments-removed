const
kBaseURI
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
const
TEST_CASES
=
[
{
type
:
"
http
"
testURL
:
"
http
:
/
/
example
.
com
"
img_url
:
url
(
"
chrome
:
/
/
browser
/
skin
/
connection
-
mixed
-
active
-
loaded
.
svg
"
)
}
{
type
:
"
https
"
testURL
:
"
https
:
/
/
example
.
com
"
img_url
:
url
(
"
chrome
:
/
/
browser
/
skin
/
connection
-
secure
.
svg
"
)
}
{
type
:
"
non
-
chrome
about
page
"
testURL
:
"
about
:
about
"
img_url
:
url
(
"
chrome
:
/
/
browser
/
skin
/
identity
-
icon
.
svg
"
)
}
{
type
:
"
chrome
about
page
"
testURL
:
"
about
:
preferences
"
img_url
:
url
(
"
chrome
:
/
/
branding
/
content
/
identity
-
icons
-
brand
.
svg
"
)
}
{
type
:
"
file
"
testURL
:
"
dummy_page
.
html
"
img_url
:
url
(
"
chrome
:
/
/
browser
/
skin
/
identity
-
icon
.
svg
"
)
}
{
type
:
"
mixedPassiveContent
"
testURL
:
kBaseURI
+
"
file_mixedPassiveContent
.
html
"
img_url
:
url
(
"
chrome
:
/
/
browser
/
skin
/
connection
-
mixed
-
passive
-
loaded
.
svg
"
)
}
{
type
:
"
mixedActiveContent
"
testURL
:
kBaseURI
+
"
file_csp_block_all_mixedcontent
.
html
"
img_url
:
url
(
"
chrome
:
/
/
browser
/
skin
/
connection
-
secure
.
svg
"
)
}
{
type
:
"
certificateError
"
testURL
:
"
https
:
/
/
self
-
signed
.
example
.
com
"
img_url
:
url
(
"
chrome
:
/
/
browser
/
skin
/
identity
-
icon
.
svg
"
)
}
]
;
add_task
(
async
function
test
(
)
{
for
(
let
testData
of
TEST_CASES
)
{
info
(
Testing
for
{
testData
.
type
}
)
;
let
testURL
=
testData
.
testURL
;
if
(
testData
.
type
=
=
=
"
file
"
)
{
let
dir
=
getChromeDir
(
getResolvedURI
(
gTestPath
)
)
;
dir
.
append
(
testURL
)
;
dir
.
normalize
(
)
;
testURL
=
Services
.
io
.
newFileURI
(
dir
)
.
spec
;
}
let
pageLoaded
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
(
)
=
>
{
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
testURL
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
if
(
testData
.
type
=
=
=
"
certificateError
"
)
{
pageLoaded
=
BrowserTestUtils
.
waitForErrorPage
(
browser
)
;
}
else
{
pageLoaded
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
}
}
false
)
;
await
pageLoaded
;
let
identityIcon
=
document
.
getElementById
(
"
identity
-
icon
"
)
;
let
identityIconImageURL
=
gBrowser
.
ownerGlobal
.
getComputedStyle
(
identityIcon
)
.
getPropertyValue
(
"
list
-
style
-
image
"
)
;
is
(
identityIconImageURL
testData
.
img_url
"
The
identity
icon
has
a
correct
image
url
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
