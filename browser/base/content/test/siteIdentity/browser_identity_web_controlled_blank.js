const
TEST_HOST
=
"
example
.
com
"
;
const
TEST_ORIGIN
=
"
https
:
/
/
"
+
TEST_HOST
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
TEST_ORIGIN
)
;
const
LOCALHOST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
127
.
0
.
0
.
1
:
8888
"
)
;
const
TEST_URI
=
TEST_PATH
+
"
test_web_controlled_blank
.
html
"
;
const
DUMMY_URI
=
LOCALHOST_PATH
+
"
dummy_page
.
html
"
;
async
function
web_controlled_about_blank_helper
(
id_to_click
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_URI
async
browser
=
>
{
let
popupWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
await
SpecialPowers
.
spawn
(
browser
[
id_to_click
]
async
function
(
id
)
{
content
.
document
.
getElementById
(
id
)
.
click
(
)
;
}
)
;
let
popupWindow
=
await
popupWindowPromise
;
let
identityIcon
=
popupWindow
.
document
.
querySelector
(
"
#
identity
-
icon
"
)
;
let
identityIconImageURL
=
popupWindow
.
getComputedStyle
(
identityIcon
)
.
getPropertyValue
(
"
list
-
style
-
image
"
)
;
is
(
identityIconImageURL
url
(
"
chrome
:
/
/
global
/
skin
/
icons
/
info
.
svg
"
)
"
The
identity
icon
has
a
correct
image
url
.
"
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
popupWindow
"
popupshown
"
true
event
=
>
event
.
target
=
=
popupWindow
.
gIdentityHandler
.
_identityPopup
)
;
popupWindow
.
gIdentityHandler
.
_identityIconBox
.
click
(
)
;
info
(
"
Waiting
for
the
Control
Center
to
be
shown
"
)
;
await
popupShown
;
ok
(
!
popupWindow
.
gIdentityHandler
.
_identityPopup
.
hidden
"
Control
Center
is
visible
"
)
;
ok
(
popupWindow
.
gIdentityHandler
.
_identityPopupMainViewHeaderLabel
.
textContent
.
includes
(
TEST_HOST
)
"
Identity
UI
header
shows
the
host
of
the
predecessor
"
)
;
is
(
popupWindow
.
gIdentityHandler
.
_identityPopup
.
getAttribute
(
"
connection
"
)
"
associated
"
"
Identity
UI
shows
associated
message
.
"
)
;
let
securityButton
=
popupWindow
.
gBrowser
.
ownerDocument
.
querySelector
(
"
#
identity
-
popup
-
security
-
button
"
)
;
is
(
securityButton
.
disabled
true
"
Security
button
has
correct
disabled
state
"
)
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
popupWindow
.
gBrowser
.
selectedBrowser
false
DUMMY_URI
)
;
await
SpecialPowers
.
spawn
(
popupWindow
.
gBrowser
.
selectedBrowser
[
DUMMY_URI
]
async
function
(
uri
)
{
content
.
location
=
uri
;
}
)
;
info
(
"
Waiting
for
the
navigation
to
a
dummy
page
to
complete
.
"
)
;
await
loaded
;
identityIconImageURL
=
popupWindow
.
gBrowser
.
ownerGlobal
.
getComputedStyle
(
identityIcon
)
.
getPropertyValue
(
"
list
-
style
-
image
"
)
;
is
(
identityIconImageURL
url
(
"
chrome
:
/
/
global
/
skin
/
icons
/
page
-
portrait
.
svg
"
)
"
The
identity
icon
has
a
correct
image
url
after
navigating
away
.
"
)
;
await
BrowserTestUtils
.
closeWindow
(
popupWindow
)
;
}
)
;
}
add_task
(
async
function
test_document_write
(
)
{
await
web_controlled_about_blank_helper
(
"
document_write
"
)
;
}
)
;
add_task
(
async
function
test_innerHTML
(
)
{
await
web_controlled_about_blank_helper
(
"
innerhtml
"
)
;
}
)
;
