const
TEST_URI
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
test
-
mixedcontent
-
securityerrors
.
html
"
;
const
PREF_DISPLAY
=
"
security
.
mixed_content
.
block_display_content
"
;
const
PREF_ACTIVE
=
"
security
.
mixed_content
.
block_active_content
"
;
var
gTestBrowser
=
null
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
PREF_DISPLAY
)
;
Services
.
prefs
.
clearUserPref
(
PREF_ACTIVE
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
function
*
blockMixedActiveContentTest
(
)
{
Services
.
prefs
.
setBoolPref
(
PREF_DISPLAY
false
)
;
Services
.
prefs
.
setBoolPref
(
PREF_ACTIVE
true
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
TEST_URI
)
;
gTestBrowser
=
gBrowser
.
getBrowserForTab
(
tab
)
;
yield
ContentTask
.
spawn
(
gTestBrowser
null
function
(
)
{
is
(
docShell
.
hasMixedDisplayContentBlocked
false
"
hasMixedDisplayContentBlocked
flag
has
been
set
"
)
;
is
(
docShell
.
hasMixedActiveContentBlocked
true
"
hasMixedActiveContentBlocked
flag
has
been
set
"
)
;
is
(
docShell
.
hasMixedDisplayContentLoaded
true
"
hasMixedDisplayContentLoaded
flag
has
been
set
"
)
;
is
(
docShell
.
hasMixedActiveContentLoaded
false
"
hasMixedActiveContentLoaded
flag
has
been
set
"
)
;
}
)
;
assertMixedContentBlockingState
(
gTestBrowser
{
activeLoaded
:
false
activeBlocked
:
true
passiveLoaded
:
true
}
)
;
Services
.
prefs
.
setBoolPref
(
PREF_DISPLAY
true
)
;
Services
.
prefs
.
setBoolPref
(
PREF_ACTIVE
true
)
;
gBrowser
.
reload
(
)
;
yield
BrowserTestUtils
.
browserLoaded
(
gTestBrowser
)
;
yield
ContentTask
.
spawn
(
gTestBrowser
null
function
(
)
{
is
(
docShell
.
hasMixedDisplayContentBlocked
true
"
hasMixedDisplayContentBlocked
flag
has
been
set
"
)
;
is
(
docShell
.
hasMixedActiveContentBlocked
true
"
hasMixedActiveContentBlocked
flag
has
been
set
"
)
;
is
(
docShell
.
hasMixedDisplayContentLoaded
false
"
hasMixedDisplayContentLoaded
flag
has
been
set
"
)
;
is
(
docShell
.
hasMixedActiveContentLoaded
false
"
hasMixedActiveContentLoaded
flag
has
been
set
"
)
;
}
)
;
assertMixedContentBlockingState
(
gTestBrowser
{
activeLoaded
:
false
activeBlocked
:
true
passiveLoaded
:
false
}
)
;
}
)
;
add_task
(
function
*
overrideMCB
(
)
{
let
{
gIdentityHandler
}
=
gTestBrowser
.
ownerGlobal
;
gIdentityHandler
.
disableMixedContentProtection
(
)
;
yield
BrowserTestUtils
.
browserLoaded
(
gTestBrowser
)
;
yield
ContentTask
.
spawn
(
gTestBrowser
null
function
(
)
{
is
(
docShell
.
hasMixedDisplayContentLoaded
true
"
hasMixedDisplayContentLoaded
flag
has
not
been
set
"
)
;
is
(
docShell
.
hasMixedActiveContentLoaded
true
"
hasMixedActiveContentLoaded
flag
has
not
been
set
"
)
;
is
(
docShell
.
hasMixedDisplayContentBlocked
false
"
second
hasMixedDisplayContentBlocked
flag
has
been
set
"
)
;
is
(
docShell
.
hasMixedActiveContentBlocked
false
"
second
hasMixedActiveContentBlocked
flag
has
been
set
"
)
;
}
)
;
assertMixedContentBlockingState
(
gTestBrowser
{
activeLoaded
:
true
activeBlocked
:
false
passiveLoaded
:
true
}
)
;
}
)
;
