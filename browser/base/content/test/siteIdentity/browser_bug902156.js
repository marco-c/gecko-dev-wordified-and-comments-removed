const
PREF_ACTIVE
=
"
security
.
mixed_content
.
block_active_content
"
;
const
HTTPS_TEST_ROOT_1
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
test1
.
example
.
com
"
)
;
const
HTTPS_TEST_ROOT_2
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
test2
.
example
.
com
"
)
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_ACTIVE
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test1
(
)
{
let
url
=
HTTPS_TEST_ROOT_1
+
"
file_bug902156_1
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
url
async
function
(
browser
)
{
await
assertMixedContentBlockingState
(
browser
{
activeLoaded
:
false
activeBlocked
:
true
passiveLoaded
:
false
}
)
;
let
browserLoaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
url
)
;
let
{
gIdentityHandler
}
=
browser
.
ownerGlobal
;
gIdentityHandler
.
disableMixedContentProtection
(
)
;
await
browserLoaded
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
expected
=
"
Mixed
Content
Blocker
disabled
"
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
getElementById
(
"
mctestdiv
"
)
.
innerHTML
=
=
expected
"
Error
:
Waited
too
long
for
mixed
script
to
run
in
Test
1
"
)
;
let
actual
=
content
.
document
.
getElementById
(
"
mctestdiv
"
)
.
innerHTML
;
is
(
actual
"
Mixed
Content
Blocker
disabled
"
"
OK
:
Executed
mixed
script
in
Test
1
"
)
;
}
)
;
url
=
HTTPS_TEST_ROOT_1
+
"
file_bug902156_2
.
html
"
;
browserLoaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
url
)
;
BrowserTestUtils
.
loadURIString
(
browser
url
)
;
await
browserLoaded
;
await
assertMixedContentBlockingState
(
browser
{
activeLoaded
:
true
activeBlocked
:
false
passiveLoaded
:
false
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
let
actual
=
content
.
document
.
getElementById
(
"
mctestdiv
"
)
.
innerHTML
;
is
(
actual
"
Mixed
Content
Blocker
disabled
"
"
OK
:
Executed
mixed
script
in
Test
1
"
)
;
}
)
;
gIdentityHandler
.
enableMixedContentProtection
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test2
(
)
{
let
url
=
HTTPS_TEST_ROOT_2
+
"
file_bug902156_2
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
url
async
function
(
browser
)
{
await
assertMixedContentBlockingState
(
browser
{
activeLoaded
:
false
activeBlocked
:
true
passiveLoaded
:
false
}
)
;
let
browserLoaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
url
)
;
let
{
gIdentityHandler
}
=
browser
.
ownerGlobal
;
gIdentityHandler
.
disableMixedContentProtection
(
)
;
await
browserLoaded
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
expected
=
"
Mixed
Content
Blocker
disabled
"
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
getElementById
(
"
mctestdiv
"
)
.
innerHTML
=
=
expected
"
Error
:
Waited
too
long
for
mixed
script
to
run
in
Test
2
"
)
;
let
actual
=
content
.
document
.
getElementById
(
"
mctestdiv
"
)
.
innerHTML
;
is
(
actual
"
Mixed
Content
Blocker
disabled
"
"
OK
:
Executed
mixed
script
in
Test
2
"
)
;
}
)
;
url
=
HTTPS_TEST_ROOT_2
+
"
file_bug902156_1
.
html
"
;
browserLoaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
url
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
let
mctestlink
=
content
.
document
.
getElementById
(
"
mctestlink
"
)
;
mctestlink
.
click
(
)
;
}
)
;
await
browserLoaded
;
await
assertMixedContentBlockingState
(
browser
{
activeLoaded
:
true
activeBlocked
:
false
passiveLoaded
:
false
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
let
actual
=
content
.
document
.
getElementById
(
"
mctestdiv
"
)
.
innerHTML
;
is
(
actual
"
Mixed
Content
Blocker
disabled
"
"
OK
:
Executed
mixed
script
in
Test
2
"
)
;
}
)
;
gIdentityHandler
.
enableMixedContentProtection
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test3
(
)
{
let
url
=
HTTPS_TEST_ROOT_1
+
"
file_bug902156_3
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
url
async
function
(
browser
)
{
await
assertMixedContentBlockingState
(
browser
{
activeLoaded
:
false
activeBlocked
:
true
passiveLoaded
:
false
}
)
;
}
)
;
}
)
;
