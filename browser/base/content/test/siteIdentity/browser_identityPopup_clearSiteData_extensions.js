"
use
strict
"
;
add_task
(
async
function
testClearSiteDataFooterHiddenForExtensions
(
)
{
let
extension
=
ExtensionTestUtils
.
loadExtension
(
{
useAddonManager
:
"
temporary
"
manifest
:
{
permissions
:
[
"
tabs
"
]
options_ui
:
{
page
:
"
options
.
html
"
open_in_tab
:
true
}
}
files
:
{
"
options
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
/
head
>
<
body
>
<
h1
>
This
is
a
test
options
page
for
a
WebExtension
<
/
h1
>
<
/
body
>
<
/
html
>
}
async
background
(
)
{
await
browser
.
runtime
.
openOptionsPage
(
)
;
browser
.
test
.
sendMessage
(
"
optionsopened
"
)
;
}
}
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
optionsopened
"
)
;
await
browserLoadedPromise
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
ok
(
content
.
document
.
documentURI
.
startsWith
(
"
moz
-
extension
:
/
/
"
)
"
Extension
page
has
now
finished
loading
in
the
browser
window
"
)
;
}
)
;
let
{
gIdentityHandler
}
=
gBrowser
.
ownerGlobal
;
let
promisePanelOpen
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
ownerGlobal
"
popupshown
"
true
event
=
>
event
.
target
=
=
gIdentityHandler
.
_identityPopup
)
;
gIdentityHandler
.
_identityIconBox
.
click
(
)
;
await
promisePanelOpen
;
let
clearSiteDataFooter
=
document
.
getElementById
(
"
identity
-
popup
-
clear
-
sitedata
-
footer
"
)
;
ok
(
clearSiteDataFooter
.
hidden
"
The
clear
site
data
footer
is
hidden
on
a
WebExtension
page
.
"
)
;
await
extension
.
unload
(
)
;
}
)
;
