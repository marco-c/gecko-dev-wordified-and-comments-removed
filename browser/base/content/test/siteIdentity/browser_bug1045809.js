const
PREF_ACTIVE
=
"
security
.
mixed_content
.
block_active_content
"
;
const
PREF_INSECURE
=
"
security
.
insecure_connection_icon
.
enabled
"
;
const
TEST_URL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
file_bug1045809_1
.
html
"
;
var
origBlockActive
;
add_task
(
async
function
(
)
{
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
setBoolPref
(
PREF_ACTIVE
origBlockActive
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
origBlockActive
=
Services
.
prefs
.
getBoolPref
(
PREF_ACTIVE
)
;
Services
.
prefs
.
setBoolPref
(
PREF_ACTIVE
true
)
;
let
tab
=
(
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_INSECURE
false
]
]
}
)
;
await
runTests
(
tab
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_INSECURE
true
]
]
}
)
;
await
runTests
(
tab
)
;
}
)
;
async
function
runTests
(
tab
)
{
await
promiseTabLoadEvent
(
tab
TEST_URL
)
;
await
test1
(
gBrowser
.
getBrowserForTab
(
tab
)
)
;
await
promiseTabLoadEvent
(
tab
)
;
await
test2
(
gBrowser
.
getBrowserForTab
(
tab
)
)
;
await
promiseTabLoadEvent
(
tab
)
;
await
test3
(
gBrowser
.
getBrowserForTab
(
tab
)
)
;
}
async
function
test1
(
gTestBrowser
)
{
await
assertMixedContentBlockingState
(
gTestBrowser
{
activeLoaded
:
false
activeBlocked
:
true
passiveLoaded
:
false
}
)
;
await
SpecialPowers
.
spawn
(
gTestBrowser
[
]
function
(
)
{
let
iframe
=
content
.
document
.
getElementsByTagName
(
"
iframe
"
)
[
0
]
;
SpecialPowers
.
spawn
(
iframe
[
]
(
)
=
>
{
let
container
=
content
.
document
.
getElementById
(
"
mixedContentContainer
"
)
;
is
(
container
null
"
Mixed
Content
is
NOT
to
be
found
in
Test1
"
)
;
}
)
;
}
)
;
gIdentityHandler
.
disableMixedContentProtection
(
)
;
}
async
function
test2
(
gTestBrowser
)
{
await
assertMixedContentBlockingState
(
gTestBrowser
{
activeLoaded
:
true
activeBlocked
:
false
passiveLoaded
:
false
}
)
;
await
SpecialPowers
.
spawn
(
gTestBrowser
[
]
function
(
)
{
let
iframe
=
content
.
document
.
getElementsByTagName
(
"
iframe
"
)
[
0
]
;
SpecialPowers
.
spawn
(
iframe
[
]
(
)
=
>
{
let
container
=
content
.
document
.
getElementById
(
"
mixedContentContainer
"
)
;
isnot
(
container
null
"
Mixed
Content
is
to
be
found
in
Test2
"
)
;
}
)
;
}
)
;
gIdentityHandler
.
enableMixedContentProtection
(
)
;
}
async
function
test3
(
gTestBrowser
)
{
await
assertMixedContentBlockingState
(
gTestBrowser
{
activeLoaded
:
false
activeBlocked
:
true
passiveLoaded
:
false
}
)
;
await
SpecialPowers
.
spawn
(
gTestBrowser
[
]
function
(
)
{
let
iframe
=
content
.
document
.
getElementsByTagName
(
"
iframe
"
)
[
0
]
;
SpecialPowers
.
spawn
(
iframe
[
]
(
)
=
>
{
let
container
=
content
.
document
.
getElementById
(
"
mixedContentContainer
"
)
;
is
(
container
null
"
Mixed
Content
is
NOT
to
be
found
in
Test3
"
)
;
}
)
;
}
)
;
}
