const
{
E10SUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
)
;
const
triggeringPrincipal_base64
=
E10SUtils
.
SERIALIZED_SYSTEMPRINCIPAL
;
let
origBrowserState
=
SessionStore
.
getBrowserState
(
)
;
add_setup
(
async
function
(
)
{
registerCleanupFunction
(
(
)
=
>
{
SessionStore
.
setBrowserState
(
origBrowserState
)
;
}
)
;
}
)
;
add_task
(
async
function
test_session_store_security_state
(
)
{
const
state
=
{
windows
:
[
{
tabs
:
[
{
entries
:
[
{
url
:
"
https
:
/
/
example
.
net
"
triggeringPrincipal_base64
}
]
}
{
entries
:
[
{
url
:
"
https
:
/
/
example
.
org
"
triggeringPrincipal_base64
}
]
}
]
selected
:
1
}
]
}
;
let
promiseTabsRestored
=
Promise
.
all
(
[
TestUtils
.
topicObserved
(
"
sessionstore
-
browser
-
state
-
restored
"
)
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
SSTabRestored
"
)
]
)
;
SessionStore
.
setBrowserState
(
JSON
.
stringify
(
state
)
)
;
await
promiseTabsRestored
;
is
(
gBrowser
.
selectedTab
gBrowser
.
tabs
[
0
]
"
First
tab
is
selected
initially
"
)
;
info
(
"
Switch
to
second
tab
which
has
not
been
loaded
yet
.
"
)
;
BrowserTestUtils
.
switchTab
(
gBrowser
gBrowser
.
tabs
[
1
]
)
;
is
(
gURLBar
.
textbox
.
getAttribute
(
"
pageproxystate
"
)
"
invalid
"
"
Page
proxy
state
is
invalid
after
tab
switch
"
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
gURLBar
.
textbox
{
attributeFilter
:
[
"
pageproxystate
"
]
}
(
)
=
>
gURLBar
.
textbox
.
getAttribute
(
"
pageproxystate
"
)
=
=
"
valid
"
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
is
(
gBrowser
.
currentURI
.
spec
"
https
:
/
/
example
.
org
/
"
"
Should
have
loaded
example
.
org
"
)
;
is
(
gIdentityHandler
.
_identityBox
.
getAttribute
(
"
pageproxystate
"
)
"
valid
"
"
identityBox
pageproxystate
is
valid
"
)
;
ok
(
gIdentityHandler
.
_isSecureConnection
"
gIdentityHandler
.
_isSecureConnection
is
true
"
)
;
is
(
gIdentityHandler
.
_identityBox
.
className
"
verifiedDomain
"
"
identityBox
class
signals
secure
connection
.
"
)
;
}
)
;
