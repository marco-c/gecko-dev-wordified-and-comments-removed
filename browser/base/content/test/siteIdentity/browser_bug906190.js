requestLongerTimeout
(
2
)
;
const
HTTPS_TEST_ROOT_1
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
test1
.
example
.
com
"
)
;
const
HTTPS_TEST_ROOT_2
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
test2
.
example
.
com
"
)
;
async
function
doTest
(
parentTabSpec
childTabSpec
testTaskFn
waitForMetaRefresh
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
parentTabSpec
}
async
function
(
browser
)
{
await
assertMixedContentBlockingState
(
gBrowser
{
activeLoaded
:
false
activeBlocked
:
true
passiveLoaded
:
false
}
)
;
let
promiseReloaded
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
gIdentityHandler
.
disableMixedContentProtection
(
)
;
await
promiseReloaded
;
await
ContentTask
.
spawn
(
browser
childTabSpec
async
childTabSpecContent
=
>
{
let
testDiv
=
content
.
document
.
getElementById
(
"
mctestdiv
"
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
testDiv
.
innerHTML
=
=
"
Mixed
Content
Blocker
disabled
"
)
;
let
mainDiv
=
content
.
document
.
createElement
(
"
div
"
)
;
mainDiv
.
innerHTML
=
'
<
p
>
<
a
id
=
"
linkToOpenInNewTab
"
href
=
"
'
+
childTabSpecContent
+
'
"
>
Link
<
/
a
>
<
/
p
>
'
;
content
.
document
.
body
.
appendChild
(
mainDiv
)
;
}
)
;
for
(
let
openFn
of
[
simulateCtrlClick
simulateContextMenuOpenInTab
]
)
{
let
promiseTabLoaded
=
waitForSomeTabToLoad
(
)
;
openFn
(
browser
)
;
await
promiseTabLoaded
;
gBrowser
.
selectTabAtIndex
(
2
)
;
if
(
waitForMetaRefresh
)
{
await
waitForSomeTabToLoad
(
)
;
}
await
testTaskFn
(
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
}
)
;
}
function
simulateCtrlClick
(
browser
)
{
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
linkToOpenInNewTab
"
{
ctrlKey
:
true
metaKey
:
true
}
browser
)
;
}
function
simulateContextMenuOpenInTab
(
browser
)
{
BrowserTestUtils
.
waitForEvent
(
document
"
popupshown
"
false
event
=
>
{
document
.
getElementById
(
"
context
-
openlinkintab
"
)
.
doCommand
(
)
;
event
.
target
.
hidePopup
(
)
;
return
true
;
}
)
;
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
linkToOpenInNewTab
"
{
type
:
"
contextmenu
"
button
:
2
}
browser
)
;
}
function
waitForSomeTabToLoad
(
)
{
return
BrowserTestUtils
.
firstBrowserLoaded
(
window
true
browser
=
>
{
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
return
!
!
tab
;
}
)
;
}
add_task
(
async
function
test_initialize
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
mixed_content
.
block_active_content
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_same_origin
(
)
{
await
doTest
(
HTTPS_TEST_ROOT_1
+
"
file_bug906190_1
.
html
"
HTTPS_TEST_ROOT_1
+
"
file_bug906190_2
.
html
"
async
function
(
)
{
await
assertMixedContentBlockingState
(
gBrowser
{
activeLoaded
:
true
activeBlocked
:
false
passiveLoaded
:
false
}
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
async
(
)
=
>
{
Assert
.
equal
(
content
.
document
.
getElementById
(
"
mctestdiv
"
)
.
innerHTML
"
Mixed
Content
Blocker
disabled
"
"
OK
:
Executed
mixed
script
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_different_origin
(
)
{
await
doTest
(
HTTPS_TEST_ROOT_1
+
"
file_bug906190_2
.
html
"
HTTPS_TEST_ROOT_2
+
"
file_bug906190_2
.
html
"
async
function
(
)
{
await
assertMixedContentBlockingState
(
gBrowser
{
activeLoaded
:
false
activeBlocked
:
true
passiveLoaded
:
false
}
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
async
(
)
=
>
{
Assert
.
equal
(
content
.
document
.
getElementById
(
"
mctestdiv
"
)
.
innerHTML
"
Mixed
Content
Blocker
enabled
"
"
OK
:
Blocked
mixed
script
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_same_origin_metarefresh_same_origin
(
)
{
await
doTest
(
HTTPS_TEST_ROOT_1
+
"
file_bug906190_1
.
html
"
HTTPS_TEST_ROOT_1
+
"
file_bug906190_3_4
.
html
"
async
function
(
)
{
await
assertMixedContentBlockingState
(
gBrowser
{
activeLoaded
:
true
activeBlocked
:
false
passiveLoaded
:
false
}
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
async
(
)
=
>
{
Assert
.
equal
(
content
.
document
.
getElementById
(
"
mctestdiv
"
)
.
innerHTML
"
Mixed
Content
Blocker
disabled
"
"
OK
:
Executed
mixed
script
"
)
;
}
)
;
}
true
)
;
}
)
;
add_task
(
async
function
test_same_origin_metarefresh_different_origin
(
)
{
await
doTest
(
HTTPS_TEST_ROOT_2
+
"
file_bug906190_1
.
html
"
HTTPS_TEST_ROOT_2
+
"
file_bug906190_3_4
.
html
"
async
function
(
)
{
await
assertMixedContentBlockingState
(
gBrowser
{
activeLoaded
:
false
activeBlocked
:
true
passiveLoaded
:
false
}
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
async
(
)
=
>
{
Assert
.
equal
(
content
.
document
.
getElementById
(
"
mctestdiv
"
)
.
innerHTML
"
Mixed
Content
Blocker
enabled
"
"
OK
:
Blocked
mixed
script
"
)
;
}
)
;
}
true
)
;
}
)
;
add_task
(
async
function
test_same_origin_302redirect_same_origin
(
)
{
await
doTest
(
HTTPS_TEST_ROOT_1
+
"
file_bug906190_1
.
html
"
HTTPS_TEST_ROOT_1
+
"
file_bug906190
.
sjs
"
async
function
(
)
{
ok
(
!
gIdentityHandler
.
_identityBox
.
classList
.
contains
(
"
mixedActiveBlocked
"
)
"
OK
:
Mixed
Content
is
NOT
being
blocked
"
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
async
(
)
=
>
{
Assert
.
equal
(
content
.
document
.
getElementById
(
"
mctestdiv
"
)
.
innerHTML
"
Mixed
Content
Blocker
disabled
"
"
OK
:
Executed
mixed
script
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_same_origin_302redirect_different_origin
(
)
{
await
doTest
(
HTTPS_TEST_ROOT_2
+
"
file_bug906190_1
.
html
"
HTTPS_TEST_ROOT_2
+
"
file_bug906190
.
sjs
"
async
function
(
)
{
await
assertMixedContentBlockingState
(
gBrowser
{
activeLoaded
:
false
activeBlocked
:
true
passiveLoaded
:
false
}
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
async
(
)
=
>
{
Assert
.
equal
(
content
.
document
.
getElementById
(
"
mctestdiv
"
)
.
innerHTML
"
Mixed
Content
Blocker
enabled
"
"
OK
:
Blocked
mixed
script
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_bad_redirection
(
)
{
await
doTest
(
HTTPS_TEST_ROOT_2
+
"
file_bug906190_1
.
html
"
HTTPS_TEST_ROOT_2
+
"
file_bug906190
.
sjs
?
bad
-
redirection
=
1
"
function
(
)
{
ok
(
true
"
Nothing
to
do
"
)
;
}
)
;
}
)
;
