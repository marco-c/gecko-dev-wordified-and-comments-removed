ignoreAllUncaughtExceptions
(
)
;
add_task
(
async
function
(
)
{
info
(
"
Search
suggestion
smoke
test
"
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
home
"
}
async
function
(
browser
)
{
let
currEngine
=
Services
.
search
.
defaultEngine
;
let
engine
=
await
promiseNewEngine
(
"
searchSuggestionEngine
.
xml
"
)
;
let
p
=
promiseContentSearchChange
(
browser
engine
.
name
)
;
Services
.
search
.
defaultEngine
=
engine
;
await
p
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
let
input
=
content
.
document
.
querySelector
(
[
"
#
searchText
"
"
#
newtab
-
search
-
text
"
]
)
;
input
.
focus
(
)
;
}
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
x
"
{
}
browser
)
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
let
table
=
content
.
document
.
getElementById
(
"
searchSuggestionTable
"
)
;
let
input
=
content
.
document
.
querySelector
(
[
"
#
searchText
"
"
#
newtab
-
search
-
text
"
]
)
;
await
new
Promise
(
resolve
=
>
{
let
observer
=
new
content
.
MutationObserver
(
(
)
=
>
{
if
(
input
.
getAttribute
(
"
aria
-
expanded
"
)
=
=
"
true
"
)
{
observer
.
disconnect
(
)
;
ok
(
!
table
.
hidden
"
Search
suggestion
table
unhidden
"
)
;
resolve
(
)
;
}
}
)
;
observer
.
observe
(
input
{
attributes
:
true
attributeFilter
:
[
"
aria
-
expanded
"
]
}
)
;
}
)
;
}
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
a
"
{
accelKey
:
true
}
browser
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
VK_DELETE
"
{
}
browser
)
;
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
let
table
=
content
.
document
.
getElementById
(
"
searchSuggestionTable
"
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
table
.
hidden
"
Search
suggestion
table
hidden
"
)
;
}
)
;
Services
.
search
.
defaultEngine
=
currEngine
;
try
{
Services
.
search
.
removeEngine
(
engine
)
;
}
catch
(
ex
)
{
}
}
)
;
}
)
;
