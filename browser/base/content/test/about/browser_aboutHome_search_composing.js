ignoreAllUncaughtExceptions
(
)
;
add_task
(
async
function
(
)
{
info
(
"
Clicking
suggestion
list
while
composing
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtabpage
.
activity
-
stream
.
improvesearch
.
handoffToAwesomebar
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
home
"
}
async
function
(
browser
)
{
let
engine
;
await
promiseContentSearchChange
(
browser
async
(
)
=
>
{
engine
=
await
SearchTestUtils
.
installOpenSearchEngine
(
{
url
:
getRootDirectory
(
gTestPath
)
+
"
searchSuggestionEngine
.
xml
"
setAsDefault
:
true
}
)
;
return
engine
.
name
;
}
)
;
await
FormHistory
.
update
(
{
op
:
"
remove
"
}
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
input
=
content
.
document
.
querySelector
(
[
"
#
searchText
"
"
#
newtab
-
search
-
text
"
]
)
;
input
.
focus
(
)
;
}
)
;
info
(
"
Setting
up
the
mutation
observer
before
synthesizing
composition
"
)
;
let
mutationPromise
=
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
searchController
=
content
.
wrappedJSObject
.
gContentSearchController
;
let
table
=
searchController
.
_suggestionsList
;
let
input
=
content
.
document
.
querySelector
(
[
"
#
searchText
"
"
#
newtab
-
search
-
text
"
]
)
;
await
ContentTaskUtils
.
waitForMutationCondition
(
input
{
attributeFilter
:
[
"
aria
-
expanded
"
]
}
(
)
=
>
input
.
getAttribute
(
"
aria
-
expanded
"
)
=
=
"
true
"
)
;
ok
(
!
table
.
hidden
"
Search
suggestion
table
unhidden
"
)
;
let
row
=
table
.
children
[
1
]
;
row
.
setAttribute
(
"
id
"
"
TEMPID
"
)
;
searchController
.
selectedIndex
=
1
;
}
)
;
await
BrowserTestUtils
.
synthesizeCompositionChange
(
{
composition
:
{
string
:
"
x
"
clauses
:
[
{
length
:
1
attr
:
Ci
.
nsITextInputProcessor
.
ATTR_RAW_CLAUSE
}
]
}
caret
:
{
start
:
1
length
:
0
}
}
browser
)
;
info
(
"
Waiting
for
search
suggestion
table
unhidden
"
)
;
await
mutationPromise
;
let
expectedURL
=
(
await
Services
.
search
.
getDefault
(
)
)
.
getSubmission
(
"
xbar
"
null
"
homepage
"
)
.
uri
.
spec
;
let
loadPromise
=
BrowserTestUtils
.
waitForDocLoadAndStopIt
(
expectedURL
gBrowser
.
selectedBrowser
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
TEMPID
"
{
button
:
0
}
browser
)
;
await
loadPromise
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
