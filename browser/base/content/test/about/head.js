function
waitForCondition
(
condition
nextTest
errorMsg
retryTimes
)
{
retryTimes
=
typeof
retryTimes
!
=
=
"
undefined
"
?
retryTimes
:
30
;
var
tries
=
0
;
var
interval
=
setInterval
(
function
(
)
{
if
(
tries
>
=
retryTimes
)
{
ok
(
false
errorMsg
)
;
moveOn
(
)
;
}
var
conditionPassed
;
try
{
conditionPassed
=
condition
(
)
;
}
catch
(
e
)
{
ok
(
false
e
+
"
\
n
"
+
e
.
stack
)
;
conditionPassed
=
false
;
}
if
(
conditionPassed
)
{
moveOn
(
)
;
}
tries
+
+
;
}
100
)
;
var
moveOn
=
function
(
)
{
clearInterval
(
interval
)
;
nextTest
(
)
;
}
;
}
function
promiseWaitForCondition
(
aConditionFn
)
{
return
new
Promise
(
resolve
=
>
{
waitForCondition
(
aConditionFn
resolve
"
Condition
didn
'
t
pass
.
"
)
;
}
)
;
}
function
whenTabLoaded
(
aTab
aCallback
)
{
promiseTabLoadEvent
(
aTab
)
.
then
(
aCallback
)
;
}
function
promiseTabLoaded
(
aTab
)
{
return
new
Promise
(
resolve
=
>
{
whenTabLoaded
(
aTab
resolve
)
;
}
)
;
}
function
promiseTabLoadEvent
(
tab
url
)
{
info
(
"
Wait
tab
event
:
load
"
)
;
function
handle
(
loadedUrl
)
{
if
(
loadedUrl
=
=
=
"
about
:
blank
"
|
|
(
url
&
&
loadedUrl
!
=
=
url
)
)
{
info
(
Skipping
spurious
load
event
for
{
loadedUrl
}
)
;
return
false
;
}
info
(
"
Tab
event
received
:
load
"
)
;
return
true
;
}
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
handle
)
;
if
(
url
)
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
url
)
;
return
loaded
;
}
function
waitForDocLoadAndStopIt
(
aExpectedURL
aBrowser
=
gBrowser
.
selectedBrowser
aStopFromProgressListener
=
true
)
{
function
content_script
(
contentStopFromProgressListener
)
{
let
{
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
let
wp
=
docShell
.
QueryInterface
(
Ci
.
nsIWebProgress
)
;
function
stopContent
(
now
uri
)
{
if
(
now
)
{
content
.
stop
(
)
;
sendAsyncMessage
(
"
Test
:
WaitForDocLoadAndStopIt
"
{
uri
}
)
;
}
else
{
setTimeout
(
stopContent
.
bind
(
null
true
uri
)
0
)
;
}
}
let
progressListener
=
{
onStateChange
(
webProgress
req
flags
status
)
{
dump
(
"
waitForDocLoadAndStopIt
:
onStateChange
"
+
flags
.
toString
(
16
)
+
"
:
"
+
req
.
name
+
"
\
n
"
)
;
if
(
webProgress
.
isTopLevel
&
&
flags
&
Ci
.
nsIWebProgressListener
.
STATE_START
)
{
wp
.
removeProgressListener
(
progressListener
)
;
let
chan
=
req
.
QueryInterface
(
Ci
.
nsIChannel
)
;
dump
(
waitForDocLoadAndStopIt
:
Document
start
:
{
chan
.
URI
.
spec
}
\
n
)
;
stopContent
(
contentStopFromProgressListener
chan
.
originalURI
.
spec
)
;
}
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
"
nsISupportsWeakReference
"
]
)
}
;
wp
.
addProgressListener
(
progressListener
wp
.
NOTIFY_STATE_WINDOW
)
;
addEventListener
(
"
unload
"
function
(
)
{
try
{
wp
.
removeProgressListener
(
progressListener
)
;
}
catch
(
e
)
{
}
}
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
function
complete
(
{
data
}
)
{
is
(
data
.
uri
aExpectedURL
"
waitForDocLoadAndStopIt
:
The
expected
URL
was
loaded
"
)
;
mm
.
removeMessageListener
(
"
Test
:
WaitForDocLoadAndStopIt
"
complete
)
;
resolve
(
)
;
}
let
mm
=
aBrowser
.
messageManager
;
mm
.
loadFrameScript
(
"
data
:
(
"
+
content_script
.
toString
(
)
+
"
)
(
"
+
aStopFromProgressListener
+
"
)
;
"
true
)
;
mm
.
addMessageListener
(
"
Test
:
WaitForDocLoadAndStopIt
"
complete
)
;
info
(
"
waitForDocLoadAndStopIt
:
Waiting
for
URL
:
"
+
aExpectedURL
)
;
}
)
;
}
function
promiseDisableOnboardingToursAndActivityStream
(
)
{
return
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
onboarding
.
enabled
"
false
]
[
"
browser
.
newtabpage
.
activity
-
stream
.
aboutHome
.
enabled
"
false
]
]
}
)
;
}
