XPCOMUtils
.
defineLazyModuleGetters
(
this
{
FormHistory
:
"
resource
:
/
/
gre
/
modules
/
FormHistory
.
jsm
"
}
)
;
function
getSecurityInfo
(
securityInfoAsString
)
{
const
serhelper
=
Cc
[
"
mozilla
.
org
/
network
/
serialization
-
helper
;
1
"
]
.
getService
(
Ci
.
nsISerializationHelper
)
;
let
securityInfo
=
serhelper
.
deserializeObject
(
securityInfoAsString
)
;
securityInfo
.
QueryInterface
(
Ci
.
nsITransportSecurityInfo
)
;
return
securityInfo
;
}
function
getCertChain
(
securityInfoAsString
)
{
let
certChain
=
"
"
;
let
securityInfo
=
getSecurityInfo
(
securityInfoAsString
)
;
for
(
let
cert
of
securityInfo
.
failedCertChain
.
getEnumerator
(
)
)
{
certChain
+
=
getPEMString
(
cert
)
;
}
return
certChain
;
}
function
getDERString
(
cert
)
{
var
length
=
{
}
;
var
derArray
=
cert
.
getRawDER
(
length
)
;
var
derString
=
"
"
;
for
(
var
i
=
0
;
i
<
derArray
.
length
;
i
+
+
)
{
derString
+
=
String
.
fromCharCode
(
derArray
[
i
]
)
;
}
return
derString
;
}
function
getPEMString
(
cert
)
{
var
derb64
=
btoa
(
getDERString
(
cert
)
)
;
var
wrapped
=
derb64
.
replace
(
/
(
\
S
{
64
}
(
?
!
)
)
/
g
"
1
\
r
\
n
"
)
;
return
"
-
-
-
-
-
BEGIN
CERTIFICATE
-
-
-
-
-
\
r
\
n
"
+
wrapped
+
"
\
r
\
n
-
-
-
-
-
END
CERTIFICATE
-
-
-
-
-
\
r
\
n
"
;
}
function
injectErrorPageFrame
(
tab
src
)
{
return
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
frameSrc
:
src
}
async
function
(
{
frameSrc
}
)
{
let
loaded
=
ContentTaskUtils
.
waitForEvent
(
content
.
wrappedJSObject
"
DOMFrameContentLoaded
"
)
;
let
iframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
frameSrc
;
content
.
document
.
body
.
appendChild
(
iframe
)
;
await
loaded
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
iframe
.
contentDocument
.
body
.
classList
.
contains
(
"
certerror
"
)
)
;
}
)
;
}
async
function
openErrorPage
(
src
useFrame
)
{
let
dummyPage
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
+
"
dummy_page
.
html
"
;
let
tab
;
if
(
useFrame
)
{
info
(
"
Loading
cert
error
page
in
an
iframe
"
)
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
dummyPage
)
;
await
injectErrorPageFrame
(
tab
src
)
;
}
else
{
let
certErrorLoaded
;
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
(
)
=
>
{
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
src
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
certErrorLoaded
=
BrowserTestUtils
.
waitForErrorPage
(
browser
)
;
}
false
)
;
info
(
"
Loading
and
waiting
for
the
cert
error
"
)
;
await
certErrorLoaded
;
}
return
tab
;
}
function
waitForCondition
(
condition
nextTest
errorMsg
retryTimes
)
{
retryTimes
=
typeof
retryTimes
!
=
=
"
undefined
"
?
retryTimes
:
30
;
var
tries
=
0
;
var
interval
=
setInterval
(
function
(
)
{
if
(
tries
>
=
retryTimes
)
{
ok
(
false
errorMsg
)
;
moveOn
(
)
;
}
var
conditionPassed
;
try
{
conditionPassed
=
condition
(
)
;
}
catch
(
e
)
{
ok
(
false
e
+
"
\
n
"
+
e
.
stack
)
;
conditionPassed
=
false
;
}
if
(
conditionPassed
)
{
moveOn
(
)
;
}
tries
+
+
;
}
100
)
;
var
moveOn
=
function
(
)
{
clearInterval
(
interval
)
;
nextTest
(
)
;
}
;
}
function
whenTabLoaded
(
aTab
aCallback
)
{
promiseTabLoadEvent
(
aTab
)
.
then
(
aCallback
)
;
}
function
promiseTabLoaded
(
aTab
)
{
return
new
Promise
(
resolve
=
>
{
whenTabLoaded
(
aTab
resolve
)
;
}
)
;
}
function
promiseTabLoadEvent
(
tab
url
)
{
info
(
"
Wait
tab
event
:
load
"
)
;
function
handle
(
loadedUrl
)
{
if
(
loadedUrl
=
=
=
"
about
:
blank
"
|
|
(
url
&
&
loadedUrl
!
=
=
url
)
)
{
info
(
Skipping
spurious
load
event
for
{
loadedUrl
}
)
;
return
false
;
}
info
(
"
Tab
event
received
:
load
"
)
;
return
true
;
}
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
handle
)
;
if
(
url
)
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
url
)
;
return
loaded
;
}
function
promiseContentSearchChange
(
browser
newEngineName
)
{
return
ContentTask
.
spawn
(
browser
{
newEngineName
}
async
function
(
args
)
{
return
new
Promise
(
resolve
=
>
{
content
.
addEventListener
(
"
ContentSearchService
"
function
listener
(
aEvent
)
{
if
(
aEvent
.
detail
.
type
=
=
"
CurrentState
"
&
&
content
.
wrappedJSObject
.
gContentSearchController
.
defaultEngine
.
name
=
=
args
.
newEngineName
)
{
content
.
removeEventListener
(
"
ContentSearchService
"
listener
)
;
resolve
(
)
;
}
}
)
;
}
)
;
}
)
;
}
function
promiseNewEngine
(
basename
)
{
info
(
"
Waiting
for
engine
to
be
added
:
"
+
basename
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
url
=
getRootDirectory
(
gTestPath
)
+
basename
;
Services
.
search
.
addEngine
(
url
"
"
false
{
onSuccess
(
engine
)
{
info
(
"
Search
engine
added
:
"
+
basename
)
;
registerCleanupFunction
(
(
)
=
>
{
try
{
Services
.
search
.
removeEngine
(
engine
)
;
}
catch
(
ex
)
{
}
}
)
;
resolve
(
engine
)
;
}
onError
(
errCode
)
{
ok
(
false
"
addEngine
failed
with
error
code
"
+
errCode
)
;
reject
(
)
;
}
}
)
;
}
)
;
}
