add_task
(
async
function
test_menu_close_tab_count
(
)
{
info
(
"
Adding
new
tabs
"
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
com
"
)
;
info
(
"
Selecting
all
tabs
"
)
;
await
gBrowser
.
selectAllTabs
(
)
;
is
(
gBrowser
.
multiSelectedTabsCount
2
"
Two
(
2
)
tabs
are
selected
"
)
;
let
fileMenu
=
document
.
getElementById
(
"
menu_FilePopup
"
)
;
await
simulateMenuOpen
(
fileMenu
)
;
let
closeMenuEntry
=
document
.
getElementById
(
"
menu_close
"
)
;
let
closeMenuL10nArgsObject
=
document
.
l10n
.
getAttributes
(
closeMenuEntry
)
;
is
(
closeMenuL10nArgsObject
.
args
.
tabCount
2
"
Menu
bar
reflects
multi
-
tab
selection
number
(
Close
2
Tabs
)
"
)
;
let
onClose
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
TabClose
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
await
onClose
;
info
(
"
Tabs
closed
"
)
;
}
)
;
async
function
simulateMenuOpen
(
menu
)
{
return
new
Promise
(
resolve
=
>
{
menu
.
addEventListener
(
"
popupshown
"
resolve
{
once
:
true
}
)
;
menu
.
dispatchEvent
(
new
MouseEvent
(
"
popupshowing
"
{
bubbles
:
true
}
)
)
;
menu
.
dispatchEvent
(
new
MouseEvent
(
"
popupshown
"
{
bubbles
:
true
}
)
)
;
}
)
;
}
async
function
simulateMenuClosed
(
menu
)
{
return
new
Promise
(
resolve
=
>
{
menu
.
addEventListener
(
"
popuphidden
"
resolve
{
once
:
true
}
)
;
menu
.
dispatchEvent
(
new
MouseEvent
(
"
popuphiding
"
{
bubbles
:
true
}
)
)
;
menu
.
dispatchEvent
(
new
MouseEvent
(
"
popuphidden
"
{
bubbles
:
true
}
)
)
;
}
)
;
}
