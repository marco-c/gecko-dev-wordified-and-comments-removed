"
use
strict
"
;
requestLongerTimeout
(
5
)
;
const
EXPECTED_REFLOWS_FIRST_OPEN
=
[
{
stack
:
[
"
_rebuild
chrome
:
/
/
browser
/
content
/
search
/
search
.
xml
"
"
set_popup
chrome
:
/
/
browser
/
content
/
search
/
search
.
xml
"
"
enableOneOffSearches
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
_enableOrDisableOneOffSearches
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
urlbar_XBL_Constructor
/
<
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
_openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
set_popupOpen
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
}
{
stack
:
[
"
adjustHeight
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
onxblpopupshown
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
maxCount
:
5
}
{
stack
:
[
"
adjustHeight
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_invalidate
/
this
.
_adjustHeightTimeout
<
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
maxCount
:
51
}
{
stack
:
[
"
_handleOverflow
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
handleOverUnderflow
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_reuseAcItem
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_appendCurrentResult
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_invalidate
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
invalidate
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
maxCount
:
60
}
{
stack
:
[
"
_handleOverflow
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
handleOverUnderflow
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
set_popupOpen
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
maxCount
:
6
}
{
stack
:
[
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
_openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
set_popupOpen
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
}
]
;
async
function
promiseSearchComplete
(
win
)
{
let
URLBar
=
win
.
gURLBar
;
if
(
URLBar
.
popup
.
state
!
=
"
open
"
)
{
await
BrowserTestUtils
.
waitForEvent
(
URLBar
.
popup
"
popupshown
"
)
;
}
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
URLBar
.
controller
.
searchStatus
>
=
Ci
.
nsIAutoCompleteController
.
STATUS_COMPLETE_NO_MATCH
;
}
)
;
await
new
Promise
(
resolve
=
>
win
.
requestIdleCallback
(
resolve
{
timeout
:
1000
}
)
)
;
}
add_task
(
async
function
setup
(
)
{
await
addDummyHistoryEntries
(
)
;
}
)
;
add_task
(
async
function
(
)
{
let
win
=
await
prepareSettledWindow
(
)
;
let
URLBar
=
win
.
gURLBar
;
let
popup
=
URLBar
.
popup
;
URLBar
.
focus
(
)
;
URLBar
.
value
=
"
"
;
await
withReflowObserver
(
async
function
(
)
{
let
oldInvalidate
=
popup
.
invalidate
.
bind
(
popup
)
;
let
oldResultsAdded
=
popup
.
onResultsAdded
.
bind
(
popup
)
;
popup
.
invalidate
=
(
reason
)
=
>
{
dirtyFrame
(
win
)
;
oldInvalidate
(
reason
)
;
}
;
popup
.
onResultsAdded
=
(
)
=
>
{
dirtyFrame
(
win
)
;
oldResultsAdded
(
)
;
}
;
const
SEARCH_TERM
=
"
ows
-
10
"
;
for
(
let
i
=
0
;
i
<
SEARCH_TERM
.
length
;
+
+
i
)
{
let
char
=
SEARCH_TERM
[
i
]
;
EventUtils
.
synthesizeKey
(
char
{
}
win
)
;
await
promiseSearchComplete
(
win
)
;
}
let
hiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
URLBar
.
popup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
win
)
;
await
hiddenPromise
;
}
EXPECTED_REFLOWS_FIRST_OPEN
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
