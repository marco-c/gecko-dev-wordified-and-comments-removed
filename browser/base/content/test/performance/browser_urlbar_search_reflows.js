"
use
strict
"
;
requestLongerTimeout
(
5
)
;
const
EXPECTED_REFLOWS_FIRST_OPEN
=
[
{
stack
:
[
"
_rebuild
chrome
:
/
/
browser
/
content
/
search
/
search
.
xml
"
"
set_popup
chrome
:
/
/
browser
/
content
/
search
/
search
.
xml
"
"
enableOneOffSearches
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
_enableOrDisableOneOffSearches
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
urlbar_XBL_Constructor
/
<
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
_openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
set_popupOpen
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
}
{
stack
:
[
"
adjustHeight
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
onxblpopupshown
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
maxCount
:
5
}
{
stack
:
[
"
adjustHeight
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_invalidate
/
this
.
_adjustHeightTimeout
<
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
maxCount
:
6
}
{
stack
:
[
"
_handleOverflow
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
handleOverUnderflow
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_reuseAcItem
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_appendCurrentResult
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_invalidate
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
invalidate
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
maxCount
:
36
}
{
stack
:
[
"
_handleOverflow
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
handleOverUnderflow
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
set_popupOpen
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
maxCount
:
6
}
{
stack
:
[
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
_openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
set_popupOpen
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
}
]
;
const
EXPECTED_REFLOWS_SECOND_OPEN
=
[
{
stack
:
[
"
adjustHeight
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
onxblpopupshown
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
maxCount
:
3
}
{
stack
:
[
"
adjustHeight
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_invalidate
/
this
.
_adjustHeightTimeout
<
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
maxCount
:
6
}
{
stack
:
[
"
_handleOverflow
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
handleOverUnderflow
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_reuseAcItem
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_appendCurrentResult
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
_invalidate
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
invalidate
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
maxCount
:
24
}
{
stack
:
[
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
_openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openAutocompletePopup
chrome
:
/
/
browser
/
content
/
urlbarBindings
.
xml
"
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
"
set_popupOpen
chrome
:
/
/
global
/
content
/
bindings
/
autocomplete
.
xml
"
]
}
]
;
const
SEARCH_TERM
=
"
urlbar
-
reflows
-
"
+
Date
.
now
(
)
;
add_task
(
async
function
setup
(
)
{
await
addDummyHistoryEntries
(
SEARCH_TERM
)
;
}
)
;
add_task
(
async
function
(
)
{
let
win
=
await
prepareSettledWindow
(
)
;
let
URLBar
=
win
.
gURLBar
;
let
popup
=
URLBar
.
popup
;
URLBar
.
focus
(
)
;
URLBar
.
value
=
SEARCH_TERM
;
let
testFn
=
async
function
(
)
{
let
oldInvalidate
=
popup
.
invalidate
.
bind
(
popup
)
;
let
oldResultsAdded
=
popup
.
onResultsAdded
.
bind
(
popup
)
;
let
oldSetTimeout
=
win
.
setTimeout
;
popup
.
invalidate
=
(
reason
)
=
>
{
dirtyFrame
(
win
)
;
oldInvalidate
(
reason
)
;
}
;
popup
.
onResultsAdded
=
(
)
=
>
{
dirtyFrame
(
win
)
;
oldResultsAdded
(
)
;
}
;
win
.
setTimeout
=
(
fn
ms
)
=
>
{
return
oldSetTimeout
(
(
)
=
>
{
dirtyFrame
(
win
)
;
fn
(
)
;
}
ms
)
;
}
;
URLBar
.
controller
.
startSearch
(
URLBar
.
value
)
;
await
BrowserTestUtils
.
waitForEvent
(
URLBar
.
popup
"
popupshown
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
URLBar
.
controller
.
searchStatus
>
=
Ci
.
nsIAutoCompleteController
.
STATUS_COMPLETE_NO_MATCH
;
}
)
;
let
matchCount
=
URLBar
.
popup
.
matchCount
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
URLBar
.
popup
.
richlistbox
.
childNodes
.
length
=
=
matchCount
;
}
)
;
URLBar
.
controller
.
stopSearch
(
)
;
await
new
Promise
(
resolve
=
>
win
.
requestIdleCallback
(
resolve
{
timeout
:
1000
}
)
)
;
let
hiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
URLBar
.
popup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
win
)
;
await
hiddenPromise
;
}
;
info
(
"
First
opening
"
)
;
await
withPerfObserver
(
testFn
{
expectedReflows
:
EXPECTED_REFLOWS_FIRST_OPEN
}
win
)
;
info
(
"
Second
opening
"
)
;
await
withPerfObserver
(
testFn
{
expectedReflows
:
EXPECTED_REFLOWS_SECOND_OPEN
}
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
