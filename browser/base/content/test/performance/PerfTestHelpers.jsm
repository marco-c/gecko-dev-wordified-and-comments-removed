var
EXPORTED_SYMBOLS
=
[
"
PerfTestHelpers
"
]
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
NetUtil
"
"
resource
:
/
/
gre
/
modules
/
NetUtil
.
jsm
"
)
;
var
PerfTestHelpers
=
{
async
throttledMapPromises
(
iterable
task
limit
=
64
)
{
let
pending
=
new
Set
(
)
;
let
promises
=
[
]
;
for
(
let
data
of
iterable
)
{
while
(
pending
.
size
>
=
limit
)
{
await
Promise
.
race
(
pending
)
;
}
let
promise
=
task
(
data
)
;
promises
.
push
(
promise
)
;
if
(
promise
)
{
promise
.
finally
(
(
)
=
>
pending
.
delete
(
promise
)
)
;
pending
.
add
(
promise
)
;
}
}
return
Promise
.
all
(
promises
)
;
}
checkURIExists
(
uri
)
{
return
new
Promise
(
resolve
=
>
{
try
{
let
channel
=
lazy
.
NetUtil
.
newChannel
(
{
uri
loadUsingSystemPrincipal
:
true
contentPolicyType
:
Ci
.
nsIContentPolicy
.
TYPE_FETCH
}
)
;
channel
.
asyncOpen
(
{
onStartRequest
(
request
)
{
resolve
(
Components
.
isSuccessCode
(
request
.
status
)
)
;
request
.
cancel
(
Cr
.
NS_BINDING_ABORTED
)
;
}
onStopRequest
(
request
status
)
{
resolve
(
Components
.
isSuccessCode
(
status
)
)
;
}
}
)
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_FILE_NOT_FOUND
&
&
e
.
result
!
=
Cr
.
NS_ERROR_NOT_AVAILABLE
)
{
throw
e
;
}
resolve
(
false
)
;
}
}
)
;
}
}
;
