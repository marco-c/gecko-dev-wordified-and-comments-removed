"
use
strict
"
;
const
EXPECTED_REFLOWS
=
[
]
;
add_task
(
async
function
(
)
{
gReduceMotionOverride
=
false
;
await
ensureNoPreloadedBrowser
(
)
;
await
disableFxaBadge
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
toolbars
.
bookmarks
.
visibility
"
"
never
"
]
]
}
)
;
Assert
.
equal
(
EXPECTED_REFLOWS
.
length
0
"
We
shouldn
'
t
have
added
any
new
expected
reflows
.
"
)
;
const
TAB_COUNT_FOR_GROWTH
=
computeMaxTabCount
(
)
;
await
createTabs
(
TAB_COUNT_FOR_GROWTH
)
;
let
lastTab
=
gBrowser
.
tabs
[
gBrowser
.
tabs
.
length
-
1
]
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
lastTab
)
;
let
tabStripRect
=
gBrowser
.
tabContainer
.
arrowScrollbox
.
getBoundingClientRect
(
)
;
let
firefoxViewRect
=
document
.
getElementById
(
"
firefox
-
view
-
button
"
)
.
getBoundingClientRect
(
)
;
function
isInTabStrip
(
r
)
{
return
(
r
.
y1
>
=
tabStripRect
.
top
&
&
r
.
y2
<
=
tabStripRect
.
bottom
&
&
r
.
x1
>
=
tabStripRect
.
left
&
&
r
.
x2
<
=
tabStripRect
.
right
&
&
r
.
w
<
=
(
gBrowser
.
tabs
.
length
-
1
)
*
Math
.
ceil
(
tabStripRect
.
width
/
gBrowser
.
tabs
.
length
)
)
;
}
await
withPerfObserver
(
async
function
(
)
{
let
switchDone
=
BrowserTestUtils
.
waitForEvent
(
window
"
TabSwitchDone
"
)
;
let
tab
=
gBrowser
.
tabs
[
gBrowser
.
tabs
.
length
-
1
]
;
gBrowser
.
removeTab
(
tab
{
animate
:
true
byMouse
:
true
}
)
;
await
BrowserTestUtils
.
waitForEvent
(
tab
"
TabAnimationEnd
"
)
;
await
switchDone
;
}
{
expectedReflows
:
EXPECTED_REFLOWS
frames
:
{
filter
:
rects
=
>
rects
.
filter
(
r
=
>
{
if
(
isInTabStrip
(
r
)
)
{
return
false
;
}
if
(
r
.
w
=
=
16
&
&
r
.
h
=
=
16
&
&
rectInBoundingClientRect
(
r
firefoxViewRect
)
)
{
return
false
;
}
return
true
;
}
)
}
}
)
;
await
removeAllButFirstTab
(
)
;
}
)
;
