"
use
strict
"
;
const
EXPECTED_OVERFLOW_REFLOWS
=
[
]
;
const
EXPECTED_UNDERFLOW_REFLOWS
=
[
]
;
add_task
(
async
function
(
)
{
await
ensureNoPreloadedBrowser
(
)
;
const
TAB_COUNT_FOR_OVERFLOW
=
computeMaxTabCount
(
)
;
await
createTabs
(
TAB_COUNT_FOR_OVERFLOW
)
;
await
ensureFocusedUrlbar
(
)
;
let
tabStripRect
=
gBrowser
.
tabContainer
.
arrowScrollbox
.
getBoundingClientRect
(
)
;
let
textBoxRect
=
document
.
getAnonymousElementByAttribute
(
gURLBar
"
anonid
"
"
moz
-
input
-
box
"
)
.
getBoundingClientRect
(
)
;
let
ignoreTabstripRects
=
{
filter
:
rects
=
>
rects
.
filter
(
r
=
>
!
(
r
.
y1
>
=
tabStripRect
.
top
&
&
r
.
y2
<
=
tabStripRect
.
bottom
&
&
r
.
x1
>
=
tabStripRect
.
left
&
&
r
.
x2
<
=
tabStripRect
.
right
)
)
exceptions
:
[
{
name
:
"
the
urlbar
placeolder
moves
up
and
down
by
a
few
pixels
"
condition
:
r
=
>
r
.
x1
>
=
textBoxRect
.
left
&
&
r
.
x2
<
=
textBoxRect
.
right
&
&
r
.
y1
>
=
textBoxRect
.
top
&
&
r
.
y2
<
=
textBoxRect
.
bottom
}
{
name
:
"
bug
1446449
-
spurious
tab
switch
spinner
"
condition
:
r
=
>
AppConstants
.
DEBUG
&
&
r
.
y1
>
=
document
.
getElementById
(
"
appcontent
"
)
.
getBoundingClientRect
(
)
.
top
}
]
}
;
await
withPerfObserver
(
async
function
(
)
{
let
switchDone
=
BrowserTestUtils
.
waitForEvent
(
window
"
TabSwitchDone
"
)
;
BrowserOpenTab
(
)
;
await
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
selectedTab
"
transitionend
"
false
e
=
>
e
.
propertyName
=
=
=
"
max
-
width
"
)
;
await
switchDone
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
gBrowser
.
tabContainer
.
arrowScrollbox
.
hasAttribute
(
"
scrolledtoend
"
)
;
}
)
;
}
{
expectedReflows
:
EXPECTED_OVERFLOW_REFLOWS
frames
:
ignoreTabstripRects
}
)
;
Assert
.
ok
(
gBrowser
.
tabContainer
.
hasAttribute
(
"
overflow
"
)
"
Tabs
should
now
be
overflowed
.
"
)
;
await
withPerfObserver
(
async
function
(
)
{
let
switchDone
=
BrowserTestUtils
.
waitForEvent
(
window
"
TabSwitchDone
"
)
;
BrowserOpenTab
(
)
;
await
switchDone
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
gBrowser
.
tabContainer
.
arrowScrollbox
.
hasAttribute
(
"
scrolledtoend
"
)
;
}
)
;
}
{
expectedReflows
:
[
]
frames
:
ignoreTabstripRects
}
)
;
await
withPerfObserver
(
async
function
(
)
{
let
switchDone
=
BrowserTestUtils
.
waitForEvent
(
window
"
TabSwitchDone
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
{
animate
:
true
}
)
;
await
switchDone
;
}
{
expectedReflows
:
[
]
frames
:
ignoreTabstripRects
}
)
;
let
lastTab
=
gBrowser
.
selectedTab
;
let
arrowScrollbox
=
gBrowser
.
tabContainer
.
arrowScrollbox
;
Assert
.
ok
(
arrowScrollbox
.
scrollPosition
>
0
"
First
tab
should
be
partially
scrolled
out
of
view
.
"
)
;
await
withPerfObserver
(
async
function
(
)
{
let
firstTab
=
gBrowser
.
tabContainer
.
firstChild
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
firstTab
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
gBrowser
.
tabContainer
.
arrowScrollbox
.
hasAttribute
(
"
scrolledtostart
"
)
;
}
)
;
}
{
expectedReflows
:
[
]
frames
:
ignoreTabstripRects
}
)
;
BrowserTestUtils
.
removeTab
(
lastTab
)
;
Assert
.
ok
(
gBrowser
.
tabContainer
.
hasAttribute
(
"
overflow
"
)
"
Tabs
should
still
be
overflowed
.
"
)
;
while
(
gBrowser
.
tabContainer
.
hasAttribute
(
"
overflow
"
)
)
{
lastTab
=
gBrowser
.
tabContainer
.
lastElementChild
;
if
(
gBrowser
.
selectedTab
!
=
=
lastTab
)
{
await
BrowserTestUtils
.
switchTab
(
gBrowser
lastTab
)
;
}
await
withPerfObserver
(
async
function
(
)
{
let
switchDone
=
BrowserTestUtils
.
waitForEvent
(
window
"
TabSwitchDone
"
)
;
BrowserTestUtils
.
removeTab
(
lastTab
{
animate
:
true
}
)
;
await
switchDone
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
lastTab
.
isConnected
)
;
}
{
expectedReflows
:
EXPECTED_UNDERFLOW_REFLOWS
frames
:
ignoreTabstripRects
}
)
;
}
await
removeAllButFirstTab
(
)
;
}
)
;
