async
function
withReflowObserver
(
testFn
expectedStacks
=
[
]
win
=
window
elemToDirty
)
{
if
(
!
elemToDirty
)
{
elemToDirty
=
win
.
document
.
firstElementChild
;
}
let
i
=
0
;
let
dirtyFrameFn
=
(
e
)
=
>
{
elemToDirty
.
style
.
margin
=
(
+
+
i
%
4
)
+
"
px
"
;
}
;
let
els
=
Cc
[
"
mozilla
.
org
/
eventlistenerservice
;
1
"
]
.
getService
(
Ci
.
nsIEventListenerService
)
;
expectedStacks
=
expectedStacks
.
slice
(
0
)
;
let
observer
=
{
reflow
(
start
end
)
{
let
path
=
(
new
Error
(
)
.
stack
)
.
split
(
"
\
n
"
)
.
slice
(
1
)
.
map
(
line
=
>
{
return
line
.
replace
(
/
:
\
d
+
:
\
d
+
/
"
"
)
;
}
)
.
join
(
"
|
"
)
;
let
pathWithLineNumbers
=
(
new
Error
(
)
.
stack
)
.
split
(
"
\
n
"
)
.
slice
(
1
)
;
dirtyFrameFn
(
)
;
if
(
path
=
=
=
"
"
)
{
return
;
}
let
index
=
expectedStacks
.
findIndex
(
stack
=
>
path
.
startsWith
(
stack
.
join
(
"
|
"
)
)
)
;
if
(
index
!
=
-
1
)
{
Assert
.
ok
(
true
"
expected
uninterruptible
reflow
:
'
"
+
JSON
.
stringify
(
pathWithLineNumbers
null
"
\
t
"
)
+
"
'
"
)
;
expectedStacks
.
splice
(
index
1
)
;
}
else
{
Assert
.
ok
(
false
"
unexpected
uninterruptible
reflow
\
n
"
+
JSON
.
stringify
(
pathWithLineNumbers
null
"
\
t
"
)
+
"
\
n
"
)
;
}
}
reflowInterruptible
(
start
end
)
{
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIReflowObserver
Ci
.
nsISupportsWeakReference
]
)
}
;
let
docShell
=
win
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
docShell
.
addWeakReflowObserver
(
observer
)
;
els
.
addListenerForAllEvents
(
win
dirtyFrameFn
true
)
;
try
{
dirtyFrameFn
(
)
;
await
testFn
(
)
;
}
finally
{
for
(
let
remainder
of
expectedStacks
)
{
Assert
.
ok
(
false
Unused
expected
reflow
:
{
JSON
.
stringify
(
remainder
null
"
\
t
"
)
}
.
\
n
+
"
This
is
probably
a
good
thing
-
just
remove
it
from
the
"
+
"
expected
list
.
"
)
;
}
els
.
removeListenerForAllEvents
(
win
dirtyFrameFn
true
)
;
docShell
.
removeWeakReflowObserver
(
observer
)
;
elemToDirty
.
style
.
margin
=
"
"
;
}
}
async
function
ensureNoPreloadedBrowser
(
)
{
let
preloaded
=
gBrowser
.
_getPreloadedBrowser
(
)
;
if
(
preloaded
)
{
preloaded
.
remove
(
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtab
.
preload
"
false
]
]
}
)
;
let
aboutNewTabService
=
Cc
[
"
mozilla
.
org
/
browser
/
aboutnewtab
-
service
;
1
"
]
.
getService
(
Ci
.
nsIAboutNewTabService
)
;
aboutNewTabService
.
newTabURL
=
"
about
:
blank
"
;
registerCleanupFunction
(
(
)
=
>
{
aboutNewTabService
.
resetNewTabURL
(
)
;
}
)
;
}
function
computeMaxTabCount
(
)
{
let
currentTabCount
=
gBrowser
.
tabs
.
length
;
let
newTabButton
=
document
.
getAnonymousElementByAttribute
(
gBrowser
.
tabContainer
"
class
"
"
tabs
-
newtab
-
button
"
)
;
let
newTabRect
=
newTabButton
.
getBoundingClientRect
(
)
;
let
tabStripRect
=
gBrowser
.
tabContainer
.
mTabstrip
.
getBoundingClientRect
(
)
;
let
availableTabStripWidth
=
tabStripRect
.
width
-
newTabRect
.
width
;
let
tabMinWidth
=
parseInt
(
getComputedStyle
(
gBrowser
.
selectedTab
null
)
.
minWidth
10
)
;
let
maxTabCount
=
Math
.
floor
(
availableTabStripWidth
/
tabMinWidth
)
-
currentTabCount
;
Assert
.
ok
(
maxTabCount
>
0
"
Tabstrip
needs
to
be
wide
enough
to
accomodate
at
least
1
more
tab
"
+
"
without
overflowing
.
"
)
;
return
maxTabCount
;
}
async
function
createTabs
(
howMany
)
{
let
uris
=
[
]
;
while
(
howMany
-
-
)
{
uris
.
push
(
"
about
:
blank
"
)
;
}
gBrowser
.
loadTabs
(
uris
true
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
Array
.
from
(
gBrowser
.
tabs
)
.
every
(
tab
=
>
tab
.
_fullyOpen
)
;
}
)
;
}
async
function
removeAllButFirstTab
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
warnOnCloseOtherTabs
"
false
]
]
}
)
;
gBrowser
.
removeAllTabsBut
(
gBrowser
.
tabs
[
0
]
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
tabs
.
length
=
=
1
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
