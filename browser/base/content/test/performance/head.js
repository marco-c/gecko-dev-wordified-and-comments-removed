"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
AboutNewTab
:
"
resource
:
/
/
/
modules
/
AboutNewTab
.
sys
.
mjs
"
PerfTestHelpers
:
"
resource
:
/
/
testing
-
common
/
PerfTestHelpers
.
sys
.
mjs
"
PlacesTestUtils
:
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
sys
.
mjs
"
PlacesUtils
:
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
sys
.
mjs
"
UrlbarTestUtils
:
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
sys
.
mjs
"
}
)
;
function
dirtyFrame
(
win
)
{
let
dwu
=
win
.
windowUtils
;
try
{
dwu
.
ensureDirtyRootFrame
(
)
;
}
catch
(
e
)
{
info
(
"
Note
:
ensureDirtyRootFrame
threw
an
exception
:
"
+
e
)
;
}
}
async
function
recordReflows
(
testPromise
win
=
window
)
{
let
reflows
=
[
]
;
let
observer
=
{
reflow
(
)
{
let
stack
=
new
Error
(
)
.
stack
;
let
path
=
stack
.
trim
(
)
.
split
(
"
\
n
"
)
.
slice
(
1
)
.
map
(
line
=
>
line
.
replace
(
/
:
\
d
+
:
\
d
+
/
"
"
)
)
;
if
(
path
.
length
=
=
=
0
)
{
ChromeUtils
.
addProfilerMarker
(
"
ignoredNativeReflow
"
{
category
:
"
Test
"
}
"
Intentionally
ignoring
reflow
without
JS
stack
"
)
;
return
;
}
if
(
path
[
0
]
=
=
=
"
forceRefreshDriverTick
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
AccessibilityUtils
.
js
"
)
{
return
;
}
reflows
.
push
(
{
stack
path
:
path
.
join
(
"
|
"
)
}
)
;
ChromeUtils
.
addProfilerMarker
(
"
dirtyFrame
"
{
category
:
"
Test
"
}
"
Intentionally
dirtying
the
frame
to
help
ensure
that
synchrounous
"
+
"
reflows
will
be
detected
.
"
)
;
dirtyFrame
(
win
)
;
}
reflowInterruptible
(
)
{
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIReflowObserver
"
"
nsISupportsWeakReference
"
]
)
}
;
let
docShell
=
win
.
docShell
;
docShell
.
addWeakReflowObserver
(
observer
)
;
let
dirtyFrameFn
=
event
=
>
{
if
(
event
.
type
!
=
"
MozAfterPaint
"
)
{
dirtyFrame
(
win
)
;
}
}
;
Services
.
els
.
addListenerForAllEvents
(
win
dirtyFrameFn
true
)
;
try
{
dirtyFrame
(
win
)
;
await
testPromise
;
}
finally
{
Services
.
els
.
removeListenerForAllEvents
(
win
dirtyFrameFn
true
)
;
docShell
.
removeWeakReflowObserver
(
observer
)
;
}
return
reflows
;
}
function
reportUnexpectedReflows
(
reflows
expectedReflows
=
[
]
)
{
let
knownReflows
=
expectedReflows
.
map
(
r
=
>
{
return
{
stack
:
r
.
stack
path
:
r
.
stack
.
join
(
"
|
"
)
count
:
0
maxCount
:
r
.
maxCount
|
|
1
actualStacks
:
new
Map
(
)
}
;
}
)
;
let
unexpectedReflows
=
new
Map
(
)
;
if
(
knownReflows
.
some
(
r
=
>
r
.
path
.
includes
(
"
*
"
)
)
)
{
Assert
.
ok
(
false
"
Do
not
include
async
frames
in
the
stack
as
"
+
"
that
feature
is
not
available
on
all
trees
.
"
)
;
}
for
(
let
{
stack
path
}
of
reflows
)
{
if
(
/
^
(
synthesize
|
send
|
createDragEventObject
)
.
*
?
chrome
:
\
/
\
/
mochikit
.
*
?
EventUtils
\
.
js
/
.
test
(
path
)
)
{
continue
;
}
let
index
=
knownReflows
.
findIndex
(
reflow
=
>
path
.
startsWith
(
reflow
.
path
)
)
;
if
(
index
!
=
-
1
)
{
let
reflow
=
knownReflows
[
index
]
;
+
+
reflow
.
count
;
reflow
.
actualStacks
.
set
(
stack
(
reflow
.
actualStacks
.
get
(
stack
)
|
|
0
)
+
1
)
;
}
else
{
unexpectedReflows
.
set
(
stack
(
unexpectedReflows
.
get
(
stack
)
|
|
0
)
+
1
)
;
}
}
let
formatStack
=
stack
=
>
stack
.
split
(
"
\
n
"
)
.
slice
(
1
)
.
map
(
frame
=
>
"
"
+
frame
)
.
join
(
"
\
n
"
)
;
for
(
let
reflow
of
knownReflows
)
{
let
firstFrame
=
reflow
.
stack
[
0
]
;
if
(
!
reflow
.
count
)
{
Assert
.
ok
(
false
Unused
expected
reflow
at
{
firstFrame
}
:
\
nStack
:
\
n
+
reflow
.
stack
.
map
(
frame
=
>
"
"
+
frame
)
.
join
(
"
\
n
"
)
+
"
\
n
"
+
"
This
is
probably
a
good
thing
-
just
remove
it
from
the
list
of
reflows
.
"
)
;
}
else
{
if
(
reflow
.
count
>
reflow
.
maxCount
)
{
Assert
.
ok
(
false
reflow
at
{
firstFrame
}
was
encountered
{
reflow
.
count
}
times
\
n
+
it
was
expected
to
happen
up
to
{
reflow
.
maxCount
}
times
.
)
;
}
else
{
todo
(
false
known
reflow
at
{
firstFrame
}
was
encountered
{
reflow
.
count
}
times
)
;
}
for
(
let
[
stack
count
]
of
reflow
.
actualStacks
)
{
info
(
"
Full
stack
"
+
(
count
>
1
?
(
hit
{
count
}
times
)
:
"
"
)
+
"
:
\
n
"
+
formatStack
(
stack
)
)
;
}
}
}
for
(
let
[
stack
count
]
of
unexpectedReflows
)
{
let
location
=
stack
.
split
(
"
\
n
"
)
[
1
]
.
replace
(
/
:
\
d
+
:
\
d
+
/
"
"
)
;
Assert
.
ok
(
false
unexpected
reflow
at
{
location
}
hit
{
count
}
times
\
n
+
"
Stack
:
\
n
"
+
formatStack
(
stack
)
)
;
}
Assert
.
ok
(
!
unexpectedReflows
.
size
unexpectedReflows
.
size
+
"
unexpected
reflows
"
)
;
}
async
function
ensureNoPreloadedBrowser
(
win
=
window
)
{
NewTabPagePreloading
.
removePreloadedBrowser
(
win
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtab
.
preload
"
false
]
]
}
)
;
AboutNewTab
.
newTabURL
=
"
about
:
blank
"
;
registerCleanupFunction
(
(
)
=
>
{
AboutNewTab
.
resetNewTabURL
(
)
;
}
)
;
}
function
disableFxaBadge
(
)
{
let
{
ToolbarBadgeHub
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
asrouter
/
ToolbarBadgeHub
.
sys
.
mjs
"
)
;
ToolbarBadgeHub
.
removeAllNotifications
(
)
;
return
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
identity
.
fxaccounts
.
toolbar
.
accessed
"
true
]
]
}
)
;
}
function
rectInBoundingClientRect
(
r
bcr
)
{
return
(
bcr
.
x
<
=
r
.
x1
&
&
bcr
.
y
<
=
r
.
y1
&
&
bcr
.
x
+
bcr
.
width
>
=
r
.
x2
&
&
bcr
.
y
+
bcr
.
height
>
=
r
.
y2
)
;
}
async
function
getBookmarksToolbarRect
(
)
{
let
bookmarksToolbar
=
gNavToolbox
.
querySelector
(
"
#
PersonalToolbar
"
)
;
let
wasVisible
=
!
bookmarksToolbar
.
collapsed
;
if
(
!
wasVisible
)
{
setToolbarVisibility
(
bookmarksToolbar
true
false
false
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
bookmarksToolbar
.
getBoundingClientRect
(
)
.
height
>
0
"
wait
for
non
-
zero
bookmarks
toolbar
height
"
)
;
}
let
bookmarksToolbarRect
=
bookmarksToolbar
.
getBoundingClientRect
(
)
;
if
(
!
wasVisible
)
{
setToolbarVisibility
(
bookmarksToolbar
false
false
false
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
bookmarksToolbar
.
getBoundingClientRect
(
)
.
height
=
=
0
"
wait
for
zero
bookmarks
toolbar
height
"
)
;
}
return
bookmarksToolbarRect
;
}
async
function
ensureAnimationsFinished
(
win
=
window
)
{
let
animations
=
win
.
document
.
getAnimations
(
)
;
info
(
Waiting
for
{
animations
.
length
}
animations
)
;
await
Promise
.
allSettled
(
animations
.
map
(
a
=
>
a
.
finished
)
)
;
}
async
function
prepareSettledWindow
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
ensureNoPreloadedBrowser
(
win
)
;
await
ensureAnimationsFinished
(
win
)
;
return
win
;
}
function
computeMaxTabCount
(
)
{
let
currentTabCount
=
gBrowser
.
tabs
.
length
;
let
newTabButton
=
gBrowser
.
tabContainer
.
newTabButton
;
let
newTabRect
=
newTabButton
.
getBoundingClientRect
(
)
;
let
tabStripRect
=
gBrowser
.
tabContainer
.
arrowScrollbox
.
getBoundingClientRect
(
)
;
let
availableTabStripWidth
=
tabStripRect
.
width
-
newTabRect
.
width
;
let
tabMinWidth
=
parseInt
(
getComputedStyle
(
gBrowser
.
selectedTab
null
)
.
minWidth
10
)
;
let
maxTabCount
=
Math
.
floor
(
availableTabStripWidth
/
tabMinWidth
)
-
currentTabCount
;
Assert
.
greater
(
maxTabCount
0
"
Tabstrip
needs
to
be
wide
enough
to
accomodate
at
least
1
more
tab
"
+
"
without
overflowing
.
"
)
;
return
maxTabCount
;
}
async
function
createTabs
(
howMany
)
{
let
uris
=
[
]
;
while
(
howMany
-
-
)
{
uris
.
push
(
"
about
:
blank
"
)
;
}
gBrowser
.
loadTabs
(
uris
{
inBackground
:
true
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
Array
.
from
(
gBrowser
.
tabs
)
.
every
(
tab
=
>
tab
.
_fullyOpen
)
;
}
)
;
}
async
function
removeAllButFirstTab
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
warnOnCloseOtherTabs
"
false
]
]
}
)
;
gBrowser
.
removeAllTabsBut
(
gBrowser
.
tabs
[
0
]
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
tabs
.
length
=
=
1
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
async
function
addDummyHistoryEntries
(
searchStr
=
"
"
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
const
NUM_VISITS
=
10
;
let
visits
=
[
]
;
for
(
let
i
=
0
;
i
<
NUM_VISITS
;
+
+
i
)
{
visits
.
push
(
{
uri
:
http
:
/
/
example
.
com
/
urlbar
-
reflows
-
{
i
}
title
:
Reflow
test
for
URL
bar
entry
#
{
i
}
-
{
searchStr
}
}
)
;
}
await
PlacesTestUtils
.
addVisits
(
visits
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
}
async
function
recordFrames
(
testPromise
win
=
window
)
{
let
canvas
=
win
.
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
canvas
"
)
;
canvas
.
mozOpaque
=
true
;
let
ctx
=
canvas
.
getContext
(
"
2d
"
{
alpha
:
false
willReadFrequently
:
true
}
)
;
let
frames
=
[
]
;
let
afterPaintListener
=
(
)
=
>
{
let
width
height
;
canvas
.
width
=
width
=
win
.
innerWidth
;
canvas
.
height
=
height
=
win
.
innerHeight
;
ctx
.
drawWindow
(
win
0
0
width
height
"
white
"
ctx
.
DRAWWINDOW_DO_NOT_FLUSH
|
ctx
.
DRAWWINDOW_DRAW_VIEW
|
ctx
.
DRAWWINDOW_ASYNC_DECODE_IMAGES
|
ctx
.
DRAWWINDOW_USE_WIDGET_LAYERS
)
;
let
data
=
Cu
.
cloneInto
(
ctx
.
getImageData
(
0
0
width
height
)
.
data
{
}
)
;
if
(
frames
.
length
)
{
let
previous
=
frames
[
frames
.
length
-
1
]
;
if
(
previous
.
width
=
=
width
&
&
previous
.
height
=
=
height
)
{
let
equals
=
true
;
for
(
let
i
=
0
;
i
<
data
.
length
;
+
+
i
)
{
if
(
data
[
i
]
!
=
previous
.
data
[
i
]
)
{
equals
=
false
;
break
;
}
}
if
(
equals
)
{
return
;
}
}
}
frames
.
push
(
{
data
width
height
}
)
;
}
;
win
.
addEventListener
(
"
MozAfterPaint
"
afterPaintListener
)
;
if
(
win
.
document
.
readyState
=
=
"
complete
"
)
{
afterPaintListener
(
)
;
}
try
{
await
testPromise
;
}
finally
{
win
.
removeEventListener
(
"
MozAfterPaint
"
afterPaintListener
)
;
}
return
frames
;
}
const
kMaxEmptyPixels
=
3
;
function
compareFrames
(
frame
previousFrame
)
{
const
M
=
Math
;
function
expandRect
(
x
y
rect
)
{
if
(
rect
.
x2
<
x
)
{
rect
.
x2
=
x
;
}
else
if
(
rect
.
x1
>
x
)
{
rect
.
x1
=
x
;
}
if
(
rect
.
y2
<
y
)
{
rect
.
y2
=
y
;
}
}
function
isInRect
(
x
y
rect
)
{
return
(
(
rect
.
y2
=
=
y
|
|
rect
.
y2
=
=
y
-
1
)
&
&
rect
.
x1
-
1
<
=
x
&
&
x
<
=
rect
.
x2
+
1
)
;
}
if
(
frame
.
height
!
=
previousFrame
.
height
|
|
frame
.
width
!
=
previousFrame
.
width
)
{
return
[
{
x1
:
0
x2
:
frame
.
width
y1
:
0
y2
:
frame
.
height
}
]
;
}
let
l
=
frame
.
data
.
length
;
let
different
=
[
]
;
let
rects
=
[
]
;
for
(
let
i
=
0
;
i
<
l
;
i
+
=
4
)
{
let
x
=
(
i
/
4
)
%
frame
.
width
;
let
y
=
M
.
floor
(
i
/
4
/
frame
.
width
)
;
for
(
let
j
=
0
;
j
<
4
;
+
+
j
)
{
let
index
=
i
+
j
;
if
(
frame
.
data
[
index
]
!
=
previousFrame
.
data
[
index
]
)
{
let
found
=
false
;
for
(
let
rect
of
rects
)
{
if
(
isInRect
(
x
y
rect
)
)
{
expandRect
(
x
y
rect
)
;
found
=
true
;
break
;
}
}
if
(
!
found
)
{
rects
.
unshift
(
{
x1
:
x
x2
:
x
y1
:
y
y2
:
y
}
)
;
}
different
.
push
(
i
)
;
break
;
}
}
}
rects
.
reverse
(
)
;
let
areRectsContiguous
=
function
(
r1
r2
)
{
return
(
r1
.
y2
>
=
r2
.
y1
-
1
-
kMaxEmptyPixels
&
&
r2
.
x1
-
1
-
kMaxEmptyPixels
<
=
r1
.
x2
&
&
r2
.
x2
>
=
r1
.
x1
-
1
-
kMaxEmptyPixels
)
;
}
;
let
hasMergedRects
;
do
{
hasMergedRects
=
false
;
for
(
let
r
=
rects
.
length
-
1
;
r
>
0
;
-
-
r
)
{
let
rr
=
rects
[
r
]
;
for
(
let
s
=
r
-
1
;
s
>
=
0
;
-
-
s
)
{
let
rs
=
rects
[
s
]
;
if
(
areRectsContiguous
(
rs
rr
)
)
{
rs
.
x1
=
Math
.
min
(
rs
.
x1
rr
.
x1
)
;
rs
.
y1
=
Math
.
min
(
rs
.
y1
rr
.
y1
)
;
rs
.
x2
=
Math
.
max
(
rs
.
x2
rr
.
x2
)
;
rs
.
y2
=
Math
.
max
(
rs
.
y2
rr
.
y2
)
;
rects
.
splice
(
r
1
)
;
hasMergedRects
=
true
;
break
;
}
}
}
}
while
(
hasMergedRects
)
;
rects
.
forEach
(
r
=
>
{
r
.
w
=
r
.
x2
-
r
.
x1
+
1
;
r
.
h
=
r
.
y2
-
r
.
y1
+
1
;
}
)
;
return
rects
;
}
function
dumpFrame
(
{
data
width
height
}
)
{
let
canvas
=
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
canvas
"
)
;
canvas
.
mozOpaque
=
true
;
canvas
.
width
=
width
;
canvas
.
height
=
height
;
canvas
.
getContext
(
"
2d
"
{
alpha
:
false
willReadFrequently
:
true
}
)
.
putImageData
(
new
ImageData
(
data
width
height
)
0
0
)
;
info
(
canvas
.
toDataURL
(
)
)
;
}
function
reportUnexpectedFlicker
(
frames
expectations
)
{
info
(
"
comparing
"
+
frames
.
length
+
"
frames
"
)
;
let
unexpectedRects
=
0
;
for
(
let
i
=
1
;
i
<
frames
.
length
;
+
+
i
)
{
let
frame
=
frames
[
i
]
previousFrame
=
frames
[
i
-
1
]
;
let
rects
=
compareFrames
(
frame
previousFrame
)
;
let
rectText
=
r
=
>
{
r
.
toSource
(
)
}
window
width
:
{
frame
.
width
}
;
rects
=
rects
.
filter
(
rect
=
>
{
for
(
let
e
of
expectations
.
exceptions
|
|
[
]
)
{
if
(
e
.
condition
(
rect
)
)
{
todo
(
false
e
.
name
+
"
"
+
rectText
(
rect
)
)
;
return
false
;
}
}
return
true
;
}
)
;
if
(
expectations
.
filter
)
{
rects
=
expectations
.
filter
(
rects
frame
previousFrame
)
;
}
if
(
!
rects
.
length
)
{
continue
;
}
ok
(
false
unexpected
{
rects
.
length
}
changed
rects
:
{
rects
.
map
(
rectText
)
.
join
(
"
"
)
}
)
;
if
(
!
unexpectedRects
)
{
dumpFrame
(
previousFrame
)
;
}
unexpectedRects
+
=
rects
.
length
;
dumpFrame
(
frame
)
;
}
is
(
unexpectedRects
0
"
should
have
0
unknown
flickering
areas
"
)
;
}
async
function
withPerfObserver
(
testFn
exceptions
=
{
}
win
=
window
)
{
let
resolveFn
rejectFn
;
let
promiseTestDone
=
new
Promise
(
(
resolve
reject
)
=
>
{
resolveFn
=
resolve
;
rejectFn
=
reject
;
}
)
;
let
promiseReflows
=
recordReflows
(
promiseTestDone
win
)
;
let
promiseFrames
=
recordFrames
(
promiseTestDone
win
)
;
testFn
(
)
.
then
(
resolveFn
rejectFn
)
;
await
promiseTestDone
;
let
reflows
=
await
promiseReflows
;
reportUnexpectedReflows
(
reflows
exceptions
.
expectedReflows
)
;
let
frames
=
await
promiseFrames
;
reportUnexpectedFlicker
(
frames
exceptions
.
frames
)
;
}
async
function
runUrlbarTest
(
keyed
expectedReflowsFirstOpen
expectedReflowsSecondOpen
=
null
)
{
const
SEARCH_TERM
=
keyed
?
"
"
:
"
urlbar
-
reflows
-
"
+
Date
.
now
(
)
;
await
addDummyHistoryEntries
(
SEARCH_TERM
)
;
let
win
=
await
prepareSettledWindow
(
)
;
let
URLBar
=
win
.
gURLBar
;
URLBar
.
focus
(
)
;
URLBar
.
value
=
SEARCH_TERM
;
let
testFn
=
async
function
(
)
{
let
popup
=
URLBar
.
view
;
let
oldOnQueryResults
=
popup
.
onQueryResults
.
bind
(
popup
)
;
let
oldOnQueryFinished
=
popup
.
onQueryFinished
.
bind
(
popup
)
;
popup
.
onQueryResults
=
context
=
>
{
dirtyFrame
(
win
)
;
oldOnQueryResults
(
context
)
;
}
;
popup
.
onQueryFinished
=
context
=
>
{
dirtyFrame
(
win
)
;
oldOnQueryFinished
(
context
)
;
}
;
let
waitExtra
=
async
(
)
=
>
{
await
new
Promise
(
resolve
=
>
win
.
requestIdleCallback
(
resolve
{
timeout
:
1000
}
)
)
;
}
;
if
(
keyed
)
{
let
searchTerm
=
"
ows
-
10
"
;
for
(
let
i
=
0
;
i
<
searchTerm
.
length
;
+
+
i
)
{
let
char
=
searchTerm
[
i
]
;
EventUtils
.
synthesizeKey
(
char
{
}
win
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
win
)
;
await
waitExtra
(
)
;
}
}
else
{
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
:
win
waitForFocus
:
SimpleTest
.
waitForFocus
value
:
URLBar
.
value
}
)
;
await
waitExtra
(
)
;
}
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
}
;
let
urlbarRect
=
URLBar
.
textbox
.
getBoundingClientRect
(
)
;
const
SHADOW_SIZE
=
17
;
const
INLINE_MARGIN
=
5
;
const
VERTICAL_OFFSET
=
-
4
;
let
expectedRects
=
{
filter
:
rects
=
>
{
const
referenceRect
=
{
x1
:
Math
.
floor
(
urlbarRect
.
left
)
-
INLINE_MARGIN
-
SHADOW_SIZE
x2
:
Math
.
ceil
(
urlbarRect
.
right
)
+
INLINE_MARGIN
+
SHADOW_SIZE
y1
:
Math
.
floor
(
urlbarRect
.
top
)
+
VERTICAL_OFFSET
-
SHADOW_SIZE
}
;
return
rects
.
filter
(
r
=
>
!
(
r
.
x1
>
=
referenceRect
.
x1
&
&
r
.
x2
<
=
referenceRect
.
x2
&
&
r
.
y1
>
=
referenceRect
.
y1
)
)
;
}
}
;
info
(
"
First
opening
"
)
;
await
withPerfObserver
(
testFn
{
expectedReflows
:
expectedReflowsFirstOpen
frames
:
expectedRects
}
win
)
;
if
(
expectedReflowsSecondOpen
)
{
info
(
"
Second
opening
"
)
;
await
withPerfObserver
(
testFn
{
expectedReflows
:
expectedReflowsSecondOpen
frames
:
expectedRects
}
win
)
;
}
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
async
function
checkLoadedScripts
(
{
loadedInfo
known
intermittent
forbidden
dumpAllStacks
}
)
{
let
loadedList
=
{
}
;
async
function
checkAllExist
(
scriptType
list
listType
)
{
if
(
scriptType
=
=
"
services
"
)
{
for
(
let
contract
of
list
)
{
ok
(
contract
in
Cc
{
listType
}
entry
{
contract
}
for
content
process
startup
must
exist
)
;
}
}
else
{
let
results
=
await
PerfTestHelpers
.
throttledMapPromises
(
list
async
uri
=
>
(
{
uri
exists
:
await
PerfTestHelpers
.
checkURIExists
(
uri
)
}
)
)
;
for
(
let
{
uri
exists
}
of
results
)
{
ok
(
exists
{
listType
}
entry
{
uri
}
for
content
process
startup
must
exist
)
;
}
}
}
for
(
let
scriptType
in
known
)
{
loadedList
[
scriptType
]
=
[
.
.
.
loadedInfo
[
scriptType
]
.
keys
(
)
]
.
filter
(
c
=
>
{
if
(
!
known
[
scriptType
]
.
has
(
c
)
)
{
return
true
;
}
known
[
scriptType
]
.
delete
(
c
)
;
return
false
;
}
)
;
loadedList
[
scriptType
]
=
[
.
.
.
loadedList
[
scriptType
]
]
.
filter
(
c
=
>
{
return
!
intermittent
[
scriptType
]
.
has
(
c
)
;
}
)
;
if
(
loadedList
[
scriptType
]
.
length
)
{
console
.
log
(
"
Unexpected
scripts
:
"
loadedList
[
scriptType
]
)
;
}
is
(
loadedList
[
scriptType
]
.
length
0
should
have
no
unexpected
{
scriptType
}
loaded
on
content
process
startup
)
;
for
(
let
script
of
loadedList
[
scriptType
]
)
{
record
(
false
Unexpected
{
scriptType
}
loaded
during
content
process
startup
:
{
script
}
undefined
loadedInfo
[
scriptType
]
.
get
(
script
)
)
;
}
await
checkAllExist
(
scriptType
intermittent
[
scriptType
]
"
intermittent
"
)
;
is
(
known
[
scriptType
]
.
size
0
all
known
{
scriptType
}
scripts
should
have
been
loaded
)
;
for
(
let
script
of
known
[
scriptType
]
)
{
ok
(
false
{
scriptType
}
is
expected
to
load
for
content
process
startup
but
wasn
'
t
:
{
script
}
)
;
}
if
(
dumpAllStacks
)
{
info
(
Stacks
for
all
loaded
{
scriptType
}
:
)
;
for
(
let
[
file
stack
]
of
loadedInfo
[
scriptType
]
)
{
if
(
stack
)
{
info
(
{
file
}
\
n
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
+
stack
+
"
\
n
"
)
;
}
}
}
}
for
(
let
scriptType
in
forbidden
)
{
for
(
let
script
of
forbidden
[
scriptType
]
)
{
let
loaded
=
loadedInfo
[
scriptType
]
.
has
(
script
)
;
if
(
loaded
)
{
record
(
false
Forbidden
{
scriptType
}
loaded
during
content
process
startup
:
{
script
}
undefined
loadedInfo
[
scriptType
]
.
get
(
script
)
)
;
}
}
await
checkAllExist
(
scriptType
forbidden
[
scriptType
]
"
forbidden
"
)
;
}
}
function
isLikelyFocusChange
(
rects
frame
)
{
if
(
rects
.
length
>
3
&
&
rects
.
every
(
r
=
>
r
.
y2
<
100
)
)
{
return
true
;
}
if
(
rects
.
every
(
r
=
>
r
.
y1
=
=
0
&
&
r
.
x1
=
=
0
&
&
r
.
w
=
=
frame
.
width
&
&
r
.
y2
<
100
)
)
{
return
true
;
}
return
false
;
}
