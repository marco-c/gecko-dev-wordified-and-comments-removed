"
use
strict
"
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PlacesTestUtils
"
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
jsm
"
)
;
async
function
withReflowObserver
(
testFn
expectedReflows
=
[
]
win
=
window
)
{
let
dwu
=
win
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
let
dirtyFrameFn
=
(
)
=
>
{
try
{
dwu
.
ensureDirtyRootFrame
(
)
;
}
catch
(
e
)
{
info
(
"
Note
:
ensureDirtyRootFrame
threw
an
exception
.
"
)
;
}
}
;
expectedReflows
=
expectedReflows
.
slice
(
0
)
;
expectedReflows
.
forEach
(
r
=
>
{
r
.
times
=
r
.
times
|
|
1
;
}
)
;
let
observer
=
{
reflow
(
start
end
)
{
let
path
=
(
new
Error
(
)
.
stack
)
.
split
(
"
\
n
"
)
.
slice
(
1
)
.
map
(
line
=
>
{
return
line
.
replace
(
/
:
\
d
+
:
\
d
+
/
"
"
)
;
}
)
.
join
(
"
|
"
)
;
let
pathWithLineNumbers
=
(
new
Error
(
)
.
stack
)
.
split
(
"
\
n
"
)
.
slice
(
1
)
;
dirtyFrameFn
(
)
;
if
(
path
=
=
=
"
"
)
{
return
;
}
if
(
path
.
startsWith
(
"
synthesizeKey
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
)
)
{
return
;
}
let
index
=
expectedReflows
.
findIndex
(
reflow
=
>
path
.
startsWith
(
reflow
.
stack
.
join
(
"
|
"
)
)
)
;
if
(
index
!
=
-
1
)
{
Assert
.
ok
(
true
"
expected
uninterruptible
reflow
:
'
"
+
JSON
.
stringify
(
pathWithLineNumbers
null
"
\
t
"
)
+
"
'
"
)
;
if
(
expectedReflows
[
index
]
.
minTimes
)
{
expectedReflows
[
index
]
.
minTimes
-
-
;
}
if
(
-
-
expectedReflows
[
index
]
.
times
=
=
0
)
{
expectedReflows
.
splice
(
index
1
)
;
}
}
else
{
Assert
.
ok
(
false
"
unexpected
uninterruptible
reflow
\
n
"
+
JSON
.
stringify
(
pathWithLineNumbers
null
"
\
t
"
)
+
"
\
n
"
)
;
}
}
reflowInterruptible
(
start
end
)
{
dirtyFrameFn
(
)
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIReflowObserver
Ci
.
nsISupportsWeakReference
]
)
}
;
let
docShell
=
win
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
;
docShell
.
addWeakReflowObserver
(
observer
)
;
Services
.
els
.
addListenerForAllEvents
(
win
dirtyFrameFn
true
)
;
try
{
dirtyFrameFn
(
)
;
await
testFn
(
dirtyFrameFn
)
;
}
finally
{
for
(
let
remainder
of
expectedReflows
)
{
if
(
!
Number
.
isInteger
(
remainder
.
minTimes
)
|
|
remainder
.
minTimes
>
0
)
{
Assert
.
ok
(
false
Unused
expected
reflow
:
{
JSON
.
stringify
(
remainder
.
stack
null
"
\
t
"
)
}
\
n
+
This
reflow
was
supposed
to
be
hit
{
remainder
.
minTimes
|
|
remainder
.
times
}
more
time
(
s
)
.
\
n
+
"
This
is
probably
a
good
thing
-
just
remove
it
from
the
"
+
"
expected
list
.
"
)
;
}
}
Services
.
els
.
removeListenerForAllEvents
(
win
dirtyFrameFn
true
)
;
docShell
.
removeWeakReflowObserver
(
observer
)
;
}
}
async
function
ensureNoPreloadedBrowser
(
)
{
let
preloaded
=
gBrowser
.
_getPreloadedBrowser
(
)
;
if
(
preloaded
)
{
preloaded
.
remove
(
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
newtab
.
preload
"
false
]
]
}
)
;
let
aboutNewTabService
=
Cc
[
"
mozilla
.
org
/
browser
/
aboutnewtab
-
service
;
1
"
]
.
getService
(
Ci
.
nsIAboutNewTabService
)
;
aboutNewTabService
.
newTabURL
=
"
about
:
blank
"
;
registerCleanupFunction
(
(
)
=
>
{
aboutNewTabService
.
resetNewTabURL
(
)
;
}
)
;
}
function
computeMaxTabCount
(
)
{
let
currentTabCount
=
gBrowser
.
tabs
.
length
;
let
newTabButton
=
document
.
getAnonymousElementByAttribute
(
gBrowser
.
tabContainer
"
anonid
"
"
tabs
-
newtab
-
button
"
)
;
let
newTabRect
=
newTabButton
.
getBoundingClientRect
(
)
;
let
tabStripRect
=
gBrowser
.
tabContainer
.
arrowScrollbox
.
getBoundingClientRect
(
)
;
let
availableTabStripWidth
=
tabStripRect
.
width
-
newTabRect
.
width
;
let
tabMinWidth
=
parseInt
(
getComputedStyle
(
gBrowser
.
selectedTab
null
)
.
minWidth
10
)
;
let
maxTabCount
=
Math
.
floor
(
availableTabStripWidth
/
tabMinWidth
)
-
currentTabCount
;
Assert
.
ok
(
maxTabCount
>
0
"
Tabstrip
needs
to
be
wide
enough
to
accomodate
at
least
1
more
tab
"
+
"
without
overflowing
.
"
)
;
return
maxTabCount
;
}
async
function
createTabs
(
howMany
)
{
let
uris
=
[
]
;
while
(
howMany
-
-
)
{
uris
.
push
(
"
about
:
blank
"
)
;
}
gBrowser
.
loadTabs
(
uris
true
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
Array
.
from
(
gBrowser
.
tabs
)
.
every
(
tab
=
>
tab
.
_fullyOpen
)
;
}
)
;
}
async
function
removeAllButFirstTab
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
warnOnCloseOtherTabs
"
false
]
]
}
)
;
gBrowser
.
removeAllTabsBut
(
gBrowser
.
tabs
[
0
]
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
tabs
.
length
=
=
1
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
async
function
addDummyHistoryEntries
(
searchStr
=
"
"
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
const
NUM_VISITS
=
10
;
let
visits
=
[
]
;
for
(
let
i
=
0
;
i
<
NUM_VISITS
;
+
+
i
)
{
visits
.
push
(
{
uri
:
http
:
/
/
example
.
com
/
urlbar
-
reflows
-
{
i
}
title
:
Reflow
test
for
URL
bar
entry
#
{
i
}
-
{
searchStr
}
}
)
;
}
await
PlacesTestUtils
.
addVisits
(
visits
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
}
function
compareFrames
(
frame
previousFrame
)
{
const
M
=
Math
;
function
expandRect
(
x
y
rect
)
{
if
(
rect
.
x2
<
x
)
rect
.
x2
=
x
;
else
if
(
rect
.
x1
>
x
)
rect
.
x1
=
x
;
if
(
rect
.
y2
<
y
)
rect
.
y2
=
y
;
}
function
isInRect
(
x
y
rect
)
{
return
(
rect
.
y2
=
=
y
|
|
rect
.
y2
=
=
y
-
1
)
&
&
rect
.
x1
-
1
<
=
x
&
&
x
<
=
rect
.
x2
+
1
;
}
if
(
frame
.
height
!
=
previousFrame
.
height
|
|
frame
.
width
!
=
previousFrame
.
width
)
{
return
[
{
x1
:
0
x2
:
frame
.
width
y1
:
0
y2
:
frame
.
height
}
]
;
}
let
l
=
frame
.
data
.
length
;
let
different
=
[
]
;
let
rects
=
[
]
;
for
(
let
i
=
0
;
i
<
l
;
i
+
=
4
)
{
let
x
=
(
i
/
4
)
%
frame
.
width
;
let
y
=
M
.
floor
(
(
i
/
4
)
/
frame
.
width
)
;
for
(
let
j
=
0
;
j
<
4
;
+
+
j
)
{
let
index
=
i
+
j
;
if
(
frame
.
data
[
index
]
!
=
previousFrame
.
data
[
index
]
)
{
let
found
=
false
;
for
(
let
rect
of
rects
)
{
if
(
isInRect
(
x
y
rect
)
)
{
expandRect
(
x
y
rect
)
;
found
=
true
;
break
;
}
}
if
(
!
found
)
rects
.
unshift
(
{
x1
:
x
x2
:
x
y1
:
y
y2
:
y
}
)
;
different
.
push
(
i
)
;
break
;
}
}
}
rects
.
reverse
(
)
;
const
maxEmptyPixels
=
3
;
let
areRectsContiguous
=
function
(
r1
r2
)
{
return
r1
.
y2
>
=
r2
.
y1
-
1
-
maxEmptyPixels
&
&
r2
.
x1
-
1
-
maxEmptyPixels
<
=
r1
.
x2
&
&
r2
.
x2
>
=
r1
.
x1
-
1
-
maxEmptyPixels
;
}
;
let
hasMergedRects
;
do
{
hasMergedRects
=
false
;
for
(
let
r
=
rects
.
length
-
1
;
r
>
0
;
-
-
r
)
{
let
rr
=
rects
[
r
]
;
for
(
let
s
=
r
-
1
;
s
>
=
0
;
-
-
s
)
{
let
rs
=
rects
[
s
]
;
if
(
areRectsContiguous
(
rs
rr
)
)
{
rs
.
x1
=
Math
.
min
(
rs
.
x1
rr
.
x1
)
;
rs
.
y1
=
Math
.
min
(
rs
.
y1
rr
.
y1
)
;
rs
.
x2
=
Math
.
max
(
rs
.
x2
rr
.
x2
)
;
rs
.
y2
=
Math
.
max
(
rs
.
y2
rr
.
y2
)
;
rects
.
splice
(
r
1
)
;
hasMergedRects
=
true
;
break
;
}
}
}
}
while
(
hasMergedRects
)
;
rects
.
forEach
(
r
=
>
{
r
.
w
=
r
.
x2
-
r
.
x1
;
r
.
h
=
r
.
y2
-
r
.
y1
;
}
)
;
return
rects
;
}
function
dumpFrame
(
{
data
width
height
}
)
{
let
canvas
=
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
canvas
"
)
;
canvas
.
mozOpaque
=
true
;
canvas
.
width
=
width
;
canvas
.
height
=
height
;
canvas
.
getContext
(
"
2d
"
{
alpha
:
false
willReadFrequently
:
true
}
)
.
putImageData
(
new
ImageData
(
data
width
height
)
0
0
)
;
info
(
canvas
.
toDataURL
(
)
)
;
}
