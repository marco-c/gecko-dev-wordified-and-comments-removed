"
use
strict
"
;
const
kDumpAllStacks
=
false
;
const
startupPhases
=
{
"
before
profile
selection
"
:
{
allowlist
:
{
modules
:
new
Set
(
[
"
resource
:
/
/
/
modules
/
BrowserGlue
.
sys
.
mjs
"
"
moz
-
src
:
/
/
/
browser
/
components
/
DesktopActorRegistry
.
sys
.
mjs
"
"
resource
:
/
/
/
modules
/
StartupRecorder
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
ActorManagerParent
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
CustomElementsListener
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
MainProcessSingleton
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
]
)
}
}
"
before
opening
first
browser
window
"
:
{
denylist
:
{
modules
:
new
Set
(
[
]
)
}
}
"
before
first
paint
"
:
{
denylist
:
{
modules
:
new
Set
(
[
"
resource
:
/
/
/
modules
/
AboutNewTab
.
sys
.
mjs
"
"
resource
:
/
/
/
modules
/
BrowserUsageTelemetry
.
sys
.
mjs
"
"
resource
:
/
/
/
modules
/
ContentCrashHandlers
.
sys
.
mjs
"
"
resource
:
/
/
/
modules
/
ShellService
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
NewTabUtils
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
PageThumbs
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
Preferences
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
SearchService
.
sys
.
mjs
"
]
)
services
:
new
Set
(
[
"
mozilla
.
org
/
browser
/
search
-
service
;
1
"
]
)
}
}
"
before
handling
user
events
"
:
{
denylist
:
{
modules
:
new
Set
(
[
"
resource
:
/
/
gre
/
modules
/
Blocklist
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
BookmarkHTMLUtils
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
Bookmarks
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
ContextualIdentityService
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
FxAccountsStorage
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
PlacesSyncUtils
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
PushComponents
.
sys
.
mjs
"
]
)
services
:
new
Set
(
[
"
mozilla
.
org
/
browser
/
nav
-
bookmarks
-
service
;
1
"
]
)
}
}
"
before
becoming
idle
"
:
{
denylist
:
{
modules
:
new
Set
(
[
"
resource
:
/
/
gre
/
modules
/
AsyncPrefs
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
LoginManagerContextMenu
.
sys
.
mjs
"
"
resource
:
/
/
pdf
.
js
/
PdfStreamConverter
.
sys
.
mjs
"
]
)
}
}
}
;
if
(
AppConstants
.
platform
=
=
"
win
"
)
{
startupPhases
[
"
before
profile
selection
"
]
.
allowlist
.
modules
.
add
(
"
moz
-
src
:
/
/
/
browser
/
components
/
shell
/
StartupOSIntegration
.
sys
.
mjs
"
)
;
}
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
startup
.
blankWindow
"
)
&
&
Services
.
prefs
.
getCharPref
(
"
extensions
.
activeThemeID
"
"
default
-
theme
mozilla
.
org
"
)
=
=
"
default
-
theme
mozilla
.
org
"
)
{
startupPhases
[
"
before
profile
selection
"
]
.
allowlist
.
modules
.
add
(
"
resource
:
/
/
gre
/
modules
/
XULStore
.
sys
.
mjs
"
)
;
}
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
startupPhases
[
"
before
handling
user
events
"
]
.
denylist
.
modules
.
add
(
"
resource
:
/
/
gre
/
modules
/
CrashSubmit
.
sys
.
mjs
"
)
;
}
if
(
AppConstants
.
platform
!
=
"
linux
"
)
{
startupPhases
[
"
before
handling
user
events
"
]
.
denylist
.
modules
.
add
(
"
resource
:
/
/
gre
/
modules
/
PlacesBackups
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
PlacesExpiration
.
sys
.
mjs
"
)
;
}
add_task
(
async
function
(
)
{
if
(
!
AppConstants
.
NIGHTLY_BUILD
&
&
!
AppConstants
.
MOZ_DEV_EDITION
&
&
!
AppConstants
.
DEBUG
)
{
ok
(
!
(
"
mozilla
.
org
/
test
/
startuprecorder
;
1
"
in
Cc
)
"
the
startup
recorder
component
shouldn
'
t
exist
in
this
non
-
nightly
/
non
-
devedition
/
"
+
"
non
-
debug
build
.
"
)
;
return
;
}
let
startupRecorder
=
Cc
[
"
mozilla
.
org
/
test
/
startuprecorder
;
1
"
]
.
getService
(
)
.
wrappedJSObject
;
await
startupRecorder
.
done
;
let
data
=
Cu
.
cloneInto
(
startupRecorder
.
data
.
code
{
}
)
;
function
getStack
(
scriptType
name
)
{
if
(
scriptType
=
=
"
modules
"
)
{
return
Cu
.
getModuleImportStack
(
name
)
;
}
return
"
"
;
}
SimpleTest
.
requestCompleteLog
(
)
;
let
previous
;
for
(
let
phase
in
data
)
{
for
(
let
scriptType
in
data
[
phase
]
)
{
for
(
let
f
of
data
[
phase
]
[
scriptType
]
)
{
if
(
!
previous
|
|
!
data
[
previous
]
[
scriptType
]
.
includes
(
f
)
)
{
info
(
{
scriptType
}
loaded
{
phase
}
:
{
f
}
)
;
if
(
kDumpAllStacks
)
{
info
(
getStack
(
scriptType
f
)
)
;
}
}
}
}
previous
=
phase
;
}
for
(
let
phase
in
startupPhases
)
{
let
loadedList
=
data
[
phase
]
;
let
allowlist
=
startupPhases
[
phase
]
.
allowlist
|
|
null
;
if
(
allowlist
)
{
for
(
let
scriptType
in
allowlist
)
{
loadedList
[
scriptType
]
=
loadedList
[
scriptType
]
.
filter
(
c
=
>
{
if
(
!
allowlist
[
scriptType
]
.
has
(
c
)
)
{
return
true
;
}
allowlist
[
scriptType
]
.
delete
(
c
)
;
return
false
;
}
)
;
is
(
loadedList
[
scriptType
]
.
length
0
should
have
no
unexpected
{
scriptType
}
loaded
{
phase
}
)
;
for
(
let
script
of
loadedList
[
scriptType
]
)
{
let
message
=
unexpected
{
scriptType
}
:
{
script
}
;
record
(
false
message
undefined
getStack
(
scriptType
script
)
)
;
}
is
(
allowlist
[
scriptType
]
.
size
0
all
{
scriptType
}
allowlist
entries
should
have
been
used
)
;
for
(
let
script
of
allowlist
[
scriptType
]
)
{
ok
(
false
unused
{
scriptType
}
allowlist
entry
:
{
script
}
)
;
}
}
}
let
denylist
=
startupPhases
[
phase
]
.
denylist
|
|
null
;
if
(
denylist
)
{
for
(
let
scriptType
in
denylist
)
{
for
(
let
file
of
denylist
[
scriptType
]
)
{
let
loaded
=
loadedList
[
scriptType
]
.
includes
(
file
)
;
let
message
=
{
file
}
is
not
allowed
{
phase
}
;
if
(
!
loaded
)
{
ok
(
true
message
)
;
}
else
{
record
(
false
message
undefined
getStack
(
scriptType
file
)
)
;
}
}
}
if
(
denylist
.
modules
)
{
let
results
=
await
PerfTestHelpers
.
throttledMapPromises
(
denylist
.
modules
async
uri
=
>
(
{
uri
exists
:
await
PerfTestHelpers
.
checkURIExists
(
uri
)
}
)
)
;
for
(
let
{
uri
exists
}
of
results
)
{
ok
(
exists
denylist
entry
{
uri
}
for
phase
"
{
phase
}
"
must
exist
)
;
}
}
if
(
denylist
.
services
)
{
for
(
let
contract
of
denylist
.
services
)
{
ok
(
contract
in
Cc
denylist
entry
{
contract
}
for
phase
"
{
phase
}
"
must
exist
)
;
}
}
}
}
}
)
;
