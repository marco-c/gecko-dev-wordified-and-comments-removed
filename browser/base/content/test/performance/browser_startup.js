"
use
strict
"
;
const
startupPhases
=
{
"
before
profile
selection
"
:
{
whitelist
:
{
components
:
new
Set
(
[
"
nsBrowserGlue
.
js
"
"
MainProcessSingleton
.
js
"
"
WebContentConverter
.
js
"
"
nsSessionStartup
.
js
"
"
PushComponents
.
js
"
]
)
modules
:
new
Set
(
[
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
AsyncPrefs
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
RemotePageManager
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
]
)
}
}
"
before
opening
first
browser
window
"
:
{
blacklist
:
{
components
:
new
Set
(
[
"
nsAsyncShutdown
.
js
"
]
)
modules
:
new
Set
(
[
"
resource
:
/
/
gre
/
modules
/
PlacesBackups
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
]
)
}
}
"
before
first
paint
"
:
{
blacklist
:
{
components
:
new
Set
(
[
"
PageIconProtocolHandler
.
js
"
"
PlacesCategoriesStarter
.
js
"
"
UnifiedComplete
.
js
"
"
nsPlacesExpiration
.
js
"
"
nsSearchService
.
js
"
]
)
modules
:
new
Set
(
[
"
resource
:
/
/
/
modules
/
AboutNewTab
.
jsm
"
"
resource
:
/
/
/
modules
/
DirectoryLinksProvider
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
BookmarkHTMLUtils
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
Bookmarks
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
ContextualIdentityService
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
NewTabUtils
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
PageThumbs
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
PlacesSyncUtils
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
Sqlite
.
jsm
"
]
)
services
:
new
Set
(
[
"
mozilla
.
org
/
browser
/
annotation
-
service
;
1
"
"
mozilla
.
org
/
browser
/
favicon
-
service
;
1
"
"
mozilla
.
org
/
browser
/
nav
-
bookmarks
-
service
;
1
"
"
mozilla
.
org
/
browser
/
search
-
service
;
1
"
]
)
}
}
"
before
handling
user
events
"
:
{
blacklist
:
{
modules
:
new
Set
(
[
"
resource
:
/
/
gre
/
modules
/
LoginManagerContextMenu
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
]
)
}
}
}
;
function
test
(
)
{
if
(
!
AppConstants
.
NIGHTLY_BUILD
&
&
!
AppConstants
.
DEBUG
)
{
ok
(
!
(
"
mozilla
.
org
/
test
/
startuprecorder
;
1
"
in
Cc
)
"
the
startup
recorder
component
shouldn
'
t
exist
in
this
non
-
nightly
non
-
debug
build
.
"
)
;
return
;
}
let
data
=
Cc
[
"
mozilla
.
org
/
test
/
startuprecorder
;
1
"
]
.
getService
(
)
.
wrappedJSObject
.
data
;
for
(
let
phase
in
data
)
{
data
[
phase
]
.
components
=
data
[
phase
]
.
components
.
map
(
f
=
>
f
.
replace
(
/
.
*
\
/
/
"
"
)
)
.
filter
(
c
=
>
c
!
=
"
startupRecorder
.
js
"
)
;
}
SimpleTest
.
requestCompleteLog
(
)
;
let
previous
;
for
(
let
phase
in
data
)
{
for
(
let
scriptType
in
data
[
phase
]
)
{
for
(
let
f
of
data
[
phase
]
[
scriptType
]
)
{
if
(
!
previous
|
|
!
data
[
previous
]
[
scriptType
]
.
includes
(
f
)
)
info
(
{
scriptType
}
loaded
{
phase
}
:
{
f
}
)
;
}
}
previous
=
phase
;
}
for
(
let
phase
in
startupPhases
)
{
let
loadedList
=
data
[
phase
]
;
let
whitelist
=
startupPhases
[
phase
]
.
whitelist
|
|
null
;
if
(
whitelist
)
{
for
(
let
scriptType
in
whitelist
)
{
loadedList
[
scriptType
]
=
loadedList
[
scriptType
]
.
filter
(
c
=
>
{
if
(
!
whitelist
[
scriptType
]
.
has
(
c
)
)
return
true
;
whitelist
[
scriptType
]
.
delete
(
c
)
;
return
false
;
}
)
;
is
(
loadedList
[
scriptType
]
.
length
0
should
have
no
unexpected
{
scriptType
}
loaded
{
phase
}
)
;
for
(
let
script
of
loadedList
[
scriptType
]
)
{
ok
(
false
unexpected
{
scriptType
}
:
{
script
}
)
;
}
is
(
whitelist
[
scriptType
]
.
size
0
all
{
scriptType
}
whitelist
entries
should
have
been
used
)
;
for
(
let
script
of
whitelist
[
scriptType
]
)
{
ok
(
false
unused
{
scriptType
}
whitelist
entry
:
{
script
}
)
;
}
}
}
let
blacklist
=
startupPhases
[
phase
]
.
blacklist
|
|
null
;
if
(
blacklist
)
{
for
(
let
scriptType
in
blacklist
)
{
for
(
let
file
of
blacklist
[
scriptType
]
)
{
ok
(
!
loadedList
[
scriptType
]
.
includes
(
file
)
{
file
}
is
not
allowed
{
phase
}
)
;
}
}
}
}
}
