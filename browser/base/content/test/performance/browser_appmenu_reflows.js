"
use
strict
"
;
const
EXPECTED_APPMENU_OPEN_REFLOWS
=
[
{
stack
:
[
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
show
/
<
/
<
chrome
:
/
/
browser
/
content
/
customizableui
/
panelUI
.
js
"
]
}
{
stack
:
[
"
get_alignmentPosition
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
adjustArrowPosition
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
onxblpopuppositioned
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
]
}
{
stack
:
[
"
get_alignmentPosition
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
handleEvent
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
]
}
{
stack
:
[
"
handleEvent
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
]
times
:
7
}
]
;
const
EXPECTED_APPMENU_SUBVIEW_REFLOWS
=
[
{
stack
:
[
"
descriptionHeightWorkaround
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
"
hideAllViewsExcept
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
]
times
:
1
}
{
stack
:
[
"
descriptionHeightWorkaround
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
"
_transitionViews
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
]
times
:
3
}
]
;
add_task
(
async
function
(
)
{
await
ensureNoPreloadedBrowser
(
)
;
await
withReflowObserver
(
async
function
(
)
{
let
popupPositioned
=
BrowserTestUtils
.
waitForEvent
(
PanelUI
.
panel
"
popuppositioned
"
)
;
await
PanelUI
.
show
(
)
;
await
popupPositioned
;
}
EXPECTED_APPMENU_OPEN_REFLOWS
)
;
await
withReflowObserver
(
async
function
(
)
{
async
function
openSubViewsRecursively
(
currentView
)
{
let
navButtons
=
Array
.
from
(
currentView
.
querySelectorAll
(
"
.
subviewbutton
-
nav
"
)
)
;
if
(
!
navButtons
)
{
return
;
}
for
(
let
button
of
navButtons
)
{
info
(
"
Click
"
+
button
.
id
)
;
button
.
click
(
)
;
await
BrowserTestUtils
.
waitForEvent
(
PanelUI
.
panel
"
ViewShown
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
PanelUI
.
multiView
.
instance
.
_viewContainer
.
hasAttribute
(
"
width
"
)
;
}
)
;
info
(
"
Shown
"
+
PanelUI
.
multiView
.
instance
.
_currentSubView
.
id
)
;
await
openSubViewsRecursively
(
PanelUI
.
multiView
.
instance
.
_currentSubView
)
;
PanelUI
.
multiView
.
goBack
(
)
;
await
BrowserTestUtils
.
waitForEvent
(
PanelUI
.
panel
"
ViewShown
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
PanelUI
.
multiView
.
instance
.
_viewContainer
.
hasAttribute
(
"
width
"
)
;
}
)
;
}
}
await
openSubViewsRecursively
(
PanelUI
.
mainView
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
PanelUI
.
panel
"
popuphidden
"
)
;
PanelUI
.
hide
(
)
;
await
hidden
;
}
EXPECTED_APPMENU_SUBVIEW_REFLOWS
)
;
}
)
;
