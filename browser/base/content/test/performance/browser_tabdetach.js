"
use
strict
"
;
const
EXPECTED_REFLOWS
=
[
{
stack
:
[
"
clientX
chrome
:
/
/
browser
/
content
/
tabbrowser
-
tabs
.
js
"
"
on_dragstart
chrome
:
/
/
browser
/
content
/
tabbrowser
-
tabs
.
js
"
"
handleEvent
chrome
:
/
/
browser
/
content
/
tabbrowser
-
tabs
.
js
"
"
synthesizeMouseAtPoint
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
"
synthesizeMouse
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
"
synthesizePlainDragAndDrop
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
]
maxCount
:
2
}
{
stack
:
[
"
on_dragstart
chrome
:
/
/
browser
/
content
/
tabbrowser
-
tabs
.
js
"
"
handleEvent
chrome
:
/
/
browser
/
content
/
tabbrowser
-
tabs
.
js
"
"
synthesizeMouseAtPoint
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
"
synthesizeMouse
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
"
synthesizePlainDragAndDrop
chrome
:
/
/
mochikit
/
content
/
tests
/
SimpleTest
/
EventUtils
.
js
"
]
}
]
;
add_task
(
async
function
test_detach_not_overflowed
(
)
{
await
ensureNoPreloadedBrowser
(
)
;
await
createTabs
(
1
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
gBrowser
.
tabContainer
.
hasAttribute
(
"
overflow
"
)
;
}
)
;
let
win
;
await
withPerfObserver
(
async
function
(
)
{
win
=
await
detachTab
(
gBrowser
.
tabs
[
1
]
)
;
}
{
expectedReflows
:
EXPECTED_REFLOWS
frames
:
{
filter
:
rects
=
>
[
]
}
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
win
=
null
;
}
)
;
add_task
(
async
function
test_detach_overflowed
(
)
{
const
TAB_COUNT_FOR_OVERFLOW
=
computeMaxTabCount
(
)
;
await
createTabs
(
TAB_COUNT_FOR_OVERFLOW
+
1
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
gBrowser
.
tabContainer
.
hasAttribute
(
"
overflow
"
)
;
}
)
;
let
win
;
await
withPerfObserver
(
async
function
(
)
{
win
=
await
detachTab
(
gBrowser
.
tabs
[
Math
.
floor
(
TAB_COUNT_FOR_OVERFLOW
/
2
)
]
)
;
}
{
expectedReflows
:
EXPECTED_REFLOWS
frames
:
{
filter
:
rects
=
>
[
]
}
}
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
win
=
null
;
await
removeAllButFirstTab
(
)
;
}
)
;
async
function
detachTab
(
tab
)
{
let
newWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
await
EventUtils
.
synthesizePlainDragAndDrop
(
{
srcElement
:
tab
destElement
:
null
stepX
:
0
stepY
:
100
}
)
;
return
newWindowPromise
;
}
