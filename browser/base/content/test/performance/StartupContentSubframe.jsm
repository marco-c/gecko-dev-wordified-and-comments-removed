var
EXPORTED_SYMBOLS
=
[
"
StartupContentSubframeParent
"
"
StartupContentSubframeChild
"
]
;
class
StartupContentSubframeParent
extends
JSWindowActorParent
{
receiveMessage
(
msg
)
{
Services
.
obs
.
notifyObservers
(
msg
.
data
"
startup
-
content
-
subframe
-
loaded
-
scripts
"
)
;
}
}
class
StartupContentSubframeChild
extends
JSWindowActorChild
{
async
handleEvent
(
event
)
{
await
new
Promise
(
resolve
=
>
Services
.
tm
.
dispatchToMainThread
(
resolve
)
)
;
const
Cm
=
Components
.
manager
;
Cm
.
QueryInterface
(
Ci
.
nsIServiceManager
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
let
collectStacks
=
AppConstants
.
NIGHTLY_BUILD
|
|
AppConstants
.
DEBUG
;
let
modules
=
{
}
;
for
(
let
module
of
Cu
.
loadedJSModules
)
{
modules
[
module
]
=
collectStacks
?
Cu
.
getModuleImportStack
(
module
)
:
"
"
;
}
for
(
let
module
of
Cu
.
loadedESModules
)
{
modules
[
module
]
=
collectStacks
?
Cu
.
getModuleImportStack
(
module
)
:
"
"
;
}
let
services
=
{
}
;
for
(
let
contractID
of
Object
.
keys
(
Cc
)
)
{
try
{
if
(
Cm
.
isServiceInstantiatedByContractID
(
contractID
Ci
.
nsISupports
)
)
{
services
[
contractID
]
=
"
"
;
}
}
catch
(
e
)
{
}
}
this
.
sendAsyncMessage
(
"
LoadedScripts
"
{
modules
services
}
)
;
}
}
