"
use
strict
"
;
const
EXPECTED_REFLOWS
=
[
]
;
add_task
(
async
function
(
)
{
gBrowser
.
tabContainer
.
setAttribute
(
"
noshadowfortests
"
"
true
"
)
;
await
ensureNoPreloadedBrowser
(
)
;
await
disableFxaBadge
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
toolbars
.
bookmarks
.
visibility
"
"
never
"
]
]
}
)
;
Assert
.
equal
(
EXPECTED_REFLOWS
.
length
0
"
We
shouldn
'
t
have
added
any
new
expected
reflows
.
"
)
;
let
origTab
=
gBrowser
.
selectedTab
;
let
firstSwitchDone
=
BrowserTestUtils
.
waitForEvent
(
window
"
TabSwitchDone
"
)
;
let
otherTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
firstSwitchDone
;
let
tabStripRect
=
gBrowser
.
tabContainer
.
arrowScrollbox
.
getBoundingClientRect
(
)
;
let
firstTabRect
=
origTab
.
getBoundingClientRect
(
)
;
let
tabPaddingStart
=
parseFloat
(
getComputedStyle
(
gBrowser
.
selectedTab
)
.
paddingInlineStart
)
;
let
minTabWidth
=
firstTabRect
.
width
-
2
*
tabPaddingStart
;
let
maxTabWidth
=
firstTabRect
.
width
;
let
inRange
=
(
val
min
max
)
=
>
min
<
=
val
&
&
val
<
=
max
;
await
withPerfObserver
(
async
function
(
)
{
let
switchDone
=
BrowserTestUtils
.
waitForEvent
(
window
"
TabSwitchDone
"
)
;
gBrowser
.
selectedTab
=
origTab
;
await
switchDone
;
}
{
expectedReflows
:
EXPECTED_REFLOWS
frames
:
{
filter
:
rects
=
>
rects
.
filter
(
r
=
>
!
(
(
r
.
y1
>
=
tabStripRect
.
top
&
&
r
.
y2
<
=
tabStripRect
.
bottom
&
&
r
.
x1
>
=
tabStripRect
.
left
&
&
r
.
x2
<
=
tabStripRect
.
right
&
&
inRange
(
r
.
w
minTabWidth
-
1
maxTabWidth
*
2
)
)
)
)
exceptions
:
[
{
name
:
"
bug
1446454
-
the
border
between
tabs
should
be
painted
at
"
+
"
the
same
time
as
the
tab
switch
"
condition
:
r
=
>
r
.
y1
>
=
tabStripRect
.
top
&
&
r
.
y2
<
=
tabStripRect
.
bottom
&
&
r
.
w
=
=
1
&
&
r
.
x1
=
=
firstTabRect
.
right
-
1
}
{
name
:
"
bug
1446449
-
spurious
tab
switch
spinner
"
condition
:
r
=
>
AppConstants
.
DEBUG
&
&
r
.
y1
>
=
document
.
getElementById
(
"
appcontent
"
)
.
getBoundingClientRect
(
)
.
top
}
]
}
}
)
;
BrowserTestUtils
.
removeTab
(
otherTab
)
;
}
)
;
