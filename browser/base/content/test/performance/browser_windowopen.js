"
use
strict
"
;
const
EXPECTED_REFLOWS
=
[
]
;
function
isLikelyFocusChange
(
rects
)
{
if
(
rects
.
length
>
5
&
&
rects
.
every
(
r
=
>
r
.
y2
<
100
)
)
{
return
true
;
}
if
(
Services
.
appinfo
.
OS
=
=
"
Darwin
"
&
&
rects
.
length
=
=
2
&
&
rects
.
every
(
r
=
>
r
.
y1
=
=
0
&
&
r
.
h
=
=
33
)
)
{
return
true
;
}
return
false
;
}
add_task
(
async
function
(
)
{
Services
.
obs
.
notifyObservers
(
null
"
startupcache
-
invalidate
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
chrome
-
flush
-
caches
"
)
;
let
win
=
window
.
openDialog
(
AppConstants
.
BROWSER_CHROME_URL
"
_blank
"
"
chrome
all
dialog
=
no
remote
suppressanimation
"
"
about
:
home
"
)
;
let
alreadyFocused
=
false
;
let
inRange
=
(
val
min
max
)
=
>
min
<
=
val
&
&
val
<
=
max
;
let
fxaAccountsButton
=
document
.
getElementById
(
"
fxa
-
toolbar
-
menu
-
button
"
)
.
getBoundingClientRect
(
)
;
let
expectations
=
{
expectedReflows
:
EXPECTED_REFLOWS
frames
:
{
filter
(
rects
frame
previousFrame
)
{
if
(
!
alreadyFocused
&
&
isLikelyFocusChange
(
rects
)
)
{
alreadyFocused
=
true
;
todo
(
false
"
bug
1445161
-
the
window
should
be
focused
at
first
paint
"
+
rects
.
toSource
(
)
)
;
return
[
]
;
}
return
rects
;
}
exceptions
:
[
{
name
:
"
bug
1421463
-
reload
toolbar
icon
shouldn
'
t
flicker
"
condition
:
r
=
>
inRange
(
r
.
h
13
14
)
&
&
inRange
(
r
.
w
14
16
)
&
&
inRange
(
r
.
y1
40
80
)
&
&
AppConstants
.
MOZ_DEV_EDITION
?
inRange
(
r
.
x1
100
120
)
:
inRange
(
r
.
x1
65
100
)
}
{
name
:
"
bug
1555842
-
the
urlbar
shouldn
'
t
flicker
"
condition
:
r
=
>
{
let
inputFieldRect
=
win
.
gURLBar
.
inputField
.
getBoundingClientRect
(
)
;
return
(
(
!
AppConstants
.
DEBUG
|
|
(
AppConstants
.
platform
=
=
"
linux
"
&
&
AppConstants
.
ASAN
)
)
&
&
r
.
x1
>
=
inputFieldRect
.
left
&
&
r
.
x2
<
=
inputFieldRect
.
right
&
&
r
.
y1
>
=
inputFieldRect
.
top
&
&
r
.
y2
<
=
inputFieldRect
.
bottom
)
;
}
}
{
name
:
"
FxA
accounts
button
is
intentionally
badged
10s
after
startup
"
condition
:
r
=
>
r
.
x1
>
=
fxaAccountsButton
.
left
&
&
r
.
x2
<
=
fxaAccountsButton
.
right
&
&
r
.
y1
>
=
fxaAccountsButton
.
top
&
&
r
.
y2
<
=
fxaAccountsButton
.
bottom
}
]
}
}
;
await
withPerfObserver
(
async
function
(
)
{
await
new
Promise
(
resolve
=
>
{
win
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
delete
win
.
Marionette
;
win
.
Marionette
=
{
running
:
false
}
;
resolve
(
)
;
}
{
once
:
true
}
)
;
}
)
;
await
TestUtils
.
topicObserved
(
"
browser
-
delayed
-
startup
-
finished
"
subject
=
>
subject
=
=
win
)
;
await
BrowserTestUtils
.
firstBrowserLoaded
(
win
false
)
;
await
BrowserTestUtils
.
browserStopped
(
win
.
gBrowser
.
selectedBrowser
"
about
:
home
"
)
;
await
new
Promise
(
resolve
=
>
{
(
function
waitForIdle
(
count
=
10
)
{
if
(
!
count
)
{
resolve
(
)
;
return
;
}
Services
.
tm
.
idleDispatchToMainThread
(
(
)
=
>
{
waitForIdle
(
count
-
1
)
;
}
)
;
}
)
(
)
;
}
)
;
}
expectations
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
