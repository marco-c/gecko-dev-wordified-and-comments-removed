"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
CustomizableUITestUtils
.
jsm
"
this
)
;
let
gCUITestUtils
=
new
CustomizableUITestUtils
(
window
)
;
const
EXPECTED_APPMENU_OPEN_REFLOWS
=
[
{
stack
:
[
"
openPopup
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
openPopup
/
this
.
_openPopupPromise
<
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
]
}
{
stack
:
[
"
get_alignmentPosition
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
adjustArrowPosition
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
onxblpopuppositioned
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
]
maxCount
:
3
}
{
stack
:
[
"
get_alignmentPosition
chrome
:
/
/
global
/
content
/
bindings
/
popup
.
xml
"
"
_calculateMaxHeight
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
"
handleEvent
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
]
}
{
stack
:
[
"
_calculateMaxHeight
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
"
handleEvent
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
]
maxCount
:
6
}
]
;
add_task
(
async
function
(
)
{
await
ensureNoPreloadedBrowser
(
)
;
let
textBoxRect
=
document
.
getAnonymousElementByAttribute
(
gURLBar
"
anonid
"
"
textbox
-
input
-
box
"
)
.
getBoundingClientRect
(
)
;
let
menuButtonRect
=
document
.
getElementById
(
"
PanelUI
-
menu
-
button
"
)
.
getBoundingClientRect
(
)
;
let
frameExpectations
=
{
filter
:
rects
=
>
rects
.
filter
(
r
=
>
!
(
r
.
y1
>
=
menuButtonRect
.
top
&
&
r
.
y2
<
=
menuButtonRect
.
bottom
&
&
r
.
x1
>
=
menuButtonRect
.
left
&
&
r
.
x2
<
=
menuButtonRect
.
right
)
)
exceptions
:
[
{
name
:
"
the
urlbar
placeolder
moves
up
and
down
by
a
few
pixels
"
condition
:
r
=
>
r
.
x1
>
=
textBoxRect
.
left
&
&
r
.
x2
<
=
textBoxRect
.
right
&
&
r
.
y1
>
=
textBoxRect
.
top
&
&
r
.
y2
<
=
textBoxRect
.
bottom
}
]
}
;
await
withPerfObserver
(
(
)
=
>
gCUITestUtils
.
openMainMenu
(
)
{
expectedReflows
:
EXPECTED_APPMENU_OPEN_REFLOWS
frames
:
frameExpectations
}
)
;
await
withPerfObserver
(
async
function
(
)
{
async
function
openSubViewsRecursively
(
currentView
)
{
let
navButtons
=
Array
.
from
(
currentView
.
querySelectorAll
(
"
.
subviewbutton
-
nav
"
)
)
;
if
(
!
navButtons
)
{
return
;
}
for
(
let
button
of
navButtons
)
{
info
(
"
Click
"
+
button
.
id
)
;
let
promiseViewShown
=
BrowserTestUtils
.
waitForEvent
(
PanelUI
.
panel
"
ViewShown
"
)
;
button
.
click
(
)
;
let
viewShownEvent
=
await
promiseViewShown
;
let
container
=
PanelUI
.
multiView
.
querySelector
(
"
.
panel
-
viewcontainer
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
container
.
hasAttribute
(
"
width
"
)
;
}
)
;
info
(
"
Shown
"
+
viewShownEvent
.
originalTarget
.
id
)
;
await
openSubViewsRecursively
(
viewShownEvent
.
originalTarget
)
;
promiseViewShown
=
BrowserTestUtils
.
waitForEvent
(
currentView
"
ViewShown
"
)
;
PanelUI
.
multiView
.
goBack
(
)
;
await
promiseViewShown
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
container
.
hasAttribute
(
"
width
"
)
;
}
)
;
}
}
await
openSubViewsRecursively
(
PanelUI
.
mainView
)
;
await
gCUITestUtils
.
hideMainMenu
(
)
;
}
{
expectedReflows
:
[
]
frames
:
frameExpectations
}
)
;
}
)
;
