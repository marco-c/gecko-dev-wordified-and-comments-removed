"
use
strict
"
;
add_task
(
async
function
(
)
{
const
isWebRenderEnabled
=
Services
.
prefs
.
getBoolPref
(
"
gfx
.
webrender
.
all
"
)
;
const
isFissionEnabled
=
SpecialPowers
.
useRemoteSubframes
;
if
(
isFissionEnabled
&
&
!
isWebRenderEnabled
)
{
ok
(
true
"
Detected
Fission
without
WebRender
.
Flicker
expected
deactivating
flicker
test
"
)
;
return
;
}
let
startupRecorder
=
Cc
[
"
mozilla
.
org
/
test
/
startuprecorder
;
1
"
]
.
getService
(
)
.
wrappedJSObject
;
await
startupRecorder
.
done
;
let
frames
=
Cu
.
cloneInto
(
startupRecorder
.
data
.
frames
{
}
)
;
ok
(
!
!
frames
.
length
"
Should
have
captured
some
frames
.
"
)
;
let
unexpectedRects
=
0
;
let
alreadyFocused
=
false
;
for
(
let
i
=
1
;
i
<
frames
.
length
;
+
+
i
)
{
let
frame
=
frames
[
i
]
previousFrame
=
frames
[
i
-
1
]
;
let
rects
=
compareFrames
(
frame
previousFrame
)
;
if
(
!
alreadyFocused
&
&
rects
.
length
>
5
&
&
rects
.
every
(
r
=
>
r
.
y2
<
100
)
)
{
alreadyFocused
=
true
;
todo
(
false
"
bug
1445161
-
the
window
should
be
focused
at
first
paint
"
+
rects
.
toSource
(
)
)
;
continue
;
}
rects
=
rects
.
filter
(
rect
=
>
{
let
width
=
frame
.
width
;
let
exceptions
=
[
]
;
let
rectText
=
{
rect
.
toSource
(
)
}
window
width
:
{
width
}
;
for
(
let
e
of
exceptions
)
{
if
(
e
.
condition
(
rect
)
)
{
todo
(
false
e
.
name
+
"
"
+
rectText
)
;
return
false
;
}
}
ok
(
false
"
unexpected
changed
rect
:
"
+
rectText
)
;
return
true
;
}
)
;
if
(
!
rects
.
length
)
{
info
(
"
ignoring
identical
frame
"
)
;
continue
;
}
if
(
!
unexpectedRects
)
{
dumpFrame
(
previousFrame
)
;
}
unexpectedRects
+
=
rects
.
length
;
dumpFrame
(
frame
)
;
}
is
(
unexpectedRects
0
"
should
have
0
unknown
flickering
areas
"
)
;
}
)
;
