"
use
strict
"
;
add_task
(
async
function
(
)
{
let
startupRecorder
=
Cc
[
"
mozilla
.
org
/
test
/
startuprecorder
;
1
"
]
.
getService
(
)
.
wrappedJSObject
;
await
startupRecorder
.
done
;
let
frames
=
Cu
.
cloneInto
(
startupRecorder
.
data
.
frames
{
}
)
;
let
unexpectedRects
=
0
;
let
alreadyFocused
=
false
;
for
(
let
i
=
1
;
i
<
frames
.
length
;
+
+
i
)
{
let
frame
=
frames
[
i
]
previousFrame
=
frames
[
i
-
1
]
;
let
rects
=
compareFrames
(
frame
previousFrame
)
;
if
(
!
alreadyFocused
&
&
rects
.
length
>
5
&
&
rects
.
every
(
r
=
>
r
.
y2
<
100
)
)
{
alreadyFocused
=
true
;
todo
(
false
"
the
window
should
be
focused
at
first
paint
"
+
rects
.
toSource
(
)
)
;
continue
;
}
rects
=
rects
.
filter
(
rect
=
>
{
let
inRange
=
(
val
min
max
)
=
>
min
<
=
val
&
&
val
<
=
max
;
let
width
=
frame
.
width
;
let
exceptions
=
[
{
name
:
"
bug
1403648
-
urlbar
down
arrow
shouldn
'
t
flicker
"
condition
:
r
=
>
inRange
(
r
.
h
3
5
)
&
&
inRange
(
r
.
w
7
9
)
&
&
inRange
(
r
.
y1
40
80
)
&
&
inRange
(
r
.
x1
width
*
.
75
width
*
.
9
)
}
]
;
if
(
AppConstants
.
platform
=
=
"
linux
"
)
{
exceptions
.
push
(
{
name
:
"
bug
1403648
-
urlbar
should
be
focused
at
first
paint
"
condition
:
r
=
>
inRange
(
r
.
y2
60
80
)
&
&
inRange
(
r
.
w
width
*
.
5
width
*
.
75
)
&
&
inRange
(
r
.
x1
width
*
.
15
width
*
.
25
)
}
)
;
}
let
rectText
=
{
rect
.
toSource
(
)
}
window
width
:
{
width
}
;
for
(
let
e
of
exceptions
)
{
if
(
e
.
condition
(
rect
)
)
{
todo
(
false
e
.
name
+
"
"
+
rectText
)
;
return
false
;
}
}
ok
(
false
"
unexpected
changed
rect
:
"
+
rectText
)
;
return
true
;
}
)
;
if
(
!
rects
.
length
)
{
info
(
"
ignoring
identical
frame
"
)
;
continue
;
}
if
(
!
unexpectedRects
)
{
dumpFrame
(
previousFrame
)
;
}
unexpectedRects
+
=
rects
.
length
;
dumpFrame
(
frame
)
;
}
is
(
unexpectedRects
0
"
should
have
0
unknown
flickering
areas
"
)
;
}
)
;
