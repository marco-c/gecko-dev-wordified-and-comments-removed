"
use
strict
"
;
const
actorModuleURI
=
getRootDirectory
(
gTestPath
)
+
"
StartupContentSubframe
.
sys
.
mjs
"
;
const
subframeURI
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
+
"
file_empty
.
html
"
;
const
kDumpAllStacks
=
false
;
const
known_scripts
=
{
modules
:
new
Set
(
[
actorModuleURI
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
Log
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
TelemetryControllerBase
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
TelemetryControllerContent
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
ExtensionProcessScript
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
]
)
processScripts
:
new
Set
(
[
"
chrome
:
/
/
global
/
content
/
process
-
content
.
js
"
"
resource
:
/
/
gre
/
modules
/
extensionProcessScriptLoader
.
js
"
]
)
}
;
const
intermittently_loaded_scripts
=
{
modules
:
new
Set
(
[
"
resource
:
/
/
gre
/
modules
/
nsAsyncShutdown
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
actors
/
CookieBannerChild
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
sys
.
mjs
"
"
chrome
:
/
/
remote
/
content
/
marionette
/
actors
/
MarionetteEventsChild
.
sys
.
mjs
"
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
sys
.
mjs
"
"
resource
:
/
/
testing
-
common
/
BrowserTestUtilsChild
.
sys
.
mjs
"
"
resource
:
/
/
testing
-
common
/
ContentEventListenerChild
.
sys
.
mjs
"
"
resource
:
/
/
specialpowers
/
SpecialPowersChild
.
sys
.
mjs
"
"
resource
:
/
/
specialpowers
/
AppTestDelegateChild
.
sys
.
mjs
"
"
resource
:
/
/
specialpowers
/
WrapPrivileged
.
sys
.
mjs
"
]
)
processScripts
:
new
Set
(
[
]
)
}
;
const
forbiddenScripts
=
{
services
:
new
Set
(
[
"
mozilla
.
org
/
base
/
telemetry
-
startup
;
1
"
"
mozilla
.
org
/
embedcomp
/
default
-
tooltiptextprovider
;
1
"
"
mozilla
.
org
/
push
/
Service
;
1
"
]
)
}
;
add_task
(
async
function
(
)
{
SimpleTest
.
requestCompleteLog
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
ipc
.
processCount
.
webIsolated
"
10
]
]
}
)
;
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
ChromeUtils
.
registerWindowActor
(
"
StartupContentSubframe
"
{
parent
:
{
esModuleURI
:
actorModuleURI
}
child
:
{
esModuleURI
:
actorModuleURI
events
:
{
load
:
{
mozSystemGroup
:
true
capture
:
true
}
}
}
matches
:
[
subframeURI
]
allFrames
:
true
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
subframeURI
]
uri
=
>
{
let
iframe
=
content
.
document
.
createElement
(
"
iframe
"
)
;
iframe
.
src
=
uri
;
content
.
document
.
body
.
appendChild
(
iframe
)
;
}
)
;
let
[
subject
]
=
await
TestUtils
.
topicObserved
(
"
startup
-
content
-
subframe
-
loaded
-
scripts
"
)
;
let
loadedInfo
=
subject
.
wrappedJSObject
;
ChromeUtils
.
unregisterWindowActor
(
"
StartupContentSubframe
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
loadedInfo
.
processScripts
=
{
}
;
for
(
let
[
uri
]
of
Services
.
ppmm
.
getDelayedProcessScripts
(
)
)
{
loadedInfo
.
processScripts
[
uri
]
=
"
"
;
}
await
checkLoadedScripts
(
{
loadedInfo
known
:
known_scripts
intermittent
:
intermittently_loaded_scripts
forbidden
:
forbiddenScripts
dumpAllStacks
:
kDumpAllStacks
}
)
;
}
)
;
