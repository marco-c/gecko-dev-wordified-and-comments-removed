"
use
strict
"
;
const
EXPECTED_REFLOWS
=
[
[
"
select
chrome
:
/
/
global
/
content
/
bindings
/
textbox
.
xml
"
"
focusAndSelectUrlBar
chrome
:
/
/
browser
/
content
/
browser
.
js
"
"
_delayedStartup
chrome
:
/
/
browser
/
content
/
browser
.
js
"
]
]
;
if
(
Services
.
appinfo
.
OS
=
=
"
Darwin
"
)
{
EXPECTED_REFLOWS
.
push
(
[
"
rect
chrome
:
/
/
browser
/
content
/
browser
-
tabsintitlebar
.
js
"
"
_update
chrome
:
/
/
browser
/
content
/
browser
-
tabsintitlebar
.
js
"
"
updateAppearance
chrome
:
/
/
browser
/
content
/
browser
-
tabsintitlebar
.
js
"
"
handleEvent
chrome
:
/
/
browser
/
content
/
tabbrowser
.
xml
"
]
)
;
}
if
(
Services
.
appinfo
.
OS
=
=
"
WINNT
"
|
|
Services
.
appinfo
.
OS
=
=
"
Darwin
"
)
{
EXPECTED_REFLOWS
.
push
(
[
"
handleEvent
chrome
:
/
/
browser
/
content
/
tabbrowser
.
xml
"
"
inferFromText
chrome
:
/
/
browser
/
content
/
browser
.
js
"
"
handleEvent
chrome
:
/
/
browser
/
content
/
browser
.
js
"
]
)
;
}
add_task
(
async
function
(
)
{
let
win
=
OpenBrowserWindow
(
)
;
await
withReflowObserver
(
async
function
(
)
{
let
resizeEvent
=
BrowserTestUtils
.
waitForEvent
(
win
"
resize
"
)
;
let
delayedStartup
=
TestUtils
.
topicObserved
(
"
browser
-
delayed
-
startup
-
finished
"
subject
=
>
subject
=
=
win
)
;
await
resizeEvent
;
await
delayedStartup
;
}
EXPECTED_REFLOWS
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
