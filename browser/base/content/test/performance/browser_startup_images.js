"
use
strict
"
;
const
knownUnshownImages
=
[
{
file
:
"
chrome
:
/
/
global
/
skin
/
icons
/
arrow
-
left
.
svg
"
platforms
:
[
"
linux
"
"
win
"
"
macosx
"
]
}
{
file
:
"
chrome
:
/
/
browser
/
skin
/
toolbar
-
drag
-
indicator
.
svg
"
platforms
:
[
"
linux
"
"
win
"
"
macosx
"
]
}
{
file
:
"
resource
:
/
/
gre
-
resources
/
loading
-
image
.
png
"
platforms
:
[
"
win
"
"
macosx
"
]
intermittentNotLoaded
:
[
"
win
"
"
macosx
"
]
}
{
file
:
"
resource
:
/
/
gre
-
resources
/
broken
-
image
.
png
"
platforms
:
[
"
win
"
"
macosx
"
]
intermittentNotLoaded
:
[
"
win
"
"
macosx
"
]
}
{
file
:
"
chrome
:
/
/
browser
/
skin
/
chevron
.
svg
"
platforms
:
[
"
win
"
"
linux
"
"
macosx
"
]
intermittentShown
:
[
"
win
"
"
linux
"
]
}
{
file
:
"
chrome
:
/
/
global
/
skin
/
icons
/
resizer
.
svg
"
platforms
:
[
"
win
"
]
}
{
file
:
"
chrome
:
/
/
browser
/
skin
/
window
-
controls
/
maximize
.
svg
"
platforms
:
[
"
win
"
]
intermittentShown
:
[
"
win
"
]
intermittentNotLoaded
:
[
"
win
"
]
}
]
;
add_task
(
async
function
(
)
{
if
(
!
AppConstants
.
DEBUG
)
{
ok
(
false
"
You
need
to
run
this
test
on
a
debug
build
.
"
)
;
}
let
startupRecorder
=
Cc
[
"
mozilla
.
org
/
test
/
startuprecorder
;
1
"
]
.
getService
(
)
.
wrappedJSObject
;
await
startupRecorder
.
done
;
let
data
=
Cu
.
cloneInto
(
startupRecorder
.
data
.
images
{
}
)
;
let
knownImagesForPlatform
=
knownUnshownImages
.
filter
(
el
=
>
{
return
el
.
platforms
.
includes
(
AppConstants
.
platform
)
;
}
)
;
let
loadedImages
=
data
[
"
image
-
loading
"
]
;
let
shownImages
=
data
[
"
image
-
drawing
"
]
;
for
(
let
loaded
of
loadedImages
.
values
(
)
)
{
let
knownImage
=
knownImagesForPlatform
.
find
(
el
=
>
{
if
(
window
.
devicePixelRatio
>
=
2
&
&
el
.
hidpi
&
&
el
.
hidpi
=
=
loaded
)
{
return
true
;
}
return
el
.
file
=
=
loaded
;
}
)
;
if
(
knownImage
)
{
if
(
!
knownImage
.
intermittentShown
|
|
!
knownImage
.
intermittentShown
.
includes
(
AppConstants
.
platform
)
)
{
todo
(
shownImages
.
has
(
loaded
)
Image
{
loaded
}
should
not
have
been
shown
.
)
;
}
continue
;
}
ok
(
shownImages
.
has
(
loaded
)
Loaded
image
{
loaded
}
should
have
been
shown
.
)
;
}
for
(
let
item
of
knownImagesForPlatform
)
{
if
(
!
item
.
intermittentNotLoaded
|
|
!
item
.
intermittentNotLoaded
.
includes
(
AppConstants
.
platform
)
)
{
if
(
window
.
devicePixelRatio
>
=
2
&
&
item
.
hidpi
)
{
if
(
item
.
hidpi
!
=
"
<
not
loaded
>
"
)
{
ok
(
loadedImages
.
has
(
item
.
hidpi
)
Image
{
item
.
hidpi
}
should
have
been
loaded
.
)
;
}
}
else
{
ok
(
loadedImages
.
has
(
item
.
file
)
Image
{
item
.
file
}
should
have
been
loaded
.
)
;
}
}
}
}
)
;
