"
use
strict
"
;
const
kDumpAllStacks
=
false
;
const
known_scripts
=
{
modules
:
new
Set
(
[
"
chrome
:
/
/
mochikit
/
content
/
ShutdownLeaksCollector
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
"
resource
:
/
/
/
actors
/
AboutReaderChild
.
jsm
"
"
resource
:
/
/
/
actors
/
BrowserTabChild
.
jsm
"
"
resource
:
/
/
/
actors
/
LinkHandlerChild
.
jsm
"
"
resource
:
/
/
/
actors
/
PageStyleChild
.
jsm
"
"
resource
:
/
/
/
actors
/
SearchSERPTelemetryChild
.
jsm
"
"
resource
:
/
/
gre
/
actors
/
ContentMetaChild
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
Readerable
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
TelemetryControllerBase
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
TelemetryControllerContent
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
ExtensionProcessScript
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
]
)
frameScripts
:
new
Set
(
[
"
chrome
:
/
/
mochikit
/
content
/
shutdown
-
leaks
-
collector
.
js
"
]
)
processScripts
:
new
Set
(
[
"
chrome
:
/
/
global
/
content
/
process
-
content
.
js
"
"
resource
:
/
/
gre
/
modules
/
extensionProcessScriptLoader
.
js
"
]
)
}
;
if
(
!
gFissionBrowser
)
{
known_scripts
.
modules
.
add
(
"
resource
:
/
/
/
modules
/
sessionstore
/
ContentSessionStore
.
jsm
"
)
;
}
const
intermittently_loaded_scripts
=
{
modules
:
new
Set
(
[
"
resource
:
/
/
gre
/
modules
/
nsAsyncShutdown
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
sessionstore
/
Utils
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
sessionstore
/
SessionHistory
.
jsm
"
"
resource
:
/
/
webcompat
/
AboutCompat
.
jsm
"
"
chrome
:
/
/
remote
/
content
/
marionette
/
actors
/
MarionetteEventsChild
.
jsm
"
"
chrome
:
/
/
remote
/
content
/
shared
/
Log
.
jsm
"
"
resource
:
/
/
testing
-
common
/
BrowserTestUtilsChild
.
jsm
"
"
resource
:
/
/
testing
-
common
/
ContentEventListenerChild
.
jsm
"
"
resource
:
/
/
specialpowers
/
AppTestDelegateChild
.
jsm
"
"
resource
:
/
/
specialpowers
/
SpecialPowersChild
.
jsm
"
"
resource
:
/
/
specialpowers
/
WrapPrivileged
.
jsm
"
]
)
frameScripts
:
new
Set
(
[
]
)
processScripts
:
new
Set
(
[
"
resource
:
/
/
webcompat
/
aboutPageProcessScript
.
js
"
]
)
}
;
const
forbiddenScripts
=
{
services
:
new
Set
(
[
"
mozilla
.
org
/
base
/
telemetry
-
startup
;
1
"
"
mozilla
.
org
/
embedcomp
/
default
-
tooltiptextprovider
;
1
"
"
mozilla
.
org
/
push
/
Service
;
1
"
]
)
}
;
add_task
(
async
function
(
)
{
SimpleTest
.
requestCompleteLog
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
+
"
file_empty
.
html
"
forceNewProcess
:
true
}
)
;
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
let
promise
=
BrowserTestUtils
.
waitForMessage
(
mm
"
Test
:
LoadedScripts
"
)
;
mm
.
loadFrameScript
(
"
data
:
text
/
javascript
(
"
+
function
(
)
{
const
Cm
=
Components
.
manager
;
Cm
.
QueryInterface
(
Ci
.
nsIServiceManager
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
let
collectStacks
=
AppConstants
.
NIGHTLY_BUILD
|
|
AppConstants
.
DEBUG
;
let
modules
=
{
}
;
for
(
let
module
of
Cu
.
loadedJSModules
)
{
modules
[
module
]
=
collectStacks
?
Cu
.
getModuleImportStack
(
module
)
:
"
"
;
}
for
(
let
module
of
Cu
.
loadedESModules
)
{
modules
[
module
]
=
collectStacks
?
Cu
.
getModuleImportStack
(
module
)
:
"
"
;
}
let
services
=
{
}
;
for
(
let
contractID
of
Object
.
keys
(
Cc
)
)
{
try
{
if
(
Cm
.
isServiceInstantiatedByContractID
(
contractID
Ci
.
nsISupports
)
)
{
services
[
contractID
]
=
"
"
;
}
}
catch
(
e
)
{
}
}
sendAsyncMessage
(
"
Test
:
LoadedScripts
"
{
modules
services
}
)
;
}
+
"
)
(
)
"
false
)
;
let
loadedInfo
=
await
promise
;
loadedInfo
.
frameScripts
=
{
}
;
for
(
let
[
uri
]
of
Services
.
mm
.
getDelayedFrameScripts
(
)
)
{
loadedInfo
.
frameScripts
[
uri
]
=
"
"
;
}
loadedInfo
.
processScripts
=
{
}
;
for
(
let
[
uri
]
of
Services
.
ppmm
.
getDelayedProcessScripts
(
)
)
{
loadedInfo
.
processScripts
[
uri
]
=
"
"
;
}
await
checkLoadedScripts
(
{
loadedInfo
known
:
known_scripts
intermittent
:
intermittently_loaded_scripts
forbidden
:
forbiddenScripts
dumpAllStacks
:
kDumpAllStacks
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
