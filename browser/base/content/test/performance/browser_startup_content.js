"
use
strict
"
;
const
blacklist
=
{
components
:
new
Set
(
[
"
PushComponents
.
js
"
"
TelemetryStartup
.
js
"
]
)
modules
:
new
Set
(
[
"
resource
:
/
/
/
modules
/
ContentWebRTC
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
InlineSpellChecker
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
InlineSpellCheckerContent
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
"
resource
:
/
/
gre
/
modules
/
debug
.
js
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
]
)
services
:
new
Set
(
[
"
mozilla
.
org
/
base
/
telemetry
-
startup
;
1
"
"
mozilla
.
org
/
push
/
Service
;
1
"
]
)
}
;
add_task
(
async
function
(
)
{
SimpleTest
.
requestCompleteLog
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
forceNewProcess
:
true
}
)
;
let
mm
=
gBrowser
.
selectedBrowser
.
messageManager
;
let
promise
=
BrowserTestUtils
.
waitForMessage
(
mm
"
Test
:
LoadedScripts
"
)
;
mm
.
loadFrameScript
(
"
data
:
text
/
javascript
(
"
+
function
(
)
{
const
{
classes
:
Cc
interfaces
:
Ci
manager
:
Cm
}
=
Components
;
Cm
.
QueryInterface
(
Ci
.
nsIServiceManager
)
;
let
loader
=
Cc
[
"
mozilla
.
org
/
moz
/
jsloader
;
1
"
]
.
getService
(
Ci
.
xpcIJSModuleLoader
)
;
sendAsyncMessage
(
"
Test
:
LoadedScripts
"
{
components
:
loader
.
loadedComponents
(
)
.
map
(
f
=
>
f
.
replace
(
/
.
*
\
/
/
"
"
)
)
modules
:
loader
.
loadedModules
(
)
services
:
Object
.
keys
(
Cc
)
.
filter
(
c
=
>
{
try
{
Cm
.
isServiceInstantiatedByContractID
(
c
Ci
.
nsISupports
)
;
return
true
;
}
catch
(
e
)
{
return
false
;
}
}
)
}
)
;
}
+
"
)
(
)
"
false
)
;
let
loadedList
=
await
promise
;
for
(
let
scriptType
in
blacklist
)
{
info
(
scriptType
)
;
for
(
let
file
of
blacklist
[
scriptType
]
)
{
ok
(
!
loadedList
[
scriptType
]
.
includes
(
file
)
{
file
}
is
not
allowed
)
;
}
for
(
let
file
of
loadedList
[
scriptType
]
)
{
info
(
file
)
;
}
}
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
