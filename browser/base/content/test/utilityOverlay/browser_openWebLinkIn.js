"
use
strict
"
;
function
concealMainWindow
(
)
{
info
(
"
Concealing
main
window
.
"
)
;
let
oldWinType
=
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
;
if
(
oldWinType
!
=
"
navigator
:
testrunner
"
)
{
document
.
documentElement
.
setAttribute
(
"
windowtype
"
"
navigator
:
testrunner
"
)
;
BrowserWindowTracker
.
untrackForTestsOnly
(
window
)
;
registerCleanupFunction
(
(
)
=
>
{
info
(
"
Unconcealing
the
main
window
in
the
cleanup
phase
.
"
)
;
BrowserWindowTracker
.
track
(
window
)
;
document
.
documentElement
.
setAttribute
(
"
windowtype
"
oldWinType
)
;
}
)
;
}
}
const
EXAMPLE_URL
=
"
https
:
/
/
example
.
org
/
"
;
add_task
(
async
function
test_open_tab
(
)
{
const
waitForTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
EXAMPLE_URL
)
;
openWebLinkIn
(
EXAMPLE_URL
"
tab
"
)
;
const
tab
=
await
waitForTabPromise
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_open_window
(
)
{
const
waitForWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
openWebLinkIn
(
EXAMPLE_URL
"
window
"
)
;
const
win
=
await
waitForWindowPromise
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
test_open_private_window
(
)
{
const
waitForWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
openWebLinkIn
(
EXAMPLE_URL
"
window
"
{
private
:
true
}
)
;
const
win
=
await
waitForWindowPromise
;
ok
(
PrivateBrowsingUtils
.
isBrowserPrivate
(
win
)
"
The
new
window
is
a
private
window
.
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
test_open_private_tab_from_private_window
(
)
{
const
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
const
waitForTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
privateWindow
.
gBrowser
EXAMPLE_URL
)
;
privateWindow
.
openWebLinkIn
(
EXAMPLE_URL
"
tab
"
)
;
const
tab
=
await
waitForTabPromise
;
ok
(
PrivateBrowsingUtils
.
isBrowserPrivate
(
tab
)
"
The
new
tab
was
opened
in
a
private
browser
.
"
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
}
)
;
add_task
(
async
function
test_open_non_private_tab_from_private_window
(
)
{
const
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
const
waitForTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
EXAMPLE_URL
)
;
privateWindow
.
openWebLinkIn
(
EXAMPLE_URL
"
tab
"
{
forceNonPrivate
:
true
}
)
;
const
nonPrivateTab
=
await
waitForTabPromise
;
ok
(
!
PrivateBrowsingUtils
.
isBrowserPrivate
(
nonPrivateTab
)
"
The
new
window
isn
'
t
a
private
window
.
"
)
;
BrowserTestUtils
.
removeTab
(
nonPrivateTab
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
}
)
;
add_task
(
async
function
test_open_non_private_tab_from_only_private_window
(
)
{
const
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
concealMainWindow
(
)
;
const
waitForWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
{
url
:
EXAMPLE_URL
}
)
;
privateWindow
.
openWebLinkIn
(
EXAMPLE_URL
"
tab
"
{
forceNonPrivate
:
true
}
)
;
const
nonPrivateWindow
=
await
waitForWindowPromise
;
ok
(
!
PrivateBrowsingUtils
.
isBrowserPrivate
(
nonPrivateWindow
)
"
The
new
window
isn
'
t
a
private
window
.
"
)
;
await
BrowserTestUtils
.
closeWindow
(
nonPrivateWindow
)
;
await
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
}
)
;
