"
use
strict
"
;
const
{
PromptTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromptTestUtils
.
sys
.
mjs
"
)
;
function
getTestDirectory
(
)
{
let
tmpDir
=
Services
.
dirsvc
.
get
(
"
TmpD
"
Ci
.
nsIFile
)
;
tmpDir
.
append
(
"
testdir
"
)
;
if
(
!
tmpDir
.
exists
(
)
)
{
tmpDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
registerCleanupFunction
(
(
)
=
>
{
tmpDir
.
remove
(
true
)
;
}
)
;
}
let
file1
=
tmpDir
.
clone
(
)
;
file1
.
append
(
"
foo
.
txt
"
)
;
if
(
!
file1
.
exists
(
)
)
{
file1
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
0o600
)
;
}
let
file2
=
tmpDir
.
clone
(
)
;
file2
.
append
(
"
bar
.
txt
"
)
;
if
(
!
file2
.
exists
(
)
)
{
file2
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
0o600
)
;
}
return
tmpDir
.
path
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
filesystem
.
pathcheck
.
disabled
"
true
]
[
"
dom
.
webkitBlink
.
dirPicker
.
enabled
"
true
]
]
}
)
;
}
)
;
async
function
testUploadPrompt
(
confirmUpload
)
{
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
"
async
browser
=
>
{
await
ContentTask
.
spawn
(
browser
null
(
)
=
>
{
let
input
=
content
.
document
.
createElement
(
"
input
"
)
;
input
.
id
=
"
filepicker
"
;
input
.
setAttribute
(
"
type
"
"
file
"
)
;
input
.
setAttribute
(
"
webkitdirectory
"
"
"
)
;
content
.
document
.
body
.
appendChild
(
input
)
;
}
)
;
let
changePromise
;
if
(
confirmUpload
)
{
changePromise
=
ContentTask
.
spawn
(
browser
null
async
(
)
=
>
{
let
input
=
content
.
document
.
getElementById
(
"
filepicker
"
)
;
return
ContentTaskUtils
.
waitForEvent
(
input
"
change
"
)
.
then
(
e
=
>
e
.
target
.
files
.
length
)
;
}
)
;
}
let
promptPromise
=
PromptTestUtils
.
waitForPrompt
(
browser
{
modalType
:
Services
.
prompt
.
MODAL_TYPE_TAB
promptType
:
"
confirmEx
"
}
)
;
let
path
=
getTestDirectory
(
)
;
await
ContentTask
.
spawn
(
browser
{
path
}
args
=
>
{
let
MockFilePicker
=
content
.
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
content
.
browsingContext
"
A
Mock
File
Picker
"
content
.
SpecialPowers
.
Ci
.
nsIFilePicker
.
modeGetFolder
)
;
MockFilePicker
.
useDirectory
(
args
.
path
)
;
let
input
=
content
.
document
.
getElementById
(
"
filepicker
"
)
;
input
.
click
(
)
;
}
)
;
let
prompt
=
await
promptPromise
;
ok
(
prompt
"
Shown
upload
confirmation
prompt
"
)
;
is
(
prompt
.
ui
.
button0
.
label
"
Upload
"
"
Accept
button
label
"
)
;
ok
(
prompt
.
ui
.
button1
.
hasAttribute
(
"
default
"
)
"
Cancel
is
default
button
"
)
;
await
PromptTestUtils
.
handlePrompt
(
prompt
{
buttonNumClick
:
confirmUpload
?
0
:
1
}
)
;
if
(
changePromise
)
{
let
fileCount
=
await
changePromise
;
is
(
fileCount
2
"
Should
have
selected
2
files
"
)
;
}
else
{
let
fileCount
=
await
ContentTask
.
spawn
(
browser
null
(
)
=
>
{
return
content
.
document
.
getElementById
(
"
filepicker
"
)
.
files
.
length
;
}
)
;
is
(
fileCount
0
"
Should
not
have
selected
any
files
"
)
;
}
await
ContentTask
.
spawn
(
browser
null
(
)
=
>
{
content
.
SpecialPowers
.
MockFilePicker
.
cleanup
(
)
;
}
)
;
}
)
;
}
add_task
(
async
function
test_confirm
(
)
{
await
testUploadPrompt
(
true
)
;
}
)
;
add_task
(
async
function
test_cancel
(
)
{
await
testUploadPrompt
(
false
)
;
}
)
;
