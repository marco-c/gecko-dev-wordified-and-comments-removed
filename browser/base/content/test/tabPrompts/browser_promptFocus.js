"
use
strict
"
;
const
{
PromptTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromptTestUtils
.
sys
.
mjs
"
)
;
const
isMacOS
=
Services
.
appinfo
.
OS
=
=
=
"
Darwin
"
;
add_task
(
async
function
test_tabdialogbox_tab_switch_focus
(
)
{
let
tabPromises
=
[
]
;
for
(
let
i
=
0
;
i
<
3
;
i
+
=
1
)
{
tabPromises
.
push
(
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
com
"
true
)
)
;
}
let
tabs
=
await
Promise
.
all
(
tabPromises
)
;
let
[
tabA
tabB
tabC
]
=
tabs
;
let
openPromise
=
PromptTestUtils
.
waitForPrompt
(
tabA
.
linkedBrowser
{
modalType
:
Services
.
prompt
.
MODAL_TYPE_TAB
promptType
:
"
confirm
"
}
)
;
Services
.
prompt
.
asyncConfirm
(
tabA
.
linkedBrowser
.
browsingContext
Services
.
prompt
.
MODAL_TYPE_TAB
null
"
prompt
A
"
)
;
let
promptA
=
await
openPromise
;
openPromise
=
PromptTestUtils
.
waitForPrompt
(
tabB
.
linkedBrowser
{
modalType
:
Services
.
prompt
.
MODAL_TYPE_TAB
promptType
:
"
promptPassword
"
}
)
;
Services
.
prompt
.
asyncPromptPassword
(
tabB
.
linkedBrowser
.
browsingContext
Services
.
prompt
.
MODAL_TYPE_TAB
null
"
prompt
B
"
"
"
null
false
)
;
let
promptB
=
await
openPromise
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabC
)
;
is
(
Services
.
focus
.
focusedElement
tabC
.
linkedBrowser
"
Tab
without
prompt
should
have
focus
on
browser
.
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabA
)
;
if
(
isMacOS
)
{
is
(
Services
.
focus
.
focusedElement
promptA
.
ui
.
infoBody
"
Tab
with
prompt
should
have
focus
on
body
.
"
)
;
}
else
{
is
(
Services
.
focus
.
focusedElement
promptA
.
ui
.
button0
"
Tab
with
prompt
should
have
focus
on
default
button
.
"
)
;
}
await
PromptTestUtils
.
handlePrompt
(
promptA
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tabB
)
;
is
(
Services
.
focus
.
focusedElement
promptB
.
ui
.
password1Textbox
"
Tab
with
password
prompt
should
have
focus
on
password
field
.
"
)
;
await
PromptTestUtils
.
handlePrompt
(
promptB
)
;
tabs
.
forEach
(
tab
=
>
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
}
)
;
function
testAlertPromptFocus
(
prompt
index
)
{
if
(
isMacOS
)
{
is
(
Services
.
focus
.
focusedElement
prompt
.
ui
.
infoBody
Prompt
#
{
index
}
should
have
focus
on
body
.
)
;
}
else
{
is
(
Services
.
focus
.
focusedElement
prompt
.
ui
.
button0
Prompt
#
{
index
}
should
have
focus
on
default
button
.
)
;
}
}
add_task
(
async
function
test_tabdialogbox_prompt_queue_focus
(
)
{
await
BrowserTestUtils
.
withNewTab
(
gBrowser
async
browser
=
>
{
const
PROMPT_COUNT
=
10
;
let
firstPromptPromise
=
PromptTestUtils
.
waitForPrompt
(
browser
{
modalType
:
Services
.
prompt
.
MODAL_TYPE_TAB
promptType
:
"
alert
"
}
)
;
for
(
let
i
=
0
;
i
<
PROMPT_COUNT
;
i
+
=
1
)
{
Services
.
prompt
.
asyncAlert
(
browser
.
browsingContext
Services
.
prompt
.
MODAL_TYPE_TAB
null
"
prompt
"
+
i
)
;
}
let
nextPromptPromise
=
firstPromptPromise
;
for
(
let
i
=
0
;
i
<
PROMPT_COUNT
;
i
+
=
1
)
{
let
p
=
await
nextPromptPromise
;
testAlertPromptFocus
(
p
i
)
;
if
(
i
<
PROMPT_COUNT
-
1
)
{
nextPromptPromise
=
PromptTestUtils
.
waitForPrompt
(
browser
{
modalType
:
Services
.
prompt
.
MODAL_TYPE_TAB
promptType
:
"
alert
"
}
)
;
}
await
PromptTestUtils
.
handlePrompt
(
p
)
;
}
is
(
Services
.
focus
.
focusedElement
browser
"
Tab
without
prompts
should
have
focus
on
browser
.
"
)
;
}
)
;
}
)
;
