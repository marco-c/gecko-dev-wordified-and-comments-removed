"
use
strict
"
;
const
{
PermissionTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PermissionTestUtils
.
sys
.
mjs
"
)
;
const
ROOT
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
example
.
com
/
"
)
;
let
pageWithAlert
=
ROOT
+
"
openPromptOffTimeout
.
html
"
;
registerCleanupFunction
(
function
(
)
{
Services
.
perms
.
removeAll
(
)
;
}
)
;
add_task
(
async
function
test_modal_ui
(
)
{
PermissionTestUtils
.
remove
(
pageWithAlert
"
focus
-
tab
-
by
-
prompt
"
)
;
let
firstTab
=
gBrowser
.
selectedTab
;
let
openedTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
pageWithAlert
true
)
;
let
openedTabGotAttentionPromise
=
BrowserTestUtils
.
waitForAttribute
(
"
attention
"
openedTab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
firstTab
)
;
await
openedTabGotAttentionPromise
;
is
(
openedTab
.
hasAttribute
(
"
attention
"
)
true
"
Tab
with
alert
should
have
'
attention
'
attribute
.
"
)
;
ok
(
!
openedTab
.
selected
"
Tab
with
alert
should
not
be
selected
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
openedTab
)
;
let
promptElements
=
openedTab
.
linkedBrowser
.
parentNode
.
querySelectorAll
(
"
.
content
-
prompt
-
dialog
"
)
;
let
dialogBox
=
gBrowser
.
getTabDialogBox
(
openedTab
.
linkedBrowser
)
;
let
contentPromptManager
=
dialogBox
.
getContentDialogManager
(
)
;
is
(
promptElements
.
length
1
"
There
should
be
1
prompt
"
)
;
is
(
contentPromptManager
.
_dialogs
.
length
1
"
Content
prompt
manager
should
have
1
dialog
box
.
"
)
;
let
dialog
=
contentPromptManager
.
_dialogs
[
0
]
;
await
dialog
.
_dialogReady
;
let
dialogDoc
=
dialog
.
_frame
.
contentWindow
.
document
;
let
checkbox
=
dialogDoc
.
querySelector
(
"
checkbox
[
label
*
=
'
example
.
com
'
]
"
)
;
let
button
=
dialogDoc
.
querySelector
(
"
#
commonDialog
"
)
.
getButton
(
"
accept
"
)
;
ok
(
checkbox
"
The
checkbox
should
be
there
"
)
;
ok
(
!
checkbox
.
checked
"
Checkbox
shouldn
'
t
be
checked
"
)
;
checkbox
.
checked
=
true
;
button
.
click
(
)
;
await
new
Promise
(
function
(
resolve
)
{
Services
.
tm
.
dispatchToMainThread
(
resolve
)
;
}
)
;
ok
(
!
contentPromptManager
.
_dialogs
.
length
"
Dialog
should
be
closed
"
)
;
is
(
Services
.
perms
.
ALLOW_ACTION
PermissionTestUtils
.
testPermission
(
pageWithAlert
"
focus
-
tab
-
by
-
prompt
"
)
"
Tab
switching
should
now
be
allowed
"
)
;
let
shown
=
BrowserTestUtils
.
waitForEvent
(
window
"
popupshown
"
true
event
=
>
event
.
target
=
=
gPermissionPanel
.
_permissionPopup
)
;
gPermissionPanel
.
_identityPermissionBox
.
click
(
)
;
await
shown
;
let
labelText
=
SitePermissions
.
getPermissionLabel
(
"
focus
-
tab
-
by
-
prompt
"
)
;
let
permissionsList
=
document
.
getElementById
(
"
permission
-
popup
-
permission
-
list
"
)
;
let
label
=
permissionsList
.
querySelector
(
"
.
permission
-
popup
-
permission
-
label
"
)
;
is
(
label
.
textContent
labelText
)
;
gPermissionPanel
.
hidePopup
(
)
;
ok
(
gPermissionPanel
.
_identityPermissionBox
.
hasAttribute
(
"
hasPermissions
"
)
"
identity
-
permission
-
box
signals
granted
permissions
"
)
;
let
openedTabSelectedPromise
=
BrowserTestUtils
.
waitForAttribute
(
"
selected
"
openedTab
"
true
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
firstTab
)
;
await
openedTabSelectedPromise
;
Assert
.
strictEqual
(
contentPromptManager
.
_dialogs
.
length
1
"
Dialog
opened
.
"
)
;
dialog
=
contentPromptManager
.
_dialogs
[
0
]
;
await
dialog
.
_dialogReady
;
ok
(
openedTab
.
selected
"
Ta
-
dah
the
other
tab
should
now
be
selected
again
!
"
)
;
await
BrowserTestUtils
.
removeTab
(
openedTab
)
;
}
)
;
