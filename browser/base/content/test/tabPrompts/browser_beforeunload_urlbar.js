"
use
strict
"
;
const
TEST_ROOT
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
const
CONTENT_PROMPT_SUBDIALOG
=
Services
.
prefs
.
getBoolPref
(
"
prompts
.
contentPromptSubDialog
"
false
)
;
add_task
(
async
function
test_beforeunload_stay_clears_urlbar
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
require_user_interaction_for_beforeunload
"
false
]
]
}
)
;
const
TEST_URL
=
TEST_ROOT
+
"
file_beforeunload_stop
.
html
"
;
await
BrowserTestUtils
.
withNewTab
(
TEST_URL
async
function
(
browser
)
{
gURLBar
.
focus
(
)
;
const
inputValue
=
"
http
:
/
/
example
.
org
/
?
q
=
typed
"
;
gURLBar
.
inputField
.
value
=
inputValue
.
slice
(
0
-
1
)
;
EventUtils
.
sendString
(
inputValue
.
slice
(
-
1
)
)
;
if
(
CONTENT_PROMPT_SUBDIALOG
)
{
let
promptOpenedPromise
=
BrowserTestUtils
.
promiseAlertDialogOpen
(
null
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
)
;
let
win
=
await
promptOpenedPromise
;
await
(
async
function
(
)
{
let
rAFCount
=
3
;
while
(
rAFCount
-
-
)
{
await
new
Promise
(
win
.
requestAnimationFrame
)
;
}
}
)
(
)
;
let
dialog
=
win
.
document
.
querySelector
(
"
dialog
"
)
;
dialog
.
getButton
(
"
cancel
"
)
.
click
(
)
;
await
TestUtils
.
waitForTick
(
)
;
}
else
{
let
promptOpenedPromise
=
TestUtils
.
topicObserved
(
"
tabmodal
-
dialog
-
loaded
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
)
;
await
promptOpenedPromise
;
let
promptElement
=
browser
.
parentNode
.
querySelector
(
"
tabmodalprompt
"
)
;
promptElement
.
querySelector
(
"
.
tabmodalprompt
-
button1
"
)
.
click
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
promptElement
.
parentNode
=
=
null
"
tabprompt
should
be
removed
"
)
;
}
ok
(
gURLBar
.
value
.
endsWith
(
"
_stop
.
html
"
)
"
Url
bar
should
be
reset
to
point
to
the
stop
html
file
"
)
;
ok
(
gURLBar
.
value
.
includes
(
"
example
.
com
"
)
"
Url
bar
should
be
reset
to
example
.
com
"
)
;
is
(
gURLBar
.
textbox
.
getAttribute
(
"
pageproxystate
"
)
"
valid
"
"
Should
be
in
valid
pageproxy
state
.
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
content
.
window
.
onbeforeunload
=
null
;
}
)
;
}
)
;
}
)
;
