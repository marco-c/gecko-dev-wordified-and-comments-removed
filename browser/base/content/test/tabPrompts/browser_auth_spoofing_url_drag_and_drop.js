"
use
strict
"
;
let
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
let
TEST_PATH_AUTH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
org
"
)
;
const
CROSS_DOMAIN_URL
=
TEST_PATH
+
"
redirect
-
crossDomain
.
html
"
;
const
SAME_DOMAIN_URL
=
TEST_PATH
+
"
redirect
-
sameDomain
.
html
"
;
const
AUTH_URL
=
TEST_PATH_AUTH
+
"
auth
-
route
.
sjs
"
;
async
function
trigger401AndHandle
(
crossDomain
)
{
let
dialogShown
=
waitForDialogAndDragNDropURL
(
crossDomain
)
;
await
BrowserTestUtils
.
withNewTab
(
crossDomain
?
CROSS_DOMAIN_URL
:
SAME_DOMAIN_URL
async
function
(
)
{
await
dialogShown
;
}
)
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_AUTH_CACHE
resolve
)
;
}
)
;
}
async
function
waitForDialogAndDragNDropURL
(
crossDomain
)
{
await
TestUtils
.
topicObserved
(
"
common
-
dialog
-
loaded
"
)
;
let
dialog
=
gBrowser
.
getTabDialogBox
(
gBrowser
.
selectedBrowser
)
.
_tabDialogManager
.
_topDialog
;
let
dialogDocument
=
dialog
.
_frame
.
contentDocument
;
let
urlbar
=
document
.
getElementById
(
"
urlbar
-
input
"
)
;
let
dataTran
=
new
DataTransfer
(
)
;
let
urlEvent
=
new
DragEvent
(
"
dragstart
"
{
dataTransfer
:
dataTran
}
)
;
let
urlBarContainer
=
document
.
getElementById
(
"
urlbar
-
input
-
container
"
)
;
urlBarContainer
.
click
(
)
;
urlbar
.
dispatchEvent
(
urlEvent
)
;
if
(
crossDomain
)
{
is
(
urlEvent
.
dataTransfer
.
getData
(
"
text
/
plain
"
)
AUTH_URL
"
correct
cross
Domain
URL
is
dragged
over
"
)
;
}
else
{
is
(
urlEvent
.
dataTransfer
.
getData
(
"
text
/
plain
"
)
SAME_DOMAIN_URL
"
correct
same
domain
URL
is
dragged
over
"
)
;
}
let
onDialogClosed
=
BrowserTestUtils
.
waitForEvent
(
window
"
DOMModalDialogClosed
"
)
;
dialogDocument
.
getElementById
(
"
commonDialog
"
)
.
cancelDialog
(
)
;
await
onDialogClosed
;
}
add_task
(
async
function
testUrlDragAndDrop
(
)
{
await
trigger401AndHandle
(
true
)
;
}
)
;
add_task
(
async
function
testUrlDragAndDrop
(
)
{
await
trigger401AndHandle
(
false
)
;
}
)
;
