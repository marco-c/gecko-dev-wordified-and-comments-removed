"
use
strict
"
;
ChromeUtils
.
defineESModuleGetters
(
this
{
UrlbarTestUtils
:
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
sys
.
mjs
"
}
)
;
let
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
let
TEST_PATH_AUTH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
org
"
)
;
const
CROSS_DOMAIN_URL
=
TEST_PATH
+
"
redirect
-
crossDomain
.
html
"
;
const
SAME_DOMAIN_URL
=
TEST_PATH
+
"
redirect
-
sameDomain
.
html
"
;
const
AUTH_URL
=
TEST_PATH_AUTH
+
"
auth
-
route
.
sjs
"
;
async
function
trigger401AndHandle
(
doConfirmPrompt
crossDomain
prefEnabled
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
authPromptSpoofingProtection
"
prefEnabled
]
]
}
)
;
let
url
=
crossDomain
?
CROSS_DOMAIN_URL
:
SAME_DOMAIN_URL
;
let
dialogShown
=
waitForDialog
(
doConfirmPrompt
crossDomain
prefEnabled
)
;
await
BrowserTestUtils
.
withNewTab
(
url
async
function
(
)
{
await
dialogShown
;
}
)
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_AUTH_CACHE
resolve
)
;
}
)
;
}
async
function
waitForDialog
(
doConfirmPrompt
crossDomain
prefEnabled
)
{
await
TestUtils
.
topicObserved
(
"
common
-
dialog
-
loaded
"
)
;
let
dialog
=
gBrowser
.
getTabDialogBox
(
gBrowser
.
selectedBrowser
)
.
_tabDialogManager
.
_topDialog
;
let
dialogDocument
=
dialog
.
_frame
.
contentDocument
;
if
(
crossDomain
)
{
if
(
prefEnabled
)
{
Assert
.
equal
(
dialog
.
_overlay
.
getAttribute
(
"
hideContent
"
)
"
true
"
"
Dialog
overlay
hides
the
current
sites
content
"
)
;
Assert
.
equal
(
window
.
gURLBar
.
value
UrlbarTestUtils
.
trimURL
(
AUTH_URL
)
"
Correct
location
is
provided
by
the
prompt
"
)
;
Assert
.
equal
(
window
.
gBrowser
.
selectedTab
.
label
"
example
.
org
"
"
Tab
title
is
manipulated
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
org
:
443
"
)
;
Assert
.
equal
(
window
.
gURLBar
.
value
UrlbarTestUtils
.
trimURL
(
"
https
:
/
/
example
.
org
"
)
"
No
location
is
provided
by
the
prompt
correct
location
is
displayed
"
)
;
Assert
.
equal
(
window
.
gBrowser
.
selectedTab
.
label
"
mochitest
index
/
"
"
Tab
title
is
not
manipulated
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
Assert
.
equal
(
window
.
gURLBar
.
value
UrlbarTestUtils
.
trimURL
(
AUTH_URL
)
"
Correct
location
is
provided
by
the
prompt
"
)
;
Assert
.
equal
(
window
.
gBrowser
.
selectedTab
.
label
"
example
.
org
"
"
Tab
title
is
manipulated
"
)
;
gBrowser
.
selectedBrowser
.
userTypedValue
=
"
user
value
"
;
gURLBar
.
setURI
(
)
;
Assert
.
equal
(
window
.
gURLBar
.
value
"
user
value
"
"
User
typed
value
is
shown
"
)
;
gBrowser
.
selectedBrowser
.
userTypedValue
=
"
"
;
gURLBar
.
setURI
(
null
true
)
;
Assert
.
equal
(
window
.
gURLBar
.
value
UrlbarTestUtils
.
trimURL
(
AUTH_URL
)
"
Correct
location
is
provided
by
the
prompt
"
)
;
}
else
{
Assert
.
equal
(
dialog
.
_overlay
.
getAttribute
(
"
hideContent
"
)
null
"
Dialog
overlay
does
not
hide
the
current
sites
content
"
)
;
Assert
.
equal
(
window
.
gURLBar
.
value
UrlbarTestUtils
.
trimURL
(
CROSS_DOMAIN_URL
)
"
No
location
is
provided
by
the
prompt
correct
location
is
displayed
"
)
;
Assert
.
equal
(
window
.
gBrowser
.
selectedTab
.
label
"
example
.
com
"
"
Tab
title
is
not
manipulated
"
)
;
}
}
else
{
Assert
.
equal
(
dialog
.
_overlay
.
getAttribute
(
"
hideContent
"
)
null
"
Dialog
overlay
does
not
hide
the
current
sites
content
"
)
;
Assert
.
equal
(
window
.
gURLBar
.
value
UrlbarTestUtils
.
trimURL
(
SAME_DOMAIN_URL
)
"
No
location
is
provided
by
the
prompt
correct
location
is
displayed
"
)
;
Assert
.
equal
(
window
.
gBrowser
.
selectedTab
.
label
"
example
.
com
"
"
Tab
title
is
not
manipulated
"
)
;
}
let
onDialogClosed
=
BrowserTestUtils
.
waitForEvent
(
window
"
DOMModalDialogClosed
"
)
;
if
(
doConfirmPrompt
)
{
dialogDocument
.
getElementById
(
"
loginTextbox
"
)
.
value
=
"
guest
"
;
dialogDocument
.
getElementById
(
"
password1Textbox
"
)
.
value
=
"
guest
"
;
dialogDocument
.
getElementById
(
"
commonDialog
"
)
.
acceptDialog
(
)
;
}
else
{
dialogDocument
.
getElementById
(
"
commonDialog
"
)
.
cancelDialog
(
)
;
}
await
onDialogClosed
;
gURLBar
.
setURI
(
null
true
)
;
Assert
.
equal
(
window
.
gURLBar
.
value
UrlbarTestUtils
.
trimURL
(
crossDomain
?
CROSS_DOMAIN_URL
:
SAME_DOMAIN_URL
)
"
No
location
is
provided
by
the
prompt
"
)
;
Assert
.
equal
(
window
.
gBrowser
.
selectedTab
.
label
"
example
.
com
"
"
Tab
title
is
not
manipulated
"
)
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
authPromptSpoofingProtection
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
testCrossDomainCancelPrefEnabled
(
)
{
await
trigger401AndHandle
(
false
true
true
)
;
}
)
;
add_task
(
async
function
testCrossDomainAcceptPrefEnabled
(
)
{
await
trigger401AndHandle
(
true
true
true
)
;
}
)
;
add_task
(
async
function
testCrossDomainCancelPrefDisabled
(
)
{
await
trigger401AndHandle
(
false
true
false
)
;
}
)
;
add_task
(
async
function
testCrossDomainAcceptPrefDisabled
(
)
{
await
trigger401AndHandle
(
true
true
false
)
;
}
)
;
add_task
(
async
function
testSameDomainCancelPrefEnabled
(
)
{
await
trigger401AndHandle
(
false
false
true
)
;
}
)
;
add_task
(
async
function
testSameDomainAcceptPrefEnabled
(
)
{
await
trigger401AndHandle
(
true
false
true
)
;
}
)
;
