const
gEMPTY_PAGE_URL
=
GetTestWebBasedURL
(
"
file_empty
.
html
"
)
;
function
GetTestWebBasedURL
(
fileName
cors
=
false
)
{
const
origin
=
cors
?
"
http
:
/
/
example
.
org
"
:
"
http
:
/
/
example
.
com
"
;
return
(
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
origin
)
+
fileName
)
;
}
async
function
waitForTabSoundIndicatorAppears
(
tab
)
{
if
(
!
tab
.
soundPlaying
)
{
info
(
"
Tab
sound
indicator
doesn
'
t
appear
yet
"
)
;
await
BrowserTestUtils
.
waitForEvent
(
tab
"
TabAttrModified
"
false
event
=
>
{
return
event
.
detail
.
changed
.
includes
(
"
soundplaying
"
)
;
}
)
;
}
ok
(
tab
.
soundPlaying
"
Tab
sound
indicator
appears
"
)
;
}
async
function
waitForTabSoundIndicatorDisappears
(
tab
)
{
if
(
tab
.
soundPlaying
)
{
info
(
"
Tab
sound
indicator
doesn
'
t
disappear
yet
"
)
;
await
BrowserTestUtils
.
waitForEvent
(
tab
"
TabAttrModified
"
false
event
=
>
{
return
event
.
detail
.
changed
.
includes
(
"
soundplaying
"
)
;
}
)
;
}
ok
(
!
tab
.
soundPlaying
"
Tab
sound
indicator
disappears
"
)
;
}
async
function
createBlankForegroundTab
(
{
needObserver
}
=
{
}
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
gEMPTY_PAGE_URL
)
;
if
(
needObserver
)
{
tab
.
observer
=
createSoundIndicatorObserver
(
tab
)
;
}
return
tab
;
}
function
createSoundIndicatorObserver
(
tab
)
{
let
hasEverUpdated
=
false
;
let
listener
=
event
=
>
{
if
(
event
.
detail
.
changed
.
includes
(
"
soundplaying
"
)
)
{
hasEverUpdated
=
true
;
}
}
;
tab
.
addEventListener
(
"
TabAttrModified
"
listener
)
;
return
{
hasEverUpdated
:
(
)
=
>
{
tab
.
removeEventListener
(
"
TabAttrModified
"
listener
)
;
return
hasEverUpdated
;
}
}
;
}
