const
{
AddonManagerPrivate
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
{
}
)
;
const
ID_PERMS
=
"
update_perms
tests
.
mozilla
.
org
"
;
const
ID_LEGACY
=
"
legacy_update
tests
.
mozilla
.
org
"
;
function
getBadgeStatus
(
)
{
let
menuButton
=
document
.
getElementById
(
"
PanelUI
-
menu
-
button
"
)
;
return
menuButton
.
getAttribute
(
"
badge
-
status
"
)
;
}
add_task
(
function
*
setup
(
)
{
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
install
.
requireBuiltInCerts
"
false
]
[
"
extensions
.
update
.
requireBuiltInCerts
"
false
]
]
}
)
;
gBrowser
.
selectedBrowser
.
loadURI
(
"
about
:
robots
"
)
;
yield
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
registerCleanupFunction
(
function
*
(
)
{
gBrowser
.
selectedBrowser
.
loadURI
(
"
about
:
blank
"
)
;
yield
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
}
)
;
}
)
;
hookExtensionsTelemetry
(
)
;
async
function
testNoPrompt
(
origUrl
id
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
update
.
enabled
"
true
]
[
"
extensions
.
update
.
background
.
url
"
{
BASE
}
/
browser_webext_update
.
json
]
]
}
)
;
let
addon
=
await
promiseInstallAddon
(
origUrl
)
;
ok
(
addon
"
Addon
was
installed
"
)
;
let
sawPopup
=
false
;
PopupNotifications
.
panel
.
addEventListener
(
"
popupshown
"
(
)
=
>
sawPopup
=
true
{
once
:
true
}
)
;
let
updatePromise
=
waitForUpdate
(
addon
)
;
AddonManagerPrivate
.
backgroundUpdateCheck
(
)
;
await
updatePromise
;
is
(
getBadgeStatus
(
)
"
"
"
Should
not
have
addon
alert
badge
"
)
;
await
PanelUI
.
show
(
)
;
let
addons
=
document
.
getElementById
(
"
PanelUI
-
footer
-
addons
"
)
;
is
(
addons
.
children
.
length
0
"
Have
0
updates
in
the
PanelUI
menu
"
)
;
await
PanelUI
.
hide
(
)
;
ok
(
!
sawPopup
"
Should
not
have
seen
permissions
notification
"
)
;
addon
=
await
AddonManager
.
getAddonByID
(
id
)
;
is
(
addon
.
version
"
2
.
0
"
"
Update
should
have
applied
"
)
;
addon
.
uninstall
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
add_task
(
(
)
=
>
testNoPrompt
(
{
BASE
}
/
browser_webext_update_perms1
.
xpi
ID_PERMS
)
)
;
add_task
(
(
)
=
>
testNoPrompt
(
{
BASE
}
/
browser_legacy
.
xpi
ID_LEGACY
)
)
;
