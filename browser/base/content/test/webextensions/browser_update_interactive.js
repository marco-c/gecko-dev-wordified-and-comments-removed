const
{
AddonManagerPrivate
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
{
}
)
;
const
ID
=
"
update2
tests
.
mozilla
.
org
"
;
add_task
(
function
*
setup
(
)
{
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
install
.
requireBuiltInCerts
"
false
]
[
"
extensions
.
update
.
requireBuiltInCerts
"
false
]
[
"
extensions
.
webextPermissionPrompts
"
true
]
]
}
)
;
}
)
;
function
*
interactiveUpdateTest
(
autoUpdate
checkFn
)
{
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
update
.
autoUpdateDefault
"
autoUpdate
]
[
"
extensions
.
update
.
url
"
{
BASE
}
/
browser_webext_update
.
json
]
]
}
)
;
async
function
triggerUpdate
(
win
addon
)
{
let
manualUpdatePromise
;
if
(
!
autoUpdate
)
{
manualUpdatePromise
=
new
Promise
(
resolve
=
>
{
let
listener
=
{
onNewInstall
(
)
{
AddonManager
.
removeInstallListener
(
listener
)
;
resolve
(
)
;
}
}
;
AddonManager
.
addInstallListener
(
listener
)
;
}
)
;
}
let
promise
=
checkFn
(
win
addon
)
;
if
(
manualUpdatePromise
)
{
await
manualUpdatePromise
;
let
list
=
win
.
document
.
getElementById
(
"
addon
-
list
"
)
;
list
.
clientHeight
;
let
item
=
list
.
children
.
find
(
_item
=
>
_item
.
value
=
=
ID
)
;
EventUtils
.
synthesizeMouseAtCenter
(
item
.
_updateBtn
{
}
win
)
;
}
return
{
promise
}
;
}
gBrowser
.
selectedBrowser
.
loadURI
(
"
about
:
robots
"
)
;
yield
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
let
addon
=
yield
promiseInstallAddon
(
{
BASE
}
/
browser_webext_update1
.
xpi
)
;
ok
(
addon
"
Addon
was
installed
"
)
;
is
(
addon
.
version
"
1
.
0
"
"
Version
1
of
the
addon
is
installed
"
)
;
let
win
=
yield
BrowserOpenAddonsMgr
(
"
addons
:
/
/
list
/
extension
"
)
;
let
popupPromise
=
promisePopupNotificationShown
(
"
addon
-
webext
-
permissions
"
)
;
let
{
promise
:
checkPromise
}
=
yield
triggerUpdate
(
win
addon
)
;
let
panel
=
yield
popupPromise
;
let
cancelPromise
=
promiseInstallEvent
(
addon
"
onInstallCancelled
"
)
;
panel
.
secondaryButton
.
click
(
)
;
yield
cancelPromise
;
addon
=
yield
AddonManager
.
getAddonByID
(
ID
)
;
is
(
addon
.
version
"
1
.
0
"
"
Should
still
be
running
the
old
version
"
)
;
yield
checkPromise
;
popupPromise
=
promisePopupNotificationShown
(
"
addon
-
webext
-
permissions
"
)
;
checkPromise
=
(
yield
triggerUpdate
(
win
addon
)
)
.
promise
;
let
updatePromise
=
promiseInstallEvent
(
addon
"
onInstallEnded
"
)
;
panel
=
yield
popupPromise
;
panel
.
button
.
click
(
)
;
addon
=
yield
updatePromise
;
is
(
addon
.
version
"
2
.
0
"
"
Should
have
upgraded
"
)
;
yield
checkPromise
;
yield
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
addon
.
uninstall
(
)
;
yield
SpecialPowers
.
popPrefEnv
(
)
;
}
function
checkAll
(
win
)
{
win
.
gViewController
.
doCommand
(
"
cmd_findAllUpdates
"
)
;
return
new
Promise
(
resolve
=
>
{
let
observer
=
{
observe
(
subject
topic
data
)
{
Services
.
obs
.
removeObserver
(
observer
"
EM
-
update
-
check
-
finished
"
)
;
resolve
(
)
;
}
}
;
Services
.
obs
.
addObserver
(
observer
"
EM
-
update
-
check
-
finished
"
false
)
;
}
)
;
}
add_task
(
(
)
=
>
interactiveUpdateTest
(
true
checkAll
)
)
;
add_task
(
(
)
=
>
interactiveUpdateTest
(
false
checkAll
)
)
;
function
checkOne
(
win
addon
)
{
win
.
gViewController
.
doCommand
(
"
cmd_findItemUpdates
"
addon
)
;
}
add_task
(
(
)
=
>
interactiveUpdateTest
(
true
checkOne
)
)
;
add_task
(
(
)
=
>
interactiveUpdateTest
(
false
checkOne
)
)
;
