add_task
(
function
*
setup
(
)
{
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
install
.
requireBuiltInCerts
"
false
]
[
"
extensions
.
update
.
requireBuiltInCerts
"
false
]
[
"
extensions
.
update
.
url
"
{
BASE
}
/
browser_webext_update
.
json
]
]
}
)
;
}
)
;
async
function
testUpdateNoPrompt
(
filename
id
initialVersion
=
"
1
.
0
"
updateVersion
=
"
2
.
0
"
)
{
gBrowser
.
selectedBrowser
.
loadURI
(
"
about
:
robots
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
let
addon
=
await
promiseInstallAddon
(
{
BASE
}
/
{
filename
}
)
;
ok
(
addon
"
Addon
was
installed
"
)
;
is
(
addon
.
version
initialVersion
"
Version
1
of
the
addon
is
installed
"
)
;
let
win
=
await
BrowserOpenAddonsMgr
(
"
addons
:
/
/
list
/
extension
"
)
;
let
sawPopup
=
false
;
function
popupListener
(
)
{
sawPopup
=
true
;
}
PopupNotifications
.
panel
.
addEventListener
(
"
popupshown
"
popupListener
)
;
let
updatePromise
=
promiseInstallEvent
(
addon
"
onInstallEnded
"
)
;
win
.
gViewController
.
doCommand
(
"
cmd_findAllUpdates
"
)
;
await
updatePromise
;
addon
=
await
AddonManager
.
getAddonByID
(
id
)
;
is
(
addon
.
version
updateVersion
"
Should
have
upgraded
"
)
;
ok
(
!
sawPopup
"
Should
not
have
seen
a
permission
notification
"
)
;
PopupNotifications
.
panel
.
removeEventListener
(
"
popupshown
"
popupListener
)
;
await
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
addon
.
uninstall
(
)
;
}
add_task
(
(
)
=
>
testUpdateNoPrompt
(
"
browser_legacy
.
xpi
"
"
legacy_update
tests
.
mozilla
.
org
"
"
1
.
1
"
)
)
;
add_task
(
(
)
=
>
testUpdateNoPrompt
(
"
browser_webext_update_perms1
.
xpi
"
"
update_perms
tests
.
mozilla
.
org
"
)
)
;
