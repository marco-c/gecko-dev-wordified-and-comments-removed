"
use
strict
"
;
async
function
installFile
(
filename
)
{
const
ChromeRegistry
=
Cc
[
"
mozilla
.
org
/
chrome
/
chrome
-
registry
;
1
"
]
.
getService
(
Ci
.
nsIChromeRegistry
)
;
let
chromeUrl
=
Services
.
io
.
newURI
(
gTestPath
)
;
let
fileUrl
=
ChromeRegistry
.
convertChromeURL
(
chromeUrl
)
;
let
file
=
fileUrl
.
QueryInterface
(
Ci
.
nsIFileURL
)
.
file
;
file
.
leafName
=
filename
;
let
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
window
)
;
MockFilePicker
.
setFiles
(
[
file
]
)
;
MockFilePicker
.
afterOpenCallback
=
MockFilePicker
.
cleanup
;
await
BrowserOpenAddonsMgr
(
"
addons
:
/
/
list
/
extension
"
)
;
let
contentWin
=
gBrowser
.
selectedTab
.
linkedBrowser
.
contentWindow
;
contentWin
.
gViewController
.
doCommand
(
"
cmd_installFromFile
"
)
;
}
add_task
(
async
function
test_install_extension_from_local_file
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
firstInstallId
=
null
;
AddonManager
.
addInstallListener
(
{
onNewInstall
(
install
)
{
firstInstallId
=
install
.
installId
;
AddonManager
.
removeInstallListener
(
this
)
;
}
}
)
;
await
testInstallMethod
(
installFile
"
installLocal
"
)
;
ok
(
firstInstallId
!
=
null
&
&
!
isNaN
(
firstInstallId
)
"
There
was
an
installId
found
"
)
;
let
snapshot
=
Services
.
telemetry
.
snapshotEvents
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
true
)
;
ok
(
snapshot
.
parent
&
&
snapshot
.
parent
.
length
>
0
"
Got
parent
telemetry
events
in
the
snapshot
"
)
;
let
relatedEvents
=
snapshot
.
parent
.
filter
(
(
[
timestamp
category
method
object
]
)
=
>
category
=
=
"
addonsManager
"
&
&
method
=
=
"
action
"
&
&
object
=
=
"
aboutAddons
"
)
.
map
(
relatedEvent
=
>
relatedEvent
.
slice
(
4
6
)
)
;
Assert
.
deepEqual
(
relatedEvents
[
[
firstInstallId
.
toString
(
)
{
action
:
"
installFromFile
"
view
:
"
list
"
}
]
[
(
+
+
firstInstallId
)
.
toString
(
)
{
action
:
"
installFromFile
"
view
:
"
list
"
}
]
[
(
+
+
firstInstallId
)
.
toString
(
)
{
action
:
"
installFromFile
"
view
:
"
list
"
}
]
]
"
The
telemetry
is
recorded
correctly
"
)
;
}
)
;
