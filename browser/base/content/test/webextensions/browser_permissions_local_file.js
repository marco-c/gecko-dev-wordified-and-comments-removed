"
use
strict
"
;
async
function
installFile
(
filename
)
{
const
ChromeRegistry
=
Cc
[
"
mozilla
.
org
/
chrome
/
chrome
-
registry
;
1
"
]
.
getService
(
Ci
.
nsIChromeRegistry
)
;
let
chromeUrl
=
Services
.
io
.
newURI
(
gTestPath
)
;
let
fileUrl
=
ChromeRegistry
.
convertChromeURL
(
chromeUrl
)
;
let
file
=
fileUrl
.
QueryInterface
(
Ci
.
nsIFileURL
)
.
file
;
file
.
leafName
=
filename
;
let
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
window
.
browsingContext
)
;
MockFilePicker
.
setFiles
(
[
file
]
)
;
MockFilePicker
.
afterOpenCallback
=
MockFilePicker
.
cleanup
;
let
{
document
}
=
await
BrowserAddonUI
.
openAddonsMgr
(
"
addons
:
/
/
list
/
extension
"
)
;
await
waitAboutAddonsViewLoaded
(
document
)
;
let
installButton
=
document
.
querySelector
(
'
[
action
=
"
install
-
from
-
file
"
]
'
)
;
installButton
.
click
(
)
;
}
add_task
(
async
function
test_install_extension_from_local_file
(
)
{
let
firstInstallId
=
null
;
AddonManager
.
addInstallListener
(
{
onNewInstall
(
install
)
{
firstInstallId
=
install
.
installId
;
AddonManager
.
removeInstallListener
(
this
)
;
}
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
xpinstall
.
signatures
.
dev
-
root
"
true
]
]
}
)
;
await
testInstallMethod
(
installFile
"
installLocal
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
ok
(
firstInstallId
!
=
null
&
&
!
isNaN
(
firstInstallId
)
"
There
was
an
installId
found
"
)
;
}
)
;
