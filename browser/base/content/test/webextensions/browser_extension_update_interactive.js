const
{
AddonManagerPrivate
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
{
}
)
;
const
URL_BASE
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
webextensions
"
;
const
ID
=
"
update2
tests
.
mozilla
.
org
"
;
const
ID_LEGACY
=
"
legacy_update
tests
.
mozilla
.
org
"
;
registerCleanupFunction
(
async
function
(
)
{
for
(
let
id
of
[
ID
ID_LEGACY
]
)
{
let
addon
=
await
AddonManager
.
getAddonByID
(
id
)
;
if
(
addon
)
{
ok
(
false
Addon
{
id
}
was
still
installed
at
the
end
of
the
test
)
;
addon
.
uninstall
(
)
;
}
}
}
)
;
function
promiseInstallAddon
(
url
)
{
return
AddonManager
.
getInstallForURL
(
url
null
"
application
/
x
-
xpinstall
"
)
.
then
(
install
=
>
{
ok
(
install
"
Created
install
"
)
;
return
new
Promise
(
resolve
=
>
{
install
.
addListener
(
{
onInstallEnded
(
_install
addon
)
{
resolve
(
addon
)
;
}
}
)
;
install
.
install
(
)
;
}
)
;
}
)
;
}
function
promiseViewLoaded
(
tab
viewid
)
{
let
win
=
tab
.
linkedBrowser
.
contentWindow
;
if
(
win
.
gViewController
&
&
!
win
.
gViewController
.
isLoading
&
&
win
.
gViewController
.
currentViewId
=
=
viewid
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
resolve
=
>
{
function
listener
(
)
{
if
(
win
.
gViewController
.
currentViewId
!
=
viewid
)
{
return
;
}
win
.
document
.
removeEventListener
(
"
ViewChanged
"
listener
)
;
resolve
(
)
;
}
win
.
document
.
addEventListener
(
"
ViewChanged
"
listener
)
;
}
)
;
}
function
promisePopupNotificationShown
(
name
)
{
return
new
Promise
(
resolve
=
>
{
function
popupshown
(
)
{
let
notification
=
PopupNotifications
.
getNotification
(
name
)
;
if
(
!
notification
)
{
return
;
}
ok
(
notification
{
name
}
notification
shown
)
;
ok
(
PopupNotifications
.
isPanelOpen
"
notification
panel
open
"
)
;
PopupNotifications
.
panel
.
removeEventListener
(
"
popupshown
"
popupshown
)
;
resolve
(
PopupNotifications
.
panel
.
firstChild
)
;
}
PopupNotifications
.
panel
.
addEventListener
(
"
popupshown
"
popupshown
)
;
}
)
;
}
function
promiseInstallEvent
(
addon
event
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
}
;
listener
[
event
]
=
(
install
.
.
.
args
)
=
>
{
if
(
install
.
addon
.
id
=
=
addon
.
id
)
{
AddonManager
.
removeInstallListener
(
listener
)
;
resolve
(
.
.
.
args
)
;
}
}
;
AddonManager
.
addInstallListener
(
listener
)
;
}
)
;
}
add_task
(
function
*
setup
(
)
{
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
install
.
requireBuiltInCerts
"
false
]
[
"
extensions
.
update
.
requireBuiltInCerts
"
false
]
[
"
extensions
.
webextPermissionPrompts
"
true
]
]
}
)
;
}
)
;
function
*
interactiveUpdateTest
(
autoUpdate
checkFn
)
{
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
update
.
autoUpdateDefault
"
autoUpdate
]
[
"
extensions
.
update
.
url
"
{
URL_BASE
}
/
browser_webext_update
.
json
]
]
}
)
;
function
*
triggerUpdate
(
win
addon
)
{
let
manualUpdatePromise
;
if
(
!
autoUpdate
)
{
manualUpdatePromise
=
new
Promise
(
resolve
=
>
{
let
listener
=
{
onNewInstall
(
)
{
AddonManager
.
removeInstallListener
(
listener
)
;
resolve
(
)
;
}
}
;
AddonManager
.
addInstallListener
(
listener
)
;
}
)
;
}
checkFn
(
win
addon
)
;
if
(
manualUpdatePromise
)
{
yield
manualUpdatePromise
;
let
list
=
win
.
document
.
getElementById
(
"
addon
-
list
"
)
;
list
.
clientHeight
;
let
item
=
list
.
children
.
find
(
_item
=
>
_item
.
value
=
=
ID
)
;
EventUtils
.
synthesizeMouseAtCenter
(
item
.
_updateBtn
{
}
win
)
;
}
}
let
addon
=
yield
promiseInstallAddon
(
{
URL_BASE
}
/
browser_webext_update1
.
xpi
)
;
ok
(
addon
"
Addon
was
installed
"
)
;
is
(
addon
.
version
"
1
.
0
"
"
Version
1
of
the
addon
is
installed
"
)
;
let
loadPromise
=
new
Promise
(
resolve
=
>
{
let
listener
=
(
subject
topic
)
=
>
{
if
(
subject
.
location
.
href
=
=
"
about
:
addons
"
)
{
Services
.
obs
.
removeObserver
(
listener
topic
)
;
resolve
(
subject
)
;
}
}
;
Services
.
obs
.
addObserver
(
listener
"
EM
-
loaded
"
false
)
;
}
)
;
let
tab
=
gBrowser
.
addTab
(
"
about
:
addons
"
)
;
gBrowser
.
selectedTab
=
tab
;
let
win
=
yield
loadPromise
;
const
VIEW
=
"
addons
:
/
/
list
/
extension
"
;
let
viewPromise
=
promiseViewLoaded
(
tab
VIEW
)
;
win
.
loadView
(
VIEW
)
;
yield
viewPromise
;
let
popupPromise
=
promisePopupNotificationShown
(
"
addon
-
webext
-
permissions
"
)
;
yield
triggerUpdate
(
win
addon
)
;
let
panel
=
yield
popupPromise
;
let
cancelPromise
=
promiseInstallEvent
(
addon
"
onInstallCancelled
"
)
;
panel
.
secondaryButton
.
click
(
)
;
yield
cancelPromise
;
addon
=
yield
AddonManager
.
getAddonByID
(
ID
)
;
is
(
addon
.
version
"
1
.
0
"
"
Should
still
be
running
the
old
version
"
)
;
popupPromise
=
promisePopupNotificationShown
(
"
addon
-
webext
-
permissions
"
)
;
yield
triggerUpdate
(
win
addon
)
;
let
updatePromise
=
promiseInstallEvent
(
addon
"
onInstallEnded
"
)
;
panel
=
yield
popupPromise
;
panel
.
button
.
click
(
)
;
addon
=
yield
updatePromise
;
is
(
addon
.
version
"
2
.
0
"
"
Should
have
upgraded
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
addon
.
uninstall
(
)
;
yield
SpecialPowers
.
popPrefEnv
(
)
;
}
function
checkAll
(
win
)
{
win
.
gViewController
.
doCommand
(
"
cmd_findAllUpdates
"
)
;
}
add_task
(
(
)
=
>
interactiveUpdateTest
(
true
checkAll
)
)
;
add_task
(
(
)
=
>
interactiveUpdateTest
(
false
checkAll
)
)
;
function
checkOne
(
win
addon
)
{
win
.
gViewController
.
doCommand
(
"
cmd_findItemUpdates
"
addon
)
;
}
add_task
(
(
)
=
>
interactiveUpdateTest
(
true
checkOne
)
)
;
add_task
(
(
)
=
>
interactiveUpdateTest
(
false
checkOne
)
)
;
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
update
.
url
"
{
URL_BASE
}
/
browser_webext_update
.
json
]
]
}
)
;
gBrowser
.
selectedBrowser
.
loadURI
(
"
about
:
robots
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
let
addon
=
await
promiseInstallAddon
(
{
URL_BASE
}
/
browser_legacy
.
xpi
)
;
ok
(
addon
"
Addon
was
installed
"
)
;
is
(
addon
.
version
"
1
.
1
"
"
Version
1
of
the
addon
is
installed
"
)
;
let
win
=
await
BrowserOpenAddonsMgr
(
"
addons
:
/
/
list
/
extension
"
)
;
let
sawPopup
=
false
;
PopupNotifications
.
panel
.
addEventListener
(
"
popupshown
"
(
)
=
>
sawPopup
=
true
{
once
:
true
}
)
;
let
updatePromise
=
promiseInstallEvent
(
addon
"
onInstallEnded
"
)
;
win
.
gViewController
.
doCommand
(
"
cmd_findAllUpdates
"
)
;
await
updatePromise
;
addon
=
await
AddonManager
.
getAddonByID
(
ID_LEGACY
)
;
is
(
addon
.
version
"
2
.
0
"
"
Should
have
upgraded
"
)
;
ok
(
!
sawPopup
"
Should
not
have
seen
a
permission
notification
"
)
;
await
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
addon
.
uninstall
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
