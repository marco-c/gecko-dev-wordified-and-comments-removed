ChromeUtils
.
defineModuleGetter
(
this
"
ContentBlockingAllowList
"
"
resource
:
/
/
gre
/
modules
/
ContentBlockingAllowList
.
jsm
"
)
;
function
checkClickTelemetry
(
objectName
value
)
{
let
events
=
Services
.
telemetry
.
snapshotEvents
(
Ci
.
nsITelemetry
.
DATASET_PRERELEASE_CHANNELS
)
.
parent
;
let
buttonEvents
=
events
.
filter
(
e
=
>
e
[
1
]
=
=
"
security
.
ui
.
protectionspopup
"
&
&
e
[
2
]
=
=
"
click
"
&
&
e
[
3
]
=
=
objectName
&
&
(
!
value
|
|
e
[
4
]
=
=
value
)
)
;
is
(
buttonEvents
.
length
1
recorded
{
objectName
}
telemetry
event
)
;
}
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
TrackingDBService
"
"
mozilla
.
org
/
tracking
-
db
-
service
;
1
"
"
nsITrackingDBService
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
TRACK_DB_PATH
"
function
(
)
{
return
OS
.
Path
.
join
(
OS
.
Constants
.
Path
.
profileDir
"
protections
.
sqlite
"
)
;
}
)
;
const
{
Sqlite
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Sqlite
.
jsm
"
)
;
async
function
addTrackerDataIntoDB
(
count
)
{
const
insertSQL
=
"
INSERT
INTO
events
(
type
count
timestamp
)
"
+
"
VALUES
(
:
type
:
count
date
(
:
timestamp
)
)
;
"
;
let
db
=
await
Sqlite
.
openConnection
(
{
path
:
TRACK_DB_PATH
}
)
;
let
date
=
new
Date
(
)
.
toISOString
(
)
;
await
db
.
execute
(
insertSQL
{
type
:
TrackingDBService
.
TRACKERS_ID
count
timestamp
:
date
}
)
;
await
db
.
close
(
)
;
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
protections_panel
.
toast
.
timeout
"
100
]
[
"
browser
.
contentblocking
.
report
.
monitor
.
enabled
"
false
]
[
"
browser
.
contentblocking
.
report
.
lockwise
.
enabled
"
false
]
[
"
browser
.
contentblocking
.
report
.
proxy
.
enabled
"
false
]
]
}
)
;
let
oldCanRecord
=
Services
.
telemetry
.
canRecordExtended
;
Services
.
telemetry
.
canRecordExtended
=
true
;
Services
.
telemetry
.
clearEvents
(
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
telemetry
.
canRecordExtended
=
oldCanRecord
;
Services
.
telemetry
.
clearEvents
(
)
;
}
)
;
}
)
;
add_task
(
async
function
testToggleSwitch
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
let
events
=
Services
.
telemetry
.
snapshotEvents
(
Ci
.
nsITelemetry
.
DATASET_PRERELEASE_CHANNELS
)
.
parent
;
let
buttonEvents
=
events
.
filter
(
e
=
>
e
[
1
]
=
=
"
security
.
ui
.
protectionspopup
"
&
&
e
[
2
]
=
=
"
open
"
&
&
e
[
3
]
=
=
"
protections_popup
"
)
;
is
(
buttonEvents
.
length
1
"
recorded
telemetry
for
opening
the
popup
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
gProtectionsHandler
.
_protectionsPopupTPSwitchBreakageLink
)
"
The
'
Site
not
working
?
'
link
should
be
visible
.
"
)
;
ok
(
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
hasAttribute
(
"
enabled
"
)
"
TP
Switch
should
be
enabled
"
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
click
(
)
;
ok
(
BrowserTestUtils
.
is_hidden
(
gProtectionsHandler
.
_protectionsPopupTPSwitchBreakageLink
)
"
The
'
Site
not
working
?
'
link
should
be
hidden
after
TP
switch
turns
to
off
.
"
)
;
await
popuphiddenPromise
;
checkClickTelemetry
(
"
etp_toggle_off
"
)
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popupshown
"
)
;
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
await
browserLoadedPromise
;
await
popupShownPromise
;
await
popuphiddenPromise
;
await
openProtectionsPanel
(
)
;
ok
(
!
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
hasAttribute
(
"
enabled
"
)
"
TP
Switch
should
be
disabled
"
)
;
ok
(
BrowserTestUtils
.
is_hidden
(
gProtectionsHandler
.
_protectionsPopupTPSwitchBreakageLink
)
"
The
'
Site
not
working
?
'
link
should
be
hidden
if
TP
is
off
.
"
)
;
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
click
(
)
;
ok
(
BrowserTestUtils
.
is_hidden
(
gProtectionsHandler
.
_protectionsPopupTPSwitchBreakageLink
)
The
'
Site
not
working
?
'
link
should
be
still
hidden
after
toggling
TP
switch
to
on
from
off
.
)
;
await
browserLoadedPromise
;
checkClickTelemetry
(
"
etp_toggle_on
"
)
;
ContentBlockingAllowList
.
remove
(
tab
.
linkedBrowser
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testSettingsButton
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
preferences
#
privacy
"
)
;
gProtectionsHandler
.
_protectionsPopupSettingsButton
.
click
(
)
;
await
popuphiddenPromise
;
let
newTab
=
await
newTabPromise
;
ok
(
true
"
about
:
preferences
has
been
opened
successfully
"
)
;
checkClickTelemetry
(
"
settings
"
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testShowFullReportButton
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
protections
"
)
;
let
showFullReportButton
=
document
.
getElementById
(
"
protections
-
popup
-
show
-
report
-
button
"
)
;
showFullReportButton
.
click
(
)
;
await
popuphiddenPromise
;
let
newTab
=
await
newTabPromise
;
ok
(
true
"
about
:
protections
has
been
opened
successfully
"
)
;
await
ContentTask
.
spawn
(
newTab
.
linkedBrowser
{
}
async
function
(
)
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
let
bars
=
content
.
document
.
querySelectorAll
(
"
.
graph
-
bar
"
)
;
return
bars
.
length
;
}
"
The
graph
has
been
built
"
)
;
}
)
;
checkClickTelemetry
(
"
full_report
"
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testMiniPanel
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
true
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
for
(
let
item
of
protectionsPopupMainView
.
childNodes
)
{
if
(
item
.
id
!
=
=
"
protections
-
popup
-
mainView
-
panel
-
header
-
section
"
)
{
ok
(
!
BrowserTestUtils
.
is_visible
(
item
)
The
section
'
{
item
.
id
}
'
is
hidden
in
the
toast
.
)
;
}
else
{
ok
(
BrowserTestUtils
.
is_visible
(
item
)
"
The
panel
header
is
displayed
as
the
content
of
the
toast
.
"
)
;
}
}
await
popuphiddenPromise
;
ok
(
true
"
The
mini
panel
hides
automatically
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testToggleSwitchFlow
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popupshown
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
click
(
)
;
ok
(
gProtectionsHandler
.
iconBox
.
hasAttribute
(
"
hasException
"
)
"
The
tracking
protection
icon
state
has
been
changed
to
disabled
.
"
)
;
await
popuphiddenPromise
;
await
browserLoadedPromise
;
await
popupShownPromise
;
ok
(
gProtectionsHandler
.
_protectionsPopup
.
hasAttribute
(
"
toast
"
)
"
The
protections
popup
should
have
the
'
toast
'
attribute
.
"
)
;
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popupshown
"
)
;
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
protectionsPopupHeader
.
click
(
)
;
await
popuphiddenPromise
;
await
popupShownPromise
;
ok
(
!
gProtectionsHandler
.
_protectionsPopup
.
hasAttribute
(
"
toast
"
)
"
The
'
toast
'
attribute
should
be
cleared
on
the
protections
popup
.
"
)
;
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popupshown
"
)
;
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
click
(
)
;
ok
(
!
gProtectionsHandler
.
iconBox
.
hasAttribute
(
"
hasException
"
)
"
The
tracking
protection
icon
state
has
been
changed
to
enabled
.
"
)
;
await
popuphiddenPromise
;
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
await
browserLoadedPromise
;
await
popupShownPromise
;
ok
(
gProtectionsHandler
.
_protectionsPopup
.
hasAttribute
(
"
toast
"
)
"
The
protections
popup
should
have
the
'
toast
'
attribute
.
"
)
;
await
popuphiddenPromise
;
ContentBlockingAllowList
.
remove
(
tab
.
linkedBrowser
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testTrackingProtectionIcon
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
let
TPIcon
=
document
.
getElementById
(
"
tracking
-
protection
-
icon
"
)
;
is
(
gBrowser
.
ownerGlobal
.
getComputedStyle
(
TPIcon
)
.
getPropertyValue
(
"
list
-
style
-
image
"
)
url
(
"
chrome
:
/
/
browser
/
skin
/
tracking
-
protection
.
svg
"
)
"
The
tracking
protection
icon
shows
a
shield
icon
.
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
"
https
:
/
/
example
.
com
/
"
)
;
gProtectionsHandler
.
disableForCurrentPage
(
)
;
await
browserLoadedPromise
;
is
(
gBrowser
.
ownerGlobal
.
getComputedStyle
(
TPIcon
)
.
getPropertyValue
(
"
list
-
style
-
image
"
)
url
(
"
chrome
:
/
/
browser
/
skin
/
tracking
-
protection
-
disabled
.
svg
"
)
"
The
tracking
protection
icon
shows
a
strike
through
shield
icon
.
"
)
;
ContentBlockingAllowList
.
remove
(
tab
.
linkedBrowser
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testNumberOfBlockedTrackers
(
)
{
await
TrackingDBService
.
clearAll
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
let
trackerCounterBox
=
document
.
getElementById
(
"
protections
-
popup
-
trackers
-
blocked
-
counter
-
box
"
)
;
let
trackerCounterDesc
=
document
.
getElementById
(
"
protections
-
popup
-
trackers
-
blocked
-
counter
-
description
"
)
;
ok
(
BrowserTestUtils
.
is_hidden
(
trackerCounterBox
)
"
The
blocked
tracker
counter
is
hidden
if
there
is
no
blocked
tracker
.
"
)
;
await
closeProtectionsPanel
(
)
;
await
addTrackerDataIntoDB
(
1
)
;
let
counterShownPromise
=
BrowserTestUtils
.
waitForAttribute
(
"
showing
"
trackerCounterBox
)
;
await
openProtectionsPanel
(
)
;
await
counterShownPromise
;
ok
(
BrowserTestUtils
.
is_visible
(
trackerCounterBox
)
"
The
blocked
tracker
counter
is
shown
if
there
is
one
blocked
tracker
.
"
)
;
is
(
trackerCounterDesc
.
textContent
"
1
Blocked
"
"
The
blocked
tracker
counter
is
correct
.
"
)
;
await
closeProtectionsPanel
(
)
;
await
TrackingDBService
.
clearAll
(
)
;
await
addTrackerDataIntoDB
(
10
)
;
let
updateCounterPromise
=
new
Promise
(
resolve
=
>
{
let
mut
=
new
MutationObserver
(
mutations
=
>
{
resolve
(
)
;
mut
.
disconnect
(
)
;
}
)
;
mut
.
observe
(
trackerCounterDesc
{
childList
:
true
}
)
;
}
)
;
await
openProtectionsPanelWithKeyNav
(
)
;
await
updateCounterPromise
;
ok
(
BrowserTestUtils
.
is_visible
(
trackerCounterBox
)
"
The
blocked
tracker
counter
is
shown
if
there
are
more
than
one
blocked
tracker
.
"
)
;
is
(
trackerCounterDesc
.
textContent
"
10
Blocked
"
"
The
blocked
tracker
counter
is
correct
.
"
)
;
await
closeProtectionsPanel
(
)
;
await
TrackingDBService
.
clearAll
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testSubViewTelemetry
(
)
{
let
items
=
[
[
"
protections
-
popup
-
category
-
tracking
-
protection
"
"
trackers
"
]
[
"
protections
-
popup
-
category
-
socialblock
"
"
social
"
]
[
"
protections
-
popup
-
category
-
cookies
"
"
cookies
"
]
[
"
protections
-
popup
-
category
-
cryptominers
"
"
cryptominers
"
]
[
"
protections
-
popup
-
category
-
fingerprinters
"
"
fingerprinters
"
]
]
.
map
(
item
=
>
[
document
.
getElementById
(
item
[
0
]
)
item
[
1
]
]
)
;
for
(
let
[
item
telemetryId
]
of
items
)
{
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
www
.
example
.
com
"
async
(
)
=
>
{
item
.
classList
.
remove
(
"
notFound
"
)
;
await
openProtectionsPanel
(
)
;
let
viewShownEvent
=
BrowserTestUtils
.
waitForEvent
(
gProtectionsHandler
.
_protectionsPopupMultiView
"
ViewShown
"
)
;
item
.
click
(
)
;
let
panelView
=
(
await
viewShownEvent
)
.
originalTarget
;
checkClickTelemetry
(
telemetryId
)
;
let
prefsTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
preferences
#
privacy
"
)
;
panelView
.
querySelector
(
"
.
panel
-
footer
>
button
"
)
.
click
(
)
;
let
prefsTab
=
await
prefsTabPromise
;
BrowserTestUtils
.
removeTab
(
prefsTab
)
;
checkClickTelemetry
(
"
subview_settings
"
telemetryId
)
;
}
)
;
}
}
)
;
add_task
(
async
function
testQuickSwitchTabAfterTogglingTPSwitch
(
)
{
const
FIRST_TEST_SITE
=
"
https
:
/
/
example
.
com
/
"
;
const
SECOND_TEST_SITE
=
"
https
:
/
/
example
.
org
/
"
;
await
TrackingDBService
.
clearAll
(
)
;
let
tabOne
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
FIRST_TEST_SITE
)
;
let
tabTwo
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
SECOND_TEST_SITE
)
;
await
openProtectionsPanel
(
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tabTwo
.
linkedBrowser
false
SECOND_TEST_SITE
)
;
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
click
(
)
;
gBrowser
.
selectedTab
=
tabOne
;
await
browserLoadedPromise
;
ok
(
!
ContentBlockingAllowList
.
includes
(
gBrowser
.
selectedBrowser
)
"
The
ETP
state
of
the
first
tab
is
still
enabled
.
"
)
;
ok
(
ContentBlockingAllowList
.
includes
(
tabTwo
.
linkedBrowser
)
"
The
ETP
state
of
the
second
tab
has
been
changed
to
disabled
.
"
)
;
ContentBlockingAllowList
.
remove
(
tabTwo
.
linkedBrowser
)
;
BrowserTestUtils
.
removeTab
(
tabOne
)
;
BrowserTestUtils
.
removeTab
(
tabTwo
)
;
await
TrackingDBService
.
clearAll
(
)
;
}
)
;
