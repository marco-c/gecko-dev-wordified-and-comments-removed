ChromeUtils
.
defineModuleGetter
(
this
"
ContentBlockingAllowList
"
"
resource
:
/
/
gre
/
modules
/
ContentBlockingAllowList
.
jsm
"
)
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
protections_panel
.
enabled
"
true
]
[
"
browser
.
protections_panel
.
toast
.
timeout
"
100
]
[
"
browser
.
contentblocking
.
report
.
monitor
.
enabled
"
false
]
[
"
browser
.
contentblocking
.
report
.
lockwise
.
enabled
"
false
]
[
"
browser
.
contentblocking
.
report
.
proxy
.
enabled
"
false
]
]
}
)
;
}
)
;
add_task
(
async
function
testToggleSwitch
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
ok
(
BrowserTestUtils
.
is_visible
(
gProtectionsHandler
.
_protectionsPopupTPSwitchBreakageLink
)
"
The
'
Site
not
working
?
'
link
should
be
visible
.
"
)
;
ok
(
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
hasAttribute
(
"
enabled
"
)
"
TP
Switch
should
be
enabled
"
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
click
(
)
;
ok
(
BrowserTestUtils
.
is_hidden
(
gProtectionsHandler
.
_protectionsPopupTPSwitchBreakageLink
)
"
The
'
Site
not
working
?
'
link
should
be
hidden
after
TP
switch
turns
to
off
.
"
)
;
await
popuphiddenPromise
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popupshown
"
)
;
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
await
browserLoadedPromise
;
await
popupShownPromise
;
await
popuphiddenPromise
;
await
openProtectionsPanel
(
)
;
ok
(
!
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
hasAttribute
(
"
enabled
"
)
"
TP
Switch
should
be
disabled
"
)
;
ok
(
BrowserTestUtils
.
is_hidden
(
gProtectionsHandler
.
_protectionsPopupTPSwitchBreakageLink
)
"
The
'
Site
not
working
?
'
link
should
be
hidden
if
TP
is
off
.
"
)
;
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
click
(
)
;
ok
(
BrowserTestUtils
.
is_hidden
(
gProtectionsHandler
.
_protectionsPopupTPSwitchBreakageLink
)
The
'
Site
not
working
?
'
link
should
be
still
hidden
after
toggling
TP
switch
to
on
from
off
.
)
;
await
browserLoadedPromise
;
ContentBlockingAllowList
.
remove
(
tab
.
linkedBrowser
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testSettingsButton
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
preferences
#
privacy
"
)
;
gProtectionsHandler
.
_protectionsPopupSettingsButton
.
click
(
)
;
await
popuphiddenPromise
;
let
newTab
=
await
newTabPromise
;
ok
(
true
"
about
:
preferences
has
been
opened
successfully
"
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testShowFullReportButton
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
protections
"
)
;
let
showFullReportButton
=
document
.
getElementById
(
"
protections
-
popup
-
show
-
report
-
button
"
)
;
showFullReportButton
.
click
(
)
;
await
popuphiddenPromise
;
let
newTab
=
await
newTabPromise
;
ok
(
true
"
about
:
protections
has
been
opened
successfully
"
)
;
await
ContentTask
.
spawn
(
newTab
.
linkedBrowser
{
}
async
function
(
)
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
let
bars
=
content
.
document
.
querySelectorAll
(
"
.
graph
-
bar
"
)
;
return
bars
.
length
;
}
"
The
graph
has
been
built
"
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testMiniPanel
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
true
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
for
(
let
item
of
protectionsPopupMainView
.
childNodes
)
{
if
(
item
.
id
!
=
=
"
protections
-
popup
-
mainView
-
panel
-
header
"
)
{
ok
(
!
BrowserTestUtils
.
is_visible
(
item
)
The
section
'
{
item
.
id
}
'
is
hidden
in
the
toast
.
)
;
}
else
{
ok
(
BrowserTestUtils
.
is_visible
(
item
)
"
The
panel
header
is
displayed
as
the
content
of
the
toast
.
"
)
;
}
}
await
popuphiddenPromise
;
ok
(
true
"
The
mini
panel
hides
automatically
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testToggleSwitchFlow
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popupshown
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
click
(
)
;
ok
(
gProtectionsHandler
.
iconBox
.
hasAttribute
(
"
hasException
"
)
"
The
tracking
protection
icon
state
has
been
changed
to
disabled
.
"
)
;
await
popuphiddenPromise
;
await
browserLoadedPromise
;
await
popupShownPromise
;
ok
(
gProtectionsHandler
.
_protectionsPopup
.
hasAttribute
(
"
toast
"
)
"
The
protections
popup
should
have
the
'
toast
'
attribute
.
"
)
;
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popupshown
"
)
;
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
protectionsPopupHeader
.
click
(
)
;
await
popuphiddenPromise
;
await
popupShownPromise
;
ok
(
!
gProtectionsHandler
.
_protectionsPopup
.
hasAttribute
(
"
toast
"
)
"
The
'
toast
'
attribute
should
be
cleared
on
the
protections
popup
.
"
)
;
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popupshown
"
)
;
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
click
(
)
;
ok
(
!
gProtectionsHandler
.
iconBox
.
hasAttribute
(
"
hasException
"
)
"
The
tracking
protection
icon
state
has
been
changed
to
enabled
.
"
)
;
await
popuphiddenPromise
;
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
await
browserLoadedPromise
;
await
popupShownPromise
;
ok
(
gProtectionsHandler
.
_protectionsPopup
.
hasAttribute
(
"
toast
"
)
"
The
protections
popup
should
have
the
'
toast
'
attribute
.
"
)
;
await
popuphiddenPromise
;
ContentBlockingAllowList
.
remove
(
tab
.
linkedBrowser
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testTrackingProtectionIcon
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
let
TPIcon
=
document
.
getElementById
(
"
tracking
-
protection
-
icon
"
)
;
is
(
gBrowser
.
ownerGlobal
.
getComputedStyle
(
TPIcon
)
.
getPropertyValue
(
"
list
-
style
-
image
"
)
url
(
"
chrome
:
/
/
browser
/
skin
/
tracking
-
protection
.
svg
"
)
"
The
tracking
protection
icon
shows
a
shield
icon
.
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
false
"
https
:
/
/
example
.
com
/
"
)
;
gProtectionsHandler
.
disableForCurrentPage
(
)
;
await
browserLoadedPromise
;
is
(
gBrowser
.
ownerGlobal
.
getComputedStyle
(
TPIcon
)
.
getPropertyValue
(
"
list
-
style
-
image
"
)
url
(
"
chrome
:
/
/
browser
/
skin
/
tracking
-
protection
-
disabled
.
svg
"
)
"
The
tracking
protection
icon
shows
a
strike
through
shield
icon
.
"
)
;
ContentBlockingAllowList
.
remove
(
tab
.
linkedBrowser
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
