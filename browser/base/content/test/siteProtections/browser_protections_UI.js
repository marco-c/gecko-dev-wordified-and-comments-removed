add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
protections_panel
.
enabled
"
true
]
[
"
browser
.
protections_panel
.
toast
.
timeout
"
100
]
]
}
)
;
}
)
;
add_task
(
async
function
testToggleSwitch
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
ok
(
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
hasAttribute
(
"
enabled
"
)
"
TP
Switch
should
be
enabled
"
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
click
(
)
;
await
popuphiddenPromise
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popupshown
"
)
;
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
await
browserLoadedPromise
;
await
popupShownPromise
;
await
popuphiddenPromise
;
await
openProtectionsPanel
(
)
;
ok
(
!
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
hasAttribute
(
"
enabled
"
)
"
TP
Switch
should
be
disabled
"
)
;
Services
.
perms
.
remove
(
ContentBlocking
.
_baseURIForChannelClassifier
"
trackingprotection
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testSiteNotWorking
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
let
viewShownPromise
=
BrowserTestUtils
.
waitForEvent
(
gProtectionsHandler
.
_protectionsPopupMultiView
"
ViewShown
"
)
;
document
.
getElementById
(
"
protections
-
popup
-
tp
-
switch
-
breakage
-
link
"
)
.
click
(
)
;
let
event
=
await
viewShownPromise
;
is
(
event
.
originalTarget
.
id
"
protections
-
popup
-
siteNotWorkingView
"
"
Site
Not
Working
?
view
should
be
shown
"
)
;
viewShownPromise
=
BrowserTestUtils
.
waitForEvent
(
gProtectionsHandler
.
_protectionsPopupMultiView
"
ViewShown
"
)
;
document
.
getElementById
(
"
protections
-
popup
-
siteNotWorkingView
-
sendReport
"
)
.
click
(
)
;
event
=
await
viewShownPromise
;
is
(
event
.
originalTarget
.
id
"
protections
-
popup
-
sendReportView
"
"
Send
Report
view
should
be
shown
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testSettingsButton
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
preferences
#
privacy
"
)
;
gProtectionsHandler
.
_protectionPopupSettingsButton
.
click
(
)
;
await
popuphiddenPromise
;
let
newTab
=
await
newTabPromise
;
ok
(
true
"
about
:
preferences
has
been
opened
successfully
"
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testShowFullReportLink
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
protections
"
)
;
let
showFullReportLink
=
document
.
getElementById
(
"
protections
-
popup
-
show
-
full
-
report
-
link
"
)
;
showFullReportLink
.
click
(
)
;
await
popuphiddenPromise
;
let
newTab
=
await
newTabPromise
;
ok
(
true
"
about
:
protections
has
been
opened
successfully
"
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testMiniPanel
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
true
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
for
(
let
item
of
protectionsPopupMainView
.
childNodes
)
{
if
(
item
.
id
!
=
=
"
protections
-
popup
-
mainView
-
panel
-
header
"
)
{
ok
(
!
BrowserTestUtils
.
is_visible
(
item
)
The
section
'
{
item
.
id
}
'
is
hidden
in
the
toast
.
)
;
}
else
{
ok
(
BrowserTestUtils
.
is_visible
(
item
)
"
The
panel
header
is
displayed
as
the
content
of
the
toast
.
"
)
;
}
}
await
popuphiddenPromise
;
ok
(
true
"
The
mini
panel
hides
automatically
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
testToggleSwitchFlow
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
com
"
)
;
await
openProtectionsPanel
(
)
;
let
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popupshown
"
)
;
let
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
click
(
)
;
await
popuphiddenPromise
;
await
browserLoadedPromise
;
await
popupShownPromise
;
ok
(
gProtectionsHandler
.
_protectionsPopup
.
hasAttribute
(
"
toast
"
)
"
The
protections
popup
should
have
the
'
toast
'
attribute
.
"
)
;
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popupshown
"
)
;
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
protectionsPopupHeader
.
click
(
)
;
await
popuphiddenPromise
;
await
popupShownPromise
;
ok
(
!
gProtectionsHandler
.
_protectionsPopup
.
hasAttribute
(
"
toast
"
)
"
The
'
toast
'
attribute
should
be
cleared
on
the
protections
popup
.
"
)
;
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popupshown
"
)
;
browserLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
gProtectionsHandler
.
_protectionsPopupTPSwitch
.
click
(
)
;
await
popuphiddenPromise
;
popuphiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
protectionsPopup
"
popuphidden
"
)
;
await
browserLoadedPromise
;
await
popupShownPromise
;
ok
(
gProtectionsHandler
.
_protectionsPopup
.
hasAttribute
(
"
toast
"
)
"
The
protections
popup
should
have
the
'
toast
'
attribute
.
"
)
;
await
popuphiddenPromise
;
Services
.
perms
.
remove
(
ContentBlocking
.
_baseURIForChannelClassifier
"
trackingprotection
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
