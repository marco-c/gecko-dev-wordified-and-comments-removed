const
CAPTURE_PREF
=
"
browser
.
pagethumbnails
.
capturing_disabled
"
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
PageThumbsStorageService
"
"
mozilla
.
org
/
thumbnails
/
pagethumbs
-
service
;
1
"
"
nsIPageThumbsStorageService
"
)
;
add_task
(
async
function
(
)
{
await
pushPrefs
(
[
CAPTURE_PREF
false
]
)
;
let
url
=
"
http
:
/
/
example
.
com
/
"
;
let
path
=
PageThumbsStorageService
.
getFilePathForURL
(
url
)
;
let
file
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
file
.
initWithPath
(
path
)
;
try
{
file
.
remove
(
false
)
;
}
catch
(
err
)
{
}
await
setLinks
(
"
-
1
"
)
;
gBrowser
.
_createPreloadBrowser
(
)
;
if
(
gBrowser
.
_preloadedBrowser
.
contentDocument
.
readyState
!
=
"
complete
"
)
{
await
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
_preloadedBrowser
"
load
"
true
)
;
}
BrowserOpenTab
(
)
;
let
tab
=
gBrowser
.
selectedTab
;
let
thumbnailCreatedPromise
=
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
function
onCreate
(
subj
topic
data
)
{
if
(
data
!
=
url
)
return
;
Services
.
obs
.
removeObserver
(
onCreate
"
page
-
thumbnail
:
create
"
)
;
ok
(
true
"
thumbnail
created
after
preloaded
tab
was
shown
"
)
;
resolve
(
)
;
}
"
page
-
thumbnail
:
create
"
)
;
}
)
;
await
pushPrefs
(
[
CAPTURE_PREF
false
]
)
;
await
thumbnailCreatedPromise
;
gBrowser
.
removeTab
(
tab
)
;
file
.
remove
(
false
)
;
}
)
;
