add_task
(
async
function
(
)
{
await
pushPrefs
(
[
"
accessibility
.
tabfocus
"
7
]
)
;
let
onbardingEnabled
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
onboarding
.
enabled
"
)
;
let
FOCUS_COUNT
=
30
;
await
setLinks
(
"
0
1
2
3
4
5
6
7
8
"
)
;
setPinnedLinks
(
"
"
)
;
if
(
onbardingEnabled
)
{
await
promiseNoMuteNotificationOnFirstSession
(
)
;
}
let
tab
=
await
addNewTabPageTab
(
)
;
if
(
onbardingEnabled
)
{
FOCUS_COUNT
+
=
3
;
await
promiseTourNotificationOpened
(
tab
.
linkedBrowser
)
;
}
gURLBar
.
focus
(
)
;
countFocus
(
FOCUS_COUNT
)
;
NewTabUtils
.
allPages
.
enabled
=
false
;
let
expectedCount
=
4
;
if
(
onbardingEnabled
)
{
expectedCount
+
=
3
;
}
countFocus
(
expectedCount
)
;
NewTabUtils
.
allPages
.
enabled
=
true
;
}
)
;
function
countFocus
(
aExpectedCount
)
{
let
focusCount
=
0
;
do
{
EventUtils
.
synthesizeKey
(
"
VK_TAB
"
{
}
)
;
if
(
document
.
activeElement
=
=
gBrowser
.
selectedBrowser
)
{
focusCount
+
+
;
}
}
while
(
document
.
activeElement
!
=
gURLBar
.
inputField
)
;
ok
(
focusCount
=
=
aExpectedCount
|
|
focusCount
=
=
(
aExpectedCount
+
1
)
"
Validate
focus
count
in
the
new
tab
page
.
"
)
;
}
function
promiseNoMuteNotificationOnFirstSession
(
)
{
return
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
onboarding
.
notification
.
mute
-
duration
-
on
-
first
-
session
-
ms
"
0
]
]
}
)
;
}
function
promiseTourNotificationOpened
(
browser
)
{
return
ContentTask
.
spawn
(
browser
{
}
function
(
)
{
let
doc
=
content
&
&
content
.
document
;
let
notification
=
doc
.
querySelector
(
"
#
onboarding
-
notification
-
bar
"
)
;
if
(
notification
&
&
notification
.
classList
.
contains
(
"
onboarding
-
opened
"
)
)
{
ok
(
true
"
Should
open
tour
notification
"
)
;
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
resolve
=
>
{
let
observer
=
new
content
.
MutationObserver
(
mutations
=
>
{
mutations
.
forEach
(
mutation
=
>
{
let
bar
=
Array
.
from
(
mutation
.
addedNodes
)
.
find
(
node
=
>
node
.
id
=
=
"
onboarding
-
notification
-
bar
"
)
;
if
(
bar
&
&
bar
.
classList
.
contains
(
"
onboarding
-
opened
"
)
)
{
observer
.
disconnect
(
)
;
ok
(
true
"
Should
open
tour
notification
"
)
;
resolve
(
)
;
}
}
)
;
}
)
;
observer
.
observe
(
doc
.
body
{
childList
:
true
}
)
;
}
)
;
}
)
;
}
