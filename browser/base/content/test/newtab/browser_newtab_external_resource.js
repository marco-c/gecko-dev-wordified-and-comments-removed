"
use
strict
"
;
var
aboutNewTabService
=
Cc
[
"
mozilla
.
org
/
browser
/
aboutnewtab
-
service
;
1
"
]
.
getService
(
Ci
.
nsIAboutNewTabService
)
;
const
ABOUT_NEWTAB_URI
=
"
about
:
newtab
"
;
const
PREF_URI
=
"
http
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
newtab
/
external_newtab
.
html
"
;
const
DEFAULT_URI
=
aboutNewTabService
.
newTabURL
;
function
*
loadNewPageAndVerify
(
browser
uri
)
{
let
browserLoadedPromise
=
BrowserTestUtils
.
waitForEvent
(
browser
"
load
"
true
)
;
browser
.
loadURI
(
"
about
:
newtab
"
)
;
yield
browserLoadedPromise
;
yield
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
uri
:
uri
}
function
*
(
args
)
{
let
uri
=
args
.
uri
;
is
(
String
(
content
.
document
.
location
)
uri
"
document
.
location
should
match
"
+
uri
)
;
is
(
content
.
document
.
documentURI
uri
"
document
.
documentURI
should
match
"
+
uri
)
;
if
(
uri
=
=
"
about
:
newtab
"
)
{
is
(
content
.
document
.
nodePrincipal
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
"
nodePrincipal
should
match
systemPrincipal
"
)
;
}
else
{
is
(
content
.
document
.
nodePrincipal
.
URI
.
spec
uri
"
nodePrincipal
should
match
"
+
uri
)
;
}
}
true
)
;
}
add_task
(
function
*
(
)
{
yield
*
addNewTabPageTab
(
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
ok
(
!
aboutNewTabService
.
overridden
"
sanity
check
:
default
URL
for
about
:
newtab
should
not
be
overriden
"
)
;
yield
*
loadNewPageAndVerify
(
browser
ABOUT_NEWTAB_URI
)
;
aboutNewTabService
.
newTabURL
=
PREF_URI
;
ok
(
aboutNewTabService
.
overridden
"
sanity
check
:
default
URL
for
about
:
newtab
should
be
overriden
"
)
;
is
(
aboutNewTabService
.
newTabURL
PREF_URI
"
sanity
check
:
default
URL
for
about
:
newtab
should
return
the
new
URL
"
)
;
yield
*
loadNewPageAndVerify
(
browser
PREF_URI
)
;
aboutNewTabService
.
resetNewTabURL
(
)
;
is
(
aboutNewTabService
.
newTabURL
DEFAULT_URI
"
sanity
check
:
resetting
the
URL
to
about
:
newtab
should
return
about
:
newtab
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
