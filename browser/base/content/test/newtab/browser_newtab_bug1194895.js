const
PRELOAD_PREF
=
"
browser
.
newtab
.
preload
"
;
const
PREF_NEWTAB_COLUMNS
=
"
browser
.
newtabpage
.
columns
"
;
const
PREF_NEWTAB_ROWS
=
"
browser
.
newtabpage
.
rows
"
;
function
populateDirectoryTiles
(
)
{
let
directoryTiles
=
[
]
;
let
i
=
0
;
while
(
i
+
+
<
14
)
{
directoryTiles
.
push
(
{
directoryId
:
i
url
:
"
http
:
/
/
example
"
+
i
+
"
.
com
/
"
enhancedImageURI
:
"
data
:
image
/
png
;
base64
helloWORLD
"
title
:
"
dirtitle
"
+
i
type
:
"
affiliate
"
}
)
;
}
return
directoryTiles
;
}
gDirectorySource
=
"
data
:
application
/
json
"
+
JSON
.
stringify
(
{
"
directory
"
:
populateDirectoryTiles
(
)
}
)
;
add_task
(
function
*
(
)
{
requestLongerTimeout
(
4
)
;
let
origEnhanced
=
NewTabUtils
.
allPages
.
enhanced
;
let
origCompareLinks
=
NewTabUtils
.
links
.
compareLinks
;
registerCleanupFunction
(
(
)
=
>
{
NewTabUtils
.
allPages
.
enhanced
=
origEnhanced
;
NewTabUtils
.
links
.
compareLinks
=
origCompareLinks
;
}
)
;
yield
pushPrefs
(
[
PRELOAD_PREF
false
]
)
;
yield
pushPrefs
(
[
PREF_NEWTAB_COLUMNS
3
]
)
;
yield
pushPrefs
(
[
PREF_NEWTAB_ROWS
5
]
)
;
yield
*
addNewTabPageTab
(
)
;
yield
customizeNewTabPage
(
"
enhanced
"
)
;
yield
setLinks
(
"
0
1
2
3
4
5
"
)
;
yield
*
addNewTabPageTab
(
)
;
yield
*
checkGrid
(
"
0
1
2
3
4
5
"
)
;
let
scrolling
=
yield
hasScrollbar
(
)
;
ok
(
!
scrolling
"
no
scrollbar
"
)
;
yield
setLinks
(
"
0
1
2
3
4
5
6
7
8
9
"
)
;
yield
*
addNewTabPageTab
(
)
;
yield
*
checkGrid
(
"
0
1
2
3
4
5
6
7
8
9
"
)
;
scrolling
=
yield
hasScrollbar
(
)
;
ok
(
scrolling
"
document
has
scrollbar
"
)
;
yield
pinCell
(
9
)
;
for
(
let
i
=
0
;
i
<
6
;
i
+
+
)
{
yield
blockCell
(
0
)
;
}
yield
*
addNewTabPageTab
(
)
;
yield
*
checkGrid
(
"
6
7
8
9p
"
)
;
scrolling
=
yield
hasScrollbar
(
)
;
ok
(
scrolling
"
document
has
scrollbar
when
tile
is
pinned
to
the
last
row
"
)
;
yield
unpinCell
(
9
)
;
yield
*
addNewTabPageTab
(
)
;
yield
*
checkGrid
(
"
6
7
8
9
"
)
;
scrolling
=
yield
hasScrollbar
(
)
;
ok
(
!
scrolling
"
no
scrollbar
when
bottom
row
tile
is
unpinned
"
)
;
NewTabUtils
.
restore
(
)
;
yield
customizeNewTabPage
(
"
enhanced
"
)
;
yield
setLinks
(
[
]
)
;
yield
*
addNewTabPageTab
(
)
;
ok
(
!
scrolling
"
no
scrollbar
for
directory
tiles
"
)
;
yield
setLinks
(
"
41
"
)
;
yield
*
addNewTabPageTab
(
)
;
scrolling
=
yield
hasScrollbar
(
)
;
ok
(
scrolling
"
adding
low
frecency
history
site
causes
scrollbar
"
)
;
yield
pushPrefs
(
[
PREF_NEWTAB_ROWS
4
]
)
;
yield
*
addNewTabPageTab
(
)
;
scrolling
=
yield
hasScrollbar
(
)
;
ok
(
!
scrolling
"
no
scrollbar
if
history
tiles
falls
past
max
rows
"
)
;
yield
pushPrefs
(
[
PREF_NEWTAB_ROWS
5
]
)
;
yield
*
addNewTabPageTab
(
)
;
scrolling
=
yield
hasScrollbar
(
)
;
ok
(
scrolling
"
scrollbar
is
back
when
max
rows
allow
for
bottom
history
tile
"
)
;
yield
blockCell
(
14
)
;
yield
*
addNewTabPageTab
(
)
;
scrolling
=
yield
hasScrollbar
(
)
;
ok
(
!
scrolling
"
no
scrollbar
after
bottom
history
tiles
is
blocked
"
)
;
NewTabUtils
.
links
.
compareLinks
=
function
(
aLink1
aLink2
)
{
if
(
aLink1
.
type
=
=
aLink2
.
type
)
{
return
aLink2
.
frecency
-
aLink1
.
frecency
|
|
aLink2
.
lastVisitDate
-
aLink1
.
lastVisitDate
;
}
else
{
if
(
aLink2
.
type
=
=
"
history
"
)
{
return
1
;
}
else
{
return
-
1
;
}
}
}
;
yield
setLinks
(
"
31
32
33
"
)
;
yield
*
addNewTabPageTab
(
)
;
scrolling
=
yield
hasScrollbar
(
)
;
ok
(
!
scrolling
"
no
scrollbar
when
directory
tiles
follow
history
tiles
"
)
;
yield
setLinks
(
"
30
31
32
33
34
35
36
37
38
39
"
)
;
yield
*
addNewTabPageTab
(
)
;
scrolling
=
yield
hasScrollbar
(
)
;
ok
(
scrolling
"
scrollbar
appears
when
history
tiles
need
extra
row
"
)
;
}
)
;
