Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
IS_MACOSX
=
(
"
nsILocalFileMac
"
in
Ci
)
;
const
IS_WIN
=
(
"
mozilla
.
org
/
windows
-
registry
-
key
;
1
"
in
Cc
)
;
const
BIN_SUFFIX
=
(
IS_WIN
?
"
.
exe
"
:
"
"
)
;
const
FILE_UPDATER_BIN
=
"
updater
"
+
(
IS_MACOSX
?
"
.
app
"
:
BIN_SUFFIX
)
;
const
FILE_UPDATER_BIN_BAK
=
FILE_UPDATER_BIN
+
"
.
bak
"
;
const
PREF_APP_UPDATE_INTERVAL
=
"
app
.
update
.
interval
"
;
const
PREF_APP_UPDATE_LASTUPDATETIME
=
"
app
.
update
.
lastUpdateTime
.
background
-
update
-
timer
"
;
let
gRembemberedPrefs
=
[
]
;
const
DATA_URI_SPEC
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
browser
/
base
/
content
/
test
/
appUpdate
/
"
;
var
DEBUG_AUS_TEST
=
true
;
var
gUseTestUpdater
=
false
;
const
LOG_FUNCTION
=
info
;
Services
.
scriptloader
.
loadSubScript
(
DATA_URI_SPEC
+
"
testConstants
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
DATA_URI_SPEC
+
"
shared
.
js
"
this
)
;
var
gURLData
=
URL_HOST
+
"
/
"
+
REL_PATH_DATA
;
const
URL_MANUAL_UPDATE
=
gURLData
+
"
downloadPage
.
html
"
;
const
NOTIFICATIONS
=
[
"
update
-
available
"
"
update
-
manual
"
"
update
-
restart
"
]
;
function
delay
(
)
{
return
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
;
}
function
getVersionParams
(
aAppVersion
)
{
let
appInfo
=
Services
.
appinfo
;
return
"
&
appVersion
=
"
+
(
aAppVersion
?
aAppVersion
:
appInfo
.
version
)
;
}
function
cleanUpUpdates
(
)
{
gUpdateManager
.
activeUpdate
=
null
;
gUpdateManager
.
saveUpdates
(
)
;
removeUpdateDirsAndFiles
(
)
;
}
function
setUpdateTimerPrefs
(
)
{
let
now
=
Math
.
round
(
Date
.
now
(
)
/
1000
)
-
60
;
Services
.
prefs
.
setIntPref
(
PREF_APP_UPDATE_LASTUPDATETIME
now
)
;
Services
.
prefs
.
setIntPref
(
PREF_APP_UPDATE_INTERVAL
43200
)
;
}
function
runUpdateTest
(
updateParams
checkAttempts
steps
)
{
return
Task
.
spawn
(
function
*
(
)
{
registerCleanupFunction
(
(
)
=
>
{
gMenuButtonUpdateBadge
.
uninit
(
)
;
gMenuButtonUpdateBadge
.
init
(
)
;
cleanUpUpdates
(
)
;
}
)
;
setUpdateTimerPrefs
(
)
;
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_APP_UPDATE_DOWNLOADPROMPTATTEMPTS
0
]
[
PREF_APP_UPDATE_ENABLED
true
]
[
PREF_APP_UPDATE_IDLETIME
0
]
[
PREF_APP_UPDATE_URL_MANUAL
URL_MANUAL_UPDATE
]
[
PREF_APP_UPDATE_LOG
DEBUG_AUS_TEST
]
]
}
)
;
yield
setupTestUpdater
(
)
;
let
url
=
URL_HTTP_UPDATE_SJS
+
"
?
"
+
updateParams
+
getVersionParams
(
)
;
setUpdateURL
(
url
)
;
executeSoon
(
(
)
=
>
{
Task
.
spawn
(
function
*
(
)
{
gAUS
.
checkForBackgroundUpdates
(
)
;
for
(
var
i
=
0
;
i
<
checkAttempts
-
1
;
i
+
+
)
{
yield
waitForEvent
(
"
update
-
error
"
"
check
-
attempt
-
failed
"
)
;
gAUS
.
checkForBackgroundUpdates
(
)
;
}
}
)
;
}
)
;
for
(
let
step
of
steps
)
{
yield
processStep
(
step
)
;
}
yield
finishTestRestoreUpdaterBackup
(
)
;
}
)
;
}
function
runUpdateProcessingTest
(
updates
steps
)
{
return
Task
.
spawn
(
function
*
(
)
{
registerCleanupFunction
(
(
)
=
>
{
gMenuButtonUpdateBadge
.
reset
(
)
;
cleanUpUpdates
(
)
;
}
)
;
setUpdateTimerPrefs
(
)
;
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_APP_UPDATE_DOWNLOADPROMPTATTEMPTS
0
]
[
PREF_APP_UPDATE_ENABLED
true
]
[
PREF_APP_UPDATE_IDLETIME
0
]
[
PREF_APP_UPDATE_URL_MANUAL
URL_MANUAL_UPDATE
]
[
PREF_APP_UPDATE_LOG
DEBUG_AUS_TEST
]
]
}
)
;
yield
setupTestUpdater
(
)
;
writeUpdatesToXMLFile
(
getLocalUpdatesXMLString
(
updates
)
true
)
;
writeUpdatesToXMLFile
(
getLocalUpdatesXMLString
(
"
"
)
false
)
;
writeStatusFile
(
STATE_FAILED_CRC_ERROR
)
;
reloadUpdateManagerData
(
)
;
testPostUpdateProcessing
(
)
;
for
(
let
step
of
steps
)
{
yield
processStep
(
step
)
;
}
yield
finishTestRestoreUpdaterBackup
(
)
;
}
)
;
}
function
processStep
(
{
notificationId
button
beforeClick
cleanup
}
)
{
return
Task
.
spawn
(
function
*
(
)
{
yield
BrowserTestUtils
.
waitForEvent
(
PanelUI
.
notificationPanel
"
popupshown
"
)
;
const
shownNotification
=
PanelUI
.
activeNotification
.
id
;
is
(
shownNotification
notificationId
"
The
right
notification
showed
up
.
"
)
;
if
(
shownNotification
!
=
notificationId
)
{
if
(
cleanup
)
{
yield
cleanup
(
)
;
}
return
;
}
let
notification
=
document
.
getElementById
(
PanelUI
-
{
notificationId
}
-
notification
)
;
is
(
notification
.
hidden
false
{
notificationId
}
notification
is
showing
)
;
if
(
beforeClick
)
{
yield
Task
.
spawn
(
beforeClick
)
;
}
let
buttonEl
=
document
.
getAnonymousElementByAttribute
(
notification
"
anonid
"
button
)
;
buttonEl
.
click
(
)
;
if
(
cleanup
)
{
yield
cleanup
(
)
;
}
}
)
;
}
function
waitForEvent
(
topic
status
=
null
)
{
return
new
Promise
(
resolve
=
>
Services
.
obs
.
addObserver
(
{
observe
(
subject
innerTopic
innerStatus
)
{
if
(
!
status
|
|
status
=
=
innerStatus
)
{
Services
.
obs
.
removeObserver
(
this
topic
)
;
resolve
(
innerStatus
)
;
}
}
}
topic
false
)
)
}
function
checkWhatsNewLink
(
id
url
)
{
let
whatsNewLink
=
document
.
getElementById
(
id
)
;
is
(
whatsNewLink
.
href
url
|
|
URL_HTTP_UPDATE_SJS
+
"
?
uiURL
=
DETAILS
"
"
What
'
s
new
link
points
to
the
test_details
URL
"
)
;
is
(
whatsNewLink
.
hidden
false
"
What
'
s
new
link
is
not
hidden
.
"
)
;
}
function
setupTestUpdater
(
)
{
return
Task
.
spawn
(
function
*
(
)
{
if
(
gUseTestUpdater
)
{
try
{
restoreUpdaterBackup
(
)
;
}
catch
(
e
)
{
logTestInfo
(
"
Attempt
to
restore
the
backed
up
updater
failed
.
.
.
"
+
"
will
try
again
Exception
:
"
+
e
)
;
yield
delay
(
)
;
yield
setupTestUpdater
(
)
;
return
;
}
yield
moveRealUpdater
(
)
;
}
}
)
;
}
function
moveRealUpdater
(
)
{
return
Task
.
spawn
(
function
*
(
)
{
try
{
let
baseAppDir
=
getAppBaseDir
(
)
;
let
updater
=
baseAppDir
.
clone
(
)
;
updater
.
append
(
FILE_UPDATER_BIN
)
;
updater
.
moveTo
(
baseAppDir
FILE_UPDATER_BIN_BAK
)
;
}
catch
(
e
)
{
logTestInfo
(
"
Attempt
to
move
the
real
updater
out
of
the
way
failed
.
.
.
"
+
"
will
try
again
Exception
:
"
+
e
)
;
yield
delay
(
)
;
yield
moveRealUpdater
(
)
;
return
;
}
yield
copyTestUpdater
(
)
;
}
)
;
}
function
copyTestUpdater
(
)
{
return
Task
.
spawn
(
function
*
(
)
{
try
{
let
baseAppDir
=
getAppBaseDir
(
)
;
let
testUpdaterDir
=
Services
.
dirsvc
.
get
(
"
CurWorkD
"
Ci
.
nsILocalFile
)
;
let
relPath
=
REL_PATH_DATA
;
let
pathParts
=
relPath
.
split
(
"
/
"
)
;
for
(
let
i
=
0
;
i
<
pathParts
.
length
;
+
+
i
)
{
testUpdaterDir
.
append
(
pathParts
[
i
]
)
;
}
let
testUpdater
=
testUpdaterDir
.
clone
(
)
;
testUpdater
.
append
(
FILE_UPDATER_BIN
)
;
testUpdater
.
copyToFollowingLinks
(
baseAppDir
FILE_UPDATER_BIN
)
;
}
catch
(
e
)
{
logTestInfo
(
"
Attempt
to
copy
the
test
updater
failed
.
.
.
"
+
"
will
try
again
Exception
:
"
+
e
)
;
yield
delay
(
)
;
yield
copyTestUpdater
(
)
;
}
}
)
;
}
function
restoreUpdaterBackup
(
)
{
let
baseAppDir
=
getAppBaseDir
(
)
;
let
updater
=
baseAppDir
.
clone
(
)
;
let
updaterBackup
=
baseAppDir
.
clone
(
)
;
updater
.
append
(
FILE_UPDATER_BIN
)
;
updaterBackup
.
append
(
FILE_UPDATER_BIN_BAK
)
;
if
(
updaterBackup
.
exists
(
)
)
{
if
(
updater
.
exists
(
)
)
{
updater
.
remove
(
true
)
;
}
updaterBackup
.
moveTo
(
baseAppDir
FILE_UPDATER_BIN
)
;
}
}
function
finishTestRestoreUpdaterBackup
(
)
{
return
Task
.
spawn
(
function
*
(
)
{
if
(
gUseTestUpdater
)
{
try
{
restoreUpdaterBackup
(
)
;
}
catch
(
e
)
{
logTestInfo
(
"
Attempt
to
restore
the
backed
up
updater
failed
.
.
.
"
+
"
will
try
again
Exception
:
"
+
e
)
;
yield
delay
(
)
;
yield
finishTestRestoreUpdaterBackup
(
)
;
}
}
}
)
;
}
