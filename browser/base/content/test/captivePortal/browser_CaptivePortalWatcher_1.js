"
use
strict
"
;
add_task
(
setupPrefsAndRecentWindowBehavior
)
;
let
testcases
=
[
function
*
test_detectedWithNoBrowserWindow_Redirect
(
)
{
yield
portalDetected
(
)
;
let
win
=
yield
focusWindowAndWaitForPortalUI
(
)
;
let
browser
=
win
.
gBrowser
.
selectedTab
.
linkedBrowser
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
CANONICAL_URL_REDIRECTED
)
;
BrowserTestUtils
.
loadURI
(
browser
CANONICAL_URL_REDIRECTED
)
;
yield
loadPromise
;
yield
freePortal
(
true
)
;
ensurePortalTab
(
win
)
;
ensureNoPortalNotification
(
win
)
;
yield
closeWindowAndWaitForXulWindowVisible
(
win
)
;
}
function
*
test_showLoginPageButton
(
)
{
let
win
=
yield
openWindowAndWaitForFocus
(
)
;
yield
portalDetected
(
)
;
let
notification
=
ensurePortalNotification
(
win
)
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
function
testPortalTabSelectedAndButtonNotVisible
(
)
{
is
(
win
.
gBrowser
.
selectedTab
tab
"
The
captive
portal
tab
should
be
selected
.
"
)
;
testShowLoginPageButtonVisibility
(
notification
"
hidden
"
)
;
}
let
button
=
notification
.
querySelector
(
"
button
.
notification
-
button
"
)
;
function
*
clickButtonAndExpectNewPortalTab
(
)
{
let
p
=
BrowserTestUtils
.
waitForNewTab
(
win
.
gBrowser
CANONICAL_URL
)
;
button
.
click
(
)
;
let
tab
=
yield
p
;
is
(
win
.
gBrowser
.
selectedTab
tab
"
The
captive
portal
tab
should
be
selected
.
"
)
;
return
tab
;
}
let
tab
=
yield
clickButtonAndExpectNewPortalTab
(
)
;
testPortalTabSelectedAndButtonNotVisible
(
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
ensureNoPortalTab
(
win
)
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
tab
=
yield
clickButtonAndExpectNewPortalTab
(
)
;
let
anotherTab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
)
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
button
.
click
(
)
;
is
(
win
.
gBrowser
.
selectedTab
tab
"
The
captive
portal
tab
should
be
selected
.
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
win
.
gBrowser
.
selectedTab
=
anotherTab
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
tab
=
yield
clickButtonAndExpectNewPortalTab
(
)
;
yield
BrowserTestUtils
.
removeTab
(
anotherTab
)
;
yield
freePortal
(
true
)
;
ensureNoPortalTab
(
win
)
;
ensureNoPortalNotification
(
win
)
;
yield
closeWindowAndWaitForXulWindowVisible
(
win
)
;
}
]
;
for
(
let
testcase
of
testcases
)
{
add_task
(
testcase
)
;
}
