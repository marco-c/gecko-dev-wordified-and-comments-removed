"
use
strict
"
;
add_task
(
setupPrefsAndRecentWindowBehavior
)
;
let
testcases
=
[
async
function
test_detectedWithNoBrowserWindow_Redirect
(
)
{
await
portalDetected
(
)
;
let
win
=
await
focusWindowAndWaitForPortalUI
(
)
;
let
browser
=
win
.
gBrowser
.
selectedTab
.
linkedBrowser
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
CANONICAL_URL_REDIRECTED
)
;
BrowserTestUtils
.
loadURI
(
browser
CANONICAL_URL_REDIRECTED
)
;
await
loadPromise
;
await
freePortal
(
true
)
;
ensurePortalTab
(
win
)
;
ensureNoPortalNotification
(
win
)
;
await
closeWindowAndWaitForWindowActivate
(
win
)
;
}
async
function
test_showLoginPageButton
(
)
{
let
win
=
await
openWindowAndWaitForFocus
(
)
;
await
portalDetected
(
)
;
let
notification
=
ensurePortalNotification
(
win
)
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
function
testPortalTabSelectedAndButtonNotVisible
(
)
{
is
(
win
.
gBrowser
.
selectedTab
tab
"
The
captive
portal
tab
should
be
selected
.
"
)
;
testShowLoginPageButtonVisibility
(
notification
"
hidden
"
)
;
}
let
button
=
notification
.
buttonContainer
.
querySelector
(
"
button
.
notification
-
button
"
)
;
async
function
clickButtonAndExpectNewPortalTabAndNotification
(
)
{
let
newTabCreation
=
BrowserTestUtils
.
waitForNewTab
(
win
.
gBrowser
CANONICAL_URL
)
;
let
buttonPressedEvent
=
TestUtils
.
topicObserved
(
"
captive
-
portal
-
login
-
button
-
pressed
"
)
;
button
.
click
(
)
;
const
[
tab
]
=
await
Promise
.
all
(
[
newTabCreation
buttonPressedEvent
]
)
;
is
(
win
.
gBrowser
.
selectedTab
tab
"
The
captive
portal
tab
should
be
selected
.
"
)
;
return
tab
;
}
let
tab
=
await
clickButtonAndExpectNewPortalTabAndNotification
(
)
;
testPortalTabSelectedAndButtonNotVisible
(
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
ensureNoPortalTab
(
win
)
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
tab
=
await
clickButtonAndExpectNewPortalTabAndNotification
(
)
;
let
anotherTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
)
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
button
.
click
(
)
;
is
(
win
.
gBrowser
.
selectedTab
tab
"
The
captive
portal
tab
should
be
selected
.
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
win
.
gBrowser
.
selectedTab
=
anotherTab
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
tab
=
await
clickButtonAndExpectNewPortalTabAndNotification
(
)
;
BrowserTestUtils
.
removeTab
(
anotherTab
)
;
await
freePortal
(
true
)
;
ensureNoPortalTab
(
win
)
;
ensureNoPortalNotification
(
win
)
;
await
closeWindowAndWaitForWindowActivate
(
win
)
;
}
async
function
testLoginSuccessAfterButtonPress
(
)
{
let
loginSuccessAfterButtonPress
=
TestUtils
.
topicObserved
(
"
captive
-
portal
-
login
-
success
-
after
-
button
-
pressed
"
)
;
window
.
CaptivePortalWatcher
.
observe
(
null
"
captive
-
portal
-
login
-
success
"
)
;
let
exception
=
undefined
;
try
{
await
waitForPromiseWithTimeout
(
loginSuccessAfterButtonPress
)
;
}
catch
(
ex
)
{
exception
=
ex
;
}
isnot
(
exception
undefined
"
captive
-
portal
-
login
-
success
-
after
-
button
-
pressed
should
not
have
"
+
"
been
sent
because
button
was
not
pressed
"
)
;
loginSuccessAfterButtonPress
=
TestUtils
.
topicObserved
(
"
captive
-
portal
-
login
-
success
-
after
-
button
-
pressed
"
)
;
window
.
CaptivePortalWatcher
.
observe
(
null
"
captive
-
portal
-
login
-
button
-
pressed
"
)
;
window
.
CaptivePortalWatcher
.
observe
(
null
"
captive
-
portal
-
login
-
success
"
)
;
await
loginSuccessAfterButtonPress
;
window
.
CaptivePortalWatcher
.
_loginButtonPressedTimeStamp
-
=
window
.
CaptivePortalWatcher
.
_LOGIN_BUTTON_PRESSED_TIMEOUT
;
loginSuccessAfterButtonPress
=
TestUtils
.
topicObserved
(
"
captive
-
portal
-
login
-
success
-
after
-
button
-
pressed
"
)
;
window
.
CaptivePortalWatcher
.
observe
(
null
"
captive
-
portal
-
login
-
success
"
)
;
exception
=
undefined
;
try
{
await
waitForPromiseWithTimeout
(
loginSuccessAfterButtonPress
)
;
}
catch
(
ex
)
{
exception
=
ex
;
}
isnot
(
exception
undefined
"
captive
-
portal
-
login
-
success
-
after
-
button
-
pressed
should
not
have
"
+
"
been
sent
button
was
not
pressed
again
"
)
;
}
]
;
for
(
let
testcase
of
testcases
)
{
add_task
(
testcase
)
;
}
