ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
BrowserWindowTracker
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
CaptivePortalWatcher
"
"
resource
:
/
/
/
modules
/
CaptivePortalWatcher
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
cps
"
"
mozilla
.
org
/
network
/
captive
-
portal
-
service
;
1
"
"
nsICaptivePortalService
"
)
;
const
CANONICAL_CONTENT
=
"
success
"
;
const
CANONICAL_URL
=
"
data
:
text
/
plain
;
charset
=
utf
-
8
"
+
CANONICAL_CONTENT
;
const
CANONICAL_URL_REDIRECTED
=
"
data
:
text
/
plain
;
charset
=
utf
-
8
redirected
"
;
const
PORTAL_NOTIFICATION_VALUE
=
"
captive
-
portal
-
detected
"
;
async
function
setupPrefsAndRecentWindowBehavior
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
captivedetect
.
canonicalURL
"
CANONICAL_URL
]
[
"
captivedetect
.
canonicalContent
"
CANONICAL_CONTENT
]
]
}
)
;
window
.
CaptivePortalWatcher
.
uninit
(
)
;
window
.
document
.
documentElement
.
setAttribute
(
"
ignorecaptiveportal
"
"
true
"
)
;
registerCleanupFunction
(
function
cleanUp
(
)
{
window
.
CaptivePortalWatcher
.
init
(
)
;
window
.
document
.
documentElement
.
removeAttribute
(
"
ignorecaptiveportal
"
)
;
}
)
;
}
async
function
portalDetected
(
)
{
Services
.
obs
.
notifyObservers
(
null
"
captive
-
portal
-
login
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
cps
.
state
=
=
cps
.
LOCKED_PORTAL
;
}
"
Waiting
for
Captive
Portal
Service
to
update
state
after
portal
detected
.
"
)
;
}
async
function
freePortal
(
aSuccess
)
{
Services
.
obs
.
notifyObservers
(
null
"
captive
-
portal
-
login
-
"
+
(
aSuccess
?
"
success
"
:
"
abort
"
)
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
cps
.
state
!
=
cps
.
LOCKED_PORTAL
;
}
"
Waiting
for
Captive
Portal
Service
to
update
state
after
portal
freed
.
"
)
;
}
async
function
focusWindowAndWaitForPortalUI
(
aLongRecheck
win
)
{
Services
.
prefs
.
setIntPref
(
"
captivedetect
.
portalRecheckDelayMS
"
aLongRecheck
?
-
1
:
1000000
)
;
if
(
!
win
)
{
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
}
let
windowActivePromise
=
waitForBrowserWindowActive
(
win
)
;
win
.
focus
(
)
;
await
windowActivePromise
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
win
.
CaptivePortalWatcher
.
_waitingForRecheck
;
}
"
Waiting
for
CaptivePortalWatcher
to
trigger
a
recheck
.
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
captive
-
portal
-
check
-
complete
"
)
;
let
notification
=
ensurePortalNotification
(
win
)
;
if
(
aLongRecheck
)
{
ensureNoPortalTab
(
win
)
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
return
win
;
}
let
tab
=
win
.
gBrowser
.
tabs
[
1
]
;
if
(
tab
.
linkedBrowser
.
currentURI
.
spec
!
=
CANONICAL_URL
)
{
await
BrowserTestUtils
.
waitForLocationChange
(
win
.
gBrowser
CANONICAL_URL
)
;
}
is
(
win
.
gBrowser
.
selectedTab
tab
"
The
captive
portal
tab
should
be
open
and
selected
in
the
new
window
.
"
)
;
testShowLoginPageButtonVisibility
(
notification
"
hidden
"
)
;
return
win
;
}
function
ensurePortalTab
(
win
)
{
is
(
win
.
gBrowser
.
tabs
.
length
2
"
There
should
be
a
captive
portal
tab
in
the
window
.
"
)
;
}
function
ensurePortalNotification
(
win
)
{
let
notificationBox
=
win
.
document
.
getElementById
(
"
high
-
priority
-
global
-
notificationbox
"
)
;
let
notification
=
notificationBox
.
getNotificationWithValue
(
PORTAL_NOTIFICATION_VALUE
)
;
isnot
(
notification
null
"
There
should
be
a
captive
portal
notification
in
the
window
.
"
)
;
return
notification
;
}
function
testShowLoginPageButtonVisibility
(
notification
visibility
)
{
let
showLoginPageButton
=
notification
.
querySelector
(
"
button
.
notification
-
button
"
)
;
is
(
showLoginPageButton
.
style
.
visibility
|
|
"
visible
"
visibility
"
The
\
"
Show
Login
Page
\
"
button
should
be
"
+
visibility
+
"
.
"
)
;
}
function
ensureNoPortalTab
(
win
)
{
is
(
win
.
gBrowser
.
tabs
.
length
1
"
There
should
be
no
captive
portal
tab
in
the
window
.
"
)
;
}
function
ensureNoPortalNotification
(
win
)
{
let
notificationBox
=
win
.
document
.
getElementById
(
"
high
-
priority
-
global
-
notificationbox
"
)
;
is
(
notificationBox
.
getNotificationWithValue
(
PORTAL_NOTIFICATION_VALUE
)
null
"
There
should
be
no
captive
portal
notification
in
the
window
.
"
)
;
}
function
waitForBrowserWindowActive
(
win
)
{
return
new
Promise
(
resolve
=
>
{
if
(
Services
.
focus
.
activeWindow
=
=
win
)
{
resolve
(
)
;
}
else
{
win
.
addEventListener
(
"
activate
"
(
)
=
>
{
resolve
(
)
;
}
{
once
:
true
}
)
;
}
}
)
;
}
async
function
closeWindowAndWaitForWindowActivate
(
win
)
{
let
activationPromises
=
[
]
;
for
(
let
w
of
BrowserWindowTracker
.
orderedWindows
)
{
if
(
w
!
=
win
&
&
!
win
.
document
.
documentElement
.
getAttribute
(
"
ignorecaptiveportal
"
)
)
{
activationPromises
.
push
(
waitForBrowserWindowActive
(
win
)
)
;
}
}
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
Promise
.
race
(
activationPromises
)
;
}
async
function
openWindowAndWaitForFocus
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
waitForBrowserWindowActive
(
win
)
;
return
win
;
}
