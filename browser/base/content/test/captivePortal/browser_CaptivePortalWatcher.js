"
use
strict
"
;
requestLongerTimeout
(
2
)
;
add_task
(
setupPrefsAndRecentWindowBehavior
)
;
let
testCasesForBothSuccessAndAbort
=
[
function
*
test_detectedWithNoBrowserWindow_Open
(
aSuccess
)
{
yield
portalDetected
(
)
;
let
win
=
yield
focusWindowAndWaitForPortalUI
(
)
;
yield
freePortal
(
aSuccess
)
;
ensureNoPortalTab
(
win
)
;
ensureNoPortalNotification
(
win
)
;
yield
closeWindowAndWaitForXulWindowVisible
(
win
)
;
}
async
function
test_detectedWithNoBrowserWindow_Focused
(
aSuccess
)
{
let
win1
=
await
openWindowAndWaitForFocus
(
)
;
let
win2
=
await
openWindowAndWaitForFocus
(
)
;
await
SimpleTest
.
promiseFocus
(
window
)
;
await
portalDetected
(
)
;
ensurePortalNotification
(
win1
)
;
ensureNoPortalTab
(
win1
)
;
ensurePortalNotification
(
win2
)
;
ensureNoPortalTab
(
win2
)
;
await
focusWindowAndWaitForPortalUI
(
false
win2
)
;
await
freePortal
(
aSuccess
)
;
ensureNoPortalNotification
(
win1
)
;
ensureNoPortalTab
(
win2
)
;
ensureNoPortalNotification
(
win2
)
;
await
closeWindowAndWaitForXulWindowVisible
(
win2
)
;
await
BrowserTestUtils
.
closeWindow
(
win1
)
;
}
function
*
test_detectedWithNoBrowserWindow_LongRecheck
(
aSuccess
)
{
yield
portalDetected
(
)
;
let
win
=
yield
focusWindowAndWaitForPortalUI
(
true
)
;
yield
freePortal
(
aSuccess
)
;
ensureNoPortalTab
(
win
)
;
ensureNoPortalNotification
(
win
)
;
yield
closeWindowAndWaitForXulWindowVisible
(
win
)
;
}
async
function
test_detectedWithNoBrowserWindow_GoneBeforeOpen
(
aSuccess
)
{
await
portalDetected
(
)
;
await
freePortal
(
aSuccess
)
;
let
win
=
await
openWindowAndWaitForFocus
(
)
;
await
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
1000
)
;
}
)
;
ensureNoPortalTab
(
win
)
;
ensureNoPortalNotification
(
win
)
;
await
closeWindowAndWaitForXulWindowVisible
(
win
)
;
}
function
*
test_detectedWithFocus
(
aSuccess
)
{
let
win1
=
yield
openWindowAndWaitForFocus
(
)
;
let
win2
=
yield
openWindowAndWaitForFocus
(
)
;
yield
portalDetected
(
)
;
ensureNoPortalTab
(
win1
)
;
ensureNoPortalTab
(
win2
)
;
ensurePortalNotification
(
win1
)
;
ensurePortalNotification
(
win2
)
;
yield
freePortal
(
aSuccess
)
;
ensureNoPortalNotification
(
win1
)
;
ensureNoPortalNotification
(
win2
)
;
yield
closeWindowAndWaitForXulWindowVisible
(
win2
)
;
yield
closeWindowAndWaitForXulWindowVisible
(
win1
)
;
}
]
;
for
(
let
testcase
of
testCasesForBothSuccessAndAbort
)
{
add_task
(
testcase
.
bind
(
null
true
)
)
;
add_task
(
testcase
.
bind
(
null
false
)
)
;
}
