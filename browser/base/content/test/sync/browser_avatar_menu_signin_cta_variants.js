"
use
strict
"
;
const
{
NimbusTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
NimbusTestUtils
.
sys
.
mjs
"
)
;
const
DEFAULT_HEADER
=
gSync
.
fluentStrings
.
formatValueSync
(
"
synced
-
tabs
-
fxa
-
sign
-
in
"
)
;
const
DEFAULT_DESCRIPTION
=
gSync
.
fluentStrings
.
formatValueSync
(
"
fxa
-
menu
-
sync
-
description
"
)
;
add_setup
(
async
(
)
=
>
{
gSync
.
init
(
)
;
}
)
;
async
function
reopenAvatarMenu
(
)
{
let
widgetPanel
=
document
.
getElementById
(
"
customizationui
-
widget
-
panel
"
)
;
if
(
widgetPanel
)
{
let
panelHidden
=
BrowserTestUtils
.
waitForEvent
(
widgetPanel
"
popuphidden
"
)
;
widgetPanel
.
hidePopup
(
)
;
await
panelHidden
;
}
let
promiseViewShown
=
BrowserTestUtils
.
waitForEvent
(
PanelMultiView
.
getViewNode
(
document
"
PanelUI
-
fxa
"
)
"
ViewShown
"
)
;
await
gSync
.
toggleAccountPanel
(
document
.
getElementById
(
"
fxa
-
toolbar
-
menu
-
button
"
)
new
MouseEvent
(
"
mousedown
"
)
)
;
await
promiseViewShown
;
let
headerEl
=
PanelMultiView
.
getViewNode
(
document
"
fxa
-
menu
-
header
-
title
"
)
;
let
descriptionEl
=
PanelMultiView
.
getViewNode
(
document
"
fxa
-
menu
-
header
-
description
"
)
;
return
{
header
:
headerEl
.
value
description
:
descriptionEl
.
value
}
;
}
add_task
(
async
function
test_default
(
)
{
Assert
.
equal
(
NimbusFeatures
.
fxaAvatarMenuItem
.
getVariable
(
"
ctaCopyVariant
"
)
undefined
"
Should
not
start
with
a
NimbusFeature
set
for
the
CTA
copy
.
"
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
sandbox
.
spy
(
NimbusFeatures
.
fxaAvatarMenuItem
"
recordExposureEvent
"
)
;
let
{
header
description
}
=
await
reopenAvatarMenu
(
)
;
Assert
.
equal
(
header
DEFAULT_HEADER
"
Should
have
the
default
header
.
"
)
;
Assert
.
equal
(
description
DEFAULT_DESCRIPTION
"
Should
have
the
default
description
.
"
)
;
Assert
.
ok
(
NimbusFeatures
.
fxaAvatarMenuItem
.
recordExposureEvent
.
notCalled
"
Did
not
record
any
exposure
.
"
)
;
sandbox
.
restore
(
)
;
}
)
;
add_task
(
async
function
test_control
(
)
{
let
doCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
NimbusFeatures
.
fxaAvatarMenuItem
.
featureId
value
:
{
ctaCopyVariant
:
"
control
"
}
}
{
isRollout
:
true
}
)
;
let
sandbox
=
sinon
.
createSandbox
(
)
;
sandbox
.
spy
(
NimbusFeatures
.
fxaAvatarMenuItem
"
recordExposureEvent
"
)
;
let
{
header
description
}
=
await
reopenAvatarMenu
(
)
;
Assert
.
equal
(
header
DEFAULT_HEADER
"
Should
have
the
default
header
.
"
)
;
Assert
.
equal
(
description
DEFAULT_DESCRIPTION
"
Should
have
the
default
description
.
"
)
;
Assert
.
ok
(
NimbusFeatures
.
fxaAvatarMenuItem
.
recordExposureEvent
.
calledOnce
"
Recorded
exposure
.
"
)
;
await
doCleanup
(
)
;
sandbox
.
restore
(
)
;
}
)
;
add_task
(
async
function
test_variants
(
)
{
let
variants
=
[
"
sync
-
devices
"
"
backup
-
data
"
"
backup
-
sync
"
"
mobile
"
]
;
for
(
let
variant
of
variants
)
{
let
sandbox
=
sinon
.
createSandbox
(
)
;
sandbox
.
spy
(
NimbusFeatures
.
fxaAvatarMenuItem
"
recordExposureEvent
"
)
;
let
expectedHeader
=
gSync
.
fluentStrings
.
formatValueSync
(
fxa
-
menu
-
message
-
{
variant
}
-
primary
-
text
)
;
let
expectedDescription
=
gSync
.
fluentStrings
.
formatValueSync
(
fxa
-
menu
-
message
-
{
variant
}
-
secondary
-
text
)
;
let
doCleanup
=
await
NimbusTestUtils
.
enrollWithFeatureConfig
(
{
featureId
:
NimbusFeatures
.
fxaAvatarMenuItem
.
featureId
value
:
{
ctaCopyVariant
:
variant
}
}
{
isRollout
:
true
}
)
;
let
{
header
description
}
=
await
reopenAvatarMenu
(
)
;
Assert
.
equal
(
header
expectedHeader
"
Should
have
the
expected
header
.
"
)
;
Assert
.
equal
(
description
expectedDescription
"
Should
have
the
expected
description
.
"
)
;
await
doCleanup
(
)
;
(
{
header
description
}
=
await
reopenAvatarMenu
(
)
)
;
Assert
.
equal
(
header
DEFAULT_HEADER
"
Should
have
the
default
header
.
"
)
;
Assert
.
equal
(
description
DEFAULT_DESCRIPTION
"
Should
have
the
default
description
.
"
)
;
Assert
.
ok
(
NimbusFeatures
.
fxaAvatarMenuItem
.
recordExposureEvent
.
calledOnce
"
Recorded
exposure
.
"
)
;
sandbox
.
restore
(
)
;
}
}
)
;
