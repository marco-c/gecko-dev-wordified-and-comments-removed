"
use
strict
"
;
const
{
ExperimentFakes
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
NimbusTestUtils
.
sys
.
mjs
"
)
;
const
{
ToolbarBadgeHub
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
asrouter
/
ToolbarBadgeHub
.
sys
.
mjs
"
)
;
const
DEFAULT_ICON
=
"
avatar
-
empty
.
svg
"
;
const
HUMAN_CIRCLE_BADGED
=
"
avatar
-
empty
.
svg
"
;
const
HUMAN_CIRCLE
=
"
avatar
-
empty
-
circle
.
svg
"
;
const
FOX_CIRCLE_BADGED
=
"
avatar
-
fox
.
svg
"
;
const
FOX_CIRCLE
=
"
avatar
-
fox
-
circle
.
svg
"
;
const
SIGNED_IN_ICON
=
"
avatar
.
svg
"
;
function
assertCurrentIcon
(
win
iconFilename
message
)
{
let
image
=
win
.
document
.
querySelector
(
"
#
fxa
-
avatar
-
image
"
)
;
let
avatarURL
=
win
.
getComputedStyle
(
image
)
.
listStyleImage
;
let
expectedURL
=
url
(
"
chrome
:
/
/
browser
/
skin
/
fxa
/
{
iconFilename
}
"
)
;
Assert
.
equal
(
avatarURL
expectedURL
message
)
;
}
function
assertSignedOutIcon
(
win
iconFilename
)
{
Assert
.
equal
(
UIState
.
get
(
)
.
status
UIState
.
STATUS_NOT_CONFIGURED
"
Currently
signed
out
.
"
)
;
assertCurrentIcon
(
win
iconFilename
Signed
-
out
avatar
image
is
{
iconFilename
}
)
;
}
function
assertSignedInIcon
(
win
)
{
const
oldUIState
=
UIState
.
get
;
UIState
.
get
=
(
)
=
>
(
{
status
:
UIState
.
STATUS_SIGNED_IN
lastSync
:
new
Date
(
)
email
:
"
foo
bar
.
com
"
}
)
;
Services
.
obs
.
notifyObservers
(
null
UIState
.
ON_UPDATE
)
;
assertCurrentIcon
(
win
SIGNED_IN_ICON
Signed
-
in
avatar
image
is
{
SIGNED_IN_ICON
}
)
;
UIState
.
get
=
oldUIState
;
Services
.
obs
.
notifyObservers
(
null
UIState
.
ON_UPDATE
)
;
}
function
assertBadgedIcon
(
win
iconFilename
)
{
Assert
.
equal
(
UIState
.
get
(
)
.
status
UIState
.
STATUS_NOT_CONFIGURED
"
Currently
signed
out
.
"
)
;
let
button
=
win
.
document
.
querySelector
(
"
#
fxa
-
toolbar
-
menu
-
button
"
)
;
let
badge
=
button
.
querySelector
(
"
.
toolbarbutton
-
badge
"
)
;
badge
.
classList
.
add
(
"
feature
-
callout
"
)
;
button
.
setAttribute
(
"
badged
"
true
)
;
button
.
toggleAttribute
(
"
showing
-
callout
"
true
)
;
assertCurrentIcon
(
win
iconFilename
Badged
avatar
image
is
{
iconFilename
}
)
;
badge
.
classList
.
remove
(
"
feature
-
callout
"
)
;
button
.
removeAttribute
(
"
badged
"
)
;
button
.
toggleAttribute
(
"
showing
-
callout
"
false
)
;
}
async
function
testInNewWindow
(
doCleanup
taskFn
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
win
.
gSync
.
init
(
)
;
await
taskFn
(
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
if
(
doCleanup
)
{
await
doCleanup
(
)
;
}
}
add_setup
(
async
(
)
=
>
{
UIState
.
get
=
(
)
=
>
(
{
status
:
UIState
.
STATUS_NOT_CONFIGURED
}
)
;
Services
.
obs
.
notifyObservers
(
null
UIState
.
ON_UPDATE
)
;
gSync
.
init
(
)
;
}
)
;
add_task
(
async
function
test_default
(
)
{
Assert
.
equal
(
NimbusFeatures
.
fxaButtonVisibility
.
getVariable
(
"
avatarIconVariant
"
)
undefined
"
Should
not
start
with
a
NimbusFeature
set
for
the
signed
-
out
icon
.
"
)
;
await
testInNewWindow
(
null
async
win
=
>
{
assertSignedOutIcon
(
win
DEFAULT_ICON
)
;
assertSignedInIcon
(
win
)
;
}
)
;
}
)
;
add_task
(
async
function
test_control
(
)
{
let
doCleanup
=
await
ExperimentFakes
.
enrollWithFeatureConfig
(
{
featureId
:
NimbusFeatures
.
fxaButtonVisibility
.
featureId
value
:
{
avatarIconVariant
:
"
control
"
}
}
{
isRollout
:
true
}
)
;
await
testInNewWindow
(
doCleanup
async
win
=
>
{
assertSignedOutIcon
(
win
DEFAULT_ICON
)
;
assertSignedInIcon
(
win
)
;
}
)
;
}
)
;
add_task
(
async
function
test_human_circle
(
)
{
let
doCleanup
=
await
ExperimentFakes
.
enrollWithFeatureConfig
(
{
featureId
:
NimbusFeatures
.
fxaButtonVisibility
.
featureId
value
:
{
avatarIconVariant
:
"
human
-
circle
"
}
}
{
isRollout
:
true
}
)
;
await
testInNewWindow
(
doCleanup
async
win
=
>
{
assertSignedOutIcon
(
win
HUMAN_CIRCLE
)
;
assertBadgedIcon
(
win
HUMAN_CIRCLE_BADGED
)
;
assertSignedInIcon
(
win
)
;
}
)
;
}
)
;
add_task
(
async
function
test_fox_circle
(
)
{
let
doCleanup
=
await
ExperimentFakes
.
enrollWithFeatureConfig
(
{
featureId
:
NimbusFeatures
.
fxaButtonVisibility
.
featureId
value
:
{
avatarIconVariant
:
"
fox
-
circle
"
}
}
{
isRollout
:
true
}
)
;
await
testInNewWindow
(
doCleanup
async
win
=
>
{
assertSignedOutIcon
(
win
FOX_CIRCLE
)
;
assertBadgedIcon
(
win
FOX_CIRCLE_BADGED
)
;
assertSignedInIcon
(
win
)
;
}
)
;
}
)
;
