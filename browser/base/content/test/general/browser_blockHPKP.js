const
gSSService
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
const
gIOService
=
Cc
[
"
mozilla
.
org
/
network
/
io
-
service
;
1
"
]
.
getService
(
Ci
.
nsIIOService
)
;
const
kPinningDomain
=
"
include
-
subdomains
.
pinning
-
dynamic
.
example
.
com
"
;
const
khpkpPinninEnablePref
=
"
security
.
cert_pinning
.
process_headers_from_non_builtin_roots
"
;
const
kpkpEnforcementPref
=
"
security
.
cert_pinning
.
enforcement_level
"
;
const
kBadPinningDomain
=
"
bad
.
include
-
subdomains
.
pinning
-
dynamic
.
example
.
com
"
;
const
kURLPath
=
"
/
browser
/
browser
/
base
/
content
/
test
/
general
/
pinning_headers
.
sjs
?
"
;
function
test
(
)
{
waitForExplicitFinish
(
)
;
Services
.
prefs
.
setIntPref
(
kpkpEnforcementPref
2
)
;
Services
.
prefs
.
setBoolPref
(
khpkpPinninEnablePref
true
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
kpkpEnforcementPref
)
;
Services
.
prefs
.
clearUserPref
(
khpkpPinninEnablePref
)
;
let
uri
=
gIOService
.
newURI
(
"
https
:
/
/
"
+
kPinningDomain
)
;
gSSService
.
removeState
(
Ci
.
nsISiteSecurityService
.
HEADER_HPKP
uri
0
)
;
}
)
;
whenNewTabLoaded
(
window
loadPinningPage
)
;
}
function
loadPinningPage
(
)
{
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
"
https
:
/
/
"
+
kPinningDomain
+
kURLPath
+
"
valid
"
)
.
then
(
function
(
)
{
gBrowser
.
selectedBrowser
.
addEventListener
(
"
load
"
successfulPinningPageListener
true
)
;
}
)
;
}
var
successfulPinningPageListener
=
{
handleEvent
(
)
{
gBrowser
.
selectedBrowser
.
removeEventListener
(
"
load
"
this
true
)
;
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
"
https
:
/
/
"
+
kBadPinningDomain
)
.
then
(
function
(
)
{
return
BrowserTestUtils
.
waitForErrorPage
(
gBrowser
.
selectedBrowser
)
;
}
)
.
then
(
errorPageLoaded
)
;
}
}
;
function
errorPageLoaded
(
)
{
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
null
function
*
(
)
{
let
textElement
=
content
.
document
.
getElementById
(
"
errorShortDescText
"
)
;
let
text
=
textElement
.
innerHTML
;
ok
(
text
.
indexOf
(
"
MOZILLA_PKIX_ERROR_KEY_PINNING_FAILURE
"
)
>
0
"
Got
a
pinning
error
page
"
)
;
}
)
.
then
(
function
(
)
{
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
"
https
:
/
/
"
+
kPinningDomain
+
kURLPath
+
"
zeromaxagevalid
"
)
.
then
(
function
(
)
{
return
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
}
)
.
then
(
pinningRemovalLoaded
)
;
}
)
;
}
function
pinningRemovalLoaded
(
)
{
BrowserTestUtils
.
loadURI
(
gBrowser
.
selectedBrowser
"
https
:
/
/
"
+
kBadPinningDomain
)
.
then
(
function
(
)
{
return
BrowserTestUtils
.
browserLoaded
(
gBrowser
.
selectedBrowser
)
;
}
)
.
then
(
badPinningPageLoaded
)
;
}
function
badPinningPageLoaded
(
)
{
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
.
then
(
function
(
)
{
ok
(
true
"
load
complete
"
)
;
finish
(
)
;
}
)
;
}
