"
use
strict
"
;
function
getLoadContext
(
)
{
return
window
.
docShell
.
QueryInterface
(
Ci
.
nsILoadContext
)
;
}
function
getTransferableFromClipboard
(
asHTML
)
{
let
trans
=
Cc
[
"
mozilla
.
org
/
widget
/
transferable
;
1
"
]
.
createInstance
(
Ci
.
nsITransferable
)
;
trans
.
init
(
getLoadContext
(
)
)
;
if
(
asHTML
)
{
trans
.
addDataFlavor
(
"
text
/
html
"
)
;
}
else
{
trans
.
addDataFlavor
(
"
text
/
plain
"
)
;
}
Services
.
clipboard
.
getData
(
trans
Ci
.
nsIClipboard
.
kGlobalClipboard
SpecialPowers
.
wrap
(
window
)
.
browsingContext
.
currentWindowContext
)
;
return
trans
;
}
async
function
cutCurrentSelection
(
elementQueryString
property
browser
)
{
await
BrowserTestUtils
.
synthesizeKey
(
"
x
"
{
accelKey
:
true
}
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
[
elementQueryString
property
]
]
async
function
(
[
contentElementQueryString
contentProperty
]
)
{
let
element
=
content
.
document
.
querySelector
(
contentElementQueryString
)
;
is
(
element
[
contentProperty
]
"
"
{
contentElementQueryString
}
should
be
empty
after
cut
(
superkey
+
x
)
)
;
}
)
;
}
add_task
(
async
function
test_paste_transferable_plain_text
(
)
{
let
testPage
=
"
data
:
text
/
html
"
+
'
<
textarea
id
=
"
textarea
"
>
Write
something
here
<
/
textarea
>
'
;
await
BrowserTestUtils
.
withNewTab
(
testPage
async
function
(
browser
)
{
await
BrowserTestUtils
.
synthesizeMouse
(
"
#
textarea
"
0
0
{
}
browser
)
;
await
BrowserTestUtils
.
synthesizeKey
(
"
a
"
{
accelKey
:
true
}
browser
)
;
await
cutCurrentSelection
(
"
#
textarea
"
"
value
"
browser
)
;
let
trans
=
getTransferableFromClipboard
(
false
)
;
let
DOMWindowUtils
=
EventUtils
.
_getDOMWindowUtils
(
window
)
;
DOMWindowUtils
.
sendContentCommandEvent
(
"
pasteTransferable
"
trans
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
textArea
=
content
.
document
.
querySelector
(
"
#
textarea
"
)
;
is
(
textArea
.
value
"
Write
something
here
"
"
Send
content
command
pasteTransferable
successful
"
)
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_paste_transferable_html
(
)
{
let
testPage
=
"
data
:
text
/
html
"
+
'
<
div
contenteditable
=
"
true
"
>
<
b
>
Bold
Text
<
/
b
>
<
i
>
italics
<
/
i
>
<
/
div
>
'
;
await
BrowserTestUtils
.
withNewTab
(
testPage
async
function
(
browser
)
{
await
BrowserTestUtils
.
synthesizeMouse
(
"
div
"
0
0
{
}
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
element
=
content
.
document
.
querySelector
(
"
div
"
)
;
let
selection
=
content
.
window
.
getSelection
(
)
;
selection
.
selectAllChildren
(
element
)
;
}
)
;
await
cutCurrentSelection
(
"
div
"
"
textContent
"
browser
)
;
let
trans
=
getTransferableFromClipboard
(
true
)
;
let
DOMWindowUtils
=
EventUtils
.
_getDOMWindowUtils
(
window
)
;
DOMWindowUtils
.
sendContentCommandEvent
(
"
pasteTransferable
"
trans
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
textArea
=
content
.
document
.
querySelector
(
"
div
"
)
;
is
(
textArea
.
innerHTML
"
<
b
>
Bold
Text
<
/
b
>
<
i
>
italics
<
/
i
>
"
"
Send
content
command
pasteTransferable
successful
"
)
;
}
)
;
}
)
;
}
)
;
