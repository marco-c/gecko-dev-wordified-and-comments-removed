"
use
strict
"
;
add_task
(
async
function
checkBackFromInvalidURI
(
)
{
await
pushPrefs
(
[
"
keyword
.
enabled
"
false
]
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
robots
"
true
)
;
await
ContentTask
.
spawn
(
gBrowser
.
selectedBrowser
{
}
async
function
(
)
{
content
.
document
.
notifyUserGestureActivation
(
)
;
}
)
;
info
(
"
Loaded
about
:
robots
"
)
;
gURLBar
.
value
=
"
:
:
2600
"
;
let
promiseErrorPageLoaded
=
BrowserTestUtils
.
waitForErrorPage
(
tab
.
linkedBrowser
)
;
gURLBar
.
handleCommand
(
)
;
await
promiseErrorPageLoaded
;
ok
(
gBrowser
.
webNavigation
.
canGoBack
"
Should
be
able
to
go
back
"
)
;
if
(
gBrowser
.
webNavigation
.
canGoBack
)
{
let
promiseOtherPageLoaded
=
BrowserTestUtils
.
waitForEvent
(
tab
.
linkedBrowser
"
pageshow
"
false
function
(
)
{
return
gBrowser
.
currentURI
.
spec
=
=
"
about
:
robots
"
;
}
)
;
gBrowser
.
goBack
(
)
;
await
promiseOtherPageLoaded
;
ok
(
gBrowser
.
webNavigation
.
canGoForward
"
Should
be
able
to
go
forward
from
previous
page
.
"
)
;
}
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
