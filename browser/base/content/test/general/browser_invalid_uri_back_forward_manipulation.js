"
use
strict
"
;
add_task
(
function
*
checkBackFromInvalidURI
(
)
{
yield
pushPrefs
(
[
"
keyword
.
enabled
"
false
]
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
robots
"
true
)
;
gURLBar
.
value
=
"
:
:
2600
"
;
gURLBar
.
focus
(
)
;
let
promiseErrorPageLoaded
=
new
Promise
(
resolve
=
>
{
tab
.
linkedBrowser
.
addEventListener
(
"
DOMContentLoaded
"
function
onLoad
(
)
{
tab
.
linkedBrowser
.
removeEventListener
(
"
DOMContentLoaded
"
onLoad
false
true
)
;
resolve
(
)
;
}
false
true
)
;
}
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
)
;
yield
promiseErrorPageLoaded
;
ok
(
gBrowser
.
webNavigation
.
canGoBack
"
Should
be
able
to
go
back
"
)
;
if
(
gBrowser
.
webNavigation
.
canGoBack
)
{
let
promiseOtherPageLoaded
=
BrowserTestUtils
.
waitForEvent
(
tab
.
linkedBrowser
"
pageshow
"
false
function
(
e
)
{
return
gBrowser
.
currentURI
.
spec
=
=
"
about
:
robots
"
}
)
;
gBrowser
.
goBack
(
)
;
yield
promiseOtherPageLoaded
;
ok
(
gBrowser
.
webNavigation
.
canGoForward
"
Should
be
able
to
go
forward
from
previous
page
.
"
)
;
}
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
