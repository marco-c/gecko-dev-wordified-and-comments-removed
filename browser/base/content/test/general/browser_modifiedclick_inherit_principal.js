"
use
strict
"
;
const
kURL
=
"
http
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
general
/
dummy_page
.
html
"
;
(
"
data
:
text
/
html
<
a
href
=
'
'
>
Middle
-
click
me
<
/
a
>
"
)
;
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
link
.
alternative_click
.
block_javascript
"
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
kURL
async
function
(
browser
)
{
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
a
=
content
.
document
.
createElement
(
"
a
"
)
;
a
.
href
=
"
javascript
:
document
.
write
(
'
spoof
'
)
;
location
.
href
=
'
#
'
;
void
(
0
)
;
"
;
a
.
textContent
=
"
Some
link
"
;
content
.
document
.
body
.
appendChild
(
a
)
;
}
)
;
info
(
"
Added
element
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
a
"
{
button
:
1
}
browser
)
;
let
newTab
=
await
newTabPromise
;
is
(
newTab
.
linkedBrowser
.
contentPrincipal
.
origin
"
http
:
/
/
example
.
com
"
"
Principal
should
be
for
example
.
com
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
newTab
)
;
info
(
gURLBar
.
value
)
;
isnot
(
gURLBar
.
value
"
"
"
URL
bar
should
not
be
empty
.
"
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
}
)
;
}
)
;
