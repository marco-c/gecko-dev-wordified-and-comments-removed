"
use
strict
"
;
function
test
(
)
{
waitForExplicitFinish
(
)
;
let
aboutNewTabService
=
Components
.
classes
[
"
mozilla
.
org
/
browser
/
aboutnewtab
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIAboutNewTabService
)
;
let
newTabURL
;
let
testURL
=
"
http
:
/
/
example
.
com
/
"
;
let
defaultURL
=
aboutNewTabService
.
newTabURL
;
let
mode
;
function
doTest
(
aIsPrivateMode
aWindow
aCallback
)
{
openNewTab
(
aWindow
function
(
)
{
if
(
aIsPrivateMode
)
{
mode
=
"
per
window
private
browsing
"
;
newTabURL
=
"
about
:
privatebrowsing
"
;
}
else
{
mode
=
"
normal
"
;
newTabURL
=
"
about
:
newtab
"
;
}
is
(
aWindow
.
gBrowser
.
selectedBrowser
.
currentURI
.
spec
newTabURL
"
URL
of
NewTab
should
be
"
+
newTabURL
+
"
in
"
+
mode
+
"
mode
"
)
;
aboutNewTabService
.
newTabURL
=
testURL
;
is
(
aboutNewTabService
.
newTabURL
testURL
"
Custom
newtab
url
is
set
"
)
;
openNewTab
(
aWindow
function
(
)
{
is
(
aWindow
.
gBrowser
.
selectedBrowser
.
currentURI
.
spec
testURL
"
URL
of
NewTab
should
be
the
custom
url
"
)
;
aboutNewTabService
.
resetNewTabURL
(
)
;
is
(
aboutNewTabService
.
newTabURL
defaultURL
"
No
custom
newtab
url
is
set
"
)
;
aWindow
.
gBrowser
.
removeTab
(
aWindow
.
gBrowser
.
selectedTab
)
;
aWindow
.
gBrowser
.
removeTab
(
aWindow
.
gBrowser
.
selectedTab
)
;
aWindow
.
close
(
)
;
aCallback
(
)
;
}
)
;
}
)
;
}
function
testOnWindow
(
aIsPrivate
aCallback
)
{
whenNewWindowLoaded
(
{
private
:
aIsPrivate
}
function
(
win
)
{
executeSoon
(
(
)
=
>
aCallback
(
win
)
)
;
}
)
;
}
ok
(
!
aboutNewTabService
.
overridden
"
No
custom
newtab
url
is
set
"
)
;
testOnWindow
(
false
function
(
aWindow
)
{
doTest
(
false
aWindow
function
(
)
{
testOnWindow
(
true
function
(
aWindow2
)
{
doTest
(
true
aWindow2
function
(
)
{
finish
(
)
;
}
)
;
}
)
;
}
)
;
}
)
;
}
function
openNewTab
(
aWindow
aCallback
)
{
aWindow
.
BrowserOpenTab
(
)
;
let
browser
=
aWindow
.
gBrowser
.
selectedBrowser
;
if
(
browser
.
contentDocument
.
readyState
=
=
=
"
complete
"
)
{
executeSoon
(
aCallback
)
;
return
;
}
browser
.
addEventListener
(
"
load
"
function
onLoad
(
)
{
browser
.
removeEventListener
(
"
load
"
onLoad
true
)
;
executeSoon
(
aCallback
)
;
}
true
)
;
}
