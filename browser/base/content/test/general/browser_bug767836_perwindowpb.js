"
use
strict
"
;
async
function
doTest
(
isPrivate
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
isPrivate
}
)
;
let
defaultURL
=
AboutNewTab
.
newTabURL
;
let
newTabURL
;
let
mode
;
let
testURL
=
"
https
:
/
/
example
.
com
/
"
;
if
(
isPrivate
)
{
mode
=
"
per
window
private
browsing
"
;
newTabURL
=
"
about
:
privatebrowsing
"
;
}
else
{
mode
=
"
normal
"
;
newTabURL
=
"
about
:
newtab
"
;
}
await
openNewTab
(
win
newTabURL
)
;
is
(
win
.
gBrowser
.
selectedBrowser
.
currentURI
.
spec
newTabURL
"
URL
of
NewTab
should
be
"
+
newTabURL
+
"
in
"
+
mode
+
"
mode
"
)
;
AboutNewTab
.
newTabURL
=
testURL
;
is
(
AboutNewTab
.
newTabURL
testURL
"
Custom
newtab
url
is
set
"
)
;
await
openNewTab
(
win
testURL
)
;
is
(
win
.
gBrowser
.
selectedBrowser
.
currentURI
.
spec
testURL
"
URL
of
NewTab
should
be
the
custom
url
"
)
;
AboutNewTab
.
resetNewTabURL
(
)
;
is
(
AboutNewTab
.
newTabURL
defaultURL
"
No
custom
newtab
url
is
set
"
)
;
win
.
gBrowser
.
removeTab
(
win
.
gBrowser
.
selectedTab
)
;
win
.
gBrowser
.
removeTab
(
win
.
gBrowser
.
selectedTab
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
add_task
(
async
function
test_newTabService
(
)
{
ok
(
!
AboutNewTab
.
newTabURLOverridden
"
No
custom
newtab
url
is
set
"
)
;
await
doTest
(
false
)
;
await
doTest
(
true
)
;
}
)
;
async
function
openNewTab
(
aWindow
aExpectedURL
)
{
aWindow
.
BrowserCommands
.
openTab
(
)
;
let
browser
=
aWindow
.
gBrowser
.
selectedBrowser
;
if
(
browser
.
currentURI
.
spec
=
=
=
aExpectedURL
)
{
return
;
}
await
BrowserTestUtils
.
waitForLocationChange
(
aWindow
.
gBrowser
)
;
}
