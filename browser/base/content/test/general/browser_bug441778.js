function
test
(
)
{
waitForExplicitFinish
(
)
;
const
TEST_PAGE_URL
=
'
data
:
text
/
html
<
body
>
<
iframe
src
=
"
"
>
<
/
iframe
>
<
/
body
>
'
;
const
TEST_IFRAME_URL
=
"
http
:
/
/
test2
.
example
.
org
/
"
;
(
async
function
(
)
{
let
tab
=
gBrowser
.
addTab
(
)
;
await
FullZoomHelper
.
selectTabAndWaitForLocationChange
(
tab
)
;
let
testBrowser
=
tab
.
linkedBrowser
;
await
FullZoomHelper
.
load
(
tab
TEST_PAGE_URL
)
;
FullZoom
.
enlarge
(
)
;
var
zoomLevel
=
ZoomManager
.
zoom
;
let
deferred
=
Promise
.
defer
(
)
;
executeSoon
(
function
(
)
{
BrowserTestUtils
.
browserLoaded
(
testBrowser
true
)
.
then
(
url
=
>
{
is
(
url
TEST_IFRAME_URL
"
got
the
load
event
for
the
iframe
"
)
;
is
(
ZoomManager
.
zoom
zoomLevel
"
zoom
is
retained
after
sub
-
document
load
"
)
;
FullZoomHelper
.
removeTabAndWaitForLocationChange
(
)
.
then
(
(
)
=
>
deferred
.
resolve
(
)
)
;
}
)
;
ContentTask
.
spawn
(
testBrowser
TEST_IFRAME_URL
url
=
>
{
content
.
document
.
querySelector
(
"
iframe
"
)
.
src
=
url
;
}
)
;
}
)
;
await
deferred
.
promise
;
}
)
(
)
.
then
(
finish
FullZoomHelper
.
failAndContinue
(
finish
)
)
;
}
