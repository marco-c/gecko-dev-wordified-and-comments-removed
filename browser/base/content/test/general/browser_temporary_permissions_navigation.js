"
use
strict
"
;
Cu
.
import
(
"
resource
:
/
/
/
modules
/
SitePermissions
.
jsm
"
this
)
;
add_task
(
function
*
testTempPermissionOnReload
(
)
{
let
uri
=
NetUtil
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
let
id
=
"
geo
"
;
yield
BrowserTestUtils
.
withNewTab
(
uri
.
spec
function
*
(
browser
)
{
let
reloadButton
=
document
.
getElementById
(
"
urlbar
-
reload
-
button
"
)
;
SitePermissions
.
set
(
uri
id
SitePermissions
.
BLOCK
SitePermissions
.
SCOPE_TEMPORARY
browser
)
;
let
reloaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
uri
.
spec
)
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
uri
id
browser
)
{
state
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_TEMPORARY
}
)
;
yield
ContentTask
.
spawn
(
browser
{
}
(
)
=
>
content
.
document
.
location
.
reload
(
)
)
;
yield
reloaded
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
reloadButton
.
disabled
=
=
false
;
}
)
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
uri
id
browser
)
{
state
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_TEMPORARY
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
reloadButton
{
}
)
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
uri
id
browser
)
{
state
:
SitePermissions
.
UNKNOWN
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
)
;
SitePermissions
.
remove
(
uri
id
browser
)
;
}
)
;
}
)
;
add_task
(
function
*
testTempPermissionOnNavigation
(
)
{
let
uri
=
NetUtil
.
newURI
(
"
https
:
/
/
example
.
com
/
"
)
;
let
id
=
"
geo
"
;
yield
BrowserTestUtils
.
withNewTab
(
uri
.
spec
function
*
(
browser
)
{
SitePermissions
.
set
(
uri
id
SitePermissions
.
BLOCK
SitePermissions
.
SCOPE_TEMPORARY
browser
)
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
uri
id
browser
)
{
state
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_TEMPORARY
}
)
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
"
https
:
/
/
example
.
org
/
"
)
;
yield
ContentTask
.
spawn
(
browser
{
}
(
)
=
>
content
.
document
.
location
=
"
https
:
/
/
example
.
org
/
"
)
;
yield
loaded
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
browser
.
currentURI
id
browser
)
{
state
:
SitePermissions
.
UNKNOWN
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
)
;
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
uri
.
spec
)
;
yield
ContentTask
.
spawn
(
browser
{
}
(
)
=
>
content
.
document
.
location
=
"
https
:
/
/
example
.
com
/
"
)
;
yield
loaded
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
browser
.
currentURI
id
browser
)
{
state
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_TEMPORARY
}
)
;
SitePermissions
.
remove
(
uri
id
browser
)
;
}
)
;
}
)
;
