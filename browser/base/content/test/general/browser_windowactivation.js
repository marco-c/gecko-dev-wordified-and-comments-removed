const
testPage
=
getRootDirectory
(
gTestPath
)
+
"
file_window_activation
.
html
"
;
const
testPage2
=
getRootDirectory
(
gTestPath
)
+
"
file_window_activation2
.
html
"
;
add_task
(
async
function
reallyRunTests
(
)
{
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
testPage
)
;
let
browser1
=
tab1
.
linkedBrowser
;
let
tab2
=
BrowserTestUtils
.
addTab
(
gBrowser
testPage
)
;
let
browser2
=
tab2
.
linkedBrowser
;
await
BrowserTestUtils
.
browserLoaded
(
browser2
)
;
function
failTest
(
)
{
ok
(
false
"
Test
received
unexpected
activate
/
deactivate
event
"
)
;
}
BrowserTestUtils
.
waitForContentEvent
(
browser1
"
activate
"
true
)
.
then
(
failTest
)
;
BrowserTestUtils
.
waitForContentEvent
(
browser2
"
activate
"
true
)
.
then
(
failTest
)
;
BrowserTestUtils
.
waitForContentEvent
(
browser1
"
deactivate
"
true
)
.
then
(
failTest
)
;
BrowserTestUtils
.
waitForContentEvent
(
browser2
"
deactivate
"
true
)
.
then
(
failTest
)
;
gURLBar
.
focus
(
)
;
gBrowser
.
selectedTab
=
tab1
;
let
colorBrowser1
=
await
getBackgroundColor
(
browser1
true
)
;
let
colorBrowser2
=
await
getBackgroundColor
(
browser2
true
)
;
is
(
colorBrowser1
"
rgba
(
0
0
0
0
)
"
"
first
window
initial
"
)
;
is
(
colorBrowser2
"
rgba
(
0
0
0
0
)
"
"
second
window
initial
"
)
;
let
otherWindow
=
window
.
open
(
testPage2
"
"
"
chrome
"
)
;
await
SimpleTest
.
promiseFocus
(
otherWindow
)
;
colorBrowser1
=
await
getBackgroundColor
(
browser1
true
)
;
colorBrowser2
=
await
getBackgroundColor
(
browser2
true
)
;
is
(
colorBrowser1
"
rgb
(
255
0
0
)
"
"
first
window
lowered
"
)
;
is
(
colorBrowser2
"
rgb
(
255
0
0
)
"
"
second
window
lowered
"
)
;
otherWindow
.
close
(
)
;
colorBrowser1
=
await
getBackgroundColor
(
browser1
true
)
;
colorBrowser2
=
await
getBackgroundColor
(
browser2
true
)
;
is
(
colorBrowser1
"
rgba
(
0
0
0
0
)
"
"
first
window
raised
"
)
;
is
(
colorBrowser2
"
rgba
(
0
0
0
0
)
"
"
second
window
raised
"
)
;
gBrowser
.
selectedTab
=
tab2
;
colorBrowser1
=
await
getBackgroundColor
(
browser1
false
)
;
colorBrowser2
=
await
getBackgroundColor
(
browser2
false
)
;
is
(
colorBrowser1
"
rgba
(
0
0
0
0
)
"
"
first
window
after
tab
switch
"
)
;
is
(
colorBrowser2
"
rgba
(
0
0
0
0
)
"
"
second
window
after
tab
switch
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
otherWindow
=
null
;
}
)
;
function
getBackgroundColor
(
browser
ifChanged
)
{
return
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
return
new
Promise
(
resolve
=
>
{
let
oldColor
=
null
;
let
timer
=
content
.
setInterval
(
(
)
=
>
{
let
area
=
content
.
document
.
getElementById
(
"
area
"
)
;
if
(
!
area
)
{
return
;
}
let
color
=
content
.
getComputedStyle
(
area
)
.
backgroundColor
;
if
(
oldColor
!
=
color
|
|
!
ifChanged
)
{
content
.
clearInterval
(
timer
)
;
oldColor
=
color
;
resolve
(
color
)
;
}
}
20
)
;
}
)
;
}
)
;
}
