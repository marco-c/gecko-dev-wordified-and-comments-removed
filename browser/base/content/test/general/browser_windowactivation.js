const
testPageChrome
=
getRootDirectory
(
gTestPath
)
+
"
file_window_activation
.
html
"
;
const
testPageHttp
=
testPageChrome
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
const
testPageWindow
=
getRootDirectory
(
gTestPath
)
+
"
file_window_activation2
.
html
"
;
add_task
(
async
function
reallyRunTests
(
)
{
let
chromeTab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
testPageChrome
)
;
let
chromeBrowser1
=
chromeTab1
.
linkedBrowser
;
let
chromeTab2
=
BrowserTestUtils
.
addTab
(
gBrowser
testPageChrome
)
;
let
chromeBrowser2
=
chromeTab2
.
linkedBrowser
;
await
BrowserTestUtils
.
browserLoaded
(
chromeBrowser2
)
;
let
httpTab
=
BrowserTestUtils
.
addTab
(
gBrowser
testPageHttp
)
;
let
httpBrowser
=
httpTab
.
linkedBrowser
;
await
BrowserTestUtils
.
browserLoaded
(
httpBrowser
)
;
function
failTest
(
)
{
ok
(
false
"
Test
received
unexpected
activate
/
deactivate
event
"
)
;
}
for
(
let
b
of
[
chromeBrowser1
chromeBrowser2
httpBrowser
]
)
{
BrowserTestUtils
.
waitForContentEvent
(
b
"
activate
"
true
)
.
then
(
failTest
)
;
BrowserTestUtils
.
waitForContentEvent
(
b
"
deactivate
"
true
)
.
then
(
failTest
)
;
}
gURLBar
.
focus
(
)
;
gBrowser
.
selectedTab
=
chromeTab1
;
let
colorChromeBrowser1
=
await
getBackgroundColor
(
chromeBrowser1
true
)
;
let
colorChromeBrowser2
=
await
getBackgroundColor
(
chromeBrowser2
true
)
;
let
colorHttpBrowser
=
await
getBackgroundColor
(
httpBrowser
true
)
;
is
(
colorChromeBrowser1
"
rgba
(
0
0
0
0
)
"
"
first
tab
initial
"
)
;
is
(
colorChromeBrowser2
"
rgba
(
0
0
0
0
)
"
"
second
tab
initial
"
)
;
is
(
colorHttpBrowser
"
rgba
(
0
0
0
0
)
"
"
third
tab
initial
"
)
;
let
otherWindow
=
window
.
open
(
testPageWindow
"
"
"
chrome
"
)
;
await
SimpleTest
.
promiseFocus
(
otherWindow
)
;
colorChromeBrowser1
=
await
getBackgroundColor
(
chromeBrowser1
false
)
;
colorChromeBrowser2
=
await
getBackgroundColor
(
chromeBrowser2
false
)
;
colorHttpBrowser
=
await
getBackgroundColor
(
httpBrowser
false
)
;
is
(
colorChromeBrowser1
"
rgb
(
255
0
0
)
"
"
first
tab
lowered
"
)
;
is
(
colorChromeBrowser2
"
rgb
(
255
0
0
)
"
"
second
tab
lowered
"
)
;
is
(
colorHttpBrowser
"
rgb
(
255
0
0
)
"
"
third
tab
lowered
"
)
;
otherWindow
.
close
(
)
;
colorChromeBrowser1
=
await
getBackgroundColor
(
chromeBrowser1
true
)
;
colorChromeBrowser2
=
await
getBackgroundColor
(
chromeBrowser2
true
)
;
colorHttpBrowser
=
await
getBackgroundColor
(
httpBrowser
true
)
;
is
(
colorChromeBrowser1
"
rgba
(
0
0
0
0
)
"
"
first
tab
raised
"
)
;
is
(
colorChromeBrowser2
"
rgba
(
0
0
0
0
)
"
"
second
tab
raised
"
)
;
is
(
colorHttpBrowser
"
rgba
(
0
0
0
0
)
"
"
third
tab
raised
"
)
;
gBrowser
.
selectedTab
=
chromeTab2
;
colorChromeBrowser1
=
await
getBackgroundColor
(
chromeBrowser1
true
)
;
colorChromeBrowser2
=
await
getBackgroundColor
(
chromeBrowser2
true
)
;
colorHttpBrowser
=
await
getBackgroundColor
(
httpBrowser
true
)
;
is
(
colorChromeBrowser1
"
rgba
(
0
0
0
0
)
"
"
first
tab
after
tab
switch
"
)
;
is
(
colorChromeBrowser2
"
rgba
(
0
0
0
0
)
"
"
second
tab
after
tab
switch
"
)
;
is
(
colorHttpBrowser
"
rgba
(
0
0
0
0
)
"
"
third
tab
after
tab
switch
"
)
;
BrowserTestUtils
.
removeTab
(
chromeTab1
)
;
BrowserTestUtils
.
removeTab
(
chromeTab2
)
;
BrowserTestUtils
.
removeTab
(
httpTab
)
;
otherWindow
=
null
;
}
)
;
function
getBackgroundColor
(
browser
expectedActive
)
{
return
SpecialPowers
.
spawn
(
browser
[
!
expectedActive
]
async
hasPseudoClass
=
>
{
let
area
=
content
.
document
.
getElementById
(
"
area
"
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
area
;
}
"
Page
has
loaded
"
)
;
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
{
return
area
.
matches
(
"
:
-
moz
-
window
-
inactive
"
)
=
=
hasPseudoClass
;
}
Window
is
considered
{
hasPseudoClass
?
"
inactive
"
:
"
active
"
}
)
;
return
content
.
getComputedStyle
(
area
)
.
backgroundColor
;
}
)
;
}
