add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
groupedhistory
.
enabled
"
true
]
[
"
dom
.
linkPrerender
.
enabled
"
true
]
]
}
)
;
function
awaitProcessChange
(
browser
)
{
return
new
Promise
(
resolve
=
>
{
browser
.
addEventListener
(
"
BrowserChangedProcess
"
function
(
e
)
{
ok
(
true
"
The
browser
changed
process
!
"
)
;
resolve
(
)
;
}
{
once
:
true
}
)
;
}
)
;
}
function
awaitTabClose
(
number
)
{
return
new
Promise
(
resolve
=
>
{
let
seen
=
0
;
gBrowser
.
tabContainer
.
addEventListener
(
"
TabClose
"
function
f
(
)
{
if
(
+
+
seen
=
=
number
)
{
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabClose
"
f
)
;
resolve
(
)
;
}
}
)
;
}
)
;
}
let
closed1
=
awaitTabClose
(
2
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
data
:
text
/
html
a
"
}
async
function
(
browser1
)
{
let
requestMade
=
new
Promise
(
resolve
=
>
{
browser1
.
messageManager
.
addMessageListener
(
"
Prerender
:
Request
"
function
f
(
)
{
browser1
.
messageManager
.
removeMessageListener
(
"
Prerender
:
Request
"
f
)
;
ok
(
true
"
Successfully
received
the
prerender
request
"
)
;
resolve
(
)
;
}
)
;
}
)
;
is
(
gBrowser
.
tabs
.
length
2
)
;
await
ContentTask
.
spawn
(
browser1
null
function
(
)
{
let
link
=
content
.
document
.
createElement
(
"
link
"
)
;
link
.
setAttribute
(
"
rel
"
"
prerender
"
)
;
link
.
setAttribute
(
"
href
"
"
data
:
text
/
html
b
"
)
;
content
.
document
.
body
.
appendChild
(
link
)
;
}
)
;
await
requestMade
;
is
(
gBrowser
.
tabs
.
length
3
)
;
}
)
;
await
closed1
;
is
(
gBrowser
.
tabs
.
length
1
"
The
new
tab
and
the
prerendered
'
tab
'
should
be
closed
"
)
;
let
closed2
=
awaitTabClose
(
2
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
data
:
text
/
html
a
"
}
async
function
(
browser1
)
{
let
tab2
=
gBrowser
.
loadOneTab
(
"
data
:
text
/
html
b
"
{
referrerPolicy
:
Ci
.
nsIHttpChannel
.
REFERRER_POLICY_UNSET
allowThirdPartyFixup
:
true
relatedToCurrent
:
true
isPrerendered
:
true
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab2
.
linkedBrowser
)
;
browser1
.
frameLoader
.
appendPartialSHistoryAndSwap
(
tab2
.
linkedBrowser
.
frameLoader
)
;
await
awaitProcessChange
(
browser1
)
;
}
)
;
await
closed2
;
is
(
gBrowser
.
tabs
.
length
1
"
The
new
tab
and
the
prerendered
'
tab
'
should
be
closed
"
)
;
}
)
;
