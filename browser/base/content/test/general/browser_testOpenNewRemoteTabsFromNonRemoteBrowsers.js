const
OPEN_LOCATION_PREF
=
"
browser
.
link
.
open_newwindow
"
;
const
NON_REMOTE_PAGE
=
"
about
:
welcomeback
"
;
const
{
PrivateBrowsingUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
sys
.
mjs
"
)
;
requestLongerTimeout
(
2
)
;
function
insertAndClickAnchor
(
browser
)
{
return
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
content
.
document
.
body
.
innerHTML
=
<
a
href
=
"
http
:
/
/
example
.
com
/
"
target
=
"
_blank
"
rel
=
"
opener
"
id
=
"
testAnchor
"
>
Open
a
window
<
/
a
>
;
let
element
=
content
.
document
.
getElementById
(
"
testAnchor
"
)
;
element
.
click
(
)
;
}
)
;
}
function
prepareNonRemoteBrowser
(
aWindow
browser
)
{
BrowserTestUtils
.
loadURIString
(
browser
NON_REMOTE_PAGE
)
;
return
BrowserTestUtils
.
browserLoaded
(
browser
)
;
}
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
OPEN_LOCATION_PREF
)
;
}
)
;
add_task
(
async
function
test_new_tab
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
skip_html_fragment_assertion
"
true
]
]
}
)
;
let
normalWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
remote
:
true
}
)
;
let
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
remote
:
true
private
:
true
}
)
;
for
(
let
testWindow
of
[
normalWindow
privateWindow
]
)
{
await
promiseWaitForFocus
(
testWindow
)
;
let
testBrowser
=
testWindow
.
gBrowser
.
selectedBrowser
;
info
(
"
Preparing
non
-
remote
browser
"
)
;
await
prepareNonRemoteBrowser
(
testWindow
testBrowser
)
;
info
(
"
Non
-
remote
browser
prepared
"
)
;
let
tabOpenEventPromise
=
waitForNewTabEvent
(
testWindow
.
gBrowser
)
;
await
insertAndClickAnchor
(
testBrowser
)
;
let
newTab
=
(
await
tabOpenEventPromise
)
.
target
;
await
promiseTabLoadEvent
(
newTab
)
;
ok
(
newTab
.
linkedBrowser
.
isRemoteBrowser
"
The
opened
browser
never
became
remote
.
"
)
;
testWindow
.
gBrowser
.
removeTab
(
newTab
)
;
}
normalWindow
.
close
(
)
;
privateWindow
.
close
(
)
;
}
)
;
add_task
(
async
function
test_new_window
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
security
.
skip_html_fragment_assertion
"
true
]
]
}
)
;
let
normalWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
remote
:
true
}
true
)
;
let
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
remote
:
true
private
:
true
}
true
)
;
Services
.
prefs
.
setIntPref
(
OPEN_LOCATION_PREF
Ci
.
nsIBrowserDOMWindow
.
OPEN_NEWWINDOW
)
;
for
(
let
testWindow
of
[
normalWindow
privateWindow
]
)
{
await
promiseWaitForFocus
(
testWindow
)
;
let
testBrowser
=
testWindow
.
gBrowser
.
selectedBrowser
;
await
prepareNonRemoteBrowser
(
testWindow
testBrowser
)
;
await
insertAndClickAnchor
(
testBrowser
)
;
let
[
newWindow
]
=
await
TestUtils
.
topicObserved
(
"
browser
-
delayed
-
startup
-
finished
"
)
;
is
(
PrivateBrowsingUtils
.
isWindowPrivate
(
testWindow
)
PrivateBrowsingUtils
.
isWindowPrivate
(
newWindow
)
"
Private
browsing
state
of
new
window
does
not
match
the
original
!
"
)
;
let
newTab
=
newWindow
.
gBrowser
.
selectedTab
;
await
promiseTabLoadEvent
(
newTab
)
;
ok
(
newTab
.
linkedBrowser
.
isRemoteBrowser
"
The
opened
browser
never
became
remote
.
"
)
;
newWindow
.
close
(
)
;
}
normalWindow
.
close
(
)
;
privateWindow
.
close
(
)
;
}
)
;
