XPCOMUtils
.
defineLazyModuleGetter
(
this
"
FormHistory
"
"
resource
:
/
/
gre
/
modules
/
FormHistory
.
jsm
"
)
;
add_task
(
function
*
test
(
)
{
yield
new
Promise
(
(
resolve
reject
)
=
>
{
FormHistory
.
update
(
{
op
:
"
remove
"
}
{
handleError
(
error
)
{
reject
(
error
)
;
}
handleCompletion
(
reason
)
{
if
(
!
reason
)
{
resolve
(
)
;
}
else
{
reject
(
)
;
}
}
}
)
;
}
)
;
let
prefService
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIPrefService
)
;
let
tempScope
=
{
}
;
Cc
[
"
mozilla
.
org
/
moz
/
jssubscript
-
loader
;
1
"
]
.
getService
(
Ci
.
mozIJSSubScriptLoader
)
.
loadSubScript
(
"
chrome
:
/
/
browser
/
content
/
sanitize
.
js
"
tempScope
)
;
let
Sanitizer
=
tempScope
.
Sanitizer
;
let
s
=
new
Sanitizer
(
)
;
s
.
prefDomain
=
"
privacy
.
cpd
.
"
;
let
prefBranch
=
prefService
.
getBranch
(
s
.
prefDomain
)
;
prefBranch
.
setBoolPref
(
"
cache
"
false
)
;
prefBranch
.
setBoolPref
(
"
cookies
"
false
)
;
prefBranch
.
setBoolPref
(
"
downloads
"
false
)
;
prefBranch
.
setBoolPref
(
"
formdata
"
true
)
;
prefBranch
.
setBoolPref
(
"
history
"
false
)
;
prefBranch
.
setBoolPref
(
"
offlineApps
"
false
)
;
prefBranch
.
setBoolPref
(
"
passwords
"
false
)
;
prefBranch
.
setBoolPref
(
"
sessions
"
false
)
;
prefBranch
.
setBoolPref
(
"
siteSettings
"
false
)
;
yield
s
.
sanitize
(
)
;
ok
(
!
gFindBar
.
hasTransactions
"
pre
-
test
baseline
for
sanitizer
"
)
;
gFindBar
.
getElement
(
"
findbar
-
textbox
"
)
.
value
=
"
m
"
;
ok
(
gFindBar
.
hasTransactions
"
formdata
can
be
cleared
after
input
"
)
;
yield
s
.
sanitize
(
)
;
is
(
gFindBar
.
getElement
(
"
findbar
-
textbox
"
)
.
value
"
"
"
findBar
textbox
should
be
empty
after
sanitize
"
)
;
ok
(
!
gFindBar
.
hasTransactions
"
No
transactions
after
sanitize
"
)
;
}
)
;
