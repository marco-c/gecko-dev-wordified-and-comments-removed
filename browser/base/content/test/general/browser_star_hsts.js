var
secureURL
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
general
/
browser_star_hsts
.
sjs
"
;
var
unsecureURL
=
"
http
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
general
/
browser_star_hsts
.
sjs
"
;
add_task
(
async
function
test_star_redirect
(
)
{
registerCleanupFunction
(
async
(
)
=
>
{
let
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
sss
.
removeState
(
Ci
.
nsISiteSecurityService
.
HEADER_HSTS
NetUtil
.
newURI
(
"
http
:
/
/
example
.
com
/
"
)
0
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
let
tab
=
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
await
promiseTabLoadEvent
(
tab
secureURL
secureURL
)
;
await
promiseTabLoadEvent
(
tab
unsecureURL
secureURL
)
;
await
promiseStarState
(
BookmarkingUI
.
STATUS_UNSTARRED
)
;
let
bookmarkPanel
=
document
.
getElementById
(
"
editBookmarkPanel
"
)
;
let
shownPromise
=
promisePopupShown
(
bookmarkPanel
)
;
BookmarkingUI
.
star
.
click
(
)
;
await
shownPromise
;
is
(
BookmarkingUI
.
status
BookmarkingUI
.
STATUS_STARRED
"
The
star
is
starred
"
)
;
}
)
;
function
promiseStarState
(
aValue
)
{
return
new
Promise
(
resolve
=
>
{
let
expectedStatus
=
aValue
?
BookmarkingUI
.
STATUS_STARRED
:
BookmarkingUI
.
STATUS_UNSTARRED
;
(
function
checkState
(
)
{
if
(
BookmarkingUI
.
status
=
=
BookmarkingUI
.
STATUS_UPDATING
|
|
BookmarkingUI
.
status
!
=
expectedStatus
)
{
info
(
"
Waiting
for
star
button
change
.
"
)
;
setTimeout
(
checkState
1000
)
;
}
else
{
resolve
(
)
;
}
}
)
(
)
;
}
)
;
}
function
promiseTabLoadEvent
(
aTab
aURL
aFinalURL
)
{
if
(
!
aFinalURL
)
aFinalURL
=
aURL
;
info
(
"
Wait
for
load
tab
event
"
)
;
BrowserTestUtils
.
loadURI
(
aTab
.
linkedBrowser
aURL
)
;
return
BrowserTestUtils
.
browserLoaded
(
aTab
.
linkedBrowser
false
aFinalURL
)
;
}
