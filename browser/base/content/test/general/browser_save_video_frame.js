const
VIDEO_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
base
/
content
/
test
/
general
/
web_video
.
html
"
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
toolkit
/
content
/
tests
/
browser
/
common
/
mockTransfer
.
js
"
this
)
;
function
createTemporarySaveDirectory
(
)
{
let
saveDir
=
Services
.
dirsvc
.
get
(
"
TmpD
"
Ci
.
nsIFile
)
;
saveDir
.
append
(
"
testsavedir
"
)
;
if
(
!
saveDir
.
exists
(
)
)
saveDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
return
saveDir
;
}
function
waitForTransferComplete
(
)
{
return
new
Promise
(
(
resolve
)
=
>
{
mockTransferCallback
=
(
)
=
>
{
ok
(
true
"
Transfer
completed
"
)
;
resolve
(
)
;
}
;
}
)
;
}
function
rightClickVideo
(
browser
)
{
let
frame_script
=
(
)
=
>
{
const
Ci
=
Components
.
interfaces
;
let
utils
=
content
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
let
document
=
content
.
document
;
let
video
=
document
.
getElementById
(
"
video1
"
)
;
let
rect
=
video
.
getBoundingClientRect
(
)
;
let
left
=
rect
.
left
+
(
rect
.
width
/
2
)
;
let
top
=
rect
.
top
+
(
rect
.
height
/
2
)
;
utils
.
sendMouseEvent
(
"
contextmenu
"
left
top
2
1
0
)
;
}
;
let
mm
=
browser
.
messageManager
;
mm
.
loadFrameScript
(
"
data
:
(
"
+
frame_script
.
toString
(
)
+
"
)
(
)
;
"
true
)
;
}
add_task
(
async
function
(
)
{
let
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
window
)
;
let
destDir
=
createTemporarySaveDirectory
(
)
;
let
destFile
=
destDir
.
clone
(
)
;
MockFilePicker
.
displayDirectory
=
destDir
;
MockFilePicker
.
showCallback
=
function
(
fp
)
{
destFile
.
append
(
fp
.
defaultString
)
;
MockFilePicker
.
setFiles
(
[
destFile
]
)
;
MockFilePicker
.
filterIndex
=
1
;
}
;
mockTransferRegisterer
.
register
(
)
;
registerCleanupFunction
(
function
(
)
{
mockTransferRegisterer
.
unregister
(
)
;
MockFilePicker
.
cleanup
(
)
;
destDir
.
remove
(
true
)
;
}
)
;
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
gBrowser
.
selectedTab
=
tab
;
let
browser
=
tab
.
linkedBrowser
;
info
(
"
Loading
video
tab
"
)
;
await
promiseTabLoadEvent
(
tab
VIDEO_URL
)
;
info
(
"
Video
tab
loaded
.
"
)
;
let
context
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
popupPromise
=
promisePopupShown
(
context
)
;
info
(
"
Synthesizing
right
-
click
on
video
element
"
)
;
rightClickVideo
(
browser
)
;
info
(
"
Waiting
for
popup
to
fire
popupshown
.
"
)
;
await
popupPromise
;
info
(
"
Popup
fired
popupshown
"
)
;
let
saveSnapshotCommand
=
document
.
getElementById
(
"
context
-
video
-
saveimage
"
)
;
let
promiseTransfer
=
waitForTransferComplete
(
)
;
info
(
"
Firing
save
snapshot
command
"
)
;
saveSnapshotCommand
.
doCommand
(
)
;
context
.
hidePopup
(
)
;
info
(
"
Waiting
for
transfer
completion
"
)
;
await
promiseTransfer
;
info
(
"
Transfer
complete
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
