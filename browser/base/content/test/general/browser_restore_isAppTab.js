const
{
TabStateFlusher
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
sessionstore
/
TabStateFlusher
.
jsm
"
)
;
const
DUMMY
=
"
http
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
general
/
dummy_page
.
html
"
;
function
frameScript
(
)
{
addMessageListener
(
"
Test
:
GetIsAppTab
"
function
(
)
{
sendAsyncMessage
(
"
Test
:
IsAppTab
"
{
isAppTab
:
docShell
.
isAppTab
}
)
;
}
)
;
}
function
loadFrameScript
(
browser
)
{
browser
.
messageManager
.
loadFrameScript
(
"
data
:
(
"
+
frameScript
.
toString
(
)
+
"
)
(
)
;
"
true
)
;
}
function
isBrowserAppTab
(
browser
)
{
return
new
Promise
(
resolve
=
>
{
function
listener
(
{
data
}
)
{
browser
.
messageManager
.
removeMessageListener
(
"
Test
:
IsAppTab
"
listener
)
;
resolve
(
data
.
isAppTab
)
;
}
executeSoon
(
function
(
)
{
browser
.
messageManager
.
addMessageListener
(
"
Test
:
IsAppTab
"
listener
)
;
browser
.
messageManager
.
sendAsyncMessage
(
"
Test
:
GetIsAppTab
"
)
;
}
)
;
}
)
;
}
var
restart
=
async
function
(
browser
)
{
if
(
!
browser
.
isRemoteBrowser
)
{
return
;
}
await
TabStateFlusher
.
flush
(
browser
)
;
await
BrowserTestUtils
.
crashBrowser
(
browser
)
;
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
SessionStore
.
reviveCrashedTab
(
tab
)
;
await
promiseTabLoaded
(
tab
)
;
}
;
add_task
(
async
function
navigate
(
)
{
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
robots
"
)
;
let
browser
=
tab
.
linkedBrowser
;
gBrowser
.
selectedTab
=
tab
;
await
BrowserTestUtils
.
browserStopped
(
gBrowser
)
;
loadFrameScript
(
browser
)
;
let
isAppTab
=
await
isBrowserAppTab
(
browser
)
;
ok
(
!
isAppTab
"
Docshell
shouldn
'
t
think
it
is
an
app
tab
"
)
;
gBrowser
.
pinTab
(
tab
)
;
isAppTab
=
await
isBrowserAppTab
(
browser
)
;
ok
(
isAppTab
"
Docshell
should
think
it
is
an
app
tab
"
)
;
BrowserTestUtils
.
loadURI
(
gBrowser
DUMMY
)
;
await
BrowserTestUtils
.
browserStopped
(
gBrowser
)
;
loadFrameScript
(
browser
)
;
isAppTab
=
await
isBrowserAppTab
(
browser
)
;
ok
(
isAppTab
"
Docshell
should
think
it
is
an
app
tab
"
)
;
gBrowser
.
unpinTab
(
tab
)
;
isAppTab
=
await
isBrowserAppTab
(
browser
)
;
ok
(
!
isAppTab
"
Docshell
shouldn
'
t
think
it
is
an
app
tab
"
)
;
gBrowser
.
pinTab
(
tab
)
;
isAppTab
=
await
isBrowserAppTab
(
browser
)
;
ok
(
isAppTab
"
Docshell
should
think
it
is
an
app
tab
"
)
;
BrowserTestUtils
.
loadURI
(
gBrowser
"
about
:
robots
"
)
;
await
BrowserTestUtils
.
browserStopped
(
gBrowser
)
;
loadFrameScript
(
browser
)
;
isAppTab
=
await
isBrowserAppTab
(
browser
)
;
ok
(
isAppTab
"
Docshell
should
think
it
is
an
app
tab
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
crash
(
)
{
if
(
!
gMultiProcessBrowser
|
|
!
AppConstants
.
MOZ_CRASHREPORTER
)
{
return
;
}
let
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
DUMMY
)
;
let
browser
=
tab
.
linkedBrowser
;
gBrowser
.
selectedTab
=
tab
;
await
BrowserTestUtils
.
browserStopped
(
gBrowser
)
;
loadFrameScript
(
browser
)
;
let
isAppTab
=
await
isBrowserAppTab
(
browser
)
;
ok
(
!
isAppTab
"
Docshell
shouldn
'
t
think
it
is
an
app
tab
"
)
;
gBrowser
.
pinTab
(
tab
)
;
isAppTab
=
await
isBrowserAppTab
(
browser
)
;
ok
(
isAppTab
"
Docshell
should
think
it
is
an
app
tab
"
)
;
await
restart
(
browser
)
;
loadFrameScript
(
browser
)
;
isAppTab
=
await
isBrowserAppTab
(
browser
)
;
ok
(
isAppTab
"
Docshell
should
think
it
is
an
app
tab
"
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
