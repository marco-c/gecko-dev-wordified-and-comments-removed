"
use
strict
"
;
var
{
TabCrashReporter
}
=
Cu
.
import
(
"
resource
:
/
/
/
modules
/
ContentCrashReporters
.
jsm
"
)
;
const
SERVER_URL
=
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
crashreporter
/
test
/
browser
/
crashreport
.
sjs
"
;
const
PAGE
=
"
data
:
text
/
html
<
html
>
<
body
>
A
%
20regular
%
20everyday
%
20normal
%
20page
.
"
;
const
COMMENTS
=
"
Here
'
s
my
test
comment
!
"
;
const
EMAIL
=
"
foo
privacy
.
com
"
;
function
getPropertyBagValue
(
bag
key
)
{
try
{
let
val
=
bag
.
getProperty
(
key
)
;
return
val
;
}
catch
(
e
if
e
.
result
=
=
Cr
.
NS_ERROR_FAILURE
)
{
}
return
null
;
}
function
promiseCrashReport
(
expectedExtra
)
{
return
Task
.
spawn
(
function
*
(
)
{
info
(
"
Starting
wait
on
crash
-
report
-
status
"
)
;
let
[
subject
data
]
=
yield
TestUtils
.
topicObserved
(
"
crash
-
report
-
status
"
(
subject
data
)
=
>
{
return
data
=
=
"
success
"
;
}
)
;
info
(
"
Topic
observed
!
"
)
;
if
(
!
(
subject
instanceof
Ci
.
nsIPropertyBag2
)
)
{
throw
new
Error
(
"
Subject
was
not
a
Ci
.
nsIPropertyBag2
"
)
;
}
let
remoteID
=
getPropertyBagValue
(
subject
"
serverCrashID
"
)
;
if
(
!
remoteID
)
{
throw
new
Error
(
"
Report
should
have
a
server
ID
"
)
;
}
let
file
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsILocalFile
)
;
file
.
initWithPath
(
Services
.
crashmanager
.
_submittedDumpsDir
)
;
file
.
append
(
remoteID
+
"
.
txt
"
)
;
if
(
!
file
.
exists
(
)
)
{
throw
new
Error
(
"
Report
should
have
been
received
by
the
server
"
)
;
}
file
.
remove
(
false
)
;
let
extra
=
getPropertyBagValue
(
subject
"
extra
"
)
;
if
(
!
(
extra
instanceof
Ci
.
nsIPropertyBag2
)
)
{
throw
new
Error
(
"
extra
was
not
a
Ci
.
nsIPropertyBag2
"
)
;
}
info
(
"
Iterating
crash
report
extra
keys
"
)
;
let
enumerator
=
extra
.
enumerator
;
while
(
enumerator
.
hasMoreElements
(
)
)
{
let
key
=
enumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIProperty
)
.
name
;
let
value
=
extra
.
getPropertyAsAString
(
key
)
;
if
(
key
in
expectedExtra
)
{
is
(
value
expectedExtra
[
key
]
Crash
report
had
the
right
extra
value
for
{
key
}
)
;
}
}
}
)
;
}
add_task
(
function
*
setup
(
)
{
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIEnvironment
)
;
let
noReport
=
env
.
get
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
)
;
let
serverUrl
=
env
.
get
(
"
MOZ_CRASHREPORTER_URL
"
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
"
"
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_URL
"
SERVER_URL
)
;
registerCleanupFunction
(
function
(
)
{
env
.
set
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
noReport
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_URL
"
serverUrl
)
;
}
)
;
}
)
;
function
crashTabTestHelper
(
fieldValues
expectedExtra
)
{
return
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE
}
function
*
(
browser
)
{
let
prefs
=
TabCrashReporter
.
prefs
;
let
originalSendReport
=
prefs
.
getBoolPref
(
"
sendReport
"
)
;
let
originalEmailMe
=
prefs
.
getBoolPref
(
"
emailMe
"
)
;
let
originalIncludeURL
=
prefs
.
getBoolPref
(
"
includeURL
"
)
;
let
originalEmail
=
prefs
.
getCharPref
(
"
email
"
)
;
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
yield
BrowserTestUtils
.
crashBrowser
(
browser
)
;
let
doc
=
browser
.
contentDocument
;
let
comments
=
doc
.
getElementById
(
"
comments
"
)
;
let
email
=
doc
.
getElementById
(
"
email
"
)
;
let
emailMe
=
doc
.
getElementById
(
"
emailMe
"
)
;
let
includeURL
=
doc
.
getElementById
(
"
includeURL
"
)
;
if
(
fieldValues
.
hasOwnProperty
(
"
comments
"
)
)
{
comments
.
value
=
fieldValues
.
comments
;
}
if
(
fieldValues
.
hasOwnProperty
(
"
email
"
)
)
{
email
.
value
=
fieldValues
.
email
;
}
if
(
fieldValues
.
hasOwnProperty
(
"
emailMe
"
)
)
{
emailMe
.
checked
=
fieldValues
.
emailMe
;
}
if
(
fieldValues
.
hasOwnProperty
(
"
includeURL
"
)
)
{
includeURL
.
checked
=
fieldValues
.
includeURL
;
}
let
crashReport
=
promiseCrashReport
(
expectedExtra
)
;
let
restoreTab
=
browser
.
contentDocument
.
getElementById
(
"
restoreTab
"
)
;
restoreTab
.
click
(
)
;
yield
BrowserTestUtils
.
waitForEvent
(
tab
"
SSTabRestored
"
)
;
yield
crashReport
;
prefs
.
setBoolPref
(
"
sendReport
"
originalSendReport
)
;
prefs
.
setBoolPref
(
"
emailMe
"
originalEmailMe
)
;
prefs
.
setBoolPref
(
"
includeURL
"
originalIncludeURL
)
;
prefs
.
setCharPref
(
"
email
"
originalEmail
)
;
}
)
;
}
add_task
(
function
*
test_default
(
)
{
yield
crashTabTestHelper
(
{
}
{
"
Comments
"
:
"
"
"
URL
"
:
"
"
"
Email
"
:
"
"
}
)
;
}
)
;
add_task
(
function
*
test_just_a_comment
(
)
{
yield
crashTabTestHelper
(
{
comments
:
COMMENTS
}
{
"
Comments
"
:
COMMENTS
"
URL
"
:
"
"
"
Email
"
:
"
"
}
)
;
}
)
;
add_task
(
function
*
test_no_email
(
)
{
yield
crashTabTestHelper
(
{
email
:
EMAIL
emailMe
:
false
}
{
"
Comments
"
:
"
"
"
URL
"
:
"
"
"
Email
"
:
"
"
}
)
;
}
)
;
add_task
(
function
*
test_yes_email
(
)
{
yield
crashTabTestHelper
(
{
email
:
EMAIL
emailMe
:
true
}
{
"
Comments
"
:
"
"
"
URL
"
:
"
"
"
Email
"
:
EMAIL
}
)
;
}
)
;
add_task
(
function
*
test_send_URL
(
)
{
yield
crashTabTestHelper
(
{
includeURL
:
true
}
{
"
Comments
"
:
"
"
"
URL
"
:
PAGE
"
Email
"
:
"
"
}
)
;
}
)
;
add_task
(
function
*
test_send_all
(
)
{
yield
crashTabTestHelper
(
{
includeURL
:
true
emailMe
:
true
email
:
EMAIL
comments
:
COMMENTS
}
{
"
Comments
"
:
COMMENTS
"
URL
"
:
PAGE
"
Email
"
:
EMAIL
}
)
;
}
)
;
add_task
(
function
*
test_clear_email
(
)
{
return
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE
}
function
*
(
browser
)
{
let
prefs
=
TabCrashReporter
.
prefs
;
let
originalSendReport
=
prefs
.
getBoolPref
(
"
sendReport
"
)
;
let
originalEmailMe
=
prefs
.
getBoolPref
(
"
emailMe
"
)
;
let
originalIncludeURL
=
prefs
.
getBoolPref
(
"
includeURL
"
)
;
let
originalEmail
=
prefs
.
getCharPref
(
"
email
"
)
;
prefs
.
setCharPref
(
"
email
"
EMAIL
)
;
prefs
.
setBoolPref
(
"
emailMe
"
true
)
;
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
yield
BrowserTestUtils
.
crashBrowser
(
browser
)
;
let
doc
=
browser
.
contentDocument
;
let
emailMe
=
doc
.
getElementById
(
"
emailMe
"
)
;
emailMe
.
checked
=
false
;
let
crashReport
=
promiseCrashReport
(
{
Email
:
"
"
}
)
;
let
restoreTab
=
browser
.
contentDocument
.
getElementById
(
"
restoreTab
"
)
;
restoreTab
.
click
(
)
;
yield
BrowserTestUtils
.
waitForEvent
(
tab
"
SSTabRestored
"
)
;
yield
crashReport
;
is
(
prefs
.
getCharPref
(
"
email
"
)
"
"
"
No
email
address
should
be
stored
"
)
;
prefs
.
setBoolPref
(
"
sendReport
"
originalSendReport
)
;
prefs
.
setBoolPref
(
"
emailMe
"
originalEmailMe
)
;
prefs
.
setBoolPref
(
"
includeURL
"
originalIncludeURL
)
;
prefs
.
setCharPref
(
"
email
"
originalEmail
)
;
}
)
;
}
)
;
