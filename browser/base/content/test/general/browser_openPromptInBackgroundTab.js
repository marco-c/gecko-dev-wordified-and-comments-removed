"
use
strict
"
;
const
ROOT
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
example
.
com
/
"
)
;
let
pageWithAlert
=
ROOT
+
"
openPromptOffTimeout
.
html
"
;
registerCleanupFunction
(
function
(
)
{
Services
.
perms
.
removeAll
(
makeURI
(
pageWithAlert
)
)
;
}
)
;
add_task
(
function
*
(
)
{
yield
pushPrefs
(
[
"
browser
.
tabs
.
dontfocusfordialogs
"
true
]
)
;
let
firstTab
=
gBrowser
.
selectedTab
;
let
openedTab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
pageWithAlert
true
)
;
let
openedTabGotAttentionPromise
=
BrowserTestUtils
.
waitForAttribute
(
"
attention
"
openedTab
"
true
"
)
;
yield
BrowserTestUtils
.
switchTab
(
gBrowser
firstTab
)
;
yield
openedTabGotAttentionPromise
;
is
(
openedTab
.
getAttribute
(
"
attention
"
)
"
true
"
"
Tab
with
alert
should
have
'
attention
'
attribute
.
"
)
;
ok
(
!
openedTab
.
selected
"
Tab
with
alert
should
not
be
selected
"
)
;
yield
BrowserTestUtils
.
switchTab
(
gBrowser
openedTab
)
;
let
prompts
=
openedTab
.
linkedBrowser
.
parentNode
.
querySelectorAll
(
"
tabmodalprompt
"
)
;
is
(
prompts
.
length
1
"
There
should
be
1
prompt
"
)
;
let
ourPrompt
=
prompts
[
0
]
;
let
row
=
ourPrompt
.
querySelector
(
"
row
"
)
;
ok
(
row
"
Should
have
found
the
row
with
our
checkbox
"
)
;
let
checkbox
=
row
.
querySelector
(
"
checkbox
[
label
*
=
'
example
.
com
'
]
"
)
;
ok
(
checkbox
"
The
checkbox
should
be
there
"
)
;
ok
(
!
checkbox
.
checked
"
Checkbox
shouldn
'
t
be
checked
"
)
;
checkbox
.
checked
=
true
;
ourPrompt
.
onButtonClick
(
0
)
;
let
ps
=
Services
.
perms
;
is
(
ps
.
ALLOW_ACTION
ps
.
testPermission
(
makeURI
(
pageWithAlert
)
"
focus
-
tab
-
by
-
prompt
"
)
"
Tab
switching
should
now
be
allowed
"
)
;
let
openedTabSelectedPromise
=
BrowserTestUtils
.
waitForAttribute
(
"
selected
"
openedTab
"
true
"
)
;
yield
BrowserTestUtils
.
switchTab
(
gBrowser
firstTab
)
;
yield
openedTabSelectedPromise
;
ok
(
openedTab
.
selected
"
Ta
-
dah
the
other
tab
should
now
be
selected
again
!
"
)
;
yield
BrowserTestUtils
.
removeTab
(
openedTab
)
;
}
)
;
