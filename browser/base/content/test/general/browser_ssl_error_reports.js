"
use
strict
"
;
const
URL_REPORTS
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
general
/
ssl_error_reports
.
sjs
?
"
;
const
URL_BAD_CHAIN
=
"
https
:
/
/
badchain
.
include
-
subdomains
.
pinning
.
example
.
com
/
"
;
const
URL_NO_CERT
=
"
https
:
/
/
fail
-
handshake
.
example
.
com
/
"
;
const
URL_BAD_CERT
=
"
https
:
/
/
expired
.
example
.
com
/
"
;
const
URL_BAD_STS_CERT
=
"
https
:
/
/
badchain
.
include
-
subdomains
.
pinning
.
example
.
com
:
443
/
"
;
const
ROOT
=
getRootDirectory
(
gTestPath
)
;
const
PREF_REPORT_ENABLED
=
"
security
.
ssl
.
errorReporting
.
enabled
"
;
const
PREF_REPORT_AUTOMATIC
=
"
security
.
ssl
.
errorReporting
.
automatic
"
;
const
PREF_REPORT_URL
=
"
security
.
ssl
.
errorReporting
.
url
"
;
SimpleTest
.
requestCompleteLog
(
)
;
Services
.
prefs
.
setIntPref
(
"
security
.
cert_pinning
.
enforcement_level
"
2
)
;
function
cleanup
(
)
{
Services
.
prefs
.
clearUserPref
(
PREF_REPORT_ENABLED
)
;
Services
.
prefs
.
clearUserPref
(
PREF_REPORT_AUTOMATIC
)
;
Services
.
prefs
.
clearUserPref
(
PREF_REPORT_URL
)
;
}
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
security
.
cert_pinning
.
enforcement_level
"
)
;
cleanup
(
)
;
}
)
;
add_task
(
function
*
test_send_report_neterror
(
)
{
yield
testSendReportAutomatically
(
URL_BAD_CHAIN
"
succeed
"
"
neterror
"
)
;
yield
testSendReportAutomatically
(
URL_NO_CERT
"
nocert
"
"
neterror
"
)
;
yield
testSetAutomatic
(
URL_NO_CERT
"
nocert
"
"
neterror
"
)
;
}
)
;
add_task
(
function
*
test_send_report_certerror
(
)
{
yield
testSendReportAutomatically
(
URL_BAD_CERT
"
badcert
"
"
certerror
"
)
;
yield
testSetAutomatic
(
URL_BAD_CERT
"
badcert
"
"
certerror
"
)
;
}
)
;
add_task
(
function
*
test_send_disabled
(
)
{
Services
.
prefs
.
setBoolPref
(
PREF_REPORT_ENABLED
false
)
;
Services
.
prefs
.
setBoolPref
(
PREF_REPORT_AUTOMATIC
true
)
;
Services
.
prefs
.
setCharPref
(
PREF_REPORT_URL
"
https
:
/
/
example
.
com
/
invalid
"
)
;
yield
testSendReportDisabled
(
URL_NO_CERT
"
neterror
"
)
;
yield
testSendReportDisabled
(
URL_BAD_CERT
"
certerror
"
)
;
Services
.
prefs
.
setBoolPref
(
PREF_REPORT_AUTOMATIC
false
)
;
yield
testSendReportDisabled
(
URL_NO_CERT
"
neterror
"
)
;
yield
testSendReportDisabled
(
URL_BAD_CERT
"
certerror
"
)
;
cleanup
(
)
;
}
)
;
function
*
testSendReportAutomatically
(
testURL
suffix
errorURISuffix
)
{
Services
.
prefs
.
setBoolPref
(
PREF_REPORT_ENABLED
true
)
;
Services
.
prefs
.
setBoolPref
(
PREF_REPORT_AUTOMATIC
true
)
;
Services
.
prefs
.
setCharPref
(
PREF_REPORT_URL
URL_REPORTS
+
suffix
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
let
browser
=
tab
.
linkedBrowser
;
let
promiseStatus
=
createReportResponseStatusPromise
(
URL_REPORTS
+
suffix
)
;
browser
.
loadURI
(
testURL
)
;
yield
promiseErrorPageLoaded
(
browser
)
;
ok
(
!
isErrorStatus
(
yield
promiseStatus
)
"
SSL
error
report
submitted
successfully
"
)
;
yield
checkErrorPage
(
browser
errorURISuffix
)
;
gBrowser
.
removeTab
(
tab
)
;
cleanup
(
)
;
}
;
function
*
testSetAutomatic
(
testURL
suffix
errorURISuffix
)
{
Services
.
prefs
.
setBoolPref
(
PREF_REPORT_ENABLED
true
)
;
Services
.
prefs
.
setBoolPref
(
PREF_REPORT_AUTOMATIC
false
)
;
Services
.
prefs
.
setCharPref
(
PREF_REPORT_URL
URL_REPORTS
+
suffix
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
let
browser
=
tab
.
linkedBrowser
;
browser
.
loadURI
(
testURL
)
;
yield
promiseErrorPageLoaded
(
browser
)
;
yield
checkErrorPage
(
browser
errorURISuffix
)
;
let
statusPromise
=
createReportResponseStatusPromise
(
URL_REPORTS
+
suffix
)
;
yield
ContentTask
.
spawn
(
browser
null
function
*
(
)
{
content
.
document
.
getElementById
(
"
automaticallyReportInFuture
"
)
.
click
(
)
;
}
)
;
yield
statusPromise
;
let
isAutomaticReportingEnabled
=
(
)
=
>
Services
.
prefs
.
getBoolPref
(
PREF_REPORT_AUTOMATIC
)
;
ok
(
isAutomaticReportingEnabled
(
)
"
automatic
SSL
report
submission
enabled
"
)
;
yield
ContentTask
.
spawn
(
browser
null
function
*
(
)
{
content
.
document
.
getElementById
(
"
automaticallyReportInFuture
"
)
.
click
(
)
;
}
)
;
ok
(
!
isAutomaticReportingEnabled
(
)
"
automatic
SSL
report
submission
disabled
"
)
;
gBrowser
.
removeTab
(
tab
)
;
cleanup
(
)
;
}
function
*
testSendReportDisabled
(
testURL
errorURISuffix
)
{
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
let
browser
=
tab
.
linkedBrowser
;
browser
.
loadURI
(
testURL
)
;
yield
promiseErrorPageLoaded
(
browser
)
;
yield
checkErrorPage
(
browser
errorURISuffix
)
;
let
hidden
=
yield
ContentTask
.
spawn
(
browser
null
function
*
(
)
{
let
section
=
content
.
document
.
getElementById
(
"
certificateErrorReporting
"
)
;
return
content
.
getComputedStyle
(
section
)
.
display
=
=
"
none
"
;
}
)
;
ok
(
hidden
"
error
reporting
section
should
be
hidden
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
function
isErrorStatus
(
status
)
{
return
status
<
200
|
|
status
>
=
300
;
}
function
createReportResponseStatusPromise
(
expectedURI
)
{
return
new
Promise
(
resolve
=
>
{
let
observer
=
(
subject
topic
data
)
=
>
{
subject
.
QueryInterface
(
Ci
.
nsIHttpChannel
)
;
let
requestURI
=
subject
.
URI
.
spec
;
if
(
requestURI
=
=
expectedURI
)
{
Services
.
obs
.
removeObserver
(
observer
"
http
-
on
-
examine
-
response
"
)
;
resolve
(
subject
.
responseStatus
)
;
}
}
;
Services
.
obs
.
addObserver
(
observer
"
http
-
on
-
examine
-
response
"
false
)
;
}
)
;
}
function
checkErrorPage
(
browser
suffix
)
{
return
ContentTask
.
spawn
(
browser
null
function
*
(
)
{
return
content
.
document
.
documentURI
;
}
)
.
then
(
uri
=
>
{
ok
(
uri
.
startsWith
(
about
:
{
suffix
}
)
"
correct
error
page
loaded
"
)
;
}
)
;
}
