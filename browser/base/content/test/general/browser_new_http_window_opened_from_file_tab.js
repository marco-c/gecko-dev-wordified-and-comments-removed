const
TEST_FILE
=
"
file_with_link_to_http
.
html
"
;
const
TEST_HTTP
=
"
http
:
/
/
example
.
org
/
"
;
add_task
(
async
function
(
)
{
let
dir
=
getChromeDir
(
getResolvedURI
(
gTestPath
)
)
;
dir
.
append
(
TEST_FILE
)
;
const
uriString
=
Services
.
io
.
newFileURI
(
dir
)
.
spec
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
uriString
)
;
registerCleanupFunction
(
async
function
(
)
{
await
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
let
browser
=
tab
.
linkedBrowser
;
Services
.
prefs
.
setIntPref
(
"
browser
.
link
.
open_newwindow
"
2
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
link
.
open_newwindow
"
)
;
}
)
;
let
promiseNewWindow
=
BrowserTestUtils
.
waitForNewWindow
(
true
TEST_HTTP
)
;
await
ContentTask
.
spawn
(
browser
TEST_HTTP
uri
=
>
{
content
.
open
(
uri
"
_blank
"
)
;
}
)
;
let
win
=
await
promiseNewWindow
;
registerCleanupFunction
(
async
function
(
)
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
ok
(
win
"
Check
that
an
http
window
loaded
when
using
window
.
open
.
"
)
;
ok
(
win
.
menubar
.
visible
"
Check
that
the
menu
bar
on
the
new
window
is
visible
.
"
)
;
ok
(
win
.
toolbar
.
visible
"
Check
that
the
tool
bar
on
the
new
window
is
visible
.
"
)
;
promiseNewWindow
=
BrowserTestUtils
.
waitForNewWindow
(
true
TEST_HTTP
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
linkToExample
"
{
}
browser
)
;
let
win2
=
await
promiseNewWindow
;
registerCleanupFunction
(
async
function
(
)
{
await
BrowserTestUtils
.
closeWindow
(
win2
)
;
}
)
;
ok
(
win2
"
Check
that
an
http
window
loaded
when
using
link
.
"
)
;
ok
(
win2
.
menubar
.
visible
"
Check
that
the
menu
bar
on
the
new
window
is
visible
.
"
)
;
ok
(
win2
.
toolbar
.
visible
"
Check
that
the
tool
bar
on
the
new
window
is
visible
.
"
)
;
}
)
;
