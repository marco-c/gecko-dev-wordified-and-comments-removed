var
tempScope
=
{
}
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
browser
/
content
/
sanitize
.
js
"
tempScope
)
;
var
Sanitizer
=
tempScope
.
Sanitizer
;
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
signon
.
rememberSignons
"
true
]
]
}
)
;
Services
.
logins
.
setLoginSavingEnabled
(
"
http
:
/
/
example
.
com
"
false
)
;
is
(
Services
.
logins
.
getLoginSavingEnabled
(
"
http
:
/
/
example
.
com
"
)
false
"
example
.
com
should
be
disabled
for
password
saving
since
we
haven
'
t
cleared
that
yet
.
"
)
;
let
s
=
new
Sanitizer
(
)
;
s
.
ignoreTimespan
=
false
;
s
.
prefDomain
=
"
privacy
.
cpd
.
"
;
var
itemPrefs
=
gPrefService
.
getBranch
(
s
.
prefDomain
)
;
itemPrefs
.
setBoolPref
(
"
history
"
false
)
;
itemPrefs
.
setBoolPref
(
"
downloads
"
false
)
;
itemPrefs
.
setBoolPref
(
"
cache
"
false
)
;
itemPrefs
.
setBoolPref
(
"
cookies
"
false
)
;
itemPrefs
.
setBoolPref
(
"
formdata
"
false
)
;
itemPrefs
.
setBoolPref
(
"
offlineApps
"
false
)
;
itemPrefs
.
setBoolPref
(
"
passwords
"
false
)
;
itemPrefs
.
setBoolPref
(
"
sessions
"
false
)
;
itemPrefs
.
setBoolPref
(
"
siteSettings
"
true
)
;
await
s
.
sanitize
(
)
;
is
(
Services
.
logins
.
getLoginSavingEnabled
(
"
http
:
/
/
example
.
com
"
)
true
"
example
.
com
should
be
enabled
for
password
saving
again
now
that
we
'
ve
cleared
.
"
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
