"
use
strict
"
;
var
{
Preferences
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
sys
.
mjs
"
)
;
var
{
TelemetryReportingPolicy
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
TelemetryReportingPolicy
.
sys
.
mjs
"
)
;
const
PREF_BRANCH
=
"
datareporting
.
policy
.
"
;
const
PREF_FIRST_RUN
=
"
toolkit
.
telemetry
.
reportingpolicy
.
firstRun
"
;
const
PREF_BYPASS_NOTIFICATION
=
PREF_BRANCH
+
"
dataSubmissionPolicyBypassNotification
"
;
const
PREF_CURRENT_POLICY_VERSION
=
PREF_BRANCH
+
"
currentPolicyVersion
"
;
const
PREF_ACCEPTED_POLICY_VERSION
=
PREF_BRANCH
+
"
dataSubmissionPolicyAcceptedVersion
"
;
const
PREF_ACCEPTED_POLICY_DATE
=
PREF_BRANCH
+
"
dataSubmissionPolicyNotifiedTime
"
;
const
PREF_TOS_ROLLOUT_POPULATION
=
"
browser
.
preonboarding
.
onTrainRolloutPopulation
"
;
const
PREF_TOS_ENABLED
=
"
browser
.
preonboarding
.
enabled
"
;
const
PREF_TELEMETRY_LOG_LEVEL
=
"
toolkit
.
telemetry
.
log
.
level
"
;
const
TEST_POLICY_VERSION
=
37
;
function
fakeShowPolicyTimeout
(
set
clear
)
{
let
reportingPolicy
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
TelemetryReportingPolicy
.
sys
.
mjs
"
)
.
Policy
;
reportingPolicy
.
setShowInfobarTimeout
=
set
;
reportingPolicy
.
clearShowInfobarTimeout
=
clear
;
}
async
function
sendSessionRestoredNotification
(
)
{
let
reportingPolicy
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
TelemetryReportingPolicy
.
sys
.
mjs
"
)
.
Policy
;
await
reportingPolicy
.
fakeSessionRestoreNotification
(
)
;
}
function
promiseNextTick
(
)
{
return
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
;
}
function
promiseWaitForAlertActive
(
aNotificationBox
)
{
let
deferred
=
Promise
.
withResolvers
(
)
;
aNotificationBox
.
stack
.
addEventListener
(
"
AlertActive
"
function
(
)
{
deferred
.
resolve
(
)
;
}
{
once
:
true
}
)
;
return
deferred
.
promise
;
}
function
promiseWaitForNotificationClose
(
aNotification
)
{
let
deferred
=
Promise
.
withResolvers
(
)
;
waitForNotificationClose
(
aNotification
deferred
.
resolve
)
;
return
deferred
.
promise
;
}
async
function
triggerInfoBar
(
expectedTimeoutMs
)
{
let
showInfobarCallback
=
null
;
let
timeoutMs
=
null
;
fakeShowPolicyTimeout
(
(
callback
timeout
)
=
>
{
showInfobarCallback
=
callback
;
timeoutMs
=
timeout
;
}
(
)
=
>
{
}
)
;
await
sendSessionRestoredNotification
(
)
;
Assert
.
ok
(
!
!
showInfobarCallback
"
Must
have
a
timer
callback
.
"
)
;
if
(
expectedTimeoutMs
!
=
=
undefined
)
{
Assert
.
equal
(
timeoutMs
expectedTimeoutMs
"
Timeout
should
match
"
)
;
}
showInfobarCallback
(
)
;
}
add_setup
(
async
function
(
)
{
const
isFirstRun
=
Preferences
.
get
(
PREF_FIRST_RUN
true
)
;
const
bypassNotification
=
Preferences
.
get
(
PREF_BYPASS_NOTIFICATION
true
)
;
const
currentPolicyVersion
=
Preferences
.
get
(
PREF_CURRENT_POLICY_VERSION
1
)
;
registerCleanupFunction
(
(
)
=
>
{
Preferences
.
set
(
PREF_FIRST_RUN
isFirstRun
)
;
Preferences
.
set
(
PREF_BYPASS_NOTIFICATION
bypassNotification
)
;
Preferences
.
set
(
PREF_CURRENT_POLICY_VERSION
currentPolicyVersion
)
;
Preferences
.
reset
(
PREF_TELEMETRY_LOG_LEVEL
)
;
Preferences
.
reset
(
PREF_ACCEPTED_POLICY_VERSION
)
;
Preferences
.
reset
(
PREF_ACCEPTED_POLICY_DATE
)
;
Preferences
.
reset
(
PREF_TOS_ENABLED
)
;
Preferences
.
reset
(
"
browser
.
policies
.
alternatePath
"
)
;
return
closeAllNotifications
(
)
;
}
)
;
Preferences
.
set
(
PREF_BYPASS_NOTIFICATION
false
)
;
Preferences
.
set
(
PREF_CURRENT_POLICY_VERSION
TEST_POLICY_VERSION
)
;
Preferences
.
set
(
PREF_FIRST_RUN
false
)
;
TelemetryReportingPolicy
.
testUpdateFirstRun
(
)
;
Preferences
.
set
(
PREF_TOS_ENABLED
false
)
;
}
)
;
function
clearAcceptedPolicy
(
)
{
Preferences
.
reset
(
PREF_ACCEPTED_POLICY_VERSION
)
;
Preferences
.
reset
(
PREF_ACCEPTED_POLICY_DATE
)
;
}
function
assertCoherentInitialState
(
)
{
Assert
.
equal
(
Preferences
.
get
(
PREF_ACCEPTED_POLICY_VERSION
0
)
0
"
No
version
should
be
set
on
init
.
"
)
;
Assert
.
equal
(
Preferences
.
get
(
PREF_ACCEPTED_POLICY_DATE
0
)
0
"
No
date
should
be
set
on
init
.
"
)
;
Assert
.
ok
(
!
TelemetryReportingPolicy
.
testIsUserNotifiedOfDataReportingPolicy
(
)
"
User
not
notified
about
datareporting
policy
.
"
)
;
}
add_task
(
async
function
test_single_window
(
)
{
TelemetryReportingPolicy
.
reset
(
)
;
clearAcceptedPolicy
(
)
;
await
closeAllNotifications
(
)
;
assertCoherentInitialState
(
)
;
let
alertShownPromise
=
promiseWaitForAlertActive
(
gNotificationBox
)
;
Assert
.
ok
(
!
TelemetryReportingPolicy
.
canUpload
(
)
"
User
should
not
be
allowed
to
upload
.
"
)
;
await
triggerInfoBar
(
10
*
1000
)
;
await
alertShownPromise
;
await
promiseNextTick
(
)
;
Assert
.
equal
(
gNotificationBox
.
allNotifications
.
length
1
"
Notification
Displayed
.
"
)
;
Assert
.
ok
(
TelemetryReportingPolicy
.
canUpload
(
)
"
User
should
be
allowed
to
upload
now
.
"
)
;
let
notifications
=
gNotificationBox
.
allNotifications
;
Assert
.
equal
(
notifications
.
length
1
"
One
notification
present
to
close
"
)
;
let
notification
=
notifications
[
0
]
;
let
promiseClosed
=
promiseWaitForNotificationClose
(
notification
)
;
notification
.
close
(
)
;
await
promiseClosed
;
Assert
.
equal
(
gNotificationBox
.
allNotifications
.
length
0
"
No
notifications
remain
.
"
)
;
Assert
.
ok
(
TelemetryReportingPolicy
.
canUpload
(
)
)
;
Assert
.
equal
(
TelemetryReportingPolicy
.
testIsUserNotifiedOfDataReportingPolicy
(
)
true
"
User
notified
about
datareporting
policy
.
"
)
;
Assert
.
equal
(
Preferences
.
get
(
PREF_ACCEPTED_POLICY_VERSION
0
)
TEST_POLICY_VERSION
"
Version
pref
set
.
"
)
;
Assert
.
greater
(
parseInt
(
Preferences
.
get
(
PREF_ACCEPTED_POLICY_DATE
null
)
10
)
-
1
"
Date
pref
set
.
"
)
;
}
)
;
