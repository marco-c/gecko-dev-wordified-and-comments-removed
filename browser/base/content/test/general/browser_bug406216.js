var
count
=
0
;
const
URIS
=
[
"
about
:
config
"
"
about
:
plugins
"
"
about
:
buildconfig
"
"
data
:
text
/
html
<
title
>
OK
<
/
title
>
"
]
;
function
test
(
)
{
waitForExplicitFinish
(
)
;
URIS
.
forEach
(
addTab
)
;
}
function
addTab
(
aURI
aIndex
)
{
var
tab
=
BrowserTestUtils
.
addTab
(
gBrowser
aURI
)
;
if
(
aIndex
=
=
0
)
gBrowser
.
removeTab
(
gBrowser
.
tabs
[
0
]
{
skipPermitUnload
:
true
}
)
;
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
.
then
(
(
)
=
>
{
if
(
+
+
count
=
=
URIS
.
length
)
executeSoon
(
doTabsTest
)
;
}
)
;
}
function
doTabsTest
(
)
{
is
(
gBrowser
.
tabs
.
length
URIS
.
length
"
Correctly
opened
all
expected
tabs
"
)
;
gBrowser
.
tabContainer
.
addEventListener
(
"
TabClose
"
function
(
event
)
{
var
closedTab
=
event
.
originalTarget
;
var
scheme
=
closedTab
.
linkedBrowser
.
currentURI
.
scheme
;
Array
.
slice
(
gBrowser
.
tabs
)
.
forEach
(
function
(
aTab
)
{
if
(
aTab
!
=
closedTab
&
&
aTab
.
linkedBrowser
.
currentURI
.
scheme
=
=
scheme
)
gBrowser
.
removeTab
(
aTab
{
skipPermitUnload
:
true
}
)
;
}
)
;
}
{
capture
:
true
once
:
true
}
)
;
gBrowser
.
removeTab
(
gBrowser
.
tabs
[
0
]
{
skipPermitUnload
:
true
}
)
;
is
(
gBrowser
.
tabs
.
length
1
"
Related
tabs
are
not
closed
unexpectedly
"
)
;
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
gBrowser
.
removeTab
(
gBrowser
.
tabs
[
0
]
{
skipPermitUnload
:
true
}
)
;
finish
(
)
;
}
