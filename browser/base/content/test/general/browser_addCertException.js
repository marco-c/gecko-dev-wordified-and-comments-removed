add_task
(
async
function
(
)
{
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
await
loadBadCertPage
(
"
https
:
/
/
expired
.
example
.
com
"
)
;
let
{
gIdentityHandler
}
=
gBrowser
.
ownerGlobal
;
let
promisePanelOpen
=
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
ownerGlobal
"
popupshown
"
true
event
=
>
event
.
target
=
=
gIdentityHandler
.
_identityPopup
)
;
gIdentityHandler
.
_identityBox
.
click
(
)
;
await
promisePanelOpen
;
let
promiseViewShown
=
BrowserTestUtils
.
waitForEvent
(
gIdentityHandler
.
_identityPopup
"
ViewShown
"
)
;
document
.
getElementById
(
"
identity
-
popup
-
security
-
expander
"
)
.
click
(
)
;
await
promiseViewShown
;
is_element_visible
(
document
.
getElementById
(
"
identity
-
icon
"
)
"
Should
see
identity
icon
"
)
;
let
identityIconImage
=
gBrowser
.
ownerGlobal
.
getComputedStyle
(
document
.
getElementById
(
"
identity
-
icon
"
)
)
.
getPropertyValue
(
"
list
-
style
-
image
"
)
;
let
securityViewBG
=
gBrowser
.
ownerGlobal
.
getComputedStyle
(
document
.
getElementById
(
"
identity
-
popup
-
securityView
"
)
.
getElementsByClassName
(
"
identity
-
popup
-
security
-
connection
"
)
[
0
]
)
.
getPropertyValue
(
"
background
-
image
"
)
;
let
securityContentBG
=
gBrowser
.
ownerGlobal
.
getComputedStyle
(
document
.
getElementById
(
"
identity
-
popup
-
mainView
"
)
.
getElementsByClassName
(
"
identity
-
popup
-
security
-
connection
"
)
[
0
]
)
.
getPropertyValue
(
"
background
-
image
"
)
;
is
(
identityIconImage
'
url
(
"
chrome
:
/
/
browser
/
skin
/
connection
-
mixed
-
passive
-
loaded
.
svg
"
)
'
"
Using
expected
icon
image
in
the
identity
block
"
)
;
is
(
securityViewBG
'
url
(
"
chrome
:
/
/
browser
/
skin
/
connection
-
mixed
-
passive
-
loaded
.
svg
"
)
'
"
Using
expected
icon
image
in
the
Control
Center
main
view
"
)
;
is
(
securityContentBG
'
url
(
"
chrome
:
/
/
browser
/
skin
/
connection
-
mixed
-
passive
-
loaded
.
svg
"
)
'
"
Using
expected
icon
image
in
the
Control
Center
subview
"
)
;
gIdentityHandler
.
_identityPopup
.
hidePopup
(
)
;
let
certOverrideService
=
Cc
[
"
mozilla
.
org
/
security
/
certoverride
;
1
"
]
.
getService
(
Ci
.
nsICertOverrideService
)
;
certOverrideService
.
clearValidityOverride
(
"
expired
.
example
.
com
"
-
1
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
