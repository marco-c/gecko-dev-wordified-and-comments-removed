"
use
strict
"
;
const
PAGE
=
"
http
:
/
/
example
.
org
/
browser
/
browser
/
base
/
content
/
test
/
general
/
dummy_page
.
html
"
;
const
PREF
=
"
accessibility
.
blockautorefresh
"
;
function
*
attemptRefresh
(
browser
expectRefresh
)
{
yield
ContentTask
.
spawn
(
browser
expectRefresh
function
*
(
expectRefresh
)
{
let
URI
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
.
currentURI
;
let
refresher
=
docShell
.
QueryInterface
(
Ci
.
nsIRefreshURI
)
;
refresher
.
refreshURI
(
URI
0
false
true
)
;
is
(
refresher
.
refreshPending
expectRefresh
"
Got
the
right
refreshPending
state
"
)
;
if
(
refresher
.
refreshPending
)
{
refresher
.
cancelRefreshURITimers
(
)
;
}
}
)
;
}
add_task
(
function
*
test_can_enable_and_block
(
)
{
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE
}
function
*
(
browser
)
{
yield
attemptRefresh
(
browser
true
)
;
yield
pushPrefs
(
[
"
accessibility
.
blockautorefresh
"
true
]
)
;
let
notificationPromise
=
BrowserTestUtils
.
waitForNotificationBar
(
gBrowser
browser
"
refresh
-
blocked
"
)
;
yield
attemptRefresh
(
browser
false
)
;
yield
notificationPromise
;
yield
pushPrefs
(
[
"
accessibility
.
blockautorefresh
"
false
]
)
;
yield
attemptRefresh
(
browser
true
)
;
}
)
;
}
)
;
add_task
(
function
*
test_can_allow_refresh
(
)
{
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE
}
function
*
(
browser
)
{
yield
pushPrefs
(
[
"
accessibility
.
blockautorefresh
"
true
]
)
;
let
notificationPromise
=
BrowserTestUtils
.
waitForNotificationBar
(
gBrowser
browser
"
refresh
-
blocked
"
)
;
yield
attemptRefresh
(
browser
false
)
;
let
notification
=
yield
notificationPromise
;
let
buttons
=
notification
.
querySelectorAll
(
"
.
notification
-
button
"
)
;
is
(
buttons
.
length
1
"
Should
have
one
button
.
"
)
;
let
refreshPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
buttons
[
0
]
.
click
(
)
;
yield
refreshPromise
;
}
)
;
}
)
;
