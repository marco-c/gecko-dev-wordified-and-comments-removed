"
use
strict
"
;
const
META_PAGE
=
"
http
:
/
/
example
.
org
/
browser
/
browser
/
base
/
content
/
test
/
general
/
refresh_meta
.
sjs
"
const
HEADER_PAGE
=
"
http
:
/
/
example
.
org
/
browser
/
browser
/
base
/
content
/
test
/
general
/
refresh_header
.
sjs
"
const
TARGET_PAGE
=
"
http
:
/
/
example
.
org
/
browser
/
browser
/
base
/
content
/
test
/
general
/
dummy_page
.
html
"
;
const
PREF
=
"
accessibility
.
blockautorefresh
"
;
function
*
attemptFakeRefresh
(
browser
expectRefresh
)
{
yield
ContentTask
.
spawn
(
browser
expectRefresh
function
*
(
expectRefresh
)
{
let
URI
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
.
currentURI
;
let
refresher
=
docShell
.
QueryInterface
(
Ci
.
nsIRefreshURI
)
;
refresher
.
refreshURI
(
URI
0
false
true
)
;
Assert
.
equal
(
refresher
.
refreshPending
expectRefresh
"
Got
the
right
refreshPending
state
"
)
;
if
(
refresher
.
refreshPending
)
{
refresher
.
cancelRefreshURITimers
(
)
;
}
content
.
location
=
URI
.
spec
+
"
#
foo
"
;
}
)
;
}
add_task
(
function
*
test_can_enable_and_block
(
)
{
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
TARGET_PAGE
}
function
*
(
browser
)
{
yield
attemptFakeRefresh
(
browser
true
)
;
yield
pushPrefs
(
[
"
accessibility
.
blockautorefresh
"
true
]
)
;
let
notificationPromise
=
BrowserTestUtils
.
waitForNotificationBar
(
gBrowser
browser
"
refresh
-
blocked
"
)
;
yield
attemptFakeRefresh
(
browser
false
)
;
yield
notificationPromise
;
yield
pushPrefs
(
[
"
accessibility
.
blockautorefresh
"
false
]
)
;
yield
attemptFakeRefresh
(
browser
true
)
;
}
)
;
}
)
;
function
*
testRealRefresh
(
refreshPage
delay
)
{
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
about
:
blank
"
}
function
*
(
browser
)
{
yield
pushPrefs
(
[
"
accessibility
.
blockautorefresh
"
true
]
)
;
browser
.
loadURI
(
refreshPage
+
"
?
p
=
"
+
TARGET_PAGE
+
"
&
d
=
"
+
delay
)
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
notificationBox
=
gBrowser
.
getNotificationBox
(
browser
)
;
let
notification
=
notificationBox
.
currentNotification
;
ok
(
notification
"
Notification
should
be
visible
"
)
;
is
(
notification
.
value
"
refresh
-
blocked
"
"
Should
be
showing
the
right
notification
"
)
;
let
buttons
=
notification
.
querySelectorAll
(
"
.
notification
-
button
"
)
;
is
(
buttons
.
length
1
"
Should
have
one
button
.
"
)
;
let
refreshPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
)
;
buttons
[
0
]
.
click
(
)
;
yield
refreshPromise
;
}
)
;
}
add_task
(
function
*
test_can_allow_refresh
(
)
{
yield
testRealRefresh
(
META_PAGE
0
)
;
yield
testRealRefresh
(
META_PAGE
100
)
;
yield
testRealRefresh
(
META_PAGE
500
)
;
}
)
;
add_task
(
function
*
test_can_block_refresh_from_header
(
)
{
yield
testRealRefresh
(
HEADER_PAGE
0
)
;
yield
testRealRefresh
(
HEADER_PAGE
100
)
;
yield
testRealRefresh
(
HEADER_PAGE
500
)
;
}
)
;
