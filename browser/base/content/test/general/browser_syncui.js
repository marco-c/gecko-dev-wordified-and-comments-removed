var
{
Log
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
{
}
)
;
var
{
Weave
}
=
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
main
.
js
"
{
}
)
;
var
{
Notifications
}
=
Cu
.
import
(
"
resource
:
/
/
services
-
sync
/
notifications
.
js
"
{
}
)
;
var
stringBundle
=
Cc
[
"
mozilla
.
org
/
intl
/
stringbundle
;
1
"
]
.
getService
(
Ci
.
nsIStringBundleService
)
.
createBundle
(
"
chrome
:
/
/
weave
/
locale
/
services
/
sync
.
properties
"
)
;
Log
.
repository
.
getLogger
(
"
browserwindow
.
syncui
"
)
.
addAppender
(
new
Log
.
DumpAppender
(
)
)
;
function
notifyAndPromiseUIUpdated
(
topic
)
{
return
new
Promise
(
resolve
=
>
{
let
oldPromiseUpdateUI
=
gSyncUI
.
_promiseUpdateUI
.
bind
(
gSyncUI
)
;
gSyncUI
.
_promiseUpdateUI
=
function
(
)
{
return
oldPromiseUpdateUI
(
)
.
then
(
(
)
=
>
{
gSyncUI
.
_promiseUpdateUI
=
oldPromiseUpdateUI
;
resolve
(
)
;
}
)
;
}
;
Services
.
obs
.
notifyObservers
(
null
topic
null
)
;
}
)
;
}
function
checkBroadcasterVisible
(
broadcasterId
)
{
let
all
=
[
"
sync
-
reauth
-
state
"
"
sync
-
setup
-
state
"
"
sync
-
syncnow
-
state
"
]
;
Assert
.
ok
(
all
.
indexOf
(
broadcasterId
)
>
=
0
"
valid
id
"
)
;
for
(
let
check
of
all
)
{
let
eltHidden
=
document
.
getElementById
(
check
)
.
hidden
;
Assert
.
equal
(
eltHidden
check
=
=
broadcasterId
?
false
:
true
check
)
;
}
}
function
promiseObserver
(
topic
)
{
return
new
Promise
(
resolve
=
>
{
let
obs
=
(
subject
topic
data
)
=
>
{
Services
.
obs
.
removeObserver
(
obs
topic
)
;
resolve
(
subject
)
;
}
Services
.
obs
.
addObserver
(
obs
topic
false
)
;
}
)
;
}
function
checkButtonTooltips
(
stringPrefix
)
{
for
(
let
butId
of
[
"
sync
-
button
"
"
PanelUI
-
fxa
-
icon
"
]
)
{
let
text
=
document
.
getElementById
(
butId
)
.
getAttribute
(
"
tooltiptext
"
)
;
let
desc
=
Text
is
"
{
text
}
"
expecting
it
to
start
with
"
{
stringPrefix
}
"
Assert
.
ok
(
text
.
startsWith
(
stringPrefix
)
desc
)
;
}
}
add_task
(
function
*
prepare
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
sync
-
button
"
CustomizableUI
.
AREA_NAVBAR
)
;
registerCleanupFunction
(
(
)
=
>
{
CustomizableUI
.
removeWidgetFromArea
(
"
sync
-
button
"
)
;
}
)
;
let
xps
=
Components
.
classes
[
"
mozilla
.
org
/
weave
/
service
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsISupports
)
.
wrappedJSObject
;
yield
xps
.
whenLoaded
(
)
;
Weave
.
Status
.
login
=
Weave
.
LOGIN_FAILED_NO_USERNAME
;
yield
notifyAndPromiseUIUpdated
(
"
weave
:
ui
:
clear
-
error
"
)
;
checkBroadcasterVisible
(
"
sync
-
setup
-
state
"
)
;
checkButtonTooltips
(
"
Sign
In
To
Sync
"
)
;
let
oldNeedsSetup
=
window
.
gSyncUI
.
_needsSetup
;
window
.
gSyncUI
.
_needsSetup
=
(
)
=
>
Promise
.
resolve
(
false
)
;
registerCleanupFunction
(
(
)
=
>
{
window
.
gSyncUI
.
_needsSetup
=
oldNeedsSetup
;
Services
.
obs
.
notifyObservers
(
null
"
weave
:
ui
:
clear
-
error
"
null
)
;
}
)
;
yield
notifyAndPromiseUIUpdated
(
"
weave
:
ui
:
clear
-
error
"
)
;
checkBroadcasterVisible
(
"
sync
-
syncnow
-
state
"
)
;
}
)
;
add_task
(
function
*
testSyncNeedsVerification
(
)
{
Assert
.
equal
(
Notifications
.
notifications
.
length
0
"
start
with
no
notifications
"
)
;
let
oldNeedsVerification
=
window
.
gSyncUI
.
_needsVerification
;
window
.
gSyncUI
.
_needsVerification
=
(
)
=
>
true
;
try
{
yield
notifyAndPromiseUIUpdated
(
"
weave
:
ui
:
clear
-
error
"
)
;
checkButtonTooltips
(
"
Verify
"
)
;
}
finally
{
window
.
gSyncUI
.
_needsVerification
=
oldNeedsVerification
;
}
}
)
;
add_task
(
function
*
testSyncLoginError
(
)
{
Assert
.
equal
(
Notifications
.
notifications
.
length
0
"
start
with
no
notifications
"
)
;
checkBroadcasterVisible
(
"
sync
-
syncnow
-
state
"
)
;
Weave
.
Status
.
sync
=
Weave
.
LOGIN_FAILED
;
Weave
.
Status
.
login
=
Weave
.
LOGIN_FAILED_LOGIN_REJECTED
;
yield
notifyAndPromiseUIUpdated
(
"
weave
:
ui
:
sync
:
error
"
)
;
Assert
.
equal
(
Notifications
.
notifications
.
length
0
"
no
notifications
shown
on
login
error
"
)
;
checkBroadcasterVisible
(
"
sync
-
reauth
-
state
"
)
;
checkButtonTooltips
(
"
Reconnect
"
)
;
Weave
.
Status
.
sync
=
Weave
.
STATUS_OK
;
Weave
.
Status
.
login
=
Weave
.
LOGIN_SUCCEEDED
;
yield
notifyAndPromiseUIUpdated
(
"
weave
:
service
:
login
:
start
"
)
;
yield
notifyAndPromiseUIUpdated
(
"
weave
:
service
:
login
:
finish
"
)
;
Assert
.
equal
(
Notifications
.
notifications
.
length
0
"
no
notifications
left
"
)
;
checkBroadcasterVisible
(
"
sync
-
syncnow
-
state
"
)
;
}
)
;
function
checkButtonsStatus
(
shouldBeActive
)
{
let
button
=
document
.
getElementById
(
"
sync
-
button
"
)
;
let
fxaContainer
=
document
.
getElementById
(
"
PanelUI
-
footer
-
fxa
"
)
;
if
(
shouldBeActive
)
{
Assert
.
equal
(
button
.
getAttribute
(
"
status
"
)
"
active
"
)
;
Assert
.
equal
(
fxaContainer
.
getAttribute
(
"
syncstatus
"
)
"
active
"
)
;
}
else
{
Assert
.
ok
(
!
button
.
hasAttribute
(
"
status
"
)
)
;
Assert
.
ok
(
!
fxaContainer
.
hasAttribute
(
"
syncstatus
"
)
)
;
}
}
function
*
testButtonActions
(
startNotification
endNotification
)
{
checkButtonsStatus
(
false
)
;
yield
notifyAndPromiseUIUpdated
(
startNotification
)
;
checkButtonsStatus
(
true
)
;
yield
notifyAndPromiseUIUpdated
(
endNotification
)
;
checkButtonsStatus
(
false
)
;
}
function
*
doTestButtonActivities
(
)
{
yield
testButtonActions
(
"
weave
:
service
:
login
:
start
"
"
weave
:
service
:
login
:
finish
"
)
;
yield
testButtonActions
(
"
weave
:
service
:
login
:
start
"
"
weave
:
service
:
login
:
error
"
)
;
yield
testButtonActions
(
"
weave
:
service
:
sync
:
start
"
"
weave
:
service
:
sync
:
finish
"
)
;
yield
testButtonActions
(
"
weave
:
service
:
sync
:
start
"
"
weave
:
service
:
sync
:
error
"
)
;
yield
notifyAndPromiseUIUpdated
(
"
weave
:
service
:
sync
:
start
"
)
;
checkButtonsStatus
(
true
)
;
yield
notifyAndPromiseUIUpdated
(
"
weave
:
service
:
sync
:
finish
"
)
;
checkButtonsStatus
(
false
)
;
}
add_task
(
function
*
testButtonActivitiesInNavBar
(
)
{
yield
doTestButtonActivities
(
)
;
}
)
;
add_task
(
function
*
testButtonActivitiesInPanel
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
sync
-
button
"
CustomizableUI
.
AREA_PANEL
)
;
yield
PanelUI
.
show
(
)
;
try
{
yield
doTestButtonActivities
(
)
;
}
finally
{
PanelUI
.
hide
(
)
;
}
}
)
;
