var
tests
=
[
[
'
http
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
general
/
dummy_page
.
html
'
'
Dummy
test
page
'
]
[
'
data
:
text
/
html
;
charset
=
utf
-
8
<
title
>
test
%
20data
:
%
20url
<
/
title
>
'
'
test
data
:
url
'
]
[
'
data
:
application
/
vnd
.
mozilla
.
xul
+
xml
'
'
data
:
application
/
vnd
.
mozilla
.
xul
+
xml
'
]
[
'
https
:
/
/
untrusted
.
example
.
com
/
somepage
.
html
'
'
https
:
/
/
untrusted
.
example
.
com
/
somepage
.
html
'
]
]
;
add_task
(
function
*
(
)
{
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
browser
.
stop
(
)
;
for
(
let
i
=
0
;
i
<
tests
.
length
;
+
+
i
)
{
let
[
uri
title
]
=
tests
[
i
]
;
let
promiseLoaded
=
promisePageLoaded
(
browser
)
;
content
.
location
=
uri
;
yield
promiseLoaded
;
yield
checkBookmark
(
uri
title
)
;
}
BrowserOffline
.
toggleOfflineStatus
(
)
;
let
proxy
=
Services
.
prefs
.
getIntPref
(
'
network
.
proxy
.
type
'
)
;
Services
.
prefs
.
setIntPref
(
'
network
.
proxy
.
type
'
0
)
;
registerCleanupFunction
(
function
(
)
{
BrowserOffline
.
toggleOfflineStatus
(
)
;
Services
.
prefs
.
setIntPref
(
'
network
.
proxy
.
type
'
proxy
)
;
}
)
;
Services
.
cache2
.
clear
(
)
;
let
[
uri
title
]
=
tests
[
0
]
;
let
promiseLoaded
=
promisePageLoaded
(
browser
)
;
content
.
location
=
uri
;
yield
promiseLoaded
;
is
(
content
.
document
.
documentURI
.
substring
(
0
14
)
'
about
:
neterror
'
"
Offline
mode
successfully
simulated
network
outage
.
"
)
;
yield
checkBookmark
(
uri
title
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
function
*
checkBookmark
(
uri
expected_title
)
{
is
(
gBrowser
.
selectedBrowser
.
currentURI
.
spec
uri
"
Trying
to
bookmark
the
expected
uri
"
)
;
let
promiseBookmark
=
promiseOnBookmarkItemAdded
(
gBrowser
.
selectedBrowser
.
currentURI
)
;
PlacesCommandHook
.
bookmarkCurrentPage
(
false
)
;
yield
promiseBookmark
;
let
id
=
PlacesUtils
.
getMostRecentBookmarkForURI
(
PlacesUtils
.
_uri
(
uri
)
)
;
ok
(
id
>
0
"
Found
the
expected
bookmark
"
)
;
let
title
=
PlacesUtils
.
bookmarks
.
getItemTitle
(
id
)
;
is
(
title
expected_title
"
Bookmark
got
a
good
default
title
.
"
)
;
PlacesUtils
.
bookmarks
.
removeItem
(
id
)
;
}
function
promisePageLoaded
(
browser
)
{
return
new
Promise
(
resolve
=
>
{
browser
.
addEventListener
(
"
DOMContentLoaded
"
function
pageLoaded
(
event
)
{
browser
.
removeEventListener
(
"
DOMContentLoaded
"
pageLoaded
true
)
;
if
(
event
.
originalTarget
!
=
browser
.
contentDocument
|
|
event
.
target
.
location
.
href
=
=
"
about
:
blank
"
)
{
info
(
"
skipping
spurious
load
event
"
)
;
return
;
}
resolve
(
)
;
}
true
)
;
}
)
;
}
