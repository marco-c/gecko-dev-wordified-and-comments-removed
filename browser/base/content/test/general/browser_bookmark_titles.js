var
tests
=
[
[
"
http
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
general
/
dummy_page
.
html
"
"
Dummy
test
page
"
]
[
"
data
:
text
/
html
;
charset
=
utf
-
8
<
title
>
test
%
20data
:
%
20url
<
/
title
>
"
"
test
data
:
url
"
]
[
"
data
:
application
/
vnd
.
mozilla
.
xul
+
xml
"
"
data
:
application
/
vnd
.
mozilla
.
xul
+
xml
"
]
[
"
https
:
/
/
untrusted
.
example
.
com
/
somepage
.
html
"
"
https
:
/
/
untrusted
.
example
.
com
/
somepage
.
html
"
]
]
;
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
browser
.
bookmarks
.
editDialog
.
showForNewBookmarks
"
false
]
]
}
)
;
add_task
(
async
function
check_default_bookmark_title
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
let
browser
=
tab
.
linkedBrowser
;
for
(
let
i
=
0
;
i
<
tests
.
length
;
+
+
i
)
{
let
[
url
title
]
=
tests
[
i
]
;
let
promiseLoaded
=
promisePageLoaded
(
browser
)
;
BrowserTestUtils
.
loadURI
(
browser
url
)
;
await
promiseLoaded
;
await
checkBookmark
(
url
title
)
;
}
BrowserOffline
.
toggleOfflineStatus
(
)
;
let
proxy
=
Services
.
prefs
.
getIntPref
(
"
network
.
proxy
.
type
"
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
0
)
;
registerCleanupFunction
(
function
(
)
{
BrowserOffline
.
toggleOfflineStatus
(
)
;
Services
.
prefs
.
setIntPref
(
"
network
.
proxy
.
type
"
proxy
)
;
}
)
;
Services
.
cache2
.
clear
(
)
;
let
[
url
title
]
=
tests
[
0
]
;
let
promiseLoaded
=
promisePageLoaded
(
browser
)
;
BrowserTestUtils
.
loadURI
(
browser
url
)
;
await
promiseLoaded
;
await
ContentTask
.
spawn
(
browser
null
function
(
)
{
Assert
.
equal
(
content
.
document
.
documentURI
.
substring
(
0
14
)
"
about
:
neterror
"
"
Offline
mode
successfully
simulated
network
outage
.
"
)
;
}
)
;
await
checkBookmark
(
url
title
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
async
function
checkBookmark
(
url
expected_title
)
{
Assert
.
equal
(
gBrowser
.
selectedBrowser
.
currentURI
.
spec
url
"
Trying
to
bookmark
the
expected
uri
"
)
;
let
promiseBookmark
=
PlacesTestUtils
.
waitForNotification
(
"
onItemAdded
"
(
id
parentId
index
type
itemUrl
)
=
>
itemUrl
.
equals
(
gBrowser
.
selectedBrowser
.
currentURI
)
)
;
PlacesCommandHook
.
bookmarkPage
(
)
;
await
promiseBookmark
;
let
bookmark
=
await
PlacesUtils
.
bookmarks
.
fetch
(
{
url
}
)
;
Assert
.
ok
(
bookmark
"
Found
the
expected
bookmark
"
)
;
Assert
.
equal
(
bookmark
.
title
expected_title
"
Bookmark
got
a
good
default
title
.
"
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bookmark
)
;
}
function
promisePageLoaded
(
browser
)
{
return
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
await
ContentTaskUtils
.
waitForEvent
(
this
"
DOMContentLoaded
"
true
(
event
)
=
>
{
return
event
.
originalTarget
=
=
=
content
.
document
&
&
event
.
target
.
location
.
href
!
=
=
"
about
:
blank
"
;
}
)
;
}
)
;
}
