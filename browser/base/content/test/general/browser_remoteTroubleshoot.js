var
{
WebChannel
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
WebChannel
.
sys
.
mjs
"
)
;
const
{
PermissionTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PermissionTestUtils
.
sys
.
mjs
"
)
;
const
TEST_URL_TAIL
=
"
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
general
/
test_remoteTroubleshoot
.
html
"
;
const
TEST_URI_GOOD
=
Services
.
io
.
newURI
(
"
https
:
/
/
"
+
TEST_URL_TAIL
)
;
const
TEST_URI_BAD
=
Services
.
io
.
newURI
(
"
http
:
/
/
"
+
TEST_URL_TAIL
)
;
async
function
promiseNewChannelResponse
(
uri
)
{
let
tab
=
gBrowser
.
addTab
(
uri
.
spec
{
inBackground
:
false
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
await
promiseTabLoaded
(
tab
)
;
let
data
=
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
return
Cu
.
waiveXrays
(
content
)
.
remoteTroubleShootingResult
;
}
)
;
await
gBrowser
.
removeTab
(
tab
)
;
return
data
;
}
add_task
(
async
function
(
)
{
let
got
=
await
promiseNewChannelResponse
(
TEST_URI_GOOD
)
;
Assert
.
strictEqual
(
got
.
errno
2
"
should
have
failed
with
errno
2
no
such
channel
"
)
;
PermissionTestUtils
.
add
(
TEST_URI_GOOD
"
remote
-
troubleshooting
"
Services
.
perms
.
ALLOW_ACTION
)
;
registerCleanupFunction
(
(
)
=
>
{
PermissionTestUtils
.
remove
(
TEST_URI_GOOD
"
remote
-
troubleshooting
"
)
;
}
)
;
got
=
await
promiseNewChannelResponse
(
TEST_URI_GOOD
)
;
Assert
.
ok
(
got
.
addons
"
should
have
addons
"
)
;
Assert
.
ok
(
got
.
graphics
"
should
have
graphics
"
)
;
Assert
.
equal
(
got
.
application
.
buildID
Services
.
appinfo
.
appBuildID
"
should
have
correct
build
ID
"
)
;
let
updateChannel
=
null
;
try
{
updateChannel
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
sys
.
mjs
"
)
.
UpdateUtils
.
UpdateChannel
;
}
catch
(
ex
)
{
}
if
(
!
updateChannel
)
{
Assert
.
ok
(
!
(
"
updateChannel
"
in
got
.
application
)
"
should
not
have
update
channel
where
not
available
.
"
)
;
}
else
{
Assert
.
equal
(
got
.
application
.
updateChannel
updateChannel
"
should
have
correct
update
channel
.
"
)
;
}
Assert
.
ok
(
!
got
.
modifiedPreferences
"
should
not
have
a
modifiedPreferences
key
"
)
;
Assert
.
ok
(
!
got
.
printingPreferences
"
should
not
have
a
printingPreferences
key
"
)
;
Assert
.
ok
(
!
got
.
crashes
"
should
not
have
crash
info
"
)
;
got
=
await
promiseNewChannelResponse
(
TEST_URI_BAD
)
;
Assert
.
strictEqual
(
got
.
errno
2
"
should
have
failed
with
errno
2
no
such
channel
"
)
;
}
)
;
