var
Cm
=
Components
.
manager
;
var
didFail
=
false
;
const
kPromptServiceUUID
=
"
{
6cc9c9fe
-
bc0b
-
432b
-
a410
-
253ef8bcc699
}
"
;
const
kPromptServiceContractID
=
"
mozilla
.
org
/
embedcomp
/
prompt
-
service
;
1
"
;
const
kPromptServiceFactory
=
Cm
.
getClassObject
(
Cc
[
kPromptServiceContractID
]
Ci
.
nsIFactory
)
;
var
fakePromptServiceFactory
=
{
createInstance
(
aOuter
aIid
)
{
if
(
aOuter
!
=
null
)
throw
Cr
.
NS_ERROR_NO_AGGREGATION
;
return
promptService
.
QueryInterface
(
aIid
)
;
}
}
;
var
promptService
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIPromptService
]
)
alert
(
)
{
didFail
=
true
;
}
}
;
const
kCompleteState
=
Ci
.
nsIWebProgressListener
.
STATE_STOP
+
Ci
.
nsIWebProgressListener
.
STATE_IS_NETWORK
;
const
kDummyPage
=
"
http
:
/
/
example
.
org
/
browser
/
browser
/
base
/
content
/
test
/
general
/
dummy_page
.
html
"
;
const
kURIs
=
[
"
bad
:
/
/
www
.
mozilla
.
org
/
"
kDummyPage
kDummyPage
]
;
var
gProgressListener
=
{
_runCount
:
0
onStateChange
(
aBrowser
aWebProgress
aRequest
aStateFlags
aStatus
)
{
if
(
(
aStateFlags
&
kCompleteState
)
=
=
kCompleteState
)
{
if
(
+
+
this
.
_runCount
!
=
kURIs
.
length
)
return
;
ok
(
didFail
"
Correctly
failed
on
unknown
protocol
"
)
;
ok
(
gBrowser
.
tabs
.
length
=
=
kURIs
.
length
"
Correctly
opened
all
expected
tabs
"
)
;
finishTest
(
)
;
}
}
}
;
function
test
(
)
{
todo
(
false
"
temp
.
disabled
"
)
;
}
function
finishTest
(
)
{
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
.
unregisterFactory
(
Components
.
ID
(
kPromptServiceUUID
)
fakePromptServiceFactory
)
;
Cm
.
QueryInterface
(
Ci
.
nsIComponentRegistrar
)
.
registerFactory
(
Components
.
ID
(
kPromptServiceUUID
)
"
Prompt
Service
"
kPromptServiceContractID
kPromptServiceFactory
)
;
gBrowser
.
removeTabsProgressListener
(
gProgressListener
)
;
for
(
var
i
=
gBrowser
.
tabs
.
length
-
1
;
i
>
0
;
i
-
-
)
gBrowser
.
removeTab
(
gBrowser
.
tabs
[
i
]
)
;
finish
(
)
;
}
