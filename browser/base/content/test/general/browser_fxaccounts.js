var
{
Log
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Log
.
jsm
"
{
}
)
;
var
{
Task
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
{
}
)
;
var
{
fxAccounts
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
{
}
)
;
var
FxAccountsCommon
=
{
}
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
FxAccountsCommon
.
js
"
FxAccountsCommon
)
;
const
TEST_ROOT
=
"
http
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
general
/
"
;
(
function
(
)
{
let
unstubs
=
{
}
;
let
stubs
=
{
updateAppMenuItem
(
)
{
return
unstubs
[
"
updateAppMenuItem
"
]
.
call
(
gFxAccounts
)
.
then
(
(
)
=
>
{
Services
.
obs
.
notifyObservers
(
null
"
test
:
browser_fxaccounts
:
updateAppMenuItem
"
null
)
;
}
)
;
}
openPreferences
(
)
{
Services
.
obs
.
notifyObservers
(
null
"
test
:
browser_fxaccounts
:
openPreferences
"
null
)
;
}
}
;
for
(
let
name
in
stubs
)
{
unstubs
[
name
]
=
gFxAccounts
[
name
]
;
gFxAccounts
[
name
]
=
stubs
[
name
]
;
}
registerCleanupFunction
(
(
)
=
>
{
for
(
let
name
in
unstubs
)
{
gFxAccounts
[
name
]
=
unstubs
[
name
]
;
}
stubs
=
unstubs
=
null
;
}
)
;
}
)
(
)
;
var
newTab
;
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
remote
.
signup
.
uri
"
TEST_ROOT
+
"
accounts_testRemoteCommands
.
html
"
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
identity
.
fxaccounts
.
remote
.
signup
.
uri
"
)
;
Services
.
prefs
.
clearUserPref
(
"
identity
.
fxaccounts
.
remote
.
profile
.
uri
"
)
;
gBrowser
.
removeTab
(
newTab
)
;
}
)
;
add_task
(
function
*
initialize
(
)
{
newTab
=
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
"
about
:
mozilla
"
{
animate
:
false
}
)
;
yield
promiseTabLoaded
(
newTab
)
;
}
)
;
var
panelUILabel
=
document
.
getElementById
(
"
PanelUI
-
fxa
-
label
"
)
;
var
panelUIStatus
=
document
.
getElementById
(
"
PanelUI
-
fxa
-
status
"
)
;
var
panelUIFooter
=
document
.
getElementById
(
"
PanelUI
-
footer
-
fxa
"
)
;
add_task
(
function
*
test_nouser
(
)
{
let
user
=
yield
fxAccounts
.
getSignedInUser
(
)
;
Assert
.
strictEqual
(
user
null
"
start
with
no
user
signed
in
"
)
;
let
promiseUpdateDone
=
promiseObserver
(
"
test
:
browser_fxaccounts
:
updateAppMenuItem
"
)
;
Services
.
obs
.
notifyObservers
(
null
this
.
FxAccountsCommon
.
ONLOGOUT_NOTIFICATION
null
)
;
yield
promiseUpdateDone
;
Assert
.
ok
(
isFooterVisible
(
)
)
Assert
.
equal
(
panelUILabel
.
getAttribute
(
"
label
"
)
panelUIStatus
.
getAttribute
(
"
defaultlabel
"
)
)
;
Assert
.
equal
(
panelUIStatus
.
getAttribute
(
"
tooltiptext
"
)
panelUIStatus
.
getAttribute
(
"
signedinTooltiptext
"
)
)
;
Assert
.
ok
(
!
panelUIFooter
.
hasAttribute
(
"
fxastatus
"
)
"
no
fxsstatus
when
signed
out
"
)
;
Assert
.
ok
(
!
panelUIFooter
.
hasAttribute
(
"
fxaprofileimage
"
)
"
no
fxaprofileimage
when
signed
out
"
)
;
let
promisePreferencesOpened
=
promiseObserver
(
"
test
:
browser_fxaccounts
:
openPreferences
"
)
;
panelUIStatus
.
click
(
)
;
yield
promisePreferencesOpened
;
}
)
;
add_task
(
function
*
test_verifiedUserEmptyProfile
(
)
{
let
promiseUpdateDone
=
promiseObserver
(
"
test
:
browser_fxaccounts
:
updateAppMenuItem
"
2
)
;
configureProfileURL
(
{
}
)
;
yield
setSignedInUser
(
true
)
;
yield
promiseUpdateDone
;
Assert
.
ok
(
isFooterVisible
(
)
)
Assert
.
equal
(
panelUILabel
.
getAttribute
(
"
label
"
)
"
foo
example
.
com
"
)
;
Assert
.
equal
(
panelUIStatus
.
getAttribute
(
"
tooltiptext
"
)
panelUIStatus
.
getAttribute
(
"
signedinTooltiptext
"
)
)
;
Assert
.
equal
(
panelUIFooter
.
getAttribute
(
"
fxastatus
"
)
"
signedin
"
)
;
let
promisePreferencesOpened
=
promiseObserver
(
"
test
:
browser_fxaccounts
:
openPreferences
"
)
;
panelUIStatus
.
click
(
)
;
yield
promisePreferencesOpened
;
yield
signOut
(
)
;
}
)
;
add_task
(
function
*
test_verifiedUserDisplayName
(
)
{
let
promiseUpdateDone
=
promiseObserver
(
"
test
:
browser_fxaccounts
:
updateAppMenuItem
"
2
)
;
configureProfileURL
(
{
displayName
:
"
Test
User
Display
Name
"
}
)
;
yield
setSignedInUser
(
true
)
;
yield
promiseUpdateDone
;
Assert
.
ok
(
isFooterVisible
(
)
)
Assert
.
equal
(
panelUILabel
.
getAttribute
(
"
label
"
)
"
Test
User
Display
Name
"
)
;
Assert
.
equal
(
panelUIStatus
.
getAttribute
(
"
tooltiptext
"
)
panelUIStatus
.
getAttribute
(
"
signedinTooltiptext
"
)
)
;
Assert
.
equal
(
panelUIFooter
.
getAttribute
(
"
fxastatus
"
)
"
signedin
"
)
;
yield
signOut
(
)
;
}
)
;
add_task
(
function
*
test_verifiedUserProfileFailure
(
)
{
let
promiseUpdateDone
=
promiseObserver
(
"
test
:
browser_fxaccounts
:
updateAppMenuItem
"
1
)
;
configureProfileURL
(
null
500
)
;
yield
setSignedInUser
(
true
)
;
yield
promiseUpdateDone
;
Assert
.
ok
(
isFooterVisible
(
)
)
Assert
.
equal
(
panelUILabel
.
getAttribute
(
"
label
"
)
"
foo
example
.
com
"
)
;
Assert
.
equal
(
panelUIStatus
.
getAttribute
(
"
tooltiptext
"
)
panelUIStatus
.
getAttribute
(
"
signedinTooltiptext
"
)
)
;
Assert
.
equal
(
panelUIFooter
.
getAttribute
(
"
fxastatus
"
)
"
signedin
"
)
;
yield
signOut
(
)
;
}
)
;
function
isFooterVisible
(
)
{
let
style
=
window
.
getComputedStyle
(
panelUIFooter
)
;
return
style
.
getPropertyValue
(
"
display
"
)
=
=
"
flex
"
;
}
function
configureProfileURL
(
profile
responseStatus
=
200
)
{
let
responseBody
=
profile
?
JSON
.
stringify
(
profile
)
:
"
"
;
let
url
=
TEST_ROOT
+
"
fxa_profile_handler
.
sjs
?
"
+
"
responseStatus
=
"
+
responseStatus
+
"
responseBody
=
"
+
responseBody
+
"
&
path
=
"
;
Services
.
prefs
.
setCharPref
(
"
identity
.
fxaccounts
.
remote
.
profile
.
uri
"
url
)
;
}
function
promiseObserver
(
topic
count
=
1
)
{
return
new
Promise
(
resolve
=
>
{
let
obs
=
(
aSubject
aTopic
aData
)
=
>
{
if
(
-
-
count
=
=
0
)
{
Services
.
obs
.
removeObserver
(
obs
aTopic
)
;
resolve
(
aSubject
)
;
}
}
Services
.
obs
.
addObserver
(
obs
topic
false
)
;
}
)
;
}
var
promiseTabOpen
=
Task
.
async
(
function
*
(
urlBase
)
{
info
(
"
Waiting
for
tab
to
open
.
.
.
"
)
;
let
event
=
yield
promiseWaitForEvent
(
gBrowser
.
tabContainer
"
TabOpen
"
true
)
;
let
tab
=
event
.
target
;
yield
promiseTabLoadEvent
(
tab
)
;
ok
(
tab
.
linkedBrowser
.
currentURI
.
spec
.
startsWith
(
urlBase
)
"
Got
"
+
tab
.
linkedBrowser
.
currentURI
.
spec
+
"
expecting
"
+
urlBase
)
;
let
whenUnloaded
=
promiseTabUnloaded
(
tab
)
;
gBrowser
.
removeTab
(
tab
)
;
yield
whenUnloaded
;
}
)
;
function
promiseTabUnloaded
(
tab
)
{
return
new
Promise
(
resolve
=
>
{
info
(
"
Wait
for
tab
to
unload
"
)
;
function
handle
(
event
)
{
tab
.
linkedBrowser
.
removeEventListener
(
"
unload
"
handle
true
)
;
info
(
"
Got
unload
event
"
)
;
resolve
(
event
)
;
}
tab
.
linkedBrowser
.
addEventListener
(
"
unload
"
handle
true
true
)
;
}
)
;
}
function
setSignedInUser
(
verified
)
{
let
data
=
{
email
:
"
foo
example
.
com
"
uid
:
"
1234
lcip
.
org
"
assertion
:
"
foobar
"
sessionToken
:
"
dead
"
kA
:
"
beef
"
kB
:
"
cafe
"
verified
oauthTokens
:
{
profile
:
"
key
value
"
}
}
return
fxAccounts
.
setSignedInUser
(
data
)
;
}
var
signOut
=
Task
.
async
(
function
*
(
)
{
let
promiseUpdateDone
=
promiseObserver
(
"
test
:
browser_fxaccounts
:
updateAppMenuItem
"
)
;
yield
fxAccounts
.
signOut
(
true
)
;
yield
promiseUpdateDone
;
}
)
;
