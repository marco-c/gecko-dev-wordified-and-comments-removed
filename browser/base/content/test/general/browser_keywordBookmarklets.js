"
use
strict
"
;
add_task
(
async
function
test_keyword_bookmarklet
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
let
bm
=
await
PlacesUtils
.
bookmarks
.
insert
(
{
parentGuid
:
PlacesUtils
.
bookmarks
.
unfiledGuid
title
:
"
bookmarklet
"
url
:
"
javascript
:
'
1
'
;
"
}
)
;
registerCleanupFunction
(
async
function
(
)
{
await
BrowserTestUtils
.
removeTab
(
tab
)
;
await
PlacesUtils
.
bookmarks
.
remove
(
bm
)
;
}
)
;
let
originalPrincipal
=
gBrowser
.
contentPrincipal
;
let
originalPrincipalURI
=
await
getPrincipalURI
(
tab
.
linkedBrowser
)
;
await
PlacesUtils
.
keywords
.
insert
(
{
keyword
:
"
bm
"
url
:
"
javascript
:
'
1
'
;
"
}
)
;
gURLBar
.
value
=
"
bm
"
;
gURLBar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
)
;
await
BrowserTestUtils
.
waitForContentEvent
(
gBrowser
.
selectedBrowser
"
pageshow
"
)
;
let
newPrincipalURI
=
await
getPrincipalURI
(
tab
.
linkedBrowser
)
;
is
(
newPrincipalURI
originalPrincipalURI
"
content
has
the
same
principal
"
)
;
if
(
tab
.
linkedBrowser
.
isRemoteBrowser
)
{
ok
(
originalPrincipal
.
isNullPrincipal
&
&
gBrowser
.
contentPrincipal
.
isNullPrincipal
"
both
principals
should
be
null
principals
in
the
parent
"
)
;
}
else
{
ok
(
gBrowser
.
contentPrincipal
.
equals
(
originalPrincipal
)
"
javascript
bookmarklet
should
inherit
principal
"
)
;
}
}
)
;
function
getPrincipalURI
(
browser
)
{
return
ContentTask
.
spawn
(
browser
null
function
(
)
{
return
content
.
document
.
nodePrincipal
.
URI
.
spec
;
}
)
;
}
