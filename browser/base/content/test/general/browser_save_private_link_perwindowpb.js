function
createTemporarySaveDirectory
(
)
{
var
saveDir
=
Cc
[
"
mozilla
.
org
/
file
/
directory_service
;
1
"
]
.
getService
(
Ci
.
nsIProperties
)
.
get
(
"
TmpD
"
Ci
.
nsIFile
)
;
saveDir
.
append
(
"
testsavedir
"
)
;
if
(
!
saveDir
.
exists
(
)
)
saveDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o755
)
;
return
saveDir
;
}
function
promiseNoCacheEntry
(
filename
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
Visitor
.
prototype
=
{
onCacheStorageInfo
(
num
consumption
)
{
info
(
"
disk
storage
contains
"
+
num
+
"
entries
"
)
;
}
onCacheEntryInfo
(
uri
)
{
let
urispec
=
uri
.
asciiSpec
;
info
(
urispec
)
;
is
(
urispec
.
includes
(
filename
)
false
"
web
content
present
in
disk
cache
"
)
;
}
onCacheEntryVisitCompleted
(
)
{
resolve
(
)
;
}
}
;
function
Visitor
(
)
{
}
let
cache
=
Cc
[
"
mozilla
.
org
/
netwerk
/
cache
-
storage
-
service
;
1
"
]
.
getService
(
Ci
.
nsICacheStorageService
)
;
let
{
LoadContextInfo
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
LoadContextInfo
.
jsm
"
null
)
;
let
storage
=
cache
.
diskCacheStorage
(
LoadContextInfo
.
default
false
)
;
storage
.
asyncVisitStorage
(
new
Visitor
(
)
true
)
;
}
)
;
}
function
promiseImageDownloaded
(
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
fileName
;
let
MockFilePicker
=
SpecialPowers
.
MockFilePicker
;
MockFilePicker
.
init
(
window
)
;
function
onTransferComplete
(
downloadSuccess
)
{
ok
(
downloadSuccess
"
Image
file
should
have
been
downloaded
successfully
"
+
fileName
)
;
resolve
(
fileName
)
;
}
var
destDir
=
createTemporarySaveDirectory
(
)
;
var
destFile
=
destDir
.
clone
(
)
;
MockFilePicker
.
displayDirectory
=
destDir
;
MockFilePicker
.
showCallback
=
function
(
fp
)
{
fileName
=
fp
.
defaultString
;
destFile
.
append
(
fileName
)
;
MockFilePicker
.
setFiles
(
[
destFile
]
)
;
MockFilePicker
.
filterIndex
=
1
;
}
;
mockTransferCallback
=
onTransferComplete
;
mockTransferRegisterer
.
register
(
)
;
registerCleanupFunction
(
function
(
)
{
mockTransferCallback
=
null
;
mockTransferRegisterer
.
unregister
(
)
;
MockFilePicker
.
cleanup
(
)
;
destDir
.
remove
(
true
)
;
}
)
;
}
)
;
}
add_task
(
function
*
(
)
{
let
testURI
=
"
http
:
/
/
mochi
.
test
:
8888
/
browser
/
browser
/
base
/
content
/
test
/
general
/
bug792517
.
html
"
;
let
privateWindow
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
privateWindow
.
gBrowser
testURI
)
;
let
contextMenu
=
privateWindow
.
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
let
popupHidden
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
yield
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
img
"
{
type
:
"
contextmenu
"
button
:
2
}
tab
.
linkedBrowser
)
;
yield
popupShown
;
let
cache
=
Cc
[
"
mozilla
.
org
/
netwerk
/
cache
-
storage
-
service
;
1
"
]
.
getService
(
Ci
.
nsICacheStorageService
)
;
cache
.
clear
(
)
;
let
imageDownloaded
=
promiseImageDownloaded
(
)
;
privateWindow
.
document
.
getElementById
(
"
context
-
saveimage
"
)
.
doCommand
(
)
;
contextMenu
.
hidePopup
(
)
;
yield
popupHidden
;
let
fileName
=
yield
imageDownloaded
;
yield
promiseNoCacheEntry
(
fileName
)
;
yield
BrowserTestUtils
.
closeWindow
(
privateWindow
)
;
}
)
;
Cc
[
"
mozilla
.
org
/
moz
/
jssubscript
-
loader
;
1
"
]
.
getService
(
Ci
.
mozIJSSubScriptLoader
)
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
toolkit
/
content
/
tests
/
browser
/
common
/
mockTransfer
.
js
"
this
)
;
