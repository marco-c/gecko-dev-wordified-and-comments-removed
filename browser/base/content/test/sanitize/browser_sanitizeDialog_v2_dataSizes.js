async
function
validateDataSizes
(
ClearHistoryDialogHelper
)
{
let
timespans
=
[
"
TIMESPAN_HOUR
"
"
TIMESPAN_2HOURS
"
"
TIMESPAN_4HOURS
"
"
TIMESPAN_TODAY
"
"
TIMESPAN_EVERYTHING
"
]
;
let
cacheUsage
=
await
SiteDataManager
.
getCacheSize
(
)
;
let
quotaUsage
=
await
SiteDataManager
.
getQuotaUsageForTimeRanges
(
timespans
)
;
for
(
let
i
=
0
;
i
<
timespans
.
length
;
i
+
+
)
{
ClearHistoryDialogHelper
.
selectDuration
(
Sanitizer
[
timespans
[
i
]
]
)
;
let
clearCookiesAndSiteDataCheckbox
=
ClearHistoryDialogHelper
.
win
.
document
.
getElementById
(
"
cookiesAndStorage
"
)
;
let
clearCacheCheckbox
=
ClearHistoryDialogHelper
.
win
.
document
.
getElementById
(
"
cache
"
)
;
let
[
convertedQuotaUsage
]
=
DownloadUtils
.
convertByteUnits
(
quotaUsage
[
timespans
[
i
]
]
)
;
let
[
convertedCacheUnit
]
=
DownloadUtils
.
convertByteUnits
(
cacheUsage
)
;
await
ClearHistoryDialogHelper
.
win
.
document
.
l10n
.
translateElements
(
[
clearCookiesAndSiteDataCheckbox
clearCacheCheckbox
]
)
;
ok
(
clearCacheCheckbox
.
label
.
includes
(
convertedCacheUnit
)
"
Should
show
the
cache
usage
"
)
;
ok
(
clearCookiesAndSiteDataCheckbox
.
label
.
includes
(
convertedQuotaUsage
)
Should
show
the
quota
usage
as
{
convertedQuotaUsage
}
)
;
}
}
async
function
clearAndValidateDataSizes
(
{
clearCache
clearDownloads
clearCookies
timespan
}
)
{
await
blankSlate
(
)
;
await
addToDownloadList
(
)
;
await
addToSiteUsage
(
)
;
let
promiseSanitized
=
promiseSanitizationComplete
(
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
dh
=
new
ClearHistoryDialogHelper
(
)
;
dh
.
onload
=
async
function
(
)
{
await
validateDataSizes
(
this
)
;
this
.
checkPrefCheckbox
(
"
cache
"
clearCache
)
;
this
.
checkPrefCheckbox
(
"
cookiesAndStorage
"
clearCookies
)
;
this
.
checkPrefCheckbox
(
"
historyFormDataAndDownloads
"
clearDownloads
)
;
this
.
selectDuration
(
timespan
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
onunload
=
async
function
(
)
{
await
promiseSanitized
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
let
dh2
=
new
ClearHistoryDialogHelper
(
)
;
dh2
.
onload
=
async
function
(
)
{
await
validateDataSizes
(
this
)
;
this
.
acceptDialog
(
)
;
}
;
dh2
.
open
(
)
;
await
dh2
.
promiseClosed
;
await
SiteDataTestUtils
.
clear
(
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
add_task
(
async
function
test_cookie_sizes
(
)
{
await
clearAndValidateDataSizes
(
{
clearCookies
:
true
clearCache
:
false
clearDownloads
:
false
timespan
:
Sanitizer
.
TIMESPAN_HOUR
}
)
;
await
clearAndValidateDataSizes
(
{
clearCookies
:
true
clearCache
:
false
clearDownloads
:
false
timespan
:
Sanitizer
.
TIMESPAN_4HOURS
}
)
;
await
clearAndValidateDataSizes
(
{
clearCookies
:
true
clearCache
:
false
clearDownloads
:
false
timespan
:
Sanitizer
.
TIMESPAN_EVERYTHING
}
)
;
}
)
;
add_task
(
async
function
test_cache_sizes
(
)
{
await
clearAndValidateDataSizes
(
{
clearCookies
:
false
clearCache
:
true
clearDownloads
:
false
timespan
:
Sanitizer
.
TIMESPAN_HOUR
}
)
;
await
clearAndValidateDataSizes
(
{
clearCookies
:
false
clearCache
:
true
clearDownloads
:
false
timespan
:
Sanitizer
.
TIMESPAN_4HOURS
}
)
;
await
clearAndValidateDataSizes
(
{
clearCookies
:
false
clearCache
:
true
clearDownloads
:
false
timespan
:
Sanitizer
.
TIMESPAN_EVERYTHING
}
)
;
}
)
;
add_task
(
async
function
test_all_data_sizes
(
)
{
await
clearAndValidateDataSizes
(
{
clearCookies
:
true
clearCache
:
true
clearDownloads
:
true
timespan
:
Sanitizer
.
TIMESPAN_HOUR
}
)
;
await
clearAndValidateDataSizes
(
{
clearCookies
:
true
clearCache
:
true
clearDownloads
:
true
timespan
:
Sanitizer
.
TIMESPAN_4HOURS
}
)
;
await
clearAndValidateDataSizes
(
{
clearCookies
:
true
clearCache
:
true
clearDownloads
:
true
timespan
:
Sanitizer
.
TIMESPAN_EVERYTHING
}
)
;
}
)
;
