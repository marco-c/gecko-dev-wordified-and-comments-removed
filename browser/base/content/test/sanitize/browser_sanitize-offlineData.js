const
{
SiteDataTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
SiteDataTestUtils
.
sys
.
mjs
"
)
;
const
{
PromiseTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
PromiseTestUtils
.
sys
.
mjs
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
sas
"
"
mozilla
.
org
/
storage
/
activity
-
service
;
1
"
"
nsIStorageActivityService
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
swm
"
"
mozilla
.
org
/
serviceworkers
/
manager
;
1
"
"
nsIServiceWorkerManager
"
)
;
const
oneHour
=
3600000000
;
const
fiveHours
=
oneHour
*
5
;
const
itemsToClear
=
[
"
cookies
"
"
offlineApps
"
]
;
function
waitForUnregister
(
host
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
onUnregister
:
registration
=
>
{
if
(
registration
.
principal
.
host
!
=
host
)
{
return
;
}
swm
.
removeListener
(
listener
)
;
resolve
(
registration
)
;
}
}
;
swm
.
addListener
(
listener
)
;
}
)
;
}
async
function
createData
(
host
)
{
let
origin
=
"
https
:
/
/
"
+
host
;
let
dummySWURL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
origin
)
+
"
dummy
.
js
"
;
await
SiteDataTestUtils
.
addToIndexedDB
(
origin
)
;
await
SiteDataTestUtils
.
addServiceWorker
(
dummySWURL
)
;
}
function
moveOriginInTime
(
principals
endDate
host
)
{
for
(
let
i
=
0
;
i
<
principals
.
length
;
+
+
i
)
{
let
principal
=
principals
.
queryElementAt
(
i
Ci
.
nsIPrincipal
)
;
if
(
principal
.
host
=
=
host
)
{
sas
.
moveOriginInTime
(
principal
endDate
-
fiveHours
)
;
return
true
;
}
}
return
false
;
}
add_task
(
async
function
testWithRange
(
)
{
PromiseTestUtils
.
allowMatchingRejectionsGlobally
(
/
NS_ERROR_ABORT
/
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
serviceWorkers
.
enabled
"
true
]
[
"
dom
.
serviceWorkers
.
exemptFromPerDomainMax
"
true
]
[
"
dom
.
serviceWorkers
.
testing
.
enabled
"
true
]
]
}
)
;
sas
.
testOnlyReset
(
)
;
let
endDate
=
Date
.
now
(
)
*
1000
;
let
principals
=
sas
.
getActiveOrigins
(
endDate
-
oneHour
endDate
)
;
is
(
principals
.
length
0
"
starting
from
clear
activity
state
"
)
;
info
(
"
sanitize
:
"
+
itemsToClear
.
join
(
"
"
)
)
;
await
Sanitizer
.
sanitize
(
itemsToClear
{
ignoreTimespan
:
false
}
)
;
await
createData
(
"
example
.
org
"
)
;
await
createData
(
"
example
.
com
"
)
;
endDate
=
Date
.
now
(
)
*
1000
;
principals
=
sas
.
getActiveOrigins
(
endDate
-
oneHour
endDate
)
;
ok
(
!
!
principals
"
We
have
an
active
origin
.
"
)
;
ok
(
principals
.
length
>
=
2
"
We
have
an
active
origin
.
"
)
;
let
found
=
0
;
for
(
let
i
=
0
;
i
<
principals
.
length
;
+
+
i
)
{
let
principal
=
principals
.
queryElementAt
(
i
Ci
.
nsIPrincipal
)
;
if
(
principal
.
host
=
=
"
example
.
org
"
|
|
principal
.
host
=
=
"
example
.
com
"
)
{
found
+
+
;
}
}
is
(
found
2
"
Our
origins
are
active
.
"
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
org
"
)
"
We
have
indexedDB
data
for
example
.
org
"
)
;
ok
(
SiteDataTestUtils
.
hasServiceWorkers
(
"
https
:
/
/
example
.
org
"
)
"
We
have
serviceWorker
data
for
example
.
org
"
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
com
"
)
"
We
have
indexedDB
data
for
example
.
com
"
)
;
ok
(
SiteDataTestUtils
.
hasServiceWorkers
(
"
https
:
/
/
example
.
com
"
)
"
We
have
serviceWorker
data
for
example
.
com
"
)
;
ok
(
moveOriginInTime
(
principals
endDate
"
example
.
com
"
)
"
Operation
completed
!
"
)
;
let
p
=
waitForUnregister
(
"
example
.
org
"
)
;
info
(
"
sanitize
:
"
+
itemsToClear
.
join
(
"
"
)
)
;
await
Sanitizer
.
sanitize
(
itemsToClear
{
ignoreTimespan
:
false
}
)
;
await
p
;
ok
(
!
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
org
"
)
)
"
We
don
'
t
have
indexedDB
data
for
example
.
org
"
)
;
ok
(
!
SiteDataTestUtils
.
hasServiceWorkers
(
"
https
:
/
/
example
.
org
"
)
"
We
don
'
t
have
serviceWorker
data
for
example
.
org
"
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
com
"
)
"
We
still
have
indexedDB
data
for
example
.
com
"
)
;
ok
(
SiteDataTestUtils
.
hasServiceWorkers
(
"
https
:
/
/
example
.
com
"
)
"
We
still
have
serviceWorker
data
for
example
.
com
"
)
;
ok
(
moveOriginInTime
(
principals
endDate
"
example
.
com
"
)
"
Operation
completed
!
"
)
;
info
(
"
sanitize
again
to
ensure
clearing
doesn
'
t
expand
the
activity
scope
"
)
;
await
Sanitizer
.
sanitize
(
itemsToClear
{
ignoreTimespan
:
false
}
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
com
"
)
"
We
still
have
indexedDB
data
for
example
.
com
"
)
;
ok
(
SiteDataTestUtils
.
hasServiceWorkers
(
"
https
:
/
/
example
.
com
"
)
"
We
still
have
serviceWorker
data
for
example
.
com
"
)
;
ok
(
!
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
org
"
)
)
"
We
don
'
t
have
indexedDB
data
for
example
.
org
"
)
;
ok
(
!
SiteDataTestUtils
.
hasServiceWorkers
(
"
https
:
/
/
example
.
org
"
)
"
We
don
'
t
have
serviceWorker
data
for
example
.
org
"
)
;
sas
.
testOnlyReset
(
)
;
await
SiteDataTestUtils
.
clear
(
)
;
}
)
;
add_task
(
async
function
testExceptionsOnShutdown
(
)
{
await
createData
(
"
example
.
org
"
)
;
await
createData
(
"
example
.
com
"
)
;
let
originALLOW
=
"
https
:
/
/
example
.
org
"
;
PermissionTestUtils
.
add
(
originALLOW
"
cookie
"
Ci
.
nsICookiePermission
.
ACCESS_ALLOW
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
org
"
)
"
We
have
indexedDB
data
for
example
.
org
"
)
;
ok
(
SiteDataTestUtils
.
hasServiceWorkers
(
"
https
:
/
/
example
.
org
"
)
"
We
have
serviceWorker
data
for
example
.
org
"
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
com
"
)
"
We
have
indexedDB
data
for
example
.
com
"
)
;
ok
(
SiteDataTestUtils
.
hasServiceWorkers
(
"
https
:
/
/
example
.
com
"
)
"
We
have
serviceWorker
data
for
example
.
com
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
sanitizer
.
loglevel
"
"
All
"
]
[
"
privacy
.
clearOnShutdown
.
offlineApps
"
true
]
[
"
privacy
.
sanitize
.
sanitizeOnShutdown
"
true
]
]
}
)
;
await
Sanitizer
.
runSanitizeOnShutdown
(
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
org
"
)
"
We
still
have
indexedDB
data
for
example
.
org
"
)
;
ok
(
SiteDataTestUtils
.
hasServiceWorkers
(
"
https
:
/
/
example
.
org
"
)
"
We
still
have
serviceWorker
data
for
example
.
org
"
)
;
ok
(
!
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
com
"
)
)
"
We
don
'
t
have
indexedDB
data
for
example
.
com
"
)
;
ok
(
!
SiteDataTestUtils
.
hasServiceWorkers
(
"
https
:
/
/
example
.
com
"
)
"
We
don
'
t
have
serviceWorker
data
for
example
.
com
"
)
;
await
SiteDataTestUtils
.
clear
(
)
;
Services
.
perms
.
removeAll
(
)
;
}
)
;
