const
{
Sanitizer
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
Sanitizer
.
jsm
"
)
;
const
{
SiteDataTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
SiteDataTestUtils
.
jsm
"
)
;
add_task
(
async
function
subDomains1
(
)
{
info
(
"
Test
subdomains
and
custom
setting
"
)
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
resolve
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
lifetimePolicy
"
Ci
.
nsICookieService
.
ACCEPT_NORMALLY
]
[
"
browser
.
sanitizer
.
loglevel
"
"
All
"
]
]
}
)
;
let
originA
=
"
https
:
/
/
www
.
mozilla
.
org
"
;
PermissionTestUtils
.
add
(
originA
"
cookie
"
Ci
.
nsICookiePermission
.
ACCESS_SESSION
)
;
SiteDataTestUtils
.
addToCookies
(
{
origin
:
originA
}
)
;
await
SiteDataTestUtils
.
addToIndexedDB
(
originA
)
;
let
originB
=
"
https
:
/
/
mozilla
.
org
"
;
PermissionTestUtils
.
add
(
originB
"
cookie
"
Ci
.
nsICookiePermission
.
ACCESS_ALLOW
)
;
SiteDataTestUtils
.
addToCookies
(
{
origin
:
originB
}
)
;
await
SiteDataTestUtils
.
addToIndexedDB
(
originB
)
;
ok
(
SiteDataTestUtils
.
hasCookies
(
originA
)
"
We
have
cookies
for
"
+
originA
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originA
)
"
We
have
IDB
for
"
+
originA
)
;
ok
(
SiteDataTestUtils
.
hasCookies
(
originB
)
"
We
have
cookies
for
"
+
originB
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originB
)
"
We
have
IDB
for
"
+
originB
)
;
await
Sanitizer
.
runSanitizeOnShutdown
(
)
;
ok
(
!
SiteDataTestUtils
.
hasCookies
(
originA
)
"
We
should
not
have
cookies
for
"
+
originA
)
;
ok
(
!
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originA
)
)
"
We
should
not
have
IDB
for
"
+
originA
)
;
ok
(
SiteDataTestUtils
.
hasCookies
(
originB
)
"
We
have
cookies
for
"
+
originB
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originB
)
"
We
have
IDB
for
"
+
originB
)
;
PermissionTestUtils
.
remove
(
originA
"
cookie
"
)
;
PermissionTestUtils
.
remove
(
originB
"
cookie
"
)
;
}
)
;
add_task
(
async
function
subDomains2
(
)
{
info
(
"
Test
subdomains
and
custom
setting
with
cookieBehavior
=
=
2
"
)
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
resolve
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
lifetimePolicy
"
Ci
.
nsICookieService
.
ACCEPT_SESSION
]
[
"
browser
.
sanitizer
.
loglevel
"
"
All
"
]
]
}
)
;
let
originA
=
"
https
:
/
/
sub
.
mozilla
.
org
"
;
PermissionTestUtils
.
add
(
originA
"
cookie
"
Ci
.
nsICookiePermission
.
ACCESS_ALLOW
)
;
SiteDataTestUtils
.
addToCookies
(
{
origin
:
originA
}
)
;
await
SiteDataTestUtils
.
addToIndexedDB
(
originA
)
;
let
originB
=
"
https
:
/
/
www
.
mozilla
.
org
"
;
SiteDataTestUtils
.
addToCookies
(
{
origin
:
originB
}
)
;
await
SiteDataTestUtils
.
addToIndexedDB
(
originB
)
;
ok
(
SiteDataTestUtils
.
hasCookies
(
originA
)
"
We
have
cookies
for
"
+
originA
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originA
)
"
We
have
IDB
for
"
+
originA
)
;
ok
(
SiteDataTestUtils
.
hasCookies
(
originB
)
"
We
have
cookies
for
"
+
originB
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originB
)
"
We
have
IDB
for
"
+
originB
)
;
await
Sanitizer
.
runSanitizeOnShutdown
(
)
;
ok
(
SiteDataTestUtils
.
hasCookies
(
originA
)
"
We
have
cookies
for
"
+
originA
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originA
)
"
We
have
IDB
for
"
+
originA
)
;
ok
(
!
SiteDataTestUtils
.
hasCookies
(
originB
)
"
We
should
not
have
cookies
for
"
+
originB
)
;
ok
(
!
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originB
)
)
"
We
should
not
have
IDB
for
"
+
originB
)
;
PermissionTestUtils
.
remove
(
originA
"
cookie
"
)
;
}
)
;
add_task
(
async
function
subDomains3
(
)
{
info
(
"
Test
base
domain
and
subdomains
and
custom
setting
with
cookieBehavior
=
=
2
"
)
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
Ci
.
nsIClearDataService
.
CLEAR_ALL
resolve
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
cookie
.
lifetimePolicy
"
Ci
.
nsICookieService
.
ACCEPT_SESSION
]
[
"
browser
.
sanitizer
.
loglevel
"
"
All
"
]
]
}
)
;
let
originA
=
"
https
:
/
/
sub
.
mozilla
.
org
"
;
PermissionTestUtils
.
add
(
originA
"
cookie
"
Ci
.
nsICookiePermission
.
ACCESS_ALLOW
)
;
SiteDataTestUtils
.
addToCookies
(
{
origin
:
originA
}
)
;
await
SiteDataTestUtils
.
addToIndexedDB
(
originA
)
;
let
originB
=
"
https
:
/
/
mozilla
.
org
"
;
SiteDataTestUtils
.
addToCookies
(
{
origin
:
originB
}
)
;
await
SiteDataTestUtils
.
addToIndexedDB
(
originB
)
;
let
originC
=
"
https
:
/
/
www
.
mozilla
.
org
"
;
SiteDataTestUtils
.
addToCookies
(
{
origin
:
originC
}
)
;
await
SiteDataTestUtils
.
addToIndexedDB
(
originC
)
;
ok
(
SiteDataTestUtils
.
hasCookies
(
originA
)
"
We
have
cookies
for
"
+
originA
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originA
)
"
We
have
IDB
for
"
+
originA
)
;
ok
(
SiteDataTestUtils
.
hasCookies
(
originB
)
"
We
have
cookies
for
"
+
originB
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originB
)
"
We
have
IDB
for
"
+
originB
)
;
ok
(
SiteDataTestUtils
.
hasCookies
(
originC
)
"
We
have
cookies
for
"
+
originC
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originC
)
"
We
have
IDB
for
"
+
originC
)
;
await
Sanitizer
.
runSanitizeOnShutdown
(
)
;
ok
(
SiteDataTestUtils
.
hasCookies
(
originA
)
"
We
have
cookies
for
"
+
originA
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originA
)
"
We
have
IDB
for
"
+
originA
)
;
ok
(
SiteDataTestUtils
.
hasCookies
(
originB
)
"
We
have
cookies
for
"
+
originB
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originB
)
"
We
have
IDB
for
"
+
originB
)
;
ok
(
!
SiteDataTestUtils
.
hasCookies
(
originC
)
"
We
should
not
have
cookies
for
"
+
originC
)
;
ok
(
!
(
await
SiteDataTestUtils
.
hasIndexedDB
(
originC
)
)
"
We
should
not
have
IDB
for
"
+
originC
)
;
PermissionTestUtils
.
remove
(
originA
"
cookie
"
)
;
}
)
;
