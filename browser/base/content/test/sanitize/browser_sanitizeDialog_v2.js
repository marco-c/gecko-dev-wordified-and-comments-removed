ChromeUtils
.
defineESModuleGetters
(
this
{
PlacesTestUtils
:
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
sys
.
mjs
"
Timer
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
sys
.
mjs
"
PermissionTestUtils
:
"
resource
:
/
/
testing
-
common
/
PermissionTestUtils
.
sys
.
mjs
"
Downloads
:
"
resource
:
/
/
gre
/
modules
/
Downloads
.
sys
.
mjs
"
}
)
;
async
function
promiseHistoryClearedState
(
aURIs
aShouldBeCleared
)
{
for
(
let
uri
of
aURIs
)
{
let
visited
=
await
PlacesUtils
.
history
.
hasVisits
(
uri
)
;
Assert
.
equal
(
visited
!
aShouldBeCleared
history
visit
{
uri
.
spec
}
should
{
aShouldBeCleared
?
"
no
longer
"
:
"
still
"
}
exist
)
;
}
}
function
boolPrefIs
(
aPrefName
aExpectedVal
aMsg
)
{
is
(
Services
.
prefs
.
getBoolPref
(
"
privacy
.
"
+
aPrefName
)
aExpectedVal
aMsg
)
;
}
async
function
downloadExists
(
aPath
)
{
let
publicList
=
await
Downloads
.
getList
(
Downloads
.
PUBLIC
)
;
let
listArray
=
await
publicList
.
getAll
(
)
;
return
listArray
.
some
(
i
=
>
i
.
target
.
path
=
=
aPath
)
;
}
async
function
ensureDownloadsClearedState
(
aDownloadIDs
aShouldBeCleared
)
{
let
niceStr
=
aShouldBeCleared
?
"
no
longer
"
:
"
still
"
;
for
(
let
id
of
aDownloadIDs
)
{
is
(
await
downloadExists
(
id
)
!
aShouldBeCleared
"
download
"
+
id
+
"
should
"
+
niceStr
+
"
exist
"
)
;
}
}
async
function
formNameExists
(
name
)
{
return
!
!
(
await
FormHistory
.
count
(
{
fieldname
:
name
}
)
)
;
}
function
promiseAddFormEntryWithMinutesAgo
(
aMinutesAgo
)
{
let
name
=
aMinutesAgo
+
"
-
minutes
-
ago
"
;
let
timestamp
=
nowUSec
-
aMinutesAgo
*
kUsecPerMin
;
return
FormHistory
.
update
(
{
op
:
"
add
"
fieldname
:
name
value
:
"
dummy
"
firstUsed
:
timestamp
}
)
;
}
async
function
addDownloadWithMinutesAgo
(
aExpectedPathList
aMinutesAgo
)
{
let
publicList
=
await
Downloads
.
getList
(
Downloads
.
PUBLIC
)
;
let
name
=
"
fakefile
-
"
+
aMinutesAgo
+
"
-
minutes
-
ago
"
;
let
download
=
await
Downloads
.
createDownload
(
{
source
:
"
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
480169
"
target
:
name
}
)
;
download
.
startTime
=
new
Date
(
nowMSec
-
aMinutesAgo
*
kMsecPerMin
)
;
download
.
canceled
=
true
;
publicList
.
add
(
download
)
;
ok
(
await
downloadExists
(
name
)
"
Sanity
check
:
download
"
+
name
+
"
should
exist
after
creating
it
"
)
;
aExpectedPathList
.
push
(
name
)
;
}
add_setup
(
async
function
(
)
{
requestLongerTimeout
(
3
)
;
await
blankSlate
(
)
;
registerCleanupFunction
(
async
function
(
)
{
await
blankSlate
(
)
;
await
PlacesTestUtils
.
promiseAsyncUpdates
(
)
;
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
sanitize
.
useOldClearHistoryDialog
"
false
]
]
}
)
;
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
function
intPrefIs
(
aPrefName
aExpectedVal
aMsg
)
{
is
(
Services
.
prefs
.
getIntPref
(
"
privacy
.
"
+
aPrefName
)
aExpectedVal
aMsg
)
;
}
function
visitTimeForMinutesAgo
(
aMinutesAgo
)
{
return
nowUSec
-
aMinutesAgo
*
kUsecPerMin
;
}
async
function
performActionsOnDialog
(
{
context
=
"
browser
"
timespan
=
Sanitizer
.
TIMESPAN_HOUR
browsingHistoryAndDownloads
=
true
cookiesAndStorage
=
true
cache
=
false
siteSettings
=
false
formData
=
false
}
)
{
let
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
context
}
)
;
dh
.
onload
=
function
(
)
{
this
.
selectDuration
(
timespan
)
;
this
.
checkPrefCheckbox
(
"
browsingHistoryAndDownloads
"
browsingHistoryAndDownloads
)
;
this
.
checkPrefCheckbox
(
"
cookiesAndStorage
"
cookiesAndStorage
)
;
this
.
checkPrefCheckbox
(
"
cache
"
cache
)
;
this
.
checkPrefCheckbox
(
"
siteSettings
"
siteSettings
)
;
this
.
checkPrefCheckbox
(
"
formdata
"
formData
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
add_task
(
async
function
default_state
(
)
{
let
dh
=
new
ClearHistoryDialogHelper
(
)
;
dh
.
onload
=
function
(
)
{
this
.
selectDuration
(
Sanitizer
.
TIMESPAN_HOUR
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
)
;
add_task
(
async
function
test_cancel
(
)
{
let
uris
=
[
]
;
let
places
=
[
]
;
let
pURI
;
for
(
let
i
=
0
;
i
<
30
;
i
+
+
)
{
pURI
=
makeURI
(
"
https
:
/
/
"
+
i
+
"
-
minutes
-
ago
.
com
/
"
)
;
places
.
push
(
{
uri
:
pURI
visitDate
:
visitTimeForMinutesAgo
(
i
)
}
)
;
uris
.
push
(
pURI
)
;
}
await
PlacesTestUtils
.
addVisits
(
places
)
;
let
dh
=
new
ClearHistoryDialogHelper
(
)
;
dh
.
onload
=
function
(
)
{
this
.
selectDuration
(
Sanitizer
.
TIMESPAN_HOUR
)
;
this
.
checkPrefCheckbox
(
"
browsingHistoryAndDownloads
"
false
)
;
this
.
cancelDialog
(
)
;
}
;
dh
.
onunload
=
async
function
(
)
{
await
promiseHistoryClearedState
(
uris
false
)
;
await
blankSlate
(
)
;
await
promiseHistoryClearedState
(
uris
true
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
)
;
add_task
(
async
function
test_pref_remembering
(
)
{
let
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
clearSiteData
"
}
)
;
dh
.
onload
=
function
(
)
{
this
.
checkPrefCheckbox
(
"
cookiesAndStorage
"
false
)
;
this
.
checkPrefCheckbox
(
"
siteSettings
"
true
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
clearSiteData
"
}
)
;
dh
.
onload
=
function
(
)
{
this
.
validateCheckbox
(
"
cookiesAndStorage
"
false
)
;
this
.
validateCheckbox
(
"
siteSettings
"
true
)
;
this
.
checkPrefCheckbox
(
"
cookiesAndStorage
"
true
)
;
this
.
checkPrefCheckbox
(
"
siteSettings
"
false
)
;
this
.
cancelDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
clearSiteData
"
}
)
;
dh
.
onload
=
function
(
)
{
this
.
validateCheckbox
(
"
cookiesAndStorage
"
false
)
;
this
.
validateCheckbox
(
"
siteSettings
"
true
)
;
this
.
cancelDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
clearHistory
"
}
)
;
dh
.
onload
=
function
(
)
{
this
.
checkPrefCheckbox
(
"
cookiesAndStorage
"
true
)
;
this
.
checkPrefCheckbox
(
"
siteSettings
"
false
)
;
this
.
checkPrefCheckbox
(
"
cache
"
false
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
browser
"
}
)
;
dh
.
onload
=
function
(
)
{
this
.
validateCheckbox
(
"
cookiesAndStorage
"
true
)
;
this
.
validateCheckbox
(
"
siteSettings
"
false
)
;
this
.
validateCheckbox
(
"
cache
"
false
)
;
this
.
cancelDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
)
;
add_task
(
async
function
test_everything
(
)
{
let
uris
=
[
]
;
let
places
=
[
]
;
let
pURI
;
[
10
70
130
250
]
.
forEach
(
function
(
aValue
)
{
pURI
=
makeURI
(
"
https
:
/
/
"
+
aValue
+
"
-
minutes
-
ago
.
com
/
"
)
;
places
.
push
(
{
uri
:
pURI
visitDate
:
visitTimeForMinutesAgo
(
aValue
)
}
)
;
uris
.
push
(
pURI
)
;
}
)
;
let
promiseSanitized
=
promiseSanitizationComplete
(
)
;
await
PlacesTestUtils
.
addVisits
(
places
)
;
let
dh
=
new
ClearHistoryDialogHelper
(
)
;
dh
.
onload
=
function
(
)
{
is
(
this
.
isWarningPanelVisible
(
)
false
"
Warning
panel
should
be
hidden
after
previously
accepting
dialog
"
+
"
with
a
predefined
timespan
"
)
;
this
.
selectDuration
(
Sanitizer
.
TIMESPAN_EVERYTHING
)
;
this
.
checkPrefCheckbox
(
"
browsingHistoryAndDownloads
"
true
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
onunload
=
async
function
(
)
{
await
promiseSanitized
;
intPrefIs
(
"
sanitize
.
timeSpan
"
Sanitizer
.
TIMESPAN_EVERYTHING
"
timeSpan
pref
should
be
everything
after
accepting
dialog
"
+
"
with
everything
selected
"
)
;
await
promiseHistoryClearedState
(
uris
true
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
)
;
add_task
(
async
function
test_everything_warning
(
)
{
let
uris
=
[
]
;
let
places
=
[
]
;
let
pURI
;
[
10
70
130
250
]
.
forEach
(
function
(
aValue
)
{
pURI
=
makeURI
(
"
https
:
/
/
"
+
aValue
+
"
-
minutes
-
ago
.
com
/
"
)
;
places
.
push
(
{
uri
:
pURI
visitDate
:
visitTimeForMinutesAgo
(
aValue
)
}
)
;
uris
.
push
(
pURI
)
;
}
)
;
let
promiseSanitized
=
promiseSanitizationComplete
(
)
;
await
PlacesTestUtils
.
addVisits
(
places
)
;
let
dh
=
new
ClearHistoryDialogHelper
(
)
;
dh
.
onload
=
function
(
)
{
is
(
this
.
isWarningPanelVisible
(
)
true
"
Warning
panel
should
be
visible
after
previously
accepting
dialog
"
+
"
with
clearing
everything
"
)
;
this
.
selectDuration
(
Sanitizer
.
TIMESPAN_EVERYTHING
)
;
this
.
checkPrefCheckbox
(
"
browsingHistoryAndDownloads
"
true
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
onunload
=
async
function
(
)
{
intPrefIs
(
"
sanitize
.
timeSpan
"
Sanitizer
.
TIMESPAN_EVERYTHING
"
timeSpan
pref
should
be
everything
after
accepting
dialog
"
+
"
with
everything
selected
"
)
;
await
promiseSanitized
;
await
promiseHistoryClearedState
(
uris
true
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
)
;
add_task
(
async
function
testAcceptButtonDisabled
(
)
{
let
dh
=
new
ClearHistoryDialogHelper
(
)
;
dh
.
onload
=
async
function
(
)
{
let
clearButton
=
this
.
win
.
document
.
querySelector
(
"
dialog
"
)
.
getButton
(
"
accept
"
)
;
this
.
uncheckAllCheckboxes
(
)
;
await
new
Promise
(
resolve
=
>
SimpleTest
.
executeSoon
(
resolve
)
)
;
is
(
clearButton
.
disabled
true
"
Clear
button
should
be
disabled
"
)
;
this
.
checkPrefCheckbox
(
"
cache
"
true
)
;
await
new
Promise
(
resolve
=
>
SimpleTest
.
executeSoon
(
resolve
)
)
;
is
(
clearButton
.
disabled
false
"
Clear
button
should
not
be
disabled
"
)
;
this
.
cancelDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
)
;
add_task
(
async
function
testWarningBoxInClearOnShutdown
(
)
{
let
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
clearSiteData
"
}
)
;
dh
.
onload
=
function
(
)
{
this
.
selectDuration
(
Sanitizer
.
TIMESPAN_EVERYTHING
)
;
is
(
BrowserTestUtils
.
isVisible
(
this
.
getWarningPanel
(
)
)
true
warning
panel
should
be
visible
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
clearOnShutdown
"
}
)
;
dh
.
onload
=
function
(
)
{
is
(
BrowserTestUtils
.
isVisible
(
this
.
getWarningPanel
(
)
)
false
warning
panel
should
not
be
visible
)
;
this
.
cancelDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
)
;
add_task
(
async
function
test_history_downloads_checked
(
)
{
let
downloadIDs
=
[
]
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
await
addDownloadWithMinutesAgo
(
downloadIDs
i
)
;
}
let
olderDownloadIDs
=
[
]
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
await
addDownloadWithMinutesAgo
(
olderDownloadIDs
61
+
i
)
;
}
let
uris
=
[
]
;
let
places
=
[
]
;
let
pURI
;
for
(
let
i
=
0
;
i
<
30
;
i
+
+
)
{
pURI
=
makeURI
(
"
https
:
/
/
"
+
i
+
"
-
minutes
-
ago
.
com
/
"
)
;
places
.
push
(
{
uri
:
pURI
visitDate
:
visitTimeForMinutesAgo
(
i
)
}
)
;
uris
.
push
(
pURI
)
;
}
let
olderURIs
=
[
]
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
pURI
=
makeURI
(
"
https
:
/
/
"
+
(
61
+
i
)
+
"
-
minutes
-
ago
.
com
/
"
)
;
places
.
push
(
{
uri
:
pURI
visitDate
:
visitTimeForMinutesAgo
(
61
+
i
)
}
)
;
olderURIs
.
push
(
pURI
)
;
}
let
promiseSanitized
=
promiseSanitizationComplete
(
)
;
await
PlacesTestUtils
.
addVisits
(
places
)
;
let
dh
=
new
ClearHistoryDialogHelper
(
)
;
dh
.
onload
=
function
(
)
{
this
.
selectDuration
(
Sanitizer
.
TIMESPAN_HOUR
)
;
this
.
checkPrefCheckbox
(
"
browsingHistoryAndDownloads
"
true
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
onunload
=
async
function
(
)
{
intPrefIs
(
"
sanitize
.
timeSpan
"
Sanitizer
.
TIMESPAN_HOUR
"
timeSpan
pref
should
be
hour
after
accepting
dialog
with
"
+
"
hour
selected
"
)
;
await
promiseSanitized
;
await
promiseHistoryClearedState
(
uris
true
)
;
await
ensureDownloadsClearedState
(
downloadIDs
true
)
;
await
promiseHistoryClearedState
(
olderURIs
false
)
;
await
ensureDownloadsClearedState
(
olderDownloadIDs
false
)
;
await
blankSlate
(
)
;
await
promiseHistoryClearedState
(
olderURIs
true
)
;
await
ensureDownloadsClearedState
(
olderDownloadIDs
true
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
)
;
add_task
(
async
function
test_cannot_clear_history
(
)
{
let
formEntries
=
[
await
promiseAddFormEntryWithMinutesAgo
(
10
)
]
;
let
promiseSanitized
=
promiseSanitizationComplete
(
)
;
let
pURI
=
makeURI
(
"
https
:
/
/
"
+
10
+
"
-
minutes
-
ago
.
com
/
"
)
;
await
PlacesTestUtils
.
addVisits
(
{
uri
:
pURI
visitDate
:
visitTimeForMinutesAgo
(
10
)
}
)
;
let
uris
=
[
pURI
]
;
let
dh
=
new
ClearHistoryDialogHelper
(
)
;
dh
.
onload
=
function
(
)
{
var
cb
=
this
.
win
.
document
.
querySelectorAll
(
"
checkbox
[
id
=
'
browsingHistoryAndDownloads
'
]
"
)
;
ok
(
cb
.
length
=
=
1
&
&
!
cb
[
0
]
.
disabled
"
There
is
history
checkbox
to
clear
history
should
be
enabled
.
"
)
;
this
.
checkPrefCheckbox
(
"
formdata
"
true
)
;
this
.
checkPrefCheckbox
(
"
browsingHistoryAndDownloads
"
true
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
onunload
=
async
function
(
)
{
await
promiseSanitized
;
await
promiseHistoryClearedState
(
uris
true
)
;
let
exists
=
await
formNameExists
(
formEntries
[
0
]
)
;
ok
(
!
exists
"
form
entry
"
+
formEntries
[
0
]
+
"
should
no
longer
exist
"
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
)
;
add_task
(
async
function
test_no_history_to_clear
(
)
{
let
promiseSanitized
=
promiseSanitizationComplete
(
)
;
let
dh
=
new
ClearHistoryDialogHelper
(
)
;
dh
.
onload
=
function
(
)
{
var
cb
=
this
.
win
.
document
.
querySelectorAll
(
"
checkbox
[
id
=
'
browsingHistoryAndDownloads
'
]
"
)
;
ok
(
cb
.
length
=
=
1
&
&
!
cb
[
0
]
.
disabled
&
&
cb
[
0
]
.
checked
"
There
is
no
history
but
history
checkbox
should
always
be
enabled
"
+
"
and
will
be
checked
from
previous
preference
.
"
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
await
promiseSanitized
;
}
)
;
add_task
(
async
function
test_form_entries
(
)
{
let
formEntry
=
await
promiseAddFormEntryWithMinutesAgo
(
10
)
;
let
promiseSanitized
=
promiseSanitizationComplete
(
)
;
let
dh
=
new
ClearHistoryDialogHelper
(
)
;
dh
.
onload
=
function
(
)
{
var
cb
=
this
.
win
.
document
.
querySelectorAll
(
"
checkbox
[
id
=
'
formdata
'
]
"
)
;
is
(
cb
.
length
1
"
There
is
only
one
checkbox
for
form
data
"
)
;
ok
(
!
cb
[
0
]
.
disabled
"
The
checkbox
is
enabled
"
)
;
ok
(
cb
[
0
]
.
checked
"
The
checkbox
is
checked
"
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
onunload
=
async
function
(
)
{
await
promiseSanitized
;
let
exists
=
await
formNameExists
(
formEntry
)
;
ok
(
!
exists
"
form
entry
"
+
formEntry
+
"
should
no
longer
exist
"
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
)
;
add_task
(
async
function
test_clear_on_shutdown
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
sanitize
.
sanitizeOnShutdown
"
true
]
]
}
)
;
let
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
clearOnShutdown
"
}
)
;
dh
.
onload
=
async
function
(
)
{
this
.
uncheckAllCheckboxes
(
)
;
this
.
checkPrefCheckbox
(
"
browsingHistoryAndDownloads
"
false
)
;
this
.
checkPrefCheckbox
(
"
cookiesAndStorage
"
true
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
let
downloadIDs
=
[
]
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
await
addDownloadWithMinutesAgo
(
downloadIDs
i
)
;
}
let
olderDownloadIDs
=
[
]
;
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
await
addDownloadWithMinutesAgo
(
olderDownloadIDs
61
+
i
)
;
}
boolPrefIs
(
"
clearOnShutdown_v2
.
browsingHistoryAndDownloads
"
false
"
clearOnShutdown_v2
history
should
be
false
"
)
;
boolPrefIs
(
"
clearOnShutdown_v2
.
cookiesAndStorage
"
true
"
clearOnShutdown_v2
cookies
should
be
true
"
)
;
boolPrefIs
(
"
clearOnShutdown_v2
.
cache
"
false
"
clearOnShutdown_v2
cache
should
be
false
"
)
;
await
createDummyDataForHost
(
"
example
.
org
"
)
;
await
createDummyDataForHost
(
"
example
.
com
"
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
org
"
)
"
We
have
indexedDB
data
for
example
.
org
"
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
com
"
)
"
We
have
indexedDB
data
for
example
.
com
"
)
;
await
Sanitizer
.
runSanitizeOnShutdown
(
)
;
ok
(
!
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
org
"
)
)
"
We
don
'
t
have
indexedDB
data
for
example
.
org
"
)
;
ok
(
!
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
com
"
)
)
"
We
don
'
t
have
indexedDB
data
for
example
.
com
"
)
;
await
ensureDownloadsClearedState
(
downloadIDs
false
)
;
await
ensureDownloadsClearedState
(
olderDownloadIDs
false
)
;
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
clearOnShutdown
"
}
)
;
dh
.
onload
=
async
function
(
)
{
this
.
uncheckAllCheckboxes
(
)
;
this
.
checkPrefCheckbox
(
"
browsingHistoryAndDownloads
"
true
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
boolPrefIs
(
"
clearOnShutdown_v2
.
browsingHistoryAndDownloads
"
true
"
clearOnShutdown_v2
history
should
be
true
"
)
;
boolPrefIs
(
"
clearOnShutdown_v2
.
cookiesAndStorage
"
false
"
clearOnShutdown_v2
cookies
should
be
false
"
)
;
boolPrefIs
(
"
clearOnShutdown_v2
.
cache
"
false
"
clearOnShutdown_v2
cache
should
be
false
"
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
org
"
)
"
We
have
indexedDB
data
for
example
.
org
"
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
com
"
)
"
We
have
indexedDB
data
for
example
.
com
"
)
;
await
Sanitizer
.
runSanitizeOnShutdown
(
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
org
"
)
"
We
have
indexedDB
data
for
example
.
org
"
)
;
ok
(
await
SiteDataTestUtils
.
hasIndexedDB
(
"
https
:
/
/
example
.
com
"
)
"
We
have
indexedDB
data
for
example
.
com
"
)
;
await
ensureDownloadsClearedState
(
downloadIDs
true
)
;
await
ensureDownloadsClearedState
(
olderDownloadIDs
true
)
;
await
SiteDataTestUtils
.
clear
(
)
;
}
)
;
add_task
(
async
function
testEntryPointTelemetry
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
const
EXPECTED_CONTEXT_COUNTS
=
{
browser
:
3
clearHistory
:
2
clearSiteData
:
1
}
;
for
(
let
key
in
EXPECTED_CONTEXT_COUNTS
)
{
let
count
=
0
;
for
(
let
i
=
0
;
i
<
EXPECTED_CONTEXT_COUNTS
[
key
]
;
i
+
+
)
{
await
performActionsOnDialog
(
{
context
:
key
}
)
;
}
let
contextTelemetry
=
Glean
.
privacySanitize
.
dialogOpen
.
testGetValue
(
)
;
for
(
let
object
of
contextTelemetry
)
{
if
(
object
.
extra
.
context
=
=
key
)
{
count
+
=
1
;
}
}
is
(
count
EXPECTED_CONTEXT_COUNTS
[
key
]
There
should
be
{
EXPECTED_CONTEXT_COUNTS
[
key
]
}
opens
from
{
key
}
context
)
;
}
}
)
;
add_task
(
async
function
testTimespanTelemetry
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
const
EXPECTED_TIMESPANS
=
[
Sanitizer
.
TIMESPAN_HOUR
Sanitizer
.
TIMESPAN_2HOURS
Sanitizer
.
TIMESPAN_4HOURS
Sanitizer
.
TIMESPAN_EVERYTHING
]
;
for
(
let
timespan
of
EXPECTED_TIMESPANS
)
{
await
performActionsOnDialog
(
{
timespan
}
)
;
}
for
(
let
index
in
EXPECTED_TIMESPANS
)
{
is
(
Glean
.
privacySanitize
.
clearingTimeSpanSelected
.
testGetValue
(
)
[
index
]
.
extra
.
time_span
EXPECTED_TIMESPANS
[
index
]
.
toString
(
)
Selected
timespan
should
be
{
EXPECTED_TIMESPANS
[
index
]
}
)
;
}
}
)
;
add_task
(
async
function
testLoadtimeTelemetry
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
let
EXPECTED_CONTEXT_COUNTS
=
{
browser
:
2
clearHistory
:
3
clearSiteData
:
2
}
;
for
(
let
context
in
EXPECTED_CONTEXT_COUNTS
)
{
for
(
let
i
=
0
;
i
<
EXPECTED_CONTEXT_COUNTS
[
context
]
;
i
+
+
)
{
await
performActionsOnDialog
(
{
context
}
)
;
}
}
let
loadTimeDistribution
=
Glean
.
privacySanitize
.
loadTime
.
testGetValue
(
)
;
let
expectedNumberOfCounts
=
Object
.
entries
(
EXPECTED_CONTEXT_COUNTS
)
.
reduce
(
(
acc
[
value
]
)
=
>
acc
+
value
0
)
;
is
(
Object
.
entries
(
loadTimeDistribution
.
values
)
.
reduce
(
(
acc
[
count
]
)
=
>
acc
+
count
0
)
expectedNumberOfCounts
Only
{
expectedNumberOfCounts
}
buckets
with
samples
)
;
}
)
;
add_task
(
async
function
testClearingOptionsTelemetry
(
)
{
Services
.
fog
.
testResetFOG
(
)
;
let
expectedObject
=
{
context
:
"
clearSiteData
"
history_and_downloads
:
"
true
"
cookies_and_storage
:
"
false
"
cache
:
"
true
"
site_settings
:
"
true
"
form_data
:
"
false
"
}
;
await
performActionsOnDialog
(
{
context
:
"
clearSiteData
"
browsingHistoryAndDownloads
:
true
cookiesAndStorage
:
false
cache
:
true
siteSettings
:
true
formData
:
false
}
)
;
let
telemetryObject
=
Glean
.
privacySanitize
.
clear
.
testGetValue
(
)
;
Assert
.
equal
(
telemetryObject
.
length
1
"
There
should
be
only
1
telemetry
object
recorded
"
)
;
Assert
.
deepEqual
(
expectedObject
telemetryObject
[
0
]
.
extra
Expected
{
telemetryObject
}
to
be
the
same
as
{
expectedObject
}
)
;
}
)
;
add_task
(
async
function
testClearHistoryCheckboxStatesAfterMigration
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
cpd
.
history
"
false
]
[
"
privacy
.
cpd
.
formdata
"
true
]
[
"
privacy
.
cpd
.
cookies
"
true
]
[
"
privacy
.
cpd
.
offlineApps
"
false
]
[
"
privacy
.
cpd
.
sessions
"
false
]
[
"
privacy
.
cpd
.
siteSettings
"
false
]
[
"
privacy
.
cpd
.
cache
"
true
]
[
"
privacy
.
clearHistory
.
cookiesAndStorage
"
false
]
[
"
privacy
.
sanitize
.
cpd
.
hasMigratedToNewPrefs2
"
false
]
[
"
privacy
.
sanitize
.
cpd
.
hasMigratedToNewPrefs3
"
false
]
]
}
)
;
let
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
clearHistory
"
}
)
;
dh
.
onload
=
function
(
)
{
this
.
validateCheckbox
(
"
cookiesAndStorage
"
true
)
;
this
.
validateCheckbox
(
"
browsingHistoryAndDownloads
"
false
)
;
this
.
validateCheckbox
(
"
formdata
"
true
)
;
this
.
validateCheckbox
(
"
cache
"
true
)
;
this
.
validateCheckbox
(
"
siteSettings
"
false
)
;
this
.
checkPrefCheckbox
(
"
siteSettings
"
true
)
;
this
.
checkPrefCheckbox
(
"
cookiesAndStorage
"
false
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
is
(
Services
.
prefs
.
getBoolPref
(
"
privacy
.
sanitize
.
cpd
.
hasMigratedToNewPrefs3
"
)
true
"
Migration
is
complete
for
cpd
branch
"
)
;
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
clearHistory
"
}
)
;
dh
.
onload
=
function
(
)
{
this
.
validateCheckbox
(
"
siteSettings
"
true
)
;
this
.
validateCheckbox
(
"
cookiesAndStorage
"
false
)
;
this
.
cancelDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
)
;
add_task
(
async
function
testClearHistoryCheckboxStatesAfterMigration3
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
cpd
.
history
"
false
]
[
"
privacy
.
cpd
.
formdata
"
true
]
[
"
privacy
.
cpd
.
cookies
"
true
]
[
"
privacy
.
cpd
.
offlineApps
"
false
]
[
"
privacy
.
cpd
.
sessions
"
false
]
[
"
privacy
.
cpd
.
siteSettings
"
false
]
[
"
privacy
.
cpd
.
cache
"
true
]
[
"
privacy
.
clearHistory
.
cookiesAndStorage
"
false
]
[
"
privacy
.
clearHistory
.
historyFormDataAndDownloads
"
false
]
[
"
privacy
.
sanitize
.
cpd
.
hasMigratedToNewPrefs2
"
true
]
[
"
privacy
.
sanitize
.
cpd
.
hasMigratedToNewPrefs3
"
false
]
]
}
)
;
let
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
clearHistory
"
}
)
;
dh
.
onload
=
function
(
)
{
this
.
validateCheckbox
(
"
cookiesAndStorage
"
true
)
;
this
.
validateCheckbox
(
"
browsingHistoryAndDownloads
"
false
)
;
this
.
validateCheckbox
(
"
formdata
"
false
)
;
this
.
validateCheckbox
(
"
cache
"
true
)
;
this
.
validateCheckbox
(
"
siteSettings
"
false
)
;
this
.
checkPrefCheckbox
(
"
siteSettings
"
true
)
;
this
.
checkPrefCheckbox
(
"
cookiesAndStorage
"
false
)
;
this
.
acceptDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
is
(
Services
.
prefs
.
getBoolPref
(
"
privacy
.
sanitize
.
cpd
.
hasMigratedToNewPrefs3
"
)
true
"
Migration
is
complete
for
cpd
branch
"
)
;
dh
=
new
ClearHistoryDialogHelper
(
{
mode
:
"
clearHistory
"
}
)
;
dh
.
onload
=
function
(
)
{
this
.
validateCheckbox
(
"
siteSettings
"
true
)
;
this
.
validateCheckbox
(
"
cookiesAndStorage
"
false
)
;
this
.
cancelDialog
(
)
;
}
;
dh
.
open
(
)
;
await
dh
.
promiseClosed
;
}
)
;
