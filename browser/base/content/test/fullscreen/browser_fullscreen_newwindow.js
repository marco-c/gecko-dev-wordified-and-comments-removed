"
use
strict
"
;
add_task
(
async
function
test_fullscreen_new_window
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
full
-
screen
-
api
.
enabled
"
true
]
[
"
full
-
screen
-
api
.
allow
-
trusted
-
requests
-
only
"
false
]
]
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
example
.
org
/
browser
/
browser
/
base
/
content
/
test
/
fullscreen
/
fullscreen
.
html
"
)
;
let
fullScreenEntered
=
BrowserTestUtils
.
waitForEvent
(
document
"
fullscreenchange
"
false
(
)
=
>
document
.
fullscreenElement
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
content
.
document
.
getElementById
(
"
request
"
)
.
click
(
)
;
}
)
;
await
fullScreenEntered
;
let
newWindowPromise
=
BrowserTestUtils
.
waitForNewWindow
(
{
url
:
"
about
:
blank
"
}
)
;
EventUtils
.
synthesizeKey
(
"
N
"
{
accelKey
:
true
}
)
;
let
newWindow
=
await
newWindowPromise
;
is
(
newWindow
.
document
.
activeElement
newWindow
.
gURLBar
.
inputField
"
url
bar
is
focused
after
new
window
opened
"
)
;
ok
(
!
newWindow
.
fullScreen
"
The
new
chrome
window
should
not
be
in
fullscreen
"
)
;
ok
(
!
newWindow
.
document
.
documentElement
.
hasAttribute
(
"
inDOMFullscreen
"
)
"
The
new
chrome
document
should
not
be
in
fullscreen
"
)
;
await
new
Promise
(
resolve
=
>
TestUtils
.
executeSoon
(
resolve
)
)
;
ok
(
window
.
fullScreen
"
The
original
chrome
window
should
be
still
in
fullscreen
"
)
;
ok
(
document
.
documentElement
.
hasAttribute
(
"
inDOMFullscreen
"
)
"
The
original
chrome
document
should
be
still
in
fullscreen
"
)
;
await
BrowserTestUtils
.
closeWindow
(
newWindow
)
;
await
SimpleTest
.
promiseFocus
(
window
)
;
let
fullScreenExited
=
BrowserTestUtils
.
waitForEvent
(
document
"
fullscreenchange
"
false
(
)
=
>
!
document
.
fullscreenElement
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
fullScreenExited
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
