const
restoreWindowToNormal
=
async
(
)
=
>
{
while
(
window
.
windowState
!
=
window
.
STATE_NORMAL
)
{
info
(
Calling
window
.
restore
(
)
to
try
to
reach
"
normal
"
state
{
window
.
STATE_NORMAL
}
.
)
;
let
promiseSizeModeChange
=
BrowserTestUtils
.
waitForEvent
(
window
"
sizemodechange
"
)
;
window
.
restore
(
)
;
await
promiseSizeModeChange
;
info
(
Window
reached
state
{
window
.
windowState
}
.
)
;
}
}
;
add_task
(
async
function
(
)
{
registerCleanupFunction
(
function
(
)
{
window
.
restore
(
)
;
}
)
;
let
promiseSizeModeChange
;
let
promiseFullscreen
;
await
restoreWindowToNormal
(
)
;
ok
(
!
window
.
fullScreen
"
Window
should
not
be
fullscreen
at
start
of
test
.
"
)
;
info
(
"
Requesting
fullscreen
.
"
)
;
promiseFullscreen
=
document
.
documentElement
.
requestFullscreen
(
)
;
await
promiseFullscreen
;
ok
(
window
.
fullScreen
"
Window
should
be
fullscreen
before
being
minimized
.
"
)
;
info
(
"
Requesting
minimize
on
a
fullscreen
window
.
"
)
;
promiseSizeModeChange
=
BrowserTestUtils
.
waitForEvent
(
window
"
sizemodechange
"
)
;
window
.
minimize
(
)
;
await
promiseSizeModeChange
;
is
(
window
.
windowState
window
.
STATE_MINIMIZED
"
Window
should
be
minimized
after
fullscreen
.
"
)
;
await
restoreWindowToNormal
(
)
;
info
(
"
Requesting
minimize
on
a
normal
window
.
"
)
;
promiseSizeModeChange
=
BrowserTestUtils
.
waitForEvent
(
window
"
sizemodechange
"
)
;
window
.
minimize
(
)
;
await
promiseSizeModeChange
;
is
(
window
.
windowState
window
.
STATE_MINIMIZED
"
Window
should
be
minimized
before
fullscreen
.
"
)
;
info
(
"
Requesting
fullscreen
on
a
minimized
window
.
"
)
;
promiseFullscreen
=
document
.
documentElement
.
requestFullscreen
(
)
;
await
promiseFullscreen
;
ok
(
window
.
fullScreen
"
Window
should
be
fullscreen
after
being
minimized
.
"
)
;
}
)
;
