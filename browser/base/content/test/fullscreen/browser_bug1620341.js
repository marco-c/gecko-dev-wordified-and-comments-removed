"
use
strict
"
;
const
tab1URL
=
data
:
text
/
html
<
html
xmlns
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
/
>
<
title
>
First
tab
to
be
loaded
<
/
title
>
<
/
head
>
<
body
>
<
button
>
JUST
A
BUTTON
<
/
button
>
<
/
body
>
<
/
html
>
;
const
ORIGIN
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
fullscreen
/
fullscreen_frame
.
html
"
;
add_task
(
async
function
test_fullscreen_cross_origin
(
)
{
async
function
requestFullscreenThenCloseTab
(
)
{
await
BrowserTestUtils
.
withNewTab
(
ORIGIN
async
function
(
browser
)
{
info
(
"
Start
fullscreen
on
iframe
frameAllowed
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
document
.
documentElement
.
hasAttribute
(
"
inDOMFullscreen
"
)
)
;
let
tabbrowser
=
browser
.
ownerDocument
.
querySelector
(
"
#
tabbrowser
-
tabs
"
)
;
ok
(
!
tabbrowser
.
hasAttribute
(
"
closebuttons
"
)
"
Close
buttons
should
be
visible
on
every
tab
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
let
frame
=
content
.
document
.
getElementById
(
"
frameAllowed
"
)
;
frame
.
focus
(
)
;
await
SpecialPowers
.
spawn
(
frame
[
]
async
(
)
=
>
{
let
frameDoc
=
content
.
document
;
const
waitForFullscreen
=
new
Promise
(
resolve
=
>
{
const
message
=
"
fullscreenchange
"
;
function
handler
(
evt
)
{
frameDoc
.
removeEventListener
(
message
handler
)
;
Assert
.
equal
(
evt
.
type
message
Request
should
be
allowed
)
;
resolve
(
)
;
}
frameDoc
.
addEventListener
(
message
handler
)
;
}
)
;
frameDoc
.
getElementById
(
"
request
"
)
.
click
(
)
;
await
waitForFullscreen
;
}
)
;
}
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
document
.
documentElement
.
hasAttribute
(
"
inDOMFullscreen
"
)
)
;
ok
(
tabbrowser
.
hasAttribute
(
"
closebuttons
"
)
"
Close
buttons
should
be
visible
only
on
the
active
tab
(
tabs
have
width
=
0
so
closebuttons
gets
set
on
them
)
"
)
;
}
)
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
full
-
screen
-
api
.
enabled
"
true
]
[
"
full
-
screen
-
api
.
allow
-
trusted
-
requests
-
only
"
false
]
[
"
full
-
screen
-
api
.
transition
-
duration
.
enter
"
"
0
0
"
]
[
"
full
-
screen
-
api
.
transition
-
duration
.
leave
"
"
0
0
"
]
[
"
dom
.
security
.
featurePolicy
.
header
.
enabled
"
true
]
[
"
dom
.
security
.
featurePolicy
.
webidl
.
enabled
"
true
]
]
}
)
;
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tab1URL
true
)
;
await
requestFullscreenThenCloseTab
(
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
document
.
documentElement
.
hasAttribute
(
"
inDOMFullscreen
"
)
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
gBrowser
.
tabContainer
.
hasAttribute
(
"
closebuttons
"
)
"
Close
buttons
should
come
back
to
every
tab
"
)
;
let
tabClosed
=
BrowserTestUtils
.
waitForTabClosing
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
await
tabClosed
;
}
)
;
