function
promiseCrashReport
(
expectedExtra
=
{
}
)
{
return
(
async
function
(
)
{
info
(
"
Starting
wait
on
crash
-
report
-
status
"
)
;
let
[
subject
]
=
await
TestUtils
.
topicObserved
(
"
crash
-
report
-
status
"
(
unused
data
)
=
>
{
return
data
=
=
"
success
"
;
}
)
;
info
(
"
Topic
observed
!
"
)
;
if
(
!
(
subject
instanceof
Ci
.
nsIPropertyBag2
)
)
{
throw
new
Error
(
"
Subject
was
not
a
Ci
.
nsIPropertyBag2
"
)
;
}
let
remoteID
=
getPropertyBagValue
(
subject
"
serverCrashID
"
)
;
if
(
!
remoteID
)
{
throw
new
Error
(
"
Report
should
have
a
server
ID
"
)
;
}
let
file
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsILocalFile
)
;
file
.
initWithPath
(
Services
.
crashmanager
.
_submittedDumpsDir
)
;
file
.
append
(
remoteID
+
"
.
txt
"
)
;
if
(
!
file
.
exists
(
)
)
{
throw
new
Error
(
"
Report
should
have
been
received
by
the
server
"
)
;
}
file
.
remove
(
false
)
;
let
extra
=
getPropertyBagValue
(
subject
"
extra
"
)
;
if
(
!
(
extra
instanceof
Ci
.
nsIPropertyBag2
)
)
{
throw
new
Error
(
"
extra
was
not
a
Ci
.
nsIPropertyBag2
"
)
;
}
info
(
"
Iterating
crash
report
extra
keys
"
)
;
let
enumerator
=
extra
.
enumerator
;
while
(
enumerator
.
hasMoreElements
(
)
)
{
let
key
=
enumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIProperty
)
.
name
;
let
value
=
extra
.
getPropertyAsAString
(
key
)
;
if
(
key
in
expectedExtra
)
{
if
(
expectedExtra
[
key
]
=
=
null
)
{
ok
(
false
Got
unexpected
key
{
key
}
with
value
{
value
}
)
;
}
else
{
is
(
value
expectedExtra
[
key
]
Crash
report
had
the
right
extra
value
for
{
key
}
)
;
}
}
}
}
)
(
)
;
}
function
getPropertyBagValue
(
bag
key
)
{
try
{
let
val
=
bag
.
getProperty
(
key
)
;
return
val
;
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_FAILURE
)
{
throw
e
;
}
}
return
null
;
}
async
function
setupLocalCrashReportServer
(
)
{
const
SERVER_URL
=
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
crashreporter
/
test
/
browser
/
crashreport
.
sjs
"
;
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIEnvironment
)
;
let
noReport
=
env
.
get
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
)
;
let
serverUrl
=
env
.
get
(
"
MOZ_CRASHREPORTER_URL
"
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
"
"
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_URL
"
SERVER_URL
)
;
registerCleanupFunction
(
function
(
)
{
env
.
set
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
noReport
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_URL
"
serverUrl
)
;
}
)
;
}
