"
use
strict
"
;
const
PAGE
=
"
data
:
text
/
html
<
html
>
<
body
>
A
%
20regular
%
20everyday
%
20normal
%
20page
.
"
;
const
EMAIL
=
"
foo
privacy
.
com
"
;
add_task
(
async
function
setup
(
)
{
await
setupLocalCrashReportServer
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
crashReporting
.
requestEmail
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_clear_email
(
)
{
return
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE
}
async
function
(
browser
)
{
let
prefs
=
TabCrashHandler
.
prefs
;
let
originalSendReport
=
prefs
.
getBoolPref
(
"
sendReport
"
)
;
let
originalEmailMe
=
prefs
.
getBoolPref
(
"
emailMe
"
)
;
let
originalIncludeURL
=
prefs
.
getBoolPref
(
"
includeURL
"
)
;
let
originalEmail
=
prefs
.
getCharPref
(
"
email
"
)
;
prefs
.
setCharPref
(
"
email
"
EMAIL
)
;
prefs
.
setBoolPref
(
"
emailMe
"
true
)
;
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
await
BrowserTestUtils
.
crashFrame
(
browser
true
false
)
;
let
doc
=
browser
.
contentDocument
;
let
emailMe
=
doc
.
getElementById
(
"
emailMe
"
)
;
emailMe
.
checked
=
false
;
let
crashReport
=
promiseCrashReport
(
{
Email
:
"
"
}
)
;
let
restoreTab
=
browser
.
contentDocument
.
getElementById
(
"
restoreTab
"
)
;
restoreTab
.
click
(
)
;
await
BrowserTestUtils
.
waitForEvent
(
tab
"
SSTabRestored
"
)
;
await
crashReport
;
is
(
prefs
.
getCharPref
(
"
email
"
)
"
"
"
No
email
address
should
be
stored
"
)
;
prefs
.
setBoolPref
(
"
sendReport
"
originalSendReport
)
;
prefs
.
setBoolPref
(
"
emailMe
"
originalEmailMe
)
;
prefs
.
setBoolPref
(
"
includeURL
"
originalIncludeURL
)
;
prefs
.
setCharPref
(
"
email
"
originalEmail
)
;
}
)
;
}
)
;
