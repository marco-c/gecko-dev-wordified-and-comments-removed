"
use
strict
"
;
add_task
(
async
function
test_launchfail_foreground
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
"
async
browser
=
>
{
let
tabcrashed
=
BrowserTestUtils
.
waitForEvent
(
browser
"
AboutTabCrashedReady
"
false
null
true
)
;
await
BrowserTestUtils
.
simulateProcessLaunchFail
(
browser
)
;
Assert
.
equal
(
0
TabCrashHandler
.
queuedCrashedBrowsers
"
No
crashed
browsers
should
be
queued
.
"
)
;
await
tabcrashed
;
}
)
;
}
)
;
add_task
(
async
function
test_launchfail_background
(
)
{
let
originalTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
withNewTab
(
"
http
:
/
/
example
.
com
"
async
browser
=
>
{
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
originalTab
)
;
let
tabcrashed
=
BrowserTestUtils
.
waitForEvent
(
browser
"
AboutTabCrashedReady
"
false
null
true
)
;
await
BrowserTestUtils
.
simulateProcessLaunchFail
(
browser
)
;
Assert
.
equal
(
0
TabCrashHandler
.
queuedCrashedBrowsers
"
No
crashed
browsers
should
be
queued
.
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
await
tabcrashed
;
}
)
;
}
)
;
