"
use
strict
"
;
const
PAGE
=
"
http
:
/
/
example
.
com
"
;
async
function
assertShowingMultipleUI
(
browser
expected
)
{
let
showingMultiple
=
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
return
(
content
.
document
.
getElementById
(
"
main
"
)
.
getAttribute
(
"
multiple
"
)
=
=
"
true
"
)
;
}
)
;
Assert
.
equal
(
showingMultiple
expected
"
Got
the
expected
'
multiple
'
state
.
"
)
;
}
function
snapshotCount
(
snapshot
)
{
return
Object
.
values
(
snapshot
.
values
)
.
reduce
(
(
a
b
)
=
>
a
+
b
0
)
;
}
async
function
switchToAndCrashTab
(
tab
)
{
let
browser
=
tab
.
linkedBrowser
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
let
tabcrashed
=
BrowserTestUtils
.
waitForEvent
(
browser
"
AboutTabCrashedReady
"
false
null
true
)
;
await
BrowserTestUtils
.
crashFrame
(
browser
)
;
await
tabcrashed
;
}
add_task
(
async
function
test_multiple_tabcrashed_pages
(
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
FX_CONTENT_CRASH_NOT_SUBMITTED
"
)
;
histogram
.
clear
(
)
;
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PAGE
)
;
let
browser1
=
tab1
.
linkedBrowser
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PAGE
)
;
let
browser2
=
tab2
.
linkedBrowser
;
let
tab3
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
PAGE
)
;
let
browser3
=
tab3
.
linkedBrowser
;
await
switchToAndCrashTab
(
tab1
)
;
Assert
.
ok
(
tab1
.
hasAttribute
(
"
crashed
"
)
"
tab1
has
crashed
"
)
;
Assert
.
ok
(
!
tab2
.
hasAttribute
(
"
crashed
"
)
"
tab2
has
not
crashed
"
)
;
Assert
.
ok
(
!
tab3
.
hasAttribute
(
"
crashed
"
)
"
tab3
has
not
crashed
"
)
;
await
assertShowingMultipleUI
(
browser1
false
)
;
await
switchToAndCrashTab
(
tab2
)
;
Assert
.
ok
(
tab1
.
hasAttribute
(
"
crashed
"
)
"
tab1
is
still
crashed
"
)
;
Assert
.
ok
(
tab2
.
hasAttribute
(
"
crashed
"
)
"
tab2
has
crashed
"
)
;
Assert
.
ok
(
!
tab3
.
hasAttribute
(
"
crashed
"
)
"
tab3
has
not
crashed
"
)
;
await
assertShowingMultipleUI
(
browser1
true
)
;
await
assertShowingMultipleUI
(
browser2
true
)
;
await
switchToAndCrashTab
(
tab3
)
;
Assert
.
ok
(
tab1
.
hasAttribute
(
"
crashed
"
)
"
tab1
is
still
crashed
"
)
;
Assert
.
ok
(
tab2
.
hasAttribute
(
"
crashed
"
)
"
tab2
is
still
crashed
"
)
;
Assert
.
ok
(
tab3
.
hasAttribute
(
"
crashed
"
)
"
tab3
has
crashed
"
)
;
await
assertShowingMultipleUI
(
browser1
true
)
;
await
assertShowingMultipleUI
(
browser2
true
)
;
await
assertShowingMultipleUI
(
browser3
true
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
await
assertShowingMultipleUI
(
browser2
true
)
;
await
assertShowingMultipleUI
(
browser3
true
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
await
assertShowingMultipleUI
(
browser3
false
)
;
BrowserTestUtils
.
removeTab
(
tab3
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
snapshotCount
(
histogram
.
snapshot
(
)
)
=
=
1
;
}
Collected
value
should
become
1
.
)
;
histogram
.
clear
(
)
;
}
)
;
