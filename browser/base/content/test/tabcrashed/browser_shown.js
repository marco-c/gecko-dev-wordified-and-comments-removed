"
use
strict
"
;
const
SERVER_URL
=
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
crashreporter
/
test
/
browser
/
crashreport
.
sjs
"
;
const
PAGE
=
"
data
:
text
/
html
<
html
>
<
body
>
A
%
20regular
%
20everyday
%
20normal
%
20page
.
"
;
const
COMMENTS
=
"
Here
'
s
my
test
comment
!
"
;
const
EMAIL
=
"
foo
privacy
.
com
"
;
add_task
(
function
*
setup
(
)
{
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIEnvironment
)
;
let
noReport
=
env
.
get
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
)
;
let
serverUrl
=
env
.
get
(
"
MOZ_CRASHREPORTER_URL
"
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
"
"
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_URL
"
SERVER_URL
)
;
requestLongerTimeout
(
2
)
;
registerCleanupFunction
(
function
(
)
{
env
.
set
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
noReport
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_URL
"
serverUrl
)
;
}
)
;
}
)
;
function
crashTabTestHelper
(
fieldValues
expectedExtra
)
{
return
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE
}
function
*
(
browser
)
{
let
prefs
=
TabCrashHandler
.
prefs
;
let
originalSendReport
=
prefs
.
getBoolPref
(
"
sendReport
"
)
;
let
originalEmailMe
=
prefs
.
getBoolPref
(
"
emailMe
"
)
;
let
originalIncludeURL
=
prefs
.
getBoolPref
(
"
includeURL
"
)
;
let
originalEmail
=
prefs
.
getCharPref
(
"
email
"
)
;
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
yield
BrowserTestUtils
.
crashBrowser
(
browser
)
;
let
doc
=
browser
.
contentDocument
;
let
comments
=
doc
.
getElementById
(
"
comments
"
)
;
let
email
=
doc
.
getElementById
(
"
email
"
)
;
let
emailMe
=
doc
.
getElementById
(
"
emailMe
"
)
;
let
includeURL
=
doc
.
getElementById
(
"
includeURL
"
)
;
if
(
fieldValues
.
hasOwnProperty
(
"
comments
"
)
)
{
comments
.
value
=
fieldValues
.
comments
;
}
if
(
fieldValues
.
hasOwnProperty
(
"
email
"
)
)
{
email
.
value
=
fieldValues
.
email
;
}
if
(
fieldValues
.
hasOwnProperty
(
"
emailMe
"
)
)
{
emailMe
.
checked
=
fieldValues
.
emailMe
;
}
if
(
fieldValues
.
hasOwnProperty
(
"
includeURL
"
)
)
{
includeURL
.
checked
=
fieldValues
.
includeURL
;
}
let
crashReport
=
promiseCrashReport
(
expectedExtra
)
;
let
restoreTab
=
browser
.
contentDocument
.
getElementById
(
"
restoreTab
"
)
;
restoreTab
.
click
(
)
;
yield
BrowserTestUtils
.
waitForEvent
(
tab
"
SSTabRestored
"
)
;
yield
crashReport
;
prefs
.
setBoolPref
(
"
sendReport
"
originalSendReport
)
;
prefs
.
setBoolPref
(
"
emailMe
"
originalEmailMe
)
;
prefs
.
setBoolPref
(
"
includeURL
"
originalIncludeURL
)
;
prefs
.
setCharPref
(
"
email
"
originalEmail
)
;
}
)
;
}
add_task
(
function
*
test_default
(
)
{
yield
crashTabTestHelper
(
{
}
{
"
Comments
"
:
null
"
URL
"
:
"
"
"
Email
"
:
null
}
)
;
}
)
;
add_task
(
function
*
test_just_a_comment
(
)
{
yield
crashTabTestHelper
(
{
comments
:
COMMENTS
}
{
"
Comments
"
:
COMMENTS
"
URL
"
:
"
"
"
Email
"
:
null
}
)
;
}
)
;
add_task
(
function
*
test_no_email
(
)
{
yield
crashTabTestHelper
(
{
email
:
EMAIL
emailMe
:
false
}
{
"
Comments
"
:
null
"
URL
"
:
"
"
"
Email
"
:
null
}
)
;
}
)
;
add_task
(
function
*
test_yes_email
(
)
{
yield
crashTabTestHelper
(
{
email
:
EMAIL
emailMe
:
true
}
{
"
Comments
"
:
null
"
URL
"
:
"
"
"
Email
"
:
EMAIL
}
)
;
}
)
;
add_task
(
function
*
test_send_URL
(
)
{
yield
crashTabTestHelper
(
{
includeURL
:
true
}
{
"
Comments
"
:
null
"
URL
"
:
PAGE
"
Email
"
:
null
}
)
;
}
)
;
add_task
(
function
*
test_send_all
(
)
{
yield
crashTabTestHelper
(
{
includeURL
:
true
emailMe
:
true
email
:
EMAIL
comments
:
COMMENTS
}
{
"
Comments
"
:
COMMENTS
"
URL
"
:
PAGE
"
Email
"
:
EMAIL
}
)
;
}
)
;
