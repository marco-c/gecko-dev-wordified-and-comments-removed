"
use
strict
"
;
const
PAGE
=
"
data
:
text
/
html
<
html
>
<
body
>
A
%
20regular
%
20everyday
%
20normal
%
20page
.
"
;
const
COMMENTS
=
"
Here
'
s
my
test
comment
!
"
;
requestLongerTimeout
(
2
)
;
add_setup
(
async
function
(
)
{
await
setupLocalCrashReportServer
(
)
;
}
)
;
function
crashTabTestHelper
(
fieldValues
expectedExtra
shouldFail
=
false
)
{
return
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE
}
async
function
(
browser
)
{
let
prefs
=
TabCrashHandler
.
prefs
;
let
originalSendReport
=
prefs
.
getBoolPref
(
"
sendReport
"
)
;
let
originalIncludeURL
=
prefs
.
getBoolPref
(
"
includeURL
"
)
;
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
await
BrowserTestUtils
.
crashFrame
(
browser
)
;
let
doc
=
browser
.
contentDocument
;
let
comments
=
doc
.
getElementById
(
"
comments
"
)
;
let
includeURL
=
doc
.
getElementById
(
"
includeURL
"
)
;
if
(
fieldValues
.
hasOwnProperty
(
"
comments
"
)
)
{
comments
.
value
=
fieldValues
.
comments
;
}
if
(
fieldValues
.
hasOwnProperty
(
"
includeURL
"
)
)
{
includeURL
.
checked
=
fieldValues
.
includeURL
;
}
let
crashReport
=
shouldFail
?
promiseCrashReportFail
(
)
:
promiseCrashReport
(
expectedExtra
)
;
let
restoreTab
=
browser
.
contentDocument
.
getElementById
(
"
restoreTab
"
)
;
restoreTab
.
click
(
)
;
await
BrowserTestUtils
.
waitForEvent
(
tab
"
SSTabRestored
"
)
;
await
crashReport
;
prefs
.
setBoolPref
(
"
sendReport
"
originalSendReport
)
;
prefs
.
setBoolPref
(
"
includeURL
"
originalIncludeURL
)
;
}
)
;
}
add_task
(
async
function
test_default
(
)
{
let
submissionBefore
=
Glean
.
crashSubmission
.
success
.
testGetValue
(
)
;
await
crashTabTestHelper
(
{
}
{
SubmittedFrom
:
"
CrashedTab
"
Throttleable
:
"
1
"
Comments
:
null
URL
:
"
"
}
)
;
Assert
.
equal
(
submissionBefore
+
1
Glean
.
crashSubmission
.
success
.
testGetValue
(
)
)
;
}
)
;
add_task
(
async
function
test_just_a_comment
(
)
{
let
submissionBefore
=
Glean
.
crashSubmission
.
success
.
testGetValue
(
)
;
await
crashTabTestHelper
(
{
SubmittedFrom
:
"
CrashedTab
"
Throttleable
:
"
1
"
comments
:
COMMENTS
}
{
Comments
:
COMMENTS
URL
:
"
"
}
)
;
Assert
.
equal
(
submissionBefore
+
1
Glean
.
crashSubmission
.
success
.
testGetValue
(
)
)
;
}
)
;
add_task
(
async
function
test_send_URL
(
)
{
let
submissionBefore
=
Glean
.
crashSubmission
.
success
.
testGetValue
(
)
;
await
crashTabTestHelper
(
{
SubmittedFrom
:
"
CrashedTab
"
Throttleable
:
"
1
"
includeURL
:
true
}
{
Comments
:
null
URL
:
PAGE
}
)
;
Assert
.
equal
(
submissionBefore
+
1
Glean
.
crashSubmission
.
success
.
testGetValue
(
)
)
;
}
)
;
add_task
(
async
function
test_send_all
(
)
{
let
successBefore
=
Glean
.
crashSubmission
.
success
.
testGetValue
(
)
;
let
failureBefore
=
Glean
.
crashSubmission
.
failure
.
testGetValue
(
)
;
await
crashTabTestHelper
(
{
SubmittedFrom
:
"
CrashedTab
"
Throttleable
:
"
1
"
includeURL
:
true
comments
:
COMMENTS
}
{
Comments
:
COMMENTS
URL
:
PAGE
}
)
;
Assert
.
equal
(
successBefore
+
1
Glean
.
crashSubmission
.
success
.
testGetValue
(
)
)
;
Assert
.
equal
(
failureBefore
Glean
.
crashSubmission
.
failure
.
testGetValue
(
)
)
;
}
)
;
add_task
(
async
function
test_send_error
(
)
{
let
successBefore
=
Glean
.
crashSubmission
.
success
.
testGetValue
(
)
;
let
failureBefore
=
Glean
.
crashSubmission
.
failure
.
testGetValue
(
)
;
Assert
.
equal
(
null
Glean
.
crashSubmission
.
collectorErrors
.
unknown_error
.
testGetValue
(
)
)
;
let
invalidAnnotation
=
Glean
.
crashSubmission
.
collectorErrors
.
malformed_invalid_annotation_value
.
testGetValue
(
)
;
await
crashTabTestHelper
(
{
SubmittedFrom
:
"
CrashedTab
"
Throttleable
:
"
0
"
comments
:
"
fail
-
me
:
/
/
malformed_invalid_annotation_value
"
}
{
Comments
:
"
fail
-
me
:
/
/
malformed_invalid_annotation_value
"
}
true
)
;
Assert
.
equal
(
successBefore
Glean
.
crashSubmission
.
success
.
testGetValue
(
)
)
;
Assert
.
equal
(
failureBefore
+
1
Glean
.
crashSubmission
.
failure
.
testGetValue
(
)
)
;
Assert
.
equal
(
null
Glean
.
crashSubmission
.
collectorErrors
.
unknown_error
.
testGetValue
(
)
)
;
Assert
.
equal
(
invalidAnnotation
+
1
Glean
.
crashSubmission
.
collectorErrors
.
malformed_invalid_annotation_value
.
testGetValue
(
)
)
;
}
)
;
