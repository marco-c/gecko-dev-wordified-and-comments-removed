"
use
strict
"
;
const
PAGE
=
"
data
:
text
/
html
<
html
>
<
body
>
A
%
20regular
%
20everyday
%
20normal
%
20page
.
"
;
const
AUTOSUBMIT_PREF
=
"
browser
.
crashReports
.
unsubmittedCheck
.
autoSubmit2
"
;
const
{
TabStateFlusher
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
sessionstore
/
TabStateFlusher
.
jsm
"
)
;
requestLongerTimeout
(
2
)
;
add_task
(
async
function
test_show_form
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
AUTOSUBMIT_PREF
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE
}
async
function
(
browser
)
{
await
TabStateFlusher
.
flush
(
browser
)
;
await
BrowserTestUtils
.
crashFrame
(
browser
)
;
let
doc
=
browser
.
contentDocument
;
let
requestAutoSubmit
=
doc
.
getElementById
(
"
requestAutoSubmit
"
)
;
Assert
.
ok
(
!
requestAutoSubmit
.
hidden
"
Request
for
autosubmission
is
visible
.
"
)
;
let
autoSubmit
=
doc
.
getElementById
(
"
autoSubmit
"
)
;
Assert
.
ok
(
!
autoSubmit
.
checked
"
Checkbox
for
autosubmission
is
not
checked
.
"
)
;
autoSubmit
.
checked
=
true
;
let
restoreButton
=
doc
.
getElementById
(
"
restoreTab
"
)
;
restoreButton
.
click
(
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
PAGE
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
AUTOSUBMIT_PREF
)
"
Autosubmission
pref
should
have
been
set
.
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_show_form
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
AUTOSUBMIT_PREF
true
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE
}
async
function
(
browser
)
{
await
TabStateFlusher
.
flush
(
browser
)
;
await
BrowserTestUtils
.
crashFrame
(
browser
)
;
let
doc
=
browser
.
contentDocument
;
let
requestAutoSubmit
=
doc
.
getElementById
(
"
requestAutoSubmit
"
)
;
Assert
.
ok
(
requestAutoSubmit
.
hidden
"
Request
for
autosubmission
is
not
visible
.
"
)
;
let
restoreButton
=
doc
.
getElementById
(
"
restoreTab
"
)
;
restoreButton
.
click
(
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
PAGE
)
;
Assert
.
ok
(
Services
.
prefs
.
getBoolPref
(
AUTOSUBMIT_PREF
)
"
Autosubmission
pref
should
have
been
set
.
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_no_offer
(
)
{
Assert
.
ok
(
TabCrashHandler
.
prefs
.
getBoolPref
(
"
sendReport
"
)
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
AUTOSUBMIT_PREF
false
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
PAGE
}
async
function
(
browser
)
{
await
TabStateFlusher
.
flush
(
browser
)
;
prepareNoDump
(
)
;
await
BrowserTestUtils
.
crashFrame
(
browser
)
;
let
doc
=
browser
.
contentDocument
;
let
requestRect
=
doc
.
getElementById
(
"
requestAutoSubmit
"
)
.
getBoundingClientRect
(
)
;
Assert
.
equal
(
0
requestRect
.
height
"
Request
for
autosubmission
has
no
height
"
)
;
Assert
.
equal
(
0
requestRect
.
width
"
Request
for
autosubmission
has
no
width
"
)
;
let
autoSubmit
=
doc
.
getElementById
(
"
autoSubmit
"
)
;
Assert
.
ok
(
!
autoSubmit
.
checked
"
Checkbox
for
autosubmission
is
not
checked
.
"
)
;
let
restoreButton
=
doc
.
getElementById
(
"
restoreTab
"
)
;
restoreButton
.
click
(
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
PAGE
)
;
Assert
.
ok
(
!
Services
.
prefs
.
getBoolPref
(
AUTOSUBMIT_PREF
)
"
Autosubmission
pref
should
not
have
changed
.
"
)
;
}
)
;
Assert
.
ok
(
TabCrashHandler
.
prefs
.
getBoolPref
(
"
sendReport
"
)
)
;
}
)
;
