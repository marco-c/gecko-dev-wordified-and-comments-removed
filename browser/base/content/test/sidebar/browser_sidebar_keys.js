add_setup
(
(
)
=
>
SidebarController
.
setUIState
(
{
expanded
:
false
hidden
:
false
}
)
)
;
async
function
testSidebarKeyToggle
(
key
options
expectedSidebarId
)
{
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
textbox
{
}
)
;
let
promiseShown
=
BrowserTestUtils
.
waitForEvent
(
window
"
SidebarShown
"
)
;
EventUtils
.
synthesizeKey
(
key
options
)
;
await
promiseShown
;
Assert
.
equal
(
document
.
getElementById
(
"
sidebar
-
box
"
)
.
getAttribute
(
"
sidebarcommand
"
)
expectedSidebarId
)
;
EventUtils
.
synthesizeKey
(
key
options
)
;
Assert
.
ok
(
!
SidebarController
.
isOpen
)
;
}
add_task
(
async
function
test_sidebar_keys
(
)
{
registerCleanupFunction
(
(
)
=
>
SidebarController
.
hide
(
)
)
;
await
testSidebarKeyToggle
(
"
b
"
{
accelKey
:
true
}
"
viewBookmarksSidebar
"
)
;
let
options
=
{
accelKey
:
true
shiftKey
:
AppConstants
.
platform
=
=
"
macosx
"
}
;
await
testSidebarKeyToggle
(
"
h
"
options
"
viewHistorySidebar
"
)
;
}
)
;
add_task
(
async
function
test_sidebar_in_customize_mode
(
)
{
let
{
CustomizableUI
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
CustomizableUI
.
sys
.
mjs
"
)
;
registerCleanupFunction
(
(
)
=
>
SidebarController
.
hide
(
)
)
;
let
placement
=
CustomizableUI
.
getPlacementOfWidget
(
"
sidebar
-
button
"
)
;
if
(
!
(
placement
?
.
area
=
=
CustomizableUI
.
AREA_NAVBAR
)
)
{
CustomizableUI
.
addWidgetToArea
(
"
sidebar
-
button
"
CustomizableUI
.
AREA_NAVBAR
0
)
;
CustomizableUI
.
ensureWidgetPlacedInWindow
(
"
sidebar
-
button
"
window
)
;
registerCleanupFunction
(
function
(
)
{
CustomizableUI
.
removeWidgetFromArea
(
"
sidebar
-
button
"
)
;
}
)
;
}
let
widgetIcon
=
CustomizableUI
.
getWidget
(
"
sidebar
-
button
"
)
.
forWindow
(
window
)
.
node
?
.
querySelector
(
"
.
toolbarbutton
-
icon
"
)
;
let
getBGAlpha
=
(
)
=
>
InspectorUtils
.
colorToRGBA
(
getComputedStyle
(
widgetIcon
)
.
getPropertyValue
(
"
background
-
color
"
)
)
.
a
;
let
promiseShown
=
BrowserTestUtils
.
waitForEvent
(
window
"
SidebarShown
"
)
;
SidebarController
.
show
(
"
viewBookmarksSidebar
"
)
;
await
promiseShown
;
if
(
!
Services
.
prefs
.
getBoolPref
(
"
sidebar
.
revamp
"
false
)
)
{
Assert
.
greater
(
getBGAlpha
(
)
0
"
Sidebar
widget
background
should
appear
checked
"
)
;
}
let
customizationReadyPromise
=
BrowserTestUtils
.
waitForEvent
(
gNavToolbox
"
customizationready
"
)
;
gCustomizeMode
.
enter
(
)
;
await
customizationReadyPromise
;
Assert
.
equal
(
getBGAlpha
(
)
0
"
Sidebar
widget
background
should
appear
unchecked
"
)
;
await
SidebarController
.
toggle
(
)
;
ok
(
SidebarController
.
isOpen
"
Sidebar
is
still
open
"
)
;
let
afterCustomizationPromise
=
BrowserTestUtils
.
waitForEvent
(
gNavToolbox
"
aftercustomization
"
)
;
gCustomizeMode
.
exit
(
)
;
await
afterCustomizationPromise
;
if
(
!
Services
.
prefs
.
getBoolPref
(
"
sidebar
.
revamp
"
false
)
)
{
Assert
.
greater
(
getBGAlpha
(
)
0
"
Sidebar
widget
background
should
appear
checked
again
"
)
;
}
await
SidebarController
.
toggle
(
)
;
ok
(
!
SidebarController
.
isOpen
"
Sidebar
is
closed
"
)
;
Assert
.
equal
(
getBGAlpha
(
)
0
"
Sidebar
widget
background
should
appear
unchecked
"
)
;
}
)
;
