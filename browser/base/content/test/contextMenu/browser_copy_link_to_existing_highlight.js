"
use
strict
"
;
async
function
openContextMenuAtSelector
(
browser
selector
)
{
const
menu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
const
shown
=
BrowserTestUtils
.
waitForEvent
(
menu
"
popupshown
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
selector
{
type
:
"
contextmenu
"
button
:
2
}
browser
)
;
await
shown
;
return
menu
;
}
function
makeTestURI
(
)
{
const
html
=
<
p
>
<
span
id
=
"
hello
"
>
Hello
<
/
span
>
+
<
span
id
=
"
foo
"
>
foo
<
/
span
>
<
span
id
=
"
bar
"
>
bar
<
/
span
>
+
<
span
id
=
"
baz
"
>
baz
<
/
span
>
<
/
p
>
;
const
encoded
=
encodeURIComponent
(
html
)
;
return
data
:
text
/
html
{
encoded
}
;
}
async
function
waitForHighlight
(
browser
)
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
await
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
content
.
document
.
fragmentDirective
.
getTextDirectiveRanges
(
)
.
length
"
Fragment
highlight
range
present
"
)
;
}
)
;
}
async
function
assertHighlightMenu
(
browser
selector
testCase
textFragmentURL
=
null
)
{
const
menu
=
await
openContextMenuAtSelector
(
browser
selector
)
;
const
awaitPopupHidden
=
BrowserTestUtils
.
waitForEvent
(
menu
"
popuphidden
"
)
;
const
copy
=
menu
.
querySelector
(
"
#
context
-
copy
-
link
-
to
-
highlight
"
)
;
try
{
ok
(
!
copy
.
hidden
"
Copy
Link
to
Highlight
"
visible
when
{
testCase
}
)
;
ok
(
!
copy
.
hasAttribute
(
"
disabled
"
)
|
|
copy
.
getAttribute
(
"
disabled
"
)
=
=
=
"
false
"
"
Copy
Link
to
Highlight
"
enabled
when
{
testCase
}
)
;
if
(
textFragmentURL
!
=
=
null
)
{
await
SimpleTest
.
promiseClipboardChange
(
textFragmentURL
async
(
)
=
>
copy
.
closest
(
"
menupopup
"
)
.
activateItem
(
copy
)
)
;
}
else
{
menu
.
hidePopup
(
)
;
}
}
finally
{
await
awaitPopupHidden
;
}
}
add_task
(
async
function
test_existing_highlight_paths
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
text_fragments
.
enabled
"
true
]
[
"
dom
.
text_fragments
.
create_text_fragment
.
enabled
"
true
]
]
}
)
;
const
TEST_URI
=
makeTestURI
(
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
{
TEST_URI
}
#
:
~
:
text
=
foo
%
20bar
)
;
try
{
const
browser
=
tab
.
linkedBrowser
;
await
waitForHighlight
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
const
sel
=
content
.
getSelection
(
)
;
sel
.
removeAllRanges
(
)
;
const
node
=
content
.
document
.
querySelector
(
"
#
baz
"
)
.
firstChild
;
const
range
=
content
.
document
.
createRange
(
)
;
range
.
selectNodeContents
(
node
)
;
sel
.
addRange
(
range
)
;
}
)
;
await
assertHighlightMenu
(
browser
"
#
baz
"
"
selection
outside
highlight
"
{
TEST_URI
}
#
:
~
:
text
=
baz
)
;
await
assertHighlightMenu
(
browser
"
#
foo
"
"
inside
highlight
(
no
selection
)
"
{
TEST_URI
}
#
:
~
:
text
=
foo
%
20bar
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
const
sel
=
content
.
getSelection
(
)
;
sel
.
removeAllRanges
(
)
;
const
startNode
=
content
.
document
.
querySelector
(
"
#
hello
"
)
.
firstChild
;
const
endNode
=
content
.
document
.
querySelector
(
"
#
foo
"
)
.
firstChild
;
const
range
=
content
.
document
.
createRange
(
)
;
range
.
setStart
(
startNode
0
)
;
range
.
setEnd
(
endNode
3
)
;
sel
.
addRange
(
range
)
;
}
)
;
await
assertHighlightMenu
(
browser
"
#
foo
"
"
selection
overlaps
highlight
"
{
TEST_URI
}
#
:
~
:
text
=
Hello
%
20foo
)
;
}
finally
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
