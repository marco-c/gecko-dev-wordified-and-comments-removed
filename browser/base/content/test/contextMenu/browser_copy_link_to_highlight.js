"
use
strict
"
;
let
listService
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
query_stripping
.
strip_list
"
"
stripParam
"
]
[
"
privacy
.
query_stripping
.
strip_on_share
.
enabled
"
true
]
[
"
dom
.
text_fragments
.
create_text_fragment
.
enabled
"
true
]
]
}
)
;
listService
=
Cc
[
"
mozilla
.
org
/
query
-
stripping
-
list
-
service
;
1
"
]
.
getService
(
Ci
.
nsIURLQueryStrippingListService
)
;
await
listService
.
testWaitForInit
(
)
;
}
)
;
add_task
(
async
function
notVisibleIfNoSelection
(
)
{
await
testCopyLinkToHighlight
(
{
testPage
:
loremIpsumTestPage
(
false
)
runTests
:
async
(
{
copyLinkToHighlight
copyCleanLinkToHighlight
}
)
=
>
{
Assert
.
ok
(
!
BrowserTestUtils
.
isVisible
(
copyLinkToHighlight
)
"
Copy
Link
to
Highlight
Menu
item
is
not
visible
"
)
;
Assert
.
ok
(
!
BrowserTestUtils
.
isVisible
(
copyCleanLinkToHighlight
)
"
Copy
Clean
Link
to
Highlight
Menu
item
is
not
visible
"
)
;
}
}
)
;
}
)
;
add_task
(
async
function
notVisibleInEditable
(
)
{
await
testCopyLinkToHighlight
(
{
testPage
:
editableTestPage
(
)
runTests
:
async
(
{
copyLinkToHighlight
copyCleanLinkToHighlight
}
)
=
>
{
Assert
.
ok
(
!
BrowserTestUtils
.
isVisible
(
copyLinkToHighlight
)
"
Copy
Link
to
Highlight
Menu
item
is
not
visible
"
)
;
Assert
.
ok
(
!
BrowserTestUtils
.
isVisible
(
copyCleanLinkToHighlight
)
"
Copy
Clean
Link
to
Highlight
Menu
item
is
not
visible
"
)
;
}
}
)
;
}
)
;
add_task
(
async
function
isVisibleIfSelection
(
)
{
await
testCopyLinkToHighlight
(
{
testPage
:
loremIpsumTestPage
(
true
)
runTests
:
async
(
{
copyLinkToHighlight
copyCleanLinkToHighlight
}
)
=
>
{
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
copyLinkToHighlight
)
"
Copy
Link
to
Highlight
Menu
item
is
visible
"
)
;
Assert
.
ok
(
BrowserTestUtils
.
isVisible
(
copyCleanLinkToHighlight
)
"
Copy
Clean
Link
to
Highlight
Menu
item
is
visible
"
)
;
Assert
.
ok
(
!
copyLinkToHighlight
.
disabled
"
Copy
Link
to
Highlight
Menu
item
is
enabled
"
)
;
}
}
)
;
}
)
;
add_task
(
async
function
copiesToClipboard
(
)
{
await
testCopyLinkToHighlight
(
{
testPage
:
loremIpsumTestPage
(
true
)
runTests
:
async
(
{
copyLinkToHighlight
}
)
=
>
{
await
SimpleTest
.
promiseClipboardChange
(
"
https
:
/
/
www
.
example
.
com
/
?
stripParam
=
1234
#
:
~
:
text
=
eiusmod
%
20tempor
%
20incididunt
&
text
=
labore
"
async
(
)
=
>
{
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
copyLinkToHighlight
.
disabled
"
Waiting
for
copyLinkToHighlight
to
become
enabled
"
)
;
copyLinkToHighlight
.
closest
(
"
menupopup
"
)
.
activateItem
(
copyLinkToHighlight
)
;
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
copiesCleanLinkToClipboard
(
)
{
await
testCopyLinkToHighlight
(
{
testPage
:
loremIpsumTestPage
(
true
)
runTests
:
async
(
{
copyCleanLinkToHighlight
}
)
=
>
{
await
SimpleTest
.
promiseClipboardChange
(
"
https
:
/
/
www
.
example
.
com
/
#
:
~
:
text
=
eiusmod
%
20tempor
%
20incididunt
&
text
=
labore
"
async
(
)
=
>
{
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
copyCleanLinkToHighlight
.
disabled
"
Waiting
for
copyLinkToHighlight
to
become
enabled
"
)
;
copyCleanLinkToHighlight
.
closest
(
"
menupopup
"
)
.
activateItem
(
copyCleanLinkToHighlight
)
;
}
)
;
}
}
)
;
}
)
;
add_task
(
async
function
removesAllHighlightsWithEmptyFragment
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
www
.
example
.
com
/
"
async
function
(
browser
)
{
await
loremIpsumTestPage
(
false
)
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
content
.
location
.
hash
=
"
:
~
:
text
=
lorem
"
;
}
)
;
is
(
gURLBar
.
value
"
www
.
example
.
com
/
#
:
~
:
text
=
lorem
"
"
URL
bar
does
contain
a
hash
after
adding
a
text
fragment
"
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
awaitPopupShown
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
text
"
{
type
:
"
contextmenu
"
button
:
2
}
browser
)
;
await
awaitPopupShown
;
let
awaitPopupHidden
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
let
removeAllHighlights
=
contextMenu
.
querySelector
(
"
#
context
-
remove
-
highlight
"
)
;
ok
(
removeAllHighlights
'
"
Remove
Highlight
"
menu
item
is
present
'
)
;
ok
(
BrowserTestUtils
.
isVisible
(
removeAllHighlights
)
'
"
Remove
Highlight
"
menu
item
is
visible
'
)
;
let
awaitLocationChange
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
"
https
:
/
/
www
.
example
.
com
/
"
)
;
removeAllHighlights
.
closest
(
"
menupopup
"
)
.
activateItem
(
removeAllHighlights
)
;
await
awaitPopupHidden
;
await
awaitLocationChange
;
is
(
gURLBar
.
value
"
www
.
example
.
com
"
"
The
URL
does
not
contain
a
text
fragment
anymore
and
also
no
fragment
(
not
even
an
empty
one
)
"
)
;
}
)
;
}
)
;
add_task
(
async
function
removesAllHighlightsWithNonEmptyFragment
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
www
.
example
.
com
/
"
async
function
(
browser
)
{
await
loremIpsumTestPage
(
false
)
(
browser
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
content
.
location
.
hash
=
"
foo
:
~
:
text
=
lorem
"
;
}
)
;
is
(
gURLBar
.
value
"
www
.
example
.
com
/
#
foo
:
~
:
text
=
lorem
"
"
URL
bar
does
contain
a
fragment
and
a
text
fragment
"
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
awaitPopupShown
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
text
"
{
type
:
"
contextmenu
"
button
:
2
}
browser
)
;
await
awaitPopupShown
;
let
awaitPopupHidden
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
let
removeAllHighlights
=
contextMenu
.
querySelector
(
"
#
context
-
remove
-
highlight
"
)
;
ok
(
removeAllHighlights
'
"
Remove
Highlight
"
menu
item
is
present
'
)
;
ok
(
BrowserTestUtils
.
isVisible
(
removeAllHighlights
)
'
"
Remove
Highlight
"
menu
item
is
visible
'
)
;
let
awaitLocationChange
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
"
https
:
/
/
www
.
example
.
com
/
#
foo
"
)
;
removeAllHighlights
.
closest
(
"
menupopup
"
)
.
activateItem
(
removeAllHighlights
)
;
await
awaitPopupHidden
;
await
awaitLocationChange
;
is
(
gURLBar
.
value
"
www
.
example
.
com
/
#
foo
"
"
Text
Fragment
is
removed
from
the
URL
fragment
is
still
there
"
)
;
}
)
;
}
)
;
function
editableTestPage
(
)
{
return
async
function
(
browser
)
{
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
const
editable
=
content
.
document
.
createElement
(
"
div
"
)
;
editable
.
contentEditable
=
true
;
editable
.
textContent
=
"
This
is
editable
"
;
const
range
=
content
.
document
.
createRange
(
)
;
range
.
selectNodeContents
(
editable
)
;
content
.
getSelection
(
)
.
addRange
(
range
)
;
}
)
;
}
;
}
function
loremIpsumTestPage
(
isTextSelected
)
{
return
async
function
(
browser
)
{
await
SpecialPowers
.
spawn
(
browser
[
isTextSelected
]
async
function
(
selectText
)
{
const
textBegin
=
content
.
document
.
createTextNode
(
"
Lorem
ipsum
dolor
sit
amet
consectetur
adipiscing
elit
sed
do
"
)
;
const
textMiddle
=
content
.
document
.
createTextNode
(
"
eiusmod
tempor
incididunt
"
)
;
const
textEnd
=
content
.
document
.
createTextNode
(
"
ut
labore
et
dolore
magna
aliqua
.
Est
nulla
nostrud
velit
dolore
aliquip
ipsum
do
sint
cillum
excepteur
adipisicing
ipsum
irure
.
Sit
sunt
reprehenderit
laboris
labore
magna
exercitation
amet
fugiat
nisi
ad
laborum
veniam
nisi
.
Est
ex
proident
anim
eiusmod
veniam
ipsum
officia
in
ipsum
deserunt
voluptate
.
Enim
anim
cillum
elit
tempor
consequat
esse
exercitation
.
"
)
;
const
paragraph
=
content
.
document
.
createElement
(
"
p
"
)
;
const
span
=
content
.
document
.
createElement
(
"
span
"
)
;
span
.
appendChild
(
textMiddle
)
;
span
.
id
=
"
span
"
;
paragraph
.
appendChild
(
textBegin
)
;
paragraph
.
appendChild
(
span
)
;
paragraph
.
appendChild
(
textEnd
)
;
paragraph
.
id
=
"
text
"
;
content
.
document
.
body
.
prepend
(
paragraph
)
;
if
(
selectText
)
{
const
selection
=
content
.
getSelection
(
)
;
const
range
=
content
.
document
.
createRange
(
)
;
range
.
selectNodeContents
(
span
)
;
selection
.
addRange
(
range
)
;
const
range2
=
content
.
document
.
createRange
(
)
;
range2
.
setStart
(
textEnd
4
)
;
range2
.
setEnd
(
textEnd
10
)
;
selection
.
addRange
(
range2
)
;
}
}
)
;
}
;
}
async
function
testCopyLinkToHighlight
(
{
testPage
runTests
}
)
{
await
BrowserTestUtils
.
withNewTab
(
"
www
.
example
.
com
?
stripParam
=
1234
"
async
function
(
browser
)
{
await
testPage
(
browser
)
;
let
contextMenu
=
document
.
getElementById
(
"
contentAreaContextMenu
"
)
;
let
awaitPopupShown
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popupshown
"
)
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
span
"
{
type
:
"
contextmenu
"
button
:
2
}
browser
)
;
await
awaitPopupShown
;
let
awaitPopupHidden
=
BrowserTestUtils
.
waitForEvent
(
contextMenu
"
popuphidden
"
)
;
let
copyLinkToHighlight
=
contextMenu
.
querySelector
(
"
#
context
-
copy
-
link
-
to
-
highlight
"
)
;
let
copyCleanLinkToHighlight
=
contextMenu
.
querySelector
(
"
#
context
-
copy
-
clean
-
link
-
to
-
highlight
"
)
;
await
runTests
(
{
copyLinkToHighlight
copyCleanLinkToHighlight
}
)
;
contextMenu
.
hidePopup
(
)
;
await
awaitPopupHidden
;
}
)
;
}
