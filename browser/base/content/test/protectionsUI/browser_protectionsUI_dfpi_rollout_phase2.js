const
{
TelemetryTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
const
{
ExperimentFakes
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
NimbusTestUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
BrowserGlue
"
"
resource
:
/
/
/
modules
/
BrowserGlue
.
jsm
"
)
;
const
ROLLOUT_PREF_PHASE1
=
"
privacy
.
restrict3rdpartystorage
.
rollout
.
enabledByDefault
"
;
const
ROLLOUT_PREF_PHASE1_PREFERENCES
=
"
privacy
.
restrict3rdpartystorage
.
rollout
.
preferences
.
TCPToggleInStandard
"
;
const
COOKIE_BEHAVIOR_PREF
=
"
network
.
cookie
.
cookieBehavior
"
;
const
defaultPrefs
=
Services
.
prefs
.
getDefaultBranch
(
"
"
)
;
const
previousDefaultCB
=
defaultPrefs
.
getIntPref
(
COOKIE_BEHAVIOR_PREF
)
;
requestLongerTimeout
(
2
)
;
function
cleanup
(
)
{
BrowserGlue
.
_defaultCookieBehaviorAtStartup
=
previousDefaultCB
;
defaultPrefs
.
setIntPref
(
COOKIE_BEHAVIOR_PREF
previousDefaultCB
)
;
Services
.
prefs
.
clearUserPref
(
ROLLOUT_PREF_PHASE1
)
;
Services
.
prefs
.
clearUserPref
(
ROLLOUT_PREF_PHASE1_PREFERENCES
)
;
Services
.
telemetry
.
scalarSet
(
"
privacy
.
dfpi_rollout_enabledByDefault
"
2
)
;
Services
.
telemetry
.
scalarSet
(
"
privacy
.
dfpi_rollout_tcpByDefault_feature
"
false
)
;
}
async
function
waitForAndAssertPrefState
(
pref
expectedValue
message
)
{
await
TestUtils
.
waitForPrefChange
(
pref
value
=
>
{
if
(
value
!
=
expectedValue
)
{
return
false
;
}
is
(
value
expectedValue
message
)
;
return
true
;
}
)
;
}
function
testTelemetryState
(
expectedValueOptIn
expectedValueTCPByDefault
message
=
"
Scalars
should
have
correct
value
"
)
{
TelemetryTestUtils
.
assertScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
)
"
privacy
.
dfpi_rollout_enabledByDefault
"
expectedValueOptIn
message
)
;
TelemetryTestUtils
.
assertScalar
(
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
)
"
privacy
.
dfpi_rollout_tcpByDefault_feature
"
expectedValueTCPByDefault
message
)
;
}
async
function
openPreferencesViaOpenPreferencesAPI
(
aPane
aOptions
)
{
let
finalPaneEvent
=
Services
.
prefs
.
getBoolPref
(
"
identity
.
fxaccounts
.
enabled
"
)
?
"
sync
-
pane
-
loaded
"
:
"
privacy
-
pane
-
loaded
"
;
let
finalPrefPaneLoaded
=
TestUtils
.
topicObserved
(
finalPaneEvent
(
)
=
>
true
)
;
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
)
;
openPreferences
(
aPane
aOptions
)
;
let
newTabBrowser
=
gBrowser
.
selectedBrowser
;
if
(
!
newTabBrowser
.
contentWindow
)
{
await
BrowserTestUtils
.
waitForEvent
(
newTabBrowser
"
Initialized
"
true
)
;
await
BrowserTestUtils
.
waitForEvent
(
newTabBrowser
.
contentWindow
"
load
"
)
;
await
finalPrefPaneLoaded
;
}
let
win
=
gBrowser
.
contentWindow
;
let
selectedPane
=
win
.
history
.
state
;
if
(
!
aOptions
|
|
!
aOptions
.
leaveOpen
)
{
gBrowser
.
removeCurrentTab
(
)
;
}
return
{
selectedPane
}
;
}
async
function
testPreferencesSectionVisibility
(
isVisible
message
)
{
await
openPreferencesViaOpenPreferencesAPI
(
"
privacy
"
{
leaveOpen
:
true
}
)
;
let
etpStandardTCPRolloutBox
=
gBrowser
.
contentDocument
.
getElementById
(
"
etpStandardTCPRolloutBox
"
)
;
if
(
message
)
{
info
(
message
)
;
}
is
(
BrowserTestUtils
.
is_visible
(
etpStandardTCPRolloutBox
)
isVisible
Preferences
TCP
rollout
UI
in
standard
is
{
isVisible
?
"
"
:
"
not
"
}
visible
.
)
;
gBrowser
.
removeCurrentTab
(
)
;
}
function
setDefaultCookieBehavior
(
cookieBehavior
)
{
BrowserGlue
.
_defaultCookieBehaviorAtStartup
=
cookieBehavior
;
defaultPrefs
.
setIntPref
(
COOKIE_BEHAVIOR_PREF
cookieBehavior
)
;
}
function
waitForNimbusFeatureUpdate
(
feature
)
{
return
new
Promise
(
resolve
=
>
{
let
callback
=
(
)
=
>
{
NimbusFeatures
[
feature
]
.
off
(
callback
)
;
resolve
(
)
;
}
;
NimbusFeatures
[
feature
]
.
onUpdate
(
callback
)
;
}
)
;
}
add_task
(
async
function
test_phase2
(
)
{
setDefaultCookieBehavior
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
)
;
is
(
defaultPrefs
.
getIntPref
(
COOKIE_BEHAVIOR_PREF
)
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
"
TCP
is
disabled
by
default
.
"
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
COOKIE_BEHAVIOR_PREF
)
"
No
user
value
for
cookie
behavior
.
"
)
;
ok
(
!
NimbusFeatures
.
tcpByDefault
.
isEnabled
(
)
"
tcpByDefault
Nimbus
feature
is
disabled
initially
.
"
)
;
ok
(
!
NimbusFeatures
.
tcpPreferences
.
isEnabled
(
)
"
tcpPreferences
Nimbus
feature
is
disabled
initially
.
"
)
;
await
testPreferencesSectionVisibility
(
false
"
TCP
preferences
section
should
not
be
visible
initially
.
"
)
;
testTelemetryState
(
2
false
"
Telemetry
should
indicate
not
enrolled
.
"
)
;
let
cookieBehaviorChange
=
waitForAndAssertPrefState
(
COOKIE_BEHAVIOR_PREF
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
"
Cookie
behavior
updates
to
TCP
enabled
.
"
)
;
let
doEnrollmentCleanup
=
await
ExperimentFakes
.
enrollWithFeatureConfig
(
{
featureId
:
"
tcpByDefault
"
value
:
{
enabled
:
true
}
}
)
;
await
cookieBehaviorChange
;
is
(
defaultPrefs
.
getIntPref
(
COOKIE_BEHAVIOR_PREF
)
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
"
TCP
is
enabled
by
default
.
"
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
COOKIE_BEHAVIOR_PREF
)
"
No
user
value
for
cookie
behavior
.
"
)
;
ok
(
NimbusFeatures
.
tcpByDefault
.
isEnabled
(
)
"
tcpByDefault
Nimbus
feature
is
enabled
.
"
)
;
ok
(
!
NimbusFeatures
.
tcpPreferences
.
isEnabled
(
)
"
tcpPreferences
Nimbus
feature
is
still
disabled
.
"
)
;
await
testPreferencesSectionVisibility
(
false
"
Preferences
section
should
still
not
be
visible
.
"
)
;
testTelemetryState
(
2
true
"
Telemetry
should
indicate
phase
2
"
)
;
await
doEnrollmentCleanup
(
)
;
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_phase1_opt_out_to_phase2
(
)
{
setDefaultCookieBehavior
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
)
;
is
(
defaultPrefs
.
getIntPref
(
COOKIE_BEHAVIOR_PREF
)
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
"
TCP
is
disabled
by
default
.
"
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
COOKIE_BEHAVIOR_PREF
)
"
No
user
value
for
cookie
behavior
.
"
)
;
ok
(
!
NimbusFeatures
.
tcpByDefault
.
isEnabled
(
)
"
tcpByDefault
Nimbus
feature
is
disabled
initially
.
"
)
;
ok
(
!
NimbusFeatures
.
tcpPreferences
.
isEnabled
(
)
"
tcpPreferences
Nimbus
feature
is
disabled
initially
.
"
)
;
await
testPreferencesSectionVisibility
(
false
"
TCP
preferences
section
should
not
be
visible
initially
.
"
)
;
testTelemetryState
(
2
false
"
Telemetry
should
indicate
not
enrolled
.
"
)
;
info
(
"
Set
the
phase
1
rollout
pref
indicating
user
opt
-
out
state
.
"
)
;
Services
.
prefs
.
setBoolPref
(
ROLLOUT_PREF_PHASE1
false
)
;
Services
.
prefs
.
setBoolPref
(
ROLLOUT_PREF_PHASE1_PREFERENCES
true
)
;
is
(
defaultPrefs
.
getIntPref
(
COOKIE_BEHAVIOR_PREF
)
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
After
opt
-
out
TCP
is
still
disabled
by
default
.
)
;
testTelemetryState
(
0
false
"
Telemetry
indicates
opt
-
out
.
"
)
;
ok
(
!
NimbusFeatures
.
tcpByDefault
.
isEnabled
(
)
"
tcpByDefault
Nimbus
feature
is
still
disabled
.
"
)
;
ok
(
NimbusFeatures
.
tcpPreferences
.
isEnabled
(
)
"
tcpPreferences
Nimbus
feature
is
enabled
after
-
opt
-
out
.
"
)
;
await
testPreferencesSectionVisibility
(
true
"
Preferences
section
should
be
visible
after
opt
-
out
.
"
)
;
let
cookieBehaviorChange
=
waitForAndAssertPrefState
(
COOKIE_BEHAVIOR_PREF
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
"
Cookie
behavior
updates
to
TCP
enabled
after
tcpByDefault
enrollment
.
"
)
;
let
doEnrollmentCleanup
=
await
ExperimentFakes
.
enrollWithFeatureConfig
(
{
featureId
:
"
tcpByDefault
"
value
:
{
enabled
:
true
}
}
)
;
await
cookieBehaviorChange
;
is
(
defaultPrefs
.
getIntPref
(
COOKIE_BEHAVIOR_PREF
)
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
"
TCP
is
enabled
by
default
.
"
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
COOKIE_BEHAVIOR_PREF
)
"
No
user
value
for
cookie
behavior
.
"
)
;
await
testPreferencesSectionVisibility
(
false
"
Preferences
section
should
no
longer
be
visible
.
"
)
;
testTelemetryState
(
0
true
"
Telemetry
should
indicate
phase
2
.
"
)
;
await
doEnrollmentCleanup
(
)
;
cleanup
(
)
;
}
)
;
add_task
(
async
function
test_phase1_opt_in_to_phase2
(
)
{
setDefaultCookieBehavior
(
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
)
;
is
(
defaultPrefs
.
getIntPref
(
COOKIE_BEHAVIOR_PREF
)
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER
"
TCP
is
disabled
by
default
.
"
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
COOKIE_BEHAVIOR_PREF
)
"
No
user
value
for
cookie
behavior
.
"
)
;
ok
(
!
NimbusFeatures
.
tcpByDefault
.
isEnabled
(
)
"
tcpByDefault
Nimbus
feature
is
disabled
initially
.
"
)
;
ok
(
!
NimbusFeatures
.
tcpPreferences
.
isEnabled
(
)
"
tcpPreferences
Nimbus
feature
is
disabled
initially
.
"
)
;
await
testPreferencesSectionVisibility
(
false
"
TCP
preferences
section
should
not
be
visible
initially
.
"
)
;
testTelemetryState
(
2
false
"
Telemetry
should
indicate
not
enrolled
.
"
)
;
info
(
"
Set
the
phase
1
rollout
pref
indicator
user
opt
-
in
state
.
"
)
;
Services
.
prefs
.
setBoolPref
(
ROLLOUT_PREF_PHASE1
true
)
;
is
(
defaultPrefs
.
getIntPref
(
COOKIE_BEHAVIOR_PREF
)
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
TCP
is
enabled
default
.
)
;
testTelemetryState
(
1
false
"
Telemetry
indicates
opt
-
in
.
"
)
;
ok
(
!
NimbusFeatures
.
tcpByDefault
.
isEnabled
(
)
"
tcpByDefault
Nimbus
feature
is
still
disabled
.
"
)
;
ok
(
!
NimbusFeatures
.
tcpPreferences
.
isEnabled
(
)
"
tcpPreferences
Nimbus
feature
is
disabled
after
opt
-
in
.
"
)
;
await
testPreferencesSectionVisibility
(
true
"
Preferences
section
should
be
visible
after
opt
-
in
.
"
)
;
let
featureUpdatePromise
=
waitForNimbusFeatureUpdate
(
"
tcpByDefault
"
)
;
let
doEnrollmentCleanup
=
await
ExperimentFakes
.
enrollWithFeatureConfig
(
{
featureId
:
"
tcpByDefault
"
value
:
{
enabled
:
true
}
}
)
;
await
featureUpdatePromise
;
ok
(
NimbusFeatures
.
tcpByDefault
.
isEnabled
(
)
"
tcpByDefault
Nimbus
feature
is
now
enabled
.
"
)
;
is
(
defaultPrefs
.
getIntPref
(
COOKIE_BEHAVIOR_PREF
)
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
"
TCP
is
still
enabled
by
default
.
"
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
COOKIE_BEHAVIOR_PREF
)
"
No
user
value
for
cookie
behavior
.
"
)
;
await
testPreferencesSectionVisibility
(
false
"
Preferences
section
should
still
not
be
visible
.
"
)
;
testTelemetryState
(
1
true
"
Telemetry
should
indicate
phase
2
.
"
)
;
info
(
"
Changing
opt
-
in
choice
after
phase
2
enrollment
should
not
disable
TCP
.
"
)
;
Services
.
prefs
.
setBoolPref
(
ROLLOUT_PREF_PHASE1
false
)
;
is
(
defaultPrefs
.
getIntPref
(
COOKIE_BEHAVIOR_PREF
)
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
"
TCP
is
still
enabled
by
default
after
opt
-
out
.
"
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
COOKIE_BEHAVIOR_PREF
)
"
No
user
value
for
cookie
behavior
.
"
)
;
Services
.
prefs
.
clearUserPref
(
ROLLOUT_PREF_PHASE1
)
;
is
(
defaultPrefs
.
getIntPref
(
COOKIE_BEHAVIOR_PREF
)
Ci
.
nsICookieService
.
BEHAVIOR_REJECT_TRACKER_AND_PARTITION_FOREIGN
"
TCP
is
still
enabled
by
default
after
pref
clear
.
"
)
;
ok
(
!
Services
.
prefs
.
prefHasUserValue
(
COOKIE_BEHAVIOR_PREF
)
"
No
user
value
for
cookie
behavior
.
"
)
;
await
doEnrollmentCleanup
(
)
;
cleanup
(
)
;
}
)
;
