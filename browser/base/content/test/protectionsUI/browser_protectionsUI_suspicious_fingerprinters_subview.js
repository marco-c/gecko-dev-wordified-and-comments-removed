"
use
strict
"
;
requestLongerTimeout
(
2
)
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
"
)
;
const
TEST_DOMAIN
=
"
https
:
/
/
www
.
example
.
com
"
;
const
TEST_3RD_DOMAIN
=
"
https
:
/
/
example
.
org
"
;
const
TEST_PAGE
=
TEST_DOMAIN
+
TEST_PATH
+
"
benignPage
.
html
"
;
const
TEST_3RD_CANVAS_FP_PAGE
=
TEST_3RD_DOMAIN
+
TEST_PATH
+
"
canvas
-
fingerprinter
.
html
"
;
const
TEST_3RD_FONT_FP_PAGE
=
TEST_3RD_DOMAIN
+
TEST_PATH
+
"
font
-
fingerprinter
.
html
"
;
const
FINGERPRINT_BLOCKING_PREF
=
"
privacy
.
trackingprotection
.
fingerprinting
.
enabled
"
;
const
FINGERPRINT_PROTECTION_PREF
=
"
privacy
.
fingerprintingProtection
"
;
const
FINGERPRINT_PROTECTION_PBM_PREF
=
"
privacy
.
fingerprintingProtection
.
pbmode
"
;
function
notFound
(
id
)
{
return
document
.
getElementById
(
id
)
.
classList
.
contains
(
"
notFound
"
)
;
}
async
function
waitForSuspiciousFingerprintingEvent
(
win
)
{
return
new
Promise
(
resolve
=
>
{
let
listener
=
{
onContentBlockingEvent
(
webProgress
request
event
)
{
info
(
Received
onContentBlockingEvent
event
:
{
event
}
)
;
if
(
event
&
Ci
.
nsIWebProgressListener
.
STATE_BLOCKED_SUSPICIOUS_FINGERPRINTING
)
{
win
.
gBrowser
.
removeProgressListener
(
listener
)
;
resolve
(
)
;
}
}
}
;
win
.
gBrowser
.
addProgressListener
(
listener
)
;
}
)
;
}
async
function
openTestPage
(
urls
usePrivateWin
testFn
)
{
let
win
=
window
;
if
(
usePrivateWin
)
{
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
}
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
:
win
.
gBrowser
url
:
TEST_PAGE
}
async
browser
=
>
{
info
(
"
Loading
all
iframes
"
)
;
for
(
const
url
of
urls
)
{
await
SpecialPowers
.
spawn
(
browser
[
url
]
async
testUrl
=
>
{
await
new
content
.
Promise
(
resolve
=
>
{
let
ifr
=
content
.
document
.
createElement
(
"
iframe
"
)
;
ifr
.
onload
=
resolve
;
content
.
document
.
body
.
appendChild
(
ifr
)
;
ifr
.
src
=
testUrl
;
}
)
;
}
)
;
}
info
(
"
Running
the
test
"
)
;
await
testFn
(
win
browser
)
;
}
)
;
if
(
usePrivateWin
)
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
}
async
function
testCategoryNotShown
(
win
)
{
await
openProtectionsPanel
(
false
win
)
;
let
categoryItem
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
category
-
fingerprinters
"
)
;
ok
(
notFound
(
"
protections
-
popup
-
category
-
fingerprinters
"
)
"
Fingerprinting
category
is
not
found
"
)
;
ok
(
!
BrowserTestUtils
.
is_visible
(
categoryItem
)
"
Fingerprinting
category
item
is
not
visible
"
)
;
await
closeProtectionsPanel
(
win
)
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FINGERPRINT_BLOCKING_PREF
true
]
]
}
)
;
}
)
;
add_task
(
async
function
testFPPDisabled
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FINGERPRINT_PROTECTION_PREF
false
]
]
}
)
;
await
openTestPage
(
[
TEST_3RD_CANVAS_FP_PAGE
TEST_3RD_FONT_FP_PAGE
]
false
testCategoryNotShown
)
;
}
)
;
add_task
(
async
function
testFPPEnabledWithoutFingerprintingActivity
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FINGERPRINT_PROTECTION_PREF
true
]
]
}
)
;
await
openTestPage
(
[
]
false
testCategoryNotShown
)
;
await
openTestPage
(
[
TEST_3RD_FONT_FP_PAGE
]
false
testCategoryNotShown
)
;
await
openTestPage
(
[
TEST_3RD_FONT_FP_PAGE
TEST_3RD_FONT_FP_PAGE
]
false
testCategoryNotShown
)
;
}
)
;
add_task
(
async
function
testFPPEnabledWithoutSuspiciousFingerprintingActivity
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FINGERPRINT_PROTECTION_PREF
true
]
]
}
)
;
await
openTestPage
(
[
]
false
testCategoryNotShown
)
;
await
openTestPage
(
[
TEST_3RD_FONT_FP_PAGE
]
false
testCategoryNotShown
)
;
await
openTestPage
(
[
TEST_3RD_FONT_FP_PAGE
TEST_3RD_FONT_FP_PAGE
]
false
testCategoryNotShown
)
;
}
)
;
add_task
(
async
function
testFingerprintingSubview
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FINGERPRINT_PROTECTION_PREF
true
]
]
}
)
;
await
openTestPage
(
[
TEST_3RD_CANVAS_FP_PAGE
TEST_3RD_FONT_FP_PAGE
]
false
async
(
win
_
)
=
>
{
await
openProtectionsPanel
(
false
win
)
;
let
categoryItem
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
category
-
fingerprinters
"
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
categoryItem
{
}
(
)
=
>
BrowserTestUtils
.
is_visible
(
categoryItem
)
)
;
ok
(
BrowserTestUtils
.
is_visible
(
categoryItem
)
"
Fingerprinting
category
item
is
visible
"
)
;
let
fingerprintersView
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
fingerprintersView
"
)
;
let
viewShown
=
BrowserTestUtils
.
waitForEvent
(
fingerprintersView
"
ViewShown
"
)
;
categoryItem
.
click
(
)
;
await
viewShown
;
ok
(
true
"
Fingerprinter
view
was
shown
"
)
;
let
listItems
=
Array
.
from
(
fingerprintersView
.
querySelectorAll
(
"
.
protections
-
popup
-
list
-
item
"
)
)
;
is
(
listItems
.
length
1
"
We
have
1
fingerprinter
in
the
list
"
)
;
let
listItem
=
listItems
.
find
(
item
=
>
item
.
querySelector
(
"
label
"
)
.
value
=
=
"
https
:
/
/
example
.
org
"
)
;
ok
(
listItem
"
Has
an
item
for
example
.
org
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
listItem
)
"
List
item
is
visible
"
)
;
let
mainView
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
mainView
"
)
;
viewShown
=
BrowserTestUtils
.
waitForEvent
(
mainView
"
ViewShown
"
)
;
let
backButton
=
fingerprintersView
.
querySelector
(
"
.
subviewbutton
-
back
"
)
;
backButton
.
click
(
)
;
await
viewShown
;
ok
(
true
"
Main
view
was
shown
"
)
;
await
closeProtectionsPanel
(
win
)
;
}
)
;
}
)
;
add_task
(
async
function
testFingerprintingSubviewInPBM
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FINGERPRINT_PROTECTION_PREF
false
]
[
FINGERPRINT_PROTECTION_PBM_PREF
true
]
]
}
)
;
await
openTestPage
(
[
TEST_3RD_CANVAS_FP_PAGE
TEST_3RD_FONT_FP_PAGE
]
false
testCategoryNotShown
)
;
await
openTestPage
(
[
TEST_3RD_CANVAS_FP_PAGE
TEST_3RD_FONT_FP_PAGE
]
true
async
(
win
_
)
=
>
{
await
openProtectionsPanel
(
false
win
)
;
let
categoryItem
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
category
-
fingerprinters
"
)
;
await
BrowserTestUtils
.
waitForMutationCondition
(
categoryItem
{
}
(
)
=
>
BrowserTestUtils
.
is_visible
(
categoryItem
)
)
;
ok
(
BrowserTestUtils
.
is_visible
(
categoryItem
)
"
Fingerprinting
category
item
is
visible
"
)
;
let
fingerprintersView
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
fingerprintersView
"
)
;
let
viewShown
=
BrowserTestUtils
.
waitForEvent
(
fingerprintersView
"
ViewShown
"
)
;
categoryItem
.
click
(
)
;
await
viewShown
;
ok
(
true
"
Fingerprinter
view
was
shown
"
)
;
let
listItems
=
Array
.
from
(
fingerprintersView
.
querySelectorAll
(
"
.
protections
-
popup
-
list
-
item
"
)
)
;
is
(
listItems
.
length
1
"
We
have
1
fingerprinter
in
the
list
"
)
;
let
listItem
=
listItems
.
find
(
item
=
>
item
.
querySelector
(
"
label
"
)
.
value
=
=
"
https
:
/
/
example
.
org
"
)
;
ok
(
listItem
"
Has
an
item
for
example
.
org
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
listItem
)
"
List
item
is
visible
"
)
;
let
mainView
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
mainView
"
)
;
viewShown
=
BrowserTestUtils
.
waitForEvent
(
mainView
"
ViewShown
"
)
;
let
backButton
=
fingerprintersView
.
querySelector
(
"
.
subviewbutton
-
back
"
)
;
backButton
.
click
(
)
;
await
viewShown
;
ok
(
true
"
Main
view
was
shown
"
)
;
await
closeProtectionsPanel
(
win
)
;
}
)
;
}
)
;
add_task
(
async
function
testDynamicallyLoadFingerprinter
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
FINGERPRINT_PROTECTION_PREF
true
]
]
}
)
;
await
openTestPage
(
[
TEST_3RD_FONT_FP_PAGE
]
false
async
(
win
browser
)
=
>
{
await
openProtectionsPanel
(
false
win
)
;
let
categoryItem
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
category
-
fingerprinters
"
)
;
ok
(
notFound
(
"
protections
-
popup
-
category
-
fingerprinters
"
)
"
Fingerprinting
category
is
not
found
"
)
;
ok
(
!
BrowserTestUtils
.
is_visible
(
categoryItem
)
"
Fingerprinting
category
item
is
not
visible
"
)
;
let
contentBlockingEventPromise
=
waitForSuspiciousFingerprintingEvent
(
win
)
;
await
SpecialPowers
.
spawn
(
browser
[
TEST_3RD_CANVAS_FP_PAGE
]
test_url
=
>
{
let
ifr
=
content
.
document
.
createElement
(
"
iframe
"
)
;
content
.
document
.
body
.
appendChild
(
ifr
)
;
ifr
.
src
=
test_url
;
}
)
;
await
contentBlockingEventPromise
;
let
fingerprintersView
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
fingerprintersView
"
)
;
let
viewShown
=
BrowserTestUtils
.
waitForEvent
(
fingerprintersView
"
ViewShown
"
)
;
categoryItem
.
click
(
)
;
await
viewShown
;
ok
(
true
"
Fingerprinter
view
was
shown
"
)
;
let
listItems
=
Array
.
from
(
fingerprintersView
.
querySelectorAll
(
"
.
protections
-
popup
-
list
-
item
"
)
)
;
is
(
listItems
.
length
1
"
We
have
1
fingerprinter
in
the
list
"
)
;
let
listItem
=
listItems
.
find
(
item
=
>
item
.
querySelector
(
"
label
"
)
.
value
=
=
"
https
:
/
/
example
.
org
"
)
;
ok
(
listItem
"
Has
an
item
for
example
.
org
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
listItem
)
"
List
item
is
visible
"
)
;
let
mainView
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
mainView
"
)
;
viewShown
=
BrowserTestUtils
.
waitForEvent
(
mainView
"
ViewShown
"
)
;
let
backButton
=
fingerprintersView
.
querySelector
(
"
.
subviewbutton
-
back
"
)
;
backButton
.
click
(
)
;
await
viewShown
;
ok
(
true
"
Main
view
was
shown
"
)
;
await
closeProtectionsPanel
(
win
)
;
}
)
;
}
)
;
