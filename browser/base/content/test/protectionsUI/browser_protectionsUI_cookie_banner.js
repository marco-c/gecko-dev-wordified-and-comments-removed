"
use
strict
"
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
sys
.
mjs
"
)
;
const
{
sinon
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
Sinon
.
sys
.
mjs
"
)
;
const
{
MODE_DISABLED
MODE_REJECT
MODE_REJECT_OR_ACCEPT
MODE_UNSET
}
=
Ci
.
nsICookieBannerService
;
const
exampleRules
=
JSON
.
stringify
(
[
{
id
:
"
4b18afb0
-
76db
-
4f9e
-
a818
-
ed9a783fae6a
"
cookies
:
{
}
click
:
{
optIn
:
"
#
foo
"
presence
:
"
#
bar
"
}
domains
:
[
"
example
.
com
"
]
}
]
)
;
function
cookieBannerSectionIsVisible
(
{
featureMode
featureModePBM
detectOnly
visibilityPref
testPBM
}
)
{
if
(
!
visibilityPref
)
{
return
false
;
}
if
(
detectOnly
)
{
return
false
;
}
return
(
(
testPBM
&
&
featureModePBM
!
=
MODE_DISABLED
)
|
|
(
!
testPBM
&
&
featureMode
!
=
MODE_DISABLED
)
)
;
}
async
function
testSectionVisibility
(
{
win
featureMode
featureModePBM
visibilityPref
testPBM
}
)
{
info
(
"
testSectionVisibility
"
+
JSON
.
stringify
(
{
featureMode
featureModePBM
visibilityPref
testPBM
}
)
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
featureMode
]
[
"
cookiebanners
.
service
.
mode
.
privateBrowsing
"
featureModePBM
]
[
"
cookiebanners
.
ui
.
desktop
.
enabled
"
visibilityPref
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
:
win
.
gBrowser
url
:
"
https
:
/
/
example
.
com
"
}
async
(
)
=
>
{
await
openProtectionsPanel
(
null
win
)
;
let
el
=
{
section
:
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookie
-
banner
-
section
"
)
sectionSeparator
:
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookie
-
banner
-
section
-
separator
"
)
switch
:
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookie
-
banner
-
switch
"
)
}
;
let
expectVisible
=
cookieBannerSectionIsVisible
(
{
featureMode
featureModePBM
visibilityPref
testPBM
}
)
;
is
(
BrowserTestUtils
.
isVisible
(
el
.
section
)
expectVisible
Cookie
banner
section
should
be
{
expectVisible
?
"
visible
"
:
"
not
visible
"
}
.
)
;
is
(
BrowserTestUtils
.
isVisible
(
el
.
sectionSeparator
)
expectVisible
Cookie
banner
section
separator
should
be
{
expectVisible
?
"
visible
"
:
"
not
visible
"
}
.
)
;
is
(
BrowserTestUtils
.
isVisible
(
el
.
switch
)
expectVisible
Cookie
banner
switch
should
be
{
expectVisible
?
"
visible
"
:
"
not
visible
"
}
.
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
add_task
(
async
function
test_section_visibility
(
)
{
for
(
let
testPBM
of
[
false
true
]
)
{
let
win
=
window
;
if
(
testPBM
)
{
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
win
.
focus
(
)
;
}
for
(
let
featureMode
of
[
MODE_DISABLED
MODE_REJECT
MODE_REJECT_OR_ACCEPT
]
)
{
for
(
let
featureModePBM
of
[
MODE_DISABLED
MODE_REJECT
MODE_REJECT_OR_ACCEPT
]
)
{
for
(
let
detectOnly
of
[
false
true
]
)
{
if
(
detectOnly
&
&
featureModePBM
!
=
MODE_DISABLED
)
{
continue
;
}
await
testSectionVisibility
(
{
win
featureMode
featureModePBM
detectOnly
testPBM
visibilityPref
:
true
}
)
;
}
}
}
if
(
testPBM
)
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
}
}
)
;
add_task
(
async
function
test_section_visibility_pref
(
)
{
for
(
let
visibilityPref
of
[
false
true
]
)
{
await
testSectionVisibility
(
{
win
:
window
featureMode
:
MODE_REJECT
featureModePBM
:
MODE_DISABLED
testPBM
:
false
visibilityPref
}
)
;
}
}
)
;
function
assertSwitchAndPrefState
(
{
win
isPBM
expectedSwitchState
}
)
{
let
el
=
{
section
:
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookie
-
banner
-
section
"
)
switch
:
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookie
-
banner
-
switch
"
)
labelON
:
win
.
document
.
querySelector
(
"
#
protections
-
popup
-
cookie
-
banner
-
detected
"
)
labelOFF
:
win
.
document
.
querySelector
(
"
#
protections
-
popup
-
cookie
-
banner
-
site
-
disabled
"
)
labelUNDETECTED
:
win
.
document
.
querySelector
(
"
#
protections
-
popup
-
cookie
-
banner
-
undetected
"
)
}
;
let
currentURI
=
win
.
gBrowser
.
currentURI
;
let
pref
=
Services
.
cookieBanners
.
getDomainPref
(
currentURI
isPBM
)
;
if
(
expectedSwitchState
=
=
"
on
"
)
{
ok
(
el
.
section
.
dataset
.
state
=
=
"
detected
"
"
CBH
switch
is
set
to
ON
"
)
;
ok
(
BrowserTestUtils
.
isVisible
(
el
.
labelON
)
"
ON
label
should
be
visible
"
)
;
ok
(
!
BrowserTestUtils
.
isVisible
(
el
.
labelOFF
)
"
OFF
label
should
not
be
visible
"
)
;
ok
(
!
BrowserTestUtils
.
isVisible
(
el
.
labelUNDETECTED
)
"
UNDETECTED
label
should
not
be
visible
"
)
;
is
(
pref
MODE_UNSET
There
should
be
no
per
-
site
exception
for
{
currentURI
.
spec
}
.
)
;
}
else
if
(
expectedSwitchState
=
=
=
"
off
"
)
{
ok
(
el
.
section
.
dataset
.
state
=
=
"
site
-
disabled
"
"
CBH
switch
is
set
to
OFF
"
)
;
ok
(
!
BrowserTestUtils
.
isVisible
(
el
.
labelON
)
"
ON
label
should
not
be
visible
"
)
;
ok
(
BrowserTestUtils
.
isVisible
(
el
.
labelOFF
)
"
OFF
label
should
be
visible
"
)
;
ok
(
!
BrowserTestUtils
.
isVisible
(
el
.
labelUNDETECTED
)
"
UNDETECTED
label
should
not
be
visible
"
)
;
is
(
pref
MODE_DISABLED
There
should
be
a
per
-
site
exception
for
{
currentURI
.
spec
}
.
)
;
}
else
{
ok
(
el
.
section
.
dataset
.
state
=
=
"
undetected
"
"
CBH
not
supported
for
site
"
)
;
ok
(
!
BrowserTestUtils
.
isVisible
(
el
.
labelON
)
"
ON
label
should
not
be
visible
"
)
;
ok
(
!
BrowserTestUtils
.
isVisible
(
el
.
labelOFF
)
"
OFF
label
should
not
be
visible
"
)
;
ok
(
BrowserTestUtils
.
isVisible
(
el
.
labelUNDETECTED
)
"
UNDETECTED
label
should
be
visible
"
)
;
}
}
function
assertTelemetryState
(
{
expectEnabled
=
null
}
=
{
}
)
{
info
(
"
Test
telemetry
state
.
"
)
;
let
events
=
[
]
;
const
CATEGORY
=
"
security
.
ui
.
protectionspopup
"
;
const
METHOD
=
"
click
"
;
if
(
expectEnabled
!
=
null
)
{
events
.
push
(
{
category
:
CATEGORY
method
:
METHOD
object
:
expectEnabled
?
"
cookieb_toggle_on
"
:
"
cookieb_toggle_off
"
}
)
;
}
TelemetryTestUtils
.
assertEvents
(
events
{
category
:
CATEGORY
method
:
METHOD
}
)
;
}
async
function
toggleCookieBannerHandling
(
enable
win
)
{
let
switchEl
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookie
-
banner
-
switch
"
)
;
let
enableButton
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookieBannerView
-
enable
-
button
"
)
;
let
disableButton
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookieBannerView
-
disable
-
button
"
)
;
let
subView
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookieBannerView
"
)
;
let
subViewShownPromise
=
BrowserTestUtils
.
waitForEvent
(
subView
"
ViewShown
"
)
;
switchEl
.
click
(
)
;
await
subViewShownPromise
;
if
(
enable
)
{
ok
(
BrowserTestUtils
.
isVisible
(
enableButton
)
"
Enable
button
is
visible
"
)
;
enableButton
.
click
(
)
;
}
else
{
ok
(
BrowserTestUtils
.
isVisible
(
disableButton
)
"
Disable
button
is
visible
"
)
;
disableButton
.
click
(
)
;
}
}
function
waitForProtectionsPopupHide
(
win
=
window
)
{
return
BrowserTestUtils
.
waitForEvent
(
win
.
document
.
getElementById
(
"
protections
-
popup
"
)
"
popuphidden
"
)
;
}
add_task
(
async
function
test_section_toggle
(
)
{
requestLongerTimeout
(
3
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
MODE_REJECT_OR_ACCEPT
]
[
"
cookiebanners
.
service
.
mode
.
privateBrowsing
"
MODE_REJECT_OR_ACCEPT
]
[
"
cookiebanners
.
ui
.
desktop
.
enabled
"
true
]
[
"
cookiebanners
.
listService
.
testRules
"
exampleRules
]
[
"
cookiebanners
.
listService
.
testSkipRemoteSettings
"
true
]
]
}
)
;
Services
.
cookieBanners
.
resetRules
(
false
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
!
Services
.
cookieBanners
.
rules
.
length
"
waiting
for
Services
.
cookieBanners
.
rules
.
length
to
be
greater
than
0
"
)
;
for
(
let
testPBM
of
[
false
true
]
)
{
let
win
=
window
;
if
(
testPBM
)
{
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
}
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
:
win
.
gBrowser
url
:
"
https
:
/
/
example
.
com
"
}
async
(
)
=
>
{
let
clearSiteDataSpy
=
sinon
.
spy
(
window
.
SiteDataManager
"
remove
"
)
;
await
openProtectionsPanel
(
null
win
)
;
let
switchEl
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookie
-
banner
-
switch
"
)
;
info
(
"
Testing
initial
switch
ON
state
.
"
)
;
assertSwitchAndPrefState
(
{
win
isPBM
:
testPBM
switchEl
expectedSwitchState
:
"
on
"
}
)
;
assertTelemetryState
(
)
;
info
(
"
Testing
switch
state
after
toggle
OFF
"
)
;
let
closePromise
=
waitForProtectionsPopupHide
(
win
)
;
await
toggleCookieBannerHandling
(
false
win
)
;
await
closePromise
;
if
(
testPBM
)
{
Assert
.
ok
(
clearSiteDataSpy
.
notCalled
"
clearSiteData
should
not
be
called
in
private
browsing
mode
"
)
;
}
else
{
Assert
.
ok
(
clearSiteDataSpy
.
calledOnce
"
clearSiteData
should
be
called
in
regular
browsing
mode
"
)
;
}
clearSiteDataSpy
.
restore
(
)
;
await
openProtectionsPanel
(
null
win
)
;
assertSwitchAndPrefState
(
{
win
isPBM
:
testPBM
switchEl
expectedSwitchState
:
"
off
"
}
)
;
assertTelemetryState
(
{
expectEnabled
:
false
}
)
;
info
(
"
Testing
switch
state
after
toggle
ON
.
"
)
;
closePromise
=
waitForProtectionsPopupHide
(
win
)
;
await
toggleCookieBannerHandling
(
true
win
)
;
await
closePromise
;
await
openProtectionsPanel
(
null
win
)
;
assertSwitchAndPrefState
(
{
win
isPBM
:
testPBM
switchEl
expectedSwitchState
:
"
on
"
}
)
;
assertTelemetryState
(
{
expectEnabled
:
true
}
)
;
}
)
;
if
(
testPBM
)
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
}
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
