"
use
strict
"
;
const
{
MODE_DISABLED
MODE_REJECT
MODE_REJECT_OR_ACCEPT
MODE_UNSET
}
=
Ci
.
nsICookieBannerService
;
function
cookieBannerSectionIsVisible
(
{
featureMode
featureModePBM
visibilityPref
testPBM
}
)
{
if
(
!
visibilityPref
)
{
return
false
;
}
return
(
(
testPBM
&
&
featureModePBM
!
=
MODE_DISABLED
)
|
|
(
!
testPBM
&
&
featureMode
!
=
MODE_DISABLED
)
)
;
}
async
function
testSectionVisibility
(
{
win
featureMode
featureModePBM
visibilityPref
testPBM
}
)
{
info
(
"
testSectionVisibility
"
+
JSON
.
stringify
(
{
featureMode
featureModePBM
visibilityPref
testPBM
}
)
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
featureMode
]
[
"
cookiebanners
.
service
.
mode
.
privateBrowsing
"
featureModePBM
]
[
"
cookiebanners
.
ui
.
desktop
.
enabled
"
visibilityPref
]
]
}
)
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
:
win
.
gBrowser
url
:
"
https
:
/
/
example
.
com
"
}
async
(
)
=
>
{
await
openProtectionsPanel
(
null
win
)
;
let
el
=
{
section
:
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookie
-
banner
-
section
"
)
sectionSeparator
:
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookie
-
banner
-
section
-
separator
"
)
switch
:
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookie
-
banner
-
switch
"
)
}
;
let
expectVisible
=
cookieBannerSectionIsVisible
(
{
featureMode
featureModePBM
visibilityPref
testPBM
}
)
;
is
(
BrowserTestUtils
.
is_visible
(
el
.
section
)
expectVisible
Cookie
banner
section
should
be
{
expectVisible
?
"
visible
"
:
"
not
visible
"
}
.
)
;
is
(
BrowserTestUtils
.
is_visible
(
el
.
sectionSeparator
)
expectVisible
Cookie
banner
section
separator
should
be
{
expectVisible
?
"
visible
"
:
"
not
visible
"
}
.
)
;
is
(
BrowserTestUtils
.
is_visible
(
el
.
switch
)
expectVisible
Cookie
banner
switch
should
be
{
expectVisible
?
"
visible
"
:
"
not
visible
"
}
.
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
add_task
(
async
function
test_section_visibility
(
)
{
for
(
let
testPBM
of
[
false
true
]
)
{
let
win
=
window
;
if
(
testPBM
)
{
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
win
.
focus
(
)
;
}
for
(
let
featureMode
of
[
MODE_DISABLED
MODE_REJECT
MODE_REJECT_OR_ACCEPT
]
)
{
for
(
let
featureModePBM
of
[
MODE_DISABLED
MODE_REJECT
MODE_REJECT_OR_ACCEPT
]
)
{
await
testSectionVisibility
(
{
win
featureMode
featureModePBM
testPBM
visibilityPref
:
true
}
)
;
}
}
if
(
testPBM
)
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
}
}
)
;
add_task
(
async
function
test_section_visibility_pref
(
)
{
for
(
let
visibilityPref
of
[
false
true
]
)
{
await
testSectionVisibility
(
{
win
:
window
featureMode
:
MODE_REJECT
featureModePBM
:
MODE_DISABLED
testPBM
:
false
visibilityPref
}
)
;
}
}
)
;
function
assertSwitchAndPrefState
(
{
win
isPBM
expectEnabled
}
)
{
let
el
=
{
switch
:
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookie
-
banner
-
switch
"
)
labelON
:
win
.
document
.
querySelector
(
"
.
protections
-
popup
-
cookie
-
banner
-
switch
-
on
-
header
"
)
labelOFF
:
win
.
document
.
querySelector
(
"
.
protections
-
popup
-
cookie
-
banner
-
switch
-
off
-
header
"
)
}
;
info
(
"
Test
switch
state
.
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
el
.
switch
)
"
Switch
should
be
visible
"
)
;
is
(
el
.
switch
.
hasAttribute
(
"
enabled
"
)
expectEnabled
Switch
is
{
expectEnabled
?
"
enabled
"
:
"
disabled
"
}
.
)
;
info
(
"
Test
switch
labels
.
"
)
;
if
(
expectEnabled
)
{
ok
(
BrowserTestUtils
.
is_visible
(
el
.
labelON
)
"
ON
label
should
be
visible
"
)
;
ok
(
!
BrowserTestUtils
.
is_visible
(
el
.
labelOFF
)
"
OFF
label
should
not
be
visible
"
)
;
}
else
{
ok
(
!
BrowserTestUtils
.
is_visible
(
el
.
labelON
)
"
ON
label
should
not
be
visible
"
)
;
ok
(
BrowserTestUtils
.
is_visible
(
el
.
labelOFF
)
"
OFF
label
should
be
visible
"
)
;
}
info
(
"
Test
per
-
site
exception
state
.
"
)
;
let
currentURI
=
win
.
gBrowser
.
currentURI
;
let
pref
=
Services
.
cookieBanners
.
getDomainPref
(
currentURI
isPBM
)
;
if
(
expectEnabled
)
{
is
(
pref
MODE_UNSET
There
should
be
no
per
-
site
exception
for
{
currentURI
.
spec
}
.
)
;
}
else
{
is
(
pref
MODE_DISABLED
There
should
be
a
per
-
site
exception
for
{
currentURI
.
spec
}
.
)
;
}
}
add_task
(
async
function
test_section_toggle
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
cookiebanners
.
service
.
mode
"
MODE_REJECT_OR_ACCEPT
]
[
"
cookiebanners
.
service
.
mode
.
privateBrowsing
"
MODE_REJECT
]
[
"
cookiebanners
.
ui
.
desktop
.
enabled
"
true
]
]
}
)
;
for
(
let
testPBM
of
[
false
true
]
)
{
let
win
=
window
;
if
(
testPBM
)
{
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
}
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
:
win
.
gBrowser
url
:
"
https
:
/
/
example
.
com
"
}
async
(
)
=
>
{
await
openProtectionsPanel
(
null
win
)
;
let
switchEl
=
win
.
document
.
getElementById
(
"
protections
-
popup
-
cookie
-
banner
-
switch
"
)
;
info
(
"
Testing
initial
switch
ON
state
.
"
)
;
assertSwitchAndPrefState
(
{
win
isPBM
:
testPBM
switchEl
expectEnabled
:
true
}
)
;
info
(
"
Testing
switch
state
after
toggle
OFF
"
)
;
switchEl
.
click
(
)
;
assertSwitchAndPrefState
(
{
win
isPBM
:
testPBM
switchEl
expectEnabled
:
false
}
)
;
info
(
"
Reopen
the
panel
to
test
the
initial
switch
OFF
state
.
"
)
;
await
closeProtectionsPanel
(
win
)
;
await
openProtectionsPanel
(
null
win
)
;
assertSwitchAndPrefState
(
{
win
isPBM
:
testPBM
switchEl
expectEnabled
:
false
}
)
;
info
(
"
Testing
switch
state
after
toggle
ON
.
"
)
;
switchEl
.
click
(
)
;
assertSwitchAndPrefState
(
{
win
isPBM
:
testPBM
switchEl
expectEnabled
:
true
}
)
;
info
(
"
Reopen
the
panel
to
test
the
initial
switch
ON
state
.
"
)
;
await
closeProtectionsPanel
(
win
)
;
await
openProtectionsPanel
(
null
win
)
;
assertSwitchAndPrefState
(
{
win
isPBM
:
testPBM
switchEl
expectEnabled
:
true
}
)
;
}
)
;
if
(
testPBM
)
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
}
}
)
;
