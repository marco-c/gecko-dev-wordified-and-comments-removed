var
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
BrowserTestUtils
"
"
resource
:
/
/
testing
-
common
/
BrowserTestUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ContentTask
"
"
resource
:
/
/
testing
-
common
/
ContentTask
.
jsm
"
)
;
const
REFERRER_URL_BASE
=
"
/
browser
/
browser
/
base
/
content
/
test
/
referrer
/
"
;
const
REFERRER_POLICYSERVER_URL
=
"
test1
.
example
.
com
"
+
REFERRER_URL_BASE
+
"
file_referrer_policyserver
.
sjs
"
;
const
REFERRER_POLICYSERVER_URL_ATTRIBUTE
=
"
test1
.
example
.
com
"
+
REFERRER_URL_BASE
+
"
file_referrer_policyserver_attr
.
sjs
"
;
var
gTestWindow
=
null
;
var
rounds
=
0
;
var
_referrerTests
=
[
{
fromScheme
:
"
http
:
/
/
"
toScheme
:
"
http
:
/
/
"
result
:
"
http
:
/
/
test1
.
example
.
com
/
browser
"
}
{
fromScheme
:
"
https
:
/
/
"
toScheme
:
"
http
:
/
/
"
result
:
"
"
}
{
fromScheme
:
"
https
:
/
/
"
toScheme
:
"
http
:
/
/
"
policy
:
"
origin
"
result
:
"
https
:
/
/
test1
.
example
.
com
/
"
}
{
fromScheme
:
"
https
:
/
/
"
toScheme
:
"
http
:
/
/
"
policy
:
"
origin
"
rel
:
"
noreferrer
"
result
:
"
"
}
{
fromScheme
:
"
https
:
/
/
"
toScheme
:
"
https
:
/
/
"
policy
:
"
no
-
referrer
"
result
:
"
"
}
{
fromScheme
:
"
http
:
/
/
"
toScheme
:
"
https
:
/
/
"
policy
:
"
no
-
referrer
"
result
:
"
"
}
]
;
function
getReferrerTest
(
aTestNumber
)
{
return
_referrerTests
[
aTestNumber
]
;
}
function
getRemovedReferrerTest
(
aTestNumber
)
{
let
testCase
=
_referrerTests
[
aTestNumber
]
;
if
(
testCase
)
{
testCase
.
result
=
"
"
;
}
return
testCase
;
}
function
getReferrerTestDescription
(
aTestNumber
)
{
let
test
=
getReferrerTest
(
aTestNumber
)
;
return
(
"
policy
=
[
"
+
test
.
policy
+
"
]
"
+
"
rel
=
[
"
+
test
.
rel
+
"
]
"
+
test
.
fromScheme
+
"
-
>
"
+
test
.
toScheme
)
;
}
function
clickTheLink
(
aWindow
aLinkId
aOptions
)
{
return
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
"
+
aLinkId
aOptions
aWindow
.
gBrowser
.
selectedBrowser
)
;
}
function
referrerResultExtracted
(
aWindow
)
{
return
SpecialPowers
.
spawn
(
aWindow
.
gBrowser
.
selectedBrowser
[
]
function
(
)
{
return
content
.
document
.
getElementById
(
"
testdiv
"
)
.
textContent
;
}
)
;
}
function
delayedStartupFinished
(
aWindow
)
{
return
new
Promise
(
function
(
resolve
)
{
Services
.
obs
.
addObserver
(
function
observer
(
aSubject
aTopic
)
{
if
(
aWindow
=
=
aSubject
)
{
Services
.
obs
.
removeObserver
(
observer
aTopic
)
;
resolve
(
)
;
}
}
"
browser
-
delayed
-
startup
-
finished
"
)
;
}
)
;
}
function
someTabLoaded
(
aWindow
)
{
return
BrowserTestUtils
.
waitForNewTab
(
gTestWindow
.
gBrowser
null
true
)
;
}
function
newWindowOpened
(
)
{
return
TestUtils
.
topicObserved
(
"
browser
-
delayed
-
startup
-
finished
"
)
.
then
(
(
[
win
]
)
=
>
win
)
;
}
function
contextMenuOpened
(
aWindow
aLinkId
)
{
let
popupShownPromise
=
BrowserTestUtils
.
waitForEvent
(
aWindow
.
document
"
popupshown
"
)
;
clickTheLink
(
aWindow
aLinkId
{
type
:
"
contextmenu
"
button
:
2
}
)
;
return
popupShownPromise
.
then
(
e
=
>
e
.
target
)
;
}
function
doContextMenuCommand
(
aWindow
aMenu
aItemId
)
{
let
command
=
aWindow
.
document
.
getElementById
(
aItemId
)
;
command
.
doCommand
(
)
;
aMenu
.
hidePopup
(
)
;
}
function
referrerTestCaseLoaded
(
aTestNumber
aParams
)
{
let
test
=
getReferrerTest
(
aTestNumber
)
;
let
server
=
rounds
=
=
0
?
REFERRER_POLICYSERVER_URL
:
REFERRER_POLICYSERVER_URL_ATTRIBUTE
;
let
url
=
test
.
fromScheme
+
server
+
"
?
scheme
=
"
+
escape
(
test
.
toScheme
)
+
"
&
policy
=
"
+
escape
(
test
.
policy
|
|
"
"
)
+
"
&
rel
=
"
+
escape
(
test
.
rel
|
|
"
"
)
+
"
&
cross
=
"
+
escape
(
test
.
cross
|
|
"
"
)
;
let
browser
=
gTestWindow
.
gBrowser
;
return
BrowserTestUtils
.
openNewForegroundTab
(
browser
(
)
=
>
{
browser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
browser
url
aParams
)
;
}
false
true
)
;
}
function
checkReferrerAndStartNextTest
(
aTestNumber
aNewWindow
aNewTab
aStartTestCase
aParams
=
{
}
)
{
referrerResultExtracted
(
aNewWindow
|
|
gTestWindow
)
.
then
(
function
(
result
)
{
let
test
=
getReferrerTest
(
aTestNumber
)
;
let
desc
=
getReferrerTestDescription
(
aTestNumber
)
;
is
(
result
test
.
result
desc
)
;
aNewTab
&
&
(
aNewWindow
|
|
gTestWindow
)
.
gBrowser
.
removeTab
(
aNewTab
)
;
aNewWindow
&
&
aNewWindow
.
close
(
)
;
is
(
gTestWindow
.
gBrowser
.
tabs
.
length
2
"
two
tabs
open
"
)
;
gTestWindow
.
gBrowser
.
removeTab
(
gTestWindow
.
gBrowser
.
tabs
[
1
]
)
;
var
nextTestNumber
=
aTestNumber
+
1
;
if
(
getReferrerTest
(
nextTestNumber
)
)
{
referrerTestCaseLoaded
(
nextTestNumber
aParams
)
.
then
(
function
(
)
{
aStartTestCase
(
nextTestNumber
)
;
}
)
;
}
else
if
(
rounds
=
=
0
)
{
nextTestNumber
=
0
;
rounds
=
1
;
referrerTestCaseLoaded
(
nextTestNumber
aParams
)
.
then
(
function
(
)
{
aStartTestCase
(
nextTestNumber
)
;
}
)
;
}
else
{
finish
(
)
;
}
}
)
;
}
function
startReferrerTest
(
aStartTestCase
params
=
{
}
)
{
waitForExplicitFinish
(
)
;
gTestWindow
=
openDialog
(
location
"
"
"
chrome
all
dialog
=
no
"
"
about
:
blank
"
)
;
registerCleanupFunction
(
function
(
)
{
gTestWindow
&
&
gTestWindow
.
close
(
)
;
}
)
;
delayedStartupFinished
(
gTestWindow
)
.
then
(
function
(
)
{
referrerTestCaseLoaded
(
0
params
)
.
then
(
function
(
)
{
aStartTestCase
(
0
)
;
}
)
;
}
)
;
}
