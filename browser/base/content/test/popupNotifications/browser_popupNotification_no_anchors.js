function
test
(
)
{
waitForExplicitFinish
(
)
;
ok
(
PopupNotifications
"
PopupNotifications
object
exists
"
)
;
ok
(
PopupNotifications
.
panel
"
PopupNotifications
panel
exists
"
)
;
setup
(
)
;
}
var
tests
=
[
{
id
:
"
Test
#
1
"
async
run
(
)
{
this
.
oldSelectedTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
anchorID
=
"
geo
-
notification
-
icon
"
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
is
(
document
.
getElementById
(
"
geo
-
notification
-
icon
"
)
.
boxObject
.
width
0
"
geo
anchor
shouldn
'
t
be
visible
"
)
;
is
(
popup
.
anchorNode
.
id
"
identity
-
icon
"
"
notification
anchored
to
identity
icon
"
)
;
dismissNotification
(
popup
)
;
}
onHidden
(
popup
)
{
this
.
notification
.
remove
(
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
gBrowser
.
selectedTab
=
this
.
oldSelectedTab
;
}
}
{
id
:
"
Test
#
2
"
async
run
(
)
{
this
.
oldSelectedTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
com
/
"
)
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
anchorID
=
"
geo
-
notification
-
icon
"
;
this
.
notifyObj
.
addOptions
(
{
persistence
:
1
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
async
onShown
(
popup
)
{
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
about
:
blank
"
)
;
checkPopup
(
popup
this
.
notifyObj
)
;
is
(
document
.
getElementById
(
"
geo
-
notification
-
icon
"
)
.
boxObject
.
width
0
"
geo
anchor
shouldn
'
t
be
visible
"
)
;
is
(
popup
.
anchorNode
.
id
"
identity
-
icon
"
"
notification
anchored
to
identity
icon
"
)
;
dismissNotification
(
popup
)
;
}
onHidden
(
popup
)
{
this
.
notification
.
remove
(
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
gBrowser
.
selectedTab
=
this
.
oldSelectedTab
;
}
}
{
id
:
"
Test
#
3
"
async
run
(
)
{
this
.
oldSelectedTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
anchorID
=
"
geo
-
notification
-
icon
"
;
this
.
notifyObj
.
addOptions
(
{
dismissed
:
true
persistence
:
1
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
is
(
document
.
getElementById
(
"
geo
-
notification
-
icon
"
)
.
boxObject
.
width
0
"
geo
anchor
shouldn
'
t
be
visible
"
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
com
/
"
)
;
isnot
(
document
.
getElementById
(
"
geo
-
notification
-
icon
"
)
.
boxObject
.
width
0
"
geo
anchor
should
be
visible
"
)
;
EventUtils
.
synthesizeMouse
(
document
.
getElementById
(
"
geo
-
notification
-
icon
"
)
0
0
{
}
)
;
}
onShown
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
dismissNotification
(
popup
)
;
}
onHidden
(
popup
)
{
this
.
notification
.
remove
(
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
gBrowser
.
selectedTab
=
this
.
oldSelectedTab
;
}
}
{
id
:
"
Test
#
4
"
async
run
(
)
{
for
(
let
persistent
of
[
false
true
]
)
{
let
shown
=
waitForNotificationPanel
(
)
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
anchorID
=
"
geo
-
notification
-
icon
"
;
this
.
notifyObj
.
addOptions
(
{
persistent
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
await
shown
;
checkPopup
(
PopupNotifications
.
panel
this
.
notifyObj
)
;
let
hidden
=
waitForNotificationPanelHidden
(
)
;
gURLBar
.
select
(
)
;
EventUtils
.
synthesizeKey
(
"
*
"
{
}
)
;
await
hidden
;
is
(
document
.
getElementById
(
"
geo
-
notification
-
icon
"
)
.
boxObject
.
width
0
"
geo
anchor
shouldn
'
t
be
visible
"
)
;
shown
=
waitForNotificationPanel
(
)
;
EventUtils
.
synthesizeKey
(
"
VK_BACK_SPACE
"
{
}
)
;
EventUtils
.
synthesizeKey
(
"
VK_TAB
"
{
}
)
;
await
shown
;
is
(
PopupNotifications
.
panel
.
anchorNode
.
id
"
identity
-
icon
"
"
notification
anchored
to
identity
icon
"
)
;
hidden
=
waitForNotificationPanelHidden
(
)
;
EventUtils
.
synthesizeKey
(
"
VK_TAB
"
{
shiftKey
:
true
}
)
;
await
hidden
;
shown
=
waitForNotificationPanel
(
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
)
;
await
shown
;
checkPopup
(
PopupNotifications
.
panel
this
.
notifyObj
)
;
hidden
=
waitForNotificationPanelHidden
(
)
;
this
.
notification
.
remove
(
)
;
await
hidden
;
}
goNext
(
)
;
}
}
{
id
:
"
Test
#
5
"
async
run
(
)
{
for
(
let
persistent
of
[
false
true
]
)
{
gURLBar
.
select
(
)
;
EventUtils
.
synthesizeKey
(
"
*
"
{
}
)
;
EventUtils
.
synthesizeKey
(
"
VK_BACK_SPACE
"
{
}
)
;
let
notShowing
=
promiseTopicObserved
(
"
PopupNotifications
-
updateNotShowing
"
)
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
anchorID
=
"
geo
-
notification
-
icon
"
;
this
.
notifyObj
.
addOptions
(
{
persistent
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
await
notShowing
;
let
shown
=
waitForNotificationPanel
(
)
;
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
)
;
await
shown
;
checkPopup
(
PopupNotifications
.
panel
this
.
notifyObj
)
;
let
hidden
=
waitForNotificationPanelHidden
(
)
;
this
.
notification
.
remove
(
)
;
await
hidden
;
}
goNext
(
)
;
}
}
{
id
:
"
Test
#
6
"
async
run
(
)
{
let
shown
=
waitForNotificationPanel
(
)
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
anchorID
=
"
geo
-
notification
-
icon
"
;
this
.
notifyObj
.
addOptions
(
{
persistent
:
true
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
await
shown
;
let
hidden
=
waitForNotificationPanelHidden
(
)
;
this
.
oldSelectedTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
com
/
"
)
;
await
hidden
;
gURLBar
.
select
(
)
;
EventUtils
.
synthesizeKey
(
"
*
"
{
}
)
;
shown
=
waitForNotificationPanel
(
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
gBrowser
.
selectedTab
=
this
.
oldSelectedTab
;
await
shown
;
checkPopup
(
PopupNotifications
.
panel
this
.
notifyObj
)
;
hidden
=
waitForNotificationPanelHidden
(
)
;
this
.
notification
.
remove
(
)
;
await
hidden
;
goNext
(
)
;
}
}
]
;
