function
test
(
)
{
waitForExplicitFinish
(
)
;
ok
(
PopupNotifications
"
PopupNotifications
object
exists
"
)
;
ok
(
PopupNotifications
.
panel
"
PopupNotifications
panel
exists
"
)
;
setup
(
)
;
goNext
(
)
;
}
var
gNotification
;
var
tests
=
[
{
id
:
"
Test
#
1
"
run
:
function
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
:
function
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
this
.
notifyObj
.
showingCallbackTriggered
=
false
;
this
.
notifyObj
.
shownCallbackTriggered
=
false
;
PopupNotifications
.
_update
(
)
;
checkPopup
(
popup
this
.
notifyObj
)
;
this
.
notification
.
remove
(
)
;
}
onHidden
:
function
(
)
{
}
}
{
id
:
"
Test
#
2
"
run
:
function
(
)
{
this
.
notifyObj1
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj1
.
id
+
=
"
_1
"
;
this
.
notifyObj1
.
anchorID
=
"
default
-
notification
-
icon
"
;
this
.
notifyObj1
.
options
.
dismissed
=
true
;
this
.
notification1
=
showNotification
(
this
.
notifyObj1
)
;
this
.
notifyObj2
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj2
.
id
+
=
"
_2
"
;
this
.
notifyObj2
.
anchorID
=
"
geo
-
notification
-
icon
"
;
this
.
notifyObj2
.
options
.
dismissed
=
true
;
this
.
notification2
=
showNotification
(
this
.
notifyObj2
)
;
this
.
notification2
.
dismissed
=
false
;
PopupNotifications
.
_update
(
)
;
}
onShown
:
function
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj2
)
;
this
.
notification1
.
remove
(
)
;
this
.
notification2
.
remove
(
)
;
}
onHidden
:
function
(
popup
)
{
}
}
{
id
:
"
Test
#
3
"
run
:
function
(
)
{
let
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
notifyObj
.
options
.
dismissed
=
true
;
let
win
=
gBrowser
.
replaceTabWithWindow
(
gBrowser
.
addTab
(
"
about
:
blank
"
)
)
;
whenDelayedStartupFinished
(
win
function
(
)
{
showNotification
(
notifyObj
)
;
let
anchor
=
document
.
getElementById
(
"
default
-
notification
-
icon
"
)
;
is
(
anchor
.
getAttribute
(
"
showing
"
)
"
true
"
"
the
anchor
is
shown
"
)
;
win
.
close
(
)
;
goNext
(
)
;
}
)
;
}
}
{
id
:
"
Test
#
4
"
run
:
function
*
(
)
{
this
.
oldSelectedTab
=
gBrowser
.
selectedTab
;
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
"
about
:
blank
"
)
;
yield
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
com
/
"
)
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
addOptions
(
{
persistent
:
true
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
:
function
*
(
popup
)
{
this
.
complete
=
false
;
yield
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
org
/
"
)
;
yield
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
com
/
"
)
;
ok
(
false
"
Should
have
removed
the
notification
after
navigation
"
)
;
this
.
complete
=
true
;
triggerSecondaryCommand
(
popup
1
)
;
}
onHidden
:
function
(
popup
)
{
ok
(
!
this
.
complete
"
Should
have
hidden
the
notification
after
navigation
"
)
;
this
.
notification
.
remove
(
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
gBrowser
.
selectedTab
=
this
.
oldSelectedTab
;
}
}
{
id
:
"
Test
#
5
"
run
:
function
*
(
)
{
this
.
oldSelectedTab
=
gBrowser
.
selectedTab
;
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
"
about
:
blank
"
)
;
yield
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
com
/
"
)
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
addOptions
(
{
persistent
:
true
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
:
function
*
(
popup
)
{
this
.
complete
=
false
;
let
browser
=
gBrowser
.
selectedBrowser
;
yield
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
body
"
{
}
browser
)
this
.
complete
=
true
;
triggerSecondaryCommand
(
popup
1
)
;
}
onHidden
:
function
(
popup
)
{
ok
(
this
.
complete
"
Should
have
hidden
the
notification
after
clicking
Not
Now
"
)
;
this
.
notification
.
remove
(
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
gBrowser
.
selectedTab
=
this
.
oldSelectedTab
;
}
}
{
id
:
"
Test
#
6a
"
run
:
function
*
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
options
.
persistent
=
true
;
gNotification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
:
function
*
(
popup
)
{
this
.
oldSelectedTab
=
gBrowser
.
selectedTab
;
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
"
about
:
blank
"
)
;
info
(
"
Waiting
for
the
new
tab
to
load
.
"
)
;
yield
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
com
/
"
)
;
}
onHidden
:
function
(
popup
)
{
ok
(
true
"
Should
have
hidden
the
notification
after
tab
switch
"
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
gBrowser
.
selectedTab
=
this
.
oldSelectedTab
;
}
}
{
id
:
"
Test
#
6b
"
run
:
function
*
(
)
{
let
id
=
PopupNotifications
.
panel
.
firstChild
.
getAttribute
(
"
popupid
"
)
;
ok
(
id
.
endsWith
(
"
Test
#
6a
"
)
"
Should
have
found
the
notification
from
Test6a
"
)
;
ok
(
PopupNotifications
.
isPanelOpen
"
Should
have
shown
the
popup
again
after
getting
back
to
the
tab
"
)
;
gNotification
.
remove
(
)
;
gNotification
=
null
;
goNext
(
)
;
}
}
{
id
:
"
Test
#
7
"
run
:
function
*
(
)
{
this
.
oldSelectedTab
=
gBrowser
.
selectedTab
;
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
"
about
:
blank
"
)
;
let
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
notifyObj
.
options
.
persistent
=
true
;
this
.
notification
=
showNotification
(
notifyObj
)
;
let
win
=
gBrowser
.
replaceTabWithWindow
(
gBrowser
.
addTab
(
"
about
:
blank
"
)
)
;
whenDelayedStartupFinished
(
win
(
)
=
>
{
ok
(
notifyObj
.
shownCallbackTriggered
"
Should
have
triggered
the
shown
callback
"
)
;
let
anchor
=
win
.
document
.
getElementById
(
"
default
-
notification
-
icon
"
)
;
win
.
PopupNotifications
.
_reshowNotifications
(
anchor
)
;
ok
(
win
.
PopupNotifications
.
panel
.
childNodes
.
length
=
=
0
"
no
notification
displayed
in
new
window
"
)
;
ok
(
PopupNotifications
.
isPanelOpen
"
Should
be
still
showing
the
popup
in
the
first
window
"
)
;
win
.
close
(
)
;
let
id
=
PopupNotifications
.
panel
.
firstChild
.
getAttribute
(
"
popupid
"
)
;
ok
(
id
.
endsWith
(
"
Test
#
7
"
)
"
Should
have
found
the
notification
from
Test7
"
)
;
ok
(
PopupNotifications
.
isPanelOpen
"
Should
have
shown
the
popup
again
after
getting
back
to
the
window
"
)
;
this
.
notification
.
remove
(
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
gBrowser
.
selectedTab
=
this
.
oldSelectedTab
;
goNext
(
)
;
}
)
;
}
}
]
;
