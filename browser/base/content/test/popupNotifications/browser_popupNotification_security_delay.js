"
use
strict
"
;
const
TEST_SECURITY_DELAY
=
5000
;
function
showNotification
(
)
{
PopupNotifications
.
show
(
gBrowser
.
selectedBrowser
"
foo
"
"
Hello
World
!
"
"
default
-
notification
-
icon
"
{
label
:
"
ok
"
accessKey
:
"
o
"
callback
:
(
)
=
>
{
}
}
[
{
label
:
"
cancel
"
accessKey
:
"
c
"
callback
:
(
)
=
>
{
}
}
]
{
}
)
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
notification_enable_delay
"
TEST_SECURITY_DELAY
]
]
}
)
;
}
)
;
add_task
(
async
function
test_timeShownMultipleNotifications
(
)
{
await
TestUtils
.
waitForCondition
(
(
)
=
>
performance
.
now
(
)
>
TEST_SECURITY_DELAY
"
Wait
for
performance
.
now
(
)
>
SECURITY_DELAY
"
500
50
)
;
ok
(
!
PopupNotifications
.
isPanelOpen
"
PopupNotification
panel
should
not
be
open
initially
.
"
)
;
info
(
"
Open
the
first
notification
.
"
)
;
let
popupShownPromise
=
waitForNotificationPanel
(
)
;
showNotification
(
)
;
await
popupShownPromise
;
ok
(
PopupNotifications
.
isPanelOpen
"
PopupNotification
should
be
open
after
first
show
call
.
"
)
;
is
(
PopupNotifications
.
_currentNotifications
.
length
1
"
There
should
only
be
one
notification
"
)
;
let
notification
=
PopupNotifications
.
getNotification
(
"
foo
"
gBrowser
.
selectedBrowser
)
;
is
(
notification
?
.
id
"
foo
"
"
There
should
be
a
notification
with
id
foo
"
)
;
ok
(
notification
.
timeShown
"
The
notification
should
have
timeShown
set
"
)
;
info
(
"
Call
show
again
with
the
same
notification
id
while
the
PopupNotification
panel
is
still
open
.
"
)
;
showNotification
(
)
;
ok
(
PopupNotifications
.
isPanelOpen
"
PopupNotification
should
still
open
after
second
show
call
.
"
)
;
notification
=
PopupNotifications
.
getNotification
(
"
foo
"
gBrowser
.
selectedBrowser
)
;
is
(
PopupNotifications
.
_currentNotifications
.
length
1
"
There
should
still
only
be
one
notification
"
)
;
is
(
notification
?
.
id
"
foo
"
"
There
should
still
be
a
notification
with
id
foo
"
)
;
ok
(
notification
.
timeShown
"
The
notification
should
have
timeShown
set
"
)
;
let
notificationHiddenPromise
=
waitForNotificationPanelHidden
(
)
;
info
(
"
Trigger
main
action
via
button
click
during
security
delay
"
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
triggerMainCommand
(
PopupNotifications
.
panel
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
ok
(
PopupNotifications
.
isPanelOpen
"
PopupNotification
should
still
be
open
.
"
)
;
notification
=
PopupNotifications
.
getNotification
(
"
foo
"
gBrowser
.
selectedBrowser
)
;
ok
(
notification
"
Notification
should
still
be
open
because
we
clicked
during
the
security
delay
.
"
)
;
if
(
!
notification
)
{
return
;
}
let
fakeTimeShown
=
TEST_SECURITY_DELAY
+
500
;
info
(
Manually
set
timeShown
to
{
fakeTimeShown
}
ms
in
the
past
.
)
;
notification
.
timeShown
=
performance
.
now
(
)
-
fakeTimeShown
;
info
(
"
Trigger
main
action
via
button
click
outside
security
delay
"
)
;
triggerMainCommand
(
PopupNotifications
.
panel
)
;
info
(
"
Wait
for
panel
to
be
hidden
.
"
)
;
await
notificationHiddenPromise
;
ok
(
!
PopupNotifications
.
getNotification
(
"
foo
"
gBrowser
.
selectedBrowser
)
"
Should
not
longer
see
the
notification
.
"
)
;
}
)
;
