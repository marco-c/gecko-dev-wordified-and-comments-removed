function
test
(
)
{
waitForExplicitFinish
(
)
;
ok
(
PopupNotifications
"
PopupNotifications
object
exists
"
)
;
ok
(
PopupNotifications
.
panel
"
PopupNotifications
panel
exists
"
)
;
setup
(
)
;
goNext
(
)
;
}
function
checkCheckbox
(
checkbox
label
checked
=
false
hidden
=
false
)
{
is
(
checkbox
.
label
label
"
Checkbox
should
have
the
correct
label
"
)
;
is
(
checkbox
.
hidden
hidden
"
Checkbox
should
be
shown
"
)
;
is
(
checkbox
.
checked
checked
"
Checkbox
should
be
checked
by
default
"
)
;
}
function
checkMainAction
(
notification
disabled
=
false
)
{
let
mainAction
=
notification
.
button
;
let
warningLabel
=
document
.
getAnonymousElementByAttribute
(
notification
"
class
"
"
popup
-
notification
-
warning
"
)
;
is
(
warningLabel
.
hidden
!
disabled
"
Warning
label
should
be
shown
"
)
;
is
(
mainAction
.
disabled
disabled
"
MainAction
should
be
disabled
"
)
;
}
var
gNotification
;
var
tests
=
[
{
id
:
"
show_checkbox
"
run
:
function
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
options
.
checkbox
=
{
label
:
"
This
is
a
checkbox
"
}
;
gNotification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
:
function
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
let
notification
=
popup
.
childNodes
[
0
]
;
checkCheckbox
(
notification
.
checkbox
"
This
is
a
checkbox
"
)
;
triggerMainCommand
(
popup
)
;
}
onHidden
:
function
(
)
{
}
}
{
id
:
"
checkbox_checked
"
run
:
function
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
options
.
checkbox
=
{
label
:
"
Check
this
"
checked
:
true
}
;
gNotification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
:
function
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
let
notification
=
popup
.
childNodes
[
0
]
;
checkCheckbox
(
notification
.
checkbox
"
Check
this
"
true
)
;
triggerMainCommand
(
popup
)
;
}
onHidden
:
function
(
)
{
}
}
{
id
:
"
checkbox_passCheckboxChecked_mainAction
"
run
:
function
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
mainAction
.
callback
=
(
{
checkboxChecked
}
)
=
>
this
.
mainActionChecked
=
checkboxChecked
;
this
.
notifyObj
.
options
.
checkbox
=
{
label
:
"
This
is
a
checkbox
"
}
;
gNotification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
:
function
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
let
notification
=
popup
.
childNodes
[
0
]
;
let
checkbox
=
notification
.
checkbox
;
checkCheckbox
(
checkbox
"
This
is
a
checkbox
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
checkbox
{
}
)
;
checkCheckbox
(
checkbox
"
This
is
a
checkbox
"
true
)
;
triggerMainCommand
(
popup
)
;
}
onHidden
:
function
(
)
{
is
(
this
.
mainActionChecked
true
"
mainAction
callback
is
passed
the
correct
checkbox
value
"
)
;
}
}
{
id
:
"
checkbox_passCheckboxChecked_secondaryAction
"
run
:
function
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
secondaryActions
=
[
{
label
:
"
Test
Secondary
"
accessKey
:
"
T
"
callback
:
(
{
checkboxChecked
}
)
=
>
this
.
secondaryActionChecked
=
checkboxChecked
}
]
;
this
.
notifyObj
.
options
.
checkbox
=
{
label
:
"
This
is
a
checkbox
"
}
;
gNotification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
:
function
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
let
notification
=
popup
.
childNodes
[
0
]
;
let
checkbox
=
notification
.
checkbox
;
checkCheckbox
(
checkbox
"
This
is
a
checkbox
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
checkbox
{
}
)
;
checkCheckbox
(
checkbox
"
This
is
a
checkbox
"
true
)
;
triggerSecondaryCommand
(
popup
0
)
;
}
onHidden
:
function
(
)
{
is
(
this
.
secondaryActionChecked
true
"
secondaryAction
callback
is
passed
the
correct
checkbox
value
"
)
;
}
}
{
id
:
"
checkbox_reopen
"
run
:
function
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
options
.
checkbox
=
{
label
:
"
This
is
a
checkbox
"
checkedState
:
{
disableMainAction
:
true
warningLabel
:
"
Testing
disable
"
}
}
;
gNotification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
:
function
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
let
notification
=
popup
.
childNodes
[
0
]
;
let
checkbox
=
notification
.
checkbox
;
checkCheckbox
(
checkbox
"
This
is
a
checkbox
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
checkbox
{
}
)
;
dismissNotification
(
popup
)
;
}
onHidden
:
function
(
popup
)
{
let
icon
=
document
.
getElementById
(
"
default
-
notification
-
icon
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
icon
{
}
)
;
let
notification
=
popup
.
childNodes
[
0
]
;
let
checkbox
=
notification
.
checkbox
;
checkCheckbox
(
checkbox
"
This
is
a
checkbox
"
true
)
;
checkMainAction
(
notification
true
)
;
gNotification
.
remove
(
)
;
}
}
]
;
[
"
checkedState
"
"
uncheckedState
"
]
.
forEach
(
function
(
state
)
{
[
true
false
]
.
forEach
(
function
(
checked
)
{
tests
.
push
(
{
id
:
checkbox_disableMainAction_
{
state
}
_
{
checked
?
'
checked
'
:
'
unchecked
'
}
run
:
function
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
options
.
checkbox
=
{
label
:
"
This
is
a
checkbox
"
checked
:
checked
[
state
]
:
{
disableMainAction
:
true
warningLabel
:
"
Testing
disable
"
}
}
;
gNotification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
:
function
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
let
notification
=
popup
.
childNodes
[
0
]
;
let
checkbox
=
notification
.
checkbox
;
let
disabled
=
(
state
=
=
=
"
checkedState
"
&
&
checked
)
|
|
(
state
=
=
=
"
uncheckedState
"
&
&
!
checked
)
;
checkCheckbox
(
checkbox
"
This
is
a
checkbox
"
checked
)
;
checkMainAction
(
notification
disabled
)
;
EventUtils
.
synthesizeMouseAtCenter
(
checkbox
{
}
)
;
checkCheckbox
(
checkbox
"
This
is
a
checkbox
"
!
checked
)
;
checkMainAction
(
notification
!
disabled
)
;
EventUtils
.
synthesizeMouseAtCenter
(
checkbox
{
}
)
;
checkCheckbox
(
checkbox
"
This
is
a
checkbox
"
checked
)
;
checkMainAction
(
notification
disabled
)
;
if
(
disabled
)
{
EventUtils
.
synthesizeMouseAtCenter
(
checkbox
{
}
)
;
}
triggerMainCommand
(
popup
)
;
}
onHidden
:
function
(
)
{
}
}
)
;
}
)
;
}
)
;
