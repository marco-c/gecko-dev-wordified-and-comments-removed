function
test
(
)
{
waitForExplicitFinish
(
)
;
ok
(
PopupNotifications
"
PopupNotifications
object
exists
"
)
;
ok
(
PopupNotifications
.
panel
"
PopupNotifications
panel
exists
"
)
;
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
accessibility
.
tabfocus
"
7
]
[
"
browser
.
urlbar
.
scotchBonnet
.
enableOverride
"
true
]
]
}
)
.
then
(
setup
)
;
}
async
function
focusNotificationAnchor
(
anchor
)
{
let
urlbarContainer
=
anchor
.
closest
(
"
#
urlbar
-
container
"
)
;
AccessibilityUtils
.
setEnv
(
{
mustHaveAccessibleRule
:
false
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
getElementById
(
"
browser
"
)
{
}
)
;
AccessibilityUtils
.
resetEnv
(
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
document
.
activeElement
.
closest
(
"
#
browser
"
)
)
;
let
searchModeSwitcher
=
urlbarContainer
.
querySelector
(
"
#
urlbar
-
searchmode
-
switcher
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
BrowserTestUtils
.
isVisible
(
searchModeSwitcher
)
"
Wait
until
Unified
Search
Button
is
shown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
{
shiftKey
:
true
}
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
document
.
activeElement
=
=
searchModeSwitcher
"
Wait
until
the
focus
will
move
to
Unified
Search
Button
"
)
;
while
(
document
.
activeElement
!
=
=
anchor
)
{
EventUtils
.
synthesizeKey
(
"
ArrowRight
"
)
;
}
}
var
tests
=
[
{
id
:
"
Test
#
1
"
run
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
options
.
persistent
=
true
;
showNotification
(
this
.
notifyObj
)
;
}
onShown
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
}
onHidden
(
)
{
ok
(
!
this
.
notifyObj
.
mainActionClicked
"
mainAction
was
not
clicked
"
)
;
ok
(
this
.
notifyObj
.
secondaryActionClicked
"
secondaryAction
was
clicked
"
)
;
ok
(
!
this
.
notifyObj
.
dismissalCallbackTriggered
"
dismissal
callback
wasn
'
t
triggered
"
)
;
ok
(
this
.
notifyObj
.
removedCallbackTriggered
"
removed
callback
triggered
"
)
;
is
(
this
.
notifyObj
.
mainActionSource
undefined
"
shouldn
'
t
have
a
main
action
source
.
"
)
;
is
(
this
.
notifyObj
.
secondaryActionSource
"
esc
-
press
"
"
secondary
action
should
be
from
ESC
key
press
"
)
;
}
}
{
id
:
"
Test
#
2
"
run
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
}
onHidden
(
)
{
ok
(
!
this
.
notifyObj
.
mainActionClicked
"
mainAction
was
not
clicked
"
)
;
ok
(
!
this
.
notifyObj
.
secondaryActionClicked
"
secondaryAction
was
not
clicked
"
)
;
ok
(
this
.
notifyObj
.
dismissalCallbackTriggered
"
dismissal
callback
triggered
"
)
;
ok
(
!
this
.
notifyObj
.
removedCallbackTriggered
"
removed
callback
was
not
triggered
"
)
;
is
(
this
.
notifyObj
.
mainActionSource
undefined
"
shouldn
'
t
have
a
main
action
source
.
"
)
;
is
(
this
.
notifyObj
.
secondaryActionSource
undefined
"
shouldn
'
t
have
a
secondary
action
source
.
"
)
;
this
.
notification
.
remove
(
)
;
}
}
{
id
:
"
Test
#
3
"
run
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
anchorID
=
"
geo
-
notification
-
icon
"
;
this
.
notifyObj
.
addOptions
(
{
persistent
:
true
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
async
onShown
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
let
anchor
=
document
.
getElementById
(
this
.
notifyObj
.
anchorID
)
;
await
focusNotificationAnchor
(
anchor
)
;
EventUtils
.
sendString
(
"
"
)
;
is
(
document
.
activeElement
popup
.
children
[
0
]
.
closebutton
)
;
this
.
notification
.
remove
(
)
;
}
onHidden
(
)
{
}
}
{
id
:
"
Test
#
4
"
async
run
(
)
{
let
notifyObj1
=
new
BasicNotification
(
this
.
id
)
;
notifyObj1
.
id
+
=
"
_1
"
;
notifyObj1
.
anchorID
=
"
default
-
notification
-
icon
"
;
notifyObj1
.
addOptions
(
{
hideClose
:
true
checkbox
:
{
label
:
"
Test
that
elements
inside
the
panel
can
be
focused
"
}
persistent
:
true
}
)
;
let
opened
=
waitForNotificationPanel
(
)
;
let
notification1
=
showNotification
(
notifyObj1
)
;
await
opened
;
let
notifyObj2
=
new
BasicNotification
(
this
.
id
)
;
notifyObj2
.
id
+
=
"
_2
"
;
notifyObj2
.
anchorID
=
"
geo
-
notification
-
icon
"
;
notifyObj2
.
addOptions
(
{
persistent
:
true
}
)
;
opened
=
waitForNotificationPanel
(
)
;
let
notification2
=
showNotification
(
notifyObj2
)
;
let
popup
=
await
opened
;
checkPopup
(
popup
notifyObj2
)
;
let
anchor
=
document
.
getElementById
(
notifyObj1
.
anchorID
)
;
await
focusNotificationAnchor
(
anchor
)
;
is
(
document
.
activeElement
anchor
)
;
opened
=
waitForNotificationPanel
(
)
;
EventUtils
.
sendString
(
"
"
)
;
popup
=
await
opened
;
checkPopup
(
popup
notifyObj1
)
;
is
(
document
.
activeElement
popup
.
children
[
0
]
.
checkbox
)
;
anchor
=
document
.
getElementById
(
notifyObj2
.
anchorID
)
;
await
focusNotificationAnchor
(
anchor
)
;
is
(
document
.
activeElement
anchor
)
;
opened
=
waitForNotificationPanel
(
)
;
EventUtils
.
sendString
(
"
"
)
;
popup
=
await
opened
;
checkPopup
(
popup
notifyObj2
)
;
is
(
document
.
activeElement
popup
.
children
[
0
]
.
closebutton
)
;
notification1
.
remove
(
)
;
notification2
.
remove
(
)
;
goNext
(
)
;
}
}
{
id
:
"
Test
#
5
"
run
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
anchorID
=
"
geo
-
notification
-
icon
"
;
this
.
notifyObj
.
addOptions
(
{
autofocus
:
true
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
is
(
Services
.
focus
.
focusedElement
null
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
is
(
Services
.
focus
.
focusedElement
popup
.
children
[
0
]
.
closebutton
)
;
dismissNotification
(
popup
)
;
}
async
onHidden
(
)
{
gURLBar
.
focus
(
)
;
let
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
notifyObj
.
id
+
=
"
_2
"
;
notifyObj
.
anchorID
=
"
default
-
notification
-
icon
"
;
let
opened
=
waitForNotificationPanel
(
)
;
let
notification
=
showNotification
(
notifyObj
)
;
let
popup
=
await
opened
;
checkPopup
(
popup
notifyObj
)
;
is
(
Services
.
focus
.
focusedElement
gURLBar
.
inputField
)
;
this
.
notification
.
remove
(
)
;
notification
.
remove
(
)
;
}
}
{
id
:
"
Test
#
6
"
async
run
(
)
{
let
id
=
this
.
id
;
await
BrowserTestUtils
.
withNewTab
(
"
data
:
text
/
html
<
input
id
=
'
test
-
input
'
/
>
"
async
function
(
browser
)
{
let
notifyObj
=
new
BasicNotification
(
id
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
content
.
document
.
getElementById
(
"
test
-
input
"
)
.
focus
(
)
;
}
)
;
let
opened
=
waitForNotificationPanel
(
)
;
let
notification
=
showNotification
(
notifyObj
)
;
await
opened
;
if
(
gMultiProcessBrowser
)
{
is
(
Services
.
focus
.
focusedElement
browser
)
;
}
else
{
is
(
Services
.
focus
.
focusedElement
browser
.
contentDocument
.
getElementById
(
"
test
-
input
"
)
)
;
}
await
SpecialPowers
.
spawn
(
browser
[
]
function
(
)
{
is
(
content
.
document
.
activeElement
content
.
document
.
getElementById
(
"
test
-
input
"
)
)
;
}
)
;
notification
.
remove
(
)
;
}
)
;
goNext
(
)
;
}
}
]
;
