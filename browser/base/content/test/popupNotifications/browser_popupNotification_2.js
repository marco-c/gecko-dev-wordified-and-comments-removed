function
test
(
)
{
waitForExplicitFinish
(
)
;
ok
(
PopupNotifications
"
PopupNotifications
object
exists
"
)
;
ok
(
PopupNotifications
.
panel
"
PopupNotifications
panel
exists
"
)
;
setup
(
)
;
}
var
tests
=
[
{
id
:
"
Test
#
1
"
run
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
secondaryActions
=
undefined
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
dismissNotification
(
popup
)
;
}
onHidden
(
popup
)
{
ok
(
this
.
notifyObj
.
dismissalCallbackTriggered
"
dismissal
callback
triggered
"
)
;
this
.
notification
.
remove
(
)
;
ok
(
this
.
notifyObj
.
removedCallbackTriggered
"
removed
callback
triggered
"
)
;
}
}
{
id
:
"
Test
#
2
"
run
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
id
=
"
geolocation
"
;
this
.
notifyObj
.
anchorID
=
"
geo
-
notification
-
icon
"
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
isnot
(
document
.
getElementById
(
"
geo
-
notification
-
icon
"
)
.
boxObject
.
width
0
"
geo
anchor
should
be
visible
"
)
;
dismissNotification
(
popup
)
;
}
onHidden
(
popup
)
{
let
icon
=
document
.
getElementById
(
"
geo
-
notification
-
icon
"
)
;
isnot
(
icon
.
boxObject
.
width
0
"
geo
anchor
should
be
visible
after
dismissal
"
)
;
this
.
notification
.
remove
(
)
;
is
(
icon
.
boxObject
.
width
0
"
geo
anchor
should
not
be
visible
after
removal
"
)
;
}
}
{
id
:
"
Test
#
3
"
async
run
(
)
{
this
.
oldSelectedTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
com
/
"
)
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
addOptions
(
{
persistence
:
2
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
async
onShown
(
popup
)
{
this
.
complete
=
false
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
org
/
"
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
com
/
"
)
;
this
.
complete
=
true
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
org
/
"
)
;
}
onHidden
(
popup
)
{
ok
(
this
.
complete
"
Should
only
have
hidden
the
notification
after
3
page
loads
"
)
;
ok
(
this
.
notifyObj
.
removedCallbackTriggered
"
removal
callback
triggered
"
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
gBrowser
.
selectedTab
=
this
.
oldSelectedTab
;
}
}
{
id
:
"
Test
#
4
"
async
run
(
)
{
this
.
oldSelectedTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
com
/
"
)
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
addOptions
(
{
timeout
:
Date
.
now
(
)
+
600000
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
async
onShown
(
popup
)
{
this
.
complete
=
false
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
org
/
"
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
com
/
"
)
;
this
.
notification
.
options
.
timeout
=
Date
.
now
(
)
-
1
;
this
.
complete
=
true
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
org
/
"
)
;
}
onHidden
(
popup
)
{
ok
(
this
.
complete
"
Should
only
have
hidden
the
notification
after
the
timeout
was
passed
"
)
;
this
.
notification
.
remove
(
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
gBrowser
.
selectedTab
=
this
.
oldSelectedTab
;
}
}
{
id
:
"
Test
#
5
"
async
run
(
)
{
this
.
oldSelectedTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
http
:
/
/
example
.
com
/
"
)
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
addOptions
(
{
persistWhileVisible
:
true
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
async
onShown
(
popup
)
{
this
.
complete
=
false
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
org
/
"
)
;
await
promiseTabLoadEvent
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
com
/
"
)
;
this
.
complete
=
true
;
dismissNotification
(
popup
)
;
}
onHidden
(
popup
)
{
ok
(
this
.
complete
"
Should
only
have
hidden
the
notification
after
it
was
dismissed
"
)
;
this
.
notification
.
remove
(
)
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
gBrowser
.
selectedTab
=
this
.
oldSelectedTab
;
}
}
{
id
:
"
Test
#
6
"
run
(
)
{
this
.
box
=
document
.
createXULElement
(
"
box
"
)
;
PopupNotifications
.
iconBox
.
appendChild
(
this
.
box
)
;
let
button
=
document
.
createXULElement
(
"
button
"
)
;
button
.
setAttribute
(
"
label
"
"
Please
click
me
!
"
)
;
this
.
box
.
appendChild
(
button
)
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
anchorID
=
this
.
box
.
id
=
"
nested
-
box
"
;
this
.
notifyObj
.
addOptions
(
{
dismissed
:
true
}
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
EventUtils
.
synthesizeMouse
(
button
4
4
{
}
)
;
}
onShown
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
dismissNotification
(
popup
)
;
}
onHidden
(
popup
)
{
this
.
notification
.
remove
(
)
;
this
.
box
.
remove
(
)
;
}
}
{
id
:
"
Test
#
7
"
async
run
(
)
{
let
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
notifyObj
.
anchorID
=
"
geo
-
notification
-
icon
"
;
notifyObj
.
addOptions
(
{
neverShow
:
true
}
)
;
let
promiseTopic
=
TestUtils
.
topicObserved
(
"
PopupNotifications
-
updateNotShowing
"
)
;
showNotification
(
notifyObj
)
;
await
promiseTopic
;
isnot
(
document
.
getElementById
(
"
geo
-
notification
-
icon
"
)
.
boxObject
.
width
0
"
geo
anchor
should
be
visible
"
)
;
goNext
(
)
;
}
}
{
id
:
"
Test
#
8
"
async
run
(
)
{
let
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
notifyObj
.
anchorID
=
"
autoplay
-
media
-
notification
-
icon
"
;
notifyObj
.
addOptions
(
{
neverShow
:
true
}
)
;
let
promiseTopic
=
TestUtils
.
topicObserved
(
"
PopupNotifications
-
updateNotShowing
"
)
;
showNotification
(
notifyObj
)
;
await
promiseTopic
;
isnot
(
document
.
getElementById
(
"
autoplay
-
media
-
notification
-
icon
"
)
.
boxObject
.
width
0
"
autoplay
media
icon
should
be
visible
"
)
;
goNext
(
)
;
}
}
{
id
:
"
Test
#
9
"
run
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
let
notification
=
popup
.
children
[
0
]
;
EventUtils
.
synthesizeMouseAtCenter
(
notification
.
closebutton
{
}
)
;
}
onHidden
(
popup
)
{
ok
(
this
.
notifyObj
.
dismissalCallbackTriggered
"
dismissal
callback
triggered
"
)
;
this
.
notification
.
remove
(
)
;
ok
(
this
.
notifyObj
.
removedCallbackTriggered
"
removed
callback
triggered
"
)
;
ok
(
!
this
.
notifyObj
.
secondaryActionClicked
"
secondary
action
not
clicked
"
)
;
}
}
{
id
:
"
Test
#
11
"
run
(
)
{
window
.
locationbar
.
visible
=
false
;
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notification
=
showNotification
(
this
.
notifyObj
)
;
}
onShown
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
is
(
popup
.
anchorNode
.
className
"
tabbrowser
-
tab
"
"
notification
anchored
to
tab
"
)
;
dismissNotification
(
popup
)
;
}
onHidden
(
popup
)
{
ok
(
this
.
notifyObj
.
dismissalCallbackTriggered
"
dismissal
callback
triggered
"
)
;
this
.
notification
.
remove
(
)
;
ok
(
this
.
notifyObj
.
removedCallbackTriggered
"
removed
callback
triggered
"
)
;
window
.
locationbar
.
visible
=
true
;
}
}
]
;
