function
test
(
)
{
waitForExplicitFinish
(
)
;
ok
(
PopupNotifications
"
PopupNotifications
object
exists
"
)
;
ok
(
PopupNotifications
.
panel
"
PopupNotifications
panel
exists
"
)
;
setup
(
)
;
}
function
promiseElementVisible
(
element
)
{
return
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
element
.
offsetParent
!
=
=
null
"
Waiting
for
element
to
be
visible
"
)
;
}
var
gNotification
;
var
tests
=
[
{
id
:
"
require_selection_check
"
run
(
)
{
this
.
notifyObj
=
new
BasicNotification
(
this
.
id
)
;
this
.
notifyObj
.
options
.
checkbox
=
{
label
:
"
This
is
a
checkbox
"
}
;
gNotification
=
showNotification
(
this
.
notifyObj
)
;
}
async
onShown
(
popup
)
{
checkPopup
(
popup
this
.
notifyObj
)
;
let
notification
=
popup
.
childNodes
[
0
]
;
notification
.
setAttribute
(
"
invalidselection
"
true
)
;
await
promiseElementVisible
(
notification
.
checkbox
)
;
EventUtils
.
synthesizeMouseAtCenter
(
notification
.
checkbox
{
}
)
;
ok
(
notification
.
button
.
disabled
"
should
be
disabled
when
invalidselection
"
)
;
notification
.
removeAttribute
(
"
invalidselection
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
notification
.
checkbox
{
}
)
;
ok
(
!
notification
.
button
.
disabled
"
should
not
be
disabled
when
invalidselection
is
not
present
"
)
;
triggerMainCommand
(
popup
)
;
}
onHidden
(
)
{
}
}
]
;
