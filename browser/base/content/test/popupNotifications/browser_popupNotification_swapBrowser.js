"
use
strict
"
;
const
TEST_SECURITY_DELAY
=
1
;
const
TEST_WINDOW_TIME_OPEN
=
100
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
notification_enable_delay
"
TEST_SECURITY_DELAY
]
[
"
geo
.
timeout
"
0
]
]
}
)
;
}
)
;
add_task
(
async
function
transferPopupNotificationToNewWindowAndResolve
(
)
{
await
ensureSecurityDelayReady
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
https
:
/
/
test1
.
example
.
com
/
"
)
;
let
browser
=
tab
.
linkedBrowser
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
TEST_WINDOW_TIME_OPEN
)
)
;
let
popupShownPromise
=
waitForNotificationPanel
(
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
content
.
navigator
.
geolocation
.
getCurrentPosition
(
(
)
=
>
{
}
)
;
}
)
;
await
popupShownPromise
;
let
notification
=
PopupNotifications
.
getNotification
(
"
geolocation
"
)
;
ok
(
PopupNotifications
.
isPanelOpen
&
&
notification
"
Geolocation
notification
is
open
"
)
;
let
promiseWin
=
BrowserTestUtils
.
waitForNewWindow
(
)
;
gBrowser
.
replaceTabWithWindow
(
tab
)
;
let
win
=
await
promiseWin
;
await
waitForWindowReadyForPopupNotifications
(
win
)
;
let
timeNow
=
Cu
.
now
(
)
;
await
ensureSecurityDelayReady
(
timeNow
)
;
ok
(
win
.
PopupNotifications
.
isPanelOpen
"
Geolocation
notification
is
open
"
)
;
let
popupHidden
=
BrowserTestUtils
.
waitForEvent
(
win
.
PopupNotifications
.
panel
"
popuphidden
"
)
;
let
acceptBtn
=
win
.
PopupNotifications
.
panel
.
querySelector
(
"
.
popup
-
notification
-
primary
-
button
"
)
;
acceptBtn
.
click
(
)
;
await
popupHidden
;
Assert
.
ok
(
!
win
.
PopupNotifications
.
isPanelOpen
"
Geolocation
popup
is
hidden
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
