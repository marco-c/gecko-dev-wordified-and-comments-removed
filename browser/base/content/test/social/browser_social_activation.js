thisTestLeaksUncaughtRejectionsAndShouldBeFixed
(
"
TypeError
:
Assert
is
null
"
)
;
var
SocialService
=
Cu
.
import
(
"
resource
:
/
/
/
modules
/
SocialService
.
jsm
"
{
}
)
.
SocialService
;
var
tabsToRemove
=
[
]
;
function
removeProvider
(
provider
)
{
return
new
Promise
(
resolve
=
>
{
if
(
provider
.
manifest
)
{
SocialService
.
uninstallProvider
(
provider
.
origin
resolve
)
;
}
else
{
SocialService
.
disableProvider
(
provider
.
origin
resolve
)
;
}
}
)
;
}
function
postTestCleanup
(
callback
)
{
Task
.
spawn
(
function
*
(
)
{
for
(
let
tab
of
tabsToRemove
)
{
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
tabsToRemove
=
[
]
;
while
(
Social
.
providers
.
length
>
0
)
{
yield
removeProvider
(
Social
.
providers
[
0
]
)
;
}
}
)
.
then
(
callback
)
;
}
function
newTab
(
url
)
{
return
new
Promise
(
resolve
=
>
{
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
.
then
(
tab
=
>
{
tabsToRemove
.
push
(
tab
)
;
resolve
(
tab
)
;
}
)
;
}
)
;
}
function
sendActivationEvent
(
tab
callback
nullManifest
)
{
Social
.
lastEventReceived
=
0
;
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
activation
"
{
}
tab
.
linkedBrowser
)
;
executeSoon
(
callback
)
;
}
function
activateProvider
(
domain
callback
nullManifest
)
{
let
activationURL
=
domain
+
"
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_activate_basic
.
html
"
newTab
(
activationURL
)
.
then
(
tab
=
>
{
sendActivationEvent
(
tab
callback
nullManifest
)
;
}
)
;
}
function
activateIFrameProvider
(
domain
callback
)
{
let
activationURL
=
domain
+
"
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_activate_iframe
.
html
"
newTab
(
activationURL
)
.
then
(
tab
=
>
{
sendActivationEvent
(
tab
callback
false
)
;
}
)
;
}
function
waitForProviderLoad
(
origin
)
{
return
Promise
.
all
(
[
ensureFrameLoaded
(
gBrowser
origin
+
"
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_postActivation
.
html
"
)
]
)
;
}
function
getAddonItemInList
(
aId
aList
)
{
var
item
=
aList
.
firstChild
;
while
(
item
)
{
if
(
"
mAddon
"
in
item
&
&
item
.
mAddon
.
id
=
=
aId
)
{
aList
.
ensureElementIsVisible
(
item
)
;
return
item
;
}
item
=
item
.
nextSibling
;
}
return
null
;
}
function
clickAddonRemoveButton
(
tab
aCallback
)
{
AddonManager
.
getAddonsByTypes
(
[
"
service
"
]
function
(
aAddons
)
{
let
addon
=
aAddons
[
0
]
;
let
doc
=
tab
.
linkedBrowser
.
contentDocument
;
let
list
=
doc
.
getElementById
(
"
addon
-
list
"
)
;
let
item
=
getAddonItemInList
(
addon
.
id
list
)
;
let
button
=
item
.
_removeBtn
;
isnot
(
button
null
"
Should
have
a
remove
button
"
)
;
ok
(
!
button
.
disabled
"
Button
should
not
be
disabled
"
)
;
promiseObserverNotified
(
"
social
:
provider
-
disabled
"
)
.
then
(
(
)
=
>
{
is
(
item
.
getAttribute
(
"
pending
"
)
"
uninstall
"
"
Add
-
on
should
be
uninstalling
"
)
;
executeSoon
(
function
(
)
{
aCallback
(
addon
)
;
}
)
;
}
)
;
BrowserTestUtils
.
synthesizeMouseAtCenter
(
button
{
}
tab
.
linkedBrowser
)
;
}
)
;
}
function
activateOneProvider
(
manifest
finishActivation
aCallback
)
{
Task
.
spawn
(
function
*
(
)
{
info
(
"
activating
provider
"
+
manifest
.
name
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
yield
new
Promise
(
resolve
=
>
activateProvider
(
manifest
.
origin
resolve
)
)
;
yield
popupShown
;
info
(
"
servicesInstall
-
notification
panel
opened
"
)
;
let
providerLoaded
=
finishActivation
?
waitForProviderLoad
(
manifest
.
origin
)
:
null
;
let
popupHidden
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphidden
"
)
;
let
notification
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
(
notification
=
PopupNotifications
.
panel
.
childNodes
[
0
]
)
)
;
is
(
notification
.
id
"
servicesInstall
-
notification
"
)
;
if
(
finishActivation
)
{
notification
.
button
.
click
(
)
;
}
else
{
notification
.
closebutton
.
click
(
)
;
}
yield
providerLoaded
;
yield
popupHidden
;
info
(
"
servicesInstall
-
notification
panel
hidden
"
)
;
if
(
finishActivation
)
{
checkSocialUI
(
)
;
}
}
)
.
then
(
(
)
=
>
executeSoon
(
aCallback
)
)
.
catch
(
ex
=
>
ok
(
false
ex
)
)
;
}
var
gTestDomains
=
[
"
https
:
/
/
example
.
com
"
"
https
:
/
/
test1
.
example
.
com
"
"
https
:
/
/
test2
.
example
.
com
"
]
;
var
gProviders
=
[
{
name
:
"
provider
1
"
origin
:
"
https
:
/
/
example
.
com
"
shareURL
:
"
https
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_share
.
html
?
provider1
"
iconURL
:
"
chrome
:
/
/
branding
/
content
/
icon48
.
png
"
}
{
name
:
"
provider
2
"
origin
:
"
https
:
/
/
test1
.
example
.
com
"
shareURL
:
"
https
:
/
/
test1
.
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_share
.
html
?
provider2
"
iconURL
:
"
chrome
:
/
/
branding
/
content
/
icon64
.
png
"
}
{
name
:
"
provider
3
"
origin
:
"
https
:
/
/
test2
.
example
.
com
"
shareURL
:
"
https
:
/
/
test2
.
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_share
.
html
?
provider2
"
iconURL
:
"
chrome
:
/
/
branding
/
content
/
about
-
logo
.
png
"
}
]
;
function
test
(
)
{
PopupNotifications
.
panel
.
setAttribute
(
"
animate
"
"
false
"
)
;
registerCleanupFunction
(
function
(
)
{
PopupNotifications
.
panel
.
removeAttribute
(
"
animate
"
)
;
}
)
;
waitForExplicitFinish
(
)
;
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
dom
.
ipc
.
processCount
"
1
]
]
}
(
)
=
>
{
runSocialTests
(
tests
undefined
postTestCleanup
)
;
}
)
;
}
var
tests
=
{
testActivationWrongOrigin
:
function
(
next
)
{
Services
.
prefs
.
setBoolPref
(
"
social
.
remote
-
install
.
enabled
"
false
)
;
activateProvider
(
gTestDomains
[
0
]
function
(
)
{
is
(
SocialUI
.
enabled
false
"
SocialUI
is
not
enabled
"
)
;
let
panel
=
document
.
getElementById
(
"
servicesInstall
-
notification
"
)
;
ok
(
panel
.
hidden
"
activation
panel
still
hidden
"
)
;
checkSocialUI
(
)
;
Services
.
prefs
.
clearUserPref
(
"
social
.
remote
-
install
.
enabled
"
)
;
next
(
)
;
}
)
;
}
testIFrameActivation
:
function
(
next
)
{
activateIFrameProvider
(
gTestDomains
[
0
]
function
(
)
{
is
(
SocialUI
.
enabled
false
"
SocialUI
is
not
enabled
"
)
;
let
panel
=
document
.
getElementById
(
"
servicesInstall
-
notification
"
)
;
ok
(
panel
.
hidden
"
activation
panel
still
hidden
"
)
;
checkSocialUI
(
)
;
next
(
)
;
}
)
;
}
testActivationFirstProvider
:
function
(
next
)
{
activateOneProvider
(
gProviders
[
0
]
false
function
(
)
{
checkSocialUI
(
)
;
next
(
)
;
}
)
;
}
testActivationMultipleProvider
:
function
(
next
)
{
SocialService
.
addProvider
(
gProviders
[
0
]
function
(
)
{
SocialService
.
addProvider
(
gProviders
[
1
]
function
(
)
{
checkSocialUI
(
)
;
activateOneProvider
(
gProviders
[
2
]
false
function
(
)
{
checkSocialUI
(
)
;
next
(
)
;
}
)
;
}
)
;
}
)
;
}
testAddonManagerDoubleInstall
:
function
(
next
)
{
let
addonsTab
=
gBrowser
.
addTab
(
)
;
gBrowser
.
selectedTab
=
addonsTab
;
BrowserOpenAddonsMgr
(
'
addons
:
/
/
list
/
service
'
)
;
gBrowser
.
selectedBrowser
.
addEventListener
(
"
load
"
function
tabLoad
(
)
{
gBrowser
.
selectedBrowser
.
removeEventListener
(
"
load
"
tabLoad
true
)
;
is
(
addonsTab
.
linkedBrowser
.
currentURI
.
spec
"
about
:
addons
"
"
about
:
addons
should
load
into
blank
tab
.
"
)
;
activateOneProvider
(
gProviders
[
0
]
true
function
(
)
{
info
(
"
first
activation
completed
"
)
;
is
(
gBrowser
.
contentDocument
.
location
.
href
gProviders
[
0
]
.
origin
+
"
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_postActivation
.
html
"
"
postActivationURL
loaded
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
.
then
(
(
)
=
>
{
is
(
gBrowser
.
contentDocument
.
location
.
href
gProviders
[
0
]
.
origin
+
"
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_activate_basic
.
html
"
"
activation
page
selected
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
.
then
(
(
)
=
>
{
tabsToRemove
.
pop
(
)
;
clickAddonRemoveButton
(
addonsTab
function
(
addon
)
{
checkSocialUI
(
)
;
activateOneProvider
(
gProviders
[
0
]
true
function
(
)
{
info
(
"
second
activation
completed
"
)
;
is
(
gBrowser
.
contentDocument
.
location
.
href
gProviders
[
0
]
.
origin
+
"
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_postActivation
.
html
"
"
postActivationURL
loaded
"
)
;
BrowserTestUtils
.
removeTab
(
gBrowser
.
selectedTab
)
.
then
(
(
)
=
>
{
AddonManager
.
getAddonsByTypes
(
[
"
service
"
]
function
(
aAddons
)
{
is
(
aAddons
.
length
1
"
there
can
be
only
one
"
)
;
let
doc
=
addonsTab
.
linkedBrowser
.
contentDocument
;
let
list
=
doc
.
getElementById
(
"
addon
-
list
"
)
;
is
(
list
.
childNodes
.
length
1
"
only
one
addon
is
displayed
"
)
;
BrowserTestUtils
.
removeTab
(
addonsTab
)
.
then
(
next
)
;
}
)
;
}
)
;
}
)
;
}
)
;
}
)
;
}
)
;
}
)
;
}
true
)
;
}
}
