var
SocialService
=
Cu
.
import
(
"
resource
:
/
/
/
modules
/
SocialService
.
jsm
"
{
}
)
.
SocialService
;
const
URI_EXTENSION_BLOCKLIST_DIALOG
=
"
chrome
:
/
/
mozapps
/
content
/
extensions
/
blocklist
.
xul
"
;
var
blocklistURL
=
"
http
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
social
/
blocklist
.
xml
"
;
var
manifest
=
{
name
:
"
provider
ok
"
origin
:
"
https
:
/
/
example
.
com
"
shareURL
:
"
https
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_share
.
html
"
iconURL
:
"
https
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
general
/
moz
.
png
"
}
;
var
manifest_bad
=
{
name
:
"
provider
blocked
"
origin
:
"
https
:
/
/
test1
.
example
.
com
"
shareURL
:
"
https
:
/
/
test1
.
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_share
.
html
"
iconURL
:
"
https
:
/
/
test1
.
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
general
/
moz
.
png
"
}
;
function
updateBlocklist
(
)
{
var
blocklistNotifier
=
Cc
[
"
mozilla
.
org
/
extensions
/
blocklist
;
1
"
]
.
getService
(
Ci
.
nsITimerCallback
)
;
let
promise
=
promiseObserverNotified
(
"
blocklist
-
updated
"
)
;
blocklistNotifier
.
notify
(
null
)
;
return
promise
;
}
var
_originalTestBlocklistURL
=
null
;
function
setAndUpdateBlocklist
(
aURL
)
{
if
(
!
_originalTestBlocklistURL
)
_originalTestBlocklistURL
=
Services
.
prefs
.
getCharPref
(
"
extensions
.
blocklist
.
url
"
)
;
Services
.
prefs
.
setCharPref
(
"
extensions
.
blocklist
.
url
"
aURL
)
;
return
updateBlocklist
(
)
;
}
function
resetBlocklist
(
)
{
let
noBlockedURL
=
"
http
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
plugins
/
blockNoPlugins
.
xml
"
;
return
new
Promise
(
resolve
=
>
{
setAndUpdateBlocklist
(
noBlockedURL
)
.
then
(
(
)
=
>
{
Services
.
prefs
.
setCharPref
(
"
extensions
.
blocklist
.
url
"
_originalTestBlocklistURL
)
;
resolve
(
)
;
}
)
;
}
)
;
}
function
test
(
)
{
waitForExplicitFinish
(
)
;
Services
.
prefs
.
setBoolPref
(
"
extensions
.
logging
.
enabled
"
true
)
;
registerCleanupFunction
(
function
(
)
{
Services
.
prefs
.
clearUserPref
(
"
extensions
.
logging
.
enabled
"
)
;
}
)
;
runSocialTests
(
tests
undefined
undefined
function
(
)
{
resetBlocklist
(
)
.
then
(
finish
)
;
}
)
;
}
var
tests
=
{
testSimpleBlocklist
(
next
)
{
setAndUpdateBlocklist
(
blocklistURL
)
.
then
(
(
)
=
>
{
ok
(
Services
.
blocklist
.
isAddonBlocklisted
(
SocialService
.
createWrapper
(
manifest_bad
)
)
"
blocking
'
blocked
'
"
)
;
ok
(
!
Services
.
blocklist
.
isAddonBlocklisted
(
SocialService
.
createWrapper
(
manifest
)
)
"
not
blocking
'
good
'
"
)
;
resetBlocklist
(
)
.
then
(
(
)
=
>
{
ok
(
!
Services
.
blocklist
.
isAddonBlocklisted
(
SocialService
.
createWrapper
(
manifest_bad
)
)
"
blocklist
cleared
"
)
;
next
(
)
;
}
)
;
}
)
;
}
testAddingNonBlockedProvider
(
next
)
{
function
finishTest
(
isgood
)
{
ok
(
isgood
"
adding
non
-
blocked
provider
ok
"
)
;
Services
.
prefs
.
clearUserPref
(
"
social
.
manifest
.
good
"
)
;
resetBlocklist
(
)
.
then
(
next
)
;
}
setManifestPref
(
"
social
.
manifest
.
good
"
manifest
)
;
setAndUpdateBlocklist
(
blocklistURL
)
.
then
(
(
)
=
>
{
try
{
SocialService
.
addProvider
(
manifest
function
(
provider
)
{
try
{
SocialService
.
disableProvider
(
provider
.
origin
function
(
)
{
ok
(
true
"
added
and
removed
provider
"
)
;
finishTest
(
true
)
;
}
)
;
}
catch
(
e
)
{
ok
(
false
"
SocialService
.
disableProvider
threw
exception
:
"
+
e
)
;
finishTest
(
false
)
;
}
}
)
;
}
catch
(
e
)
{
ok
(
false
"
SocialService
.
addProvider
threw
exception
:
"
+
e
)
;
finishTest
(
false
)
;
}
}
)
;
}
testAddingBlockedProvider
(
next
)
{
function
finishTest
(
good
)
{
ok
(
good
"
Unable
to
add
blocklisted
provider
"
)
;
Services
.
prefs
.
clearUserPref
(
"
social
.
manifest
.
blocked
"
)
;
resetBlocklist
(
)
.
then
(
next
)
;
}
setManifestPref
(
"
social
.
manifest
.
blocked
"
manifest_bad
)
;
setAndUpdateBlocklist
(
blocklistURL
)
.
then
(
(
)
=
>
{
try
{
SocialService
.
addProvider
(
manifest_bad
function
(
provider
)
{
SocialService
.
disableProvider
(
provider
.
origin
function
(
)
{
ok
(
false
"
SocialService
.
addProvider
should
throw
blocklist
exception
"
)
;
finishTest
(
false
)
;
}
)
;
}
)
;
}
catch
(
e
)
{
ok
(
true
"
SocialService
.
addProvider
should
throw
blocklist
exception
:
"
+
e
)
;
finishTest
(
true
)
;
}
}
)
;
}
testInstallingBlockedProvider
(
next
)
{
function
finishTest
(
good
)
{
ok
(
good
"
Unable
to
install
blocklisted
provider
"
)
;
resetBlocklist
(
)
.
then
(
next
)
;
}
let
activationURL
=
manifest_bad
.
origin
+
"
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_activate
.
html
"
setAndUpdateBlocklist
(
blocklistURL
)
.
then
(
(
)
=
>
{
try
{
let
data
=
{
origin
:
manifest_bad
.
origin
url
:
activationURL
manifest
:
manifest_bad
window
}
Social
.
installProvider
(
data
function
(
addonManifest
)
{
finishTest
(
false
)
;
}
)
;
}
catch
(
e
)
{
finishTest
(
true
)
;
}
}
)
;
}
testBlockingExistingProvider
(
next
)
{
let
listener
=
{
_window
:
null
onOpenWindow
(
aXULWindow
)
{
Services
.
wm
.
removeListener
(
this
)
;
this
.
_window
=
aXULWindow
;
let
domwindow
=
aXULWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
domwindow
.
addEventListener
(
"
load
"
function
_load
(
)
{
domwindow
.
removeEventListener
(
"
load
"
_load
)
;
domwindow
.
addEventListener
(
"
unload
"
function
_unload
(
)
{
domwindow
.
removeEventListener
(
"
unload
"
_unload
)
;
info
(
"
blocklist
window
was
closed
"
)
;
Services
.
wm
.
removeListener
(
listener
)
;
next
(
)
;
}
)
;
is
(
domwindow
.
document
.
location
.
href
URI_EXTENSION_BLOCKLIST_DIALOG
"
dialog
opened
and
focused
"
)
;
executeSoon
(
(
)
=
>
{
let
cancelButton
=
domwindow
.
document
.
documentElement
.
getButton
(
"
cancel
"
)
;
info
(
"
*
*
*
*
*
hit
the
cancel
button
\
n
"
)
;
cancelButton
.
doCommand
(
)
;
}
)
;
}
)
;
}
onCloseWindow
(
aXULWindow
)
{
}
onWindowTitleChange
(
aXULWindow
aNewTitle
)
{
}
}
;
Services
.
wm
.
addListener
(
listener
)
;
setManifestPref
(
"
social
.
manifest
.
blocked
"
manifest_bad
)
;
try
{
SocialService
.
addProvider
(
manifest_bad
function
(
provider
)
{
SocialService
.
registerProviderListener
(
function
providerListener
(
topic
origin
providers
)
{
if
(
topic
!
=
"
provider
-
disabled
"
)
return
;
SocialService
.
unregisterProviderListener
(
providerListener
)
;
is
(
origin
provider
.
origin
"
provider
disabled
"
)
;
SocialService
.
getProvider
(
provider
.
origin
function
(
p
)
{
ok
(
p
=
=
null
"
blocklisted
provider
disabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
social
.
manifest
.
blocked
"
)
;
resetBlocklist
(
)
;
}
)
;
}
)
;
setAndUpdateBlocklist
(
blocklistURL
)
;
}
)
;
}
catch
(
e
)
{
ok
(
false
"
unable
to
add
provider
"
+
e
)
;
next
(
)
;
}
}
}
