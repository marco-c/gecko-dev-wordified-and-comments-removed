function
isChatFocused
(
chat
)
{
return
getChatBar
(
)
.
_isChatFocused
(
chat
)
;
}
var
manifest
=
{
name
:
"
provider
1
"
origin
:
"
https
:
/
/
example
.
com
"
sidebarURL
:
"
https
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
social
/
social_sidebar
.
html
"
iconURL
:
"
https
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
general
/
moz
.
png
"
}
;
function
test
(
)
{
waitForExplicitFinish
(
)
;
let
url
=
"
data
:
text
/
html
;
charset
=
utf
-
8
"
+
encodeURI
(
'
<
input
id
=
"
theinput
"
>
'
)
;
let
tab
=
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
url
{
skipAnimation
:
true
}
)
;
let
browser
=
tab
.
linkedBrowser
;
browser
.
addEventListener
(
"
load
"
function
tabLoad
(
event
)
{
browser
.
removeEventListener
(
"
load
"
tabLoad
true
)
;
let
preSubTest
=
function
(
cb
)
{
ContentTask
.
spawn
(
browser
null
function
*
(
)
{
content
.
focus
(
)
;
content
.
document
.
getElementById
(
"
theinput
"
)
.
focus
(
)
;
yield
ContentTaskUtils
.
waitForCondition
(
(
)
=
>
Services
.
focus
.
focusedWindow
=
=
content
"
tab
should
have
focus
"
)
;
}
)
.
then
(
cb
)
;
}
let
postSubTest
=
function
(
cb
)
{
Task
.
spawn
(
closeAllChats
)
.
then
(
cb
)
;
}
runSocialTestWithProvider
(
manifest
function
(
finishcb
)
{
SocialSidebar
.
show
(
)
;
runSocialTests
(
tests
preSubTest
postSubTest
function
(
)
{
ensureBrowserTabClosed
(
tab
)
.
then
(
finishcb
)
;
}
)
;
}
)
;
}
true
)
;
}
var
tests
=
{
testFocusWhenViaUser
:
function
(
next
)
{
ensureFrameLoaded
(
document
.
getElementById
(
"
social
-
sidebar
-
browser
"
)
)
.
then
(
(
)
=
>
{
let
chatbar
=
getChatBar
(
)
;
openChatViaUser
(
)
;
ok
(
chatbar
.
firstElementChild
"
chat
opened
"
)
;
waitForCondition
(
(
)
=
>
isChatFocused
(
chatbar
.
selectedChat
)
function
(
)
{
is
(
chatbar
.
selectedChat
chatbar
.
firstElementChild
"
chat
is
selected
"
)
;
next
(
)
;
}
"
chat
should
be
focused
"
)
;
}
)
;
}
}
;
