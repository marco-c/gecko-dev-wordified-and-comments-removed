"
use
strict
"
;
const
ALERT_SERVICE
=
Cc
[
"
mozilla
.
org
/
alerts
-
service
;
1
"
]
.
getService
(
Ci
.
nsIAlertsService
)
.
QueryInterface
(
Ci
.
nsIAlertsDoNotDisturb
)
;
const
PAGE
=
"
https
:
/
/
example
.
org
/
browser
/
browser
/
base
/
content
/
test
/
alerts
/
file_dom_notifications
.
html
"
;
const
NOTIFICATION_TIMEOUT_SECS
=
2000
;
add_setup
(
async
function
(
)
{
await
addNotificationPermission
(
PAGE
)
;
}
)
;
add_task
(
async
function
test_manualDoNotDisturb
(
)
{
try
{
ALERT_SERVICE
.
manualDoNotDisturb
;
ok
(
true
"
Alert
service
implements
do
-
not
-
disturb
interface
"
)
;
}
catch
(
e
)
{
ok
(
true
"
Alert
service
doesn
'
t
implement
do
-
not
-
disturb
interface
exiting
test
"
)
;
return
;
}
registerCleanupFunction
(
(
)
=
>
{
ALERT_SERVICE
.
manualDoNotDisturb
=
false
;
}
)
;
ok
(
!
ALERT_SERVICE
.
manualDoNotDisturb
"
Alert
service
should
not
be
disabled
when
test
starts
"
)
;
await
BrowserTestUtils
.
withNewTab
(
PAGE
async
browser
=
>
{
await
openNotification
(
browser
"
showNotification2
"
)
;
info
(
"
Notification
alert
showing
"
)
;
let
alertWindow
=
Services
.
wm
.
getMostRecentWindow
(
"
alert
:
alert
"
)
;
ok
(
alertWindow
"
Expected
a
XUL
alert
window
.
"
)
;
let
doNotDisturbMenuItem
=
alertWindow
.
document
.
getElementById
(
"
doNotDisturbMenuItem
"
)
;
is
(
doNotDisturbMenuItem
.
localName
"
menuitem
"
"
menuitem
found
"
)
;
let
unloadPromise
=
BrowserTestUtils
.
waitForEvent
(
alertWindow
"
beforeunload
"
)
;
doNotDisturbMenuItem
.
click
(
)
;
info
(
"
Clicked
on
do
-
not
-
disturb
menuitem
"
)
;
await
unloadPromise
;
ok
(
ALERT_SERVICE
.
manualDoNotDisturb
"
Alert
service
should
be
disabled
after
clicking
menuitem
"
)
;
await
Assert
.
rejects
(
openNotification
(
browser
"
showNotification2
"
NOTIFICATION_TIMEOUT_SECS
)
/
timed
out
/
"
The
notification
should
never
display
.
"
)
;
ALERT_SERVICE
.
manualDoNotDisturb
=
false
;
}
)
;
}
)
;
add_task
(
async
function
test_suppressForScreenSharing
(
)
{
try
{
ALERT_SERVICE
.
suppressForScreenSharing
;
ok
(
true
"
Alert
service
implements
do
-
not
-
disturb
interface
"
)
;
}
catch
(
e
)
{
ok
(
true
"
Alert
service
doesn
'
t
implement
do
-
not
-
disturb
interface
exiting
test
"
)
;
return
;
}
registerCleanupFunction
(
(
)
=
>
{
ALERT_SERVICE
.
suppressForScreenSharing
=
false
;
}
)
;
ok
(
!
ALERT_SERVICE
.
suppressForScreenSharing
"
Alert
service
should
not
be
suppressing
for
screen
sharing
when
test
"
+
"
starts
"
)
;
await
BrowserTestUtils
.
withNewTab
(
PAGE
async
browser
=
>
{
await
openNotification
(
browser
"
showNotification2
"
)
;
info
(
"
Notification
alert
showing
"
)
;
await
closeNotification
(
browser
)
;
ALERT_SERVICE
.
suppressForScreenSharing
=
true
;
await
Assert
.
rejects
(
openNotification
(
browser
"
showNotification2
"
NOTIFICATION_TIMEOUT_SECS
)
/
timed
out
/
"
The
notification
should
never
display
.
"
)
;
}
)
;
ALERT_SERVICE
.
suppressForScreenSharing
=
false
;
}
)
;
