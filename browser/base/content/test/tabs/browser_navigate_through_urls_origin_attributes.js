loadTestSubscript
(
"
helper_origin_attrs_testing
.
js
"
)
;
const
PATH
=
"
browser
/
browser
/
base
/
content
/
test
/
tabs
/
blank
.
html
"
;
var
TEST_CASES
=
[
{
uri
:
"
https
:
/
/
example
.
com
/
"
+
PATH
}
{
uri
:
"
https
:
/
/
example
.
org
/
"
+
PATH
}
{
uri
:
"
about
:
preferences
"
}
{
uri
:
"
about
:
config
"
}
]
;
const
NUM_PAGES_OPEN_FOR_EACH_TEST_CASE
=
5
;
var
remoteTypes
;
var
xulFrameLoaderCreatedCounter
=
{
}
;
function
handleEventLocal
(
aEvent
)
{
if
(
aEvent
.
type
!
=
"
XULFrameLoaderCreated
"
)
{
return
;
}
if
(
"
gBrowser
"
in
aEvent
.
target
.
ownerGlobal
)
{
xulFrameLoaderCreatedCounter
.
numCalledSoFar
+
+
;
}
}
var
gPrevRemoteTypeRegularTab
;
var
gPrevRemoteTypeContainerTab
;
var
gPrevRemoteTypePrivateTab
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
userContext
.
enabled
"
true
]
[
"
browser
.
newtab
.
preload
"
false
]
]
}
)
;
requestLongerTimeout
(
4
)
;
}
)
;
function
setupRemoteTypes
(
)
{
gPrevRemoteTypeRegularTab
=
null
;
gPrevRemoteTypeContainerTab
=
{
}
;
gPrevRemoteTypePrivateTab
=
null
;
remoteTypes
=
getExpectedRemoteTypes
(
gFissionBrowser
NUM_PAGES_OPEN_FOR_EACH_TEST_CASE
)
;
}
add_task
(
async
function
testNavigate
(
)
{
setupRemoteTypes
(
)
;
let
regularPage
=
await
openURIInRegularTab
(
"
about
:
blank
"
window
)
;
gPrevRemoteTypeRegularTab
=
regularPage
.
tab
.
linkedBrowser
.
remoteType
;
let
containerPages
=
[
]
;
for
(
var
user_context_id
=
1
;
user_context_id
<
=
NUM_USER_CONTEXTS
;
user_context_id
+
+
)
{
let
containerPage
=
await
openURIInContainer
(
"
about
:
blank
"
window
user_context_id
)
;
gPrevRemoteTypeContainerTab
[
user_context_id
]
=
containerPage
.
tab
.
linkedBrowser
.
remoteType
;
containerPages
.
push
(
containerPage
)
;
}
let
privatePage
=
await
openURIInPrivateTab
(
)
;
gPrevRemoteTypePrivateTab
=
privatePage
.
tab
.
linkedBrowser
.
remoteType
;
for
(
const
testCase
of
TEST_CASES
)
{
let
uri
=
testCase
.
uri
;
await
loadURIAndCheckRemoteType
(
regularPage
.
tab
.
linkedBrowser
uri
"
regular
tab
"
gPrevRemoteTypeRegularTab
)
;
gPrevRemoteTypeRegularTab
=
regularPage
.
tab
.
linkedBrowser
.
remoteType
;
for
(
const
page
of
containerPages
)
{
await
loadURIAndCheckRemoteType
(
page
.
tab
.
linkedBrowser
uri
container
tab
{
page
.
user_context_id
}
gPrevRemoteTypeContainerTab
[
page
.
user_context_id
]
)
;
gPrevRemoteTypeContainerTab
[
page
.
user_context_id
]
=
page
.
tab
.
linkedBrowser
.
remoteType
;
}
await
loadURIAndCheckRemoteType
(
privatePage
.
tab
.
linkedBrowser
uri
"
private
tab
"
gPrevRemoteTypePrivateTab
)
;
gPrevRemoteTypePrivateTab
=
privatePage
.
tab
.
linkedBrowser
.
remoteType
;
}
containerPages
.
forEach
(
containerPage
=
>
{
BrowserTestUtils
.
removeTab
(
containerPage
.
tab
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
regularPage
.
tab
)
;
BrowserTestUtils
.
removeTab
(
privatePage
.
tab
)
;
}
)
;
async
function
loadURIAndCheckRemoteType
(
aBrowser
aURI
aText
aPrevRemoteType
)
{
let
expectedCurr
=
remoteTypes
.
shift
(
)
;
initXulFrameLoaderCreatedCounter
(
xulFrameLoaderCreatedCounter
)
;
aBrowser
.
ownerGlobal
.
gBrowser
.
addEventListener
(
"
XULFrameLoaderCreated
"
handleEventLocal
)
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
aBrowser
false
aURI
)
;
info
(
About
to
load
{
aURI
}
in
{
aText
}
)
;
BrowserTestUtils
.
loadURIString
(
aBrowser
aURI
)
;
await
loaded
;
is
(
expectedCurr
aBrowser
.
remoteType
correct
remote
type
for
{
aURI
}
{
aText
}
)
;
info
(
XULFrameLoaderCreated
was
fired
{
xulFrameLoaderCreatedCounter
.
numCalledSoFar
}
time
(
s
)
for
{
aURI
}
{
aText
}
)
;
var
numExpected
=
expectedCurr
=
=
aPrevRemoteType
&
&
(
!
SpecialPowers
.
Services
.
appinfo
.
sessionHistoryInParent
|
|
!
expectedCurr
)
?
0
:
1
;
is
(
xulFrameLoaderCreatedCounter
.
numCalledSoFar
numExpected
XULFrameLoaderCreated
fired
correct
number
of
times
for
{
aURI
}
{
aText
}
prev
=
{
aPrevRemoteType
}
curr
=
{
aBrowser
.
remoteType
}
)
;
aBrowser
.
ownerGlobal
.
gBrowser
.
removeEventListener
(
"
XULFrameLoaderCreated
"
handleEventLocal
)
;
}
