requestLongerTimeout
(
2
)
;
const
BASE
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
async
function
navigateTo
(
browser
urls
expectedPersist
)
{
for
(
let
url
of
urls
)
{
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
browser
false
url
)
;
BrowserTestUtils
.
loadURI
(
browser
url
)
;
await
loaded
;
}
let
pageShowCheck
=
evt
=
>
{
evt
.
target
.
ownerGlobal
.
document
.
documentElement
.
setAttribute
(
"
persisted
"
evt
.
persisted
)
;
return
true
;
}
;
is
(
browser
.
canGoBack
true
After
navigating
to
urls
=
{
urls
}
we
can
go
back
from
uri
=
{
browser
.
currentURI
.
spec
}
)
;
if
(
expectedPersist
)
{
let
pageShowPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
)
;
info
(
Navigating
back
from
uri
=
{
browser
.
currentURI
.
spec
}
)
;
browser
.
goBack
(
)
;
await
pageShowPromise
;
info
(
Got
pageshow
event
)
;
let
forwardPageShow
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
false
pageShowCheck
)
;
info
(
Navigating
forward
from
uri
=
{
browser
.
currentURI
.
spec
}
)
;
browser
.
goForward
(
)
;
await
forwardPageShow
;
let
persisted
=
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
return
content
.
document
.
documentElement
.
getAttribute
(
"
persisted
"
)
;
}
)
;
is
(
persisted
expectedPersist
.
toString
(
)
uri
{
browser
.
currentURI
.
spec
}
should
have
persisted
)
;
}
else
{
let
pageShowPromise
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
false
pageShowCheck
)
;
info
(
Navigating
back
from
uri
=
{
browser
.
currentURI
.
spec
}
)
;
browser
.
goBack
(
)
;
await
pageShowPromise
;
info
(
Got
pageshow
event
)
;
let
persisted
=
await
SpecialPowers
.
spawn
(
browser
[
]
async
function
(
)
{
return
content
.
document
.
documentElement
.
getAttribute
(
"
persisted
"
)
;
}
)
;
is
(
persisted
expectedPersist
.
toString
(
)
uri
{
browser
.
currentURI
.
spec
}
shouldn
'
t
have
persisted
)
;
}
}
add_task
(
async
function
testAboutPagesExemptFromBfcache
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
fission
.
bfcacheInParent
"
true
]
]
}
)
;
var
browser
;
const
private_test_cases
=
[
[
"
about
:
blank
"
]
[
"
about
:
blank
"
"
about
:
privatebrowsing
"
"
about
:
blank
"
]
]
;
for
(
const
urls
of
private_test_cases
)
{
info
(
Private
tab
-
navigate
to
{
urls
}
urls
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
waitForTabURL
:
"
about
:
privatebrowsing
"
}
)
;
browser
=
win
.
gBrowser
.
selectedTab
.
linkedBrowser
;
await
navigateTo
(
browser
urls
false
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
const
regular_test_cases
=
[
[
"
about
:
home
"
]
[
"
about
:
home
"
"
about
:
blank
"
]
[
"
about
:
blank
"
"
about
:
newtab
"
]
]
;
for
(
const
urls
of
regular_test_cases
)
{
info
(
Regular
tab
-
navigate
to
{
urls
}
urls
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
:
win
.
gBrowser
opening
:
"
about
:
newtab
"
}
)
;
browser
=
tab
.
linkedBrowser
;
await
navigateTo
(
browser
urls
false
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
}
)
;
add_task
(
async
function
testAboutPagesBfcacheAllowed
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
fission
.
bfcacheInParent
"
true
]
]
}
)
;
var
browser
;
const
private_test_cases
=
[
[
"
about
:
blank
"
]
[
"
about
:
home
"
"
about
:
blank
"
]
[
BASE
+
"
file_about_srcdoc
.
html
"
]
]
;
for
(
const
urls
of
private_test_cases
)
{
info
(
Private
tab
-
navigate
to
{
urls
}
urls
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
waitForTabURL
:
"
about
:
privatebrowsing
"
}
)
;
browser
=
win
.
gBrowser
.
selectedTab
.
linkedBrowser
;
await
navigateTo
(
browser
urls
true
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
const
regular_test_cases
=
[
[
"
about
:
home
"
"
about
:
blank
"
]
[
"
about
:
home
"
BASE
+
"
file_about_srcdoc
.
html
"
]
]
;
for
(
const
urls
of
regular_test_cases
)
{
info
(
Regular
tab
-
navigate
to
{
urls
}
urls
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
:
win
.
gBrowser
}
)
;
browser
=
tab
.
linkedBrowser
;
await
navigateTo
(
browser
urls
true
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
}
)
;
