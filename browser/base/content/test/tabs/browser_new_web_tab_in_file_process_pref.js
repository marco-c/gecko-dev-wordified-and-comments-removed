const
TEST_FILE
=
"
dummy_page
.
html
"
;
const
TEST_HTTP
=
"
http
:
/
/
example
.
org
/
"
;
const
TEST_CROSS_ORIGIN
=
"
http
:
/
/
example
.
com
/
"
;
let
testFile
=
getChromeDir
(
getResolvedURI
(
gTestPath
)
)
;
testFile
.
append
(
TEST_FILE
)
;
testFile
.
normalize
(
)
;
const
testFileURI
=
Services
.
io
.
newFileURI
(
testFile
)
.
spec
;
function
getBrowserPid
(
browser
)
{
return
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
return
Services
.
appinfo
.
processID
;
}
)
;
}
async
function
CheckBrowserInPid
(
browser
expectedPid
message
)
{
let
pid
=
await
getBrowserPid
(
browser
)
;
is
(
pid
expectedPid
message
)
;
}
async
function
CheckBrowserNotInPid
(
browser
unExpectedPid
message
)
{
let
pid
=
await
getBrowserPid
(
browser
)
;
isnot
(
pid
unExpectedPid
message
)
;
}
async
function
runWebNotInFileTest
(
prefValue
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
remote
.
allowLinkedWebInFileUriProcess
"
prefValue
]
]
}
)
;
info
(
Running
test
with
allowLinkedWebInFileUriProcess
=
{
prefValue
}
)
;
await
BrowserTestUtils
.
withNewTab
(
testFileURI
async
function
(
fileBrowser
)
{
let
filePid
=
await
getBrowserPid
(
fileBrowser
)
;
let
promiseTabOpened
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
TEST_HTTP
true
)
;
await
SpecialPowers
.
spawn
(
fileBrowser
[
TEST_HTTP
]
uri
=
>
{
content
.
open
(
uri
"
_blank
"
)
;
}
)
;
let
httpTab
=
await
promiseTabOpened
;
let
httpBrowser
=
httpTab
.
linkedBrowser
;
registerCleanupFunction
(
async
function
(
)
{
BrowserTestUtils
.
removeTab
(
httpTab
)
;
}
)
;
await
CheckBrowserNotInPid
(
httpBrowser
filePid
"
Check
that
new
http
tab
opened
from
file
loaded
in
a
new
content
process
.
"
)
;
ok
(
E10SUtils
.
isWebRemoteType
(
httpBrowser
.
remoteType
)
Check
that
tab
now
has
web
remote
type
got
{
httpBrowser
.
remoteType
}
.
)
;
let
httpPid
=
await
getBrowserPid
(
httpBrowser
)
;
let
promiseLoad
=
BrowserTestUtils
.
browserLoaded
(
httpBrowser
false
testFileURI
)
;
BrowserTestUtils
.
loadURI
(
httpBrowser
testFileURI
)
;
await
promiseLoad
;
await
CheckBrowserNotInPid
(
httpBrowser
httpPid
"
Check
that
tab
not
in
http
content
process
after
file
:
/
/
load
.
"
)
;
is
(
httpBrowser
.
remoteType
E10SUtils
.
FILE_REMOTE_TYPE
"
Check
that
tab
now
has
file
remote
type
.
"
)
;
}
)
;
}
async
function
runWebInFileTest
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
remote
.
allowLinkedWebInFileUriProcess
"
true
]
]
}
)
;
info
(
"
Running
test
with
allowLinkedWebInFileUriProcess
=
true
"
)
;
await
BrowserTestUtils
.
withNewTab
(
testFileURI
async
function
(
fileBrowser
)
{
let
filePid
=
await
getBrowserPid
(
fileBrowser
)
;
let
promiseTabOpened
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
TEST_HTTP
true
)
;
await
SpecialPowers
.
spawn
(
fileBrowser
[
TEST_HTTP
]
uri
=
>
{
content
.
open
(
uri
"
_blank
"
)
;
}
)
;
let
httpTab
=
await
promiseTabOpened
;
let
httpBrowser
=
httpTab
.
linkedBrowser
;
registerCleanupFunction
(
async
function
(
)
{
BrowserTestUtils
.
removeTab
(
httpTab
)
;
}
)
;
await
CheckBrowserInPid
(
httpBrowser
filePid
"
Check
that
new
http
tab
opened
from
file
loaded
in
file
content
process
.
"
)
;
is
(
httpBrowser
.
remoteType
E10SUtils
.
FILE_REMOTE_TYPE
"
Check
that
tab
now
has
file
remote
type
.
"
)
;
if
(
httpTab
!
=
gBrowser
.
selectedTab
)
{
httpTab
=
await
BrowserTestUtils
.
switchTab
(
gBrowser
httpTab
)
;
httpBrowser
=
httpTab
.
linkedBrowser
;
}
let
promiseLoad
=
BrowserTestUtils
.
browserLoaded
(
httpBrowser
false
TEST_HTTP
)
;
document
.
getElementById
(
"
reload
-
button
"
)
.
doCommand
(
)
;
await
promiseLoad
;
await
CheckBrowserInPid
(
httpBrowser
filePid
"
Check
that
http
tab
still
in
file
content
process
after
reload
.
"
)
;
promiseLoad
=
BrowserTestUtils
.
browserLoaded
(
httpBrowser
false
TEST_HTTP
+
"
foo
"
)
;
BrowserTestUtils
.
loadURI
(
httpBrowser
TEST_HTTP
+
"
foo
"
)
;
await
promiseLoad
;
await
CheckBrowserInPid
(
httpBrowser
filePid
"
Check
that
http
tab
still
in
file
content
process
after
same
origin
load
.
"
)
;
let
promiseLocation
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
TEST_HTTP
)
;
httpBrowser
.
goBack
(
)
;
await
promiseLocation
;
await
CheckBrowserInPid
(
httpBrowser
filePid
"
Check
that
http
tab
still
in
file
content
process
after
history
back
.
"
)
;
promiseLocation
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
TEST_HTTP
+
"
foo
"
)
;
promiseLoad
=
BrowserTestUtils
.
browserLoaded
(
httpBrowser
false
TEST_HTTP
+
"
foo
"
)
;
httpBrowser
.
goForward
(
)
;
await
promiseLocation
;
await
CheckBrowserInPid
(
httpBrowser
filePid
"
Check
that
http
tab
still
in
file
content
process
after
history
forward
.
"
)
;
promiseLocation
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
TEST_HTTP
)
;
httpBrowser
.
gotoIndex
(
0
)
;
await
promiseLocation
;
await
CheckBrowserInPid
(
httpBrowser
filePid
"
Check
that
http
tab
still
in
file
content
process
after
history
gotoIndex
.
"
)
;
promiseLoad
=
BrowserTestUtils
.
browserLoaded
(
httpBrowser
false
testFileURI
)
;
BrowserTestUtils
.
loadURI
(
httpBrowser
testFileURI
)
;
await
promiseLoad
;
await
CheckBrowserInPid
(
httpBrowser
filePid
"
Check
that
http
tab
still
in
file
content
process
after
file
:
/
/
load
.
"
)
;
promiseLoad
=
BrowserTestUtils
.
browserLoaded
(
httpBrowser
false
TEST_HTTP
)
;
await
SpecialPowers
.
spawn
(
httpBrowser
[
TEST_HTTP
]
uri
=
>
{
content
.
location
=
uri
;
}
)
;
await
promiseLoad
;
await
CheckBrowserInPid
(
httpBrowser
filePid
"
Check
that
http
tab
still
in
file
content
process
after
location
change
.
"
)
;
promiseLoad
=
BrowserTestUtils
.
browserLoaded
(
httpBrowser
false
TEST_CROSS_ORIGIN
)
;
BrowserTestUtils
.
loadURI
(
httpBrowser
TEST_CROSS_ORIGIN
)
;
await
promiseLoad
;
await
CheckBrowserNotInPid
(
httpBrowser
filePid
"
Check
that
http
tab
not
in
file
content
process
after
cross
origin
load
.
"
)
;
ok
(
E10SUtils
.
isWebRemoteType
(
httpBrowser
.
remoteType
)
"
Check
that
tab
now
has
web
remote
type
.
"
)
;
let
httpPid
=
await
getBrowserPid
(
httpBrowser
)
;
promiseLocation
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
TEST_HTTP
)
;
httpBrowser
.
goBack
(
)
;
await
promiseLocation
;
await
CheckBrowserInPid
(
httpBrowser
httpPid
"
Check
that
http
tab
still
in
web
content
process
after
process
switch
and
history
back
.
"
)
;
promiseLocation
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
testFileURI
)
;
httpBrowser
.
goBack
(
)
;
await
promiseLocation
;
await
CheckBrowserNotInPid
(
httpBrowser
httpPid
"
Check
that
history
back
to
file
:
/
/
URI
switches
to
file
content
process
.
"
)
;
is
(
httpBrowser
.
remoteType
E10SUtils
.
FILE_REMOTE_TYPE
"
Check
that
tab
now
has
file
remote
type
.
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
remote
.
separateFileUriProcess
"
true
]
[
"
browser
.
tabs
.
remote
.
useHTTPResponseProcessSelection
"
false
]
[
"
dom
.
ipc
.
processCount
.
file
"
2
]
]
}
)
;
}
)
;
add_task
(
async
function
runWebNotInFileTestFalse
(
)
{
await
runWebNotInFileTest
(
false
)
;
}
)
;
if
(
SpecialPowers
.
useRemoteSubframes
)
{
add_task
(
async
function
runWebNotInFileTestTrue
(
)
{
await
runWebNotInFileTest
(
true
)
;
}
)
;
}
else
{
add_task
(
runWebInFileTest
)
;
}
