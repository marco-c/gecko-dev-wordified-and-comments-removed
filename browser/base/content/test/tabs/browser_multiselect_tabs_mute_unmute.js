const
PREF_DELAY_AUTOPLAY
=
"
media
.
block
-
autoplay
-
until
-
in
-
foreground
"
;
add_task
(
async
function
setPref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
PREF_DELAY_AUTOPLAY
true
]
]
}
)
;
}
)
;
add_task
(
async
function
muteTabs_usingButton
(
)
{
let
tab0
=
await
addMediaTab
(
)
;
let
tab1
=
await
addMediaTab
(
)
;
let
tab2
=
await
addMediaTab
(
)
;
let
tab3
=
await
addMediaTab
(
)
;
let
tab4
=
await
addMediaTab
(
)
;
let
tabs
=
[
tab0
tab1
tab2
tab3
tab4
]
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab0
)
;
await
play
(
tab0
)
;
await
play
(
tab1
false
)
;
await
play
(
tab2
false
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
triggerClickOn
(
tab3
{
shiftKey
:
true
}
)
;
is
(
gBrowser
.
multiSelectedTabsCount
3
"
Three
multiselected
tabs
"
)
;
ok
(
!
tab0
.
multiselected
"
Tab0
is
not
multiselected
"
)
;
ok
(
!
tab4
.
multiselected
"
Tab4
is
not
multiselected
"
)
;
for
(
let
i
=
1
;
i
<
=
3
;
i
+
+
)
{
ok
(
tabs
[
i
]
.
multiselected
"
Tab
"
+
i
+
"
is
multiselected
"
)
;
}
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
ok
(
!
muted
(
tabs
[
i
]
)
"
Tab
"
+
i
+
"
is
not
muted
"
)
;
}
let
tab0MuteAudioBtn
=
tab0
.
overlayIcon
;
await
test_mute_tab
(
tab0
tab0MuteAudioBtn
true
)
;
ok
(
muted
(
tab0
)
"
Tab0
is
muted
"
)
;
for
(
let
i
=
1
;
i
<
=
4
;
i
+
+
)
{
ok
(
!
muted
(
tabs
[
i
]
)
"
Tab
"
+
i
+
"
is
not
muted
"
)
;
}
await
triggerClickOn
(
tab0
{
ctrlKey
:
true
}
)
;
for
(
let
i
=
0
;
i
<
=
3
;
i
+
+
)
{
ok
(
tabs
[
i
]
.
multiselected
"
tab
"
+
i
+
"
is
multiselected
"
)
;
}
ok
(
!
tab4
.
multiselected
"
tab4
is
not
multiselected
"
)
;
ok
(
muted
(
tab0
)
"
Tab0
is
still
muted
"
)
;
ok
(
!
muted
(
tab1
)
"
Tab1
is
not
muted
"
)
;
ok
(
!
activeMediaBlocked
(
tab1
)
"
Tab1
is
not
activemedia
-
blocked
"
)
;
ok
(
activeMediaBlocked
(
tab2
)
"
Tab2
is
media
-
blocked
"
)
;
ok
(
!
muted
(
tab3
)
"
Tab3
is
not
muted
"
)
;
ok
(
!
activeMediaBlocked
(
tab3
)
"
Tab3
is
not
activemedia
-
blocked
"
)
;
ok
(
!
muted
(
tab4
)
"
Tab4
is
not
muted
"
)
;
ok
(
!
activeMediaBlocked
(
tab4
)
"
Tab4
is
not
activemedia
-
blocked
"
)
;
let
tab1MuteAudioBtn
=
tab1
.
overlayIcon
;
await
test_mute_tab
(
tab1
tab1MuteAudioBtn
true
)
;
ok
(
muted
(
tab0
)
"
Tab0
is
still
muted
"
)
;
ok
(
muted
(
tab1
)
"
Tab1
is
muted
"
)
;
ok
(
activeMediaBlocked
(
tab2
)
"
Tab2
is
still
media
-
blocked
"
)
;
ok
(
muted
(
tab3
)
"
Tab3
is
now
muted
"
)
;
ok
(
!
muted
(
tab4
)
"
Tab4
is
not
muted
"
)
;
ok
(
!
activeMediaBlocked
(
tab4
)
"
Tab4
is
not
activemedia
-
blocked
"
)
;
for
(
let
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
add_task
(
async
function
unmuteTabs_usingButton
(
)
{
let
tab0
=
await
addMediaTab
(
)
;
let
tab1
=
await
addMediaTab
(
)
;
let
tab2
=
await
addMediaTab
(
)
;
let
tab3
=
await
addMediaTab
(
)
;
let
tab4
=
await
addMediaTab
(
)
;
let
tabs
=
[
tab0
tab1
tab2
tab3
tab4
]
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab0
)
;
await
play
(
tab0
)
;
await
play
(
tab1
false
)
;
await
play
(
tab2
false
)
;
await
toggleMuteAudio
(
tab3
true
)
;
await
toggleMuteAudio
(
tab4
true
)
;
await
triggerClickOn
(
tab3
{
shiftKey
:
true
}
)
;
for
(
let
i
=
0
;
i
<
=
3
;
i
+
+
)
{
ok
(
tabs
[
i
]
.
multiselected
"
tab
"
+
i
+
"
is
multiselected
"
)
;
}
ok
(
!
tab4
.
multiselected
"
tab4
is
not
multiselected
"
)
;
ok
(
!
muted
(
tab0
)
"
Tab0
is
not
muted
"
)
;
ok
(
!
activeMediaBlocked
(
tab0
)
"
Tab0
is
not
activemedia
-
blocked
"
)
;
ok
(
activeMediaBlocked
(
tab1
)
"
Tab1
is
media
-
blocked
"
)
;
ok
(
activeMediaBlocked
(
tab2
)
"
Tab2
is
media
-
blocked
"
)
;
ok
(
muted
(
tab3
)
"
Tab3
is
muted
"
)
;
ok
(
muted
(
tab4
)
"
Tab4
is
muted
"
)
;
is
(
gBrowser
.
selectedTab
tab0
"
Tab0
is
active
"
)
;
let
tab3MuteAudioBtn
=
tab3
.
overlayIcon
;
await
test_mute_tab
(
tab3
tab3MuteAudioBtn
false
)
;
ok
(
!
muted
(
tab0
)
"
Tab0
is
not
muted
"
)
;
ok
(
!
activeMediaBlocked
(
tab0
)
"
Tab0
is
not
activemedia
-
blocked
"
)
;
ok
(
!
muted
(
tab1
)
"
Tab1
is
not
muted
"
)
;
ok
(
activeMediaBlocked
(
tab1
)
"
Tab1
is
activemedia
-
blocked
"
)
;
ok
(
!
muted
(
tab2
)
"
Tab2
is
not
muted
"
)
;
ok
(
activeMediaBlocked
(
tab2
)
"
Tab2
is
activemedia
-
blocked
"
)
;
ok
(
!
muted
(
tab3
)
"
Tab3
is
not
muted
"
)
;
ok
(
!
activeMediaBlocked
(
tab3
)
"
Tab3
is
not
activemedia
-
blocked
"
)
;
ok
(
muted
(
tab4
)
"
Tab4
is
muted
"
)
;
is
(
gBrowser
.
selectedTab
tab0
"
Tab0
is
active
"
)
;
for
(
let
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
add_task
(
async
function
muteAndUnmuteTabs_usingKeyboard
(
)
{
let
tab0
=
await
addMediaTab
(
)
;
let
tab1
=
await
addMediaTab
(
)
;
let
tab2
=
await
addMediaTab
(
)
;
let
tab3
=
await
addMediaTab
(
)
;
let
tab4
=
await
addMediaTab
(
)
;
let
tabs
=
[
tab0
tab1
tab2
tab3
tab4
]
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab0
)
;
let
mutedPromise
=
get_wait_for_mute_promise
(
tab0
true
)
;
EventUtils
.
synthesizeKey
(
"
M
"
{
ctrlKey
:
true
}
)
;
await
mutedPromise
;
ok
(
muted
(
tab0
)
"
Tab0
should
be
muted
"
)
;
ok
(
!
muted
(
tab1
)
"
Tab1
should
not
be
muted
"
)
;
ok
(
!
muted
(
tab2
)
"
Tab2
should
not
be
muted
"
)
;
ok
(
!
muted
(
tab3
)
"
Tab3
should
not
be
muted
"
)
;
ok
(
!
muted
(
tab4
)
"
Tab4
should
not
be
muted
"
)
;
await
triggerClickOn
(
tab3
{
shiftKey
:
true
}
)
;
for
(
let
i
=
0
;
i
<
=
3
;
i
+
+
)
{
ok
(
tabs
[
i
]
.
multiselected
"
tab
"
+
i
+
"
is
multiselected
"
)
;
}
ok
(
!
tab4
.
multiselected
"
tab4
is
not
multiselected
"
)
;
mutedPromise
=
get_wait_for_mute_promise
(
tab0
false
)
;
EventUtils
.
synthesizeKey
(
"
M
"
{
ctrlKey
:
true
}
)
;
await
mutedPromise
;
ok
(
!
muted
(
tab0
)
"
Tab0
should
not
be
muted
"
)
;
ok
(
!
muted
(
tab1
)
"
Tab1
should
not
be
muted
"
)
;
ok
(
!
muted
(
tab2
)
"
Tab2
should
not
be
muted
"
)
;
ok
(
!
muted
(
tab3
)
"
Tab3
should
not
be
muted
"
)
;
ok
(
!
muted
(
tab4
)
"
Tab4
should
not
be
muted
"
)
;
mutedPromise
=
get_wait_for_mute_promise
(
tab0
true
)
;
EventUtils
.
synthesizeKey
(
"
M
"
{
ctrlKey
:
true
}
)
;
await
mutedPromise
;
ok
(
muted
(
tab0
)
"
Tab0
should
be
muted
"
)
;
ok
(
muted
(
tab1
)
"
Tab1
should
be
muted
"
)
;
ok
(
muted
(
tab2
)
"
Tab2
should
be
muted
"
)
;
ok
(
muted
(
tab3
)
"
Tab3
should
be
muted
"
)
;
ok
(
!
muted
(
tab4
)
"
Tab4
should
not
be
muted
"
)
;
for
(
let
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
add_task
(
async
function
playTabs_usingButton
(
)
{
let
tab0
=
await
addMediaTab
(
)
;
let
tab1
=
await
addMediaTab
(
)
;
let
tab2
=
await
addMediaTab
(
)
;
let
tab3
=
await
addMediaTab
(
)
;
let
tab4
=
await
addMediaTab
(
)
;
let
tabs
=
[
tab0
tab1
tab2
tab3
tab4
]
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab0
)
;
await
play
(
tab0
)
;
await
play
(
tab1
false
)
;
await
play
(
tab2
false
)
;
await
triggerClickOn
(
tab3
{
shiftKey
:
true
}
)
;
await
toggleMuteAudio
(
tab0
true
)
;
await
toggleMuteAudio
(
tab4
true
)
;
for
(
let
i
=
0
;
i
<
=
3
;
i
+
+
)
{
ok
(
tabs
[
i
]
.
multiselected
"
tab
"
+
i
+
"
is
multiselected
"
)
;
}
ok
(
!
tab4
.
multiselected
"
tab4
is
not
multiselected
"
)
;
ok
(
muted
(
tab0
)
"
Tab0
is
muted
"
)
;
ok
(
activeMediaBlocked
(
tab1
)
"
Tab1
is
media
-
blocked
"
)
;
ok
(
activeMediaBlocked
(
tab2
)
"
Tab2
is
media
-
blocked
"
)
;
ok
(
!
muted
(
tab3
)
"
Tab3
is
not
muted
"
)
;
ok
(
!
activeMediaBlocked
(
tab3
)
"
Tab3
is
not
activemedia
-
blocked
"
)
;
ok
(
muted
(
tab4
)
"
Tab4
is
muted
"
)
;
is
(
gBrowser
.
selectedTab
tab0
"
Tab0
is
active
"
)
;
let
tab2MuteAudioBtn
=
tab2
.
overlayIcon
;
await
test_mute_tab
(
tab2
tab2MuteAudioBtn
false
)
;
ok
(
muted
(
tab0
)
"
Tab0
is
muted
"
)
;
ok
(
!
activeMediaBlocked
(
tab0
)
"
Tab0
is
not
activemedia
-
blocked
"
)
;
ok
(
!
muted
(
tab1
)
"
Tab1
is
not
muted
"
)
;
ok
(
!
activeMediaBlocked
(
tab1
)
"
Tab1
is
not
activemedia
-
blocked
"
)
;
ok
(
!
muted
(
tab2
)
"
Tab2
is
not
muted
"
)
;
ok
(
!
activeMediaBlocked
(
tab2
)
"
Tab2
is
not
activemedia
-
blocked
"
)
;
ok
(
!
muted
(
tab3
)
"
Tab3
is
not
muted
"
)
;
ok
(
!
activeMediaBlocked
(
tab3
)
"
Tab3
is
not
activemedia
-
blocked
"
)
;
ok
(
muted
(
tab4
)
"
Tab4
is
muted
"
)
;
is
(
gBrowser
.
selectedTab
tab0
"
Tab0
is
active
"
)
;
for
(
let
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
add_task
(
async
function
checkTabContextMenu
(
)
{
let
tab0
=
await
addMediaTab
(
)
;
let
tab1
=
await
addMediaTab
(
)
;
let
tab2
=
await
addMediaTab
(
)
;
let
tab3
=
await
addMediaTab
(
)
;
let
tabs
=
[
tab0
tab1
tab2
tab3
]
;
let
menuItemToggleMuteTab
=
document
.
getElementById
(
"
context_toggleMuteTab
"
)
;
let
menuItemToggleMuteSelectedTabs
=
document
.
getElementById
(
"
context_toggleMuteSelectedTabs
"
)
;
await
play
(
tab0
false
)
;
await
toggleMuteAudio
(
tab0
true
)
;
await
play
(
tab1
false
)
;
await
toggleMuteAudio
(
tab2
true
)
;
await
triggerClickOn
(
tab0
{
ctrlKey
:
true
}
)
;
await
triggerClickOn
(
tab1
{
ctrlKey
:
true
}
)
;
await
triggerClickOn
(
tab2
{
ctrlKey
:
true
}
)
;
for
(
let
i
=
0
;
i
<
=
2
;
i
+
+
)
{
ok
(
tabs
[
i
]
.
multiselected
"
Tab
"
+
i
+
"
is
multi
-
selected
"
)
;
}
ok
(
!
tab3
.
multiselected
"
Tab3
is
not
multiselected
"
)
;
ok
(
muted
(
tab0
)
"
Tab0
is
muted
"
)
;
ok
(
activeMediaBlocked
(
tab0
)
"
Tab0
is
activemedia
-
blocked
"
)
;
ok
(
activeMediaBlocked
(
tab1
)
"
Tab1
is
activemedia
-
blocked
"
)
;
ok
(
muted
(
tab2
)
"
Tab2
is
muted
"
)
;
ok
(
!
muted
(
tab3
"
Tab3
is
not
muted
"
)
)
;
let
labels
=
[
"
Unmute
Tabs
"
"
Mute
Tabs
"
"
Unmute
Tabs
"
]
;
for
(
let
i
=
0
;
i
<
=
2
;
i
+
+
)
{
updateTabContextMenu
(
tabs
[
i
]
)
;
ok
(
menuItemToggleMuteTab
.
hidden
"
toggleMuteAudio
menu
for
one
tab
is
hidden
-
contextTab
"
+
i
)
;
ok
(
!
menuItemToggleMuteSelectedTabs
.
hidden
"
toggleMuteAudio
menu
for
selected
tab
is
not
hidden
-
contextTab
"
+
i
)
;
is
(
menuItemToggleMuteSelectedTabs
.
label
labels
[
i
]
labels
[
i
]
+
"
should
be
shown
"
)
;
}
updateTabContextMenu
(
tab3
)
;
ok
(
!
menuItemToggleMuteTab
.
hidden
"
toggleMuteAudio
menu
for
one
tab
is
not
hidden
"
)
;
ok
(
menuItemToggleMuteSelectedTabs
.
hidden
"
toggleMuteAudio
menu
for
selected
tab
is
hidden
"
)
;
for
(
let
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
