"
use
strict
"
;
async
function
openPreview
(
tab
)
{
const
previewShown
=
BrowserTestUtils
.
waitForEvent
(
document
.
getElementById
(
"
tabbrowser
-
tab
-
preview
"
)
"
previewshown
"
false
e
=
>
{
return
e
.
detail
.
tab
=
=
=
tab
;
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
getElementById
(
"
reload
-
button
"
)
{
type
:
"
mousemove
"
}
)
;
EventUtils
.
synthesizeMouseAtCenter
(
tab
{
type
:
"
mousemove
"
}
)
;
return
previewShown
;
}
async
function
closePreviews
(
)
{
const
previewHidden
=
BrowserTestUtils
.
waitForEvent
(
document
.
getElementById
(
"
tabbrowser
-
tab
-
preview
"
)
"
previewhidden
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
document
.
getElementById
(
"
reload
-
button
"
)
{
type
:
"
mousemove
"
}
)
;
return
previewHidden
;
}
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
cardPreview
.
enabled
"
true
]
[
"
browser
.
tabs
.
cardPreview
.
showThumbnails
"
false
]
[
"
browser
.
tabs
.
cardPreview
.
delayMs
"
0
]
]
}
)
;
}
)
;
add_task
(
async
(
)
=
>
{
const
tabUrl1
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
First
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl1
)
;
const
tabUrl2
=
"
data
:
text
/
html
<
html
>
<
head
>
<
title
>
Second
New
Tab
<
/
title
>
<
/
head
>
<
body
>
Hello
<
/
body
>
<
/
html
>
"
;
const
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl2
)
;
const
previewContainer
=
document
.
getElementById
(
"
tabbrowser
-
tab
-
preview
"
)
;
await
openPreview
(
tab1
)
;
Assert
.
ok
(
[
"
open
"
"
showing
"
]
.
includes
(
previewContainer
.
panel
.
state
)
"
tab1
preview
shown
"
)
;
Assert
.
equal
(
previewContainer
.
renderRoot
.
querySelector
(
"
.
tab
-
preview
-
title
"
)
.
innerText
"
First
New
Tab
"
"
Preview
of
tab1
shows
correct
title
"
)
;
await
openPreview
(
tab2
)
;
Assert
.
ok
(
[
"
open
"
"
showing
"
]
.
includes
(
previewContainer
.
panel
.
state
)
"
tab2
preview
shown
"
)
;
Assert
.
equal
(
previewContainer
.
renderRoot
.
querySelector
(
"
.
tab
-
preview
-
title
"
)
.
innerText
"
Second
New
Tab
"
"
Preview
of
tab2
shows
correct
title
"
)
;
await
closePreviews
(
)
;
Assert
.
ok
(
[
"
closed
"
"
hiding
"
]
.
includes
(
previewContainer
.
panel
.
state
)
"
preview
container
is
now
hidden
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
cardPreview
.
showThumbnails
"
true
]
]
}
)
;
const
tabUrl1
=
"
about
:
blank
"
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl1
)
;
const
tabUrl2
=
"
about
:
blank
"
;
const
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl2
)
;
const
previewContainer
=
document
.
getElementById
(
"
tabbrowser
-
tab
-
preview
"
)
;
const
thumbnailUpdated
=
BrowserTestUtils
.
waitForEvent
(
previewContainer
"
previewThumbnailUpdated
"
)
;
await
openPreview
(
tab1
)
;
await
thumbnailUpdated
;
Assert
.
ok
(
previewContainer
.
renderRoot
.
querySelectorAll
(
"
img
canvas
"
)
.
length
"
Tab1
preview
contains
thumbnail
"
)
;
await
openPreview
(
tab2
)
;
Assert
.
equal
(
previewContainer
.
renderRoot
.
querySelectorAll
(
"
img
canvas
"
)
.
length
0
"
Tab2
(
selected
)
does
not
contain
thumbnail
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
(
)
=
>
{
const
tabUrl1
=
"
about
:
blank
"
;
const
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl1
)
;
const
tabUrl2
=
"
about
:
blank
"
;
const
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
tabUrl2
)
;
await
openPreview
(
tab1
)
;
const
previewHidden
=
BrowserTestUtils
.
waitForEvent
(
document
.
getElementById
(
"
tabbrowser
-
tab
-
preview
"
)
"
previewhidden
"
)
;
EventUtils
.
synthesizeWheel
(
tab1
0
0
{
deltaY
:
-
1
deltaMode
:
WheelEvent
.
DOM_DELTA_LINE
}
)
;
await
previewHidden
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
