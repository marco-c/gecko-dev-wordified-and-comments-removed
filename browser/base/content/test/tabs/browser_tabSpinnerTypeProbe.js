"
use
strict
"
;
const
CATEGORIES
=
[
"
seen
"
"
unseenOld
"
"
unseenNew
"
]
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
remote
.
force
-
paint
"
false
]
]
}
)
;
}
)
;
function
hangContentProcess
(
browser
aMs
)
{
return
ContentTask
.
spawn
(
browser
aMs
async
function
(
ms
)
{
let
then
=
Date
.
now
(
)
;
while
(
Date
.
now
(
)
-
then
<
ms
)
{
}
}
)
;
}
function
assertOnlyOneTypeSet
(
snapshot
category
)
{
let
categoryIndex
=
CATEGORIES
.
indexOf
(
category
)
;
Assert
.
equal
(
snapshot
.
counts
[
categoryIndex
]
1
Should
have
seen
the
{
category
}
count
increment
.
)
;
Assert
.
equal
(
snapshot
.
counts
.
reduce
(
(
a
b
)
=
>
a
+
b
)
1
"
Should
only
be
1
collected
value
.
"
)
;
}
Assert
.
ok
(
gMultiProcessBrowser
"
These
tests
only
makes
sense
in
an
e10s
-
enabled
window
.
"
)
;
let
gHistogram
=
Services
.
telemetry
.
getHistogramById
(
"
FX_TAB_SWITCH_SPINNER_TYPE
"
)
;
add_task
(
async
function
test_seen_spinner_type_probe
(
)
{
let
originalTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
http
:
/
/
example
.
com
"
}
async
function
(
browser
)
{
let
testTab
=
gBrowser
.
selectedTab
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
originalTab
)
;
gHistogram
.
clear
(
)
;
let
tabHangPromise
=
hangContentProcess
(
browser
1000
)
;
let
hangTabSwitch
=
BrowserTestUtils
.
switchTab
(
gBrowser
testTab
)
;
await
tabHangPromise
;
await
hangTabSwitch
;
let
snapshot
=
gHistogram
.
snapshot
(
)
;
assertOnlyOneTypeSet
(
snapshot
"
seen
"
)
;
gHistogram
.
clear
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_unseenOld_spinner_type_probe
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
http
:
/
/
example
.
com
"
}
async
function
(
browser
)
{
const
NEWNESS_THRESHOLD
=
gBrowser
.
_getSwitcher
(
)
.
NEWNESS_THRESHOLD
;
let
bgTab
=
gBrowser
.
addTab
(
"
about
:
blank
"
{
sameProcessAsFrameLoader
:
browser
.
frameLoader
inBackground
:
true
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
bgTab
.
linkedBrowser
)
;
bgTab
.
_creationTime
=
bgTab
.
_creationTime
-
NEWNESS_THRESHOLD
-
100
;
gHistogram
.
clear
(
)
;
let
tabHangPromise
=
hangContentProcess
(
browser
1000
)
;
let
hangTabSwitch
=
BrowserTestUtils
.
switchTab
(
gBrowser
bgTab
)
;
await
tabHangPromise
;
await
hangTabSwitch
;
let
snapshot
=
gHistogram
.
snapshot
(
)
;
assertOnlyOneTypeSet
(
snapshot
"
unseenOld
"
)
;
await
BrowserTestUtils
.
removeTab
(
bgTab
)
;
}
)
;
}
)
;
add_task
(
async
function
test_unseenNew_spinner_type_probe
(
)
{
await
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
http
:
/
/
example
.
com
"
}
async
function
(
browser
)
{
let
bgTab
=
gBrowser
.
addTab
(
"
about
:
blank
"
{
sameProcessAsFrameLoader
:
browser
.
frameLoader
inBackground
:
true
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
bgTab
.
linkedBrowser
)
;
bgTab
.
_creationTime
=
Date
.
now
(
)
+
(
60
*
1000
)
;
gHistogram
.
clear
(
)
;
let
tabHangPromise
=
hangContentProcess
(
browser
1000
)
;
let
hangTabSwitch
=
BrowserTestUtils
.
switchTab
(
gBrowser
bgTab
)
;
await
tabHangPromise
;
await
hangTabSwitch
;
let
snapshot
=
gHistogram
.
snapshot
(
)
;
assertOnlyOneTypeSet
(
snapshot
"
unseenNew
"
)
;
await
BrowserTestUtils
.
removeTab
(
bgTab
)
;
}
)
;
}
)
;
