function
makeTest
(
name
startURL
startProcessIsRemote
endURL
endProcessIsRemote
transitionTask
)
{
return
async
function
(
)
{
info
(
"
Running
test
"
+
name
+
"
"
+
transitionTask
.
name
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
if
(
!
gMultiProcessBrowser
)
{
startProcessIsRemote
=
false
;
endProcessIsRemote
=
false
;
}
info
(
"
Loading
initial
URL
"
)
;
BrowserTestUtils
.
loadURI
(
browser
startURL
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
startURL
)
;
is
(
browser
.
currentURI
.
spec
startURL
"
Shouldn
'
t
have
been
redirected
"
)
;
is
(
browser
.
isRemoteBrowser
startProcessIsRemote
"
Should
be
displayed
in
the
right
process
"
)
;
let
docLoadedPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
endURL
)
;
let
expectSyncChange
=
await
transitionTask
(
browser
endURL
)
;
if
(
expectSyncChange
)
{
is
(
browser
.
isRemoteBrowser
endProcessIsRemote
"
Should
have
switched
to
the
right
process
synchronously
"
)
;
}
await
docLoadedPromise
;
is
(
browser
.
currentURI
.
spec
endURL
"
Should
have
made
it
to
the
final
URL
"
)
;
is
(
browser
.
isRemoteBrowser
endProcessIsRemote
"
Should
be
displayed
in
the
right
process
"
)
;
}
;
}
const
PATH
=
(
getRootDirectory
(
gTestPath
)
+
"
test_process_flags_chrome
.
html
"
)
.
replace
(
"
chrome
:
/
/
mochitests
"
"
"
)
;
const
CHROME
=
"
chrome
:
/
/
mochitests
"
+
PATH
;
const
CANREMOTE
=
"
chrome
:
/
/
mochitests
-
any
"
+
PATH
;
const
MUSTREMOTE
=
"
chrome
:
/
/
mochitests
-
content
"
+
PATH
;
add_task
(
async
function
init
(
)
{
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
"
about
:
blank
"
{
forceNotRemote
:
true
}
)
;
}
)
;
registerCleanupFunction
(
(
)
=
>
{
gBrowser
.
removeCurrentTab
(
)
;
}
)
;
add_task
(
async
function
test_chrome
(
)
{
test_url_for_process_types
(
{
url
:
CHROME
chromeResult
:
true
webContentResult
:
false
privilegedAboutContentResult
:
false
privilegedMozillaContentResult
:
false
extensionProcessResult
:
false
}
)
;
}
)
;
add_task
(
async
function
test_any
(
)
{
test_url_for_process_types
(
{
url
:
CANREMOTE
chromeResult
:
true
webContentResult
:
true
privilegedAboutContentResult
:
false
privilegedMozillaContentResult
:
false
extensionProcessResult
:
false
}
)
;
}
)
;
add_task
(
async
function
test_remote
(
)
{
test_url_for_process_types
(
{
url
:
MUSTREMOTE
chromeResult
:
false
webContentResult
:
true
privilegedAboutContentResult
:
false
privilegedMozillaContentResult
:
false
extensionProcessResult
:
false
}
)
;
}
)
;
var
TESTS
=
[
[
"
chrome
-
>
chrome
"
CHROME
false
CHROME
false
]
[
"
chrome
-
>
canremote
"
CHROME
false
CANREMOTE
false
]
[
"
chrome
-
>
mustremote
"
CHROME
false
MUSTREMOTE
true
]
[
"
remote
-
>
chrome
"
MUSTREMOTE
true
CHROME
false
]
[
"
remote
-
>
canremote
"
MUSTREMOTE
true
CANREMOTE
true
]
[
"
remote
-
>
mustremote
"
MUSTREMOTE
true
MUSTREMOTE
true
]
]
;
var
TRANSITIONS
=
[
async
function
loadURI
(
browser
uri
)
{
info
(
"
Calling
browser
.
loadURI
"
)
;
await
BrowserTestUtils
.
loadURI
(
browser
uri
)
;
return
true
;
}
function
clickLink
(
browser
uri
)
{
info
(
"
Clicking
link
"
)
;
ContentTask
.
spawn
(
browser
uri
function
frame_script
(
frameUri
)
{
let
link
=
content
.
document
.
querySelector
(
"
a
[
href
=
'
"
+
frameUri
+
"
'
]
"
)
;
link
.
click
(
)
;
}
)
;
return
false
;
}
]
;
for
(
let
test
of
TESTS
)
{
for
(
let
transition
of
TRANSITIONS
)
{
add_task
(
makeTest
(
.
.
.
test
transition
)
)
;
}
}
