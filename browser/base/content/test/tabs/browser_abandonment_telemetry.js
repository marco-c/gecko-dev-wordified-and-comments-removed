"
use
strict
"
;
const
{
TabStateFlusher
}
=
Cu
.
import
(
"
resource
:
/
/
/
modules
/
sessionstore
/
TabStateFlusher
.
jsm
"
{
}
)
;
const
CATEGORIES
=
[
"
stop
"
"
back
"
"
forward
"
"
historyNavigation
"
"
reload
"
"
tabClosed
"
"
newURI
"
]
;
const
PAGE_2
=
"
data
:
text
/
html
<
html
>
Page
2
<
/
html
>
"
;
const
PROBE_TESTS
=
[
{
name
:
"
Stopping
the
browser
"
category
:
"
stop
"
*
prepare
(
browser
)
{
}
*
doAction
(
browser
)
{
document
.
getElementById
(
"
Browser
:
Stop
"
)
.
doCommand
(
)
;
}
}
{
name
:
"
Going
back
to
a
previous
page
"
category
:
"
back
"
*
prepare
(
browser
)
{
browser
.
loadURI
(
PAGE_2
)
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
}
*
doAction
(
browser
)
{
let
pageShow
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
)
;
document
.
getElementById
(
"
Browser
:
Back
"
)
.
doCommand
(
)
;
yield
pageShow
;
}
}
{
name
:
"
Going
forward
to
the
next
page
"
category
:
"
forward
"
*
prepare
(
browser
)
{
browser
.
loadURI
(
PAGE_2
)
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
pageShow
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
)
;
browser
.
goBack
(
)
;
yield
pageShow
;
}
*
doAction
(
browser
)
{
let
pageShow
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
)
;
document
.
getElementById
(
"
Browser
:
Forward
"
)
.
doCommand
(
)
;
yield
pageShow
;
}
}
{
name
:
"
Going
backward
to
a
previous
page
via
gotoIndex
"
category
:
"
historyNavigation
"
*
prepare
(
browser
)
{
browser
.
loadURI
(
PAGE_2
)
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
browser
.
loadURI
(
"
http
:
/
/
example
.
com
"
)
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
yield
TabStateFlusher
.
flush
(
browser
)
;
}
*
doAction
(
browser
)
{
let
pageShow
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
)
;
synthesizeHistoryNavigationToIndex
(
0
)
;
yield
pageShow
;
}
}
{
name
:
"
Going
forward
to
a
previous
page
via
gotoIndex
"
category
:
"
historyNavigation
"
*
prepare
(
browser
)
{
browser
.
loadURI
(
PAGE_2
)
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
browser
.
loadURI
(
"
http
:
/
/
example
.
com
"
)
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
let
pageShow
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
)
;
browser
.
gotoIndex
(
0
)
;
yield
pageShow
;
yield
TabStateFlusher
.
flush
(
browser
)
;
}
*
doAction
(
browser
)
{
let
pageShow
=
BrowserTestUtils
.
waitForContentEvent
(
browser
"
pageshow
"
)
;
synthesizeHistoryNavigationToIndex
(
2
)
;
yield
pageShow
;
}
}
{
name
:
"
Reloading
the
browser
"
category
:
"
reload
"
*
prepare
(
browser
)
{
}
*
doAction
(
browser
)
{
document
.
getElementById
(
"
Browser
:
Reload
"
)
.
doCommand
(
)
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
}
}
{
name
:
"
Browsing
to
a
new
URL
"
category
:
"
newURI
"
*
prepare
(
browser
)
{
}
*
doAction
(
browser
)
{
openUILinkIn
(
PAGE_2
"
current
"
)
;
yield
BrowserTestUtils
.
browserLoaded
(
browser
)
;
}
}
]
function
assertOnlyOneTypeSet
(
snapshot
category
)
{
let
categoryIndex
=
CATEGORIES
.
indexOf
(
category
)
;
Assert
.
equal
(
snapshot
.
counts
[
categoryIndex
]
1
Should
have
seen
the
{
category
}
count
increment
.
)
;
Assert
.
equal
(
snapshot
.
counts
.
reduce
(
(
a
b
)
=
>
a
+
b
)
1
"
Should
only
be
1
collected
value
.
"
)
;
}
function
synthesizeHistoryNavigationToIndex
(
index
)
{
let
popup
=
document
.
getElementById
(
"
backForwardMenu
"
)
;
FillHistoryMenu
(
popup
)
;
Assert
.
ok
(
popup
.
childElementCount
>
0
"
Should
have
some
items
in
the
back
/
forward
menu
"
)
;
let
menuitem
=
popup
.
querySelector
(
menuitem
[
index
=
"
{
index
}
"
]
)
;
Assert
.
ok
(
menuitem
Should
find
a
menuitem
with
index
{
index
}
)
;
let
cmdEvent
=
new
CustomEvent
(
"
command
"
{
bubbles
:
true
cancelable
:
true
}
)
;
menuitem
.
dispatchEvent
(
cmdEvent
)
;
}
add_task
(
function
*
test_probes
(
)
{
let
oldCanRecord
=
Services
.
telemetry
.
canRecordExtended
;
Services
.
telemetry
.
canRecordExtended
=
true
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
telemetry
.
canRecordExtended
=
oldCanRecord
;
}
)
;
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
"
BUSY_TAB_ABANDONED
"
)
;
for
(
let
probeTest
of
PROBE_TESTS
)
{
yield
BrowserTestUtils
.
withNewTab
(
{
gBrowser
url
:
"
http
:
/
/
example
.
com
"
}
function
*
(
browser
)
{
let
tab
=
gBrowser
.
getTabForBrowser
(
browser
)
;
info
(
Test
:
"
{
probeTest
.
name
}
"
)
;
yield
*
probeTest
.
prepare
(
browser
)
;
tab
.
setAttribute
(
"
busy
"
true
)
;
histogram
.
clear
(
)
;
yield
*
probeTest
.
doAction
(
browser
)
;
let
snapshot
=
histogram
.
snapshot
(
)
;
assertOnlyOneTypeSet
(
snapshot
probeTest
.
category
)
;
}
)
;
}
histogram
.
clear
(
)
;
let
newTab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
newTab
.
setAttribute
(
"
busy
"
true
)
;
yield
BrowserTestUtils
.
removeTab
(
newTab
)
;
let
snapshot
=
histogram
.
snapshot
(
)
;
assertOnlyOneTypeSet
(
snapshot
"
tabClosed
"
)
;
}
)
;
