const
TEST_HIGH1
=
"
https
:
/
/
example
.
org
/
"
;
const
TEST_HIGH2
=
"
https
:
/
/
test1
.
example
.
org
/
"
;
const
TEST_LOW1
=
"
http
:
/
/
example
.
org
/
"
;
const
TEST_LOW2
=
"
https
:
/
/
example
.
com
/
"
;
add_setup
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
tabs
.
remote
.
separatePrivilegedMozillaWebContentProcess
"
true
]
[
"
browser
.
tabs
.
remote
.
separatedMozillaDomains
"
"
example
.
org
"
]
[
"
dom
.
ipc
.
processCount
.
privilegedmozilla
"
1
]
]
}
)
;
}
)
;
add_task
(
async
function
webpages_in_privileged_content_process
(
)
{
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_HIGH1
async
function
(
browser1
)
{
checkBrowserRemoteType
(
browser1
E10SUtils
.
PRIVILEGEDMOZILLA_REMOTE_TYPE
)
;
let
privilegedPid
=
browser1
.
frameLoader
.
remoteTab
.
osPid
;
for
(
let
url
of
[
TEST_HIGH1
{
TEST_HIGH1
}
#
foo
{
TEST_HIGH1
}
?
q
=
foo
TEST_HIGH2
{
TEST_HIGH2
}
#
foo
{
TEST_HIGH2
}
?
q
=
foo
]
)
{
await
BrowserTestUtils
.
withNewTab
(
url
async
function
(
browser2
)
{
is
(
browser2
.
frameLoader
.
remoteTab
.
osPid
privilegedPid
"
Check
that
privileged
pages
are
in
the
same
privileged
mozilla
content
process
.
"
)
;
}
)
;
}
}
)
;
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
}
)
;
add_task
(
async
function
process_switching_through_loading_in_the_same_tab
(
)
{
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_LOW1
async
function
(
browser
)
{
checkBrowserRemoteType
(
browser
E10SUtils
.
WEB_REMOTE_TYPE
)
;
for
(
let
[
url
remoteType
]
of
[
[
TEST_HIGH1
E10SUtils
.
PRIVILEGEDMOZILLA_REMOTE_TYPE
]
[
TEST_LOW1
E10SUtils
.
WEB_REMOTE_TYPE
]
[
TEST_HIGH1
E10SUtils
.
PRIVILEGEDMOZILLA_REMOTE_TYPE
]
[
TEST_LOW2
E10SUtils
.
WEB_REMOTE_TYPE
]
[
TEST_HIGH1
E10SUtils
.
PRIVILEGEDMOZILLA_REMOTE_TYPE
]
[
TEST_LOW1
E10SUtils
.
WEB_REMOTE_TYPE
]
[
TEST_LOW2
E10SUtils
.
WEB_REMOTE_TYPE
]
[
{
TEST_HIGH1
}
#
foo
E10SUtils
.
PRIVILEGEDMOZILLA_REMOTE_TYPE
]
[
TEST_LOW1
E10SUtils
.
WEB_REMOTE_TYPE
]
[
{
TEST_HIGH1
}
#
bar
E10SUtils
.
PRIVILEGEDMOZILLA_REMOTE_TYPE
]
[
TEST_LOW2
E10SUtils
.
WEB_REMOTE_TYPE
]
[
{
TEST_HIGH1
}
#
baz
E10SUtils
.
PRIVILEGEDMOZILLA_REMOTE_TYPE
]
[
TEST_LOW1
E10SUtils
.
WEB_REMOTE_TYPE
]
[
{
TEST_HIGH1
}
?
q
=
foo
E10SUtils
.
PRIVILEGEDMOZILLA_REMOTE_TYPE
]
[
TEST_LOW2
E10SUtils
.
WEB_REMOTE_TYPE
]
[
{
TEST_HIGH1
}
?
q
=
bar
E10SUtils
.
PRIVILEGEDMOZILLA_REMOTE_TYPE
]
[
TEST_LOW1
E10SUtils
.
WEB_REMOTE_TYPE
]
[
{
TEST_HIGH1
}
?
q
=
baz
E10SUtils
.
PRIVILEGEDMOZILLA_REMOTE_TYPE
]
[
TEST_LOW2
E10SUtils
.
WEB_REMOTE_TYPE
]
]
)
{
BrowserTestUtils
.
loadURIString
(
browser
url
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
url
)
;
checkBrowserRemoteType
(
browser
remoteType
)
;
}
}
)
;
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
}
)
;
add_task
(
async
function
process_switching_through_navigation_features
(
)
{
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
await
BrowserTestUtils
.
withNewTab
(
TEST_HIGH1
async
function
(
browser
)
{
checkBrowserRemoteType
(
browser
E10SUtils
.
PRIVILEGEDMOZILLA_REMOTE_TYPE
)
;
let
privilegedPid
=
browser
.
frameLoader
.
remoteTab
.
osPid
;
let
promiseTabOpened
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
TEST_HIGH1
true
)
;
await
SpecialPowers
.
spawn
(
browser
[
TEST_HIGH1
]
uri
=
>
{
content
.
open
(
uri
"
_blank
"
)
;
}
)
;
let
newTab
=
await
promiseTabOpened
;
registerCleanupFunction
(
async
function
(
)
{
BrowserTestUtils
.
removeTab
(
newTab
)
;
}
)
;
browser
=
newTab
.
linkedBrowser
;
is
(
browser
.
frameLoader
.
remoteTab
.
osPid
privilegedPid
"
Check
that
new
tab
opened
from
privileged
page
is
loaded
in
privileged
mozilla
content
process
.
"
)
;
BrowserReload
(
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_HIGH1
)
;
is
(
browser
.
frameLoader
.
remoteTab
.
osPid
privilegedPid
"
Check
that
privileged
page
is
still
in
privileged
mozilla
content
process
after
reload
.
"
)
;
BrowserTestUtils
.
loadURIString
(
browser
TEST_LOW1
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_LOW1
)
;
checkBrowserRemoteType
(
browser
E10SUtils
.
WEB_REMOTE_TYPE
)
;
let
promiseLocation
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
TEST_HIGH1
)
;
browser
.
goBack
(
)
;
await
promiseLocation
;
is
(
browser
.
frameLoader
.
remoteTab
.
osPid
privilegedPid
"
Check
that
privileged
page
is
still
in
privileged
mozilla
content
process
after
history
goBack
.
"
)
;
promiseLocation
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
TEST_LOW1
)
;
browser
.
goForward
(
)
;
await
promiseLocation
;
checkBrowserRemoteType
(
browser
E10SUtils
.
WEB_REMOTE_TYPE
"
Check
that
tab
runs
in
the
web
content
process
after
using
history
goForward
.
"
)
;
promiseLocation
=
BrowserTestUtils
.
waitForLocationChange
(
gBrowser
TEST_HIGH1
)
;
browser
.
gotoIndex
(
0
)
;
await
promiseLocation
;
is
(
browser
.
frameLoader
.
remoteTab
.
osPid
privilegedPid
"
Check
that
privileged
page
is
in
privileged
mozilla
content
process
after
history
gotoIndex
.
"
)
;
BrowserTestUtils
.
loadURIString
(
browser
TEST_LOW2
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_LOW2
)
;
checkBrowserRemoteType
(
browser
E10SUtils
.
WEB_REMOTE_TYPE
)
;
await
SpecialPowers
.
spawn
(
browser
[
TEST_HIGH1
]
uri
=
>
{
content
.
location
=
uri
;
}
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_HIGH1
)
;
is
(
browser
.
frameLoader
.
remoteTab
.
osPid
privilegedPid
"
Check
that
privileged
page
is
in
privileged
mozilla
content
process
after
location
change
.
"
)
;
}
)
;
Services
.
ppmm
.
releaseCachedProcesses
(
)
;
}
)
;
