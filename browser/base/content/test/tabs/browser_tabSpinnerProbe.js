"
use
strict
"
;
let
gMinHangTime
=
500
;
let
gMaxHangTime
=
5
*
1000
;
function
makeDataURI
(
aHangMs
=
0
)
{
return
data
:
text
/
html
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
/
>
<
title
>
Tab
Spinner
Test
<
/
title
>
<
script
>
function
hang
(
)
{
let
hangDuration
=
{
aHangMs
}
;
if
(
hangDuration
>
0
)
{
let
startTime
=
window
.
performance
.
now
(
)
;
while
(
window
.
performance
.
now
(
)
-
startTime
<
hangDuration
)
{
}
}
}
<
/
script
>
<
/
head
>
<
body
>
<
h1
id
=
'
header
'
>
Tab
Spinner
Test
<
/
h1
>
<
/
body
>
<
/
html
>
;
}
function
sum
(
aArray
)
{
return
aArray
.
reduce
(
function
(
previousValue
currentValue
)
{
return
previousValue
+
currentValue
;
}
)
;
}
async
function
testProbe
(
aProbe
)
{
info
(
Testing
probe
:
{
aProbe
}
)
;
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
aProbe
)
;
let
buckets
=
histogram
.
snapshot
(
)
.
ranges
.
filter
(
function
(
value
)
{
return
(
value
>
gMinHangTime
&
&
value
<
gMaxHangTime
)
;
}
)
;
let
delayTime
=
buckets
[
0
]
;
delayTime
+
=
gBrowser
.
selectedTab
.
linkedBrowser
.
getTabBrowser
(
)
.
_getSwitcher
(
)
.
TAB_SWITCH_TIMEOUT
;
let
dataURI1
=
makeDataURI
(
delayTime
)
;
let
dataURI2
=
makeDataURI
(
)
;
let
tab1
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
dataURI1
)
;
histogram
.
clear
(
)
;
ContentTask
.
spawn
(
tab1
.
linkedBrowser
null
async
function
(
)
{
content
.
wrappedJSObject
.
hang
(
)
;
}
)
;
let
tab2
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
dataURI2
)
;
let
snapshot
=
histogram
.
snapshot
(
)
;
await
BrowserTestUtils
.
removeTab
(
tab2
)
;
await
BrowserTestUtils
.
removeTab
(
tab1
)
;
ok
(
sum
(
snapshot
.
counts
)
>
0
Spinner
probe
should
now
have
a
value
in
some
bucket
)
;
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
ipc
.
processCount
"
1
]
[
"
browser
.
tabs
.
remote
.
force
-
paint
"
false
]
]
}
)
;
}
)
;
add_task
(
testProbe
.
bind
(
null
"
FX_TAB_SWITCH_SPINNER_VISIBLE_MS
"
)
)
;
add_task
(
testProbe
.
bind
(
null
"
FX_TAB_SWITCH_SPINNER_VISIBLE_LONG_MS
"
)
)
;
