"
use
strict
"
;
add_task
(
async
(
)
=
>
{
const
newBrowser
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
}
)
;
let
event
=
{
direction
:
SimpleGestureEvent
.
DIRECTION_LEFT
}
;
ok
(
!
newBrowser
.
gGestureSupport
.
_shouldDoSwipeGesture
(
event
)
)
;
event
=
{
direction
:
SimpleGestureEvent
.
DIRECTION_RIGHT
}
;
ok
(
!
newBrowser
.
gGestureSupport
.
_shouldDoSwipeGesture
(
event
)
)
;
await
BrowserTestUtils
.
closeWindow
(
newBrowser
)
;
}
)
;
add_task
(
async
(
)
=
>
{
function
createSimpleGestureEvent
(
type
direction
)
{
let
event
=
document
.
createEvent
(
"
SimpleGestureEvent
"
)
;
event
.
initSimpleGestureEvent
(
type
false
false
window
0
0
0
0
0
false
false
false
false
0
null
0
direction
)
;
return
event
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
swipeAnimationEnabled
"
false
]
]
}
)
;
const
newWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
}
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
(
newWindow
.
gHistorySwipeAnimation
.
isLTR
!
=
Services
.
locale
.
isAppLocaleRTL
)
;
}
)
;
BrowserTestUtils
.
loadURI
(
newWindow
.
gBrowser
.
selectedBrowser
"
about
:
mozilla
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
newWindow
.
gBrowser
.
selectedBrowser
false
"
about
:
mozilla
"
)
;
BrowserTestUtils
.
loadURI
(
newWindow
.
gBrowser
.
selectedBrowser
"
about
:
about
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
newWindow
.
gBrowser
.
selectedBrowser
false
"
about
:
about
"
)
;
let
event
=
createSimpleGestureEvent
(
"
SwipeGestureMayStart
"
SimpleGestureEvent
.
DIRECTION_LEFT
)
;
newWindow
.
gGestureSupport
.
_shouldDoSwipeGesture
(
event
)
;
is
(
event
.
allowedDirections
SimpleGestureEvent
.
DIRECTION_LEFT
"
Allows
only
swiping
to
left
i
.
e
.
backward
"
)
;
event
=
createSimpleGestureEvent
(
"
SwipeGestureMayStart
"
SimpleGestureEvent
.
DIRECTION_RIGHT
)
;
newWindow
.
gGestureSupport
.
_shouldDoSwipeGesture
(
event
)
;
is
(
event
.
allowedDirections
SimpleGestureEvent
.
DIRECTION_LEFT
"
Allows
only
swiping
to
left
i
.
e
.
backward
"
)
;
await
BrowserTestUtils
.
closeWindow
(
newWindow
)
;
}
)
;
