"
use
strict
"
;
const
kDevPanelID
=
"
PanelUI
-
developer
-
tools
"
;
function
waitForLocationChange
(
)
{
let
promise
=
new
Promise
(
resolve
=
>
{
let
wpl
=
{
onLocationChange
(
aWebProgress
aRequest
aLocation
)
{
gBrowser
.
removeProgressListener
(
wpl
)
;
resolve
(
)
;
}
}
;
gBrowser
.
addProgressListener
(
wpl
)
;
}
)
;
return
promise
;
}
add_task
(
async
function
setPref
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
toolbars
.
keyboard_navigation
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
testAppMenuButtonPress
(
)
{
let
button
=
document
.
getElementById
(
"
PanelUI
-
menu
-
button
"
)
;
forceFocus
(
button
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
window
.
PanelUI
.
mainView
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
focused
;
ok
(
true
"
Focus
inside
app
menu
after
toolbar
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
window
.
PanelUI
.
panel
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
hidden
;
}
)
;
add_task
(
async
function
testAppMenuButtonWrongKey
(
)
{
let
button
=
document
.
getElementById
(
"
PanelUI
-
menu
-
button
"
)
;
forceFocus
(
button
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
await
TestUtils
.
waitForTick
(
)
;
is
(
window
.
PanelUI
.
panel
.
state
"
closed
"
"
App
menu
is
closed
after
tab
"
)
;
}
)
;
add_task
(
async
function
testLibraryButtonPress
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
library
-
button
"
"
nav
-
bar
"
)
;
let
button
=
document
.
getElementById
(
"
library
-
button
"
)
;
forceFocus
(
button
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
let
view
=
document
.
getElementById
(
"
appMenu
-
libraryView
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
view
"
focus
"
true
)
;
await
focused
;
ok
(
true
"
Focus
inside
Library
menu
after
toolbar
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
document
"
popuphidden
"
true
)
;
view
.
closest
(
"
panel
"
)
.
hidePopup
(
)
;
await
hidden
;
CustomizableUI
.
removeWidgetFromArea
(
"
library
-
button
"
)
;
}
)
;
add_task
(
async
function
testDeveloperButtonPress
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
developer
-
button
"
CustomizableUI
.
AREA_NAVBAR
)
;
let
button
=
document
.
getElementById
(
"
developer
-
button
"
)
;
forceFocus
(
button
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
let
view
=
document
.
getElementById
(
kDevPanelID
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
view
"
focus
"
true
)
;
await
focused
;
ok
(
true
"
Focus
inside
Developer
menu
after
toolbar
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
document
"
popuphidden
"
true
)
;
view
.
closest
(
"
panel
"
)
.
hidePopup
(
)
;
await
hidden
;
CustomizableUI
.
reset
(
)
;
}
)
;
add_task
(
async
function
testDeveloperButtonWrongKey
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
developer
-
button
"
CustomizableUI
.
AREA_NAVBAR
)
;
let
button
=
document
.
getElementById
(
"
developer
-
button
"
)
;
forceFocus
(
button
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
await
TestUtils
.
waitForTick
(
)
;
let
panel
=
document
.
getElementById
(
kDevPanelID
)
.
closest
(
"
panel
"
)
;
ok
(
!
panel
|
|
panel
.
state
=
=
"
closed
"
"
Developer
menu
not
open
after
tab
"
)
;
CustomizableUI
.
reset
(
)
;
}
)
;
add_task
(
async
function
testPageActionsButtonPress
(
)
{
BrowserPageActions
.
mainButtonNode
.
style
.
visibility
=
"
visible
"
;
registerCleanupFunction
(
(
)
=
>
{
BrowserPageActions
.
mainButtonNode
.
style
.
removeProperty
(
"
visibility
"
)
;
}
)
;
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
)
{
let
button
=
document
.
getElementById
(
"
pageActionButton
"
)
;
forceFocus
(
button
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
let
view
=
document
.
getElementById
(
"
pageActionPanelMainView
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
view
"
focus
"
true
)
;
await
focused
;
ok
(
true
"
Focus
inside
Page
Actions
menu
after
toolbar
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
document
"
popuphidden
"
true
)
;
view
.
closest
(
"
panel
"
)
.
hidePopup
(
)
;
await
hidden
;
}
)
;
}
)
;
add_task
(
async
function
testBackForwardButtonPress
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
/
1
"
async
function
(
aBrowser
)
{
BrowserTestUtils
.
loadURI
(
aBrowser
"
https
:
/
/
example
.
com
/
2
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
aBrowser
)
;
let
backButton
=
document
.
getElementById
(
"
back
-
button
"
)
;
forceFocus
(
backButton
)
;
let
onLocationChange
=
waitForLocationChange
(
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
onLocationChange
;
ok
(
true
"
Location
changed
after
back
button
pressed
"
)
;
let
forwardButton
=
document
.
getElementById
(
"
forward
-
button
"
)
;
forceFocus
(
forwardButton
)
;
onLocationChange
=
waitForLocationChange
(
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
onLocationChange
;
ok
(
true
"
Location
changed
after
forward
button
pressed
"
)
;
}
)
;
}
)
;
add_task
(
async
function
testReloadButtonPress
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
/
1
"
async
function
(
aBrowser
)
{
let
button
=
document
.
getElementById
(
"
reload
-
button
"
)
;
info
(
"
Waiting
for
button
to
be
enabled
.
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
button
.
disabled
)
;
let
loaded
=
BrowserTestUtils
.
browserLoaded
(
aBrowser
)
;
info
(
"
Focusing
button
"
)
;
forceFocus
(
button
)
;
info
(
"
Pressing
space
on
the
button
"
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
info
(
"
Waiting
for
load
.
"
)
;
await
loaded
;
ok
(
true
"
Page
loaded
after
Reload
button
pressed
"
)
;
}
)
;
}
)
;
add_task
(
async
function
testSidebarsButtonPress
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
sidebar
-
button
"
"
nav
-
bar
"
)
;
let
button
=
document
.
getElementById
(
"
sidebar
-
button
"
)
;
ok
(
!
button
.
checked
"
Sidebars
button
not
checked
at
start
of
test
"
)
;
let
sidebarBox
=
document
.
getElementById
(
"
sidebar
-
box
"
)
;
ok
(
sidebarBox
.
hidden
"
Sidebar
hidden
at
start
of
test
"
)
;
forceFocus
(
button
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
button
.
checked
)
;
ok
(
true
"
Sidebars
button
checked
after
press
"
)
;
ok
(
!
sidebarBox
.
hidden
"
Sidebar
visible
after
press
"
)
;
let
sidebarWin
=
document
.
getElementById
(
"
sidebar
"
)
.
contentWindow
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
sidebarWin
.
PlacesUIUtils
)
;
forceFocus
(
button
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
button
.
checked
)
;
ok
(
true
"
Sidebars
button
not
checked
after
press
"
)
;
ok
(
sidebarBox
.
hidden
"
Sidebar
hidden
after
press
"
)
;
CustomizableUI
.
removeWidgetFromArea
(
"
sidebar
-
button
"
)
;
}
)
;
add_task
(
async
function
testBookmarkButtonPress
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
aBrowser
)
{
let
button
=
document
.
getElementById
(
"
star
-
button
-
box
"
)
;
forceFocus
(
button
)
;
StarUI
.
_createPanelIfNeeded
(
)
;
let
panel
=
document
.
getElementById
(
"
editBookmarkPanel
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
panel
"
focus
"
true
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
BookmarkingUI
.
status
!
=
BookmarkingUI
.
STATUS_UPDATING
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
focused
;
ok
(
true
"
Focus
inside
edit
bookmark
panel
after
Bookmark
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
panel
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
hidden
;
}
)
;
}
)
;
add_task
(
async
function
testBookmarksmenuButtonPress
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
bookmarks
-
menu
-
button
"
CustomizableUI
.
AREA_NAVBAR
)
;
let
button
=
document
.
getElementById
(
"
bookmarks
-
menu
-
button
"
)
;
forceFocus
(
button
)
;
let
menu
=
document
.
getElementById
(
"
BMB_bookmarksPopup
"
)
;
let
shown
=
BrowserTestUtils
.
waitForEvent
(
menu
"
popupshown
"
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
shown
;
ok
(
true
"
Bookmarks
Menu
shown
after
toolbar
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
menu
"
popuphidden
"
)
;
menu
.
hidePopup
(
)
;
await
hidden
;
CustomizableUI
.
reset
(
)
;
}
)
;
add_task
(
async
function
testOverflowButtonPress
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
developer
-
button
"
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
)
;
let
button
=
document
.
getElementById
(
"
nav
-
bar
-
overflow
-
button
"
)
;
forceFocus
(
button
)
;
let
view
=
document
.
getElementById
(
"
widget
-
overflow
-
mainView
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
view
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
focused
;
ok
(
true
"
Focus
inside
overflow
menu
after
toolbar
button
pressed
"
)
;
let
panel
=
document
.
getElementById
(
"
widget
-
overflow
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
panel
"
popuphidden
"
)
;
panel
.
hidePopup
(
)
;
await
hidden
;
CustomizableUI
.
reset
(
)
;
}
)
;
add_task
(
async
function
testDownloadsButtonPress
(
)
{
DownloadsButton
.
unhide
(
)
;
let
button
=
document
.
getElementById
(
"
downloads
-
button
"
)
;
forceFocus
(
button
)
;
let
panel
=
document
.
getElementById
(
"
downloadsPanel
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
panel
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
focused
;
ok
(
true
"
Focus
inside
Downloads
panel
after
toolbar
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
panel
"
popuphidden
"
)
;
panel
.
hidePopup
(
)
;
await
hidden
;
DownloadsButton
.
hide
(
)
;
}
)
;
add_task
(
async
function
testPocketButtonPress
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
aBrowser
)
{
let
button
=
document
.
getElementById
(
"
save
-
to
-
pocket
-
button
"
)
;
forceFocus
(
button
)
;
let
showing
=
BrowserTestUtils
.
waitForEvent
(
document
"
popupshowing
"
true
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
let
event
=
await
showing
;
let
panel
=
event
.
target
;
is
(
panel
.
id
"
customizationui
-
widget
-
panel
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
panel
"
focus
"
true
)
;
await
focused
;
is
(
document
.
activeElement
.
tagName
"
browser
"
"
Focus
inside
Pocket
panel
after
Bookmark
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
panel
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
hidden
;
}
)
;
}
)
;
