"
use
strict
"
;
function
forceFocus
(
aElem
)
{
aElem
.
setAttribute
(
"
tabindex
"
"
-
1
"
)
;
aElem
.
focus
(
)
;
aElem
.
removeAttribute
(
"
tabindex
"
)
;
}
add_task
(
async
function
testAppMenuButtonPress
(
)
{
let
button
=
document
.
getElementById
(
"
PanelUI
-
menu
-
button
"
)
;
forceFocus
(
button
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
window
.
PanelUI
.
mainView
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
focused
;
ok
(
true
"
Focus
inside
app
menu
after
toolbar
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
window
.
PanelUI
.
panel
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
hidden
;
}
)
;
add_task
(
async
function
testAppMenuButtonWrongKey
(
)
{
let
button
=
document
.
getElementById
(
"
PanelUI
-
menu
-
button
"
)
;
forceFocus
(
button
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
await
TestUtils
.
waitForTick
(
)
;
is
(
window
.
PanelUI
.
panel
.
state
"
closed
"
"
App
menu
is
closed
after
tab
"
)
;
}
)
;
add_task
(
async
function
testLibraryButtonPress
(
)
{
let
button
=
document
.
getElementById
(
"
library
-
button
"
)
;
forceFocus
(
button
)
;
let
view
=
document
.
getElementById
(
"
appMenu
-
libraryView
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
view
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
focused
;
ok
(
true
"
Focus
inside
Library
menu
after
toolbar
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
document
"
popuphidden
"
true
)
;
view
.
closest
(
"
panel
"
)
.
hidePopup
(
)
;
await
hidden
;
}
)
;
add_task
(
async
function
testDeveloperButtonPress
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
developer
-
button
"
CustomizableUI
.
AREA_NAVBAR
)
;
let
button
=
document
.
getElementById
(
"
developer
-
button
"
)
;
forceFocus
(
button
)
;
let
view
=
document
.
getElementById
(
"
PanelUI
-
developer
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
view
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
focused
;
ok
(
true
"
Focus
inside
Developer
menu
after
toolbar
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
document
"
popuphidden
"
true
)
;
view
.
closest
(
"
panel
"
)
.
hidePopup
(
)
;
await
hidden
;
CustomizableUI
.
reset
(
)
;
}
)
;
add_task
(
async
function
testDeveloperButtonWrongKey
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
developer
-
button
"
CustomizableUI
.
AREA_NAVBAR
)
;
let
button
=
document
.
getElementById
(
"
developer
-
button
"
)
;
forceFocus
(
button
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Tab
"
)
;
await
TestUtils
.
waitForTick
(
)
;
let
panel
=
document
.
getElementById
(
"
PanelUI
-
developer
"
)
.
closest
(
"
panel
"
)
;
ok
(
!
panel
|
|
panel
.
state
=
=
"
closed
"
"
Developer
menu
not
open
after
tab
"
)
;
CustomizableUI
.
reset
(
)
;
}
)
;
add_task
(
async
function
testPageActionsButtonPress
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
)
{
let
button
=
document
.
getElementById
(
"
pageActionButton
"
)
;
forceFocus
(
button
)
;
let
view
=
document
.
getElementById
(
"
pageActionPanelMainView
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
view
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
focused
;
ok
(
true
"
Focus
inside
Page
Actions
menu
after
toolbar
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
document
"
popuphidden
"
true
)
;
view
.
closest
(
"
panel
"
)
.
hidePopup
(
)
;
await
hidden
;
}
)
;
}
)
;
add_task
(
async
function
testSendTabToDeviceButtonPress
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
)
{
PageActions
.
actionForID
(
"
sendToDevice
"
)
.
pinnedToUrlbar
=
true
;
let
button
=
document
.
getElementById
(
"
pageAction
-
urlbar
-
sendToDevice
"
)
;
forceFocus
(
button
)
;
let
mainPopupSet
=
document
.
getElementById
(
"
mainPopupSet
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
mainPopupSet
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
focused
;
let
view
=
document
.
getElementById
(
"
pageAction
-
urlbar
-
sendToDevice
-
subview
"
)
;
ok
(
view
.
contains
(
document
.
activeElement
)
"
Focus
inside
Page
Actions
menu
after
toolbar
button
pressed
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
document
"
popuphidden
"
true
)
;
view
.
closest
(
"
panel
"
)
.
hidePopup
(
)
;
await
hidden
;
PageActions
.
actionForID
(
"
sendToDevice
"
)
.
pinnedToUrlbar
=
false
;
}
)
;
}
)
;
