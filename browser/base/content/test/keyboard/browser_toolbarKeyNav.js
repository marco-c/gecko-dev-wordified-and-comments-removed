"
use
strict
"
;
const
PERMISSIONS_PAGE
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
permissions
/
permissions
.
html
"
;
const
afterUrlBarButton
=
CustomizableUI
.
protonToolbarEnabled
?
"
PanelUI
-
menu
-
button
"
:
"
library
-
button
"
;
function
resetToolbarWithoutDevEditionButtons
(
)
{
CustomizableUI
.
reset
(
)
;
CustomizableUI
.
removeWidgetFromArea
(
"
developer
-
button
"
)
;
}
function
maybeAddHomeBesideReload
(
)
{
if
(
CustomizableUI
.
protonToolbarEnabled
)
{
CustomizableUI
.
addWidgetToArea
(
"
home
-
button
"
"
nav
-
bar
"
CustomizableUI
.
getPlacementOfWidget
(
"
stop
-
reload
-
button
"
)
.
position
+
1
)
;
}
}
function
maybeRemoveHomeButton
(
)
{
if
(
CustomizableUI
.
protonToolbarEnabled
)
{
CustomizableUI
.
removeWidgetFromArea
(
"
home
-
button
"
)
;
}
}
function
maybeAddOldMenuSideButtons
(
)
{
if
(
CustomizableUI
.
protonToolbarEnabled
)
{
document
.
documentElement
.
setAttribute
(
"
oldfxastatus
"
document
.
documentElement
.
getAttribute
(
"
fxastatus
"
)
)
;
document
.
documentElement
.
setAttribute
(
"
fxastatus
"
"
signed_in
"
)
;
CustomizableUI
.
addWidgetToArea
(
"
library
-
button
"
"
nav
-
bar
"
CustomizableUI
.
getWidgetIdsInArea
(
"
nav
-
bar
"
)
.
length
-
1
)
;
CustomizableUI
.
addWidgetToArea
(
"
sidebar
-
button
"
"
nav
-
bar
"
CustomizableUI
.
getWidgetIdsInArea
(
"
nav
-
bar
"
)
.
length
-
1
)
;
}
}
function
maybeRemoveOldMenuSideButtons
(
)
{
if
(
CustomizableUI
.
protonToolbarEnabled
)
{
CustomizableUI
.
removeWidgetFromArea
(
"
library
-
button
"
)
;
CustomizableUI
.
removeWidgetFromArea
(
"
sidebar
-
button
"
)
;
document
.
documentElement
.
setAttribute
(
"
fxastatus
"
document
.
documentElement
.
getAttribute
(
"
oldfxastatus
"
)
)
;
document
.
documentElement
.
removeAttribute
(
"
oldfxastatus
"
)
;
}
}
function
startFromUrlBar
(
aWindow
=
window
)
{
aWindow
.
gURLBar
.
focus
(
)
;
is
(
aWindow
.
document
.
activeElement
aWindow
.
gURLBar
.
inputField
"
URL
bar
focused
for
start
of
test
"
)
;
}
async
function
waitUntilReloadEnabled
(
)
{
let
button
=
document
.
getElementById
(
"
reload
-
button
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
!
button
.
disabled
)
;
}
function
withNewBlankTab
(
taskFn
)
{
return
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
function
(
)
{
document
.
getElementById
(
"
Browser
:
Reload
"
)
.
setAttribute
(
"
disabled
"
"
true
"
)
;
await
taskFn
(
)
;
}
)
;
}
const
BOOKMARKS_COUNT
=
100
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
toolbars
.
keyboard_navigation
"
true
]
[
"
accessibility
.
tabfocus
"
7
]
]
}
)
;
resetToolbarWithoutDevEditionButtons
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
let
bookmarks
=
new
Array
(
BOOKMARKS_COUNT
)
;
for
(
let
i
=
0
;
i
<
BOOKMARKS_COUNT
;
+
+
i
)
{
bookmarks
[
i
]
=
{
url
:
http
:
/
/
test
.
places
.
{
i
}
/
}
;
}
await
PlacesUtils
.
bookmarks
.
insertTree
(
{
guid
:
PlacesUtils
.
bookmarks
.
toolbarGuid
children
:
bookmarks
}
)
;
}
)
;
add_task
(
async
function
testTabStopsNoPageWithHomeButton
(
)
{
maybeAddHomeBesideReload
(
)
;
await
withNewBlankTab
(
async
function
(
)
{
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
home
-
button
"
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
tabbrowser
-
tabs
"
true
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
home
-
button
"
)
;
await
expectFocusAfterKey
(
"
Tab
"
gURLBar
.
inputField
)
;
await
expectFocusAfterKey
(
"
Tab
"
afterUrlBarButton
)
;
await
expectFocusAfterKey
(
"
Tab
"
gBrowser
.
selectedBrowser
)
;
}
)
;
maybeRemoveHomeButton
(
)
;
}
)
;
add_task
(
async
function
testTabStopsPageLoaded
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
)
{
await
waitUntilReloadEnabled
(
)
;
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
tracking
-
protection
-
icon
-
container
"
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
reload
-
button
"
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
tabbrowser
-
tabs
"
true
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
reload
-
button
"
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
tracking
-
protection
-
icon
-
container
"
)
;
await
expectFocusAfterKey
(
"
Tab
"
gURLBar
.
inputField
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
pageActionButton
"
)
;
await
expectFocusAfterKey
(
"
Tab
"
afterUrlBarButton
)
;
await
expectFocusAfterKey
(
"
Tab
"
gBrowser
.
selectedBrowser
)
;
}
)
;
}
)
;
add_task
(
async
function
testTabStopsWithNotification
(
)
{
await
BrowserTestUtils
.
withNewTab
(
PERMISSIONS_PAGE
async
function
(
aBrowser
)
{
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popupshown
"
)
;
BrowserTestUtils
.
synthesizeMouseAtCenter
(
"
#
geo
"
{
}
aBrowser
)
;
await
popupShown
;
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
tracking
-
protection
-
icon
-
container
"
)
;
}
)
;
}
)
;
add_task
(
async
function
testTabStopsWithBookmarksToolbar
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
function
(
)
{
CustomizableUI
.
setToolbarVisibility
(
"
PersonalToolbar
"
true
)
;
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Tab
"
afterUrlBarButton
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
PersonalToolbar
"
true
)
;
await
expectFocusAfterKey
(
"
Tab
"
gBrowser
.
selectedBrowser
)
;
CustomizableUI
.
setToolbarVisibility
(
"
PersonalToolbar
"
false
)
;
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Tab
"
afterUrlBarButton
)
;
await
expectFocusAfterKey
(
"
Tab
"
gBrowser
.
selectedBrowser
)
;
}
)
;
}
)
;
add_task
(
async
function
testTabStopNoButtons
(
)
{
await
withNewBlankTab
(
async
function
(
)
{
CustomizableUI
.
removeWidgetFromArea
(
"
home
-
button
"
)
;
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
tabbrowser
-
tabs
"
true
)
;
await
expectFocusAfterKey
(
"
Tab
"
gURLBar
.
inputField
)
;
resetToolbarWithoutDevEditionButtons
(
)
;
maybeAddHomeBesideReload
(
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
home
-
button
"
true
)
;
maybeRemoveHomeButton
(
)
;
}
)
;
}
)
;
add_task
(
async
function
testArrowsToolbarbuttons
(
)
{
maybeAddOldMenuSideButtons
(
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
function
(
)
{
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
library
-
button
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowLeft
"
)
;
is
(
document
.
activeElement
.
id
"
library
-
button
"
"
ArrowLeft
at
end
of
button
group
does
nothing
"
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
sidebar
-
button
"
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
fxa
-
toolbar
-
menu
-
button
"
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
PanelUI
-
menu
-
button
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowRight
"
)
;
is
(
document
.
activeElement
.
id
"
PanelUI
-
menu
-
button
"
"
ArrowRight
at
end
of
button
group
does
nothing
"
)
;
await
expectFocusAfterKey
(
"
ArrowLeft
"
"
fxa
-
toolbar
-
menu
-
button
"
)
;
await
expectFocusAfterKey
(
"
ArrowLeft
"
"
sidebar
-
button
"
)
;
await
expectFocusAfterKey
(
"
ArrowLeft
"
"
library
-
button
"
)
;
}
)
;
maybeRemoveOldMenuSideButtons
(
)
;
}
)
;
add_task
(
async
function
testArrowsRoleButton
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
)
{
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
pageActionButton
"
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
pocket
-
button
"
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
star
-
button
"
)
;
await
expectFocusAfterKey
(
"
ArrowLeft
"
"
pocket
-
button
"
)
;
await
expectFocusAfterKey
(
"
ArrowLeft
"
"
pageActionButton
"
)
;
}
)
;
}
)
;
add_task
(
async
function
testArrowsDisabledButtons
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
aBrowser
)
{
await
waitUntilReloadEnabled
(
)
;
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
tracking
-
protection
-
icon
-
container
"
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
reload
-
button
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowLeft
"
)
;
is
(
document
.
activeElement
.
id
"
reload
-
button
"
"
ArrowLeft
on
Reload
button
when
prior
buttons
disabled
does
nothing
"
)
;
BrowserTestUtils
.
loadURI
(
aBrowser
"
https
:
/
/
example
.
com
/
2
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
aBrowser
)
;
await
waitUntilReloadEnabled
(
)
;
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
tracking
-
protection
-
icon
-
container
"
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
back
-
button
"
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
reload
-
button
"
)
;
}
)
;
}
)
;
add_task
(
async
function
testArrowsOverflowButton
(
)
{
maybeAddOldMenuSideButtons
(
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
function
(
)
{
CustomizableUI
.
addWidgetToArea
(
"
home
-
button
"
CustomizableUI
.
AREA_FIXED_OVERFLOW_PANEL
)
;
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
library
-
button
"
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
sidebar
-
button
"
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
fxa
-
toolbar
-
menu
-
button
"
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
nav
-
bar
-
overflow
-
button
"
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
PanelUI
-
menu
-
button
"
)
;
resetToolbarWithoutDevEditionButtons
(
)
;
document
.
getElementById
(
"
nav
-
bar
-
overflow
-
button
"
)
.
clientWidth
;
await
expectFocusAfterKey
(
"
ArrowLeft
"
"
fxa
-
toolbar
-
menu
-
button
"
)
;
}
)
;
maybeRemoveOldMenuSideButtons
(
)
;
}
)
;
add_task
(
async
function
testArrowsInPanelMultiView
(
)
{
maybeAddOldMenuSideButtons
(
)
;
let
button
=
document
.
getElementById
(
"
library
-
button
"
)
;
forceFocus
(
button
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
let
view
=
document
.
getElementById
(
"
appMenu
-
libraryView
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
view
"
focus
"
true
)
;
let
focusEvt
=
await
focused
;
ok
(
true
"
Focus
inside
Library
menu
after
toolbar
button
pressed
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowLeft
"
)
;
is
(
document
.
activeElement
focusEvt
.
target
"
ArrowLeft
inside
panel
does
nothing
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
document
"
popuphidden
"
true
)
;
view
.
closest
(
"
panel
"
)
.
hidePopup
(
)
;
await
hidden
;
maybeRemoveOldMenuSideButtons
(
)
;
}
)
;
add_task
(
async
function
testArrowsRtl
(
)
{
maybeAddOldMenuSideButtons
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
intl
.
l10n
.
pseudo
"
"
bidi
"
]
]
}
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
startFromUrlBar
(
win
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
library
-
button
"
false
win
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowRight
"
{
}
win
)
;
is
(
win
.
document
.
activeElement
.
id
"
library
-
button
"
"
ArrowRight
at
end
of
button
group
does
nothing
"
)
;
await
expectFocusAfterKey
(
"
ArrowLeft
"
"
sidebar
-
button
"
false
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
maybeRemoveOldMenuSideButtons
(
)
;
}
)
;
add_task
(
async
function
testArrowsBookmarksOverflowButton
(
)
{
let
toolbarOpened
=
TestUtils
.
waitForCondition
(
(
)
=
>
{
let
toolbar
=
gNavToolbox
.
querySelector
(
"
#
PersonalToolbar
"
)
;
return
!
toolbar
.
collapsed
;
}
"
waiting
for
toolbar
to
become
visible
"
)
;
CustomizableUI
.
setToolbarVisibility
(
"
PersonalToolbar
"
true
)
;
await
toolbarOpened
;
let
items
=
document
.
getElementById
(
"
PlacesToolbarItems
"
)
.
children
;
let
lastVisible
;
for
(
let
item
of
items
)
{
if
(
item
.
style
.
visibility
=
=
"
hidden
"
)
{
break
;
}
lastVisible
=
item
;
}
forceFocus
(
lastVisible
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
PlacesChevron
"
)
;
CustomizableUI
.
setToolbarVisibility
(
"
PersonalToolbar
"
false
)
;
}
)
;
registerCleanupFunction
(
async
function
(
)
{
CustomizableUI
.
reset
(
)
;
await
PlacesUtils
.
bookmarks
.
eraseEverything
(
)
;
}
)
;
add_task
(
async
function
testPanelCloseRestoresFocus
(
)
{
maybeAddOldMenuSideButtons
(
)
;
await
withNewBlankTab
(
async
function
(
)
{
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
library
-
button
"
)
;
let
view
=
document
.
getElementById
(
"
appMenu
-
libraryView
"
)
;
let
shown
=
BrowserTestUtils
.
waitForEvent
(
view
"
ViewShown
"
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
shown
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
document
"
popuphidden
"
true
)
;
view
.
closest
(
"
panel
"
)
.
hidePopup
(
)
;
await
hidden
;
is
(
document
.
activeElement
.
id
"
library
-
button
"
"
Focus
restored
to
Library
button
after
panel
closed
"
)
;
}
)
;
maybeRemoveOldMenuSideButtons
(
)
;
}
)
;
add_task
(
async
function
testArrowKeyForTPIconContainerandIdentityBox
(
)
{
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
browser
)
{
gBrowser
.
updateBrowserSharing
(
browser
{
geo
:
true
}
)
;
await
waitUntilReloadEnabled
(
)
;
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Shift
+
Tab
"
"
tracking
-
protection
-
icon
-
container
"
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
identity
-
icon
-
box
"
)
;
await
expectFocusAfterKey
(
"
ArrowRight
"
"
identity
-
permission
-
box
"
)
;
await
expectFocusAfterKey
(
"
ArrowLeft
"
"
identity
-
icon
-
box
"
)
;
await
expectFocusAfterKey
(
"
ArrowLeft
"
"
tracking
-
protection
-
icon
-
container
"
)
;
gBrowser
.
updateBrowserSharing
(
browser
{
geo
:
false
}
)
;
}
)
;
}
)
;
add_task
(
async
function
testCharacterNavigation
(
)
{
maybeAddHomeBesideReload
(
)
;
maybeAddOldMenuSideButtons
(
)
;
await
BrowserTestUtils
.
withNewTab
(
"
https
:
/
/
example
.
com
"
async
function
(
)
{
await
waitUntilReloadEnabled
(
)
;
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
pageActionButton
"
)
;
await
expectFocusAfterKey
(
"
h
"
"
home
-
button
"
)
;
EventUtils
.
synthesizeKey
(
"
s
"
)
;
is
(
document
.
activeElement
.
id
"
home
-
button
"
"
home
-
button
still
focused
after
s
pressed
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
expectFocusAfterKey
(
"
s
"
"
pocket
-
button
"
)
;
await
expectFocusAfterKey
(
"
i
"
"
sidebar
-
button
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
expectFocusAfterKey
(
"
s
"
"
pocket
-
button
"
)
;
await
expectFocusAfterKey
(
"
s
"
"
sidebar
-
button
"
)
;
}
)
;
maybeRemoveHomeButton
(
)
;
maybeRemoveOldMenuSideButtons
(
)
;
}
)
;
add_task
(
async
function
testCharacterInPanelMultiView
(
)
{
maybeAddOldMenuSideButtons
(
)
;
let
button
=
document
.
getElementById
(
"
library
-
button
"
)
;
forceFocus
(
button
)
;
let
view
=
document
.
getElementById
(
"
appMenu
-
libraryView
"
)
;
let
focused
=
BrowserTestUtils
.
waitForEvent
(
view
"
focus
"
true
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
let
focusEvt
=
await
focused
;
ok
(
true
"
Focus
inside
Library
menu
after
toolbar
button
pressed
"
)
;
EventUtils
.
synthesizeKey
(
"
s
"
)
;
is
(
document
.
activeElement
focusEvt
.
target
"
s
inside
panel
does
nothing
"
)
;
let
hidden
=
BrowserTestUtils
.
waitForEvent
(
document
"
popuphidden
"
true
)
;
view
.
closest
(
"
panel
"
)
.
hidePopup
(
)
;
await
hidden
;
maybeRemoveOldMenuSideButtons
(
)
;
}
)
;
add_task
(
async
function
testTabStopsAfterSearchBarAdded
(
)
{
maybeAddOldMenuSideButtons
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
search
.
widget
.
inNavBar
"
1
]
]
}
)
;
await
withNewBlankTab
(
async
function
(
)
{
startFromUrlBar
(
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
searchbar
"
true
)
;
await
expectFocusAfterKey
(
"
Tab
"
"
library
-
button
"
)
;
}
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
maybeRemoveOldMenuSideButtons
(
)
;
}
)
;
