const
OOP_BASE_PAGE_URI
=
"
https
:
/
/
example
.
com
/
browser
/
browser
/
base
/
content
/
test
/
outOfProcess
/
file_base
.
html
"
;
const
TOTAL_FRAME_COUNT
=
8
;
const
FRAME_COLORS
=
[
"
white
"
"
seashell
"
"
lightcyan
"
"
palegreen
"
]
;
async
function
initChildFrames
(
browser
insertHTML
)
{
let
colors
=
FRAME_COLORS
.
slice
(
)
;
let
colorMap
=
new
Map
(
)
;
let
browsingContexts
=
[
]
;
async
function
processBC
(
bc
)
{
browsingContexts
.
push
(
bc
)
;
let
pid
=
bc
.
currentWindowGlobal
.
osPid
;
let
ident
=
"
BrowsingContext
:
"
+
bc
.
id
+
"
\
nProcess
:
"
+
pid
;
let
color
=
colorMap
.
get
(
pid
)
;
if
(
!
color
)
{
if
(
!
colors
.
length
)
{
ok
(
false
"
ran
out
of
available
colors
"
)
;
}
color
=
colors
.
shift
(
)
;
colorMap
.
set
(
pid
color
)
;
}
let
insertHTMLString
=
insertHTML
;
if
(
typeof
insertHTML
=
=
"
function
"
)
{
insertHTMLString
=
insertHTML
(
bc
)
;
}
await
SpecialPowers
.
spawn
(
bc
[
ident
color
insertHTMLString
]
(
identChild
colorChild
insertHTMLChild
)
=
>
{
let
root
=
content
.
document
.
documentElement
;
root
.
style
=
"
background
-
color
:
"
+
colorChild
;
let
pre
=
content
.
document
.
createElement
(
"
pre
"
)
;
pre
.
textContent
=
identChild
;
root
.
insertBefore
(
pre
root
.
firstChild
)
;
if
(
insertHTMLChild
)
{
content
.
document
.
getElementById
(
"
insertPoint
"
)
.
innerHTML
=
insertHTMLChild
;
}
}
)
;
for
(
let
childBC
of
bc
.
children
)
{
await
processBC
(
childBC
)
;
}
}
await
processBC
(
browser
.
browsingContext
)
;
return
browsingContexts
;
}
