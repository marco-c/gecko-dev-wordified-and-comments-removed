"
use
strict
"
;
const
MINOR_WORDS
=
[
"
a
"
"
an
"
"
and
"
"
as
"
"
at
"
"
but
"
"
by
"
"
for
"
"
if
"
"
in
"
"
nor
"
"
of
"
"
off
"
"
on
"
"
or
"
"
per
"
"
so
"
"
the
"
"
to
"
"
up
"
"
via
"
"
yet
"
]
;
async
function
*
iterateMenuPopups
(
menubar
)
{
let
menus
=
menubar
.
querySelectorAll
(
"
menu
"
)
;
for
(
let
menu
of
menus
)
{
for
(
let
menupopup
of
menu
.
querySelectorAll
(
"
menupopup
"
)
)
{
menupopup
.
dispatchEvent
(
new
MouseEvent
(
"
popupshowing
"
{
bubbles
:
true
}
)
)
;
menupopup
.
dispatchEvent
(
new
MouseEvent
(
"
popupshown
"
{
bubbles
:
true
}
)
)
;
yield
menupopup
;
menupopup
.
dispatchEvent
(
new
MouseEvent
(
"
popuphiding
"
{
bubbles
:
true
}
)
)
;
menupopup
.
dispatchEvent
(
new
MouseEvent
(
"
popuphidden
"
{
bubbles
:
true
}
)
)
;
}
}
}
function
checkMenuItems
(
menupopup
)
{
info
(
"
Checking
menupopup
with
id
"
+
menupopup
.
id
)
;
for
(
let
child
of
menupopup
.
children
)
{
if
(
child
.
label
)
{
info
(
"
Checking
menupopup
child
with
id
"
+
child
.
id
)
;
checkTitleCase
(
child
.
label
child
.
id
)
;
}
}
}
function
checkTitleCase
(
string
elementID
)
{
if
(
!
string
|
|
!
elementID
)
{
return
;
}
let
words
=
string
.
trim
(
)
.
split
(
/
\
s
+
/
)
;
let
firstWord
=
words
.
shift
(
)
;
let
result
=
hasExpectedCapitalization
(
firstWord
true
)
;
if
(
result
)
{
for
(
let
word
of
words
)
{
if
(
word
)
{
let
expectCapitalized
=
!
MINOR_WORDS
.
includes
(
word
)
;
result
=
hasExpectedCapitalization
(
word
expectCapitalized
)
;
if
(
!
result
)
{
break
;
}
}
}
}
Assert
.
ok
(
result
{
string
}
for
{
elementID
}
should
have
Title
Casing
.
)
;
}
add_task
(
async
function
apa_test_title_case_menubar
(
)
{
let
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
menuToolbar
=
newWin
.
document
.
getElementById
(
"
main
-
menubar
"
)
;
for
await
(
const
menupopup
of
iterateMenuPopups
(
menuToolbar
)
)
{
checkMenuItems
(
menupopup
)
;
}
await
BrowserTestUtils
.
closeWindow
(
newWin
)
;
}
)
;
