const
baseURL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
function
clearAllPermissionsByPrefix
(
aPrefix
)
{
for
(
let
perm
of
Services
.
perms
.
all
)
{
if
(
perm
.
type
.
startsWith
(
aPrefix
)
)
{
Services
.
perms
.
removePermission
(
perm
)
;
}
}
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
disable_open_during_load
"
true
]
]
}
)
;
}
)
;
add_task
(
async
function
test_maximum_reported_blocks
(
)
{
Services
.
prefs
.
setIntPref
(
"
privacy
.
popups
.
maxReported
"
5
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
baseURL
+
"
popup_blocker_10_popups
.
html
"
)
;
let
notification
=
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
getNotificationBox
(
)
.
getNotificationWithValue
(
"
popup
-
blocked
"
)
)
;
ok
(
notification
.
messageText
.
textContent
.
includes
(
"
more
than
"
)
"
Notification
label
has
'
more
than
'
"
)
;
ok
(
notification
.
messageText
.
textContent
.
includes
(
"
5
"
)
"
Notification
label
shows
the
maximum
number
of
popups
"
)
;
gBrowser
.
removeTab
(
tab
)
;
Services
.
prefs
.
clearUserPref
(
"
privacy
.
popups
.
maxReported
"
)
;
}
)
;
add_task
(
async
function
test_opening_blocked_popups
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
baseURL
+
"
popup_blocker
.
html
"
)
;
let
notification
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
(
notification
=
gBrowser
.
getNotificationBox
(
)
.
getNotificationWithValue
(
"
popup
-
blocked
"
)
)
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
window
"
popupshown
"
)
;
let
popupFilled
=
waitForBlockedPopups
(
2
)
;
notification
.
querySelector
(
"
button
"
)
.
doCommand
(
)
;
let
popup_event
=
await
popupShown
;
let
menu
=
popup_event
.
target
;
is
(
menu
.
id
"
blockedPopupOptions
"
"
Blocked
popup
menu
shown
"
)
;
await
popupFilled
;
let
popupTabs
=
[
]
;
function
onTabOpen
(
event
)
{
popupTabs
.
push
(
event
.
target
)
;
}
gBrowser
.
tabContainer
.
addEventListener
(
"
TabOpen
"
onTabOpen
)
;
let
allow
=
document
.
getElementById
(
"
blockedPopupAllowSite
"
)
;
allow
.
doCommand
(
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
popupTabs
.
length
=
=
2
&
&
popupTabs
.
every
(
aTab
=
>
aTab
.
linkedBrowser
.
currentURI
.
spec
!
=
"
about
:
blank
"
)
)
;
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabOpen
"
onTabOpen
)
;
ok
(
popupTabs
[
0
]
.
linkedBrowser
.
currentURI
.
spec
.
endsWith
(
"
popup_blocker_a
.
html
"
)
"
Popup
a
"
)
;
ok
(
popupTabs
[
1
]
.
linkedBrowser
.
currentURI
.
spec
.
endsWith
(
"
popup_blocker_b
.
html
"
)
"
Popup
b
"
)
;
gBrowser
.
removeTab
(
tab
)
;
for
(
let
popup
of
popupTabs
)
{
gBrowser
.
removeTab
(
popup
)
;
}
clearAllPermissionsByPrefix
(
"
popup
"
)
;
menu
.
hidePopup
(
)
;
}
)
;
