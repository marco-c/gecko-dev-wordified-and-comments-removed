const
baseURL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
function
clearAllPermissionsByPrefix
(
aPrefix
)
{
let
perms
=
Services
.
perms
.
enumerator
;
while
(
perms
.
hasMoreElements
(
)
)
{
let
perm
=
perms
.
getNext
(
)
;
if
(
perm
.
type
.
startsWith
(
aPrefix
)
)
{
Services
.
perms
.
removePermission
(
perm
)
;
}
}
}
add_task
(
function
*
test_opening_blocked_popups
(
)
{
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
disable_open_during_load
"
true
]
]
}
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
baseURL
+
"
popup_blocker
.
html
"
)
;
let
notification
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
notification
=
gBrowser
.
getNotificationBox
(
)
.
getNotificationWithValue
(
"
popup
-
blocked
"
)
)
;
let
popupShown
=
BrowserTestUtils
.
waitForEvent
(
window
"
popupshown
"
)
;
let
popupFilled
=
BrowserTestUtils
.
waitForMessage
(
gBrowser
.
selectedBrowser
.
messageManager
"
PopupBlocking
:
ReplyGetBlockedPopupList
"
)
;
notification
.
querySelector
(
"
button
"
)
.
doCommand
(
)
;
let
popup_event
=
yield
popupShown
;
let
menu
=
popup_event
.
target
;
is
(
menu
.
id
"
blockedPopupOptions
"
"
Blocked
popup
menu
shown
"
)
;
yield
popupFilled
;
yield
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
;
let
sep
=
menu
.
querySelector
(
"
menuseparator
"
)
;
let
popupCount
=
0
;
for
(
let
i
=
sep
.
nextElementSibling
;
i
;
i
=
i
.
nextElementSibling
)
{
popupCount
+
+
;
}
is
(
popupCount
2
"
Two
popups
were
blocked
"
)
;
let
popupTabs
=
[
]
;
function
onTabOpen
(
event
)
{
popupTabs
.
push
(
event
.
target
)
;
}
gBrowser
.
tabContainer
.
addEventListener
(
"
TabOpen
"
onTabOpen
)
;
let
allow
=
menu
.
querySelector
(
"
[
observes
=
'
blockedPopupAllowSite
'
]
"
)
;
allow
.
doCommand
(
)
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
popupTabs
.
length
=
=
2
&
&
popupTabs
.
every
(
aTab
=
>
aTab
.
linkedBrowser
.
currentURI
.
spec
!
=
"
about
:
blank
"
)
)
;
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabOpen
"
onTabOpen
)
;
is
(
popupTabs
[
0
]
.
linkedBrowser
.
currentURI
.
spec
"
data
:
text
/
plain
;
charset
=
utf
-
8
a
"
"
Popup
a
"
)
;
is
(
popupTabs
[
1
]
.
linkedBrowser
.
currentURI
.
spec
"
data
:
text
/
plain
;
charset
=
utf
-
8
b
"
"
Popup
b
"
)
;
gBrowser
.
removeTab
(
tab
)
;
for
(
let
popup
of
popupTabs
)
{
gBrowser
.
removeTab
(
popup
)
;
}
clearAllPermissionsByPrefix
(
"
popup
"
)
;
menu
.
hidePopup
(
)
;
}
)
;
add_task
(
function
*
check_icon_hides
(
)
{
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
disable_open_during_load
"
true
]
]
}
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
baseURL
+
"
popup_blocker
.
html
"
)
;
let
button
=
document
.
getElementById
(
"
page
-
report
-
button
"
)
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
getNotificationBox
(
)
.
getNotificationWithValue
(
"
popup
-
blocked
"
)
)
;
ok
(
!
button
.
hidden
"
Button
should
be
visible
"
)
;
let
otherPageLoaded
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
openLinkIn
(
baseURL
"
current
"
{
}
)
;
yield
otherPageLoaded
;
ok
(
button
.
hidden
"
Button
should
have
hidden
again
after
another
page
loaded
.
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
