"
use
strict
"
;
const
{
SitePermissions
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
SitePermissions
.
jsm
"
)
;
const
{
PermissionTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
PermissionTestUtils
.
jsm
"
)
;
const
baseURL
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
example
.
com
"
)
;
const
URL
=
baseURL
+
"
popup_blocker2
.
html
"
;
const
URI
=
Services
.
io
.
newURI
(
URL
)
;
const
PRINCIPAL
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
URI
{
}
)
;
function
openIdentityPopup
(
)
{
let
promise
=
BrowserTestUtils
.
waitForEvent
(
gIdentityHandler
.
_identityPopup
"
popupshown
"
)
;
gIdentityHandler
.
_identityBox
.
click
(
)
;
return
promise
;
}
function
closeIdentityPopup
(
)
{
let
promise
=
BrowserTestUtils
.
waitForEvent
(
gIdentityHandler
.
_identityPopup
"
popuphidden
"
)
;
gIdentityHandler
.
_identityPopup
.
hidePopup
(
)
;
return
promise
;
}
add_task
(
async
function
enable_popup_blocker
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
disable_open_during_load
"
true
]
]
}
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
dom
.
disable_open_click_delay
"
0
]
]
}
)
;
}
)
;
add_task
(
async
function
check_blocked_popup_indicator
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
URL
)
;
await
openIdentityPopup
(
)
;
Assert
.
equal
(
document
.
getElementById
(
"
blocked
-
popup
-
indicator
-
item
"
)
null
)
;
await
closeIdentityPopup
(
)
;
let
icon
=
gIdentityHandler
.
_identityBox
.
querySelector
(
"
.
blocked
-
permission
-
icon
[
data
-
permission
-
id
=
'
popup
'
]
"
)
;
Assert
.
equal
(
icon
.
hasAttribute
(
"
showing
"
)
false
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
(
)
=
>
{
let
open
=
content
.
document
.
getElementById
(
"
pop
"
)
;
open
.
click
(
)
;
}
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
getNotificationBox
(
)
.
getNotificationWithValue
(
"
popup
-
blocked
"
)
)
;
document
.
getElementById
(
"
identity
-
icon
"
)
.
click
(
)
;
await
openIdentityPopup
(
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
document
.
getElementById
(
"
blocked
-
popup
-
indicator
-
item
"
)
!
=
=
null
)
;
let
menulist
=
document
.
getElementById
(
"
identity
-
popup
-
popup
-
menulist
"
)
;
Assert
.
equal
(
menulist
.
value
"
0
"
)
;
Assert
.
equal
(
menulist
.
label
"
Block
"
)
;
await
closeIdentityPopup
(
)
;
Assert
.
equal
(
icon
.
getAttribute
(
"
showing
"
)
"
true
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
check_popup_showing
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
URL
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
(
)
=
>
{
let
open
=
content
.
document
.
getElementById
(
"
pop
"
)
;
open
.
click
(
)
;
}
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
getNotificationBox
(
)
.
getNotificationWithValue
(
"
popup
-
blocked
"
)
)
;
let
popup
;
function
onTabOpen
(
event
)
{
popup
=
event
.
target
;
}
gBrowser
.
tabContainer
.
addEventListener
(
"
TabOpen
"
onTabOpen
)
;
await
openIdentityPopup
(
)
;
let
e
=
document
.
getElementById
(
"
blocked
-
popup
-
indicator
-
item
"
)
;
let
text
=
e
.
getElementsByTagName
(
"
label
"
)
[
0
]
;
text
.
click
(
)
;
await
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
TabOpen
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
popup
.
linkedBrowser
.
currentURI
.
spec
!
=
"
about
:
blank
"
)
;
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabOpen
"
onTabOpen
)
;
ok
(
popup
.
linkedBrowser
.
currentURI
.
spec
.
endsWith
(
"
popup_blocker_a
.
html
"
)
"
Popup
a
"
)
;
gBrowser
.
removeTab
(
popup
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
check_permission_state_change
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
URL
)
;
let
state
=
SitePermissions
.
getForPrincipal
(
PRINCIPAL
"
popup
"
gBrowser
)
.
state
;
Assert
.
equal
(
state
SitePermissions
.
BLOCK
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
(
)
=
>
{
let
open
=
content
.
document
.
getElementById
(
"
pop
"
)
;
open
.
click
(
)
;
}
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
getNotificationBox
(
)
.
getNotificationWithValue
(
"
popup
-
blocked
"
)
)
;
await
openIdentityPopup
(
)
;
let
menulist
=
document
.
getElementById
(
"
identity
-
popup
-
popup
-
menulist
"
)
;
menulist
.
menupopup
.
openPopup
(
)
;
let
menuitem
=
menulist
.
getElementsByTagName
(
"
menuitem
"
)
[
0
]
;
menuitem
.
click
(
)
;
await
closeIdentityPopup
(
)
;
state
=
SitePermissions
.
getForPrincipal
(
PRINCIPAL
"
popup
"
gBrowser
)
.
state
;
Assert
.
equal
(
state
SitePermissions
.
ALLOW
)
;
let
popup
;
function
onTabOpen
(
event
)
{
popup
=
event
.
target
;
}
gBrowser
.
tabContainer
.
addEventListener
(
"
TabOpen
"
onTabOpen
)
;
await
SpecialPowers
.
spawn
(
gBrowser
.
selectedBrowser
[
]
async
(
)
=
>
{
let
open
=
content
.
document
.
getElementById
(
"
pop
"
)
;
open
.
click
(
)
;
}
)
;
await
BrowserTestUtils
.
waitForEvent
(
gBrowser
.
tabContainer
"
TabOpen
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
popup
.
linkedBrowser
.
currentURI
.
spec
!
=
"
about
:
blank
"
)
;
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabOpen
"
onTabOpen
)
;
ok
(
popup
.
linkedBrowser
.
currentURI
.
spec
.
endsWith
(
"
popup_blocker_a
.
html
"
)
"
Popup
a
"
)
;
gBrowser
.
removeTab
(
popup
)
;
await
openIdentityPopup
(
)
;
menulist
=
document
.
getElementById
(
"
identity
-
popup
-
popup
-
menulist
"
)
;
menulist
.
menupopup
.
openPopup
(
)
;
menuitem
=
menulist
.
getElementsByTagName
(
"
menuitem
"
)
[
1
]
;
menuitem
.
click
(
)
;
await
closeIdentityPopup
(
)
;
state
=
SitePermissions
.
getForPrincipal
(
PRINCIPAL
"
popup
"
gBrowser
)
.
state
;
Assert
.
equal
(
state
SitePermissions
.
BLOCK
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
check_explicit_default_permission
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
URL
)
;
PermissionTestUtils
.
add
(
URI
"
popup
"
Ci
.
nsIPermissionManager
.
DENY_ACTION
)
;
await
openIdentityPopup
(
)
;
let
menulist
=
document
.
getElementById
(
"
identity
-
popup
-
popup
-
menulist
"
)
;
Assert
.
equal
(
menulist
.
value
"
0
"
)
;
Assert
.
equal
(
menulist
.
label
"
Block
"
)
;
await
closeIdentityPopup
(
)
;
PermissionTestUtils
.
add
(
URI
"
popup
"
Services
.
perms
.
ALLOW_ACTION
)
;
await
openIdentityPopup
(
)
;
menulist
=
document
.
getElementById
(
"
identity
-
popup
-
popup
-
menulist
"
)
;
Assert
.
equal
(
menulist
.
value
"
1
"
)
;
Assert
.
equal
(
menulist
.
label
"
Allow
"
)
;
await
closeIdentityPopup
(
)
;
PermissionTestUtils
.
remove
(
URI
"
popup
"
)
;
gBrowser
.
removeTab
(
tab
)
;
}
)
;
