"
use
strict
"
;
function
muffleMainWindowType
(
)
{
let
oldWinType
=
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
;
if
(
oldWinType
!
=
"
navigator
:
testrunner
"
)
{
document
.
documentElement
.
setAttribute
(
"
windowtype
"
"
navigator
:
testrunner
"
)
;
registerCleanupFunction
(
(
)
=
>
{
document
.
documentElement
.
setAttribute
(
"
windowtype
"
oldWinType
)
;
}
)
;
}
}
add_task
(
async
function
closing_last_window_equals_quitting
(
)
{
if
(
navigator
.
platform
.
startsWith
(
"
Mac
"
)
)
{
ok
(
true
"
Not
testing
on
mac
"
)
;
return
;
}
muffleMainWindowType
(
)
;
let
observed
=
0
;
function
obs
(
)
{
observed
+
+
;
}
Services
.
obs
.
addObserver
(
obs
"
browser
-
lastwindow
-
close
-
requested
"
)
;
let
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
closedPromise
=
BrowserTestUtils
.
windowClosed
(
newWin
)
;
newWin
.
BrowserTryToCloseWindow
(
)
;
await
closedPromise
;
is
(
observed
1
"
Got
a
notification
for
closing
the
normal
window
.
"
)
;
Services
.
obs
.
removeObserver
(
obs
"
browser
-
lastwindow
-
close
-
requested
"
)
;
}
)
;
add_task
(
async
function
closing_last_window_equals_quitting
(
)
{
if
(
navigator
.
platform
.
startsWith
(
"
Mac
"
)
)
{
ok
(
true
"
Not
testing
on
mac
"
)
;
return
;
}
muffleMainWindowType
(
)
;
let
observed
=
0
;
function
obs
(
)
{
observed
+
+
;
}
Services
.
obs
.
addObserver
(
obs
"
browser
-
lastwindow
-
close
-
requested
"
)
;
let
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
popupPromise
=
BrowserTestUtils
.
waitForNewWindow
(
"
https
:
/
/
example
.
com
/
"
)
;
ContentTask
.
spawn
(
newWin
.
gBrowser
.
selectedBrowser
null
function
(
)
{
content
.
open
(
"
https
:
/
/
example
.
com
/
"
"
_blank
"
"
height
=
500
"
)
;
}
)
;
let
popupWin
=
await
popupPromise
;
let
closedPromise
=
BrowserTestUtils
.
windowClosed
(
newWin
)
;
newWin
.
BrowserTryToCloseWindow
(
)
;
await
closedPromise
;
is
(
observed
0
"
Got
no
notification
for
closing
the
normal
window
.
"
)
;
closedPromise
=
BrowserTestUtils
.
windowClosed
(
popupWin
)
;
popupWin
.
BrowserTryToCloseWindow
(
)
;
await
closedPromise
;
is
(
observed
0
"
Got
no
notification
now
that
we
'
re
closing
the
last
window
as
it
'
s
a
popup
.
"
)
;
Services
.
obs
.
removeObserver
(
obs
"
browser
-
lastwindow
-
close
-
requested
"
)
;
}
)
;
