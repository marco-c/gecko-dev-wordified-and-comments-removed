"
use
strict
"
;
let
gHttpServer
=
null
;
let
gScheme
=
"
http
"
;
let
gHost
=
"
localhost
"
;
let
gPort
=
-
1
;
let
gPrivateWin
=
null
;
let
gIsSpeculativeConnected
=
false
;
add_task
(
async
function
setup
(
)
{
gHttpServer
=
runHttpServer
(
gScheme
gHost
)
;
gPort
=
gHttpServer
.
identity
.
primaryPort
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
autoFill
"
true
]
[
"
browser
.
search
.
suggest
.
enabled
"
false
]
[
"
browser
.
urlbar
.
speculativeConnect
.
enabled
"
true
]
[
"
network
.
http
.
speculative
-
parallel
-
limit
"
6
]
[
"
network
.
dns
.
disableIPv6
"
true
]
]
}
)
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
{
gScheme
}
:
/
/
{
gHost
}
:
{
gPort
}
title
:
"
test
visit
for
speculative
connection
"
transition
:
Ci
.
nsINavHistoryService
.
TRANSITION_TYPED
}
]
)
;
gPrivateWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
is
(
PrivateBrowsingUtils
.
isWindowPrivate
(
gPrivateWin
)
true
"
A
private
window
created
.
"
)
;
let
oldSpeculativeConnect
=
gURLBar
.
popup
.
maybeSetupSpeculativeConnect
.
bind
(
gURLBar
.
popup
)
;
let
newSpeculativeConnect
=
(
uriString
)
=
>
{
gIsSpeculativeConnected
=
true
;
info
(
Original
uri
is
{
uriString
}
)
;
let
newUriString
=
uriString
.
substr
(
0
uriString
.
length
-
1
)
+
"
:
"
+
gPort
+
"
/
"
;
info
(
New
uri
is
{
newUriString
}
)
;
oldSpeculativeConnect
(
newUriString
)
;
}
;
gURLBar
.
popup
.
maybeSetupSpeculativeConnect
=
newSpeculativeConnect
;
gPrivateWin
.
gURLBar
.
popup
.
maybeSetupSpeculativeConnect
=
newSpeculativeConnect
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
gURLBar
.
popup
.
maybeSetupSpeculativeConnect
=
oldSpeculativeConnect
;
gPrivateWin
.
gURLBar
.
popup
.
maybeSetupSpeculativeConnect
=
oldSpeculativeConnect
;
gHttpServer
.
identity
.
remove
(
gScheme
gHost
gPort
)
;
gHttpServer
.
stop
(
(
)
=
>
{
gHttpServer
=
null
;
}
)
;
await
BrowserTestUtils
.
closeWindow
(
gPrivateWin
)
;
}
)
;
}
)
;
const
test
=
{
search
:
gHost
.
substr
(
0
2
)
autofilledValue
:
{
gHost
}
/
}
;
add_task
(
async
function
autofill_tests
(
)
{
gIsSpeculativeConnected
=
false
;
info
(
Searching
for
'
{
test
.
search
}
'
)
;
await
promiseAutocompleteResultPopup
(
test
.
search
window
true
)
;
is
(
gURLBar
.
inputField
.
value
test
.
autofilledValue
Autofilled
value
is
as
expected
for
search
'
{
test
.
search
}
'
)
;
is
(
gIsSpeculativeConnected
true
"
Speculative
connection
should
be
called
"
)
;
await
promiseSpeculativeConnection
(
gHttpServer
)
;
}
)
;
add_task
(
async
function
privateContext_test
(
)
{
info
(
"
In
private
context
.
"
)
;
gIsSpeculativeConnected
=
false
;
info
(
Searching
for
'
{
test
.
search
}
'
)
;
await
promiseAutocompleteResultPopup
(
test
.
search
gPrivateWin
true
)
;
is
(
gPrivateWin
.
gURLBar
.
inputField
.
value
test
.
autofilledValue
Autofilled
value
is
as
expected
for
search
'
{
test
.
search
}
'
)
;
is
(
gIsSpeculativeConnected
false
"
Speculative
connection
shouldn
'
t
be
called
"
)
;
}
)
;
