"
use
strict
"
;
const
TEST_ENGINE_BASENAME
=
"
searchSuggestionEngineSlow
.
xml
"
;
const
TEST_ENGINE_SUGGESTIONS_TIMEOUT
=
1000
;
const
TEST_ENGINE_NUM_EXPECTED_RESULTS
=
2
;
add_task
(
async
function
init
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
suggest
.
searches
"
true
]
]
}
)
;
let
engine
=
await
SearchTestUtils
.
promiseNewSearchEngine
(
getRootDirectory
(
gTestPath
)
+
TEST_ENGINE_BASENAME
)
;
let
oldCurrentEngine
=
Services
.
search
.
defaultEngine
;
Services
.
search
.
moveEngine
(
engine
0
)
;
Services
.
search
.
defaultEngine
=
engine
;
registerCleanupFunction
(
async
(
)
=
>
{
Services
.
search
.
defaultEngine
=
oldCurrentEngine
;
await
PlacesUtils
.
history
.
clear
(
)
;
gURLBar
.
blur
(
)
;
Assert
.
ok
(
!
gURLBar
.
popup
.
popupOpen
"
popup
should
be
closed
"
)
;
}
)
;
}
)
;
add_task
(
async
function
mainTest
(
)
{
await
promiseAutocompleteResultPopup
(
{
UrlbarTokenizer
.
RESTRICT
.
SEARCH
}
test
window
)
;
await
promiseSuggestionsPresent
(
"
Waiting
for
initial
suggestions
"
)
;
await
new
Promise
(
r
=
>
EventUtils
.
synthesizeKey
(
"
x
"
{
}
window
r
)
)
;
await
waitForAutocompleteResultAt
(
TEST_ENGINE_NUM_EXPECTED_RESULTS
)
;
await
new
Promise
(
r
=
>
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
window
r
)
)
;
await
new
Promise
(
r
=
>
setTimeout
(
r
2
*
TEST_ENGINE_SUGGESTIONS_TIMEOUT
)
)
;
let
numExpectedResults
=
TEST_ENGINE_NUM_EXPECTED_RESULTS
+
1
;
let
results
=
gURLBar
.
popup
.
richlistbox
.
itemChildren
;
let
numActualResults
=
Array
.
reduce
(
results
(
memo
result
)
=
>
{
if
(
!
result
.
collapsed
)
{
memo
+
+
;
}
return
memo
;
}
0
)
;
Assert
.
equal
(
numActualResults
numExpectedResults
)
;
let
expectedSuggestions
=
[
"
testfoo
"
"
testbar
"
]
;
for
(
let
i
=
0
;
i
<
TEST_ENGINE_NUM_EXPECTED_RESULTS
;
i
+
+
)
{
let
item
=
gURLBar
.
popup
.
richlistbox
.
itemChildren
[
i
+
1
]
;
let
action
=
item
.
_parseActionUrl
(
item
.
getAttribute
(
"
url
"
)
)
;
Assert
.
ok
(
action
)
;
Assert
.
equal
(
action
.
type
"
searchengine
"
)
;
Assert
.
ok
(
"
searchSuggestion
"
in
action
.
params
)
;
Assert
.
equal
(
action
.
params
.
searchSuggestion
expectedSuggestions
[
i
]
)
;
}
}
)
;
