"
use
strict
"
;
Services
.
scriptloader
.
loadSubScript
(
"
resource
:
/
/
testing
-
common
/
sinon
-
2
.
3
.
2
.
js
"
)
;
let
sharedTitle
;
let
sharedUrl
;
let
mockShareData
=
[
{
title
:
"
NSA
"
menuItemTitle
:
"
National
Security
Agency
"
image
:
"
data
:
image
/
gif
;
base64
R0lGODlhAQABAAAAACH5BAEKAAEA
"
+
"
LAAAAAABAAEAAAICTAEAOw
=
=
"
}
]
;
let
stub
=
sinon
.
stub
(
BrowserPageActions
.
shareURL
"
_sharingService
"
)
.
get
(
(
)
=
>
{
return
{
getSharingProviders
(
url
)
{
return
mockShareData
;
}
shareUrl
(
title
url
)
{
sharedUrl
=
url
;
sharedTitle
=
title
;
}
}
;
}
)
;
registerCleanupFunction
(
async
function
(
)
{
stub
.
restore
(
)
;
delete
window
.
sinon
;
await
EventUtils
.
synthesizeNativeMouseMove
(
document
.
documentElement
0
0
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
}
)
;
add_task
(
async
function
shareURL
(
)
{
let
url
=
"
http
:
/
/
example
.
org
/
"
;
await
BrowserTestUtils
.
withNewTab
(
url
async
(
)
=
>
{
await
promisePageActionPanelOpen
(
)
;
let
shareURLButton
=
document
.
getElementById
(
"
pageAction
-
panel
-
shareURL
"
)
;
let
viewPromise
=
promisePageActionViewShown
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
shareURLButton
{
}
)
;
let
view
=
await
viewPromise
;
let
body
=
document
.
getElementById
(
view
.
id
+
"
-
body
"
)
;
Assert
.
equal
(
body
.
childNodes
.
length
1
"
Has
correct
share
receivers
"
)
;
let
shareButton
=
body
.
childNodes
[
0
]
;
Assert
.
equal
(
shareButton
.
label
mockShareData
[
0
]
.
menuItemTitle
)
;
let
hiddenPromise
=
promisePageActionPanelHidden
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
shareButton
{
}
)
;
await
hiddenPromise
;
Assert
.
equal
(
sharedTitle
mockShareData
[
0
]
.
title
"
Shared
with
the
correct
title
"
)
;
Assert
.
equal
(
sharedUrl
"
http
:
/
/
example
.
org
/
"
"
Shared
correct
URL
"
)
;
}
)
;
}
)
;
