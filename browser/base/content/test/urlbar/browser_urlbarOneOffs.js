const
TEST_ENGINE_BASENAME
=
"
searchSuggestionEngine
.
xml
"
;
let
gMaxResults
;
add_task
(
function
*
init
(
)
{
Services
.
prefs
.
setBoolPref
(
"
browser
.
urlbar
.
oneOffSearches
"
true
)
;
gMaxResults
=
Services
.
prefs
.
getIntPref
(
"
browser
.
urlbar
.
maxRichResults
"
)
;
let
engine
=
yield
promiseNewSearchEngine
(
TEST_ENGINE_BASENAME
)
;
Services
.
search
.
moveEngine
(
engine
0
)
;
registerCleanupFunction
(
function
*
(
)
{
yield
hidePopup
(
)
;
yield
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
yield
PlacesTestUtils
.
clearHistory
(
)
;
let
visits
=
[
]
;
for
(
let
i
=
0
;
i
<
gMaxResults
;
i
+
+
)
{
visits
.
push
(
{
uri
:
makeURI
(
"
http
:
/
/
example
.
com
/
browser_urlbarOneOffs
.
js
/
?
"
+
i
)
transition
:
Ci
.
nsINavHistoryService
.
TRANSITION_TYPED
}
)
;
}
yield
PlacesTestUtils
.
addVisits
(
visits
)
;
}
)
;
add_task
(
function
*
history
(
)
{
gURLBar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
yield
promisePopupShown
(
gURLBar
.
popup
)
;
assertState
(
-
1
-
1
"
"
)
;
for
(
let
i
=
0
;
i
<
gMaxResults
;
i
+
+
)
{
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
assertState
(
i
-
1
"
example
.
com
/
browser_urlbarOneOffs
.
js
/
?
"
+
(
gMaxResults
-
i
-
1
)
)
;
}
let
numButtons
=
gURLBar
.
popup
.
oneOffSearchButtons
.
getSelectableButtons
(
true
)
.
length
;
for
(
let
i
=
0
;
i
<
numButtons
;
i
+
+
)
{
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
assertState
(
-
1
i
"
"
)
;
}
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
assertState
(
-
1
-
1
"
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
assertState
(
0
-
1
"
example
.
com
/
browser_urlbarOneOffs
.
js
/
?
"
+
(
gMaxResults
-
1
)
)
;
EventUtils
.
synthesizeKey
(
"
VK_UP
"
{
}
)
assertState
(
-
1
-
1
"
"
)
;
for
(
let
i
=
numButtons
-
1
;
i
>
=
0
;
i
-
-
)
{
EventUtils
.
synthesizeKey
(
"
VK_UP
"
{
}
)
assertState
(
-
1
i
"
"
)
;
}
for
(
let
i
=
gMaxResults
-
1
;
i
>
=
0
;
i
-
-
)
{
EventUtils
.
synthesizeKey
(
"
VK_UP
"
{
}
)
assertState
(
i
-
1
"
example
.
com
/
browser_urlbarOneOffs
.
js
/
?
"
+
(
gMaxResults
-
i
-
1
)
)
;
}
EventUtils
.
synthesizeKey
(
"
VK_UP
"
{
}
)
assertState
(
-
1
-
1
"
"
)
;
yield
hidePopup
(
)
;
}
)
;
add_task
(
function
*
typedValue
(
)
{
let
typedValue
=
"
browser_urlbarOneOffs
"
;
yield
promiseAutocompleteResultPopup
(
typedValue
window
true
)
;
assertState
(
0
-
1
typedValue
)
;
for
(
let
i
=
0
;
i
<
gMaxResults
-
1
;
i
+
+
)
{
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
assertState
(
i
+
1
-
1
"
example
.
com
/
browser_urlbarOneOffs
.
js
/
?
"
+
(
gMaxResults
-
i
-
1
)
)
;
}
let
numButtons
=
gURLBar
.
popup
.
oneOffSearchButtons
.
getSelectableButtons
(
true
)
.
length
;
for
(
let
i
=
0
;
i
<
numButtons
;
i
+
+
)
{
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
assertState
(
-
1
i
typedValue
)
;
}
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
assertState
(
0
-
1
typedValue
)
;
for
(
let
i
=
numButtons
-
1
;
i
>
=
0
;
i
-
-
)
{
EventUtils
.
synthesizeKey
(
"
VK_UP
"
{
}
)
assertState
(
-
1
i
typedValue
)
;
}
for
(
let
i
=
gMaxResults
-
2
;
i
>
=
0
;
i
-
-
)
{
EventUtils
.
synthesizeKey
(
"
VK_UP
"
{
}
)
assertState
(
i
+
1
-
1
"
example
.
com
/
browser_urlbarOneOffs
.
js
/
?
"
+
(
gMaxResults
-
i
-
1
)
)
;
}
EventUtils
.
synthesizeKey
(
"
VK_UP
"
{
}
)
assertState
(
0
-
1
typedValue
)
;
yield
hidePopup
(
)
;
}
)
;
add_task
(
function
*
searchWith
(
)
{
let
typedValue
=
"
foo
"
;
yield
promiseAutocompleteResultPopup
(
typedValue
)
;
assertState
(
0
-
1
typedValue
)
;
let
item
=
gURLBar
.
popup
.
richlistbox
.
firstChild
;
Assert
.
equal
(
item
.
_actionText
.
textContent
"
Search
with
"
+
Services
.
search
.
currentEngine
.
name
"
Sanity
check
:
first
result
'
s
action
text
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_TAB
"
{
}
)
assertState
(
0
0
typedValue
)
;
let
engineName
=
gURLBar
.
popup
.
oneOffSearchButtons
.
selectedButton
.
engine
.
name
;
Assert
.
notEqual
(
engineName
Services
.
search
.
currentEngine
.
name
"
Sanity
check
:
First
one
-
off
engine
should
not
be
"
+
"
the
current
engine
"
)
;
Assert
.
equal
(
item
.
_actionText
.
textContent
"
Search
with
"
+
engineName
"
First
result
'
s
action
text
should
be
updated
"
)
;
yield
hidePopup
(
)
;
}
)
;
add_task
(
function
*
oneOffClick
(
)
{
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
)
;
let
typedValue
=
"
foo
"
;
yield
promiseAutocompleteResultPopup
(
typedValue
)
;
assertState
(
0
-
1
typedValue
)
;
let
oneOffs
=
gURLBar
.
popup
.
oneOffSearchButtons
.
getSelectableButtons
(
true
)
;
let
resultsPromise
=
promiseSearchResultsLoaded
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
oneOffs
[
0
]
{
}
)
;
yield
resultsPromise
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
add_task
(
function
*
oneOffReturn
(
)
{
gBrowser
.
selectedTab
=
gBrowser
.
addTab
(
)
;
let
typedValue
=
"
foo
"
;
yield
promiseAutocompleteResultPopup
(
typedValue
window
true
)
;
assertState
(
0
-
1
typedValue
)
;
EventUtils
.
synthesizeKey
(
"
VK_TAB
"
{
}
)
assertState
(
0
0
typedValue
)
;
let
resultsPromise
=
promiseSearchResultsLoaded
(
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
)
yield
resultsPromise
;
gBrowser
.
removeTab
(
gBrowser
.
selectedTab
)
;
}
)
;
function
assertState
(
result
oneOff
textValue
=
undefined
)
{
Assert
.
equal
(
gURLBar
.
popup
.
selectedIndex
result
"
Expected
result
should
be
selected
"
)
;
Assert
.
equal
(
gURLBar
.
popup
.
oneOffSearchButtons
.
selectedButtonIndex
oneOff
"
Expected
one
-
off
should
be
selected
"
)
;
if
(
textValue
!
=
=
undefined
)
{
Assert
.
equal
(
gURLBar
.
textValue
textValue
"
Expected
textValue
"
)
;
}
}
function
*
hidePopup
(
)
{
EventUtils
.
synthesizeKey
(
"
VK_ESCAPE
"
{
}
)
;
yield
promisePopupHidden
(
gURLBar
.
popup
)
;
}
function
promiseSearchResultsLoaded
(
)
{
let
tab
=
gBrowser
.
selectedTab
;
return
promiseTabLoadEvent
(
tab
)
.
then
(
(
)
=
>
{
Assert
.
equal
(
tab
.
linkedBrowser
.
currentURI
.
spec
"
http
:
/
/
mochi
.
test
:
8888
/
"
'
Expected
"
search
results
"
page
loaded
'
)
;
}
)
;
}
