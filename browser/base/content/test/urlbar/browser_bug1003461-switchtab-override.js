add_task
(
async
function
test_switchtab_override
(
)
{
let
testURL
=
"
http
:
/
/
example
.
org
/
browser
/
browser
/
base
/
content
/
test
/
urlbar
/
dummy_page
.
html
"
;
info
(
"
Opening
first
tab
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
testURL
)
;
info
(
"
Opening
and
selecting
second
tab
"
)
;
let
secondTab
=
gBrowser
.
selectedTab
=
BrowserTestUtils
.
addTab
(
gBrowser
)
;
registerCleanupFunction
(
(
)
=
>
{
try
{
gBrowser
.
removeTab
(
tab
)
;
gBrowser
.
removeTab
(
secondTab
)
;
}
catch
(
ex
)
{
}
}
)
;
info
(
"
Wait
for
autocomplete
"
)
let
deferred
=
Promise
.
defer
(
)
;
let
onSearchComplete
=
gURLBar
.
onSearchComplete
;
registerCleanupFunction
(
(
)
=
>
{
gURLBar
.
onSearchComplete
=
onSearchComplete
;
}
)
;
gURLBar
.
onSearchComplete
=
function
(
)
{
ok
(
gURLBar
.
popupOpen
"
The
autocomplete
popup
is
correctly
open
"
)
;
onSearchComplete
.
apply
(
gURLBar
)
;
deferred
.
resolve
(
)
;
}
gURLBar
.
focus
(
)
;
gURLBar
.
value
=
"
dummy_pag
"
;
EventUtils
.
synthesizeKey
(
"
e
"
{
}
)
;
await
deferred
.
promise
;
info
(
"
Select
second
autocomplete
popup
entry
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
}
)
;
ok
(
/
moz
-
action
:
switchtab
/
.
test
(
gURLBar
.
value
)
"
switch
to
tab
entry
found
"
)
;
info
(
"
Override
switch
-
to
-
tab
"
)
;
deferred
=
Promise
.
defer
(
)
;
let
onTabSelect
=
event
=
>
{
deferred
.
reject
(
new
Error
(
"
Should
have
overridden
switch
to
tab
"
)
)
;
}
;
gBrowser
.
tabContainer
.
addEventListener
(
"
TabSelect
"
onTabSelect
)
;
registerCleanupFunction
(
(
)
=
>
{
gBrowser
.
tabContainer
.
removeEventListener
(
"
TabSelect
"
onTabSelect
)
;
}
)
;
BrowserTestUtils
.
browserLoaded
(
secondTab
.
linkedBrowser
)
.
then
(
deferred
.
resolve
)
;
EventUtils
.
synthesizeKey
(
"
VK_SHIFT
"
{
type
:
"
keydown
"
}
)
;
EventUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
)
;
info
(
gURLBar
.
value
=
{
gURLBar
.
value
}
)
;
EventUtils
.
synthesizeKey
(
"
VK_SHIFT
"
{
type
:
"
keyup
"
}
)
;
await
deferred
.
promise
;
await
PlacesTestUtils
.
clearHistory
(
)
;
}
)
;
