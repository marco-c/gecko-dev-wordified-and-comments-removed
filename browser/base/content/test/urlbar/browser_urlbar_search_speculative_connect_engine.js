"
use
strict
"
;
let
{
HttpServer
}
=
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
httpd
.
js
"
{
}
)
;
let
gHttpServer
=
null
;
let
gScheme
=
"
http
"
;
let
gHost
=
"
localhost
"
;
let
gPort
=
20709
;
const
TEST_ENGINE_BASENAME
=
"
searchSuggestionEngine2
.
xml
"
;
add_task
(
async
function
setup
(
)
{
if
(
!
gHttpServer
)
{
gHttpServer
=
new
HttpServer
(
)
;
try
{
gHttpServer
.
start
(
gPort
)
;
gPort
=
gHttpServer
.
identity
.
primaryPort
;
gHttpServer
.
identity
.
setPrimary
(
gScheme
gHost
gPort
)
;
}
catch
(
ex
)
{
info
(
"
We
can
'
t
launch
our
http
server
successfully
.
"
)
}
}
is
(
gHttpServer
.
identity
.
has
(
gScheme
gHost
gPort
)
true
"
make
sure
we
have
this
domain
listed
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
autoFill
"
true
]
[
"
browser
.
search
.
suggest
.
enabled
"
true
]
[
"
browser
.
urlbar
.
suggest
.
searches
"
true
]
[
"
browser
.
urlbar
.
speculativeConnect
.
enabled
"
true
]
[
"
network
.
http
.
speculative
-
parallel
-
limit
"
6
]
[
"
network
.
dns
.
disableIPv6
"
true
]
]
}
)
;
let
engine
=
await
promiseNewSearchEngine
(
TEST_ENGINE_BASENAME
)
;
let
oldCurrentEngine
=
Services
.
search
.
currentEngine
;
Services
.
search
.
currentEngine
=
engine
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
Services
.
search
.
currentEngine
=
oldCurrentEngine
;
gHttpServer
.
identity
.
remove
(
gScheme
gHost
gPort
)
;
gHttpServer
.
stop
(
(
)
=
>
{
gHttpServer
=
null
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
autofill_tests
(
)
{
info
(
"
Searching
for
'
foo
'
"
)
;
await
promiseAutocompleteResultPopup
(
"
foo
"
window
true
)
;
let
controller
=
gURLBar
.
popup
.
input
.
controller
;
let
style
=
controller
.
getStyleAt
(
0
)
;
is
(
style
.
includes
(
"
searchengine
"
)
true
"
The
first
result
type
is
searchengine
"
)
;
await
promiseSpeculativeConnection
(
gHttpServer
)
;
}
)
;
