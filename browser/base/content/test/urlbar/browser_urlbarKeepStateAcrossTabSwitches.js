"
use
strict
"
;
add_task
(
function
*
(
)
{
let
input
=
"
i
-
definitely
-
dont
-
exist
.
example
.
com
"
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
newtab
"
false
)
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
tab
.
linkedBrowser
.
contentDocument
.
hidden
)
let
errorPageLoaded
=
BrowserTestUtils
.
waitForErrorPage
(
tab
.
linkedBrowser
)
;
gURLBar
.
value
=
input
;
gURLBar
.
select
(
)
;
EventUtils
.
sendKey
(
"
return
"
)
;
yield
errorPageLoaded
;
is
(
gURLBar
.
textValue
input
"
Text
is
still
in
URL
bar
"
)
;
yield
BrowserTestUtils
.
switchTab
(
gBrowser
tab
.
previousSibling
)
;
yield
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
is
(
gURLBar
.
textValue
input
"
Text
is
still
in
URL
bar
after
tab
switch
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
function
*
(
)
{
let
input
=
"
To
be
or
not
to
be
-
that
is
the
question
"
;
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
keyword
.
enabled
"
false
]
]
}
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
newtab
"
false
)
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
!
tab
.
linkedBrowser
.
contentDocument
.
hidden
)
let
errorPageLoaded
=
BrowserTestUtils
.
waitForErrorPage
(
tab
.
linkedBrowser
)
;
gURLBar
.
value
=
input
;
gURLBar
.
select
(
)
;
EventUtils
.
sendKey
(
"
return
"
)
;
yield
errorPageLoaded
;
is
(
gURLBar
.
textValue
input
"
Text
is
still
in
URL
bar
"
)
;
is
(
tab
.
linkedBrowser
.
userTypedValue
input
"
Text
still
stored
on
browser
"
)
;
yield
BrowserTestUtils
.
switchTab
(
gBrowser
tab
.
previousSibling
)
;
yield
BrowserTestUtils
.
switchTab
(
gBrowser
tab
)
;
is
(
gURLBar
.
textValue
input
"
Text
is
still
in
URL
bar
after
tab
switch
"
)
;
is
(
tab
.
linkedBrowser
.
userTypedValue
input
"
Text
still
stored
on
browser
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
