this
.
EXPORTED_SYMBOLS
=
[
"
Panel
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
this
.
Panel
=
function
(
panelElt
iframeURL
)
{
this
.
p
=
panelElt
;
this
.
iframeURL
=
iframeURL
;
this
.
_initPanel
(
)
;
this
.
urlbar
.
addEventListener
(
"
keydown
"
this
)
;
this
.
urlbar
.
addEventListener
(
"
input
"
this
)
;
this
.
_emitQueue
=
[
]
;
}
;
this
.
Panel
.
prototype
=
{
get
document
(
)
{
return
this
.
p
.
ownerDocument
;
}
get
window
(
)
{
return
this
.
document
.
defaultView
;
}
get
urlbar
(
)
{
return
this
.
window
.
gURLBar
;
}
iframe
:
null
get
iframeDocument
(
)
{
return
this
.
iframe
.
contentDocument
;
}
get
iframeWindow
(
)
{
return
this
.
iframe
.
contentWindow
;
}
destroy
(
)
{
this
.
p
.
destroyAddonIframe
(
this
)
;
this
.
urlbar
.
removeEventListener
(
"
keydown
"
this
)
;
this
.
urlbar
.
removeEventListener
(
"
input
"
this
)
;
}
_initPanel
(
)
{
this
.
iframe
=
this
.
p
.
initAddonIframe
(
this
{
_invalidate
:
this
.
_invalidate
.
bind
(
this
)
}
)
;
if
(
!
this
.
iframe
)
{
return
;
}
let
onLoad
=
event
=
>
{
this
.
iframe
.
removeEventListener
(
"
load
"
onLoad
true
)
;
this
.
_initIframeContent
(
event
.
target
.
defaultView
)
;
}
;
this
.
iframe
.
addEventListener
(
"
load
"
onLoad
true
)
;
this
.
iframe
.
setAttribute
(
"
src
"
this
.
iframeURL
)
;
}
_initIframeContent
(
win
)
{
win
=
XPCNativeWrapper
.
unwrap
(
win
)
;
let
apiInstance
=
Cu
.
cloneInto
(
iframeAPIPrototype
win
{
cloneFunctions
:
true
}
)
;
apiInstance
.
_panel
=
this
;
Object
.
defineProperty
(
win
"
urlbar
"
{
get
(
)
{
return
apiInstance
;
}
}
)
;
}
_invalidate
(
)
{
this
.
_emit
(
"
reset
"
)
;
this
.
_currentIndex
=
0
;
if
(
this
.
_appendResultTimeout
)
{
this
.
window
.
clearTimeout
(
this
.
_appendResultTimeout
)
;
}
this
.
_appendCurrentResult
(
)
;
}
_appendCurrentResult
(
)
{
let
controller
=
this
.
p
.
mInput
.
controller
;
for
(
let
i
=
0
;
i
<
this
.
p
.
maxResults
;
i
+
+
)
{
let
idx
=
this
.
_currentIndex
;
if
(
idx
>
=
this
.
p
.
_matchCount
)
{
break
;
}
let
url
=
controller
.
getValueAt
(
idx
)
;
let
action
=
this
.
urlbar
.
_parseActionUrl
(
url
)
;
this
.
_emit
(
"
result
"
{
url
action
image
:
controller
.
getImageAt
(
idx
)
title
:
controller
.
getCommentAt
(
idx
)
type
:
controller
.
getStyleAt
(
idx
)
text
:
controller
.
searchString
.
replace
(
/
^
\
s
+
/
"
"
)
.
replace
(
/
\
s
+
/
"
"
)
}
)
;
this
.
_currentIndex
+
+
;
}
if
(
this
.
_currentIndex
<
this
.
p
.
matchCount
)
{
this
.
_appendResultTimeout
=
this
.
window
.
setTimeout
(
(
)
=
>
{
this
.
_appendCurrentResult
(
)
;
}
)
;
}
}
get
height
(
)
{
return
this
.
iframe
.
getBoundingClientRect
(
)
.
height
;
}
set
height
(
val
)
{
this
.
p
.
removeAttribute
(
"
height
"
)
;
this
.
iframe
.
style
.
height
=
val
+
"
px
"
;
}
handleEvent
(
event
)
{
let
methName
=
"
_on
"
+
event
.
type
[
0
]
.
toUpperCase
(
)
+
event
.
type
.
substr
(
1
)
;
this
[
methName
]
(
event
)
;
}
_onKeydown
(
event
)
{
let
emittedEvent
=
this
.
_emitUrlbarEvent
(
event
)
;
if
(
emittedEvent
&
&
emittedEvent
.
defaultPrevented
)
{
event
.
preventDefault
(
)
;
event
.
stopPropagation
(
)
;
}
}
_onInput
(
event
)
{
this
.
_emitUrlbarEvent
(
event
)
;
}
_emitUrlbarEvent
(
event
)
{
let
properties
=
[
"
altKey
"
"
code
"
"
ctrlKey
"
"
key
"
"
metaKey
"
"
shiftKey
"
]
;
let
detail
=
properties
.
reduce
(
(
memo
prop
)
=
>
{
memo
[
prop
]
=
event
[
prop
]
;
return
memo
;
}
{
}
)
;
return
this
.
_emit
(
event
.
type
detail
)
;
}
_emit
(
eventName
detailObj
=
null
)
{
this
.
_emitQueue
.
push
(
{
name
:
eventName
detail
:
detailObj
}
)
;
return
this
.
_processEmitQueue
(
)
;
}
_processEmitQueue
(
)
{
if
(
!
this
.
_emitQueue
.
length
)
{
return
null
;
}
if
(
!
this
.
iframeWindow
)
{
if
(
!
this
.
_processEmitQueueTimer
)
{
this
.
_processEmitQueueTimer
=
setInterval
(
(
)
=
>
{
this
.
_processEmitQueue
(
)
;
}
100
)
;
}
return
null
;
}
if
(
this
.
_processEmitQueueTimer
)
{
clearInterval
(
this
.
_processEmitQueueTimer
)
;
delete
this
.
_processEmitQueueTimer
;
}
let
{
name
detail
}
=
this
.
_emitQueue
.
shift
(
)
;
let
win
=
XPCNativeWrapper
.
unwrap
(
this
.
iframeWindow
)
;
let
event
=
new
this
.
iframeWindow
.
CustomEvent
(
name
{
detail
:
Cu
.
cloneInto
(
detail
win
)
cancelable
:
true
}
)
;
this
.
iframeWindow
.
dispatchEvent
(
event
)
;
setTimeout
(
(
)
=
>
{
this
.
_processEmitQueue
(
)
;
}
100
)
;
return
event
;
}
}
;
let
iframeAPIPrototype
=
{
getPanelHeight
(
)
{
return
this
.
_panel
.
height
;
}
setPanelHeight
(
val
)
{
this
.
_panel
.
height
=
val
;
}
getValue
(
)
{
return
this
.
_panel
.
urlbar
.
value
;
}
setValue
(
val
)
{
this
.
_panel
.
urlbar
.
value
=
val
;
}
getMaxResults
(
)
{
return
this
.
_panel
.
p
.
maxResults
;
}
setMaxResults
(
val
)
{
this
.
_panel
.
p
.
maxResults
=
val
;
}
enter
(
)
{
this
.
_panel
.
urlbar
.
handleCommand
(
)
;
}
}
;
