"
use
strict
"
;
add_task
(
async
function
init
(
)
{
let
which
=
gURLBar
.
_whichSearchSuggestionsNotification
|
|
undefined
;
registerCleanupFunction
(
async
function
(
)
{
if
(
which
=
=
=
undefined
)
{
delete
gURLBar
.
_whichSearchSuggestionsNotification
;
}
else
{
gURLBar
.
_whichSearchSuggestionsNotification
=
which
;
}
Services
.
prefs
.
clearUserPref
(
"
timesBeforeHidingSuggestionsHint
"
)
;
gURLBar
.
handleRevert
(
)
;
gURLBar
.
blur
(
)
;
Assert
.
ok
(
!
gURLBar
.
popup
.
popupOpen
"
popup
should
be
closed
"
)
;
}
)
;
}
)
;
add_task
(
async
function
basic
(
)
{
let
resetNotification
=
enableSearchSuggestionsNotification
(
)
;
gURLBar
.
search
(
"
basic
"
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
assertUrlbarValue
(
"
basic
"
)
;
assertSearchSuggestionsNotificationVisible
(
true
)
;
assertOneOffButtonsVisible
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
promisePopupHidden
(
gURLBar
.
popup
)
;
resetNotification
(
)
;
}
)
;
add_task
(
async
function
disableSearchSuggestionsNotification
(
)
{
let
resetNotification
=
enableSearchSuggestionsNotification
(
)
;
gURLBar
.
search
(
"
disableSearchSuggestionsNotification
"
{
disableSearchSuggestionsNotification
:
true
}
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
assertUrlbarValue
(
"
disableSearchSuggestionsNotification
"
)
;
assertSearchSuggestionsNotificationVisible
(
false
)
;
assertOneOffButtonsVisible
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
promisePopupHidden
(
gURLBar
.
popup
)
;
gURLBar
.
search
(
"
disableSearchSuggestionsNotification
again
"
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
assertUrlbarValue
(
"
disableSearchSuggestionsNotification
again
"
)
;
assertSearchSuggestionsNotificationVisible
(
true
)
;
assertOneOffButtonsVisible
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
promisePopupHidden
(
gURLBar
.
popup
)
;
resetNotification
(
)
;
}
)
;
add_task
(
async
function
disableOneOffButtons
(
)
{
let
resetNotification
=
enableSearchSuggestionsNotification
(
)
;
gURLBar
.
search
(
"
disableOneOffButtons
"
{
disableOneOffButtons
:
true
}
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
assertUrlbarValue
(
"
disableOneOffButtons
"
)
;
assertSearchSuggestionsNotificationVisible
(
true
)
;
assertOneOffButtonsVisible
(
false
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
promisePopupHidden
(
gURLBar
.
popup
)
;
gURLBar
.
search
(
"
disableOneOffButtons
again
"
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
assertUrlbarValue
(
"
disableOneOffButtons
again
"
)
;
assertSearchSuggestionsNotificationVisible
(
true
)
;
assertOneOffButtonsVisible
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
promisePopupHidden
(
gURLBar
.
popup
)
;
resetNotification
(
)
;
}
)
;
add_task
(
async
function
disableSearchSuggestionsNotificationAndOneOffButtons
(
)
{
let
resetNotification
=
enableSearchSuggestionsNotification
(
)
;
gURLBar
.
search
(
"
disableSearchSuggestionsNotificationAndOneOffButtons
"
{
disableSearchSuggestionsNotification
:
true
disableOneOffButtons
:
true
}
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
assertUrlbarValue
(
"
disableSearchSuggestionsNotificationAndOneOffButtons
"
)
;
assertSearchSuggestionsNotificationVisible
(
false
)
;
assertOneOffButtonsVisible
(
false
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
promisePopupHidden
(
gURLBar
.
popup
)
;
gURLBar
.
search
(
"
disableSearchSuggestionsNotificationAndOneOffButtons
again
"
)
;
await
promiseSearchComplete
(
)
;
await
waitForAutocompleteResultAt
(
0
)
;
assertUrlbarValue
(
"
disableSearchSuggestionsNotificationAndOneOffButtons
again
"
)
;
assertSearchSuggestionsNotificationVisible
(
true
)
;
assertOneOffButtonsVisible
(
true
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
await
promisePopupHidden
(
gURLBar
.
popup
)
;
resetNotification
(
)
;
}
)
;
function
enableSearchSuggestionsNotification
(
)
{
let
which
=
gURLBar
.
_whichSearchSuggestionsNotification
|
|
undefined
;
gURLBar
.
_whichSearchSuggestionsNotification
=
"
opt
-
out
"
;
Services
.
prefs
.
setIntPref
(
"
timesBeforeHidingSuggestionsHint
"
10
)
;
return
function
reset
(
)
{
if
(
which
=
=
=
undefined
)
{
delete
gURLBar
.
_whichSearchSuggestionsNotification
;
}
else
{
gURLBar
.
_whichSearchSuggestionsNotification
=
which
;
}
Services
.
prefs
.
clearUserPref
(
"
timesBeforeHidingSuggestionsHint
"
)
;
}
;
}
function
assertSearchSuggestionsNotificationVisible
(
visible
)
{
Assert
.
equal
(
gURLBar
.
popup
.
classList
.
contains
(
"
showSearchSuggestionsNotification
"
)
visible
)
;
Assert
.
equal
(
window
.
getComputedStyle
(
gURLBar
.
popup
.
searchSuggestionsNotification
)
.
display
visible
?
"
-
moz
-
deck
"
:
"
none
"
)
;
}
function
assertOneOffButtonsVisible
(
visible
)
{
Assert
.
equal
(
gURLBar
.
popup
.
oneOffSearchesEnabled
visible
)
;
Assert
.
equal
(
window
.
getComputedStyle
(
gURLBar
.
popup
.
oneOffSearchButtons
)
.
display
visible
?
"
-
moz
-
box
"
:
"
none
"
)
;
}
function
assertUrlbarValue
(
value
)
{
Assert
.
equal
(
gURLBar
.
value
value
)
;
let
controller
=
gURLBar
.
controller
;
Assert
.
ok
(
controller
.
matchCount
>
0
)
;
let
action
=
gURLBar
.
_parseActionUrl
(
controller
.
getValueAt
(
0
)
)
;
Assert
.
ok
(
action
)
;
Assert
.
equal
(
action
.
type
"
searchengine
"
)
;
Assert
.
equal
(
action
.
params
.
searchQuery
value
)
;
}
