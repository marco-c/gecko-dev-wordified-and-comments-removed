"
use
strict
"
;
let
gHttpServer
=
null
;
let
gScheme
=
"
http
"
;
let
gHost
=
"
localhost
"
;
let
gPort
=
-
1
;
let
gIsSpeculativeConnected
=
false
;
add_task
(
async
function
setup
(
)
{
gHttpServer
=
runHttpServer
(
gScheme
gHost
gPort
)
;
gPort
=
gHttpServer
.
identity
.
primaryPort
;
await
PlacesTestUtils
.
addVisits
(
[
{
uri
:
{
gScheme
}
:
/
/
{
gHost
}
:
{
gPort
}
title
:
"
test
visit
for
speculative
connection
"
transition
:
Ci
.
nsINavHistoryService
.
TRANSITION_TYPED
}
]
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
autoFill
"
true
]
[
"
browser
.
search
.
suggest
.
enabled
"
false
]
[
"
browser
.
urlbar
.
speculativeConnect
.
enabled
"
true
]
[
"
network
.
http
.
speculative
-
parallel
-
limit
"
6
]
[
"
network
.
dns
.
disableIPv6
"
true
]
]
}
)
;
registerCleanupFunction
(
async
function
(
)
{
await
PlacesUtils
.
history
.
clear
(
)
;
gHttpServer
.
identity
.
remove
(
gScheme
gHost
gPort
)
;
gHttpServer
.
stop
(
(
)
=
>
{
gHttpServer
=
null
;
}
)
;
}
)
;
}
)
;
add_task
(
async
function
popup_mousedown_tests
(
)
{
const
test
=
{
search
:
gHost
.
substr
(
1
4
)
completeValue
:
{
gScheme
}
:
/
/
{
gHost
}
:
{
gPort
}
/
}
;
info
(
Searching
for
'
{
test
.
search
}
'
)
;
await
promiseAutocompleteResultPopup
(
test
.
search
window
true
)
;
let
controller
=
gURLBar
.
popup
.
input
.
controller
;
let
value
=
controller
.
getFinalCompleteValueAt
(
1
)
;
info
(
The
value
of
the
second
item
is
{
value
}
)
;
is
(
value
test
.
completeValue
"
The
second
item
has
the
url
we
visited
.
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
!
gURLBar
.
popup
.
richlistbox
.
childNodes
[
1
]
&
&
is_visible
(
gURLBar
.
popup
.
richlistbox
.
childNodes
[
1
]
)
;
}
"
the
node
is
there
.
"
)
;
let
listitem
=
gURLBar
.
popup
.
richlistbox
.
childNodes
[
1
]
;
EventUtils
.
synthesizeMouse
(
listitem
10
10
{
type
:
"
mousedown
"
}
window
)
;
is
(
gURLBar
.
popup
.
richlistbox
.
selectedIndex
1
"
The
second
item
is
selected
"
)
;
await
promiseSpeculativeConnection
(
gHttpServer
)
;
is
(
gHttpServer
.
connectionNumber
1
{
gHttpServer
.
connectionNumber
}
speculative
connection
has
been
setup
.
)
;
}
)
;
