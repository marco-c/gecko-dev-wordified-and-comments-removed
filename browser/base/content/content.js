ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
global
=
this
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ContentLinkHandler
:
"
resource
:
/
/
/
modules
/
ContentLinkHandler
.
jsm
"
ContentMetaHandler
:
"
resource
:
/
/
/
modules
/
ContentMetaHandler
.
jsm
"
ContentWebRTC
:
"
resource
:
/
/
/
modules
/
ContentWebRTC
.
jsm
"
LoginFormFactory
:
"
resource
:
/
/
gre
/
modules
/
LoginManagerContent
.
jsm
"
InsecurePasswordUtils
:
"
resource
:
/
/
gre
/
modules
/
InsecurePasswordUtils
.
jsm
"
FormSubmitObserver
:
"
resource
:
/
/
/
modules
/
FormSubmitObserver
.
jsm
"
PageMetadata
:
"
resource
:
/
/
gre
/
modules
/
PageMetadata
.
jsm
"
ContextMenuChild
:
"
resource
:
/
/
/
actors
/
ContextMenuChild
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
LoginManagerContent
"
(
)
=
>
{
let
tmp
=
{
}
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LoginManagerContent
.
jsm
"
tmp
)
;
tmp
.
LoginManagerContent
.
setupEventListeners
(
global
)
;
return
tmp
.
LoginManagerContent
;
}
)
;
XPCOMUtils
.
defineLazyProxy
(
this
"
formSubmitObserver
"
(
)
=
>
{
return
new
FormSubmitObserver
(
content
this
)
;
}
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIFormSubmitObserver
Ci
.
nsISupportsWeakReference
]
)
}
)
;
Services
.
obs
.
addObserver
(
formSubmitObserver
"
invalidformsubmit
"
true
)
;
addMessageListener
(
"
RemoteLogins
:
fillForm
"
function
(
message
)
{
message
.
objects
.
inputElement
=
ContextMenuChild
.
getTarget
(
global
message
"
inputElement
"
)
;
LoginManagerContent
.
receiveMessage
(
message
content
)
;
}
)
;
addEventListener
(
"
DOMFormHasPassword
"
function
(
event
)
{
LoginManagerContent
.
onDOMFormHasPassword
(
event
content
)
;
let
formLike
=
LoginFormFactory
.
createFromForm
(
event
.
originalTarget
)
;
InsecurePasswordUtils
.
reportInsecurePasswords
(
formLike
)
;
}
)
;
addEventListener
(
"
DOMInputPasswordAdded
"
function
(
event
)
{
LoginManagerContent
.
onDOMInputPasswordAdded
(
event
content
)
;
let
formLike
=
LoginFormFactory
.
createFromField
(
event
.
originalTarget
)
;
InsecurePasswordUtils
.
reportInsecurePasswords
(
formLike
)
;
}
)
;
addEventListener
(
"
DOMAutoComplete
"
function
(
event
)
{
LoginManagerContent
.
onUsernameInput
(
event
)
;
}
)
;
new
ContentLinkHandler
(
this
)
;
ContentMetaHandler
.
init
(
this
)
;
void
content
;
addEventListener
(
"
DOMWindowFocus
"
function
(
event
)
{
sendAsyncMessage
(
"
DOMWindowFocus
"
{
}
)
;
}
false
)
;
var
ContentWebRTCShim
=
message
=
>
ContentWebRTC
.
receiveMessage
(
message
)
;
addMessageListener
(
"
rtcpeer
:
Allow
"
ContentWebRTCShim
)
;
addMessageListener
(
"
rtcpeer
:
Deny
"
ContentWebRTCShim
)
;
addMessageListener
(
"
webrtc
:
Allow
"
ContentWebRTCShim
)
;
addMessageListener
(
"
webrtc
:
Deny
"
ContentWebRTCShim
)
;
addMessageListener
(
"
webrtc
:
StopSharing
"
ContentWebRTCShim
)
;
var
PageMetadataMessenger
=
{
init
(
)
{
addMessageListener
(
"
PageMetadata
:
GetPageData
"
this
)
;
addMessageListener
(
"
PageMetadata
:
GetMicroformats
"
this
)
;
this
.
init
=
null
;
}
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
PageMetadata
:
GetPageData
"
:
{
let
target
=
ContextMenuChild
.
getTarget
(
global
message
)
;
let
result
=
PageMetadata
.
getData
(
content
.
document
target
)
;
sendAsyncMessage
(
"
PageMetadata
:
PageDataResult
"
result
)
;
break
;
}
case
"
PageMetadata
:
GetMicroformats
"
:
{
let
target
=
ContextMenuChild
.
getTarget
(
global
message
)
;
let
result
=
PageMetadata
.
getMicroformats
(
content
.
document
target
)
;
sendAsyncMessage
(
"
PageMetadata
:
MicroformatsResult
"
result
)
;
break
;
}
}
}
}
;
PageMetadataMessenger
.
init
(
)
;
let
OfflineApps
=
{
_docId
:
0
_docIdMap
:
new
Map
(
)
_docManifestSet
:
new
Set
(
)
_observerAdded
:
false
registerWindow
(
aWindow
)
{
if
(
!
this
.
_observerAdded
)
{
this
.
_observerAdded
=
true
;
Services
.
obs
.
addObserver
(
this
"
offline
-
cache
-
update
-
completed
"
true
)
;
}
let
manifestURI
=
this
.
_getManifestURI
(
aWindow
)
;
this
.
_docManifestSet
.
add
(
manifestURI
.
spec
)
;
}
handleEvent
(
event
)
{
if
(
event
.
type
=
=
"
MozApplicationManifest
"
)
{
this
.
offlineAppRequested
(
event
.
originalTarget
.
defaultView
)
;
}
}
_getManifestURI
(
aWindow
)
{
if
(
!
aWindow
.
document
.
documentElement
)
return
null
;
var
attr
=
aWindow
.
document
.
documentElement
.
getAttribute
(
"
manifest
"
)
;
if
(
!
attr
)
return
null
;
try
{
return
Services
.
io
.
newURI
(
attr
aWindow
.
document
.
characterSet
Services
.
io
.
newURI
(
aWindow
.
location
.
href
)
)
;
}
catch
(
e
)
{
return
null
;
}
}
offlineAppRequested
(
aContentWindow
)
{
this
.
registerWindow
(
aContentWindow
)
;
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
offline
-
apps
.
notify
"
)
)
{
return
;
}
let
currentURI
=
aContentWindow
.
document
.
documentURIObject
;
if
(
Services
.
perms
.
testExactPermission
(
currentURI
"
offline
-
app
"
)
!
=
Services
.
perms
.
UNKNOWN_ACTION
)
return
;
try
{
if
(
Services
.
prefs
.
getBoolPref
(
"
offline
-
apps
.
allow_by_default
"
)
)
{
return
;
}
}
catch
(
e
)
{
}
let
docId
=
+
+
this
.
_docId
;
this
.
_docIdMap
.
set
(
docId
Cu
.
getWeakReference
(
aContentWindow
.
document
)
)
;
sendAsyncMessage
(
"
OfflineApps
:
RequestPermission
"
{
uri
:
currentURI
.
spec
docId
}
)
;
}
_startFetching
(
aDocument
)
{
if
(
!
aDocument
.
documentElement
)
return
;
let
manifestURI
=
this
.
_getManifestURI
(
aDocument
.
defaultView
)
;
if
(
!
manifestURI
)
return
;
var
updateService
=
Cc
[
"
mozilla
.
org
/
offlinecacheupdate
-
service
;
1
"
]
.
getService
(
Ci
.
nsIOfflineCacheUpdateService
)
;
updateService
.
scheduleUpdate
(
manifestURI
aDocument
.
documentURIObject
aDocument
.
nodePrincipal
aDocument
.
defaultView
)
;
}
receiveMessage
(
aMessage
)
{
if
(
aMessage
.
name
=
=
"
OfflineApps
:
StartFetching
"
)
{
let
doc
=
this
.
_docIdMap
.
get
(
aMessage
.
data
.
docId
)
;
doc
=
doc
&
&
doc
.
get
(
)
;
if
(
doc
)
{
this
.
_startFetching
(
doc
)
;
}
this
.
_docIdMap
.
delete
(
aMessage
.
data
.
docId
)
;
}
}
observe
(
aSubject
aTopic
aState
)
{
if
(
aTopic
=
=
"
offline
-
cache
-
update
-
completed
"
)
{
let
cacheUpdate
=
aSubject
.
QueryInterface
(
Ci
.
nsIOfflineCacheUpdate
)
;
let
uri
=
cacheUpdate
.
manifestURI
;
if
(
uri
&
&
this
.
_docManifestSet
.
has
(
uri
.
spec
)
)
{
sendAsyncMessage
(
"
OfflineApps
:
CheckUsage
"
{
uri
:
uri
.
spec
}
)
;
}
}
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
}
;
addEventListener
(
"
MozApplicationManifest
"
OfflineApps
false
)
;
addMessageListener
(
"
OfflineApps
:
StartFetching
"
OfflineApps
)
;
