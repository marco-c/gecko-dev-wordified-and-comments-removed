ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
global
=
this
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ContentLinkHandler
:
"
resource
:
/
/
/
modules
/
ContentLinkHandler
.
jsm
"
ContentMetaHandler
:
"
resource
:
/
/
/
modules
/
ContentMetaHandler
.
jsm
"
ContentWebRTC
:
"
resource
:
/
/
/
modules
/
ContentWebRTC
.
jsm
"
LoginFormFactory
:
"
resource
:
/
/
gre
/
modules
/
LoginManagerContent
.
jsm
"
InsecurePasswordUtils
:
"
resource
:
/
/
gre
/
modules
/
InsecurePasswordUtils
.
jsm
"
FormSubmitObserver
:
"
resource
:
/
/
/
modules
/
FormSubmitObserver
.
jsm
"
PageMetadata
:
"
resource
:
/
/
gre
/
modules
/
PageMetadata
.
jsm
"
ContextMenuChild
:
"
resource
:
/
/
/
actors
/
ContextMenuChild
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
LoginManagerContent
"
(
)
=
>
{
let
tmp
=
{
}
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LoginManagerContent
.
jsm
"
tmp
)
;
tmp
.
LoginManagerContent
.
setupEventListeners
(
global
)
;
return
tmp
.
LoginManagerContent
;
}
)
;
XPCOMUtils
.
defineLazyProxy
(
this
"
formSubmitObserver
"
(
)
=
>
{
return
new
FormSubmitObserver
(
content
this
)
;
}
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIFormSubmitObserver
Ci
.
nsISupportsWeakReference
]
)
}
)
;
Services
.
obs
.
addObserver
(
formSubmitObserver
"
invalidformsubmit
"
true
)
;
addMessageListener
(
"
RemoteLogins
:
fillForm
"
function
(
message
)
{
message
.
objects
.
inputElement
=
ContextMenuChild
.
getTarget
(
global
message
"
inputElement
"
)
;
LoginManagerContent
.
receiveMessage
(
message
content
)
;
}
)
;
addEventListener
(
"
DOMFormHasPassword
"
function
(
event
)
{
LoginManagerContent
.
onDOMFormHasPassword
(
event
content
)
;
let
formLike
=
LoginFormFactory
.
createFromForm
(
event
.
originalTarget
)
;
InsecurePasswordUtils
.
reportInsecurePasswords
(
formLike
)
;
}
)
;
addEventListener
(
"
DOMInputPasswordAdded
"
function
(
event
)
{
LoginManagerContent
.
onDOMInputPasswordAdded
(
event
content
)
;
let
formLike
=
LoginFormFactory
.
createFromField
(
event
.
originalTarget
)
;
InsecurePasswordUtils
.
reportInsecurePasswords
(
formLike
)
;
}
)
;
addEventListener
(
"
DOMAutoComplete
"
function
(
event
)
{
LoginManagerContent
.
onUsernameInput
(
event
)
;
}
)
;
new
ContentLinkHandler
(
this
)
;
ContentMetaHandler
.
init
(
this
)
;
void
content
;
addEventListener
(
"
DOMWindowFocus
"
function
(
event
)
{
sendAsyncMessage
(
"
DOMWindowFocus
"
{
}
)
;
}
false
)
;
var
ContentWebRTCShim
=
message
=
>
ContentWebRTC
.
receiveMessage
(
message
)
;
addMessageListener
(
"
rtcpeer
:
Allow
"
ContentWebRTCShim
)
;
addMessageListener
(
"
rtcpeer
:
Deny
"
ContentWebRTCShim
)
;
addMessageListener
(
"
webrtc
:
Allow
"
ContentWebRTCShim
)
;
addMessageListener
(
"
webrtc
:
Deny
"
ContentWebRTCShim
)
;
addMessageListener
(
"
webrtc
:
StopSharing
"
ContentWebRTCShim
)
;
var
PageMetadataMessenger
=
{
init
(
)
{
addMessageListener
(
"
PageMetadata
:
GetPageData
"
this
)
;
addMessageListener
(
"
PageMetadata
:
GetMicroformats
"
this
)
;
this
.
init
=
null
;
}
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
PageMetadata
:
GetPageData
"
:
{
let
target
=
ContextMenuChild
.
getTarget
(
global
message
)
;
let
result
=
PageMetadata
.
getData
(
content
.
document
target
)
;
sendAsyncMessage
(
"
PageMetadata
:
PageDataResult
"
result
)
;
break
;
}
case
"
PageMetadata
:
GetMicroformats
"
:
{
let
target
=
ContextMenuChild
.
getTarget
(
global
message
)
;
let
result
=
PageMetadata
.
getMicroformats
(
content
.
document
target
)
;
sendAsyncMessage
(
"
PageMetadata
:
MicroformatsResult
"
result
)
;
break
;
}
}
}
}
;
PageMetadataMessenger
.
init
(
)
;
