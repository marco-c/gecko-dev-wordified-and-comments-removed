var
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ContentMetaHandler
:
"
resource
:
/
/
/
modules
/
ContentMetaHandler
.
jsm
"
LoginFormFactory
:
"
resource
:
/
/
gre
/
modules
/
LoginFormFactory
.
jsm
"
LoginManagerChild
:
"
resource
:
/
/
gre
/
modules
/
LoginManagerChild
.
jsm
"
InsecurePasswordUtils
:
"
resource
:
/
/
gre
/
modules
/
InsecurePasswordUtils
.
jsm
"
}
)
;
addMessageListener
(
"
PasswordManager
:
fillForm
"
function
(
message
)
{
LoginManagerChild
.
receiveMessage
(
message
content
)
;
}
)
;
addMessageListener
(
"
PasswordManager
:
fillGeneratedPassword
"
function
(
message
)
{
LoginManagerChild
.
receiveMessage
(
message
content
)
;
}
)
;
function
shouldIgnoreLoginManagerEvent
(
event
)
{
let
nodePrincipal
=
event
.
target
.
nodePrincipal
;
return
(
nodePrincipal
.
isSystemPrincipal
|
|
nodePrincipal
.
isNullPrincipal
|
|
nodePrincipal
.
schemeIs
(
"
about
"
)
)
;
}
addEventListener
(
"
DOMFormBeforeSubmit
"
function
(
event
)
{
if
(
shouldIgnoreLoginManagerEvent
(
event
)
)
{
return
;
}
this
.
LoginManagerChild
.
forWindow
(
content
)
.
onDOMFormBeforeSubmit
(
event
)
;
}
)
;
addEventListener
(
"
DOMFormHasPassword
"
function
(
event
)
{
if
(
shouldIgnoreLoginManagerEvent
(
event
)
)
{
return
;
}
this
.
LoginManagerChild
.
forWindow
(
content
)
.
onDOMFormHasPassword
(
event
)
;
let
formLike
=
LoginFormFactory
.
createFromForm
(
event
.
originalTarget
)
;
InsecurePasswordUtils
.
reportInsecurePasswords
(
formLike
)
;
}
)
;
addEventListener
(
"
DOMInputPasswordAdded
"
function
(
event
)
{
if
(
shouldIgnoreLoginManagerEvent
(
event
)
)
{
return
;
}
this
.
LoginManagerChild
.
forWindow
(
content
)
.
onDOMInputPasswordAdded
(
event
content
)
;
let
formLike
=
LoginFormFactory
.
createFromField
(
event
.
originalTarget
)
;
InsecurePasswordUtils
.
reportInsecurePasswords
(
formLike
)
;
}
)
;
ContentMetaHandler
.
init
(
this
)
;
void
content
;
