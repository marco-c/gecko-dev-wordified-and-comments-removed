#
ifdef
0
#
endif
const
THUMBNAIL_PLACEHOLDER_ENABLED
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
newtabpage
.
thumbnailPlaceholder
"
)
;
function
Site
(
aNode
aLink
)
{
this
.
_node
=
aNode
;
this
.
_node
.
_newtabSite
=
this
;
this
.
_link
=
aLink
;
this
.
_render
(
)
;
this
.
_addEventHandlers
(
)
;
}
Site
.
prototype
=
{
get
node
(
)
{
return
this
.
_node
;
}
get
link
(
)
{
return
this
.
_link
;
}
get
url
(
)
{
return
this
.
link
.
url
;
}
get
title
(
)
{
return
this
.
link
.
title
|
|
this
.
link
.
url
;
}
get
cell
(
)
{
let
parentNode
=
this
.
node
.
parentNode
;
return
parentNode
&
&
parentNode
.
_newtabCell
;
}
pin
:
function
Site_pin
(
aIndex
)
{
if
(
typeof
aIndex
=
=
"
undefined
"
)
aIndex
=
this
.
cell
.
index
;
this
.
_updateAttributes
(
true
)
;
gPinnedLinks
.
pin
(
this
.
_link
aIndex
)
;
}
unpin
:
function
Site_unpin
(
)
{
if
(
this
.
isPinned
(
)
)
{
this
.
_updateAttributes
(
false
)
;
gPinnedLinks
.
unpin
(
this
.
_link
)
;
gUpdater
.
updateGrid
(
)
;
}
}
isPinned
:
function
Site_isPinned
(
)
{
return
gPinnedLinks
.
isPinned
(
this
.
_link
)
;
}
block
:
function
Site_block
(
)
{
if
(
!
gBlockedLinks
.
isBlocked
(
this
.
_link
)
)
{
gUndoDialog
.
show
(
this
)
;
gBlockedLinks
.
block
(
this
.
_link
)
;
gUpdater
.
updateGrid
(
)
;
}
}
_querySelector
:
function
Site_querySelector
(
aSelector
)
{
return
this
.
node
.
querySelector
(
aSelector
)
;
}
_updateAttributes
:
function
(
aPinned
)
{
let
control
=
this
.
_querySelector
(
"
.
newtab
-
control
-
pin
"
)
;
if
(
aPinned
)
{
this
.
node
.
setAttribute
(
"
pinned
"
true
)
;
control
.
setAttribute
(
"
title
"
newTabString
(
"
unpin
"
)
)
;
}
else
{
this
.
node
.
removeAttribute
(
"
pinned
"
)
;
control
.
setAttribute
(
"
title
"
newTabString
(
"
pin
"
)
)
;
}
}
_newTabString
:
function
(
str
substrArr
)
{
let
regExp
=
/
%
[
0
-
9
]
\
S
/
g
;
let
matches
;
while
(
(
matches
=
regExp
.
exec
(
str
)
)
)
{
let
match
=
matches
[
0
]
;
let
index
=
match
.
charAt
(
1
)
;
str
=
str
.
replace
(
match
substrArr
[
index
-
1
]
)
;
}
return
str
;
}
_render
:
function
Site_render
(
)
{
let
enhanced
=
gAllPages
.
enhanced
&
&
DirectoryLinksProvider
.
getEnhancedLink
(
this
.
link
)
;
let
url
=
this
.
url
;
let
title
=
enhanced
&
&
enhanced
.
title
?
enhanced
.
title
:
this
.
link
.
type
=
=
"
history
"
?
this
.
link
.
baseDomain
:
this
.
title
;
let
tooltip
=
(
this
.
title
=
=
url
?
this
.
title
:
this
.
title
+
"
\
n
"
+
url
)
;
let
link
=
this
.
_querySelector
(
"
.
newtab
-
link
"
)
;
link
.
setAttribute
(
"
title
"
tooltip
)
;
link
.
setAttribute
(
"
href
"
url
)
;
this
.
node
.
setAttribute
(
"
type
"
this
.
link
.
type
)
;
let
titleNode
=
this
.
_querySelector
(
"
.
newtab
-
title
"
)
;
titleNode
.
textContent
=
title
;
if
(
this
.
link
.
titleBgColor
)
{
titleNode
.
style
.
backgroundColor
=
this
.
link
.
titleBgColor
;
}
if
(
this
.
isPinned
(
)
)
this
.
_updateAttributes
(
true
)
;
this
.
captureIfMissing
(
)
;
this
.
refreshThumbnail
(
)
;
}
captureIfMissing
:
function
Site_captureIfMissing
(
)
{
if
(
!
document
.
hidden
&
&
!
this
.
link
.
imageURI
)
{
BackgroundPageThumbs
.
captureIfMissing
(
this
.
url
)
;
}
}
refreshThumbnail
:
function
Site_refreshThumbnail
(
)
{
let
link
=
gAllPages
.
enhanced
&
&
DirectoryLinksProvider
.
getEnhancedLink
(
this
.
link
)
|
|
this
.
link
;
let
thumbnail
=
this
.
_querySelector
(
"
.
newtab
-
thumbnail
.
thumbnail
"
)
;
if
(
link
.
bgColor
)
{
thumbnail
.
style
.
backgroundColor
=
link
.
bgColor
;
}
let
uri
=
link
.
imageURI
|
|
PageThumbs
.
getThumbnailURL
(
this
.
url
)
;
thumbnail
.
style
.
backgroundImage
=
'
url
(
"
'
+
uri
+
'
"
)
'
;
if
(
THUMBNAIL_PLACEHOLDER_ENABLED
&
&
link
.
type
=
=
"
history
"
&
&
link
.
baseDomain
)
{
let
placeholder
=
this
.
_querySelector
(
"
.
newtab
-
thumbnail
.
placeholder
"
)
;
let
charCodeSum
=
0
;
for
(
let
c
of
link
.
baseDomain
)
{
charCodeSum
+
=
c
.
charCodeAt
(
0
)
;
}
const
COLORS
=
16
;
let
hue
=
Math
.
round
(
(
charCodeSum
%
COLORS
)
/
COLORS
*
360
)
;
placeholder
.
style
.
backgroundColor
=
"
hsl
(
"
+
hue
+
"
80
%
40
%
)
"
;
placeholder
.
textContent
=
link
.
baseDomain
.
substr
(
0
1
)
.
toUpperCase
(
)
;
}
if
(
link
.
enhancedImageURI
)
{
let
enhanced
=
this
.
_querySelector
(
"
.
enhanced
-
content
"
)
;
enhanced
.
style
.
backgroundImage
=
'
url
(
"
'
+
link
.
enhancedImageURI
+
'
"
)
'
;
}
}
_addEventHandlers
:
function
Site_addEventHandlers
(
)
{
this
.
_node
.
addEventListener
(
"
dragstart
"
this
)
;
this
.
_node
.
addEventListener
(
"
dragend
"
this
)
;
this
.
_node
.
addEventListener
(
"
mouseover
"
this
)
;
}
_speculativeConnect
:
function
Site_speculativeConnect
(
)
{
let
sc
=
Services
.
io
.
QueryInterface
(
Ci
.
nsISpeculativeConnect
)
;
let
uri
=
Services
.
io
.
newURI
(
this
.
url
)
;
if
(
!
uri
.
schemeIs
(
"
http
"
)
&
&
!
uri
.
schemeIs
(
"
https
"
)
)
{
return
;
}
try
{
let
originAttributes
=
document
.
docShell
.
getOriginAttributes
(
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
uri
originAttributes
)
;
sc
.
speculativeConnect2
(
uri
principal
null
)
;
}
catch
(
e
)
{
}
}
_recordSiteClicked
:
function
Site_recordSiteClicked
(
aIndex
)
{
if
(
Services
.
prefs
.
prefHasUserValue
(
"
browser
.
newtabpage
.
rows
"
)
|
|
Services
.
prefs
.
prefHasUserValue
(
"
browser
.
newtabpage
.
columns
"
)
|
|
aIndex
>
8
)
{
aIndex
=
9
;
}
Services
.
telemetry
.
getHistogramById
(
"
NEWTAB_PAGE_SITE_CLICKED
"
)
.
add
(
aIndex
)
;
}
onClick
:
function
Site_onClick
(
aEvent
)
{
let
pinned
=
this
.
isPinned
(
)
;
let
tileIndex
=
this
.
cell
.
index
;
let
{
button
target
}
=
aEvent
;
if
(
target
.
classList
.
contains
(
"
newtab
-
link
"
)
|
|
target
.
parentElement
.
classList
.
contains
(
"
newtab
-
link
"
)
)
{
if
(
button
=
=
0
|
|
button
=
=
1
)
{
this
.
_recordSiteClicked
(
tileIndex
)
;
}
}
else
if
(
button
=
=
0
)
{
aEvent
.
preventDefault
(
)
;
if
(
target
.
classList
.
contains
(
"
newtab
-
control
-
block
"
)
)
{
this
.
block
(
)
;
}
else
if
(
pinned
&
&
target
.
classList
.
contains
(
"
newtab
-
control
-
pin
"
)
)
{
this
.
unpin
(
)
;
}
else
if
(
!
pinned
&
&
target
.
classList
.
contains
(
"
newtab
-
control
-
pin
"
)
)
{
this
.
pin
(
)
;
}
}
}
handleEvent
:
function
Site_handleEvent
(
aEvent
)
{
switch
(
aEvent
.
type
)
{
case
"
mouseover
"
:
this
.
_node
.
removeEventListener
(
"
mouseover
"
this
)
;
this
.
_speculativeConnect
(
)
;
break
;
case
"
dragstart
"
:
gDrag
.
start
(
this
aEvent
)
;
break
;
case
"
dragend
"
:
gDrag
.
end
(
this
aEvent
)
;
break
;
}
}
}
;
