#
ifdef
0
#
endif
const
GRID_BOTTOM_EXTRA
=
7
;
const
GRID_WIDTH_EXTRA
=
1
;
const
SPONSORED_TAG_BUFFER
=
2
;
var
gGrid
=
{
_node
:
null
_gridDefaultContent
:
null
get
node
(
)
{
return
this
.
_node
;
}
_siteFragment
:
null
_cells
:
[
]
get
cells
(
)
{
return
this
.
_cells
;
}
get
sites
(
)
{
return
[
for
(
cell
of
this
.
cells
)
cell
.
site
]
;
}
get
ready
(
)
{
return
!
!
this
.
_ready
;
}
get
isDocumentLoaded
(
)
{
return
document
.
readyState
=
=
"
complete
"
;
}
init
:
function
Grid_init
(
)
{
this
.
_node
=
document
.
getElementById
(
"
newtab
-
grid
"
)
;
this
.
_gridDefaultContent
=
this
.
_node
.
lastChild
;
this
.
_createSiteFragment
(
)
;
gLinks
.
populateCache
(
(
)
=
>
{
this
.
_refreshGrid
(
)
;
this
.
_ready
=
true
;
this
.
_resizeGrid
(
)
;
addEventListener
(
"
resize
"
this
)
;
}
)
;
if
(
!
this
.
isDocumentLoaded
)
{
addEventListener
(
"
load
"
this
)
;
}
}
createSite
:
function
Grid_createSite
(
aLink
aCell
)
{
let
node
=
aCell
.
node
;
node
.
appendChild
(
this
.
_siteFragment
.
cloneNode
(
true
)
)
;
return
new
Site
(
node
.
firstElementChild
aLink
)
;
}
handleEvent
:
function
Grid_handleEvent
(
aEvent
)
{
switch
(
aEvent
.
type
)
{
case
"
load
"
:
case
"
resize
"
:
this
.
_resizeGrid
(
)
;
break
;
}
}
lock
:
function
Grid_lock
(
)
{
this
.
node
.
setAttribute
(
"
locked
"
"
true
"
)
;
}
unlock
:
function
Grid_unlock
(
)
{
this
.
node
.
removeAttribute
(
"
locked
"
)
;
}
refresh
(
)
{
this
.
_refreshGrid
(
)
;
this
.
_resizeGrid
(
)
;
}
_refreshGrid
(
)
{
let
cell
=
document
.
createElementNS
(
HTML_NAMESPACE
"
div
"
)
;
cell
.
classList
.
add
(
"
newtab
-
cell
"
)
;
let
fragment
=
document
.
createDocumentFragment
(
)
;
for
(
let
i
=
0
;
i
<
gGridPrefs
.
gridColumns
*
gGridPrefs
.
gridRows
;
i
+
+
)
{
fragment
.
appendChild
(
cell
.
cloneNode
(
true
)
)
;
}
let
cells
=
Array
.
from
(
fragment
.
childNodes
(
cell
)
=
>
new
Cell
(
this
cell
)
)
;
let
links
=
gLinks
.
getLinks
(
)
;
let
numLinks
=
Math
.
min
(
links
.
length
cells
.
length
)
;
let
hasHistoryTiles
=
false
;
for
(
let
i
=
0
;
i
<
numLinks
;
i
+
+
)
{
if
(
links
[
i
]
)
{
this
.
createSite
(
links
[
i
]
cells
[
i
]
)
;
if
(
links
[
i
]
.
type
=
=
"
history
"
)
{
hasHistoryTiles
=
true
;
}
}
}
this
.
_cells
=
cells
;
while
(
this
.
_gridDefaultContent
.
nextSibling
)
{
this
.
_gridDefaultContent
.
nextSibling
.
remove
(
)
;
}
this
.
_node
.
appendChild
(
fragment
)
;
document
.
getElementById
(
"
topsites
-
heading
"
)
.
textContent
=
newTabString
(
hasHistoryTiles
?
"
userTopSites
.
heading
"
:
"
defaultTopSites
.
heading
"
)
;
}
_computeHeight
:
function
Grid_computeHeight
(
aRows
)
{
let
{
gridRows
}
=
gGridPrefs
;
aRows
=
aRows
=
=
=
undefined
?
gridRows
:
Math
.
min
(
gridRows
aRows
)
;
return
aRows
*
this
.
_cellHeight
+
GRID_BOTTOM_EXTRA
;
}
_createSiteFragment
:
function
Grid_createSiteFragment
(
)
{
let
site
=
document
.
createElementNS
(
HTML_NAMESPACE
"
div
"
)
;
site
.
classList
.
add
(
"
newtab
-
site
"
)
;
site
.
setAttribute
(
"
draggable
"
"
true
"
)
;
site
.
innerHTML
=
'
<
span
class
=
"
newtab
-
sponsored
"
>
'
+
newTabString
(
"
sponsored
.
button
"
)
+
'
<
/
span
>
'
+
'
<
a
class
=
"
newtab
-
link
"
>
'
+
'
<
span
class
=
"
newtab
-
thumbnail
placeholder
"
/
>
'
+
'
<
span
class
=
"
newtab
-
thumbnail
thumbnail
"
/
>
'
+
'
<
span
class
=
"
newtab
-
thumbnail
enhanced
-
content
"
/
>
'
+
'
<
span
class
=
"
newtab
-
title
"
/
>
'
+
'
<
/
a
>
'
+
'
<
input
type
=
"
button
"
title
=
"
'
+
newTabString
(
"
pin
"
)
+
'
"
'
+
'
class
=
"
newtab
-
control
newtab
-
control
-
pin
"
/
>
'
+
'
<
input
type
=
"
button
"
title
=
"
'
+
newTabString
(
"
block
"
)
+
'
"
'
+
'
class
=
"
newtab
-
control
newtab
-
control
-
block
"
/
>
'
+
'
<
span
class
=
"
newtab
-
suggested
"
/
>
'
;
this
.
_siteFragment
=
document
.
createDocumentFragment
(
)
;
this
.
_siteFragment
.
appendChild
(
site
)
;
}
_isHistoricalTile
:
function
Grid_isHistoricalTile
(
aPos
)
{
let
site
=
this
.
sites
[
aPos
]
;
return
site
&
&
(
site
.
isPinned
(
)
|
|
site
.
link
&
&
site
.
link
.
type
=
=
"
history
"
)
;
}
_resizeGrid
:
function
Grid_resizeGrid
(
)
{
if
(
!
this
.
isDocumentLoaded
|
|
!
this
.
_ready
)
{
return
;
}
if
(
this
.
_cellHeight
=
=
=
undefined
)
{
let
refCell
=
document
.
querySelector
(
"
.
newtab
-
cell
"
)
;
let
style
=
getComputedStyle
(
refCell
)
;
this
.
_cellHeight
=
refCell
.
offsetHeight
+
parseFloat
(
style
.
marginTop
)
+
parseFloat
(
style
.
marginBottom
)
;
this
.
_cellWidth
=
refCell
.
offsetWidth
+
parseFloat
(
style
.
marginLeft
)
+
parseFloat
(
style
.
marginRight
)
;
}
let
searchContainer
=
document
.
querySelector
(
"
#
newtab
-
search
-
container
"
)
;
if
(
this
.
_searchContainerMargin
=
=
=
undefined
)
{
let
style
=
getComputedStyle
(
searchContainer
)
;
this
.
_searchContainerMargin
=
parseFloat
(
style
.
marginBottom
)
+
parseFloat
(
style
.
marginTop
)
;
}
let
availHeight
=
document
.
documentElement
.
clientHeight
-
searchContainer
.
offsetHeight
-
this
.
_searchContainerMargin
;
let
visibleRows
=
Math
.
floor
(
availHeight
/
this
.
_cellHeight
)
;
let
maxGridWidth
=
gGridPrefs
.
gridColumns
*
this
.
_cellWidth
+
GRID_WIDTH_EXTRA
;
let
availWidth
=
Math
.
min
(
document
.
querySelector
(
"
#
newtab
-
grid
"
)
.
clientWidth
maxGridWidth
)
;
let
gridColumns
=
Math
.
floor
(
availWidth
/
this
.
_cellWidth
)
;
let
tileIndex
=
Math
.
min
(
gGridPrefs
.
gridRows
*
gridColumns
this
.
sites
.
length
)
-
1
;
while
(
tileIndex
>
=
visibleRows
*
gridColumns
)
{
if
(
this
.
_isHistoricalTile
(
tileIndex
)
)
{
break
;
}
tileIndex
-
-
;
}
let
gridRows
=
Math
.
floor
(
tileIndex
/
gridColumns
)
+
1
;
this
.
_node
.
style
.
width
=
gridColumns
*
this
.
_cellWidth
+
"
px
"
;
this
.
_node
.
style
.
maxWidth
=
gGridPrefs
.
gridColumns
*
this
.
_cellWidth
+
GRID_WIDTH_EXTRA
+
"
px
"
;
this
.
_node
.
style
.
height
=
this
.
_computeHeight
(
)
+
"
px
"
;
this
.
_node
.
style
.
maxHeight
=
this
.
_computeHeight
(
gridRows
)
-
SPONSORED_TAG_BUFFER
+
"
px
"
;
}
}
;
