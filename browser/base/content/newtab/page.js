#
ifdef
0
#
endif
const
SCHEDULE_UPDATE_TIMEOUT_MS
=
1000
;
var
gPage
=
{
init
:
function
Page_init
(
)
{
gAllPages
.
register
(
this
)
;
this
.
unloadingPromise
=
new
Promise
(
resolve
=
>
{
addEventListener
(
"
unload
"
(
)
=
>
{
resolve
(
)
;
this
.
_handleUnloadEvent
(
)
;
}
)
;
}
)
;
addEventListener
(
"
click
"
this
false
)
;
let
enabled
=
gAllPages
.
enabled
;
if
(
enabled
)
this
.
_init
(
)
;
this
.
_updateAttributes
(
enabled
)
;
gCustomize
.
init
(
)
;
}
observe
:
function
Page_observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
"
nsPref
:
changed
"
)
{
gCustomize
.
updateSelected
(
)
;
let
enabled
=
gAllPages
.
enabled
;
this
.
_updateAttributes
(
enabled
)
;
if
(
aData
=
=
"
browser
.
newtabpage
.
enhanced
"
)
{
this
.
update
(
)
;
}
if
(
enabled
)
{
this
.
_init
(
)
;
}
else
{
gUndoDialog
.
hide
(
)
;
}
}
else
if
(
aTopic
=
=
"
page
-
thumbnail
:
create
"
&
&
gGrid
.
ready
)
{
for
(
let
site
of
gGrid
.
sites
)
{
if
(
site
&
&
site
.
url
=
=
=
aData
)
{
site
.
refreshThumbnail
(
)
;
}
}
}
}
update
(
reason
=
"
"
)
{
if
(
!
document
.
hidden
)
{
if
(
reason
!
=
"
links
-
changed
"
&
&
gGrid
.
ready
)
{
gGrid
.
refresh
(
)
;
}
return
;
}
if
(
this
.
_scheduleUpdateTimeout
)
{
return
;
}
this
.
_scheduleUpdateTimeout
=
requestIdleCallback
(
(
)
=
>
{
if
(
gGrid
.
ready
)
{
gGrid
.
refresh
(
)
;
}
this
.
_scheduleUpdateTimeout
=
null
;
}
{
timeout
:
SCHEDULE_UPDATE_TIMEOUT_MS
}
)
;
}
_init
:
function
Page_init
(
)
{
if
(
this
.
_initialized
)
return
;
this
.
_initialized
=
true
;
document
.
getElementById
(
"
newtab
-
search
-
submit
"
)
.
value
=
document
.
body
.
getAttribute
(
"
dir
"
)
=
=
"
ltr
"
?
"
\
u25B6
"
:
"
\
u25C0
"
;
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
newtabpage
.
compact
"
)
)
{
document
.
body
.
classList
.
add
(
"
compact
"
)
;
}
gSearch
.
init
(
)
;
if
(
document
.
hidden
)
{
addEventListener
(
"
visibilitychange
"
this
)
;
}
else
{
setTimeout
(
(
)
=
>
this
.
onPageFirstVisible
(
)
)
;
}
gGrid
.
init
(
)
;
gDropTargetShim
.
init
(
)
;
#
ifdef
XP_MACOSX
document
.
addEventListener
(
"
dragover
"
this
)
;
document
.
addEventListener
(
"
drop
"
this
)
;
#
endif
}
_updateAttributes
:
function
Page_updateAttributes
(
aValue
)
{
let
nodeSelector
=
"
#
newtab
-
grid
#
newtab
-
search
-
container
"
;
for
(
let
node
of
document
.
querySelectorAll
(
nodeSelector
)
)
{
if
(
aValue
)
node
.
removeAttribute
(
"
page
-
disabled
"
)
;
else
node
.
setAttribute
(
"
page
-
disabled
"
"
true
"
)
;
}
let
inputSelector
=
"
.
newtab
-
control
.
newtab
-
link
"
;
for
(
let
input
of
document
.
querySelectorAll
(
inputSelector
)
)
{
if
(
aValue
)
input
.
removeAttribute
(
"
tabindex
"
)
;
else
input
.
setAttribute
(
"
tabindex
"
"
-
1
"
)
;
}
}
_handleUnloadEvent
:
function
Page_handleUnloadEvent
(
)
{
gAllPages
.
unregister
(
this
)
;
}
handleEvent
:
function
Page_handleEvent
(
aEvent
)
{
switch
(
aEvent
.
type
)
{
case
"
load
"
:
this
.
onPageVisibleAndLoaded
(
)
;
break
;
case
"
click
"
:
let
{
button
target
}
=
aEvent
;
while
(
target
)
{
if
(
target
.
hasOwnProperty
(
"
_newtabSite
"
)
)
{
target
.
_newtabSite
.
onClick
(
aEvent
)
;
break
;
}
target
=
target
.
parentNode
;
}
break
;
case
"
dragover
"
:
if
(
gDrag
.
isValid
(
aEvent
)
&
&
gDrag
.
draggedSite
)
aEvent
.
preventDefault
(
)
;
break
;
case
"
drop
"
:
if
(
gDrag
.
isValid
(
aEvent
)
&
&
gDrag
.
draggedSite
)
{
aEvent
.
preventDefault
(
)
;
aEvent
.
stopPropagation
(
)
;
}
break
;
case
"
visibilitychange
"
:
if
(
this
.
_scheduleUpdateTimeout
)
{
cancelIdleCallback
(
this
.
_scheduleUpdateTimeout
)
;
this
.
_scheduleUpdateTimeout
=
null
;
this
.
update
(
)
;
}
setTimeout
(
(
)
=
>
this
.
onPageFirstVisible
(
)
)
;
removeEventListener
(
"
visibilitychange
"
this
)
;
break
;
}
}
onPageFirstVisible
:
function
(
)
{
for
(
let
site
of
gGrid
.
sites
)
{
if
(
site
)
{
site
.
captureIfMissing
(
)
;
}
}
if
(
document
.
readyState
=
=
"
complete
"
)
{
this
.
onPageVisibleAndLoaded
(
)
;
}
else
{
addEventListener
(
"
load
"
this
)
;
}
}
onPageVisibleAndLoaded
(
)
{
sendAsyncMessage
(
"
NewTab
:
MaybeShowMigrateMessage
"
)
;
}
}
;
