#
include
"
file_sink
.
h
"
#
include
<
iostream
>
#
include
<
string
>
#
include
<
windows
.
h
>
bool
FileSink
:
:
open
(
std
:
:
wstring
&
filename
)
{
fileHandle
.
own
(
CreateFileW
(
filename
.
c_str
(
)
GENERIC_WRITE
0
nullptr
CREATE_NEW
FILE_ATTRIBUTE_NORMAL
nullptr
)
)
;
if
(
fileHandle
.
get
(
)
=
=
INVALID_HANDLE_VALUE
)
{
return
false
;
}
else
{
return
true
;
}
}
bool
FileSink
:
:
accept
(
char
*
buf
int
bytesToWrite
)
{
while
(
bytesToWrite
>
0
)
{
DWORD
bytesWritten
=
0
;
if
(
!
WriteFile
(
fileHandle
buf
bytesToWrite
&
bytesWritten
nullptr
)
)
{
std
:
:
cout
<
<
"
Failed
to
write
!
"
<
<
GetLastError
(
)
<
<
std
:
:
endl
;
return
false
;
}
bytesToWrite
-
=
bytesWritten
;
}
return
true
;
}
