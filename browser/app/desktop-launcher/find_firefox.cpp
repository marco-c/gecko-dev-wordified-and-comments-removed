#
include
"
find_firefox
.
h
"
#
include
<
iostream
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
windows
.
h
>
#
if
defined
(
MOZ_BRANDING_IS_OFFICIAL
)
static
const
wchar_t
*
firefox_node
=
L
"
SOFTWARE
\
\
Mozilla
\
\
Mozilla
Firefox
"
;
#
elif
defined
(
MOZ_BRANDING_IS_NIGHTLY
)
static
const
wchar_t
*
firefox_node
=
L
"
SOFTWARE
\
\
Mozilla
\
\
Nightly
"
;
#
elif
defined
(
MOZ_BRANDING_IS_BETA
)
static
const
wchar_t
*
firefox_node
=
L
"
SOFTWARE
\
\
Mozilla
\
\
Mozilla
Firefox
"
;
#
elif
defined
(
MOZ_BRANDING_IS_DEVEDITION
)
static
const
wchar_t
*
firefox_node
=
L
"
SOFTWARE
\
\
Mozilla
\
\
Firefox
Developer
Edition
"
;
#
elif
defined
(
MOZ_BRANDING_IS_UNOFFICIAL
)
static
const
wchar_t
*
firefox_node
=
L
"
SOFTWARE
\
\
Mozilla
\
\
Mozilla
Developer
Preview
"
;
#
else
static_assert
(
false
)
;
#
endif
const
wchar_t
*
getFirefoxRegistryBranding
(
)
{
return
firefox_node
;
}
static
std
:
:
optional
<
std
:
:
wstring
>
lookupFirefoxPathInHKEY
(
HKEY
hkey
)
{
std
:
:
wstring
current_version
=
L
"
CurrentVersion
"
;
wchar_t
buffer
[
MAX_PATH
]
;
DWORD
value_size
=
sizeof
(
buffer
)
;
LSTATUS
status
=
RegGetValueW
(
hkey
getFirefoxRegistryBranding
(
)
current_version
.
c_str
(
)
RRF_RT_REG_SZ
nullptr
buffer
&
value_size
)
;
if
(
status
!
=
ERROR_SUCCESS
|
|
value_size
<
2
)
{
std
:
:
wcout
<
<
L
"
Failed
to
get
firefox
current
version
at
node
"
<
<
getFirefoxRegistryBranding
(
)
<
<
L
"
status
:
"
<
<
status
<
<
std
:
:
endl
;
return
std
:
:
nullopt
;
}
DWORD
value_len
=
value_size
/
sizeof
(
wchar_t
)
-
1
;
std
:
:
wstring
current_version_string
=
std
:
:
wstring
(
buffer
value_len
)
;
std
:
:
wstring
current_version_node
=
std
:
:
wstring
(
getFirefoxRegistryBranding
(
)
)
+
L
"
\
\
"
+
current_version_string
+
L
"
\
\
Main
"
;
std
:
:
wstring
path_to_exe
=
L
"
PathToExe
"
;
value_size
=
sizeof
(
buffer
)
;
status
=
RegGetValueW
(
hkey
current_version_node
.
c_str
(
)
path_to_exe
.
c_str
(
)
RRF_RT_REG_SZ
nullptr
buffer
&
value_size
)
;
if
(
status
!
=
ERROR_SUCCESS
|
|
value_size
<
2
)
{
std
:
:
wcout
<
<
L
"
Failed
to
get
firefox
path
for
current
version
at
location
"
<
<
current_version_node
<
<
L
"
status
was
"
<
<
status
<
<
std
:
:
endl
;
return
std
:
:
nullopt
;
}
value_len
=
value_size
/
sizeof
(
wchar_t
)
-
1
;
std
:
:
wstring
firefox_path
=
std
:
:
wstring
(
buffer
value_len
)
;
return
firefox_path
;
}
std
:
:
optional
<
std
:
:
wstring
>
lookupFirefoxPath
(
)
{
auto
sharedInstallPath
=
lookupFirefoxPathInHKEY
(
HKEY_CURRENT_USER
)
;
if
(
sharedInstallPath
.
has_value
(
)
)
{
return
sharedInstallPath
;
}
else
{
return
lookupFirefoxPathInHKEY
(
HKEY_LOCAL_MACHINE
)
;
}
}
