#
include
"
LauncherProcessWin
.
h
"
#
include
<
string
.
h
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
CmdLineAndEnvUtils
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
DynamicallyLinkedFunctionPtr
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
SafeMode
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
<
windows
.
h
>
#
include
<
processthreadsapi
.
h
>
#
include
"
LaunchUnelevated
.
h
"
#
include
"
ProcThreadAttributes
.
h
"
static
bool
PostCreationSetup
(
HANDLE
aChildProcess
HANDLE
aChildMainThread
const
bool
aIsSafeMode
)
{
return
true
;
}
#
if
!
defined
(
PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON
)
#
define
PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON
(
0x00000001ui64
<
<
60
)
#
endif
#
if
(
_WIN32_WINNT
<
0x0602
)
BOOL
WINAPI
SetProcessMitigationPolicy
(
PROCESS_MITIGATION_POLICY
aMitigationPolicy
PVOID
aBuffer
SIZE_T
aBufferLen
)
;
#
endif
static
void
SetMitigationPolicies
(
mozilla
:
:
ProcThreadAttributes
&
aAttrs
const
bool
aIsSafeMode
)
{
if
(
mozilla
:
:
IsWin10November2015UpdateOrLater
(
)
)
{
aAttrs
.
AddMitigationPolicy
(
PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON
)
;
}
}
static
void
ShowError
(
DWORD
aError
=
:
:
GetLastError
(
)
)
{
if
(
aError
=
=
ERROR_SUCCESS
)
{
return
;
}
LPWSTR
rawMsgBuf
=
nullptr
;
DWORD
result
=
:
:
FormatMessageW
(
FORMAT_MESSAGE_ALLOCATE_BUFFER
|
FORMAT_MESSAGE_FROM_SYSTEM
|
FORMAT_MESSAGE_IGNORE_INSERTS
nullptr
aError
0
reinterpret_cast
<
LPWSTR
>
(
&
rawMsgBuf
)
0
nullptr
)
;
if
(
!
result
)
{
return
;
}
:
:
MessageBoxW
(
nullptr
rawMsgBuf
L
"
Firefox
"
MB_OK
|
MB_ICONERROR
)
;
:
:
LocalFree
(
rawMsgBuf
)
;
}
static
bool
SetArgv0ToFullBinaryPath
(
wchar_t
*
aArgv
[
]
)
{
DWORD
bufLen
=
MAX_PATH
;
mozilla
:
:
UniquePtr
<
wchar_t
[
]
>
buf
;
while
(
true
)
{
buf
=
mozilla
:
:
MakeUnique
<
wchar_t
[
]
>
(
bufLen
)
;
DWORD
retLen
=
:
:
GetModuleFileNameW
(
nullptr
buf
.
get
(
)
bufLen
)
;
if
(
!
retLen
)
{
return
false
;
}
if
(
retLen
=
=
bufLen
&
&
:
:
GetLastError
(
)
=
=
ERROR_INSUFFICIENT_BUFFER
)
{
bufLen
*
=
2
;
continue
;
}
break
;
}
aArgv
[
0
]
=
buf
.
release
(
)
;
return
true
;
}
namespace
mozilla
{
bool
RunAsLauncherProcess
(
int
&
argc
wchar_t
*
*
argv
)
{
return
CheckArg
(
argc
argv
L
"
launcher
"
static_cast
<
const
wchar_t
*
*
>
(
nullptr
)
CheckArgFlag
:
:
CheckOSInt
|
CheckArgFlag
:
:
RemoveArg
)
;
}
int
LauncherMain
(
int
argc
wchar_t
*
argv
[
]
)
{
if
(
IsWin10November2015UpdateOrLater
(
)
)
{
const
DynamicallyLinkedFunctionPtr
<
decltype
(
&
SetProcessMitigationPolicy
)
>
pSetProcessMitigationPolicy
(
L
"
kernel32
.
dll
"
"
SetProcessMitigationPolicy
"
)
;
if
(
pSetProcessMitigationPolicy
)
{
PROCESS_MITIGATION_IMAGE_LOAD_POLICY
imgLoadPol
=
{
}
;
imgLoadPol
.
PreferSystem32Images
=
1
;
DebugOnly
<
BOOL
>
setOk
=
pSetProcessMitigationPolicy
(
ProcessImageLoadPolicy
&
imgLoadPol
sizeof
(
imgLoadPol
)
)
;
MOZ_ASSERT
(
setOk
)
;
}
}
if
(
!
SetArgv0ToFullBinaryPath
(
argv
)
)
{
ShowError
(
)
;
return
1
;
}
Maybe
<
bool
>
isElevated
=
IsElevated
(
)
;
if
(
!
isElevated
)
{
return
1
;
}
if
(
isElevated
.
value
(
)
)
{
return
!
LaunchUnelevated
(
argc
argv
)
;
}
UniquePtr
<
wchar_t
[
]
>
cmdLine
(
MakeCommandLine
(
argc
argv
)
)
;
if
(
!
cmdLine
)
{
return
1
;
}
const
Maybe
<
bool
>
isSafeMode
=
IsSafeModeRequested
(
argc
argv
SafeModeFlag
:
:
None
)
;
if
(
!
isSafeMode
)
{
ShowError
(
ERROR_INVALID_PARAMETER
)
;
return
1
;
}
ProcThreadAttributes
attrs
;
SetMitigationPolicies
(
attrs
isSafeMode
.
value
(
)
)
;
HANDLE
stdHandles
[
]
=
{
:
:
GetStdHandle
(
STD_INPUT_HANDLE
)
:
:
GetStdHandle
(
STD_OUTPUT_HANDLE
)
:
:
GetStdHandle
(
STD_ERROR_HANDLE
)
}
;
attrs
.
AddInheritableHandles
(
stdHandles
)
;
DWORD
creationFlags
=
CREATE_SUSPENDED
|
CREATE_UNICODE_ENVIRONMENT
;
STARTUPINFOEXW
siex
;
Maybe
<
bool
>
attrsOk
=
attrs
.
AssignTo
(
siex
)
;
if
(
!
attrsOk
)
{
ShowError
(
)
;
return
1
;
}
BOOL
inheritHandles
=
FALSE
;
if
(
attrsOk
.
value
(
)
)
{
creationFlags
|
=
EXTENDED_STARTUPINFO_PRESENT
;
if
(
attrs
.
HasInheritableHandles
(
)
)
{
siex
.
StartupInfo
.
dwFlags
|
=
STARTF_USESTDHANDLES
;
siex
.
StartupInfo
.
hStdInput
=
stdHandles
[
0
]
;
siex
.
StartupInfo
.
hStdOutput
=
stdHandles
[
1
]
;
siex
.
StartupInfo
.
hStdError
=
stdHandles
[
2
]
;
inheritHandles
=
TRUE
;
}
}
PROCESS_INFORMATION
pi
=
{
}
;
if
(
!
:
:
CreateProcessW
(
argv
[
0
]
cmdLine
.
get
(
)
nullptr
nullptr
inheritHandles
creationFlags
nullptr
nullptr
&
siex
.
StartupInfo
&
pi
)
)
{
ShowError
(
)
;
return
1
;
}
nsAutoHandle
process
(
pi
.
hProcess
)
;
nsAutoHandle
mainThread
(
pi
.
hThread
)
;
if
(
!
PostCreationSetup
(
process
.
get
(
)
mainThread
.
get
(
)
isSafeMode
.
value
(
)
)
|
|
:
:
ResumeThread
(
mainThread
.
get
(
)
)
=
=
static_cast
<
DWORD
>
(
-
1
)
)
{
ShowError
(
)
;
:
:
TerminateProcess
(
process
.
get
(
)
1
)
;
return
1
;
}
:
:
WaitForInputIdle
(
process
.
get
(
)
kWaitForInputIdleTimeoutMS
)
;
return
0
;
}
}
