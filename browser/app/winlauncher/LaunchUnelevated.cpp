#
include
"
LaunchUnelevated
.
h
"
#
include
"
mozilla
/
CmdLineAndEnvUtils
.
h
"
#
include
"
mozilla
/
mscom
/
COMApartmentRegion
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
<
comdef
.
h
>
#
include
<
comutil
.
h
>
#
include
<
windows
.
h
>
#
include
<
exdisp
.
h
>
#
include
<
objbase
.
h
>
#
include
<
servprov
.
h
>
#
include
<
shlobj
.
h
>
#
include
<
shobjidl
.
h
>
namespace
mozilla
{
bool
LaunchUnelevated
(
int
aArgc
wchar_t
*
aArgv
[
]
)
{
mscom
:
:
STARegion
sta
;
if
(
!
sta
.
IsValid
(
)
)
{
return
false
;
}
RefPtr
<
IShellWindows
>
shellWindows
;
HRESULT
hr
=
:
:
CoCreateInstance
(
CLSID_ShellWindows
nullptr
CLSCTX_LOCAL_SERVER
IID_IShellWindows
getter_AddRefs
(
shellWindows
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
_variant_t
loc
(
CSIDL_DESKTOP
)
;
_variant_t
empty
;
long
hwnd
;
RefPtr
<
IDispatch
>
dispDesktop
;
hr
=
shellWindows
-
>
FindWindowSW
(
&
loc
&
empty
SWC_DESKTOP
&
hwnd
SWFO_NEEDDISPATCH
getter_AddRefs
(
dispDesktop
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
RefPtr
<
IServiceProvider
>
servProv
;
hr
=
dispDesktop
-
>
QueryInterface
(
IID_IServiceProvider
getter_AddRefs
(
servProv
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
RefPtr
<
IShellBrowser
>
browser
;
hr
=
servProv
-
>
QueryService
(
SID_STopLevelBrowser
IID_IShellBrowser
getter_AddRefs
(
browser
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
RefPtr
<
IShellView
>
activeShellView
;
hr
=
browser
-
>
QueryActiveShellView
(
getter_AddRefs
(
activeShellView
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
RefPtr
<
IDispatch
>
dispView
;
hr
=
activeShellView
-
>
GetItemObject
(
SVGIO_BACKGROUND
IID_IDispatch
getter_AddRefs
(
dispView
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
RefPtr
<
IShellFolderViewDual
>
folderView
;
hr
=
dispView
-
>
QueryInterface
(
IID_IShellFolderViewDual
getter_AddRefs
(
folderView
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
RefPtr
<
IDispatch
>
dispShell
;
hr
=
folderView
-
>
get_Application
(
getter_AddRefs
(
dispShell
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
RefPtr
<
IShellDispatch2
>
shellDisp
;
hr
=
dispShell
-
>
QueryInterface
(
IID_IShellDispatch2
getter_AddRefs
(
shellDisp
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
UniquePtr
<
wchar_t
[
]
>
cmdLine
(
MakeCommandLine
(
aArgc
-
1
aArgv
+
1
)
)
;
if
(
!
cmdLine
)
{
return
false
;
}
_bstr_t
exe
(
aArgv
[
0
]
)
;
_variant_t
args
(
cmdLine
.
get
(
)
)
;
_variant_t
operation
(
L
"
open
"
)
;
_variant_t
directory
;
_variant_t
showCmd
(
SW_SHOWNORMAL
)
;
hr
=
shellDisp
-
>
ShellExecute
(
exe
args
operation
directory
showCmd
)
;
return
SUCCEEDED
(
hr
)
;
}
mozilla
:
:
Maybe
<
bool
>
IsElevated
(
)
{
HANDLE
rawToken
;
if
(
!
:
:
OpenProcessToken
(
:
:
GetCurrentProcess
(
)
TOKEN_QUERY
&
rawToken
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
nsAutoHandle
token
(
rawToken
)
;
DWORD
reqdLen
;
if
(
!
:
:
GetTokenInformation
(
token
.
get
(
)
TokenIntegrityLevel
nullptr
0
&
reqdLen
)
&
&
:
:
GetLastError
(
)
!
=
ERROR_INSUFFICIENT_BUFFER
)
{
return
mozilla
:
:
Nothing
(
)
;
}
auto
buf
=
mozilla
:
:
MakeUnique
<
char
[
]
>
(
reqdLen
)
;
if
(
!
:
:
GetTokenInformation
(
token
.
get
(
)
TokenIntegrityLevel
buf
.
get
(
)
reqdLen
&
reqdLen
)
)
{
return
mozilla
:
:
Nothing
(
)
;
}
auto
tokenLabel
=
reinterpret_cast
<
PTOKEN_MANDATORY_LABEL
>
(
buf
.
get
(
)
)
;
DWORD
subAuthCount
=
*
:
:
GetSidSubAuthorityCount
(
tokenLabel
-
>
Label
.
Sid
)
;
DWORD
integrityLevel
=
*
:
:
GetSidSubAuthority
(
tokenLabel
-
>
Label
.
Sid
subAuthCount
-
1
)
;
return
mozilla
:
:
Some
(
integrityLevel
>
SECURITY_MANDATORY_MEDIUM_RID
)
;
}
}
