#
include
"
ErrorHandler
.
h
"
#
include
<
utility
>
#
include
"
mozilla
/
CmdLineAndEnvUtils
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
if
defined
(
MOZ_LAUNCHER_PROCESS
)
#
include
"
mozilla
/
LauncherRegistryInfo
.
h
"
#
endif
namespace
{
constexpr
wchar_t
kEventSourceName
[
]
=
L
"
"
MOZ_APP_DISPLAYNAME
"
Launcher
"
;
struct
EventSourceDeleter
{
using
pointer
=
HANDLE
;
void
operator
(
)
(
pointer
aEvtSrc
)
{
:
:
DeregisterEventSource
(
aEvtSrc
)
;
}
}
;
using
EventLog
=
mozilla
:
:
UniquePtr
<
HANDLE
EventSourceDeleter
>
;
struct
SerializedEventData
{
HRESULT
mHr
;
uint32_t
mLine
;
char
mFile
[
1
]
;
}
;
}
static
void
PostErrorToLog
(
const
mozilla
:
:
LauncherError
&
aError
)
{
EventLog
log
(
:
:
RegisterEventSourceW
(
nullptr
kEventSourceName
)
)
;
if
(
!
log
)
{
return
;
}
size_t
fileLen
=
strlen
(
aError
.
mFile
)
;
size_t
dataLen
=
sizeof
(
HRESULT
)
+
sizeof
(
uint32_t
)
+
fileLen
;
auto
evtDataBuf
=
mozilla
:
:
MakeUnique
<
char
[
]
>
(
dataLen
)
;
SerializedEventData
&
evtData
=
*
reinterpret_cast
<
SerializedEventData
*
>
(
evtDataBuf
.
get
(
)
)
;
evtData
.
mHr
=
aError
.
mError
.
AsHResult
(
)
;
evtData
.
mLine
=
aError
.
mLine
;
memcpy
(
evtData
.
mFile
aError
.
mFile
fileLen
)
;
:
:
ReportEventW
(
log
.
get
(
)
EVENTLOG_ERROR_TYPE
0
aError
.
mError
.
AsHResult
(
)
nullptr
0
dataLen
nullptr
evtDataBuf
.
get
(
)
)
;
}
namespace
mozilla
{
void
HandleLauncherError
(
const
LauncherError
&
aError
const
char
*
aProcessType
)
{
#
if
defined
(
MOZ_LAUNCHER_PROCESS
)
LauncherRegistryInfo
regInfo
;
Unused
<
<
regInfo
.
DisableDueToFailure
(
)
;
#
endif
PostErrorToLog
(
aError
)
;
}
}
