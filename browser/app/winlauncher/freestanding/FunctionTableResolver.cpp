#
include
"
FunctionTableResolver
.
h
"
namespace
mozilla
{
namespace
freestanding
{
Kernel32ExportsSolver
gK32
;
bool
Kernel32ExportsSolver
:
:
IsInitialized
(
)
const
{
return
mState
=
=
State
:
:
Initialized
|
|
IsResolved
(
)
;
}
bool
Kernel32ExportsSolver
:
:
IsResolved
(
)
const
{
return
mState
=
=
State
:
:
Resolved
;
}
#
define
INIT_FUNCTION
(
exports
name
)
\
do
{
\
auto
rvaToFunction
=
exports
.
FindExportAddressTableEntry
(
#
name
)
;
\
if
(
!
rvaToFunction
)
{
\
return
;
\
}
\
mOffsets
.
m
#
#
name
=
*
rvaToFunction
;
\
}
while
(
0
)
#
define
RESOLVE_FUNCTION
(
base
name
)
\
m
#
#
name
=
reinterpret_cast
<
decltype
(
m
#
#
name
)
>
(
base
+
mOffsets
.
m
#
#
name
)
void
Kernel32ExportsSolver
:
:
Init
(
)
{
if
(
mState
=
=
State
:
:
Initialized
|
|
mState
=
=
State
:
:
Resolved
)
{
return
;
}
interceptor
:
:
MMPolicyInProcess
policy
;
auto
k32Exports
=
nt
:
:
PEExportSection
<
interceptor
:
:
MMPolicyInProcess
>
:
:
Get
(
:
:
GetModuleHandleW
(
L
"
kernel32
.
dll
"
)
policy
)
;
if
(
!
k32Exports
)
{
return
;
}
INIT_FUNCTION
(
k32Exports
FlushInstructionCache
)
;
INIT_FUNCTION
(
k32Exports
GetSystemInfo
)
;
INIT_FUNCTION
(
k32Exports
VirtualProtect
)
;
mState
=
State
:
:
Initialized
;
}
void
Kernel32ExportsSolver
:
:
ResolveInternal
(
)
{
if
(
mState
=
=
State
:
:
Resolved
)
{
return
;
}
MOZ_RELEASE_ASSERT
(
mState
=
=
State
:
:
Initialized
)
;
UNICODE_STRING
k32Name
;
:
:
RtlInitUnicodeString
(
&
k32Name
L
"
kernel32
.
dll
"
)
;
auto
k32Module
=
nt
:
:
GetModuleHandleFromLeafName
(
k32Name
)
;
MOZ_RELEASE_ASSERT
(
k32Module
.
isOk
(
)
)
;
uintptr_t
k32Base
=
nt
:
:
PEHeaders
:
:
HModuleToBaseAddr
<
uintptr_t
>
(
k32Module
.
unwrap
(
)
)
;
RESOLVE_FUNCTION
(
k32Base
FlushInstructionCache
)
;
RESOLVE_FUNCTION
(
k32Base
GetSystemInfo
)
;
RESOLVE_FUNCTION
(
k32Base
VirtualProtect
)
;
mState
=
State
:
:
Resolved
;
}
ULONG
NTAPI
Kernel32ExportsSolver
:
:
ResolveOnce
(
PRTL_RUN_ONCE
aRunOnce
PVOID
aParameter
PVOID
*
)
{
reinterpret_cast
<
Kernel32ExportsSolver
*
>
(
aParameter
)
-
>
ResolveInternal
(
)
;
return
TRUE
;
}
void
Kernel32ExportsSolver
:
:
Resolve
(
RTL_RUN_ONCE
&
aRunOnce
)
{
:
:
RtlRunOnceExecuteOnce
(
&
aRunOnce
&
ResolveOnce
this
nullptr
)
;
}
LauncherVoidResult
Kernel32ExportsSolver
:
:
Transfer
(
nt
:
:
CrossExecTransferManager
&
aTransferMgr
Kernel32ExportsSolver
*
aTargetAddress
)
const
{
LauncherVoidResult
writeResult
=
aTransferMgr
.
Transfer
(
&
aTargetAddress
-
>
mOffsets
&
mOffsets
sizeof
(
mOffsets
)
)
;
if
(
writeResult
.
isErr
(
)
)
{
return
writeResult
.
propagateErr
(
)
;
}
State
stateInChild
=
State
:
:
Initialized
;
return
aTransferMgr
.
Transfer
(
&
aTargetAddress
-
>
mState
&
stateInChild
sizeof
(
stateInChild
)
)
;
}
}
}
