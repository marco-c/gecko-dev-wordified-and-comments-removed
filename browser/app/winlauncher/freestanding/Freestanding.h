#
ifndef
mozilla_freestanding_Freestanding_h
#
define
mozilla_freestanding_Freestanding_h
#
if
defined
(
__STDC_HOSTED__
)
&
&
__STDC_HOSTED__
=
=
1
#
error
"
This
header
should
only
be
included
by
freestanding
code
"
#
endif
#
define
MOZ_USE_LAUNCHER_ERROR
#
include
"
mozilla
/
NativeNt
.
h
"
namespace
mozilla
{
namespace
freestanding
{
template
<
typename
T
typename
.
.
.
Args
>
inline
static
T
*
RtlNew
(
Args
&
&
.
.
.
aArgs
)
{
HANDLE
processHeap
=
nt
:
:
RtlGetProcessHeap
(
)
;
if
(
!
processHeap
)
{
return
nullptr
;
}
void
*
ptr
=
:
:
RtlAllocateHeap
(
processHeap
0
sizeof
(
T
)
)
;
if
(
!
ptr
)
{
return
nullptr
;
}
return
new
(
ptr
)
T
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
}
template
<
typename
T
>
inline
static
void
RtlDelete
(
T
*
aPtr
)
{
if
(
!
aPtr
)
{
return
;
}
aPtr
-
>
~
T
(
)
;
:
:
RtlFreeHeap
(
nt
:
:
RtlGetProcessHeap
(
)
0
aPtr
)
;
}
}
}
#
pragma
init_seg
(
"
.
freestd
g
"
)
#
endif
