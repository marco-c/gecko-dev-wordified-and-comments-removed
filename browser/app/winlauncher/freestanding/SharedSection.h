#
ifndef
mozilla_freestanding_SharedSection_h
#
define
mozilla_freestanding_SharedSection_h
#
include
"
mozilla
/
NativeNt
.
h
"
#
include
"
mozilla
/
interceptor
/
MMPolicies
.
h
"
namespace
mozilla
{
namespace
freestanding
{
class
MOZ_TRIVIAL_CTOR_DTOR
Kernel32ExportsSolver
final
:
public
interceptor
:
:
MMPolicyInProcessEarlyStage
:
:
Kernel32Exports
{
enum
class
State
{
Uninitialized
Initialized
Resolved
}
mState
;
struct
FunctionOffsets
{
uint32_t
mFlushInstructionCache
;
uint32_t
mGetSystemInfo
;
uint32_t
mVirtualProtect
;
}
mOffsets
;
static
ULONG
NTAPI
ResolveOnce
(
PRTL_RUN_ONCE
aRunOnce
PVOID
aParameter
PVOID
*
)
;
void
ResolveInternal
(
)
;
public
:
Kernel32ExportsSolver
(
)
=
default
;
Kernel32ExportsSolver
(
const
Kernel32ExportsSolver
&
)
=
delete
;
Kernel32ExportsSolver
(
Kernel32ExportsSolver
&
&
)
=
delete
;
Kernel32ExportsSolver
&
operator
=
(
const
Kernel32ExportsSolver
&
)
=
delete
;
Kernel32ExportsSolver
&
operator
=
(
Kernel32ExportsSolver
&
&
)
=
delete
;
bool
IsInitialized
(
)
const
;
bool
IsResolved
(
)
const
;
void
Init
(
)
;
void
Resolve
(
RTL_RUN_ONCE
&
aRunOnce
)
;
LauncherVoidResult
Transfer
(
nt
:
:
CrossExecTransferManager
&
aTransferMgr
Kernel32ExportsSolver
*
aTargetAddress
)
const
;
}
;
extern
Kernel32ExportsSolver
gK32
;
}
}
#
endif
