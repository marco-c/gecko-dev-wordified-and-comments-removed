#
include
"
ModuleLoadFrame
.
h
"
#
include
"
LoaderPrivateAPI
.
h
"
namespace
mozilla
{
namespace
freestanding
{
ModuleLoadFrame
:
:
ModuleLoadFrame
(
PCUNICODE_STRING
aRequestedDllName
)
:
mPrev
(
sTopFrame
.
get
(
)
)
mContext
(
nullptr
)
mLSPSubstitutionRequired
(
false
)
mLoadNtStatus
(
STATUS_UNSUCCESSFUL
)
mLoadInfo
(
aRequestedDllName
)
{
EnsureInitialized
(
)
;
sTopFrame
.
set
(
this
)
;
gLoaderPrivateAPI
.
NotifyBeginDllLoad
(
mLoadInfo
&
mContext
aRequestedDllName
)
;
}
ModuleLoadFrame
:
:
ModuleLoadFrame
(
nt
:
:
AllocatedUnicodeString
&
&
aSectionName
const
void
*
aMapBaseAddr
NTSTATUS
aNtStatus
)
:
mPrev
(
sTopFrame
.
get
(
)
)
mContext
(
nullptr
)
mLSPSubstitutionRequired
(
false
)
mLoadNtStatus
(
aNtStatus
)
mLoadInfo
(
std
:
:
move
(
aSectionName
)
aMapBaseAddr
)
{
sTopFrame
.
set
(
this
)
;
gLoaderPrivateAPI
.
NotifyBeginDllLoad
(
&
mContext
mLoadInfo
.
mSectionName
)
;
}
ModuleLoadFrame
:
:
~
ModuleLoadFrame
(
)
{
gLoaderPrivateAPI
.
NotifyEndDllLoad
(
mContext
mLoadNtStatus
std
:
:
move
(
mLoadInfo
)
)
;
sTopFrame
.
set
(
mPrev
)
;
}
void
ModuleLoadFrame
:
:
NotifyLSPSubstitutionRequired
(
PCUNICODE_STRING
aLeafName
)
{
ModuleLoadFrame
*
topFrame
=
sTopFrame
.
get
(
)
;
if
(
!
topFrame
)
{
return
;
}
topFrame
-
>
SetLSPSubstitutionRequired
(
aLeafName
)
;
}
void
ModuleLoadFrame
:
:
SetLSPSubstitutionRequired
(
PCUNICODE_STRING
aLeafName
)
{
MOZ_ASSERT
(
!
mLoadInfo
.
mBaseAddr
)
;
if
(
mLoadInfo
.
mBaseAddr
)
{
return
;
}
mLoadInfo
.
mRequestedDllName
=
aLeafName
;
mLSPSubstitutionRequired
=
true
;
}
void
ModuleLoadFrame
:
:
NotifySectionMap
(
nt
:
:
AllocatedUnicodeString
&
&
aSectionName
const
void
*
aMapBaseAddr
NTSTATUS
aMapNtStatus
)
{
ModuleLoadFrame
*
topFrame
=
sTopFrame
.
get
(
)
;
if
(
!
topFrame
)
{
if
(
gLoaderPrivateAPI
.
IsDefaultObserver
(
)
)
{
OnBareSectionMap
(
std
:
:
move
(
aSectionName
)
aMapBaseAddr
aMapNtStatus
)
;
}
return
;
}
topFrame
-
>
OnSectionMap
(
std
:
:
move
(
aSectionName
)
aMapBaseAddr
aMapNtStatus
)
;
}
void
ModuleLoadFrame
:
:
OnSectionMap
(
nt
:
:
AllocatedUnicodeString
&
&
aSectionName
const
void
*
aMapBaseAddr
NTSTATUS
aMapNtStatus
)
{
if
(
mLoadInfo
.
mBaseAddr
)
{
OnBareSectionMap
(
std
:
:
move
(
aSectionName
)
aMapBaseAddr
aMapNtStatus
)
;
return
;
}
mLoadInfo
.
mSectionName
=
std
:
:
move
(
aSectionName
)
;
mLoadInfo
.
mBaseAddr
=
aMapBaseAddr
;
}
void
ModuleLoadFrame
:
:
OnBareSectionMap
(
nt
:
:
AllocatedUnicodeString
&
&
aSectionName
const
void
*
aMapBaseAddr
NTSTATUS
aMapNtStatus
)
{
ModuleLoadFrame
frame
(
std
:
:
move
(
aSectionName
)
aMapBaseAddr
aMapNtStatus
)
;
}
NTSTATUS
ModuleLoadFrame
:
:
SetLoadStatus
(
NTSTATUS
aNtStatus
PHANDLE
aOutHandle
)
{
mLoadNtStatus
=
aNtStatus
;
if
(
!
mLSPSubstitutionRequired
)
{
return
aNtStatus
;
}
if
(
!
gLoaderPrivateAPI
.
SubstituteForLSP
(
mLoadInfo
.
mRequestedDllName
aOutHandle
)
)
{
return
aNtStatus
;
}
return
STATUS_SUCCESS
;
}
SafeThreadLocal
<
ModuleLoadFrame
*
>
ModuleLoadFrame
:
:
sTopFrame
;
}
}
