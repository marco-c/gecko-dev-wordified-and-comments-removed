#
ifndef
mozilla_freestanding_ModuleLoadFrame_h
#
define
mozilla_freestanding_ModuleLoadFrame_h
#
include
"
mozilla
/
LoaderAPIInterfaces
.
h
"
#
include
"
mozilla
/
NativeNt
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
namespace
mozilla
{
namespace
freestanding
{
#
if
defined
(
__MINGW32__
)
&
&
!
defined
(
HAVE_THREAD_TLS_KEYWORD
)
#
error
"
This
code
requires
the
compiler
to
have
native
TLS
support
"
#
endif
class
MOZ_RAII
ModuleLoadFrame
final
{
public
:
explicit
ModuleLoadFrame
(
PCUNICODE_STRING
aRequestedDllName
)
;
~
ModuleLoadFrame
(
)
;
static
void
NotifyLSPSubstitutionRequired
(
PCUNICODE_STRING
aLeafName
)
;
static
void
NotifySectionMap
(
nt
:
:
AllocatedUnicodeString
&
&
aSectionName
const
void
*
aMapBaseAddr
NTSTATUS
aMapNtStatus
)
;
NTSTATUS
SetLoadStatus
(
NTSTATUS
aNtStatus
PHANDLE
aOutHandle
)
;
ModuleLoadFrame
(
const
ModuleLoadFrame
&
)
=
delete
;
ModuleLoadFrame
(
ModuleLoadFrame
&
&
)
=
delete
;
ModuleLoadFrame
&
operator
=
(
const
ModuleLoadFrame
&
)
=
delete
;
ModuleLoadFrame
&
operator
=
(
ModuleLoadFrame
&
&
)
=
delete
;
private
:
ModuleLoadFrame
(
nt
:
:
AllocatedUnicodeString
&
&
aSectionName
const
void
*
aMapBaseAddr
NTSTATUS
aNtStatus
)
;
void
SetLSPSubstitutionRequired
(
PCUNICODE_STRING
aLeafName
)
;
void
OnSectionMap
(
nt
:
:
AllocatedUnicodeString
&
&
aSectionName
const
void
*
aMapBaseAddr
NTSTATUS
aMapNtStatus
)
;
static
void
OnBareSectionMap
(
nt
:
:
AllocatedUnicodeString
&
&
aSectionName
const
void
*
aMapBaseAddr
NTSTATUS
aMapNtStatus
)
;
private
:
ModuleLoadFrame
*
mPrev
;
void
*
mContext
;
bool
mLSPSubstitutionRequired
;
NTSTATUS
mLoadNtStatus
;
ModuleLoadInfo
mLoadInfo
;
static
MOZ_THREAD_LOCAL
(
ModuleLoadFrame
*
)
sTopFrame
;
}
;
}
}
#
endif
