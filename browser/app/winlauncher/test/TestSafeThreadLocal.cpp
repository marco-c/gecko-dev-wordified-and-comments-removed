#
define
MOZ_USE_LAUNCHER_ERROR
#
include
"
freestanding
/
SafeThreadLocal
.
h
"
#
include
"
mozilla
/
NativeNt
.
h
"
#
include
"
nsWindowsHelpers
.
h
"
#
include
<
process
.
h
>
#
include
<
stdio
.
h
>
MOZ_NEVER_INLINE
PVOID
SwapThreadLocalStoragePointer
(
PVOID
aNewValue
)
{
auto
oldValue
=
mozilla
:
:
nt
:
:
RtlGetThreadLocalStoragePointer
(
)
;
mozilla
:
:
nt
:
:
RtlSetThreadLocalStoragePointerForTestingOnly
(
aNewValue
)
;
return
oldValue
;
}
static
mozilla
:
:
freestanding
:
:
SafeThreadLocal
<
int
*
>
gTheStorage
;
MOZ_NEVER_INLINE
int
*
getTheStorage
(
)
{
return
gTheStorage
.
get
(
)
;
}
MOZ_NEVER_INLINE
void
setTheStorage
(
int
*
p
)
{
gTheStorage
.
set
(
p
)
;
}
static
unsigned
int
__stdcall
TestNonMainThread
(
void
*
aArg
)
{
for
(
int
i
=
0
;
i
<
100
;
+
+
i
)
{
setTheStorage
(
&
i
)
;
if
(
getTheStorage
(
)
!
=
&
i
)
{
printf
(
"
TEST
-
FAILED
|
TestSafeThreadLocal
|
"
"
A
value
is
not
correctly
stored
in
the
thread
-
local
storage
.
\
n
"
)
;
return
1
;
}
}
return
0
;
}
extern
"
C
"
int
wmain
(
int
argc
wchar_t
*
argv
[
]
)
{
int
dummy
=
0x1234
;
auto
origHead
=
SwapThreadLocalStoragePointer
(
nullptr
)
;
setTheStorage
(
&
dummy
)
;
SwapThreadLocalStoragePointer
(
origHead
)
;
nsAutoHandle
handles
[
8
]
;
for
(
auto
&
handle
:
handles
)
{
handle
.
own
(
reinterpret_cast
<
HANDLE
>
(
:
:
_beginthreadex
(
nullptr
0
TestNonMainThread
nullptr
0
nullptr
)
)
)
;
}
for
(
int
i
=
0
;
i
<
100
;
+
+
i
)
{
if
(
getTheStorage
(
)
!
=
&
dummy
)
{
printf
(
"
TEST
-
FAILED
|
TestSafeThreadLocal
|
"
"
A
value
is
not
correctly
stored
in
the
global
scope
.
\
n
"
)
;
return
1
;
}
}
for
(
auto
&
handle
:
handles
)
{
:
:
WaitForSingleObject
(
handle
INFINITE
)
;
#
if
!
defined
(
MOZ_ASAN
)
DWORD
exitCode
;
if
(
!
:
:
GetExitCodeThread
(
handle
&
exitCode
)
|
|
exitCode
)
{
return
1
;
}
#
endif
}
return
0
;
}
