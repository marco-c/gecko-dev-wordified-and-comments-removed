#
define
MOZ_USE_LAUNCHER_ERROR
#
include
"
nsWindowsDllInterceptor
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
BinarySearch
.
h
"
#
include
"
mozilla
/
ImportDir
.
h
"
#
include
"
mozilla
/
NativeNt
.
h
"
#
include
"
mozilla
/
PolicyChecks
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
include
"
mozilla
/
WindowsDllBlocklist
.
h
"
#
include
"
mozilla
/
WinHeaderOnlyUtils
.
h
"
#
include
"
DllBlocklistInit
.
h
"
#
include
"
freestanding
/
DllBlocklist
.
h
"
#
include
"
freestanding
/
SharedSection
.
h
"
namespace
mozilla
{
#
if
defined
(
MOZ_ASAN
)
|
|
defined
(
_M_ARM64
)
LauncherVoidResultWithLineInfo
InitializeDllBlocklistOOP
(
const
wchar_t
*
aFullImagePath
HANDLE
aChildProcess
const
IMAGE_THUNK_DATA
*
const
GeckoProcessType
aProcessType
)
{
return
mozilla
:
:
Ok
(
)
;
}
LauncherVoidResultWithLineInfo
InitializeDllBlocklistOOPFromLauncher
(
const
wchar_t
*
aFullImagePath
HANDLE
aChildProcess
const
bool
aDisableDynamicBlocklist
Maybe
<
std
:
:
wstring
>
aBlocklistFileName
)
{
return
mozilla
:
:
Ok
(
)
;
}
#
else
static
LauncherVoidResultWithLineInfo
InitializeDllBlocklistOOPInternal
(
const
wchar_t
*
aFullImagePath
nt
:
:
CrossExecTransferManager
&
aTransferMgr
const
IMAGE_THUNK_DATA
*
aCachedNtdllThunk
const
GeckoProcessType
aProcessType
)
{
CrossProcessDllInterceptor
intcpt
(
aTransferMgr
.
RemoteProcess
(
)
)
;
intcpt
.
Init
(
L
"
ntdll
.
dll
"
)
;
bool
ok
=
freestanding
:
:
stub_NtMapViewOfSection
.
SetDetour
(
aTransferMgr
intcpt
"
NtMapViewOfSection
"
&
freestanding
:
:
patched_NtMapViewOfSection
)
;
if
(
!
ok
)
{
return
LAUNCHER_ERROR_FROM_DETOUR_ERROR
(
intcpt
.
GetLastDetourError
(
)
)
;
}
ok
=
freestanding
:
:
stub_LdrLoadDll
.
SetDetour
(
aTransferMgr
intcpt
"
LdrLoadDll
"
&
freestanding
:
:
patched_LdrLoadDll
)
;
if
(
!
ok
)
{
return
LAUNCHER_ERROR_FROM_DETOUR_ERROR
(
intcpt
.
GetLastDetourError
(
)
)
;
}
const
nt
:
:
PEHeaders
&
ourExeImage
=
aTransferMgr
.
LocalPEHeaders
(
)
;
LauncherVoidResult
importDirRestored
=
RestoreImportDirectory
(
aFullImagePath
aTransferMgr
)
;
if
(
importDirRestored
.
isErr
(
)
)
{
return
importDirRestored
;
}
mozilla
:
:
nt
:
:
PEHeaders
ntdllImage
(
:
:
GetModuleHandleW
(
L
"
ntdll
.
dll
"
)
)
;
if
(
!
ntdllImage
)
{
return
LAUNCHER_ERROR_FROM_WIN32
(
ERROR_BAD_EXE_FORMAT
)
;
}
Maybe
<
Span
<
IMAGE_THUNK_DATA
>
>
ntdllThunks
;
if
(
aCachedNtdllThunk
)
{
ntdllThunks
=
ourExeImage
.
GetIATThunksForModule
(
"
ntdll
.
dll
"
)
;
}
else
{
Maybe
<
Range
<
const
uint8_t
>
>
ntdllBoundaries
=
ntdllImage
.
GetBounds
(
)
;
if
(
!
ntdllBoundaries
)
{
return
LAUNCHER_ERROR_FROM_WIN32
(
ERROR_BAD_EXE_FORMAT
)
;
}
ntdllThunks
=
ourExeImage
.
GetIATThunksForModule
(
"
ntdll
.
dll
"
ntdllBoundaries
.
ptr
(
)
)
;
}
if
(
!
ntdllThunks
)
{
return
LAUNCHER_ERROR_FROM_WIN32
(
ERROR_INVALID_DATA
)
;
}
{
PIMAGE_THUNK_DATA
firstIatThunkDst
=
ntdllThunks
.
value
(
)
.
data
(
)
;
const
IMAGE_THUNK_DATA
*
firstIatThunkSrc
=
aCachedNtdllThunk
?
aCachedNtdllThunk
:
firstIatThunkDst
;
SIZE_T
iatLength
=
ntdllThunks
.
value
(
)
.
LengthBytes
(
)
;
AutoVirtualProtect
prot
=
aTransferMgr
.
Protect
(
firstIatThunkDst
iatLength
PAGE_READWRITE
)
;
if
(
!
prot
)
{
return
LAUNCHER_ERROR_FROM_MOZ_WINDOWS_ERROR
(
prot
.
GetError
(
)
)
;
}
LauncherVoidResult
writeResult
=
aTransferMgr
.
Transfer
(
firstIatThunkDst
firstIatThunkSrc
iatLength
)
;
if
(
writeResult
.
isErr
(
)
)
{
return
writeResult
.
propagateErr
(
)
;
}
}
uint32_t
newFlags
=
eDllBlocklistInitFlagWasBootstrapped
;
if
(
gBlocklistInitFlags
&
eDllBlocklistInitFlagWasBootstrapped
)
{
newFlags
|
=
eDllBlocklistInitFlagIsChildProcess
;
}
if
(
aProcessType
=
=
GeckoProcessType_Utility
)
{
newFlags
|
=
eDllBlocklistInitFlagIsUtilityProcess
;
}
else
if
(
aProcessType
=
=
GeckoProcessType_Socket
)
{
newFlags
|
=
eDllBlocklistInitFlagIsSocketProcess
;
}
LauncherVoidResult
writeResult
=
aTransferMgr
.
Transfer
(
&
gBlocklistInitFlags
&
newFlags
sizeof
(
newFlags
)
)
;
if
(
writeResult
.
isErr
(
)
)
{
return
writeResult
.
propagateErr
(
)
;
}
return
Ok
(
)
;
}
LauncherVoidResultWithLineInfo
InitializeDllBlocklistOOP
(
const
wchar_t
*
aFullImagePath
HANDLE
aChildProcess
const
IMAGE_THUNK_DATA
*
aCachedNtdllThunk
const
GeckoProcessType
aProcessType
)
{
nt
:
:
CrossExecTransferManager
transferMgr
(
aChildProcess
)
;
if
(
!
transferMgr
)
{
return
LAUNCHER_ERROR_FROM_WIN32
(
ERROR_BAD_EXE_FORMAT
)
;
}
if
(
!
(
gBlocklistInitFlags
&
eDllBlocklistInitFlagWasBootstrapped
)
)
{
return
RestoreImportDirectory
(
aFullImagePath
transferMgr
)
;
}
LauncherVoidResult
transferResult
=
freestanding
:
:
gSharedSection
.
TransferHandle
(
transferMgr
GENERIC_READ
)
;
if
(
transferResult
.
isErr
(
)
)
{
return
transferResult
.
propagateErr
(
)
;
}
return
InitializeDllBlocklistOOPInternal
(
aFullImagePath
transferMgr
aCachedNtdllThunk
aProcessType
)
;
}
LauncherVoidResultWithLineInfo
InitializeDllBlocklistOOPFromLauncher
(
const
wchar_t
*
aFullImagePath
HANDLE
aChildProcess
const
bool
aDisableDynamicBlocklist
Maybe
<
std
:
:
wstring
>
aBlocklistFileName
)
{
nt
:
:
CrossExecTransferManager
transferMgr
(
aChildProcess
)
;
if
(
!
transferMgr
)
{
return
LAUNCHER_ERROR_FROM_WIN32
(
ERROR_BAD_EXE_FORMAT
)
;
}
LauncherVoidResultWithLineInfo
result
=
freestanding
:
:
gSharedSection
.
Init
(
)
;
if
(
result
.
isErr
(
)
)
{
return
result
;
}
if
(
aBlocklistFileName
.
isSome
(
)
&
&
!
PolicyCheckBoolean
(
L
"
DisableThirdPartyModuleBlocking
"
)
)
{
DynamicBlockList
blockList
(
aBlocklistFileName
-
>
c_str
(
)
)
;
result
=
freestanding
:
:
gSharedSection
.
SetBlocklist
(
blockList
aDisableDynamicBlocklist
)
;
if
(
result
.
isErr
(
)
)
{
return
result
;
}
}
LauncherVoidResult
transferResult
=
freestanding
:
:
gSharedSection
.
TransferHandle
(
transferMgr
GENERIC_READ
|
GENERIC_WRITE
)
;
if
(
transferResult
.
isErr
(
)
)
{
return
transferResult
.
propagateErr
(
)
;
}
auto
clearInstance
=
MakeScopeExit
(
[
]
(
)
{
freestanding
:
:
gSharedSection
.
Reset
(
nullptr
)
;
}
)
;
return
InitializeDllBlocklistOOPInternal
(
aFullImagePath
transferMgr
nullptr
GeckoProcessType_Default
)
;
}
#
endif
}
