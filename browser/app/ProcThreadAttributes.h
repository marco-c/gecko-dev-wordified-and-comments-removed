#
ifndef
mozilla_ProcThreadAttributes_h
#
define
mozilla_ProcThreadAttributes_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
<
windows
.
h
>
namespace
mozilla
{
class
MOZ_RAII
ProcThreadAttributes
final
{
struct
ProcThreadAttributeListDeleter
{
void
operator
(
)
(
LPPROC_THREAD_ATTRIBUTE_LIST
aList
)
{
:
:
DeleteProcThreadAttributeList
(
aList
)
;
delete
[
]
reinterpret_cast
<
char
*
>
(
aList
)
;
}
}
;
using
ProcThreadAttributeListPtr
=
UniquePtr
<
_PROC_THREAD_ATTRIBUTE_LIST
ProcThreadAttributeListDeleter
>
;
public
:
ProcThreadAttributes
(
)
:
mMitigationPolicies
(
0
)
{
}
~
ProcThreadAttributes
(
)
=
default
;
ProcThreadAttributes
(
const
ProcThreadAttributes
&
)
=
delete
;
ProcThreadAttributes
(
ProcThreadAttributes
&
&
)
=
delete
;
ProcThreadAttributes
&
operator
=
(
const
ProcThreadAttributes
&
)
=
delete
;
ProcThreadAttributes
&
operator
=
(
ProcThreadAttributes
&
&
)
=
delete
;
void
AddMitigationPolicy
(
DWORD64
aPolicy
)
{
mMitigationPolicies
|
=
aPolicy
;
}
bool
AddInheritableHandle
(
HANDLE
aHandle
)
{
return
mInheritableHandles
.
append
(
aHandle
)
;
}
template
<
size_t
N
>
bool
AddInheritableHandles
(
HANDLE
(
&
aHandles
)
[
N
]
)
{
return
mInheritableHandles
.
append
(
aHandles
N
)
;
}
Maybe
<
bool
>
AssignTo
(
STARTUPINFOEXW
&
aSiex
)
{
ZeroMemory
(
&
aSiex
sizeof
(
STARTUPINFOEXW
)
)
;
aSiex
.
StartupInfo
.
cb
=
sizeof
(
STARTUPINFOW
)
;
DWORD
numAttributes
=
0
;
if
(
mMitigationPolicies
)
{
+
+
numAttributes
;
}
if
(
!
mInheritableHandles
.
empty
(
)
)
{
+
+
numAttributes
;
}
if
(
!
numAttributes
)
{
return
Some
(
false
)
;
}
SIZE_T
listSize
=
0
;
if
(
!
:
:
InitializeProcThreadAttributeList
(
nullptr
numAttributes
0
&
listSize
)
&
&
:
:
GetLastError
(
)
!
=
ERROR_INSUFFICIENT_BUFFER
)
{
return
Nothing
(
)
;
}
auto
buf
=
MakeUnique
<
char
[
]
>
(
listSize
)
;
LPPROC_THREAD_ATTRIBUTE_LIST
tmpList
=
reinterpret_cast
<
LPPROC_THREAD_ATTRIBUTE_LIST
>
(
buf
.
get
(
)
)
;
if
(
!
:
:
InitializeProcThreadAttributeList
(
tmpList
numAttributes
0
&
listSize
)
)
{
return
Nothing
(
)
;
}
ProcThreadAttributeListPtr
attrList
(
reinterpret_cast
<
LPPROC_THREAD_ATTRIBUTE_LIST
>
(
buf
.
release
(
)
)
)
;
if
(
mMitigationPolicies
)
{
if
(
!
:
:
UpdateProcThreadAttribute
(
attrList
.
get
(
)
0
PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY
&
mMitigationPolicies
sizeof
(
mMitigationPolicies
)
nullptr
nullptr
)
)
{
return
Nothing
(
)
;
}
}
if
(
!
mInheritableHandles
.
empty
(
)
)
{
if
(
!
:
:
UpdateProcThreadAttribute
(
attrList
.
get
(
)
0
PROC_THREAD_ATTRIBUTE_HANDLE_LIST
mInheritableHandles
.
begin
(
)
mInheritableHandles
.
length
(
)
*
sizeof
(
HANDLE
)
nullptr
nullptr
)
)
{
return
Nothing
(
)
;
}
}
mAttrList
=
Move
(
attrList
)
;
aSiex
.
lpAttributeList
=
mAttrList
.
get
(
)
;
aSiex
.
StartupInfo
.
cb
=
sizeof
(
STARTUPINFOEXW
)
;
return
Some
(
true
)
;
}
private
:
static
const
uint32_t
kNumInline
=
3
;
DWORD64
mMitigationPolicies
;
Vector
<
HANDLE
kNumInline
>
mInheritableHandles
;
ProcThreadAttributeListPtr
mAttrList
;
}
;
}
#
endif
