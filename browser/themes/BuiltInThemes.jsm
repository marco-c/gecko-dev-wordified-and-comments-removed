var
EXPORTED_SYMBOLS
=
[
"
BuiltInThemes
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
BuiltInThemeConfig
:
"
resource
:
/
/
/
modules
/
BuiltInThemeConfig
.
jsm
"
}
)
;
const
ColorwayL10n
=
new
Localization
(
[
"
preview
/
colorways
.
ftl
"
]
true
)
;
const
kActiveThemePref
=
"
extensions
.
activeThemeID
"
;
const
kRetainedThemesPref
=
"
browser
.
theme
.
retainedExpiredThemes
"
;
const
ColorwayIntensityIdPostfixToL10nMap
=
[
[
"
-
soft
-
colorway
mozilla
.
org
"
"
colorway
-
intensity
-
soft
"
]
[
"
-
balanced
-
colorway
mozilla
.
org
"
"
colorway
-
intensity
-
balanced
"
]
[
"
-
bold
-
colorway
mozilla
.
org
"
"
colorway
-
intensity
-
bold
"
]
]
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
lazy
"
retainedThemes
"
kRetainedThemesPref
null
null
val
=
>
{
if
(
!
val
)
{
return
[
]
;
}
let
parsedVal
;
try
{
parsedVal
=
JSON
.
parse
(
val
)
;
}
catch
(
ex
)
{
console
.
log
(
{
kRetainedThemesPref
}
has
invalid
value
.
)
;
return
[
]
;
}
return
parsedVal
;
}
)
;
class
_BuiltInThemes
{
builtInThemeMap
=
lazy
.
BuiltInThemeConfig
;
previewForBuiltInThemeId
(
id
)
{
let
theme
=
this
.
builtInThemeMap
.
get
(
id
)
;
if
(
theme
)
{
return
{
theme
.
path
}
preview
.
svg
;
}
return
null
;
}
isMonochromaticTheme
(
id
)
{
return
id
.
endsWith
(
"
-
colorway
mozilla
.
org
"
)
;
}
maybeInstallActiveBuiltInTheme
(
)
{
const
activeThemeID
=
Services
.
prefs
.
getStringPref
(
kActiveThemePref
"
default
-
theme
mozilla
.
org
"
)
;
let
activeBuiltInTheme
=
this
.
builtInThemeMap
.
get
(
activeThemeID
)
;
if
(
activeBuiltInTheme
)
{
lazy
.
AddonManager
.
maybeInstallBuiltinAddon
(
activeThemeID
activeBuiltInTheme
.
version
resource
:
/
/
builtin
-
themes
/
{
activeBuiltInTheme
.
path
}
)
;
}
}
async
ensureBuiltInThemes
(
)
{
let
installPromises
=
[
]
;
installPromises
.
push
(
this
.
_uninstallExpiredThemes
(
)
)
;
const
now
=
new
Date
(
)
;
this
.
monochromaticSortIndices
=
new
Map
(
)
;
let
monochromaticSortIndex
=
0
;
for
(
let
[
id
themeInfo
]
of
this
.
builtInThemeMap
.
entries
(
)
)
{
if
(
!
themeInfo
.
expiry
|
|
lazy
.
retainedThemes
.
includes
(
id
)
|
|
new
Date
(
themeInfo
.
expiry
)
>
now
)
{
installPromises
.
push
(
lazy
.
AddonManager
.
maybeInstallBuiltinAddon
(
id
themeInfo
.
version
themeInfo
.
path
)
)
;
if
(
this
.
isMonochromaticTheme
(
id
)
)
{
this
.
monochromaticSortIndices
.
set
(
id
monochromaticSortIndex
+
+
)
;
}
}
}
await
Promise
.
all
(
installPromises
)
;
}
themeIsExpired
(
id
)
{
let
themeInfo
=
this
.
builtInThemeMap
.
get
(
id
)
;
return
themeInfo
?
.
expiry
&
&
new
Date
(
themeInfo
.
expiry
)
<
new
Date
(
)
;
}
isRetainedExpiredTheme
(
id
)
{
return
lazy
.
retainedThemes
.
includes
(
id
)
&
&
this
.
themeIsExpired
(
id
)
;
}
async
_uninstallExpiredThemes
(
)
{
const
activeThemeID
=
Services
.
prefs
.
getStringPref
(
kActiveThemePref
"
default
-
theme
mozilla
.
org
"
)
;
const
now
=
new
Date
(
)
;
const
expiredThemes
=
Array
.
from
(
this
.
builtInThemeMap
.
entries
(
)
)
.
filter
(
(
[
id
themeInfo
]
)
=
>
!
!
themeInfo
.
expiry
&
&
!
lazy
.
retainedThemes
.
includes
(
id
)
&
&
new
Date
(
themeInfo
.
expiry
)
<
=
now
)
;
for
(
let
[
id
]
of
expiredThemes
)
{
if
(
id
=
=
activeThemeID
)
{
this
.
_retainLimitedTimeTheme
(
id
)
;
}
else
{
try
{
let
addon
=
await
lazy
.
AddonManager
.
getAddonByID
(
id
)
;
if
(
addon
)
{
await
addon
.
uninstall
(
)
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
Failed
to
uninstall
expired
theme
{
id
}
)
;
}
}
}
}
_retainLimitedTimeTheme
(
id
)
{
if
(
!
lazy
.
retainedThemes
.
includes
(
id
)
)
{
lazy
.
retainedThemes
.
push
(
id
)
;
Services
.
prefs
.
setStringPref
(
kRetainedThemesPref
JSON
.
stringify
(
lazy
.
retainedThemes
)
)
;
}
}
findActiveColorwayCollection
(
)
{
return
this
.
builtInThemeMap
.
findActiveColorwayCollection
(
new
Date
(
)
)
;
}
isColorwayFromCurrentCollection
(
id
)
{
let
collection
=
this
.
findActiveColorwayCollection
(
)
;
return
(
collection
&
&
this
.
builtInThemeMap
.
get
(
id
)
?
.
collection
=
=
collection
.
id
)
;
}
getLocalizedColorwayGroupName
(
colorwayId
)
{
return
this
.
_getColorwayString
(
colorwayId
"
groupName
"
)
;
}
getColorwayIntensityL10nId
(
colorwayId
)
{
const
result
=
ColorwayIntensityIdPostfixToL10nMap
.
find
(
(
[
postfix
l10nId
]
)
=
>
colorwayId
.
endsWith
(
postfix
)
)
;
return
result
?
result
[
1
]
:
null
;
}
getLocalizedColorwayDescription
(
colorwayId
)
{
return
this
.
_getColorwayString
(
colorwayId
"
description
"
)
;
}
_getColorwayString
(
colorwayId
stringType
)
{
let
l10nId
=
this
.
builtInThemeMap
.
get
(
colorwayId
)
?
.
l10nId
?
.
[
stringType
]
;
let
s
;
if
(
l10nId
)
{
[
s
]
=
ColorwayL10n
.
formatMessagesSync
(
[
{
id
:
l10nId
}
]
)
;
}
return
s
?
.
value
|
|
null
;
}
}
var
BuiltInThemes
=
new
_BuiltInThemes
(
)
;
