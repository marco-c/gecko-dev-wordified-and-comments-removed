%
if
0
%
endif
%
define
fieldBorderColor
hsla
(
240
5
%
5
%
.
25
)
%
define
fieldHoverBorderColor
hsla
(
240
5
%
5
%
.
35
)
%
define
urlbarMarginInline
5px
:
root
{
-
-
toolbar
-
field
-
focus
-
border
-
color
:
Highlight
;
-
-
urlbar
-
icon
-
padding
:
6px
;
}
:
root
[
uidensity
=
compact
]
{
-
-
urlbar
-
icon
-
padding
:
4px
;
}
:
root
[
uidensity
=
touch
]
{
-
-
urlbar
-
icon
-
padding
:
7px
;
}
#
urlbar
-
container
#
search
-
container
{
padding
-
block
:
3px
;
margin
-
inline
:
urlbarMarginInline
;
}
#
urlbar
#
searchbar
{
min
-
height
:
30px
;
text
-
shadow
:
none
;
color
:
-
moz
-
FieldText
;
}
#
urlbar
:
not
(
.
megabar
)
#
urlbar
.
megabar
>
#
urlbar
-
background
#
searchbar
{
background
-
color
:
-
moz
-
Field
;
background
-
clip
:
padding
-
box
;
border
:
1px
solid
fieldBorderColor
;
border
-
radius
:
var
(
-
-
toolbarbutton
-
border
-
radius
)
;
box
-
shadow
:
0
1px
4px
rgba
(
0
0
0
.
05
)
;
}
#
urlbar
-
input
-
container
#
searchbar
{
border
-
radius
:
var
(
-
-
toolbarbutton
-
border
-
radius
)
;
overflow
:
-
moz
-
hidden
-
unscrollable
;
}
#
urlbar
-
input
#
urlbar
-
scheme
.
searchbar
-
textbox
{
-
moz
-
box
-
flex
:
1
;
background
-
color
:
transparent
;
color
:
inherit
;
border
:
none
;
margin
:
0
;
padding
:
0
;
}
#
urlbar
:
not
(
.
megabar
)
:
not
(
[
focused
=
"
true
"
]
)
:
hover
#
urlbar
.
megabar
:
not
(
[
focused
=
"
true
"
]
)
:
hover
>
#
urlbar
-
background
#
searchbar
:
not
(
:
focus
-
within
)
:
hover
{
border
-
color
:
fieldHoverBorderColor
;
box
-
shadow
:
0
1px
6px
rgba
(
0
0
0
.
1
)
;
}
#
urlbar
:
not
(
.
megabar
)
[
focused
=
"
true
"
]
#
urlbar
.
megabar
[
focused
=
"
true
"
]
>
#
urlbar
-
background
#
searchbar
:
focus
-
within
{
border
-
color
:
var
(
-
-
toolbar
-
field
-
focus
-
border
-
color
)
;
}
#
urlbar
:
-
moz
-
lwtheme
#
navigator
-
toolbox
#
searchbar
:
-
moz
-
lwtheme
{
color
:
var
(
-
-
lwt
-
toolbar
-
field
-
color
black
)
;
}
#
urlbar
:
not
(
.
megabar
)
:
-
moz
-
lwtheme
#
urlbar
.
megabar
:
-
moz
-
lwtheme
>
#
urlbar
-
background
#
navigator
-
toolbox
#
searchbar
:
-
moz
-
lwtheme
{
background
-
color
:
var
(
-
-
lwt
-
toolbar
-
field
-
background
-
color
hsla
(
0
0
%
100
%
.
8
)
)
;
}
#
urlbar
:
not
(
.
megabar
)
:
not
(
[
focused
=
"
true
"
]
)
:
-
moz
-
lwtheme
#
urlbar
.
megabar
:
not
(
[
focused
=
"
true
"
]
)
:
-
moz
-
lwtheme
>
#
urlbar
-
background
#
navigator
-
toolbox
#
searchbar
:
not
(
:
focus
-
within
)
:
-
moz
-
lwtheme
{
border
-
color
:
var
(
-
-
lwt
-
toolbar
-
field
-
border
-
color
fieldBorderColor
)
;
}
#
urlbar
:
not
(
.
megabar
)
:
not
(
[
focused
=
"
true
"
]
)
:
-
moz
-
lwtheme
:
hover
#
urlbar
.
megabar
:
not
(
[
focused
=
"
true
"
]
)
:
-
moz
-
lwtheme
:
hover
>
#
urlbar
-
background
#
navigator
-
toolbox
#
searchbar
:
not
(
:
focus
-
within
)
:
-
moz
-
lwtheme
:
hover
{
border
-
color
:
var
(
-
-
lwt
-
toolbar
-
field
-
border
-
color
fieldHoverBorderColor
)
;
}
#
urlbar
:
not
(
.
megabar
)
:
-
moz
-
lwtheme
:
hover
#
urlbar
.
megabar
:
-
moz
-
lwtheme
:
hover
>
#
urlbar
-
background
#
navigator
-
toolbox
#
searchbar
:
-
moz
-
lwtheme
:
hover
{
background
-
color
:
var
(
-
-
lwt
-
toolbar
-
field
-
background
-
color
white
)
;
}
#
urlbar
[
focused
=
"
true
"
]
:
-
moz
-
lwtheme
#
navigator
-
toolbox
#
searchbar
:
focus
-
within
:
-
moz
-
lwtheme
{
color
:
var
(
-
-
lwt
-
toolbar
-
field
-
focus
-
color
var
(
-
-
lwt
-
toolbar
-
field
-
color
black
)
)
;
}
#
urlbar
:
not
(
.
megabar
)
[
focused
=
"
true
"
]
:
-
moz
-
lwtheme
#
urlbar
.
megabar
[
focused
=
"
true
"
]
:
-
moz
-
lwtheme
>
#
urlbar
-
background
#
navigator
-
toolbox
#
searchbar
:
focus
-
within
:
-
moz
-
lwtheme
{
background
-
color
:
var
(
-
-
lwt
-
toolbar
-
field
-
focus
)
;
}
:
root
[
lwt
-
selection
]
#
urlbar
-
input
:
-
moz
-
lwtheme
:
:
selection
:
root
[
lwt
-
selection
]
.
searchbar
-
textbox
:
-
moz
-
lwtheme
:
:
selection
{
background
-
color
:
var
(
-
-
lwt
-
toolbar
-
field
-
highlight
Highlight
)
;
color
:
var
(
-
-
lwt
-
toolbar
-
field
-
highlight
-
text
HighlightText
)
;
}
#
urlbar
:
not
(
[
focused
=
"
true
"
]
)
{
caret
-
color
:
transparent
;
}
#
urlbar
.
megabar
>
#
urlbar
-
input
-
container
>
#
urlbar
-
search
-
icon
{
width
:
calc
(
16px
+
2
*
identityBoxPaddingInline
)
;
margin
-
inline
-
end
:
identityBoxMarginInlineEnd
;
background
-
image
:
url
(
chrome
:
/
/
browser
/
skin
/
search
-
glass
.
svg
)
;
background
-
repeat
:
no
-
repeat
;
background
-
position
:
center
;
-
moz
-
context
-
properties
:
fill
fill
-
opacity
;
fill
:
var
(
-
-
lwt
-
toolbarbutton
-
icon
-
fill
var
(
-
-
toolbar
-
color
)
)
;
fill
-
opacity
:
var
(
-
-
toolbarbutton
-
icon
-
fill
-
opacity
)
;
}
#
urlbar
.
megabar
#
urlbar
.
megabar
>
#
urlbar
-
input
-
container
#
urlbar
.
megabar
>
.
urlbarView
{
position
:
relative
;
}
#
urlbar
.
megabar
>
#
urlbar
-
background
{
display
:
block
;
position
:
absolute
;
inset
:
0
;
inset
-
inline
-
start
:
calc
(
16px
+
2
*
identityBoxPaddingInline
)
;
}
#
urlbar
.
megabar
>
#
urlbar
-
input
-
container
{
border
:
1px
solid
transparent
;
}
#
urlbar
-
container
[
breakout
]
{
position
:
relative
;
min
-
height
:
var
(
-
-
urlbar
-
container
-
height
)
;
}
#
urlbar
[
breakout
]
{
display
:
block
;
position
:
absolute
;
width
:
100
%
;
height
:
var
(
-
-
urlbar
-
height
)
;
top
:
calc
(
(
var
(
-
-
urlbar
-
toolbar
-
height
)
-
var
(
-
-
urlbar
-
height
)
)
/
2
)
;
left
:
0
;
}
#
urlbar
[
breakout
]
>
#
urlbar
-
input
-
container
{
width
:
100
%
;
height
:
100
%
;
}
#
urlbar
[
breakout
]
[
breakout
-
extend
]
#
urlbar
[
breakout
]
[
breakout
-
extend
-
disabled
]
[
open
]
{
z
-
index
:
3
;
height
:
auto
;
}
#
urlbar
[
breakout
]
[
breakout
-
extend
]
{
top
:
0
;
left
:
-
urlbarMarginInline
;
width
:
calc
(
100
%
+
2
*
urlbarMarginInline
)
;
}
#
urlbar
[
breakout
]
[
breakout
-
extend
]
>
#
urlbar
-
background
{
box
-
shadow
:
0
5px
18px
rgba
(
0
0
0
.
2
)
;
inset
-
inline
-
start
:
0
;
}
#
urlbar
[
breakout
]
[
breakout
-
extend
]
>
#
urlbar
-
input
-
container
{
height
:
var
(
-
-
urlbar
-
toolbar
-
height
)
;
padding
-
block
:
calc
(
(
var
(
-
-
urlbar
-
toolbar
-
height
)
-
var
(
-
-
urlbar
-
height
)
)
/
2
)
;
padding
-
inline
:
urlbarMarginInline
;
}
#
urlbar
[
breakout
]
[
breakout
-
extend
]
>
#
urlbar
-
input
-
container
>
#
urlbar
-
search
-
icon
{
fill
:
currentColor
;
}
keyframes
urlbar
-
grow
{
0
%
{
transform
:
scaleX
(
.
98
)
scaleY
(
.
9
)
;
}
100
%
{
transform
:
scale
(
1
.
0
)
;
}
}
#
urlbar
[
breakout
]
[
breakout
-
extend
]
>
#
urlbar
-
background
#
urlbar
[
breakout
]
[
breakout
-
extend
]
>
.
urlbarView
{
animation
-
name
:
urlbar
-
grow
;
animation
-
duration
:
0s
;
animation
-
timing
-
function
:
var
(
-
-
animation
-
easing
-
function
)
;
}
media
(
prefers
-
reduced
-
motion
:
no
-
preference
)
{
#
urlbar
[
breakout
]
[
breakout
-
extend
]
[
breakout
-
extend
-
animate
]
>
#
urlbar
-
background
#
urlbar
[
breakout
]
[
breakout
-
extend
]
[
breakout
-
extend
-
animate
]
>
.
urlbarView
{
animation
-
duration
:
150ms
;
}
}
:
root
[
uidensity
=
compact
]
#
urlbar
:
root
[
uidensity
=
compact
]
#
searchbar
{
min
-
height
:
26px
;
}
:
root
[
uidensity
=
touch
]
#
urlbar
:
root
[
uidensity
=
touch
]
#
searchbar
{
min
-
height
:
32px
;
}
:
root
[
chromehidden
~
=
"
toolbar
"
]
#
urlbar
-
container
{
padding
-
inline
-
end
:
0
;
}
:
root
[
customizing
]
.
urlbar
-
input
-
box
{
visibility
:
hidden
;
}
#
urlbar
-
container
{
-
moz
-
box
-
align
:
center
;
}
#
urlbar
-
search
-
splitter
{
min
-
width
:
12px
;
margin
:
0
-
6px
;
position
:
relative
;
border
:
none
;
background
:
transparent
;
-
moz
-
appearance
:
none
;
}
.
pageAction
-
panel
-
button
>
.
toolbarbutton
-
icon
{
width
:
16px
;
height
:
16px
;
}
#
pageAction
-
panel
-
bookmark
#
star
-
button
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
bookmark
-
hollow
.
svg
"
)
;
}
#
pageAction
-
panel
-
bookmark
[
starred
]
#
star
-
button
[
starred
]
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
bookmark
.
svg
"
)
;
}
#
star
-
button
[
starred
]
{
fill
-
opacity
:
1
;
fill
:
var
(
-
-
toolbarbutton
-
icon
-
fill
-
attention
)
;
}
#
pocket
-
button
#
pageAction
-
panel
-
pocket
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
pocket
-
outline
.
svg
"
)
;
}
#
pocket
-
button
-
box
[
open
=
"
true
"
]
>
#
pocket
-
button
#
pocket
-
button
-
box
[
pocketed
=
"
true
"
]
>
#
pocket
-
button
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
pocket
.
svg
"
)
;
}
#
pocket
-
button
-
box
[
animate
=
"
true
"
]
>
#
pocket
-
button
#
pocket
-
button
[
open
=
"
true
"
]
[
animationsenabled
]
>
.
toolbarbutton
-
icon
{
fill
:
transparent
;
}
#
pocket
-
button
-
box
[
open
=
"
true
"
]
>
#
pocket
-
button
#
pocket
-
button
-
box
[
pocketed
=
"
true
"
]
>
#
pocket
-
button
{
fill
:
#
ef4056
;
fill
-
opacity
:
1
;
}
#
pageAction
-
panel
-
pinTab
#
pageAction
-
urlbar
-
pinTab
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
pin
-
tab
.
svg
"
)
;
}
#
pageAction
-
panel
-
pinTab
[
pinned
]
#
pageAction
-
urlbar
-
pinTab
[
pinned
]
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
unpin
-
tab
.
svg
"
)
;
}
#
pageAction
-
panel
-
copyURL
#
pageAction
-
urlbar
-
copyURL
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
link
.
svg
"
)
;
}
#
pageAction
-
panel
-
emailLink
#
pageAction
-
urlbar
-
emailLink
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
mail
.
svg
"
)
;
}
#
pageAction
-
panel
-
sendToDevice
#
pageAction
-
urlbar
-
sendToDevice
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
send
-
to
-
device
.
svg
"
)
;
}
#
pageAction
-
panel
-
pinTab
:
-
moz
-
locale
-
dir
(
rtl
)
>
.
toolbarbutton
-
icon
#
pageAction
-
urlbar
-
pinTab
:
-
moz
-
locale
-
dir
(
rtl
)
#
pageAction
-
panel
-
sendToDevice
:
-
moz
-
locale
-
dir
(
rtl
)
>
.
toolbarbutton
-
icon
#
pageAction
-
urlbar
-
sendToDevice
:
-
moz
-
locale
-
dir
(
rtl
)
{
transform
:
scaleX
(
-
1
)
;
}
.
pageAction
-
sendToDevice
-
device
[
clientType
=
phone
]
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
device
-
phone
.
svg
"
)
;
}
.
pageAction
-
sendToDevice
-
device
[
clientType
=
tablet
]
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
device
-
tablet
.
svg
"
)
;
}
.
pageAction
-
sendToDevice
-
device
[
clientType
=
desktop
]
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
device
-
desktop
.
svg
"
)
;
}
.
pageAction
-
sendToDevice
-
device
[
clientType
=
tv
]
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
device
-
tv
.
svg
"
)
;
}
.
pageAction
-
sendToDevice
-
device
[
clientType
=
vr
]
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
device
-
vr
.
svg
"
)
;
}
.
pageAction
-
sendToDevice
-
device
.
signintosync
#
pageAction
-
panel
-
sendToDevice
-
fxa
#
pageAction
-
urlbar
-
sendToDevice
-
fxa
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
sync
.
svg
"
)
;
}
#
pageAction
-
panel
-
addSearchEngine
>
.
toolbarbutton
-
badge
-
stack
>
.
toolbarbutton
-
icon
{
width
:
16px
;
height
:
16px
;
}
#
pageAction
-
panel
-
addSearchEngine
>
.
toolbarbutton
-
badge
-
stack
>
.
toolbarbutton
-
badge
{
display
:
-
moz
-
box
;
background
:
url
(
chrome
:
/
/
browser
/
skin
/
search
-
indicator
-
badge
-
add
.
svg
)
no
-
repeat
center
;
box
-
shadow
:
none
;
margin
:
-
4px
0
0
!
important
;
margin
-
inline
-
end
:
-
4px
!
important
;
width
:
11px
;
height
:
11px
;
min
-
width
:
11px
;
min
-
height
:
11px
;
}
#
pageActionActivatedActionPanel
[
actionID
=
"
pocket
"
]
{
-
-
arrowpanel
-
background
:
#
fbfbfb
;
}
#
page
-
action
-
buttons
{
-
moz
-
box
-
align
:
center
;
}
#
pageActionSeparator
{
border
-
inline
-
start
:
1px
solid
var
(
-
-
urlbar
-
separator
-
color
)
;
border
-
image
:
linear
-
gradient
(
transparent
15
%
var
(
-
-
urlbar
-
separator
-
color
)
15
%
var
(
-
-
urlbar
-
separator
-
color
)
85
%
transparent
85
%
)
;
border
-
image
-
slice
:
1
;
width
:
1px
;
height
:
28px
;
visibility
:
hidden
;
}
:
root
[
uidensity
=
compact
]
#
pageActionSeparator
{
height
:
24px
;
}
:
root
[
uidensity
=
touch
]
#
pageActionSeparator
{
height
:
30px
;
}
#
page
-
action
-
buttons
>
:
not
(
[
hidden
]
)
:
not
(
toolbartabstop
)
~
#
pageActionSeparator
{
visibility
:
visible
;
margin
-
left
:
6px
;
margin
-
right
:
6px
;
}
#
userContext
-
icons
#
urlbar
-
zoom
-
button
{
margin
-
left
:
6px
;
margin
-
right
:
6px
;
}
.
urlbar
-
icon
{
width
:
28px
;
height
:
28px
;
padding
:
var
(
-
-
urlbar
-
icon
-
padding
)
;
-
moz
-
context
-
properties
:
fill
fill
-
opacity
;
fill
:
currentColor
;
fill
-
opacity
:
0
.
6
;
color
:
inherit
;
}
.
urlbar
-
page
-
action
[
disabled
]
{
fill
-
opacity
:
0
.
3
;
}
:
root
[
uidensity
=
compact
]
.
urlbar
-
icon
{
width
:
24px
;
height
:
24px
;
}
:
root
[
uidensity
=
touch
]
.
urlbar
-
icon
{
width
:
30px
;
height
:
30px
;
}
:
not
(
.
urlbar
-
icon
-
wrapper
)
>
.
urlbar
-
icon
:
not
(
[
disabled
]
)
:
hover
.
urlbar
-
icon
-
wrapper
:
not
(
[
disabled
]
)
:
hover
{
background
-
color
:
hsla
(
0
0
%
70
%
.
2
)
;
}
:
not
(
.
urlbar
-
icon
-
wrapper
)
>
.
urlbar
-
icon
:
not
(
[
disabled
]
)
[
open
]
:
not
(
.
urlbar
-
icon
-
wrapper
)
>
.
urlbar
-
icon
:
not
(
[
disabled
]
)
:
hover
:
active
.
urlbar
-
icon
-
wrapper
:
not
(
[
disabled
]
)
[
open
]
.
urlbar
-
icon
-
wrapper
:
not
(
[
disabled
]
)
:
hover
:
active
{
background
-
color
:
hsla
(
0
0
%
70
%
.
3
)
;
}
.
urlbar
-
icon
:
-
moz
-
focusring
.
urlbar
-
icon
-
wrapper
:
-
moz
-
focusring
{
outline
:
var
(
-
-
toolbarbutton
-
focus
-
outline
)
;
outline
-
offset
:
-
2px
;
-
moz
-
outline
-
radius
:
var
(
-
-
toolbarbutton
-
border
-
radius
)
;
}
#
urlbar
-
go
-
button
.
search
-
go
-
button
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
forward
.
svg
"
)
;
}
#
urlbar
-
go
-
button
:
-
moz
-
locale
-
dir
(
rtl
)
.
search
-
go
-
button
:
-
moz
-
locale
-
dir
(
rtl
)
{
transform
:
scaleX
(
-
1
)
;
}
.
urlbar
-
history
-
dropmarker
{
list
-
style
-
image
:
url
(
chrome
:
/
/
global
/
skin
/
icons
/
arrow
-
dropdown
-
16
.
svg
)
;
transition
:
opacity
0
.
15s
ease
;
}
#
urlbar
[
switchingtabs
]
>
#
urlbar
-
input
-
container
>
.
urlbar
-
history
-
dropmarker
{
transition
:
none
;
}
#
nav
-
bar
:
not
(
[
customizing
=
"
true
"
]
)
>
#
nav
-
bar
-
customization
-
target
>
#
urlbar
-
container
:
not
(
:
hover
)
>
#
urlbar
:
not
(
[
focused
]
)
>
#
urlbar
-
input
-
container
>
.
urlbar
-
history
-
dropmarker
{
opacity
:
0
;
}
#
pageActionButton
.
share
-
more
-
button
{
list
-
style
-
image
:
url
(
"
chrome
:
/
/
global
/
skin
/
icons
/
more
.
svg
"
)
;
}
keyframes
bookmark
-
animation
{
from
{
transform
:
translateX
(
0
)
;
}
to
{
transform
:
translateX
(
-
627px
)
;
}
}
keyframes
bookmark
-
animation
-
rtl
{
from
{
transform
:
scaleX
(
-
1
)
translateX
(
0
)
;
}
to
{
transform
:
scaleX
(
-
1
)
translateX
(
-
627px
)
;
}
}
#
star
-
button
-
box
[
animationsenabled
]
{
position
:
relative
;
}
#
star
-
button
[
preloadanimations
]
+
#
star
-
button
-
animatable
-
box
>
#
star
-
button
-
animatable
-
image
{
background
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
bookmark
-
animation
.
svg
"
)
url
(
"
chrome
:
/
/
browser
/
skin
/
library
-
bookmark
-
animation
.
svg
"
)
;
background
-
size
:
0
0
;
}
#
star
-
button
-
box
[
animationsenabled
]
>
#
star
-
button
[
starred
]
[
animate
]
{
fill
:
transparent
;
position
:
relative
;
}
#
star
-
button
-
box
[
animationsenabled
]
>
#
star
-
button
[
starred
]
[
animate
]
+
#
star
-
button
-
animatable
-
box
{
display
:
block
;
position
:
absolute
;
overflow
:
hidden
;
top
:
calc
(
50
%
-
16
.
5px
)
;
margin
-
inline
-
start
:
-
2
.
5px
;
width
:
33px
;
height
:
33px
;
}
:
root
[
uidensity
=
compact
]
#
star
-
button
-
box
[
animationsenabled
]
>
#
star
-
button
[
starred
]
[
animate
]
+
#
star
-
button
-
animatable
-
box
{
margin
-
inline
-
start
:
-
4
.
5px
;
}
:
root
[
uidensity
=
touch
]
#
star
-
button
-
box
[
animationsenabled
]
>
#
star
-
button
[
starred
]
[
animate
]
+
#
star
-
button
-
animatable
-
box
{
margin
-
inline
-
start
:
-
1
.
5px
;
}
#
star
-
button
-
box
[
animationsenabled
]
>
#
star
-
button
[
starred
]
[
animate
]
+
#
star
-
button
-
animatable
-
box
>
#
star
-
button
-
animatable
-
image
{
background
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
bookmark
-
animation
.
svg
"
)
;
background
-
size
:
auto
;
list
-
style
-
image
:
none
;
height
:
var
(
-
-
toolbarbutton
-
height
)
;
min
-
height
:
33px
;
animation
-
name
:
bookmark
-
animation
;
animation
-
fill
-
mode
:
forwards
;
animation
-
iteration
-
count
:
1
;
animation
-
timing
-
function
:
steps
(
19
)
;
animation
-
duration
:
317ms
;
width
:
660px
;
-
moz
-
context
-
properties
:
fill
stroke
;
stroke
:
var
(
-
-
toolbarbutton
-
icon
-
fill
-
attention
)
;
}
#
star
-
button
-
box
[
animationsenabled
]
>
#
star
-
button
[
starred
]
[
animate
]
:
-
moz
-
locale
-
dir
(
rtl
)
+
#
star
-
button
-
animatable
-
box
>
#
star
-
button
-
animatable
-
image
{
animation
-
name
:
bookmark
-
animation
-
rtl
;
}
keyframes
pocket
-
animation
{
from
{
transform
:
translateX
(
0
)
;
}
to
{
transform
:
translateX
(
-
240px
)
;
}
}
keyframes
pocket
-
animation
-
rtl
{
from
{
transform
:
scaleX
(
-
1
)
translateX
(
0
)
;
}
to
{
transform
:
scaleX
(
-
1
)
translateX
(
-
240px
)
;
}
}
#
pocket
-
button
-
box
[
animate
=
"
true
"
]
>
#
pocket
-
animatable
-
box
#
pocket
-
button
>
.
toolbarbutton
-
animatable
-
box
{
top
:
calc
(
50
%
-
8px
)
;
margin
-
inline
-
start
:
calc
(
(
16px
+
2
*
var
(
-
-
toolbarbutton
-
inner
-
padding
)
-
20px
)
/
2
)
;
width
:
20px
;
height
:
16px
;
}
#
pocket
-
button
-
box
[
animate
=
"
true
"
]
>
#
pocket
-
animatable
-
box
{
display
:
block
;
position
:
absolute
;
overflow
:
hidden
;
margin
-
inline
-
start
:
4px
;
}
:
root
[
uidensity
=
compact
]
#
pocket
-
button
-
box
[
animate
=
"
true
"
]
>
#
pocket
-
animatable
-
box
{
margin
-
inline
-
start
:
2px
;
}
:
root
[
uidensity
=
touch
]
#
pocket
-
button
-
box
[
animate
=
"
true
"
]
>
#
pocket
-
animatable
-
box
{
margin
-
inline
-
start
:
5px
;
}
#
pocket
-
button
-
box
[
animate
=
"
true
"
]
>
#
pocket
-
animatable
-
box
>
#
pocket
-
animatable
-
image
#
pocket
-
button
>
.
toolbarbutton
-
animatable
-
box
>
.
toolbarbutton
-
animatable
-
image
{
height
:
var
(
-
-
toolbarbutton
-
height
)
;
}
#
pocket
-
button
-
box
[
animate
=
"
true
"
]
#
pocket
-
button
[
open
=
"
true
"
]
[
animationsenabled
]
[
cui
-
areatype
=
"
toolbar
"
]
:
not
(
[
overflowedItem
=
"
true
"
]
)
{
position
:
relative
;
}
#
pocket
-
button
-
box
:
not
(
[
animate
=
"
true
"
]
)
:
not
(
:
hover
)
>
#
pocket
-
animatable
-
box
{
display
:
none
;
}
#
pocket
-
button
-
box
:
not
(
[
animate
=
"
true
"
]
)
:
hover
>
#
pocket
-
animatable
-
box
>
#
pocket
-
animatable
-
image
#
pocket
-
button
[
animationsenabled
]
[
cui
-
areatype
=
"
toolbar
"
]
:
not
(
[
overflowedItem
=
"
true
"
]
)
:
not
(
[
open
=
"
true
"
]
)
:
hover
>
.
toolbarbutton
-
animatable
-
box
>
.
toolbarbutton
-
animatable
-
image
{
background
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
pocket
-
animation
.
svg
"
)
url
(
"
chrome
:
/
/
browser
/
skin
/
library
-
pocket
-
animation
.
svg
"
)
;
background
-
size
:
0
0
;
}
#
pocket
-
button
-
box
[
animate
=
"
true
"
]
>
#
pocket
-
animatable
-
box
>
#
pocket
-
animatable
-
image
#
pocket
-
button
[
open
=
"
true
"
]
[
animationsenabled
]
[
cui
-
areatype
=
"
toolbar
"
]
:
not
(
[
overflowedItem
=
"
true
"
]
)
>
.
toolbarbutton
-
animatable
-
box
>
.
toolbarbutton
-
animatable
-
image
{
animation
-
name
:
pocket
-
animation
;
animation
-
timing
-
function
:
steps
(
12
)
;
animation
-
duration
:
200ms
;
background
-
image
:
url
(
"
chrome
:
/
/
browser
/
skin
/
pocket
-
animation
.
svg
"
)
;
fill
:
#
ef4056
;
-
moz
-
context
-
properties
:
fill
;
width
:
260px
;
}
#
pocket
-
button
-
box
[
animate
=
"
true
"
]
:
-
moz
-
locale
-
dir
(
rtl
)
>
#
pocket
-
animatable
-
box
>
#
pocket
-
animatable
-
image
#
pocket
-
button
[
open
=
"
true
"
]
[
animationsenabled
]
[
cui
-
areatype
=
"
toolbar
"
]
:
not
(
[
overflowedItem
=
"
true
"
]
)
:
-
moz
-
locale
-
dir
(
rtl
)
>
.
toolbarbutton
-
animatable
-
box
>
.
toolbarbutton
-
animatable
-
image
{
animation
-
name
:
pocket
-
animation
-
rtl
;
}
:
root
{
-
-
cfr
-
animation
-
duration
:
0
.
35s
;
-
-
cfr
-
button
-
addons
-
icon
:
url
(
resource
:
/
/
activity
-
stream
/
data
/
content
/
assets
/
glyph
-
webextension
-
16
.
svg
)
;
-
-
cfr
-
button
-
features
-
icon
:
url
(
resource
:
/
/
activity
-
stream
/
data
/
content
/
assets
/
glyph
-
cfr
-
feature
-
16
.
svg
)
;
-
-
cfr
-
active
-
color
:
#
0060df
;
}
#
contextual
-
feature
-
recommendation
{
width
:
28px
;
margin
-
inline
-
start
:
0
;
transition
:
margin
-
inline
-
start
step
-
end
var
(
-
-
cfr
-
animation
-
duration
)
;
}
#
urlbar
[
cfr
-
recommendation
-
state
=
"
expanded
"
]
#
contextual
-
feature
-
recommendation
{
margin
-
inline
-
start
:
calc
(
var
(
-
-
cfr
-
label
-
width
)
*
-
1
)
;
transition
:
margin
-
inline
-
start
step
-
start
var
(
-
-
cfr
-
animation
-
duration
)
;
}
#
cfr
-
button
{
margin
:
-
2px
0
;
transition
-
property
:
fill
fill
-
opacity
transform
;
transition
-
timing
-
function
:
ease
-
in
-
out
;
transition
-
duration
:
var
(
-
-
cfr
-
animation
-
duration
)
;
}
#
cfr
-
button
[
data
-
cfr
-
icon
=
"
webextensions
-
icon
"
]
{
list
-
style
-
image
:
var
(
-
-
cfr
-
button
-
addons
-
icon
)
;
}
#
cfr
-
button
[
data
-
cfr
-
icon
=
"
recommendations
-
icon
"
]
{
list
-
style
-
image
:
var
(
-
-
cfr
-
button
-
features
-
icon
)
;
}
#
urlbar
[
cfr
-
recommendation
-
state
=
"
expanded
"
]
#
cfr
-
button
{
fill
:
white
;
fill
-
opacity
:
1
;
background
-
color
:
transparent
;
transform
:
translateX
(
calc
(
var
(
-
-
cfr
-
label
-
width
)
*
-
1
)
)
;
}
#
urlbar
[
cfr
-
recommendation
-
state
=
"
expanded
"
]
#
cfr
-
button
:
-
moz
-
locale
-
dir
(
rtl
)
{
transform
:
translateX
(
calc
(
var
(
-
-
cfr
-
label
-
width
)
)
)
;
}
keyframes
cfr
-
button
-
fade
-
through
-
active
-
color
{
33
%
{
fill
-
opacity
:
1
;
fill
:
var
(
-
-
cfr
-
active
-
color
)
;
}
67
%
{
fill
-
opacity
:
1
;
fill
:
var
(
-
-
cfr
-
active
-
color
)
;
}
}
#
urlbar
[
cfr
-
recommendation
-
state
=
"
collapsed
"
]
#
cfr
-
button
{
animation
:
cfr
-
button
-
fade
-
through
-
active
-
color
calc
(
3
*
var
(
-
-
cfr
-
animation
-
duration
)
)
;
}
#
cfr
-
label
-
container
{
width
:
0
;
overflow
:
hidden
;
border
-
radius
:
5px
;
padding
-
inline
-
start
:
28px
;
mask
-
image
:
linear
-
gradient
(
to
right
transparent
0
black
0
)
;
mask
-
position
-
x
:
var
(
-
-
cfr
-
label
-
width
)
;
mask
-
repeat
:
no
-
repeat
;
transition
-
property
:
background
-
color
mask
-
position
-
x
width
margin
-
inline
-
end
;
transition
-
timing
-
function
:
ease
-
in
-
out
ease
-
in
-
out
step
-
end
step
-
end
;
transition
-
duration
:
var
(
-
-
cfr
-
animation
-
duration
)
;
}
#
cfr
-
label
-
container
:
-
moz
-
locale
-
dir
(
rtl
)
{
mask
-
position
-
x
:
calc
(
var
(
-
-
cfr
-
label
-
width
)
*
-
1
)
;
}
#
urlbar
[
cfr
-
recommendation
-
state
=
"
expanded
"
]
#
cfr
-
label
-
container
{
width
:
calc
(
var
(
-
-
cfr
-
label
-
width
)
+
28px
)
;
background
-
color
:
var
(
-
-
cfr
-
active
-
color
)
;
margin
-
inline
-
end
:
-
28px
;
mask
-
position
-
x
:
0
;
transition
-
timing
-
function
:
ease
-
in
-
out
ease
-
in
-
out
step
-
start
step
-
start
;
}
#
cfr
-
label
{
margin
:
0
;
padding
:
3px
5px
;
padding
-
inline
-
start
:
0
;
color
:
white
;
mask
-
image
:
linear
-
gradient
(
to
right
transparent
0
black
0
)
;
mask
-
position
-
x
:
var
(
-
-
cfr
-
label
-
width
)
;
mask
-
repeat
:
no
-
repeat
;
transition
:
mask
-
position
-
x
ease
-
in
-
out
var
(
-
-
cfr
-
animation
-
duration
)
;
}
#
cfr
-
label
:
-
moz
-
locale
-
dir
(
rtl
)
{
mask
-
position
-
x
:
calc
(
var
(
-
-
cfr
-
label
-
width
)
*
-
1
)
;
}
#
urlbar
[
cfr
-
recommendation
-
state
=
"
expanded
"
]
#
cfr
-
label
{
mask
-
position
-
x
:
0
;
}
#
urlbar
[
cfr
-
recommendation
-
state
]
.
urlbar
-
history
-
dropmarker
{
transition
:
transform
ease
-
in
-
out
var
(
-
-
cfr
-
animation
-
duration
)
;
}
#
urlbar
[
cfr
-
recommendation
-
state
=
"
expanded
"
]
.
urlbar
-
history
-
dropmarker
{
transform
:
translateX
(
calc
(
var
(
-
-
cfr
-
label
-
width
)
*
-
1
)
)
;
}
#
urlbar
[
cfr
-
recommendation
-
state
=
"
expanded
"
]
.
urlbar
-
history
-
dropmarker
:
-
moz
-
locale
-
dir
(
rtl
)
{
transform
:
translateX
(
calc
(
var
(
-
-
cfr
-
label
-
width
)
)
)
;
}
#
urlbar
[
cfr
-
recommendation
-
state
]
#
urlbar
-
input
{
mask
-
image
:
linear
-
gradient
(
to
left
transparent
black
3ch
)
;
transition
:
mask
-
position
-
x
ease
-
in
-
out
var
(
-
-
cfr
-
animation
-
duration
)
;
}
#
urlbar
[
cfr
-
recommendation
-
state
]
#
urlbar
-
input
:
-
moz
-
locale
-
dir
(
rtl
)
{
mask
-
image
:
linear
-
gradient
(
to
right
transparent
black
3ch
)
;
}
#
urlbar
[
cfr
-
recommendation
-
state
=
"
expanded
"
]
#
urlbar
-
input
{
mask
-
position
-
x
:
calc
(
var
(
-
-
cfr
-
label
-
width
)
*
-
1
)
;
}
#
urlbar
[
cfr
-
recommendation
-
state
=
"
expanded
"
]
#
urlbar
-
input
:
-
moz
-
locale
-
dir
(
rtl
)
{
mask
-
position
-
x
:
calc
(
var
(
-
-
cfr
-
label
-
width
)
)
;
}
#
reader
-
mode
-
button
{
list
-
style
-
image
:
url
(
chrome
:
/
/
browser
/
skin
/
readerMode
.
svg
)
;
}
#
reader
-
mode
-
button
[
readeractive
]
{
fill
:
var
(
-
-
toolbarbutton
-
icon
-
fill
-
attention
)
;
fill
-
opacity
:
1
;
}
#
urlbar
-
zoom
-
button
{
-
moz
-
appearance
:
none
;
color
:
inherit
;
font
-
size
:
.
8em
;
padding
:
0
8px
;
border
-
radius
:
1em
;
background
-
color
:
hsla
(
0
0
%
0
%
.
05
)
;
border
:
1px
solid
hsla
(
210
4
%
50
%
.
3
)
;
}
keyframes
urlbar
-
zoom
-
reset
-
pulse
{
0
%
{
transform
:
scale
(
0
)
;
}
75
%
{
transform
:
scale
(
1
.
5
)
;
}
100
%
{
transform
:
scale
(
1
.
0
)
;
}
}
#
urlbar
-
zoom
-
button
[
animate
=
"
true
"
]
{
animation
-
name
:
urlbar
-
zoom
-
reset
-
pulse
;
animation
-
duration
:
250ms
;
}
#
urlbar
-
zoom
-
button
:
hover
{
background
-
color
:
hsla
(
0
0
%
0
%
.
1
)
;
}
#
urlbar
-
zoom
-
button
:
hover
:
active
{
background
-
color
:
hsla
(
0
0
%
0
%
.
15
)
;
}
:
root
[
lwt
-
toolbar
-
field
-
brighttext
]
#
urlbar
-
zoom
-
button
:
hover
{
background
-
color
:
rgba
(
255
255
255
.
2
)
;
}
:
root
[
lwt
-
toolbar
-
field
-
brighttext
]
#
urlbar
-
zoom
-
button
:
hover
:
active
{
background
-
color
:
rgba
(
255
255
255
.
3
)
;
}
#
urlbar
-
zoom
-
button
:
-
moz
-
focusring
{
outline
:
var
(
-
-
toolbarbutton
-
focus
-
outline
)
;
outline
-
offset
:
unset
;
-
moz
-
outline
-
radius
:
1em
;
}
#
urlbar
-
zoom
-
button
>
.
toolbarbutton
-
text
{
display
:
-
moz
-
box
;
}
#
urlbar
-
zoom
-
button
>
.
toolbarbutton
-
icon
{
display
:
none
;
}
#
search
-
container
{
min
-
width
:
calc
(
54px
+
11ch
)
;
}
.
searchbar
-
search
-
button
{
-
moz
-
box
-
align
:
center
;
fill
:
currentColor
;
}
.
searchbar
-
search
-
icon
{
list
-
style
-
image
:
url
(
chrome
:
/
/
browser
/
skin
/
search
-
glass
.
svg
)
;
-
moz
-
context
-
properties
:
fill
fill
-
opacity
;
pointer
-
events
:
none
;
margin
-
inline
-
start
:
8px
;
margin
-
inline
-
end
:
6px
;
width
:
16px
;
fill
-
opacity
:
.
4
;
}
.
searchbar
-
search
-
button
:
hover
>
.
searchbar
-
search
-
icon
{
fill
-
opacity
:
.
6
;
}
.
searchbar
-
search
-
button
:
hover
:
active
>
.
searchbar
-
search
-
icon
{
fill
-
opacity
:
.
8
;
}
.
searchbar
-
search
-
icon
-
overlay
{
pointer
-
events
:
none
;
}
.
searchbar
-
search
-
button
[
addengines
=
true
]
>
.
searchbar
-
search
-
icon
-
overlay
{
list
-
style
-
image
:
url
(
chrome
:
/
/
browser
/
skin
/
search
-
indicator
-
badge
-
add
.
svg
)
;
margin
-
inline
-
start
:
-
15px
;
margin
-
inline
-
end
:
4px
;
margin
-
top
:
-
10px
;
width
:
11px
;
height
:
11px
;
}
.
searchbar
-
search
-
button
[
addengines
=
true
]
>
.
searchbar
-
search
-
icon
-
overlay
:
-
moz
-
locale
-
dir
(
rtl
)
{
margin
-
inline
-
start
:
-
25px
;
margin
-
inline
-
end
:
14px
;
}
.
searchbar
-
search
-
button
:
hover
:
not
(
[
addengines
=
true
]
)
>
.
searchbar
-
search
-
icon
-
overlay
{
list
-
style
-
image
:
url
(
chrome
:
/
/
global
/
skin
/
icons
/
arrow
-
dropdown
-
12
.
svg
)
;
-
moz
-
context
-
properties
:
fill
;
margin
-
inline
-
start
:
-
8px
;
margin
-
inline
-
end
:
2px
;
width
:
6px
;
height
:
6px
;
}
.
searchbar
-
search
-
button
:
hover
:
not
(
[
addengines
=
true
]
)
>
.
searchbar
-
search
-
icon
-
overlay
:
-
moz
-
locale
-
dir
(
rtl
)
{
margin
-
inline
-
start
:
-
26px
;
margin
-
inline
-
end
:
20px
;
}
