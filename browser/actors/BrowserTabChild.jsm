"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
BrowserTabChild
"
]
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
E10SUtils
"
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
)
;
class
BrowserTabChild
extends
JSWindowActorChild
{
constructor
(
)
{
super
(
)
;
this
.
rpmInitialized
=
false
;
this
.
handledFirstPaint
=
false
;
}
actorCreated
(
)
{
this
.
sendAsyncMessage
(
"
Browser
:
WindowCreated
"
{
userContextId
:
this
.
browsingContext
.
originAttributes
.
userContextId
}
)
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
DOMDocElementInserted
"
:
this
.
initializeRPM
(
)
;
break
;
case
"
MozAfterPaint
"
:
if
(
this
.
handledFirstPaint
)
{
return
;
}
this
.
handledFirstPaint
=
true
;
this
.
sendAsyncMessage
(
"
Browser
:
FirstPaint
"
{
}
)
;
break
;
}
}
receiveMessage
(
message
)
{
let
context
=
this
.
manager
.
browsingContext
;
let
docShell
=
context
.
docShell
;
switch
(
message
.
name
)
{
case
"
Browser
:
AppTab
"
:
if
(
docShell
)
{
docShell
.
isAppTab
=
message
.
data
.
isAppTab
;
}
break
;
case
"
Browser
:
HasSiblings
"
:
try
{
let
browserChild
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIBrowserChild
)
;
let
hasSiblings
=
message
.
data
;
browserChild
.
hasSiblings
=
hasSiblings
;
}
catch
(
e
)
{
}
break
;
case
"
Browser
:
Reload
"
:
let
webNav
=
docShell
.
QueryInterface
(
Ci
.
nsIWebNavigation
)
;
try
{
if
(
webNav
.
sessionHistory
)
{
webNav
=
webNav
.
sessionHistory
;
}
}
catch
(
e
)
{
}
let
reloadFlags
=
message
.
data
.
flags
;
if
(
message
.
data
.
handlingUserInput
)
{
reloadFlags
|
=
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_USER_ACTIVATION
;
}
try
{
lazy
.
E10SUtils
.
wrapHandlingUserInput
(
this
.
document
.
defaultView
message
.
data
.
handlingUserInput
(
)
=
>
webNav
.
reload
(
reloadFlags
)
)
;
}
catch
(
e
)
{
}
break
;
case
"
ForceEncodingDetection
"
:
docShell
.
forceEncodingDetection
(
)
;
break
;
}
}
initializeRPM
(
)
{
if
(
this
.
rpmInitialized
)
{
return
;
}
let
url
=
this
.
document
.
documentURI
.
replace
(
/
[
\
#
?
]
.
*
/
"
"
)
;
let
registeredURLs
=
Services
.
cpmm
.
sharedData
.
get
(
"
RemotePageManager
:
urls
"
)
;
if
(
registeredURLs
&
&
registeredURLs
.
has
(
url
)
)
{
let
{
ChildMessagePort
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
remotepagemanager
/
RemotePageManagerChild
.
jsm
"
)
;
new
ChildMessagePort
(
this
.
contentWindow
)
;
this
.
rpmInitialized
=
true
;
}
}
}
