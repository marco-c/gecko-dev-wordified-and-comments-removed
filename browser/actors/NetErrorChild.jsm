var
EXPORTED_SYMBOLS
=
[
"
NetErrorChild
"
]
;
const
{
ActorChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ActorChild
.
jsm
"
)
;
function
getSerializedSecurityInfo
(
docShell
)
{
let
serhelper
=
Cc
[
"
mozilla
.
org
/
network
/
serialization
-
helper
;
1
"
]
.
getService
(
Ci
.
nsISerializationHelper
)
;
let
securityInfo
=
docShell
.
failedChannel
&
&
docShell
.
failedChannel
.
securityInfo
;
if
(
!
securityInfo
)
{
return
"
"
;
}
securityInfo
.
QueryInterface
(
Ci
.
nsITransportSecurityInfo
)
.
QueryInterface
(
Ci
.
nsISerializable
)
;
return
serhelper
.
serializeToString
(
securityInfo
)
;
}
class
NetErrorChild
extends
ActorChild
{
isAboutNetError
(
doc
)
{
return
doc
.
documentURI
.
startsWith
(
"
about
:
neterror
"
)
;
}
handleEvent
(
aEvent
)
{
let
doc
=
aEvent
.
originalTarget
.
ownerDocument
|
|
aEvent
.
originalTarget
;
switch
(
aEvent
.
type
)
{
case
"
click
"
:
let
elem
=
aEvent
.
originalTarget
;
if
(
elem
.
id
=
=
"
viewCertificate
"
|
|
elem
.
id
=
=
"
exceptionDialogButton
"
)
{
this
.
mm
.
sendAsyncMessage
(
"
Browser
:
CertExceptionError
"
{
location
:
doc
.
location
.
href
elementId
:
elem
.
id
securityInfoAsString
:
getSerializedSecurityInfo
(
doc
.
defaultView
.
docShell
)
}
)
;
}
break
;
}
}
}
