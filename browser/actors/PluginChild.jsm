"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PluginChild
"
]
;
class
PluginChild
extends
JSWindowActorChild
{
handleEvent
(
event
)
{
let
eventDoc
=
event
.
target
.
ownerDocument
|
|
event
.
target
.
document
;
if
(
eventDoc
&
&
eventDoc
!
=
this
.
document
)
{
return
;
}
let
eventType
=
event
.
type
;
if
(
eventType
=
=
"
PluginCrashed
"
)
{
this
.
onPluginCrashed
(
event
)
;
}
}
isWithinFullScreenElement
(
fullScreenElement
domElement
)
{
let
getTrueFullScreenElement
=
fullScreenIframe
=
>
{
if
(
typeof
fullScreenIframe
.
contentDocument
!
=
=
"
undefined
"
&
&
fullScreenIframe
.
contentDocument
.
mozFullScreenElement
)
{
return
getTrueFullScreenElement
(
fullScreenIframe
.
contentDocument
.
mozFullScreenElement
)
;
}
return
fullScreenIframe
;
}
;
if
(
fullScreenElement
.
tagName
=
=
=
"
IFRAME
"
)
{
fullScreenElement
=
getTrueFullScreenElement
(
fullScreenElement
)
;
}
if
(
fullScreenElement
.
contains
(
domElement
)
)
{
return
true
;
}
let
parentIframe
=
domElement
.
ownerGlobal
.
frameElement
;
if
(
parentIframe
)
{
return
this
.
isWithinFullScreenElement
(
fullScreenElement
parentIframe
)
;
}
return
false
;
}
async
onPluginCrashed
(
aEvent
)
{
if
(
!
(
aEvent
instanceof
this
.
contentWindow
.
PluginCrashedEvent
)
)
{
return
;
}
let
{
target
gmpPlugin
pluginID
}
=
aEvent
;
let
fullScreenElement
=
this
.
contentWindow
.
top
.
document
.
mozFullScreenElement
;
if
(
fullScreenElement
)
{
if
(
this
.
isWithinFullScreenElement
(
fullScreenElement
target
)
)
{
this
.
contentWindow
.
top
.
document
.
mozCancelFullScreen
(
)
;
}
}
if
(
!
gmpPlugin
|
|
!
target
.
document
)
{
return
;
}
this
.
sendAsyncMessage
(
"
PluginContent
:
ShowPluginCrashedNotification
"
{
pluginCrashID
:
{
pluginID
}
}
)
;
}
}
