"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ContextMenuParent
"
]
;
class
ContextMenuParent
extends
JSWindowActorParent
{
receiveMessage
(
message
)
{
let
browser
=
this
.
manager
.
rootFrameLoader
.
ownerElement
;
let
win
=
browser
.
ownerGlobal
;
if
(
!
win
.
openContextMenu
)
{
let
topBrowser
=
browser
.
ownerGlobal
.
docShell
.
chromeEventHandler
;
win
=
topBrowser
.
ownerGlobal
;
}
win
.
openContextMenu
(
message
browser
this
)
;
}
hiding
(
)
{
try
{
this
.
sendAsyncMessage
(
"
ContextMenu
:
Hiding
"
{
}
)
;
}
catch
(
e
)
{
}
}
reloadFrame
(
targetIdentifier
forceReload
)
{
this
.
sendAsyncMessage
(
"
ContextMenu
:
ReloadFrame
"
{
targetIdentifier
forceReload
}
)
;
}
getImageText
(
targetIdentifier
)
{
this
.
sendAsyncMessage
(
"
ContextMenu
:
GetImageText
"
{
targetIdentifier
}
)
;
}
toggleRevealPassword
(
targetIdentifier
)
{
this
.
sendAsyncMessage
(
"
ContextMenu
:
ToggleRevealPassword
"
{
targetIdentifier
}
)
;
}
reloadImage
(
targetIdentifier
)
{
this
.
sendAsyncMessage
(
"
ContextMenu
:
ReloadImage
"
{
targetIdentifier
}
)
;
}
getFrameTitle
(
targetIdentifier
)
{
return
this
.
sendQuery
(
"
ContextMenu
:
GetFrameTitle
"
{
targetIdentifier
}
)
;
}
mediaCommand
(
targetIdentifier
command
data
)
{
let
windowGlobal
=
this
.
manager
.
browsingContext
.
currentWindowGlobal
;
let
browser
=
windowGlobal
.
rootFrameLoader
.
ownerElement
;
let
win
=
browser
.
ownerGlobal
;
let
windowUtils
=
win
.
windowUtils
;
this
.
sendAsyncMessage
(
"
ContextMenu
:
MediaCommand
"
{
targetIdentifier
command
data
handlingUserInput
:
windowUtils
.
isHandlingUserInput
}
)
;
}
canvasToBlobURL
(
targetIdentifier
)
{
return
this
.
sendQuery
(
"
ContextMenu
:
Canvas
:
ToBlobURL
"
{
targetIdentifier
}
)
;
}
saveVideoFrameAsImage
(
targetIdentifier
)
{
return
this
.
sendQuery
(
"
ContextMenu
:
SaveVideoFrameAsImage
"
{
targetIdentifier
}
)
;
}
setAsDesktopBackground
(
targetIdentifier
)
{
return
this
.
sendQuery
(
"
ContextMenu
:
SetAsDesktopBackground
"
{
targetIdentifier
}
)
;
}
getSearchFieldBookmarkData
(
targetIdentifier
)
{
return
this
.
sendQuery
(
"
ContextMenu
:
SearchFieldBookmarkData
"
{
targetIdentifier
}
)
;
}
doCustomCommand
(
generatedItemId
handlingUserInput
)
{
this
.
sendAsyncMessage
(
"
ContextMenu
:
DoCustomCommand
"
{
generatedItemId
handlingUserInput
}
)
;
}
}
