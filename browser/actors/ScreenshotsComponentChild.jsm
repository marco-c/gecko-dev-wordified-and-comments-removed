"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ScreenshotsComponentChild
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
ScreenshotsOverlayChild
:
"
resource
:
/
/
/
modules
/
ScreenshotsOverlayChild
.
jsm
"
DeferredTask
:
"
resource
:
/
/
gre
/
modules
/
DeferredTask
.
jsm
"
}
)
;
class
ScreenshotsComponentChild
extends
JSWindowActorChild
{
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
Screenshots
:
ShowOverlay
"
:
return
this
.
startScreenshotsOverlay
(
)
;
case
"
Screenshots
:
HideOverlay
"
:
return
this
.
endScreenshotsOverlay
(
)
;
case
"
Screenshots
:
getFullPageBounds
"
:
return
this
.
getFullPageBounds
(
)
;
case
"
Screenshots
:
getVisibleBounds
"
:
return
this
.
getVisibleBounds
(
)
;
}
return
null
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
keydown
"
:
if
(
event
.
key
=
=
=
"
Escape
"
)
{
this
.
requestCancelScreenshot
(
)
;
}
break
;
case
"
beforeunload
"
:
this
.
requestCancelScreenshot
(
)
;
break
;
case
"
resize
"
:
if
(
!
this
.
_resizeTask
&
&
this
.
_overlay
?
.
_initialized
)
{
this
.
_resizeTask
=
new
lazy
.
DeferredTask
(
(
)
=
>
{
this
.
_overlay
.
updateScreenshotsSize
(
"
resize
"
)
;
}
16
)
;
}
this
.
_resizeTask
.
arm
(
)
;
break
;
case
"
scroll
"
:
if
(
!
this
.
_scrollTask
&
&
this
.
_overlay
?
.
_initialized
)
{
this
.
_scrollTask
=
new
lazy
.
DeferredTask
(
(
)
=
>
{
this
.
_overlay
.
updateScreenshotsSize
(
"
scroll
"
)
;
}
16
)
;
}
this
.
_scrollTask
.
arm
(
)
;
break
;
}
}
requestCancelScreenshot
(
)
{
this
.
sendAsyncMessage
(
"
Screenshots
:
CancelScreenshot
"
null
)
;
}
requestCopyScreenshot
(
box
)
{
this
.
sendAsyncMessage
(
"
Screenshots
:
CopyScreenshot
"
box
)
;
}
requestDownloadScreenshot
(
box
)
{
this
.
sendAsyncMessage
(
"
Screenshots
:
DownloadScreenshot
"
{
title
:
this
.
getTitle
(
)
downloadBox
:
box
}
)
;
}
getTitle
(
)
{
return
this
.
document
.
title
;
}
documentIsReady
(
)
{
const
document
=
this
.
document
;
function
readyEnough
(
)
{
return
(
document
.
readyState
!
=
=
"
uninitialized
"
&
&
document
.
documentElement
)
;
}
if
(
readyEnough
(
)
)
{
return
Promise
.
resolve
(
)
;
}
return
new
Promise
(
(
resolve
reject
)
=
>
{
function
onChange
(
event
)
{
if
(
event
.
type
=
=
=
"
pagehide
"
)
{
document
.
removeEventListener
(
"
readystatechange
"
onChange
)
;
this
.
contentWindow
.
removeEventListener
(
"
pagehide
"
onChange
)
;
reject
(
new
Error
(
"
document
unloaded
before
it
was
ready
"
)
)
;
}
else
if
(
readyEnough
(
)
)
{
document
.
removeEventListener
(
"
readystatechange
"
onChange
)
;
this
.
contentWindow
.
removeEventListener
(
"
pagehide
"
onChange
)
;
resolve
(
)
;
}
}
document
.
addEventListener
(
"
readystatechange
"
onChange
)
;
this
.
contentWindow
.
addEventListener
(
"
pagehide
"
onChange
{
once
:
true
}
)
;
}
)
;
}
async
startScreenshotsOverlay
(
)
{
try
{
await
this
.
documentIsReady
(
)
;
}
catch
(
ex
)
{
console
.
warn
(
ScreenshotsComponentChild
:
{
ex
.
message
}
)
;
return
false
;
}
await
this
.
documentIsReady
(
)
;
let
overlay
=
this
.
_overlay
|
|
(
this
.
_overlay
=
new
lazy
.
ScreenshotsOverlayChild
.
AnonymousContentOverlay
(
this
.
document
this
)
)
;
this
.
document
.
addEventListener
(
"
keydown
"
this
)
;
this
.
document
.
ownerGlobal
.
addEventListener
(
"
beforeunload
"
this
)
;
this
.
contentWindow
.
addEventListener
(
"
resize
"
this
)
;
this
.
contentWindow
.
addEventListener
(
"
scroll
"
this
)
;
overlay
.
initialize
(
)
;
return
true
;
}
endScreenshotsOverlay
(
)
{
this
.
document
.
removeEventListener
(
"
keydown
"
this
)
;
this
.
document
.
ownerGlobal
.
removeEventListener
(
"
beforeunload
"
this
)
;
this
.
contentWindow
.
removeEventListener
(
"
resize
"
this
)
;
this
.
contentWindow
.
removeEventListener
(
"
scroll
"
this
)
;
this
.
_overlay
?
.
tearDown
(
)
;
this
.
_resizeTask
?
.
disarm
(
)
;
this
.
_scrollTask
?
.
disarm
(
)
;
return
true
;
}
didDestroy
(
)
{
this
.
_resizeTask
?
.
disarm
(
)
;
this
.
_scrollTask
?
.
disarm
(
)
;
}
getFullPageBounds
(
)
{
let
doc
=
this
.
document
.
documentElement
;
let
rect
=
new
DOMRect
(
doc
.
clientLeft
doc
.
clientTop
doc
.
scrollWidth
doc
.
scrollHeight
)
;
let
devicePixelRatio
=
this
.
document
.
ownerGlobal
.
devicePixelRatio
;
return
{
devicePixelRatio
rect
}
;
}
getVisibleBounds
(
)
{
let
doc
=
this
.
document
.
documentElement
;
let
rect
=
new
DOMRect
(
doc
.
scrollLeft
doc
.
scrollTop
doc
.
clientWidth
doc
.
clientHeight
)
;
let
devicePixelRatio
=
this
.
document
.
ownerGlobal
.
devicePixelRatio
;
return
{
devicePixelRatio
rect
}
;
}
}
