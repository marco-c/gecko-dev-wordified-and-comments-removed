"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DOMFullscreenChild
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
class
DOMFullscreenChild
extends
JSWindowActorChild
{
receiveMessage
(
aMessage
)
{
let
window
=
this
.
contentWindow
;
let
windowUtils
=
window
&
&
window
.
windowUtils
;
if
(
!
windowUtils
)
{
return
;
}
switch
(
aMessage
.
name
)
{
case
"
DOMFullscreen
:
Entered
"
:
{
this
.
_lastTransactionId
=
windowUtils
.
lastTransactionId
;
if
(
!
windowUtils
.
handleFullscreenRequests
(
)
&
&
!
this
.
document
.
fullscreenElement
)
{
this
.
sendAsyncMessage
(
"
DOMFullscreen
:
Exit
"
{
}
)
;
}
break
;
}
case
"
DOMFullscreen
:
CleanUp
"
:
{
if
(
this
.
document
.
fullscreenElement
)
{
this
.
_lastTransactionId
=
windowUtils
.
lastTransactionId
;
windowUtils
.
exitFullscreen
(
)
;
}
break
;
}
case
"
DOMFullscreen
:
Painted
"
:
{
Services
.
obs
.
notifyObservers
(
this
.
contentWindow
"
fullscreen
-
painted
"
)
;
break
;
}
}
}
handleEvent
(
aEvent
)
{
switch
(
aEvent
.
type
)
{
case
"
MozDOMFullscreen
:
Request
"
:
{
this
.
sendAsyncMessage
(
"
DOMFullscreen
:
Request
"
{
}
)
;
break
;
}
case
"
MozDOMFullscreen
:
NewOrigin
"
:
{
this
.
sendAsyncMessage
(
"
DOMFullscreen
:
NewOrigin
"
{
originNoSuffix
:
aEvent
.
target
.
nodePrincipal
.
originNoSuffix
}
)
;
break
;
}
case
"
MozDOMFullscreen
:
Exit
"
:
{
this
.
sendAsyncMessage
(
"
DOMFullscreen
:
Exit
"
{
}
)
;
break
;
}
case
"
MozDOMFullscreen
:
Entered
"
:
case
"
MozDOMFullscreen
:
Exited
"
:
{
let
rootWindow
=
this
.
contentWindow
.
windowRoot
;
rootWindow
.
addEventListener
(
"
MozAfterPaint
"
this
)
;
if
(
!
this
.
document
|
|
!
this
.
document
.
fullscreenElement
)
{
this
.
sendAsyncMessage
(
"
DOMFullscreen
:
Exit
"
{
}
)
;
}
break
;
}
case
"
MozAfterPaint
"
:
{
if
(
!
this
.
_lastTransactionId
|
|
aEvent
.
transactionId
>
this
.
_lastTransactionId
)
{
let
rootWindow
=
this
.
contentWindow
.
windowRoot
;
rootWindow
.
removeEventListener
(
"
MozAfterPaint
"
this
)
;
this
.
sendAsyncMessage
(
"
DOMFullscreen
:
Painted
"
{
}
)
;
}
break
;
}
}
}
}
