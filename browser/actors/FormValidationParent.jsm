"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
FormValidationParent
"
]
;
class
FormValidationParent
extends
JSWindowActorParent
{
constructor
(
)
{
super
(
)
;
this
.
_panel
=
null
;
this
.
_anchor
=
null
;
}
uninit
(
)
{
this
.
_panel
=
null
;
this
.
_anchor
=
null
;
}
hidePopup
(
)
{
this
.
_hidePopup
(
)
;
}
receiveMessage
(
aMessage
)
{
switch
(
aMessage
.
name
)
{
case
"
FormValidation
:
ShowPopup
"
:
let
browser
=
this
.
browsingContext
.
top
.
embedderElement
;
let
window
=
browser
.
ownerGlobal
;
let
data
=
aMessage
.
data
;
let
tabBrowser
=
window
.
gBrowser
;
if
(
tabBrowser
&
&
browser
!
=
tabBrowser
.
selectedBrowser
)
{
return
;
}
this
.
_showPopup
(
data
)
;
break
;
case
"
FormValidation
:
HidePopup
"
:
this
.
_hidePopup
(
)
;
break
;
}
}
observe
(
aSubject
aTopic
aData
)
{
this
.
_hidePopup
(
)
;
}
handleEvent
(
aEvent
)
{
switch
(
aEvent
.
type
)
{
case
"
FullZoomChange
"
:
case
"
TextZoomChange
"
:
case
"
scroll
"
:
this
.
_hidePopup
(
)
;
break
;
case
"
popuphiding
"
:
this
.
_onPopupHiding
(
aEvent
)
;
break
;
}
}
_onPopupHiding
(
aEvent
)
{
aEvent
.
originalTarget
.
removeEventListener
(
"
popuphiding
"
this
true
)
;
let
tabBrowser
=
aEvent
.
originalTarget
.
ownerGlobal
.
gBrowser
;
tabBrowser
.
selectedBrowser
.
removeEventListener
(
"
scroll
"
this
true
)
;
tabBrowser
.
selectedBrowser
.
removeEventListener
(
"
FullZoomChange
"
this
)
;
tabBrowser
.
selectedBrowser
.
removeEventListener
(
"
TextZoomChange
"
this
)
;
this
.
_panel
=
null
;
this
.
_anchor
.
hidden
=
true
;
this
.
_anchor
=
null
;
}
_showPopup
(
aPanelData
)
{
let
previouslyShown
=
!
!
this
.
_panel
;
this
.
_panel
=
this
.
_getAndMaybeCreatePanel
(
)
;
this
.
_panel
.
firstChild
.
textContent
=
aPanelData
.
message
;
let
browser
=
this
.
browsingContext
.
top
.
embedderElement
;
let
window
=
browser
.
ownerGlobal
;
let
tabBrowser
=
window
.
gBrowser
;
this
.
_anchor
=
tabBrowser
.
selectedBrowser
.
popupAnchor
;
this
.
_anchor
.
hidden
=
false
;
if
(
!
previouslyShown
)
{
this
.
_panel
.
addEventListener
(
"
popuphiding
"
this
true
)
;
tabBrowser
.
selectedBrowser
.
addEventListener
(
"
scroll
"
this
true
)
;
tabBrowser
.
selectedBrowser
.
addEventListener
(
"
FullZoomChange
"
this
)
;
tabBrowser
.
selectedBrowser
.
addEventListener
(
"
TextZoomChange
"
this
)
;
let
rect
=
aPanelData
.
screenRect
;
this
.
_panel
.
openPopupAtScreenRect
(
aPanelData
.
position
rect
.
left
rect
.
top
rect
.
width
rect
.
height
false
false
)
;
}
}
_hidePopup
(
)
{
if
(
this
.
_panel
)
{
this
.
_panel
.
hidePopup
(
)
;
}
}
_getAndMaybeCreatePanel
(
)
{
if
(
!
this
.
_panel
)
{
let
browser
=
this
.
browsingContext
.
top
.
embedderElement
;
let
window
=
browser
.
ownerGlobal
;
let
template
=
window
.
document
.
getElementById
(
"
invalidFormTemplate
"
)
;
if
(
template
)
{
template
.
replaceWith
(
template
.
content
)
;
}
this
.
_panel
=
window
.
document
.
getElementById
(
"
invalid
-
form
-
popup
"
)
;
}
return
this
.
_panel
;
}
}
