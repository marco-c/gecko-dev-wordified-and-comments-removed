"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
DOMFullscreenParent
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
class
DOMFullscreenParent
extends
JSWindowActorParent
{
updateFullscreenWindowReference
(
aWindow
)
{
if
(
aWindow
.
document
.
documentElement
.
hasAttribute
(
"
inDOMFullscreen
"
)
)
{
this
.
_fullscreenWindow
=
aWindow
;
}
else
{
delete
this
.
_fullscreenWindow
;
}
}
didDestroy
(
)
{
let
window
=
this
.
_fullscreenWindow
;
if
(
!
window
)
{
return
;
}
if
(
window
.
document
.
documentElement
.
hasAttribute
(
"
inDOMFullscreen
"
)
)
{
if
(
window
.
FullScreen
)
{
window
.
FullScreen
.
cleanupDomFullscreen
(
this
)
;
}
if
(
window
.
windowUtils
)
{
window
.
windowUtils
.
remoteFrameFullscreenReverted
(
)
;
}
}
this
.
updateFullscreenWindowReference
(
window
)
;
}
receiveMessage
(
aMessage
)
{
let
topBrowsingContext
=
this
.
browsingContext
.
top
;
let
browser
=
topBrowsingContext
.
embedderElement
;
if
(
!
browser
)
{
return
;
}
let
window
=
browser
.
ownerGlobal
;
switch
(
aMessage
.
name
)
{
case
"
DOMFullscreen
:
Request
"
:
{
this
.
requestOrigin
=
this
;
this
.
addListeners
(
window
)
;
window
.
windowUtils
.
remoteFrameFullscreenChanged
(
browser
)
;
break
;
}
case
"
DOMFullscreen
:
NewOrigin
"
:
{
if
(
window
.
document
.
fullscreen
)
{
window
.
PointerlockFsWarning
.
showFullScreen
(
aMessage
.
data
.
originNoSuffix
)
;
}
break
;
}
case
"
DOMFullscreen
:
Entered
"
:
{
window
.
FullScreen
.
enterDomFullscreen
(
browser
this
)
;
this
.
updateFullscreenWindowReference
(
window
)
;
break
;
}
case
"
DOMFullscreen
:
Exit
"
:
{
window
.
windowUtils
.
remoteFrameFullscreenReverted
(
)
;
break
;
}
case
"
DOMFullscreen
:
Exited
"
:
{
window
.
FullScreen
.
cleanupDomFullscreen
(
this
)
;
this
.
updateFullscreenWindowReference
(
window
)
;
break
;
}
case
"
DOMFullscreen
:
Painted
"
:
{
Services
.
obs
.
notifyObservers
(
window
"
fullscreen
-
painted
"
)
;
this
.
sendAsyncMessage
(
"
DOMFullscreen
:
Painted
"
{
}
)
;
TelemetryStopwatch
.
finish
(
"
FULLSCREEN_CHANGE_MS
"
)
;
break
;
}
}
}
handleEvent
(
aEvent
)
{
let
window
=
aEvent
.
currentTarget
.
ownerGlobal
;
switch
(
aEvent
.
type
)
{
case
"
MozDOMFullscreen
:
Entered
"
:
{
let
browser
;
if
(
aEvent
.
target
.
ownerGlobal
=
=
window
)
{
browser
=
aEvent
.
target
;
}
else
{
browser
=
aEvent
.
target
.
ownerGlobal
.
docShell
.
chromeEventHandler
;
}
if
(
window
.
gXPInstallObserver
)
{
window
.
gXPInstallObserver
.
removeAllNotifications
(
browser
)
;
}
TelemetryStopwatch
.
start
(
"
FULLSCREEN_CHANGE_MS
"
)
;
window
.
FullScreen
.
enterDomFullscreen
(
browser
this
)
;
this
.
updateFullscreenWindowReference
(
window
)
;
break
;
}
case
"
MozDOMFullscreen
:
Exited
"
:
{
TelemetryStopwatch
.
start
(
"
FULLSCREEN_CHANGE_MS
"
)
;
if
(
!
this
.
hasBeenDestroyed
(
)
&
&
!
this
.
requestOrigin
)
{
this
.
requestOrigin
=
this
;
}
window
.
FullScreen
.
cleanupDomFullscreen
(
this
)
;
this
.
updateFullscreenWindowReference
(
window
)
;
this
.
removeListeners
(
window
)
;
break
;
}
}
}
addListeners
(
aWindow
)
{
aWindow
.
addEventListener
(
"
MozDOMFullscreen
:
Entered
"
this
true
false
)
;
aWindow
.
addEventListener
(
"
MozDOMFullscreen
:
Exited
"
this
true
false
)
;
}
removeListeners
(
aWindow
)
{
aWindow
.
removeEventListener
(
"
MozDOMFullscreen
:
Entered
"
this
true
)
;
aWindow
.
removeEventListener
(
"
MozDOMFullscreen
:
Exited
"
this
true
)
;
}
get
requestOrigin
(
)
{
let
requestOrigin
=
this
.
browsingContext
.
top
.
fullscreenRequestOrigin
;
return
requestOrigin
&
&
requestOrigin
.
get
(
)
;
}
set
requestOrigin
(
aActor
)
{
if
(
aActor
)
{
this
.
browsingContext
.
top
.
fullscreenRequestOrigin
=
Cu
.
getWeakReference
(
aActor
)
;
}
else
{
delete
this
.
browsingContext
.
top
.
fullscreenRequestOrigin
;
}
}
hasBeenDestroyed
(
)
{
try
{
return
!
this
.
browsingContext
;
}
catch
{
return
true
;
}
}
}
