"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
SearchTelemetryChild
"
]
;
const
{
ActorChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ActorChild
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
SHARED_DATA_KEY
=
"
SearchTelemetry
:
ProviderInfo
"
;
class
SearchProviders
{
constructor
(
)
{
this
.
_searchProviderInfo
=
null
;
Services
.
cpmm
.
sharedData
.
addEventListener
(
"
change
"
this
)
;
}
get
info
(
)
{
if
(
this
.
_searchProviderInfo
)
{
return
this
.
_searchProviderInfo
;
}
this
.
_searchProviderInfo
=
Services
.
cpmm
.
sharedData
.
get
(
SHARED_DATA_KEY
)
;
if
(
!
this
.
_searchProviderInfo
)
{
return
null
;
}
for
(
let
[
providerName
info
]
of
Object
.
entries
(
this
.
_searchProviderInfo
)
)
{
if
(
!
(
"
extraAdServersRegexps
"
in
info
)
)
{
delete
this
.
_searchProviderInfo
[
providerName
]
;
}
}
return
this
.
_searchProviderInfo
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
change
"
:
{
if
(
event
.
changedKeys
.
includes
(
SHARED_DATA_KEY
)
)
{
this
.
_searchProviderInfo
=
null
;
}
break
;
}
}
}
}
const
searchProviders
=
new
SearchProviders
(
)
;
class
SearchTelemetryChild
extends
ActorChild
{
_getProviderInfoForUrl
(
url
)
{
return
Object
.
entries
(
searchProviders
.
info
|
|
[
]
)
.
find
(
(
[
_
info
]
)
=
>
info
.
regexp
.
test
(
url
)
)
;
}
_checkForAdLink
(
doc
)
{
let
providerInfo
=
this
.
_getProviderInfoForUrl
(
doc
.
documentURI
)
;
if
(
!
providerInfo
)
{
return
;
}
let
regexps
=
providerInfo
[
1
]
.
extraAdServersRegexps
;
let
anchors
=
doc
.
getElementsByTagName
(
"
a
"
)
;
let
hasAds
=
false
;
for
(
let
anchor
of
anchors
)
{
if
(
!
anchor
.
href
)
{
continue
;
}
for
(
let
regexp
of
regexps
)
{
if
(
regexp
.
test
(
anchor
.
href
)
)
{
hasAds
=
true
;
break
;
}
}
if
(
hasAds
)
{
break
;
}
}
if
(
hasAds
)
{
this
.
sendAsyncMessage
(
"
SearchTelemetry
:
PageInfo
"
{
hasAds
:
true
url
:
doc
.
documentURI
}
)
;
}
}
handleEvent
(
event
)
{
if
(
event
.
target
.
ownerGlobal
!
=
this
.
content
)
{
return
;
}
switch
(
event
.
type
)
{
case
"
pageshow
"
:
{
if
(
event
.
persisted
)
{
this
.
_checkForAdLink
(
this
.
content
.
document
)
;
}
break
;
}
case
"
DOMContentLoaded
"
:
{
this
.
_checkForAdLink
(
this
.
content
.
document
)
;
break
;
}
}
}
}
