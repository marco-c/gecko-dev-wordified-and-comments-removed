"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PluginParent
"
"
PluginManager
"
]
;
const
{
AppConstants
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
sys
.
mjs
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
CrashSubmit
"
"
resource
:
/
/
gre
/
modules
/
CrashSubmit
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
gNavigatorBundle
"
function
(
)
{
const
url
=
"
chrome
:
/
/
browser
/
locale
/
browser
.
properties
"
;
return
Services
.
strings
.
createBundle
(
url
)
;
}
)
;
const
PluginManager
=
{
gmpCrashes
:
new
Map
(
)
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
gmp
-
plugin
-
crash
"
:
this
.
_registerGMPCrash
(
subject
)
;
break
;
}
}
_registerGMPCrash
(
subject
)
{
let
propertyBag
=
subject
;
if
(
!
(
propertyBag
instanceof
Ci
.
nsIWritablePropertyBag2
)
|
|
!
propertyBag
.
hasKey
(
"
pluginID
"
)
|
|
!
propertyBag
.
hasKey
(
"
pluginDumpID
"
)
|
|
!
propertyBag
.
hasKey
(
"
pluginName
"
)
)
{
Cu
.
reportError
(
"
PluginManager
can
not
read
plugin
information
.
"
)
;
return
;
}
let
pluginID
=
propertyBag
.
getPropertyAsUint32
(
"
pluginID
"
)
;
let
pluginDumpID
=
propertyBag
.
getPropertyAsAString
(
"
pluginDumpID
"
)
;
let
pluginName
=
propertyBag
.
getPropertyAsACString
(
"
pluginName
"
)
;
if
(
pluginDumpID
)
{
this
.
gmpCrashes
.
set
(
pluginID
{
pluginDumpID
pluginID
pluginName
}
)
;
}
if
(
Services
.
ppmm
)
{
Services
.
ppmm
.
broadcastAsyncMessage
(
"
gmp
-
plugin
-
crash
"
{
pluginName
pluginID
}
)
;
}
}
submitCrashReport
(
pluginCrashID
keyVals
=
{
}
)
{
let
report
=
this
.
getCrashReport
(
pluginCrashID
)
;
if
(
!
report
)
{
Cu
.
reportError
(
Could
not
find
plugin
dump
IDs
for
{
JSON
.
stringify
(
pluginCrashID
)
}
.
+
It
is
possible
that
a
report
was
already
submitted
.
)
;
return
;
}
let
{
pluginDumpID
}
=
report
;
lazy
.
CrashSubmit
.
submit
(
pluginDumpID
lazy
.
CrashSubmit
.
SUBMITTED_FROM_CRASH_TAB
{
recordSubmission
:
true
extraExtraKeyVals
:
keyVals
}
)
;
this
.
gmpCrashes
.
delete
(
pluginCrashID
.
pluginID
)
;
}
getCrashReport
(
pluginCrashID
)
{
return
this
.
gmpCrashes
.
get
(
pluginCrashID
.
pluginID
)
;
}
}
;
class
PluginParent
extends
JSWindowActorParent
{
receiveMessage
(
msg
)
{
let
browser
=
this
.
manager
.
rootFrameLoader
.
ownerElement
;
switch
(
msg
.
name
)
{
case
"
PluginContent
:
ShowPluginCrashedNotification
"
:
this
.
showPluginCrashedNotification
(
browser
msg
.
data
.
pluginCrashID
)
;
break
;
default
:
Cu
.
reportError
(
"
PluginParent
did
not
expect
to
handle
message
"
+
msg
.
name
)
;
break
;
}
return
null
;
}
showPluginCrashedNotification
(
browser
pluginCrashID
)
{
let
notificationBox
=
browser
.
getTabBrowser
(
)
.
getNotificationBox
(
browser
)
;
let
notification
=
notificationBox
.
getNotificationWithValue
(
"
plugin
-
crashed
"
)
;
let
report
=
PluginManager
.
getCrashReport
(
pluginCrashID
)
;
if
(
notification
|
|
!
report
)
{
return
;
}
let
priority
=
notificationBox
.
PRIORITY_WARNING_MEDIUM
;
let
iconURL
=
"
chrome
:
/
/
global
/
skin
/
icons
/
plugin
.
svg
"
;
let
reloadLabel
=
lazy
.
gNavigatorBundle
.
GetStringFromName
(
"
crashedpluginsMessage
.
reloadButton
.
label
"
)
;
let
reloadKey
=
lazy
.
gNavigatorBundle
.
GetStringFromName
(
"
crashedpluginsMessage
.
reloadButton
.
accesskey
"
)
;
let
buttons
=
[
{
label
:
reloadLabel
accessKey
:
reloadKey
popup
:
null
callback
(
)
{
browser
.
reload
(
)
;
}
}
]
;
if
(
AppConstants
.
MOZ_CRASHREPORTER
)
{
let
submitLabel
=
lazy
.
gNavigatorBundle
.
GetStringFromName
(
"
crashedpluginsMessage
.
submitButton
.
label
"
)
;
let
submitKey
=
lazy
.
gNavigatorBundle
.
GetStringFromName
(
"
crashedpluginsMessage
.
submitButton
.
accesskey
"
)
;
let
submitButton
=
{
label
:
submitLabel
accessKey
:
submitKey
popup
:
null
callback
:
(
)
=
>
{
PluginManager
.
submitCrashReport
(
pluginCrashID
)
;
}
}
;
buttons
.
push
(
submitButton
)
;
}
let
messageString
=
lazy
.
gNavigatorBundle
.
formatStringFromName
(
"
crashedpluginsMessage
.
title
"
[
report
.
pluginName
]
)
;
notification
=
notificationBox
.
appendNotification
(
"
plugin
-
crashed
"
{
label
:
messageString
image
:
iconURL
priority
}
buttons
)
;
let
link
=
notification
.
ownerDocument
.
createXULElement
(
"
label
"
{
is
:
"
text
-
link
"
}
)
;
link
.
setAttribute
(
"
value
"
lazy
.
gNavigatorBundle
.
GetStringFromName
(
"
crashedpluginsMessage
.
learnMore
"
)
)
;
let
crashurl
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
;
crashurl
+
=
"
plugin
-
crashed
-
notificationbar
"
;
link
.
href
=
crashurl
;
notification
.
messageText
.
appendChild
(
new
Text
(
"
"
)
)
;
notification
.
messageText
.
appendChild
(
link
)
;
}
}
