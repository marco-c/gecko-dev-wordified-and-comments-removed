"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
LightweightThemeChild
"
]
;
const
{
ActorChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ActorChild
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
class
LightweightThemeChild
extends
ActorChild
{
constructor
(
dispatcher
)
{
if
(
dispatcher
.
mm
)
{
super
(
dispatcher
)
;
}
else
{
let
fakeDispatcher
=
{
mm
:
dispatcher
window
:
dispatcher
.
content
addEventListener
:
dispatcher
.
content
.
addEventListener
}
;
super
(
fakeDispatcher
)
;
}
this
.
init
(
)
;
}
init
(
)
{
Services
.
cpmm
.
sharedData
.
addEventListener
(
"
change
"
this
)
;
this
.
update
(
this
.
mm
.
chromeOuterWindowID
this
.
content
)
;
}
cleanup
(
)
{
Services
.
cpmm
.
sharedData
.
removeEventListener
(
"
change
"
this
)
;
}
handleEvent
(
event
)
{
if
(
event
.
type
=
=
=
"
change
"
)
{
if
(
event
.
changedKeys
.
includes
(
theme
/
{
this
.
mm
.
chromeOuterWindowID
}
)
)
{
this
.
update
(
this
.
mm
.
chromeOuterWindowID
this
.
content
)
;
}
}
}
update
(
outerWindowID
content
)
{
const
event
=
Cu
.
cloneInto
(
{
detail
:
{
data
:
Services
.
cpmm
.
sharedData
.
get
(
theme
/
{
outerWindowID
}
)
}
}
content
)
;
content
.
dispatchEvent
(
new
content
.
CustomEvent
(
"
LightweightTheme
:
Set
"
event
)
)
;
}
}
