"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
LightweightThemeChild
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
class
LightweightThemeChild
extends
JSWindowActorChild
{
constructor
(
)
{
super
(
)
;
Services
.
cpmm
.
sharedData
.
addEventListener
(
"
change
"
this
)
;
}
didDestroy
(
)
{
Services
.
cpmm
.
sharedData
.
removeEventListener
(
"
change
"
this
)
;
}
_getChromeOuterWindowID
(
)
{
if
(
this
.
docShell
.
messageManager
)
{
return
this
.
docShell
.
messageManager
.
chromeOuterWindowID
;
}
return
this
.
contentWindow
.
top
.
docShell
.
outerWindowID
;
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
pageshow
"
:
this
.
update
(
)
;
break
;
case
"
change
"
:
if
(
event
.
changedKeys
.
includes
(
theme
/
{
this
.
_getChromeOuterWindowID
(
)
}
)
)
{
this
.
update
(
)
;
}
break
;
}
}
update
(
)
{
const
event
=
Cu
.
cloneInto
(
{
detail
:
{
data
:
Services
.
cpmm
.
sharedData
.
get
(
theme
/
{
this
.
_getChromeOuterWindowID
(
)
}
)
}
}
this
.
contentWindow
)
;
this
.
contentWindow
.
dispatchEvent
(
new
this
.
contentWindow
.
CustomEvent
(
"
LightweightTheme
:
Set
"
event
)
)
;
}
}
