"
use
strict
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
PageStyleChild
"
]
;
class
PageStyleChild
extends
JSWindowActorChild
{
handleEvent
(
event
)
{
if
(
event
.
type
=
=
"
pageshow
"
)
{
if
(
this
.
browsingContext
.
top
=
=
=
this
.
browsingContext
)
{
this
.
sendAsyncMessage
(
"
PageStyle
:
Clear
"
)
;
}
let
window
=
event
.
target
.
ownerGlobal
;
window
.
requestIdleCallback
(
(
)
=
>
{
if
(
!
window
|
|
window
.
closed
)
{
return
;
}
let
styleSheets
=
Array
.
from
(
this
.
document
.
styleSheets
)
;
let
filteredStyleSheets
=
this
.
_filterStyleSheets
(
styleSheets
window
)
;
this
.
sendAsyncMessage
(
"
PageStyle
:
Add
"
{
filteredStyleSheets
authorStyleDisabled
:
this
.
docShell
.
contentViewer
.
authorStyleDisabled
preferredStyleSheetSet
:
this
.
document
.
preferredStyleSheetSet
}
)
;
}
)
;
}
}
receiveMessage
(
msg
)
{
switch
(
msg
.
name
)
{
case
"
PageStyle
:
Switch
"
:
this
.
docShell
.
contentViewer
.
authorStyleDisabled
=
false
;
this
.
_switchStylesheet
(
msg
.
data
.
title
)
;
break
;
case
"
PageStyle
:
Disable
"
:
this
.
docShell
.
contentViewer
.
authorStyleDisabled
=
true
;
break
;
}
}
_switchStylesheet
(
title
)
{
let
docStyleSheets
=
this
.
document
.
styleSheets
;
let
docContainsStyleSheet
=
!
title
;
if
(
title
)
{
for
(
let
docStyleSheet
of
docStyleSheets
)
{
if
(
docStyleSheet
.
title
=
=
=
title
)
{
docContainsStyleSheet
=
true
;
break
;
}
}
}
for
(
let
docStyleSheet
of
docStyleSheets
)
{
if
(
docStyleSheet
.
title
)
{
if
(
docContainsStyleSheet
)
{
docStyleSheet
.
disabled
=
docStyleSheet
.
title
!
=
=
title
;
}
}
else
if
(
docStyleSheet
.
disabled
)
{
docStyleSheet
.
disabled
=
false
;
}
}
}
_filterStyleSheets
(
styleSheets
content
)
{
let
result
=
[
]
;
for
(
let
currentStyleSheet
of
styleSheets
)
{
if
(
!
currentStyleSheet
.
title
)
{
continue
;
}
if
(
currentStyleSheet
.
media
.
length
)
{
let
mediaQueryList
=
currentStyleSheet
.
media
.
mediaText
;
if
(
!
content
.
matchMedia
(
mediaQueryList
)
.
matches
)
{
continue
;
}
}
let
URI
;
try
{
if
(
!
currentStyleSheet
.
ownerNode
|
|
currentStyleSheet
.
ownerNode
.
nodeName
.
toLowerCase
(
)
!
=
"
style
"
)
{
URI
=
Services
.
io
.
newURI
(
currentStyleSheet
.
href
)
;
}
}
catch
(
e
)
{
if
(
e
.
result
!
=
Cr
.
NS_ERROR_MALFORMED_URI
)
{
throw
e
;
}
continue
;
}
let
sentURI
=
!
URI
|
|
URI
.
scheme
=
=
"
data
"
?
null
:
URI
.
spec
;
result
.
push
(
{
title
:
currentStyleSheet
.
title
disabled
:
currentStyleSheet
.
disabled
href
:
sentURI
}
)
;
}
return
result
;
}
}
