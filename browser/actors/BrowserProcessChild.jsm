"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
BrowserProcessChild
"
]
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
WebRTCChild
"
"
resource
:
/
/
/
actors
/
WebRTCChild
.
jsm
"
)
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
AboutHomeStartupCacheChild
:
"
resource
:
/
/
/
modules
/
AboutNewTabService
.
sys
.
mjs
"
}
)
;
class
BrowserProcessChild
extends
JSProcessActorChild
{
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
AboutHomeStartupCache
:
InputStreams
"
:
let
{
pageInputStream
scriptInputStream
}
=
message
.
data
;
lazy
.
AboutHomeStartupCacheChild
.
init
(
pageInputStream
scriptInputStream
)
;
break
;
}
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
getUserMedia
:
request
"
:
case
"
recording
-
device
-
stopped
"
:
case
"
PeerConnection
:
request
"
:
case
"
recording
-
device
-
events
"
:
case
"
recording
-
window
-
ended
"
:
lazy
.
WebRTCChild
.
observe
(
subject
topic
data
)
;
break
;
}
}
}
