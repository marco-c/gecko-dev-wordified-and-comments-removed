"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
AboutPrivateBrowsingParent
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
SHOWN_PREF
=
"
browser
.
search
.
separatePrivateDefault
.
ui
.
banner
.
shown
"
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
MAX_SEARCH_BANNER_SHOW_COUNT
"
"
browser
.
search
.
separatePrivateDefault
.
ui
.
banner
.
max
"
0
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
isPrivateSearchUIEnabled
"
"
browser
.
search
.
separatePrivateDefault
.
ui
.
enabled
"
false
)
;
let
gSearchBannerShownThisSession
;
class
AboutPrivateBrowsingParent
extends
JSWindowActorParent
{
static
setShownThisSession
(
shown
)
{
gSearchBannerShownThisSession
=
shown
;
}
receiveMessage
(
aMessage
)
{
let
browser
=
this
.
browsingContext
.
top
.
embedderElement
;
if
(
!
browser
)
{
return
undefined
;
}
let
win
=
browser
.
ownerGlobal
;
switch
(
aMessage
.
name
)
{
case
"
OpenPrivateWindow
"
:
{
win
.
OpenBrowserWindow
(
{
private
:
true
}
)
;
break
;
}
case
"
OpenSearchPreferences
"
:
{
win
.
openPreferences
(
"
search
"
{
origin
:
"
about
-
privatebrowsing
"
}
)
;
break
;
}
case
"
SearchHandoff
"
:
{
let
searchAlias
=
"
"
;
let
searchAliases
=
Services
.
search
.
defaultPrivateEngine
.
aliases
;
if
(
searchAliases
&
&
searchAliases
.
length
)
{
searchAlias
=
{
searchAliases
[
0
]
}
;
}
let
urlBar
=
win
.
gURLBar
;
let
isFirstChange
=
true
;
if
(
!
aMessage
.
data
|
|
!
aMessage
.
data
.
text
)
{
urlBar
.
setHiddenFocus
(
)
;
}
else
{
urlBar
.
search
(
{
searchAlias
}
{
aMessage
.
data
.
text
}
)
;
isFirstChange
=
false
;
}
let
checkFirstChange
=
(
)
=
>
{
if
(
isFirstChange
)
{
isFirstChange
=
false
;
urlBar
.
removeHiddenFocus
(
)
;
urlBar
.
search
(
searchAlias
)
;
this
.
sendAsyncMessage
(
"
HideSearch
"
)
;
urlBar
.
removeEventListener
(
"
compositionstart
"
checkFirstChange
)
;
urlBar
.
removeEventListener
(
"
paste
"
checkFirstChange
)
;
}
}
;
let
onKeydown
=
ev
=
>
{
if
(
ev
.
key
.
length
=
=
=
1
&
&
!
ev
.
altKey
&
&
!
ev
.
ctrlKey
&
&
!
ev
.
metaKey
)
{
checkFirstChange
(
)
;
}
if
(
ev
.
key
=
=
=
"
Escape
"
)
{
onDone
(
)
;
}
}
;
let
onDone
=
(
)
=
>
{
this
.
sendAsyncMessage
(
"
ShowSearch
"
)
;
urlBar
.
removeHiddenFocus
(
)
;
urlBar
.
removeEventListener
(
"
keydown
"
onKeydown
)
;
urlBar
.
removeEventListener
(
"
mousedown
"
onDone
)
;
urlBar
.
removeEventListener
(
"
blur
"
onDone
)
;
urlBar
.
removeEventListener
(
"
compositionstart
"
checkFirstChange
)
;
urlBar
.
removeEventListener
(
"
paste
"
checkFirstChange
)
;
}
;
urlBar
.
addEventListener
(
"
keydown
"
onKeydown
)
;
urlBar
.
addEventListener
(
"
mousedown
"
onDone
)
;
urlBar
.
addEventListener
(
"
blur
"
onDone
)
;
urlBar
.
addEventListener
(
"
compositionstart
"
checkFirstChange
)
;
urlBar
.
addEventListener
(
"
paste
"
checkFirstChange
)
;
break
;
}
case
"
ShouldShowSearchBanner
"
:
{
if
(
browser
.
getAttribute
(
"
preloadedState
"
)
=
=
=
"
preloaded
"
)
{
return
null
;
}
if
(
!
isPrivateSearchUIEnabled
|
|
gSearchBannerShownThisSession
)
{
return
null
;
}
gSearchBannerShownThisSession
=
true
;
const
shownTimes
=
Services
.
prefs
.
getIntPref
(
SHOWN_PREF
0
)
;
if
(
shownTimes
>
=
MAX_SEARCH_BANNER_SHOW_COUNT
)
{
return
null
;
}
Services
.
prefs
.
setIntPref
(
SHOWN_PREF
shownTimes
+
1
)
;
return
new
Promise
(
resolve
=
>
{
Services
.
search
.
getDefaultPrivate
(
)
.
then
(
engine
=
>
{
resolve
(
engine
.
name
)
;
}
)
;
}
)
;
}
case
"
SearchBannerDismissed
"
:
{
Services
.
prefs
.
setIntPref
(
SHOWN_PREF
MAX_SEARCH_BANNER_SHOW_COUNT
)
;
break
;
}
}
return
undefined
;
}
}
