"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PromptParent
"
]
;
ChromeUtils
.
defineModuleGetter
(
this
"
PromptUtils
"
"
resource
:
/
/
gre
/
modules
/
SharedPromptUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
let
gBrowserPrompts
=
new
WeakMap
(
)
;
class
PromptParent
extends
JSWindowActorParent
{
didDestroy
(
)
{
this
.
forceClosePrompts
(
this
.
browsingContext
)
;
}
registerPrompt
(
browsingContext
tabModalPrompt
id
)
{
let
prompts
=
gBrowserPrompts
.
get
(
browsingContext
)
;
if
(
!
prompts
)
{
prompts
=
new
Map
(
)
;
gBrowserPrompts
.
set
(
browsingContext
prompts
)
;
}
let
promise
=
new
Promise
(
resolve
=
>
{
prompts
.
set
(
id
{
tabModalPrompt
resolver
:
resolve
}
)
;
}
)
;
return
promise
;
}
unregisterPrompt
(
browsingContext
id
)
{
let
prompts
=
gBrowserPrompts
.
get
(
browsingContext
)
;
if
(
prompts
)
{
prompts
.
delete
(
id
)
;
}
}
forceClosePrompt
(
browsingContext
id
)
{
let
prompts
=
gBrowserPrompts
.
get
(
browsingContext
)
;
let
prompt
=
prompts
.
get
(
id
)
;
if
(
prompt
&
&
prompt
.
tabModalPrompt
)
{
prompt
.
tabModalPrompt
.
abortPrompt
(
)
;
}
}
forceClosePrompts
(
browsingContext
)
{
let
prompts
=
gBrowserPrompts
.
get
(
browsingContext
)
|
|
[
]
;
for
(
let
prompt
of
prompts
)
{
if
(
prompt
.
tabModalPrompt
)
{
prompt
.
tabModalPrompt
.
abortPrompt
(
)
;
}
}
}
receiveMessage
(
message
)
{
let
browsingContext
=
this
.
browsingContext
;
let
args
=
message
.
data
;
let
id
=
args
.
_remoteId
;
switch
(
message
.
name
)
{
case
"
Prompt
:
Open
"
:
{
const
COMMON_DIALOG
=
"
chrome
:
/
/
global
/
content
/
commonDialog
.
xhtml
"
;
const
SELECT_DIALOG
=
"
chrome
:
/
/
global
/
content
/
selectDialog
.
xhtml
"
;
let
topPrincipal
=
browsingContext
.
top
.
currentWindowGlobal
.
documentPrincipal
;
args
.
showAlertOrigin
=
topPrincipal
.
equals
(
args
.
promptPrincipal
)
;
if
(
message
.
data
.
tabPrompt
)
{
return
this
.
openTabPrompt
(
message
.
data
browsingContext
id
)
;
}
let
uri
=
message
.
data
.
promptType
=
=
"
select
"
?
SELECT_DIALOG
:
COMMON_DIALOG
;
let
browser
=
browsingContext
.
top
.
embedderElement
;
return
this
.
openModalWindow
(
uri
message
.
data
browser
)
;
}
case
"
Prompt
:
ForceClose
"
:
{
this
.
forceClosePrompt
(
browsingContext
id
)
;
break
;
}
}
return
undefined
;
}
openTabPrompt
(
args
browsingContext
id
)
{
let
browser
=
browsingContext
.
top
.
embedderElement
;
let
window
=
browser
.
ownerGlobal
;
let
tabPrompt
=
window
.
gBrowser
.
getTabModalPromptBox
(
browser
)
;
let
newPrompt
;
let
needRemove
=
false
;
let
onPromptClose
=
forceCleanup
=
>
{
let
promptData
=
gBrowserPrompts
.
get
(
browsingContext
)
;
if
(
!
promptData
|
|
!
promptData
.
has
(
id
)
)
{
throw
new
Error
(
"
Failed
to
close
a
prompt
since
it
wasn
'
t
registered
for
some
reason
.
"
)
;
}
let
{
resolver
tabModalPrompt
}
=
promptData
.
get
(
id
)
;
if
(
tabModalPrompt
)
{
tabPrompt
.
removePrompt
(
tabModalPrompt
)
;
}
else
{
needRemove
=
true
;
}
this
.
unregisterPrompt
(
browsingContext
id
)
;
PromptUtils
.
fireDialogEvent
(
window
"
DOMModalDialogClosed
"
browser
)
;
resolver
(
args
)
;
browser
.
leaveModalState
(
)
;
}
;
try
{
browser
.
enterModalState
(
)
;
let
eventDetail
=
{
tabPrompt
:
true
promptPrincipal
:
args
.
promptPrincipal
inPermitUnload
:
args
.
inPermitUnload
}
;
PromptUtils
.
fireDialogEvent
(
window
"
DOMWillOpenModalDialog
"
browser
eventDetail
)
;
args
.
promptActive
=
true
;
newPrompt
=
tabPrompt
.
appendPrompt
(
args
onPromptClose
)
;
let
promise
=
this
.
registerPrompt
(
browsingContext
newPrompt
id
)
;
if
(
needRemove
)
{
tabPrompt
.
removePrompt
(
newPrompt
)
;
}
return
promise
;
}
catch
(
ex
)
{
Cu
.
reportError
(
ex
)
;
onPromptClose
(
true
)
;
}
return
null
;
}
openModalWindow
(
uri
args
browser
)
{
let
window
=
browser
.
ownerGlobal
;
try
{
browser
.
enterModalState
(
)
;
PromptUtils
.
fireDialogEvent
(
window
"
DOMWillOpenModalDialog
"
browser
)
;
let
bag
=
PromptUtils
.
objectToPropBag
(
args
)
;
Services
.
ww
.
openWindow
(
window
uri
"
_blank
"
"
centerscreen
chrome
modal
titlebar
"
bag
)
;
PromptUtils
.
propBagToObject
(
bag
args
)
;
}
finally
{
browser
.
leaveModalState
(
)
;
PromptUtils
.
fireDialogEvent
(
window
"
DOMModalDialogClosed
"
browser
)
;
}
return
Promise
.
resolve
(
args
)
;
}
}
