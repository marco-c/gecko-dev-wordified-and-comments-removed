"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
AboutNewTabChild
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
PrivateBrowsingUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
NimbusFeatures
:
"
resource
:
/
/
nimbus
/
ExperimentAPI
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
ACTIVITY_STREAM_DEBUG
"
"
browser
.
newtabpage
.
activity
-
stream
.
debug
"
false
)
;
class
AboutNewTabChild
extends
JSWindowActorChild
{
handleEvent
(
event
)
{
if
(
event
.
type
=
=
"
DOMContentLoaded
"
)
{
if
(
NimbusFeatures
.
aboutwelcome
.
isEnabled
(
{
defaultValue
:
true
}
)
&
&
this
.
contentWindow
.
location
.
pathname
.
includes
(
"
welcome
"
)
)
{
return
;
}
const
debug
=
!
AppConstants
.
RELEASE_OR_BETA
&
&
ACTIVITY_STREAM_DEBUG
;
const
debugString
=
debug
?
"
-
dev
"
:
"
"
;
const
scripts
=
[
"
chrome
:
/
/
browser
/
content
/
contentSearchUI
.
js
"
"
chrome
:
/
/
browser
/
content
/
contentSearchHandoffUI
.
js
"
"
chrome
:
/
/
browser
/
content
/
contentTheme
.
js
"
resource
:
/
/
activity
-
stream
/
vendor
/
react
{
debugString
}
.
js
resource
:
/
/
activity
-
stream
/
vendor
/
react
-
dom
{
debugString
}
.
js
"
resource
:
/
/
activity
-
stream
/
vendor
/
prop
-
types
.
js
"
"
resource
:
/
/
activity
-
stream
/
vendor
/
react
-
transition
-
group
.
js
"
"
resource
:
/
/
activity
-
stream
/
vendor
/
redux
.
js
"
"
resource
:
/
/
activity
-
stream
/
vendor
/
react
-
redux
.
js
"
"
resource
:
/
/
activity
-
stream
/
data
/
content
/
activity
-
stream
.
bundle
.
js
"
"
resource
:
/
/
activity
-
stream
/
data
/
content
/
newtab
-
render
.
js
"
]
;
for
(
let
script
of
scripts
)
{
Services
.
scriptloader
.
loadSubScript
(
script
this
.
contentWindow
)
;
}
}
else
if
(
(
event
.
type
=
=
"
pageshow
"
|
|
event
.
type
=
=
"
visibilitychange
"
)
&
&
!
this
.
contentWindow
.
location
.
pathname
.
includes
(
"
welcome
"
)
)
{
let
contentWindowPrivate
=
PrivateBrowsingUtils
.
isContentWindowPrivate
(
this
.
contentWindow
)
;
if
(
this
.
document
.
visibilityState
=
=
"
visible
"
&
&
(
!
contentWindowPrivate
|
|
(
contentWindowPrivate
&
&
PrivateBrowsingUtils
.
permanentPrivateBrowsing
)
)
)
{
this
.
sendAsyncMessage
(
"
AboutNewTabVisible
"
)
;
NimbusFeatures
.
newtab
.
recordExposureEvent
(
)
;
}
}
}
}
