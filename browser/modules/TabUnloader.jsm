"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
TabUnloader
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
TabUnloader
=
{
init
(
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
unloadOnLowMemory
"
true
)
)
{
Services
.
obs
.
addObserver
(
this
"
memory
-
pressure
"
true
)
;
}
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
memory
-
pressure
"
&
&
data
!
=
"
heap
-
minimize
"
)
{
unloadLeastRecentlyUsedTab
(
)
;
}
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
"
nsISupportsWeakReference
"
]
)
}
;
function
unloadLeastRecentlyUsedTab
(
)
{
let
bgTabBrowsers
=
getSortedBackgroundTabBrowsers
(
)
;
for
(
let
tb
of
bgTabBrowsers
)
{
if
(
tb
.
browser
.
discardBrowser
(
tb
.
tab
)
)
{
return
;
}
}
}
function
sortTabs
(
a
b
)
{
if
(
a
.
tab
.
soundPlaying
!
=
b
.
tab
.
soundPlaying
)
{
return
a
.
tab
.
soundPlaying
-
b
.
tab
.
soundPlaying
;
}
if
(
a
.
tab
.
pinned
!
=
b
.
tab
.
pinned
)
{
return
a
.
tab
.
pinned
-
b
.
tab
.
pinned
;
}
return
a
.
tab
.
lastAccessed
-
b
.
tab
.
lastAccessed
;
}
function
getSortedBackgroundTabBrowsers
(
)
{
let
bgTabBrowsers
=
[
]
;
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
for
(
let
tab
of
win
.
gBrowser
.
tabs
)
{
if
(
!
tab
.
selected
&
&
tab
.
linkedBrowser
.
isConnected
)
{
bgTabBrowsers
.
push
(
{
tab
browser
:
win
.
gBrowser
}
)
;
}
}
}
return
bgTabBrowsers
.
sort
(
sortTabs
)
;
}
