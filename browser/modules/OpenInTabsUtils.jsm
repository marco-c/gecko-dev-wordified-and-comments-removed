"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
OpenInTabsUtils
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyGetter
(
lazy
"
l10n
"
(
)
=
>
{
return
new
Localization
(
[
"
browser
/
tabbrowser
.
ftl
"
"
branding
/
brand
.
ftl
"
]
true
)
;
}
)
;
const
OpenInTabsUtils
=
{
confirmOpenInTabs
(
numTabsToOpen
aWindow
)
{
const
WARN_ON_OPEN_PREF
=
"
browser
.
tabs
.
warnOnOpen
"
;
const
MAX_OPNE_PREF
=
"
browser
.
tabs
.
maxOpenBeforeWarn
"
;
if
(
!
Services
.
prefs
.
getBoolPref
(
WARN_ON_OPEN_PREF
)
)
{
return
true
;
}
if
(
numTabsToOpen
<
Services
.
prefs
.
getIntPref
(
MAX_OPNE_PREF
)
)
{
return
true
;
}
let
warnOnOpen
=
{
value
:
true
}
;
const
[
title
message
button
checkbox
]
=
lazy
.
l10n
.
formatMessagesSync
(
[
{
id
:
"
tabbrowser
-
confirm
-
open
-
multiple
-
tabs
-
title
"
}
{
id
:
"
tabbrowser
-
confirm
-
open
-
multiple
-
tabs
-
message
"
args
:
{
tabCount
:
numTabsToOpen
}
}
{
id
:
"
tabbrowser
-
confirm
-
open
-
multiple
-
tabs
-
button
"
}
{
id
:
"
tabbrowser
-
confirm
-
open
-
multiple
-
tabs
-
checkbox
"
}
]
)
;
let
buttonPressed
=
Services
.
prompt
.
confirmEx
(
aWindow
title
.
value
message
.
value
Services
.
prompt
.
BUTTON_TITLE_IS_STRING
*
Services
.
prompt
.
BUTTON_POS_0
+
Services
.
prompt
.
BUTTON_TITLE_CANCEL
*
Services
.
prompt
.
BUTTON_POS_1
button
.
value
null
null
checkbox
.
value
warnOnOpen
)
;
let
reallyOpen
=
buttonPressed
=
=
0
;
if
(
reallyOpen
&
&
!
warnOnOpen
.
value
)
{
Services
.
prefs
.
setBoolPref
(
WARN_ON_OPEN_PREF
false
)
;
}
return
reallyOpen
;
}
promiseConfirmOpenInTabs
(
numTabsToOpen
aWindow
)
{
return
new
Promise
(
resolve
=
>
{
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
{
resolve
(
this
.
confirmOpenInTabs
(
numTabsToOpen
aWindow
)
)
;
}
)
;
}
)
;
}
}
;
