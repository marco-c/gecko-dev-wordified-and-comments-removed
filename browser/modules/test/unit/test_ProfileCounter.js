"
use
strict
"
;
const
{
BrowserUsageTelemetry
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
/
modules
/
BrowserUsageTelemetry
.
sys
.
mjs
"
)
;
const
{
TelemetryTestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
sys
.
mjs
"
)
;
const
PROFILE_COUNT_SCALAR
=
"
browser
.
engagement
.
profile_count
"
;
const
SCALAR_ERROR_VALUE
=
0
;
const
FILE_OPEN_OPERATION
=
"
open
"
;
const
ERROR_FILE_NOT_FOUND
=
"
NotFoundError
"
;
const
ERROR_ACCESS_DENIED
=
"
NotAllowedError
"
;
var
gFakeProfileCounterFile
=
null
;
var
gProfileCounterFilePath
=
null
;
var
gNextReadExceptionReason
=
null
;
var
gNextWriteExceptionReason
=
null
;
function
getDummyUpdateDirectory
(
)
{
const
testName
=
"
test_ProfileCounter
"
;
let
dir
=
Cc
[
"
mozilla
.
org
/
file
/
local
;
1
"
]
.
createInstance
(
Ci
.
nsIFile
)
;
dir
.
initWithPath
(
C
:
\
\
foo
\
\
bar
\
\
{
testName
}
)
;
return
dir
;
}
var
gDummyTelemetryClientId
=
0
;
function
getDummyTelemetryClientId
(
)
{
return
gDummyTelemetryClientId
.
toString
(
)
;
}
function
setNewDummyTelemetryClientId
(
)
{
+
+
gDummyTelemetryClientId
;
}
function
getProfileCount
(
)
{
if
(
gFakeProfileCounterFile
=
=
=
null
)
{
return
null
;
}
let
saveData
=
JSON
.
parse
(
gFakeProfileCounterFile
)
;
return
saveData
.
profileTelemetryIds
.
length
;
}
function
reset
(
resetFile
=
true
)
{
if
(
resetFile
)
{
gFakeProfileCounterFile
=
null
;
}
gNextReadExceptionReason
=
null
;
gNextWriteExceptionReason
=
null
;
setNewDummyTelemetryClientId
(
)
;
}
function
setup
(
)
{
reset
(
)
;
do_get_profile
(
)
;
Services
.
fog
.
initializeFOG
(
)
;
Services
.
fog
.
testResetFOG
(
)
;
BrowserUsageTelemetry
.
Policy
.
readProfileCountFile
=
async
path
=
>
{
if
(
!
gProfileCounterFilePath
)
{
gProfileCounterFilePath
=
path
;
}
else
{
Assert
.
equal
(
gProfileCounterFilePath
path
"
Only
one
file
should
be
accessed
"
)
;
}
if
(
gNextReadExceptionReason
!
=
=
null
)
{
let
ex
=
new
DOMException
(
FILE_OPEN_OPERATION
gNextReadExceptionReason
)
;
gNextReadExceptionReason
=
null
;
throw
ex
;
}
if
(
gFakeProfileCounterFile
=
=
=
null
)
{
throw
new
DOMException
(
FILE_OPEN_OPERATION
ERROR_FILE_NOT_FOUND
)
;
}
return
gFakeProfileCounterFile
;
}
;
BrowserUsageTelemetry
.
Policy
.
writeProfileCountFile
=
async
(
path
data
)
=
>
{
if
(
!
gProfileCounterFilePath
)
{
gProfileCounterFilePath
=
path
;
}
else
{
Assert
.
equal
(
gProfileCounterFilePath
path
"
Only
one
file
should
be
accessed
"
)
;
}
if
(
gNextWriteExceptionReason
!
=
=
null
)
{
let
ex
=
new
DOMException
(
FILE_OPEN_OPERATION
gNextWriteExceptionReason
)
;
gNextWriteExceptionReason
=
null
;
throw
ex
;
}
gFakeProfileCounterFile
=
data
;
}
;
BrowserUsageTelemetry
.
Policy
.
getUpdateDirectory
=
getDummyUpdateDirectory
;
BrowserUsageTelemetry
.
Policy
.
getTelemetryClientId
=
getDummyTelemetryClientId
;
}
function
checkSuccess
(
profilesReported
rawCount
=
profilesReported
)
{
Assert
.
equal
(
rawCount
getProfileCount
(
)
)
;
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PROFILE_COUNT_SCALAR
profilesReported
"
The
value
reported
to
telemetry
should
be
the
expected
profile
count
"
)
;
Assert
.
equal
(
profilesReported
Glean
.
browserEngagement
.
profileCount
.
testGetValue
(
)
)
;
}
function
checkError
(
)
{
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
)
;
TelemetryTestUtils
.
assertScalar
(
scalars
PROFILE_COUNT_SCALAR
SCALAR_ERROR_VALUE
"
The
value
reported
to
telemetry
should
be
the
error
value
"
)
;
}
add_task
(
async
function
testProfileCounter
(
)
{
setup
(
)
;
info
(
"
Testing
basic
functionality
single
install
"
)
;
await
BrowserUsageTelemetry
.
reportProfileCount
(
)
;
checkSuccess
(
1
)
;
await
BrowserUsageTelemetry
.
reportProfileCount
(
)
;
checkSuccess
(
1
)
;
reset
(
false
)
;
info
(
"
Testing
basic
functionality
faking
a
second
install
"
)
;
await
BrowserUsageTelemetry
.
reportProfileCount
(
)
;
checkSuccess
(
2
)
;
info
(
"
Testing
read
error
after
successful
write
"
)
;
gNextReadExceptionReason
=
ERROR_ACCESS_DENIED
;
await
BrowserUsageTelemetry
.
reportProfileCount
(
)
;
checkError
(
)
;
reset
(
)
;
info
(
"
Testing
read
error
self
-
correction
"
)
;
gNextReadExceptionReason
=
ERROR_ACCESS_DENIED
;
await
BrowserUsageTelemetry
.
reportProfileCount
(
)
;
checkError
(
)
;
await
BrowserUsageTelemetry
.
reportProfileCount
(
)
;
checkSuccess
(
1
)
;
reset
(
)
;
info
(
"
Testing
with
malformed
profile
count
file
"
)
;
gFakeProfileCounterFile
=
"
<
malformed
file
data
>
"
;
await
BrowserUsageTelemetry
.
reportProfileCount
(
)
;
checkError
(
)
;
await
BrowserUsageTelemetry
.
reportProfileCount
(
)
;
checkSuccess
(
1
)
;
reset
(
)
;
info
(
"
Testing
write
error
before
the
first
write
"
)
;
gNextWriteExceptionReason
=
ERROR_ACCESS_DENIED
;
await
BrowserUsageTelemetry
.
reportProfileCount
(
)
;
checkError
(
)
;
reset
(
)
;
info
(
"
Testing
bucketing
"
)
;
for
(
let
i
=
0
;
i
<
15
;
i
+
+
)
{
reset
(
false
)
;
await
BrowserUsageTelemetry
.
reportProfileCount
(
)
;
}
checkSuccess
(
10
15
)
;
}
)
;
