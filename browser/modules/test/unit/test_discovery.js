"
use
strict
"
;
do_get_profile
(
)
;
const
{
TestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
TestUtils
.
sys
.
mjs
"
)
;
const
{
ClientID
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ClientID
.
jsm
"
)
;
const
{
Discovery
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
Discovery
.
jsm
"
)
;
const
{
ContextualIdentityService
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ContextualIdentityService
.
sys
.
mjs
"
)
;
const
TAAR_COOKIE_NAME
=
"
taarId
"
;
add_task
(
async
function
test_discovery
(
)
{
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
/
foobar
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
discovery
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
discovery
.
containers
.
enabled
"
true
)
;
Services
.
prefs
.
setBoolPref
(
"
datareporting
.
healthreport
.
uploadEnabled
"
true
)
;
Services
.
prefs
.
setCharPref
(
"
browser
.
discovery
.
sites
"
uri
.
host
)
;
registerCleanupFunction
(
(
)
=
>
{
Services
.
prefs
.
clearUserPref
(
"
browser
.
discovery
.
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
discovery
.
containers
.
enabled
"
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
discovery
.
sites
"
)
;
Services
.
prefs
.
clearUserPref
(
"
datareporting
.
healthreport
.
uploadEnabled
"
)
;
}
)
;
await
ClientID
.
getClientID
(
)
;
await
Discovery
.
update
(
)
;
ok
(
Services
.
cookies
.
cookieExists
(
uri
.
host
"
/
"
TAAR_COOKIE_NAME
{
}
)
"
cookie
exists
"
)
;
ok
(
!
Services
.
cookies
.
cookieExists
(
uri
.
host
"
/
"
TAAR_COOKIE_NAME
{
privateBrowsingId
:
1
}
)
"
no
private
cookie
exists
"
)
;
ContextualIdentityService
.
getPublicIdentities
(
)
.
forEach
(
identity
=
>
{
let
{
userContextId
}
=
identity
;
equal
(
Services
.
cookies
.
cookieExists
(
uri
.
host
"
/
"
TAAR_COOKIE_NAME
{
userContextId
}
)
identity
.
public
"
cookie
exists
"
)
;
}
)
;
let
changed
=
TestUtils
.
topicObserved
(
"
cookie
-
changed
"
(
subject
data
)
=
>
{
let
cookie
=
subject
.
QueryInterface
(
Ci
.
nsICookie
)
;
equal
(
cookie
.
name
TAAR_COOKIE_NAME
"
taar
cookie
exists
"
)
;
equal
(
cookie
.
host
uri
.
host
"
cookie
exists
for
host
"
)
;
equal
(
cookie
.
originAttributes
.
userContextId
container
.
userContextId
"
cookie
userContextId
is
correct
"
)
;
return
true
;
}
)
;
let
container
=
ContextualIdentityService
.
create
(
"
New
Container
"
"
Icon
"
"
Color
"
)
;
await
changed
;
Discovery
.
enabled
=
false
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
Services
.
cookies
.
cookieExists
(
uri
.
host
"
/
"
TAAR_COOKIE_NAME
{
}
)
;
}
)
;
ContextualIdentityService
.
getPublicIdentities
(
)
.
forEach
(
identity
=
>
{
let
{
userContextId
}
=
identity
;
ok
(
!
Services
.
cookies
.
cookieExists
(
uri
.
host
"
/
"
TAAR_COOKIE_NAME
{
userContextId
}
)
"
no
cookie
exists
"
)
;
}
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
discovery
.
containers
.
enabled
"
false
)
;
Discovery
.
enabled
=
true
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
Services
.
cookies
.
cookieExists
(
uri
.
host
"
/
"
TAAR_COOKIE_NAME
{
}
)
;
}
)
;
ContextualIdentityService
.
getPublicIdentities
(
)
.
forEach
(
identity
=
>
{
let
{
userContextId
}
=
identity
;
ok
(
!
Services
.
cookies
.
cookieExists
(
uri
.
host
"
/
"
TAAR_COOKIE_NAME
{
userContextId
}
)
"
no
cookie
exists
"
)
;
}
)
;
changed
=
TestUtils
.
topicObserved
(
"
cookie
-
changed
"
(
subject
data
)
=
>
{
if
(
data
!
=
=
"
added
"
)
{
return
false
;
}
let
cookie
=
subject
.
QueryInterface
(
Ci
.
nsICookie
)
;
equal
(
cookie
.
name
TAAR_COOKIE_NAME
"
taar
cookie
exists
"
)
;
equal
(
cookie
.
host
uri
.
host
"
cookie
exists
for
host
"
)
;
return
true
;
}
)
;
await
ClientID
.
removeClientID
(
)
;
await
ClientID
.
getClientID
(
)
;
await
changed
;
Services
.
prefs
.
setBoolPref
(
"
datareporting
.
healthreport
.
uploadEnabled
"
false
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
Services
.
cookies
.
cookieExists
(
uri
.
host
"
/
"
TAAR_COOKIE_NAME
{
}
)
;
}
)
;
}
)
;
