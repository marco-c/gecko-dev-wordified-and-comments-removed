"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
SitePermissions
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
STORAGE_MANAGER_ENABLED
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
storageManager
.
enabled
"
)
;
const
RESIST_FINGERPRINTING_ENABLED
=
Services
.
prefs
.
getBoolPref
(
"
privacy
.
resistFingerprinting
"
)
;
add_task
(
async
function
testPermissionsListing
(
)
{
let
expectedPermissions
=
[
"
camera
"
"
cookie
"
"
desktop
-
notification
"
"
focus
-
tab
-
by
-
prompt
"
"
geo
"
"
image
"
"
install
"
"
microphone
"
"
popup
"
"
screen
"
"
shortcuts
"
]
;
if
(
STORAGE_MANAGER_ENABLED
)
{
expectedPermissions
.
push
(
"
persistent
-
storage
"
)
;
}
if
(
RESIST_FINGERPRINTING_ENABLED
)
{
expectedPermissions
.
push
(
"
canvas
"
)
;
}
Assert
.
deepEqual
(
SitePermissions
.
listPermissions
(
)
.
sort
(
)
expectedPermissions
.
sort
(
)
"
Correct
list
of
all
permissions
"
)
;
}
)
;
add_task
(
async
function
testGetAllByURI
(
)
{
let
wrongURI
=
Services
.
io
.
newURI
(
"
file
:
/
/
/
example
.
js
"
)
;
Assert
.
deepEqual
(
SitePermissions
.
getAllByURI
(
wrongURI
)
[
]
)
;
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
Assert
.
deepEqual
(
SitePermissions
.
getAllByURI
(
uri
)
[
]
)
;
SitePermissions
.
set
(
uri
"
camera
"
SitePermissions
.
ALLOW
)
;
Assert
.
deepEqual
(
SitePermissions
.
getAllByURI
(
uri
)
[
{
id
:
"
camera
"
state
:
SitePermissions
.
ALLOW
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
]
)
;
SitePermissions
.
set
(
uri
"
microphone
"
SitePermissions
.
ALLOW
SitePermissions
.
SCOPE_SESSION
)
;
SitePermissions
.
set
(
uri
"
desktop
-
notification
"
SitePermissions
.
BLOCK
)
;
Assert
.
deepEqual
(
SitePermissions
.
getAllByURI
(
uri
)
[
{
id
:
"
camera
"
state
:
SitePermissions
.
ALLOW
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
{
id
:
"
microphone
"
state
:
SitePermissions
.
ALLOW
scope
:
SitePermissions
.
SCOPE_SESSION
}
{
id
:
"
desktop
-
notification
"
state
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
]
)
;
SitePermissions
.
remove
(
uri
"
microphone
"
)
;
Assert
.
deepEqual
(
SitePermissions
.
getAllByURI
(
uri
)
[
{
id
:
"
camera
"
state
:
SitePermissions
.
ALLOW
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
{
id
:
"
desktop
-
notification
"
state
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
]
)
;
SitePermissions
.
remove
(
uri
"
camera
"
)
;
SitePermissions
.
remove
(
uri
"
desktop
-
notification
"
)
;
Assert
.
deepEqual
(
SitePermissions
.
getAllByURI
(
uri
)
[
]
)
;
SitePermissions
.
set
(
uri
"
addon
"
SitePermissions
.
BLOCK
)
;
Assert
.
deepEqual
(
SitePermissions
.
getAllByURI
(
uri
)
[
]
)
;
SitePermissions
.
remove
(
uri
"
addon
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
"
permissions
.
default
.
shortcuts
"
)
0
)
;
SitePermissions
.
set
(
uri
"
shortcuts
"
SitePermissions
.
BLOCK
)
;
Assert
.
equal
(
Services
.
prefs
.
getIntPref
(
"
permissions
.
default
.
shortcuts
"
)
0
)
;
Assert
.
deepEqual
(
SitePermissions
.
getAllByURI
(
uri
)
[
{
id
:
"
shortcuts
"
state
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
]
)
;
SitePermissions
.
remove
(
uri
"
shortcuts
"
)
;
Services
.
prefs
.
clearUserPref
(
"
permissions
.
default
.
shortcuts
"
)
;
}
)
;
add_task
(
async
function
testGetAvailableStates
(
)
{
Assert
.
deepEqual
(
SitePermissions
.
getAvailableStates
(
"
camera
"
)
[
SitePermissions
.
UNKNOWN
SitePermissions
.
ALLOW
SitePermissions
.
BLOCK
]
)
;
Services
.
prefs
.
setIntPref
(
"
permissions
.
default
.
camera
"
SitePermissions
.
ALLOW
)
;
Assert
.
deepEqual
(
SitePermissions
.
getAvailableStates
(
"
camera
"
)
[
SitePermissions
.
PROMPT
SitePermissions
.
ALLOW
SitePermissions
.
BLOCK
]
)
;
Services
.
prefs
.
clearUserPref
(
"
permissions
.
default
.
camera
"
)
;
Assert
.
deepEqual
(
SitePermissions
.
getAvailableStates
(
"
cookie
"
)
[
SitePermissions
.
ALLOW
SitePermissions
.
ALLOW_COOKIES_FOR_SESSION
SitePermissions
.
BLOCK
]
)
;
Assert
.
deepEqual
(
SitePermissions
.
getAvailableStates
(
"
popup
"
)
[
SitePermissions
.
ALLOW
SitePermissions
.
BLOCK
]
)
;
}
)
;
add_task
(
async
function
testExactHostMatch
(
)
{
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
let
subUri
=
Services
.
io
.
newURI
(
"
https
:
/
/
test1
.
example
.
com
"
)
;
let
exactHostMatched
=
[
"
desktop
-
notification
"
"
focus
-
tab
-
by
-
prompt
"
"
camera
"
"
microphone
"
"
screen
"
"
geo
"
]
;
if
(
STORAGE_MANAGER_ENABLED
)
{
exactHostMatched
.
push
(
"
persistent
-
storage
"
)
;
}
if
(
RESIST_FINGERPRINTING_ENABLED
)
{
exactHostMatched
.
push
(
"
canvas
"
)
;
}
let
nonExactHostMatched
=
[
"
image
"
"
cookie
"
"
popup
"
"
install
"
"
shortcuts
"
]
;
let
permissions
=
SitePermissions
.
listPermissions
(
)
;
for
(
let
permission
of
permissions
)
{
SitePermissions
.
set
(
uri
permission
SitePermissions
.
ALLOW
)
;
if
(
exactHostMatched
.
includes
(
permission
)
)
{
Assert
.
equal
(
SitePermissions
.
get
(
subUri
permission
)
.
state
SitePermissions
.
UNKNOWN
{
permission
}
should
exact
-
host
match
)
;
}
else
if
(
nonExactHostMatched
.
includes
(
permission
)
)
{
Assert
.
equal
(
SitePermissions
.
get
(
subUri
permission
)
.
state
SitePermissions
.
ALLOW
{
permission
}
should
not
exact
-
host
match
)
;
}
else
{
Assert
.
ok
(
false
Found
an
unknown
permission
{
permission
}
in
exact
host
match
test
.
+
"
Please
add
new
permissions
from
SitePermissions
.
jsm
to
this
test
.
"
)
;
}
SitePermissions
.
set
(
subUri
permission
SitePermissions
.
PROMPT
)
;
Assert
.
equal
(
SitePermissions
.
get
(
subUri
permission
)
.
state
SitePermissions
.
PROMPT
)
;
Assert
.
equal
(
SitePermissions
.
get
(
uri
permission
)
.
state
SitePermissions
.
ALLOW
)
;
SitePermissions
.
remove
(
subUri
permission
)
;
SitePermissions
.
remove
(
uri
permission
)
;
}
}
)
;
add_task
(
function
*
testDefaultPrefs
(
)
{
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
uri
"
camera
"
)
{
state
:
SitePermissions
.
UNKNOWN
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
)
;
Services
.
prefs
.
setIntPref
(
"
permissions
.
default
.
camera
"
SitePermissions
.
BLOCK
)
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
uri
"
camera
"
)
{
state
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
)
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
uri
"
microphone
"
)
{
state
:
SitePermissions
.
UNKNOWN
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
)
;
Services
.
prefs
.
setIntPref
(
"
permissions
.
default
.
camera
"
SitePermissions
.
ALLOW
)
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
uri
"
camera
"
)
{
state
:
SitePermissions
.
ALLOW
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
)
;
SitePermissions
.
set
(
uri
"
camera
"
SitePermissions
.
BLOCK
)
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
uri
"
camera
"
)
{
state
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
)
;
SitePermissions
.
remove
(
uri
"
camera
"
)
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
uri
"
camera
"
)
{
state
:
SitePermissions
.
ALLOW
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
)
;
Services
.
prefs
.
clearUserPref
(
"
permissions
.
default
.
camera
"
)
;
Assert
.
deepEqual
(
SitePermissions
.
get
(
uri
"
camera
"
)
{
state
:
SitePermissions
.
UNKNOWN
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
)
;
}
)
;
add_task
(
async
function
testCanvasPermission
(
)
{
let
resistFingerprinting
=
Services
.
prefs
.
getBoolPref
(
"
privacy
.
resistFingerprinting
"
false
)
;
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
)
;
SitePermissions
.
set
(
uri
"
canvas
"
SitePermissions
.
ALLOW
)
;
Services
.
prefs
.
setBoolPref
(
"
privacy
.
resistFingerprinting
"
false
)
;
Assert
.
equal
(
SitePermissions
.
listPermissions
(
)
.
indexOf
(
"
canvas
"
)
-
1
)
;
Assert
.
equal
(
SitePermissions
.
getAllByURI
(
uri
)
.
filter
(
permission
=
>
permission
.
id
=
=
=
"
canvas
"
)
.
length
0
)
;
Services
.
prefs
.
setBoolPref
(
"
privacy
.
resistFingerprinting
"
true
)
;
Assert
.
notEqual
(
SitePermissions
.
listPermissions
(
)
.
indexOf
(
"
canvas
"
)
-
1
)
;
Assert
.
notEqual
(
SitePermissions
.
getAllByURI
(
uri
)
.
filter
(
permission
=
>
permission
.
id
=
=
=
"
canvas
"
)
.
length
0
)
;
SitePermissions
.
remove
(
uri
"
canvas
"
)
;
Services
.
prefs
.
setBoolPref
(
"
privacy
.
resistFingerprinting
"
resistFingerprinting
)
;
}
)
;
