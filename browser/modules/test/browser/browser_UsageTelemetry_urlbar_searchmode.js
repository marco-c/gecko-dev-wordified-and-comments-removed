"
use
strict
"
;
const
SCALAR_PREFIX
=
"
urlbar
.
searchmode
.
"
;
const
ENGINE_NAME
=
"
MozSearch
"
;
const
ENGINE_DOMAIN
=
"
example
.
com
"
;
const
ENGINE_ALIAS
=
"
alias
"
;
const
TEST_QUERY
=
"
test
"
;
const
SUGGEST_PREF
=
"
browser
.
search
.
suggest
.
enabled
"
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
SearchTelemetry
:
"
resource
:
/
/
/
modules
/
SearchTelemetry
.
jsm
"
UrlbarTestUtils
:
"
resource
:
/
/
testing
-
common
/
UrlbarTestUtils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
TouchBarHelper
"
"
mozilla
.
org
/
widget
/
touchbarhelper
;
1
"
"
nsITouchBarHelper
"
)
;
function
assertSearchModeScalar
(
entry
key
)
{
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
false
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
SCALAR_PREFIX
+
entry
key
1
)
;
for
(
let
e
of
UrlbarUtils
.
SEARCH_MODE_ENTRY
)
{
if
(
e
=
=
entry
)
{
Assert
.
equal
(
Object
.
keys
(
scalars
[
SCALAR_PREFIX
+
entry
]
)
.
length
1
This
search
must
only
increment
one
entry
in
the
correct
scalar
:
{
e
}
)
;
}
else
{
Assert
.
ok
(
!
scalars
[
SCALAR_PREFIX
+
e
]
No
other
urlbar
.
searchmode
scalars
should
be
recorded
.
Checking
{
e
}
)
;
}
}
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
}
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
"
true
]
[
"
browser
.
urlbar
.
update2
.
localOneOffs
"
true
]
[
"
browser
.
urlbar
.
update2
.
oneOffsRefresh
"
true
]
]
}
)
;
await
Services
.
search
.
addEngineWithDetails
(
ENGINE_NAME
{
alias
:
ENGINE_ALIAS
method
:
"
GET
"
template
:
http
:
/
/
{
ENGINE_DOMAIN
}
/
?
q
=
{
searchTerms
}
}
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
ENGINE_NAME
)
;
let
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
engine
)
;
await
Services
.
search
.
moveEngine
(
engine
0
)
;
let
oldCanRecord
=
Services
.
telemetry
.
canRecordExtended
;
Services
.
telemetry
.
canRecordExtended
=
true
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
maxHistoricalSearchSuggestions
"
0
]
]
}
)
;
UrlbarTestUtils
.
init
(
this
)
;
registerCleanupFunction
(
async
function
(
)
{
Services
.
telemetry
.
canRecordExtended
=
oldCanRecord
;
await
Services
.
search
.
setDefault
(
originalEngine
)
;
await
Services
.
search
.
removeEngine
(
engine
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
Services
.
telemetry
.
setEventRecordingEnabled
(
"
navigation
"
false
)
;
UrlbarTestUtils
.
uninit
(
)
;
}
)
;
}
)
;
add_task
(
async
function
test_oneoff_remote
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
)
;
assertSearchModeScalar
(
"
oneoff
"
"
other
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_oneoff_local
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
}
)
;
assertSearchModeScalar
(
"
oneoff
"
"
history
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_oneoff_amazon
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
SUGGEST_PREF
false
]
]
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
{
engineName
:
"
Amazon
.
com
"
}
)
;
assertSearchModeScalar
(
"
oneoff
"
"
Amazon
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_oneoff_wikipedia
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
SUGGEST_PREF
false
]
]
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
await
UrlbarTestUtils
.
enterSearchMode
(
window
{
engineName
:
"
Wikipedia
(
en
)
"
}
)
;
assertSearchModeScalar
(
"
oneoff
"
"
Wikipedia
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_shortcut
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
"
k
"
{
accelKey
:
true
}
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
ENGINE_NAME
source
:
UrlbarUtils
.
RESULT_SOURCE
.
SEARCH
entry
:
"
shortcut
"
}
)
;
assertSearchModeScalar
(
"
shortcut
"
"
other
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_topsites_urlbar
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
SUGGEST_PREF
false
]
]
}
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
await
UrlbarTestUtils
.
promisePopupOpen
(
window
(
)
=
>
{
if
(
gURLBar
.
getAttribute
(
"
pageproxystate
"
)
=
=
"
invalid
"
)
{
gURLBar
.
handleRevert
(
)
;
}
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
}
)
;
}
)
;
await
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
let
amazonSearch
=
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
0
)
;
Assert
.
equal
(
amazonSearch
.
result
.
payload
.
keyword
"
amazon
"
"
First
result
should
have
the
Amazon
keyword
.
"
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeMouseAtCenter
(
amazonSearch
{
}
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
amazonSearch
.
result
.
payload
.
engine
entry
:
"
topsites_urlbar
"
}
)
;
assertSearchModeScalar
(
"
topsites_urlbar
"
"
Amazon
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_keywordoffer
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
let
alias
=
"
"
+
ENGINE_ALIAS
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
alias
}
)
;
let
keywordOfferResult
=
await
UrlbarTestUtils
.
getDetailsOfResultAt
(
window
0
)
;
Assert
.
equal
(
keywordOfferResult
.
searchParams
.
keyword
alias
"
The
first
result
should
be
a
keyword
search
result
with
the
correct
alias
.
"
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
ENGINE_NAME
entry
:
"
keywordoffer
"
}
)
;
assertSearchModeScalar
(
"
keywordoffer
"
"
other
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_typed
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
{
ENGINE_ALIAS
}
}
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
"
"
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
ENGINE_NAME
entry
:
"
typed
"
}
)
;
assertSearchModeScalar
(
"
typed
"
"
other
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_bookmarkmenu
(
)
{
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
PlacesCommandHook
.
searchBookmarks
(
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
BOOKMARKS
entry
:
"
bookmarkmenu
"
}
)
;
assertSearchModeScalar
(
"
bookmarkmenu
"
"
bookmarks
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
}
)
;
add_task
(
async
function
test_tabmenu
(
)
{
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
gTabsPanel
.
searchTabs
(
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
TABS
entry
:
"
tabmenu
"
}
)
;
assertSearchModeScalar
(
"
tabmenu
"
"
tabs
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
}
)
;
add_task
(
async
function
test_handoff_pbm
(
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
waitForTabURL
:
"
about
:
privatebrowsing
"
}
)
;
let
tab
=
win
.
gBrowser
.
selectedBrowser
;
await
SpecialPowers
.
spawn
(
tab
[
]
async
function
(
)
{
let
btn
=
content
.
document
.
getElementById
(
"
search
-
handoff
-
button
"
)
;
btn
.
click
(
)
;
}
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
win
)
;
await
new
Promise
(
r
=
>
EventUtils
.
synthesizeKey
(
"
f
"
{
}
win
r
)
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
win
{
engineName
:
ENGINE_NAME
entry
:
"
handoff
"
}
)
;
assertSearchModeScalar
(
"
handoff
"
"
other
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
win
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
win
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
async
function
test_touchbar
(
)
{
if
(
AppConstants
.
platform
!
=
"
macosx
"
)
{
return
;
}
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
TEST_QUERY
}
)
;
TouchBarHelper
.
insertRestrictionInUrlbar
(
UrlbarTokenizer
.
RESTRICT
.
HISTORY
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
source
:
UrlbarUtils
.
RESULT_SOURCE
.
HISTORY
entry
:
"
touchbar
"
}
)
;
assertSearchModeScalar
(
"
touchbar
"
"
history
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
}
)
;
add_task
(
async
function
test_tabtosearch
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
urlbar
.
update2
.
tabToComplete
"
true
]
]
}
)
;
await
PlacesTestUtils
.
addVisits
(
[
https
:
/
/
{
ENGINE_DOMAIN
}
/
]
)
;
await
UrlbarTestUtils
.
promiseAutocompleteResultPopup
(
{
window
value
:
ENGINE_DOMAIN
.
slice
(
0
4
)
}
)
;
let
tabToSearchResult
=
(
await
UrlbarTestUtils
.
waitForAutocompleteResultAt
(
window
1
)
)
.
result
;
Assert
.
equal
(
tabToSearchResult
.
providerName
"
TabToSearch
"
"
The
second
result
is
a
tab
-
to
-
search
result
.
"
)
;
Assert
.
equal
(
tabToSearchResult
.
payload
.
engine
ENGINE_NAME
"
The
tab
-
to
-
search
result
is
for
the
correct
engine
.
"
)
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
null
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
Assert
.
equal
(
UrlbarTestUtils
.
getSelectedRowIndex
(
window
)
1
"
Sanity
check
:
The
second
result
is
selected
.
"
)
;
let
searchPromise
=
UrlbarTestUtils
.
promiseSearchComplete
(
window
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
searchPromise
;
await
UrlbarTestUtils
.
assertSearchMode
(
window
{
engineName
:
ENGINE_NAME
entry
:
"
tabtosearch
"
}
)
;
assertSearchModeScalar
(
"
tabtosearch
"
"
other
"
)
;
await
UrlbarTestUtils
.
exitSearchMode
(
window
)
;
await
UrlbarTestUtils
.
promisePopupClose
(
window
)
;
await
PlacesUtils
.
history
.
clear
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
