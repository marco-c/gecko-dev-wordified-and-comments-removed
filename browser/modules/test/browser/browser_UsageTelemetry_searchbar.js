"
use
strict
"
;
const
SCALAR_SEARCHBAR
=
"
browser
.
engagement
.
navigation
.
searchbar
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
URLBAR_SELECTED_RESULT_METHODS
"
"
resource
:
/
/
/
modules
/
BrowserUsageTelemetry
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
CustomizableUITestUtils
.
jsm
"
this
)
;
let
gCUITestUtils
=
new
CustomizableUITestUtils
(
window
)
;
function
checkHistogramResults
(
resultIndexes
expected
histogram
)
{
for
(
let
[
i
val
]
of
Object
.
entries
(
resultIndexes
.
values
)
)
{
if
(
i
=
=
expected
)
{
Assert
.
equal
(
val
1
expected
counts
should
match
for
{
histogram
}
index
{
i
}
)
;
}
else
{
Assert
.
equal
(
!
!
val
false
unexpected
counts
should
be
zero
for
{
histogram
}
index
{
i
}
)
;
}
}
}
let
searchInSearchbar
=
async
function
(
inputText
)
{
let
win
=
window
;
await
new
Promise
(
r
=
>
waitForFocus
(
r
win
)
)
;
let
sb
=
BrowserSearch
.
searchBar
;
sb
.
focus
(
)
;
sb
.
value
=
inputText
;
sb
.
textbox
.
controller
.
startSearch
(
inputText
)
;
await
BrowserTestUtils
.
waitForEvent
(
sb
.
textbox
.
popup
"
popupshown
"
)
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
sb
.
textbox
.
controller
.
searchStatus
>
=
Ci
.
nsIAutoCompleteController
.
STATUS_COMPLETE_NO_MATCH
"
The
search
in
the
searchbar
must
complete
.
"
)
;
}
;
function
clickSearchbarSuggestion
(
entryName
)
{
let
richlistbox
=
BrowserSearch
.
searchBar
.
textbox
.
popup
.
richlistbox
;
let
richlistitem
=
Array
.
prototype
.
find
.
call
(
richlistbox
.
children
item
=
>
item
.
getAttribute
(
"
ac
-
value
"
)
=
=
entryName
)
;
richlistbox
.
ensureElementIsVisible
(
richlistitem
)
;
EventUtils
.
synthesizeMouseAtCenter
(
richlistitem
{
}
)
;
}
add_task
(
async
function
setup
(
)
{
await
gCUITestUtils
.
addSearchBar
(
)
;
registerCleanupFunction
(
(
)
=
>
{
gCUITestUtils
.
removeSearchBar
(
)
;
}
)
;
await
Services
.
search
.
addEngineWithDetails
(
"
MozSearch
"
{
alias
:
"
mozalias
"
method
:
"
GET
"
template
:
"
http
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
}
)
;
await
Services
.
search
.
addEngineWithDetails
(
"
MozSearch2
"
{
alias
:
"
mozalias2
"
method
:
"
GET
"
template
:
"
http
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
}
)
;
let
engineDefault
=
Services
.
search
.
getEngineByName
(
"
MozSearch
"
)
;
let
originalEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
engineDefault
)
;
let
engineOneOff
=
Services
.
search
.
getEngineByName
(
"
MozSearch2
"
)
;
await
Services
.
search
.
moveEngine
(
engineOneOff
0
)
;
let
oldCanRecord
=
Services
.
telemetry
.
canRecordExtended
;
Services
.
telemetry
.
canRecordExtended
=
true
;
Services
.
telemetry
.
setEventRecordingEnabled
(
"
navigation
"
true
)
;
registerCleanupFunction
(
async
function
(
)
{
Services
.
telemetry
.
canRecordExtended
=
oldCanRecord
;
await
Services
.
search
.
setDefault
(
originalEngine
)
;
await
Services
.
search
.
removeEngine
(
engineDefault
)
;
await
Services
.
search
.
removeEngine
(
engineOneOff
)
;
Services
.
telemetry
.
setEventRecordingEnabled
(
"
navigation
"
false
)
;
}
)
;
}
)
;
add_task
(
async
function
test_plainQuery
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
let
resultMethodHist
=
TelemetryTestUtils
.
getAndClearHistogram
(
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
let
search_hist
=
TelemetryTestUtils
.
getAndClearKeyedHistogram
(
"
SEARCH_COUNTS
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
info
(
"
Simulate
entering
a
simple
search
.
"
)
;
let
p
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
searchInSearchbar
(
"
simple
query
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
p
;
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
false
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
SCALAR_SEARCHBAR
"
search_enter
"
1
)
;
Assert
.
equal
(
Object
.
keys
(
scalars
[
SCALAR_SEARCHBAR
]
)
.
length
1
"
This
search
must
only
increment
one
entry
in
the
scalar
.
"
)
;
TelemetryTestUtils
.
assertKeyedHistogramSum
(
search_hist
"
other
-
MozSearch
.
searchbar
"
1
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
object
:
"
searchbar
"
value
:
"
enter
"
extra
:
{
engine
:
"
other
-
MozSearch
"
}
}
]
{
category
:
"
navigation
"
method
:
"
search
"
}
)
;
let
resultMethods
=
resultMethodHist
.
snapshot
(
)
;
checkHistogramResults
(
resultMethods
URLBAR_SELECTED_RESULT_METHODS
.
enter
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_oneOff_enter
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
let
resultMethodHist
=
TelemetryTestUtils
.
getAndClearHistogram
(
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
let
search_hist
=
TelemetryTestUtils
.
getAndClearKeyedHistogram
(
"
SEARCH_COUNTS
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
info
(
"
Perform
a
one
-
off
search
using
the
first
engine
.
"
)
;
let
p
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
searchInSearchbar
(
"
query
"
)
;
info
(
"
Pressing
Alt
+
Down
to
highlight
the
first
one
off
engine
.
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
p
;
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
false
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
SCALAR_SEARCHBAR
"
search_oneoff
"
1
)
;
Assert
.
equal
(
Object
.
keys
(
scalars
[
SCALAR_SEARCHBAR
]
)
.
length
1
"
This
search
must
only
increment
one
entry
in
the
scalar
.
"
)
;
TelemetryTestUtils
.
assertKeyedHistogramSum
(
search_hist
"
other
-
MozSearch2
.
searchbar
"
1
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
object
:
"
searchbar
"
value
:
"
oneoff
"
extra
:
{
engine
:
"
other
-
MozSearch2
"
}
}
]
{
category
:
"
navigation
"
method
:
"
search
"
}
)
;
let
resultMethods
=
resultMethodHist
.
snapshot
(
)
;
checkHistogramResults
(
resultMethods
URLBAR_SELECTED_RESULT_METHODS
.
enter
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_oneOff_enterSelection
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
let
resultMethodHist
=
TelemetryTestUtils
.
getAndClearHistogram
(
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
const
url
=
getRootDirectory
(
gTestPath
)
+
"
usageTelemetrySearchSuggestions
.
xml
"
;
let
suggestionEngine
=
await
Services
.
search
.
addOpenSearchEngine
(
url
"
"
)
;
let
previousEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
suggestionEngine
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
info
(
"
Type
a
query
.
Suggestions
should
be
generated
by
the
test
engine
.
"
)
;
let
p
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
searchInSearchbar
(
"
query
"
)
;
info
(
"
Select
the
second
result
press
Alt
+
Down
to
take
us
to
the
first
one
-
off
engine
.
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
{
altKey
:
true
}
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
p
;
let
resultMethods
=
resultMethodHist
.
snapshot
(
)
;
checkHistogramResults
(
resultMethods
URLBAR_SELECTED_RESULT_METHODS
.
enterSelection
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
await
Services
.
search
.
setDefault
(
previousEngine
)
;
await
Services
.
search
.
removeEngine
(
suggestionEngine
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_oneOff_click
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
let
resultMethodHist
=
TelemetryTestUtils
.
getAndClearHistogram
(
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
info
(
"
Type
a
query
.
"
)
;
let
p
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
searchInSearchbar
(
"
query
"
)
;
info
(
"
Click
the
first
one
-
off
button
.
"
)
;
BrowserSearch
.
searchBar
.
textbox
.
popup
.
oneOffButtons
.
getSelectableButtons
(
false
)
[
0
]
.
click
(
)
;
await
p
;
let
resultMethods
=
resultMethodHist
.
snapshot
(
)
;
checkHistogramResults
(
resultMethods
URLBAR_SELECTED_RESULT_METHODS
.
click
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_suggestion_click
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
let
resultMethodHist
=
TelemetryTestUtils
.
getAndClearHistogram
(
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
let
search_hist
=
TelemetryTestUtils
.
getAndClearKeyedHistogram
(
"
SEARCH_COUNTS
"
)
;
const
url
=
getRootDirectory
(
gTestPath
)
+
"
usageTelemetrySearchSuggestions
.
xml
"
;
let
suggestionEngine
=
await
Services
.
search
.
addOpenSearchEngine
(
url
"
"
)
;
let
previousEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
suggestionEngine
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
info
(
"
Perform
a
one
-
off
search
using
the
first
engine
.
"
)
;
let
p
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
searchInSearchbar
(
"
query
"
)
;
info
(
"
Clicking
the
searchbar
suggestion
.
"
)
;
clickSearchbarSuggestion
(
"
queryfoo
"
)
;
await
p
;
const
scalars
=
TelemetryTestUtils
.
getProcessScalars
(
"
parent
"
true
false
)
;
TelemetryTestUtils
.
assertKeyedScalar
(
scalars
SCALAR_SEARCHBAR
"
search_suggestion
"
1
)
;
Assert
.
equal
(
Object
.
keys
(
scalars
[
SCALAR_SEARCHBAR
]
)
.
length
1
"
This
search
must
only
increment
one
entry
in
the
scalar
.
"
)
;
let
searchEngineId
=
"
other
-
"
+
suggestionEngine
.
name
;
TelemetryTestUtils
.
assertKeyedHistogramSum
(
search_hist
searchEngineId
+
"
.
searchbar
"
1
)
;
TelemetryTestUtils
.
assertEvents
(
[
{
object
:
"
searchbar
"
value
:
"
suggestion
"
extra
:
{
engine
:
searchEngineId
}
}
]
{
category
:
"
navigation
"
method
:
"
search
"
}
)
;
let
resultMethods
=
resultMethodHist
.
snapshot
(
)
;
checkHistogramResults
(
resultMethods
URLBAR_SELECTED_RESULT_METHODS
.
click
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
await
Services
.
search
.
setDefault
(
previousEngine
)
;
await
Services
.
search
.
removeEngine
(
suggestionEngine
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
async
function
test_suggestion_enterSelection
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
let
resultMethodHist
=
TelemetryTestUtils
.
getAndClearHistogram
(
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
const
url
=
getRootDirectory
(
gTestPath
)
+
"
usageTelemetrySearchSuggestions
.
xml
"
;
let
suggestionEngine
=
await
Services
.
search
.
addOpenSearchEngine
(
url
"
"
)
;
let
previousEngine
=
await
Services
.
search
.
getDefault
(
)
;
await
Services
.
search
.
setDefault
(
suggestionEngine
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
info
(
"
Type
a
query
.
Suggestions
should
be
generated
by
the
test
engine
.
"
)
;
let
p
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
searchInSearchbar
(
"
query
"
)
;
info
(
"
Select
the
second
result
and
press
Return
.
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_ArrowDown
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Enter
"
)
;
await
p
;
let
resultMethods
=
resultMethodHist
.
snapshot
(
)
;
checkHistogramResults
(
resultMethods
URLBAR_SELECTED_RESULT_METHODS
.
enterSelection
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
)
;
await
Services
.
search
.
setDefault
(
previousEngine
)
;
await
Services
.
search
.
removeEngine
(
suggestionEngine
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
