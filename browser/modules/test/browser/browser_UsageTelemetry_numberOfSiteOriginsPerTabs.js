"
use
strict
"
;
const
TEST_ROOT
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
mochi
.
test
:
8888
"
)
;
function
assertHistograms
(
histograms
expected
message
)
{
for
(
let
i
=
0
;
i
<
histograms
.
length
;
i
+
+
)
{
const
[
name
histogram
]
=
histograms
[
i
]
;
const
actual
=
histogram
.
snapshot
(
)
.
values
;
const
expectedValues
=
i
<
expected
.
length
?
expected
[
i
]
:
{
}
;
Assert
.
deepEqual
(
expectedValues
actual
{
name
}
-
{
message
}
)
;
}
}
async
function
loadAndWaitForStop
(
tab
uri
)
{
BrowserUsageTelemetry
.
_lastRecordSiteOriginsPerLoadedTabs
=
0
;
await
Promise
.
all
(
[
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
uri
)
BrowserTestUtils
.
browserStopped
(
tab
.
linkedBrowser
uri
)
]
)
;
await
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
;
await
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
;
}
async
function
openNewForegroundTab
(
uri
)
{
BrowserUsageTelemetry
.
_lastRecordSiteOriginsPerLoadedTabs
=
0
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
uri
waitForStateStop
:
true
}
)
;
await
new
Promise
(
resolve
=
>
executeSoon
(
resolve
)
)
;
return
tab
;
}
add_task
(
async
function
test_siteOriginsPerLoadedTabsHistogram
(
)
{
const
histograms
=
BrowserUsageTelemetry
.
_siteOriginHistogramIds
.
map
(
(
[
name
]
)
=
>
[
name
TelemetryTestUtils
.
getAndClearHistogram
(
name
)
]
)
;
assertHistograms
(
histograms
[
]
"
initial
"
)
;
dump
(
"
*
*
*
*
*
*
load
example
.
com
(
1
)
\
n
"
)
;
await
loadAndWaitForStop
(
gBrowser
.
selectedTab
"
http
:
/
/
example
.
com
/
"
)
;
assertHistograms
(
histograms
[
{
75
:
0
88
:
1
103
:
0
}
]
"
navigate
to
https
:
/
/
example
.
com
"
)
;
let
tabs
=
[
await
openNewForegroundTab
(
"
http
:
/
/
example
.
com
/
"
)
]
;
assertHistograms
(
histograms
[
{
75
:
0
88
:
1
103
:
0
}
{
40
:
0
47
:
1
55
:
0
}
]
"
opening
a
new
tab
containing
to
https
:
/
/
example
.
com
"
)
;
tabs
.
push
(
await
openNewForegroundTab
(
"
http
:
/
/
example
.
com
/
"
)
await
openNewForegroundTab
(
"
http
:
/
/
example
.
com
/
"
)
await
openNewForegroundTab
(
"
http
:
/
/
example
.
com
/
"
)
)
;
assertHistograms
(
histograms
[
{
75
:
0
88
:
1
103
:
0
}
{
21
:
0
25
:
1
29
:
1
47
:
1
55
:
0
}
{
15
:
0
18
:
1
21
:
0
}
]
"
open
a
three
new
tabs
containing
https
:
/
/
example
.
com
"
)
;
for
(
const
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
tabs
=
[
]
;
await
loadAndWaitForStop
(
gBrowser
.
selectedTab
{
TEST_ROOT
}
/
multiple_iframes
.
html
)
;
assertHistograms
(
histograms
[
{
75
:
0
88
:
1
907
:
1
1059
:
0
}
{
21
:
0
25
:
1
29
:
1
47
:
1
55
:
0
}
{
15
:
0
18
:
1
21
:
0
}
]
"
navigate
to
a
new
tab
containing
multiple
origins
"
)
;
tabs
.
push
(
await
openNewForegroundTab
(
{
TEST_ROOT
}
/
multiple_iframes
.
html
)
)
;
assertHistograms
(
histograms
[
{
75
:
0
88
:
1
907
:
1
1059
:
0
}
{
21
:
0
25
:
1
29
:
1
47
:
1
487
:
1
569
:
0
}
{
15
:
0
18
:
1
21
:
0
}
]
"
navigate
to
a
new
tab
containing
multiple
origins
"
)
;
tabs
.
push
(
await
openNewForegroundTab
(
{
TEST_ROOT
}
/
multiple_iframes
.
html
)
)
;
assertHistograms
(
histograms
[
{
75
:
0
88
:
1
907
:
1
1059
:
0
}
{
21
:
0
25
:
1
29
:
1
47
:
1
306
:
1
487
:
1
569
:
0
}
{
15
:
0
18
:
1
21
:
0
}
]
"
navigate
to
a
new
tab
containing
multiple
origins
"
)
;
for
(
const
tab
of
tabs
)
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
}
)
;
