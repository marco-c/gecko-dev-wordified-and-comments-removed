"
use
strict
"
;
const
SCALAR_URLBAR
=
"
browser
.
engagement
.
navigation
.
urlbar
"
;
const
SUGGEST_URLBAR_PREF
=
"
browser
.
urlbar
.
suggest
.
searches
"
;
const
SUGGESTION_ENGINE_NAME
=
"
browser_UsageTelemetry
usageTelemetrySearchSuggestions
.
xml
"
;
const
ONEOFF_URLBAR_PREF
=
"
browser
.
urlbar
.
oneOffSearches
"
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
URLBAR_SELECTED_RESULT_TYPES
"
"
resource
:
/
/
/
modules
/
BrowserUsageTelemetry
.
jsm
"
)
;
function
checkHistogramResults
(
resultIndexes
expected
histogram
)
{
for
(
let
i
=
0
;
i
<
resultIndexes
.
counts
.
length
;
i
+
+
)
{
if
(
i
=
=
expected
)
{
Assert
.
equal
(
resultIndexes
.
counts
[
i
]
1
expected
counts
should
match
for
{
histogram
}
index
{
i
}
)
;
}
else
{
Assert
.
equal
(
resultIndexes
.
counts
[
i
]
0
unexpected
counts
should
be
zero
for
{
histogram
}
index
{
i
}
)
;
}
}
}
let
searchInAwesomebar
=
Task
.
async
(
function
*
(
inputText
win
=
window
)
{
yield
new
Promise
(
r
=
>
waitForFocus
(
r
win
)
)
;
win
.
gURLBar
.
focus
(
)
;
win
.
gURLBar
.
value
=
inputText
;
win
.
gURLBar
.
controller
.
startSearch
(
inputText
)
;
yield
BrowserTestUtils
.
waitForEvent
(
win
.
gURLBar
.
popup
"
popupshown
"
)
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
win
.
gURLBar
.
controller
.
searchStatus
>
=
Ci
.
nsIAutoCompleteController
.
STATUS_COMPLETE_NO_MATCH
)
;
}
)
;
function
clickURLBarSuggestion
(
entryName
)
{
const
expectedSuggestionName
=
entryName
+
"
"
+
SUGGESTION_ENGINE_NAME
+
"
Search
"
;
for
(
let
child
of
gURLBar
.
popup
.
richlistbox
.
children
)
{
if
(
child
.
label
=
=
=
expectedSuggestionName
)
{
child
.
click
(
)
;
return
;
}
}
}
add_task
(
function
*
setup
(
)
{
Services
.
search
.
addEngineWithDetails
(
"
MozSearch
"
"
"
"
mozalias
"
"
"
"
GET
"
"
http
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
)
;
let
engine
=
Services
.
search
.
getEngineByName
(
"
MozSearch
"
)
;
let
originalEngine
=
Services
.
search
.
currentEngine
;
Services
.
search
.
currentEngine
=
engine
;
Services
.
search
.
moveEngine
(
engine
0
)
;
Services
.
prefs
.
setBoolPref
(
SUGGEST_URLBAR_PREF
true
)
;
Services
.
prefs
.
setBoolPref
(
ONEOFF_URLBAR_PREF
true
)
;
yield
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
toolkit
.
telemetry
.
enabled
"
true
]
]
}
)
;
let
oldCanRecord
=
Services
.
telemetry
.
canRecordExtended
;
Services
.
telemetry
.
canRecordExtended
=
true
;
Services
.
telemetry
.
setEventRecordingEnabled
(
"
navigation
"
true
)
;
registerCleanupFunction
(
function
*
(
)
{
Services
.
telemetry
.
canRecordExtended
=
oldCanRecord
;
Services
.
search
.
currentEngine
=
originalEngine
;
Services
.
search
.
removeEngine
(
engine
)
;
Services
.
prefs
.
clearUserPref
(
SUGGEST_URLBAR_PREF
)
;
Services
.
prefs
.
clearUserPref
(
ONEOFF_URLBAR_PREF
)
;
yield
PlacesTestUtils
.
clearHistory
(
)
;
Services
.
telemetry
.
setEventRecordingEnabled
(
"
navigation
"
false
)
;
}
)
;
}
)
;
add_task
(
function
*
test_simpleQuery
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
let
resultTypeHist
=
Services
.
telemetry
.
getHistogramById
(
"
FX_URLBAR_SELECTED_RESULT_TYPE
"
)
;
resultTypeHist
.
clear
(
)
;
let
search_hist
=
getSearchCountsHistogram
(
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
info
(
"
Simulate
entering
a
simple
search
.
"
)
;
let
p
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
yield
searchInAwesomebar
(
"
simple
query
"
)
;
EventUtils
.
sendKey
(
"
return
"
)
;
yield
p
;
const
scalars
=
getParentProcessScalars
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
true
false
)
;
checkKeyedScalar
(
scalars
SCALAR_URLBAR
"
search_enter
"
1
)
;
Assert
.
equal
(
Object
.
keys
(
scalars
[
SCALAR_URLBAR
]
)
.
length
1
"
This
search
must
only
increment
one
entry
in
the
scalar
.
"
)
;
checkKeyedHistogram
(
search_hist
"
other
-
MozSearch
.
urlbar
"
1
)
;
let
events
=
Services
.
telemetry
.
snapshotBuiltinEvents
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
false
)
;
events
=
(
events
.
default
|
|
[
]
)
.
filter
(
e
=
>
e
[
1
]
=
=
"
navigation
"
&
&
e
[
2
]
=
=
"
search
"
)
;
checkEvents
(
events
[
[
"
navigation
"
"
search
"
"
urlbar
"
"
enter
"
{
engine
:
"
other
-
MozSearch
"
}
]
]
)
;
let
resultTypes
=
resultTypeHist
.
snapshot
(
)
;
checkHistogramResults
(
resultTypes
URLBAR_SELECTED_RESULT_TYPES
.
searchengine
"
FX_URLBAR_SELECTED_RESULT_TYPE
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
function
*
test_searchAlias
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
let
resultTypeHist
=
Services
.
telemetry
.
getHistogramById
(
"
FX_URLBAR_SELECTED_RESULT_TYPE
"
)
;
resultTypeHist
.
clear
(
)
;
let
search_hist
=
getSearchCountsHistogram
(
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
info
(
"
Search
using
a
search
alias
.
"
)
;
let
p
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
yield
searchInAwesomebar
(
"
mozalias
query
"
)
;
EventUtils
.
sendKey
(
"
return
"
)
;
yield
p
;
const
scalars
=
getParentProcessScalars
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
true
false
)
;
checkKeyedScalar
(
scalars
SCALAR_URLBAR
"
search_alias
"
1
)
;
Assert
.
equal
(
Object
.
keys
(
scalars
[
SCALAR_URLBAR
]
)
.
length
1
"
This
search
must
only
increment
one
entry
in
the
scalar
.
"
)
;
checkKeyedHistogram
(
search_hist
"
other
-
MozSearch
.
urlbar
"
1
)
;
let
events
=
Services
.
telemetry
.
snapshotBuiltinEvents
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
false
)
;
events
=
(
events
.
default
|
|
[
]
)
.
filter
(
e
=
>
e
[
1
]
=
=
"
navigation
"
&
&
e
[
2
]
=
=
"
search
"
)
;
checkEvents
(
events
[
[
"
navigation
"
"
search
"
"
urlbar
"
"
alias
"
{
engine
:
"
other
-
MozSearch
"
}
]
]
)
;
let
resultTypes
=
resultTypeHist
.
snapshot
(
)
;
checkHistogramResults
(
resultTypes
URLBAR_SELECTED_RESULT_TYPES
.
searchengine
"
FX_URLBAR_SELECTED_RESULT_TYPE
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
function
*
test_oneOff
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
let
resultTypeHist
=
Services
.
telemetry
.
getHistogramById
(
"
FX_URLBAR_SELECTED_RESULT_TYPE
"
)
;
resultTypeHist
.
clear
(
)
;
let
search_hist
=
getSearchCountsHistogram
(
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
info
(
"
Perform
a
one
-
off
search
using
the
first
engine
.
"
)
;
let
p
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
yield
searchInAwesomebar
(
"
query
"
)
;
info
(
"
Pressing
Alt
+
Down
to
take
us
to
the
first
one
-
off
engine
.
"
)
;
EventUtils
.
synthesizeKey
(
"
VK_DOWN
"
{
altKey
:
true
}
)
;
EventUtils
.
sendKey
(
"
return
"
)
;
yield
p
;
const
scalars
=
getParentProcessScalars
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
true
false
)
;
checkKeyedScalar
(
scalars
SCALAR_URLBAR
"
search_oneoff
"
1
)
;
Assert
.
equal
(
Object
.
keys
(
scalars
[
SCALAR_URLBAR
]
)
.
length
1
"
This
search
must
only
increment
one
entry
in
the
scalar
.
"
)
;
checkKeyedHistogram
(
search_hist
"
other
-
MozSearch
.
urlbar
"
1
)
;
let
events
=
Services
.
telemetry
.
snapshotBuiltinEvents
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
false
)
;
events
=
(
events
.
default
|
|
[
]
)
.
filter
(
e
=
>
e
[
1
]
=
=
"
navigation
"
&
&
e
[
2
]
=
=
"
search
"
)
;
checkEvents
(
events
[
[
"
navigation
"
"
search
"
"
urlbar
"
"
oneoff
"
{
engine
:
"
other
-
MozSearch
"
}
]
]
)
;
let
resultTypes
=
resultTypeHist
.
snapshot
(
)
;
checkHistogramResults
(
resultTypes
URLBAR_SELECTED_RESULT_TYPES
.
searchengine
"
FX_URLBAR_SELECTED_RESULT_TYPE
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
add_task
(
function
*
test_suggestion
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
let
resultTypeHist
=
Services
.
telemetry
.
getHistogramById
(
"
FX_URLBAR_SELECTED_RESULT_TYPE
"
)
;
resultTypeHist
.
clear
(
)
;
let
search_hist
=
getSearchCountsHistogram
(
)
;
const
url
=
getRootDirectory
(
gTestPath
)
+
"
usageTelemetrySearchSuggestions
.
xml
"
;
let
suggestionEngine
=
yield
new
Promise
(
(
resolve
reject
)
=
>
{
Services
.
search
.
addEngine
(
url
null
"
"
false
{
onSuccess
(
engine
)
{
resolve
(
engine
)
}
onError
(
)
{
reject
(
)
}
}
)
;
}
)
;
let
previousEngine
=
Services
.
search
.
currentEngine
;
Services
.
search
.
currentEngine
=
suggestionEngine
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
;
info
(
"
Perform
a
one
-
off
search
using
the
first
engine
.
"
)
;
let
p
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
yield
searchInAwesomebar
(
"
query
"
)
;
info
(
"
Clicking
the
urlbar
suggestion
.
"
)
;
clickURLBarSuggestion
(
"
queryfoo
"
)
;
yield
p
;
const
scalars
=
getParentProcessScalars
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
true
false
)
;
checkKeyedScalar
(
scalars
SCALAR_URLBAR
"
search_suggestion
"
1
)
;
Assert
.
equal
(
Object
.
keys
(
scalars
[
SCALAR_URLBAR
]
)
.
length
1
"
This
search
must
only
increment
one
entry
in
the
scalar
.
"
)
;
let
searchEngineId
=
"
other
-
"
+
suggestionEngine
.
name
;
checkKeyedHistogram
(
search_hist
searchEngineId
+
"
.
urlbar
"
1
)
;
let
events
=
Services
.
telemetry
.
snapshotBuiltinEvents
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
false
)
;
events
=
(
events
.
default
|
|
[
]
)
.
filter
(
e
=
>
e
[
1
]
=
=
"
navigation
"
&
&
e
[
2
]
=
=
"
search
"
)
;
checkEvents
(
events
[
[
"
navigation
"
"
search
"
"
urlbar
"
"
suggestion
"
{
engine
:
searchEngineId
}
]
]
)
;
let
resultTypes
=
resultTypeHist
.
snapshot
(
)
;
checkHistogramResults
(
resultTypes
URLBAR_SELECTED_RESULT_TYPES
.
searchsuggestion
"
FX_URLBAR_SELECTED_RESULT_TYPE
"
)
;
Services
.
search
.
currentEngine
=
previousEngine
;
Services
.
search
.
removeEngine
(
suggestionEngine
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
