Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PlacesTestUtils
"
"
resource
:
/
/
testing
-
common
/
PlacesTestUtils
.
jsm
"
)
;
const
SINGLE_TRY_TIMEOUT
=
100
;
const
NUMBER_OF_TRIES
=
30
;
function
waitForConditionPromise
(
condition
timeoutMsg
tryCount
=
NUMBER_OF_TRIES
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
tries
=
0
;
function
checkCondition
(
)
{
if
(
tries
>
=
tryCount
)
{
reject
(
timeoutMsg
)
;
}
var
conditionPassed
;
try
{
conditionPassed
=
condition
(
)
;
}
catch
(
e
)
{
return
reject
(
e
)
;
}
if
(
conditionPassed
)
{
return
resolve
(
)
;
}
tries
+
+
;
setTimeout
(
checkCondition
SINGLE_TRY_TIMEOUT
)
;
return
undefined
;
}
setTimeout
(
checkCondition
SINGLE_TRY_TIMEOUT
)
;
}
)
;
}
function
waitForCondition
(
condition
nextTest
errorMsg
)
{
waitForConditionPromise
(
condition
errorMsg
)
.
then
(
nextTest
(
reason
)
=
>
{
ok
(
false
reason
+
(
reason
.
stack
?
"
\
n
"
+
reason
.
stack
:
"
"
)
)
;
}
)
;
}
function
checkKeyedScalar
(
scalars
scalarName
key
expectedValue
)
{
Assert
.
ok
(
scalarName
in
scalars
scalarName
+
"
must
be
recorded
.
"
)
;
Assert
.
ok
(
key
in
scalars
[
scalarName
]
scalarName
+
"
must
contain
the
'
"
+
key
+
"
'
key
.
"
)
;
Assert
.
ok
(
scalars
[
scalarName
]
[
key
]
expectedValue
scalarName
+
"
[
'
"
+
key
+
"
'
]
must
contain
the
expected
value
"
)
;
}
let
typeInSearchField
=
async
function
(
browser
text
fieldName
)
{
await
ContentTask
.
spawn
(
browser
[
fieldName
text
]
async
function
(
[
contentFieldName
contentText
]
)
{
let
searchInput
=
content
.
document
.
getElementById
(
contentFieldName
)
;
searchInput
.
focus
(
)
;
searchInput
.
value
=
contentText
;
}
)
;
}
;
function
getSearchCountsHistogram
(
)
{
let
search_hist
=
Services
.
telemetry
.
getKeyedHistogramById
(
"
SEARCH_COUNTS
"
)
;
search_hist
.
clear
(
)
;
return
search_hist
;
}
function
checkKeyedHistogram
(
h
key
expectedValue
)
{
const
snapshot
=
h
.
snapshot
(
)
;
Assert
.
ok
(
key
in
snapshot
The
histogram
must
contain
{
key
}
.
)
;
Assert
.
equal
(
snapshot
[
key
]
.
sum
expectedValue
The
key
{
key
}
must
contain
{
expectedValue
}
.
)
;
}
function
getParentProcessScalars
(
aChannel
aKeyed
=
false
aClear
=
false
)
{
const
scalars
=
aKeyed
?
Services
.
telemetry
.
snapshotKeyedScalars
(
aChannel
aClear
)
[
"
parent
"
]
:
Services
.
telemetry
.
snapshotScalars
(
aChannel
aClear
)
[
"
parent
"
]
;
return
scalars
|
|
{
}
;
}
function
checkEvents
(
events
expectedEvents
)
{
if
(
!
Services
.
telemetry
.
canRecordExtended
)
{
return
;
}
Assert
.
equal
(
events
.
length
expectedEvents
.
length
"
Should
have
matching
amount
of
events
.
"
)
;
events
=
events
.
map
(
e
=
>
e
.
slice
(
1
)
)
;
for
(
let
i
=
0
;
i
<
events
.
length
;
+
+
i
)
{
Assert
.
deepEqual
(
events
[
i
]
expectedEvents
[
i
]
"
Events
should
match
.
"
)
;
}
}
function
makeMockPermissionRequest
(
browser
)
{
let
result
=
{
types
:
null
principal
:
browser
.
contentPrincipal
requester
:
null
_cancelled
:
false
cancel
(
)
{
this
.
_cancelled
=
true
;
}
_allowed
:
false
allow
(
)
{
this
.
_allowed
=
true
;
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIContentPermissionRequest
]
)
}
;
if
(
browser
.
isRemoteBrowser
)
{
result
.
element
=
browser
;
}
else
{
result
.
window
=
browser
.
contentWindow
;
}
return
result
;
}
function
clickMainAction
(
)
{
let
removePromise
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphidden
"
)
;
let
popupNotification
=
getPopupNotificationNode
(
)
;
popupNotification
.
button
.
click
(
)
;
return
removePromise
;
}
function
clickSecondaryAction
(
actionIndex
)
{
let
removePromise
=
BrowserTestUtils
.
waitForEvent
(
PopupNotifications
.
panel
"
popuphidden
"
)
;
let
popupNotification
=
getPopupNotificationNode
(
)
;
if
(
!
actionIndex
)
{
popupNotification
.
secondaryButton
.
click
(
)
;
return
removePromise
;
}
return
(
async
function
(
)
{
let
dropdownPromise
=
BrowserTestUtils
.
waitForEvent
(
popupNotification
.
menupopup
"
popupshown
"
)
;
await
EventUtils
.
synthesizeMouseAtCenter
(
popupNotification
.
menubutton
{
}
)
;
await
dropdownPromise
;
let
actionMenuItem
=
popupNotification
.
querySelectorAll
(
"
menuitem
"
)
[
actionIndex
-
1
]
;
await
EventUtils
.
synthesizeMouseAtCenter
(
actionMenuItem
{
}
)
;
await
removePromise
;
}
)
(
)
;
}
function
getPopupNotificationNode
(
)
{
let
popupNotifications
=
PopupNotifications
.
panel
.
childNodes
;
Assert
.
equal
(
popupNotifications
.
length
1
"
Should
be
showing
a
<
xul
:
popupnotification
>
"
)
;
return
popupNotifications
[
0
]
;
}
