"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
SitePermissions
.
jsm
"
this
)
;
async
function
checkPermissionCombinations
(
combinations
)
{
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
"
https
:
/
/
example
.
com
"
)
;
await
BrowserTestUtils
.
withNewTab
(
principal
.
URI
.
spec
function
(
browser
)
{
let
id
=
"
geo
"
;
for
(
let
{
reverse
states
result
}
of
combinations
)
{
let
loop
=
(
)
=
>
{
for
(
let
[
state
scope
]
of
states
)
{
SitePermissions
.
setForPrincipal
(
principal
id
state
scope
browser
)
;
}
Assert
.
deepEqual
(
SitePermissions
.
getForPrincipal
(
principal
id
browser
)
result
)
;
SitePermissions
.
removeFromPrincipal
(
principal
id
browser
)
;
}
;
loop
(
)
;
if
(
reverse
)
{
states
.
reverse
(
)
;
loop
(
)
;
}
}
}
)
;
}
add_task
(
async
function
testDefaultScope
(
)
{
await
checkPermissionCombinations
(
[
{
states
:
[
[
SitePermissions
.
ALLOW
null
]
]
result
:
{
state
:
SitePermissions
.
ALLOW
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
}
]
)
;
}
)
;
add_task
(
async
function
testScopeOverrides
(
)
{
await
checkPermissionCombinations
(
[
{
states
:
[
[
SitePermissions
.
ALLOW
SitePermissions
.
SCOPE_PERSISTENT
]
[
SitePermissions
.
BLOCK
SitePermissions
.
SCOPE_SESSION
]
]
result
:
{
state
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_SESSION
}
}
{
states
:
[
[
SitePermissions
.
BLOCK
SitePermissions
.
SCOPE_SESSION
]
[
SitePermissions
.
ALLOW
SitePermissions
.
SCOPE_PERSISTENT
]
]
result
:
{
state
:
SitePermissions
.
ALLOW
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
}
{
reverse
:
true
states
:
[
[
SitePermissions
.
BLOCK
SitePermissions
.
SCOPE_TEMPORARY
]
[
SitePermissions
.
ALLOW
SitePermissions
.
SCOPE_SESSION
]
]
result
:
{
state
:
SitePermissions
.
ALLOW
scope
:
SitePermissions
.
SCOPE_SESSION
}
}
{
reverse
:
true
states
:
[
[
SitePermissions
.
BLOCK
SitePermissions
.
SCOPE_TEMPORARY
]
[
SitePermissions
.
ALLOW
SitePermissions
.
SCOPE_PERSISTENT
]
]
result
:
{
state
:
SitePermissions
.
ALLOW
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
}
]
)
;
}
)
;
add_task
(
async
function
testClearTempPermission
(
)
{
await
checkPermissionCombinations
(
[
{
states
:
[
[
SitePermissions
.
BLOCK
SitePermissions
.
SCOPE_TEMPORARY
]
[
SitePermissions
.
ALLOW
SitePermissions
.
SCOPE_PERSISTENT
]
[
SitePermissions
.
UNKNOWN
SitePermissions
.
SCOPE_TEMPORARY
]
]
result
:
{
state
:
SitePermissions
.
UNKNOWN
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
}
]
)
;
}
)
;
add_task
(
async
function
testStateOverride
(
)
{
await
checkPermissionCombinations
(
[
{
states
:
[
[
SitePermissions
.
ALLOW
SitePermissions
.
SCOPE_PERSISTENT
]
[
SitePermissions
.
BLOCK
SitePermissions
.
SCOPE_PERSISTENT
]
]
result
:
{
state
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
}
{
states
:
[
[
SitePermissions
.
BLOCK
SitePermissions
.
SCOPE_PERSISTENT
]
[
SitePermissions
.
ALLOW
SitePermissions
.
SCOPE_PERSISTENT
]
]
result
:
{
state
:
SitePermissions
.
ALLOW
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
}
]
)
;
}
)
;
