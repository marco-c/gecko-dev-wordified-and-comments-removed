"
use
strict
"
;
add_task
(
async
function
init
(
)
{
await
initPageActionsTest
(
)
;
}
)
;
add_task
(
async
function
urlbarOrderNewWindow
(
)
{
let
actions
=
[
0
1
2
]
.
map
(
i
=
>
{
return
PageActions
.
addAction
(
new
PageActions
.
Action
(
{
id
:
test
-
urlbarOrderNewWindow
-
{
i
}
title
:
Test
urlbarOrderNewWindow
{
i
}
pinnedToUrlbar
:
true
}
)
)
;
}
)
;
Assert
.
deepEqual
(
PageActions
.
_persistedActions
.
idsInUrlbar
.
slice
(
PageActions
.
_persistedActions
.
idsInUrlbar
.
length
-
(
actions
.
length
+
1
)
)
actions
.
map
(
a
=
>
a
.
id
)
.
concat
(
[
PageActions
.
ACTION_ID_BOOKMARK
]
)
"
PageActions
.
_persistedActions
.
idsInUrlbar
has
new
actions
inserted
"
)
;
Assert
.
deepEqual
(
PageActions
.
actionsInUrlbar
(
window
)
.
slice
(
PageActions
.
actionsInUrlbar
(
window
)
.
length
-
(
actions
.
length
+
1
)
)
.
map
(
a
=
>
a
.
id
)
actions
.
map
(
a
=
>
a
.
id
)
.
concat
(
[
PageActions
.
ACTION_ID_BOOKMARK
]
)
"
PageActions
.
actionsInUrlbar
has
new
actions
inserted
"
)
;
PageActions
.
_persistedActions
.
idsInUrlbar
.
splice
(
PageActions
.
_persistedActions
.
idsInUrlbar
.
length
-
(
actions
.
length
+
1
)
actions
.
length
)
;
for
(
let
i
=
0
;
i
<
actions
.
length
;
i
+
+
)
{
PageActions
.
_persistedActions
.
idsInUrlbar
.
splice
(
i
0
actions
[
i
]
.
id
)
;
}
let
ids
=
PageActions
.
_persistedActions
.
idsInUrlbar
.
slice
(
)
;
Assert
.
deepEqual
(
ids
.
slice
(
0
actions
.
length
)
actions
.
map
(
a
=
>
a
.
id
)
"
PageActions
.
_persistedActions
.
idsInUrlbar
now
has
new
actions
at
front
"
)
;
ids
=
ids
.
filter
(
id
=
>
PageActions
.
actionForID
(
id
)
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
actualUrlbarNodeIDs
=
[
]
;
for
(
let
node
=
win
.
BrowserPageActions
.
mainButtonNode
.
nextElementSibling
;
node
;
node
=
node
.
nextElementSibling
)
{
actualUrlbarNodeIDs
.
push
(
node
.
id
)
;
}
Assert
.
deepEqual
(
actualUrlbarNodeIDs
ids
.
map
(
id
=
>
win
.
BrowserPageActions
.
urlbarButtonNodeIDForActionID
(
id
)
)
"
Expected
actions
in
new
window
'
s
urlbar
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
for
(
let
action
of
actions
)
{
action
.
remove
(
)
;
}
}
)
;
add_task
(
async
function
migrate1
(
)
{
let
actionId
=
"
test
-
migrate1
"
;
PageActions
.
addAction
(
new
PageActions
.
Action
(
{
id
:
actionId
title
:
"
Test
migrate1
"
pinnedToUrlbar
:
true
}
)
)
;
let
ids
=
[
PageActions
.
ACTION_ID_BOOKMARK
actionId
]
;
let
persisted
=
ids
.
reduce
(
(
memo
id
)
=
>
{
memo
.
ids
[
id
]
=
true
;
memo
.
idsInUrlbar
.
push
(
id
)
;
return
memo
;
}
{
ids
:
{
}
idsInUrlbar
:
[
]
}
)
;
Services
.
prefs
.
setStringPref
(
PageActions
.
PREF_PERSISTED_ACTIONS
JSON
.
stringify
(
persisted
)
)
;
PageActions
.
_loadPersistedActions
(
)
;
Assert
.
equal
(
PageActions
.
_persistedActions
.
version
1
"
Correct
version
"
)
;
let
orderedIDs
=
[
actionId
PageActions
.
ACTION_ID_BOOKMARK
]
;
Assert
.
deepEqual
(
PageActions
.
_persistedActions
.
idsInUrlbar
orderedIDs
"
PageActions
.
_persistedActions
.
idsInUrlbar
has
right
order
"
)
;
Assert
.
deepEqual
(
PageActions
.
actionsInUrlbar
(
window
)
.
map
(
a
=
>
a
.
id
)
orderedIDs
"
PageActions
.
actionsInUrlbar
has
right
order
"
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
:
win
.
gBrowser
url
:
"
http
:
/
/
example
.
com
/
"
}
)
;
let
actualUrlbarNodeIDs
=
[
]
;
for
(
let
node
=
win
.
BrowserPageActions
.
mainButtonNode
.
nextElementSibling
;
node
;
node
=
node
.
nextElementSibling
)
{
actualUrlbarNodeIDs
.
push
(
node
.
id
)
;
}
Assert
.
deepEqual
(
actualUrlbarNodeIDs
orderedIDs
.
map
(
id
=
>
win
.
BrowserPageActions
.
urlbarButtonNodeIDForActionID
(
id
)
)
"
Expected
actions
in
new
window
'
s
urlbar
"
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
Services
.
prefs
.
clearUserPref
(
PageActions
.
PREF_PERSISTED_ACTIONS
)
;
PageActions
.
actionForID
(
actionId
)
.
remove
(
)
;
}
)
;
add_task
(
async
function
perWindowState
(
)
{
let
title
=
"
Test
perWindowState
"
;
let
action
=
PageActions
.
addAction
(
new
PageActions
.
Action
(
{
iconURL
:
"
chrome
:
/
/
browser
/
skin
/
mail
.
svg
"
id
:
"
test
-
perWindowState
"
pinnedToUrlbar
:
true
title
}
)
)
;
let
actionsInUrlbar
=
PageActions
.
actionsInUrlbar
(
window
)
;
let
newWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
:
newWindow
.
gBrowser
url
:
"
http
:
/
/
example
.
com
/
"
}
)
;
let
newGlobalTitle
=
title
+
"
new
title
"
;
action
.
setTitle
(
newGlobalTitle
)
;
Assert
.
equal
(
action
.
getTitle
(
)
newGlobalTitle
"
Title
:
global
"
)
;
Assert
.
equal
(
action
.
getTitle
(
window
)
newGlobalTitle
"
Title
:
old
window
"
)
;
Assert
.
equal
(
action
.
getTitle
(
newWindow
)
newGlobalTitle
"
Title
:
new
window
"
)
;
document
.
getElementById
(
"
pageActionButton
"
)
.
click
(
)
;
await
BrowserTestUtils
.
waitForEvent
(
document
"
popupshowing
"
true
)
;
newWindow
.
document
.
getElementById
(
"
pageActionButton
"
)
.
click
(
)
;
await
BrowserTestUtils
.
waitForEvent
(
newWindow
.
document
"
popupshowing
"
true
)
;
let
panelButtonID
=
BrowserPageActions
.
panelButtonNodeIDForActionID
(
action
.
id
)
;
for
(
let
win
of
[
window
newWindow
]
)
{
win
.
BrowserPageActions
.
placeLazyActionsInPanel
(
)
;
let
panelButtonNode
=
win
.
document
.
getElementById
(
panelButtonID
)
;
Assert
.
equal
(
panelButtonNode
.
getAttribute
(
"
label
"
)
newGlobalTitle
"
Panel
button
label
should
be
global
title
"
)
;
}
let
newPerWinTitle
=
title
+
"
new
title
in
new
window
"
;
action
.
setTitle
(
newPerWinTitle
newWindow
)
;
Assert
.
equal
(
action
.
getTitle
(
)
newGlobalTitle
"
Title
:
global
should
remain
same
"
)
;
Assert
.
equal
(
action
.
getTitle
(
window
)
newGlobalTitle
"
Title
:
old
window
should
remain
same
"
)
;
Assert
.
equal
(
action
.
getTitle
(
newWindow
)
newPerWinTitle
"
Title
:
new
window
should
be
new
"
)
;
let
panelButtonNode1
=
document
.
getElementById
(
panelButtonID
)
;
Assert
.
equal
(
panelButtonNode1
.
getAttribute
(
"
label
"
)
newGlobalTitle
"
Panel
button
label
in
old
window
"
)
;
let
panelButtonNode2
=
newWindow
.
document
.
getElementById
(
panelButtonID
)
;
Assert
.
equal
(
panelButtonNode2
.
getAttribute
(
"
label
"
)
newPerWinTitle
"
Panel
button
label
in
new
window
"
)
;
action
.
setDisabled
(
true
newWindow
)
;
Assert
.
equal
(
action
.
getDisabled
(
)
false
"
Disabled
:
global
should
remain
false
"
)
;
Assert
.
equal
(
action
.
getDisabled
(
window
)
false
"
Disabled
:
old
window
should
remain
false
"
)
;
Assert
.
equal
(
action
.
getDisabled
(
newWindow
)
true
"
Disabled
:
new
window
should
be
true
"
)
;
Assert
.
deepEqual
(
PageActions
.
actionsInUrlbar
(
window
)
.
map
(
a
=
>
a
.
id
)
actionsInUrlbar
.
map
(
a
=
>
a
.
id
)
"
PageActions
.
actionsInUrlbar
:
old
window
should
have
all
actions
in
urlbar
"
)
;
Assert
.
deepEqual
(
PageActions
.
actionsInUrlbar
(
newWindow
)
.
map
(
a
=
>
a
.
id
)
actionsInUrlbar
.
map
(
a
=
>
a
.
id
)
.
filter
(
id
=
>
id
!
=
action
.
id
)
"
PageActions
.
actionsInUrlbar
:
new
window
should
have
all
actions
in
urlbar
except
the
test
action
"
)
;
let
actualUrlbarNodeIDs
=
[
]
;
for
(
let
node
=
BrowserPageActions
.
mainButtonNode
.
nextElementSibling
;
node
;
node
=
node
.
nextElementSibling
)
{
actualUrlbarNodeIDs
.
push
(
node
.
id
)
;
}
Assert
.
deepEqual
(
actualUrlbarNodeIDs
actionsInUrlbar
.
map
(
a
=
>
BrowserPageActions
.
urlbarButtonNodeIDForActionID
(
a
.
id
)
)
"
Old
window
should
have
all
nodes
in
urlbar
"
)
;
actualUrlbarNodeIDs
=
[
]
;
for
(
let
node
=
newWindow
.
BrowserPageActions
.
mainButtonNode
.
nextElementSibling
;
node
;
node
=
node
.
nextElementSibling
)
{
actualUrlbarNodeIDs
.
push
(
node
.
id
)
;
}
Assert
.
deepEqual
(
actualUrlbarNodeIDs
actionsInUrlbar
.
filter
(
a
=
>
a
.
id
!
=
action
.
id
)
.
map
(
a
=
>
BrowserPageActions
.
urlbarButtonNodeIDForActionID
(
a
.
id
)
)
"
New
window
should
have
all
nodes
in
urlbar
except
for
the
test
action
'
s
"
)
;
await
BrowserTestUtils
.
closeWindow
(
newWindow
)
;
action
.
remove
(
)
;
}
)
;
add_task
(
async
function
action_disablePrivateBrowsing
(
)
{
let
id
=
"
testWidget
"
;
let
action
=
PageActions
.
addAction
(
new
PageActions
.
Action
(
{
id
disablePrivateBrowsing
:
true
title
:
"
title
"
disabled
:
false
pinnedToUrlbar
:
true
}
)
)
;
let
url
=
"
http
:
/
/
example
.
com
/
"
;
let
privateWindow
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
privateWindow
.
gBrowser
url
true
true
)
;
Assert
.
ok
(
action
.
canShowInWindow
(
window
)
"
should
show
in
default
window
"
)
;
Assert
.
ok
(
!
action
.
canShowInWindow
(
privateWindow
)
"
should
not
show
in
private
browser
"
)
;
Assert
.
ok
(
action
.
shouldShowInUrlbar
(
window
)
"
should
show
in
default
urlbar
"
)
;
Assert
.
ok
(
!
action
.
shouldShowInUrlbar
(
privateWindow
)
"
should
not
show
in
default
urlbar
"
)
;
Assert
.
ok
(
action
.
shouldShowInPanel
(
window
)
"
should
show
in
default
urlbar
"
)
;
Assert
.
ok
(
!
action
.
shouldShowInPanel
(
privateWindow
)
"
should
not
show
in
default
urlbar
"
)
;
action
.
remove
(
)
;
privateWindow
.
close
(
)
;
}
)
;
