"
use
strict
"
;
const
{
SitePermissions
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
SitePermissions
.
jsm
"
)
;
const
EXPIRE_TIME_MS
=
100
;
const
TIMEOUT_MS
=
500
;
add_task
(
async
function
testTemporaryPermissionExpiry
(
)
{
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
privacy
.
temporary_permission_expire_time_ms
"
EXPIRE_TIME_MS
]
]
}
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
"
https
:
/
/
example
.
com
"
)
;
let
id
=
"
camera
"
;
await
BrowserTestUtils
.
withNewTab
(
principal
.
spec
async
function
(
browser
)
{
SitePermissions
.
setForPrincipal
(
principal
id
SitePermissions
.
BLOCK
SitePermissions
.
SCOPE_TEMPORARY
browser
)
;
Assert
.
deepEqual
(
SitePermissions
.
getForPrincipal
(
principal
id
browser
)
{
state
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_TEMPORARY
}
)
;
await
new
Promise
(
c
=
>
setTimeout
(
c
TIMEOUT_MS
)
)
;
Assert
.
deepEqual
(
SitePermissions
.
getForPrincipal
(
principal
id
browser
)
{
state
:
SitePermissions
.
UNKNOWN
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
)
;
}
)
;
}
)
;
