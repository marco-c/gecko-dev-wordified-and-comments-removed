const
{
TabUnloader
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
TabUnloader
.
jsm
"
)
;
const
BASE_URL
=
"
http
:
/
/
example
.
com
/
browser
/
browser
/
modules
/
test
/
browser
/
"
;
async
function
play
(
tab
)
{
let
browser
=
tab
.
linkedBrowser
;
await
ContentTask
.
spawn
(
browser
{
}
async
function
(
)
{
let
audio
=
content
.
document
.
querySelector
(
"
audio
"
)
;
await
audio
.
play
(
)
;
}
)
;
}
async
function
addTab
(
)
{
return
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
BASE_URL
+
"
dummy_page
.
html
"
waitForLoad
:
true
}
)
;
}
async
function
addAudioTab
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
BASE_URL
+
"
file_mediaPlayback
.
html
"
waitForLoad
:
true
waitForStateStop
:
true
}
)
;
await
play
(
tab
)
;
return
tab
;
}
add_task
(
async
function
test
(
)
{
let
tab0
=
gBrowser
.
tabs
[
0
]
;
let
tab1
=
await
addTab
(
)
;
let
tab2
=
await
addTab
(
)
;
let
pinnedTab
=
await
addTab
(
)
;
gBrowser
.
pinTab
(
pinnedTab
)
;
let
soundTab
=
await
addAudioTab
(
)
;
let
pinnedSoundTab
=
await
addAudioTab
(
)
;
gBrowser
.
pinTab
(
pinnedSoundTab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab2
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
pinnedTab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
soundTab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
pinnedSoundTab
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab0
)
;
ok
(
pinnedTab
.
pinned
"
tab
is
pinned
"
)
;
ok
(
pinnedSoundTab
.
soundPlaying
"
tab
is
playing
sound
"
)
;
ok
(
pinnedSoundTab
.
pinned
&
&
pinnedSoundTab
.
soundPlaying
"
tab
is
pinned
and
playing
sound
"
)
;
ok
(
tab1
.
linkedPanel
&
&
tab2
.
linkedPanel
&
&
pinnedTab
.
linkedPanel
&
&
soundTab
.
linkedPanel
&
&
pinnedSoundTab
.
linkedPanel
"
tabs
are
present
"
)
;
TabUnloader
.
observe
(
null
"
memory
-
pressure
"
"
heap
-
minimize
"
)
;
ok
(
tab1
.
linkedPanel
&
&
tab2
.
linkedPanel
&
&
pinnedTab
.
linkedPanel
&
&
soundTab
.
linkedPanel
&
&
pinnedSoundTab
.
linkedPanel
"
heap
-
minimize
memory
-
pressure
notification
did
not
unload
a
tab
"
)
;
TabUnloader
.
observe
(
null
"
memory
-
pressure
"
"
low
-
memory
"
)
;
ok
(
!
tab1
.
linkedPanel
"
low
-
memory
memory
-
pressure
notification
unloaded
the
LRU
tab
"
)
;
TabUnloader
.
observe
(
null
"
memory
-
pressure
"
"
low
-
memory
"
)
;
ok
(
!
tab2
.
linkedPanel
"
unloaded
a
second
tab
in
LRU
order
"
)
;
TabUnloader
.
observe
(
null
"
memory
-
pressure
"
"
low
-
memory
"
)
;
ok
(
!
pinnedTab
.
linkedPanel
"
unloaded
a
pinned
tab
"
)
;
TabUnloader
.
observe
(
null
"
memory
-
pressure
"
"
low
-
memory
"
)
;
ok
(
!
soundTab
.
linkedPanel
"
unloaded
a
tab
playing
sound
"
)
;
TabUnloader
.
observe
(
null
"
memory
-
pressure
"
"
low
-
memory
"
)
;
ok
(
!
pinnedSoundTab
.
linkedPanel
"
unloaded
a
pinned
tab
playing
sound
"
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab1
)
;
await
BrowserTestUtils
.
switchTab
(
gBrowser
tab0
)
;
TabUnloader
.
observe
(
null
"
memory
-
pressure
"
"
low
-
memory
-
ongoing
"
)
;
ok
(
!
tab1
.
linkedPanel
"
low
-
memory
memory
-
pressure
notification
unloaded
the
LRU
tab
"
)
;
BrowserTestUtils
.
removeTab
(
tab1
)
;
BrowserTestUtils
.
removeTab
(
tab2
)
;
BrowserTestUtils
.
removeTab
(
pinnedTab
)
;
BrowserTestUtils
.
removeTab
(
soundTab
)
;
BrowserTestUtils
.
removeTab
(
pinnedSoundTab
)
;
}
)
;
