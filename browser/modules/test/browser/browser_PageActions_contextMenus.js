"
use
strict
"
;
add_task
(
async
function
init
(
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
url
:
"
http
:
/
/
example
.
com
/
"
}
)
;
await
disableNonReleaseActions
(
)
;
registerCleanupFunction
(
async
(
)
=
>
{
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
const
addon
=
await
AddonManager
.
getAddonByID
(
"
screenshots
mozilla
.
org
"
)
;
await
addon
.
disable
(
{
allowSystemAddons
:
true
}
)
;
}
)
;
add_task
(
async
function
contextMenu
(
)
{
Services
.
telemetry
.
clearEvents
(
)
;
let
action
=
PageActions
.
addAction
(
new
PageActions
.
Action
(
{
id
:
"
test
-
contextMenu
"
title
:
"
Test
contextMenu
"
pinnedToUrlbar
:
true
}
)
)
;
await
promiseOpenPageActionPanel
(
)
;
let
panelButton
=
BrowserPageActions
.
panelButtonNodeForActionID
(
action
.
id
)
;
let
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
panelButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
contextMenuPromise
;
let
menuItems
=
collectContextMenuItems
(
)
;
Assert
.
equal
(
menuItems
.
length
4
"
Context
menu
has
4
children
"
)
;
Assert
.
equal
(
menuItems
[
0
]
.
label
"
Remove
from
Address
Bar
"
"
Context
menu
is
in
the
'
remove
'
state
"
)
;
Assert
.
equal
(
menuItems
[
1
]
.
localName
"
menuseparator
"
"
menuseparator
is
present
"
)
;
Assert
.
equal
(
menuItems
[
2
]
.
label
"
Manage
Extension
\
u2026
"
"
'
Manage
'
item
is
present
"
)
;
Assert
.
equal
(
menuItems
[
3
]
.
label
"
Remove
Extension
"
"
'
Remove
'
item
is
present
"
)
;
Assert
.
ok
(
menuItems
[
3
]
.
hidden
"
'
Remove
'
item
is
hidden
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
menuItems
[
0
]
{
}
)
;
await
contextMenuPromise
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
BrowserPageActions
.
urlbarButtonNodeForActionID
(
action
.
id
)
;
}
"
Waiting
for
urlbar
button
to
be
removed
"
)
;
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
panelButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
contextMenuPromise
;
menuItems
=
collectContextMenuItems
(
)
;
Assert
.
equal
(
menuItems
.
length
4
"
Context
menu
has
4
children
"
)
;
Assert
.
equal
(
menuItems
[
0
]
.
label
"
Add
to
Address
Bar
"
"
Context
menu
is
in
the
'
add
'
state
"
)
;
Assert
.
equal
(
menuItems
[
1
]
.
localName
"
menuseparator
"
"
menuseparator
is
present
"
)
;
Assert
.
equal
(
menuItems
[
2
]
.
label
"
Manage
Extension
\
u2026
"
"
'
Manage
'
item
is
present
"
)
;
Assert
.
equal
(
menuItems
[
3
]
.
label
"
Remove
Extension
"
"
'
Remove
'
item
is
present
"
)
;
Assert
.
ok
(
menuItems
[
3
]
.
hidden
"
'
Remove
'
item
is
hidden
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
menuItems
[
0
]
{
}
)
;
await
contextMenuPromise
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
BrowserPageActions
.
urlbarButtonNodeForActionID
(
action
.
id
)
;
}
"
Waiting
for
urlbar
button
to
be
added
back
"
)
;
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
panelButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
contextMenuPromise
;
menuItems
=
collectContextMenuItems
(
)
;
Assert
.
equal
(
menuItems
.
length
4
"
Context
menu
has
4
children
"
)
;
Assert
.
equal
(
menuItems
[
0
]
.
label
"
Remove
from
Address
Bar
"
"
Context
menu
is
in
the
'
remove
'
state
"
)
;
Assert
.
equal
(
menuItems
[
1
]
.
localName
"
menuseparator
"
"
menuseparator
is
present
"
)
;
Assert
.
equal
(
menuItems
[
2
]
.
label
"
Manage
Extension
\
u2026
"
"
'
Manage
'
item
is
present
"
)
;
Assert
.
equal
(
menuItems
[
3
]
.
label
"
Remove
Extension
"
"
'
Remove
'
item
is
present
"
)
;
Assert
.
ok
(
menuItems
[
3
]
.
hidden
"
'
Remove
'
item
is
hidden
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
)
;
let
aboutAddonsPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
addons
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
menuItems
[
2
]
{
}
)
;
let
values
=
await
Promise
.
all
(
[
aboutAddonsPromise
contextMenuPromise
]
)
;
let
aboutAddonsTab
=
values
[
0
]
;
BrowserTestUtils
.
removeTab
(
aboutAddonsTab
)
;
let
urlbarButton
=
BrowserPageActions
.
urlbarButtonNodeForActionID
(
action
.
id
)
;
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
urlbarButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
contextMenuPromise
;
menuItems
=
collectContextMenuItems
(
)
;
Assert
.
equal
(
menuItems
.
length
4
"
Context
menu
has
4
children
"
)
;
Assert
.
equal
(
menuItems
[
0
]
.
label
"
Remove
from
Address
Bar
"
"
Context
menu
is
in
the
'
remove
'
state
"
)
;
Assert
.
equal
(
menuItems
[
1
]
.
localName
"
menuseparator
"
"
menuseparator
is
present
"
)
;
Assert
.
equal
(
menuItems
[
2
]
.
label
"
Manage
Extension
\
u2026
"
"
'
Manage
'
item
is
present
"
)
;
Assert
.
equal
(
menuItems
[
3
]
.
label
"
Remove
Extension
"
"
'
Remove
'
item
is
present
"
)
;
Assert
.
ok
(
menuItems
[
3
]
.
hidden
"
'
Remove
'
item
is
hidden
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
menuItems
[
0
]
{
}
)
;
await
contextMenuPromise
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
!
BrowserPageActions
.
urlbarButtonNodeForActionID
(
action
.
id
)
;
}
"
Waiting
for
urlbar
button
to
be
removed
"
)
;
await
promiseOpenPageActionPanel
(
)
;
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
panelButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
contextMenuPromise
;
menuItems
=
collectContextMenuItems
(
)
;
Assert
.
equal
(
menuItems
.
length
4
"
Context
menu
has
4
children
"
)
;
Assert
.
equal
(
menuItems
[
0
]
.
label
"
Add
to
Address
Bar
"
"
Context
menu
is
in
the
'
add
'
state
"
)
;
Assert
.
equal
(
menuItems
[
1
]
.
localName
"
menuseparator
"
"
menuseparator
is
present
"
)
;
Assert
.
equal
(
menuItems
[
2
]
.
label
"
Manage
Extension
\
u2026
"
"
'
Manage
'
item
is
present
"
)
;
Assert
.
equal
(
menuItems
[
3
]
.
label
"
Remove
Extension
"
"
'
Remove
'
item
is
present
"
)
;
Assert
.
ok
(
menuItems
[
3
]
.
hidden
"
'
Remove
'
item
is
hidden
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
menuItems
[
0
]
{
}
)
;
await
contextMenuPromise
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
BrowserPageActions
.
urlbarButtonNodeForActionID
(
action
.
id
)
;
}
"
Waiting
for
urlbar
button
to
be
added
back
"
)
;
urlbarButton
=
BrowserPageActions
.
urlbarButtonNodeForActionID
(
action
.
id
)
;
contextMenuPromise
=
promisePanelShown
(
"
pageActionContextMenu
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
urlbarButton
{
type
:
"
contextmenu
"
button
:
2
}
)
;
await
contextMenuPromise
;
menuItems
=
collectContextMenuItems
(
)
;
Assert
.
equal
(
menuItems
.
length
4
"
Context
menu
has
4
children
"
)
;
Assert
.
equal
(
menuItems
[
0
]
.
label
"
Remove
from
Address
Bar
"
"
Context
menu
is
in
the
'
remove
'
state
"
)
;
Assert
.
equal
(
menuItems
[
1
]
.
localName
"
menuseparator
"
"
menuseparator
is
present
"
)
;
Assert
.
equal
(
menuItems
[
2
]
.
label
"
Manage
Extension
\
u2026
"
"
'
Manage
'
item
is
present
"
)
;
Assert
.
equal
(
menuItems
[
3
]
.
label
"
Remove
Extension
"
"
'
Remove
'
item
is
present
"
)
;
Assert
.
ok
(
menuItems
[
3
]
.
hidden
"
'
Remove
'
item
is
hidden
"
)
;
contextMenuPromise
=
promisePanelHidden
(
"
pageActionContextMenu
"
)
;
aboutAddonsPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
"
about
:
addons
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
menuItems
[
2
]
{
}
)
;
values
=
await
Promise
.
all
(
[
aboutAddonsPromise
contextMenuPromise
]
)
;
aboutAddonsTab
=
values
[
0
]
;
BrowserTestUtils
.
removeTab
(
aboutAddonsTab
)
;
action
.
remove
(
)
;
let
snapshot
=
Services
.
telemetry
.
snapshotEvents
(
Ci
.
nsITelemetry
.
DATASET_PRERELEASE_CHANNELS
true
)
;
ok
(
snapshot
.
parent
&
&
!
!
snapshot
.
parent
.
length
"
Got
parent
telemetry
events
in
the
snapshot
"
)
;
let
relatedEvents
=
snapshot
.
parent
.
filter
(
(
[
timestamp
category
method
]
)
=
>
category
=
=
"
addonsManager
"
&
&
method
=
=
"
action
"
)
.
map
(
relatedEvent
=
>
relatedEvent
.
slice
(
3
6
)
)
;
Assert
.
deepEqual
(
relatedEvents
[
[
"
pageAction
"
null
{
action
:
"
manage
"
}
]
[
"
pageAction
"
null
{
action
:
"
manage
"
}
]
]
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
type
:
"
mousemove
"
}
)
;
gURLBar
.
focus
(
)
;
}
)
;
add_task
(
async
function
contextMenuOnSeparator
(
)
{
await
promiseOpenPageActionPanel
(
)
;
let
separator
=
BrowserPageActions
.
panelButtonNodeForActionID
(
PageActions
.
ACTION_ID_BOOKMARK_SEPARATOR
)
;
Assert
.
ok
(
separator
"
The
bookmark
separator
should
be
in
the
panel
"
)
;
let
showingPromise
=
BrowserTestUtils
.
waitForEvent
(
document
.
getElementById
(
"
pageActionContextMenu
"
)
"
popupshowing
"
false
)
;
EventUtils
.
synthesizeMouseAtCenter
(
separator
{
type
:
"
contextmenu
"
button
:
2
}
)
;
let
event
=
await
showingPromise
;
Assert
.
ok
(
event
.
defaultPrevented
"
defaultPrevented
should
be
true
on
popupshowing
event
"
)
;
EventUtils
.
synthesizeMouseAtCenter
(
BrowserPageActions
.
mainButtonNode
{
}
)
;
await
promisePageActionPanelHidden
(
)
;
EventUtils
.
synthesizeMouseAtCenter
(
gURLBar
.
inputField
{
type
:
"
mousemove
"
}
)
;
gURLBar
.
focus
(
)
;
}
)
;
function
collectContextMenuItems
(
)
{
let
contextMenu
=
document
.
getElementById
(
"
pageActionContextMenu
"
)
;
return
Array
.
prototype
.
filter
.
call
(
contextMenu
.
children
node
=
>
{
return
window
.
getComputedStyle
(
node
)
.
visibility
=
=
"
visible
"
;
}
)
;
}
