"
use
strict
"
;
const
SCALAR_ABOUT_HOME
=
"
browser
.
engagement
.
navigation
.
about_home
"
;
add_task
(
function
*
setup
(
)
{
ignoreAllUncaughtExceptions
(
)
;
Services
.
search
.
addEngineWithDetails
(
"
MozSearch
"
"
"
"
mozalias
"
"
"
"
GET
"
"
http
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
)
;
Services
.
search
.
addEngineWithDetails
(
"
MozSearch2
"
"
"
"
mozalias2
"
"
"
"
GET
"
"
http
:
/
/
example
.
com
/
?
q
=
{
searchTerms
}
"
)
;
let
engineDefault
=
Services
.
search
.
getEngineByName
(
"
MozSearch
"
)
;
let
originalEngine
=
Services
.
search
.
currentEngine
;
Services
.
search
.
currentEngine
=
engineDefault
;
let
engineOneOff
=
Services
.
search
.
getEngineByName
(
"
MozSearch2
"
)
;
Services
.
search
.
moveEngine
(
engineOneOff
0
)
;
yield
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
toolkit
.
telemetry
.
enabled
"
true
]
]
}
)
;
Services
.
telemetry
.
setEventRecordingEnabled
(
"
navigation
"
true
)
;
registerCleanupFunction
(
function
*
(
)
{
Services
.
search
.
currentEngine
=
originalEngine
;
Services
.
search
.
removeEngine
(
engineDefault
)
;
Services
.
search
.
removeEngine
(
engineOneOff
)
;
yield
PlacesTestUtils
.
clearHistory
(
)
;
Services
.
telemetry
.
setEventRecordingEnabled
(
"
navigation
"
false
)
;
}
)
;
}
)
;
add_task
(
function
*
test_abouthome_simpleQuery
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
Services
.
telemetry
.
clearEvents
(
)
;
let
search_hist
=
getSearchCountsHistogram
(
)
;
let
tab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
)
;
info
(
"
Setup
waiting
for
AboutHomeLoadSnippetsCompleted
.
"
)
;
let
promiseAboutHomeLoaded
=
new
Promise
(
resolve
=
>
{
tab
.
linkedBrowser
.
addEventListener
(
"
AboutHomeLoadSnippetsCompleted
"
function
loadListener
(
event
)
{
tab
.
linkedBrowser
.
removeEventListener
(
"
AboutHomeLoadSnippetsCompleted
"
loadListener
true
)
;
resolve
(
)
;
}
true
true
)
;
}
)
;
info
(
"
Load
about
:
home
.
"
)
;
tab
.
linkedBrowser
.
loadURI
(
"
about
:
home
"
)
;
info
(
"
Wait
for
AboutHomeLoadSnippetsCompleted
.
"
)
;
yield
promiseAboutHomeLoaded
;
info
(
"
Trigger
a
simple
serch
just
test
+
enter
.
"
)
;
let
p
=
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
yield
typeInSearchField
(
tab
.
linkedBrowser
"
test
query
"
"
searchText
"
)
;
yield
BrowserTestUtils
.
synthesizeKey
(
"
VK_RETURN
"
{
}
tab
.
linkedBrowser
)
;
yield
p
;
const
scalars
=
getParentProcessScalars
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
true
false
)
;
checkKeyedScalar
(
scalars
SCALAR_ABOUT_HOME
"
search_enter
"
1
)
;
Assert
.
equal
(
Object
.
keys
(
scalars
[
SCALAR_ABOUT_HOME
]
)
.
length
1
"
This
search
must
only
increment
one
entry
in
the
scalar
.
"
)
;
checkKeyedHistogram
(
search_hist
"
other
-
MozSearch
.
abouthome
"
1
)
;
let
events
=
Services
.
telemetry
.
snapshotBuiltinEvents
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
false
)
;
events
=
events
.
filter
(
e
=
>
e
[
1
]
=
=
"
navigation
"
&
&
e
[
2
]
=
=
"
search
"
)
;
checkEvents
(
events
[
[
"
navigation
"
"
search
"
"
about_home
"
"
enter
"
{
engine
:
"
other
-
MozSearch
"
}
]
]
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
)
;
