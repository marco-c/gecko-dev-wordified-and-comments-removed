"
use
strict
"
;
const
{
Assert
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
Assert
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
TelemetryTestUtils
"
"
resource
:
/
/
testing
-
common
/
TelemetryTestUtils
.
jsm
"
)
;
const
histogramName
=
"
FX_NUMBER_OF_UNIQUE_SITE_ORIGINS_PER_DOCUMENT
"
;
const
testRoot
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
http
:
/
/
mochi
.
test
:
8888
"
)
;
function
windowGlobalDestroyed
(
id
)
{
return
BrowserUtils
.
promiseObserved
(
"
window
-
global
-
destroyed
"
aWGP
=
>
aWGP
.
innerWindowId
=
=
id
)
;
}
async
function
openAndCloseTab
(
uri
)
{
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
opening
:
uri
}
)
;
const
innerWindowId
=
tab
.
linkedBrowser
.
browsingContext
.
currentWindowGlobal
.
innerWindowId
;
const
wgpDestroyed
=
windowGlobalDestroyed
(
innerWindowId
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
wgpDestroyed
;
}
add_task
(
async
function
test_numberOfSiteOriginsAfterTabClose
(
)
{
const
histogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
histogramName
)
;
const
testPage
=
{
testRoot
}
contain_iframe
.
html
;
await
openAndCloseTab
(
testPage
)
;
TelemetryTestUtils
.
assertHistogram
(
histogram
2
1
)
;
}
)
;
add_task
(
async
function
test_numberOfSiteOriginsAboutBlank
(
)
{
const
histogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
histogramName
)
;
await
openAndCloseTab
(
"
about
:
blank
"
)
;
const
{
values
}
=
histogram
.
snapshot
(
)
;
Assert
.
deepEqual
(
values
{
}
Histogram
should
have
no
values
;
had
{
JSON
.
stringify
(
values
)
}
)
;
}
)
;
add_task
(
async
function
test_numberOfSiteOriginsMultipleNavigations
(
)
{
const
histogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
histogramName
)
;
const
testPage
=
{
testRoot
}
contain_iframe
.
html
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
opening
:
testPage
waitForStateStop
:
true
}
)
;
const
wgpDestroyedPromises
=
[
windowGlobalDestroyed
(
tab
.
linkedBrowser
.
innerWindowID
)
]
;
await
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
"
about
:
blank
"
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
await
BrowserTestUtils
.
loadURI
(
tab
.
linkedBrowser
testPage
)
;
await
BrowserTestUtils
.
browserLoaded
(
tab
.
linkedBrowser
)
;
wgpDestroyedPromises
.
push
(
windowGlobalDestroyed
(
tab
.
linkedBrowser
.
innerWindowID
)
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
Promise
.
all
(
wgpDestroyedPromises
)
;
TelemetryTestUtils
.
assertHistogram
(
histogram
2
2
)
;
}
)
;
add_task
(
async
function
test_numberOfSiteOriginsAddAndRemove
(
)
{
const
histogram
=
TelemetryTestUtils
.
getAndClearHistogram
(
histogramName
)
;
const
testPage
=
{
testRoot
}
blank_iframe
.
html
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
opening
:
testPage
waitForStateStop
:
true
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
const
iframe
=
content
.
window
.
document
.
querySelector
(
"
iframe
"
)
;
const
loaded
=
new
Promise
(
resolve
=
>
{
iframe
.
addEventListener
(
"
load
"
(
)
=
>
resolve
(
)
{
once
:
true
}
)
;
}
)
;
iframe
.
src
=
"
http
:
/
/
example
.
com
"
;
await
loaded
;
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
const
iframe
=
content
.
window
.
document
.
querySelector
(
"
iframe
"
)
;
const
loaded
=
new
Promise
(
resolve
=
>
{
iframe
.
addEventListener
(
"
load
"
(
)
=
>
resolve
(
)
{
once
:
true
}
)
;
}
)
;
iframe
.
src
=
"
http
:
/
/
example
.
org
"
;
await
loaded
;
}
)
;
const
wgpDestroyed
=
windowGlobalDestroyed
(
tab
.
linkedBrowser
.
innerWindowID
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
await
wgpDestroyed
;
TelemetryTestUtils
.
assertHistogram
(
histogram
2
1
)
;
}
)
;
