"
use
strict
"
;
const
{
UnsubmittedCrashHandler
}
=
Cu
.
import
(
"
resource
:
/
/
/
modules
/
ContentCrashHandlers
.
jsm
"
{
}
)
;
const
{
FileUtils
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
{
}
)
;
const
{
makeFakeAppDir
}
=
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
AppData
.
jsm
"
{
}
)
;
const
{
OS
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
{
}
)
;
const
DAY
=
24
*
60
*
60
*
1000
;
const
SERVER_URL
=
"
http
:
/
/
example
.
com
/
browser
/
toolkit
/
crashreporter
/
test
/
browser
/
crashreport
.
sjs
"
;
function
getPendingCrashReportDir
(
)
{
return
FileUtils
.
getDir
(
"
ProfD
"
[
"
UAppData
"
"
Crash
Reports
"
"
pending
"
]
false
)
;
}
function
clearPendingCrashReports
(
)
{
let
dir
=
getPendingCrashReportDir
(
)
;
let
entries
=
dir
.
directoryEntries
;
while
(
entries
.
hasMoreElements
(
)
)
{
let
entry
=
entries
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIFile
)
;
if
(
entry
.
isFile
(
)
)
{
entry
.
remove
(
false
)
;
}
}
}
function
createPendingCrashReports
(
howMany
accessDate
)
{
let
dir
=
getPendingCrashReportDir
(
)
;
if
(
!
accessDate
)
{
accessDate
=
new
Date
(
)
;
}
let
createFile
=
(
fileName
extension
lastAccessedDate
contents
)
=
>
{
let
file
=
dir
.
clone
(
)
;
file
.
append
(
fileName
+
"
.
"
+
extension
)
;
file
.
create
(
Ci
.
nsILocalFile
.
NORMAL_FILE_TYPE
FileUtils
.
PERMS_FILE
)
;
let
promises
=
[
OS
.
File
.
setDates
(
file
.
path
lastAccessedDate
)
]
;
if
(
contents
)
{
let
encoder
=
new
TextEncoder
(
)
;
let
array
=
encoder
.
encode
(
contents
)
;
promises
.
push
(
OS
.
File
.
writeAtomic
(
file
.
path
array
{
tmpPath
:
file
.
path
+
"
.
tmp
"
}
)
)
;
}
return
Promise
.
all
(
promises
)
;
}
let
uuidGenerator
=
Cc
[
"
mozilla
.
org
/
uuid
-
generator
;
1
"
]
.
getService
(
Ci
.
nsIUUIDGenerator
)
;
let
extraFileContents
=
"
ServerURL
=
"
+
SERVER_URL
;
return
(
async
function
(
)
{
let
uuids
=
[
]
;
for
(
let
i
=
0
;
i
<
howMany
;
+
+
i
)
{
let
uuid
=
uuidGenerator
.
generateUUID
(
)
.
toString
(
)
;
uuid
=
uuid
.
substring
(
1
uuid
.
length
-
1
)
;
await
createFile
(
uuid
"
dmp
"
accessDate
)
;
await
createFile
(
uuid
"
extra
"
accessDate
extraFileContents
)
;
uuids
.
push
(
uuid
)
;
}
return
uuids
;
}
)
(
)
;
}
function
waitForSubmittedReports
(
reportIDs
)
{
let
promises
=
[
]
;
for
(
let
reportID
of
reportIDs
)
{
let
promise
=
TestUtils
.
topicObserved
(
"
crash
-
report
-
status
"
(
subject
data
)
=
>
{
if
(
data
=
=
"
success
"
)
{
let
propBag
=
subject
.
QueryInterface
(
Ci
.
nsIPropertyBag2
)
;
let
dumpID
=
propBag
.
getPropertyAsAString
(
"
minidumpID
"
)
;
if
(
dumpID
=
=
reportID
)
{
return
true
;
}
}
return
false
;
}
)
;
promises
.
push
(
promise
)
;
}
return
Promise
.
all
(
promises
)
;
}
function
waitForIgnoredReports
(
reportIDs
)
{
let
dir
=
getPendingCrashReportDir
(
)
;
let
promises
=
[
]
;
for
(
let
reportID
of
reportIDs
)
{
let
file
=
dir
.
clone
(
)
;
file
.
append
(
reportID
+
"
.
dmp
.
ignore
"
)
;
promises
.
push
(
OS
.
File
.
exists
(
file
.
path
)
)
;
}
return
Promise
.
all
(
promises
)
;
}
let
gNotificationBox
;
add_task
(
async
function
setup
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
"
toolkit
.
cosmeticAnimations
.
enabled
"
true
]
]
}
)
;
await
makeFakeAppDir
(
)
;
gNotificationBox
=
document
.
getElementById
(
"
global
-
notificationbox
"
)
;
let
notification
=
gNotificationBox
.
getNotificationWithValue
(
"
pending
-
crash
-
reports
"
)
;
if
(
notification
)
{
notification
.
close
(
)
;
}
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Components
.
interfaces
.
nsIEnvironment
)
;
let
oldServerURL
=
env
.
get
(
"
MOZ_CRASHREPORTER_URL
"
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_URL
"
SERVER_URL
)
;
UnsubmittedCrashHandler
.
uninit
(
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
crashReports
.
unsubmittedCheck
.
enabled
"
true
]
]
}
)
;
UnsubmittedCrashHandler
.
init
(
)
;
registerCleanupFunction
(
function
(
)
{
gNotificationBox
=
null
;
clearPendingCrashReports
(
)
;
env
.
set
(
"
MOZ_CRASHREPORTER_URL
"
oldServerURL
)
;
}
)
;
}
)
;
add_task
(
async
function
test_no_pending_no_notification
(
)
{
clearPendingCrashReports
(
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
equal
(
notification
null
"
There
should
not
be
a
notification
if
there
are
no
"
+
"
pending
crash
reports
"
)
;
}
)
;
add_task
(
async
function
test_one_pending
(
)
{
await
createPendingCrashReports
(
1
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_other_ignored
(
)
{
let
toIgnore
=
await
createPendingCrashReports
(
1
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
let
anonyNodes
=
document
.
getAnonymousNodes
(
notification
)
[
0
]
;
let
closeButton
=
anonyNodes
.
querySelector
(
"
.
close
-
icon
"
)
;
closeButton
.
click
(
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
await
waitForIgnoredReports
(
toIgnore
)
;
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
!
notification
"
There
should
not
be
a
notification
"
)
;
await
createPendingCrashReports
(
1
)
;
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_several_pending
(
)
{
await
createPendingCrashReports
(
3
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_several_pending
(
)
{
let
oldDate
=
new
Date
(
Date
.
now
(
)
-
(
30
*
DAY
)
)
;
await
createPendingCrashReports
(
3
oldDate
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
equal
(
notification
null
"
There
should
not
be
a
notification
if
there
are
only
"
+
"
old
pending
crash
reports
"
)
;
await
createPendingCrashReports
(
1
)
;
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_can_submit
(
)
{
let
reportIDs
=
await
createPendingCrashReports
(
1
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
let
buttons
=
notification
.
querySelectorAll
(
"
.
notification
-
button
"
)
;
let
submit
=
buttons
[
0
]
;
let
promiseReports
=
waitForSubmittedReports
(
reportIDs
)
;
info
(
"
Sending
crash
report
"
)
;
submit
.
click
(
)
;
info
(
"
Sent
!
"
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
info
(
"
Waiting
on
reports
to
be
received
.
"
)
;
await
promiseReports
;
info
(
"
Received
!
"
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_can_submit_several
(
)
{
let
reportIDs
=
await
createPendingCrashReports
(
3
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
let
buttons
=
notification
.
querySelectorAll
(
"
.
notification
-
button
"
)
;
let
submit
=
buttons
[
0
]
;
let
promiseReports
=
waitForSubmittedReports
(
reportIDs
)
;
info
(
"
Sending
crash
reports
"
)
;
submit
.
click
(
)
;
info
(
"
Sent
!
"
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
info
(
"
Waiting
on
reports
to
be
received
.
"
)
;
await
promiseReports
;
info
(
"
Received
!
"
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_can_submit_always
(
)
{
let
pref
=
"
browser
.
crashReports
.
unsubmittedCheck
.
autoSubmit
"
;
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
pref
)
false
"
We
should
not
be
auto
-
submitting
by
default
"
)
;
let
reportIDs
=
await
createPendingCrashReports
(
1
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
let
buttons
=
notification
.
querySelectorAll
(
"
.
notification
-
button
"
)
;
let
sendAll
=
buttons
[
1
]
;
let
promiseReports
=
waitForSubmittedReports
(
reportIDs
)
;
info
(
"
Sending
crash
reports
"
)
;
sendAll
.
click
(
)
;
info
(
"
Sent
!
"
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
info
(
"
Waiting
on
reports
to
be
received
.
"
)
;
await
promiseReports
;
info
(
"
Received
!
"
)
;
Assert
.
equal
(
Services
.
prefs
.
getBoolPref
(
pref
)
true
"
The
autoSubmit
pref
should
have
been
set
"
)
;
Services
.
prefs
.
clearUserPref
(
pref
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_can_auto_submit
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
crashReports
.
unsubmittedCheck
.
autoSubmit
"
true
]
]
}
)
;
let
reportIDs
=
await
createPendingCrashReports
(
3
)
;
let
promiseReports
=
waitForSubmittedReports
(
reportIDs
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
equal
(
notification
null
"
There
should
be
no
notification
"
)
;
info
(
"
Waiting
on
reports
to
be
received
.
"
)
;
await
promiseReports
;
info
(
"
Received
!
"
)
;
clearPendingCrashReports
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
)
;
add_task
(
async
function
test_can_ignore
(
)
{
let
reportIDs
=
await
createPendingCrashReports
(
3
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
let
anonyNodes
=
document
.
getAnonymousNodes
(
notification
)
[
0
]
;
let
closeButton
=
anonyNodes
.
querySelector
(
"
.
close
-
icon
"
)
;
closeButton
.
click
(
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
await
waitForIgnoredReports
(
reportIDs
)
;
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
equal
(
notification
null
"
There
should
be
no
notification
"
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_last_shown_date
(
)
{
await
createPendingCrashReports
(
1
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
let
today
=
UnsubmittedCrashHandler
.
dateString
(
new
Date
(
)
)
;
let
lastShownDate
=
UnsubmittedCrashHandler
.
prefs
.
getCharPref
(
"
lastShownDate
"
)
;
Assert
.
equal
(
today
lastShownDate
"
Last
shown
date
should
be
today
.
"
)
;
UnsubmittedCrashHandler
.
prefs
.
clearUserPref
(
"
lastShownDate
"
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_shutdown_while_showing
(
)
{
await
createPendingCrashReports
(
1
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
UnsubmittedCrashHandler
.
uninit
(
)
;
let
shutdownWhileShowing
=
UnsubmittedCrashHandler
.
prefs
.
getBoolPref
(
"
shutdownWhileShowing
"
)
;
Assert
.
ok
(
shutdownWhileShowing
"
We
should
have
noticed
that
we
uninitted
while
showing
"
+
"
the
notification
.
"
)
;
UnsubmittedCrashHandler
.
prefs
.
clearUserPref
(
"
shutdownWhileShowing
"
)
;
UnsubmittedCrashHandler
.
init
(
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_shutdown_while_not_showing
(
)
{
let
reportIDs
=
await
createPendingCrashReports
(
1
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
let
anonyNodes
=
document
.
getAnonymousNodes
(
notification
)
[
0
]
;
let
closeButton
=
anonyNodes
.
querySelector
(
"
.
close
-
icon
"
)
;
closeButton
.
click
(
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
await
waitForIgnoredReports
(
reportIDs
)
;
UnsubmittedCrashHandler
.
uninit
(
)
;
Assert
.
throws
(
(
)
=
>
{
UnsubmittedCrashHandler
.
prefs
.
getBoolPref
(
"
shutdownWhileShowing
"
)
;
}
"
We
should
have
noticed
that
the
notification
had
closed
before
"
+
"
uninitting
.
"
)
;
UnsubmittedCrashHandler
.
init
(
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_dont_decrement_chances_on_same_day
(
)
{
let
initChances
=
UnsubmittedCrashHandler
.
prefs
.
getIntPref
(
"
chancesUntilSuppress
"
)
;
Assert
.
ok
(
initChances
>
1
"
We
should
start
with
at
least
1
chance
.
"
)
;
await
createPendingCrashReports
(
1
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
UnsubmittedCrashHandler
.
uninit
(
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
let
shutdownWhileShowing
=
UnsubmittedCrashHandler
.
prefs
.
getBoolPref
(
"
shutdownWhileShowing
"
)
;
Assert
.
ok
(
shutdownWhileShowing
"
We
should
have
noticed
that
we
uninitted
while
showing
"
+
"
the
notification
.
"
)
;
let
today
=
UnsubmittedCrashHandler
.
dateString
(
new
Date
(
)
)
;
let
lastShownDate
=
UnsubmittedCrashHandler
.
prefs
.
getCharPref
(
"
lastShownDate
"
)
;
Assert
.
equal
(
today
lastShownDate
"
Last
shown
date
should
be
today
.
"
)
;
UnsubmittedCrashHandler
.
init
(
)
;
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
still
be
a
notification
"
)
;
let
chances
=
UnsubmittedCrashHandler
.
prefs
.
getIntPref
(
"
chancesUntilSuppress
"
)
;
Assert
.
equal
(
initChances
chances
"
We
should
not
have
decremented
chances
.
"
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_decrement_chances_on_other_day
(
)
{
let
initChances
=
UnsubmittedCrashHandler
.
prefs
.
getIntPref
(
"
chancesUntilSuppress
"
)
;
Assert
.
ok
(
initChances
>
1
"
We
should
start
with
at
least
1
chance
.
"
)
;
await
createPendingCrashReports
(
1
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
be
a
notification
"
)
;
UnsubmittedCrashHandler
.
uninit
(
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
let
shutdownWhileShowing
=
UnsubmittedCrashHandler
.
prefs
.
getBoolPref
(
"
shutdownWhileShowing
"
)
;
Assert
.
ok
(
shutdownWhileShowing
"
We
should
have
noticed
that
we
uninitted
while
showing
"
+
"
the
notification
.
"
)
;
let
yesterday
=
UnsubmittedCrashHandler
.
dateString
(
new
Date
(
Date
.
now
(
)
-
DAY
)
)
;
UnsubmittedCrashHandler
.
prefs
.
setCharPref
(
"
lastShownDate
"
yesterday
)
;
UnsubmittedCrashHandler
.
init
(
)
;
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
ok
(
notification
"
There
should
still
be
a
notification
"
)
;
let
chances
=
UnsubmittedCrashHandler
.
prefs
.
getIntPref
(
"
chancesUntilSuppress
"
)
;
Assert
.
equal
(
initChances
-
1
chances
"
We
should
have
decremented
our
chances
.
"
)
;
UnsubmittedCrashHandler
.
prefs
.
clearUserPref
(
"
chancesUntilSuppress
"
)
;
gNotificationBox
.
removeNotification
(
notification
true
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_can_suppress_after_chances
(
)
{
let
yesterday
=
UnsubmittedCrashHandler
.
dateString
(
new
Date
(
Date
.
now
(
)
-
DAY
)
)
;
UnsubmittedCrashHandler
.
prefs
.
setCharPref
(
"
lastShownDate
"
yesterday
)
;
UnsubmittedCrashHandler
.
prefs
.
setBoolPref
(
"
shutdownWhileShowing
"
true
)
;
UnsubmittedCrashHandler
.
prefs
.
setIntPref
(
"
chancesUntilSuppress
"
0
)
;
await
createPendingCrashReports
(
1
)
;
let
notification
=
await
UnsubmittedCrashHandler
.
checkForUnsubmittedCrashReports
(
)
;
Assert
.
equal
(
notification
null
"
There
should
be
no
notification
if
we
'
ve
run
out
of
chances
"
)
;
let
suppressUntilDate
=
UnsubmittedCrashHandler
.
prefs
.
getCharPref
(
"
suppressUntilDate
"
)
;
let
today
=
UnsubmittedCrashHandler
.
dateString
(
new
Date
(
)
)
;
Assert
.
ok
(
suppressUntilDate
>
today
"
We
should
be
suppressing
until
some
days
into
the
future
.
"
)
;
UnsubmittedCrashHandler
.
prefs
.
clearUserPref
(
"
chancesUntilSuppress
"
)
;
UnsubmittedCrashHandler
.
prefs
.
clearUserPref
(
"
suppressUntilDate
"
)
;
UnsubmittedCrashHandler
.
prefs
.
clearUserPref
(
"
lastShownDate
"
)
;
clearPendingCrashReports
(
)
;
}
)
;
add_task
(
async
function
test_suppression
(
)
{
let
future
=
UnsubmittedCrashHandler
.
dateString
(
new
Date
(
Date
.
now
(
)
+
(
DAY
*
5
)
)
)
;
UnsubmittedCrashHandler
.
prefs
.
setCharPref
(
"
suppressUntilDate
"
future
)
;
UnsubmittedCrashHandler
.
uninit
(
)
;
UnsubmittedCrashHandler
.
init
(
)
;
Assert
.
ok
(
UnsubmittedCrashHandler
.
suppressed
"
The
UnsubmittedCrashHandler
should
be
suppressed
.
"
)
;
UnsubmittedCrashHandler
.
prefs
.
clearUserPref
(
"
suppressUntilDate
"
)
;
UnsubmittedCrashHandler
.
uninit
(
)
;
UnsubmittedCrashHandler
.
init
(
)
;
}
)
;
add_task
(
async
function
test_end_suppression
(
)
{
let
yesterday
=
UnsubmittedCrashHandler
.
dateString
(
new
Date
(
Date
.
now
(
)
-
DAY
)
)
;
UnsubmittedCrashHandler
.
prefs
.
setCharPref
(
"
suppressUntilDate
"
yesterday
)
;
UnsubmittedCrashHandler
.
uninit
(
)
;
UnsubmittedCrashHandler
.
init
(
)
;
Assert
.
ok
(
!
UnsubmittedCrashHandler
.
suppressed
"
The
UnsubmittedCrashHandler
should
not
be
suppressed
.
"
)
;
Assert
.
ok
(
!
UnsubmittedCrashHandler
.
prefs
.
prefHasUserValue
(
"
suppressUntilDate
"
)
"
The
suppression
date
should
been
cleared
from
preferences
.
"
)
;
UnsubmittedCrashHandler
.
uninit
(
)
;
UnsubmittedCrashHandler
.
init
(
)
;
}
)
;
