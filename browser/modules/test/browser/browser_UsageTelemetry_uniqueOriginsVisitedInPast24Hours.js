"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
URICountListener
"
"
resource
:
/
/
/
modules
/
BrowserUsageTelemetry
.
jsm
"
)
;
add_task
(
async
function
test_uniqueOriginsVisitedInPast24Hours
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
network
.
proxy
.
no_proxies_on
"
"
"
]
]
}
)
;
registerCleanupFunction
(
async
(
)
=
>
{
info
(
"
Cleaning
up
"
)
;
URICountListener
.
resetUniqueOriginsVisitedInPast24Hours
(
)
;
}
)
;
URICountListener
.
resetUniqueOriginsVisitedInPast24Hours
(
)
;
let
startingCount
=
URICountListener
.
uniqueOriginsVisitedInPast24Hours
;
is
(
startingCount
0
"
We
should
have
no
origins
recorded
in
the
history
right
after
resetting
"
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
"
http
:
/
/
example
.
com
"
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
"
http
:
/
/
test1
.
example
.
com
"
)
;
is
(
URICountListener
.
uniqueOriginsVisitedInPast24Hours
startingCount
+
1
"
test1
.
example
.
com
should
only
count
as
a
unique
visit
if
example
.
com
wasn
'
t
visited
before
"
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
"
http
:
/
/
xn
-
-
exmple
-
cua
.
test
"
)
;
is
(
URICountListener
.
uniqueOriginsVisitedInPast24Hours
startingCount
+
2
"
www
.
ex
mple
.
test
should
count
as
a
unique
visit
"
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
engagement
.
recent_visited_origins
.
expiry
"
1
]
]
}
)
;
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
"
http
:
/
/
127
.
0
.
0
.
1
"
)
;
is
(
URICountListener
.
uniqueOriginsVisitedInPast24Hours
startingCount
+
3
"
127
.
0
.
0
.
1
should
count
as
a
unique
visit
"
)
;
let
countBefore
=
URICountListener
.
uniqueOriginsVisitedInPast24Hours
;
await
new
Promise
(
resolve
=
>
{
setTimeout
(
_
=
>
{
let
countAfter
=
URICountListener
.
uniqueOriginsVisitedInPast24Hours
;
is
(
countAfter
countBefore
-
1
"
The
expiry
should
work
correctly
"
)
;
resolve
(
)
;
}
1100
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
win
.
gBrowser
.
selectedTab
)
;
BrowserTestUtils
.
removeTab
(
win
.
gBrowser
.
selectedTab
)
;
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
