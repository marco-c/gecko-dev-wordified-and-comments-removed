const
TEST_MSG
=
"
ContentSearchTest
"
;
const
SERVICE_EVENT_TYPE
=
"
ContentSearchService
"
;
const
CLIENT_EVENT_TYPE
=
"
ContentSearchClient
"
;
content
.
addEventListener
(
SERVICE_EVENT_TYPE
event
=
>
{
sendAsyncMessage
(
TEST_MSG
Components
.
utils
.
waiveXrays
(
event
.
detail
)
)
;
}
)
;
addMessageListener
(
TEST_MSG
msg
=
>
{
if
(
msg
.
data
.
type
=
=
"
Search
"
)
{
waitForLoadAndStopIt
(
msg
.
data
.
expectedURL
url
=
>
{
sendAsyncMessage
(
TEST_MSG
{
type
:
"
loadStopped
"
url
}
)
;
}
)
;
}
content
.
dispatchEvent
(
new
content
.
CustomEvent
(
CLIENT_EVENT_TYPE
{
detail
:
msg
.
data
}
)
)
;
}
)
;
function
waitForLoadAndStopIt
(
expectedURL
callback
)
{
let
Ci
=
Components
.
interfaces
;
let
webProgress
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebProgress
)
;
let
listener
=
{
onStateChange
(
webProg
req
flags
status
)
{
if
(
req
instanceof
Ci
.
nsIChannel
)
{
let
url
=
req
.
originalURI
.
spec
;
dump
(
"
waitForLoadAndStopIt
:
onStateChange
"
+
url
+
"
\
n
"
)
;
let
docStart
=
Ci
.
nsIWebProgressListener
.
STATE_IS_DOCUMENT
|
Ci
.
nsIWebProgressListener
.
STATE_START
;
if
(
(
flags
&
docStart
)
&
&
webProg
.
isTopLevel
&
&
url
=
=
expectedURL
)
{
webProgress
.
removeProgressListener
(
listener
)
;
req
.
cancel
(
Components
.
results
.
NS_ERROR_FAILURE
)
;
callback
(
url
)
;
}
}
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIWebProgressListener
Ci
.
nsISupportsWeakReference
]
)
}
;
webProgress
.
addProgressListener
(
listener
Ci
.
nsIWebProgress
.
NOTIFY_ALL
)
;
dump
(
"
waitForLoadAndStopIt
:
Waiting
for
URL
to
load
:
"
+
expectedURL
+
"
\
n
"
)
;
}
