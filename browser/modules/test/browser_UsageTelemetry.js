"
use
strict
"
;
const
MAX_CONCURRENT_TABS
=
"
browser
.
engagement
.
max_concurrent_tab_count
"
;
const
TAB_EVENT_COUNT
=
"
browser
.
engagement
.
tab_open_event_count
"
;
const
MAX_CONCURRENT_WINDOWS
=
"
browser
.
engagement
.
max_concurrent_window_count
"
;
const
WINDOW_OPEN_COUNT
=
"
browser
.
engagement
.
window_open_event_count
"
;
const
TELEMETRY_SUBSESSION_TOPIC
=
"
internal
-
telemetry
-
after
-
subsession
-
split
"
;
let
checkScalar
=
(
scalars
scalarName
value
msg
)
=
>
{
if
(
value
>
0
)
{
is
(
scalars
[
scalarName
]
value
msg
)
;
return
;
}
ok
(
!
(
scalarName
in
scalars
)
scalarName
+
"
must
not
be
reported
.
"
)
;
}
;
let
checkScalars
=
(
maxTabs
tabOpenCount
maxWindows
windowsOpenCount
)
=
>
{
const
scalars
=
Services
.
telemetry
.
snapshotScalars
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
)
;
checkScalar
(
scalars
MAX_CONCURRENT_TABS
maxTabs
"
The
maximum
tab
count
must
match
the
expected
value
.
"
)
;
checkScalar
(
scalars
TAB_EVENT_COUNT
tabOpenCount
"
The
number
of
open
tab
event
count
must
match
the
expected
value
.
"
)
;
checkScalar
(
scalars
MAX_CONCURRENT_WINDOWS
maxWindows
"
The
maximum
window
count
must
match
the
expected
value
.
"
)
;
checkScalar
(
scalars
WINDOW_OPEN_COUNT
windowsOpenCount
"
The
number
of
window
open
event
count
must
match
the
expected
value
.
"
)
;
}
;
add_task
(
function
*
test_tabsAndWindows
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
let
openedTabs
=
[
]
;
let
expectedTabOpenCount
=
0
;
let
expectedWinOpenCount
=
0
;
let
expectedMaxTabs
=
0
;
let
expectedMaxWins
=
0
;
openedTabs
.
push
(
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
)
;
expectedTabOpenCount
=
1
;
expectedMaxTabs
=
2
;
checkScalars
(
expectedMaxTabs
expectedTabOpenCount
expectedMaxWins
expectedWinOpenCount
)
;
openedTabs
.
push
(
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
)
;
openedTabs
.
push
(
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
)
;
expectedTabOpenCount
+
=
2
;
expectedMaxTabs
+
=
2
;
checkScalars
(
expectedMaxTabs
expectedTabOpenCount
expectedMaxWins
expectedWinOpenCount
)
;
let
win
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
openedTabs
.
push
(
yield
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
"
about
:
blank
"
)
)
;
openedTabs
.
push
(
yield
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
"
about
:
blank
"
)
)
;
openedTabs
.
push
(
yield
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
"
about
:
blank
"
)
)
;
expectedTabOpenCount
+
=
4
;
expectedWinOpenCount
+
=
1
;
expectedMaxWins
=
2
;
expectedMaxTabs
+
=
4
;
yield
BrowserTestUtils
.
removeTab
(
openedTabs
.
pop
(
)
)
;
checkScalars
(
expectedMaxTabs
expectedTabOpenCount
expectedMaxWins
expectedWinOpenCount
)
;
for
(
let
tab
of
openedTabs
)
{
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
checkScalars
(
expectedMaxTabs
expectedTabOpenCount
expectedMaxWins
expectedWinOpenCount
)
;
}
)
;
add_task
(
function
*
test_subsessionSplit
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
let
win
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
let
openedTabs
=
[
]
;
openedTabs
.
push
(
yield
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
"
about
:
blank
"
)
)
;
openedTabs
.
push
(
yield
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
"
about
:
blank
"
)
)
;
openedTabs
.
push
(
yield
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
"
about
:
blank
"
)
)
;
checkScalars
(
5
4
2
1
)
;
yield
BrowserTestUtils
.
removeTab
(
openedTabs
.
pop
(
)
)
;
Services
.
telemetry
.
snapshotScalars
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
true
)
;
Services
.
obs
.
notifyObservers
(
null
TELEMETRY_SUBSESSION_TOPIC
"
"
)
;
checkScalars
(
4
0
2
0
)
;
for
(
let
tab
of
openedTabs
)
{
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
}
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
}
)
;
add_task
(
function
*
test_privateMode
(
)
{
Services
.
telemetry
.
clearScalars
(
)
;
let
privateWin
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
yield
BrowserTestUtils
.
loadURI
(
privateWin
.
gBrowser
.
selectedBrowser
"
http
:
/
/
example
.
com
/
"
)
;
yield
BrowserTestUtils
.
browserLoaded
(
privateWin
.
gBrowser
.
selectedBrowser
)
;
const
scalars
=
Services
.
telemetry
.
snapshotScalars
(
Ci
.
nsITelemetry
.
DATASET_RELEASE_CHANNEL_OPTIN
)
;
is
(
scalars
[
TAB_EVENT_COUNT
]
1
"
The
number
of
open
tab
event
count
must
match
the
expected
value
.
"
)
;
is
(
scalars
[
MAX_CONCURRENT_TABS
]
2
"
The
maximum
tab
count
must
match
the
expected
value
.
"
)
;
is
(
scalars
[
WINDOW_OPEN_COUNT
]
1
"
The
number
of
window
open
event
count
must
match
the
expected
value
.
"
)
;
is
(
scalars
[
MAX_CONCURRENT_WINDOWS
]
2
"
The
maximum
window
count
must
match
the
expected
value
.
"
)
;
yield
BrowserTestUtils
.
closeWindow
(
privateWin
)
;
}
)
;
