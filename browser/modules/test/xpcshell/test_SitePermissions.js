"
use
strict
"
;
Components
.
utils
.
import
(
"
resource
:
/
/
/
modules
/
SitePermissions
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
add_task
(
function
*
testPermissionsListing
(
)
{
Assert
.
deepEqual
(
SitePermissions
.
listPermissions
(
)
.
sort
(
)
[
"
camera
"
"
cookie
"
"
desktop
-
notification
"
"
geo
"
"
image
"
"
indexedDB
"
"
install
"
"
microphone
"
"
pointerLock
"
"
popup
"
]
"
Correct
list
of
all
permissions
"
)
;
}
)
;
add_task
(
function
*
testHasGrantedPermissions
(
)
{
let
uri
=
Services
.
io
.
newURI
(
"
https
:
/
/
example
.
com
"
null
null
)
Assert
.
equal
(
SitePermissions
.
hasGrantedPermissions
(
uri
)
false
)
;
SitePermissions
.
set
(
uri
"
camera
"
SitePermissions
.
ALLOW
)
;
Assert
.
equal
(
SitePermissions
.
hasGrantedPermissions
(
uri
)
true
)
;
SitePermissions
.
remove
(
uri
"
camera
"
)
;
Assert
.
equal
(
SitePermissions
.
hasGrantedPermissions
(
uri
)
false
)
;
SitePermissions
.
set
(
uri
"
microphone
"
SitePermissions
.
SESSION
)
;
Assert
.
equal
(
SitePermissions
.
hasGrantedPermissions
(
uri
)
true
)
;
SitePermissions
.
remove
(
uri
"
microphone
"
)
;
Assert
.
equal
(
SitePermissions
.
hasGrantedPermissions
(
uri
)
false
)
;
SitePermissions
.
set
(
uri
"
pointerLock
"
SitePermissions
.
BLOCK
)
;
SitePermissions
.
set
(
uri
"
geo
"
SitePermissions
.
ALLOW
)
;
Assert
.
equal
(
SitePermissions
.
hasGrantedPermissions
(
uri
)
true
)
;
SitePermissions
.
set
(
uri
"
geo
"
SitePermissions
.
SESSION
)
;
Assert
.
equal
(
SitePermissions
.
hasGrantedPermissions
(
uri
)
true
)
;
SitePermissions
.
remove
(
uri
"
geo
"
)
;
Assert
.
equal
(
SitePermissions
.
hasGrantedPermissions
(
uri
)
false
)
;
SitePermissions
.
remove
(
uri
"
pointerLock
"
)
;
}
)
;
