"
use
strict
"
;
Components
.
utils
.
import
(
"
resource
:
/
/
/
modules
/
RecentWindow
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CaptivePortalWatcher
"
"
resource
:
/
/
/
modules
/
CaptivePortalWatcher
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
cps
"
"
mozilla
.
org
/
network
/
captive
-
portal
-
service
;
1
"
"
nsICaptivePortalService
"
)
;
const
CANONICAL_CONTENT
=
"
success
"
;
const
CANONICAL_URL
=
"
data
:
text
/
plain
;
charset
=
utf
-
8
"
+
CANONICAL_CONTENT
;
const
CANONICAL_URL_REDIRECTED
=
"
data
:
text
/
plain
;
charset
=
utf
-
8
redirected
"
;
const
PORTAL_NOTIFICATION_VALUE
=
"
captive
-
portal
-
detected
"
;
add_task
(
function
*
setup
(
)
{
yield
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
captivedetect
.
canonicalURL
"
CANONICAL_URL
]
[
"
captivedetect
.
canonicalContent
"
CANONICAL_CONTENT
]
]
}
)
;
}
)
;
function
*
portalDetectedNoBrowserWindow
(
)
{
let
getMostRecentBrowserWindow
=
RecentWindow
.
getMostRecentBrowserWindow
;
RecentWindow
.
getMostRecentBrowserWindow
=
(
)
=
>
{
}
;
yield
portalDetected
(
)
;
RecentWindow
.
getMostRecentBrowserWindow
=
getMostRecentBrowserWindow
;
}
function
*
portalDetected
(
)
{
Services
.
obs
.
notifyObservers
(
null
"
captive
-
portal
-
login
"
null
)
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
cps
.
state
=
=
cps
.
LOCKED_PORTAL
;
}
"
Waiting
for
Captive
Portal
Service
to
update
state
after
portal
detected
.
"
)
;
}
function
*
freePortal
(
aSuccess
)
{
Services
.
obs
.
notifyObservers
(
null
"
captive
-
portal
-
login
-
"
+
(
aSuccess
?
"
success
"
:
"
abort
"
)
null
)
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
cps
.
state
!
=
cps
.
LOCKED_PORTAL
;
}
"
Waiting
for
Captive
Portal
Service
to
update
state
after
portal
freed
.
"
)
;
}
function
*
openWindowAndWaitForPortalUI
(
aLongRecheck
)
{
CaptivePortalWatcher
.
PORTAL_RECHECK_DELAY_MS
=
aLongRecheck
?
-
1
:
1000000
;
let
win
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
yield
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
{
return
CaptivePortalWatcher
.
_waitingForRecheck
;
}
"
Waiting
for
CaptivePortalWatcher
to
trigger
a
recheck
.
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
captive
-
portal
-
check
-
complete
"
null
)
;
let
notification
=
ensurePortalNotification
(
win
)
;
if
(
aLongRecheck
)
{
ensureNoPortalTab
(
win
)
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
return
win
;
}
let
tab
=
win
.
gBrowser
.
tabs
[
1
]
;
if
(
tab
.
linkedBrowser
.
currentURI
.
spec
!
=
CANONICAL_URL
)
{
yield
BrowserTestUtils
.
waitForLocationChange
(
win
.
gBrowser
CANONICAL_URL
)
;
}
is
(
win
.
gBrowser
.
selectedTab
tab
"
The
captive
portal
tab
should
be
open
and
selected
in
the
new
window
.
"
)
;
testShowLoginPageButtonVisibility
(
notification
"
hidden
"
)
;
return
win
;
}
function
ensurePortalTab
(
win
)
{
is
(
win
.
gBrowser
.
tabs
.
length
2
"
There
should
be
a
captive
portal
tab
in
the
window
.
"
)
;
}
function
ensurePortalNotification
(
win
)
{
let
notificationBox
=
win
.
document
.
getElementById
(
"
high
-
priority
-
global
-
notificationbox
"
)
;
let
notification
=
notificationBox
.
getNotificationWithValue
(
PORTAL_NOTIFICATION_VALUE
)
isnot
(
notification
null
"
There
should
be
a
captive
portal
notification
in
the
window
.
"
)
;
return
notification
;
}
function
testShowLoginPageButtonVisibility
(
notification
visibility
)
{
let
showLoginPageButton
=
notification
.
querySelector
(
"
button
.
notification
-
button
"
)
;
is
(
showLoginPageButton
.
style
.
visibility
|
|
"
visible
"
visibility
"
The
\
"
Show
Login
Page
\
"
button
should
be
"
+
visibility
+
"
.
"
)
;
}
function
ensureNoPortalTab
(
win
)
{
is
(
win
.
gBrowser
.
tabs
.
length
1
"
There
should
be
no
captive
portal
tab
in
the
window
.
"
)
;
}
function
ensureNoPortalNotification
(
win
)
{
let
notificationBox
=
win
.
document
.
getElementById
(
"
high
-
priority
-
global
-
notificationbox
"
)
;
is
(
notificationBox
.
getNotificationWithValue
(
PORTAL_NOTIFICATION_VALUE
)
null
"
There
should
be
no
captive
portal
notification
in
the
window
.
"
)
;
}
function
waitForXulWindowVisible
(
)
{
return
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
function
observe
(
)
{
Services
.
obs
.
removeObserver
(
observe
"
xul
-
window
-
visible
"
)
;
resolve
(
)
;
}
"
xul
-
window
-
visible
"
false
)
;
}
)
;
}
function
*
closeWindowAndWaitForXulWindowVisible
(
win
)
{
let
p
=
waitForXulWindowVisible
(
)
;
yield
BrowserTestUtils
.
closeWindow
(
win
)
;
yield
p
;
}
let
testCasesForBothSuccessAndAbort
=
[
function
*
test_detectedWithNoBrowserWindow_Open
(
aSuccess
)
{
yield
portalDetectedNoBrowserWindow
(
)
;
let
win
=
yield
openWindowAndWaitForPortalUI
(
)
;
yield
freePortal
(
aSuccess
)
;
ensureNoPortalTab
(
win
)
;
ensureNoPortalNotification
(
win
)
;
yield
closeWindowAndWaitForXulWindowVisible
(
win
)
;
}
function
*
test_detectedWithNoBrowserWindow_LongRecheck
(
aSuccess
)
{
yield
portalDetectedNoBrowserWindow
(
)
;
let
win
=
yield
openWindowAndWaitForPortalUI
(
true
)
;
yield
freePortal
(
aSuccess
)
;
ensureNoPortalTab
(
win
)
;
ensureNoPortalNotification
(
win
)
;
yield
closeWindowAndWaitForXulWindowVisible
(
win
)
;
}
function
*
test_detectedWithNoBrowserWindow_GoneBeforeOpen
(
aSuccess
)
{
yield
portalDetectedNoBrowserWindow
(
)
;
yield
freePortal
(
aSuccess
)
;
let
win
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
yield
new
Promise
(
resolve
=
>
{
setTimeout
(
resolve
1000
)
;
}
)
;
ensureNoPortalTab
(
win
)
;
ensureNoPortalNotification
(
win
)
;
yield
closeWindowAndWaitForXulWindowVisible
(
win
)
;
}
function
*
test_detectedWithFocus
(
aSuccess
)
{
let
win1
=
RecentWindow
.
getMostRecentBrowserWindow
(
)
;
let
win2
=
yield
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
yield
portalDetected
(
)
;
ensureNoPortalTab
(
win1
)
;
ensureNoPortalTab
(
win2
)
;
ensurePortalNotification
(
win1
)
;
ensurePortalNotification
(
win2
)
;
yield
freePortal
(
aSuccess
)
;
ensureNoPortalNotification
(
win1
)
;
ensureNoPortalNotification
(
win2
)
;
yield
closeWindowAndWaitForXulWindowVisible
(
win2
)
;
}
]
;
let
singleRunTestCases
=
[
function
*
test_detectedWithNoBrowserWindow_Redirect
(
)
{
yield
portalDetectedNoBrowserWindow
(
)
;
let
win
=
yield
openWindowAndWaitForPortalUI
(
)
;
let
browser
=
win
.
gBrowser
.
selectedTab
.
linkedBrowser
;
let
loadPromise
=
BrowserTestUtils
.
browserLoaded
(
browser
false
CANONICAL_URL_REDIRECTED
)
;
BrowserTestUtils
.
loadURI
(
browser
CANONICAL_URL_REDIRECTED
)
;
yield
loadPromise
;
yield
freePortal
(
true
)
;
ensurePortalTab
(
win
)
;
ensureNoPortalNotification
(
win
)
;
yield
closeWindowAndWaitForXulWindowVisible
(
win
)
;
}
function
*
test_showLoginPageButton
(
)
{
let
win
=
RecentWindow
.
getMostRecentBrowserWindow
(
)
;
yield
portalDetected
(
)
;
let
notification
=
ensurePortalNotification
(
win
)
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
function
testPortalTabSelectedAndButtonNotVisible
(
)
{
is
(
win
.
gBrowser
.
selectedTab
tab
"
The
captive
portal
tab
should
be
selected
.
"
)
;
testShowLoginPageButtonVisibility
(
notification
"
hidden
"
)
;
}
let
button
=
notification
.
querySelector
(
"
button
.
notification
-
button
"
)
;
function
*
clickButtonAndExpectNewPortalTab
(
)
{
let
p
=
BrowserTestUtils
.
waitForNewTab
(
win
.
gBrowser
CANONICAL_URL
)
;
button
.
click
(
)
;
let
tab
=
yield
p
;
is
(
win
.
gBrowser
.
selectedTab
tab
"
The
captive
portal
tab
should
be
selected
.
"
)
;
return
tab
;
}
let
tab
=
yield
clickButtonAndExpectNewPortalTab
(
)
;
testPortalTabSelectedAndButtonNotVisible
(
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
ensureNoPortalTab
(
win
)
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
tab
=
yield
clickButtonAndExpectNewPortalTab
(
)
;
let
anotherTab
=
yield
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
)
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
button
.
click
(
)
;
is
(
win
.
gBrowser
.
selectedTab
tab
"
The
captive
portal
tab
should
be
selected
.
"
)
;
yield
BrowserTestUtils
.
removeTab
(
tab
)
;
win
.
gBrowser
.
selectedTab
=
anotherTab
;
testShowLoginPageButtonVisibility
(
notification
"
visible
"
)
;
tab
=
yield
clickButtonAndExpectNewPortalTab
(
)
;
yield
BrowserTestUtils
.
removeTab
(
anotherTab
)
;
yield
freePortal
(
true
)
;
ensureNoPortalTab
(
win
)
;
ensureNoPortalNotification
(
win
)
;
}
]
;
for
(
let
testcase
of
testCasesForBothSuccessAndAbort
)
{
add_task
(
testcase
.
bind
(
null
true
)
)
;
add_task
(
testcase
.
bind
(
null
false
)
)
;
}
for
(
let
testcase
of
singleRunTestCases
)
{
add_task
(
testcase
)
;
}
