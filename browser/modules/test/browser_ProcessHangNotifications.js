Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
UpdateUtils
.
jsm
"
)
;
function
getNotificationBox
(
aWindow
)
{
return
aWindow
.
document
.
getElementById
(
"
high
-
priority
-
global
-
notificationbox
"
)
;
}
function
promiseNotificationShown
(
aWindow
aName
)
{
return
new
Promise
(
(
resolve
)
=
>
{
let
notification
=
getNotificationBox
(
aWindow
)
;
notification
.
addEventListener
(
"
AlertActive
"
function
active
(
)
{
notification
.
removeEventListener
(
"
AlertActive
"
active
true
)
;
is
(
notification
.
allNotifications
.
length
1
"
Notification
Displayed
.
"
)
;
resolve
(
notification
)
;
}
)
;
}
)
;
}
function
promiseReportCallMade
(
aValue
)
{
return
new
Promise
(
(
resolve
)
=
>
{
let
old
=
gTestHangReport
.
testCallback
;
gTestHangReport
.
testCallback
=
function
(
val
)
{
gTestHangReport
.
testCallback
=
old
;
is
(
aValue
val
"
was
the
correct
method
call
made
on
the
hang
report
object
?
"
)
;
resolve
(
)
;
}
;
}
)
;
}
function
pushPrefs
(
.
.
.
aPrefs
)
{
return
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
aPrefs
}
)
;
}
function
popPrefs
(
)
{
return
new
Promise
(
(
resolve
)
=
>
{
SpecialPowers
.
popPrefEnv
(
resolve
)
;
resolve
(
)
;
}
)
;
}
let
gTestHangReport
=
{
SLOW_SCRIPT
:
1
PLUGIN_HANG
:
2
TEST_CALLBACK_CANCELED
:
1
TEST_CALLBACK_TERMSCRIPT
:
2
TEST_CALLBACK_TERMPLUGIN
:
3
_hangType
:
1
_tcb
:
function
(
aCallbackType
)
{
}
get
hangType
(
)
{
return
this
.
_hangType
;
}
set
hangType
(
aValue
)
{
this
.
_hangType
=
aValue
;
}
set
testCallback
(
aValue
)
{
this
.
_tcb
=
aValue
;
}
QueryInterface
:
function
(
aIID
)
{
if
(
aIID
.
equals
(
Components
.
interfaces
.
nsIHangReport
)
|
|
aIID
.
equals
(
Components
.
interfaces
.
nsISupports
)
)
return
this
;
throw
Components
.
results
.
NS_NOINTERFACE
;
}
userCanceled
:
function
(
)
{
this
.
_tcb
(
this
.
TEST_CALLBACK_CANCELED
)
;
}
terminateScript
:
function
(
)
{
this
.
_tcb
(
this
.
TEST_CALLBACK_TERMSCRIPT
)
;
}
terminatePlugin
:
function
(
)
{
this
.
_tcb
(
this
.
TEST_CALLBACK_TERMPLUGIN
)
;
}
isReportForBrowser
:
function
(
aFrameLoader
)
{
return
true
;
}
}
;
let
buttonCount
=
(
UpdateUtils
.
UpdateChannel
=
=
"
aurora
"
?
3
:
2
)
;
add_task
(
function
*
terminateScriptTest
(
)
{
let
promise
=
promiseNotificationShown
(
window
"
process
-
hang
"
)
;
Services
.
obs
.
notifyObservers
(
gTestHangReport
"
process
-
hang
-
report
"
null
)
;
let
notification
=
yield
promise
;
let
buttons
=
notification
.
currentNotification
.
getElementsByTagName
(
"
button
"
)
;
gTestHangReport
.
hangType
=
gTestHangReport
.
SLOW_SCRIPT
;
promise
=
promiseReportCallMade
(
gTestHangReport
.
TEST_CALLBACK_TERMSCRIPT
)
;
buttons
[
0
]
.
click
(
)
;
yield
promise
;
}
)
;
add_task
(
function
*
waitForScriptTest
(
)
{
let
promise
=
promiseNotificationShown
(
window
"
process
-
hang
"
)
;
Services
.
obs
.
notifyObservers
(
gTestHangReport
"
process
-
hang
-
report
"
null
)
;
let
notification
=
yield
promise
;
let
buttons
=
notification
.
currentNotification
.
getElementsByTagName
(
"
button
"
)
;
yield
pushPrefs
(
[
"
browser
.
hangNotification
.
waitPeriod
"
1000
]
)
;
function
nocbcheck
(
)
{
ok
(
false
"
received
a
callback
?
"
)
;
}
let
oldcb
=
gTestHangReport
.
testCallback
;
gTestHangReport
.
testCallback
=
nocbcheck
;
buttons
[
1
]
.
click
(
)
;
gTestHangReport
.
testCallback
=
oldcb
;
Services
.
obs
.
notifyObservers
(
gTestHangReport
"
process
-
hang
-
report
"
null
)
;
is
(
notification
.
currentNotification
null
"
no
notification
should
be
visible
"
)
;
gTestHangReport
.
testCallback
=
function
(
)
{
}
;
Services
.
obs
.
notifyObservers
(
gTestHangReport
"
clear
-
hang
-
report
"
null
)
;
gTestHangReport
.
testCallback
=
oldcb
;
yield
popPrefs
(
)
;
}
)
;
add_task
(
function
*
hangGoesAwayTest
(
)
{
yield
pushPrefs
(
[
"
browser
.
hangNotification
.
expiration
"
1000
]
)
;
let
promise
=
promiseNotificationShown
(
window
"
process
-
hang
"
)
;
Services
.
obs
.
notifyObservers
(
gTestHangReport
"
process
-
hang
-
report
"
null
)
;
yield
promise
;
promise
=
promiseReportCallMade
(
gTestHangReport
.
TEST_CALLBACK_CANCELED
)
;
Services
.
obs
.
notifyObservers
(
gTestHangReport
"
clear
-
hang
-
report
"
null
)
;
yield
promise
;
yield
popPrefs
(
)
;
}
)
;
add_task
(
function
*
terminatePluginTest
(
)
{
let
promise
=
promiseNotificationShown
(
window
"
process
-
hang
"
)
;
Services
.
obs
.
notifyObservers
(
gTestHangReport
"
process
-
hang
-
report
"
null
)
;
let
notification
=
yield
promise
;
let
buttons
=
notification
.
currentNotification
.
getElementsByTagName
(
"
button
"
)
;
gTestHangReport
.
hangType
=
gTestHangReport
.
PLUGIN_HANG
;
promise
=
promiseReportCallMade
(
gTestHangReport
.
TEST_CALLBACK_TERMPLUGIN
)
;
buttons
[
0
]
.
click
(
)
;
yield
promise
;
}
)
;
