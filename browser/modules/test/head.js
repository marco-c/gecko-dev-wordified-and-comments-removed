Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
;
const
SINGLE_TRY_TIMEOUT
=
100
;
const
NUMBER_OF_TRIES
=
30
;
function
waitForConditionPromise
(
condition
timeoutMsg
tryCount
=
NUMBER_OF_TRIES
)
{
let
defer
=
Promise
.
defer
(
)
;
let
tries
=
0
;
function
checkCondition
(
)
{
if
(
tries
>
=
tryCount
)
{
defer
.
reject
(
timeoutMsg
)
;
}
var
conditionPassed
;
try
{
conditionPassed
=
condition
(
)
;
}
catch
(
e
)
{
return
defer
.
reject
(
e
)
;
}
if
(
conditionPassed
)
{
return
defer
.
resolve
(
)
;
}
tries
+
+
;
setTimeout
(
checkCondition
SINGLE_TRY_TIMEOUT
)
;
return
undefined
;
}
setTimeout
(
checkCondition
SINGLE_TRY_TIMEOUT
)
;
return
defer
.
promise
;
}
function
waitForCondition
(
condition
nextTest
errorMsg
)
{
waitForConditionPromise
(
condition
errorMsg
)
.
then
(
nextTest
(
reason
)
=
>
{
ok
(
false
reason
+
(
reason
.
stack
?
"
\
n
"
+
reason
.
stack
:
"
"
)
)
;
}
)
;
}
function
checkKeyedScalar
(
scalars
scalarName
key
expectedValue
)
{
Assert
.
ok
(
scalarName
in
scalars
scalarName
+
"
must
be
recorded
.
"
)
;
Assert
.
ok
(
key
in
scalars
[
scalarName
]
scalarName
+
"
must
contain
the
'
"
+
key
+
"
'
key
.
"
)
;
Assert
.
ok
(
scalars
[
scalarName
]
[
key
]
expectedValue
scalarName
+
"
[
'
"
+
key
+
"
'
]
must
contain
the
expected
value
"
)
;
}
let
typeInSearchField
=
Task
.
async
(
function
*
(
browser
text
fieldName
)
{
yield
ContentTask
.
spawn
(
browser
[
fieldName
text
]
function
*
(
[
contentFieldName
contentText
]
)
{
if
(
contentFieldName
=
=
=
"
searchText
"
)
{
content
.
wrappedJSObject
.
gContentSearchController
.
remoteTimeout
=
5000
;
}
let
searchInput
=
content
.
document
.
getElementById
(
contentFieldName
)
;
searchInput
.
focus
(
)
;
searchInput
.
value
=
contentText
;
}
)
;
}
)
;
