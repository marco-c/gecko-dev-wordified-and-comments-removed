"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
Social
"
"
OpenGraphBuilder
"
"
DynamicResizeWatcher
"
"
sizeSocialPanelToContent
"
]
;
const
Ci
=
Components
.
interfaces
;
const
Cc
=
Components
.
classes
;
const
Cu
=
Components
.
utils
;
const
PANEL_MIN_HEIGHT
=
190
;
const
PANEL_MIN_WIDTH
=
330
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
SocialService
"
"
resource
:
/
/
/
modules
/
SocialService
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PageMetadata
"
"
resource
:
/
/
gre
/
modules
/
PageMetadata
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Promise
"
"
resource
:
/
/
gre
/
modules
/
Promise
.
jsm
"
)
;
this
.
Social
=
{
initialized
:
false
lastEventReceived
:
0
providers
:
[
]
_disabledForSafeMode
:
false
init
:
function
Social_init
(
)
{
this
.
_disabledForSafeMode
=
Services
.
appinfo
.
inSafeMode
&
&
this
.
enabled
;
let
deferred
=
Promise
.
defer
(
)
;
if
(
this
.
initialized
)
{
deferred
.
resolve
(
true
)
;
return
deferred
.
promise
;
}
this
.
initialized
=
true
;
if
(
SocialService
.
hasEnabledProviders
)
{
SocialService
.
getOrderedProviderList
(
function
(
providers
)
{
Social
.
_updateProviderCache
(
providers
)
;
Social
.
_updateEnabledState
(
SocialService
.
enabled
)
;
deferred
.
resolve
(
false
)
;
}
)
;
}
else
{
deferred
.
resolve
(
false
)
;
}
SocialService
.
registerProviderListener
(
function
providerListener
(
topic
origin
providers
)
{
if
(
topic
=
=
"
provider
-
installed
"
|
|
topic
=
=
"
provider
-
uninstalled
"
)
{
Services
.
obs
.
notifyObservers
(
null
"
social
:
"
+
topic
origin
)
;
return
;
}
if
(
topic
=
=
"
provider
-
enabled
"
)
{
Social
.
_updateProviderCache
(
providers
)
;
Social
.
_updateEnabledState
(
true
)
;
Services
.
obs
.
notifyObservers
(
null
"
social
:
"
+
topic
origin
)
;
return
;
}
if
(
topic
=
=
"
provider
-
disabled
"
)
{
Social
.
_updateProviderCache
(
providers
)
;
Social
.
_updateEnabledState
(
providers
.
length
>
0
)
;
Services
.
obs
.
notifyObservers
(
null
"
social
:
"
+
topic
origin
)
;
return
;
}
if
(
topic
=
=
"
provider
-
update
"
)
{
Social
.
_updateProviderCache
(
providers
)
;
let
provider
=
Social
.
_getProviderFromOrigin
(
origin
)
;
provider
.
reload
(
)
;
}
}
)
;
return
deferred
.
promise
;
}
_updateEnabledState
(
enable
)
{
for
(
let
p
of
Social
.
providers
)
{
p
.
enabled
=
enable
;
}
}
_updateProviderCache
(
providers
)
{
this
.
providers
=
providers
;
Services
.
obs
.
notifyObservers
(
null
"
social
:
providers
-
changed
"
null
)
;
}
get
enabled
(
)
{
return
!
this
.
_disabledForSafeMode
&
&
this
.
providers
.
length
>
0
;
}
_getProviderFromOrigin
(
origin
)
{
for
(
let
p
of
this
.
providers
)
{
if
(
p
.
origin
=
=
origin
)
{
return
p
;
}
}
return
null
;
}
getManifestByOrigin
(
origin
)
{
return
SocialService
.
getManifestByOrigin
(
origin
)
;
}
installProvider
(
data
installCallback
options
=
{
}
)
{
SocialService
.
installProvider
(
data
installCallback
options
)
;
}
uninstallProvider
(
origin
aCallback
)
{
SocialService
.
uninstallProvider
(
origin
aCallback
)
;
}
activateFromOrigin
(
origin
callback
)
{
SocialService
.
enableProvider
(
origin
callback
)
;
}
}
;
function
sizeSocialPanelToContent
(
panel
iframe
requestedSize
)
{
let
doc
=
iframe
.
contentDocument
;
if
(
!
doc
|
|
!
doc
.
body
)
{
return
;
}
let
body
=
doc
.
body
;
let
docEl
=
doc
.
documentElement
;
let
bodyId
=
body
.
getAttribute
(
"
contentid
"
)
;
if
(
bodyId
)
{
body
=
doc
.
getElementById
(
bodyId
)
|
|
doc
.
body
;
}
let
cs
=
doc
.
defaultView
.
getComputedStyle
(
body
)
;
let
width
=
Math
.
max
(
PANEL_MIN_WIDTH
docEl
.
offsetWidth
)
;
let
height
=
Math
.
max
(
PANEL_MIN_HEIGHT
docEl
.
offsetHeight
)
;
if
(
cs
)
{
let
computedHeight
=
parseInt
(
cs
.
marginTop
)
+
body
.
offsetHeight
+
parseInt
(
cs
.
marginBottom
)
;
height
=
Math
.
max
(
computedHeight
height
)
;
let
computedWidth
=
parseInt
(
cs
.
marginLeft
)
+
body
.
offsetWidth
+
parseInt
(
cs
.
marginRight
)
;
width
=
Math
.
max
(
computedWidth
width
)
;
}
if
(
docEl
.
scrollHeight
>
iframe
.
boxObject
.
height
)
height
=
docEl
.
scrollHeight
;
if
(
requestedSize
)
{
if
(
requestedSize
.
height
)
height
=
Math
.
max
(
height
requestedSize
.
height
)
;
if
(
requestedSize
.
width
)
width
=
Math
.
max
(
width
requestedSize
.
width
)
;
}
if
(
iframe
.
boxObject
.
width
&
&
iframe
.
boxObject
.
height
)
{
width
+
=
panel
.
boxObject
.
width
-
iframe
.
boxObject
.
width
;
height
+
=
panel
.
boxObject
.
height
-
iframe
.
boxObject
.
height
;
}
if
(
Math
.
abs
(
panel
.
boxObject
.
width
-
width
)
>
=
2
)
panel
.
style
.
width
=
width
+
"
px
"
;
if
(
Math
.
abs
(
panel
.
boxObject
.
height
-
height
)
>
=
2
)
panel
.
style
.
height
=
height
+
"
px
"
;
}
function
DynamicResizeWatcher
(
)
{
this
.
_mutationObserver
=
null
;
}
DynamicResizeWatcher
.
prototype
=
{
start
:
function
DynamicResizeWatcher_start
(
panel
iframe
requestedSize
)
{
this
.
stop
(
)
;
let
doc
=
iframe
.
contentDocument
;
this
.
_mutationObserver
=
new
iframe
.
contentWindow
.
MutationObserver
(
(
mutations
)
=
>
{
sizeSocialPanelToContent
(
panel
iframe
requestedSize
)
;
}
)
;
let
config
=
{
attributes
:
true
characterData
:
true
childList
:
true
subtree
:
true
}
;
this
.
_mutationObserver
.
observe
(
doc
config
)
;
sizeSocialPanelToContent
(
panel
iframe
requestedSize
)
;
}
stop
:
function
DynamicResizeWatcher_stop
(
)
{
if
(
this
.
_mutationObserver
)
{
try
{
this
.
_mutationObserver
.
disconnect
(
)
;
}
catch
(
ex
)
{
}
this
.
_mutationObserver
=
null
;
}
}
}
this
.
OpenGraphBuilder
=
{
generateEndpointURL
(
URLTemplate
pageData
)
{
let
[
endpointURL
queryString
]
=
URLTemplate
.
split
(
"
?
"
)
;
let
query
=
{
}
;
if
(
queryString
)
{
queryString
.
split
(
'
&
'
)
.
forEach
(
function
(
val
)
{
let
[
name
value
]
=
val
.
split
(
'
=
'
)
;
let
p
=
/
%
\
{
(
.
+
)
\
}
/
.
exec
(
value
)
;
if
(
!
p
)
{
query
[
name
]
=
value
;
}
else
if
(
pageData
[
p
[
1
]
]
)
{
if
(
p
[
1
]
=
=
"
previews
"
)
query
[
name
]
=
pageData
[
p
[
1
]
]
[
0
]
;
else
query
[
name
]
=
pageData
[
p
[
1
]
]
;
}
else
if
(
p
[
1
]
=
=
"
body
"
)
{
let
body
=
"
"
;
if
(
pageData
.
title
)
body
+
=
pageData
.
title
+
"
\
n
\
n
"
;
if
(
pageData
.
description
)
body
+
=
pageData
.
description
+
"
\
n
\
n
"
;
if
(
pageData
.
text
)
body
+
=
pageData
.
text
+
"
\
n
\
n
"
;
body
+
=
pageData
.
url
;
query
[
"
body
"
]
=
body
;
}
}
)
;
if
(
!
query
.
text
&
&
!
query
.
title
&
&
pageData
.
title
)
{
query
.
text
=
pageData
.
title
;
}
}
var
str
=
[
]
;
for
(
let
p
in
query
)
str
.
push
(
p
+
"
=
"
+
encodeURIComponent
(
query
[
p
]
)
)
;
if
(
str
.
length
)
endpointURL
=
endpointURL
+
"
?
"
+
str
.
join
(
"
&
"
)
;
return
endpointURL
;
}
}
;
