"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ZoomUI
"
]
;
const
gLoadContext
=
Cu
.
createLoadContext
(
)
;
const
gContentPrefs
=
Cc
[
"
mozilla
.
org
/
content
-
pref
/
service
;
1
"
]
.
getService
(
Ci
.
nsIContentPrefService2
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
gZoomPropertyName
=
"
browser
.
content
.
full
-
zoom
"
;
const
lazy
=
{
}
;
ChromeUtils
.
defineModuleGetter
(
lazy
"
PanelMultiView
"
"
resource
:
/
/
/
modules
/
PanelMultiView
.
jsm
"
)
;
var
ZoomUI
=
{
init
(
aWindow
)
{
aWindow
.
addEventListener
(
"
EndSwapDocShells
"
onEndSwapDocShells
true
)
;
aWindow
.
addEventListener
(
"
FullZoomChange
"
onZoomChange
)
;
aWindow
.
addEventListener
(
"
TextZoomChange
"
onZoomChange
)
;
aWindow
.
addEventListener
(
"
unload
"
(
)
=
>
{
aWindow
.
removeEventListener
(
"
EndSwapDocShells
"
onEndSwapDocShells
true
)
;
aWindow
.
removeEventListener
(
"
FullZoomChange
"
onZoomChange
)
;
aWindow
.
removeEventListener
(
"
TextZoomChange
"
onZoomChange
)
;
}
{
once
:
true
}
)
;
}
getGlobalValue
(
)
{
return
new
Promise
(
resolve
=
>
{
let
cachedVal
=
gContentPrefs
.
getCachedGlobal
(
gZoomPropertyName
gLoadContext
)
;
if
(
cachedVal
)
{
resolve
(
parseFloat
(
cachedVal
.
value
)
|
|
1
.
0
)
;
return
;
}
let
value
=
1
.
0
;
gContentPrefs
.
getGlobal
(
gZoomPropertyName
gLoadContext
{
handleResult
(
pref
)
{
if
(
pref
.
value
)
{
value
=
parseFloat
(
pref
.
value
)
;
}
}
handleCompletion
(
reason
)
{
resolve
(
value
)
;
}
handleError
(
error
)
{
Cu
.
reportError
(
error
)
;
}
}
)
;
}
)
;
}
}
;
function
fullZoomLocationChangeObserver
(
aSubject
aTopic
)
{
if
(
!
aSubject
.
ownerGlobal
)
{
return
;
}
updateZoomUI
(
aSubject
false
)
;
}
Services
.
obs
.
addObserver
(
fullZoomLocationChangeObserver
"
browser
-
fullZoom
:
location
-
change
"
)
;
function
onEndSwapDocShells
(
event
)
{
updateZoomUI
(
event
.
originalTarget
)
;
}
function
onZoomChange
(
event
)
{
let
browser
;
if
(
event
.
target
.
nodeType
=
=
event
.
target
.
DOCUMENT_NODE
)
{
let
topDoc
=
event
.
target
.
defaultView
.
top
.
document
;
if
(
!
topDoc
.
documentElement
)
{
return
;
}
browser
=
topDoc
.
ownerGlobal
.
docShell
.
chromeEventHandler
;
}
else
{
browser
=
event
.
originalTarget
;
}
updateZoomUI
(
browser
true
)
;
}
async
function
updateZoomUI
(
aBrowser
aAnimate
=
false
)
{
let
win
=
aBrowser
.
ownerGlobal
;
if
(
!
win
.
gBrowser
|
|
win
.
gBrowser
.
selectedBrowser
!
=
aBrowser
)
{
return
;
}
let
appMenuZoomReset
=
lazy
.
PanelMultiView
.
getViewNode
(
win
.
document
"
appMenu
-
zoomReset
-
button2
"
)
;
if
(
!
appMenuZoomReset
)
{
return
;
}
let
customizableZoomControls
=
win
.
document
.
getElementById
(
"
zoom
-
controls
"
)
;
let
customizableZoomReset
=
win
.
document
.
getElementById
(
"
zoom
-
reset
-
button
"
)
;
let
urlbarZoomButton
=
win
.
document
.
getElementById
(
"
urlbar
-
zoom
-
button
"
)
;
let
zoomFactor
=
Math
.
round
(
win
.
ZoomManager
.
zoom
*
100
)
;
let
defaultZoom
=
Math
.
round
(
(
await
ZoomUI
.
getGlobalValue
(
)
)
*
100
)
;
if
(
!
win
.
gBrowser
|
|
win
.
gBrowser
.
selectedBrowser
!
=
aBrowser
)
{
return
;
}
urlbarZoomButton
.
hidden
=
defaultZoom
=
=
zoomFactor
|
|
(
aBrowser
.
currentURI
.
spec
=
=
"
about
:
blank
"
&
&
(
!
aBrowser
.
contentPrincipal
|
|
aBrowser
.
contentPrincipal
.
isNullPrincipal
)
)
|
|
(
aBrowser
.
contentPrincipal
&
&
aBrowser
.
contentPrincipal
.
spec
=
=
"
resource
:
/
/
pdf
.
js
/
web
/
viewer
.
html
"
)
|
|
(
customizableZoomControls
&
&
customizableZoomControls
.
getAttribute
(
"
cui
-
areatype
"
)
=
=
"
toolbar
"
)
;
let
label
=
win
.
gNavigatorBundle
.
getFormattedString
(
"
zoom
-
button
.
label
"
[
zoomFactor
]
)
;
if
(
appMenuZoomReset
)
{
appMenuZoomReset
.
setAttribute
(
"
label
"
label
)
;
}
if
(
customizableZoomReset
)
{
customizableZoomReset
.
setAttribute
(
"
label
"
label
)
;
}
if
(
!
urlbarZoomButton
.
hidden
)
{
if
(
aAnimate
&
&
!
win
.
gReduceMotion
)
{
urlbarZoomButton
.
setAttribute
(
"
animate
"
"
true
"
)
;
}
else
{
urlbarZoomButton
.
removeAttribute
(
"
animate
"
)
;
}
urlbarZoomButton
.
setAttribute
(
"
label
"
label
)
;
}
win
.
FullZoom
.
updateCommands
(
)
;
}
const
{
CustomizableUI
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
let
customizationListener
=
{
}
;
customizationListener
.
onWidgetAdded
=
customizationListener
.
onWidgetRemoved
=
customizationListener
.
onWidgetMoved
=
function
(
aWidgetId
)
{
if
(
aWidgetId
=
=
"
zoom
-
controls
"
)
{
for
(
let
window
of
CustomizableUI
.
windows
)
{
updateZoomUI
(
window
.
gBrowser
.
selectedBrowser
)
;
}
}
}
;
customizationListener
.
onWidgetReset
=
customizationListener
.
onWidgetUndoMove
=
function
(
aWidgetNode
)
{
if
(
aWidgetNode
.
id
=
=
"
zoom
-
controls
"
)
{
updateZoomUI
(
aWidgetNode
.
ownerGlobal
.
gBrowser
.
selectedBrowser
)
;
}
}
;
CustomizableUI
.
addListener
(
customizationListener
)
;
