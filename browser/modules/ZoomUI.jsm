"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ZoomUI
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
ZoomUI
=
{
init
(
aWindow
)
{
aWindow
.
addEventListener
(
"
EndSwapDocShells
"
onEndSwapDocShells
true
)
;
aWindow
.
addEventListener
(
"
FullZoomChange
"
onZoomChange
)
;
aWindow
.
addEventListener
(
"
TextZoomChange
"
onZoomChange
)
;
aWindow
.
addEventListener
(
"
unload
"
(
)
=
>
{
aWindow
.
removeEventListener
(
"
EndSwapDocShells
"
onEndSwapDocShells
true
)
;
aWindow
.
removeEventListener
(
"
FullZoomChange
"
onZoomChange
)
;
aWindow
.
removeEventListener
(
"
TextZoomChange
"
onZoomChange
)
;
}
{
once
:
true
}
)
;
}
}
;
function
fullZoomLocationChangeObserver
(
aSubject
aTopic
)
{
if
(
!
aSubject
.
ownerGlobal
)
{
return
;
}
updateZoomUI
(
aSubject
false
)
;
}
Services
.
obs
.
addObserver
(
fullZoomLocationChangeObserver
"
browser
-
fullZoom
:
location
-
change
"
)
;
function
onEndSwapDocShells
(
event
)
{
updateZoomUI
(
event
.
originalTarget
)
;
}
function
onZoomChange
(
event
)
{
let
browser
;
if
(
event
.
target
.
nodeType
=
=
event
.
target
.
DOCUMENT_NODE
)
{
let
gBrowser
=
event
.
currentTarget
.
gBrowser
;
let
topDoc
=
event
.
target
.
defaultView
.
top
.
document
;
if
(
!
topDoc
.
documentElement
)
{
return
;
}
browser
=
gBrowser
.
getBrowserForDocument
(
topDoc
)
;
}
else
{
browser
=
event
.
originalTarget
;
}
updateZoomUI
(
browser
true
)
;
}
function
updateZoomUI
(
aBrowser
aAnimate
=
false
)
{
let
win
=
aBrowser
.
ownerGlobal
;
if
(
!
win
.
gBrowser
|
|
win
.
gBrowser
.
selectedBrowser
!
=
aBrowser
)
{
return
;
}
let
appMenuZoomReset
=
win
.
document
.
getElementById
(
"
appMenu
-
zoomReset
-
button
"
)
;
let
customizableZoomControls
=
win
.
document
.
getElementById
(
"
zoom
-
controls
"
)
;
let
customizableZoomReset
=
win
.
document
.
getElementById
(
"
zoom
-
reset
-
button
"
)
;
let
urlbarZoomButton
=
win
.
document
.
getElementById
(
"
urlbar
-
zoom
-
button
"
)
;
let
zoomFactor
=
Math
.
round
(
win
.
ZoomManager
.
zoom
*
100
)
;
urlbarZoomButton
.
hidden
=
(
zoomFactor
=
=
100
|
|
(
customizableZoomControls
&
&
customizableZoomControls
.
getAttribute
(
"
cui
-
areatype
"
)
=
=
"
toolbar
"
)
)
;
let
label
=
win
.
gNavigatorBundle
.
getFormattedString
(
"
zoom
-
button
.
label
"
[
zoomFactor
]
)
;
if
(
appMenuZoomReset
)
{
appMenuZoomReset
.
setAttribute
(
"
label
"
label
)
;
}
if
(
customizableZoomReset
)
{
customizableZoomReset
.
setAttribute
(
"
label
"
label
)
;
}
if
(
!
urlbarZoomButton
.
hidden
)
{
if
(
aAnimate
)
{
urlbarZoomButton
.
setAttribute
(
"
animate
"
"
true
"
)
;
}
else
{
urlbarZoomButton
.
removeAttribute
(
"
animate
"
)
;
}
urlbarZoomButton
.
setAttribute
(
"
label
"
label
)
;
}
}
ChromeUtils
.
import
(
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
let
customizationListener
=
{
}
;
customizationListener
.
onWidgetAdded
=
customizationListener
.
onWidgetRemoved
=
customizationListener
.
onWidgetMoved
=
function
(
aWidgetId
)
{
if
(
aWidgetId
=
=
"
zoom
-
controls
"
)
{
for
(
let
window
of
CustomizableUI
.
windows
)
{
updateZoomUI
(
window
.
gBrowser
.
selectedBrowser
)
;
}
}
}
;
customizationListener
.
onWidgetReset
=
customizationListener
.
onWidgetUndoMove
=
function
(
aWidgetNode
)
{
if
(
aWidgetNode
.
id
=
=
"
zoom
-
controls
"
)
{
updateZoomUI
(
aWidgetNode
.
ownerGlobal
.
gBrowser
.
selectedBrowser
)
;
}
}
;
CustomizableUI
.
addListener
(
customizationListener
)
;
