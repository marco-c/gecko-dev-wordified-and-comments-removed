"
use
strict
"
;
const
{
utils
:
Cu
interfaces
:
Ci
classes
:
Cc
}
=
Components
;
Cu
.
importGlobalProperties
(
[
"
URL
"
]
)
;
const
TIMEOUT_DELAY
=
1000
;
const
DESCRIPTION_RULES
=
[
"
twitter
:
description
"
"
description
"
"
og
:
description
"
]
;
const
PREVIEW_IMAGE_RULES
=
[
"
thumbnail
"
"
twitter
:
image
"
"
og
:
image
"
"
og
:
image
:
url
"
"
og
:
image
:
secure_url
"
]
;
function
shouldExtractMetadata
(
aRules
aTag
aEntry
)
{
return
aRules
.
indexOf
(
aTag
)
>
aEntry
.
currMaxScore
;
}
this
.
EXPORTED_SYMBOLS
=
[
"
ContentMetaHandler
"
]
;
this
.
ContentMetaHandler
=
{
init
(
chromeGlobal
)
{
const
metaTags
=
new
Map
(
)
;
chromeGlobal
.
addEventListener
(
"
DOMMetaAdded
"
event
=
>
{
const
metaTag
=
event
.
originalTarget
;
const
window
=
metaTag
.
ownerGlobal
;
if
(
!
metaTag
|
|
!
metaTag
.
ownerDocument
|
|
window
!
=
window
.
top
)
{
return
;
}
this
.
handleMetaTag
(
metaTag
chromeGlobal
metaTags
)
;
}
)
;
}
handleMetaTag
(
metaTag
chromeGlobal
metaTags
)
{
const
url
=
metaTag
.
ownerDocument
.
documentURI
;
let
name
=
metaTag
.
name
;
let
prop
=
metaTag
.
getAttributeNS
(
null
"
property
"
)
;
if
(
!
name
&
&
!
prop
)
{
return
;
}
let
tag
=
name
|
|
prop
;
const
entry
=
metaTags
.
get
(
url
)
|
|
{
description
:
{
value
:
null
currMaxScore
:
-
1
}
image
:
{
value
:
null
currMaxScore
:
-
1
}
timeout
:
null
}
;
if
(
shouldExtractMetadata
(
DESCRIPTION_RULES
tag
entry
.
description
)
)
{
const
value
=
metaTag
.
getAttributeNS
(
null
"
content
"
)
;
if
(
value
)
{
entry
.
description
.
value
=
value
;
entry
.
description
.
currMaxScore
=
DESCRIPTION_RULES
.
indexOf
(
tag
)
;
}
}
else
if
(
shouldExtractMetadata
(
PREVIEW_IMAGE_RULES
tag
entry
.
image
)
)
{
const
value
=
metaTag
.
getAttributeNS
(
null
"
content
"
)
;
if
(
value
)
{
entry
.
image
.
value
=
new
URL
(
value
url
)
.
href
;
entry
.
image
.
currMaxScore
=
PREVIEW_IMAGE_RULES
.
indexOf
(
tag
)
;
}
}
else
{
return
;
}
if
(
!
metaTags
.
has
(
url
)
)
{
metaTags
.
set
(
url
entry
)
;
}
if
(
entry
.
timeout
)
{
entry
.
timeout
.
delay
=
TIMEOUT_DELAY
;
}
else
{
entry
.
timeout
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
entry
.
timeout
.
initWithCallback
(
(
)
=
>
{
entry
.
timeout
=
null
;
chromeGlobal
.
sendAsyncMessage
(
"
Meta
:
SetPageInfo
"
{
url
description
:
entry
.
description
.
value
previewImageURL
:
entry
.
image
.
value
}
)
;
metaTags
.
delete
(
url
)
;
}
TIMEOUT_DELAY
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
}
}
}
;
