"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
PermissionUI
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
SitePermissions
"
"
resource
:
/
/
/
modules
/
SitePermissions
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
URICountListener
"
"
resource
:
/
/
/
modules
/
BrowserUsageTelemetry
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
IDNService
"
"
mozilla
.
org
/
network
/
idn
-
service
;
1
"
"
nsIIDNService
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gBrowserBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
browser
.
properties
"
)
;
}
)
;
var
PermissionUI
=
{
}
;
var
PermissionPromptPrototype
=
{
get
browser
(
)
{
throw
new
Error
(
"
Not
implemented
.
"
)
;
}
get
principal
(
)
{
throw
new
Error
(
"
Not
implemented
.
"
)
;
}
get
principalName
(
)
{
if
(
this
.
principal
.
addonPolicy
)
{
return
this
.
principal
.
addonPolicy
.
name
;
}
return
this
.
principal
.
URI
.
hostPort
;
}
get
permissionKey
(
)
{
return
undefined
;
}
get
usePermissionManager
(
)
{
return
true
;
}
get
popupOptions
(
)
{
return
{
}
;
}
get
notificationID
(
)
{
throw
new
Error
(
"
Not
implemented
.
"
)
;
}
get
anchorID
(
)
{
return
"
default
-
notification
-
icon
"
;
}
get
message
(
)
{
throw
new
Error
(
"
Not
implemented
.
"
)
;
}
cancel
(
)
{
throw
new
Error
(
"
Not
implemented
.
"
)
;
}
allow
(
)
{
throw
new
Error
(
"
Not
implemented
.
"
)
;
}
get
promptActions
(
)
{
return
[
]
;
}
onBeforeShow
(
)
{
return
true
;
}
onShown
(
)
{
}
onAfterShow
(
)
{
}
prompt
(
)
{
let
requestingURI
=
this
.
principal
.
URI
;
if
(
!
(
requestingURI
instanceof
Ci
.
nsIStandardURL
)
)
{
return
;
}
if
(
this
.
usePermissionManager
&
&
this
.
permissionKey
)
{
let
{
state
}
=
SitePermissions
.
get
(
requestingURI
this
.
permissionKey
this
.
browser
)
;
if
(
state
=
=
SitePermissions
.
BLOCK
)
{
if
(
state
=
=
SitePermissions
.
getDefault
(
this
.
permissionKey
)
&
&
SitePermissions
.
showGloballyBlocked
(
this
.
permissionKey
)
)
{
SitePermissions
.
set
(
this
.
principal
.
URI
this
.
permissionKey
state
SitePermissions
.
SCOPE_GLOBAL
this
.
browser
)
;
}
this
.
cancel
(
)
;
return
;
}
if
(
state
=
=
SitePermissions
.
ALLOW
)
{
this
.
allow
(
)
;
return
;
}
this
.
browser
.
dispatchEvent
(
new
this
.
browser
.
ownerGlobal
.
CustomEvent
(
"
PermissionStateChange
"
)
)
;
}
else
if
(
this
.
permissionKey
)
{
let
{
state
}
=
SitePermissions
.
get
(
null
this
.
permissionKey
this
.
browser
)
;
if
(
state
=
=
SitePermissions
.
BLOCK
)
{
this
.
cancel
(
)
;
return
;
}
}
let
chromeWin
=
this
.
browser
.
ownerGlobal
;
if
(
!
chromeWin
.
PopupNotifications
)
{
this
.
cancel
(
)
;
return
;
}
let
popupNotificationActions
=
[
]
;
for
(
let
promptAction
of
this
.
promptActions
)
{
let
action
=
{
label
:
promptAction
.
label
accessKey
:
promptAction
.
accessKey
callback
:
state
=
>
{
if
(
promptAction
.
callback
)
{
promptAction
.
callback
(
)
;
}
if
(
this
.
usePermissionManager
&
&
this
.
permissionKey
)
{
if
(
(
state
&
&
state
.
checkboxChecked
&
&
state
.
source
!
=
"
esc
-
press
"
)
|
|
promptAction
.
scope
=
=
SitePermissions
.
SCOPE_PERSISTENT
)
{
let
scope
=
SitePermissions
.
SCOPE_PERSISTENT
;
if
(
PrivateBrowsingUtils
.
isBrowserPrivate
(
this
.
browser
)
)
{
scope
=
SitePermissions
.
SCOPE_SESSION
;
}
SitePermissions
.
set
(
this
.
principal
.
URI
this
.
permissionKey
promptAction
.
action
scope
)
;
}
else
if
(
promptAction
.
action
=
=
SitePermissions
.
BLOCK
|
|
SitePermissions
.
permitTemporaryAllow
(
this
.
permissionKey
)
)
{
SitePermissions
.
set
(
this
.
principal
.
URI
this
.
permissionKey
promptAction
.
action
SitePermissions
.
SCOPE_TEMPORARY
this
.
browser
)
;
}
if
(
promptAction
.
action
=
=
SitePermissions
.
ALLOW
)
{
this
.
allow
(
)
;
}
else
{
this
.
cancel
(
)
;
}
}
else
if
(
this
.
permissionKey
)
{
if
(
promptAction
.
action
=
=
SitePermissions
.
BLOCK
)
{
SitePermissions
.
set
(
null
this
.
permissionKey
promptAction
.
action
SitePermissions
.
SCOPE_TEMPORARY
this
.
browser
)
;
}
}
}
}
;
if
(
promptAction
.
dismiss
)
{
action
.
dismiss
=
promptAction
.
dismiss
;
}
popupNotificationActions
.
push
(
action
)
;
}
let
mainAction
=
popupNotificationActions
.
length
?
popupNotificationActions
[
0
]
:
null
;
let
secondaryActions
=
popupNotificationActions
.
splice
(
1
)
;
let
options
=
this
.
popupOptions
;
if
(
!
options
.
hasOwnProperty
(
"
displayURI
"
)
|
|
options
.
displayURI
)
{
options
.
displayURI
=
this
.
principal
.
URI
;
}
options
.
persistent
=
true
;
options
.
hideClose
=
!
Services
.
prefs
.
getBoolPref
(
"
privacy
.
permissionPrompts
.
showCloseButton
"
)
;
options
.
eventCallback
=
(
topic
)
=
>
{
if
(
topic
=
=
"
swapping
"
)
{
return
true
;
}
if
(
topic
=
=
"
shown
"
)
{
this
.
onShown
(
)
;
}
if
(
topic
=
=
"
removed
"
)
{
this
.
onAfterShow
(
)
;
}
return
false
;
}
;
if
(
this
.
onBeforeShow
(
)
!
=
=
false
)
{
chromeWin
.
PopupNotifications
.
show
(
this
.
browser
this
.
notificationID
this
.
message
this
.
anchorID
mainAction
secondaryActions
options
)
;
}
}
}
;
PermissionUI
.
PermissionPromptPrototype
=
PermissionPromptPrototype
;
var
PermissionPromptForRequestPrototype
=
{
__proto__
:
PermissionPromptPrototype
get
browser
(
)
{
if
(
this
.
request
.
element
)
{
return
this
.
request
.
element
;
}
return
this
.
request
.
window
.
docShell
.
chromeEventHandler
;
}
get
principal
(
)
{
return
this
.
request
.
principal
;
}
cancel
(
)
{
this
.
request
.
cancel
(
)
;
}
allow
(
choices
)
{
this
.
request
.
allow
(
choices
)
;
}
}
;
PermissionUI
.
PermissionPromptForRequestPrototype
=
PermissionPromptForRequestPrototype
;
function
GeolocationPermissionPrompt
(
request
)
{
this
.
request
=
request
;
}
GeolocationPermissionPrompt
.
prototype
=
{
__proto__
:
PermissionPromptForRequestPrototype
get
permissionKey
(
)
{
return
"
geo
"
;
}
get
popupOptions
(
)
{
let
pref
=
"
browser
.
geolocation
.
warning
.
infoURL
"
;
let
options
=
{
learnMoreURL
:
Services
.
urlFormatter
.
formatURLPref
(
pref
)
displayURI
:
false
name
:
this
.
principalName
}
;
if
(
this
.
principal
.
URI
.
schemeIs
(
"
file
"
)
)
{
options
.
checkbox
=
{
show
:
false
}
;
}
else
{
options
.
checkbox
=
{
show
:
!
PrivateBrowsingUtils
.
isWindowPrivate
(
this
.
browser
.
ownerGlobal
)
}
;
}
if
(
options
.
checkbox
.
show
)
{
options
.
checkbox
.
label
=
gBrowserBundle
.
GetStringFromName
(
"
geolocation
.
remember
"
)
;
}
return
options
;
}
get
notificationID
(
)
{
return
"
geolocation
"
;
}
get
anchorID
(
)
{
return
"
geo
-
notification
-
icon
"
;
}
get
message
(
)
{
if
(
this
.
principal
.
URI
.
schemeIs
(
"
file
"
)
)
{
return
gBrowserBundle
.
GetStringFromName
(
"
geolocation
.
shareWithFile3
"
)
;
}
return
gBrowserBundle
.
formatStringFromName
(
"
geolocation
.
shareWithSite3
"
[
"
<
>
"
]
1
)
;
}
get
promptActions
(
)
{
const
SHARE_LOCATION
=
Ci
.
nsISecurityUITelemetry
.
WARNING_GEOLOCATION_REQUEST_SHARE_LOCATION
;
const
ALWAYS_SHARE
=
Ci
.
nsISecurityUITelemetry
.
WARNING_GEOLOCATION_REQUEST_ALWAYS_SHARE
;
const
NEVER_SHARE
=
Ci
.
nsISecurityUITelemetry
.
WARNING_GEOLOCATION_REQUEST_NEVER_SHARE
;
let
secHistogram
=
Services
.
telemetry
.
getHistogramById
(
"
SECURITY_UI
"
)
;
return
[
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
geolocation
.
allowLocation
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
geolocation
.
allowLocation
.
accesskey
"
)
action
:
SitePermissions
.
ALLOW
callback
(
state
)
{
if
(
state
&
&
state
.
checkboxChecked
)
{
secHistogram
.
add
(
ALWAYS_SHARE
)
;
}
else
{
secHistogram
.
add
(
SHARE_LOCATION
)
;
}
}
}
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
geolocation
.
dontAllowLocation
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
geolocation
.
dontAllowLocation
.
accesskey
"
)
action
:
SitePermissions
.
BLOCK
callback
(
state
)
{
if
(
state
&
&
state
.
checkboxChecked
)
{
secHistogram
.
add
(
NEVER_SHARE
)
;
}
}
}
]
;
}
onBeforeShow
(
)
{
let
secHistogram
=
Services
.
telemetry
.
getHistogramById
(
"
SECURITY_UI
"
)
;
const
SHOW_REQUEST
=
Ci
.
nsISecurityUITelemetry
.
WARNING_GEOLOCATION_REQUEST
;
secHistogram
.
add
(
SHOW_REQUEST
)
;
return
true
;
}
}
;
PermissionUI
.
GeolocationPermissionPrompt
=
GeolocationPermissionPrompt
;
function
DesktopNotificationPermissionPrompt
(
request
)
{
this
.
request
=
request
;
}
DesktopNotificationPermissionPrompt
.
prototype
=
{
__proto__
:
PermissionPromptForRequestPrototype
get
permissionKey
(
)
{
return
"
desktop
-
notification
"
;
}
get
popupOptions
(
)
{
let
learnMoreURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
push
"
;
return
{
learnMoreURL
displayURI
:
false
name
:
this
.
principalName
}
;
}
get
notificationID
(
)
{
return
"
web
-
notifications
"
;
}
get
anchorID
(
)
{
return
"
web
-
notifications
-
notification
-
icon
"
;
}
get
message
(
)
{
return
gBrowserBundle
.
formatStringFromName
(
"
webNotifications
.
receiveFromSite2
"
[
"
<
>
"
]
1
)
;
}
get
promptActions
(
)
{
let
actions
=
[
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
webNotifications
.
allow
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
webNotifications
.
allow
.
accesskey
"
)
action
:
SitePermissions
.
ALLOW
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
webNotifications
.
notNow
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
webNotifications
.
notNow
.
accesskey
"
)
action
:
SitePermissions
.
BLOCK
}
]
;
if
(
!
PrivateBrowsingUtils
.
isBrowserPrivate
(
this
.
browser
)
)
{
actions
.
push
(
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
webNotifications
.
never
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
webNotifications
.
never
.
accesskey
"
)
action
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
)
;
}
return
actions
;
}
}
;
PermissionUI
.
DesktopNotificationPermissionPrompt
=
DesktopNotificationPermissionPrompt
;
function
PersistentStoragePermissionPrompt
(
request
)
{
this
.
request
=
request
;
}
PersistentStoragePermissionPrompt
.
prototype
=
{
__proto__
:
PermissionPromptForRequestPrototype
get
permissionKey
(
)
{
return
"
persistent
-
storage
"
;
}
get
popupOptions
(
)
{
let
learnMoreURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
storage
-
permissions
"
;
return
{
learnMoreURL
displayURI
:
false
name
:
this
.
principalName
}
;
}
get
notificationID
(
)
{
return
"
persistent
-
storage
"
;
}
get
anchorID
(
)
{
return
"
persistent
-
storage
-
notification
-
icon
"
;
}
get
message
(
)
{
return
gBrowserBundle
.
formatStringFromName
(
"
persistentStorage
.
allowWithSite
"
[
"
<
>
"
]
1
)
;
}
get
promptActions
(
)
{
return
[
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
persistentStorage
.
allow
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
persistentStorage
.
allow
.
accesskey
"
)
action
:
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
persistentStorage
.
notNow
.
label
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
persistentStorage
.
notNow
.
accesskey
"
)
action
:
Ci
.
nsIPermissionManager
.
DENY_ACTION
}
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
persistentStorage
.
neverAllow
.
label
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
persistentStorage
.
neverAllow
.
accesskey
"
)
action
:
SitePermissions
.
BLOCK
scope
:
SitePermissions
.
SCOPE_PERSISTENT
}
]
;
}
}
;
PermissionUI
.
PersistentStoragePermissionPrompt
=
PersistentStoragePermissionPrompt
;
function
MIDIPermissionPrompt
(
request
)
{
this
.
request
=
request
;
let
types
=
request
.
types
.
QueryInterface
(
Ci
.
nsIArray
)
;
let
perm
=
types
.
queryElementAt
(
0
Ci
.
nsIContentPermissionType
)
;
this
.
isSysexPerm
=
(
perm
.
options
.
length
>
0
&
&
perm
.
options
.
queryElementAt
(
0
Ci
.
nsISupportsString
)
=
=
"
sysex
"
)
;
this
.
permName
=
"
midi
"
;
if
(
this
.
isSysexPerm
)
{
this
.
permName
=
"
midi
-
sysex
"
;
}
}
MIDIPermissionPrompt
.
prototype
=
{
__proto__
:
PermissionPromptForRequestPrototype
get
permissionKey
(
)
{
return
this
.
permName
;
}
get
popupOptions
(
)
{
let
options
=
{
displayURI
:
false
name
:
this
.
principalName
}
;
if
(
this
.
principal
.
URI
.
schemeIs
(
"
file
"
)
)
{
options
.
checkbox
=
{
show
:
false
}
;
}
else
{
options
.
checkbox
=
{
show
:
!
PrivateBrowsingUtils
.
isWindowPrivate
(
this
.
browser
.
ownerGlobal
)
}
;
}
if
(
options
.
checkbox
.
show
)
{
options
.
checkbox
.
label
=
gBrowserBundle
.
GetStringFromName
(
"
midi
.
remember
"
)
;
}
return
options
;
}
get
notificationID
(
)
{
return
"
midi
"
;
}
get
anchorID
(
)
{
return
"
midi
-
notification
-
icon
"
;
}
get
message
(
)
{
let
message
;
if
(
this
.
principal
.
URI
.
schemeIs
(
"
file
"
)
)
{
if
(
this
.
isSysexPerm
)
{
message
=
gBrowserBundle
.
formatStringFromName
(
"
midi
.
shareSysexWithFile
.
message
"
)
;
}
else
{
message
=
gBrowserBundle
.
formatStringFromName
(
"
midi
.
shareWithFile
.
message
"
)
;
}
}
else
if
(
this
.
isSysexPerm
)
{
message
=
gBrowserBundle
.
formatStringFromName
(
"
midi
.
shareSysexWithSite
.
message
"
[
"
<
>
"
]
1
)
;
}
else
{
message
=
gBrowserBundle
.
formatStringFromName
(
"
midi
.
shareWithSite
.
message
"
[
"
<
>
"
]
1
)
;
}
return
message
;
}
get
promptActions
(
)
{
return
[
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
midi
.
Allow
.
label
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
midi
.
Allow
.
accesskey
"
)
action
:
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
}
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
midi
.
DontAllow
.
label
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
midi
.
DontAllow
.
accesskey
"
)
action
:
Ci
.
nsIPermissionManager
.
DENY_ACTION
}
]
;
}
}
;
PermissionUI
.
MIDIPermissionPrompt
=
MIDIPermissionPrompt
;
function
AutoplayPermissionPrompt
(
request
)
{
this
.
request
=
request
;
}
AutoplayPermissionPrompt
.
prototype
=
{
__proto__
:
PermissionPromptForRequestPrototype
get
permissionKey
(
)
{
return
"
autoplay
-
media
"
;
}
get
popupOptions
(
)
{
let
learnMoreURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
block
-
autoplay
"
;
let
checkbox
=
{
show
:
!
this
.
principal
.
URI
.
schemeIs
(
"
file
"
)
}
;
if
(
checkbox
.
show
)
{
checkbox
.
checked
=
true
;
checkbox
.
label
=
PrivateBrowsingUtils
.
isWindowPrivate
(
this
.
browser
.
ownerGlobal
)
?
gBrowserBundle
.
GetStringFromName
(
"
autoplay
.
remember
-
private
"
)
:
gBrowserBundle
.
GetStringFromName
(
"
autoplay
.
remember
"
)
;
}
return
{
checkbox
learnMoreURL
displayURI
:
false
name
:
this
.
principal
.
URI
.
hostPort
}
;
}
get
notificationID
(
)
{
return
"
autoplay
-
media
"
;
}
get
anchorID
(
)
{
return
"
autoplay
-
media
-
notification
-
icon
"
;
}
get
message
(
)
{
if
(
this
.
principal
.
URI
.
schemeIs
(
"
file
"
)
)
{
return
gBrowserBundle
.
GetStringFromName
(
"
autoplay
.
messageWithFile
"
)
;
}
return
gBrowserBundle
.
formatStringFromName
(
"
autoplay
.
message
"
[
"
<
>
"
]
1
)
;
}
get
promptActions
(
)
{
return
[
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
autoplay
.
Allow2
.
label
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
autoplay
.
Allow2
.
accesskey
"
)
action
:
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
}
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
autoplay
.
DontAllow
.
label
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
autoplay
.
DontAllow
.
accesskey
"
)
action
:
Ci
.
nsIPermissionManager
.
DENY_ACTION
}
]
;
}
onAfterShow
(
)
{
this
.
browser
.
removeEventListener
(
"
DOMAudioPlaybackStarted
"
this
.
handlePlaybackStart
)
;
}
onBeforeShow
(
)
{
this
.
handlePlaybackStart
=
(
)
=
>
{
let
chromeWin
=
this
.
browser
.
ownerGlobal
;
if
(
!
chromeWin
.
PopupNotifications
)
{
return
;
}
let
notification
=
chromeWin
.
PopupNotifications
.
getNotification
(
this
.
notificationID
this
.
browser
)
;
if
(
notification
)
{
chromeWin
.
PopupNotifications
.
remove
(
notification
)
;
}
}
;
this
.
browser
.
addEventListener
(
"
DOMAudioPlaybackStarted
"
this
.
handlePlaybackStart
)
;
return
true
;
}
}
;
PermissionUI
.
AutoplayPermissionPrompt
=
AutoplayPermissionPrompt
;
function
StorageAccessPermissionPrompt
(
request
)
{
this
.
request
=
request
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
_autoGrants
"
"
dom
.
storage_access
.
auto_grants
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
_maxConcurrentAutoGrants
"
"
dom
.
storage_access
.
max_concurrent_auto_grants
"
)
;
}
StorageAccessPermissionPrompt
.
prototype
=
{
__proto__
:
PermissionPromptForRequestPrototype
get
usePermissionManager
(
)
{
return
false
;
}
get
permissionKey
(
)
{
return
"
storage
-
access
-
"
+
this
.
principal
.
origin
;
}
prettifyHostPort
(
uri
)
{
try
{
uri
=
Services
.
uriFixup
.
createExposableURI
(
uri
)
;
}
catch
(
e
)
{
}
let
host
=
IDNService
.
convertToDisplayIDN
(
uri
.
host
{
}
)
;
if
(
uri
.
port
!
=
-
1
)
{
host
+
=
:
{
uri
.
port
}
;
}
return
host
;
}
get
popupOptions
(
)
{
return
{
displayURI
:
false
name
:
this
.
prettifyHostPort
(
this
.
principal
.
URI
)
secondName
:
this
.
prettifyHostPort
(
this
.
topLevelPrincipal
.
URI
)
}
;
}
onShown
(
)
{
let
document
=
this
.
browser
.
ownerDocument
;
let
label
=
gBrowserBundle
.
formatStringFromName
(
"
storageAccess
.
description
.
label
"
[
this
.
prettifyHostPort
(
this
.
request
.
principal
.
URI
)
"
<
>
"
]
2
)
;
let
parts
=
label
.
split
(
"
<
>
"
)
;
if
(
parts
.
length
=
=
1
)
{
parts
.
push
(
"
"
)
;
}
let
map
=
{
"
storage
-
access
-
perm
-
label
"
:
parts
[
0
]
"
storage
-
access
-
perm
-
learnmore
"
:
gBrowserBundle
.
GetStringFromName
(
"
storageAccess
.
description
.
learnmore
"
)
"
storage
-
access
-
perm
-
endlabel
"
:
parts
[
1
]
}
;
for
(
let
id
in
map
)
{
let
str
=
map
[
id
]
;
document
.
getElementById
(
id
)
.
textContent
=
str
;
}
let
learnMoreURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
support
.
baseURL
"
)
+
"
third
-
party
-
cookies
"
;
document
.
getElementById
(
"
storage
-
access
-
perm
-
learnmore
"
)
.
href
=
learnMoreURL
;
}
get
notificationID
(
)
{
return
"
storage
-
access
"
;
}
get
anchorID
(
)
{
return
"
storage
-
access
-
notification
-
icon
"
;
}
get
message
(
)
{
return
gBrowserBundle
.
formatStringFromName
(
"
storageAccess
.
message
"
[
"
<
>
"
"
<
>
"
]
2
)
;
}
get
promptActions
(
)
{
let
self
=
this
;
return
[
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
storageAccess
.
DontAllow
.
label
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
storageAccess
.
DontAllow
.
accesskey
"
)
action
:
Ci
.
nsIPermissionManager
.
DENY_ACTION
callback
(
state
)
{
self
.
cancel
(
)
;
}
}
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
storageAccess
.
Allow
.
label
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
storageAccess
.
Allow
.
accesskey
"
)
action
:
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
callback
(
state
)
{
self
.
allow
(
{
"
storage
-
access
"
:
"
allow
"
}
)
;
}
}
{
label
:
gBrowserBundle
.
GetStringFromName
(
"
storageAccess
.
AllowOnAnySite
.
label
"
)
accessKey
:
gBrowserBundle
.
GetStringFromName
(
"
storageAccess
.
AllowOnAnySite
.
accesskey
"
)
action
:
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
callback
(
state
)
{
self
.
allow
(
{
"
storage
-
access
"
:
"
allow
-
on
-
any
-
site
"
}
)
;
}
}
]
;
}
get
topLevelPrincipal
(
)
{
return
this
.
request
.
topLevelPrincipal
;
}
get
maxConcurrentAutomaticGrants
(
)
{
return
Math
.
max
(
Math
.
max
(
Math
.
floor
(
URICountListener
.
uniqueDomainsVisitedInPast24Hours
/
100
)
this
.
_maxConcurrentAutoGrants
)
0
)
;
}
getOriginsThirdPartyHasAccessTo
(
thirdPartyOrigin
)
{
let
prefix
=
3rdPartyStorage
^
{
thirdPartyOrigin
}
;
let
perms
=
Services
.
perms
.
getAllWithTypePrefix
(
prefix
)
;
let
origins
=
new
Set
(
)
;
while
(
perms
.
length
)
{
let
perm
=
perms
.
shift
(
)
;
if
(
perm
.
type
!
=
prefix
&
&
!
perm
.
type
.
startsWith
(
{
prefix
}
^
)
)
{
continue
;
}
origins
.
add
(
perm
.
principal
.
origin
)
;
}
return
origins
.
size
;
}
onBeforeShow
(
)
{
let
thirdPartyOrigin
=
this
.
request
.
principal
.
origin
;
if
(
this
.
_autoGrants
&
&
this
.
getOriginsThirdPartyHasAccessTo
(
thirdPartyOrigin
)
<
this
.
maxConcurrentAutomaticGrants
)
{
this
.
allow
(
{
"
storage
-
access
"
:
"
allow
-
auto
-
grant
"
}
)
;
return
false
;
}
return
true
;
}
}
;
PermissionUI
.
StorageAccessPermissionPrompt
=
StorageAccessPermissionPrompt
;
