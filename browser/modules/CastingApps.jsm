"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
CastingApps
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
SimpleServiceDiscovery
.
jsm
"
)
;
var
CastingApps
=
{
_sendEventToVideo
(
element
data
)
{
let
event
=
element
.
ownerDocument
.
createEvent
(
"
CustomEvent
"
)
;
event
.
initCustomEvent
(
"
media
-
videoCasting
"
false
true
JSON
.
stringify
(
data
)
)
;
element
.
dispatchEvent
(
event
)
;
}
makeURI
(
url
charset
baseURI
)
{
return
Services
.
io
.
newURI
(
url
charset
baseURI
)
;
}
getVideo
(
element
)
{
if
(
!
element
)
{
return
null
;
}
let
extensions
=
SimpleServiceDiscovery
.
getSupportedExtensions
(
)
;
let
types
=
SimpleServiceDiscovery
.
getSupportedMimeTypes
(
)
;
let
posterURL
=
element
.
poster
;
let
sourceURL
=
element
.
src
;
if
(
!
sourceURL
)
{
sourceURL
=
element
.
currentSrc
;
}
if
(
sourceURL
)
{
let
sourceURI
=
this
.
makeURI
(
sourceURL
null
this
.
makeURI
(
element
.
baseURI
)
)
;
if
(
this
.
allowableExtension
(
sourceURI
extensions
)
)
{
return
{
element
source
:
sourceURI
.
spec
poster
:
posterURL
sourceURI
}
;
}
}
let
sourceNodes
=
element
.
getElementsByTagName
(
"
source
"
)
;
for
(
let
sourceNode
of
sourceNodes
)
{
let
sourceURI
=
this
.
makeURI
(
sourceNode
.
src
null
this
.
makeURI
(
sourceNode
.
baseURI
)
)
;
if
(
this
.
allowableMimeType
(
sourceNode
.
type
types
)
|
|
this
.
allowableExtension
(
sourceURI
extensions
)
)
{
return
{
element
source
:
sourceURI
.
spec
poster
:
posterURL
sourceURI
type
:
sourceNode
.
type
}
;
}
}
return
null
;
}
sendVideoToService
(
videoElement
service
)
{
if
(
!
service
)
return
;
let
video
=
this
.
getVideo
(
videoElement
)
;
if
(
!
video
)
{
return
;
}
let
app
=
SimpleServiceDiscovery
.
findAppForService
(
service
)
;
if
(
!
app
)
return
;
video
.
title
=
videoElement
.
ownerGlobal
.
top
.
document
.
title
;
if
(
video
.
element
)
{
if
(
!
video
.
element
.
paused
)
{
video
.
element
.
pause
(
)
;
}
}
app
.
stop
(
(
)
=
>
{
app
.
start
(
started
=
>
{
if
(
!
started
)
{
Cu
.
reportError
(
"
CastingApps
:
Unable
to
start
app
"
)
;
return
;
}
app
.
remoteMedia
(
remoteMedia
=
>
{
if
(
!
remoteMedia
)
{
Cu
.
reportError
(
"
CastingApps
:
Failed
to
create
remotemedia
"
)
;
return
;
}
this
.
session
=
{
service
app
remoteMedia
data
:
{
title
:
video
.
title
source
:
video
.
source
poster
:
video
.
poster
}
videoRef
:
Cu
.
getWeakReference
(
video
.
element
)
}
;
}
this
)
;
}
)
;
}
)
;
}
getServicesForVideo
(
videoElement
)
{
let
video
=
this
.
getVideo
(
videoElement
)
;
if
(
!
video
)
{
return
{
}
;
}
let
filteredServices
=
SimpleServiceDiscovery
.
services
.
filter
(
service
=
>
{
return
this
.
allowableExtension
(
video
.
sourceURI
service
.
extensions
)
|
|
this
.
allowableMimeType
(
video
.
type
service
.
types
)
;
}
)
;
return
filteredServices
;
}
getServicesForMirroring
(
)
{
return
SimpleServiceDiscovery
.
services
.
filter
(
service
=
>
service
.
mirror
)
;
}
onRemoteMediaStart
(
remoteMedia
)
{
if
(
!
this
.
session
)
{
return
;
}
remoteMedia
.
load
(
this
.
session
.
data
)
;
let
video
=
this
.
session
.
videoRef
.
get
(
)
;
if
(
video
)
{
this
.
_sendEventToVideo
(
video
{
active
:
true
}
)
;
}
}
onRemoteMediaStop
(
remoteMedia
)
{
}
onRemoteMediaStatus
(
remoteMedia
)
{
}
allowableExtension
(
uri
extensions
)
{
return
(
uri
instanceof
Ci
.
nsIURL
)
&
&
extensions
.
includes
(
uri
.
fileExtension
)
;
}
allowableMimeType
(
type
types
)
{
return
types
.
includes
(
type
)
;
}
}
;
