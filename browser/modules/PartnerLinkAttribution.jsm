"
use
strict
"
;
Cu
.
importGlobalProperties
(
[
"
fetch
"
]
)
;
var
EXPORTED_SYMBOLS
=
[
"
PartnerLinkAttribution
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
Region
:
"
resource
:
/
/
gre
/
modules
/
Region
.
jsm
"
}
)
;
var
PartnerLinkAttribution
=
{
async
makeRequest
(
{
targetURL
source
campaignID
}
)
{
let
partner
=
targetURL
.
match
(
/
^
https
?
:
\
/
\
/
(
?
:
www
.
)
?
(
[
^
.
]
*
)
/
)
[
1
]
;
function
record
(
method
objectString
)
{
recordTelemetryEvent
(
{
method
objectString
value
:
partner
}
)
;
}
record
(
"
click
"
source
)
;
let
attributionUrl
=
Services
.
prefs
.
getStringPref
(
"
browser
.
partnerlink
.
attributionURL
"
)
;
if
(
!
attributionUrl
)
{
record
(
"
attribution
"
"
abort
"
)
;
return
;
}
if
(
!
campaignID
)
{
campaignID
=
Services
.
prefs
.
getStringPref
(
"
browser
.
partnerlink
.
campaign
.
topsites
"
)
;
}
attributionUrl
=
attributionUrl
+
campaignID
;
let
result
=
await
sendRequest
(
attributionUrl
source
targetURL
)
;
record
(
"
attribution
"
result
?
"
success
"
:
"
failure
"
)
;
}
async
makeSearchEngineRequest
(
engine
targetUrl
)
{
let
cid
;
if
(
engine
.
attribution
?
.
cid
)
{
cid
=
engine
.
attribution
.
cid
;
}
else
if
(
engine
.
sendAttributionRequest
)
{
cid
=
Services
.
prefs
.
getStringPref
(
"
browser
.
partnerlink
.
campaign
.
topsites
"
)
;
}
else
{
return
;
}
let
searchUrlQueryParamName
=
engine
.
searchUrlQueryParamName
;
if
(
!
searchUrlQueryParamName
)
{
Cu
.
reportError
(
"
makeSearchEngineRequest
can
'
t
find
search
terms
key
"
)
;
return
;
}
let
url
=
targetUrl
;
if
(
typeof
url
=
=
"
string
"
)
{
url
=
Services
.
io
.
newURI
(
url
)
;
}
let
targetParams
=
new
URLSearchParams
(
url
.
query
)
;
if
(
!
targetParams
.
has
(
searchUrlQueryParamName
)
)
{
Cu
.
reportError
(
"
makeSearchEngineRequest
can
'
t
remove
target
search
terms
"
)
;
return
;
}
let
attributionUrl
=
Services
.
prefs
.
getStringPref
(
"
browser
.
partnerlink
.
attributionURL
"
"
"
)
;
attributionUrl
=
attributionUrl
+
cid
;
targetParams
.
delete
(
searchUrlQueryParamName
)
;
let
strippedTargetUrl
=
{
url
.
prePath
}
{
url
.
filePath
}
;
let
newParams
=
targetParams
.
toString
(
)
;
if
(
newParams
)
{
strippedTargetUrl
+
=
"
?
"
+
newParams
;
}
await
sendRequest
(
attributionUrl
"
searchurl
"
strippedTargetUrl
)
;
}
}
;
async
function
sendRequest
(
attributionUrl
source
targetURL
)
{
const
request
=
new
Request
(
attributionUrl
)
;
request
.
headers
.
set
(
"
X
-
Region
"
Region
.
home
)
;
request
.
headers
.
set
(
"
X
-
Source
"
source
)
;
request
.
headers
.
set
(
"
X
-
Target
-
URL
"
targetURL
)
;
const
response
=
await
fetch
(
request
)
;
return
response
.
ok
;
}
function
recordTelemetryEvent
(
{
method
objectString
value
}
)
{
Services
.
telemetry
.
setEventRecordingEnabled
(
"
partner_link
"
true
)
;
Services
.
telemetry
.
recordEvent
(
"
partner_link
"
method
objectString
value
)
;
}
