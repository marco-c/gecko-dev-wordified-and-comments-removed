"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
PageActions
"
]
;
const
{
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
BinarySearch
"
"
resource
:
/
/
gre
/
modules
/
BinarySearch
.
jsm
"
)
;
const
ACTION_ID_BOOKMARK_SEPARATOR
=
"
bookmarkSeparator
"
;
const
ACTION_ID_BUILT_IN_SEPARATOR
=
"
builtInSeparator
"
;
const
PREF_PERSISTED_ACTIONS
=
"
browser
.
pageActions
.
persistedActions
"
;
this
.
PageActions
=
{
init
(
)
{
let
callbacks
=
this
.
_deferredAddActionCalls
;
delete
this
.
_deferredAddActionCalls
;
this
.
_loadPersistedActions
(
)
;
for
(
let
options
of
gBuiltInActions
)
{
if
(
options
.
_isSeparator
|
|
!
this
.
actionForID
(
options
.
id
)
)
{
this
.
addAction
(
new
Action
(
options
)
)
;
}
}
while
(
callbacks
&
&
callbacks
.
length
)
{
callbacks
.
shift
(
)
(
)
;
}
}
_deferredAddActionCalls
:
[
]
get
actions
(
)
{
let
actions
=
this
.
builtInActions
;
if
(
this
.
nonBuiltInActions
.
length
)
{
actions
.
push
(
new
Action
(
{
id
:
ACTION_ID_BUILT_IN_SEPARATOR
_isSeparator
:
true
}
)
)
;
actions
.
push
(
.
.
.
this
.
nonBuiltInActions
)
;
}
return
actions
;
}
get
builtInActions
(
)
{
return
this
.
_builtInActions
.
slice
(
)
;
}
get
nonBuiltInActions
(
)
{
return
this
.
_nonBuiltInActions
.
slice
(
)
;
}
actionForID
(
id
)
{
return
this
.
_actionsByID
.
get
(
id
)
;
}
addAction
(
action
)
{
if
(
this
.
_deferredAddActionCalls
)
{
this
.
_deferredAddActionCalls
.
push
(
(
)
=
>
this
.
addAction
(
action
)
)
;
return
action
;
}
let
panelInsertBeforeID
=
null
;
let
urlbarInsertBeforeID
=
null
;
let
placeBuiltInSeparator
=
false
;
if
(
action
.
__isSeparator
)
{
this
.
_builtInActions
.
push
(
action
)
;
}
else
{
if
(
this
.
actionForID
(
action
.
id
)
)
{
throw
new
Error
(
An
Action
with
ID
'
{
action
.
id
}
'
has
already
been
added
.
)
;
}
this
.
_actionsByID
.
set
(
action
.
id
action
)
;
if
(
"
__insertBeforeActionID
"
in
action
)
{
let
index
=
!
action
.
__insertBeforeActionID
?
-
1
:
this
.
_builtInActions
.
findIndex
(
a
=
>
{
return
a
.
id
=
=
action
.
__insertBeforeActionID
;
}
)
;
if
(
index
<
0
)
{
index
=
this
.
_builtInActions
.
length
;
if
(
this
.
_nonBuiltInActions
.
length
)
{
panelInsertBeforeID
=
ACTION_ID_BUILT_IN_SEPARATOR
;
}
}
else
{
panelInsertBeforeID
=
this
.
_builtInActions
[
index
]
.
id
;
}
this
.
_builtInActions
.
splice
(
index
0
action
)
;
}
else
if
(
gBuiltInActions
.
find
(
a
=
>
a
.
id
=
=
action
.
id
)
)
{
this
.
_builtInActions
.
push
(
action
)
;
if
(
this
.
_nonBuiltInActions
.
length
)
{
panelInsertBeforeID
=
ACTION_ID_BUILT_IN_SEPARATOR
;
}
}
else
{
let
index
=
BinarySearch
.
insertionIndexOf
(
(
a1
a2
)
=
>
{
return
a1
.
title
.
localeCompare
(
a2
.
title
)
;
}
this
.
_nonBuiltInActions
action
)
;
if
(
index
<
this
.
_nonBuiltInActions
.
length
)
{
panelInsertBeforeID
=
this
.
_nonBuiltInActions
[
index
]
.
id
;
}
if
(
!
this
.
_nonBuiltInActions
.
length
)
{
placeBuiltInSeparator
=
true
;
}
this
.
_nonBuiltInActions
.
splice
(
index
0
action
)
;
}
if
(
this
.
_persistedActions
.
ids
[
action
.
id
]
)
{
action
.
_shownInUrlbar
=
this
.
_persistedActions
.
idsInUrlbar
.
includes
(
action
.
id
)
;
}
else
{
this
.
_persistedActions
.
ids
[
action
.
id
]
=
true
;
if
(
action
.
shownInUrlbar
)
{
this
.
_persistedActions
.
idsInUrlbar
.
push
(
action
.
id
)
;
}
this
.
_storePersistedActions
(
)
;
}
if
(
action
.
shownInUrlbar
)
{
urlbarInsertBeforeID
=
this
.
insertBeforeActionIDInUrlbar
(
action
)
;
}
}
for
(
let
win
of
browserWindows
(
)
)
{
if
(
placeBuiltInSeparator
)
{
let
sep
=
new
Action
(
{
id
:
ACTION_ID_BUILT_IN_SEPARATOR
_isSeparator
:
true
}
)
;
browserPageActions
(
win
)
.
placeAction
(
sep
null
null
)
;
}
browserPageActions
(
win
)
.
placeAction
(
action
panelInsertBeforeID
urlbarInsertBeforeID
)
;
}
return
action
;
}
_builtInActions
:
[
]
_nonBuiltInActions
:
[
]
_actionsByID
:
new
Map
(
)
insertBeforeActionIDInUrlbar
(
action
)
{
let
idsInUrlbar
=
this
.
_persistedActions
.
idsInUrlbar
;
let
index
=
idsInUrlbar
.
indexOf
(
action
.
id
)
;
if
(
index
<
0
)
{
return
null
;
}
for
(
let
i
=
index
+
1
;
i
<
idsInUrlbar
.
length
;
i
+
+
)
{
let
id
=
idsInUrlbar
[
i
]
;
if
(
this
.
actionForID
(
id
)
)
{
return
id
;
}
}
return
null
;
}
onActionRemoved
(
action
)
{
if
(
!
this
.
actionForID
(
action
.
id
)
)
{
return
;
}
this
.
_actionsByID
.
delete
(
action
.
id
)
;
for
(
let
list
of
[
this
.
_nonBuiltInActions
this
.
_builtInActions
]
)
{
let
index
=
list
.
findIndex
(
a
=
>
a
.
id
=
=
action
.
id
)
;
if
(
index
>
=
0
)
{
list
.
splice
(
index
1
)
;
break
;
}
}
delete
this
.
_persistedActions
.
ids
[
action
.
id
]
;
let
index
=
this
.
_persistedActions
.
idsInUrlbar
.
indexOf
(
action
.
id
)
;
if
(
index
>
=
0
)
{
this
.
_persistedActions
.
idsInUrlbar
.
splice
(
index
1
)
;
}
this
.
_storePersistedActions
(
)
;
for
(
let
win
of
browserWindows
(
)
)
{
browserPageActions
(
win
)
.
removeAction
(
action
)
;
}
}
onActionSetIconURL
(
action
)
{
if
(
!
this
.
actionForID
(
action
.
id
)
)
{
return
;
}
for
(
let
win
of
browserWindows
(
)
)
{
browserPageActions
(
win
)
.
updateActionIconURL
(
action
)
;
}
}
onActionSetTitle
(
action
)
{
if
(
!
this
.
actionForID
(
action
.
id
)
)
{
return
;
}
for
(
let
win
of
browserWindows
(
)
)
{
browserPageActions
(
win
)
.
updateActionTitle
(
action
)
;
}
}
onActionToggledShownInUrlbar
(
action
)
{
if
(
!
this
.
actionForID
(
action
.
id
)
)
{
return
;
}
let
index
=
this
.
_persistedActions
.
idsInUrlbar
.
indexOf
(
action
.
id
)
;
if
(
action
.
shownInUrlbar
)
{
if
(
index
<
0
)
{
this
.
_persistedActions
.
idsInUrlbar
.
push
(
action
.
id
)
;
}
}
else
if
(
index
>
=
0
)
{
this
.
_persistedActions
.
idsInUrlbar
.
splice
(
index
1
)
;
}
this
.
_storePersistedActions
(
)
;
let
insertBeforeID
=
this
.
insertBeforeActionIDInUrlbar
(
action
)
;
for
(
let
win
of
browserWindows
(
)
)
{
browserPageActions
(
win
)
.
placeActionInUrlbar
(
action
insertBeforeID
)
;
}
}
_storePersistedActions
(
)
{
let
json
=
JSON
.
stringify
(
this
.
_persistedActions
)
;
Services
.
prefs
.
setStringPref
(
PREF_PERSISTED_ACTIONS
json
)
;
}
_loadPersistedActions
(
)
{
try
{
let
json
=
Services
.
prefs
.
getStringPref
(
PREF_PERSISTED_ACTIONS
)
;
this
.
_persistedActions
=
JSON
.
parse
(
json
)
;
}
catch
(
ex
)
{
}
}
_persistedActions
:
{
ids
:
{
}
idsInUrlbar
:
[
]
}
}
;
function
Action
(
options
)
{
setProperties
(
this
options
{
id
:
true
title
:
!
options
.
_isSeparator
anchorIDOverride
:
false
iconURL
:
false
nodeAttributes
:
false
onBeforePlacedInWindow
:
false
onCommand
:
false
onIframeHiding
:
false
onIframeHidden
:
false
onIframeShown
:
false
onPlacedInPanel
:
false
onPlacedInUrlbar
:
false
onShowingInPanel
:
false
shownInUrlbar
:
false
subview
:
false
tooltip
:
false
urlbarIDOverride
:
false
wantsIframe
:
false
_insertBeforeActionID
:
false
_isSeparator
:
false
_urlbarNodeInMarkup
:
false
}
)
;
if
(
this
.
_subview
)
{
this
.
_subview
=
new
Subview
(
options
.
subview
)
;
}
}
Action
.
prototype
=
{
get
iconURL
(
)
{
return
this
.
_iconURL
;
}
set
iconURL
(
url
)
{
this
.
_iconURL
=
url
;
PageActions
.
onActionSetIconURL
(
this
)
;
return
this
.
_iconURL
;
}
get
id
(
)
{
return
this
.
_id
;
}
get
nodeAttributes
(
)
{
return
this
.
_nodeAttributes
;
}
get
shownInUrlbar
(
)
{
return
this
.
_shownInUrlbar
|
|
false
;
}
set
shownInUrlbar
(
shown
)
{
if
(
this
.
shownInUrlbar
!
=
shown
)
{
this
.
_shownInUrlbar
=
shown
;
PageActions
.
onActionToggledShownInUrlbar
(
this
)
;
}
return
this
.
shownInUrlbar
;
}
get
title
(
)
{
return
this
.
_title
;
}
set
title
(
title
)
{
this
.
_title
=
title
|
|
"
"
;
PageActions
.
onActionSetTitle
(
this
)
;
return
this
.
_title
;
}
get
tooltip
(
)
{
return
this
.
_tooltip
;
}
get
anchorIDOverride
(
)
{
return
this
.
_anchorIDOverride
;
}
get
urlbarIDOverride
(
)
{
return
this
.
_urlbarIDOverride
;
}
get
wantsIframe
(
)
{
return
this
.
_wantsIframe
|
|
false
;
}
get
subview
(
)
{
return
this
.
_subview
;
}
onBeforePlacedInWindow
(
window
)
{
if
(
this
.
_onBeforePlacedInWindow
)
{
this
.
_onBeforePlacedInWindow
(
window
)
;
}
}
onCommand
(
event
buttonNode
)
{
if
(
this
.
_onCommand
)
{
this
.
_onCommand
(
event
buttonNode
)
;
}
}
onIframeHiding
(
iframeNode
parentPanelNode
)
{
if
(
this
.
_onIframeHiding
)
{
this
.
_onIframeHiding
(
iframeNode
parentPanelNode
)
;
}
}
onIframeHidden
(
iframeNode
parentPanelNode
)
{
if
(
this
.
_onIframeHidden
)
{
this
.
_onIframeHidden
(
iframeNode
parentPanelNode
)
;
}
}
onIframeShown
(
iframeNode
parentPanelNode
)
{
if
(
this
.
_onIframeShown
)
{
this
.
_onIframeShown
(
iframeNode
parentPanelNode
)
;
}
}
onPlacedInPanel
(
buttonNode
)
{
if
(
this
.
_onPlacedInPanel
)
{
this
.
_onPlacedInPanel
(
buttonNode
)
;
}
}
onPlacedInUrlbar
(
buttonNode
)
{
if
(
this
.
_onPlacedInUrlbar
)
{
this
.
_onPlacedInUrlbar
(
buttonNode
)
;
}
}
onShowingInPanel
(
buttonNode
)
{
if
(
this
.
_onShowingInPanel
)
{
this
.
_onShowingInPanel
(
buttonNode
)
;
}
}
remove
(
)
{
PageActions
.
onActionRemoved
(
this
)
;
}
}
;
this
.
PageActions
.
Action
=
Action
;
function
Subview
(
options
)
{
setProperties
(
this
options
{
buttons
:
false
onPlaced
:
false
onShowing
:
false
}
)
;
this
.
_buttons
=
(
this
.
_buttons
|
|
[
]
)
.
map
(
buttonOptions
=
>
{
return
new
Button
(
buttonOptions
)
;
}
)
;
}
Subview
.
prototype
=
{
get
buttons
(
)
{
return
this
.
_buttons
;
}
onPlaced
(
panelViewNode
)
{
if
(
this
.
_onPlaced
)
{
this
.
_onPlaced
(
panelViewNode
)
;
}
}
onShowing
(
panelViewNode
)
{
if
(
this
.
_onShowing
)
{
this
.
_onShowing
(
panelViewNode
)
;
}
}
}
;
this
.
PageActions
.
Subview
=
Subview
;
function
Button
(
options
)
{
setProperties
(
this
options
{
id
:
true
title
:
true
disabled
:
false
onCommand
:
false
shortcut
:
false
}
)
;
}
Button
.
prototype
=
{
get
disabled
(
)
{
return
this
.
_disabled
|
|
false
;
}
get
id
(
)
{
return
this
.
_id
;
}
get
shortcut
(
)
{
return
this
.
_shortcut
;
}
get
title
(
)
{
return
this
.
_title
;
}
onCommand
(
event
buttonNode
)
{
if
(
this
.
_onCommand
)
{
this
.
_onCommand
(
event
buttonNode
)
;
}
}
}
;
this
.
PageActions
.
Button
=
Button
;
this
.
PageActions
.
ACTION_ID_BOOKMARK_SEPARATOR
=
ACTION_ID_BOOKMARK_SEPARATOR
;
this
.
PageActions
.
ACTION_ID_BUILT_IN_SEPARATOR
=
ACTION_ID_BUILT_IN_SEPARATOR
;
var
gBuiltInActions
=
[
{
id
:
"
bookmark
"
urlbarIDOverride
:
"
star
-
button
-
box
"
_urlbarNodeInMarkup
:
true
title
:
"
"
shownInUrlbar
:
true
nodeAttributes
:
{
observes
:
"
bookmarkThisPageBroadcaster
"
}
onShowingInPanel
(
buttonNode
)
{
browserPageActions
(
buttonNode
)
.
bookmark
.
onShowingInPanel
(
buttonNode
)
;
}
onCommand
(
event
buttonNode
)
{
browserPageActions
(
buttonNode
)
.
bookmark
.
onCommand
(
event
buttonNode
)
;
}
}
{
id
:
ACTION_ID_BOOKMARK_SEPARATOR
_isSeparator
:
true
}
{
id
:
"
copyURL
"
title
:
"
copyURL
-
title
"
onPlacedInPanel
(
buttonNode
)
{
browserPageActions
(
buttonNode
)
.
copyURL
.
onPlacedInPanel
(
buttonNode
)
;
}
onCommand
(
event
buttonNode
)
{
browserPageActions
(
buttonNode
)
.
copyURL
.
onCommand
(
event
buttonNode
)
;
}
}
{
id
:
"
emailLink
"
title
:
"
emailLink
-
title
"
onPlacedInPanel
(
buttonNode
)
{
browserPageActions
(
buttonNode
)
.
emailLink
.
onPlacedInPanel
(
buttonNode
)
;
}
onCommand
(
event
buttonNode
)
{
browserPageActions
(
buttonNode
)
.
emailLink
.
onCommand
(
event
buttonNode
)
;
}
}
{
id
:
"
sendToDevice
"
title
:
"
sendToDevice
-
title
"
onPlacedInPanel
(
buttonNode
)
{
browserPageActions
(
buttonNode
)
.
sendToDevice
.
onPlacedInPanel
(
buttonNode
)
;
}
onShowingInPanel
(
buttonNode
)
{
browserPageActions
(
buttonNode
)
.
sendToDevice
.
onShowingInPanel
(
buttonNode
)
;
}
subview
:
{
buttons
:
[
{
id
:
"
notReady
"
title
:
"
sendToDevice
-
notReadyTitle
"
disabled
:
true
}
]
onPlaced
(
panelViewNode
)
{
browserPageActions
(
panelViewNode
)
.
sendToDevice
.
onSubviewPlaced
(
panelViewNode
)
;
}
onShowing
(
panelViewNode
)
{
browserPageActions
(
panelViewNode
)
.
sendToDevice
.
onShowingSubview
(
panelViewNode
)
;
}
}
}
]
;
function
browserPageActions
(
obj
)
{
if
(
obj
.
BrowserPageActions
)
{
return
obj
.
BrowserPageActions
;
}
return
obj
.
ownerGlobal
.
BrowserPageActions
;
}
function
*
browserWindows
(
)
{
let
windows
=
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
while
(
windows
.
hasMoreElements
(
)
)
{
yield
windows
.
getNext
(
)
;
}
}
function
setProperties
(
obj
options
schema
)
{
for
(
let
name
in
schema
)
{
let
required
=
schema
[
name
]
;
if
(
required
&
&
!
(
name
in
options
)
)
{
throw
new
Error
(
'
{
name
}
'
must
be
specified
)
;
}
let
nameInObj
=
"
_
"
+
name
;
if
(
name
[
0
]
=
=
"
_
"
)
{
if
(
name
in
options
)
{
obj
[
nameInObj
]
=
options
[
name
]
;
}
}
else
{
obj
[
nameInObj
]
=
options
[
name
]
|
|
null
;
}
}
for
(
let
name
in
options
)
{
if
(
!
(
name
in
schema
)
)
{
throw
new
Error
(
Unrecognized
option
'
{
name
}
'
)
;
}
}
}
