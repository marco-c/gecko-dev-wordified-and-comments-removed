this
.
EXPORTED_SYMBOLS
=
[
"
SitePermissions
"
]
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
gStringBundle
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
sitePermissions
.
properties
"
)
;
this
.
SitePermissions
=
{
UNKNOWN
:
Services
.
perms
.
UNKNOWN_ACTION
ALLOW
:
Services
.
perms
.
ALLOW_ACTION
BLOCK
:
Services
.
perms
.
DENY_ACTION
SESSION
:
Components
.
interfaces
.
nsICookiePermission
.
ACCESS_SESSION
getPermissionsByURI
:
function
(
aURI
)
{
if
(
!
this
.
isSupportedURI
(
aURI
)
)
{
return
[
]
;
}
let
permissions
=
[
]
;
for
(
let
permission
of
kPermissionIDs
)
{
let
state
=
this
.
get
(
aURI
permission
)
;
if
(
state
=
=
=
this
.
UNKNOWN
)
{
continue
;
}
let
availableStates
=
this
.
getAvailableStates
(
permission
)
.
map
(
state
=
>
{
return
{
id
:
state
label
:
this
.
getStateLabel
(
permission
state
)
}
;
}
)
;
let
label
=
this
.
getPermissionLabel
(
permission
)
;
permissions
.
push
(
{
id
:
permission
label
:
label
state
:
state
availableStates
:
availableStates
}
)
;
}
return
permissions
;
}
hasGrantedPermissions
:
function
(
aURI
)
{
if
(
!
this
.
isSupportedURI
(
aURI
)
)
{
return
false
;
}
for
(
let
permission
of
kPermissionIDs
)
{
let
state
=
this
.
get
(
aURI
permission
)
;
if
(
state
=
=
=
this
.
ALLOW
|
|
state
=
=
=
this
.
SESSION
)
{
return
true
;
}
}
return
false
;
}
isSupportedURI
:
function
(
aURI
)
{
return
aURI
.
schemeIs
(
"
http
"
)
|
|
aURI
.
schemeIs
(
"
https
"
)
;
}
listPermissions
:
function
(
)
{
return
kPermissionIDs
;
}
getAvailableStates
:
function
(
aPermissionID
)
{
if
(
aPermissionID
in
gPermissionObject
&
&
gPermissionObject
[
aPermissionID
]
.
states
)
return
gPermissionObject
[
aPermissionID
]
.
states
;
if
(
this
.
getDefault
(
aPermissionID
)
=
=
this
.
UNKNOWN
)
return
[
SitePermissions
.
UNKNOWN
SitePermissions
.
ALLOW
SitePermissions
.
BLOCK
]
;
return
[
SitePermissions
.
ALLOW
SitePermissions
.
BLOCK
]
;
}
getDefault
:
function
(
aPermissionID
)
{
if
(
aPermissionID
in
gPermissionObject
&
&
gPermissionObject
[
aPermissionID
]
.
getDefault
)
return
gPermissionObject
[
aPermissionID
]
.
getDefault
(
)
;
return
this
.
UNKNOWN
;
}
get
:
function
(
aURI
aPermissionID
)
{
if
(
!
this
.
isSupportedURI
(
aURI
)
)
return
this
.
UNKNOWN
;
let
state
;
if
(
aPermissionID
in
gPermissionObject
&
&
gPermissionObject
[
aPermissionID
]
.
exactHostMatch
)
state
=
Services
.
perms
.
testExactPermission
(
aURI
aPermissionID
)
;
else
state
=
Services
.
perms
.
testPermission
(
aURI
aPermissionID
)
;
return
state
;
}
set
:
function
(
aURI
aPermissionID
aState
)
{
if
(
!
this
.
isSupportedURI
(
aURI
)
)
return
;
if
(
aState
=
=
this
.
UNKNOWN
)
{
this
.
remove
(
aURI
aPermissionID
)
;
return
;
}
Services
.
perms
.
add
(
aURI
aPermissionID
aState
)
;
}
remove
:
function
(
aURI
aPermissionID
)
{
if
(
!
this
.
isSupportedURI
(
aURI
)
)
return
;
Services
.
perms
.
remove
(
aURI
aPermissionID
)
;
}
getPermissionLabel
:
function
(
aPermissionID
)
{
let
labelID
=
gPermissionObject
[
aPermissionID
]
.
labelID
|
|
aPermissionID
;
return
gStringBundle
.
GetStringFromName
(
"
permission
.
"
+
labelID
+
"
.
label
"
)
;
}
getStateLabel
:
function
(
aPermissionID
aState
)
{
switch
(
aState
)
{
case
this
.
UNKNOWN
:
return
gStringBundle
.
GetStringFromName
(
"
alwaysAsk
"
)
;
case
this
.
ALLOW
:
return
gStringBundle
.
GetStringFromName
(
"
allow
"
)
;
case
this
.
SESSION
:
return
gStringBundle
.
GetStringFromName
(
"
allowForSession
"
)
;
case
this
.
BLOCK
:
return
gStringBundle
.
GetStringFromName
(
"
block
"
)
;
default
:
throw
new
Error
(
"
unknown
permission
state
"
)
;
}
}
}
;
var
gPermissionObject
=
{
"
image
"
:
{
getDefault
:
function
(
)
{
return
Services
.
prefs
.
getIntPref
(
"
permissions
.
default
.
image
"
)
=
=
2
?
SitePermissions
.
BLOCK
:
SitePermissions
.
ALLOW
;
}
}
"
cookie
"
:
{
states
:
[
SitePermissions
.
ALLOW
SitePermissions
.
SESSION
SitePermissions
.
BLOCK
]
getDefault
:
function
(
)
{
if
(
Services
.
prefs
.
getIntPref
(
"
network
.
cookie
.
cookieBehavior
"
)
=
=
2
)
return
SitePermissions
.
BLOCK
;
if
(
Services
.
prefs
.
getIntPref
(
"
network
.
cookie
.
lifetimePolicy
"
)
=
=
2
)
return
SitePermissions
.
SESSION
;
return
SitePermissions
.
ALLOW
;
}
}
"
desktop
-
notification
"
:
{
exactHostMatch
:
true
labelID
:
"
desktop
-
notification2
"
}
"
camera
"
:
{
}
"
microphone
"
:
{
}
"
popup
"
:
{
getDefault
:
function
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
dom
.
disable_open_during_load
"
)
?
SitePermissions
.
BLOCK
:
SitePermissions
.
ALLOW
;
}
}
"
install
"
:
{
getDefault
:
function
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
xpinstall
.
whitelist
.
required
"
)
?
SitePermissions
.
BLOCK
:
SitePermissions
.
ALLOW
;
}
}
"
geo
"
:
{
exactHostMatch
:
true
}
"
indexedDB
"
:
{
}
}
;
const
kPermissionIDs
=
Object
.
keys
(
gPermissionObject
)
;
