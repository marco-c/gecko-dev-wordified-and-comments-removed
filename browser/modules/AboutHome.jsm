"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
AboutHomeUtils
"
"
AboutHome
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
AutoMigrate
"
"
resource
:
/
/
/
modules
/
AutoMigrate
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
fxAccounts
"
"
resource
:
/
/
gre
/
modules
/
FxAccounts
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
SessionStore
"
"
resource
:
/
/
/
modules
/
sessionstore
/
SessionStore
.
jsm
"
)
;
const
SNIPPETS_URL_PREF
=
"
browser
.
aboutHomeSnippets
.
updateUrl
"
;
const
STARTPAGE_VERSION
=
4
;
var
AboutHomeUtils
=
{
get
snippetsVersion
(
)
{
return
STARTPAGE_VERSION
;
}
get
showKnowYourRights
(
)
{
try
{
return
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
rights
.
override
"
)
;
}
catch
(
e
)
{
}
try
{
return
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
EULA
.
override
"
)
;
}
catch
(
e
)
{
}
if
(
!
AppConstants
.
MOZILLA_OFFICIAL
)
{
return
false
;
}
var
currentVersion
=
Services
.
prefs
.
getIntPref
(
"
browser
.
rights
.
version
"
)
;
try
{
return
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
rights
.
"
+
currentVersion
+
"
.
shown
"
)
;
}
catch
(
e
)
{
}
try
{
return
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
EULA
.
"
+
currentVersion
+
"
.
accepted
"
)
;
}
catch
(
e
)
{
}
return
true
;
}
}
;
XPCOMUtils
.
defineLazyGetter
(
AboutHomeUtils
"
snippetsURL
"
function
(
)
{
let
updateURL
=
Services
.
prefs
.
getCharPref
(
SNIPPETS_URL_PREF
)
.
replace
(
"
%
STARTPAGE_VERSION
%
"
STARTPAGE_VERSION
)
;
return
Services
.
urlFormatter
.
formatURL
(
updateURL
)
;
}
)
;
var
AboutHome
=
{
MESSAGES
:
[
"
AboutHome
:
RestorePreviousSession
"
"
AboutHome
:
Downloads
"
"
AboutHome
:
Bookmarks
"
"
AboutHome
:
History
"
"
AboutHome
:
Addons
"
"
AboutHome
:
Sync
"
"
AboutHome
:
Settings
"
]
init
(
)
{
for
(
let
msg
of
this
.
MESSAGES
)
{
Services
.
mm
.
addMessageListener
(
msg
this
)
;
}
}
receiveMessage
(
aMessage
)
{
let
window
=
aMessage
.
target
.
ownerGlobal
;
switch
(
aMessage
.
name
)
{
case
"
AboutHome
:
RestorePreviousSession
"
:
if
(
SessionStore
.
canRestoreLastSession
)
{
SessionStore
.
restoreLastSession
(
)
;
}
break
;
case
"
AboutHome
:
Downloads
"
:
window
.
BrowserDownloadsUI
(
)
;
break
;
case
"
AboutHome
:
Bookmarks
"
:
window
.
PlacesCommandHook
.
showPlacesOrganizer
(
"
UnfiledBookmarks
"
)
;
break
;
case
"
AboutHome
:
History
"
:
window
.
PlacesCommandHook
.
showPlacesOrganizer
(
"
History
"
)
;
break
;
case
"
AboutHome
:
Addons
"
:
window
.
BrowserOpenAddonsMgr
(
)
;
break
;
case
"
AboutHome
:
Sync
"
:
window
.
openPreferences
(
"
paneSync
"
{
urlParams
:
{
entrypoint
:
"
abouthome
"
}
origin
:
"
aboutHome
"
}
)
;
break
;
case
"
AboutHome
:
Settings
"
:
window
.
openPreferences
(
undefined
{
origin
:
"
aboutHome
"
}
)
;
break
;
case
"
AboutHome
:
RequestUpdate
"
:
this
.
sendAboutHomeData
(
aMessage
.
target
)
;
break
;
case
"
AboutHome
:
MaybeShowMigrateMessage
"
:
AutoMigrate
.
shouldShowMigratePrompt
(
aMessage
.
target
)
.
then
(
(
prompt
)
=
>
{
if
(
prompt
)
{
AutoMigrate
.
showUndoNotificationBar
(
aMessage
.
target
)
;
}
}
)
;
break
;
}
}
sendAboutHomeData
(
target
)
{
SessionStore
.
promiseInitialized
.
then
(
function
(
)
{
let
data
=
{
showRestoreLastSession
:
SessionStore
.
canRestoreLastSession
snippetsURL
:
AboutHomeUtils
.
snippetsURL
showKnowYourRights
:
AboutHomeUtils
.
showKnowYourRights
snippetsVersion
:
AboutHomeUtils
.
snippetsVersion
}
;
if
(
AboutHomeUtils
.
showKnowYourRights
)
{
let
currentVersion
=
Services
.
prefs
.
getIntPref
(
"
browser
.
rights
.
version
"
)
;
Services
.
prefs
.
setBoolPref
(
"
browser
.
rights
.
"
+
currentVersion
+
"
.
shown
"
true
)
;
}
if
(
target
&
&
target
.
messageManager
)
{
target
.
messageManager
.
sendAsyncMessage
(
"
AboutHome
:
Update
"
data
)
;
}
else
{
Services
.
mm
.
broadcastAsyncMessage
(
"
AboutHome
:
Update
"
data
)
;
}
}
)
.
catch
(
function
onError
(
x
)
{
Cu
.
reportError
(
"
Error
in
AboutHome
.
sendAboutHomeData
:
"
+
x
)
;
}
)
;
}
}
;
