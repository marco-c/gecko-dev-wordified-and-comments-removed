"
use
strict
"
;
var
Cc
=
Components
.
classes
;
var
Ci
=
Components
.
interfaces
;
var
Cu
=
Components
.
utils
;
this
.
EXPORTED_SYMBOLS
=
[
"
FormValidationHandler
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
FormValidationHandler
=
{
_panel
:
null
_anchor
:
null
uninit
(
)
{
this
.
_panel
=
null
;
this
.
_anchor
=
null
;
}
hidePopup
(
)
{
this
.
_hidePopup
(
)
;
}
receiveMessage
(
aMessage
)
{
let
window
=
aMessage
.
target
.
ownerGlobal
;
let
json
=
aMessage
.
json
;
let
tabBrowser
=
window
.
gBrowser
;
switch
(
aMessage
.
name
)
{
case
"
FormValidation
:
ShowPopup
"
:
if
(
tabBrowser
&
&
aMessage
.
target
!
=
tabBrowser
.
selectedBrowser
)
{
return
;
}
this
.
_showPopup
(
window
json
)
;
break
;
case
"
FormValidation
:
HidePopup
"
:
this
.
_hidePopup
(
)
;
break
;
}
}
observe
(
aSubject
aTopic
aData
)
{
this
.
_hidePopup
(
)
;
}
handleEvent
(
aEvent
)
{
switch
(
aEvent
.
type
)
{
case
"
FullZoomChange
"
:
case
"
TextZoomChange
"
:
case
"
ZoomChangeUsingMouseWheel
"
:
case
"
scroll
"
:
this
.
_hidePopup
(
)
;
break
;
case
"
popuphiding
"
:
this
.
_onPopupHiding
(
aEvent
)
;
break
;
}
}
_onPopupHiding
(
aEvent
)
{
aEvent
.
originalTarget
.
removeEventListener
(
"
popuphiding
"
this
true
)
;
let
tabBrowser
=
aEvent
.
originalTarget
.
ownerDocument
.
getElementById
(
"
content
"
)
;
tabBrowser
.
selectedBrowser
.
removeEventListener
(
"
scroll
"
this
true
)
;
tabBrowser
.
selectedBrowser
.
removeEventListener
(
"
FullZoomChange
"
this
)
;
tabBrowser
.
selectedBrowser
.
removeEventListener
(
"
TextZoomChange
"
this
)
;
tabBrowser
.
selectedBrowser
.
removeEventListener
(
"
ZoomChangeUsingMouseWheel
"
this
)
;
this
.
_panel
.
hidden
=
true
;
this
.
_panel
=
null
;
this
.
_anchor
.
hidden
=
true
;
this
.
_anchor
=
null
;
}
_showPopup
(
aWindow
aPanelData
)
{
let
previouslyShown
=
!
!
this
.
_panel
;
this
.
_panel
=
aWindow
.
document
.
getElementById
(
"
invalid
-
form
-
popup
"
)
;
this
.
_panel
.
firstChild
.
textContent
=
aPanelData
.
message
;
this
.
_panel
.
hidden
=
false
;
let
tabBrowser
=
aWindow
.
gBrowser
;
this
.
_anchor
=
tabBrowser
.
popupAnchor
;
this
.
_anchor
.
left
=
aPanelData
.
contentRect
.
left
;
this
.
_anchor
.
top
=
aPanelData
.
contentRect
.
top
;
this
.
_anchor
.
width
=
aPanelData
.
contentRect
.
width
;
this
.
_anchor
.
height
=
aPanelData
.
contentRect
.
height
;
this
.
_anchor
.
hidden
=
false
;
if
(
!
previouslyShown
)
{
this
.
_panel
.
addEventListener
(
"
popuphiding
"
this
true
)
;
tabBrowser
.
selectedBrowser
.
addEventListener
(
"
scroll
"
this
true
)
;
tabBrowser
.
selectedBrowser
.
addEventListener
(
"
FullZoomChange
"
this
)
;
tabBrowser
.
selectedBrowser
.
addEventListener
(
"
TextZoomChange
"
this
)
;
tabBrowser
.
selectedBrowser
.
addEventListener
(
"
ZoomChangeUsingMouseWheel
"
this
)
;
this
.
_panel
.
openPopup
(
this
.
_anchor
aPanelData
.
position
0
0
false
)
;
}
}
_hidePopup
(
)
{
if
(
this
.
_panel
)
{
this
.
_panel
.
hidePopup
(
)
;
}
}
}
;
