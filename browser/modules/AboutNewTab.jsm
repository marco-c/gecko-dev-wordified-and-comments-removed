"
use
strict
"
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ActivityStream
:
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStream
.
jsm
"
ObjectUtils
:
"
resource
:
/
/
gre
/
modules
/
ObjectUtils
.
jsm
"
RemotePages
:
"
resource
:
/
/
gre
/
modules
/
remotepagemanager
/
RemotePageManagerParent
.
jsm
"
}
)
;
const
ABOUT_URL
=
"
about
:
newtab
"
;
const
PREF_ACTIVITY_STREAM_DEBUG
=
"
browser
.
newtabpage
.
activity
-
stream
.
debug
"
;
const
TOPIC_APP_QUIT
=
"
quit
-
application
-
granted
"
;
const
BROWSER_READY_NOTIFICATION
=
"
sessionstore
-
windows
-
restored
"
;
const
AboutNewTab
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
"
nsISupportsWeakReference
"
]
)
initialized
:
false
pageListener
:
null
isPageListenerOverridden
:
false
willNotifyUser
:
false
_activityStreamEnabled
:
false
activityStream
:
null
activityStreamDebug
:
false
_cachedTopSites
:
null
_newTabURL
:
ABOUT_URL
_newTabURLOverridden
:
false
init
(
pageListener
)
{
Services
.
obs
.
addObserver
(
this
TOPIC_APP_QUIT
)
;
if
(
!
AppConstants
.
RELEASE_OR_BETA
)
{
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
activityStreamDebug
"
PREF_ACTIVITY_STREAM_DEBUG
false
(
)
=
>
{
this
.
notifyChange
(
)
;
}
)
;
}
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
privilegedAboutProcessEnabled
"
"
browser
.
tabs
.
remote
.
separatePrivilegedContentProcess
"
false
(
)
=
>
{
this
.
notifyChange
(
)
;
}
)
;
this
.
toggleActivityStream
(
true
)
;
this
.
initialized
=
true
;
if
(
this
.
isPageListenerOverridden
)
{
return
;
}
if
(
!
pageListener
)
{
Services
.
obs
.
addObserver
(
this
BROWSER_READY_NOTIFICATION
)
;
}
this
.
pageListener
=
pageListener
|
|
new
RemotePages
(
[
"
about
:
home
"
"
about
:
newtab
"
"
about
:
welcome
"
]
)
;
}
toggleActivityStream
(
stateEnabled
forceState
=
false
)
{
if
(
!
forceState
&
&
(
this
.
_newTabURLOverridden
|
|
stateEnabled
=
=
=
this
.
_activityStreamEnabled
)
)
{
return
false
;
}
if
(
stateEnabled
)
{
this
.
_activityStreamEnabled
=
true
;
}
else
{
this
.
_activityStreamEnabled
=
false
;
}
this
.
_newTabURL
=
ABOUT_URL
;
return
true
;
}
get
newTabURL
(
)
{
return
this
.
_newTabURL
;
}
set
newTabURL
(
aNewTabURL
)
{
let
newTabURL
=
aNewTabURL
.
trim
(
)
;
if
(
newTabURL
=
=
=
ABOUT_URL
)
{
this
.
resetNewTabURL
(
)
;
return
;
}
else
if
(
newTabURL
=
=
=
"
"
)
{
newTabURL
=
"
about
:
blank
"
;
}
this
.
toggleActivityStream
(
false
)
;
this
.
_newTabURL
=
newTabURL
;
this
.
_newTabURLOverridden
=
true
;
this
.
notifyChange
(
)
;
}
get
newTabURLOverridden
(
)
{
return
this
.
_newTabURLOverridden
;
}
get
activityStreamEnabled
(
)
{
return
this
.
_activityStreamEnabled
;
}
resetNewTabURL
(
)
{
this
.
_newTabURLOverridden
=
false
;
this
.
_newTabURL
=
ABOUT_URL
;
this
.
toggleActivityStream
(
true
true
)
;
this
.
notifyChange
(
)
;
}
notifyChange
(
)
{
Services
.
obs
.
notifyObservers
(
null
"
newtab
-
url
-
changed
"
this
.
_newTabURL
)
;
}
onBrowserReady
(
)
{
if
(
this
.
activityStream
&
&
this
.
activityStream
.
initialized
)
{
return
;
}
this
.
activityStream
=
new
ActivityStream
(
)
;
try
{
this
.
activityStream
.
init
(
)
;
this
.
_subscribeToActivityStream
(
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
_subscribeToActivityStream
(
)
{
let
unsubscribe
=
this
.
activityStream
.
store
.
subscribe
(
(
)
=
>
{
let
topSites
=
this
.
activityStream
.
store
.
getState
(
)
.
TopSites
.
rows
.
map
(
site
=
>
{
site
=
{
.
.
.
site
}
;
delete
site
.
screenshot
;
return
site
;
}
)
;
if
(
!
ObjectUtils
.
deepEqual
(
topSites
this
.
_cachedTopSites
)
)
{
this
.
_cachedTopSites
=
topSites
;
Services
.
obs
.
notifyObservers
(
null
"
newtab
-
top
-
sites
-
changed
"
)
;
}
}
)
;
this
.
_unsubscribeFromActivityStream
=
(
)
=
>
{
try
{
unsubscribe
(
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
;
}
uninit
(
)
{
if
(
this
.
activityStream
)
{
this
.
_unsubscribeFromActivityStream
?
.
(
)
;
this
.
activityStream
.
uninit
(
)
;
this
.
activityStream
=
null
;
}
if
(
this
.
pageListener
)
{
this
.
pageListener
.
destroy
(
)
;
this
.
pageListener
=
null
;
}
this
.
initialized
=
false
;
}
overridePageListener
(
shouldPassPageListener
)
{
this
.
isPageListenerOverridden
=
true
;
const
pageListener
=
this
.
pageListener
;
if
(
!
pageListener
)
{
return
null
;
}
if
(
shouldPassPageListener
)
{
this
.
pageListener
=
null
;
return
pageListener
;
}
this
.
uninit
(
)
;
return
null
;
}
reset
(
pageListener
)
{
this
.
isPageListenerOverridden
=
false
;
this
.
init
(
pageListener
)
;
}
getTopSites
(
)
{
return
this
.
activityStream
?
this
.
activityStream
.
store
.
getState
(
)
.
TopSites
.
rows
:
[
]
;
}
_alreadyRecordedTopsitesPainted
:
false
_nonDefaultStartup
:
false
noteNonDefaultStartup
(
)
{
this
.
_nonDefaultStartup
=
true
;
}
maybeRecordTopsitesPainted
(
timestamp
)
{
if
(
this
.
_alreadyRecordedTopsitesPainted
|
|
this
.
_nonDefaultStartup
)
{
return
;
}
const
SCALAR_KEY
=
"
timestamps
.
about_home_topsites_first_paint
"
;
let
startupInfo
=
Services
.
startup
.
getStartupInfo
(
)
;
let
processStartTs
=
startupInfo
.
process
.
getTime
(
)
;
let
delta
=
Math
.
round
(
timestamp
-
processStartTs
)
;
Services
.
telemetry
.
scalarSet
(
SCALAR_KEY
delta
)
;
ChromeUtils
.
addProfilerMarker
(
"
aboutHomeTopsitesFirstPaint
"
)
;
this
.
_alreadyRecordedTopsitesPainted
=
true
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
TOPIC_APP_QUIT
:
{
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
this
.
uninit
(
)
)
;
break
;
}
case
BROWSER_READY_NOTIFICATION
:
{
Services
.
obs
.
removeObserver
(
this
BROWSER_READY_NOTIFICATION
)
;
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
this
.
onBrowserReady
(
)
)
;
break
;
}
}
}
}
;
var
EXPORTED_SYMBOLS
=
[
"
AboutNewTab
"
]
;
