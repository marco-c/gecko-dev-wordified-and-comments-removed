"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
AboutNewTab
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ActivityStream
:
"
resource
:
/
/
activity
-
stream
/
lib
/
ActivityStream
.
jsm
"
RemotePages
:
"
resource
:
/
/
gre
/
modules
/
RemotePageManager
.
jsm
"
}
)
;
const
BROWSER_READY_NOTIFICATION
=
"
sessionstore
-
windows
-
restored
"
;
var
AboutNewTab
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
pageListener
:
null
isOverridden
:
false
activityStream
:
null
init
(
pageListener
)
{
if
(
this
.
isOverridden
)
{
return
;
}
if
(
!
pageListener
)
{
Services
.
obs
.
addObserver
(
this
BROWSER_READY_NOTIFICATION
)
;
}
this
.
pageListener
=
pageListener
|
|
new
RemotePages
(
[
"
about
:
home
"
"
about
:
newtab
"
"
about
:
welcome
"
]
)
;
}
onBrowserReady
(
)
{
if
(
this
.
activityStream
&
&
this
.
activityStream
.
initialized
)
{
return
;
}
this
.
activityStream
=
new
ActivityStream
(
)
;
try
{
this
.
activityStream
.
init
(
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
}
uninit
(
)
{
if
(
this
.
activityStream
)
{
this
.
activityStream
.
uninit
(
)
;
this
.
activityStream
=
null
;
}
if
(
this
.
pageListener
)
{
this
.
pageListener
.
destroy
(
)
;
this
.
pageListener
=
null
;
}
}
override
(
shouldPassPageListener
)
{
this
.
isOverridden
=
true
;
const
pageListener
=
this
.
pageListener
;
if
(
!
pageListener
)
return
null
;
if
(
shouldPassPageListener
)
{
this
.
pageListener
=
null
;
return
pageListener
;
}
this
.
uninit
(
)
;
return
null
;
}
reset
(
pageListener
)
{
this
.
isOverridden
=
false
;
this
.
init
(
pageListener
)
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
BROWSER_READY_NOTIFICATION
:
Services
.
obs
.
removeObserver
(
this
BROWSER_READY_NOTIFICATION
)
;
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
this
.
onBrowserReady
(
)
)
;
break
;
}
}
}
;
