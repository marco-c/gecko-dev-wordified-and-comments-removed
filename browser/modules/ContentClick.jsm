"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ContentClick
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PlacesUIUtils
"
"
resource
:
/
/
/
modules
/
PlacesUIUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
var
ContentClick
=
{
receiveMessage
(
message
)
{
switch
(
message
.
name
)
{
case
"
Content
:
Click
"
:
this
.
contentAreaClick
(
message
.
json
message
.
target
)
;
break
;
}
}
contentAreaClick
(
json
browser
)
{
let
window
=
browser
.
ownerGlobal
;
if
(
!
json
.
href
)
{
if
(
Services
.
prefs
.
getBoolPref
(
"
middlemouse
.
contentLoadURL
"
)
&
&
!
Services
.
prefs
.
getBoolPref
(
"
general
.
autoScroll
"
)
)
{
window
.
middleMousePaste
(
json
)
;
}
return
;
}
if
(
window
.
openLinkIn
=
=
=
undefined
)
{
return
;
}
try
{
if
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
window
)
)
PlacesUIUtils
.
markPageAsFollowedLink
(
json
.
href
)
;
}
catch
(
ex
)
{
}
var
where
=
window
.
whereToOpenLink
(
json
)
;
if
(
where
=
=
"
current
"
)
return
;
let
params
=
{
charset
:
browser
.
characterSet
referrerURI
:
browser
.
documentURI
referrerPolicy
:
json
.
referrerPolicy
noReferrer
:
json
.
noReferrer
allowMixedContent
:
json
.
allowMixedContent
isContentWindowPrivate
:
json
.
isContentWindowPrivate
originPrincipal
:
json
.
originPrincipal
triggeringPrincipal
:
json
.
triggeringPrincipal
frameOuterWindowID
:
json
.
frameOuterWindowID
}
;
if
(
json
.
originAttributes
.
userContextId
)
{
params
.
userContextId
=
json
.
originAttributes
.
userContextId
;
}
params
.
allowInheritPrincipal
=
true
;
window
.
openLinkIn
(
json
.
href
where
params
)
;
}
}
;
