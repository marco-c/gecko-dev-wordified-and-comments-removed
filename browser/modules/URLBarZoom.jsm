"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
URLBarZoom
"
]
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
URLBarZoom
=
{
init
(
aWindow
)
{
aWindow
.
addEventListener
(
"
EndSwapDocShells
"
onEndSwapDocShells
true
)
;
aWindow
.
addEventListener
(
"
unload
"
(
)
=
>
{
aWindow
.
removeEventListener
(
"
EndSwapDocShells
"
onEndSwapDocShells
true
)
;
aWindow
.
removeEventListener
(
"
FullZoomChange
"
onFullZoomChange
)
;
}
{
once
:
true
}
)
;
aWindow
.
addEventListener
(
"
FullZoomChange
"
onFullZoomChange
)
;
}
}
function
fullZoomLocationChangeObserver
(
aSubject
aTopic
)
{
if
(
!
aSubject
.
ownerGlobal
)
{
return
;
}
updateZoomButton
(
aSubject
false
)
;
}
function
onEndSwapDocShells
(
event
)
{
updateZoomButton
(
event
.
originalTarget
)
;
}
function
onFullZoomChange
(
event
)
{
updateZoomButton
(
event
.
originalTarget
true
)
;
}
function
updateZoomButton
(
aBrowser
aAnimate
=
false
)
{
let
win
=
aBrowser
.
ownerGlobal
;
if
(
aBrowser
!
=
win
.
gBrowser
.
selectedBrowser
)
{
return
;
}
let
customizableZoomControls
=
win
.
document
.
getElementById
(
"
zoom
-
controls
"
)
;
let
zoomResetButton
=
win
.
document
.
getElementById
(
"
urlbar
-
zoom
-
button
"
)
;
if
(
customizableZoomControls
&
&
customizableZoomControls
.
getAttribute
(
"
cui
-
areatype
"
)
=
=
"
toolbar
"
)
{
zoomResetButton
.
hidden
=
true
;
return
;
}
let
zoomFactor
=
Math
.
round
(
win
.
ZoomManager
.
zoom
*
100
)
;
if
(
zoomFactor
!
=
100
)
{
zoomResetButton
.
hidden
=
false
;
if
(
aAnimate
)
{
zoomResetButton
.
setAttribute
(
"
animate
"
"
true
"
)
;
}
else
{
zoomResetButton
.
removeAttribute
(
"
animate
"
)
;
}
zoomResetButton
.
setAttribute
(
"
label
"
win
.
gNavigatorBundle
.
getFormattedString
(
"
urlbar
-
zoom
-
button
.
label
"
[
zoomFactor
]
)
)
;
}
else
{
zoomResetButton
.
hidden
=
true
;
}
}
Services
.
obs
.
addObserver
(
fullZoomLocationChangeObserver
"
browser
-
fullZoom
:
location
-
change
"
false
)
;
