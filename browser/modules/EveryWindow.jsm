"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
EveryWindow
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
initialized
=
false
;
var
callbacks
=
new
Map
(
)
;
function
callForEveryWindow
(
callback
)
{
let
windowList
=
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
;
for
(
let
win
of
windowList
)
{
win
.
delayedStartupPromise
.
then
(
(
)
=
>
{
callback
(
win
)
;
}
)
;
}
}
this
.
EveryWindow
=
{
registerCallback
:
function
EW_registerCallback
(
id
init
uninit
)
{
if
(
callbacks
.
has
(
id
)
)
{
return
false
;
}
if
(
!
initialized
)
{
let
addUnloadListener
=
(
win
)
=
>
{
function
observer
(
subject
topic
data
)
{
if
(
topic
=
=
"
domwindowclosed
"
&
&
subject
=
=
=
win
)
{
Services
.
ww
.
unregisterNotification
(
observer
)
;
for
(
let
c
of
callbacks
.
values
(
)
)
{
c
.
uninit
(
win
true
)
;
}
}
}
Services
.
ww
.
registerNotification
(
observer
)
;
}
;
Services
.
obs
.
addObserver
(
win
=
>
{
for
(
let
c
of
callbacks
.
values
(
)
)
{
c
.
init
(
win
)
;
}
addUnloadListener
(
win
)
;
}
"
browser
-
delayed
-
startup
-
finished
"
)
;
callForEveryWindow
(
addUnloadListener
)
;
initialized
=
true
;
}
callForEveryWindow
(
init
)
;
callbacks
.
set
(
id
{
id
init
uninit
}
)
;
return
true
;
}
unregisterCallback
:
function
EW_unregisterCallback
(
id
callUninit
=
true
)
{
if
(
!
callbacks
.
has
(
id
)
)
{
return
;
}
if
(
callUninit
)
{
callForEveryWindow
(
callbacks
.
get
(
id
)
.
uninit
)
;
}
callbacks
.
delete
(
id
)
;
}
}
;
