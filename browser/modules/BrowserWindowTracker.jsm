var
EXPORTED_SYMBOLS
=
[
"
BrowserWindowTracker
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
}
)
;
const
TAB_EVENTS
=
[
"
TabBrowserInserted
"
"
TabSelect
"
]
;
const
WINDOW_EVENTS
=
[
"
activate
"
"
sizemodechange
"
"
unload
"
]
;
const
DEBUG
=
false
;
var
_lastTopLevelWindowID
=
0
;
var
_trackedWindows
=
[
]
;
function
debug
(
s
)
{
if
(
DEBUG
)
{
dump
(
"
-
*
-
UpdateTopLevelContentWindowIDHelper
:
"
+
s
+
"
\
n
"
)
;
}
}
function
_updateCurrentContentOuterWindowID
(
browser
)
{
if
(
!
browser
.
outerWindowID
|
|
browser
.
outerWindowID
=
=
=
_lastTopLevelWindowID
)
{
return
;
}
debug
(
"
Current
window
uri
=
"
+
browser
.
currentURI
.
spec
+
"
id
=
"
+
browser
.
outerWindowID
)
;
_lastTopLevelWindowID
=
browser
.
outerWindowID
;
let
windowIDWrapper
=
Cc
[
"
mozilla
.
org
/
supports
-
PRUint64
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRUint64
)
;
windowIDWrapper
.
data
=
_lastTopLevelWindowID
;
Services
.
obs
.
notifyObservers
(
windowIDWrapper
"
net
:
current
-
toplevel
-
outer
-
content
-
windowid
"
)
;
}
function
_handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
TabBrowserInserted
"
:
if
(
event
.
target
.
ownerGlobal
.
gBrowser
.
selectedBrowser
=
=
=
event
.
target
.
linkedBrowser
)
{
_updateCurrentContentOuterWindowID
(
event
.
target
.
linkedBrowser
)
;
}
break
;
case
"
TabSelect
"
:
_updateCurrentContentOuterWindowID
(
event
.
target
.
linkedBrowser
)
;
break
;
case
"
activate
"
:
WindowHelper
.
onActivate
(
event
.
target
)
;
break
;
case
"
sizemodechange
"
:
WindowHelper
.
onSizemodeChange
(
event
.
target
)
;
break
;
case
"
unload
"
:
WindowHelper
.
removeWindow
(
event
.
currentTarget
)
;
break
;
}
}
function
_handleMessage
(
message
)
{
let
browser
=
message
.
target
;
if
(
message
.
name
=
=
=
"
Browser
:
Init
"
&
&
browser
=
=
=
browser
.
ownerGlobal
.
gBrowser
.
selectedBrowser
)
{
_updateCurrentContentOuterWindowID
(
browser
)
;
}
}
function
_trackWindowOrder
(
window
)
{
_trackedWindows
.
splice
(
window
.
windowState
=
=
window
.
STATE_MINIMIZED
?
_trackedWindows
.
length
-
1
:
0
0
window
)
;
}
function
_untrackWindowOrder
(
window
)
{
let
idx
=
_trackedWindows
.
indexOf
(
window
)
;
if
(
idx
>
=
0
)
_trackedWindows
.
splice
(
idx
1
)
;
}
var
WindowHelper
=
{
addWindow
(
window
)
{
TAB_EVENTS
.
forEach
(
function
(
event
)
{
window
.
gBrowser
.
tabContainer
.
addEventListener
(
event
_handleEvent
)
;
}
)
;
WINDOW_EVENTS
.
forEach
(
function
(
event
)
{
window
.
addEventListener
(
event
_handleEvent
)
;
}
)
;
let
messageManager
=
window
.
getGroupMessageManager
(
"
browsers
"
)
;
messageManager
.
addMessageListener
(
"
Browser
:
Init
"
_handleMessage
)
;
_trackWindowOrder
(
window
)
;
_updateCurrentContentOuterWindowID
(
window
.
gBrowser
.
selectedBrowser
)
;
}
removeWindow
(
window
)
{
_untrackWindowOrder
(
window
)
;
TAB_EVENTS
.
forEach
(
function
(
event
)
{
window
.
gBrowser
.
tabContainer
.
removeEventListener
(
event
_handleEvent
)
;
}
)
;
WINDOW_EVENTS
.
forEach
(
function
(
event
)
{
window
.
removeEventListener
(
event
_handleEvent
)
;
}
)
;
let
messageManager
=
window
.
getGroupMessageManager
(
"
browsers
"
)
;
messageManager
.
removeMessageListener
(
"
Browser
:
Init
"
_handleMessage
)
;
}
onActivate
(
window
hasFocus
)
{
if
(
window
=
=
_trackedWindows
[
0
]
)
return
;
_untrackWindowOrder
(
window
)
;
_trackWindowOrder
(
window
)
;
_updateCurrentContentOuterWindowID
(
window
.
gBrowser
.
selectedBrowser
)
;
}
onSizemodeChange
(
window
)
{
if
(
window
.
windowState
=
=
window
.
STATE_MINIMIZED
)
{
_untrackWindowOrder
(
window
)
;
_trackedWindows
.
push
(
window
)
;
}
}
getTopWindow
(
options
)
{
let
checkPrivacy
=
typeof
options
=
=
"
object
"
&
&
"
private
"
in
options
;
let
allowPopups
=
typeof
options
=
=
"
object
"
&
&
!
!
options
.
allowPopups
;
function
isSuitableBrowserWindow
(
win
)
{
return
(
!
win
.
closed
&
&
(
allowPopups
|
|
win
.
toolbar
.
visible
)
&
&
(
!
checkPrivacy
|
|
PrivateBrowsingUtils
.
permanentPrivateBrowsing
|
|
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
=
=
options
.
private
)
)
;
}
let
broken_wm_z_order
=
AppConstants
.
platform
!
=
"
macosx
"
&
&
AppConstants
.
platform
!
=
"
win
"
;
if
(
broken_wm_z_order
)
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
win
&
&
!
isSuitableBrowserWindow
(
win
)
)
{
win
=
null
;
for
(
let
nextWin
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
if
(
isSuitableBrowserWindow
(
nextWin
)
)
win
=
nextWin
;
}
}
return
win
;
}
for
(
let
win
of
Services
.
wm
.
getZOrderDOMWindowEnumerator
(
"
navigator
:
browser
"
true
)
)
{
if
(
isSuitableBrowserWindow
(
win
)
)
return
win
;
}
return
null
;
}
}
;
this
.
BrowserWindowTracker
=
{
getTopWindow
(
options
)
{
return
WindowHelper
.
getTopWindow
(
options
)
;
}
orderedWindows
:
{
*
[
Symbol
.
iterator
]
(
)
{
for
(
let
window
of
[
.
.
.
_trackedWindows
]
)
yield
window
;
}
}
track
(
window
)
{
return
WindowHelper
.
addWindow
(
window
)
;
}
}
;
