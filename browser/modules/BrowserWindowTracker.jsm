var
EXPORTED_SYMBOLS
=
[
"
BrowserWindowTracker
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
}
)
;
const
TAB_EVENTS
=
[
"
TabBrowserInserted
"
"
TabSelect
"
]
;
const
WINDOW_EVENTS
=
[
"
activate
"
"
unload
"
]
;
const
DEBUG
=
false
;
var
_lastTopBrowsingContextID
=
0
;
var
_trackedWindows
=
[
]
;
function
debug
(
s
)
{
if
(
DEBUG
)
{
dump
(
"
-
*
-
UpdateTopBrowsingContextIDHelper
:
"
+
s
+
"
\
n
"
)
;
}
}
function
_updateCurrentBrowsingContextID
(
browser
)
{
if
(
!
browser
.
browsingContext
|
|
browser
.
browsingContext
.
id
=
=
=
_lastTopBrowsingContextID
|
|
browser
.
ownerGlobal
!
=
_trackedWindows
[
0
]
)
{
return
;
}
debug
(
"
Current
window
uri
=
"
+
(
browser
.
currentURI
&
&
browser
.
currentURI
.
spec
)
+
"
browsing
context
id
=
"
+
browser
.
browsingContext
.
id
)
;
_lastTopBrowsingContextID
=
browser
.
browsingContext
.
id
;
let
idWrapper
=
Cc
[
"
mozilla
.
org
/
supports
-
PRUint64
;
1
"
]
.
createInstance
(
Ci
.
nsISupportsPRUint64
)
;
idWrapper
.
data
=
_lastTopBrowsingContextID
;
Services
.
obs
.
notifyObservers
(
idWrapper
"
net
:
current
-
top
-
browsing
-
context
-
id
"
)
;
}
function
_handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
TabBrowserInserted
"
:
if
(
event
.
target
.
ownerGlobal
.
gBrowser
.
selectedBrowser
=
=
=
event
.
target
.
linkedBrowser
)
{
_updateCurrentBrowsingContextID
(
event
.
target
.
linkedBrowser
)
;
}
break
;
case
"
TabSelect
"
:
_updateCurrentBrowsingContextID
(
event
.
target
.
linkedBrowser
)
;
break
;
case
"
activate
"
:
WindowHelper
.
onActivate
(
event
.
target
)
;
break
;
case
"
unload
"
:
WindowHelper
.
removeWindow
(
event
.
currentTarget
)
;
break
;
}
}
function
_trackWindowOrder
(
window
)
{
if
(
window
.
windowState
=
=
window
.
STATE_MINIMIZED
)
{
let
firstMinimizedWindow
=
_trackedWindows
.
findIndex
(
w
=
>
w
.
windowState
=
=
w
.
STATE_MINIMIZED
)
;
if
(
firstMinimizedWindow
=
=
-
1
)
{
firstMinimizedWindow
=
_trackedWindows
.
length
;
}
_trackedWindows
.
splice
(
firstMinimizedWindow
0
window
)
;
}
else
{
_trackedWindows
.
unshift
(
window
)
;
}
}
function
_untrackWindowOrder
(
window
)
{
let
idx
=
_trackedWindows
.
indexOf
(
window
)
;
if
(
idx
>
=
0
)
{
_trackedWindows
.
splice
(
idx
1
)
;
}
}
var
WindowHelper
=
{
addWindow
(
window
)
{
TAB_EVENTS
.
forEach
(
function
(
event
)
{
window
.
gBrowser
.
tabContainer
.
addEventListener
(
event
_handleEvent
)
;
}
)
;
WINDOW_EVENTS
.
forEach
(
function
(
event
)
{
window
.
addEventListener
(
event
_handleEvent
)
;
}
)
;
_trackWindowOrder
(
window
)
;
_updateCurrentBrowsingContextID
(
window
.
gBrowser
.
selectedBrowser
)
;
}
removeWindow
(
window
)
{
_untrackWindowOrder
(
window
)
;
TAB_EVENTS
.
forEach
(
function
(
event
)
{
window
.
gBrowser
.
tabContainer
.
removeEventListener
(
event
_handleEvent
)
;
}
)
;
WINDOW_EVENTS
.
forEach
(
function
(
event
)
{
window
.
removeEventListener
(
event
_handleEvent
)
;
}
)
;
}
onActivate
(
window
)
{
if
(
window
=
=
_trackedWindows
[
0
]
)
{
return
;
}
_untrackWindowOrder
(
window
)
;
_trackWindowOrder
(
window
)
;
_updateCurrentBrowsingContextID
(
window
.
gBrowser
.
selectedBrowser
)
;
}
}
;
const
BrowserWindowTracker
=
{
getTopWindow
(
options
=
{
}
)
{
for
(
let
win
of
_trackedWindows
)
{
if
(
!
win
.
closed
&
&
(
options
.
allowPopups
|
|
win
.
toolbar
.
visible
)
&
&
(
!
(
"
private
"
in
options
)
|
|
lazy
.
PrivateBrowsingUtils
.
permanentPrivateBrowsing
|
|
lazy
.
PrivateBrowsingUtils
.
isWindowPrivate
(
win
)
=
=
options
.
private
)
)
{
return
win
;
}
}
return
null
;
}
windowCreated
(
browser
)
{
if
(
browser
=
=
=
browser
.
ownerGlobal
.
gBrowser
.
selectedBrowser
)
{
_updateCurrentBrowsingContextID
(
browser
)
;
}
}
get
windowCount
(
)
{
return
_trackedWindows
.
length
;
}
get
orderedWindows
(
)
{
return
[
.
.
.
_trackedWindows
]
;
}
getAllVisibleTabs
(
)
{
let
tabs
=
[
]
;
for
(
let
win
of
BrowserWindowTracker
.
orderedWindows
)
{
for
(
let
tab
of
win
.
gBrowser
.
visibleTabs
)
{
if
(
tab
.
linkedPanel
)
{
let
{
contentTitle
browserId
}
=
tab
.
linkedBrowser
;
tabs
.
push
(
{
contentTitle
browserId
}
)
;
}
}
}
return
tabs
;
}
track
(
window
)
{
return
WindowHelper
.
addWindow
(
window
)
;
}
untrackForTestsOnly
(
window
)
{
return
WindowHelper
.
removeWindow
(
window
)
;
}
}
;
