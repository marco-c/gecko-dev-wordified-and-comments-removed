"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
SavantShieldStudy
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
PREF_LOG_LEVEL
=
"
shield
.
savant
.
loglevel
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
ConsoleAPI
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
.
ConsoleAPI
;
let
consoleOptions
=
{
maxLogLevelPref
:
PREF_LOG_LEVEL
prefix
:
"
SavantShieldStudy
"
}
;
return
new
ConsoleAPI
(
consoleOptions
)
;
}
)
;
class
SavantShieldStudyClass
{
constructor
(
)
{
this
.
STUDY_PREF
=
"
shield
.
savant
.
enabled
"
;
this
.
STUDY_TELEMETRY_CATEGORY
=
"
savant
"
;
}
init
(
)
{
this
.
TelemetryEvents
=
new
TelemetryEvents
(
this
.
STUDY_TELEMETRY_CATEGORY
)
;
const
isEligible
=
true
;
if
(
!
isEligible
)
{
this
.
endStudy
(
"
ineligible
"
)
;
return
;
}
this
.
shouldCollect
=
Services
.
prefs
.
getBoolPref
(
this
.
STUDY_PREF
)
;
if
(
this
.
shouldCollect
)
{
this
.
TelemetryEvents
.
enableCollection
(
)
;
}
Services
.
prefs
.
addObserver
(
this
.
STUDY_PREF
this
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
=
"
nsPref
:
changed
"
&
&
data
=
=
=
this
.
STUDY_PREF
)
{
this
.
shouldCollect
=
!
this
.
shouldCollect
;
if
(
this
.
shouldCollect
)
{
this
.
TelemetryEvents
.
enableCollection
(
)
;
}
else
{
this
.
endStudy
(
"
expired
"
)
;
}
}
}
sendEvent
(
method
object
value
extra
)
{
this
.
TelemetryEvents
.
sendEvent
(
method
object
value
extra
)
;
}
endStudy
(
reason
)
{
this
.
TelemetryEvents
.
disableCollection
(
)
;
this
.
uninit
(
)
;
}
uninit
(
)
{
Services
.
prefs
.
removeObserver
(
this
.
STUDY_PREF
this
)
;
Services
.
prefs
.
clearUserPref
(
this
.
STUDY_PREF
)
;
Services
.
prefs
.
clearUserPref
(
PREF_LOG_LEVEL
)
;
}
}
const
SavantShieldStudy
=
new
SavantShieldStudyClass
(
)
;
class
TelemetryEvents
{
constructor
(
studyCategory
)
{
this
.
STUDY_TELEMETRY_CATEGORY
=
studyCategory
;
}
enableCollection
(
)
{
log
.
debug
(
"
Study
has
been
enabled
;
turning
ON
data
collection
.
"
)
;
Services
.
telemetry
.
setEventRecordingEnabled
(
this
.
STUDY_TELEMETRY_CATEGORY
true
)
;
}
disableCollection
(
)
{
log
.
debug
(
"
Study
has
been
disabled
;
turning
OFF
data
collection
.
"
)
;
Services
.
telemetry
.
setEventRecordingEnabled
(
this
.
STUDY_TELEMETRY_CATEGORY
false
)
;
}
}
