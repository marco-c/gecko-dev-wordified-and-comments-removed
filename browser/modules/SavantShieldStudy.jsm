"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
SavantShieldStudy
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AddonManager
:
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
}
)
;
const
PREF_LOG_LEVEL
=
"
shield
.
savant
.
loglevel
"
;
XPCOMUtils
.
defineLazyGetter
(
this
"
log
"
(
)
=
>
{
let
ConsoleAPI
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
.
ConsoleAPI
;
let
consoleOptions
=
{
maxLogLevelPref
:
PREF_LOG_LEVEL
prefix
:
"
SavantShieldStudy
"
}
;
return
new
ConsoleAPI
(
consoleOptions
)
;
}
)
;
class
SavantShieldStudyClass
{
constructor
(
)
{
this
.
STUDY_PREF
=
"
shield
.
savant
.
enabled
"
;
this
.
STUDY_TELEMETRY_CATEGORY
=
"
savant
"
;
this
.
ALWAYS_PRIVATE_BROWSING_PREF
=
"
browser
.
privatebrowsing
.
autostart
"
;
this
.
STUDY_DURATION_OVERRIDE_PREF
=
"
shield
.
savant
.
duration_override
"
;
this
.
STUDY_EXPIRATION_DATE_PREF
=
"
shield
.
savant
.
expiration_date
"
;
this
.
DEFAULT_STUDY_DURATION_MS
=
4
*
7
*
24
*
60
*
60
*
1000
;
}
init
(
)
{
this
.
TelemetryEvents
=
new
TelemetryEvents
(
this
.
STUDY_TELEMETRY_CATEGORY
)
;
this
.
AddonListener
=
new
AddonListener
(
this
.
STUDY_TELEMETRY_CATEGORY
)
;
this
.
shouldCollect
=
Services
.
prefs
.
getBoolPref
(
this
.
STUDY_PREF
)
;
if
(
this
.
shouldCollect
)
{
this
.
startupStudy
(
)
;
}
Services
.
prefs
.
addObserver
(
this
.
STUDY_PREF
this
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
=
"
nsPref
:
changed
"
&
&
data
=
=
=
this
.
STUDY_PREF
)
{
this
.
shouldCollect
=
!
this
.
shouldCollect
;
if
(
this
.
shouldCollect
)
{
this
.
startupStudy
(
)
;
}
else
{
this
.
endStudy
(
"
study_disable
"
)
;
}
}
}
startupStudy
(
)
{
this
.
TelemetryEvents
.
enableCollection
(
)
;
if
(
!
this
.
isEligible
(
)
)
{
this
.
endStudy
(
"
ineligible
"
)
;
return
;
}
this
.
initStudyDuration
(
)
;
if
(
this
.
isStudyExpired
(
)
)
{
log
.
debug
(
"
Study
expired
in
between
this
and
the
previous
session
.
"
)
;
this
.
endStudy
(
"
expired
"
)
;
}
this
.
AddonListener
.
init
(
)
;
}
isEligible
(
)
{
const
isAlwaysPrivateBrowsing
=
Services
.
prefs
.
getBoolPref
(
this
.
ALWAYS_PRIVATE_BROWSING_PREF
)
;
if
(
isAlwaysPrivateBrowsing
)
{
return
false
;
}
return
true
;
}
initStudyDuration
(
)
{
if
(
Services
.
prefs
.
getStringPref
(
this
.
STUDY_EXPIRATION_DATE_PREF
"
"
)
)
{
return
;
}
Services
.
prefs
.
setStringPref
(
this
.
STUDY_EXPIRATION_DATE_PREF
this
.
getExpirationDateString
(
)
)
;
}
getDurationFromPref
(
)
{
return
Services
.
prefs
.
getIntPref
(
this
.
STUDY_DURATION_OVERRIDE_PREF
0
)
;
}
getExpirationDateString
(
)
{
const
now
=
Date
.
now
(
)
;
const
studyDurationInMs
=
this
.
getDurationFromPref
(
)
|
|
this
.
DEFAULT_STUDY_DURATION_MS
;
const
expirationDateInt
=
now
+
studyDurationInMs
;
return
new
Date
(
expirationDateInt
)
.
toISOString
(
)
;
}
isStudyExpired
(
)
{
const
expirationDateInt
=
Date
.
parse
(
Services
.
prefs
.
getStringPref
(
this
.
STUDY_EXPIRATION_DATE_PREF
this
.
getExpirationDateString
(
)
)
)
;
if
(
isNaN
(
expirationDateInt
)
)
{
log
.
error
(
The
value
for
the
preference
{
this
.
STUDY_EXPIRATION_DATE_PREF
}
is
invalid
.
)
;
return
false
;
}
if
(
Date
.
now
(
)
>
expirationDateInt
)
{
return
true
;
}
return
false
;
}
endStudy
(
reason
)
{
log
.
debug
(
Ending
the
study
due
to
reason
:
{
reason
}
)
;
const
isStudyEnding
=
true
;
Services
.
telemetry
.
recordEvent
(
this
.
STUDY_TELEMETRY_CATEGORY
"
end_study
"
reason
null
{
subcategory
:
"
shield
"
}
)
;
this
.
TelemetryEvents
.
disableCollection
(
)
;
this
.
uninit
(
isStudyEnding
)
;
Services
.
prefs
.
clearUserPref
(
this
.
STUDY_PREF
)
;
Services
.
prefs
.
clearUserPref
(
this
.
STUDY_EXPIRATION_DATE_PREF
)
;
}
uninit
(
isStudyEnding
=
false
)
{
if
(
!
isStudyEnding
&
&
this
.
isStudyExpired
(
)
)
{
log
.
debug
(
"
Study
expired
during
this
session
.
"
)
;
this
.
endStudy
(
"
expired
"
)
;
return
;
}
this
.
AddonListener
.
uninit
(
)
;
Services
.
prefs
.
removeObserver
(
this
.
ALWAYS_PRIVATE_BROWSING_PREF
this
)
;
Services
.
prefs
.
removeObserver
(
this
.
STUDY_PREF
this
)
;
Services
.
prefs
.
removeObserver
(
this
.
STUDY_DURATION_OVERRIDE_PREF
this
)
;
Services
.
prefs
.
clearUserPref
(
PREF_LOG_LEVEL
)
;
Services
.
prefs
.
clearUserPref
(
this
.
STUDY_DURATION_OVERRIDE_PREF
)
;
}
}
class
TelemetryEvents
{
constructor
(
studyCategory
)
{
this
.
STUDY_TELEMETRY_CATEGORY
=
studyCategory
;
}
enableCollection
(
)
{
log
.
debug
(
"
Study
has
been
enabled
;
turning
ON
data
collection
.
"
)
;
Services
.
telemetry
.
setEventRecordingEnabled
(
this
.
STUDY_TELEMETRY_CATEGORY
true
)
;
}
disableCollection
(
)
{
log
.
debug
(
"
Study
has
been
disabled
;
turning
OFF
data
collection
.
"
)
;
Services
.
telemetry
.
setEventRecordingEnabled
(
this
.
STUDY_TELEMETRY_CATEGORY
false
)
;
}
}
class
AddonListener
{
constructor
(
studyCategory
)
{
this
.
STUDY_TELEMETRY_CATEGORY
=
studyCategory
;
this
.
METHOD
=
"
addon
"
;
this
.
EXTRA_SUBCATEGORY
=
"
customize
"
;
}
init
(
)
{
this
.
listener
=
{
onInstalling
:
(
addon
needsRestart
)
=
>
{
const
addon_id
=
addon
.
id
;
this
.
recordEvent
(
"
install_start
"
addon_id
)
;
}
onInstalled
:
(
addon
)
=
>
{
const
addon_id
=
addon
.
id
;
this
.
recordEvent
(
"
install_finish
"
addon_id
)
;
}
onEnabled
:
(
addon
)
=
>
{
const
addon_id
=
addon
.
id
;
this
.
recordEvent
(
"
enable
"
addon_id
)
;
}
onDisabled
:
(
addon
)
=
>
{
const
addon_id
=
addon
.
id
;
this
.
recordEvent
(
"
disable
"
addon_id
)
;
}
onUninstalling
:
(
addon
needsRestart
)
=
>
{
const
addon_id
=
addon
.
id
;
this
.
recordEvent
(
"
remove_start
"
addon_id
)
;
}
onUninstalled
:
(
addon
)
=
>
{
const
addon_id
=
addon
.
id
;
this
.
recordEvent
(
"
remove_finish
"
addon_id
)
;
}
}
;
this
.
addListeners
(
)
;
}
addListeners
(
)
{
AddonManager
.
addAddonListener
(
this
.
listener
)
;
}
recordEvent
(
event
addon_id
)
{
log
.
debug
(
Addon
ID
:
{
addon_id
}
;
event
:
{
event
}
)
;
Services
.
telemetry
.
recordEvent
(
this
.
STUDY_TELEMETRY_CATEGORY
this
.
METHOD
event
addon_id
{
subcategory
:
this
.
EXTRA_SUBCATEGORY
}
)
;
}
removeListeners
(
)
{
AddonManager
.
removeAddonListener
(
this
.
listener
)
;
}
uninit
(
)
{
this
.
removeListeners
(
)
;
}
}
const
SavantShieldStudy
=
new
SavantShieldStudyClass
(
)
;
