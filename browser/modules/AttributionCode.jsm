"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
AttributionCode
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AppConstants
"
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Task
"
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
const
ATTR_CODE_MAX_LENGTH
=
200
;
const
ATTR_CODE_KEYS_REGEX
=
/
^
source
|
medium
|
campaign
|
content
/
;
const
ATTR_CODE_VALUE_REGEX
=
/
[
a
-
zA
-
Z0
-
9_
%
\
\
-
\
\
.
\
\
(
\
\
)
]
*
/
;
const
ATTR_CODE_FIELD_SEPARATOR
=
"
%
26
"
;
const
ATTR_CODE_KEY_VALUE_SEPARATOR
=
"
%
3D
"
;
let
gCachedAttrData
=
null
;
function
getAttributionFile
(
)
{
let
file
=
Services
.
dirsvc
.
get
(
"
LocalAppData
"
Ci
.
nsIFile
)
;
file
.
append
(
Services
.
appinfo
.
vendor
|
|
"
mozilla
"
)
;
file
.
append
(
AppConstants
.
MOZ_APP_NAME
)
;
file
.
append
(
"
postSigningData
"
)
;
return
file
;
}
function
parseAttributionCode
(
code
)
{
if
(
code
.
length
>
ATTR_CODE_MAX_LENGTH
)
{
return
{
}
;
}
let
isValid
=
true
;
let
parsed
=
{
}
;
for
(
let
param
of
code
.
split
(
ATTR_CODE_FIELD_SEPARATOR
)
)
{
let
[
key
value
]
=
param
.
split
(
ATTR_CODE_KEY_VALUE_SEPARATOR
2
)
;
if
(
key
&
&
ATTR_CODE_KEYS_REGEX
.
test
(
key
)
)
{
if
(
value
&
&
ATTR_CODE_VALUE_REGEX
.
test
(
value
)
)
{
parsed
[
key
]
=
value
;
}
}
else
{
isValid
=
false
;
break
;
}
}
return
isValid
?
parsed
:
{
}
;
}
var
AttributionCode
=
{
getAttrDataAsync
(
)
{
return
Task
.
spawn
(
function
*
(
)
{
if
(
gCachedAttrData
!
=
null
)
{
return
gCachedAttrData
;
}
let
code
=
"
"
;
try
{
let
bytes
=
yield
OS
.
File
.
read
(
getAttributionFile
(
)
.
path
)
;
let
decoder
=
new
TextDecoder
(
)
;
code
=
decoder
.
decode
(
bytes
)
;
}
catch
(
ex
)
{
}
gCachedAttrData
=
parseAttributionCode
(
code
)
;
return
gCachedAttrData
;
}
)
;
}
deleteFileAsync
(
)
{
return
Task
.
spawn
(
function
*
(
)
{
try
{
yield
OS
.
File
.
remove
(
getAttributionFile
(
)
.
path
)
;
}
catch
(
ex
)
{
}
}
)
;
}
_clearCache
(
)
{
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
if
(
env
.
exists
(
"
XPCSHELL_TEST_PROFILE_DIR
"
)
)
{
gCachedAttrData
=
null
;
}
}
}
;
