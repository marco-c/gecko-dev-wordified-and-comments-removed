"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
LightweightThemeChildHelper
"
]
;
var
LightweightThemeChildHelper
=
{
listener
:
null
whitelist
:
[
]
listen
(
whitelist
)
{
if
(
!
this
.
listener
)
{
this
.
whitelist
=
new
Set
(
[
.
.
.
whitelist
]
)
;
this
.
listener
=
(
{
changedKeys
}
)
=
>
{
if
(
changedKeys
.
find
(
change
=
>
change
.
startsWith
(
"
theme
/
"
)
)
)
{
this
.
_updateProcess
(
changedKeys
)
;
}
}
;
Services
.
cpmm
.
sharedData
.
addEventListener
(
"
change
"
this
.
listener
)
;
Services
.
obs
.
addObserver
(
(
)
=
>
{
Services
.
cpmm
.
sharedData
.
removeEventListener
(
"
change
"
this
.
listener
)
;
}
"
xpcom
-
will
-
shutdown
"
)
;
}
}
_updateProcess
(
changedKeys
)
{
const
windowEnumerator
=
Services
.
ww
.
getWindowEnumerator
(
)
;
while
(
windowEnumerator
.
hasMoreElements
(
)
)
{
const
window
=
windowEnumerator
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsIDOMWindow
)
;
const
tabChildGlobal
=
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDocShell
)
.
sameTypeRootTreeItem
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIContentFrameMessageManager
)
;
const
{
chromeOuterWindowID
content
}
=
tabChildGlobal
;
if
(
changedKeys
.
includes
(
theme
/
{
chromeOuterWindowID
}
)
&
&
content
&
&
this
.
whitelist
.
has
(
content
.
document
.
documentURI
)
)
{
this
.
update
(
chromeOuterWindowID
content
)
;
}
}
}
update
(
outerWindowID
content
)
{
const
event
=
Cu
.
cloneInto
(
{
detail
:
{
data
:
Services
.
cpmm
.
sharedData
.
get
(
theme
/
{
outerWindowID
}
)
}
}
content
)
;
content
.
dispatchEvent
(
new
content
.
CustomEvent
(
"
LightweightTheme
:
Set
"
event
)
)
;
}
}
;
