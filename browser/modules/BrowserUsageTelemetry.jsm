"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
BrowserUsageTelemetry
"
"
getUniqueDomainsVisitedInPast24Hours
"
"
URICountListener
"
"
URLBAR_SELECTED_RESULT_TYPES
"
"
URLBAR_SELECTED_RESULT_METHODS
"
"
MINIMUM_TAB_COUNT_INTERVAL_MS
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
SearchTelemetry
:
"
resource
:
/
/
/
modules
/
SearchTelemetry
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
setTimeout
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
clearTimeout
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
gRecentVisitedOriginsExpiry
"
"
browser
.
engagement
.
recent_visited_origins
.
expiry
"
)
;
const
MAX_UNIQUE_VISITED_DOMAINS
=
100
;
const
TAB_RESTORING_TOPIC
=
"
SSTabRestoring
"
;
const
TELEMETRY_SUBSESSIONSPLIT_TOPIC
=
"
internal
-
telemetry
-
after
-
subsession
-
split
"
;
const
DOMWINDOW_OPENED_TOPIC
=
"
domwindowopened
"
;
const
MAX_TAB_COUNT_SCALAR_NAME
=
"
browser
.
engagement
.
max_concurrent_tab_count
"
;
const
MAX_WINDOW_COUNT_SCALAR_NAME
=
"
browser
.
engagement
.
max_concurrent_window_count
"
;
const
TAB_OPEN_EVENT_COUNT_SCALAR_NAME
=
"
browser
.
engagement
.
tab_open_event_count
"
;
const
MAX_TAB_PINNED_COUNT_SCALAR_NAME
=
"
browser
.
engagement
.
max_concurrent_tab_pinned_count
"
;
const
TAB_PINNED_EVENT_COUNT_SCALAR_NAME
=
"
browser
.
engagement
.
tab_pinned_event_count
"
;
const
WINDOW_OPEN_EVENT_COUNT_SCALAR_NAME
=
"
browser
.
engagement
.
window_open_event_count
"
;
const
UNIQUE_DOMAINS_COUNT_SCALAR_NAME
=
"
browser
.
engagement
.
unique_domains_count
"
;
const
TOTAL_URI_COUNT_SCALAR_NAME
=
"
browser
.
engagement
.
total_uri_count
"
;
const
UNFILTERED_URI_COUNT_SCALAR_NAME
=
"
browser
.
engagement
.
unfiltered_uri_count
"
;
const
KNOWN_SEARCH_SOURCES
=
[
"
abouthome
"
"
contextmenu
"
"
newtab
"
"
searchbar
"
"
system
"
"
urlbar
"
"
webextension
"
]
;
const
KNOWN_ONEOFF_SOURCES
=
[
"
oneoff
-
urlbar
"
"
oneoff
-
searchbar
"
"
unknown
"
]
;
const
URLBAR_SELECTED_RESULT_TYPES
=
{
autofill
:
0
bookmark
:
1
history
:
2
keyword
:
3
searchengine
:
4
searchsuggestion
:
5
switchtab
:
6
tag
:
7
visiturl
:
8
remotetab
:
9
extension
:
10
"
preloaded
-
top
-
site
"
:
11
tip
:
12
}
;
const
URLBAR_SELECTED_RESULT_METHODS
=
{
enter
:
0
enterSelection
:
1
click
:
2
arrowEnterSelection
:
3
tabEnterSelection
:
4
rightClickEnter
:
5
}
;
const
MINIMUM_TAB_COUNT_INTERVAL_MS
=
5
*
60
*
1000
;
function
getOpenTabsAndWinsCounts
(
)
{
let
tabCount
=
0
;
let
winCount
=
0
;
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
winCount
+
+
;
tabCount
+
=
win
.
gBrowser
.
tabs
.
length
;
}
return
{
tabCount
winCount
}
;
}
function
getTabCount
(
)
{
return
getOpenTabsAndWinsCounts
(
)
.
tabCount
;
}
function
getPinnedTabsCount
(
)
{
let
pinnedTabs
=
0
;
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
pinnedTabs
+
=
[
.
.
.
win
.
ownerGlobal
.
gBrowser
.
tabs
]
.
filter
(
t
=
>
t
.
pinned
)
.
length
;
}
return
pinnedTabs
;
}
function
getSearchEngineId
(
engine
)
{
if
(
engine
)
{
if
(
engine
.
identifier
)
{
return
engine
.
identifier
;
}
if
(
engine
.
name
)
{
return
"
other
-
"
+
engine
.
name
;
}
}
return
"
other
"
;
}
function
shouldRecordSearchCount
(
tabbrowser
)
{
return
(
!
PrivateBrowsingUtils
.
isWindowPrivate
(
tabbrowser
.
ownerGlobal
)
|
|
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
engagement
.
search_counts
.
pbm
"
false
)
)
;
}
let
URICountListener
=
{
_domainSet
:
new
Set
(
)
_domain24hrSet
:
new
Set
(
)
_restoredURIsMap
:
new
WeakMap
(
)
_timeouts
:
new
Set
(
)
isHttpURI
(
uri
)
{
return
uri
.
schemeIs
(
"
http
"
)
|
|
uri
.
schemeIs
(
"
https
"
)
;
}
addRestoredURI
(
browser
uri
)
{
if
(
!
this
.
isHttpURI
(
uri
)
)
{
return
;
}
this
.
_restoredURIsMap
.
set
(
browser
uri
.
spec
)
;
}
onLocationChange
(
browser
webProgress
request
uri
flags
)
{
if
(
!
(
flags
&
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
)
)
{
SearchTelemetry
.
stopTrackingBrowser
(
browser
)
;
}
if
(
flags
&
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_ERROR_PAGE
)
{
return
;
}
if
(
!
webProgress
.
isTopLevel
)
{
return
;
}
if
(
!
request
&
&
!
(
flags
&
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
)
)
{
return
;
}
let
shouldCountURI
=
!
PrivateBrowsingUtils
.
isWindowPrivate
(
browser
.
ownerGlobal
)
|
|
Services
.
prefs
.
getBoolPref
(
"
browser
.
engagement
.
total_uri_count
.
pbm
"
false
)
;
let
uriSpec
=
null
;
try
{
uriSpec
=
uri
.
spec
;
}
catch
(
e
)
{
if
(
shouldCountURI
)
{
Services
.
telemetry
.
scalarAdd
(
UNFILTERED_URI_COUNT_SCALAR_NAME
1
)
;
}
return
;
}
if
(
browser
.
ownerGlobal
.
gInitialPages
.
includes
(
uriSpec
)
)
{
return
;
}
if
(
this
.
_restoredURIsMap
.
get
(
browser
)
=
=
=
uriSpec
)
{
this
.
_restoredURIsMap
.
delete
(
browser
)
;
return
;
}
if
(
shouldCountURI
)
{
Services
.
telemetry
.
scalarAdd
(
UNFILTERED_URI_COUNT_SCALAR_NAME
1
)
;
}
if
(
!
this
.
isHttpURI
(
uri
)
)
{
return
;
}
if
(
shouldRecordSearchCount
(
browser
.
getTabBrowser
(
)
)
&
&
!
(
flags
&
Ci
.
nsIWebProgressListener
.
LOCATION_CHANGE_SAME_DOCUMENT
)
)
{
SearchTelemetry
.
updateTrackingStatus
(
browser
uriSpec
)
;
}
if
(
!
shouldCountURI
)
{
return
;
}
Services
.
telemetry
.
scalarAdd
(
TOTAL_URI_COUNT_SCALAR_NAME
1
)
;
BrowserUsageTelemetry
.
_recordTabCount
(
)
;
let
baseDomain
;
try
{
baseDomain
=
Services
.
eTLD
.
getBaseDomain
(
uri
)
;
}
catch
(
e
)
{
return
;
}
if
(
this
.
_domainSet
.
size
<
MAX_UNIQUE_VISITED_DOMAINS
)
{
this
.
_domainSet
.
add
(
baseDomain
)
;
Services
.
telemetry
.
scalarSet
(
UNIQUE_DOMAINS_COUNT_SCALAR_NAME
this
.
_domainSet
.
size
)
;
}
this
.
_domain24hrSet
.
add
(
baseDomain
)
;
if
(
gRecentVisitedOriginsExpiry
)
{
let
timeoutId
=
setTimeout
(
(
)
=
>
{
this
.
_domain24hrSet
.
delete
(
baseDomain
)
;
this
.
_timeouts
.
remove
(
timeoutId
)
;
}
gRecentVisitedOriginsExpiry
*
1000
)
;
this
.
_timeouts
.
add
(
timeoutId
)
;
}
}
reset
(
)
{
this
.
_domainSet
.
clear
(
)
;
}
get
uniqueDomainsVisitedInPast24Hours
(
)
{
return
this
.
_domain24hrSet
.
size
;
}
resetUniqueDomainsVisitedInPast24Hours
(
)
{
this
.
_timeouts
.
forEach
(
timeoutId
=
>
clearTimeout
(
timeoutId
)
)
;
this
.
_timeouts
.
clear
(
)
;
this
.
_domain24hrSet
.
clear
(
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIWebProgressListener
Ci
.
nsISupportsWeakReference
]
)
}
;
let
BrowserUsageTelemetry
=
{
_inited
:
false
init
(
)
{
this
.
_lastRecordTabCount
=
0
;
this
.
_setupAfterRestore
(
)
;
this
.
_inited
=
true
;
}
afterSubsessionSplit
(
)
{
const
counts
=
getOpenTabsAndWinsCounts
(
)
;
Services
.
telemetry
.
scalarSetMaximum
(
MAX_TAB_COUNT_SCALAR_NAME
counts
.
tabCount
)
;
Services
.
telemetry
.
scalarSetMaximum
(
MAX_WINDOW_COUNT_SCALAR_NAME
counts
.
winCount
)
;
URICountListener
.
reset
(
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
uninit
(
)
{
if
(
!
this
.
_inited
)
{
return
;
}
Services
.
obs
.
removeObserver
(
this
DOMWINDOW_OPENED_TOPIC
)
;
Services
.
obs
.
removeObserver
(
this
TELEMETRY_SUBSESSIONSPLIT_TOPIC
)
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
DOMWINDOW_OPENED_TOPIC
:
this
.
_onWindowOpen
(
subject
)
;
break
;
case
TELEMETRY_SUBSESSIONSPLIT_TOPIC
:
this
.
afterSubsessionSplit
(
)
;
break
;
}
}
handleEvent
(
event
)
{
switch
(
event
.
type
)
{
case
"
TabOpen
"
:
this
.
_onTabOpen
(
)
;
break
;
case
"
TabPinned
"
:
this
.
_onTabPinned
(
)
;
break
;
case
"
unload
"
:
this
.
_unregisterWindow
(
event
.
target
)
;
break
;
case
TAB_RESTORING_TOPIC
:
let
browser
=
event
.
target
.
linkedBrowser
;
URICountListener
.
addRestoredURI
(
browser
browser
.
currentURI
)
;
break
;
}
}
recordSearch
(
tabbrowser
engine
source
details
=
{
}
)
{
if
(
!
shouldRecordSearchCount
(
tabbrowser
)
)
{
return
;
}
const
countIdPrefix
=
getSearchEngineId
(
engine
)
+
"
.
"
;
const
countIdSource
=
countIdPrefix
+
source
;
let
histogram
=
Services
.
telemetry
.
getKeyedHistogramById
(
"
SEARCH_COUNTS
"
)
;
if
(
details
.
isOneOff
)
{
if
(
!
KNOWN_ONEOFF_SOURCES
.
includes
(
source
)
)
{
if
(
[
"
urlbar
"
"
searchbar
"
]
.
includes
(
source
)
)
{
histogram
.
add
(
countIdSource
)
;
return
;
}
throw
new
Error
(
"
Unknown
source
for
one
-
off
search
:
"
+
source
)
;
}
}
else
{
if
(
!
KNOWN_SEARCH_SOURCES
.
includes
(
source
)
)
{
throw
new
Error
(
"
Unknown
source
for
search
:
"
+
source
)
;
}
if
(
details
.
alias
&
&
engine
.
wrappedJSObject
.
_internalAliases
.
includes
(
details
.
alias
)
)
{
histogram
.
add
(
countIdPrefix
+
"
alias
"
)
;
}
else
{
histogram
.
add
(
countIdSource
)
;
}
}
this
.
_handleSearchAction
(
engine
source
details
)
;
}
_recordSearch
(
engine
source
action
=
null
)
{
let
scalarKey
=
action
?
"
search_
"
+
action
:
"
search
"
;
Services
.
telemetry
.
keyedScalarAdd
(
"
browser
.
engagement
.
navigation
.
"
+
source
scalarKey
1
)
;
Services
.
telemetry
.
recordEvent
(
"
navigation
"
"
search
"
source
action
{
engine
:
getSearchEngineId
(
engine
)
}
)
;
}
_handleSearchAction
(
engine
source
details
)
{
switch
(
source
)
{
case
"
urlbar
"
:
case
"
oneoff
-
urlbar
"
:
case
"
searchbar
"
:
case
"
oneoff
-
searchbar
"
:
case
"
unknown
"
:
this
.
_handleSearchAndUrlbar
(
engine
source
details
)
;
break
;
case
"
abouthome
"
:
this
.
_recordSearch
(
engine
"
about_home
"
"
enter
"
)
;
break
;
case
"
newtab
"
:
this
.
_recordSearch
(
engine
"
about_newtab
"
"
enter
"
)
;
break
;
case
"
contextmenu
"
:
case
"
system
"
:
case
"
webextension
"
:
this
.
_recordSearch
(
engine
source
)
;
break
;
}
}
_handleSearchAndUrlbar
(
engine
source
details
)
{
const
sourceName
=
source
=
=
=
"
unknown
"
?
"
searchbar
"
:
source
.
replace
(
"
oneoff
-
"
"
"
)
;
const
isOneOff
=
!
!
details
.
isOneOff
;
if
(
isOneOff
)
{
if
(
[
"
urlbar
"
"
searchbar
"
"
unknown
"
]
.
includes
(
source
)
)
{
return
;
}
this
.
_recordSearch
(
engine
sourceName
"
oneoff
"
)
;
return
;
}
if
(
details
.
isSuggestion
)
{
this
.
_recordSearch
(
engine
sourceName
"
suggestion
"
)
;
return
;
}
else
if
(
details
.
alias
)
{
this
.
_recordSearch
(
engine
sourceName
"
alias
"
)
;
return
;
}
this
.
_recordSearch
(
engine
sourceName
"
enter
"
)
;
}
recordUrlbarSelectedResultMethod
(
event
index
userSelectionBehavior
=
"
none
"
)
{
this
.
_recordUrlOrSearchbarSelectedResultMethod
(
event
index
"
FX_URLBAR_SELECTED_RESULT_METHOD
"
userSelectionBehavior
)
;
}
recordSearchbarSelectedResultMethod
(
event
highlightedIndex
)
{
this
.
_recordUrlOrSearchbarSelectedResultMethod
(
event
highlightedIndex
"
FX_SEARCHBAR_SELECTED_RESULT_METHOD
"
"
none
"
)
;
}
_recordUrlOrSearchbarSelectedResultMethod
(
event
highlightedIndex
histogramID
userSelectionBehavior
)
{
let
histogram
=
Services
.
telemetry
.
getHistogramById
(
histogramID
)
;
let
isClick
=
event
&
&
(
ChromeUtils
.
getClassName
(
event
)
=
=
"
MouseEvent
"
|
|
event
.
type
=
=
"
command
"
)
;
let
category
;
if
(
isClick
)
{
category
=
"
click
"
;
}
else
if
(
highlightedIndex
>
=
0
)
{
switch
(
userSelectionBehavior
)
{
case
"
tab
"
:
category
=
"
tabEnterSelection
"
;
break
;
case
"
arrow
"
:
category
=
"
arrowEnterSelection
"
;
break
;
case
"
rightClick
"
:
category
=
"
rightClickEnter
"
;
break
;
default
:
category
=
"
enterSelection
"
;
}
}
else
{
category
=
"
enter
"
;
}
histogram
.
add
(
category
)
;
}
_setupAfterRestore
(
)
{
Services
.
obs
.
addObserver
(
this
DOMWINDOW_OPENED_TOPIC
true
)
;
Services
.
obs
.
addObserver
(
this
TELEMETRY_SUBSESSIONSPLIT_TOPIC
true
)
;
for
(
let
win
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
this
.
_registerWindow
(
win
)
;
}
const
counts
=
getOpenTabsAndWinsCounts
(
)
;
Services
.
telemetry
.
scalarSetMaximum
(
MAX_TAB_COUNT_SCALAR_NAME
counts
.
tabCount
)
;
Services
.
telemetry
.
scalarSetMaximum
(
MAX_WINDOW_COUNT_SCALAR_NAME
counts
.
winCount
)
;
}
_registerWindow
(
win
)
{
win
.
addEventListener
(
"
unload
"
this
)
;
win
.
addEventListener
(
"
TabOpen
"
this
true
)
;
win
.
addEventListener
(
"
TabPinned
"
this
true
)
;
win
.
gBrowser
.
tabContainer
.
addEventListener
(
TAB_RESTORING_TOPIC
this
)
;
win
.
gBrowser
.
addTabsProgressListener
(
URICountListener
)
;
}
_unregisterWindow
(
win
)
{
win
.
removeEventListener
(
"
unload
"
this
)
;
win
.
removeEventListener
(
"
TabOpen
"
this
true
)
;
win
.
removeEventListener
(
"
TabPinned
"
this
true
)
;
win
.
defaultView
.
gBrowser
.
tabContainer
.
removeEventListener
(
TAB_RESTORING_TOPIC
this
)
;
win
.
defaultView
.
gBrowser
.
removeTabsProgressListener
(
URICountListener
)
;
}
_onTabOpen
(
tabCount
=
0
)
{
tabCount
=
tabCount
|
|
getOpenTabsAndWinsCounts
(
)
.
tabCount
;
Services
.
telemetry
.
scalarAdd
(
TAB_OPEN_EVENT_COUNT_SCALAR_NAME
1
)
;
Services
.
telemetry
.
scalarSetMaximum
(
MAX_TAB_COUNT_SCALAR_NAME
tabCount
)
;
this
.
_recordTabCount
(
tabCount
)
;
}
_onTabPinned
(
target
)
{
const
pinnedTabs
=
getPinnedTabsCount
(
)
;
Services
.
telemetry
.
scalarAdd
(
TAB_PINNED_EVENT_COUNT_SCALAR_NAME
1
)
;
Services
.
telemetry
.
scalarSetMaximum
(
MAX_TAB_PINNED_COUNT_SCALAR_NAME
pinnedTabs
)
;
}
_onWindowOpen
(
win
)
{
if
(
!
(
win
instanceof
Ci
.
nsIDOMWindow
)
)
{
return
;
}
let
onLoad
=
(
)
=
>
{
win
.
removeEventListener
(
"
load
"
onLoad
)
;
if
(
win
.
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
!
=
"
navigator
:
browser
"
)
{
return
;
}
this
.
_registerWindow
(
win
)
;
const
counts
=
getOpenTabsAndWinsCounts
(
)
;
Services
.
telemetry
.
scalarAdd
(
WINDOW_OPEN_EVENT_COUNT_SCALAR_NAME
1
)
;
Services
.
telemetry
.
scalarSetMaximum
(
MAX_WINDOW_COUNT_SCALAR_NAME
counts
.
winCount
)
;
this
.
_onTabOpen
(
counts
.
tabCount
)
;
}
;
win
.
addEventListener
(
"
load
"
onLoad
)
;
}
_recordTabCount
(
tabCount
)
{
let
currentTime
=
Date
.
now
(
)
;
if
(
currentTime
>
this
.
_lastRecordTabCount
+
MINIMUM_TAB_COUNT_INTERVAL_MS
)
{
if
(
tabCount
=
=
=
undefined
)
{
tabCount
=
getTabCount
(
)
;
}
Services
.
telemetry
.
getHistogramById
(
"
TAB_COUNT
"
)
.
add
(
tabCount
)
;
this
.
_lastRecordTabCount
=
currentTime
;
}
}
}
;
function
getUniqueDomainsVisitedInPast24Hours
(
)
{
return
URICountListener
.
uniqueDomainsVisitedInPast24Hours
;
}
