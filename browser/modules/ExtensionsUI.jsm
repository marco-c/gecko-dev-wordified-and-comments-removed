"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
this
.
EXPORTED_SYMBOLS
=
[
"
ExtensionsUI
"
]
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
devtools
/
shared
/
event
-
emitter
.
js
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonManager
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
RecentWindow
"
"
resource
:
/
/
/
modules
/
RecentWindow
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
WEBEXT_PERMISSION_PROMPTS
"
"
extensions
.
webextPermissionPrompts
"
false
)
;
const
DEFAULT_EXENSION_ICON
=
"
chrome
:
/
/
mozapps
/
skin
/
extensions
/
extensionGeneric
.
svg
"
;
const
HTML_NS
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
;
this
.
ExtensionsUI
=
{
sideloaded
:
new
Set
(
)
init
(
)
{
Services
.
obs
.
addObserver
(
this
"
webextension
-
permission
-
prompt
"
false
)
;
this
.
_checkForSideloaded
(
)
;
}
_checkForSideloaded
(
)
{
AddonManager
.
getAllAddons
(
addons
=
>
{
let
sideloaded
=
addons
.
filter
(
addon
=
>
addon
.
seen
=
=
=
false
&
&
(
addon
.
permissions
&
AddonManager
.
PERM_CAN_ENABLE
)
)
;
if
(
!
sideloaded
.
length
)
{
return
;
}
if
(
WEBEXT_PERMISSION_PROMPTS
)
{
for
(
let
addon
of
sideloaded
)
{
this
.
sideloaded
.
add
(
addon
)
;
}
this
.
emit
(
"
change
"
)
;
}
else
{
let
win
=
RecentWindow
.
getMostRecentBrowserWindow
(
)
;
for
(
let
addon
of
sideloaded
)
{
win
.
openUILinkIn
(
about
:
newaddon
?
id
=
{
addon
.
id
}
"
tab
"
)
;
}
}
}
)
;
}
showSideloaded
(
browser
addon
)
{
addon
.
markAsSeen
(
)
;
this
.
sideloaded
.
delete
(
addon
)
;
this
.
emit
(
"
change
"
)
;
let
loadPromise
=
new
Promise
(
resolve
=
>
{
let
listener
=
(
subject
topic
)
=
>
{
if
(
subject
.
location
.
href
=
=
"
about
:
addons
"
)
{
Services
.
obs
.
removeObserver
(
listener
topic
)
;
resolve
(
subject
)
;
}
}
;
Services
.
obs
.
addObserver
(
listener
"
EM
-
loaded
"
false
)
;
}
)
;
let
tab
=
browser
.
addTab
(
"
about
:
addons
"
)
;
browser
.
selectedTab
=
tab
;
loadPromise
.
then
(
win
=
>
{
win
.
loadView
(
"
addons
:
/
/
list
/
extension
"
)
;
let
info
=
{
addon
icon
:
addon
.
iconURL
type
:
"
sideload
"
}
;
this
.
showPermissionsPrompt
(
browser
.
selectedBrowser
info
)
.
then
(
answer
=
>
{
addon
.
userDisabled
=
!
answer
;
}
)
;
}
)
;
}
observe
(
subject
topic
data
)
{
if
(
topic
=
=
"
webextension
-
permission
-
prompt
"
)
{
let
{
target
info
}
=
subject
.
wrappedJSObject
;
let
progressNotification
=
target
.
ownerGlobal
.
PopupNotifications
.
getNotification
(
"
addon
-
progress
"
target
)
;
if
(
progressNotification
)
{
progressNotification
.
remove
(
)
;
}
this
.
showPermissionsPrompt
(
target
info
)
.
then
(
answer
=
>
{
Services
.
obs
.
notifyObservers
(
subject
"
webextension
-
permission
-
response
"
JSON
.
stringify
(
answer
)
)
;
}
)
;
}
}
showPermissionsPrompt
(
target
info
)
{
let
perms
=
info
.
addon
.
userPermissions
;
if
(
!
perms
)
{
return
Promise
.
resolve
(
)
;
}
let
win
=
target
.
ownerGlobal
;
let
name
=
info
.
addon
.
name
;
if
(
name
.
length
>
50
)
{
name
=
name
.
slice
(
0
49
)
+
"
"
;
}
let
header
=
"
Add
ADDON
?
"
.
replace
(
"
ADDON
"
name
)
;
let
text
=
"
"
;
let
listHeader
=
"
It
can
:
"
;
let
acceptText
=
"
Add
extension
"
;
let
acceptKey
=
"
A
"
;
let
cancelText
=
"
Cancel
"
;
let
cancelKey
=
"
C
"
;
if
(
info
.
type
=
=
"
sideload
"
)
{
header
=
{
name
}
added
;
text
=
"
Another
program
on
your
computer
installed
an
add
-
on
that
may
affect
your
browser
.
Please
review
this
add
-
on
'
s
permission
requests
and
choose
to
Enable
or
Disable
"
;
acceptText
=
"
Enable
"
;
acceptKey
=
"
E
"
;
cancelText
=
"
Disable
"
;
cancelKey
=
"
D
"
;
}
let
formatPermission
=
perm
=
>
{
try
{
return
localized
description
of
permission
{
perm
}
;
}
catch
(
err
)
{
return
localized
description
of
unknown
permission
{
perm
}
;
}
}
;
let
formatHostPermission
=
perm
=
>
{
if
(
perm
=
=
"
<
all_urls
>
"
)
{
return
"
localized
description
of
<
all_urls
>
host
permission
"
;
}
let
match
=
/
^
[
htps
*
]
+
:
\
/
\
/
(
[
^
/
]
+
)
\
/
/
.
exec
(
perm
)
;
if
(
!
match
)
{
throw
new
Error
(
"
Unparseable
host
permission
"
)
;
}
if
(
match
[
1
]
.
startsWith
(
"
*
.
"
)
)
{
let
domain
=
match
[
1
]
.
slice
(
2
)
;
return
localized
description
of
wildcard
host
permission
for
{
domain
}
;
}
return
localized
description
of
single
host
permission
for
{
match
[
1
]
}
;
}
;
let
msgs
=
[
.
.
.
perms
.
permissions
.
map
(
formatPermission
)
.
.
.
perms
.
hosts
.
map
(
formatHostPermission
)
]
;
let
rendered
=
false
;
let
popupOptions
=
{
hideClose
:
true
popupIconURL
:
info
.
icon
persistent
:
true
eventCallback
(
topic
)
{
if
(
topic
=
=
"
showing
"
)
{
if
(
rendered
)
{
return
false
;
}
let
doc
=
this
.
browser
.
ownerDocument
;
doc
.
getElementById
(
"
addon
-
webext
-
perm
-
header
"
)
.
textContent
=
header
;
let
list
=
doc
.
getElementById
(
"
addon
-
webext
-
perm
-
list
"
)
;
while
(
list
.
firstChild
)
{
list
.
firstChild
.
remove
(
)
;
}
if
(
text
)
{
doc
.
getElementById
(
"
addon
-
webext
-
perm
-
text
"
)
.
textContent
=
text
;
}
let
listHeaderEl
=
doc
.
getElementById
(
"
addon
-
webext
-
perm
-
intro
"
)
;
listHeaderEl
.
value
=
listHeader
;
listHeaderEl
.
hidden
=
(
msgs
.
length
=
=
0
)
;
for
(
let
msg
of
msgs
)
{
let
item
=
doc
.
createElementNS
(
HTML_NS
"
li
"
)
;
item
.
textContent
=
msg
;
list
.
appendChild
(
item
)
;
}
rendered
=
true
;
}
else
if
(
topic
=
=
"
dismissed
"
)
{
rendered
=
false
;
}
else
if
(
topic
=
=
"
swapping
"
)
{
rendered
=
false
;
return
true
;
}
return
false
;
}
}
;
return
new
Promise
(
resolve
=
>
{
win
.
PopupNotifications
.
show
(
target
"
addon
-
webext
-
permissions
"
"
"
"
addons
-
notification
-
icon
"
{
label
:
acceptText
accessKey
:
acceptKey
callback
:
(
)
=
>
resolve
(
true
)
}
[
{
label
:
cancelText
accessKey
:
cancelKey
callback
:
(
)
=
>
resolve
(
false
)
}
]
popupOptions
)
;
}
)
;
}
}
;
EventEmitter
.
decorate
(
ExtensionsUI
)
;
