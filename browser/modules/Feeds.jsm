"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
Feeds
"
]
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
BrowserUtils
"
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
)
;
const
{
interfaces
:
Ci
classes
:
Cc
}
=
Components
;
this
.
Feeds
=
{
init
(
)
{
let
mm
=
Cc
[
"
mozilla
.
org
/
globalmessagemanager
;
1
"
]
.
getService
(
Ci
.
nsIMessageListenerManager
)
;
mm
.
addMessageListener
(
"
WCCR
:
registerProtocolHandler
"
this
)
;
}
receiveMessage
(
aMessage
)
{
switch
(
aMessage
.
name
)
{
case
"
WCCR
:
registerProtocolHandler
"
:
{
let
data
=
aMessage
.
data
;
let
registrar
=
Cc
[
"
mozilla
.
org
/
embeddor
.
implemented
/
web
-
content
-
handler
-
registrar
;
1
"
]
.
getService
(
Ci
.
nsIWebContentHandlerRegistrar
)
;
registrar
.
registerProtocolHandler
(
data
.
protocol
data
.
uri
data
.
title
aMessage
.
target
)
;
break
;
}
case
"
WCCR
:
registerContentHandler
"
:
{
let
data
=
aMessage
.
data
;
let
registrar
=
Cc
[
"
mozilla
.
org
/
embeddor
.
implemented
/
web
-
content
-
handler
-
registrar
;
1
"
]
.
getService
(
Ci
.
nsIWebContentHandlerRegistrar
)
;
registrar
.
registerContentHandler
(
data
.
contentType
data
.
uri
data
.
title
aMessage
.
target
)
;
break
;
}
}
}
isValidFeed
:
function
(
aLink
aPrincipal
aIsFeed
)
{
if
(
!
aLink
|
|
!
aPrincipal
)
return
false
;
var
type
=
aLink
.
type
.
toLowerCase
(
)
.
replace
(
/
^
\
s
+
|
\
s
*
(
?
:
;
.
*
)
?
/
g
"
"
)
;
if
(
!
aIsFeed
)
{
aIsFeed
=
(
type
=
=
"
application
/
rss
+
xml
"
|
|
type
=
=
"
application
/
atom
+
xml
"
)
;
}
if
(
aIsFeed
)
{
let
principalURI
=
BrowserUtils
.
makeURIFromCPOW
(
aPrincipal
.
URI
)
;
let
principalToCheck
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
principalURI
{
}
)
;
try
{
BrowserUtils
.
urlSecurityCheck
(
aLink
.
href
principalToCheck
Ci
.
nsIScriptSecurityManager
.
DISALLOW_INHERIT_PRINCIPAL
)
;
return
type
|
|
"
application
/
rss
+
xml
"
;
}
catch
(
ex
)
{
}
}
return
null
;
}
}
;
