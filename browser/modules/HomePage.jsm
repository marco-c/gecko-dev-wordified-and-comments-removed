"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
HomePage
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
ExtensionSettingsStore
"
"
resource
:
/
/
gre
/
modules
/
ExtensionSettingsStore
.
jsm
"
)
;
const
kPrefName
=
"
browser
.
startup
.
homepage
"
;
function
getHomepagePref
(
useDefault
)
{
let
homePage
;
let
prefs
=
Services
.
prefs
;
if
(
useDefault
)
{
prefs
=
prefs
.
getDefaultBranch
(
null
)
;
}
try
{
homePage
=
prefs
.
getComplexValue
(
kPrefName
Ci
.
nsIPrefLocalizedString
)
.
data
;
}
catch
(
ex
)
{
}
if
(
!
homePage
)
{
homePage
=
prefs
.
getStringPref
(
kPrefName
)
;
}
if
(
!
homePage
&
&
!
useDefault
)
{
Services
.
prefs
.
clearUserPref
(
kPrefName
)
;
homePage
=
getHomepagePref
(
true
)
;
}
return
homePage
;
}
let
HomePage
=
{
get
(
aWindow
)
{
if
(
PrivateBrowsingUtils
.
permanentPrivateBrowsing
|
|
(
aWindow
&
&
PrivateBrowsingUtils
.
isWindowPrivate
(
aWindow
)
)
)
{
let
extensionInfo
=
ExtensionSettingsStore
.
getSetting
(
"
prefs
"
"
homepage_override
"
)
;
if
(
extensionInfo
)
{
let
policy
=
WebExtensionPolicy
.
getByID
(
extensionInfo
.
id
)
;
if
(
!
policy
|
|
!
policy
.
privateBrowsingAllowed
)
{
return
this
.
getDefault
(
)
;
}
}
}
return
getHomepagePref
(
)
;
}
getDefault
(
)
{
return
getHomepagePref
(
true
)
;
}
get
overridden
(
)
{
return
Services
.
prefs
.
prefHasUserValue
(
kPrefName
)
;
}
set
(
value
)
{
Services
.
prefs
.
setStringPref
(
kPrefName
value
)
;
}
reset
(
)
{
Services
.
prefs
.
clearUserPref
(
kPrefName
)
;
}
}
;
