"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
HomePage
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
IgnoreLists
:
"
resource
:
/
/
gre
/
modules
/
IgnoreLists
.
sys
.
mjs
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
sys
.
mjs
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
CustomizableUI
:
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
ExtensionParent
:
"
resource
:
/
/
gre
/
modules
/
ExtensionParent
.
jsm
"
ExtensionPreferencesManager
:
"
resource
:
/
/
gre
/
modules
/
ExtensionPreferencesManager
.
jsm
"
}
)
;
const
kPrefName
=
"
browser
.
startup
.
homepage
"
;
const
kDefaultHomePage
=
"
about
:
home
"
;
const
kExtensionControllerPref
=
"
browser
.
startup
.
homepage_override
.
extensionControlled
"
;
const
kHomePageIgnoreListId
=
"
homepage
-
urls
"
;
const
kWidgetId
=
"
home
-
button
"
;
const
kWidgetRemovedPref
=
"
browser
.
engagement
.
home
-
button
.
has
-
removed
"
;
function
getHomepagePref
(
useDefault
)
{
let
homePage
;
let
prefs
=
Services
.
prefs
;
if
(
useDefault
)
{
prefs
=
prefs
.
getDefaultBranch
(
null
)
;
}
try
{
homePage
=
prefs
.
getComplexValue
(
kPrefName
Ci
.
nsIPrefLocalizedString
)
.
data
;
}
catch
(
ex
)
{
}
if
(
!
homePage
)
{
homePage
=
prefs
.
getStringPref
(
kPrefName
)
;
}
if
(
!
homePage
&
&
!
useDefault
)
{
Services
.
prefs
.
clearUserPref
(
kPrefName
)
;
homePage
=
getHomepagePref
(
true
)
;
}
return
homePage
;
}
let
HomePage
=
{
_ignoreList
:
[
]
_initializationPromise
:
null
async
delayedStartup
(
)
{
if
(
this
.
_initializationPromise
)
{
await
this
.
_initializationPromise
;
return
;
}
Services
.
telemetry
.
setEventRecordingEnabled
(
"
homepage
"
true
)
;
this
.
_ignoreListListener
=
this
.
_handleIgnoreListUpdated
.
bind
(
this
)
;
this
.
_initializationPromise
=
lazy
.
IgnoreLists
.
getAndSubscribe
(
this
.
_ignoreListListener
)
;
this
.
_addCustomizableUiListener
(
)
;
const
current
=
await
this
.
_initializationPromise
;
await
this
.
_handleIgnoreListUpdated
(
{
data
:
{
current
}
}
)
;
}
get
(
aWindow
)
{
let
homePages
=
getHomepagePref
(
)
;
if
(
lazy
.
PrivateBrowsingUtils
.
permanentPrivateBrowsing
|
|
(
aWindow
&
&
lazy
.
PrivateBrowsingUtils
.
isWindowPrivate
(
aWindow
)
)
)
{
let
extensionControlled
=
Services
.
prefs
.
getBoolPref
(
kExtensionControllerPref
false
)
;
let
privateAllowed
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
startup
.
homepage_override
.
privateAllowed
"
false
)
;
if
(
!
privateAllowed
&
&
(
extensionControlled
|
|
homePages
.
includes
(
"
moz
-
extension
:
/
/
"
)
)
)
{
return
this
.
getDefault
(
)
;
}
}
if
(
homePages
=
=
"
about
:
blank
"
)
{
homePages
=
"
chrome
:
/
/
browser
/
content
/
blanktab
.
html
"
;
}
return
homePages
;
}
getDefault
(
)
{
return
getHomepagePref
(
true
)
;
}
getOriginalDefault
(
)
{
return
kDefaultHomePage
;
}
get
overridden
(
)
{
return
Services
.
prefs
.
prefHasUserValue
(
kPrefName
)
;
}
get
locked
(
)
{
return
Services
.
prefs
.
prefIsLocked
(
kPrefName
)
;
}
get
isDefault
(
)
{
return
HomePage
.
get
(
)
=
=
=
kDefaultHomePage
;
}
async
set
(
value
)
{
await
this
.
delayedStartup
(
)
;
if
(
await
this
.
shouldIgnore
(
value
)
)
{
Cu
.
reportError
(
Ignoring
homepage
setting
for
{
value
}
as
it
is
on
the
ignore
list
.
)
;
Services
.
telemetry
.
recordEvent
(
"
homepage
"
"
preference
"
"
ignore
"
"
set_blocked
"
)
;
return
false
;
}
Services
.
prefs
.
setStringPref
(
kPrefName
value
)
;
this
.
_maybeAddHomeButtonToToolbar
(
value
)
;
return
true
;
}
safeSet
(
value
)
{
Services
.
prefs
.
setStringPref
(
kPrefName
value
)
;
}
clear
(
)
{
Services
.
prefs
.
clearUserPref
(
kPrefName
)
;
}
reset
(
)
{
Services
.
prefs
.
setStringPref
(
kPrefName
kDefaultHomePage
)
;
}
async
shouldIgnore
(
url
)
{
await
this
.
delayedStartup
(
)
;
const
lowerURL
=
url
.
toLowerCase
(
)
;
return
this
.
_ignoreList
.
some
(
code
=
>
lowerURL
.
includes
(
code
.
toLowerCase
(
)
)
)
;
}
async
_handleIgnoreListUpdated
(
{
data
:
{
current
}
}
)
{
for
(
const
entry
of
current
)
{
if
(
entry
.
id
=
=
kHomePageIgnoreListId
)
{
this
.
_ignoreList
=
[
.
.
.
entry
.
matches
]
;
}
}
if
(
this
.
overridden
)
{
let
homePages
=
getHomepagePref
(
)
.
toLowerCase
(
)
;
if
(
this
.
_ignoreList
.
some
(
code
=
>
homePages
.
includes
(
code
.
toLowerCase
(
)
)
)
)
{
if
(
Services
.
prefs
.
getBoolPref
(
kExtensionControllerPref
false
)
)
{
if
(
Services
.
appinfo
.
inSafeMode
)
{
return
;
}
const
item
=
await
lazy
.
ExtensionPreferencesManager
.
getSetting
(
"
homepage_override
"
)
;
if
(
item
&
&
item
.
id
)
{
await
lazy
.
ExtensionParent
.
apiManager
.
asyncLoadModule
(
"
chrome_settings_overrides
"
)
;
lazy
.
ExtensionPreferencesManager
.
removeSetting
(
item
.
id
"
homepage_override
"
)
.
catch
(
Cu
.
reportError
)
;
}
else
{
Services
.
prefs
.
clearUserPref
(
kExtensionControllerPref
)
;
Services
.
prefs
.
clearUserPref
(
"
browser
.
startup
.
homepage_override
.
privateAllowed
"
)
;
}
}
else
{
this
.
clear
(
)
;
}
Services
.
telemetry
.
recordEvent
(
"
homepage
"
"
preference
"
"
ignore
"
"
saved_reset
"
)
;
}
}
}
onWidgetRemoved
(
widgetId
area
)
{
if
(
widgetId
=
=
kWidgetId
)
{
Services
.
prefs
.
setBoolPref
(
kWidgetRemovedPref
true
)
;
lazy
.
CustomizableUI
.
removeListener
(
this
)
;
}
}
_maybeAddHomeButtonToToolbar
(
homePage
)
{
if
(
homePage
!
=
=
"
about
:
home
"
&
&
homePage
!
=
=
"
about
:
blank
"
&
&
!
Services
.
prefs
.
getBoolPref
(
kExtensionControllerPref
false
)
&
&
!
Services
.
prefs
.
getBoolPref
(
kWidgetRemovedPref
false
)
&
&
!
lazy
.
CustomizableUI
.
getWidget
(
kWidgetId
)
.
areaType
)
{
let
navbarPlacements
=
lazy
.
CustomizableUI
.
getWidgetIdsInArea
(
"
nav
-
bar
"
)
;
let
position
=
navbarPlacements
.
indexOf
(
"
urlbar
-
container
"
)
;
for
(
let
i
=
position
-
1
;
i
>
=
0
;
i
-
-
)
{
if
(
!
navbarPlacements
[
i
]
.
startsWith
(
"
customizableui
-
special
-
spring
"
)
)
{
position
=
i
+
1
;
break
;
}
}
lazy
.
CustomizableUI
.
addWidgetToArea
(
kWidgetId
"
nav
-
bar
"
position
)
;
}
}
_addCustomizableUiListener
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
kWidgetRemovedPref
false
)
)
{
lazy
.
CustomizableUI
.
addListener
(
this
)
;
}
}
}
;
