"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
SchedulePressure
"
]
;
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
TelemetryStopwatch
"
"
resource
:
/
/
gre
/
modules
/
TelemetryStopwatch
.
jsm
"
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
SCHEDULE_PRESSURE_ENABLED
"
"
browser
.
schedulePressure
.
enabled
"
true
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
this
"
TIMEOUT_AMOUNT
"
"
browser
.
schedulePressure
.
timeoutMs
"
1000
)
;
this
.
SchedulePressure
=
{
_idleCallbackWeakMap
:
new
WeakMap
(
)
_setTimeoutWeakMap
:
new
WeakMap
(
)
_telemetryCallbackWeakMap
:
new
WeakMap
(
)
_createTimeoutFn
(
window
callbackFn
)
{
return
(
)
=
>
{
if
(
window
.
closed
)
{
TelemetryStopwatch
.
cancel
(
"
FX_SCHEDULE_PRESSURE_IDLE_SAMPLE_MS
"
window
)
;
this
.
_telemetryCallbackWeakMap
.
delete
(
window
)
;
return
;
}
let
nextCallbackId
=
window
.
requestIdleCallback
(
callbackFn
{
timeout
:
TIMEOUT_AMOUNT
}
)
;
this
.
_idleCallbackWeakMap
.
set
(
window
nextCallbackId
)
;
if
(
!
this
.
_telemetryCallbackWeakMap
.
has
(
window
)
&
&
TelemetryStopwatch
.
start
(
"
FX_SCHEDULE_PRESSURE_IDLE_SAMPLE_MS
"
window
)
)
{
let
telemetryCallbackId
=
window
.
requestIdleCallback
(
(
)
=
>
{
TelemetryStopwatch
.
finish
(
"
FX_SCHEDULE_PRESSURE_IDLE_SAMPLE_MS
"
window
)
;
this
.
_telemetryCallbackWeakMap
.
delete
(
window
)
;
}
)
;
this
.
_telemetryCallbackWeakMap
.
set
(
window
telemetryCallbackId
)
;
}
}
;
}
startMonitoring
(
window
{
highPressureFn
lowPressureFn
}
)
{
if
(
!
SCHEDULE_PRESSURE_ENABLED
|
|
this
.
_setTimeoutWeakMap
.
has
(
window
)
|
|
this
.
_idleCallbackWeakMap
.
has
(
window
)
)
{
return
;
}
let
callbackFn
=
idleDeadline
=
>
{
if
(
window
.
closed
)
{
return
;
}
let
result
;
if
(
idleDeadline
.
didTimeout
)
{
try
{
result
=
highPressureFn
(
)
;
}
catch
(
ex
)
{
}
}
else
{
try
{
result
=
lowPressureFn
(
)
;
}
catch
(
ex
)
{
}
}
if
(
result
&
&
!
result
.
continueMonitoring
)
{
return
;
}
this
.
_setTimeoutWeakMap
.
set
(
window
window
.
setTimeout
(
this
.
_createTimeoutFn
(
window
callbackFn
)
TIMEOUT_AMOUNT
)
)
;
}
;
this
.
_setTimeoutWeakMap
.
set
(
window
window
.
setTimeout
(
this
.
_createTimeoutFn
(
window
callbackFn
)
TIMEOUT_AMOUNT
)
)
;
}
stopMonitoring
(
window
)
{
function
removeFromMapAndCancelTimeout
(
map
cancelFn
)
{
if
(
map
.
has
(
window
)
)
{
cancelFn
(
map
.
get
(
window
)
)
;
map
.
delete
(
window
)
;
}
}
removeFromMapAndCancelTimeout
(
this
.
_setTimeoutWeakMap
window
.
clearTimeout
)
;
removeFromMapAndCancelTimeout
(
this
.
_idleCallbackWeakMap
window
.
cancelIdleCallback
)
;
removeFromMapAndCancelTimeout
(
this
.
_telemetryCallbackWeakMap
window
.
cancelIdleCallback
)
;
}
}
;
