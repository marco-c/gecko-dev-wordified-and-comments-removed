"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
const
PORTAL_RECHECK_DELAY_MS
=
150
;
this
.
EXPORTED_SYMBOLS
=
[
"
CaptivePortalWatcher
"
]
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
/
modules
/
RecentWindow
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
cps
"
"
mozilla
.
org
/
network
/
captive
-
portal
-
service
;
1
"
"
nsICaptivePortalService
"
)
;
this
.
CaptivePortalWatcher
=
{
_captivePortalTab
:
null
_initialized
:
false
_waitingToAddTab
:
false
get
canonicalURL
(
)
{
return
Services
.
prefs
.
getCharPref
(
"
captivedetect
.
canonicalURL
"
)
;
}
init
(
)
{
Services
.
obs
.
addObserver
(
this
"
captive
-
portal
-
login
"
false
)
;
Services
.
obs
.
addObserver
(
this
"
captive
-
portal
-
login
-
abort
"
false
)
;
Services
.
obs
.
addObserver
(
this
"
captive
-
portal
-
login
-
success
"
false
)
;
this
.
_initialized
=
true
;
if
(
cps
.
state
=
=
cps
.
LOCKED_PORTAL
)
{
this
.
_addCaptivePortalTab
(
)
;
return
;
}
cps
.
recheckCaptivePortal
(
)
;
}
uninit
(
)
{
if
(
!
this
.
_initialized
)
{
return
;
}
Services
.
obs
.
removeObserver
(
this
"
captive
-
portal
-
login
"
)
;
Services
.
obs
.
removeObserver
(
this
"
captive
-
portal
-
login
-
abort
"
)
;
Services
.
obs
.
removeObserver
(
this
"
captive
-
portal
-
login
-
success
"
)
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
captive
-
portal
-
login
"
:
this
.
_addCaptivePortalTab
(
)
;
break
;
case
"
captive
-
portal
-
login
-
abort
"
:
case
"
captive
-
portal
-
login
-
success
"
:
this
.
_captivePortalGone
(
)
;
break
;
case
"
xul
-
window
-
visible
"
:
this
.
_delayedAddCaptivePortalTab
(
)
;
break
;
}
}
_addCaptivePortalTab
(
)
{
if
(
this
.
_waitingToAddTab
)
{
return
;
}
let
win
=
RecentWindow
.
getMostRecentBrowserWindow
(
)
;
if
(
!
win
|
|
!
win
.
document
.
hasFocus
(
)
)
{
this
.
_waitingToAddTab
=
true
;
Services
.
obs
.
addObserver
(
this
"
xul
-
window
-
visible
"
false
)
;
return
;
}
let
tab
=
win
.
gBrowser
.
addTab
(
this
.
canonicalURL
)
;
this
.
_captivePortalTab
=
Cu
.
getWeakReference
(
tab
)
;
return
;
}
_delayedAddCaptivePortalTab
(
)
{
if
(
!
this
.
_waitingToAddTab
)
{
return
;
}
let
win
=
RecentWindow
.
getMostRecentBrowserWindow
(
)
;
if
(
win
!
=
Services
.
ww
.
activeWindow
)
{
return
;
}
Services
.
obs
.
removeObserver
(
this
"
xul
-
window
-
visible
"
)
;
let
lastChecked
=
cps
.
lastChecked
;
cps
.
recheckCaptivePortal
(
)
;
setTimeout
(
(
)
=
>
{
this
.
_waitingToAddTab
=
false
;
if
(
cps
.
state
!
=
cps
.
LOCKED_PORTAL
)
{
return
;
}
let
tab
=
win
.
gBrowser
.
addTab
(
this
.
canonicalURL
)
;
if
(
cps
.
lastChecked
!
=
lastChecked
)
{
win
.
gBrowser
.
selectedTab
=
tab
;
}
this
.
_captivePortalTab
=
Cu
.
getWeakReference
(
tab
)
;
}
PORTAL_RECHECK_DELAY_MS
)
;
}
_captivePortalGone
(
)
{
if
(
this
.
_waitingToAddTab
)
{
Services
.
obs
.
removeObserver
(
this
"
xul
-
window
-
visible
"
)
;
this
.
_waitingToAddTab
=
false
;
}
if
(
!
this
.
_captivePortalTab
)
{
return
;
}
let
tab
=
this
.
_captivePortalTab
.
get
(
)
;
this
.
_captivePortalTab
=
null
;
if
(
!
tab
|
|
tab
.
closing
|
|
!
tab
.
parentNode
)
{
return
;
}
let
tabbrowser
=
tab
.
ownerGlobal
.
gBrowser
;
if
(
tab
.
linkedBrowser
.
currentURI
.
spec
!
=
this
.
canonicalURL
&
&
tabbrowser
.
selectedTab
=
=
tab
)
{
return
;
}
tabbrowser
.
removeTab
(
tab
)
;
}
}
;
