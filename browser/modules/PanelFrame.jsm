"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
PanelFrame
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
CustomizableUI
"
"
resource
:
/
/
/
modules
/
CustomizableUI
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
DynamicResizeWatcher
"
"
resource
:
/
/
/
modules
/
Social
.
jsm
"
)
;
const
PANEL_MIN_HEIGHT
=
100
;
const
PANEL_MIN_WIDTH
=
330
;
var
PanelFrameInternal
=
{
get
_dynamicResizer
(
)
{
delete
this
.
_dynamicResizer
;
this
.
_dynamicResizer
=
new
DynamicResizeWatcher
(
)
;
return
this
.
_dynamicResizer
;
}
_attachNotificatonPanel
:
function
(
aWindow
aParent
aButton
aType
aOrigin
aSrc
aSize
)
{
aParent
.
hidden
=
false
;
let
notificationFrameId
=
aOrigin
?
aType
+
"
-
status
-
"
+
aOrigin
:
aType
+
"
-
panel
-
iframe
"
;
let
doc
=
aWindow
.
document
;
let
frame
=
doc
.
getElementById
(
notificationFrameId
)
;
if
(
frame
&
&
frame
.
parentNode
!
=
aParent
)
{
frame
.
parentNode
.
removeChild
(
frame
)
;
frame
=
null
;
}
if
(
!
frame
)
{
let
{
width
height
}
=
aSize
?
aSize
:
{
width
:
PANEL_MIN_WIDTH
height
:
PANEL_MIN_HEIGHT
}
;
frame
=
doc
.
createElement
(
"
browser
"
)
;
let
attrs
=
{
"
type
"
:
"
content
"
"
mozbrowser
"
:
"
true
"
"
class
"
:
"
social
-
panel
-
frame
"
"
id
"
:
notificationFrameId
"
tooltip
"
:
"
aHTMLTooltip
"
"
context
"
:
"
contentAreaContextMenu
"
"
flex
"
:
"
1
"
"
style
"
:
"
width
:
"
+
width
+
"
px
;
height
:
"
+
height
+
"
px
;
"
"
dynamicresizer
"
:
!
aSize
"
origin
"
:
aOrigin
"
src
"
:
aSrc
}
;
if
(
aType
=
=
"
social
"
)
{
attrs
[
"
message
"
]
=
"
true
"
;
attrs
[
"
messagemanagergroup
"
]
=
aType
;
}
for
(
let
[
k
v
]
of
Iterator
(
attrs
)
)
{
frame
.
setAttribute
(
k
v
)
;
}
aParent
.
appendChild
(
frame
)
;
}
else
{
frame
.
setAttribute
(
"
origin
"
aOrigin
)
;
frame
.
setAttribute
(
"
src
"
aSrc
)
;
}
aButton
.
setAttribute
(
"
notificationFrameId
"
notificationFrameId
)
;
}
}
;
var
PanelFrame
=
{
showPopup
:
function
(
aWindow
aToolbarButton
aType
aOrigin
aSrc
aSize
aCallback
)
{
let
widgetGroup
=
CustomizableUI
.
getWidget
(
aToolbarButton
.
getAttribute
(
"
id
"
)
)
;
let
widget
=
widgetGroup
.
forWindow
(
aWindow
)
;
let
anchorBtn
=
widget
.
anchor
;
let
panel
=
aWindow
.
document
.
getElementById
(
aType
+
"
-
notification
-
panel
"
)
;
PanelFrameInternal
.
_attachNotificatonPanel
(
aWindow
panel
aToolbarButton
aType
aOrigin
aSrc
aSize
)
;
let
notificationFrameId
=
aToolbarButton
.
getAttribute
(
"
notificationFrameId
"
)
;
let
notificationFrame
=
aWindow
.
document
.
getElementById
(
notificationFrameId
)
;
let
mm
=
notificationFrame
.
QueryInterface
(
Ci
.
nsIFrameLoaderOwner
)
.
frameLoader
.
messageManager
;
let
frameIter
=
panel
.
firstElementChild
;
while
(
frameIter
)
{
frameIter
.
collapsed
=
(
frameIter
!
=
notificationFrame
)
;
frameIter
=
frameIter
.
nextElementSibling
;
}
function
dispatchPanelEvent
(
name
)
{
mm
.
sendAsyncMessage
(
"
Social
:
CustomEvent
"
{
name
:
name
}
)
;
}
let
dynamicResizer
;
if
(
notificationFrame
.
getAttribute
(
"
dynamicresizer
"
)
=
=
"
true
"
)
{
dynamicResizer
=
PanelFrameInternal
.
_dynamicResizer
;
}
panel
.
addEventListener
(
"
popuphidden
"
function
onpopuphiding
(
)
{
panel
.
removeEventListener
(
"
popuphidden
"
onpopuphiding
)
;
anchorBtn
.
removeAttribute
(
"
open
"
)
;
if
(
dynamicResizer
)
dynamicResizer
.
stop
(
)
;
notificationFrame
.
docShellIsActive
=
false
;
dispatchPanelEvent
(
aType
+
"
FrameHide
"
)
;
}
)
;
panel
.
addEventListener
(
"
popupshowing
"
function
onpopupshowing
(
)
{
panel
.
removeEventListener
(
"
popupshowning
"
onpopupshowing
)
;
anchorBtn
.
setAttribute
(
"
open
"
"
true
"
)
;
}
)
;
panel
.
addEventListener
(
"
popupshown
"
function
onpopupshown
(
)
{
panel
.
removeEventListener
(
"
popupshown
"
onpopupshown
)
;
mm
.
sendAsyncMessage
(
"
WaitForDOMContentLoaded
"
)
;
mm
.
addMessageListener
(
"
DOMContentLoaded
"
function
onloaded
(
)
{
mm
.
removeMessageListener
(
"
DOMContentLoaded
"
onloaded
)
;
mm
=
notificationFrame
.
messageManager
;
notificationFrame
.
docShellIsActive
=
true
;
if
(
dynamicResizer
)
dynamicResizer
.
start
(
panel
notificationFrame
)
;
dispatchPanelEvent
(
aType
+
"
FrameShow
"
)
;
}
)
;
}
)
;
let
anchor
=
aWindow
.
document
.
getAnonymousElementByAttribute
(
anchorBtn
"
class
"
"
toolbarbutton
-
icon
"
)
;
Services
.
tm
.
mainThread
.
dispatch
(
function
(
)
{
panel
.
openPopup
(
anchor
"
bottomcenter
topright
"
0
0
false
false
)
;
}
Ci
.
nsIThread
.
DISPATCH_NORMAL
)
;
if
(
aCallback
)
aCallback
(
notificationFrame
)
;
}
}
;
