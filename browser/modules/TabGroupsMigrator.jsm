"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
TabGroupsMigrator
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
results
:
Cr
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
PlacesUtils
"
"
resource
:
/
/
gre
/
modules
/
PlacesUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Task
"
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AsyncShutdown
"
"
resource
:
/
/
gre
/
modules
/
AsyncShutdown
.
jsm
"
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
gBrowserBundle
"
function
(
)
{
return
Services
.
strings
.
createBundle
(
'
chrome
:
/
/
browser
/
locale
/
browser
.
properties
'
)
;
}
)
;
this
.
TabGroupsMigrator
=
{
migrate
(
stateAsSupportsString
)
{
stateAsSupportsString
.
QueryInterface
(
Ci
.
nsISupportsString
)
;
let
stateStr
=
stateAsSupportsString
.
data
;
let
state
;
try
{
state
=
JSON
.
parse
(
stateStr
)
;
}
catch
(
ex
)
{
Cu
.
reportError
(
"
Failed
to
parse
sessionstore
state
JSON
to
migrate
tab
groups
:
"
+
ex
)
;
return
;
}
let
groupData
=
this
.
_gatherGroupData
(
state
)
;
let
hiddenTabState
=
this
.
_removeHiddenTabGroupsFromState
(
state
groupData
)
;
if
(
hiddenTabState
.
windows
.
length
)
{
this
.
_createBackup
(
stateStr
)
;
this
.
_createBackgroundTabGroupRestorationPage
(
state
hiddenTabState
)
;
let
bookmarksFinishedPromise
=
this
.
_bookmarkAllGroupsFromState
(
groupData
)
;
AsyncShutdown
.
profileBeforeChange
.
addBlocker
(
"
Tab
groups
migration
bookmarks
"
bookmarksFinishedPromise
)
;
}
stateAsSupportsString
.
data
=
JSON
.
stringify
(
state
)
;
}
_gatherGroupData
(
state
)
{
let
allGroupData
=
new
Map
(
)
;
let
globalAnonGroupID
=
0
;
for
(
let
win
of
state
.
windows
)
{
if
(
win
.
extData
&
&
win
.
extData
[
"
tabview
-
group
"
]
)
{
let
groupInfo
=
{
}
;
try
{
groupInfo
=
JSON
.
parse
(
win
.
extData
[
"
tabview
-
group
"
]
)
;
}
catch
(
ex
)
{
}
let
windowGroupData
=
new
Map
(
)
;
for
(
let
tab
of
win
.
tabs
)
{
let
group
;
try
{
group
=
tab
.
extData
&
&
tab
.
extData
[
"
tabview
-
tab
"
]
&
&
(
JSON
.
parse
(
tab
.
extData
[
"
tabview
-
tab
"
]
)
.
groupID
+
"
"
)
;
}
catch
(
ex
)
{
continue
;
}
let
groupData
=
windowGroupData
.
get
(
group
)
;
if
(
!
groupData
)
{
let
title
=
(
groupInfo
[
group
]
&
&
groupInfo
[
group
]
.
title
)
|
|
"
"
;
groupData
=
{
tabs
:
[
]
title
}
;
if
(
!
title
)
{
groupData
.
anonGroupID
=
+
+
globalAnonGroupID
;
}
windowGroupData
.
set
(
group
groupData
)
;
}
groupData
.
tabs
.
push
(
tab
)
;
}
allGroupData
.
set
(
win
windowGroupData
)
;
}
}
return
allGroupData
;
}
_createBackup
(
stateStr
)
{
}
_bookmarkAllGroupsFromState
:
Task
.
async
(
function
*
(
groupData
)
{
}
)
_removeHiddenTabGroupsFromState
(
state
groupData
)
{
}
_createBackgroundTabGroupRestorationPage
(
state
backgroundData
)
{
}
}
;
