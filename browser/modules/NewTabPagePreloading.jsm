var
EXPORTED_SYMBOLS
=
[
"
NewTabPagePreloading
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
E10SUtils
"
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyServiceGetters
(
this
{
gAboutNewTabService
:
[
"
mozilla
.
org
/
browser
/
aboutnewtab
-
service
;
1
"
"
nsIAboutNewTabService
"
]
}
)
;
let
NewTabPagePreloading
=
{
get
enabled
(
)
{
return
this
.
prefEnabled
&
&
this
.
newTabEnabled
&
&
!
gAboutNewTabService
.
overridden
;
}
maybeCreatePreloadedBrowser
(
window
)
{
if
(
!
this
.
enabled
|
|
window
.
gBrowser
.
preloadedBrowser
)
{
return
;
}
const
{
gBrowser
gMultiProcessBrowser
BROWSER_NEW_TAB_URL
}
=
window
;
let
remoteType
=
E10SUtils
.
getRemoteTypeForURI
(
BROWSER_NEW_TAB_URL
gMultiProcessBrowser
)
;
let
browser
=
gBrowser
.
createBrowser
(
{
isPreloadBrowser
:
true
remoteType
}
)
;
gBrowser
.
preloadedBrowser
=
browser
;
let
panel
=
gBrowser
.
getPanel
(
browser
)
;
gBrowser
.
tabpanels
.
appendChild
(
panel
)
;
if
(
remoteType
!
=
E10SUtils
.
NOT_REMOTE
)
{
browser
.
webProgress
;
}
browser
.
loadURI
(
BROWSER_NEW_TAB_URL
{
triggeringPrincipal
:
Services
.
scriptSecurityManager
.
getSystemPrincipal
(
)
}
)
;
browser
.
docShellIsActive
=
false
;
browser
.
_urlbarFocused
=
true
;
let
tabURI
=
Services
.
io
.
newURI
(
BROWSER_NEW_TAB_URL
)
;
window
.
FullZoom
.
onLocationChange
(
tabURI
false
browser
)
;
}
getPreloadedBrowser
(
window
)
{
if
(
!
this
.
enabled
)
{
return
null
;
}
let
browser
=
window
.
gBrowser
.
preloadedBrowser
;
window
.
gBrowser
.
preloadedBrowser
=
null
;
if
(
browser
)
{
browser
.
setAttribute
(
"
preloadedState
"
"
consumed
"
)
;
browser
.
setAttribute
(
"
autocompletepopup
"
"
PopupAutoComplete
"
)
;
}
return
browser
;
}
removePreloadedBrowser
(
window
)
{
let
browser
=
this
.
getPreloadedBrowser
(
window
)
;
if
(
browser
)
{
window
.
gBrowser
.
getPanel
(
browser
)
.
remove
(
)
;
}
}
}
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
NewTabPagePreloading
"
prefEnabled
"
"
browser
.
newtab
.
preload
"
true
)
;
XPCOMUtils
.
defineLazyPreferenceGetter
(
NewTabPagePreloading
"
newTabEnabled
"
"
browser
.
newtabpage
.
enabled
"
true
)
;
