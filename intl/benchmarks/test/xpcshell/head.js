function
measureIterations
(
metricName
)
{
let
accumulatedTime
=
0
;
let
iterations
=
0
;
let
now
=
0
;
return
{
start
(
)
{
now
=
Cu
.
now
(
)
;
}
stop
(
)
{
accumulatedTime
+
=
Cu
.
now
(
)
-
now
;
iterations
+
+
;
}
reportMetrics
(
)
{
const
metrics
=
{
}
;
metrics
[
metricName
+
"
iterations
"
]
=
iterations
;
metrics
[
metricName
+
"
accumulatedTime
"
]
=
accumulatedTime
;
metrics
[
metricName
+
"
perCallTime
"
]
=
accumulatedTime
/
iterations
;
info
(
"
perfMetrics
"
metrics
)
;
}
}
;
}
let
_seed
=
123456
;
function
prng
(
)
{
_seed
=
Math
.
imul
(
_seed
22695477
)
+
1
;
return
(
_seed
>
>
1
)
/
0x7fffffff
+
0
.
5
;
}
const
localeDistribution
=
{
"
en
-
US
"
:
0
.
373
de
:
0
.
129
fr
:
0
.
084
"
zh
-
CN
"
:
0
.
053
ru
:
0
.
048
"
es
-
ES
"
:
0
.
047
pl
:
0
.
041
"
pt
-
BR
"
:
0
.
034
it
:
0
.
028
"
en
-
GB
"
:
0
.
027
ja
:
0
.
019
"
es
-
MX
"
:
0
.
014
nl
:
0
.
01
cs
:
0
.
009
hu
:
0
.
008
id
:
0
.
006
"
en
-
CA
"
:
0
.
006
"
es
-
AR
"
:
0
.
006
tr
:
0
.
005
el
:
0
.
005
"
zh
-
TW
"
:
0
.
005
fi
:
0
.
005
"
sv
-
SE
"
:
0
.
004
"
pt
-
PT
"
:
0
.
004
sk
:
0
.
003
ar
:
0
.
003
vi
:
0
.
003
"
es
-
CL
"
:
0
.
002
th
:
0
.
002
da
:
0
.
002
bg
:
0
.
002
ro
:
0
.
002
"
nb
-
NO
"
:
0
.
002
ko
:
0
.
002
}
;
function
pickRepresentativeLocale
(
)
{
const
n
=
prng
(
)
;
let
ratio
=
1
;
for
(
const
[
locale
representation
]
of
Object
.
entries
(
localeDistribution
)
)
{
ratio
-
=
representation
;
if
(
n
>
ratio
)
{
return
locale
;
}
}
return
"
en
-
US
"
;
}
