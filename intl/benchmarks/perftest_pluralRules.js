var
perfMetadata
=
{
owner
:
"
Internationalization
Team
"
name
:
"
Intl
.
PluralRules
"
description
:
"
Test
the
speed
of
the
Intl
.
PluralRules
implementation
.
"
options
:
{
default
:
{
perfherder
:
true
perfherder_metrics
:
[
{
name
:
"
Intl
.
PluralRules
constructor
iterations
"
unit
:
"
iterations
"
}
{
name
:
"
Intl
.
PluralRules
constructor
accumulatedTime
"
unit
:
"
ms
"
}
{
name
:
"
Intl
.
PluralRules
constructor
perCallTime
"
unit
:
"
ms
"
}
{
name
:
"
Intl
.
PluralRules
.
prototype
.
select
iterations
"
unit
:
"
iterations
"
}
{
name
:
"
Intl
.
PluralRules
.
prototype
.
select
accumulatedTime
"
unit
:
"
ms
"
}
{
name
:
"
Intl
.
PluralRules
.
prototype
.
select
perCallTime
"
unit
:
"
ms
"
}
{
name
:
"
Intl
.
PluralRules
pluralCategories
iterations
"
unit
:
"
iterations
"
}
{
name
:
"
Intl
.
PluralRules
pluralCategories
accumulatedTime
"
unit
:
"
ms
"
}
{
name
:
"
Intl
.
PluralRules
pluralCategories
perCallTime
"
unit
:
"
ms
"
}
]
verbose
:
true
}
}
tags
:
[
"
intl
"
"
ecma402
"
]
}
;
add_task
(
function
measure_pluralrules
(
)
{
const
measureConstructor
=
measureIterations
(
"
Intl
.
PluralRules
constructor
"
)
;
const
measureSelect
=
measureIterations
(
"
Intl
.
PluralRules
.
prototype
.
select
"
)
;
const
measurePluralCategories
=
measureIterations
(
"
Intl
.
PluralRules
pluralCategories
"
)
;
const
fieldOptions
=
{
type
:
[
"
cardinal
"
"
ordinal
"
]
}
;
const
config
=
{
}
;
function
randomizeConfig
(
name
chance
)
{
const
option
=
fieldOptions
[
name
]
;
if
(
prng
(
)
<
chance
)
{
config
[
name
]
=
option
[
Math
.
floor
(
option
.
length
*
prng
(
)
)
]
;
}
else
{
delete
config
[
name
]
;
}
}
function
benchmarkPluralRulesConstructor
(
)
{
for
(
let
i
=
0
;
i
<
1000
;
i
+
+
)
{
const
locale
=
pickRepresentativeLocale
(
)
;
randomizeConfig
(
"
type
"
0
.
5
)
;
measureConstructor
.
start
(
)
;
const
pr
=
new
Intl
.
PluralRules
(
locale
config
)
;
measureConstructor
.
stop
(
)
;
benchmarkSelectOperation
(
pr
)
;
benchmarkPluralCategories
(
pr
)
;
}
}
function
benchmarkSelectOperation
(
pr
)
{
for
(
let
j
=
0
;
j
<
1000
;
j
+
+
)
{
const
num
=
Math
.
floor
(
prng
(
)
*
10000
)
;
measureSelect
.
start
(
)
;
pr
.
select
(
num
)
;
measureSelect
.
stop
(
)
;
}
}
function
benchmarkPluralCategories
(
pr
)
{
measurePluralCategories
.
start
(
)
;
pr
.
resolvedOptions
(
)
.
pluralCategories
;
measurePluralCategories
.
stop
(
)
;
}
benchmarkPluralRulesConstructor
(
)
;
measureConstructor
.
reportMetrics
(
)
;
measureSelect
.
reportMetrics
(
)
;
measurePluralCategories
.
reportMetrics
(
)
;
ok
(
true
)
;
}
)
;
