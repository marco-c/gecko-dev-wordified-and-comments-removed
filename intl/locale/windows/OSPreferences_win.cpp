#
include
"
OSPreferences
.
h
"
#
include
"
mozilla
/
intl
/
LocaleService
.
h
"
#
include
"
nsWin32Locale
.
h
"
#
include
"
nsReadableUtils
.
h
"
using
namespace
mozilla
:
:
intl
;
bool
OSPreferences
:
:
ReadSystemLocales
(
nsTArray
<
nsCString
>
&
aLocaleList
)
{
MOZ_ASSERT
(
aLocaleList
.
IsEmpty
(
)
)
;
nsAutoString
locale
;
LCID
win_lcid
=
GetSystemDefaultLCID
(
)
;
nsWin32Locale
:
:
GetXPLocale
(
win_lcid
locale
)
;
NS_LossyConvertUTF16toASCII
loc
(
locale
)
;
if
(
CanonicalizeLanguageTag
(
loc
)
)
{
aLocaleList
.
AppendElement
(
loc
)
;
return
true
;
}
return
false
;
}
static
LCTYPE
ToDateLCType
(
OSPreferences
:
:
DateTimeFormatStyle
aFormatStyle
)
{
switch
(
aFormatStyle
)
{
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
None
:
return
LOCALE_SLONGDATE
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Short
:
return
LOCALE_SSHORTDATE
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Medium
:
return
LOCALE_SSHORTDATE
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Long
:
return
LOCALE_SLONGDATE
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Full
:
return
LOCALE_SLONGDATE
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Invalid
:
default
:
MOZ_ASSERT_UNREACHABLE
(
"
invalid
date
format
"
)
;
return
LOCALE_SLONGDATE
;
}
}
static
LCTYPE
ToTimeLCType
(
OSPreferences
:
:
DateTimeFormatStyle
aFormatStyle
)
{
switch
(
aFormatStyle
)
{
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
None
:
return
LOCALE_STIMEFORMAT
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Short
:
return
LOCALE_SSHORTTIME
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Medium
:
return
LOCALE_SSHORTTIME
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Long
:
return
LOCALE_STIMEFORMAT
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Full
:
return
LOCALE_STIMEFORMAT
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Invalid
:
default
:
MOZ_ASSERT_UNREACHABLE
(
"
invalid
time
format
"
)
;
return
LOCALE_STIMEFORMAT
;
}
}
LPWSTR
GetWindowsLocaleFor
(
const
nsACString
&
aLocale
LPWSTR
aBuffer
)
{
nsAutoCString
reqLocale
;
nsAutoCString
systemLocale
;
OSPreferences
:
:
GetInstance
(
)
-
>
GetSystemLocale
(
systemLocale
)
;
if
(
aLocale
.
IsEmpty
(
)
)
{
LocaleService
:
:
GetInstance
(
)
-
>
GetAppLocaleAsBCP47
(
reqLocale
)
;
}
else
{
reqLocale
.
Assign
(
aLocale
)
;
}
bool
match
=
LocaleService
:
:
LanguagesMatch
(
reqLocale
systemLocale
)
;
if
(
match
|
|
reqLocale
.
Length
(
)
>
=
LOCALE_NAME_MAX_LENGTH
)
{
return
LOCALE_NAME_USER_DEFAULT
;
}
UTF8ToUnicodeBuffer
(
reqLocale
(
char16_t
*
)
aBuffer
)
;
return
aBuffer
;
}
bool
OSPreferences
:
:
ReadDateTimePattern
(
DateTimeFormatStyle
aDateStyle
DateTimeFormatStyle
aTimeStyle
const
nsACString
&
aLocale
nsAString
&
aRetVal
)
{
WCHAR
buffer
[
LOCALE_NAME_MAX_LENGTH
]
;
LPWSTR
localeName
=
GetWindowsLocaleFor
(
aLocale
buffer
)
;
bool
isDate
=
aDateStyle
!
=
DateTimeFormatStyle
:
:
None
&
&
aDateStyle
!
=
DateTimeFormatStyle
:
:
Invalid
;
bool
isTime
=
aTimeStyle
!
=
DateTimeFormatStyle
:
:
None
&
&
aTimeStyle
!
=
DateTimeFormatStyle
:
:
Invalid
;
nsAutoString
tmpStr
;
nsAString
*
str
;
if
(
isDate
&
&
isTime
)
{
if
(
!
GetDateTimeConnectorPattern
(
NS_ConvertUTF16toUTF8
(
localeName
)
aRetVal
)
)
{
NS_WARNING
(
"
failed
to
get
date
/
time
connector
"
)
;
aRetVal
.
AssignLiteral
(
u
"
{
1
}
{
0
}
"
)
;
}
str
=
&
tmpStr
;
}
else
if
(
isDate
|
|
isTime
)
{
str
=
&
aRetVal
;
}
else
{
aRetVal
.
Truncate
(
0
)
;
return
true
;
}
if
(
isDate
)
{
LCTYPE
lcType
=
ToDateLCType
(
aDateStyle
)
;
size_t
len
=
GetLocaleInfoEx
(
localeName
lcType
nullptr
0
)
;
if
(
len
=
=
0
)
{
return
false
;
}
str
-
>
SetLength
(
len
-
1
)
;
GetLocaleInfoEx
(
localeName
lcType
(
WCHAR
*
)
str
-
>
BeginWriting
(
)
len
)
;
nsAString
:
:
const_iterator
start
pos
end
;
start
=
str
-
>
BeginReading
(
pos
)
;
str
-
>
EndReading
(
end
)
;
if
(
FindInReadable
(
NS_LITERAL_STRING
(
"
dddd
"
)
pos
end
)
)
{
str
-
>
Replace
(
pos
-
start
4
NS_LITERAL_STRING
(
"
EEEE
"
)
)
;
}
else
if
(
FindInReadable
(
NS_LITERAL_STRING
(
"
ddd
"
)
pos
end
)
)
{
str
-
>
Replace
(
pos
-
start
3
NS_LITERAL_STRING
(
"
EEE
"
)
)
;
}
int32_t
index
=
str
-
>
FindChar
(
'
g
'
)
;
if
(
index
>
=
0
)
{
str
-
>
Replace
(
index
1
'
G
'
)
;
index
+
+
;
if
(
str
-
>
CharAt
(
index
)
=
=
'
g
'
)
{
str
-
>
Cut
(
index
1
)
;
}
}
if
(
isTime
)
{
nsAString
:
:
const_iterator
start
pos
end
;
start
=
aRetVal
.
BeginReading
(
pos
)
;
aRetVal
.
EndReading
(
end
)
;
if
(
FindInReadable
(
NS_LITERAL_STRING
(
"
{
1
}
"
)
pos
end
)
)
{
aRetVal
.
Replace
(
pos
-
start
3
tmpStr
)
;
}
}
}
if
(
isTime
)
{
LCTYPE
lcType
=
ToTimeLCType
(
aTimeStyle
)
;
size_t
len
=
GetLocaleInfoEx
(
localeName
lcType
nullptr
0
)
;
if
(
len
=
=
0
)
{
return
false
;
}
str
-
>
SetLength
(
len
-
1
)
;
GetLocaleInfoEx
(
localeName
lcType
(
WCHAR
*
)
str
-
>
BeginWriting
(
)
len
)
;
int32_t
index
=
str
-
>
FindChar
(
'
t
'
)
;
if
(
index
>
=
0
)
{
str
-
>
Replace
(
index
1
'
a
'
)
;
index
+
+
;
if
(
str
-
>
CharAt
(
index
)
=
=
'
t
'
)
{
str
-
>
Cut
(
index
1
)
;
}
}
if
(
isDate
)
{
nsAString
:
:
const_iterator
start
pos
end
;
start
=
aRetVal
.
BeginReading
(
pos
)
;
aRetVal
.
EndReading
(
end
)
;
if
(
FindInReadable
(
NS_LITERAL_STRING
(
"
{
0
}
"
)
pos
end
)
)
{
aRetVal
.
Replace
(
pos
-
start
3
tmpStr
)
;
}
}
}
return
true
;
}
