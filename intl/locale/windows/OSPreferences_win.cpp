#
include
"
OSPreferences
.
h
"
#
include
"
mozilla
/
intl
/
LocaleService
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
<
windows
.
h
>
using
namespace
mozilla
:
:
intl
;
bool
OSPreferences
:
:
ReadSystemLocales
(
nsTArray
<
nsCString
>
&
aLocaleList
)
{
MOZ_ASSERT
(
aLocaleList
.
IsEmpty
(
)
)
;
ULONG
numLanguages
=
0
;
DWORD
cchLanguagesBuffer
=
0
;
BOOL
ok
=
GetUserPreferredUILanguages
(
MUI_LANGUAGE_NAME
&
numLanguages
nullptr
&
cchLanguagesBuffer
)
;
if
(
ok
)
{
AutoTArray
<
WCHAR
64
>
locBuffer
;
locBuffer
.
SetCapacity
(
cchLanguagesBuffer
)
;
ok
=
GetUserPreferredUILanguages
(
MUI_LANGUAGE_NAME
&
numLanguages
locBuffer
.
Elements
(
)
&
cchLanguagesBuffer
)
;
if
(
ok
)
{
NS_LossyConvertUTF16toASCII
loc
(
locBuffer
.
Elements
(
)
)
;
if
(
CanonicalizeLanguageTag
(
loc
)
)
{
aLocaleList
.
AppendElement
(
loc
)
;
return
true
;
}
}
}
return
false
;
}
bool
OSPreferences
:
:
ReadRegionalPrefsLocales
(
nsTArray
<
nsCString
>
&
aLocaleList
)
{
MOZ_ASSERT
(
aLocaleList
.
IsEmpty
(
)
)
;
WCHAR
locale
[
LOCALE_NAME_MAX_LENGTH
]
;
if
(
NS_WARN_IF
(
!
LCIDToLocaleName
(
LOCALE_USER_DEFAULT
locale
LOCALE_NAME_MAX_LENGTH
0
)
)
)
{
return
false
;
}
NS_LossyConvertUTF16toASCII
loc
(
locale
)
;
if
(
CanonicalizeLanguageTag
(
loc
)
)
{
aLocaleList
.
AppendElement
(
loc
)
;
return
true
;
}
return
false
;
}
static
LCTYPE
ToDateLCType
(
OSPreferences
:
:
DateTimeFormatStyle
aFormatStyle
)
{
switch
(
aFormatStyle
)
{
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
None
:
return
LOCALE_SLONGDATE
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Short
:
return
LOCALE_SSHORTDATE
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Medium
:
return
LOCALE_SSHORTDATE
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Long
:
return
LOCALE_SLONGDATE
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Full
:
return
LOCALE_SLONGDATE
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Invalid
:
default
:
MOZ_ASSERT_UNREACHABLE
(
"
invalid
date
format
"
)
;
return
LOCALE_SLONGDATE
;
}
}
static
LCTYPE
ToTimeLCType
(
OSPreferences
:
:
DateTimeFormatStyle
aFormatStyle
)
{
switch
(
aFormatStyle
)
{
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
None
:
return
LOCALE_STIMEFORMAT
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Short
:
return
LOCALE_SSHORTTIME
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Medium
:
return
LOCALE_SSHORTTIME
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Long
:
return
LOCALE_STIMEFORMAT
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Full
:
return
LOCALE_STIMEFORMAT
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Invalid
:
default
:
MOZ_ASSERT_UNREACHABLE
(
"
invalid
time
format
"
)
;
return
LOCALE_STIMEFORMAT
;
}
}
bool
OSPreferences
:
:
ReadDateTimePattern
(
DateTimeFormatStyle
aDateStyle
DateTimeFormatStyle
aTimeStyle
const
nsACString
&
aLocale
nsAString
&
aRetVal
)
{
WCHAR
localeName
[
LOCALE_NAME_MAX_LENGTH
]
;
UTF8ToUnicodeBuffer
(
aLocale
(
char16_t
*
)
localeName
)
;
bool
isDate
=
aDateStyle
!
=
DateTimeFormatStyle
:
:
None
&
&
aDateStyle
!
=
DateTimeFormatStyle
:
:
Invalid
;
bool
isTime
=
aTimeStyle
!
=
DateTimeFormatStyle
:
:
None
&
&
aTimeStyle
!
=
DateTimeFormatStyle
:
:
Invalid
;
nsAutoString
tmpStr
;
nsAString
*
str
;
if
(
isDate
&
&
isTime
)
{
if
(
!
GetDateTimeConnectorPattern
(
NS_ConvertUTF16toUTF8
(
localeName
)
aRetVal
)
)
{
NS_WARNING
(
"
failed
to
get
date
/
time
connector
"
)
;
aRetVal
.
AssignLiteral
(
u
"
{
1
}
{
0
}
"
)
;
}
str
=
&
tmpStr
;
}
else
if
(
isDate
|
|
isTime
)
{
str
=
&
aRetVal
;
}
else
{
aRetVal
.
Truncate
(
0
)
;
return
true
;
}
if
(
isDate
)
{
LCTYPE
lcType
=
ToDateLCType
(
aDateStyle
)
;
size_t
len
=
GetLocaleInfoEx
(
localeName
lcType
nullptr
0
)
;
if
(
len
=
=
0
)
{
return
false
;
}
str
-
>
SetLength
(
len
)
;
GetLocaleInfoEx
(
localeName
lcType
(
WCHAR
*
)
str
-
>
BeginWriting
(
)
len
)
;
str
-
>
SetLength
(
len
-
1
)
;
nsAString
:
:
const_iterator
start
pos
end
;
start
=
str
-
>
BeginReading
(
pos
)
;
str
-
>
EndReading
(
end
)
;
if
(
FindInReadable
(
NS_LITERAL_STRING
(
"
dddd
"
)
pos
end
)
)
{
str
-
>
ReplaceLiteral
(
pos
-
start
4
u
"
EEEE
"
)
;
}
else
{
pos
=
start
;
if
(
FindInReadable
(
NS_LITERAL_STRING
(
"
ddd
"
)
pos
end
)
)
{
str
-
>
ReplaceLiteral
(
pos
-
start
3
u
"
EEE
"
)
;
}
}
int32_t
index
=
str
-
>
FindChar
(
'
g
'
)
;
if
(
index
>
=
0
)
{
str
-
>
Replace
(
index
1
'
G
'
)
;
index
+
+
;
if
(
str
-
>
CharAt
(
index
)
=
=
'
g
'
)
{
str
-
>
Cut
(
index
1
)
;
}
}
if
(
isTime
)
{
nsAString
:
:
const_iterator
start
pos
end
;
start
=
aRetVal
.
BeginReading
(
pos
)
;
aRetVal
.
EndReading
(
end
)
;
if
(
FindInReadable
(
NS_LITERAL_STRING
(
"
{
1
}
"
)
pos
end
)
)
{
aRetVal
.
Replace
(
pos
-
start
3
tmpStr
)
;
}
}
}
if
(
isTime
)
{
LCTYPE
lcType
=
ToTimeLCType
(
aTimeStyle
)
;
size_t
len
=
GetLocaleInfoEx
(
localeName
lcType
nullptr
0
)
;
if
(
len
=
=
0
)
{
return
false
;
}
str
-
>
SetLength
(
len
)
;
GetLocaleInfoEx
(
localeName
lcType
(
WCHAR
*
)
str
-
>
BeginWriting
(
)
len
)
;
str
-
>
SetLength
(
len
-
1
)
;
int32_t
index
=
str
-
>
FindChar
(
'
t
'
)
;
if
(
index
>
=
0
)
{
str
-
>
Replace
(
index
1
'
a
'
)
;
index
+
+
;
if
(
str
-
>
CharAt
(
index
)
=
=
'
t
'
)
{
str
-
>
Cut
(
index
1
)
;
}
}
if
(
isDate
)
{
nsAString
:
:
const_iterator
start
pos
end
;
start
=
aRetVal
.
BeginReading
(
pos
)
;
aRetVal
.
EndReading
(
end
)
;
if
(
FindInReadable
(
NS_LITERAL_STRING
(
"
{
0
}
"
)
pos
end
)
)
{
aRetVal
.
Replace
(
pos
-
start
3
tmpStr
)
;
}
}
}
return
true
;
}
