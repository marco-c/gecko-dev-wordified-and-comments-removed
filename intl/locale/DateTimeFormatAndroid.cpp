#
include
"
DateTimeFormat
.
h
"
#
include
"
prtime
.
h
"
#
include
<
time
.
h
>
#
define
NSDATETIME_FORMAT_BUFFER_LEN
80
namespace
mozilla
{
nsCString
*
DateTimeFormat
:
:
mLocale
=
nullptr
;
static
nsresult
FormatTMTime
(
const
nsDateFormatSelector
aDateFormatSelector
const
nsTimeFormatSelector
aTimeFormatSelector
const
struct
tm
*
aTmTime
nsAString
&
aStringOut
)
{
nsAutoCString
format
;
if
(
aDateFormatSelector
=
=
kDateFormatLong
&
&
aTimeFormatSelector
=
=
kTimeFormatSeconds
)
{
format
.
AssignLiteral
(
"
%
c
"
)
;
}
else
{
switch
(
aDateFormatSelector
)
{
case
kDateFormatLong
:
case
kDateFormatShort
:
format
.
AssignLiteral
(
"
%
x
"
)
;
break
;
case
kDateFormatWeekday
:
format
.
AssignLiteral
(
"
%
a
"
)
;
break
;
case
kDateFormatMonthLong
:
format
.
AssignLiteral
(
"
%
B
"
)
;
break
;
case
kDateFormatYearMonth
:
format
.
AssignLiteral
(
"
%
m
/
%
Y
"
)
;
break
;
case
kDateFormatYearMonthLong
:
format
.
AssignLiteral
(
"
%
B
%
Y
"
)
;
break
;
case
kDateFormatNone
:
default
:
break
;
}
switch
(
aTimeFormatSelector
)
{
case
kTimeFormatSeconds
:
if
(
!
format
.
IsEmpty
(
)
)
{
format
.
AppendLiteral
(
"
"
)
;
}
format
.
AppendLiteral
(
"
%
X
"
)
;
break
;
case
kTimeFormatNoSeconds
:
if
(
!
format
.
IsEmpty
(
)
)
{
format
.
AppendLiteral
(
"
"
)
;
}
format
.
AppendLiteral
(
"
%
H
:
%
M
"
)
;
break
;
case
kTimeFormatNone
:
default
:
break
;
}
}
char
strOut
[
NSDATETIME_FORMAT_BUFFER_LEN
]
;
if
(
!
format
.
IsEmpty
(
)
)
{
strftime
(
strOut
NSDATETIME_FORMAT_BUFFER_LEN
format
.
get
(
)
aTmTime
)
;
CopyUTF8toUTF16
(
strOut
aStringOut
)
;
}
else
{
aStringOut
.
Truncate
(
)
;
}
return
NS_OK
;
}
nsresult
DateTimeFormat
:
:
FormatTime
(
const
nsDateFormatSelector
aDateFormatSelector
const
nsTimeFormatSelector
aTimeFormatSelector
const
time_t
aTimetTime
nsAString
&
aStringOut
)
{
struct
tm
tmTime
;
memcpy
(
&
tmTime
localtime
(
&
aTimetTime
)
sizeof
(
struct
tm
)
)
;
return
FormatTMTime
(
aDateFormatSelector
aTimeFormatSelector
&
tmTime
aStringOut
)
;
}
nsresult
DateTimeFormat
:
:
FormatPRTime
(
const
nsDateFormatSelector
aDateFormatSelector
const
nsTimeFormatSelector
aTimeFormatSelector
const
PRTime
aPrTime
nsAString
&
aStringOut
)
{
PRExplodedTime
explodedTime
;
PR_ExplodeTime
(
aPrTime
PR_LocalTimeParameters
&
explodedTime
)
;
return
FormatPRExplodedTime
(
aDateFormatSelector
aTimeFormatSelector
&
explodedTime
aStringOut
)
;
}
nsresult
DateTimeFormat
:
:
FormatPRExplodedTime
(
const
nsDateFormatSelector
aDateFormatSelector
const
nsTimeFormatSelector
aTimeFormatSelector
const
PRExplodedTime
*
aExplodedTime
nsAString
&
aStringOut
)
{
struct
tm
tmTime
;
memset
(
&
tmTime
0
sizeof
(
tmTime
)
)
;
tmTime
.
tm_yday
=
aExplodedTime
-
>
tm_yday
;
tmTime
.
tm_wday
=
aExplodedTime
-
>
tm_wday
;
tmTime
.
tm_year
=
aExplodedTime
-
>
tm_year
;
tmTime
.
tm_year
-
=
1900
;
tmTime
.
tm_mon
=
aExplodedTime
-
>
tm_month
;
tmTime
.
tm_mday
=
aExplodedTime
-
>
tm_mday
;
tmTime
.
tm_hour
=
aExplodedTime
-
>
tm_hour
;
tmTime
.
tm_min
=
aExplodedTime
-
>
tm_min
;
tmTime
.
tm_sec
=
aExplodedTime
-
>
tm_sec
;
return
FormatTMTime
(
aDateFormatSelector
aTimeFormatSelector
&
tmTime
aStringOut
)
;
}
void
DateTimeFormat
:
:
Shutdown
(
)
{
}
}
