#
include
"
mozilla
/
intl
/
MozLocale
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
unicode
/
uloc
.
h
"
using
namespace
mozilla
:
:
intl
;
Locale
:
:
Locale
(
const
nsACString
&
aLocale
)
{
if
(
aLocale
.
IsEmpty
(
)
|
|
!
IsASCII
(
aLocale
)
)
{
mIsWellFormed
=
false
;
return
;
}
int32_t
position
=
0
;
nsAutoCString
normLocale
(
aLocale
)
;
normLocale
.
ReplaceChar
(
'
_
'
'
-
'
)
;
for
(
const
nsACString
&
subTag
:
normLocale
.
Split
(
'
-
'
)
)
{
auto
slen
=
subTag
.
Length
(
)
;
if
(
slen
>
8
)
{
mIsWellFormed
=
false
;
return
;
}
else
if
(
position
=
=
6
)
{
ToLowerCase
(
*
mPrivateUse
.
AppendElement
(
subTag
)
)
;
}
else
if
(
subTag
.
LowerCaseEqualsLiteral
(
"
x
"
)
)
{
position
=
6
;
}
else
if
(
position
=
=
0
)
{
if
(
slen
<
2
|
|
slen
>
3
)
{
mIsWellFormed
=
false
;
return
;
}
mLanguage
=
subTag
;
ToLowerCase
(
mLanguage
)
;
position
=
2
;
}
else
if
(
position
<
=
2
&
&
slen
=
=
4
)
{
mScript
=
subTag
;
ToLowerCase
(
mScript
)
;
mScript
.
Replace
(
0
1
ToUpperCase
(
mScript
[
0
]
)
)
;
position
=
3
;
}
else
if
(
position
<
=
3
&
&
slen
=
=
2
)
{
mRegion
=
subTag
;
ToUpperCase
(
mRegion
)
;
position
=
4
;
}
else
if
(
position
<
=
4
&
&
slen
>
=
5
&
&
slen
<
=
8
)
{
nsAutoCString
lcSubTag
(
subTag
)
;
ToLowerCase
(
lcSubTag
)
;
mVariants
.
InsertElementSorted
(
lcSubTag
)
;
position
=
4
;
}
}
}
const
nsCString
Locale
:
:
AsString
(
)
const
{
nsCString
tag
;
if
(
!
mIsWellFormed
)
{
tag
.
AppendLiteral
(
"
und
"
)
;
return
tag
;
}
tag
.
Append
(
mLanguage
)
;
if
(
!
mScript
.
IsEmpty
(
)
)
{
tag
.
AppendLiteral
(
"
-
"
)
;
tag
.
Append
(
mScript
)
;
}
if
(
!
mRegion
.
IsEmpty
(
)
)
{
tag
.
AppendLiteral
(
"
-
"
)
;
tag
.
Append
(
mRegion
)
;
}
for
(
const
auto
&
variant
:
mVariants
)
{
tag
.
AppendLiteral
(
"
-
"
)
;
tag
.
Append
(
variant
)
;
}
if
(
!
mPrivateUse
.
IsEmpty
(
)
)
{
if
(
tag
.
IsEmpty
(
)
)
{
tag
.
AppendLiteral
(
"
x
"
)
;
}
else
{
tag
.
AppendLiteral
(
"
-
x
"
)
;
}
for
(
const
auto
&
subTag
:
mPrivateUse
)
{
tag
.
AppendLiteral
(
"
-
"
)
;
tag
.
Append
(
subTag
)
;
}
}
return
tag
;
}
const
nsCString
&
Locale
:
:
GetLanguage
(
)
const
{
return
mLanguage
;
}
const
nsCString
&
Locale
:
:
GetScript
(
)
const
{
return
mScript
;
}
const
nsCString
&
Locale
:
:
GetRegion
(
)
const
{
return
mRegion
;
}
const
nsTArray
<
nsCString
>
&
Locale
:
:
GetVariants
(
)
const
{
return
mVariants
;
}
bool
Locale
:
:
Matches
(
const
Locale
&
aOther
bool
aThisRange
bool
aOtherRange
)
const
{
if
(
!
IsWellFormed
(
)
|
|
!
aOther
.
IsWellFormed
(
)
)
{
return
false
;
}
if
(
(
!
aThisRange
|
|
!
mLanguage
.
IsEmpty
(
)
)
&
&
(
!
aOtherRange
|
|
!
aOther
.
mLanguage
.
IsEmpty
(
)
)
&
&
!
mLanguage
.
Equals
(
aOther
.
mLanguage
)
)
{
return
false
;
}
if
(
(
!
aThisRange
|
|
!
mScript
.
IsEmpty
(
)
)
&
&
(
!
aOtherRange
|
|
!
aOther
.
mScript
.
IsEmpty
(
)
)
&
&
!
mScript
.
Equals
(
aOther
.
mScript
)
)
{
return
false
;
}
if
(
(
!
aThisRange
|
|
!
mRegion
.
IsEmpty
(
)
)
&
&
(
!
aOtherRange
|
|
!
aOther
.
mRegion
.
IsEmpty
(
)
)
&
&
!
mRegion
.
Equals
(
aOther
.
mRegion
)
)
{
return
false
;
}
if
(
(
!
aThisRange
|
|
!
mVariants
.
IsEmpty
(
)
)
&
&
(
!
aOtherRange
|
|
!
aOther
.
mVariants
.
IsEmpty
(
)
)
&
&
mVariants
!
=
aOther
.
mVariants
)
{
return
false
;
}
return
true
;
}
bool
Locale
:
:
AddLikelySubtags
(
)
{
const
int32_t
kLocaleMax
=
160
;
char
maxLocale
[
kLocaleMax
]
;
UErrorCode
status
=
U_ZERO_ERROR
;
uloc_addLikelySubtags
(
AsString
(
)
.
get
(
)
maxLocale
kLocaleMax
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
false
;
}
nsDependentCString
maxLocStr
(
maxLocale
)
;
Locale
loc
=
Locale
(
maxLocStr
)
;
if
(
loc
=
=
*
this
)
{
return
false
;
}
mLanguage
=
loc
.
mLanguage
;
mScript
=
loc
.
mScript
;
mRegion
=
loc
.
mRegion
;
return
true
;
}
void
Locale
:
:
ClearVariants
(
)
{
mVariants
.
Clear
(
)
;
}
void
Locale
:
:
ClearRegion
(
)
{
mRegion
.
Truncate
(
)
;
}
