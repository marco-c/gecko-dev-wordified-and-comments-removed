#
ifndef
mozilla_intl_LocaleService_h__
#
define
mozilla_intl_LocaleService_h__
#
include
"
nsIObserver
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozILocaleService
.
h
"
namespace
mozilla
{
namespace
intl
{
class
LocaleService
:
public
mozILocaleService
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_MOZILOCALESERVICE
enum
class
LangNegStrategy
{
Filtering
Matching
Lookup
}
;
static
LocaleService
*
GetInstance
(
)
;
static
already_AddRefed
<
LocaleService
>
GetInstanceAddRefed
(
)
{
return
RefPtr
<
LocaleService
>
(
GetInstance
(
)
)
.
forget
(
)
;
}
void
GetAppLocalesAsLangTags
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
void
GetAppLocalesAsBCP47
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
bool
GetRequestedLocales
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
bool
GetAvailableLocales
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
void
Refresh
(
)
;
bool
NegotiateLanguages
(
const
nsTArray
<
nsCString
>
&
aRequested
const
nsTArray
<
nsCString
>
&
aAvailable
const
nsACString
&
aDefaultLocale
LangNegStrategy
aLangNegStrategy
nsTArray
<
nsCString
>
&
aRetVal
)
;
private
:
class
Locale
{
public
:
Locale
(
const
nsCString
&
aLocale
bool
aRange
)
;
bool
Matches
(
const
Locale
&
aLocale
)
const
;
void
SetVariantRange
(
)
;
void
SetRegionRange
(
)
;
bool
AddLikelySubtags
(
)
;
const
nsCString
&
AsString
(
)
const
{
return
mLocaleStr
;
}
bool
operator
=
=
(
const
Locale
&
aOther
)
{
const
auto
&
cmp
=
nsCaseInsensitiveCStringComparator
(
)
;
return
mLanguage
.
Equals
(
aOther
.
mLanguage
cmp
)
&
&
mScript
.
Equals
(
aOther
.
mScript
cmp
)
&
&
mRegion
.
Equals
(
aOther
.
mRegion
cmp
)
&
&
mVariant
.
Equals
(
aOther
.
mVariant
cmp
)
;
}
private
:
const
nsCString
&
mLocaleStr
;
nsCString
mLanguage
;
nsCString
mScript
;
nsCString
mRegion
;
nsCString
mVariant
;
}
;
void
FilterMatches
(
const
nsTArray
<
nsCString
>
&
aRequested
const
nsTArray
<
nsCString
>
&
aAvailable
LangNegStrategy
aStrategy
nsTArray
<
nsCString
>
&
aRetVal
)
;
virtual
~
LocaleService
(
)
;
nsTArray
<
nsCString
>
mAppLocales
;
static
StaticRefPtr
<
LocaleService
>
sInstance
;
}
;
}
}
#
endif
