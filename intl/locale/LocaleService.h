#
ifndef
mozilla_intl_LocaleService_h__
#
define
mozilla_intl_LocaleService_h__
#
include
"
nsIObserver
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
mozILocaleService
.
h
"
namespace
mozilla
{
namespace
intl
{
class
LocaleService
final
:
public
mozILocaleService
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_MOZILOCALESERVICE
enum
class
LangNegStrategy
{
Filtering
Matching
Lookup
}
;
explicit
LocaleService
(
bool
aIsServer
)
;
static
LocaleService
*
GetInstance
(
)
;
static
already_AddRefed
<
LocaleService
>
GetInstanceAddRefed
(
)
{
return
RefPtr
<
LocaleService
>
(
GetInstance
(
)
)
.
forget
(
)
;
}
void
GetAppLocalesAsLangTags
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
void
GetAppLocalesAsBCP47
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
void
GetRegionalPrefsLocales
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
void
AssignAppLocales
(
const
nsTArray
<
nsCString
>
&
aAppLocales
)
;
void
AssignRequestedLocales
(
const
nsTArray
<
nsCString
>
&
aRequestedLocales
)
;
bool
GetRequestedLocales
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
bool
GetAvailableLocales
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
void
GetPackagedLocales
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
void
RequestedLocalesChanged
(
)
;
void
LocalesChanged
(
)
;
bool
NegotiateLanguages
(
const
nsTArray
<
nsCString
>
&
aRequested
const
nsTArray
<
nsCString
>
&
aAvailable
const
nsACString
&
aDefaultLocale
LangNegStrategy
aLangNegStrategy
nsTArray
<
nsCString
>
&
aRetVal
)
;
bool
IsAppLocaleRTL
(
)
;
static
bool
LanguagesMatch
(
const
nsACString
&
aRequested
const
nsACString
&
aAvailable
)
;
bool
IsServer
(
)
;
private
:
void
FilterMatches
(
const
nsTArray
<
nsCString
>
&
aRequested
const
nsTArray
<
nsCString
>
&
aAvailable
LangNegStrategy
aStrategy
nsTArray
<
nsCString
>
&
aRetVal
)
;
void
NegotiateAppLocales
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
void
InitPackagedLocales
(
)
;
virtual
~
LocaleService
(
)
;
nsAutoCStringN
<
16
>
mDefaultLocale
;
nsTArray
<
nsCString
>
mAppLocales
;
nsTArray
<
nsCString
>
mRequestedLocales
;
nsTArray
<
nsCString
>
mAvailableLocales
;
nsTArray
<
nsCString
>
mPackagedLocales
;
const
bool
mIsServer
;
static
StaticRefPtr
<
LocaleService
>
sInstance
;
}
;
}
}
#
endif
