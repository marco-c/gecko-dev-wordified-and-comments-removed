#
ifndef
mozilla_intl_IntlOSPreferences_h__
#
define
mozilla_intl_IntlOSPreferences_h__
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozIOSPreferences
.
h
"
namespace
mozilla
{
namespace
intl
{
class
OSPreferences
:
public
mozIOSPreferences
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_MOZIOSPREFERENCES
enum
class
DateTimeFormatStyle
{
Invalid
=
-
1
None
Short
Medium
Long
Full
}
;
OSPreferences
(
)
;
static
OSPreferences
*
GetInstance
(
)
;
static
already_AddRefed
<
OSPreferences
>
GetInstanceAddRefed
(
)
;
static
bool
GetPatternForSkeleton
(
const
nsACString
&
aSkeleton
const
nsACString
&
aLocale
nsACString
&
aRetVal
)
;
static
bool
GetDateTimeConnectorPattern
(
const
nsACString
&
aLocale
nsACString
&
aRetVal
)
;
void
Refresh
(
)
;
protected
:
nsTArray
<
nsCString
>
mSystemLocales
;
nsTArray
<
nsCString
>
mRegionalPrefsLocales
;
const
size_t
kMaxCachedPatterns
=
15
;
nsDataHashtable
<
nsCStringHashKey
nsCString
>
mPatternCache
;
private
:
virtual
~
OSPreferences
(
)
;
static
StaticRefPtr
<
OSPreferences
>
sInstance
;
static
bool
CanonicalizeLanguageTag
(
nsCString
&
aLoc
)
;
bool
GetDateTimePatternForStyle
(
DateTimeFormatStyle
aDateStyle
DateTimeFormatStyle
aTimeStyle
const
nsACString
&
aLocale
nsACString
&
aRetVal
)
;
bool
GetDateTimeSkeletonForStyle
(
DateTimeFormatStyle
aDateStyle
DateTimeFormatStyle
aTimeStyle
const
nsACString
&
aLocale
nsACString
&
aRetVal
)
;
bool
OverrideDateTimePattern
(
DateTimeFormatStyle
aDateStyle
DateTimeFormatStyle
aTimeStyle
const
nsACString
&
aLocale
nsACString
&
aRetVal
)
;
bool
ReadSystemLocales
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
bool
ReadRegionalPrefsLocales
(
nsTArray
<
nsCString
>
&
aRetVal
)
;
bool
ReadDateTimePattern
(
DateTimeFormatStyle
aDateFormatStyle
DateTimeFormatStyle
aTimeFormatStyle
const
nsACString
&
aLocale
nsACString
&
aRetVal
)
;
void
RemoveObservers
(
)
;
static
void
PreferenceChanged
(
const
char
*
aPrefName
void
*
)
;
}
;
}
}
#
endif
