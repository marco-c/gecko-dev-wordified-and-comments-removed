#
include
"
Quotes
.
h
"
#
include
"
MozLocale
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsPrintfCString
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
intl
;
namespace
{
struct
LangQuotesRec
{
const
char
*
mLangs
;
Quotes
mQuotes
;
}
;
#
include
"
cldr
-
quotes
.
inc
"
static
StaticAutoPtr
<
nsDataHashtable
<
nsCStringHashKey
Quotes
>
>
sQuotesForLang
;
}
namespace
mozilla
{
namespace
intl
{
const
Quotes
*
QuotesForLang
(
const
nsAtom
*
aLang
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sQuotesForLang
)
{
sQuotesForLang
=
new
nsDataHashtable
<
nsCStringHashKey
Quotes
>
(
32
)
;
ClearOnShutdown
(
&
sQuotesForLang
)
;
for
(
const
auto
&
i
:
sLangQuotes
)
{
const
char
*
s
=
i
.
mLangs
;
size_t
len
;
while
(
(
len
=
strlen
(
s
)
)
)
{
sQuotesForLang
-
>
Put
(
nsDependentCString
(
s
len
)
i
.
mQuotes
)
;
s
+
=
len
+
1
;
}
}
}
nsAtomCString
langStr
(
aLang
)
;
const
Quotes
*
entry
=
sQuotesForLang
-
>
GetValue
(
langStr
)
;
if
(
entry
)
{
return
entry
;
}
Locale
loc
(
langStr
)
;
if
(
loc
.
IsWellFormed
(
)
)
{
if
(
!
loc
.
GetRegion
(
)
.
IsEmpty
(
)
&
&
(
entry
=
sQuotesForLang
-
>
GetValue
(
nsPrintfCString
(
"
%
s
-
%
s
"
loc
.
GetLanguage
(
)
.
get
(
)
loc
.
GetRegion
(
)
.
get
(
)
)
)
)
)
{
return
entry
;
}
if
(
!
loc
.
GetScript
(
)
.
IsEmpty
(
)
&
&
(
entry
=
sQuotesForLang
-
>
GetValue
(
nsPrintfCString
(
"
%
s
-
%
s
"
loc
.
GetLanguage
(
)
.
get
(
)
loc
.
GetScript
(
)
.
get
(
)
)
)
)
)
{
return
entry
;
}
if
(
(
entry
=
sQuotesForLang
-
>
GetValue
(
loc
.
GetLanguage
(
)
)
)
)
{
return
entry
;
}
}
return
nullptr
;
}
}
}
