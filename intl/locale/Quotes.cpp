#
include
"
Quotes
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
intl
/
Locale
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsPrintfCString
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
intl
;
namespace
{
struct
LangQuotesRec
{
const
char
*
mLangs
;
Quotes
mQuotes
;
}
;
#
include
"
cldr
-
quotes
.
inc
"
static
StaticAutoPtr
<
nsTHashMap
<
nsCStringHashKey
Quotes
>
>
sQuotesForLang
;
}
namespace
mozilla
{
namespace
intl
{
const
Quotes
*
QuotesForLang
(
const
nsAtom
*
aLang
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sQuotesForLang
)
{
sQuotesForLang
=
new
nsTHashMap
<
nsCStringHashKey
Quotes
>
(
32
)
;
ClearOnShutdown
(
&
sQuotesForLang
)
;
for
(
const
auto
&
i
:
sLangQuotes
)
{
const
char
*
s
=
i
.
mLangs
;
size_t
len
;
while
(
(
len
=
strlen
(
s
)
)
)
{
sQuotesForLang
-
>
InsertOrUpdate
(
nsDependentCString
(
s
len
)
i
.
mQuotes
)
;
s
+
=
len
+
1
;
}
}
}
nsAtomCString
langStr
(
aLang
)
;
const
Quotes
*
entry
=
sQuotesForLang
-
>
Lookup
(
langStr
)
.
DataPtrOrNull
(
)
;
if
(
entry
)
{
return
entry
;
}
Locale
loc
;
auto
result
=
LocaleParser
:
:
TryParse
(
langStr
loc
)
;
if
(
result
.
isErr
(
)
)
{
return
nullptr
;
}
if
(
loc
.
Canonicalize
(
)
.
isErr
(
)
)
{
return
nullptr
;
}
if
(
loc
.
Region
(
)
.
Present
(
)
)
{
nsAutoCString
langAndRegion
;
langAndRegion
.
Append
(
loc
.
Language
(
)
.
Span
(
)
)
;
langAndRegion
.
Append
(
'
-
'
)
;
langAndRegion
.
Append
(
loc
.
Region
(
)
.
Span
(
)
)
;
if
(
(
entry
=
sQuotesForLang
-
>
Lookup
(
langAndRegion
)
.
DataPtrOrNull
(
)
)
)
{
return
entry
;
}
}
if
(
loc
.
Script
(
)
.
Present
(
)
)
{
nsAutoCString
langAndScript
;
langAndScript
.
Append
(
loc
.
Language
(
)
.
Span
(
)
)
;
langAndScript
.
Append
(
'
-
'
)
;
langAndScript
.
Append
(
loc
.
Script
(
)
.
Span
(
)
)
;
if
(
(
entry
=
sQuotesForLang
-
>
Lookup
(
langAndScript
)
.
DataPtrOrNull
(
)
)
)
{
return
entry
;
}
}
Span
<
const
char
>
langAsSpan
=
loc
.
Language
(
)
.
Span
(
)
;
nsAutoCString
lang
(
langAsSpan
.
data
(
)
langAsSpan
.
size
(
)
)
;
if
(
(
entry
=
sQuotesForLang
-
>
Lookup
(
lang
)
.
DataPtrOrNull
(
)
)
)
{
return
entry
;
}
return
nullptr
;
}
}
}
