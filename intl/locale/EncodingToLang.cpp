#
include
"
mozilla
/
intl
/
EncodingToLang
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsLanguageAtomService
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
intl
;
const
mozilla
:
:
NotNull
<
const
mozilla
:
:
Encoding
*
>
*
EncodingToLang
:
:
kEncodingsByRoughFrequency
[
]
=
{
#
define
_
(
encoding
lang
)
&
encoding
#
include
"
EncodingsByFrequency
.
inc
"
#
undef
_
}
;
nsAtom
*
EncodingToLang
:
:
sLangs
[
]
=
{
#
define
_
(
encoding
lang
)
lang
#
include
"
EncodingsByFrequency
.
inc
"
#
undef
_
}
;
nsAtom
*
EncodingToLang
:
:
Lookup
(
NotNull
<
const
mozilla
:
:
Encoding
*
>
aEncoding
)
{
unsigned
int
i
=
0
;
for
(
;
i
<
std
:
:
size
(
kEncodingsByRoughFrequency
)
;
i
+
+
)
{
if
(
*
kEncodingsByRoughFrequency
[
i
]
=
=
aEncoding
)
{
return
sLangs
[
i
]
;
}
}
MOZ_ASSERT
(
false
"
The
encoding
is
always
supposed
to
be
found
in
the
array
"
)
;
return
sLangs
[
0
]
;
}
void
EncodingToLang
:
:
Initialize
(
)
{
sLangs
[
0
]
=
nsLanguageAtomService
:
:
GetService
(
)
-
>
GetLocaleLanguage
(
)
;
NS_ADDREF
(
sLangs
[
0
]
)
;
for
(
size_t
i
=
1
;
i
<
std
:
:
size
(
sLangs
)
;
+
+
i
)
{
if
(
!
sLangs
[
i
]
)
{
sLangs
[
i
]
=
sLangs
[
0
]
;
}
}
}
void
EncodingToLang
:
:
Shutdown
(
)
{
NS_RELEASE
(
sLangs
[
0
]
)
;
}
