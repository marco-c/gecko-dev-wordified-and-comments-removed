#
ifndef
mozilla_intl_AppDateTimeFormat_h
#
define
mozilla_intl_AppDateTimeFormat_h
#
include
<
time
.
h
>
#
include
"
gtest
/
MozGtestFriend
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsString
.
h
"
#
include
"
prtime
.
h
"
#
include
"
mozilla
/
intl
/
DateTimeFormat
.
h
"
namespace
mozilla
:
:
intl
{
class
AppDateTimeFormat
{
public
:
static
nsresult
Format
(
const
DateTimeFormat
:
:
StyleBag
&
aStyle
const
PRTime
aPrTime
nsAString
&
aStringOut
)
;
static
nsresult
Format
(
const
DateTimeFormat
:
:
StyleBag
&
aStyle
const
PRExplodedTime
*
aExplodedTime
nsAString
&
aStringOut
)
;
static
nsresult
Format
(
const
DateTimeFormat
:
:
ComponentsBag
&
aComponents
const
PRExplodedTime
*
aExplodedTime
nsAString
&
aStringOut
)
;
static
void
Shutdown
(
)
;
private
:
AppDateTimeFormat
(
)
=
delete
;
static
nsresult
Initialize
(
)
;
static
void
DeleteCache
(
)
;
static
const
size_t
kMaxCachedFormats
=
15
;
FRIEND_TEST
(
AppDateTimeFormat
FormatPRExplodedTime
)
;
FRIEND_TEST
(
AppDateTimeFormat
DateFormatSelectors
)
;
FRIEND_TEST
(
AppDateTimeFormat
FormatPRExplodedTimeForeign
)
;
FRIEND_TEST
(
AppDateTimeFormat
DateFormatSelectorsForeign
)
;
static
nsresult
Format
(
const
DateTimeFormat
:
:
StyleBag
&
aStyle
const
double
aUnixEpoch
const
PRTimeParameters
*
aTimeParameters
nsAString
&
aStringOut
)
;
static
void
BuildTimeZoneString
(
const
PRTimeParameters
&
aTimeParameters
nsAString
&
aStringOut
)
;
static
nsCString
*
sLocale
;
static
nsTHashMap
<
nsCStringHashKey
DateTimeFormat
*
>
*
sFormatCache
;
}
;
}
#
endif
