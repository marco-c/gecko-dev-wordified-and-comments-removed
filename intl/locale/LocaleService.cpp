#
include
"
LocaleService
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIToolkitChromeRegistry
.
h
"
using
namespace
mozilla
:
:
intl
;
static
void
ReadAppLocales
(
nsTArray
<
nsCString
>
&
aRetVal
)
{
nsAutoCString
uaLangTag
;
nsCOMPtr
<
nsIToolkitChromeRegistry
>
cr
=
mozilla
:
:
services
:
:
GetToolkitChromeRegistryService
(
)
;
if
(
cr
)
{
cr
-
>
GetSelectedLocale
(
NS_LITERAL_CSTRING
(
"
global
"
)
true
uaLangTag
)
;
}
if
(
!
uaLangTag
.
IsEmpty
(
)
)
{
aRetVal
.
AppendElement
(
uaLangTag
)
;
}
if
(
!
uaLangTag
.
EqualsLiteral
(
"
en
-
US
"
)
)
{
aRetVal
.
AppendElement
(
NS_LITERAL_CSTRING
(
"
en
-
US
"
)
)
;
}
}
mozilla
:
:
StaticAutoPtr
<
LocaleService
>
LocaleService
:
:
sInstance
;
LocaleService
*
LocaleService
:
:
GetInstance
(
)
{
if
(
!
sInstance
)
{
sInstance
=
new
LocaleService
(
)
;
ClearOnShutdown
(
&
sInstance
)
;
}
return
sInstance
;
}
void
LocaleService
:
:
GetAppLocales
(
nsTArray
<
nsCString
>
&
aRetVal
)
{
if
(
mAppLocales
.
IsEmpty
(
)
)
{
ReadAppLocales
(
mAppLocales
)
;
}
aRetVal
=
mAppLocales
;
}
void
LocaleService
:
:
GetAppLocale
(
nsACString
&
aRetVal
)
{
if
(
mAppLocales
.
IsEmpty
(
)
)
{
ReadAppLocales
(
mAppLocales
)
;
}
aRetVal
=
mAppLocales
[
0
]
;
}
void
LocaleService
:
:
Refresh
(
)
{
nsTArray
<
nsCString
>
newLocales
;
ReadAppLocales
(
newLocales
)
;
if
(
mAppLocales
!
=
newLocales
)
{
mAppLocales
=
Move
(
newLocales
)
;
nsCOMPtr
<
nsIObserverService
>
obs
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
NotifyObservers
(
nullptr
"
intl
:
app
-
locales
-
changed
"
nullptr
)
;
}
}
}
