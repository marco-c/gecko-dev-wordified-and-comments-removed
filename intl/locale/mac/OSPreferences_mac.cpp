#
include
"
OSPreferences
.
h
"
#
include
"
mozilla
/
intl
/
LocaleService
.
h
"
#
include
<
Carbon
/
Carbon
.
h
>
using
namespace
mozilla
:
:
intl
;
bool
OSPreferences
:
:
ReadSystemLocales
(
nsTArray
<
nsCString
>
&
aLocaleList
)
{
MOZ_ASSERT
(
aLocaleList
.
IsEmpty
(
)
)
;
CFLocaleRef
userLocaleRef
=
:
:
CFLocaleCopyCurrent
(
)
;
CFStringRef
userLocaleStr
=
:
:
CFLocaleGetIdentifier
(
userLocaleRef
)
;
AutoTArray
<
UniChar
32
>
buffer
;
int
size
=
:
:
CFStringGetLength
(
userLocaleStr
)
;
buffer
.
SetLength
(
size
)
;
CFRange
range
=
:
:
CFRangeMake
(
0
size
)
;
:
:
CFStringGetCharacters
(
userLocaleStr
range
buffer
.
Elements
(
)
)
;
NS_LossyConvertUTF16toASCII
locale
(
reinterpret_cast
<
const
char16_t
*
>
(
buffer
.
Elements
(
)
)
buffer
.
Length
(
)
)
;
CFRelease
(
userLocaleRef
)
;
if
(
CanonicalizeLanguageTag
(
locale
)
)
{
aLocaleList
.
AppendElement
(
locale
)
;
return
true
;
}
return
false
;
}
static
CFDateFormatterStyle
ToCFDateFormatterStyle
(
OSPreferences
:
:
DateTimeFormatStyle
aFormatStyle
)
{
switch
(
aFormatStyle
)
{
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
None
:
return
kCFDateFormatterNoStyle
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Short
:
return
kCFDateFormatterShortStyle
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Medium
:
return
kCFDateFormatterMediumStyle
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Long
:
return
kCFDateFormatterLongStyle
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Full
:
return
kCFDateFormatterFullStyle
;
case
OSPreferences
:
:
DateTimeFormatStyle
:
:
Invalid
:
MOZ_ASSERT_UNREACHABLE
(
"
invalid
time
format
"
)
;
return
kCFDateFormatterNoStyle
;
}
}
static
CFLocaleRef
CreateCFLocaleFor
(
const
nsACString
&
aLocale
)
{
nsAutoCString
reqLocale
;
nsAutoCString
systemLocale
;
OSPreferences
:
:
GetInstance
(
)
-
>
GetSystemLocale
(
systemLocale
)
;
if
(
aLocale
.
IsEmpty
(
)
)
{
LocaleService
:
:
GetInstance
(
)
-
>
GetAppLocaleAsBCP47
(
reqLocale
)
;
}
else
{
reqLocale
.
Assign
(
aLocale
)
;
}
bool
match
=
LocaleService
:
:
LanguagesMatch
(
reqLocale
systemLocale
)
;
if
(
match
)
{
return
:
:
CFLocaleCopyCurrent
(
)
;
}
CFStringRef
identifier
=
CFStringCreateWithBytesNoCopy
(
kCFAllocatorDefault
(
const
uint8_t
*
)
reqLocale
.
BeginReading
(
)
reqLocale
.
Length
(
)
kCFStringEncodingASCII
false
kCFAllocatorNull
)
;
if
(
!
identifier
)
{
return
nullptr
;
}
CFLocaleRef
locale
=
CFLocaleCreate
(
kCFAllocatorDefault
identifier
)
;
CFRelease
(
identifier
)
;
return
locale
;
}
bool
OSPreferences
:
:
ReadDateTimePattern
(
DateTimeFormatStyle
aDateStyle
DateTimeFormatStyle
aTimeStyle
const
nsACString
&
aLocale
nsAString
&
aRetVal
)
{
CFLocaleRef
locale
=
CreateCFLocaleFor
(
aLocale
)
;
if
(
!
locale
)
{
return
false
;
}
CFDateFormatterRef
formatter
=
CFDateFormatterCreate
(
kCFAllocatorDefault
locale
ToCFDateFormatterStyle
(
aDateStyle
)
ToCFDateFormatterStyle
(
aTimeStyle
)
)
;
CFStringRef
format
=
CFDateFormatterGetFormat
(
formatter
)
;
CFRelease
(
locale
)
;
CFRange
range
=
CFRangeMake
(
0
CFStringGetLength
(
format
)
)
;
aRetVal
.
SetLength
(
range
.
length
)
;
CFStringGetCharacters
(
format
range
reinterpret_cast
<
UniChar
*
>
(
aRetVal
.
BeginWriting
(
)
)
)
;
CFRelease
(
formatter
)
;
return
true
;
}
