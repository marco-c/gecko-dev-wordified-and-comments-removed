#
include
<
locale
.
h
>
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsIPlatformCharset
.
h
"
#
include
"
nsUConvPropertySearch
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
if
HAVE_GNU_LIBC_VERSION_H
#
include
<
gnu
/
libc
-
version
.
h
>
#
endif
#
ifdef
HAVE_NL_TYPES_H
#
include
<
nl_types
.
h
>
#
endif
#
if
HAVE_LANGINFO_CODESET
#
include
<
langinfo
.
h
>
#
endif
#
include
"
nsPlatformCharset
.
h
"
#
include
"
prinit
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
using
namespace
mozilla
;
static
constexpr
nsUConvProp
kUnixCharsets
[
]
=
{
#
include
"
unixcharset
.
properties
.
h
"
}
;
NS_IMPL_ISUPPORTS
(
nsPlatformCharset
nsIPlatformCharset
)
nsPlatformCharset
:
:
nsPlatformCharset
(
)
{
}
static
nsresult
ConvertLocaleToCharsetUsingDeprecatedConfig
(
const
nsACString
&
locale
nsACString
&
oResult
)
{
if
(
!
(
locale
.
IsEmpty
(
)
)
)
{
if
(
NS_SUCCEEDED
(
nsUConvPropertySearch
:
:
SearchPropertyValue
(
kUnixCharsets
ArrayLength
(
kUnixCharsets
)
locale
oResult
)
)
)
{
return
NS_OK
;
}
}
NS_ERROR
(
"
unable
to
convert
locale
to
charset
using
deprecated
config
"
)
;
oResult
.
AssignLiteral
(
"
ISO
-
8859
-
1
"
)
;
return
NS_SUCCESS_USING_FALLBACK_LOCALE
;
}
nsPlatformCharset
:
:
~
nsPlatformCharset
(
)
{
}
NS_IMETHODIMP
nsPlatformCharset
:
:
GetCharset
(
nsPlatformCharsetSel
selector
nsACString
&
oResult
)
{
oResult
=
mCharset
;
return
NS_OK
;
}
nsresult
nsPlatformCharset
:
:
InitGetCharset
(
nsACString
&
oString
)
{
#
if
HAVE_LANGINFO_CODESET
char
*
nl_langinfo_codeset
=
nullptr
;
nsCString
aCharset
;
nsresult
res
;
nl_langinfo_codeset
=
nl_langinfo
(
CODESET
)
;
NS_ASSERTION
(
nl_langinfo_codeset
"
cannot
get
nl_langinfo
(
CODESET
)
"
)
;
if
(
nl_langinfo_codeset
)
{
aCharset
.
Assign
(
nl_langinfo_codeset
)
;
res
=
VerifyCharset
(
aCharset
)
;
if
(
NS_SUCCEEDED
(
res
)
)
{
oString
=
aCharset
;
return
res
;
}
}
NS_ERROR
(
"
unable
to
use
nl_langinfo
(
CODESET
)
"
)
;
#
endif
char
*
locale
=
setlocale
(
LC_CTYPE
nullptr
)
;
nsAutoCString
localeStr
;
localeStr
.
Assign
(
locale
)
;
return
ConvertLocaleToCharsetUsingDeprecatedConfig
(
localeStr
oString
)
;
}
NS_IMETHODIMP
nsPlatformCharset
:
:
Init
(
)
{
char
*
locale
=
setlocale
(
LC_CTYPE
nullptr
)
;
NS_ASSERTION
(
locale
"
cannot
setlocale
"
)
;
if
(
locale
)
{
CopyASCIItoUTF16
(
locale
mLocale
)
;
}
else
{
mLocale
.
AssignLiteral
(
"
en_US
"
)
;
}
return
InitGetCharset
(
mCharset
)
;
}
nsresult
nsPlatformCharset
:
:
VerifyCharset
(
nsCString
&
aCharset
)
{
if
(
aCharset
.
EqualsLiteral
(
"
UTF
-
8
"
)
)
{
return
NS_OK
;
}
const
Encoding
*
encoding
=
Encoding
:
:
ForLabelNoReplacement
(
aCharset
)
;
if
(
!
encoding
)
{
return
NS_ERROR_UCONV_NOCONV
;
}
encoding
-
>
Name
(
aCharset
)
;
return
NS_OK
;
}
