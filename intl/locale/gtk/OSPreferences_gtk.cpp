#
include
<
locale
.
h
>
#
include
"
mozilla
/
intl
/
Locale
.
h
"
#
include
"
OSPreferences
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsIGSettingsService
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
intl
;
OSPreferences
:
:
OSPreferences
(
)
=
default
;
bool
OSPreferences
:
:
ReadSystemLocales
(
nsTArray
<
nsCString
>
&
aLocaleList
)
{
MOZ_ASSERT
(
aLocaleList
.
IsEmpty
(
)
)
;
nsAutoCString
defaultLang
(
Locale
:
:
GetDefaultLocale
(
)
)
;
if
(
CanonicalizeLanguageTag
(
defaultLang
)
)
{
aLocaleList
.
AppendElement
(
defaultLang
)
;
return
true
;
}
return
false
;
}
bool
OSPreferences
:
:
ReadRegionalPrefsLocales
(
nsTArray
<
nsCString
>
&
aLocaleList
)
{
MOZ_ASSERT
(
aLocaleList
.
IsEmpty
(
)
)
;
nsAutoCString
localeStr
(
setlocale
(
LC_TIME
nullptr
)
)
;
if
(
CanonicalizeLanguageTag
(
localeStr
)
)
{
aLocaleList
.
AppendElement
(
localeStr
)
;
return
true
;
}
return
false
;
}
static
int
HourCycle
(
)
{
nsCOMPtr
<
nsIGSettingsService
>
gsettings
=
do_GetService
(
NS_GSETTINGSSERVICE_CONTRACTID
)
;
if
(
!
gsettings
)
{
return
0
;
}
nsCOMPtr
<
nsIGSettingsCollection
>
desktop_settings
;
gsettings
-
>
GetCollectionForSchema
(
"
org
.
gnome
.
desktop
.
interface
"
_ns
getter_AddRefs
(
desktop_settings
)
)
;
if
(
!
desktop_settings
)
{
return
0
;
}
nsAutoCString
result
;
desktop_settings
-
>
GetString
(
"
clock
-
format
"
_ns
result
)
;
if
(
result
=
=
"
12h
"
)
{
return
12
;
}
if
(
result
=
=
"
24h
"
)
{
return
24
;
}
return
0
;
}
bool
OSPreferences
:
:
ReadDateTimePattern
(
DateTimeFormatStyle
aDateStyle
DateTimeFormatStyle
aTimeStyle
const
nsACString
&
aLocale
nsACString
&
aRetVal
)
{
nsAutoCString
skeleton
;
if
(
!
GetDateTimeSkeletonForStyle
(
aDateStyle
aTimeStyle
aLocale
skeleton
)
)
{
return
false
;
}
int
hourCycle
=
HourCycle
(
)
;
if
(
hourCycle
=
=
12
|
|
hourCycle
=
=
24
)
{
OverrideSkeletonHourCycle
(
hourCycle
=
=
24
skeleton
)
;
}
if
(
!
GetPatternForSkeleton
(
skeleton
aLocale
aRetVal
)
)
{
return
false
;
}
return
true
;
}
void
OSPreferences
:
:
RemoveObservers
(
)
{
}
