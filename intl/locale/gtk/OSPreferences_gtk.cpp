#
include
<
locale
.
h
>
#
include
"
OSPreferences
.
h
"
#
include
"
dlfcn
.
h
"
#
include
"
glib
.
h
"
#
include
"
gio
/
gio
.
h
"
#
include
"
unicode
/
uloc
.
h
"
using
namespace
mozilla
:
:
intl
;
OSPreferences
:
:
OSPreferences
(
)
=
default
;
OSPreferences
:
:
~
OSPreferences
(
)
=
default
;
bool
OSPreferences
:
:
ReadSystemLocales
(
nsTArray
<
nsCString
>
&
aLocaleList
)
{
MOZ_ASSERT
(
aLocaleList
.
IsEmpty
(
)
)
;
nsAutoCString
defaultLang
(
uloc_getDefault
(
)
)
;
if
(
CanonicalizeLanguageTag
(
defaultLang
)
)
{
aLocaleList
.
AppendElement
(
defaultLang
)
;
return
true
;
}
return
false
;
}
bool
OSPreferences
:
:
ReadRegionalPrefsLocales
(
nsTArray
<
nsCString
>
&
aLocaleList
)
{
MOZ_ASSERT
(
aLocaleList
.
IsEmpty
(
)
)
;
nsAutoCString
localeStr
(
setlocale
(
LC_TIME
nullptr
)
)
;
if
(
CanonicalizeLanguageTag
(
localeStr
)
)
{
aLocaleList
.
AppendElement
(
localeStr
)
;
return
true
;
}
return
false
;
}
typedef
GVariant
*
(
*
get_value_fn_t
)
(
GSettings
*
const
gchar
*
)
;
static
get_value_fn_t
FindGetValueFunction
(
)
{
get_value_fn_t
fn
=
reinterpret_cast
<
get_value_fn_t
>
(
dlsym
(
RTLD_DEFAULT
"
g_settings_get_user_value
"
)
)
;
return
fn
?
fn
:
&
g_settings_get_value
;
}
static
int
HourCycle
(
)
{
int
rval
=
0
;
const
char
*
schema
;
const
char
*
key
;
const
char
*
env
=
getenv
(
"
XDG_CURRENT_DESKTOP
"
)
;
if
(
env
&
&
strcmp
(
env
"
Unity
"
)
=
=
0
)
{
schema
=
"
com
.
canonical
.
indicator
.
datetime
"
;
key
=
"
time
-
format
"
;
}
else
{
schema
=
"
org
.
gnome
.
desktop
.
interface
"
;
key
=
"
clock
-
format
"
;
}
const
char
*
const
*
schemas
=
g_settings_list_schemas
(
)
;
GSettings
*
settings
=
nullptr
;
for
(
uint32_t
i
=
0
;
schemas
[
i
]
!
=
nullptr
;
i
+
+
)
{
if
(
strcmp
(
schemas
[
i
]
schema
)
=
=
0
)
{
settings
=
g_settings_new
(
schema
)
;
break
;
}
}
if
(
settings
)
{
static
get_value_fn_t
sGetValueFunction
=
FindGetValueFunction
(
)
;
GVariant
*
value
=
sGetValueFunction
(
settings
key
)
;
if
(
value
)
{
if
(
g_variant_is_of_type
(
value
G_VARIANT_TYPE_STRING
)
)
{
const
char
*
strVal
=
g_variant_get_string
(
value
nullptr
)
;
if
(
strncmp
(
"
12
"
strVal
2
)
=
=
0
)
{
rval
=
12
;
}
else
if
(
strncmp
(
"
24
"
strVal
2
)
=
=
0
)
{
rval
=
24
;
}
}
g_variant_unref
(
value
)
;
}
g_object_unref
(
settings
)
;
}
return
rval
;
}
bool
OSPreferences
:
:
ReadDateTimePattern
(
DateTimeFormatStyle
aDateStyle
DateTimeFormatStyle
aTimeStyle
const
nsACString
&
aLocale
nsACString
&
aRetVal
)
{
nsAutoCString
skeleton
;
if
(
!
GetDateTimeSkeletonForStyle
(
aDateStyle
aTimeStyle
aLocale
skeleton
)
)
{
return
false
;
}
switch
(
HourCycle
(
)
)
{
case
12
:
{
if
(
skeleton
.
FindChar
(
'
H
'
)
=
=
-
1
&
&
skeleton
.
FindChar
(
'
k
'
)
=
=
-
1
)
{
break
;
}
bool
foundA
=
false
;
for
(
size_t
i
=
0
;
i
<
skeleton
.
Length
(
)
;
+
+
i
)
{
switch
(
skeleton
[
i
]
)
{
case
'
a
'
:
foundA
=
true
;
break
;
case
'
H
'
:
skeleton
.
SetCharAt
(
'
h
'
i
)
;
break
;
case
'
k
'
:
skeleton
.
SetCharAt
(
'
K
'
i
)
;
break
;
}
}
if
(
!
foundA
)
{
skeleton
.
Append
(
char16_t
(
'
a
'
)
)
;
}
break
;
}
case
24
:
if
(
skeleton
.
FindChar
(
'
h
'
)
=
=
-
1
&
&
skeleton
.
FindChar
(
'
K
'
)
=
=
-
1
)
{
break
;
}
for
(
int32_t
i
=
0
;
i
<
int32_t
(
skeleton
.
Length
(
)
)
;
+
+
i
)
{
switch
(
skeleton
[
i
]
)
{
case
'
a
'
:
skeleton
.
Cut
(
i
1
)
;
-
-
i
;
break
;
case
'
h
'
:
skeleton
.
SetCharAt
(
'
H
'
i
)
;
break
;
case
'
K
'
:
skeleton
.
SetCharAt
(
'
k
'
i
)
;
break
;
}
}
break
;
}
if
(
!
GetPatternForSkeleton
(
skeleton
aLocale
aRetVal
)
)
{
return
false
;
}
return
true
;
}
