#
include
<
locale
.
h
>
#
include
"
OSPreferences
.
h
"
#
include
"
unicode
/
uloc
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsIGSettingsService
.
h
"
using
namespace
mozilla
:
:
intl
;
OSPreferences
:
:
OSPreferences
(
)
=
default
;
bool
OSPreferences
:
:
ReadSystemLocales
(
nsTArray
<
nsCString
>
&
aLocaleList
)
{
MOZ_ASSERT
(
aLocaleList
.
IsEmpty
(
)
)
;
nsAutoCString
defaultLang
(
uloc_getDefault
(
)
)
;
if
(
CanonicalizeLanguageTag
(
defaultLang
)
)
{
aLocaleList
.
AppendElement
(
defaultLang
)
;
return
true
;
}
return
false
;
}
bool
OSPreferences
:
:
ReadRegionalPrefsLocales
(
nsTArray
<
nsCString
>
&
aLocaleList
)
{
MOZ_ASSERT
(
aLocaleList
.
IsEmpty
(
)
)
;
nsAutoCString
localeStr
(
setlocale
(
LC_TIME
nullptr
)
)
;
if
(
CanonicalizeLanguageTag
(
localeStr
)
)
{
aLocaleList
.
AppendElement
(
localeStr
)
;
return
true
;
}
return
false
;
}
static
int
HourCycle
(
)
{
int
rval
=
0
;
nsAutoCString
schema
;
nsAutoCString
key
;
const
char
*
env
=
getenv
(
"
XDG_CURRENT_DESKTOP
"
)
;
if
(
env
&
&
strcmp
(
env
"
Unity
"
)
=
=
0
)
{
schema
=
"
com
.
canonical
.
indicator
.
datetime
"
;
key
=
"
time
-
format
"
;
}
else
{
schema
=
"
org
.
gnome
.
desktop
.
interface
"
;
key
=
"
clock
-
format
"
;
}
nsCOMPtr
<
nsIGSettingsService
>
gsettings
=
do_GetService
(
NS_GSETTINGSSERVICE_CONTRACTID
)
;
nsCOMPtr
<
nsIGSettingsCollection
>
desktop_settings
;
if
(
gsettings
)
{
gsettings
-
>
GetCollectionForSchema
(
schema
getter_AddRefs
(
desktop_settings
)
)
;
if
(
desktop_settings
)
{
nsAutoCString
result
;
desktop_settings
-
>
GetString
(
key
result
)
;
if
(
result
=
=
"
12h
"
)
{
rval
=
12
;
}
else
if
(
result
=
=
"
24h
"
)
{
rval
=
24
;
}
}
}
return
rval
;
}
bool
OSPreferences
:
:
ReadDateTimePattern
(
DateTimeFormatStyle
aDateStyle
DateTimeFormatStyle
aTimeStyle
const
nsACString
&
aLocale
nsACString
&
aRetVal
)
{
nsAutoCString
skeleton
;
if
(
!
GetDateTimeSkeletonForStyle
(
aDateStyle
aTimeStyle
aLocale
skeleton
)
)
{
return
false
;
}
switch
(
HourCycle
(
)
)
{
case
12
:
{
if
(
skeleton
.
FindChar
(
'
H
'
)
=
=
-
1
&
&
skeleton
.
FindChar
(
'
k
'
)
=
=
-
1
)
{
break
;
}
bool
foundA
=
false
;
for
(
size_t
i
=
0
;
i
<
skeleton
.
Length
(
)
;
+
+
i
)
{
switch
(
skeleton
[
i
]
)
{
case
'
a
'
:
foundA
=
true
;
break
;
case
'
H
'
:
skeleton
.
SetCharAt
(
'
h
'
i
)
;
break
;
case
'
k
'
:
skeleton
.
SetCharAt
(
'
K
'
i
)
;
break
;
}
}
if
(
!
foundA
)
{
skeleton
.
Append
(
char16_t
(
'
a
'
)
)
;
}
break
;
}
case
24
:
if
(
skeleton
.
FindChar
(
'
h
'
)
=
=
-
1
&
&
skeleton
.
FindChar
(
'
K
'
)
=
=
-
1
)
{
break
;
}
for
(
int32_t
i
=
0
;
i
<
int32_t
(
skeleton
.
Length
(
)
)
;
+
+
i
)
{
switch
(
skeleton
[
i
]
)
{
case
'
a
'
:
skeleton
.
Cut
(
i
1
)
;
-
-
i
;
break
;
case
'
h
'
:
skeleton
.
SetCharAt
(
'
H
'
i
)
;
break
;
case
'
K
'
:
skeleton
.
SetCharAt
(
'
k
'
i
)
;
break
;
}
}
break
;
}
if
(
!
GetPatternForSkeleton
(
skeleton
aLocale
aRetVal
)
)
{
return
false
;
}
return
true
;
}
void
OSPreferences
:
:
RemoveObservers
(
)
{
}
