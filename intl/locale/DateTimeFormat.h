#
ifndef
mozilla_DateTimeFormat_h
#
define
mozilla_DateTimeFormat_h
#
include
<
time
.
h
>
#
include
"
nsIScriptableDateFormat
.
h
"
#
include
"
nsStringGlue
.
h
"
#
include
"
prtime
.
h
"
#
ifndef
ENABLE_INTL_API
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIUnicodeDecoder
.
h
"
#
endif
namespace
mozilla
{
class
DateTimeFormat
{
public
:
static
nsresult
FormatTime
(
const
nsDateFormatSelector
aDateFormatSelector
const
nsTimeFormatSelector
aTimeFormatSelector
const
time_t
aTimetTime
nsAString
&
aStringOut
)
;
static
nsresult
FormatPRTime
(
const
nsDateFormatSelector
aDateFormatSelector
const
nsTimeFormatSelector
aTimeFormatSelector
const
PRTime
aPrTime
nsAString
&
aStringOut
)
;
static
nsresult
FormatPRExplodedTime
(
const
nsDateFormatSelector
aDateFormatSelector
const
nsTimeFormatSelector
aTimeFormatSelector
const
PRExplodedTime
*
aExplodedTime
nsAString
&
aStringOut
)
;
static
void
Shutdown
(
)
;
private
:
DateTimeFormat
(
)
=
delete
;
static
nsresult
Initialize
(
)
;
#
ifdef
ENABLE_INTL_API
static
nsCString
*
mLocale
;
#
else
static
nsresult
FormatTMTime
(
const
nsDateFormatSelector
aDateFormatSelector
const
nsTimeFormatSelector
aTimeFormatSelector
const
struct
tm
*
aTmTime
nsAString
&
aStringOut
)
;
static
void
LocalePreferred24hour
(
)
;
static
bool
mLocalePreferred24hour
;
static
bool
mLocaleAMPMfirst
;
static
nsCOMPtr
<
nsIUnicodeDecoder
>
mDecoder
;
#
endif
}
;
}
#
endif
