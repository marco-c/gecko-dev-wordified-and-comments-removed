#
ifndef
mozilla_intl_MozLocale_h__
#
define
mozilla_intl_MozLocale_h__
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
MozLocaleBindings
.
h
"
namespace
mozilla
{
namespace
intl
{
class
MozLocale
{
public
:
explicit
MozLocale
(
const
nsACString
&
aLocale
)
;
explicit
MozLocale
(
const
char
*
aLocale
)
:
MozLocale
(
nsDependentCString
(
aLocale
)
)
{
}
;
const
nsDependentCSubstring
GetLanguage
(
)
const
;
const
nsDependentCSubstring
GetScript
(
)
const
;
const
nsDependentCSubstring
GetRegion
(
)
const
;
void
GetVariants
(
nsTArray
<
nsCString
>
&
aRetVal
)
const
;
bool
IsWellFormed
(
)
const
{
return
mIsWellFormed
;
}
const
nsCString
AsString
(
)
const
;
bool
Matches
(
const
MozLocale
&
aOther
bool
aThisRange
bool
aOtherRange
)
const
;
bool
Maximize
(
)
;
void
ClearVariants
(
)
;
void
ClearRegion
(
)
;
void
Invalidate
(
)
{
mIsWellFormed
=
false
;
}
bool
operator
=
=
(
const
MozLocale
&
aOther
)
{
return
Matches
(
aOther
false
false
)
;
}
MozLocale
(
MozLocale
&
&
aOther
)
:
mIsWellFormed
(
aOther
.
mIsWellFormed
)
mRaw
(
std
:
:
move
(
aOther
.
mRaw
)
)
{
}
ffi
:
:
LanguageIdentifier
*
Raw
(
)
{
return
mRaw
.
get
(
)
;
}
const
ffi
:
:
LanguageIdentifier
*
Raw
(
)
const
{
return
mRaw
.
get
(
)
;
}
private
:
bool
mIsWellFormed
;
UniquePtr
<
ffi
:
:
LanguageIdentifier
>
mRaw
;
}
;
}
}
MOZ_DECLARE_RELOCATE_USING_MOVE_CONSTRUCTOR
(
mozilla
:
:
intl
:
:
MozLocale
)
#
endif
