var
EXPORTED_SYMBOLS
=
[
"
setupFakeLangpacks
"
]
;
const
{
AddonTestUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
AddonTestUtils
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
OS
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
async
function
setupFakeLangpacks
(
testEnv
SpecialPowers
)
{
function
create
(
options
)
{
const
{
locale
propertiesFiles
}
=
options
;
const
xpiFiles
=
{
"
manifest
.
json
"
:
getManifestData
(
locale
propertiesFiles
)
}
;
for
(
const
{
rootURL
files
}
of
propertiesFiles
|
|
[
]
)
{
const
slug
=
getChromeUrlSlug
(
rootURL
)
;
const
fakePath
=
getFakeXPIPath
(
slug
)
;
for
(
const
[
name
contents
]
of
Object
.
entries
(
files
)
)
{
xpiFiles
[
OS
.
Path
.
join
(
fakePath
name
)
]
=
contents
;
}
}
return
AddonTestUtils
.
createTempXPIFile
(
xpiFiles
)
;
}
function
install
(
options
)
{
testEnv
.
info
(
Installing
the
{
options
.
locale
}
langpack
)
;
return
AddonTestUtils
.
promiseInstallFile
(
create
(
options
)
)
;
}
AddonTestUtils
.
initMochitest
(
testEnv
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
extensions
.
langpacks
.
signatures
.
required
"
false
]
]
}
)
;
return
{
install
create
}
;
}
function
getChromeUrlSlug
(
url
)
{
const
result
=
/
^
chrome
:
\
/
\
/
(
\
w
+
)
\
/
locale
\
/
?
/
.
exec
(
url
)
;
if
(
!
result
)
{
throw
new
Error
(
'
Expected
the
properties
file
\
'
s
chrome
URL
to
take
the
form
:
"
chrome
:
/
/
slug
/
locale
"
:
'
+
JSON
.
stringify
(
url
)
)
;
}
return
result
[
1
]
;
}
function
getManifestData
(
locale
propertiesFiles
)
{
const
chrome_resources
=
{
}
;
for
(
const
{
rootURL
}
of
propertiesFiles
)
{
const
slug
=
getChromeUrlSlug
(
rootURL
)
;
chrome_resources
[
slug
]
=
getFakeXPIPath
(
slug
)
+
"
/
"
;
}
return
{
langpack_id
:
locale
name
:
{
locale
}
Language
Pack
description
:
{
locale
}
Language
pack
languages
:
{
[
locale
]
:
{
chrome_resources
version
:
"
1
"
}
}
applications
:
{
gecko
:
{
strict_min_version
:
AppConstants
.
MOZ_APP_VERSION
id
:
langpack
-
{
locale
}
firefox
.
mozilla
.
org
strict_max_version
:
AppConstants
.
MOZ_APP_VERSION
}
}
version
:
"
2
.
0
"
manifest_version
:
2
sources
:
{
browser
:
{
base_path
:
"
browser
/
"
}
}
author
:
"
Mozilla
"
}
;
}
function
getFakeXPIPath
(
rootSlug
)
{
return
fake
-
{
rootSlug
}
;
}
