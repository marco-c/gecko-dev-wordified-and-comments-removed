#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
intl
/
OSPreferences
.
h
"
using
namespace
mozilla
:
:
intl
;
TEST
(
Intl_Locale_OSPreferences
GetSystemLocales
)
{
nsTArray
<
nsCString
>
systemLocales
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
OSPreferences
:
:
GetInstance
(
)
-
>
GetSystemLocales
(
systemLocales
)
)
)
;
ASSERT_FALSE
(
systemLocales
.
IsEmpty
(
)
)
;
}
TEST
(
Intl_Locale_OSPreferences
GetRegionalPrefsLocales
)
{
nsTArray
<
nsCString
>
rgLocales
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
OSPreferences
:
:
GetInstance
(
)
-
>
GetRegionalPrefsLocales
(
rgLocales
)
)
)
;
ASSERT_FALSE
(
rgLocales
.
IsEmpty
(
)
)
;
}
TEST
(
Intl_Locale_OSPreferences
GetDateTimePattern
)
{
nsAutoCString
pattern
;
OSPreferences
*
osprefs
=
OSPreferences
:
:
GetInstance
(
)
;
struct
Test
{
int
dateStyle
;
int
timeStyle
;
const
char
*
locale
;
}
;
Test
tests
[
]
=
{
{
0
0
"
"
}
{
1
0
"
pl
"
}
{
2
0
"
de
-
DE
"
}
{
3
0
"
fr
"
}
{
4
0
"
ar
"
}
{
0
1
"
"
}
{
0
2
"
it
"
}
{
0
3
"
"
}
{
0
4
"
ru
"
}
{
4
1
"
"
}
{
3
2
"
cs
"
}
{
2
3
"
"
}
{
1
4
"
ja
"
}
}
;
for
(
unsigned
i
=
0
;
i
<
mozilla
:
:
ArrayLength
(
tests
)
;
i
+
+
)
{
const
Test
&
t
=
tests
[
i
]
;
if
(
NS_SUCCEEDED
(
osprefs
-
>
GetDateTimePattern
(
t
.
dateStyle
t
.
timeStyle
nsDependentCString
(
t
.
locale
)
pattern
)
)
)
{
ASSERT_TRUE
(
(
t
.
dateStyle
=
=
0
&
&
t
.
timeStyle
=
=
0
)
|
|
!
pattern
.
IsEmpty
(
)
)
;
}
}
ASSERT_TRUE
(
1
)
;
}
TEST
(
Intl_Locale_OSPreferences
GetDateTimePatternPrefOverrides
)
{
nsresult
nr
;
nsAutoCString
default_pattern
pattern
;
OSPreferences
*
osprefs
=
OSPreferences
:
:
GetInstance
(
)
;
struct
{
const
char
*
DatePref
;
const
char
*
TimePref
;
int32_t
DateTimeFormatStyle
;
}
configs
[
]
=
{
{
"
intl
.
date_time
.
pattern_override
.
date_short
"
"
intl
.
date_time
.
pattern_override
.
time_short
"
mozIOSPreferences
:
:
dateTimeFormatStyleShort
}
{
"
intl
.
date_time
.
pattern_override
.
date_medium
"
"
intl
.
date_time
.
pattern_override
.
time_medium
"
mozIOSPreferences
:
:
dateTimeFormatStyleMedium
}
{
"
intl
.
date_time
.
pattern_override
.
date_long
"
"
intl
.
date_time
.
pattern_override
.
time_long
"
mozIOSPreferences
:
:
dateTimeFormatStyleLong
}
{
"
intl
.
date_time
.
pattern_override
.
date_full
"
"
intl
.
date_time
.
pattern_override
.
time_full
"
mozIOSPreferences
:
:
dateTimeFormatStyleFull
}
}
;
for
(
const
auto
&
config
:
configs
)
{
nr
=
osprefs
-
>
GetDateTimePattern
(
config
.
DateTimeFormatStyle
mozIOSPreferences
:
:
dateTimeFormatStyleNone
nsDependentCString
(
"
"
)
default_pattern
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
nr
)
)
;
mozilla
:
:
Preferences
:
:
SetCString
(
config
.
DatePref
"
yy
-
MM
"
)
;
nr
=
osprefs
-
>
GetDateTimePattern
(
config
.
DateTimeFormatStyle
mozIOSPreferences
:
:
dateTimeFormatStyleNone
nsDependentCString
(
"
"
)
pattern
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
nr
)
)
;
ASSERT_TRUE
(
pattern
.
EqualsASCII
(
"
yy
-
MM
"
)
)
;
mozilla
:
:
Preferences
:
:
SetCString
(
config
.
TimePref
"
HH
:
mm
"
)
;
nr
=
osprefs
-
>
GetDateTimePattern
(
mozIOSPreferences
:
:
dateTimeFormatStyleNone
config
.
DateTimeFormatStyle
nsDependentCString
(
"
"
)
pattern
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
nr
)
)
;
ASSERT_TRUE
(
pattern
.
EqualsASCII
(
"
HH
:
mm
"
)
)
;
nr
=
osprefs
-
>
GetDateTimePattern
(
config
.
DateTimeFormatStyle
config
.
DateTimeFormatStyle
nsDependentCString
(
"
"
)
pattern
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
nr
)
)
;
ASSERT_TRUE
(
pattern
.
Find
(
"
yy
-
MM
"
)
!
=
kNotFound
)
;
ASSERT_TRUE
(
pattern
.
Find
(
"
HH
:
mm
"
)
!
=
kNotFound
)
;
mozilla
:
:
Preferences
:
:
ClearUser
(
config
.
DatePref
)
;
mozilla
:
:
Preferences
:
:
ClearUser
(
config
.
TimePref
)
;
nr
=
osprefs
-
>
GetDateTimePattern
(
config
.
DateTimeFormatStyle
mozIOSPreferences
:
:
dateTimeFormatStyleNone
nsDependentCString
(
"
"
)
pattern
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
nr
)
)
;
ASSERT_EQ
(
default_pattern
pattern
)
;
}
nr
=
osprefs
-
>
GetDateTimePattern
(
mozIOSPreferences
:
:
dateTimeFormatStyleShort
mozIOSPreferences
:
:
dateTimeFormatStyleShort
nsDependentCString
(
"
"
)
default_pattern
)
;
mozilla
:
:
Preferences
:
:
SetCString
(
"
intl
.
date_time
.
pattern_override
.
date_short
"
"
yyyy
-
MM
-
dd
"
)
;
mozilla
:
:
Preferences
:
:
SetCString
(
"
intl
.
date_time
.
pattern_override
.
time_short
"
"
HH
:
mm
:
ss
"
)
;
mozilla
:
:
Preferences
:
:
SetCString
(
"
intl
.
date_time
.
pattern_override
.
date_time_short
"
"
{
1
}
{
0
}
"
)
;
nr
=
osprefs
-
>
GetDateTimePattern
(
mozIOSPreferences
:
:
dateTimeFormatStyleShort
mozIOSPreferences
:
:
dateTimeFormatStyleShort
nsDependentCString
(
"
"
)
pattern
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
nr
)
)
;
ASSERT_TRUE
(
pattern
.
EqualsASCII
(
"
yyyy
-
MM
-
dd
HH
:
mm
:
ss
"
)
)
;
mozilla
:
:
Preferences
:
:
ClearUser
(
"
intl
.
date_time
.
pattern_override
.
date_short
"
)
;
mozilla
:
:
Preferences
:
:
ClearUser
(
"
intl
.
date_time
.
pattern_override
.
time_short
"
)
;
mozilla
:
:
Preferences
:
:
SetCString
(
"
intl
.
date_time
.
pattern_override
.
date_time_short
"
"
hello
world
!
"
)
;
nr
=
osprefs
-
>
GetDateTimePattern
(
mozIOSPreferences
:
:
dateTimeFormatStyleShort
mozIOSPreferences
:
:
dateTimeFormatStyleShort
nsDependentCString
(
"
"
)
pattern
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
nr
)
)
;
ASSERT_EQ
(
default_pattern
pattern
)
;
mozilla
:
:
Preferences
:
:
ClearUser
(
"
intl
.
date_time
.
pattern_override
.
date_time_short
"
)
;
nr
=
osprefs
-
>
GetDateTimePattern
(
mozIOSPreferences
:
:
dateTimeFormatStyleShort
mozIOSPreferences
:
:
dateTimeFormatStyleShort
nsDependentCString
(
"
"
)
pattern
)
;
ASSERT_TRUE
(
NS_SUCCEEDED
(
nr
)
)
;
ASSERT_EQ
(
default_pattern
pattern
)
;
}
