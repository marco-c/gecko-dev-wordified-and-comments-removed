"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
getAddonAndLocalAPIsMocker
"
]
;
const
{
LangPackMatcher
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LangPackMatcher
.
jsm
"
)
;
function
getAddonAndLocalAPIsMocker
(
testScope
sandbox
)
{
const
{
info
}
=
testScope
;
return
function
mockAddonAndLocaleAPIs
(
{
systemLocale
appLocale
}
)
{
info
(
"
Mocking
LangPackMatcher
.
jsm
APIs
"
)
;
let
resolveLangPacks
;
const
langPackPromise
=
new
Promise
(
resolve
=
>
{
resolveLangPacks
=
availableLangpacks
=
>
{
info
(
Resolving
which
langpacks
are
available
for
download
:
{
JSON
.
stringify
(
availableLangpacks
)
}
)
;
resolve
(
availableLangpacks
.
map
(
locale
=
>
(
{
guid
:
langpack
-
{
locale
}
firefox
.
mozilla
.
org
type
:
"
language
"
target_locale
:
locale
current_compatible_version
:
{
files
:
[
{
platform
:
"
all
"
url
:
http
:
/
/
example
.
com
/
{
locale
}
.
langpack
.
xpi
}
]
}
}
)
)
)
;
}
;
}
)
;
let
resolveInstaller
;
const
installerPromise
=
new
Promise
(
resolve
=
>
{
resolveInstaller
=
(
)
=
>
{
info
(
"
LangPack
install
finished
.
"
)
;
resolve
(
)
;
}
;
}
)
;
const
{
mockable
}
=
LangPackMatcher
;
if
(
appLocale
)
{
sandbox
.
stub
(
mockable
"
getAvailableLocales
"
)
.
returns
(
[
appLocale
]
)
;
sandbox
.
stub
(
mockable
"
getAppLocaleAsBCP47
"
)
.
returns
(
appLocale
)
;
}
if
(
systemLocale
)
{
sandbox
.
stub
(
mockable
"
getSystemLocale
"
)
.
returns
(
systemLocale
)
;
}
sandbox
.
stub
(
mockable
"
getAvailableLangpacks
"
)
.
callsFake
(
(
)
=
>
{
info
(
"
Requesting
which
langpacks
are
available
for
download
"
)
;
return
langPackPromise
;
}
)
;
sandbox
.
stub
(
mockable
"
installLangPack
"
)
.
callsFake
(
langPack
=
>
{
info
(
LangPack
install
started
but
pending
:
{
langPack
.
target_locale
}
)
;
return
installerPromise
;
}
)
;
sandbox
.
stub
(
mockable
"
setRequestedAppLocales
"
)
.
callsFake
(
locales
=
>
{
info
(
Changing
the
browser
'
s
requested
locales
to
:
{
JSON
.
stringify
(
locales
)
}
)
;
}
)
;
return
{
resolveLangPacks
resolveInstaller
mockable
}
;
}
;
}
