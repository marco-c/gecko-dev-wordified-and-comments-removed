#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
intl
/
Segmenter
.
h
"
namespace
mozilla
:
:
intl
{
TEST
(
IntlSegmenter
TestLineBreakIteratorUtf16
)
{
const
SegmenterOptions
options
{
SegmenterGranularity
:
:
Line
}
;
auto
result
=
Segmenter
:
:
TryCreate
(
"
en
"
options
)
;
ASSERT_TRUE
(
result
.
isOk
(
)
)
;
auto
lineSegmenter
=
result
.
unwrap
(
)
;
const
char16_t
text
[
]
=
u
"
hello
world
"
;
UniquePtr
<
SegmentIteratorUtf16
>
segIter
=
lineSegmenter
-
>
Segment
(
MakeStringSpan
(
text
)
)
;
ASSERT_EQ
(
segIter
-
>
Seek
(
5u
)
Some
(
11u
)
)
;
ASSERT_EQ
(
segIter
-
>
Next
(
)
Nothing
(
)
)
;
ASSERT_EQ
(
segIter
-
>
Seek
(
0u
)
Nothing
(
)
)
;
}
TEST
(
IntlSegmenter
TestWordBreakIteratorUtf16
)
{
const
SegmenterOptions
options
{
SegmenterGranularity
:
:
Word
}
;
auto
result
=
Segmenter
:
:
TryCreate
(
"
en
"
options
)
;
ASSERT_TRUE
(
result
.
isOk
(
)
)
;
auto
wordSegmenter
=
result
.
unwrap
(
)
;
const
char16_t
text
[
]
=
u
"
hello
world
"
;
UniquePtr
<
SegmentIteratorUtf16
>
segIter
=
wordSegmenter
-
>
Segment
(
MakeStringSpan
(
text
)
)
;
ASSERT_EQ
(
segIter
-
>
Seek
(
5u
)
Some
(
6u
)
)
;
ASSERT_EQ
(
segIter
-
>
Next
(
)
Some
(
11u
)
)
;
ASSERT_EQ
(
segIter
-
>
Next
(
)
Nothing
(
)
)
;
ASSERT_EQ
(
segIter
-
>
Seek
(
0u
)
Nothing
(
)
)
;
}
TEST
(
IntlSegmenter
TestGraphemeBreakIteratorUtf16
)
{
SegmenterOptions
options
{
SegmenterGranularity
:
:
Grapheme
}
;
auto
result
=
Segmenter
:
:
TryCreate
(
"
en
"
options
)
;
ASSERT_TRUE
(
result
.
isErr
(
)
)
;
}
TEST
(
IntlSegmenter
TestSentenceBreakIteratorUtf16
)
{
SegmenterOptions
options
{
SegmenterGranularity
:
:
Sentence
}
;
auto
result
=
Segmenter
:
:
TryCreate
(
"
en
"
options
)
;
ASSERT_TRUE
(
result
.
isErr
(
)
)
;
}
}
