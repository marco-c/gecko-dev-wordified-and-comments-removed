#
include
"
nsComplexBreaker
.
h
"
#
include
<
algorithm
>
#
include
"
LineBreakCache
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
intl
;
void
ComplexBreaker
:
:
GetBreaks
(
const
char16_t
*
aText
uint32_t
aLength
uint8_t
*
aBreakBefore
)
{
MOZ_DIAGNOSTIC_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
aText
"
aText
shouldn
'
t
be
null
"
)
;
MOZ_ASSERT
(
aLength
"
aLength
shouldn
'
t
be
zero
"
)
;
MOZ_ASSERT
(
aBreakBefore
"
aBreakBefore
shouldn
'
t
be
null
"
)
;
LineBreakCache
:
:
Key
key
{
aText
aLength
}
;
auto
entry
=
LineBreakCache
:
:
Cache
(
)
-
>
Lookup
(
key
)
;
if
(
entry
)
{
auto
&
breakBefore
=
entry
.
Data
(
)
.
mBreaks
;
LineBreakCache
:
:
CopyAndFill
(
breakBefore
aBreakBefore
aBreakBefore
+
aLength
)
;
return
;
}
NS_GetComplexLineBreaks
(
aText
aLength
aBreakBefore
)
;
auto
*
afterLastTrue
=
aBreakBefore
+
aLength
;
while
(
!
*
(
afterLastTrue
-
1
)
)
{
if
(
-
-
afterLastTrue
=
=
aBreakBefore
)
{
break
;
}
}
entry
.
Set
(
LineBreakCache
:
:
Entry
{
nsString
(
aText
aLength
)
nsTArray
<
uint8_t
>
(
aBreakBefore
afterLastTrue
-
aBreakBefore
)
}
)
;
}
