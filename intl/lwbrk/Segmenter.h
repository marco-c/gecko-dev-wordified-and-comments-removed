#
ifndef
intl_components_Segmenter_h_
#
define
intl_components_Segmenter_h_
#
include
"
mozilla
/
intl
/
ICUError
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
:
:
intl
{
enum
class
SegmenterGranularity
:
uint8_t
{
Grapheme
Word
Sentence
Line
}
;
struct
SegmenterOptions
final
{
SegmenterGranularity
mGranularity
=
SegmenterGranularity
:
:
Grapheme
;
}
;
class
SegmentIteratorUtf16
{
public
:
virtual
~
SegmentIteratorUtf16
(
)
=
default
;
SegmentIteratorUtf16
(
SegmentIteratorUtf16
&
&
)
=
delete
;
SegmentIteratorUtf16
&
operator
=
(
SegmentIteratorUtf16
&
&
)
=
delete
;
SegmentIteratorUtf16
(
const
SegmentIteratorUtf16
&
)
=
delete
;
SegmentIteratorUtf16
&
operator
=
(
const
SegmentIteratorUtf16
&
)
=
delete
;
virtual
Maybe
<
uint32_t
>
Next
(
)
=
0
;
virtual
Maybe
<
uint32_t
>
Seek
(
uint32_t
aPos
)
;
protected
:
explicit
SegmentIteratorUtf16
(
Span
<
const
char16_t
>
aText
)
;
Span
<
const
char16_t
>
mText
;
uint32_t
mPos
=
0
;
}
;
enum
class
WordBreakRule
:
uint8_t
{
Normal
=
0
BreakAll
KeepAll
}
;
enum
class
LineBreakRule
:
uint8_t
{
Auto
=
0
Loose
Normal
Strict
Anywhere
}
;
struct
LineBreakOptions
final
{
WordBreakRule
mWordBreakRule
=
WordBreakRule
:
:
Normal
;
LineBreakRule
mLineBreakRule
=
LineBreakRule
:
:
Auto
;
bool
mScriptIsChineseOrJapanese
=
false
;
}
;
class
LineBreakIteratorUtf16
final
:
public
SegmentIteratorUtf16
{
public
:
explicit
LineBreakIteratorUtf16
(
Span
<
const
char16_t
>
aText
const
LineBreakOptions
&
aOptions
=
{
}
)
;
Maybe
<
uint32_t
>
Next
(
)
override
;
private
:
LineBreakOptions
mOptions
;
}
;
class
WordBreakIteratorUtf16
final
:
public
SegmentIteratorUtf16
{
public
:
explicit
WordBreakIteratorUtf16
(
Span
<
const
char16_t
>
aText
)
;
Maybe
<
uint32_t
>
Next
(
)
override
;
}
;
class
Segmenter
final
{
public
:
static
Result
<
UniquePtr
<
Segmenter
>
ICUError
>
TryCreate
(
Span
<
const
char
>
aLocale
const
SegmenterOptions
&
aOptions
)
;
explicit
Segmenter
(
Span
<
const
char
>
aLocale
const
SegmenterOptions
&
aOptions
)
:
mOptions
(
aOptions
)
{
}
UniquePtr
<
SegmentIteratorUtf16
>
Segment
(
Span
<
const
char16_t
>
aText
)
const
;
private
:
SegmenterOptions
mOptions
;
}
;
}
#
endif
