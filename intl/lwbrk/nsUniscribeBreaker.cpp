#
include
"
nsComplexBreaker
.
h
"
#
include
<
windows
.
h
>
#
include
<
usp10
.
h
>
#
include
"
nsUTF8Utils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
if
defined
(
MOZ_SANDBOX
)
#
include
"
mozilla
/
WindowsProcessMitigations
.
h
"
#
include
"
mozilla
/
SandboxSettings
.
h
"
#
include
"
mozilla
/
sandboxTarget
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
if
defined
(
ENABLE_TESTS
)
#
include
"
mozilla
/
StaticPrefs_intl
.
h
"
#
endif
#
endif
using
namespace
mozilla
;
#
if
defined
(
MOZ_SANDBOX
)
static
bool
UseBrokeredLineBreaking
(
)
{
static
bool
sUseBrokeredLineBreaking
=
IsWin32kLockedDown
(
)
|
|
(
XRE_IsContentProcess
(
)
&
&
GetEffectiveContentSandboxLevel
(
)
>
=
20
)
;
return
sUseBrokeredLineBreaking
;
}
#
endif
void
NS_GetComplexLineBreaks
(
const
char16_t
*
aText
uint32_t
aLength
uint8_t
*
aBreakBefore
)
{
NS_ASSERTION
(
aText
"
aText
shouldn
'
t
be
null
"
)
;
#
if
defined
(
MOZ_SANDBOX
)
if
(
UseBrokeredLineBreaking
(
)
)
{
char16ptr_t
text
=
aText
;
if
(
!
SandboxTarget
:
:
Instance
(
)
-
>
GetComplexLineBreaks
(
text
aLength
aBreakBefore
)
)
{
NS_WARNING
(
"
Brokered
line
break
failed
breaks
might
be
incorrect
.
"
)
;
}
return
;
}
#
endif
int
outItems
=
0
;
HRESULT
result
;
AutoTArray
<
SCRIPT_ITEM
64
>
items
;
char16ptr_t
text
=
aText
;
memset
(
aBreakBefore
false
aLength
)
;
items
.
AppendElements
(
64
)
;
do
{
result
=
ScriptItemize
(
text
aLength
items
.
Length
(
)
nullptr
nullptr
items
.
Elements
(
)
&
outItems
)
;
if
(
result
=
=
E_OUTOFMEMORY
)
{
items
.
AppendElements
(
items
.
Length
(
)
)
;
}
}
while
(
result
=
=
E_OUTOFMEMORY
)
;
for
(
int
iItem
=
0
;
iItem
<
outItems
;
+
+
iItem
)
{
uint32_t
endOffset
=
(
iItem
+
1
=
=
outItems
?
aLength
:
items
[
iItem
+
1
]
.
iCharPos
)
;
uint32_t
startOffset
=
items
[
iItem
]
.
iCharPos
;
AutoTArray
<
SCRIPT_LOGATTR
64
>
sla
;
sla
.
AppendElements
(
endOffset
-
startOffset
)
;
if
(
ScriptBreak
(
text
+
startOffset
endOffset
-
startOffset
&
items
[
iItem
]
.
a
sla
.
Elements
(
)
)
<
0
)
return
;
for
(
uint32_t
j
=
startOffset
?
0
:
1
;
j
+
startOffset
<
endOffset
;
+
+
j
)
{
aBreakBefore
[
j
+
startOffset
]
=
sla
[
j
]
.
fSoftBreak
;
}
}
#
if
defined
(
ENABLE_TESTS
)
&
&
defined
(
MOZ_SANDBOX
)
if
(
!
StaticPrefs
:
:
intl_compare_against_brokered_complex_line_breaks
(
)
|
|
!
XRE_IsContentProcess
(
)
)
{
return
;
}
nsTArray
<
uint8_t
>
brokeredBreaks
(
aLength
)
;
brokeredBreaks
.
AppendElements
(
aLength
)
;
if
(
!
SandboxTarget
:
:
Instance
(
)
-
>
GetComplexLineBreaks
(
text
aLength
brokeredBreaks
.
Elements
(
)
)
)
{
MOZ_CRASH
(
"
Brokered
GetComplexLineBreaks
failed
.
"
)
;
}
bool
mismatch
=
false
;
for
(
uint32_t
i
=
0
;
i
<
aLength
;
+
+
i
)
{
if
(
aBreakBefore
[
i
]
!
=
brokeredBreaks
[
i
]
)
{
mismatch
=
true
;
break
;
}
}
if
(
mismatch
)
{
printf_stderr
(
"
uniscribe
:
"
)
;
for
(
uint32_t
i
=
0
;
i
<
aLength
;
+
+
i
)
{
if
(
aBreakBefore
[
i
]
)
printf_stderr
(
"
#
"
)
;
printf_stderr
(
"
%
s
"
NS_ConvertUTF16toUTF8
(
aText
+
i
1
)
.
get
(
)
)
;
}
printf_stderr
(
"
\
n
"
)
;
printf_stderr
(
"
brokered
:
"
)
;
for
(
uint32_t
i
=
0
;
i
<
aLength
;
+
+
i
)
{
if
(
brokeredBreaks
[
i
]
)
printf_stderr
(
"
#
"
)
;
printf_stderr
(
"
%
s
"
NS_ConvertUTF16toUTF8
(
aText
+
i
1
)
.
get
(
)
)
;
}
printf_stderr
(
"
\
n
"
)
;
MOZ_CRASH
(
"
Brokered
breaks
did
not
match
.
"
)
;
}
#
endif
}
