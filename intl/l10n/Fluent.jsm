class
FluentType
{
constructor
(
value
opts
)
{
this
.
value
=
value
;
this
.
opts
=
opts
;
}
valueOf
(
)
{
return
this
.
value
;
}
toString
(
)
{
throw
new
Error
(
"
Subclasses
of
FluentType
must
implement
toString
.
"
)
;
}
}
class
FluentNone
extends
FluentType
{
toString
(
)
{
return
this
.
value
|
|
"
?
?
?
"
;
}
}
class
FluentNumber
extends
FluentType
{
constructor
(
value
opts
)
{
super
(
parseFloat
(
value
)
opts
)
;
}
toString
(
bundle
)
{
try
{
const
nf
=
bundle
.
_memoizeIntlObject
(
Intl
.
NumberFormat
this
.
opts
)
;
return
nf
.
format
(
this
.
value
)
;
}
catch
(
e
)
{
return
this
.
value
;
}
}
}
class
FluentDateTime
extends
FluentType
{
constructor
(
value
opts
)
{
super
(
new
Date
(
value
)
opts
)
;
}
toString
(
bundle
)
{
try
{
const
dtf
=
bundle
.
_memoizeIntlObject
(
Intl
.
DateTimeFormat
this
.
opts
)
;
return
dtf
.
format
(
this
.
value
)
;
}
catch
(
e
)
{
return
this
.
value
;
}
}
}
const
builtins
=
{
"
NUMBER
"
:
(
[
arg
]
opts
)
=
>
new
FluentNumber
(
arg
.
valueOf
(
)
merge
(
arg
.
opts
opts
)
)
"
DATETIME
"
:
(
[
arg
]
opts
)
=
>
new
FluentDateTime
(
arg
.
valueOf
(
)
merge
(
arg
.
opts
opts
)
)
}
;
function
merge
(
argopts
opts
)
{
return
Object
.
assign
(
{
}
argopts
values
(
opts
)
)
;
}
function
values
(
opts
)
{
const
unwrapped
=
{
}
;
for
(
const
[
name
opt
]
of
Object
.
entries
(
opts
)
)
{
unwrapped
[
name
]
=
opt
.
valueOf
(
)
;
}
return
unwrapped
;
}
const
MAX_PLACEABLE_LENGTH
=
2500
;
const
FSI
=
"
\
u2068
"
;
const
PDI
=
"
\
u2069
"
;
function
match
(
bundle
selector
key
)
{
if
(
key
=
=
=
selector
)
{
return
true
;
}
if
(
key
instanceof
FluentNumber
&
&
selector
instanceof
FluentNumber
&
&
key
.
value
=
=
=
selector
.
value
)
{
return
true
;
}
if
(
selector
instanceof
FluentNumber
&
&
typeof
key
=
=
=
"
string
"
)
{
let
category
=
bundle
.
_memoizeIntlObject
(
Intl
.
PluralRules
selector
.
opts
)
.
select
(
selector
.
value
)
;
if
(
key
=
=
=
category
)
{
return
true
;
}
}
return
false
;
}
function
DefaultMember
(
env
members
star
)
{
if
(
members
[
star
]
)
{
return
members
[
star
]
;
}
const
{
errors
}
=
env
;
errors
.
push
(
new
RangeError
(
"
No
default
"
)
)
;
return
new
FluentNone
(
)
;
}
function
MessageReference
(
env
{
name
}
)
{
const
{
bundle
errors
}
=
env
;
const
message
=
name
.
startsWith
(
"
-
"
)
?
bundle
.
_terms
.
get
(
name
)
:
bundle
.
_messages
.
get
(
name
)
;
if
(
!
message
)
{
const
err
=
name
.
startsWith
(
"
-
"
)
?
new
ReferenceError
(
Unknown
term
:
{
name
}
)
:
new
ReferenceError
(
Unknown
message
:
{
name
}
)
;
errors
.
push
(
err
)
;
return
new
FluentNone
(
name
)
;
}
return
message
;
}
function
VariantExpression
(
env
{
ref
selector
}
)
{
const
message
=
MessageReference
(
env
ref
)
;
if
(
message
instanceof
FluentNone
)
{
return
message
;
}
const
{
bundle
errors
}
=
env
;
const
sel
=
Type
(
env
selector
)
;
const
value
=
message
.
value
|
|
message
;
function
isVariantList
(
node
)
{
return
Array
.
isArray
(
node
)
&
&
node
[
0
]
.
type
=
=
=
"
select
"
&
&
node
[
0
]
.
selector
=
=
=
null
;
}
if
(
isVariantList
(
value
)
)
{
for
(
const
variant
of
value
[
0
]
.
variants
)
{
const
key
=
Type
(
env
variant
.
key
)
;
if
(
match
(
env
.
bundle
sel
key
)
)
{
return
variant
;
}
}
}
errors
.
push
(
new
ReferenceError
(
Unknown
variant
:
{
sel
.
toString
(
bundle
)
}
)
)
;
return
Type
(
env
message
)
;
}
function
AttributeExpression
(
env
{
ref
name
}
)
{
const
message
=
MessageReference
(
env
ref
)
;
if
(
message
instanceof
FluentNone
)
{
return
message
;
}
if
(
message
.
attrs
)
{
for
(
const
attrName
in
message
.
attrs
)
{
if
(
name
=
=
=
attrName
)
{
return
message
.
attrs
[
name
]
;
}
}
}
const
{
errors
}
=
env
;
errors
.
push
(
new
ReferenceError
(
Unknown
attribute
:
{
name
}
)
)
;
return
Type
(
env
message
)
;
}
function
SelectExpression
(
env
{
selector
variants
star
}
)
{
if
(
selector
=
=
=
null
)
{
return
DefaultMember
(
env
variants
star
)
;
}
let
sel
=
Type
(
env
selector
)
;
if
(
sel
instanceof
FluentNone
)
{
return
DefaultMember
(
env
variants
star
)
;
}
for
(
const
variant
of
variants
)
{
const
key
=
Type
(
env
variant
.
key
)
;
if
(
match
(
env
.
bundle
sel
key
)
)
{
return
variant
;
}
}
return
DefaultMember
(
env
variants
star
)
;
}
function
Type
(
env
expr
)
{
if
(
typeof
expr
=
=
=
"
string
"
)
{
return
env
.
bundle
.
_transform
(
expr
)
;
}
if
(
expr
instanceof
FluentNone
)
{
return
expr
;
}
if
(
Array
.
isArray
(
expr
)
)
{
return
Pattern
(
env
expr
)
;
}
switch
(
expr
.
type
)
{
case
"
num
"
:
return
new
FluentNumber
(
expr
.
value
)
;
case
"
var
"
:
return
VariableReference
(
env
expr
)
;
case
"
func
"
:
return
FunctionReference
(
env
expr
)
;
case
"
call
"
:
return
CallExpression
(
env
expr
)
;
case
"
ref
"
:
{
const
message
=
MessageReference
(
env
expr
)
;
return
Type
(
env
message
)
;
}
case
"
getattr
"
:
{
const
attr
=
AttributeExpression
(
env
expr
)
;
return
Type
(
env
attr
)
;
}
case
"
getvar
"
:
{
const
variant
=
VariantExpression
(
env
expr
)
;
return
Type
(
env
variant
)
;
}
case
"
select
"
:
{
const
member
=
SelectExpression
(
env
expr
)
;
return
Type
(
env
member
)
;
}
case
undefined
:
{
if
(
expr
.
value
!
=
=
null
&
&
expr
.
value
!
=
=
undefined
)
{
return
Type
(
env
expr
.
value
)
;
}
const
{
errors
}
=
env
;
errors
.
push
(
new
RangeError
(
"
No
value
"
)
)
;
return
new
FluentNone
(
)
;
}
default
:
return
new
FluentNone
(
)
;
}
}
function
VariableReference
(
env
{
name
}
)
{
const
{
args
errors
}
=
env
;
if
(
!
args
|
|
!
args
.
hasOwnProperty
(
name
)
)
{
errors
.
push
(
new
ReferenceError
(
Unknown
variable
:
{
name
}
)
)
;
return
new
FluentNone
(
name
)
;
}
const
arg
=
args
[
name
]
;
if
(
arg
instanceof
FluentType
)
{
return
arg
;
}
switch
(
typeof
arg
)
{
case
"
string
"
:
return
arg
;
case
"
number
"
:
return
new
FluentNumber
(
arg
)
;
case
"
object
"
:
if
(
arg
instanceof
Date
)
{
return
new
FluentDateTime
(
arg
)
;
}
default
:
errors
.
push
(
new
TypeError
(
Unsupported
variable
type
:
{
name
}
{
typeof
arg
}
)
)
;
return
new
FluentNone
(
name
)
;
}
}
function
FunctionReference
(
env
{
name
}
)
{
const
{
bundle
:
{
_functions
}
errors
}
=
env
;
const
func
=
_functions
[
name
]
|
|
builtins
[
name
]
;
if
(
!
func
)
{
errors
.
push
(
new
ReferenceError
(
Unknown
function
:
{
name
}
(
)
)
)
;
return
new
FluentNone
(
{
name
}
(
)
)
;
}
if
(
typeof
func
!
=
=
"
function
"
)
{
errors
.
push
(
new
TypeError
(
Function
{
name
}
(
)
is
not
callable
)
)
;
return
new
FluentNone
(
{
name
}
(
)
)
;
}
return
func
;
}
function
CallExpression
(
env
{
callee
args
}
)
{
const
func
=
FunctionReference
(
env
callee
)
;
if
(
func
instanceof
FluentNone
)
{
return
func
;
}
const
posargs
=
[
]
;
const
keyargs
=
{
}
;
for
(
const
arg
of
args
)
{
if
(
arg
.
type
=
=
=
"
narg
"
)
{
keyargs
[
arg
.
name
]
=
Type
(
env
arg
.
value
)
;
}
else
{
posargs
.
push
(
Type
(
env
arg
)
)
;
}
}
try
{
return
func
(
posargs
keyargs
)
;
}
catch
(
e
)
{
return
new
FluentNone
(
)
;
}
}
function
Pattern
(
env
ptn
)
{
const
{
bundle
dirty
errors
}
=
env
;
if
(
dirty
.
has
(
ptn
)
)
{
errors
.
push
(
new
RangeError
(
"
Cyclic
reference
"
)
)
;
return
new
FluentNone
(
)
;
}
dirty
.
add
(
ptn
)
;
const
result
=
[
]
;
const
useIsolating
=
bundle
.
_useIsolating
&
&
ptn
.
length
>
1
;
for
(
const
elem
of
ptn
)
{
if
(
typeof
elem
=
=
=
"
string
"
)
{
result
.
push
(
bundle
.
_transform
(
elem
)
)
;
continue
;
}
const
part
=
Type
(
env
elem
)
.
toString
(
bundle
)
;
if
(
useIsolating
)
{
result
.
push
(
FSI
)
;
}
if
(
part
.
length
>
MAX_PLACEABLE_LENGTH
)
{
errors
.
push
(
new
RangeError
(
"
Too
many
characters
in
placeable
"
+
(
{
part
.
length
}
max
allowed
is
{
MAX_PLACEABLE_LENGTH
}
)
)
)
;
result
.
push
(
part
.
slice
(
MAX_PLACEABLE_LENGTH
)
)
;
}
else
{
result
.
push
(
part
)
;
}
if
(
useIsolating
)
{
result
.
push
(
PDI
)
;
}
}
dirty
.
delete
(
ptn
)
;
return
result
.
join
(
"
"
)
;
}
function
resolve
(
bundle
args
message
errors
=
[
]
)
{
const
env
=
{
bundle
args
errors
dirty
:
new
WeakSet
(
)
}
;
return
Type
(
env
message
)
.
toString
(
bundle
)
;
}
class
FluentError
extends
Error
{
}
const
RE_MESSAGE_START
=
/
^
(
-
?
[
a
-
zA
-
Z
]
[
a
-
zA
-
Z0
-
9_
-
]
*
)
*
=
*
/
mg
;
const
RE_ATTRIBUTE_START
=
/
\
.
(
[
a
-
zA
-
Z
]
[
a
-
zA
-
Z0
-
9_
-
]
*
)
*
=
*
/
y
;
const
RE_VARIANT_START
=
/
\
*
?
\
[
[
^
]
*
?
]
*
/
y
;
const
RE_IDENTIFIER
=
/
(
-
?
[
a
-
zA
-
Z
]
[
a
-
zA
-
Z0
-
9_
-
]
*
)
/
y
;
const
RE_NUMBER_LITERAL
=
/
(
-
?
[
0
-
9
]
+
(
\
.
[
0
-
9
]
+
)
?
)
/
y
;
const
RE_TEXT_RUN
=
/
(
[
^
\
\
{
\
n
\
r
]
+
)
/
y
;
const
RE_STRING_RUN
=
/
(
[
^
\
\
"
\
n
\
r
]
*
)
/
y
;
const
RE_UNICODE_ESCAPE
=
/
\
\
u
(
[
a
-
fA
-
F0
-
9
]
{
4
}
)
/
y
;
const
RE_STRING_ESCAPE
=
/
\
\
(
[
\
\
"
]
)
/
y
;
const
RE_TEXT_ESCAPE
=
/
\
\
(
[
\
\
{
]
)
/
y
;
const
RE_TRAILING_SPACES
=
/
+
/
mg
;
const
RE_CRLF
=
/
\
r
\
n
/
g
;
const
TOKEN_BRACE_OPEN
=
/
{
\
s
*
/
y
;
const
TOKEN_BRACE_CLOSE
=
/
\
s
*
}
/
y
;
const
TOKEN_BRACKET_OPEN
=
/
\
[
\
s
*
/
y
;
const
TOKEN_BRACKET_CLOSE
=
/
\
s
*
]
/
y
;
const
TOKEN_PAREN_OPEN
=
/
\
(
\
s
*
/
y
;
const
TOKEN_ARROW
=
/
\
s
*
-
>
\
s
*
/
y
;
const
TOKEN_COLON
=
/
\
s
*
:
\
s
*
/
y
;
const
TOKEN_COMMA
=
/
\
s
*
?
\
s
*
/
y
;
const
TOKEN_BLANK
=
/
\
s
+
/
y
;
const
MAX_PLACEABLES
=
100
;
class
FluentResource
extends
Map
{
static
fromString
(
source
)
{
RE_MESSAGE_START
.
lastIndex
=
0
;
let
resource
=
new
this
(
)
;
let
cursor
=
0
;
while
(
true
)
{
let
next
=
RE_MESSAGE_START
.
exec
(
source
)
;
if
(
next
=
=
=
null
)
{
break
;
}
cursor
=
RE_MESSAGE_START
.
lastIndex
;
try
{
resource
.
set
(
next
[
1
]
parseMessage
(
)
)
;
}
catch
(
err
)
{
if
(
err
instanceof
FluentError
)
{
continue
;
}
throw
err
;
}
}
return
resource
;
function
test
(
re
)
{
re
.
lastIndex
=
cursor
;
return
re
.
test
(
source
)
;
}
function
consumeChar
(
char
errorClass
)
{
if
(
source
[
cursor
]
=
=
=
char
)
{
cursor
+
+
;
return
true
;
}
if
(
errorClass
)
{
throw
new
errorClass
(
Expected
{
char
}
)
;
}
return
false
;
}
function
consumeToken
(
re
errorClass
)
{
if
(
test
(
re
)
)
{
cursor
=
re
.
lastIndex
;
return
true
;
}
if
(
errorClass
)
{
throw
new
errorClass
(
Expected
{
re
.
toString
(
)
}
)
;
}
return
false
;
}
function
match
(
re
)
{
re
.
lastIndex
=
cursor
;
let
result
=
re
.
exec
(
source
)
;
if
(
result
=
=
=
null
)
{
throw
new
FluentError
(
Expected
{
re
.
toString
(
)
}
)
;
}
cursor
=
re
.
lastIndex
;
return
result
[
1
]
;
}
function
parseMessage
(
)
{
let
value
=
parsePattern
(
)
;
let
attrs
=
parseAttributes
(
)
;
if
(
attrs
=
=
=
null
)
{
return
value
;
}
return
{
value
attrs
}
;
}
function
parseAttributes
(
)
{
let
attrs
=
{
}
;
let
hasAttributes
=
false
;
while
(
test
(
RE_ATTRIBUTE_START
)
)
{
if
(
!
hasAttributes
)
{
hasAttributes
=
true
;
}
let
name
=
match
(
RE_ATTRIBUTE_START
)
;
attrs
[
name
]
=
parsePattern
(
)
;
}
return
hasAttributes
?
attrs
:
null
;
}
function
parsePattern
(
)
{
if
(
test
(
RE_TEXT_RUN
)
)
{
var
first
=
match
(
RE_TEXT_RUN
)
;
}
switch
(
source
[
cursor
]
)
{
case
"
{
"
:
case
"
\
\
"
:
return
first
?
parsePatternElements
(
first
)
:
parsePatternElements
(
)
;
}
let
indent
=
parseIndent
(
)
;
if
(
indent
)
{
return
first
?
parsePatternElements
(
first
trim
(
indent
)
)
:
parsePatternElements
(
)
;
}
if
(
first
)
{
return
trim
(
first
)
;
}
return
null
;
}
function
parsePatternElements
(
.
.
.
elements
)
{
let
placeableCount
=
0
;
let
needsTrimming
=
false
;
while
(
true
)
{
if
(
test
(
RE_TEXT_RUN
)
)
{
elements
.
push
(
match
(
RE_TEXT_RUN
)
)
;
needsTrimming
=
true
;
continue
;
}
if
(
source
[
cursor
]
=
=
=
"
{
"
)
{
if
(
+
+
placeableCount
>
MAX_PLACEABLES
)
{
throw
new
FluentError
(
"
Too
many
placeables
"
)
;
}
elements
.
push
(
parsePlaceable
(
)
)
;
needsTrimming
=
false
;
continue
;
}
let
indent
=
parseIndent
(
)
;
if
(
indent
)
{
elements
.
push
(
trim
(
indent
)
)
;
needsTrimming
=
false
;
continue
;
}
if
(
source
[
cursor
]
=
=
=
"
\
\
"
)
{
elements
.
push
(
parseEscapeSequence
(
RE_TEXT_ESCAPE
)
)
;
needsTrimming
=
false
;
continue
;
}
break
;
}
if
(
needsTrimming
)
{
let
lastIndex
=
elements
.
length
-
1
;
elements
[
lastIndex
]
=
trim
(
elements
[
lastIndex
]
)
;
}
return
elements
;
}
function
parsePlaceable
(
)
{
consumeToken
(
TOKEN_BRACE_OPEN
FluentError
)
;
let
onlyVariants
=
parseVariants
(
)
;
if
(
onlyVariants
)
{
consumeToken
(
TOKEN_BRACE_CLOSE
FluentError
)
;
return
{
type
:
"
select
"
selector
:
null
.
.
.
onlyVariants
}
;
}
let
selector
=
parseInlineExpression
(
)
;
if
(
consumeToken
(
TOKEN_BRACE_CLOSE
)
)
{
return
selector
;
}
if
(
consumeToken
(
TOKEN_ARROW
)
)
{
let
variants
=
parseVariants
(
)
;
consumeToken
(
TOKEN_BRACE_CLOSE
FluentError
)
;
return
{
type
:
"
select
"
selector
.
.
.
variants
}
;
}
throw
new
FluentError
(
"
Unclosed
placeable
"
)
;
}
function
parseInlineExpression
(
)
{
if
(
source
[
cursor
]
=
=
=
"
{
"
)
{
return
parsePlaceable
(
)
;
}
if
(
consumeChar
(
"
"
)
)
{
return
{
type
:
"
var
"
name
:
match
(
RE_IDENTIFIER
)
}
;
}
if
(
test
(
RE_IDENTIFIER
)
)
{
let
ref
=
{
type
:
"
ref
"
name
:
match
(
RE_IDENTIFIER
)
}
;
if
(
consumeChar
(
"
.
"
)
)
{
let
name
=
match
(
RE_IDENTIFIER
)
;
return
{
type
:
"
getattr
"
ref
name
}
;
}
if
(
source
[
cursor
]
=
=
=
"
[
"
)
{
return
{
type
:
"
getvar
"
ref
selector
:
parseVariantKey
(
)
}
;
}
if
(
consumeToken
(
TOKEN_PAREN_OPEN
)
)
{
let
callee
=
{
.
.
.
ref
type
:
"
func
"
}
;
return
{
type
:
"
call
"
callee
args
:
parseArguments
(
)
}
;
}
return
ref
;
}
return
parseLiteral
(
)
;
}
function
parseArguments
(
)
{
let
args
=
[
]
;
while
(
true
)
{
switch
(
source
[
cursor
]
)
{
case
"
)
"
:
cursor
+
+
;
return
args
;
case
undefined
:
throw
new
FluentError
(
"
Unclosed
argument
list
"
)
;
}
args
.
push
(
parseArgument
(
)
)
;
consumeToken
(
TOKEN_COMMA
)
;
}
}
function
parseArgument
(
)
{
let
ref
=
parseInlineExpression
(
)
;
if
(
ref
.
type
!
=
=
"
ref
"
)
{
return
ref
;
}
if
(
consumeToken
(
TOKEN_COLON
)
)
{
return
{
type
:
"
narg
"
name
:
ref
.
name
value
:
parseLiteral
(
)
}
;
}
return
ref
;
}
function
parseVariants
(
)
{
let
variants
=
[
]
;
let
count
=
0
;
let
star
;
while
(
test
(
RE_VARIANT_START
)
)
{
if
(
consumeChar
(
"
*
"
)
)
{
star
=
count
;
}
let
key
=
parseVariantKey
(
)
;
cursor
=
RE_VARIANT_START
.
lastIndex
;
variants
[
count
+
+
]
=
{
key
value
:
parsePattern
(
)
}
;
}
return
count
>
0
?
{
variants
star
}
:
null
;
}
function
parseVariantKey
(
)
{
consumeToken
(
TOKEN_BRACKET_OPEN
FluentError
)
;
let
key
=
test
(
RE_NUMBER_LITERAL
)
?
parseNumberLiteral
(
)
:
match
(
RE_IDENTIFIER
)
;
consumeToken
(
TOKEN_BRACKET_CLOSE
FluentError
)
;
return
key
;
}
function
parseLiteral
(
)
{
if
(
test
(
RE_NUMBER_LITERAL
)
)
{
return
parseNumberLiteral
(
)
;
}
if
(
source
[
cursor
]
=
=
=
"
\
"
"
)
{
return
parseStringLiteral
(
)
;
}
throw
new
FluentError
(
"
Invalid
expression
"
)
;
}
function
parseNumberLiteral
(
)
{
return
{
type
:
"
num
"
value
:
match
(
RE_NUMBER_LITERAL
)
}
;
}
function
parseStringLiteral
(
)
{
consumeChar
(
"
\
"
"
FluentError
)
;
let
value
=
"
"
;
while
(
true
)
{
value
+
=
match
(
RE_STRING_RUN
)
;
if
(
source
[
cursor
]
=
=
=
"
\
\
"
)
{
value
+
=
parseEscapeSequence
(
RE_STRING_ESCAPE
)
;
continue
;
}
if
(
consumeChar
(
"
\
"
"
)
)
{
return
value
;
}
throw
new
FluentError
(
"
Unclosed
string
literal
"
)
;
}
}
function
parseEscapeSequence
(
reSpecialized
)
{
if
(
test
(
RE_UNICODE_ESCAPE
)
)
{
let
sequence
=
match
(
RE_UNICODE_ESCAPE
)
;
return
String
.
fromCodePoint
(
parseInt
(
sequence
16
)
)
;
}
if
(
test
(
reSpecialized
)
)
{
return
match
(
reSpecialized
)
;
}
throw
new
FluentError
(
"
Unknown
escape
sequence
"
)
;
}
function
parseIndent
(
)
{
let
start
=
cursor
;
consumeToken
(
TOKEN_BLANK
)
;
switch
(
source
[
cursor
]
)
{
case
"
.
"
:
case
"
[
"
:
case
"
*
"
:
case
"
}
"
:
case
undefined
:
return
false
;
case
"
{
"
:
return
source
.
slice
(
start
cursor
)
.
replace
(
RE_CRLF
"
\
n
"
)
;
}
if
(
source
[
cursor
-
1
]
=
=
=
"
"
)
{
return
source
.
slice
(
start
cursor
)
.
replace
(
RE_CRLF
"
\
n
"
)
;
}
return
false
;
}
function
trim
(
text
)
{
return
text
.
replace
(
RE_TRAILING_SPACES
"
"
)
;
}
}
}
class
FluentBundle
{
constructor
(
locales
{
functions
=
{
}
useIsolating
=
true
transform
=
v
=
>
v
}
=
{
}
)
{
this
.
locales
=
Array
.
isArray
(
locales
)
?
locales
:
[
locales
]
;
this
.
_terms
=
new
Map
(
)
;
this
.
_messages
=
new
Map
(
)
;
this
.
_functions
=
functions
;
this
.
_useIsolating
=
useIsolating
;
this
.
_transform
=
transform
;
this
.
_intls
=
new
WeakMap
(
)
;
}
get
messages
(
)
{
return
this
.
_messages
[
Symbol
.
iterator
]
(
)
;
}
hasMessage
(
id
)
{
return
this
.
_messages
.
has
(
id
)
;
}
getMessage
(
id
)
{
return
this
.
_messages
.
get
(
id
)
;
}
addMessages
(
source
)
{
const
res
=
FluentResource
.
fromString
(
source
)
;
return
this
.
addResource
(
res
)
;
}
addResource
(
res
)
{
const
errors
=
[
]
;
for
(
const
[
id
value
]
of
res
)
{
if
(
id
.
startsWith
(
"
-
"
)
)
{
if
(
this
.
_terms
.
has
(
id
)
)
{
errors
.
push
(
Attempt
to
override
an
existing
term
:
"
{
id
}
"
)
;
continue
;
}
this
.
_terms
.
set
(
id
value
)
;
}
else
{
if
(
this
.
_messages
.
has
(
id
)
)
{
errors
.
push
(
Attempt
to
override
an
existing
message
:
"
{
id
}
"
)
;
continue
;
}
this
.
_messages
.
set
(
id
value
)
;
}
}
return
errors
;
}
format
(
message
args
errors
)
{
if
(
typeof
message
=
=
=
"
string
"
)
{
return
this
.
_transform
(
message
)
;
}
if
(
message
=
=
=
null
|
|
message
.
value
=
=
=
null
)
{
return
null
;
}
if
(
typeof
message
.
value
=
=
=
"
string
"
)
{
return
this
.
_transform
(
message
.
value
)
;
}
return
resolve
(
this
args
message
errors
)
;
}
_memoizeIntlObject
(
ctor
opts
)
{
const
cache
=
this
.
_intls
.
get
(
ctor
)
|
|
{
}
;
const
id
=
JSON
.
stringify
(
opts
)
;
if
(
!
cache
[
id
]
)
{
cache
[
id
]
=
new
ctor
(
this
.
locales
opts
)
;
this
.
_intls
.
set
(
ctor
cache
)
;
}
return
cache
[
id
]
;
}
}
this
.
FluentBundle
=
FluentBundle
;
this
.
FluentResource
=
FluentResource
;
var
EXPORTED_SYMBOLS
=
[
"
FluentBundle
"
"
FluentResource
"
]
;
