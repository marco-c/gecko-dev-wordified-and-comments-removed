#
ifndef
mozilla_dom_DocumentL10n_h
#
define
mozilla_dom_DocumentL10n_h
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
mozIDOMLocalization
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
PromiseNativeHandler
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Document
;
class
Element
;
struct
L10nKey
;
class
PromiseResolver
final
:
public
PromiseNativeHandler
{
public
:
NS_DECL_ISUPPORTS
explicit
PromiseResolver
(
Promise
*
aPromise
)
;
void
ResolvedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
;
void
RejectedCallback
(
JSContext
*
aCx
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
)
override
;
protected
:
virtual
~
PromiseResolver
(
)
;
RefPtr
<
Promise
>
mPromise
;
}
;
enum
class
DocumentL10nState
{
Initialized
=
0
InitialTranslationTriggered
}
;
class
DocumentL10n
final
:
public
nsIDOMEventListener
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
DocumentL10n
)
NS_DECL_NSIDOMEVENTLISTENER
public
:
explicit
DocumentL10n
(
Document
*
aDocument
)
;
bool
Init
(
nsTArray
<
nsString
>
&
aResourceIds
)
;
protected
:
virtual
~
DocumentL10n
(
)
;
RefPtr
<
Document
>
mDocument
;
RefPtr
<
Promise
>
mReady
;
DocumentL10nState
mState
;
nsCOMPtr
<
mozIDOMLocalization
>
mDOMLocalization
;
already_AddRefed
<
Promise
>
MaybeWrapPromise
(
Promise
*
aPromise
)
;
public
:
Document
*
GetParentObject
(
)
const
{
return
mDocument
;
}
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
uint32_t
AddResourceIds
(
nsTArray
<
nsString
>
&
aResourceIds
)
;
uint32_t
RemoveResourceIds
(
nsTArray
<
nsString
>
&
aResourceIds
)
;
already_AddRefed
<
Promise
>
FormatMessages
(
JSContext
*
aCx
const
Sequence
<
L10nKey
>
&
aKeys
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
FormatValues
(
JSContext
*
aCx
const
Sequence
<
L10nKey
>
&
aKeys
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
FormatValue
(
JSContext
*
aCx
const
nsAString
&
aId
const
Optional
<
JS
:
:
Handle
<
JSObject
*
>
>
&
aArgs
ErrorResult
&
aRv
)
;
void
SetAttributes
(
JSContext
*
aCx
Element
&
aElement
const
nsAString
&
aId
const
Optional
<
JS
:
:
Handle
<
JSObject
*
>
>
&
aArgs
ErrorResult
&
aRv
)
;
void
GetAttributes
(
JSContext
*
aCx
Element
&
aElement
L10nKey
&
aResult
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
TranslateFragment
(
nsINode
&
aNode
ErrorResult
&
aRv
)
;
already_AddRefed
<
Promise
>
TranslateElements
(
const
Sequence
<
OwningNonNull
<
Element
>
>
&
aElements
ErrorResult
&
aRv
)
;
Promise
*
Ready
(
)
;
void
TriggerInitialDocumentTranslation
(
)
;
}
;
}
}
#
endif
