const
{
L10nRegistry
FileSource
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
L10nRegistry
.
jsm
"
{
}
)
;
let
uri
=
"
chrome
:
/
/
mochitests
/
content
/
browser
/
intl
/
l10n
/
test
/
document_l10n
/
non
-
system
-
principal
/
"
;
let
protocol
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
;
protocol
.
setSubstitution
(
"
l10n
-
test
"
Services
.
io
.
newURI
(
uri
)
)
;
let
locales
=
Services
.
locale
.
appLocalesAsBCP47
;
let
mockSource
=
new
FileSource
(
"
test
"
locales
{
uri
}
localization
/
)
;
L10nRegistry
.
registerSource
(
mockSource
)
;
registerCleanupFunction
(
(
)
=
>
{
protocol
.
setSubstitution
(
"
l10n
-
test
"
null
)
;
L10nRegistry
.
removeSource
(
"
test
"
)
;
}
)
;
add_task
(
async
(
)
=
>
{
await
BrowserTestUtils
.
withNewTab
(
"
resource
:
/
/
l10n
-
test
/
test
.
html
"
async
(
browser
)
=
>
{
await
ContentTask
.
spawn
(
browser
null
async
function
(
)
{
let
document
=
content
.
document
;
let
window
=
document
.
defaultView
;
let
{
customMsg
l10nArgs
}
=
await
document
.
testsReadyPromise
;
let
desc
=
document
.
getElementById
(
"
main
-
desc
"
)
;
is
(
desc
.
textContent
"
This
is
a
mock
page
title
"
)
;
let
label
=
document
.
getElementById
(
"
label1
"
)
;
is
(
l10nArgs
.
id
"
subtitle
"
)
;
is
(
l10nArgs
.
args
.
name
"
Firefox
"
)
;
is
(
customMsg
"
This
is
a
custom
message
formatted
from
JS
.
"
)
;
await
new
Promise
(
(
resolve
)
=
>
{
let
verifyL10n
=
(
)
=
>
{
is
(
label
.
textContent
.
includes
(
"
Firefox
"
)
true
)
;
resolve
(
)
;
}
;
window
.
addEventListener
(
"
MozAfterPaint
"
verifyL10n
{
once
:
true
}
)
;
}
)
;
}
)
;
}
)
;
}
)
;
