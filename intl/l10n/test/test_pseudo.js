const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
L10nRegistry
FileSource
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
L10nRegistry
.
jsm
"
)
;
const
originalValues
=
{
}
;
function
addMockFileSource
(
)
{
const
fs
=
{
"
/
localization
/
de
/
browser
/
menu
.
ftl
"
:
key
=
This
is
a
single
message
.
tooltip
=
This
is
a
tooltip
.
accesskey
=
f
}
;
originalValues
.
load
=
L10nRegistry
.
load
;
originalValues
.
requested
=
Services
.
locale
.
requestedLocales
;
L10nRegistry
.
load
=
async
function
(
url
)
{
return
fs
[
url
]
;
}
;
const
source
=
new
FileSource
(
"
test
"
[
"
de
"
]
"
/
localization
/
{
locale
}
"
)
;
L10nRegistry
.
registerSources
(
[
source
]
)
;
return
async
function
*
generateMessages
(
resIds
)
{
yield
*
await
L10nRegistry
.
generateBundles
(
[
"
de
"
]
resIds
)
;
}
;
}
function
getAttributeByName
(
attributes
name
)
{
return
attributes
.
find
(
attr
=
>
attr
.
name
=
=
=
name
)
;
}
add_task
(
async
function
test_accented_works
(
)
{
Services
.
prefs
.
setStringPref
(
"
intl
.
l10n
.
pseudo
"
"
"
)
;
let
generateBundles
=
addMockFileSource
(
)
;
const
l10n
=
new
Localization
(
[
"
/
browser
/
menu
.
ftl
"
]
false
{
generateBundles
}
)
;
{
let
message
=
(
await
l10n
.
formatMessages
(
[
{
id
:
"
key
"
}
]
)
)
[
0
]
;
ok
(
message
.
value
.
includes
(
"
This
is
a
single
message
"
)
)
;
let
attr0
=
getAttributeByName
(
message
.
attributes
"
tooltip
"
)
;
ok
(
attr0
.
value
.
includes
(
"
This
is
a
tooltip
"
)
)
;
let
attr1
=
getAttributeByName
(
message
.
attributes
"
accesskey
"
)
;
equal
(
attr1
.
value
"
f
"
)
;
}
{
Services
.
prefs
.
setStringPref
(
"
intl
.
l10n
.
pseudo
"
"
accented
"
)
;
let
message
=
(
await
l10n
.
formatMessages
(
[
{
id
:
"
key
"
}
]
)
)
[
0
]
;
ok
(
message
.
value
.
includes
(
"
"
)
)
;
let
attr0
=
getAttributeByName
(
message
.
attributes
"
tooltip
"
)
;
ok
(
attr0
.
value
.
includes
(
"
"
)
)
;
let
attr1
=
getAttributeByName
(
message
.
attributes
"
accesskey
"
)
;
equal
(
attr1
.
value
"
f
"
)
;
}
{
Services
.
prefs
.
setStringPref
(
"
intl
.
l10n
.
pseudo
"
"
bidi
"
)
;
let
message
=
(
await
l10n
.
formatMessages
(
[
{
id
:
"
key
"
}
]
)
)
[
0
]
;
ok
(
message
.
value
.
includes
(
"
s
s
u
ss
"
)
)
;
let
attr0
=
getAttributeByName
(
message
.
attributes
"
tooltip
"
)
;
ok
(
attr0
.
value
.
includes
(
"
s
s
oo
d
"
)
)
;
let
attr1
=
getAttributeByName
(
message
.
attributes
"
accesskey
"
)
;
equal
(
attr1
.
value
"
f
"
)
;
}
{
Services
.
prefs
.
setStringPref
(
"
intl
.
l10n
.
pseudo
"
"
"
)
;
let
message
=
(
await
l10n
.
formatMessages
(
[
{
id
:
"
key
"
}
]
)
)
[
0
]
;
ok
(
message
.
value
.
includes
(
"
This
is
a
single
message
"
)
)
;
let
attr0
=
getAttributeByName
(
message
.
attributes
"
tooltip
"
)
;
ok
(
attr0
.
value
.
includes
(
"
This
is
a
tooltip
"
)
)
;
let
attr1
=
getAttributeByName
(
message
.
attributes
"
accesskey
"
)
;
equal
(
attr1
.
value
"
f
"
)
;
}
L10nRegistry
.
sources
.
clear
(
)
;
L10nRegistry
.
load
=
originalValues
.
load
;
Services
.
locale
.
requestedLocales
=
originalValues
.
requested
;
}
)
;
add_task
(
async
function
test_unavailable_strategy_works
(
)
{
Services
.
prefs
.
setStringPref
(
"
intl
.
l10n
.
pseudo
"
"
"
)
;
let
generateBundles
=
addMockFileSource
(
)
;
const
l10n
=
new
Localization
(
[
"
/
browser
/
menu
.
ftl
"
]
false
{
generateBundles
}
)
;
{
Services
.
prefs
.
setStringPref
(
"
intl
.
l10n
.
pseudo
"
"
unknown
-
strategy
"
)
;
let
message
=
(
await
l10n
.
formatMessages
(
[
{
id
:
"
key
"
}
]
)
)
[
0
]
;
ok
(
message
.
value
.
includes
(
"
This
is
a
single
message
"
)
)
;
let
attr0
=
getAttributeByName
(
message
.
attributes
"
tooltip
"
)
;
ok
(
attr0
.
value
.
includes
(
"
This
is
a
tooltip
"
)
)
;
let
attr1
=
getAttributeByName
(
message
.
attributes
"
accesskey
"
)
;
equal
(
attr1
.
value
"
f
"
)
;
}
Services
.
prefs
.
setStringPref
(
"
intl
.
l10n
.
pseudo
"
"
"
)
;
L10nRegistry
.
sources
.
clear
(
)
;
L10nRegistry
.
load
=
originalValues
.
load
;
Services
.
locale
.
requestedLocales
=
originalValues
.
requested
;
}
)
;
