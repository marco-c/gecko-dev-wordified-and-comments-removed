let
seed
=
Math
.
floor
(
Math
.
random
(
)
*
1e9
)
;
console
.
log
(
Starting
a
fuzzing
run
with
seed
:
{
seed
}
.
)
;
console
.
log
(
"
To
reproduce
this
test
locally
re
-
run
it
locally
with
:
"
)
;
console
.
log
(
let
seed
=
{
seed
}
;
)
;
function
prng
(
)
{
const
multiplier
=
16807
;
const
prime
=
2147483647
;
seed
=
seed
*
multiplier
%
prime
return
(
seed
-
1
)
/
prime
}
function
generateRandomName
(
)
{
let
name
=
'
mock
-
'
const
letters
=
"
abcdefghijklmnopqrstuvwxyz
"
;
for
(
let
i
=
0
;
i
<
20
;
i
+
+
)
{
name
+
=
letters
[
Math
.
floor
(
prng
(
)
*
letters
.
length
)
]
;
}
return
name
;
}
function
pickOne
(
list
)
{
return
list
[
Math
.
floor
(
prng
(
)
*
list
.
length
)
]
}
function
pickN
(
list
count
)
{
list
=
list
.
slice
(
)
;
const
result
=
[
]
;
for
(
let
i
=
0
;
i
<
count
&
&
i
<
list
.
length
;
i
+
+
)
{
const
index
=
Math
.
floor
(
prng
(
)
*
list
.
length
)
;
const
a
=
list
[
index
]
;
const
b
=
list
[
list
.
length
-
1
]
;
list
[
index
]
=
b
;
list
[
list
.
length
-
1
]
=
a
result
.
push
(
list
.
pop
(
)
)
;
}
return
result
}
function
random
(
min
max
)
{
const
delta
=
max
-
min
;
return
min
+
delta
*
prng
(
)
;
}
function
randomPow
(
min
max
)
{
const
delta
=
max
-
min
;
const
r
=
prng
(
)
return
min
+
delta
*
r
*
r
;
}
add_task
(
async
function
test_fuzzing_sources
(
)
{
const
iterations
=
100
;
const
maxSources
=
10
;
const
metasources
=
[
"
app
"
"
langpack
"
"
"
]
;
const
availableLocales
=
[
"
en
"
"
en
-
US
"
"
pl
"
"
en
-
CA
"
"
es
-
AR
"
"
es
-
ES
"
]
;
const
l10nReg
=
new
L10nRegistry
(
)
;
for
(
let
i
=
0
;
i
<
iterations
;
i
+
+
)
{
console
.
log
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
"
)
;
console
.
log
(
"
Iteration
"
i
)
;
let
sourceCount
=
randomPow
(
0
maxSources
)
;
const
mocks
=
[
]
;
const
fs
=
[
]
;
const
locales
=
new
Set
(
)
;
const
filenames
=
new
Set
(
)
;
for
(
let
j
=
0
;
j
<
sourceCount
;
j
+
+
)
{
const
locale
=
pickOne
(
availableLocales
)
;
locales
.
add
(
locale
)
;
let
metasource
=
pickOne
(
metasources
)
;
if
(
metasource
=
=
=
"
langpack
"
)
{
metasource
=
{
metasource
}
-
{
locale
}
}
const
dir
=
generateRandomName
(
)
;
const
filename
=
generateRandomName
(
)
+
j
+
"
.
ftl
"
;
const
path
=
{
dir
}
/
{
locale
}
/
{
filename
}
const
name
=
metasource
|
|
"
app
"
;
const
source
=
"
key
=
value
"
;
filenames
.
add
(
filename
)
;
console
.
log
(
"
Add
source
"
{
name
metasource
path
source
}
)
;
fs
.
push
(
{
path
source
}
)
;
mocks
.
push
(
[
name
metasource
[
locale
]
dir
+
"
/
{
locale
}
/
"
fs
]
)
}
l10nReg
.
registerSources
(
mocks
.
map
(
args
=
>
L10nFileSource
.
createMock
(
.
.
.
args
)
)
)
;
const
bundleLocales
=
pickN
(
[
.
.
.
locales
]
random
(
1
4
)
)
;
const
bundleFilenames
=
pickN
(
[
.
.
.
filenames
]
random
(
1
10
)
)
;
console
.
log
(
"
generateBundles
"
{
bundleLocales
bundleFilenames
}
)
;
const
bundles
=
l10nReg
.
generateBundles
(
bundleLocales
bundleFilenames
)
;
function
next
(
)
{
console
.
log
(
"
Getting
next
bundle
"
)
;
const
bundle
=
bundles
.
next
(
)
console
.
log
(
"
Next
bundle
obtained
"
bundle
)
;
return
bundle
;
}
const
ops
=
[
next
next
next
(
)
=
>
{
const
newMocks
=
[
]
;
for
(
const
mock
of
pickN
(
mocks
random
(
0
3
)
)
)
{
const
newMock
=
mock
.
slice
(
)
;
newMocks
.
push
(
newMock
)
}
console
.
log
(
"
l10nReg
.
updateSources
"
)
;
l10nReg
.
updateSources
(
newMocks
.
map
(
mock
=
>
L10nFileSource
.
createMock
(
.
.
.
mock
)
)
)
;
}
(
)
=
>
{
console
.
log
(
"
l10nReg
.
clearSources
"
)
;
l10nReg
.
clearSources
(
)
;
}
]
;
console
.
log
(
"
Start
the
operation
loop
"
)
;
while
(
true
)
{
console
.
log
(
"
Next
operation
"
)
;
const
op
=
pickOne
(
ops
)
;
const
result
=
await
op
(
)
;
if
(
result
?
.
done
)
{
break
;
}
}
console
.
log
(
"
Clear
sources
"
)
;
l10nReg
.
clearSources
(
)
;
}
ok
(
true
"
The
L10nRegistry
fuzzing
did
not
crash
.
"
)
}
)
;
