const
{
L10nRegistry
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
L10nRegistry
.
jsm
"
{
}
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
{
}
)
;
class
CachedIterable
extends
Array
{
static
from
(
iterable
)
{
if
(
iterable
instanceof
this
)
{
return
iterable
;
}
return
new
this
(
iterable
)
;
}
}
class
CachedAsyncIterable
extends
CachedIterable
{
constructor
(
iterable
)
{
super
(
)
;
if
(
Symbol
.
asyncIterator
in
Object
(
iterable
)
)
{
this
.
iterator
=
iterable
[
Symbol
.
asyncIterator
]
(
)
;
}
else
if
(
Symbol
.
iterator
in
Object
(
iterable
)
)
{
this
.
iterator
=
iterable
[
Symbol
.
iterator
]
(
)
;
}
else
{
throw
new
TypeError
(
"
Argument
must
implement
the
iteration
protocol
.
"
)
;
}
}
[
Symbol
.
iterator
]
(
)
{
const
cached
=
this
;
let
cur
=
0
;
return
{
next
(
)
{
if
(
cached
.
length
=
=
=
cur
)
{
return
{
value
:
undefined
done
:
true
}
;
}
return
cached
[
cur
+
+
]
;
}
}
;
}
[
Symbol
.
asyncIterator
]
(
)
{
const
cached
=
this
;
let
cur
=
0
;
return
{
async
next
(
)
{
if
(
cached
.
length
<
=
cur
)
{
cached
.
push
(
await
cached
.
iterator
.
next
(
)
)
;
}
return
cached
[
cur
+
+
]
;
}
}
;
}
async
touchNext
(
count
=
1
)
{
let
idx
=
0
;
while
(
idx
+
+
<
count
)
{
const
last
=
this
[
this
.
length
-
1
]
;
if
(
last
&
&
last
.
done
)
{
break
;
}
this
.
push
(
await
this
.
iterator
.
next
(
)
)
;
}
return
this
[
this
.
length
-
1
]
;
}
}
function
defaultGenerateBundles
(
resourceIds
)
{
const
appLocales
=
Services
.
locale
.
appLocalesAsBCP47
;
return
L10nRegistry
.
generateBundles
(
appLocales
resourceIds
)
;
}
class
Localization
{
constructor
(
resourceIds
=
[
]
generateBundles
=
defaultGenerateBundles
)
{
this
.
resourceIds
=
resourceIds
;
this
.
generateBundles
=
generateBundles
;
this
.
bundles
=
CachedAsyncIterable
.
from
(
this
.
generateBundles
(
this
.
resourceIds
)
)
;
}
addResourceIds
(
resourceIds
eager
=
false
)
{
this
.
resourceIds
.
push
(
.
.
.
resourceIds
)
;
this
.
onChange
(
eager
)
;
return
this
.
resourceIds
.
length
;
}
removeResourceIds
(
resourceIds
)
{
this
.
resourceIds
=
this
.
resourceIds
.
filter
(
r
=
>
!
resourceIds
.
includes
(
r
)
)
;
this
.
onChange
(
)
;
return
this
.
resourceIds
.
length
;
}
async
formatWithFallback
(
keys
method
)
{
const
translations
=
[
]
;
for
await
(
const
bundle
of
this
.
bundles
)
{
const
missingIds
=
keysFromBundle
(
method
bundle
keys
translations
)
;
if
(
missingIds
.
size
=
=
=
0
)
{
break
;
}
if
(
AppConstants
.
NIGHTLY_BUILD
|
|
Cu
.
isInAutomation
)
{
const
locale
=
bundle
.
locales
[
0
]
;
const
ids
=
Array
.
from
(
missingIds
)
.
join
(
"
"
)
;
if
(
Cu
.
isInAutomation
)
{
throw
new
Error
(
Missing
translations
in
{
locale
}
:
{
ids
}
)
;
}
console
.
warn
(
Missing
translations
in
{
locale
}
:
{
ids
}
)
;
}
}
return
translations
;
}
formatMessages
(
keys
)
{
return
this
.
formatWithFallback
(
keys
messageFromBundle
)
;
}
formatValues
(
keys
)
{
return
this
.
formatWithFallback
(
keys
valueFromBundle
)
;
}
async
formatValue
(
id
args
)
{
const
[
val
]
=
await
this
.
formatValues
(
[
{
id
args
}
]
)
;
return
val
;
}
registerObservers
(
)
{
Services
.
obs
.
addObserver
(
this
"
intl
:
app
-
locales
-
changed
"
true
)
;
Services
.
prefs
.
addObserver
(
"
intl
.
l10n
.
pseudo
"
this
true
)
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
intl
:
app
-
locales
-
changed
"
:
this
.
onChange
(
)
;
break
;
case
"
nsPref
:
changed
"
:
switch
(
data
)
{
case
"
intl
.
l10n
.
pseudo
"
:
this
.
onChange
(
)
;
}
break
;
default
:
break
;
}
}
onChange
(
eager
=
false
)
{
this
.
bundles
=
CachedAsyncIterable
.
from
(
this
.
generateBundles
(
this
.
resourceIds
)
)
;
if
(
eager
)
{
const
appLocale
=
Services
.
locale
.
appLocaleAsBCP47
;
const
lastFallback
=
Services
.
locale
.
lastFallbackLocale
;
const
prefetchCount
=
appLocale
=
=
=
lastFallback
?
1
:
2
;
this
.
bundles
.
touchNext
(
prefetchCount
)
;
}
}
}
Localization
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
Ci
.
nsISupportsWeakReference
]
)
;
function
valueFromBundle
(
bundle
errors
id
args
)
{
const
msg
=
bundle
.
getMessage
(
id
)
;
return
bundle
.
format
(
msg
args
errors
)
;
}
function
messageFromBundle
(
bundle
errors
id
args
)
{
const
msg
=
bundle
.
getMessage
(
id
)
;
const
formatted
=
{
value
:
bundle
.
format
(
msg
args
errors
)
attributes
:
null
}
;
if
(
msg
.
attrs
)
{
formatted
.
attributes
=
[
]
;
for
(
const
[
name
attr
]
of
Object
.
entries
(
msg
.
attrs
)
)
{
const
value
=
bundle
.
format
(
attr
args
errors
)
;
if
(
value
!
=
=
null
)
{
formatted
.
attributes
.
push
(
{
name
value
}
)
;
}
}
}
return
formatted
;
}
function
keysFromBundle
(
method
bundle
keys
translations
)
{
const
messageErrors
=
[
]
;
const
missingIds
=
new
Set
(
)
;
keys
.
forEach
(
(
{
id
args
}
i
)
=
>
{
if
(
translations
[
i
]
!
=
=
undefined
)
{
return
;
}
if
(
bundle
.
hasMessage
(
id
)
)
{
messageErrors
.
length
=
0
;
translations
[
i
]
=
method
(
bundle
messageErrors
id
args
)
;
}
else
{
missingIds
.
add
(
id
)
;
}
}
)
;
return
missingIds
;
}
this
.
Localization
=
Localization
;
var
EXPORTED_SYMBOLS
=
[
"
Localization
"
]
;
