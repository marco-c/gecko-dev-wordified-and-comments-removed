const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
{
}
)
;
const
{
L10nRegistry
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
L10nRegistry
.
jsm
"
{
}
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
class
CachedIterable
{
constructor
(
iterable
)
{
if
(
Symbol
.
asyncIterator
in
Object
(
iterable
)
)
{
this
.
iterator
=
iterable
[
Symbol
.
asyncIterator
]
(
)
;
}
else
if
(
Symbol
.
iterator
in
Object
(
iterable
)
)
{
this
.
iterator
=
iterable
[
Symbol
.
iterator
]
(
)
;
}
else
{
throw
new
TypeError
(
"
Argument
must
implement
the
iteration
protocol
.
"
)
;
}
this
.
seen
=
[
]
;
}
[
Symbol
.
iterator
]
(
)
{
const
{
seen
iterator
}
=
this
;
let
cur
=
0
;
return
{
next
(
)
{
if
(
seen
.
length
<
=
cur
)
{
seen
.
push
(
iterator
.
next
(
)
)
;
}
return
seen
[
cur
+
+
]
;
}
}
;
}
[
Symbol
.
asyncIterator
]
(
)
{
const
{
seen
iterator
}
=
this
;
let
cur
=
0
;
return
{
async
next
(
)
{
if
(
seen
.
length
<
=
cur
)
{
seen
.
push
(
await
iterator
.
next
(
)
)
;
}
return
seen
[
cur
+
+
]
;
}
}
;
}
touchNext
(
)
{
const
{
seen
iterator
}
=
this
;
if
(
seen
.
length
=
=
=
0
|
|
seen
[
seen
.
length
-
1
]
.
done
=
=
=
false
)
{
seen
.
push
(
iterator
.
next
(
)
)
;
}
}
}
class
L10nError
extends
Error
{
constructor
(
message
)
{
super
(
)
;
this
.
name
=
"
L10nError
"
;
this
.
message
=
message
;
}
}
function
defaultGenerateMessages
(
resourceIds
)
{
const
appLocales
=
Services
.
locale
.
getAppLocalesAsLangTags
(
)
;
return
L10nRegistry
.
generateContexts
(
appLocales
resourceIds
)
;
}
class
Localization
{
constructor
(
resourceIds
generateMessages
=
defaultGenerateMessages
)
{
this
.
resourceIds
=
resourceIds
;
this
.
generateMessages
=
generateMessages
;
this
.
ctxs
=
new
CachedIterable
(
this
.
generateMessages
(
this
.
resourceIds
)
)
;
}
async
formatWithFallback
(
keys
method
)
{
const
translations
=
[
]
;
for
await
(
let
ctx
of
this
.
ctxs
)
{
if
(
typeof
ctx
.
then
=
=
=
"
function
"
)
{
ctx
=
await
ctx
;
}
const
errors
=
keysFromContext
(
method
ctx
keys
translations
)
;
if
(
!
errors
)
{
break
;
}
}
return
translations
;
}
formatMessages
(
keys
)
{
return
this
.
formatWithFallback
(
keys
messageFromContext
)
;
}
formatValues
(
keys
)
{
return
this
.
formatWithFallback
(
keys
valueFromContext
)
;
}
async
formatValue
(
id
args
)
{
const
[
val
]
=
await
this
.
formatValues
(
[
[
id
args
]
]
)
;
return
val
;
}
registerObservers
(
)
{
Services
.
obs
.
addObserver
(
this
"
intl
:
app
-
locales
-
changed
"
true
)
;
}
unregisterObservers
(
)
{
Services
.
obs
.
removeObserver
(
this
"
intl
:
app
-
locales
-
changed
"
)
;
}
observe
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
intl
:
app
-
locales
-
changed
"
:
this
.
onLanguageChange
(
)
;
break
;
default
:
break
;
}
}
onLanguageChange
(
)
{
this
.
ctxs
=
new
CachedIterable
(
this
.
generateMessages
(
this
.
resourceIds
)
)
;
}
}
Localization
.
prototype
.
QueryInterface
=
XPCOMUtils
.
generateQI
(
[
Ci
.
nsISupportsWeakReference
]
)
;
function
valueFromContext
(
ctx
errors
id
args
)
{
const
msg
=
ctx
.
getMessage
(
id
)
;
if
(
msg
=
=
=
undefined
)
{
errors
.
push
(
new
L10nError
(
Unknown
entity
:
{
id
}
)
)
;
return
id
;
}
return
ctx
.
format
(
msg
args
errors
)
;
}
function
messageFromContext
(
ctx
errors
id
args
)
{
const
msg
=
ctx
.
getMessage
(
id
)
;
if
(
msg
=
=
=
undefined
)
{
errors
.
push
(
new
L10nError
(
Unknown
message
:
{
id
}
)
)
;
return
{
value
:
id
attrs
:
null
}
;
}
const
formatted
=
{
value
:
ctx
.
format
(
msg
args
errors
)
attrs
:
null
}
;
if
(
msg
.
attrs
)
{
formatted
.
attrs
=
[
]
;
for
(
const
attrName
in
msg
.
attrs
)
{
const
formattedAttr
=
ctx
.
format
(
msg
.
attrs
[
attrName
]
args
errors
)
;
if
(
formattedAttr
!
=
=
null
)
{
formatted
.
attrs
.
push
(
[
attrName
formattedAttr
]
)
;
}
}
}
return
formatted
;
}
function
keysFromContext
(
method
ctx
keys
translations
)
{
const
messageErrors
=
[
]
;
let
hasErrors
=
false
;
keys
.
forEach
(
(
key
i
)
=
>
{
if
(
translations
[
i
]
!
=
=
undefined
)
{
return
;
}
messageErrors
.
length
=
0
;
const
translation
=
method
(
ctx
messageErrors
key
[
0
]
key
[
1
]
)
;
if
(
messageErrors
.
length
=
=
=
0
|
|
!
messageErrors
.
some
(
e
=
>
e
instanceof
L10nError
)
)
{
translations
[
i
]
=
translation
;
}
else
{
hasErrors
=
true
;
}
if
(
messageErrors
.
length
)
{
const
{
console
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Console
.
jsm
"
{
}
)
;
messageErrors
.
forEach
(
error
=
>
console
.
warn
(
error
)
)
;
}
}
)
;
return
hasErrors
;
}
this
.
Localization
=
Localization
;
var
EXPORTED_SYMBOLS
=
[
"
Localization
"
]
;
