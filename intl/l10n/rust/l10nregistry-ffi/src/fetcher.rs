use
l10nregistry
:
:
source
:
:
{
FileFetcher
ResourceId
}
;
use
std
:
:
{
borrow
:
:
Cow
io
}
;
pub
struct
GeckoFileFetcher
;
fn
try_string_from_box_u8
(
input
:
Box
<
[
u8
]
>
)
-
>
io
:
:
Result
<
String
>
{
String
:
:
from_utf8
(
input
.
into
(
)
)
.
map_err
(
|
err
|
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
InvalidData
err
.
utf8_error
(
)
)
)
}
fn
get_path_for_gecko
<
'
s
>
(
input
:
&
'
s
str
)
-
>
Cow
<
'
s
str
>
{
if
input
.
contains
(
"
ja
-
JP
-
macos
"
)
{
input
.
replace
(
"
ja
-
JP
-
macos
"
"
ja
-
JP
-
mac
"
)
.
into
(
)
}
else
{
input
.
into
(
)
}
}
#
[
async_trait
:
:
async_trait
(
?
Send
)
]
impl
FileFetcher
for
GeckoFileFetcher
{
fn
fetch_sync
(
&
self
resource_id
:
&
ResourceId
)
-
>
io
:
:
Result
<
String
>
{
let
path
=
get_path_for_gecko
(
&
resource_id
.
value
)
;
crate
:
:
load
:
:
load_sync
(
path
)
.
and_then
(
try_string_from_box_u8
)
}
async
fn
fetch
(
&
self
resource_id
:
&
ResourceId
)
-
>
io
:
:
Result
<
String
>
{
let
path
=
get_path_for_gecko
(
&
resource_id
.
value
)
;
crate
:
:
load
:
:
load_async
(
path
)
.
await
.
and_then
(
try_string_from_box_u8
)
}
}
pub
struct
MockFileFetcher
{
fs
:
Vec
<
(
String
String
)
>
}
impl
MockFileFetcher
{
pub
fn
new
(
fs
:
Vec
<
(
String
String
)
>
)
-
>
Self
{
Self
{
fs
}
}
}
#
[
async_trait
:
:
async_trait
(
?
Send
)
]
impl
FileFetcher
for
MockFileFetcher
{
fn
fetch_sync
(
&
self
resource_id
:
&
ResourceId
)
-
>
io
:
:
Result
<
String
>
{
for
(
p
source
)
in
&
self
.
fs
{
if
p
=
=
&
resource_id
.
value
{
return
Ok
(
source
.
clone
(
)
)
;
}
}
Err
(
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
NotFound
"
File
not
found
"
)
)
}
async
fn
fetch
(
&
self
resource_id
:
&
ResourceId
)
-
>
io
:
:
Result
<
String
>
{
self
.
fetch_sync
(
resource_id
)
}
}
