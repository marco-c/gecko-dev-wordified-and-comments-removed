pub
use
fluent
:
:
FluentResource
;
use
nsstring
:
:
nsACString
;
use
std
:
:
mem
;
use
std
:
:
rc
:
:
Rc
;
#
[
no_mangle
]
pub
extern
"
C
"
fn
fluent_resource_new
(
name
:
&
nsACString
has_errors
:
&
mut
bool
)
-
>
*
const
FluentResource
{
let
res
=
match
FluentResource
:
:
try_new
(
name
.
to_string
(
)
)
{
Ok
(
res
)
=
>
{
*
has_errors
=
false
;
res
}
Err
(
(
res
_
)
)
=
>
{
*
has_errors
=
true
;
res
}
}
;
Rc
:
:
into_raw
(
Rc
:
:
new
(
res
)
)
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
fluent_resource_addref
(
res
:
&
FluentResource
)
{
let
raw
=
Rc
:
:
from_raw
(
res
)
;
mem
:
:
forget
(
Rc
:
:
clone
(
&
raw
)
)
;
mem
:
:
forget
(
raw
)
;
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
fluent_resource_release
(
res
:
&
FluentResource
)
{
let
_
=
Rc
:
:
from_raw
(
res
)
;
}
