#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
intl
/
LocaleCanonicalizer
.
h
"
#
include
"
mozilla
/
Span
.
h
"
namespace
mozilla
:
:
intl
{
static
void
CheckLocaleResult
(
LocaleCanonicalizer
:
:
Vector
&
ascii
const
char
*
before
const
char
*
after
)
{
auto
result
=
LocaleCanonicalizer
:
:
CanonicalizeICULevel1
(
before
ascii
)
;
ASSERT_TRUE
(
result
.
isOk
(
)
)
;
ASSERT_EQ
(
Span
(
const_cast
<
const
char
*
>
(
ascii
.
begin
(
)
)
ascii
.
length
(
)
)
MakeStringSpan
(
after
)
)
;
}
TEST
(
IntlLocaleCanonicalizer
CanonicalizeICULevel1
)
{
LocaleCanonicalizer
:
:
Vector
ascii
{
}
;
CheckLocaleResult
(
ascii
"
en
-
US
"
"
en_US
"
)
;
CheckLocaleResult
(
ascii
"
en
-
US
-
posix
"
"
en_US_POSIX
"
)
;
CheckLocaleResult
(
ascii
"
und
"
"
"
)
;
CheckLocaleResult
(
ascii
"
asdf
"
"
asdf
"
)
;
CheckLocaleResult
(
ascii
"
es
-
es
"
"
es_ES
"
)
;
CheckLocaleResult
(
ascii
"
en
-
USA
"
"
en_US
"
)
;
CheckLocaleResult
(
ascii
"
fr
-
fr
EURO
"
"
fr_FR_EURO
"
)
;
CheckLocaleResult
(
ascii
"
ar
-
MA
.
utf8
"
"
ar_MA
"
)
;
CheckLocaleResult
(
ascii
"
abcdefghijlkmnopqrstuvwxyzABCDEFGHIJLKMNOPQRSTUVWXYZ
-
_
.
0123456789
"
"
abcdefghijlkmnopqrstuvwxyzabcdefghijlkmnopqrstuvwxyz__
"
)
;
CheckLocaleResult
(
ascii
"
exotic
ascii
:
"
"
exotic
ascii
:
"
)
;
ASSERT_EQ
(
LocaleCanonicalizer
:
:
CanonicalizeICULevel1
(
"
"
ascii
)
.
unwrapErr
(
)
ICUError
:
:
InternalError
)
;
ASSERT_EQ
(
LocaleCanonicalizer
:
:
CanonicalizeICULevel1
(
"
"
ascii
)
.
unwrapErr
(
)
ICUError
:
:
InternalError
)
;
}
}
