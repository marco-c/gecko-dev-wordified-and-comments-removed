#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
intl
/
ListFormat
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
TestBuffer
.
h
"
namespace
mozilla
:
:
intl
{
TEST
(
IntlListFormat
FormatDefault
)
{
ListFormat
:
:
Options
options
;
UniquePtr
<
ListFormat
>
lf
=
ListFormat
:
:
TryCreate
(
"
en
-
US
"
options
)
.
unwrap
(
)
;
ListFormat
:
:
StringList
list
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Alice
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Bob
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Charlie
"
)
)
)
;
TestBuffer
<
char16_t
>
buf16
;
ASSERT_TRUE
(
lf
-
>
Format
(
list
buf16
)
.
isOk
(
)
)
;
ASSERT_EQ
(
buf16
.
get_string_view
(
)
u
"
Alice
Bob
and
Charlie
"
)
;
UniquePtr
<
ListFormat
>
lfDe
=
ListFormat
:
:
TryCreate
(
"
de
"
options
)
.
unwrap
(
)
;
ASSERT_TRUE
(
lfDe
-
>
Format
(
list
buf16
)
.
isOk
(
)
)
;
ASSERT_EQ
(
buf16
.
get_string_view
(
)
u
"
Alice
Bob
und
Charlie
"
)
;
}
TEST
(
IntlListFormat
FormatConjunction
)
{
ListFormat
:
:
Options
options
{
ListFormat
:
:
Type
:
:
Conjunction
ListFormat
:
:
Style
:
:
Narrow
}
;
UniquePtr
<
ListFormat
>
lf
=
ListFormat
:
:
TryCreate
(
"
en
-
US
"
options
)
.
unwrap
(
)
;
ListFormat
:
:
StringList
list
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Alice
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Bob
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Charlie
"
)
)
)
;
TestBuffer
<
char16_t
>
buf16
;
ASSERT_TRUE
(
lf
-
>
Format
(
list
buf16
)
.
isOk
(
)
)
;
ASSERT_EQ
(
buf16
.
get_string_view
(
)
u
"
Alice
Bob
Charlie
"
)
;
ListFormat
:
:
Options
optionsSh
{
ListFormat
:
:
Type
:
:
Conjunction
ListFormat
:
:
Style
:
:
Short
}
;
UniquePtr
<
ListFormat
>
lfSh
=
ListFormat
:
:
TryCreate
(
"
en
-
US
"
optionsSh
)
.
unwrap
(
)
;
ASSERT_TRUE
(
lfSh
-
>
Format
(
list
buf16
)
.
isOk
(
)
)
;
ASSERT_EQ
(
buf16
.
get_string_view
(
)
u
"
Alice
Bob
&
Charlie
"
)
;
}
TEST
(
IntlListFormat
FormatDisjunction
)
{
ListFormat
:
:
Options
options
{
ListFormat
:
:
Type
:
:
Disjunction
ListFormat
:
:
Style
:
:
Long
}
;
UniquePtr
<
ListFormat
>
lf
=
ListFormat
:
:
TryCreate
(
"
en
-
US
"
options
)
.
unwrap
(
)
;
ListFormat
:
:
StringList
list
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Alice
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Bob
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Charlie
"
)
)
)
;
TestBuffer
<
char16_t
>
buf16
;
ASSERT_TRUE
(
lf
-
>
Format
(
list
buf16
)
.
isOk
(
)
)
;
ASSERT_EQ
(
buf16
.
get_string_view
(
)
u
"
Alice
Bob
or
Charlie
"
)
;
}
TEST
(
IntlListFormat
FormatUnit
)
{
ListFormat
:
:
Options
options
{
ListFormat
:
:
Type
:
:
Unit
ListFormat
:
:
Style
:
:
Long
}
;
UniquePtr
<
ListFormat
>
lf
=
ListFormat
:
:
TryCreate
(
"
en
-
US
"
options
)
.
unwrap
(
)
;
ListFormat
:
:
StringList
list
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Alice
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Bob
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Charlie
"
)
)
)
;
TestBuffer
<
char16_t
>
buf16
;
ASSERT_TRUE
(
lf
-
>
Format
(
list
buf16
)
.
isOk
(
)
)
;
ASSERT_EQ
(
buf16
.
get_string_view
(
)
u
"
Alice
Bob
Charlie
"
)
;
ListFormat
:
:
Options
optionsNa
{
ListFormat
:
:
Type
:
:
Unit
ListFormat
:
:
Style
:
:
Narrow
}
;
UniquePtr
<
ListFormat
>
lfNa
=
ListFormat
:
:
TryCreate
(
"
en
-
US
"
optionsNa
)
.
unwrap
(
)
;
ASSERT_TRUE
(
lfNa
-
>
Format
(
list
buf16
)
.
isOk
(
)
)
;
ASSERT_EQ
(
buf16
.
get_string_view
(
)
u
"
Alice
Bob
Charlie
"
)
;
}
TEST
(
IntlListFormat
FormatBufferLength
)
{
ListFormat
:
:
Options
options
;
UniquePtr
<
ListFormat
>
lf
=
ListFormat
:
:
TryCreate
(
"
en
-
US
"
options
)
.
unwrap
(
)
;
ListFormat
:
:
StringList
list
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Alice
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Bob
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Charlie
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
David
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Eve
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Frank
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Grace
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Heidi
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Ivan
"
)
)
)
;
TestBuffer
<
char16_t
>
buf16
;
ASSERT_TRUE
(
lf
-
>
Format
(
list
buf16
)
.
isOk
(
)
)
;
ASSERT_EQ
(
buf16
.
get_string_view
(
)
u
"
Alice
Bob
Charlie
David
Eve
Frank
Grace
Heidi
and
Ivan
"
)
;
}
TEST
(
IntlListFormat
FormatToParts
)
{
ListFormat
:
:
Options
options
;
UniquePtr
<
ListFormat
>
lf
=
ListFormat
:
:
TryCreate
(
"
en
-
US
"
options
)
.
unwrap
(
)
;
ListFormat
:
:
StringList
list
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Alice
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Bob
"
)
)
)
;
MOZ_RELEASE_ASSERT
(
list
.
append
(
MakeStringSpan
(
u
"
Charlie
"
)
)
)
;
ListFormat
:
:
PartVector
parts
;
ASSERT_TRUE
(
lf
-
>
FormatToParts
(
list
parts
)
.
isOk
(
)
)
;
ASSERT_EQ
(
parts
.
length
(
)
5u
)
;
ASSERT_EQ
(
parts
[
0
]
(
ListFormat
:
:
Part
{
ListFormat
:
:
PartType
:
:
Element
MakeStringSpan
(
u
"
Alice
"
)
}
)
)
;
ASSERT_EQ
(
parts
[
1
]
(
ListFormat
:
:
Part
{
ListFormat
:
:
PartType
:
:
Literal
MakeStringSpan
(
u
"
"
)
}
)
)
;
ASSERT_EQ
(
parts
[
2
]
(
ListFormat
:
:
Part
{
ListFormat
:
:
PartType
:
:
Element
MakeStringSpan
(
u
"
Bob
"
)
}
)
)
;
ASSERT_EQ
(
parts
[
3
]
(
ListFormat
:
:
Part
{
ListFormat
:
:
PartType
:
:
Literal
MakeStringSpan
(
u
"
and
"
)
}
)
)
;
ASSERT_EQ
(
parts
[
4
]
(
ListFormat
:
:
Part
{
ListFormat
:
:
PartType
:
:
Element
MakeStringSpan
(
u
"
Charlie
"
)
}
)
)
;
}
}
