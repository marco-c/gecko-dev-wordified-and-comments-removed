#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
intl
/
IDNA
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
TestBuffer
.
h
"
namespace
mozilla
:
:
intl
{
TEST
(
IntlIDNA
LabelToUnicodeBasic
)
{
auto
createResult
=
IDNA
:
:
TryCreate
(
IDNA
:
:
ProcessingType
:
:
NonTransitional
)
;
ASSERT_TRUE
(
createResult
.
isOk
(
)
)
;
auto
idna
=
createResult
.
unwrap
(
)
;
TestBuffer
<
char16_t
>
buf16
;
auto
convertResult
=
idna
-
>
LabelToUnicode
(
MakeStringSpan
(
u
"
Aa
\
u00aa
"
)
buf16
)
;
ASSERT_TRUE
(
convertResult
.
isOk
(
)
)
;
intl
:
:
IDNA
:
:
Info
info
=
convertResult
.
unwrap
(
)
;
ASSERT_TRUE
(
!
info
.
HasErrors
(
)
)
;
ASSERT_EQ
(
buf16
.
get_string_view
(
)
u
"
aaa
"
)
;
buf16
.
clear
(
)
;
convertResult
=
idna
-
>
LabelToUnicode
(
MakeStringSpan
(
u
"
Fa
"
)
buf16
)
;
ASSERT_TRUE
(
convertResult
.
isOk
(
)
)
;
info
=
convertResult
.
unwrap
(
)
;
ASSERT_TRUE
(
!
info
.
HasErrors
(
)
)
;
ASSERT_EQ
(
buf16
.
get_string_view
(
)
u
"
fa
"
)
;
}
TEST
(
IntlIDNA
LabelToUnicodeBasicTransitional
)
{
auto
createResult
=
IDNA
:
:
TryCreate
(
IDNA
:
:
ProcessingType
:
:
Transitional
)
;
ASSERT_TRUE
(
createResult
.
isOk
(
)
)
;
auto
idna
=
createResult
.
unwrap
(
)
;
TestBuffer
<
char16_t
>
buf16
;
auto
convertResult
=
idna
-
>
LabelToUnicode
(
MakeStringSpan
(
u
"
Fa
"
)
buf16
)
;
ASSERT_TRUE
(
convertResult
.
isOk
(
)
)
;
intl
:
:
IDNA
:
:
Info
info
=
convertResult
.
unwrap
(
)
;
ASSERT_TRUE
(
!
info
.
HasErrors
(
)
)
;
ASSERT_EQ
(
buf16
.
get_string_view
(
)
u
"
fass
"
)
;
}
TEST
(
IntlIDNA
LabelToUnicodeHasErrors
)
{
auto
createResult
=
IDNA
:
:
TryCreate
(
IDNA
:
:
ProcessingType
:
:
NonTransitional
)
;
ASSERT_TRUE
(
createResult
.
isOk
(
)
)
;
auto
idna
=
createResult
.
unwrap
(
)
;
TestBuffer
<
char16_t
>
buf16
;
auto
convertResult
=
idna
-
>
LabelToUnicode
(
MakeStringSpan
(
u
"
\
u0378
"
)
buf16
)
;
ASSERT_TRUE
(
convertResult
.
isOk
(
)
)
;
intl
:
:
IDNA
:
:
Info
info
=
convertResult
.
unwrap
(
)
;
ASSERT_TRUE
(
info
.
HasErrors
(
)
)
;
buf16
.
clear
(
)
;
convertResult
=
idna
-
>
LabelToUnicode
(
MakeStringSpan
(
u
"
a
.
b
"
)
buf16
)
;
ASSERT_TRUE
(
convertResult
.
isOk
(
)
)
;
info
=
convertResult
.
unwrap
(
)
;
ASSERT_TRUE
(
info
.
HasErrors
(
)
)
;
}
TEST
(
IntlIDNA
LabelToUnicodeHasInvalidPunycode
)
{
auto
createResult
=
IDNA
:
:
TryCreate
(
IDNA
:
:
ProcessingType
:
:
NonTransitional
)
;
ASSERT_TRUE
(
createResult
.
isOk
(
)
)
;
auto
idna
=
createResult
.
unwrap
(
)
;
TestBuffer
<
char16_t
>
buf16
;
auto
convertResult
=
idna
-
>
LabelToUnicode
(
MakeStringSpan
(
u
"
xn
-
-
a
-
ecp
.
ru
"
)
buf16
)
;
ASSERT_TRUE
(
convertResult
.
isOk
(
)
)
;
intl
:
:
IDNA
:
:
Info
info
=
convertResult
.
unwrap
(
)
;
ASSERT_TRUE
(
info
.
HasInvalidPunycode
(
)
)
;
buf16
.
clear
(
)
;
convertResult
=
idna
-
>
LabelToUnicode
(
MakeStringSpan
(
u
"
xn
-
-
0
.
pt
"
)
buf16
)
;
ASSERT_TRUE
(
convertResult
.
isOk
(
)
)
;
info
=
convertResult
.
unwrap
(
)
;
ASSERT_TRUE
(
info
.
HasInvalidPunycode
(
)
)
;
}
TEST
(
IntlIDNA
LabelToUnicodeHasInvalidHyphen
)
{
auto
createResult
=
IDNA
:
:
TryCreate
(
IDNA
:
:
ProcessingType
:
:
NonTransitional
)
;
ASSERT_TRUE
(
createResult
.
isOk
(
)
)
;
auto
idna
=
createResult
.
unwrap
(
)
;
TestBuffer
<
char16_t
>
buf16
;
auto
convertResult
=
idna
-
>
LabelToUnicode
(
MakeStringSpan
(
u
"
-
a
"
)
buf16
)
;
ASSERT_TRUE
(
convertResult
.
isOk
(
)
)
;
intl
:
:
IDNA
:
:
Info
info
=
convertResult
.
unwrap
(
)
;
ASSERT_TRUE
(
info
.
HasErrors
(
)
)
;
ASSERT_TRUE
(
info
.
HasInvalidHyphen
(
)
)
;
buf16
.
clear
(
)
;
convertResult
=
idna
-
>
LabelToUnicode
(
MakeStringSpan
(
u
"
a
-
"
)
buf16
)
;
ASSERT_TRUE
(
convertResult
.
isOk
(
)
)
;
info
=
convertResult
.
unwrap
(
)
;
ASSERT_TRUE
(
info
.
HasInvalidHyphen
(
)
)
;
buf16
.
clear
(
)
;
convertResult
=
idna
-
>
LabelToUnicode
(
MakeStringSpan
(
u
"
ab
-
-
c
"
)
buf16
)
;
ASSERT_TRUE
(
convertResult
.
isOk
(
)
)
;
info
=
convertResult
.
unwrap
(
)
;
ASSERT_TRUE
(
info
.
HasInvalidHyphen
(
)
)
;
}
}
