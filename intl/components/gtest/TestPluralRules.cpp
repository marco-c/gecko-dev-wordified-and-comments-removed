#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
mozilla
/
intl
/
PluralRules
.
h
"
#
define
TEST_SELECT
(
actual
expected
)
\
do
{
\
ASSERT_TRUE
(
actual
.
isOk
(
)
)
;
\
ASSERT_EQ
(
actual
.
unwrap
(
)
expected
)
;
\
}
while
(
false
)
namespace
mozilla
{
namespace
intl
{
TEST
(
IntlPluralRules
CategoriesEnCardinal
)
{
PluralRulesOptions
defaultOptions
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
en
"
defaultOptions
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
auto
catResult
=
pr
-
>
Categories
(
)
;
ASSERT_TRUE
(
catResult
.
isOk
(
)
)
;
auto
categories
=
catResult
.
unwrap
(
)
;
ASSERT_EQ
(
categories
.
size
(
)
2u
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
One
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Other
)
)
;
}
TEST
(
IntlPluralRules
CategoriesEnOrdinal
)
{
PluralRulesOptions
options
;
options
.
mPluralType
=
PluralRules
:
:
Type
:
:
Ordinal
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
en
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
auto
catResult
=
pr
-
>
Categories
(
)
;
ASSERT_TRUE
(
catResult
.
isOk
(
)
)
;
auto
categories
=
catResult
.
unwrap
(
)
;
ASSERT_EQ
(
categories
.
size
(
)
4u
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Few
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
One
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Other
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Two
)
)
;
}
TEST
(
IntlPluralRules
CategoriesCyCardinal
)
{
PluralRulesOptions
defaultOptions
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
cy
"
defaultOptions
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
auto
catResult
=
pr
-
>
Categories
(
)
;
ASSERT_TRUE
(
catResult
.
isOk
(
)
)
;
auto
categories
=
catResult
.
unwrap
(
)
;
ASSERT_EQ
(
categories
.
size
(
)
6u
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Few
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
One
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Other
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Many
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Two
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Zero
)
)
;
}
TEST
(
IntlPluralRules
CategoriesCyOrdinal
)
{
PluralRulesOptions
options
;
options
.
mPluralType
=
PluralRules
:
:
Type
:
:
Ordinal
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
cy
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
auto
catResult
=
pr
-
>
Categories
(
)
;
ASSERT_TRUE
(
catResult
.
isOk
(
)
)
;
auto
categories
=
catResult
.
unwrap
(
)
;
ASSERT_EQ
(
categories
.
size
(
)
6u
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Few
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
One
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Other
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Many
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Two
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Zero
)
)
;
}
TEST
(
IntlPluralRules
CategoriesBrCardinal
)
{
PluralRulesOptions
defaultOptions
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
br
"
defaultOptions
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
auto
catResult
=
pr
-
>
Categories
(
)
;
ASSERT_TRUE
(
catResult
.
isOk
(
)
)
;
auto
categories
=
catResult
.
unwrap
(
)
;
ASSERT_EQ
(
categories
.
size
(
)
5u
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Few
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
One
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Other
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Many
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Two
)
)
;
}
TEST
(
IntlPluralRules
CategoriesBrOrdinal
)
{
PluralRulesOptions
options
;
options
.
mPluralType
=
PluralRules
:
:
Type
:
:
Ordinal
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
br
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
auto
catResult
=
pr
-
>
Categories
(
)
;
ASSERT_TRUE
(
catResult
.
isOk
(
)
)
;
auto
categories
=
catResult
.
unwrap
(
)
;
ASSERT_EQ
(
categories
.
size
(
)
1u
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Other
)
)
;
}
TEST
(
IntlPluralRules
CategoriesHsbCardinal
)
{
PluralRulesOptions
defaultOptions
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
hsb
"
defaultOptions
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
auto
catResult
=
pr
-
>
Categories
(
)
;
ASSERT_TRUE
(
catResult
.
isOk
(
)
)
;
auto
categories
=
catResult
.
unwrap
(
)
;
ASSERT_EQ
(
categories
.
size
(
)
4u
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Few
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
One
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Other
)
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Two
)
)
;
}
TEST
(
IntlPluralRules
CategoriesHsbOrdinal
)
{
PluralRulesOptions
options
;
options
.
mPluralType
=
PluralRules
:
:
Type
:
:
Ordinal
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
hsb
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
auto
catResult
=
pr
-
>
Categories
(
)
;
ASSERT_TRUE
(
catResult
.
isOk
(
)
)
;
auto
categories
=
catResult
.
unwrap
(
)
;
ASSERT_EQ
(
categories
.
size
(
)
1u
)
;
ASSERT_TRUE
(
categories
.
contains
(
PluralRules
:
:
Keyword
:
:
Other
)
)
;
}
TEST
(
IntlPluralRules
CategoriesSortOrder
)
{
PluralRulesOptions
defaultOptions
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
cy
"
defaultOptions
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
PluralRules
:
:
Keyword
expected
[
]
=
{
PluralRules
:
:
Keyword
:
:
Few
PluralRules
:
:
Keyword
:
:
Many
PluralRules
:
:
Keyword
:
:
One
PluralRules
:
:
Keyword
:
:
Other
PluralRules
:
:
Keyword
:
:
Two
PluralRules
:
:
Keyword
:
:
Zero
}
;
size_t
index
=
0
;
auto
catResult
=
pr
-
>
Categories
(
)
;
ASSERT_TRUE
(
catResult
.
isOk
(
)
)
;
auto
categories
=
catResult
.
unwrap
(
)
;
for
(
const
PluralRules
:
:
Keyword
keyword
:
categories
)
{
ASSERT_EQ
(
keyword
expected
[
index
+
+
]
)
;
}
}
TEST
(
IntlPluralRules
SelectEnCardinal
)
{
PluralRulesOptions
defaultOptions
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
en
"
defaultOptions
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
00
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
01
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
99
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
SelectEnOrdinal
)
{
PluralRulesOptions
options
;
options
.
mPluralType
=
PluralRules
:
:
Type
:
:
Ordinal
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
en
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
01
.
00
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
21
.
00
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
31
.
00
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
41
.
00
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
02
.
00
)
PluralRules
:
:
Keyword
:
:
Two
)
;
TEST_SELECT
(
pr
-
>
Select
(
22
.
00
)
PluralRules
:
:
Keyword
:
:
Two
)
;
TEST_SELECT
(
pr
-
>
Select
(
32
.
00
)
PluralRules
:
:
Keyword
:
:
Two
)
;
TEST_SELECT
(
pr
-
>
Select
(
42
.
00
)
PluralRules
:
:
Keyword
:
:
Two
)
;
TEST_SELECT
(
pr
-
>
Select
(
03
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
23
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
33
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
43
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
00
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
11
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
12
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
13
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
SelectCyCardinal
)
{
PluralRulesOptions
defaultOptions
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
cy
"
defaultOptions
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
00
)
PluralRules
:
:
Keyword
:
:
Zero
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
00
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
2
.
00
)
PluralRules
:
:
Keyword
:
:
Two
)
;
TEST_SELECT
(
pr
-
>
Select
(
3
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
4
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
5
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
6
.
00
)
PluralRules
:
:
Keyword
:
:
Many
)
;
TEST_SELECT
(
pr
-
>
Select
(
7
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
SelectCyOrdinal
)
{
PluralRulesOptions
options
;
options
.
mPluralType
=
PluralRules
:
:
Type
:
:
Ordinal
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
cy
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
00
)
PluralRules
:
:
Keyword
:
:
Zero
)
;
TEST_SELECT
(
pr
-
>
Select
(
7
.
00
)
PluralRules
:
:
Keyword
:
:
Zero
)
;
TEST_SELECT
(
pr
-
>
Select
(
8
.
00
)
PluralRules
:
:
Keyword
:
:
Zero
)
;
TEST_SELECT
(
pr
-
>
Select
(
9
.
00
)
PluralRules
:
:
Keyword
:
:
Zero
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
00
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
2
.
00
)
PluralRules
:
:
Keyword
:
:
Two
)
;
TEST_SELECT
(
pr
-
>
Select
(
3
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
4
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
5
.
00
)
PluralRules
:
:
Keyword
:
:
Many
)
;
TEST_SELECT
(
pr
-
>
Select
(
6
.
00
)
PluralRules
:
:
Keyword
:
:
Many
)
;
TEST_SELECT
(
pr
-
>
Select
(
10
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
11
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
SelectBrCardinal
)
{
PluralRulesOptions
defaultOptions
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
br
"
defaultOptions
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
00
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
01
.
00
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
11
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
21
.
00
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
31
.
00
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
02
.
00
)
PluralRules
:
:
Keyword
:
:
Two
)
;
TEST_SELECT
(
pr
-
>
Select
(
12
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
22
.
00
)
PluralRules
:
:
Keyword
:
:
Two
)
;
TEST_SELECT
(
pr
-
>
Select
(
32
.
00
)
PluralRules
:
:
Keyword
:
:
Two
)
;
TEST_SELECT
(
pr
-
>
Select
(
03
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
04
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
09
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
23
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
1000000
)
PluralRules
:
:
Keyword
:
:
Many
)
;
TEST_SELECT
(
pr
-
>
Select
(
999999
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
1000005
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
SelectBrOrdinal
)
{
PluralRulesOptions
options
;
options
.
mPluralType
=
PluralRules
:
:
Type
:
:
Ordinal
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
br
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
00
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
01
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
11
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
21
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
31
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
02
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
12
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
22
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
32
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
03
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
04
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
09
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
23
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
1000000
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
999999
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
1000005
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
SelectHsbCardinal
)
{
PluralRulesOptions
defaultOptions
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
hsb
"
defaultOptions
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
00
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
101
.
00
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
2
.
00
)
PluralRules
:
:
Keyword
:
:
Two
)
;
TEST_SELECT
(
pr
-
>
Select
(
102
.
00
)
PluralRules
:
:
Keyword
:
:
Two
)
;
TEST_SELECT
(
pr
-
>
Select
(
3
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
4
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
103
.
00
)
PluralRules
:
:
Keyword
:
:
Few
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
5
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
19
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
100
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
SelectHsbOrdinal
)
{
PluralRulesOptions
options
;
options
.
mPluralType
=
PluralRules
:
:
Type
:
:
Ordinal
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
hsb
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
00
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
01
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
11
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
21
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
31
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
02
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
12
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
22
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
32
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
03
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
04
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
09
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
23
.
00
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
1000000
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
999999
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
1000005
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
DefaultFractionDigits
)
{
PluralRulesOptions
defaultOptions
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
en
"
defaultOptions
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
000
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
100
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
010
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
001
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
900
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
990
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
999
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
MaxFractionDigitsZero
)
{
PluralRulesOptions
options
;
options
.
mFractionDigits
=
Some
(
std
:
:
pair
<
uint32_t
uint32_t
>
(
0
0
)
)
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
en
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
000
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
100
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
010
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
001
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
900
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
990
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
999
)
PluralRules
:
:
Keyword
:
:
One
)
;
}
TEST
(
IntlPluralRules
MaxFractionDigitsOne
)
{
PluralRulesOptions
options
;
options
.
mFractionDigits
=
Some
(
std
:
:
pair
<
uint32_t
uint32_t
>
(
0
1
)
)
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
en
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
000
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
010
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
001
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
990
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
999
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
100
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
900
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
MaxSignificantDigitsOne
)
{
PluralRulesOptions
options
;
options
.
mSignificantDigits
=
Some
(
std
:
:
pair
<
uint32_t
uint32_t
>
(
1
1
)
)
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
en
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
000
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
100
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
010
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
001
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
990
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
999
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
900
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
MaxFractionDigitsTwo
)
{
PluralRulesOptions
options
;
options
.
mFractionDigits
=
Some
(
std
:
:
pair
<
uint32_t
uint32_t
>
(
0
2
)
)
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
en
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
000
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
001
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
999
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
100
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
010
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
900
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
990
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
MaxSignificantDigitsTwo
)
{
PluralRulesOptions
options
;
options
.
mSignificantDigits
=
Some
(
std
:
:
pair
<
uint32_t
uint32_t
>
(
1
2
)
)
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
en
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
000
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
010
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
001
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
999
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
Select
(
1
.
100
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
900
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
Select
(
0
.
990
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
SelectRangeEn
)
{
for
(
auto
type
:
{
PluralRules
:
:
Type
:
:
Cardinal
PluralRules
:
:
Type
:
:
Ordinal
}
)
{
PluralRulesOptions
options
;
options
.
mPluralType
=
type
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
en
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
0
0
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
0
1
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
0
2
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
1
1
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
1
2
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
1
10
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
}
TEST
(
IntlPluralRules
SelectRangeFrCardinal
)
{
PluralRulesOptions
options
;
options
.
mPluralType
=
PluralRules
:
:
Type
:
:
Cardinal
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
fr
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
0
0
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
0
1
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
0
2
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
1
1
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
1
2
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
1
10
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
1
1000000
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
TEST
(
IntlPluralRules
SelectRangeFrOrdinal
)
{
PluralRulesOptions
options
;
options
.
mPluralType
=
PluralRules
:
:
Type
:
:
Ordinal
;
auto
prResult
=
PluralRules
:
:
TryCreate
(
"
fr
"
options
)
;
ASSERT_TRUE
(
prResult
.
isOk
(
)
)
;
auto
pr
=
prResult
.
unwrap
(
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
0
0
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
0
1
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
0
2
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
1
1
)
PluralRules
:
:
Keyword
:
:
One
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
1
2
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
1
10
)
PluralRules
:
:
Keyword
:
:
Other
)
;
TEST_SELECT
(
pr
-
>
SelectRange
(
1
1000000
)
PluralRules
:
:
Keyword
:
:
Other
)
;
}
}
}
