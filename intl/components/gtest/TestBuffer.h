#
ifndef
intl_components_gtest_TestBuffer_h_
#
define
intl_components_gtest_TestBuffer_h_
#
include
<
string_view
>
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
namespace
mozilla
:
:
intl
{
template
<
typename
C
size_t
inlineCapacity
=
0
>
class
TestBuffer
{
public
:
using
CharType
=
C
;
TestBuffer
(
TestBuffer
&
&
other
)
noexcept
=
default
;
TestBuffer
&
operator
=
(
TestBuffer
&
&
other
)
noexcept
=
default
;
explicit
TestBuffer
(
const
size_t
aSize
=
0
)
{
reserve
(
aSize
)
;
}
bool
reserve
(
const
size_t
aSize
)
{
return
mBuffer
.
reserve
(
aSize
)
;
}
CharType
*
data
(
)
{
return
mBuffer
.
begin
(
)
;
}
size_t
length
(
)
const
{
return
mBuffer
.
length
(
)
;
}
size_t
capacity
(
)
const
{
return
mBuffer
.
capacity
(
)
;
}
void
written
(
size_t
aAmount
)
{
MOZ_ASSERT
(
aAmount
<
=
mBuffer
.
capacity
(
)
)
;
mozilla
:
:
DebugOnly
<
bool
>
result
=
mBuffer
.
resizeUninitialized
(
aAmount
)
;
MOZ_ASSERT
(
result
)
;
}
std
:
:
basic_string_view
<
CharType
>
get_string_view
(
)
{
return
std
:
:
basic_string_view
<
CharType
>
(
data
(
)
length
(
)
)
;
}
void
clear
(
)
{
mBuffer
.
clear
(
)
;
}
static
std
:
:
string
toUtf8
(
mozilla
:
:
Span
<
const
char16_t
>
input
)
{
size_t
buff_len
=
input
.
Length
(
)
*
3
;
std
:
:
string
result
(
buff_len
'
'
)
;
result
.
reserve
(
buff_len
)
;
size_t
result_len
=
ConvertUtf16toUtf8
(
input
mozilla
:
:
Span
(
result
.
data
(
)
buff_len
)
)
;
result
.
resize
(
result_len
)
;
return
result
;
}
bool
verboseMatches
(
const
CharType
*
aExpected
)
{
std
:
:
basic_string_view
<
CharType
>
actualSV
(
data
(
)
length
(
)
)
;
std
:
:
basic_string_view
<
CharType
>
expectedSV
(
aExpected
)
;
if
(
actualSV
.
compare
(
expectedSV
)
=
=
0
)
{
return
true
;
}
static_assert
(
std
:
:
is_same_v
<
CharType
char
>
|
|
std
:
:
is_same_v
<
CharType
char16_t
>
)
;
std
:
:
string
actual
;
std
:
:
string
expected
;
const
char
*
startQuote
;
if
constexpr
(
std
:
:
is_same_v
<
CharType
char
>
)
{
actual
=
std
:
:
string
(
actualSV
)
;
expected
=
std
:
:
string
(
expectedSV
)
;
startQuote
=
"
\
"
"
;
}
if
constexpr
(
std
:
:
is_same_v
<
CharType
char16_t
>
)
{
actual
=
toUtf8
(
actualSV
)
;
expected
=
toUtf8
(
expectedSV
)
;
startQuote
=
"
u
\
"
"
;
}
fprintf
(
stderr
"
The
buffer
did
not
match
:
\
n
"
)
;
fprintf
(
stderr
"
Buffer
:
\
n
%
s
%
s
\
"
\
n
"
startQuote
actual
.
c_str
(
)
)
;
fprintf
(
stderr
"
Expected
:
\
n
%
s
%
s
\
"
\
n
"
startQuote
expected
.
c_str
(
)
)
;
return
false
;
}
Vector
<
C
inlineCapacity
>
mBuffer
{
}
;
}
;
}
#
endif
