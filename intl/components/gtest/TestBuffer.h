#
ifndef
intl_components_gtest_TestBuffer_h_
#
define
intl_components_gtest_TestBuffer_h_
#
include
<
string_view
>
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
namespace
mozilla
:
:
intl
{
template
<
typename
C
size_t
inlineCapacity
=
0
>
class
TestBuffer
{
public
:
using
CharType
=
C
;
TestBuffer
(
TestBuffer
&
&
other
)
noexcept
=
default
;
TestBuffer
&
operator
=
(
TestBuffer
&
&
other
)
noexcept
=
default
;
explicit
TestBuffer
(
const
size_t
aSize
=
0
)
{
reserve
(
aSize
)
;
}
bool
reserve
(
const
size_t
aSize
)
{
return
mBuffer
.
reserve
(
aSize
)
;
}
CharType
*
data
(
)
{
return
mBuffer
.
begin
(
)
;
}
size_t
length
(
)
const
{
return
mBuffer
.
length
(
)
;
}
size_t
capacity
(
)
const
{
return
mBuffer
.
capacity
(
)
;
}
void
written
(
size_t
aAmount
)
{
MOZ_ASSERT
(
aAmount
<
=
mBuffer
.
capacity
(
)
)
;
mozilla
:
:
DebugOnly
<
bool
>
result
=
mBuffer
.
resizeUninitialized
(
aAmount
)
;
MOZ_ASSERT
(
result
)
;
}
std
:
:
basic_string_view
<
CharType
>
get_string_view
(
)
{
return
std
:
:
basic_string_view
<
CharType
>
(
data
(
)
length
(
)
)
;
}
void
clear
(
)
{
mBuffer
.
clear
(
)
;
}
Vector
<
C
inlineCapacity
>
mBuffer
{
}
;
}
;
}
#
endif
