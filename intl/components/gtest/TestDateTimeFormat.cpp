#
include
"
gtest
/
gtest
.
h
"
#
include
"
mozilla
/
intl
/
DateTimeFormat
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
.
/
TestBuffer
.
h
"
namespace
mozilla
:
:
intl
{
const
double
DATE
=
1032800850000
.
0
;
static
UniquePtr
<
DateTimeFormat
>
testStyle
(
const
char
*
aLocale
DateTimeStyle
aDateStyle
DateTimeStyle
aTimeStyle
)
{
return
DateTimeFormat
:
:
TryCreateFromStyle
(
MakeStringSpan
(
aLocale
)
aDateStyle
aTimeStyle
Some
(
MakeStringSpan
(
u
"
GMT
+
3
"
)
)
)
.
unwrap
(
)
;
}
TEST
(
IntlDateTimeFormat
Style_enUS_utf8
)
{
auto
dtFormat
=
testStyle
(
"
en
-
US
"
DateTimeStyle
:
:
Medium
DateTimeStyle
:
:
Medium
)
;
TestBuffer
<
uint8_t
>
buffer
;
dtFormat
-
>
TryFormat
(
DATE
buffer
)
.
unwrap
(
)
;
ASSERT_EQ
(
buffer
.
get_string_view
<
char
>
(
)
"
Sep
23
2002
8
:
07
:
30
PM
"
)
;
}
TEST
(
IntlDateTimeFormat
Style_enUS_utf16
)
{
auto
dtFormat
=
testStyle
(
"
en
-
US
"
DateTimeStyle
:
:
Medium
DateTimeStyle
:
:
Medium
)
;
TestBuffer
<
char16_t
>
buffer
;
dtFormat
-
>
TryFormat
(
DATE
buffer
)
.
unwrap
(
)
;
ASSERT_EQ
(
buffer
.
get_string_view
<
char16_t
>
(
)
u
"
Sep
23
2002
8
:
07
:
30
PM
"
)
;
}
TEST
(
IntlDateTimeFormat
Style_ar_utf8
)
{
auto
dtFormat
=
testStyle
(
"
ar
"
DateTimeStyle
:
:
Medium
DateTimeStyle
:
:
None
)
;
TestBuffer
<
uint8_t
>
buffer
;
dtFormat
-
>
TryFormat
(
DATE
buffer
)
.
unwrap
(
)
;
ASSERT_EQ
(
buffer
.
get_string_view
<
char
>
(
)
"
:
:
"
)
;
}
TEST
(
IntlDateTimeFormat
Style_ar_utf16
)
{
auto
dtFormat
=
testStyle
(
"
ar
"
DateTimeStyle
:
:
Medium
DateTimeStyle
:
:
None
)
;
TestBuffer
<
char16_t
>
buffer
;
dtFormat
-
>
TryFormat
(
DATE
buffer
)
.
unwrap
(
)
;
ASSERT_EQ
(
buffer
.
get_string_view
<
char16_t
>
(
)
u
"
:
:
"
)
;
}
TEST
(
IntlDateTimeFormat
Style_enUS_fallback_to_default_styles
)
{
auto
dtFormat
=
testStyle
(
"
en
-
US
"
DateTimeStyle
:
:
None
DateTimeStyle
:
:
None
)
;
TestBuffer
<
uint8_t
>
buffer
;
dtFormat
-
>
TryFormat
(
DATE
buffer
)
.
unwrap
(
)
;
ASSERT_EQ
(
buffer
.
get_string_view
<
char
>
(
)
"
Sep
23
2002
8
:
07
:
30
PM
"
)
;
}
TEST
(
IntlDateTimeFormat
Skeleton_enUS_utf8_in
)
{
UniquePtr
<
DateTimeFormat
>
dtFormat
=
DateTimeFormat
:
:
TryCreateFromSkeleton
(
"
en
-
US
"
MakeStringSpan
(
"
yMdhhmmss
"
)
Some
(
MakeStringSpan
(
"
GMT
+
3
"
)
)
)
.
unwrap
(
)
;
TestBuffer
<
uint8_t
>
buffer
;
dtFormat
-
>
TryFormat
(
DATE
buffer
)
.
unwrap
(
)
;
ASSERT_EQ
(
buffer
.
get_string_view
<
char
>
(
)
"
9
/
23
/
2002
8
:
07
:
30
PM
"
)
;
}
TEST
(
IntlDateTimeFormat
Skeleton_enUS_utf16_in
)
{
UniquePtr
<
DateTimeFormat
>
dtFormat
=
DateTimeFormat
:
:
TryCreateFromSkeleton
(
"
en
-
US
"
MakeStringSpan
(
u
"
yMdhhmmss
"
)
Some
(
MakeStringSpan
(
u
"
GMT
+
3
"
)
)
)
.
unwrap
(
)
;
TestBuffer
<
uint8_t
>
buffer
;
dtFormat
-
>
TryFormat
(
DATE
buffer
)
.
unwrap
(
)
;
ASSERT_EQ
(
buffer
.
get_string_view
<
char
>
(
)
"
9
/
23
/
2002
8
:
07
:
30
PM
"
)
;
}
TEST
(
IntlDateTimeFormat
Time_zone_IANA_identifier
)
{
auto
dtFormat
=
DateTimeFormat
:
:
TryCreateFromStyle
(
MakeStringSpan
(
"
en
-
US
"
)
DateTimeStyle
:
:
Medium
DateTimeStyle
:
:
Medium
Some
(
MakeStringSpan
(
u
"
America
/
Chicago
"
)
)
)
.
unwrap
(
)
;
TestBuffer
<
uint8_t
>
buffer
;
dtFormat
-
>
TryFormat
(
DATE
buffer
)
.
unwrap
(
)
;
ASSERT_EQ
(
buffer
.
get_string_view
<
char
>
(
)
"
Sep
23
2002
12
:
07
:
30
PM
"
)
;
}
}
