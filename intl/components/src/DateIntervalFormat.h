#
ifndef
intl_components_DateIntervalFormat_h_
#
define
intl_components_DateIntervalFormat_h_
#
include
"
mozilla
/
intl
/
DateTimePart
.
h
"
#
include
"
mozilla
/
intl
/
ICU4CGlue
.
h
"
#
include
"
mozilla
/
intl
/
ICUError
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
unicode
/
utypes
.
h
"
struct
UDateIntervalFormat
;
struct
UFormattedDateInterval
;
struct
UFormattedValue
;
namespace
mozilla
:
:
intl
{
class
AutoFormattedDateInterval
;
class
Calendar
;
class
DateIntervalFormat
final
{
public
:
static
Result
<
UniquePtr
<
DateIntervalFormat
>
ICUError
>
TryCreate
(
Span
<
const
char
>
aLocale
Span
<
const
char16_t
>
aSkeleton
Span
<
const
char16_t
>
aTimeZone
)
;
~
DateIntervalFormat
(
)
;
ICUResult
TryFormatCalendar
(
const
Calendar
&
aStart
const
Calendar
&
aEnd
AutoFormattedDateInterval
&
aFormatted
bool
*
aPracticallyEqual
)
const
;
ICUResult
TryFormatDateTime
(
double
aStart
double
aEnd
AutoFormattedDateInterval
&
aFormatted
bool
*
aPracticallyEqual
)
const
;
ICUResult
TryFormattedToParts
(
const
AutoFormattedDateInterval
&
aFormatted
DateTimePartVector
&
aParts
)
const
;
private
:
DateIntervalFormat
(
)
=
delete
;
explicit
DateIntervalFormat
(
UDateIntervalFormat
*
aDif
)
:
mDateIntervalFormat
(
aDif
)
{
}
DateIntervalFormat
(
const
DateIntervalFormat
&
)
=
delete
;
DateIntervalFormat
&
operator
=
(
const
DateIntervalFormat
&
)
=
delete
;
ICUPointer
<
UDateIntervalFormat
>
mDateIntervalFormat
=
ICUPointer
<
UDateIntervalFormat
>
(
nullptr
)
;
}
;
class
MOZ_RAII
AutoFormattedDateInterval
{
public
:
AutoFormattedDateInterval
(
)
;
~
AutoFormattedDateInterval
(
)
;
AutoFormattedDateInterval
(
const
AutoFormattedDateInterval
&
other
)
=
delete
;
AutoFormattedDateInterval
&
operator
=
(
const
AutoFormattedDateInterval
&
other
)
=
delete
;
AutoFormattedDateInterval
(
AutoFormattedDateInterval
&
&
other
)
=
delete
;
AutoFormattedDateInterval
&
operator
=
(
AutoFormattedDateInterval
&
&
other
)
=
delete
;
bool
IsValid
(
)
const
{
return
!
!
mFormatted
;
}
ICUError
GetError
(
)
const
{
return
ToICUError
(
mError
)
;
}
Result
<
Span
<
const
char16_t
>
ICUError
>
ToSpan
(
)
const
;
private
:
friend
class
DateIntervalFormat
;
UFormattedDateInterval
*
GetUFormattedDateInterval
(
)
const
{
return
mFormatted
;
}
const
UFormattedValue
*
Value
(
)
const
;
UFormattedDateInterval
*
mFormatted
=
nullptr
;
UErrorCode
mError
=
U_ZERO_ERROR
;
}
;
}
#
endif
