#
ifndef
intl_components_FormatBuffer_h
#
define
intl_components_FormatBuffer_h
#
include
"
nsTString
.
h
"
namespace
mozilla
:
:
intl
{
template
<
typename
T
>
class
nsTStringToBufferAdapter
{
public
:
using
CharType
=
T
;
nsTStringToBufferAdapter
(
const
nsTStringToBufferAdapter
&
)
=
delete
;
nsTStringToBufferAdapter
&
operator
=
(
const
nsTStringToBufferAdapter
&
)
=
delete
;
explicit
nsTStringToBufferAdapter
(
nsTSubstring
<
CharType
>
&
aString
)
:
mString
(
aString
)
{
}
[
[
nodiscard
]
]
bool
reserve
(
size_t
size
)
{
return
mString
.
SetLength
(
size
fallible
)
;
}
CharType
*
data
(
)
{
return
mString
.
BeginWriting
(
)
;
}
size_t
length
(
)
const
{
return
mString
.
Length
(
)
;
}
size_t
capacity
(
)
const
{
return
mString
.
Length
(
)
;
}
void
written
(
size_t
amount
)
{
MOZ_ASSERT
(
amount
<
=
mString
.
Length
(
)
)
;
mString
.
SetLength
(
amount
)
;
}
private
:
nsTSubstring
<
CharType
>
&
mString
;
}
;
}
#
endif
