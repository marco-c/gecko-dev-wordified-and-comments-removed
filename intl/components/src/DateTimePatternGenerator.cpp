#
include
"
mozilla
/
intl
/
DateTimePatternGenerator
.
h
"
namespace
mozilla
:
:
intl
{
DateTimePatternGenerator
:
:
~
DateTimePatternGenerator
(
)
{
if
(
mGenerator
)
{
udatpg_close
(
mGenerator
.
GetMut
(
)
)
;
}
}
Result
<
UniquePtr
<
DateTimePatternGenerator
>
ICUError
>
DateTimePatternGenerator
:
:
TryCreate
(
const
char
*
aLocale
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
UDateTimePatternGenerator
*
generator
=
udatpg_open
(
aLocale
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
MakeUnique
<
DateTimePatternGenerator
>
(
generator
)
;
}
;
DateTimePatternGenerator
:
:
DateTimePatternGenerator
(
DateTimePatternGenerator
&
&
other
)
noexcept
:
mGenerator
(
other
.
mGenerator
.
GetMut
(
)
)
{
other
.
mGenerator
=
nullptr
;
}
DateTimePatternGenerator
&
DateTimePatternGenerator
:
:
operator
=
(
DateTimePatternGenerator
&
&
other
)
noexcept
{
if
(
this
=
=
&
other
)
{
return
*
this
;
}
if
(
mGenerator
)
{
udatpg_close
(
mGenerator
.
GetMut
(
)
)
;
}
mGenerator
=
other
.
mGenerator
.
GetMut
(
)
;
other
.
mGenerator
=
nullptr
;
return
*
this
;
}
}
