#
include
"
mozilla
/
intl
/
MeasureUnit
.
h
"
#
include
"
unicode
/
udata
.
h
"
#
include
"
unicode
/
ures
.
h
"
#
include
"
unicode
/
utypes
.
h
"
namespace
mozilla
:
:
intl
{
void
MeasureUnit
:
:
UResourceBundleDeleter
:
:
operator
(
)
(
UResourceBundle
*
aPtr
)
{
ures_close
(
aPtr
)
;
}
MeasureUnit
:
:
Enumeration
:
:
Enumeration
(
UniqueUResourceBundle
aRootLocale
UniqueUResourceBundle
aUnits
)
:
mRootLocale
(
std
:
:
move
(
aRootLocale
)
)
mUnits
(
std
:
:
move
(
aUnits
)
)
{
mUnitsSize
=
ures_getSize
(
mUnits
.
get
(
)
)
;
}
MeasureUnit
:
:
Enumeration
:
:
Iterator
:
:
value_type
MeasureUnit
:
:
Enumeration
:
:
Iterator
:
:
operator
*
(
)
const
{
if
(
mHasError
)
{
return
Err
(
InternalError
{
}
)
;
}
const
char
*
unitIdentifier
=
ures_getKey
(
mSubtype
.
get
(
)
)
;
MOZ_ASSERT
(
unitIdentifier
)
;
return
MakeStringSpan
(
unitIdentifier
)
;
}
void
MeasureUnit
:
:
Enumeration
:
:
Iterator
:
:
advance
(
)
{
if
(
mHasError
)
{
return
;
}
while
(
true
)
{
if
(
mTypePos
<
mTypeSize
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
UResourceBundle
*
rawSubtype
=
ures_getByIndex
(
mType
.
get
(
)
mTypePos
nullptr
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
mHasError
=
true
;
return
;
}
mTypePos
+
=
1
;
mSubtype
.
reset
(
rawSubtype
)
;
return
;
}
if
(
mUnitsPos
<
mEnumeration
.
mUnitsSize
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
UResourceBundle
*
rawType
=
ures_getByIndex
(
mEnumeration
.
mUnits
.
get
(
)
mUnitsPos
nullptr
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
mHasError
=
true
;
return
;
}
mUnitsPos
+
=
1
;
mType
.
reset
(
rawType
)
;
mTypeSize
=
ures_getSize
(
rawType
)
;
mTypePos
=
0
;
continue
;
}
MOZ_ASSERT
(
mUnitsPos
=
=
mEnumeration
.
mUnitsSize
)
;
mTypePos
=
0
;
mTypeSize
=
0
;
return
;
}
}
Result
<
MeasureUnit
:
:
Enumeration
ICUError
>
MeasureUnit
:
:
Enumeration
:
:
TryCreate
(
)
{
static
const
char
packageName
[
]
=
U_ICUDATA_NAME
U_TREE_SEPARATOR_STRING
"
unit
"
;
static
const
char
rootLocale
[
]
=
"
"
;
UErrorCode
status
=
U_ZERO_ERROR
;
UResourceBundle
*
rawRes
=
ures_open
(
packageName
rootLocale
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
UniqueUResourceBundle
res
(
rawRes
)
;
UResourceBundle
*
rawUnits
=
ures_getByKey
(
res
.
get
(
)
"
units
"
nullptr
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
UniqueUResourceBundle
units
(
rawUnits
)
;
return
MeasureUnit
:
:
Enumeration
(
std
:
:
move
(
res
)
std
:
:
move
(
units
)
)
;
}
}
