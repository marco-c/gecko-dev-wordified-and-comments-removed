#
include
"
mozilla
/
intl
/
TimeZone
.
h
"
#
include
"
unicode
/
uenum
.
h
"
namespace
mozilla
:
:
intl
{
Result
<
UniquePtr
<
TimeZone
>
ICUError
>
TimeZone
:
:
TryCreate
(
Maybe
<
Span
<
const
char16_t
>
>
aTimeZoneOverride
)
{
const
char
*
rootLocale
=
"
"
;
UErrorCode
status
=
U_ZERO_ERROR
;
const
UChar
*
zoneID
=
nullptr
;
int32_t
zoneIDLen
=
0
;
if
(
aTimeZoneOverride
)
{
zoneIDLen
=
static_cast
<
int32_t
>
(
aTimeZoneOverride
-
>
Length
(
)
)
;
zoneID
=
aTimeZoneOverride
-
>
Elements
(
)
;
}
UCalendar
*
calendar
=
ucal_open
(
zoneID
zoneIDLen
rootLocale
UCAL_DEFAULT
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
MakeUnique
<
TimeZone
>
(
calendar
)
;
}
Result
<
int32_t
ICUError
>
TimeZone
:
:
GetRawOffsetMs
(
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
int32_t
offset
=
ucal_get
(
mCalendar
UCAL_ZONE_OFFSET
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
offset
;
}
Result
<
SpanEnumeration
<
char
>
ICUError
>
TimeZone
:
:
GetAvailableTimeZones
(
const
char
*
aRegion
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
UEnumeration
*
enumeration
=
ucal_openTimeZoneIDEnumeration
(
UCAL_ZONE_TYPE_ANY
aRegion
nullptr
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
SpanEnumeration
<
char
>
(
enumeration
)
;
}
TimeZone
:
:
~
TimeZone
(
)
{
MOZ_ASSERT
(
mCalendar
)
;
ucal_close
(
mCalendar
)
;
}
}
