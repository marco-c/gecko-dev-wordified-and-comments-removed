#
include
"
mozilla
/
intl
/
TimeZone
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
<
algorithm
>
#
include
<
string_view
>
#
include
"
unicode
/
uenum
.
h
"
#
if
MOZ_INTL_USE_ICU_CPP_TIMEZONE
#
include
"
unicode
/
basictz
.
h
"
#
endif
namespace
mozilla
:
:
intl
{
Result
<
UniquePtr
<
TimeZone
>
ICUError
>
TimeZone
:
:
TryCreate
(
Maybe
<
Span
<
const
char16_t
>
>
aTimeZoneOverride
)
{
const
UChar
*
zoneID
=
nullptr
;
int32_t
zoneIDLen
=
0
;
if
(
aTimeZoneOverride
)
{
zoneIDLen
=
static_cast
<
int32_t
>
(
aTimeZoneOverride
-
>
Length
(
)
)
;
zoneID
=
aTimeZoneOverride
-
>
Elements
(
)
;
}
#
if
MOZ_INTL_USE_ICU_CPP_TIMEZONE
UniquePtr
<
icu
:
:
TimeZone
>
tz
;
if
(
zoneID
)
{
tz
.
reset
(
icu
:
:
TimeZone
:
:
createTimeZone
(
icu
:
:
UnicodeString
(
zoneID
zoneIDLen
)
)
)
;
}
else
{
tz
.
reset
(
icu
:
:
TimeZone
:
:
createDefault
(
)
)
;
}
MOZ_ASSERT
(
tz
)
;
if
(
*
tz
=
=
icu
:
:
TimeZone
:
:
getUnknown
(
)
)
{
return
Err
(
ICUError
:
:
InternalError
)
;
}
return
MakeUnique
<
TimeZone
>
(
std
:
:
move
(
tz
)
)
;
#
else
const
char
*
rootLocale
=
"
"
;
UErrorCode
status
=
U_ZERO_ERROR
;
UCalendar
*
calendar
=
ucal_open
(
zoneID
zoneIDLen
rootLocale
UCAL_DEFAULT
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
constexpr
double
StartOfTime
=
-
8
.
64e15
;
ucal_setGregorianChange
(
calendar
StartOfTime
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
MakeUnique
<
TimeZone
>
(
calendar
)
;
#
endif
}
Result
<
int32_t
ICUError
>
TimeZone
:
:
GetRawOffsetMs
(
)
{
#
if
MOZ_INTL_USE_ICU_CPP_TIMEZONE
return
mTimeZone
-
>
getRawOffset
(
)
;
#
else
UErrorCode
status
=
U_ZERO_ERROR
;
ucal_setMillis
(
mCalendar
ucal_getNow
(
)
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
int32_t
offset
=
ucal_get
(
mCalendar
UCAL_ZONE_OFFSET
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
offset
;
#
endif
}
Result
<
int32_t
ICUError
>
TimeZone
:
:
GetDSTOffsetMs
(
int64_t
aUTCMilliseconds
)
{
UDate
date
=
UDate
(
aUTCMilliseconds
)
;
#
if
MOZ_INTL_USE_ICU_CPP_TIMEZONE
constexpr
bool
dateIsLocalTime
=
false
;
int32_t
rawOffset
dstOffset
;
UErrorCode
status
=
U_ZERO_ERROR
;
mTimeZone
-
>
getOffset
(
date
dateIsLocalTime
rawOffset
dstOffset
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
dstOffset
;
#
else
UErrorCode
status
=
U_ZERO_ERROR
;
ucal_setMillis
(
mCalendar
date
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
int32_t
dstOffset
=
ucal_get
(
mCalendar
UCAL_DST_OFFSET
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
dstOffset
;
#
endif
}
Result
<
int32_t
ICUError
>
TimeZone
:
:
GetOffsetMs
(
int64_t
aUTCMilliseconds
)
{
UDate
date
=
UDate
(
aUTCMilliseconds
)
;
#
if
MOZ_INTL_USE_ICU_CPP_TIMEZONE
constexpr
bool
dateIsLocalTime
=
false
;
int32_t
rawOffset
dstOffset
;
UErrorCode
status
=
U_ZERO_ERROR
;
mTimeZone
-
>
getOffset
(
date
dateIsLocalTime
rawOffset
dstOffset
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
rawOffset
+
dstOffset
;
#
else
UErrorCode
status
=
U_ZERO_ERROR
;
ucal_setMillis
(
mCalendar
date
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
int32_t
rawOffset
=
ucal_get
(
mCalendar
UCAL_ZONE_OFFSET
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
int32_t
dstOffset
=
ucal_get
(
mCalendar
UCAL_DST_OFFSET
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
rawOffset
+
dstOffset
;
#
endif
}
Result
<
int32_t
ICUError
>
TimeZone
:
:
GetUTCOffsetMs
(
int64_t
aLocalMilliseconds
)
{
#
ifndef
U_HIDE_DRAFT_API
constexpr
UTimeZoneLocalOption
skippedTime
=
UCAL_TZ_LOCAL_FORMER
;
constexpr
UTimeZoneLocalOption
repeatedTime
=
UCAL_TZ_LOCAL_FORMER
;
#
else
constexpr
UTimeZoneLocalOption
skippedTime
=
UTimeZoneLocalOption
(
0x4
)
;
constexpr
UTimeZoneLocalOption
repeatedTime
=
UTimeZoneLocalOption
(
0x4
)
;
#
endif
UDate
date
=
UDate
(
aLocalMilliseconds
)
;
#
if
MOZ_INTL_USE_ICU_CPP_TIMEZONE
int32_t
rawOffset
dstOffset
;
UErrorCode
status
=
U_ZERO_ERROR
;
auto
*
basicTz
=
static_cast
<
icu
:
:
BasicTimeZone
*
>
(
mTimeZone
.
get
(
)
)
;
basicTz
-
>
getOffsetFromLocal
(
date
skippedTime
repeatedTime
rawOffset
dstOffset
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
rawOffset
+
dstOffset
;
#
else
UErrorCode
status
=
U_ZERO_ERROR
;
ucal_setMillis
(
mCalendar
date
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
int32_t
rawOffset
dstOffset
;
ucal_getTimeZoneOffsetFromLocal
(
mCalendar
skippedTime
repeatedTime
&
rawOffset
&
dstOffset
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
rawOffset
+
dstOffset
;
#
endif
}
using
TimeZoneIdentifierVector
=
Vector
<
char16_t
TimeZone
:
:
TimeZoneIdentifierLength
>
;
#
if
!
MOZ_INTL_USE_ICU_CPP_TIMEZONE
static
bool
IsUnknownTimeZone
(
const
TimeZoneIdentifierVector
&
timeZone
)
{
constexpr
std
:
:
string_view
unknownTimeZone
=
UCAL_UNKNOWN_ZONE_ID
;
return
timeZone
.
length
(
)
=
=
unknownTimeZone
.
length
(
)
&
&
std
:
:
equal
(
timeZone
.
begin
(
)
timeZone
.
end
(
)
unknownTimeZone
.
begin
(
)
unknownTimeZone
.
end
(
)
)
;
}
static
ICUResult
SetDefaultTimeZone
(
TimeZoneIdentifierVector
&
timeZone
)
{
MOZ_ASSERT_IF
(
!
timeZone
.
empty
(
)
timeZone
.
end
(
)
[
-
1
]
!
=
'
\
0
'
)
;
if
(
!
timeZone
.
append
(
'
\
0
'
)
)
{
return
Err
(
ICUError
:
:
OutOfMemory
)
;
}
UErrorCode
status
=
U_ZERO_ERROR
;
ucal_setDefaultTimeZone
(
timeZone
.
begin
(
)
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
Ok
{
}
;
}
#
endif
Result
<
bool
ICUError
>
TimeZone
:
:
SetDefaultTimeZone
(
Span
<
const
char
>
aTimeZone
)
{
#
if
MOZ_INTL_USE_ICU_CPP_TIMEZONE
icu
:
:
UnicodeString
tzid
(
aTimeZone
.
data
(
)
aTimeZone
.
size
(
)
US_INV
)
;
if
(
tzid
.
isBogus
(
)
)
{
return
Err
(
ICUError
:
:
OutOfMemory
)
;
}
UniquePtr
<
icu
:
:
TimeZone
>
newTimeZone
(
icu
:
:
TimeZone
:
:
createTimeZone
(
tzid
)
)
;
MOZ_ASSERT
(
newTimeZone
)
;
if
(
*
newTimeZone
!
=
icu
:
:
TimeZone
:
:
getUnknown
(
)
)
{
icu
:
:
TimeZone
:
:
adoptDefault
(
newTimeZone
.
release
(
)
)
;
return
true
;
}
#
else
TimeZoneIdentifierVector
tzid
;
if
(
!
tzid
.
append
(
aTimeZone
.
data
(
)
aTimeZone
.
size
(
)
)
)
{
return
Err
(
ICUError
:
:
OutOfMemory
)
;
}
TimeZoneIdentifierVector
defaultTimeZone
;
MOZ_TRY
(
FillVectorWithICUCall
(
defaultTimeZone
ucal_getDefaultTimeZone
)
)
;
MOZ_TRY
(
mozilla
:
:
intl
:
:
SetDefaultTimeZone
(
tzid
)
)
;
TimeZoneIdentifierVector
newTimeZone
;
MOZ_TRY
(
FillVectorWithICUCall
(
newTimeZone
ucal_getDefaultTimeZone
)
)
;
if
(
!
IsUnknownTimeZone
(
newTimeZone
)
)
{
return
true
;
}
MOZ_TRY
(
mozilla
:
:
intl
:
:
SetDefaultTimeZone
(
defaultTimeZone
)
)
;
#
endif
return
false
;
}
ICUResult
TimeZone
:
:
SetDefaultTimeZoneFromHostTimeZone
(
)
{
#
if
MOZ_INTL_USE_ICU_CPP_TIMEZONE
if
(
icu
:
:
TimeZone
*
defaultZone
=
icu
:
:
TimeZone
:
:
detectHostTimeZone
(
)
)
{
icu
:
:
TimeZone
:
:
adoptDefault
(
defaultZone
)
;
}
#
else
TimeZoneIdentifierVector
hostTimeZone
;
MOZ_TRY
(
FillVectorWithICUCall
(
hostTimeZone
ucal_getHostTimeZone
)
)
;
MOZ_TRY
(
mozilla
:
:
intl
:
:
SetDefaultTimeZone
(
hostTimeZone
)
)
;
#
endif
return
Ok
{
}
;
}
Result
<
SpanEnumeration
<
char
>
ICUError
>
TimeZone
:
:
GetAvailableTimeZones
(
const
char
*
aRegion
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
UEnumeration
*
enumeration
=
ucal_openTimeZoneIDEnumeration
(
UCAL_ZONE_TYPE_ANY
aRegion
nullptr
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
SpanEnumeration
<
char
>
(
enumeration
)
;
}
Result
<
SpanEnumeration
<
char
>
ICUError
>
TimeZone
:
:
GetAvailableTimeZones
(
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
UEnumeration
*
enumeration
=
ucal_openTimeZones
(
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
SpanEnumeration
<
char
>
(
enumeration
)
;
}
#
if
!
MOZ_INTL_USE_ICU_CPP_TIMEZONE
TimeZone
:
:
~
TimeZone
(
)
{
MOZ_ASSERT
(
mCalendar
)
;
ucal_close
(
mCalendar
)
;
}
#
endif
}
