#
ifndef
intl_components_ICUError_h
#
define
intl_components_ICUError_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
<
cstdint
>
#
include
<
type_traits
>
namespace
mozilla
:
:
intl
{
enum
class
ICUError
:
uint8_t
{
OutOfMemory
=
2
InternalError
=
4
OverflowError
=
6
}
;
struct
InternalError
{
enum
class
ErrorKind
:
uint8_t
{
Unspecified
=
2
}
;
const
ErrorKind
kind
=
ErrorKind
:
:
Unspecified
;
constexpr
InternalError
(
)
=
default
;
private
:
friend
struct
mozilla
:
:
detail
:
:
UnusedZero
<
InternalError
>
;
constexpr
MOZ_IMPLICIT
InternalError
(
ErrorKind
aKind
)
:
kind
(
aKind
)
{
}
}
;
}
namespace
mozilla
:
:
detail
{
template
<
>
struct
UnusedZero
<
mozilla
:
:
intl
:
:
ICUError
>
:
UnusedZeroEnum
<
mozilla
:
:
intl
:
:
ICUError
>
{
}
;
template
<
>
struct
UnusedZero
<
mozilla
:
:
intl
:
:
InternalError
>
{
using
Error
=
mozilla
:
:
intl
:
:
InternalError
;
using
StorageType
=
std
:
:
underlying_type_t
<
Error
:
:
ErrorKind
>
;
static
constexpr
bool
value
=
true
;
static
constexpr
StorageType
nullValue
=
0
;
static
constexpr
Error
Inspect
(
const
StorageType
&
aValue
)
{
return
static_cast
<
Error
:
:
ErrorKind
>
(
aValue
)
;
}
static
constexpr
Error
Unwrap
(
StorageType
aValue
)
{
return
static_cast
<
Error
:
:
ErrorKind
>
(
aValue
)
;
}
static
constexpr
StorageType
Store
(
Error
aValue
)
{
return
static_cast
<
StorageType
>
(
aValue
.
kind
)
;
}
}
;
template
<
>
struct
HasFreeLSB
<
mozilla
:
:
intl
:
:
ICUError
>
{
static
constexpr
bool
value
=
true
;
}
;
template
<
>
struct
HasFreeLSB
<
mozilla
:
:
intl
:
:
InternalError
>
{
static
constexpr
bool
value
=
true
;
}
;
}
#
endif
