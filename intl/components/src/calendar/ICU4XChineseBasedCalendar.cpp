#
include
"
mozilla
/
intl
/
calendar
/
ICU4XChineseBasedCalendar
.
h
"
namespace
mozilla
:
:
intl
:
:
calendar
{
ICU4XChineseBasedCalendar
:
:
ICU4XChineseBasedCalendar
(
icu4x
:
:
capi
:
:
CalendarKind
kind
const
icu
:
:
Locale
&
locale
UErrorCode
&
success
)
:
ICU4XCalendar
(
kind
locale
success
)
{
}
ICU4XChineseBasedCalendar
:
:
ICU4XChineseBasedCalendar
(
icu4x
:
:
capi
:
:
CalendarKind
kind
const
icu
:
:
TimeZone
&
timeZone
const
icu
:
:
Locale
&
locale
UErrorCode
&
success
)
:
ICU4XCalendar
(
kind
timeZone
locale
success
)
{
}
ICU4XChineseBasedCalendar
:
:
ICU4XChineseBasedCalendar
(
const
ICU4XChineseBasedCalendar
&
other
)
:
ICU4XCalendar
(
other
)
{
}
ICU4XChineseBasedCalendar
:
:
~
ICU4XChineseBasedCalendar
(
)
=
default
;
bool
ICU4XChineseBasedCalendar
:
:
hasLeapMonths
(
)
const
{
return
true
;
}
bool
ICU4XChineseBasedCalendar
:
:
hasMonthCode
(
MonthCode
monthCode
)
const
{
return
monthCode
.
ordinal
(
)
<
=
12
;
}
bool
ICU4XChineseBasedCalendar
:
:
requiresFallbackForExtendedYear
(
int32_t
year
)
const
{
return
std
:
:
abs
(
year
)
>
10
'
000
;
}
bool
ICU4XChineseBasedCalendar
:
:
requiresFallbackForGregorianYear
(
int32_t
year
)
const
{
return
std
:
:
abs
(
year
)
>
10
'
000
;
}
bool
ICU4XChineseBasedCalendar
:
:
inTemporalLeapYear
(
UErrorCode
&
status
)
const
{
int32_t
days
=
getActualMaximum
(
UCAL_DAY_OF_YEAR
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
false
;
}
constexpr
int32_t
maxDaysInMonth
=
30
;
constexpr
int32_t
monthsInNonLeapYear
=
12
;
return
days
>
(
monthsInNonLeapYear
*
maxDaysInMonth
)
;
}
int32_t
ICU4XChineseBasedCalendar
:
:
getRelatedYear
(
UErrorCode
&
status
)
const
{
int32_t
year
=
get
(
UCAL_EXTENDED_YEAR
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
0
;
}
return
year
+
relatedYearDifference
(
)
;
}
void
ICU4XChineseBasedCalendar
:
:
setRelatedYear
(
int32_t
year
)
{
set
(
UCAL_EXTENDED_YEAR
year
-
relatedYearDifference
(
)
)
;
}
void
ICU4XChineseBasedCalendar
:
:
handleComputeFields
(
int32_t
julianDay
UErrorCode
&
status
)
{
int32_t
gyear
=
getGregorianYear
(
)
;
if
(
requiresFallbackForGregorianYear
(
gyear
)
)
{
handleComputeFieldsFromFallback
(
julianDay
status
)
;
return
;
}
int32_t
gmonth
=
getGregorianMonth
(
)
+
1
;
int32_t
gday
=
getGregorianDayOfMonth
(
)
;
MOZ_ASSERT
(
1
<
=
gmonth
&
&
gmonth
<
=
12
)
;
MOZ_ASSERT
(
1
<
=
gday
&
&
gday
<
=
31
)
;
auto
date
=
createICU4XDate
(
ISODate
{
gyear
gmonth
gday
}
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
;
}
MOZ_ASSERT
(
date
)
;
MonthCode
monthCode
=
monthCodeFrom
(
date
.
get
(
)
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
;
}
int32_t
extendedYear
=
icu4x
:
:
capi
:
:
icu4x_Date_extended_year_mv1
(
date
.
get
(
)
)
;
int32_t
month
=
icu4x
:
:
capi
:
:
icu4x_Date_ordinal_month_mv1
(
date
.
get
(
)
)
;
int32_t
dayOfMonth
=
icu4x
:
:
capi
:
:
icu4x_Date_day_of_month_mv1
(
date
.
get
(
)
)
;
int32_t
dayOfYear
=
icu4x
:
:
capi
:
:
icu4x_Date_day_of_year_mv1
(
date
.
get
(
)
)
;
MOZ_ASSERT
(
1
<
=
month
&
&
month
<
=
13
)
;
MOZ_ASSERT
(
1
<
=
dayOfMonth
&
&
dayOfMonth
<
=
30
)
;
MOZ_ASSERT
(
1
<
=
dayOfYear
&
&
dayOfYear
<
=
(
13
*
30
)
)
;
int32_t
chineseExtendedYear
=
extendedYear
+
relatedYearDifference
(
)
-
chineseRelatedYearDiff
;
int32_t
cycle_year
=
chineseExtendedYear
-
1
;
int32_t
cycle
=
FloorDiv
(
cycle_year
60
)
;
int32_t
yearOfCycle
=
cycle_year
-
(
cycle
*
60
)
;
internalSet
(
UCAL_ERA
cycle
+
1
)
;
internalSet
(
UCAL_YEAR
yearOfCycle
+
1
)
;
internalSet
(
UCAL_EXTENDED_YEAR
extendedYear
)
;
internalSet
(
UCAL_MONTH
monthCode
.
ordinal
(
)
-
1
)
;
internalSet
(
UCAL_ORDINAL_MONTH
month
-
1
)
;
internalSet
(
UCAL_IS_LEAP_MONTH
monthCode
.
isLeapMonth
(
)
?
1
:
0
)
;
internalSet
(
UCAL_DAY_OF_MONTH
dayOfMonth
)
;
internalSet
(
UCAL_DAY_OF_YEAR
dayOfYear
)
;
}
static
const
int32_t
CHINESE_CALENDAR_LIMITS
[
UCAL_FIELD_COUNT
]
[
4
]
=
{
{
1
1
83333
83333
}
{
1
1
60
60
}
{
0
0
11
11
}
{
1
1
50
55
}
{
-
1
-
1
-
1
-
1
}
{
1
1
29
30
}
{
1
1
353
385
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
5
5
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
5000000
-
5000000
5000000
5000000
}
{
-
1
-
1
-
1
-
1
}
{
-
5000000
-
5000000
5000000
5000000
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
0
0
1
1
}
{
0
0
11
12
}
}
;
int32_t
ICU4XChineseBasedCalendar
:
:
handleGetLimit
(
UCalendarDateFields
field
ELimitType
limitType
)
const
{
return
CHINESE_CALENDAR_LIMITS
[
field
]
[
limitType
]
;
}
const
icu
:
:
UFieldResolutionTable
ICU4XChineseBasedCalendar
:
:
CHINESE_DATE_PRECEDENCE
[
]
=
{
{
{
UCAL_DAY_OF_MONTH
kResolveSTOP
}
{
UCAL_WEEK_OF_YEAR
UCAL_DAY_OF_WEEK
kResolveSTOP
}
{
UCAL_WEEK_OF_MONTH
UCAL_DAY_OF_WEEK
kResolveSTOP
}
{
UCAL_DAY_OF_WEEK_IN_MONTH
UCAL_DAY_OF_WEEK
kResolveSTOP
}
{
UCAL_WEEK_OF_YEAR
UCAL_DOW_LOCAL
kResolveSTOP
}
{
UCAL_WEEK_OF_MONTH
UCAL_DOW_LOCAL
kResolveSTOP
}
{
UCAL_DAY_OF_WEEK_IN_MONTH
UCAL_DOW_LOCAL
kResolveSTOP
}
{
UCAL_DAY_OF_YEAR
kResolveSTOP
}
{
kResolveRemap
|
UCAL_DAY_OF_MONTH
UCAL_IS_LEAP_MONTH
kResolveSTOP
}
{
kResolveSTOP
}
}
{
{
UCAL_WEEK_OF_YEAR
kResolveSTOP
}
{
UCAL_WEEK_OF_MONTH
kResolveSTOP
}
{
UCAL_DAY_OF_WEEK_IN_MONTH
kResolveSTOP
}
{
kResolveRemap
|
UCAL_DAY_OF_WEEK_IN_MONTH
UCAL_DAY_OF_WEEK
kResolveSTOP
}
{
kResolveRemap
|
UCAL_DAY_OF_WEEK_IN_MONTH
UCAL_DOW_LOCAL
kResolveSTOP
}
{
kResolveSTOP
}
}
{
{
kResolveSTOP
}
}
}
;
const
icu
:
:
UFieldResolutionTable
*
ICU4XChineseBasedCalendar
:
:
getFieldResolutionTable
(
)
const
{
return
CHINESE_DATE_PRECEDENCE
;
}
}
