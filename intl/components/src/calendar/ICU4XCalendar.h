#
ifndef
intl_components_calendar_ICU4XCalendar_h_
#
define
intl_components_calendar_ICU4XCalendar_h_
#
include
"
mozilla
/
intl
/
calendar
/
ICU4XUniquePtr
.
h
"
#
include
"
mozilla
/
intl
/
calendar
/
ISODate
.
h
"
#
include
"
mozilla
/
intl
/
calendar
/
MonthCode
.
h
"
#
include
<
memory
>
#
include
<
mutex
>
#
include
<
stdint
.
h
>
#
include
<
string_view
>
#
include
"
unicode
/
calendar
.
h
"
#
include
"
unicode
/
locid
.
h
"
#
include
"
unicode
/
timezone
.
h
"
#
include
"
unicode
/
utypes
.
h
"
#
include
"
ICU4XAnyCalendarKind
.
h
"
namespace
mozilla
:
:
intl
:
:
calendar
{
class
ICU4XCalendar
:
public
icu
:
:
Calendar
{
mutable
UniqueICU4XCalendar
calendar_
{
}
;
mutable
std
:
:
unique_ptr
<
icu
:
:
Calendar
>
fallback_
{
}
;
capi
:
:
ICU4XAnyCalendarKind
kind_
;
protected
:
ICU4XCalendar
(
capi
:
:
ICU4XAnyCalendarKind
kind
const
icu
:
:
Locale
&
locale
UErrorCode
&
success
)
;
ICU4XCalendar
(
capi
:
:
ICU4XAnyCalendarKind
kind
const
icu
:
:
TimeZone
&
timeZone
const
icu
:
:
Locale
&
locale
UErrorCode
&
success
)
;
ICU4XCalendar
(
const
ICU4XCalendar
&
other
)
;
capi
:
:
ICU4XCalendar
*
getICU4XCalendar
(
UErrorCode
&
status
)
const
;
icu
:
:
Calendar
*
getFallbackCalendar
(
UErrorCode
&
status
)
const
;
protected
:
virtual
std
:
:
string_view
eraName
(
int32_t
extendedYear
)
const
=
0
;
virtual
bool
hasLeapMonths
(
)
const
=
0
;
virtual
bool
hasMonthCode
(
MonthCode
monthCode
)
const
=
0
;
virtual
bool
requiresFallbackForExtendedYear
(
int32_t
year
)
const
=
0
;
virtual
bool
requiresFallbackForGregorianYear
(
int32_t
year
)
const
=
0
;
protected
:
static
constexpr
int32_t
kEpochStartAsJulianDay
=
2440588
;
static
MonthCode
monthCodeFrom
(
const
capi
:
:
ICU4XDate
*
date
UErrorCode
&
status
)
;
UniqueICU4XDate
createICU4XDate
(
const
ISODate
&
date
UErrorCode
&
status
)
const
;
UniqueICU4XDate
createICU4XDate
(
const
CalendarDate
&
date
UErrorCode
&
status
)
const
;
public
:
ICU4XCalendar
(
)
=
delete
;
virtual
~
ICU4XCalendar
(
)
;
const
char
*
getTemporalMonthCode
(
UErrorCode
&
status
)
const
override
;
void
setTemporalMonthCode
(
const
char
*
code
UErrorCode
&
status
)
override
;
void
add
(
UCalendarDateFields
field
int32_t
amount
UErrorCode
&
status
)
override
;
void
add
(
EDateFields
field
int32_t
amount
UErrorCode
&
status
)
override
;
void
roll
(
UCalendarDateFields
field
int32_t
amount
UErrorCode
&
status
)
override
;
void
roll
(
EDateFields
field
int32_t
amount
UErrorCode
&
status
)
override
;
protected
:
int32_t
internalGetMonth
(
int32_t
defaultValue
UErrorCode
&
status
)
const
override
;
int32_t
internalGetMonth
(
UErrorCode
&
status
)
const
override
;
int64_t
handleComputeMonthStart
(
int32_t
extendedYear
int32_t
month
UBool
useMonth
UErrorCode
&
status
)
const
override
;
int32_t
handleGetMonthLength
(
int32_t
extendedYear
int32_t
month
UErrorCode
&
status
)
const
override
;
int32_t
handleGetYearLength
(
int32_t
extendedYear
UErrorCode
&
status
)
const
override
;
int32_t
handleGetExtendedYear
(
UErrorCode
&
status
)
override
;
protected
:
void
handleComputeFieldsFromFallback
(
int32_t
julianDay
UErrorCode
&
status
)
;
}
;
template
<
class
Calendar
class
Locale
>
class
SystemDefaultCentury
{
mutable
UDate
start_
=
DBL_MIN
;
mutable
int32_t
startYear_
=
-
1
;
mutable
std
:
:
once_flag
init_
{
}
;
void
initialize
(
)
const
{
UErrorCode
status
=
U_ZERO_ERROR
;
Calendar
calendar
(
Locale
:
:
identifier
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
;
}
calendar
.
setTime
(
icu
:
:
Calendar
:
:
getNow
(
)
status
)
;
calendar
.
add
(
UCAL_EXTENDED_YEAR
-
80
status
)
;
start_
=
calendar
.
getTime
(
status
)
;
startYear_
=
calendar
.
get
(
UCAL_YEAR
status
)
;
}
public
:
UDate
start
(
)
const
{
std
:
:
call_once
(
init_
[
this
]
{
initialize
(
)
;
}
)
;
return
start_
;
}
int32_t
startYear
(
)
const
{
std
:
:
call_once
(
init_
[
this
]
{
initialize
(
)
;
}
)
;
return
startYear_
;
}
}
;
}
#
endif
