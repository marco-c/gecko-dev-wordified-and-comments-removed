#
ifndef
intl_components_calendar_ICU4XChineseBasedCalendar_h_
#
define
intl_components_calendar_ICU4XChineseBasedCalendar_h_
#
include
"
mozilla
/
intl
/
calendar
/
ICU4XCalendar
.
h
"
#
include
<
stdint
.
h
>
#
include
<
string_view
>
namespace
mozilla
:
:
intl
:
:
calendar
{
class
ICU4XChineseBasedCalendar
:
public
ICU4XCalendar
{
protected
:
ICU4XChineseBasedCalendar
(
capi
:
:
ICU4XAnyCalendarKind
kind
const
icu
:
:
Locale
&
locale
UErrorCode
&
success
)
;
ICU4XChineseBasedCalendar
(
capi
:
:
ICU4XAnyCalendarKind
kind
const
icu
:
:
TimeZone
&
timeZone
const
icu
:
:
Locale
&
locale
UErrorCode
&
success
)
;
ICU4XChineseBasedCalendar
(
const
ICU4XChineseBasedCalendar
&
other
)
;
public
:
ICU4XChineseBasedCalendar
(
)
=
delete
;
virtual
~
ICU4XChineseBasedCalendar
(
)
;
protected
:
bool
hasLeapMonths
(
)
const
override
;
bool
hasMonthCode
(
MonthCode
monthCode
)
const
override
;
bool
requiresFallbackForExtendedYear
(
int32_t
year
)
const
override
;
bool
requiresFallbackForGregorianYear
(
int32_t
year
)
const
override
;
virtual
int32_t
relatedYearDifference
(
)
const
=
0
;
static
constexpr
int32_t
chineseRelatedYearDiff
=
-
2637
;
public
:
bool
inTemporalLeapYear
(
UErrorCode
&
status
)
const
override
;
int32_t
getRelatedYear
(
UErrorCode
&
status
)
const
override
;
void
setRelatedYear
(
int32_t
year
)
override
;
protected
:
void
handleComputeFields
(
int32_t
julianDay
UErrorCode
&
status
)
override
;
int32_t
handleGetLimit
(
UCalendarDateFields
field
ELimitType
limitType
)
const
override
;
const
icu
:
:
UFieldResolutionTable
*
getFieldResolutionTable
(
)
const
override
;
private
:
static
const
icu
:
:
UFieldResolutionTable
CHINESE_DATE_PRECEDENCE
[
]
;
}
;
}
#
endif
