#
ifndef
intl_components_Bidi_h_
#
define
intl_components_Bidi_h_
#
include
"
mozilla
/
intl
/
ICU4CGlue
.
h
"
struct
UBiDi
;
namespace
mozilla
:
:
intl
{
class
Bidi
final
{
public
:
Bidi
(
)
;
~
Bidi
(
)
;
Bidi
(
const
Bidi
&
)
=
delete
;
Bidi
&
operator
=
(
const
Bidi
&
)
=
delete
;
enum
class
Direction
:
uint8_t
{
LTR
=
0
RTL
=
1
}
;
enum
ParagraphDirection
{
LTR
RTL
Mixed
}
;
class
EmbeddingLevel
{
public
:
explicit
EmbeddingLevel
(
uint8_t
aValue
)
:
mValue
(
aValue
)
{
}
explicit
EmbeddingLevel
(
int
aValue
)
:
mValue
(
static_cast
<
uint8_t
>
(
aValue
)
)
{
}
EmbeddingLevel
(
)
=
default
;
EmbeddingLevel
(
const
EmbeddingLevel
&
other
)
=
default
;
EmbeddingLevel
&
operator
=
(
const
EmbeddingLevel
&
other
)
=
default
;
Bidi
:
:
Direction
Direction
(
)
;
static
EmbeddingLevel
LTR
(
)
;
static
EmbeddingLevel
RTL
(
)
;
static
EmbeddingLevel
DefaultLTR
(
)
;
static
EmbeddingLevel
DefaultRTL
(
)
;
bool
IsDefaultLTR
(
)
const
;
bool
IsDefaultRTL
(
)
const
;
bool
IsLTR
(
)
const
;
bool
IsRTL
(
)
const
;
bool
IsSameDirection
(
EmbeddingLevel
aOther
)
const
;
uint8_t
Value
(
)
const
;
operator
uint8_t
(
)
const
{
return
mValue
;
}
private
:
uint8_t
mValue
=
0
;
}
;
ICUResult
SetParagraph
(
Span
<
const
char16_t
>
aParagraph
EmbeddingLevel
aLevel
)
;
EmbeddingLevel
GetParagraphEmbeddingLevel
(
)
const
;
ParagraphDirection
GetParagraphDirection
(
)
const
;
Result
<
int32_t
ICUError
>
CountRuns
(
)
;
void
GetLogicalRun
(
int32_t
aLogicalStart
int32_t
*
aLogicalLimitOut
EmbeddingLevel
*
aLevelOut
)
;
static
void
ReorderVisual
(
const
EmbeddingLevel
*
aLevels
int32_t
aLength
int32_t
*
aIndexMap
)
;
Direction
GetVisualRun
(
int32_t
aRunIndex
int32_t
*
aLogicalStart
int32_t
*
aLength
)
;
private
:
ICUPointer
<
UBiDi
>
mBidi
=
ICUPointer
<
UBiDi
>
(
nullptr
)
;
const
EmbeddingLevel
*
mLevels
=
nullptr
;
int32_t
mLength
=
0
;
}
;
}
#
endif
