#
include
"
mozilla
/
intl
/
Calendar
.
h
"
#
include
"
unicode
/
ucal
.
h
"
#
include
"
unicode
/
uloc
.
h
"
#
include
"
unicode
/
utypes
.
h
"
namespace
mozilla
:
:
intl
{
Result
<
UniquePtr
<
Calendar
>
ICUError
>
Calendar
:
:
TryCreate
(
const
char
*
aLocale
Maybe
<
Span
<
const
char16_t
>
>
aTimeZoneOverride
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
const
UChar
*
zoneID
=
nullptr
;
int32_t
zoneIDLen
=
0
;
if
(
aTimeZoneOverride
)
{
zoneIDLen
=
static_cast
<
int32_t
>
(
aTimeZoneOverride
-
>
Length
(
)
)
;
zoneID
=
aTimeZoneOverride
-
>
Elements
(
)
;
}
UCalendar
*
calendar
=
ucal_open
(
zoneID
zoneIDLen
aLocale
UCAL_DEFAULT
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
MakeUnique
<
Calendar
>
(
calendar
)
;
}
Result
<
const
char
*
ICUError
>
Calendar
:
:
GetBcp47Type
(
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
const
char
*
oldType
=
ucal_getType
(
mCalendar
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
const
char
*
bcp47Type
=
uloc_toUnicodeLocaleType
(
"
calendar
"
oldType
)
;
if
(
!
bcp47Type
)
{
return
Err
(
ICUError
:
:
InternalError
)
;
}
return
bcp47Type
;
}
Result
<
Ok
ICUError
>
Calendar
:
:
SetTimeInMs
(
double
aUnixEpoch
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
ucal_setMillis
(
mCalendar
aUnixEpoch
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
Err
(
ToICUError
(
status
)
)
;
}
return
Ok
{
}
;
}
Result
<
SpanEnumeration
<
char
>
ICUError
>
Calendar
:
:
GetLegacyKeywordValuesForLocale
(
const
char
*
aLocale
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
UEnumeration
*
enumeration
=
ucal_getKeywordValuesForLocale
(
"
calendar
"
aLocale
false
&
status
)
;
if
(
U_SUCCESS
(
status
)
)
{
return
SpanEnumeration
<
char
>
(
enumeration
)
;
}
return
Err
(
ToICUError
(
status
)
)
;
}
SpanResult
<
char
>
Calendar
:
:
LegacyIdentifierToBcp47
(
const
char
*
aIdentifier
int32_t
aLength
)
{
if
(
aIdentifier
=
=
nullptr
)
{
return
Err
(
InternalError
{
}
)
;
}
return
MakeStringSpan
(
uloc_toUnicodeLocaleType
(
"
ca
"
aIdentifier
)
)
;
}
Result
<
Calendar
:
:
Bcp47IdentifierEnumeration
ICUError
>
Calendar
:
:
GetBcp47KeywordValuesForLocale
(
const
char
*
aLocale
CommonlyUsed
aCommonlyUsed
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
UEnumeration
*
enumeration
=
ucal_getKeywordValuesForLocale
(
"
calendar
"
aLocale
static_cast
<
bool
>
(
aCommonlyUsed
)
&
status
)
;
if
(
U_SUCCESS
(
status
)
)
{
return
Bcp47IdentifierEnumeration
(
enumeration
)
;
}
return
Err
(
ToICUError
(
status
)
)
;
}
Calendar
:
:
~
Calendar
(
)
{
MOZ_ASSERT
(
mCalendar
)
;
ucal_close
(
mCalendar
)
;
}
}
