#
include
"
NumberFormatFieldsUtil
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
namespace
mozilla
:
:
intl
{
Maybe
<
NumberPartType
>
GetPartTypeForNumberField
(
UNumberFormatFields
fieldName
Maybe
<
double
>
number
bool
isNegative
bool
formatForUnit
)
{
switch
(
fieldName
)
{
case
UNUM_INTEGER_FIELD
:
if
(
number
.
isSome
(
)
)
{
if
(
IsNaN
(
*
number
)
)
{
return
Some
(
NumberPartType
:
:
Nan
)
;
}
if
(
!
IsFinite
(
*
number
)
)
{
return
Some
(
NumberPartType
:
:
Infinity
)
;
}
}
return
Some
(
NumberPartType
:
:
Integer
)
;
case
UNUM_FRACTION_FIELD
:
return
Some
(
NumberPartType
:
:
Fraction
)
;
case
UNUM_DECIMAL_SEPARATOR_FIELD
:
return
Some
(
NumberPartType
:
:
Decimal
)
;
case
UNUM_EXPONENT_SYMBOL_FIELD
:
return
Some
(
NumberPartType
:
:
ExponentSeparator
)
;
case
UNUM_EXPONENT_SIGN_FIELD
:
return
Some
(
NumberPartType
:
:
ExponentMinusSign
)
;
case
UNUM_EXPONENT_FIELD
:
return
Some
(
NumberPartType
:
:
ExponentInteger
)
;
case
UNUM_GROUPING_SEPARATOR_FIELD
:
return
Some
(
NumberPartType
:
:
Group
)
;
case
UNUM_CURRENCY_FIELD
:
return
Some
(
NumberPartType
:
:
Currency
)
;
case
UNUM_PERCENT_FIELD
:
if
(
formatForUnit
)
{
return
Some
(
NumberPartType
:
:
Unit
)
;
}
return
Some
(
NumberPartType
:
:
Percent
)
;
case
UNUM_PERMILL_FIELD
:
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
permill
field
found
even
though
"
"
we
don
'
t
use
any
user
-
defined
patterns
that
"
"
would
require
a
permill
field
"
)
;
break
;
case
UNUM_SIGN_FIELD
:
if
(
isNegative
)
{
return
Some
(
NumberPartType
:
:
MinusSign
)
;
}
return
Some
(
NumberPartType
:
:
PlusSign
)
;
case
UNUM_MEASURE_UNIT_FIELD
:
return
Some
(
NumberPartType
:
:
Unit
)
;
case
UNUM_COMPACT_FIELD
:
return
Some
(
NumberPartType
:
:
Compact
)
;
#
ifndef
U_HIDE_DEPRECATED_API
case
UNUM_FIELD_COUNT
:
MOZ_ASSERT_UNREACHABLE
(
"
format
field
sentinel
value
returned
by
iterator
!
"
)
;
break
;
#
endif
}
MOZ_ASSERT_UNREACHABLE
(
"
unenumerated
undocumented
format
field
returned
by
iterator
"
)
;
return
Nothing
(
)
;
}
}
