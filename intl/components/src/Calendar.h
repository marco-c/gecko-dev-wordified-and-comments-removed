#
ifndef
intl_components_Calendar_h_
#
define
intl_components_Calendar_h_
#
include
"
unicode
/
ucal
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
intl
/
DateTimeFormat
.
h
"
#
include
"
mozilla
/
intl
/
ICU4CGlue
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Utf8
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
namespace
mozilla
:
:
intl
{
class
Calendar
final
{
public
:
explicit
Calendar
(
UCalendar
*
aCalendar
)
:
mCalendar
(
aCalendar
)
{
MOZ_ASSERT
(
aCalendar
)
;
}
;
Calendar
(
const
Calendar
&
)
=
delete
;
Calendar
&
operator
=
(
const
Calendar
&
)
=
delete
;
enum
class
Error
{
InternalError
}
;
static
Result
<
UniquePtr
<
Calendar
>
Calendar
:
:
Error
>
TryCreate
(
const
char
*
aLocale
Maybe
<
Span
<
const
char16_t
>
>
aTimeZoneOverride
=
Nothing
{
}
)
;
Result
<
const
char
*
Calendar
:
:
Error
>
GetBcp47Type
(
)
;
Result
<
int32_t
Calendar
:
:
Error
>
GetDefaultTimeZoneOffsetMs
(
)
;
template
<
typename
B
>
static
ICUResult
GetDefaultTimeZone
(
B
&
aBuffer
)
{
return
FillBufferWithICUCall
(
aBuffer
ucal_getDefaultTimeZone
)
;
}
template
<
typename
B
>
static
ICUResult
GetCanonicalTimeZoneID
(
Span
<
const
char16_t
>
inputTimeZone
B
&
aBuffer
)
{
static_assert
(
std
:
:
is_same_v
<
typename
B
:
:
CharType
char16_t
>
"
Currently
only
UTF
-
16
buffers
are
supported
.
"
)
;
if
(
aBuffer
.
capacity
(
)
=
=
0
)
{
if
(
!
aBuffer
.
reserve
(
32
)
)
{
return
Err
(
ICUError
:
:
OutOfMemory
)
;
}
}
return
FillBufferWithICUCall
(
aBuffer
[
&
inputTimeZone
]
(
UChar
*
target
int32_t
length
UErrorCode
*
status
)
{
return
ucal_getCanonicalTimeZoneID
(
inputTimeZone
.
Elements
(
)
static_cast
<
int32_t
>
(
inputTimeZone
.
Length
(
)
)
target
length
nullptr
status
)
;
}
)
;
}
Result
<
Ok
Error
>
SetTimeInMs
(
double
aUnixEpoch
)
;
static
Result
<
SpanEnumeration
<
char
>
InternalError
>
GetLegacyKeywordValuesForLocale
(
const
char
*
aLocale
)
;
private
:
static
SpanResult
<
char
>
LegacyIdentifierToBcp47
(
const
char
*
aIdentifier
int32_t
aLength
)
;
public
:
using
Bcp47IdentifierEnumeration
=
Enumeration
<
char
SpanResult
<
char
>
Calendar
:
:
LegacyIdentifierToBcp47
>
;
static
Result
<
Bcp47IdentifierEnumeration
InternalError
>
GetBcp47KeywordValuesForLocale
(
const
char
*
aLocale
)
;
~
Calendar
(
)
;
UCalendar
*
UnsafeGetUCalendar
(
)
const
{
return
mCalendar
;
}
private
:
UCalendar
*
mCalendar
=
nullptr
;
}
;
}
#
endif
