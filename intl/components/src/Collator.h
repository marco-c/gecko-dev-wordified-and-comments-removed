#
ifndef
intl_components_Collator_h_
#
define
intl_components_Collator_h_
#
ifndef
JS_STANDALONE
#
include
"
gtest
/
MozGtestFriend
.
h
"
#
endif
#
include
"
unicode
/
ucol
.
h
"
#
include
"
mozilla
/
Compiler
.
h
"
#
include
"
mozilla
/
intl
/
ICU4CGlue
.
h
"
#
include
"
mozilla
/
intl
/
ICUError
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
Span
.
h
"
namespace
mozilla
:
:
intl
{
class
Collator
final
{
public
:
explicit
Collator
(
UCollator
*
aCollator
)
;
Collator
(
const
Collator
&
)
=
delete
;
Collator
&
operator
=
(
const
Collator
&
)
=
delete
;
static
Result
<
UniquePtr
<
Collator
>
ICUError
>
TryCreate
(
const
char
*
aLocale
)
;
~
Collator
(
)
;
template
<
typename
B
>
ICUResult
GetSortKey
(
Span
<
const
char16_t
>
aString
B
&
aBuffer
)
const
{
return
FillBufferWithICUCall
(
aBuffer
[
this
aString
]
(
uint8_t
*
target
int32_t
length
UErrorCode
*
status
)
{
int32_t
len
=
ucol_getSortKey
(
mCollator
.
GetConst
(
)
aString
.
data
(
)
static_cast
<
int32_t
>
(
aString
.
size
(
)
)
target
length
)
;
if
(
len
=
=
0
)
{
*
status
=
U_INTERNAL_PROGRAM_ERROR
;
}
else
if
(
len
>
length
)
{
*
status
=
U_BUFFER_OVERFLOW_ERROR
;
}
else
{
*
status
=
U_ZERO_ERROR
;
}
return
len
;
}
)
;
}
int32_t
CompareStrings
(
Span
<
const
char16_t
>
aSource
Span
<
const
char16_t
>
aTarget
)
const
;
int32_t
CompareSortKeys
(
Span
<
const
uint8_t
>
aKey1
Span
<
const
uint8_t
>
aKey2
)
const
;
enum
class
CaseFirst
{
Upper
Lower
False
}
;
enum
class
Sensitivity
{
Base
Accent
Case
Variant
}
;
struct
Options
{
Sensitivity
sensitivity
=
Sensitivity
:
:
Variant
;
CaseFirst
caseFirst
=
CaseFirst
:
:
False
;
bool
ignorePunctuation
=
false
;
bool
numeric
=
false
;
}
;
ICUResult
SetOptions
(
const
Options
&
aOptions
const
Maybe
<
Options
&
>
aPrevOptions
=
Nothing
(
)
)
;
Result
<
CaseFirst
ICUError
>
GetCaseFirst
(
)
const
;
Result
<
bool
ICUError
>
GetIgnorePunctuation
(
)
const
;
static
SpanResult
<
char
>
KeywordValueToBcp47Extension
(
const
char
*
aKeyword
int32_t
aLength
)
;
enum
class
CommonlyUsed
:
bool
{
No
Yes
}
;
using
Bcp47ExtEnumeration
=
Enumeration
<
char
SpanResult
<
char
>
Collator
:
:
KeywordValueToBcp47Extension
>
;
static
Result
<
Bcp47ExtEnumeration
ICUError
>
GetBcp47KeywordValuesForLocale
(
const
char
*
aLocale
CommonlyUsed
aCommonlyUsed
=
CommonlyUsed
:
:
No
)
;
static
Result
<
Bcp47ExtEnumeration
ICUError
>
GetBcp47KeywordValues
(
)
;
static
auto
GetAvailableLocales
(
)
{
return
AvailableLocalesEnumeration
<
ucol_countAvailable
ucol_getAvailable
>
(
)
;
}
private
:
enum
class
Feature
{
On
Off
Default
}
;
static
constexpr
auto
ToUColAttributeValue
(
Feature
aFeature
)
{
switch
(
aFeature
)
{
case
Collator
:
:
Feature
:
:
On
:
return
UCOL_ON
;
case
Collator
:
:
Feature
:
:
Off
:
return
UCOL_OFF
;
case
Collator
:
:
Feature
:
:
Default
:
return
UCOL_DEFAULT
;
}
#
if
MOZ_IS_GCC
#
if
!
MOZ_GCC_VERSION_AT_LEAST
(
9
1
0
)
return
UCOL_DEFAULT
;
#
else
MOZ_CRASH
(
"
invalid
collator
feature
"
)
;
#
endif
#
else
MOZ_CRASH
(
"
invalid
collator
feature
"
)
;
#
endif
}
enum
class
AlternateHandling
{
NonIgnorable
Shifted
Default
}
;
enum
class
Strength
{
Primary
Secondary
Tertiary
Quaternary
Identical
Default
}
;
void
SetStrength
(
Strength
strength
)
;
ICUResult
SetAlternateHandling
(
AlternateHandling
aAlternateHandling
)
;
ICUResult
SetCaseLevel
(
Feature
aFeature
)
;
ICUResult
SetNumericCollation
(
Feature
aFeature
)
;
ICUResult
SetNormalizationMode
(
Feature
aFeature
)
;
ICUResult
SetCaseFirst
(
CaseFirst
aCaseFirst
)
;
#
ifndef
JS_STANDALONE
FRIEND_TEST
(
IntlCollator
SetAttributesInternal
)
;
#
endif
ICUPointer
<
UCollator
>
mCollator
=
ICUPointer
<
UCollator
>
(
nullptr
)
;
Maybe
<
Sensitivity
>
mLastStrategy
=
Nothing
(
)
;
}
;
}
#
endif
