#
ifndef
ICU4XScriptExtensionsSet_HPP
#
define
ICU4XScriptExtensionsSet_HPP
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdbool
.
h
>
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
variant
>
#
include
<
optional
>
#
include
"
diplomat_runtime
.
hpp
"
#
include
"
ICU4XScriptExtensionsSet
.
h
"
struct
ICU4XScriptExtensionsSetDeleter
{
void
operator
(
)
(
capi
:
:
ICU4XScriptExtensionsSet
*
l
)
const
noexcept
{
capi
:
:
ICU4XScriptExtensionsSet_destroy
(
l
)
;
}
}
;
class
ICU4XScriptExtensionsSet
{
public
:
bool
contains
(
uint16_t
script
)
const
;
size_t
count
(
)
const
;
diplomat
:
:
result
<
uint16_t
std
:
:
monostate
>
script_at
(
size_t
index
)
const
;
inline
const
capi
:
:
ICU4XScriptExtensionsSet
*
AsFFI
(
)
const
{
return
this
-
>
inner
.
get
(
)
;
}
inline
capi
:
:
ICU4XScriptExtensionsSet
*
AsFFIMut
(
)
{
return
this
-
>
inner
.
get
(
)
;
}
inline
ICU4XScriptExtensionsSet
(
capi
:
:
ICU4XScriptExtensionsSet
*
i
)
:
inner
(
i
)
{
}
ICU4XScriptExtensionsSet
(
)
=
default
;
ICU4XScriptExtensionsSet
(
ICU4XScriptExtensionsSet
&
&
)
noexcept
=
default
;
ICU4XScriptExtensionsSet
&
operator
=
(
ICU4XScriptExtensionsSet
&
&
other
)
noexcept
=
default
;
private
:
std
:
:
unique_ptr
<
capi
:
:
ICU4XScriptExtensionsSet
ICU4XScriptExtensionsSetDeleter
>
inner
;
}
;
inline
bool
ICU4XScriptExtensionsSet
:
:
contains
(
uint16_t
script
)
const
{
return
capi
:
:
ICU4XScriptExtensionsSet_contains
(
this
-
>
inner
.
get
(
)
script
)
;
}
inline
size_t
ICU4XScriptExtensionsSet
:
:
count
(
)
const
{
return
capi
:
:
ICU4XScriptExtensionsSet_count
(
this
-
>
inner
.
get
(
)
)
;
}
inline
diplomat
:
:
result
<
uint16_t
std
:
:
monostate
>
ICU4XScriptExtensionsSet
:
:
script_at
(
size_t
index
)
const
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XScriptExtensionsSet_script_at
(
this
-
>
inner
.
get
(
)
index
)
;
diplomat
:
:
result
<
uint16_t
std
:
:
monostate
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
uint16_t
>
(
diplomat_result_raw_out_value
.
ok
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
(
std
:
:
monostate
(
)
)
;
}
return
diplomat_result_out_value
;
}
#
endif
