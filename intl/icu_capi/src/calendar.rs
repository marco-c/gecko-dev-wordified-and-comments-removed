#
[
diplomat
:
:
bridge
]
#
[
diplomat
:
:
abi_rename
=
"
icu4x_
{
0
}
_mv1
"
]
#
[
diplomat
:
:
attr
(
auto
namespace
=
"
icu4x
"
)
]
pub
mod
ffi
{
use
alloc
:
:
boxed
:
:
Box
;
use
alloc
:
:
sync
:
:
Arc
;
#
[
cfg
(
feature
=
"
buffer_provider
"
)
]
use
crate
:
:
unstable
:
:
errors
:
:
ffi
:
:
DataError
;
use
crate
:
:
unstable
:
:
locale_core
:
:
ffi
:
:
Locale
;
#
[
cfg
(
feature
=
"
buffer_provider
"
)
]
use
crate
:
:
unstable
:
:
provider
:
:
ffi
:
:
DataProvider
;
#
[
diplomat
:
:
enum_convert
(
icu_calendar
:
:
AnyCalendarKind
needs_wildcard
)
]
#
[
diplomat
:
:
rust_link
(
icu
:
:
calendar
:
:
AnyCalendarKind
Enum
)
]
pub
enum
CalendarKind
{
Iso
=
0
Gregorian
=
1
Buddhist
=
2
Japanese
=
3
JapaneseExtended
=
4
Ethiopian
=
5
EthiopianAmeteAlem
=
6
Indian
=
7
Coptic
=
8
Dangi
=
9
Chinese
=
10
Hebrew
=
11
HijriTabularTypeIIFriday
=
12
HijriSimulatedMecca
=
18
HijriTabularTypeIIThursday
=
14
HijriUmmAlQura
=
15
Persian
=
16
Roc
=
17
}
impl
CalendarKind
{
#
[
diplomat
:
:
rust_link
(
icu
:
:
calendar
:
:
AnyCalendarKind
:
:
new
FnInEnum
)
]
pub
fn
create
(
locale
:
&
Locale
)
-
>
Self
{
let
prefs
=
(
&
locale
.
0
)
.
into
(
)
;
icu_calendar
:
:
AnyCalendarKind
:
:
new
(
prefs
)
.
into
(
)
}
}
#
[
diplomat
:
:
opaque
]
#
[
diplomat
:
:
transparent_convert
]
#
[
diplomat
:
:
rust_link
(
icu
:
:
calendar
:
:
AnyCalendar
Enum
)
]
pub
struct
Calendar
(
pub
Arc
<
icu_calendar
:
:
AnyCalendar
>
)
;
impl
Calendar
{
#
[
diplomat
:
:
rust_link
(
icu
:
:
calendar
:
:
AnyCalendar
:
:
new
FnInEnum
)
]
#
[
diplomat
:
:
attr
(
auto
constructor
)
]
#
[
cfg
(
feature
=
"
compiled_data
"
)
]
pub
fn
create
(
kind
:
CalendarKind
)
-
>
Box
<
Calendar
>
{
Box
:
:
new
(
Calendar
(
Arc
:
:
new
(
icu_calendar
:
:
AnyCalendar
:
:
new
(
kind
.
into
(
)
)
)
)
)
}
#
[
diplomat
:
:
rust_link
(
icu
:
:
calendar
:
:
AnyCalendar
:
:
new
FnInEnum
)
]
#
[
diplomat
:
:
attr
(
all
(
supports
=
fallible_constructors
supports
=
named_constructors
)
named_constructor
=
"
new_with_provider
"
)
]
#
[
cfg
(
feature
=
"
buffer_provider
"
)
]
pub
fn
create_with_provider
(
provider
:
&
DataProvider
kind
:
CalendarKind
)
-
>
Result
<
Box
<
Calendar
>
DataError
>
{
Ok
(
Box
:
:
new
(
Calendar
(
Arc
:
:
new
(
icu_calendar
:
:
AnyCalendar
:
:
try_new_with_buffer_provider
(
provider
.
get
(
)
?
kind
.
into
(
)
)
?
)
)
)
)
}
#
[
diplomat
:
:
rust_link
(
icu
:
:
calendar
:
:
AnyCalendar
:
:
kind
FnInEnum
)
]
#
[
diplomat
:
:
attr
(
auto
getter
)
]
pub
fn
kind
(
&
self
)
-
>
CalendarKind
{
self
.
0
.
kind
(
)
.
into
(
)
}
}
}
