#
[
diplomat
:
:
bridge
]
pub
mod
ffi
{
use
crate
:
:
{
errors
:
:
ffi
:
:
ICU4XError
provider
:
:
ffi
:
:
ICU4XDataProvider
}
;
use
alloc
:
:
boxed
:
:
Box
;
use
diplomat_runtime
:
:
DiplomatStr
;
use
icu_experimental
:
:
units
:
:
converter
:
:
UnitsConverter
;
use
icu_experimental
:
:
units
:
:
converter_factory
:
:
ConverterFactory
;
use
icu_experimental
:
:
units
:
:
measureunit
:
:
MeasureUnit
;
use
icu_experimental
:
:
units
:
:
measureunit
:
:
MeasureUnitParser
;
#
[
diplomat
:
:
opaque
]
#
[
diplomat
:
:
rust_link
(
icu
:
:
experimental
:
:
units
:
:
converter_factory
:
:
ConverterFactory
Struct
)
]
pub
struct
ICU4XUnitsConverterFactory
(
pub
ConverterFactory
)
;
impl
ICU4XUnitsConverterFactory
{
#
[
diplomat
:
:
rust_link
(
icu
:
:
experimental
:
:
units
:
:
converter_factory
:
:
ConverterFactory
:
:
new
FnInStruct
)
]
#
[
diplomat
:
:
attr
(
all
(
supports
=
constructors
supports
=
fallible_constructors
)
constructor
)
]
pub
fn
create
(
provider
:
&
ICU4XDataProvider
)
-
>
Result
<
Box
<
ICU4XUnitsConverterFactory
>
ICU4XError
>
{
Ok
(
Box
:
:
new
(
ICU4XUnitsConverterFactory
(
call_constructor
!
(
ConverterFactory
:
:
new
[
r
=
>
Ok
(
r
)
]
ConverterFactory
:
:
try_new_with_any_provider
ConverterFactory
:
:
try_new_with_buffer_provider
provider
)
?
)
)
)
}
#
[
diplomat
:
:
rust_link
(
icu
:
:
experimental
:
:
units
:
:
converter_factory
:
:
ConverterFactory
:
:
converter
FnInStruct
)
]
pub
fn
converter
(
&
self
from
:
&
ICU4XMeasureUnit
to
:
&
ICU4XMeasureUnit
)
-
>
Option
<
Box
<
ICU4XUnitsConverter
>
>
{
let
converter
:
Option
<
UnitsConverter
<
f64
>
>
=
self
.
0
.
converter
(
&
from
.
0
&
to
.
0
)
;
Some
(
ICU4XUnitsConverter
(
converter
?
)
.
into
(
)
)
}
#
[
diplomat
:
:
rust_link
(
icu
:
:
experimental
:
:
units
:
:
converter_factory
:
:
ConverterFactory
:
:
parser
FnInStruct
)
]
pub
fn
parser
<
'
a
>
(
&
'
a
self
)
-
>
Box
<
ICU4XMeasureUnitParser
<
'
a
>
>
{
ICU4XMeasureUnitParser
(
self
.
0
.
parser
(
)
)
.
into
(
)
}
}
#
[
diplomat
:
:
opaque
]
#
[
diplomat
:
:
rust_link
(
icu
:
:
experimental
:
:
units
:
:
measureunit
:
:
MeasureUnitParser
Struct
)
]
pub
struct
ICU4XMeasureUnitParser
<
'
a
>
(
pub
MeasureUnitParser
<
'
a
>
)
;
impl
<
'
a
>
ICU4XMeasureUnitParser
<
'
a
>
{
#
[
diplomat
:
:
rust_link
(
icu
:
:
experimental
:
:
units
:
:
measureunit
:
:
MeasureUnitParser
:
:
parse
FnInStruct
)
]
pub
fn
parse
(
&
self
unit_id
:
&
DiplomatStr
)
-
>
Result
<
Box
<
ICU4XMeasureUnit
>
ICU4XError
>
{
Ok
(
Box
:
:
new
(
ICU4XMeasureUnit
(
self
.
0
.
try_from_bytes
(
unit_id
)
?
)
)
)
}
}
#
[
diplomat
:
:
opaque
]
#
[
diplomat
:
:
rust_link
(
icu
:
:
experimental
:
:
units
:
:
measureunit
:
:
MeasureUnit
Struct
)
]
pub
struct
ICU4XMeasureUnit
(
pub
MeasureUnit
)
;
#
[
diplomat
:
:
opaque
]
#
[
diplomat
:
:
rust_link
(
icu
:
:
experimental
:
:
units
:
:
converter
:
:
UnitsConverter
Struct
)
]
pub
struct
ICU4XUnitsConverter
(
pub
UnitsConverter
<
f64
>
)
;
impl
ICU4XUnitsConverter
{
#
[
diplomat
:
:
rust_link
(
icu
:
:
experimental
:
:
units
:
:
converter
:
:
UnitsConverter
:
:
convert
FnInStruct
)
]
#
[
diplomat
:
:
attr
(
dart
rename
=
"
convert_double
"
)
]
pub
fn
convert_f64
(
&
self
value
:
f64
)
-
>
f64
{
self
.
0
.
convert
(
&
value
)
}
#
[
diplomat
:
:
rust_link
(
icu
:
:
experimental
:
:
units
:
:
converter
:
:
UnitsConverter
:
:
clone
FnInStruct
)
]
pub
fn
clone
(
&
self
)
-
>
Box
<
Self
>
{
Box
:
:
new
(
ICU4XUnitsConverter
(
self
.
0
.
clone
(
)
)
)
}
}
}
