#
[
diplomat
:
:
bridge
]
#
[
diplomat
:
:
abi_rename
=
"
icu4x_
{
0
}
_mv1
"
]
#
[
diplomat
:
:
attr
(
auto
namespace
=
"
icu4x
"
)
]
pub
mod
ffi
{
use
alloc
:
:
boxed
:
:
Box
;
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
fmt
:
:
Write
;
#
[
cfg
(
feature
=
"
buffer_provider
"
)
]
use
crate
:
:
unstable
:
:
{
errors
:
:
ffi
:
:
DataError
provider
:
:
ffi
:
:
DataProvider
}
;
pub
enum
BidiDirection
{
Ltr
Rtl
Mixed
}
#
[
diplomat
:
:
opaque
]
#
[
diplomat
:
:
rust_link
(
icu
:
:
properties
:
:
props
:
:
BidiClass
Struct
)
]
pub
struct
Bidi
(
pub
icu_properties
:
:
CodePointMapData
<
icu_properties
:
:
props
:
:
BidiClass
>
)
;
impl
Bidi
{
#
[
diplomat
:
:
attr
(
auto
constructor
)
]
#
[
cfg
(
feature
=
"
compiled_data
"
)
]
pub
fn
create
(
)
-
>
Box
<
Bidi
>
{
Box
:
:
new
(
Bidi
(
icu_properties
:
:
CodePointMapData
:
:
new
(
)
.
static_to_owned
(
)
)
)
}
#
[
diplomat
:
:
attr
(
all
(
supports
=
fallible_constructors
supports
=
named_constructors
)
named_constructor
=
"
with_provider
"
)
]
#
[
cfg
(
feature
=
"
buffer_provider
"
)
]
pub
fn
create_with_provider
(
provider
:
&
DataProvider
)
-
>
Result
<
Box
<
Bidi
>
DataError
>
{
Ok
(
Box
:
:
new
(
Bidi
(
icu_properties
:
:
CodePointMapData
:
:
try_new_unstable
(
&
provider
.
get_unstable
(
)
?
)
?
)
)
)
}
#
[
diplomat
:
:
rust_link
(
unicode_bidi
:
:
BidiInfo
:
:
new_with_data_source
FnInStruct
)
]
#
[
diplomat
:
:
rust_link
(
icu
:
:
properties
:
:
CodePointMapDataBorrowed
:
:
bidi_class
FnInStruct
hidden
)
]
#
[
diplomat
:
:
attr
(
not
(
supports
=
utf8_strings
)
disable
)
]
#
[
diplomat
:
:
attr
(
*
rename
=
"
for_text
"
)
]
pub
fn
for_text_utf8
<
'
text
>
(
&
self
text
:
&
'
text
DiplomatStr
default_level
:
Option
<
u8
>
)
-
>
Option
<
Box
<
BidiInfo
<
'
text
>
>
>
{
let
text
=
core
:
:
str
:
:
from_utf8
(
text
)
.
ok
(
)
?
;
Some
(
Box
:
:
new
(
BidiInfo
(
unicode_bidi
:
:
BidiInfo
:
:
new_with_data_source
(
&
self
.
0
.
as_borrowed
(
)
text
default_level
.
and_then
(
|
l
|
unicode_bidi
:
:
Level
:
:
new
(
l
)
.
ok
(
)
)
)
)
)
)
}
#
[
diplomat
:
:
rust_link
(
unicode_bidi
:
:
BidiInfo
:
:
new_with_data_source
FnInStruct
)
]
#
[
diplomat
:
:
rust_link
(
icu
:
:
properties
:
:
CodePointMapDataBorrowed
:
:
bidi_class
FnInStruct
hidden
)
]
#
[
diplomat
:
:
attr
(
supports
=
utf8_strings
disable
)
]
#
[
diplomat
:
:
attr
(
supports
=
utf16_strings
rename
=
"
for_text
"
)
]
pub
fn
for_text_valid_utf8
<
'
text
>
(
&
self
text
:
&
'
text
str
default_level
:
Option
<
u8
>
)
-
>
Box
<
BidiInfo
<
'
text
>
>
{
Box
:
:
new
(
BidiInfo
(
unicode_bidi
:
:
BidiInfo
:
:
new_with_data_source
(
&
self
.
0
.
as_borrowed
(
)
text
default_level
.
and_then
(
|
l
|
unicode_bidi
:
:
Level
:
:
new
(
l
)
.
ok
(
)
)
)
)
)
}
#
[
diplomat
:
:
rust_link
(
unicode_bidi
:
:
BidiInfo
:
:
reorder_visual
FnInStruct
)
]
pub
fn
reorder_visual
(
&
self
levels
:
&
[
u8
]
)
-
>
Box
<
ReorderedIndexMap
>
{
let
levels
=
unicode_bidi
:
:
Level
:
:
from_slice_unchecked
(
levels
)
;
Box
:
:
new
(
ReorderedIndexMap
(
unicode_bidi
:
:
BidiInfo
:
:
reorder_visual
(
levels
)
)
)
}
#
[
diplomat
:
:
rust_link
(
unicode_bidi
:
:
Level
:
:
is_rtl
FnInStruct
)
]
pub
fn
level_is_rtl
(
level
:
u8
)
-
>
bool
{
unicode_bidi
:
:
Level
:
:
new
(
level
)
.
unwrap_or_else
(
|
_
|
unicode_bidi
:
:
Level
:
:
ltr
(
)
)
.
is_rtl
(
)
}
#
[
diplomat
:
:
rust_link
(
unicode_bidi
:
:
Level
:
:
is_ltr
FnInStruct
)
]
pub
fn
level_is_ltr
(
level
:
u8
)
-
>
bool
{
unicode_bidi
:
:
Level
:
:
new
(
level
)
.
unwrap_or_else
(
|
_
|
unicode_bidi
:
:
Level
:
:
ltr
(
)
)
.
is_ltr
(
)
}
#
[
diplomat
:
:
rust_link
(
unicode_bidi
:
:
Level
:
:
rtl
FnInStruct
)
]
pub
fn
level_rtl
(
)
-
>
u8
{
unicode_bidi
:
:
Level
:
:
rtl
(
)
.
number
(
)
}
#
[
diplomat
:
:
rust_link
(
unicode_bidi
:
:
Level
:
:
ltr
FnInStruct
)
]
pub
fn
level_ltr
(
)
-
>
u8
{
unicode_bidi
:
:
Level
:
:
ltr
(
)
.
number
(
)
}
}
#
[
diplomat
:
:
opaque
]
pub
struct
ReorderedIndexMap
(
pub
Vec
<
usize
>
)
;
impl
ReorderedIndexMap
{
#
[
diplomat
:
:
attr
(
auto
getter
)
]
pub
fn
as_slice
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
[
usize
]
{
&
self
.
0
}
#
[
diplomat
:
:
attr
(
auto
getter
=
"
length
"
)
]
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
0
.
len
(
)
}
#
[
diplomat
:
:
attr
(
auto
getter
)
]
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
0
.
is_empty
(
)
}
#
[
diplomat
:
:
attr
(
auto
indexer
)
]
pub
fn
get
(
&
self
index
:
usize
)
-
>
usize
{
self
.
0
.
get
(
index
)
.
copied
(
)
.
unwrap_or
(
0
)
}
}
#
[
diplomat
:
:
rust_link
(
unicode_bidi
:
:
BidiInfo
Struct
)
]
#
[
diplomat
:
:
opaque
]
pub
struct
BidiInfo
<
'
text
>
(
pub
unicode_bidi
:
:
BidiInfo
<
'
text
>
)
;
impl
<
'
text
>
BidiInfo
<
'
text
>
{
#
[
diplomat
:
:
attr
(
auto
getter
)
]
pub
fn
paragraph_count
(
&
self
)
-
>
usize
{
self
.
0
.
paragraphs
.
len
(
)
}
pub
fn
paragraph_at
(
&
'
text
self
n
:
usize
)
-
>
Option
<
Box
<
BidiParagraph
<
'
text
>
>
>
{
self
.
0
.
paragraphs
.
get
(
n
)
.
map
(
|
p
|
Box
:
:
new
(
BidiParagraph
(
unicode_bidi
:
:
Paragraph
:
:
new
(
&
self
.
0
p
)
)
)
)
}
#
[
diplomat
:
:
attr
(
auto
getter
)
]
pub
fn
size
(
&
self
)
-
>
usize
{
self
.
0
.
levels
.
len
(
)
}
pub
fn
level_at
(
&
self
pos
:
usize
)
-
>
u8
{
if
let
Some
(
l
)
=
self
.
0
.
levels
.
get
(
pos
)
{
l
.
number
(
)
}
else
{
0
}
}
}
#
[
diplomat
:
:
opaque
]
pub
struct
BidiParagraph
<
'
info
>
(
pub
unicode_bidi
:
:
Paragraph
<
'
info
'
info
>
)
;
impl
<
'
info
>
BidiParagraph
<
'
info
>
{
pub
fn
set_paragraph_in_text
(
&
mut
self
n
:
usize
)
-
>
bool
{
let
Some
(
para
)
=
self
.
0
.
info
.
paragraphs
.
get
(
n
)
else
{
return
false
;
}
;
self
.
0
=
unicode_bidi
:
:
Paragraph
:
:
new
(
self
.
0
.
info
para
)
;
true
}
#
[
diplomat
:
:
rust_link
(
unicode_bidi
:
:
Paragraph
:
:
level_at
FnInStruct
)
]
#
[
diplomat
:
:
attr
(
auto
getter
)
]
pub
fn
direction
(
&
self
)
-
>
BidiDirection
{
self
.
0
.
direction
(
)
.
into
(
)
}
#
[
diplomat
:
:
rust_link
(
unicode_bidi
:
:
ParagraphInfo
:
:
len
FnInStruct
)
]
#
[
diplomat
:
:
attr
(
auto
getter
)
]
pub
fn
size
(
&
self
)
-
>
usize
{
self
.
0
.
para
.
len
(
)
}
#
[
diplomat
:
:
attr
(
auto
getter
)
]
pub
fn
range_start
(
&
self
)
-
>
usize
{
self
.
0
.
para
.
range
.
start
}
#
[
diplomat
:
:
attr
(
auto
getter
)
]
pub
fn
range_end
(
&
self
)
-
>
usize
{
self
.
0
.
para
.
range
.
end
}
#
[
diplomat
:
:
rust_link
(
unicode_bidi
:
:
Paragraph
:
:
level_at
FnInStruct
)
]
#
[
diplomat
:
:
attr
(
demo_gen
disable
)
]
pub
fn
reorder_line
(
&
self
range_start
:
usize
range_end
:
usize
out
:
&
mut
DiplomatWrite
)
-
>
Option
<
(
)
>
{
if
range_start
<
self
.
range_start
(
)
|
|
range_end
>
self
.
range_end
(
)
{
return
None
;
}
let
info
=
self
.
0
.
info
;
let
para
=
self
.
0
.
para
;
let
reordered
=
info
.
reorder_line
(
para
range_start
.
.
range_end
)
;
let
_infallible
=
out
.
write_str
(
&
reordered
)
;
Some
(
(
)
)
}
#
[
diplomat
:
:
rust_link
(
unicode_bidi
:
:
Paragraph
:
:
level_at
FnInStruct
)
]
pub
fn
level_at
(
&
self
pos
:
usize
)
-
>
u8
{
if
pos
>
=
self
.
size
(
)
{
return
0
;
}
self
.
0
.
level_at
(
pos
)
.
number
(
)
}
}
}
use
unicode_bidi
:
:
Direction
;
impl
From
<
Direction
>
for
ffi
:
:
BidiDirection
{
fn
from
(
other
:
Direction
)
-
>
Self
{
match
other
{
Direction
:
:
Ltr
=
>
Self
:
:
Ltr
Direction
:
:
Rtl
=
>
Self
:
:
Rtl
Direction
:
:
Mixed
=
>
Self
:
:
Mixed
}
}
}
