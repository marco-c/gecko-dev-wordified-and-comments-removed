#
ifndef
ICU4XIsoDateTime_HPP
#
define
ICU4XIsoDateTime_HPP
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdbool
.
h
>
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
variant
>
#
include
<
optional
>
#
include
"
diplomat_runtime
.
hpp
"
#
include
"
ICU4XIsoDateTime
.
h
"
class
ICU4XIsoDateTime
;
#
include
"
ICU4XError
.
hpp
"
class
ICU4XIsoDate
;
class
ICU4XTime
;
class
ICU4XDateTime
;
class
ICU4XCalendar
;
#
include
"
ICU4XIsoWeekday
.
hpp
"
class
ICU4XWeekCalculator
;
struct
ICU4XWeekOf
;
struct
ICU4XIsoDateTimeDeleter
{
void
operator
(
)
(
capi
:
:
ICU4XIsoDateTime
*
l
)
const
noexcept
{
capi
:
:
ICU4XIsoDateTime_destroy
(
l
)
;
}
}
;
class
ICU4XIsoDateTime
{
public
:
static
diplomat
:
:
result
<
ICU4XIsoDateTime
ICU4XError
>
create
(
int32_t
year
uint8_t
month
uint8_t
day
uint8_t
hour
uint8_t
minute
uint8_t
second
uint32_t
nanosecond
)
;
static
ICU4XIsoDateTime
crate_from_date_and_time
(
const
ICU4XIsoDate
&
date
const
ICU4XTime
&
time
)
;
static
ICU4XIsoDateTime
local_unix_epoch
(
)
;
static
ICU4XIsoDateTime
create_from_minutes_since_local_unix_epoch
(
int32_t
minutes
)
;
ICU4XIsoDate
date
(
)
const
;
ICU4XTime
time
(
)
const
;
ICU4XDateTime
to_any
(
)
const
;
int32_t
minutes_since_local_unix_epoch
(
)
const
;
ICU4XDateTime
to_calendar
(
const
ICU4XCalendar
&
calendar
)
const
;
uint8_t
hour
(
)
const
;
uint8_t
minute
(
)
const
;
uint8_t
second
(
)
const
;
uint32_t
nanosecond
(
)
const
;
uint16_t
day_of_year
(
)
const
;
uint32_t
day_of_month
(
)
const
;
ICU4XIsoWeekday
day_of_week
(
)
const
;
uint32_t
week_of_month
(
ICU4XIsoWeekday
first_weekday
)
const
;
diplomat
:
:
result
<
ICU4XWeekOf
ICU4XError
>
week_of_year
(
const
ICU4XWeekCalculator
&
calculator
)
const
;
uint32_t
month
(
)
const
;
int32_t
year
(
)
const
;
bool
is_in_leap_year
(
)
const
;
uint8_t
months_in_year
(
)
const
;
uint8_t
days_in_month
(
)
const
;
uint16_t
days_in_year
(
)
const
;
inline
const
capi
:
:
ICU4XIsoDateTime
*
AsFFI
(
)
const
{
return
this
-
>
inner
.
get
(
)
;
}
inline
capi
:
:
ICU4XIsoDateTime
*
AsFFIMut
(
)
{
return
this
-
>
inner
.
get
(
)
;
}
inline
explicit
ICU4XIsoDateTime
(
capi
:
:
ICU4XIsoDateTime
*
i
)
:
inner
(
i
)
{
}
ICU4XIsoDateTime
(
)
=
default
;
ICU4XIsoDateTime
(
ICU4XIsoDateTime
&
&
)
noexcept
=
default
;
ICU4XIsoDateTime
&
operator
=
(
ICU4XIsoDateTime
&
&
other
)
noexcept
=
default
;
private
:
std
:
:
unique_ptr
<
capi
:
:
ICU4XIsoDateTime
ICU4XIsoDateTimeDeleter
>
inner
;
}
;
#
include
"
ICU4XIsoDate
.
hpp
"
#
include
"
ICU4XTime
.
hpp
"
#
include
"
ICU4XDateTime
.
hpp
"
#
include
"
ICU4XCalendar
.
hpp
"
#
include
"
ICU4XWeekCalculator
.
hpp
"
#
include
"
ICU4XWeekOf
.
hpp
"
inline
diplomat
:
:
result
<
ICU4XIsoDateTime
ICU4XError
>
ICU4XIsoDateTime
:
:
create
(
int32_t
year
uint8_t
month
uint8_t
day
uint8_t
hour
uint8_t
minute
uint8_t
second
uint32_t
nanosecond
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XIsoDateTime_create
(
year
month
day
hour
minute
second
nanosecond
)
;
diplomat
:
:
result
<
ICU4XIsoDateTime
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XIsoDateTime
>
(
ICU4XIsoDateTime
(
diplomat_result_raw_out_value
.
ok
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
;
}
return
diplomat_result_out_value
;
}
inline
ICU4XIsoDateTime
ICU4XIsoDateTime
:
:
crate_from_date_and_time
(
const
ICU4XIsoDate
&
date
const
ICU4XTime
&
time
)
{
return
ICU4XIsoDateTime
(
capi
:
:
ICU4XIsoDateTime_crate_from_date_and_time
(
date
.
AsFFI
(
)
time
.
AsFFI
(
)
)
)
;
}
inline
ICU4XIsoDateTime
ICU4XIsoDateTime
:
:
local_unix_epoch
(
)
{
return
ICU4XIsoDateTime
(
capi
:
:
ICU4XIsoDateTime_local_unix_epoch
(
)
)
;
}
inline
ICU4XIsoDateTime
ICU4XIsoDateTime
:
:
create_from_minutes_since_local_unix_epoch
(
int32_t
minutes
)
{
return
ICU4XIsoDateTime
(
capi
:
:
ICU4XIsoDateTime_create_from_minutes_since_local_unix_epoch
(
minutes
)
)
;
}
inline
ICU4XIsoDate
ICU4XIsoDateTime
:
:
date
(
)
const
{
return
ICU4XIsoDate
(
capi
:
:
ICU4XIsoDateTime_date
(
this
-
>
inner
.
get
(
)
)
)
;
}
inline
ICU4XTime
ICU4XIsoDateTime
:
:
time
(
)
const
{
return
ICU4XTime
(
capi
:
:
ICU4XIsoDateTime_time
(
this
-
>
inner
.
get
(
)
)
)
;
}
inline
ICU4XDateTime
ICU4XIsoDateTime
:
:
to_any
(
)
const
{
return
ICU4XDateTime
(
capi
:
:
ICU4XIsoDateTime_to_any
(
this
-
>
inner
.
get
(
)
)
)
;
}
inline
int32_t
ICU4XIsoDateTime
:
:
minutes_since_local_unix_epoch
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_minutes_since_local_unix_epoch
(
this
-
>
inner
.
get
(
)
)
;
}
inline
ICU4XDateTime
ICU4XIsoDateTime
:
:
to_calendar
(
const
ICU4XCalendar
&
calendar
)
const
{
return
ICU4XDateTime
(
capi
:
:
ICU4XIsoDateTime_to_calendar
(
this
-
>
inner
.
get
(
)
calendar
.
AsFFI
(
)
)
)
;
}
inline
uint8_t
ICU4XIsoDateTime
:
:
hour
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_hour
(
this
-
>
inner
.
get
(
)
)
;
}
inline
uint8_t
ICU4XIsoDateTime
:
:
minute
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_minute
(
this
-
>
inner
.
get
(
)
)
;
}
inline
uint8_t
ICU4XIsoDateTime
:
:
second
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_second
(
this
-
>
inner
.
get
(
)
)
;
}
inline
uint32_t
ICU4XIsoDateTime
:
:
nanosecond
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_nanosecond
(
this
-
>
inner
.
get
(
)
)
;
}
inline
uint16_t
ICU4XIsoDateTime
:
:
day_of_year
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_day_of_year
(
this
-
>
inner
.
get
(
)
)
;
}
inline
uint32_t
ICU4XIsoDateTime
:
:
day_of_month
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_day_of_month
(
this
-
>
inner
.
get
(
)
)
;
}
inline
ICU4XIsoWeekday
ICU4XIsoDateTime
:
:
day_of_week
(
)
const
{
return
static_cast
<
ICU4XIsoWeekday
>
(
capi
:
:
ICU4XIsoDateTime_day_of_week
(
this
-
>
inner
.
get
(
)
)
)
;
}
inline
uint32_t
ICU4XIsoDateTime
:
:
week_of_month
(
ICU4XIsoWeekday
first_weekday
)
const
{
return
capi
:
:
ICU4XIsoDateTime_week_of_month
(
this
-
>
inner
.
get
(
)
static_cast
<
capi
:
:
ICU4XIsoWeekday
>
(
first_weekday
)
)
;
}
inline
diplomat
:
:
result
<
ICU4XWeekOf
ICU4XError
>
ICU4XIsoDateTime
:
:
week_of_year
(
const
ICU4XWeekCalculator
&
calculator
)
const
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XIsoDateTime_week_of_year
(
this
-
>
inner
.
get
(
)
calculator
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XWeekOf
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
capi
:
:
ICU4XWeekOf
diplomat_raw_struct_out_value
=
diplomat_result_raw_out_value
.
ok
;
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XWeekOf
>
(
ICU4XWeekOf
{
.
week
=
std
:
:
move
(
diplomat_raw_struct_out_value
.
week
)
.
unit
=
std
:
:
move
(
static_cast
<
ICU4XWeekRelativeUnit
>
(
diplomat_raw_struct_out_value
.
unit
)
)
}
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
;
}
return
diplomat_result_out_value
;
}
inline
uint32_t
ICU4XIsoDateTime
:
:
month
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_month
(
this
-
>
inner
.
get
(
)
)
;
}
inline
int32_t
ICU4XIsoDateTime
:
:
year
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_year
(
this
-
>
inner
.
get
(
)
)
;
}
inline
bool
ICU4XIsoDateTime
:
:
is_in_leap_year
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_is_in_leap_year
(
this
-
>
inner
.
get
(
)
)
;
}
inline
uint8_t
ICU4XIsoDateTime
:
:
months_in_year
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_months_in_year
(
this
-
>
inner
.
get
(
)
)
;
}
inline
uint8_t
ICU4XIsoDateTime
:
:
days_in_month
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_days_in_month
(
this
-
>
inner
.
get
(
)
)
;
}
inline
uint16_t
ICU4XIsoDateTime
:
:
days_in_year
(
)
const
{
return
capi
:
:
ICU4XIsoDateTime_days_in_year
(
this
-
>
inner
.
get
(
)
)
;
}
#
endif
