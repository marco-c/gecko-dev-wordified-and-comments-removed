#
ifndef
ICU4XLocaleFallbackIterator_HPP
#
define
ICU4XLocaleFallbackIterator_HPP
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdbool
.
h
>
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
variant
>
#
include
<
optional
>
#
include
"
diplomat_runtime
.
hpp
"
#
include
"
ICU4XLocaleFallbackIterator
.
h
"
class
ICU4XLocale
;
struct
ICU4XLocaleFallbackIteratorDeleter
{
void
operator
(
)
(
capi
:
:
ICU4XLocaleFallbackIterator
*
l
)
const
noexcept
{
capi
:
:
ICU4XLocaleFallbackIterator_destroy
(
l
)
;
}
}
;
class
ICU4XLocaleFallbackIterator
{
public
:
ICU4XLocale
get
(
)
const
;
void
step
(
)
;
inline
const
capi
:
:
ICU4XLocaleFallbackIterator
*
AsFFI
(
)
const
{
return
this
-
>
inner
.
get
(
)
;
}
inline
capi
:
:
ICU4XLocaleFallbackIterator
*
AsFFIMut
(
)
{
return
this
-
>
inner
.
get
(
)
;
}
inline
explicit
ICU4XLocaleFallbackIterator
(
capi
:
:
ICU4XLocaleFallbackIterator
*
i
)
:
inner
(
i
)
{
}
ICU4XLocaleFallbackIterator
(
)
=
default
;
ICU4XLocaleFallbackIterator
(
ICU4XLocaleFallbackIterator
&
&
)
noexcept
=
default
;
ICU4XLocaleFallbackIterator
&
operator
=
(
ICU4XLocaleFallbackIterator
&
&
other
)
noexcept
=
default
;
private
:
std
:
:
unique_ptr
<
capi
:
:
ICU4XLocaleFallbackIterator
ICU4XLocaleFallbackIteratorDeleter
>
inner
;
}
;
#
include
"
ICU4XLocale
.
hpp
"
inline
ICU4XLocale
ICU4XLocaleFallbackIterator
:
:
get
(
)
const
{
return
ICU4XLocale
(
capi
:
:
ICU4XLocaleFallbackIterator_get
(
this
-
>
inner
.
get
(
)
)
)
;
}
inline
void
ICU4XLocaleFallbackIterator
:
:
step
(
)
{
capi
:
:
ICU4XLocaleFallbackIterator_step
(
this
-
>
inner
.
get
(
)
)
;
}
#
endif
