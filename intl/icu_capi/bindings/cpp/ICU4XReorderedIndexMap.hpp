#
ifndef
ICU4XReorderedIndexMap_HPP
#
define
ICU4XReorderedIndexMap_HPP
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdbool
.
h
>
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
variant
>
#
include
<
optional
>
#
include
"
diplomat_runtime
.
hpp
"
#
include
"
ICU4XReorderedIndexMap
.
h
"
struct
ICU4XReorderedIndexMapDeleter
{
void
operator
(
)
(
capi
:
:
ICU4XReorderedIndexMap
*
l
)
const
noexcept
{
capi
:
:
ICU4XReorderedIndexMap_destroy
(
l
)
;
}
}
;
class
ICU4XReorderedIndexMap
{
public
:
const
diplomat
:
:
span
<
const
size_t
>
as_slice
(
)
const
;
size_t
len
(
)
const
;
bool
is_empty
(
)
const
;
size_t
get
(
size_t
index
)
const
;
inline
const
capi
:
:
ICU4XReorderedIndexMap
*
AsFFI
(
)
const
{
return
this
-
>
inner
.
get
(
)
;
}
inline
capi
:
:
ICU4XReorderedIndexMap
*
AsFFIMut
(
)
{
return
this
-
>
inner
.
get
(
)
;
}
inline
explicit
ICU4XReorderedIndexMap
(
capi
:
:
ICU4XReorderedIndexMap
*
i
)
:
inner
(
i
)
{
}
ICU4XReorderedIndexMap
(
)
=
default
;
ICU4XReorderedIndexMap
(
ICU4XReorderedIndexMap
&
&
)
noexcept
=
default
;
ICU4XReorderedIndexMap
&
operator
=
(
ICU4XReorderedIndexMap
&
&
other
)
noexcept
=
default
;
private
:
std
:
:
unique_ptr
<
capi
:
:
ICU4XReorderedIndexMap
ICU4XReorderedIndexMapDeleter
>
inner
;
}
;
inline
const
diplomat
:
:
span
<
const
size_t
>
ICU4XReorderedIndexMap
:
:
as_slice
(
)
const
{
capi
:
:
DiplomatUsizeView
diplomat_slice_raw_out_value
=
capi
:
:
ICU4XReorderedIndexMap_as_slice
(
this
-
>
inner
.
get
(
)
)
;
diplomat
:
:
span
<
const
size_t
>
slice
(
diplomat_slice_raw_out_value
.
data
diplomat_slice_raw_out_value
.
len
)
;
return
slice
;
}
inline
size_t
ICU4XReorderedIndexMap
:
:
len
(
)
const
{
return
capi
:
:
ICU4XReorderedIndexMap_len
(
this
-
>
inner
.
get
(
)
)
;
}
inline
bool
ICU4XReorderedIndexMap
:
:
is_empty
(
)
const
{
return
capi
:
:
ICU4XReorderedIndexMap_is_empty
(
this
-
>
inner
.
get
(
)
)
;
}
inline
size_t
ICU4XReorderedIndexMap
:
:
get
(
size_t
index
)
const
{
return
capi
:
:
ICU4XReorderedIndexMap_get
(
this
-
>
inner
.
get
(
)
index
)
;
}
#
endif
