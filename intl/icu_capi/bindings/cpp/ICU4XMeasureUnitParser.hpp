#
ifndef
ICU4XMeasureUnitParser_HPP
#
define
ICU4XMeasureUnitParser_HPP
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdbool
.
h
>
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
variant
>
#
include
<
optional
>
#
include
"
diplomat_runtime
.
hpp
"
#
include
"
ICU4XMeasureUnitParser
.
h
"
class
ICU4XMeasureUnit
;
#
include
"
ICU4XError
.
hpp
"
struct
ICU4XMeasureUnitParserDeleter
{
void
operator
(
)
(
capi
:
:
ICU4XMeasureUnitParser
*
l
)
const
noexcept
{
capi
:
:
ICU4XMeasureUnitParser_destroy
(
l
)
;
}
}
;
class
ICU4XMeasureUnitParser
{
public
:
diplomat
:
:
result
<
ICU4XMeasureUnit
ICU4XError
>
parse
(
const
std
:
:
string_view
unit_id
)
const
;
inline
const
capi
:
:
ICU4XMeasureUnitParser
*
AsFFI
(
)
const
{
return
this
-
>
inner
.
get
(
)
;
}
inline
capi
:
:
ICU4XMeasureUnitParser
*
AsFFIMut
(
)
{
return
this
-
>
inner
.
get
(
)
;
}
inline
explicit
ICU4XMeasureUnitParser
(
capi
:
:
ICU4XMeasureUnitParser
*
i
)
:
inner
(
i
)
{
}
ICU4XMeasureUnitParser
(
)
=
default
;
ICU4XMeasureUnitParser
(
ICU4XMeasureUnitParser
&
&
)
noexcept
=
default
;
ICU4XMeasureUnitParser
&
operator
=
(
ICU4XMeasureUnitParser
&
&
other
)
noexcept
=
default
;
private
:
std
:
:
unique_ptr
<
capi
:
:
ICU4XMeasureUnitParser
ICU4XMeasureUnitParserDeleter
>
inner
;
}
;
#
include
"
ICU4XMeasureUnit
.
hpp
"
inline
diplomat
:
:
result
<
ICU4XMeasureUnit
ICU4XError
>
ICU4XMeasureUnitParser
:
:
parse
(
const
std
:
:
string_view
unit_id
)
const
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XMeasureUnitParser_parse
(
this
-
>
inner
.
get
(
)
unit_id
.
data
(
)
unit_id
.
size
(
)
)
;
diplomat
:
:
result
<
ICU4XMeasureUnit
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XMeasureUnit
>
(
ICU4XMeasureUnit
(
diplomat_result_raw_out_value
.
ok
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
;
}
return
diplomat_result_out_value
;
}
#
endif
