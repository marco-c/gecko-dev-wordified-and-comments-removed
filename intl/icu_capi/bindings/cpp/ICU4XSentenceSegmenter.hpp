#
ifndef
ICU4XSentenceSegmenter_HPP
#
define
ICU4XSentenceSegmenter_HPP
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdbool
.
h
>
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
variant
>
#
include
<
optional
>
#
include
"
diplomat_runtime
.
hpp
"
#
include
"
ICU4XSentenceSegmenter
.
h
"
class
ICU4XDataProvider
;
class
ICU4XSentenceSegmenter
;
#
include
"
ICU4XError
.
hpp
"
class
ICU4XSentenceBreakIteratorUtf8
;
class
ICU4XSentenceBreakIteratorUtf16
;
class
ICU4XSentenceBreakIteratorLatin1
;
struct
ICU4XSentenceSegmenterDeleter
{
void
operator
(
)
(
capi
:
:
ICU4XSentenceSegmenter
*
l
)
const
noexcept
{
capi
:
:
ICU4XSentenceSegmenter_destroy
(
l
)
;
}
}
;
class
ICU4XSentenceSegmenter
{
public
:
static
diplomat
:
:
result
<
ICU4XSentenceSegmenter
ICU4XError
>
create
(
const
ICU4XDataProvider
&
provider
)
;
ICU4XSentenceBreakIteratorUtf8
segment_utf8
(
const
std
:
:
string_view
input
)
const
;
ICU4XSentenceBreakIteratorUtf16
segment_utf16
(
const
std
:
:
u16string_view
input
)
const
;
ICU4XSentenceBreakIteratorLatin1
segment_latin1
(
const
diplomat
:
:
span
<
const
uint8_t
>
input
)
const
;
inline
const
capi
:
:
ICU4XSentenceSegmenter
*
AsFFI
(
)
const
{
return
this
-
>
inner
.
get
(
)
;
}
inline
capi
:
:
ICU4XSentenceSegmenter
*
AsFFIMut
(
)
{
return
this
-
>
inner
.
get
(
)
;
}
inline
explicit
ICU4XSentenceSegmenter
(
capi
:
:
ICU4XSentenceSegmenter
*
i
)
:
inner
(
i
)
{
}
ICU4XSentenceSegmenter
(
)
=
default
;
ICU4XSentenceSegmenter
(
ICU4XSentenceSegmenter
&
&
)
noexcept
=
default
;
ICU4XSentenceSegmenter
&
operator
=
(
ICU4XSentenceSegmenter
&
&
other
)
noexcept
=
default
;
private
:
std
:
:
unique_ptr
<
capi
:
:
ICU4XSentenceSegmenter
ICU4XSentenceSegmenterDeleter
>
inner
;
}
;
#
include
"
ICU4XDataProvider
.
hpp
"
#
include
"
ICU4XSentenceBreakIteratorUtf8
.
hpp
"
#
include
"
ICU4XSentenceBreakIteratorUtf16
.
hpp
"
#
include
"
ICU4XSentenceBreakIteratorLatin1
.
hpp
"
inline
diplomat
:
:
result
<
ICU4XSentenceSegmenter
ICU4XError
>
ICU4XSentenceSegmenter
:
:
create
(
const
ICU4XDataProvider
&
provider
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XSentenceSegmenter_create
(
provider
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XSentenceSegmenter
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XSentenceSegmenter
>
(
ICU4XSentenceSegmenter
(
diplomat_result_raw_out_value
.
ok
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
;
}
return
diplomat_result_out_value
;
}
inline
ICU4XSentenceBreakIteratorUtf8
ICU4XSentenceSegmenter
:
:
segment_utf8
(
const
std
:
:
string_view
input
)
const
{
return
ICU4XSentenceBreakIteratorUtf8
(
capi
:
:
ICU4XSentenceSegmenter_segment_utf8
(
this
-
>
inner
.
get
(
)
input
.
data
(
)
input
.
size
(
)
)
)
;
}
inline
ICU4XSentenceBreakIteratorUtf16
ICU4XSentenceSegmenter
:
:
segment_utf16
(
const
std
:
:
u16string_view
input
)
const
{
return
ICU4XSentenceBreakIteratorUtf16
(
capi
:
:
ICU4XSentenceSegmenter_segment_utf16
(
this
-
>
inner
.
get
(
)
input
.
data
(
)
input
.
size
(
)
)
)
;
}
inline
ICU4XSentenceBreakIteratorLatin1
ICU4XSentenceSegmenter
:
:
segment_latin1
(
const
diplomat
:
:
span
<
const
uint8_t
>
input
)
const
{
return
ICU4XSentenceBreakIteratorLatin1
(
capi
:
:
ICU4XSentenceSegmenter_segment_latin1
(
this
-
>
inner
.
get
(
)
input
.
data
(
)
input
.
size
(
)
)
)
;
}
#
endif
