import
type
{
DecimalLimitError
}
from
"
.
/
DecimalLimitError
"
import
type
{
DecimalParseError
}
from
"
.
/
DecimalParseError
"
import
type
{
DecimalRoundingIncrement
}
from
"
.
/
DecimalRoundingIncrement
"
import
type
{
DecimalSign
}
from
"
.
/
DecimalSign
"
import
type
{
DecimalSignDisplay
}
from
"
.
/
DecimalSignDisplay
"
import
type
{
DecimalSignedRoundingMode
}
from
"
.
/
DecimalSignedRoundingMode
"
import
type
{
pointer
codepoint
}
from
"
.
/
diplomat
-
runtime
.
d
.
ts
"
;
export
class
Decimal
{
get
ffiValue
(
)
:
pointer
;
static
fromNumber
(
v
:
number
)
:
Decimal
;
static
fromBigInt
(
v
:
bigint
)
:
Decimal
;
static
fromNumberWithLowerMagnitude
(
f
:
number
magnitude
:
number
)
:
Decimal
;
static
fromNumberWithSignificantDigits
(
f
:
number
digits
:
number
)
:
Decimal
;
static
fromNumberWithRoundTripPrecision
(
f
:
number
)
:
Decimal
;
static
fromString
(
v
:
string
)
:
Decimal
;
digitAt
(
magnitude
:
number
)
:
number
;
get
magnitudeStart
(
)
:
number
;
get
magnitudeEnd
(
)
:
number
;
get
nonzeroMagnitudeStart
(
)
:
number
;
get
nonzeroMagnitudeEnd
(
)
:
number
;
get
isZero
(
)
:
boolean
;
multiplyPow10
(
power
:
number
)
:
void
;
get
sign
(
)
:
DecimalSign
;
set
sign
(
sign
:
DecimalSign
)
;
applySignDisplay
(
signDisplay
:
DecimalSignDisplay
)
:
void
;
trimStart
(
)
:
void
;
trimEnd
(
)
:
void
;
trimEndIfInteger
(
)
:
void
;
padStart
(
position
:
number
)
:
void
;
padEnd
(
position
:
number
)
:
void
;
setMaxPosition
(
position
:
number
)
:
void
;
round
(
position
:
number
)
:
void
;
ceil
(
position
:
number
)
:
void
;
expand
(
position
:
number
)
:
void
;
floor
(
position
:
number
)
:
void
;
trunc
(
position
:
number
)
:
void
;
roundWithMode
(
position
:
number
mode
:
DecimalSignedRoundingMode
)
:
void
;
roundWithModeAndIncrement
(
position
:
number
mode
:
DecimalSignedRoundingMode
increment
:
DecimalRoundingIncrement
)
:
void
;
concatenateEnd
(
other
:
Decimal
)
:
boolean
;
toString
(
)
:
string
;
}
