import
type
{
DataProvider
}
from
"
.
/
DataProvider
"
import
type
{
DateFormatter
}
from
"
.
/
DateFormatter
"
import
type
{
DateTimeFormatterLoadError
}
from
"
.
/
DateTimeFormatterLoadError
"
import
type
{
DateTimeWriteError
}
from
"
.
/
DateTimeWriteError
"
import
type
{
IsoDate
}
from
"
.
/
IsoDate
"
import
type
{
Locale
}
from
"
.
/
Locale
"
import
type
{
TimeZoneInfo
}
from
"
.
/
TimeZoneInfo
"
import
type
{
pointer
codepoint
}
from
"
.
/
diplomat
-
runtime
.
d
.
ts
"
;
export
class
ZonedDateFormatter
{
get
ffiValue
(
)
:
pointer
;
static
createSpecificLong
(
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createSpecificLongWithProvider
(
provider
:
DataProvider
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createSpecificShort
(
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createSpecificShortWithProvider
(
provider
:
DataProvider
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createLocalizedOffsetLong
(
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createLocalizedOffsetLongWithProvider
(
provider
:
DataProvider
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createLocalizedOffsetShort
(
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createLocalizedOffsetShortWithProvider
(
provider
:
DataProvider
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createGenericLong
(
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createGenericLongWithProvider
(
provider
:
DataProvider
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createGenericShort
(
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createGenericShortWithProvider
(
provider
:
DataProvider
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createLocation
(
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createLocationWithProvider
(
provider
:
DataProvider
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createExemplarCity
(
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
static
createExemplarCityWithProvider
(
provider
:
DataProvider
locale
:
Locale
formatter
:
DateFormatter
)
:
ZonedDateFormatter
;
formatIso
(
date
:
IsoDate
zone
:
TimeZoneInfo
)
:
string
;
}
