#
ifndef
nsHyphenator_h__
#
define
nsHyphenator_h__
#
include
"
base
/
shared_memory
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
class
nsIURI
;
struct
HyphDic
;
struct
CompiledData
;
namespace
mozilla
{
template
<
>
class
DefaultDelete
<
const
HyphDic
>
{
public
:
void
operator
(
)
(
const
HyphDic
*
ptr
)
const
;
}
;
template
<
>
class
DefaultDelete
<
const
CompiledData
>
{
public
:
void
operator
(
)
(
const
CompiledData
*
ptr
)
const
;
}
;
}
class
nsHyphenator
{
public
:
nsHyphenator
(
nsIURI
*
aURI
bool
aHyphenateCapitalized
)
;
NS_INLINE_DECL_REFCOUNTING
(
nsHyphenator
)
bool
IsValid
(
)
;
nsresult
Hyphenate
(
const
nsAString
&
aText
nsTArray
<
bool
>
&
aHyphens
)
;
void
CloneHandle
(
base
:
:
SharedMemoryHandle
*
aOutHandle
uint32_t
*
aOutSize
)
;
private
:
~
nsHyphenator
(
)
=
default
;
void
HyphenateWord
(
const
nsAString
&
aString
uint32_t
aStart
uint32_t
aLimit
nsTArray
<
bool
>
&
aHyphens
)
;
mozilla
:
:
Variant
<
const
void
*
mozilla
:
:
UniquePtr
<
base
:
:
SharedMemory
>
mozilla
:
:
UniquePtr
<
const
HyphDic
>
>
mDict
;
uint32_t
mDictSize
;
bool
mHyphenateCapitalized
;
}
;
#
endif
