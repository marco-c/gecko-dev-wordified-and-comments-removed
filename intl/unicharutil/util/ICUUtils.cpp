#
ifdef
MOZILLA_INTERNAL_API
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
ICUUtils
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
intl
/
LocaleService
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsString
.
h
"
#
include
"
unicode
/
unum
.
h
"
using
namespace
mozilla
;
using
mozilla
:
:
intl
:
:
LocaleService
;
class
NumberFormatDeleter
{
public
:
void
operator
(
)
(
UNumberFormat
*
aPtr
)
{
MOZ_ASSERT
(
aPtr
!
=
nullptr
"
UniquePtr
deleter
shouldn
'
t
be
called
for
nullptr
"
)
;
unum_close
(
aPtr
)
;
}
}
;
using
UniqueUNumberFormat
=
UniquePtr
<
UNumberFormat
NumberFormatDeleter
>
;
void
ICUUtils
:
:
LanguageTagIterForContent
:
:
GetNext
(
nsACString
&
aBCP47LangTag
)
{
if
(
mCurrentFallbackIndex
<
0
)
{
mCurrentFallbackIndex
=
0
;
nsAutoString
lang
;
mContent
-
>
GetLang
(
lang
)
;
if
(
!
lang
.
IsEmpty
(
)
)
{
CopyUTF16toUTF8
(
lang
aBCP47LangTag
)
;
return
;
}
}
if
(
mCurrentFallbackIndex
<
1
)
{
mCurrentFallbackIndex
=
1
;
nsAutoString
lang
;
mContent
-
>
OwnerDoc
(
)
-
>
GetContentLanguage
(
lang
)
;
if
(
!
lang
.
IsEmpty
(
)
)
{
CopyUTF16toUTF8
(
lang
aBCP47LangTag
)
;
return
;
}
}
if
(
mCurrentFallbackIndex
<
2
)
{
mCurrentFallbackIndex
=
2
;
nsAutoCString
appLocale
;
LocaleService
:
:
GetInstance
(
)
-
>
GetAppLocaleAsBCP47
(
aBCP47LangTag
)
;
return
;
}
aBCP47LangTag
.
Truncate
(
)
;
}
bool
ICUUtils
:
:
LocalizeNumber
(
double
aValue
LanguageTagIterForContent
&
aLangTags
nsAString
&
aLocalizedValue
)
{
MOZ_ASSERT
(
aLangTags
.
IsAtStart
(
)
"
Don
'
t
call
Next
(
)
before
passing
"
)
;
static
const
int32_t
kBufferSize
=
256
;
UChar
buffer
[
kBufferSize
]
;
nsAutoCString
langTag
;
aLangTags
.
GetNext
(
langTag
)
;
while
(
!
langTag
.
IsEmpty
(
)
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
UniqueUNumberFormat
format
(
unum_open
(
UNUM_DECIMAL
nullptr
0
langTag
.
get
(
)
nullptr
&
status
)
)
;
if
(
U_FAILURE
(
status
)
)
{
aLangTags
.
GetNext
(
langTag
)
;
continue
;
}
unum_setAttribute
(
format
.
get
(
)
UNUM_GROUPING_USED
StaticPrefs
:
:
dom_forms_number_grouping
(
)
)
;
unum_setAttribute
(
format
.
get
(
)
UNUM_MAX_FRACTION_DIGITS
16
)
;
int32_t
length
=
unum_formatDouble
(
format
.
get
(
)
aValue
buffer
kBufferSize
nullptr
&
status
)
;
NS_ASSERTION
(
length
<
kBufferSize
&
&
status
!
=
U_BUFFER_OVERFLOW_ERROR
&
&
status
!
=
U_STRING_NOT_TERMINATED_WARNING
"
Need
a
bigger
buffer
?
!
"
)
;
if
(
U_SUCCESS
(
status
)
)
{
ICUUtils
:
:
AssignUCharArrayToString
(
buffer
length
aLocalizedValue
)
;
return
true
;
}
aLangTags
.
GetNext
(
langTag
)
;
}
return
false
;
}
double
ICUUtils
:
:
ParseNumber
(
nsAString
&
aValue
LanguageTagIterForContent
&
aLangTags
)
{
MOZ_ASSERT
(
aLangTags
.
IsAtStart
(
)
"
Don
'
t
call
Next
(
)
before
passing
"
)
;
if
(
aValue
.
IsEmpty
(
)
)
{
return
std
:
:
numeric_limits
<
float
>
:
:
quiet_NaN
(
)
;
}
uint32_t
length
=
aValue
.
Length
(
)
;
nsAutoCString
langTag
;
aLangTags
.
GetNext
(
langTag
)
;
while
(
!
langTag
.
IsEmpty
(
)
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
UniqueUNumberFormat
format
(
unum_open
(
UNUM_DECIMAL
nullptr
0
langTag
.
get
(
)
nullptr
&
status
)
)
;
if
(
!
StaticPrefs
:
:
dom_forms_number_grouping
(
)
)
{
unum_setAttribute
(
format
.
get
(
)
UNUM_GROUPING_USED
UBool
(
0
)
)
;
}
int32_t
parsePos
=
0
;
static_assert
(
sizeof
(
UChar
)
=
=
2
&
&
sizeof
(
nsAString
:
:
char_type
)
=
=
2
"
Unexpected
character
size
-
the
following
cast
is
unsafe
"
)
;
double
val
=
unum_parseDouble
(
format
.
get
(
)
(
const
UChar
*
)
PromiseFlatString
(
aValue
)
.
get
(
)
length
&
parsePos
&
status
)
;
if
(
U_SUCCESS
(
status
)
&
&
parsePos
=
=
(
int32_t
)
length
)
{
return
val
;
}
aLangTags
.
GetNext
(
langTag
)
;
}
return
std
:
:
numeric_limits
<
float
>
:
:
quiet_NaN
(
)
;
}
void
ICUUtils
:
:
AssignUCharArrayToString
(
UChar
*
aICUString
int32_t
aLength
nsAString
&
aMozString
)
{
static_assert
(
sizeof
(
UChar
)
=
=
2
&
&
sizeof
(
nsAString
:
:
char_type
)
=
=
2
"
Unexpected
character
size
-
the
following
cast
is
unsafe
"
)
;
aMozString
.
Assign
(
(
const
nsAString
:
:
char_type
*
)
aICUString
aLength
)
;
NS_ASSERTION
(
(
int32_t
)
aMozString
.
Length
(
)
=
=
aLength
"
Conversion
failed
"
)
;
}
nsresult
ICUUtils
:
:
ICUErrorToNsResult
(
const
intl
:
:
ICUError
aError
)
{
switch
(
aError
)
{
case
intl
:
:
ICUError
:
:
OutOfMemory
:
return
NS_ERROR_OUT_OF_MEMORY
;
default
:
return
NS_ERROR_FAILURE
;
}
}
#
endif
