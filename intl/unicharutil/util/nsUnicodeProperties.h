#
ifndef
NS_UNICODEPROPERTIES_H
#
define
NS_UNICODEPROPERTIES_H
#
include
"
mozilla
/
intl
/
UnicodeProperties
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
nsBidiUtils
.
h
"
#
include
"
nsUGenCategory
.
h
"
#
include
"
harfbuzz
/
hb
.
h
"
struct
nsCharProps2
{
unsigned
char
mVertOrient
:
2
;
unsigned
char
mIdType
:
2
;
}
;
const
nsCharProps2
&
GetCharProps2
(
uint32_t
aCh
)
;
namespace
mozilla
{
namespace
unicode
{
extern
const
nsUGenCategory
sDetailedToGeneralCategory
[
]
;
enum
VerticalOrientation
{
VERTICAL_ORIENTATION_R
=
0
VERTICAL_ORIENTATION_Tr
=
1
VERTICAL_ORIENTATION_Tu
=
2
VERTICAL_ORIENTATION_U
=
3
}
;
enum
PairedBracketType
{
PAIRED_BRACKET_TYPE_NONE
=
0
PAIRED_BRACKET_TYPE_OPEN
=
1
PAIRED_BRACKET_TYPE_CLOSE
=
2
}
;
enum
IdentifierType
{
IDTYPE_RESTRICTED
=
0
IDTYPE_ALLOWED
=
1
}
;
enum
EmojiPresentation
{
TextOnly
=
0
TextDefault
=
1
EmojiDefault
=
2
}
;
const
uint32_t
kVariationSelector15
=
0xFE0E
;
const
uint32_t
kVariationSelector16
=
0xFE0F
;
const
uint32_t
kEmojiSkinToneFirst
=
0x1f3fb
;
const
uint32_t
kEmojiSkinToneLast
=
0x1f3ff
;
extern
const
hb_unicode_general_category_t
sICUtoHBcategory
[
]
;
inline
uint8_t
GetGeneralCategory
(
uint32_t
aCh
)
{
return
sICUtoHBcategory
[
unsigned
(
intl
:
:
UnicodeProperties
:
:
CharType
(
aCh
)
)
]
;
}
inline
int8_t
GetNumericValue
(
uint32_t
aCh
)
{
return
intl
:
:
UnicodeProperties
:
:
GetNumericValue
(
aCh
)
;
}
inline
uint8_t
GetLineBreakClass
(
uint32_t
aCh
)
{
return
intl
:
:
UnicodeProperties
:
:
GetIntPropertyValue
(
aCh
intl
:
:
UnicodeProperties
:
:
IntProperty
:
:
LineBreak
)
;
}
inline
uint32_t
GetScriptTagForCode
(
intl
:
:
Script
aScriptCode
)
{
const
char
*
tag
=
intl
:
:
UnicodeProperties
:
:
GetScriptShortName
(
aScriptCode
)
;
if
(
tag
)
{
return
HB_TAG
(
tag
[
0
]
tag
[
1
]
tag
[
2
]
tag
[
3
]
)
;
}
return
HB_SCRIPT_UNKNOWN
;
}
inline
PairedBracketType
GetPairedBracketType
(
uint32_t
aCh
)
{
return
PairedBracketType
(
intl
:
:
UnicodeProperties
:
:
GetIntPropertyValue
(
aCh
intl
:
:
UnicodeProperties
:
:
IntProperty
:
:
BidiPairedBracketType
)
)
;
}
inline
uint32_t
GetTitlecaseForLower
(
uint32_t
aCh
)
{
return
intl
:
:
UnicodeProperties
:
:
IsLowercase
(
aCh
)
?
intl
:
:
UnicodeProperties
:
:
ToTitle
(
aCh
)
:
aCh
;
}
inline
uint32_t
GetTitlecaseForAll
(
uint32_t
aCh
)
{
return
intl
:
:
UnicodeProperties
:
:
ToTitle
(
aCh
)
;
}
inline
uint32_t
GetFoldedcase
(
uint32_t
aCh
)
{
if
(
aCh
=
=
0x0130
|
|
aCh
=
=
0x0131
)
{
return
'
i
'
;
}
return
intl
:
:
UnicodeProperties
:
:
FoldCase
(
aCh
)
;
}
inline
bool
IsDefaultIgnorable
(
uint32_t
aCh
)
{
return
intl
:
:
UnicodeProperties
:
:
HasBinaryProperty
(
aCh
intl
:
:
UnicodeProperties
:
:
BinaryProperty
:
:
DefaultIgnorableCodePoint
)
;
}
inline
EmojiPresentation
GetEmojiPresentation
(
uint32_t
aCh
)
{
if
(
!
intl
:
:
UnicodeProperties
:
:
HasBinaryProperty
(
aCh
intl
:
:
UnicodeProperties
:
:
BinaryProperty
:
:
Emoji
)
)
{
return
TextOnly
;
}
if
(
intl
:
:
UnicodeProperties
:
:
HasBinaryProperty
(
aCh
intl
:
:
UnicodeProperties
:
:
BinaryProperty
:
:
EmojiPresentation
)
)
{
return
EmojiDefault
;
}
return
TextDefault
;
}
inline
nsUGenCategory
GetGenCategory
(
uint32_t
aCh
)
{
return
sDetailedToGeneralCategory
[
GetGeneralCategory
(
aCh
)
]
;
}
inline
VerticalOrientation
GetVerticalOrientation
(
uint32_t
aCh
)
{
return
VerticalOrientation
(
intl
:
:
UnicodeProperties
:
:
GetIntPropertyValue
(
aCh
intl
:
:
UnicodeProperties
:
:
IntProperty
:
:
VerticalOrientation
)
)
;
}
inline
IdentifierType
GetIdentifierType
(
uint32_t
aCh
)
{
return
IdentifierType
(
GetCharProps2
(
aCh
)
.
mIdType
)
;
}
uint32_t
GetFullWidth
(
uint32_t
aCh
)
;
uint32_t
GetFullWidthInverse
(
uint32_t
aCh
)
;
bool
IsClusterExtender
(
uint32_t
aCh
uint8_t
aCategory
)
;
inline
bool
IsClusterExtender
(
uint32_t
aCh
)
{
return
aCh
>
=
0x0300
&
&
IsClusterExtender
(
aCh
GetGeneralCategory
(
aCh
)
)
;
}
bool
IsClusterExtenderExcludingJoiners
(
uint32_t
aCh
uint8_t
aCategory
)
;
inline
bool
IsClusterExtenderExcludingJoiners
(
uint32_t
aCh
)
{
return
aCh
>
=
0x0300
&
&
IsClusterExtenderExcludingJoiners
(
aCh
GetGeneralCategory
(
aCh
)
)
;
}
uint32_t
CountGraphemeClusters
(
Span
<
const
char16_t
>
aText
)
;
bool
IsCombiningDiacritic
(
uint32_t
aCh
)
;
uint32_t
GetNaked
(
uint32_t
aCh
)
;
}
}
#
endif
