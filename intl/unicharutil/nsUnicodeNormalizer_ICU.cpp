#
include
"
nsUnicodeNormalizer
.
h
"
#
include
"
ICUUtils
.
h
"
#
include
"
unicode
/
unorm2
.
h
"
#
include
"
unicode
/
utext
.
h
"
NS_IMPL_ISUPPORTS
(
nsUnicodeNormalizer
nsIUnicodeNormalizer
)
nsUnicodeNormalizer
:
:
nsUnicodeNormalizer
(
)
{
}
nsUnicodeNormalizer
:
:
~
nsUnicodeNormalizer
(
)
{
}
static
nsresult
DoNormalization
(
const
UNormalizer2
*
aNorm
const
nsAString
&
aSrc
nsAString
&
aDest
)
{
UErrorCode
errorCode
=
U_ZERO_ERROR
;
const
int32_t
length
=
aSrc
.
Length
(
)
;
const
UChar
*
src
=
reinterpret_cast
<
const
UChar
*
>
(
aSrc
.
BeginReading
(
)
)
;
int32_t
capacity
=
length
+
(
length
>
>
8
)
+
8
;
do
{
aDest
.
SetLength
(
capacity
)
;
UChar
*
dest
=
reinterpret_cast
<
UChar
*
>
(
aDest
.
BeginWriting
(
)
)
;
int32_t
len
=
unorm2_normalize
(
aNorm
src
aSrc
.
Length
(
)
dest
capacity
&
errorCode
)
;
if
(
U_SUCCESS
(
errorCode
)
)
{
aDest
.
SetLength
(
len
)
;
break
;
}
if
(
errorCode
=
=
U_BUFFER_OVERFLOW_ERROR
)
{
capacity
=
len
;
errorCode
=
U_ZERO_ERROR
;
continue
;
}
}
while
(
false
)
;
return
ICUUtils
:
:
UErrorToNsResult
(
errorCode
)
;
}
nsresult
nsUnicodeNormalizer
:
:
NormalizeUnicodeNFD
(
const
nsAString
&
aSrc
nsAString
&
aDest
)
{
static
UErrorCode
errorCode
=
U_ZERO_ERROR
;
static
const
UNormalizer2
*
norm
=
unorm2_getNFDInstance
(
&
errorCode
)
;
if
(
U_SUCCESS
(
errorCode
)
)
{
return
DoNormalization
(
norm
aSrc
aDest
)
;
}
return
ICUUtils
:
:
UErrorToNsResult
(
errorCode
)
;
}
nsresult
nsUnicodeNormalizer
:
:
NormalizeUnicodeNFC
(
const
nsAString
&
aSrc
nsAString
&
aDest
)
{
static
UErrorCode
errorCode
=
U_ZERO_ERROR
;
static
const
UNormalizer2
*
norm
=
unorm2_getNFCInstance
(
&
errorCode
)
;
if
(
U_SUCCESS
(
errorCode
)
)
{
return
DoNormalization
(
norm
aSrc
aDest
)
;
}
return
ICUUtils
:
:
UErrorToNsResult
(
errorCode
)
;
}
nsresult
nsUnicodeNormalizer
:
:
NormalizeUnicodeNFKD
(
const
nsAString
&
aSrc
nsAString
&
aDest
)
{
static
UErrorCode
errorCode
=
U_ZERO_ERROR
;
static
const
UNormalizer2
*
norm
=
unorm2_getNFKDInstance
(
&
errorCode
)
;
if
(
U_SUCCESS
(
errorCode
)
)
{
return
DoNormalization
(
norm
aSrc
aDest
)
;
}
return
ICUUtils
:
:
UErrorToNsResult
(
errorCode
)
;
}
nsresult
nsUnicodeNormalizer
:
:
NormalizeUnicodeNFKC
(
const
nsAString
&
aSrc
nsAString
&
aDest
)
{
static
UErrorCode
errorCode
=
U_ZERO_ERROR
;
static
const
UNormalizer2
*
norm
=
unorm2_getNFKCInstance
(
&
errorCode
)
;
if
(
U_SUCCESS
(
errorCode
)
)
{
return
DoNormalization
(
norm
aSrc
aDest
)
;
}
return
ICUUtils
:
:
UErrorToNsResult
(
errorCode
)
;
}
