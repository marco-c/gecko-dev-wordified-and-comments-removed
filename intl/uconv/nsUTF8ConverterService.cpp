#
include
"
nsString
.
h
"
#
include
"
nsUTF8ConverterService
.
h
"
#
include
"
nsEscape
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
using
namespace
mozilla
;
NS_IMPL_ISUPPORTS
(
nsUTF8ConverterService
nsIUTF8ConverterService
)
static
nsresult
ToUTF8
(
const
nsACString
&
aString
const
char
*
aCharset
bool
aAllowSubstitution
nsACString
&
aResult
)
{
if
(
!
aCharset
|
|
!
*
aCharset
)
return
NS_ERROR_INVALID_ARG
;
auto
encoding
=
Encoding
:
:
ForLabelNoReplacement
(
MakeStringSpan
(
aCharset
)
)
;
if
(
!
encoding
)
{
return
NS_ERROR_UCONV_NOCONV
;
}
if
(
aAllowSubstitution
)
{
nsresult
rv
=
encoding
-
>
DecodeWithoutBOMHandling
(
aString
aResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
return
NS_OK
;
}
return
rv
;
}
return
encoding
-
>
DecodeWithoutBOMHandlingAndWithoutReplacement
(
aString
aResult
)
;
}
NS_IMETHODIMP
nsUTF8ConverterService
:
:
ConvertStringToUTF8
(
const
nsACString
&
aString
const
char
*
aCharset
bool
aSkipCheck
bool
aAllowSubstitution
uint8_t
aOptionalArgc
nsACString
&
aUTF8String
)
{
bool
allowSubstitution
=
(
aOptionalArgc
=
=
1
)
?
aAllowSubstitution
:
true
;
if
(
!
aSkipCheck
&
&
(
IsASCII
(
aString
)
|
|
IsUTF8
(
aString
)
)
)
{
aUTF8String
=
aString
;
return
NS_OK
;
}
aUTF8String
.
Truncate
(
)
;
nsresult
rv
=
ToUTF8
(
aString
aCharset
allowSubstitution
aUTF8String
)
;
if
(
aSkipCheck
&
&
NS_FAILED
(
rv
)
&
&
IsUTF8
(
aString
)
)
{
aUTF8String
=
aString
;
return
NS_OK
;
}
return
rv
;
}
NS_IMETHODIMP
nsUTF8ConverterService
:
:
ConvertURISpecToUTF8
(
const
nsACString
&
aSpec
const
char
*
aCharset
nsACString
&
aUTF8Spec
)
{
if
(
!
IsASCII
(
aSpec
)
)
{
aUTF8Spec
=
aSpec
;
return
NS_OK
;
}
aUTF8Spec
.
Truncate
(
)
;
nsAutoCString
unescapedSpec
;
bool
written
=
NS_UnescapeURL
(
PromiseFlatCString
(
aSpec
)
.
get
(
)
aSpec
.
Length
(
)
esc_OnlyNonASCII
unescapedSpec
)
;
if
(
!
written
)
{
aUTF8Spec
=
aSpec
;
return
NS_OK
;
}
if
(
IsASCII
(
unescapedSpec
)
|
|
IsUTF8
(
unescapedSpec
)
)
{
aUTF8Spec
=
unescapedSpec
;
return
NS_OK
;
}
return
ToUTF8
(
unescapedSpec
aCharset
true
aUTF8Spec
)
;
}
