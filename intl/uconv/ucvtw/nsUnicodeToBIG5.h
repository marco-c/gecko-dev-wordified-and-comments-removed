#
ifndef
nsUnicodeToBIG5_h_
#
define
nsUnicodeToBIG5_h_
#
include
"
nsIUnicodeEncoder
.
h
"
#
define
NS_UNICODETOBIG5_CID
\
{
0xefc323e2
0xec62
0x11d2
\
{
0x8a
0xac
0x0
0x60
0x8
0x11
0xa8
0x36
}
}
class
nsUnicodeToBIG5
:
public
nsIUnicodeEncoder
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
nsUnicodeToBIG5
(
)
;
NS_IMETHOD
Convert
(
const
char16_t
*
aSrc
int32_t
*
aSrcLength
char
*
aDest
int32_t
*
aDestLength
)
override
;
NS_IMETHOD
Finish
(
char
*
aDest
int32_t
*
aDestLength
)
override
;
MOZ_MUST_USE
NS_IMETHOD
GetMaxLength
(
const
char16_t
*
aSrc
int32_t
aSrcLength
int32_t
*
aDestLength
)
override
;
NS_IMETHOD
Reset
(
)
override
;
NS_IMETHOD
SetOutputErrorBehavior
(
int32_t
aBehavior
nsIUnicharEncoder
*
aEncoder
char16_t
aChar
)
override
;
private
:
virtual
~
nsUnicodeToBIG5
(
)
{
}
;
char16_t
mUtf16Lead
;
uint8_t
mPendingTrail
;
bool
mSignal
;
}
;
#
endif
