#
ifndef
__NORMS_H__
#
define
__NORMS_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_NORMALIZATION
#
include
"
unicode
/
errorcode
.
h
"
#
include
"
unicode
/
umutablecptrie
.
h
"
#
include
"
unicode
/
uniset
.
h
"
#
include
"
unicode
/
unistr
.
h
"
#
include
"
unicode
/
utf16
.
h
"
#
include
"
normalizer2impl
.
h
"
#
include
"
toolutil
.
h
"
#
include
"
uvectr32
.
h
"
U_NAMESPACE_BEGIN
class
BuilderReorderingBuffer
{
public
:
BuilderReorderingBuffer
(
)
:
fLength
(
0
)
fLastStarterIndex
(
-
1
)
fDidReorder
(
false
)
{
}
void
reset
(
)
{
fLength
=
0
;
fLastStarterIndex
=
-
1
;
fDidReorder
=
false
;
}
int32_t
length
(
)
const
{
return
fLength
;
}
UBool
isEmpty
(
)
const
{
return
fLength
=
=
0
;
}
int32_t
lastStarterIndex
(
)
const
{
return
fLastStarterIndex
;
}
UChar32
charAt
(
int32_t
i
)
const
{
return
fArray
[
i
]
>
>
8
;
}
uint8_t
ccAt
(
int32_t
i
)
const
{
return
(
uint8_t
)
fArray
[
i
]
;
}
UBool
didReorder
(
)
const
{
return
fDidReorder
;
}
void
append
(
UChar32
c
uint8_t
cc
)
;
void
toString
(
UnicodeString
&
dest
)
const
;
private
:
int32_t
fArray
[
Normalizer2Impl
:
:
MAPPING_LENGTH_MASK
]
;
int32_t
fLength
;
int32_t
fLastStarterIndex
;
UBool
fDidReorder
;
}
;
struct
CompositionPair
{
CompositionPair
(
UChar32
t
UChar32
c
)
:
trail
(
t
)
composite
(
c
)
{
}
UChar32
trail
composite
;
}
;
struct
Norm
{
enum
MappingType
{
NONE
REMOVED
ROUND_TRIP
ONE_WAY
}
;
UBool
hasMapping
(
)
const
{
return
mappingType
>
REMOVED
;
}
void
setMappingCP
(
)
{
UChar32
c
;
if
(
!
mapping
-
>
isEmpty
(
)
&
&
mapping
-
>
length
(
)
=
=
U16_LENGTH
(
c
=
mapping
-
>
char32At
(
0
)
)
)
{
mappingCP
=
c
;
}
else
{
mappingCP
=
U_SENTINEL
;
}
}
const
CompositionPair
*
getCompositionPairs
(
int32_t
&
length
)
const
{
if
(
compositions
=
=
nullptr
)
{
length
=
0
;
return
nullptr
;
}
else
{
length
=
compositions
-
>
size
(
)
/
2
;
return
reinterpret_cast
<
const
CompositionPair
*
>
(
compositions
-
>
getBuffer
(
)
)
;
}
}
UChar32
combine
(
UChar32
trail
)
const
;
UnicodeString
*
mapping
;
UnicodeString
*
rawMapping
;
UChar32
mappingCP
;
int32_t
mappingPhase
;
MappingType
mappingType
;
UVector32
*
compositions
;
uint8_t
cc
leadCC
trailCC
;
UBool
combinesBack
;
UBool
hasCompBoundaryBefore
hasCompBoundaryAfter
;
enum
Type
{
UNKNOWN
INERT
YES_YES_COMBINES_FWD
YES_NO_COMBINES_FWD
YES_NO_MAPPING_ONLY
NO_NO_COMP_YES
NO_NO_COMP_BOUNDARY_BEFORE
NO_NO_COMP_NO_MAYBE_CC
NO_NO_EMPTY
NO_NO_DELTA
MAYBE_YES_COMBINES_FWD
MAYBE_YES_SIMPLE
YES_YES_WITH_CC
}
type
;
int32_t
offset
;
const
char
*
error
;
}
;
class
Norms
{
public
:
Norms
(
UErrorCode
&
errorCode
)
;
~
Norms
(
)
;
int32_t
length
(
)
const
{
return
utm_countItems
(
normMem
)
;
}
const
Norm
&
getNormRefByIndex
(
int32_t
i
)
const
{
return
norms
[
i
]
;
}
Norm
&
getNormRefByIndex
(
int32_t
i
)
{
return
norms
[
i
]
;
}
Norm
*
allocNorm
(
)
;
Norm
*
getNorm
(
UChar32
c
)
;
const
Norm
*
getNorm
(
UChar32
c
)
const
;
Norm
*
createNorm
(
UChar32
c
)
;
const
Norm
&
getNormRef
(
UChar32
c
)
const
;
uint8_t
getCC
(
UChar32
c
)
const
{
return
getNormRef
(
c
)
.
cc
;
}
UBool
combinesBack
(
UChar32
c
)
const
{
return
Hangul
:
:
isJamoV
(
c
)
|
|
Hangul
:
:
isJamoT
(
c
)
|
|
getNormRef
(
c
)
.
combinesBack
;
}
void
reorder
(
UnicodeString
&
mapping
BuilderReorderingBuffer
&
buffer
)
const
;
UBool
combinesWithCCBetween
(
const
Norm
&
norm
uint8_t
lowCC
int32_t
highCC
)
const
;
class
Enumerator
{
public
:
Enumerator
(
Norms
&
n
)
:
norms
(
n
)
{
}
virtual
~
Enumerator
(
)
;
virtual
void
rangeHandler
(
UChar32
start
UChar32
end
Norm
&
norm
)
=
0
;
protected
:
Norms
&
norms
;
}
;
void
enumRanges
(
Enumerator
&
e
)
;
UnicodeSet
ccSet
mappingSet
;
private
:
Norms
(
const
Norms
&
other
)
=
delete
;
Norms
&
operator
=
(
const
Norms
&
other
)
=
delete
;
UMutableCPTrie
*
normTrie
;
UToolMemory
*
normMem
;
Norm
*
norms
;
}
;
class
CompositionBuilder
:
public
Norms
:
:
Enumerator
{
public
:
CompositionBuilder
(
Norms
&
n
)
:
Norms
:
:
Enumerator
(
n
)
{
}
void
rangeHandler
(
UChar32
start
UChar32
end
Norm
&
norm
)
override
;
}
;
class
Decomposer
:
public
Norms
:
:
Enumerator
{
public
:
Decomposer
(
Norms
&
n
)
:
Norms
:
:
Enumerator
(
n
)
didDecompose
(
false
)
{
}
void
rangeHandler
(
UChar32
start
UChar32
end
Norm
&
norm
)
override
;
UBool
didDecompose
;
}
;
U_NAMESPACE_END
#
endif
#
endif
