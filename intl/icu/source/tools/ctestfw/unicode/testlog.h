#
ifndef
U_TESTFW_TESTLOG
#
define
U_TESTFW_TESTLOG
#
include
<
string
>
#
include
<
string_view
>
#
include
"
unicode
/
utypes
.
h
"
#
include
"
unicode
/
testtype
.
h
"
class
T_CTEST_EXPORT_API
TestLog
{
public
:
virtual
~
TestLog
(
)
;
virtual
void
errln
(
std
:
:
u16string_view
message
)
=
0
;
virtual
void
logln
(
std
:
:
u16string_view
message
)
=
0
;
virtual
void
dataerrln
(
std
:
:
u16string_view
message
)
=
0
;
virtual
const
char
*
getTestDataPath
(
UErrorCode
&
err
)
=
0
;
}
;
class
T_CTEST_EXPORT_API
IcuTestErrorCode
{
public
:
IcuTestErrorCode
(
const
IcuTestErrorCode
&
)
=
delete
;
IcuTestErrorCode
&
operator
=
(
const
IcuTestErrorCode
&
)
=
delete
;
IcuTestErrorCode
(
TestLog
&
callingTestClass
const
char
*
callingTestName
)
;
virtual
~
IcuTestErrorCode
(
)
;
operator
UErrorCode
&
(
)
{
return
errorCode
;
}
operator
UErrorCode
*
(
)
{
return
&
errorCode
;
}
UBool
isSuccess
(
)
const
{
return
U_SUCCESS
(
errorCode
)
;
}
UBool
isFailure
(
)
const
{
return
U_FAILURE
(
errorCode
)
;
}
UErrorCode
get
(
)
const
{
return
errorCode
;
}
void
set
(
UErrorCode
value
)
{
errorCode
=
value
;
}
UErrorCode
reset
(
)
;
void
assertSuccess
(
)
const
;
const
char
*
errorName
(
)
const
;
UBool
errIfFailureAndReset
(
)
;
UBool
errIfFailureAndReset
(
const
char
*
fmt
.
.
.
)
;
UBool
errDataIfFailureAndReset
(
)
;
UBool
errDataIfFailureAndReset
(
const
char
*
fmt
.
.
.
)
;
UBool
expectErrorAndReset
(
UErrorCode
expectedError
)
;
UBool
expectErrorAndReset
(
UErrorCode
expectedError
const
char
*
fmt
.
.
.
)
;
void
setScope
(
const
char
*
message
)
;
void
setScope
(
std
:
:
u16string_view
message
)
;
protected
:
virtual
void
handleFailure
(
)
const
;
private
:
UErrorCode
errorCode
;
TestLog
&
testClass
;
const
char
*
const
testName
;
std
:
:
u16string
scopeMessage
;
void
errlog
(
UBool
dataErr
std
:
:
u16string_view
mainMessage
const
char
*
extraMessage
)
const
;
}
;
#
endif
