#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
define
UNISTR_FROM_STRING_EXPLICIT
#
include
"
numparse_types
.
h
"
#
include
"
numparse_compositions
.
h
"
#
include
"
string_segment
.
h
"
#
include
"
unicode
/
uniset
.
h
"
using
namespace
icu
;
using
namespace
icu
:
:
numparse
;
using
namespace
icu
:
:
numparse
:
:
impl
;
bool
SeriesMatcher
:
:
match
(
StringSegment
&
segment
ParsedNumber
&
result
UErrorCode
&
status
)
const
{
ParsedNumber
backup
(
result
)
;
int32_t
initialOffset
=
segment
.
getOffset
(
)
;
bool
maybeMore
=
true
;
for
(
const
auto
*
it
=
begin
(
)
;
it
<
end
(
)
;
)
{
const
NumberParseMatcher
*
matcher
=
*
it
;
int
matcherOffset
=
segment
.
getOffset
(
)
;
if
(
segment
.
length
(
)
!
=
0
)
{
maybeMore
=
matcher
-
>
match
(
segment
result
status
)
;
}
else
{
maybeMore
=
true
;
}
bool
success
=
(
segment
.
getOffset
(
)
!
=
matcherOffset
)
;
bool
isFlexible
=
matcher
-
>
isFlexible
(
)
;
if
(
success
&
&
isFlexible
)
{
}
else
if
(
success
)
{
it
+
+
;
if
(
it
<
end
(
)
&
&
segment
.
getOffset
(
)
!
=
result
.
charEnd
&
&
result
.
charEnd
>
matcherOffset
)
{
segment
.
setOffset
(
result
.
charEnd
)
;
}
}
else
if
(
isFlexible
)
{
it
+
+
;
}
else
{
segment
.
setOffset
(
initialOffset
)
;
result
=
backup
;
return
maybeMore
;
}
}
return
maybeMore
;
}
bool
SeriesMatcher
:
:
smokeTest
(
const
StringSegment
&
segment
)
const
{
for
(
const
auto
&
matcher
:
*
this
)
{
U_ASSERT
(
!
matcher
-
>
isFlexible
(
)
)
;
return
matcher
-
>
smokeTest
(
segment
)
;
}
return
false
;
}
void
SeriesMatcher
:
:
postProcess
(
ParsedNumber
&
result
)
const
{
for
(
const
auto
*
matcher
:
*
this
)
{
matcher
-
>
postProcess
(
result
)
;
}
}
ArraySeriesMatcher
:
:
ArraySeriesMatcher
(
)
:
fMatchersLen
(
0
)
{
}
ArraySeriesMatcher
:
:
ArraySeriesMatcher
(
MatcherArray
&
matchers
int32_t
matchersLen
)
:
fMatchers
(
std
:
:
move
(
matchers
)
)
fMatchersLen
(
matchersLen
)
{
}
int32_t
ArraySeriesMatcher
:
:
length
(
)
const
{
return
fMatchersLen
;
}
const
NumberParseMatcher
*
const
*
ArraySeriesMatcher
:
:
begin
(
)
const
{
return
fMatchers
.
getAlias
(
)
;
}
const
NumberParseMatcher
*
const
*
ArraySeriesMatcher
:
:
end
(
)
const
{
return
fMatchers
.
getAlias
(
)
+
fMatchersLen
;
}
UnicodeString
ArraySeriesMatcher
:
:
toString
(
)
const
{
return
u
"
<
ArraySeries
>
"
;
}
#
endif
