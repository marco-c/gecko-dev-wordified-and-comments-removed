#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
ifndef
__NUMBER_USAGEPREFS_H__
#
define
__NUMBER_USAGEPREFS_H__
#
include
"
cmemory
.
h
"
#
include
"
number_types
.
h
"
#
include
"
unicode
/
listformatter
.
h
"
#
include
"
unicode
/
localpointer
.
h
"
#
include
"
unicode
/
locid
.
h
"
#
include
"
unicode
/
measunit
.
h
"
#
include
"
unicode
/
stringpiece
.
h
"
#
include
"
unicode
/
uobject
.
h
"
#
include
"
units_converter
.
h
"
#
include
"
units_router
.
h
"
U_NAMESPACE_BEGIN
using
:
:
icu
:
:
units
:
:
ComplexUnitsConverter
;
using
:
:
icu
:
:
units
:
:
UnitsRouter
;
namespace
number
{
namespace
impl
{
class
U_I18N_API
UsagePrefsHandler
:
public
MicroPropsGenerator
public
UMemory
{
public
:
UsagePrefsHandler
(
const
Locale
&
locale
const
MeasureUnit
&
inputUnit
const
StringPiece
usage
const
MicroPropsGenerator
*
parent
UErrorCode
&
status
)
;
void
processQuantity
(
DecimalQuantity
&
quantity
MicroProps
&
micros
UErrorCode
&
status
)
const
U_OVERRIDE
;
const
MaybeStackVector
<
MeasureUnit
>
*
getOutputUnits
(
)
const
{
return
fUnitsRouter
.
getOutputUnits
(
)
;
}
private
:
UnitsRouter
fUnitsRouter
;
const
MicroPropsGenerator
*
fParent
;
}
;
}
}
#
if
U_PF_WINDOWS
<
=
U_PLATFORM
&
&
U_PLATFORM
<
=
U_PF_CYGWIN
#
if
defined
(
_MSC_VER
)
#
pragma
warning
(
push
)
#
pragma
warning
(
disable
:
4661
)
#
endif
template
class
U_I18N_API
LocalPointerBase
<
ComplexUnitsConverter
>
;
template
class
U_I18N_API
LocalPointer
<
ComplexUnitsConverter
>
;
#
if
defined
(
_MSC_VER
)
#
pragma
warning
(
pop
)
#
endif
#
endif
namespace
number
{
namespace
impl
{
class
U_I18N_API
UnitConversionHandler
:
public
MicroPropsGenerator
public
UMemory
{
public
:
UnitConversionHandler
(
const
MeasureUnit
&
inputUnit
const
MeasureUnit
&
outputUnit
const
MicroPropsGenerator
*
parent
UErrorCode
&
status
)
;
void
processQuantity
(
DecimalQuantity
&
quantity
MicroProps
&
micros
UErrorCode
&
status
)
const
U_OVERRIDE
;
private
:
MeasureUnit
fOutputUnit
;
LocalPointer
<
ComplexUnitsConverter
>
fUnitConverter
;
const
MicroPropsGenerator
*
fParent
;
}
;
}
}
U_NAMESPACE_END
#
endif
#
endif
