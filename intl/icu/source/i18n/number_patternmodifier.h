#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
&
&
!
UPRV_INCOMPLETE_CPP11_SUPPORT
#
ifndef
__NUMBER_PATTERNMODIFIER_H__
#
define
__NUMBER_PATTERNMODIFIER_H__
#
include
"
standardplural
.
h
"
#
include
"
unicode
/
numberformatter
.
h
"
#
include
"
number_patternstring
.
h
"
#
include
"
number_types
.
h
"
#
include
"
number_modifiers
.
h
"
#
include
"
number_utils
.
h
"
U_NAMESPACE_BEGIN
#
if
defined
(
_MSC_VER
)
#
pragma
warning
(
suppress
:
4661
)
template
class
U_I18N_API
LocalPointerBase
<
number
:
:
impl
:
:
ParameterizedModifier
>
;
template
class
U_I18N_API
LocalPointer
<
number
:
:
impl
:
:
ParameterizedModifier
>
;
#
endif
namespace
number
{
namespace
impl
{
class
MutablePatternModifier
;
class
U_I18N_API
ImmutablePatternModifier
:
public
MicroPropsGenerator
public
UMemory
{
public
:
~
ImmutablePatternModifier
(
)
U_OVERRIDE
=
default
;
void
processQuantity
(
DecimalQuantity
&
MicroProps
&
micros
UErrorCode
&
status
)
const
U_OVERRIDE
;
void
applyToMicros
(
MicroProps
&
micros
DecimalQuantity
&
quantity
)
const
;
private
:
ImmutablePatternModifier
(
ParameterizedModifier
*
pm
const
PluralRules
*
rules
const
MicroPropsGenerator
*
parent
)
;
const
LocalPointer
<
ParameterizedModifier
>
pm
;
const
PluralRules
*
rules
;
const
MicroPropsGenerator
*
parent
;
friend
class
MutablePatternModifier
;
}
;
class
U_I18N_API
MutablePatternModifier
:
public
MicroPropsGenerator
public
Modifier
public
SymbolProvider
public
CharSequence
public
UMemory
{
public
:
~
MutablePatternModifier
(
)
U_OVERRIDE
=
default
;
explicit
MutablePatternModifier
(
bool
isStrong
)
;
void
setPatternInfo
(
const
AffixPatternProvider
*
patternInfo
)
;
void
setPatternAttributes
(
UNumberSignDisplay
signDisplay
bool
perMille
)
;
void
setSymbols
(
const
DecimalFormatSymbols
*
symbols
const
CurrencyUnit
&
currency
UNumberUnitWidth
unitWidth
const
PluralRules
*
rules
)
;
void
setNumberProperties
(
bool
isNegative
StandardPlural
:
:
Form
plural
)
;
bool
needsPlurals
(
)
const
;
ImmutablePatternModifier
*
createImmutable
(
UErrorCode
&
status
)
;
ImmutablePatternModifier
*
createImmutableAndChain
(
const
MicroPropsGenerator
*
parent
UErrorCode
&
status
)
;
MicroPropsGenerator
&
addToChain
(
const
MicroPropsGenerator
*
parent
)
;
void
processQuantity
(
DecimalQuantity
&
MicroProps
&
micros
UErrorCode
&
status
)
const
U_OVERRIDE
;
int32_t
apply
(
NumberStringBuilder
&
output
int32_t
leftIndex
int32_t
rightIndex
UErrorCode
&
status
)
const
U_OVERRIDE
;
int32_t
getPrefixLength
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
int32_t
getCodePointCount
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
bool
isStrong
(
)
const
U_OVERRIDE
;
UnicodeString
getSymbol
(
AffixPatternType
type
)
const
U_OVERRIDE
;
int32_t
length
(
)
const
U_OVERRIDE
;
char16_t
charAt
(
int32_t
index
)
const
U_OVERRIDE
;
UnicodeString
toUnicodeString
(
)
const
U_OVERRIDE
;
private
:
const
bool
fStrong
;
const
AffixPatternProvider
*
patternInfo
;
UNumberSignDisplay
signDisplay
;
bool
perMilleReplacesPercent
;
const
DecimalFormatSymbols
*
symbols
;
UNumberUnitWidth
unitWidth
;
char16_t
currencyCode
[
4
]
;
const
PluralRules
*
rules
;
bool
isNegative
;
StandardPlural
:
:
Form
plural
;
const
MicroPropsGenerator
*
parent
;
bool
inCharSequenceMode
=
false
;
int32_t
fFlags
;
int32_t
fLength
;
bool
prependSign
;
bool
plusReplacesMinusSign
;
ConstantMultiFieldModifier
*
createConstantModifier
(
UErrorCode
&
status
)
;
int32_t
insertPrefix
(
NumberStringBuilder
&
sb
int
position
UErrorCode
&
status
)
;
int32_t
insertSuffix
(
NumberStringBuilder
&
sb
int
position
UErrorCode
&
status
)
;
void
enterCharSequenceMode
(
bool
isPrefix
)
;
void
exitCharSequenceMode
(
)
;
}
;
}
}
U_NAMESPACE_END
#
endif
#
endif
