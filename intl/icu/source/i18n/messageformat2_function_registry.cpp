#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
if
!
UCONFIG_NO_MF2
#
include
<
math
.
h
>
#
include
"
unicode
/
dtptngen
.
h
"
#
include
"
unicode
/
messageformat2_data_model_names
.
h
"
#
include
"
unicode
/
messageformat2_function_registry
.
h
"
#
include
"
unicode
/
smpdtfmt
.
h
"
#
include
"
charstr
.
h
"
#
include
"
double
-
conversion
.
h
"
#
include
"
messageformat2_allocation
.
h
"
#
include
"
messageformat2_function_registry_internal
.
h
"
#
include
"
messageformat2_macros
.
h
"
#
include
"
hash
.
h
"
#
include
"
number_types
.
h
"
#
include
"
uvector
.
h
"
#
ifndef
__STDC_FORMAT_MACROS
#
define
__STDC_FORMAT_MACROS
#
endif
#
include
<
inttypes
.
h
>
#
include
<
math
.
h
>
U_NAMESPACE_BEGIN
namespace
message2
{
Formatter
:
:
~
Formatter
(
)
{
}
Selector
:
:
~
Selector
(
)
{
}
FormatterFactory
:
:
~
FormatterFactory
(
)
{
}
SelectorFactory
:
:
~
SelectorFactory
(
)
{
}
MFFunctionRegistry
MFFunctionRegistry
:
:
Builder
:
:
build
(
)
{
U_ASSERT
(
formatters
!
=
nullptr
&
&
selectors
!
=
nullptr
&
&
formattersByType
!
=
nullptr
)
;
MFFunctionRegistry
result
=
MFFunctionRegistry
(
formatters
selectors
formattersByType
)
;
formatters
=
nullptr
;
selectors
=
nullptr
;
formattersByType
=
nullptr
;
return
result
;
}
MFFunctionRegistry
:
:
Builder
&
MFFunctionRegistry
:
:
Builder
:
:
adoptSelector
(
const
FunctionName
&
selectorName
SelectorFactory
*
selectorFactory
UErrorCode
&
errorCode
)
{
if
(
U_SUCCESS
(
errorCode
)
)
{
U_ASSERT
(
selectors
!
=
nullptr
)
;
selectors
-
>
put
(
selectorName
selectorFactory
errorCode
)
;
}
return
*
this
;
}
MFFunctionRegistry
:
:
Builder
&
MFFunctionRegistry
:
:
Builder
:
:
adoptFormatter
(
const
FunctionName
&
formatterName
FormatterFactory
*
formatterFactory
UErrorCode
&
errorCode
)
{
if
(
U_SUCCESS
(
errorCode
)
)
{
U_ASSERT
(
formatters
!
=
nullptr
)
;
formatters
-
>
put
(
formatterName
formatterFactory
errorCode
)
;
}
return
*
this
;
}
MFFunctionRegistry
:
:
Builder
&
MFFunctionRegistry
:
:
Builder
:
:
setDefaultFormatterNameByType
(
const
UnicodeString
&
type
const
FunctionName
&
functionName
UErrorCode
&
errorCode
)
{
if
(
U_SUCCESS
(
errorCode
)
)
{
U_ASSERT
(
formattersByType
!
=
nullptr
)
;
FunctionName
*
f
=
create
<
FunctionName
>
(
FunctionName
(
functionName
)
errorCode
)
;
formattersByType
-
>
put
(
type
f
errorCode
)
;
}
return
*
this
;
}
MFFunctionRegistry
:
:
Builder
:
:
Builder
(
UErrorCode
&
errorCode
)
{
CHECK_ERROR
(
errorCode
)
;
formatters
=
new
Hashtable
(
)
;
selectors
=
new
Hashtable
(
)
;
formattersByType
=
new
Hashtable
(
)
;
if
(
!
(
formatters
!
=
nullptr
&
&
selectors
!
=
nullptr
&
&
formattersByType
!
=
nullptr
)
)
{
errorCode
=
U_MEMORY_ALLOCATION_ERROR
;
}
formatters
-
>
setValueDeleter
(
uprv_deleteUObject
)
;
selectors
-
>
setValueDeleter
(
uprv_deleteUObject
)
;
formattersByType
-
>
setValueDeleter
(
uprv_deleteUObject
)
;
}
MFFunctionRegistry
:
:
Builder
:
:
~
Builder
(
)
{
if
(
formatters
!
=
nullptr
)
{
delete
formatters
;
}
if
(
selectors
!
=
nullptr
)
{
delete
selectors
;
}
if
(
formattersByType
!
=
nullptr
)
{
delete
formattersByType
;
}
}
FormatterFactory
*
MFFunctionRegistry
:
:
getFormatter
(
const
FunctionName
&
formatterName
)
const
{
U_ASSERT
(
formatters
!
=
nullptr
)
;
return
static_cast
<
FormatterFactory
*
>
(
formatters
-
>
get
(
formatterName
)
)
;
}
UBool
MFFunctionRegistry
:
:
getDefaultFormatterNameByType
(
const
UnicodeString
&
type
FunctionName
&
name
)
const
{
U_ASSERT
(
formatters
!
=
nullptr
)
;
const
FunctionName
*
f
=
static_cast
<
FunctionName
*
>
(
formattersByType
-
>
get
(
type
)
)
;
if
(
f
!
=
nullptr
)
{
name
=
*
f
;
return
true
;
}
return
false
;
}
const
SelectorFactory
*
MFFunctionRegistry
:
:
getSelector
(
const
FunctionName
&
selectorName
)
const
{
U_ASSERT
(
selectors
!
=
nullptr
)
;
return
static_cast
<
const
SelectorFactory
*
>
(
selectors
-
>
get
(
selectorName
)
)
;
}
bool
MFFunctionRegistry
:
:
hasFormatter
(
const
FunctionName
&
f
)
const
{
return
getFormatter
(
f
)
!
=
nullptr
;
}
bool
MFFunctionRegistry
:
:
hasSelector
(
const
FunctionName
&
s
)
const
{
return
getSelector
(
s
)
!
=
nullptr
;
}
void
MFFunctionRegistry
:
:
checkFormatter
(
const
char
*
s
)
const
{
#
if
U_DEBUG
U_ASSERT
(
hasFormatter
(
FunctionName
(
UnicodeString
(
s
)
)
)
)
;
#
else
(
void
)
s
;
#
endif
}
void
MFFunctionRegistry
:
:
checkSelector
(
const
char
*
s
)
const
{
#
if
U_DEBUG
U_ASSERT
(
hasSelector
(
FunctionName
(
UnicodeString
(
s
)
)
)
)
;
#
else
(
void
)
s
;
#
endif
}
void
MFFunctionRegistry
:
:
checkStandard
(
)
const
{
checkFormatter
(
"
datetime
"
)
;
checkFormatter
(
"
date
"
)
;
checkFormatter
(
"
time
"
)
;
checkFormatter
(
"
number
"
)
;
checkFormatter
(
"
integer
"
)
;
checkSelector
(
"
number
"
)
;
checkSelector
(
"
integer
"
)
;
checkSelector
(
"
string
"
)
;
}
static
void
strToDouble
(
const
UnicodeString
&
s
double
&
result
UErrorCode
&
errorCode
)
{
CHECK_ERROR
(
errorCode
)
;
LocalPointer
<
NumberFormat
>
numberFormat
(
NumberFormat
:
:
createInstance
(
Locale
(
"
en
-
US
"
)
errorCode
)
)
;
CHECK_ERROR
(
errorCode
)
;
icu
:
:
Formattable
asNumber
;
numberFormat
-
>
parse
(
s
asNumber
errorCode
)
;
CHECK_ERROR
(
errorCode
)
;
result
=
asNumber
.
getDouble
(
errorCode
)
;
}
static
double
tryStringAsNumber
(
const
Locale
&
locale
const
Formattable
&
val
UErrorCode
&
errorCode
)
{
UnicodeString
tempString
=
val
.
getString
(
errorCode
)
;
LocalPointer
<
NumberFormat
>
numberFormat
(
NumberFormat
:
:
createInstance
(
locale
errorCode
)
)
;
if
(
U_SUCCESS
(
errorCode
)
)
{
icu
:
:
Formattable
asNumber
;
numberFormat
-
>
parse
(
tempString
asNumber
errorCode
)
;
if
(
U_SUCCESS
(
errorCode
)
)
{
return
asNumber
.
getDouble
(
errorCode
)
;
}
}
return
0
;
}
static
int64_t
getInt64Value
(
const
Locale
&
locale
const
Formattable
&
value
UErrorCode
&
errorCode
)
{
if
(
U_SUCCESS
(
errorCode
)
)
{
if
(
!
value
.
isNumeric
(
)
)
{
double
doubleResult
=
tryStringAsNumber
(
locale
value
errorCode
)
;
if
(
U_SUCCESS
(
errorCode
)
)
{
return
static_cast
<
int64_t
>
(
doubleResult
)
;
}
}
else
{
int64_t
result
=
value
.
getInt64
(
errorCode
)
;
if
(
U_SUCCESS
(
errorCode
)
)
{
return
result
;
}
}
}
return
0
;
}
MFFunctionRegistry
:
:
MFFunctionRegistry
(
FormatterMap
*
f
SelectorMap
*
s
Hashtable
*
byType
)
:
formatters
(
f
)
selectors
(
s
)
formattersByType
(
byType
)
{
U_ASSERT
(
f
!
=
nullptr
&
&
s
!
=
nullptr
&
&
byType
!
=
nullptr
)
;
}
MFFunctionRegistry
&
MFFunctionRegistry
:
:
operator
=
(
MFFunctionRegistry
&
&
other
)
noexcept
{
cleanup
(
)
;
formatters
=
other
.
formatters
;
selectors
=
other
.
selectors
;
formattersByType
=
other
.
formattersByType
;
other
.
formatters
=
nullptr
;
other
.
selectors
=
nullptr
;
other
.
formattersByType
=
nullptr
;
return
*
this
;
}
void
MFFunctionRegistry
:
:
cleanup
(
)
noexcept
{
if
(
formatters
!
=
nullptr
)
{
delete
formatters
;
}
if
(
selectors
!
=
nullptr
)
{
delete
selectors
;
}
if
(
formattersByType
!
=
nullptr
)
{
delete
formattersByType
;
}
}
MFFunctionRegistry
:
:
~
MFFunctionRegistry
(
)
{
cleanup
(
)
;
}
number
:
:
LocalizedNumberFormatter
StandardFunctions
:
:
formatterForOptions
(
const
Number
&
number
const
FunctionOptions
&
opts
UErrorCode
&
status
)
{
number
:
:
UnlocalizedNumberFormatter
nf
;
using
namespace
number
;
if
(
U_SUCCESS
(
status
)
)
{
Formattable
opt
;
nf
=
NumberFormatter
:
:
with
(
)
;
bool
isInteger
=
number
.
isInteger
;
if
(
isInteger
)
{
nf
=
nf
.
precision
(
Precision
:
:
integer
(
)
)
;
}
if
(
!
isInteger
)
{
Notation
notation
=
Notation
:
:
simple
(
)
;
UnicodeString
notationOpt
=
opts
.
getStringFunctionOption
(
UnicodeString
(
"
notation
"
)
)
;
if
(
notationOpt
=
=
UnicodeString
(
"
scientific
"
)
)
{
notation
=
Notation
:
:
scientific
(
)
;
}
else
if
(
notationOpt
=
=
UnicodeString
(
"
engineering
"
)
)
{
notation
=
Notation
:
:
engineering
(
)
;
}
else
if
(
notationOpt
=
=
UnicodeString
(
"
compact
"
)
)
{
UnicodeString
displayOpt
=
opts
.
getStringFunctionOption
(
UnicodeString
(
"
compactDisplay
"
)
)
;
if
(
displayOpt
=
=
UnicodeString
(
"
long
"
)
)
{
notation
=
Notation
:
:
compactLong
(
)
;
}
else
{
notation
=
Notation
:
:
compactShort
(
)
;
}
}
else
{
}
nf
=
nf
.
notation
(
notation
)
;
}
if
(
!
isInteger
)
{
if
(
number
.
usePercent
(
opts
)
)
{
nf
=
nf
.
unit
(
NoUnit
:
:
percent
(
)
)
.
scale
(
Scale
:
:
powerOfTen
(
2
)
)
;
}
}
int32_t
maxSignificantDigits
=
number
.
maximumSignificantDigits
(
opts
)
;
if
(
!
isInteger
)
{
int32_t
minFractionDigits
=
number
.
minimumFractionDigits
(
opts
)
;
int32_t
maxFractionDigits
=
number
.
maximumFractionDigits
(
opts
)
;
int32_t
minSignificantDigits
=
number
.
minimumSignificantDigits
(
opts
)
;
Precision
p
=
Precision
:
:
unlimited
(
)
;
bool
precisionOptions
=
false
;
if
(
maxFractionDigits
!
=
-
1
&
&
minFractionDigits
!
=
-
1
)
{
precisionOptions
=
true
;
p
=
Precision
:
:
minMaxFraction
(
minFractionDigits
maxFractionDigits
)
;
}
else
if
(
minFractionDigits
!
=
-
1
)
{
precisionOptions
=
true
;
p
=
Precision
:
:
minFraction
(
minFractionDigits
)
;
}
else
if
(
maxFractionDigits
!
=
-
1
)
{
precisionOptions
=
true
;
p
=
Precision
:
:
maxFraction
(
maxFractionDigits
)
;
}
if
(
minSignificantDigits
!
=
-
1
)
{
precisionOptions
=
true
;
p
=
p
.
minSignificantDigits
(
minSignificantDigits
)
;
}
if
(
maxSignificantDigits
!
=
-
1
)
{
precisionOptions
=
true
;
p
=
p
.
maxSignificantDigits
(
maxSignificantDigits
)
;
}
if
(
precisionOptions
)
{
nf
=
nf
.
precision
(
p
)
;
}
}
else
{
Precision
p
=
Precision
:
:
integer
(
)
;
if
(
maxSignificantDigits
!
=
-
1
)
{
p
=
p
.
maxSignificantDigits
(
maxSignificantDigits
)
;
}
nf
=
nf
.
precision
(
p
)
;
}
int32_t
minIntegerDigits
=
number
.
minimumIntegerDigits
(
opts
)
;
nf
=
nf
.
integerWidth
(
IntegerWidth
:
:
zeroFillTo
(
minIntegerDigits
)
)
;
UnicodeString
sd
=
opts
.
getStringFunctionOption
(
UnicodeString
(
"
signDisplay
"
)
)
;
UNumberSignDisplay
signDisplay
;
if
(
sd
=
=
UnicodeString
(
"
always
"
)
)
{
signDisplay
=
UNumberSignDisplay
:
:
UNUM_SIGN_ALWAYS
;
}
else
if
(
sd
=
=
UnicodeString
(
"
exceptZero
"
)
)
{
signDisplay
=
UNumberSignDisplay
:
:
UNUM_SIGN_EXCEPT_ZERO
;
}
else
if
(
sd
=
=
UnicodeString
(
"
negative
"
)
)
{
signDisplay
=
UNumberSignDisplay
:
:
UNUM_SIGN_NEGATIVE
;
}
else
if
(
sd
=
=
UnicodeString
(
"
never
"
)
)
{
signDisplay
=
UNumberSignDisplay
:
:
UNUM_SIGN_NEVER
;
}
else
{
signDisplay
=
UNumberSignDisplay
:
:
UNUM_SIGN_AUTO
;
}
nf
=
nf
.
sign
(
signDisplay
)
;
UnicodeString
ug
=
opts
.
getStringFunctionOption
(
UnicodeString
(
"
useGrouping
"
)
)
;
UNumberGroupingStrategy
grp
;
if
(
ug
=
=
UnicodeString
(
"
always
"
)
)
{
grp
=
UNumberGroupingStrategy
:
:
UNUM_GROUPING_ON_ALIGNED
;
}
else
if
(
ug
=
=
UnicodeString
(
"
never
"
)
)
{
grp
=
UNumberGroupingStrategy
:
:
UNUM_GROUPING_OFF
;
}
else
if
(
ug
=
=
UnicodeString
(
"
min2
"
)
)
{
grp
=
UNumberGroupingStrategy
:
:
UNUM_GROUPING_MIN2
;
}
else
{
grp
=
UNumberGroupingStrategy
:
:
UNUM_GROUPING_AUTO
;
}
nf
=
nf
.
grouping
(
grp
)
;
UnicodeString
ns
=
opts
.
getStringFunctionOption
(
UnicodeString
(
"
numberingSystem
"
)
)
;
if
(
ns
.
length
(
)
>
0
)
{
ns
=
ns
.
toLower
(
Locale
(
"
en
-
US
"
)
)
;
CharString
buffer
;
UErrorCode
localStatus
=
U_ZERO_ERROR
;
buffer
.
appendInvariantChars
(
{
false
ns
.
getBuffer
(
)
ns
.
length
(
)
}
localStatus
)
;
if
(
U_SUCCESS
(
localStatus
)
)
{
LocalPointer
<
NumberingSystem
>
symbols
(
NumberingSystem
:
:
createInstanceByName
(
buffer
.
data
(
)
localStatus
)
)
;
if
(
U_SUCCESS
(
localStatus
)
)
{
nf
=
nf
.
adoptSymbols
(
symbols
.
orphan
(
)
)
;
}
}
}
}
return
nf
.
locale
(
number
.
locale
)
;
}
Formatter
*
StandardFunctions
:
:
NumberFactory
:
:
createFormatter
(
const
Locale
&
locale
UErrorCode
&
errorCode
)
{
NULL_ON_ERROR
(
errorCode
)
;
Formatter
*
result
=
new
Number
(
locale
)
;
if
(
result
=
=
nullptr
)
{
errorCode
=
U_MEMORY_ALLOCATION_ERROR
;
}
return
result
;
}
Formatter
*
StandardFunctions
:
:
IntegerFactory
:
:
createFormatter
(
const
Locale
&
locale
UErrorCode
&
errorCode
)
{
NULL_ON_ERROR
(
errorCode
)
;
Formatter
*
result
=
new
Number
(
Number
:
:
integer
(
locale
)
)
;
if
(
result
=
=
nullptr
)
{
errorCode
=
U_MEMORY_ALLOCATION_ERROR
;
}
return
result
;
}
StandardFunctions
:
:
IntegerFactory
:
:
~
IntegerFactory
(
)
{
}
static
FormattedPlaceholder
notANumber
(
const
FormattedPlaceholder
&
input
)
{
return
FormattedPlaceholder
(
input
FormattedValue
(
UnicodeString
(
"
NaN
"
)
)
)
;
}
static
double
parseNumberLiteral
(
const
FormattedPlaceholder
&
input
UErrorCode
&
errorCode
)
{
if
(
U_FAILURE
(
errorCode
)
)
{
return
{
}
;
}
UnicodeString
inputStr
=
input
.
asFormattable
(
)
.
getString
(
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
return
{
}
;
}
int32_t
len
=
inputStr
.
length
(
)
;
if
(
len
>
0
&
&
(
(
inputStr
[
0
]
=
=
'
+
'
)
|
|
(
inputStr
[
0
]
=
=
'
0
'
&
&
len
>
1
&
&
inputStr
[
1
]
!
=
'
.
'
)
|
|
(
inputStr
[
len
-
1
]
=
=
'
.
'
)
|
|
(
inputStr
[
0
]
=
=
'
.
'
)
)
)
{
errorCode
=
U_MF_OPERAND_MISMATCH_ERROR
;
return
0
;
}
using
namespace
double_conversion
;
int
processedCharactersCount
=
0
;
StringToDoubleConverter
converter
(
0
0
0
"
"
"
"
)
;
double
result
=
converter
.
StringToDouble
(
reinterpret_cast
<
const
uint16_t
*
>
(
inputStr
.
getBuffer
(
)
)
len
&
processedCharactersCount
)
;
if
(
processedCharactersCount
!
=
len
)
{
errorCode
=
U_MF_OPERAND_MISMATCH_ERROR
;
}
return
result
;
}
static
FormattedPlaceholder
tryParsingNumberLiteral
(
const
number
:
:
LocalizedNumberFormatter
&
nf
const
FormattedPlaceholder
&
input
UErrorCode
&
errorCode
)
{
double
numberValue
=
parseNumberLiteral
(
input
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
return
notANumber
(
input
)
;
}
UErrorCode
savedStatus
=
errorCode
;
number
:
:
FormattedNumber
result
=
nf
.
formatDouble
(
numberValue
errorCode
)
;
if
(
errorCode
=
=
U_USING_DEFAULT_WARNING
)
{
errorCode
=
savedStatus
;
}
return
FormattedPlaceholder
(
input
FormattedValue
(
std
:
:
move
(
result
)
)
)
;
}
int32_t
StandardFunctions
:
:
Number
:
:
maximumFractionDigits
(
const
FunctionOptions
&
opts
)
const
{
Formattable
opt
;
if
(
isInteger
)
{
return
0
;
}
if
(
opts
.
getFunctionOption
(
UnicodeString
(
"
maximumFractionDigits
"
)
opt
)
)
{
UErrorCode
localErrorCode
=
U_ZERO_ERROR
;
int64_t
val
=
getInt64Value
(
locale
opt
localErrorCode
)
;
if
(
U_SUCCESS
(
localErrorCode
)
)
{
return
static_cast
<
int32_t
>
(
val
)
;
}
}
return
-
1
;
}
int32_t
StandardFunctions
:
:
Number
:
:
minimumFractionDigits
(
const
FunctionOptions
&
opts
)
const
{
Formattable
opt
;
if
(
!
isInteger
)
{
if
(
opts
.
getFunctionOption
(
UnicodeString
(
"
minimumFractionDigits
"
)
opt
)
)
{
UErrorCode
localErrorCode
=
U_ZERO_ERROR
;
int64_t
val
=
getInt64Value
(
locale
opt
localErrorCode
)
;
if
(
U_SUCCESS
(
localErrorCode
)
)
{
return
static_cast
<
int32_t
>
(
val
)
;
}
}
}
return
-
1
;
}
int32_t
StandardFunctions
:
:
Number
:
:
minimumIntegerDigits
(
const
FunctionOptions
&
opts
)
const
{
Formattable
opt
;
if
(
opts
.
getFunctionOption
(
UnicodeString
(
"
minimumIntegerDigits
"
)
opt
)
)
{
UErrorCode
localErrorCode
=
U_ZERO_ERROR
;
int64_t
val
=
getInt64Value
(
locale
opt
localErrorCode
)
;
if
(
U_SUCCESS
(
localErrorCode
)
)
{
return
static_cast
<
int32_t
>
(
val
)
;
}
}
return
0
;
}
int32_t
StandardFunctions
:
:
Number
:
:
minimumSignificantDigits
(
const
FunctionOptions
&
opts
)
const
{
Formattable
opt
;
if
(
!
isInteger
)
{
if
(
opts
.
getFunctionOption
(
UnicodeString
(
"
minimumSignificantDigits
"
)
opt
)
)
{
UErrorCode
localErrorCode
=
U_ZERO_ERROR
;
int64_t
val
=
getInt64Value
(
locale
opt
localErrorCode
)
;
if
(
U_SUCCESS
(
localErrorCode
)
)
{
return
static_cast
<
int32_t
>
(
val
)
;
}
}
}
return
-
1
;
}
int32_t
StandardFunctions
:
:
Number
:
:
maximumSignificantDigits
(
const
FunctionOptions
&
opts
)
const
{
Formattable
opt
;
if
(
opts
.
getFunctionOption
(
UnicodeString
(
"
maximumSignificantDigits
"
)
opt
)
)
{
UErrorCode
localErrorCode
=
U_ZERO_ERROR
;
int64_t
val
=
getInt64Value
(
locale
opt
localErrorCode
)
;
if
(
U_SUCCESS
(
localErrorCode
)
)
{
return
static_cast
<
int32_t
>
(
val
)
;
}
}
return
-
1
;
}
bool
StandardFunctions
:
:
Number
:
:
usePercent
(
const
FunctionOptions
&
opts
)
const
{
Formattable
opt
;
if
(
isInteger
|
|
!
opts
.
getFunctionOption
(
UnicodeString
(
"
style
"
)
opt
)
|
|
opt
.
getType
(
)
!
=
UFMT_STRING
)
{
return
false
;
}
UErrorCode
localErrorCode
=
U_ZERO_ERROR
;
const
UnicodeString
&
style
=
opt
.
getString
(
localErrorCode
)
;
U_ASSERT
(
U_SUCCESS
(
localErrorCode
)
)
;
return
(
style
=
=
UnicodeString
(
"
percent
"
)
)
;
}
StandardFunctions
:
:
Number
StandardFunctions
:
:
Number
:
:
integer
(
const
Locale
&
loc
)
{
return
StandardFunctions
:
:
Number
(
loc
true
)
;
}
FormattedPlaceholder
StandardFunctions
:
:
Number
:
:
format
(
FormattedPlaceholder
&
&
arg
FunctionOptions
&
&
opts
UErrorCode
&
errorCode
)
const
{
if
(
U_FAILURE
(
errorCode
)
)
{
return
{
}
;
}
if
(
!
arg
.
canFormat
(
)
)
{
errorCode
=
U_MF_OPERAND_MISMATCH_ERROR
;
return
notANumber
(
arg
)
;
}
number
:
:
LocalizedNumberFormatter
realFormatter
;
realFormatter
=
formatterForOptions
(
*
this
opts
errorCode
)
;
number
:
:
FormattedNumber
numberResult
;
if
(
U_SUCCESS
(
errorCode
)
)
{
const
Formattable
&
toFormat
=
arg
.
asFormattable
(
)
;
switch
(
toFormat
.
getType
(
)
)
{
case
UFMT_DOUBLE
:
{
double
d
=
toFormat
.
getDouble
(
errorCode
)
;
U_ASSERT
(
U_SUCCESS
(
errorCode
)
)
;
numberResult
=
realFormatter
.
formatDouble
(
d
errorCode
)
;
break
;
}
case
UFMT_LONG
:
{
int32_t
l
=
toFormat
.
getLong
(
errorCode
)
;
U_ASSERT
(
U_SUCCESS
(
errorCode
)
)
;
numberResult
=
realFormatter
.
formatInt
(
l
errorCode
)
;
break
;
}
case
UFMT_INT64
:
{
int64_t
i
=
toFormat
.
getInt64
(
errorCode
)
;
U_ASSERT
(
U_SUCCESS
(
errorCode
)
)
;
numberResult
=
realFormatter
.
formatInt
(
i
errorCode
)
;
break
;
}
case
UFMT_STRING
:
{
return
tryParsingNumberLiteral
(
realFormatter
arg
errorCode
)
;
}
default
:
{
errorCode
=
U_MF_OPERAND_MISMATCH_ERROR
;
return
notANumber
(
arg
)
;
}
}
}
return
FormattedPlaceholder
(
arg
FormattedValue
(
std
:
:
move
(
numberResult
)
)
)
;
}
StandardFunctions
:
:
Number
:
:
~
Number
(
)
{
}
StandardFunctions
:
:
NumberFactory
:
:
~
NumberFactory
(
)
{
}
StandardFunctions
:
:
Plural
:
:
PluralType
StandardFunctions
:
:
Plural
:
:
pluralType
(
const
FunctionOptions
&
opts
)
const
{
Formattable
opt
;
if
(
opts
.
getFunctionOption
(
UnicodeString
(
"
select
"
)
opt
)
)
{
UErrorCode
localErrorCode
=
U_ZERO_ERROR
;
UnicodeString
val
=
opt
.
getString
(
localErrorCode
)
;
if
(
U_SUCCESS
(
localErrorCode
)
)
{
if
(
val
=
=
UnicodeString
(
"
ordinal
"
)
)
{
return
PluralType
:
:
PLURAL_ORDINAL
;
}
if
(
val
=
=
UnicodeString
(
"
exact
"
)
)
{
return
PluralType
:
:
PLURAL_EXACT
;
}
}
}
return
PluralType
:
:
PLURAL_CARDINAL
;
}
Selector
*
StandardFunctions
:
:
PluralFactory
:
:
createSelector
(
const
Locale
&
locale
UErrorCode
&
errorCode
)
const
{
NULL_ON_ERROR
(
errorCode
)
;
Selector
*
result
;
if
(
isInteger
)
{
result
=
new
Plural
(
Plural
:
:
integer
(
locale
errorCode
)
)
;
}
else
{
result
=
new
Plural
(
locale
errorCode
)
;
}
NULL_ON_ERROR
(
errorCode
)
;
if
(
result
=
=
nullptr
)
{
errorCode
=
U_MEMORY_ALLOCATION_ERROR
;
}
return
result
;
}
void
StandardFunctions
:
:
Plural
:
:
selectKey
(
FormattedPlaceholder
&
&
toFormat
FunctionOptions
&
&
opts
const
UnicodeString
*
keys
int32_t
keysLen
UnicodeString
*
prefs
int32_t
&
prefsLen
UErrorCode
&
errorCode
)
const
{
CHECK_ERROR
(
errorCode
)
;
if
(
!
toFormat
.
canFormat
(
)
)
{
errorCode
=
U_MF_SELECTOR_ERROR
;
return
;
}
PluralType
type
=
pluralType
(
opts
)
;
FormattedPlaceholder
resolvedSelector
=
numberFormatter
-
>
format
(
std
:
:
move
(
toFormat
)
std
:
:
move
(
opts
)
errorCode
)
;
CHECK_ERROR
(
errorCode
)
;
U_ASSERT
(
resolvedSelector
.
isEvaluated
(
)
&
&
resolvedSelector
.
output
(
)
.
isNumber
(
)
)
;
const
number
:
:
FormattedNumber
&
formattedNumber
=
resolvedSelector
.
output
(
)
.
getNumber
(
)
;
UnicodeString
exact
=
formattedNumber
.
toString
(
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
errorCode
=
U_MF_SELECTOR_ERROR
;
return
;
}
UnicodeString
keyword
;
if
(
type
!
=
PluralType
:
:
PLURAL_EXACT
)
{
UPluralType
t
=
type
=
=
PluralType
:
:
PLURAL_ORDINAL
?
UPLURAL_TYPE_ORDINAL
:
UPLURAL_TYPE_CARDINAL
;
LocalPointer
<
PluralRules
>
rules
(
PluralRules
:
:
forLocale
(
locale
t
errorCode
)
)
;
CHECK_ERROR
(
errorCode
)
;
keyword
=
rules
-
>
select
(
formattedNumber
errorCode
)
;
}
prefsLen
=
0
;
double
keyAsDouble
=
0
;
for
(
int32_t
i
=
0
;
i
<
keysLen
;
i
+
+
)
{
UErrorCode
localErrorCode
=
U_ZERO_ERROR
;
strToDouble
(
keys
[
i
]
keyAsDouble
localErrorCode
)
;
if
(
U_SUCCESS
(
localErrorCode
)
)
{
if
(
exact
=
=
keys
[
i
]
)
{
prefs
[
prefsLen
]
=
keys
[
i
]
;
prefsLen
+
+
;
break
;
}
}
}
if
(
prefsLen
=
=
keysLen
|
|
type
=
=
PluralType
:
:
PLURAL_EXACT
)
{
return
;
}
for
(
int32_t
i
=
0
;
i
<
keysLen
;
i
+
+
)
{
if
(
prefsLen
>
=
keysLen
)
{
break
;
}
if
(
keyword
=
=
keys
[
i
]
)
{
prefs
[
prefsLen
]
=
keys
[
i
]
;
prefsLen
+
+
;
}
}
}
StandardFunctions
:
:
Plural
:
:
Plural
(
const
Locale
&
loc
UErrorCode
&
status
)
:
locale
(
loc
)
{
CHECK_ERROR
(
status
)
;
numberFormatter
.
adoptInstead
(
new
StandardFunctions
:
:
Number
(
loc
)
)
;
if
(
!
numberFormatter
.
isValid
(
)
)
{
status
=
U_MEMORY_ALLOCATION_ERROR
;
}
}
StandardFunctions
:
:
Plural
:
:
Plural
(
const
Locale
&
loc
bool
isInt
UErrorCode
&
status
)
:
locale
(
loc
)
isInteger
(
isInt
)
{
CHECK_ERROR
(
status
)
;
if
(
isInteger
)
{
numberFormatter
.
adoptInstead
(
new
StandardFunctions
:
:
Number
(
loc
true
)
)
;
}
else
{
numberFormatter
.
adoptInstead
(
new
StandardFunctions
:
:
Number
(
loc
)
)
;
}
if
(
!
numberFormatter
.
isValid
(
)
)
{
status
=
U_MEMORY_ALLOCATION_ERROR
;
}
}
StandardFunctions
:
:
Plural
:
:
~
Plural
(
)
{
}
StandardFunctions
:
:
PluralFactory
:
:
~
PluralFactory
(
)
{
}
UnicodeString
StandardFunctions
:
:
getStringOption
(
const
FunctionOptions
&
opts
const
UnicodeString
&
optionName
UErrorCode
&
errorCode
)
{
if
(
U_SUCCESS
(
errorCode
)
)
{
Formattable
opt
;
if
(
opts
.
getFunctionOption
(
optionName
opt
)
)
{
return
opt
.
getString
(
errorCode
)
;
}
else
{
errorCode
=
U_ILLEGAL_ARGUMENT_ERROR
;
}
}
return
{
}
;
}
static
UnicodeString
defaultForOption
(
const
UnicodeString
&
optionName
)
{
if
(
optionName
=
=
UnicodeString
(
"
dateStyle
"
)
|
|
optionName
=
=
UnicodeString
(
"
timeStyle
"
)
|
|
optionName
=
=
UnicodeString
(
"
style
"
)
)
{
return
UnicodeString
(
"
short
"
)
;
}
return
{
}
;
}
UnicodeString
StandardFunctions
:
:
DateTime
:
:
getFunctionOption
(
const
FormattedPlaceholder
&
toFormat
const
FunctionOptions
&
opts
const
UnicodeString
&
optionName
)
const
{
Formattable
opt
;
UnicodeString
s
;
UErrorCode
localErrorCode
=
U_ZERO_ERROR
;
s
=
getStringOption
(
opts
optionName
localErrorCode
)
;
if
(
U_SUCCESS
(
localErrorCode
)
)
{
return
s
;
}
localErrorCode
=
U_ZERO_ERROR
;
s
=
getStringOption
(
toFormat
.
options
(
)
optionName
localErrorCode
)
;
if
(
U_SUCCESS
(
localErrorCode
)
)
{
return
s
;
}
return
defaultForOption
(
optionName
)
;
}
UnicodeString
StandardFunctions
:
:
DateTime
:
:
getFunctionOption
(
const
FormattedPlaceholder
&
toFormat
const
FunctionOptions
&
opts
const
UnicodeString
&
optionName
UErrorCode
&
errorCode
)
const
{
if
(
U_SUCCESS
(
errorCode
)
)
{
Formattable
opt
;
UnicodeString
s
;
UErrorCode
localErrorCode
=
U_ZERO_ERROR
;
s
=
getStringOption
(
opts
optionName
localErrorCode
)
;
if
(
U_SUCCESS
(
localErrorCode
)
)
{
return
s
;
}
localErrorCode
=
U_ZERO_ERROR
;
s
=
getStringOption
(
toFormat
.
options
(
)
optionName
localErrorCode
)
;
if
(
U_SUCCESS
(
localErrorCode
)
)
{
return
s
;
}
errorCode
=
U_ILLEGAL_ARGUMENT_ERROR
;
}
return
{
}
;
}
static
DateFormat
:
:
EStyle
stringToStyle
(
UnicodeString
option
UErrorCode
&
errorCode
)
{
if
(
U_SUCCESS
(
errorCode
)
)
{
UnicodeString
upper
=
option
.
toUpper
(
)
;
if
(
upper
=
=
UnicodeString
(
"
FULL
"
)
)
{
return
DateFormat
:
:
EStyle
:
:
kFull
;
}
if
(
upper
=
=
UnicodeString
(
"
LONG
"
)
)
{
return
DateFormat
:
:
EStyle
:
:
kLong
;
}
if
(
upper
=
=
UnicodeString
(
"
MEDIUM
"
)
)
{
return
DateFormat
:
:
EStyle
:
:
kMedium
;
}
if
(
upper
=
=
UnicodeString
(
"
SHORT
"
)
)
{
return
DateFormat
:
:
EStyle
:
:
kShort
;
}
if
(
upper
.
isEmpty
(
)
|
|
upper
=
=
UnicodeString
(
"
DEFAULT
"
)
)
{
return
DateFormat
:
:
EStyle
:
:
kDefault
;
}
errorCode
=
U_ILLEGAL_ARGUMENT_ERROR
;
}
return
DateFormat
:
:
EStyle
:
:
kNone
;
}
StandardFunctions
:
:
DateTimeFactory
*
StandardFunctions
:
:
DateTimeFactory
:
:
dateTime
(
UErrorCode
&
errorCode
)
{
NULL_ON_ERROR
(
errorCode
)
;
DateTimeFactory
*
result
=
new
StandardFunctions
:
:
DateTimeFactory
(
DateTimeType
:
:
DateTime
)
;
if
(
result
=
=
nullptr
)
{
errorCode
=
U_MEMORY_ALLOCATION_ERROR
;
}
return
result
;
}
StandardFunctions
:
:
DateTimeFactory
*
StandardFunctions
:
:
DateTimeFactory
:
:
date
(
UErrorCode
&
errorCode
)
{
NULL_ON_ERROR
(
errorCode
)
;
DateTimeFactory
*
result
=
new
DateTimeFactory
(
DateTimeType
:
:
Date
)
;
if
(
result
=
=
nullptr
)
{
errorCode
=
U_MEMORY_ALLOCATION_ERROR
;
}
return
result
;
}
StandardFunctions
:
:
DateTimeFactory
*
StandardFunctions
:
:
DateTimeFactory
:
:
time
(
UErrorCode
&
errorCode
)
{
NULL_ON_ERROR
(
errorCode
)
;
DateTimeFactory
*
result
=
new
DateTimeFactory
(
DateTimeType
:
:
Time
)
;
if
(
result
=
=
nullptr
)
{
errorCode
=
U_MEMORY_ALLOCATION_ERROR
;
}
return
result
;
}
Formatter
*
StandardFunctions
:
:
DateTimeFactory
:
:
createFormatter
(
const
Locale
&
locale
UErrorCode
&
errorCode
)
{
NULL_ON_ERROR
(
errorCode
)
;
Formatter
*
result
=
new
StandardFunctions
:
:
DateTime
(
locale
type
)
;
if
(
result
=
=
nullptr
)
{
errorCode
=
U_MEMORY_ALLOCATION_ERROR
;
}
return
result
;
}
FormattedPlaceholder
StandardFunctions
:
:
DateTime
:
:
format
(
FormattedPlaceholder
&
&
toFormat
FunctionOptions
&
&
opts
UErrorCode
&
errorCode
)
const
{
if
(
U_FAILURE
(
errorCode
)
)
{
return
{
}
;
}
if
(
!
toFormat
.
canFormat
(
)
)
{
errorCode
=
U_MF_OPERAND_MISMATCH_ERROR
;
return
std
:
:
move
(
toFormat
)
;
}
LocalPointer
<
DateFormat
>
df
;
Formattable
opt
;
DateFormat
:
:
EStyle
dateStyle
=
DateFormat
:
:
kShort
;
DateFormat
:
:
EStyle
timeStyle
=
DateFormat
:
:
kShort
;
UnicodeString
dateStyleName
(
"
dateStyle
"
)
;
UnicodeString
timeStyleName
(
"
timeStyle
"
)
;
UnicodeString
styleName
(
"
style
"
)
;
bool
hasDateStyleOption
=
opts
.
getFunctionOption
(
dateStyleName
opt
)
;
bool
hasTimeStyleOption
=
opts
.
getFunctionOption
(
timeStyleName
opt
)
;
bool
noOptions
=
opts
.
optionsCount
(
)
=
=
0
;
bool
useStyle
=
(
type
=
=
DateTimeFactory
:
:
DateTimeType
:
:
DateTime
&
&
(
hasDateStyleOption
|
|
hasTimeStyleOption
|
|
noOptions
)
)
|
|
(
type
!
=
DateTimeFactory
:
:
DateTimeType
:
:
DateTime
)
;
bool
useDate
=
type
=
=
DateTimeFactory
:
:
DateTimeType
:
:
Date
|
|
(
type
=
=
DateTimeFactory
:
:
DateTimeType
:
:
DateTime
&
&
hasDateStyleOption
)
;
bool
useTime
=
type
=
=
DateTimeFactory
:
:
DateTimeType
:
:
Time
|
|
(
type
=
=
DateTimeFactory
:
:
DateTimeType
:
:
DateTime
&
&
hasTimeStyleOption
)
;
if
(
useStyle
)
{
if
(
type
=
=
DateTimeFactory
:
:
DateTimeType
:
:
DateTime
)
{
dateStyle
=
stringToStyle
(
getFunctionOption
(
toFormat
opts
dateStyleName
)
errorCode
)
;
timeStyle
=
stringToStyle
(
getFunctionOption
(
toFormat
opts
timeStyleName
)
errorCode
)
;
if
(
useDate
&
&
!
useTime
)
{
df
.
adoptInstead
(
DateFormat
:
:
createDateInstance
(
dateStyle
locale
)
)
;
}
else
if
(
useTime
&
&
!
useDate
)
{
df
.
adoptInstead
(
DateFormat
:
:
createTimeInstance
(
timeStyle
locale
)
)
;
}
else
{
df
.
adoptInstead
(
DateFormat
:
:
createDateTimeInstance
(
dateStyle
timeStyle
locale
)
)
;
}
}
else
if
(
type
=
=
DateTimeFactory
:
:
DateTimeType
:
:
Date
)
{
dateStyle
=
stringToStyle
(
getFunctionOption
(
toFormat
opts
styleName
)
errorCode
)
;
df
.
adoptInstead
(
DateFormat
:
:
createDateInstance
(
dateStyle
locale
)
)
;
}
else
{
timeStyle
=
stringToStyle
(
getFunctionOption
(
toFormat
opts
styleName
)
errorCode
)
;
df
.
adoptInstead
(
DateFormat
:
:
createTimeInstance
(
timeStyle
locale
)
)
;
}
}
else
{
UnicodeString
skeleton
;
#
define
ADD_PATTERN
(
s
)
skeleton
+
=
UnicodeString
(
s
)
if
(
U_SUCCESS
(
errorCode
)
)
{
UnicodeString
year
=
getFunctionOption
(
toFormat
opts
UnicodeString
(
"
year
"
)
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
errorCode
=
U_ZERO_ERROR
;
}
else
{
useDate
=
true
;
if
(
year
=
=
UnicodeString
(
"
2
-
digit
"
)
)
{
ADD_PATTERN
(
"
YY
"
)
;
}
else
if
(
year
=
=
UnicodeString
(
"
numeric
"
)
)
{
ADD_PATTERN
(
"
YYYY
"
)
;
}
}
UnicodeString
month
=
getFunctionOption
(
toFormat
opts
UnicodeString
(
"
month
"
)
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
errorCode
=
U_ZERO_ERROR
;
}
else
{
useDate
=
true
;
if
(
month
=
=
UnicodeString
(
"
long
"
)
)
{
ADD_PATTERN
(
"
MMMM
"
)
;
}
else
if
(
month
=
=
UnicodeString
(
"
short
"
)
)
{
ADD_PATTERN
(
"
MMM
"
)
;
}
else
if
(
month
=
=
UnicodeString
(
"
narrow
"
)
)
{
ADD_PATTERN
(
"
MMMMM
"
)
;
}
else
if
(
month
=
=
UnicodeString
(
"
numeric
"
)
)
{
ADD_PATTERN
(
"
M
"
)
;
}
else
if
(
month
=
=
UnicodeString
(
"
2
-
digit
"
)
)
{
ADD_PATTERN
(
"
MM
"
)
;
}
}
UnicodeString
weekday
=
getFunctionOption
(
toFormat
opts
UnicodeString
(
"
weekday
"
)
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
errorCode
=
U_ZERO_ERROR
;
}
else
{
useDate
=
true
;
if
(
weekday
=
=
UnicodeString
(
"
long
"
)
)
{
ADD_PATTERN
(
"
EEEE
"
)
;
}
else
if
(
weekday
=
=
UnicodeString
(
"
short
"
)
)
{
ADD_PATTERN
(
"
EEEEE
"
)
;
}
else
if
(
weekday
=
=
UnicodeString
(
"
narrow
"
)
)
{
ADD_PATTERN
(
"
EEEEE
"
)
;
}
}
UnicodeString
day
=
getFunctionOption
(
toFormat
opts
UnicodeString
(
"
day
"
)
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
errorCode
=
U_ZERO_ERROR
;
}
else
{
useDate
=
true
;
if
(
day
=
=
UnicodeString
(
"
numeric
"
)
)
{
ADD_PATTERN
(
"
d
"
)
;
}
else
if
(
day
=
=
UnicodeString
(
"
2
-
digit
"
)
)
{
ADD_PATTERN
(
"
dd
"
)
;
}
}
UnicodeString
hour
=
getFunctionOption
(
toFormat
opts
UnicodeString
(
"
hour
"
)
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
errorCode
=
U_ZERO_ERROR
;
}
else
{
useTime
=
true
;
if
(
hour
=
=
UnicodeString
(
"
numeric
"
)
)
{
ADD_PATTERN
(
"
h
"
)
;
}
else
if
(
hour
=
=
UnicodeString
(
"
2
-
digit
"
)
)
{
ADD_PATTERN
(
"
hh
"
)
;
}
}
UnicodeString
minute
=
getFunctionOption
(
toFormat
opts
UnicodeString
(
"
minute
"
)
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
errorCode
=
U_ZERO_ERROR
;
}
else
{
useTime
=
true
;
if
(
minute
=
=
UnicodeString
(
"
numeric
"
)
)
{
ADD_PATTERN
(
"
m
"
)
;
}
else
if
(
minute
=
=
UnicodeString
(
"
2
-
digit
"
)
)
{
ADD_PATTERN
(
"
mm
"
)
;
}
}
UnicodeString
second
=
getFunctionOption
(
toFormat
opts
UnicodeString
(
"
second
"
)
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
errorCode
=
U_ZERO_ERROR
;
}
else
{
useTime
=
true
;
if
(
second
=
=
UnicodeString
(
"
numeric
"
)
)
{
ADD_PATTERN
(
"
s
"
)
;
}
else
if
(
second
=
=
UnicodeString
(
"
2
-
digit
"
)
)
{
ADD_PATTERN
(
"
ss
"
)
;
}
}
}
df
.
adoptInstead
(
DateFormat
:
:
createInstanceForSkeleton
(
skeleton
errorCode
)
)
;
}
if
(
U_FAILURE
(
errorCode
)
)
{
return
{
}
;
}
if
(
!
df
.
isValid
(
)
)
{
errorCode
=
U_MEMORY_ALLOCATION_ERROR
;
return
{
}
;
}
UnicodeString
result
;
const
Formattable
&
source
=
toFormat
.
asFormattable
(
)
;
switch
(
source
.
getType
(
)
)
{
case
UFMT_STRING
:
{
const
UnicodeString
&
sourceStr
=
source
.
getString
(
errorCode
)
;
U_ASSERT
(
U_SUCCESS
(
errorCode
)
)
;
UnicodeString
pattern
(
"
YYYY
-
MM
-
dd
'
T
'
HH
:
mm
:
ss
"
)
;
LocalPointer
<
DateFormat
>
dateParser
(
new
SimpleDateFormat
(
pattern
errorCode
)
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
errorCode
=
U_MF_FORMATTING_ERROR
;
}
else
{
UDate
d
=
dateParser
-
>
parse
(
sourceStr
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
UnicodeString
pattern
(
"
YYYY
-
MM
-
dd
"
)
;
errorCode
=
U_ZERO_ERROR
;
dateParser
.
adoptInstead
(
new
SimpleDateFormat
(
pattern
errorCode
)
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
errorCode
=
U_MF_FORMATTING_ERROR
;
}
else
{
d
=
dateParser
-
>
parse
(
sourceStr
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
errorCode
=
U_MF_OPERAND_MISMATCH_ERROR
;
}
}
}
toFormat
=
FormattedPlaceholder
(
message2
:
:
Formattable
:
:
forDate
(
d
)
toFormat
.
getFallback
(
)
)
;
df
-
>
format
(
d
result
0
errorCode
)
;
}
break
;
}
case
UFMT_DATE
:
{
df
-
>
format
(
source
.
asICUFormattable
(
errorCode
)
result
0
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
if
(
errorCode
=
=
U_ILLEGAL_ARGUMENT_ERROR
)
{
errorCode
=
U_MF_OPERAND_MISMATCH_ERROR
;
}
}
break
;
}
default
:
{
errorCode
=
U_MF_OPERAND_MISMATCH_ERROR
;
break
;
}
}
if
(
U_FAILURE
(
errorCode
)
)
{
return
{
}
;
}
return
FormattedPlaceholder
(
toFormat
std
:
:
move
(
opts
)
FormattedValue
(
std
:
:
move
(
result
)
)
)
;
}
StandardFunctions
:
:
DateTimeFactory
:
:
~
DateTimeFactory
(
)
{
}
StandardFunctions
:
:
DateTime
:
:
~
DateTime
(
)
{
}
Selector
*
StandardFunctions
:
:
TextFactory
:
:
createSelector
(
const
Locale
&
locale
UErrorCode
&
errorCode
)
const
{
Selector
*
result
=
new
TextSelector
(
locale
)
;
if
(
result
=
=
nullptr
)
{
errorCode
=
U_MEMORY_ALLOCATION_ERROR
;
return
nullptr
;
}
return
result
;
}
void
StandardFunctions
:
:
TextSelector
:
:
selectKey
(
FormattedPlaceholder
&
&
toFormat
FunctionOptions
&
&
opts
const
UnicodeString
*
keys
int32_t
keysLen
UnicodeString
*
prefs
int32_t
&
prefsLen
UErrorCode
&
errorCode
)
const
{
(
void
)
opts
;
CHECK_ERROR
(
errorCode
)
;
if
(
!
toFormat
.
canFormat
(
)
)
{
errorCode
=
U_MF_SELECTOR_ERROR
;
return
;
}
prefsLen
=
0
;
const
UnicodeString
&
formattedValue
=
toFormat
.
formatToString
(
locale
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
)
{
return
;
}
for
(
int32_t
i
=
0
;
i
<
keysLen
;
i
+
+
)
{
if
(
keys
[
i
]
=
=
formattedValue
)
{
prefs
[
0
]
=
keys
[
i
]
;
prefsLen
=
1
;
break
;
}
}
}
StandardFunctions
:
:
TextFactory
:
:
~
TextFactory
(
)
{
}
StandardFunctions
:
:
TextSelector
:
:
~
TextSelector
(
)
{
}
}
U_NAMESPACE_END
#
endif
#
endif
