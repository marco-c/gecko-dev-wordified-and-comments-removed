#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
if
!
UCONFIG_NO_MF2
#
include
"
unicode
/
messageformat2
.
h
"
#
include
"
messageformat2_allocation
.
h
"
#
include
"
messageformat2_checker
.
h
"
#
include
"
messageformat2_errors
.
h
"
#
include
"
messageformat2_evaluation
.
h
"
#
include
"
messageformat2_function_registry_internal
.
h
"
#
include
"
messageformat2_macros
.
h
"
#
include
"
messageformat2_parser
.
h
"
#
include
"
messageformat2_serializer
.
h
"
#
include
"
uvector
.
h
"
U_NAMESPACE_BEGIN
namespace
message2
{
void
MessageFormatter
:
:
Builder
:
:
clearState
(
)
{
normalizedInput
.
remove
(
)
;
delete
errors
;
errors
=
nullptr
;
}
MessageFormatter
:
:
Builder
&
MessageFormatter
:
:
Builder
:
:
setPattern
(
const
UnicodeString
&
pat
UParseError
&
parseError
UErrorCode
&
errorCode
)
{
clearState
(
)
;
errors
=
create
<
StaticErrors
>
(
StaticErrors
(
errorCode
)
errorCode
)
;
THIS_ON_ERROR
(
errorCode
)
;
MFDataModel
:
:
Builder
tree
(
errorCode
)
;
Parser
(
pat
tree
*
errors
normalizedInput
)
.
parse
(
parseError
errorCode
)
;
if
(
errors
-
>
hasSyntaxError
(
)
)
{
errors
-
>
checkErrors
(
errorCode
)
;
U_ASSERT
(
U_FAILURE
(
errorCode
)
)
;
}
dataModel
=
tree
.
build
(
errorCode
)
;
hasDataModel
=
true
;
hasPattern
=
true
;
pattern
=
pat
;
return
*
this
;
}
MessageFormatter
:
:
Builder
&
MessageFormatter
:
:
Builder
:
:
setFunctionRegistry
(
const
MFFunctionRegistry
&
reg
)
{
customMFFunctionRegistry
=
&
reg
;
return
*
this
;
}
MessageFormatter
:
:
Builder
&
MessageFormatter
:
:
Builder
:
:
setLocale
(
const
Locale
&
loc
)
{
locale
=
loc
;
return
*
this
;
}
MessageFormatter
:
:
Builder
&
MessageFormatter
:
:
Builder
:
:
setDataModel
(
MFDataModel
&
&
newDataModel
)
{
clearState
(
)
;
hasPattern
=
false
;
hasDataModel
=
true
;
dataModel
=
std
:
:
move
(
newDataModel
)
;
return
*
this
;
}
MessageFormatter
:
:
Builder
&
MessageFormatter
:
:
Builder
:
:
setErrorHandlingBehavior
(
MessageFormatter
:
:
UMFErrorHandlingBehavior
type
)
{
signalErrors
=
type
=
=
U_MF_STRICT
;
return
*
this
;
}
MessageFormatter
MessageFormatter
:
:
Builder
:
:
build
(
UErrorCode
&
errorCode
)
const
{
return
MessageFormatter
(
*
this
errorCode
)
;
}
MessageFormatter
:
:
Builder
:
:
Builder
(
UErrorCode
&
errorCode
)
:
locale
(
Locale
:
:
getDefault
(
)
)
customMFFunctionRegistry
(
nullptr
)
{
errors
=
new
StaticErrors
(
errorCode
)
;
CHECK_ERROR
(
errorCode
)
;
if
(
errors
=
=
nullptr
)
{
errorCode
=
U_MEMORY_ALLOCATION_ERROR
;
}
}
MessageFormatter
:
:
Builder
:
:
~
Builder
(
)
{
if
(
errors
!
=
nullptr
)
{
delete
errors
;
errors
=
nullptr
;
}
}
MessageFormatter
:
:
MessageFormatter
(
const
MessageFormatter
:
:
Builder
&
builder
UErrorCode
&
success
)
:
locale
(
builder
.
locale
)
customMFFunctionRegistry
(
builder
.
customMFFunctionRegistry
)
{
CHECK_ERROR
(
success
)
;
MFFunctionRegistry
:
:
Builder
standardFunctionsBuilder
(
success
)
;
FormatterFactory
*
dateTime
=
StandardFunctions
:
:
DateTimeFactory
:
:
dateTime
(
success
)
;
FormatterFactory
*
date
=
StandardFunctions
:
:
DateTimeFactory
:
:
date
(
success
)
;
FormatterFactory
*
time
=
StandardFunctions
:
:
DateTimeFactory
:
:
time
(
success
)
;
FormatterFactory
*
number
=
new
StandardFunctions
:
:
NumberFactory
(
)
;
FormatterFactory
*
integer
=
new
StandardFunctions
:
:
IntegerFactory
(
)
;
standardFunctionsBuilder
.
adoptFormatter
(
FunctionName
(
UnicodeString
(
"
datetime
"
)
)
dateTime
success
)
.
adoptFormatter
(
FunctionName
(
UnicodeString
(
"
date
"
)
)
date
success
)
.
adoptFormatter
(
FunctionName
(
UnicodeString
(
"
time
"
)
)
time
success
)
.
adoptFormatter
(
FunctionName
(
UnicodeString
(
"
number
"
)
)
number
success
)
.
adoptFormatter
(
FunctionName
(
UnicodeString
(
"
integer
"
)
)
integer
success
)
.
adoptSelector
(
FunctionName
(
UnicodeString
(
"
number
"
)
)
new
StandardFunctions
:
:
PluralFactory
(
UPLURAL_TYPE_CARDINAL
)
success
)
.
adoptSelector
(
FunctionName
(
UnicodeString
(
"
integer
"
)
)
new
StandardFunctions
:
:
PluralFactory
(
StandardFunctions
:
:
PluralFactory
:
:
integer
(
)
)
success
)
.
adoptSelector
(
FunctionName
(
UnicodeString
(
"
string
"
)
)
new
StandardFunctions
:
:
TextFactory
(
)
success
)
;
CHECK_ERROR
(
success
)
;
standardMFFunctionRegistry
=
standardFunctionsBuilder
.
build
(
)
;
CHECK_ERROR
(
success
)
;
standardMFFunctionRegistry
.
checkStandard
(
)
;
normalizedInput
=
builder
.
normalizedInput
;
signalErrors
=
builder
.
signalErrors
;
if
(
!
builder
.
hasDataModel
)
{
success
=
U_INVALID_STATE_ERROR
;
return
;
}
dataModel
=
builder
.
dataModel
;
if
(
builder
.
errors
!
=
nullptr
)
{
errors
=
new
StaticErrors
(
*
builder
.
errors
success
)
;
}
else
{
LocalPointer
<
StaticErrors
>
errorsNew
(
new
StaticErrors
(
success
)
)
;
CHECK_ERROR
(
success
)
;
errors
=
errorsNew
.
orphan
(
)
;
}
Checker
(
dataModel
*
errors
)
.
check
(
success
)
;
}
void
MessageFormatter
:
:
cleanup
(
)
noexcept
{
if
(
errors
!
=
nullptr
)
{
delete
errors
;
errors
=
nullptr
;
}
}
MessageFormatter
&
MessageFormatter
:
:
operator
=
(
MessageFormatter
&
&
other
)
noexcept
{
cleanup
(
)
;
locale
=
std
:
:
move
(
other
.
locale
)
;
standardMFFunctionRegistry
=
std
:
:
move
(
other
.
standardMFFunctionRegistry
)
;
customMFFunctionRegistry
=
other
.
customMFFunctionRegistry
;
dataModel
=
std
:
:
move
(
other
.
dataModel
)
;
normalizedInput
=
std
:
:
move
(
other
.
normalizedInput
)
;
signalErrors
=
other
.
signalErrors
;
errors
=
other
.
errors
;
other
.
errors
=
nullptr
;
return
*
this
;
}
const
MFDataModel
&
MessageFormatter
:
:
getDataModel
(
)
const
{
return
dataModel
;
}
UnicodeString
MessageFormatter
:
:
getPattern
(
)
const
{
UnicodeString
result
;
Serializer
serializer
(
getDataModel
(
)
result
)
;
serializer
.
serialize
(
)
;
return
result
;
}
const
MFFunctionRegistry
&
MessageFormatter
:
:
getCustomMFFunctionRegistry
(
)
const
{
U_ASSERT
(
hasCustomMFFunctionRegistry
(
)
)
;
return
*
customMFFunctionRegistry
;
}
MessageFormatter
:
:
~
MessageFormatter
(
)
{
cleanup
(
)
;
}
Selector
*
MessageFormatter
:
:
getSelector
(
MessageContext
&
context
const
FunctionName
&
functionName
UErrorCode
&
status
)
const
{
NULL_ON_ERROR
(
status
)
;
U_ASSERT
(
isSelector
(
functionName
)
)
;
const
SelectorFactory
*
selectorFactory
=
lookupSelectorFactory
(
context
functionName
status
)
;
NULL_ON_ERROR
(
status
)
;
if
(
selectorFactory
=
=
nullptr
)
{
status
=
U_MEMORY_ALLOCATION_ERROR
;
return
nullptr
;
}
auto
result
=
selectorFactory
-
>
createSelector
(
getLocale
(
)
status
)
;
NULL_ON_ERROR
(
status
)
;
return
result
;
}
Formatter
*
MessageFormatter
:
:
getFormatter
(
const
FunctionName
&
functionName
UErrorCode
&
status
)
const
{
NULL_ON_ERROR
(
status
)
;
FormatterFactory
*
formatterFactory
=
lookupFormatterFactory
(
functionName
status
)
;
NULL_ON_ERROR
(
status
)
;
U_ASSERT
(
formatterFactory
!
=
nullptr
)
;
Formatter
*
formatter
=
formatterFactory
-
>
createFormatter
(
locale
status
)
;
NULL_ON_ERROR
(
status
)
;
if
(
formatter
=
=
nullptr
)
{
status
=
U_MEMORY_ALLOCATION_ERROR
;
return
nullptr
;
}
return
formatter
;
}
bool
MessageFormatter
:
:
getDefaultFormatterNameByType
(
const
UnicodeString
&
type
FunctionName
&
name
)
const
{
U_ASSERT
(
hasCustomMFFunctionRegistry
(
)
)
;
const
MFFunctionRegistry
&
reg
=
getCustomMFFunctionRegistry
(
)
;
return
reg
.
getDefaultFormatterNameByType
(
type
name
)
;
}
bool
MessageFormatter
:
:
isBuiltInSelector
(
const
FunctionName
&
functionName
)
const
{
return
standardMFFunctionRegistry
.
hasSelector
(
functionName
)
;
}
bool
MessageFormatter
:
:
isBuiltInFormatter
(
const
FunctionName
&
functionName
)
const
{
return
standardMFFunctionRegistry
.
hasFormatter
(
functionName
)
;
}
const
SelectorFactory
*
MessageFormatter
:
:
lookupSelectorFactory
(
MessageContext
&
context
const
FunctionName
&
functionName
UErrorCode
&
status
)
const
{
DynamicErrors
&
err
=
context
.
getErrors
(
)
;
if
(
isBuiltInSelector
(
functionName
)
)
{
return
standardMFFunctionRegistry
.
getSelector
(
functionName
)
;
}
if
(
isBuiltInFormatter
(
functionName
)
)
{
err
.
setSelectorError
(
functionName
status
)
;
return
nullptr
;
}
if
(
hasCustomMFFunctionRegistry
(
)
)
{
const
MFFunctionRegistry
&
customMFFunctionRegistry
=
getCustomMFFunctionRegistry
(
)
;
const
SelectorFactory
*
selectorFactory
=
customMFFunctionRegistry
.
getSelector
(
functionName
)
;
if
(
selectorFactory
!
=
nullptr
)
{
return
selectorFactory
;
}
if
(
customMFFunctionRegistry
.
getFormatter
(
functionName
)
!
=
nullptr
)
{
err
.
setSelectorError
(
functionName
status
)
;
return
nullptr
;
}
}
err
.
setUnknownFunction
(
functionName
status
)
;
return
nullptr
;
}
FormatterFactory
*
MessageFormatter
:
:
lookupFormatterFactory
(
const
FunctionName
&
functionName
UErrorCode
&
status
)
const
{
NULL_ON_ERROR
(
status
)
;
if
(
isBuiltInFormatter
(
functionName
)
)
{
return
standardMFFunctionRegistry
.
getFormatter
(
functionName
)
;
}
if
(
isBuiltInSelector
(
functionName
)
)
{
status
=
U_MF_FORMATTING_ERROR
;
return
nullptr
;
}
if
(
hasCustomMFFunctionRegistry
(
)
)
{
const
MFFunctionRegistry
&
customMFFunctionRegistry
=
getCustomMFFunctionRegistry
(
)
;
FormatterFactory
*
formatterFactory
=
customMFFunctionRegistry
.
getFormatter
(
functionName
)
;
if
(
formatterFactory
!
=
nullptr
)
{
return
formatterFactory
;
}
if
(
customMFFunctionRegistry
.
getSelector
(
functionName
)
!
=
nullptr
)
{
status
=
U_MF_FORMATTING_ERROR
;
return
nullptr
;
}
}
status
=
U_MF_UNKNOWN_FUNCTION_ERROR
;
return
nullptr
;
}
bool
MessageFormatter
:
:
isCustomFormatter
(
const
FunctionName
&
fn
)
const
{
return
hasCustomMFFunctionRegistry
(
)
&
&
getCustomMFFunctionRegistry
(
)
.
getFormatter
(
fn
)
!
=
nullptr
;
}
bool
MessageFormatter
:
:
isCustomSelector
(
const
FunctionName
&
fn
)
const
{
return
hasCustomMFFunctionRegistry
(
)
&
&
getCustomMFFunctionRegistry
(
)
.
getSelector
(
fn
)
!
=
nullptr
;
}
}
U_NAMESPACE_END
#
endif
#
endif
