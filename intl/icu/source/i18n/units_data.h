#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
ifndef
__UNITS_DATA_H__
#
define
__UNITS_DATA_H__
#
include
<
limits
>
#
include
"
charstr
.
h
"
#
include
"
cmemory
.
h
"
#
include
"
unicode
/
stringpiece
.
h
"
#
include
"
unicode
/
uobject
.
h
"
U_NAMESPACE_BEGIN
namespace
units
{
class
U_I18N_API
ConversionRateInfo
:
public
UMemory
{
public
:
ConversionRateInfo
(
)
{
}
ConversionRateInfo
(
StringPiece
sourceUnit
StringPiece
baseUnit
StringPiece
factor
StringPiece
offset
UErrorCode
&
status
)
:
sourceUnit
(
)
baseUnit
(
)
factor
(
)
offset
(
)
specialMappingName
(
)
{
this
-
>
sourceUnit
.
append
(
sourceUnit
status
)
;
this
-
>
baseUnit
.
append
(
baseUnit
status
)
;
this
-
>
factor
.
append
(
factor
status
)
;
this
-
>
offset
.
append
(
offset
status
)
;
}
CharString
sourceUnit
;
CharString
baseUnit
;
CharString
factor
;
CharString
offset
;
CharString
specialMappingName
;
CharString
systems
;
}
;
}
#
if
U_PF_WINDOWS
<
=
U_PLATFORM
&
&
U_PLATFORM
<
=
U_PF_CYGWIN
template
class
U_I18N_API
MaybeStackArray
<
units
:
:
ConversionRateInfo
*
8
>
;
template
class
U_I18N_API
MemoryPool
<
units
:
:
ConversionRateInfo
8
>
;
template
class
U_I18N_API
MaybeStackVector
<
units
:
:
ConversionRateInfo
8
>
;
#
endif
namespace
units
{
void
U_I18N_API
getAllConversionRates
(
MaybeStackVector
<
ConversionRateInfo
>
&
result
UErrorCode
&
status
)
;
class
U_I18N_API
ConversionRates
{
public
:
ConversionRates
(
UErrorCode
&
status
)
{
getAllConversionRates
(
conversionInfo_
status
)
;
}
const
ConversionRateInfo
*
extractConversionInfo
(
StringPiece
source
UErrorCode
&
status
)
const
;
private
:
MaybeStackVector
<
ConversionRateInfo
>
conversionInfo_
;
}
;
struct
U_I18N_API
UnitPreference
:
public
UMemory
{
UnitPreference
(
)
:
geq
(
1
.
0
)
{
}
CharString
unit
;
double
geq
;
UnicodeString
skeleton
;
UnitPreference
(
const
UnitPreference
&
other
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
this
-
>
unit
.
append
(
other
.
unit
status
)
;
this
-
>
geq
=
other
.
geq
;
this
-
>
skeleton
=
other
.
skeleton
;
}
}
;
class
U_I18N_API
UnitPreferenceMetadata
:
public
UMemory
{
public
:
UnitPreferenceMetadata
(
)
{
}
UnitPreferenceMetadata
(
StringPiece
category
StringPiece
usage
StringPiece
region
int32_t
prefsOffset
int32_t
prefsCount
UErrorCode
&
status
)
;
CharString
category
;
CharString
usage
;
CharString
region
;
int32_t
prefsOffset
;
int32_t
prefsCount
;
int32_t
compareTo
(
const
UnitPreferenceMetadata
&
other
)
const
;
int32_t
compareTo
(
const
UnitPreferenceMetadata
&
other
bool
*
foundCategory
bool
*
foundUsage
bool
*
foundRegion
)
const
;
}
;
}
#
if
U_PF_WINDOWS
<
=
U_PLATFORM
&
&
U_PLATFORM
<
=
U_PF_CYGWIN
template
class
U_I18N_API
MaybeStackArray
<
units
:
:
UnitPreferenceMetadata
*
8
>
;
template
class
U_I18N_API
MemoryPool
<
units
:
:
UnitPreferenceMetadata
8
>
;
template
class
U_I18N_API
MaybeStackVector
<
units
:
:
UnitPreferenceMetadata
8
>
;
template
class
U_I18N_API
MaybeStackArray
<
units
:
:
UnitPreference
*
8
>
;
template
class
U_I18N_API
MemoryPool
<
units
:
:
UnitPreference
8
>
;
template
class
U_I18N_API
MaybeStackVector
<
units
:
:
UnitPreference
8
>
;
#
endif
namespace
units
{
class
U_I18N_API
UnitPreferences
{
public
:
UnitPreferences
(
UErrorCode
&
status
)
;
MaybeStackVector
<
UnitPreference
>
getPreferencesFor
(
StringPiece
category
StringPiece
usage
const
Locale
&
locale
UErrorCode
&
status
)
const
;
protected
:
MaybeStackVector
<
UnitPreferenceMetadata
>
metadata_
;
MaybeStackVector
<
UnitPreference
>
unitPrefs_
;
}
;
}
U_NAMESPACE_END
#
endif
#
endif
