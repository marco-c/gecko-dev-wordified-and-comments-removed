#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
ifndef
__UNITS_CONVERTER_H__
#
define
__UNITS_CONVERTER_H__
#
include
"
cmemory
.
h
"
#
include
"
measunit_impl
.
h
"
#
include
"
unicode
/
errorcode
.
h
"
#
include
"
unicode
/
stringpiece
.
h
"
#
include
"
unicode
/
uobject
.
h
"
#
include
"
units_converter
.
h
"
#
include
"
units_data
.
h
"
U_NAMESPACE_BEGIN
namespace
units
{
enum
Constants
{
CONSTANT_FT2M
CONSTANT_PI
CONSTANT_GRAVITY
CONSTANT_G
CONSTANT_GAL_IMP2M3
CONSTANT_LB2KG
CONSTANTS_COUNT
}
;
static
const
double
constantsValues
[
CONSTANTS_COUNT
]
=
{
0
.
3048
411557987
.
0
/
131002976
.
0
9
.
80665
6
.
67408E
-
11
0
.
00454609
0
.
45359237
}
;
typedef
enum
Signum
{
NEGATIVE
=
-
1
POSITIVE
=
1
}
Signum
;
struct
U_I18N_API
Factor
{
double
factorNum
=
1
;
double
factorDen
=
1
;
double
offset
=
0
;
bool
reciprocal
=
false
;
int32_t
constants
[
CONSTANTS_COUNT
]
=
{
}
;
void
multiplyBy
(
const
Factor
&
rhs
)
;
void
divideBy
(
const
Factor
&
rhs
)
;
void
power
(
int32_t
power
)
;
void
flip
(
)
;
void
applySiPrefix
(
UMeasureSIPrefix
siPrefix
)
;
void
substituteConstants
(
)
;
}
;
void
U_I18N_API
addSingleFactorConstant
(
StringPiece
baseStr
int32_t
power
Signum
sigNum
Factor
&
factor
UErrorCode
&
status
)
;
struct
U_I18N_API
ConversionRate
:
public
UMemory
{
const
MeasureUnitImpl
source
;
const
MeasureUnitImpl
target
;
double
factorNum
=
1
;
double
factorDen
=
1
;
double
sourceOffset
=
0
;
double
targetOffset
=
0
;
bool
reciprocal
=
false
;
ConversionRate
(
MeasureUnitImpl
&
&
source
MeasureUnitImpl
&
&
target
)
:
source
(
std
:
:
move
(
source
)
)
target
(
std
:
:
move
(
target
)
)
{
}
}
;
enum
Convertibility
{
RECIPROCAL
CONVERTIBLE
UNCONVERTIBLE
}
;
MeasureUnitImpl
U_I18N_API
extractCompoundBaseUnit
(
const
MeasureUnitImpl
&
source
const
ConversionRates
&
conversionRates
UErrorCode
&
status
)
;
Convertibility
U_I18N_API
extractConvertibility
(
const
MeasureUnitImpl
&
source
const
MeasureUnitImpl
&
target
const
ConversionRates
&
conversionRates
UErrorCode
&
status
)
;
class
U_I18N_API
UnitConverter
:
public
UMemory
{
public
:
UnitConverter
(
const
MeasureUnitImpl
&
source
const
MeasureUnitImpl
&
target
const
ConversionRates
&
ratesInfo
UErrorCode
&
status
)
;
double
convert
(
double
inputValue
)
const
;
double
convertInverse
(
double
inputValue
)
const
;
private
:
ConversionRate
conversionRate_
;
}
;
}
U_NAMESPACE_END
#
endif
#
endif
