#
include
"
chnsecal
.
h
"
#
include
"
dangical
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
astro
.
h
"
#
include
"
gregoimp
.
h
"
#
include
"
uassert
.
h
"
#
include
"
ucln_in
.
h
"
#
include
"
umutex
.
h
"
#
include
"
unicode
/
rbtz
.
h
"
#
include
"
unicode
/
tzrule
.
h
"
static
icu
:
:
CalendarCache
*
gWinterSolsticeCache
=
nullptr
;
static
icu
:
:
CalendarCache
*
gNewYearCache
=
nullptr
;
static
icu
:
:
TimeZone
*
gAstronomerTimeZone
=
nullptr
;
static
icu
:
:
UInitOnce
gAstronomerTimeZoneInitOnce
{
}
;
static
const
int32_t
DANGI_EPOCH_YEAR
=
-
2332
;
U_CDECL_BEGIN
static
UBool
calendar_dangi_cleanup
(
)
{
if
(
gWinterSolsticeCache
)
{
delete
gWinterSolsticeCache
;
gWinterSolsticeCache
=
nullptr
;
}
if
(
gNewYearCache
)
{
delete
gNewYearCache
;
gNewYearCache
=
nullptr
;
}
if
(
gAstronomerTimeZone
)
{
delete
gAstronomerTimeZone
;
gAstronomerTimeZone
=
nullptr
;
}
gAstronomerTimeZoneInitOnce
.
reset
(
)
;
return
true
;
}
U_CDECL_END
U_NAMESPACE_BEGIN
const
TimeZone
*
getAstronomerTimeZone
(
UErrorCode
&
status
)
;
DangiCalendar
:
:
DangiCalendar
(
const
Locale
&
aLocale
UErrorCode
&
success
)
:
ChineseCalendar
(
aLocale
success
)
{
}
DangiCalendar
:
:
DangiCalendar
(
const
DangiCalendar
&
other
)
:
ChineseCalendar
(
other
)
{
}
DangiCalendar
:
:
~
DangiCalendar
(
)
{
}
DangiCalendar
*
DangiCalendar
:
:
clone
(
)
const
{
return
new
DangiCalendar
(
*
this
)
;
}
const
char
*
DangiCalendar
:
:
getType
(
)
const
{
return
"
dangi
"
;
}
static
void
U_CALLCONV
initAstronomerTimeZone
(
UErrorCode
&
status
)
{
U_ASSERT
(
gAstronomerTimeZone
=
=
nullptr
)
;
const
UDate
millis1897
[
]
=
{
static_cast
<
UDate
>
(
(
1897
-
1970
)
*
365
*
kOneDay
)
}
;
const
UDate
millis1898
[
]
=
{
static_cast
<
UDate
>
(
(
1898
-
1970
)
*
365
*
kOneDay
)
}
;
const
UDate
millis1912
[
]
=
{
static_cast
<
UDate
>
(
(
1912
-
1970
)
*
365
*
kOneDay
)
}
;
LocalPointer
<
InitialTimeZoneRule
>
initialTimeZone
(
new
InitialTimeZoneRule
(
UnicodeString
(
u
"
GMT
+
8
"
)
8
*
kOneHour
0
)
status
)
;
LocalPointer
<
TimeZoneRule
>
rule1897
(
new
TimeArrayTimeZoneRule
(
UnicodeString
(
u
"
Korean
1897
"
)
7
*
kOneHour
0
millis1897
1
DateTimeRule
:
:
STANDARD_TIME
)
status
)
;
LocalPointer
<
TimeZoneRule
>
rule1898to1911
(
new
TimeArrayTimeZoneRule
(
UnicodeString
(
u
"
Korean
1898
-
1911
"
)
8
*
kOneHour
0
millis1898
1
DateTimeRule
:
:
STANDARD_TIME
)
status
)
;
LocalPointer
<
TimeZoneRule
>
ruleFrom1912
(
new
TimeArrayTimeZoneRule
(
UnicodeString
(
u
"
Korean
1912
-
"
)
9
*
kOneHour
0
millis1912
1
DateTimeRule
:
:
STANDARD_TIME
)
status
)
;
LocalPointer
<
RuleBasedTimeZone
>
zone
(
new
RuleBasedTimeZone
(
UnicodeString
(
u
"
KOREA_ZONE
"
)
initialTimeZone
.
orphan
(
)
)
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
;
}
zone
-
>
addTransitionRule
(
rule1897
.
orphan
(
)
status
)
;
zone
-
>
addTransitionRule
(
rule1898to1911
.
orphan
(
)
status
)
;
zone
-
>
addTransitionRule
(
ruleFrom1912
.
orphan
(
)
status
)
;
zone
-
>
complete
(
status
)
;
if
(
U_SUCCESS
(
status
)
)
{
gAstronomerTimeZone
=
zone
.
orphan
(
)
;
}
ucln_i18n_registerCleanup
(
UCLN_I18N_DANGI_CALENDAR
calendar_dangi_cleanup
)
;
}
const
TimeZone
*
getAstronomerTimeZone
(
UErrorCode
&
status
)
{
umtx_initOnce
(
gAstronomerTimeZoneInitOnce
&
initAstronomerTimeZone
status
)
;
return
gAstronomerTimeZone
;
}
constexpr
uint32_t
kDangiRelatedYearDiff
=
-
2333
;
int32_t
DangiCalendar
:
:
getRelatedYear
(
UErrorCode
&
status
)
const
{
int32_t
year
=
get
(
UCAL_EXTENDED_YEAR
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
0
;
}
if
(
uprv_add32_overflow
(
year
kDangiRelatedYearDiff
&
year
)
)
{
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
0
;
}
return
year
;
}
void
DangiCalendar
:
:
setRelatedYear
(
int32_t
year
)
{
set
(
UCAL_EXTENDED_YEAR
year
-
kDangiRelatedYearDiff
)
;
}
ChineseCalendar
:
:
Setting
DangiCalendar
:
:
getSetting
(
UErrorCode
&
status
)
const
{
return
{
DANGI_EPOCH_YEAR
getAstronomerTimeZone
(
status
)
&
gWinterSolsticeCache
&
gNewYearCache
}
;
}
UOBJECT_DEFINE_RTTI_IMPLEMENTATION
(
DangiCalendar
)
U_NAMESPACE_END
#
endif
