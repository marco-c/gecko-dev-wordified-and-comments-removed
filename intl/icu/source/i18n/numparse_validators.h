#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
ifndef
__SOURCE_NUMPARSE_VALIDATORS_H__
#
define
__SOURCE_NUMPARSE_VALIDATORS_H__
#
include
"
numparse_types
.
h
"
#
include
"
static_unicode_sets
.
h
"
U_NAMESPACE_BEGIN
namespace
numparse
{
namespace
impl
{
class
ValidationMatcher
:
public
NumberParseMatcher
{
public
:
bool
match
(
StringSegment
&
ParsedNumber
&
UErrorCode
&
)
const
U_OVERRIDE
{
return
false
;
}
bool
smokeTest
(
const
StringSegment
&
)
const
U_OVERRIDE
{
return
false
;
}
void
postProcess
(
ParsedNumber
&
result
)
const
U_OVERRIDE
=
0
;
}
;
class
RequireAffixValidator
:
public
ValidationMatcher
public
UMemory
{
public
:
void
postProcess
(
ParsedNumber
&
result
)
const
U_OVERRIDE
;
UnicodeString
toString
(
)
const
U_OVERRIDE
;
}
;
class
RequireCurrencyValidator
:
public
ValidationMatcher
public
UMemory
{
public
:
void
postProcess
(
ParsedNumber
&
result
)
const
U_OVERRIDE
;
UnicodeString
toString
(
)
const
U_OVERRIDE
;
}
;
class
RequireDecimalSeparatorValidator
:
public
ValidationMatcher
public
UMemory
{
public
:
RequireDecimalSeparatorValidator
(
)
=
default
;
RequireDecimalSeparatorValidator
(
bool
patternHasDecimalSeparator
)
;
void
postProcess
(
ParsedNumber
&
result
)
const
U_OVERRIDE
;
UnicodeString
toString
(
)
const
U_OVERRIDE
;
private
:
bool
fPatternHasDecimalSeparator
;
}
;
class
RequireNumberValidator
:
public
ValidationMatcher
public
UMemory
{
public
:
void
postProcess
(
ParsedNumber
&
result
)
const
U_OVERRIDE
;
UnicodeString
toString
(
)
const
U_OVERRIDE
;
}
;
class
MultiplierParseHandler
:
public
ValidationMatcher
public
UMemory
{
public
:
MultiplierParseHandler
(
)
=
default
;
MultiplierParseHandler
(
:
:
icu
:
:
number
:
:
Scale
multiplier
)
;
void
postProcess
(
ParsedNumber
&
result
)
const
U_OVERRIDE
;
UnicodeString
toString
(
)
const
U_OVERRIDE
;
private
:
:
:
icu
:
:
number
:
:
Scale
fMultiplier
;
}
;
}
}
U_NAMESPACE_END
#
endif
#
endif
