#
ifndef
VALUEFORMATTER_H
#
define
VALUEFORMATTER_H
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
uobject
.
h
"
#
include
"
unicode
/
utypes
.
h
"
U_NAMESPACE_BEGIN
class
UnicodeString
;
class
DigitList
;
class
FieldPositionHandler
;
class
DigitGrouping
;
class
PluralRules
;
class
FixedPrecision
;
class
DigitFormatter
;
class
DigitFormatterOptions
;
class
ScientificPrecision
;
class
SciFormatterOptions
;
class
FixedDecimal
;
class
VisibleDigitsWithExponent
;
class
U_I18N_API
ValueFormatter
:
public
UObject
{
public
:
ValueFormatter
(
)
:
fType
(
kFormatTypeCount
)
{
}
virtual
~
ValueFormatter
(
)
;
DigitList
&
round
(
DigitList
&
value
UErrorCode
&
status
)
const
;
UBool
isFastFormattable
(
int32_t
value
)
const
;
VisibleDigitsWithExponent
&
toVisibleDigitsWithExponent
(
int64_t
value
VisibleDigitsWithExponent
&
digits
UErrorCode
&
status
)
const
;
VisibleDigitsWithExponent
&
toVisibleDigitsWithExponent
(
DigitList
&
value
VisibleDigitsWithExponent
&
digits
UErrorCode
&
status
)
const
;
UnicodeString
&
format
(
const
VisibleDigitsWithExponent
&
positiveValue
FieldPositionHandler
&
handler
UnicodeString
&
appendTo
)
const
;
UnicodeString
&
formatInt32
(
int32_t
positiveValue
FieldPositionHandler
&
handler
UnicodeString
&
appendTo
)
const
;
int32_t
countChar32
(
const
VisibleDigitsWithExponent
&
positiveValue
)
const
;
void
prepareFixedDecimalFormatting
(
const
DigitFormatter
&
formatter
const
DigitGrouping
&
grouping
const
FixedPrecision
&
precision
const
DigitFormatterOptions
&
options
)
;
void
prepareScientificFormatting
(
const
DigitFormatter
&
formatter
const
ScientificPrecision
&
precision
const
SciFormatterOptions
&
options
)
;
private
:
ValueFormatter
(
const
ValueFormatter
&
)
;
ValueFormatter
&
operator
=
(
const
ValueFormatter
&
)
;
enum
FormatType
{
kFixedDecimal
kScientificNotation
kFormatTypeCount
}
;
FormatType
fType
;
const
DigitFormatter
*
fDigitFormatter
;
const
FixedPrecision
*
fFixedPrecision
;
const
DigitFormatterOptions
*
fFixedOptions
;
const
DigitGrouping
*
fGrouping
;
const
ScientificPrecision
*
fScientificPrecision
;
const
SciFormatterOptions
*
fScientificOptions
;
}
;
U_NAMESPACE_END
#
endif
#
endif
