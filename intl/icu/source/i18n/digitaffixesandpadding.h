#
ifndef
__DIGITAFFIXESANDPADDING_H__
#
define
__DIGITAFFIXESANDPADDING_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
uobject
.
h
"
#
include
"
pluralaffix
.
h
"
U_NAMESPACE_BEGIN
class
DigitList
;
class
ValueFormatter
;
class
UnicodeString
;
class
FieldPositionHandler
;
class
PluralRules
;
class
VisibleDigitsWithExponent
;
class
U_I18N_API
DigitAffixesAndPadding
:
public
UMemory
{
public
:
enum
EPadPosition
{
kPadBeforePrefix
kPadAfterPrefix
kPadBeforeSuffix
kPadAfterSuffix
}
;
PluralAffix
fPositivePrefix
;
PluralAffix
fPositiveSuffix
;
PluralAffix
fNegativePrefix
;
PluralAffix
fNegativeSuffix
;
EPadPosition
fPadPosition
;
UChar32
fPadChar
;
int32_t
fWidth
;
DigitAffixesAndPadding
(
)
:
fPadPosition
(
kPadBeforePrefix
)
fPadChar
(
0x2a
)
fWidth
(
0
)
{
}
UBool
equals
(
const
DigitAffixesAndPadding
&
rhs
)
const
{
return
(
fPositivePrefix
.
equals
(
rhs
.
fPositivePrefix
)
&
&
fPositiveSuffix
.
equals
(
rhs
.
fPositiveSuffix
)
&
&
fNegativePrefix
.
equals
(
rhs
.
fNegativePrefix
)
&
&
fNegativeSuffix
.
equals
(
rhs
.
fNegativeSuffix
)
&
&
fPadPosition
=
=
rhs
.
fPadPosition
&
&
fWidth
=
=
rhs
.
fWidth
&
&
fPadChar
=
=
rhs
.
fPadChar
)
;
}
UBool
needsPluralRules
(
)
const
;
UnicodeString
&
format
(
const
VisibleDigitsWithExponent
&
value
const
ValueFormatter
&
formatter
FieldPositionHandler
&
handler
const
PluralRules
*
optPluralRules
UnicodeString
&
appendTo
UErrorCode
&
status
)
const
;
UnicodeString
&
format
(
DigitList
&
value
const
ValueFormatter
&
formatter
FieldPositionHandler
&
handler
const
PluralRules
*
optPluralRules
UnicodeString
&
appendTo
UErrorCode
&
status
)
const
;
UnicodeString
&
formatInt32
(
int32_t
value
const
ValueFormatter
&
formatter
FieldPositionHandler
&
handler
const
PluralRules
*
optPluralRules
UnicodeString
&
appendTo
UErrorCode
&
status
)
const
;
private
:
UnicodeString
&
appendPadding
(
int32_t
paddingCount
UnicodeString
&
appendTo
)
const
;
}
;
U_NAMESPACE_END
#
endif
#
endif
