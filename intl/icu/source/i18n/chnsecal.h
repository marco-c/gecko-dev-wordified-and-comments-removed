#
ifndef
CHNSECAL_H
#
define
CHNSECAL_H
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
calendar
.
h
"
#
include
"
unicode
/
timezone
.
h
"
U_NAMESPACE_BEGIN
class
U_I18N_API
ChineseCalendar
:
public
Calendar
{
public
:
ChineseCalendar
(
const
Locale
&
aLocale
UErrorCode
&
success
)
;
virtual
bool
inTemporalLeapYear
(
UErrorCode
&
status
)
const
override
;
virtual
const
char
*
getTemporalMonthCode
(
UErrorCode
&
status
)
const
override
;
virtual
void
setTemporalMonthCode
(
const
char
*
code
UErrorCode
&
status
)
override
;
protected
:
ChineseCalendar
(
const
Locale
&
aLocale
int32_t
epochYear
const
TimeZone
*
zoneAstroCalc
UErrorCode
&
success
)
;
public
:
ChineseCalendar
(
const
ChineseCalendar
&
other
)
;
virtual
~
ChineseCalendar
(
)
;
virtual
ChineseCalendar
*
clone
(
)
const
override
;
private
:
UBool
hasLeapMonthBetweenWinterSolstices
;
int32_t
fEpochYear
;
const
TimeZone
*
fZoneAstroCalc
;
protected
:
virtual
int32_t
handleGetLimit
(
UCalendarDateFields
field
ELimitType
limitType
)
const
override
;
virtual
int32_t
handleGetMonthLength
(
int32_t
extendedYear
int32_t
month
)
const
override
;
virtual
int32_t
handleComputeMonthStart
(
int32_t
eyear
int32_t
month
UBool
useMonth
)
const
override
;
virtual
int32_t
handleGetExtendedYear
(
)
override
;
virtual
void
handleComputeFields
(
int32_t
julianDay
UErrorCode
&
status
)
override
;
virtual
const
UFieldResolutionTable
*
getFieldResolutionTable
(
)
const
override
;
public
:
virtual
void
add
(
UCalendarDateFields
field
int32_t
amount
UErrorCode
&
status
)
override
;
virtual
void
add
(
EDateFields
field
int32_t
amount
UErrorCode
&
status
)
override
;
virtual
void
roll
(
UCalendarDateFields
field
int32_t
amount
UErrorCode
&
status
)
override
;
virtual
void
roll
(
EDateFields
field
int32_t
amount
UErrorCode
&
status
)
override
;
virtual
int32_t
getRelatedYear
(
UErrorCode
&
status
)
const
override
;
virtual
void
setRelatedYear
(
int32_t
year
)
override
;
private
:
static
const
UFieldResolutionTable
CHINESE_DATE_PRECEDENCE
[
]
;
double
daysToMillis
(
double
days
)
const
;
double
millisToDays
(
double
millis
)
const
;
virtual
int32_t
winterSolstice
(
int32_t
gyear
)
const
;
virtual
int32_t
newMoonNear
(
double
days
UBool
after
)
const
;
virtual
int32_t
synodicMonthsBetween
(
int32_t
day1
int32_t
day2
)
const
;
virtual
int32_t
majorSolarTerm
(
int32_t
days
)
const
;
virtual
UBool
hasNoMajorSolarTerm
(
int32_t
newMoon
)
const
;
virtual
UBool
isLeapMonthBetween
(
int32_t
newMoon1
int32_t
newMoon2
)
const
;
virtual
void
computeChineseFields
(
int32_t
days
int32_t
gyear
int32_t
gmonth
UBool
setAllFields
)
;
virtual
int32_t
newYear
(
int32_t
gyear
)
const
;
virtual
void
offsetMonth
(
int32_t
newMoon
int32_t
dom
int32_t
delta
)
;
const
TimeZone
*
getChineseCalZoneAstroCalc
(
)
const
;
public
:
virtual
UClassID
getDynamicClassID
(
)
const
override
;
static
UClassID
U_EXPORT2
getStaticClassID
(
)
;
virtual
const
char
*
getType
(
)
const
override
;
protected
:
virtual
int32_t
internalGetMonth
(
int32_t
defaultValue
)
const
override
;
virtual
int32_t
internalGetMonth
(
)
const
override
;
protected
:
virtual
UBool
haveDefaultCentury
(
)
const
override
;
virtual
UDate
defaultCenturyStart
(
)
const
override
;
virtual
int32_t
defaultCenturyStartYear
(
)
const
override
;
private
:
UDate
internalGetDefaultCenturyStart
(
)
const
;
int32_t
internalGetDefaultCenturyStartYear
(
)
const
;
ChineseCalendar
(
)
=
delete
;
}
;
U_NAMESPACE_END
#
endif
#
endif
