#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
umutex
.
h
"
#
include
"
ethpccal
.
h
"
#
include
"
cecal
.
h
"
#
include
<
float
.
h
>
U_NAMESPACE_BEGIN
UOBJECT_DEFINE_RTTI_IMPLEMENTATION
(
EthiopicCalendar
)
UOBJECT_DEFINE_RTTI_IMPLEMENTATION
(
EthiopicAmeteAlemCalendar
)
static
const
int32_t
JD_EPOCH_OFFSET_AMETE_MIHRET
=
1723856
;
static
const
int32_t
AMETE_MIHRET_DELTA
=
5500
;
EthiopicCalendar
:
:
EthiopicCalendar
(
const
Locale
&
aLocale
UErrorCode
&
success
)
:
CECalendar
(
aLocale
success
)
{
}
EthiopicCalendar
:
:
~
EthiopicCalendar
(
)
{
}
EthiopicCalendar
*
EthiopicCalendar
:
:
clone
(
)
const
{
return
new
EthiopicCalendar
(
*
this
)
;
}
const
char
*
EthiopicCalendar
:
:
getType
(
)
const
{
return
"
ethiopic
"
;
}
int32_t
EthiopicCalendar
:
:
handleGetExtendedYear
(
)
{
if
(
newerField
(
UCAL_EXTENDED_YEAR
UCAL_YEAR
)
=
=
UCAL_EXTENDED_YEAR
)
{
return
internalGet
(
UCAL_EXTENDED_YEAR
1
)
;
}
if
(
internalGet
(
UCAL_ERA
AMETE_MIHRET
)
=
=
AMETE_MIHRET
)
{
return
internalGet
(
UCAL_YEAR
1
)
;
}
return
internalGet
(
UCAL_YEAR
1
)
-
AMETE_MIHRET_DELTA
;
}
void
EthiopicCalendar
:
:
handleComputeFields
(
int32_t
julianDay
UErrorCode
&
)
{
int32_t
eyear
month
day
;
jdToCE
(
julianDay
getJDEpochOffset
(
)
eyear
month
day
)
;
internalSet
(
UCAL_EXTENDED_YEAR
eyear
)
;
internalSet
(
UCAL_ERA
(
eyear
>
0
)
?
AMETE_MIHRET
:
AMETE_ALEM
)
;
internalSet
(
UCAL_YEAR
(
eyear
>
0
)
?
eyear
:
(
eyear
+
AMETE_MIHRET_DELTA
)
)
;
internalSet
(
UCAL_MONTH
month
)
;
internalSet
(
UCAL_ORDINAL_MONTH
month
)
;
internalSet
(
UCAL_DATE
day
)
;
internalSet
(
UCAL_DAY_OF_YEAR
(
30
*
month
)
+
day
)
;
}
constexpr
uint32_t
kEthiopicRelatedYearDiff
=
8
;
int32_t
EthiopicCalendar
:
:
getRelatedYear
(
UErrorCode
&
status
)
const
{
int32_t
year
=
get
(
UCAL_EXTENDED_YEAR
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
0
;
}
return
year
+
kEthiopicRelatedYearDiff
;
}
void
EthiopicCalendar
:
:
setRelatedYear
(
int32_t
year
)
{
set
(
UCAL_EXTENDED_YEAR
year
-
kEthiopicRelatedYearDiff
)
;
}
static
UDate
gSystemDefaultCenturyStart
=
DBL_MIN
;
static
int32_t
gSystemDefaultCenturyStartYear
=
-
1
;
static
icu
:
:
UInitOnce
gSystemDefaultCenturyInit
{
}
;
static
void
U_CALLCONV
initializeSystemDefaultCentury
(
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
EthiopicCalendar
calendar
(
Locale
(
"
calendar
=
ethiopic
"
)
status
)
;
if
(
U_SUCCESS
(
status
)
)
{
calendar
.
setTime
(
Calendar
:
:
getNow
(
)
status
)
;
calendar
.
add
(
UCAL_YEAR
-
80
status
)
;
gSystemDefaultCenturyStart
=
calendar
.
getTime
(
status
)
;
gSystemDefaultCenturyStartYear
=
calendar
.
get
(
UCAL_YEAR
status
)
;
}
}
UDate
EthiopicCalendar
:
:
defaultCenturyStart
(
)
const
{
umtx_initOnce
(
gSystemDefaultCenturyInit
&
initializeSystemDefaultCentury
)
;
return
gSystemDefaultCenturyStart
;
}
int32_t
EthiopicCalendar
:
:
defaultCenturyStartYear
(
)
const
{
umtx_initOnce
(
gSystemDefaultCenturyInit
&
initializeSystemDefaultCentury
)
;
return
gSystemDefaultCenturyStartYear
;
}
int32_t
EthiopicCalendar
:
:
getJDEpochOffset
(
)
const
{
return
JD_EPOCH_OFFSET_AMETE_MIHRET
;
}
#
if
0
int32_t
EthiopicCalendar
:
:
ethiopicToJD
(
int32_t
year
int32_t
month
int32_t
date
)
{
return
ceToJD
(
year
month
date
JD_EPOCH_OFFSET_AMETE_MIHRET
)
;
}
#
endif
EthiopicAmeteAlemCalendar
:
:
EthiopicAmeteAlemCalendar
(
const
Locale
&
aLocale
UErrorCode
&
success
)
:
EthiopicCalendar
(
aLocale
success
)
{
}
EthiopicAmeteAlemCalendar
:
:
~
EthiopicAmeteAlemCalendar
(
)
{
}
EthiopicAmeteAlemCalendar
*
EthiopicAmeteAlemCalendar
:
:
clone
(
)
const
{
return
new
EthiopicAmeteAlemCalendar
(
*
this
)
;
}
const
char
*
EthiopicAmeteAlemCalendar
:
:
getType
(
)
const
{
return
"
ethiopic
-
amete
-
alem
"
;
}
int32_t
EthiopicAmeteAlemCalendar
:
:
handleGetExtendedYear
(
)
{
if
(
newerField
(
UCAL_EXTENDED_YEAR
UCAL_YEAR
)
=
=
UCAL_EXTENDED_YEAR
)
{
return
internalGet
(
UCAL_EXTENDED_YEAR
1
)
;
}
return
internalGet
(
UCAL_YEAR
1
+
AMETE_MIHRET_DELTA
)
-
AMETE_MIHRET_DELTA
;
}
void
EthiopicAmeteAlemCalendar
:
:
handleComputeFields
(
int32_t
julianDay
UErrorCode
&
)
{
int32_t
eyear
month
day
;
jdToCE
(
julianDay
getJDEpochOffset
(
)
eyear
month
day
)
;
internalSet
(
UCAL_EXTENDED_YEAR
eyear
)
;
internalSet
(
UCAL_ERA
AMETE_ALEM
)
;
internalSet
(
UCAL_YEAR
eyear
+
AMETE_MIHRET_DELTA
)
;
internalSet
(
UCAL_MONTH
month
)
;
internalSet
(
UCAL_ORDINAL_MONTH
month
)
;
internalSet
(
UCAL_DATE
day
)
;
internalSet
(
UCAL_DAY_OF_YEAR
(
30
*
month
)
+
day
)
;
}
int32_t
EthiopicAmeteAlemCalendar
:
:
handleGetLimit
(
UCalendarDateFields
field
ELimitType
limitType
)
const
{
if
(
field
=
=
UCAL_ERA
)
{
return
0
;
}
return
EthiopicCalendar
:
:
handleGetLimit
(
field
limitType
)
;
}
constexpr
uint32_t
kEthiopicAmeteAlemRelatedYearDiff
=
-
5492
;
int32_t
EthiopicAmeteAlemCalendar
:
:
getRelatedYear
(
UErrorCode
&
status
)
const
{
int32_t
year
=
get
(
UCAL_EXTENDED_YEAR
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
0
;
}
return
year
+
kEthiopicAmeteAlemRelatedYearDiff
;
}
void
EthiopicAmeteAlemCalendar
:
:
setRelatedYear
(
int32_t
year
)
{
set
(
UCAL_EXTENDED_YEAR
year
-
kEthiopicAmeteAlemRelatedYearDiff
)
;
}
int32_t
EthiopicAmeteAlemCalendar
:
:
defaultCenturyStartYear
(
)
const
{
return
EthiopicCalendar
:
:
defaultCenturyStartYear
(
)
+
AMETE_MIHRET_DELTA
;
}
U_NAMESPACE_END
#
endif
