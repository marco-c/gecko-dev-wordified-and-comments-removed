#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
charstr
.
h
"
#
include
"
cmemory
.
h
"
#
include
"
cstring
.
h
"
#
include
"
measunit_impl
.
h
"
#
include
"
number_decimalquantity
.
h
"
#
include
"
number_roundingutils
.
h
"
#
include
"
resource
.
h
"
#
include
"
unicode
/
measure
.
h
"
#
include
"
units_data
.
h
"
#
include
"
units_router
.
h
"
#
include
<
cmath
>
U_NAMESPACE_BEGIN
namespace
units
{
using
number
:
:
Precision
;
using
number
:
:
impl
:
:
parseIncrementOption
;
Precision
UnitsRouter
:
:
parseSkeletonToPrecision
(
icu
:
:
UnicodeString
precisionSkeleton
UErrorCode
&
status
)
{
if
(
U_FAILURE
(
status
)
)
{
return
{
}
;
}
constexpr
int32_t
kSkelPrefixLen
=
20
;
if
(
!
precisionSkeleton
.
startsWith
(
UNICODE_STRING_SIMPLE
(
"
precision
-
increment
/
"
)
)
)
{
status
=
U_INVALID_FORMAT_ERROR
;
return
{
}
;
}
U_ASSERT
(
precisionSkeleton
[
kSkelPrefixLen
-
1
]
=
=
u
'
/
'
)
;
StringSegment
segment
(
precisionSkeleton
false
)
;
segment
.
adjustOffset
(
kSkelPrefixLen
)
;
Precision
result
;
parseIncrementOption
(
segment
result
status
)
;
return
result
;
}
UnitsRouter
:
:
UnitsRouter
(
StringPiece
inputUnitIdentifier
const
Locale
&
locale
StringPiece
usage
UErrorCode
&
status
)
{
this
-
>
init
(
MeasureUnit
:
:
forIdentifier
(
inputUnitIdentifier
status
)
locale
usage
status
)
;
}
UnitsRouter
:
:
UnitsRouter
(
const
MeasureUnit
&
inputUnit
const
Locale
&
locale
StringPiece
usage
UErrorCode
&
status
)
{
this
-
>
init
(
std
:
:
move
(
inputUnit
)
locale
usage
status
)
;
}
void
UnitsRouter
:
:
init
(
const
MeasureUnit
&
inputUnit
const
Locale
&
locale
StringPiece
usage
UErrorCode
&
status
)
{
if
(
U_FAILURE
(
status
)
)
{
return
;
}
ConversionRates
conversionRates
(
status
)
;
UnitPreferences
prefs
(
status
)
;
MeasureUnitImpl
inputUnitImpl
=
MeasureUnitImpl
:
:
forMeasureUnitMaybeCopy
(
inputUnit
status
)
;
MeasureUnitImpl
baseUnitImpl
=
(
extractCompoundBaseUnit
(
inputUnitImpl
conversionRates
status
)
)
;
CharString
category
=
getUnitQuantity
(
baseUnitImpl
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
;
}
const
MaybeStackVector
<
UnitPreference
>
unitPrefs
=
prefs
.
getPreferencesFor
(
category
.
toStringPiece
(
)
usage
locale
status
)
;
for
(
int32_t
i
=
0
n
=
unitPrefs
.
length
(
)
;
i
<
n
;
+
+
i
)
{
U_ASSERT
(
unitPrefs
[
i
]
!
=
nullptr
)
;
const
auto
preference
=
unitPrefs
[
i
]
;
MeasureUnitImpl
complexTargetUnitImpl
=
MeasureUnitImpl
:
:
forIdentifier
(
preference
-
>
unit
.
data
(
)
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
;
}
UnicodeString
precision
=
preference
-
>
skeleton
;
if
(
!
precision
.
isEmpty
(
)
&
&
!
precision
.
startsWith
(
u
"
precision
-
increment
"
19
)
)
{
status
=
U_INTERNAL_PROGRAM_ERROR
;
return
;
}
outputUnits_
.
emplaceBackAndCheckErrorCode
(
status
complexTargetUnitImpl
.
copy
(
status
)
.
build
(
status
)
)
;
converterPreferences_
.
emplaceBackAndCheckErrorCode
(
status
inputUnitImpl
complexTargetUnitImpl
preference
-
>
geq
std
:
:
move
(
precision
)
conversionRates
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
;
}
}
}
RouteResult
UnitsRouter
:
:
route
(
double
quantity
icu
:
:
number
:
:
impl
:
:
RoundingImpl
*
rounder
UErrorCode
&
status
)
const
{
const
ConverterPreference
*
converterPreference
=
nullptr
;
for
(
int32_t
i
=
0
n
=
converterPreferences_
.
length
(
)
;
i
<
n
;
i
+
+
)
{
converterPreference
=
converterPreferences_
[
i
]
;
if
(
converterPreference
-
>
converter
.
greaterThanOrEqual
(
std
:
:
abs
(
quantity
)
*
(
1
+
DBL_EPSILON
)
converterPreference
-
>
limit
)
)
{
break
;
}
}
U_ASSERT
(
converterPreference
!
=
nullptr
)
;
if
(
rounder
!
=
nullptr
&
&
rounder
-
>
fPrecision
.
isBogus
(
)
)
{
if
(
converterPreference
-
>
precision
.
length
(
)
>
0
)
{
rounder
-
>
fPrecision
=
parseSkeletonToPrecision
(
converterPreference
-
>
precision
status
)
;
}
else
{
rounder
-
>
fPrecision
=
Precision
:
:
integer
(
)
.
withMinDigits
(
2
)
;
}
}
return
RouteResult
(
converterPreference
-
>
converter
.
convert
(
quantity
rounder
status
)
converterPreference
-
>
targetUnit
.
copy
(
status
)
)
;
}
const
MaybeStackVector
<
MeasureUnit
>
*
UnitsRouter
:
:
getOutputUnits
(
)
const
{
return
&
outputUnits_
;
}
}
U_NAMESPACE_END
#
endif
