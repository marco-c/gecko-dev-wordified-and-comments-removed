#
ifndef
__PRECISION_H__
#
define
__PRECISION_H__
#
include
"
unicode
/
uobject
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
utypes
.
h
"
#
include
"
digitinterval
.
h
"
#
include
"
digitlst
.
h
"
#
include
"
significantdigitinterval
.
h
"
U_NAMESPACE_BEGIN
class
VisibleDigits
;
class
VisibleDigitsWithExponent
;
class
U_I18N_API
FixedPrecision
:
public
UMemory
{
public
:
DigitInterval
fMin
;
DigitInterval
fMax
;
SignificantDigitInterval
fSignificant
;
DigitList
fRoundingIncrement
;
UBool
fExactOnly
;
UBool
fFailIfOverMax
;
DecimalFormat
:
:
ERoundingMode
fRoundingMode
;
FixedPrecision
(
)
;
UBool
equals
(
const
FixedPrecision
&
rhs
)
const
{
return
(
fMin
.
equals
(
rhs
.
fMin
)
&
&
fMax
.
equals
(
rhs
.
fMax
)
&
&
fSignificant
.
equals
(
rhs
.
fSignificant
)
&
&
(
fRoundingIncrement
=
=
rhs
.
fRoundingIncrement
)
&
&
fExactOnly
=
=
rhs
.
fExactOnly
&
&
fFailIfOverMax
=
=
rhs
.
fFailIfOverMax
&
&
fRoundingMode
=
=
rhs
.
fRoundingMode
)
;
}
DigitList
&
round
(
DigitList
&
value
int32_t
exponent
UErrorCode
&
status
)
const
;
DigitInterval
&
getInterval
(
const
DigitList
&
roundedValue
DigitInterval
&
interval
)
const
;
UBool
isFastFormattable
(
)
const
;
VisibleDigits
&
initVisibleDigits
(
DigitList
&
value
VisibleDigits
&
digits
UErrorCode
&
status
)
const
;
VisibleDigits
&
initVisibleDigits
(
double
value
VisibleDigits
&
digits
UErrorCode
&
status
)
const
;
VisibleDigits
&
initVisibleDigits
(
int64_t
value
VisibleDigits
&
digits
UErrorCode
&
status
)
const
;
VisibleDigitsWithExponent
&
initVisibleDigitsWithExponent
(
DigitList
&
value
VisibleDigitsWithExponent
&
digits
UErrorCode
&
status
)
const
;
VisibleDigitsWithExponent
&
initVisibleDigitsWithExponent
(
double
value
VisibleDigitsWithExponent
&
digits
UErrorCode
&
status
)
const
;
VisibleDigitsWithExponent
&
initVisibleDigitsWithExponent
(
int64_t
value
VisibleDigitsWithExponent
&
digits
UErrorCode
&
status
)
const
;
private
:
UBool
initVisibleDigits
(
int64_t
mantissa
int32_t
exponent
VisibleDigits
&
digits
UErrorCode
&
status
)
const
;
UBool
isRoundingRequired
(
int32_t
upperExponent
int32_t
lowerExponent
)
const
;
DigitInterval
&
getIntervalForZero
(
DigitInterval
&
interval
)
const
;
DigitInterval
&
getInterval
(
int32_t
upperExponent
DigitInterval
&
interval
)
const
;
static
UBool
handleNonNumeric
(
DigitList
&
value
VisibleDigits
&
digits
)
;
friend
class
ScientificPrecision
;
}
;
class
U_I18N_API
ScientificPrecision
:
public
UMemory
{
public
:
FixedPrecision
fMantissa
;
int32_t
fMinExponentDigits
;
ScientificPrecision
(
)
;
DigitList
&
round
(
DigitList
&
value
UErrorCode
&
status
)
const
;
int32_t
toScientific
(
DigitList
&
value
)
const
;
UBool
equals
(
const
ScientificPrecision
&
rhs
)
const
{
return
fMantissa
.
equals
(
rhs
.
fMantissa
)
&
&
fMinExponentDigits
=
=
rhs
.
fMinExponentDigits
;
}
VisibleDigitsWithExponent
&
initVisibleDigitsWithExponent
(
DigitList
&
value
VisibleDigitsWithExponent
&
digits
UErrorCode
&
status
)
const
;
VisibleDigitsWithExponent
&
initVisibleDigitsWithExponent
(
double
value
VisibleDigitsWithExponent
&
digits
UErrorCode
&
status
)
const
;
VisibleDigitsWithExponent
&
initVisibleDigitsWithExponent
(
int64_t
value
VisibleDigitsWithExponent
&
digits
UErrorCode
&
status
)
const
;
private
:
int32_t
getMultiplier
(
)
const
;
}
;
U_NAMESPACE_END
#
endif
#
endif
