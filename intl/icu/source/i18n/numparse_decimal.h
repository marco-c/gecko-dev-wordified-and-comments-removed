#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
ifndef
__NUMPARSE_DECIMAL_H__
#
define
__NUMPARSE_DECIMAL_H__
#
include
"
unicode
/
uniset
.
h
"
#
include
"
numparse_types
.
h
"
U_NAMESPACE_BEGIN
namespace
numparse
:
:
impl
{
using
:
:
icu
:
:
number
:
:
impl
:
:
Grouper
;
class
DecimalMatcher
:
public
NumberParseMatcher
public
UMemory
{
public
:
DecimalMatcher
(
)
=
default
;
DecimalMatcher
(
const
DecimalFormatSymbols
&
symbols
const
Grouper
&
grouper
parse_flags_t
parseFlags
)
;
bool
match
(
StringSegment
&
segment
ParsedNumber
&
result
UErrorCode
&
status
)
const
override
;
bool
match
(
StringSegment
&
segment
ParsedNumber
&
result
int8_t
exponentSign
UErrorCode
&
status
)
const
;
bool
smokeTest
(
const
StringSegment
&
segment
)
const
override
;
UnicodeString
toString
(
)
const
override
;
private
:
bool
requireGroupingMatch
;
bool
groupingDisabled
;
bool
integerOnly
;
int16_t
grouping1
;
int16_t
grouping2
;
UnicodeString
groupingSeparator
;
UnicodeString
decimalSeparator
;
const
UnicodeSet
*
groupingUniSet
;
const
UnicodeSet
*
decimalUniSet
;
const
UnicodeSet
*
separatorSet
;
const
UnicodeSet
*
leadSet
;
LocalPointer
<
const
UnicodeSet
>
fLocalDecimalUniSet
;
LocalPointer
<
const
UnicodeSet
>
fLocalSeparatorSet
;
LocalArray
<
const
UnicodeString
>
fLocalDigitStrings
;
bool
validateGroup
(
int32_t
sepType
int32_t
count
bool
isPrimary
)
const
;
}
;
}
U_NAMESPACE_END
#
endif
#
endif
