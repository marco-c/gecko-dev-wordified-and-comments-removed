#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
&
&
!
UPRV_INCOMPLETE_CPP11_SUPPORT
#
ifndef
__NUMBER_AFFIXUTILS_H__
#
define
__NUMBER_AFFIXUTILS_H__
#
include
<
cstdint
>
#
include
"
number_types
.
h
"
#
include
"
unicode
/
stringpiece
.
h
"
#
include
"
unicode
/
unistr
.
h
"
#
include
"
number_stringbuilder
.
h
"
U_NAMESPACE_BEGIN
namespace
number
{
namespace
impl
{
enum
AffixPatternState
{
STATE_BASE
=
0
STATE_FIRST_QUOTE
=
1
STATE_INSIDE_QUOTE
=
2
STATE_AFTER_QUOTE
=
3
STATE_FIRST_CURR
=
4
STATE_SECOND_CURR
=
5
STATE_THIRD_CURR
=
6
STATE_FOURTH_CURR
=
7
STATE_FIFTH_CURR
=
8
STATE_OVERFLOW_CURR
=
9
}
;
struct
AffixTag
{
int32_t
offset
;
UChar32
codePoint
;
AffixPatternState
state
;
AffixPatternType
type
;
AffixTag
(
)
:
offset
(
0
)
state
(
STATE_BASE
)
{
}
AffixTag
(
int32_t
offset
)
:
offset
(
offset
)
{
}
AffixTag
(
int32_t
offset
UChar32
codePoint
AffixPatternState
state
AffixPatternType
type
)
:
offset
(
offset
)
codePoint
(
codePoint
)
state
(
state
)
type
(
type
)
{
}
}
;
class
U_I18N_API
SymbolProvider
{
public
:
virtual
~
SymbolProvider
(
)
=
default
;
virtual
UnicodeString
getSymbol
(
AffixPatternType
type
)
const
=
0
;
}
;
class
U_I18N_API
AffixUtils
{
public
:
static
int32_t
estimateLength
(
const
CharSequence
&
patternString
UErrorCode
&
status
)
;
static
UnicodeString
escape
(
const
CharSequence
&
input
)
;
static
Field
getFieldForType
(
AffixPatternType
type
)
;
static
int32_t
unescape
(
const
CharSequence
&
affixPattern
NumberStringBuilder
&
output
int32_t
position
const
SymbolProvider
&
provider
UErrorCode
&
status
)
;
static
int32_t
unescapedCodePointCount
(
const
CharSequence
&
affixPattern
const
SymbolProvider
&
provider
UErrorCode
&
status
)
;
static
bool
containsType
(
const
CharSequence
&
affixPattern
AffixPatternType
type
UErrorCode
&
status
)
;
static
bool
hasCurrencySymbols
(
const
CharSequence
&
affixPattern
UErrorCode
&
status
)
;
static
UnicodeString
replaceType
(
const
CharSequence
&
affixPattern
AffixPatternType
type
char16_t
replacementChar
UErrorCode
&
status
)
;
static
AffixTag
nextToken
(
AffixTag
tag
const
CharSequence
&
patternString
UErrorCode
&
status
)
;
static
bool
hasNext
(
const
AffixTag
&
tag
const
CharSequence
&
string
)
;
private
:
static
inline
AffixTag
makeTag
(
int32_t
offset
AffixPatternType
type
AffixPatternState
state
UChar32
cp
)
{
return
{
offset
cp
state
type
}
;
}
}
;
}
}
U_NAMESPACE_END
#
endif
#
endif
