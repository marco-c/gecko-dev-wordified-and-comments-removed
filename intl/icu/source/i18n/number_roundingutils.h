#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
&
&
!
UPRV_INCOMPLETE_CPP11_SUPPORT
#
ifndef
__NUMBER_ROUNDINGUTILS_H__
#
define
__NUMBER_ROUNDINGUTILS_H__
#
include
"
number_types
.
h
"
U_NAMESPACE_BEGIN
namespace
number
{
namespace
impl
{
namespace
roundingutils
{
enum
Section
{
SECTION_LOWER_EDGE
=
-
1
SECTION_UPPER_EDGE
=
-
2
SECTION_LOWER
=
1
SECTION_MIDPOINT
=
2
SECTION_UPPER
=
3
}
;
inline
bool
getRoundingDirection
(
bool
isEven
bool
isNegative
Section
section
RoundingMode
roundingMode
UErrorCode
&
status
)
{
switch
(
roundingMode
)
{
case
RoundingMode
:
:
UNUM_ROUND_UP
:
return
false
;
case
RoundingMode
:
:
UNUM_ROUND_DOWN
:
return
true
;
case
RoundingMode
:
:
UNUM_ROUND_CEILING
:
return
isNegative
;
case
RoundingMode
:
:
UNUM_ROUND_FLOOR
:
return
!
isNegative
;
case
RoundingMode
:
:
UNUM_ROUND_HALFUP
:
switch
(
section
)
{
case
SECTION_MIDPOINT
:
return
false
;
case
SECTION_LOWER
:
return
true
;
case
SECTION_UPPER
:
return
false
;
default
:
break
;
}
break
;
case
RoundingMode
:
:
UNUM_ROUND_HALFDOWN
:
switch
(
section
)
{
case
SECTION_MIDPOINT
:
return
true
;
case
SECTION_LOWER
:
return
true
;
case
SECTION_UPPER
:
return
false
;
default
:
break
;
}
break
;
case
RoundingMode
:
:
UNUM_ROUND_HALFEVEN
:
switch
(
section
)
{
case
SECTION_MIDPOINT
:
return
isEven
;
case
SECTION_LOWER
:
return
true
;
case
SECTION_UPPER
:
return
false
;
default
:
break
;
}
break
;
default
:
break
;
}
status
=
U_FORMAT_INEXACT_ERROR
;
return
false
;
}
inline
bool
roundsAtMidpoint
(
int
roundingMode
)
{
switch
(
roundingMode
)
{
case
RoundingMode
:
:
UNUM_ROUND_UP
:
case
RoundingMode
:
:
UNUM_ROUND_DOWN
:
case
RoundingMode
:
:
UNUM_ROUND_CEILING
:
case
RoundingMode
:
:
UNUM_ROUND_FLOOR
:
return
false
;
default
:
return
true
;
}
}
}
}
}
U_NAMESPACE_END
#
endif
#
endif
