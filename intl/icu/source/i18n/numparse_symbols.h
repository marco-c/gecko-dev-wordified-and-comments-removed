#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
ifndef
__NUMPARSE_SYMBOLS_H__
#
define
__NUMPARSE_SYMBOLS_H__
#
include
"
numparse_types
.
h
"
#
include
"
unicode
/
uniset
.
h
"
#
include
"
static_unicode_sets
.
h
"
U_NAMESPACE_BEGIN
namespace
numparse
{
namespace
impl
{
class
U_I18N_API
SymbolMatcher
:
public
NumberParseMatcher
public
UMemory
{
public
:
SymbolMatcher
(
)
=
default
;
const
UnicodeSet
*
getSet
(
)
const
;
bool
match
(
StringSegment
&
segment
ParsedNumber
&
result
UErrorCode
&
status
)
const
override
;
bool
smokeTest
(
const
StringSegment
&
segment
)
const
override
;
UnicodeString
toString
(
)
const
override
;
virtual
bool
isDisabled
(
const
ParsedNumber
&
result
)
const
=
0
;
virtual
void
accept
(
StringSegment
&
segment
ParsedNumber
&
result
)
const
=
0
;
protected
:
UnicodeString
fString
;
const
UnicodeSet
*
fUniSet
;
SymbolMatcher
(
const
UnicodeString
&
symbolString
unisets
:
:
Key
key
)
;
}
;
class
U_I18N_API
IgnorablesMatcher
:
public
SymbolMatcher
{
public
:
IgnorablesMatcher
(
)
=
default
;
IgnorablesMatcher
(
parse_flags_t
parseFlags
)
;
bool
isFlexible
(
)
const
override
;
UnicodeString
toString
(
)
const
override
;
protected
:
bool
isDisabled
(
const
ParsedNumber
&
result
)
const
override
;
void
accept
(
StringSegment
&
segment
ParsedNumber
&
result
)
const
override
;
}
;
class
InfinityMatcher
:
public
SymbolMatcher
{
public
:
InfinityMatcher
(
)
=
default
;
InfinityMatcher
(
const
DecimalFormatSymbols
&
dfs
)
;
protected
:
bool
isDisabled
(
const
ParsedNumber
&
result
)
const
override
;
void
accept
(
StringSegment
&
segment
ParsedNumber
&
result
)
const
override
;
}
;
class
U_I18N_API
MinusSignMatcher
:
public
SymbolMatcher
{
public
:
MinusSignMatcher
(
)
=
default
;
MinusSignMatcher
(
const
DecimalFormatSymbols
&
dfs
bool
allowTrailing
)
;
protected
:
bool
isDisabled
(
const
ParsedNumber
&
result
)
const
override
;
void
accept
(
StringSegment
&
segment
ParsedNumber
&
result
)
const
override
;
private
:
bool
fAllowTrailing
;
}
;
class
NanMatcher
:
public
SymbolMatcher
{
public
:
NanMatcher
(
)
=
default
;
NanMatcher
(
const
DecimalFormatSymbols
&
dfs
)
;
protected
:
bool
isDisabled
(
const
ParsedNumber
&
result
)
const
override
;
void
accept
(
StringSegment
&
segment
ParsedNumber
&
result
)
const
override
;
}
;
class
PaddingMatcher
:
public
SymbolMatcher
{
public
:
PaddingMatcher
(
)
=
default
;
PaddingMatcher
(
const
UnicodeString
&
padString
)
;
bool
isFlexible
(
)
const
override
;
protected
:
bool
isDisabled
(
const
ParsedNumber
&
result
)
const
override
;
void
accept
(
StringSegment
&
segment
ParsedNumber
&
result
)
const
override
;
}
;
class
U_I18N_API
PercentMatcher
:
public
SymbolMatcher
{
public
:
PercentMatcher
(
)
=
default
;
PercentMatcher
(
const
DecimalFormatSymbols
&
dfs
)
;
protected
:
bool
isDisabled
(
const
ParsedNumber
&
result
)
const
override
;
void
accept
(
StringSegment
&
segment
ParsedNumber
&
result
)
const
override
;
}
;
class
U_I18N_API
PermilleMatcher
:
public
SymbolMatcher
{
public
:
PermilleMatcher
(
)
=
default
;
PermilleMatcher
(
const
DecimalFormatSymbols
&
dfs
)
;
protected
:
bool
isDisabled
(
const
ParsedNumber
&
result
)
const
override
;
void
accept
(
StringSegment
&
segment
ParsedNumber
&
result
)
const
override
;
}
;
class
U_I18N_API
PlusSignMatcher
:
public
SymbolMatcher
{
public
:
PlusSignMatcher
(
)
=
default
;
PlusSignMatcher
(
const
DecimalFormatSymbols
&
dfs
bool
allowTrailing
)
;
protected
:
bool
isDisabled
(
const
ParsedNumber
&
result
)
const
override
;
void
accept
(
StringSegment
&
segment
ParsedNumber
&
result
)
const
override
;
private
:
bool
fAllowTrailing
;
}
;
}
}
U_NAMESPACE_END
#
endif
#
endif
