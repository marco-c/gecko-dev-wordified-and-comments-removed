#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
&
&
!
UPRV_INCOMPLETE_CPP11_SUPPORT
#
ifndef
__NUMBER_FORMATIMPL_H__
#
define
__NUMBER_FORMATIMPL_H__
#
include
"
number_types
.
h
"
#
include
"
number_stringbuilder
.
h
"
#
include
"
number_patternstring
.
h
"
#
include
"
number_utils
.
h
"
#
include
"
number_patternmodifier
.
h
"
#
include
"
number_longnames
.
h
"
#
include
"
number_compact
.
h
"
U_NAMESPACE_BEGIN
namespace
number
{
namespace
impl
{
class
NumberFormatterImpl
:
public
UMemory
{
public
:
static
NumberFormatterImpl
*
fromMacros
(
const
MacroProps
&
macros
UErrorCode
&
status
)
;
static
void
applyStatic
(
const
MacroProps
&
macros
DecimalQuantity
&
inValue
NumberStringBuilder
&
outString
UErrorCode
&
status
)
;
void
apply
(
DecimalQuantity
&
inValue
NumberStringBuilder
&
outString
UErrorCode
&
status
)
const
;
private
:
const
MicroPropsGenerator
*
fMicroPropsGenerator
=
nullptr
;
MicroProps
fMicros
;
LocalPointer
<
const
DecimalFormatSymbols
>
fSymbols
;
LocalPointer
<
const
PluralRules
>
fRules
;
LocalPointer
<
const
ParsedPatternInfo
>
fPatternInfo
;
LocalPointer
<
const
ScientificHandler
>
fScientificHandler
;
LocalPointer
<
const
MutablePatternModifier
>
fPatternModifier
;
LocalPointer
<
const
ImmutablePatternModifier
>
fImmutablePatternModifier
;
LocalPointer
<
const
LongNameHandler
>
fLongNameHandler
;
LocalPointer
<
const
CompactHandler
>
fCompactHandler
;
NumberFormatterImpl
(
const
MacroProps
&
macros
bool
safe
UErrorCode
&
status
)
;
void
applyUnsafe
(
DecimalQuantity
&
inValue
NumberStringBuilder
&
outString
UErrorCode
&
status
)
;
const
PluralRules
*
resolvePluralRules
(
const
PluralRules
*
rulesPtr
const
Locale
&
locale
UErrorCode
&
status
)
;
const
MicroPropsGenerator
*
macrosToMicroGenerator
(
const
MacroProps
&
macros
bool
safe
UErrorCode
&
status
)
;
static
int32_t
microsToString
(
const
MicroProps
&
micros
DecimalQuantity
&
quantity
NumberStringBuilder
&
string
UErrorCode
&
status
)
;
static
int32_t
writeNumber
(
const
MicroProps
&
micros
DecimalQuantity
&
quantity
NumberStringBuilder
&
string
UErrorCode
&
status
)
;
static
int32_t
writeIntegerDigits
(
const
MicroProps
&
micros
DecimalQuantity
&
quantity
NumberStringBuilder
&
string
UErrorCode
&
status
)
;
static
int32_t
writeFractionDigits
(
const
MicroProps
&
micros
DecimalQuantity
&
quantity
NumberStringBuilder
&
string
UErrorCode
&
status
)
;
}
;
}
}
U_NAMESPACE_END
#
endif
#
endif
