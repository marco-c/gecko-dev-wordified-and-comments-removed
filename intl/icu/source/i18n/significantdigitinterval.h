#
ifndef
__SIGNIFICANTDIGITINTERVAL_H__
#
define
__SIGNIFICANTDIGITINTERVAL_H__
#
include
"
unicode
/
uobject
.
h
"
#
include
"
unicode
/
utypes
.
h
"
U_NAMESPACE_BEGIN
class
U_I18N_API
SignificantDigitInterval
:
public
UMemory
{
public
:
SignificantDigitInterval
(
)
:
fMax
(
INT32_MAX
)
fMin
(
0
)
{
}
void
clear
(
)
{
fMin
=
0
;
fMax
=
INT32_MAX
;
}
UBool
equals
(
const
SignificantDigitInterval
&
rhs
)
const
{
return
(
(
fMax
=
=
rhs
.
fMax
)
&
&
(
fMin
=
=
rhs
.
fMin
)
)
;
}
void
setMax
(
int32_t
count
)
{
fMax
=
count
<
=
0
?
INT32_MAX
:
count
;
}
int32_t
getMax
(
)
const
{
return
fMax
;
}
void
setMin
(
int32_t
count
)
{
fMin
=
count
<
=
0
?
0
:
count
;
}
int32_t
getMin
(
)
const
{
return
fMin
;
}
UBool
isNoConstraints
(
)
const
{
return
fMin
=
=
0
&
&
fMax
=
=
INT32_MAX
;
}
private
:
int32_t
fMax
;
int32_t
fMin
;
}
;
U_NAMESPACE_END
#
endif
