#
ifndef
__TZNAMES_IMPL_H__
#
define
__TZNAMES_IMPL_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
tznames
.
h
"
#
include
"
unicode
/
ures
.
h
"
#
include
"
unicode
/
locid
.
h
"
#
include
"
uhash
.
h
"
#
include
"
uvector
.
h
"
#
include
"
umutex
.
h
"
#
define
ZONE_NAME_U16_MAX
128
U_NAMESPACE_BEGIN
struct
ZNStringPoolChunk
;
class
U_I18N_API
ZNStringPool
:
public
UMemory
{
public
:
ZNStringPool
(
UErrorCode
&
status
)
;
~
ZNStringPool
(
)
;
const
UChar
*
get
(
const
UChar
*
s
UErrorCode
&
status
)
;
const
UChar
*
get
(
const
UnicodeString
&
s
UErrorCode
&
status
)
;
const
UChar
*
adopt
(
const
UChar
*
s
UErrorCode
&
status
)
;
void
freeze
(
)
;
private
:
ZNStringPoolChunk
*
fChunks
;
UHashtable
*
fHash
;
}
;
struct
CharacterNode
{
void
clear
(
)
;
void
deleteValues
(
UObjectDeleter
*
valueDeleter
)
;
void
addValue
(
void
*
value
UObjectDeleter
*
valueDeleter
UErrorCode
&
status
)
;
inline
UBool
hasValues
(
)
const
;
inline
int32_t
countValues
(
)
const
;
inline
const
void
*
getValue
(
int32_t
index
)
const
;
void
*
fValues
;
UChar
fCharacter
;
uint16_t
fFirstChild
;
uint16_t
fNextSibling
;
UBool
fHasValuesVector
;
UBool
fPadding
;
}
;
inline
UBool
CharacterNode
:
:
hasValues
(
)
const
{
return
(
UBool
)
(
fValues
!
=
NULL
)
;
}
inline
int32_t
CharacterNode
:
:
countValues
(
)
const
{
return
fValues
=
=
NULL
?
0
:
!
fHasValuesVector
?
1
:
(
(
const
UVector
*
)
fValues
)
-
>
size
(
)
;
}
inline
const
void
*
CharacterNode
:
:
getValue
(
int32_t
index
)
const
{
if
(
!
fHasValuesVector
)
{
return
fValues
;
}
else
{
return
(
(
const
UVector
*
)
fValues
)
-
>
elementAt
(
index
)
;
}
}
class
TextTrieMapSearchResultHandler
:
public
UMemory
{
public
:
virtual
UBool
handleMatch
(
int32_t
matchLength
const
CharacterNode
*
node
UErrorCode
&
status
)
=
0
;
virtual
~
TextTrieMapSearchResultHandler
(
)
;
}
;
class
U_I18N_API
TextTrieMap
:
public
UMemory
{
public
:
TextTrieMap
(
UBool
ignoreCase
UObjectDeleter
*
valeDeleter
)
;
virtual
~
TextTrieMap
(
)
;
void
put
(
const
UnicodeString
&
key
void
*
value
ZNStringPool
&
sp
UErrorCode
&
status
)
;
void
put
(
const
UChar
*
void
*
value
UErrorCode
&
status
)
;
void
search
(
const
UnicodeString
&
text
int32_t
start
TextTrieMapSearchResultHandler
*
handler
UErrorCode
&
status
)
const
;
int32_t
isEmpty
(
)
const
;
private
:
UBool
fIgnoreCase
;
CharacterNode
*
fNodes
;
int32_t
fNodesCapacity
;
int32_t
fNodesCount
;
UVector
*
fLazyContents
;
UBool
fIsEmpty
;
UObjectDeleter
*
fValueDeleter
;
UBool
growNodes
(
)
;
CharacterNode
*
addChildNode
(
CharacterNode
*
parent
UChar
c
UErrorCode
&
status
)
;
CharacterNode
*
getChildNode
(
CharacterNode
*
parent
UChar
c
)
const
;
void
putImpl
(
const
UnicodeString
&
key
void
*
value
UErrorCode
&
status
)
;
void
buildTrie
(
UErrorCode
&
status
)
;
void
search
(
CharacterNode
*
node
const
UnicodeString
&
text
int32_t
start
int32_t
index
TextTrieMapSearchResultHandler
*
handler
UErrorCode
&
status
)
const
;
}
;
class
ZNames
;
class
TextTrieMap
;
class
ZNameSearchHandler
;
class
TimeZoneNamesImpl
:
public
TimeZoneNames
{
public
:
TimeZoneNamesImpl
(
const
Locale
&
locale
UErrorCode
&
status
)
;
virtual
~
TimeZoneNamesImpl
(
)
;
virtual
bool
operator
=
=
(
const
TimeZoneNames
&
other
)
const
override
;
virtual
TimeZoneNamesImpl
*
clone
(
)
const
override
;
StringEnumeration
*
getAvailableMetaZoneIDs
(
UErrorCode
&
status
)
const
override
;
StringEnumeration
*
getAvailableMetaZoneIDs
(
const
UnicodeString
&
tzID
UErrorCode
&
status
)
const
override
;
UnicodeString
&
getMetaZoneID
(
const
UnicodeString
&
tzID
UDate
date
UnicodeString
&
mzID
)
const
override
;
UnicodeString
&
getReferenceZoneID
(
const
UnicodeString
&
mzID
const
char
*
region
UnicodeString
&
tzID
)
const
override
;
UnicodeString
&
getMetaZoneDisplayName
(
const
UnicodeString
&
mzID
UTimeZoneNameType
type
UnicodeString
&
name
)
const
override
;
UnicodeString
&
getTimeZoneDisplayName
(
const
UnicodeString
&
tzID
UTimeZoneNameType
type
UnicodeString
&
name
)
const
override
;
UnicodeString
&
getExemplarLocationName
(
const
UnicodeString
&
tzID
UnicodeString
&
name
)
const
override
;
TimeZoneNames
:
:
MatchInfoCollection
*
find
(
const
UnicodeString
&
text
int32_t
start
uint32_t
types
UErrorCode
&
status
)
const
override
;
void
loadAllDisplayNames
(
UErrorCode
&
status
)
override
;
void
getDisplayNames
(
const
UnicodeString
&
tzID
const
UTimeZoneNameType
types
[
]
int32_t
numTypes
UDate
date
UnicodeString
dest
[
]
UErrorCode
&
status
)
const
override
;
static
UnicodeString
&
getDefaultExemplarLocationName
(
const
UnicodeString
&
tzID
UnicodeString
&
name
)
;
static
StringEnumeration
*
_getAvailableMetaZoneIDs
(
UErrorCode
&
status
)
;
static
StringEnumeration
*
_getAvailableMetaZoneIDs
(
const
UnicodeString
&
tzID
UErrorCode
&
status
)
;
static
UnicodeString
&
_getMetaZoneID
(
const
UnicodeString
&
tzID
UDate
date
UnicodeString
&
mzID
)
;
static
UnicodeString
&
_getReferenceZoneID
(
const
UnicodeString
&
mzID
const
char
*
region
UnicodeString
&
tzID
)
;
private
:
Locale
fLocale
;
UResourceBundle
*
fZoneStrings
;
UHashtable
*
fTZNamesMap
;
UHashtable
*
fMZNamesMap
;
UBool
fNamesTrieFullyLoaded
;
UBool
fNamesFullyLoaded
;
TextTrieMap
fNamesTrie
;
void
initialize
(
const
Locale
&
locale
UErrorCode
&
status
)
;
void
cleanup
(
)
;
void
loadStrings
(
const
UnicodeString
&
tzCanonicalID
UErrorCode
&
status
)
;
ZNames
*
loadMetaZoneNames
(
const
UnicodeString
&
mzId
UErrorCode
&
status
)
;
ZNames
*
loadTimeZoneNames
(
const
UnicodeString
&
mzId
UErrorCode
&
status
)
;
TimeZoneNames
:
:
MatchInfoCollection
*
doFind
(
ZNameSearchHandler
&
handler
const
UnicodeString
&
text
int32_t
start
UErrorCode
&
status
)
const
;
void
addAllNamesIntoTrie
(
UErrorCode
&
errorCode
)
;
void
internalLoadAllDisplayNames
(
UErrorCode
&
status
)
;
struct
ZoneStringsLoader
;
}
;
class
TZDBNames
;
class
TZDBTimeZoneNames
:
public
TimeZoneNames
{
public
:
TZDBTimeZoneNames
(
const
Locale
&
locale
)
;
virtual
~
TZDBTimeZoneNames
(
)
;
virtual
bool
operator
=
=
(
const
TimeZoneNames
&
other
)
const
override
;
virtual
TZDBTimeZoneNames
*
clone
(
)
const
override
;
StringEnumeration
*
getAvailableMetaZoneIDs
(
UErrorCode
&
status
)
const
override
;
StringEnumeration
*
getAvailableMetaZoneIDs
(
const
UnicodeString
&
tzID
UErrorCode
&
status
)
const
override
;
UnicodeString
&
getMetaZoneID
(
const
UnicodeString
&
tzID
UDate
date
UnicodeString
&
mzID
)
const
override
;
UnicodeString
&
getReferenceZoneID
(
const
UnicodeString
&
mzID
const
char
*
region
UnicodeString
&
tzID
)
const
override
;
UnicodeString
&
getMetaZoneDisplayName
(
const
UnicodeString
&
mzID
UTimeZoneNameType
type
UnicodeString
&
name
)
const
override
;
UnicodeString
&
getTimeZoneDisplayName
(
const
UnicodeString
&
tzID
UTimeZoneNameType
type
UnicodeString
&
name
)
const
override
;
TimeZoneNames
:
:
MatchInfoCollection
*
find
(
const
UnicodeString
&
text
int32_t
start
uint32_t
types
UErrorCode
&
status
)
const
override
;
static
const
TZDBNames
*
getMetaZoneNames
(
const
UnicodeString
&
mzId
UErrorCode
&
status
)
;
private
:
Locale
fLocale
;
char
fRegion
[
ULOC_COUNTRY_CAPACITY
]
;
}
;
U_NAMESPACE_END
#
endif
#
endif
