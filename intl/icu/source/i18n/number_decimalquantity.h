#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
&
&
!
UPRV_INCOMPLETE_CPP11_SUPPORT
#
ifndef
__NUMBER_DECIMALQUANTITY_H__
#
define
__NUMBER_DECIMALQUANTITY_H__
#
include
<
cstdint
>
#
include
"
unicode
/
umachine
.
h
"
#
include
"
decNumber
.
h
"
#
include
"
standardplural
.
h
"
#
include
"
plurrule_impl
.
h
"
#
include
"
number_types
.
h
"
U_NAMESPACE_BEGIN
namespace
number
{
namespace
impl
{
class
U_I18N_API
DecimalQuantity
:
public
IFixedDecimal
public
UMemory
{
public
:
DecimalQuantity
(
const
DecimalQuantity
&
other
)
;
DecimalQuantity
(
)
;
~
DecimalQuantity
(
)
;
DecimalQuantity
&
operator
=
(
const
DecimalQuantity
&
other
)
;
void
setIntegerLength
(
int32_t
minInt
int32_t
maxInt
)
;
void
setFractionLength
(
int32_t
minFrac
int32_t
maxFrac
)
;
void
roundToIncrement
(
double
roundingIncrement
RoundingMode
roundingMode
int32_t
minMaxFrac
UErrorCode
&
status
)
;
void
roundToMagnitude
(
int32_t
magnitude
RoundingMode
roundingMode
UErrorCode
&
status
)
;
void
roundToInfinity
(
)
;
void
multiplyBy
(
int32_t
multiplicand
)
;
void
adjustMagnitude
(
int32_t
delta
)
;
int32_t
getMagnitude
(
)
const
;
bool
isZero
(
)
const
;
bool
isNegative
(
)
const
;
bool
isInfinite
(
)
const
U_OVERRIDE
;
bool
isNaN
(
)
const
U_OVERRIDE
;
int64_t
toLong
(
)
const
;
int64_t
toFractionLong
(
bool
includeTrailingZeros
)
const
;
double
toDouble
(
)
const
;
DecimalQuantity
&
setToInt
(
int32_t
n
)
;
DecimalQuantity
&
setToLong
(
int64_t
n
)
;
DecimalQuantity
&
setToDouble
(
double
n
)
;
DecimalQuantity
&
setToDecNumber
(
StringPiece
n
)
;
void
appendDigit
(
int8_t
value
int32_t
leadingZeros
bool
appendAsInteger
)
;
StandardPlural
:
:
Form
getStandardPlural
(
const
PluralRules
*
rules
)
const
;
double
getPluralOperand
(
PluralOperand
operand
)
const
U_OVERRIDE
;
int8_t
getDigit
(
int32_t
magnitude
)
const
;
int32_t
getUpperDisplayMagnitude
(
)
const
;
int32_t
getLowerDisplayMagnitude
(
)
const
;
int32_t
fractionCount
(
)
const
;
int32_t
fractionCountWithoutTrailingZeros
(
)
const
;
void
clear
(
)
;
uint64_t
getPositionFingerprint
(
)
const
;
const
char16_t
*
checkHealth
(
)
const
;
UnicodeString
toString
(
)
const
;
UnicodeString
toNumberString
(
)
const
;
UnicodeString
toPlainString
(
)
const
;
inline
bool
isUsingBytes
(
)
{
return
usingBytes
;
}
inline
bool
isExplicitExactDouble
(
)
{
return
explicitExactDouble
;
}
;
private
:
int32_t
scale
;
int32_t
precision
;
int8_t
flags
;
UBool
isApproximate
;
double
origDouble
;
int32_t
origDelta
;
int32_t
lOptPos
=
INT32_MAX
;
int32_t
lReqPos
=
0
;
int32_t
rReqPos
=
0
;
int32_t
rOptPos
=
INT32_MIN
;
union
{
struct
{
int8_t
*
ptr
;
int32_t
len
;
}
bcdBytes
;
uint64_t
bcdLong
;
}
fBCD
;
bool
usingBytes
=
false
;
bool
explicitExactDouble
=
false
;
int8_t
getDigitPos
(
int32_t
position
)
const
;
void
setDigitPos
(
int32_t
position
int8_t
value
)
;
void
shiftLeft
(
int32_t
numDigits
)
;
void
shiftRight
(
int32_t
numDigits
)
;
void
setBcdToZero
(
)
;
void
readIntToBcd
(
int32_t
n
)
;
void
readLongToBcd
(
int64_t
n
)
;
void
readDecNumberToBcd
(
decNumber
*
dn
)
;
void
copyBcdFrom
(
const
DecimalQuantity
&
other
)
;
void
compact
(
)
;
void
_setToInt
(
int32_t
n
)
;
void
_setToLong
(
int64_t
n
)
;
void
_setToDoubleFast
(
double
n
)
;
void
_setToDecNumber
(
decNumber
*
n
)
;
void
convertToAccurateDouble
(
)
;
double
toDoubleFromOriginal
(
)
const
;
void
ensureCapacity
(
)
;
void
ensureCapacity
(
int32_t
capacity
)
;
void
switchStorage
(
)
;
}
;
}
}
U_NAMESPACE_END
#
endif
#
endif
