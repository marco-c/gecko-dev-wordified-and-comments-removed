#
ifndef
RBBIRPT_H
#
define
RBBIRPT_H
#
include
"
unicode
/
utypes
.
h
"
U_NAMESPACE_BEGIN
static
const
uint8_t
kRuleSet_digit_char
=
128
;
static
const
uint8_t
kRuleSet_ascii_letter
=
129
;
static
const
uint8_t
kRuleSet_rule_char
=
130
;
constexpr
uint32_t
kRuleSet_count
=
131
-
128
;
enum
Regex_PatternParseAction
{
doSetBackslash_D
doBackslashh
doBackslashH
doSetLiteralEscaped
doOpenLookAheadNeg
doCompleteNamedBackRef
doPatStart
doBackslashS
doBackslashD
doNGStar
doNOP
doBackslashX
doSetLiteral
doContinueNamedCapture
doBackslashG
doBackslashR
doSetBegin
doSetBackslash_v
doPossessivePlus
doPerlInline
doBackslashZ
doSetAddAmp
doSetBeginDifference1
doIntervalError
doSetNegate
doIntervalInit
doSetIntersection2
doPossessiveInterval
doRuleError
doBackslashW
doContinueNamedBackRef
doOpenNonCaptureParen
doExit
doSetNamedChar
doSetBackslash_V
doConditionalExpr
doEscapeError
doBadOpenParenType
doPossessiveStar
doSetAddDash
doEscapedLiteralChar
doSetBackslash_w
doIntervalUpperDigit
doBackslashv
doSetBackslash_S
doSetNoCloseError
doSetProp
doBackslashB
doSetEnd
doSetRange
doMatchModeParen
doPlus
doBackslashV
doSetMatchMode
doBackslashz
doSetNamedRange
doOpenLookBehindNeg
doInterval
doBadNamedCapture
doBeginMatchMode
doBackslashd
doPatFinish
doNamedChar
doNGPlus
doSetDifference2
doSetBackslash_H
doCloseParen
doDotAny
doOpenCaptureParen
doEnterQuoteMode
doOpenAtomicParen
doBadModeFlag
doSetBackslash_d
doSetFinish
doProperty
doBeginNamedBackRef
doBackRef
doOpt
doDollar
doBeginNamedCapture
doNGInterval
doSetOpError
doSetPosixProp
doSetBeginIntersection1
doBackslashb
doSetBeginUnion
doIntevalLowerDigit
doSetBackslash_h
doStar
doMatchMode
doBackslashA
doOpenLookBehind
doPossessiveOpt
doOrOperator
doBackslashw
doBackslashs
doLiteralChar
doSuppressComments
doCaret
doIntervalSame
doNGOpt
doOpenLookAhead
doSetBackslash_W
doMismatchedParenErr
doSetBackslash_s
rbbiLastAction
}
;
struct
RegexTableEl
{
Regex_PatternParseAction
fAction
;
uint8_t
fCharClass
;
uint8_t
fNextState
;
uint8_t
fPushState
;
UBool
fNextChar
;
}
;
static
const
struct
RegexTableEl
gRuleParseStateTable
[
]
=
{
{
doNOP
0
0
0
true
}
{
doPatStart
255
2
0
false
}
{
doLiteralChar
254
14
0
true
}
{
doLiteralChar
130
14
0
true
}
{
doSetBegin
91
123
205
true
}
{
doNOP
40
27
0
true
}
{
doDotAny
46
14
0
true
}
{
doCaret
94
14
0
true
}
{
doDollar
36
14
0
true
}
{
doNOP
92
89
0
true
}
{
doOrOperator
124
2
0
true
}
{
doCloseParen
41
255
0
true
}
{
doPatFinish
253
2
0
false
}
{
doRuleError
255
206
0
false
}
{
doNOP
42
68
0
true
}
{
doNOP
43
71
0
true
}
{
doNOP
63
74
0
true
}
{
doIntervalInit
123
77
0
true
}
{
doNOP
40
23
0
true
}
{
doNOP
255
20
0
false
}
{
doOrOperator
124
2
0
true
}
{
doCloseParen
41
255
0
true
}
{
doNOP
255
2
0
false
}
{
doSuppressComments
63
25
0
true
}
{
doNOP
255
27
0
false
}
{
doNOP
35
50
14
true
}
{
doNOP
255
29
0
false
}
{
doSuppressComments
63
29
0
true
}
{
doOpenCaptureParen
255
2
14
false
}
{
doOpenNonCaptureParen
58
2
14
true
}
{
doOpenAtomicParen
62
2
14
true
}
{
doOpenLookAhead
61
2
20
true
}
{
doOpenLookAheadNeg
33
2
20
true
}
{
doNOP
60
46
0
true
}
{
doNOP
35
50
2
true
}
{
doBeginMatchMode
105
53
0
false
}
{
doBeginMatchMode
100
53
0
false
}
{
doBeginMatchMode
109
53
0
false
}
{
doBeginMatchMode
115
53
0
false
}
{
doBeginMatchMode
117
53
0
false
}
{
doBeginMatchMode
119
53
0
false
}
{
doBeginMatchMode
120
53
0
false
}
{
doBeginMatchMode
45
53
0
false
}
{
doConditionalExpr
40
206
0
true
}
{
doPerlInline
123
206
0
true
}
{
doBadOpenParenType
255
206
0
false
}
{
doOpenLookBehind
61
2
20
true
}
{
doOpenLookBehindNeg
33
2
20
true
}
{
doBeginNamedCapture
129
64
0
false
}
{
doBadOpenParenType
255
206
0
false
}
{
doNOP
41
255
0
true
}
{
doMismatchedParenErr
253
206
0
false
}
{
doNOP
255
50
0
true
}
{
doMatchMode
105
53
0
true
}
{
doMatchMode
100
53
0
true
}
{
doMatchMode
109
53
0
true
}
{
doMatchMode
115
53
0
true
}
{
doMatchMode
117
53
0
true
}
{
doMatchMode
119
53
0
true
}
{
doMatchMode
120
53
0
true
}
{
doMatchMode
45
53
0
true
}
{
doSetMatchMode
41
2
0
true
}
{
doMatchModeParen
58
2
14
true
}
{
doBadModeFlag
255
206
0
false
}
{
doContinueNamedCapture
129
64
0
true
}
{
doContinueNamedCapture
128
64
0
true
}
{
doOpenCaptureParen
62
2
14
true
}
{
doBadNamedCapture
255
206
0
false
}
{
doNGStar
63
20
0
true
}
{
doPossessiveStar
43
20
0
true
}
{
doStar
255
20
0
false
}
{
doNGPlus
63
20
0
true
}
{
doPossessivePlus
43
20
0
true
}
{
doPlus
255
20
0
false
}
{
doNGOpt
63
20
0
true
}
{
doPossessiveOpt
43
20
0
true
}
{
doOpt
255
20
0
false
}
{
doNOP
128
79
0
false
}
{
doIntervalError
255
206
0
false
}
{
doIntevalLowerDigit
128
79
0
true
}
{
doNOP
44
83
0
true
}
{
doIntervalSame
125
86
0
true
}
{
doIntervalError
255
206
0
false
}
{
doIntervalUpperDigit
128
83
0
true
}
{
doNOP
125
86
0
true
}
{
doIntervalError
255
206
0
false
}
{
doNGInterval
63
20
0
true
}
{
doPossessiveInterval
43
20
0
true
}
{
doInterval
255
20
0
false
}
{
doBackslashA
65
2
0
true
}
{
doBackslashB
66
2
0
true
}
{
doBackslashb
98
2
0
true
}
{
doBackslashd
100
14
0
true
}
{
doBackslashD
68
14
0
true
}
{
doBackslashG
71
2
0
true
}
{
doBackslashh
104
14
0
true
}
{
doBackslashH
72
14
0
true
}
{
doNOP
107
115
0
true
}
{
doNamedChar
78
14
0
false
}
{
doProperty
112
14
0
false
}
{
doProperty
80
14
0
false
}
{
doBackslashR
82
14
0
true
}
{
doEnterQuoteMode
81
2
0
true
}
{
doBackslashS
83
14
0
true
}
{
doBackslashs
115
14
0
true
}
{
doBackslashv
118
14
0
true
}
{
doBackslashV
86
14
0
true
}
{
doBackslashW
87
14
0
true
}
{
doBackslashw
119
14
0
true
}
{
doBackslashX
88
14
0
true
}
{
doBackslashZ
90
2
0
true
}
{
doBackslashz
122
2
0
true
}
{
doBackRef
128
14
0
true
}
{
doEscapeError
253
206
0
false
}
{
doEscapedLiteralChar
255
14
0
true
}
{
doBeginNamedBackRef
60
117
0
true
}
{
doBadNamedCapture
255
206
0
false
}
{
doContinueNamedBackRef
129
119
0
true
}
{
doBadNamedCapture
255
206
0
false
}
{
doContinueNamedBackRef
129
119
0
true
}
{
doContinueNamedBackRef
128
119
0
true
}
{
doCompleteNamedBackRef
62
14
0
true
}
{
doBadNamedCapture
255
206
0
false
}
{
doSetNegate
94
126
0
true
}
{
doSetPosixProp
58
128
0
false
}
{
doNOP
255
126
0
false
}
{
doSetLiteral
93
141
0
true
}
{
doNOP
255
131
0
false
}
{
doSetEnd
93
255
0
true
}
{
doNOP
58
131
0
false
}
{
doRuleError
255
206
0
false
}
{
doSetEnd
93
255
0
true
}
{
doSetBeginUnion
91
123
148
true
}
{
doNOP
92
191
0
true
}
{
doNOP
45
137
0
true
}
{
doNOP
38
139
0
true
}
{
doSetLiteral
255
141
0
true
}
{
doRuleError
45
206
0
false
}
{
doSetAddDash
255
141
0
false
}
{
doRuleError
38
206
0
false
}
{
doSetAddAmp
255
141
0
false
}
{
doSetEnd
93
255
0
true
}
{
doSetBeginUnion
91
123
148
true
}
{
doNOP
45
178
0
true
}
{
doNOP
38
169
0
true
}
{
doNOP
92
191
0
true
}
{
doSetNoCloseError
253
206
0
false
}
{
doSetLiteral
255
141
0
true
}
{
doSetEnd
93
255
0
true
}
{
doSetBeginUnion
91
123
148
true
}
{
doNOP
45
171
0
true
}
{
doNOP
38
166
0
true
}
{
doNOP
92
191
0
true
}
{
doSetNoCloseError
253
206
0
false
}
{
doSetLiteral
255
141
0
true
}
{
doSetEnd
93
255
0
true
}
{
doSetBeginUnion
91
123
148
true
}
{
doNOP
45
174
0
true
}
{
doNOP
38
176
0
true
}
{
doNOP
92
191
0
true
}
{
doSetNoCloseError
253
206
0
false
}
{
doSetLiteral
255
141
0
true
}
{
doSetBeginUnion
91
123
148
true
}
{
doSetOpError
93
206
0
false
}
{
doNOP
92
191
0
true
}
{
doSetLiteral
255
141
0
true
}
{
doSetBeginIntersection1
91
123
148
true
}
{
doSetIntersection2
38
162
0
true
}
{
doSetAddAmp
255
141
0
false
}
{
doSetIntersection2
38
162
0
true
}
{
doSetAddAmp
255
141
0
false
}
{
doSetBeginDifference1
91
123
148
true
}
{
doSetDifference2
45
162
0
true
}
{
doSetAddDash
255
141
0
false
}
{
doSetDifference2
45
162
0
true
}
{
doSetAddDash
255
141
0
false
}
{
doSetIntersection2
38
162
0
true
}
{
doSetAddAmp
255
141
0
false
}
{
doSetDifference2
45
162
0
true
}
{
doSetAddDash
91
141
0
false
}
{
doSetAddDash
93
141
0
false
}
{
doNOP
92
183
0
true
}
{
doSetRange
255
155
0
true
}
{
doSetOpError
115
206
0
false
}
{
doSetOpError
83
206
0
false
}
{
doSetOpError
119
206
0
false
}
{
doSetOpError
87
206
0
false
}
{
doSetOpError
100
206
0
false
}
{
doSetOpError
68
206
0
false
}
{
doSetNamedRange
78
155
0
false
}
{
doSetRange
255
155
0
true
}
{
doSetProp
112
148
0
false
}
{
doSetProp
80
148
0
false
}
{
doSetNamedChar
78
141
0
false
}
{
doSetBackslash_s
115
155
0
true
}
{
doSetBackslash_S
83
155
0
true
}
{
doSetBackslash_w
119
155
0
true
}
{
doSetBackslash_W
87
155
0
true
}
{
doSetBackslash_d
100
155
0
true
}
{
doSetBackslash_D
68
155
0
true
}
{
doSetBackslash_h
104
155
0
true
}
{
doSetBackslash_H
72
155
0
true
}
{
doSetBackslash_v
118
155
0
true
}
{
doSetBackslash_V
86
155
0
true
}
{
doSetLiteralEscaped
255
141
0
true
}
{
doSetFinish
255
14
0
false
}
{
doExit
255
206
0
true
}
}
;
static
const
char
*
const
RegexStateNames
[
]
=
{
0
"
start
"
"
term
"
0
0
0
0
0
0
0
0
0
0
0
"
expr
-
quant
"
0
0
0
0
0
"
expr
-
cont
"
0
0
"
open
-
paren
-
quant
"
0
"
open
-
paren
-
quant2
"
0
"
open
-
paren
"
0
"
open
-
paren
-
extended
"
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
"
open
-
paren
-
lookbehind
"
0
0
0
"
paren
-
comment
"
0
0
"
paren
-
flag
"
0
0
0
0
0
0
0
0
0
0
"
named
-
capture
"
0
0
0
"
quant
-
star
"
0
0
"
quant
-
plus
"
0
0
"
quant
-
opt
"
0
0
"
interval
-
open
"
0
"
interval
-
lower
"
0
0
0
"
interval
-
upper
"
0
0
"
interval
-
type
"
0
0
"
backslash
"
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
"
named
-
backref
"
0
"
named
-
backref
-
2
"
0
"
named
-
backref
-
3
"
0
0
0
"
set
-
open
"
0
0
"
set
-
open2
"
0
"
set
-
posix
"
0
0
"
set
-
start
"
0
0
0
0
0
"
set
-
start
-
dash
"
0
"
set
-
start
-
amp
"
0
"
set
-
after
-
lit
"
0
0
0
0
0
0
"
set
-
after
-
set
"
0
0
0
0
0
0
"
set
-
after
-
range
"
0
0
0
0
0
0
"
set
-
after
-
op
"
0
0
0
"
set
-
set
-
amp
"
0
0
"
set
-
lit
-
amp
"
0
"
set
-
set
-
dash
"
0
0
"
set
-
range
-
dash
"
0
"
set
-
range
-
amp
"
0
"
set
-
lit
-
dash
"
0
0
0
0
"
set
-
lit
-
dash
-
escape
"
0
0
0
0
0
0
0
"
set
-
escape
"
0
0
0
0
0
0
0
0
0
0
0
0
0
"
set
-
finish
"
"
errorDeath
"
0
}
;
U_NAMESPACE_END
#
endif
