#
ifndef
__LISTFORMATTER_H__
#
define
__LISTFORMATTER_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
include
"
unicode
/
unistr
.
h
"
#
include
"
unicode
/
locid
.
h
"
#
include
"
unicode
/
formattedvalue
.
h
"
#
include
"
unicode
/
ulistformatter
.
h
"
U_NAMESPACE_BEGIN
class
FieldPositionHandler
;
class
FormattedListData
;
class
ListFormatter
;
class
Hashtable
;
struct
ListFormatInternal
;
struct
ListFormatData
:
public
UMemory
{
UnicodeString
twoPattern
;
UnicodeString
startPattern
;
UnicodeString
middlePattern
;
UnicodeString
endPattern
;
Locale
locale
;
ListFormatData
(
const
UnicodeString
&
two
const
UnicodeString
&
start
const
UnicodeString
&
middle
const
UnicodeString
&
end
const
Locale
&
loc
)
:
twoPattern
(
two
)
startPattern
(
start
)
middlePattern
(
middle
)
endPattern
(
end
)
locale
(
loc
)
{
}
}
;
#
if
!
UCONFIG_NO_FORMATTING
class
U_I18N_API
FormattedList
:
public
UMemory
public
FormattedValue
{
public
:
FormattedList
(
)
:
fData
(
nullptr
)
fErrorCode
(
U_INVALID_STATE_ERROR
)
{
}
FormattedList
(
FormattedList
&
&
src
)
U_NOEXCEPT
;
virtual
~
FormattedList
(
)
U_OVERRIDE
;
FormattedList
(
const
FormattedList
&
)
=
delete
;
FormattedList
&
operator
=
(
const
FormattedList
&
)
=
delete
;
FormattedList
&
operator
=
(
FormattedList
&
&
src
)
U_NOEXCEPT
;
UnicodeString
toString
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
UnicodeString
toTempString
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
Appendable
&
appendTo
(
Appendable
&
appendable
UErrorCode
&
status
)
const
U_OVERRIDE
;
UBool
nextPosition
(
ConstrainedFieldPosition
&
cfpos
UErrorCode
&
status
)
const
U_OVERRIDE
;
private
:
FormattedListData
*
fData
;
UErrorCode
fErrorCode
;
explicit
FormattedList
(
FormattedListData
*
results
)
:
fData
(
results
)
fErrorCode
(
U_ZERO_ERROR
)
{
}
explicit
FormattedList
(
UErrorCode
errorCode
)
:
fData
(
nullptr
)
fErrorCode
(
errorCode
)
{
}
friend
class
ListFormatter
;
}
;
#
endif
class
U_I18N_API
ListFormatter
:
public
UObject
{
public
:
ListFormatter
(
const
ListFormatter
&
)
;
ListFormatter
&
operator
=
(
const
ListFormatter
&
other
)
;
static
ListFormatter
*
createInstance
(
UErrorCode
&
errorCode
)
;
static
ListFormatter
*
createInstance
(
const
Locale
&
locale
UErrorCode
&
errorCode
)
;
#
ifndef
U_HIDE_DRAFT_API
#
if
!
UCONFIG_NO_FORMATTING
static
ListFormatter
*
createInstance
(
const
Locale
&
locale
UListFormatterType
type
UListFormatterWidth
width
UErrorCode
&
errorCode
)
;
#
endif
#
endif
#
ifndef
U_HIDE_INTERNAL_API
static
ListFormatter
*
createInstance
(
const
Locale
&
locale
const
char
*
style
UErrorCode
&
errorCode
)
;
#
endif
virtual
~
ListFormatter
(
)
;
UnicodeString
&
format
(
const
UnicodeString
items
[
]
int32_t
n_items
UnicodeString
&
appendTo
UErrorCode
&
errorCode
)
const
;
#
if
!
UCONFIG_NO_FORMATTING
FormattedList
formatStringsToValue
(
const
UnicodeString
items
[
]
int32_t
n_items
UErrorCode
&
errorCode
)
const
;
#
endif
#
ifndef
U_HIDE_INTERNAL_API
UnicodeString
&
format
(
const
UnicodeString
items
[
]
int32_t
n_items
UnicodeString
&
appendTo
int32_t
index
int32_t
&
offset
UErrorCode
&
errorCode
)
const
;
ListFormatter
(
const
ListFormatData
&
data
UErrorCode
&
errorCode
)
;
ListFormatter
(
const
ListFormatInternal
*
listFormatterInternal
)
;
#
endif
private
:
static
void
initializeHash
(
UErrorCode
&
errorCode
)
;
static
const
ListFormatInternal
*
getListFormatInternal
(
const
Locale
&
locale
const
char
*
style
UErrorCode
&
errorCode
)
;
struct
ListPatternsSink
;
static
ListFormatInternal
*
loadListFormatInternal
(
const
Locale
&
locale
const
char
*
style
UErrorCode
&
errorCode
)
;
UnicodeString
&
format_
(
const
UnicodeString
items
[
]
int32_t
n_items
UnicodeString
&
appendTo
int32_t
index
int32_t
&
offset
FieldPositionHandler
*
handler
UErrorCode
&
errorCode
)
const
;
ListFormatter
(
)
;
ListFormatInternal
*
owned
;
const
ListFormatInternal
*
data
;
}
;
U_NAMESPACE_END
#
endif
#
endif
