#
ifndef
__MEASUREUNIT_H__
#
define
__MEASUREUNIT_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
unistr
.
h
"
U_NAMESPACE_BEGIN
class
StringEnumeration
;
class
U_I18N_API
MeasureUnit
:
public
UObject
{
public
:
MeasureUnit
(
)
;
MeasureUnit
(
const
MeasureUnit
&
other
)
;
MeasureUnit
&
operator
=
(
const
MeasureUnit
&
other
)
;
virtual
UObject
*
clone
(
)
const
;
virtual
~
MeasureUnit
(
)
;
virtual
UBool
operator
=
=
(
const
UObject
&
other
)
const
;
UBool
operator
!
=
(
const
UObject
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
const
char
*
getType
(
)
const
;
const
char
*
getSubtype
(
)
const
;
static
int32_t
getAvailable
(
MeasureUnit
*
destArray
int32_t
destCapacity
UErrorCode
&
errorCode
)
;
static
int32_t
getAvailable
(
const
char
*
type
MeasureUnit
*
destArray
int32_t
destCapacity
UErrorCode
&
errorCode
)
;
static
StringEnumeration
*
getAvailableTypes
(
UErrorCode
&
errorCode
)
;
static
UClassID
U_EXPORT2
getStaticClassID
(
void
)
;
virtual
UClassID
getDynamicClassID
(
void
)
const
;
#
ifndef
U_HIDE_INTERNAL_API
int32_t
getIndex
(
)
const
;
static
int32_t
getIndexCount
(
)
;
static
int32_t
internalGetIndexForTypeAndSubtype
(
const
char
*
type
const
char
*
subtype
)
;
static
MeasureUnit
resolveUnitPerUnit
(
const
MeasureUnit
&
unit
const
MeasureUnit
&
perUnit
bool
*
isResolved
)
;
#
endif
static
MeasureUnit
*
createGForce
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getGForce
(
)
;
#
endif
static
MeasureUnit
*
createMeterPerSecondSquared
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMeterPerSecondSquared
(
)
;
#
endif
static
MeasureUnit
*
createArcMinute
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getArcMinute
(
)
;
#
endif
static
MeasureUnit
*
createArcSecond
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getArcSecond
(
)
;
#
endif
static
MeasureUnit
*
createDegree
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getDegree
(
)
;
#
endif
static
MeasureUnit
*
createRadian
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getRadian
(
)
;
#
endif
static
MeasureUnit
*
createRevolutionAngle
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getRevolutionAngle
(
)
;
#
endif
static
MeasureUnit
*
createAcre
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getAcre
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createDunam
(
UErrorCode
&
status
)
;
static
MeasureUnit
getDunam
(
)
;
#
endif
static
MeasureUnit
*
createHectare
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getHectare
(
)
;
#
endif
static
MeasureUnit
*
createSquareCentimeter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getSquareCentimeter
(
)
;
#
endif
static
MeasureUnit
*
createSquareFoot
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getSquareFoot
(
)
;
#
endif
static
MeasureUnit
*
createSquareInch
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getSquareInch
(
)
;
#
endif
static
MeasureUnit
*
createSquareKilometer
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getSquareKilometer
(
)
;
#
endif
static
MeasureUnit
*
createSquareMeter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getSquareMeter
(
)
;
#
endif
static
MeasureUnit
*
createSquareMile
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getSquareMile
(
)
;
#
endif
static
MeasureUnit
*
createSquareYard
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getSquareYard
(
)
;
#
endif
static
MeasureUnit
*
createKarat
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKarat
(
)
;
#
endif
static
MeasureUnit
*
createMilligramPerDeciliter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMilligramPerDeciliter
(
)
;
#
endif
static
MeasureUnit
*
createMillimolePerLiter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMillimolePerLiter
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createMole
(
UErrorCode
&
status
)
;
static
MeasureUnit
getMole
(
)
;
#
endif
static
MeasureUnit
*
createPartPerMillion
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getPartPerMillion
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createPercent
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getPercent
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createPermille
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getPermille
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createPermyriad
(
UErrorCode
&
status
)
;
static
MeasureUnit
getPermyriad
(
)
;
#
endif
static
MeasureUnit
*
createLiterPer100Kilometers
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getLiterPer100Kilometers
(
)
;
#
endif
static
MeasureUnit
*
createLiterPerKilometer
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getLiterPerKilometer
(
)
;
#
endif
static
MeasureUnit
*
createMilePerGallon
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMilePerGallon
(
)
;
#
endif
static
MeasureUnit
*
createMilePerGallonImperial
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMilePerGallonImperial
(
)
;
#
endif
static
MeasureUnit
*
createBit
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getBit
(
)
;
#
endif
static
MeasureUnit
*
createByte
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getByte
(
)
;
#
endif
static
MeasureUnit
*
createGigabit
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getGigabit
(
)
;
#
endif
static
MeasureUnit
*
createGigabyte
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getGigabyte
(
)
;
#
endif
static
MeasureUnit
*
createKilobit
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKilobit
(
)
;
#
endif
static
MeasureUnit
*
createKilobyte
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKilobyte
(
)
;
#
endif
static
MeasureUnit
*
createMegabit
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMegabit
(
)
;
#
endif
static
MeasureUnit
*
createMegabyte
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMegabyte
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createPetabyte
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getPetabyte
(
)
;
#
endif
static
MeasureUnit
*
createTerabit
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getTerabit
(
)
;
#
endif
static
MeasureUnit
*
createTerabyte
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getTerabyte
(
)
;
#
endif
static
MeasureUnit
*
createCentury
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCentury
(
)
;
#
endif
static
MeasureUnit
*
createDay
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getDay
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createDayPerson
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getDayPerson
(
)
;
#
endif
static
MeasureUnit
*
createHour
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getHour
(
)
;
#
endif
static
MeasureUnit
*
createMicrosecond
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMicrosecond
(
)
;
#
endif
static
MeasureUnit
*
createMillisecond
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMillisecond
(
)
;
#
endif
static
MeasureUnit
*
createMinute
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMinute
(
)
;
#
endif
static
MeasureUnit
*
createMonth
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMonth
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createMonthPerson
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMonthPerson
(
)
;
#
endif
static
MeasureUnit
*
createNanosecond
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getNanosecond
(
)
;
#
endif
static
MeasureUnit
*
createSecond
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getSecond
(
)
;
#
endif
static
MeasureUnit
*
createWeek
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getWeek
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createWeekPerson
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getWeekPerson
(
)
;
#
endif
static
MeasureUnit
*
createYear
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getYear
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createYearPerson
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getYearPerson
(
)
;
#
endif
static
MeasureUnit
*
createAmpere
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getAmpere
(
)
;
#
endif
static
MeasureUnit
*
createMilliampere
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMilliampere
(
)
;
#
endif
static
MeasureUnit
*
createOhm
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getOhm
(
)
;
#
endif
static
MeasureUnit
*
createVolt
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getVolt
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createBritishThermalUnit
(
UErrorCode
&
status
)
;
static
MeasureUnit
getBritishThermalUnit
(
)
;
#
endif
static
MeasureUnit
*
createCalorie
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCalorie
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createElectronvolt
(
UErrorCode
&
status
)
;
static
MeasureUnit
getElectronvolt
(
)
;
#
endif
static
MeasureUnit
*
createFoodcalorie
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getFoodcalorie
(
)
;
#
endif
static
MeasureUnit
*
createJoule
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getJoule
(
)
;
#
endif
static
MeasureUnit
*
createKilocalorie
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKilocalorie
(
)
;
#
endif
static
MeasureUnit
*
createKilojoule
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKilojoule
(
)
;
#
endif
static
MeasureUnit
*
createKilowattHour
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKilowattHour
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createNewton
(
UErrorCode
&
status
)
;
static
MeasureUnit
getNewton
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createPoundForce
(
UErrorCode
&
status
)
;
static
MeasureUnit
getPoundForce
(
)
;
#
endif
static
MeasureUnit
*
createGigahertz
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getGigahertz
(
)
;
#
endif
static
MeasureUnit
*
createHertz
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getHertz
(
)
;
#
endif
static
MeasureUnit
*
createKilohertz
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKilohertz
(
)
;
#
endif
static
MeasureUnit
*
createMegahertz
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMegahertz
(
)
;
#
endif
static
MeasureUnit
*
createAstronomicalUnit
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getAstronomicalUnit
(
)
;
#
endif
static
MeasureUnit
*
createCentimeter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCentimeter
(
)
;
#
endif
static
MeasureUnit
*
createDecimeter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getDecimeter
(
)
;
#
endif
static
MeasureUnit
*
createFathom
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getFathom
(
)
;
#
endif
static
MeasureUnit
*
createFoot
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getFoot
(
)
;
#
endif
static
MeasureUnit
*
createFurlong
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getFurlong
(
)
;
#
endif
static
MeasureUnit
*
createInch
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getInch
(
)
;
#
endif
static
MeasureUnit
*
createKilometer
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKilometer
(
)
;
#
endif
static
MeasureUnit
*
createLightYear
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getLightYear
(
)
;
#
endif
static
MeasureUnit
*
createMeter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMeter
(
)
;
#
endif
static
MeasureUnit
*
createMicrometer
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMicrometer
(
)
;
#
endif
static
MeasureUnit
*
createMile
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMile
(
)
;
#
endif
static
MeasureUnit
*
createMileScandinavian
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMileScandinavian
(
)
;
#
endif
static
MeasureUnit
*
createMillimeter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMillimeter
(
)
;
#
endif
static
MeasureUnit
*
createNanometer
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getNanometer
(
)
;
#
endif
static
MeasureUnit
*
createNauticalMile
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getNauticalMile
(
)
;
#
endif
static
MeasureUnit
*
createParsec
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getParsec
(
)
;
#
endif
static
MeasureUnit
*
createPicometer
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getPicometer
(
)
;
#
endif
static
MeasureUnit
*
createPoint
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getPoint
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createSolarRadius
(
UErrorCode
&
status
)
;
static
MeasureUnit
getSolarRadius
(
)
;
#
endif
static
MeasureUnit
*
createYard
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getYard
(
)
;
#
endif
static
MeasureUnit
*
createLux
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getLux
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createSolarLuminosity
(
UErrorCode
&
status
)
;
static
MeasureUnit
getSolarLuminosity
(
)
;
#
endif
static
MeasureUnit
*
createCarat
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCarat
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createDalton
(
UErrorCode
&
status
)
;
static
MeasureUnit
getDalton
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createEarthMass
(
UErrorCode
&
status
)
;
static
MeasureUnit
getEarthMass
(
)
;
#
endif
static
MeasureUnit
*
createGram
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getGram
(
)
;
#
endif
static
MeasureUnit
*
createKilogram
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKilogram
(
)
;
#
endif
static
MeasureUnit
*
createMetricTon
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMetricTon
(
)
;
#
endif
static
MeasureUnit
*
createMicrogram
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMicrogram
(
)
;
#
endif
static
MeasureUnit
*
createMilligram
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMilligram
(
)
;
#
endif
static
MeasureUnit
*
createOunce
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getOunce
(
)
;
#
endif
static
MeasureUnit
*
createOunceTroy
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getOunceTroy
(
)
;
#
endif
static
MeasureUnit
*
createPound
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getPound
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createSolarMass
(
UErrorCode
&
status
)
;
static
MeasureUnit
getSolarMass
(
)
;
#
endif
static
MeasureUnit
*
createStone
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getStone
(
)
;
#
endif
static
MeasureUnit
*
createTon
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getTon
(
)
;
#
endif
static
MeasureUnit
*
createGigawatt
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getGigawatt
(
)
;
#
endif
static
MeasureUnit
*
createHorsepower
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getHorsepower
(
)
;
#
endif
static
MeasureUnit
*
createKilowatt
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKilowatt
(
)
;
#
endif
static
MeasureUnit
*
createMegawatt
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMegawatt
(
)
;
#
endif
static
MeasureUnit
*
createMilliwatt
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMilliwatt
(
)
;
#
endif
static
MeasureUnit
*
createWatt
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getWatt
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createAtmosphere
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getAtmosphere
(
)
;
#
endif
static
MeasureUnit
*
createHectopascal
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getHectopascal
(
)
;
#
endif
static
MeasureUnit
*
createInchHg
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getInchHg
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createKilopascal
(
UErrorCode
&
status
)
;
static
MeasureUnit
getKilopascal
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createMegapascal
(
UErrorCode
&
status
)
;
static
MeasureUnit
getMegapascal
(
)
;
#
endif
static
MeasureUnit
*
createMillibar
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMillibar
(
)
;
#
endif
static
MeasureUnit
*
createMillimeterOfMercury
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMillimeterOfMercury
(
)
;
#
endif
static
MeasureUnit
*
createPoundPerSquareInch
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getPoundPerSquareInch
(
)
;
#
endif
static
MeasureUnit
*
createKilometerPerHour
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKilometerPerHour
(
)
;
#
endif
static
MeasureUnit
*
createKnot
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKnot
(
)
;
#
endif
static
MeasureUnit
*
createMeterPerSecond
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMeterPerSecond
(
)
;
#
endif
static
MeasureUnit
*
createMilePerHour
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMilePerHour
(
)
;
#
endif
static
MeasureUnit
*
createCelsius
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCelsius
(
)
;
#
endif
static
MeasureUnit
*
createFahrenheit
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getFahrenheit
(
)
;
#
endif
static
MeasureUnit
*
createGenericTemperature
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getGenericTemperature
(
)
;
#
endif
static
MeasureUnit
*
createKelvin
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getKelvin
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createNewtonMeter
(
UErrorCode
&
status
)
;
static
MeasureUnit
getNewtonMeter
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createPoundFoot
(
UErrorCode
&
status
)
;
static
MeasureUnit
getPoundFoot
(
)
;
#
endif
static
MeasureUnit
*
createAcreFoot
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getAcreFoot
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createBarrel
(
UErrorCode
&
status
)
;
static
MeasureUnit
getBarrel
(
)
;
#
endif
static
MeasureUnit
*
createBushel
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getBushel
(
)
;
#
endif
static
MeasureUnit
*
createCentiliter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCentiliter
(
)
;
#
endif
static
MeasureUnit
*
createCubicCentimeter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCubicCentimeter
(
)
;
#
endif
static
MeasureUnit
*
createCubicFoot
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCubicFoot
(
)
;
#
endif
static
MeasureUnit
*
createCubicInch
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCubicInch
(
)
;
#
endif
static
MeasureUnit
*
createCubicKilometer
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCubicKilometer
(
)
;
#
endif
static
MeasureUnit
*
createCubicMeter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCubicMeter
(
)
;
#
endif
static
MeasureUnit
*
createCubicMile
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCubicMile
(
)
;
#
endif
static
MeasureUnit
*
createCubicYard
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCubicYard
(
)
;
#
endif
static
MeasureUnit
*
createCup
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCup
(
)
;
#
endif
static
MeasureUnit
*
createCupMetric
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getCupMetric
(
)
;
#
endif
static
MeasureUnit
*
createDeciliter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getDeciliter
(
)
;
#
endif
static
MeasureUnit
*
createFluidOunce
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getFluidOunce
(
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createFluidOunceImperial
(
UErrorCode
&
status
)
;
static
MeasureUnit
getFluidOunceImperial
(
)
;
#
endif
static
MeasureUnit
*
createGallon
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getGallon
(
)
;
#
endif
static
MeasureUnit
*
createGallonImperial
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getGallonImperial
(
)
;
#
endif
static
MeasureUnit
*
createHectoliter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getHectoliter
(
)
;
#
endif
static
MeasureUnit
*
createLiter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getLiter
(
)
;
#
endif
static
MeasureUnit
*
createMegaliter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMegaliter
(
)
;
#
endif
static
MeasureUnit
*
createMilliliter
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getMilliliter
(
)
;
#
endif
static
MeasureUnit
*
createPint
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getPint
(
)
;
#
endif
static
MeasureUnit
*
createPintMetric
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getPintMetric
(
)
;
#
endif
static
MeasureUnit
*
createQuart
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getQuart
(
)
;
#
endif
static
MeasureUnit
*
createTablespoon
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getTablespoon
(
)
;
#
endif
static
MeasureUnit
*
createTeaspoon
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
getTeaspoon
(
)
;
#
endif
protected
:
#
ifndef
U_HIDE_INTERNAL_API
void
initTime
(
const
char
*
timeId
)
;
void
initCurrency
(
const
char
*
isoCurrency
)
;
void
initNoUnit
(
const
char
*
subtype
)
;
#
endif
private
:
int32_t
fTypeId
;
int32_t
fSubTypeId
;
char
fCurrency
[
4
]
;
MeasureUnit
(
int32_t
typeId
int32_t
subTypeId
)
:
fTypeId
(
typeId
)
fSubTypeId
(
subTypeId
)
{
fCurrency
[
0
]
=
0
;
}
void
setTo
(
int32_t
typeId
int32_t
subTypeId
)
;
int32_t
getOffset
(
)
const
;
static
MeasureUnit
*
create
(
int
typeId
int
subTypeId
UErrorCode
&
status
)
;
}
;
U_NAMESPACE_END
#
endif
#
endif
