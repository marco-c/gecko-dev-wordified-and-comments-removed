#
ifndef
__MEASUREUNIT_H__
#
define
__MEASUREUNIT_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
unistr
.
h
"
U_NAMESPACE_BEGIN
class
StringEnumeration
;
class
U_I18N_API
MeasureUnit
:
public
UObject
{
public
:
MeasureUnit
(
)
:
fTypeId
(
0
)
fSubTypeId
(
0
)
{
fCurrency
[
0
]
=
0
;
}
MeasureUnit
(
const
MeasureUnit
&
other
)
;
MeasureUnit
&
operator
=
(
const
MeasureUnit
&
other
)
;
virtual
UObject
*
clone
(
)
const
;
virtual
~
MeasureUnit
(
)
;
virtual
UBool
operator
=
=
(
const
UObject
&
other
)
const
;
UBool
operator
!
=
(
const
UObject
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
const
char
*
getType
(
)
const
;
const
char
*
getSubtype
(
)
const
;
static
int32_t
getAvailable
(
MeasureUnit
*
destArray
int32_t
destCapacity
UErrorCode
&
errorCode
)
;
static
int32_t
getAvailable
(
const
char
*
type
MeasureUnit
*
destArray
int32_t
destCapacity
UErrorCode
&
errorCode
)
;
static
StringEnumeration
*
getAvailableTypes
(
UErrorCode
&
errorCode
)
;
static
UClassID
U_EXPORT2
getStaticClassID
(
void
)
;
virtual
UClassID
getDynamicClassID
(
void
)
const
;
#
ifndef
U_HIDE_INTERNAL_API
int32_t
getIndex
(
)
const
;
static
int32_t
getIndexCount
(
)
;
static
int32_t
internalGetIndexForTypeAndSubtype
(
const
char
*
type
const
char
*
subtype
)
;
static
MeasureUnit
*
resolveUnitPerUnit
(
const
MeasureUnit
&
unit
const
MeasureUnit
&
perUnit
)
;
#
endif
static
MeasureUnit
*
createGForce
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMeterPerSecondSquared
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createArcMinute
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createArcSecond
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createDegree
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createRadian
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createRevolutionAngle
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createAcre
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createHectare
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createSquareCentimeter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createSquareFoot
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createSquareInch
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createSquareKilometer
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createSquareMeter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createSquareMile
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createSquareYard
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKarat
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createMilligramPerDeciliter
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createMillimolePerLiter
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createPartPerMillion
(
UErrorCode
&
status
)
;
#
endif
static
MeasureUnit
*
createLiterPer100Kilometers
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createLiterPerKilometer
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMilePerGallon
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createMilePerGallonImperial
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createEast
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createNorth
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createSouth
(
UErrorCode
&
status
)
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createWest
(
UErrorCode
&
status
)
;
#
endif
static
MeasureUnit
*
createBit
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createByte
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createGigabit
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createGigabyte
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKilobit
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKilobyte
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMegabit
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMegabyte
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createTerabit
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createTerabyte
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCentury
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createDay
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createHour
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMicrosecond
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMillisecond
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMinute
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMonth
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createNanosecond
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createSecond
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createWeek
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createYear
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createAmpere
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMilliampere
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createOhm
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createVolt
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCalorie
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createFoodcalorie
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createJoule
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKilocalorie
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKilojoule
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKilowattHour
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createGigahertz
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createHertz
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKilohertz
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMegahertz
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createAstronomicalUnit
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCentimeter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createDecimeter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createFathom
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createFoot
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createFurlong
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createInch
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKilometer
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createLightYear
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMeter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMicrometer
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMile
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMileScandinavian
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMillimeter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createNanometer
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createNauticalMile
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createParsec
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createPicometer
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createYard
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createLux
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCarat
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createGram
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKilogram
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMetricTon
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMicrogram
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMilligram
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createOunce
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createOunceTroy
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createPound
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createStone
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createTon
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createGigawatt
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createHorsepower
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKilowatt
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMegawatt
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMilliwatt
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createWatt
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createHectopascal
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createInchHg
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMillibar
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMillimeterOfMercury
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createPoundPerSquareInch
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKilometerPerHour
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKnot
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMeterPerSecond
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMilePerHour
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCelsius
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createFahrenheit
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createGenericTemperature
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createKelvin
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createAcreFoot
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createBushel
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCentiliter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCubicCentimeter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCubicFoot
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCubicInch
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCubicKilometer
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCubicMeter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCubicMile
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCubicYard
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCup
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createCupMetric
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createDeciliter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createFluidOunce
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createGallon
(
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
static
MeasureUnit
*
createGallonImperial
(
UErrorCode
&
status
)
;
#
endif
static
MeasureUnit
*
createHectoliter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createLiter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMegaliter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createMilliliter
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createPint
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createPintMetric
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createQuart
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createTablespoon
(
UErrorCode
&
status
)
;
static
MeasureUnit
*
createTeaspoon
(
UErrorCode
&
status
)
;
protected
:
#
ifndef
U_HIDE_INTERNAL_API
void
initTime
(
const
char
*
timeId
)
;
void
initCurrency
(
const
char
*
isoCurrency
)
;
#
endif
private
:
int32_t
fTypeId
;
int32_t
fSubTypeId
;
char
fCurrency
[
4
]
;
MeasureUnit
(
int32_t
typeId
int32_t
subTypeId
)
:
fTypeId
(
typeId
)
fSubTypeId
(
subTypeId
)
{
fCurrency
[
0
]
=
0
;
}
void
setTo
(
int32_t
typeId
int32_t
subTypeId
)
;
int32_t
getOffset
(
)
const
;
static
MeasureUnit
*
create
(
int
typeId
int
subTypeId
UErrorCode
&
status
)
;
}
;
U_NAMESPACE_END
#
endif
#
endif
