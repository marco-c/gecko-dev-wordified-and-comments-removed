#
ifndef
__ULOCDATA_H__
#
define
__ULOCDATA_H__
#
include
"
unicode
/
ures
.
h
"
#
include
"
unicode
/
uloc
.
h
"
#
include
"
unicode
/
uset
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
include
"
unicode
/
localpointer
.
h
"
#
endif
struct
ULocaleData
;
typedef
struct
ULocaleData
ULocaleData
;
typedef
enum
ULocaleDataExemplarSetType
{
ULOCDATA_ES_STANDARD
=
0
ULOCDATA_ES_AUXILIARY
=
1
ULOCDATA_ES_INDEX
=
2
ULOCDATA_ES_PUNCTUATION
=
3
#
ifndef
U_HIDE_DEPRECATED_API
ULOCDATA_ES_COUNT
=
4
#
endif
}
ULocaleDataExemplarSetType
;
typedef
enum
ULocaleDataDelimiterType
{
ULOCDATA_QUOTATION_START
=
0
ULOCDATA_QUOTATION_END
=
1
ULOCDATA_ALT_QUOTATION_START
=
2
ULOCDATA_ALT_QUOTATION_END
=
3
#
ifndef
U_HIDE_DEPRECATED_API
ULOCDATA_DELIMITER_COUNT
=
4
#
endif
}
ULocaleDataDelimiterType
;
U_CAPI
ULocaleData
*
U_EXPORT2
ulocdata_open
(
const
char
*
localeID
UErrorCode
*
status
)
;
U_CAPI
void
U_EXPORT2
ulocdata_close
(
ULocaleData
*
uld
)
;
#
if
U_SHOW_CPLUSPLUS_API
U_NAMESPACE_BEGIN
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalULocaleDataPointer
ULocaleData
ulocdata_close
)
;
U_NAMESPACE_END
#
endif
U_CAPI
void
U_EXPORT2
ulocdata_setNoSubstitute
(
ULocaleData
*
uld
UBool
setting
)
;
U_CAPI
UBool
U_EXPORT2
ulocdata_getNoSubstitute
(
ULocaleData
*
uld
)
;
U_CAPI
USet
*
U_EXPORT2
ulocdata_getExemplarSet
(
ULocaleData
*
uld
USet
*
fillIn
uint32_t
options
ULocaleDataExemplarSetType
extype
UErrorCode
*
status
)
;
U_CAPI
int32_t
U_EXPORT2
ulocdata_getDelimiter
(
ULocaleData
*
uld
ULocaleDataDelimiterType
type
UChar
*
result
int32_t
resultLength
UErrorCode
*
status
)
;
typedef
enum
UMeasurementSystem
{
UMS_SI
UMS_US
UMS_UK
#
ifndef
U_HIDE_DEPRECATED_API
UMS_LIMIT
#
endif
}
UMeasurementSystem
;
U_CAPI
UMeasurementSystem
U_EXPORT2
ulocdata_getMeasurementSystem
(
const
char
*
localeID
UErrorCode
*
status
)
;
U_CAPI
void
U_EXPORT2
ulocdata_getPaperSize
(
const
char
*
localeID
int32_t
*
height
int32_t
*
width
UErrorCode
*
status
)
;
U_CAPI
void
U_EXPORT2
ulocdata_getCLDRVersion
(
UVersionInfo
versionArray
UErrorCode
*
status
)
;
U_CAPI
int32_t
U_EXPORT2
ulocdata_getLocaleDisplayPattern
(
ULocaleData
*
uld
UChar
*
pattern
int32_t
patternCapacity
UErrorCode
*
status
)
;
U_CAPI
int32_t
U_EXPORT2
ulocdata_getLocaleSeparator
(
ULocaleData
*
uld
UChar
*
separator
int32_t
separatorCapacity
UErrorCode
*
status
)
;
#
endif
