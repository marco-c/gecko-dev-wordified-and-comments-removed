#
ifndef
__RELDATEFMT_H
#
define
__RELDATEFMT_H
#
include
"
unicode
/
utypes
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
include
"
unicode
/
uobject
.
h
"
#
include
"
unicode
/
udisplaycontext
.
h
"
#
include
"
unicode
/
ureldatefmt
.
h
"
#
include
"
unicode
/
locid
.
h
"
#
include
"
unicode
/
formattedvalue
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
typedef
enum
UDateRelativeUnit
{
UDAT_RELATIVE_SECONDS
UDAT_RELATIVE_MINUTES
UDAT_RELATIVE_HOURS
UDAT_RELATIVE_DAYS
UDAT_RELATIVE_WEEKS
UDAT_RELATIVE_MONTHS
UDAT_RELATIVE_YEARS
#
ifndef
U_HIDE_DEPRECATED_API
UDAT_RELATIVE_UNIT_COUNT
#
endif
}
UDateRelativeUnit
;
typedef
enum
UDateAbsoluteUnit
{
UDAT_ABSOLUTE_SUNDAY
UDAT_ABSOLUTE_MONDAY
UDAT_ABSOLUTE_TUESDAY
UDAT_ABSOLUTE_WEDNESDAY
UDAT_ABSOLUTE_THURSDAY
UDAT_ABSOLUTE_FRIDAY
UDAT_ABSOLUTE_SATURDAY
UDAT_ABSOLUTE_DAY
UDAT_ABSOLUTE_WEEK
UDAT_ABSOLUTE_MONTH
UDAT_ABSOLUTE_YEAR
UDAT_ABSOLUTE_NOW
UDAT_ABSOLUTE_QUARTER
UDAT_ABSOLUTE_HOUR
UDAT_ABSOLUTE_MINUTE
#
ifndef
U_HIDE_DEPRECATED_API
UDAT_ABSOLUTE_UNIT_COUNT
=
UDAT_ABSOLUTE_NOW
+
4
#
endif
}
UDateAbsoluteUnit
;
typedef
enum
UDateDirection
{
UDAT_DIRECTION_LAST_2
UDAT_DIRECTION_LAST
UDAT_DIRECTION_THIS
UDAT_DIRECTION_NEXT
UDAT_DIRECTION_NEXT_2
UDAT_DIRECTION_PLAIN
#
ifndef
U_HIDE_DEPRECATED_API
UDAT_DIRECTION_COUNT
#
endif
}
UDateDirection
;
#
if
!
UCONFIG_NO_BREAK_ITERATION
U_NAMESPACE_BEGIN
class
BreakIterator
;
class
RelativeDateTimeCacheData
;
class
SharedNumberFormat
;
class
SharedPluralRules
;
class
SharedBreakIterator
;
class
NumberFormat
;
class
UnicodeString
;
class
FormattedRelativeDateTime
;
class
FormattedRelativeDateTimeData
;
class
U_I18N_API
FormattedRelativeDateTime
:
public
UMemory
public
FormattedValue
{
public
:
FormattedRelativeDateTime
(
)
:
fData
(
nullptr
)
fErrorCode
(
U_INVALID_STATE_ERROR
)
{
}
FormattedRelativeDateTime
(
FormattedRelativeDateTime
&
&
src
)
U_NOEXCEPT
;
virtual
~
FormattedRelativeDateTime
(
)
U_OVERRIDE
;
FormattedRelativeDateTime
(
const
FormattedRelativeDateTime
&
)
=
delete
;
FormattedRelativeDateTime
&
operator
=
(
const
FormattedRelativeDateTime
&
)
=
delete
;
FormattedRelativeDateTime
&
operator
=
(
FormattedRelativeDateTime
&
&
src
)
U_NOEXCEPT
;
UnicodeString
toString
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
UnicodeString
toTempString
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
Appendable
&
appendTo
(
Appendable
&
appendable
UErrorCode
&
status
)
const
U_OVERRIDE
;
UBool
nextPosition
(
ConstrainedFieldPosition
&
cfpos
UErrorCode
&
status
)
const
U_OVERRIDE
;
private
:
FormattedRelativeDateTimeData
*
fData
;
UErrorCode
fErrorCode
;
explicit
FormattedRelativeDateTime
(
FormattedRelativeDateTimeData
*
results
)
:
fData
(
results
)
fErrorCode
(
U_ZERO_ERROR
)
{
}
explicit
FormattedRelativeDateTime
(
UErrorCode
errorCode
)
:
fData
(
nullptr
)
fErrorCode
(
errorCode
)
{
}
friend
class
RelativeDateTimeFormatter
;
}
;
class
U_I18N_API
RelativeDateTimeFormatter
:
public
UObject
{
public
:
RelativeDateTimeFormatter
(
UErrorCode
&
status
)
;
RelativeDateTimeFormatter
(
const
Locale
&
locale
UErrorCode
&
status
)
;
RelativeDateTimeFormatter
(
const
Locale
&
locale
NumberFormat
*
nfToAdopt
UErrorCode
&
status
)
;
RelativeDateTimeFormatter
(
const
Locale
&
locale
NumberFormat
*
nfToAdopt
UDateRelativeDateTimeFormatterStyle
style
UDisplayContext
capitalizationContext
UErrorCode
&
status
)
;
RelativeDateTimeFormatter
(
const
RelativeDateTimeFormatter
&
other
)
;
RelativeDateTimeFormatter
&
operator
=
(
const
RelativeDateTimeFormatter
&
other
)
;
virtual
~
RelativeDateTimeFormatter
(
)
;
UnicodeString
&
format
(
double
quantity
UDateDirection
direction
UDateRelativeUnit
unit
UnicodeString
&
appendTo
UErrorCode
&
status
)
const
;
FormattedRelativeDateTime
formatToValue
(
double
quantity
UDateDirection
direction
UDateRelativeUnit
unit
UErrorCode
&
status
)
const
;
UnicodeString
&
format
(
UDateDirection
direction
UDateAbsoluteUnit
unit
UnicodeString
&
appendTo
UErrorCode
&
status
)
const
;
FormattedRelativeDateTime
formatToValue
(
UDateDirection
direction
UDateAbsoluteUnit
unit
UErrorCode
&
status
)
const
;
UnicodeString
&
formatNumeric
(
double
offset
URelativeDateTimeUnit
unit
UnicodeString
&
appendTo
UErrorCode
&
status
)
const
;
FormattedRelativeDateTime
formatNumericToValue
(
double
offset
URelativeDateTimeUnit
unit
UErrorCode
&
status
)
const
;
UnicodeString
&
format
(
double
offset
URelativeDateTimeUnit
unit
UnicodeString
&
appendTo
UErrorCode
&
status
)
const
;
FormattedRelativeDateTime
formatToValue
(
double
offset
URelativeDateTimeUnit
unit
UErrorCode
&
status
)
const
;
UnicodeString
&
combineDateAndTime
(
const
UnicodeString
&
relativeDateString
const
UnicodeString
&
timeString
UnicodeString
&
appendTo
UErrorCode
&
status
)
const
;
const
NumberFormat
&
getNumberFormat
(
)
const
;
UDisplayContext
getCapitalizationContext
(
)
const
;
UDateRelativeDateTimeFormatterStyle
getFormatStyle
(
)
const
;
private
:
const
RelativeDateTimeCacheData
*
fCache
;
const
SharedNumberFormat
*
fNumberFormat
;
const
SharedPluralRules
*
fPluralRules
;
UDateRelativeDateTimeFormatterStyle
fStyle
;
UDisplayContext
fContext
;
const
SharedBreakIterator
*
fOptBreakIterator
;
Locale
fLocale
;
void
init
(
NumberFormat
*
nfToAdopt
BreakIterator
*
brkIter
UErrorCode
&
status
)
;
UnicodeString
&
adjustForContext
(
UnicodeString
&
)
const
;
UBool
checkNoAdjustForContext
(
UErrorCode
&
status
)
const
;
template
<
typename
F
typename
.
.
.
Args
>
UnicodeString
&
doFormat
(
F
callback
UnicodeString
&
appendTo
UErrorCode
&
status
Args
.
.
.
args
)
const
;
template
<
typename
F
typename
.
.
.
Args
>
FormattedRelativeDateTime
doFormatToValue
(
F
callback
UErrorCode
&
status
Args
.
.
.
args
)
const
;
void
formatImpl
(
double
quantity
UDateDirection
direction
UDateRelativeUnit
unit
FormattedRelativeDateTimeData
&
output
UErrorCode
&
status
)
const
;
void
formatAbsoluteImpl
(
UDateDirection
direction
UDateAbsoluteUnit
unit
FormattedRelativeDateTimeData
&
output
UErrorCode
&
status
)
const
;
void
formatNumericImpl
(
double
offset
URelativeDateTimeUnit
unit
FormattedRelativeDateTimeData
&
output
UErrorCode
&
status
)
const
;
void
formatRelativeImpl
(
double
offset
URelativeDateTimeUnit
unit
FormattedRelativeDateTimeData
&
output
UErrorCode
&
status
)
const
;
}
;
U_NAMESPACE_END
#
endif
#
endif
#
endif
#
endif
