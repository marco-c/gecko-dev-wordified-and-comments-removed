#
ifndef
__UDISPLAYOPTIONS_H__
#
define
__UDISPLAYOPTIONS_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
uversion
.
h
"
typedef
enum
UDisplayOptionsGrammaticalCase
{
UDISPOPT_GRAMMATICAL_CASE_UNDEFINED
=
0
UDISPOPT_GRAMMATICAL_CASE_ABLATIVE
=
1
UDISPOPT_GRAMMATICAL_CASE_ACCUSATIVE
=
2
UDISPOPT_GRAMMATICAL_CASE_COMITATIVE
=
3
UDISPOPT_GRAMMATICAL_CASE_DATIVE
=
4
UDISPOPT_GRAMMATICAL_CASE_ERGATIVE
=
5
UDISPOPT_GRAMMATICAL_CASE_GENITIVE
=
6
UDISPOPT_GRAMMATICAL_CASE_INSTRUMENTAL
=
7
UDISPOPT_GRAMMATICAL_CASE_LOCATIVE
=
8
UDISPOPT_GRAMMATICAL_CASE_LOCATIVE_COPULATIVE
=
9
UDISPOPT_GRAMMATICAL_CASE_NOMINATIVE
=
10
UDISPOPT_GRAMMATICAL_CASE_OBLIQUE
=
11
UDISPOPT_GRAMMATICAL_CASE_PREPOSITIONAL
=
12
UDISPOPT_GRAMMATICAL_CASE_SOCIATIVE
=
13
UDISPOPT_GRAMMATICAL_CASE_VOCATIVE
=
14
}
UDisplayOptionsGrammaticalCase
;
U_CAPI
const
char
*
U_EXPORT2
udispopt_getGrammaticalCaseIdentifier
(
UDisplayOptionsGrammaticalCase
grammaticalCase
)
;
U_CAPI
UDisplayOptionsGrammaticalCase
U_EXPORT2
udispopt_fromGrammaticalCaseIdentifier
(
const
char
*
identifier
)
;
typedef
enum
UDisplayOptionsPluralCategory
{
UDISPOPT_PLURAL_CATEGORY_UNDEFINED
=
0
UDISPOPT_PLURAL_CATEGORY_ZERO
=
1
UDISPOPT_PLURAL_CATEGORY_ONE
=
2
UDISPOPT_PLURAL_CATEGORY_TWO
=
3
UDISPOPT_PLURAL_CATEGORY_FEW
=
4
UDISPOPT_PLURAL_CATEGORY_MANY
=
5
UDISPOPT_PLURAL_CATEGORY_OTHER
=
6
}
UDisplayOptionsPluralCategory
;
U_CAPI
const
char
*
U_EXPORT2
udispopt_getPluralCategoryIdentifier
(
UDisplayOptionsPluralCategory
pluralCategory
)
;
U_CAPI
UDisplayOptionsPluralCategory
U_EXPORT2
udispopt_fromPluralCategoryIdentifier
(
const
char
*
identifier
)
;
typedef
enum
UDisplayOptionsNounClass
{
UDISPOPT_NOUN_CLASS_UNDEFINED
=
0
UDISPOPT_NOUN_CLASS_OTHER
=
1
UDISPOPT_NOUN_CLASS_NEUTER
=
2
UDISPOPT_NOUN_CLASS_FEMININE
=
3
UDISPOPT_NOUN_CLASS_MASCULINE
=
4
UDISPOPT_NOUN_CLASS_ANIMATE
=
5
UDISPOPT_NOUN_CLASS_INANIMATE
=
6
UDISPOPT_NOUN_CLASS_PERSONAL
=
7
UDISPOPT_NOUN_CLASS_COMMON
=
8
}
UDisplayOptionsNounClass
;
U_CAPI
const
char
*
U_EXPORT2
udispopt_getNounClassIdentifier
(
UDisplayOptionsNounClass
nounClass
)
;
U_CAPI
UDisplayOptionsNounClass
U_EXPORT2
udispopt_fromNounClassIdentifier
(
const
char
*
identifier
)
;
typedef
enum
UDisplayOptionsCapitalization
{
UDISPOPT_CAPITALIZATION_UNDEFINED
=
0
UDISPOPT_CAPITALIZATION_BEGINNING_OF_SENTENCE
=
1
UDISPOPT_CAPITALIZATION_MIDDLE_OF_SENTENCE
=
2
UDISPOPT_CAPITALIZATION_STANDALONE
=
3
UDISPOPT_CAPITALIZATION_UI_LIST_OR_MENU
=
4
}
UDisplayOptionsCapitalization
;
typedef
enum
UDisplayOptionsNameStyle
{
UDISPOPT_NAME_STYLE_UNDEFINED
=
0
UDISPOPT_NAME_STYLE_STANDARD_NAMES
=
1
UDISPOPT_NAME_STYLE_DIALECT_NAMES
=
2
}
UDisplayOptionsNameStyle
;
typedef
enum
UDisplayOptionsDisplayLength
{
UDISPOPT_DISPLAY_LENGTH_UNDEFINED
=
0
UDISPOPT_DISPLAY_LENGTH_FULL
=
1
UDISPOPT_DISPLAY_LENGTH_SHORT
=
2
}
UDisplayOptionsDisplayLength
;
typedef
enum
UDisplayOptionsSubstituteHandling
{
UDISPOPT_SUBSTITUTE_HANDLING_UNDEFINED
=
0
UDISPOPT_SUBSTITUTE_HANDLING_SUBSTITUTE
=
1
UDISPOPT_SUBSTITUTE_HANDLING_NO_SUBSTITUTE
=
2
}
UDisplayOptionsSubstituteHandling
;
#
endif
#
endif
