#
ifndef
__USIMPLENUMBERFORMATTER_H__
#
define
__USIMPLENUMBERFORMATTER_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
uformattednumber
.
h
"
#
include
"
unicode
/
unumberoptions
.
h
"
typedef
enum
USimpleNumberSign
{
UNUM_SIMPLE_NUMBER_PLUS_SIGN
UNUM_SIMPLE_NUMBER_NO_SIGN
UNUM_SIMPLE_NUMBER_MINUS_SIGN
}
USimpleNumberSign
;
struct
USimpleNumber
;
typedef
struct
USimpleNumber
USimpleNumber
;
struct
USimpleNumberFormatter
;
typedef
struct
USimpleNumberFormatter
USimpleNumberFormatter
;
U_CAPI
USimpleNumber
*
U_EXPORT2
usnum_openForInt64
(
int64_t
value
UErrorCode
*
ec
)
;
U_CAPI
void
U_EXPORT2
usnum_setToInt64
(
USimpleNumber
*
unumber
int64_t
value
UErrorCode
*
ec
)
;
U_CAPI
void
U_EXPORT2
usnum_multiplyByPowerOfTen
(
USimpleNumber
*
unumber
int32_t
power
UErrorCode
*
ec
)
;
U_CAPI
void
U_EXPORT2
usnum_roundTo
(
USimpleNumber
*
unumber
int32_t
power
UNumberFormatRoundingMode
roundingMode
UErrorCode
*
ec
)
;
U_CAPI
void
U_EXPORT2
usnum_setMinimumIntegerDigits
(
USimpleNumber
*
unumber
int32_t
minimumIntegerDigits
UErrorCode
*
ec
)
;
U_CAPI
void
U_EXPORT2
usnum_setMinimumFractionDigits
(
USimpleNumber
*
unumber
int32_t
minimumFractionDigits
UErrorCode
*
ec
)
;
#
ifndef
U_HIDE_DRAFT_API
U_CAPI
void
U_EXPORT2
usnum_setMaximumIntegerDigits
(
USimpleNumber
*
unumber
int32_t
maximumIntegerDigits
UErrorCode
*
ec
)
;
#
endif
U_CAPI
void
U_EXPORT2
usnum_setSign
(
USimpleNumber
*
unumber
USimpleNumberSign
sign
UErrorCode
*
ec
)
;
U_CAPI
USimpleNumberFormatter
*
U_EXPORT2
usnumf_openForLocale
(
const
char
*
locale
UErrorCode
*
ec
)
;
U_CAPI
USimpleNumberFormatter
*
U_EXPORT2
usnumf_openForLocaleAndGroupingStrategy
(
const
char
*
locale
UNumberGroupingStrategy
groupingStrategy
UErrorCode
*
ec
)
;
U_CAPI
void
U_EXPORT2
usnumf_format
(
const
USimpleNumberFormatter
*
uformatter
USimpleNumber
*
unumber
UFormattedNumber
*
uresult
UErrorCode
*
ec
)
;
U_CAPI
void
U_EXPORT2
usnumf_formatInt64
(
const
USimpleNumberFormatter
*
uformatter
int64_t
value
UFormattedNumber
*
uresult
UErrorCode
*
ec
)
;
U_CAPI
void
U_EXPORT2
usnum_close
(
USimpleNumber
*
unumber
)
;
U_CAPI
void
U_EXPORT2
usnumf_close
(
USimpleNumberFormatter
*
uformatter
)
;
#
if
U_SHOW_CPLUSPLUS_API
U_NAMESPACE_BEGIN
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalUSimpleNumberPointer
USimpleNumber
usnum_close
)
;
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalUSimpleNumberFormatterPointer
USimpleNumberFormatter
usnumf_close
)
;
U_NAMESPACE_END
#
endif
#
endif
#
endif
