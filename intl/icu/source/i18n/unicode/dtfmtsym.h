#
ifndef
DTFMTSYM_H
#
define
DTFMTSYM_H
#
include
"
unicode
/
utypes
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
calendar
.
h
"
#
include
"
unicode
/
strenum
.
h
"
#
include
"
unicode
/
uobject
.
h
"
#
include
"
unicode
/
locid
.
h
"
#
include
"
unicode
/
udat
.
h
"
#
include
"
unicode
/
ures
.
h
"
U_NAMESPACE_BEGIN
class
SimpleDateFormat
;
class
Hashtable
;
class
U_I18N_API
DateFormatSymbols
U_FINAL
:
public
UObject
{
public
:
DateFormatSymbols
(
UErrorCode
&
status
)
;
DateFormatSymbols
(
const
Locale
&
locale
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_INTERNAL_API
DateFormatSymbols
(
const
char
*
type
UErrorCode
&
status
)
;
DateFormatSymbols
(
const
Locale
&
locale
const
char
*
type
UErrorCode
&
status
)
;
#
endif
DateFormatSymbols
(
const
DateFormatSymbols
&
)
;
DateFormatSymbols
&
operator
=
(
const
DateFormatSymbols
&
)
;
virtual
~
DateFormatSymbols
(
)
;
bool
operator
=
=
(
const
DateFormatSymbols
&
other
)
const
;
bool
operator
!
=
(
const
DateFormatSymbols
&
other
)
const
{
return
!
operator
=
=
(
other
)
;
}
const
UnicodeString
*
getEras
(
int32_t
&
count
)
const
;
void
setEras
(
const
UnicodeString
*
eras
int32_t
count
)
;
const
UnicodeString
*
getEraNames
(
int32_t
&
count
)
const
;
void
setEraNames
(
const
UnicodeString
*
eraNames
int32_t
count
)
;
const
UnicodeString
*
getNarrowEras
(
int32_t
&
count
)
const
;
void
setNarrowEras
(
const
UnicodeString
*
narrowEras
int32_t
count
)
;
const
UnicodeString
*
getMonths
(
int32_t
&
count
)
const
;
void
setMonths
(
const
UnicodeString
*
months
int32_t
count
)
;
const
UnicodeString
*
getShortMonths
(
int32_t
&
count
)
const
;
void
setShortMonths
(
const
UnicodeString
*
shortMonths
int32_t
count
)
;
enum
DtContextType
{
FORMAT
STANDALONE
#
ifndef
U_HIDE_DEPRECATED_API
DT_CONTEXT_COUNT
#
endif
}
;
enum
DtWidthType
{
ABBREVIATED
WIDE
NARROW
SHORT
#
ifndef
U_HIDE_DEPRECATED_API
DT_WIDTH_COUNT
=
4
#
endif
}
;
const
UnicodeString
*
getMonths
(
int32_t
&
count
DtContextType
context
DtWidthType
width
)
const
;
void
setMonths
(
const
UnicodeString
*
months
int32_t
count
DtContextType
context
DtWidthType
width
)
;
const
UnicodeString
*
getWeekdays
(
int32_t
&
count
)
const
;
void
setWeekdays
(
const
UnicodeString
*
weekdays
int32_t
count
)
;
const
UnicodeString
*
getShortWeekdays
(
int32_t
&
count
)
const
;
void
setShortWeekdays
(
const
UnicodeString
*
abbrevWeekdays
int32_t
count
)
;
const
UnicodeString
*
getWeekdays
(
int32_t
&
count
DtContextType
context
DtWidthType
width
)
const
;
void
setWeekdays
(
const
UnicodeString
*
weekdays
int32_t
count
DtContextType
context
DtWidthType
width
)
;
const
UnicodeString
*
getQuarters
(
int32_t
&
count
DtContextType
context
DtWidthType
width
)
const
;
void
setQuarters
(
const
UnicodeString
*
quarters
int32_t
count
DtContextType
context
DtWidthType
width
)
;
const
UnicodeString
*
getAmPmStrings
(
int32_t
&
count
)
const
;
void
setAmPmStrings
(
const
UnicodeString
*
ampms
int32_t
count
)
;
#
ifndef
U_HIDE_INTERNAL_API
static
const
char16_t
DEFAULT_TIME_SEPARATOR
=
0x003a
;
static
const
char16_t
ALTERNATE_TIME_SEPARATOR
=
0x002e
;
UnicodeString
&
getTimeSeparatorString
(
UnicodeString
&
result
)
const
;
void
setTimeSeparatorString
(
const
UnicodeString
&
newTimeSeparator
)
;
#
endif
const
UnicodeString
*
getYearNames
(
int32_t
&
count
DtContextType
context
DtWidthType
width
)
const
;
void
setYearNames
(
const
UnicodeString
*
yearNames
int32_t
count
DtContextType
context
DtWidthType
width
)
;
const
UnicodeString
*
getZodiacNames
(
int32_t
&
count
DtContextType
context
DtWidthType
width
)
const
;
void
setZodiacNames
(
const
UnicodeString
*
zodiacNames
int32_t
count
DtContextType
context
DtWidthType
width
)
;
#
ifndef
U_HIDE_INTERNAL_API
enum
EMonthPatternType
{
kLeapMonthPatternFormatWide
kLeapMonthPatternFormatAbbrev
kLeapMonthPatternFormatNarrow
kLeapMonthPatternStandaloneWide
kLeapMonthPatternStandaloneAbbrev
kLeapMonthPatternStandaloneNarrow
kLeapMonthPatternNumeric
kMonthPatternsCount
}
;
const
UnicodeString
*
getLeapMonthPatterns
(
int32_t
&
count
)
const
;
#
endif
#
ifndef
U_HIDE_DEPRECATED_API
const
UnicodeString
*
*
getZoneStrings
(
int32_t
&
rowCount
int32_t
&
columnCount
)
const
;
#
endif
void
setZoneStrings
(
const
UnicodeString
*
const
*
strings
int32_t
rowCount
int32_t
columnCount
)
;
static
const
char16_t
*
U_EXPORT2
getPatternUChars
(
void
)
;
UnicodeString
&
getLocalPatternChars
(
UnicodeString
&
result
)
const
;
void
setLocalPatternChars
(
const
UnicodeString
&
newLocalPatternChars
)
;
Locale
getLocale
(
ULocDataLocaleType
type
UErrorCode
&
status
)
const
;
enum
ECapitalizationContextUsageType
{
#
ifndef
U_HIDE_INTERNAL_API
kCapContextUsageOther
=
0
kCapContextUsageMonthFormat
kCapContextUsageMonthStandalone
kCapContextUsageMonthNarrow
kCapContextUsageDayFormat
kCapContextUsageDayStandalone
kCapContextUsageDayNarrow
kCapContextUsageEraWide
kCapContextUsageEraAbbrev
kCapContextUsageEraNarrow
kCapContextUsageZoneLong
kCapContextUsageZoneShort
kCapContextUsageMetazoneLong
kCapContextUsageMetazoneShort
#
endif
kCapContextUsageTypeCount
=
14
}
;
virtual
UClassID
getDynamicClassID
(
)
const
override
;
static
UClassID
U_EXPORT2
getStaticClassID
(
)
;
private
:
friend
class
SimpleDateFormat
;
friend
class
DateFormatSymbolsSingleSetter
;
UnicodeString
*
fEras
;
int32_t
fErasCount
;
UnicodeString
*
fEraNames
;
int32_t
fEraNamesCount
;
UnicodeString
*
fNarrowEras
;
int32_t
fNarrowErasCount
;
UnicodeString
*
fMonths
;
int32_t
fMonthsCount
;
UnicodeString
*
fShortMonths
;
int32_t
fShortMonthsCount
;
UnicodeString
*
fNarrowMonths
;
int32_t
fNarrowMonthsCount
;
UnicodeString
*
fStandaloneMonths
;
int32_t
fStandaloneMonthsCount
;
UnicodeString
*
fStandaloneShortMonths
;
int32_t
fStandaloneShortMonthsCount
;
UnicodeString
*
fStandaloneNarrowMonths
;
int32_t
fStandaloneNarrowMonthsCount
;
UnicodeString
*
fWeekdays
;
int32_t
fWeekdaysCount
;
UnicodeString
*
fShortWeekdays
;
int32_t
fShortWeekdaysCount
;
UnicodeString
*
fShorterWeekdays
;
int32_t
fShorterWeekdaysCount
;
UnicodeString
*
fNarrowWeekdays
;
int32_t
fNarrowWeekdaysCount
;
UnicodeString
*
fStandaloneWeekdays
;
int32_t
fStandaloneWeekdaysCount
;
UnicodeString
*
fStandaloneShortWeekdays
;
int32_t
fStandaloneShortWeekdaysCount
;
UnicodeString
*
fStandaloneShorterWeekdays
;
int32_t
fStandaloneShorterWeekdaysCount
;
UnicodeString
*
fStandaloneNarrowWeekdays
;
int32_t
fStandaloneNarrowWeekdaysCount
;
UnicodeString
*
fAmPms
;
int32_t
fAmPmsCount
;
UnicodeString
*
fNarrowAmPms
;
int32_t
fNarrowAmPmsCount
;
UnicodeString
fTimeSeparator
;
UnicodeString
*
fQuarters
;
int32_t
fQuartersCount
;
UnicodeString
*
fShortQuarters
;
int32_t
fShortQuartersCount
;
UnicodeString
*
fNarrowQuarters
;
int32_t
fNarrowQuartersCount
;
UnicodeString
*
fStandaloneQuarters
;
int32_t
fStandaloneQuartersCount
;
UnicodeString
*
fStandaloneShortQuarters
;
int32_t
fStandaloneShortQuartersCount
;
UnicodeString
*
fStandaloneNarrowQuarters
;
int32_t
fStandaloneNarrowQuartersCount
;
UnicodeString
*
fLeapMonthPatterns
;
int32_t
fLeapMonthPatternsCount
;
UnicodeString
*
fShortYearNames
;
int32_t
fShortYearNamesCount
;
UnicodeString
*
fShortZodiacNames
;
int32_t
fShortZodiacNamesCount
;
UnicodeString
*
*
fZoneStrings
;
UnicodeString
*
*
fLocaleZoneStrings
;
int32_t
fZoneStringsRowCount
;
int32_t
fZoneStringsColCount
;
Locale
fZSFLocale
;
UnicodeString
fLocalPatternChars
;
UBool
fCapitalization
[
kCapContextUsageTypeCount
]
[
2
]
;
UnicodeString
*
fAbbreviatedDayPeriods
;
int32_t
fAbbreviatedDayPeriodsCount
;
UnicodeString
*
fWideDayPeriods
;
int32_t
fWideDayPeriodsCount
;
UnicodeString
*
fNarrowDayPeriods
;
int32_t
fNarrowDayPeriodsCount
;
UnicodeString
*
fStandaloneAbbreviatedDayPeriods
;
int32_t
fStandaloneAbbreviatedDayPeriodsCount
;
UnicodeString
*
fStandaloneWideDayPeriods
;
int32_t
fStandaloneWideDayPeriodsCount
;
UnicodeString
*
fStandaloneNarrowDayPeriods
;
int32_t
fStandaloneNarrowDayPeriodsCount
;
private
:
char
validLocale
[
ULOC_FULLNAME_CAPACITY
]
;
char
actualLocale
[
ULOC_FULLNAME_CAPACITY
]
;
DateFormatSymbols
(
)
;
void
initializeData
(
const
Locale
&
locale
const
char
*
type
UErrorCode
&
status
UBool
useLastResortData
=
false
)
;
static
void
assignArray
(
UnicodeString
*
&
dstArray
int32_t
&
dstCount
const
UnicodeString
*
srcArray
int32_t
srcCount
)
;
static
UBool
arrayCompare
(
const
UnicodeString
*
array1
const
UnicodeString
*
array2
int32_t
count
)
;
void
createZoneStrings
(
const
UnicodeString
*
const
*
otherStrings
)
;
void
dispose
(
void
)
;
void
copyData
(
const
DateFormatSymbols
&
other
)
;
void
initZoneStringsArray
(
void
)
;
void
disposeZoneStrings
(
void
)
;
static
UDateFormatField
U_EXPORT2
getPatternCharIndex
(
char16_t
c
)
;
static
UBool
U_EXPORT2
isNumericField
(
UDateFormatField
f
int32_t
count
)
;
static
UBool
U_EXPORT2
isNumericPatternChar
(
char16_t
c
int32_t
count
)
;
public
:
#
ifndef
U_HIDE_INTERNAL_API
static
DateFormatSymbols
*
U_EXPORT2
createForLocale
(
const
Locale
&
locale
UErrorCode
&
status
)
;
#
endif
}
;
U_NAMESPACE_END
#
endif
#
endif
#
endif
