#
ifndef
__UNUMBERRANGEFORMATTER_H__
#
define
__UNUMBERRANGEFORMATTER_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
parseerr
.
h
"
#
include
"
unicode
/
ufieldpositer
.
h
"
#
include
"
unicode
/
umisc
.
h
"
#
include
"
unicode
/
uformattedvalue
.
h
"
#
include
"
unicode
/
uformattable
.
h
"
typedef
enum
UNumberRangeCollapse
{
UNUM_RANGE_COLLAPSE_AUTO
UNUM_RANGE_COLLAPSE_NONE
UNUM_RANGE_COLLAPSE_UNIT
UNUM_RANGE_COLLAPSE_ALL
}
UNumberRangeCollapse
;
typedef
enum
UNumberRangeIdentityFallback
{
UNUM_IDENTITY_FALLBACK_SINGLE_VALUE
UNUM_IDENTITY_FALLBACK_APPROXIMATELY_OR_SINGLE_VALUE
UNUM_IDENTITY_FALLBACK_APPROXIMATELY
UNUM_IDENTITY_FALLBACK_RANGE
}
UNumberRangeIdentityFallback
;
typedef
enum
UNumberRangeIdentityResult
{
UNUM_IDENTITY_RESULT_EQUAL_BEFORE_ROUNDING
UNUM_IDENTITY_RESULT_EQUAL_AFTER_ROUNDING
UNUM_IDENTITY_RESULT_NOT_EQUAL
#
ifndef
U_HIDE_INTERNAL_API
UNUM_IDENTITY_RESULT_COUNT
#
endif
}
UNumberRangeIdentityResult
;
#
ifndef
U_HIDE_DRAFT_API
struct
UNumberRangeFormatter
;
typedef
struct
UNumberRangeFormatter
UNumberRangeFormatter
;
struct
UFormattedNumberRange
;
typedef
struct
UFormattedNumberRange
UFormattedNumberRange
;
U_CAPI
UNumberRangeFormatter
*
U_EXPORT2
unumrf_openForSkeletonWithCollapseAndIdentityFallback
(
const
UChar
*
skeleton
int32_t
skeletonLen
UNumberRangeCollapse
collapse
UNumberRangeIdentityFallback
identityFallback
const
char
*
locale
UParseError
*
perror
UErrorCode
*
ec
)
;
U_CAPI
UFormattedNumberRange
*
U_EXPORT2
unumrf_openResult
(
UErrorCode
*
ec
)
;
U_CAPI
void
U_EXPORT2
unumrf_formatDoubleRange
(
const
UNumberRangeFormatter
*
uformatter
double
first
double
second
UFormattedNumberRange
*
uresult
UErrorCode
*
ec
)
;
U_CAPI
void
U_EXPORT2
unumrf_formatDecimalRange
(
const
UNumberRangeFormatter
*
uformatter
const
char
*
first
int32_t
firstLen
const
char
*
second
int32_t
secondLen
UFormattedNumberRange
*
uresult
UErrorCode
*
ec
)
;
U_CAPI
const
UFormattedValue
*
U_EXPORT2
unumrf_resultAsValue
(
const
UFormattedNumberRange
*
uresult
UErrorCode
*
ec
)
;
U_CAPI
UNumberRangeIdentityResult
U_EXPORT2
unumrf_resultGetIdentityResult
(
const
UFormattedNumberRange
*
uresult
UErrorCode
*
ec
)
;
U_CAPI
int32_t
U_EXPORT2
unumrf_resultGetFirstDecimalNumber
(
const
UFormattedNumberRange
*
uresult
char
*
dest
int32_t
destCapacity
UErrorCode
*
ec
)
;
U_CAPI
int32_t
U_EXPORT2
unumrf_resultGetSecondDecimalNumber
(
const
UFormattedNumberRange
*
uresult
char
*
dest
int32_t
destCapacity
UErrorCode
*
ec
)
;
U_CAPI
void
U_EXPORT2
unumrf_close
(
UNumberRangeFormatter
*
uformatter
)
;
U_CAPI
void
U_EXPORT2
unumrf_closeResult
(
UFormattedNumberRange
*
uresult
)
;
#
if
U_SHOW_CPLUSPLUS_API
U_NAMESPACE_BEGIN
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalUNumberRangeFormatterPointer
UNumberRangeFormatter
unumrf_close
)
;
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalUFormattedNumberRangePointer
UFormattedNumberRange
unumrf_closeResult
)
;
U_NAMESPACE_END
#
endif
#
endif
#
endif
#
endif
