#
ifndef
__FORMATTEDNUMBER_H__
#
define
__FORMATTEDNUMBER_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
uobject
.
h
"
#
include
"
unicode
/
formattedvalue
.
h
"
#
include
"
unicode
/
measunit
.
h
"
#
include
"
unicode
/
udisplayoptions
.
h
"
U_NAMESPACE_BEGIN
class
FieldPositionIteratorHandler
;
namespace
number
{
namespace
impl
{
class
DecimalQuantity
;
class
UFormattedNumberData
;
struct
UFormattedNumberImpl
;
}
class
U_I18N_API
FormattedNumber
:
public
UMemory
public
FormattedValue
{
public
:
FormattedNumber
(
)
:
fData
(
nullptr
)
fErrorCode
(
U_INVALID_STATE_ERROR
)
{
}
FormattedNumber
(
FormattedNumber
&
&
src
)
noexcept
;
virtual
~
FormattedNumber
(
)
override
;
FormattedNumber
(
const
FormattedNumber
&
)
=
delete
;
FormattedNumber
&
operator
=
(
const
FormattedNumber
&
)
=
delete
;
FormattedNumber
&
operator
=
(
FormattedNumber
&
&
src
)
noexcept
;
UnicodeString
toString
(
UErrorCode
&
status
)
const
override
;
UnicodeString
toTempString
(
UErrorCode
&
status
)
const
override
;
Appendable
&
appendTo
(
Appendable
&
appendable
UErrorCode
&
status
)
const
override
;
UBool
nextPosition
(
ConstrainedFieldPosition
&
cfpos
UErrorCode
&
status
)
const
override
;
template
<
typename
StringClass
>
inline
StringClass
toDecimalNumber
(
UErrorCode
&
status
)
const
;
MeasureUnit
getOutputUnit
(
UErrorCode
&
status
)
const
;
#
ifndef
U_HIDE_DRAFT_API
UDisplayOptionsNounClass
getNounClass
(
UErrorCode
&
status
)
const
;
#
endif
#
ifndef
U_HIDE_INTERNAL_API
void
getDecimalQuantity
(
impl
:
:
DecimalQuantity
&
output
UErrorCode
&
status
)
const
;
void
getAllFieldPositionsImpl
(
FieldPositionIteratorHandler
&
fpih
UErrorCode
&
status
)
const
;
#
endif
private
:
impl
:
:
UFormattedNumberData
*
fData
;
UErrorCode
fErrorCode
;
explicit
FormattedNumber
(
impl
:
:
UFormattedNumberData
*
results
)
:
fData
(
results
)
fErrorCode
(
U_ZERO_ERROR
)
{
}
explicit
FormattedNumber
(
UErrorCode
errorCode
)
:
fData
(
nullptr
)
fErrorCode
(
errorCode
)
{
}
void
toDecimalNumber
(
ByteSink
&
sink
UErrorCode
&
status
)
const
;
friend
class
LocalizedNumberFormatter
;
friend
class
SimpleNumberFormatter
;
friend
struct
impl
:
:
UFormattedNumberImpl
;
}
;
template
<
typename
StringClass
>
StringClass
FormattedNumber
:
:
toDecimalNumber
(
UErrorCode
&
status
)
const
{
StringClass
result
;
StringByteSink
<
StringClass
>
sink
(
&
result
)
;
toDecimalNumber
(
sink
status
)
;
return
result
;
}
}
U_NAMESPACE_END
#
endif
#
endif
#
endif
