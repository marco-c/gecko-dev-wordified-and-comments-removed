#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
ifndef
__UNUMBERFORMATTER_H__
#
define
__UNUMBERFORMATTER_H__
#
include
"
unicode
/
parseerr
.
h
"
#
include
"
unicode
/
ufieldpositer
.
h
"
#
include
"
unicode
/
umisc
.
h
"
#
include
"
unicode
/
uformattedvalue
.
h
"
#
ifndef
U_HIDE_DRAFT_API
typedef
enum
UNumberUnitWidth
{
UNUM_UNIT_WIDTH_NARROW
UNUM_UNIT_WIDTH_SHORT
UNUM_UNIT_WIDTH_FULL_NAME
UNUM_UNIT_WIDTH_ISO_CODE
UNUM_UNIT_WIDTH_HIDDEN
UNUM_UNIT_WIDTH_COUNT
}
UNumberUnitWidth
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
typedef
enum
UNumberGroupingStrategy
{
UNUM_GROUPING_OFF
UNUM_GROUPING_MIN2
UNUM_GROUPING_AUTO
UNUM_GROUPING_ON_ALIGNED
UNUM_GROUPING_THOUSANDS
#
ifndef
U_HIDE_INTERNAL_API
UNUM_GROUPING_COUNT
#
endif
}
UNumberGroupingStrategy
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
typedef
enum
UNumberSignDisplay
{
UNUM_SIGN_AUTO
UNUM_SIGN_ALWAYS
UNUM_SIGN_NEVER
UNUM_SIGN_ACCOUNTING
UNUM_SIGN_ACCOUNTING_ALWAYS
UNUM_SIGN_EXCEPT_ZERO
UNUM_SIGN_ACCOUNTING_EXCEPT_ZERO
UNUM_SIGN_COUNT
}
UNumberSignDisplay
;
#
endif
#
ifndef
U_HIDE_DRAFT_API
typedef
enum
UNumberDecimalSeparatorDisplay
{
UNUM_DECIMAL_SEPARATOR_AUTO
UNUM_DECIMAL_SEPARATOR_ALWAYS
UNUM_DECIMAL_SEPARATOR_COUNT
}
UNumberDecimalSeparatorDisplay
;
#
endif
struct
UNumberFormatter
;
typedef
struct
UNumberFormatter
UNumberFormatter
;
struct
UFormattedNumber
;
typedef
struct
UFormattedNumber
UFormattedNumber
;
U_STABLE
UNumberFormatter
*
U_EXPORT2
unumf_openForSkeletonAndLocale
(
const
UChar
*
skeleton
int32_t
skeletonLen
const
char
*
locale
UErrorCode
*
ec
)
;
#
ifndef
U_HIDE_DRAFT_API
U_DRAFT
UNumberFormatter
*
U_EXPORT2
unumf_openForSkeletonAndLocaleWithError
(
const
UChar
*
skeleton
int32_t
skeletonLen
const
char
*
locale
UParseError
*
perror
UErrorCode
*
ec
)
;
#
endif
U_STABLE
UFormattedNumber
*
U_EXPORT2
unumf_openResult
(
UErrorCode
*
ec
)
;
U_STABLE
void
U_EXPORT2
unumf_formatInt
(
const
UNumberFormatter
*
uformatter
int64_t
value
UFormattedNumber
*
uresult
UErrorCode
*
ec
)
;
U_STABLE
void
U_EXPORT2
unumf_formatDouble
(
const
UNumberFormatter
*
uformatter
double
value
UFormattedNumber
*
uresult
UErrorCode
*
ec
)
;
U_STABLE
void
U_EXPORT2
unumf_formatDecimal
(
const
UNumberFormatter
*
uformatter
const
char
*
value
int32_t
valueLen
UFormattedNumber
*
uresult
UErrorCode
*
ec
)
;
#
ifndef
U_HIDE_DRAFT_API
U_DRAFT
const
UFormattedValue
*
U_EXPORT2
unumf_resultAsValue
(
const
UFormattedNumber
*
uresult
UErrorCode
*
ec
)
;
#
endif
U_STABLE
int32_t
U_EXPORT2
unumf_resultToString
(
const
UFormattedNumber
*
uresult
UChar
*
buffer
int32_t
bufferCapacity
UErrorCode
*
ec
)
;
U_STABLE
UBool
U_EXPORT2
unumf_resultNextFieldPosition
(
const
UFormattedNumber
*
uresult
UFieldPosition
*
ufpos
UErrorCode
*
ec
)
;
U_STABLE
void
U_EXPORT2
unumf_resultGetAllFieldPositions
(
const
UFormattedNumber
*
uresult
UFieldPositionIterator
*
ufpositer
UErrorCode
*
ec
)
;
U_STABLE
void
U_EXPORT2
unumf_close
(
UNumberFormatter
*
uformatter
)
;
U_STABLE
void
U_EXPORT2
unumf_closeResult
(
UFormattedNumber
*
uresult
)
;
#
if
U_SHOW_CPLUSPLUS_API
U_NAMESPACE_BEGIN
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalUNumberFormatterPointer
UNumberFormatter
unumf_close
)
;
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalUFormattedNumberPointer
UFormattedNumber
unumf_closeResult
)
;
U_NAMESPACE_END
#
endif
#
endif
#
endif
