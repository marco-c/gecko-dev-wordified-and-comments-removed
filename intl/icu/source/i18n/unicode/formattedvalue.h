#
ifndef
__FORMATTEDVALUE_H__
#
define
__FORMATTEDVALUE_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
appendable
.
h
"
#
include
"
unicode
/
fpositer
.
h
"
#
include
"
unicode
/
unistr
.
h
"
#
include
"
unicode
/
uformattedvalue
.
h
"
U_NAMESPACE_BEGIN
class
U_I18N_API
ConstrainedFieldPosition
:
public
UMemory
{
public
:
ConstrainedFieldPosition
(
)
;
~
ConstrainedFieldPosition
(
)
;
void
reset
(
)
;
void
constrainCategory
(
int32_t
category
)
;
void
constrainField
(
int32_t
category
int32_t
field
)
;
inline
int32_t
getCategory
(
)
const
{
return
fCategory
;
}
inline
int32_t
getField
(
)
const
{
return
fField
;
}
inline
int32_t
getStart
(
)
const
{
return
fStart
;
}
inline
int32_t
getLimit
(
)
const
{
return
fLimit
;
}
inline
int64_t
getInt64IterationContext
(
)
const
{
return
fContext
;
}
void
setInt64IterationContext
(
int64_t
context
)
;
UBool
matchesField
(
int32_t
category
int32_t
field
)
const
;
void
setState
(
int32_t
category
int32_t
field
int32_t
start
int32_t
limit
)
;
private
:
int64_t
fContext
=
0LL
;
int32_t
fField
=
0
;
int32_t
fStart
=
0
;
int32_t
fLimit
=
0
;
int32_t
fCategory
=
UFIELD_CATEGORY_UNDEFINED
;
int8_t
fConstraint
=
0
;
}
;
class
U_I18N_API
FormattedValue
{
public
:
virtual
~
FormattedValue
(
)
;
virtual
UnicodeString
toString
(
UErrorCode
&
status
)
const
=
0
;
virtual
UnicodeString
toTempString
(
UErrorCode
&
status
)
const
=
0
;
virtual
Appendable
&
appendTo
(
Appendable
&
appendable
UErrorCode
&
status
)
const
=
0
;
virtual
UBool
nextPosition
(
ConstrainedFieldPosition
&
cfpos
UErrorCode
&
status
)
const
=
0
;
}
;
U_NAMESPACE_END
#
endif
#
endif
#
endif
