#
include
"
unicode
/
utypes
.
h
"
#
ifndef
MESSAGEFORMAT2_H
#
define
MESSAGEFORMAT2_H
#
if
U_SHOW_CPLUSPLUS_API
#
if
!
UCONFIG_NO_NORMALIZATION
#
if
!
UCONFIG_NO_FORMATTING
#
if
!
UCONFIG_NO_MF2
#
include
"
unicode
/
messageformat2_arguments
.
h
"
#
include
"
unicode
/
messageformat2_data_model
.
h
"
#
include
"
unicode
/
messageformat2_function_registry
.
h
"
#
include
"
unicode
/
normalizer2
.
h
"
#
include
"
unicode
/
unistr
.
h
"
#
ifndef
U_HIDE_DEPRECATED_API
U_NAMESPACE_BEGIN
namespace
message2
{
class
Environment
;
class
MessageContext
;
class
StaticErrors
;
class
InternalValue
;
class
U_I18N_API
MessageFormatter
:
public
UObject
{
public
:
MessageFormatter
&
operator
=
(
MessageFormatter
&
&
)
noexcept
;
virtual
~
MessageFormatter
(
)
;
UnicodeString
formatToString
(
const
MessageArguments
&
arguments
UErrorCode
&
status
)
;
FormattedMessage
format
(
const
MessageArguments
&
arguments
UErrorCode
&
status
)
const
{
(
void
)
arguments
;
if
(
U_SUCCESS
(
status
)
)
{
status
=
U_UNSUPPORTED_ERROR
;
}
return
FormattedMessage
(
status
)
;
}
const
Locale
&
getLocale
(
)
const
{
return
locale
;
}
UnicodeString
getPattern
(
)
const
;
const
MFDataModel
&
getDataModel
(
)
const
;
typedef
enum
UMFErrorHandlingBehavior
{
U_MF_BEST_EFFORT
=
0
U_MF_STRICT
}
UMFErrorHandlingBehavior
;
class
U_I18N_API
Builder
:
public
UObject
{
private
:
friend
class
MessageFormatter
;
UnicodeString
pattern
;
bool
hasPattern
=
false
;
bool
hasDataModel
=
false
;
MFDataModel
dataModel
;
UnicodeString
normalizedInput
;
StaticErrors
*
errors
;
Locale
locale
;
const
MFFunctionRegistry
*
customMFFunctionRegistry
;
bool
signalErrors
=
false
;
void
clearState
(
)
;
public
:
Builder
&
setLocale
(
const
Locale
&
locale
)
;
Builder
&
setPattern
(
const
UnicodeString
&
pattern
UParseError
&
parseError
UErrorCode
&
status
)
;
Builder
&
setFunctionRegistry
(
const
MFFunctionRegistry
&
functionRegistry
)
;
Builder
&
setDataModel
(
MFDataModel
&
&
dataModel
)
;
Builder
&
setErrorHandlingBehavior
(
UMFErrorHandlingBehavior
type
)
;
MessageFormatter
build
(
UErrorCode
&
status
)
const
;
Builder
(
UErrorCode
&
status
)
;
virtual
~
Builder
(
)
;
}
;
const
UnicodeString
&
getNormalizedPattern
(
)
const
{
return
normalizedInput
;
}
private
:
friend
class
Builder
;
friend
class
Checker
;
friend
class
MessageArguments
;
friend
class
MessageContext
;
MessageFormatter
(
const
MessageFormatter
:
:
Builder
&
builder
UErrorCode
&
status
)
;
MessageFormatter
(
)
=
delete
;
const
MessageFormatter
&
operator
=
(
const
MessageFormatter
&
)
=
delete
;
void
resolveSelectors
(
MessageContext
&
const
Environment
&
env
UErrorCode
&
UVector
&
)
const
;
void
filterVariants
(
const
UVector
&
UVector
&
UErrorCode
&
)
const
;
void
sortVariants
(
const
UVector
&
UVector
&
UErrorCode
&
)
const
;
void
matchSelectorKeys
(
const
UVector
&
MessageContext
&
InternalValue
*
rv
UVector
&
UErrorCode
&
)
const
;
void
resolvePreferences
(
MessageContext
&
UVector
&
UVector
&
UErrorCode
&
)
const
;
UnicodeString
normalizeNFC
(
const
UnicodeString
&
)
const
;
[
[
nodiscard
]
]
FormattedPlaceholder
formatLiteral
(
const
data_model
:
:
Literal
&
)
const
;
void
formatPattern
(
MessageContext
&
const
Environment
&
const
data_model
:
:
Pattern
&
UErrorCode
&
UnicodeString
&
)
const
;
[
[
nodiscard
]
]
InternalValue
*
evalFunctionCall
(
FormattedPlaceholder
&
&
argument
MessageContext
&
context
UErrorCode
&
status
)
const
;
[
[
nodiscard
]
]
InternalValue
*
evalFunctionCall
(
const
FunctionName
&
functionName
InternalValue
*
argument
FunctionOptions
&
&
options
MessageContext
&
context
UErrorCode
&
status
)
const
;
[
[
nodiscard
]
]
InternalValue
*
formatExpression
(
const
Environment
&
const
data_model
:
:
Expression
&
MessageContext
&
UErrorCode
&
)
const
;
[
[
nodiscard
]
]
FunctionOptions
resolveOptions
(
const
Environment
&
env
const
OptionMap
&
MessageContext
&
UErrorCode
&
)
const
;
[
[
nodiscard
]
]
InternalValue
*
formatOperand
(
const
Environment
&
const
data_model
:
:
Operand
&
MessageContext
&
UErrorCode
&
)
const
;
[
[
nodiscard
]
]
FormattedPlaceholder
evalArgument
(
const
data_model
:
:
VariableName
&
MessageContext
&
UErrorCode
&
)
const
;
void
formatSelectors
(
MessageContext
&
context
const
Environment
&
env
UErrorCode
&
status
UnicodeString
&
result
)
const
;
bool
hasCustomMFFunctionRegistry
(
)
const
{
return
(
customMFFunctionRegistry
!
=
nullptr
)
;
}
const
MFFunctionRegistry
&
getCustomMFFunctionRegistry
(
)
const
;
bool
isCustomFormatter
(
const
FunctionName
&
)
const
;
FormatterFactory
*
lookupFormatterFactory
(
const
FunctionName
&
UErrorCode
&
status
)
const
;
bool
isBuiltInSelector
(
const
FunctionName
&
)
const
;
bool
isBuiltInFormatter
(
const
FunctionName
&
)
const
;
bool
isCustomSelector
(
const
FunctionName
&
)
const
;
const
SelectorFactory
*
lookupSelectorFactory
(
MessageContext
&
const
FunctionName
&
UErrorCode
&
)
const
;
bool
isSelector
(
const
FunctionName
&
fn
)
const
{
return
isBuiltInSelector
(
fn
)
|
|
isCustomSelector
(
fn
)
;
}
bool
isFormatter
(
const
FunctionName
&
fn
)
const
{
return
isBuiltInFormatter
(
fn
)
|
|
isCustomFormatter
(
fn
)
;
}
const
Formatter
*
lookupFormatter
(
const
FunctionName
&
UErrorCode
&
)
const
;
Selector
*
getSelector
(
MessageContext
&
const
FunctionName
&
UErrorCode
&
)
const
;
Formatter
*
getFormatter
(
const
FunctionName
&
UErrorCode
&
)
const
;
bool
getDefaultFormatterNameByType
(
const
UnicodeString
&
FunctionName
&
)
const
;
void
checkDeclarations
(
MessageContext
&
Environment
*
&
UErrorCode
&
)
const
;
void
check
(
MessageContext
&
const
Environment
&
const
data_model
:
:
Expression
&
UErrorCode
&
)
const
;
void
check
(
MessageContext
&
const
Environment
&
const
data_model
:
:
Operand
&
UErrorCode
&
)
const
;
void
check
(
MessageContext
&
const
Environment
&
const
OptionMap
&
UErrorCode
&
)
const
;
void
initErrors
(
UErrorCode
&
)
;
void
clearErrors
(
)
const
;
void
cleanup
(
)
noexcept
;
Locale
locale
;
MFFunctionRegistry
standardMFFunctionRegistry
;
const
MFFunctionRegistry
*
customMFFunctionRegistry
;
MFDataModel
dataModel
;
UnicodeString
normalizedInput
;
StaticErrors
*
errors
=
nullptr
;
bool
signalErrors
=
false
;
const
Normalizer2
*
nfcNormalizer
=
nullptr
;
}
;
}
U_NAMESPACE_END
#
endif
#
endif
#
endif
#
endif
#
endif
#
endif
