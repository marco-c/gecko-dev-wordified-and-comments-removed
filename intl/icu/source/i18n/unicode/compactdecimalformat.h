#
ifndef
__COMPACT_DECIMAL_FORMAT_H__
#
define
__COMPACT_DECIMAL_FORMAT_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
decimfmt
.
h
"
struct
UHashtable
;
U_NAMESPACE_BEGIN
class
PluralRules
;
class
U_I18N_API
CompactDecimalFormat
:
public
DecimalFormat
{
public
:
static
CompactDecimalFormat
*
U_EXPORT2
createInstance
(
const
Locale
&
inLocale
UNumberCompactStyle
style
UErrorCode
&
status
)
;
CompactDecimalFormat
(
const
CompactDecimalFormat
&
source
)
;
~
CompactDecimalFormat
(
)
U_OVERRIDE
;
CompactDecimalFormat
&
operator
=
(
const
CompactDecimalFormat
&
rhs
)
;
Format
*
clone
(
)
const
U_OVERRIDE
;
using
DecimalFormat
:
:
format
;
void
parse
(
const
UnicodeString
&
text
Formattable
&
result
ParsePosition
&
parsePosition
)
const
U_OVERRIDE
;
void
parse
(
const
UnicodeString
&
text
Formattable
&
result
UErrorCode
&
status
)
const
U_OVERRIDE
;
#
ifndef
U_HIDE_INTERNAL_API
CurrencyAmount
*
parseCurrency
(
const
UnicodeString
&
text
ParsePosition
&
pos
)
const
U_OVERRIDE
;
#
endif
static
UClassID
U_EXPORT2
getStaticClassID
(
)
;
UClassID
getDynamicClassID
(
)
const
U_OVERRIDE
;
private
:
CompactDecimalFormat
(
const
Locale
&
inLocale
UNumberCompactStyle
style
UErrorCode
&
status
)
;
}
;
U_NAMESPACE_END
#
endif
#
endif
