#
ifndef
__SIMPLENUMBERFORMATTERH__
#
define
__SIMPLENUMBERFORMATTERH__
#
include
"
unicode
/
utypes
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
dcfmtsym
.
h
"
#
include
"
unicode
/
usimplenumberformatter
.
h
"
#
include
"
unicode
/
formattednumber
.
h
"
U_NAMESPACE_BEGIN
class
SimpleDateFormat
;
namespace
number
{
namespace
impl
{
class
UFormattedNumberData
;
struct
SimpleMicroProps
;
class
AdoptingSignumModifierStore
;
}
class
U_I18N_API
SimpleNumber
:
public
UMemory
{
public
:
static
SimpleNumber
forInt64
(
int64_t
value
UErrorCode
&
status
)
;
void
multiplyByPowerOfTen
(
int32_t
power
UErrorCode
&
status
)
;
void
roundTo
(
int32_t
power
UNumberFormatRoundingMode
roundingMode
UErrorCode
&
status
)
;
#
ifndef
U_HIDE_DRAFT_API
void
setMaximumIntegerDigits
(
uint32_t
maximumIntegerDigits
UErrorCode
&
status
)
;
#
endif
void
setMinimumIntegerDigits
(
uint32_t
minimumIntegerDigits
UErrorCode
&
status
)
;
void
setMinimumFractionDigits
(
uint32_t
minimumFractionDigits
UErrorCode
&
status
)
;
void
setSign
(
USimpleNumberSign
sign
UErrorCode
&
status
)
;
SimpleNumber
(
)
=
default
;
~
SimpleNumber
(
)
{
cleanup
(
)
;
}
SimpleNumber
(
SimpleNumber
&
&
other
)
noexcept
{
fData
=
other
.
fData
;
fSign
=
other
.
fSign
;
other
.
fData
=
nullptr
;
}
SimpleNumber
&
operator
=
(
SimpleNumber
&
&
other
)
noexcept
{
cleanup
(
)
;
fData
=
other
.
fData
;
fSign
=
other
.
fSign
;
other
.
fData
=
nullptr
;
return
*
this
;
}
private
:
SimpleNumber
(
impl
:
:
UFormattedNumberData
*
data
UErrorCode
&
status
)
;
SimpleNumber
(
const
SimpleNumber
&
)
=
delete
;
SimpleNumber
&
operator
=
(
const
SimpleNumber
&
)
=
delete
;
void
cleanup
(
)
;
impl
:
:
UFormattedNumberData
*
fData
=
nullptr
;
USimpleNumberSign
fSign
=
UNUM_SIMPLE_NUMBER_NO_SIGN
;
friend
class
SimpleNumberFormatter
;
friend
class
icu
:
:
SimpleDateFormat
;
}
;
class
U_I18N_API
SimpleNumberFormatter
:
public
UMemory
{
public
:
static
SimpleNumberFormatter
forLocale
(
const
icu
:
:
Locale
&
locale
UErrorCode
&
status
)
;
static
SimpleNumberFormatter
forLocaleAndGroupingStrategy
(
const
icu
:
:
Locale
&
locale
UNumberGroupingStrategy
groupingStrategy
UErrorCode
&
status
)
;
static
SimpleNumberFormatter
forLocaleAndSymbolsAndGroupingStrategy
(
const
icu
:
:
Locale
&
locale
const
DecimalFormatSymbols
&
symbols
UNumberGroupingStrategy
groupingStrategy
UErrorCode
&
status
)
;
FormattedNumber
format
(
SimpleNumber
value
UErrorCode
&
status
)
const
;
FormattedNumber
formatInt64
(
int64_t
value
UErrorCode
&
status
)
const
{
return
format
(
SimpleNumber
:
:
forInt64
(
value
status
)
status
)
;
}
#
ifndef
U_HIDE_INTERNAL_API
void
formatImpl
(
impl
:
:
UFormattedNumberData
*
data
USimpleNumberSign
sign
UErrorCode
&
status
)
const
;
#
endif
~
SimpleNumberFormatter
(
)
{
cleanup
(
)
;
}
SimpleNumberFormatter
(
)
=
default
;
SimpleNumberFormatter
(
SimpleNumberFormatter
&
&
other
)
noexcept
{
fGroupingStrategy
=
other
.
fGroupingStrategy
;
fOwnedSymbols
=
other
.
fOwnedSymbols
;
fMicros
=
other
.
fMicros
;
fPatternModifier
=
other
.
fPatternModifier
;
other
.
fOwnedSymbols
=
nullptr
;
other
.
fMicros
=
nullptr
;
other
.
fPatternModifier
=
nullptr
;
}
SimpleNumberFormatter
&
operator
=
(
SimpleNumberFormatter
&
&
other
)
noexcept
{
cleanup
(
)
;
fGroupingStrategy
=
other
.
fGroupingStrategy
;
fOwnedSymbols
=
other
.
fOwnedSymbols
;
fMicros
=
other
.
fMicros
;
fPatternModifier
=
other
.
fPatternModifier
;
other
.
fOwnedSymbols
=
nullptr
;
other
.
fMicros
=
nullptr
;
other
.
fPatternModifier
=
nullptr
;
return
*
this
;
}
private
:
void
initialize
(
const
icu
:
:
Locale
&
locale
const
DecimalFormatSymbols
&
symbols
UNumberGroupingStrategy
groupingStrategy
UErrorCode
&
status
)
;
void
cleanup
(
)
;
SimpleNumberFormatter
(
const
SimpleNumberFormatter
&
)
=
delete
;
SimpleNumberFormatter
&
operator
=
(
const
SimpleNumberFormatter
&
)
=
delete
;
UNumberGroupingStrategy
fGroupingStrategy
=
UNUM_GROUPING_AUTO
;
DecimalFormatSymbols
*
fOwnedSymbols
=
nullptr
;
impl
:
:
SimpleMicroProps
*
fMicros
=
nullptr
;
impl
:
:
AdoptingSignumModifierStore
*
fPatternModifier
=
nullptr
;
}
;
}
U_NAMESPACE_END
#
endif
#
endif
#
endif
