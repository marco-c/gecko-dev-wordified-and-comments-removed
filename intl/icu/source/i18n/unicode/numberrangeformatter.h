#
if
!
UCONFIG_NO_FORMATTING
#
ifndef
__NUMBERRANGEFORMATTER_H__
#
define
__NUMBERRANGEFORMATTER_H__
#
include
<
atomic
>
#
include
"
unicode
/
appendable
.
h
"
#
include
"
unicode
/
fieldpos
.
h
"
#
include
"
unicode
/
formattedvalue
.
h
"
#
include
"
unicode
/
fpositer
.
h
"
#
include
"
unicode
/
numberformatter
.
h
"
#
ifndef
U_HIDE_DRAFT_API
typedef
enum
UNumberRangeCollapse
{
UNUM_RANGE_COLLAPSE_AUTO
UNUM_RANGE_COLLAPSE_NONE
UNUM_RANGE_COLLAPSE_UNIT
UNUM_RANGE_COLLAPSE_ALL
}
UNumberRangeCollapse
;
typedef
enum
UNumberRangeIdentityFallback
{
UNUM_IDENTITY_FALLBACK_SINGLE_VALUE
UNUM_IDENTITY_FALLBACK_APPROXIMATELY_OR_SINGLE_VALUE
UNUM_IDENTITY_FALLBACK_APPROXIMATELY
UNUM_IDENTITY_FALLBACK_RANGE
}
UNumberRangeIdentityFallback
;
typedef
enum
UNumberRangeIdentityResult
{
UNUM_IDENTITY_RESULT_EQUAL_BEFORE_ROUNDING
UNUM_IDENTITY_RESULT_EQUAL_AFTER_ROUNDING
UNUM_IDENTITY_RESULT_NOT_EQUAL
#
ifndef
U_HIDE_INTERNAL_API
UNUM_IDENTITY_RESULT_COUNT
#
endif
}
UNumberRangeIdentityResult
;
U_NAMESPACE_BEGIN
namespace
number
{
class
UnlocalizedNumberRangeFormatter
;
class
LocalizedNumberRangeFormatter
;
class
FormattedNumberRange
;
namespace
impl
{
struct
RangeMacroProps
;
class
DecimalQuantity
;
class
UFormattedNumberRangeData
;
class
NumberRangeFormatterImpl
;
}
#
if
U_PLATFORM
=
=
U_PF_WINDOWS
&
&
!
defined
(
U_IN_DOXYGEN
)
}
U_NAMESPACE_END
template
struct
U_I18N_API
std
:
:
atomic
<
U_NAMESPACE_QUALIFIER
number
:
:
impl
:
:
NumberRangeFormatterImpl
*
>
;
U_NAMESPACE_BEGIN
namespace
number
{
#
endif
namespace
impl
{
struct
U_I18N_API
RangeMacroProps
:
public
UMemory
{
UnlocalizedNumberFormatter
formatter1
;
UnlocalizedNumberFormatter
formatter2
;
bool
singleFormatter
=
true
;
UNumberRangeCollapse
collapse
=
UNUM_RANGE_COLLAPSE_AUTO
;
UNumberRangeIdentityFallback
identityFallback
=
UNUM_IDENTITY_FALLBACK_APPROXIMATELY
;
Locale
locale
;
bool
copyErrorTo
(
UErrorCode
&
status
)
const
{
return
formatter1
.
copyErrorTo
(
status
)
|
|
formatter2
.
copyErrorTo
(
status
)
;
}
}
;
}
template
<
typename
Derived
>
class
U_I18N_API
NumberRangeFormatterSettings
{
public
:
Derived
numberFormatterBoth
(
const
UnlocalizedNumberFormatter
&
formatter
)
const
&
;
Derived
numberFormatterBoth
(
const
UnlocalizedNumberFormatter
&
formatter
)
&
&
;
Derived
numberFormatterBoth
(
UnlocalizedNumberFormatter
&
&
formatter
)
const
&
;
Derived
numberFormatterBoth
(
UnlocalizedNumberFormatter
&
&
formatter
)
&
&
;
Derived
numberFormatterFirst
(
const
UnlocalizedNumberFormatter
&
formatterFirst
)
const
&
;
Derived
numberFormatterFirst
(
const
UnlocalizedNumberFormatter
&
formatterFirst
)
&
&
;
Derived
numberFormatterFirst
(
UnlocalizedNumberFormatter
&
&
formatterFirst
)
const
&
;
Derived
numberFormatterFirst
(
UnlocalizedNumberFormatter
&
&
formatterFirst
)
&
&
;
Derived
numberFormatterSecond
(
const
UnlocalizedNumberFormatter
&
formatterSecond
)
const
&
;
Derived
numberFormatterSecond
(
const
UnlocalizedNumberFormatter
&
formatterSecond
)
&
&
;
Derived
numberFormatterSecond
(
UnlocalizedNumberFormatter
&
&
formatterSecond
)
const
&
;
Derived
numberFormatterSecond
(
UnlocalizedNumberFormatter
&
&
formatterSecond
)
&
&
;
Derived
collapse
(
UNumberRangeCollapse
collapse
)
const
&
;
Derived
collapse
(
UNumberRangeCollapse
collapse
)
&
&
;
Derived
identityFallback
(
UNumberRangeIdentityFallback
identityFallback
)
const
&
;
Derived
identityFallback
(
UNumberRangeIdentityFallback
identityFallback
)
&
&
;
LocalPointer
<
Derived
>
clone
(
)
const
&
;
LocalPointer
<
Derived
>
clone
(
)
&
&
;
UBool
copyErrorTo
(
UErrorCode
&
outErrorCode
)
const
{
if
(
U_FAILURE
(
outErrorCode
)
)
{
return
TRUE
;
}
fMacros
.
copyErrorTo
(
outErrorCode
)
;
return
U_FAILURE
(
outErrorCode
)
;
}
private
:
impl
:
:
RangeMacroProps
fMacros
;
NumberRangeFormatterSettings
(
)
=
default
;
friend
class
LocalizedNumberRangeFormatter
;
friend
class
UnlocalizedNumberRangeFormatter
;
}
;
class
U_I18N_API
UnlocalizedNumberRangeFormatter
:
public
NumberRangeFormatterSettings
<
UnlocalizedNumberRangeFormatter
>
public
UMemory
{
public
:
LocalizedNumberRangeFormatter
locale
(
const
icu
:
:
Locale
&
locale
)
const
&
;
LocalizedNumberRangeFormatter
locale
(
const
icu
:
:
Locale
&
locale
)
&
&
;
UnlocalizedNumberRangeFormatter
(
)
=
default
;
UnlocalizedNumberRangeFormatter
(
const
UnlocalizedNumberRangeFormatter
&
other
)
;
UnlocalizedNumberRangeFormatter
(
UnlocalizedNumberRangeFormatter
&
&
src
)
U_NOEXCEPT
;
UnlocalizedNumberRangeFormatter
&
operator
=
(
const
UnlocalizedNumberRangeFormatter
&
other
)
;
UnlocalizedNumberRangeFormatter
&
operator
=
(
UnlocalizedNumberRangeFormatter
&
&
src
)
U_NOEXCEPT
;
private
:
explicit
UnlocalizedNumberRangeFormatter
(
const
NumberRangeFormatterSettings
<
UnlocalizedNumberRangeFormatter
>
&
other
)
;
explicit
UnlocalizedNumberRangeFormatter
(
NumberRangeFormatterSettings
<
UnlocalizedNumberRangeFormatter
>
&
&
src
)
U_NOEXCEPT
;
friend
class
NumberRangeFormatterSettings
<
UnlocalizedNumberRangeFormatter
>
;
friend
class
NumberRangeFormatter
;
}
;
class
U_I18N_API
LocalizedNumberRangeFormatter
:
public
NumberRangeFormatterSettings
<
LocalizedNumberRangeFormatter
>
public
UMemory
{
public
:
FormattedNumberRange
formatFormattableRange
(
const
Formattable
&
first
const
Formattable
&
second
UErrorCode
&
status
)
const
;
LocalizedNumberRangeFormatter
(
)
=
default
;
LocalizedNumberRangeFormatter
(
const
LocalizedNumberRangeFormatter
&
other
)
;
LocalizedNumberRangeFormatter
(
LocalizedNumberRangeFormatter
&
&
src
)
U_NOEXCEPT
;
LocalizedNumberRangeFormatter
&
operator
=
(
const
LocalizedNumberRangeFormatter
&
other
)
;
LocalizedNumberRangeFormatter
&
operator
=
(
LocalizedNumberRangeFormatter
&
&
src
)
U_NOEXCEPT
;
#
ifndef
U_HIDE_INTERNAL_API
void
formatImpl
(
impl
:
:
UFormattedNumberRangeData
&
results
bool
equalBeforeRounding
UErrorCode
&
status
)
const
;
#
endif
~
LocalizedNumberRangeFormatter
(
)
;
private
:
std
:
:
atomic
<
impl
:
:
NumberRangeFormatterImpl
*
>
fAtomicFormatter
=
{
}
;
const
impl
:
:
NumberRangeFormatterImpl
*
getFormatter
(
UErrorCode
&
stauts
)
const
;
explicit
LocalizedNumberRangeFormatter
(
const
NumberRangeFormatterSettings
<
LocalizedNumberRangeFormatter
>
&
other
)
;
explicit
LocalizedNumberRangeFormatter
(
NumberRangeFormatterSettings
<
LocalizedNumberRangeFormatter
>
&
&
src
)
U_NOEXCEPT
;
LocalizedNumberRangeFormatter
(
const
impl
:
:
RangeMacroProps
&
macros
const
Locale
&
locale
)
;
LocalizedNumberRangeFormatter
(
impl
:
:
RangeMacroProps
&
&
macros
const
Locale
&
locale
)
;
void
clear
(
)
;
friend
class
NumberRangeFormatterSettings
<
UnlocalizedNumberRangeFormatter
>
;
friend
class
NumberRangeFormatterSettings
<
LocalizedNumberRangeFormatter
>
;
friend
class
UnlocalizedNumberRangeFormatter
;
}
;
class
U_I18N_API
FormattedNumberRange
:
public
UMemory
public
FormattedValue
{
public
:
UnicodeString
toString
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
UnicodeString
toTempString
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
Appendable
&
appendTo
(
Appendable
&
appendable
UErrorCode
&
status
)
const
U_OVERRIDE
;
UBool
nextPosition
(
ConstrainedFieldPosition
&
cfpos
UErrorCode
&
status
)
const
U_OVERRIDE
;
UBool
nextFieldPosition
(
FieldPosition
&
fieldPosition
UErrorCode
&
status
)
const
;
void
getAllFieldPositions
(
FieldPositionIterator
&
iterator
UErrorCode
&
status
)
const
;
UnicodeString
getFirstDecimal
(
UErrorCode
&
status
)
const
;
UnicodeString
getSecondDecimal
(
UErrorCode
&
status
)
const
;
UNumberRangeIdentityResult
getIdentityResult
(
UErrorCode
&
status
)
const
;
FormattedNumberRange
(
const
FormattedNumberRange
&
)
=
delete
;
FormattedNumberRange
&
operator
=
(
const
FormattedNumberRange
&
)
=
delete
;
FormattedNumberRange
(
FormattedNumberRange
&
&
src
)
U_NOEXCEPT
;
FormattedNumberRange
&
operator
=
(
FormattedNumberRange
&
&
src
)
U_NOEXCEPT
;
~
FormattedNumberRange
(
)
;
private
:
const
impl
:
:
UFormattedNumberRangeData
*
fData
;
UErrorCode
fErrorCode
;
explicit
FormattedNumberRange
(
impl
:
:
UFormattedNumberRangeData
*
results
)
:
fData
(
results
)
fErrorCode
(
U_ZERO_ERROR
)
{
}
explicit
FormattedNumberRange
(
UErrorCode
errorCode
)
:
fData
(
nullptr
)
fErrorCode
(
errorCode
)
{
}
void
getAllFieldPositionsImpl
(
FieldPositionIteratorHandler
&
fpih
UErrorCode
&
status
)
const
;
friend
class
LocalizedNumberRangeFormatter
;
}
;
class
U_I18N_API
NumberRangeFormatter
final
{
public
:
static
UnlocalizedNumberRangeFormatter
with
(
)
;
static
LocalizedNumberRangeFormatter
withLocale
(
const
Locale
&
locale
)
;
NumberRangeFormatter
(
)
=
delete
;
}
;
}
U_NAMESPACE_END
#
endif
#
endif
#
endif
