#
include
"
unicode
/
utypes
.
h
"
#
ifndef
MESSAGEFORMAT2_FUNCTION_REGISTRY_H
#
define
MESSAGEFORMAT2_FUNCTION_REGISTRY_H
#
if
U_SHOW_CPLUSPLUS_API
#
if
!
UCONFIG_NO_FORMATTING
#
if
!
UCONFIG_NO_MF2
#
include
"
unicode
/
messageformat2_data_model_names
.
h
"
#
include
"
unicode
/
messageformat2_formattable
.
h
"
#
ifndef
U_HIDE_DEPRECATED_API
#
include
<
map
>
U_NAMESPACE_BEGIN
class
Hashtable
;
class
UVector
;
namespace
message2
{
using
namespace
data_model
;
class
U_I18N_API
FormatterFactory
:
public
UObject
{
public
:
virtual
Formatter
*
createFormatter
(
const
Locale
&
locale
UErrorCode
&
status
)
=
0
;
virtual
~
FormatterFactory
(
)
;
FormatterFactory
&
operator
=
(
const
FormatterFactory
&
)
=
delete
;
}
;
class
U_I18N_API
SelectorFactory
:
public
UObject
{
public
:
virtual
Selector
*
createSelector
(
const
Locale
&
locale
UErrorCode
&
status
)
const
=
0
;
virtual
~
SelectorFactory
(
)
;
SelectorFactory
&
operator
=
(
const
SelectorFactory
&
)
=
delete
;
}
;
class
U_I18N_API
MFFunctionRegistry
:
public
UObject
{
private
:
using
FormatterMap
=
Hashtable
;
using
SelectorMap
=
Hashtable
;
public
:
FormatterFactory
*
getFormatter
(
const
FunctionName
&
formatterName
)
const
;
const
SelectorFactory
*
getSelector
(
const
FunctionName
&
selectorName
)
const
;
UBool
getDefaultFormatterNameByType
(
const
UnicodeString
&
formatterType
FunctionName
&
name
)
const
;
class
U_I18N_API
Builder
:
public
UObject
{
private
:
FormatterMap
*
formatters
;
SelectorMap
*
selectors
;
Hashtable
*
formattersByType
;
Builder
&
operator
=
(
const
Builder
&
)
=
delete
;
Builder
(
const
Builder
&
)
=
delete
;
public
:
Builder
&
adoptFormatter
(
const
data_model
:
:
FunctionName
&
formatterName
FormatterFactory
*
formatterFactory
UErrorCode
&
errorCode
)
;
Builder
&
setDefaultFormatterNameByType
(
const
UnicodeString
&
type
const
data_model
:
:
FunctionName
&
functionName
UErrorCode
&
errorCode
)
;
Builder
&
adoptSelector
(
const
data_model
:
:
FunctionName
&
selectorName
SelectorFactory
*
selectorFactory
UErrorCode
&
errorCode
)
;
MFFunctionRegistry
build
(
)
;
Builder
(
UErrorCode
&
errorCode
)
;
virtual
~
Builder
(
)
;
}
;
MFFunctionRegistry
&
operator
=
(
MFFunctionRegistry
&
&
)
noexcept
;
MFFunctionRegistry
(
MFFunctionRegistry
&
&
other
)
{
*
this
=
std
:
:
move
(
other
)
;
}
virtual
~
MFFunctionRegistry
(
)
;
private
:
friend
class
MessageContext
;
friend
class
MessageFormatter
;
MFFunctionRegistry
&
operator
=
(
const
MFFunctionRegistry
&
)
=
delete
;
MFFunctionRegistry
(
const
MFFunctionRegistry
&
)
=
delete
;
MFFunctionRegistry
(
FormatterMap
*
f
SelectorMap
*
s
Hashtable
*
byType
)
;
MFFunctionRegistry
(
)
{
}
void
checkFormatter
(
const
char
*
)
const
;
void
checkSelector
(
const
char
*
)
const
;
void
checkStandard
(
)
const
;
bool
hasFormatter
(
const
data_model
:
:
FunctionName
&
f
)
const
;
bool
hasSelector
(
const
data_model
:
:
FunctionName
&
s
)
const
;
void
cleanup
(
)
noexcept
;
FormatterMap
*
formatters
=
nullptr
;
SelectorMap
*
selectors
=
nullptr
;
Hashtable
*
formattersByType
=
nullptr
;
}
;
class
U_I18N_API
Formatter
:
public
UObject
{
public
:
virtual
FormattedPlaceholder
format
(
FormattedPlaceholder
&
&
toFormat
FunctionOptions
&
&
options
UErrorCode
&
status
)
const
=
0
;
virtual
~
Formatter
(
)
;
}
;
class
U_I18N_API
Selector
:
public
UObject
{
public
:
virtual
void
selectKey
(
FormattedPlaceholder
&
&
toFormat
FunctionOptions
&
&
options
const
UnicodeString
*
keys
int32_t
keysLen
UnicodeString
*
prefs
int32_t
&
prefsLen
UErrorCode
&
status
)
const
=
0
;
virtual
~
Selector
(
)
;
}
;
}
U_NAMESPACE_END
#
endif
#
endif
#
endif
#
endif
#
endif
