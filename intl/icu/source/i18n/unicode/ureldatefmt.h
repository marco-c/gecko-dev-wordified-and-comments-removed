#
ifndef
URELDATEFMT_H
#
define
URELDATEFMT_H
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
unum
.
h
"
#
include
"
unicode
/
udisplaycontext
.
h
"
#
include
"
unicode
/
uformattedvalue
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
include
"
unicode
/
localpointer
.
h
"
#
endif
typedef
enum
UDateRelativeDateTimeFormatterStyle
{
UDAT_STYLE_LONG
UDAT_STYLE_SHORT
UDAT_STYLE_NARROW
#
ifndef
U_HIDE_DEPRECATED_API
UDAT_STYLE_COUNT
#
endif
}
UDateRelativeDateTimeFormatterStyle
;
typedef
enum
URelativeDateTimeUnit
{
UDAT_REL_UNIT_YEAR
UDAT_REL_UNIT_QUARTER
UDAT_REL_UNIT_MONTH
UDAT_REL_UNIT_WEEK
UDAT_REL_UNIT_DAY
UDAT_REL_UNIT_HOUR
UDAT_REL_UNIT_MINUTE
UDAT_REL_UNIT_SECOND
UDAT_REL_UNIT_SUNDAY
UDAT_REL_UNIT_MONDAY
UDAT_REL_UNIT_TUESDAY
UDAT_REL_UNIT_WEDNESDAY
UDAT_REL_UNIT_THURSDAY
UDAT_REL_UNIT_FRIDAY
UDAT_REL_UNIT_SATURDAY
#
ifndef
U_HIDE_DEPRECATED_API
UDAT_REL_UNIT_COUNT
#
endif
}
URelativeDateTimeUnit
;
typedef
enum
URelativeDateTimeFormatterField
{
UDAT_REL_LITERAL_FIELD
UDAT_REL_NUMERIC_FIELD
}
URelativeDateTimeFormatterField
;
struct
URelativeDateTimeFormatter
;
typedef
struct
URelativeDateTimeFormatter
URelativeDateTimeFormatter
;
U_CAPI
URelativeDateTimeFormatter
*
U_EXPORT2
ureldatefmt_open
(
const
char
*
locale
UNumberFormat
*
nfToAdopt
UDateRelativeDateTimeFormatterStyle
width
UDisplayContext
capitalizationContext
UErrorCode
*
status
)
;
U_CAPI
void
U_EXPORT2
ureldatefmt_close
(
URelativeDateTimeFormatter
*
reldatefmt
)
;
struct
UFormattedRelativeDateTime
;
typedef
struct
UFormattedRelativeDateTime
UFormattedRelativeDateTime
;
U_CAPI
UFormattedRelativeDateTime
*
U_EXPORT2
ureldatefmt_openResult
(
UErrorCode
*
ec
)
;
U_CAPI
const
UFormattedValue
*
U_EXPORT2
ureldatefmt_resultAsValue
(
const
UFormattedRelativeDateTime
*
ufrdt
UErrorCode
*
ec
)
;
U_CAPI
void
U_EXPORT2
ureldatefmt_closeResult
(
UFormattedRelativeDateTime
*
ufrdt
)
;
#
if
U_SHOW_CPLUSPLUS_API
U_NAMESPACE_BEGIN
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalURelativeDateTimeFormatterPointer
URelativeDateTimeFormatter
ureldatefmt_close
)
;
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalUFormattedRelativeDateTimePointer
UFormattedRelativeDateTime
ureldatefmt_closeResult
)
;
U_NAMESPACE_END
#
endif
U_CAPI
int32_t
U_EXPORT2
ureldatefmt_formatNumeric
(
const
URelativeDateTimeFormatter
*
reldatefmt
double
offset
URelativeDateTimeUnit
unit
UChar
*
result
int32_t
resultCapacity
UErrorCode
*
status
)
;
U_CAPI
void
U_EXPORT2
ureldatefmt_formatNumericToResult
(
const
URelativeDateTimeFormatter
*
reldatefmt
double
offset
URelativeDateTimeUnit
unit
UFormattedRelativeDateTime
*
result
UErrorCode
*
status
)
;
U_CAPI
int32_t
U_EXPORT2
ureldatefmt_format
(
const
URelativeDateTimeFormatter
*
reldatefmt
double
offset
URelativeDateTimeUnit
unit
UChar
*
result
int32_t
resultCapacity
UErrorCode
*
status
)
;
U_CAPI
void
U_EXPORT2
ureldatefmt_formatToResult
(
const
URelativeDateTimeFormatter
*
reldatefmt
double
offset
URelativeDateTimeUnit
unit
UFormattedRelativeDateTime
*
result
UErrorCode
*
status
)
;
U_CAPI
int32_t
U_EXPORT2
ureldatefmt_combineDateAndTime
(
const
URelativeDateTimeFormatter
*
reldatefmt
const
UChar
*
relativeDateString
int32_t
relativeDateStringLen
const
UChar
*
timeString
int32_t
timeStringLen
UChar
*
result
int32_t
resultCapacity
UErrorCode
*
status
)
;
#
endif
#
endif
