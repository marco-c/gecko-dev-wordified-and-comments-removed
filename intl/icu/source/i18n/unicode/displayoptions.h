#
ifndef
__DISPLAYOPTIONS_H__
#
define
__DISPLAYOPTIONS_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
udisplayoptions
.
h
"
#
include
"
unicode
/
uversion
.
h
"
U_NAMESPACE_BEGIN
#
ifndef
U_HIDE_DRAFT_API
class
U_I18N_API
DisplayOptions
{
public
:
class
U_I18N_API
Builder
{
public
:
Builder
&
setGrammaticalCase
(
UDisplayOptionsGrammaticalCase
grammaticalCase
)
{
this
-
>
grammaticalCase
=
grammaticalCase
;
return
*
this
;
}
Builder
&
setNounClass
(
UDisplayOptionsNounClass
nounClass
)
{
this
-
>
nounClass
=
nounClass
;
return
*
this
;
}
Builder
&
setPluralCategory
(
UDisplayOptionsPluralCategory
pluralCategory
)
{
this
-
>
pluralCategory
=
pluralCategory
;
return
*
this
;
}
Builder
&
setCapitalization
(
UDisplayOptionsCapitalization
capitalization
)
{
this
-
>
capitalization
=
capitalization
;
return
*
this
;
}
Builder
&
setNameStyle
(
UDisplayOptionsNameStyle
nameStyle
)
{
this
-
>
nameStyle
=
nameStyle
;
return
*
this
;
}
Builder
&
setDisplayLength
(
UDisplayOptionsDisplayLength
displayLength
)
{
this
-
>
displayLength
=
displayLength
;
return
*
this
;
}
Builder
&
setSubstituteHandling
(
UDisplayOptionsSubstituteHandling
substituteHandling
)
{
this
-
>
substituteHandling
=
substituteHandling
;
return
*
this
;
}
DisplayOptions
build
(
)
{
return
DisplayOptions
(
*
this
)
;
}
private
:
friend
DisplayOptions
;
Builder
(
)
;
Builder
(
const
DisplayOptions
&
displayOptions
)
;
UDisplayOptionsGrammaticalCase
grammaticalCase
;
UDisplayOptionsNounClass
nounClass
;
UDisplayOptionsPluralCategory
pluralCategory
;
UDisplayOptionsCapitalization
capitalization
;
UDisplayOptionsNameStyle
nameStyle
;
UDisplayOptionsDisplayLength
displayLength
;
UDisplayOptionsSubstituteHandling
substituteHandling
;
}
;
static
Builder
builder
(
)
;
Builder
copyToBuilder
(
)
const
;
UDisplayOptionsGrammaticalCase
getGrammaticalCase
(
)
const
{
return
grammaticalCase
;
}
UDisplayOptionsNounClass
getNounClass
(
)
const
{
return
nounClass
;
}
UDisplayOptionsPluralCategory
getPluralCategory
(
)
const
{
return
pluralCategory
;
}
UDisplayOptionsCapitalization
getCapitalization
(
)
const
{
return
capitalization
;
}
UDisplayOptionsNameStyle
getNameStyle
(
)
const
{
return
nameStyle
;
}
UDisplayOptionsDisplayLength
getDisplayLength
(
)
const
{
return
displayLength
;
}
UDisplayOptionsSubstituteHandling
getSubstituteHandling
(
)
const
{
return
substituteHandling
;
}
DisplayOptions
&
operator
=
(
const
DisplayOptions
&
other
)
=
default
;
DisplayOptions
&
operator
=
(
DisplayOptions
&
&
other
)
noexcept
=
default
;
DisplayOptions
(
const
DisplayOptions
&
other
)
=
default
;
private
:
DisplayOptions
(
const
Builder
&
builder
)
;
UDisplayOptionsGrammaticalCase
grammaticalCase
;
UDisplayOptionsNounClass
nounClass
;
UDisplayOptionsPluralCategory
pluralCategory
;
UDisplayOptionsCapitalization
capitalization
;
UDisplayOptionsNameStyle
nameStyle
;
UDisplayOptionsDisplayLength
displayLength
;
UDisplayOptionsSubstituteHandling
substituteHandling
;
}
;
#
endif
U_NAMESPACE_END
#
endif
#
endif
#
endif
