#
include
"
unicode
/
utypes
.
h
"
#
ifndef
U_HIDE_DEPRECATED_API
#
ifndef
MESSAGEFORMAT_CHECKER_H
#
define
MESSAGEFORMAT_CHECKER_H
#
if
U_SHOW_CPLUSPLUS_API
#
if
!
UCONFIG_NO_NORMALIZATION
#
if
!
UCONFIG_NO_FORMATTING
#
if
!
UCONFIG_NO_MF2
#
include
"
unicode
/
messageformat2_data_model
.
h
"
#
include
"
messageformat2_errors
.
h
"
U_NAMESPACE_BEGIN
namespace
message2
{
using
namespace
data_model
;
class
TypeEnvironment
:
public
UMemory
{
public
:
enum
Type
{
Annotated
Unannotated
FreeVariable
}
;
void
extend
(
const
VariableName
&
Type
UErrorCode
&
status
)
;
Type
get
(
const
VariableName
&
)
const
;
bool
known
(
const
VariableName
&
)
const
;
TypeEnvironment
(
UErrorCode
&
status
)
;
virtual
~
TypeEnvironment
(
)
;
private
:
LocalPointer
<
UVector
>
annotated
;
LocalPointer
<
UVector
>
unannotated
;
LocalPointer
<
UVector
>
freeVars
;
}
;
class
MessageFormatter
;
class
Checker
{
public
:
void
check
(
UErrorCode
&
)
;
Checker
(
const
MFDataModel
&
d
StaticErrors
&
e
const
MessageFormatter
&
mf
)
:
dataModel
(
d
)
errors
(
e
)
context
(
mf
)
{
}
private
:
Key
normalizeNFC
(
const
Key
&
)
const
;
void
requireAnnotated
(
const
TypeEnvironment
&
const
VariableName
&
UErrorCode
&
)
;
void
addFreeVars
(
TypeEnvironment
&
t
const
Operand
&
UErrorCode
&
)
;
void
addFreeVars
(
TypeEnvironment
&
t
const
Operator
&
UErrorCode
&
)
;
void
addFreeVars
(
TypeEnvironment
&
t
const
OptionMap
&
UErrorCode
&
)
;
void
addFreeVars
(
TypeEnvironment
&
t
const
Expression
&
UErrorCode
&
)
;
void
checkDeclarations
(
TypeEnvironment
&
UErrorCode
&
)
;
void
checkSelectors
(
const
TypeEnvironment
&
UErrorCode
&
)
;
void
checkVariants
(
UErrorCode
&
)
;
void
check
(
const
OptionMap
&
)
;
void
check
(
const
Operand
&
)
;
void
check
(
const
Expression
&
)
;
void
check
(
const
Pattern
&
)
;
const
MFDataModel
&
dataModel
;
StaticErrors
&
errors
;
const
MessageFormatter
&
context
;
}
;
}
U_NAMESPACE_END
#
endif
#
endif
#
endif
#
endif
#
endif
#
endif
