#
ifndef
__VISIBLEDIGITS_H__
#
define
__VISIBLEDIGITS_H__
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
unicode
/
uobject
.
h
"
#
include
"
charstr
.
h
"
#
include
"
digitinterval
.
h
"
U_NAMESPACE_BEGIN
class
DigitList
;
class
U_I18N_API
VisibleDigits
:
public
UMemory
{
public
:
VisibleDigits
(
)
:
fExponent
(
0
)
fFlags
(
0
)
fAbsIntValue
(
0
)
fAbsIntValueSet
(
FALSE
)
fAbsDoubleValue
(
0
.
0
)
fAbsDoubleValueSet
(
FALSE
)
{
}
UBool
isNegative
(
)
const
;
UBool
isNaN
(
)
const
;
UBool
isInfinite
(
)
const
;
UBool
isNaNOrInfinity
(
)
const
;
int32_t
getDigitByExponent
(
int32_t
digitPos
)
const
;
const
DigitInterval
&
getInterval
(
)
const
{
return
fInterval
;
}
void
getFixedDecimal
(
double
&
source
int64_t
&
intValue
int64_t
&
f
int64_t
&
t
int32_t
&
v
UBool
&
hasIntValue
)
const
;
private
:
CharString
fDigits
;
DigitInterval
fInterval
;
int32_t
fExponent
;
int32_t
fFlags
;
int64_t
fAbsIntValue
;
UBool
fAbsIntValueSet
;
double
fAbsDoubleValue
;
UBool
fAbsDoubleValueSet
;
void
setNegative
(
)
;
void
setNaN
(
)
;
void
setInfinite
(
)
;
void
clear
(
)
;
double
computeAbsDoubleValue
(
)
const
;
UBool
isOverMaxDigits
(
)
const
;
VisibleDigits
(
const
VisibleDigits
&
)
;
VisibleDigits
&
operator
=
(
const
VisibleDigits
&
)
;
friend
class
FixedPrecision
;
friend
class
VisibleDigitsWithExponent
;
}
;
class
U_I18N_API
VisibleDigitsWithExponent
:
public
UMemory
{
public
:
VisibleDigitsWithExponent
(
)
:
fHasExponent
(
FALSE
)
{
}
const
VisibleDigits
&
getMantissa
(
)
const
{
return
fMantissa
;
}
const
VisibleDigits
*
getExponent
(
)
const
{
return
fHasExponent
?
&
fExponent
:
NULL
;
}
void
clear
(
)
{
fMantissa
.
clear
(
)
;
fExponent
.
clear
(
)
;
fHasExponent
=
FALSE
;
}
UBool
isNegative
(
)
const
{
return
fMantissa
.
isNegative
(
)
;
}
UBool
isNaN
(
)
const
{
return
fMantissa
.
isNaN
(
)
;
}
UBool
isInfinite
(
)
const
{
return
fMantissa
.
isInfinite
(
)
;
}
private
:
VisibleDigitsWithExponent
(
const
VisibleDigitsWithExponent
&
)
;
VisibleDigitsWithExponent
&
operator
=
(
const
VisibleDigitsWithExponent
&
)
;
VisibleDigits
fMantissa
;
VisibleDigits
fExponent
;
UBool
fHasExponent
;
friend
class
ScientificPrecision
;
friend
class
FixedPrecision
;
}
;
U_NAMESPACE_END
#
endif
#
endif
