#
ifndef
__SMALLINTFORMATTER_H__
#
define
__SMALLINTFORMATTER_H__
#
include
"
unicode
/
uobject
.
h
"
#
include
"
unicode
/
utypes
.
h
"
U_NAMESPACE_BEGIN
class
UnicodeString
;
class
U_I18N_API
IntDigitCountRange
:
public
UMemory
{
public
:
IntDigitCountRange
(
)
:
fMin
(
0
)
fMax
(
INT32_MAX
)
{
}
IntDigitCountRange
(
int32_t
min
int32_t
max
)
;
int32_t
pin
(
int32_t
digitCount
)
const
;
int32_t
getMax
(
)
const
{
return
fMax
;
}
int32_t
getMin
(
)
const
{
return
fMin
;
}
private
:
int32_t
fMin
;
int32_t
fMax
;
}
;
class
U_I18N_API
SmallIntFormatter
:
public
UMemory
{
public
:
static
int32_t
estimateDigitCount
(
int32_t
positiveValue
const
IntDigitCountRange
&
range
)
;
static
UBool
canFormat
(
int32_t
positiveValue
const
IntDigitCountRange
&
range
)
;
static
UnicodeString
&
format
(
int32_t
positiveValue
const
IntDigitCountRange
&
range
UnicodeString
&
appendTo
)
;
}
;
U_NAMESPACE_END
#
endif
