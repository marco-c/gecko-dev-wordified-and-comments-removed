#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
ifndef
__NUMBER_MODIFIERS_H__
#
define
__NUMBER_MODIFIERS_H__
#
include
<
algorithm
>
#
include
<
cstdint
>
#
include
"
unicode
/
uniset
.
h
"
#
include
"
unicode
/
simpleformatter
.
h
"
#
include
"
standardplural
.
h
"
#
include
"
number_stringbuilder
.
h
"
#
include
"
number_types
.
h
"
U_NAMESPACE_BEGIN
namespace
number
{
namespace
impl
{
class
U_I18N_API
ConstantAffixModifier
:
public
Modifier
public
UObject
{
public
:
ConstantAffixModifier
(
const
UnicodeString
&
prefix
const
UnicodeString
&
suffix
Field
field
bool
strong
)
:
fPrefix
(
prefix
)
fSuffix
(
suffix
)
fField
(
field
)
fStrong
(
strong
)
{
}
int32_t
apply
(
NumberStringBuilder
&
output
int32_t
leftIndex
int32_t
rightIndex
UErrorCode
&
status
)
const
U_OVERRIDE
;
int32_t
getPrefixLength
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
int32_t
getCodePointCount
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
bool
isStrong
(
)
const
U_OVERRIDE
;
private
:
UnicodeString
fPrefix
;
UnicodeString
fSuffix
;
Field
fField
;
bool
fStrong
;
}
;
class
U_I18N_API
SimpleModifier
:
public
Modifier
public
UMemory
{
public
:
SimpleModifier
(
const
SimpleFormatter
&
simpleFormatter
Field
field
bool
strong
)
;
SimpleModifier
(
)
;
int32_t
apply
(
NumberStringBuilder
&
output
int32_t
leftIndex
int32_t
rightIndex
UErrorCode
&
status
)
const
U_OVERRIDE
;
int32_t
getPrefixLength
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
int32_t
getCodePointCount
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
bool
isStrong
(
)
const
U_OVERRIDE
;
int32_t
formatAsPrefixSuffix
(
NumberStringBuilder
&
result
int32_t
startIndex
int32_t
endIndex
Field
field
UErrorCode
&
status
)
const
;
private
:
UnicodeString
fCompiledPattern
;
Field
fField
;
bool
fStrong
;
int32_t
fPrefixLength
;
int32_t
fSuffixOffset
;
int32_t
fSuffixLength
;
}
;
class
U_I18N_API
ConstantMultiFieldModifier
:
public
Modifier
public
UMemory
{
public
:
ConstantMultiFieldModifier
(
const
NumberStringBuilder
&
prefix
const
NumberStringBuilder
&
suffix
bool
overwrite
bool
strong
)
:
fPrefix
(
prefix
)
fSuffix
(
suffix
)
fOverwrite
(
overwrite
)
fStrong
(
strong
)
{
}
int32_t
apply
(
NumberStringBuilder
&
output
int32_t
leftIndex
int32_t
rightIndex
UErrorCode
&
status
)
const
U_OVERRIDE
;
int32_t
getPrefixLength
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
int32_t
getCodePointCount
(
UErrorCode
&
status
)
const
U_OVERRIDE
;
bool
isStrong
(
)
const
U_OVERRIDE
;
protected
:
NumberStringBuilder
fPrefix
;
NumberStringBuilder
fSuffix
;
bool
fOverwrite
;
bool
fStrong
;
}
;
class
U_I18N_API
CurrencySpacingEnabledModifier
:
public
ConstantMultiFieldModifier
{
public
:
CurrencySpacingEnabledModifier
(
const
NumberStringBuilder
&
prefix
const
NumberStringBuilder
&
suffix
bool
overwrite
bool
strong
const
DecimalFormatSymbols
&
symbols
UErrorCode
&
status
)
;
int32_t
apply
(
NumberStringBuilder
&
output
int32_t
leftIndex
int32_t
rightIndex
UErrorCode
&
status
)
const
U_OVERRIDE
;
static
int32_t
applyCurrencySpacing
(
NumberStringBuilder
&
output
int32_t
prefixStart
int32_t
prefixLen
int32_t
suffixStart
int32_t
suffixLen
const
DecimalFormatSymbols
&
symbols
UErrorCode
&
status
)
;
private
:
UnicodeSet
fAfterPrefixUnicodeSet
;
UnicodeString
fAfterPrefixInsert
;
UnicodeSet
fBeforeSuffixUnicodeSet
;
UnicodeString
fBeforeSuffixInsert
;
enum
EAffix
{
PREFIX
SUFFIX
}
;
enum
EPosition
{
IN_CURRENCY
IN_NUMBER
}
;
static
int32_t
applyCurrencySpacingAffix
(
NumberStringBuilder
&
output
int32_t
index
EAffix
affix
const
DecimalFormatSymbols
&
symbols
UErrorCode
&
status
)
;
static
UnicodeSet
getUnicodeSet
(
const
DecimalFormatSymbols
&
symbols
EPosition
position
EAffix
affix
UErrorCode
&
status
)
;
static
UnicodeString
getInsertString
(
const
DecimalFormatSymbols
&
symbols
EAffix
affix
UErrorCode
&
status
)
;
}
;
class
U_I18N_API
EmptyModifier
:
public
Modifier
public
UMemory
{
public
:
explicit
EmptyModifier
(
bool
isStrong
)
:
fStrong
(
isStrong
)
{
}
int32_t
apply
(
NumberStringBuilder
&
output
int32_t
leftIndex
int32_t
rightIndex
UErrorCode
&
status
)
const
U_OVERRIDE
{
(
void
)
output
;
(
void
)
leftIndex
;
(
void
)
rightIndex
;
(
void
)
status
;
return
0
;
}
int32_t
getPrefixLength
(
UErrorCode
&
status
)
const
U_OVERRIDE
{
(
void
)
status
;
return
0
;
}
int32_t
getCodePointCount
(
UErrorCode
&
status
)
const
U_OVERRIDE
{
(
void
)
status
;
return
0
;
}
bool
isStrong
(
)
const
U_OVERRIDE
{
return
fStrong
;
}
private
:
bool
fStrong
;
}
;
class
U_I18N_API
ParameterizedModifier
:
public
UMemory
{
public
:
ParameterizedModifier
(
)
:
mods
(
)
{
}
ParameterizedModifier
(
const
ParameterizedModifier
&
other
)
=
delete
;
~
ParameterizedModifier
(
)
{
for
(
const
Modifier
*
mod
:
mods
)
{
delete
mod
;
}
}
void
adoptPositiveNegativeModifiers
(
const
Modifier
*
positive
const
Modifier
*
zero
const
Modifier
*
negative
)
{
mods
[
2
]
=
positive
;
mods
[
1
]
=
zero
;
mods
[
0
]
=
negative
;
}
void
adoptSignPluralModifier
(
int8_t
signum
StandardPlural
:
:
Form
plural
const
Modifier
*
mod
)
{
mods
[
getModIndex
(
signum
plural
)
]
=
mod
;
}
const
Modifier
*
getModifier
(
int8_t
signum
)
const
{
return
mods
[
signum
+
1
]
;
}
const
Modifier
*
getModifier
(
int8_t
signum
StandardPlural
:
:
Form
plural
)
const
{
return
mods
[
getModIndex
(
signum
plural
)
]
;
}
private
:
const
Modifier
*
mods
[
3
*
StandardPlural
:
:
COUNT
]
;
inline
static
int32_t
getModIndex
(
int8_t
signum
StandardPlural
:
:
Form
plural
)
{
return
static_cast
<
int32_t
>
(
plural
)
*
3
+
(
signum
+
1
)
;
}
}
;
}
}
U_NAMESPACE_END
#
endif
#
endif
