#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
ifndef
__UNITS_COMPLEXCONVERTER_H__
#
define
__UNITS_COMPLEXCONVERTER_H__
#
include
"
cmemory
.
h
"
#
include
"
measunit_impl
.
h
"
#
include
"
number_roundingutils
.
h
"
#
include
"
unicode
/
errorcode
.
h
"
#
include
"
unicode
/
measure
.
h
"
#
include
"
units_converter
.
h
"
#
include
"
units_data
.
h
"
U_NAMESPACE_BEGIN
#
if
U_PF_WINDOWS
<
=
U_PLATFORM
&
&
U_PLATFORM
<
=
U_PF_CYGWIN
template
class
U_I18N_API
MaybeStackArray
<
units
:
:
UnitsConverter
*
8
>
;
template
class
U_I18N_API
MemoryPool
<
units
:
:
UnitsConverter
8
>
;
template
class
U_I18N_API
MaybeStackVector
<
units
:
:
UnitsConverter
8
>
;
template
class
U_I18N_API
MaybeStackArray
<
MeasureUnitImpl
*
8
>
;
template
class
U_I18N_API
MemoryPool
<
MeasureUnitImpl
8
>
;
template
class
U_I18N_API
MaybeStackVector
<
MeasureUnitImpl
8
>
;
template
class
U_I18N_API
MaybeStackArray
<
MeasureUnit
*
8
>
;
template
class
U_I18N_API
MemoryPool
<
MeasureUnit
8
>
;
template
class
U_I18N_API
MaybeStackVector
<
MeasureUnit
8
>
;
#
endif
namespace
units
{
class
U_I18N_API
ComplexUnitsConverter
:
public
UMemory
{
public
:
ComplexUnitsConverter
(
const
MeasureUnitImpl
&
targetUnit
const
ConversionRates
&
ratesInfo
UErrorCode
&
status
)
;
ComplexUnitsConverter
(
StringPiece
inputUnitIdentifier
StringPiece
outputUnitsIdentifier
UErrorCode
&
status
)
;
ComplexUnitsConverter
(
const
MeasureUnitImpl
&
inputUnit
const
MeasureUnitImpl
&
outputUnits
const
ConversionRates
&
ratesInfo
UErrorCode
&
status
)
;
UBool
greaterThanOrEqual
(
double
quantity
double
limit
)
const
;
MaybeStackVector
<
Measure
>
convert
(
double
quantity
icu
:
:
number
:
:
impl
:
:
RoundingImpl
*
rounder
UErrorCode
&
status
)
const
;
private
:
MaybeStackVector
<
UnitsConverter
>
unitsConverters_
;
MaybeStackVector
<
MeasureUnitImplWithIndex
>
units_
;
void
init
(
const
MeasureUnitImpl
&
inputUnit
const
ConversionRates
&
ratesInfo
UErrorCode
&
status
)
;
void
applyRounder
(
MaybeStackArray
<
int64_t
5
>
&
intValues
double
&
quantity
icu
:
:
number
:
:
impl
:
:
RoundingImpl
*
rounder
UErrorCode
&
status
)
const
;
}
;
}
U_NAMESPACE_END
#
endif
#
endif
