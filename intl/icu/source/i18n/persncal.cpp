#
include
"
persncal
.
h
"
#
if
!
UCONFIG_NO_FORMATTING
#
include
"
uassert
.
h
"
#
include
"
umutex
.
h
"
#
include
"
gregoimp
.
h
"
#
include
<
float
.
h
>
static
const
int16_t
kPersianNumDays
[
]
=
{
0
31
62
93
124
155
186
216
246
276
306
336
}
;
static
const
int8_t
kPersianMonthLength
[
]
=
{
31
31
31
31
31
31
30
30
30
30
30
29
}
;
static
const
int8_t
kPersianLeapMonthLength
[
]
=
{
31
31
31
31
31
31
30
30
30
30
30
30
}
;
static
const
int32_t
kPersianCalendarLimits
[
UCAL_FIELD_COUNT
]
[
4
]
=
{
{
0
0
0
0
}
{
-
5000000
-
5000000
5000000
5000000
}
{
0
0
11
11
}
{
1
1
52
53
}
{
-
1
-
1
-
1
-
1
}
{
1
1
29
31
}
{
1
1
365
366
}
{
-
1
-
1
-
1
-
1
}
{
1
1
5
5
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
5000000
-
5000000
5000000
5000000
}
{
-
1
-
1
-
1
-
1
}
{
-
5000000
-
5000000
5000000
5000000
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
-
1
-
1
-
1
-
1
}
{
0
0
11
11
}
}
;
U_NAMESPACE_BEGIN
static
const
int32_t
PERSIAN_EPOCH
=
1948320
;
const
char
*
PersianCalendar
:
:
getType
(
)
const
{
return
"
persian
"
;
}
PersianCalendar
*
PersianCalendar
:
:
clone
(
)
const
{
return
new
PersianCalendar
(
*
this
)
;
}
PersianCalendar
:
:
PersianCalendar
(
const
Locale
&
aLocale
UErrorCode
&
success
)
:
Calendar
(
TimeZone
:
:
forLocaleOrDefault
(
aLocale
)
aLocale
success
)
{
setTimeInMillis
(
getNow
(
)
success
)
;
}
PersianCalendar
:
:
PersianCalendar
(
const
PersianCalendar
&
other
)
:
Calendar
(
other
)
{
}
PersianCalendar
:
:
~
PersianCalendar
(
)
{
}
int32_t
PersianCalendar
:
:
handleGetLimit
(
UCalendarDateFields
field
ELimitType
limitType
)
const
{
return
kPersianCalendarLimits
[
field
]
[
limitType
]
;
}
UBool
PersianCalendar
:
:
isLeapYear
(
int32_t
year
)
{
int64_t
y
=
static_cast
<
int64_t
>
(
year
)
*
25LL
+
11LL
;
return
(
y
%
33L
<
8
)
;
}
int32_t
PersianCalendar
:
:
yearStart
(
int32_t
year
UErrorCode
&
status
)
{
return
handleComputeMonthStart
(
year
0
false
status
)
;
}
int32_t
PersianCalendar
:
:
monthStart
(
int32_t
year
int32_t
month
UErrorCode
&
status
)
const
{
return
handleComputeMonthStart
(
year
month
true
status
)
;
}
int32_t
PersianCalendar
:
:
handleGetMonthLength
(
int32_t
extendedYear
int32_t
month
UErrorCode
&
)
const
{
if
(
month
<
0
|
|
month
>
11
)
{
extendedYear
+
=
ClockMath
:
:
floorDivide
(
month
12
&
month
)
;
}
return
isLeapYear
(
extendedYear
)
?
kPersianLeapMonthLength
[
month
]
:
kPersianMonthLength
[
month
]
;
}
int32_t
PersianCalendar
:
:
handleGetYearLength
(
int32_t
extendedYear
)
const
{
return
isLeapYear
(
extendedYear
)
?
366
:
365
;
}
int64_t
PersianCalendar
:
:
handleComputeMonthStart
(
int32_t
eyear
int32_t
month
UBool
UErrorCode
&
status
)
const
{
if
(
U_FAILURE
(
status
)
)
{
return
0
;
}
if
(
month
<
0
|
|
month
>
11
)
{
if
(
uprv_add32_overflow
(
eyear
ClockMath
:
:
floorDivide
(
month
12
&
month
)
&
eyear
)
)
{
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
0
;
}
}
int64_t
julianDay
=
PERSIAN_EPOCH
-
1LL
+
365LL
*
(
eyear
-
1LL
)
+
ClockMath
:
:
floorDivide
(
8LL
*
eyear
+
21
33
)
;
if
(
month
!
=
0
)
{
julianDay
+
=
kPersianNumDays
[
month
]
;
}
return
julianDay
;
}
int32_t
PersianCalendar
:
:
handleGetExtendedYear
(
UErrorCode
&
status
)
{
if
(
U_FAILURE
(
status
)
)
{
return
0
;
}
if
(
newerField
(
UCAL_EXTENDED_YEAR
UCAL_YEAR
)
=
=
UCAL_EXTENDED_YEAR
)
{
return
internalGet
(
UCAL_EXTENDED_YEAR
1
)
;
}
return
internalGet
(
UCAL_YEAR
1
)
;
}
void
PersianCalendar
:
:
handleComputeFields
(
int32_t
julianDay
UErrorCode
&
status
)
{
int64_t
daysSinceEpoch
=
julianDay
;
daysSinceEpoch
-
=
PERSIAN_EPOCH
;
int64_t
year
=
ClockMath
:
:
floorDivideInt64
(
33LL
*
daysSinceEpoch
+
3LL
12053LL
)
+
1LL
;
if
(
year
>
INT32_MAX
|
|
year
<
INT32_MIN
)
{
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
;
}
int64_t
farvardin1
=
365LL
*
(
year
-
1
)
+
ClockMath
:
:
floorDivide
(
8LL
*
year
+
21
33
)
;
int32_t
dayOfYear
=
daysSinceEpoch
-
farvardin1
;
U_ASSERT
(
dayOfYear
>
=
0
)
;
U_ASSERT
(
dayOfYear
<
366
)
;
int32_t
month
;
if
(
dayOfYear
<
216
)
{
month
=
dayOfYear
/
31
;
}
else
{
month
=
(
dayOfYear
-
6
)
/
30
;
}
U_ASSERT
(
month
>
=
0
)
;
U_ASSERT
(
month
<
12
)
;
int32_t
dayOfMonth
=
dayOfYear
-
kPersianNumDays
[
month
]
+
1
;
U_ASSERT
(
dayOfMonth
>
0
)
;
U_ASSERT
(
dayOfMonth
<
=
31
)
;
+
+
dayOfYear
;
internalSet
(
UCAL_ERA
0
)
;
internalSet
(
UCAL_YEAR
year
)
;
internalSet
(
UCAL_EXTENDED_YEAR
year
)
;
internalSet
(
UCAL_MONTH
month
)
;
internalSet
(
UCAL_ORDINAL_MONTH
month
)
;
internalSet
(
UCAL_DAY_OF_MONTH
dayOfMonth
)
;
internalSet
(
UCAL_DAY_OF_YEAR
dayOfYear
)
;
}
constexpr
uint32_t
kPersianRelatedYearDiff
=
622
;
int32_t
PersianCalendar
:
:
getRelatedYear
(
UErrorCode
&
status
)
const
{
int32_t
year
=
get
(
UCAL_EXTENDED_YEAR
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
0
;
}
if
(
uprv_add32_overflow
(
year
kPersianRelatedYearDiff
&
year
)
)
{
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
0
;
}
return
year
;
}
void
PersianCalendar
:
:
setRelatedYear
(
int32_t
year
)
{
set
(
UCAL_EXTENDED_YEAR
year
-
kPersianRelatedYearDiff
)
;
}
IMPL_SYSTEM_DEFAULT_CENTURY
(
PersianCalendar
"
calendar
=
persian
"
)
UOBJECT_DEFINE_RTTI_IMPLEMENTATION
(
PersianCalendar
)
U_NAMESPACE_END
#
endif
