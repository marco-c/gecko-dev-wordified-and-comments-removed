#
ifndef
STRMATCH_H
#
define
STRMATCH_H
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_TRANSLITERATION
#
include
"
unicode
/
unistr
.
h
"
#
include
"
unicode
/
unifunct
.
h
"
#
include
"
unicode
/
unimatch
.
h
"
#
include
"
unicode
/
unirepl
.
h
"
U_NAMESPACE_BEGIN
class
TransliterationRuleData
;
class
StringMatcher
:
public
UnicodeFunctor
public
UnicodeMatcher
public
UnicodeReplacer
{
public
:
StringMatcher
(
const
UnicodeString
&
string
int32_t
start
int32_t
limit
int32_t
segmentNum
const
TransliterationRuleData
&
data
)
;
StringMatcher
(
const
StringMatcher
&
o
)
;
virtual
~
StringMatcher
(
)
;
virtual
StringMatcher
*
clone
(
)
const
override
;
virtual
UnicodeMatcher
*
toMatcher
(
)
const
override
;
virtual
UnicodeReplacer
*
toReplacer
(
)
const
override
;
virtual
UMatchDegree
matches
(
const
Replaceable
&
text
int32_t
&
offset
int32_t
limit
UBool
incremental
)
override
;
virtual
UnicodeString
&
toPattern
(
UnicodeString
&
result
UBool
escapeUnprintable
=
false
)
const
override
;
virtual
UBool
matchesIndexValue
(
uint8_t
v
)
const
override
;
virtual
void
addMatchSetTo
(
UnicodeSet
&
toUnionTo
)
const
override
;
virtual
void
setData
(
const
TransliterationRuleData
*
)
override
;
virtual
int32_t
replace
(
Replaceable
&
text
int32_t
start
int32_t
limit
int32_t
&
cursor
)
override
;
virtual
UnicodeString
&
toReplacerPattern
(
UnicodeString
&
result
UBool
escapeUnprintable
)
const
override
;
void
resetMatch
(
)
;
virtual
UClassID
getDynamicClassID
(
)
const
override
;
static
UClassID
U_EXPORT2
getStaticClassID
(
)
;
virtual
void
addReplacementSetTo
(
UnicodeSet
&
toUnionTo
)
const
override
;
private
:
UnicodeString
pattern
;
const
TransliterationRuleData
*
data
;
int32_t
segmentNumber
;
int32_t
matchStart
;
int32_t
matchLimit
;
}
;
U_NAMESPACE_END
#
endif
#
endif
