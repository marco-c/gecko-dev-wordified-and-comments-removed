#
ifndef
RBBISETB_H
#
define
RBBISETB_H
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_BREAK_ITERATION
#
include
"
unicode
/
ucptrie
.
h
"
#
include
"
unicode
/
umutablecptrie
.
h
"
#
include
"
unicode
/
uobject
.
h
"
#
include
"
rbbirb
.
h
"
#
include
"
uvector
.
h
"
U_NAMESPACE_BEGIN
class
RangeDescriptor
:
public
UMemory
{
public
:
UChar32
fStartChar
{
}
;
UChar32
fEndChar
{
}
;
int32_t
fNum
{
0
}
;
bool
fIncludesDict
{
false
}
;
bool
fFirstInGroup
{
false
}
;
UVector
*
fIncludesSets
{
nullptr
}
;
RangeDescriptor
*
fNext
{
nullptr
}
;
RangeDescriptor
(
UErrorCode
&
status
)
;
RangeDescriptor
(
const
RangeDescriptor
&
other
UErrorCode
&
status
)
;
~
RangeDescriptor
(
)
;
void
split
(
UChar32
where
UErrorCode
&
status
)
;
bool
isDictionaryRange
(
)
;
RangeDescriptor
(
const
RangeDescriptor
&
other
)
=
delete
;
RangeDescriptor
&
operator
=
(
const
RangeDescriptor
&
other
)
=
delete
;
}
;
class
RBBISetBuilder
:
public
UMemory
{
public
:
RBBISetBuilder
(
RBBIRuleBuilder
*
rb
)
;
~
RBBISetBuilder
(
)
;
void
buildRanges
(
)
;
void
buildTrie
(
)
;
void
addValToSets
(
UVector
*
sets
uint32_t
val
)
;
void
addValToSet
(
RBBINode
*
usetNode
uint32_t
val
)
;
int32_t
getNumCharCategories
(
)
const
;
int32_t
getDictCategoriesStart
(
)
const
;
int32_t
getTrieSize
(
)
;
void
serializeTrie
(
uint8_t
*
where
)
;
UChar32
getFirstChar
(
int32_t
val
)
const
;
UBool
sawBOF
(
)
const
;
void
mergeCategories
(
IntPair
categories
)
;
#
ifdef
RBBI_DEBUG
void
printSets
(
)
;
void
printRanges
(
)
;
void
printRangeGroups
(
)
;
#
else
#
define
printSets
(
)
#
define
printRanges
(
)
#
define
printRangeGroups
(
)
#
endif
private
:
RBBIRuleBuilder
*
fRB
;
UErrorCode
*
fStatus
;
RangeDescriptor
*
fRangeList
;
UMutableCPTrie
*
fMutableTrie
;
UCPTrie
*
fTrie
;
uint32_t
fTrieSize
;
int32_t
fGroupCount
;
int32_t
fDictCategoriesStart
;
UBool
fSawBOF
;
RBBISetBuilder
(
const
RBBISetBuilder
&
other
)
=
delete
;
RBBISetBuilder
&
operator
=
(
const
RBBISetBuilder
&
other
)
=
delete
;
}
;
U_NAMESPACE_END
#
endif
#
endif
