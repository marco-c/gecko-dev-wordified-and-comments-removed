#
ifndef
PUTILIMP_H
#
define
PUTILIMP_H
#
include
"
unicode
/
utypes
.
h
"
#
include
"
unicode
/
putil
.
h
"
#
ifdef
U_SIGNED_RIGHT_SHIFT_IS_ARITHMETIC
#
else
#
define
U_SIGNED_RIGHT_SHIFT_IS_ARITHMETIC
1
#
endif
#
ifndef
IEEE_754
#
define
IEEE_754
1
#
endif
#
if
!
defined
(
__intptr_t_defined
)
&
&
!
defined
(
UINTPTR_MAX
)
&
&
(
U_PLATFORM
!
=
U_PF_OS390
)
typedef
size_t
uintptr_t
;
#
endif
#
ifdef
U_HAVE_NL_LANGINFO_CODESET
#
elif
U_PLATFORM_USES_ONLY_WIN32_API
|
|
U_PLATFORM
=
=
U_PF_ANDROID
|
|
U_PLATFORM
=
=
U_PF_QNX
#
define
U_HAVE_NL_LANGINFO_CODESET
0
#
else
#
define
U_HAVE_NL_LANGINFO_CODESET
1
#
endif
#
ifdef
U_NL_LANGINFO_CODESET
#
elif
!
U_HAVE_NL_LANGINFO_CODESET
#
define
U_NL_LANGINFO_CODESET
-
1
#
elif
U_PLATFORM
=
=
U_PF_OS400
#
else
#
define
U_NL_LANGINFO_CODESET
CODESET
#
endif
#
if
defined
(
U_TZSET
)
|
|
defined
(
U_HAVE_TZSET
)
#
elif
U_PLATFORM_USES_ONLY_WIN32_API
#
if
U_PLATFORM_HAS_WINUWP_API
=
=
0
#
define
U_TZSET
_tzset
#
endif
#
elif
U_PLATFORM
=
=
U_PF_OS400
#
else
#
define
U_TZSET
tzset
#
endif
#
if
defined
(
U_TIMEZONE
)
|
|
defined
(
U_HAVE_TIMEZONE
)
#
elif
U_PLATFORM
=
=
U_PF_ANDROID
#
define
U_TIMEZONE
timezone
#
elif
defined
(
__UCLIBC__
)
#
elif
defined
(
_NEWLIB_VERSION
)
#
define
U_TIMEZONE
_timezone
#
elif
defined
(
__GLIBC__
)
#
define
U_TIMEZONE
__timezone
#
elif
U_PLATFORM_IS_LINUX_BASED
#
elif
U_PLATFORM_USES_ONLY_WIN32_API
#
define
U_TIMEZONE
_timezone
#
elif
U_PLATFORM
=
=
U_PF_BSD
&
&
!
defined
(
__NetBSD__
)
#
elif
U_PLATFORM
=
=
U_PF_OS400
#
elif
U_PLATFORM
=
=
U_PF_IPHONE
#
else
#
define
U_TIMEZONE
timezone
#
endif
#
if
defined
(
U_TZNAME
)
|
|
defined
(
U_HAVE_TZNAME
)
#
elif
U_PLATFORM_USES_ONLY_WIN32_API
#
if
U_PLATFORM_HAS_WINUWP_API
=
=
0
#
define
U_TZNAME
_tzname
#
endif
#
elif
U_PLATFORM
=
=
U_PF_OS400
#
else
#
define
U_TZNAME
tzname
#
endif
#
ifdef
U_HAVE_MMAP
#
elif
U_PLATFORM_USES_ONLY_WIN32_API
#
define
U_HAVE_MMAP
0
#
else
#
define
U_HAVE_MMAP
1
#
endif
#
ifdef
U_HAVE_POPEN
#
elif
U_PLATFORM_USES_ONLY_WIN32_API
#
define
U_HAVE_POPEN
0
#
elif
U_PLATFORM
=
=
U_PF_OS400
#
define
U_HAVE_POPEN
0
#
else
#
define
U_HAVE_POPEN
1
#
endif
#
ifdef
U_HAVE_DIRENT_H
#
elif
U_PLATFORM_USES_ONLY_WIN32_API
#
define
U_HAVE_DIRENT_H
0
#
else
#
define
U_HAVE_DIRENT_H
1
#
endif
#
ifdef
U_HAVE_GCC_ATOMICS
#
elif
U_PLATFORM
=
=
U_PF_MINGW
#
define
U_HAVE_GCC_ATOMICS
0
#
elif
U_GCC_MAJOR_MINOR
>
=
404
|
|
defined
(
__clang__
)
#
define
U_HAVE_GCC_ATOMICS
1
#
else
#
define
U_HAVE_GCC_ATOMICS
0
#
endif
#
ifdef
U_HAVE_STD_ATOMICS
#
else
#
define
U_HAVE_STD_ATOMICS
1
#
endif
#
ifdef
U_HAVE_CLANG_ATOMICS
#
elif
__has_builtin
(
__c11_atomic_load
)
&
&
\
__has_builtin
(
__c11_atomic_store
)
&
&
\
__has_builtin
(
__c11_atomic_fetch_add
)
&
&
\
__has_builtin
(
__c11_atomic_fetch_sub
)
#
define
U_HAVE_CLANG_ATOMICS
1
#
else
#
define
U_HAVE_CLANG_ATOMICS
0
#
endif
#
ifdef
U_HAVE_STD_MUTEX
#
else
#
define
U_HAVE_STD_MUTEX
1
#
endif
#
ifdef
U_MAKE_IS_NMAKE
#
elif
U_PLATFORM
=
=
U_PF_WINDOWS
#
define
U_MAKE_IS_NMAKE
1
#
else
#
define
U_MAKE_IS_NMAKE
0
#
endif
U_INTERNAL
UBool
U_EXPORT2
uprv_isNaN
(
double
d
)
;
U_INTERNAL
UBool
U_EXPORT2
uprv_isInfinite
(
double
d
)
;
U_INTERNAL
UBool
U_EXPORT2
uprv_isPositiveInfinity
(
double
d
)
;
U_INTERNAL
UBool
U_EXPORT2
uprv_isNegativeInfinity
(
double
d
)
;
U_INTERNAL
double
U_EXPORT2
uprv_getNaN
(
void
)
;
U_INTERNAL
double
U_EXPORT2
uprv_getInfinity
(
void
)
;
U_INTERNAL
double
U_EXPORT2
uprv_trunc
(
double
d
)
;
U_INTERNAL
double
U_EXPORT2
uprv_floor
(
double
d
)
;
U_INTERNAL
double
U_EXPORT2
uprv_ceil
(
double
d
)
;
U_INTERNAL
double
U_EXPORT2
uprv_fabs
(
double
d
)
;
U_INTERNAL
double
U_EXPORT2
uprv_modf
(
double
d
double
*
pinteger
)
;
U_INTERNAL
double
U_EXPORT2
uprv_fmod
(
double
d
double
y
)
;
U_INTERNAL
double
U_EXPORT2
uprv_pow
(
double
d
double
exponent
)
;
U_INTERNAL
double
U_EXPORT2
uprv_pow10
(
int32_t
exponent
)
;
U_INTERNAL
double
U_EXPORT2
uprv_fmax
(
double
d
double
y
)
;
U_INTERNAL
double
U_EXPORT2
uprv_fmin
(
double
d
double
y
)
;
U_INTERNAL
int32_t
U_EXPORT2
uprv_max
(
int32_t
d
int32_t
y
)
;
U_INTERNAL
int32_t
U_EXPORT2
uprv_min
(
int32_t
d
int32_t
y
)
;
#
if
U_IS_BIG_ENDIAN
#
define
uprv_isNegative
(
number
)
(
*
(
(
signed
char
*
)
&
(
number
)
)
<
0
)
#
else
#
define
uprv_isNegative
(
number
)
(
*
(
(
signed
char
*
)
&
(
number
)
+
sizeof
(
number
)
-
1
)
<
0
)
#
endif
U_INTERNAL
double
U_EXPORT2
uprv_maxMantissa
(
void
)
;
U_INTERNAL
double
U_EXPORT2
uprv_log
(
double
d
)
;
U_INTERNAL
double
U_EXPORT2
uprv_round
(
double
x
)
;
U_INTERNAL
UBool
U_EXPORT2
uprv_add32_overflow
(
int32_t
a
int32_t
b
int32_t
*
res
)
;
U_INTERNAL
UBool
U_EXPORT2
uprv_mul32_overflow
(
int32_t
a
int32_t
b
int32_t
*
res
)
;
#
if
0
#
endif
#
if
!
U_CHARSET_IS_UTF8
U_INTERNAL
const
char
*
U_EXPORT2
uprv_getDefaultCodepage
(
void
)
;
#
endif
U_INTERNAL
const
char
*
U_EXPORT2
uprv_getDefaultLocaleID
(
void
)
;
U_INTERNAL
void
U_EXPORT2
uprv_tzset
(
void
)
;
U_INTERNAL
int32_t
U_EXPORT2
uprv_timezone
(
void
)
;
U_INTERNAL
const
char
*
U_EXPORT2
uprv_tzname
(
int
n
)
;
U_INTERNAL
void
uprv_tzname_clear_cache
(
)
;
U_INTERNAL
UDate
U_EXPORT2
uprv_getUTCtime
(
void
)
;
U_INTERNAL
UDate
U_EXPORT2
uprv_getRawUTCtime
(
void
)
;
U_INTERNAL
UBool
U_EXPORT2
uprv_pathIsAbsolute
(
const
char
*
path
)
;
U_INTERNAL
void
*
U_EXPORT2
uprv_maximumPtr
(
void
*
base
)
;
#
ifndef
U_MAX_PTR
#
if
U_PLATFORM
=
=
U_PF_OS390
&
&
!
defined
(
_LP64
)
#
define
U_MAX_PTR
(
base
)
(
(
void
*
)
0x7fffffff
)
#
elif
U_PLATFORM
=
=
U_PF_OS400
#
define
U_MAX_PTR
(
base
)
uprv_maximumPtr
(
(
void
*
)
base
)
#
elif
0
#
define
U_MAX_PTR
(
base
)
\
(
(
void
*
)
(
(
(
char
*
)
(
base
)
+
0x7fffffffu
)
>
(
char
*
)
(
base
)
\
?
(
(
char
*
)
(
base
)
+
0x7fffffffu
)
\
:
(
char
*
)
-
1
)
)
#
else
#
define
U_MAX_PTR
(
base
)
\
(
(
void
*
)
(
(
(
uintptr_t
)
(
base
)
+
0x7fffffffu
)
>
(
uintptr_t
)
(
base
)
\
?
(
(
uintptr_t
)
(
base
)
+
0x7fffffffu
)
\
:
(
uintptr_t
)
-
1
)
)
#
endif
#
endif
#
ifdef
__cplusplus
template
<
typename
T
>
inline
int32_t
pinCapacity
(
T
*
dest
int32_t
capacity
)
{
if
(
capacity
<
=
0
)
{
return
capacity
;
}
uintptr_t
destInt
=
(
uintptr_t
)
dest
;
uintptr_t
maxInt
;
#
if
U_PLATFORM
=
=
U_PF_OS390
&
&
!
defined
(
_LP64
)
maxInt
=
0x7fffffff
;
#
elif
U_PLATFORM
=
=
U_PF_OS400
maxInt
=
(
uintptr_t
)
uprv_maximumPtr
(
(
void
*
)
dest
)
;
#
else
maxInt
=
destInt
+
0x7fffffffu
;
if
(
maxInt
<
destInt
)
{
maxInt
=
(
uintptr_t
)
-
1
;
}
#
endif
uintptr_t
maxBytes
=
maxInt
-
destInt
;
int32_t
maxCapacity
=
(
int32_t
)
(
maxBytes
/
sizeof
(
T
)
)
;
return
capacity
<
=
maxCapacity
?
capacity
:
maxCapacity
;
}
#
endif
typedef
void
(
UVoidFunction
)
(
void
)
;
#
if
U_ENABLE_DYLOAD
U_INTERNAL
void
*
U_EXPORT2
uprv_dl_open
(
const
char
*
libName
UErrorCode
*
status
)
;
U_INTERNAL
void
U_EXPORT2
uprv_dl_close
(
void
*
lib
UErrorCode
*
status
)
;
U_INTERNAL
UVoidFunction
*
U_EXPORT2
uprv_dlsym_func
(
void
*
lib
const
char
*
symbolName
UErrorCode
*
status
)
;
#
endif
#
if
U_PLATFORM
=
=
U_PF_OS400
#
define
uprv_default_malloc
(
x
)
_C_TS_malloc
(
x
)
#
define
uprv_default_realloc
(
x
y
)
_C_TS_realloc
(
x
y
)
#
define
uprv_default_free
(
x
)
_C_TS_free
(
x
)
#
else
#
define
uprv_default_malloc
(
x
)
malloc
(
x
)
#
define
uprv_default_realloc
(
x
y
)
realloc
(
x
y
)
#
define
uprv_default_free
(
x
)
free
(
x
)
#
endif
#
endif
