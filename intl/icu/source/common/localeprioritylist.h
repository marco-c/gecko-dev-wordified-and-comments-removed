#
ifndef
__LOCALEPRIORITYLIST_H__
#
define
__LOCALEPRIORITYLIST_H__
#
include
"
unicode
/
utypes
.
h
"
#
include
"
unicode
/
locid
.
h
"
#
include
"
unicode
/
stringpiece
.
h
"
#
include
"
unicode
/
uobject
.
h
"
struct
UHashtable
;
U_NAMESPACE_BEGIN
struct
LocaleAndWeightArray
;
class
U_COMMON_API
LocalePriorityList
:
public
UMemory
{
public
:
class
Iterator
:
public
Locale
:
:
Iterator
{
public
:
UBool
hasNext
(
)
const
override
{
return
count
<
length
;
}
const
Locale
&
next
(
)
override
{
for
(
;
;
)
{
const
Locale
*
locale
=
list
.
localeAt
(
index
+
+
)
;
if
(
locale
!
=
nullptr
)
{
+
+
count
;
return
*
locale
;
}
}
}
private
:
friend
class
LocalePriorityList
;
Iterator
(
const
LocalePriorityList
&
list
)
:
list
(
list
)
length
(
list
.
getLength
(
)
)
{
}
const
LocalePriorityList
&
list
;
int32_t
index
=
0
;
int32_t
count
=
0
;
const
int32_t
length
;
}
;
LocalePriorityList
(
StringPiece
s
UErrorCode
&
errorCode
)
;
~
LocalePriorityList
(
)
;
int32_t
getLength
(
)
const
{
return
listLength
-
numRemoved
;
}
int32_t
getLengthIncludingRemoved
(
)
const
{
return
listLength
;
}
Iterator
iterator
(
)
const
{
return
Iterator
(
*
this
)
;
}
const
Locale
*
localeAt
(
int32_t
i
)
const
;
Locale
*
orphanLocaleAt
(
int32_t
i
)
;
private
:
LocalePriorityList
(
const
LocalePriorityList
&
)
=
delete
;
LocalePriorityList
&
operator
=
(
const
LocalePriorityList
&
)
=
delete
;
bool
add
(
const
Locale
&
locale
int32_t
weight
UErrorCode
&
errorCode
)
;
void
sort
(
UErrorCode
&
errorCode
)
;
LocaleAndWeightArray
*
list
=
nullptr
;
int32_t
listLength
=
0
;
int32_t
numRemoved
=
0
;
bool
hasWeights
=
false
;
UHashtable
*
map
=
nullptr
;
}
;
U_NAMESPACE_END
#
endif
