#
ifndef
__UCPTRIE_IMPL_H__
#
define
__UCPTRIE_IMPL_H__
#
include
"
unicode
/
ucptrie
.
h
"
#
ifdef
UCPTRIE_DEBUG
#
include
"
unicode
/
umutablecptrie
.
h
"
#
endif
#
define
UCPTRIE_SIG
0x54726933
#
define
UCPTRIE_OE_SIG
0x33697254
struct
UCPTrieHeader
{
uint32_t
signature
;
uint16_t
options
;
uint16_t
indexLength
;
uint16_t
dataLength
;
uint16_t
index3NullOffset
;
uint16_t
dataNullOffset
;
uint16_t
shiftedHighStart
;
}
;
constexpr
uint16_t
UCPTRIE_OPTIONS_DATA_LENGTH_MASK
=
0xf000
;
constexpr
uint16_t
UCPTRIE_OPTIONS_DATA_NULL_OFFSET_MASK
=
0xf00
;
constexpr
uint16_t
UCPTRIE_OPTIONS_RESERVED_MASK
=
0x38
;
constexpr
uint16_t
UCPTRIE_OPTIONS_VALUE_BITS_MASK
=
7
;
constexpr
int32_t
UCPTRIE_NO_INDEX3_NULL_OFFSET
=
0x7fff
;
constexpr
int32_t
UCPTRIE_NO_DATA_NULL_OFFSET
=
0xfffff
;
constexpr
int32_t
UCPTRIE_BMP_INDEX_LENGTH
=
0x10000
>
>
UCPTRIE_FAST_SHIFT
;
constexpr
int32_t
UCPTRIE_SMALL_LIMIT
=
0x1000
;
constexpr
int32_t
UCPTRIE_SMALL_INDEX_LENGTH
=
UCPTRIE_SMALL_LIMIT
>
>
UCPTRIE_FAST_SHIFT
;
constexpr
int32_t
UCPTRIE_SHIFT_3
=
4
;
constexpr
int32_t
UCPTRIE_SHIFT_2
=
5
+
UCPTRIE_SHIFT_3
;
constexpr
int32_t
UCPTRIE_SHIFT_1
=
5
+
UCPTRIE_SHIFT_2
;
constexpr
int32_t
UCPTRIE_SHIFT_2_3
=
UCPTRIE_SHIFT_2
-
UCPTRIE_SHIFT_3
;
constexpr
int32_t
UCPTRIE_SHIFT_1_2
=
UCPTRIE_SHIFT_1
-
UCPTRIE_SHIFT_2
;
constexpr
int32_t
UCPTRIE_OMITTED_BMP_INDEX_1_LENGTH
=
0x10000
>
>
UCPTRIE_SHIFT_1
;
constexpr
int32_t
UCPTRIE_INDEX_2_BLOCK_LENGTH
=
1
<
<
UCPTRIE_SHIFT_1_2
;
constexpr
int32_t
UCPTRIE_INDEX_2_MASK
=
UCPTRIE_INDEX_2_BLOCK_LENGTH
-
1
;
constexpr
int32_t
UCPTRIE_CP_PER_INDEX_2_ENTRY
=
1
<
<
UCPTRIE_SHIFT_2
;
constexpr
int32_t
UCPTRIE_INDEX_3_BLOCK_LENGTH
=
1
<
<
UCPTRIE_SHIFT_2_3
;
constexpr
int32_t
UCPTRIE_INDEX_3_MASK
=
UCPTRIE_INDEX_3_BLOCK_LENGTH
-
1
;
constexpr
int32_t
UCPTRIE_SMALL_DATA_BLOCK_LENGTH
=
1
<
<
UCPTRIE_SHIFT_3
;
constexpr
int32_t
UCPTRIE_SMALL_DATA_MASK
=
UCPTRIE_SMALL_DATA_BLOCK_LENGTH
-
1
;
typedef
UChar32
UCPTrieGetRange
(
const
void
*
trie
UChar32
start
UCPMapValueFilter
*
filter
const
void
*
context
uint32_t
*
pValue
)
;
U_CFUNC
UChar32
ucptrie_internalGetRange
(
UCPTrieGetRange
*
getRange
const
void
*
trie
UChar32
start
UCPMapRangeOption
option
uint32_t
surrogateValue
UCPMapValueFilter
*
filter
const
void
*
context
uint32_t
*
pValue
)
;
#
ifdef
UCPTRIE_DEBUG
U_CFUNC
void
ucptrie_printLengths
(
const
UCPTrie
*
trie
const
char
*
which
)
;
U_CFUNC
void
umutablecptrie_setName
(
UMutableCPTrie
*
builder
const
char
*
name
)
;
#
endif
#
endif
