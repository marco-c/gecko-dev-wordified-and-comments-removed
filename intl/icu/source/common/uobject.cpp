#
include
"
unicode
/
uobject
.
h
"
#
include
"
cmemory
.
h
"
U_NAMESPACE_BEGIN
#
if
U_OVERRIDE_CXX_ALLOCATION
void
*
U_EXPORT2
UMemory
:
:
operator
new
(
size_t
size
)
noexcept
{
return
uprv_malloc
(
size
)
;
}
void
U_EXPORT2
UMemory
:
:
operator
delete
(
void
*
p
)
noexcept
{
if
(
p
!
=
nullptr
)
{
uprv_free
(
p
)
;
}
}
void
*
U_EXPORT2
UMemory
:
:
operator
new
[
]
(
size_t
size
)
noexcept
{
return
uprv_malloc
(
size
)
;
}
void
U_EXPORT2
UMemory
:
:
operator
delete
[
]
(
void
*
p
)
noexcept
{
if
(
p
!
=
nullptr
)
{
uprv_free
(
p
)
;
}
}
#
if
U_HAVE_DEBUG_LOCATION_NEW
void
*
U_EXPORT2
UMemory
:
:
operator
new
(
size_t
size
const
char
*
int
)
noexcept
{
return
UMemory
:
:
operator
new
(
size
)
;
}
void
U_EXPORT2
UMemory
:
:
operator
delete
(
void
*
p
const
char
*
int
)
noexcept
{
UMemory
:
:
operator
delete
(
p
)
;
}
#
endif
#
endif
UObject
:
:
~
UObject
(
)
{
}
UClassID
UObject
:
:
getDynamicClassID
(
)
const
{
return
nullptr
;
}
U_NAMESPACE_END
U_NAMESPACE_USE
U_CAPI
void
U_EXPORT2
uprv_deleteUObject
(
void
*
obj
)
{
delete
static_cast
<
UObject
*
>
(
obj
)
;
}
