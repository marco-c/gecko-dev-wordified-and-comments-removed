#
ifndef
__SHAREDOBJECT_H__
#
define
__SHAREDOBJECT_H__
#
include
"
unicode
/
uobject
.
h
"
#
include
"
umutex
.
h
"
U_NAMESPACE_BEGIN
class
U_COMMON_API
UnifiedCacheBase
:
public
UObject
{
public
:
UnifiedCacheBase
(
)
{
}
virtual
void
incrementItemsInUse
(
)
const
=
0
;
virtual
void
decrementItemsInUseWithLockingAndEviction
(
)
const
=
0
;
virtual
void
decrementItemsInUse
(
)
const
=
0
;
virtual
~
UnifiedCacheBase
(
)
;
private
:
UnifiedCacheBase
(
const
UnifiedCacheBase
&
)
;
UnifiedCacheBase
&
operator
=
(
const
UnifiedCacheBase
&
)
;
}
;
class
U_COMMON_API
SharedObject
:
public
UObject
{
public
:
SharedObject
(
)
:
totalRefCount
(
0
)
softRefCount
(
0
)
hardRefCount
(
0
)
cachePtr
(
NULL
)
{
}
SharedObject
(
const
SharedObject
&
other
)
:
UObject
(
other
)
totalRefCount
(
0
)
softRefCount
(
0
)
hardRefCount
(
0
)
cachePtr
(
NULL
)
{
}
virtual
~
SharedObject
(
)
;
void
addRef
(
)
const
{
addRef
(
FALSE
)
;
}
void
addRefWhileHoldingCacheLock
(
)
const
{
addRef
(
TRUE
)
;
}
void
addSoftRef
(
)
const
;
void
removeRef
(
)
const
{
removeRef
(
FALSE
)
;
}
void
removeRefWhileHoldingCacheLock
(
)
const
{
removeRef
(
TRUE
)
;
}
void
removeSoftRef
(
)
const
;
int32_t
getRefCount
(
)
const
;
int32_t
getSoftRefCount
(
)
const
{
return
softRefCount
;
}
int32_t
getHardRefCount
(
)
const
;
inline
UBool
noHardReferences
(
)
const
{
return
getHardRefCount
(
)
=
=
0
;
}
inline
UBool
hasHardReferences
(
)
const
{
return
getHardRefCount
(
)
!
=
0
;
}
UBool
noSoftReferences
(
)
const
{
return
(
softRefCount
=
=
0
)
;
}
void
deleteIfZeroRefCount
(
)
const
;
void
registerWithCache
(
const
UnifiedCacheBase
*
ptr
)
const
{
cachePtr
=
ptr
;
}
template
<
typename
T
>
static
T
*
copyOnWrite
(
const
T
*
&
ptr
)
{
const
T
*
p
=
ptr
;
if
(
p
-
>
getRefCount
(
)
<
=
1
)
{
return
const_cast
<
T
*
>
(
p
)
;
}
T
*
p2
=
new
T
(
*
p
)
;
if
(
p2
=
=
NULL
)
{
return
NULL
;
}
p
-
>
removeRef
(
)
;
ptr
=
p2
;
p2
-
>
addRef
(
)
;
return
p2
;
}
template
<
typename
T
>
static
void
copyPtr
(
const
T
*
src
const
T
*
&
dest
)
{
if
(
src
!
=
dest
)
{
if
(
dest
!
=
NULL
)
{
dest
-
>
removeRef
(
)
;
}
dest
=
src
;
if
(
src
!
=
NULL
)
{
src
-
>
addRef
(
)
;
}
}
}
template
<
typename
T
>
static
void
clearPtr
(
const
T
*
&
ptr
)
{
if
(
ptr
!
=
NULL
)
{
ptr
-
>
removeRef
(
)
;
ptr
=
NULL
;
}
}
private
:
mutable
u_atomic_int32_t
totalRefCount
;
mutable
int32_t
softRefCount
;
mutable
u_atomic_int32_t
hardRefCount
;
mutable
const
UnifiedCacheBase
*
cachePtr
;
void
addRef
(
UBool
withCacheLock
)
const
;
void
removeRef
(
UBool
withCacheLock
)
const
;
}
;
U_NAMESPACE_END
#
endif
