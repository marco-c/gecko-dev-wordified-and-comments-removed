#
ifndef
U_UTF8_IMPL
#
define
U_UTF8_IMPL
#
endif
#
include
"
unicode
/
utypes
.
h
"
#
include
"
unicode
/
utf
.
h
"
#
include
"
unicode
/
utf8
.
h
"
#
include
"
uassert
.
h
"
U_CAPI
const
uint8_t
utf8_countTrailBytes
[
256
]
=
{
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
3
3
3
3
3
0
0
0
0
0
0
0
0
0
0
0
}
;
static
const
UChar32
utf8_errorValue
[
6
]
=
{
0x15
0x9f
0xffff
0x10ffff
}
;
static
UChar32
errorValue
(
int32_t
count
int8_t
strict
)
{
if
(
strict
>
=
0
)
{
return
utf8_errorValue
[
count
]
;
}
else
if
(
strict
=
=
-
3
)
{
return
0xfffd
;
}
else
{
return
U_SENTINEL
;
}
}
U_CAPI
UChar32
U_EXPORT2
utf8_nextCharSafeBody
(
const
uint8_t
*
s
int32_t
*
pi
int32_t
length
UChar32
c
UBool
strict
)
{
int32_t
i
=
*
pi
;
if
(
i
=
=
length
|
|
c
>
0xf4
)
{
}
else
if
(
c
>
=
0xf0
)
{
uint8_t
t1
=
s
[
i
]
t2
t3
;
c
&
=
7
;
if
(
U8_IS_VALID_LEAD4_AND_T1
(
c
t1
)
&
&
+
+
i
!
=
length
&
&
(
t2
=
s
[
i
]
-
0x80
)
<
=
0x3f
&
&
+
+
i
!
=
length
&
&
(
t3
=
s
[
i
]
-
0x80
)
<
=
0x3f
)
{
+
+
i
;
c
=
(
c
<
<
18
)
|
(
(
t1
&
0x3f
)
<
<
12
)
|
(
t2
<
<
6
)
|
t3
;
if
(
strict
<
=
0
|
|
!
U_IS_UNICODE_NONCHAR
(
c
)
)
{
*
pi
=
i
;
return
c
;
}
}
}
else
if
(
c
>
=
0xe0
)
{
c
&
=
0xf
;
if
(
strict
!
=
-
2
)
{
uint8_t
t1
=
s
[
i
]
t2
;
if
(
U8_IS_VALID_LEAD3_AND_T1
(
c
t1
)
&
&
+
+
i
!
=
length
&
&
(
t2
=
s
[
i
]
-
0x80
)
<
=
0x3f
)
{
+
+
i
;
c
=
(
c
<
<
12
)
|
(
(
t1
&
0x3f
)
<
<
6
)
|
t2
;
if
(
strict
<
=
0
|
|
!
U_IS_UNICODE_NONCHAR
(
c
)
)
{
*
pi
=
i
;
return
c
;
}
}
}
else
{
uint8_t
t1
=
s
[
i
]
-
0x80
t2
;
if
(
t1
<
=
0x3f
&
&
(
c
>
0
|
|
t1
>
=
0x20
)
&
&
+
+
i
!
=
length
&
&
(
t2
=
s
[
i
]
-
0x80
)
<
=
0x3f
)
{
*
pi
=
i
+
1
;
return
(
c
<
<
12
)
|
(
t1
<
<
6
)
|
t2
;
}
}
}
else
if
(
c
>
=
0xc2
)
{
uint8_t
t1
=
s
[
i
]
-
0x80
;
if
(
t1
<
=
0x3f
)
{
*
pi
=
i
+
1
;
return
(
(
c
-
0xc0
)
<
<
6
)
|
t1
;
}
}
c
=
errorValue
(
i
-
*
pi
strict
)
;
*
pi
=
i
;
return
c
;
}
U_CAPI
int32_t
U_EXPORT2
utf8_appendCharSafeBody
(
uint8_t
*
s
int32_t
i
int32_t
length
UChar32
c
UBool
*
pIsError
)
{
if
(
(
uint32_t
)
(
c
)
<
=
0x7ff
)
{
if
(
(
i
)
+
1
<
(
length
)
)
{
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
(
c
)
>
>
6
)
|
0xc0
)
;
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
(
c
)
&
0x3f
)
|
0x80
)
;
return
i
;
}
}
else
if
(
(
uint32_t
)
(
c
)
<
=
0xffff
)
{
if
(
(
i
)
+
2
<
(
length
)
&
&
!
U_IS_SURROGATE
(
c
)
)
{
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
(
c
)
>
>
12
)
|
0xe0
)
;
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
(
(
c
)
>
>
6
)
&
0x3f
)
|
0x80
)
;
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
(
c
)
&
0x3f
)
|
0x80
)
;
return
i
;
}
}
else
if
(
(
uint32_t
)
(
c
)
<
=
0x10ffff
)
{
if
(
(
i
)
+
3
<
(
length
)
)
{
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
(
c
)
>
>
18
)
|
0xf0
)
;
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
(
(
c
)
>
>
12
)
&
0x3f
)
|
0x80
)
;
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
(
(
c
)
>
>
6
)
&
0x3f
)
|
0x80
)
;
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
(
c
)
&
0x3f
)
|
0x80
)
;
return
i
;
}
}
if
(
pIsError
!
=
NULL
)
{
*
pIsError
=
true
;
}
else
{
length
-
=
i
;
if
(
length
>
0
)
{
int32_t
offset
;
if
(
length
>
3
)
{
length
=
3
;
}
s
+
=
i
;
offset
=
0
;
c
=
utf8_errorValue
[
length
-
1
]
;
U8_APPEND_UNSAFE
(
s
offset
c
)
;
i
=
i
+
offset
;
}
}
return
i
;
}
U_CAPI
UChar32
U_EXPORT2
utf8_prevCharSafeBody
(
const
uint8_t
*
s
int32_t
start
int32_t
*
pi
UChar32
c
UBool
strict
)
{
int32_t
i
=
*
pi
;
if
(
U8_IS_TRAIL
(
c
)
&
&
i
>
start
)
{
uint8_t
b1
=
s
[
-
-
i
]
;
if
(
U8_IS_LEAD
(
b1
)
)
{
if
(
b1
<
0xe0
)
{
*
pi
=
i
;
return
(
(
b1
-
0xc0
)
<
<
6
)
|
(
c
&
0x3f
)
;
}
else
if
(
b1
<
0xf0
?
U8_IS_VALID_LEAD3_AND_T1
(
b1
c
)
:
U8_IS_VALID_LEAD4_AND_T1
(
b1
c
)
)
{
*
pi
=
i
;
return
errorValue
(
1
strict
)
;
}
}
else
if
(
U8_IS_TRAIL
(
b1
)
&
&
i
>
start
)
{
c
&
=
0x3f
;
uint8_t
b2
=
s
[
-
-
i
]
;
if
(
0xe0
<
=
b2
&
&
b2
<
=
0xf4
)
{
if
(
b2
<
0xf0
)
{
b2
&
=
0xf
;
if
(
strict
!
=
-
2
)
{
if
(
U8_IS_VALID_LEAD3_AND_T1
(
b2
b1
)
)
{
*
pi
=
i
;
c
=
(
b2
<
<
12
)
|
(
(
b1
&
0x3f
)
<
<
6
)
|
c
;
if
(
strict
<
=
0
|
|
!
U_IS_UNICODE_NONCHAR
(
c
)
)
{
return
c
;
}
else
{
return
errorValue
(
2
strict
)
;
}
}
}
else
{
b1
-
=
0x80
;
if
(
(
b2
>
0
|
|
b1
>
=
0x20
)
)
{
*
pi
=
i
;
return
(
b2
<
<
12
)
|
(
b1
<
<
6
)
|
c
;
}
}
}
else
if
(
U8_IS_VALID_LEAD4_AND_T1
(
b2
b1
)
)
{
*
pi
=
i
;
return
errorValue
(
2
strict
)
;
}
}
else
if
(
U8_IS_TRAIL
(
b2
)
&
&
i
>
start
)
{
uint8_t
b3
=
s
[
-
-
i
]
;
if
(
0xf0
<
=
b3
&
&
b3
<
=
0xf4
)
{
b3
&
=
7
;
if
(
U8_IS_VALID_LEAD4_AND_T1
(
b3
b2
)
)
{
*
pi
=
i
;
c
=
(
b3
<
<
18
)
|
(
(
b2
&
0x3f
)
<
<
12
)
|
(
(
b1
&
0x3f
)
<
<
6
)
|
c
;
if
(
strict
<
=
0
|
|
!
U_IS_UNICODE_NONCHAR
(
c
)
)
{
return
c
;
}
else
{
return
errorValue
(
3
strict
)
;
}
}
}
}
}
}
return
errorValue
(
0
strict
)
;
}
U_CAPI
int32_t
U_EXPORT2
utf8_back1SafeBody
(
const
uint8_t
*
s
int32_t
start
int32_t
i
)
{
int32_t
orig_i
=
i
;
uint8_t
c
=
s
[
i
]
;
if
(
U8_IS_TRAIL
(
c
)
&
&
i
>
start
)
{
uint8_t
b1
=
s
[
-
-
i
]
;
if
(
U8_IS_LEAD
(
b1
)
)
{
if
(
b1
<
0xe0
|
|
(
b1
<
0xf0
?
U8_IS_VALID_LEAD3_AND_T1
(
b1
c
)
:
U8_IS_VALID_LEAD4_AND_T1
(
b1
c
)
)
)
{
return
i
;
}
}
else
if
(
U8_IS_TRAIL
(
b1
)
&
&
i
>
start
)
{
uint8_t
b2
=
s
[
-
-
i
]
;
if
(
0xe0
<
=
b2
&
&
b2
<
=
0xf4
)
{
if
(
b2
<
0xf0
?
U8_IS_VALID_LEAD3_AND_T1
(
b2
b1
)
:
U8_IS_VALID_LEAD4_AND_T1
(
b2
b1
)
)
{
return
i
;
}
}
else
if
(
U8_IS_TRAIL
(
b2
)
&
&
i
>
start
)
{
uint8_t
b3
=
s
[
-
-
i
]
;
if
(
0xf0
<
=
b3
&
&
b3
<
=
0xf4
&
&
U8_IS_VALID_LEAD4_AND_T1
(
b3
b2
)
)
{
return
i
;
}
}
}
}
return
orig_i
;
}
