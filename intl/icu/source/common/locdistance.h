#
ifndef
__LOCDISTANCE_H__
#
define
__LOCDISTANCE_H__
#
include
"
unicode
/
utypes
.
h
"
#
include
"
unicode
/
bytestrie
.
h
"
#
include
"
unicode
/
localematcher
.
h
"
#
include
"
unicode
/
locid
.
h
"
#
include
"
unicode
/
uobject
.
h
"
#
include
"
lsr
.
h
"
U_NAMESPACE_BEGIN
struct
LocaleDistanceData
;
class
LocaleDistance
final
:
public
UMemory
{
public
:
static
const
LocaleDistance
*
getSingleton
(
UErrorCode
&
errorCode
)
;
int32_t
getBestIndexAndDistance
(
const
LSR
&
desired
const
LSR
*
*
supportedLSRs
int32_t
supportedLSRsLength
int32_t
threshold
ULocMatchFavorSubtag
favorSubtag
)
const
;
int32_t
getParadigmLSRsLength
(
)
const
{
return
paradigmLSRsLength
;
}
UBool
isParadigmLSR
(
const
LSR
&
lsr
)
const
;
int32_t
getDefaultScriptDistance
(
)
const
{
return
defaultScriptDistance
;
}
int32_t
getDefaultDemotionPerDesiredLocale
(
)
const
{
return
defaultDemotionPerDesiredLocale
;
}
private
:
LocaleDistance
(
const
LocaleDistanceData
&
data
)
;
LocaleDistance
(
const
LocaleDistance
&
other
)
=
delete
;
LocaleDistance
&
operator
=
(
const
LocaleDistance
&
other
)
=
delete
;
static
void
initLocaleDistance
(
UErrorCode
&
errorCode
)
;
static
int32_t
getDesSuppScriptDistance
(
BytesTrie
&
iter
uint64_t
startState
const
char
*
desired
const
char
*
supported
)
;
static
int32_t
getRegionPartitionsDistance
(
BytesTrie
&
iter
uint64_t
startState
const
char
*
desiredPartitions
const
char
*
supportedPartitions
int32_t
threshold
)
;
static
int32_t
getFallbackRegionDistance
(
BytesTrie
&
iter
uint64_t
startState
)
;
static
int32_t
trieNext
(
BytesTrie
&
iter
const
char
*
s
bool
wantValue
)
;
const
char
*
partitionsForRegion
(
const
LSR
&
lsr
)
const
{
int32_t
pIndex
=
regionToPartitionsIndex
[
lsr
.
regionIndex
]
;
return
partitionArrays
[
pIndex
]
;
}
int32_t
getDefaultRegionDistance
(
)
const
{
return
defaultRegionDistance
;
}
BytesTrie
trie
;
const
uint8_t
*
regionToPartitionsIndex
;
const
char
*
*
partitionArrays
;
const
LSR
*
paradigmLSRs
;
int32_t
paradigmLSRsLength
;
int32_t
defaultLanguageDistance
;
int32_t
defaultScriptDistance
;
int32_t
defaultRegionDistance
;
int32_t
minRegionDistance
;
int32_t
defaultDemotionPerDesiredLocale
;
}
;
U_NAMESPACE_END
#
endif
