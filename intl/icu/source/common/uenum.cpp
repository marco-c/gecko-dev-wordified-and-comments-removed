#
include
"
unicode
/
putil
.
h
"
#
include
"
uenumimp
.
h
"
#
include
"
cmemory
.
h
"
typedef
struct
{
int32_t
len
;
char
data
;
}
_UEnumBuffer
;
static
const
int32_t
PAD
=
8
;
static
void
*
_getBuffer
(
UEnumeration
*
en
int32_t
capacity
)
{
if
(
en
-
>
baseContext
!
=
nullptr
)
{
if
(
(
(
_UEnumBuffer
*
)
en
-
>
baseContext
)
-
>
len
<
capacity
)
{
capacity
+
=
PAD
;
en
-
>
baseContext
=
uprv_realloc
(
en
-
>
baseContext
sizeof
(
int32_t
)
+
capacity
)
;
if
(
en
-
>
baseContext
=
=
nullptr
)
{
return
nullptr
;
}
(
(
_UEnumBuffer
*
)
en
-
>
baseContext
)
-
>
len
=
capacity
;
}
}
else
{
capacity
+
=
PAD
;
en
-
>
baseContext
=
uprv_malloc
(
sizeof
(
int32_t
)
+
capacity
)
;
if
(
en
-
>
baseContext
=
=
nullptr
)
{
return
nullptr
;
}
(
(
_UEnumBuffer
*
)
en
-
>
baseContext
)
-
>
len
=
capacity
;
}
return
(
void
*
)
&
(
(
_UEnumBuffer
*
)
en
-
>
baseContext
)
-
>
data
;
}
U_CAPI
void
U_EXPORT2
uenum_close
(
UEnumeration
*
en
)
{
if
(
en
)
{
if
(
en
-
>
close
!
=
nullptr
)
{
if
(
en
-
>
baseContext
)
{
uprv_free
(
en
-
>
baseContext
)
;
}
en
-
>
close
(
en
)
;
}
else
{
uprv_free
(
en
)
;
}
}
}
U_CAPI
int32_t
U_EXPORT2
uenum_count
(
UEnumeration
*
en
UErrorCode
*
status
)
{
if
(
!
en
|
|
U_FAILURE
(
*
status
)
)
{
return
-
1
;
}
if
(
en
-
>
count
!
=
nullptr
)
{
return
en
-
>
count
(
en
status
)
;
}
else
{
*
status
=
U_UNSUPPORTED_ERROR
;
return
-
1
;
}
}
U_CAPI
const
char16_t
*
U_EXPORT2
uenum_unextDefault
(
UEnumeration
*
en
int32_t
*
resultLength
UErrorCode
*
status
)
{
char16_t
*
ustr
=
nullptr
;
int32_t
len
=
0
;
if
(
en
-
>
next
!
=
nullptr
)
{
const
char
*
cstr
=
en
-
>
next
(
en
&
len
status
)
;
if
(
cstr
!
=
nullptr
)
{
ustr
=
(
char16_t
*
)
_getBuffer
(
en
(
len
+
1
)
*
sizeof
(
char16_t
)
)
;
if
(
ustr
=
=
nullptr
)
{
*
status
=
U_MEMORY_ALLOCATION_ERROR
;
}
else
{
u_charsToUChars
(
cstr
ustr
len
+
1
)
;
}
}
}
else
{
*
status
=
U_UNSUPPORTED_ERROR
;
}
if
(
resultLength
)
{
*
resultLength
=
len
;
}
return
ustr
;
}
U_CAPI
const
char
*
U_EXPORT2
uenum_nextDefault
(
UEnumeration
*
en
int32_t
*
resultLength
UErrorCode
*
status
)
{
if
(
en
-
>
uNext
!
=
nullptr
)
{
char
*
tempCharVal
;
const
char16_t
*
tempUCharVal
=
en
-
>
uNext
(
en
resultLength
status
)
;
if
(
tempUCharVal
=
=
nullptr
)
{
return
nullptr
;
}
tempCharVal
=
(
char
*
)
_getBuffer
(
en
(
*
resultLength
+
1
)
*
sizeof
(
char
)
)
;
if
(
!
tempCharVal
)
{
*
status
=
U_MEMORY_ALLOCATION_ERROR
;
return
nullptr
;
}
u_UCharsToChars
(
tempUCharVal
tempCharVal
*
resultLength
+
1
)
;
return
tempCharVal
;
}
else
{
*
status
=
U_UNSUPPORTED_ERROR
;
return
nullptr
;
}
}
U_CAPI
const
char16_t
*
U_EXPORT2
uenum_unext
(
UEnumeration
*
en
int32_t
*
resultLength
UErrorCode
*
status
)
{
if
(
!
en
|
|
U_FAILURE
(
*
status
)
)
{
return
nullptr
;
}
if
(
en
-
>
uNext
!
=
nullptr
)
{
return
en
-
>
uNext
(
en
resultLength
status
)
;
}
else
{
*
status
=
U_UNSUPPORTED_ERROR
;
return
nullptr
;
}
}
U_CAPI
const
char
*
U_EXPORT2
uenum_next
(
UEnumeration
*
en
int32_t
*
resultLength
UErrorCode
*
status
)
{
if
(
!
en
|
|
U_FAILURE
(
*
status
)
)
{
return
nullptr
;
}
if
(
en
-
>
next
!
=
nullptr
)
{
if
(
resultLength
!
=
nullptr
)
{
return
en
-
>
next
(
en
resultLength
status
)
;
}
else
{
int32_t
dummyLength
=
0
;
return
en
-
>
next
(
en
&
dummyLength
status
)
;
}
}
else
{
*
status
=
U_UNSUPPORTED_ERROR
;
return
nullptr
;
}
}
U_CAPI
void
U_EXPORT2
uenum_reset
(
UEnumeration
*
en
UErrorCode
*
status
)
{
if
(
!
en
|
|
U_FAILURE
(
*
status
)
)
{
return
;
}
if
(
en
-
>
reset
!
=
nullptr
)
{
en
-
>
reset
(
en
status
)
;
}
else
{
*
status
=
U_UNSUPPORTED_ERROR
;
}
}
