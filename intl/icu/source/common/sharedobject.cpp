#
include
"
sharedobject
.
h
"
#
include
"
mutex
.
h
"
#
include
"
uassert
.
h
"
#
include
"
umutex
.
h
"
#
include
"
unifiedcache
.
h
"
U_NAMESPACE_BEGIN
SharedObject
:
:
~
SharedObject
(
)
{
}
UnifiedCacheBase
:
:
~
UnifiedCacheBase
(
)
{
}
void
SharedObject
:
:
addRef
(
)
const
{
umtx_atomic_inc
(
&
hardRefCount
)
;
}
void
SharedObject
:
:
removeRef
(
)
const
{
const
UnifiedCacheBase
*
cache
=
this
-
>
cachePtr
;
int32_t
updatedRefCount
=
umtx_atomic_dec
(
&
hardRefCount
)
;
U_ASSERT
(
updatedRefCount
>
=
0
)
;
if
(
updatedRefCount
=
=
0
)
{
if
(
cache
)
{
cache
-
>
handleUnreferencedObject
(
)
;
}
else
{
delete
this
;
}
}
}
int32_t
SharedObject
:
:
getRefCount
(
)
const
{
return
umtx_loadAcquire
(
hardRefCount
)
;
}
void
SharedObject
:
:
deleteIfZeroRefCount
(
)
const
{
if
(
this
-
>
cachePtr
=
=
nullptr
&
&
getRefCount
(
)
=
=
0
)
{
delete
this
;
}
}
U_NAMESPACE_END
