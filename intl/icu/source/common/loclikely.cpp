#
include
"
unicode
/
bytestream
.
h
"
#
include
"
unicode
/
utypes
.
h
"
#
include
"
unicode
/
locid
.
h
"
#
include
"
unicode
/
putil
.
h
"
#
include
"
unicode
/
uchar
.
h
"
#
include
"
unicode
/
uloc
.
h
"
#
include
"
unicode
/
ures
.
h
"
#
include
"
unicode
/
uscript
.
h
"
#
include
"
bytesinkutil
.
h
"
#
include
"
charstr
.
h
"
#
include
"
cmemory
.
h
"
#
include
"
cstring
.
h
"
#
include
"
loclikelysubtags
.
h
"
#
include
"
ulocimp
.
h
"
#
include
"
ustr_imp
.
h
"
static
void
U_CALLCONV
appendTag
(
const
char
*
tag
int32_t
tagLength
char
*
buffer
int32_t
*
bufferLength
UBool
withSeparator
)
{
if
(
withSeparator
)
{
buffer
[
*
bufferLength
]
=
'
_
'
;
+
+
(
*
bufferLength
)
;
}
uprv_memmove
(
&
buffer
[
*
bufferLength
]
tag
tagLength
)
;
*
bufferLength
+
=
tagLength
;
}
static
void
U_CALLCONV
createTagStringWithAlternates
(
const
char
*
lang
int32_t
langLength
const
char
*
script
int32_t
scriptLength
const
char
*
region
int32_t
regionLength
const
char
*
trailing
int32_t
trailingLength
const
char
*
alternateTags
icu
:
:
ByteSink
&
sink
UErrorCode
*
err
)
{
if
(
U_FAILURE
(
*
err
)
)
{
goto
error
;
}
else
if
(
langLength
>
=
ULOC_LANG_CAPACITY
|
|
scriptLength
>
=
ULOC_SCRIPT_CAPACITY
|
|
regionLength
>
=
ULOC_COUNTRY_CAPACITY
)
{
goto
error
;
}
else
{
char
tagBuffer
[
ULOC_FULLNAME_CAPACITY
]
;
int32_t
tagLength
=
0
;
UBool
regionAppended
=
false
;
if
(
langLength
>
0
)
{
appendTag
(
lang
langLength
tagBuffer
&
tagLength
false
)
;
}
else
if
(
alternateTags
=
=
nullptr
)
{
}
else
{
char
alternateLang
[
ULOC_LANG_CAPACITY
]
;
int32_t
alternateLangLength
=
sizeof
(
alternateLang
)
;
alternateLangLength
=
uloc_getLanguage
(
alternateTags
alternateLang
alternateLangLength
err
)
;
if
(
U_FAILURE
(
*
err
)
|
|
alternateLangLength
>
=
ULOC_LANG_CAPACITY
)
{
goto
error
;
}
else
if
(
alternateLangLength
=
=
0
)
{
}
else
{
appendTag
(
alternateLang
alternateLangLength
tagBuffer
&
tagLength
false
)
;
}
}
if
(
scriptLength
>
0
)
{
appendTag
(
script
scriptLength
tagBuffer
&
tagLength
true
)
;
}
else
if
(
alternateTags
!
=
nullptr
)
{
char
alternateScript
[
ULOC_SCRIPT_CAPACITY
]
;
const
int32_t
alternateScriptLength
=
uloc_getScript
(
alternateTags
alternateScript
sizeof
(
alternateScript
)
err
)
;
if
(
U_FAILURE
(
*
err
)
|
|
alternateScriptLength
>
=
ULOC_SCRIPT_CAPACITY
)
{
goto
error
;
}
else
if
(
alternateScriptLength
>
0
)
{
appendTag
(
alternateScript
alternateScriptLength
tagBuffer
&
tagLength
true
)
;
}
}
if
(
regionLength
>
0
)
{
appendTag
(
region
regionLength
tagBuffer
&
tagLength
true
)
;
regionAppended
=
true
;
}
else
if
(
alternateTags
!
=
nullptr
)
{
char
alternateRegion
[
ULOC_COUNTRY_CAPACITY
]
;
const
int32_t
alternateRegionLength
=
uloc_getCountry
(
alternateTags
alternateRegion
sizeof
(
alternateRegion
)
err
)
;
if
(
U_FAILURE
(
*
err
)
|
|
alternateRegionLength
>
=
ULOC_COUNTRY_CAPACITY
)
{
goto
error
;
}
else
if
(
alternateRegionLength
>
0
)
{
appendTag
(
alternateRegion
alternateRegionLength
tagBuffer
&
tagLength
true
)
;
regionAppended
=
true
;
}
}
sink
.
Append
(
tagBuffer
tagLength
)
;
if
(
trailingLength
>
0
)
{
if
(
*
trailing
!
=
'
'
)
{
sink
.
Append
(
"
_
"
1
)
;
if
(
!
regionAppended
)
{
sink
.
Append
(
"
_
"
1
)
;
}
}
sink
.
Append
(
trailing
trailingLength
)
;
}
return
;
}
error
:
if
(
*
err
=
=
U_BUFFER_OVERFLOW_ERROR
|
|
U_SUCCESS
(
*
err
)
)
{
*
err
=
U_ILLEGAL_ARGUMENT_ERROR
;
}
}
static
int32_t
U_CALLCONV
parseTagString
(
const
char
*
localeID
char
*
lang
int32_t
*
langLength
char
*
script
int32_t
*
scriptLength
char
*
region
int32_t
*
regionLength
UErrorCode
*
err
)
{
const
char
*
position
=
localeID
;
int32_t
subtagLength
=
0
;
if
(
U_FAILURE
(
*
err
)
|
|
localeID
=
=
nullptr
|
|
lang
=
=
nullptr
|
|
langLength
=
=
nullptr
|
|
script
=
=
nullptr
|
|
scriptLength
=
=
nullptr
|
|
region
=
=
nullptr
|
|
regionLength
=
=
nullptr
)
{
goto
error
;
}
subtagLength
=
ulocimp_getLanguage
(
position
&
position
*
err
)
.
extract
(
lang
*
langLength
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
goto
error
;
}
*
langLength
=
subtagLength
;
if
(
_isIDSeparator
(
*
position
)
)
{
+
+
position
;
}
subtagLength
=
ulocimp_getScript
(
position
&
position
*
err
)
.
extract
(
script
*
scriptLength
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
goto
error
;
}
*
scriptLength
=
subtagLength
;
if
(
*
scriptLength
>
0
)
{
if
(
_isIDSeparator
(
*
position
)
)
{
+
+
position
;
}
}
subtagLength
=
ulocimp_getCountry
(
position
&
position
*
err
)
.
extract
(
region
*
regionLength
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
goto
error
;
}
*
regionLength
=
subtagLength
;
if
(
*
regionLength
<
=
0
&
&
*
position
!
=
0
&
&
*
position
!
=
'
'
)
{
-
-
position
;
}
exit
:
return
(
int32_t
)
(
position
-
localeID
)
;
error
:
if
(
!
U_FAILURE
(
*
err
)
)
{
*
err
=
U_ILLEGAL_ARGUMENT_ERROR
;
}
goto
exit
;
}
#
define
CHECK_TRAILING_VARIANT_SIZE
(
trailing
trailingLength
)
UPRV_BLOCK_MACRO_BEGIN
{
\
int32_t
count
=
0
;
\
int32_t
i
;
\
for
(
i
=
0
;
i
<
trailingLength
;
i
+
+
)
{
\
if
(
trailing
[
i
]
=
=
'
-
'
|
|
trailing
[
i
]
=
=
'
_
'
)
{
\
count
=
0
;
\
if
(
count
>
8
)
{
\
goto
error
;
\
}
\
}
else
if
(
trailing
[
i
]
=
=
'
'
)
{
\
break
;
\
}
else
if
(
count
>
8
)
{
\
goto
error
;
\
}
else
{
\
count
+
+
;
\
}
\
}
\
}
UPRV_BLOCK_MACRO_END
static
UBool
_uloc_addLikelySubtags
(
const
char
*
localeID
icu
:
:
ByteSink
&
sink
UErrorCode
*
err
)
{
char
lang
[
ULOC_LANG_CAPACITY
]
;
int32_t
langLength
=
sizeof
(
lang
)
;
char
script
[
ULOC_SCRIPT_CAPACITY
]
;
int32_t
scriptLength
=
sizeof
(
script
)
;
char
region
[
ULOC_COUNTRY_CAPACITY
]
;
int32_t
regionLength
=
sizeof
(
region
)
;
const
char
*
trailing
=
"
"
;
int32_t
trailingLength
=
0
;
int32_t
trailingIndex
=
0
;
if
(
U_FAILURE
(
*
err
)
)
{
goto
error
;
}
if
(
localeID
=
=
nullptr
)
{
goto
error
;
}
trailingIndex
=
parseTagString
(
localeID
lang
&
langLength
script
&
scriptLength
region
&
regionLength
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
if
(
*
err
=
=
U_BUFFER_OVERFLOW_ERROR
)
{
*
err
=
U_ILLEGAL_ARGUMENT_ERROR
;
}
goto
error
;
}
if
(
langLength
>
3
)
{
if
(
langLength
=
=
4
&
&
scriptLength
=
=
0
)
{
langLength
=
0
;
scriptLength
=
4
;
uprv_memcpy
(
script
lang
4
)
;
lang
[
0
]
=
'
\
0
'
;
}
else
{
goto
error
;
}
}
while
(
_isIDSeparator
(
localeID
[
trailingIndex
]
)
)
{
trailingIndex
+
+
;
}
trailing
=
&
localeID
[
trailingIndex
]
;
trailingLength
=
(
int32_t
)
uprv_strlen
(
trailing
)
;
CHECK_TRAILING_VARIANT_SIZE
(
trailing
trailingLength
)
;
{
const
icu
:
:
XLikelySubtags
*
likelySubtags
=
icu
:
:
XLikelySubtags
:
:
getSingleton
(
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
goto
error
;
}
icu
:
:
Locale
l
=
icu
:
:
Locale
:
:
createFromName
(
localeID
)
;
if
(
l
.
isBogus
(
)
)
{
goto
error
;
}
icu
:
:
LSR
lsr
=
likelySubtags
-
>
makeMaximizedLsrFrom
(
l
true
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
goto
error
;
}
const
char
*
language
=
lsr
.
language
;
if
(
uprv_strcmp
(
language
"
und
"
)
=
=
0
)
{
language
=
"
"
;
}
createTagStringWithAlternates
(
language
(
int32_t
)
uprv_strlen
(
language
)
lsr
.
script
(
int32_t
)
uprv_strlen
(
lsr
.
script
)
lsr
.
region
(
int32_t
)
uprv_strlen
(
lsr
.
region
)
trailing
trailingLength
nullptr
sink
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
goto
error
;
}
}
return
true
;
error
:
if
(
!
U_FAILURE
(
*
err
)
)
{
*
err
=
U_ILLEGAL_ARGUMENT_ERROR
;
}
return
false
;
}
static
UBool
_ulocimp_addLikelySubtags
(
const
char
*
icu
:
:
ByteSink
&
UErrorCode
*
)
;
static
void
_uloc_minimizeSubtags
(
const
char
*
localeID
icu
:
:
ByteSink
&
sink
bool
favorScript
UErrorCode
*
err
)
{
icu
:
:
CharString
maximizedTagBuffer
;
char
lang
[
ULOC_LANG_CAPACITY
]
;
int32_t
langLength
=
sizeof
(
lang
)
;
char
script
[
ULOC_SCRIPT_CAPACITY
]
;
int32_t
scriptLength
=
sizeof
(
script
)
;
char
region
[
ULOC_COUNTRY_CAPACITY
]
;
int32_t
regionLength
=
sizeof
(
region
)
;
const
char
*
trailing
=
"
"
;
int32_t
trailingLength
=
0
;
int32_t
trailingIndex
=
0
;
if
(
U_FAILURE
(
*
err
)
)
{
goto
error
;
}
else
if
(
localeID
=
=
nullptr
)
{
goto
error
;
}
trailingIndex
=
parseTagString
(
localeID
lang
&
langLength
script
&
scriptLength
region
&
regionLength
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
if
(
*
err
=
=
U_BUFFER_OVERFLOW_ERROR
)
{
*
err
=
U_ILLEGAL_ARGUMENT_ERROR
;
}
goto
error
;
}
while
(
_isIDSeparator
(
localeID
[
trailingIndex
]
)
)
{
trailingIndex
+
+
;
}
trailing
=
&
localeID
[
trailingIndex
]
;
trailingLength
=
(
int32_t
)
uprv_strlen
(
trailing
)
;
CHECK_TRAILING_VARIANT_SIZE
(
trailing
trailingLength
)
;
{
const
icu
:
:
XLikelySubtags
*
likelySubtags
=
icu
:
:
XLikelySubtags
:
:
getSingleton
(
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
goto
error
;
}
icu
:
:
LSR
lsr
=
likelySubtags
-
>
minimizeSubtags
(
{
lang
langLength
}
{
script
scriptLength
}
{
region
regionLength
}
favorScript
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
goto
error
;
}
const
char
*
language
=
lsr
.
language
;
if
(
uprv_strcmp
(
language
"
und
"
)
=
=
0
)
{
language
=
"
"
;
}
createTagStringWithAlternates
(
language
(
int32_t
)
uprv_strlen
(
language
)
lsr
.
script
(
int32_t
)
uprv_strlen
(
lsr
.
script
)
lsr
.
region
(
int32_t
)
uprv_strlen
(
lsr
.
region
)
trailing
trailingLength
nullptr
sink
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
goto
error
;
}
return
;
}
error
:
if
(
!
U_FAILURE
(
*
err
)
)
{
*
err
=
U_ILLEGAL_ARGUMENT_ERROR
;
}
}
U_CAPI
int32_t
U_EXPORT2
uloc_addLikelySubtags
(
const
char
*
localeID
char
*
maximizedLocaleID
int32_t
maximizedLocaleIDCapacity
UErrorCode
*
status
)
{
if
(
U_FAILURE
(
*
status
)
)
{
return
0
;
}
icu
:
:
CheckedArrayByteSink
sink
(
maximizedLocaleID
maximizedLocaleIDCapacity
)
;
ulocimp_addLikelySubtags
(
localeID
sink
status
)
;
int32_t
reslen
=
sink
.
NumberOfBytesAppended
(
)
;
if
(
U_FAILURE
(
*
status
)
)
{
return
sink
.
Overflowed
(
)
?
reslen
:
-
1
;
}
if
(
sink
.
Overflowed
(
)
)
{
*
status
=
U_BUFFER_OVERFLOW_ERROR
;
}
else
{
u_terminateChars
(
maximizedLocaleID
maximizedLocaleIDCapacity
reslen
status
)
;
}
return
reslen
;
}
static
UBool
_ulocimp_addLikelySubtags
(
const
char
*
localeID
icu
:
:
ByteSink
&
sink
UErrorCode
*
status
)
{
icu
:
:
CharString
localeBuffer
;
{
icu
:
:
CharStringByteSink
localeSink
(
&
localeBuffer
)
;
ulocimp_canonicalize
(
localeID
localeSink
status
)
;
}
if
(
U_SUCCESS
(
*
status
)
)
{
return
_uloc_addLikelySubtags
(
localeBuffer
.
data
(
)
sink
status
)
;
}
else
{
return
false
;
}
}
U_CAPI
void
U_EXPORT2
ulocimp_addLikelySubtags
(
const
char
*
localeID
icu
:
:
ByteSink
&
sink
UErrorCode
*
status
)
{
_ulocimp_addLikelySubtags
(
localeID
sink
status
)
;
}
U_CAPI
int32_t
U_EXPORT2
uloc_minimizeSubtags
(
const
char
*
localeID
char
*
minimizedLocaleID
int32_t
minimizedLocaleIDCapacity
UErrorCode
*
status
)
{
if
(
U_FAILURE
(
*
status
)
)
{
return
0
;
}
icu
:
:
CheckedArrayByteSink
sink
(
minimizedLocaleID
minimizedLocaleIDCapacity
)
;
ulocimp_minimizeSubtags
(
localeID
sink
false
status
)
;
int32_t
reslen
=
sink
.
NumberOfBytesAppended
(
)
;
if
(
U_FAILURE
(
*
status
)
)
{
return
sink
.
Overflowed
(
)
?
reslen
:
-
1
;
}
if
(
sink
.
Overflowed
(
)
)
{
*
status
=
U_BUFFER_OVERFLOW_ERROR
;
}
else
{
u_terminateChars
(
minimizedLocaleID
minimizedLocaleIDCapacity
reslen
status
)
;
}
return
reslen
;
}
U_CAPI
void
U_EXPORT2
ulocimp_minimizeSubtags
(
const
char
*
localeID
icu
:
:
ByteSink
&
sink
bool
favorScript
UErrorCode
*
status
)
{
icu
:
:
CharString
localeBuffer
;
{
icu
:
:
CharStringByteSink
localeSink
(
&
localeBuffer
)
;
ulocimp_canonicalize
(
localeID
localeSink
status
)
;
}
_uloc_minimizeSubtags
(
localeBuffer
.
data
(
)
sink
favorScript
status
)
;
}
static
const
char
LANG_DIR_STRING
[
]
=
"
root
-
en
-
es
-
pt
-
zh
-
ja
-
ko
-
de
-
fr
-
it
-
ar
+
he
+
fa
+
ru
-
nl
-
pl
-
th
-
tr
-
"
;
U_CAPI
UBool
U_EXPORT2
uloc_isRightToLeft
(
const
char
*
locale
)
{
UErrorCode
errorCode
=
U_ZERO_ERROR
;
char
script
[
8
]
;
int32_t
scriptLength
=
uloc_getScript
(
locale
script
UPRV_LENGTHOF
(
script
)
&
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
|
|
errorCode
=
=
U_STRING_NOT_TERMINATED_WARNING
|
|
scriptLength
=
=
0
)
{
errorCode
=
U_ZERO_ERROR
;
char
lang
[
8
]
;
int32_t
langLength
=
uloc_getLanguage
(
locale
lang
UPRV_LENGTHOF
(
lang
)
&
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
|
|
errorCode
=
=
U_STRING_NOT_TERMINATED_WARNING
)
{
return
false
;
}
if
(
langLength
>
0
)
{
const
char
*
langPtr
=
uprv_strstr
(
LANG_DIR_STRING
lang
)
;
if
(
langPtr
!
=
nullptr
)
{
switch
(
langPtr
[
langLength
]
)
{
case
'
-
'
:
return
false
;
case
'
+
'
:
return
true
;
default
:
break
;
}
}
}
errorCode
=
U_ZERO_ERROR
;
icu
:
:
CharString
likely
;
{
icu
:
:
CharStringByteSink
sink
(
&
likely
)
;
ulocimp_addLikelySubtags
(
locale
sink
&
errorCode
)
;
}
if
(
U_FAILURE
(
errorCode
)
|
|
errorCode
=
=
U_STRING_NOT_TERMINATED_WARNING
)
{
return
false
;
}
scriptLength
=
uloc_getScript
(
likely
.
data
(
)
script
UPRV_LENGTHOF
(
script
)
&
errorCode
)
;
if
(
U_FAILURE
(
errorCode
)
|
|
errorCode
=
=
U_STRING_NOT_TERMINATED_WARNING
|
|
scriptLength
=
=
0
)
{
return
false
;
}
}
UScriptCode
scriptCode
=
(
UScriptCode
)
u_getPropertyValueEnum
(
UCHAR_SCRIPT
script
)
;
return
uscript_isRightToLeft
(
scriptCode
)
;
}
U_NAMESPACE_BEGIN
UBool
Locale
:
:
isRightToLeft
(
)
const
{
return
uloc_isRightToLeft
(
getBaseName
(
)
)
;
}
U_NAMESPACE_END
#
define
ULOC_RG_BUFLEN
8
U_CAPI
int32_t
U_EXPORT2
ulocimp_getRegionForSupplementalData
(
const
char
*
localeID
UBool
inferRegion
char
*
region
int32_t
regionCapacity
UErrorCode
*
status
)
{
if
(
U_FAILURE
(
*
status
)
)
{
return
0
;
}
char
rgBuf
[
ULOC_RG_BUFLEN
]
;
UErrorCode
rgStatus
=
U_ZERO_ERROR
;
icu
:
:
CharString
rg
;
{
icu
:
:
CharStringByteSink
sink
(
&
rg
)
;
ulocimp_getKeywordValue
(
localeID
"
rg
"
sink
&
rgStatus
)
;
}
int32_t
rgLen
=
rg
.
length
(
)
;
if
(
U_FAILURE
(
rgStatus
)
|
|
rgLen
<
3
|
|
rgLen
>
7
)
{
rgLen
=
0
;
}
else
{
const
char
*
const
data
=
rg
.
data
(
)
;
if
(
uprv_isASCIILetter
(
data
[
0
]
)
)
{
rgLen
=
2
;
rgBuf
[
0
]
=
uprv_toupper
(
data
[
0
]
)
;
rgBuf
[
1
]
=
uprv_toupper
(
data
[
1
]
)
;
}
else
{
rgLen
=
3
;
uprv_memcpy
(
rgBuf
data
rgLen
)
;
}
}
if
(
rgLen
=
=
0
)
{
rgLen
=
uloc_getCountry
(
localeID
rgBuf
ULOC_RG_BUFLEN
status
)
;
if
(
U_FAILURE
(
*
status
)
)
{
rgLen
=
0
;
}
else
if
(
rgLen
=
=
0
&
&
inferRegion
)
{
rgStatus
=
U_ZERO_ERROR
;
icu
:
:
CharString
locBuf
;
{
icu
:
:
CharStringByteSink
sink
(
&
locBuf
)
;
ulocimp_addLikelySubtags
(
localeID
sink
&
rgStatus
)
;
}
if
(
U_SUCCESS
(
rgStatus
)
)
{
rgLen
=
uloc_getCountry
(
locBuf
.
data
(
)
rgBuf
ULOC_RG_BUFLEN
status
)
;
if
(
U_FAILURE
(
*
status
)
)
{
rgLen
=
0
;
}
}
}
}
rgBuf
[
rgLen
]
=
0
;
uprv_strncpy
(
region
rgBuf
regionCapacity
)
;
return
u_terminateChars
(
region
regionCapacity
rgLen
status
)
;
}
