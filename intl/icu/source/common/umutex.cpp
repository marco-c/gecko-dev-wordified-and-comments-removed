#
include
"
umutex
.
h
"
#
include
"
unicode
/
utypes
.
h
"
#
include
"
uassert
.
h
"
#
include
"
cmemory
.
h
"
U_NAMESPACE_BEGIN
#
if
defined
(
U_USER_MUTEX_CPP
)
#
error
U_USER_MUTEX_CPP
not
supported
#
endif
static
UMutex
*
globalMutex
(
)
{
static
UMutex
m
=
U_MUTEX_INITIALIZER
;
return
&
m
;
}
U_CAPI
void
U_EXPORT2
umtx_lock
(
UMutex
*
mutex
)
{
if
(
mutex
=
=
nullptr
)
{
mutex
=
globalMutex
(
)
;
}
mutex
-
>
fMutex
.
lock
(
)
;
}
U_CAPI
void
U_EXPORT2
umtx_unlock
(
UMutex
*
mutex
)
{
if
(
mutex
=
=
nullptr
)
{
mutex
=
globalMutex
(
)
;
}
mutex
-
>
fMutex
.
unlock
(
)
;
}
UConditionVar
:
:
UConditionVar
(
)
:
fCV
(
)
{
}
UConditionVar
:
:
~
UConditionVar
(
)
{
}
U_CAPI
void
U_EXPORT2
umtx_condWait
(
UConditionVar
*
cond
UMutex
*
mutex
)
{
if
(
mutex
=
=
nullptr
)
{
mutex
=
globalMutex
(
)
;
}
cond
-
>
fCV
.
wait
(
mutex
-
>
fMutex
)
;
}
U_CAPI
void
U_EXPORT2
umtx_condBroadcast
(
UConditionVar
*
cond
)
{
cond
-
>
fCV
.
notify_all
(
)
;
}
U_CAPI
void
U_EXPORT2
umtx_condSignal
(
UConditionVar
*
cond
)
{
cond
-
>
fCV
.
notify_one
(
)
;
}
static
std
:
:
mutex
&
initMutex
(
)
{
static
std
:
:
mutex
m
;
return
m
;
}
static
std
:
:
condition_variable
&
initCondition
(
)
{
static
std
:
:
condition_variable
cv
;
return
cv
;
}
U_COMMON_API
UBool
U_EXPORT2
umtx_initImplPreInit
(
UInitOnce
&
uio
)
{
std
:
:
unique_lock
<
std
:
:
mutex
>
lock
(
initMutex
(
)
)
;
if
(
umtx_loadAcquire
(
uio
.
fState
)
=
=
0
)
{
umtx_storeRelease
(
uio
.
fState
1
)
;
return
true
;
}
else
{
while
(
umtx_loadAcquire
(
uio
.
fState
)
=
=
1
)
{
initCondition
(
)
.
wait
(
lock
)
;
}
U_ASSERT
(
uio
.
fState
=
=
2
)
;
return
false
;
}
}
U_COMMON_API
void
U_EXPORT2
umtx_initImplPostInit
(
UInitOnce
&
uio
)
{
{
std
:
:
unique_lock
<
std
:
:
mutex
>
lock
(
initMutex
(
)
)
;
umtx_storeRelease
(
uio
.
fState
2
)
;
}
initCondition
(
)
.
notify_all
(
)
;
}
U_NAMESPACE_END
U_DEPRECATED
void
U_EXPORT2
u_setMutexFunctions
(
const
void
*
UMtxInitFn
*
UMtxFn
*
UMtxFn
*
UMtxFn
*
UErrorCode
*
status
)
{
if
(
U_SUCCESS
(
*
status
)
)
{
*
status
=
U_UNSUPPORTED_ERROR
;
}
return
;
}
U_DEPRECATED
void
U_EXPORT2
u_setAtomicIncDecFunctions
(
const
void
*
UMtxAtomicFn
*
UMtxAtomicFn
*
UErrorCode
*
status
)
{
if
(
U_SUCCESS
(
*
status
)
)
{
*
status
=
U_UNSUPPORTED_ERROR
;
}
return
;
}
