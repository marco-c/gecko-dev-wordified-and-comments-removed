#
ifndef
__UCPTRIE_H__
#
define
__UCPTRIE_H__
#
include
"
unicode
/
utypes
.
h
"
#
ifndef
U_HIDE_DRAFT_API
#
include
"
unicode
/
localpointer
.
h
"
#
include
"
unicode
/
ucpmap
.
h
"
#
include
"
unicode
/
utf8
.
h
"
U_CDECL_BEGIN
#
ifndef
U_IN_DOXYGEN
typedef
union
UCPTrieData
{
const
void
*
ptr0
;
const
uint16_t
*
ptr16
;
const
uint32_t
*
ptr32
;
const
uint8_t
*
ptr8
;
}
UCPTrieData
;
#
endif
struct
UCPTrie
{
#
ifndef
U_IN_DOXYGEN
const
uint16_t
*
index
;
UCPTrieData
data
;
int32_t
indexLength
;
int32_t
dataLength
;
UChar32
highStart
;
uint16_t
shifted12HighStart
;
int8_t
type
;
int8_t
valueWidth
;
uint32_t
reserved32
;
uint16_t
reserved16
;
uint16_t
index3NullOffset
;
int32_t
dataNullOffset
;
uint32_t
nullValue
;
#
ifdef
UCPTRIE_DEBUG
const
char
*
name
;
#
endif
#
endif
}
;
#
ifndef
U_IN_DOXYGEN
typedef
struct
UCPTrie
UCPTrie
;
#
endif
enum
UCPTrieType
{
UCPTRIE_TYPE_ANY
=
-
1
UCPTRIE_TYPE_FAST
UCPTRIE_TYPE_SMALL
}
;
#
ifndef
U_IN_DOXYGEN
typedef
enum
UCPTrieType
UCPTrieType
;
#
endif
enum
UCPTrieValueWidth
{
UCPTRIE_VALUE_BITS_ANY
=
-
1
UCPTRIE_VALUE_BITS_16
UCPTRIE_VALUE_BITS_32
UCPTRIE_VALUE_BITS_8
}
;
#
ifndef
U_IN_DOXYGEN
typedef
enum
UCPTrieValueWidth
UCPTrieValueWidth
;
#
endif
U_CAPI
UCPTrie
*
U_EXPORT2
ucptrie_openFromBinary
(
UCPTrieType
type
UCPTrieValueWidth
valueWidth
const
void
*
data
int32_t
length
int32_t
*
pActualLength
UErrorCode
*
pErrorCode
)
;
U_CAPI
void
U_EXPORT2
ucptrie_close
(
UCPTrie
*
trie
)
;
#
if
U_SHOW_CPLUSPLUS_API
U_NAMESPACE_BEGIN
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalUCPTriePointer
UCPTrie
ucptrie_close
)
;
U_NAMESPACE_END
#
endif
U_CAPI
UCPTrieType
U_EXPORT2
ucptrie_getType
(
const
UCPTrie
*
trie
)
;
U_CAPI
UCPTrieValueWidth
U_EXPORT2
ucptrie_getValueWidth
(
const
UCPTrie
*
trie
)
;
U_CAPI
uint32_t
U_EXPORT2
ucptrie_get
(
const
UCPTrie
*
trie
UChar32
c
)
;
U_CAPI
UChar32
U_EXPORT2
ucptrie_getRange
(
const
UCPTrie
*
trie
UChar32
start
UCPMapRangeOption
option
uint32_t
surrogateValue
UCPMapValueFilter
*
filter
const
void
*
context
uint32_t
*
pValue
)
;
U_CAPI
int32_t
U_EXPORT2
ucptrie_toBinary
(
const
UCPTrie
*
trie
void
*
data
int32_t
capacity
UErrorCode
*
pErrorCode
)
;
#
define
UCPTRIE_16
(
trie
i
)
(
(
trie
)
-
>
data
.
ptr16
[
i
]
)
#
define
UCPTRIE_32
(
trie
i
)
(
(
trie
)
-
>
data
.
ptr32
[
i
]
)
#
define
UCPTRIE_8
(
trie
i
)
(
(
trie
)
-
>
data
.
ptr8
[
i
]
)
#
define
UCPTRIE_FAST_GET
(
trie
dataAccess
c
)
dataAccess
(
trie
_UCPTRIE_CP_INDEX
(
trie
0xffff
c
)
)
#
define
UCPTRIE_SMALL_GET
(
trie
dataAccess
c
)
\
dataAccess
(
trie
_UCPTRIE_CP_INDEX
(
trie
UCPTRIE_SMALL_MAX
c
)
)
#
define
UCPTRIE_FAST_U16_NEXT
(
trie
dataAccess
src
limit
c
result
)
{
\
(
c
)
=
*
(
src
)
+
+
;
\
int32_t
__index
;
\
if
(
!
U16_IS_SURROGATE
(
c
)
)
{
\
__index
=
_UCPTRIE_FAST_INDEX
(
trie
c
)
;
\
}
else
{
\
uint16_t
__c2
;
\
if
(
U16_IS_SURROGATE_LEAD
(
c
)
&
&
(
src
)
!
=
(
limit
)
&
&
U16_IS_TRAIL
(
__c2
=
*
(
src
)
)
)
{
\
+
+
(
src
)
;
\
(
c
)
=
U16_GET_SUPPLEMENTARY
(
(
c
)
__c2
)
;
\
__index
=
_UCPTRIE_SMALL_INDEX
(
trie
c
)
;
\
}
else
{
\
__index
=
(
trie
)
-
>
dataLength
-
UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET
;
\
}
\
}
\
(
result
)
=
dataAccess
(
trie
__index
)
;
\
}
#
define
UCPTRIE_FAST_U16_PREV
(
trie
dataAccess
start
src
c
result
)
{
\
(
c
)
=
*
-
-
(
src
)
;
\
int32_t
__index
;
\
if
(
!
U16_IS_SURROGATE
(
c
)
)
{
\
__index
=
_UCPTRIE_FAST_INDEX
(
trie
c
)
;
\
}
else
{
\
uint16_t
__c2
;
\
if
(
U16_IS_SURROGATE_TRAIL
(
c
)
&
&
(
src
)
!
=
(
start
)
&
&
U16_IS_LEAD
(
__c2
=
*
(
(
src
)
-
1
)
)
)
{
\
-
-
(
src
)
;
\
(
c
)
=
U16_GET_SUPPLEMENTARY
(
__c2
(
c
)
)
;
\
__index
=
_UCPTRIE_SMALL_INDEX
(
trie
c
)
;
\
}
else
{
\
__index
=
(
trie
)
-
>
dataLength
-
UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET
;
\
}
\
}
\
(
result
)
=
dataAccess
(
trie
__index
)
;
\
}
#
define
UCPTRIE_FAST_U8_NEXT
(
trie
dataAccess
src
limit
result
)
{
\
int32_t
__lead
=
(
uint8_t
)
*
(
src
)
+
+
;
\
if
(
!
U8_IS_SINGLE
(
__lead
)
)
{
\
uint8_t
__t1
__t2
__t3
;
\
if
(
(
src
)
!
=
(
limit
)
&
&
\
(
__lead
>
=
0xe0
?
\
__lead
<
0xf0
?
/
*
U
+
0800
.
.
U
+
FFFF
except
surrogates
*
/
\
U8_LEAD3_T1_BITS
[
__lead
&
=
0xf
]
&
(
1
<
<
(
(
__t1
=
*
(
src
)
)
>
>
5
)
)
&
&
\
+
+
(
src
)
!
=
(
limit
)
&
&
(
__t2
=
*
(
src
)
-
0x80
)
<
=
0x3f
&
&
\
(
__lead
=
(
(
int32_t
)
(
trie
)
-
>
index
[
(
__lead
<
<
6
)
+
(
__t1
&
0x3f
)
]
)
+
__t2
1
)
\
:
/
*
U
+
10000
.
.
U
+
10FFFF
*
/
\
(
__lead
-
=
0xf0
)
<
=
4
&
&
\
U8_LEAD4_T1_BITS
[
(
__t1
=
*
(
src
)
)
>
>
4
]
&
(
1
<
<
__lead
)
&
&
\
(
__lead
=
(
__lead
<
<
6
)
|
(
__t1
&
0x3f
)
+
+
(
src
)
!
=
(
limit
)
)
&
&
\
(
__t2
=
*
(
src
)
-
0x80
)
<
=
0x3f
&
&
\
+
+
(
src
)
!
=
(
limit
)
&
&
(
__t3
=
*
(
src
)
-
0x80
)
<
=
0x3f
&
&
\
(
__lead
=
__lead
>
=
(
trie
)
-
>
shifted12HighStart
?
\
(
trie
)
-
>
dataLength
-
UCPTRIE_HIGH_VALUE_NEG_DATA_OFFSET
:
\
ucptrie_internalSmallU8Index
(
(
trie
)
__lead
__t2
__t3
)
1
)
\
:
/
*
U
+
0080
.
.
U
+
07FF
*
/
\
__lead
>
=
0xc2
&
&
(
__t1
=
*
(
src
)
-
0x80
)
<
=
0x3f
&
&
\
(
__lead
=
(
int32_t
)
(
trie
)
-
>
index
[
__lead
&
0x1f
]
+
__t1
1
)
)
)
{
\
+
+
(
src
)
;
\
}
else
{
\
__lead
=
(
trie
)
-
>
dataLength
-
UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET
;
/
*
ill
-
formed
*
/
\
}
\
}
\
(
result
)
=
dataAccess
(
trie
__lead
)
;
\
}
#
define
UCPTRIE_FAST_U8_PREV
(
trie
dataAccess
start
src
result
)
{
\
int32_t
__index
=
(
uint8_t
)
*
-
-
(
src
)
;
\
if
(
!
U8_IS_SINGLE
(
__index
)
)
{
\
__index
=
ucptrie_internalU8PrevIndex
(
(
trie
)
__index
(
const
uint8_t
*
)
(
start
)
\
(
const
uint8_t
*
)
(
src
)
)
;
\
(
src
)
-
=
__index
&
7
;
\
__index
>
>
=
3
;
\
}
\
(
result
)
=
dataAccess
(
trie
__index
)
;
\
}
#
define
UCPTRIE_ASCII_GET
(
trie
dataAccess
c
)
dataAccess
(
trie
c
)
#
define
UCPTRIE_FAST_BMP_GET
(
trie
dataAccess
c
)
dataAccess
(
trie
_UCPTRIE_FAST_INDEX
(
trie
c
)
)
#
define
UCPTRIE_FAST_SUPP_GET
(
trie
dataAccess
c
)
dataAccess
(
trie
_UCPTRIE_SMALL_INDEX
(
trie
c
)
)
#
ifndef
U_IN_DOXYGEN
enum
{
UCPTRIE_FAST_SHIFT
=
6
UCPTRIE_FAST_DATA_BLOCK_LENGTH
=
1
<
<
UCPTRIE_FAST_SHIFT
UCPTRIE_FAST_DATA_MASK
=
UCPTRIE_FAST_DATA_BLOCK_LENGTH
-
1
UCPTRIE_SMALL_MAX
=
0xfff
UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET
=
1
UCPTRIE_HIGH_VALUE_NEG_DATA_OFFSET
=
2
}
;
U_INTERNAL
int32_t
U_EXPORT2
ucptrie_internalSmallIndex
(
const
UCPTrie
*
trie
UChar32
c
)
;
U_INTERNAL
int32_t
U_EXPORT2
ucptrie_internalSmallU8Index
(
const
UCPTrie
*
trie
int32_t
lt1
uint8_t
t2
uint8_t
t3
)
;
U_INTERNAL
int32_t
U_EXPORT2
ucptrie_internalU8PrevIndex
(
const
UCPTrie
*
trie
UChar32
c
const
uint8_t
*
start
const
uint8_t
*
src
)
;
#
define
_UCPTRIE_FAST_INDEX
(
trie
c
)
\
(
(
int32_t
)
(
trie
)
-
>
index
[
(
c
)
>
>
UCPTRIE_FAST_SHIFT
]
+
(
(
c
)
&
UCPTRIE_FAST_DATA_MASK
)
)
#
define
_UCPTRIE_SMALL_INDEX
(
trie
c
)
\
(
(
c
)
>
=
(
trie
)
-
>
highStart
?
\
(
trie
)
-
>
dataLength
-
UCPTRIE_HIGH_VALUE_NEG_DATA_OFFSET
:
\
ucptrie_internalSmallIndex
(
trie
c
)
)
#
define
_UCPTRIE_CP_INDEX
(
trie
fastMax
c
)
\
(
(
uint32_t
)
(
c
)
<
=
(
uint32_t
)
(
fastMax
)
?
\
_UCPTRIE_FAST_INDEX
(
trie
c
)
:
\
(
uint32_t
)
(
c
)
<
=
0x10ffff
?
\
_UCPTRIE_SMALL_INDEX
(
trie
c
)
:
\
(
trie
)
-
>
dataLength
-
UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET
)
U_CDECL_END
#
endif
#
endif
#
endif
