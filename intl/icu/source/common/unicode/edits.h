#
ifndef
__EDITS_H__
#
define
__EDITS_H__
#
include
"
unicode
/
utypes
.
h
"
#
include
"
unicode
/
uobject
.
h
"
U_NAMESPACE_BEGIN
#
ifndef
U_HIDE_DRAFT_API
class
U_COMMON_API
Edits
U_FINAL
:
public
UMemory
{
public
:
Edits
(
)
:
array
(
stackArray
)
capacity
(
STACK_CAPACITY
)
length
(
0
)
delta
(
0
)
errorCode
(
U_ZERO_ERROR
)
{
}
~
Edits
(
)
;
void
reset
(
)
;
void
addUnchanged
(
int32_t
unchangedLength
)
;
void
addReplace
(
int32_t
oldLength
int32_t
newLength
)
;
UBool
copyErrorTo
(
UErrorCode
&
outErrorCode
)
;
int32_t
lengthDelta
(
)
const
{
return
delta
;
}
UBool
hasChanges
(
)
const
;
struct
U_COMMON_API
Iterator
U_FINAL
:
public
UMemory
{
Iterator
(
const
Iterator
&
other
)
=
default
;
Iterator
&
operator
=
(
const
Iterator
&
other
)
=
default
;
UBool
next
(
UErrorCode
&
errorCode
)
{
return
next
(
onlyChanges_
errorCode
)
;
}
UBool
findSourceIndex
(
int32_t
i
UErrorCode
&
errorCode
)
;
UBool
hasChange
(
)
const
{
return
changed
;
}
int32_t
oldLength
(
)
const
{
return
oldLength_
;
}
int32_t
newLength
(
)
const
{
return
newLength_
;
}
int32_t
sourceIndex
(
)
const
{
return
srcIndex
;
}
int32_t
replacementIndex
(
)
const
{
return
replIndex
;
}
int32_t
destinationIndex
(
)
const
{
return
destIndex
;
}
private
:
friend
class
Edits
;
Iterator
(
const
uint16_t
*
a
int32_t
len
UBool
oc
UBool
crs
)
;
int32_t
readLength
(
int32_t
head
)
;
void
updateIndexes
(
)
;
UBool
noNext
(
)
;
UBool
next
(
UBool
onlyChanges
UErrorCode
&
errorCode
)
;
const
uint16_t
*
array
;
int32_t
index
length
;
int32_t
remaining
;
UBool
onlyChanges_
coarse
;
UBool
changed
;
int32_t
oldLength_
newLength_
;
int32_t
srcIndex
replIndex
destIndex
;
}
;
Iterator
getCoarseChangesIterator
(
)
const
{
return
Iterator
(
array
length
TRUE
TRUE
)
;
}
Iterator
getCoarseIterator
(
)
const
{
return
Iterator
(
array
length
FALSE
TRUE
)
;
}
Iterator
getFineChangesIterator
(
)
const
{
return
Iterator
(
array
length
TRUE
FALSE
)
;
}
Iterator
getFineIterator
(
)
const
{
return
Iterator
(
array
length
FALSE
FALSE
)
;
}
private
:
Edits
(
const
Edits
&
)
=
delete
;
Edits
&
operator
=
(
const
Edits
&
)
=
delete
;
void
setLastUnit
(
int32_t
last
)
{
array
[
length
-
1
]
=
(
uint16_t
)
last
;
}
int32_t
lastUnit
(
)
const
{
return
length
>
0
?
array
[
length
-
1
]
:
0xffff
;
}
void
append
(
int32_t
r
)
;
UBool
growArray
(
)
;
static
const
int32_t
STACK_CAPACITY
=
100
;
uint16_t
*
array
;
int32_t
capacity
;
int32_t
length
;
int32_t
delta
;
UErrorCode
errorCode
;
uint16_t
stackArray
[
STACK_CAPACITY
]
;
}
;
#
endif
U_NAMESPACE_END
#
endif
