#
ifndef
UBIDITRANSFORM_H
#
define
UBIDITRANSFORM_H
#
include
"
unicode
/
utypes
.
h
"
#
include
"
unicode
/
ubidi
.
h
"
#
include
"
unicode
/
uchar
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
include
"
unicode
/
localpointer
.
h
"
#
endif
typedef
enum
{
UBIDI_LOGICAL
=
0
UBIDI_VISUAL
}
UBiDiOrder
;
typedef
enum
{
UBIDI_MIRRORING_OFF
=
0
UBIDI_MIRRORING_ON
}
UBiDiMirroring
;
typedef
struct
UBiDiTransform
UBiDiTransform
;
U_CAPI
uint32_t
U_EXPORT2
ubiditransform_transform
(
UBiDiTransform
*
pBiDiTransform
const
UChar
*
src
int32_t
srcLength
UChar
*
dest
int32_t
destSize
UBiDiLevel
inParaLevel
UBiDiOrder
inOrder
UBiDiLevel
outParaLevel
UBiDiOrder
outOrder
UBiDiMirroring
doMirroring
uint32_t
shapingOptions
UErrorCode
*
pErrorCode
)
;
U_CAPI
UBiDiTransform
*
U_EXPORT2
ubiditransform_open
(
UErrorCode
*
pErrorCode
)
;
U_CAPI
void
U_EXPORT2
ubiditransform_close
(
UBiDiTransform
*
pBidiTransform
)
;
#
if
U_SHOW_CPLUSPLUS_API
U_NAMESPACE_BEGIN
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalUBiDiTransformPointer
UBiDiTransform
ubiditransform_close
)
;
U_NAMESPACE_END
#
endif
#
endif
