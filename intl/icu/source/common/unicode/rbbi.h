#
ifndef
RBBI_H
#
define
RBBI_H
#
include
"
unicode
/
utypes
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
if
!
UCONFIG_NO_BREAK_ITERATION
#
include
"
unicode
/
brkiter
.
h
"
#
include
"
unicode
/
udata
.
h
"
#
include
"
unicode
/
parseerr
.
h
"
#
include
"
unicode
/
schriter
.
h
"
struct
UCPTrie
;
U_NAMESPACE_BEGIN
class
LanguageBreakEngine
;
struct
RBBIDataHeader
;
class
RBBIDataWrapper
;
class
UnhandledEngine
;
class
UStack
;
class
U_COMMON_API
RuleBasedBreakIterator
:
public
BreakIterator
{
private
:
UText
fText
;
#
ifndef
U_HIDE_INTERNAL_API
public
:
#
endif
RBBIDataWrapper
*
fData
;
private
:
int32_t
fPosition
;
int32_t
fRuleStatusIndex
;
class
BreakCache
;
BreakCache
*
fBreakCache
;
class
DictionaryCache
;
DictionaryCache
*
fDictionaryCache
;
UStack
*
fLanguageBreakEngines
;
UnhandledEngine
*
fUnhandledBreakEngine
;
uint32_t
fDictionaryCharCount
;
CharacterIterator
*
fCharIter
;
StringCharacterIterator
fSCharIter
;
UBool
fDone
;
int32_t
*
fLookAheadMatches
;
UBool
fIsPhraseBreaking
;
RuleBasedBreakIterator
(
RBBIDataHeader
*
data
UErrorCode
&
status
)
;
RuleBasedBreakIterator
(
UDataMemory
*
image
UBool
isPhraseBreaking
UErrorCode
&
status
)
;
friend
class
RBBIRuleBuilder
;
friend
class
BreakIterator
;
public
:
RuleBasedBreakIterator
(
)
;
RuleBasedBreakIterator
(
const
RuleBasedBreakIterator
&
that
)
;
RuleBasedBreakIterator
(
const
UnicodeString
&
rules
UParseError
&
parseError
UErrorCode
&
status
)
;
RuleBasedBreakIterator
(
const
uint8_t
*
compiledRules
uint32_t
ruleLength
UErrorCode
&
status
)
;
RuleBasedBreakIterator
(
UDataMemory
*
image
UErrorCode
&
status
)
;
virtual
~
RuleBasedBreakIterator
(
)
;
RuleBasedBreakIterator
&
operator
=
(
const
RuleBasedBreakIterator
&
that
)
;
virtual
bool
operator
=
=
(
const
BreakIterator
&
that
)
const
override
;
inline
bool
operator
!
=
(
const
BreakIterator
&
that
)
const
;
virtual
RuleBasedBreakIterator
*
clone
(
)
const
override
;
virtual
int32_t
hashCode
(
void
)
const
;
virtual
const
UnicodeString
&
getRules
(
void
)
const
;
virtual
CharacterIterator
&
getText
(
void
)
const
override
;
virtual
UText
*
getUText
(
UText
*
fillIn
UErrorCode
&
status
)
const
override
;
virtual
void
adoptText
(
CharacterIterator
*
newText
)
override
;
virtual
void
setText
(
const
UnicodeString
&
newText
)
override
;
virtual
void
setText
(
UText
*
text
UErrorCode
&
status
)
override
;
virtual
int32_t
first
(
void
)
override
;
virtual
int32_t
last
(
void
)
override
;
virtual
int32_t
next
(
int32_t
n
)
override
;
virtual
int32_t
next
(
void
)
override
;
virtual
int32_t
previous
(
void
)
override
;
virtual
int32_t
following
(
int32_t
offset
)
override
;
virtual
int32_t
preceding
(
int32_t
offset
)
override
;
virtual
UBool
isBoundary
(
int32_t
offset
)
override
;
virtual
int32_t
current
(
void
)
const
override
;
virtual
int32_t
getRuleStatus
(
)
const
override
;
virtual
int32_t
getRuleStatusVec
(
int32_t
*
fillInVec
int32_t
capacity
UErrorCode
&
status
)
override
;
virtual
UClassID
getDynamicClassID
(
void
)
const
override
;
static
UClassID
U_EXPORT2
getStaticClassID
(
void
)
;
#
ifndef
U_FORCE_HIDE_DEPRECATED_API
virtual
RuleBasedBreakIterator
*
createBufferClone
(
void
*
stackBuffer
int32_t
&
BufferSize
UErrorCode
&
status
)
override
;
#
endif
virtual
const
uint8_t
*
getBinaryRules
(
uint32_t
&
length
)
;
virtual
RuleBasedBreakIterator
&
refreshInputText
(
UText
*
input
UErrorCode
&
status
)
override
;
private
:
void
init
(
UErrorCode
&
status
)
;
int32_t
handleSafePrevious
(
int32_t
fromPosition
)
;
int32_t
handleNext
(
)
;
typedef
uint16_t
(
*
PTrieFunc
)
(
const
UCPTrie
*
UChar32
)
;
template
<
typename
RowType
PTrieFunc
trieFunc
>
int32_t
handleSafePrevious
(
int32_t
fromPosition
)
;
template
<
typename
RowType
PTrieFunc
trieFunc
>
int32_t
handleNext
(
)
;
const
LanguageBreakEngine
*
getLanguageBreakEngine
(
UChar32
c
)
;
public
:
#
ifndef
U_HIDE_INTERNAL_API
void
dumpCache
(
)
;
void
dumpTables
(
)
;
#
endif
}
;
inline
bool
RuleBasedBreakIterator
:
:
operator
!
=
(
const
BreakIterator
&
that
)
const
{
return
!
operator
=
=
(
that
)
;
}
U_NAMESPACE_END
#
endif
#
endif
#
endif
