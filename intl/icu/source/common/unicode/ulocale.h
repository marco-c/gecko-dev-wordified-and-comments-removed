#
ifndef
ULOCALE_H
#
define
ULOCALE_H
#
include
"
unicode
/
localpointer
.
h
"
#
include
"
unicode
/
uenum
.
h
"
#
include
"
unicode
/
utypes
.
h
"
struct
ULocale
;
typedef
struct
ULocale
ULocale
;
U_CAPI
ULocale
*
U_EXPORT2
ulocale_openForLocaleID
(
const
char
*
localeID
int32_t
length
UErrorCode
*
err
)
;
U_CAPI
ULocale
*
U_EXPORT2
ulocale_openForLanguageTag
(
const
char
*
tag
int32_t
length
UErrorCode
*
err
)
;
U_CAPI
void
U_EXPORT2
ulocale_close
(
ULocale
*
locale
)
;
U_CAPI
const
char
*
U_EXPORT2
ulocale_getLanguage
(
const
ULocale
*
locale
)
;
U_CAPI
const
char
*
U_EXPORT2
ulocale_getScript
(
const
ULocale
*
locale
)
;
U_CAPI
const
char
*
U_EXPORT2
ulocale_getRegion
(
const
ULocale
*
locale
)
;
U_CAPI
const
char
*
U_EXPORT2
ulocale_getVariant
(
const
ULocale
*
locale
)
;
U_CAPI
const
char
*
U_EXPORT2
ulocale_getLocaleID
(
const
ULocale
*
locale
)
;
U_CAPI
const
char
*
U_EXPORT2
ulocale_getBaseName
(
const
ULocale
*
locale
)
;
U_CAPI
bool
U_EXPORT2
ulocale_isBogus
(
const
ULocale
*
locale
)
;
U_CAPI
UEnumeration
*
U_EXPORT2
ulocale_getKeywords
(
const
ULocale
*
locale
UErrorCode
*
err
)
;
U_CAPI
UEnumeration
*
U_EXPORT2
ulocale_getUnicodeKeywords
(
const
ULocale
*
locale
UErrorCode
*
err
)
;
U_CAPI
int32_t
U_EXPORT2
ulocale_getKeywordValue
(
const
ULocale
*
locale
const
char
*
keyword
int32_t
keywordLength
char
*
valueBuffer
int32_t
valueBufferCapacity
UErrorCode
*
err
)
;
U_CAPI
int32_t
U_EXPORT2
ulocale_getUnicodeKeywordValue
(
const
ULocale
*
locale
const
char
*
keyword
int32_t
keywordLength
char
*
valueBuffer
int32_t
valueBufferCapacity
UErrorCode
*
err
)
;
#
if
U_SHOW_CPLUSPLUS_API
U_NAMESPACE_BEGIN
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalULocalePointer
ULocale
ulocale_close
)
;
U_NAMESPACE_END
#
endif
#
endif
