#
ifndef
CHARITER_H
#
define
CHARITER_H
#
include
"
unicode
/
utypes
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
include
"
unicode
/
uobject
.
h
"
#
include
"
unicode
/
unistr
.
h
"
U_NAMESPACE_BEGIN
class
U_COMMON_API
ForwardCharacterIterator
:
public
UObject
{
public
:
enum
{
DONE
=
0xffff
}
;
virtual
~
ForwardCharacterIterator
(
)
;
virtual
bool
operator
=
=
(
const
ForwardCharacterIterator
&
that
)
const
=
0
;
inline
bool
operator
!
=
(
const
ForwardCharacterIterator
&
that
)
const
;
virtual
int32_t
hashCode
(
)
const
=
0
;
virtual
UClassID
getDynamicClassID
(
)
const
override
=
0
;
virtual
char16_t
nextPostInc
(
)
=
0
;
virtual
UChar32
next32PostInc
(
)
=
0
;
virtual
UBool
hasNext
(
)
=
0
;
protected
:
ForwardCharacterIterator
(
)
;
ForwardCharacterIterator
(
const
ForwardCharacterIterator
&
other
)
;
ForwardCharacterIterator
&
operator
=
(
const
ForwardCharacterIterator
&
)
{
return
*
this
;
}
}
;
class
U_COMMON_API
CharacterIterator
:
public
ForwardCharacterIterator
{
public
:
enum
EOrigin
{
kStart
kCurrent
kEnd
}
;
virtual
~
CharacterIterator
(
)
;
virtual
CharacterIterator
*
clone
(
)
const
=
0
;
virtual
char16_t
first
(
)
=
0
;
virtual
char16_t
firstPostInc
(
)
;
virtual
UChar32
first32
(
)
=
0
;
virtual
UChar32
first32PostInc
(
)
;
inline
int32_t
setToStart
(
)
;
virtual
char16_t
last
(
)
=
0
;
virtual
UChar32
last32
(
)
=
0
;
inline
int32_t
setToEnd
(
)
;
virtual
char16_t
setIndex
(
int32_t
position
)
=
0
;
virtual
UChar32
setIndex32
(
int32_t
position
)
=
0
;
virtual
char16_t
current
(
)
const
=
0
;
virtual
UChar32
current32
(
)
const
=
0
;
virtual
char16_t
next
(
)
=
0
;
virtual
UChar32
next32
(
)
=
0
;
virtual
char16_t
previous
(
)
=
0
;
virtual
UChar32
previous32
(
)
=
0
;
virtual
UBool
hasPrevious
(
)
=
0
;
inline
int32_t
startIndex
(
)
const
;
inline
int32_t
endIndex
(
)
const
;
inline
int32_t
getIndex
(
)
const
;
inline
int32_t
getLength
(
)
const
;
virtual
int32_t
move
(
int32_t
delta
EOrigin
origin
)
=
0
;
#
ifdef
move32
#
undef
move32
#
endif
virtual
int32_t
move32
(
int32_t
delta
EOrigin
origin
)
=
0
;
virtual
void
getText
(
UnicodeString
&
result
)
=
0
;
protected
:
CharacterIterator
(
)
;
CharacterIterator
(
int32_t
length
)
;
CharacterIterator
(
int32_t
length
int32_t
position
)
;
CharacterIterator
(
int32_t
length
int32_t
textBegin
int32_t
textEnd
int32_t
position
)
;
CharacterIterator
(
const
CharacterIterator
&
that
)
;
CharacterIterator
&
operator
=
(
const
CharacterIterator
&
that
)
;
int32_t
textLength
;
int32_t
pos
;
int32_t
begin
;
int32_t
end
;
}
;
inline
bool
ForwardCharacterIterator
:
:
operator
!
=
(
const
ForwardCharacterIterator
&
that
)
const
{
return
!
operator
=
=
(
that
)
;
}
inline
int32_t
CharacterIterator
:
:
setToStart
(
)
{
return
move
(
0
kStart
)
;
}
inline
int32_t
CharacterIterator
:
:
setToEnd
(
)
{
return
move
(
0
kEnd
)
;
}
inline
int32_t
CharacterIterator
:
:
startIndex
(
)
const
{
return
begin
;
}
inline
int32_t
CharacterIterator
:
:
endIndex
(
)
const
{
return
end
;
}
inline
int32_t
CharacterIterator
:
:
getIndex
(
)
const
{
return
pos
;
}
inline
int32_t
CharacterIterator
:
:
getLength
(
)
const
{
return
textLength
;
}
U_NAMESPACE_END
#
endif
#
endif
