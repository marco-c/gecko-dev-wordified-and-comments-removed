#
ifndef
__UMUTABLECPTRIE_H__
#
define
__UMUTABLECPTRIE_H__
#
include
"
unicode
/
utypes
.
h
"
#
include
"
unicode
/
ucpmap
.
h
"
#
include
"
unicode
/
ucptrie
.
h
"
#
include
"
unicode
/
utf8
.
h
"
#
if
U_SHOW_CPLUSPLUS_API
#
include
"
unicode
/
localpointer
.
h
"
#
endif
U_CDECL_BEGIN
typedef
struct
UMutableCPTrie
UMutableCPTrie
;
U_CAPI
UMutableCPTrie
*
U_EXPORT2
umutablecptrie_open
(
uint32_t
initialValue
uint32_t
errorValue
UErrorCode
*
pErrorCode
)
;
U_CAPI
UMutableCPTrie
*
U_EXPORT2
umutablecptrie_clone
(
const
UMutableCPTrie
*
other
UErrorCode
*
pErrorCode
)
;
U_CAPI
void
U_EXPORT2
umutablecptrie_close
(
UMutableCPTrie
*
trie
)
;
U_CAPI
UMutableCPTrie
*
U_EXPORT2
umutablecptrie_fromUCPMap
(
const
UCPMap
*
map
UErrorCode
*
pErrorCode
)
;
U_CAPI
UMutableCPTrie
*
U_EXPORT2
umutablecptrie_fromUCPTrie
(
const
UCPTrie
*
trie
UErrorCode
*
pErrorCode
)
;
U_CAPI
uint32_t
U_EXPORT2
umutablecptrie_get
(
const
UMutableCPTrie
*
trie
UChar32
c
)
;
U_CAPI
UChar32
U_EXPORT2
umutablecptrie_getRange
(
const
UMutableCPTrie
*
trie
UChar32
start
UCPMapRangeOption
option
uint32_t
surrogateValue
UCPMapValueFilter
*
filter
const
void
*
context
uint32_t
*
pValue
)
;
U_CAPI
void
U_EXPORT2
umutablecptrie_set
(
UMutableCPTrie
*
trie
UChar32
c
uint32_t
value
UErrorCode
*
pErrorCode
)
;
U_CAPI
void
U_EXPORT2
umutablecptrie_setRange
(
UMutableCPTrie
*
trie
UChar32
start
UChar32
end
uint32_t
value
UErrorCode
*
pErrorCode
)
;
U_CAPI
UCPTrie
*
U_EXPORT2
umutablecptrie_buildImmutable
(
UMutableCPTrie
*
trie
UCPTrieType
type
UCPTrieValueWidth
valueWidth
UErrorCode
*
pErrorCode
)
;
U_CDECL_END
#
if
U_SHOW_CPLUSPLUS_API
U_NAMESPACE_BEGIN
U_DEFINE_LOCAL_OPEN_POINTER
(
LocalUMutableCPTriePointer
UMutableCPTrie
umutablecptrie_close
)
;
U_NAMESPACE_END
#
endif
#
endif
