#
include
"
unicode
/
utypes
.
h
"
#
include
"
unicode
/
appendable
.
h
"
#
include
"
unicode
/
utf16
.
h
"
U_NAMESPACE_BEGIN
Appendable
:
:
~
Appendable
(
)
{
}
UBool
Appendable
:
:
appendCodePoint
(
UChar32
c
)
{
if
(
c
<
=
0xffff
)
{
return
appendCodeUnit
(
(
UChar
)
c
)
;
}
else
{
return
appendCodeUnit
(
U16_LEAD
(
c
)
)
&
&
appendCodeUnit
(
U16_TRAIL
(
c
)
)
;
}
}
UBool
Appendable
:
:
appendString
(
const
UChar
*
s
int32_t
length
)
{
if
(
length
<
0
)
{
UChar
c
;
while
(
(
c
=
*
s
+
+
)
!
=
0
)
{
if
(
!
appendCodeUnit
(
c
)
)
{
return
false
;
}
}
}
else
if
(
length
>
0
)
{
const
UChar
*
limit
=
s
+
length
;
do
{
if
(
!
appendCodeUnit
(
*
s
+
+
)
)
{
return
false
;
}
}
while
(
s
<
limit
)
;
}
return
true
;
}
UBool
Appendable
:
:
reserveAppendCapacity
(
int32_t
)
{
return
true
;
}
UChar
*
Appendable
:
:
getAppendBuffer
(
int32_t
minCapacity
int32_t
UChar
*
scratch
int32_t
scratchCapacity
int32_t
*
resultCapacity
)
{
if
(
minCapacity
<
1
|
|
scratchCapacity
<
minCapacity
)
{
*
resultCapacity
=
0
;
return
NULL
;
}
*
resultCapacity
=
scratchCapacity
;
return
scratch
;
}
U_NAMESPACE_END
