#
ifndef
__LOCLIKELYSUBTAGS_H__
#
define
__LOCLIKELYSUBTAGS_H__
#
include
<
utility
>
#
include
"
unicode
/
utypes
.
h
"
#
include
"
unicode
/
bytestrie
.
h
"
#
include
"
unicode
/
locid
.
h
"
#
include
"
unicode
/
stringpiece
.
h
"
#
include
"
unicode
/
uobject
.
h
"
#
include
"
unicode
/
ures
.
h
"
#
include
"
charstrmap
.
h
"
#
include
"
lsr
.
h
"
U_NAMESPACE_BEGIN
struct
LikelySubtagsData
;
struct
LocaleDistanceData
{
LocaleDistanceData
(
)
=
default
;
LocaleDistanceData
(
LocaleDistanceData
&
&
data
)
;
~
LocaleDistanceData
(
)
;
const
uint8_t
*
distanceTrieBytes
=
nullptr
;
const
uint8_t
*
regionToPartitions
=
nullptr
;
const
char
*
*
partitions
=
nullptr
;
const
LSR
*
paradigms
=
nullptr
;
int32_t
paradigmsLength
=
0
;
const
int32_t
*
distances
=
nullptr
;
private
:
LocaleDistanceData
&
operator
=
(
const
LocaleDistanceData
&
)
=
delete
;
}
;
class
LikelySubtags
final
:
public
UMemory
{
public
:
~
LikelySubtags
(
)
;
static
constexpr
int32_t
SKIP_SCRIPT
=
1
;
static
const
LikelySubtags
*
getSingleton
(
UErrorCode
&
errorCode
)
;
LSR
makeMaximizedLsrFrom
(
const
Locale
&
locale
bool
returnInputIfUnmatch
UErrorCode
&
errorCode
)
const
;
int32_t
compareLikely
(
const
LSR
&
lsr
const
LSR
&
other
int32_t
likelyInfo
)
const
;
LSR
minimizeSubtags
(
StringPiece
language
StringPiece
script
StringPiece
region
bool
favorScript
UErrorCode
&
errorCode
)
const
;
const
LocaleDistanceData
&
getDistanceData
(
)
const
{
return
distanceData
;
}
private
:
LikelySubtags
(
LikelySubtagsData
&
data
)
;
LikelySubtags
(
const
LikelySubtags
&
other
)
=
delete
;
LikelySubtags
&
operator
=
(
const
LikelySubtags
&
other
)
=
delete
;
static
void
initLikelySubtags
(
UErrorCode
&
errorCode
)
;
LSR
makeMaximizedLsr
(
const
char
*
language
const
char
*
script
const
char
*
region
const
char
*
variant
bool
returnInputIfUnmatch
UErrorCode
&
errorCode
)
const
;
LSR
maximize
(
const
char
*
language
const
char
*
script
const
char
*
region
bool
returnInputIfUnmatch
UErrorCode
&
errorCode
)
const
;
LSR
maximize
(
StringPiece
language
StringPiece
script
StringPiece
region
bool
returnInputIfUnmatch
UErrorCode
&
errorCode
)
const
;
int32_t
getLikelyIndex
(
const
char
*
language
const
char
*
script
)
const
;
bool
isMacroregion
(
StringPiece
&
region
UErrorCode
&
errorCode
)
const
;
static
int32_t
trieNext
(
BytesTrie
&
iter
const
char
*
s
int32_t
i
)
;
static
int32_t
trieNext
(
BytesTrie
&
iter
StringPiece
s
int32_t
i
)
;
UResourceBundle
*
langInfoBundle
;
CharString
*
strings
;
CharStringMap
languageAliases
;
CharStringMap
regionAliases
;
BytesTrie
trie
;
uint64_t
trieUndState
;
uint64_t
trieUndZzzzState
;
int32_t
defaultLsrIndex
;
uint64_t
trieFirstLetterStates
[
26
]
;
const
LSR
*
lsrs
;
#
if
U_DEBUG
int32_t
lsrsLength
;
#
endif
LocaleDistanceData
distanceData
;
}
;
U_NAMESPACE_END
#
endif
