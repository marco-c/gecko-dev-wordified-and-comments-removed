#
ifndef
MLBREAKENGINE_H
#
define
MLBREAKENGINE_H
#
include
"
hash
.
h
"
#
include
"
unicode
/
resbund
.
h
"
#
include
"
unicode
/
uniset
.
h
"
#
include
"
unicode
/
utext
.
h
"
#
include
"
uvectr32
.
h
"
U_NAMESPACE_BEGIN
#
if
!
UCONFIG_NO_BREAK_ITERATION
class
MlBreakEngine
:
public
UMemory
{
public
:
MlBreakEngine
(
const
UnicodeSet
&
digitOrOpenPunctuationOrAlphabetSet
const
UnicodeSet
&
closePunctuationSet
UErrorCode
&
status
)
;
virtual
~
MlBreakEngine
(
)
;
public
:
int32_t
divideUpRange
(
UText
*
inText
int32_t
rangeStart
int32_t
rangeEnd
UVector32
&
foundBreaks
const
UnicodeString
&
inString
const
LocalPointer
<
UVector32
>
&
inputMap
UErrorCode
&
status
)
const
;
private
:
void
loadMLModel
(
UErrorCode
&
error
)
;
void
initKeyValue
(
UResourceBundle
*
rb
const
char
*
keyName
const
char
*
valueName
Hashtable
&
model
UErrorCode
&
error
)
;
int32_t
initIndexList
(
const
UnicodeString
&
inString
int32_t
*
indexList
UErrorCode
&
status
)
const
;
int32_t
evaluateBreakpoint
(
const
UnicodeString
&
inString
int32_t
*
indexList
int32_t
startIdx
int32_t
numCodeUnits
int32_t
numBreaks
UVector32
&
boundary
UErrorCode
&
status
)
const
;
void
printUnicodeString
(
const
UnicodeString
&
s
)
const
;
UnicodeSet
fDigitOrOpenPunctuationOrAlphabetSet
;
UnicodeSet
fClosePunctuationSet
;
Hashtable
fModel
[
13
]
;
int32_t
fNegativeSum
;
}
;
#
endif
U_NAMESPACE_END
#
endif
