#
ifndef
__CAPI_HELPER_H__
#
define
__CAPI_HELPER_H__
#
include
"
unicode
/
utypes
.
h
"
U_NAMESPACE_BEGIN
template
<
typename
CType
typename
CPPType
int32_t
kMagic
>
class
IcuCApiHelper
{
public
:
static
const
CPPType
*
validate
(
const
CType
*
input
UErrorCode
&
status
)
;
static
CPPType
*
validate
(
CType
*
input
UErrorCode
&
status
)
;
const
CType
*
exportConstForC
(
)
const
;
CType
*
exportForC
(
)
;
~
IcuCApiHelper
(
)
;
private
:
int32_t
fMagic
=
kMagic
;
}
;
template
<
typename
CType
typename
CPPType
int32_t
kMagic
>
const
CPPType
*
IcuCApiHelper
<
CType
CPPType
kMagic
>
:
:
validate
(
const
CType
*
input
UErrorCode
&
status
)
{
if
(
U_FAILURE
(
status
)
)
{
return
nullptr
;
}
if
(
input
=
=
nullptr
)
{
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
nullptr
;
}
auto
*
impl
=
reinterpret_cast
<
const
CPPType
*
>
(
input
)
;
if
(
static_cast
<
const
IcuCApiHelper
<
CType
CPPType
kMagic
>
*
>
(
impl
)
-
>
fMagic
!
=
kMagic
)
{
status
=
U_INVALID_FORMAT_ERROR
;
return
nullptr
;
}
return
impl
;
}
template
<
typename
CType
typename
CPPType
int32_t
kMagic
>
CPPType
*
IcuCApiHelper
<
CType
CPPType
kMagic
>
:
:
validate
(
CType
*
input
UErrorCode
&
status
)
{
auto
*
constInput
=
static_cast
<
const
CType
*
>
(
input
)
;
auto
*
validated
=
validate
(
constInput
status
)
;
return
const_cast
<
CPPType
*
>
(
validated
)
;
}
template
<
typename
CType
typename
CPPType
int32_t
kMagic
>
const
CType
*
IcuCApiHelper
<
CType
CPPType
kMagic
>
:
:
exportConstForC
(
)
const
{
return
reinterpret_cast
<
const
CType
*
>
(
static_cast
<
const
CPPType
*
>
(
this
)
)
;
}
template
<
typename
CType
typename
CPPType
int32_t
kMagic
>
CType
*
IcuCApiHelper
<
CType
CPPType
kMagic
>
:
:
exportForC
(
)
{
return
reinterpret_cast
<
CType
*
>
(
static_cast
<
CPPType
*
>
(
this
)
)
;
}
template
<
typename
CType
typename
CPPType
int32_t
kMagic
>
IcuCApiHelper
<
CType
CPPType
kMagic
>
:
:
~
IcuCApiHelper
(
)
{
fMagic
=
0
;
}
U_NAMESPACE_END
#
endif
