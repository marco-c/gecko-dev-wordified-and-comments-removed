#
ifndef
RBBITBLB_H
#
define
RBBITBLB_H
#
include
"
unicode
/
utypes
.
h
"
#
if
!
UCONFIG_NO_BREAK_ITERATION
#
include
"
unicode
/
uobject
.
h
"
#
include
"
unicode
/
rbbi
.
h
"
#
include
"
rbbidata
.
h
"
#
include
"
rbbirb
.
h
"
#
include
"
rbbinode
.
h
"
U_NAMESPACE_BEGIN
class
RBBIRuleScanner
;
class
RBBIRuleBuilder
;
class
UVector32
;
class
RBBITableBuilder
:
public
UMemory
{
public
:
RBBITableBuilder
(
RBBIRuleBuilder
*
rb
RBBINode
*
*
rootNode
UErrorCode
&
status
)
;
~
RBBITableBuilder
(
)
;
void
buildForwardTable
(
)
;
int32_t
getTableSize
(
)
const
;
void
exportTable
(
void
*
where
)
;
bool
use8BitsForTable
(
)
const
;
bool
findDuplCharClassFrom
(
IntPair
*
categories
)
;
void
removeColumn
(
int32_t
column
)
;
int32_t
removeDuplicateStates
(
)
;
void
buildSafeReverseTable
(
UErrorCode
&
status
)
;
int32_t
getSafeTableSize
(
)
const
;
void
exportSafeTable
(
void
*
where
)
;
bool
use8BitsForSafeTable
(
)
const
;
private
:
void
calcNullable
(
RBBINode
*
n
)
;
void
calcFirstPos
(
RBBINode
*
n
)
;
void
calcLastPos
(
RBBINode
*
n
)
;
void
calcFollowPos
(
RBBINode
*
n
)
;
void
calcChainedFollowPos
(
RBBINode
*
n
RBBINode
*
endMarkNode
)
;
void
bofFixup
(
)
;
void
buildStateTable
(
)
;
void
mapLookAheadRules
(
)
;
void
flagAcceptingStates
(
)
;
void
flagLookAheadStates
(
)
;
void
flagTaggedStates
(
)
;
void
mergeRuleStatusVals
(
)
;
int32_t
mergeColumns
(
)
;
void
addRuleRootNodes
(
UVector
*
dest
RBBINode
*
node
)
;
bool
findDuplicateState
(
IntPair
*
states
)
;
void
removeState
(
IntPair
duplStates
)
;
bool
findDuplicateSafeState
(
IntPair
*
states
)
;
void
removeSafeState
(
IntPair
duplStates
)
;
void
setAdd
(
UVector
*
dest
UVector
*
source
)
;
UBool
setEquals
(
UVector
*
a
UVector
*
b
)
;
void
sortedAdd
(
UVector
*
*
dest
int32_t
val
)
;
public
:
#
ifdef
RBBI_DEBUG
void
printSet
(
UVector
*
s
)
;
void
printPosSets
(
RBBINode
*
n
)
;
void
printStates
(
)
;
void
printRuleStatusTable
(
)
;
void
printReverseTable
(
)
;
#
else
#
define
printSet
(
s
)
#
define
printPosSets
(
n
)
#
define
printStates
(
)
#
define
printRuleStatusTable
(
)
#
define
printReverseTable
(
)
#
endif
private
:
RBBIRuleBuilder
*
fRB
;
RBBINode
*
&
fTree
;
UErrorCode
*
fStatus
;
UVector
*
fDStates
;
UVector
*
fSafeTable
;
UVector32
*
fLookAheadRuleMap
=
nullptr
;
int32_t
fLASlotsInUse
=
ACCEPTING_UNCONDITIONAL
;
RBBITableBuilder
(
const
RBBITableBuilder
&
other
)
=
delete
;
RBBITableBuilder
&
operator
=
(
const
RBBITableBuilder
&
other
)
=
delete
;
}
;
class
RBBIStateDescriptor
:
public
UMemory
{
public
:
UBool
fMarked
;
uint32_t
fAccepting
;
uint32_t
fLookAhead
;
UVector
*
fTagVals
;
int32_t
fTagsIdx
;
UVector
*
fPositions
;
UVector32
*
fDtran
;
RBBIStateDescriptor
(
int
maxInputSymbol
UErrorCode
*
fStatus
)
;
~
RBBIStateDescriptor
(
)
;
private
:
RBBIStateDescriptor
(
const
RBBIStateDescriptor
&
other
)
;
RBBIStateDescriptor
&
operator
=
(
const
RBBIStateDescriptor
&
other
)
;
}
;
U_NAMESPACE_END
#
endif
#
endif
