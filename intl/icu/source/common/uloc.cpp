#
include
"
unicode
/
bytestream
.
h
"
#
include
"
unicode
/
errorcode
.
h
"
#
include
"
unicode
/
stringpiece
.
h
"
#
include
"
unicode
/
utypes
.
h
"
#
include
"
unicode
/
ustring
.
h
"
#
include
"
unicode
/
uloc
.
h
"
#
include
"
bytesinkutil
.
h
"
#
include
"
putilimp
.
h
"
#
include
"
ustr_imp
.
h
"
#
include
"
ulocimp
.
h
"
#
include
"
umutex
.
h
"
#
include
"
cstring
.
h
"
#
include
"
cmemory
.
h
"
#
include
"
locmap
.
h
"
#
include
"
uarrsort
.
h
"
#
include
"
uenumimp
.
h
"
#
include
"
uassert
.
h
"
#
include
"
charstr
.
h
"
U_NAMESPACE_USE
U_CFUNC
void
locale_set_default
(
const
char
*
id
)
;
U_CFUNC
const
char
*
locale_get_default
(
void
)
;
static
const
char
*
const
LANGUAGES
[
]
=
{
"
aa
"
"
ab
"
"
ace
"
"
ach
"
"
ada
"
"
ady
"
"
ae
"
"
aeb
"
"
af
"
"
afh
"
"
agq
"
"
ain
"
"
ak
"
"
akk
"
"
akz
"
"
ale
"
"
aln
"
"
alt
"
"
am
"
"
an
"
"
ang
"
"
anp
"
"
ar
"
"
arc
"
"
arn
"
"
aro
"
"
arp
"
"
arq
"
"
ars
"
"
arw
"
"
ary
"
"
arz
"
"
as
"
"
asa
"
"
ase
"
"
ast
"
"
av
"
"
avk
"
"
awa
"
"
ay
"
"
az
"
"
ba
"
"
bal
"
"
ban
"
"
bar
"
"
bas
"
"
bax
"
"
bbc
"
"
bbj
"
"
be
"
"
bej
"
"
bem
"
"
bew
"
"
bez
"
"
bfd
"
"
bfq
"
"
bg
"
"
bgc
"
"
bgn
"
"
bho
"
"
bi
"
"
bik
"
"
bin
"
"
bjn
"
"
bkm
"
"
bla
"
"
bm
"
"
bn
"
"
bo
"
"
bpy
"
"
bqi
"
"
br
"
"
bra
"
"
brh
"
"
brx
"
"
bs
"
"
bss
"
"
bua
"
"
bug
"
"
bum
"
"
byn
"
"
byv
"
"
ca
"
"
cad
"
"
car
"
"
cay
"
"
cch
"
"
ccp
"
"
ce
"
"
ceb
"
"
cgg
"
"
ch
"
"
chb
"
"
chg
"
"
chk
"
"
chm
"
"
chn
"
"
cho
"
"
chp
"
"
chr
"
"
chy
"
"
ckb
"
"
co
"
"
cop
"
"
cps
"
"
cr
"
"
crh
"
"
cs
"
"
csb
"
"
cu
"
"
cv
"
"
cy
"
"
da
"
"
dak
"
"
dar
"
"
dav
"
"
de
"
"
del
"
"
den
"
"
dgr
"
"
din
"
"
dje
"
"
doi
"
"
dsb
"
"
dtp
"
"
dua
"
"
dum
"
"
dv
"
"
dyo
"
"
dyu
"
"
dz
"
"
dzg
"
"
ebu
"
"
ee
"
"
efi
"
"
egl
"
"
egy
"
"
eka
"
"
el
"
"
elx
"
"
en
"
"
enm
"
"
eo
"
"
es
"
"
esu
"
"
et
"
"
eu
"
"
ewo
"
"
ext
"
"
fa
"
"
fan
"
"
fat
"
"
ff
"
"
fi
"
"
fil
"
"
fit
"
"
fj
"
"
fo
"
"
fon
"
"
fr
"
"
frc
"
"
frm
"
"
fro
"
"
frp
"
"
frr
"
"
frs
"
"
fur
"
"
fy
"
"
ga
"
"
gaa
"
"
gag
"
"
gan
"
"
gay
"
"
gba
"
"
gbz
"
"
gd
"
"
gez
"
"
gil
"
"
gl
"
"
glk
"
"
gmh
"
"
gn
"
"
goh
"
"
gom
"
"
gon
"
"
gor
"
"
got
"
"
grb
"
"
grc
"
"
gsw
"
"
gu
"
"
guc
"
"
gur
"
"
guz
"
"
gv
"
"
gwi
"
"
ha
"
"
hai
"
"
hak
"
"
haw
"
"
he
"
"
hi
"
"
hif
"
"
hil
"
"
hit
"
"
hmn
"
"
ho
"
"
hr
"
"
hsb
"
"
hsn
"
"
ht
"
"
hu
"
"
hup
"
"
hy
"
"
hz
"
"
ia
"
"
iba
"
"
ibb
"
"
id
"
"
ie
"
"
ig
"
"
ii
"
"
ik
"
"
ilo
"
"
inh
"
"
io
"
"
is
"
"
it
"
"
iu
"
"
izh
"
"
ja
"
"
jam
"
"
jbo
"
"
jgo
"
"
jmc
"
"
jpr
"
"
jrb
"
"
jut
"
"
jv
"
"
ka
"
"
kaa
"
"
kab
"
"
kac
"
"
kaj
"
"
kam
"
"
kaw
"
"
kbd
"
"
kbl
"
"
kcg
"
"
kde
"
"
kea
"
"
ken
"
"
kfo
"
"
kg
"
"
kgp
"
"
kha
"
"
kho
"
"
khq
"
"
khw
"
"
ki
"
"
kiu
"
"
kj
"
"
kk
"
"
kkj
"
"
kl
"
"
kln
"
"
km
"
"
kmb
"
"
kn
"
"
ko
"
"
koi
"
"
kok
"
"
kos
"
"
kpe
"
"
kr
"
"
krc
"
"
kri
"
"
krj
"
"
krl
"
"
kru
"
"
ks
"
"
ksb
"
"
ksf
"
"
ksh
"
"
ku
"
"
kum
"
"
kut
"
"
kv
"
"
kw
"
"
ky
"
"
la
"
"
lad
"
"
lag
"
"
lah
"
"
lam
"
"
lb
"
"
lez
"
"
lfn
"
"
lg
"
"
li
"
"
lij
"
"
liv
"
"
lkt
"
"
lmo
"
"
ln
"
"
lo
"
"
lol
"
"
loz
"
"
lrc
"
"
lt
"
"
ltg
"
"
lu
"
"
lua
"
"
lui
"
"
lun
"
"
luo
"
"
lus
"
"
luy
"
"
lv
"
"
lzh
"
"
lzz
"
"
mad
"
"
maf
"
"
mag
"
"
mai
"
"
mak
"
"
man
"
"
mas
"
"
mde
"
"
mdf
"
"
mdh
"
"
mdr
"
"
men
"
"
mer
"
"
mfe
"
"
mg
"
"
mga
"
"
mgh
"
"
mgo
"
"
mh
"
"
mi
"
"
mic
"
"
min
"
"
mis
"
"
mk
"
"
ml
"
"
mn
"
"
mnc
"
"
mni
"
"
moh
"
"
mos
"
"
mr
"
"
mrj
"
"
ms
"
"
mt
"
"
mua
"
"
mul
"
"
mus
"
"
mwl
"
"
mwr
"
"
mwv
"
"
my
"
"
mye
"
"
myv
"
"
mzn
"
"
na
"
"
nan
"
"
nap
"
"
naq
"
"
nb
"
"
nd
"
"
nds
"
"
ne
"
"
new
"
"
ng
"
"
nia
"
"
niu
"
"
njo
"
"
nl
"
"
nmg
"
"
nn
"
"
nnh
"
"
no
"
"
nog
"
"
non
"
"
nov
"
"
nqo
"
"
nr
"
"
nso
"
"
nus
"
"
nv
"
"
nwc
"
"
ny
"
"
nym
"
"
nyn
"
"
nyo
"
"
nzi
"
"
oc
"
"
oj
"
"
om
"
"
or
"
"
os
"
"
osa
"
"
ota
"
"
pa
"
"
pag
"
"
pal
"
"
pam
"
"
pap
"
"
pau
"
"
pcd
"
"
pcm
"
"
pdc
"
"
pdt
"
"
peo
"
"
pfl
"
"
phn
"
"
pi
"
"
pl
"
"
pms
"
"
pnt
"
"
pon
"
"
prg
"
"
pro
"
"
ps
"
"
pt
"
"
qu
"
"
quc
"
"
qug
"
"
raj
"
"
rap
"
"
rar
"
"
rgn
"
"
rif
"
"
rm
"
"
rn
"
"
ro
"
"
rof
"
"
rom
"
"
rtm
"
"
ru
"
"
rue
"
"
rug
"
"
rup
"
"
rw
"
"
rwk
"
"
sa
"
"
sad
"
"
sah
"
"
sam
"
"
saq
"
"
sas
"
"
sat
"
"
saz
"
"
sba
"
"
sbp
"
"
sc
"
"
scn
"
"
sco
"
"
sd
"
"
sdc
"
"
sdh
"
"
se
"
"
see
"
"
seh
"
"
sei
"
"
sel
"
"
ses
"
"
sg
"
"
sga
"
"
sgs
"
"
shi
"
"
shn
"
"
shu
"
"
si
"
"
sid
"
"
sk
"
"
sl
"
"
sli
"
"
sly
"
"
sm
"
"
sma
"
"
smj
"
"
smn
"
"
sms
"
"
sn
"
"
snk
"
"
so
"
"
sog
"
"
sq
"
"
sr
"
"
srn
"
"
srr
"
"
ss
"
"
ssy
"
"
st
"
"
stq
"
"
su
"
"
suk
"
"
sus
"
"
sux
"
"
sv
"
"
sw
"
"
swb
"
"
syc
"
"
syr
"
"
szl
"
"
ta
"
"
tcy
"
"
te
"
"
tem
"
"
teo
"
"
ter
"
"
tet
"
"
tg
"
"
th
"
"
ti
"
"
tig
"
"
tiv
"
"
tk
"
"
tkl
"
"
tkr
"
"
tlh
"
"
tli
"
"
tly
"
"
tmh
"
"
tn
"
"
to
"
"
tog
"
"
tpi
"
"
tr
"
"
tru
"
"
trv
"
"
ts
"
"
tsd
"
"
tsi
"
"
tt
"
"
ttt
"
"
tum
"
"
tvl
"
"
tw
"
"
twq
"
"
ty
"
"
tyv
"
"
tzm
"
"
udm
"
"
ug
"
"
uga
"
"
uk
"
"
umb
"
"
und
"
"
ur
"
"
uz
"
"
vai
"
"
ve
"
"
vec
"
"
vep
"
"
vi
"
"
vls
"
"
vmf
"
"
vo
"
"
vot
"
"
vro
"
"
vun
"
"
wa
"
"
wae
"
"
wal
"
"
war
"
"
was
"
"
wbp
"
"
wo
"
"
wuu
"
"
xal
"
"
xh
"
"
xmf
"
"
xog
"
"
yao
"
"
yap
"
"
yav
"
"
ybb
"
"
yi
"
"
yo
"
"
yrl
"
"
yue
"
"
za
"
"
zap
"
"
zbl
"
"
zea
"
"
zen
"
"
zgh
"
"
zh
"
"
zu
"
"
zun
"
"
zxx
"
"
zza
"
NULL
"
in
"
"
iw
"
"
ji
"
"
jw
"
"
mo
"
"
sh
"
"
swc
"
"
tl
"
NULL
}
;
static
const
char
*
const
DEPRECATED_LANGUAGES
[
]
=
{
"
in
"
"
iw
"
"
ji
"
"
jw
"
"
mo
"
NULL
NULL
}
;
static
const
char
*
const
REPLACEMENT_LANGUAGES
[
]
=
{
"
id
"
"
he
"
"
yi
"
"
jv
"
"
ro
"
NULL
NULL
}
;
static
const
char
*
const
LANGUAGES_3
[
]
=
{
"
aar
"
"
abk
"
"
ace
"
"
ach
"
"
ada
"
"
ady
"
"
ave
"
"
aeb
"
"
afr
"
"
afh
"
"
agq
"
"
ain
"
"
aka
"
"
akk
"
"
akz
"
"
ale
"
"
aln
"
"
alt
"
"
amh
"
"
arg
"
"
ang
"
"
anp
"
"
ara
"
"
arc
"
"
arn
"
"
aro
"
"
arp
"
"
arq
"
"
ars
"
"
arw
"
"
ary
"
"
arz
"
"
asm
"
"
asa
"
"
ase
"
"
ast
"
"
ava
"
"
avk
"
"
awa
"
"
aym
"
"
aze
"
"
bak
"
"
bal
"
"
ban
"
"
bar
"
"
bas
"
"
bax
"
"
bbc
"
"
bbj
"
"
bel
"
"
bej
"
"
bem
"
"
bew
"
"
bez
"
"
bfd
"
"
bfq
"
"
bul
"
"
bgc
"
"
bgn
"
"
bho
"
"
bis
"
"
bik
"
"
bin
"
"
bjn
"
"
bkm
"
"
bla
"
"
bam
"
"
ben
"
"
bod
"
"
bpy
"
"
bqi
"
"
bre
"
"
bra
"
"
brh
"
"
brx
"
"
bos
"
"
bss
"
"
bua
"
"
bug
"
"
bum
"
"
byn
"
"
byv
"
"
cat
"
"
cad
"
"
car
"
"
cay
"
"
cch
"
"
ccp
"
"
che
"
"
ceb
"
"
cgg
"
"
cha
"
"
chb
"
"
chg
"
"
chk
"
"
chm
"
"
chn
"
"
cho
"
"
chp
"
"
chr
"
"
chy
"
"
ckb
"
"
cos
"
"
cop
"
"
cps
"
"
cre
"
"
crh
"
"
ces
"
"
csb
"
"
chu
"
"
chv
"
"
cym
"
"
dan
"
"
dak
"
"
dar
"
"
dav
"
"
deu
"
"
del
"
"
den
"
"
dgr
"
"
din
"
"
dje
"
"
doi
"
"
dsb
"
"
dtp
"
"
dua
"
"
dum
"
"
div
"
"
dyo
"
"
dyu
"
"
dzo
"
"
dzg
"
"
ebu
"
"
ewe
"
"
efi
"
"
egl
"
"
egy
"
"
eka
"
"
ell
"
"
elx
"
"
eng
"
"
enm
"
"
epo
"
"
spa
"
"
esu
"
"
est
"
"
eus
"
"
ewo
"
"
ext
"
"
fas
"
"
fan
"
"
fat
"
"
ful
"
"
fin
"
"
fil
"
"
fit
"
"
fij
"
"
fao
"
"
fon
"
"
fra
"
"
frc
"
"
frm
"
"
fro
"
"
frp
"
"
frr
"
"
frs
"
"
fur
"
"
fry
"
"
gle
"
"
gaa
"
"
gag
"
"
gan
"
"
gay
"
"
gba
"
"
gbz
"
"
gla
"
"
gez
"
"
gil
"
"
glg
"
"
glk
"
"
gmh
"
"
grn
"
"
goh
"
"
gom
"
"
gon
"
"
gor
"
"
got
"
"
grb
"
"
grc
"
"
gsw
"
"
guj
"
"
guc
"
"
gur
"
"
guz
"
"
glv
"
"
gwi
"
"
hau
"
"
hai
"
"
hak
"
"
haw
"
"
heb
"
"
hin
"
"
hif
"
"
hil
"
"
hit
"
"
hmn
"
"
hmo
"
"
hrv
"
"
hsb
"
"
hsn
"
"
hat
"
"
hun
"
"
hup
"
"
hye
"
"
her
"
"
ina
"
"
iba
"
"
ibb
"
"
ind
"
"
ile
"
"
ibo
"
"
iii
"
"
ipk
"
"
ilo
"
"
inh
"
"
ido
"
"
isl
"
"
ita
"
"
iku
"
"
izh
"
"
jpn
"
"
jam
"
"
jbo
"
"
jgo
"
"
jmc
"
"
jpr
"
"
jrb
"
"
jut
"
"
jav
"
"
kat
"
"
kaa
"
"
kab
"
"
kac
"
"
kaj
"
"
kam
"
"
kaw
"
"
kbd
"
"
kbl
"
"
kcg
"
"
kde
"
"
kea
"
"
ken
"
"
kfo
"
"
kon
"
"
kgp
"
"
kha
"
"
kho
"
"
khq
"
"
khw
"
"
kik
"
"
kiu
"
"
kua
"
"
kaz
"
"
kkj
"
"
kal
"
"
kln
"
"
khm
"
"
kmb
"
"
kan
"
"
kor
"
"
koi
"
"
kok
"
"
kos
"
"
kpe
"
"
kau
"
"
krc
"
"
kri
"
"
krj
"
"
krl
"
"
kru
"
"
kas
"
"
ksb
"
"
ksf
"
"
ksh
"
"
kur
"
"
kum
"
"
kut
"
"
kom
"
"
cor
"
"
kir
"
"
lat
"
"
lad
"
"
lag
"
"
lah
"
"
lam
"
"
ltz
"
"
lez
"
"
lfn
"
"
lug
"
"
lim
"
"
lij
"
"
liv
"
"
lkt
"
"
lmo
"
"
lin
"
"
lao
"
"
lol
"
"
loz
"
"
lrc
"
"
lit
"
"
ltg
"
"
lub
"
"
lua
"
"
lui
"
"
lun
"
"
luo
"
"
lus
"
"
luy
"
"
lav
"
"
lzh
"
"
lzz
"
"
mad
"
"
maf
"
"
mag
"
"
mai
"
"
mak
"
"
man
"
"
mas
"
"
mde
"
"
mdf
"
"
mdh
"
"
mdr
"
"
men
"
"
mer
"
"
mfe
"
"
mlg
"
"
mga
"
"
mgh
"
"
mgo
"
"
mah
"
"
mri
"
"
mic
"
"
min
"
"
mis
"
"
mkd
"
"
mal
"
"
mon
"
"
mnc
"
"
mni
"
"
moh
"
"
mos
"
"
mar
"
"
mrj
"
"
msa
"
"
mlt
"
"
mua
"
"
mul
"
"
mus
"
"
mwl
"
"
mwr
"
"
mwv
"
"
mya
"
"
mye
"
"
myv
"
"
mzn
"
"
nau
"
"
nan
"
"
nap
"
"
naq
"
"
nob
"
"
nde
"
"
nds
"
"
nep
"
"
new
"
"
ndo
"
"
nia
"
"
niu
"
"
njo
"
"
nld
"
"
nmg
"
"
nno
"
"
nnh
"
"
nor
"
"
nog
"
"
non
"
"
nov
"
"
nqo
"
"
nbl
"
"
nso
"
"
nus
"
"
nav
"
"
nwc
"
"
nya
"
"
nym
"
"
nyn
"
"
nyo
"
"
nzi
"
"
oci
"
"
oji
"
"
orm
"
"
ori
"
"
oss
"
"
osa
"
"
ota
"
"
pan
"
"
pag
"
"
pal
"
"
pam
"
"
pap
"
"
pau
"
"
pcd
"
"
pcm
"
"
pdc
"
"
pdt
"
"
peo
"
"
pfl
"
"
phn
"
"
pli
"
"
pol
"
"
pms
"
"
pnt
"
"
pon
"
"
prg
"
"
pro
"
"
pus
"
"
por
"
"
que
"
"
quc
"
"
qug
"
"
raj
"
"
rap
"
"
rar
"
"
rgn
"
"
rif
"
"
roh
"
"
run
"
"
ron
"
"
rof
"
"
rom
"
"
rtm
"
"
rus
"
"
rue
"
"
rug
"
"
rup
"
"
kin
"
"
rwk
"
"
san
"
"
sad
"
"
sah
"
"
sam
"
"
saq
"
"
sas
"
"
sat
"
"
saz
"
"
sba
"
"
sbp
"
"
srd
"
"
scn
"
"
sco
"
"
snd
"
"
sdc
"
"
sdh
"
"
sme
"
"
see
"
"
seh
"
"
sei
"
"
sel
"
"
ses
"
"
sag
"
"
sga
"
"
sgs
"
"
shi
"
"
shn
"
"
shu
"
"
sin
"
"
sid
"
"
slk
"
"
slv
"
"
sli
"
"
sly
"
"
smo
"
"
sma
"
"
smj
"
"
smn
"
"
sms
"
"
sna
"
"
snk
"
"
som
"
"
sog
"
"
sqi
"
"
srp
"
"
srn
"
"
srr
"
"
ssw
"
"
ssy
"
"
sot
"
"
stq
"
"
sun
"
"
suk
"
"
sus
"
"
sux
"
"
swe
"
"
swa
"
"
swb
"
"
syc
"
"
syr
"
"
szl
"
"
tam
"
"
tcy
"
"
tel
"
"
tem
"
"
teo
"
"
ter
"
"
tet
"
"
tgk
"
"
tha
"
"
tir
"
"
tig
"
"
tiv
"
"
tuk
"
"
tkl
"
"
tkr
"
"
tlh
"
"
tli
"
"
tly
"
"
tmh
"
"
tsn
"
"
ton
"
"
tog
"
"
tpi
"
"
tur
"
"
tru
"
"
trv
"
"
tso
"
"
tsd
"
"
tsi
"
"
tat
"
"
ttt
"
"
tum
"
"
tvl
"
"
twi
"
"
twq
"
"
tah
"
"
tyv
"
"
tzm
"
"
udm
"
"
uig
"
"
uga
"
"
ukr
"
"
umb
"
"
und
"
"
urd
"
"
uzb
"
"
vai
"
"
ven
"
"
vec
"
"
vep
"
"
vie
"
"
vls
"
"
vmf
"
"
vol
"
"
vot
"
"
vro
"
"
vun
"
"
wln
"
"
wae
"
"
wal
"
"
war
"
"
was
"
"
wbp
"
"
wol
"
"
wuu
"
"
xal
"
"
xho
"
"
xmf
"
"
xog
"
"
yao
"
"
yap
"
"
yav
"
"
ybb
"
"
yid
"
"
yor
"
"
yrl
"
"
yue
"
"
zha
"
"
zap
"
"
zbl
"
"
zea
"
"
zen
"
"
zgh
"
"
zho
"
"
zul
"
"
zun
"
"
zxx
"
"
zza
"
NULL
"
ind
"
"
heb
"
"
yid
"
"
jaw
"
"
mol
"
"
srp
"
"
swc
"
"
tgl
"
NULL
}
;
static
const
char
*
const
COUNTRIES
[
]
=
{
"
AD
"
"
AE
"
"
AF
"
"
AG
"
"
AI
"
"
AL
"
"
AM
"
"
AO
"
"
AQ
"
"
AR
"
"
AS
"
"
AT
"
"
AU
"
"
AW
"
"
AX
"
"
AZ
"
"
BA
"
"
BB
"
"
BD
"
"
BE
"
"
BF
"
"
BG
"
"
BH
"
"
BI
"
"
BJ
"
"
BL
"
"
BM
"
"
BN
"
"
BO
"
"
BQ
"
"
BR
"
"
BS
"
"
BT
"
"
BV
"
"
BW
"
"
BY
"
"
BZ
"
"
CA
"
"
CC
"
"
CD
"
"
CF
"
"
CG
"
"
CH
"
"
CI
"
"
CK
"
"
CL
"
"
CM
"
"
CN
"
"
CO
"
"
CR
"
"
CU
"
"
CV
"
"
CW
"
"
CX
"
"
CY
"
"
CZ
"
"
DE
"
"
DG
"
"
DJ
"
"
DK
"
"
DM
"
"
DO
"
"
DZ
"
"
EA
"
"
EC
"
"
EE
"
"
EG
"
"
EH
"
"
ER
"
"
ES
"
"
ET
"
"
FI
"
"
FJ
"
"
FK
"
"
FM
"
"
FO
"
"
FR
"
"
GA
"
"
GB
"
"
GD
"
"
GE
"
"
GF
"
"
GG
"
"
GH
"
"
GI
"
"
GL
"
"
GM
"
"
GN
"
"
GP
"
"
GQ
"
"
GR
"
"
GS
"
"
GT
"
"
GU
"
"
GW
"
"
GY
"
"
HK
"
"
HM
"
"
HN
"
"
HR
"
"
HT
"
"
HU
"
"
IC
"
"
ID
"
"
IE
"
"
IL
"
"
IM
"
"
IN
"
"
IO
"
"
IQ
"
"
IR
"
"
IS
"
"
IT
"
"
JE
"
"
JM
"
"
JO
"
"
JP
"
"
KE
"
"
KG
"
"
KH
"
"
KI
"
"
KM
"
"
KN
"
"
KP
"
"
KR
"
"
KW
"
"
KY
"
"
KZ
"
"
LA
"
"
LB
"
"
LC
"
"
LI
"
"
LK
"
"
LR
"
"
LS
"
"
LT
"
"
LU
"
"
LV
"
"
LY
"
"
MA
"
"
MC
"
"
MD
"
"
ME
"
"
MF
"
"
MG
"
"
MH
"
"
MK
"
"
ML
"
"
MM
"
"
MN
"
"
MO
"
"
MP
"
"
MQ
"
"
MR
"
"
MS
"
"
MT
"
"
MU
"
"
MV
"
"
MW
"
"
MX
"
"
MY
"
"
MZ
"
"
NA
"
"
NC
"
"
NE
"
"
NF
"
"
NG
"
"
NI
"
"
NL
"
"
NO
"
"
NP
"
"
NR
"
"
NU
"
"
NZ
"
"
OM
"
"
PA
"
"
PE
"
"
PF
"
"
PG
"
"
PH
"
"
PK
"
"
PL
"
"
PM
"
"
PN
"
"
PR
"
"
PS
"
"
PT
"
"
PW
"
"
PY
"
"
QA
"
"
RE
"
"
RO
"
"
RS
"
"
RU
"
"
RW
"
"
SA
"
"
SB
"
"
SC
"
"
SD
"
"
SE
"
"
SG
"
"
SH
"
"
SI
"
"
SJ
"
"
SK
"
"
SL
"
"
SM
"
"
SN
"
"
SO
"
"
SR
"
"
SS
"
"
ST
"
"
SV
"
"
SX
"
"
SY
"
"
SZ
"
"
TC
"
"
TD
"
"
TF
"
"
TG
"
"
TH
"
"
TJ
"
"
TK
"
"
TL
"
"
TM
"
"
TN
"
"
TO
"
"
TR
"
"
TT
"
"
TV
"
"
TW
"
"
TZ
"
"
UA
"
"
UG
"
"
UM
"
"
US
"
"
UY
"
"
UZ
"
"
VA
"
"
VC
"
"
VE
"
"
VG
"
"
VI
"
"
VN
"
"
VU
"
"
WF
"
"
WS
"
"
XK
"
"
YE
"
"
YT
"
"
ZA
"
"
ZM
"
"
ZW
"
NULL
"
AN
"
"
BU
"
"
CS
"
"
FX
"
"
RO
"
"
SU
"
"
TP
"
"
YD
"
"
YU
"
"
ZR
"
NULL
}
;
static
const
char
*
const
DEPRECATED_COUNTRIES
[
]
=
{
"
AN
"
"
BU
"
"
CS
"
"
DD
"
"
DY
"
"
FX
"
"
HV
"
"
NH
"
"
RH
"
"
SU
"
"
TP
"
"
UK
"
"
VD
"
"
YD
"
"
YU
"
"
ZR
"
NULL
NULL
}
;
static
const
char
*
const
REPLACEMENT_COUNTRIES
[
]
=
{
"
CW
"
"
MM
"
"
RS
"
"
DE
"
"
BJ
"
"
FR
"
"
BF
"
"
VU
"
"
ZW
"
"
RU
"
"
TL
"
"
GB
"
"
VN
"
"
YE
"
"
RS
"
"
CD
"
NULL
NULL
}
;
static
const
char
*
const
COUNTRIES_3
[
]
=
{
"
AND
"
"
ARE
"
"
AFG
"
"
ATG
"
"
AIA
"
"
ALB
"
"
ARM
"
"
AGO
"
"
ATA
"
"
ARG
"
"
ASM
"
"
AUT
"
"
AUS
"
"
ABW
"
"
ALA
"
"
AZE
"
"
BIH
"
"
BRB
"
"
BGD
"
"
BEL
"
"
BFA
"
"
BGR
"
"
BHR
"
"
BDI
"
"
BEN
"
"
BLM
"
"
BMU
"
"
BRN
"
"
BOL
"
"
BES
"
"
BRA
"
"
BHS
"
"
BTN
"
"
BVT
"
"
BWA
"
"
BLR
"
"
BLZ
"
"
CAN
"
"
CCK
"
"
COD
"
"
CAF
"
"
COG
"
"
CHE
"
"
CIV
"
"
COK
"
"
CHL
"
"
CMR
"
"
CHN
"
"
COL
"
"
CRI
"
"
CUB
"
"
CPV
"
"
CUW
"
"
CXR
"
"
CYP
"
"
CZE
"
"
DEU
"
"
DGA
"
"
DJI
"
"
DNK
"
"
DMA
"
"
DOM
"
"
DZA
"
"
XEA
"
"
ECU
"
"
EST
"
"
EGY
"
"
ESH
"
"
ERI
"
"
ESP
"
"
ETH
"
"
FIN
"
"
FJI
"
"
FLK
"
"
FSM
"
"
FRO
"
"
FRA
"
"
GAB
"
"
GBR
"
"
GRD
"
"
GEO
"
"
GUF
"
"
GGY
"
"
GHA
"
"
GIB
"
"
GRL
"
"
GMB
"
"
GIN
"
"
GLP
"
"
GNQ
"
"
GRC
"
"
SGS
"
"
GTM
"
"
GUM
"
"
GNB
"
"
GUY
"
"
HKG
"
"
HMD
"
"
HND
"
"
HRV
"
"
HTI
"
"
HUN
"
"
XIC
"
"
IDN
"
"
IRL
"
"
ISR
"
"
IMN
"
"
IND
"
"
IOT
"
"
IRQ
"
"
IRN
"
"
ISL
"
"
ITA
"
"
JEY
"
"
JAM
"
"
JOR
"
"
JPN
"
"
KEN
"
"
KGZ
"
"
KHM
"
"
KIR
"
"
COM
"
"
KNA
"
"
PRK
"
"
KOR
"
"
KWT
"
"
CYM
"
"
KAZ
"
"
LAO
"
"
LBN
"
"
LCA
"
"
LIE
"
"
LKA
"
"
LBR
"
"
LSO
"
"
LTU
"
"
LUX
"
"
LVA
"
"
LBY
"
"
MAR
"
"
MCO
"
"
MDA
"
"
MNE
"
"
MAF
"
"
MDG
"
"
MHL
"
"
MKD
"
"
MLI
"
"
MMR
"
"
MNG
"
"
MAC
"
"
MNP
"
"
MTQ
"
"
MRT
"
"
MSR
"
"
MLT
"
"
MUS
"
"
MDV
"
"
MWI
"
"
MEX
"
"
MYS
"
"
MOZ
"
"
NAM
"
"
NCL
"
"
NER
"
"
NFK
"
"
NGA
"
"
NIC
"
"
NLD
"
"
NOR
"
"
NPL
"
"
NRU
"
"
NIU
"
"
NZL
"
"
OMN
"
"
PAN
"
"
PER
"
"
PYF
"
"
PNG
"
"
PHL
"
"
PAK
"
"
POL
"
"
SPM
"
"
PCN
"
"
PRI
"
"
PSE
"
"
PRT
"
"
PLW
"
"
PRY
"
"
QAT
"
"
REU
"
"
ROU
"
"
SRB
"
"
RUS
"
"
RWA
"
"
SAU
"
"
SLB
"
"
SYC
"
"
SDN
"
"
SWE
"
"
SGP
"
"
SHN
"
"
SVN
"
"
SJM
"
"
SVK
"
"
SLE
"
"
SMR
"
"
SEN
"
"
SOM
"
"
SUR
"
"
SSD
"
"
STP
"
"
SLV
"
"
SXM
"
"
SYR
"
"
SWZ
"
"
TCA
"
"
TCD
"
"
ATF
"
"
TGO
"
"
THA
"
"
TJK
"
"
TKL
"
"
TLS
"
"
TKM
"
"
TUN
"
"
TON
"
"
TUR
"
"
TTO
"
"
TUV
"
"
TWN
"
"
TZA
"
"
UKR
"
"
UGA
"
"
UMI
"
"
USA
"
"
URY
"
"
UZB
"
"
VAT
"
"
VCT
"
"
VEN
"
"
VGB
"
"
VIR
"
"
VNM
"
"
VUT
"
"
WLF
"
"
WSM
"
"
XKK
"
"
YEM
"
"
MYT
"
"
ZAF
"
"
ZMB
"
"
ZWE
"
NULL
"
ANT
"
"
BUR
"
"
SCG
"
"
FXX
"
"
ROM
"
"
SUN
"
"
TMP
"
"
YMD
"
"
YUG
"
"
ZAR
"
NULL
}
;
typedef
struct
CanonicalizationMap
{
const
char
*
id
;
const
char
*
canonicalID
;
}
CanonicalizationMap
;
static
const
CanonicalizationMap
CANONICALIZE_MAP
[
]
=
{
{
"
art__LOJBAN
"
"
jbo
"
}
{
"
hy__AREVELA
"
"
hy
"
}
{
"
hy__AREVMDA
"
"
hyw
"
}
{
"
zh__GUOYU
"
"
zh
"
}
{
"
zh__HAKKA
"
"
hak
"
}
{
"
zh__XIANG
"
"
hsn
"
}
{
"
zh_GAN
"
"
gan
"
}
{
"
zh_MIN_NAN
"
"
nan
"
}
{
"
zh_WUU
"
"
wuu
"
}
{
"
zh_YUE
"
"
yue
"
}
}
;
#
define
_hasBCP47Extension
(
id
)
(
id
&
&
uprv_strstr
(
id
"
"
)
=
=
NULL
&
&
getShortestSubtagLength
(
localeID
)
=
=
1
)
static
const
char
*
_ConvertBCP47
(
const
char
*
id
char
*
buffer
int32_t
length
UErrorCode
*
err
int32_t
*
pLocaleIdSize
)
{
const
char
*
finalID
;
int32_t
localeIDSize
=
uloc_forLanguageTag
(
id
buffer
length
NULL
err
)
;
if
(
localeIDSize
<
=
0
|
|
U_FAILURE
(
*
err
)
|
|
*
err
=
=
U_STRING_NOT_TERMINATED_WARNING
)
{
finalID
=
id
;
if
(
*
err
=
=
U_STRING_NOT_TERMINATED_WARNING
)
{
*
err
=
U_BUFFER_OVERFLOW_ERROR
;
}
}
else
{
finalID
=
buffer
;
}
if
(
pLocaleIdSize
!
=
nullptr
)
{
*
pLocaleIdSize
=
localeIDSize
;
}
return
finalID
;
}
static
int32_t
getShortestSubtagLength
(
const
char
*
localeID
)
{
int32_t
localeIDLength
=
static_cast
<
int32_t
>
(
uprv_strlen
(
localeID
)
)
;
int32_t
length
=
localeIDLength
;
int32_t
tmpLength
=
0
;
int32_t
i
;
UBool
reset
=
true
;
for
(
i
=
0
;
i
<
localeIDLength
;
i
+
+
)
{
if
(
localeID
[
i
]
!
=
'
_
'
&
&
localeID
[
i
]
!
=
'
-
'
)
{
if
(
reset
)
{
tmpLength
=
0
;
reset
=
false
;
}
tmpLength
+
+
;
}
else
{
if
(
tmpLength
!
=
0
&
&
tmpLength
<
length
)
{
length
=
tmpLength
;
}
reset
=
true
;
}
}
return
length
;
}
#
define
UPRV_ISDIGIT
(
c
)
(
(
(
c
)
>
=
'
0
'
)
&
&
(
(
c
)
<
=
'
9
'
)
)
#
define
UPRV_ISALPHANUM
(
c
)
(
uprv_isASCIILetter
(
c
)
|
|
UPRV_ISDIGIT
(
c
)
)
#
define
UPRV_OK_VALUE_PUNCTUATION
(
c
)
(
(
c
)
=
=
'
_
'
|
|
(
c
)
=
=
'
-
'
|
|
(
c
)
=
=
'
+
'
|
|
(
c
)
=
=
'
/
'
)
#
define
ULOC_KEYWORD_BUFFER_LEN
25
#
define
ULOC_MAX_NO_KEYWORDS
25
U_CAPI
const
char
*
U_EXPORT2
locale_getKeywordsStart
(
const
char
*
localeID
)
{
const
char
*
result
=
NULL
;
if
(
(
result
=
uprv_strchr
(
localeID
'
'
)
)
!
=
NULL
)
{
return
result
;
}
#
if
(
U_CHARSET_FAMILY
=
=
U_EBCDIC_FAMILY
)
else
{
static
const
uint8_t
ebcdicSigns
[
]
=
{
0x7C
0x44
0x66
0x80
0xAC
0xAE
0xAF
0xB5
0xEC
0xEF
0x00
}
;
const
uint8_t
*
charToFind
=
ebcdicSigns
;
while
(
*
charToFind
)
{
if
(
(
result
=
uprv_strchr
(
localeID
*
charToFind
)
)
!
=
NULL
)
{
return
result
;
}
charToFind
+
+
;
}
}
#
endif
return
NULL
;
}
static
int32_t
locale_canonKeywordName
(
char
*
buf
const
char
*
keywordName
UErrorCode
*
status
)
{
int32_t
keywordNameLen
=
0
;
for
(
;
*
keywordName
!
=
0
;
keywordName
+
+
)
{
if
(
!
UPRV_ISALPHANUM
(
*
keywordName
)
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
0
;
}
if
(
keywordNameLen
<
ULOC_KEYWORD_BUFFER_LEN
-
1
)
{
buf
[
keywordNameLen
+
+
]
=
uprv_tolower
(
*
keywordName
)
;
}
else
{
*
status
=
U_INTERNAL_PROGRAM_ERROR
;
return
0
;
}
}
if
(
keywordNameLen
=
=
0
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
0
;
}
buf
[
keywordNameLen
]
=
0
;
return
keywordNameLen
;
}
typedef
struct
{
char
keyword
[
ULOC_KEYWORD_BUFFER_LEN
]
;
int32_t
keywordLen
;
const
char
*
valueStart
;
int32_t
valueLen
;
}
KeywordStruct
;
static
int32_t
U_CALLCONV
compareKeywordStructs
(
const
void
*
const
void
*
left
const
void
*
right
)
{
const
char
*
leftString
=
(
(
const
KeywordStruct
*
)
left
)
-
>
keyword
;
const
char
*
rightString
=
(
(
const
KeywordStruct
*
)
right
)
-
>
keyword
;
return
uprv_strcmp
(
leftString
rightString
)
;
}
U_CFUNC
void
ulocimp_getKeywords
(
const
char
*
localeID
char
prev
ByteSink
&
sink
UBool
valuesToo
UErrorCode
*
status
)
{
KeywordStruct
keywordList
[
ULOC_MAX_NO_KEYWORDS
]
;
int32_t
maxKeywords
=
ULOC_MAX_NO_KEYWORDS
;
int32_t
numKeywords
=
0
;
const
char
*
pos
=
localeID
;
const
char
*
equalSign
=
NULL
;
const
char
*
semicolon
=
NULL
;
int32_t
i
=
0
j
n
;
if
(
prev
=
=
'
'
)
{
do
{
UBool
duplicate
=
false
;
while
(
*
pos
=
=
'
'
)
{
pos
+
+
;
}
if
(
!
*
pos
)
{
break
;
}
if
(
numKeywords
=
=
maxKeywords
)
{
*
status
=
U_INTERNAL_PROGRAM_ERROR
;
return
;
}
equalSign
=
uprv_strchr
(
pos
'
=
'
)
;
semicolon
=
uprv_strchr
(
pos
'
;
'
)
;
if
(
!
equalSign
|
|
(
semicolon
&
&
semicolon
<
equalSign
)
)
{
*
status
=
U_INVALID_FORMAT_ERROR
;
return
;
}
if
(
equalSign
-
pos
>
=
ULOC_KEYWORD_BUFFER_LEN
)
{
*
status
=
U_INTERNAL_PROGRAM_ERROR
;
return
;
}
for
(
i
=
0
n
=
0
;
i
<
equalSign
-
pos
;
+
+
i
)
{
if
(
pos
[
i
]
!
=
'
'
)
{
keywordList
[
numKeywords
]
.
keyword
[
n
+
+
]
=
uprv_tolower
(
pos
[
i
]
)
;
}
}
if
(
n
=
=
0
)
{
*
status
=
U_INVALID_FORMAT_ERROR
;
return
;
}
keywordList
[
numKeywords
]
.
keyword
[
n
]
=
0
;
keywordList
[
numKeywords
]
.
keywordLen
=
n
;
equalSign
+
+
;
while
(
*
equalSign
=
=
'
'
)
{
equalSign
+
+
;
}
if
(
!
*
equalSign
|
|
equalSign
=
=
semicolon
)
{
*
status
=
U_INVALID_FORMAT_ERROR
;
return
;
}
keywordList
[
numKeywords
]
.
valueStart
=
equalSign
;
pos
=
semicolon
;
i
=
0
;
if
(
pos
)
{
while
(
*
(
pos
-
i
-
1
)
=
=
'
'
)
{
i
+
+
;
}
keywordList
[
numKeywords
]
.
valueLen
=
(
int32_t
)
(
pos
-
equalSign
-
i
)
;
pos
+
+
;
}
else
{
i
=
(
int32_t
)
uprv_strlen
(
equalSign
)
;
while
(
i
&
&
equalSign
[
i
-
1
]
=
=
'
'
)
{
i
-
-
;
}
keywordList
[
numKeywords
]
.
valueLen
=
i
;
}
for
(
j
=
0
;
j
<
numKeywords
;
+
+
j
)
{
if
(
uprv_strcmp
(
keywordList
[
j
]
.
keyword
keywordList
[
numKeywords
]
.
keyword
)
=
=
0
)
{
duplicate
=
true
;
break
;
}
}
if
(
!
duplicate
)
{
+
+
numKeywords
;
}
}
while
(
pos
)
;
uprv_sortArray
(
keywordList
numKeywords
sizeof
(
KeywordStruct
)
compareKeywordStructs
NULL
false
status
)
;
for
(
i
=
0
;
i
<
numKeywords
;
i
+
+
)
{
sink
.
Append
(
keywordList
[
i
]
.
keyword
keywordList
[
i
]
.
keywordLen
)
;
if
(
valuesToo
)
{
sink
.
Append
(
"
=
"
1
)
;
sink
.
Append
(
keywordList
[
i
]
.
valueStart
keywordList
[
i
]
.
valueLen
)
;
if
(
i
<
numKeywords
-
1
)
{
sink
.
Append
(
"
;
"
1
)
;
}
}
else
{
sink
.
Append
(
"
\
0
"
1
)
;
}
}
}
}
U_CAPI
int32_t
U_EXPORT2
uloc_getKeywordValue
(
const
char
*
localeID
const
char
*
keywordName
char
*
buffer
int32_t
bufferCapacity
UErrorCode
*
status
)
{
if
(
U_FAILURE
(
*
status
)
)
{
return
0
;
}
CheckedArrayByteSink
sink
(
buffer
bufferCapacity
)
;
ulocimp_getKeywordValue
(
localeID
keywordName
sink
status
)
;
int32_t
reslen
=
sink
.
NumberOfBytesAppended
(
)
;
if
(
U_FAILURE
(
*
status
)
)
{
return
reslen
;
}
if
(
sink
.
Overflowed
(
)
)
{
*
status
=
U_BUFFER_OVERFLOW_ERROR
;
}
else
{
u_terminateChars
(
buffer
bufferCapacity
reslen
status
)
;
}
return
reslen
;
}
U_CAPI
void
U_EXPORT2
ulocimp_getKeywordValue
(
const
char
*
localeID
const
char
*
keywordName
icu
:
:
ByteSink
&
sink
UErrorCode
*
status
)
{
const
char
*
startSearchHere
=
NULL
;
const
char
*
nextSeparator
=
NULL
;
char
keywordNameBuffer
[
ULOC_KEYWORD_BUFFER_LEN
]
;
char
localeKeywordNameBuffer
[
ULOC_KEYWORD_BUFFER_LEN
]
;
if
(
status
&
&
U_SUCCESS
(
*
status
)
&
&
localeID
)
{
char
tempBuffer
[
ULOC_FULLNAME_CAPACITY
]
;
const
char
*
tmpLocaleID
;
if
(
keywordName
=
=
NULL
|
|
keywordName
[
0
]
=
=
0
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
;
}
locale_canonKeywordName
(
keywordNameBuffer
keywordName
status
)
;
if
(
U_FAILURE
(
*
status
)
)
{
return
;
}
if
(
_hasBCP47Extension
(
localeID
)
)
{
tmpLocaleID
=
_ConvertBCP47
(
localeID
tempBuffer
sizeof
(
tempBuffer
)
status
nullptr
)
;
}
else
{
tmpLocaleID
=
localeID
;
}
startSearchHere
=
locale_getKeywordsStart
(
tmpLocaleID
)
;
if
(
startSearchHere
=
=
NULL
)
{
return
;
}
while
(
startSearchHere
)
{
const
char
*
keyValueTail
;
int32_t
keyValueLen
;
startSearchHere
+
+
;
nextSeparator
=
uprv_strchr
(
startSearchHere
'
=
'
)
;
if
(
!
nextSeparator
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
;
}
while
(
*
startSearchHere
=
=
'
'
)
{
startSearchHere
+
+
;
}
keyValueTail
=
nextSeparator
;
while
(
keyValueTail
>
startSearchHere
&
&
*
(
keyValueTail
-
1
)
=
=
'
'
)
{
keyValueTail
-
-
;
}
if
(
startSearchHere
=
=
keyValueTail
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
;
}
keyValueLen
=
0
;
while
(
startSearchHere
<
keyValueTail
)
{
if
(
!
UPRV_ISALPHANUM
(
*
startSearchHere
)
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
;
}
if
(
keyValueLen
<
ULOC_KEYWORD_BUFFER_LEN
-
1
)
{
localeKeywordNameBuffer
[
keyValueLen
+
+
]
=
uprv_tolower
(
*
startSearchHere
+
+
)
;
}
else
{
*
status
=
U_INTERNAL_PROGRAM_ERROR
;
return
;
}
}
localeKeywordNameBuffer
[
keyValueLen
]
=
0
;
startSearchHere
=
uprv_strchr
(
nextSeparator
'
;
'
)
;
if
(
uprv_strcmp
(
keywordNameBuffer
localeKeywordNameBuffer
)
=
=
0
)
{
nextSeparator
+
+
;
while
(
*
nextSeparator
=
=
'
'
)
{
nextSeparator
+
+
;
}
keyValueTail
=
(
startSearchHere
)
?
startSearchHere
:
nextSeparator
+
uprv_strlen
(
nextSeparator
)
;
while
(
keyValueTail
>
nextSeparator
&
&
*
(
keyValueTail
-
1
)
=
=
'
'
)
{
keyValueTail
-
-
;
}
if
(
nextSeparator
=
=
keyValueTail
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
;
}
while
(
nextSeparator
<
keyValueTail
)
{
if
(
!
UPRV_ISALPHANUM
(
*
nextSeparator
)
&
&
!
UPRV_OK_VALUE_PUNCTUATION
(
*
nextSeparator
)
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
;
}
sink
.
Append
(
nextSeparator
+
+
1
)
;
}
return
;
}
}
}
}
U_CAPI
int32_t
U_EXPORT2
uloc_setKeywordValue
(
const
char
*
keywordName
const
char
*
keywordValue
char
*
buffer
int32_t
bufferCapacity
UErrorCode
*
status
)
{
int32_t
keywordNameLen
;
int32_t
keywordValueLen
;
int32_t
bufLen
;
int32_t
needLen
=
0
;
char
keywordNameBuffer
[
ULOC_KEYWORD_BUFFER_LEN
]
;
char
keywordValueBuffer
[
ULOC_KEYWORDS_CAPACITY
+
1
]
;
char
localeKeywordNameBuffer
[
ULOC_KEYWORD_BUFFER_LEN
]
;
int32_t
rc
;
char
*
nextSeparator
=
NULL
;
char
*
nextEqualsign
=
NULL
;
char
*
startSearchHere
=
NULL
;
char
*
keywordStart
=
NULL
;
CharString
updatedKeysAndValues
;
UBool
handledInputKeyAndValue
=
false
;
char
keyValuePrefix
=
'
'
;
if
(
U_FAILURE
(
*
status
)
)
{
return
-
1
;
}
if
(
*
status
=
=
U_STRING_NOT_TERMINATED_WARNING
)
{
*
status
=
U_ZERO_ERROR
;
}
if
(
keywordName
=
=
NULL
|
|
keywordName
[
0
]
=
=
0
|
|
bufferCapacity
<
=
1
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
0
;
}
bufLen
=
(
int32_t
)
uprv_strlen
(
buffer
)
;
if
(
bufferCapacity
<
bufLen
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
0
;
}
keywordNameLen
=
locale_canonKeywordName
(
keywordNameBuffer
keywordName
status
)
;
if
(
U_FAILURE
(
*
status
)
)
{
return
0
;
}
keywordValueLen
=
0
;
if
(
keywordValue
)
{
while
(
*
keywordValue
!
=
0
)
{
if
(
!
UPRV_ISALPHANUM
(
*
keywordValue
)
&
&
!
UPRV_OK_VALUE_PUNCTUATION
(
*
keywordValue
)
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
0
;
}
if
(
keywordValueLen
<
ULOC_KEYWORDS_CAPACITY
)
{
keywordValueBuffer
[
keywordValueLen
+
+
]
=
*
keywordValue
+
+
;
}
else
{
*
status
=
U_INTERNAL_PROGRAM_ERROR
;
return
0
;
}
}
}
keywordValueBuffer
[
keywordValueLen
]
=
0
;
startSearchHere
=
(
char
*
)
locale_getKeywordsStart
(
buffer
)
;
if
(
startSearchHere
=
=
NULL
|
|
(
startSearchHere
[
1
]
=
=
0
)
)
{
if
(
keywordValueLen
=
=
0
)
{
U_ASSERT
(
*
status
!
=
U_STRING_NOT_TERMINATED_WARNING
)
;
return
bufLen
;
}
needLen
=
bufLen
+
1
+
keywordNameLen
+
1
+
keywordValueLen
;
if
(
startSearchHere
)
{
needLen
-
-
;
}
else
{
startSearchHere
=
buffer
+
bufLen
;
}
if
(
needLen
>
=
bufferCapacity
)
{
*
status
=
U_BUFFER_OVERFLOW_ERROR
;
return
needLen
;
}
*
startSearchHere
+
+
=
'
'
;
uprv_strcpy
(
startSearchHere
keywordNameBuffer
)
;
startSearchHere
+
=
keywordNameLen
;
*
startSearchHere
+
+
=
'
=
'
;
uprv_strcpy
(
startSearchHere
keywordValueBuffer
)
;
U_ASSERT
(
*
status
!
=
U_STRING_NOT_TERMINATED_WARNING
)
;
return
needLen
;
}
keywordStart
=
startSearchHere
;
while
(
keywordStart
)
{
const
char
*
keyValueTail
;
int32_t
keyValueLen
;
keywordStart
+
+
;
nextEqualsign
=
uprv_strchr
(
keywordStart
'
=
'
)
;
if
(
!
nextEqualsign
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
0
;
}
while
(
*
keywordStart
=
=
'
'
)
{
keywordStart
+
+
;
}
keyValueTail
=
nextEqualsign
;
while
(
keyValueTail
>
keywordStart
&
&
*
(
keyValueTail
-
1
)
=
=
'
'
)
{
keyValueTail
-
-
;
}
if
(
keywordStart
=
=
keyValueTail
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
0
;
}
keyValueLen
=
0
;
while
(
keywordStart
<
keyValueTail
)
{
if
(
!
UPRV_ISALPHANUM
(
*
keywordStart
)
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
0
;
}
if
(
keyValueLen
<
ULOC_KEYWORD_BUFFER_LEN
-
1
)
{
localeKeywordNameBuffer
[
keyValueLen
+
+
]
=
uprv_tolower
(
*
keywordStart
+
+
)
;
}
else
{
*
status
=
U_INTERNAL_PROGRAM_ERROR
;
return
0
;
}
}
localeKeywordNameBuffer
[
keyValueLen
]
=
0
;
nextSeparator
=
uprv_strchr
(
nextEqualsign
'
;
'
)
;
nextEqualsign
+
+
;
while
(
*
nextEqualsign
=
=
'
'
)
{
nextEqualsign
+
+
;
}
keyValueTail
=
(
nextSeparator
)
?
nextSeparator
:
nextEqualsign
+
uprv_strlen
(
nextEqualsign
)
;
while
(
keyValueTail
>
nextEqualsign
&
&
*
(
keyValueTail
-
1
)
=
=
'
'
)
{
keyValueTail
-
-
;
}
if
(
nextEqualsign
=
=
keyValueTail
)
{
*
status
=
U_ILLEGAL_ARGUMENT_ERROR
;
return
0
;
}
rc
=
uprv_strcmp
(
keywordNameBuffer
localeKeywordNameBuffer
)
;
if
(
rc
=
=
0
)
{
if
(
keywordValueLen
>
0
)
{
updatedKeysAndValues
.
append
(
keyValuePrefix
*
status
)
;
keyValuePrefix
=
'
;
'
;
updatedKeysAndValues
.
append
(
keywordNameBuffer
keywordNameLen
*
status
)
;
updatedKeysAndValues
.
append
(
'
=
'
*
status
)
;
updatedKeysAndValues
.
append
(
keywordValueBuffer
keywordValueLen
*
status
)
;
}
handledInputKeyAndValue
=
true
;
}
else
{
if
(
rc
<
0
&
&
keywordValueLen
>
0
&
&
!
handledInputKeyAndValue
)
{
updatedKeysAndValues
.
append
(
keyValuePrefix
*
status
)
;
keyValuePrefix
=
'
;
'
;
updatedKeysAndValues
.
append
(
keywordNameBuffer
keywordNameLen
*
status
)
;
updatedKeysAndValues
.
append
(
'
=
'
*
status
)
;
updatedKeysAndValues
.
append
(
keywordValueBuffer
keywordValueLen
*
status
)
;
handledInputKeyAndValue
=
true
;
}
updatedKeysAndValues
.
append
(
keyValuePrefix
*
status
)
;
keyValuePrefix
=
'
;
'
;
updatedKeysAndValues
.
append
(
localeKeywordNameBuffer
keyValueLen
*
status
)
;
updatedKeysAndValues
.
append
(
'
=
'
*
status
)
;
updatedKeysAndValues
.
append
(
nextEqualsign
static_cast
<
int32_t
>
(
keyValueTail
-
nextEqualsign
)
*
status
)
;
}
if
(
!
nextSeparator
&
&
keywordValueLen
>
0
&
&
!
handledInputKeyAndValue
)
{
updatedKeysAndValues
.
append
(
keyValuePrefix
*
status
)
;
updatedKeysAndValues
.
append
(
keywordNameBuffer
keywordNameLen
*
status
)
;
updatedKeysAndValues
.
append
(
'
=
'
*
status
)
;
updatedKeysAndValues
.
append
(
keywordValueBuffer
keywordValueLen
*
status
)
;
handledInputKeyAndValue
=
true
;
}
keywordStart
=
nextSeparator
;
}
if
(
!
handledInputKeyAndValue
|
|
U_FAILURE
(
*
status
)
)
{
U_ASSERT
(
*
status
!
=
U_STRING_NOT_TERMINATED_WARNING
)
;
return
bufLen
;
}
needLen
=
(
int32_t
)
(
startSearchHere
-
buffer
)
;
int32_t
appendLength
=
updatedKeysAndValues
.
length
(
)
;
if
(
appendLength
>
=
bufferCapacity
-
needLen
)
{
*
status
=
U_BUFFER_OVERFLOW_ERROR
;
return
needLen
+
appendLength
;
}
needLen
+
=
updatedKeysAndValues
.
extract
(
startSearchHere
bufferCapacity
-
needLen
*
status
)
;
U_ASSERT
(
*
status
!
=
U_STRING_NOT_TERMINATED_WARNING
)
;
return
needLen
;
}
#
define
_isPrefixLetter
(
a
)
(
(
a
=
=
'
x
'
)
|
|
(
a
=
=
'
X
'
)
|
|
(
a
=
=
'
i
'
)
|
|
(
a
=
=
'
I
'
)
)
#
define
_isIDPrefix
(
s
)
(
_isPrefixLetter
(
s
[
0
]
)
&
&
_isIDSeparator
(
s
[
1
]
)
)
#
define
_isTerminator
(
a
)
(
(
a
=
=
0
)
|
|
(
a
=
=
'
.
'
)
|
|
(
a
=
=
'
'
)
)
static
int16_t
_findIndex
(
const
char
*
const
*
list
const
char
*
key
)
{
const
char
*
const
*
anchor
=
list
;
int32_t
pass
=
0
;
while
(
pass
+
+
<
2
)
{
while
(
*
list
)
{
if
(
uprv_strcmp
(
key
*
list
)
=
=
0
)
{
return
(
int16_t
)
(
list
-
anchor
)
;
}
list
+
+
;
}
+
+
list
;
}
return
-
1
;
}
U_CFUNC
const
char
*
uloc_getCurrentCountryID
(
const
char
*
oldID
)
{
int32_t
offset
=
_findIndex
(
DEPRECATED_COUNTRIES
oldID
)
;
if
(
offset
>
=
0
)
{
return
REPLACEMENT_COUNTRIES
[
offset
]
;
}
return
oldID
;
}
U_CFUNC
const
char
*
uloc_getCurrentLanguageID
(
const
char
*
oldID
)
{
int32_t
offset
=
_findIndex
(
DEPRECATED_LANGUAGES
oldID
)
;
if
(
offset
>
=
0
)
{
return
REPLACEMENT_LANGUAGES
[
offset
]
;
}
return
oldID
;
}
CharString
U_EXPORT2
ulocimp_getLanguage
(
const
char
*
localeID
const
char
*
*
pEnd
UErrorCode
&
status
)
{
CharString
result
;
if
(
uprv_stricmp
(
localeID
"
root
"
)
=
=
0
)
{
localeID
+
=
4
;
}
else
if
(
uprv_strnicmp
(
localeID
"
und
"
3
)
=
=
0
&
&
(
localeID
[
3
]
=
=
'
\
0
'
|
|
localeID
[
3
]
=
=
'
-
'
|
|
localeID
[
3
]
=
=
'
_
'
|
|
localeID
[
3
]
=
=
'
'
)
)
{
localeID
+
=
3
;
}
if
(
_isIDPrefix
(
localeID
)
)
{
result
.
append
(
(
char
)
uprv_tolower
(
*
localeID
)
status
)
;
result
.
append
(
'
-
'
status
)
;
localeID
+
=
2
;
}
while
(
!
_isTerminator
(
*
localeID
)
&
&
!
_isIDSeparator
(
*
localeID
)
)
{
result
.
append
(
(
char
)
uprv_tolower
(
*
localeID
)
status
)
;
localeID
+
+
;
}
if
(
result
.
length
(
)
=
=
3
)
{
int32_t
offset
=
_findIndex
(
LANGUAGES_3
result
.
data
(
)
)
;
if
(
offset
>
=
0
)
{
result
.
clear
(
)
;
result
.
append
(
LANGUAGES
[
offset
]
status
)
;
}
}
if
(
pEnd
!
=
NULL
)
{
*
pEnd
=
localeID
;
}
return
result
;
}
CharString
U_EXPORT2
ulocimp_getScript
(
const
char
*
localeID
const
char
*
*
pEnd
UErrorCode
&
status
)
{
CharString
result
;
int32_t
idLen
=
0
;
if
(
pEnd
!
=
NULL
)
{
*
pEnd
=
localeID
;
}
while
(
!
_isTerminator
(
localeID
[
idLen
]
)
&
&
!
_isIDSeparator
(
localeID
[
idLen
]
)
&
&
uprv_isASCIILetter
(
localeID
[
idLen
]
)
)
{
idLen
+
+
;
}
if
(
idLen
=
=
4
)
{
int32_t
i
;
if
(
pEnd
!
=
NULL
)
{
*
pEnd
=
localeID
+
idLen
;
}
if
(
idLen
>
=
1
)
{
result
.
append
(
(
char
)
uprv_toupper
(
*
(
localeID
+
+
)
)
status
)
;
}
for
(
i
=
1
;
i
<
idLen
;
i
+
+
)
{
result
.
append
(
(
char
)
uprv_tolower
(
*
(
localeID
+
+
)
)
status
)
;
}
}
return
result
;
}
CharString
U_EXPORT2
ulocimp_getCountry
(
const
char
*
localeID
const
char
*
*
pEnd
UErrorCode
&
status
)
{
CharString
result
;
int32_t
idLen
=
0
;
while
(
!
_isTerminator
(
localeID
[
idLen
]
)
&
&
!
_isIDSeparator
(
localeID
[
idLen
]
)
)
{
result
.
append
(
(
char
)
uprv_toupper
(
localeID
[
idLen
]
)
status
)
;
idLen
+
+
;
}
if
(
idLen
=
=
2
|
|
idLen
=
=
3
)
{
if
(
idLen
=
=
3
)
{
int32_t
offset
=
_findIndex
(
COUNTRIES_3
result
.
data
(
)
)
;
if
(
offset
>
=
0
)
{
result
.
clear
(
)
;
result
.
append
(
COUNTRIES
[
offset
]
status
)
;
}
}
localeID
+
=
idLen
;
}
else
{
result
.
clear
(
)
;
}
if
(
pEnd
!
=
NULL
)
{
*
pEnd
=
localeID
;
}
return
result
;
}
static
void
_getVariant
(
const
char
*
localeID
char
prev
ByteSink
&
sink
UBool
needSeparator
)
{
UBool
hasVariant
=
false
;
if
(
_isIDSeparator
(
prev
)
)
{
while
(
!
_isTerminator
(
*
localeID
)
)
{
if
(
needSeparator
)
{
sink
.
Append
(
"
_
"
1
)
;
needSeparator
=
false
;
}
char
c
=
(
char
)
uprv_toupper
(
*
localeID
)
;
if
(
c
=
=
'
-
'
)
c
=
'
_
'
;
sink
.
Append
(
&
c
1
)
;
hasVariant
=
true
;
localeID
+
+
;
}
}
if
(
!
hasVariant
)
{
if
(
prev
=
=
'
'
)
{
}
else
if
(
(
localeID
=
locale_getKeywordsStart
(
localeID
)
)
!
=
NULL
)
{
+
+
localeID
;
}
else
{
return
;
}
while
(
!
_isTerminator
(
*
localeID
)
)
{
if
(
needSeparator
)
{
sink
.
Append
(
"
_
"
1
)
;
needSeparator
=
false
;
}
char
c
=
(
char
)
uprv_toupper
(
*
localeID
)
;
if
(
c
=
=
'
-
'
|
|
c
=
=
'
'
)
c
=
'
_
'
;
sink
.
Append
(
&
c
1
)
;
localeID
+
+
;
}
}
}
typedef
struct
UKeywordsContext
{
char
*
keywords
;
char
*
current
;
}
UKeywordsContext
;
U_CDECL_BEGIN
static
void
U_CALLCONV
uloc_kw_closeKeywords
(
UEnumeration
*
enumerator
)
{
uprv_free
(
(
(
UKeywordsContext
*
)
enumerator
-
>
context
)
-
>
keywords
)
;
uprv_free
(
enumerator
-
>
context
)
;
uprv_free
(
enumerator
)
;
}
static
int32_t
U_CALLCONV
uloc_kw_countKeywords
(
UEnumeration
*
en
UErrorCode
*
)
{
char
*
kw
=
(
(
UKeywordsContext
*
)
en
-
>
context
)
-
>
keywords
;
int32_t
result
=
0
;
while
(
*
kw
)
{
result
+
+
;
kw
+
=
uprv_strlen
(
kw
)
+
1
;
}
return
result
;
}
static
const
char
*
U_CALLCONV
uloc_kw_nextKeyword
(
UEnumeration
*
en
int32_t
*
resultLength
UErrorCode
*
)
{
const
char
*
result
=
(
(
UKeywordsContext
*
)
en
-
>
context
)
-
>
current
;
int32_t
len
=
0
;
if
(
*
result
)
{
len
=
(
int32_t
)
uprv_strlen
(
(
(
UKeywordsContext
*
)
en
-
>
context
)
-
>
current
)
;
(
(
UKeywordsContext
*
)
en
-
>
context
)
-
>
current
+
=
len
+
1
;
}
else
{
result
=
NULL
;
}
if
(
resultLength
)
{
*
resultLength
=
len
;
}
return
result
;
}
static
void
U_CALLCONV
uloc_kw_resetKeywords
(
UEnumeration
*
en
UErrorCode
*
)
{
(
(
UKeywordsContext
*
)
en
-
>
context
)
-
>
current
=
(
(
UKeywordsContext
*
)
en
-
>
context
)
-
>
keywords
;
}
U_CDECL_END
static
const
UEnumeration
gKeywordsEnum
=
{
NULL
NULL
uloc_kw_closeKeywords
uloc_kw_countKeywords
uenum_unextDefault
uloc_kw_nextKeyword
uloc_kw_resetKeywords
}
;
U_CAPI
UEnumeration
*
U_EXPORT2
uloc_openKeywordList
(
const
char
*
keywordList
int32_t
keywordListSize
UErrorCode
*
status
)
{
LocalMemory
<
UKeywordsContext
>
myContext
;
LocalMemory
<
UEnumeration
>
result
;
if
(
U_FAILURE
(
*
status
)
)
{
return
nullptr
;
}
myContext
.
adoptInstead
(
static_cast
<
UKeywordsContext
*
>
(
uprv_malloc
(
sizeof
(
UKeywordsContext
)
)
)
)
;
result
.
adoptInstead
(
static_cast
<
UEnumeration
*
>
(
uprv_malloc
(
sizeof
(
UEnumeration
)
)
)
)
;
if
(
myContext
.
isNull
(
)
|
|
result
.
isNull
(
)
)
{
*
status
=
U_MEMORY_ALLOCATION_ERROR
;
return
nullptr
;
}
uprv_memcpy
(
result
.
getAlias
(
)
&
gKeywordsEnum
sizeof
(
UEnumeration
)
)
;
myContext
-
>
keywords
=
static_cast
<
char
*
>
(
uprv_malloc
(
keywordListSize
+
1
)
)
;
if
(
myContext
-
>
keywords
=
=
nullptr
)
{
*
status
=
U_MEMORY_ALLOCATION_ERROR
;
return
nullptr
;
}
uprv_memcpy
(
myContext
-
>
keywords
keywordList
keywordListSize
)
;
myContext
-
>
keywords
[
keywordListSize
]
=
0
;
myContext
-
>
current
=
myContext
-
>
keywords
;
result
-
>
context
=
myContext
.
orphan
(
)
;
return
result
.
orphan
(
)
;
}
U_CAPI
UEnumeration
*
U_EXPORT2
uloc_openKeywords
(
const
char
*
localeID
UErrorCode
*
status
)
{
char
tempBuffer
[
ULOC_FULLNAME_CAPACITY
]
;
const
char
*
tmpLocaleID
;
if
(
status
=
=
NULL
|
|
U_FAILURE
(
*
status
)
)
{
return
0
;
}
if
(
_hasBCP47Extension
(
localeID
)
)
{
tmpLocaleID
=
_ConvertBCP47
(
localeID
tempBuffer
sizeof
(
tempBuffer
)
status
nullptr
)
;
}
else
{
if
(
localeID
=
=
NULL
)
{
localeID
=
uloc_getDefault
(
)
;
}
tmpLocaleID
=
localeID
;
}
ulocimp_getLanguage
(
tmpLocaleID
&
tmpLocaleID
*
status
)
;
if
(
U_FAILURE
(
*
status
)
)
{
return
0
;
}
if
(
_isIDSeparator
(
*
tmpLocaleID
)
)
{
const
char
*
scriptID
;
ulocimp_getScript
(
tmpLocaleID
+
1
&
scriptID
*
status
)
;
if
(
U_FAILURE
(
*
status
)
)
{
return
0
;
}
if
(
scriptID
!
=
tmpLocaleID
+
1
)
{
tmpLocaleID
=
scriptID
;
}
if
(
_isIDSeparator
(
*
tmpLocaleID
)
)
{
ulocimp_getCountry
(
tmpLocaleID
+
1
&
tmpLocaleID
*
status
)
;
if
(
U_FAILURE
(
*
status
)
)
{
return
0
;
}
}
}
if
(
(
tmpLocaleID
=
locale_getKeywordsStart
(
tmpLocaleID
)
)
!
=
NULL
)
{
CharString
keywords
;
CharStringByteSink
sink
(
&
keywords
)
;
ulocimp_getKeywords
(
tmpLocaleID
+
1
'
'
sink
false
status
)
;
if
(
U_FAILURE
(
*
status
)
)
{
return
NULL
;
}
return
uloc_openKeywordList
(
keywords
.
data
(
)
keywords
.
length
(
)
status
)
;
}
return
NULL
;
}
#
define
_ULOC_STRIP_KEYWORDS
0x2
#
define
_ULOC_CANONICALIZE
0x1
#
define
OPTION_SET
(
options
mask
)
(
(
options
&
mask
)
!
=
0
)
static
const
char
i_default
[
]
=
{
'
i
'
'
-
'
'
d
'
'
e
'
'
f
'
'
a
'
'
u
'
'
l
'
'
t
'
}
;
#
define
I_DEFAULT_LENGTH
UPRV_LENGTHOF
(
i_default
)
static
void
_canonicalize
(
const
char
*
localeID
ByteSink
&
sink
uint32_t
options
UErrorCode
*
err
)
{
if
(
U_FAILURE
(
*
err
)
)
{
return
;
}
int32_t
j
fieldCount
=
0
scriptSize
=
0
variantSize
=
0
;
PreflightingLocaleIDBuffer
tempBuffer
;
CharString
localeIDWithHyphens
;
const
char
*
origLocaleID
;
const
char
*
tmpLocaleID
;
const
char
*
keywordAssign
=
NULL
;
const
char
*
separatorIndicator
=
NULL
;
if
(
_hasBCP47Extension
(
localeID
)
)
{
const
char
*
localeIDPtr
=
localeID
;
if
(
uprv_strchr
(
localeID
'
_
'
)
!
=
nullptr
&
&
localeID
[
1
]
!
=
'
-
'
&
&
localeID
[
1
]
!
=
'
_
'
)
{
localeIDWithHyphens
.
append
(
localeID
-
1
*
err
)
;
if
(
U_SUCCESS
(
*
err
)
)
{
for
(
char
*
p
=
localeIDWithHyphens
.
data
(
)
;
*
p
!
=
'
\
0
'
;
+
+
p
)
{
if
(
*
p
=
=
'
_
'
)
{
*
p
=
'
-
'
;
}
}
localeIDPtr
=
localeIDWithHyphens
.
data
(
)
;
}
}
do
{
tmpLocaleID
=
_ConvertBCP47
(
localeIDPtr
tempBuffer
.
getBuffer
(
)
tempBuffer
.
getCapacity
(
)
err
&
(
tempBuffer
.
requestedCapacity
)
)
;
}
while
(
tempBuffer
.
needToTryAgain
(
err
)
)
;
}
else
{
if
(
localeID
=
=
NULL
)
{
localeID
=
uloc_getDefault
(
)
;
}
tmpLocaleID
=
localeID
;
}
origLocaleID
=
tmpLocaleID
;
CharString
tag
=
ulocimp_getLanguage
(
tmpLocaleID
&
tmpLocaleID
*
err
)
;
if
(
tag
.
length
(
)
=
=
I_DEFAULT_LENGTH
&
&
uprv_strncmp
(
origLocaleID
i_default
I_DEFAULT_LENGTH
)
=
=
0
)
{
tag
.
clear
(
)
;
tag
.
append
(
uloc_getDefault
(
)
*
err
)
;
}
else
if
(
_isIDSeparator
(
*
tmpLocaleID
)
)
{
const
char
*
scriptID
;
+
+
fieldCount
;
tag
.
append
(
'
_
'
*
err
)
;
CharString
script
=
ulocimp_getScript
(
tmpLocaleID
+
1
&
scriptID
*
err
)
;
tag
.
append
(
script
*
err
)
;
scriptSize
=
script
.
length
(
)
;
if
(
scriptSize
>
0
)
{
tmpLocaleID
=
scriptID
;
+
+
fieldCount
;
if
(
_isIDSeparator
(
*
tmpLocaleID
)
)
{
tag
.
append
(
'
_
'
*
err
)
;
}
}
if
(
_isIDSeparator
(
*
tmpLocaleID
)
)
{
const
char
*
cntryID
;
CharString
country
=
ulocimp_getCountry
(
tmpLocaleID
+
1
&
cntryID
*
err
)
;
tag
.
append
(
country
*
err
)
;
if
(
!
country
.
isEmpty
(
)
)
{
tmpLocaleID
=
cntryID
;
}
if
(
_isIDSeparator
(
*
tmpLocaleID
)
)
{
if
(
!
_isIDSeparator
(
*
(
tmpLocaleID
+
1
)
)
)
{
+
+
fieldCount
;
tag
.
append
(
'
_
'
*
err
)
;
}
variantSize
=
-
tag
.
length
(
)
;
{
CharStringByteSink
s
(
&
tag
)
;
_getVariant
(
tmpLocaleID
+
1
*
tmpLocaleID
s
false
)
;
}
variantSize
+
=
tag
.
length
(
)
;
if
(
variantSize
>
0
)
{
tmpLocaleID
+
=
variantSize
+
1
;
}
}
}
}
if
(
!
OPTION_SET
(
options
_ULOC_CANONICALIZE
)
&
&
*
tmpLocaleID
=
=
'
.
'
)
{
UBool
done
=
false
;
do
{
char
c
=
*
tmpLocaleID
;
switch
(
c
)
{
case
0
:
case
'
'
:
done
=
true
;
break
;
default
:
tag
.
append
(
c
*
err
)
;
+
+
tmpLocaleID
;
break
;
}
}
while
(
!
done
)
;
}
if
(
(
tmpLocaleID
=
locale_getKeywordsStart
(
tmpLocaleID
)
)
!
=
NULL
)
{
keywordAssign
=
uprv_strchr
(
tmpLocaleID
'
=
'
)
;
separatorIndicator
=
uprv_strchr
(
tmpLocaleID
'
;
'
)
;
}
if
(
!
OPTION_SET
(
options
_ULOC_CANONICALIZE
)
&
&
tmpLocaleID
!
=
NULL
&
&
keywordAssign
=
=
NULL
)
{
for
(
;
;
)
{
char
c
=
*
tmpLocaleID
;
if
(
c
=
=
0
)
{
break
;
}
tag
.
append
(
c
*
err
)
;
+
+
tmpLocaleID
;
}
}
if
(
OPTION_SET
(
options
_ULOC_CANONICALIZE
)
)
{
if
(
tmpLocaleID
!
=
NULL
&
&
keywordAssign
=
=
NULL
)
{
if
(
fieldCount
<
2
|
|
(
fieldCount
<
3
&
&
scriptSize
>
0
)
)
{
do
{
tag
.
append
(
'
_
'
*
err
)
;
+
+
fieldCount
;
}
while
(
fieldCount
<
2
)
;
}
int32_t
posixVariantSize
=
-
tag
.
length
(
)
;
{
CharStringByteSink
s
(
&
tag
)
;
_getVariant
(
tmpLocaleID
+
1
'
'
s
(
UBool
)
(
variantSize
>
0
)
)
;
}
posixVariantSize
+
=
tag
.
length
(
)
;
if
(
posixVariantSize
>
0
)
{
variantSize
+
=
posixVariantSize
;
}
}
for
(
j
=
0
;
j
<
UPRV_LENGTHOF
(
CANONICALIZE_MAP
)
;
j
+
+
)
{
StringPiece
id
(
CANONICALIZE_MAP
[
j
]
.
id
)
;
if
(
tag
=
=
id
)
{
if
(
id
.
empty
(
)
&
&
tmpLocaleID
!
=
NULL
)
{
break
;
}
tag
.
clear
(
)
;
tag
.
append
(
CANONICALIZE_MAP
[
j
]
.
canonicalID
*
err
)
;
break
;
}
}
}
sink
.
Append
(
tag
.
data
(
)
tag
.
length
(
)
)
;
if
(
!
OPTION_SET
(
options
_ULOC_STRIP_KEYWORDS
)
)
{
if
(
tmpLocaleID
!
=
NULL
&
&
keywordAssign
!
=
NULL
&
&
(
!
separatorIndicator
|
|
separatorIndicator
>
keywordAssign
)
)
{
sink
.
Append
(
"
"
1
)
;
+
+
fieldCount
;
ulocimp_getKeywords
(
tmpLocaleID
+
1
'
'
sink
true
err
)
;
}
}
}
U_CAPI
int32_t
U_EXPORT2
uloc_getParent
(
const
char
*
localeID
char
*
parent
int32_t
parentCapacity
UErrorCode
*
err
)
{
const
char
*
lastUnderscore
;
int32_t
i
;
if
(
U_FAILURE
(
*
err
)
)
return
0
;
if
(
localeID
=
=
NULL
)
localeID
=
uloc_getDefault
(
)
;
lastUnderscore
=
uprv_strrchr
(
localeID
'
_
'
)
;
if
(
lastUnderscore
!
=
NULL
)
{
i
=
(
int32_t
)
(
lastUnderscore
-
localeID
)
;
}
else
{
i
=
0
;
}
if
(
i
>
0
)
{
if
(
uprv_strnicmp
(
localeID
"
und_
"
4
)
=
=
0
)
{
localeID
+
=
3
;
i
-
=
3
;
uprv_memmove
(
parent
localeID
uprv_min
(
i
parentCapacity
)
)
;
}
else
if
(
parent
!
=
localeID
)
{
uprv_memcpy
(
parent
localeID
uprv_min
(
i
parentCapacity
)
)
;
}
}
return
u_terminateChars
(
parent
parentCapacity
i
err
)
;
}
U_CAPI
int32_t
U_EXPORT2
uloc_getLanguage
(
const
char
*
localeID
char
*
language
int32_t
languageCapacity
UErrorCode
*
err
)
{
if
(
err
=
=
NULL
|
|
U_FAILURE
(
*
err
)
)
{
return
0
;
}
if
(
localeID
=
=
NULL
)
{
localeID
=
uloc_getDefault
(
)
;
}
return
ulocimp_getLanguage
(
localeID
NULL
*
err
)
.
extract
(
language
languageCapacity
*
err
)
;
}
U_CAPI
int32_t
U_EXPORT2
uloc_getScript
(
const
char
*
localeID
char
*
script
int32_t
scriptCapacity
UErrorCode
*
err
)
{
if
(
err
=
=
NULL
|
|
U_FAILURE
(
*
err
)
)
{
return
0
;
}
if
(
localeID
=
=
NULL
)
{
localeID
=
uloc_getDefault
(
)
;
}
ulocimp_getLanguage
(
localeID
&
localeID
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
return
0
;
}
if
(
_isIDSeparator
(
*
localeID
)
)
{
return
ulocimp_getScript
(
localeID
+
1
NULL
*
err
)
.
extract
(
script
scriptCapacity
*
err
)
;
}
return
u_terminateChars
(
script
scriptCapacity
0
err
)
;
}
U_CAPI
int32_t
U_EXPORT2
uloc_getCountry
(
const
char
*
localeID
char
*
country
int32_t
countryCapacity
UErrorCode
*
err
)
{
if
(
err
=
=
NULL
|
|
U_FAILURE
(
*
err
)
)
{
return
0
;
}
if
(
localeID
=
=
NULL
)
{
localeID
=
uloc_getDefault
(
)
;
}
ulocimp_getLanguage
(
localeID
&
localeID
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
return
0
;
}
if
(
_isIDSeparator
(
*
localeID
)
)
{
const
char
*
scriptID
;
ulocimp_getScript
(
localeID
+
1
&
scriptID
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
return
0
;
}
if
(
scriptID
!
=
localeID
+
1
)
{
localeID
=
scriptID
;
}
if
(
_isIDSeparator
(
*
localeID
)
)
{
return
ulocimp_getCountry
(
localeID
+
1
NULL
*
err
)
.
extract
(
country
countryCapacity
*
err
)
;
}
}
return
u_terminateChars
(
country
countryCapacity
0
err
)
;
}
U_CAPI
int32_t
U_EXPORT2
uloc_getVariant
(
const
char
*
localeID
char
*
variant
int32_t
variantCapacity
UErrorCode
*
err
)
{
char
tempBuffer
[
ULOC_FULLNAME_CAPACITY
]
;
const
char
*
tmpLocaleID
;
int32_t
i
=
0
;
if
(
err
=
=
NULL
|
|
U_FAILURE
(
*
err
)
)
{
return
0
;
}
if
(
_hasBCP47Extension
(
localeID
)
)
{
tmpLocaleID
=
_ConvertBCP47
(
localeID
tempBuffer
sizeof
(
tempBuffer
)
err
nullptr
)
;
}
else
{
if
(
localeID
=
=
NULL
)
{
localeID
=
uloc_getDefault
(
)
;
}
tmpLocaleID
=
localeID
;
}
ulocimp_getLanguage
(
tmpLocaleID
&
tmpLocaleID
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
return
0
;
}
if
(
_isIDSeparator
(
*
tmpLocaleID
)
)
{
const
char
*
scriptID
;
ulocimp_getScript
(
tmpLocaleID
+
1
&
scriptID
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
return
0
;
}
if
(
scriptID
!
=
tmpLocaleID
+
1
)
{
tmpLocaleID
=
scriptID
;
}
if
(
_isIDSeparator
(
*
tmpLocaleID
)
)
{
const
char
*
cntryID
;
ulocimp_getCountry
(
tmpLocaleID
+
1
&
cntryID
*
err
)
;
if
(
U_FAILURE
(
*
err
)
)
{
return
0
;
}
if
(
cntryID
!
=
tmpLocaleID
+
1
)
{
tmpLocaleID
=
cntryID
;
}
if
(
_isIDSeparator
(
*
tmpLocaleID
)
)
{
if
(
tmpLocaleID
!
=
cntryID
&
&
_isIDSeparator
(
tmpLocaleID
[
1
]
)
)
{
tmpLocaleID
+
+
;
}
CheckedArrayByteSink
sink
(
variant
variantCapacity
)
;
_getVariant
(
tmpLocaleID
+
1
*
tmpLocaleID
sink
false
)
;
i
=
sink
.
NumberOfBytesAppended
(
)
;
if
(
U_FAILURE
(
*
err
)
)
{
return
i
;
}
if
(
sink
.
Overflowed
(
)
)
{
*
err
=
U_BUFFER_OVERFLOW_ERROR
;
return
i
;
}
}
}
}
return
u_terminateChars
(
variant
variantCapacity
i
err
)
;
}
U_CAPI
int32_t
U_EXPORT2
uloc_getName
(
const
char
*
localeID
char
*
name
int32_t
nameCapacity
UErrorCode
*
err
)
{
if
(
U_FAILURE
(
*
err
)
)
{
return
0
;
}
CheckedArrayByteSink
sink
(
name
nameCapacity
)
;
ulocimp_getName
(
localeID
sink
err
)
;
int32_t
reslen
=
sink
.
NumberOfBytesAppended
(
)
;
if
(
U_FAILURE
(
*
err
)
)
{
return
reslen
;
}
if
(
sink
.
Overflowed
(
)
)
{
*
err
=
U_BUFFER_OVERFLOW_ERROR
;
}
else
{
u_terminateChars
(
name
nameCapacity
reslen
err
)
;
}
return
reslen
;
}
U_CAPI
void
U_EXPORT2
ulocimp_getName
(
const
char
*
localeID
ByteSink
&
sink
UErrorCode
*
err
)
{
_canonicalize
(
localeID
sink
0
err
)
;
}
U_CAPI
int32_t
U_EXPORT2
uloc_getBaseName
(
const
char
*
localeID
char
*
name
int32_t
nameCapacity
UErrorCode
*
err
)
{
if
(
U_FAILURE
(
*
err
)
)
{
return
0
;
}
CheckedArrayByteSink
sink
(
name
nameCapacity
)
;
ulocimp_getBaseName
(
localeID
sink
err
)
;
int32_t
reslen
=
sink
.
NumberOfBytesAppended
(
)
;
if
(
U_FAILURE
(
*
err
)
)
{
return
reslen
;
}
if
(
sink
.
Overflowed
(
)
)
{
*
err
=
U_BUFFER_OVERFLOW_ERROR
;
}
else
{
u_terminateChars
(
name
nameCapacity
reslen
err
)
;
}
return
reslen
;
}
U_CAPI
void
U_EXPORT2
ulocimp_getBaseName
(
const
char
*
localeID
ByteSink
&
sink
UErrorCode
*
err
)
{
_canonicalize
(
localeID
sink
_ULOC_STRIP_KEYWORDS
err
)
;
}
U_CAPI
int32_t
U_EXPORT2
uloc_canonicalize
(
const
char
*
localeID
char
*
name
int32_t
nameCapacity
UErrorCode
*
err
)
{
if
(
U_FAILURE
(
*
err
)
)
{
return
0
;
}
CheckedArrayByteSink
sink
(
name
nameCapacity
)
;
ulocimp_canonicalize
(
localeID
sink
err
)
;
int32_t
reslen
=
sink
.
NumberOfBytesAppended
(
)
;
if
(
U_FAILURE
(
*
err
)
)
{
return
reslen
;
}
if
(
sink
.
Overflowed
(
)
)
{
*
err
=
U_BUFFER_OVERFLOW_ERROR
;
}
else
{
u_terminateChars
(
name
nameCapacity
reslen
err
)
;
}
return
reslen
;
}
U_CAPI
void
U_EXPORT2
ulocimp_canonicalize
(
const
char
*
localeID
ByteSink
&
sink
UErrorCode
*
err
)
{
_canonicalize
(
localeID
sink
_ULOC_CANONICALIZE
err
)
;
}
U_CAPI
const
char
*
U_EXPORT2
uloc_getISO3Language
(
const
char
*
localeID
)
{
int16_t
offset
;
char
lang
[
ULOC_LANG_CAPACITY
]
;
UErrorCode
err
=
U_ZERO_ERROR
;
if
(
localeID
=
=
NULL
)
{
localeID
=
uloc_getDefault
(
)
;
}
uloc_getLanguage
(
localeID
lang
ULOC_LANG_CAPACITY
&
err
)
;
if
(
U_FAILURE
(
err
)
)
return
"
"
;
offset
=
_findIndex
(
LANGUAGES
lang
)
;
if
(
offset
<
0
)
return
"
"
;
return
LANGUAGES_3
[
offset
]
;
}
U_CAPI
const
char
*
U_EXPORT2
uloc_getISO3Country
(
const
char
*
localeID
)
{
int16_t
offset
;
char
cntry
[
ULOC_LANG_CAPACITY
]
;
UErrorCode
err
=
U_ZERO_ERROR
;
if
(
localeID
=
=
NULL
)
{
localeID
=
uloc_getDefault
(
)
;
}
uloc_getCountry
(
localeID
cntry
ULOC_LANG_CAPACITY
&
err
)
;
if
(
U_FAILURE
(
err
)
)
return
"
"
;
offset
=
_findIndex
(
COUNTRIES
cntry
)
;
if
(
offset
<
0
)
return
"
"
;
return
COUNTRIES_3
[
offset
]
;
}
U_CAPI
uint32_t
U_EXPORT2
uloc_getLCID
(
const
char
*
localeID
)
{
UErrorCode
status
=
U_ZERO_ERROR
;
char
langID
[
ULOC_FULLNAME_CAPACITY
]
;
uint32_t
lcid
=
0
;
if
(
!
localeID
|
|
uprv_strlen
(
localeID
)
<
2
)
{
return
0
;
}
lcid
=
uprv_convertToLCIDPlatform
(
localeID
&
status
)
;
if
(
U_FAILURE
(
status
)
)
{
return
0
;
}
if
(
lcid
>
0
)
{
return
lcid
;
}
uloc_getLanguage
(
localeID
langID
sizeof
(
langID
)
&
status
)
;
if
(
U_FAILURE
(
status
)
|
|
status
=
=
U_STRING_NOT_TERMINATED_WARNING
)
{
return
0
;
}
if
(
uprv_strchr
(
localeID
'
'
)
)
{
int32_t
len
;
char
tmpLocaleID
[
ULOC_FULLNAME_CAPACITY
]
;
CharString
collVal
;
{
CharStringByteSink
sink
(
&
collVal
)
;
ulocimp_getKeywordValue
(
localeID
"
collation
"
sink
&
status
)
;
}
if
(
U_SUCCESS
(
status
)
&
&
!
collVal
.
isEmpty
(
)
)
{
len
=
uloc_getBaseName
(
localeID
tmpLocaleID
UPRV_LENGTHOF
(
tmpLocaleID
)
-
1
&
status
)
;
if
(
U_SUCCESS
(
status
)
&
&
len
>
0
)
{
tmpLocaleID
[
len
]
=
0
;
len
=
uloc_setKeywordValue
(
"
collation
"
collVal
.
data
(
)
tmpLocaleID
UPRV_LENGTHOF
(
tmpLocaleID
)
-
len
-
1
&
status
)
;
if
(
U_SUCCESS
(
status
)
&
&
len
>
0
)
{
tmpLocaleID
[
len
]
=
0
;
return
uprv_convertToLCID
(
langID
tmpLocaleID
&
status
)
;
}
}
}
status
=
U_ZERO_ERROR
;
}
return
uprv_convertToLCID
(
langID
localeID
&
status
)
;
}
U_CAPI
int32_t
U_EXPORT2
uloc_getLocaleForLCID
(
uint32_t
hostid
char
*
locale
int32_t
localeCapacity
UErrorCode
*
status
)
{
return
uprv_convertToPosix
(
hostid
locale
localeCapacity
status
)
;
}
U_CAPI
const
char
*
U_EXPORT2
uloc_getDefault
(
)
{
return
locale_get_default
(
)
;
}
U_CAPI
void
U_EXPORT2
uloc_setDefault
(
const
char
*
newDefaultLocale
UErrorCode
*
err
)
{
if
(
U_FAILURE
(
*
err
)
)
return
;
locale_set_default
(
newDefaultLocale
)
;
}
U_CAPI
const
char
*
const
*
U_EXPORT2
uloc_getISOLanguages
(
)
{
return
LANGUAGES
;
}
U_CAPI
const
char
*
const
*
U_EXPORT2
uloc_getISOCountries
(
)
{
return
COUNTRIES
;
}
U_CAPI
const
char
*
U_EXPORT2
uloc_toUnicodeLocaleKey
(
const
char
*
keyword
)
{
const
char
*
bcpKey
=
ulocimp_toBcpKey
(
keyword
)
;
if
(
bcpKey
=
=
NULL
&
&
ultag_isUnicodeLocaleKey
(
keyword
-
1
)
)
{
return
keyword
;
}
return
bcpKey
;
}
U_CAPI
const
char
*
U_EXPORT2
uloc_toUnicodeLocaleType
(
const
char
*
keyword
const
char
*
value
)
{
const
char
*
bcpType
=
ulocimp_toBcpType
(
keyword
value
NULL
NULL
)
;
if
(
bcpType
=
=
NULL
&
&
ultag_isUnicodeLocaleType
(
value
-
1
)
)
{
return
value
;
}
return
bcpType
;
}
static
UBool
isWellFormedLegacyKey
(
const
char
*
legacyKey
)
{
const
char
*
p
=
legacyKey
;
while
(
*
p
)
{
if
(
!
UPRV_ISALPHANUM
(
*
p
)
)
{
return
false
;
}
p
+
+
;
}
return
true
;
}
static
UBool
isWellFormedLegacyType
(
const
char
*
legacyType
)
{
const
char
*
p
=
legacyType
;
int32_t
alphaNumLen
=
0
;
while
(
*
p
)
{
if
(
*
p
=
=
'
_
'
|
|
*
p
=
=
'
/
'
|
|
*
p
=
=
'
-
'
)
{
if
(
alphaNumLen
=
=
0
)
{
return
false
;
}
alphaNumLen
=
0
;
}
else
if
(
UPRV_ISALPHANUM
(
*
p
)
)
{
alphaNumLen
+
+
;
}
else
{
return
false
;
}
p
+
+
;
}
return
(
alphaNumLen
!
=
0
)
;
}
U_CAPI
const
char
*
U_EXPORT2
uloc_toLegacyKey
(
const
char
*
keyword
)
{
const
char
*
legacyKey
=
ulocimp_toLegacyKey
(
keyword
)
;
if
(
legacyKey
=
=
NULL
)
{
if
(
isWellFormedLegacyKey
(
keyword
)
)
{
return
keyword
;
}
}
return
legacyKey
;
}
U_CAPI
const
char
*
U_EXPORT2
uloc_toLegacyType
(
const
char
*
keyword
const
char
*
value
)
{
const
char
*
legacyType
=
ulocimp_toLegacyType
(
keyword
value
NULL
NULL
)
;
if
(
legacyType
=
=
NULL
)
{
if
(
isWellFormedLegacyType
(
value
)
)
{
return
value
;
}
}
return
legacyType
;
}
