#
ifndef
__UNISTRAPPENDER_H__
#
define
__UNISTRAPPENDER_H__
#
include
"
unicode
/
unistr
.
h
"
#
include
"
unicode
/
uobject
.
h
"
#
include
"
unicode
/
utf16
.
h
"
#
include
"
unicode
/
utypes
.
h
"
#
include
"
cmemory
.
h
"
U_NAMESPACE_BEGIN
class
UnicodeStringAppender
:
public
UMemory
{
public
:
UnicodeStringAppender
(
UnicodeString
&
dest
)
:
fDest
(
&
dest
)
fIdx
(
0
)
{
}
inline
void
append
(
char16_t
x
)
{
if
(
fIdx
=
=
UPRV_LENGTHOF
(
fBuffer
)
)
{
fDest
-
>
append
(
fBuffer
0
fIdx
)
;
fIdx
=
0
;
}
fBuffer
[
fIdx
+
+
]
=
x
;
}
inline
void
append
(
UChar32
x
)
{
if
(
fIdx
>
=
UPRV_LENGTHOF
(
fBuffer
)
-
1
)
{
fDest
-
>
append
(
fBuffer
0
fIdx
)
;
fIdx
=
0
;
}
U16_APPEND_UNSAFE
(
fBuffer
fIdx
x
)
;
}
inline
void
flush
(
)
{
if
(
fIdx
)
{
fDest
-
>
append
(
fBuffer
0
fIdx
)
;
}
fIdx
=
0
;
}
~
UnicodeStringAppender
(
)
{
flush
(
)
;
}
private
:
UnicodeString
*
fDest
;
int32_t
fIdx
;
char16_t
fBuffer
[
32
]
;
UnicodeStringAppender
(
const
UnicodeStringAppender
&
other
)
;
UnicodeStringAppender
&
operator
=
(
const
UnicodeStringAppender
&
other
)
;
}
;
U_NAMESPACE_END
#
endif
