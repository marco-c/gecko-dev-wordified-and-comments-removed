#
ifndef
mozilla_EncodingDetector_h
#
define
mozilla_EncodingDetector_h
#
include
"
mozilla
/
Encoding
.
h
"
namespace
mozilla
{
class
EncodingDetector
;
}
;
#
define
CHARDETNG_ENCODING_DETECTOR
mozilla
:
:
EncodingDetector
#
include
"
chardetng
.
h
"
namespace
mozilla
{
class
EncodingDetector
final
{
public
:
~
EncodingDetector
(
)
=
default
;
static
void
operator
delete
(
void
*
aDetector
)
{
chardetng_encoding_detector_free
(
reinterpret_cast
<
EncodingDetector
*
>
(
aDetector
)
)
;
}
static
inline
UniquePtr
<
EncodingDetector
>
Create
(
)
{
UniquePtr
<
EncodingDetector
>
detector
(
chardetng_encoding_detector_new
(
)
)
;
return
detector
;
}
inline
bool
Feed
(
Span
<
const
uint8_t
>
aBuffer
bool
aLast
)
{
return
chardetng_encoding_detector_feed
(
this
aBuffer
.
Elements
(
)
aBuffer
.
Length
(
)
aLast
)
;
}
inline
mozilla
:
:
NotNull
<
const
mozilla
:
:
Encoding
*
>
Guess
(
Span
<
const
char
>
aTLD
bool
aAllowUTF8
)
const
{
return
WrapNotNull
(
chardetng_encoding_detector_guess
(
this
aTLD
.
Elements
(
)
aTLD
.
Length
(
)
aAllowUTF8
)
)
;
}
private
:
EncodingDetector
(
)
=
delete
;
EncodingDetector
(
const
EncodingDetector
&
)
=
delete
;
EncodingDetector
&
operator
=
(
const
EncodingDetector
&
)
=
delete
;
}
;
}
;
#
endif
