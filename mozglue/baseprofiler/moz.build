if
CONFIG
[
'
MOZ_GECKO_PROFILER
'
]
:
DEFINES
[
'
IMPL_MFBT
'
]
=
True
EXPORTS
+
=
[
'
public
/
BaseProfileJSONWriter
.
h
'
'
public
/
BaseProfilerMarkerPayload
.
h
'
'
public
/
BaseProfilerSharedLibraries
.
h
'
'
public
/
BaseProfilingCategory
.
h
'
'
public
/
BaseProfilingStack
.
h
'
]
UNIFIED_SOURCES
+
=
[
'
core
/
PageInformation
.
cpp
'
'
core
/
platform
.
cpp
'
'
core
/
ProfileBuffer
.
cpp
'
'
core
/
ProfileBufferEntry
.
cpp
'
'
core
/
ProfiledThreadData
.
cpp
'
'
core
/
ProfileJSONWriter
.
cpp
'
'
core
/
ProfilerBacktrace
.
cpp
'
'
core
/
ProfilerMarkerPayload
.
cpp
'
'
core
/
ProfilingCategory
.
cpp
'
'
core
/
ProfilingStack
.
cpp
'
'
core
/
RegisteredThread
.
cpp
'
]
if
CONFIG
[
'
OS_TARGET
'
]
in
(
'
Android
'
'
Linux
'
)
:
if
CONFIG
[
'
CPU_ARCH
'
]
in
(
'
arm
'
'
aarch64
'
'
x86
'
'
x86_64
'
'
mips64
'
)
:
UNIFIED_SOURCES
+
=
[
'
lul
/
AutoObjectMapper
.
cpp
'
'
lul
/
LulCommon
.
cpp
'
'
lul
/
LulDwarf
.
cpp
'
'
lul
/
LulDwarfSummariser
.
cpp
'
'
lul
/
LulElf
.
cpp
'
'
lul
/
LulMain
.
cpp
'
'
lul
/
platform
-
linux
-
lul
.
cpp
'
]
SOURCES
+
=
[
'
core
/
shared
-
libraries
-
linux
.
cc
'
]
if
CONFIG
[
'
CPU_ARCH
'
]
=
=
'
arm
'
:
SOURCES
+
=
[
'
core
/
EHABIStackWalk
.
cpp
'
]
elif
CONFIG
[
'
OS_TARGET
'
]
=
=
'
Darwin
'
:
UNIFIED_SOURCES
+
=
[
'
core
/
shared
-
libraries
-
macos
.
cc
'
]
elif
CONFIG
[
'
OS_TARGET
'
]
=
=
'
WINNT
'
:
SOURCES
+
=
[
'
core
/
shared
-
libraries
-
win32
.
cc
'
]
LOCAL_INCLUDES
+
=
[
'
/
mozglue
/
baseprofiler
/
core
/
'
'
/
mozglue
/
linker
'
]
if
CONFIG
[
'
OS_TARGET
'
]
=
=
'
Android
'
:
DEFINES
[
'
ANDROID_NDK_MAJOR_VERSION
'
]
=
CONFIG
[
'
ANDROID_NDK_MAJOR_VERSION
'
]
DEFINES
[
'
ANDROID_NDK_MINOR_VERSION
'
]
=
CONFIG
[
'
ANDROID_NDK_MINOR_VERSION
'
]
LOCAL_INCLUDES
+
=
[
'
lul
'
]
FINAL_LIBRARY
=
'
mozglue
'
EXPORTS
+
=
[
'
public
/
BaseProfiler
.
h
'
]
EXPORTS
.
mozilla
+
=
[
'
public
/
BaseProfilerCounts
.
h
'
'
public
/
BaseProfilerDetail
.
h
'
'
public
/
BlocksRingBuffer
.
h
'
'
public
/
leb128iterator
.
h
'
'
public
/
ModuloBuffer
.
h
'
'
public
/
PowerOfTwo
.
h
'
'
public
/
ProfileBufferChunk
.
h
'
'
public
/
ProfileBufferChunkManager
.
h
'
'
public
/
ProfileBufferChunkManagerSingle
.
h
'
'
public
/
ProfileBufferEntrySerialization
.
h
'
'
public
/
ProfileBufferIndex
.
h
'
]
if
CONFIG
[
'
MOZ_VTUNE
'
]
:
DEFINES
[
'
MOZ_VTUNE_INSTRUMENTATION
'
]
=
True
UNIFIED_SOURCES
+
=
[
'
core
/
VTuneProfiler
.
cpp
'
]
if
CONFIG
[
'
CC_TYPE
'
]
in
(
'
clang
'
'
gcc
'
)
:
CXXFLAGS
+
=
[
'
-
Wno
-
error
=
shadow
'
'
-
Wno
-
ignored
-
qualifiers
'
]
with
Files
(
'
*
*
'
)
:
BUG_COMPONENT
=
(
'
Core
'
'
Gecko
Profiler
'
)
