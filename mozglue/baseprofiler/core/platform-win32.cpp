#
include
<
windows
.
h
>
#
include
<
mmsystem
.
h
>
#
include
<
process
.
h
>
namespace
mozilla
{
namespace
baseprofiler
{
static
int64_t
MicrosecondsSince1970
(
)
{
int64_t
prt
;
FILETIME
ft
;
SYSTEMTIME
st
;
GetSystemTime
(
&
st
)
;
SystemTimeToFileTime
(
&
st
&
ft
)
;
static_assert
(
sizeof
(
ft
)
=
=
sizeof
(
prt
)
"
Expect
FILETIME
to
be
64
bits
"
)
;
memcpy
(
&
prt
&
ft
sizeof
(
prt
)
)
;
const
int64_t
epochBias
=
116444736000000000LL
;
prt
=
(
prt
-
epochBias
)
/
10
;
return
prt
;
}
void
*
GetStackTop
(
void
*
aGuess
)
{
PNT_TIB
pTib
=
reinterpret_cast
<
PNT_TIB
>
(
NtCurrentTeb
(
)
)
;
return
reinterpret_cast
<
void
*
>
(
pTib
-
>
StackBase
)
;
}
static
void
PopulateRegsFromContext
(
Registers
&
aRegs
CONTEXT
*
aContext
)
{
#
if
defined
(
GP_ARCH_amd64
)
aRegs
.
mPC
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Rip
)
;
aRegs
.
mSP
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Rsp
)
;
aRegs
.
mFP
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Rbp
)
;
aRegs
.
mLR
=
0
;
#
elif
defined
(
GP_ARCH_x86
)
aRegs
.
mPC
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Eip
)
;
aRegs
.
mSP
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Esp
)
;
aRegs
.
mFP
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Ebp
)
;
aRegs
.
mLR
=
0
;
#
elif
defined
(
GP_ARCH_arm64
)
aRegs
.
mPC
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Pc
)
;
aRegs
.
mSP
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Sp
)
;
aRegs
.
mFP
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Fp
)
;
aRegs
.
mLR
=
reinterpret_cast
<
Address
>
(
aContext
-
>
Lr
)
;
#
else
#
error
"
bad
arch
"
#
endif
}
static
HANDLE
GetRealCurrentThreadHandleForProfiling
(
)
{
HANDLE
realCurrentThreadHandle
;
if
(
!
:
:
DuplicateHandle
(
:
:
GetCurrentProcess
(
)
:
:
GetCurrentThread
(
)
:
:
GetCurrentProcess
(
)
&
realCurrentThreadHandle
THREAD_GET_CONTEXT
|
THREAD_SUSPEND_RESUME
|
THREAD_QUERY_INFORMATION
FALSE
0
)
)
{
return
nullptr
;
}
return
realCurrentThreadHandle
;
}
class
PlatformData
{
public
:
explicit
PlatformData
(
BaseProfilerThreadId
aThreadId
)
:
mProfiledThread
(
GetRealCurrentThreadHandleForProfiling
(
)
)
{
MOZ_ASSERT
(
DWORD
(
aThreadId
.
ToNumber
(
)
)
=
=
:
:
GetCurrentThreadId
(
)
)
;
}
~
PlatformData
(
)
{
if
(
mProfiledThread
!
=
nullptr
)
{
CloseHandle
(
mProfiledThread
)
;
mProfiledThread
=
nullptr
;
}
}
HANDLE
ProfiledThread
(
)
{
return
mProfiledThread
;
}
private
:
HANDLE
mProfiledThread
;
}
;
#
if
defined
(
USE_MOZ_STACK_WALK
)
HANDLE
GetThreadHandle
(
PlatformData
*
aData
)
{
return
aData
-
>
ProfiledThread
(
)
;
}
#
endif
static
const
HANDLE
kNoThread
=
INVALID_HANDLE_VALUE
;
Sampler
:
:
Sampler
(
PSLockRef
aLock
)
{
}
void
Sampler
:
:
Disable
(
PSLockRef
aLock
)
{
}
template
<
typename
Func
>
void
Sampler
:
:
SuspendAndSampleAndResumeThread
(
PSLockRef
aLock
const
RegisteredThread
&
aRegisteredThread
const
TimeStamp
&
aNow
const
Func
&
aProcessRegs
)
{
HANDLE
profiled_thread
=
aRegisteredThread
.
GetPlatformData
(
)
-
>
ProfiledThread
(
)
;
if
(
profiled_thread
=
=
nullptr
)
{
return
;
}
CONTEXT
context
;
memset
(
&
context
0
sizeof
(
context
)
)
;
static
const
DWORD
kSuspendFailed
=
static_cast
<
DWORD
>
(
-
1
)
;
if
(
SuspendThread
(
profiled_thread
)
=
=
kSuspendFailed
)
{
return
;
}
#
if
defined
(
GP_ARCH_amd64
)
context
.
ContextFlags
=
CONTEXT_FULL
;
#
else
context
.
ContextFlags
=
CONTEXT_CONTROL
;
#
endif
if
(
!
GetThreadContext
(
profiled_thread
&
context
)
)
{
ResumeThread
(
profiled_thread
)
;
return
;
}
Registers
regs
;
PopulateRegsFromContext
(
regs
&
context
)
;
aProcessRegs
(
regs
aNow
)
;
ResumeThread
(
profiled_thread
)
;
}
static
unsigned
int
__stdcall
ThreadEntry
(
void
*
aArg
)
{
auto
thread
=
static_cast
<
SamplerThread
*
>
(
aArg
)
;
thread
-
>
Run
(
)
;
return
0
;
}
SamplerThread
:
:
SamplerThread
(
PSLockRef
aLock
uint32_t
aActivityGeneration
double
aIntervalMilliseconds
uint32_t
aFeatures
)
:
mSampler
(
aLock
)
mActivityGeneration
(
aActivityGeneration
)
mIntervalMicroseconds
(
std
:
:
max
(
1
int
(
floor
(
aIntervalMilliseconds
*
1000
+
0
.
5
)
)
)
)
mNoTimerResolutionChange
(
ProfilerFeature
:
:
HasNoTimerResolutionChange
(
aFeatures
)
)
{
if
(
(
!
mNoTimerResolutionChange
)
&
&
(
mIntervalMicroseconds
<
10
*
1000
)
)
{
:
:
timeBeginPeriod
(
mIntervalMicroseconds
/
1000
)
;
}
mThread
=
reinterpret_cast
<
HANDLE
>
(
_beginthreadex
(
nullptr
0
ThreadEntry
this
0
nullptr
)
)
;
if
(
mThread
=
=
0
)
{
MOZ_CRASH
(
"
_beginthreadex
failed
"
)
;
}
}
SamplerThread
:
:
~
SamplerThread
(
)
{
WaitForSingleObject
(
mThread
INFINITE
)
;
if
(
mThread
!
=
kNoThread
)
{
CloseHandle
(
mThread
)
;
}
}
void
SamplerThread
:
:
SleepMicro
(
uint32_t
aMicroseconds
)
{
if
(
mIntervalMicroseconds
>
=
1000
)
{
:
:
Sleep
(
std
:
:
max
(
1u
aMicroseconds
/
1000
)
)
;
}
else
{
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
TimeStamp
end
=
start
+
TimeDuration
:
:
FromMicroseconds
(
aMicroseconds
)
;
if
(
aMicroseconds
>
=
1000
)
{
:
:
Sleep
(
aMicroseconds
/
1000
)
;
}
while
(
TimeStamp
:
:
Now
(
)
<
end
)
{
YieldProcessor
(
)
;
}
}
}
void
SamplerThread
:
:
Stop
(
PSLockRef
aLock
)
{
if
(
(
!
mNoTimerResolutionChange
)
&
&
(
mIntervalMicroseconds
<
10
*
1000
)
)
{
:
:
timeEndPeriod
(
mIntervalMicroseconds
/
1000
)
;
}
mSampler
.
Disable
(
aLock
)
;
}
static
void
PlatformInit
(
PSLockRef
aLock
)
{
}
#
if
defined
(
HAVE_NATIVE_UNWIND
)
#
define
REGISTERS_SYNC_POPULATE
(
regs
)
\
CONTEXT
context
;
\
RtlCaptureContext
(
&
context
)
;
\
PopulateRegsFromContext
(
regs
&
context
)
;
#
endif
}
}
