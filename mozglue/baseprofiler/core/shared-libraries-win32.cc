#
include
<
windows
.
h
>
#
include
<
dbghelp
.
h
>
#
include
<
sstream
>
#
include
<
psapi
.
h
>
#
include
"
BaseProfilerSharedLibraries
.
h
"
#
include
"
mozilla
/
glue
/
WindowsUnicode
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
WindowsEnumProcessModules
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
<
cctype
>
#
include
<
string
>
#
define
CV_SIGNATURE
0x53445352
/
/
'
SDSR
'
struct
CodeViewRecord70
{
uint32_t
signature
;
GUID
pdbSignature
;
uint32_t
pdbAge
;
char
pdbFileName
[
1
]
;
}
;
static
constexpr
char
digits
[
16
]
=
{
'
0
'
'
1
'
'
2
'
'
3
'
'
4
'
'
5
'
'
6
'
'
7
'
'
8
'
'
9
'
'
A
'
'
B
'
'
C
'
'
D
'
'
E
'
'
F
'
}
;
static
void
AppendHex
(
const
unsigned
char
*
aBegin
const
unsigned
char
*
aEnd
std
:
:
string
&
aOut
)
{
for
(
const
unsigned
char
*
p
=
aBegin
;
p
<
aEnd
;
+
+
p
)
{
unsigned
char
c
=
*
p
;
aOut
+
=
digits
[
c
>
>
4
]
;
aOut
+
=
digits
[
c
&
0xFu
]
;
}
}
static
constexpr
bool
WITH_PADDING
=
true
;
static
constexpr
bool
WITHOUT_PADDING
=
false
;
template
<
typename
T
>
static
void
AppendHex
(
T
aValue
std
:
:
string
&
aOut
bool
aWithPadding
)
{
for
(
int
i
=
sizeof
(
T
)
*
2
-
1
;
i
>
=
0
;
-
-
i
)
{
unsigned
nibble
=
(
aValue
>
>
(
i
*
4
)
)
&
0xFu
;
if
(
!
aWithPadding
&
&
i
!
=
0
)
{
if
(
nibble
=
=
0
)
{
continue
;
}
aWithPadding
=
true
;
}
aOut
+
=
digits
[
nibble
]
;
}
}
static
bool
GetPdbInfo
(
uintptr_t
aStart
std
:
:
string
&
aSignature
uint32_t
&
aAge
char
*
*
aPdbName
)
{
if
(
!
aStart
)
{
return
false
;
}
PIMAGE_DOS_HEADER
dosHeader
=
reinterpret_cast
<
PIMAGE_DOS_HEADER
>
(
aStart
)
;
if
(
dosHeader
-
>
e_magic
!
=
IMAGE_DOS_SIGNATURE
)
{
return
false
;
}
PIMAGE_NT_HEADERS
ntHeaders
=
reinterpret_cast
<
PIMAGE_NT_HEADERS
>
(
aStart
+
dosHeader
-
>
e_lfanew
)
;
if
(
ntHeaders
-
>
Signature
!
=
IMAGE_NT_SIGNATURE
)
{
return
false
;
}
uint32_t
relativeVirtualAddress
=
ntHeaders
-
>
OptionalHeader
.
DataDirectory
[
IMAGE_DIRECTORY_ENTRY_DEBUG
]
.
VirtualAddress
;
if
(
!
relativeVirtualAddress
)
{
return
false
;
}
PIMAGE_DEBUG_DIRECTORY
debugDirectory
=
reinterpret_cast
<
PIMAGE_DEBUG_DIRECTORY
>
(
aStart
+
relativeVirtualAddress
)
;
if
(
!
debugDirectory
|
|
debugDirectory
-
>
Type
!
=
IMAGE_DEBUG_TYPE_CODEVIEW
)
{
return
false
;
}
CodeViewRecord70
*
debugInfo
=
reinterpret_cast
<
CodeViewRecord70
*
>
(
aStart
+
debugDirectory
-
>
AddressOfRawData
)
;
if
(
!
debugInfo
|
|
debugInfo
-
>
signature
!
=
CV_SIGNATURE
)
{
return
false
;
}
aAge
=
debugInfo
-
>
pdbAge
;
GUID
&
pdbSignature
=
debugInfo
-
>
pdbSignature
;
AppendHex
(
pdbSignature
.
Data1
aSignature
WITH_PADDING
)
;
AppendHex
(
pdbSignature
.
Data2
aSignature
WITH_PADDING
)
;
AppendHex
(
pdbSignature
.
Data3
aSignature
WITH_PADDING
)
;
AppendHex
(
reinterpret_cast
<
const
unsigned
char
*
>
(
&
pdbSignature
.
Data4
)
reinterpret_cast
<
const
unsigned
char
*
>
(
&
pdbSignature
.
Data4
)
+
sizeof
(
pdbSignature
.
Data4
)
aSignature
)
;
*
aPdbName
=
debugInfo
-
>
pdbFileName
;
return
true
;
}
static
std
:
:
string
GetVersion
(
const
wchar_t
*
dllPath
)
{
DWORD
infoSize
=
GetFileVersionInfoSizeW
(
dllPath
nullptr
)
;
if
(
infoSize
=
=
0
)
{
return
{
}
;
}
mozilla
:
:
UniquePtr
<
unsigned
char
[
]
>
infoData
=
mozilla
:
:
MakeUnique
<
unsigned
char
[
]
>
(
infoSize
)
;
if
(
!
GetFileVersionInfoW
(
dllPath
0
infoSize
infoData
.
get
(
)
)
)
{
return
{
}
;
}
VS_FIXEDFILEINFO
*
vInfo
;
UINT
vInfoLen
;
if
(
!
VerQueryValueW
(
infoData
.
get
(
)
L
"
\
\
"
(
LPVOID
*
)
&
vInfo
&
vInfoLen
)
)
{
return
{
}
;
}
if
(
!
vInfo
)
{
return
{
}
;
}
return
std
:
:
to_string
(
vInfo
-
>
dwFileVersionMS
>
>
16
)
+
'
.
'
+
std
:
:
to_string
(
vInfo
-
>
dwFileVersionMS
&
0xFFFF
)
+
'
.
'
+
std
:
:
to_string
(
vInfo
-
>
dwFileVersionLS
>
>
16
)
+
'
.
'
+
std
:
:
to_string
(
vInfo
-
>
dwFileVersionLS
&
0xFFFF
)
;
}
SharedLibraryInfo
SharedLibraryInfo
:
:
GetInfoForSelf
(
)
{
SharedLibraryInfo
sharedLibraryInfo
;
auto
addSharedLibraryFromModuleInfo
=
[
&
sharedLibraryInfo
]
(
const
wchar_t
*
aModulePath
HMODULE
aModule
)
{
mozilla
:
:
UniquePtr
<
char
[
]
>
utf8ModulePath
(
mozilla
:
:
glue
:
:
WideToUTF8
(
aModulePath
)
)
;
if
(
!
utf8ModulePath
)
{
return
;
}
MODULEINFO
module
=
{
0
}
;
if
(
!
GetModuleInformation
(
mozilla
:
:
nt
:
:
kCurrentProcess
aModule
&
module
sizeof
(
MODULEINFO
)
)
)
{
return
;
}
std
:
:
string
modulePathStr
(
utf8ModulePath
.
get
(
)
)
;
size_t
pos
=
modulePathStr
.
find_last_of
(
"
\
\
/
"
)
;
std
:
:
string
moduleNameStr
=
(
pos
!
=
std
:
:
string
:
:
npos
)
?
modulePathStr
.
substr
(
pos
+
1
)
:
modulePathStr
;
#
if
!
defined
(
_M_ARM64
)
#
if
defined
(
_M_AMD64
)
LPCWSTR
kNvidiaShimDriver
=
L
"
nvd3d9wrapx
.
dll
"
;
LPCWSTR
kNvidiaInitDriver
=
L
"
nvinitx
.
dll
"
;
#
elif
defined
(
_M_IX86
)
LPCWSTR
kNvidiaShimDriver
=
L
"
nvd3d9wrap
.
dll
"
;
LPCWSTR
kNvidiaInitDriver
=
L
"
nvinit
.
dll
"
;
#
endif
constexpr
std
:
:
string_view
detoured_dll
=
"
detoured
.
dll
"
;
if
(
std
:
:
equal
(
moduleNameStr
.
cbegin
(
)
moduleNameStr
.
cend
(
)
detoured_dll
.
cbegin
(
)
detoured_dll
.
cend
(
)
[
]
(
char
aModuleChar
char
aDetouredChar
)
{
return
std
:
:
tolower
(
aModuleChar
)
=
=
aDetouredChar
;
}
)
&
&
!
mozilla
:
:
IsWin8OrLater
(
)
&
&
:
:
GetModuleHandleW
(
kNvidiaShimDriver
)
&
&
!
:
:
GetModuleHandleW
(
kNvidiaInitDriver
)
)
{
const
std
:
:
string
pdbNameStr
=
"
detoured
.
pdb
"
;
SharedLibrary
shlib
(
(
uintptr_t
)
module
.
lpBaseOfDll
(
uintptr_t
)
module
.
lpBaseOfDll
+
module
.
SizeOfImage
0
"
000000000000000000000000000000000
"
moduleNameStr
modulePathStr
pdbNameStr
pdbNameStr
"
"
"
"
)
;
sharedLibraryInfo
.
AddSharedLibrary
(
shlib
)
;
return
;
}
#
endif
std
:
:
string
breakpadId
;
HMODULE
handleLock
=
LoadLibraryExW
(
aModulePath
NULL
LOAD_LIBRARY_AS_DATAFILE
)
;
MEMORY_BASIC_INFORMATION
vmemInfo
=
{
0
}
;
std
:
:
string
pdbSig
;
uint32_t
pdbAge
;
std
:
:
string
pdbPathStr
;
std
:
:
string
pdbNameStr
;
char
*
pdbName
=
nullptr
;
if
(
handleLock
&
&
sizeof
(
vmemInfo
)
=
=
VirtualQuery
(
module
.
lpBaseOfDll
&
vmemInfo
sizeof
(
vmemInfo
)
)
&
&
vmemInfo
.
State
=
=
MEM_COMMIT
&
&
GetPdbInfo
(
(
uintptr_t
)
module
.
lpBaseOfDll
pdbSig
pdbAge
&
pdbName
)
)
{
MOZ_ASSERT
(
breakpadId
.
empty
(
)
)
;
breakpadId
+
=
pdbSig
;
AppendHex
(
pdbAge
breakpadId
WITHOUT_PADDING
)
;
pdbPathStr
=
pdbName
;
size_t
pos
=
pdbPathStr
.
find_last_of
(
"
\
\
/
"
)
;
pdbNameStr
=
(
pos
!
=
std
:
:
string
:
:
npos
)
?
pdbPathStr
.
substr
(
pos
+
1
)
:
pdbPathStr
;
}
SharedLibrary
shlib
(
(
uintptr_t
)
module
.
lpBaseOfDll
(
uintptr_t
)
module
.
lpBaseOfDll
+
module
.
SizeOfImage
0
breakpadId
moduleNameStr
modulePathStr
pdbNameStr
pdbPathStr
GetVersion
(
aModulePath
)
"
"
)
;
sharedLibraryInfo
.
AddSharedLibrary
(
shlib
)
;
FreeLibrary
(
handleLock
)
;
}
;
mozilla
:
:
EnumerateProcessModules
(
addSharedLibraryFromModuleInfo
)
;
return
sharedLibraryInfo
;
}
void
SharedLibraryInfo
:
:
Initialize
(
)
{
}
