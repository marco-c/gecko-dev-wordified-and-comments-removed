#
ifndef
PageInformation_h
#
define
PageInformation_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
<
string
>
namespace
mozilla
{
namespace
baseprofiler
{
class
SpliceableJSONWriter
;
class
PageInformation
final
{
public
:
PageInformation
(
uint64_t
aBrowsingContextID
uint64_t
aInnerWindowID
const
std
:
:
string
&
aUrl
uint64_t
aEmbedderInnerWindowID
)
;
MFBT_API
void
AddRef
(
)
const
{
+
+
mRefCnt
;
}
MFBT_API
void
Release
(
)
const
{
MOZ_ASSERT
(
int32_t
(
mRefCnt
)
>
0
)
;
if
(
-
-
mRefCnt
)
{
delete
this
;
}
}
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
bool
Equals
(
PageInformation
*
aOtherPageInfo
)
const
;
void
StreamJSON
(
SpliceableJSONWriter
&
aWriter
)
const
;
uint64_t
InnerWindowID
(
)
const
{
return
mInnerWindowID
;
}
uint64_t
BrowsingContextID
(
)
const
{
return
mBrowsingContextID
;
}
const
std
:
:
string
&
Url
(
)
const
{
return
mUrl
;
}
uint64_t
EmbedderInnerWindowID
(
)
const
{
return
mEmbedderInnerWindowID
;
}
Maybe
<
uint64_t
>
BufferPositionWhenUnregistered
(
)
const
{
return
mBufferPositionWhenUnregistered
;
}
void
NotifyUnregistered
(
uint64_t
aBufferPosition
)
{
mBufferPositionWhenUnregistered
=
Some
(
aBufferPosition
)
;
}
private
:
const
uint64_t
mBrowsingContextID
;
const
uint64_t
mInnerWindowID
;
const
std
:
:
string
mUrl
;
const
uint64_t
mEmbedderInnerWindowID
;
Maybe
<
uint64_t
>
mBufferPositionWhenUnregistered
;
mutable
Atomic
<
int32_t
MemoryOrdering
:
:
ReleaseAcquire
>
mRefCnt
;
}
;
}
}
#
endif
