#
include
"
BaseProfilingCategory
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
namespace
mozilla
{
namespace
baseprofiler
{
#
define
SUBCATEGORY_ENUMS_BEGIN_CATEGORY
(
name
labelAsString
color
)
\
enum
class
ProfilingSubcategory_
#
#
name
:
uint32_t
{
#
define
SUBCATEGORY_ENUMS_SUBCATEGORY
(
category
name
labelAsString
)
\
name
#
define
SUBCATEGORY_ENUMS_END_CATEGORY
\
}
;
MOZ_PROFILING_CATEGORY_LIST
(
SUBCATEGORY_ENUMS_BEGIN_CATEGORY
SUBCATEGORY_ENUMS_SUBCATEGORY
SUBCATEGORY_ENUMS_END_CATEGORY
)
#
undef
SUBCATEGORY_ENUMS_BEGIN_CATEGORY
#
undef
SUBCATEGORY_ENUMS_SUBCATEGORY
#
undef
SUBCATEGORY_ENUMS_END_CATEGORY
#
define
CATEGORY_PAIR_INFO_BEGIN_CATEGORY
(
name
labelAsString
color
)
#
define
CATEGORY_PAIR_INFO_SUBCATEGORY
(
category
name
labelAsString
)
\
{
ProfilingCategory
:
:
category
\
uint32_t
(
ProfilingSubcategory_
#
#
category
:
:
name
)
labelAsString
}
#
define
CATEGORY_PAIR_INFO_END_CATEGORY
static
constexpr
ProfilingCategoryPairInfo
sProfilingCategoryPairInfo
[
]
=
{
MOZ_PROFILING_CATEGORY_LIST
(
CATEGORY_PAIR_INFO_BEGIN_CATEGORY
CATEGORY_PAIR_INFO_SUBCATEGORY
CATEGORY_PAIR_INFO_END_CATEGORY
)
}
;
#
undef
CATEGORY_PAIR_INFO_BEGIN_CATEGORY
#
undef
CATEGORY_PAIR_INFO_SUBCATEGORY
#
undef
CATEGORY_PAIR_INFO_END_CATEGORY
#
define
SUBCATEGORY_NAMES_BEGIN_CATEGORY
(
name
labelAsString
color
)
\
static
constexpr
const
char
*
sSubcategoryNames_
#
#
name
[
]
=
{
#
define
SUBCATEGORY_NAMES_SUBCATEGORY
(
supercategory
name
labelAsString
)
labelAsString
#
define
SUBCATEGORY_NAMES_END_CATEGORY
\
}
;
MOZ_PROFILING_CATEGORY_LIST
(
SUBCATEGORY_NAMES_BEGIN_CATEGORY
SUBCATEGORY_NAMES_SUBCATEGORY
SUBCATEGORY_NAMES_END_CATEGORY
)
#
undef
SUBCATEGORY_NAMES_BEGIN_CATEGORY
#
undef
SUBCATEGORY_NAMES_SUBCATEGORY
#
undef
SUBCATEGORY_NAMES_END_CATEGORY
#
define
CATEGORY_INFO_LIST_BEGIN_CATEGORY
(
name
labelAsString
color
)
\
{
labelAsString
color
Span
{
sSubcategoryNames_
#
#
name
}
}
#
define
CATEGORY_INFO_LIST_SUBCATEGORY
(
supercategory
name
labelAsString
)
#
define
CATEGORY_INFO_LIST_END_CATEGORY
static
constexpr
ProfilingCategoryInfo
sProfilingCategoryInfoList
[
]
=
{
MOZ_PROFILING_CATEGORY_LIST
(
CATEGORY_INFO_LIST_BEGIN_CATEGORY
CATEGORY_INFO_LIST_SUBCATEGORY
CATEGORY_INFO_LIST_END_CATEGORY
)
}
;
#
undef
CATEGORY_INFO_LIST_BEGIN_CATEGORY
#
undef
CATEGORY_INFO_LIST_SUBCATEGORY
#
undef
CATEGORY_INFO_LIST_END_CATEGORY
Span
<
const
ProfilingCategoryInfo
>
GetProfilingCategoryList
(
)
{
return
Span
{
sProfilingCategoryInfoList
}
;
}
const
ProfilingCategoryPairInfo
&
GetProfilingCategoryPairInfo
(
ProfilingCategoryPair
aCategoryPair
)
{
static_assert
(
std
:
:
size
(
sProfilingCategoryPairInfo
)
=
=
uint32_t
(
ProfilingCategoryPair
:
:
COUNT
)
"
sProfilingCategoryPairInfo
and
ProfilingCategory
need
to
have
the
"
"
same
order
and
the
same
length
"
)
;
uint32_t
categoryPairIndex
=
uint32_t
(
aCategoryPair
)
;
MOZ_RELEASE_ASSERT
(
categoryPairIndex
<
=
uint32_t
(
ProfilingCategoryPair
:
:
LAST
)
)
;
return
sProfilingCategoryPairInfo
[
categoryPairIndex
]
;
}
}
}
