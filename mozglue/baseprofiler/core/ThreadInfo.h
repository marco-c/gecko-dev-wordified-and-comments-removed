#
ifndef
ThreadInfo_h
#
define
ThreadInfo_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
BaseProfilerUtils
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
namespace
mozilla
{
namespace
baseprofiler
{
class
ThreadInfo
final
{
public
:
ThreadInfo
(
const
char
*
aName
BaseProfilerThreadId
aThreadId
bool
aIsMainThread
const
TimeStamp
&
aRegisterTime
=
TimeStamp
:
:
Now
(
)
)
:
mName
(
aName
)
mRegisterTime
(
aRegisterTime
)
mThreadId
(
aThreadId
)
mIsMainThread
(
aIsMainThread
)
mRefCnt
(
0
)
{
MOZ_ASSERT
(
aThreadId
.
IsSpecified
(
)
"
Given
aThreadId
should
not
be
unspecified
"
)
;
}
MFBT_API
void
AddRef
(
)
const
{
+
+
mRefCnt
;
}
MFBT_API
void
Release
(
)
const
{
MOZ_ASSERT
(
int32_t
(
mRefCnt
)
>
0
)
;
if
(
-
-
mRefCnt
=
=
0
)
{
delete
this
;
}
}
const
char
*
Name
(
)
const
{
return
mName
.
c_str
(
)
;
}
TimeStamp
RegisterTime
(
)
const
{
return
mRegisterTime
;
}
BaseProfilerThreadId
ThreadId
(
)
const
{
return
mThreadId
;
}
bool
IsMainThread
(
)
const
{
return
mIsMainThread
;
}
private
:
const
std
:
:
string
mName
;
const
TimeStamp
mRegisterTime
;
const
BaseProfilerThreadId
mThreadId
;
const
bool
mIsMainThread
;
mutable
Atomic
<
int32_t
MemoryOrdering
:
:
ReleaseAcquire
>
mRefCnt
;
}
;
}
}
#
endif
