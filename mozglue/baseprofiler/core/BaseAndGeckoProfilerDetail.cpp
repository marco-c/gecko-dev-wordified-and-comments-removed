#
include
"
mozilla
/
BaseAndGeckoProfilerDetail
.
h
"
#
include
<
limits
>
#
include
<
string_view
>
namespace
mozilla
:
:
profiler
:
:
detail
{
constexpr
std
:
:
string_view
scPidPrefix
=
"
pid
:
"
;
static
baseprofiler
:
:
BaseProfilerProcessId
StringToPid
(
const
char
*
aString
)
{
if
(
!
aString
|
|
aString
[
0
]
=
=
'
\
0
'
)
{
return
baseprofiler
:
:
BaseProfilerProcessId
{
}
;
}
if
(
aString
[
0
]
=
=
'
0
'
)
{
if
(
aString
[
1
]
!
=
'
\
0
'
)
{
return
baseprofiler
:
:
BaseProfilerProcessId
{
}
;
}
return
baseprofiler
:
:
BaseProfilerProcessId
:
:
FromNumber
(
0
)
;
}
using
PidNumber
=
baseprofiler
:
:
BaseProfilerProcessId
:
:
NumberType
;
PidNumber
pid
=
0
;
for
(
;
;
)
{
const
char
c
=
*
aString
;
if
(
c
=
=
'
\
0
'
)
{
break
;
}
if
(
c
<
'
0
'
|
|
c
>
'
9
'
)
{
return
baseprofiler
:
:
BaseProfilerProcessId
{
}
;
}
static_assert
(
!
std
:
:
numeric_limits
<
PidNumber
>
:
:
is_signed
"
The
following
relies
on
unsigned
arithmetic
"
)
;
PidNumber
newPid
=
pid
*
10u
+
PidNumber
(
c
-
'
0
'
)
;
if
(
newPid
<
pid
)
{
return
baseprofiler
:
:
BaseProfilerProcessId
{
}
;
}
pid
=
newPid
;
+
+
aString
;
}
return
baseprofiler
:
:
BaseProfilerProcessId
:
:
FromNumber
(
pid
)
;
}
[
[
nodiscard
]
]
MFBT_API
bool
FilterHasPid
(
const
char
*
aFilter
baseprofiler
:
:
BaseProfilerProcessId
aPid
)
{
if
(
strncmp
(
aFilter
scPidPrefix
.
data
(
)
scPidPrefix
.
length
(
)
)
!
=
0
)
{
return
false
;
}
return
StringToPid
(
aFilter
+
scPidPrefix
.
length
(
)
)
=
=
aPid
;
}
[
[
nodiscard
]
]
MFBT_API
bool
FiltersExcludePid
(
Span
<
const
char
*
const
>
aFilters
baseprofiler
:
:
BaseProfilerProcessId
aPid
)
{
if
(
aFilters
.
empty
(
)
)
{
return
false
;
}
for
(
const
char
*
const
filter
:
aFilters
)
{
if
(
strncmp
(
filter
scPidPrefix
.
data
(
)
scPidPrefix
.
length
(
)
)
!
=
0
)
{
return
false
;
}
}
for
(
const
char
*
const
filter
:
aFilters
)
{
if
(
StringToPid
(
filter
+
scPidPrefix
.
length
(
)
)
=
=
aPid
)
{
return
false
;
}
}
return
true
;
}
}
