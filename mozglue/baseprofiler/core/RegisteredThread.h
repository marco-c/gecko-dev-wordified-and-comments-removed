#
ifndef
RegisteredThread_h
#
define
RegisteredThread_h
#
include
"
platform
.
h
"
#
include
"
ThreadInfo
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
namespace
baseprofiler
{
class
RacyRegisteredThread
final
{
public
:
explicit
RacyRegisteredThread
(
BaseProfilerThreadId
aThreadId
)
:
mThreadId
(
aThreadId
)
mSleep
(
AWAKE
)
mIsBeingProfiled
(
false
)
{
}
~
RacyRegisteredThread
(
)
{
}
void
SetIsBeingProfiled
(
bool
aIsBeingProfiled
)
{
mIsBeingProfiled
=
aIsBeingProfiled
;
}
bool
IsBeingProfiled
(
)
const
{
return
mIsBeingProfiled
;
}
void
ReinitializeOnResume
(
)
{
(
void
)
mSleep
.
compareExchange
(
SLEEPING_OBSERVED
SLEEPING_NOT_OBSERVED
)
;
}
bool
CanDuplicateLastSampleDueToSleep
(
)
{
if
(
mSleep
=
=
AWAKE
)
{
return
false
;
}
if
(
mSleep
.
compareExchange
(
SLEEPING_NOT_OBSERVED
SLEEPING_OBSERVED
)
)
{
return
false
;
}
return
true
;
}
void
SetSleeping
(
)
{
MOZ_ASSERT
(
mSleep
=
=
AWAKE
)
;
mSleep
=
SLEEPING_NOT_OBSERVED
;
}
void
SetAwake
(
)
{
MOZ_ASSERT
(
mSleep
!
=
AWAKE
)
;
mSleep
=
AWAKE
;
}
bool
IsSleeping
(
)
{
return
mSleep
!
=
AWAKE
;
}
BaseProfilerThreadId
ThreadId
(
)
const
{
return
mThreadId
;
}
class
ProfilingStack
&
ProfilingStack
(
)
{
return
mProfilingStack
;
}
const
class
ProfilingStack
&
ProfilingStack
(
)
const
{
return
mProfilingStack
;
}
private
:
class
ProfilingStack
mProfilingStack
;
const
BaseProfilerThreadId
mThreadId
;
static
const
int
AWAKE
=
0
;
static
const
int
SLEEPING_NOT_OBSERVED
=
1
;
static
const
int
SLEEPING_OBSERVED
=
2
;
Atomic
<
int
>
mSleep
;
Atomic
<
bool
MemoryOrdering
:
:
Relaxed
>
mIsBeingProfiled
;
}
;
class
RegisteredThread
final
{
public
:
RegisteredThread
(
ThreadInfo
*
aInfo
void
*
aStackTop
)
;
~
RegisteredThread
(
)
;
class
RacyRegisteredThread
&
RacyRegisteredThread
(
)
{
return
mRacyRegisteredThread
;
}
const
class
RacyRegisteredThread
&
RacyRegisteredThread
(
)
const
{
return
mRacyRegisteredThread
;
}
PlatformData
*
GetPlatformData
(
)
const
{
return
mPlatformData
.
get
(
)
;
}
const
void
*
StackTop
(
)
const
{
return
mStackTop
;
}
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
const
RefPtr
<
ThreadInfo
>
Info
(
)
const
{
return
mThreadInfo
;
}
private
:
class
RacyRegisteredThread
mRacyRegisteredThread
;
const
UniquePlatformData
mPlatformData
;
const
void
*
mStackTop
;
const
RefPtr
<
ThreadInfo
>
mThreadInfo
;
}
;
}
}
#
endif
