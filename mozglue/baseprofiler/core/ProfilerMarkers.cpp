#
include
"
mozilla
/
BaseProfilerMarkers
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
<
limits
>
namespace
mozilla
{
namespace
base_profiler_markers_detail
{
using
DeserializerTagAtomic
=
unsigned
;
static
Atomic
<
DeserializerTagAtomic
MemoryOrdering
:
:
Relaxed
>
sDeserializerCount
{
0
}
;
static
constexpr
Streaming
:
:
DeserializerTag
DeserializerMax
=
255
;
static_assert
(
DeserializerMax
<
=
std
:
:
numeric_limits
<
Streaming
:
:
DeserializerTag
>
:
:
max
(
)
"
The
maximum
number
of
deserializers
must
fit
in
the
DeserializerTag
type
"
)
;
static
Streaming
:
:
Deserializer
sDeserializers1Based
[
DeserializerMax
]
;
Streaming
:
:
DeserializerTag
Streaming
:
:
TagForDeserializer
(
Streaming
:
:
Deserializer
aDeserializer
)
{
MOZ_RELEASE_ASSERT
(
!
!
aDeserializer
)
;
DeserializerTagAtomic
tag
=
+
+
sDeserializerCount
;
MOZ_RELEASE_ASSERT
(
tag
<
=
DeserializerMax
"
Too
many
deserializers
consider
increasing
DeserializerMax
.
"
"
Or
is
a
deserializer
stored
again
and
again
?
"
)
;
sDeserializers1Based
[
tag
-
1
]
=
aDeserializer
;
return
static_cast
<
DeserializerTag
>
(
tag
)
;
}
Streaming
:
:
Deserializer
Streaming
:
:
DeserializerForTag
(
Streaming
:
:
DeserializerTag
aTag
)
{
MOZ_RELEASE_ASSERT
(
aTag
>
0
)
;
MOZ_RELEASE_ASSERT
(
aTag
<
=
DeserializerMax
)
;
MOZ_RELEASE_ASSERT
(
aTag
<
=
sDeserializerCount
)
;
return
sDeserializers1Based
[
aTag
-
1
]
;
}
}
}
