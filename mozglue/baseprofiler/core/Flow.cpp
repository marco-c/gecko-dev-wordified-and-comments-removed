#
include
<
stdint
.
h
>
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
else
#
include
<
time
.
h
>
#
include
<
unistd
.
h
>
#
endif
#
include
"
mozilla
/
Flow
.
h
"
struct
Hasher
{
static
const
uint64_t
kOffsetBasis
=
14695981039346656037ULL
;
static
const
uint64_t
kPrime
=
1099511628211ULL
;
uint64_t
hash
=
kOffsetBasis
;
void
Update
(
const
void
*
data
size_t
size
)
{
const
uint8_t
*
ptr
=
static_cast
<
const
uint8_t
*
>
(
data
)
;
for
(
size_t
i
=
0
;
i
<
size
;
+
+
i
)
{
hash
^
=
ptr
[
i
]
;
hash
*
=
kPrime
;
}
}
void
Update
(
uint64_t
value
)
{
Update
(
&
value
sizeof
(
value
)
)
;
}
void
Update
(
uint32_t
value
)
{
Update
(
&
value
sizeof
(
value
)
)
;
}
uint64_t
Get
(
)
const
{
return
hash
;
}
}
;
static
uint64_t
CurrentTime
(
)
{
#
ifdef
XP_WIN
return
GetTickCount64
(
)
;
#
else
timespec
ts
;
clock_gettime
(
CLOCK_MONOTONIC
&
ts
)
;
return
ts
.
tv_sec
*
1000
+
ts
.
tv_nsec
/
1000000
;
#
endif
}
static
uint64_t
CurrentPID
(
)
{
#
ifdef
XP_WIN
return
GetCurrentProcessId
(
)
;
#
else
return
getpid
(
)
;
#
endif
}
uint64_t
ComputeProcessUUID
(
)
{
auto
pid
=
CurrentPID
(
)
;
auto
time
=
CurrentTime
(
)
;
Hasher
hasher
;
hasher
.
Update
(
pid
)
;
hasher
.
Update
(
time
)
;
return
hasher
.
Get
(
)
;
}
MFBT_DATA
uint64_t
gProcessUUID
;
MFBT_API
void
Flow
:
:
Init
(
)
{
gProcessUUID
=
ComputeProcessUUID
(
)
;
}
