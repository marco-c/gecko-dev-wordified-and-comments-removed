#
ifndef
TOOLS_PLATFORM_H_
#
define
TOOLS_PLATFORM_H_
#
include
"
PlatformMacros
.
h
"
#
include
"
BaseProfiler
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
<
functional
>
#
include
<
stdint
.
h
>
#
include
<
string
>
bool
BaseProfilerLogTest
(
int
aLevelToTest
)
;
#
define
LOG_TEST
BaseProfilerLogTest
(
3
)
#
define
LOG
(
arg
.
.
.
)
\
do
{
\
if
(
LOG_TEST
)
{
\
printf
(
"
[
I
%
d
/
%
d
]
"
arg
"
\
n
"
profiler_current_process_id
(
)
\
profiler_current_thread_id
(
)
#
#
__VA_ARGS__
)
;
\
}
\
}
while
(
0
)
#
define
DEBUG_LOG_TEST
BaseProfilerLogTest
(
4
)
#
define
DEBUG_LOG
(
arg
.
.
.
)
\
do
{
\
if
(
DEBUG_LOG_TEST
)
{
\
printf
(
"
[
D
%
d
/
%
d
]
"
arg
"
\
n
"
profiler_current_process_id
(
)
\
profiler_current_thread_id
(
)
#
#
__VA_ARGS__
)
;
\
}
\
}
while
(
0
)
#
define
VERBOSE_LOG_TEST
BaseProfilerLogTest
(
5
)
#
define
VERBOSE_LOG
(
arg
.
.
.
)
\
do
{
\
if
(
VERBOSE_LOG_TEST
)
{
\
printf
(
"
[
V
%
d
/
%
d
]
"
arg
"
\
n
"
profiler_current_process_id
(
)
\
profiler_current_thread_id
(
)
#
#
__VA_ARGS__
)
;
\
}
\
}
while
(
0
)
namespace
mozilla
{
class
JSONWriter
;
namespace
baseprofiler
{
typedef
uint8_t
*
Address
;
class
PlatformData
;
struct
PlatformDataDestructor
{
void
operator
(
)
(
PlatformData
*
)
;
}
;
typedef
UniquePtr
<
PlatformData
PlatformDataDestructor
>
UniquePlatformData
;
UniquePlatformData
AllocPlatformData
(
int
aThreadId
)
;
uint32_t
ParseFeaturesFromStringArray
(
const
char
*
*
aFeatures
uint32_t
aFeatureCount
bool
aIsStartup
=
false
)
;
void
profiler_get_profile_json_into_lazily_allocated_buffer
(
const
std
:
:
function
<
char
*
(
size_t
)
>
&
aAllocator
double
aSinceTime
bool
aIsShuttingDown
)
;
enum
class
JSInstrumentationFlags
{
StackSampling
=
0x1
TrackOptimizations
=
0x2
TraceLogging
=
0x4
Allocations
=
0x8
}
;
void
profiler_received_exit_profile
(
const
std
:
:
string
&
aExitProfile
)
;
Vector
<
std
:
:
string
>
profiler_move_exit_profiles
(
)
;
}
}
#
endif
