#
include
"
ProfiledThreadData
.
h
"
#
include
"
BaseProfiler
.
h
"
#
include
"
ProfileBuffer
.
h
"
#
include
"
mozilla
/
BaseProfileJSONWriter
.
h
"
#
if
defined
(
GP_OS_darwin
)
#
include
<
pthread
.
h
>
#
endif
namespace
mozilla
{
namespace
baseprofiler
{
ProfiledThreadData
:
:
ProfiledThreadData
(
ThreadInfo
*
aThreadInfo
)
:
mThreadInfo
(
aThreadInfo
)
{
}
ProfiledThreadData
:
:
~
ProfiledThreadData
(
)
{
}
void
ProfiledThreadData
:
:
StreamJSON
(
const
ProfileBuffer
&
aBuffer
SpliceableJSONWriter
&
aWriter
const
std
:
:
string
&
aProcessName
const
std
:
:
string
&
aETLDplus1
const
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
{
UniqueStacks
uniqueStacks
;
aWriter
.
SetUniqueStrings
(
uniqueStacks
.
UniqueStrings
(
)
)
;
aWriter
.
Start
(
)
;
{
StreamSamplesAndMarkers
(
mThreadInfo
-
>
Name
(
)
mThreadInfo
-
>
ThreadId
(
)
aBuffer
aWriter
aProcessName
aETLDplus1
aProcessStartTime
mThreadInfo
-
>
RegisterTime
(
)
mUnregisterTime
aSinceTime
uniqueStacks
)
;
aWriter
.
StartObjectProperty
(
"
stackTable
"
)
;
{
{
JSONSchemaWriter
schema
(
aWriter
)
;
schema
.
WriteField
(
"
prefix
"
)
;
schema
.
WriteField
(
"
frame
"
)
;
}
aWriter
.
StartArrayProperty
(
"
data
"
)
;
{
uniqueStacks
.
SpliceStackTableElements
(
aWriter
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
EndObject
(
)
;
aWriter
.
StartObjectProperty
(
"
frameTable
"
)
;
{
{
JSONSchemaWriter
schema
(
aWriter
)
;
schema
.
WriteField
(
"
location
"
)
;
schema
.
WriteField
(
"
relevantForJS
"
)
;
schema
.
WriteField
(
"
innerWindowID
"
)
;
schema
.
WriteField
(
"
implementation
"
)
;
schema
.
WriteField
(
"
line
"
)
;
schema
.
WriteField
(
"
column
"
)
;
schema
.
WriteField
(
"
category
"
)
;
schema
.
WriteField
(
"
subcategory
"
)
;
}
aWriter
.
StartArrayProperty
(
"
data
"
)
;
{
uniqueStacks
.
SpliceFrameTableElements
(
aWriter
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
EndObject
(
)
;
aWriter
.
StartArrayProperty
(
"
stringTable
"
)
;
{
std
:
:
move
(
uniqueStacks
.
UniqueStrings
(
)
)
.
SpliceStringTableElements
(
aWriter
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
End
(
)
;
aWriter
.
ResetUniqueStrings
(
)
;
}
BaseProfilerThreadId
StreamSamplesAndMarkers
(
const
char
*
aName
BaseProfilerThreadId
aThreadId
const
ProfileBuffer
&
aBuffer
SpliceableJSONWriter
&
aWriter
const
std
:
:
string
&
aProcessName
const
std
:
:
string
&
aETLDplus1
const
TimeStamp
&
aProcessStartTime
const
TimeStamp
&
aRegisterTime
const
TimeStamp
&
aUnregisterTime
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
{
BaseProfilerThreadId
processedThreadId
;
aWriter
.
StringProperty
(
"
processType
"
"
(
unknown
)
"
)
;
{
std
:
:
string
name
=
aName
;
name
+
=
"
(
pre
-
xul
)
"
;
aWriter
.
StringProperty
(
"
name
"
name
)
;
}
if
(
!
aProcessName
.
empty
(
)
)
{
aWriter
.
StringProperty
(
"
processName
"
aProcessName
)
;
}
if
(
!
aETLDplus1
.
empty
(
)
)
{
aWriter
.
StringProperty
(
"
eTLD
+
1
"
aETLDplus1
)
;
}
if
(
aRegisterTime
)
{
aWriter
.
DoubleProperty
(
"
registerTime
"
(
aRegisterTime
-
aProcessStartTime
)
.
ToMilliseconds
(
)
)
;
}
else
{
aWriter
.
NullProperty
(
"
registerTime
"
)
;
}
if
(
aUnregisterTime
)
{
aWriter
.
DoubleProperty
(
"
unregisterTime
"
(
aUnregisterTime
-
aProcessStartTime
)
.
ToMilliseconds
(
)
)
;
}
else
{
aWriter
.
NullProperty
(
"
unregisterTime
"
)
;
}
aWriter
.
StartObjectProperty
(
"
samples
"
)
;
{
{
JSONSchemaWriter
schema
(
aWriter
)
;
schema
.
WriteField
(
"
stack
"
)
;
schema
.
WriteField
(
"
time
"
)
;
schema
.
WriteField
(
"
eventDelay
"
)
;
}
aWriter
.
StartArrayProperty
(
"
data
"
)
;
{
processedThreadId
=
aBuffer
.
StreamSamplesToJSON
(
aWriter
aThreadId
aSinceTime
aUniqueStacks
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
EndObject
(
)
;
aWriter
.
StartObjectProperty
(
"
markers
"
)
;
{
{
JSONSchemaWriter
schema
(
aWriter
)
;
schema
.
WriteField
(
"
name
"
)
;
schema
.
WriteField
(
"
startTime
"
)
;
schema
.
WriteField
(
"
endTime
"
)
;
schema
.
WriteField
(
"
phase
"
)
;
schema
.
WriteField
(
"
category
"
)
;
schema
.
WriteField
(
"
data
"
)
;
}
aWriter
.
StartArrayProperty
(
"
data
"
)
;
{
aBuffer
.
StreamMarkersToJSON
(
aWriter
aThreadId
aProcessStartTime
aSinceTime
aUniqueStacks
)
;
}
aWriter
.
EndArray
(
)
;
}
aWriter
.
EndObject
(
)
;
aWriter
.
IntProperty
(
"
pid
"
static_cast
<
int64_t
>
(
profiler_current_process_id
(
)
.
ToNumber
(
)
)
)
;
aWriter
.
IntProperty
(
"
tid
"
static_cast
<
int64_t
>
(
aThreadId
.
IsSpecified
(
)
?
aThreadId
.
ToNumber
(
)
:
processedThreadId
.
ToNumber
(
)
)
)
;
return
processedThreadId
;
}
}
}
