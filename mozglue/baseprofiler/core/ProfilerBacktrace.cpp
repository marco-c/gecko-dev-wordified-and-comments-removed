#
include
"
BaseProfiler
.
h
"
#
ifdef
MOZ_BASE_PROFILER
#
include
"
ProfilerBacktrace
.
h
"
#
include
"
ProfileBuffer
.
h
"
#
include
"
ProfiledThreadData
.
h
"
#
include
"
BaseProfileJSONWriter
.
h
"
#
include
"
ThreadInfo
.
h
"
namespace
mozilla
{
namespace
baseprofiler
{
ProfilerBacktrace
:
:
ProfilerBacktrace
(
const
char
*
aName
int
aThreadId
UniquePtr
<
BlocksRingBuffer
>
aBlocksRingBuffer
UniquePtr
<
ProfileBuffer
>
aProfileBuffer
)
:
mName
(
strdup
(
aName
)
)
mThreadId
(
aThreadId
)
mBlocksRingBuffer
(
std
:
:
move
(
aBlocksRingBuffer
)
)
mProfileBuffer
(
std
:
:
move
(
aProfileBuffer
)
)
{
MOZ_ASSERT
(
!
!
mBlocksRingBuffer
"
ProfilerBacktrace
only
takes
a
non
-
null
UniquePtr
<
BlocksRingBuffer
>
"
)
;
MOZ_ASSERT
(
!
!
mProfileBuffer
"
ProfilerBacktrace
only
takes
a
non
-
null
UniquePtr
<
ProfileBuffer
>
"
)
;
MOZ_ASSERT
(
!
mBlocksRingBuffer
-
>
IsThreadSafe
(
)
"
ProfilerBacktrace
only
takes
a
non
-
thread
-
safe
BlocksRingBuffer
"
)
;
}
ProfilerBacktrace
:
:
~
ProfilerBacktrace
(
)
{
}
void
ProfilerBacktrace
:
:
StreamJSON
(
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
{
StreamSamplesAndMarkers
(
mName
.
get
(
)
mThreadId
*
mProfileBuffer
aWriter
"
"
aProcessStartTime
TimeStamp
(
)
TimeStamp
(
)
0
aUniqueStacks
)
;
}
}
template
<
typename
Destructor
>
UniquePtr
<
baseprofiler
:
:
ProfilerBacktrace
Destructor
>
ProfileBufferEntryReader
:
:
Deserializer
<
UniquePtr
<
baseprofiler
:
:
ProfilerBacktrace
Destructor
>
>
:
:
Read
(
ProfileBufferEntryReader
&
aER
)
{
auto
blocksRingBuffer
=
aER
.
ReadObject
<
UniquePtr
<
BlocksRingBuffer
>
>
(
)
;
if
(
!
blocksRingBuffer
)
{
return
nullptr
;
}
MOZ_ASSERT
(
!
blocksRingBuffer
-
>
IsThreadSafe
(
)
"
ProfilerBacktrace
only
stores
non
-
thread
-
safe
BlocksRingBuffers
"
)
;
int
threadId
=
aER
.
ReadObject
<
int
>
(
)
;
std
:
:
string
name
=
aER
.
ReadObject
<
std
:
:
string
>
(
)
;
auto
profileBuffer
=
MakeUnique
<
baseprofiler
:
:
ProfileBuffer
>
(
*
blocksRingBuffer
)
;
return
UniquePtr
<
baseprofiler
:
:
ProfilerBacktrace
Destructor
>
{
new
baseprofiler
:
:
ProfilerBacktrace
(
name
.
c_str
(
)
threadId
std
:
:
move
(
blocksRingBuffer
)
std
:
:
move
(
profileBuffer
)
)
}
;
}
;
}
#
endif
