#
include
"
ProfilerBacktrace
.
h
"
#
include
"
BaseProfiler
.
h
"
#
include
"
ProfileBuffer
.
h
"
#
include
"
ProfiledThreadData
.
h
"
#
include
"
ThreadInfo
.
h
"
#
include
"
mozilla
/
BaseProfileJSONWriter
.
h
"
namespace
mozilla
{
namespace
baseprofiler
{
ProfilerBacktrace
:
:
ProfilerBacktrace
(
const
char
*
aName
int
aThreadId
UniquePtr
<
ProfileChunkedBuffer
>
aProfileChunkedBufferStorage
UniquePtr
<
ProfileBuffer
>
aProfileBufferStorageOrNull
)
:
mName
(
aName
)
mThreadId
(
aThreadId
)
mOptionalProfileChunkedBufferStorage
(
std
:
:
move
(
aProfileChunkedBufferStorage
)
)
mProfileChunkedBuffer
(
mOptionalProfileChunkedBufferStorage
.
get
(
)
)
mOptionalProfileBufferStorage
(
std
:
:
move
(
aProfileBufferStorageOrNull
)
)
mProfileBuffer
(
mOptionalProfileBufferStorage
.
get
(
)
)
{
if
(
mProfileBuffer
)
{
MOZ_RELEASE_ASSERT
(
mProfileChunkedBuffer
"
If
we
take
ownership
of
a
ProfileBuffer
we
must
also
"
"
receive
ownership
of
a
ProfileChunkedBuffer
"
)
;
MOZ_RELEASE_ASSERT
(
mProfileChunkedBuffer
=
=
&
mProfileBuffer
-
>
UnderlyingChunkedBuffer
(
)
"
If
we
take
ownership
of
a
ProfileBuffer
we
must
also
receive
"
"
ownership
of
its
ProfileChunkedBuffer
"
)
;
}
MOZ_ASSERT
(
!
mProfileChunkedBuffer
|
|
!
mProfileChunkedBuffer
-
>
IsThreadSafe
(
)
"
ProfilerBacktrace
only
takes
a
non
-
thread
-
safe
ProfileChunkedBuffer
"
)
;
}
ProfilerBacktrace
:
:
ProfilerBacktrace
(
const
char
*
aName
int
aThreadId
ProfileChunkedBuffer
*
aExternalProfileChunkedBufferOrNull
ProfileBuffer
*
aExternalProfileBufferOrNull
)
:
mName
(
aName
)
mThreadId
(
aThreadId
)
mProfileChunkedBuffer
(
aExternalProfileChunkedBufferOrNull
)
mProfileBuffer
(
aExternalProfileBufferOrNull
)
{
if
(
!
mProfileChunkedBuffer
)
{
if
(
mProfileBuffer
)
{
mProfileChunkedBuffer
=
&
mProfileBuffer
-
>
UnderlyingChunkedBuffer
(
)
;
MOZ_ASSERT
(
!
mProfileChunkedBuffer
-
>
IsThreadSafe
(
)
"
ProfilerBacktrace
only
takes
a
non
-
thread
-
safe
"
"
ProfileChunkedBuffer
"
)
;
}
}
else
{
if
(
mProfileBuffer
)
{
MOZ_RELEASE_ASSERT
(
mProfileChunkedBuffer
=
=
&
mProfileBuffer
-
>
UnderlyingChunkedBuffer
(
)
"
If
we
reference
both
ProfileChunkedBuffer
and
ProfileBuffer
they
"
"
must
already
be
connected
"
)
;
}
MOZ_ASSERT
(
!
mProfileChunkedBuffer
-
>
IsThreadSafe
(
)
"
ProfilerBacktrace
only
takes
a
non
-
thread
-
safe
"
"
ProfileChunkedBuffer
"
)
;
}
}
ProfilerBacktrace
:
:
~
ProfilerBacktrace
(
)
{
}
void
ProfilerBacktrace
:
:
StreamJSON
(
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
{
if
(
mProfileBuffer
)
{
StreamSamplesAndMarkers
(
mName
.
c_str
(
)
mThreadId
*
mProfileBuffer
aWriter
"
"
"
"
aProcessStartTime
TimeStamp
(
)
TimeStamp
(
)
0
aUniqueStacks
)
;
}
else
if
(
mProfileChunkedBuffer
)
{
ProfileBuffer
profileBuffer
(
*
mProfileChunkedBuffer
)
;
StreamSamplesAndMarkers
(
mName
.
c_str
(
)
mThreadId
profileBuffer
aWriter
"
"
"
"
aProcessStartTime
TimeStamp
(
)
TimeStamp
(
)
0
aUniqueStacks
)
;
}
}
}
template
<
typename
Destructor
>
UniquePtr
<
baseprofiler
:
:
ProfilerBacktrace
Destructor
>
ProfileBufferEntryReader
:
:
Deserializer
<
UniquePtr
<
baseprofiler
:
:
ProfilerBacktrace
Destructor
>
>
:
:
Read
(
ProfileBufferEntryReader
&
aER
)
{
auto
profileChunkedBuffer
=
aER
.
ReadObject
<
UniquePtr
<
ProfileChunkedBuffer
>
>
(
)
;
if
(
!
profileChunkedBuffer
)
{
return
nullptr
;
}
MOZ_ASSERT
(
!
profileChunkedBuffer
-
>
IsThreadSafe
(
)
"
ProfilerBacktrace
only
stores
non
-
thread
-
safe
ProfileChunkedBuffers
"
)
;
int
threadId
=
aER
.
ReadObject
<
int
>
(
)
;
std
:
:
string
name
=
aER
.
ReadObject
<
std
:
:
string
>
(
)
;
return
UniquePtr
<
baseprofiler
:
:
ProfilerBacktrace
Destructor
>
{
new
baseprofiler
:
:
ProfilerBacktrace
(
name
.
c_str
(
)
threadId
std
:
:
move
(
profileChunkedBuffer
)
)
}
;
}
;
}
