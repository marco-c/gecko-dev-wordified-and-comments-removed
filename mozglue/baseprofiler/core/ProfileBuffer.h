#
ifndef
MOZ_PROFILE_BUFFER_H
#
define
MOZ_PROFILE_BUFFER_H
#
include
"
ProfileBufferEntry
.
h
"
#
include
"
ProfilerMarker
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
namespace
mozilla
{
namespace
baseprofiler
{
class
ProfileBuffer
final
{
public
:
explicit
ProfileBuffer
(
uint32_t
aCapacity
)
;
~
ProfileBuffer
(
)
;
void
AddEntry
(
const
ProfileBufferEntry
&
aEntry
)
;
uint64_t
AddThreadIdEntry
(
int
aThreadId
)
;
void
CollectCodeLocation
(
const
char
*
aLabel
const
char
*
aStr
uint32_t
aFrameFlags
const
Maybe
<
uint32_t
>
&
aLineNumber
const
Maybe
<
uint32_t
>
&
aColumnNumber
const
Maybe
<
ProfilingCategoryPair
>
&
aCategoryPair
)
;
static
const
size_t
kMaxFrameKeyLength
=
512
;
void
StreamSamplesToJSON
(
SpliceableJSONWriter
&
aWriter
int
aThreadId
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
const
;
void
StreamMarkersToJSON
(
SpliceableJSONWriter
&
aWriter
int
aThreadId
const
TimeStamp
&
aProcessStartTime
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
const
;
void
StreamPausedRangesToJSON
(
SpliceableJSONWriter
&
aWriter
double
aSinceTime
)
const
;
void
StreamProfilerOverheadToJSON
(
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
const
;
void
StreamCountersToJSON
(
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
const
;
void
StreamMemoryToJSON
(
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
const
;
bool
DuplicateLastSample
(
int
aThreadId
const
TimeStamp
&
aProcessStartTime
Maybe
<
uint64_t
>
&
aLastSample
)
;
void
DiscardSamplesBeforeTime
(
double
aTime
)
;
void
AddStoredMarker
(
ProfilerMarker
*
aStoredMarker
)
;
void
DeleteExpiredStoredMarkers
(
)
;
ProfileBufferEntry
&
GetEntry
(
uint64_t
aPosition
)
const
{
return
mEntries
[
aPosition
&
mEntryIndexMask
]
;
}
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
UniquePtr
<
ProfileBufferEntry
[
]
>
mEntries
;
uint32_t
mEntryIndexMask
;
public
:
uint64_t
mRangeStart
;
uint64_t
mRangeEnd
;
uint32_t
mCapacity
;
ProfilerMarkerLinkedList
mStoredMarkers
;
}
;
class
ProfileBufferCollector
final
:
public
ProfilerStackCollector
{
public
:
ProfileBufferCollector
(
ProfileBuffer
&
aBuf
uint32_t
aFeatures
uint64_t
aSamplePos
)
:
mBuf
(
aBuf
)
mSamplePositionInBuffer
(
aSamplePos
)
mFeatures
(
aFeatures
)
{
}
Maybe
<
uint64_t
>
SamplePositionInBuffer
(
)
override
{
return
Some
(
mSamplePositionInBuffer
)
;
}
Maybe
<
uint64_t
>
BufferRangeStart
(
)
override
{
return
Some
(
mBuf
.
mRangeStart
)
;
}
virtual
void
CollectNativeLeafAddr
(
void
*
aAddr
)
override
;
virtual
void
CollectProfilingStackFrame
(
const
ProfilingStackFrame
&
aFrame
)
override
;
private
:
ProfileBuffer
&
mBuf
;
uint64_t
mSamplePositionInBuffer
;
uint32_t
mFeatures
;
}
;
}
}
#
endif
