#
ifndef
MOZ_PROFILE_BUFFER_H
#
define
MOZ_PROFILE_BUFFER_H
#
include
"
ProfileBufferEntry
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PowerOfTwo
.
h
"
#
include
"
mozilla
/
ProfileBufferChunkManagerSingle
.
h
"
#
include
"
mozilla
/
ProfileChunkedBuffer
.
h
"
namespace
mozilla
{
namespace
baseprofiler
{
class
ProfileBuffer
final
{
public
:
explicit
ProfileBuffer
(
ProfileChunkedBuffer
&
aBuffer
)
;
~
ProfileBuffer
(
)
;
bool
IsThreadSafe
(
)
const
{
return
mEntries
.
IsThreadSafe
(
)
;
}
uint64_t
AddEntry
(
const
ProfileBufferEntry
&
aEntry
)
;
uint64_t
AddThreadIdEntry
(
int
aThreadId
)
;
void
CollectCodeLocation
(
const
char
*
aLabel
const
char
*
aStr
uint32_t
aFrameFlags
uint64_t
aInnerWindowID
const
Maybe
<
uint32_t
>
&
aLineNumber
const
Maybe
<
uint32_t
>
&
aColumnNumber
const
Maybe
<
ProfilingCategoryPair
>
&
aCategoryPair
)
;
static
const
size_t
kMaxFrameKeyLength
=
512
;
void
StreamSamplesToJSON
(
SpliceableJSONWriter
&
aWriter
int
aThreadId
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
const
;
void
StreamMarkersToJSON
(
SpliceableJSONWriter
&
aWriter
int
aThreadId
const
TimeStamp
&
aProcessStartTime
double
aSinceTime
UniqueStacks
&
aUniqueStacks
)
const
;
void
StreamPausedRangesToJSON
(
SpliceableJSONWriter
&
aWriter
double
aSinceTime
)
const
;
void
StreamProfilerOverheadToJSON
(
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
const
;
void
StreamCountersToJSON
(
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
double
aSinceTime
)
const
;
bool
DuplicateLastSample
(
int
aThreadId
const
TimeStamp
&
aProcessStartTime
Maybe
<
uint64_t
>
&
aLastSample
)
;
void
DiscardSamplesBeforeTime
(
double
aTime
)
;
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
void
CollectOverheadStats
(
TimeDuration
aSamplingTime
TimeDuration
aLocking
TimeDuration
aCleaning
TimeDuration
aCounters
TimeDuration
aThreads
)
;
ProfilerBufferInfo
GetProfilerBufferInfo
(
)
const
;
private
:
static
ProfileBufferBlockIndex
AddEntry
(
ProfileChunkedBuffer
&
aProfileChunkedBuffer
const
ProfileBufferEntry
&
aEntry
)
;
static
ProfileBufferBlockIndex
AddThreadIdEntry
(
ProfileChunkedBuffer
&
aProfileChunkedBuffer
int
aThreadId
)
;
ProfileChunkedBuffer
&
mEntries
;
public
:
uint64_t
BufferRangeStart
(
)
const
{
return
mEntries
.
GetState
(
)
.
mRangeStart
;
}
uint64_t
BufferRangeEnd
(
)
const
{
return
mEntries
.
GetState
(
)
.
mRangeEnd
;
}
private
:
static
constexpr
auto
WorkerBufferBytes
=
MakePowerOfTwo32
<
65536
>
(
)
;
mutable
ProfileBufferChunkManagerSingle
mWorkerChunkManager
{
ProfileBufferChunk
:
:
Create
(
ProfileBufferChunk
:
:
SizeofChunkMetadata
(
)
+
WorkerBufferBytes
.
Value
(
)
)
}
;
double
mFirstSamplingTimeNs
=
0
.
0
;
double
mLastSamplingTimeNs
=
0
.
0
;
ProfilerStats
mIntervalsNs
;
ProfilerStats
mOverheadsNs
;
ProfilerStats
mLockingsNs
;
ProfilerStats
mCleaningsNs
;
ProfilerStats
mCountersNs
;
ProfilerStats
mThreadsNs
;
}
;
class
ProfileBufferCollector
final
:
public
ProfilerStackCollector
{
public
:
ProfileBufferCollector
(
ProfileBuffer
&
aBuf
uint32_t
aFeatures
uint64_t
aSamplePos
)
:
mBuf
(
aBuf
)
mSamplePositionInBuffer
(
aSamplePos
)
mFeatures
(
aFeatures
)
{
}
Maybe
<
uint64_t
>
SamplePositionInBuffer
(
)
override
{
return
Some
(
mSamplePositionInBuffer
)
;
}
Maybe
<
uint64_t
>
BufferRangeStart
(
)
override
{
return
Some
(
mBuf
.
BufferRangeStart
(
)
)
;
}
virtual
void
CollectNativeLeafAddr
(
void
*
aAddr
)
override
;
virtual
void
CollectProfilingStackFrame
(
const
ProfilingStackFrame
&
aFrame
)
override
;
private
:
ProfileBuffer
&
mBuf
;
uint64_t
mSamplePositionInBuffer
;
uint32_t
mFeatures
;
}
;
}
}
#
endif
