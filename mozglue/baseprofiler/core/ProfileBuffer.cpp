#
include
"
BaseProfiler
.
h
"
#
ifdef
MOZ_BASE_PROFILER
#
include
"
ProfileBuffer
.
h
"
#
include
"
ProfilerMarker
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
namespace
mozilla
{
namespace
baseprofiler
{
ProfileBuffer
:
:
ProfileBuffer
(
PowerOfTwo32
aCapacity
)
:
mEntries
(
MakeUnique
<
ProfileBufferEntry
[
]
>
(
aCapacity
.
Value
(
)
)
)
mEntryIndexMask
(
aCapacity
.
Mask
(
)
)
mRangeStart
(
0
)
mRangeEnd
(
0
)
{
}
ProfileBuffer
:
:
~
ProfileBuffer
(
)
{
while
(
mStoredMarkers
.
peek
(
)
)
{
delete
mStoredMarkers
.
popHead
(
)
;
}
}
void
ProfileBuffer
:
:
AddEntry
(
const
ProfileBufferEntry
&
aEntry
)
{
GetEntry
(
mRangeEnd
+
+
)
=
aEntry
;
if
(
mRangeEnd
-
mRangeStart
>
mEntryIndexMask
.
MaskValue
(
)
+
1
)
{
mRangeStart
+
+
;
}
}
uint64_t
ProfileBuffer
:
:
AddThreadIdEntry
(
int
aThreadId
)
{
uint64_t
pos
=
mRangeEnd
;
AddEntry
(
ProfileBufferEntry
:
:
ThreadId
(
aThreadId
)
)
;
return
pos
;
}
void
ProfileBuffer
:
:
AddStoredMarker
(
ProfilerMarker
*
aStoredMarker
)
{
aStoredMarker
-
>
SetPositionInBuffer
(
mRangeEnd
)
;
mStoredMarkers
.
insert
(
aStoredMarker
)
;
}
void
ProfileBuffer
:
:
CollectCodeLocation
(
const
char
*
aLabel
const
char
*
aStr
uint32_t
aFrameFlags
const
Maybe
<
uint32_t
>
&
aLineNumber
const
Maybe
<
uint32_t
>
&
aColumnNumber
const
Maybe
<
ProfilingCategoryPair
>
&
aCategoryPair
)
{
AddEntry
(
ProfileBufferEntry
:
:
Label
(
aLabel
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
FrameFlags
(
uint64_t
(
aFrameFlags
)
)
)
;
if
(
aStr
)
{
size_t
strLen
=
strlen
(
aStr
)
+
1
;
for
(
size_t
j
=
0
;
j
<
strLen
;
)
{
char
chars
[
ProfileBufferEntry
:
:
kNumChars
]
;
size_t
len
=
ProfileBufferEntry
:
:
kNumChars
;
if
(
j
+
len
>
=
strLen
)
{
len
=
strLen
-
j
;
}
memcpy
(
chars
&
aStr
[
j
]
len
)
;
j
+
=
ProfileBufferEntry
:
:
kNumChars
;
AddEntry
(
ProfileBufferEntry
:
:
DynamicStringFragment
(
chars
)
)
;
}
}
if
(
aLineNumber
)
{
AddEntry
(
ProfileBufferEntry
:
:
LineNumber
(
*
aLineNumber
)
)
;
}
if
(
aColumnNumber
)
{
AddEntry
(
ProfileBufferEntry
:
:
ColumnNumber
(
*
aColumnNumber
)
)
;
}
if
(
aCategoryPair
.
isSome
(
)
)
{
AddEntry
(
ProfileBufferEntry
:
:
CategoryPair
(
int
(
*
aCategoryPair
)
)
)
;
}
}
void
ProfileBuffer
:
:
DeleteExpiredStoredMarkers
(
)
{
AUTO_PROFILER_STATS
(
base_ProfileBuffer_DeleteExpiredStoredMarkers
)
;
while
(
mStoredMarkers
.
peek
(
)
&
&
mStoredMarkers
.
peek
(
)
-
>
HasExpired
(
mRangeStart
)
)
{
delete
mStoredMarkers
.
popHead
(
)
;
}
}
size_t
ProfileBuffer
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
aMallocSizeOf
(
this
)
;
n
+
=
aMallocSizeOf
(
mEntries
.
get
(
)
)
;
return
n
;
}
void
ProfileBuffer
:
:
CollectOverheadStats
(
TimeDuration
aSamplingTime
TimeDuration
aLocking
TimeDuration
aCleaning
TimeDuration
aCounters
TimeDuration
aThreads
)
{
double
timeNs
=
aSamplingTime
.
ToMilliseconds
(
)
*
1000
.
0
;
if
(
mFirstSamplingTimeNs
=
=
0
.
0
)
{
mFirstSamplingTimeNs
=
timeNs
;
}
else
{
mIntervalsNs
.
Count
(
timeNs
-
mLastSamplingTimeNs
)
;
}
mLastSamplingTimeNs
=
timeNs
;
double
lockingNs
=
aLocking
.
ToMilliseconds
(
)
*
1000
.
0
;
double
cleaningNs
=
aCleaning
.
ToMilliseconds
(
)
*
1000
.
0
;
double
countersNs
=
aCounters
.
ToMilliseconds
(
)
*
1000
.
0
;
double
threadsNs
=
aThreads
.
ToMilliseconds
(
)
*
1000
.
0
;
mOverheadsNs
.
Count
(
lockingNs
+
cleaningNs
+
countersNs
+
threadsNs
)
;
mLockingsNs
.
Count
(
lockingNs
)
;
mCleaningsNs
.
Count
(
cleaningNs
)
;
mCountersNs
.
Count
(
countersNs
)
;
mThreadsNs
.
Count
(
threadsNs
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadTime
(
timeNs
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadDuration
(
lockingNs
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadDuration
(
cleaningNs
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadDuration
(
countersNs
)
)
;
AddEntry
(
ProfileBufferEntry
:
:
ProfilerOverheadDuration
(
threadsNs
)
)
;
}
ProfilerBufferInfo
ProfileBuffer
:
:
GetProfilerBufferInfo
(
)
const
{
return
{
mRangeStart
mRangeEnd
mEntryIndexMask
.
MaskValue
(
)
+
1
mIntervalsNs
mOverheadsNs
mLockingsNs
mCleaningsNs
mCountersNs
mThreadsNs
}
;
}
void
ProfileBufferCollector
:
:
CollectNativeLeafAddr
(
void
*
aAddr
)
{
mBuf
.
AddEntry
(
ProfileBufferEntry
:
:
NativeLeafAddr
(
aAddr
)
)
;
}
void
ProfileBufferCollector
:
:
CollectProfilingStackFrame
(
const
ProfilingStackFrame
&
aFrame
)
{
MOZ_ASSERT
(
aFrame
.
isLabelFrame
(
)
|
|
(
aFrame
.
isJsFrame
(
)
&
&
!
aFrame
.
isOSRFrame
(
)
)
)
;
const
char
*
label
=
aFrame
.
label
(
)
;
const
char
*
dynamicString
=
aFrame
.
dynamicString
(
)
;
bool
isChromeJSEntry
=
false
;
Maybe
<
uint32_t
>
line
;
Maybe
<
uint32_t
>
column
;
MOZ_ASSERT
(
aFrame
.
isLabelFrame
(
)
)
;
if
(
dynamicString
)
{
if
(
ProfilerFeature
:
:
HasPrivacy
(
mFeatures
)
&
&
!
isChromeJSEntry
)
{
dynamicString
=
"
(
private
)
"
;
}
else
if
(
strlen
(
dynamicString
)
>
=
ProfileBuffer
:
:
kMaxFrameKeyLength
)
{
dynamicString
=
"
(
too
long
)
"
;
}
}
mBuf
.
CollectCodeLocation
(
label
dynamicString
aFrame
.
flags
(
)
line
column
Some
(
aFrame
.
categoryPair
(
)
)
)
;
}
}
}
#
endif
