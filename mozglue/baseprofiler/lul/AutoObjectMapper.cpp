#
include
<
sys
/
mman
.
h
>
#
include
<
unistd
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
sys
/
stat
.
h
>
#
include
<
fcntl
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
BaseProfiler
.
h
"
#
include
"
PlatformMacros
.
h
"
#
include
"
AutoObjectMapper
.
h
"
static
void
failedToMessage
(
void
(
*
aLog
)
(
const
char
*
)
const
char
*
aHowFailed
std
:
:
string
aFileName
)
{
char
buf
[
300
]
;
SprintfLiteral
(
buf
"
AutoObjectMapper
:
:
Map
:
Failed
to
%
s
\
'
%
s
\
'
"
aHowFailed
aFileName
.
c_str
(
)
)
;
buf
[
sizeof
(
buf
)
-
1
]
=
0
;
aLog
(
buf
)
;
}
AutoObjectMapperPOSIX
:
:
AutoObjectMapperPOSIX
(
void
(
*
aLog
)
(
const
char
*
)
)
:
mImage
(
nullptr
)
mSize
(
0
)
mLog
(
aLog
)
mIsMapped
(
false
)
{
}
AutoObjectMapperPOSIX
:
:
~
AutoObjectMapperPOSIX
(
)
{
if
(
!
mIsMapped
)
{
MOZ_ASSERT
(
!
mImage
)
;
MOZ_ASSERT
(
mSize
=
=
0
)
;
return
;
}
MOZ_ASSERT
(
mSize
>
0
)
;
MOZ_ASSERT
(
mImage
)
;
munmap
(
mImage
mSize
)
;
}
bool
AutoObjectMapperPOSIX
:
:
Map
(
void
*
*
start
size_t
*
length
std
:
:
string
fileName
)
{
MOZ_ASSERT
(
!
mIsMapped
)
;
int
fd
=
open
(
fileName
.
c_str
(
)
O_RDONLY
)
;
if
(
fd
=
=
-
1
)
{
failedToMessage
(
mLog
"
open
"
fileName
)
;
return
false
;
}
struct
stat
st
;
int
err
=
fstat
(
fd
&
st
)
;
size_t
sz
=
(
err
=
=
0
)
?
st
.
st_size
:
0
;
if
(
err
!
=
0
|
|
sz
=
=
0
)
{
failedToMessage
(
mLog
"
fstat
"
fileName
)
;
close
(
fd
)
;
return
false
;
}
void
*
image
=
mmap
(
nullptr
sz
PROT_READ
MAP_SHARED
fd
0
)
;
if
(
image
=
=
MAP_FAILED
)
{
failedToMessage
(
mLog
"
mmap
"
fileName
)
;
close
(
fd
)
;
return
false
;
}
close
(
fd
)
;
mIsMapped
=
true
;
mImage
=
*
start
=
image
;
mSize
=
*
length
=
sz
;
return
true
;
}
