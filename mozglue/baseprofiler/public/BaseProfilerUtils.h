#
ifndef
BaseProfilerUtils_h
#
define
BaseProfilerUtils_h
#
include
<
type_traits
>
namespace
mozilla
:
:
baseprofiler
{
class
BaseProfilerProcessId
{
public
:
constexpr
BaseProfilerProcessId
(
)
=
default
;
[
[
nodiscard
]
]
constexpr
bool
IsSpecified
(
)
const
{
return
mProcessId
!
=
scUnspecified
;
}
using
NumberType
=
int
;
[
[
nodiscard
]
]
constexpr
NumberType
ToNumber
(
)
const
{
return
mProcessId
;
}
constexpr
static
BaseProfilerProcessId
FromNumber
(
const
NumberType
&
aProcessId
)
{
return
BaseProfilerProcessId
{
aProcessId
}
;
}
[
[
nodiscard
]
]
constexpr
bool
operator
=
=
(
const
BaseProfilerProcessId
&
aOther
)
const
{
return
mProcessId
=
=
aOther
.
mProcessId
;
}
[
[
nodiscard
]
]
constexpr
bool
operator
!
=
(
const
BaseProfilerProcessId
&
aOther
)
const
{
return
mProcessId
!
=
aOther
.
mProcessId
;
}
private
:
constexpr
explicit
BaseProfilerProcessId
(
const
NumberType
&
aProcessId
)
:
mProcessId
(
aProcessId
)
{
}
static
constexpr
NumberType
scUnspecified
=
0
;
NumberType
mProcessId
=
scUnspecified
;
}
;
static_assert
(
std
:
:
is_trivially_copyable_v
<
BaseProfilerProcessId
>
)
;
static_assert
(
std
:
:
is_copy_constructible_v
<
BaseProfilerProcessId
>
)
;
static_assert
(
std
:
:
is_move_constructible_v
<
BaseProfilerProcessId
>
)
;
static_assert
(
std
:
:
is_copy_assignable_v
<
BaseProfilerProcessId
>
)
;
static_assert
(
std
:
:
is_move_assignable_v
<
BaseProfilerProcessId
>
)
;
class
BaseProfilerThreadId
{
public
:
constexpr
BaseProfilerThreadId
(
)
=
default
;
[
[
nodiscard
]
]
constexpr
bool
IsSpecified
(
)
const
{
return
mThreadId
!
=
scUnspecified
;
}
using
NumberType
=
int
;
[
[
nodiscard
]
]
constexpr
NumberType
ToNumber
(
)
const
{
return
mThreadId
;
}
constexpr
static
BaseProfilerThreadId
FromNumber
(
const
NumberType
&
aThreadId
)
{
return
BaseProfilerThreadId
{
aThreadId
}
;
}
[
[
nodiscard
]
]
constexpr
bool
operator
=
=
(
const
BaseProfilerThreadId
&
aOther
)
const
{
return
mThreadId
=
=
aOther
.
mThreadId
;
}
[
[
nodiscard
]
]
constexpr
bool
operator
!
=
(
const
BaseProfilerThreadId
&
aOther
)
const
{
return
mThreadId
!
=
aOther
.
mThreadId
;
}
private
:
constexpr
explicit
BaseProfilerThreadId
(
const
NumberType
&
aThreadId
)
:
mThreadId
(
aThreadId
)
{
}
static
constexpr
NumberType
scUnspecified
=
0
;
NumberType
mThreadId
=
scUnspecified
;
}
;
static_assert
(
std
:
:
is_trivially_copyable_v
<
BaseProfilerThreadId
>
)
;
static_assert
(
std
:
:
is_copy_constructible_v
<
BaseProfilerThreadId
>
)
;
static_assert
(
std
:
:
is_move_constructible_v
<
BaseProfilerThreadId
>
)
;
static_assert
(
std
:
:
is_copy_assignable_v
<
BaseProfilerThreadId
>
)
;
static_assert
(
std
:
:
is_move_assignable_v
<
BaseProfilerThreadId
>
)
;
}
#
include
"
mozilla
/
Types
.
h
"
namespace
mozilla
:
:
baseprofiler
{
[
[
nodiscard
]
]
MFBT_API
BaseProfilerProcessId
profiler_current_process_id
(
)
;
[
[
nodiscard
]
]
MFBT_API
BaseProfilerThreadId
profiler_current_thread_id
(
)
;
MFBT_API
void
profiler_init_main_thread_id
(
)
;
[
[
nodiscard
]
]
MFBT_API
BaseProfilerThreadId
profiler_main_thread_id
(
)
;
[
[
nodiscard
]
]
MFBT_API
bool
profiler_is_main_thread
(
)
;
}
#
endif
