#
ifndef
BaseProfilerUtils_h
#
define
BaseProfilerUtils_h
#
if
defined
(
XP_WIN
)
namespace
mozilla
:
:
baseprofiler
:
:
detail
{
using
ProcessIdType
=
int
;
using
ThreadIdType
=
unsigned
long
;
}
#
else
#
include
<
unistd
.
h
>
namespace
mozilla
:
:
baseprofiler
:
:
detail
{
using
ProcessIdType
=
decltype
(
getpid
(
)
)
;
}
#
if
defined
(
XP_MACOSX
)
namespace
mozilla
:
:
baseprofiler
:
:
detail
{
using
ThreadIdType
=
uint64_t
;
}
#
elif
defined
(
__ANDROID__
)
|
|
defined
(
ANDROID
)
#
include
<
sys
/
types
.
h
>
namespace
mozilla
:
:
baseprofiler
:
:
detail
{
using
ThreadIdType
=
decltype
(
gettid
(
)
)
;
}
#
elif
defined
(
XP_LINUX
)
namespace
mozilla
:
:
baseprofiler
:
:
detail
{
using
ThreadIdType
=
long
;
}
#
elif
defined
(
XP_FREEBSD
)
namespace
mozilla
:
:
baseprofiler
:
:
detail
{
using
ThreadIdType
=
long
;
}
#
else
#
include
<
thread
>
namespace
mozilla
:
:
baseprofiler
:
:
detail
{
using
ThreadIdType
=
std
:
:
thread
:
:
id
;
}
#
endif
#
endif
#
include
<
stdint
.
h
>
#
include
<
string
.
h
>
#
include
<
type_traits
>
namespace
mozilla
:
:
baseprofiler
{
class
BaseProfilerProcessId
{
public
:
using
NativeType
=
detail
:
:
ProcessIdType
;
using
NumberType
=
std
:
:
conditional_t
<
(
sizeof
(
NativeType
)
<
=
4
)
uint32_t
uint64_t
>
;
static_assert
(
sizeof
(
NativeType
)
<
=
sizeof
(
NumberType
)
)
;
constexpr
BaseProfilerProcessId
(
)
=
default
;
[
[
nodiscard
]
]
constexpr
bool
IsSpecified
(
)
const
{
return
mProcessId
!
=
scUnspecified
;
}
[
[
nodiscard
]
]
static
BaseProfilerProcessId
FromNativeId
(
const
NativeType
&
aNativeProcessId
)
{
BaseProfilerProcessId
id
;
static_assert
(
std
:
:
is_trivially_copyable_v
<
NativeType
>
)
;
memcpy
(
&
id
.
mProcessId
&
aNativeProcessId
sizeof
(
NativeType
)
)
;
return
id
;
}
[
[
nodiscard
]
]
constexpr
NumberType
ToNumber
(
)
const
{
return
mProcessId
;
}
constexpr
static
BaseProfilerProcessId
FromNumber
(
const
NumberType
&
aProcessId
)
{
BaseProfilerProcessId
id
;
id
.
mProcessId
=
aProcessId
;
return
id
;
}
[
[
nodiscard
]
]
constexpr
bool
operator
=
=
(
const
BaseProfilerProcessId
&
aOther
)
const
{
return
mProcessId
=
=
aOther
.
mProcessId
;
}
[
[
nodiscard
]
]
constexpr
bool
operator
!
=
(
const
BaseProfilerProcessId
&
aOther
)
const
{
return
mProcessId
!
=
aOther
.
mProcessId
;
}
private
:
static
constexpr
NumberType
scUnspecified
=
0
;
NumberType
mProcessId
=
scUnspecified
;
}
;
static_assert
(
std
:
:
is_trivially_copyable_v
<
BaseProfilerProcessId
>
)
;
static_assert
(
std
:
:
is_copy_constructible_v
<
BaseProfilerProcessId
>
)
;
static_assert
(
std
:
:
is_move_constructible_v
<
BaseProfilerProcessId
>
)
;
static_assert
(
std
:
:
is_copy_assignable_v
<
BaseProfilerProcessId
>
)
;
static_assert
(
std
:
:
is_move_assignable_v
<
BaseProfilerProcessId
>
)
;
class
BaseProfilerThreadId
{
public
:
using
NativeType
=
detail
:
:
ThreadIdType
;
using
NumberType
=
std
:
:
conditional_t
<
(
sizeof
(
NativeType
)
<
=
4
)
uint32_t
uint64_t
>
;
static_assert
(
sizeof
(
NativeType
)
<
=
sizeof
(
NumberType
)
)
;
constexpr
BaseProfilerThreadId
(
)
=
default
;
[
[
nodiscard
]
]
constexpr
bool
IsSpecified
(
)
const
{
return
mThreadId
!
=
scUnspecified
;
}
[
[
nodiscard
]
]
static
BaseProfilerThreadId
FromNativeId
(
const
NativeType
&
aNativeThreadId
)
{
BaseProfilerThreadId
id
;
static_assert
(
std
:
:
is_trivially_copyable_v
<
NativeType
>
)
;
memcpy
(
&
id
.
mThreadId
&
aNativeThreadId
sizeof
(
NativeType
)
)
;
return
id
;
}
[
[
nodiscard
]
]
constexpr
NumberType
ToNumber
(
)
const
{
return
mThreadId
;
}
constexpr
static
BaseProfilerThreadId
FromNumber
(
const
NumberType
&
aThreadId
)
{
BaseProfilerThreadId
id
;
id
.
mThreadId
=
aThreadId
;
return
id
;
}
[
[
nodiscard
]
]
constexpr
bool
operator
=
=
(
const
BaseProfilerThreadId
&
aOther
)
const
{
return
mThreadId
=
=
aOther
.
mThreadId
;
}
[
[
nodiscard
]
]
constexpr
bool
operator
!
=
(
const
BaseProfilerThreadId
&
aOther
)
const
{
return
mThreadId
!
=
aOther
.
mThreadId
;
}
private
:
static
constexpr
NumberType
scUnspecified
=
0
;
NumberType
mThreadId
=
scUnspecified
;
}
;
static_assert
(
std
:
:
is_trivially_copyable_v
<
BaseProfilerThreadId
>
)
;
static_assert
(
std
:
:
is_copy_constructible_v
<
BaseProfilerThreadId
>
)
;
static_assert
(
std
:
:
is_move_constructible_v
<
BaseProfilerThreadId
>
)
;
static_assert
(
std
:
:
is_copy_assignable_v
<
BaseProfilerThreadId
>
)
;
static_assert
(
std
:
:
is_move_assignable_v
<
BaseProfilerThreadId
>
)
;
}
#
include
"
mozilla
/
Types
.
h
"
namespace
mozilla
:
:
baseprofiler
{
[
[
nodiscard
]
]
MFBT_API
BaseProfilerProcessId
profiler_current_process_id
(
)
;
[
[
nodiscard
]
]
MFBT_API
BaseProfilerThreadId
profiler_current_thread_id
(
)
;
MFBT_API
void
profiler_init_main_thread_id
(
)
;
[
[
nodiscard
]
]
MFBT_API
BaseProfilerThreadId
profiler_main_thread_id
(
)
;
[
[
nodiscard
]
]
MFBT_API
bool
profiler_is_main_thread
(
)
;
}
#
endif
