#
ifndef
BaseProfilerMarkerPayload_h
#
define
BaseProfilerMarkerPayload_h
#
include
"
BaseProfiler
.
h
"
#
ifndef
MOZ_BASE_PROFILER
#
error
Do
not
#
include
this
header
when
MOZ_BASE_PROFILER
is
not
#
defined
.
#
endif
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
BlocksRingBuffer
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
namespace
mozilla
{
namespace
baseprofiler
{
class
SpliceableJSONWriter
;
class
UniqueStacks
;
class
ProfilerMarkerPayload
{
public
:
explicit
ProfilerMarkerPayload
(
const
Maybe
<
std
:
:
string
>
&
aDocShellId
=
Nothing
(
)
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
=
Nothing
(
)
UniqueProfilerBacktrace
aStack
=
nullptr
)
:
mCommonProps
{
TimeStamp
{
}
TimeStamp
{
}
std
:
:
move
(
aStack
)
std
:
:
move
(
aDocShellId
)
std
:
:
move
(
aDocShellHistoryId
)
}
{
}
ProfilerMarkerPayload
(
const
TimeStamp
&
aStartTime
const
TimeStamp
&
aEndTime
const
Maybe
<
std
:
:
string
>
&
aDocShellId
=
Nothing
(
)
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
=
Nothing
(
)
UniqueProfilerBacktrace
aStack
=
nullptr
)
:
mCommonProps
{
aStartTime
aEndTime
std
:
:
move
(
aStack
)
std
:
:
move
(
aDocShellId
)
std
:
:
move
(
aDocShellHistoryId
)
}
{
}
virtual
~
ProfilerMarkerPayload
(
)
{
}
static
BlocksRingBuffer
:
:
Length
TagAndSerializationBytes
(
const
ProfilerMarkerPayload
*
aPayload
)
{
if
(
!
aPayload
)
{
return
sizeof
(
DeserializerTag
)
;
}
return
aPayload
-
>
TagAndSerializationBytes
(
)
;
}
static
void
TagAndSerialize
(
const
ProfilerMarkerPayload
*
aPayload
BlocksRingBuffer
:
:
EntryWriter
&
aEntryWriter
)
{
if
(
!
aPayload
)
{
aEntryWriter
.
WriteObject
(
DeserializerTag
(
0
)
)
;
return
;
}
aPayload
-
>
SerializeTagAndPayload
(
aEntryWriter
)
;
}
static
UniquePtr
<
ProfilerMarkerPayload
>
DeserializeTagAndPayload
(
mozilla
:
:
BlocksRingBuffer
:
:
EntryReader
&
aER
)
{
const
auto
tag
=
aER
.
ReadObject
<
DeserializerTag
>
(
)
;
Deserializer
deserializer
=
DeserializerForTag
(
tag
)
;
return
deserializer
(
aER
)
;
}
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
const
=
0
;
TimeStamp
GetStartTime
(
)
const
{
return
mCommonProps
.
mStartTime
;
}
protected
:
typedef
UniquePtr
<
ProfilerMarkerPayload
>
(
*
Deserializer
)
(
BlocksRingBuffer
:
:
EntryReader
&
)
;
using
DeserializerTag
=
unsigned
char
;
static
constexpr
DeserializerTag
DeserializerMax
=
32
;
using
DeserializerTagAtomic
=
int
;
static
Atomic
<
DeserializerTagAtomic
ReleaseAcquire
recordreplay
:
:
Behavior
:
:
DontPreserve
>
sDeserializerCount
;
static
Deserializer
sDeserializers
[
DeserializerMax
]
;
MFBT_API
static
DeserializerTag
TagForDeserializer
(
Deserializer
aDeserializer
)
;
MFBT_API
static
Deserializer
DeserializerForTag
(
DeserializerTag
aTag
)
;
struct
CommonProps
{
TimeStamp
mStartTime
;
TimeStamp
mEndTime
;
UniqueProfilerBacktrace
mStack
;
Maybe
<
std
:
:
string
>
mDocShellId
;
Maybe
<
uint32_t
>
mDocShellHistoryId
;
}
;
explicit
ProfilerMarkerPayload
(
CommonProps
&
&
aCommonProps
)
:
mCommonProps
(
std
:
:
move
(
aCommonProps
)
)
{
}
MFBT_API
BlocksRingBuffer
:
:
Length
CommonPropsTagAndSerializationBytes
(
)
const
;
MFBT_API
void
SerializeTagAndCommonProps
(
DeserializerTag
aDeserializerTag
BlocksRingBuffer
:
:
EntryWriter
&
aEntryWriter
)
const
;
MFBT_API
static
CommonProps
DeserializeCommonProps
(
BlocksRingBuffer
:
:
EntryReader
&
aEntryReader
)
;
MFBT_API
void
StreamType
(
const
char
*
aMarkerType
SpliceableJSONWriter
&
aWriter
)
const
;
MFBT_API
void
StreamCommonProps
(
const
char
*
aMarkerType
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
const
;
private
:
virtual
BlocksRingBuffer
:
:
Length
TagAndSerializationBytes
(
)
const
=
0
;
virtual
void
SerializeTagAndPayload
(
BlocksRingBuffer
:
:
EntryWriter
&
aEntryWriter
)
const
=
0
;
CommonProps
mCommonProps
;
}
;
#
define
DECL_BASE_STREAM_PAYLOAD
\
MFBT_API
void
StreamPayload
(
\
:
:
mozilla
:
:
baseprofiler
:
:
SpliceableJSONWriter
&
aWriter
\
const
:
:
mozilla
:
:
TimeStamp
&
aProcessStartTime
\
:
:
mozilla
:
:
baseprofiler
:
:
UniqueStacks
&
aUniqueStacks
)
const
override
;
\
static
UniquePtr
<
ProfilerMarkerPayload
>
Deserialize
(
\
BlocksRingBuffer
:
:
EntryReader
&
aEntryReader
)
;
\
MFBT_API
BlocksRingBuffer
:
:
Length
TagAndSerializationBytes
(
)
const
override
;
\
MFBT_API
void
SerializeTagAndPayload
(
\
BlocksRingBuffer
:
:
EntryWriter
&
aEntryWriter
)
const
override
;
class
TracingMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
MFBT_API
TracingMarkerPayload
(
const
char
*
aCategory
TracingKind
aKind
const
Maybe
<
std
:
:
string
>
&
aDocShellId
=
Nothing
(
)
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
=
Nothing
(
)
UniqueProfilerBacktrace
aCause
=
nullptr
)
;
MFBT_API
~
TracingMarkerPayload
(
)
override
;
DECL_BASE_STREAM_PAYLOAD
private
:
MFBT_API
TracingMarkerPayload
(
CommonProps
&
&
aCommonProps
const
char
*
aCategory
TracingKind
aKind
)
;
const
char
*
mCategory
;
TracingKind
mKind
;
}
;
class
FileIOMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
MFBT_API
FileIOMarkerPayload
(
const
char
*
aOperation
const
char
*
aSource
const
char
*
aFilename
const
TimeStamp
&
aStartTime
const
TimeStamp
&
aEndTime
UniqueProfilerBacktrace
aStack
)
;
MFBT_API
~
FileIOMarkerPayload
(
)
override
;
DECL_BASE_STREAM_PAYLOAD
private
:
MFBT_API
FileIOMarkerPayload
(
CommonProps
&
&
aCommonProps
const
char
*
aSource
UniqueFreePtr
<
char
>
&
&
aOperation
UniqueFreePtr
<
char
>
&
&
aFilename
)
;
const
char
*
mSource
;
UniqueFreePtr
<
char
>
mOperation
;
UniqueFreePtr
<
char
>
mFilename
;
}
;
class
UserTimingMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
MFBT_API
UserTimingMarkerPayload
(
const
std
:
:
string
&
aName
const
TimeStamp
&
aStartTime
const
Maybe
<
std
:
:
string
>
&
aDocShellId
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
)
;
MFBT_API
UserTimingMarkerPayload
(
const
std
:
:
string
&
aName
const
Maybe
<
std
:
:
string
>
&
aStartMark
const
Maybe
<
std
:
:
string
>
&
aEndMark
const
TimeStamp
&
aStartTime
const
TimeStamp
&
aEndTime
const
Maybe
<
std
:
:
string
>
&
aDocShellId
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
)
;
MFBT_API
~
UserTimingMarkerPayload
(
)
override
;
DECL_BASE_STREAM_PAYLOAD
private
:
MFBT_API
UserTimingMarkerPayload
(
CommonProps
&
&
aCommonProps
const
char
*
aEntryType
std
:
:
string
&
&
aName
Maybe
<
std
:
:
string
>
&
&
aStartMark
Maybe
<
std
:
:
string
>
&
&
aEndMark
)
;
const
char
*
mEntryType
;
std
:
:
string
mName
;
Maybe
<
std
:
:
string
>
mStartMark
;
Maybe
<
std
:
:
string
>
mEndMark
;
}
;
class
HangMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
MFBT_API
HangMarkerPayload
(
const
TimeStamp
&
aStartTime
const
TimeStamp
&
aEndTime
)
;
MFBT_API
~
HangMarkerPayload
(
)
override
;
DECL_BASE_STREAM_PAYLOAD
private
:
MFBT_API
explicit
HangMarkerPayload
(
CommonProps
&
&
aCommonProps
)
;
}
;
class
LongTaskMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
MFBT_API
LongTaskMarkerPayload
(
const
TimeStamp
&
aStartTime
const
TimeStamp
&
aEndTime
)
;
MFBT_API
~
LongTaskMarkerPayload
(
)
override
;
DECL_BASE_STREAM_PAYLOAD
private
:
MFBT_API
explicit
LongTaskMarkerPayload
(
CommonProps
&
&
aCommonProps
)
;
}
;
class
TextMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
MFBT_API
TextMarkerPayload
(
const
std
:
:
string
&
aText
const
TimeStamp
&
aStartTime
)
;
MFBT_API
TextMarkerPayload
(
const
std
:
:
string
&
aText
const
TimeStamp
&
aStartTime
const
TimeStamp
&
aEndTime
)
;
MFBT_API
TextMarkerPayload
(
const
std
:
:
string
&
aText
const
TimeStamp
&
aStartTime
const
Maybe
<
std
:
:
string
>
&
aDocShellId
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
)
;
MFBT_API
TextMarkerPayload
(
const
std
:
:
string
&
aText
const
TimeStamp
&
aStartTime
const
TimeStamp
&
aEndTime
const
Maybe
<
std
:
:
string
>
&
aDocShellId
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
UniqueProfilerBacktrace
aCause
=
nullptr
)
;
MFBT_API
~
TextMarkerPayload
(
)
override
;
DECL_BASE_STREAM_PAYLOAD
private
:
MFBT_API
TextMarkerPayload
(
CommonProps
&
&
aCommonProps
std
:
:
string
&
&
aText
)
;
std
:
:
string
mText
;
}
;
class
LogMarkerPayload
:
public
ProfilerMarkerPayload
{
public
:
MFBT_API
LogMarkerPayload
(
const
char
*
aModule
const
char
*
aText
const
TimeStamp
&
aStartTime
)
;
MFBT_API
~
LogMarkerPayload
(
)
override
;
DECL_BASE_STREAM_PAYLOAD
private
:
MFBT_API
LogMarkerPayload
(
CommonProps
&
&
aCommonProps
std
:
:
string
&
&
aModule
std
:
:
string
&
&
aText
)
;
std
:
:
string
mModule
;
std
:
:
string
mText
;
}
;
}
template
<
>
struct
BlocksRingBuffer
:
:
Serializer
<
const
baseprofiler
:
:
ProfilerMarkerPayload
*
>
{
static
Length
Bytes
(
const
baseprofiler
:
:
ProfilerMarkerPayload
*
aPayload
)
{
return
baseprofiler
:
:
ProfilerMarkerPayload
:
:
TagAndSerializationBytes
(
aPayload
)
;
}
static
void
Write
(
EntryWriter
&
aEW
const
baseprofiler
:
:
ProfilerMarkerPayload
*
aPayload
)
{
baseprofiler
:
:
ProfilerMarkerPayload
:
:
TagAndSerialize
(
aPayload
aEW
)
;
}
}
;
template
<
>
struct
BlocksRingBuffer
:
:
Serializer
<
UniquePtr
<
baseprofiler
:
:
ProfilerMarkerPayload
>
>
{
static
Length
Bytes
(
const
UniquePtr
<
baseprofiler
:
:
ProfilerMarkerPayload
>
&
aPayload
)
{
return
baseprofiler
:
:
ProfilerMarkerPayload
:
:
TagAndSerializationBytes
(
aPayload
.
get
(
)
)
;
}
static
void
Write
(
EntryWriter
&
aEW
const
UniquePtr
<
baseprofiler
:
:
ProfilerMarkerPayload
>
&
aPayload
)
{
baseprofiler
:
:
ProfilerMarkerPayload
:
:
TagAndSerialize
(
aPayload
.
get
(
)
aEW
)
;
}
}
;
template
<
>
struct
BlocksRingBuffer
:
:
Deserializer
<
UniquePtr
<
baseprofiler
:
:
ProfilerMarkerPayload
>
>
{
static
void
ReadInto
(
EntryReader
&
aER
UniquePtr
<
baseprofiler
:
:
ProfilerMarkerPayload
>
&
aPayload
)
{
aPayload
=
Read
(
aER
)
;
}
static
UniquePtr
<
baseprofiler
:
:
ProfilerMarkerPayload
>
Read
(
EntryReader
&
aER
)
{
return
baseprofiler
:
:
ProfilerMarkerPayload
:
:
DeserializeTagAndPayload
(
aER
)
;
}
}
;
}
#
endif
