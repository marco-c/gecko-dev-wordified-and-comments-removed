#
ifndef
BASEPROFILEJSONWRITER_H
#
define
BASEPROFILEJSONWRITER_H
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
HashTable
.
h
"
#
include
"
mozilla
/
JSONWriter
.
h
"
#
include
"
mozilla
/
ProgressLogger
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
functional
>
#
include
<
ostream
>
#
include
<
string_view
>
namespace
mozilla
{
namespace
baseprofiler
{
class
SpliceableJSONWriter
;
class
ChunkedJSONWriteFunc
final
:
public
JSONWriteFunc
{
public
:
friend
class
SpliceableJSONWriter
;
ChunkedJSONWriteFunc
(
)
:
mChunkPtr
{
nullptr
}
mChunkEnd
{
nullptr
}
{
AllocChunk
(
kChunkSize
)
;
}
bool
IsEmpty
(
)
const
{
MOZ_ASSERT_IF
(
!
mChunkPtr
!
mChunkEnd
&
&
mChunkList
.
length
(
)
=
=
0
&
&
mChunkLengths
.
length
(
)
=
=
0
)
;
return
!
mChunkPtr
;
}
void
Write
(
const
Span
<
const
char
>
&
aStr
)
override
{
MOZ_ASSERT
(
mChunkPtr
>
=
mChunkList
.
back
(
)
.
get
(
)
&
&
mChunkPtr
<
=
mChunkEnd
)
;
MOZ_ASSERT
(
mChunkEnd
>
=
mChunkList
.
back
(
)
.
get
(
)
+
mChunkLengths
.
back
(
)
)
;
MOZ_ASSERT
(
*
mChunkPtr
=
=
'
\
0
'
)
;
char
*
newPtr
;
if
(
aStr
.
size
(
)
>
=
kChunkSize
)
{
AllocChunk
(
aStr
.
size
(
)
+
1
)
;
newPtr
=
mChunkPtr
+
aStr
.
size
(
)
;
}
else
{
newPtr
=
mChunkPtr
+
aStr
.
size
(
)
;
if
(
newPtr
>
=
mChunkEnd
)
{
AllocChunk
(
kChunkSize
)
;
newPtr
=
mChunkPtr
+
aStr
.
size
(
)
;
}
}
memcpy
(
mChunkPtr
aStr
.
data
(
)
aStr
.
size
(
)
)
;
*
newPtr
=
'
\
0
'
;
mChunkPtr
=
newPtr
;
mChunkLengths
.
back
(
)
+
=
aStr
.
size
(
)
;
}
void
CopyDataIntoLazilyAllocatedBuffer
(
const
std
:
:
function
<
char
*
(
size_t
)
>
&
aAllocator
)
const
{
MOZ_ASSERT
(
mChunkLengths
.
length
(
)
=
=
mChunkList
.
length
(
)
)
;
size_t
totalLen
=
1
;
for
(
size_t
i
=
0
;
i
<
mChunkLengths
.
length
(
)
;
i
+
+
)
{
MOZ_ASSERT
(
strlen
(
mChunkList
[
i
]
.
get
(
)
)
=
=
mChunkLengths
[
i
]
)
;
totalLen
+
=
mChunkLengths
[
i
]
;
}
char
*
ptr
=
aAllocator
(
totalLen
)
;
if
(
!
ptr
)
{
return
;
}
for
(
size_t
i
=
0
;
i
<
mChunkList
.
length
(
)
;
i
+
+
)
{
size_t
len
=
mChunkLengths
[
i
]
;
memcpy
(
ptr
mChunkList
[
i
]
.
get
(
)
len
)
;
ptr
+
=
len
;
}
*
ptr
=
'
\
0
'
;
}
UniquePtr
<
char
[
]
>
CopyData
(
)
const
{
UniquePtr
<
char
[
]
>
c
;
CopyDataIntoLazilyAllocatedBuffer
(
[
&
]
(
size_t
allocationSize
)
{
c
=
MakeUnique
<
char
[
]
>
(
allocationSize
)
;
return
c
.
get
(
)
;
}
)
;
return
c
;
}
void
Take
(
ChunkedJSONWriteFunc
&
&
aOther
)
{
for
(
size_t
i
=
0
;
i
<
aOther
.
mChunkList
.
length
(
)
;
i
+
+
)
{
MOZ_ALWAYS_TRUE
(
mChunkLengths
.
append
(
aOther
.
mChunkLengths
[
i
]
)
)
;
MOZ_ALWAYS_TRUE
(
mChunkList
.
append
(
std
:
:
move
(
aOther
.
mChunkList
[
i
]
)
)
)
;
}
mChunkPtr
=
mChunkList
.
back
(
)
.
get
(
)
+
mChunkLengths
.
back
(
)
;
mChunkEnd
=
mChunkPtr
;
aOther
.
mChunkPtr
=
nullptr
;
aOther
.
mChunkEnd
=
nullptr
;
aOther
.
mChunkList
.
clear
(
)
;
aOther
.
mChunkLengths
.
clear
(
)
;
}
private
:
void
AllocChunk
(
size_t
aChunkSize
)
{
MOZ_ASSERT
(
mChunkLengths
.
length
(
)
=
=
mChunkList
.
length
(
)
)
;
UniquePtr
<
char
[
]
>
newChunk
=
MakeUnique
<
char
[
]
>
(
aChunkSize
)
;
mChunkPtr
=
newChunk
.
get
(
)
;
mChunkEnd
=
mChunkPtr
+
aChunkSize
;
*
mChunkPtr
=
'
\
0
'
;
MOZ_ALWAYS_TRUE
(
mChunkLengths
.
append
(
0
)
)
;
MOZ_ALWAYS_TRUE
(
mChunkList
.
append
(
std
:
:
move
(
newChunk
)
)
)
;
}
static
const
size_t
kChunkSize
=
4096
*
512
;
char
*
mChunkPtr
;
char
*
mChunkEnd
;
Vector
<
UniquePtr
<
char
[
]
>
>
mChunkList
;
Vector
<
size_t
>
mChunkLengths
;
}
;
struct
OStreamJSONWriteFunc
final
:
public
JSONWriteFunc
{
explicit
OStreamJSONWriteFunc
(
std
:
:
ostream
&
aStream
)
:
mStream
(
aStream
)
{
}
void
Write
(
const
Span
<
const
char
>
&
aStr
)
override
{
std
:
:
string_view
sv
(
aStr
.
data
(
)
aStr
.
size
(
)
)
;
mStream
<
<
sv
;
}
std
:
:
ostream
&
mStream
;
}
;
class
UniqueJSONStrings
;
class
SpliceableJSONWriter
:
public
JSONWriter
{
public
:
explicit
SpliceableJSONWriter
(
UniquePtr
<
JSONWriteFunc
>
aWriter
)
:
JSONWriter
(
std
:
:
move
(
aWriter
)
)
{
}
void
StartBareList
(
CollectionStyle
aStyle
=
MultiLineStyle
)
{
StartCollection
(
scEmptyString
scEmptyString
aStyle
)
;
}
void
EndBareList
(
)
{
EndCollection
(
scEmptyString
)
;
}
void
TimeI64NsProperty
(
const
Span
<
const
char
>
&
aMaybePropertyName
int64_t
aTime_ns
)
{
if
(
aTime_ns
=
=
0
)
{
Scalar
(
aMaybePropertyName
MakeStringSpan
(
"
0
"
)
)
;
return
;
}
static
constexpr
int64_t
million
=
1
'
000
'
000
;
const
int64_t
absNanos
=
std
:
:
abs
(
aTime_ns
)
;
const
int64_t
integerMilliseconds
=
absNanos
/
million
;
auto
remainderNanoseconds
=
static_cast
<
uint32_t
>
(
absNanos
%
million
)
;
static
constexpr
size_t
DIGITS_MAX
=
23
;
char
buf
[
DIGITS_MAX
+
1
]
;
int
len
=
snprintf
(
buf
DIGITS_MAX
(
aTime_ns
>
=
0
)
?
"
%
"
PRIu64
:
"
-
%
"
PRIu64
integerMilliseconds
)
;
if
(
remainderNanoseconds
!
=
0
)
{
buf
[
len
+
+
]
=
'
.
'
;
uint32_t
powerOfTen
=
static_cast
<
uint32_t
>
(
million
/
10
)
;
for
(
;
;
)
{
auto
digit
=
remainderNanoseconds
/
powerOfTen
;
buf
[
len
+
+
]
=
'
0
'
+
static_cast
<
char
>
(
digit
)
;
remainderNanoseconds
%
=
powerOfTen
;
if
(
remainderNanoseconds
=
=
0
)
{
break
;
}
powerOfTen
/
=
10
;
if
(
powerOfTen
=
=
0
)
{
break
;
}
}
}
Scalar
(
aMaybePropertyName
Span
<
const
char
>
(
buf
len
)
)
;
}
void
TimeDoubleMsProperty
(
const
Span
<
const
char
>
&
aMaybePropertyName
double
aTime_ms
)
{
const
double
dTime_ns
=
aTime_ms
*
1
'
000
'
000
.
0
;
if
(
dTime_ns
>
=
0
.
0
)
{
MOZ_RELEASE_ASSERT
(
dTime_ns
<
double
(
INT64_MAX
-
1
)
)
;
}
else
{
MOZ_RELEASE_ASSERT
(
dTime_ns
>
double
(
INT64_MIN
+
2
)
)
;
}
const
int64_t
iTime_ns
=
(
dTime_ns
>
=
0
.
0
)
?
int64_t
(
dTime_ns
+
0
.
5
)
:
int64_t
(
dTime_ns
-
0
.
5
)
;
TimeI64NsProperty
(
aMaybePropertyName
iTime_ns
)
;
}
void
TimeDoubleMsElement
(
double
aTime_ms
)
{
TimeDoubleMsProperty
(
nullptr
aTime_ms
)
;
}
void
TimeProperty
(
const
Span
<
const
char
>
&
aMaybePropertyName
const
TimeStamp
&
aTime
)
{
if
(
!
aTime
.
IsNull
(
)
)
{
TimeDoubleMsProperty
(
aMaybePropertyName
(
aTime
-
TimeStamp
:
:
ProcessCreation
(
)
)
.
ToMilliseconds
(
)
)
;
}
}
void
NullElements
(
uint32_t
aCount
)
{
for
(
uint32_t
i
=
0
;
i
<
aCount
;
i
+
+
)
{
NullElement
(
)
;
}
}
void
Splice
(
const
Span
<
const
char
>
&
aStr
)
{
Separator
(
)
;
WriteFunc
(
)
-
>
Write
(
aStr
)
;
mNeedComma
[
mDepth
]
=
true
;
}
void
Splice
(
const
char
*
aStr
size_t
aLen
)
{
Separator
(
)
;
WriteFunc
(
)
-
>
Write
(
Span
<
const
char
>
(
aStr
aLen
)
)
;
mNeedComma
[
mDepth
]
=
true
;
}
void
SplicedJSONProperty
(
const
Span
<
const
char
>
&
aMaybePropertyName
const
Span
<
const
char
>
&
aJsonValue
)
{
Scalar
(
aMaybePropertyName
aJsonValue
)
;
}
void
CopyAndSplice
(
const
ChunkedJSONWriteFunc
&
aFunc
)
{
Separator
(
)
;
for
(
size_t
i
=
0
;
i
<
aFunc
.
mChunkList
.
length
(
)
;
i
+
+
)
{
WriteFunc
(
)
-
>
Write
(
Span
<
const
char
>
(
aFunc
.
mChunkList
[
i
]
.
get
(
)
aFunc
.
mChunkLengths
[
i
]
)
)
;
}
mNeedComma
[
mDepth
]
=
true
;
}
virtual
void
TakeAndSplice
(
ChunkedJSONWriteFunc
&
&
aFunc
)
{
Separator
(
)
;
for
(
size_t
i
=
0
;
i
<
aFunc
.
mChunkList
.
length
(
)
;
i
+
+
)
{
WriteFunc
(
)
-
>
Write
(
Span
<
const
char
>
(
aFunc
.
mChunkList
[
i
]
.
get
(
)
aFunc
.
mChunkLengths
[
i
]
)
)
;
}
aFunc
.
mChunkPtr
=
nullptr
;
aFunc
.
mChunkEnd
=
nullptr
;
aFunc
.
mChunkList
.
clear
(
)
;
aFunc
.
mChunkLengths
.
clear
(
)
;
mNeedComma
[
mDepth
]
=
true
;
}
void
SetUniqueStrings
(
UniqueJSONStrings
&
aUniqueStrings
)
{
MOZ_RELEASE_ASSERT
(
!
mUniqueStrings
)
;
mUniqueStrings
=
&
aUniqueStrings
;
}
void
ResetUniqueStrings
(
)
{
MOZ_RELEASE_ASSERT
(
mUniqueStrings
)
;
mUniqueStrings
=
nullptr
;
}
inline
void
UniqueStringProperty
(
const
Span
<
const
char
>
&
aName
const
Span
<
const
char
>
&
aStr
)
;
inline
void
UniqueStringElement
(
const
Span
<
const
char
>
&
aStr
)
;
private
:
UniqueJSONStrings
*
mUniqueStrings
=
nullptr
;
}
;
class
SpliceableChunkedJSONWriter
final
:
public
SpliceableJSONWriter
{
public
:
explicit
SpliceableChunkedJSONWriter
(
)
:
SpliceableJSONWriter
(
MakeUnique
<
ChunkedJSONWriteFunc
>
(
)
)
{
}
const
ChunkedJSONWriteFunc
&
ChunkedWriteFunc
(
)
const
{
MOZ_ASSERT
(
!
mTaken
)
;
return
*
static_cast
<
const
ChunkedJSONWriteFunc
*
>
(
WriteFunc
(
)
)
;
}
ChunkedJSONWriteFunc
&
&
TakeChunkedWriteFunc
(
)
{
#
ifdef
DEBUG
MOZ_ASSERT
(
!
mTaken
)
;
mTaken
=
true
;
#
endif
return
std
:
:
move
(
*
static_cast
<
ChunkedJSONWriteFunc
*
>
(
WriteFunc
(
)
)
)
;
}
void
TakeAndSplice
(
ChunkedJSONWriteFunc
&
&
aFunc
)
override
{
MOZ_ASSERT
(
!
mTaken
)
;
Separator
(
)
;
static_cast
<
ChunkedJSONWriteFunc
*
>
(
WriteFunc
(
)
)
-
>
Take
(
std
:
:
move
(
aFunc
)
)
;
mNeedComma
[
mDepth
]
=
true
;
}
#
ifdef
DEBUG
private
:
bool
mTaken
=
false
;
#
endif
}
;
class
JSONSchemaWriter
{
JSONWriter
&
mWriter
;
uint32_t
mIndex
;
public
:
explicit
JSONSchemaWriter
(
JSONWriter
&
aWriter
)
:
mWriter
(
aWriter
)
mIndex
(
0
)
{
aWriter
.
StartObjectProperty
(
"
schema
"
SpliceableJSONWriter
:
:
SingleLineStyle
)
;
}
void
WriteField
(
const
Span
<
const
char
>
&
aName
)
{
mWriter
.
IntProperty
(
aName
mIndex
+
+
)
;
}
template
<
size_t
Np1
>
void
WriteField
(
const
char
(
&
aName
)
[
Np1
]
)
{
WriteField
(
Span
<
const
char
>
(
aName
Np1
-
1
)
)
;
}
~
JSONSchemaWriter
(
)
{
mWriter
.
EndObject
(
)
;
}
}
;
class
UniqueJSONStrings
{
public
:
MFBT_API
explicit
UniqueJSONStrings
(
JSONWriter
:
:
CollectionStyle
aStyle
=
JSONWriter
:
:
MultiLineStyle
)
;
MFBT_API
explicit
UniqueJSONStrings
(
const
UniqueJSONStrings
&
aOther
ProgressLogger
aProgressLogger
JSONWriter
:
:
CollectionStyle
aStyle
=
JSONWriter
:
:
MultiLineStyle
)
;
MFBT_API
~
UniqueJSONStrings
(
)
;
void
WriteProperty
(
JSONWriter
&
aWriter
const
Span
<
const
char
>
&
aName
const
Span
<
const
char
>
&
aStr
)
{
aWriter
.
IntProperty
(
aName
GetOrAddIndex
(
aStr
)
)
;
}
void
WriteElement
(
JSONWriter
&
aWriter
const
Span
<
const
char
>
&
aStr
)
{
aWriter
.
IntElement
(
GetOrAddIndex
(
aStr
)
)
;
}
MFBT_API
void
SpliceStringTableElements
(
SpliceableJSONWriter
&
aWriter
)
;
private
:
MFBT_API
uint32_t
GetOrAddIndex
(
const
Span
<
const
char
>
&
aStr
)
;
SpliceableChunkedJSONWriter
mStringTableWriter
;
HashMap
<
HashNumber
uint32_t
>
mStringHashToIndexMap
;
}
;
void
SpliceableJSONWriter
:
:
UniqueStringProperty
(
const
Span
<
const
char
>
&
aName
const
Span
<
const
char
>
&
aStr
)
{
MOZ_RELEASE_ASSERT
(
mUniqueStrings
)
;
mUniqueStrings
-
>
WriteProperty
(
*
this
aName
aStr
)
;
}
void
SpliceableJSONWriter
:
:
UniqueStringElement
(
const
Span
<
const
char
>
&
aStr
)
{
MOZ_RELEASE_ASSERT
(
mUniqueStrings
)
;
mUniqueStrings
-
>
WriteElement
(
*
this
aStr
)
;
}
}
}
#
endif
