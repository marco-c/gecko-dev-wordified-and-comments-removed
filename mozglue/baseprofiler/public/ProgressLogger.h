#
ifndef
ProgressLogger_h
#
define
ProgressLogger_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ProportionValue
.
h
"
#
include
"
mozilla
/
RefCounted
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
<
atomic
>
#
ifdef
DEBUG_PROCESSLOGGER
#
include
"
mozilla
/
BaseProfilerUtils
.
h
"
#
include
<
cstdio
>
#
endif
namespace
mozilla
{
class
ProgressLogger
{
public
:
class
SharedProgress
:
public
external
:
:
AtomicRefCounted
<
SharedProgress
>
{
public
:
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
SharedProgress
)
SharedProgress
(
)
=
default
;
SharedProgress
(
const
SharedProgress
&
)
=
delete
;
SharedProgress
&
operator
=
(
const
SharedProgress
&
)
=
delete
;
static
constexpr
const
char
*
NO_LOCATION_UPDATE
=
nullptr
;
void
SetProgress
(
ProportionValue
aProgress
const
char
*
aLocationOrNullEmptyToIgnore
=
NO_LOCATION_UPDATE
)
{
if
(
aLocationOrNullEmptyToIgnore
&
&
*
aLocationOrNullEmptyToIgnore
!
=
'
\
0
'
)
{
mLastLocation
.
store
(
aLocationOrNullEmptyToIgnore
std
:
:
memory_order_release
)
;
}
mProgress
.
store
(
aProgress
std
:
:
memory_order_release
)
;
}
[
[
nodiscard
]
]
ProportionValue
Progress
(
)
const
{
return
mProgress
.
load
(
std
:
:
memory_order_acquire
)
;
}
[
[
nodiscard
]
]
const
char
*
LastLocation
(
)
const
{
return
mLastLocation
.
load
(
std
:
:
memory_order_acquire
)
;
}
private
:
friend
mozilla
:
:
detail
:
:
RefCounted
<
SharedProgress
mozilla
:
:
detail
:
:
AtomicRefCount
>
;
~
SharedProgress
(
)
=
default
;
std
:
:
atomic
<
ProportionValue
>
mProgress
=
ProportionValue
{
0
.
0
}
;
std
:
:
atomic
<
const
char
*
>
mLastLocation
=
nullptr
;
}
;
static
constexpr
const
char
*
NO_LOCATION_UPDATE
=
SharedProgress
:
:
NO_LOCATION_UPDATE
;
ProgressLogger
(
)
=
default
;
explicit
ProgressLogger
(
RefPtr
<
SharedProgress
>
aGlobalProgressOrNull
const
char
*
aLocationOrNullEmptyToIgnoreAtStart
=
NO_LOCATION_UPDATE
const
char
*
aLocationOrNullEmptyToIgnoreAtEnd
=
NO_LOCATION_UPDATE
)
:
ProgressLogger
{
std
:
:
move
(
aGlobalProgressOrNull
)
ProportionValue
{
0
.
0
}
ProportionValue
{
1
.
0
}
aLocationOrNullEmptyToIgnoreAtStart
aLocationOrNullEmptyToIgnoreAtEnd
}
{
}
ProgressLogger
(
const
ProgressLogger
&
)
=
delete
;
ProgressLogger
&
operator
&
(
const
ProgressLogger
&
)
=
delete
;
ProgressLogger
(
ProgressLogger
&
&
aOther
)
:
mGlobalProgressOrNull
(
std
:
:
move
(
aOther
.
mGlobalProgressOrNull
)
)
mLocalStartInGlobalSpace
(
aOther
.
mLocalStartInGlobalSpace
)
mLocalToGlobalMultiplier
(
aOther
.
mLocalToGlobalMultiplier
)
mLocationAtDestruction
(
aOther
.
mLocationAtDestruction
)
{
aOther
.
MarkMovedFrom
(
)
;
#
ifdef
DEBUG_PROCESSLOGGER
if
(
mGlobalProgressOrNull
)
{
printf
(
"
[
%
d
]
Moved
(
staying
globally
at
%
.
2f
in
[
%
.
2f
%
.
2f
]
)
\
n
"
int
(
baseprofiler
:
:
profiler_current_process_id
(
)
.
ToNumber
(
)
)
GetGlobalProgress
(
)
.
ToDouble
(
)
*
100
.
0
mLocalStartInGlobalSpace
.
ToDouble
(
)
*
100
.
0
(
mLocalStartInGlobalSpace
+
mLocalToGlobalMultiplier
)
.
ToDouble
(
)
*
100
.
0
)
;
}
#
endif
}
ProgressLogger
&
operator
=
(
ProgressLogger
&
&
aOther
)
{
mGlobalProgressOrNull
=
std
:
:
move
(
aOther
.
mGlobalProgressOrNull
)
;
mLocalStartInGlobalSpace
=
aOther
.
mLocalStartInGlobalSpace
;
mLocalToGlobalMultiplier
=
aOther
.
mLocalToGlobalMultiplier
;
mLocationAtDestruction
=
aOther
.
mLocationAtDestruction
;
aOther
.
MarkMovedFrom
(
)
;
#
ifdef
DEBUG_PROCESSLOGGER
if
(
mGlobalProgressOrNull
)
{
printf
(
"
[
%
d
]
Re
-
assigned
(
globally
at
%
.
2f
in
[
%
.
2f
%
.
2f
]
)
\
n
"
int
(
baseprofiler
:
:
profiler_current_process_id
(
)
.
ToNumber
(
)
)
GetGlobalProgress
(
)
.
ToDouble
(
)
*
100
.
0
mLocalStartInGlobalSpace
.
ToDouble
(
)
*
100
.
0
(
mLocalStartInGlobalSpace
+
mLocalToGlobalMultiplier
)
.
ToDouble
(
)
*
100
.
0
)
;
}
#
endif
return
*
this
;
}
~
ProgressLogger
(
)
{
if
(
!
IsMovedFrom
(
)
)
{
#
ifdef
DEBUG_PROCESSLOGGER
if
(
mGlobalProgressOrNull
)
{
printf
(
"
[
%
d
]
Destruction
:
\
n
"
int
(
baseprofiler
:
:
profiler_current_process_id
(
)
.
ToNumber
(
)
)
)
;
}
#
endif
SetLocalProgress
(
ProportionValue
{
1
.
0
}
mLocationAtDestruction
)
;
}
}
[
[
nodiscard
]
]
ProportionValue
GetGlobalProgress
(
)
const
{
return
mGlobalProgressOrNull
?
mGlobalProgressOrNull
-
>
Progress
(
)
:
ProportionValue
:
:
MakeInvalid
(
)
;
}
[
[
nodiscard
]
]
const
char
*
GetLastGlobalLocation
(
)
const
{
return
mGlobalProgressOrNull
?
mGlobalProgressOrNull
-
>
LastLocation
(
)
:
nullptr
;
}
void
SetLocalProgress
(
ProportionValue
aLocalProgress
const
char
*
aLocationOrNullEmptyToIgnore
)
{
MOZ_ASSERT
(
!
IsMovedFrom
(
)
)
;
if
(
mGlobalProgressOrNull
&
&
!
mLocalToGlobalMultiplier
.
IsExactlyZero
(
)
)
{
mGlobalProgressOrNull
-
>
SetProgress
(
LocalToGlobal
(
aLocalProgress
)
aLocationOrNullEmptyToIgnore
)
;
#
ifdef
DEBUG_PROCESSLOGGER
printf
(
"
[
%
d
]
-
local
%
.
0f
%
%
~
global
%
.
2f
%
%
\
"
%
s
\
"
\
n
"
int
(
baseprofiler
:
:
profiler_current_process_id
(
)
.
ToNumber
(
)
)
aLocalProgress
.
ToDouble
(
)
*
100
.
0
LocalToGlobal
(
aLocalProgress
)
.
ToDouble
(
)
*
100
.
0
aLocationOrNullEmptyToIgnore
?
aLocationOrNullEmptyToIgnore
:
"
<
null
>
"
)
;
#
endif
}
}
[
[
nodiscard
]
]
ProgressLogger
CreateSubLoggerFromTo
(
ProportionValue
aSubStartInLocalSpace
const
char
*
aLocationOrNullEmptyToIgnoreAtStart
ProportionValue
aSubEndInLocalSpace
const
char
*
aLocationOrNullEmptyToIgnoreAtEnd
=
NO_LOCATION_UPDATE
)
{
MOZ_ASSERT
(
!
IsMovedFrom
(
)
)
;
if
(
!
mGlobalProgressOrNull
)
{
return
ProgressLogger
{
}
;
}
const
ProportionValue
subStartInGlobalSpace
=
LocalToGlobal
(
aSubStartInLocalSpace
)
;
const
ProportionValue
subEndInGlobalSpace
=
LocalToGlobal
(
aSubEndInLocalSpace
)
;
if
(
subStartInGlobalSpace
.
IsInvalid
(
)
|
|
subEndInGlobalSpace
.
IsInvalid
(
)
)
{
return
ProgressLogger
{
mGlobalProgressOrNull
ProportionValue
:
:
MakeInvalid
(
)
ProportionValue
{
0
.
0
}
aLocationOrNullEmptyToIgnoreAtStart
aLocationOrNullEmptyToIgnoreAtEnd
}
;
}
#
ifdef
DEBUG_PROCESSLOGGER
if
(
mGlobalProgressOrNull
)
{
printf
(
"
[
%
d
]
*
Sub
:
local
[
%
.
0f
%
%
%
.
0f
%
%
]
~
global
[
%
.
2f
%
%
%
.
2f
%
%
]
\
n
"
int
(
baseprofiler
:
:
profiler_current_process_id
(
)
.
ToNumber
(
)
)
aSubStartInLocalSpace
.
ToDouble
(
)
*
100
.
0
aSubEndInLocalSpace
.
ToDouble
(
)
*
100
.
0
subStartInGlobalSpace
.
ToDouble
(
)
*
100
.
0
subEndInGlobalSpace
.
ToDouble
(
)
*
100
.
0
)
;
}
#
endif
return
ProgressLogger
{
mGlobalProgressOrNull
subStartInGlobalSpace
subEndInGlobalSpace
-
subStartInGlobalSpace
aLocationOrNullEmptyToIgnoreAtStart
aLocationOrNullEmptyToIgnoreAtEnd
}
;
}
[
[
nodiscard
]
]
ProgressLogger
CreateSubLoggerFromTo
(
ProportionValue
aSubStartInLocalSpace
ProportionValue
aSubEndInLocalSpace
const
char
*
aLocationOrNullEmptyToIgnoreAtEnd
=
NO_LOCATION_UPDATE
)
{
return
CreateSubLoggerFromTo
(
aSubStartInLocalSpace
NO_LOCATION_UPDATE
aSubEndInLocalSpace
aLocationOrNullEmptyToIgnoreAtEnd
)
;
}
[
[
nodiscard
]
]
ProgressLogger
CreateSubLoggerTo
(
const
char
*
aLocationOrNullEmptyToIgnoreAtStart
ProportionValue
aSubEndInLocalSpace
const
char
*
aLocationOrNullEmptyToIgnoreAtEnd
=
NO_LOCATION_UPDATE
)
{
MOZ_ASSERT
(
!
IsMovedFrom
(
)
)
;
if
(
!
mGlobalProgressOrNull
)
{
return
ProgressLogger
{
}
;
}
const
ProportionValue
subStartInGlobalSpace
=
GetGlobalProgress
(
)
;
const
ProportionValue
subEndInGlobalSpace
=
LocalToGlobal
(
aSubEndInLocalSpace
)
;
if
(
subStartInGlobalSpace
.
IsInvalid
(
)
|
|
subEndInGlobalSpace
.
IsInvalid
(
)
)
{
return
ProgressLogger
{
mGlobalProgressOrNull
ProportionValue
:
:
MakeInvalid
(
)
ProportionValue
{
0
.
0
}
aLocationOrNullEmptyToIgnoreAtStart
aLocationOrNullEmptyToIgnoreAtEnd
}
;
}
#
ifdef
DEBUG_PROCESSLOGGER
if
(
mGlobalProgressOrNull
)
{
printf
(
"
[
%
d
]
*
Sub
:
local
[
(
here
)
%
.
0f
%
%
]
~
global
[
%
.
2f
%
%
%
.
2f
%
%
]
\
n
"
int
(
baseprofiler
:
:
profiler_current_process_id
(
)
.
ToNumber
(
)
)
aSubEndInLocalSpace
.
ToDouble
(
)
*
100
.
0
subStartInGlobalSpace
.
ToDouble
(
)
*
100
.
0
subEndInGlobalSpace
.
ToDouble
(
)
*
100
.
0
)
;
}
#
endif
return
ProgressLogger
{
mGlobalProgressOrNull
subStartInGlobalSpace
subEndInGlobalSpace
-
subStartInGlobalSpace
aLocationOrNullEmptyToIgnoreAtStart
aLocationOrNullEmptyToIgnoreAtEnd
}
;
}
[
[
nodiscard
]
]
ProgressLogger
CreateSubLoggerTo
(
ProportionValue
aSubEndInLocalSpace
const
char
*
aLocationOrNullEmptyToIgnoreAtEnd
=
NO_LOCATION_UPDATE
)
{
return
CreateSubLoggerTo
(
NO_LOCATION_UPDATE
aSubEndInLocalSpace
aLocationOrNullEmptyToIgnoreAtEnd
)
;
}
class
IndexAndProgressLoggerRange
;
[
[
nodiscard
]
]
inline
IndexAndProgressLoggerRange
CreateLoopSubLoggersFromTo
(
ProportionValue
aLoopStartInLocalSpace
ProportionValue
aLoopEndInLocalSpace
uint32_t
aLoopCount
const
char
*
aLocationOrNullEmptyToIgnoreAtEdges
=
ProgressLogger
:
:
NO_LOCATION_UPDATE
)
;
[
[
nodiscard
]
]
inline
IndexAndProgressLoggerRange
CreateLoopSubLoggersTo
(
ProportionValue
aLoopEndInLocalSpace
uint32_t
aLoopCount
const
char
*
aLocationOrNullEmptyToIgnoreAtEdges
=
ProgressLogger
:
:
NO_LOCATION_UPDATE
)
;
private
:
ProgressLogger
(
RefPtr
<
SharedProgress
>
aGlobalProgressOrNull
ProportionValue
aLocalStartInGlobalSpace
ProportionValue
aLocalToGlobalMultiplier
const
char
*
aLocationOrNullEmptyToIgnoreAtConstruction
const
char
*
aLocationOrNullEmptyToIgnoreAtDestruction
)
:
mGlobalProgressOrNull
(
std
:
:
move
(
aGlobalProgressOrNull
)
)
mLocalStartInGlobalSpace
(
aLocalStartInGlobalSpace
)
mLocalToGlobalMultiplier
(
aLocalToGlobalMultiplier
)
mLocationAtDestruction
(
aLocationOrNullEmptyToIgnoreAtDestruction
)
{
MOZ_ASSERT
(
!
IsMovedFrom
(
)
"
Don
'
t
construct
a
moved
-
from
object
!
"
)
;
SetLocalProgress
(
ProportionValue
{
0
.
0
}
aLocationOrNullEmptyToIgnoreAtConstruction
)
;
}
void
MarkMovedFrom
(
)
{
mLocalToGlobalMultiplier
=
ProportionValue
:
:
MakeInvalid
(
)
;
}
[
[
nodiscard
]
]
bool
IsMovedFrom
(
)
const
{
return
mLocalToGlobalMultiplier
.
IsInvalid
(
)
;
}
[
[
nodiscard
]
]
ProportionValue
LocalToGlobal
(
ProportionValue
aLocalProgress
)
const
{
return
aLocalProgress
*
mLocalToGlobalMultiplier
+
mLocalStartInGlobalSpace
;
}
RefPtr
<
SharedProgress
>
mGlobalProgressOrNull
;
ProportionValue
mLocalStartInGlobalSpace
;
ProportionValue
mLocalToGlobalMultiplier
;
const
char
*
mLocationAtDestruction
=
nullptr
;
}
;
class
ProgressLogger
:
:
IndexAndProgressLoggerRange
{
public
:
struct
IndexAndProgressLogger
{
uint32_t
index
;
ProgressLogger
progressLogger
;
}
;
class
IndexAndProgressLoggerEndIterator
{
public
:
explicit
IndexAndProgressLoggerEndIterator
(
uint32_t
aIndex
)
:
mIndex
(
aIndex
)
{
}
[
[
nodiscard
]
]
uint32_t
Index
(
)
const
{
return
mIndex
;
}
private
:
uint32_t
mIndex
;
}
;
class
IndexAndProgressLoggerIterator
{
public
:
IndexAndProgressLoggerIterator
(
RefPtr
<
ProgressLogger
:
:
SharedProgress
>
aGlobalProgressOrNull
ProportionValue
aLoopStartInGlobalSpace
ProportionValue
aLoopIncrementInGlobalSpace
const
char
*
aLocationOrNullEmptyToIgnoreAtEdges
)
:
mGlobalProgressOrNull
(
aGlobalProgressOrNull
)
mLoopStartInGlobalSpace
(
aLoopStartInGlobalSpace
)
mLoopIncrementInGlobalSpace
(
aLoopIncrementInGlobalSpace
)
mIndex
(
0u
)
mLocationOrNullEmptyToIgnoreAtEdges
(
aLocationOrNullEmptyToIgnoreAtEdges
)
{
if
(
mGlobalProgressOrNull
)
{
mGlobalProgressOrNull
-
>
SetProgress
(
mLoopStartInGlobalSpace
mLocationOrNullEmptyToIgnoreAtEdges
)
;
}
}
[
[
nodiscard
]
]
IndexAndProgressLogger
operator
*
(
)
{
return
IndexAndProgressLogger
{
mIndex
mGlobalProgressOrNull
?
ProgressLogger
{
mGlobalProgressOrNull
mLoopStartInGlobalSpace
mLoopIncrementInGlobalSpace
ProgressLogger
:
:
NO_LOCATION_UPDATE
ProgressLogger
:
:
NO_LOCATION_UPDATE
}
:
ProgressLogger
{
}
}
;
}
[
[
nodiscard
]
]
bool
operator
!
=
(
const
IndexAndProgressLoggerEndIterator
&
aEnd
)
const
{
return
mIndex
!
=
aEnd
.
Index
(
)
;
}
IndexAndProgressLoggerIterator
&
operator
+
+
(
)
{
+
+
mIndex
;
mLoopStartInGlobalSpace
=
mLoopStartInGlobalSpace
+
mLoopIncrementInGlobalSpace
;
if
(
mGlobalProgressOrNull
)
{
mGlobalProgressOrNull
-
>
SetProgress
(
mLoopStartInGlobalSpace
mLocationOrNullEmptyToIgnoreAtEdges
)
;
}
return
*
this
;
}
private
:
RefPtr
<
ProgressLogger
:
:
SharedProgress
>
mGlobalProgressOrNull
;
ProportionValue
mLoopStartInGlobalSpace
;
ProportionValue
mLoopIncrementInGlobalSpace
;
uint32_t
mIndex
;
const
char
*
mLocationOrNullEmptyToIgnoreAtEdges
;
}
;
[
[
nodiscard
]
]
IndexAndProgressLoggerIterator
begin
(
)
{
return
IndexAndProgressLoggerIterator
{
mGlobalProgressOrNull
mLoopStartInGlobalSpace
mLoopIncrementInGlobalSpace
mLocationOrNullEmptyToIgnoreAtEdges
}
;
}
[
[
nodiscard
]
]
IndexAndProgressLoggerEndIterator
end
(
)
{
return
IndexAndProgressLoggerEndIterator
{
mLoopCount
}
;
}
private
:
friend
class
ProgressLogger
;
IndexAndProgressLoggerRange
(
ProgressLogger
&
aProgressLogger
ProportionValue
aLoopStartInGlobalSpace
ProportionValue
aLoopEndInGlobalSpace
uint32_t
aLoopCount
const
char
*
aLocationOrNullEmptyToIgnoreAtEdges
=
ProgressLogger
:
:
NO_LOCATION_UPDATE
)
:
mGlobalProgressOrNull
(
aProgressLogger
.
mGlobalProgressOrNull
)
mLoopStartInGlobalSpace
(
aLoopStartInGlobalSpace
)
mLoopIncrementInGlobalSpace
(
(
aLoopEndInGlobalSpace
-
aLoopStartInGlobalSpace
)
/
aLoopCount
)
mLoopCount
(
aLoopCount
)
mLocationOrNullEmptyToIgnoreAtEdges
(
aLocationOrNullEmptyToIgnoreAtEdges
)
{
}
RefPtr
<
ProgressLogger
:
:
SharedProgress
>
mGlobalProgressOrNull
;
ProportionValue
mLoopStartInGlobalSpace
;
ProportionValue
mLoopIncrementInGlobalSpace
;
uint32_t
mLoopCount
;
const
char
*
mLocationOrNullEmptyToIgnoreAtEdges
;
}
;
[
[
nodiscard
]
]
ProgressLogger
:
:
IndexAndProgressLoggerRange
ProgressLogger
:
:
CreateLoopSubLoggersFromTo
(
ProportionValue
aLoopStartInLocalSpace
ProportionValue
aLoopEndInLocalSpace
uint32_t
aLoopCount
const
char
*
aLocationOrNullEmptyToIgnoreAtEdges
)
{
return
IndexAndProgressLoggerRange
{
*
this
LocalToGlobal
(
aLoopStartInLocalSpace
)
LocalToGlobal
(
aLoopEndInLocalSpace
)
aLoopCount
aLocationOrNullEmptyToIgnoreAtEdges
}
;
}
[
[
nodiscard
]
]
ProgressLogger
:
:
IndexAndProgressLoggerRange
ProgressLogger
:
:
CreateLoopSubLoggersTo
(
ProportionValue
aLoopEndInLocalSpace
uint32_t
aLoopCount
const
char
*
aLocationOrNullEmptyToIgnoreAtEdges
)
{
return
IndexAndProgressLoggerRange
{
*
this
GetGlobalProgress
(
)
LocalToGlobal
(
aLoopEndInLocalSpace
)
aLoopCount
aLocationOrNullEmptyToIgnoreAtEdges
}
;
}
}
#
endif
