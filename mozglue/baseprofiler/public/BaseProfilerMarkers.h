#
ifndef
BaseProfilerMarkers_h
#
define
BaseProfilerMarkers_h
#
include
"
mozilla
/
BaseProfilerMarkersDetail
.
h
"
#
include
"
mozilla
/
BaseProfilerLabels
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
<
functional
>
#
include
<
string
>
#
include
<
utility
>
namespace
mozilla
:
:
baseprofiler
{
#
ifdef
MOZ_GECKO_PROFILER
MFBT_API
bool
profiler_capture_backtrace_into
(
ProfileChunkedBuffer
&
aChunkedBuffer
StackCaptureOptions
aCaptureOptions
)
;
template
<
typename
MarkerType
typename
.
.
.
PayloadArguments
>
ProfileBufferBlockIndex
AddMarkerToBuffer
(
ProfileChunkedBuffer
&
aBuffer
const
ProfilerString8View
&
aName
const
MarkerCategory
&
aCategory
MarkerOptions
&
&
aOptions
MarkerType
aMarkerType
const
PayloadArguments
&
.
.
.
aPayloadArguments
)
{
Unused
<
<
aMarkerType
;
AUTO_BASE_PROFILER_LABEL
(
"
baseprofiler
:
:
AddMarkerToBuffer
"
PROFILER
)
;
return
base_profiler_markers_detail
:
:
AddMarkerToBuffer
<
MarkerType
>
(
aBuffer
aName
aCategory
std
:
:
move
(
aOptions
)
:
:
mozilla
:
:
baseprofiler
:
:
profiler_capture_backtrace_into
aPayloadArguments
.
.
.
)
;
}
inline
ProfileBufferBlockIndex
AddMarkerToBuffer
(
ProfileChunkedBuffer
&
aBuffer
const
ProfilerString8View
&
aName
const
MarkerCategory
&
aCategory
MarkerOptions
&
&
aOptions
=
{
}
)
{
return
AddMarkerToBuffer
(
aBuffer
aName
aCategory
std
:
:
move
(
aOptions
)
markers
:
:
NoPayload
{
}
)
;
}
#
endif
template
<
typename
MarkerType
typename
.
.
.
PayloadArguments
>
ProfileBufferBlockIndex
AddMarker
(
const
ProfilerString8View
&
aName
const
MarkerCategory
&
aCategory
MarkerOptions
&
&
aOptions
MarkerType
aMarkerType
const
PayloadArguments
&
.
.
.
aPayloadArguments
)
{
#
ifndef
MOZ_GECKO_PROFILER
return
{
}
;
#
else
ProfileChunkedBuffer
&
coreBuffer
=
:
:
mozilla
:
:
baseprofiler
:
:
profiler_get_core_buffer
(
)
;
if
(
!
coreBuffer
.
IsInSession
(
)
)
{
return
{
}
;
}
return
:
:
mozilla
:
:
baseprofiler
:
:
AddMarkerToBuffer
(
coreBuffer
aName
aCategory
std
:
:
move
(
aOptions
)
aMarkerType
aPayloadArguments
.
.
.
)
;
#
endif
}
inline
ProfileBufferBlockIndex
AddMarker
(
const
ProfilerString8View
&
aName
const
MarkerCategory
&
aCategory
MarkerOptions
&
&
aOptions
=
{
}
)
{
return
AddMarker
(
aName
aCategory
std
:
:
move
(
aOptions
)
markers
:
:
NoPayload
{
}
)
;
}
}
#
define
BASE_PROFILER_MARKER_UNTYPED
(
markerName
categoryName
.
.
.
)
\
do
{
\
AUTO_PROFILER_STATS
(
BASE_PROFILER_MARKER_UNTYPED
)
;
\
:
:
mozilla
:
:
baseprofiler
:
:
AddMarker
(
\
markerName
:
:
mozilla
:
:
baseprofiler
:
:
category
:
:
categoryName
\
#
#
__VA_ARGS__
)
;
\
}
while
(
false
)
#
define
BASE_PROFILER_MARKER
(
markerName
categoryName
options
MarkerType
\
.
.
.
)
\
do
{
\
AUTO_PROFILER_STATS
(
BASE_PROFILER_MARKER_with_
#
#
MarkerType
)
;
\
:
:
mozilla
:
:
baseprofiler
:
:
AddMarker
(
\
markerName
:
:
mozilla
:
:
baseprofiler
:
:
category
:
:
categoryName
options
\
:
:
mozilla
:
:
baseprofiler
:
:
markers
:
:
MarkerType
{
}
#
#
__VA_ARGS__
)
;
\
}
while
(
false
)
namespace
mozilla
:
:
baseprofiler
:
:
markers
{
struct
TextMarker
{
static
constexpr
Span
<
const
char
>
MarkerTypeName
(
)
{
return
MakeStringSpan
(
"
Text
"
)
;
}
static
void
StreamJSONMarkerData
(
baseprofiler
:
:
SpliceableJSONWriter
&
aWriter
const
ProfilerString8View
&
aText
)
{
aWriter
.
StringProperty
(
"
name
"
aText
)
;
}
static
MarkerSchema
MarkerTypeDisplay
(
)
{
using
MS
=
MarkerSchema
;
MS
schema
{
MS
:
:
Location
:
:
MarkerChart
MS
:
:
Location
:
:
MarkerTable
}
;
schema
.
SetChartLabel
(
"
{
marker
.
data
.
name
}
"
)
;
schema
.
SetTableLabel
(
"
{
marker
.
name
}
-
{
marker
.
data
.
name
}
"
)
;
schema
.
AddKeyLabelFormatSearchable
(
"
name
"
"
Details
"
MS
:
:
Format
:
:
String
MS
:
:
Searchable
:
:
Searchable
)
;
return
schema
;
}
}
;
struct
Tracing
{
static
constexpr
Span
<
const
char
>
MarkerTypeName
(
)
{
return
MakeStringSpan
(
"
tracing
"
)
;
}
static
void
StreamJSONMarkerData
(
SpliceableJSONWriter
&
aWriter
const
ProfilerString8View
&
aCategory
)
{
if
(
aCategory
.
Length
(
)
!
=
0
)
{
aWriter
.
StringProperty
(
"
category
"
aCategory
)
;
}
}
static
MarkerSchema
MarkerTypeDisplay
(
)
{
using
MS
=
MarkerSchema
;
MS
schema
{
MS
:
:
Location
:
:
MarkerChart
MS
:
:
Location
:
:
MarkerTable
MS
:
:
Location
:
:
TimelineOverview
}
;
schema
.
AddKeyLabelFormatSearchable
(
"
category
"
"
Type
"
MS
:
:
Format
:
:
String
MS
:
:
Searchable
:
:
Searchable
)
;
return
schema
;
}
}
;
}
#
define
BASE_PROFILER_MARKER_TEXT
(
markerName
categoryName
options
text
)
\
do
{
\
AUTO_PROFILER_STATS
(
BASE_PROFILER_MARKER_TEXT
)
;
\
:
:
mozilla
:
:
baseprofiler
:
:
AddMarker
(
\
markerName
:
:
mozilla
:
:
baseprofiler
:
:
category
:
:
categoryName
options
\
:
:
mozilla
:
:
baseprofiler
:
:
markers
:
:
TextMarker
{
}
text
)
;
\
}
while
(
false
)
namespace
mozilla
:
:
baseprofiler
{
class
MOZ_RAII
AutoProfilerTextMarker
{
public
:
AutoProfilerTextMarker
(
const
char
*
aMarkerName
const
MarkerCategory
&
aCategory
MarkerOptions
&
&
aOptions
const
std
:
:
string
&
aText
)
:
mMarkerName
(
aMarkerName
)
mCategory
(
aCategory
)
mOptions
(
std
:
:
move
(
aOptions
)
)
mText
(
aText
)
{
MOZ_ASSERT
(
mOptions
.
Timing
(
)
.
EndTime
(
)
.
IsNull
(
)
"
AutoProfilerTextMarker
options
shouldn
'
t
have
an
end
time
"
)
;
if
(
profiler_is_active_and_unpaused
(
)
&
&
mOptions
.
Timing
(
)
.
StartTime
(
)
.
IsNull
(
)
)
{
mOptions
.
Set
(
MarkerTiming
:
:
InstantNow
(
)
)
;
}
}
~
AutoProfilerTextMarker
(
)
{
if
(
profiler_is_active_and_unpaused
(
)
)
{
mOptions
.
TimingRef
(
)
.
SetIntervalEnd
(
)
;
AUTO_PROFILER_STATS
(
AUTO_BASE_PROFILER_MARKER_TEXT
)
;
AddMarker
(
ProfilerString8View
:
:
WrapNullTerminatedString
(
mMarkerName
)
mCategory
std
:
:
move
(
mOptions
)
markers
:
:
TextMarker
{
}
mText
)
;
}
}
protected
:
const
char
*
mMarkerName
;
MarkerCategory
mCategory
;
MarkerOptions
mOptions
;
std
:
:
string
mText
;
}
;
#
ifdef
MOZ_GECKO_PROFILER
extern
template
MFBT_API
ProfileBufferBlockIndex
AddMarker
(
const
ProfilerString8View
&
const
MarkerCategory
&
MarkerOptions
&
&
markers
:
:
TextMarker
const
std
:
:
string
&
)
;
extern
template
MFBT_API
ProfileBufferBlockIndex
AddMarkerToBuffer
(
ProfileChunkedBuffer
&
const
ProfilerString8View
&
const
MarkerCategory
&
MarkerOptions
&
&
markers
:
:
NoPayload
)
;
extern
template
MFBT_API
ProfileBufferBlockIndex
AddMarkerToBuffer
(
ProfileChunkedBuffer
&
const
ProfilerString8View
&
const
MarkerCategory
&
MarkerOptions
&
&
markers
:
:
TextMarker
const
std
:
:
string
&
)
;
#
endif
}
#
define
AUTO_BASE_PROFILER_MARKER_TEXT
(
markerName
categoryName
options
\
text
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerTextMarker
PROFILER_RAII
(
\
markerName
:
:
mozilla
:
:
baseprofiler
:
:
category
:
:
categoryName
options
\
text
)
#
endif
