#
ifndef
BaseProfilerMarkers_h
#
define
BaseProfilerMarkers_h
#
include
"
mozilla
/
BaseProfilerMarkersDetail
.
h
"
#
include
"
BaseProfiler
.
h
"
#
ifndef
MOZ_GECKO_PROFILER
#
define
BASE_PROFILER_MARKER_UNTYPED
(
markerName
options
)
#
define
BASE_PROFILER_MARKER
(
markerName
options
MarkerType
.
.
.
)
#
define
BASE_PROFILER_MARKER_TEXT
(
markerName
options
text
)
#
else
#
include
"
mozilla
/
ProfileChunkedBuffer
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
<
functional
>
#
include
<
string
>
#
include
<
utility
>
namespace
mozilla
:
:
baseprofiler
{
template
<
typename
MarkerType
=
:
:
mozilla
:
:
baseprofiler
:
:
markers
:
:
NoPayload
typename
.
.
.
Ts
>
ProfileBufferBlockIndex
AddMarkerToBuffer
(
ProfileChunkedBuffer
&
aBuffer
const
ProfilerString8View
&
aName
MarkerOptions
&
&
aOptions
const
Ts
&
.
.
.
aTs
)
{
return
base_profiler_markers_detail
:
:
AddMarkerToBuffer
<
MarkerType
>
(
aBuffer
aName
std
:
:
move
(
aOptions
)
:
:
mozilla
:
:
baseprofiler
:
:
profiler_capture_backtrace_into
aTs
.
.
.
)
;
}
template
<
typename
MarkerType
=
:
:
mozilla
:
:
baseprofiler
:
:
markers
:
:
NoPayload
typename
.
.
.
Ts
>
ProfileBufferBlockIndex
AddMarker
(
const
ProfilerString8View
&
aName
MarkerOptions
&
&
aOptions
const
Ts
&
.
.
.
aTs
)
{
if
(
!
baseprofiler
:
:
profiler_can_accept_markers
(
)
)
{
return
{
}
;
}
return
:
:
mozilla
:
:
baseprofiler
:
:
AddMarkerToBuffer
<
MarkerType
>
(
base_profiler_markers_detail
:
:
CachedBaseCoreBuffer
(
)
aName
std
:
:
move
(
aOptions
)
aTs
.
.
.
)
;
}
inline
void
WritePropertyTime
(
JSONWriter
&
aWriter
const
char
*
aName
const
TimeStamp
&
aTime
)
{
if
(
!
aTime
.
IsNull
(
)
)
{
aWriter
.
DoubleProperty
(
aName
(
aTime
-
TimeStamp
:
:
ProcessCreation
(
)
)
.
ToMilliseconds
(
)
)
;
}
}
}
#
define
BASE_PROFILER_MARKER_UNTYPED
(
markerName
options
)
\
do
{
\
AUTO_PROFILER_STATS
(
BASE_PROFILER_MARKER_UNTYPED
)
;
\
:
:
mozilla
:
:
baseprofiler
:
:
AddMarker
<
>
(
\
markerName
:
:
mozilla
:
:
baseprofiler
:
:
category
:
:
options
)
;
\
}
while
(
false
)
#
define
BASE_PROFILER_MARKER
(
markerName
options
MarkerType
.
.
.
)
\
do
{
\
AUTO_PROFILER_STATS
(
BASE_PROFILER_MARKER_with_
#
#
MarkerType
)
;
\
:
:
mozilla
:
:
baseprofiler
:
:
AddMarker
<
\
:
:
mozilla
:
:
baseprofiler
:
:
markers
:
:
MarkerType
>
(
\
markerName
:
:
mozilla
:
:
baseprofiler
:
:
category
:
:
options
\
#
#
__VA_ARGS__
)
;
\
}
while
(
false
)
namespace
mozilla
:
:
baseprofiler
:
:
markers
{
struct
Text
{
static
constexpr
const
char
*
MarkerTypeName
(
)
{
return
"
Text
"
;
}
static
void
StreamJSONMarkerData
(
JSONWriter
&
aWriter
const
ProfilerString8View
&
aText
)
{
aWriter
.
StringProperty
(
"
name
"
aText
.
String
(
)
.
c_str
(
)
)
;
}
}
;
}
#
define
BASE_PROFILER_MARKER_TEXT
(
markerName
options
text
)
\
do
{
\
AUTO_PROFILER_STATS
(
BASE_PROFILER_MARKER_TEXT
)
;
\
:
:
mozilla
:
:
baseprofiler
:
:
AddMarker
<
\
:
:
mozilla
:
:
baseprofiler
:
:
markers
:
:
Text
>
(
\
markerName
:
:
mozilla
:
:
baseprofiler
:
:
category
:
:
options
text
)
;
\
}
while
(
false
)
#
endif
#
endif
