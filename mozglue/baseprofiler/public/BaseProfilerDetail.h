#
ifndef
BaseProfilerDetail_h
#
define
BaseProfilerDetail_h
#
include
"
mozilla
/
PlatformMutex
.
h
"
#
ifdef
DEBUG
#
include
"
BaseProfiler
.
h
"
#
ifdef
MOZ_BASE_PROFILER
#
include
"
mozilla
/
Atomics
.
h
"
#
define
MOZ_BASE_PROFILER_DEBUG
#
endif
#
endif
namespace
mozilla
{
namespace
baseprofiler
{
namespace
detail
{
class
BaseProfilerMutex
:
private
:
:
mozilla
:
:
detail
:
:
MutexImpl
{
public
:
BaseProfilerMutex
(
)
:
:
:
mozilla
:
:
detail
:
:
MutexImpl
(
:
:
mozilla
:
:
recordreplay
:
:
Behavior
:
:
DontPreserve
)
{
}
void
Lock
(
)
{
#
ifdef
MOZ_BASE_PROFILER_DEBUG
int
tid
=
baseprofiler
:
:
profiler_current_thread_id
(
)
;
MOZ_ASSERT
(
mOwningThreadId
!
=
tid
)
;
#
endif
:
:
mozilla
:
:
detail
:
:
MutexImpl
:
:
lock
(
)
;
#
ifdef
MOZ_BASE_PROFILER_DEBUG
MOZ_ASSERT
(
mOwningThreadId
!
=
tid
)
;
mOwningThreadId
=
tid
;
#
endif
}
void
Unlock
(
)
{
#
ifdef
MOZ_BASE_PROFILER_DEBUG
MOZ_ASSERT
(
mOwningThreadId
=
=
baseprofiler
:
:
profiler_current_thread_id
(
)
)
;
mOwningThreadId
=
0
;
#
endif
:
:
mozilla
:
:
detail
:
:
MutexImpl
:
:
unlock
(
)
;
}
void
AssertCurrentThreadOwns
(
)
const
{
#
ifdef
MOZ_BASE_PROFILER_DEBUG
MOZ_ASSERT
(
mOwningThreadId
=
=
baseprofiler
:
:
profiler_current_thread_id
(
)
)
;
#
endif
}
#
ifdef
MOZ_BASE_PROFILER_DEBUG
private
:
Atomic
<
int
>
mOwningThreadId
{
0
}
;
#
endif
}
;
class
MOZ_RAII
BPAutoLock
{
public
:
explicit
BPAutoLock
(
BaseProfilerMutex
&
aMutex
)
:
mMutex
(
aMutex
)
{
mMutex
.
Lock
(
)
;
}
~
BPAutoLock
(
)
{
mMutex
.
Unlock
(
)
;
}
private
:
BaseProfilerMutex
&
mMutex
;
}
;
}
}
}
#
endif
