#
ifndef
Flow_h
#
define
Flow_h
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
ProfileBufferEntrySerialization
.
h
"
extern
uint64_t
MFBT_DATA
gProcessUUID
;
class
Flow
{
public
:
static
inline
Flow
ProcessScoped
(
uint64_t
aFlowId
)
{
return
Global
(
aFlowId
^
gProcessUUID
)
;
}
static
inline
Flow
FromPointer
(
void
*
aPtr
)
{
return
ProcessScoped
(
reinterpret_cast
<
uintptr_t
>
(
aPtr
)
)
;
}
static
inline
Flow
Global
(
uint64_t
aFlowId
)
{
return
Flow
(
aFlowId
)
;
}
uint64_t
Id
(
)
const
{
return
mFlowId
;
}
static
MFBT_API
void
Init
(
)
;
private
:
explicit
Flow
(
uint64_t
aFlowId
)
:
mFlowId
(
aFlowId
)
{
}
const
uint64_t
mFlowId
;
}
;
template
<
>
struct
mozilla
:
:
ProfileBufferEntryWriter
:
:
Serializer
<
Flow
>
{
static
constexpr
Length
Bytes
(
const
Flow
&
aFlow
)
{
return
sizeof
(
Flow
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
Flow
&
aFlow
)
{
aEW
.
WriteBytes
(
&
aFlow
sizeof
(
Flow
)
)
;
}
}
;
template
<
>
struct
mozilla
:
:
ProfileBufferEntryReader
:
:
Deserializer
<
Flow
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
uint64_t
&
aFlow
)
{
aER
.
ReadBytes
(
&
aFlow
sizeof
(
Flow
)
)
;
}
static
Flow
Read
(
ProfileBufferEntryReader
&
aER
)
{
uint64_t
flow
;
ReadInto
(
aER
flow
)
;
return
Flow
:
:
Global
(
flow
)
;
}
}
;
#
endif
