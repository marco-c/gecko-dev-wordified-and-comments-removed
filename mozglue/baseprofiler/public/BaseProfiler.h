#
ifndef
BaseProfiler_h
#
define
BaseProfiler_h
#
ifdef
MOZ_GECKO_PROFILER
#
if
defined
(
XP_MACOSX
)
|
|
(
defined
(
XP_LINUX
)
&
&
!
defined
(
ANDROID
)
)
#
define
MOZ_BASE_PROFILER
#
else
#
endif
#
endif
#
include
"
mozilla
/
BaseProfilerCounts
.
h
"
#
ifndef
MOZ_BASE_PROFILER
#
define
AUTO_BASE_PROFILER_INIT
#
define
BASE_PROFILER_REGISTER_THREAD
(
name
)
#
define
BASE_PROFILER_UNREGISTER_THREAD
(
)
#
define
AUTO_BASE_PROFILER_REGISTER_THREAD
(
name
)
#
define
AUTO_BASE_PROFILER_THREAD_SLEEP
#
define
AUTO_BASE_PROFILER_THREAD_WAKE
#
define
AUTO_BASE_PROFILER_LABEL
(
label
categoryPair
)
#
define
AUTO_BASE_PROFILER_LABEL_CATEGORY_PAIR
(
categoryPair
)
#
define
AUTO_BASE_PROFILER_LABEL_DYNAMIC_CSTR
(
label
categoryPair
cStr
)
#
define
AUTO_BASE_PROFILER_LABEL_DYNAMIC_STRING
(
label
categoryPair
str
)
#
define
AUTO_BASE_PROFILER_LABEL_FAST
(
label
categoryPair
ctx
)
#
define
AUTO_BASE_PROFILER_LABEL_DYNAMIC_FAST
(
label
dynamicString
\
categoryPair
ctx
flags
)
#
define
BASE_PROFILER_ADD_MARKER
(
markerName
categoryPair
)
#
define
MOZDECLARE_DOCSHELL_AND_HISTORY_ID
(
docShell
)
#
define
BASE_PROFILER_TRACING
(
categoryString
markerName
categoryPair
kind
)
#
define
BASE_PROFILER_TRACING_DOCSHELL
(
categoryString
markerName
\
categoryPair
kind
docshell
)
#
define
AUTO_BASE_PROFILER_TRACING
(
categoryString
markerName
categoryPair
)
#
define
AUTO_BASE_PROFILER_TRACING_DOCSHELL
(
categoryString
markerName
\
categoryPair
docShell
)
#
define
AUTO_BASE_PROFILER_TEXT_MARKER_CAUSE
(
markerName
text
categoryPair
\
cause
)
#
define
AUTO_BASE_PROFILER_TEXT_MARKER_DOCSHELL
(
markerName
text
\
categoryPair
docShell
)
#
define
AUTO_BASE_PROFILER_TEXT_MARKER_DOCSHELL_CAUSE
(
\
markerName
text
categoryPair
docShell
cause
)
#
else
#
include
"
BaseProfilingStack
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
GuardObjects
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
stdint
.
h
>
#
include
<
string
>
namespace
mozilla
{
class
MallocAllocPolicy
;
template
<
class
T
size_t
MinInlineCapacity
class
AllocPolicy
>
class
Vector
;
namespace
baseprofiler
{
class
ProfilerBacktrace
;
class
ProfilerMarkerPayload
;
class
SpliceableJSONWriter
;
#
define
BASE_PROFILER_RAII_PASTE
(
id
line
)
id
#
#
line
#
define
BASE_PROFILER_RAII_EXPAND
(
id
line
)
BASE_PROFILER_RAII_PASTE
(
id
line
)
#
define
BASE_PROFILER_RAII
BASE_PROFILER_RAII_EXPAND
(
raiiObject
__LINE__
)
#
define
BASE_PROFILER_FOR_EACH_FEATURE
(
MACRO
)
\
MACRO
(
0
"
java
"
Java
"
Profile
Java
code
Android
only
"
)
\
\
MACRO
(
1
"
js
"
JS
\
"
Get
the
JS
engine
to
expose
the
JS
stack
to
the
profiler
"
)
\
\
/
*
The
DevTools
profiler
doesn
'
t
want
the
native
addresses
.
*
/
\
MACRO
(
2
"
leaf
"
Leaf
"
Include
the
C
+
+
leaf
node
if
not
stackwalking
"
)
\
\
MACRO
(
3
"
mainthreadio
"
MainThreadIO
\
"
Add
main
thread
I
/
O
to
the
profile
"
)
\
\
MACRO
(
4
"
memory
"
Memory
"
Add
memory
measurements
"
)
\
\
MACRO
(
5
"
privacy
"
Privacy
\
"
Do
not
include
user
-
identifiable
information
"
)
\
\
MACRO
(
6
"
responsiveness
"
Responsiveness
\
"
Collect
thread
responsiveness
information
"
)
\
\
MACRO
(
7
"
screenshots
"
Screenshots
\
"
Take
a
snapshot
of
the
window
on
every
composition
"
)
\
\
MACRO
(
8
"
seqstyle
"
SequentialStyle
\
"
Disable
parallel
traversal
in
styling
"
)
\
\
MACRO
(
9
"
stackwalk
"
StackWalk
\
"
Walk
the
C
+
+
stack
not
available
on
all
platforms
"
)
\
\
MACRO
(
10
"
tasktracer
"
TaskTracer
\
"
Start
profiling
with
feature
TaskTracer
"
)
\
\
MACRO
(
11
"
threads
"
Threads
"
Profile
the
registered
secondary
threads
"
)
\
\
MACRO
(
12
"
trackopts
"
TrackOptimizations
\
"
Have
the
JavaScript
engine
track
JIT
optimizations
"
)
\
\
MACRO
(
13
"
jstracer
"
JSTracer
"
Enable
tracing
of
the
JavaScript
engine
"
)
struct
ProfilerFeature
{
#
define
DECLARE
(
n_
str_
Name_
desc_
)
\
static
constexpr
uint32_t
Name_
=
(
1u
<
<
n_
)
;
\
static
constexpr
bool
Has
#
#
Name_
(
uint32_t
aFeatures
)
{
\
return
aFeatures
&
Name_
;
\
}
\
static
constexpr
void
Set
#
#
Name_
(
uint32_t
&
aFeatures
)
{
\
aFeatures
|
=
Name_
;
\
}
\
static
constexpr
void
Clear
#
#
Name_
(
uint32_t
&
aFeatures
)
{
\
aFeatures
&
=
~
Name_
;
\
}
BASE_PROFILER_FOR_EACH_FEATURE
(
DECLARE
)
#
undef
DECLARE
}
;
namespace
detail
{
class
RacyFeatures
{
public
:
MFBT_API
static
void
SetActive
(
uint32_t
aFeatures
)
;
MFBT_API
static
void
SetInactive
(
)
;
MFBT_API
static
bool
IsActive
(
)
;
MFBT_API
static
bool
IsActiveWithFeature
(
uint32_t
aFeature
)
;
MFBT_API
static
bool
IsActiveWithoutPrivacy
(
)
;
private
:
static
const
uint32_t
Active
=
1u
<
<
31
;
#
define
NO_OVERLAP
(
n_
str_
Name_
desc_
)
\
static_assert
(
ProfilerFeature
:
:
Name_
!
=
Active
"
bad
Active
value
"
)
;
BASE_PROFILER_FOR_EACH_FEATURE
(
NO_OVERLAP
)
;
#
undef
NO_OVERLAP
static
Atomic
<
uint32_t
MemoryOrdering
:
:
Relaxed
recordreplay
:
:
Behavior
:
:
DontPreserve
>
sActiveAndFeatures
;
}
;
MFBT_API
bool
IsThreadBeingProfiled
(
)
;
}
static
constexpr
uint32_t
BASE_PROFILER_DEFAULT_ENTRIES
=
#
if
!
defined
(
ARCH_ARMV6
)
1u
<
<
20
;
#
else
1u
<
<
17
;
/
/
131
'
072
#
endif
static
constexpr
uint32_t
BASE_PROFILER_DEFAULT_STARTUP_ENTRIES
=
#
if
!
defined
(
ARCH_ARMV6
)
1u
<
<
22
;
#
else
1u
<
<
17
;
/
/
131
'
072
#
endif
#
define
BASE_PROFILER_DEFAULT_DURATION
20
#
define
BASE_PROFILER_DEFAULT_INTERVAL
1
MFBT_API
void
profiler_init
(
void
*
stackTop
)
;
#
define
AUTO_BASE_PROFILER_INIT
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerInit
BASE_PROFILER_RAII
MFBT_API
void
profiler_shutdown
(
)
;
MFBT_API
void
profiler_start
(
uint32_t
aCapacity
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
uint32_t
aFilterCount
const
Maybe
<
double
>
&
aDuration
=
Nothing
(
)
)
;
MFBT_API
void
profiler_stop
(
)
;
MFBT_API
void
profiler_ensure_started
(
uint32_t
aCapacity
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
uint32_t
aFilterCount
const
Maybe
<
double
>
&
aDuration
=
Nothing
(
)
)
;
#
define
BASE_PROFILER_REGISTER_THREAD
(
name
)
\
do
{
\
char
stackTop
;
\
:
:
mozilla
:
:
baseprofiler
:
:
profiler_register_thread
(
name
&
stackTop
)
;
\
}
while
(
0
)
#
define
BASE_PROFILER_UNREGISTER_THREAD
(
)
\
:
:
mozilla
:
:
baseprofiler
:
:
profiler_unregister_thread
(
)
MFBT_API
ProfilingStack
*
profiler_register_thread
(
const
char
*
name
void
*
guessStackTop
)
;
MFBT_API
void
profiler_unregister_thread
(
)
;
MFBT_API
void
profiler_register_page
(
const
std
:
:
string
&
aDocShellId
uint32_t
aHistoryId
const
std
:
:
string
&
aUrl
bool
aIsSubFrame
)
;
MFBT_API
void
profiler_unregister_pages
(
const
std
:
:
string
&
aRegisteredDocShellId
)
;
void
profiler_clear_all_pages
(
)
;
class
BaseProfilerCount
;
MFBT_API
void
profiler_add_sampled_counter
(
BaseProfilerCount
*
aCounter
)
;
MFBT_API
void
profiler_remove_sampled_counter
(
BaseProfilerCount
*
aCounter
)
;
#
define
AUTO_BASE_PROFILER_REGISTER_THREAD
(
name
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerRegisterThread
BASE_PROFILER_RAII
(
name
)
MFBT_API
void
profiler_pause
(
)
;
MFBT_API
void
profiler_resume
(
)
;
MFBT_API
void
profiler_thread_sleep
(
)
;
MFBT_API
void
profiler_thread_wake
(
)
;
#
define
AUTO_BASE_PROFILER_THREAD_SLEEP
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerThreadSleep
BASE_PROFILER_RAII
#
define
AUTO_BASE_PROFILER_THREAD_WAKE
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerThreadWake
BASE_PROFILER_RAII
inline
bool
profiler_is_active
(
)
{
return
baseprofiler
:
:
detail
:
:
RacyFeatures
:
:
IsActive
(
)
;
}
inline
bool
profiler_thread_is_being_profiled
(
)
{
return
profiler_is_active
(
)
&
&
baseprofiler
:
:
detail
:
:
IsThreadBeingProfiled
(
)
;
}
MFBT_API
bool
profiler_is_paused
(
)
;
MFBT_API
bool
profiler_thread_is_sleeping
(
)
;
MFBT_API
uint32_t
profiler_get_available_features
(
)
;
MFBT_API
bool
profiler_feature_active
(
uint32_t
aFeature
)
;
MFBT_API
void
profiler_get_start_params
(
int
*
aEntrySize
Maybe
<
double
>
*
aDuration
double
*
aInterval
uint32_t
*
aFeatures
Vector
<
const
char
*
0
MallocAllocPolicy
>
*
aFilters
)
;
MFBT_API
double
profiler_time
(
)
;
MFBT_API
int
profiler_current_process_id
(
)
;
MFBT_API
int
profiler_current_thread_id
(
)
;
class
ProfilerStackCollector
{
public
:
virtual
Maybe
<
uint64_t
>
SamplePositionInBuffer
(
)
{
return
Nothing
(
)
;
}
virtual
Maybe
<
uint64_t
>
BufferRangeStart
(
)
{
return
Nothing
(
)
;
}
virtual
void
SetIsMainThread
(
)
{
}
virtual
void
CollectNativeLeafAddr
(
void
*
aAddr
)
=
0
;
virtual
void
CollectProfilingStackFrame
(
const
ProfilingStackFrame
&
aFrame
)
=
0
;
}
;
MFBT_API
void
profiler_suspend_and_sample_thread
(
int
aThreadId
uint32_t
aFeatures
ProfilerStackCollector
&
aCollector
bool
aSampleNative
=
true
)
;
struct
ProfilerBacktraceDestructor
{
MFBT_API
void
operator
(
)
(
ProfilerBacktrace
*
)
;
}
;
using
UniqueProfilerBacktrace
=
UniquePtr
<
ProfilerBacktrace
ProfilerBacktraceDestructor
>
;
MFBT_API
UniqueProfilerBacktrace
profiler_get_backtrace
(
)
;
struct
ProfilerBufferInfo
{
uint64_t
mRangeStart
;
uint64_t
mRangeEnd
;
uint32_t
mEntryCount
;
}
;
MFBT_API
Maybe
<
ProfilerBufferInfo
>
profiler_get_buffer_info
(
)
;
#
define
AUTO_BASE_PROFILER_LABEL
(
label
categoryPair
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerLabel
BASE_PROFILER_RAII
(
\
label
nullptr
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_BASE_PROFILER_LABEL_CATEGORY_PAIR
(
categoryPair
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerLabel
BASE_PROFILER_RAII
(
\
"
"
nullptr
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingStackFrame
:
:
Flags
:
:
\
LABEL_DETERMINED_BY_CATEGORY_PAIR
)
)
#
define
AUTO_BASE_PROFILER_LABEL_DYNAMIC_CSTR
(
label
categoryPair
cStr
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerLabel
BASE_PROFILER_RAII
(
\
label
cStr
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_BASE_PROFILER_LABEL_DYNAMIC_STRING
(
label
categoryPair
str
)
\
Maybe
<
std
:
:
string
>
autoStr
;
\
Maybe
<
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerLabel
>
raiiObjectString
;
\
if
(
:
:
mozilla
:
:
baseprofiler
:
:
profiler_is_active
(
)
)
{
\
autoStr
.
emplace
(
str
)
;
\
raiiObjectString
.
emplace
(
\
label
autoStr
-
>
c_str
(
)
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
)
;
\
}
#
define
AUTO_BASE_PROFILER_LABEL_FAST
(
label
categoryPair
ctx
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerLabel
BASE_PROFILER_RAII
(
\
ctx
label
nullptr
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_BASE_PROFILER_LABEL_DYNAMIC_FAST
(
label
dynamicString
\
categoryPair
ctx
flags
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerLabel
BASE_PROFILER_RAII
(
\
ctx
label
dynamicString
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
flags
)
#
define
BASE_PROFILER_ADD_MARKER
(
markerName
categoryPair
)
\
:
:
mozilla
:
:
baseprofiler
:
:
profiler_add_marker
(
\
markerName
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
)
MFBT_API
void
profiler_add_marker
(
const
char
*
aMarkerName
ProfilingCategoryPair
aCategoryPair
)
;
MFBT_API
void
profiler_add_marker
(
const
char
*
aMarkerName
ProfilingCategoryPair
aCategoryPair
UniquePtr
<
ProfilerMarkerPayload
>
aPayload
)
;
MFBT_API
void
profiler_add_js_marker
(
const
char
*
aMarkerName
)
;
MFBT_API
void
profiler_add_marker_for_thread
(
int
aThreadId
ProfilingCategoryPair
aCategoryPair
const
char
*
aMarkerName
UniquePtr
<
ProfilerMarkerPayload
>
aPayload
)
;
enum
TracingKind
{
TRACING_EVENT
TRACING_INTERVAL_START
TRACING_INTERVAL_END
}
;
#
define
MOZDECLARE_DOCSHELL_AND_HISTORY_ID
(
docShell
)
\
Maybe
<
std
:
:
string
>
docShellId
;
\
Maybe
<
uint32_t
>
docShellHistoryId
;
\
if
(
docShell
)
{
\
docShellId
=
mozilla
:
:
Some
(
docShell
-
>
HistoryID
(
)
)
;
\
uint32_t
id
;
\
nsresult
rv
=
docShell
-
>
GetOSHEId
(
&
id
)
;
\
if
(
NS_SUCCEEDED
(
rv
)
)
{
\
docShellHistoryId
=
mozilla
:
:
Some
(
id
)
;
\
}
else
{
\
docShellHistoryId
=
mozilla
:
:
Nothing
(
)
;
\
}
\
}
else
{
\
docShellId
=
mozilla
:
:
Nothing
(
)
;
\
docShellHistoryId
=
mozilla
:
:
Nothing
(
)
;
\
}
#
define
BASE_PROFILER_TRACING
(
categoryString
markerName
categoryPair
\
kind
)
\
:
:
mozilla
:
:
baseprofiler
:
:
profiler_tracing
(
\
categoryString
markerName
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
kind
)
#
define
BASE_PROFILER_TRACING_DOCSHELL
(
categoryString
markerName
\
categoryPair
kind
docShell
)
\
MOZDECLARE_DOCSHELL_AND_HISTORY_ID
(
docShell
)
;
\
:
:
mozilla
:
:
baseprofiler
:
:
profiler_tracing
(
\
categoryString
markerName
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
kind
\
docShellId
docShellHistoryId
)
MFBT_API
void
profiler_tracing
(
const
char
*
aCategoryString
const
char
*
aMarkerName
ProfilingCategoryPair
aCategoryPair
TracingKind
aKind
const
Maybe
<
std
:
:
string
>
&
aDocShellId
=
Nothing
(
)
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
=
Nothing
(
)
)
;
MFBT_API
void
profiler_tracing
(
const
char
*
aCategoryString
const
char
*
aMarkerName
ProfilingCategoryPair
aCategoryPair
TracingKind
aKind
UniqueProfilerBacktrace
aCause
const
Maybe
<
std
:
:
string
>
&
aDocShellId
=
Nothing
(
)
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
=
Nothing
(
)
)
;
#
define
AUTO_BASE_PROFILER_TRACING
(
categoryString
markerName
categoryPair
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerTracing
BASE_PROFILER_RAII
(
\
categoryString
markerName
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
\
Nothing
(
)
Nothing
(
)
)
#
define
AUTO_BASE_PROFILER_TRACING_DOCSHELL
(
categoryString
markerName
\
categoryPair
docShell
)
\
MOZDECLARE_DOCSHELL_AND_HISTORY_ID
(
docShell
)
;
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerTracing
BASE_PROFILER_RAII
(
\
categoryString
markerName
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
\
docShellId
docShellHistoryId
)
MFBT_API
void
profiler_add_text_marker
(
const
char
*
aMarkerName
const
std
:
:
string
&
aText
ProfilingCategoryPair
aCategoryPair
const
TimeStamp
&
aStartTime
const
TimeStamp
&
aEndTime
const
Maybe
<
std
:
:
string
>
&
aDocShellId
=
Nothing
(
)
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
=
Nothing
(
)
UniqueProfilerBacktrace
aCause
=
nullptr
)
;
class
MOZ_RAII
AutoProfilerTextMarker
{
public
:
AutoProfilerTextMarker
(
const
char
*
aMarkerName
const
std
:
:
string
&
aText
ProfilingCategoryPair
aCategoryPair
const
Maybe
<
std
:
:
string
>
&
aDocShellId
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
UniqueProfilerBacktrace
&
&
aCause
=
nullptr
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mMarkerName
(
aMarkerName
)
mText
(
aText
)
mCategoryPair
(
aCategoryPair
)
mStartTime
(
TimeStamp
:
:
Now
(
)
)
mCause
(
std
:
:
move
(
aCause
)
)
mDocShellId
(
aDocShellId
)
mDocShellHistoryId
(
aDocShellHistoryId
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
}
~
AutoProfilerTextMarker
(
)
{
profiler_add_text_marker
(
mMarkerName
mText
mCategoryPair
mStartTime
TimeStamp
:
:
Now
(
)
mDocShellId
mDocShellHistoryId
std
:
:
move
(
mCause
)
)
;
}
protected
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
const
char
*
mMarkerName
;
std
:
:
string
mText
;
const
ProfilingCategoryPair
mCategoryPair
;
TimeStamp
mStartTime
;
UniqueProfilerBacktrace
mCause
;
const
Maybe
<
std
:
:
string
>
mDocShellId
;
const
Maybe
<
uint32_t
>
mDocShellHistoryId
;
}
;
#
define
AUTO_BASE_PROFILER_TEXT_MARKER_CAUSE
(
markerName
text
categoryPair
\
cause
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerTextMarker
BASE_PROFILER_RAII
(
\
markerName
text
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
\
mozilla
:
:
Nothing
(
)
mozilla
:
:
Nothing
(
)
cause
)
#
define
AUTO_BASE_PROFILER_TEXT_MARKER_DOCSHELL
(
markerName
text
\
categoryPair
docShell
)
\
MOZDECLARE_DOCSHELL_AND_HISTORY_ID
(
docShell
)
;
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerTextMarker
BASE_PROFILER_RAII
(
\
markerName
text
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
\
docShellId
docShellHistoryId
)
#
define
AUTO_BASE_PROFILER_TEXT_MARKER_DOCSHELL_CAUSE
(
\
markerName
text
categoryPair
docShell
cause
)
\
MOZDECLARE_DOCSHELL_AND_HISTORY_ID
(
docShell
)
;
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerTextMarker
BASE_PROFILER_RAII
(
\
markerName
text
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
\
docShellId
docShellHistoryId
cause
)
MFBT_API
void
profiler_set_process_name
(
const
std
:
:
string
&
aProcessName
)
;
MFBT_API
UniquePtr
<
char
[
]
>
profiler_get_profile
(
double
aSinceTime
=
0
bool
aIsShuttingDown
=
false
)
;
MFBT_API
bool
profiler_stream_json_for_this_process
(
SpliceableJSONWriter
&
aWriter
double
aSinceTime
=
0
bool
aIsShuttingDown
=
false
)
;
MFBT_API
void
profiler_save_profile_to_file
(
const
char
*
aFilename
)
;
class
MOZ_RAII
AutoProfilerInit
{
public
:
explicit
AutoProfilerInit
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_init
(
this
)
;
}
~
AutoProfilerInit
(
)
{
profiler_shutdown
(
)
;
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoProfilerRegisterThread
final
{
public
:
explicit
AutoProfilerRegisterThread
(
const
char
*
aName
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_register_thread
(
aName
this
)
;
}
~
AutoProfilerRegisterThread
(
)
{
profiler_unregister_thread
(
)
;
}
private
:
AutoProfilerRegisterThread
(
const
AutoProfilerRegisterThread
&
)
=
delete
;
AutoProfilerRegisterThread
&
operator
=
(
const
AutoProfilerRegisterThread
&
)
=
delete
;
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoProfilerThreadSleep
{
public
:
explicit
AutoProfilerThreadSleep
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_thread_sleep
(
)
;
}
~
AutoProfilerThreadSleep
(
)
{
profiler_thread_wake
(
)
;
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
}
;
class
MOZ_RAII
AutoProfilerThreadWake
{
public
:
explicit
AutoProfilerThreadWake
(
MOZ_GUARD_OBJECT_NOTIFIER_ONLY_PARAM
)
:
mIssuedWake
(
profiler_thread_is_sleeping
(
)
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
if
(
mIssuedWake
)
{
profiler_thread_wake
(
)
;
}
}
~
AutoProfilerThreadWake
(
)
{
if
(
mIssuedWake
)
{
MOZ_ASSERT
(
!
profiler_thread_is_sleeping
(
)
)
;
profiler_thread_sleep
(
)
;
}
}
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
bool
mIssuedWake
;
}
;
class
MOZ_RAII
AutoProfilerLabel
{
public
:
AutoProfilerLabel
(
const
char
*
aLabel
const
char
*
aDynamicString
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
Push
(
GetProfilingStack
(
)
aLabel
aDynamicString
aCategoryPair
aFlags
)
;
}
void
Push
(
ProfilingStack
*
aProfilingStack
const
char
*
aLabel
const
char
*
aDynamicString
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
)
{
mProfilingStack
=
aProfilingStack
;
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pushLabelFrame
(
aLabel
aDynamicString
this
aCategoryPair
aFlags
)
;
}
}
~
AutoProfilerLabel
(
)
{
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pop
(
)
;
}
}
MFBT_API
static
ProfilingStack
*
GetProfilingStack
(
)
;
private
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
ProfilingStack
*
mProfilingStack
;
public
:
static
MOZ_THREAD_LOCAL
(
ProfilingStack
*
)
sProfilingStack
;
}
;
class
MOZ_RAII
AutoProfilerTracing
{
public
:
AutoProfilerTracing
(
const
char
*
aCategoryString
const
char
*
aMarkerName
ProfilingCategoryPair
aCategoryPair
const
Maybe
<
std
:
:
string
>
&
aDocShellId
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mCategoryString
(
aCategoryString
)
mMarkerName
(
aMarkerName
)
mCategoryPair
(
aCategoryPair
)
mDocShellId
(
aDocShellId
)
mDocShellHistoryId
(
aDocShellHistoryId
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_tracing
(
mCategoryString
mMarkerName
aCategoryPair
TRACING_INTERVAL_START
mDocShellId
mDocShellHistoryId
)
;
}
AutoProfilerTracing
(
const
char
*
aCategoryString
const
char
*
aMarkerName
ProfilingCategoryPair
aCategoryPair
UniqueProfilerBacktrace
aBacktrace
const
Maybe
<
std
:
:
string
>
&
aDocShellId
const
Maybe
<
uint32_t
>
&
aDocShellHistoryId
MOZ_GUARD_OBJECT_NOTIFIER_PARAM
)
:
mCategoryString
(
aCategoryString
)
mMarkerName
(
aMarkerName
)
mCategoryPair
(
aCategoryPair
)
mDocShellId
(
aDocShellId
)
mDocShellHistoryId
(
aDocShellHistoryId
)
{
MOZ_GUARD_OBJECT_NOTIFIER_INIT
;
profiler_tracing
(
mCategoryString
mMarkerName
aCategoryPair
TRACING_INTERVAL_START
std
:
:
move
(
aBacktrace
)
mDocShellId
mDocShellHistoryId
)
;
}
~
AutoProfilerTracing
(
)
{
profiler_tracing
(
mCategoryString
mMarkerName
mCategoryPair
TRACING_INTERVAL_END
mDocShellId
mDocShellHistoryId
)
;
}
protected
:
MOZ_DECL_USE_GUARD_OBJECT_NOTIFIER
const
char
*
mCategoryString
;
const
char
*
mMarkerName
;
const
ProfilingCategoryPair
mCategoryPair
;
const
Maybe
<
std
:
:
string
>
mDocShellId
;
const
Maybe
<
uint32_t
>
mDocShellHistoryId
;
}
;
MFBT_API
void
GetProfilerEnvVarsForChildProcess
(
std
:
:
function
<
void
(
const
char
*
key
const
char
*
value
)
>
&
&
aSetEnv
)
;
}
}
#
endif
#
endif
