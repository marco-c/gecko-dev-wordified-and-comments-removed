#
ifndef
BaseProfiler_h
#
define
BaseProfiler_h
#
include
"
mozilla
/
BaseProfilerCounts
.
h
"
#
include
"
mozilla
/
BaseProfilerMarkers
.
h
"
#
include
"
mozilla
/
BaseProfilerState
.
h
"
#
ifndef
MOZ_GECKO_PROFILER
#
include
"
mozilla
/
UniquePtr
.
h
"
#
define
AUTO_BASE_PROFILER_INIT
#
define
BASE_PROFILER_REGISTER_THREAD
(
name
)
#
define
BASE_PROFILER_UNREGISTER_THREAD
(
)
#
define
AUTO_BASE_PROFILER_REGISTER_THREAD
(
name
)
#
define
AUTO_BASE_PROFILER_THREAD_SLEEP
#
define
AUTO_BASE_PROFILER_THREAD_WAKE
#
define
AUTO_BASE_PROFILER_LABEL
(
label
categoryPair
)
#
define
AUTO_BASE_PROFILER_LABEL_CATEGORY_PAIR
(
categoryPair
)
#
define
AUTO_BASE_PROFILER_LABEL_DYNAMIC_CSTR
(
label
categoryPair
cStr
)
#
define
AUTO_BASE_PROFILER_LABEL_DYNAMIC_STRING
(
label
categoryPair
str
)
#
define
AUTO_BASE_PROFILER_LABEL_FAST
(
label
categoryPair
ctx
)
#
define
AUTO_BASE_PROFILER_LABEL_DYNAMIC_FAST
(
label
dynamicString
\
categoryPair
ctx
flags
)
namespace
mozilla
{
class
ProfileChunkedBuffer
{
}
;
namespace
baseprofiler
{
struct
ProfilerBacktrace
{
}
;
using
UniqueProfilerBacktrace
=
UniquePtr
<
ProfilerBacktrace
>
;
static
inline
UniqueProfilerBacktrace
profiler_get_backtrace
(
)
{
return
nullptr
;
}
static
inline
bool
profiler_capture_backtrace_into
(
ProfileChunkedBuffer
&
aChunkedBuffer
StackCaptureOptions
aCaptureOptions
)
{
return
false
;
}
static
inline
UniquePtr
<
ProfileChunkedBuffer
>
profiler_capture_backtrace
(
)
{
return
nullptr
;
}
}
}
#
else
#
include
"
BaseProfilingStack
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PowerOfTwo
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
ThreadLocal
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
<
functional
>
#
include
<
stdint
.
h
>
#
include
<
string
>
namespace
mozilla
{
class
MallocAllocPolicy
;
class
ProfileChunkedBuffer
;
enum
class
StackCaptureOptions
;
template
<
class
T
size_t
MinInlineCapacity
class
AllocPolicy
>
class
Vector
;
namespace
baseprofiler
{
class
ProfilerBacktrace
;
class
SpliceableJSONWriter
;
#
define
BASE_PROFILER_RAII_PASTE
(
id
line
)
id
#
#
line
#
define
BASE_PROFILER_RAII_EXPAND
(
id
line
)
BASE_PROFILER_RAII_PASTE
(
id
line
)
#
define
BASE_PROFILER_RAII
BASE_PROFILER_RAII_EXPAND
(
raiiObject
__LINE__
)
static
constexpr
PowerOfTwo32
BASE_PROFILER_DEFAULT_ENTRIES
=
#
if
!
defined
(
GP_PLAT_arm_android
)
MakePowerOfTwo32
<
1024
*
1024
>
(
)
;
#
else
MakePowerOfTwo32
<
128
*
1024
>
(
)
;
/
/
128k
entries
=
1MB
#
endif
static
constexpr
PowerOfTwo32
BASE_PROFILER_DEFAULT_STARTUP_ENTRIES
=
#
if
!
defined
(
GP_PLAT_arm_android
)
MakePowerOfTwo32
<
4
*
1024
*
1024
>
(
)
;
#
else
MakePowerOfTwo32
<
256
*
1024
>
(
)
;
/
/
256k
entries
=
2MB
#
endif
#
define
BASE_PROFILER_DEFAULT_DURATION
20
#
define
BASE_PROFILER_DEFAULT_INTERVAL
1
MFBT_API
void
profiler_init
(
void
*
stackTop
)
;
#
define
AUTO_BASE_PROFILER_INIT
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerInit
BASE_PROFILER_RAII
MFBT_API
void
profiler_shutdown
(
)
;
MFBT_API
void
profiler_start
(
PowerOfTwo32
aCapacity
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
uint32_t
aFilterCount
const
Maybe
<
double
>
&
aDuration
=
Nothing
(
)
)
;
MFBT_API
void
profiler_stop
(
)
;
MFBT_API
void
profiler_ensure_started
(
PowerOfTwo32
aCapacity
double
aInterval
uint32_t
aFeatures
const
char
*
*
aFilters
uint32_t
aFilterCount
const
Maybe
<
double
>
&
aDuration
=
Nothing
(
)
)
;
#
define
BASE_PROFILER_REGISTER_THREAD
(
name
)
\
do
{
\
char
stackTop
;
\
:
:
mozilla
:
:
baseprofiler
:
:
profiler_register_thread
(
name
&
stackTop
)
;
\
}
while
(
0
)
#
define
BASE_PROFILER_UNREGISTER_THREAD
(
)
\
:
:
mozilla
:
:
baseprofiler
:
:
profiler_unregister_thread
(
)
MFBT_API
ProfilingStack
*
profiler_register_thread
(
const
char
*
name
void
*
guessStackTop
)
;
MFBT_API
void
profiler_unregister_thread
(
)
;
MFBT_API
void
profiler_register_page
(
uint64_t
aBrowsingContextID
uint64_t
aInnerWindowID
const
std
:
:
string
&
aUrl
uint64_t
aEmbedderInnerWindowID
)
;
MFBT_API
void
profiler_unregister_page
(
uint64_t
aRegisteredInnerWindowID
)
;
void
profiler_clear_all_pages
(
)
;
class
BaseProfilerCount
;
MFBT_API
void
profiler_add_sampled_counter
(
BaseProfilerCount
*
aCounter
)
;
MFBT_API
void
profiler_remove_sampled_counter
(
BaseProfilerCount
*
aCounter
)
;
#
define
AUTO_BASE_PROFILER_REGISTER_THREAD
(
name
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerRegisterThread
BASE_PROFILER_RAII
(
name
)
MFBT_API
void
profiler_pause
(
)
;
MFBT_API
void
profiler_resume
(
)
;
MFBT_API
void
profiler_pause_sampling
(
)
;
MFBT_API
void
profiler_resume_sampling
(
)
;
MFBT_API
void
profiler_thread_sleep
(
)
;
MFBT_API
void
profiler_thread_wake
(
)
;
#
define
AUTO_BASE_PROFILER_THREAD_SLEEP
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerThreadSleep
BASE_PROFILER_RAII
#
define
AUTO_BASE_PROFILER_THREAD_WAKE
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerThreadWake
BASE_PROFILER_RAII
MFBT_API
void
profiler_get_start_params
(
int
*
aEntrySize
Maybe
<
double
>
*
aDuration
double
*
aInterval
uint32_t
*
aFeatures
Vector
<
const
char
*
0
MallocAllocPolicy
>
*
aFilters
)
;
MFBT_API
double
profiler_time
(
)
;
class
ProfilerStackCollector
{
public
:
virtual
Maybe
<
uint64_t
>
SamplePositionInBuffer
(
)
{
return
Nothing
(
)
;
}
virtual
Maybe
<
uint64_t
>
BufferRangeStart
(
)
{
return
Nothing
(
)
;
}
virtual
void
SetIsMainThread
(
)
{
}
virtual
void
CollectNativeLeafAddr
(
void
*
aAddr
)
=
0
;
virtual
void
CollectProfilingStackFrame
(
const
ProfilingStackFrame
&
aFrame
)
=
0
;
}
;
MFBT_API
void
profiler_suspend_and_sample_thread
(
int
aThreadId
uint32_t
aFeatures
ProfilerStackCollector
&
aCollector
bool
aSampleNative
=
true
)
;
struct
ProfilerBacktraceDestructor
{
MFBT_API
void
operator
(
)
(
ProfilerBacktrace
*
)
;
}
;
using
UniqueProfilerBacktrace
=
UniquePtr
<
ProfilerBacktrace
ProfilerBacktraceDestructor
>
;
MFBT_API
bool
profiler_capture_backtrace_into
(
ProfileChunkedBuffer
&
aChunkedBuffer
StackCaptureOptions
aCaptureOptions
)
;
MFBT_API
UniquePtr
<
ProfileChunkedBuffer
>
profiler_capture_backtrace
(
)
;
MFBT_API
UniqueProfilerBacktrace
profiler_get_backtrace
(
)
;
struct
ProfilerStats
{
unsigned
n
=
0
;
double
sum
=
0
;
double
min
=
std
:
:
numeric_limits
<
double
>
:
:
max
(
)
;
double
max
=
0
;
void
Count
(
double
v
)
{
+
+
n
;
sum
+
=
v
;
if
(
v
<
min
)
{
min
=
v
;
}
if
(
v
>
max
)
{
max
=
v
;
}
}
}
;
struct
ProfilerBufferInfo
{
uint64_t
mRangeStart
;
uint64_t
mRangeEnd
;
uint32_t
mEntryCount
;
ProfilerStats
mIntervalsUs
;
ProfilerStats
mOverheadsUs
;
ProfilerStats
mLockingsUs
;
ProfilerStats
mCleaningsUs
;
ProfilerStats
mCountersUs
;
ProfilerStats
mThreadsUs
;
}
;
MFBT_API
Maybe
<
ProfilerBufferInfo
>
profiler_get_buffer_info
(
)
;
}
}
namespace
mozilla
{
namespace
baseprofiler
{
#
define
AUTO_BASE_PROFILER_LABEL
(
label
categoryPair
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerLabel
BASE_PROFILER_RAII
(
\
label
nullptr
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_BASE_PROFILER_LABEL_CATEGORY_PAIR
(
categoryPair
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerLabel
BASE_PROFILER_RAII
(
\
"
"
nullptr
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
\
uint32_t
(
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingStackFrame
:
:
Flags
:
:
\
LABEL_DETERMINED_BY_CATEGORY_PAIR
)
)
#
define
AUTO_BASE_PROFILER_LABEL_DYNAMIC_CSTR
(
label
categoryPair
cStr
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerLabel
BASE_PROFILER_RAII
(
\
label
cStr
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_BASE_PROFILER_LABEL_DYNAMIC_STRING
(
label
categoryPair
str
)
\
Maybe
<
std
:
:
string
>
autoStr
;
\
Maybe
<
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerLabel
>
raiiObjectString
;
\
if
(
:
:
mozilla
:
:
baseprofiler
:
:
profiler_is_active
(
)
)
{
\
autoStr
.
emplace
(
str
)
;
\
raiiObjectString
.
emplace
(
\
label
autoStr
-
>
c_str
(
)
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
)
;
\
}
#
define
AUTO_BASE_PROFILER_LABEL_FAST
(
label
categoryPair
ctx
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerLabel
BASE_PROFILER_RAII
(
\
ctx
label
nullptr
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
)
#
define
AUTO_BASE_PROFILER_LABEL_DYNAMIC_FAST
(
label
dynamicString
\
categoryPair
ctx
flags
)
\
:
:
mozilla
:
:
baseprofiler
:
:
AutoProfilerLabel
BASE_PROFILER_RAII
(
\
ctx
label
dynamicString
\
:
:
mozilla
:
:
baseprofiler
:
:
ProfilingCategoryPair
:
:
categoryPair
flags
)
MFBT_API
void
profiler_add_js_marker
(
const
char
*
aMarkerName
const
char
*
aMarkerText
)
;
MFBT_API
void
profiler_set_process_name
(
const
std
:
:
string
&
aProcessName
const
std
:
:
string
*
aETLDplus1
)
;
MFBT_API
UniquePtr
<
char
[
]
>
profiler_get_profile
(
double
aSinceTime
=
0
bool
aIsShuttingDown
=
false
bool
aOnlyThreads
=
false
)
;
MFBT_API
bool
profiler_stream_json_for_this_process
(
SpliceableJSONWriter
&
aWriter
double
aSinceTime
=
0
bool
aIsShuttingDown
=
false
bool
aOnlyThreads
=
false
)
;
MFBT_API
void
profiler_save_profile_to_file
(
const
char
*
aFilename
)
;
class
MOZ_RAII
AutoProfilerInit
{
public
:
explicit
AutoProfilerInit
(
)
{
profiler_init
(
this
)
;
}
~
AutoProfilerInit
(
)
{
profiler_shutdown
(
)
;
}
private
:
}
;
class
MOZ_RAII
AutoProfilerRegisterThread
final
{
public
:
explicit
AutoProfilerRegisterThread
(
const
char
*
aName
)
{
profiler_register_thread
(
aName
this
)
;
}
~
AutoProfilerRegisterThread
(
)
{
profiler_unregister_thread
(
)
;
}
private
:
AutoProfilerRegisterThread
(
const
AutoProfilerRegisterThread
&
)
=
delete
;
AutoProfilerRegisterThread
&
operator
=
(
const
AutoProfilerRegisterThread
&
)
=
delete
;
}
;
class
MOZ_RAII
AutoProfilerThreadSleep
{
public
:
explicit
AutoProfilerThreadSleep
(
)
{
profiler_thread_sleep
(
)
;
}
~
AutoProfilerThreadSleep
(
)
{
profiler_thread_wake
(
)
;
}
private
:
}
;
class
MOZ_RAII
AutoProfilerThreadWake
{
public
:
explicit
AutoProfilerThreadWake
(
)
:
mIssuedWake
(
profiler_thread_is_sleeping
(
)
)
{
if
(
mIssuedWake
)
{
profiler_thread_wake
(
)
;
}
}
~
AutoProfilerThreadWake
(
)
{
if
(
mIssuedWake
)
{
MOZ_ASSERT
(
!
profiler_thread_is_sleeping
(
)
)
;
profiler_thread_sleep
(
)
;
}
}
private
:
bool
mIssuedWake
;
}
;
class
MOZ_RAII
AutoProfilerLabel
{
public
:
AutoProfilerLabel
(
const
char
*
aLabel
const
char
*
aDynamicString
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
)
{
Push
(
GetProfilingStack
(
)
aLabel
aDynamicString
aCategoryPair
aFlags
)
;
}
void
Push
(
ProfilingStack
*
aProfilingStack
const
char
*
aLabel
const
char
*
aDynamicString
ProfilingCategoryPair
aCategoryPair
uint32_t
aFlags
=
0
)
{
mProfilingStack
=
aProfilingStack
;
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pushLabelFrame
(
aLabel
aDynamicString
this
aCategoryPair
aFlags
)
;
}
}
~
AutoProfilerLabel
(
)
{
if
(
mProfilingStack
)
{
mProfilingStack
-
>
pop
(
)
;
}
}
MFBT_API
static
ProfilingStack
*
GetProfilingStack
(
)
;
private
:
ProfilingStack
*
mProfilingStack
;
public
:
static
MOZ_THREAD_LOCAL
(
ProfilingStack
*
)
sProfilingStack
;
}
;
MFBT_API
void
GetProfilerEnvVarsForChildProcess
(
std
:
:
function
<
void
(
const
char
*
key
const
char
*
value
)
>
&
&
aSetEnv
)
;
}
}
#
endif
#
endif
