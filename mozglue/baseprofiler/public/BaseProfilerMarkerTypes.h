#
ifndef
BaseProfilerMarkerTypes_h
#
define
BaseProfilerMarkerTypes_h
#
include
"
mozilla
/
BaseProfilerMarkers
.
h
"
#
ifdef
MOZ_GECKO_PROFILER
namespace
mozilla
:
:
baseprofiler
:
:
markers
{
struct
Tracing
{
static
constexpr
Span
<
const
char
>
MarkerTypeName
(
)
{
return
MakeStringSpan
(
"
tracing
"
)
;
}
static
void
StreamJSONMarkerData
(
SpliceableJSONWriter
&
aWriter
const
ProfilerString8View
&
aCategory
)
{
if
(
aCategory
.
Length
(
)
!
=
0
)
{
aWriter
.
StringProperty
(
"
category
"
aCategory
)
;
}
}
static
MarkerSchema
MarkerTypeDisplay
(
)
{
using
MS
=
MarkerSchema
;
MS
schema
{
MS
:
:
Location
:
:
markerChart
MS
:
:
Location
:
:
markerTable
MS
:
:
Location
:
:
timelineOverview
}
;
schema
.
AddKeyLabelFormat
(
"
category
"
"
Type
"
MS
:
:
Format
:
:
string
)
;
return
schema
;
}
}
;
struct
UserTimingMark
{
static
constexpr
Span
<
const
char
>
MarkerTypeName
(
)
{
return
MakeStringSpan
(
"
UserTimingMark
"
)
;
}
static
void
StreamJSONMarkerData
(
SpliceableJSONWriter
&
aWriter
const
ProfilerString8View
&
aName
)
{
aWriter
.
StringProperty
(
"
name
"
aName
)
;
aWriter
.
StringProperty
(
"
entryType
"
"
mark
"
)
;
aWriter
.
NullProperty
(
"
startMark
"
)
;
aWriter
.
NullProperty
(
"
endMark
"
)
;
}
static
MarkerSchema
MarkerTypeDisplay
(
)
{
using
MS
=
MarkerSchema
;
MS
schema
{
MS
:
:
Location
:
:
markerChart
MS
:
:
Location
:
:
markerTable
}
;
schema
.
SetAllLabels
(
"
{
marker
.
data
.
name
}
"
)
;
schema
.
AddStaticLabelValue
(
"
Marker
"
"
UserTiming
"
)
;
schema
.
AddKeyLabelFormat
(
"
entryType
"
"
Entry
Type
"
MS
:
:
Format
:
:
string
)
;
schema
.
AddKeyLabelFormat
(
"
name
"
"
Name
"
MS
:
:
Format
:
:
string
)
;
schema
.
AddStaticLabelValue
(
"
Description
"
"
UserTimingMark
is
created
using
the
DOM
API
performance
.
mark
(
)
.
"
)
;
return
schema
;
}
}
;
struct
UserTimingMeasure
{
static
constexpr
Span
<
const
char
>
MarkerTypeName
(
)
{
return
MakeStringSpan
(
"
UserTimingMeasure
"
)
;
}
static
void
StreamJSONMarkerData
(
SpliceableJSONWriter
&
aWriter
const
ProfilerString8View
&
aName
const
Maybe
<
ProfilerString8View
>
&
aStartMark
const
Maybe
<
ProfilerString8View
>
&
aEndMark
)
{
aWriter
.
StringProperty
(
"
name
"
aName
)
;
aWriter
.
StringProperty
(
"
entryType
"
"
measure
"
)
;
if
(
aStartMark
.
isSome
(
)
)
{
aWriter
.
StringProperty
(
"
startMark
"
*
aStartMark
)
;
}
else
{
aWriter
.
NullProperty
(
"
startMark
"
)
;
}
if
(
aEndMark
.
isSome
(
)
)
{
aWriter
.
StringProperty
(
"
endMark
"
*
aEndMark
)
;
}
else
{
aWriter
.
NullProperty
(
"
endMark
"
)
;
}
}
static
MarkerSchema
MarkerTypeDisplay
(
)
{
using
MS
=
MarkerSchema
;
MS
schema
{
MS
:
:
Location
:
:
markerChart
MS
:
:
Location
:
:
markerTable
}
;
schema
.
SetAllLabels
(
"
{
marker
.
data
.
name
}
"
)
;
schema
.
AddStaticLabelValue
(
"
Marker
"
"
UserTiming
"
)
;
schema
.
AddKeyLabelFormat
(
"
entryType
"
"
Entry
Type
"
MS
:
:
Format
:
:
string
)
;
schema
.
AddKeyLabelFormat
(
"
name
"
"
Name
"
MS
:
:
Format
:
:
string
)
;
schema
.
AddKeyLabelFormat
(
"
startMark
"
"
Start
Mark
"
MS
:
:
Format
:
:
string
)
;
schema
.
AddKeyLabelFormat
(
"
endMark
"
"
End
Mark
"
MS
:
:
Format
:
:
string
)
;
schema
.
AddStaticLabelValue
(
"
Description
"
"
UserTimingMeasure
is
created
using
the
DOM
API
"
"
performance
.
measure
(
)
.
"
)
;
return
schema
;
}
}
;
struct
MediaSample
{
static
constexpr
Span
<
const
char
>
MarkerTypeName
(
)
{
return
MakeStringSpan
(
"
MediaSample
"
)
;
}
static
void
StreamJSONMarkerData
(
SpliceableJSONWriter
&
aWriter
int64_t
aSampleStartTimeUs
int64_t
aSampleEndTimeUs
)
{
aWriter
.
IntProperty
(
"
sampleStartTimeUs
"
aSampleStartTimeUs
)
;
aWriter
.
IntProperty
(
"
sampleEndTimeUs
"
aSampleEndTimeUs
)
;
}
static
MarkerSchema
MarkerTypeDisplay
(
)
{
using
MS
=
MarkerSchema
;
MS
schema
{
MS
:
:
Location
:
:
markerChart
MS
:
:
Location
:
:
markerTable
}
;
schema
.
AddKeyLabelFormat
(
"
sampleStartTimeUs
"
"
Sample
start
time
"
MS
:
:
Format
:
:
microseconds
)
;
schema
.
AddKeyLabelFormat
(
"
sampleEndTimeUs
"
"
Sample
end
time
"
MS
:
:
Format
:
:
microseconds
)
;
return
schema
;
}
}
;
}
#
endif
#
endif
