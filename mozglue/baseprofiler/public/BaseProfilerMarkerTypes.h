#
ifndef
BaseProfilerMarkerTypes_h
#
define
BaseProfilerMarkerTypes_h
#
include
"
mozilla
/
BaseProfilerMarkers
.
h
"
#
ifdef
MOZ_GECKO_PROFILER
namespace
mozilla
:
:
baseprofiler
:
:
markers
{
struct
Tracing
{
static
constexpr
const
char
*
MarkerTypeName
(
)
{
return
"
tracing
"
;
}
static
void
StreamJSONMarkerData
(
JSONWriter
&
aWriter
const
ProfilerString8View
&
aCategory
)
{
if
(
aCategory
.
Length
(
)
!
=
0
)
{
aWriter
.
StringProperty
(
"
category
"
aCategory
.
String
(
)
.
c_str
(
)
)
;
}
}
}
;
struct
FileIO
{
static
constexpr
const
char
*
MarkerTypeName
(
)
{
return
"
FileIO
"
;
}
static
void
StreamJSONMarkerData
(
JSONWriter
&
aWriter
const
ProfilerString8View
&
aOperation
const
ProfilerString8View
&
aSource
const
ProfilerString8View
&
aFilename
MarkerThreadId
aOperationThreadId
)
{
aWriter
.
StringProperty
(
"
operation
"
aOperation
.
String
(
)
.
c_str
(
)
)
;
aWriter
.
StringProperty
(
"
source
"
aSource
.
String
(
)
.
c_str
(
)
)
;
if
(
aFilename
.
Length
(
)
!
=
0
)
{
aWriter
.
StringProperty
(
"
filename
"
aFilename
.
String
(
)
.
c_str
(
)
)
;
}
if
(
!
aOperationThreadId
.
IsUnspecified
(
)
)
{
aWriter
.
IntProperty
(
"
threadId
"
aOperationThreadId
.
ThreadId
(
)
)
;
}
}
}
;
struct
UserTimingMark
{
static
constexpr
const
char
*
MarkerTypeName
(
)
{
return
"
UserTiming
"
;
}
static
void
StreamJSONMarkerData
(
JSONWriter
&
aWriter
const
ProfilerString8View
&
aName
)
{
aWriter
.
StringProperty
(
"
name
"
aName
.
String
(
)
.
c_str
(
)
)
;
aWriter
.
StringProperty
(
"
entryType
"
"
mark
"
)
;
aWriter
.
NullProperty
(
"
startMark
"
)
;
aWriter
.
NullProperty
(
"
endMark
"
)
;
}
}
;
struct
UserTimingMeasure
{
static
constexpr
const
char
*
MarkerTypeName
(
)
{
return
"
UserTiming
"
;
}
static
void
StreamJSONMarkerData
(
JSONWriter
&
aWriter
const
ProfilerString8View
&
aName
const
Maybe
<
ProfilerString8View
>
&
aStartMark
const
Maybe
<
ProfilerString8View
>
&
aEndMark
)
{
aWriter
.
StringProperty
(
"
name
"
aName
.
String
(
)
.
c_str
(
)
)
;
aWriter
.
StringProperty
(
"
entryType
"
"
measure
"
)
;
if
(
aStartMark
.
isSome
(
)
)
{
aWriter
.
StringProperty
(
"
startMark
"
aStartMark
-
>
String
(
)
.
c_str
(
)
)
;
}
else
{
aWriter
.
NullProperty
(
"
startMark
"
)
;
}
if
(
aEndMark
.
isSome
(
)
)
{
aWriter
.
StringProperty
(
"
endMark
"
aEndMark
-
>
String
(
)
.
c_str
(
)
)
;
}
else
{
aWriter
.
NullProperty
(
"
endMark
"
)
;
}
}
}
;
struct
Hang
{
static
constexpr
const
char
*
MarkerTypeName
(
)
{
return
"
BHR
-
detected
hang
"
;
}
static
void
StreamJSONMarkerData
(
JSONWriter
&
aWriter
)
{
}
}
;
struct
LongTask
{
static
constexpr
const
char
*
MarkerTypeName
(
)
{
return
"
MainThreadLongTask
"
;
}
static
void
StreamJSONMarkerData
(
JSONWriter
&
aWriter
)
{
aWriter
.
StringProperty
(
"
category
"
"
LongTask
"
)
;
}
}
;
struct
Log
{
static
constexpr
const
char
*
MarkerTypeName
(
)
{
return
"
Log
"
;
}
static
void
StreamJSONMarkerData
(
JSONWriter
&
aWriter
const
ProfilerString8View
&
aModule
const
ProfilerString8View
&
aText
)
{
aWriter
.
StringProperty
(
"
module
"
aModule
.
String
(
)
.
c_str
(
)
)
;
aWriter
.
StringProperty
(
"
name
"
aText
.
String
(
)
.
c_str
(
)
)
;
}
}
;
struct
MediaSample
{
static
constexpr
const
char
*
MarkerTypeName
(
)
{
return
"
MediaSample
"
;
}
static
void
StreamJSONMarkerData
(
JSONWriter
&
aWriter
int64_t
aSampleStartTimeUs
int64_t
aSampleEndTimeUs
)
{
aWriter
.
IntProperty
(
"
sampleStartTimeUs
"
aSampleStartTimeUs
)
;
aWriter
.
IntProperty
(
"
sampleEndTimeUs
"
aSampleEndTimeUs
)
;
}
}
;
}
#
endif
#
endif
