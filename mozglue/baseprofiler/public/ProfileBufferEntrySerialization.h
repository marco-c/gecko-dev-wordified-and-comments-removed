#
ifndef
ProfileBufferEntrySerialization_h
#
define
ProfileBufferEntrySerialization_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
leb128iterator
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
ProfileBufferIndex
.
h
"
#
include
"
mozilla
/
Span
.
h
"
#
include
"
mozilla
/
Tuple
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
<
string
>
#
include
<
tuple
>
namespace
mozilla
{
class
ProfileBufferEntryWriter
;
class
ProfileBufferEntryReader
{
public
:
template
<
typename
T
>
struct
Deserializer
;
}
;
class
ProfileBufferEntryWriter
{
public
:
template
<
typename
T
>
struct
Serializer
;
}
;
template
<
typename
T
>
struct
ProfileBufferEntryWriter
:
:
Serializer
{
static_assert
(
std
:
:
is_trivially_copyable
<
T
>
:
:
value
"
Serializer
only
works
with
trivially
-
copyable
types
by
"
"
default
use
/
add
specialization
for
other
types
.
"
)
;
static
constexpr
Length
Bytes
(
const
T
&
)
{
return
sizeof
(
T
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
T
&
aT
)
{
static_assert
(
!
std
:
:
is_pointer
<
T
>
:
:
value
"
Serializer
won
'
t
write
raw
pointers
by
default
use
"
"
WrapProfileBufferRawPointer
or
other
.
"
)
;
aEW
.
WriteBytes
(
&
aT
sizeof
(
T
)
)
;
}
}
;
template
<
typename
T
>
struct
ProfileBufferEntryReader
:
:
Deserializer
{
static_assert
(
std
:
:
is_trivially_copyable
<
T
>
:
:
value
"
Deserializer
only
works
with
trivially
-
copyable
types
by
"
"
default
use
/
add
specialization
for
other
types
.
"
)
;
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
T
&
aT
)
{
aER
.
ReadBytes
(
&
aT
sizeof
(
T
)
)
;
}
static
T
Read
(
ProfileBufferEntryReader
&
aER
)
{
T
ob
;
ReadInto
(
aER
ob
)
;
return
ob
;
}
}
;
template
<
typename
T
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
const
T
>
:
public
ProfileBufferEntryWriter
:
:
Serializer
<
T
>
{
}
;
template
<
typename
T
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
const
T
>
:
public
ProfileBufferEntryReader
:
:
Deserializer
<
T
>
{
}
;
template
<
typename
T
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
volatile
T
>
:
public
ProfileBufferEntryWriter
:
:
Serializer
<
T
>
{
}
;
template
<
typename
T
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
volatile
T
>
:
public
ProfileBufferEntryReader
:
:
Deserializer
<
T
>
{
}
;
template
<
typename
T
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
T
&
>
:
public
ProfileBufferEntryWriter
:
:
Serializer
<
T
>
{
}
;
template
<
typename
T
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
T
&
>
:
public
ProfileBufferEntryReader
:
:
Deserializer
<
T
>
{
}
;
template
<
typename
T
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
T
&
&
>
:
public
ProfileBufferEntryWriter
:
:
Serializer
<
T
>
{
}
;
template
<
typename
T
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
T
&
&
>
:
public
ProfileBufferEntryReader
:
:
Deserializer
<
T
>
{
}
;
template
<
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
ProfileBufferBlockIndex
>
{
static
constexpr
Length
Bytes
(
const
ProfileBufferBlockIndex
&
aBlockIndex
)
{
return
sizeof
(
ProfileBufferBlockIndex
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
ProfileBufferBlockIndex
&
aBlockIndex
)
{
aEW
.
WriteBytes
(
&
aBlockIndex
sizeof
(
aBlockIndex
)
)
;
}
}
;
template
<
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
ProfileBufferBlockIndex
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
ProfileBufferBlockIndex
&
aBlockIndex
)
{
aER
.
ReadBytes
(
&
aBlockIndex
sizeof
(
aBlockIndex
)
)
;
}
static
ProfileBufferBlockIndex
Read
(
ProfileBufferEntryReader
&
aER
)
{
ProfileBufferBlockIndex
blockIndex
;
ReadInto
(
aER
blockIndex
)
;
return
blockIndex
;
}
}
;
template
<
size_t
NonTerminalCharacters
>
struct
ProfileBufferLiteralCStringPointer
{
const
char
*
mCString
;
}
;
template
<
size_t
CharactersIncludingTerminal
>
ProfileBufferLiteralCStringPointer
<
CharactersIncludingTerminal
-
1
>
WrapProfileBufferLiteralCStringPointer
(
const
char
(
&
aCString
)
[
CharactersIncludingTerminal
]
)
{
return
{
aCString
}
;
}
template
<
size_t
CharactersIncludingTerminal
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
ProfileBufferLiteralCStringPointer
<
CharactersIncludingTerminal
>
>
{
static
constexpr
Length
Bytes
(
const
ProfileBufferLiteralCStringPointer
<
CharactersIncludingTerminal
>
&
)
{
return
sizeof
(
const
char
*
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
ProfileBufferLiteralCStringPointer
<
CharactersIncludingTerminal
>
&
aWrapper
)
{
aEW
.
WriteBytes
(
aWrapper
.
mCString
sizeof
(
aWrapper
.
mCString
)
)
;
}
}
;
struct
ProfileBufferUnownedCString
{
const
char
*
mCString
;
}
;
inline
ProfileBufferUnownedCString
WrapProfileBufferUnownedCString
(
const
char
*
aCString
)
{
return
{
aCString
}
;
}
template
<
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
ProfileBufferUnownedCString
>
{
static
Length
Bytes
(
const
ProfileBufferUnownedCString
&
aS
)
{
const
auto
len
=
strlen
(
aS
.
mCString
)
;
return
ULEB128Size
(
len
)
+
len
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
ProfileBufferUnownedCString
&
aS
)
{
const
auto
len
=
strlen
(
aS
.
mCString
)
;
aEW
.
WriteULEB128
(
len
)
;
aEW
.
WriteBytes
(
aS
.
mCString
len
)
;
}
}
;
template
<
typename
T
>
struct
ProfileBufferRawPointer
{
T
*
mRawPointer
;
}
;
template
<
typename
T
>
ProfileBufferRawPointer
<
T
>
WrapProfileBufferRawPointer
(
T
*
aRawPointer
)
{
return
{
aRawPointer
}
;
}
template
<
typename
T
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
ProfileBufferRawPointer
<
T
>
>
{
template
<
typename
U
>
static
constexpr
Length
Bytes
(
const
U
&
)
{
return
sizeof
(
T
*
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
ProfileBufferRawPointer
<
T
>
&
aWrapper
)
{
aEW
.
WriteBytes
(
&
aWrapper
.
mRawPointer
sizeof
(
aWrapper
.
mRawPointer
)
)
;
}
}
;
template
<
typename
T
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
ProfileBufferRawPointer
<
T
>
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
T
*
&
aPtr
)
{
aER
.
ReadBytes
(
&
aPtr
sizeof
(
aPtr
)
)
;
}
static
T
*
Read
(
ProfileBufferEntryReader
&
aER
)
{
T
*
ptr
;
ReadInto
(
aER
ptr
)
;
return
ptr
;
}
}
;
template
<
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
std
:
:
string
>
{
static
Length
Bytes
(
const
std
:
:
string
&
aS
)
{
const
Length
len
=
static_cast
<
Length
>
(
aS
.
length
(
)
)
;
return
ULEB128Size
(
len
)
+
len
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
std
:
:
string
&
aS
)
{
const
Length
len
=
static_cast
<
Length
>
(
aS
.
length
(
)
)
;
aEW
.
WriteULEB128
(
len
)
;
aEW
.
WriteBytes
(
aS
.
c_str
(
)
len
)
;
}
}
;
template
<
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
std
:
:
string
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
std
:
:
string
&
aS
)
{
const
auto
len
=
aER
.
ReadULEB128
<
std
:
:
string
:
:
size_type
>
(
)
;
aS
.
assign
(
aER
aER
.
EmptyIteratorAtOffset
(
len
)
)
;
aER
+
=
len
;
}
static
std
:
:
string
Read
(
ProfileBufferEntryReader
&
aER
)
{
const
auto
len
=
aER
.
ReadULEB128
<
std
:
:
string
:
:
size_type
>
(
)
;
std
:
:
string
s
(
aER
aER
.
EmptyIteratorAtOffset
(
len
)
)
;
aER
+
=
len
;
return
s
;
}
}
;
template
<
typename
CHAR
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
UniqueFreePtr
<
CHAR
>
>
{
static
Length
Bytes
(
const
UniqueFreePtr
<
CHAR
>
&
aS
)
{
if
(
!
aS
)
{
return
ULEB128Size
(
0u
)
;
}
const
auto
bytes
=
std
:
:
char_traits
<
CHAR
>
:
:
length
(
aS
.
get
(
)
)
*
sizeof
(
CHAR
)
;
return
ULEB128Size
(
bytes
)
+
bytes
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
UniqueFreePtr
<
CHAR
>
&
aS
)
{
if
(
!
aS
)
{
aEW
.
WriteULEB128
(
0u
)
;
return
;
}
const
auto
bytes
=
std
:
:
char_traits
<
CHAR
>
:
:
length
(
aS
.
get
(
)
)
*
sizeof
(
CHAR
)
;
aEW
.
WriteULEB128
(
bytes
)
;
aEW
.
WriteBytes
(
aS
.
get
(
)
bytes
)
;
}
}
;
template
<
typename
CHAR
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
UniqueFreePtr
<
CHAR
>
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
UniqueFreePtr
<
CHAR
>
&
aS
)
{
aS
=
Read
(
aER
)
;
}
static
UniqueFreePtr
<
CHAR
>
Read
(
ProfileBufferEntryReader
&
aER
)
{
const
auto
bytes
=
aER
.
ReadULEB128
<
size_t
>
(
)
;
using
NC_CHAR
=
std
:
:
remove_const_t
<
CHAR
>
;
NC_CHAR
*
buffer
=
static_cast
<
NC_CHAR
*
>
(
malloc
(
bytes
+
sizeof
(
NC_CHAR
)
)
)
;
aER
.
ReadBytes
(
buffer
bytes
)
;
buffer
[
bytes
/
sizeof
(
NC_CHAR
)
]
=
NC_CHAR
(
0
)
;
return
UniqueFreePtr
<
CHAR
>
(
buffer
)
;
}
}
;
template
<
typename
.
.
.
Ts
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
std
:
:
tuple
<
Ts
.
.
.
>
>
{
private
:
template
<
size_t
.
.
.
Is
>
static
Length
TupleBytes
(
const
std
:
:
tuple
<
Ts
.
.
.
>
&
aTuple
std
:
:
index_sequence
<
Is
.
.
.
>
)
{
Length
bytes
=
0
;
Unused
<
<
std
:
:
initializer_list
<
int
>
{
(
bytes
+
=
SumBytes
(
std
:
:
get
<
Is
>
(
aTuple
)
)
0
)
.
.
.
}
;
return
bytes
;
}
template
<
size_t
.
.
.
Is
>
static
void
TupleWrite
(
ProfileBufferEntryWriter
&
aEW
const
std
:
:
tuple
<
Ts
.
.
.
>
&
aTuple
std
:
:
index_sequence
<
Is
.
.
.
>
)
{
Unused
<
<
std
:
:
initializer_list
<
int
>
{
(
aEW
.
WriteObject
(
std
:
:
get
<
Is
>
(
aTuple
)
)
0
)
.
.
.
}
;
}
public
:
static
Length
Bytes
(
const
std
:
:
tuple
<
Ts
.
.
.
>
&
aTuple
)
{
return
TupleBytes
(
aTuple
std
:
:
index_sequence_for
<
Ts
.
.
.
>
(
)
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
std
:
:
tuple
<
Ts
.
.
.
>
&
aTuple
)
{
TupleWrite
(
aEW
aTuple
std
:
:
index_sequence_for
<
Ts
.
.
.
>
(
)
)
;
}
}
;
template
<
typename
.
.
.
Ts
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
std
:
:
tuple
<
Ts
.
.
.
>
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
std
:
:
tuple
<
Ts
.
.
.
>
&
aTuple
)
{
aER
.
ReadBytes
(
&
aTuple
Bytes
(
aTuple
)
)
;
}
static
std
:
:
tuple
<
Ts
.
.
.
>
Read
(
ProfileBufferEntryReader
&
aER
)
{
std
:
:
tuple
<
Ts
.
.
.
>
ob
;
ReadInto
(
aER
ob
)
;
return
ob
;
}
}
;
template
<
typename
.
.
.
Ts
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
Tuple
<
Ts
.
.
.
>
>
{
private
:
template
<
size_t
.
.
.
Is
>
static
Length
TupleBytes
(
const
Tuple
<
Ts
.
.
.
>
&
aTuple
std
:
:
index_sequence
<
Is
.
.
.
>
)
{
Length
bytes
=
0
;
Unused
<
<
std
:
:
initializer_list
<
int
>
{
(
bytes
+
=
SumBytes
(
Get
<
Is
>
(
aTuple
)
)
0
)
.
.
.
}
;
return
bytes
;
}
template
<
size_t
.
.
.
Is
>
static
void
TupleWrite
(
ProfileBufferEntryWriter
&
aEW
const
Tuple
<
Ts
.
.
.
>
&
aTuple
std
:
:
index_sequence
<
Is
.
.
.
>
)
{
Unused
<
<
std
:
:
initializer_list
<
int
>
{
(
aEW
.
WriteObject
(
Get
<
Is
>
(
aTuple
)
)
0
)
.
.
.
}
;
}
public
:
static
Length
Bytes
(
const
Tuple
<
Ts
.
.
.
>
&
aTuple
)
{
return
TupleBytes
(
aTuple
std
:
:
index_sequence_for
<
Ts
.
.
.
>
(
)
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
Tuple
<
Ts
.
.
.
>
&
aTuple
)
{
TupleWrite
(
aEW
aTuple
std
:
:
index_sequence_for
<
Ts
.
.
.
>
(
)
)
;
}
}
;
template
<
typename
.
.
.
Ts
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
Tuple
<
Ts
.
.
.
>
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
Tuple
<
Ts
.
.
.
>
&
aTuple
)
{
aER
.
ReadBytes
(
&
aTuple
Bytes
(
aTuple
)
)
;
}
static
Tuple
<
Ts
.
.
.
>
Read
(
ProfileBufferEntryReader
&
aER
)
{
Tuple
<
Ts
.
.
.
>
ob
;
ReadInto
(
aER
ob
)
;
return
ob
;
}
}
;
template
<
class
T
size_t
N
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
Span
<
T
N
>
>
{
static
Length
Bytes
(
const
Span
<
T
N
>
&
aSpan
)
{
Length
bytes
=
0
;
for
(
const
T
&
element
:
aSpan
)
{
bytes
+
=
SumBytes
(
element
)
;
}
return
bytes
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
Span
<
T
N
>
&
aSpan
)
{
for
(
const
T
&
element
:
aSpan
)
{
aEW
.
WriteObject
(
element
)
;
}
}
}
;
template
<
class
T
size_t
N
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
Span
<
T
N
>
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
Span
<
T
N
>
&
aSpan
)
{
for
(
T
&
element
:
aSpan
)
{
aER
.
ReadIntoObject
(
element
)
;
}
}
static
Span
<
T
N
>
Read
(
ProfileBufferEntryReader
&
aER
)
=
delete
;
}
;
template
<
typename
T
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
Maybe
<
T
>
>
{
static
Length
Bytes
(
const
Maybe
<
T
>
&
aMaybe
)
{
return
aMaybe
.
isNothing
(
)
?
1
:
(
1
+
SumBytes
(
aMaybe
.
ref
(
)
)
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
Maybe
<
T
>
&
aMaybe
)
{
if
(
aMaybe
.
isNothing
(
)
)
{
aEW
.
WriteObject
<
char
>
(
'
m
'
)
;
}
else
{
aEW
.
WriteObject
<
char
>
(
'
M
'
)
;
aEW
.
WriteObject
(
aMaybe
.
ref
(
)
)
;
}
}
}
;
template
<
typename
T
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
Maybe
<
T
>
>
{
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
Maybe
<
T
>
&
aMaybe
)
{
char
c
=
aER
.
ReadObject
<
char
>
(
)
;
if
(
c
=
=
'
m
'
)
{
aMaybe
.
reset
(
)
;
}
else
{
MOZ_ASSERT
(
c
=
=
'
M
'
)
;
if
(
aMaybe
.
isNothing
(
)
)
{
aMaybe
.
emplace
(
)
;
}
aER
.
ReadIntoObject
(
aMaybe
.
ref
(
)
)
;
}
}
static
Maybe
<
T
>
Read
(
ProfileBufferEntryReader
&
aER
)
{
Maybe
<
T
>
maybe
;
char
c
=
aER
.
ReadObject
<
char
>
(
)
;
MOZ_ASSERT
(
c
=
=
'
M
'
|
|
c
=
=
'
m
'
)
;
if
(
c
=
=
'
M
'
)
{
maybe
=
Some
(
T
{
}
)
;
aER
.
ReadIntoObject
(
maybe
.
ref
(
)
)
;
}
return
maybe
;
}
}
;
template
<
typename
.
.
.
Ts
>
struct
ProfileBufferEntryWriter
:
:
Serializer
<
Variant
<
Ts
.
.
.
>
>
{
private
:
template
<
size_t
I
>
static
void
VariantIBytes
(
const
Variant
<
Ts
.
.
.
>
&
aVariantTs
Length
&
aOutBytes
)
{
if
(
aVariantTs
.
template
is
<
I
>
(
)
)
{
aOutBytes
=
ProfileBufferEntryWriter
:
:
ULEB128Size
(
I
)
+
SumBytes
(
aVariantTs
.
template
as
<
I
>
(
)
)
;
}
}
template
<
size_t
.
.
.
Is
>
static
Length
VariantBytes
(
const
Variant
<
Ts
.
.
.
>
&
aVariantTs
std
:
:
index_sequence
<
Is
.
.
.
>
)
{
Length
bytes
=
0
;
Unused
<
<
std
:
:
initializer_list
<
int
>
{
(
VariantIBytes
<
Is
>
(
aVariantTs
bytes
)
0
)
.
.
.
}
;
MOZ_ASSERT
(
bytes
!
=
0
)
;
return
bytes
;
}
template
<
size_t
I
>
static
void
VariantIWrite
(
ProfileBufferEntryWriter
&
aEW
const
Variant
<
Ts
.
.
.
>
&
aVariantTs
)
{
if
(
aVariantTs
.
template
is
<
I
>
(
)
)
{
aEW
.
WriteULEB128
(
I
)
;
aEW
.
WriteObject
(
aVariantTs
.
template
as
<
I
>
(
)
)
;
}
}
template
<
size_t
.
.
.
Is
>
static
void
VariantWrite
(
ProfileBufferEntryWriter
&
aEW
const
Variant
<
Ts
.
.
.
>
&
aVariantTs
std
:
:
index_sequence
<
Is
.
.
.
>
)
{
Unused
<
<
std
:
:
initializer_list
<
int
>
{
(
VariantIWrite
<
Is
>
(
aEW
aVariantTs
)
0
)
.
.
.
}
;
}
public
:
static
Length
Bytes
(
const
Variant
<
Ts
.
.
.
>
&
aVariantTs
)
{
return
VariantBytes
(
aVariantTs
std
:
:
index_sequence_for
<
Ts
.
.
.
>
(
)
)
;
}
static
void
Write
(
ProfileBufferEntryWriter
&
aEW
const
Variant
<
Ts
.
.
.
>
&
aVariantTs
)
{
VariantWrite
(
aEW
aVariantTs
std
:
:
index_sequence_for
<
Ts
.
.
.
>
(
)
)
;
}
}
;
template
<
typename
.
.
.
Ts
>
struct
ProfileBufferEntryReader
:
:
Deserializer
<
Variant
<
Ts
.
.
.
>
>
{
private
:
template
<
size_t
I
>
static
void
VariantIReadInto
(
ProfileBufferEntryReader
&
aER
Variant
<
Ts
.
.
.
>
&
aVariantTs
unsigned
aTag
)
{
if
(
I
=
=
aTag
)
{
if
(
!
aVariantTs
.
template
is
<
I
>
(
)
)
{
aVariantTs
=
Variant
<
Ts
.
.
.
>
(
VariantIndex
<
I
>
{
}
)
;
}
aER
.
ReadIntoObject
(
aVariantTs
.
template
as
<
I
>
(
)
)
;
}
}
template
<
size_t
.
.
.
Is
>
static
void
VariantReadInto
(
ProfileBufferEntryReader
&
aER
Variant
<
Ts
.
.
.
>
&
aVariantTs
std
:
:
index_sequence
<
Is
.
.
.
>
)
{
unsigned
tag
=
aER
.
ReadULEB128
<
unsigned
>
(
)
;
Unused
<
<
std
:
:
initializer_list
<
int
>
{
(
VariantIReadInto
<
Is
>
(
aER
aVariantTs
tag
)
0
)
.
.
.
}
;
}
public
:
static
void
ReadInto
(
ProfileBufferEntryReader
&
aER
Variant
<
Ts
.
.
.
>
&
aVariantTs
)
{
VariantReadInto
(
aER
aVariantTs
std
:
:
index_sequence_for
<
Ts
.
.
.
>
(
)
)
;
}
static
Variant
<
Ts
.
.
.
>
Read
(
ProfileBufferEntryReader
&
aER
)
{
Variant
<
Ts
.
.
.
>
variant
(
VariantIndex
<
0
>
{
}
)
;
ReadInto
(
aER
variant
)
;
return
variant
;
}
}
;
}
#
endif
