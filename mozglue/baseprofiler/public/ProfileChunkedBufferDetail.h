#
ifndef
ProfileChunkedBufferDetail_h
#
define
ProfileChunkedBufferDetail_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
ProfileBufferChunk
.
h
"
#
include
"
mozilla
/
ProfileBufferEntrySerialization
.
h
"
namespace
mozilla
:
:
profiler
:
:
detail
{
class
InChunkPointer
{
public
:
using
Byte
=
ProfileBufferChunk
:
:
Byte
;
using
Length
=
ProfileBufferChunk
:
:
Length
;
InChunkPointer
(
)
:
mChunk
(
nullptr
)
mNextChunkGroup
(
nullptr
)
mOffsetInChunk
(
0
)
{
}
InChunkPointer
(
const
ProfileBufferChunk
*
aChunk
const
ProfileBufferChunk
*
aNextChunkGroup
ProfileBufferBlockIndex
aBlockIndex
)
:
mChunk
(
aChunk
)
mNextChunkGroup
(
aNextChunkGroup
)
{
if
(
mChunk
)
{
mOffsetInChunk
=
mChunk
-
>
OffsetFirstBlock
(
)
;
Adjust
(
)
;
}
else
if
(
mNextChunkGroup
)
{
mChunk
=
mNextChunkGroup
;
mNextChunkGroup
=
nullptr
;
mOffsetInChunk
=
mChunk
-
>
OffsetFirstBlock
(
)
;
Adjust
(
)
;
}
else
{
mOffsetInChunk
=
0
;
}
if
(
!
AdvanceToGlobalRangePosition
(
aBlockIndex
)
)
{
mChunk
=
nullptr
;
mNextChunkGroup
=
nullptr
;
}
}
InChunkPointer
(
const
ProfileBufferChunk
*
aChunk
const
ProfileBufferChunk
*
aNextChunkGroup
ProfileBufferIndex
aIndex
=
ProfileBufferIndex
(
0
)
)
:
mChunk
(
aChunk
)
mNextChunkGroup
(
aNextChunkGroup
)
{
if
(
mChunk
)
{
mOffsetInChunk
=
mChunk
-
>
OffsetFirstBlock
(
)
;
Adjust
(
)
;
}
else
if
(
mNextChunkGroup
)
{
mChunk
=
mNextChunkGroup
;
mNextChunkGroup
=
nullptr
;
mOffsetInChunk
=
mChunk
-
>
OffsetFirstBlock
(
)
;
Adjust
(
)
;
}
else
{
mOffsetInChunk
=
0
;
}
if
(
!
AdvanceToGlobalRangePosition
(
aIndex
)
)
{
mChunk
=
nullptr
;
mNextChunkGroup
=
nullptr
;
}
}
[
[
nodiscard
]
]
ProfileBufferIndex
GlobalRangePosition
(
)
const
{
if
(
IsNull
(
)
)
{
return
0
;
}
return
mChunk
-
>
RangeStart
(
)
+
mOffsetInChunk
;
}
[
[
nodiscard
]
]
bool
AdvanceToGlobalRangePosition
(
ProfileBufferBlockIndex
aBlockIndex
)
{
if
(
IsNull
(
)
)
{
return
false
;
}
if
(
!
aBlockIndex
)
{
return
ShouldPointAtValidBlock
(
)
;
}
if
(
aBlockIndex
.
ConvertToProfileBufferIndex
(
)
<
GlobalRangePosition
(
)
)
{
return
ShouldPointAtValidBlock
(
)
;
}
for
(
;
;
)
{
if
(
aBlockIndex
.
ConvertToProfileBufferIndex
(
)
<
mChunk
-
>
RangeStart
(
)
+
mChunk
-
>
OffsetPastLastBlock
(
)
)
{
mOffsetInChunk
=
aBlockIndex
.
ConvertToProfileBufferIndex
(
)
-
mChunk
-
>
RangeStart
(
)
;
return
ShouldPointAtValidBlock
(
)
;
}
GoToNextChunk
(
)
;
if
(
IsNull
(
)
)
{
return
false
;
}
mOffsetInChunk
=
mChunk
-
>
OffsetFirstBlock
(
)
;
if
(
aBlockIndex
.
ConvertToProfileBufferIndex
(
)
<
GlobalRangePosition
(
)
)
{
MOZ_ASSERT
(
false
"
AdvanceToGlobalRangePosition
-
In
-
between
blocks
"
)
;
return
false
;
}
}
}
[
[
nodiscard
]
]
bool
AdvanceToGlobalRangePosition
(
ProfileBufferIndex
aPosition
)
{
if
(
aPosition
=
=
0
)
{
return
!
IsNull
(
)
;
}
for
(
;
;
)
{
ProfileBufferIndex
currentPosition
=
GlobalRangePosition
(
)
;
if
(
currentPosition
=
=
0
)
{
return
false
;
}
if
(
aPosition
<
=
currentPosition
)
{
return
true
;
}
if
(
aPosition
<
mChunk
-
>
RangeStart
(
)
+
mChunk
-
>
OffsetPastLastBlock
(
)
)
{
for
(
;
;
)
{
mOffsetInChunk
+
=
ReadEntrySize
(
)
;
if
(
mOffsetInChunk
>
=
mChunk
-
>
OffsetPastLastBlock
(
)
)
{
break
;
}
if
(
aPosition
<
=
mChunk
-
>
RangeStart
(
)
+
mOffsetInChunk
)
{
return
true
;
}
}
}
GoToNextChunk
(
)
;
if
(
IsNull
(
)
)
{
return
false
;
}
mOffsetInChunk
=
mChunk
-
>
OffsetFirstBlock
(
)
;
}
}
[
[
nodiscard
]
]
Byte
ReadByte
(
)
{
MOZ_ASSERT
(
!
IsNull
(
)
)
;
MOZ_ASSERT
(
mOffsetInChunk
<
mChunk
-
>
OffsetPastLastBlock
(
)
)
;
Byte
byte
=
mChunk
-
>
ByteAt
(
mOffsetInChunk
)
;
if
(
MOZ_UNLIKELY
(
+
+
mOffsetInChunk
=
=
mChunk
-
>
OffsetPastLastBlock
(
)
)
)
{
Adjust
(
)
;
}
return
byte
;
}
[
[
nodiscard
]
]
Length
ReadEntrySize
(
)
{
ULEB128Reader
<
Length
>
reader
;
if
(
IsNull
(
)
)
{
return
0
;
}
for
(
;
;
)
{
const
bool
isComplete
=
reader
.
FeedByteIsComplete
(
ReadByte
(
)
)
;
if
(
MOZ_UNLIKELY
(
IsNull
(
)
)
)
{
return
0
;
}
if
(
MOZ_LIKELY
(
isComplete
)
)
{
if
(
MOZ_UNLIKELY
(
reader
.
Value
(
)
>
mChunk
-
>
BufferBytes
(
)
)
)
{
return
0
;
}
return
reader
.
Value
(
)
;
}
}
}
InChunkPointer
&
operator
+
=
(
Length
aLength
)
{
MOZ_ASSERT
(
!
IsNull
(
)
)
;
mOffsetInChunk
+
=
aLength
;
Adjust
(
)
;
return
*
this
;
}
[
[
nodiscard
]
]
ProfileBufferEntryReader
EntryReader
(
Length
aLength
)
{
if
(
IsNull
(
)
|
|
aLength
=
=
0
)
{
return
ProfileBufferEntryReader
(
)
;
}
MOZ_ASSERT
(
mOffsetInChunk
<
mChunk
-
>
OffsetPastLastBlock
(
)
)
;
const
ProfileBufferIndex
entryIndex
=
GlobalRangePosition
(
)
;
MOZ_ASSERT
(
entryIndex
>
=
1u
+
ULEB128Size
(
aLength
)
)
;
const
Length
remaining
=
mChunk
-
>
OffsetPastLastBlock
(
)
-
mOffsetInChunk
;
Span
<
const
Byte
>
mem0
=
mChunk
-
>
BufferSpan
(
)
;
mem0
=
mem0
.
From
(
mOffsetInChunk
)
;
if
(
aLength
<
=
remaining
)
{
*
this
+
=
aLength
;
return
ProfileBufferEntryReader
(
mem0
.
To
(
aLength
)
ProfileBufferBlockIndex
:
:
CreateFromProfileBufferIndex
(
entryIndex
-
ULEB128Size
(
aLength
)
)
ProfileBufferBlockIndex
:
:
CreateFromProfileBufferIndex
(
GlobalRangePosition
(
)
)
)
;
}
GoToNextChunk
(
)
;
if
(
IsNull
(
)
)
{
return
ProfileBufferEntryReader
(
)
;
}
Span
<
const
Byte
>
mem1
=
mChunk
-
>
BufferSpan
(
)
;
const
Length
tail
=
aLength
-
remaining
;
MOZ_ASSERT
(
tail
<
=
mChunk
-
>
BufferBytes
(
)
)
;
MOZ_ASSERT
(
tail
=
=
mChunk
-
>
OffsetFirstBlock
(
)
)
;
mOffsetInChunk
=
tail
;
Adjust
(
)
;
return
ProfileBufferEntryReader
(
mem0
mem1
.
To
(
tail
)
ProfileBufferBlockIndex
:
:
CreateFromProfileBufferIndex
(
entryIndex
-
ULEB128Size
(
aLength
)
)
ProfileBufferBlockIndex
:
:
CreateFromProfileBufferIndex
(
GlobalRangePosition
(
)
)
)
;
}
[
[
nodiscard
]
]
bool
IsNull
(
)
const
{
return
!
mChunk
;
}
[
[
nodiscard
]
]
bool
operator
=
=
(
const
InChunkPointer
&
aOther
)
const
{
if
(
IsNull
(
)
|
|
aOther
.
IsNull
(
)
)
{
return
IsNull
(
)
&
&
aOther
.
IsNull
(
)
;
}
return
mChunk
=
=
aOther
.
mChunk
&
&
mOffsetInChunk
=
=
aOther
.
mOffsetInChunk
;
}
[
[
nodiscard
]
]
bool
operator
!
=
(
const
InChunkPointer
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
[
[
nodiscard
]
]
Byte
operator
*
(
)
const
{
MOZ_ASSERT
(
!
IsNull
(
)
)
;
MOZ_ASSERT
(
mOffsetInChunk
<
mChunk
-
>
OffsetPastLastBlock
(
)
)
;
return
mChunk
-
>
ByteAt
(
mOffsetInChunk
)
;
}
InChunkPointer
&
operator
+
+
(
)
{
MOZ_ASSERT
(
!
IsNull
(
)
)
;
MOZ_ASSERT
(
mOffsetInChunk
<
mChunk
-
>
OffsetPastLastBlock
(
)
)
;
if
(
MOZ_UNLIKELY
(
+
+
mOffsetInChunk
=
=
mChunk
-
>
OffsetPastLastBlock
(
)
)
)
{
mOffsetInChunk
=
0
;
GoToNextChunk
(
)
;
Adjust
(
)
;
}
return
*
this
;
}
private
:
void
GoToNextChunk
(
)
{
MOZ_ASSERT
(
!
IsNull
(
)
)
;
const
ProfileBufferIndex
expectedNextRangeStart
=
mChunk
-
>
RangeStart
(
)
+
mChunk
-
>
BufferBytes
(
)
;
mChunk
=
mChunk
-
>
GetNext
(
)
;
if
(
!
mChunk
)
{
mChunk
=
mNextChunkGroup
;
mNextChunkGroup
=
nullptr
;
}
if
(
mChunk
&
&
mChunk
-
>
RangeStart
(
)
=
=
0
)
{
mChunk
=
nullptr
;
}
MOZ_ASSERT
(
!
mChunk
|
|
mChunk
-
>
RangeStart
(
)
=
=
expectedNextRangeStart
"
We
don
'
t
handle
discontinuous
buffers
(
yet
)
"
)
;
if
(
mChunk
&
&
mChunk
-
>
RangeStart
(
)
!
=
expectedNextRangeStart
)
{
mChunk
=
nullptr
;
}
}
void
Adjust
(
)
{
while
(
mChunk
&
&
mOffsetInChunk
>
=
mChunk
-
>
OffsetPastLastBlock
(
)
)
{
if
(
mOffsetInChunk
<
mChunk
-
>
BufferBytes
(
)
)
{
mOffsetInChunk
-
=
mChunk
-
>
BufferBytes
(
)
;
}
else
{
mOffsetInChunk
-
=
mChunk
-
>
OffsetPastLastBlock
(
)
;
}
GoToNextChunk
(
)
;
}
}
[
[
nodiscard
]
]
bool
ShouldPointAtValidBlock
(
)
const
{
if
(
IsNull
(
)
)
{
MOZ_ASSERT
(
false
"
ShouldPointAtValidBlock
-
null
pointer
"
)
;
return
false
;
}
InChunkPointer
pointer
=
*
this
;
Length
entrySize
=
pointer
.
ReadEntrySize
(
)
;
if
(
entrySize
=
=
0
)
{
MOZ_ASSERT
(
false
"
ShouldPointAtValidBlock
-
invalid
size
"
)
;
return
false
;
}
pointer
+
=
entrySize
-
1
;
MOZ_ASSERT
(
!
IsNull
(
)
"
ShouldPointAtValidBlock
-
past
end
of
buffer
"
)
;
return
!
IsNull
(
)
;
}
const
ProfileBufferChunk
*
mChunk
;
const
ProfileBufferChunk
*
mNextChunkGroup
;
Length
mOffsetInChunk
;
}
;
}
#
endif
