#
include
<
jni
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
fcntl
.
h
>
#
include
"
APKOpen
.
h
"
#
include
"
Zip
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
ifdef
MOZ_CRASHREPORTER
#
include
"
minidump
-
analyzer
.
h
"
#
endif
extern
"
C
"
__attribute__
(
(
visibility
(
"
default
"
)
)
)
void
MOZ_JNICALL
Java_org_mozilla_gecko_mozglue_GeckoLoader_putenv
(
JNIEnv
*
jenv
jclass
jstring
map
)
{
const
char
*
str
;
str
=
jenv
-
>
GetStringUTFChars
(
map
nullptr
)
;
if
(
str
=
=
nullptr
)
return
;
putenv
(
strdup
(
str
)
)
;
jenv
-
>
ReleaseStringUTFChars
(
map
str
)
;
}
extern
"
C
"
APKOPEN_EXPORT
jboolean
MOZ_JNICALL
Java_org_mozilla_gecko_mozglue_GeckoLoader_verifyCRCs
(
JNIEnv
*
jenv
jclass
jstring
jApkName
)
{
const
char
*
str
;
str
=
jenv
-
>
GetStringUTFChars
(
jApkName
nullptr
)
;
if
(
str
=
=
nullptr
)
{
return
false
;
}
RefPtr
<
Zip
>
zip
=
Zip
:
:
Create
(
str
)
;
const
bool
valid
=
zip
-
>
VerifyCRCs
(
)
;
jenv
-
>
ReleaseStringUTFChars
(
jApkName
str
)
;
return
jboolean
(
valid
)
;
}
#
ifdef
MOZ_CRASHREPORTER
extern
"
C
"
__attribute__
(
(
visibility
(
"
default
"
)
)
)
jboolean
MOZ_JNICALL
Java_org_mozilla_gecko_mozglue_MinidumpAnalyzer_GenerateStacks
(
JNIEnv
*
jenv
jclass
jstring
minidumpPath
jboolean
fullStacks
)
{
const
char
*
str
;
str
=
jenv
-
>
GetStringUTFChars
(
minidumpPath
nullptr
)
;
bool
res
=
CrashReporter
:
:
GenerateStacks
(
str
fullStacks
)
;
jenv
-
>
ReleaseStringUTFChars
(
minidumpPath
str
)
;
return
res
;
}
#
endif
