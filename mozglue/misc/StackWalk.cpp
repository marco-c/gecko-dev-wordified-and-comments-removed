#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
IntegerPrintfMacros
.
h
"
#
include
"
mozilla
/
StackWalk
.
h
"
#
include
<
string
.
h
>
#
if
defined
(
ANDROID
)
&
&
defined
(
MOZ_LINKER
)
#
include
"
Linker
.
h
"
#
include
<
android
/
log
.
h
>
#
endif
using
namespace
mozilla
;
#
if
defined
(
HAVE__UNWIND_BACKTRACE
)
&
&
!
defined
(
_GNU_SOURCE
)
#
define
_GNU_SOURCE
#
endif
#
if
defined
(
HAVE_DLOPEN
)
|
|
defined
(
XP_DARWIN
)
#
include
<
dlfcn
.
h
>
#
endif
#
if
(
defined
(
XP_DARWIN
)
&
&
\
(
defined
(
__i386
)
|
|
defined
(
__ppc__
)
|
|
defined
(
HAVE__UNWIND_BACKTRACE
)
)
)
#
define
MOZ_STACKWALK_SUPPORTS_MACOSX
1
#
else
#
define
MOZ_STACKWALK_SUPPORTS_MACOSX
0
#
endif
#
if
(
defined
(
linux
)
&
&
\
(
(
defined
(
__GNUC__
)
&
&
(
defined
(
__i386
)
|
|
defined
(
PPC
)
)
)
|
|
\
defined
(
HAVE__UNWIND_BACKTRACE
)
)
)
#
define
MOZ_STACKWALK_SUPPORTS_LINUX
1
#
else
#
define
MOZ_STACKWALK_SUPPORTS_LINUX
0
#
endif
#
if
__GLIBC__
>
2
|
|
(
__GLIBC__
=
=
2
&
&
__GLIBC_MINOR__
>
=
1
)
#
define
HAVE___LIBC_STACK_END
1
#
else
#
define
HAVE___LIBC_STACK_END
0
#
endif
#
if
HAVE___LIBC_STACK_END
extern
MOZ_EXPORT
void
*
__libc_stack_end
;
#
endif
#
ifdef
ANDROID
#
include
<
algorithm
>
#
include
<
unistd
.
h
>
#
include
<
pthread
.
h
>
#
endif
#
if
MOZ_STACKWALK_SUPPORTS_WINDOWS
#
include
<
windows
.
h
>
#
include
<
process
.
h
>
#
include
<
stdio
.
h
>
#
include
<
malloc
.
h
>
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
StackWalk_windows
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
<
imagehlp
.
h
>
#
if
API_VERSION_NUMBER
<
9
#
error
Too
old
imagehlp
.
h
#
endif
struct
WalkStackData
{
bool
walkCallingThread
;
uint32_t
skipFrames
;
HANDLE
thread
;
HANDLE
process
;
HANDLE
eventStart
;
HANDLE
eventEnd
;
void
*
*
pcs
;
uint32_t
pc_size
;
uint32_t
pc_count
;
uint32_t
pc_max
;
void
*
*
sps
;
uint32_t
sp_size
;
uint32_t
sp_count
;
CONTEXT
*
context
;
}
;
CRITICAL_SECTION
gDbgHelpCS
;
#
if
defined
(
_M_AMD64
)
|
|
defined
(
_M_ARM64
)
static
Atomic
<
size_t
>
sStackWalkSuppressions
;
void
SuppressStackWalking
(
)
{
+
+
sStackWalkSuppressions
;
}
void
DesuppressStackWalking
(
)
{
-
-
sStackWalkSuppressions
;
}
MFBT_API
AutoSuppressStackWalking
:
:
AutoSuppressStackWalking
(
)
{
SuppressStackWalking
(
)
;
}
MFBT_API
AutoSuppressStackWalking
:
:
~
AutoSuppressStackWalking
(
)
{
DesuppressStackWalking
(
)
;
}
static
uint8_t
*
sJitCodeRegionStart
;
static
size_t
sJitCodeRegionSize
;
uint8_t
*
sMsMpegJitCodeRegionStart
;
size_t
sMsMpegJitCodeRegionSize
;
MFBT_API
void
RegisterJitCodeRegion
(
uint8_t
*
aStart
size_t
aSize
)
{
MOZ_RELEASE_ASSERT
(
!
sJitCodeRegionStart
)
;
sJitCodeRegionStart
=
aStart
;
sJitCodeRegionSize
=
aSize
;
}
MFBT_API
void
UnregisterJitCodeRegion
(
uint8_t
*
aStart
size_t
aSize
)
{
MOZ_RELEASE_ASSERT
(
sJitCodeRegionStart
&
&
sJitCodeRegionStart
=
=
aStart
&
&
sJitCodeRegionSize
=
=
aSize
)
;
sJitCodeRegionStart
=
nullptr
;
sJitCodeRegionSize
=
0
;
}
#
endif
static
void
PrintError
(
const
char
*
aPrefix
)
{
LPSTR
lpMsgBuf
;
DWORD
lastErr
=
GetLastError
(
)
;
FormatMessageA
(
FORMAT_MESSAGE_ALLOCATE_BUFFER
|
FORMAT_MESSAGE_FROM_SYSTEM
|
FORMAT_MESSAGE_IGNORE_INSERTS
nullptr
lastErr
MAKELANGID
(
LANG_NEUTRAL
SUBLANG_DEFAULT
)
(
LPSTR
)
&
lpMsgBuf
0
nullptr
)
;
fprintf
(
stderr
"
#
#
#
ERROR
:
%
s
:
%
s
"
aPrefix
lpMsgBuf
?
lpMsgBuf
:
"
(
null
)
\
n
"
)
;
fflush
(
stderr
)
;
LocalFree
(
lpMsgBuf
)
;
}
static
void
InitializeDbgHelpCriticalSection
(
)
{
static
bool
initialized
=
false
;
if
(
initialized
)
{
return
;
}
:
:
InitializeCriticalSection
(
&
gDbgHelpCS
)
;
initialized
=
true
;
}
static
void
WalkStackMain64
(
struct
WalkStackData
*
aData
)
{
CONTEXT
context_buf
;
CONTEXT
*
context
;
if
(
!
aData
-
>
context
)
{
context
=
&
context_buf
;
memset
(
context
0
sizeof
(
CONTEXT
)
)
;
context
-
>
ContextFlags
=
CONTEXT_FULL
;
if
(
aData
-
>
walkCallingThread
)
{
:
:
RtlCaptureContext
(
context
)
;
}
else
if
(
!
GetThreadContext
(
aData
-
>
thread
context
)
)
{
return
;
}
}
else
{
context
=
aData
-
>
context
;
}
#
if
defined
(
_M_IX86
)
|
|
defined
(
_M_IA64
)
STACKFRAME64
frame64
;
memset
(
&
frame64
0
sizeof
(
frame64
)
)
;
#
ifdef
_M_IX86
frame64
.
AddrPC
.
Offset
=
context
-
>
Eip
;
frame64
.
AddrStack
.
Offset
=
context
-
>
Esp
;
frame64
.
AddrFrame
.
Offset
=
context
-
>
Ebp
;
#
elif
defined
_M_IA64
frame64
.
AddrPC
.
Offset
=
context
-
>
StIIP
;
frame64
.
AddrStack
.
Offset
=
context
-
>
SP
;
frame64
.
AddrFrame
.
Offset
=
context
-
>
RsBSP
;
#
endif
frame64
.
AddrPC
.
Mode
=
AddrModeFlat
;
frame64
.
AddrStack
.
Mode
=
AddrModeFlat
;
frame64
.
AddrFrame
.
Mode
=
AddrModeFlat
;
frame64
.
AddrReturn
.
Mode
=
AddrModeFlat
;
#
endif
#
if
defined
(
_M_AMD64
)
|
|
defined
(
_M_ARM64
)
if
(
sStackWalkSuppressions
)
{
return
;
}
#
endif
#
if
defined
(
_M_AMD64
)
|
|
defined
(
_M_ARM64
)
bool
firstFrame
=
true
;
#
endif
int
skip
=
(
aData
-
>
walkCallingThread
?
3
:
0
)
+
aData
-
>
skipFrames
;
while
(
true
)
{
DWORD64
addr
;
DWORD64
spaddr
;
#
if
defined
(
_M_IX86
)
|
|
defined
(
_M_IA64
)
EnterCriticalSection
(
&
gDbgHelpCS
)
;
BOOL
ok
=
StackWalk64
(
#
if
defined
_M_IA64
IMAGE_FILE_MACHINE_IA64
#
elif
defined
_M_IX86
IMAGE_FILE_MACHINE_I386
#
endif
aData
-
>
process
aData
-
>
thread
&
frame64
context
nullptr
SymFunctionTableAccess64
SymGetModuleBase64
0
)
;
LeaveCriticalSection
(
&
gDbgHelpCS
)
;
if
(
ok
)
{
addr
=
frame64
.
AddrPC
.
Offset
;
spaddr
=
frame64
.
AddrStack
.
Offset
;
}
else
{
addr
=
0
;
spaddr
=
0
;
if
(
aData
-
>
walkCallingThread
)
{
PrintError
(
"
WalkStack64
"
)
;
}
}
if
(
!
ok
)
{
break
;
}
#
elif
defined
(
_M_AMD64
)
|
|
defined
(
_M_ARM64
)
#
if
defined
(
_M_AMD64
)
auto
currentInstr
=
context
-
>
Rip
;
#
elif
defined
(
_M_ARM64
)
auto
currentInstr
=
context
-
>
Pc
;
#
endif
if
(
sJitCodeRegionStart
&
&
(
uint8_t
*
)
currentInstr
>
=
sJitCodeRegionStart
&
&
(
uint8_t
*
)
currentInstr
<
sJitCodeRegionStart
+
sJitCodeRegionSize
)
{
break
;
}
if
(
sMsMpegJitCodeRegionStart
&
&
(
uint8_t
*
)
currentInstr
>
=
sMsMpegJitCodeRegionStart
&
&
(
uint8_t
*
)
currentInstr
<
sMsMpegJitCodeRegionStart
+
sMsMpegJitCodeRegionSize
)
{
break
;
}
ULONG64
imageBase
;
PRUNTIME_FUNCTION
runtimeFunction
=
RtlLookupFunctionEntry
(
currentInstr
&
imageBase
NULL
)
;
if
(
runtimeFunction
)
{
PVOID
dummyHandlerData
;
ULONG64
dummyEstablisherFrame
;
RtlVirtualUnwind
(
UNW_FLAG_NHANDLER
imageBase
currentInstr
runtimeFunction
context
&
dummyHandlerData
&
dummyEstablisherFrame
nullptr
)
;
}
else
if
(
firstFrame
)
{
#
if
defined
(
_M_AMD64
)
context
-
>
Rip
=
*
reinterpret_cast
<
DWORD64
*
>
(
context
-
>
Rsp
)
;
context
-
>
Rsp
+
=
sizeof
(
void
*
)
;
#
elif
defined
(
_M_ARM64
)
context
-
>
Pc
=
*
reinterpret_cast
<
DWORD64
*
>
(
context
-
>
Sp
)
;
context
-
>
Sp
+
=
sizeof
(
void
*
)
;
#
endif
}
else
{
break
;
}
#
if
defined
(
_M_AMD64
)
addr
=
context
-
>
Rip
;
spaddr
=
context
-
>
Rsp
;
#
elif
defined
(
_M_ARM64
)
addr
=
context
-
>
Pc
;
spaddr
=
context
-
>
Sp
;
#
endif
firstFrame
=
false
;
#
else
#
error
"
unknown
platform
"
#
endif
if
(
addr
=
=
0
)
{
break
;
}
if
(
skip
-
-
>
0
)
{
continue
;
}
if
(
aData
-
>
pc_count
<
aData
-
>
pc_size
)
{
aData
-
>
pcs
[
aData
-
>
pc_count
]
=
(
void
*
)
addr
;
}
+
+
aData
-
>
pc_count
;
if
(
aData
-
>
sp_count
<
aData
-
>
sp_size
)
{
aData
-
>
sps
[
aData
-
>
sp_count
]
=
(
void
*
)
spaddr
;
}
+
+
aData
-
>
sp_count
;
if
(
aData
-
>
pc_max
!
=
0
&
&
aData
-
>
pc_count
=
=
aData
-
>
pc_max
)
{
break
;
}
#
if
defined
(
_M_IX86
)
|
|
defined
(
_M_IA64
)
if
(
frame64
.
AddrReturn
.
Offset
=
=
0
)
{
break
;
}
#
endif
}
}
MFBT_API
void
MozStackWalkThread
(
MozWalkStackCallback
aCallback
uint32_t
aSkipFrames
uint32_t
aMaxFrames
void
*
aClosure
HANDLE
aThread
CONTEXT
*
aContext
)
{
struct
WalkStackData
data
;
InitializeDbgHelpCriticalSection
(
)
;
HANDLE
targetThread
=
aThread
;
if
(
!
aThread
)
{
targetThread
=
:
:
GetCurrentThread
(
)
;
data
.
walkCallingThread
=
true
;
}
else
{
DWORD
threadId
=
:
:
GetThreadId
(
aThread
)
;
DWORD
currentThreadId
=
:
:
GetCurrentThreadId
(
)
;
data
.
walkCallingThread
=
(
threadId
=
=
currentThreadId
)
;
}
data
.
skipFrames
=
aSkipFrames
;
data
.
thread
=
targetThread
;
data
.
process
=
:
:
GetCurrentProcess
(
)
;
void
*
local_pcs
[
1024
]
;
data
.
pcs
=
local_pcs
;
data
.
pc_count
=
0
;
data
.
pc_size
=
ArrayLength
(
local_pcs
)
;
data
.
pc_max
=
aMaxFrames
;
void
*
local_sps
[
1024
]
;
data
.
sps
=
local_sps
;
data
.
sp_count
=
0
;
data
.
sp_size
=
ArrayLength
(
local_sps
)
;
data
.
context
=
aContext
;
WalkStackMain64
(
&
data
)
;
if
(
data
.
pc_count
>
data
.
pc_size
)
{
data
.
pcs
=
(
void
*
*
)
_alloca
(
data
.
pc_count
*
sizeof
(
void
*
)
)
;
data
.
pc_size
=
data
.
pc_count
;
data
.
pc_count
=
0
;
data
.
sps
=
(
void
*
*
)
_alloca
(
data
.
sp_count
*
sizeof
(
void
*
)
)
;
data
.
sp_size
=
data
.
sp_count
;
data
.
sp_count
=
0
;
WalkStackMain64
(
&
data
)
;
}
for
(
uint32_t
i
=
0
;
i
<
data
.
pc_count
;
+
+
i
)
{
(
*
aCallback
)
(
i
+
1
data
.
pcs
[
i
]
data
.
sps
[
i
]
aClosure
)
;
}
}
MFBT_API
void
MozStackWalk
(
MozWalkStackCallback
aCallback
uint32_t
aSkipFrames
uint32_t
aMaxFrames
void
*
aClosure
)
{
MozStackWalkThread
(
aCallback
aSkipFrames
aMaxFrames
aClosure
nullptr
nullptr
)
;
}
static
BOOL
CALLBACK
callbackEspecial64
(
PCSTR
aModuleName
DWORD64
aModuleBase
ULONG
aModuleSize
PVOID
aUserContext
)
{
BOOL
retval
=
TRUE
;
DWORD64
addr
=
*
(
DWORD64
*
)
aUserContext
;
const
BOOL
addressIncreases
=
TRUE
;
if
(
addressIncreases
?
(
addr
>
=
aModuleBase
&
&
addr
<
=
(
aModuleBase
+
aModuleSize
)
)
:
(
addr
<
=
aModuleBase
&
&
addr
>
=
(
aModuleBase
-
aModuleSize
)
)
)
{
retval
=
!
!
SymLoadModule64
(
GetCurrentProcess
(
)
nullptr
(
PSTR
)
aModuleName
nullptr
aModuleBase
aModuleSize
)
;
if
(
!
retval
)
{
PrintError
(
"
SymLoadModule64
"
)
;
}
}
return
retval
;
}
#
ifdef
SSRVOPT_SETCONTEXT
#
define
NS_IMAGEHLP_MODULE64_SIZE
\
(
(
(
offsetof
(
IMAGEHLP_MODULE64
LoadedPdbName
)
+
sizeof
(
DWORD64
)
-
1
)
/
\
sizeof
(
DWORD64
)
)
*
\
sizeof
(
DWORD64
)
)
#
else
#
define
NS_IMAGEHLP_MODULE64_SIZE
sizeof
(
IMAGEHLP_MODULE64
)
#
endif
BOOL
SymGetModuleInfoEspecial64
(
HANDLE
aProcess
DWORD64
aAddr
PIMAGEHLP_MODULE64
aModuleInfo
PIMAGEHLP_LINE64
aLineInfo
)
{
BOOL
retval
=
FALSE
;
aModuleInfo
-
>
SizeOfStruct
=
NS_IMAGEHLP_MODULE64_SIZE
;
if
(
aLineInfo
)
{
aLineInfo
-
>
SizeOfStruct
=
sizeof
(
IMAGEHLP_LINE64
)
;
}
retval
=
SymGetModuleInfo64
(
aProcess
aAddr
aModuleInfo
)
;
if
(
retval
=
=
FALSE
)
{
BOOL
enumRes
=
EnumerateLoadedModules64
(
aProcess
(
PENUMLOADED_MODULES_CALLBACK64
)
callbackEspecial64
(
PVOID
)
&
aAddr
)
;
if
(
enumRes
!
=
FALSE
)
{
retval
=
SymGetModuleInfo64
(
aProcess
aAddr
aModuleInfo
)
;
}
}
if
(
retval
!
=
FALSE
&
&
aLineInfo
)
{
DWORD
displacement
=
0
;
BOOL
lineRes
=
FALSE
;
lineRes
=
SymGetLineFromAddr64
(
aProcess
aAddr
&
displacement
aLineInfo
)
;
if
(
!
lineRes
)
{
memset
(
aLineInfo
0
sizeof
(
*
aLineInfo
)
)
;
}
}
return
retval
;
}
static
bool
EnsureSymInitialized
(
)
{
static
bool
gInitialized
=
false
;
bool
retStat
;
if
(
gInitialized
)
{
return
gInitialized
;
}
InitializeDbgHelpCriticalSection
(
)
;
SymSetOptions
(
SYMOPT_LOAD_LINES
|
SYMOPT_UNDNAME
)
;
retStat
=
SymInitialize
(
GetCurrentProcess
(
)
nullptr
TRUE
)
;
if
(
!
retStat
)
{
PrintError
(
"
SymInitialize
"
)
;
}
gInitialized
=
retStat
;
return
retStat
;
}
MFBT_API
bool
MozDescribeCodeAddress
(
void
*
aPC
MozCodeAddressDetails
*
aDetails
)
{
aDetails
-
>
library
[
0
]
=
'
\
0
'
;
aDetails
-
>
loffset
=
0
;
aDetails
-
>
filename
[
0
]
=
'
\
0
'
;
aDetails
-
>
lineno
=
0
;
aDetails
-
>
function
[
0
]
=
'
\
0
'
;
aDetails
-
>
foffset
=
0
;
if
(
!
EnsureSymInitialized
(
)
)
{
return
false
;
}
HANDLE
myProcess
=
:
:
GetCurrentProcess
(
)
;
BOOL
ok
;
EnterCriticalSection
(
&
gDbgHelpCS
)
;
DWORD64
addr
=
(
DWORD64
)
aPC
;
IMAGEHLP_MODULE64
modInfo
;
IMAGEHLP_LINE64
lineInfo
;
BOOL
modInfoRes
;
modInfoRes
=
SymGetModuleInfoEspecial64
(
myProcess
addr
&
modInfo
&
lineInfo
)
;
if
(
modInfoRes
)
{
strncpy
(
aDetails
-
>
library
modInfo
.
LoadedImageName
sizeof
(
aDetails
-
>
library
)
)
;
aDetails
-
>
library
[
mozilla
:
:
ArrayLength
(
aDetails
-
>
library
)
-
1
]
=
'
\
0
'
;
aDetails
-
>
loffset
=
(
char
*
)
aPC
-
(
char
*
)
modInfo
.
BaseOfImage
;
if
(
lineInfo
.
FileName
)
{
strncpy
(
aDetails
-
>
filename
lineInfo
.
FileName
sizeof
(
aDetails
-
>
filename
)
)
;
aDetails
-
>
filename
[
mozilla
:
:
ArrayLength
(
aDetails
-
>
filename
)
-
1
]
=
'
\
0
'
;
aDetails
-
>
lineno
=
lineInfo
.
LineNumber
;
}
}
ULONG64
buffer
[
(
sizeof
(
SYMBOL_INFO
)
+
MAX_SYM_NAME
*
sizeof
(
TCHAR
)
+
sizeof
(
ULONG64
)
-
1
)
/
sizeof
(
ULONG64
)
]
;
PSYMBOL_INFO
pSymbol
=
(
PSYMBOL_INFO
)
buffer
;
pSymbol
-
>
SizeOfStruct
=
sizeof
(
SYMBOL_INFO
)
;
pSymbol
-
>
MaxNameLen
=
MAX_SYM_NAME
;
DWORD64
displacement
;
ok
=
SymFromAddr
(
myProcess
addr
&
displacement
pSymbol
)
;
if
(
ok
)
{
strncpy
(
aDetails
-
>
function
pSymbol
-
>
Name
sizeof
(
aDetails
-
>
function
)
)
;
aDetails
-
>
function
[
mozilla
:
:
ArrayLength
(
aDetails
-
>
function
)
-
1
]
=
'
\
0
'
;
aDetails
-
>
foffset
=
static_cast
<
ptrdiff_t
>
(
displacement
)
;
}
LeaveCriticalSection
(
&
gDbgHelpCS
)
;
return
true
;
}
#
elif
HAVE_DLADDR
&
&
\
(
HAVE__UNWIND_BACKTRACE
|
|
MOZ_STACKWALK_SUPPORTS_LINUX
|
|
\
MOZ_STACKWALK_SUPPORTS_MACOSX
)
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
<
stdio
.
h
>
#
if
(
__GLIBC_MINOR__
>
=
1
)
&
&
!
defined
(
__USE_GNU
)
#
define
__USE_GNU
#
endif
#
if
defined
(
MOZ_DEMANGLE_SYMBOLS
)
#
include
<
cxxabi
.
h
>
#
endif
namespace
mozilla
{
void
DemangleSymbol
(
const
char
*
aSymbol
char
*
aBuffer
int
aBufLen
)
{
aBuffer
[
0
]
=
'
\
0
'
;
#
if
defined
(
MOZ_DEMANGLE_SYMBOLS
)
char
*
demangled
=
abi
:
:
__cxa_demangle
(
aSymbol
0
0
0
)
;
if
(
demangled
)
{
strncpy
(
aBuffer
demangled
aBufLen
)
;
aBuffer
[
aBufLen
-
1
]
=
'
\
0
'
;
free
(
demangled
)
;
}
#
endif
}
}
#
if
(
(
defined
(
__i386
)
|
|
defined
(
PPC
)
|
|
defined
(
__ppc__
)
)
&
&
\
(
MOZ_STACKWALK_SUPPORTS_MACOSX
|
|
MOZ_STACKWALK_SUPPORTS_LINUX
)
)
MFBT_API
void
MozStackWalk
(
MozWalkStackCallback
aCallback
uint32_t
aSkipFrames
uint32_t
aMaxFrames
void
*
aClosure
)
{
void
*
*
bp
=
(
void
*
*
)
__builtin_frame_address
(
0
)
;
void
*
stackEnd
;
#
if
HAVE___LIBC_STACK_END
stackEnd
=
__libc_stack_end
;
#
elif
defined
(
XP_DARWIN
)
stackEnd
=
pthread_get_stackaddr_np
(
pthread_self
(
)
)
;
#
elif
defined
(
ANDROID
)
pthread_attr_t
sattr
;
pthread_attr_init
(
&
sattr
)
;
pthread_getattr_np
(
pthread_self
(
)
&
sattr
)
;
void
*
stackBase
=
stackEnd
=
nullptr
;
size_t
stackSize
=
0
;
if
(
gettid
(
)
!
=
getpid
(
)
)
{
if
(
!
pthread_attr_getstack
(
&
sattr
&
stackBase
&
stackSize
)
)
{
stackEnd
=
static_cast
<
char
*
>
(
stackBase
)
+
stackSize
;
}
else
{
stackEnd
=
nullptr
;
}
}
if
(
!
stackEnd
)
{
static
const
uintptr_t
kMaxStackSize
=
8
*
1024
*
1024
;
uintptr_t
maxStackStart
=
uintptr_t
(
-
1
)
-
kMaxStackSize
;
uintptr_t
stackStart
=
std
:
:
max
(
maxStackStart
uintptr_t
(
bp
)
)
;
stackEnd
=
reinterpret_cast
<
void
*
>
(
stackStart
+
kMaxStackSize
)
;
}
#
else
#
error
Unsupported
configuration
#
endif
FramePointerStackWalk
(
aCallback
aSkipFrames
aMaxFrames
aClosure
bp
stackEnd
)
;
}
#
elif
defined
(
HAVE__UNWIND_BACKTRACE
)
#
include
<
unwind
.
h
>
struct
unwind_info
{
MozWalkStackCallback
callback
;
int
skip
;
int
maxFrames
;
int
numFrames
;
void
*
closure
;
}
;
static
_Unwind_Reason_Code
unwind_callback
(
struct
_Unwind_Context
*
context
void
*
closure
)
{
unwind_info
*
info
=
static_cast
<
unwind_info
*
>
(
closure
)
;
void
*
pc
=
reinterpret_cast
<
void
*
>
(
_Unwind_GetIP
(
context
)
)
;
if
(
-
-
info
-
>
skip
<
0
)
{
info
-
>
numFrames
+
+
;
(
*
info
-
>
callback
)
(
info
-
>
numFrames
pc
nullptr
info
-
>
closure
)
;
if
(
info
-
>
maxFrames
!
=
0
&
&
info
-
>
numFrames
=
=
info
-
>
maxFrames
)
{
return
_URC_FOREIGN_EXCEPTION_CAUGHT
;
}
}
return
_URC_NO_REASON
;
}
MFBT_API
void
MozStackWalk
(
MozWalkStackCallback
aCallback
uint32_t
aSkipFrames
uint32_t
aMaxFrames
void
*
aClosure
)
{
unwind_info
info
;
info
.
callback
=
aCallback
;
info
.
skip
=
aSkipFrames
+
1
;
info
.
maxFrames
=
aMaxFrames
;
info
.
numFrames
=
0
;
info
.
closure
=
aClosure
;
(
void
)
_Unwind_Backtrace
(
unwind_callback
&
info
)
;
}
#
endif
bool
MFBT_API
MozDescribeCodeAddress
(
void
*
aPC
MozCodeAddressDetails
*
aDetails
)
{
aDetails
-
>
library
[
0
]
=
'
\
0
'
;
aDetails
-
>
loffset
=
0
;
aDetails
-
>
filename
[
0
]
=
'
\
0
'
;
aDetails
-
>
lineno
=
0
;
aDetails
-
>
function
[
0
]
=
'
\
0
'
;
aDetails
-
>
foffset
=
0
;
Dl_info
info
;
#
if
defined
(
ANDROID
)
&
&
defined
(
MOZ_LINKER
)
int
ok
=
__wrap_dladdr
(
aPC
&
info
)
;
#
else
int
ok
=
dladdr
(
aPC
&
info
)
;
#
endif
if
(
!
ok
)
{
return
true
;
}
strncpy
(
aDetails
-
>
library
info
.
dli_fname
sizeof
(
aDetails
-
>
library
)
)
;
aDetails
-
>
library
[
mozilla
:
:
ArrayLength
(
aDetails
-
>
library
)
-
1
]
=
'
\
0
'
;
aDetails
-
>
loffset
=
(
char
*
)
aPC
-
(
char
*
)
info
.
dli_fbase
;
#
if
!
defined
(
XP_FREEBSD
)
const
char
*
symbol
=
info
.
dli_sname
;
if
(
!
symbol
|
|
symbol
[
0
]
=
=
'
\
0
'
)
{
return
true
;
}
DemangleSymbol
(
symbol
aDetails
-
>
function
sizeof
(
aDetails
-
>
function
)
)
;
if
(
aDetails
-
>
function
[
0
]
=
=
'
\
0
'
)
{
strncpy
(
aDetails
-
>
function
symbol
sizeof
(
aDetails
-
>
function
)
)
;
aDetails
-
>
function
[
mozilla
:
:
ArrayLength
(
aDetails
-
>
function
)
-
1
]
=
'
\
0
'
;
}
aDetails
-
>
foffset
=
(
char
*
)
aPC
-
(
char
*
)
info
.
dli_saddr
;
#
endif
return
true
;
}
#
else
MFBT_API
void
MozStackWalk
(
MozWalkStackCallback
aCallback
uint32_t
aSkipFrames
uint32_t
aMaxFrames
void
*
aClosure
)
{
}
MFBT_API
bool
MozDescribeCodeAddress
(
void
*
aPC
MozCodeAddressDetails
*
aDetails
)
{
aDetails
-
>
library
[
0
]
=
'
\
0
'
;
aDetails
-
>
loffset
=
0
;
aDetails
-
>
filename
[
0
]
=
'
\
0
'
;
aDetails
-
>
lineno
=
0
;
aDetails
-
>
function
[
0
]
=
'
\
0
'
;
aDetails
-
>
foffset
=
0
;
return
false
;
}
#
endif
#
if
defined
(
XP_WIN
)
|
|
defined
(
XP_MACOSX
)
|
|
defined
(
XP_LINUX
)
namespace
mozilla
{
MOZ_ASAN_BLACKLIST
void
FramePointerStackWalk
(
MozWalkStackCallback
aCallback
uint32_t
aSkipFrames
uint32_t
aMaxFrames
void
*
aClosure
void
*
*
aBp
void
*
aStackEnd
)
{
int32_t
skip
=
aSkipFrames
;
uint32_t
numFrames
=
0
;
while
(
aBp
)
{
void
*
*
next
=
(
void
*
*
)
*
aBp
;
if
(
next
<
=
aBp
|
|
next
>
=
aStackEnd
|
|
(
uintptr_t
(
next
)
&
3
)
)
{
break
;
}
#
if
(
defined
(
__ppc__
)
&
&
defined
(
XP_MACOSX
)
)
|
|
defined
(
__powerpc64__
)
void
*
pc
=
*
(
aBp
+
2
)
;
aBp
+
=
3
;
#
else
void
*
pc
=
*
(
aBp
+
1
)
;
aBp
+
=
2
;
#
endif
if
(
-
-
skip
<
0
)
{
numFrames
+
+
;
(
*
aCallback
)
(
numFrames
pc
aBp
aClosure
)
;
if
(
aMaxFrames
!
=
0
&
&
numFrames
=
=
aMaxFrames
)
{
break
;
}
}
aBp
=
next
;
}
}
}
#
else
namespace
mozilla
{
MFBT_API
void
FramePointerStackWalk
(
MozWalkStackCallback
aCallback
uint32_t
aSkipFrames
uint32_t
aMaxFrames
void
*
aClosure
void
*
*
aBp
void
*
aStackEnd
)
{
}
}
#
endif
MFBT_API
void
MozFormatCodeAddressDetails
(
char
*
aBuffer
uint32_t
aBufferSize
uint32_t
aFrameNumber
void
*
aPC
const
MozCodeAddressDetails
*
aDetails
)
{
MozFormatCodeAddress
(
aBuffer
aBufferSize
aFrameNumber
aPC
aDetails
-
>
function
aDetails
-
>
library
aDetails
-
>
loffset
aDetails
-
>
filename
aDetails
-
>
lineno
)
;
}
MFBT_API
void
MozFormatCodeAddress
(
char
*
aBuffer
uint32_t
aBufferSize
uint32_t
aFrameNumber
const
void
*
aPC
const
char
*
aFunction
const
char
*
aLibrary
ptrdiff_t
aLOffset
const
char
*
aFileName
uint32_t
aLineNo
)
{
const
char
*
function
=
aFunction
&
&
aFunction
[
0
]
?
aFunction
:
"
?
?
?
"
;
if
(
aFileName
&
&
aFileName
[
0
]
)
{
snprintf
(
aBuffer
aBufferSize
"
#
%
02u
:
%
s
(
%
s
:
%
u
)
"
aFrameNumber
function
aFileName
aLineNo
)
;
}
else
if
(
aLibrary
&
&
aLibrary
[
0
]
)
{
snprintf
(
aBuffer
aBufferSize
"
#
%
02u
:
%
s
[
%
s
+
0x
%
"
PRIxPTR
"
]
"
aFrameNumber
function
aLibrary
static_cast
<
uintptr_t
>
(
aLOffset
)
)
;
}
else
{
snprintf
(
aBuffer
aBufferSize
"
#
%
02u
:
?
?
?
(
?
?
?
:
?
?
?
"
"
)
"
aFrameNumber
)
;
}
}
