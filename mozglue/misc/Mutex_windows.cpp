#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
PlatformMutex
.
h
"
#
include
<
windows
.
h
>
#
include
"
MutexPlatformData_windows
.
h
"
mozilla
:
:
detail
:
:
MutexImpl
:
:
MutexImpl
(
)
{
const
static
DWORD
LockSpinCount
=
1500
;
#
if
defined
(
RELEASE_OR_BETA
)
DWORD
flags
=
CRITICAL_SECTION_NO_DEBUG_INFO
;
#
else
DWORD
flags
=
0
;
#
endif
BOOL
r
=
InitializeCriticalSectionEx
(
&
platformData
(
)
-
>
criticalSection
LockSpinCount
flags
)
;
MOZ_RELEASE_ASSERT
(
r
)
;
}
mozilla
:
:
detail
:
:
MutexImpl
:
:
~
MutexImpl
(
)
{
DeleteCriticalSection
(
&
platformData
(
)
-
>
criticalSection
)
;
}
void
mozilla
:
:
detail
:
:
MutexImpl
:
:
lock
(
)
{
EnterCriticalSection
(
&
platformData
(
)
-
>
criticalSection
)
;
}
void
mozilla
:
:
detail
:
:
MutexImpl
:
:
unlock
(
)
{
LeaveCriticalSection
(
&
platformData
(
)
-
>
criticalSection
)
;
}
mozilla
:
:
detail
:
:
MutexImpl
:
:
PlatformData
*
mozilla
:
:
detail
:
:
MutexImpl
:
:
platformData
(
)
{
static_assert
(
sizeof
(
platformData_
)
>
=
sizeof
(
PlatformData
)
"
platformData_
is
too
small
"
)
;
return
reinterpret_cast
<
PlatformData
*
>
(
platformData_
)
;
}
