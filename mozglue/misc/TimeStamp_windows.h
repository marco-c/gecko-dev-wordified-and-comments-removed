#
ifndef
mozilla_TimeStamp_windows_h
#
define
mozilla_TimeStamp_windows_h
#
include
"
mozilla
/
Types
.
h
"
namespace
mozilla
{
#
define
ms2mt
(
x
)
(
(
x
)
*
mozilla
:
:
GetQueryPerformanceFrequencyPerSec
(
)
)
#
define
mt2ms
(
x
)
(
(
x
)
/
mozilla
:
:
GetQueryPerformanceFrequencyPerSec
(
)
)
#
define
mt2ms_f
(
x
)
(
double
(
x
)
/
mozilla
:
:
GetQueryPerformanceFrequencyPerSec
(
)
)
MFBT_API
uint64_t
GetQueryPerformanceFrequencyPerSec
(
)
;
class
TimeStamp
;
class
TimeStampValue
;
TimeStampValue
NowInternal
(
bool
aHighResolution
)
;
class
TimeStampValue
{
friend
TimeStampValue
NowInternal
(
bool
)
;
friend
bool
IsCanonicalTimeStamp
(
TimeStampValue
)
;
friend
struct
IPC
:
:
ParamTraits
<
mozilla
:
:
TimeStampValue
>
;
friend
class
TimeStamp
;
friend
class
Fuzzyfox
;
uint64_t
mGTC
;
uint64_t
mQPC
;
bool
mUsedCanonicalNow
;
bool
mIsNull
;
bool
mHasQPC
;
MFBT_API
TimeStampValue
(
uint64_t
aGTC
uint64_t
aQPC
bool
aHasQPC
bool
aUsedCanonicalNow
)
;
MFBT_API
uint64_t
CheckQPC
(
const
TimeStampValue
&
aOther
)
const
;
constexpr
MOZ_IMPLICIT
TimeStampValue
(
)
:
mGTC
(
0
)
mQPC
(
0
)
mUsedCanonicalNow
(
false
)
mIsNull
(
true
)
mHasQPC
(
false
)
{
}
public
:
MFBT_API
uint64_t
operator
-
(
const
TimeStampValue
&
aOther
)
const
;
TimeStampValue
operator
+
(
const
int64_t
aOther
)
const
{
return
TimeStampValue
(
mGTC
+
aOther
mQPC
+
aOther
mHasQPC
mUsedCanonicalNow
)
;
}
TimeStampValue
operator
-
(
const
int64_t
aOther
)
const
{
return
TimeStampValue
(
mGTC
-
aOther
mQPC
-
aOther
mHasQPC
mUsedCanonicalNow
)
;
}
MFBT_API
TimeStampValue
&
operator
+
=
(
const
int64_t
aOther
)
;
MFBT_API
TimeStampValue
&
operator
-
=
(
const
int64_t
aOther
)
;
bool
operator
<
(
const
TimeStampValue
&
aOther
)
const
{
return
int64_t
(
*
this
-
aOther
)
<
0
;
}
bool
operator
>
(
const
TimeStampValue
&
aOther
)
const
{
return
int64_t
(
*
this
-
aOther
)
>
0
;
}
bool
operator
<
=
(
const
TimeStampValue
&
aOther
)
const
{
return
int64_t
(
*
this
-
aOther
)
<
=
0
;
}
bool
operator
>
=
(
const
TimeStampValue
&
aOther
)
const
{
return
int64_t
(
*
this
-
aOther
)
>
=
0
;
}
bool
operator
=
=
(
const
TimeStampValue
&
aOther
)
const
{
return
int64_t
(
*
this
-
aOther
)
=
=
0
;
}
bool
operator
!
=
(
const
TimeStampValue
&
aOther
)
const
{
return
int64_t
(
*
this
-
aOther
)
!
=
0
;
}
bool
UsedCanonicalNow
(
)
const
{
return
mUsedCanonicalNow
;
}
void
SetCanonicalNow
(
)
{
mUsedCanonicalNow
=
true
;
}
bool
IsNull
(
)
const
{
return
mIsNull
;
}
}
;
}
#
endif
