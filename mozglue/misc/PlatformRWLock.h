#
ifndef
mozilla_PlatformRWLock_h
#
define
mozilla_PlatformRWLock_h
#
include
"
mozilla
/
Types
.
h
"
#
ifndef
XP_WIN
#
include
<
pthread
.
h
>
#
endif
namespace
mozilla
:
:
detail
{
class
RWLockImpl
{
public
:
explicit
MFBT_API
RWLockImpl
(
)
;
MFBT_API
~
RWLockImpl
(
)
;
protected
:
[
[
nodiscard
]
]
MFBT_API
bool
tryReadLock
(
)
;
MFBT_API
void
readLock
(
)
;
MFBT_API
void
readUnlock
(
)
;
[
[
nodiscard
]
]
MFBT_API
bool
tryWriteLock
(
)
;
MFBT_API
void
writeLock
(
)
;
MFBT_API
void
writeUnlock
(
)
;
private
:
RWLockImpl
(
const
RWLockImpl
&
)
=
delete
;
void
operator
=
(
const
RWLockImpl
&
)
=
delete
;
RWLockImpl
(
RWLockImpl
&
&
)
=
delete
;
void
operator
=
(
RWLockImpl
&
&
)
=
delete
;
bool
operator
=
=
(
const
RWLockImpl
&
rhs
)
=
delete
;
#
ifndef
XP_WIN
pthread_rwlock_t
mRWLock
;
#
else
void
*
mRWLock
;
#
endif
}
;
}
#
endif
