#
include
"
Arm64
.
h
"
#
include
"
mozilla
/
ResultVariant
.
h
"
namespace
mozilla
{
namespace
interceptor
{
namespace
arm64
{
struct
PCRelativeLoadTest
{
uint32_t
mTestMask
;
uint32_t
mMatchBits
;
LoadOrBranch
(
*
mDecodeFn
)
(
const
uintptr_t
aPC
const
uint32_t
aInst
)
;
}
;
static
LoadOrBranch
ADRPDecode
(
const
uintptr_t
aPC
const
uint32_t
aInst
)
{
const
uint32_t
kMaskDataProcImmPcRelativeImmLo
=
0x60000000
;
const
uint32_t
kMaskDataProcImmPcRelativeImmHi
=
0x00FFFFE0
;
uintptr_t
base
=
aPC
;
intptr_t
offset
=
SignExtend
<
intptr_t
>
(
(
(
aInst
&
kMaskDataProcImmPcRelativeImmHi
)
>
>
3
)
|
(
(
aInst
&
kMaskDataProcImmPcRelativeImmLo
)
>
>
29
)
21
)
;
base
&
=
~
0xFFFULL
;
offset
<
<
=
12
;
uint8_t
reg
=
aInst
&
0x1F
;
return
LoadOrBranch
(
base
+
offset
reg
)
;
}
MFBT_API
LoadOrBranch
BUncondImmDecode
(
const
uintptr_t
aPC
const
uint32_t
aInst
)
{
int32_t
offset
=
SignExtend
<
int32_t
>
(
aInst
&
0x03FFFFFFU
26
)
;
return
LoadOrBranch
(
aPC
+
offset
)
;
}
static
const
PCRelativeLoadTest
gPCRelTests
[
]
=
{
{
0x9FC00000
0x10000000
nullptr
}
{
0x9FC00000
0x90000000
&
ADRPDecode
}
{
0xFF000000
0x58000000
nullptr
}
{
0x3B000000
0x18000000
nullptr
}
{
0x7C000000
0x14000000
nullptr
}
{
0xFE000000
0x54000000
nullptr
}
{
0x7E000000
0x34000000
nullptr
}
{
0x7E000000
0x36000000
nullptr
}
{
0xFE000000
0xD6000000
nullptr
}
}
;
MFBT_API
Result
<
LoadOrBranch
PCRelCheckError
>
CheckForPCRel
(
const
uintptr_t
aPC
const
uint32_t
aInst
)
{
for
(
auto
&
&
test
:
gPCRelTests
)
{
if
(
(
aInst
&
test
.
mTestMask
)
=
=
test
.
mMatchBits
)
{
if
(
!
test
.
mDecodeFn
)
{
return
Err
(
PCRelCheckError
:
:
NoDecoderAvailable
)
;
}
return
test
.
mDecodeFn
(
aPC
aInst
)
;
}
}
return
Err
(
PCRelCheckError
:
:
InstructionNotPCRel
)
;
}
}
}
}
