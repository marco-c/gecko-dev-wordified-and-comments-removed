#
ifndef
mozilla_interceptor_PatcherBase_h
#
define
mozilla_interceptor_PatcherBase_h
#
include
"
mozilla
/
interceptor
/
TargetFunction
.
h
"
namespace
mozilla
{
namespace
interceptor
{
template
<
typename
VMPolicy
>
class
WindowsDllPatcherBase
{
protected
:
typedef
typename
VMPolicy
:
:
MMPolicyT
MMPolicyT
;
template
<
typename
.
.
.
Args
>
explicit
WindowsDllPatcherBase
(
Args
.
.
.
aArgs
)
:
mVMPolicy
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
{
}
ReadOnlyTargetFunction
<
MMPolicyT
>
ResolveRedirectedAddress
(
const
void
*
aOriginalFunction
)
{
ReadOnlyTargetFunction
<
MMPolicyT
>
origFn
(
mVMPolicy
aOriginalFunction
)
;
if
(
origFn
[
0
]
=
=
0xeb
)
{
int8_t
offset
=
(
int8_t
)
(
origFn
[
1
]
)
;
if
(
offset
<
=
0
)
{
return
std
:
:
move
(
origFn
)
;
}
for
(
int8_t
i
=
0
;
i
<
offset
;
i
+
+
)
{
if
(
origFn
[
2
+
i
]
!
=
0x90
)
{
return
std
:
:
move
(
origFn
)
;
}
}
uintptr_t
abstarget
=
(
origFn
+
2
+
offset
)
.
GetAddress
(
)
;
return
EnsureTargetIsAccessible
(
std
:
:
move
(
origFn
)
abstarget
)
;
}
#
if
defined
(
_M_IX86
)
if
(
origFn
[
0
]
=
=
0xff
&
&
origFn
[
1
]
=
=
0x25
)
{
uintptr_t
abstarget
=
(
origFn
+
2
)
.
template
ChasePointer
<
uintptr_t
*
>
(
)
;
return
EnsureTargetIsAccessible
(
std
:
:
move
(
origFn
)
abstarget
)
;
}
#
elif
defined
(
_M_X64
)
if
(
origFn
[
0
]
=
=
0x48
&
&
origFn
[
1
]
=
=
0xff
&
&
origFn
[
2
]
=
=
0x25
)
{
uintptr_t
abstarget
=
(
origFn
+
3
)
.
ChasePointerFromDisp
(
)
;
return
EnsureTargetIsAccessible
(
std
:
:
move
(
origFn
)
abstarget
)
;
}
if
(
origFn
[
0
]
=
=
0xe9
)
{
uintptr_t
abstarget
=
(
origFn
+
1
)
.
ReadDisp32AsAbsolute
(
)
;
return
EnsureTargetIsAccessible
(
std
:
:
move
(
origFn
)
abstarget
)
;
}
#
endif
return
std
:
:
move
(
origFn
)
;
}
private
:
ReadOnlyTargetFunction
<
MMPolicyT
>
EnsureTargetIsAccessible
(
ReadOnlyTargetFunction
<
MMPolicyT
>
aOrigFn
uintptr_t
aRedirAddress
)
{
if
(
!
mVMPolicy
.
IsPageAccessible
(
reinterpret_cast
<
void
*
>
(
aRedirAddress
)
)
)
{
return
std
:
:
move
(
aOrigFn
)
;
}
return
ReadOnlyTargetFunction
<
MMPolicyT
>
(
mVMPolicy
aRedirAddress
)
;
}
protected
:
VMPolicy
mVMPolicy
;
}
;
}
}
#
endif
