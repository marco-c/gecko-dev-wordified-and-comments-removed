#
ifndef
mozilla_interceptor_PatcherBase_h
#
define
mozilla_interceptor_PatcherBase_h
#
include
"
mozilla
/
interceptor
/
TargetFunction
.
h
"
namespace
mozilla
{
namespace
interceptor
{
template
<
typename
MMPolicy
>
struct
GetProcAddressSelector
;
template
<
>
struct
GetProcAddressSelector
<
MMPolicyOutOfProcess
>
{
FARPROC
operator
(
)
(
HMODULE
aModule
const
char
*
aName
const
MMPolicyOutOfProcess
&
aMMPolicy
)
const
{
auto
exportSection
=
mozilla
:
:
nt
:
:
PEExportSection
<
MMPolicyOutOfProcess
>
:
:
Get
(
aModule
aMMPolicy
)
;
return
exportSection
.
GetProcAddress
(
aName
)
;
}
}
;
template
<
>
struct
GetProcAddressSelector
<
MMPolicyInProcess
>
{
FARPROC
operator
(
)
(
HMODULE
aModule
const
char
*
aName
const
MMPolicyInProcess
&
)
const
{
return
:
:
GetProcAddress
(
aModule
aName
)
;
}
}
;
template
<
typename
VMPolicy
>
class
WindowsDllPatcherBase
{
protected
:
typedef
typename
VMPolicy
:
:
MMPolicyT
MMPolicyT
;
template
<
typename
.
.
.
Args
>
explicit
WindowsDllPatcherBase
(
Args
&
&
.
.
.
aArgs
)
:
mVMPolicy
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
{
}
ReadOnlyTargetFunction
<
MMPolicyT
>
ResolveRedirectedAddress
(
FARPROC
aOriginalFunction
)
{
ReadOnlyTargetFunction
<
MMPolicyT
>
origFn
(
mVMPolicy
aOriginalFunction
)
;
#
if
defined
(
_M_IX86
)
|
|
defined
(
_M_X64
)
uintptr_t
abstarget
=
0
;
if
(
origFn
.
IsRelativeShortJump
(
&
abstarget
)
)
{
int8_t
offset
=
abstarget
-
origFn
.
GetAddress
(
)
-
2
;
#
if
defined
(
_M_X64
)
if
(
(
offset
<
0
)
&
&
(
origFn
.
IsValidAtOffset
(
2
+
offset
)
)
)
{
ReadOnlyTargetFunction
<
MMPolicyT
>
redirectFn
(
mVMPolicy
abstarget
)
;
if
(
redirectFn
.
IsIndirectNearJump
(
&
abstarget
)
)
{
return
redirectFn
;
}
}
#
endif
if
(
offset
<
=
0
)
{
return
origFn
;
}
for
(
int8_t
i
=
0
;
i
<
offset
;
i
+
+
)
{
if
(
origFn
[
2
+
i
]
!
=
0x90
)
{
return
origFn
;
}
}
return
EnsureTargetIsAccessible
(
std
:
:
move
(
origFn
)
abstarget
)
;
}
if
(
origFn
.
IsIndirectNearJump
(
&
abstarget
)
)
{
return
EnsureTargetIsAccessible
(
std
:
:
move
(
origFn
)
abstarget
)
;
}
#
if
defined
(
_M_X64
)
if
(
origFn
.
IsRelativeNearJump
(
&
abstarget
)
)
{
return
EnsureTargetIsAccessible
(
std
:
:
move
(
origFn
)
abstarget
)
;
}
#
endif
#
endif
return
origFn
;
}
private
:
ReadOnlyTargetFunction
<
MMPolicyT
>
EnsureTargetIsAccessible
(
ReadOnlyTargetFunction
<
MMPolicyT
>
aOrigFn
uintptr_t
aRedirAddress
)
{
if
(
!
mVMPolicy
.
IsPageAccessible
(
aRedirAddress
)
)
{
return
aOrigFn
;
}
return
ReadOnlyTargetFunction
<
MMPolicyT
>
(
mVMPolicy
aRedirAddress
)
;
}
public
:
FARPROC
GetProcAddress
(
HMODULE
aModule
const
char
*
aName
)
const
{
GetProcAddressSelector
<
MMPolicyT
>
selector
;
return
selector
(
aModule
aName
mVMPolicy
)
;
}
protected
:
VMPolicy
mVMPolicy
;
}
;
}
}
#
endif
