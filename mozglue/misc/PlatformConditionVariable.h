#
ifndef
mozilla_ConditionVariable_h
#
define
mozilla_ConditionVariable_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
PlatformMutex
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
<
stdint
.
h
>
#
ifndef
XP_WIN
#
include
<
pthread
.
h
>
#
endif
namespace
mozilla
{
enum
class
CVStatus
{
NoTimeout
Timeout
}
;
namespace
detail
{
class
ConditionVariableImpl
{
public
:
struct
PlatformData
;
MFBT_API
ConditionVariableImpl
(
)
;
MFBT_API
~
ConditionVariableImpl
(
)
;
MFBT_API
void
notify_one
(
)
;
MFBT_API
void
notify_all
(
)
;
MFBT_API
void
wait
(
MutexImpl
&
lock
)
;
MFBT_API
CVStatus
wait_for
(
MutexImpl
&
lock
const
mozilla
:
:
TimeDuration
&
rel_time
)
;
private
:
ConditionVariableImpl
(
const
ConditionVariableImpl
&
)
=
delete
;
ConditionVariableImpl
&
operator
=
(
const
ConditionVariableImpl
&
)
=
delete
;
PlatformData
*
platformData
(
)
;
#
ifndef
XP_WIN
void
*
platformData_
[
sizeof
(
pthread_cond_t
)
/
sizeof
(
void
*
)
]
;
static_assert
(
sizeof
(
pthread_cond_t
)
/
sizeof
(
void
*
)
!
=
0
&
&
sizeof
(
pthread_cond_t
)
%
sizeof
(
void
*
)
=
=
0
"
pthread_cond_t
must
have
pointer
alignment
"
)
;
#
else
void
*
platformData_
[
4
]
;
#
endif
}
;
}
}
#
endif
