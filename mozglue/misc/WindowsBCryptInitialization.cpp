#
include
"
mozilla
/
WindowsBCryptInitialization
.
h
"
#
include
"
mozilla
/
RandomNum
.
h
"
#
include
"
nsWindowsDllInterceptor
.
h
"
#
include
<
bcrypt
.
h
>
#
pragma
comment
(
lib
"
bcrypt
.
lib
"
)
namespace
mozilla
{
static
mozilla
:
:
WindowsDllInterceptor
BCryptIntercept
;
static
mozilla
:
:
WindowsDllInterceptor
:
:
FuncHookType
<
decltype
(
&
:
:
BCryptGenRandom
)
>
stub_BCryptGenRandom
;
NTSTATUS
WINAPI
patched_BCryptGenRandom
(
BCRYPT_ALG_HANDLE
aAlgorithm
PUCHAR
aBuffer
ULONG
aSize
ULONG
aFlags
)
{
if
(
!
aAlgorithm
&
&
(
aFlags
&
BCRYPT_USE_SYSTEM_PREFERRED_RNG
)
&
&
aBuffer
&
&
aSize
&
&
mozilla
:
:
GenerateRandomBytesFromOS
(
aBuffer
aSize
)
)
{
return
STATUS_SUCCESS
;
}
return
stub_BCryptGenRandom
(
aAlgorithm
aBuffer
aSize
aFlags
)
;
}
bool
WindowsBCryptInitialization
(
)
{
UCHAR
buffer
[
32
]
;
NTSTATUS
status
=
:
:
BCryptGenRandom
(
nullptr
buffer
sizeof
(
buffer
)
BCRYPT_USE_SYSTEM_PREFERRED_RNG
)
;
if
(
NT_SUCCESS
(
status
)
)
{
return
true
;
}
BCryptIntercept
.
Init
(
L
"
bcrypt
.
dll
"
)
;
if
(
!
stub_BCryptGenRandom
.
Set
(
BCryptIntercept
"
BCryptGenRandom
"
patched_BCryptGenRandom
)
)
{
return
false
;
}
status
=
:
:
BCryptGenRandom
(
nullptr
buffer
sizeof
(
buffer
)
BCRYPT_USE_SYSTEM_PREFERRED_RNG
)
;
return
NT_SUCCESS
(
status
)
;
}
}
