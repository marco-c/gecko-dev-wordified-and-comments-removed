#
ifndef
mozilla_AwakeTimeStamp_h
#
define
mozilla_AwakeTimeStamp_h
#
include
<
stdint
.
h
>
#
include
<
mozilla
/
Types
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
namespace
mozilla
{
class
AwakeTimeDuration
;
class
AwakeTimeStamp
{
public
:
MFBT_API
static
AwakeTimeStamp
NowLoRes
(
)
;
MFBT_API
void
operator
+
=
(
const
AwakeTimeDuration
&
aOther
)
;
MFBT_API
void
operator
-
=
(
const
AwakeTimeDuration
&
aOther
)
;
MFBT_API
bool
operator
<
(
const
AwakeTimeStamp
&
aOther
)
const
{
return
mValueUs
<
aOther
.
mValueUs
;
}
MFBT_API
bool
operator
<
=
(
const
AwakeTimeStamp
&
aOther
)
const
{
return
mValueUs
<
=
aOther
.
mValueUs
;
}
MFBT_API
bool
operator
>
=
(
const
AwakeTimeStamp
&
aOther
)
const
{
return
mValueUs
>
=
aOther
.
mValueUs
;
}
MFBT_API
bool
operator
>
(
const
AwakeTimeStamp
&
aOther
)
const
{
return
mValueUs
>
aOther
.
mValueUs
;
}
MFBT_API
bool
operator
=
=
(
const
AwakeTimeStamp
&
aOther
)
const
{
return
mValueUs
=
=
aOther
.
mValueUs
;
}
MFBT_API
bool
operator
!
=
(
const
AwakeTimeStamp
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
MFBT_API
AwakeTimeDuration
operator
-
(
AwakeTimeStamp
const
&
aOther
)
const
;
MFBT_API
AwakeTimeStamp
operator
+
(
const
AwakeTimeDuration
&
aDuration
)
const
;
private
:
explicit
AwakeTimeStamp
(
uint64_t
aValueUs
)
:
mValueUs
(
aValueUs
)
{
}
uint64_t
mValueUs
;
}
;
class
AwakeTimeDuration
{
public
:
MFBT_API
AwakeTimeDuration
(
)
:
mValueUs
(
0
)
{
}
MFBT_API
double
ToSeconds
(
)
const
;
MFBT_API
double
ToMilliseconds
(
)
const
;
MFBT_API
double
ToMicroseconds
(
)
const
;
MFBT_API
void
operator
+
=
(
const
AwakeTimeDuration
&
aDuration
)
{
mValueUs
+
=
aDuration
.
mValueUs
;
}
MFBT_API
AwakeTimeDuration
operator
+
(
const
AwakeTimeDuration
&
aOther
)
const
{
return
AwakeTimeDuration
(
mValueUs
+
aOther
.
mValueUs
)
;
}
MFBT_API
AwakeTimeDuration
operator
-
(
const
AwakeTimeDuration
&
aOther
)
const
{
MOZ_ASSERT
(
mValueUs
>
=
aOther
.
mValueUs
)
;
return
AwakeTimeDuration
(
mValueUs
-
aOther
.
mValueUs
)
;
}
MFBT_API
void
operator
-
=
(
const
AwakeTimeDuration
&
aOther
)
{
MOZ_ASSERT
(
mValueUs
>
=
aOther
.
mValueUs
)
;
mValueUs
-
=
aOther
.
mValueUs
;
}
MFBT_API
bool
operator
<
(
const
AwakeTimeDuration
&
aOther
)
const
{
return
mValueUs
<
aOther
.
mValueUs
;
}
MFBT_API
bool
operator
<
=
(
const
AwakeTimeDuration
&
aOther
)
const
{
return
mValueUs
<
=
aOther
.
mValueUs
;
}
MFBT_API
bool
operator
>
=
(
const
AwakeTimeDuration
&
aOther
)
const
{
return
mValueUs
>
=
aOther
.
mValueUs
;
}
MFBT_API
bool
operator
>
(
const
AwakeTimeDuration
&
aOther
)
const
{
return
mValueUs
>
aOther
.
mValueUs
;
}
MFBT_API
bool
operator
=
=
(
const
AwakeTimeDuration
&
aOther
)
const
{
return
mValueUs
=
=
aOther
.
mValueUs
;
}
MFBT_API
bool
operator
!
=
(
const
AwakeTimeDuration
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
private
:
friend
AwakeTimeStamp
;
explicit
AwakeTimeDuration
(
uint64_t
aValueUs
)
:
mValueUs
(
aValueUs
)
{
}
uint64_t
mValueUs
;
}
;
}
;
#
endif
