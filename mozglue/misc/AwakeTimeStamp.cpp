#
include
"
AwakeTimeStamp
.
h
"
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
endif
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
namespace
mozilla
{
static
constexpr
uint64_t
kUSperS
=
1000000
;
static
constexpr
uint64_t
kUSperMS
=
1000
;
#
ifndef
XP_WIN
static
constexpr
uint64_t
kNSperUS
=
1000
;
#
endif
double
AwakeTimeDuration
:
:
ToSeconds
(
)
const
{
return
static_cast
<
double
>
(
mValueUs
)
/
kUSperS
;
}
double
AwakeTimeDuration
:
:
ToMilliseconds
(
)
const
{
return
static_cast
<
double
>
(
mValueUs
)
/
kUSperMS
;
}
double
AwakeTimeDuration
:
:
ToMicroseconds
(
)
const
{
return
static_cast
<
double
>
(
mValueUs
)
;
}
AwakeTimeDuration
AwakeTimeStamp
:
:
operator
-
(
AwakeTimeStamp
const
&
aOther
)
const
{
return
AwakeTimeDuration
(
mValueUs
-
aOther
.
mValueUs
)
;
}
AwakeTimeStamp
AwakeTimeStamp
:
:
operator
+
(
const
AwakeTimeDuration
&
aDuration
)
const
{
return
AwakeTimeStamp
(
mValueUs
+
aDuration
.
mValueUs
)
;
}
void
AwakeTimeStamp
:
:
operator
+
=
(
const
AwakeTimeDuration
&
aOther
)
{
mValueUs
+
=
aOther
.
mValueUs
;
}
void
AwakeTimeStamp
:
:
operator
-
=
(
const
AwakeTimeDuration
&
aOther
)
{
MOZ_ASSERT
(
mValueUs
>
=
aOther
.
mValueUs
)
;
mValueUs
-
=
aOther
.
mValueUs
;
}
#
if
defined
(
__APPLE__
)
&
&
defined
(
__MACH__
)
#
include
<
time
.
h
>
#
include
<
sys
/
time
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
mach
/
mach_time
.
h
>
AwakeTimeStamp
AwakeTimeStamp
:
:
NowLoRes
(
)
{
return
AwakeTimeStamp
(
clock_gettime_nsec_np
(
CLOCK_UPTIME_RAW
)
/
kNSperUS
)
;
}
#
elif
defined
(
XP_WIN
)
static
constexpr
uint64_t
kHNSperUS
=
10
;
AwakeTimeStamp
AwakeTimeStamp
:
:
NowLoRes
(
)
{
ULONGLONG
interrupt_time
;
DebugOnly
<
bool
>
rv
=
QueryUnbiasedInterruptTime
(
&
interrupt_time
)
;
MOZ_ASSERT
(
rv
)
;
return
AwakeTimeStamp
(
interrupt_time
/
kHNSperUS
)
;
}
#
else
#
include
<
time
.
h
>
uint64_t
TimespecToMicroseconds
(
struct
timespec
aTs
)
{
return
aTs
.
tv_sec
*
kUSperS
+
aTs
.
tv_nsec
/
kNSperUS
;
}
AwakeTimeStamp
AwakeTimeStamp
:
:
NowLoRes
(
)
{
struct
timespec
ts
=
{
0
}
;
DebugOnly
<
int
>
rv
=
clock_gettime
(
CLOCK_MONOTONIC
&
ts
)
;
MOZ_ASSERT
(
!
rv
)
;
return
AwakeTimeStamp
(
TimespecToMicroseconds
(
ts
)
)
;
}
#
endif
}
;
