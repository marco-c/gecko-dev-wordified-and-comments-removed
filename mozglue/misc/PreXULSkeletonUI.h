#
ifndef
PreXULSkeletonUI_h_
#
define
PreXULSkeletonUI_h_
#
include
<
windows
.
h
>
#
include
"
mozilla
/
Types
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
namespace
mozilla
{
static
const
DWORD
kPreXULSkeletonUIWindowStyle
=
WS_CLIPCHILDREN
|
WS_DLGFRAME
|
WS_BORDER
|
WS_MAXIMIZEBOX
|
WS_MINIMIZEBOX
|
WS_SIZEBOX
|
WS_SYSMENU
;
static
const
DWORD
kPreXULSkeletonUIWindowStyleEx
=
WS_EX_WINDOWEDGE
;
struct
CSSPixelSpan
{
double
start
;
double
end
;
}
;
struct
DevPixelSpan
{
int
start
;
int
end
;
}
;
struct
SkeletonUISettings
{
uint32_t
screenX
;
uint32_t
screenY
;
uint32_t
width
;
uint32_t
height
;
CSSPixelSpan
urlbarSpan
;
CSSPixelSpan
searchbarSpan
;
double
cssToDevPixelScaling
;
Vector
<
CSSPixelSpan
>
springs
;
bool
maximized
;
bool
menubarShown
;
bool
rtlEnabled
;
}
;
enum
class
ThemeMode
:
uint32_t
{
Invalid
Default
Dark
Light
}
;
struct
ThemeColors
{
uint32_t
backgroundColor
;
uint32_t
toolbarForegroundColor
;
uint32_t
tabBarColor
;
uint32_t
chromeContentDividerColor
;
uint32_t
tabLineColor
;
uint32_t
urlbarColor
;
uint32_t
animationColor
;
}
;
MFBT_API
void
CreateAndStorePreXULSkeletonUI
(
HINSTANCE
hInstance
int
argc
char
*
*
argv
)
;
MFBT_API
HWND
ConsumePreXULSkeletonUIHandle
(
)
;
MFBT_API
bool
WasPreXULSkeletonUIMaximized
(
)
;
MFBT_API
void
PersistPreXULSkeletonUIValues
(
const
SkeletonUISettings
&
settings
)
;
MFBT_API
bool
GetPreXULSkeletonUIEnabled
(
)
;
MFBT_API
void
SetPreXULSkeletonUIEnabledIfAllowed
(
bool
value
)
;
MFBT_API
void
PollPreXULSkeletonUIEvents
(
)
;
MFBT_API
void
SetPreXULSkeletonUIThemeId
(
ThemeMode
theme
)
;
}
#
endif
