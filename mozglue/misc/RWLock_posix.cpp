#
ifdef
XP_WIN
#
error
This
file
should
only
be
compiled
on
non
-
Windows
platforms
.
#
endif
#
include
"
mozilla
/
PlatformRWLock
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
<
errno
.
h
>
mozilla
:
:
detail
:
:
RWLockImpl
:
:
RWLockImpl
(
)
{
MOZ_RELEASE_ASSERT
(
pthread_rwlock_init
(
&
mRWLock
nullptr
)
=
=
0
"
pthread_rwlock_init
failed
"
)
;
}
mozilla
:
:
detail
:
:
RWLockImpl
:
:
~
RWLockImpl
(
)
{
MOZ_RELEASE_ASSERT
(
pthread_rwlock_destroy
(
&
mRWLock
)
=
=
0
"
pthread_rwlock_destroy
failed
"
)
;
}
bool
mozilla
:
:
detail
:
:
RWLockImpl
:
:
tryReadLock
(
)
{
int
rv
=
pthread_rwlock_tryrdlock
(
&
mRWLock
)
;
MOZ_RELEASE_ASSERT
(
rv
=
=
0
|
|
rv
=
=
EBUSY
|
|
rv
=
=
EDEADLK
"
pthread_rwlock_tryrdlock
failed
"
)
;
return
rv
=
=
0
;
}
void
mozilla
:
:
detail
:
:
RWLockImpl
:
:
readLock
(
)
{
MOZ_RELEASE_ASSERT
(
pthread_rwlock_rdlock
(
&
mRWLock
)
=
=
0
"
pthread_rwlock_rdlock
failed
"
)
;
}
void
mozilla
:
:
detail
:
:
RWLockImpl
:
:
readUnlock
(
)
{
MOZ_RELEASE_ASSERT
(
pthread_rwlock_unlock
(
&
mRWLock
)
=
=
0
"
pthread_rwlock_unlock
failed
"
)
;
}
bool
mozilla
:
:
detail
:
:
RWLockImpl
:
:
tryWriteLock
(
)
{
int
rv
=
pthread_rwlock_trywrlock
(
&
mRWLock
)
;
MOZ_RELEASE_ASSERT
(
rv
=
=
0
|
|
rv
=
=
EBUSY
|
|
rv
=
=
EDEADLK
"
pthread_rwlock_trywrlock
failed
"
)
;
return
rv
=
=
0
;
}
void
mozilla
:
:
detail
:
:
RWLockImpl
:
:
writeLock
(
)
{
MOZ_RELEASE_ASSERT
(
pthread_rwlock_wrlock
(
&
mRWLock
)
=
=
0
"
pthread_rwlock_wrlock
failed
"
)
;
}
void
mozilla
:
:
detail
:
:
RWLockImpl
:
:
writeUnlock
(
)
{
MOZ_RELEASE_ASSERT
(
pthread_rwlock_unlock
(
&
mRWLock
)
=
=
0
"
pthread_rwlock_unlock
failed
"
)
;
}
