#
ifndef
mozilla_PlatformMutex_h
#
define
mozilla_PlatformMutex_h
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
if
!
defined
(
XP_WIN
)
#
include
<
pthread
.
h
>
#
endif
namespace
mozilla
{
namespace
detail
{
class
ConditionVariableImpl
;
class
MutexImpl
{
public
:
struct
PlatformData
;
MFBT_API
MutexImpl
(
)
;
MFBT_API
~
MutexImpl
(
)
;
protected
:
MFBT_API
void
lock
(
)
;
MFBT_API
void
unlock
(
)
;
private
:
MutexImpl
(
const
MutexImpl
&
)
=
delete
;
void
operator
=
(
const
MutexImpl
&
)
=
delete
;
MutexImpl
(
MutexImpl
&
&
)
=
delete
;
void
operator
=
(
MutexImpl
&
&
)
=
delete
;
bool
operator
=
=
(
const
MutexImpl
&
rhs
)
=
delete
;
void
mutexLock
(
)
;
#
ifdef
XP_DARWIN
bool
mutexTryLock
(
)
;
#
endif
PlatformData
*
platformData
(
)
;
#
if
!
defined
(
XP_WIN
)
void
*
platformData_
[
sizeof
(
pthread_mutex_t
)
/
sizeof
(
void
*
)
]
;
static_assert
(
sizeof
(
pthread_mutex_t
)
/
sizeof
(
void
*
)
!
=
0
&
&
sizeof
(
pthread_mutex_t
)
%
sizeof
(
void
*
)
=
=
0
"
pthread_mutex_t
must
have
pointer
alignment
"
)
;
#
ifdef
XP_DARWIN
mozilla
:
:
Atomic
<
int32_t
mozilla
:
:
MemoryOrdering
:
:
Relaxed
>
averageSpins
;
#
endif
#
else
void
*
platformData_
[
6
]
;
#
endif
friend
class
mozilla
:
:
detail
:
:
ConditionVariableImpl
;
}
;
}
}
#
endif
