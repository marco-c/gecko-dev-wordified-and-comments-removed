#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
Uptime
.
h
"
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
<
stdlib
.
h
>
namespace
mozilla
{
struct
TimeStampInitialization
{
TimeStamp
mFirstTimeStamp
;
TimeStamp
mProcessCreation
;
TimeStampInitialization
(
)
{
TimeStamp
:
:
Startup
(
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
TimeStamp
process_creation
;
char
*
mozAppRestart
=
getenv
(
"
MOZ_APP_RESTART
"
)
;
if
(
mozAppRestart
&
&
(
strcmp
(
mozAppRestart
"
"
)
!
=
0
)
)
{
process_creation
=
now
;
}
else
{
uint64_t
uptime
=
TimeStamp
:
:
ComputeProcessUptime
(
)
;
process_creation
=
now
-
TimeDuration
:
:
FromMicroseconds
(
static_cast
<
double
>
(
uptime
)
)
;
if
(
(
process_creation
>
now
)
|
|
(
uptime
=
=
0
)
)
{
process_creation
=
now
;
}
}
mFirstTimeStamp
=
now
;
mProcessCreation
=
process_creation
;
mozilla
:
:
InitializeUptime
(
)
;
}
;
~
TimeStampInitialization
(
)
{
TimeStamp
:
:
Shutdown
(
)
;
}
;
}
;
static
TimeStampInitialization
sInitOnce
;
MFBT_API
TimeStamp
TimeStamp
:
:
ProcessCreation
(
)
{
return
sInitOnce
.
mProcessCreation
;
}
void
TimeStamp
:
:
RecordProcessRestart
(
)
{
sInitOnce
.
mProcessCreation
=
TimeStamp
:
:
Now
(
)
;
}
}
