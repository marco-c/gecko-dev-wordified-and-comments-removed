#
ifndef
mozilla_WindowsDllBlocklistCommon_h
#
define
mozilla_WindowsDllBlocklistCommon_h
#
include
<
stdint
.
h
>
namespace
mozilla
{
template
<
typename
CharType
>
struct
DllBlockInfoT
{
const
CharType
*
name
;
uint64_t
maxVersion
;
enum
Flags
{
FLAGS_DEFAULT
=
0
BLOCK_WIN8PLUS_ONLY
=
1
BLOCK_WIN8_ONLY
=
2
USE_TIMESTAMP
=
4
CHILD_PROCESSES_ONLY
=
8
}
flags
;
static
const
uint64_t
ALL_VERSIONS
=
(
uint64_t
)
-
1LL
;
static
const
uint64_t
UNVERSIONED
=
0ULL
;
}
;
}
static
inline
constexpr
uint64_t
MAKE_VERSION
(
uint16_t
a
uint16_t
b
uint16_t
c
uint16_t
d
)
{
return
static_cast
<
uint64_t
>
(
a
)
<
<
48
|
static_cast
<
uint64_t
>
(
b
)
<
<
32
|
static_cast
<
uint64_t
>
(
c
)
<
<
16
|
static_cast
<
uint64_t
>
(
d
)
;
}
#
if
!
defined
(
DLL_BLOCKLIST_CHAR_TYPE
)
#
error
"
You
must
define
DLL_BLOCKLIST_CHAR_TYPE
"
#
endif
#
define
DLL_BLOCKLIST_DEFINITIONS_BEGIN
\
using
DllBlockInfo
=
mozilla
:
:
DllBlockInfoT
<
DLL_BLOCKLIST_CHAR_TYPE
>
;
\
static
const
DllBlockInfo
gWindowsDllBlocklist
[
]
=
{
#
define
ALL_VERSIONS
DllBlockInfo
:
:
ALL_VERSIONS
#
define
UNVERSIONED
DllBlockInfo
:
:
UNVERSIONED
#
define
DLL_BLOCKLIST_DEFINITIONS_END
\
{
nullptr
0
}
\
}
;
#
define
DECLARE_POINTER_TO_FIRST_DLL_BLOCKLIST_ENTRY
(
name
)
\
const
DllBlockInfo
*
name
=
&
gWindowsDllBlocklist
[
0
]
#
endif
