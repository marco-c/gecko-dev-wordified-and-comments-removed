#
ifndef
mozilla_glue_WindowsDllServices_h
#
define
mozilla_glue_WindowsDllServices_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Authenticode
.
h
"
#
include
"
mozilla
/
WindowsDllBlocklist
.
h
"
#
if
defined
(
MOZILLA_INTERNAL_API
)
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
SystemGroup
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
endif
#
include
<
winternl
.
h
>
namespace
mozilla
{
namespace
glue
{
namespace
detail
{
class
DllServicesBase
:
public
Authenticode
{
public
:
virtual
void
DispatchDllLoadNotification
(
PCUNICODE_STRING
aDllName
)
=
0
;
void
SetAuthenticodeImpl
(
Authenticode
*
aAuthenticode
)
{
mAuthenticode
=
aAuthenticode
;
}
#
if
defined
(
DEBUG
)
UniquePtr
<
wchar_t
[
]
>
GetBinaryOrgName
(
const
wchar_t
*
aFilePath
)
override
#
else
UniquePtr
<
wchar_t
[
]
>
GetBinaryOrgName
(
const
wchar_t
*
aFilePath
)
final
#
endif
{
if
(
!
mAuthenticode
)
{
return
nullptr
;
}
return
mAuthenticode
-
>
GetBinaryOrgName
(
aFilePath
)
;
}
void
Disable
(
)
{
DllBlocklist_SetDllServices
(
nullptr
)
;
}
DllServicesBase
(
const
DllServicesBase
&
)
=
delete
;
DllServicesBase
(
DllServicesBase
&
&
)
=
delete
;
DllServicesBase
&
operator
=
(
const
DllServicesBase
&
)
=
delete
;
DllServicesBase
&
operator
=
(
DllServicesBase
&
&
)
=
delete
;
protected
:
DllServicesBase
(
)
:
mAuthenticode
(
nullptr
)
{
}
virtual
~
DllServicesBase
(
)
=
default
;
void
Enable
(
)
{
DllBlocklist_SetDllServices
(
this
)
;
}
private
:
Authenticode
*
mAuthenticode
;
}
;
}
#
if
defined
(
MOZILLA_INTERNAL_API
)
class
DllServices
:
public
detail
:
:
DllServicesBase
{
public
:
void
DispatchDllLoadNotification
(
PCUNICODE_STRING
aDllName
)
final
{
nsDependentSubstring
strDllName
(
aDllName
-
>
Buffer
aDllName
-
>
Length
/
sizeof
(
wchar_t
)
)
;
nsCOMPtr
<
nsIRunnable
>
runnable
(
NewRunnableMethod
<
bool
nsString
>
(
"
DllServices
:
:
NotifyDllLoad
"
this
&
DllServices
:
:
NotifyDllLoad
NS_IsMainThread
(
)
strDllName
)
)
;
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
runnable
.
forget
(
)
)
;
}
#
if
defined
(
DEBUG
)
UniquePtr
<
wchar_t
[
]
>
GetBinaryOrgName
(
const
wchar_t
*
aFilePath
)
final
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
return
detail
:
:
DllServicesBase
:
:
GetBinaryOrgName
(
aFilePath
)
;
}
#
endif
NS_INLINE_DECL_THREADSAFE_VIRTUAL_REFCOUNTING
(
DllServices
)
protected
:
DllServices
(
)
=
default
;
~
DllServices
(
)
=
default
;
virtual
void
NotifyDllLoad
(
const
bool
aIsMainThread
const
nsString
&
aDllName
)
=
0
;
}
;
#
else
class
BasicDllServices
:
public
detail
:
:
DllServicesBase
{
public
:
BasicDllServices
(
)
{
Enable
(
)
;
}
~
BasicDllServices
(
)
{
Disable
(
)
;
}
virtual
void
DispatchDllLoadNotification
(
PCUNICODE_STRING
aDllName
)
override
{
}
}
;
#
endif
}
}
#
endif
