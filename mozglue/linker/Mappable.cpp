#
include
<
fcntl
.
h
>
#
include
<
sys
/
stat
.
h
>
#
include
"
Mappable
.
h
"
Mappable
*
Mappable
:
:
Create
(
const
char
*
path
)
{
int
fd
=
open
(
path
O_RDONLY
)
;
if
(
fd
!
=
-
1
)
return
new
Mappable
(
fd
)
;
return
nullptr
;
}
MemoryRange
Mappable
:
:
mmap
(
const
void
*
addr
size_t
length
int
prot
int
flags
off_t
offset
)
{
MOZ_ASSERT
(
fd
&
&
*
fd
!
=
-
1
)
;
MOZ_ASSERT
(
!
(
flags
&
MAP_SHARED
)
)
;
flags
|
=
MAP_PRIVATE
;
return
MemoryRange
:
:
mmap
(
const_cast
<
void
*
>
(
addr
)
length
prot
flags
*
fd
offset
)
;
}
void
Mappable
:
:
finalize
(
)
{
fd
.
emplace
(
-
1
)
;
}
size_t
Mappable
:
:
GetLength
(
)
const
{
struct
stat
st
;
return
fstat
(
*
fd
&
st
)
?
0
:
st
.
st_size
;
}
