#
ifndef
Mappable_h
#
define
Mappable_h
#
include
"
Zip
.
h
"
#
include
"
zlib
.
h
"
class
Mappable
:
public
mozilla
:
:
RefCounted
<
Mappable
>
{
public
:
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
Mappable
)
virtual
~
Mappable
(
)
{
}
virtual
MemoryRange
mmap
(
const
void
*
addr
size_t
length
int
prot
int
flags
off_t
offset
)
=
0
;
enum
Kind
{
MAPPABLE_FILE
MAPPABLE_DEFLATE
MAPPABLE_SEEKABLE_ZSTREAM
}
;
virtual
Kind
GetKind
(
)
const
=
0
;
private
:
virtual
void
munmap
(
void
*
addr
size_t
length
)
{
:
:
munmap
(
addr
length
)
;
}
friend
class
Mappable1stPagePtr
;
friend
class
LibHandle
;
public
:
virtual
void
finalize
(
)
=
0
;
virtual
size_t
GetLength
(
)
const
=
0
;
}
;
class
MappableFile
:
public
Mappable
{
public
:
~
MappableFile
(
)
{
}
static
Mappable
*
Create
(
const
char
*
path
)
;
virtual
MemoryRange
mmap
(
const
void
*
addr
size_t
length
int
prot
int
flags
off_t
offset
)
;
virtual
void
finalize
(
)
;
virtual
size_t
GetLength
(
)
const
;
virtual
Kind
GetKind
(
)
const
{
return
MAPPABLE_FILE
;
}
;
protected
:
explicit
MappableFile
(
int
fd
)
:
fd
(
fd
)
{
}
private
:
AutoCloseFD
fd
;
}
;
class
_MappableBuffer
;
class
MappableDeflate
:
public
Mappable
{
public
:
~
MappableDeflate
(
)
;
static
Mappable
*
Create
(
const
char
*
name
Zip
*
zip
Zip
:
:
Stream
*
stream
)
;
virtual
MemoryRange
mmap
(
const
void
*
addr
size_t
length
int
prot
int
flags
off_t
offset
)
;
virtual
void
finalize
(
)
;
virtual
size_t
GetLength
(
)
const
;
virtual
Kind
GetKind
(
)
const
{
return
MAPPABLE_DEFLATE
;
}
;
private
:
MappableDeflate
(
_MappableBuffer
*
buf
Zip
*
zip
Zip
:
:
Stream
*
stream
)
;
RefPtr
<
Zip
>
zip
;
mozilla
:
:
UniquePtr
<
_MappableBuffer
>
buffer
;
z_stream
zStream
;
}
;
#
endif
