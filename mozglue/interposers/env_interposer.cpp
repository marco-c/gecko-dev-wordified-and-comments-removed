#
include
<
pthread
.
h
>
#
include
"
InterposerHelper
.
h
"
static
pthread_mutex_t
gEnvLock
=
PTHREAD_MUTEX_INITIALIZER
;
extern
"
C
"
{
MFBT_API
char
*
getenv
(
const
char
*
name
)
{
static
const
auto
real_getenv
=
GET_REAL_SYMBOL
(
getenv
)
;
pthread_mutex_lock
(
&
gEnvLock
)
;
char
*
result
=
real_getenv
(
name
)
;
pthread_mutex_unlock
(
&
gEnvLock
)
;
return
result
;
}
MFBT_API
int
putenv
(
char
*
string
)
{
static
const
auto
real_putenv
=
GET_REAL_SYMBOL
(
putenv
)
;
pthread_mutex_lock
(
&
gEnvLock
)
;
int
result
=
real_putenv
(
string
)
;
pthread_mutex_unlock
(
&
gEnvLock
)
;
return
result
;
}
MFBT_API
int
setenv
(
const
char
*
name
const
char
*
value
int
replace
)
{
static
const
auto
real_setenv
=
GET_REAL_SYMBOL
(
setenv
)
;
pthread_mutex_lock
(
&
gEnvLock
)
;
int
result
=
real_setenv
(
name
value
replace
)
;
pthread_mutex_unlock
(
&
gEnvLock
)
;
return
result
;
}
MFBT_API
int
unsetenv
(
const
char
*
name
)
{
static
const
auto
real_unsetenv
=
GET_REAL_SYMBOL
(
unsetenv
)
;
pthread_mutex_lock
(
&
gEnvLock
)
;
int
result
=
real_unsetenv
(
name
)
;
pthread_mutex_unlock
(
&
gEnvLock
)
;
return
result
;
}
MFBT_API
int
clearenv
(
void
)
{
static
const
auto
real_clearenv
=
GET_REAL_SYMBOL
(
clearenv
)
;
pthread_mutex_lock
(
&
gEnvLock
)
;
int
result
=
real_clearenv
(
)
;
pthread_mutex_unlock
(
&
gEnvLock
)
;
return
result
;
}
}
