use
std
:
:
os
:
:
raw
:
:
c_char
;
use
std
:
:
os
:
:
raw
:
:
c_int
;
use
std
:
:
cmp
;
use
std
:
:
panic
;
use
std
:
:
ops
:
:
Deref
;
use
arrayvec
:
:
{
Array
ArrayString
}
;
#
[
link
(
name
=
"
wrappers
"
)
]
extern
"
C
"
{
fn
RustMozCrash
(
filename
:
*
const
c_char
line
:
c_int
reason
:
*
const
c_char
)
-
>
!
;
}
fn
str_truncate_valid
(
s
:
&
str
mut
mid
:
usize
)
-
>
&
str
{
loop
{
if
let
Some
(
res
)
=
s
.
get
(
.
.
mid
)
{
return
res
;
}
mid
-
=
1
;
}
}
#
[
derive
(
Debug
PartialEq
)
]
struct
ArrayCString
<
A
:
Array
<
Item
=
u8
>
>
{
inner
:
ArrayString
<
A
>
}
impl
<
S
:
AsRef
<
str
>
A
:
Array
<
Item
=
u8
>
>
From
<
S
>
for
ArrayCString
<
A
>
{
fn
from
(
s
:
S
)
-
>
Self
{
let
s
=
s
.
as_ref
(
)
;
let
len
=
cmp
:
:
min
(
s
.
len
(
)
A
:
:
capacity
(
)
-
1
)
;
let
mut
result
=
Self
{
inner
:
ArrayString
:
:
from
(
str_truncate_valid
(
s
len
)
)
.
unwrap
(
)
}
;
result
.
inner
.
push
(
'
\
0
'
)
;
result
}
}
impl
<
A
:
Array
<
Item
=
u8
>
>
Deref
for
ArrayCString
<
A
>
{
type
Target
=
str
;
fn
deref
(
&
self
)
-
>
&
str
{
self
.
inner
.
as_str
(
)
}
}
fn
panic_hook
(
info
:
&
panic
:
:
PanicInfo
)
{
let
payload
=
info
.
payload
(
)
;
let
message
=
if
let
Some
(
s
)
=
payload
.
downcast_ref
:
:
<
&
str
>
(
)
{
s
}
else
if
let
Some
(
s
)
=
payload
.
downcast_ref
:
:
<
String
>
(
)
{
s
.
as_str
(
)
}
else
{
"
Unhandled
rust
panic
payload
!
"
}
;
let
(
filename
line
)
=
if
let
Some
(
loc
)
=
info
.
location
(
)
{
(
loc
.
file
(
)
loc
.
line
(
)
)
}
else
{
(
"
unknown
.
rs
"
0
)
}
;
let
message
=
ArrayCString
:
:
<
[
_
;
512
]
>
:
:
from
(
message
)
;
let
filename
=
ArrayCString
:
:
<
[
_
;
512
]
>
:
:
from
(
filename
)
;
unsafe
{
RustMozCrash
(
filename
.
as_ptr
(
)
as
*
const
c_char
line
as
c_int
message
.
as_ptr
(
)
as
*
const
c_char
)
;
}
}
#
[
no_mangle
]
pub
extern
"
C
"
fn
install_rust_panic_hook
(
)
{
panic
:
:
set_hook
(
Box
:
:
new
(
panic_hook
)
)
;
}
