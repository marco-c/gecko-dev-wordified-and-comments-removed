#
include
"
BaseProfiler
.
h
"
#
ifdef
MOZ_BASE_PROFILER
#
include
"
mozilla
/
leb128iterator
.
h
"
#
include
"
mozilla
/
PowerOfTwo
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
if
defined
(
_MSC_VER
)
#
include
<
windows
.
h
>
#
include
<
mmsystem
.
h
>
#
include
<
process
.
h
>
#
else
#
include
<
time
.
h
>
#
include
<
unistd
.
h
>
#
endif
using
namespace
mozilla
;
MOZ_MAYBE_UNUSED
static
void
SleepMilli
(
unsigned
aMilliseconds
)
{
#
if
defined
(
_MSC_VER
)
Sleep
(
aMilliseconds
)
;
#
else
struct
timespec
ts
;
ts
.
tv_sec
=
aMilliseconds
/
1000
;
ts
.
tv_nsec
=
long
(
aMilliseconds
%
1000
)
*
1000000
;
struct
timespec
tr
;
while
(
nanosleep
(
&
ts
&
tr
)
)
{
if
(
errno
=
=
EINTR
)
{
ts
=
tr
;
}
else
{
printf
(
"
nanosleep
(
)
-
>
%
s
\
n
"
strerror
(
errno
)
)
;
exit
(
1
)
;
}
}
#
endif
}
void
TestPowerOfTwoMask
(
)
{
printf
(
"
TestPowerOfTwoMask
.
.
.
\
n
"
)
;
static_assert
(
MakePowerOfTwoMask
<
uint32_t
0
>
(
)
.
MaskValue
(
)
=
=
0
"
"
)
;
constexpr
PowerOfTwoMask
<
uint32_t
>
c0
=
MakePowerOfTwoMask
<
uint32_t
0
>
(
)
;
MOZ_RELEASE_ASSERT
(
c0
.
MaskValue
(
)
=
=
0
)
;
static_assert
(
MakePowerOfTwoMask
<
uint32_t
0xFFu
>
(
)
.
MaskValue
(
)
=
=
0xFFu
"
"
)
;
constexpr
PowerOfTwoMask
<
uint32_t
>
cFF
=
MakePowerOfTwoMask
<
uint32_t
0xFFu
>
(
)
;
MOZ_RELEASE_ASSERT
(
cFF
.
MaskValue
(
)
=
=
0xFFu
)
;
static_assert
(
MakePowerOfTwoMask
<
uint32_t
0xFFFFFFFFu
>
(
)
.
MaskValue
(
)
=
=
0xFFFFFFFFu
"
"
)
;
constexpr
PowerOfTwoMask
<
uint32_t
>
cFFFFFFFF
=
MakePowerOfTwoMask
<
uint32_t
0xFFFFFFFFu
>
(
)
;
MOZ_RELEASE_ASSERT
(
cFFFFFFFF
.
MaskValue
(
)
=
=
0xFFFFFFFFu
)
;
struct
TestDataU32
{
uint32_t
mInput
;
uint32_t
mMask
;
}
;
TestDataU32
tests
[
]
=
{
{
0
0
}
{
1
1
}
{
2
3
}
{
3
3
}
{
4
7
}
{
5
7
}
{
(
1u
<
<
31
)
-
1
(
1u
<
<
31
)
-
1
}
{
(
1u
<
<
31
)
uint32_t
(
-
1
)
}
{
(
1u
<
<
31
)
+
1
uint32_t
(
-
1
)
}
{
uint32_t
(
-
1
)
uint32_t
(
-
1
)
}
}
;
for
(
const
TestDataU32
&
test
:
tests
)
{
PowerOfTwoMask
<
uint32_t
>
p2m
(
test
.
mInput
)
;
MOZ_RELEASE_ASSERT
(
p2m
.
MaskValue
(
)
=
=
test
.
mMask
)
;
for
(
const
TestDataU32
&
inner
:
tests
)
{
if
(
p2m
.
MaskValue
(
)
!
=
uint32_t
(
-
1
)
)
{
MOZ_RELEASE_ASSERT
(
(
inner
.
mInput
%
p2m
)
=
=
(
inner
.
mInput
%
(
p2m
.
MaskValue
(
)
+
1
)
)
)
;
}
MOZ_RELEASE_ASSERT
(
(
inner
.
mInput
&
p2m
)
=
=
(
inner
.
mInput
%
p2m
)
)
;
MOZ_RELEASE_ASSERT
(
(
p2m
&
inner
.
mInput
)
=
=
(
inner
.
mInput
&
p2m
)
)
;
}
}
printf
(
"
TestPowerOfTwoMask
done
\
n
"
)
;
}
void
TestPowerOfTwo
(
)
{
printf
(
"
TestPowerOfTwo
.
.
.
\
n
"
)
;
static_assert
(
MakePowerOfTwo
<
uint32_t
1
>
(
)
.
Value
(
)
=
=
1
"
"
)
;
constexpr
PowerOfTwo
<
uint32_t
>
c1
=
MakePowerOfTwo
<
uint32_t
1
>
(
)
;
MOZ_RELEASE_ASSERT
(
c1
.
Value
(
)
=
=
1
)
;
static_assert
(
MakePowerOfTwo
<
uint32_t
1
>
(
)
.
Mask
(
)
.
MaskValue
(
)
=
=
0
"
"
)
;
static_assert
(
MakePowerOfTwo
<
uint32_t
128
>
(
)
.
Value
(
)
=
=
128
"
"
)
;
constexpr
PowerOfTwo
<
uint32_t
>
c128
=
MakePowerOfTwo
<
uint32_t
128
>
(
)
;
MOZ_RELEASE_ASSERT
(
c128
.
Value
(
)
=
=
128
)
;
static_assert
(
MakePowerOfTwo
<
uint32_t
128
>
(
)
.
Mask
(
)
.
MaskValue
(
)
=
=
127
"
"
)
;
static_assert
(
MakePowerOfTwo
<
uint32_t
0x80000000u
>
(
)
.
Value
(
)
=
=
0x80000000u
"
"
)
;
constexpr
PowerOfTwo
<
uint32_t
>
cMax
=
MakePowerOfTwo
<
uint32_t
0x80000000u
>
(
)
;
MOZ_RELEASE_ASSERT
(
cMax
.
Value
(
)
=
=
0x80000000u
)
;
static_assert
(
MakePowerOfTwo
<
uint32_t
0x80000000u
>
(
)
.
Mask
(
)
.
MaskValue
(
)
=
=
0x7FFFFFFFu
"
"
)
;
struct
TestDataU32
{
uint32_t
mInput
;
uint32_t
mValue
;
uint32_t
mMask
;
}
;
TestDataU32
tests
[
]
=
{
{
0
1
0
}
{
1
1
0
}
{
2
2
1
}
{
3
4
3
}
{
4
4
3
}
{
5
8
7
}
{
(
1u
<
<
31
)
-
1
(
1u
<
<
31
)
(
1u
<
<
31
)
-
1
}
{
(
1u
<
<
31
)
(
1u
<
<
31
)
(
1u
<
<
31
)
-
1
}
{
(
1u
<
<
31
)
+
1
(
1u
<
<
31
)
(
1u
<
<
31
)
-
1
}
{
uint32_t
(
-
1
)
(
1u
<
<
31
)
(
1u
<
<
31
)
-
1
}
}
;
for
(
const
TestDataU32
&
test
:
tests
)
{
PowerOfTwo
<
uint32_t
>
p2
(
test
.
mInput
)
;
MOZ_RELEASE_ASSERT
(
p2
.
Value
(
)
=
=
test
.
mValue
)
;
MOZ_RELEASE_ASSERT
(
p2
.
MaskValue
(
)
=
=
test
.
mMask
)
;
PowerOfTwoMask
<
uint32_t
>
p2m
=
p2
.
Mask
(
)
;
MOZ_RELEASE_ASSERT
(
p2m
.
MaskValue
(
)
=
=
test
.
mMask
)
;
for
(
const
TestDataU32
&
inner
:
tests
)
{
MOZ_RELEASE_ASSERT
(
(
inner
.
mInput
%
p2
)
=
=
(
inner
.
mInput
%
p2
.
Value
(
)
)
)
;
}
}
printf
(
"
TestPowerOfTwo
done
\
n
"
)
;
}
void
TestLEB128
(
)
{
printf
(
"
TestLEB128
.
.
.
\
n
"
)
;
MOZ_RELEASE_ASSERT
(
ULEB128MaxSize
<
uint8_t
>
(
)
=
=
2
)
;
MOZ_RELEASE_ASSERT
(
ULEB128MaxSize
<
uint16_t
>
(
)
=
=
3
)
;
MOZ_RELEASE_ASSERT
(
ULEB128MaxSize
<
uint32_t
>
(
)
=
=
5
)
;
MOZ_RELEASE_ASSERT
(
ULEB128MaxSize
<
uint64_t
>
(
)
=
=
10
)
;
struct
TestDataU64
{
uint64_t
mValue
;
unsigned
mSize
;
const
char
*
mBytes
;
}
;
TestDataU64
tests
[
]
=
{
{
0u
1
"
\
0
"
}
{
1u
1
"
\
x01
"
}
{
0x7Fu
1
"
\
x7F
"
}
{
0x80u
2
"
\
x80
\
x01
"
}
{
0x81u
2
"
\
x81
\
x01
"
}
{
0xFFu
2
"
\
xFF
\
x01
"
}
{
0x100u
2
"
\
x80
\
x02
"
}
{
0xFFFFFFFFu
5
"
\
xFF
\
xFF
\
xFF
\
xFF
\
x0F
"
}
{
0xFFFFFFFFFFFFFFFFu
10
"
\
xFF
\
xFF
\
xFF
\
xFF
\
xFF
\
xFF
\
xFF
\
xFF
\
xFF
\
x01
"
}
}
;
for
(
const
TestDataU64
&
test
:
tests
)
{
MOZ_RELEASE_ASSERT
(
ULEB128Size
(
test
.
mValue
)
=
=
test
.
mSize
)
;
uint8_t
buffer
[
ULEB128MaxSize
<
uint64_t
>
(
)
]
;
uint8_t
*
p
=
buffer
;
WriteULEB128
(
test
.
mValue
p
)
;
MOZ_RELEASE_ASSERT
(
p
=
=
buffer
+
test
.
mSize
)
;
for
(
unsigned
i
=
0
;
i
<
test
.
mSize
;
+
+
i
)
{
MOZ_RELEASE_ASSERT
(
buffer
[
i
]
=
=
uint8_t
(
test
.
mBytes
[
i
]
)
)
;
}
p
=
buffer
;
uint64_t
read
=
ReadULEB128
<
uint64_t
>
(
p
)
;
MOZ_RELEASE_ASSERT
(
p
=
=
buffer
+
test
.
mSize
)
;
MOZ_RELEASE_ASSERT
(
read
=
=
test
.
mValue
)
;
}
printf
(
"
TestLEB128
done
\
n
"
)
;
}
static
constexpr
size_t
NextDepth
(
size_t
aDepth
)
{
constexpr
size_t
MAX_DEPTH
=
128
;
return
(
aDepth
<
MAX_DEPTH
)
?
(
aDepth
+
1
)
:
aDepth
;
}
template
<
size_t
DEPTH
=
0
>
MOZ_NEVER_INLINE
unsigned
long
long
Fibonacci
(
unsigned
long
long
n
)
{
if
(
n
=
=
0
)
{
return
0
;
}
if
(
n
=
=
1
)
{
return
1
;
}
unsigned
long
long
f2
=
Fibonacci
<
NextDepth
(
DEPTH
)
>
(
n
-
2
)
;
if
(
DEPTH
=
=
0
)
{
BASE_PROFILER_ADD_MARKER
(
"
Half
-
way
through
Fibonacci
"
OTHER
)
;
}
unsigned
long
long
f1
=
Fibonacci
<
NextDepth
(
DEPTH
)
>
(
n
-
1
)
;
return
f2
+
f1
;
}
void
TestProfiler
(
)
{
printf
(
"
TestProfiler
starting
-
-
pid
:
%
d
tid
:
%
d
\
n
"
baseprofiler
:
:
profiler_current_process_id
(
)
baseprofiler
:
:
profiler_current_thread_id
(
)
)
;
TestPowerOfTwoMask
(
)
;
TestPowerOfTwo
(
)
;
TestLEB128
(
)
;
{
printf
(
"
profiler_init
(
)
.
.
.
\
n
"
)
;
AUTO_BASE_PROFILER_INIT
;
MOZ_RELEASE_ASSERT
(
!
baseprofiler
:
:
profiler_is_active
(
)
)
;
MOZ_RELEASE_ASSERT
(
!
baseprofiler
:
:
profiler_thread_is_being_profiled
(
)
)
;
MOZ_RELEASE_ASSERT
(
!
baseprofiler
:
:
profiler_thread_is_sleeping
(
)
)
;
printf
(
"
profiler_start
(
)
.
.
.
\
n
"
)
;
Vector
<
const
char
*
>
filters
;
MOZ_RELEASE_ASSERT
(
filters
.
append
(
"
"
)
)
;
const
uint32_t
features
=
baseprofiler
:
:
ProfilerFeature
:
:
Leaf
|
baseprofiler
:
:
ProfilerFeature
:
:
StackWalk
|
baseprofiler
:
:
ProfilerFeature
:
:
Threads
;
baseprofiler
:
:
profiler_start
(
baseprofiler
:
:
BASE_PROFILER_DEFAULT_ENTRIES
BASE_PROFILER_DEFAULT_INTERVAL
features
filters
.
begin
(
)
filters
.
length
(
)
)
;
MOZ_RELEASE_ASSERT
(
baseprofiler
:
:
profiler_is_active
(
)
)
;
MOZ_RELEASE_ASSERT
(
baseprofiler
:
:
profiler_thread_is_being_profiled
(
)
)
;
MOZ_RELEASE_ASSERT
(
!
baseprofiler
:
:
profiler_thread_is_sleeping
(
)
)
;
{
AUTO_BASE_PROFILER_TEXT_MARKER_CAUSE
(
"
fibonacci
"
"
First
leaf
call
"
OTHER
nullptr
)
;
static
const
unsigned
long
long
fibStart
=
40
;
printf
(
"
Fibonacci
(
%
llu
)
.
.
.
\
n
"
fibStart
)
;
AUTO_BASE_PROFILER_LABEL
(
"
Label
around
Fibonacci
"
OTHER
)
;
unsigned
long
long
f
=
Fibonacci
(
fibStart
)
;
printf
(
"
Fibonacci
(
%
llu
)
=
%
llu
\
n
"
fibStart
f
)
;
}
printf
(
"
Sleep
1s
.
.
.
\
n
"
)
;
{
AUTO_BASE_PROFILER_THREAD_SLEEP
;
SleepMilli
(
1000
)
;
}
printf
(
"
baseprofiler_save_profile_to_file
(
)
.
.
.
\
n
"
)
;
baseprofiler
:
:
profiler_save_profile_to_file
(
"
TestProfiler_profile
.
json
"
)
;
printf
(
"
profiler_stop
(
)
.
.
.
\
n
"
)
;
baseprofiler
:
:
profiler_stop
(
)
;
MOZ_RELEASE_ASSERT
(
!
baseprofiler
:
:
profiler_is_active
(
)
)
;
MOZ_RELEASE_ASSERT
(
!
baseprofiler
:
:
profiler_thread_is_being_profiled
(
)
)
;
MOZ_RELEASE_ASSERT
(
!
baseprofiler
:
:
profiler_thread_is_sleeping
(
)
)
;
printf
(
"
profiler_shutdown
(
)
.
.
.
\
n
"
)
;
}
printf
(
"
TestProfiler
done
\
n
"
)
;
}
#
else
void
TestProfiler
(
)
{
AUTO_BASE_PROFILER_INIT
;
AUTO_BASE_PROFILER_TEXT_MARKER_CAUSE
(
catch
catch
catch
catch
)
;
AUTO_BASE_PROFILER_LABEL
(
catch
catch
)
;
AUTO_BASE_PROFILER_THREAD_SLEEP
;
}
#
endif
int
main
(
)
{
TestProfiler
(
)
;
return
0
;
}
