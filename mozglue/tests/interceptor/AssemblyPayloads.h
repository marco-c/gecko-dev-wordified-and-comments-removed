#
ifndef
mozilla_AssemblyPayloads_h
#
define
mozilla_AssemblyPayloads_h
#
define
PADDING_256_NOP
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
\
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
extern
"
C
"
{
#
if
defined
(
__clang__
)
#
if
defined
(
_M_X64
)
constexpr
uintptr_t
JumpDestination
=
0x7fff00000000
;
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
MovPushRet
(
)
{
asm
volatile
(
"
mov
%
0
%
%
rax
;
"
"
push
%
%
rax
;
"
"
ret
;
"
:
:
"
i
"
(
JumpDestination
)
)
;
}
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
MovRaxJump
(
)
{
asm
volatile
(
"
mov
%
0
%
%
rax
;
"
"
jmpq
*
%
%
rax
;
"
:
:
"
i
"
(
JumpDestination
)
)
;
}
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
DoubleJump
(
)
{
asm
volatile
(
"
jmp
label1
;
"
"
label2
:
"
"
mov
%
0
%
%
rax
;
"
"
jmpq
*
%
%
rax
;
"
PADDING_256_NOP
"
label1
:
"
"
jmp
label2
;
"
:
:
"
i
"
(
JumpDestination
)
)
;
}
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
NearJump
(
)
{
asm
volatile
(
"
jae
label3
;
"
"
je
label3
;
"
"
jne
label3
;
"
"
label4
:
"
"
mov
%
0
%
%
rax
;
"
"
jmpq
*
%
%
rax
;
"
PADDING_256_NOP
"
label3
:
"
"
jmp
label4
;
"
:
:
"
i
"
(
JumpDestination
)
)
;
}
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
OpcodeFF
(
)
{
asm
volatile
(
"
incl
%
eax
;
"
"
decl
%
ebx
;
"
"
call
*
%
rcx
;
"
"
jmp
*
(
%
rip
)
;
"
"
int
3
;
int
3
;
int
3
;
int
3
;
"
"
int
3
;
int
3
;
int
3
;
int
3
;
"
)
;
}
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
IndirectCall
(
)
{
asm
volatile
(
"
call
*
(
%
rip
)
;
"
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
"
ret
;
"
)
;
}
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
MovImm64
(
)
{
asm
volatile
(
"
mov
0x1234567812345678
%
r10
;
"
"
nop
;
nop
;
nop
"
)
;
}
#
elif
defined
(
_M_IX86
)
constexpr
uintptr_t
JumpDestination
=
0x7fff0000
;
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
PushRet
(
)
{
asm
volatile
(
"
push
%
0
;
"
"
ret
;
"
:
:
"
i
"
(
JumpDestination
)
)
;
}
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
MovEaxJump
(
)
{
asm
volatile
(
"
mov
%
0
%
%
eax
;
"
"
jmp
*
%
%
eax
;
"
:
:
"
i
"
(
JumpDestination
)
)
;
}
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
Opcode83
(
)
{
asm
volatile
(
"
xor
0x42
%
eax
;
"
"
cmpl
1
0xc
(
%
ebp
)
;
"
)
;
}
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
LockPrefix
(
)
{
asm
volatile
(
"
push
0x7c
;
"
"
lock
push
0x7c
;
"
)
;
}
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
LooksLikeLockPrefix
(
)
{
asm
volatile
(
"
push
0x7c
;
"
"
push
0x0000f0cc
;
"
)
;
}
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
DoubleJump
(
)
{
asm
volatile
(
"
jmp
label1
;
"
"
label2
:
"
"
mov
%
0
%
%
eax
;
"
"
jmp
*
%
%
eax
;
"
PADDING_256_NOP
"
label1
:
"
"
jmp
label2
;
"
:
:
"
i
"
(
JumpDestination
)
)
;
}
#
endif
#
if
!
defined
(
_M_ARM64
)
__declspec
(
dllexport
)
__attribute__
(
(
naked
)
)
void
UnsupportedOp
(
)
{
asm
volatile
(
"
ud2
;
"
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
"
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
nop
;
"
)
;
}
#
endif
#
endif
}
#
endif
