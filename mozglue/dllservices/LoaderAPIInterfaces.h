#
ifndef
mozilla_LoaderAPIInterfaces_h
#
define
mozilla_LoaderAPIInterfaces_h
#
include
"
nscore
.
h
"
#
include
"
mozilla
/
ModuleLoadInfo
.
h
"
namespace
mozilla
{
namespace
nt
{
class
NS_NO_VTABLE
LoaderObserver
{
public
:
virtual
void
OnBeginDllLoad
(
void
*
*
aContext
PCUNICODE_STRING
aRequestedDllName
)
=
0
;
virtual
bool
SubstituteForLSP
(
PCUNICODE_STRING
aLSPLeafName
PHANDLE
aOutHandle
)
=
0
;
virtual
void
OnEndDllLoad
(
void
*
aContext
NTSTATUS
aNtStatus
ModuleLoadInfo
&
&
aModuleLoadInfo
)
=
0
;
virtual
void
Forward
(
LoaderObserver
*
aNext
)
=
0
;
virtual
void
OnForward
(
ModuleLoadInfoVec
&
&
aInfo
)
=
0
;
}
;
class
NS_NO_VTABLE
LoaderAPI
{
public
:
virtual
ModuleLoadInfo
ConstructAndNotifyBeginDllLoad
(
void
*
*
aContext
PCUNICODE_STRING
aRequestedDllName
)
=
0
;
virtual
bool
SubstituteForLSP
(
PCUNICODE_STRING
aLSPLeafName
PHANDLE
aOutHandle
)
=
0
;
virtual
void
NotifyEndDllLoad
(
void
*
aContext
NTSTATUS
aLoadNtStatus
ModuleLoadInfo
&
&
aModuleLoadInfo
)
=
0
;
virtual
AllocatedUnicodeString
GetSectionName
(
void
*
aSectionAddr
)
=
0
;
using
InitDllBlocklistOOPFnPtr
=
LauncherVoidResultWithLineInfo
(
*
)
(
const
wchar_t
*
HANDLE
const
IMAGE_THUNK_DATA
*
)
;
virtual
InitDllBlocklistOOPFnPtr
GetDllBlocklistInitFn
(
)
=
0
;
}
;
}
}
#
endif
