#
ifndef
mozilla_ModuleLoadInfo_h
#
define
mozilla_ModuleLoadInfo_h
#
include
"
mozilla
/
NativeNt
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
namespace
mozilla
{
struct
ModuleLoadInfo
final
{
#
if
!
defined
(
MOZILLA_INTERNAL_API
)
explicit
ModuleLoadInfo
(
PCUNICODE_STRING
aRequestedDllName
)
:
mLoadTimeInfo
(
)
mThreadId
(
nt
:
:
RtlGetCurrentThreadId
(
)
)
mRequestedDllName
(
aRequestedDllName
)
mBaseAddr
(
nullptr
)
{
#
if
defined
(
IMPL_MFBT
)
:
:
QueryPerformanceCounter
(
&
mBeginTimestamp
)
;
#
else
:
:
RtlQueryPerformanceCounter
(
&
mBeginTimestamp
)
;
#
endif
}
ModuleLoadInfo
(
nt
:
:
AllocatedUnicodeString
&
&
aSectionName
const
void
*
aBaseAddr
)
:
mLoadTimeInfo
(
)
mThreadId
(
nt
:
:
RtlGetCurrentThreadId
(
)
)
mSectionName
(
std
:
:
move
(
aSectionName
)
)
mBaseAddr
(
aBaseAddr
)
{
#
if
defined
(
IMPL_MFBT
)
:
:
QueryPerformanceCounter
(
&
mBeginTimestamp
)
;
#
else
:
:
RtlQueryPerformanceCounter
(
&
mBeginTimestamp
)
;
#
endif
}
void
SetBeginLoadTimeStamp
(
)
{
#
if
defined
(
IMPL_MFBT
)
:
:
QueryPerformanceCounter
(
&
mLoadTimeInfo
)
;
#
else
:
:
RtlQueryPerformanceCounter
(
&
mLoadTimeInfo
)
;
#
endif
}
void
SetEndLoadTimeStamp
(
)
{
LARGE_INTEGER
endTimeStamp
;
#
if
defined
(
IMPL_MFBT
)
:
:
QueryPerformanceCounter
(
&
endTimeStamp
)
;
#
else
:
:
RtlQueryPerformanceCounter
(
&
endTimeStamp
)
;
#
endif
LONGLONG
&
timeInfo
=
mLoadTimeInfo
.
QuadPart
;
if
(
!
timeInfo
)
{
return
;
}
timeInfo
=
endTimeStamp
.
QuadPart
-
timeInfo
;
}
void
CaptureBacktrace
(
)
{
const
DWORD
kMaxBacktraceSize
=
512
;
if
(
!
mBacktrace
.
resize
(
kMaxBacktraceSize
)
)
{
return
;
}
WORD
numCaptured
=
:
:
RtlCaptureStackBackTrace
(
2
kMaxBacktraceSize
mBacktrace
.
begin
(
)
nullptr
)
;
Unused
<
<
mBacktrace
.
resize
(
numCaptured
)
;
mBacktrace
.
podResizeToFit
(
)
;
}
#
endif
ModuleLoadInfo
(
ModuleLoadInfo
&
&
)
=
default
;
ModuleLoadInfo
&
operator
=
(
ModuleLoadInfo
&
&
)
=
default
;
ModuleLoadInfo
(
)
=
delete
;
ModuleLoadInfo
(
const
ModuleLoadInfo
&
)
=
delete
;
ModuleLoadInfo
&
operator
=
(
const
ModuleLoadInfo
&
)
=
delete
;
bool
IsBare
(
)
const
{
return
!
mLoadTimeInfo
.
QuadPart
;
}
bool
WasMapped
(
)
const
{
return
!
mSectionName
.
IsEmpty
(
)
;
}
LARGE_INTEGER
mBeginTimestamp
;
LARGE_INTEGER
mLoadTimeInfo
;
DWORD
mThreadId
;
nt
:
:
AllocatedUnicodeString
mRequestedDllName
;
nt
:
:
AllocatedUnicodeString
mSectionName
;
const
void
*
mBaseAddr
;
Vector
<
PVOID
0
nt
:
:
RtlAllocPolicy
>
mBacktrace
;
}
;
using
ModuleLoadInfoVec
=
Vector
<
ModuleLoadInfo
0
nt
:
:
RtlAllocPolicy
>
;
}
#
endif
