#
ifndef
mozilla_glue_WindowsDllServices_h
#
define
mozilla_glue_WindowsDllServices_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Authenticode
.
h
"
#
include
"
mozilla
/
LoaderAPIInterfaces
.
h
"
#
include
<
utility
>
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
mozilla
/
WindowsDllBlocklist
.
h
"
#
include
"
mozilla
/
WinHeaderOnlyUtils
.
h
"
#
if
defined
(
MOZILLA_INTERNAL_API
)
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
SystemGroup
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
prthread
.
h
"
#
endif
#
include
<
winternl
.
h
>
namespace
mozilla
{
namespace
glue
{
namespace
detail
{
class
DllServicesBase
:
public
Authenticode
{
public
:
virtual
void
DispatchDllLoadNotification
(
ModuleLoadInfo
&
&
aModLoadInfo
)
=
0
;
virtual
void
DispatchModuleLoadBacklogNotification
(
ModuleLoadInfoVec
&
&
aEvents
)
=
0
;
void
SetAuthenticodeImpl
(
Authenticode
*
aAuthenticode
)
{
mAuthenticode
=
aAuthenticode
;
}
void
SetInitDllBlocklistOOPFnPtr
(
nt
:
:
LoaderAPI
:
:
InitDllBlocklistOOPFnPtr
aPtr
)
{
mInitDllBlocklistOOPFnPtr
=
aPtr
;
}
template
<
typename
.
.
.
Args
>
LauncherVoidResultWithLineInfo
InitDllBlocklistOOP
(
Args
&
&
.
.
.
aArgs
)
{
MOZ_RELEASE_ASSERT
(
mInitDllBlocklistOOPFnPtr
)
;
return
mInitDllBlocklistOOPFnPtr
(
std
:
:
forward
<
Args
>
(
aArgs
)
.
.
.
)
;
}
#
if
defined
(
DEBUG
)
UniquePtr
<
wchar_t
[
]
>
GetBinaryOrgName
(
const
wchar_t
*
aFilePath
AuthenticodeFlags
aFlags
=
AuthenticodeFlags
:
:
Default
)
override
#
else
UniquePtr
<
wchar_t
[
]
>
GetBinaryOrgName
(
const
wchar_t
*
aFilePath
AuthenticodeFlags
aFlags
=
AuthenticodeFlags
:
:
Default
)
final
#
endif
{
if
(
!
mAuthenticode
)
{
return
nullptr
;
}
return
mAuthenticode
-
>
GetBinaryOrgName
(
aFilePath
aFlags
)
;
}
virtual
void
DisableFull
(
)
{
DllBlocklist_SetFullDllServices
(
nullptr
)
;
}
DllServicesBase
(
const
DllServicesBase
&
)
=
delete
;
DllServicesBase
(
DllServicesBase
&
&
)
=
delete
;
DllServicesBase
&
operator
=
(
const
DllServicesBase
&
)
=
delete
;
DllServicesBase
&
operator
=
(
DllServicesBase
&
&
)
=
delete
;
protected
:
DllServicesBase
(
)
:
mAuthenticode
(
nullptr
)
mInitDllBlocklistOOPFnPtr
(
nullptr
)
{
}
virtual
~
DllServicesBase
(
)
=
default
;
void
EnableFull
(
)
{
DllBlocklist_SetFullDllServices
(
this
)
;
}
void
EnableBasic
(
)
{
DllBlocklist_SetBasicDllServices
(
this
)
;
}
private
:
Authenticode
*
mAuthenticode
;
nt
:
:
LoaderAPI
:
:
InitDllBlocklistOOPFnPtr
mInitDllBlocklistOOPFnPtr
;
}
;
}
#
if
defined
(
MOZILLA_INTERNAL_API
)
struct
EnhancedModuleLoadInfo
final
{
explicit
EnhancedModuleLoadInfo
(
ModuleLoadInfo
&
&
aModLoadInfo
)
:
mNtLoadInfo
(
std
:
:
move
(
aModLoadInfo
)
)
{
if
(
mNtLoadInfo
.
mThreadId
=
=
:
:
GetCurrentThreadId
(
)
)
{
mThreadName
=
PR_GetThreadName
(
PR_GetCurrentThread
(
)
)
;
}
MOZ_ASSERT
(
!
mNtLoadInfo
.
mSectionName
.
IsEmpty
(
)
)
;
}
EnhancedModuleLoadInfo
(
EnhancedModuleLoadInfo
&
&
)
=
default
;
EnhancedModuleLoadInfo
&
operator
=
(
EnhancedModuleLoadInfo
&
&
)
=
default
;
EnhancedModuleLoadInfo
(
const
EnhancedModuleLoadInfo
&
)
=
delete
;
EnhancedModuleLoadInfo
&
operator
=
(
const
EnhancedModuleLoadInfo
&
)
=
delete
;
nsDependentString
GetSectionName
(
)
const
{
return
mNtLoadInfo
.
mSectionName
.
AsString
(
)
;
}
using
BacktraceType
=
decltype
(
ModuleLoadInfo
:
:
mBacktrace
)
;
ModuleLoadInfo
mNtLoadInfo
;
nsCString
mThreadName
;
}
;
class
DllServices
:
public
detail
:
:
DllServicesBase
{
public
:
void
DispatchDllLoadNotification
(
ModuleLoadInfo
&
&
aModLoadInfo
)
final
{
nsCOMPtr
<
nsIRunnable
>
runnable
(
NewRunnableMethod
<
StoreCopyPassByRRef
<
EnhancedModuleLoadInfo
>
>
(
"
DllServices
:
:
NotifyDllLoad
"
this
&
DllServices
:
:
NotifyDllLoad
std
:
:
move
(
aModLoadInfo
)
)
)
;
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
runnable
.
forget
(
)
)
;
}
void
DispatchModuleLoadBacklogNotification
(
ModuleLoadInfoVec
&
&
aEvents
)
final
{
nsCOMPtr
<
nsIRunnable
>
runnable
(
NewRunnableMethod
<
StoreCopyPassByRRef
<
ModuleLoadInfoVec
>
>
(
"
DllServices
:
:
NotifyModuleLoadBacklog
"
this
&
DllServices
:
:
NotifyModuleLoadBacklog
std
:
:
move
(
aEvents
)
)
)
;
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
runnable
.
forget
(
)
)
;
}
#
if
defined
(
DEBUG
)
UniquePtr
<
wchar_t
[
]
>
GetBinaryOrgName
(
const
wchar_t
*
aFilePath
AuthenticodeFlags
aFlags
=
AuthenticodeFlags
:
:
Default
)
final
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
return
detail
:
:
DllServicesBase
:
:
GetBinaryOrgName
(
aFilePath
aFlags
)
;
}
#
endif
NS_INLINE_DECL_THREADSAFE_VIRTUAL_REFCOUNTING
(
DllServices
)
protected
:
DllServices
(
)
=
default
;
~
DllServices
(
)
=
default
;
virtual
void
NotifyDllLoad
(
EnhancedModuleLoadInfo
&
&
aModLoadInfo
)
=
0
;
virtual
void
NotifyModuleLoadBacklog
(
ModuleLoadInfoVec
&
&
aEvents
)
=
0
;
}
;
#
else
class
BasicDllServices
final
:
public
detail
:
:
DllServicesBase
{
public
:
BasicDllServices
(
)
{
EnableBasic
(
)
;
}
~
BasicDllServices
(
)
=
default
;
virtual
void
DispatchDllLoadNotification
(
ModuleLoadInfo
&
&
aModLoadInfo
)
override
{
}
virtual
void
DispatchModuleLoadBacklogNotification
(
ModuleLoadInfoVec
&
&
aEvents
)
override
{
}
}
;
#
endif
}
}
#
endif
