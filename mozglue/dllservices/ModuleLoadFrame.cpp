#
include
"
ModuleLoadFrame
.
h
"
#
include
"
mozilla
/
NativeNt
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
NtLoaderAPI
.
h
"
#
include
<
string
.
h
>
#
include
"
WindowsFallbackLoaderAPI
.
h
"
static
bool
IsNullTerminated
(
PCUNICODE_STRING
aStr
)
{
return
aStr
&
&
(
aStr
-
>
MaximumLength
>
=
(
aStr
-
>
Length
+
sizeof
(
WCHAR
)
)
)
&
&
aStr
-
>
Buffer
&
&
aStr
-
>
Buffer
[
aStr
-
>
Length
/
sizeof
(
WCHAR
)
]
=
=
0
;
}
static
mozilla
:
:
FallbackLoaderAPI
gFallbackLoaderAPI
;
namespace
mozilla
{
namespace
glue
{
nt
:
:
LoaderAPI
*
ModuleLoadFrame
:
:
sLoaderAPI
;
using
GetNtLoaderAPIFn
=
decltype
(
&
mozilla
:
:
GetNtLoaderAPI
)
;
nt
:
:
LoaderAPI
:
:
InitDllBlocklistOOPFnPtr
ModuleLoadFrame
:
:
StaticInit
(
nt
:
:
LoaderObserver
*
aNewObserver
)
{
const
auto
pGetNtLoaderAPI
=
reinterpret_cast
<
GetNtLoaderAPIFn
>
(
:
:
GetProcAddress
(
:
:
GetModuleHandleW
(
nullptr
)
"
GetNtLoaderAPI
"
)
)
;
if
(
!
pGetNtLoaderAPI
)
{
gFallbackLoaderAPI
.
SetObserver
(
aNewObserver
)
;
sLoaderAPI
=
&
gFallbackLoaderAPI
;
return
nullptr
;
}
sLoaderAPI
=
pGetNtLoaderAPI
(
aNewObserver
)
;
MOZ_ASSERT
(
sLoaderAPI
)
;
return
sLoaderAPI
-
>
GetDllBlocklistInitFn
(
)
;
}
ModuleLoadFrame
:
:
ModuleLoadFrame
(
PCUNICODE_STRING
aRequestedDllName
)
:
mAlreadyLoaded
(
false
)
mContext
(
nullptr
)
mDllLoadStatus
(
STATUS_UNSUCCESSFUL
)
mLoadInfo
(
sLoaderAPI
-
>
ConstructAndNotifyBeginDllLoad
(
&
mContext
aRequestedDllName
)
)
{
if
(
!
aRequestedDllName
)
{
return
;
}
UniquePtr
<
WCHAR
[
]
>
nameBuf
;
const
WCHAR
*
name
=
nullptr
;
if
(
IsNullTerminated
(
aRequestedDllName
)
)
{
name
=
aRequestedDllName
-
>
Buffer
;
}
else
{
USHORT
charLenExclNul
=
aRequestedDllName
-
>
Length
/
sizeof
(
WCHAR
)
;
USHORT
charLenInclNul
=
charLenExclNul
+
1
;
nameBuf
=
MakeUnique
<
WCHAR
[
]
>
(
charLenInclNul
)
;
if
(
!
wcsncpy_s
(
nameBuf
.
get
(
)
charLenInclNul
aRequestedDllName
-
>
Buffer
charLenExclNul
)
)
{
name
=
nameBuf
.
get
(
)
;
}
}
mAlreadyLoaded
=
name
&
&
!
!
:
:
GetModuleHandleW
(
name
)
;
}
ModuleLoadFrame
:
:
~
ModuleLoadFrame
(
)
{
sLoaderAPI
-
>
NotifyEndDllLoad
(
mContext
mDllLoadStatus
std
:
:
move
(
mLoadInfo
)
)
;
}
void
ModuleLoadFrame
:
:
SetLoadStatus
(
NTSTATUS
aNtStatus
HANDLE
aHandle
)
{
mDllLoadStatus
=
aNtStatus
;
void
*
baseAddr
=
mozilla
:
:
nt
:
:
PEHeaders
:
:
HModuleToBaseAddr
(
reinterpret_cast
<
HMODULE
>
(
aHandle
)
)
;
mLoadInfo
.
mBaseAddr
=
baseAddr
;
if
(
!
mAlreadyLoaded
)
{
mLoadInfo
.
mSectionName
=
sLoaderAPI
-
>
GetSectionName
(
baseAddr
)
;
}
}
}
}
