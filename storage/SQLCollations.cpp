#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
intl
/
Collator
.
h
"
#
include
"
SQLCollations
.
h
"
using
mozilla
:
:
intl
:
:
Collator
;
namespace
mozilla
{
namespace
storage
{
namespace
{
int
localeCollationHelper8
(
void
*
aService
int
aLen1
const
void
*
aStr1
int
aLen2
const
void
*
aStr2
Collator
:
:
Sensitivity
aSensitivity
)
{
NS_ConvertUTF8toUTF16
str1
(
static_cast
<
const
char
*
>
(
aStr1
)
aLen1
)
;
NS_ConvertUTF8toUTF16
str2
(
static_cast
<
const
char
*
>
(
aStr2
)
aLen2
)
;
Service
*
serv
=
static_cast
<
Service
*
>
(
aService
)
;
return
serv
-
>
localeCompareStrings
(
str1
str2
aSensitivity
)
;
}
int
localeCollationHelper16
(
void
*
aService
int
aLen1
const
void
*
aStr1
int
aLen2
const
void
*
aStr2
Collator
:
:
Sensitivity
aSensitivity
)
{
const
char16_t
*
buf1
=
static_cast
<
const
char16_t
*
>
(
aStr1
)
;
const
char16_t
*
buf2
=
static_cast
<
const
char16_t
*
>
(
aStr2
)
;
nsDependentSubstring
str1
(
buf1
buf1
+
(
aLen1
/
sizeof
(
char16_t
)
)
)
;
nsDependentSubstring
str2
(
buf2
buf2
+
(
aLen2
/
sizeof
(
char16_t
)
)
)
;
Service
*
serv
=
static_cast
<
Service
*
>
(
aService
)
;
return
serv
-
>
localeCompareStrings
(
str1
str2
aSensitivity
)
;
}
struct
Collations
{
const
char
*
zName
;
int
enc
;
int
(
*
xCompare
)
(
void
*
int
const
void
*
int
const
void
*
)
;
}
;
}
int
registerCollations
(
sqlite3
*
aDB
Service
*
aService
)
{
Collations
collations
[
]
=
{
{
"
locale
"
SQLITE_UTF8
localeCollation8
}
{
"
locale_case_sensitive
"
SQLITE_UTF8
localeCollationCaseSensitive8
}
{
"
locale_accent_sensitive
"
SQLITE_UTF8
localeCollationAccentSensitive8
}
{
"
locale_case_accent_sensitive
"
SQLITE_UTF8
localeCollationCaseAccentSensitive8
}
{
"
locale
"
SQLITE_UTF16
localeCollation16
}
{
"
locale_case_sensitive
"
SQLITE_UTF16
localeCollationCaseSensitive16
}
{
"
locale_accent_sensitive
"
SQLITE_UTF16
localeCollationAccentSensitive16
}
{
"
locale_case_accent_sensitive
"
SQLITE_UTF16
localeCollationCaseAccentSensitive16
}
}
;
int
rv
=
SQLITE_OK
;
for
(
size_t
i
=
0
;
SQLITE_OK
=
=
rv
&
&
i
<
std
:
:
size
(
collations
)
;
+
+
i
)
{
struct
Collations
*
p
=
&
collations
[
i
]
;
rv
=
:
:
sqlite3_create_collation
(
aDB
p
-
>
zName
p
-
>
enc
aService
p
-
>
xCompare
)
;
}
return
rv
;
}
int
localeCollation8
(
void
*
aService
int
aLen1
const
void
*
aStr1
int
aLen2
const
void
*
aStr2
)
{
return
localeCollationHelper8
(
aService
aLen1
aStr1
aLen2
aStr2
Collator
:
:
Sensitivity
:
:
Base
)
;
}
int
localeCollationCaseSensitive8
(
void
*
aService
int
aLen1
const
void
*
aStr1
int
aLen2
const
void
*
aStr2
)
{
return
localeCollationHelper8
(
aService
aLen1
aStr1
aLen2
aStr2
Collator
:
:
Sensitivity
:
:
Case
)
;
}
int
localeCollationAccentSensitive8
(
void
*
aService
int
aLen1
const
void
*
aStr1
int
aLen2
const
void
*
aStr2
)
{
return
localeCollationHelper8
(
aService
aLen1
aStr1
aLen2
aStr2
Collator
:
:
Sensitivity
:
:
Accent
)
;
}
int
localeCollationCaseAccentSensitive8
(
void
*
aService
int
aLen1
const
void
*
aStr1
int
aLen2
const
void
*
aStr2
)
{
return
localeCollationHelper8
(
aService
aLen1
aStr1
aLen2
aStr2
Collator
:
:
Sensitivity
:
:
Variant
)
;
}
int
localeCollation16
(
void
*
aService
int
aLen1
const
void
*
aStr1
int
aLen2
const
void
*
aStr2
)
{
return
localeCollationHelper16
(
aService
aLen1
aStr1
aLen2
aStr2
Collator
:
:
Sensitivity
:
:
Base
)
;
}
int
localeCollationCaseSensitive16
(
void
*
aService
int
aLen1
const
void
*
aStr1
int
aLen2
const
void
*
aStr2
)
{
return
localeCollationHelper16
(
aService
aLen1
aStr1
aLen2
aStr2
Collator
:
:
Sensitivity
:
:
Case
)
;
}
int
localeCollationAccentSensitive16
(
void
*
aService
int
aLen1
const
void
*
aStr1
int
aLen2
const
void
*
aStr2
)
{
return
localeCollationHelper16
(
aService
aLen1
aStr1
aLen2
aStr2
Collator
:
:
Sensitivity
:
:
Accent
)
;
}
int
localeCollationCaseAccentSensitive16
(
void
*
aService
int
aLen1
const
void
*
aStr1
int
aLen2
const
void
*
aStr2
)
{
return
localeCollationHelper16
(
aService
aLen1
aStr1
aLen2
aStr2
Collator
:
:
Sensitivity
:
:
Variant
)
;
}
}
}
