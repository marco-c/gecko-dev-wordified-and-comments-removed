#
include
"
nsISupports
.
idl
"
%
{
C
+
+
#
include
"
mozilla
/
DebugOnly
.
h
"
%
}
[
ptr
]
native
octetPtr
(
uint8_t
)
;
[
scriptable
uuid
(
6e6306f4
-
ffa7
-
40f5
-
96ca
-
36159ce8f431
)
]
interface
mozIStorageValueArray
:
nsISupports
{
const
long
VALUE_TYPE_NULL
=
0
;
const
long
VALUE_TYPE_INTEGER
=
1
;
const
long
VALUE_TYPE_FLOAT
=
2
;
const
long
VALUE_TYPE_TEXT
=
3
;
const
long
VALUE_TYPE_BLOB
=
4
;
readonly
attribute
unsigned
long
numEntries
;
long
getTypeOfIndex
(
in
unsigned
long
aIndex
)
;
long
getInt32
(
in
unsigned
long
aIndex
)
;
long
long
getInt64
(
in
unsigned
long
aIndex
)
;
double
getDouble
(
in
unsigned
long
aIndex
)
;
AUTF8String
getUTF8String
(
in
unsigned
long
aIndex
)
;
AString
getString
(
in
unsigned
long
aIndex
)
;
void
getBlob
(
in
unsigned
long
aIndex
out
unsigned
long
aDataSize
[
array
size_is
(
aDataSize
)
]
out
octet
aData
)
;
AString
getBlobAsString
(
in
unsigned
long
aIndex
)
;
AUTF8String
getBlobAsUTF8String
(
in
unsigned
long
aIndex
)
;
boolean
getIsNull
(
in
unsigned
long
aIndex
)
;
[
noscript
]
void
getSharedUTF8String
(
in
unsigned
long
aIndex
out
unsigned
long
aByteLength
[
shared
retval
]
out
string
aResult
)
;
[
noscript
]
void
getSharedString
(
in
unsigned
long
aIndex
out
unsigned
long
aByteLength
[
shared
retval
]
out
wstring
aResult
)
;
[
noscript
]
void
getSharedBlob
(
in
unsigned
long
aIndex
out
unsigned
long
aByteLength
[
shared
retval
]
out
octetPtr
aResult
)
;
%
{
C
+
+
inline
int32_t
AsInt32
(
uint32_t
idx
)
{
int32_t
v
=
0
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
GetInt32
(
idx
&
v
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
|
|
IsNull
(
idx
)
"
Getting
value
failed
wrong
column
index
?
"
)
;
return
v
;
}
inline
int64_t
AsInt64
(
uint32_t
idx
)
{
int64_t
v
=
0
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
GetInt64
(
idx
&
v
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
|
|
IsNull
(
idx
)
"
Getting
value
failed
wrong
column
index
?
"
)
;
return
v
;
}
inline
double
AsDouble
(
uint32_t
idx
)
{
double
v
=
0
.
0
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
GetDouble
(
idx
&
v
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
|
|
IsNull
(
idx
)
"
Getting
value
failed
wrong
column
index
?
"
)
;
return
v
;
}
inline
const
char
*
AsSharedUTF8String
(
uint32_t
idx
uint32_t
*
len
)
{
const
char
*
str
=
nullptr
;
*
len
=
0
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
GetSharedUTF8String
(
idx
len
&
str
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
|
|
IsNull
(
idx
)
"
Getting
value
failed
wrong
column
index
?
"
)
;
return
str
;
}
inline
const
char16_t
*
AsSharedWString
(
uint32_t
idx
uint32_t
*
len
)
{
const
char16_t
*
str
=
nullptr
;
*
len
=
0
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
GetSharedString
(
idx
len
&
str
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
|
|
IsNull
(
idx
)
"
Getting
value
failed
wrong
column
index
?
"
)
;
return
str
;
}
inline
const
uint8_t
*
AsSharedBlob
(
uint32_t
idx
uint32_t
*
len
)
{
const
uint8_t
*
blob
=
nullptr
;
*
len
=
0
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
GetSharedBlob
(
idx
len
&
blob
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
|
|
IsNull
(
idx
)
"
Getting
value
failed
wrong
column
index
?
"
)
;
return
blob
;
}
inline
bool
IsNull
(
uint32_t
idx
)
{
bool
b
=
false
;
mozilla
:
:
DebugOnly
<
nsresult
>
rv
=
GetIsNull
(
idx
&
b
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
Getting
value
failed
wrong
column
index
?
"
)
;
return
b
;
}
%
}
}
;
