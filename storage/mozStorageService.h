#
ifndef
MOZSTORAGESERVICE_H
#
define
MOZSTORAGESERVICE_H
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
intl
/
Collator
.
h
"
#
include
"
mozIStorageService
.
h
"
class
nsIMemoryReporter
;
struct
sqlite3_vfs
;
namespace
mozilla
:
:
intl
{
class
Collator
;
}
namespace
mozilla
{
namespace
storage
{
class
Connection
;
class
Service
:
public
mozIStorageService
public
nsIObserver
public
nsIMemoryReporter
{
public
:
nsresult
initialize
(
)
;
int
localeCompareStrings
(
const
nsAString
&
aStr1
const
nsAString
&
aStr2
mozilla
:
:
intl
:
:
Collator
:
:
Sensitivity
aSensitivity
)
;
static
already_AddRefed
<
Service
>
getSingleton
(
)
;
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_MOZISTORAGESERVICE
NS_DECL_NSIOBSERVER
NS_DECL_NSIMEMORYREPORTER
static
bool
pageSizeIsValid
(
int32_t
aPageSize
)
{
return
aPageSize
=
=
512
|
|
aPageSize
=
=
1024
|
|
aPageSize
=
=
2048
|
|
aPageSize
=
=
4096
|
|
aPageSize
=
=
8192
|
|
aPageSize
=
=
16384
|
|
aPageSize
=
=
32768
|
|
aPageSize
=
=
65536
;
}
static
const
int32_t
kDefaultPageSize
=
32768
;
void
registerConnection
(
Connection
*
aConnection
)
;
void
unregisterConnection
(
Connection
*
aConnection
)
;
void
getConnections
(
nsTArray
<
RefPtr
<
Connection
>
>
&
aConnections
)
;
private
:
Service
(
)
;
virtual
~
Service
(
)
;
Mutex
mMutex
MOZ_UNANNOTATED
;
struct
AutoVFSRegistration
{
int
Init
(
UniquePtr
<
sqlite3_vfs
>
aVFS
)
;
~
AutoVFSRegistration
(
)
;
private
:
UniquePtr
<
sqlite3_vfs
>
mVFS
;
}
;
AutoVFSRegistration
mBaseSqliteVFS
;
AutoVFSRegistration
mBaseExclSqliteVFS
;
AutoVFSRegistration
mQuotaSqliteVFS
;
AutoVFSRegistration
mObfuscatingSqliteVFS
;
AutoVFSRegistration
mReadOnlyNoLockSqliteVFS
;
Mutex
mRegistrationMutex
MOZ_UNANNOTATED
;
nsTArray
<
RefPtr
<
Connection
>
>
mConnections
;
void
minimizeMemory
(
)
;
mozilla
:
:
intl
:
:
Collator
*
getCollator
(
)
;
mozilla
:
:
UniquePtr
<
mozilla
:
:
intl
:
:
Collator
>
mCollator
=
nullptr
;
nsCOMPtr
<
nsIFile
>
mProfileStorageFile
;
nsCOMPtr
<
nsIMemoryReporter
>
mStorageSQLiteReporter
;
static
Service
*
gService
;
mozilla
:
:
intl
:
:
Collator
:
:
Sensitivity
mLastSensitivity
;
}
;
}
}
#
endif
