#
ifndef
mozStorageStatementData_h
#
define
mozStorageStatementData_h
#
include
"
sqlite3
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozStorageBindingParamsArray
.
h
"
#
include
"
mozStorageConnection
.
h
"
#
include
"
StorageBaseStatementInternal
.
h
"
#
include
"
mozStoragePrivateHelpers
.
h
"
struct
sqlite3_stmt
;
namespace
mozilla
{
namespace
storage
{
class
StatementData
{
public
:
StatementData
(
sqlite3_stmt
*
aStatement
already_AddRefed
<
BindingParamsArray
>
aParamsArray
StorageBaseStatementInternal
*
aStatementOwner
)
:
mStatement
(
aStatement
)
mParamsArray
(
aParamsArray
)
mQueryStatusRecorded
(
false
)
mStatementOwner
(
aStatementOwner
)
{
MOZ_ASSERT
(
mStatementOwner
"
Must
have
a
statement
owner
!
"
)
;
}
StatementData
(
const
StatementData
&
aSource
)
:
mStatement
(
aSource
.
mStatement
)
mParamsArray
(
aSource
.
mParamsArray
)
mQueryStatusRecorded
(
false
)
mStatementOwner
(
aSource
.
mStatementOwner
)
{
MOZ_ASSERT
(
mStatementOwner
"
Must
have
a
statement
owner
!
"
)
;
}
StatementData
(
)
:
mStatement
(
nullptr
)
mQueryStatusRecorded
(
false
)
{
}
~
StatementData
(
)
{
NS_ReleaseOnMainThread
(
"
StatementData
:
:
mParamsArray
"
mParamsArray
.
forget
(
)
)
;
}
inline
int
getSqliteStatement
(
sqlite3_stmt
*
*
_stmt
)
{
if
(
!
mStatement
)
{
int
rc
=
mStatementOwner
-
>
getAsyncStatement
(
&
mStatement
)
;
MaybeRecordQueryStatus
(
rc
)
;
NS_ENSURE_TRUE
(
rc
=
=
SQLITE_OK
rc
)
;
}
*
_stmt
=
mStatement
;
return
SQLITE_OK
;
}
operator
BindingParamsArray
*
(
)
const
{
return
mParamsArray
;
}
inline
void
reset
(
)
{
MOZ_ASSERT
(
mStatementOwner
"
Must
have
a
statement
owner
!
"
)
;
if
(
mStatement
)
{
(
void
)
:
:
sqlite3_reset
(
mStatement
)
;
(
void
)
:
:
sqlite3_clear_bindings
(
mStatement
)
;
mStatement
=
nullptr
;
if
(
!
mQueryStatusRecorded
)
{
mStatementOwner
-
>
getOwner
(
)
-
>
RecordQueryStatus
(
SQLITE_OK
)
;
}
}
}
inline
bool
hasParametersToBeBound
(
)
const
{
return
!
!
mParamsArray
;
}
inline
uint32_t
needsTransaction
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
sqlite3_stmt
*
stmt
;
int
rc
=
getSqliteStatement
(
&
stmt
)
;
if
(
SQLITE_OK
!
=
rc
|
|
:
:
sqlite3_stmt_readonly
(
stmt
)
)
{
return
0
;
}
return
mParamsArray
?
mParamsArray
-
>
length
(
)
:
1
;
}
void
MaybeRecordQueryStatus
(
int
srv
)
{
if
(
mQueryStatusRecorded
|
|
!
isErrorCode
(
srv
)
)
{
return
;
}
mStatementOwner
-
>
getOwner
(
)
-
>
RecordQueryStatus
(
srv
)
;
mQueryStatusRecorded
=
true
;
}
private
:
sqlite3_stmt
*
mStatement
;
RefPtr
<
BindingParamsArray
>
mParamsArray
;
bool
mQueryStatusRecorded
;
nsCOMPtr
<
StorageBaseStatementInternal
>
mStatementOwner
;
}
;
}
}
#
endif
