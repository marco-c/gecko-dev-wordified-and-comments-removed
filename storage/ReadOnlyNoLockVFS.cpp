#
include
"
nsDebug
.
h
"
#
include
"
sqlite3
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
define
ORIGVFS
(
p
)
(
(
sqlite3_vfs
*
)
(
(
p
)
-
>
pAppData
)
)
#
if
defined
(
XP_WIN
)
#
define
BASE_VFS
"
win32
-
none
"
#
else
#
define
BASE_VFS
"
unix
-
none
"
#
endif
#
define
VFS_NAME
"
readonly
-
immutable
-
nolock
"
namespace
{
static
int
vfsOpen
(
sqlite3_vfs
*
vfs
const
char
*
zName
sqlite3_file
*
pFile
int
flags
int
*
pOutFlags
)
{
if
(
(
flags
&
SQLITE_OPEN_READONLY
)
=
=
0
)
{
return
SQLITE_CANTOPEN
;
}
sqlite3_vfs
*
pOrigVfs
=
ORIGVFS
(
vfs
)
;
int
rc
=
pOrigVfs
-
>
xOpen
(
pOrigVfs
zName
pFile
flags
pOutFlags
)
;
if
(
rc
!
=
SQLITE_OK
)
{
return
rc
;
}
const
sqlite3_io_methods
*
pOrigMethods
=
pFile
-
>
pMethods
;
MOZ_ASSERT
(
pOrigMethods
-
>
iVersion
<
=
3
)
;
static
const
sqlite3_io_methods
vfs_io_methods
=
{
pOrigMethods
-
>
iVersion
pOrigMethods
-
>
xClose
pOrigMethods
-
>
xRead
pOrigMethods
-
>
xWrite
pOrigMethods
-
>
xTruncate
pOrigMethods
-
>
xSync
pOrigMethods
-
>
xFileSize
pOrigMethods
-
>
xLock
pOrigMethods
-
>
xUnlock
pOrigMethods
-
>
xCheckReservedLock
pOrigMethods
-
>
xFileControl
pOrigMethods
-
>
xSectorSize
[
]
(
sqlite3_file
*
)
{
return
SQLITE_IOCAP_IMMUTABLE
;
}
pOrigMethods
-
>
xShmMap
pOrigMethods
-
>
xShmLock
pOrigMethods
-
>
xShmBarrier
pOrigMethods
-
>
xShmUnmap
pOrigMethods
-
>
xFetch
pOrigMethods
-
>
xUnfetch
}
;
pFile
-
>
pMethods
=
&
vfs_io_methods
;
if
(
pOutFlags
)
{
*
pOutFlags
=
flags
;
}
return
SQLITE_OK
;
}
}
namespace
mozilla
:
:
storage
{
UniquePtr
<
sqlite3_vfs
>
ConstructReadOnlyNoLockVFS
(
)
{
if
(
sqlite3_vfs_find
(
VFS_NAME
)
!
=
nullptr
)
{
return
nullptr
;
}
sqlite3_vfs
*
pOrigVfs
=
sqlite3_vfs_find
(
BASE_VFS
)
;
if
(
!
pOrigVfs
)
{
return
nullptr
;
}
MOZ_ASSERT
(
pOrigVfs
-
>
iVersion
<
=
3
)
;
static
const
sqlite3_vfs
vfs
=
{
pOrigVfs
-
>
iVersion
pOrigVfs
-
>
szOsFile
pOrigVfs
-
>
mxPathname
nullptr
VFS_NAME
pOrigVfs
vfsOpen
pOrigVfs
-
>
xDelete
pOrigVfs
-
>
xAccess
pOrigVfs
-
>
xFullPathname
pOrigVfs
-
>
xDlOpen
pOrigVfs
-
>
xDlError
pOrigVfs
-
>
xDlSym
pOrigVfs
-
>
xDlClose
pOrigVfs
-
>
xRandomness
pOrigVfs
-
>
xSleep
pOrigVfs
-
>
xCurrentTime
pOrigVfs
-
>
xGetLastError
pOrigVfs
-
>
xCurrentTimeInt64
pOrigVfs
-
>
xSetSystemCall
pOrigVfs
-
>
xGetSystemCall
pOrigVfs
-
>
xNextSystemCall
}
;
return
MakeUnique
<
sqlite3_vfs
>
(
vfs
)
;
}
}
