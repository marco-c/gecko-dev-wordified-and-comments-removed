#
include
"
Variant
.
h
"
extern
"
C
"
{
using
namespace
mozilla
:
:
storage
;
uint16_t
NS_GetDataType
(
nsIVariant
*
aVariant
)
{
return
aVariant
-
>
GetDataType
(
)
;
}
void
NS_NewStorageNullVariant
(
nsIVariant
*
*
aVariant
)
{
nsCOMPtr
<
nsIVariant
>
variant
=
new
NullVariant
(
)
;
variant
.
forget
(
aVariant
)
;
}
void
NS_NewStorageBooleanVariant
(
bool
aValue
nsIVariant
*
*
aVariant
)
{
nsCOMPtr
<
nsIVariant
>
variant
=
new
BooleanVariant
(
aValue
)
;
variant
.
forget
(
aVariant
)
;
}
void
NS_NewStorageIntegerVariant
(
int64_t
aValue
nsIVariant
*
*
aVariant
)
{
nsCOMPtr
<
nsIVariant
>
variant
=
new
IntegerVariant
(
aValue
)
;
variant
.
forget
(
aVariant
)
;
}
void
NS_NewStorageFloatVariant
(
double
aValue
nsIVariant
*
*
aVariant
)
{
nsCOMPtr
<
nsIVariant
>
variant
=
new
FloatVariant
(
aValue
)
;
variant
.
forget
(
aVariant
)
;
}
void
NS_NewStorageTextVariant
(
const
nsAString
&
aValue
nsIVariant
*
*
aVariant
)
{
nsCOMPtr
<
nsIVariant
>
variant
=
new
TextVariant
(
aValue
)
;
variant
.
forget
(
aVariant
)
;
}
void
NS_NewStorageUTF8TextVariant
(
const
nsACString
&
aValue
nsIVariant
*
*
aVariant
)
{
nsCOMPtr
<
nsIVariant
>
variant
=
new
UTF8TextVariant
(
aValue
)
;
variant
.
forget
(
aVariant
)
;
}
}
