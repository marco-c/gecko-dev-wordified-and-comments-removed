#
include
"
storage_test_harness
.
h
"
#
include
"
mozStorageHelper
.
h
"
TEST
(
storage_statement_scoper
automatic_reset
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
(
void
)
db
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
stmt
;
(
void
)
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
*
FROM
sqlite_master
"
)
getter_AddRefs
(
stmt
)
)
;
int32_t
state
=
-
1
;
(
void
)
stmt
-
>
GetState
(
&
state
)
;
do_check_true
(
state
=
=
mozIStorageStatement
:
:
MOZ_STORAGE_STATEMENT_READY
)
;
{
mozStorageStatementScoper
scoper
(
stmt
)
;
bool
hasMore
;
do_check_true
(
NS_SUCCEEDED
(
stmt
-
>
ExecuteStep
(
&
hasMore
)
)
)
;
state
=
-
1
;
(
void
)
stmt
-
>
GetState
(
&
state
)
;
do_check_true
(
state
=
=
mozIStorageStatement
:
:
MOZ_STORAGE_STATEMENT_EXECUTING
)
;
}
state
=
-
1
;
(
void
)
stmt
-
>
GetState
(
&
state
)
;
do_check_true
(
state
=
=
mozIStorageStatement
:
:
MOZ_STORAGE_STATEMENT_READY
)
;
}
TEST
(
storage_statement_scoper
Abandon
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
(
void
)
db
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
stmt
;
(
void
)
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
*
FROM
sqlite_master
"
)
getter_AddRefs
(
stmt
)
)
;
int32_t
state
=
-
1
;
(
void
)
stmt
-
>
GetState
(
&
state
)
;
do_check_true
(
state
=
=
mozIStorageStatement
:
:
MOZ_STORAGE_STATEMENT_READY
)
;
{
mozStorageStatementScoper
scoper
(
stmt
)
;
bool
hasMore
;
do_check_true
(
NS_SUCCEEDED
(
stmt
-
>
ExecuteStep
(
&
hasMore
)
)
)
;
state
=
-
1
;
(
void
)
stmt
-
>
GetState
(
&
state
)
;
do_check_true
(
state
=
=
mozIStorageStatement
:
:
MOZ_STORAGE_STATEMENT_EXECUTING
)
;
scoper
.
Abandon
(
)
;
}
state
=
-
1
;
(
void
)
stmt
-
>
GetState
(
&
state
)
;
do_check_true
(
state
=
=
mozIStorageStatement
:
:
MOZ_STORAGE_STATEMENT_EXECUTING
)
;
}
