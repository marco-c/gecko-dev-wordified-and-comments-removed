#
include
"
storage_test_harness
.
h
"
#
include
"
prinrval
.
h
"
class
CompletionRunnable
final
:
public
Runnable
{
public
:
explicit
CompletionRunnable
(
)
:
mDone
(
false
)
{
}
NS_IMETHOD
Run
(
)
override
{
mDone
=
true
;
return
NS_OK
;
}
bool
mDone
;
}
;
#
ifndef
DEBUG
TEST
(
storage_spinningSynchronousClose
CloseOnAsync
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt
;
do_check_success
(
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
getter_AddRefs
(
stmt
)
)
)
;
nsCOMPtr
<
mozIStoragePendingStatement
>
p
;
do_check_success
(
stmt
-
>
ExecuteAsync
(
nullptr
getter_AddRefs
(
p
)
)
)
;
do_check_success
(
stmt
-
>
Finalize
(
)
)
;
RefPtr
<
CompletionRunnable
>
event
=
new
CompletionRunnable
(
)
;
NS_DispatchToMainThread
(
event
NS_DISPATCH_NORMAL
)
;
do_check_false
(
NS_SUCCEEDED
(
db
-
>
Close
(
)
)
)
;
do_check_true
(
event
-
>
mDone
)
;
}
#
endif
TEST
(
storage_spinningSynchronousClose
spinningSynchronousCloseOnAsync
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt
;
do_check_success
(
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
getter_AddRefs
(
stmt
)
)
)
;
nsCOMPtr
<
mozIStoragePendingStatement
>
p
;
do_check_success
(
stmt
-
>
ExecuteAsync
(
nullptr
getter_AddRefs
(
p
)
)
)
;
do_check_success
(
stmt
-
>
Finalize
(
)
)
;
RefPtr
<
CompletionRunnable
>
event
=
new
CompletionRunnable
(
)
;
NS_DispatchToMainThread
(
event
NS_DISPATCH_NORMAL
)
;
do_check_success
(
db
-
>
SpinningSynchronousClose
(
)
)
;
do_check_true
(
event
-
>
mDone
)
;
}
