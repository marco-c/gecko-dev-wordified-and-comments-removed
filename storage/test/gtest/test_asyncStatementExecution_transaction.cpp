#
include
"
storage_test_harness
.
h
"
#
include
"
mozStorageConnection
.
h
"
#
include
"
sqlite3
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
storage
;
int
commit_hook
(
void
*
aArg
)
{
int
*
arg
=
static_cast
<
int
*
>
(
aArg
)
;
(
*
arg
)
+
+
;
return
0
;
}
void
check_transaction
(
mozIStorageConnection
*
aDB
const
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
&
aStmts
bool
aTransactionExpected
)
{
int
commit
=
0
;
static_cast
<
Connection
*
>
(
aDB
)
-
>
setCommitHook
(
commit_hook
&
commit
)
;
RefPtr
<
AsyncStatementSpinner
>
asyncSpin
(
new
AsyncStatementSpinner
(
)
)
;
nsCOMPtr
<
mozIStoragePendingStatement
>
asyncPend
;
do_check_success
(
aDB
-
>
ExecuteAsync
(
aStmts
asyncSpin
getter_AddRefs
(
asyncPend
)
)
)
;
do_check_true
(
asyncPend
)
;
asyncSpin
-
>
SpinUntilCompleted
(
)
;
static_cast
<
Connection
*
>
(
aDB
)
-
>
setCommitHook
(
nullptr
)
;
do_check_eq
(
aTransactionExpected
!
!
commit
)
;
if
(
aTransactionExpected
)
{
do_check_eq
(
1
commit
)
;
}
for
(
uint32_t
i
=
0
;
i
<
aStmts
.
Length
(
)
;
+
+
i
)
{
aStmts
[
i
]
-
>
Finalize
(
)
;
}
blocking_async_close
(
aDB
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
MultipleAsyncReadStatements
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt1
;
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
*
FROM
sqlite_master
"
)
getter_AddRefs
(
stmt1
)
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt2
;
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
*
FROM
sqlite_master
"
)
getter_AddRefs
(
stmt2
)
)
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt1
.
forget
(
)
stmt2
.
forget
(
)
}
;
check_transaction
(
db
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
(
stmts
)
false
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
MultipleReadStatements
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
stmt1
;
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
*
FROM
sqlite_master
"
)
getter_AddRefs
(
stmt1
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
stmt2
;
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
*
FROM
sqlite_master
"
)
getter_AddRefs
(
stmt2
)
)
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt1
.
forget
(
)
stmt2
.
forget
(
)
}
;
check_transaction
(
db
stmts
false
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
MultipleAsyncReadWriteStatements
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt1
;
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
*
FROM
sqlite_master
"
)
getter_AddRefs
(
stmt1
)
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt2
;
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
getter_AddRefs
(
stmt2
)
)
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt1
.
forget
(
)
stmt2
.
forget
(
)
}
;
check_transaction
(
db
stmts
true
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
MultipleReadWriteStatements
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
stmt1
;
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
*
FROM
sqlite_master
"
)
getter_AddRefs
(
stmt1
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
stmt2
;
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
getter_AddRefs
(
stmt2
)
)
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt1
.
forget
(
)
stmt2
.
forget
(
)
}
;
check_transaction
(
db
stmts
true
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
MultipleAsyncWriteStatements
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt1
;
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test1
(
id
INTEGER
PRIMARY
KEY
)
"
)
getter_AddRefs
(
stmt1
)
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt2
;
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test2
(
id
INTEGER
PRIMARY
KEY
)
"
)
getter_AddRefs
(
stmt2
)
)
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt1
.
forget
(
)
stmt2
.
forget
(
)
}
;
check_transaction
(
db
stmts
true
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
MultipleWriteStatements
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
stmt1
;
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test1
(
id
INTEGER
PRIMARY
KEY
)
"
)
getter_AddRefs
(
stmt1
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
stmt2
;
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test2
(
id
INTEGER
PRIMARY
KEY
)
"
)
getter_AddRefs
(
stmt2
)
)
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt1
.
forget
(
)
stmt2
.
forget
(
)
}
;
check_transaction
(
db
stmts
true
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
SingleAsyncReadStatement
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt
;
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
*
FROM
sqlite_master
"
)
getter_AddRefs
(
stmt
)
)
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt
.
forget
(
)
}
;
check_transaction
(
db
stmts
false
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
SingleReadStatement
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
stmt
;
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
*
FROM
sqlite_master
"
)
getter_AddRefs
(
stmt
)
)
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt
.
forget
(
)
}
;
check_transaction
(
db
stmts
false
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
SingleAsyncWriteStatement
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt
;
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
getter_AddRefs
(
stmt
)
)
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt
.
forget
(
)
}
;
check_transaction
(
db
stmts
true
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
SingleWriteStatement
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
stmt
;
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
getter_AddRefs
(
stmt
)
)
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt
.
forget
(
)
}
;
check_transaction
(
db
stmts
true
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
MultipleParamsAsyncReadStatement
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt
;
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
:
param
FROM
sqlite_master
"
)
getter_AddRefs
(
stmt
)
)
;
nsCOMPtr
<
mozIStorageBindingParamsArray
>
paramsArray
;
stmt
-
>
NewBindingParamsArray
(
getter_AddRefs
(
paramsArray
)
)
;
for
(
int32_t
i
=
0
;
i
<
2
;
i
+
+
)
{
nsCOMPtr
<
mozIStorageBindingParams
>
params
;
paramsArray
-
>
NewBindingParams
(
getter_AddRefs
(
params
)
)
;
params
-
>
BindInt32ByName
(
NS_LITERAL_CSTRING
(
"
param
"
)
1
)
;
paramsArray
-
>
AddParams
(
params
)
;
}
stmt
-
>
BindParameters
(
paramsArray
)
;
paramsArray
=
nullptr
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt
.
forget
(
)
}
;
check_transaction
(
db
stmts
false
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
MultipleParamsReadStatement
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
stmt
;
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
:
param
FROM
sqlite_master
"
)
getter_AddRefs
(
stmt
)
)
;
nsCOMPtr
<
mozIStorageBindingParamsArray
>
paramsArray
;
stmt
-
>
NewBindingParamsArray
(
getter_AddRefs
(
paramsArray
)
)
;
for
(
int32_t
i
=
0
;
i
<
2
;
i
+
+
)
{
nsCOMPtr
<
mozIStorageBindingParams
>
params
;
paramsArray
-
>
NewBindingParams
(
getter_AddRefs
(
params
)
)
;
params
-
>
BindInt32ByName
(
NS_LITERAL_CSTRING
(
"
param
"
)
1
)
;
paramsArray
-
>
AddParams
(
params
)
;
}
stmt
-
>
BindParameters
(
paramsArray
)
;
paramsArray
=
nullptr
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt
.
forget
(
)
}
;
check_transaction
(
db
stmts
false
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
MultipleParamsAsyncWriteStatement
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
tableStmt
;
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
getter_AddRefs
(
tableStmt
)
)
;
tableStmt
-
>
Execute
(
)
;
tableStmt
-
>
Finalize
(
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt
;
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
DELETE
FROM
test
WHERE
id
=
:
param
"
)
getter_AddRefs
(
stmt
)
)
;
nsCOMPtr
<
mozIStorageBindingParamsArray
>
paramsArray
;
stmt
-
>
NewBindingParamsArray
(
getter_AddRefs
(
paramsArray
)
)
;
for
(
int32_t
i
=
0
;
i
<
2
;
i
+
+
)
{
nsCOMPtr
<
mozIStorageBindingParams
>
params
;
paramsArray
-
>
NewBindingParams
(
getter_AddRefs
(
params
)
)
;
params
-
>
BindInt32ByName
(
NS_LITERAL_CSTRING
(
"
param
"
)
1
)
;
paramsArray
-
>
AddParams
(
params
)
;
}
stmt
-
>
BindParameters
(
paramsArray
)
;
paramsArray
=
nullptr
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt
.
forget
(
)
}
;
check_transaction
(
db
stmts
true
)
;
}
TEST
(
storage_asyncStatementExecution_transaction
MultipleParamsWriteStatement
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
mozIStorageStatement
>
tableStmt
;
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
getter_AddRefs
(
tableStmt
)
)
;
tableStmt
-
>
Execute
(
)
;
tableStmt
-
>
Finalize
(
)
;
nsCOMPtr
<
mozIStorageStatement
>
stmt
;
db
-
>
CreateStatement
(
NS_LITERAL_CSTRING
(
"
DELETE
FROM
test
WHERE
id
=
:
param
"
)
getter_AddRefs
(
stmt
)
)
;
nsCOMPtr
<
mozIStorageBindingParamsArray
>
paramsArray
;
stmt
-
>
NewBindingParamsArray
(
getter_AddRefs
(
paramsArray
)
)
;
for
(
int32_t
i
=
0
;
i
<
2
;
i
+
+
)
{
nsCOMPtr
<
mozIStorageBindingParams
>
params
;
paramsArray
-
>
NewBindingParams
(
getter_AddRefs
(
params
)
)
;
params
-
>
BindInt32ByName
(
NS_LITERAL_CSTRING
(
"
param
"
)
1
)
;
paramsArray
-
>
AddParams
(
params
)
;
}
stmt
-
>
BindParameters
(
paramsArray
)
;
paramsArray
=
nullptr
;
nsTArray
<
RefPtr
<
mozIStorageBaseStatement
>
>
stmts
=
{
stmt
.
forget
(
)
}
;
check_transaction
(
db
stmts
true
)
;
}
