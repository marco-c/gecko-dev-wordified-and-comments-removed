#
include
"
storage_test_harness
.
h
"
#
include
"
mozStorageHelper
.
h
"
#
include
"
mozStorageConnection
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
storage
;
bool
has_transaction
(
mozIStorageConnection
*
aDB
)
{
return
!
(
static_cast
<
Connection
*
>
(
aDB
)
-
>
getAutocommit
(
)
)
;
}
TEST
(
storage_transaction_helper
Commit
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
{
mozStorageTransaction
transaction
(
db
false
)
;
do_check_true
(
has_transaction
(
db
)
)
;
(
void
)
db
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
)
;
(
void
)
transaction
.
Commit
(
)
;
}
do_check_false
(
has_transaction
(
db
)
)
;
bool
exists
=
false
;
(
void
)
db
-
>
TableExists
(
NS_LITERAL_CSTRING
(
"
test
"
)
&
exists
)
;
do_check_true
(
exists
)
;
}
TEST
(
storage_transaction_helper
Rollback
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
{
mozStorageTransaction
transaction
(
db
true
)
;
do_check_true
(
has_transaction
(
db
)
)
;
(
void
)
db
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
)
;
(
void
)
transaction
.
Rollback
(
)
;
}
do_check_false
(
has_transaction
(
db
)
)
;
bool
exists
=
true
;
(
void
)
db
-
>
TableExists
(
NS_LITERAL_CSTRING
(
"
test
"
)
&
exists
)
;
do_check_false
(
exists
)
;
}
TEST
(
storage_transaction_helper
AutoCommit
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
{
mozStorageTransaction
transaction
(
db
true
)
;
do_check_true
(
has_transaction
(
db
)
)
;
(
void
)
db
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
)
;
}
do_check_false
(
has_transaction
(
db
)
)
;
bool
exists
=
false
;
(
void
)
db
-
>
TableExists
(
NS_LITERAL_CSTRING
(
"
test
"
)
&
exists
)
;
do_check_true
(
exists
)
;
}
TEST
(
storage_transaction_helper
AutoRollback
)
{
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
{
mozStorageTransaction
transaction
(
db
false
)
;
do_check_true
(
has_transaction
(
db
)
)
;
(
void
)
db
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
)
;
}
do_check_false
(
has_transaction
(
db
)
)
;
bool
exists
=
true
;
(
void
)
db
-
>
TableExists
(
NS_LITERAL_CSTRING
(
"
test
"
)
&
exists
)
;
do_check_false
(
exists
)
;
}
TEST
(
storage_transaction_helper
null_database_connection
)
{
mozStorageTransaction
transaction
(
nullptr
false
)
;
do_check_true
(
NS_SUCCEEDED
(
transaction
.
Commit
(
)
)
)
;
do_check_true
(
NS_SUCCEEDED
(
transaction
.
Rollback
(
)
)
)
;
}
TEST
(
storage_transaction_helper
async_Commit
)
{
HookSqliteMutex
hook
;
nsCOMPtr
<
mozIStorageConnection
>
db
(
getMemoryDatabase
(
)
)
;
nsCOMPtr
<
nsIThread
>
target
(
get_conn_async_thread
(
db
)
)
;
do_check_true
(
target
)
;
RefPtr
<
ThreadWedger
>
wedger
(
new
ThreadWedger
(
target
)
)
;
{
mozStorageTransaction
transaction
(
db
false
mozIStorageConnection
:
:
TRANSACTION_DEFERRED
true
)
;
do_check_true
(
has_transaction
(
db
)
)
;
(
void
)
db
-
>
ExecuteSimpleSQL
(
NS_LITERAL_CSTRING
(
"
CREATE
TABLE
test
(
id
INTEGER
PRIMARY
KEY
)
"
)
)
;
(
void
)
transaction
.
Commit
(
)
;
}
do_check_true
(
has_transaction
(
db
)
)
;
wedger
-
>
unwedge
(
)
;
nsCOMPtr
<
mozIStorageAsyncStatement
>
stmt
;
(
void
)
db
-
>
CreateAsyncStatement
(
NS_LITERAL_CSTRING
(
"
SELECT
NULL
"
)
getter_AddRefs
(
stmt
)
)
;
blocking_async_execute
(
stmt
)
;
stmt
-
>
Finalize
(
)
;
do_check_false
(
has_transaction
(
db
)
)
;
bool
exists
=
false
;
(
void
)
db
-
>
TableExists
(
NS_LITERAL_CSTRING
(
"
test
"
)
&
exists
)
;
do_check_true
(
exists
)
;
blocking_async_close
(
db
)
;
}
