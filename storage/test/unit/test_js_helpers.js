function
test_params_enumerate
(
)
{
let
stmt
=
createStatement
(
"
SELECT
*
FROM
test
WHERE
id
IN
(
:
a
:
b
:
c
)
"
)
;
let
expected
=
[
0
1
2
"
a
"
"
b
"
"
c
"
"
length
"
]
;
let
index
=
0
;
for
(
let
name
in
stmt
.
params
)
{
if
(
name
=
=
"
QueryInterface
"
)
{
continue
;
}
Assert
.
equal
(
name
expected
[
index
+
+
]
)
;
}
Assert
.
equal
(
index
7
)
;
}
function
test_params_prototype
(
)
{
let
stmt
=
createStatement
(
"
SELECT
*
FROM
sqlite_master
"
)
;
Object
.
getPrototypeOf
(
stmt
.
params
)
.
test
=
2
;
Assert
.
equal
(
stmt
.
params
.
test
2
)
;
delete
Object
.
getPrototypeOf
(
stmt
.
params
)
.
test
;
stmt
.
finalize
(
)
;
}
function
test_row_prototype
(
)
{
let
stmt
=
createStatement
(
"
SELECT
*
FROM
sqlite_master
"
)
;
Assert
.
ok
(
stmt
.
executeStep
(
)
)
;
Object
.
getPrototypeOf
(
stmt
.
row
)
.
test
=
2
;
Assert
.
equal
(
stmt
.
row
.
test
2
)
;
delete
Object
.
getPrototypeOf
(
stmt
.
row
)
.
test
;
stmt
.
finalize
(
)
;
}
function
test_row_enumerate
(
)
{
let
stmt
=
createStatement
(
"
SELECT
*
FROM
test
"
)
;
Assert
.
ok
(
stmt
.
executeStep
(
)
)
;
let
expected
=
[
"
id
"
"
string
"
]
;
let
expected_values
=
[
123
"
foo
"
]
;
let
index
=
0
;
for
(
let
name
in
stmt
.
row
)
{
Assert
.
equal
(
name
expected
[
index
]
)
;
Assert
.
equal
(
stmt
.
row
[
name
]
expected_values
[
index
]
)
;
index
+
+
;
}
Assert
.
equal
(
index
2
)
;
let
savedOffRow
=
stmt
.
row
;
stmt
=
null
;
Cu
.
forceGC
(
)
;
Assert
.
throws
(
(
)
=
>
{
return
savedOffRow
.
string
;
}
/
NS_ERROR_NOT_INITIALIZED
/
"
GC
'
ed
statement
should
throw
"
)
;
}
function
test_params_gets_sync
(
)
{
}
function
test_params_gets_async
(
)
{
}
var
tests
=
[
test_params_enumerate
test_params_prototype
test_row_enumerate
test_row_prototype
test_params_gets_sync
test_params_gets_async
]
;
function
run_test
(
)
{
cleanup
(
)
;
getOpenedDatabase
(
)
.
executeSimpleSQL
(
"
CREATE
TABLE
test
(
"
+
"
id
INTEGER
PRIMARY
KEY
string
TEXT
"
+
"
)
"
)
;
getOpenedDatabase
(
)
.
executeSimpleSQL
(
"
INSERT
INTO
test
(
id
string
)
VALUES
(
123
'
foo
'
)
"
)
;
tests
.
forEach
(
test
=
>
test
(
)
)
;
}
