add_task
(
async
function
test_asyncClose_does_not_complete_before_statements
(
)
{
let
db
=
Services
.
storage
.
openDatabase
(
getTestDB
(
)
)
;
let
stmt
=
db
.
createStatement
(
"
SELECT
*
FROM
sqlite_master
"
)
;
let
asyncStatementPromise
=
executeAsync
(
stmt
)
;
stmt
.
finalize
(
)
;
await
asyncClose
(
db
)
;
equal
(
(
await
asyncStatementPromise
)
Ci
.
mozIStorageStatementCallback
.
REASON_FINISHED
)
;
}
)
;
if
(
!
AppConstants
.
DEBUG
)
{
add_task
(
async
function
test_double_asyncClose_throws
(
)
{
let
db
=
await
openAsyncDatabase
(
getTestDB
(
)
)
;
let
realClosePromise
=
await
asyncClose
(
db
)
;
try
{
db
.
asyncClose
(
)
;
ok
(
false
"
should
have
thrown
"
)
;
}
catch
(
e
)
{
equal
(
e
.
result
Cr
.
NS_ERROR_NOT_INITIALIZED
)
;
}
await
realClosePromise
;
}
)
;
}
add_task
(
async
function
test_asyncClose_on_sync_db
(
)
{
let
db
=
Services
.
storage
.
openDatabase
(
getTestDB
(
)
)
;
await
asyncClose
(
db
)
;
ok
(
true
"
closed
sync
connection
asynchronously
"
)
;
}
)
;
add_task
(
async
function
test_asyncClose_failed_open
(
)
{
let
openPromise
=
openAsyncDatabase
(
getFakeDB
(
)
)
;
await
openPromise
.
then
(
(
)
=
>
{
ok
(
false
"
we
should
have
failed
to
open
the
db
;
this
test
is
broken
!
"
)
;
}
(
)
=
>
{
ok
(
true
"
correctly
failed
to
open
db
;
bg
asyncClose
should
happen
"
)
;
}
)
;
}
)
;
add_task
(
async
function
test_asyncClose_does_not_throw_without_callback
(
)
{
let
db
=
await
openAsyncDatabase
(
getTestDB
(
)
)
;
db
.
asyncClose
(
)
;
ok
(
true
"
if
we
shutdown
cleanly
and
do
not
crash
then
we
succeeded
"
)
;
}
)
;
