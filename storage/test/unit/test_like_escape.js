const
LATIN1_AE
=
"
\
xc6
"
;
const
LATIN1_ae
=
"
\
xe6
"
;
function
setup
(
)
{
getOpenedDatabase
(
)
.
createTable
(
"
t1
"
"
x
TEXT
"
)
;
var
stmt
=
createStatement
(
"
INSERT
INTO
t1
(
x
)
VALUES
(
'
foo
/
bar_baz
%
20cheese
'
)
"
)
;
stmt
.
execute
(
)
;
stmt
.
finalize
(
)
;
stmt
=
createStatement
(
"
INSERT
INTO
t1
(
x
)
VALUES
(
?
1
)
"
)
;
stmt
.
bindByIndex
(
0
"
foo
%
20
"
+
LATIN1_ae
+
"
/
_bar
"
)
;
stmt
.
execute
(
)
;
stmt
.
finalize
(
)
;
}
function
test_escape_for_like_ascii
(
)
{
const
paramForLike
=
"
oo
/
bar_baz
%
20chees
"
;
const
escapeChar
=
"
/
"
;
for
(
const
utf8
of
[
false
true
]
)
{
var
stmt
=
createStatement
(
"
SELECT
x
FROM
t1
WHERE
x
LIKE
?
1
ESCAPE
'
/
'
"
)
;
var
paramForLikeEscaped
=
utf8
?
stmt
.
escapeUTF8StringForLIKE
(
paramForLike
escapeChar
)
:
stmt
.
escapeStringForLIKE
(
paramForLike
escapeChar
)
;
Assert
.
equal
(
paramForLikeEscaped
"
oo
/
/
bar
/
_baz
/
%
20chees
"
)
;
stmt
.
bindByIndex
(
0
"
%
"
+
paramForLikeEscaped
+
"
%
"
)
;
stmt
.
executeStep
(
)
;
Assert
.
equal
(
"
foo
/
bar_baz
%
20cheese
"
stmt
.
getString
(
0
)
)
;
stmt
.
finalize
(
)
;
}
}
function
test_escape_for_like_non_ascii
(
)
{
const
paramForLike
=
"
oo
%
20
"
+
LATIN1_AE
+
"
/
_ba
"
;
const
escapeChar
=
"
/
"
;
for
(
const
utf8
of
[
false
true
]
)
{
var
stmt
=
createStatement
(
"
SELECT
x
FROM
t1
WHERE
x
LIKE
?
1
ESCAPE
'
/
'
"
)
;
var
paramForLikeEscaped
=
utf8
?
stmt
.
escapeUTF8StringForLIKE
(
paramForLike
escapeChar
)
:
stmt
.
escapeStringForLIKE
(
paramForLike
escapeChar
)
;
Assert
.
equal
(
paramForLikeEscaped
"
oo
/
%
20
"
+
LATIN1_AE
+
"
/
/
/
_ba
"
)
;
stmt
.
bindByIndex
(
0
"
%
"
+
paramForLikeEscaped
+
"
%
"
)
;
stmt
.
executeStep
(
)
;
Assert
.
equal
(
"
foo
%
20
"
+
LATIN1_ae
+
"
/
_bar
"
stmt
.
getString
(
0
)
)
;
stmt
.
finalize
(
)
;
}
}
var
tests
=
[
test_escape_for_like_ascii
test_escape_for_like_non_ascii
]
;
function
run_test
(
)
{
setup
(
)
;
for
(
var
i
=
0
;
i
<
tests
.
length
;
i
+
+
)
{
tests
[
i
]
(
)
;
}
cleanup
(
)
;
}
