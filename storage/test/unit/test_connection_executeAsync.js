const
INTEGER
=
1
;
const
TEXT
=
"
this
is
test
text
"
;
const
REAL
=
3
.
23
;
const
BLOB
=
[
1
2
]
;
add_task
(
async
function
test_first_create_and_add
(
)
{
let
db
=
getOpenedDatabase
(
)
;
db
.
executeSimpleSQL
(
"
CREATE
TABLE
test
(
"
+
"
id
INTEGER
"
+
"
string
TEXT
"
+
"
number
REAL
"
+
"
nuller
NULL
"
+
"
blober
BLOB
"
+
"
)
"
)
;
let
stmts
=
[
]
;
stmts
[
0
]
=
db
.
createStatement
(
"
INSERT
INTO
test
(
id
string
number
nuller
blober
)
VALUES
(
?
?
?
?
?
)
"
)
;
stmts
[
0
]
.
bindByIndex
(
0
INTEGER
)
;
stmts
[
0
]
.
bindByIndex
(
1
TEXT
)
;
stmts
[
0
]
.
bindByIndex
(
2
REAL
)
;
stmts
[
0
]
.
bindByIndex
(
3
null
)
;
stmts
[
0
]
.
bindBlobByIndex
(
4
BLOB
BLOB
.
length
)
;
stmts
[
1
]
=
getOpenedDatabase
(
)
.
createAsyncStatement
(
"
INSERT
INTO
test
(
string
number
nuller
blober
)
VALUES
(
?
?
?
?
)
"
)
;
stmts
[
1
]
.
bindByIndex
(
0
TEXT
)
;
stmts
[
1
]
.
bindByIndex
(
1
REAL
)
;
stmts
[
1
]
.
bindByIndex
(
2
null
)
;
stmts
[
1
]
.
bindBlobByIndex
(
3
BLOB
BLOB
.
length
)
;
let
execResult
=
await
executeMultipleStatementsAsync
(
db
stmts
function
(
aResultSet
)
{
ok
(
false
"
we
only
did
inserts
so
we
should
not
have
gotten
results
!
"
)
;
}
)
;
equal
(
Ci
.
mozIStorageStatementCallback
.
REASON_FINISHED
execResult
"
execution
should
have
finished
successfully
.
"
)
;
let
stmt
=
db
.
createStatement
(
"
SELECT
string
number
nuller
blober
FROM
test
WHERE
id
=
?
"
)
;
stmt
.
bindByIndex
(
0
INTEGER
)
;
try
{
do_check_true
(
stmt
.
executeStep
(
)
)
;
do_check_eq
(
TEXT
stmt
.
getString
(
0
)
)
;
do_check_eq
(
REAL
stmt
.
getDouble
(
1
)
)
;
do_check_true
(
stmt
.
getIsNull
(
2
)
)
;
let
count
=
{
value
:
0
}
;
let
blob
=
{
value
:
null
}
;
stmt
.
getBlob
(
3
count
blob
)
;
do_check_eq
(
BLOB
.
length
count
.
value
)
;
for
(
let
i
=
0
;
i
<
BLOB
.
length
;
i
+
+
)
do_check_eq
(
BLOB
[
i
]
blob
.
value
[
i
]
)
;
}
finally
{
stmt
.
finalize
(
)
;
}
stmt
=
db
.
createStatement
(
"
SELECT
COUNT
(
1
)
FROM
test
"
)
;
try
{
do_check_true
(
stmt
.
executeStep
(
)
)
;
do_check_eq
(
2
stmt
.
getInt32
(
0
)
)
;
}
finally
{
stmt
.
finalize
(
)
;
}
stmts
[
0
]
.
finalize
(
)
;
stmts
[
1
]
.
finalize
(
)
;
}
)
;
add_task
(
async
function
test_last_multiple_bindings_on_statements
(
)
{
const
AMOUNT_TO_ADD
=
5
;
const
ITERATIONS
=
5
;
let
stmts
=
[
]
;
let
db
=
getOpenedDatabase
(
)
;
let
sqlString
=
"
INSERT
INTO
test
(
id
string
number
nuller
blober
)
"
+
"
VALUES
(
:
int
:
text
:
real
:
null
:
blob
)
"
;
for
(
let
i
=
0
;
i
<
ITERATIONS
;
i
+
+
)
{
if
(
i
%
2
)
stmts
[
i
]
=
db
.
createStatement
(
sqlString
)
;
else
stmts
[
i
]
=
db
.
createAsyncStatement
(
sqlString
)
;
let
params
=
stmts
[
i
]
.
newBindingParamsArray
(
)
;
for
(
let
j
=
0
;
j
<
AMOUNT_TO_ADD
;
j
+
+
)
{
let
bp
=
params
.
newBindingParams
(
)
;
bp
.
bindByName
(
"
int
"
INTEGER
)
;
bp
.
bindByName
(
"
text
"
TEXT
)
;
bp
.
bindByName
(
"
real
"
REAL
)
;
bp
.
bindByName
(
"
null
"
null
)
;
bp
.
bindBlobByName
(
"
blob
"
BLOB
BLOB
.
length
)
;
params
.
addParams
(
bp
)
;
}
stmts
[
i
]
.
bindParameters
(
params
)
;
}
let
currentRows
=
0
;
let
countStmt
=
getOpenedDatabase
(
)
.
createStatement
(
"
SELECT
COUNT
(
1
)
AS
count
FROM
test
"
)
;
try
{
do_check_true
(
countStmt
.
executeStep
(
)
)
;
currentRows
=
countStmt
.
row
.
count
;
}
finally
{
countStmt
.
reset
(
)
;
}
let
execResult
=
await
executeMultipleStatementsAsync
(
db
stmts
function
(
aResultSet
)
{
ok
(
false
"
we
only
did
inserts
so
we
should
not
have
gotten
results
!
"
)
;
}
)
;
equal
(
Ci
.
mozIStorageStatementCallback
.
REASON_FINISHED
execResult
"
execution
should
have
finished
successfully
.
"
)
;
try
{
do_check_true
(
countStmt
.
executeStep
(
)
)
;
do_check_eq
(
currentRows
+
(
ITERATIONS
*
AMOUNT_TO_ADD
)
countStmt
.
row
.
count
)
;
}
finally
{
countStmt
.
finalize
(
)
;
}
stmts
.
forEach
(
stmt
=
>
stmt
.
finalize
(
)
)
;
await
asyncClose
(
db
)
;
gDBConn
=
null
;
}
)
;
