function
test_table_creation
(
)
{
var
msc
=
getOpenedUnsharedDatabase
(
)
;
msc
.
executeSimpleSQL
(
"
CREATE
VIRTUAL
TABLE
recipe
USING
fts3
(
name
ingredients
)
"
)
;
Assert
.
ok
(
msc
.
tableExists
(
"
recipe
"
)
)
;
}
function
test_insertion
(
)
{
var
msc
=
getOpenedUnsharedDatabase
(
)
;
msc
.
executeSimpleSQL
(
"
INSERT
INTO
recipe
(
name
ingredients
)
VALUES
"
+
"
(
'
broccoli
stew
'
'
broccoli
peppers
cheese
tomatoes
'
)
"
)
;
msc
.
executeSimpleSQL
(
"
INSERT
INTO
recipe
(
name
ingredients
)
VALUES
"
+
"
(
'
pumpkin
stew
'
'
pumpkin
onions
garlic
celery
'
)
"
)
;
msc
.
executeSimpleSQL
(
"
INSERT
INTO
recipe
(
name
ingredients
)
VALUES
"
+
"
(
'
broccoli
pie
'
'
broccoli
cheese
onions
flour
'
)
"
)
;
msc
.
executeSimpleSQL
(
"
INSERT
INTO
recipe
(
name
ingredients
)
VALUES
"
+
"
(
'
pumpkin
pie
'
'
pumpkin
sugar
flour
butter
'
)
"
)
;
var
stmt
=
msc
.
createStatement
(
"
SELECT
COUNT
(
*
)
FROM
recipe
"
)
;
stmt
.
executeStep
(
)
;
Assert
.
equal
(
stmt
.
getInt32
(
0
)
4
)
;
stmt
.
reset
(
)
;
stmt
.
finalize
(
)
;
}
function
test_selection
(
)
{
var
msc
=
getOpenedUnsharedDatabase
(
)
;
var
stmt
=
msc
.
createStatement
(
"
SELECT
rowid
name
ingredients
FROM
recipe
WHERE
name
MATCH
'
pie
'
"
)
;
Assert
.
ok
(
stmt
.
executeStep
(
)
)
;
Assert
.
equal
(
stmt
.
getInt32
(
0
)
3
)
;
Assert
.
equal
(
stmt
.
getString
(
1
)
"
broccoli
pie
"
)
;
Assert
.
equal
(
stmt
.
getString
(
2
)
"
broccoli
cheese
onions
flour
"
)
;
Assert
.
ok
(
stmt
.
executeStep
(
)
)
;
Assert
.
equal
(
stmt
.
getInt32
(
0
)
4
)
;
Assert
.
equal
(
stmt
.
getString
(
1
)
"
pumpkin
pie
"
)
;
Assert
.
equal
(
stmt
.
getString
(
2
)
"
pumpkin
sugar
flour
butter
"
)
;
Assert
.
ok
(
!
stmt
.
executeStep
(
)
)
;
stmt
.
reset
(
)
;
stmt
.
finalize
(
)
;
}
var
tests
=
[
test_table_creation
test_insertion
test_selection
]
;
function
run_test
(
)
{
cleanup
(
)
;
try
{
for
(
var
i
=
0
;
i
<
tests
.
length
;
i
+
+
)
{
tests
[
i
]
(
)
;
}
}
finally
{
cleanup
(
)
;
}
}
