#
include
"
nsJSUtils
.
h
"
#
include
"
nsMemory
.
h
"
#
include
"
nsString
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
mozilla
/
dom
/
MozStorageAsyncStatementParamsBinding
.
h
"
#
include
"
mozStoragePrivateHelpers
.
h
"
namespace
mozilla
{
namespace
storage
{
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
AsyncStatementParams
mWindow
)
NS_INTERFACE_TABLE_HEAD
(
AsyncStatementParams
)
NS_WRAPPERCACHE_INTERFACE_TABLE_ENTRY
NS_INTERFACE_TABLE
(
AsyncStatementParams
nsISupports
)
NS_INTERFACE_TABLE_TO_MAP_SEGUE_CYCLE_COLLECTION
(
AsyncStatementParams
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
AsyncStatementParams
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
AsyncStatementParams
)
AsyncStatementParams
:
:
AsyncStatementParams
(
nsPIDOMWindowInner
*
aWindow
AsyncStatement
*
aStatement
)
:
mWindow
(
aWindow
)
mStatement
(
aStatement
)
{
NS_ASSERTION
(
mStatement
!
=
nullptr
"
mStatement
is
null
"
)
;
}
JSObject
*
AsyncStatementParams
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
MozStorageAsyncStatementParamsBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
AsyncStatementParams
:
:
NamedGetter
(
JSContext
*
aCx
const
nsAString
&
aName
bool
&
aFound
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aResult
mozilla
:
:
ErrorResult
&
aRv
)
{
if
(
!
mStatement
)
{
aRv
.
Throw
(
NS_ERROR_NOT_INITIALIZED
)
;
return
;
}
aFound
=
false
;
}
void
AsyncStatementParams
:
:
NamedSetter
(
JSContext
*
aCx
const
nsAString
&
aName
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
mozilla
:
:
ErrorResult
&
aRv
)
{
if
(
!
mStatement
)
{
aRv
.
Throw
(
NS_ERROR_NOT_INITIALIZED
)
;
return
;
}
NS_ConvertUTF16toUTF8
name
(
aName
)
;
nsCOMPtr
<
nsIVariant
>
variant
(
convertJSValToVariant
(
aCx
aValue
)
)
;
if
(
!
variant
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
aRv
=
mStatement
-
>
BindByName
(
name
variant
)
;
}
void
AsyncStatementParams
:
:
GetSupportedNames
(
nsTArray
<
nsString
>
&
aNames
)
{
}
void
AsyncStatementParams
:
:
IndexedGetter
(
JSContext
*
aCx
uint32_t
aIndex
bool
&
aFound
JS
:
:
MutableHandle
<
JS
:
:
Value
>
aResult
mozilla
:
:
ErrorResult
&
aRv
)
{
if
(
!
mStatement
)
{
aRv
.
Throw
(
NS_ERROR_NOT_INITIALIZED
)
;
return
;
}
aFound
=
false
;
}
void
AsyncStatementParams
:
:
IndexedSetter
(
JSContext
*
aCx
uint32_t
aIndex
JS
:
:
Handle
<
JS
:
:
Value
>
aValue
mozilla
:
:
ErrorResult
&
aRv
)
{
if
(
!
mStatement
)
{
aRv
.
Throw
(
NS_ERROR_NOT_INITIALIZED
)
;
return
;
}
nsCOMPtr
<
nsIVariant
>
variant
(
convertJSValToVariant
(
aCx
aValue
)
)
;
if
(
!
variant
)
{
aRv
.
Throw
(
NS_ERROR_UNEXPECTED
)
;
return
;
}
aRv
=
mStatement
-
>
BindByIndex
(
aIndex
variant
)
;
}
}
}
