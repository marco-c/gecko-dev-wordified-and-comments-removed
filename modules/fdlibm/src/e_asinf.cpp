#
include
<
cmath
>
#
include
"
math_private
.
h
"
static
const
float
one
=
1
.
0000000000e
+
00
huge
=
1
.
000e
+
30
pS0
=
1
.
6666586697e
-
01
pS1
=
-
4
.
2743422091e
-
02
pS2
=
-
8
.
6563630030e
-
03
qS1
=
-
7
.
0662963390e
-
01
;
static
const
double
pio2
=
1
.
570796326794896558e
+
00
;
float
__ieee754_asinf
(
float
x
)
{
double
s
;
float
t
w
p
q
;
int32_t
hx
ix
;
GET_FLOAT_WORD
(
hx
x
)
;
ix
=
hx
&
0x7fffffff
;
if
(
ix
>
=
0x3f800000
)
{
if
(
ix
=
=
0x3f800000
)
return
x
*
pio2
;
return
(
x
-
x
)
/
(
x
-
x
)
;
}
else
if
(
ix
<
0x3f000000
)
{
if
(
ix
<
0x39800000
)
{
if
(
huge
+
x
>
one
)
return
x
;
}
t
=
x
*
x
;
p
=
t
*
(
pS0
+
t
*
(
pS1
+
t
*
pS2
)
)
;
q
=
one
+
t
*
qS1
;
w
=
p
/
q
;
return
x
+
x
*
w
;
}
w
=
one
-
fabsf
(
x
)
;
t
=
w
*
(
float
)
0
.
5
;
p
=
t
*
(
pS0
+
t
*
(
pS1
+
t
*
pS2
)
)
;
q
=
one
+
t
*
qS1
;
s
=
std
:
:
sqrt
(
t
)
;
w
=
p
/
q
;
t
=
pio2
-
2
.
0
*
(
s
+
s
*
w
)
;
if
(
hx
>
0
)
return
t
;
else
return
-
t
;
}
