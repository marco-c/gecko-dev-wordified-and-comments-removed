#
ifndef
INC_DLG_DLG_H_
#
define
INC_DLG_DLG_H_
#
include
<
stdbool
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
stdarg
.
h
>
#
include
<
stdio
.
h
>
#
ifndef
DLG_LOG_LEVEL
#
ifdef
NDEBUG
#
define
DLG_LOG_LEVEL
dlg_level_warn
#
else
#
define
DLG_LOG_LEVEL
dlg_level_trace
#
endif
#
endif
#
ifndef
DLG_ASSERT_LEVEL
#
ifdef
NDEBUG
#
define
DLG_ASSERT_LEVEL
dlg_level_warn
#
else
#
define
DLG_ASSERT_LEVEL
dlg_level_trace
#
endif
#
endif
#
ifndef
DLG_DEFAULT_ASSERT
#
define
DLG_DEFAULT_ASSERT
dlg_level_error
#
endif
#
ifndef
DLG_FILE
#
define
DLG_FILE
dlg__strip_root_path
(
__FILE__
DLG_BASE_PATH
)
#
ifndef
DLG_BASE_PATH
#
define
DLG_BASE_PATH
"
"
#
endif
#
endif
#
ifndef
DLG_DEFAULT_TAGS
#
define
DLG_DEFAULT_TAGS_TERM
NULL
#
else
#
define
DLG_DEFAULT_TAGS_TERM
DLG_DEFAULT_TAGS
NULL
#
endif
#
ifndef
DLG_FMT_FUNC
#
define
DLG_FMT_FUNC
dlg__printf_format
#
endif
#
ifndef
DLG_API
#
if
(
defined
(
_WIN32
)
|
|
defined
(
__CYGWIN__
)
)
&
&
!
defined
(
DLG_STATIC
)
#
define
DLG_API
__declspec
(
dllimport
)
#
else
#
define
DLG_API
#
endif
#
endif
#
ifndef
DLG_FAILED_ASSERTION_TEXT
#
define
DLG_FAILED_ASSERTION_TEXT
(
x
)
x
#
endif
#
ifdef
__cplusplus
#
include
<
initializer_list
>
#
define
DLG_CREATE_TAGS
(
.
.
.
)
std
:
:
initializer_list
<
const
char
*
>
\
{
DLG_DEFAULT_TAGS_TERM
__VA_ARGS__
NULL
}
.
begin
(
)
#
else
#
define
DLG_CREATE_TAGS
(
.
.
.
)
(
const
char
*
const
[
]
)
{
DLG_DEFAULT_TAGS_TERM
__VA_ARGS__
NULL
}
#
endif
#
ifdef
__GNUC__
#
define
DLG_PRINTF_ATTRIB
(
a
b
)
__attribute__
(
(
format
(
printf
a
b
)
)
)
#
else
#
define
DLG_PRINTF_ATTRIB
(
a
b
)
#
endif
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
enum
dlg_level
{
dlg_level_trace
=
0
dlg_level_debug
dlg_level_info
dlg_level_warn
dlg_level_error
dlg_level_fatal
}
;
struct
dlg_origin
{
const
char
*
file
;
unsigned
int
line
;
const
char
*
func
;
enum
dlg_level
level
;
const
char
*
*
tags
;
const
char
*
expr
;
}
;
typedef
void
(
*
dlg_handler
)
(
const
struct
dlg_origin
*
origin
const
char
*
string
void
*
data
)
;
#
ifndef
DLG_DISABLE
#
define
dlg_log
(
level
.
.
.
)
if
(
level
>
=
DLG_LOG_LEVEL
)
\
dlg__do_log
(
level
DLG_CREATE_TAGS
(
NULL
)
DLG_FILE
__LINE__
__func__
\
DLG_FMT_FUNC
(
__VA_ARGS__
)
NULL
)
#
define
dlg_logt
(
level
tags
.
.
.
)
if
(
level
>
=
DLG_LOG_LEVEL
)
\
dlg__do_log
(
level
DLG_CREATE_TAGS
tags
DLG_FILE
__LINE__
__func__
\
DLG_FMT_FUNC
(
__VA_ARGS__
)
NULL
)
#
define
dlg_assertl
(
level
expr
)
if
(
level
>
=
DLG_ASSERT_LEVEL
&
&
!
(
expr
)
)
\
dlg__do_log
(
level
DLG_CREATE_TAGS
(
NULL
)
DLG_FILE
__LINE__
__func__
NULL
\
DLG_FAILED_ASSERTION_TEXT
(
#
expr
)
)
#
define
dlg_assertlt
(
level
tags
expr
)
if
(
level
>
=
DLG_ASSERT_LEVEL
&
&
!
(
expr
)
)
\
dlg__do_log
(
level
DLG_CREATE_TAGS
tags
DLG_FILE
__LINE__
__func__
NULL
\
DLG_FAILED_ASSERTION_TEXT
(
#
expr
)
)
#
define
dlg_assertlm
(
level
expr
.
.
.
)
if
(
level
>
=
DLG_ASSERT_LEVEL
&
&
!
(
expr
)
)
\
dlg__do_log
(
level
DLG_CREATE_TAGS
(
NULL
)
DLG_FILE
__LINE__
__func__
\
DLG_FMT_FUNC
(
__VA_ARGS__
)
DLG_FAILED_ASSERTION_TEXT
(
#
expr
)
)
#
define
dlg_assertltm
(
level
tags
expr
.
.
.
)
if
(
level
>
=
DLG_ASSERT_LEVEL
&
&
!
(
expr
)
)
\
dlg__do_log
(
level
DLG_CREATE_TAGS
tags
DLG_FILE
__LINE__
\
__func__
DLG_FMT_FUNC
(
__VA_ARGS__
)
DLG_FAILED_ASSERTION_TEXT
(
#
expr
)
)
#
define
dlg__assert_or
(
level
tags
expr
code
msg
)
if
(
!
(
expr
)
)
{
\
if
(
level
>
=
DLG_ASSERT_LEVEL
)
\
dlg__do_log
(
level
tags
DLG_FILE
__LINE__
__func__
msg
\
DLG_FAILED_ASSERTION_TEXT
(
#
expr
)
)
;
\
code
;
\
}
(
void
)
NULL
DLG_API
const
char
*
dlg__printf_format
(
const
char
*
format
.
.
.
)
DLG_PRINTF_ATTRIB
(
1
2
)
;
DLG_API
void
dlg__do_log
(
enum
dlg_level
lvl
const
char
*
const
*
const
char
*
int
const
char
*
const
char
*
const
char
*
)
;
DLG_API
const
char
*
dlg__strip_root_path
(
const
char
*
file
const
char
*
base
)
;
#
else
#
define
dlg_log
(
level
.
.
.
)
#
define
dlg_logt
(
level
tags
.
.
.
)
#
define
dlg_assertl
(
level
expr
)
#
define
dlg_assertlt
(
level
tags
expr
)
/
/
assert
with
tags
#
define
dlg_assertlm
(
level
expr
.
.
.
)
#
define
dlg_assertltm
(
level
tags
expr
.
.
.
)
/
/
assert
with
tags
&
message
#
define
dlg__assert_or
(
level
tags
expr
code
msg
)
if
(
!
(
expr
)
)
{
code
;
}
(
void
)
NULL
#
endif
DLG_API
void
dlg_set_handler
(
dlg_handler
handler
void
*
data
)
;
DLG_API
void
dlg_default_output
(
const
struct
dlg_origin
*
const
char
*
string
void
*
)
;
DLG_API
dlg_handler
dlg_get_handler
(
void
*
*
data
)
;
DLG_API
void
dlg_add_tag
(
const
char
*
tag
const
char
*
func
)
;
DLG_API
bool
dlg_remove_tag
(
const
char
*
tag
const
char
*
func
)
;
DLG_API
char
*
*
dlg_thread_buffer
(
size_t
*
*
size
)
;
#
define
dlg_trace
(
.
.
.
)
dlg_log
(
dlg_level_trace
__VA_ARGS__
)
#
define
dlg_debug
(
.
.
.
)
dlg_log
(
dlg_level_debug
__VA_ARGS__
)
#
define
dlg_info
(
.
.
.
)
dlg_log
(
dlg_level_info
__VA_ARGS__
)
#
define
dlg_warn
(
.
.
.
)
dlg_log
(
dlg_level_warn
__VA_ARGS__
)
#
define
dlg_error
(
.
.
.
)
dlg_log
(
dlg_level_error
__VA_ARGS__
)
#
define
dlg_fatal
(
.
.
.
)
dlg_log
(
dlg_level_fatal
__VA_ARGS__
)
#
define
dlg_tracet
(
tags
.
.
.
)
dlg_logt
(
dlg_level_trace
tags
__VA_ARGS__
)
#
define
dlg_debugt
(
tags
.
.
.
)
dlg_logt
(
dlg_level_debug
tags
__VA_ARGS__
)
#
define
dlg_infot
(
tags
.
.
.
)
dlg_logt
(
dlg_level_info
tags
__VA_ARGS__
)
#
define
dlg_warnt
(
tags
.
.
.
)
dlg_logt
(
dlg_level_warn
tags
__VA_ARGS__
)
#
define
dlg_errort
(
tags
.
.
.
)
dlg_logt
(
dlg_level_error
tags
__VA_ARGS__
)
#
define
dlg_fatalt
(
tags
.
.
.
)
dlg_logt
(
dlg_level_fatal
tags
__VA_ARGS__
)
#
define
dlg_assert
(
expr
)
dlg_assertl
(
DLG_DEFAULT_ASSERT
expr
)
#
define
dlg_assertt
(
tags
expr
)
dlg_assertlt
(
DLG_DEFAULT_ASSERT
tags
expr
)
#
define
dlg_assertm
(
expr
.
.
.
)
dlg_assertlm
(
DLG_DEFAULT_ASSERT
expr
__VA_ARGS__
)
#
define
dlg_asserttm
(
tags
expr
.
.
.
)
dlg_assertltm
(
DLG_DEFAULT_ASSERT
tags
expr
__VA_ARGS__
)
#
define
dlg_assertltm_or
(
level
tags
expr
code
.
.
.
)
dlg__assert_or
(
level
\
DLG_CREATE_TAGS
tags
expr
code
DLG_FMT_FUNC
(
__VA_ARGS__
)
)
#
define
dlg_assertlm_or
(
level
expr
code
.
.
.
)
dlg__assert_or
(
level
\
DLG_CREATE_TAGS
(
NULL
)
expr
code
DLG_FMT_FUNC
(
__VA_ARGS__
)
)
#
define
dlg_assertl_or
(
level
expr
code
)
dlg__assert_or
(
level
\
DLG_CREATE_TAGS
(
NULL
)
expr
code
NULL
)
#
define
dlg_assert_or
(
expr
code
)
dlg_assertl_or
(
DLG_DEFAULT_ASSERT
expr
code
)
#
define
dlg_assertm_or
(
expr
code
.
.
.
)
dlg_assertlm_or
(
DLG_DEFAULT_ASSERT
expr
code
__VA_ARGS__
)
#
ifdef
__cplusplus
}
#
endif
#
endif
