#
ifndef
FTCALC_H_
#
define
FTCALC_H_
#
include
<
freetype
/
freetype
.
h
>
#
include
"
compiler
-
macros
.
h
"
FT_BEGIN_HEADER
#
define
ADD_INT
(
a
b
)
\
(
FT_Int
)
(
(
FT_UInt
)
(
a
)
+
(
FT_UInt
)
(
b
)
)
#
define
SUB_INT
(
a
b
)
\
(
FT_Int
)
(
(
FT_UInt
)
(
a
)
-
(
FT_UInt
)
(
b
)
)
#
define
MUL_INT
(
a
b
)
\
(
FT_Int
)
(
(
FT_UInt
)
(
a
)
*
(
FT_UInt
)
(
b
)
)
#
define
NEG_INT
(
a
)
\
(
FT_Int
)
(
(
FT_UInt
)
0
-
(
FT_UInt
)
(
a
)
)
#
define
ADD_LONG
(
a
b
)
\
(
FT_Long
)
(
(
FT_ULong
)
(
a
)
+
(
FT_ULong
)
(
b
)
)
#
define
SUB_LONG
(
a
b
)
\
(
FT_Long
)
(
(
FT_ULong
)
(
a
)
-
(
FT_ULong
)
(
b
)
)
#
define
MUL_LONG
(
a
b
)
\
(
FT_Long
)
(
(
FT_ULong
)
(
a
)
*
(
FT_ULong
)
(
b
)
)
#
define
NEG_LONG
(
a
)
\
(
FT_Long
)
(
(
FT_ULong
)
0
-
(
FT_ULong
)
(
a
)
)
#
define
ADD_INT32
(
a
b
)
\
(
FT_Int32
)
(
(
FT_UInt32
)
(
a
)
+
(
FT_UInt32
)
(
b
)
)
#
define
SUB_INT32
(
a
b
)
\
(
FT_Int32
)
(
(
FT_UInt32
)
(
a
)
-
(
FT_UInt32
)
(
b
)
)
#
define
MUL_INT32
(
a
b
)
\
(
FT_Int32
)
(
(
FT_UInt32
)
(
a
)
*
(
FT_UInt32
)
(
b
)
)
#
define
NEG_INT32
(
a
)
\
(
FT_Int32
)
(
(
FT_UInt32
)
0
-
(
FT_UInt32
)
(
a
)
)
#
ifdef
FT_INT64
#
define
ADD_INT64
(
a
b
)
\
(
FT_Int64
)
(
(
FT_UInt64
)
(
a
)
+
(
FT_UInt64
)
(
b
)
)
#
define
SUB_INT64
(
a
b
)
\
(
FT_Int64
)
(
(
FT_UInt64
)
(
a
)
-
(
FT_UInt64
)
(
b
)
)
#
define
MUL_INT64
(
a
b
)
\
(
FT_Int64
)
(
(
FT_UInt64
)
(
a
)
*
(
FT_UInt64
)
(
b
)
)
#
define
NEG_INT64
(
a
)
\
(
FT_Int64
)
(
(
FT_UInt64
)
0
-
(
FT_UInt64
)
(
a
)
)
#
endif
#
ifdef
FT_CONFIG_OPTION_INLINE_MULFIX
#
ifdef
FT_INT64
static
inline
FT_Long
FT_MulFix_64
(
FT_Long
a
FT_Long
b
)
{
FT_Int64
ab
=
MUL_INT64
(
a
b
)
;
ab
=
ADD_INT64
(
ab
0x8000
+
(
ab
>
>
63
)
)
;
return
(
FT_Long
)
(
ab
>
>
16
)
;
}
#
define
FT_MulFix
(
a
b
)
FT_MulFix_64
(
a
b
)
#
elif
!
defined
(
FT_CONFIG_OPTION_NO_ASSEMBLER
)
#
if
defined
(
__arm__
)
&
&
\
(
defined
(
__thumb2__
)
|
|
!
defined
(
__thumb__
)
)
#
define
FT_MULFIX_ASSEMBLER
FT_MulFix_arm
static
__inline
FT_Int32
FT_MulFix_arm
(
FT_Int32
a
FT_Int32
b
)
{
FT_Int32
t
t2
;
#
if
defined
(
__CC_ARM
)
|
|
defined
(
__ARMCC__
)
__asm
{
smull
t2
t
b
a
mov
a
t
asr
#
31
add
a
a
#
0x8000
adds
t2
t2
a
adc
t
t
#
0
mov
a
t2
lsr
#
16
orr
a
a
t
lsl
#
16
}
#
elif
defined
(
__GNUC__
)
__asm__
__volatile__
(
"
smull
%
1
%
2
%
4
%
3
\
n
\
t
"
"
mov
%
0
%
2
asr
#
31
\
n
\
t
"
#
if
defined
(
__clang__
)
&
&
defined
(
__thumb2__
)
"
add
.
w
%
0
%
0
#
0x8000
\
n
\
t
"
#
else
"
add
%
0
%
0
#
0x8000
\
n
\
t
"
#
endif
"
adds
%
1
%
1
%
0
\
n
\
t
"
"
adc
%
2
%
2
#
0
\
n
\
t
"
"
mov
%
0
%
1
lsr
#
16
\
n
\
t
"
"
orr
%
0
%
0
%
2
lsl
#
16
\
n
\
t
"
:
"
=
r
"
(
a
)
"
=
&
r
"
(
t2
)
"
=
&
r
"
(
t
)
:
"
r
"
(
a
)
"
r
"
(
b
)
:
"
cc
"
)
;
#
endif
return
a
;
}
#
elif
defined
(
__i386__
)
|
|
defined
(
_M_IX86
)
#
define
FT_MULFIX_ASSEMBLER
FT_MulFix_i386
static
__inline
FT_Int32
FT_MulFix_i386
(
FT_Int32
a
FT_Int32
b
)
{
FT_Int32
result
;
#
if
defined
(
__GNUC__
)
__asm__
__volatile__
(
"
imul
%
%
edx
\
n
"
"
movl
%
%
edx
%
%
ecx
\
n
"
"
sarl
31
%
%
ecx
\
n
"
"
addl
0x8000
%
%
ecx
\
n
"
"
addl
%
%
ecx
%
%
eax
\
n
"
"
adcl
0
%
%
edx
\
n
"
"
shrl
16
%
%
eax
\
n
"
"
shll
16
%
%
edx
\
n
"
"
addl
%
%
edx
%
%
eax
\
n
"
:
"
=
a
"
(
result
)
"
=
d
"
(
b
)
:
"
a
"
(
a
)
"
d
"
(
b
)
:
"
%
ecx
"
"
cc
"
)
;
#
elif
defined
(
_MSC_VER
)
__asm
{
mov
eax
a
mov
edx
b
imul
edx
mov
ecx
edx
sar
ecx
31
add
ecx
8000h
add
eax
ecx
adc
edx
0
shr
eax
16
shl
edx
16
add
eax
edx
mov
result
eax
}
#
endif
return
result
;
}
#
endif
#
ifdef
FT_MULFIX_ASSEMBLER
#
define
FT_MulFix
(
a
b
)
FT_MULFIX_ASSEMBLER
(
(
FT_Int32
)
(
a
)
(
FT_Int32
)
(
b
)
)
#
endif
#
endif
#
endif
FT_BASE
(
FT_Long
)
FT_MulDiv_No_Round
(
FT_Long
a
FT_Long
b
FT_Long
c
)
;
FT_BASE
(
void
)
FT_Matrix_Multiply_Scaled
(
const
FT_Matrix
*
a
FT_Matrix
*
b
FT_Long
scaling
)
;
FT_BASE
(
FT_Bool
)
FT_Matrix_Check
(
const
FT_Matrix
*
matrix
)
;
FT_BASE
(
void
)
FT_Vector_Transform_Scaled
(
FT_Vector
*
vector
const
FT_Matrix
*
matrix
FT_Long
scaling
)
;
FT_BASE
(
FT_UInt32
)
FT_Vector_NormLen
(
FT_Vector
*
vector
)
;
FT_BASE
(
FT_Int
)
ft_corner_orientation
(
FT_Pos
in_x
FT_Pos
in_y
FT_Pos
out_x
FT_Pos
out_y
)
;
FT_BASE
(
FT_Int
)
ft_corner_is_flat
(
FT_Pos
in_x
FT_Pos
in_y
FT_Pos
out_x
FT_Pos
out_y
)
;
#
ifndef
FT_CONFIG_OPTION_NO_ASSEMBLER
#
if
defined
(
__clang__
)
|
|
(
defined
(
__GNUC__
)
&
&
\
(
__GNUC__
>
3
|
|
(
__GNUC__
=
=
3
&
&
__GNUC_MINOR__
>
=
4
)
)
)
#
if
FT_SIZEOF_INT
=
=
4
#
define
FT_MSB
(
x
)
(
31
-
__builtin_clz
(
x
)
)
#
elif
FT_SIZEOF_LONG
=
=
4
#
define
FT_MSB
(
x
)
(
31
-
__builtin_clzl
(
x
)
)
#
endif
#
elif
defined
(
_MSC_VER
)
&
&
_MSC_VER
>
=
1400
#
if
defined
(
_WIN32_WCE
)
#
include
<
cmnintrin
.
h
>
#
pragma
intrinsic
(
_CountLeadingZeros
)
#
define
FT_MSB
(
x
)
(
31
-
_CountLeadingZeros
(
x
)
)
#
elif
defined
(
_M_ARM64
)
|
|
defined
(
_M_ARM
)
|
|
defined
(
_M_ARM64EC
)
#
include
<
intrin
.
h
>
#
pragma
intrinsic
(
_CountLeadingZeros
)
#
define
FT_MSB
(
x
)
(
31
-
_CountLeadingZeros
(
x
)
)
#
elif
defined
(
_M_IX86
)
|
|
defined
(
_M_AMD64
)
|
|
defined
(
_M_IA64
)
#
include
<
intrin
.
h
>
#
pragma
intrinsic
(
_BitScanReverse
)
static
__inline
FT_Int32
FT_MSB_i386
(
FT_UInt32
x
)
{
unsigned
long
where
;
_BitScanReverse
(
&
where
x
)
;
return
(
FT_Int32
)
where
;
}
#
define
FT_MSB
(
x
)
FT_MSB_i386
(
x
)
#
endif
#
elif
defined
(
__WATCOMC__
)
&
&
defined
(
__386__
)
extern
__inline
FT_Int32
FT_MSB_i386
(
FT_UInt32
x
)
;
#
pragma
aux
FT_MSB_i386
=
\
"
bsr
eax
eax
"
\
__parm
[
__eax
]
__nomemory
\
__value
[
__eax
]
\
__modify
__exact
[
__eax
]
__nomemory
;
#
define
FT_MSB
(
x
)
FT_MSB_i386
(
x
)
#
elif
defined
(
__CC_ARM
)
#
define
FT_MSB
(
x
)
(
31
-
__clz
(
x
)
)
#
elif
defined
(
__SunOS_5_11
)
#
include
<
string
.
h
>
#
define
FT_MSB
(
x
)
(
fls
(
x
)
-
1
)
#
elif
defined
(
__DECC
)
|
|
defined
(
__DECCXX
)
#
include
<
builtins
.
h
>
#
define
FT_MSB
(
x
)
(
FT_Int
)
(
63
-
_leadz
(
x
)
)
#
elif
defined
(
_CRAYC
)
#
include
<
intrinsics
.
h
>
#
define
FT_MSB
(
x
)
(
FT_Int
)
(
31
-
_leadz32
(
x
)
)
#
endif
#
endif
#
ifndef
FT_MSB
FT_BASE
(
FT_Int
)
FT_MSB
(
FT_UInt32
z
)
;
#
endif
FT_BASE
(
FT_Fixed
)
FT_Hypot
(
FT_Fixed
x
FT_Fixed
y
)
;
FT_BASE
(
FT_UInt32
)
FT_SqrtFixed
(
FT_UInt32
x
)
;
#
define
INT_TO_F26DOT6
(
x
)
(
(
FT_Long
)
(
x
)
*
64
)
/
*
<
<
6
*
/
#
define
INT_TO_F2DOT14
(
x
)
(
(
FT_Long
)
(
x
)
*
16384
)
/
*
<
<
14
*
/
#
define
INT_TO_FIXED
(
x
)
(
(
FT_Long
)
(
x
)
*
65536
)
/
*
<
<
16
*
/
#
define
F2DOT14_TO_FIXED
(
x
)
(
(
FT_Long
)
(
x
)
*
4
)
/
*
<
<
2
*
/
#
define
FIXED_TO_INT
(
x
)
(
FT_RoundFix
(
x
)
>
>
16
)
#
define
ROUND_F26DOT6
(
x
)
(
(
(
x
)
+
32
-
(
x
<
0
)
)
&
-
64
)
FT_END_HEADER
#
endif
