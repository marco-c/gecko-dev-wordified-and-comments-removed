#
ifndef
AFTYPES_H_
#
define
AFTYPES_H_
#
include
<
freetype
/
freetype
.
h
>
#
include
<
freetype
/
ftoutln
.
h
>
#
include
<
freetype
/
internal
/
ftobjs
.
h
>
#
include
<
freetype
/
internal
/
ftdebug
.
h
>
#
include
"
afblue
.
h
"
#
ifdef
FT_DEBUG_AUTOFIT
#
include
FT_CONFIG_STANDARD_LIBRARY_H
#
endif
FT_BEGIN_HEADER
#
ifdef
FT_DEBUG_AUTOFIT
extern
int
af_debug_disable_horz_hints_
;
extern
int
af_debug_disable_vert_hints_
;
extern
int
af_debug_disable_blue_hints_
;
extern
void
*
af_debug_hints_
;
#
endif
typedef
struct
AF_WidthRec_
{
FT_Pos
org
;
FT_Pos
cur
;
FT_Pos
fit
;
}
AF_WidthRec
*
AF_Width
;
FT_LOCAL
(
void
)
af_sort_pos
(
FT_UInt
count
FT_Pos
*
table
)
;
FT_LOCAL
(
void
)
af_sort_and_quantize_widths
(
FT_UInt
*
count
AF_Width
widths
FT_Pos
threshold
)
;
typedef
struct
AF_GlyphHintsRec_
*
AF_GlyphHints
;
#
define
AF_SCALER_FLAG_NO_HORIZONTAL
1U
/
*
disable
horizontal
hinting
*
/
#
define
AF_SCALER_FLAG_NO_VERTICAL
2U
/
*
disable
vertical
hinting
*
/
#
define
AF_SCALER_FLAG_NO_ADVANCE
4U
/
*
disable
advance
hinting
*
/
typedef
struct
AF_ScalerRec_
{
FT_Face
face
;
FT_Fixed
x_scale
;
FT_Fixed
y_scale
;
FT_Pos
x_delta
;
FT_Pos
y_delta
;
FT_Render_Mode
render_mode
;
FT_UInt32
flags
;
}
AF_ScalerRec
*
AF_Scaler
;
#
define
AF_SCALER_EQUAL_SCALES
(
a
b
)
\
(
(
a
)
-
>
x_scale
=
=
(
b
)
-
>
x_scale
&
&
\
(
a
)
-
>
y_scale
=
=
(
b
)
-
>
y_scale
&
&
\
(
a
)
-
>
x_delta
=
=
(
b
)
-
>
x_delta
&
&
\
(
a
)
-
>
y_delta
=
=
(
b
)
-
>
y_delta
)
typedef
struct
AF_StyleMetricsRec_
*
AF_StyleMetrics
;
typedef
FT_Error
(
*
AF_WritingSystem_InitMetricsFunc
)
(
AF_StyleMetrics
metrics
FT_Face
face
)
;
typedef
void
(
*
AF_WritingSystem_ScaleMetricsFunc
)
(
AF_StyleMetrics
metrics
AF_Scaler
scaler
)
;
typedef
void
(
*
AF_WritingSystem_DoneMetricsFunc
)
(
AF_StyleMetrics
metrics
)
;
typedef
void
(
*
AF_WritingSystem_GetStdWidthsFunc
)
(
AF_StyleMetrics
metrics
FT_Pos
*
stdHW
FT_Pos
*
stdVW
)
;
typedef
FT_Error
(
*
AF_WritingSystem_InitHintsFunc
)
(
AF_GlyphHints
hints
AF_StyleMetrics
metrics
)
;
typedef
FT_Error
(
*
AF_WritingSystem_ApplyHintsFunc
)
(
FT_UInt
glyph_index
AF_GlyphHints
hints
FT_Outline
*
outline
AF_StyleMetrics
metrics
)
;
#
undef
WRITING_SYSTEM
#
define
WRITING_SYSTEM
(
ws
WS
)
\
AF_WRITING_SYSTEM_
#
#
WS
typedef
enum
AF_WritingSystem_
{
#
include
"
afws
-
iter
.
h
"
AF_WRITING_SYSTEM_MAX
}
AF_WritingSystem
;
typedef
struct
AF_WritingSystemClassRec_
{
AF_WritingSystem
writing_system
;
FT_Offset
style_metrics_size
;
AF_WritingSystem_InitMetricsFunc
style_metrics_init
;
AF_WritingSystem_ScaleMetricsFunc
style_metrics_scale
;
AF_WritingSystem_DoneMetricsFunc
style_metrics_done
;
AF_WritingSystem_GetStdWidthsFunc
style_metrics_getstdw
;
AF_WritingSystem_InitHintsFunc
style_hints_init
;
AF_WritingSystem_ApplyHintsFunc
style_hints_apply
;
}
AF_WritingSystemClassRec
;
typedef
const
AF_WritingSystemClassRec
*
AF_WritingSystemClass
;
#
undef
SCRIPT
#
define
SCRIPT
(
s
S
d
h
H
ss
)
\
AF_SCRIPT_
#
#
S
typedef
enum
AF_Script_
{
#
include
"
afscript
.
h
"
AF_SCRIPT_MAX
}
AF_Script
;
typedef
struct
AF_Script_UniRangeRec_
{
FT_UInt32
first
;
FT_UInt32
last
;
}
AF_Script_UniRangeRec
;
#
define
AF_UNIRANGE_REC
(
a
b
)
{
(
FT_UInt32
)
(
a
)
(
FT_UInt32
)
(
b
)
}
typedef
const
AF_Script_UniRangeRec
*
AF_Script_UniRange
;
typedef
struct
AF_ScriptClassRec_
{
AF_Script
script
;
AF_Script_UniRange
script_uni_ranges
;
AF_Script_UniRange
script_uni_nonbase_ranges
;
FT_Bool
top_to_bottom_hinting
;
const
char
*
standard_charstring
;
}
AF_ScriptClassRec
;
typedef
const
AF_ScriptClassRec
*
AF_ScriptClass
;
#
undef
COVERAGE
#
define
COVERAGE
(
name
NAME
description
\
tag1
tag2
tag3
tag4
)
\
AF_COVERAGE_
#
#
NAME
typedef
enum
AF_Coverage_
{
#
include
"
afcover
.
h
"
AF_COVERAGE_DEFAULT
}
AF_Coverage
;
#
undef
STYLE
#
define
STYLE
(
s
S
d
ws
sc
ss
c
)
\
AF_STYLE_
#
#
S
typedef
enum
AF_Style_
{
#
include
"
afstyles
.
h
"
AF_STYLE_MAX
}
AF_Style
;
typedef
struct
AF_StyleClassRec_
{
AF_Style
style
;
AF_WritingSystem
writing_system
;
AF_Script
script
;
AF_Blue_Stringset
blue_stringset
;
AF_Coverage
coverage
;
}
AF_StyleClassRec
;
typedef
const
AF_StyleClassRec
*
AF_StyleClass
;
typedef
struct
AF_FaceGlobalsRec_
*
AF_FaceGlobals
;
typedef
struct
AF_StyleMetricsRec_
{
AF_StyleClass
style_class
;
AF_ScalerRec
scaler
;
FT_Bool
digits_have_same_width
;
AF_FaceGlobals
globals
;
}
AF_StyleMetricsRec
;
#
define
AF_HINTING_BOTTOM_TO_TOP
0
#
define
AF_HINTING_TOP_TO_BOTTOM
1
#
define
AF_DECLARE_WRITING_SYSTEM_CLASS
(
writing_system_class
)
\
FT_CALLBACK_TABLE
const
AF_WritingSystemClassRec
\
writing_system_class
;
#
define
AF_DEFINE_WRITING_SYSTEM_CLASS
(
\
writing_system_class
\
system
\
m_size
\
m_init
\
m_scale
\
m_done
\
m_stdw
\
h_init
\
h_apply
)
\
FT_CALLBACK_TABLE_DEF
\
const
AF_WritingSystemClassRec
writing_system_class
=
\
{
\
system
\
\
m_size
\
\
m_init
\
m_scale
\
m_done
\
m_stdw
\
\
h_init
\
h_apply
\
}
;
#
define
AF_DECLARE_SCRIPT_CLASS
(
script_class
)
\
FT_CALLBACK_TABLE
const
AF_ScriptClassRec
\
script_class
;
#
define
AF_DEFINE_SCRIPT_CLASS
(
\
script_class
\
script
\
ranges
\
nonbase_ranges
\
top_to_bottom
\
std_charstring
)
\
FT_CALLBACK_TABLE_DEF
\
const
AF_ScriptClassRec
script_class
=
\
{
\
script
\
ranges
\
nonbase_ranges
\
top_to_bottom
\
std_charstring
\
}
;
#
define
AF_DECLARE_STYLE_CLASS
(
style_class
)
\
FT_CALLBACK_TABLE
const
AF_StyleClassRec
\
style_class
;
#
define
AF_DEFINE_STYLE_CLASS
(
\
style_class
\
style
\
writing_system
\
script
\
blue_stringset
\
coverage
)
\
FT_CALLBACK_TABLE_DEF
\
const
AF_StyleClassRec
style_class
=
\
{
\
style
\
writing_system
\
script
\
blue_stringset
\
coverage
\
}
;
FT_END_HEADER
#
endif
