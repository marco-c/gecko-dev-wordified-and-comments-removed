#
ifndef
BDF_H_
#
define
BDF_H_
#
include
<
freetype
/
internal
/
ftobjs
.
h
>
#
include
<
freetype
/
internal
/
ftstream
.
h
>
#
include
<
freetype
/
internal
/
fthash
.
h
>
FT_BEGIN_HEADER
#
define
_bdf_glyph_modified
(
map
e
)
\
(
(
map
)
[
(
e
)
>
>
5
]
&
(
1UL
<
<
(
(
e
)
&
31
)
)
)
#
define
_bdf_set_glyph_modified
(
map
e
)
\
(
(
map
)
[
(
e
)
>
>
5
]
|
=
(
1UL
<
<
(
(
e
)
&
31
)
)
)
#
define
_bdf_clear_glyph_modified
(
map
e
)
\
(
(
map
)
[
(
e
)
>
>
5
]
&
=
~
(
1UL
<
<
(
(
e
)
&
31
)
)
)
#
define
BDF_CORRECT_METRICS
0x1000
/
*
Correct
metrics
when
loading
.
*
/
#
define
BDF_KEEP_COMMENTS
0x2000
/
*
Preserve
the
font
comments
.
*
/
#
define
BDF_KEEP_UNENCODED
0x4000
/
*
Keep
the
unencoded
glyphs
.
*
/
#
define
BDF_PROPORTIONAL
0x08
/
*
Font
has
proportional
spacing
.
*
/
#
define
BDF_MONOWIDTH
0x10
/
*
Font
has
mono
width
.
*
/
#
define
BDF_CHARCELL
0x20
/
*
Font
has
charcell
spacing
.
*
/
#
define
BDF_ATOM
1
#
define
BDF_INTEGER
2
#
define
BDF_CARDINAL
3
typedef
struct
bdf_property_t_
{
const
char
*
name
;
int
format
;
int
builtin
;
union
{
char
*
atom
;
long
l
;
unsigned
long
ul
;
}
value
;
}
bdf_property_t
;
typedef
struct
bdf_bbx_t_
{
unsigned
short
width
;
unsigned
short
height
;
short
x_offset
;
short
y_offset
;
short
ascent
;
short
descent
;
}
bdf_bbx_t
;
typedef
struct
bdf_glyph_t_
{
char
*
name
;
unsigned
long
encoding
;
unsigned
short
swidth
;
unsigned
short
dwidth
;
bdf_bbx_t
bbx
;
unsigned
char
*
bitmap
;
unsigned
long
bpr
;
unsigned
short
bytes
;
}
bdf_glyph_t
;
typedef
struct
bdf_font_t_
{
char
*
name
;
bdf_bbx_t
bbx
;
unsigned
long
point_size
;
unsigned
long
resolution_x
;
unsigned
long
resolution_y
;
int
spacing
;
unsigned
long
default_char
;
long
font_ascent
;
long
font_descent
;
unsigned
long
glyphs_size
;
unsigned
long
glyphs_used
;
bdf_glyph_t
*
glyphs
;
unsigned
long
unencoded_size
;
unsigned
long
unencoded_used
;
bdf_glyph_t
*
unencoded
;
unsigned
long
props_size
;
unsigned
long
props_used
;
bdf_property_t
*
props
;
char
*
comments
;
unsigned
long
comments_len
;
FT_Hash
internal
;
unsigned
short
bpp
;
FT_Memory
memory
;
bdf_property_t
*
user_props
;
unsigned
long
nuser_props
;
FT_HashRec
proptbl
;
}
bdf_font_t
;
#
define
BDF_MISSING_START
-
1
#
define
BDF_MISSING_FONTNAME
-
2
#
define
BDF_MISSING_SIZE
-
3
#
define
BDF_MISSING_CHARS
-
4
#
define
BDF_MISSING_STARTCHAR
-
5
#
define
BDF_MISSING_ENCODING
-
6
#
define
BDF_MISSING_BBX
-
7
#
define
BDF_OUT_OF_MEMORY
-
20
#
define
BDF_INVALID_LINE
-
100
FT_LOCAL
(
FT_Error
)
bdf_load_font
(
FT_Stream
stream
FT_Memory
memory
unsigned
long
flags
bdf_font_t
*
*
font
)
;
FT_LOCAL
(
void
)
bdf_free_font
(
bdf_font_t
*
font
)
;
FT_LOCAL
(
bdf_property_t
*
)
bdf_get_font_property
(
bdf_font_t
*
font
const
char
*
name
)
;
FT_END_HEADER
#
endif
