#
ifndef
BROTLI_ENC_BACKWARD_REFERENCES_H_
#
define
BROTLI_ENC_BACKWARD_REFERENCES_H_
#
include
<
vector
>
#
include
"
.
/
hash
.
h
"
#
include
"
.
/
command
.
h
"
#
include
"
.
/
types
.
h
"
namespace
brotli
{
void
CreateBackwardReferences
(
size_t
num_bytes
size_t
position
bool
is_last
const
uint8_t
*
ringbuffer
size_t
ringbuffer_mask
const
int
quality
const
int
lgwin
Hashers
*
hashers
int
hash_type
int
*
dist_cache
size_t
*
last_insert_len
Command
*
commands
size_t
*
num_commands
size_t
*
num_literals
)
;
static
const
float
kInfinity
=
std
:
:
numeric_limits
<
float
>
:
:
infinity
(
)
;
struct
ZopfliNode
{
ZopfliNode
(
void
)
:
length
(
1
)
distance
(
0
)
insert_length
(
0
)
cost
(
kInfinity
)
{
}
inline
uint32_t
copy_length
(
)
const
{
return
length
&
0xffffff
;
}
inline
uint32_t
length_code
(
)
const
{
const
uint32_t
modifier
=
length
>
>
24
;
return
copy_length
(
)
+
9u
-
modifier
;
}
inline
uint32_t
copy_distance
(
)
const
{
return
distance
&
0x1ffffff
;
}
inline
uint32_t
distance_code
(
)
const
{
const
uint32_t
short_code
=
distance
>
>
25
;
return
short_code
=
=
0
?
copy_distance
(
)
+
15
:
short_code
-
1
;
}
inline
uint32_t
command_length
(
)
const
{
return
copy_length
(
)
+
insert_length
;
}
uint32_t
length
;
uint32_t
distance
;
uint32_t
insert_length
;
float
cost
;
}
;
void
ZopfliComputeShortestPath
(
size_t
num_bytes
size_t
position
const
uint8_t
*
ringbuffer
size_t
ringbuffer_mask
const
size_t
max_backward_limit
const
int
*
dist_cache
Hashers
:
:
H10
*
hasher
ZopfliNode
*
nodes
std
:
:
vector
<
uint32_t
>
*
path
)
;
void
ZopfliCreateCommands
(
const
size_t
num_bytes
const
size_t
block_start
const
size_t
max_backward_limit
const
std
:
:
vector
<
uint32_t
>
&
path
const
ZopfliNode
*
nodes
int
*
dist_cache
size_t
*
last_insert_len
Command
*
commands
size_t
*
num_literals
)
;
}
#
endif
