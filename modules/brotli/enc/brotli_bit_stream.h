#
ifndef
BROTLI_ENC_BROTLI_BIT_STREAM_H_
#
define
BROTLI_ENC_BROTLI_BIT_STREAM_H_
#
include
<
vector
>
#
include
"
.
/
entropy_encode
.
h
"
#
include
"
.
/
metablock
.
h
"
#
include
"
.
/
types
.
h
"
namespace
brotli
{
void
StoreVarLenUint8
(
size_t
n
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
StoreCompressedMetaBlockHeader
(
bool
final_block
size_t
length
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
StoreUncompressedMetaBlockHeader
(
size_t
length
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
StoreTrivialContextMap
(
size_t
num_types
size_t
context_bits
HuffmanTree
*
tree
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
StoreHuffmanTreeOfHuffmanTreeToBitMask
(
const
int
num_codes
const
uint8_t
*
code_length_bitdepth
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
StoreHuffmanTree
(
const
uint8_t
*
depths
size_t
num
HuffmanTree
*
tree
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
BuildAndStoreHuffmanTree
(
const
uint32_t
*
histogram
const
size_t
length
HuffmanTree
*
tree
uint8_t
*
depth
uint16_t
*
bits
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
BuildAndStoreHuffmanTreeFast
(
const
uint32_t
*
histogram
const
size_t
histogram_total
const
size_t
max_bits
uint8_t
*
depth
uint16_t
*
bits
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
EncodeContextMap
(
const
std
:
:
vector
<
uint32_t
>
&
context_map
size_t
num_clusters
HuffmanTree
*
tree
size_t
*
storage_ix
uint8_t
*
storage
)
;
struct
BlockSplitCode
{
std
:
:
vector
<
uint32_t
>
type_code
;
std
:
:
vector
<
uint32_t
>
length_prefix
;
std
:
:
vector
<
uint32_t
>
length_nextra
;
std
:
:
vector
<
uint32_t
>
length_extra
;
std
:
:
vector
<
uint8_t
>
type_depths
;
std
:
:
vector
<
uint16_t
>
type_bits
;
uint8_t
length_depths
[
kNumBlockLenPrefixes
]
;
uint16_t
length_bits
[
kNumBlockLenPrefixes
]
;
}
;
void
BuildAndStoreBlockSplitCode
(
const
std
:
:
vector
<
uint8_t
>
&
types
const
std
:
:
vector
<
uint32_t
>
&
lengths
const
size_t
num_types
BlockSplitCode
*
code
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
StoreBlockSwitch
(
const
BlockSplitCode
&
code
const
size_t
block_ix
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
StoreMetaBlock
(
const
uint8_t
*
input
size_t
start_pos
size_t
length
size_t
mask
uint8_t
prev_byte
uint8_t
prev_byte2
bool
final_block
uint32_t
num_direct_distance_codes
uint32_t
distance_postfix_bits
ContextType
literal_context_mode
const
brotli
:
:
Command
*
commands
size_t
n_commands
const
MetaBlockSplit
&
mb
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
StoreMetaBlockTrivial
(
const
uint8_t
*
input
size_t
start_pos
size_t
length
size_t
mask
bool
is_last
const
brotli
:
:
Command
*
commands
size_t
n_commands
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
StoreMetaBlockFast
(
const
uint8_t
*
input
size_t
start_pos
size_t
length
size_t
mask
bool
is_last
const
brotli
:
:
Command
*
commands
size_t
n_commands
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
StoreUncompressedMetaBlock
(
bool
final_block
const
uint8_t
*
input
size_t
position
size_t
mask
size_t
len
size_t
*
storage_ix
uint8_t
*
storage
)
;
void
StoreSyncMetaBlock
(
size_t
*
storage_ix
uint8_t
*
storage
)
;
}
#
endif
