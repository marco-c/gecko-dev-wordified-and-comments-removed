static
BROTLI_NOINLINE
void
FN
(
CreateBackwardReferences
)
(
const
BrotliDictionary
*
dictionary
const
uint16_t
*
dictionary_hash
size_t
num_bytes
size_t
position
const
uint8_t
*
ringbuffer
size_t
ringbuffer_mask
const
BrotliEncoderParams
*
params
HasherHandle
hasher
int
*
dist_cache
size_t
*
last_insert_len
Command
*
commands
size_t
*
num_commands
size_t
*
num_literals
)
{
const
size_t
max_backward_limit
=
BROTLI_MAX_BACKWARD_LIMIT
(
params
-
>
lgwin
)
;
const
Command
*
const
orig_commands
=
commands
;
size_t
insert_length
=
*
last_insert_len
;
const
size_t
pos_end
=
position
+
num_bytes
;
const
size_t
store_end
=
num_bytes
>
=
FN
(
StoreLookahead
)
(
)
?
position
+
num_bytes
-
FN
(
StoreLookahead
)
(
)
+
1
:
position
;
const
size_t
random_heuristics_window_size
=
LiteralSpreeLengthForSparseSearch
(
params
)
;
size_t
apply_random_heuristics
=
position
+
random_heuristics_window_size
;
const
score_t
kMinScore
=
BROTLI_SCORE_BASE
+
100
;
FN
(
PrepareDistanceCache
)
(
hasher
dist_cache
)
;
while
(
position
+
FN
(
HashTypeLength
)
(
)
<
pos_end
)
{
size_t
max_length
=
pos_end
-
position
;
size_t
max_distance
=
BROTLI_MIN
(
size_t
position
max_backward_limit
)
;
HasherSearchResult
sr
;
sr
.
len
=
0
;
sr
.
len_x_code
=
0
;
sr
.
distance
=
0
;
sr
.
score
=
kMinScore
;
if
(
FN
(
FindLongestMatch
)
(
hasher
dictionary
dictionary_hash
ringbuffer
ringbuffer_mask
dist_cache
position
max_length
max_distance
&
sr
)
)
{
int
delayed_backward_references_in_row
=
0
;
-
-
max_length
;
for
(
;
;
-
-
max_length
)
{
const
score_t
cost_diff_lazy
=
175
;
BROTLI_BOOL
is_match_found
;
HasherSearchResult
sr2
;
sr2
.
len
=
params
-
>
quality
<
MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH
?
BROTLI_MIN
(
size_t
sr
.
len
-
1
max_length
)
:
0
;
sr2
.
len_x_code
=
0
;
sr2
.
distance
=
0
;
sr2
.
score
=
kMinScore
;
max_distance
=
BROTLI_MIN
(
size_t
position
+
1
max_backward_limit
)
;
is_match_found
=
FN
(
FindLongestMatch
)
(
hasher
dictionary
dictionary_hash
ringbuffer
ringbuffer_mask
dist_cache
position
+
1
max_length
max_distance
&
sr2
)
;
if
(
is_match_found
&
&
sr2
.
score
>
=
sr
.
score
+
cost_diff_lazy
)
{
+
+
position
;
+
+
insert_length
;
sr
=
sr2
;
if
(
+
+
delayed_backward_references_in_row
<
4
&
&
position
+
FN
(
HashTypeLength
)
(
)
<
pos_end
)
{
continue
;
}
}
break
;
}
apply_random_heuristics
=
position
+
2
*
sr
.
len
+
random_heuristics_window_size
;
max_distance
=
BROTLI_MIN
(
size_t
position
max_backward_limit
)
;
{
size_t
distance_code
=
ComputeDistanceCode
(
sr
.
distance
max_distance
dist_cache
)
;
if
(
sr
.
distance
<
=
max_distance
&
&
distance_code
>
0
)
{
dist_cache
[
3
]
=
dist_cache
[
2
]
;
dist_cache
[
2
]
=
dist_cache
[
1
]
;
dist_cache
[
1
]
=
dist_cache
[
0
]
;
dist_cache
[
0
]
=
(
int
)
sr
.
distance
;
FN
(
PrepareDistanceCache
)
(
hasher
dist_cache
)
;
}
InitCommand
(
commands
+
+
insert_length
sr
.
len
sr
.
len
^
sr
.
len_x_code
distance_code
)
;
}
*
num_literals
+
=
insert_length
;
insert_length
=
0
;
FN
(
StoreRange
)
(
hasher
ringbuffer
ringbuffer_mask
position
+
2
BROTLI_MIN
(
size_t
position
+
sr
.
len
store_end
)
)
;
position
+
=
sr
.
len
;
}
else
{
+
+
insert_length
;
+
+
position
;
if
(
position
>
apply_random_heuristics
)
{
if
(
position
>
apply_random_heuristics
+
4
*
random_heuristics_window_size
)
{
const
size_t
kMargin
=
BROTLI_MAX
(
size_t
FN
(
StoreLookahead
)
(
)
-
1
4
)
;
size_t
pos_jump
=
BROTLI_MIN
(
size_t
position
+
16
pos_end
-
kMargin
)
;
for
(
;
position
<
pos_jump
;
position
+
=
4
)
{
FN
(
Store
)
(
hasher
ringbuffer
ringbuffer_mask
position
)
;
insert_length
+
=
4
;
}
}
else
{
const
size_t
kMargin
=
BROTLI_MAX
(
size_t
FN
(
StoreLookahead
)
(
)
-
1
2
)
;
size_t
pos_jump
=
BROTLI_MIN
(
size_t
position
+
8
pos_end
-
kMargin
)
;
for
(
;
position
<
pos_jump
;
position
+
=
2
)
{
FN
(
Store
)
(
hasher
ringbuffer
ringbuffer_mask
position
)
;
insert_length
+
=
2
;
}
}
}
}
}
insert_length
+
=
pos_end
-
position
;
*
last_insert_len
=
insert_length
;
*
num_commands
+
=
(
size_t
)
(
commands
-
orig_commands
)
;
}
