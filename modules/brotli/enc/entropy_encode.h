#
ifndef
BROTLI_ENC_ENTROPY_ENCODE_H_
#
define
BROTLI_ENC_ENTROPY_ENCODE_H_
#
include
<
string
.
h
>
#
include
"
.
/
histogram
.
h
"
#
include
"
.
/
prefix
.
h
"
#
include
"
.
/
types
.
h
"
namespace
brotli
{
struct
HuffmanTree
{
HuffmanTree
(
)
{
}
HuffmanTree
(
uint32_t
count
int16_t
left
int16_t
right
)
:
total_count_
(
count
)
index_left_
(
left
)
index_right_or_value_
(
right
)
{
}
uint32_t
total_count_
;
int16_t
index_left_
;
int16_t
index_right_or_value_
;
}
;
void
SetDepth
(
const
HuffmanTree
&
p
HuffmanTree
*
pool
uint8_t
*
depth
uint8_t
level
)
;
void
CreateHuffmanTree
(
const
uint32_t
*
data
const
size_t
length
const
int
tree_limit
HuffmanTree
*
tree
uint8_t
*
depth
)
;
void
OptimizeHuffmanCountsForRle
(
size_t
length
uint32_t
*
counts
uint8_t
*
good_for_rle
)
;
void
WriteHuffmanTree
(
const
uint8_t
*
depth
size_t
num
size_t
*
tree_size
uint8_t
*
tree
uint8_t
*
extra_bits_data
)
;
void
ConvertBitDepthsToSymbols
(
const
uint8_t
*
depth
size_t
len
uint16_t
*
bits
)
;
template
<
int
kSize
>
struct
EntropyCode
{
uint8_t
depth_
[
kSize
]
;
uint16_t
bits_
[
kSize
]
;
int
count_
;
int
symbols_
[
4
]
;
}
;
static
const
int
kCodeLengthCodes
=
18
;
typedef
EntropyCode
<
256
>
EntropyCodeLiteral
;
typedef
EntropyCode
<
kNumCommandPrefixes
>
EntropyCodeCommand
;
typedef
EntropyCode
<
kNumDistancePrefixes
>
EntropyCodeDistance
;
typedef
EntropyCode
<
kNumBlockLenPrefixes
>
EntropyCodeBlockLength
;
typedef
EntropyCode
<
272
>
EntropyCodeContextMap
;
typedef
EntropyCode
<
258
>
EntropyCodeBlockType
;
}
#
endif
