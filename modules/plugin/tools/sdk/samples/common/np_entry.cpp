#
include
"
npplat
.
h
"
#
include
"
pluginbase
.
h
"
NPNetscapeFuncs
NPNFuncs
;
NPError
OSCALL
NP_Shutdown
(
)
{
NS_PluginShutdown
(
)
;
return
NPERR_NO_ERROR
;
}
static
NPError
fillPluginFunctionTable
(
NPPluginFuncs
*
aNPPFuncs
)
{
if
(
aNPPFuncs
=
=
NULL
)
return
NPERR_INVALID_FUNCTABLE_ERROR
;
aNPPFuncs
-
>
version
=
(
NP_VERSION_MAJOR
<
<
8
)
|
NP_VERSION_MINOR
;
#
ifdef
XP_MAC
aNPPFuncs
-
>
newp
=
NewNPP_NewProc
(
Private_New
)
;
aNPPFuncs
-
>
destroy
=
NewNPP_DestroyProc
(
Private_Destroy
)
;
aNPPFuncs
-
>
setwindow
=
NewNPP_SetWindowProc
(
Private_SetWindow
)
;
aNPPFuncs
-
>
newstream
=
NewNPP_NewStreamProc
(
Private_NewStream
)
;
aNPPFuncs
-
>
destroystream
=
NewNPP_DestroyStreamProc
(
Private_DestroyStream
)
;
aNPPFuncs
-
>
asfile
=
NewNPP_StreamAsFileProc
(
Private_StreamAsFile
)
;
aNPPFuncs
-
>
writeready
=
NewNPP_WriteReadyProc
(
Private_WriteReady
)
;
aNPPFuncs
-
>
write
=
NewNPP_WriteProc
(
Private_Write
)
;
aNPPFuncs
-
>
print
=
NewNPP_PrintProc
(
Private_Print
)
;
aNPPFuncs
-
>
event
=
NewNPP_HandleEventProc
(
Private_HandleEvent
)
;
aNPPFuncs
-
>
urlnotify
=
NewNPP_URLNotifyProc
(
Private_URLNotify
)
;
aNPPFuncs
-
>
getvalue
=
NewNPP_GetValueProc
(
Private_GetValue
)
;
aNPPFuncs
-
>
setvalue
=
NewNPP_SetValueProc
(
Private_SetValue
)
;
#
else
aNPPFuncs
-
>
newp
=
NPP_New
;
aNPPFuncs
-
>
destroy
=
NPP_Destroy
;
aNPPFuncs
-
>
setwindow
=
NPP_SetWindow
;
aNPPFuncs
-
>
newstream
=
NPP_NewStream
;
aNPPFuncs
-
>
destroystream
=
NPP_DestroyStream
;
aNPPFuncs
-
>
asfile
=
NPP_StreamAsFile
;
aNPPFuncs
-
>
writeready
=
NPP_WriteReady
;
aNPPFuncs
-
>
write
=
NPP_Write
;
aNPPFuncs
-
>
print
=
NPP_Print
;
aNPPFuncs
-
>
event
=
NPP_HandleEvent
;
aNPPFuncs
-
>
urlnotify
=
NPP_URLNotify
;
aNPPFuncs
-
>
getvalue
=
NPP_GetValue
;
aNPPFuncs
-
>
setvalue
=
NPP_SetValue
;
#
endif
return
NPERR_NO_ERROR
;
}
static
NPError
fillNetscapeFunctionTable
(
NPNetscapeFuncs
*
aNPNFuncs
)
{
if
(
aNPNFuncs
=
=
NULL
)
return
NPERR_INVALID_FUNCTABLE_ERROR
;
if
(
HIBYTE
(
aNPNFuncs
-
>
version
)
>
NP_VERSION_MAJOR
)
return
NPERR_INCOMPATIBLE_VERSION_ERROR
;
if
(
aNPNFuncs
-
>
size
<
sizeof
(
NPNetscapeFuncs
)
)
return
NPERR_INVALID_FUNCTABLE_ERROR
;
NPNFuncs
.
size
=
aNPNFuncs
-
>
size
;
NPNFuncs
.
version
=
aNPNFuncs
-
>
version
;
NPNFuncs
.
geturlnotify
=
aNPNFuncs
-
>
geturlnotify
;
NPNFuncs
.
geturl
=
aNPNFuncs
-
>
geturl
;
NPNFuncs
.
posturlnotify
=
aNPNFuncs
-
>
posturlnotify
;
NPNFuncs
.
posturl
=
aNPNFuncs
-
>
posturl
;
NPNFuncs
.
requestread
=
aNPNFuncs
-
>
requestread
;
NPNFuncs
.
newstream
=
aNPNFuncs
-
>
newstream
;
NPNFuncs
.
write
=
aNPNFuncs
-
>
write
;
NPNFuncs
.
destroystream
=
aNPNFuncs
-
>
destroystream
;
NPNFuncs
.
status
=
aNPNFuncs
-
>
status
;
NPNFuncs
.
uagent
=
aNPNFuncs
-
>
uagent
;
NPNFuncs
.
memalloc
=
aNPNFuncs
-
>
memalloc
;
NPNFuncs
.
memfree
=
aNPNFuncs
-
>
memfree
;
NPNFuncs
.
memflush
=
aNPNFuncs
-
>
memflush
;
NPNFuncs
.
reloadplugins
=
aNPNFuncs
-
>
reloadplugins
;
NPNFuncs
.
getvalue
=
aNPNFuncs
-
>
getvalue
;
NPNFuncs
.
setvalue
=
aNPNFuncs
-
>
setvalue
;
NPNFuncs
.
invalidaterect
=
aNPNFuncs
-
>
invalidaterect
;
NPNFuncs
.
invalidateregion
=
aNPNFuncs
-
>
invalidateregion
;
NPNFuncs
.
forceredraw
=
aNPNFuncs
-
>
forceredraw
;
return
NPERR_NO_ERROR
;
}
#
ifdef
XP_WIN
NPError
OSCALL
NP_Initialize
(
NPNetscapeFuncs
*
aNPNFuncs
)
{
NPError
rv
=
fillNetscapeFunctionTable
(
aNPNFuncs
)
;
if
(
rv
!
=
NPERR_NO_ERROR
)
return
rv
;
return
NS_PluginInitialize
(
)
;
}
NPError
OSCALL
NP_GetEntryPoints
(
NPPluginFuncs
*
aNPPFuncs
)
{
return
fillPluginFunctionTable
(
aNPPFuncs
)
;
}
#
endif
#
ifdef
XP_UNIX
NPError
NP_Initialize
(
NPNetscapeFuncs
*
aNPNFuncs
NPPluginFuncs
*
aNPPFuncs
)
{
NPError
rv
=
fillNetscapeFunctionTable
(
aNPNFuncs
)
;
if
(
rv
!
=
NPERR_NO_ERROR
)
return
rv
;
rv
=
fillPluginFunctionTable
(
aNPPFuncs
)
;
if
(
rv
!
=
NPERR_NO_ERROR
)
return
rv
;
return
NS_PluginInitialize
(
)
;
}
char
*
NP_GetMIMEDescription
(
void
)
{
return
NPP_GetMIMEDescription
(
)
;
}
NPError
NP_GetValue
(
void
*
future
NPPVariable
aVariable
void
*
aValue
)
{
return
NS_PluginGetValue
(
aVariable
aValue
)
;
}
#
endif
#
ifdef
XP_MAC
#
if
!
TARGET_API_MAC_CARBON
QDGlobals
*
gQDPtr
;
#
endif
short
gResFile
;
NPError
Private_Initialize
(
void
)
{
NPError
rv
=
NS_PluginInitialize
(
)
;
return
rv
;
}
void
Private_Shutdown
(
void
)
{
NS_PluginShutdown
(
)
;
__destroy_global_chain
(
)
;
}
void
SetUpQD
(
void
)
;
void
SetUpQD
(
void
)
{
ProcessSerialNumber
PSN
;
FSSpec
myFSSpec
;
Str63
name
;
ProcessInfoRec
infoRec
;
OSErr
result
=
noErr
;
CFragConnectionID
connID
;
Str255
errName
;
gResFile
=
CurResFile
(
)
;
#
if
!
TARGET_API_MAC_CARBON
long
response
;
OSErr
err
=
Gestalt
(
gestaltCFMAttr
&
response
)
;
Boolean
hasCFM
=
BitTst
(
&
response
31
-
gestaltCFMPresent
)
;
if
(
hasCFM
)
{
infoRec
.
processInfoLength
=
sizeof
(
ProcessInfoRec
)
;
infoRec
.
processName
=
name
;
infoRec
.
processAppSpec
=
&
myFSSpec
;
PSN
.
highLongOfPSN
=
0
;
PSN
.
lowLongOfPSN
=
kCurrentProcess
;
result
=
GetProcessInformation
(
&
PSN
&
infoRec
)
;
}
else
result
=
-
1
;
if
(
result
=
=
noErr
)
{
Ptr
mainAddr
;
result
=
GetDiskFragment
(
infoRec
.
processAppSpec
0L
0L
infoRec
.
processName
kReferenceCFrag
&
connID
(
Ptr
*
)
&
mainAddr
errName
)
;
}
if
(
result
=
=
noErr
)
{
CFragSymbolClass
symClass
;
result
=
FindSymbol
(
connID
"
\
pqd
"
(
Ptr
*
)
&
gQDPtr
&
symClass
)
;
}
else
{
gQDPtr
=
(
QDGlobals
*
)
(
*
(
(
long
*
)
SetCurrentA5
(
)
)
-
(
sizeof
(
QDGlobals
)
-
sizeof
(
GrafPtr
)
)
)
;
}
#
endif
}
NPError
main
(
NPNetscapeFuncs
*
nsTable
NPPluginFuncs
*
pluginFuncs
NPP_ShutdownUPP
*
unloadUpp
)
;
#
if
!
TARGET_API_MAC_CARBON
#
pragma
export
on
#
if
GENERATINGCFM
RoutineDescriptor
mainRD
=
BUILD_ROUTINE_DESCRIPTOR
(
uppNPP_MainEntryProcInfo
main
)
;
#
endif
#
pragma
export
off
#
endif
NPError
main
(
NPNetscapeFuncs
*
aNPNFuncs
NPPluginFuncs
*
aNPPFuncs
NPP_ShutdownUPP
*
aUnloadUpp
)
{
NPError
rv
=
NPERR_NO_ERROR
;
if
(
aUnloadUpp
=
=
NULL
)
rv
=
NPERR_INVALID_FUNCTABLE_ERROR
;
if
(
rv
=
=
NPERR_NO_ERROR
)
rv
=
fillNetscapeFunctionTable
(
aNPNFuncs
)
;
if
(
rv
=
=
NPERR_NO_ERROR
)
{
__InitCode__
(
)
;
rv
=
fillPluginFunctionTable
(
aNPPFuncs
)
;
}
*
aUnloadUpp
=
NewNPP_ShutdownProc
(
Private_Shutdown
)
;
SetUpQD
(
)
;
rv
=
Private_Initialize
(
)
;
return
rv
;
}
#
endif
