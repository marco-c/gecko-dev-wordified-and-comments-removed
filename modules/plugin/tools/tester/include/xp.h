#
ifndef
__XP_H__
#
define
__XP_H__
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
include
<
io
.
h
>
#
include
<
stdio
.
h
>
#
include
"
npapi
.
h
"
#
include
"
npfunctions
.
h
"
#
define
XP_HFILE
HFILE
#
endif
#
ifdef
XP_OS2
#
define
INCL_PM
#
define
INCL_WIN
#
include
<
os2
.
h
>
#
include
<
io
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
<
ctype
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
sys
/
stat
.
h
>
#
include
"
npapi
.
h
"
#
include
"
npfunctions
.
h
"
#
define
XP_HFILE
FILE
*
#
endif
#
ifdef
XP_UNIX
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
sys
/
stat
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
assert
.
h
>
#
include
<
ctype
.
h
>
#
include
"
npapi
.
h
"
#
include
"
npfunctions
.
h
"
#
define
XP_HFILE
FILE
*
#
define
HIBYTE
(
i
)
(
i
>
>
8
)
#
define
LOBYTE
(
i
)
(
i
&
0xff
)
#
endif
#
ifdef
XP_MAC
#
include
<
Processes
.
h
>
#
include
<
Gestalt
.
h
>
#
include
<
CodeFragments
.
h
>
#
include
<
Timer
.
h
>
#
include
<
Resources
.
h
>
#
include
<
ToolUtils
.
h
>
#
include
<
A4Stuff
.
h
>
#
include
"
npapi
.
h
"
#
ifdef
__MWERKS__
#
ifndef
powerc
#
pragma
pointers_in_D0
#
endif
#
endif
#
include
"
npfunctions
.
h
"
#
ifdef
__MWERKS__
#
ifndef
powerc
#
pragma
pointers_in_A0
#
endif
#
endif
#
ifdef
__MWERKS__
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
ifndef
powerc
extern
void
__InitCode__
(
void
)
;
#
else
extern
void
__sinit
(
void
)
;
#
define
__InitCode__
__sinit
#
endif
extern
void
__destroy_global_chain
(
void
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
NPError
Private_Initialize
(
void
)
;
void
Private_Shutdown
(
void
)
;
NPError
Private_New
(
NPMIMEType
pluginType
NPP
instance
uint16
mode
int16
argc
char
*
argn
[
]
char
*
argv
[
]
NPSavedData
*
saved
)
;
NPError
Private_Destroy
(
NPP
instance
NPSavedData
*
*
save
)
;
NPError
Private_SetWindow
(
NPP
instance
NPWindow
*
window
)
;
NPError
Private_NewStream
(
NPP
instance
NPMIMEType
type
NPStream
*
stream
NPBool
seekable
uint16
*
stype
)
;
NPError
Private_DestroyStream
(
NPP
instance
NPStream
*
stream
NPError
reason
)
;
int32
Private_WriteReady
(
NPP
instance
NPStream
*
stream
)
;
int32
Private_Write
(
NPP
instance
NPStream
*
stream
int32
offset
int32
len
void
*
buffer
)
;
void
Private_StreamAsFile
(
NPP
instance
NPStream
*
stream
const
char
*
fname
)
;
void
Private_Print
(
NPP
instance
NPPrint
*
platformPrint
)
;
int16
Private_HandleEvent
(
NPP
instance
void
*
event
)
;
void
Private_URLNotify
(
NPP
instance
const
char
*
url
NPReason
reason
void
*
notifyData
)
;
NPError
Private_GetValue
(
NPP
instance
NPPVariable
variable
void
*
result
)
;
NPError
Private_SetValue
(
NPP
instance
NPNVariable
variable
void
*
value
)
;
#
define
XP_HFILE
FILE
*
#
endif
#
if
defined
(
XP_OS2
)
typedef
unsigned
short
WORD
;
typedef
char
*
LPSTR
;
typedef
unsigned
long
DWORD
;
typedef
void
*
LPVOID
;
#
define
wsprintf
sprintf
#
define
IDYES
MBID_YES
#
define
MB_ICONERROR
MB_ERROR
#
endif
#
if
!
defined
(
XP_WIN
)
&
&
!
defined
(
XP_OS2
)
#
ifndef
FALSE
#
define
FALSE
false
#
endif
#
ifndef
TRUE
#
define
TRUE
true
#
endif
#
ifndef
DWORD
#
define
DWORD
unsigned
long
#
endif
#
ifndef
UINT
#
define
UINT
unsigned
int
#
endif
#
ifndef
LPSTR
#
define
LPSTR
char
*
#
endif
#
ifndef
WORD
#
define
WORD
unsigned
short
#
endif
#
ifndef
BOOL
#
define
BOOL
bool
#
endif
#
if
(
defined
XP_UNIX
)
#
ifndef
bool
#
define
bool
unsigned
char
#
endif
#
endif
#
endif
BOOL
XP_IsFile
(
LPSTR
szFileName
)
;
XP_HFILE
XP_CreateFile
(
LPSTR
szFileName
)
;
XP_HFILE
XP_OpenFile
(
LPSTR
szFileName
)
;
void
XP_CloseFile
(
XP_HFILE
hFile
)
;
void
XP_DeleteFile
(
LPSTR
szFileName
)
;
DWORD
XP_WriteFile
(
XP_HFILE
hFile
void
*
pBuf
int
iSize
)
;
void
XP_FlushFileBuffers
(
XP_HFILE
hFile
)
;
DWORD
XP_GetPrivateProfileString
(
LPSTR
szSection
LPSTR
szKey
LPSTR
szDefault
LPSTR
szString
DWORD
dwSize
LPSTR
szFileName
)
;
int
XP_GetPrivateProfileInt
(
LPSTR
szSection
LPSTR
szKey
int
iDefault
LPSTR
szFileName
)
;
BOOL
XP_WritePrivateProfileString
(
LPSTR
szSection
LPSTR
szKey
LPSTR
szString
LPSTR
szFileName
)
;
BOOL
XP_WritePrivateProfileInt
(
LPSTR
szSection
LPSTR
szKey
int
iValue
LPSTR
szFileName
)
;
DWORD
XP_GetTickCount
(
)
;
void
XP_Sleep
(
DWORD
dwSleepTime
)
;
#
endif
