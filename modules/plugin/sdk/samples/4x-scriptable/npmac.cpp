#
include
<
Processes
.
h
>
#
include
<
Gestalt
.
h
>
#
include
<
CodeFragments
.
h
>
#
include
<
Timer
.
h
>
#
include
<
Resources
.
h
>
#
include
<
ToolUtils
.
h
>
#
define
XP_MAC
1
#
define
NDEBUG
1
#
if
TARGET_CPU_68K
#
include
<
A4Stuff
.
h
>
#
else
#
define
EnterCodeResource
(
)
#
define
ExitCodeResource
(
)
#
endif
#
include
"
npapi
.
h
"
#
ifdef
__MWERKS__
#
ifndef
powerc
#
pragma
pointers_in_D0
#
endif
#
endif
#
include
"
npupp
.
h
"
#
ifdef
__MWERKS__
#
ifndef
powerc
#
pragma
pointers_in_A0
#
endif
#
endif
#
ifdef
__MWERKS__
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
ifndef
powerc
extern
void
__InitCode__
(
void
)
;
#
else
extern
void
__sinit
(
void
)
;
#
define
__InitCode__
__sinit
#
endif
extern
void
__destroy_global_chain
(
void
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
#
define
PLUGIN_TRACE
0
#
if
PLUGIN_TRACE
#
define
PLUGINDEBUGSTR
(
msg
)
:
:
DebugStr
(
msg
)
#
else
#
define
PLUGINDEBUGSTR
#
endif
#
if
!
TARGET_API_MAC_CARBON
QDGlobals
*
gQDPtr
;
#
endif
short
gResFile
;
NPNetscapeFuncs
gNetscapeFuncs
;
void
NPN_Version
(
int
*
plugin_major
int
*
plugin_minor
int
*
netscape_major
int
*
netscape_minor
)
{
*
plugin_major
=
NP_VERSION_MAJOR
;
*
plugin_minor
=
NP_VERSION_MINOR
;
*
netscape_major
=
gNetscapeFuncs
.
version
>
>
8
;
*
netscape_minor
=
gNetscapeFuncs
.
version
&
0xFF
;
}
NPError
NPN_GetURLNotify
(
NPP
instance
const
char
*
url
const
char
*
window
void
*
notifyData
)
{
int
navMinorVers
=
gNetscapeFuncs
.
version
&
0xFF
;
NPError
err
;
if
(
navMinorVers
>
=
NPVERS_HAS_NOTIFICATION
)
{
err
=
CallNPN_GetURLNotifyProc
(
gNetscapeFuncs
.
geturlnotify
instance
url
window
notifyData
)
;
}
else
{
err
=
NPERR_INCOMPATIBLE_VERSION_ERROR
;
}
return
err
;
}
NPError
NPN_GetURL
(
NPP
instance
const
char
*
url
const
char
*
window
)
{
return
CallNPN_GetURLProc
(
gNetscapeFuncs
.
geturl
instance
url
window
)
;
}
NPError
NPN_PostURLNotify
(
NPP
instance
const
char
*
url
const
char
*
window
uint32
len
const
char
*
buf
NPBool
file
void
*
notifyData
)
{
int
navMinorVers
=
gNetscapeFuncs
.
version
&
0xFF
;
NPError
err
;
if
(
navMinorVers
>
=
NPVERS_HAS_NOTIFICATION
)
{
err
=
CallNPN_PostURLNotifyProc
(
gNetscapeFuncs
.
posturlnotify
instance
url
window
len
buf
file
notifyData
)
;
}
else
{
err
=
NPERR_INCOMPATIBLE_VERSION_ERROR
;
}
return
err
;
}
NPError
NPN_PostURL
(
NPP
instance
const
char
*
url
const
char
*
window
uint32
len
const
char
*
buf
NPBool
file
)
{
return
CallNPN_PostURLProc
(
gNetscapeFuncs
.
posturl
instance
url
window
len
buf
file
)
;
}
NPError
NPN_RequestRead
(
NPStream
*
stream
NPByteRange
*
rangeList
)
{
return
CallNPN_RequestReadProc
(
gNetscapeFuncs
.
requestread
stream
rangeList
)
;
}
NPError
NPN_NewStream
(
NPP
instance
NPMIMEType
type
const
char
*
window
NPStream
*
*
stream
)
{
int
navMinorVers
=
gNetscapeFuncs
.
version
&
0xFF
;
NPError
err
;
if
(
navMinorVers
>
=
NPVERS_HAS_STREAMOUTPUT
)
{
err
=
CallNPN_NewStreamProc
(
gNetscapeFuncs
.
newstream
instance
type
window
stream
)
;
}
else
{
err
=
NPERR_INCOMPATIBLE_VERSION_ERROR
;
}
return
err
;
}
int32
NPN_Write
(
NPP
instance
NPStream
*
stream
int32
len
void
*
buffer
)
{
int
navMinorVers
=
gNetscapeFuncs
.
version
&
0xFF
;
NPError
err
;
if
(
navMinorVers
>
=
NPVERS_HAS_STREAMOUTPUT
)
{
err
=
CallNPN_WriteProc
(
gNetscapeFuncs
.
write
instance
stream
len
buffer
)
;
}
else
{
err
=
NPERR_INCOMPATIBLE_VERSION_ERROR
;
}
return
err
;
}
NPError
NPN_DestroyStream
(
NPP
instance
NPStream
*
stream
NPError
reason
)
{
int
navMinorVers
=
gNetscapeFuncs
.
version
&
0xFF
;
NPError
err
;
if
(
navMinorVers
>
=
NPVERS_HAS_STREAMOUTPUT
)
{
err
=
CallNPN_DestroyStreamProc
(
gNetscapeFuncs
.
destroystream
instance
stream
reason
)
;
}
else
{
err
=
NPERR_INCOMPATIBLE_VERSION_ERROR
;
}
return
err
;
}
void
NPN_Status
(
NPP
instance
const
char
*
message
)
{
CallNPN_StatusProc
(
gNetscapeFuncs
.
status
instance
message
)
;
}
const
char
*
NPN_UserAgent
(
NPP
instance
)
{
return
CallNPN_UserAgentProc
(
gNetscapeFuncs
.
uagent
instance
)
;
}
#
define
DEBUG_MEMORY
0
void
*
NPN_MemAlloc
(
uint32
size
)
{
#
if
DEBUG_MEMORY
return
(
void
*
)
NewPtrClear
(
size
)
;
#
else
return
CallNPN_MemAllocProc
(
gNetscapeFuncs
.
memalloc
size
)
;
#
endif
}
void
NPN_MemFree
(
void
*
ptr
)
{
#
if
DEBUG_MEMORY
DisposePtr
(
Ptr
(
ptr
)
)
;
#
else
CallNPN_MemFreeProc
(
gNetscapeFuncs
.
memfree
ptr
)
;
#
endif
}
uint32
NPN_MemFlush
(
uint32
size
)
{
return
CallNPN_MemFlushProc
(
gNetscapeFuncs
.
memflush
size
)
;
}
void
NPN_ReloadPlugins
(
NPBool
reloadPages
)
{
CallNPN_ReloadPluginsProc
(
gNetscapeFuncs
.
reloadplugins
reloadPages
)
;
}
NPError
NPN_GetValue
(
NPP
instance
NPNVariable
variable
void
*
value
)
{
return
CallNPN_GetValueProc
(
gNetscapeFuncs
.
getvalue
instance
variable
value
)
;
}
NPError
NPN_SetValue
(
NPP
instance
NPPVariable
variable
void
*
value
)
{
return
CallNPN_SetValueProc
(
gNetscapeFuncs
.
setvalue
instance
variable
value
)
;
}
void
NPN_InvalidateRect
(
NPP
instance
NPRect
*
rect
)
{
CallNPN_InvalidateRectProc
(
gNetscapeFuncs
.
invalidaterect
instance
rect
)
;
}
void
NPN_InvalidateRegion
(
NPP
instance
NPRegion
region
)
{
CallNPN_InvalidateRegionProc
(
gNetscapeFuncs
.
invalidateregion
instance
region
)
;
}
void
NPN_ForceRedraw
(
NPP
instance
)
{
CallNPN_ForceRedrawProc
(
gNetscapeFuncs
.
forceredraw
instance
)
;
}
NPError
Private_Initialize
(
void
)
;
void
Private_Shutdown
(
void
)
;
NPError
Private_New
(
NPMIMEType
pluginType
NPP
instance
uint16
mode
int16
argc
char
*
argn
[
]
char
*
argv
[
]
NPSavedData
*
saved
)
;
NPError
Private_Destroy
(
NPP
instance
NPSavedData
*
*
save
)
;
NPError
Private_SetWindow
(
NPP
instance
NPWindow
*
window
)
;
NPError
Private_NewStream
(
NPP
instance
NPMIMEType
type
NPStream
*
stream
NPBool
seekable
uint16
*
stype
)
;
NPError
Private_DestroyStream
(
NPP
instance
NPStream
*
stream
NPError
reason
)
;
int32
Private_WriteReady
(
NPP
instance
NPStream
*
stream
)
;
int32
Private_Write
(
NPP
instance
NPStream
*
stream
int32
offset
int32
len
void
*
buffer
)
;
void
Private_StreamAsFile
(
NPP
instance
NPStream
*
stream
const
char
*
fname
)
;
void
Private_Print
(
NPP
instance
NPPrint
*
platformPrint
)
;
int16
Private_HandleEvent
(
NPP
instance
void
*
event
)
;
void
Private_URLNotify
(
NPP
instance
const
char
*
url
NPReason
reason
void
*
notifyData
)
;
NPError
Private_GetValue
(
NPP
instance
NPPVariable
variable
void
*
result
)
;
NPError
Private_SetValue
(
NPP
instance
NPNVariable
variable
void
*
value
)
;
NPError
Private_Initialize
(
void
)
{
NPError
err
;
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pInitialize
;
g
;
"
)
;
err
=
NPP_Initialize
(
)
;
ExitCodeResource
(
)
;
return
err
;
}
void
Private_Shutdown
(
void
)
{
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pShutdown
;
g
;
"
)
;
NPP_Shutdown
(
)
;
__destroy_global_chain
(
)
;
ExitCodeResource
(
)
;
}
NPError
Private_New
(
NPMIMEType
pluginType
NPP
instance
uint16
mode
int16
argc
char
*
argn
[
]
char
*
argv
[
]
NPSavedData
*
saved
)
{
EnterCodeResource
(
)
;
NPError
ret
=
NPP_New
(
pluginType
instance
mode
argc
argn
argv
saved
)
;
PLUGINDEBUGSTR
(
"
\
pNew
;
g
;
"
)
;
ExitCodeResource
(
)
;
return
ret
;
}
NPError
Private_Destroy
(
NPP
instance
NPSavedData
*
*
save
)
{
NPError
err
;
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pDestroy
;
g
;
"
)
;
err
=
NPP_Destroy
(
instance
save
)
;
ExitCodeResource
(
)
;
return
err
;
}
NPError
Private_SetWindow
(
NPP
instance
NPWindow
*
window
)
{
NPError
err
;
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pSetWindow
;
g
;
"
)
;
err
=
NPP_SetWindow
(
instance
window
)
;
ExitCodeResource
(
)
;
return
err
;
}
NPError
Private_NewStream
(
NPP
instance
NPMIMEType
type
NPStream
*
stream
NPBool
seekable
uint16
*
stype
)
{
NPError
err
;
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pNewStream
;
g
;
"
)
;
err
=
NPP_NewStream
(
instance
type
stream
seekable
stype
)
;
ExitCodeResource
(
)
;
return
err
;
}
int32
Private_WriteReady
(
NPP
instance
NPStream
*
stream
)
{
int32
result
;
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pWriteReady
;
g
;
"
)
;
result
=
NPP_WriteReady
(
instance
stream
)
;
ExitCodeResource
(
)
;
return
result
;
}
int32
Private_Write
(
NPP
instance
NPStream
*
stream
int32
offset
int32
len
void
*
buffer
)
{
int32
result
;
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pWrite
;
g
;
"
)
;
result
=
NPP_Write
(
instance
stream
offset
len
buffer
)
;
ExitCodeResource
(
)
;
return
result
;
}
void
Private_StreamAsFile
(
NPP
instance
NPStream
*
stream
const
char
*
fname
)
{
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pStreamAsFile
;
g
;
"
)
;
NPP_StreamAsFile
(
instance
stream
fname
)
;
ExitCodeResource
(
)
;
}
NPError
Private_DestroyStream
(
NPP
instance
NPStream
*
stream
NPError
reason
)
{
NPError
err
;
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pDestroyStream
;
g
;
"
)
;
err
=
NPP_DestroyStream
(
instance
stream
reason
)
;
ExitCodeResource
(
)
;
return
err
;
}
int16
Private_HandleEvent
(
NPP
instance
void
*
event
)
{
int16
result
;
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pHandleEvent
;
g
;
"
)
;
result
=
NPP_HandleEvent
(
instance
event
)
;
ExitCodeResource
(
)
;
return
result
;
}
void
Private_Print
(
NPP
instance
NPPrint
*
platformPrint
)
{
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pPrint
;
g
;
"
)
;
NPP_Print
(
instance
platformPrint
)
;
ExitCodeResource
(
)
;
}
void
Private_URLNotify
(
NPP
instance
const
char
*
url
NPReason
reason
void
*
notifyData
)
{
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pURLNotify
;
g
;
"
)
;
NPP_URLNotify
(
instance
url
reason
notifyData
)
;
ExitCodeResource
(
)
;
}
NPError
Private_GetValue
(
NPP
instance
NPPVariable
variable
void
*
result
)
{
NPError
err
;
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pGetValue
;
g
;
"
)
;
err
=
NPP_GetValue
(
instance
variable
result
)
;
ExitCodeResource
(
)
;
return
err
;
}
NPError
Private_SetValue
(
NPP
instance
NPNVariable
variable
void
*
value
)
{
NPError
err
;
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pSetValue
;
g
;
"
)
;
err
=
NPP_SetValue
(
instance
variable
value
)
;
ExitCodeResource
(
)
;
return
err
;
}
void
SetUpQD
(
void
)
;
void
SetUpQD
(
void
)
{
ProcessSerialNumber
PSN
;
FSSpec
myFSSpec
;
Str63
name
;
ProcessInfoRec
infoRec
;
OSErr
result
=
noErr
;
CFragConnectionID
connID
;
Str255
errName
;
gResFile
=
CurResFile
(
)
;
#
if
!
TARGET_API_MAC_CARBON
long
response
;
OSErr
err
=
Gestalt
(
gestaltCFMAttr
&
response
)
;
Boolean
hasCFM
=
BitTst
(
&
response
31
-
gestaltCFMPresent
)
;
if
(
hasCFM
)
{
infoRec
.
processInfoLength
=
sizeof
(
ProcessInfoRec
)
;
infoRec
.
processName
=
name
;
infoRec
.
processAppSpec
=
&
myFSSpec
;
PSN
.
highLongOfPSN
=
0
;
PSN
.
lowLongOfPSN
=
kCurrentProcess
;
result
=
GetProcessInformation
(
&
PSN
&
infoRec
)
;
if
(
result
!
=
noErr
)
PLUGINDEBUGSTR
(
"
\
pFailed
in
GetProcessInformation
"
)
;
}
else
result
=
-
1
;
if
(
result
=
=
noErr
)
{
Ptr
mainAddr
;
result
=
GetDiskFragment
(
infoRec
.
processAppSpec
0L
0L
infoRec
.
processName
kReferenceCFrag
&
connID
(
Ptr
*
)
&
mainAddr
errName
)
;
}
if
(
result
=
=
noErr
)
{
CFragSymbolClass
symClass
;
result
=
FindSymbol
(
connID
"
\
pqd
"
(
Ptr
*
)
&
gQDPtr
&
symClass
)
;
if
(
result
!
=
noErr
)
PLUGINDEBUGSTR
(
"
\
pFailed
in
FindSymbol
qd
"
)
;
}
else
{
gQDPtr
=
(
QDGlobals
*
)
(
*
(
(
long
*
)
SetCurrentA5
(
)
)
-
(
sizeof
(
QDGlobals
)
-
sizeof
(
GrafPtr
)
)
)
;
}
#
endif
}
NPError
main
(
NPNetscapeFuncs
*
nsTable
NPPluginFuncs
*
pluginFuncs
NPP_ShutdownUPP
*
unloadUpp
)
;
#
pragma
export
on
#
if
!
TARGET_API_MAC_CARBON
RoutineDescriptor
mainRD
=
BUILD_ROUTINE_DESCRIPTOR
(
uppNPP_MainEntryProcInfo
main
)
;
#
endif
#
pragma
export
off
NPError
main
(
NPNetscapeFuncs
*
nsTable
NPPluginFuncs
*
pluginFuncs
NPP_ShutdownUPP
*
unloadUpp
)
{
EnterCodeResource
(
)
;
PLUGINDEBUGSTR
(
"
\
pmain
"
)
;
NPError
err
=
NPERR_NO_ERROR
;
if
(
(
nsTable
=
=
NULL
)
|
|
(
pluginFuncs
=
=
NULL
)
|
|
(
unloadUpp
=
=
NULL
)
)
err
=
NPERR_INVALID_FUNCTABLE_ERROR
;
if
(
err
=
=
NPERR_NO_ERROR
)
{
if
(
(
nsTable
-
>
version
>
>
8
)
>
NP_VERSION_MAJOR
)
err
=
NPERR_INCOMPATIBLE_VERSION_ERROR
;
}
if
(
err
=
=
NPERR_NO_ERROR
)
{
int
navMinorVers
=
nsTable
-
>
version
&
0xFF
;
gNetscapeFuncs
.
version
=
nsTable
-
>
version
;
gNetscapeFuncs
.
size
=
nsTable
-
>
size
;
gNetscapeFuncs
.
posturl
=
nsTable
-
>
posturl
;
gNetscapeFuncs
.
geturl
=
nsTable
-
>
geturl
;
gNetscapeFuncs
.
requestread
=
nsTable
-
>
requestread
;
gNetscapeFuncs
.
newstream
=
nsTable
-
>
newstream
;
gNetscapeFuncs
.
write
=
nsTable
-
>
write
;
gNetscapeFuncs
.
destroystream
=
nsTable
-
>
destroystream
;
gNetscapeFuncs
.
status
=
nsTable
-
>
status
;
gNetscapeFuncs
.
uagent
=
nsTable
-
>
uagent
;
gNetscapeFuncs
.
memalloc
=
nsTable
-
>
memalloc
;
gNetscapeFuncs
.
memfree
=
nsTable
-
>
memfree
;
gNetscapeFuncs
.
memflush
=
nsTable
-
>
memflush
;
gNetscapeFuncs
.
reloadplugins
=
nsTable
-
>
reloadplugins
;
if
(
navMinorVers
>
=
NPVERS_HAS_LIVECONNECT
)
{
gNetscapeFuncs
.
getJavaEnv
=
NULL
;
gNetscapeFuncs
.
getJavaPeer
=
NULL
;
}
if
(
navMinorVers
>
=
NPVERS_HAS_NOTIFICATION
)
{
gNetscapeFuncs
.
geturlnotify
=
nsTable
-
>
geturlnotify
;
gNetscapeFuncs
.
posturlnotify
=
nsTable
-
>
posturlnotify
;
}
gNetscapeFuncs
.
getvalue
=
nsTable
-
>
getvalue
;
gNetscapeFuncs
.
setvalue
=
nsTable
-
>
setvalue
;
gNetscapeFuncs
.
invalidaterect
=
nsTable
-
>
invalidaterect
;
gNetscapeFuncs
.
invalidateregion
=
nsTable
-
>
invalidateregion
;
gNetscapeFuncs
.
forceredraw
=
nsTable
-
>
forceredraw
;
__InitCode__
(
)
;
pluginFuncs
-
>
version
=
(
NP_VERSION_MAJOR
<
<
8
)
+
NP_VERSION_MINOR
;
pluginFuncs
-
>
size
=
sizeof
(
NPPluginFuncs
)
;
pluginFuncs
-
>
newp
=
NewNPP_NewProc
(
Private_New
)
;
pluginFuncs
-
>
destroy
=
NewNPP_DestroyProc
(
Private_Destroy
)
;
pluginFuncs
-
>
setwindow
=
NewNPP_SetWindowProc
(
Private_SetWindow
)
;
pluginFuncs
-
>
newstream
=
NewNPP_NewStreamProc
(
Private_NewStream
)
;
pluginFuncs
-
>
destroystream
=
NewNPP_DestroyStreamProc
(
Private_DestroyStream
)
;
pluginFuncs
-
>
asfile
=
NewNPP_StreamAsFileProc
(
Private_StreamAsFile
)
;
pluginFuncs
-
>
writeready
=
NewNPP_WriteReadyProc
(
Private_WriteReady
)
;
pluginFuncs
-
>
write
=
NewNPP_WriteProc
(
Private_Write
)
;
pluginFuncs
-
>
print
=
NewNPP_PrintProc
(
Private_Print
)
;
pluginFuncs
-
>
event
=
NewNPP_HandleEventProc
(
Private_HandleEvent
)
;
if
(
navMinorVers
>
=
NPVERS_HAS_NOTIFICATION
)
{
pluginFuncs
-
>
urlnotify
=
NewNPP_URLNotifyProc
(
Private_URLNotify
)
;
}
if
(
navMinorVers
>
=
NPVERS_HAS_LIVECONNECT
)
{
pluginFuncs
-
>
javaClass
=
NULL
;
pluginFuncs
-
>
getvalue
=
NewNPP_GetValueProc
(
Private_GetValue
)
;
pluginFuncs
-
>
setvalue
=
NewNPP_SetValueProc
(
Private_SetValue
)
;
}
*
unloadUpp
=
NewNPP_ShutdownProc
(
Private_Shutdown
)
;
SetUpQD
(
)
;
err
=
Private_Initialize
(
)
;
}
ExitCodeResource
(
)
;
return
err
;
}
