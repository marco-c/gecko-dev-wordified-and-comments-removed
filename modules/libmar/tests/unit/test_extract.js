function
run_test
(
)
{
function
run_one_test
(
marFileName
files
)
{
let
mar
=
do_get_file
(
"
data
/
"
+
marFileName
)
;
let
outDir
=
tempDir
.
clone
(
)
;
outDir
.
append
(
"
out
"
)
;
Assert
.
ok
(
!
outDir
.
exists
(
)
)
;
outDir
.
create
(
Ci
.
nsIFile
.
DIRECTORY_TYPE
0o777
)
;
let
outFiles
=
[
]
;
let
refFiles
=
[
]
;
for
(
let
i
=
0
;
i
<
files
.
length
;
i
+
+
)
{
let
outFile
=
outDir
.
clone
(
)
;
outFile
.
append
(
files
[
i
]
)
;
Assert
.
ok
(
!
outFile
.
exists
(
)
)
;
outFiles
.
push
(
outFile
)
;
refFiles
.
push
(
do_get_file
(
"
data
/
"
+
files
[
i
]
)
)
;
}
extractMAR
(
mar
outDir
)
;
for
(
let
i
=
0
;
i
<
files
.
length
;
i
+
+
)
{
Assert
.
ok
(
outFiles
[
i
]
.
exists
(
)
)
;
let
refFileData
=
getBinaryFileData
(
refFiles
[
i
]
)
;
let
outFileData
=
getBinaryFileData
(
outFiles
[
i
]
)
;
compareBinaryData
(
refFileData
outFileData
)
;
}
}
let
tests
=
{
test_zero_sized
:
function
_test_zero_sized
(
)
{
return
run_one_test
(
"
0_sized
.
mar
"
[
"
0_sized_file
"
]
)
;
}
test_one_byte
:
function
_test_one_byte
(
)
{
return
run_one_test
(
"
1_byte
.
mar
"
[
"
1_byte_file
"
]
)
;
}
test_binary_data
:
function
_test_binary_data
(
)
{
return
run_one_test
(
"
binary_data
.
mar
"
[
"
binary_data_file
"
]
)
;
}
test_no_pib
:
function
_test_no_pib
(
)
{
return
run_one_test
(
"
no_pib
.
mar
"
[
"
binary_data_file
"
]
)
;
}
test_no_pib_signed
:
function
_test_no_pib_signed
(
)
{
return
run_one_test
(
"
signed_no_pib
.
mar
"
[
"
binary_data_file
"
]
)
;
}
test_pib_signed
:
function
_test_pib_signed
(
)
{
return
run_one_test
(
"
signed_pib
.
mar
"
[
"
binary_data_file
"
]
)
;
}
test_multiple_file
:
function
_test_multiple_file
(
)
{
return
run_one_test
(
"
multiple_file
.
mar
"
[
"
0_sized_file
"
"
1_byte_file
"
"
binary_data_file
"
]
)
;
}
cleanup_per_test
:
function
_cleanup_per_test
(
)
{
let
outDir
=
tempDir
.
clone
(
)
;
outDir
.
append
(
"
out
"
)
;
if
(
outDir
.
exists
(
)
)
{
outDir
.
remove
(
true
)
;
}
}
}
;
Assert
.
equal
(
run_tests
(
tests
)
Object
.
keys
(
tests
)
.
length
-
1
)
;
}
