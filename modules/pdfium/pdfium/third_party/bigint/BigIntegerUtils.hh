#
ifndef
BIGINTEGERUTILS_H
#
define
BIGINTEGERUTILS_H
#
include
"
BigInteger
.
hh
"
#
include
<
string
>
#
include
<
ostream
>
std
:
:
string
bigUnsignedToString
(
const
BigUnsigned
&
x
)
;
std
:
:
string
bigIntegerToString
(
const
BigInteger
&
x
)
;
BigUnsigned
stringToBigUnsigned
(
const
std
:
:
string
&
s
)
;
BigInteger
stringToBigInteger
(
const
std
:
:
string
&
s
)
;
template
<
class
T
>
BigInteger
dataToBigInteger
(
const
T
*
data
BigInteger
:
:
Index
length
BigInteger
:
:
Sign
sign
)
;
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
BigUnsigned
&
x
)
;
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
BigInteger
&
x
)
;
template
<
class
T
>
BigInteger
dataToBigInteger
(
const
T
*
data
BigInteger
:
:
Index
length
BigInteger
:
:
Sign
sign
)
{
unsigned
int
pieceSizeInBits
=
8
*
sizeof
(
T
)
;
unsigned
int
piecesPerBlock
=
sizeof
(
BigInteger
:
:
Blk
)
/
sizeof
(
T
)
;
unsigned
int
numBlocks
=
(
length
+
piecesPerBlock
-
1
)
/
piecesPerBlock
;
BigInteger
:
:
Blk
*
blocks
=
new
BigInteger
:
:
Blk
[
numBlocks
]
;
BigInteger
:
:
Index
blockNum
pieceNum
pieceNumHere
;
for
(
blockNum
=
0
pieceNum
=
0
;
blockNum
<
numBlocks
;
blockNum
+
+
)
{
BigInteger
:
:
Blk
curBlock
=
0
;
for
(
pieceNumHere
=
0
;
pieceNumHere
<
piecesPerBlock
&
&
pieceNum
<
length
;
pieceNumHere
+
+
pieceNum
+
+
)
curBlock
|
=
(
BigInteger
:
:
Blk
(
data
[
pieceNum
]
)
<
<
(
pieceSizeInBits
*
pieceNumHere
)
)
;
blocks
[
blockNum
]
=
curBlock
;
}
BigInteger
x
(
blocks
numBlocks
sign
)
;
delete
[
]
blocks
;
return
x
;
}
#
endif
