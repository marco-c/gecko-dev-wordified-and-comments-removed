#
ifndef
NUMBERLIKEARRAY_H
#
define
NUMBERLIKEARRAY_H
#
include
<
stdlib
.
h
>
#
ifndef
NULL
#
define
NULL
0
#
endif
template
<
class
Blk
>
class
NumberlikeArray
{
public
:
typedef
unsigned
int
Index
;
static
const
unsigned
int
N
;
Index
cap
;
Index
len
;
Blk
*
blk
;
NumberlikeArray
(
Index
c
)
:
cap
(
c
)
len
(
0
)
{
blk
=
(
cap
>
0
)
?
(
new
Blk
[
cap
]
)
:
NULL
;
}
NumberlikeArray
(
)
:
cap
(
0
)
len
(
0
)
{
blk
=
NULL
;
}
~
NumberlikeArray
(
)
{
delete
[
]
blk
;
}
void
allocate
(
Index
c
)
;
void
allocateAndCopy
(
Index
c
)
;
NumberlikeArray
(
const
NumberlikeArray
<
Blk
>
&
x
)
;
void
operator
=
(
const
NumberlikeArray
<
Blk
>
&
x
)
;
NumberlikeArray
(
const
Blk
*
b
Index
blen
)
;
Index
getCapacity
(
)
const
{
return
cap
;
}
Index
getLength
(
)
const
{
return
len
;
}
Blk
getBlock
(
Index
i
)
const
{
return
blk
[
i
]
;
}
bool
isEmpty
(
)
const
{
return
len
=
=
0
;
}
bool
operator
=
=
(
const
NumberlikeArray
<
Blk
>
&
x
)
const
;
bool
operator
!
=
(
const
NumberlikeArray
<
Blk
>
&
x
)
const
{
return
!
operator
=
=
(
x
)
;
}
}
;
template
<
class
Blk
>
const
unsigned
int
NumberlikeArray
<
Blk
>
:
:
N
=
8
*
sizeof
(
Blk
)
;
template
<
class
Blk
>
void
NumberlikeArray
<
Blk
>
:
:
allocate
(
Index
c
)
{
if
(
c
>
cap
)
{
delete
[
]
blk
;
cap
=
c
;
blk
=
new
Blk
[
cap
]
;
}
}
template
<
class
Blk
>
void
NumberlikeArray
<
Blk
>
:
:
allocateAndCopy
(
Index
c
)
{
if
(
c
>
cap
)
{
Blk
*
oldBlk
=
blk
;
cap
=
c
;
blk
=
new
Blk
[
cap
]
;
Index
i
;
for
(
i
=
0
;
i
<
len
;
i
+
+
)
blk
[
i
]
=
oldBlk
[
i
]
;
delete
[
]
oldBlk
;
}
}
template
<
class
Blk
>
NumberlikeArray
<
Blk
>
:
:
NumberlikeArray
(
const
NumberlikeArray
<
Blk
>
&
x
)
:
len
(
x
.
len
)
{
cap
=
len
;
blk
=
new
Blk
[
cap
]
;
Index
i
;
for
(
i
=
0
;
i
<
len
;
i
+
+
)
blk
[
i
]
=
x
.
blk
[
i
]
;
}
template
<
class
Blk
>
void
NumberlikeArray
<
Blk
>
:
:
operator
=
(
const
NumberlikeArray
<
Blk
>
&
x
)
{
if
(
this
=
=
&
x
)
return
;
len
=
x
.
len
;
allocate
(
len
)
;
Index
i
;
for
(
i
=
0
;
i
<
len
;
i
+
+
)
blk
[
i
]
=
x
.
blk
[
i
]
;
}
template
<
class
Blk
>
NumberlikeArray
<
Blk
>
:
:
NumberlikeArray
(
const
Blk
*
b
Index
blen
)
:
cap
(
blen
)
len
(
blen
)
{
blk
=
new
Blk
[
cap
]
;
Index
i
;
for
(
i
=
0
;
i
<
len
;
i
+
+
)
blk
[
i
]
=
b
[
i
]
;
}
template
<
class
Blk
>
bool
NumberlikeArray
<
Blk
>
:
:
operator
=
=
(
const
NumberlikeArray
<
Blk
>
&
x
)
const
{
if
(
len
!
=
x
.
len
)
return
false
;
else
{
Index
i
;
for
(
i
=
0
;
i
<
len
;
i
+
+
)
if
(
blk
[
i
]
!
=
x
.
blk
[
i
]
)
return
false
;
return
true
;
}
}
#
endif
