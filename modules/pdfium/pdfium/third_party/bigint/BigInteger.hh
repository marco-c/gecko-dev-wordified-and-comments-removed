#
ifndef
BIGINTEGER_H
#
define
BIGINTEGER_H
#
include
"
BigUnsigned
.
hh
"
class
BigInteger
{
public
:
typedef
BigUnsigned
:
:
Blk
Blk
;
typedef
BigUnsigned
:
:
Index
Index
;
typedef
BigUnsigned
:
:
CmpRes
CmpRes
;
static
const
CmpRes
less
=
BigUnsigned
:
:
less
equal
=
BigUnsigned
:
:
equal
greater
=
BigUnsigned
:
:
greater
;
enum
Sign
{
negative
=
-
1
zero
=
0
positive
=
1
}
;
protected
:
Sign
sign
;
BigUnsigned
mag
;
public
:
BigInteger
(
)
:
sign
(
zero
)
mag
(
)
{
}
BigInteger
(
const
BigInteger
&
x
)
:
sign
(
x
.
sign
)
mag
(
x
.
mag
)
{
}
;
void
operator
=
(
const
BigInteger
&
x
)
;
BigInteger
(
const
Blk
*
b
Index
blen
Sign
s
)
;
BigInteger
(
const
Blk
*
b
Index
blen
)
:
mag
(
b
blen
)
{
sign
=
mag
.
isZero
(
)
?
zero
:
positive
;
}
BigInteger
(
const
BigUnsigned
&
x
Sign
s
)
;
BigInteger
(
const
BigUnsigned
&
x
)
:
mag
(
x
)
{
sign
=
mag
.
isZero
(
)
?
zero
:
positive
;
}
BigInteger
(
unsigned
long
x
)
;
BigInteger
(
long
x
)
;
BigInteger
(
unsigned
int
x
)
;
BigInteger
(
int
x
)
;
BigInteger
(
unsigned
short
x
)
;
BigInteger
(
short
x
)
;
unsigned
long
toUnsignedLong
(
)
const
;
long
toLong
(
)
const
;
unsigned
int
toUnsignedInt
(
)
const
;
int
toInt
(
)
const
;
unsigned
short
toUnsignedShort
(
)
const
;
short
toShort
(
)
const
;
protected
:
template
<
class
X
>
X
convertToUnsignedPrimitive
(
)
const
;
template
<
class
X
class
UX
>
X
convertToSignedPrimitive
(
)
const
;
public
:
Sign
getSign
(
)
const
{
return
sign
;
}
const
BigUnsigned
&
getMagnitude
(
)
const
{
return
mag
;
}
Index
getLength
(
)
const
{
return
mag
.
getLength
(
)
;
}
Index
getCapacity
(
)
const
{
return
mag
.
getCapacity
(
)
;
}
Blk
getBlock
(
Index
i
)
const
{
return
mag
.
getBlock
(
i
)
;
}
bool
isZero
(
)
const
{
return
sign
=
=
zero
;
}
CmpRes
compareTo
(
const
BigInteger
&
x
)
const
;
bool
operator
=
=
(
const
BigInteger
&
x
)
const
{
return
sign
=
=
x
.
sign
&
&
mag
=
=
x
.
mag
;
}
bool
operator
!
=
(
const
BigInteger
&
x
)
const
{
return
!
operator
=
=
(
x
)
;
}
;
bool
operator
<
(
const
BigInteger
&
x
)
const
{
return
compareTo
(
x
)
=
=
less
;
}
bool
operator
<
=
(
const
BigInteger
&
x
)
const
{
return
compareTo
(
x
)
!
=
greater
;
}
bool
operator
>
=
(
const
BigInteger
&
x
)
const
{
return
compareTo
(
x
)
!
=
less
;
}
bool
operator
>
(
const
BigInteger
&
x
)
const
{
return
compareTo
(
x
)
=
=
greater
;
}
void
add
(
const
BigInteger
&
a
const
BigInteger
&
b
)
;
void
subtract
(
const
BigInteger
&
a
const
BigInteger
&
b
)
;
void
multiply
(
const
BigInteger
&
a
const
BigInteger
&
b
)
;
void
divideWithRemainder
(
const
BigInteger
&
b
BigInteger
&
q
)
;
void
negate
(
const
BigInteger
&
a
)
;
BigInteger
operator
+
(
const
BigInteger
&
x
)
const
;
BigInteger
operator
-
(
const
BigInteger
&
x
)
const
;
BigInteger
operator
*
(
const
BigInteger
&
x
)
const
;
BigInteger
operator
/
(
const
BigInteger
&
x
)
const
;
BigInteger
operator
%
(
const
BigInteger
&
x
)
const
;
BigInteger
operator
-
(
)
const
;
void
operator
+
=
(
const
BigInteger
&
x
)
;
void
operator
-
=
(
const
BigInteger
&
x
)
;
void
operator
*
=
(
const
BigInteger
&
x
)
;
void
operator
/
=
(
const
BigInteger
&
x
)
;
void
operator
%
=
(
const
BigInteger
&
x
)
;
void
flipSign
(
)
;
void
operator
+
+
(
)
;
void
operator
+
+
(
int
)
;
void
operator
-
-
(
)
;
void
operator
-
-
(
int
)
;
}
;
inline
BigInteger
BigInteger
:
:
operator
+
(
const
BigInteger
&
x
)
const
{
BigInteger
ans
;
ans
.
add
(
*
this
x
)
;
return
ans
;
}
inline
BigInteger
BigInteger
:
:
operator
-
(
const
BigInteger
&
x
)
const
{
BigInteger
ans
;
ans
.
subtract
(
*
this
x
)
;
return
ans
;
}
inline
BigInteger
BigInteger
:
:
operator
*
(
const
BigInteger
&
x
)
const
{
BigInteger
ans
;
ans
.
multiply
(
*
this
x
)
;
return
ans
;
}
inline
BigInteger
BigInteger
:
:
operator
/
(
const
BigInteger
&
x
)
const
{
if
(
x
.
isZero
(
)
)
abort
(
)
;
BigInteger
q
r
;
r
=
*
this
;
r
.
divideWithRemainder
(
x
q
)
;
return
q
;
}
inline
BigInteger
BigInteger
:
:
operator
%
(
const
BigInteger
&
x
)
const
{
if
(
x
.
isZero
(
)
)
abort
(
)
;
BigInteger
q
r
;
r
=
*
this
;
r
.
divideWithRemainder
(
x
q
)
;
return
r
;
}
inline
BigInteger
BigInteger
:
:
operator
-
(
)
const
{
BigInteger
ans
;
ans
.
negate
(
*
this
)
;
return
ans
;
}
inline
void
BigInteger
:
:
operator
+
=
(
const
BigInteger
&
x
)
{
add
(
*
this
x
)
;
}
inline
void
BigInteger
:
:
operator
-
=
(
const
BigInteger
&
x
)
{
subtract
(
*
this
x
)
;
}
inline
void
BigInteger
:
:
operator
*
=
(
const
BigInteger
&
x
)
{
multiply
(
*
this
x
)
;
}
inline
void
BigInteger
:
:
operator
/
=
(
const
BigInteger
&
x
)
{
if
(
x
.
isZero
(
)
)
abort
(
)
;
BigInteger
q
;
divideWithRemainder
(
x
q
)
;
*
this
=
q
;
}
inline
void
BigInteger
:
:
operator
%
=
(
const
BigInteger
&
x
)
{
if
(
x
.
isZero
(
)
)
abort
(
)
;
BigInteger
q
;
divideWithRemainder
(
x
q
)
;
}
inline
void
BigInteger
:
:
flipSign
(
)
{
sign
=
Sign
(
-
sign
)
;
}
#
endif
