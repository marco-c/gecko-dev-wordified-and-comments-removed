#
ifndef
BIGUNSIGNED_H
#
define
BIGUNSIGNED_H
#
include
"
NumberlikeArray
.
hh
"
class
BigUnsigned
:
protected
NumberlikeArray
<
unsigned
long
>
{
public
:
enum
CmpRes
{
less
=
-
1
equal
=
0
greater
=
1
}
;
typedef
unsigned
long
Blk
;
typedef
NumberlikeArray
<
Blk
>
:
:
Index
Index
;
using
NumberlikeArray
<
Blk
>
:
:
N
;
protected
:
BigUnsigned
(
int
Index
c
)
:
NumberlikeArray
<
Blk
>
(
0
c
)
{
}
void
zapLeadingZeros
(
)
{
while
(
len
>
0
&
&
blk
[
len
-
1
]
=
=
0
)
len
-
-
;
}
public
:
BigUnsigned
(
)
:
NumberlikeArray
<
Blk
>
(
)
{
}
BigUnsigned
(
const
BigUnsigned
&
x
)
:
NumberlikeArray
<
Blk
>
(
x
)
{
}
void
operator
=
(
const
BigUnsigned
&
x
)
{
NumberlikeArray
<
Blk
>
:
:
operator
=
(
x
)
;
}
BigUnsigned
(
const
Blk
*
b
Index
blen
)
:
NumberlikeArray
<
Blk
>
(
b
blen
)
{
zapLeadingZeros
(
)
;
}
~
BigUnsigned
(
)
{
}
BigUnsigned
(
unsigned
long
x
)
;
BigUnsigned
(
long
x
)
;
BigUnsigned
(
unsigned
int
x
)
;
BigUnsigned
(
int
x
)
;
BigUnsigned
(
unsigned
short
x
)
;
BigUnsigned
(
short
x
)
;
protected
:
template
<
class
X
>
void
initFromPrimitive
(
X
x
)
;
template
<
class
X
>
void
initFromSignedPrimitive
(
X
x
)
;
public
:
unsigned
long
toUnsignedLong
(
)
const
;
long
toLong
(
)
const
;
unsigned
int
toUnsignedInt
(
)
const
;
int
toInt
(
)
const
;
unsigned
short
toUnsignedShort
(
)
const
;
short
toShort
(
)
const
;
protected
:
template
<
class
X
>
X
convertToSignedPrimitive
(
)
const
;
template
<
class
X
>
X
convertToPrimitive
(
)
const
;
public
:
using
NumberlikeArray
<
Blk
>
:
:
getCapacity
;
using
NumberlikeArray
<
Blk
>
:
:
getLength
;
Blk
getBlock
(
Index
i
)
const
{
return
i
>
=
len
?
0
:
blk
[
i
]
;
}
void
setBlock
(
Index
i
Blk
newBlock
)
;
bool
isZero
(
)
const
{
return
NumberlikeArray
<
Blk
>
:
:
isEmpty
(
)
;
}
Index
bitLength
(
)
const
;
bool
getBit
(
Index
bi
)
const
{
return
(
getBlock
(
bi
/
N
)
&
(
Blk
(
1
)
<
<
(
bi
%
N
)
)
)
!
=
0
;
}
void
setBit
(
Index
bi
bool
newBit
)
;
CmpRes
compareTo
(
const
BigUnsigned
&
x
)
const
;
bool
operator
=
=
(
const
BigUnsigned
&
x
)
const
{
return
NumberlikeArray
<
Blk
>
:
:
operator
=
=
(
x
)
;
}
bool
operator
!
=
(
const
BigUnsigned
&
x
)
const
{
return
NumberlikeArray
<
Blk
>
:
:
operator
!
=
(
x
)
;
}
bool
operator
<
(
const
BigUnsigned
&
x
)
const
{
return
compareTo
(
x
)
=
=
less
;
}
bool
operator
<
=
(
const
BigUnsigned
&
x
)
const
{
return
compareTo
(
x
)
!
=
greater
;
}
bool
operator
>
=
(
const
BigUnsigned
&
x
)
const
{
return
compareTo
(
x
)
!
=
less
;
}
bool
operator
>
(
const
BigUnsigned
&
x
)
const
{
return
compareTo
(
x
)
=
=
greater
;
}
void
add
(
const
BigUnsigned
&
a
const
BigUnsigned
&
b
)
;
void
subtract
(
const
BigUnsigned
&
a
const
BigUnsigned
&
b
)
;
void
multiply
(
const
BigUnsigned
&
a
const
BigUnsigned
&
b
)
;
void
bitAnd
(
const
BigUnsigned
&
a
const
BigUnsigned
&
b
)
;
void
bitOr
(
const
BigUnsigned
&
a
const
BigUnsigned
&
b
)
;
void
bitXor
(
const
BigUnsigned
&
a
const
BigUnsigned
&
b
)
;
void
bitShiftLeft
(
const
BigUnsigned
&
a
int
b
)
;
void
bitShiftRight
(
const
BigUnsigned
&
a
int
b
)
;
void
divideWithRemainder
(
const
BigUnsigned
&
b
BigUnsigned
&
q
)
;
BigUnsigned
operator
+
(
const
BigUnsigned
&
x
)
const
;
BigUnsigned
operator
-
(
const
BigUnsigned
&
x
)
const
;
BigUnsigned
operator
*
(
const
BigUnsigned
&
x
)
const
;
BigUnsigned
operator
/
(
const
BigUnsigned
&
x
)
const
;
BigUnsigned
operator
%
(
const
BigUnsigned
&
x
)
const
;
BigUnsigned
operator
&
(
const
BigUnsigned
&
x
)
const
;
BigUnsigned
operator
|
(
const
BigUnsigned
&
x
)
const
;
BigUnsigned
operator
^
(
const
BigUnsigned
&
x
)
const
;
BigUnsigned
operator
<
<
(
int
b
)
const
;
BigUnsigned
operator
>
>
(
int
b
)
const
;
void
operator
+
=
(
const
BigUnsigned
&
x
)
;
void
operator
-
=
(
const
BigUnsigned
&
x
)
;
void
operator
*
=
(
const
BigUnsigned
&
x
)
;
void
operator
/
=
(
const
BigUnsigned
&
x
)
;
void
operator
%
=
(
const
BigUnsigned
&
x
)
;
void
operator
&
=
(
const
BigUnsigned
&
x
)
;
void
operator
|
=
(
const
BigUnsigned
&
x
)
;
void
operator
^
=
(
const
BigUnsigned
&
x
)
;
void
operator
<
<
=
(
int
b
)
;
void
operator
>
>
=
(
int
b
)
;
void
operator
+
+
(
)
;
void
operator
+
+
(
int
)
;
void
operator
-
-
(
)
;
void
operator
-
-
(
int
)
;
friend
Blk
getShiftedBlock
(
const
BigUnsigned
&
num
Index
x
unsigned
int
y
)
;
template
<
class
X
>
friend
X
convertBigUnsignedToPrimitiveAccess
(
const
BigUnsigned
&
a
)
;
}
;
inline
BigUnsigned
BigUnsigned
:
:
operator
+
(
const
BigUnsigned
&
x
)
const
{
BigUnsigned
ans
;
ans
.
add
(
*
this
x
)
;
return
ans
;
}
inline
BigUnsigned
BigUnsigned
:
:
operator
-
(
const
BigUnsigned
&
x
)
const
{
BigUnsigned
ans
;
ans
.
subtract
(
*
this
x
)
;
return
ans
;
}
inline
BigUnsigned
BigUnsigned
:
:
operator
*
(
const
BigUnsigned
&
x
)
const
{
BigUnsigned
ans
;
ans
.
multiply
(
*
this
x
)
;
return
ans
;
}
inline
BigUnsigned
BigUnsigned
:
:
operator
/
(
const
BigUnsigned
&
x
)
const
{
if
(
x
.
isZero
(
)
)
abort
(
)
;
BigUnsigned
q
r
;
r
=
*
this
;
r
.
divideWithRemainder
(
x
q
)
;
return
q
;
}
inline
BigUnsigned
BigUnsigned
:
:
operator
%
(
const
BigUnsigned
&
x
)
const
{
if
(
x
.
isZero
(
)
)
abort
(
)
;
BigUnsigned
q
r
;
r
=
*
this
;
r
.
divideWithRemainder
(
x
q
)
;
return
r
;
}
inline
BigUnsigned
BigUnsigned
:
:
operator
&
(
const
BigUnsigned
&
x
)
const
{
BigUnsigned
ans
;
ans
.
bitAnd
(
*
this
x
)
;
return
ans
;
}
inline
BigUnsigned
BigUnsigned
:
:
operator
|
(
const
BigUnsigned
&
x
)
const
{
BigUnsigned
ans
;
ans
.
bitOr
(
*
this
x
)
;
return
ans
;
}
inline
BigUnsigned
BigUnsigned
:
:
operator
^
(
const
BigUnsigned
&
x
)
const
{
BigUnsigned
ans
;
ans
.
bitXor
(
*
this
x
)
;
return
ans
;
}
inline
BigUnsigned
BigUnsigned
:
:
operator
<
<
(
int
b
)
const
{
BigUnsigned
ans
;
ans
.
bitShiftLeft
(
*
this
b
)
;
return
ans
;
}
inline
BigUnsigned
BigUnsigned
:
:
operator
>
>
(
int
b
)
const
{
BigUnsigned
ans
;
ans
.
bitShiftRight
(
*
this
b
)
;
return
ans
;
}
inline
void
BigUnsigned
:
:
operator
+
=
(
const
BigUnsigned
&
x
)
{
add
(
*
this
x
)
;
}
inline
void
BigUnsigned
:
:
operator
-
=
(
const
BigUnsigned
&
x
)
{
subtract
(
*
this
x
)
;
}
inline
void
BigUnsigned
:
:
operator
*
=
(
const
BigUnsigned
&
x
)
{
multiply
(
*
this
x
)
;
}
inline
void
BigUnsigned
:
:
operator
/
=
(
const
BigUnsigned
&
x
)
{
if
(
x
.
isZero
(
)
)
abort
(
)
;
BigUnsigned
q
;
divideWithRemainder
(
x
q
)
;
*
this
=
q
;
}
inline
void
BigUnsigned
:
:
operator
%
=
(
const
BigUnsigned
&
x
)
{
if
(
x
.
isZero
(
)
)
abort
(
)
;
BigUnsigned
q
;
divideWithRemainder
(
x
q
)
;
}
inline
void
BigUnsigned
:
:
operator
&
=
(
const
BigUnsigned
&
x
)
{
bitAnd
(
*
this
x
)
;
}
inline
void
BigUnsigned
:
:
operator
|
=
(
const
BigUnsigned
&
x
)
{
bitOr
(
*
this
x
)
;
}
inline
void
BigUnsigned
:
:
operator
^
=
(
const
BigUnsigned
&
x
)
{
bitXor
(
*
this
x
)
;
}
inline
void
BigUnsigned
:
:
operator
<
<
=
(
int
b
)
{
bitShiftLeft
(
*
this
b
)
;
}
inline
void
BigUnsigned
:
:
operator
>
>
=
(
int
b
)
{
bitShiftRight
(
*
this
b
)
;
}
template
<
class
X
>
void
BigUnsigned
:
:
initFromPrimitive
(
X
x
)
{
if
(
x
=
=
0
)
;
else
{
cap
=
1
;
blk
=
new
Blk
[
1
]
;
len
=
1
;
blk
[
0
]
=
Blk
(
x
)
;
}
}
template
<
class
X
>
void
BigUnsigned
:
:
initFromSignedPrimitive
(
X
x
)
{
if
(
x
<
0
)
abort
(
)
;
else
initFromPrimitive
(
x
)
;
}
template
<
class
X
>
X
BigUnsigned
:
:
convertToPrimitive
(
)
const
{
if
(
len
=
=
0
)
return
0
;
else
if
(
len
=
=
1
)
{
X
x
=
X
(
blk
[
0
]
)
;
if
(
Blk
(
x
)
=
=
blk
[
0
]
)
return
x
;
}
abort
(
)
;
}
template
<
class
X
>
X
BigUnsigned
:
:
convertToSignedPrimitive
(
)
const
{
X
x
=
convertToPrimitive
<
X
>
(
)
;
if
(
x
>
=
0
)
return
x
;
else
abort
(
)
;
}
#
endif
