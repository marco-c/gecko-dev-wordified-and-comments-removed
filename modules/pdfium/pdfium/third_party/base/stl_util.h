#
ifndef
PDFIUM_THIRD_PARTY_BASE_STL_UTIL_H_
#
define
PDFIUM_THIRD_PARTY_BASE_STL_UTIL_H_
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
set
>
#
include
"
third_party
/
base
/
numerics
/
safe_conversions
.
h
"
namespace
pdfium
{
template
<
typename
Collection
typename
Key
>
bool
ContainsKey
(
const
Collection
&
collection
const
Key
&
key
)
{
return
collection
.
find
(
key
)
!
=
collection
.
end
(
)
;
}
template
<
typename
Collection
typename
Value
>
bool
ContainsValue
(
const
Collection
&
collection
const
Value
&
value
)
{
return
std
:
:
find
(
collection
.
begin
(
)
collection
.
end
(
)
value
)
!
=
collection
.
end
(
)
;
}
template
<
class
T
>
class
FakeUniquePtr
:
public
std
:
:
unique_ptr
<
T
>
{
public
:
using
std
:
:
unique_ptr
<
T
>
:
:
unique_ptr
;
~
FakeUniquePtr
(
)
{
std
:
:
unique_ptr
<
T
>
:
:
release
(
)
;
}
}
;
template
<
typename
ResultType
typename
Collection
>
ResultType
CollectionSize
(
const
Collection
&
collection
)
{
return
pdfium
:
:
base
:
:
checked_cast
<
ResultType
>
(
collection
.
size
(
)
)
;
}
template
<
typename
T
>
class
ScopedSetInsertion
{
public
:
ScopedSetInsertion
(
std
:
:
set
<
T
>
*
org_set
T
elem
)
:
m_Set
(
org_set
)
m_Entry
(
elem
)
{
m_Set
-
>
insert
(
m_Entry
)
;
}
~
ScopedSetInsertion
(
)
{
m_Set
-
>
erase
(
m_Entry
)
;
}
private
:
std
:
:
set
<
T
>
*
const
m_Set
;
const
T
m_Entry
;
}
;
}
#
endif
