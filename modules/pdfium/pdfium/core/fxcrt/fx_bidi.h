#
ifndef
CORE_FXCRT_FX_BIDI_H_
#
define
CORE_FXCRT_FX_BIDI_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
core
/
fxcrt
/
fx_string
.
h
"
#
include
"
core
/
fxcrt
/
fx_system
.
h
"
class
CFX_BidiChar
{
public
:
enum
Direction
{
NEUTRAL
LEFT
RIGHT
}
;
struct
Segment
{
int32_t
start
;
int32_t
count
;
Direction
direction
;
}
;
CFX_BidiChar
(
)
;
bool
AppendChar
(
FX_WCHAR
wch
)
;
bool
EndChar
(
)
;
Segment
GetSegmentInfo
(
)
const
{
return
m_LastSegment
;
}
private
:
void
StartNewSegment
(
CFX_BidiChar
:
:
Direction
direction
)
;
Segment
m_CurrentSegment
;
Segment
m_LastSegment
;
}
;
class
CFX_BidiString
{
public
:
using
const_iterator
=
std
:
:
vector
<
CFX_BidiChar
:
:
Segment
>
:
:
const_iterator
;
explicit
CFX_BidiString
(
const
CFX_WideString
&
str
)
;
~
CFX_BidiString
(
)
;
CFX_BidiChar
:
:
Direction
OverallDirection
(
)
const
{
return
m_eOverallDirection
;
}
void
SetOverallDirectionRight
(
)
;
FX_WCHAR
CharAt
(
size_t
x
)
const
{
return
m_Str
[
x
]
;
}
const_iterator
begin
(
)
const
{
return
m_Order
.
begin
(
)
;
}
const_iterator
end
(
)
const
{
return
m_Order
.
end
(
)
;
}
private
:
const
CFX_WideString
m_Str
;
std
:
:
unique_ptr
<
CFX_BidiChar
>
m_pBidiChar
;
std
:
:
vector
<
CFX_BidiChar
:
:
Segment
>
m_Order
;
CFX_BidiChar
:
:
Direction
m_eOverallDirection
;
}
;
#
endif
