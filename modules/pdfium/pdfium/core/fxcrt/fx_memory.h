#
ifndef
CORE_FXCRT_FX_MEMORY_H_
#
define
CORE_FXCRT_FX_MEMORY_H_
#
include
"
core
/
fxcrt
/
fx_system
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
void
*
FXMEM_DefaultAlloc
(
size_t
byte_size
int
flags
)
;
void
*
FXMEM_DefaultRealloc
(
void
*
pointer
size_t
new_size
int
flags
)
;
void
FXMEM_DefaultFree
(
void
*
pointer
int
flags
)
;
#
ifdef
__cplusplus
}
#
include
<
stdlib
.
h
>
#
include
<
limits
>
#
include
<
memory
>
#
include
<
new
>
NEVER_INLINE
void
FX_OutOfMemoryTerminate
(
)
;
inline
void
*
FX_SafeRealloc
(
void
*
ptr
size_t
num_members
size_t
member_size
)
{
if
(
num_members
<
std
:
:
numeric_limits
<
size_t
>
:
:
max
(
)
/
member_size
)
{
return
realloc
(
ptr
num_members
*
member_size
)
;
}
return
nullptr
;
}
inline
void
*
FX_AllocOrDie
(
size_t
num_members
size_t
member_size
)
{
if
(
void
*
result
=
calloc
(
num_members
member_size
)
)
{
return
result
;
}
FX_OutOfMemoryTerminate
(
)
;
return
nullptr
;
}
inline
void
*
FX_AllocOrDie2D
(
size_t
w
size_t
h
size_t
member_size
)
{
if
(
w
<
std
:
:
numeric_limits
<
size_t
>
:
:
max
(
)
/
h
)
{
return
FX_AllocOrDie
(
w
*
h
member_size
)
;
}
FX_OutOfMemoryTerminate
(
)
;
return
nullptr
;
}
inline
void
*
FX_ReallocOrDie
(
void
*
ptr
size_t
num_members
size_t
member_size
)
{
if
(
void
*
result
=
FX_SafeRealloc
(
ptr
num_members
member_size
)
)
{
return
result
;
}
FX_OutOfMemoryTerminate
(
)
;
return
nullptr
;
}
#
define
FX_Alloc
(
type
size
)
(
type
*
)
FX_AllocOrDie
(
size
sizeof
(
type
)
)
#
define
FX_Alloc2D
(
type
w
h
)
(
type
*
)
FX_AllocOrDie2D
(
w
h
sizeof
(
type
)
)
#
define
FX_Realloc
(
type
ptr
size
)
\
(
type
*
)
FX_ReallocOrDie
(
ptr
size
sizeof
(
type
)
)
#
define
FX_TryAlloc
(
type
size
)
(
type
*
)
calloc
(
size
sizeof
(
type
)
)
#
define
FX_TryRealloc
(
type
ptr
size
)
\
(
type
*
)
FX_SafeRealloc
(
ptr
size
sizeof
(
type
)
)
#
define
FX_Free
(
ptr
)
free
(
ptr
)
#
define
FX_ArraySize
(
array
)
(
sizeof
(
ArraySizeHelper
(
array
)
)
)
template
<
typename
T
size_t
N
>
char
(
&
ArraySizeHelper
(
T
(
&
array
)
[
N
]
)
)
[
N
]
;
struct
FxFreeDeleter
{
inline
void
operator
(
)
(
void
*
ptr
)
const
{
FX_Free
(
ptr
)
;
}
}
;
template
<
class
T
>
struct
ReleaseDeleter
{
inline
void
operator
(
)
(
T
*
ptr
)
const
{
ptr
-
>
Release
(
)
;
}
}
;
#
endif
#
endif
