#
ifndef
CORE_FXCRT_CFX_STRING_DATA_TEMPLATE_H_
#
define
CORE_FXCRT_CFX_STRING_DATA_TEMPLATE_H_
#
include
"
core
/
fxcrt
/
fx_memory
.
h
"
#
include
"
core
/
fxcrt
/
fx_system
.
h
"
#
include
"
third_party
/
base
/
numerics
/
safe_math
.
h
"
template
<
typename
CharType
>
class
CFX_StringDataTemplate
{
public
:
static
CFX_StringDataTemplate
*
Create
(
FX_STRSIZE
nLen
)
{
ASSERT
(
nLen
>
0
)
;
int
overhead
=
offsetof
(
CFX_StringDataTemplate
m_String
)
+
sizeof
(
CharType
)
;
pdfium
:
:
base
:
:
CheckedNumeric
<
int
>
nSize
=
nLen
;
nSize
*
=
sizeof
(
CharType
)
;
nSize
+
=
overhead
;
nSize
+
=
7
;
nSize
&
=
~
7
;
int
totalSize
=
nSize
.
ValueOrDie
(
)
;
int
usableLen
=
(
totalSize
-
overhead
)
/
sizeof
(
CharType
)
;
ASSERT
(
usableLen
>
=
nLen
)
;
void
*
pData
=
FX_Alloc
(
uint8_t
totalSize
)
;
return
new
(
pData
)
CFX_StringDataTemplate
(
nLen
usableLen
)
;
}
static
CFX_StringDataTemplate
*
Create
(
const
CFX_StringDataTemplate
&
other
)
{
CFX_StringDataTemplate
*
result
=
Create
(
other
.
m_nDataLength
)
;
result
-
>
CopyContents
(
other
)
;
return
result
;
}
static
CFX_StringDataTemplate
*
Create
(
const
CharType
*
pStr
FX_STRSIZE
nLen
)
{
CFX_StringDataTemplate
*
result
=
Create
(
nLen
)
;
result
-
>
CopyContents
(
pStr
nLen
)
;
return
result
;
}
void
Retain
(
)
{
+
+
m_nRefs
;
}
void
Release
(
)
{
if
(
-
-
m_nRefs
<
=
0
)
FX_Free
(
this
)
;
}
bool
CanOperateInPlace
(
FX_STRSIZE
nTotalLen
)
const
{
return
m_nRefs
<
=
1
&
&
nTotalLen
<
=
m_nAllocLength
;
}
void
CopyContents
(
const
CFX_StringDataTemplate
&
other
)
{
ASSERT
(
other
.
m_nDataLength
<
=
m_nAllocLength
)
;
FXSYS_memcpy
(
m_String
other
.
m_String
(
other
.
m_nDataLength
+
1
)
*
sizeof
(
CharType
)
)
;
}
void
CopyContents
(
const
CharType
*
pStr
FX_STRSIZE
nLen
)
{
ASSERT
(
nLen
>
=
0
&
&
nLen
<
=
m_nAllocLength
)
;
FXSYS_memcpy
(
m_String
pStr
nLen
*
sizeof
(
CharType
)
)
;
m_String
[
nLen
]
=
0
;
}
void
CopyContentsAt
(
FX_STRSIZE
offset
const
CharType
*
pStr
FX_STRSIZE
nLen
)
{
ASSERT
(
offset
>
=
0
&
&
nLen
>
=
0
&
&
offset
+
nLen
<
=
m_nAllocLength
)
;
FXSYS_memcpy
(
m_String
+
offset
pStr
nLen
*
sizeof
(
CharType
)
)
;
m_String
[
offset
+
nLen
]
=
0
;
}
intptr_t
m_nRefs
;
FX_STRSIZE
m_nDataLength
;
FX_STRSIZE
m_nAllocLength
;
CharType
m_String
[
1
]
;
private
:
CFX_StringDataTemplate
(
FX_STRSIZE
dataLen
FX_STRSIZE
allocLen
)
:
m_nRefs
(
0
)
m_nDataLength
(
dataLen
)
m_nAllocLength
(
allocLen
)
{
ASSERT
(
dataLen
>
=
0
)
;
ASSERT
(
dataLen
<
=
allocLen
)
;
m_String
[
dataLen
]
=
0
;
}
~
CFX_StringDataTemplate
(
)
=
delete
;
}
;
extern
template
class
CFX_StringDataTemplate
<
FX_CHAR
>
;
extern
template
class
CFX_StringDataTemplate
<
FX_WCHAR
>
;
#
endif
