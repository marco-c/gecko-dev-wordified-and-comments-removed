#
ifndef
CORE_FXCRT_CFX_SHARED_COPY_ON_WRITE_H_
#
define
CORE_FXCRT_CFX_SHARED_COPY_ON_WRITE_H_
#
include
"
core
/
fxcrt
/
cfx_retain_ptr
.
h
"
#
include
"
core
/
fxcrt
/
fx_system
.
h
"
template
<
class
ObjClass
>
class
CFX_SharedCopyOnWrite
{
public
:
CFX_SharedCopyOnWrite
(
)
{
}
CFX_SharedCopyOnWrite
(
const
CFX_SharedCopyOnWrite
&
other
)
:
m_pObject
(
other
.
m_pObject
)
{
}
~
CFX_SharedCopyOnWrite
(
)
{
}
template
<
typename
.
.
.
Args
>
ObjClass
*
Emplace
(
Args
.
.
.
params
)
{
m_pObject
.
Reset
(
new
CountedObj
(
params
.
.
.
)
)
;
return
m_pObject
.
Get
(
)
;
}
CFX_SharedCopyOnWrite
&
operator
=
(
const
CFX_SharedCopyOnWrite
&
that
)
{
if
(
*
this
!
=
that
)
m_pObject
=
that
.
m_pObject
;
return
*
this
;
}
void
SetNull
(
)
{
m_pObject
.
Reset
(
)
;
}
const
ObjClass
*
GetObject
(
)
const
{
return
m_pObject
.
Get
(
)
;
}
template
<
typename
.
.
.
Args
>
ObjClass
*
GetPrivateCopy
(
Args
.
.
.
params
)
{
if
(
!
m_pObject
)
return
Emplace
(
params
.
.
.
)
;
if
(
!
m_pObject
-
>
HasOneRef
(
)
)
m_pObject
.
Reset
(
new
CountedObj
(
*
m_pObject
)
)
;
return
m_pObject
.
Get
(
)
;
}
bool
operator
=
=
(
const
CFX_SharedCopyOnWrite
&
that
)
const
{
return
m_pObject
=
=
that
.
m_pObject
;
}
bool
operator
!
=
(
const
CFX_SharedCopyOnWrite
&
that
)
const
{
return
!
(
*
this
=
=
that
)
;
}
explicit
operator
bool
(
)
const
{
return
!
!
m_pObject
;
}
private
:
class
CountedObj
:
public
ObjClass
{
public
:
template
<
typename
.
.
.
Args
>
CountedObj
(
Args
.
.
.
params
)
:
ObjClass
(
params
.
.
.
)
m_RefCount
(
0
)
{
}
CountedObj
(
const
CountedObj
&
src
)
:
ObjClass
(
src
)
m_RefCount
(
0
)
{
}
~
CountedObj
(
)
{
m_RefCount
=
0
;
}
bool
HasOneRef
(
)
const
{
return
m_RefCount
=
=
1
;
}
void
Retain
(
)
{
m_RefCount
+
+
;
}
void
Release
(
)
{
ASSERT
(
m_RefCount
)
;
if
(
-
-
m_RefCount
=
=
0
)
delete
this
;
}
private
:
intptr_t
m_RefCount
;
}
;
CFX_RetainPtr
<
CountedObj
>
m_pObject
;
}
;
#
endif
