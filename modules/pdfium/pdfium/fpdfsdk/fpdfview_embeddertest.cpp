#
include
<
limits
>
#
include
<
string
>
#
include
"
fpdfsdk
/
fpdfview_c_api_test
.
h
"
#
include
"
public
/
fpdfview
.
h
"
#
include
"
testing
/
embedder_test
.
h
"
#
include
"
testing
/
gtest
/
include
/
gtest
/
gtest
.
h
"
TEST
(
fpdf
CApiTest
)
{
EXPECT_TRUE
(
CheckPDFiumCApi
(
)
)
;
}
class
FPDFViewEmbeddertest
:
public
EmbedderTest
{
}
;
TEST_F
(
FPDFViewEmbeddertest
Document
)
{
EXPECT_TRUE
(
OpenDocument
(
"
about_blank
.
pdf
"
)
)
;
EXPECT_EQ
(
1
GetPageCount
(
)
)
;
EXPECT_EQ
(
0
GetFirstPageNum
(
)
)
;
int
version
;
EXPECT_TRUE
(
FPDF_GetFileVersion
(
document
(
)
&
version
)
)
;
EXPECT_EQ
(
14
version
)
;
EXPECT_EQ
(
0xFFFFFFFF
FPDF_GetDocPermissions
(
document
(
)
)
)
;
EXPECT_EQ
(
-
1
FPDF_GetSecurityHandlerRevision
(
document
(
)
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
EmptyDocument
)
{
EXPECT_TRUE
(
CreateEmptyDocument
(
)
)
;
{
int
version
=
42
;
EXPECT_FALSE
(
FPDF_GetFileVersion
(
document
(
)
&
version
)
)
;
EXPECT_EQ
(
0
version
)
;
}
{
#
ifndef
PDF_ENABLE_XFA
const
unsigned
long
kExpected
=
0
;
#
else
const
unsigned
long
kExpected
=
static_cast
<
uint32_t
>
(
-
1
)
;
#
endif
EXPECT_EQ
(
kExpected
FPDF_GetDocPermissions
(
document
(
)
)
)
;
}
EXPECT_EQ
(
-
1
FPDF_GetSecurityHandlerRevision
(
document
(
)
)
)
;
EXPECT_EQ
(
0
FPDF_GetPageCount
(
document
(
)
)
)
;
EXPECT_TRUE
(
FPDF_VIEWERREF_GetPrintScaling
(
document
(
)
)
)
;
EXPECT_EQ
(
1
FPDF_VIEWERREF_GetNumCopies
(
document
(
)
)
)
;
EXPECT_EQ
(
DuplexUndefined
FPDF_VIEWERREF_GetDuplex
(
document
(
)
)
)
;
char
buf
[
100
]
;
EXPECT_EQ
(
0U
FPDF_VIEWERREF_GetName
(
document
(
)
"
foo
"
nullptr
0
)
)
;
EXPECT_EQ
(
0U
FPDF_VIEWERREF_GetName
(
document
(
)
"
foo
"
buf
sizeof
(
buf
)
)
)
;
EXPECT_EQ
(
0u
FPDF_CountNamedDests
(
document
(
)
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
Page
)
{
EXPECT_TRUE
(
OpenDocument
(
"
about_blank
.
pdf
"
)
)
;
FPDF_PAGE
page
=
LoadPage
(
0
)
;
EXPECT_NE
(
nullptr
page
)
;
EXPECT_EQ
(
612
.
0
FPDF_GetPageWidth
(
page
)
)
;
EXPECT_EQ
(
792
.
0
FPDF_GetPageHeight
(
page
)
)
;
UnloadPage
(
page
)
;
EXPECT_EQ
(
nullptr
LoadPage
(
1
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
ViewerRefDummy
)
{
EXPECT_TRUE
(
OpenDocument
(
"
about_blank
.
pdf
"
)
)
;
EXPECT_TRUE
(
FPDF_VIEWERREF_GetPrintScaling
(
document
(
)
)
)
;
EXPECT_EQ
(
1
FPDF_VIEWERREF_GetNumCopies
(
document
(
)
)
)
;
EXPECT_EQ
(
DuplexUndefined
FPDF_VIEWERREF_GetDuplex
(
document
(
)
)
)
;
char
buf
[
100
]
;
EXPECT_EQ
(
0U
FPDF_VIEWERREF_GetName
(
document
(
)
"
foo
"
nullptr
0
)
)
;
EXPECT_EQ
(
0U
FPDF_VIEWERREF_GetName
(
document
(
)
"
foo
"
buf
sizeof
(
buf
)
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
ViewerRef
)
{
EXPECT_TRUE
(
OpenDocument
(
"
viewer_ref
.
pdf
"
)
)
;
EXPECT_TRUE
(
FPDF_VIEWERREF_GetPrintScaling
(
document
(
)
)
)
;
EXPECT_EQ
(
5
FPDF_VIEWERREF_GetNumCopies
(
document
(
)
)
)
;
EXPECT_EQ
(
DuplexUndefined
FPDF_VIEWERREF_GetDuplex
(
document
(
)
)
)
;
char
buf
[
100
]
;
EXPECT_EQ
(
0U
FPDF_VIEWERREF_GetName
(
document
(
)
"
"
buf
sizeof
(
buf
)
)
)
;
EXPECT_EQ
(
0U
FPDF_VIEWERREF_GetName
(
document
(
)
"
foo
"
nullptr
0
)
)
;
EXPECT_EQ
(
0U
FPDF_VIEWERREF_GetName
(
document
(
)
"
foo
"
buf
sizeof
(
buf
)
)
)
;
strcpy
(
buf
"
ABCD
"
)
;
EXPECT_EQ
(
4U
FPDF_VIEWERREF_GetName
(
document
(
)
"
Foo
"
buf
1
)
)
;
EXPECT_STREQ
(
"
ABCD
"
buf
)
;
EXPECT_EQ
(
4U
FPDF_VIEWERREF_GetName
(
document
(
)
"
Foo
"
nullptr
sizeof
(
buf
)
)
)
;
ASSERT_EQ
(
4U
FPDF_VIEWERREF_GetName
(
document
(
)
"
Foo
"
buf
sizeof
(
buf
)
)
)
;
EXPECT_STREQ
(
"
foo
"
buf
)
;
EXPECT_EQ
(
0U
FPDF_VIEWERREF_GetName
(
document
(
)
"
HideToolbar
"
buf
sizeof
(
buf
)
)
)
;
EXPECT_EQ
(
0U
FPDF_VIEWERREF_GetName
(
document
(
)
"
NumCopies
"
buf
sizeof
(
buf
)
)
)
;
ASSERT_EQ
(
4U
FPDF_VIEWERREF_GetName
(
document
(
)
"
Direction
"
buf
sizeof
(
buf
)
)
)
;
EXPECT_STREQ
(
"
R2L
"
buf
)
;
ASSERT_EQ
(
8U
FPDF_VIEWERREF_GetName
(
document
(
)
"
ViewArea
"
buf
sizeof
(
buf
)
)
)
;
EXPECT_STREQ
(
"
CropBox
"
buf
)
;
}
TEST_F
(
FPDFViewEmbeddertest
NamedDests
)
{
EXPECT_TRUE
(
OpenDocument
(
"
named_dests
.
pdf
"
)
)
;
long
buffer_size
;
char
fixed_buffer
[
512
]
;
FPDF_DEST
dest
;
buffer_size
=
2000000
;
dest
=
FPDF_GetNamedDest
(
document
(
)
0
nullptr
&
buffer_size
)
;
EXPECT_NE
(
nullptr
dest
)
;
EXPECT_EQ
(
12
buffer_size
)
;
buffer_size
=
10
;
dest
=
FPDF_GetNamedDest
(
document
(
)
0
fixed_buffer
&
buffer_size
)
;
EXPECT_NE
(
nullptr
dest
)
;
EXPECT_EQ
(
-
1
buffer_size
)
;
buffer_size
=
12
;
dest
=
FPDF_GetNamedDest
(
document
(
)
0
fixed_buffer
&
buffer_size
)
;
EXPECT_NE
(
nullptr
dest
)
;
EXPECT_EQ
(
12
buffer_size
)
;
EXPECT_EQ
(
std
:
:
string
(
"
F
\
0i
\
0r
\
0s
\
0t
\
0
\
0
\
0
"
12
)
std
:
:
string
(
fixed_buffer
buffer_size
)
)
;
buffer_size
=
sizeof
(
fixed_buffer
)
;
dest
=
FPDF_GetNamedDest
(
document
(
)
1
fixed_buffer
&
buffer_size
)
;
EXPECT_NE
(
nullptr
dest
)
;
EXPECT_EQ
(
10
buffer_size
)
;
EXPECT_EQ
(
std
:
:
string
(
"
N
\
0e
\
0x
\
0t
\
0
\
0
\
0
"
10
)
std
:
:
string
(
fixed_buffer
buffer_size
)
)
;
buffer_size
=
sizeof
(
fixed_buffer
)
;
dest
=
FPDF_GetNamedDest
(
document
(
)
2
fixed_buffer
&
buffer_size
)
;
EXPECT_EQ
(
nullptr
dest
)
;
EXPECT_EQ
(
sizeof
(
fixed_buffer
)
static_cast
<
size_t
>
(
buffer_size
)
)
;
buffer_size
=
sizeof
(
fixed_buffer
)
;
dest
=
FPDF_GetNamedDest
(
document
(
)
3
fixed_buffer
&
buffer_size
)
;
EXPECT_EQ
(
nullptr
dest
)
;
EXPECT_EQ
(
sizeof
(
fixed_buffer
)
static_cast
<
size_t
>
(
buffer_size
)
)
;
buffer_size
=
sizeof
(
fixed_buffer
)
;
dest
=
FPDF_GetNamedDest
(
document
(
)
4
fixed_buffer
&
buffer_size
)
;
EXPECT_NE
(
nullptr
dest
)
;
EXPECT_EQ
(
30
buffer_size
)
;
EXPECT_EQ
(
std
:
:
string
(
"
F
\
0i
\
0r
\
0s
\
0t
\
0A
\
0l
\
0t
\
0e
\
0r
\
0n
\
0a
\
0t
\
0e
\
0
\
0
\
0
"
30
)
std
:
:
string
(
fixed_buffer
buffer_size
)
)
;
buffer_size
=
sizeof
(
fixed_buffer
)
;
dest
=
FPDF_GetNamedDest
(
document
(
)
5
fixed_buffer
&
buffer_size
)
;
EXPECT_NE
(
nullptr
dest
)
;
EXPECT_EQ
(
28
buffer_size
)
;
EXPECT_EQ
(
std
:
:
string
(
"
L
\
0a
\
0s
\
0t
\
0A
\
0l
\
0t
\
0e
\
0r
\
0n
\
0a
\
0t
\
0e
\
0
\
0
\
0
"
28
)
std
:
:
string
(
fixed_buffer
buffer_size
)
)
;
buffer_size
=
sizeof
(
fixed_buffer
)
;
dest
=
FPDF_GetNamedDest
(
document
(
)
6
fixed_buffer
&
buffer_size
)
;
EXPECT_EQ
(
nullptr
dest
)
;
EXPECT_EQ
(
sizeof
(
fixed_buffer
)
static_cast
<
size_t
>
(
buffer_size
)
)
;
buffer_size
=
sizeof
(
fixed_buffer
)
;
dest
=
FPDF_GetNamedDest
(
document
(
)
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
fixed_buffer
&
buffer_size
)
;
EXPECT_EQ
(
nullptr
dest
)
;
EXPECT_EQ
(
sizeof
(
fixed_buffer
)
static_cast
<
size_t
>
(
buffer_size
)
)
;
buffer_size
=
sizeof
(
fixed_buffer
)
;
dest
=
FPDF_GetNamedDest
(
document
(
)
std
:
:
numeric_limits
<
int
>
:
:
min
(
)
fixed_buffer
&
buffer_size
)
;
EXPECT_EQ
(
nullptr
dest
)
;
EXPECT_EQ
(
sizeof
(
fixed_buffer
)
static_cast
<
size_t
>
(
buffer_size
)
)
;
buffer_size
=
sizeof
(
fixed_buffer
)
;
dest
=
FPDF_GetNamedDest
(
document
(
)
-
1
fixed_buffer
&
buffer_size
)
;
EXPECT_EQ
(
nullptr
dest
)
;
EXPECT_EQ
(
sizeof
(
fixed_buffer
)
static_cast
<
size_t
>
(
buffer_size
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
NamedDestsByName
)
{
EXPECT_TRUE
(
OpenDocument
(
"
named_dests
.
pdf
"
)
)
;
FPDF_DEST
dest
=
FPDF_GetNamedDestByName
(
document
(
)
nullptr
)
;
EXPECT_EQ
(
nullptr
dest
)
;
dest
=
FPDF_GetNamedDestByName
(
document
(
)
"
"
)
;
EXPECT_EQ
(
nullptr
dest
)
;
dest
=
FPDF_GetNamedDestByName
(
document
(
)
"
First
"
)
;
EXPECT_NE
(
nullptr
dest
)
;
long
ignore_len
=
0
;
FPDF_DEST
dest_by_index
=
FPDF_GetNamedDest
(
document
(
)
0
nullptr
&
ignore_len
)
;
EXPECT_EQ
(
dest_by_index
dest
)
;
dest
=
FPDF_GetNamedDestByName
(
document
(
)
"
FirstAlternate
"
)
;
EXPECT_NE
(
nullptr
dest
)
;
ignore_len
=
0
;
dest_by_index
=
FPDF_GetNamedDest
(
document
(
)
4
nullptr
&
ignore_len
)
;
EXPECT_EQ
(
dest_by_index
dest
)
;
dest
=
FPDF_GetNamedDestByName
(
document
(
)
"
WrongType
"
)
;
EXPECT_EQ
(
nullptr
dest
)
;
dest
=
FPDF_GetNamedDestByName
(
document
(
)
"
Bogus
"
)
;
EXPECT_EQ
(
nullptr
dest
)
;
}
TEST_F
(
FPDFViewEmbeddertest
Crasher_113
)
{
EXPECT_TRUE
(
OpenDocument
(
"
bug_113
.
pdf
"
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
Crasher_451830
)
{
EXPECT_FALSE
(
OpenDocument
(
"
bug_451830
.
pdf
"
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
Crasher_452455
)
{
EXPECT_TRUE
(
OpenDocument
(
"
bug_452455
.
pdf
"
)
)
;
FPDF_PAGE
page
=
LoadPage
(
0
)
;
EXPECT_NE
(
nullptr
page
)
;
UnloadPage
(
page
)
;
}
TEST_F
(
FPDFViewEmbeddertest
Crasher_454695
)
{
EXPECT_FALSE
(
OpenDocument
(
"
bug_454695
.
pdf
"
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
Crasher_572871
)
{
EXPECT_TRUE
(
OpenDocument
(
"
bug_572871
.
pdf
"
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
Failed_213
)
{
EXPECT_TRUE
(
OpenDocument
(
"
bug_213
.
pdf
"
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
Hang_298
)
{
EXPECT_FALSE
(
OpenDocument
(
"
bug_298
.
pdf
"
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
CrossRefV4Loop
)
{
EXPECT_TRUE
(
OpenDocument
(
"
bug_xrefv4_loop
.
pdf
"
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
Hang_343
)
{
EXPECT_FALSE
(
OpenDocument
(
"
bug_343
.
pdf
"
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
Hang_344
)
{
EXPECT_FALSE
(
OpenDocument
(
"
bug_344
.
pdf
"
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
Hang_355
)
{
EXPECT_FALSE
(
OpenDocument
(
"
bug_355
.
pdf
"
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
Hang_360
)
{
EXPECT_FALSE
(
OpenDocument
(
"
bug_360
.
pdf
"
)
)
;
}
TEST_F
(
FPDFViewEmbeddertest
FPDF_RenderPageBitmapWithMatrix
)
{
const
char
kAllBlackMd5sum
[
]
=
"
5708fc5c4a8bd0abde99c8e8f0390615
"
;
const
char
kTopLeftQuarterBlackMd5sum
[
]
=
"
24e4d1ec06fa0258af758cfc8b2ad50a
"
;
EXPECT_TRUE
(
OpenDocument
(
"
black
.
pdf
"
)
)
;
FPDF_PAGE
page
=
LoadPage
(
0
)
;
EXPECT_NE
(
nullptr
page
)
;
const
int
width
=
static_cast
<
int
>
(
FPDF_GetPageWidth
(
page
)
)
;
const
int
height
=
static_cast
<
int
>
(
FPDF_GetPageHeight
(
page
)
)
;
EXPECT_EQ
(
612
width
)
;
EXPECT_EQ
(
792
height
)
;
FPDF_BITMAP
bitmap
=
RenderPage
(
page
)
;
CompareBitmap
(
bitmap
width
height
kAllBlackMd5sum
)
;
FPDFBitmap_Destroy
(
bitmap
)
;
FS_MATRIX
matrix
;
matrix
.
a
=
1
;
matrix
.
b
=
0
;
matrix
.
c
=
0
;
matrix
.
d
=
1
;
matrix
.
e
=
0
;
matrix
.
f
=
0
;
FS_RECTF
rect
;
rect
.
left
=
0
;
rect
.
top
=
0
;
rect
.
right
=
width
;
rect
.
bottom
=
height
;
bitmap
=
FPDFBitmap_Create
(
width
height
0
)
;
FPDFBitmap_FillRect
(
bitmap
0
0
width
height
0xFFFFFFFF
)
;
FPDF_RenderPageBitmapWithMatrix
(
bitmap
page
&
matrix
&
rect
0
)
;
CompareBitmap
(
bitmap
width
height
kAllBlackMd5sum
)
;
FPDFBitmap_Destroy
(
bitmap
)
;
matrix
.
a
=
0
.
5
;
matrix
.
d
=
0
.
5
;
bitmap
=
FPDFBitmap_Create
(
width
height
0
)
;
FPDFBitmap_FillRect
(
bitmap
0
0
width
height
0xFFFFFFFF
)
;
FPDF_RenderPageBitmapWithMatrix
(
bitmap
page
&
matrix
&
rect
0
)
;
CompareBitmap
(
bitmap
width
height
kTopLeftQuarterBlackMd5sum
)
;
FPDFBitmap_Destroy
(
bitmap
)
;
UnloadPage
(
page
)
;
}
