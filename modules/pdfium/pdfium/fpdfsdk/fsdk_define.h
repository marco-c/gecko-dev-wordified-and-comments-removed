#
ifndef
FPDFSDK_FSDK_DEFINE_H_
#
define
FPDFSDK_FSDK_DEFINE_H_
#
include
"
core
/
fpdfapi
/
parser
/
cpdf_parser
.
h
"
#
include
"
core
/
fxge
/
fx_dib
.
h
"
#
include
"
public
/
fpdfview
.
h
"
#
ifdef
PDF_ENABLE_XFA
#
include
"
fpdfsdk
/
fpdfxfa
/
cpdfxfa_context
.
h
"
#
endif
#
ifdef
_WIN32
#
include
<
math
.
h
>
#
include
<
tchar
.
h
>
#
endif
class
CPDF_Annot
;
class
CPDF_Page
;
class
CPDF_PageRenderContext
;
class
IFSDK_PAUSE_Adapter
;
CFX_RetainPtr
<
IFX_SeekableReadStream
>
MakeSeekableReadStream
(
FPDF_FILEACCESS
*
pFileAccess
)
;
#
ifdef
PDF_ENABLE_XFA
CFX_RetainPtr
<
IFX_SeekableStream
>
MakeSeekableStream
(
FPDF_FILEHANDLER
*
pFileHandler
)
;
#
endif
#
ifndef
PDF_ENABLE_XFA
using
UnderlyingDocumentType
=
CPDF_Document
;
using
UnderlyingPageType
=
CPDF_Page
;
#
else
using
UnderlyingDocumentType
=
CPDFXFA_Context
;
using
UnderlyingPageType
=
CPDFXFA_Page
;
#
endif
UnderlyingDocumentType
*
UnderlyingFromFPDFDocument
(
FPDF_DOCUMENT
doc
)
;
FPDF_DOCUMENT
FPDFDocumentFromUnderlying
(
UnderlyingDocumentType
*
doc
)
;
UnderlyingPageType
*
UnderlyingFromFPDFPage
(
FPDF_PAGE
page
)
;
CPDF_Document
*
CPDFDocumentFromFPDFDocument
(
FPDF_DOCUMENT
doc
)
;
FPDF_DOCUMENT
FPDFDocumentFromCPDFDocument
(
CPDF_Document
*
doc
)
;
CPDF_Page
*
CPDFPageFromFPDFPage
(
FPDF_PAGE
page
)
;
CFX_DIBitmap
*
CFXBitmapFromFPDFBitmap
(
FPDF_BITMAP
bitmap
)
;
void
FSDK_SetSandBoxPolicy
(
FPDF_DWORD
policy
FPDF_BOOL
enable
)
;
FPDF_BOOL
FSDK_IsSandBoxPolicyEnabled
(
FPDF_DWORD
policy
)
;
void
FPDF_RenderPage_Retail
(
CPDF_PageRenderContext
*
pContext
FPDF_PAGE
page
int
start_x
int
start_y
int
size_x
int
size_y
int
rotate
int
flags
bool
bNeedToRestore
IFSDK_PAUSE_Adapter
*
pause
)
;
void
CheckUnSupportError
(
CPDF_Document
*
pDoc
uint32_t
err_code
)
;
void
CheckUnSupportAnnot
(
CPDF_Document
*
pDoc
const
CPDF_Annot
*
pPDFAnnot
)
;
void
ProcessParseError
(
CPDF_Parser
:
:
Error
err
)
;
#
endif
