#
ifndef
PUBLIC_FPDF_EDIT_H_
#
define
PUBLIC_FPDF_EDIT_H_
#
include
<
stdint
.
h
>
#
include
"
fpdfview
.
h
"
#
define
FPDF_ARGB
(
a
r
g
b
)
\
(
(
uint32_t
)
(
(
(
uint32_t
)
(
b
)
&
0xff
)
|
(
(
(
uint32_t
)
(
g
)
&
0xff
)
<
<
8
)
|
\
(
(
(
uint32_t
)
(
r
)
&
0xff
)
<
<
16
)
|
(
(
(
uint32_t
)
(
a
)
&
0xff
)
<
<
24
)
)
)
#
define
FPDF_GetBValue
(
argb
)
(
(
uint8_t
)
(
argb
)
)
#
define
FPDF_GetGValue
(
argb
)
(
(
uint8_t
)
(
(
(
uint16_t
)
(
argb
)
)
>
>
8
)
)
#
define
FPDF_GetRValue
(
argb
)
(
(
uint8_t
)
(
(
argb
)
>
>
16
)
)
#
define
FPDF_GetAValue
(
argb
)
(
(
uint8_t
)
(
(
argb
)
>
>
24
)
)
#
define
FPDF_PAGEOBJ_TEXT
1
#
define
FPDF_PAGEOBJ_PATH
2
#
define
FPDF_PAGEOBJ_IMAGE
3
#
define
FPDF_PAGEOBJ_SHADING
4
#
define
FPDF_PAGEOBJ_FORM
5
#
define
FPDF_FILLMODE_ALTERNATE
1
#
define
FPDF_FILLMODE_WINDING
2
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
DLLEXPORT
FPDF_DOCUMENT
STDCALL
FPDF_CreateNewDocument
(
)
;
DLLEXPORT
FPDF_PAGE
STDCALL
FPDFPage_New
(
FPDF_DOCUMENT
document
int
page_index
double
width
double
height
)
;
DLLEXPORT
void
STDCALL
FPDFPage_Delete
(
FPDF_DOCUMENT
document
int
page_index
)
;
DLLEXPORT
int
STDCALL
FPDFPage_GetRotation
(
FPDF_PAGE
page
)
;
DLLEXPORT
void
STDCALL
FPDFPage_SetRotation
(
FPDF_PAGE
page
int
rotate
)
;
DLLEXPORT
void
STDCALL
FPDFPage_InsertObject
(
FPDF_PAGE
page
FPDF_PAGEOBJECT
page_obj
)
;
DLLEXPORT
int
STDCALL
FPDFPage_CountObject
(
FPDF_PAGE
page
)
;
DLLEXPORT
FPDF_PAGEOBJECT
STDCALL
FPDFPage_GetObject
(
FPDF_PAGE
page
int
index
)
;
DLLEXPORT
FPDF_BOOL
STDCALL
FPDFPage_HasTransparency
(
FPDF_PAGE
page
)
;
DLLEXPORT
FPDF_BOOL
STDCALL
FPDFPage_GenerateContent
(
FPDF_PAGE
page
)
;
DLLEXPORT
FPDF_BOOL
STDCALL
FPDFPageObj_HasTransparency
(
FPDF_PAGEOBJECT
pageObject
)
;
DLLEXPORT
void
STDCALL
FPDFPageObj_Transform
(
FPDF_PAGEOBJECT
page_object
double
a
double
b
double
c
double
d
double
e
double
f
)
;
DLLEXPORT
void
STDCALL
FPDFPage_TransformAnnots
(
FPDF_PAGE
page
double
a
double
b
double
c
double
d
double
e
double
f
)
;
DLLEXPORT
FPDF_PAGEOBJECT
STDCALL
FPDFPageObj_NewImgeObj
(
FPDF_DOCUMENT
document
)
;
DLLEXPORT
FPDF_BOOL
STDCALL
FPDFImageObj_LoadJpegFile
(
FPDF_PAGE
*
pages
int
nCount
FPDF_PAGEOBJECT
image_object
FPDF_FILEACCESS
*
fileAccess
)
;
DLLEXPORT
FPDF_BOOL
STDCALL
FPDFImageObj_LoadJpegFileInline
(
FPDF_PAGE
*
pages
int
nCount
FPDF_PAGEOBJECT
image_object
FPDF_FILEACCESS
*
fileAccess
)
;
DLLEXPORT
FPDF_BOOL
STDCALL
FPDFImageObj_SetMatrix
(
FPDF_PAGEOBJECT
image_object
double
a
double
b
double
c
double
d
double
e
double
f
)
;
DLLEXPORT
FPDF_BOOL
STDCALL
FPDFImageObj_SetBitmap
(
FPDF_PAGE
*
pages
int
nCount
FPDF_PAGEOBJECT
image_object
FPDF_BITMAP
bitmap
)
;
DLLEXPORT
FPDF_PAGEOBJECT
STDCALL
FPDFPageObj_CreateNewPath
(
float
x
float
y
)
;
DLLEXPORT
FPDF_PAGEOBJECT
STDCALL
FPDFPageObj_CreateNewRect
(
float
x
float
y
float
w
float
h
)
;
DLLEXPORT
FPDF_BOOL
FPDFPath_SetStrokeColor
(
FPDF_PAGEOBJECT
path
unsigned
int
R
unsigned
int
G
unsigned
int
B
unsigned
int
A
)
;
DLLEXPORT
FPDF_BOOL
FPDFPath_SetStrokeWidth
(
FPDF_PAGEOBJECT
path
float
width
)
;
DLLEXPORT
FPDF_BOOL
FPDFPath_SetFillColor
(
FPDF_PAGEOBJECT
path
unsigned
int
R
unsigned
int
G
unsigned
int
B
unsigned
int
A
)
;
DLLEXPORT
FPDF_BOOL
FPDFPath_MoveTo
(
FPDF_PAGEOBJECT
path
float
x
float
y
)
;
DLLEXPORT
FPDF_BOOL
FPDFPath_LineTo
(
FPDF_PAGEOBJECT
path
float
x
float
y
)
;
DLLEXPORT
FPDF_BOOL
FPDFPath_BezierTo
(
FPDF_PAGEOBJECT
path
float
x1
float
y1
float
x2
float
y2
float
x3
float
y3
)
;
DLLEXPORT
FPDF_BOOL
FPDFPath_Close
(
FPDF_PAGEOBJECT
path
)
;
DLLEXPORT
FPDF_BOOL
FPDFPath_SetDrawMode
(
FPDF_PAGEOBJECT
path
int
fillmode
FPDF_BOOL
stroke
)
;
DLLEXPORT
FPDF_PAGEOBJECT
STDCALL
FPDFPageObj_NewTextObj
(
FPDF_DOCUMENT
document
FPDF_BYTESTRING
font
float
font_size
)
;
DLLEXPORT
FPDF_BOOL
STDCALL
FPDFText_SetText
(
FPDF_PAGEOBJECT
text_object
FPDF_BYTESTRING
text
)
;
DLLEXPORT
FPDF_FONT
STDCALL
FPDFText_LoadType1Font
(
FPDF_DOCUMENT
document
const
uint8_t
*
data
uint32_t
size
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
