#
ifndef
PUBLIC_FPDFVIEW_H_
#
define
PUBLIC_FPDFVIEW_H_
#
if
defined
(
_WIN32
)
&
&
!
defined
(
__WINDOWS__
)
#
include
<
windows
.
h
>
#
endif
#
ifdef
PDF_ENABLE_XFA
#
define
PDF_USE_XFA
#
endif
typedef
void
*
FPDF_ACTION
;
typedef
void
*
FPDF_BITMAP
;
typedef
void
*
FPDF_BOOKMARK
;
typedef
void
*
FPDF_CLIPPATH
;
typedef
void
*
FPDF_DEST
;
typedef
void
*
FPDF_DOCSCHHANDLE
;
typedef
void
*
FPDF_DOCUMENT
;
typedef
void
*
FPDF_FONT
;
typedef
void
*
FPDF_HMODULE
;
typedef
void
*
FPDF_LINK
;
typedef
void
*
FPDF_MODULEMGR
;
typedef
void
*
FPDF_PAGE
;
typedef
void
*
FPDF_PAGELINK
;
typedef
void
*
FPDF_PAGEOBJECT
;
typedef
void
*
FPDF_PAGERANGE
;
typedef
void
*
FPDF_PATH
;
typedef
void
*
FPDF_RECORDER
;
typedef
void
*
FPDF_SCHHANDLE
;
typedef
void
*
FPDF_STRUCTELEMENT
;
typedef
void
*
FPDF_STRUCTTREE
;
typedef
void
*
FPDF_TEXTPAGE
;
#
ifdef
PDF_ENABLE_XFA
typedef
void
*
FPDF_STRINGHANDLE
;
typedef
void
*
FPDF_WIDGET
;
#
endif
typedef
int
FPDF_BOOL
;
typedef
int
FPDF_ERROR
;
typedef
unsigned
long
FPDF_DWORD
;
typedef
float
FS_FLOAT
;
#
ifdef
PDF_ENABLE_XFA
typedef
void
*
FPDF_LPVOID
;
typedef
void
const
*
FPDF_LPCVOID
;
typedef
char
const
*
FPDF_LPCSTR
;
typedef
int
FPDF_RESULT
;
#
endif
typedef
enum
_FPDF_DUPLEXTYPE_
{
DuplexUndefined
=
0
Simplex
DuplexFlipShortEdge
DuplexFlipLongEdge
}
FPDF_DUPLEXTYPE
;
typedef
unsigned
short
FPDF_WCHAR
;
typedef
unsigned
char
const
*
FPDF_LPCBYTE
;
typedef
const
char
*
FPDF_BYTESTRING
;
typedef
const
unsigned
short
*
FPDF_WIDESTRING
;
#
ifdef
PDF_ENABLE_XFA
typedef
struct
_FPDF_BSTR
{
char
*
str
;
int
len
;
}
FPDF_BSTR
;
#
endif
typedef
const
char
*
FPDF_STRING
;
typedef
struct
_FS_MATRIX_
{
float
a
;
float
b
;
float
c
;
float
d
;
float
e
;
float
f
;
}
FS_MATRIX
;
typedef
struct
_FS_RECTF_
{
float
left
;
float
top
;
float
right
;
float
bottom
;
}
*
FS_LPRECTF
FS_RECTF
;
typedef
const
FS_RECTF
*
FS_LPCRECTF
;
#
if
defined
(
_WIN32
)
&
&
defined
(
FPDFSDK_EXPORTS
)
#
define
DLLEXPORT
__declspec
(
dllexport
)
#
define
STDCALL
__stdcall
#
else
#
define
DLLEXPORT
#
define
STDCALL
#
endif
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
DLLEXPORT
void
STDCALL
FPDF_InitLibrary
(
)
;
typedef
struct
FPDF_LIBRARY_CONFIG_
{
int
version
;
const
char
*
*
m_pUserFontPaths
;
void
*
m_pIsolate
;
unsigned
int
m_v8EmbedderSlot
;
}
FPDF_LIBRARY_CONFIG
;
DLLEXPORT
void
STDCALL
FPDF_InitLibraryWithConfig
(
const
FPDF_LIBRARY_CONFIG
*
config
)
;
DLLEXPORT
void
STDCALL
FPDF_DestroyLibrary
(
)
;
#
define
FPDF_POLICY_MACHINETIME_ACCESS
0
DLLEXPORT
void
STDCALL
FPDF_SetSandBoxPolicy
(
FPDF_DWORD
policy
FPDF_BOOL
enable
)
;
#
if
defined
(
_WIN32
)
#
if
defined
(
PDFIUM_PRINT_TEXT_WITH_GDI
)
typedef
void
(
*
PDFiumEnsureTypefaceCharactersAccessible
)
(
const
LOGFONT
*
font
const
wchar_t
*
text
size_t
text_length
)
;
DLLEXPORT
void
STDCALL
FPDF_SetTypefaceAccessibleFunc
(
PDFiumEnsureTypefaceCharactersAccessible
func
)
;
DLLEXPORT
void
STDCALL
FPDF_SetPrintTextWithGDI
(
FPDF_BOOL
use_gdi
)
;
#
endif
DLLEXPORT
FPDF_BOOL
STDCALL
FPDF_SetPrintPostscriptLevel
(
FPDF_BOOL
postscript_level
)
;
#
endif
DLLEXPORT
FPDF_DOCUMENT
STDCALL
FPDF_LoadDocument
(
FPDF_STRING
file_path
FPDF_BYTESTRING
password
)
;
DLLEXPORT
FPDF_DOCUMENT
STDCALL
FPDF_LoadMemDocument
(
const
void
*
data_buf
int
size
FPDF_BYTESTRING
password
)
;
typedef
struct
{
unsigned
long
m_FileLen
;
int
(
*
m_GetBlock
)
(
void
*
param
unsigned
long
position
unsigned
char
*
pBuf
unsigned
long
size
)
;
void
*
m_Param
;
}
FPDF_FILEACCESS
;
#
ifdef
PDF_ENABLE_XFA
typedef
struct
_FPDF_FILEHANDLER
{
FPDF_LPVOID
clientData
;
void
(
*
Release
)
(
FPDF_LPVOID
clientData
)
;
FPDF_DWORD
(
*
GetSize
)
(
FPDF_LPVOID
clientData
)
;
FPDF_RESULT
(
*
ReadBlock
)
(
FPDF_LPVOID
clientData
FPDF_DWORD
offset
FPDF_LPVOID
buffer
FPDF_DWORD
size
)
;
FPDF_RESULT
(
*
WriteBlock
)
(
FPDF_LPVOID
clientData
FPDF_DWORD
offset
FPDF_LPCVOID
buffer
FPDF_DWORD
size
)
;
FPDF_RESULT
(
*
Flush
)
(
FPDF_LPVOID
clientData
)
;
FPDF_RESULT
(
*
Truncate
)
(
FPDF_LPVOID
clientData
FPDF_DWORD
size
)
;
}
FPDF_FILEHANDLER
*
FPDF_LPFILEHANDLER
;
#
endif
DLLEXPORT
FPDF_DOCUMENT
STDCALL
FPDF_LoadCustomDocument
(
FPDF_FILEACCESS
*
pFileAccess
FPDF_BYTESTRING
password
)
;
DLLEXPORT
FPDF_BOOL
STDCALL
FPDF_GetFileVersion
(
FPDF_DOCUMENT
doc
int
*
fileVersion
)
;
#
define
FPDF_ERR_SUCCESS
0
/
/
No
error
.
#
define
FPDF_ERR_UNKNOWN
1
/
/
Unknown
error
.
#
define
FPDF_ERR_FILE
2
/
/
File
not
found
or
could
not
be
opened
.
#
define
FPDF_ERR_FORMAT
3
/
/
File
not
in
PDF
format
or
corrupted
.
#
define
FPDF_ERR_PASSWORD
4
/
/
Password
required
or
incorrect
password
.
#
define
FPDF_ERR_SECURITY
5
/
/
Unsupported
security
scheme
.
#
define
FPDF_ERR_PAGE
6
/
/
Page
not
found
or
content
error
.
#
ifdef
PDF_ENABLE_XFA
#
define
FPDF_ERR_XFALOAD
7
/
/
Load
XFA
error
.
#
define
FPDF_ERR_XFALAYOUT
8
/
/
Layout
XFA
error
.
#
endif
DLLEXPORT
unsigned
long
STDCALL
FPDF_GetLastError
(
)
;
DLLEXPORT
unsigned
long
STDCALL
FPDF_GetDocPermissions
(
FPDF_DOCUMENT
document
)
;
DLLEXPORT
int
STDCALL
FPDF_GetSecurityHandlerRevision
(
FPDF_DOCUMENT
document
)
;
DLLEXPORT
int
STDCALL
FPDF_GetPageCount
(
FPDF_DOCUMENT
document
)
;
DLLEXPORT
FPDF_PAGE
STDCALL
FPDF_LoadPage
(
FPDF_DOCUMENT
document
int
page_index
)
;
DLLEXPORT
double
STDCALL
FPDF_GetPageWidth
(
FPDF_PAGE
page
)
;
DLLEXPORT
double
STDCALL
FPDF_GetPageHeight
(
FPDF_PAGE
page
)
;
DLLEXPORT
int
STDCALL
FPDF_GetPageSizeByIndex
(
FPDF_DOCUMENT
document
int
page_index
double
*
width
double
*
height
)
;
#
define
FPDF_ANNOT
0x01
#
define
FPDF_LCD_TEXT
0x02
#
define
FPDF_NO_NATIVETEXT
0x04
#
define
FPDF_GRAYSCALE
0x08
#
define
FPDF_DEBUG_INFO
0x80
#
define
FPDF_NO_CATCH
0x100
#
define
FPDF_RENDER_LIMITEDIMAGECACHE
0x200
#
define
FPDF_RENDER_FORCEHALFTONE
0x400
#
define
FPDF_PRINTING
0x800
#
define
FPDF_RENDER_NO_SMOOTHTEXT
0x1000
#
define
FPDF_RENDER_NO_SMOOTHIMAGE
0x2000
#
define
FPDF_RENDER_NO_SMOOTHPATH
0x4000
#
define
FPDF_REVERSE_BYTE_ORDER
0x10
#
ifdef
_WIN32
DLLEXPORT
void
STDCALL
FPDF_RenderPage
(
HDC
dc
FPDF_PAGE
page
int
start_x
int
start_y
int
size_x
int
size_y
int
rotate
int
flags
)
;
#
endif
DLLEXPORT
void
STDCALL
FPDF_RenderPageBitmap
(
FPDF_BITMAP
bitmap
FPDF_PAGE
page
int
start_x
int
start_y
int
size_x
int
size_y
int
rotate
int
flags
)
;
DLLEXPORT
void
STDCALL
FPDF_RenderPageBitmapWithMatrix
(
FPDF_BITMAP
bitmap
FPDF_PAGE
page
const
FS_MATRIX
*
matrix
const
FS_RECTF
*
clipping
int
flags
)
;
#
ifdef
_SKIA_SUPPORT_
DLLEXPORT
FPDF_RECORDER
STDCALL
FPDF_RenderPageSkp
(
FPDF_PAGE
page
int
size_x
int
size_y
)
;
#
endif
DLLEXPORT
void
STDCALL
FPDF_ClosePage
(
FPDF_PAGE
page
)
;
DLLEXPORT
void
STDCALL
FPDF_CloseDocument
(
FPDF_DOCUMENT
document
)
;
DLLEXPORT
void
STDCALL
FPDF_DeviceToPage
(
FPDF_PAGE
page
int
start_x
int
start_y
int
size_x
int
size_y
int
rotate
int
device_x
int
device_y
double
*
page_x
double
*
page_y
)
;
DLLEXPORT
void
STDCALL
FPDF_PageToDevice
(
FPDF_PAGE
page
int
start_x
int
start_y
int
size_x
int
size_y
int
rotate
double
page_x
double
page_y
int
*
device_x
int
*
device_y
)
;
DLLEXPORT
FPDF_BITMAP
STDCALL
FPDFBitmap_Create
(
int
width
int
height
int
alpha
)
;
#
define
FPDFBitmap_Gray
1
#
define
FPDFBitmap_BGR
2
#
define
FPDFBitmap_BGRx
3
#
define
FPDFBitmap_BGRA
4
DLLEXPORT
FPDF_BITMAP
STDCALL
FPDFBitmap_CreateEx
(
int
width
int
height
int
format
void
*
first_scan
int
stride
)
;
DLLEXPORT
void
STDCALL
FPDFBitmap_FillRect
(
FPDF_BITMAP
bitmap
int
left
int
top
int
width
int
height
FPDF_DWORD
color
)
;
DLLEXPORT
void
*
STDCALL
FPDFBitmap_GetBuffer
(
FPDF_BITMAP
bitmap
)
;
DLLEXPORT
int
STDCALL
FPDFBitmap_GetWidth
(
FPDF_BITMAP
bitmap
)
;
DLLEXPORT
int
STDCALL
FPDFBitmap_GetHeight
(
FPDF_BITMAP
bitmap
)
;
DLLEXPORT
int
STDCALL
FPDFBitmap_GetStride
(
FPDF_BITMAP
bitmap
)
;
DLLEXPORT
void
STDCALL
FPDFBitmap_Destroy
(
FPDF_BITMAP
bitmap
)
;
DLLEXPORT
FPDF_BOOL
STDCALL
FPDF_VIEWERREF_GetPrintScaling
(
FPDF_DOCUMENT
document
)
;
DLLEXPORT
int
STDCALL
FPDF_VIEWERREF_GetNumCopies
(
FPDF_DOCUMENT
document
)
;
DLLEXPORT
FPDF_PAGERANGE
STDCALL
FPDF_VIEWERREF_GetPrintPageRange
(
FPDF_DOCUMENT
document
)
;
DLLEXPORT
FPDF_DUPLEXTYPE
STDCALL
FPDF_VIEWERREF_GetDuplex
(
FPDF_DOCUMENT
document
)
;
DLLEXPORT
unsigned
long
STDCALL
FPDF_VIEWERREF_GetName
(
FPDF_DOCUMENT
document
FPDF_BYTESTRING
key
char
*
buffer
unsigned
long
length
)
;
DLLEXPORT
FPDF_DWORD
STDCALL
FPDF_CountNamedDests
(
FPDF_DOCUMENT
document
)
;
DLLEXPORT
FPDF_DEST
STDCALL
FPDF_GetNamedDestByName
(
FPDF_DOCUMENT
document
FPDF_BYTESTRING
name
)
;
DLLEXPORT
FPDF_DEST
STDCALL
FPDF_GetNamedDest
(
FPDF_DOCUMENT
document
int
index
void
*
buffer
long
*
buflen
)
;
#
ifdef
PDF_ENABLE_XFA
DLLEXPORT
FPDF_RESULT
STDCALL
FPDF_BStr_Init
(
FPDF_BSTR
*
str
)
;
DLLEXPORT
FPDF_RESULT
STDCALL
FPDF_BStr_Set
(
FPDF_BSTR
*
str
FPDF_LPCSTR
bstr
int
length
)
;
DLLEXPORT
FPDF_RESULT
STDCALL
FPDF_BStr_Clear
(
FPDF_BSTR
*
str
)
;
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
