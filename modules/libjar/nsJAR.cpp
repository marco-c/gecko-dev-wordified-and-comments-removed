#
include
<
string
.
h
>
#
include
"
nsJARInputStream
.
h
"
#
include
"
nsJAR
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
Omnijar
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
ifdef
XP_UNIX
#
include
<
sys
/
stat
.
h
>
#
elif
defined
(
XP_WIN
)
#
include
<
io
.
h
>
#
endif
using
namespace
mozilla
;
nsJAR
:
:
nsJAR
(
)
:
mZip
(
new
nsZipArchive
(
)
)
mReleaseTime
(
PR_INTERVAL_NO_TIMEOUT
)
mCache
(
nullptr
)
mLock
(
"
nsJAR
:
:
mLock
"
)
mMtime
(
0
)
mOpened
(
false
)
mIsOmnijar
(
false
)
{
}
nsJAR
:
:
~
nsJAR
(
)
{
Close
(
)
;
}
NS_IMPL_QUERY_INTERFACE
(
nsJAR
nsIZipReader
)
NS_IMPL_ADDREF
(
nsJAR
)
MozExternalRefCountType
nsJAR
:
:
Release
(
void
)
{
nsrefcnt
count
;
MOZ_ASSERT
(
0
!
=
mRefCnt
"
dup
release
"
)
;
RefPtr
<
nsZipReaderCache
>
cache
;
if
(
mRefCnt
=
=
2
)
{
MutexAutoLock
lock
(
mLock
)
;
cache
=
mCache
;
mCache
=
nullptr
;
}
if
(
cache
)
{
DebugOnly
<
nsresult
>
rv
=
cache
-
>
ReleaseZip
(
this
)
;
MOZ_ASSERT
(
NS_SUCCEEDED
(
rv
)
"
failed
to
release
zip
file
"
)
;
}
count
=
-
-
mRefCnt
;
NS_LOG_RELEASE
(
this
count
"
nsJAR
"
)
;
if
(
0
=
=
count
)
{
mRefCnt
=
1
;
delete
this
;
return
0
;
}
return
count
;
}
NS_IMETHODIMP
nsJAR
:
:
Open
(
nsIFile
*
zipFile
)
{
NS_ENSURE_ARG_POINTER
(
zipFile
)
;
if
(
mOpened
)
return
NS_ERROR_FAILURE
;
mZipFile
=
zipFile
;
mOuterZipEntry
.
Truncate
(
)
;
mOpened
=
true
;
RefPtr
<
nsZipArchive
>
zip
=
mozilla
:
:
Omnijar
:
:
GetReader
(
zipFile
)
;
if
(
zip
)
{
mZip
=
zip
;
mIsOmnijar
=
true
;
return
NS_OK
;
}
return
mZip
-
>
OpenArchive
(
zipFile
)
;
}
NS_IMETHODIMP
nsJAR
:
:
OpenInner
(
nsIZipReader
*
aZipReader
const
nsACString
&
aZipEntry
)
{
NS_ENSURE_ARG_POINTER
(
aZipReader
)
;
if
(
mOpened
)
return
NS_ERROR_FAILURE
;
bool
exist
;
nsresult
rv
=
aZipReader
-
>
HasEntry
(
aZipEntry
&
exist
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
exist
NS_ERROR_FILE_NOT_FOUND
)
;
rv
=
aZipReader
-
>
GetFile
(
getter_AddRefs
(
mZipFile
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mOpened
=
true
;
mOuterZipEntry
.
Assign
(
aZipEntry
)
;
RefPtr
<
nsZipHandle
>
handle
;
rv
=
nsZipHandle
:
:
Init
(
static_cast
<
nsJAR
*
>
(
aZipReader
)
-
>
mZip
.
get
(
)
PromiseFlatCString
(
aZipEntry
)
.
get
(
)
getter_AddRefs
(
handle
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
return
mZip
-
>
OpenArchive
(
handle
)
;
}
NS_IMETHODIMP
nsJAR
:
:
OpenMemory
(
void
*
aData
uint32_t
aLength
)
{
NS_ENSURE_ARG_POINTER
(
aData
)
;
if
(
mOpened
)
return
NS_ERROR_FAILURE
;
mOpened
=
true
;
RefPtr
<
nsZipHandle
>
handle
;
nsresult
rv
=
nsZipHandle
:
:
Init
(
static_cast
<
uint8_t
*
>
(
aData
)
aLength
getter_AddRefs
(
handle
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
return
mZip
-
>
OpenArchive
(
handle
)
;
}
NS_IMETHODIMP
nsJAR
:
:
GetFile
(
nsIFile
*
*
result
)
{
*
result
=
mZipFile
;
NS_IF_ADDREF
(
*
result
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJAR
:
:
Close
(
)
{
if
(
!
mOpened
)
{
return
NS_ERROR_FAILURE
;
}
mOpened
=
false
;
if
(
mIsOmnijar
)
{
mIsOmnijar
=
false
;
mZip
=
new
nsZipArchive
(
)
;
return
NS_OK
;
}
return
mZip
-
>
CloseArchive
(
)
;
}
NS_IMETHODIMP
nsJAR
:
:
Test
(
const
nsACString
&
aEntryName
)
{
return
mZip
-
>
Test
(
aEntryName
.
IsEmpty
(
)
?
nullptr
:
PromiseFlatCString
(
aEntryName
)
.
get
(
)
)
;
}
NS_IMETHODIMP
nsJAR
:
:
Extract
(
const
nsACString
&
aEntryName
nsIFile
*
outFile
)
{
MutexAutoLock
lock
(
mLock
)
;
nsZipItem
*
item
=
mZip
-
>
GetItem
(
PromiseFlatCString
(
aEntryName
)
.
get
(
)
)
;
NS_ENSURE_TRUE
(
item
NS_ERROR_FILE_TARGET_DOES_NOT_EXIST
)
;
nsresult
rv
=
outFile
-
>
Remove
(
false
)
;
if
(
rv
=
=
NS_ERROR_FILE_DIR_NOT_EMPTY
|
|
rv
=
=
NS_ERROR_FAILURE
)
return
rv
;
if
(
item
-
>
IsDirectory
(
)
)
{
rv
=
outFile
-
>
Create
(
nsIFile
:
:
DIRECTORY_TYPE
item
-
>
Mode
(
)
)
;
}
else
{
PRFileDesc
*
fd
;
rv
=
outFile
-
>
OpenNSPRFileDesc
(
PR_WRONLY
|
PR_CREATE_FILE
item
-
>
Mode
(
)
&
fd
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
rv
=
mZip
-
>
ExtractFile
(
item
outFile
fd
)
;
}
if
(
NS_FAILED
(
rv
)
)
return
rv
;
outFile
-
>
SetLastModifiedTime
(
item
-
>
LastModTime
(
)
/
PR_USEC_PER_MSEC
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJAR
:
:
GetEntry
(
const
nsACString
&
aEntryName
nsIZipEntry
*
*
result
)
{
nsZipItem
*
zipItem
=
mZip
-
>
GetItem
(
PromiseFlatCString
(
aEntryName
)
.
get
(
)
)
;
NS_ENSURE_TRUE
(
zipItem
NS_ERROR_FILE_TARGET_DOES_NOT_EXIST
)
;
nsJARItem
*
jarItem
=
new
nsJARItem
(
zipItem
)
;
NS_ADDREF
(
*
result
=
jarItem
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJAR
:
:
HasEntry
(
const
nsACString
&
aEntryName
bool
*
result
)
{
*
result
=
mZip
-
>
GetItem
(
PromiseFlatCString
(
aEntryName
)
.
get
(
)
)
!
=
nullptr
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJAR
:
:
FindEntries
(
const
nsACString
&
aPattern
nsIUTF8StringEnumerator
*
*
result
)
{
NS_ENSURE_ARG_POINTER
(
result
)
;
nsZipFind
*
find
;
nsresult
rv
=
mZip
-
>
FindInit
(
aPattern
.
IsEmpty
(
)
?
nullptr
:
PromiseFlatCString
(
aPattern
)
.
get
(
)
&
find
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsIUTF8StringEnumerator
*
zipEnum
=
new
nsJAREnumerator
(
find
)
;
NS_ADDREF
(
*
result
=
zipEnum
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJAR
:
:
GetInputStream
(
const
nsACString
&
aFilename
nsIInputStream
*
*
result
)
{
return
GetInputStreamWithSpec
(
EmptyCString
(
)
aFilename
result
)
;
}
NS_IMETHODIMP
nsJAR
:
:
GetInputStreamWithSpec
(
const
nsACString
&
aJarDirSpec
const
nsACString
&
aEntryName
nsIInputStream
*
*
result
)
{
NS_ENSURE_ARG_POINTER
(
result
)
;
nsZipItem
*
item
=
nullptr
;
const
nsCString
&
entry
=
PromiseFlatCString
(
aEntryName
)
;
if
(
*
entry
.
get
(
)
)
{
item
=
mZip
-
>
GetItem
(
entry
.
get
(
)
)
;
if
(
!
item
)
return
NS_ERROR_FILE_TARGET_DOES_NOT_EXIST
;
}
nsJARInputStream
*
jis
=
new
nsJARInputStream
(
)
;
NS_ADDREF
(
*
result
=
jis
)
;
nsresult
rv
=
NS_OK
;
if
(
!
item
|
|
item
-
>
IsDirectory
(
)
)
{
rv
=
jis
-
>
InitDirectory
(
this
aJarDirSpec
entry
.
get
(
)
)
;
}
else
{
rv
=
jis
-
>
InitFile
(
this
item
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
NS_RELEASE
(
*
result
)
;
}
return
rv
;
}
nsresult
nsJAR
:
:
GetJarPath
(
nsACString
&
aResult
)
{
NS_ENSURE_ARG_POINTER
(
mZipFile
)
;
return
mZipFile
-
>
GetPersistentDescriptor
(
aResult
)
;
}
nsresult
nsJAR
:
:
GetNSPRFileDesc
(
PRFileDesc
*
*
aNSPRFileDesc
)
{
if
(
!
aNSPRFileDesc
)
{
return
NS_ERROR_ILLEGAL_VALUE
;
}
*
aNSPRFileDesc
=
nullptr
;
if
(
!
mZip
)
{
return
NS_ERROR_FAILURE
;
}
RefPtr
<
nsZipHandle
>
handle
=
mZip
-
>
GetFD
(
)
;
if
(
!
handle
)
{
return
NS_ERROR_FAILURE
;
}
return
handle
-
>
GetNSPRFileDesc
(
aNSPRFileDesc
)
;
}
nsresult
nsJAR
:
:
LoadEntry
(
const
nsACString
&
aFilename
nsCString
&
aBuf
)
{
nsresult
rv
;
nsCOMPtr
<
nsIInputStream
>
manifestStream
;
rv
=
GetInputStream
(
aFilename
getter_AddRefs
(
manifestStream
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
NS_ERROR_FILE_TARGET_DOES_NOT_EXIST
;
char
*
buf
;
uint64_t
len64
;
rv
=
manifestStream
-
>
Available
(
&
len64
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
len64
>
=
UINT32_MAX
)
{
nsZipArchive
:
:
sFileCorruptedReason
=
"
nsJAR
:
invalid
manifest
size
"
;
return
NS_ERROR_FILE_CORRUPTED
;
}
uint32_t
len
=
(
uint32_t
)
len64
;
buf
=
(
char
*
)
malloc
(
len
+
1
)
;
if
(
!
buf
)
return
NS_ERROR_OUT_OF_MEMORY
;
uint32_t
bytesRead
;
rv
=
manifestStream
-
>
Read
(
buf
len
&
bytesRead
)
;
if
(
bytesRead
!
=
len
)
{
nsZipArchive
:
:
sFileCorruptedReason
=
"
nsJAR
:
manifest
too
small
"
;
rv
=
NS_ERROR_FILE_CORRUPTED
;
}
if
(
NS_FAILED
(
rv
)
)
{
free
(
buf
)
;
return
rv
;
}
buf
[
len
]
=
'
\
0
'
;
aBuf
.
Adopt
(
buf
len
)
;
return
NS_OK
;
}
int32_t
nsJAR
:
:
ReadLine
(
const
char
*
*
src
)
{
if
(
!
*
src
)
{
return
0
;
}
int32_t
length
;
char
*
eol
=
PL_strpbrk
(
*
src
"
\
r
\
n
"
)
;
if
(
eol
=
=
nullptr
)
{
length
=
strlen
(
*
src
)
;
if
(
length
=
=
0
)
*
src
=
nullptr
;
else
*
src
+
=
length
;
}
else
{
length
=
eol
-
*
src
;
if
(
eol
[
0
]
=
=
'
\
r
'
&
&
eol
[
1
]
=
=
'
\
n
'
)
*
src
=
eol
+
2
;
else
*
src
=
eol
+
1
;
}
return
length
;
}
NS_IMPL_ISUPPORTS
(
nsJAREnumerator
nsIUTF8StringEnumerator
nsIStringEnumerator
)
NS_IMETHODIMP
nsJAREnumerator
:
:
HasMore
(
bool
*
aResult
)
{
if
(
!
mName
)
{
NS_ASSERTION
(
mFind
"
nsJAREnumerator
:
Missing
zipFind
.
"
)
;
nsresult
rv
=
mFind
-
>
FindNext
(
&
mName
&
mNameLen
)
;
if
(
rv
=
=
NS_ERROR_FILE_TARGET_DOES_NOT_EXIST
)
{
*
aResult
=
false
;
return
NS_OK
;
}
NS_ENSURE_SUCCESS
(
rv
NS_ERROR_FAILURE
)
;
}
*
aResult
=
true
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJAREnumerator
:
:
GetNext
(
nsACString
&
aResult
)
{
if
(
!
mName
)
{
bool
bMore
;
nsresult
rv
=
HasMore
(
&
bMore
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
bMore
)
return
NS_ERROR_FAILURE
;
}
aResult
.
Assign
(
mName
mNameLen
)
;
mName
=
0
;
return
NS_OK
;
}
NS_IMPL_ISUPPORTS
(
nsJARItem
nsIZipEntry
)
nsJARItem
:
:
nsJARItem
(
nsZipItem
*
aZipItem
)
:
mSize
(
aZipItem
-
>
Size
(
)
)
mRealsize
(
aZipItem
-
>
RealSize
(
)
)
mCrc32
(
aZipItem
-
>
CRC32
(
)
)
mLastModTime
(
aZipItem
-
>
LastModTime
(
)
)
mCompression
(
aZipItem
-
>
Compression
(
)
)
mPermissions
(
aZipItem
-
>
Mode
(
)
)
mIsDirectory
(
aZipItem
-
>
IsDirectory
(
)
)
mIsSynthetic
(
aZipItem
-
>
isSynthetic
)
{
}
NS_IMETHODIMP
nsJARItem
:
:
GetCompression
(
uint16_t
*
aCompression
)
{
NS_ENSURE_ARG_POINTER
(
aCompression
)
;
*
aCompression
=
mCompression
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJARItem
:
:
GetSize
(
uint32_t
*
aSize
)
{
NS_ENSURE_ARG_POINTER
(
aSize
)
;
*
aSize
=
mSize
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJARItem
:
:
GetRealSize
(
uint32_t
*
aRealsize
)
{
NS_ENSURE_ARG_POINTER
(
aRealsize
)
;
*
aRealsize
=
mRealsize
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJARItem
:
:
GetCRC32
(
uint32_t
*
aCrc32
)
{
NS_ENSURE_ARG_POINTER
(
aCrc32
)
;
*
aCrc32
=
mCrc32
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJARItem
:
:
GetIsDirectory
(
bool
*
aIsDirectory
)
{
NS_ENSURE_ARG_POINTER
(
aIsDirectory
)
;
*
aIsDirectory
=
mIsDirectory
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJARItem
:
:
GetIsSynthetic
(
bool
*
aIsSynthetic
)
{
NS_ENSURE_ARG_POINTER
(
aIsSynthetic
)
;
*
aIsSynthetic
=
mIsSynthetic
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJARItem
:
:
GetLastModifiedTime
(
PRTime
*
aLastModTime
)
{
NS_ENSURE_ARG_POINTER
(
aLastModTime
)
;
*
aLastModTime
=
mLastModTime
;
return
NS_OK
;
}
NS_IMETHODIMP
nsJARItem
:
:
GetPermissions
(
uint32_t
*
aPermissions
)
{
NS_ENSURE_ARG_POINTER
(
aPermissions
)
;
*
aPermissions
=
mPermissions
;
return
NS_OK
;
}
NS_IMPL_ISUPPORTS
(
nsZipReaderCache
nsIZipReaderCache
nsIObserver
nsISupportsWeakReference
)
nsZipReaderCache
:
:
nsZipReaderCache
(
)
:
mLock
(
"
nsZipReaderCache
.
mLock
"
)
mCacheSize
(
0
)
mZips
(
)
#
ifdef
ZIP_CACHE_HIT_RATE
mZipCacheLookups
(
0
)
mZipCacheHits
(
0
)
mZipCacheFlushes
(
0
)
mZipSyncMisses
(
0
)
#
endif
{
}
NS_IMETHODIMP
nsZipReaderCache
:
:
Init
(
uint32_t
cacheSize
)
{
mCacheSize
=
cacheSize
;
nsCOMPtr
<
nsIObserverService
>
os
=
do_GetService
(
"
mozilla
.
org
/
observer
-
service
;
1
"
)
;
if
(
os
)
{
os
-
>
AddObserver
(
this
"
memory
-
pressure
"
true
)
;
os
-
>
AddObserver
(
this
"
chrome
-
flush
-
caches
"
true
)
;
os
-
>
AddObserver
(
this
"
flush
-
cache
-
entry
"
true
)
;
}
return
NS_OK
;
}
nsZipReaderCache
:
:
~
nsZipReaderCache
(
)
{
for
(
auto
iter
=
mZips
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
iter
.
UserData
(
)
-
>
SetZipReaderCache
(
nullptr
)
;
}
#
ifdef
ZIP_CACHE_HIT_RATE
printf
(
"
nsZipReaderCache
size
=
%
d
hits
=
%
d
lookups
=
%
d
rate
=
%
f
%
%
flushes
=
%
d
missed
%
d
\
n
"
mCacheSize
mZipCacheHits
mZipCacheLookups
(
float
)
mZipCacheHits
/
mZipCacheLookups
mZipCacheFlushes
mZipSyncMisses
)
;
#
endif
}
NS_IMETHODIMP
nsZipReaderCache
:
:
IsCached
(
nsIFile
*
zipFile
bool
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
zipFile
)
;
nsresult
rv
;
MutexAutoLock
lock
(
mLock
)
;
nsAutoCString
uri
;
rv
=
zipFile
-
>
GetPersistentDescriptor
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
uri
.
InsertLiteral
(
"
file
:
"
0
)
;
*
aResult
=
mZips
.
Contains
(
uri
)
;
return
NS_OK
;
}
nsresult
nsZipReaderCache
:
:
GetZip
(
nsIFile
*
zipFile
nsIZipReader
*
*
result
bool
failOnMiss
)
{
NS_ENSURE_ARG_POINTER
(
zipFile
)
;
nsresult
rv
;
MutexAutoLock
lock
(
mLock
)
;
#
ifdef
ZIP_CACHE_HIT_RATE
mZipCacheLookups
+
+
;
#
endif
nsAutoCString
uri
;
rv
=
zipFile
-
>
GetPersistentDescriptor
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
uri
.
InsertLiteral
(
"
file
:
"
0
)
;
RefPtr
<
nsJAR
>
zip
;
mZips
.
Get
(
uri
getter_AddRefs
(
zip
)
)
;
if
(
zip
)
{
#
ifdef
ZIP_CACHE_HIT_RATE
mZipCacheHits
+
+
;
#
endif
zip
-
>
ClearReleaseTime
(
)
;
}
else
{
if
(
failOnMiss
)
{
return
NS_ERROR_CACHE_KEY_NOT_FOUND
;
}
zip
=
new
nsJAR
(
)
;
zip
-
>
SetZipReaderCache
(
this
)
;
rv
=
zip
-
>
Open
(
zipFile
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
MOZ_ASSERT
(
!
mZips
.
Contains
(
uri
)
)
;
mZips
.
Put
(
uri
zip
)
;
}
zip
.
forget
(
result
)
;
return
rv
;
}
NS_IMETHODIMP
nsZipReaderCache
:
:
GetZipIfCached
(
nsIFile
*
zipFile
nsIZipReader
*
*
result
)
{
return
GetZip
(
zipFile
result
true
)
;
}
NS_IMETHODIMP
nsZipReaderCache
:
:
GetZip
(
nsIFile
*
zipFile
nsIZipReader
*
*
result
)
{
return
GetZip
(
zipFile
result
false
)
;
}
NS_IMETHODIMP
nsZipReaderCache
:
:
GetInnerZip
(
nsIFile
*
zipFile
const
nsACString
&
entry
nsIZipReader
*
*
result
)
{
NS_ENSURE_ARG_POINTER
(
zipFile
)
;
nsCOMPtr
<
nsIZipReader
>
outerZipReader
;
nsresult
rv
=
GetZip
(
zipFile
getter_AddRefs
(
outerZipReader
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
MutexAutoLock
lock
(
mLock
)
;
#
ifdef
ZIP_CACHE_HIT_RATE
mZipCacheLookups
+
+
;
#
endif
nsAutoCString
uri
;
rv
=
zipFile
-
>
GetPersistentDescriptor
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
uri
.
InsertLiteral
(
"
jar
:
"
0
)
;
uri
.
AppendLiteral
(
"
!
/
"
)
;
uri
.
Append
(
entry
)
;
RefPtr
<
nsJAR
>
zip
;
mZips
.
Get
(
uri
getter_AddRefs
(
zip
)
)
;
if
(
zip
)
{
#
ifdef
ZIP_CACHE_HIT_RATE
mZipCacheHits
+
+
;
#
endif
zip
-
>
ClearReleaseTime
(
)
;
}
else
{
zip
=
new
nsJAR
(
)
;
zip
-
>
SetZipReaderCache
(
this
)
;
rv
=
zip
-
>
OpenInner
(
outerZipReader
entry
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
MOZ_ASSERT
(
!
mZips
.
Contains
(
uri
)
)
;
mZips
.
Put
(
uri
zip
)
;
}
zip
.
forget
(
result
)
;
return
rv
;
}
NS_IMETHODIMP
nsZipReaderCache
:
:
GetFd
(
nsIFile
*
zipFile
PRFileDesc
*
*
aRetVal
)
{
#
if
defined
(
XP_WIN
)
MOZ_CRASH
(
"
Not
implemented
"
)
;
return
NS_ERROR_NOT_IMPLEMENTED
;
#
else
if
(
!
zipFile
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
;
nsAutoCString
uri
;
rv
=
zipFile
-
>
GetPersistentDescriptor
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
uri
.
InsertLiteral
(
"
file
:
"
0
)
;
MutexAutoLock
lock
(
mLock
)
;
RefPtr
<
nsJAR
>
zip
;
mZips
.
Get
(
uri
getter_AddRefs
(
zip
)
)
;
if
(
!
zip
)
{
return
NS_ERROR_FAILURE
;
}
zip
-
>
ClearReleaseTime
(
)
;
rv
=
zip
-
>
GetNSPRFileDesc
(
aRetVal
)
;
MutexAutoUnlock
unlock
(
mLock
)
;
RefPtr
<
nsJAR
>
zipTemp
=
zip
.
forget
(
)
;
return
rv
;
#
endif
}
nsresult
nsZipReaderCache
:
:
ReleaseZip
(
nsJAR
*
zip
)
{
nsresult
rv
;
MutexAutoLock
lock
(
mLock
)
;
bool
found
=
false
;
for
(
auto
iter
=
mZips
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
if
(
zip
=
=
iter
.
UserData
(
)
)
{
found
=
true
;
break
;
}
}
if
(
!
found
)
{
#
ifdef
ZIP_CACHE_HIT_RATE
mZipSyncMisses
+
+
;
#
endif
return
NS_OK
;
}
zip
-
>
SetReleaseTime
(
)
;
if
(
mZips
.
Count
(
)
<
=
mCacheSize
)
return
NS_OK
;
nsJAR
*
oldest
=
nullptr
;
for
(
auto
iter
=
mZips
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsJAR
*
current
=
iter
.
UserData
(
)
;
PRIntervalTime
currentReleaseTime
=
current
-
>
GetReleaseTime
(
)
;
if
(
currentReleaseTime
!
=
PR_INTERVAL_NO_TIMEOUT
)
{
if
(
oldest
=
=
nullptr
|
|
currentReleaseTime
<
oldest
-
>
GetReleaseTime
(
)
)
{
oldest
=
current
;
}
}
}
if
(
!
oldest
)
return
NS_OK
;
#
ifdef
ZIP_CACHE_HIT_RATE
mZipCacheFlushes
+
+
;
#
endif
nsAutoCString
uri
;
rv
=
oldest
-
>
GetJarPath
(
uri
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
if
(
oldest
-
>
mOuterZipEntry
.
IsEmpty
(
)
)
{
uri
.
InsertLiteral
(
"
file
:
"
0
)
;
}
else
{
uri
.
InsertLiteral
(
"
jar
:
"
0
)
;
uri
.
AppendLiteral
(
"
!
/
"
)
;
uri
.
Append
(
oldest
-
>
mOuterZipEntry
)
;
}
RefPtr
<
nsJAR
>
removed
;
mZips
.
Remove
(
uri
getter_AddRefs
(
removed
)
)
;
NS_ASSERTION
(
removed
"
botched
"
)
;
NS_ASSERTION
(
oldest
=
=
removed
"
removed
wrong
entry
"
)
;
if
(
removed
)
removed
-
>
SetZipReaderCache
(
nullptr
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsZipReaderCache
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aSomeData
)
{
if
(
strcmp
(
aTopic
"
memory
-
pressure
"
)
=
=
0
)
{
MutexAutoLock
lock
(
mLock
)
;
for
(
auto
iter
=
mZips
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
RefPtr
<
nsJAR
>
&
current
=
iter
.
Data
(
)
;
if
(
current
-
>
GetReleaseTime
(
)
!
=
PR_INTERVAL_NO_TIMEOUT
)
{
current
-
>
SetZipReaderCache
(
nullptr
)
;
iter
.
Remove
(
)
;
}
}
}
else
if
(
strcmp
(
aTopic
"
chrome
-
flush
-
caches
"
)
=
=
0
)
{
MutexAutoLock
lock
(
mLock
)
;
for
(
auto
iter
=
mZips
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
iter
.
UserData
(
)
-
>
SetZipReaderCache
(
nullptr
)
;
}
mZips
.
Clear
(
)
;
}
else
if
(
strcmp
(
aTopic
"
flush
-
cache
-
entry
"
)
=
=
0
)
{
nsCOMPtr
<
nsIFile
>
file
;
if
(
aSubject
)
{
file
=
do_QueryInterface
(
aSubject
)
;
}
else
if
(
aSomeData
)
{
nsDependentString
fileName
(
aSomeData
)
;
Unused
<
<
NS_NewLocalFile
(
fileName
false
getter_AddRefs
(
file
)
)
;
}
if
(
!
file
)
return
NS_OK
;
nsAutoCString
uri
;
if
(
NS_FAILED
(
file
-
>
GetPersistentDescriptor
(
uri
)
)
)
return
NS_OK
;
uri
.
InsertLiteral
(
"
file
:
"
0
)
;
MutexAutoLock
lock
(
mLock
)
;
RefPtr
<
nsJAR
>
zip
;
mZips
.
Get
(
uri
getter_AddRefs
(
zip
)
)
;
if
(
!
zip
)
return
NS_OK
;
#
ifdef
ZIP_CACHE_HIT_RATE
mZipCacheFlushes
+
+
;
#
endif
zip
-
>
SetZipReaderCache
(
nullptr
)
;
mZips
.
Remove
(
uri
)
;
}
return
NS_OK
;
}
