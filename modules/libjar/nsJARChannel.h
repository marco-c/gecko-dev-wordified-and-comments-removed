#
ifndef
nsJARChannel_h__
#
define
nsJARChannel_h__
#
include
"
nsIJARChannel
.
h
"
#
include
"
nsIJARURI
.
h
"
#
include
"
nsIEventTarget
.
h
"
#
include
"
nsIInputStreamPump
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIProgressEventSink
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIZipReader
.
h
"
#
include
"
nsILoadGroup
.
h
"
#
include
"
nsILoadInfo
.
h
"
#
include
"
nsIThreadRetargetableRequest
.
h
"
#
include
"
nsIThreadRetargetableStreamListener
.
h
"
#
include
"
nsHashPropertyBag
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
class
nsJARInputThunk
;
class
nsJARProtocolHandler
;
class
nsInputStreamPump
;
class
nsJARChannel
final
:
public
nsIJARChannel
public
nsIThreadRetargetableRequest
public
nsIThreadRetargetableStreamListener
public
nsHashPropertyBag
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIREQUEST
NS_DECL_NSICHANNEL
NS_DECL_NSIJARCHANNEL
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSITHREADRETARGETABLEREQUEST
NS_DECL_NSITHREADRETARGETABLESTREAMLISTENER
nsJARChannel
(
)
;
nsresult
Init
(
nsIURI
*
uri
)
;
void
SetFile
(
nsIFile
*
file
)
;
private
:
virtual
~
nsJARChannel
(
)
;
nsresult
CreateJarInput
(
nsIZipReaderCache
*
nsJARInputThunk
*
*
)
;
nsresult
LookupFile
(
)
;
nsresult
OpenLocalFile
(
)
;
nsresult
ContinueOpenLocalFile
(
nsJARInputThunk
*
aInput
bool
aIsSyncCall
)
;
nsresult
OnOpenLocalFileComplete
(
nsresult
aResult
bool
aIsSyncCall
)
;
nsresult
CheckPendingEvents
(
)
;
void
NotifyError
(
nsresult
aError
)
;
void
FireOnProgress
(
uint64_t
aProgress
)
;
bool
GetContentTypeGuess
(
nsACString
&
)
const
;
void
SetOpened
(
)
;
nsCString
mSpec
;
bool
mOpened
=
false
;
mozilla
:
:
Atomic
<
bool
mozilla
:
:
ReleaseAcquire
>
mCanceled
{
false
}
;
bool
mOnDataCalled
=
false
;
RefPtr
<
nsJARProtocolHandler
>
mJarHandler
;
nsCOMPtr
<
nsIJARURI
>
mJarURI
;
nsCOMPtr
<
nsIURI
>
mOriginalURI
;
nsCOMPtr
<
nsISupports
>
mOwner
;
nsCOMPtr
<
nsILoadInfo
>
mLoadInfo
;
nsCOMPtr
<
nsIInterfaceRequestor
>
mCallbacks
;
nsCOMPtr
<
nsIProgressEventSink
>
mProgressSink
;
nsCOMPtr
<
nsILoadGroup
>
mLoadGroup
;
nsCOMPtr
<
nsIStreamListener
>
mListener
;
nsCString
mContentType
;
nsCString
mContentCharset
;
int64_t
mContentLength
=
-
1
;
uint32_t
mLoadFlags
=
LOAD_NORMAL
;
mozilla
:
:
Atomic
<
nsresult
mozilla
:
:
ReleaseAcquire
>
mStatus
{
NS_OK
}
;
bool
mIsPending
=
false
;
bool
mEnableOMT
=
true
;
struct
{
bool
isCanceled
=
false
;
mozilla
:
:
Atomic
<
uint32_t
>
suspendCount
{
0
}
;
}
mPendingEvent
;
nsCOMPtr
<
nsIInputStreamPump
>
mPump
;
nsCOMPtr
<
nsIRequest
>
mRequest
;
nsCOMPtr
<
nsIFile
>
mJarFile
;
nsCOMPtr
<
nsIFile
>
mJarFileOverride
;
nsCOMPtr
<
nsIZipReader
>
mPreCachedJarReader
;
nsCOMPtr
<
nsIURI
>
mJarBaseURI
;
nsCString
mJarEntry
;
nsCString
mInnerJarEntry
;
nsCOMPtr
<
nsIEventTarget
>
mWorker
;
}
;
#
endif
