function
wrapInputStream
(
input
)
{
let
nsIScriptableInputStream
=
Ci
.
nsIScriptableInputStream
;
let
factory
=
Cc
[
"
mozilla
.
org
/
scriptableinputstream
;
1
"
]
;
let
wrapper
=
factory
.
createInstance
(
nsIScriptableInputStream
)
;
wrapper
.
init
(
input
)
;
return
wrapper
;
}
function
extract_crx
(
filepath
)
{
let
file
=
do_get_file
(
filepath
)
;
let
zipreader
=
Cc
[
"
mozilla
.
org
/
libjar
/
zip
-
reader
;
1
"
]
.
createInstance
(
Ci
.
nsIZipReader
)
;
zipreader
.
open
(
file
)
;
function
check_archive_crc
(
)
{
zipreader
.
test
(
null
)
;
return
true
;
}
Assert
.
ok
(
check_archive_crc
(
)
)
;
zipreader
.
findEntries
(
null
)
;
let
stream
=
wrapInputStream
(
zipreader
.
getInputStream
(
"
modules
/
libjar
/
test
/
Makefile
.
in
"
)
)
;
let
dirstream
=
wrapInputStream
(
zipreader
.
getInputStream
(
"
modules
/
libjar
/
test
/
"
)
)
;
zipreader
.
close
(
)
;
zipreader
=
null
;
Cu
.
forceGC
(
)
;
Assert
.
ok
(
!
!
stream
.
read
(
1024
)
.
length
)
;
Assert
.
ok
(
!
!
dirstream
.
read
(
100
)
.
length
)
;
}
function
run_test
(
)
{
extract_crx
(
"
data
/
test_crx_dummy
.
crx
"
)
;
extract_crx
(
"
data
/
test_crx_v3_dummy
.
crx
"
)
;
}
