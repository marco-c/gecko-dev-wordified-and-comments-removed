#
include
<
ctype
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
"
nsString
.
h
"
#
include
"
nsUTF8Utils
.
h
"
#
include
"
prefread
.
h
"
#
ifdef
TEST_PREFREAD
#
include
<
stdio
.
h
>
#
define
NS_WARNING
(
_s
)
printf
(
"
>
>
>
"
_s
"
!
\
n
"
)
#
define
NS_NOTREACHED
(
_s
)
NS_WARNING
(
_s
)
#
else
#
include
"
nsDebug
.
h
"
#
endif
enum
{
PREF_PARSE_INIT
PREF_PARSE_MATCH_STRING
PREF_PARSE_UNTIL_NAME
PREF_PARSE_QUOTED_STRING
PREF_PARSE_UNTIL_COMMA
PREF_PARSE_UNTIL_VALUE
PREF_PARSE_INT_VALUE
PREF_PARSE_COMMENT_MAYBE_START
PREF_PARSE_COMMENT_BLOCK
PREF_PARSE_COMMENT_BLOCK_MAYBE_END
PREF_PARSE_ESC_SEQUENCE
PREF_PARSE_HEX_ESCAPE
PREF_PARSE_UTF16_LOW_SURROGATE
PREF_PARSE_UNTIL_OPEN_PAREN
PREF_PARSE_UNTIL_CLOSE_PAREN
PREF_PARSE_UNTIL_SEMICOLON
PREF_PARSE_UNTIL_EOL
}
;
#
define
UTF16_ESC_NUM_DIGITS
4
#
define
HEX_ESC_NUM_DIGITS
2
#
define
BITS_PER_HEX_DIGIT
4
static
const
char
kUserPref
[
]
=
"
user_pref
"
;
static
const
char
kPref
[
]
=
"
pref
"
;
static
const
char
kPrefSticky
[
]
=
"
sticky_pref
"
;
static
const
char
kTrue
[
]
=
"
true
"
;
static
const
char
kFalse
[
]
=
"
false
"
;
static
bool
pref_GrowBuf
(
PrefParseState
*
aPS
)
{
int
bufLen
curPos
valPos
;
bufLen
=
aPS
-
>
mLbEnd
-
aPS
-
>
mLb
;
curPos
=
aPS
-
>
mLbCur
-
aPS
-
>
mLb
;
valPos
=
aPS
-
>
mVb
-
aPS
-
>
mLb
;
if
(
bufLen
=
=
0
)
{
bufLen
=
128
;
}
else
{
bufLen
<
<
=
1
;
}
#
ifdef
TEST_PREFREAD
fprintf
(
stderr
"
>
>
>
realloc
(
%
d
)
\
n
"
bufLen
)
;
#
endif
aPS
-
>
mLb
=
(
char
*
)
realloc
(
aPS
-
>
mLb
bufLen
)
;
if
(
!
aPS
-
>
mLb
)
{
return
false
;
}
aPS
-
>
mLbCur
=
aPS
-
>
mLb
+
curPos
;
aPS
-
>
mLbEnd
=
aPS
-
>
mLb
+
bufLen
;
aPS
-
>
mVb
=
aPS
-
>
mLb
+
valPos
;
return
true
;
}
static
void
pref_ReportParseProblem
(
PrefParseState
&
aPS
const
char
*
aMessage
int
aLine
bool
aError
)
{
if
(
aPS
.
mReporter
)
{
aPS
.
mReporter
(
aMessage
aLine
aError
)
;
}
else
{
printf_stderr
(
"
*
*
*
*
Preference
parsing
%
s
(
line
%
d
)
=
%
s
*
*
\
n
"
(
aError
?
"
error
"
:
"
warning
"
)
aLine
aMessage
)
;
}
}
static
bool
pref_DoCallback
(
PrefParseState
*
aPS
)
{
PrefValue
value
;
switch
(
aPS
-
>
mVtype
)
{
case
PrefType
:
:
String
:
value
.
mStringVal
=
aPS
-
>
mVb
;
break
;
case
PrefType
:
:
Int
:
if
(
(
aPS
-
>
mVb
[
0
]
=
=
'
-
'
|
|
aPS
-
>
mVb
[
0
]
=
=
'
+
'
)
&
&
aPS
-
>
mVb
[
1
]
=
=
'
\
0
'
)
{
pref_ReportParseProblem
(
*
aPS
"
invalid
integer
value
"
0
true
)
;
NS_WARNING
(
"
malformed
integer
value
"
)
;
return
false
;
}
value
.
mIntVal
=
atoi
(
aPS
-
>
mVb
)
;
break
;
case
PrefType
:
:
Bool
:
value
.
mBoolVal
=
(
aPS
-
>
mVb
=
=
kTrue
)
;
break
;
default
:
break
;
}
(
*
aPS
-
>
mReader
)
(
aPS
-
>
mClosure
aPS
-
>
mLb
value
aPS
-
>
mVtype
aPS
-
>
mIsDefault
aPS
-
>
mIsStickyDefault
)
;
return
true
;
}
void
PREF_InitParseState
(
PrefParseState
*
aPS
PrefReader
aReader
PrefParseErrorReporter
aReporter
void
*
aClosure
)
{
memset
(
aPS
0
sizeof
(
*
aPS
)
)
;
aPS
-
>
mReader
=
aReader
;
aPS
-
>
mClosure
=
aClosure
;
aPS
-
>
mReporter
=
aReporter
;
}
void
PREF_FinalizeParseState
(
PrefParseState
*
aPS
)
{
if
(
aPS
-
>
mLb
)
{
free
(
aPS
-
>
mLb
)
;
}
}
bool
PREF_ParseBuf
(
PrefParseState
*
aPS
const
char
*
aBuf
int
aBufLen
)
{
const
char
*
end
;
char
c
;
char
udigit
;
int
state
;
int
lineNum
=
0
;
state
=
aPS
-
>
mState
;
for
(
end
=
aBuf
+
aBufLen
;
aBuf
!
=
end
;
+
+
aBuf
)
{
c
=
*
aBuf
;
if
(
c
=
=
'
\
r
'
|
|
c
=
=
'
\
n
'
|
|
c
=
=
0x1A
)
{
lineNum
+
+
;
}
switch
(
state
)
{
case
PREF_PARSE_INIT
:
if
(
aPS
-
>
mLbCur
!
=
aPS
-
>
mLb
)
{
aPS
-
>
mLbCur
=
aPS
-
>
mLb
;
aPS
-
>
mVb
=
nullptr
;
aPS
-
>
mVtype
=
PrefType
:
:
Invalid
;
aPS
-
>
mIsDefault
=
false
;
aPS
-
>
mIsStickyDefault
=
false
;
}
switch
(
c
)
{
case
'
/
'
:
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
break
;
case
'
#
'
:
state
=
PREF_PARSE_UNTIL_EOL
;
break
;
case
'
u
'
:
case
'
s
'
:
case
'
p
'
:
if
(
c
=
=
'
u
'
)
{
aPS
-
>
mStrMatch
=
kUserPref
;
}
else
if
(
c
=
=
'
s
'
)
{
aPS
-
>
mStrMatch
=
kPrefSticky
;
}
else
{
aPS
-
>
mStrMatch
=
kPref
;
}
aPS
-
>
mStrIndex
=
1
;
aPS
-
>
mNextState
=
PREF_PARSE_UNTIL_OPEN_PAREN
;
state
=
PREF_PARSE_MATCH_STRING
;
break
;
}
break
;
case
PREF_PARSE_MATCH_STRING
:
if
(
c
=
=
aPS
-
>
mStrMatch
[
aPS
-
>
mStrIndex
+
+
]
)
{
if
(
aPS
-
>
mStrMatch
[
aPS
-
>
mStrIndex
]
=
=
'
\
0
'
)
{
state
=
aPS
-
>
mNextState
;
aPS
-
>
mNextState
=
PREF_PARSE_INIT
;
}
}
else
{
pref_ReportParseProblem
(
*
aPS
"
non
-
matching
string
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_QUOTED_STRING
:
if
(
aPS
-
>
mLbCur
=
=
aPS
-
>
mLbEnd
&
&
!
pref_GrowBuf
(
aPS
)
)
{
return
false
;
}
if
(
c
=
=
'
\
\
'
)
{
state
=
PREF_PARSE_ESC_SEQUENCE
;
}
else
if
(
c
=
=
aPS
-
>
mQuoteChar
)
{
*
aPS
-
>
mLbCur
+
+
=
'
\
0
'
;
state
=
aPS
-
>
mNextState
;
aPS
-
>
mNextState
=
PREF_PARSE_INIT
;
}
else
{
*
aPS
-
>
mLbCur
+
+
=
c
;
}
break
;
case
PREF_PARSE_UNTIL_NAME
:
if
(
c
=
=
'
\
"
'
|
|
c
=
=
'
\
'
'
)
{
aPS
-
>
mIsDefault
=
(
aPS
-
>
mStrMatch
=
=
kPref
|
|
aPS
-
>
mStrMatch
=
=
kPrefSticky
)
;
aPS
-
>
mIsStickyDefault
=
(
aPS
-
>
mStrMatch
=
=
kPrefSticky
)
;
aPS
-
>
mQuoteChar
=
c
;
aPS
-
>
mNextState
=
PREF_PARSE_UNTIL_COMMA
;
state
=
PREF_PARSE_QUOTED_STRING
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
state
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
!
isspace
(
c
)
)
{
pref_ReportParseProblem
(
*
aPS
"
need
space
comment
or
quote
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_UNTIL_COMMA
:
if
(
c
=
=
'
'
)
{
aPS
-
>
mVb
=
aPS
-
>
mLbCur
;
state
=
PREF_PARSE_UNTIL_VALUE
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
state
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
!
isspace
(
c
)
)
{
pref_ReportParseProblem
(
*
aPS
"
need
space
comment
or
comma
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_UNTIL_VALUE
:
if
(
c
=
=
'
\
"
'
|
|
c
=
=
'
\
'
'
)
{
aPS
-
>
mVtype
=
PrefType
:
:
String
;
aPS
-
>
mQuoteChar
=
c
;
aPS
-
>
mNextState
=
PREF_PARSE_UNTIL_CLOSE_PAREN
;
state
=
PREF_PARSE_QUOTED_STRING
;
}
else
if
(
c
=
=
'
t
'
|
|
c
=
=
'
f
'
)
{
aPS
-
>
mVb
=
(
char
*
)
(
c
=
=
'
t
'
?
kTrue
:
kFalse
)
;
aPS
-
>
mVtype
=
PrefType
:
:
Bool
;
aPS
-
>
mStrMatch
=
aPS
-
>
mVb
;
aPS
-
>
mStrIndex
=
1
;
aPS
-
>
mNextState
=
PREF_PARSE_UNTIL_CLOSE_PAREN
;
state
=
PREF_PARSE_MATCH_STRING
;
}
else
if
(
isdigit
(
c
)
|
|
(
c
=
=
'
-
'
)
|
|
(
c
=
=
'
+
'
)
)
{
aPS
-
>
mVtype
=
PrefType
:
:
Int
;
if
(
aPS
-
>
mLbCur
=
=
aPS
-
>
mLbEnd
&
&
!
pref_GrowBuf
(
aPS
)
)
{
return
false
;
}
*
aPS
-
>
mLbCur
+
+
=
c
;
state
=
PREF_PARSE_INT_VALUE
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
state
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
!
isspace
(
c
)
)
{
pref_ReportParseProblem
(
*
aPS
"
need
value
comment
or
space
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_INT_VALUE
:
if
(
aPS
-
>
mLbCur
=
=
aPS
-
>
mLbEnd
&
&
!
pref_GrowBuf
(
aPS
)
)
{
return
false
;
}
if
(
isdigit
(
c
)
)
{
*
aPS
-
>
mLbCur
+
+
=
c
;
}
else
{
*
aPS
-
>
mLbCur
+
+
=
'
\
0
'
;
if
(
c
=
=
'
)
'
)
{
state
=
PREF_PARSE_UNTIL_SEMICOLON
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
PREF_PARSE_UNTIL_CLOSE_PAREN
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
isspace
(
c
)
)
{
state
=
PREF_PARSE_UNTIL_CLOSE_PAREN
;
}
else
{
pref_ReportParseProblem
(
*
aPS
"
while
parsing
integer
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
}
break
;
case
PREF_PARSE_COMMENT_MAYBE_START
:
switch
(
c
)
{
case
'
*
'
:
state
=
PREF_PARSE_COMMENT_BLOCK
;
break
;
case
'
/
'
:
state
=
PREF_PARSE_UNTIL_EOL
;
break
;
default
:
pref_ReportParseProblem
(
*
aPS
"
while
parsing
comment
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_COMMENT_BLOCK
:
if
(
c
=
=
'
*
'
)
{
state
=
PREF_PARSE_COMMENT_BLOCK_MAYBE_END
;
}
break
;
case
PREF_PARSE_COMMENT_BLOCK_MAYBE_END
:
switch
(
c
)
{
case
'
/
'
:
state
=
aPS
-
>
mNextState
;
aPS
-
>
mNextState
=
PREF_PARSE_INIT
;
break
;
case
'
*
'
:
break
;
default
:
state
=
PREF_PARSE_COMMENT_BLOCK
;
break
;
}
break
;
case
PREF_PARSE_ESC_SEQUENCE
:
switch
(
c
)
{
case
'
\
"
'
:
case
'
\
'
'
:
case
'
\
\
'
:
break
;
case
'
r
'
:
c
=
'
\
r
'
;
break
;
case
'
n
'
:
c
=
'
\
n
'
;
break
;
case
'
x
'
:
case
'
u
'
:
aPS
-
>
mEscTmp
[
0
]
=
c
;
aPS
-
>
mEscLen
=
1
;
aPS
-
>
mUtf16
[
0
]
=
aPS
-
>
mUtf16
[
1
]
=
0
;
aPS
-
>
mStrIndex
=
(
c
=
=
'
x
'
)
?
HEX_ESC_NUM_DIGITS
:
UTF16_ESC_NUM_DIGITS
;
state
=
PREF_PARSE_HEX_ESCAPE
;
continue
;
default
:
pref_ReportParseProblem
(
*
aPS
"
preserving
unexpected
JS
escape
sequence
"
lineNum
false
)
;
NS_WARNING
(
"
preserving
unexpected
JS
escape
sequence
"
)
;
if
(
(
aPS
-
>
mLbCur
+
1
)
=
=
aPS
-
>
mLbEnd
&
&
!
pref_GrowBuf
(
aPS
)
)
{
return
false
;
}
*
aPS
-
>
mLbCur
+
+
=
'
\
\
'
;
break
;
}
*
aPS
-
>
mLbCur
+
+
=
c
;
state
=
PREF_PARSE_QUOTED_STRING
;
break
;
case
PREF_PARSE_HEX_ESCAPE
:
if
(
c
>
=
'
0
'
&
&
c
<
=
'
9
'
)
{
udigit
=
(
c
-
'
0
'
)
;
}
else
if
(
c
>
=
'
A
'
&
&
c
<
=
'
F
'
)
{
udigit
=
(
c
-
'
A
'
)
+
10
;
}
else
if
(
c
>
=
'
a
'
&
&
c
<
=
'
f
'
)
{
udigit
=
(
c
-
'
a
'
)
+
10
;
}
else
{
pref_ReportParseProblem
(
*
aPS
"
preserving
invalid
or
incomplete
hex
escape
"
lineNum
false
)
;
NS_WARNING
(
"
preserving
invalid
or
incomplete
hex
escape
"
)
;
*
aPS
-
>
mLbCur
+
+
=
'
\
\
'
;
if
(
(
aPS
-
>
mLbCur
+
aPS
-
>
mEscLen
)
>
=
aPS
-
>
mLbEnd
&
&
!
pref_GrowBuf
(
aPS
)
)
{
return
false
;
}
for
(
int
i
=
0
;
i
<
aPS
-
>
mEscLen
;
+
+
i
)
{
*
aPS
-
>
mLbCur
+
+
=
aPS
-
>
mEscTmp
[
i
]
;
}
-
-
aBuf
;
state
=
PREF_PARSE_QUOTED_STRING
;
continue
;
}
aPS
-
>
mEscTmp
[
aPS
-
>
mEscLen
+
+
]
=
c
;
aPS
-
>
mUtf16
[
1
]
<
<
=
BITS_PER_HEX_DIGIT
;
aPS
-
>
mUtf16
[
1
]
|
=
udigit
;
aPS
-
>
mStrIndex
-
-
;
if
(
aPS
-
>
mStrIndex
=
=
0
)
{
int
utf16len
=
0
;
if
(
aPS
-
>
mUtf16
[
0
]
)
{
utf16len
=
2
;
}
else
if
(
0xD800
=
=
(
0xFC00
&
aPS
-
>
mUtf16
[
1
]
)
)
{
aPS
-
>
mUtf16
[
0
]
=
aPS
-
>
mUtf16
[
1
]
;
aPS
-
>
mUtf16
[
1
]
=
0
;
state
=
PREF_PARSE_UTF16_LOW_SURROGATE
;
break
;
}
else
{
aPS
-
>
mUtf16
[
0
]
=
aPS
-
>
mUtf16
[
1
]
;
utf16len
=
1
;
}
if
(
aPS
-
>
mLbCur
+
6
>
=
aPS
-
>
mLbEnd
&
&
!
pref_GrowBuf
(
aPS
)
)
{
return
false
;
}
ConvertUTF16toUTF8
converter
(
aPS
-
>
mLbCur
)
;
converter
.
write
(
aPS
-
>
mUtf16
utf16len
)
;
aPS
-
>
mLbCur
+
=
converter
.
Size
(
)
;
state
=
PREF_PARSE_QUOTED_STRING
;
}
break
;
case
PREF_PARSE_UTF16_LOW_SURROGATE
:
if
(
aPS
-
>
mStrIndex
=
=
0
&
&
c
=
=
'
\
\
'
)
{
+
+
aPS
-
>
mStrIndex
;
}
else
if
(
aPS
-
>
mStrIndex
=
=
1
&
&
c
=
=
'
u
'
)
{
aPS
-
>
mStrIndex
=
UTF16_ESC_NUM_DIGITS
;
aPS
-
>
mEscTmp
[
0
]
=
'
u
'
;
aPS
-
>
mEscLen
=
1
;
state
=
PREF_PARSE_HEX_ESCAPE
;
}
else
{
-
-
aBuf
;
if
(
aPS
-
>
mStrIndex
=
=
1
)
{
state
=
PREF_PARSE_ESC_SEQUENCE
;
}
else
{
state
=
PREF_PARSE_QUOTED_STRING
;
}
continue
;
}
break
;
case
PREF_PARSE_UNTIL_OPEN_PAREN
:
if
(
c
=
=
'
(
'
)
{
state
=
PREF_PARSE_UNTIL_NAME
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
state
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
!
isspace
(
c
)
)
{
pref_ReportParseProblem
(
*
aPS
"
need
space
comment
or
open
parentheses
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_UNTIL_CLOSE_PAREN
:
if
(
c
=
=
'
)
'
)
{
state
=
PREF_PARSE_UNTIL_SEMICOLON
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
state
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
!
isspace
(
c
)
)
{
pref_ReportParseProblem
(
*
aPS
"
need
space
comment
or
closing
parentheses
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_UNTIL_SEMICOLON
:
if
(
c
=
=
'
;
'
)
{
if
(
!
pref_DoCallback
(
aPS
)
)
{
return
false
;
}
state
=
PREF_PARSE_INIT
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
state
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
!
isspace
(
c
)
)
{
pref_ReportParseProblem
(
*
aPS
"
need
space
comment
or
semicolon
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_UNTIL_EOL
:
if
(
c
=
=
'
\
r
'
|
|
c
=
=
'
\
n
'
|
|
c
=
=
0x1A
)
{
state
=
aPS
-
>
mNextState
;
aPS
-
>
mNextState
=
PREF_PARSE_INIT
;
}
break
;
}
}
aPS
-
>
mState
=
state
;
return
true
;
}
#
ifdef
TEST_PREFREAD
static
void
pref_reader
(
void
*
aClosure
const
char
*
aPref
PrefValue
aVal
PrefType
aType
bool
aDefPref
)
{
printf
(
"
%
spref
(
\
"
%
s
\
"
"
aDefPref
?
"
"
:
"
user_
"
aPref
)
;
switch
(
aType
)
{
case
PREF_STRING
:
printf
(
"
\
"
%
s
\
"
)
;
\
n
"
aVal
.
mStringVal
)
;
break
;
case
PREF_INT
:
printf
(
"
%
i
)
;
\
n
"
aVal
.
mIntVal
)
;
break
;
case
PREF_BOOL
:
printf
(
"
%
s
)
;
\
n
"
aVal
.
mBoolVal
=
=
false
?
"
false
"
:
"
true
"
)
;
break
;
}
}
int
main
(
int
aArgc
char
*
*
aArgv
)
{
PrefParseState
aPS
;
char
buf
[
4096
]
;
FILE
*
fp
;
int
n
;
if
(
aArgc
=
=
1
)
{
printf
(
"
usage
:
prefread
file
.
js
\
n
"
)
;
return
-
1
;
}
fp
=
fopen
(
aArgv
[
1
]
"
r
"
)
;
if
(
!
fp
)
{
printf
(
"
failed
to
open
file
\
n
"
)
;
return
-
1
;
}
PREF_InitParseState
(
&
aPS
pref_reader
nullptr
nullptr
)
;
while
(
(
n
=
fread
(
buf
1
sizeof
(
buf
)
fp
)
)
>
0
)
{
PREF_ParseBuf
(
&
aPS
buf
n
)
;
}
PREF_FinalizeParseState
(
&
aPS
)
;
fclose
(
fp
)
;
return
0
;
}
#
endif
