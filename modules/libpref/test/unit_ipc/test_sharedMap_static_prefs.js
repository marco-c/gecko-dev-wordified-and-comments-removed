"
use
strict
"
;
const
PREF1_NAME
=
"
dom
.
webcomponents
.
shadowdom
.
report_usage
"
;
const
PREF1_VALUE
=
false
;
const
PREF2_NAME
=
"
dom
.
mutation
-
events
.
cssom
.
disabled
"
;
const
PREF2_VALUE
=
true
;
const
{
XPCShellContentUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
testing
-
common
/
XPCShellContentUtils
.
jsm
"
)
;
XPCShellContentUtils
.
init
(
this
)
;
const
{
prefs
}
=
Services
;
const
defaultPrefs
=
prefs
.
getDefaultBranch
(
"
"
)
;
add_task
(
async
function
test_sharedMap_static_prefs
(
)
{
equal
(
prefs
.
getBoolPref
(
PREF1_NAME
)
PREF1_VALUE
Expected
initial
value
for
{
PREF1_NAME
}
)
;
equal
(
prefs
.
getBoolPref
(
PREF2_NAME
)
PREF2_VALUE
Expected
initial
value
for
{
PREF2_NAME
}
)
;
defaultPrefs
.
setBoolPref
(
PREF1_NAME
!
PREF1_VALUE
)
;
prefs
.
setBoolPref
(
PREF2_NAME
!
PREF2_VALUE
)
;
equal
(
prefs
.
getBoolPref
(
PREF1_NAME
)
!
PREF1_VALUE
Expected
updated
value
for
{
PREF1_NAME
}
)
;
equal
(
prefs
.
getBoolPref
(
PREF2_NAME
)
!
PREF2_VALUE
Expected
updated
value
for
{
PREF2_NAME
}
)
;
let
contentPage
=
await
XPCShellContentUtils
.
loadContentPage
(
"
about
:
blank
"
{
remote
:
true
}
)
;
registerCleanupFunction
(
(
)
=
>
contentPage
.
close
(
)
)
;
let
values
=
await
contentPage
.
spawn
(
[
PREF1_NAME
PREF2_NAME
]
prefs
=
>
{
return
prefs
.
map
(
pref
=
>
Services
.
prefs
.
getBoolPref
(
pref
)
)
;
}
)
;
equal
(
values
[
0
]
!
PREF1_VALUE
Expected
content
value
for
{
PREF1_NAME
}
)
;
equal
(
values
[
1
]
!
PREF2_VALUE
Expected
content
value
for
{
PREF2_NAME
}
)
;
}
)
;
