const
PREF_INVALID
=
0
;
const
PREF_BOOL
=
128
;
const
PREF_INT
=
64
;
const
PREF_STRING
=
32
;
const
MAX_PREF_LENGTH
=
1
*
1024
*
1024
;
function
makeList
(
a
)
{
var
o
=
{
}
;
for
(
var
i
=
0
;
i
<
a
.
length
;
i
+
+
)
{
o
[
a
[
i
]
]
=
"
"
;
}
return
o
;
}
function
run_test
(
)
{
var
ps
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrefService
)
;
var
pb2
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrefBranch
)
;
var
pb
=
Cc
[
"
mozilla
.
org
/
preferences
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrefBranch
)
;
do_check_throws
(
function
(
)
{
pb
.
getPrefType
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
getBoolPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
setBoolPref
(
null
false
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
getIntPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
setIntPref
(
null
0
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
getCharPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
setCharPref
(
null
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
getStringPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
setStringPref
(
null
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
clearUserPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
prefHasUserValue
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
lockPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
prefIsLocked
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
unlockPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
deleteBranch
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
pb
.
getChildList
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
Assert
.
equal
(
pb
.
prefHasUserValue
(
"
UserPref
.
nonexistent
.
hasUserValue
"
)
false
)
;
pb
.
clearUserPref
(
"
UserPref
.
nonexistent
.
clearUserPref
"
)
;
Assert
.
equal
(
pb
.
getPrefType
(
"
UserPref
.
nonexistent
.
getPrefType
"
)
PREF_INVALID
)
;
Assert
.
equal
(
pb
.
root
"
"
)
;
do_check_throws
(
function
(
)
{
pb
.
getBoolPref
(
"
UserPref
.
nonexistent
.
getBoolPref
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
pb
.
setBoolPref
(
"
UserPref
.
nonexistent
.
setBoolPref
"
false
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
"
UserPref
.
nonexistent
.
setBoolPref
"
)
false
)
;
do_check_throws
(
function
(
)
{
pb
.
getIntPref
(
"
UserPref
.
nonexistent
.
getIntPref
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
pb
.
setIntPref
(
"
UserPref
.
nonexistent
.
setIntPref
"
5
)
;
Assert
.
equal
(
pb
.
getIntPref
(
"
UserPref
.
nonexistent
.
setIntPref
"
)
5
)
;
do_check_throws
(
function
(
)
{
pb
.
getCharPref
(
"
UserPref
.
nonexistent
.
getCharPref
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
pb
.
setCharPref
(
"
UserPref
.
nonexistent
.
setCharPref
"
"
_test
"
)
;
Assert
.
equal
(
pb
.
getCharPref
(
"
UserPref
.
nonexistent
.
setCharPref
"
)
"
_test
"
)
;
pb
.
setBoolPref
(
"
UserPref
.
existing
.
bool
"
true
)
;
pb
.
setIntPref
(
"
UserPref
.
existing
.
int
"
23
)
;
pb
.
setCharPref
(
"
UserPref
.
existing
.
char
"
"
hey
"
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
"
UserPref
.
existing
.
bool
"
)
true
)
;
Assert
.
equal
(
pb
.
getIntPref
(
"
UserPref
.
existing
.
int
"
)
23
)
;
Assert
.
equal
(
pb
.
getCharPref
(
"
UserPref
.
existing
.
char
"
)
"
hey
"
)
;
pb
.
setBoolPref
(
"
UserPref
.
existing
.
bool
"
false
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
"
UserPref
.
existing
.
bool
"
)
false
)
;
pb
.
setIntPref
(
"
UserPref
.
existing
.
int
"
24
)
;
Assert
.
equal
(
pb
.
getIntPref
(
"
UserPref
.
existing
.
int
"
)
24
)
;
pb
.
setCharPref
(
"
UserPref
.
existing
.
char
"
"
hej
d
!
"
)
;
Assert
.
equal
(
pb
.
getCharPref
(
"
UserPref
.
existing
.
char
"
)
"
hej
d
!
"
)
;
Assert
.
ok
(
pb
.
prefHasUserValue
(
"
UserPref
.
existing
.
bool
"
)
)
;
Assert
.
ok
(
pb
.
prefHasUserValue
(
"
UserPref
.
existing
.
int
"
)
)
;
Assert
.
ok
(
pb
.
prefHasUserValue
(
"
UserPref
.
existing
.
char
"
)
)
;
pb
.
clearUserPref
(
"
UserPref
.
existing
.
bool
"
)
;
Assert
.
ok
(
!
pb
.
prefHasUserValue
(
"
UserPref
.
existing
.
bool
"
)
)
;
pb
.
clearUserPref
(
"
UserPref
.
existing
.
int
"
)
;
Assert
.
ok
(
!
pb
.
prefHasUserValue
(
"
UserPref
.
existing
.
int
"
)
)
;
pb
.
clearUserPref
(
"
UserPref
.
existing
.
char
"
)
;
Assert
.
ok
(
!
pb
.
prefHasUserValue
(
"
UserPref
.
existing
.
char
"
)
)
;
let
largeStr
=
new
Array
(
MAX_PREF_LENGTH
+
1
)
.
join
(
"
x
"
)
;
pb
.
setCharPref
(
"
UserPref
.
large
.
char
"
largeStr
)
;
largeStr
+
=
"
x
"
;
do_check_throws
(
function
(
)
{
pb
.
setCharPref
(
"
UserPref
.
large
.
char
"
largeStr
)
;
}
Cr
.
NS_ERROR_ILLEGAL_VALUE
)
;
pb
.
setBoolPref
(
"
UserPref
.
getPrefType
.
bool
"
true
)
;
Assert
.
equal
(
pb
.
getPrefType
(
"
UserPref
.
getPrefType
.
bool
"
)
PREF_BOOL
)
;
pb
.
setIntPref
(
"
UserPref
.
getPrefType
.
int
"
-
234
)
;
Assert
.
equal
(
pb
.
getPrefType
(
"
UserPref
.
getPrefType
.
int
"
)
PREF_INT
)
;
pb
.
setCharPref
(
"
UserPref
.
getPrefType
.
char
"
"
testing1
.
.
2
"
)
;
Assert
.
equal
(
pb
.
getPrefType
(
"
UserPref
.
getPrefType
.
char
"
)
PREF_STRING
)
;
Assert
.
equal
(
ps
.
root
"
"
)
;
pb
.
setBoolPref
(
"
UserPref
.
root
.
boolPref
"
true
)
;
let
pb_1
=
ps
.
getBranch
(
"
UserPref
.
root
.
"
)
;
Assert
.
equal
(
pb_1
.
getBoolPref
(
"
boolPref
"
)
true
)
;
let
pb_2
=
ps
.
getBranch
(
"
UserPref
.
root
.
boolPref
"
)
;
Assert
.
equal
(
pb_2
.
getBoolPref
(
"
"
)
true
)
;
pb_2
.
setBoolPref
(
"
.
anotherPref
"
false
)
;
let
pb_3
=
ps
.
getBranch
(
"
UserPref
.
root
.
boolPre
"
)
;
Assert
.
equal
(
pb_3
.
getBoolPref
(
"
f
.
anotherPref
"
)
false
)
;
pb
.
setIntPref
(
"
UserPref
.
root
.
intPref
"
23
)
;
pb_1
=
ps
.
getBranch
(
"
UserPref
.
root
.
"
)
;
Assert
.
equal
(
pb_1
.
getIntPref
(
"
intPref
"
)
23
)
;
pb_2
=
ps
.
getBranch
(
"
UserPref
.
root
.
intPref
"
)
;
Assert
.
equal
(
pb_2
.
getIntPref
(
"
"
)
23
)
;
pb_2
.
setIntPref
(
"
.
anotherPref
"
69
)
;
pb_3
=
ps
.
getBranch
(
"
UserPref
.
root
.
intPre
"
)
;
Assert
.
equal
(
pb_3
.
getIntPref
(
"
f
.
anotherPref
"
)
69
)
;
pb
.
setCharPref
(
"
UserPref
.
root
.
charPref
"
"
_char
"
)
;
pb_1
=
ps
.
getBranch
(
"
UserPref
.
root
.
"
)
;
Assert
.
equal
(
pb_1
.
getCharPref
(
"
charPref
"
)
"
_char
"
)
;
pb_2
=
ps
.
getBranch
(
"
UserPref
.
root
.
charPref
"
)
;
Assert
.
equal
(
pb_2
.
getCharPref
(
"
"
)
"
_char
"
)
;
pb_2
.
setCharPref
(
"
.
anotherPref
"
"
_another
"
)
;
pb_3
=
ps
.
getBranch
(
"
UserPref
.
root
.
charPre
"
)
;
Assert
.
equal
(
pb_3
.
getCharPref
(
"
f
.
anotherPref
"
)
"
_another
"
)
;
pb1
=
ps
.
getBranch
(
"
UserPref
.
root
.
"
)
;
let
prefList
=
pb1
.
getChildList
(
"
"
)
;
Assert
.
equal
(
prefList
.
length
6
)
;
Assert
.
ok
(
"
boolPref
"
in
makeList
(
prefList
)
)
;
Assert
.
ok
(
"
intPref
"
in
makeList
(
prefList
)
)
;
Assert
.
ok
(
"
charPref
"
in
makeList
(
prefList
)
)
;
Assert
.
ok
(
"
boolPref
.
anotherPref
"
in
makeList
(
prefList
)
)
;
Assert
.
ok
(
"
intPref
.
anotherPref
"
in
makeList
(
prefList
)
)
;
Assert
.
ok
(
"
charPref
.
anotherPref
"
in
makeList
(
prefList
)
)
;
pb1
=
ps
.
getDefaultBranch
(
"
"
)
;
pb1
.
setBoolPref
(
"
DefaultPref
.
bool
"
true
)
;
Assert
.
equal
(
pb1
.
getBoolPref
(
"
DefaultPref
.
bool
"
)
true
)
;
Assert
.
ok
(
!
pb1
.
prefHasUserValue
(
"
DefaultPref
.
bool
"
)
)
;
ps
.
setBoolPref
(
"
DefaultPref
.
bool
"
false
)
;
Assert
.
ok
(
pb1
.
prefHasUserValue
(
"
DefaultPref
.
bool
"
)
)
;
Assert
.
equal
(
ps
.
getBoolPref
(
"
DefaultPref
.
bool
"
)
false
)
;
pb1
=
ps
.
getDefaultBranch
(
"
"
)
;
pb1
.
setIntPref
(
"
DefaultPref
.
int
"
100
)
;
Assert
.
equal
(
pb1
.
getIntPref
(
"
DefaultPref
.
int
"
)
100
)
;
Assert
.
ok
(
!
pb1
.
prefHasUserValue
(
"
DefaultPref
.
int
"
)
)
;
ps
.
setIntPref
(
"
DefaultPref
.
int
"
50
)
;
Assert
.
ok
(
pb1
.
prefHasUserValue
(
"
DefaultPref
.
int
"
)
)
;
Assert
.
equal
(
ps
.
getIntPref
(
"
DefaultPref
.
int
"
)
50
)
;
pb1
=
ps
.
getDefaultBranch
(
"
"
)
;
pb1
.
setCharPref
(
"
DefaultPref
.
char
"
"
_default
"
)
;
Assert
.
equal
(
pb1
.
getCharPref
(
"
DefaultPref
.
char
"
)
"
_default
"
)
;
Assert
.
ok
(
!
pb1
.
prefHasUserValue
(
"
DefaultPref
.
char
"
)
)
;
ps
.
setCharPref
(
"
DefaultPref
.
char
"
"
_user
"
)
;
Assert
.
ok
(
pb1
.
prefHasUserValue
(
"
DefaultPref
.
char
"
)
)
;
Assert
.
equal
(
ps
.
getCharPref
(
"
DefaultPref
.
char
"
)
"
_user
"
)
;
do_check_throws
(
function
(
)
{
ps
.
lockPref
(
"
DefaultPref
.
nonexistent
"
)
;
}
Cr
.
NS_ERROR_ILLEGAL_VALUE
)
;
do_check_throws
(
function
(
)
{
ps
.
unlockPref
(
"
DefaultPref
.
nonexistent
"
)
;
}
Cr
.
NS_ERROR_ILLEGAL_VALUE
)
;
Assert
.
ok
(
!
ps
.
prefIsLocked
(
"
DefaultPref
.
char
"
)
)
;
ps
.
lockPref
(
"
DefaultPref
.
char
"
)
;
Assert
.
equal
(
ps
.
getCharPref
(
"
DefaultPref
.
char
"
)
"
_default
"
)
;
Assert
.
ok
(
ps
.
prefIsLocked
(
"
DefaultPref
.
char
"
)
)
;
ps
.
unlockPref
(
"
DefaultPref
.
char
"
)
;
Assert
.
equal
(
ps
.
getCharPref
(
"
DefaultPref
.
char
"
)
"
_user
"
)
;
Assert
.
ok
(
!
ps
.
prefIsLocked
(
"
DefaultPref
.
char
"
)
)
;
ps
.
setCharPref
(
"
DefaultPref
.
char
"
"
_default
"
)
;
Assert
.
ok
(
!
pb1
.
prefHasUserValue
(
"
DefaultPref
.
char
"
)
)
;
ps
.
unlockPref
(
"
DefaultPref
.
char
"
)
;
ps
.
lockPref
(
"
DefaultPref
.
char
"
)
;
ps
.
lockPref
(
"
DefaultPref
.
char
"
)
;
ps
.
deleteBranch
(
"
DefaultPref
"
)
;
pb
=
ps
.
getBranch
(
"
DefaultPref
"
)
;
pb1
=
ps
.
getDefaultBranch
(
"
DefaultPref
"
)
;
do_check_throws
(
function
(
)
{
pb
.
getBoolPref
(
"
DefaultPref
.
bool
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb
.
getIntPref
(
"
DefaultPref
.
int
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb
.
getCharPref
(
"
DefaultPref
.
char
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb1
.
getBoolPref
(
"
DefaultPref
.
bool
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb1
.
getIntPref
(
"
DefaultPref
.
int
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb1
.
getCharPref
(
"
DefaultPref
.
char
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
ps
.
setBoolPref
(
"
ReadPref
.
bool
"
true
)
;
ps
.
setIntPref
(
"
ReadPref
.
int
"
230
)
;
ps
.
setCharPref
(
"
ReadPref
.
char
"
"
hello
"
)
;
let
savePrefFile
=
do_get_cwd
(
)
;
savePrefFile
.
append
(
"
data
"
)
;
savePrefFile
.
append
(
"
savePref
.
js
"
)
;
if
(
savePrefFile
.
exists
(
)
)
savePrefFile
.
remove
(
false
)
;
savePrefFile
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
0o666
)
;
ps
.
savePrefFile
(
savePrefFile
)
;
ps
.
resetPrefs
(
)
;
let
prefFile
=
do_get_file
(
"
data
/
testPref
.
js
"
)
;
ps
.
readUserPrefsFromFile
(
prefFile
)
;
do_check_throws
(
function
(
)
{
pb
.
getBoolPref
(
"
ReadPref
.
bool
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb
.
getIntPref
(
"
ReadPref
.
int
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb
.
getCharPref
(
"
ReadPref
.
char
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
pb
=
ps
.
getBranch
(
"
testPref
.
"
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
"
bool1
"
)
true
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
"
bool2
"
)
false
)
;
Assert
.
equal
(
pb
.
getIntPref
(
"
int1
"
)
23
)
;
Assert
.
equal
(
pb
.
getIntPref
(
"
int2
"
)
-
1236
)
;
Assert
.
equal
(
pb
.
getCharPref
(
"
char1
"
)
"
_testPref
"
)
;
Assert
.
equal
(
pb
.
getCharPref
(
"
char2
"
)
"
lskar
"
)
;
savePrefFile
.
exists
(
)
;
ps
.
readUserPrefsFromFile
(
savePrefFile
)
;
savePrefFile
.
remove
(
false
)
;
Assert
.
equal
(
ps
.
getBoolPref
(
"
ReadPref
.
bool
"
)
true
)
;
Assert
.
equal
(
ps
.
getIntPref
(
"
ReadPref
.
int
"
)
230
)
;
Assert
.
equal
(
ps
.
getCharPref
(
"
ReadPref
.
char
"
)
"
hello
"
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
"
bool1
"
)
true
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
"
bool2
"
)
false
)
;
Assert
.
equal
(
pb
.
getIntPref
(
"
int1
"
)
23
)
;
class
PrefObserver
{
constructor
(
prefBranch
expectedName
expectedValue
)
{
this
.
pb
=
prefBranch
;
this
.
name
=
expectedName
;
this
.
value
=
expectedValue
;
prefBranch
.
addObserver
(
expectedName
this
)
;
}
QueryInterface
(
aIID
)
{
if
(
aIID
.
equals
(
Ci
.
nsIObserver
)
|
|
aIID
.
equals
(
Ci
.
nsISupports
)
)
return
this
;
throw
Cr
.
NS_NOINTERFACE
;
}
observe
(
aSubject
aTopic
aState
)
{
Assert
.
equal
(
aTopic
"
nsPref
:
changed
"
)
;
Assert
.
equal
(
aState
this
.
name
)
;
Assert
.
equal
(
this
.
pb
.
getIntPref
(
aState
)
this
.
value
)
;
pb
.
removeObserver
(
aState
this
)
;
do_test_finished
(
)
;
}
}
do_test_pending
(
)
;
do_test_pending
(
)
;
do_test_pending
(
)
;
let
observer
=
new
PrefObserver
(
pb2
"
ReadPref
.
int
"
76
)
;
ps
.
setIntPref
(
"
ReadPref
.
int
"
76
)
;
pb2
.
removeObserver
(
"
ReadPref
.
int
"
observer
)
;
ps
.
setIntPref
(
"
ReadPref
.
int
"
32
)
;
pb
=
pb2
.
getBranch
(
"
ReadPref
.
"
)
;
observer
=
new
PrefObserver
(
pb
"
int
"
76
)
;
ps
.
setIntPref
(
"
ReadPref
.
int
"
76
)
;
observer
=
new
PrefObserver
(
pb
"
another_int
"
76
)
;
ps
.
setIntPref
(
"
ReadPref
.
another_int
"
76
)
;
}
