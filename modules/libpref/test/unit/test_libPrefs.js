Services
.
prefs
.
setBoolPref
(
"
security
.
turn_off_all_security_so_that_viruses_can_take_over_this_computer
"
false
)
;
const
PREF_INVALID
=
0
;
const
PREF_BOOL
=
128
;
const
PREF_INT
=
64
;
const
PREF_STRING
=
32
;
const
MAX_PREF_LENGTH
=
1
*
1024
*
1024
;
function
makeList
(
a
)
{
var
o
=
{
}
;
for
(
var
i
=
0
;
i
<
a
.
length
;
i
+
+
)
{
o
[
a
[
i
]
]
=
"
"
;
}
return
o
;
}
add_task
(
async
function
run_test
(
)
{
const
ps
=
Services
.
prefs
;
do_check_throws
(
function
(
)
{
ps
.
getPrefType
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
getBoolPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
setBoolPref
(
null
false
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
getIntPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
setIntPref
(
null
0
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
getCharPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
setCharPref
(
null
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
getStringPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
setStringPref
(
null
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
clearUserPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
prefHasUserValue
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
lockPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
prefIsLocked
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
unlockPref
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
deleteBranch
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
do_check_throws
(
function
(
)
{
ps
.
getChildList
(
null
)
;
}
Cr
.
NS_ERROR_INVALID_ARG
)
;
Assert
.
equal
(
ps
.
prefHasUserValue
(
"
UserPref
.
nonexistent
.
hasUserValue
"
)
false
)
;
ps
.
clearUserPref
(
"
UserPref
.
nonexistent
.
clearUserPref
"
)
;
Assert
.
equal
(
ps
.
getPrefType
(
"
UserPref
.
nonexistent
.
getPrefType
"
)
PREF_INVALID
)
;
Assert
.
equal
(
ps
.
root
"
"
)
;
do_check_throws
(
function
(
)
{
ps
.
getBoolPref
(
"
UserPref
.
nonexistent
.
getBoolPref
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
ps
.
setBoolPref
(
"
UserPref
.
nonexistent
.
setBoolPref
"
false
)
;
Assert
.
equal
(
ps
.
getBoolPref
(
"
UserPref
.
nonexistent
.
setBoolPref
"
)
false
)
;
do_check_throws
(
function
(
)
{
ps
.
getIntPref
(
"
UserPref
.
nonexistent
.
getIntPref
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
ps
.
setIntPref
(
"
UserPref
.
nonexistent
.
setIntPref
"
5
)
;
Assert
.
equal
(
ps
.
getIntPref
(
"
UserPref
.
nonexistent
.
setIntPref
"
)
5
)
;
do_check_throws
(
function
(
)
{
ps
.
getCharPref
(
"
UserPref
.
nonexistent
.
getCharPref
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
ps
.
setCharPref
(
"
UserPref
.
nonexistent
.
setCharPref
"
"
_test
"
)
;
Assert
.
equal
(
ps
.
getCharPref
(
"
UserPref
.
nonexistent
.
setCharPref
"
)
"
_test
"
)
;
ps
.
setBoolPref
(
"
UserPref
.
existing
.
bool
"
true
)
;
ps
.
setIntPref
(
"
UserPref
.
existing
.
int
"
23
)
;
ps
.
setCharPref
(
"
UserPref
.
existing
.
char
"
"
hey
"
)
;
Assert
.
equal
(
ps
.
getBoolPref
(
"
UserPref
.
existing
.
bool
"
)
true
)
;
Assert
.
equal
(
ps
.
getIntPref
(
"
UserPref
.
existing
.
int
"
)
23
)
;
Assert
.
equal
(
ps
.
getCharPref
(
"
UserPref
.
existing
.
char
"
)
"
hey
"
)
;
ps
.
setBoolPref
(
"
UserPref
.
existing
.
bool
"
false
)
;
Assert
.
equal
(
ps
.
getBoolPref
(
"
UserPref
.
existing
.
bool
"
)
false
)
;
ps
.
setIntPref
(
"
UserPref
.
existing
.
int
"
24
)
;
Assert
.
equal
(
ps
.
getIntPref
(
"
UserPref
.
existing
.
int
"
)
24
)
;
ps
.
setCharPref
(
"
UserPref
.
existing
.
char
"
"
hej
d
!
"
)
;
Assert
.
equal
(
ps
.
getCharPref
(
"
UserPref
.
existing
.
char
"
)
"
hej
d
!
"
)
;
Assert
.
ok
(
ps
.
prefHasUserValue
(
"
UserPref
.
existing
.
bool
"
)
)
;
Assert
.
ok
(
ps
.
prefHasUserValue
(
"
UserPref
.
existing
.
int
"
)
)
;
Assert
.
ok
(
ps
.
prefHasUserValue
(
"
UserPref
.
existing
.
char
"
)
)
;
ps
.
clearUserPref
(
"
UserPref
.
existing
.
bool
"
)
;
Assert
.
ok
(
!
ps
.
prefHasUserValue
(
"
UserPref
.
existing
.
bool
"
)
)
;
ps
.
clearUserPref
(
"
UserPref
.
existing
.
int
"
)
;
Assert
.
ok
(
!
ps
.
prefHasUserValue
(
"
UserPref
.
existing
.
int
"
)
)
;
ps
.
clearUserPref
(
"
UserPref
.
existing
.
char
"
)
;
Assert
.
ok
(
!
ps
.
prefHasUserValue
(
"
UserPref
.
existing
.
char
"
)
)
;
let
largeStr
=
new
Array
(
MAX_PREF_LENGTH
+
1
)
.
join
(
"
x
"
)
;
ps
.
setCharPref
(
"
UserPref
.
large
.
char
"
largeStr
)
;
largeStr
+
=
"
x
"
;
do_check_throws
(
function
(
)
{
ps
.
setCharPref
(
"
UserPref
.
large
.
char
"
largeStr
)
;
}
Cr
.
NS_ERROR_ILLEGAL_VALUE
)
;
ps
.
setBoolPref
(
"
UserPref
.
getPrefType
.
bool
"
true
)
;
Assert
.
equal
(
ps
.
getPrefType
(
"
UserPref
.
getPrefType
.
bool
"
)
PREF_BOOL
)
;
ps
.
setIntPref
(
"
UserPref
.
getPrefType
.
int
"
-
234
)
;
Assert
.
equal
(
ps
.
getPrefType
(
"
UserPref
.
getPrefType
.
int
"
)
PREF_INT
)
;
ps
.
setCharPref
(
"
UserPref
.
getPrefType
.
char
"
"
testing1
.
.
2
"
)
;
Assert
.
equal
(
ps
.
getPrefType
(
"
UserPref
.
getPrefType
.
char
"
)
PREF_STRING
)
;
Assert
.
equal
(
ps
.
root
"
"
)
;
ps
.
setBoolPref
(
"
UserPref
.
root
.
boolPref
"
true
)
;
let
pb_1
=
ps
.
getBranch
(
"
UserPref
.
root
.
"
)
;
Assert
.
equal
(
pb_1
.
getBoolPref
(
"
boolPref
"
)
true
)
;
let
pb_2
=
ps
.
getBranch
(
"
UserPref
.
root
.
boolPref
"
)
;
Assert
.
equal
(
pb_2
.
getBoolPref
(
"
"
)
true
)
;
pb_2
.
setBoolPref
(
"
.
anotherPref
"
false
)
;
let
pb_3
=
ps
.
getBranch
(
"
UserPref
.
root
.
boolPre
"
)
;
Assert
.
equal
(
pb_3
.
getBoolPref
(
"
f
.
anotherPref
"
)
false
)
;
ps
.
setIntPref
(
"
UserPref
.
root
.
intPref
"
23
)
;
pb_1
=
ps
.
getBranch
(
"
UserPref
.
root
.
"
)
;
Assert
.
equal
(
pb_1
.
getIntPref
(
"
intPref
"
)
23
)
;
pb_2
=
ps
.
getBranch
(
"
UserPref
.
root
.
intPref
"
)
;
Assert
.
equal
(
pb_2
.
getIntPref
(
"
"
)
23
)
;
pb_2
.
setIntPref
(
"
.
anotherPref
"
69
)
;
pb_3
=
ps
.
getBranch
(
"
UserPref
.
root
.
intPre
"
)
;
Assert
.
equal
(
pb_3
.
getIntPref
(
"
f
.
anotherPref
"
)
69
)
;
ps
.
setCharPref
(
"
UserPref
.
root
.
charPref
"
"
_char
"
)
;
pb_1
=
ps
.
getBranch
(
"
UserPref
.
root
.
"
)
;
Assert
.
equal
(
pb_1
.
getCharPref
(
"
charPref
"
)
"
_char
"
)
;
pb_2
=
ps
.
getBranch
(
"
UserPref
.
root
.
charPref
"
)
;
Assert
.
equal
(
pb_2
.
getCharPref
(
"
"
)
"
_char
"
)
;
pb_2
.
setCharPref
(
"
.
anotherPref
"
"
_another
"
)
;
pb_3
=
ps
.
getBranch
(
"
UserPref
.
root
.
charPre
"
)
;
Assert
.
equal
(
pb_3
.
getCharPref
(
"
f
.
anotherPref
"
)
"
_another
"
)
;
let
pb1
=
ps
.
getBranch
(
"
UserPref
.
root
.
"
)
;
let
prefList
=
pb1
.
getChildList
(
"
"
)
;
Assert
.
equal
(
prefList
.
length
6
)
;
Assert
.
ok
(
"
boolPref
"
in
makeList
(
prefList
)
)
;
Assert
.
ok
(
"
intPref
"
in
makeList
(
prefList
)
)
;
Assert
.
ok
(
"
charPref
"
in
makeList
(
prefList
)
)
;
Assert
.
ok
(
"
boolPref
.
anotherPref
"
in
makeList
(
prefList
)
)
;
Assert
.
ok
(
"
intPref
.
anotherPref
"
in
makeList
(
prefList
)
)
;
Assert
.
ok
(
"
charPref
.
anotherPref
"
in
makeList
(
prefList
)
)
;
pb1
=
ps
.
getDefaultBranch
(
"
"
)
;
pb1
.
setBoolPref
(
"
DefaultPref
.
bool
"
true
)
;
Assert
.
equal
(
pb1
.
getBoolPref
(
"
DefaultPref
.
bool
"
)
true
)
;
Assert
.
ok
(
!
pb1
.
prefHasUserValue
(
"
DefaultPref
.
bool
"
)
)
;
ps
.
setBoolPref
(
"
DefaultPref
.
bool
"
false
)
;
Assert
.
ok
(
pb1
.
prefHasUserValue
(
"
DefaultPref
.
bool
"
)
)
;
Assert
.
equal
(
ps
.
getBoolPref
(
"
DefaultPref
.
bool
"
)
false
)
;
pb1
=
ps
.
getDefaultBranch
(
"
"
)
;
pb1
.
setIntPref
(
"
DefaultPref
.
int
"
100
)
;
Assert
.
equal
(
pb1
.
getIntPref
(
"
DefaultPref
.
int
"
)
100
)
;
Assert
.
ok
(
!
pb1
.
prefHasUserValue
(
"
DefaultPref
.
int
"
)
)
;
ps
.
setIntPref
(
"
DefaultPref
.
int
"
50
)
;
Assert
.
ok
(
pb1
.
prefHasUserValue
(
"
DefaultPref
.
int
"
)
)
;
Assert
.
equal
(
ps
.
getIntPref
(
"
DefaultPref
.
int
"
)
50
)
;
pb1
=
ps
.
getDefaultBranch
(
"
"
)
;
pb1
.
setCharPref
(
"
DefaultPref
.
char
"
"
_default
"
)
;
Assert
.
equal
(
pb1
.
getCharPref
(
"
DefaultPref
.
char
"
)
"
_default
"
)
;
Assert
.
ok
(
!
pb1
.
prefHasUserValue
(
"
DefaultPref
.
char
"
)
)
;
ps
.
setCharPref
(
"
DefaultPref
.
char
"
"
_user
"
)
;
Assert
.
ok
(
pb1
.
prefHasUserValue
(
"
DefaultPref
.
char
"
)
)
;
Assert
.
equal
(
ps
.
getCharPref
(
"
DefaultPref
.
char
"
)
"
_user
"
)
;
do_check_throws
(
function
(
)
{
ps
.
lockPref
(
"
DefaultPref
.
nonexistent
"
)
;
}
Cr
.
NS_ERROR_ILLEGAL_VALUE
)
;
do_check_throws
(
function
(
)
{
ps
.
unlockPref
(
"
DefaultPref
.
nonexistent
"
)
;
}
Cr
.
NS_ERROR_ILLEGAL_VALUE
)
;
Assert
.
ok
(
!
ps
.
prefIsLocked
(
"
DefaultPref
.
char
"
)
)
;
ps
.
lockPref
(
"
DefaultPref
.
char
"
)
;
Assert
.
equal
(
ps
.
getCharPref
(
"
DefaultPref
.
char
"
)
"
_default
"
)
;
Assert
.
ok
(
ps
.
prefIsLocked
(
"
DefaultPref
.
char
"
)
)
;
ps
.
unlockPref
(
"
DefaultPref
.
char
"
)
;
Assert
.
equal
(
ps
.
getCharPref
(
"
DefaultPref
.
char
"
)
"
_user
"
)
;
Assert
.
ok
(
!
ps
.
prefIsLocked
(
"
DefaultPref
.
char
"
)
)
;
ps
.
setCharPref
(
"
DefaultPref
.
char
"
"
_default
"
)
;
Assert
.
ok
(
!
pb1
.
prefHasUserValue
(
"
DefaultPref
.
char
"
)
)
;
ps
.
unlockPref
(
"
DefaultPref
.
char
"
)
;
ps
.
lockPref
(
"
DefaultPref
.
char
"
)
;
ps
.
lockPref
(
"
DefaultPref
.
char
"
)
;
ps
.
deleteBranch
(
"
DefaultPref
"
)
;
let
pb
=
ps
.
getBranch
(
"
DefaultPref
"
)
;
pb1
=
ps
.
getDefaultBranch
(
"
DefaultPref
"
)
;
do_check_throws
(
function
(
)
{
pb
.
getBoolPref
(
"
DefaultPref
.
bool
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb
.
getIntPref
(
"
DefaultPref
.
int
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb
.
getCharPref
(
"
DefaultPref
.
char
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb1
.
getBoolPref
(
"
DefaultPref
.
bool
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb1
.
getIntPref
(
"
DefaultPref
.
int
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb1
.
getCharPref
(
"
DefaultPref
.
char
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
ps
.
setBoolPref
(
"
ReadPref
.
bool
"
true
)
;
ps
.
setIntPref
(
"
ReadPref
.
int
"
230
)
;
ps
.
setCharPref
(
"
ReadPref
.
char
"
"
hello
"
)
;
let
savePrefFile
=
do_get_cwd
(
)
;
savePrefFile
.
append
(
"
data
"
)
;
savePrefFile
.
append
(
"
savePref
.
js
"
)
;
if
(
savePrefFile
.
exists
(
)
)
{
savePrefFile
.
remove
(
false
)
;
}
savePrefFile
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
0o666
)
;
ps
.
savePrefFile
(
savePrefFile
)
;
ps
.
resetPrefs
(
)
;
let
prefFile
=
do_get_file
(
"
data
/
testPref
.
js
"
)
;
ps
.
readUserPrefsFromFile
(
prefFile
)
;
do_check_throws
(
function
(
)
{
pb
.
getBoolPref
(
"
ReadPref
.
bool
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb
.
getIntPref
(
"
ReadPref
.
int
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
do_check_throws
(
function
(
)
{
pb
.
getCharPref
(
"
ReadPref
.
char
"
)
;
}
Cr
.
NS_ERROR_UNEXPECTED
)
;
pb
=
ps
.
getBranch
(
"
testPref
.
"
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
"
bool1
"
)
true
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
"
bool2
"
)
false
)
;
Assert
.
equal
(
pb
.
getIntPref
(
"
int1
"
)
23
)
;
Assert
.
equal
(
pb
.
getIntPref
(
"
int2
"
)
-
1236
)
;
Assert
.
equal
(
pb
.
getCharPref
(
"
char1
"
)
"
_testPref
"
)
;
Assert
.
equal
(
pb
.
getCharPref
(
"
char2
"
)
"
lskar
"
)
;
savePrefFile
.
exists
(
)
;
ps
.
readUserPrefsFromFile
(
savePrefFile
)
;
savePrefFile
.
remove
(
false
)
;
Assert
.
equal
(
ps
.
getBoolPref
(
"
ReadPref
.
bool
"
)
true
)
;
Assert
.
equal
(
ps
.
getIntPref
(
"
ReadPref
.
int
"
)
230
)
;
Assert
.
equal
(
ps
.
getCharPref
(
"
ReadPref
.
char
"
)
"
hello
"
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
"
bool1
"
)
true
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
"
bool2
"
)
false
)
;
Assert
.
equal
(
pb
.
getIntPref
(
"
int1
"
)
23
)
;
class
PrefObserver
{
constructor
(
prefBranch
expectedName
expectedValue
finishedResolve
)
{
this
.
pb
=
prefBranch
;
this
.
name
=
expectedName
;
this
.
value
=
expectedValue
;
this
.
finishedResolve
=
finishedResolve
;
this
.
resolveCalls
=
0
;
prefBranch
.
addObserver
(
expectedName
this
)
;
}
observe
(
aSubject
aTopic
aState
)
{
Assert
.
equal
(
aTopic
"
nsPref
:
changed
"
)
;
Assert
.
equal
(
aState
this
.
name
)
;
Assert
.
equal
(
this
.
pb
.
getIntPref
(
aState
)
this
.
value
)
;
pb
.
removeObserver
(
aState
this
)
;
this
.
resolveCalls
+
+
;
this
.
finishedResolve
(
)
;
}
}
PrefObserver
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
]
)
;
let
promiseResolvers
=
Promise
.
withResolvers
(
)
;
let
observer
=
new
PrefObserver
(
ps
"
ReadPref
.
int
"
76
promiseResolvers
.
resolve
)
;
ps
.
setIntPref
(
"
ReadPref
.
int
"
76
)
;
await
promiseResolvers
.
promise
;
ps
.
removeObserver
(
"
ReadPref
.
int
"
observer
)
;
ps
.
setIntPref
(
"
ReadPref
.
int
"
32
)
;
pb
=
ps
.
getBranch
(
"
ReadPref
.
"
)
;
promiseResolvers
=
Promise
.
withResolvers
(
)
;
let
newObserver
=
new
PrefObserver
(
pb
"
int
"
76
promiseResolvers
.
resolve
)
;
ps
.
setIntPref
(
"
ReadPref
.
int
"
76
)
;
await
promiseResolvers
.
promise
;
promiseResolvers
=
Promise
.
withResolvers
(
)
;
newObserver
=
new
PrefObserver
(
pb
"
another_int
"
76
promiseResolvers
.
resolve
)
;
ps
.
setIntPref
(
"
ReadPref
.
another_int
"
76
)
;
await
promiseResolvers
.
promise
;
Assert
.
equal
(
observer
.
resolveCalls
1
"
Observer
should
not
be
called
after
removal
"
)
;
}
)
;
add_task
(
function
test_deleteBranch_observers
(
)
{
const
ps
=
Services
.
prefs
;
ps
.
setBoolPref
(
"
DeleteTest
.
branch1
.
bool
"
true
)
;
ps
.
setIntPref
(
"
DeleteTest
.
branch1
.
int
"
42
)
;
ps
.
setCharPref
(
"
DeleteTest
.
branch1
.
char
"
"
test
"
)
;
ps
.
setBoolPref
(
"
DeleteTest
.
branch2
.
bool
"
false
)
;
ps
.
setCharPref
(
"
DeleteTest
.
other
"
"
other
"
)
;
class
DeleteObserver
{
constructor
(
)
{
this
.
notifications
=
[
]
;
}
observe
(
aSubject
aTopic
aData
)
{
Assert
.
equal
(
aTopic
"
nsPref
:
changed
"
)
;
this
.
notifications
.
push
(
{
subject
:
aSubject
topic
:
aTopic
data
:
aData
}
)
;
}
}
DeleteObserver
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
]
)
;
let
rootObserver
=
new
DeleteObserver
(
)
;
ps
.
addObserver
(
"
DeleteTest
.
"
rootObserver
)
;
let
branchObserver
=
new
DeleteObserver
(
)
;
let
branch1
=
ps
.
getBranch
(
"
DeleteTest
.
branch1
.
"
)
;
branch1
.
addObserver
(
"
"
branchObserver
)
;
let
prefObserver
=
new
DeleteObserver
(
)
;
ps
.
addObserver
(
"
DeleteTest
.
branch1
.
bool
"
prefObserver
)
;
ps
.
deleteBranch
(
"
DeleteTest
.
branch1
"
)
;
Assert
.
equal
(
rootObserver
.
notifications
.
length
3
"
Root
observer
should
receive
3
notifications
"
)
;
let
expectedPrefs
=
[
"
DeleteTest
.
branch1
.
bool
"
"
DeleteTest
.
branch1
.
char
"
"
DeleteTest
.
branch1
.
int
"
]
;
let
receivedPrefs
=
rootObserver
.
notifications
.
map
(
n
=
>
n
.
data
)
.
sort
(
)
;
Assert
.
deepEqual
(
receivedPrefs
expectedPrefs
"
Root
observer
should
receive
correct
pref
names
"
)
;
for
(
let
notification
of
rootObserver
.
notifications
)
{
Assert
.
equal
(
notification
.
topic
"
nsPref
:
changed
"
"
Topic
should
be
nsPref
:
changed
"
)
;
Assert
.
ok
(
notification
.
subject
instanceof
Ci
.
nsIPrefBranch
"
Subject
should
be
nsIPrefBranch
"
)
;
Assert
.
ok
(
!
notification
.
subject
.
root
"
Subject
root
should
be
falsy
for
root
observer
"
)
;
}
Assert
.
equal
(
branchObserver
.
notifications
.
length
3
"
Branch
observer
should
receive
3
notifications
"
)
;
let
expectedBranchNames
=
[
"
bool
"
"
char
"
"
int
"
]
;
let
receivedBranchNames
=
branchObserver
.
notifications
.
map
(
n
=
>
n
.
data
)
.
sort
(
)
;
Assert
.
deepEqual
(
receivedBranchNames
expectedBranchNames
"
Branch
observer
should
receive
pref
names
relative
to
branch
root
"
)
;
Assert
.
equal
(
prefObserver
.
notifications
.
length
1
"
Specific
pref
observer
should
receive
1
notification
"
)
;
Assert
.
equal
(
prefObserver
.
notifications
[
0
]
.
data
"
DeleteTest
.
branch1
.
bool
"
"
Specific
pref
observer
should
receive
correct
pref
name
"
)
;
Assert
.
throws
(
(
)
=
>
ps
.
getBoolPref
(
"
DeleteTest
.
branch1
.
bool
"
)
/
NS_ERROR_UNEXPECTED
/
"
Deleted
boolean
pref
should
throw
when
accessed
"
)
;
Assert
.
throws
(
(
)
=
>
ps
.
getIntPref
(
"
DeleteTest
.
branch1
.
int
"
)
/
NS_ERROR_UNEXPECTED
/
"
Deleted
integer
pref
should
throw
when
accessed
"
)
;
Assert
.
throws
(
(
)
=
>
ps
.
getCharPref
(
"
DeleteTest
.
branch1
.
char
"
)
/
NS_ERROR_UNEXPECTED
/
"
Deleted
char
pref
should
throw
when
accessed
"
)
;
Assert
.
equal
(
ps
.
getBoolPref
(
"
DeleteTest
.
branch2
.
bool
"
)
false
"
Unrelated
preferences
should
not
be
affected
"
)
;
Assert
.
equal
(
ps
.
getCharPref
(
"
DeleteTest
.
other
"
)
"
other
"
"
Unrelated
preferences
should
not
be
affected
"
)
;
ps
.
removeObserver
(
"
DeleteTest
.
"
rootObserver
)
;
branch1
.
removeObserver
(
"
"
branchObserver
)
;
ps
.
removeObserver
(
"
DeleteTest
.
branch1
.
bool
"
prefObserver
)
;
ps
.
deleteBranch
(
"
DeleteTest
"
)
;
}
)
;
add_task
(
function
test_deleteBranch_empty_branch
(
)
{
const
ps
=
Services
.
prefs
;
let
observer
=
{
notifications
:
[
]
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
]
)
observe
(
_aSubject
aTopic
aData
)
{
this
.
notifications
.
push
(
{
topic
:
aTopic
data
:
aData
}
)
;
}
}
;
ps
.
addObserver
(
"
EmptyBranch
.
"
observer
)
;
ps
.
deleteBranch
(
"
EmptyBranch
"
)
;
Assert
.
equal
(
observer
.
notifications
.
length
0
"
Deleting
empty
/
non
-
existent
branch
should
not
trigger
observer
notifications
"
)
;
ps
.
removeObserver
(
"
EmptyBranch
.
"
observer
)
;
}
)
;
add_task
(
function
test_deleteBranch_user_and_default_values
(
)
{
const
ps
=
Services
.
prefs
;
let
defaultBranch
=
ps
.
getDefaultBranch
(
"
"
)
;
defaultBranch
.
setBoolPref
(
"
MixedTest
.
pref1
"
false
)
;
defaultBranch
.
setIntPref
(
"
MixedTest
.
pref2
"
10
)
;
ps
.
setBoolPref
(
"
MixedTest
.
pref1
"
true
)
;
ps
.
setIntPref
(
"
MixedTest
.
pref2
"
20
)
;
ps
.
setCharPref
(
"
MixedTest
.
pref3
"
"
user
-
only
"
)
;
let
observer
=
{
notifications
:
[
]
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
]
)
observe
(
aSubject
aTopic
aData
)
{
this
.
notifications
.
push
(
{
topic
:
aTopic
data
:
aData
}
)
;
}
}
;
ps
.
addObserver
(
"
MixedTest
.
"
observer
)
;
ps
.
deleteBranch
(
"
MixedTest
"
)
;
Assert
.
equal
(
observer
.
notifications
.
length
3
"
Should
receive
notifications
for
all
preferences
with
any
values
"
)
;
let
receivedPrefs
=
observer
.
notifications
.
map
(
n
=
>
n
.
data
)
.
sort
(
)
;
let
expectedPrefs
=
[
"
MixedTest
.
pref1
"
"
MixedTest
.
pref2
"
"
MixedTest
.
pref3
"
]
;
Assert
.
deepEqual
(
receivedPrefs
expectedPrefs
"
Should
receive
notifications
for
all
deleted
preferences
"
)
;
Assert
.
throws
(
(
)
=
>
ps
.
getBoolPref
(
"
MixedTest
.
pref1
"
)
/
NS_ERROR_UNEXPECTED
/
"
Pref
with
default
value
should
be
completely
deleted
"
)
;
Assert
.
throws
(
(
)
=
>
ps
.
getIntPref
(
"
MixedTest
.
pref2
"
)
/
NS_ERROR_UNEXPECTED
/
"
Pref
with
default
value
should
be
completely
deleted
"
)
;
Assert
.
throws
(
(
)
=
>
ps
.
getCharPref
(
"
MixedTest
.
pref3
"
)
/
NS_ERROR_UNEXPECTED
/
"
User
-
only
pref
should
be
deleted
"
)
;
ps
.
removeObserver
(
"
MixedTest
.
"
observer
)
;
}
)
;
add_task
(
function
test_deleteBranch_weak_observers
(
)
{
const
ps
=
Services
.
prefs
;
ps
.
setBoolPref
(
"
WeakTest
.
pref
"
true
)
;
let
observer
=
{
notifications
:
[
]
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIObserver
"
"
nsISupportsWeakReference
"
]
)
observe
(
aSubject
aTopic
aData
)
{
this
.
notifications
.
push
(
{
topic
:
aTopic
data
:
aData
}
)
;
}
}
;
ps
.
addObserver
(
"
WeakTest
.
"
observer
true
)
;
ps
.
deleteBranch
(
"
WeakTest
"
)
;
Assert
.
equal
(
observer
.
notifications
.
length
1
"
Weak
observer
should
receive
deletion
notification
"
)
;
Assert
.
equal
(
observer
.
notifications
[
0
]
.
data
"
WeakTest
.
pref
"
"
Weak
observer
should
receive
correct
pref
name
"
)
;
ps
.
removeObserver
(
"
WeakTest
.
"
observer
)
;
}
)
;
add_task
(
function
test_pref_type_change_after_clear
(
)
{
const
ps
=
Services
.
prefs
;
const
prefName
=
"
TypeChangeTest
.
pref
"
;
ps
.
setBoolPref
(
prefName
true
)
;
Assert
.
equal
(
ps
.
getBoolPref
(
prefName
)
true
)
;
Assert
.
equal
(
ps
.
getPrefType
(
prefName
)
PREF_BOOL
)
;
ps
.
clearUserPref
(
prefName
)
;
Assert
.
ok
(
!
ps
.
prefHasUserValue
(
prefName
)
)
;
ps
.
setIntPref
(
prefName
42
)
;
Assert
.
equal
(
ps
.
getIntPref
(
prefName
)
42
)
;
Assert
.
equal
(
ps
.
getPrefType
(
prefName
)
PREF_INT
)
;
ps
.
clearUserPref
(
prefName
)
;
Assert
.
ok
(
!
ps
.
prefHasUserValue
(
prefName
)
)
;
ps
.
setCharPref
(
prefName
"
test_string
"
)
;
Assert
.
equal
(
ps
.
getCharPref
(
prefName
)
"
test_string
"
)
;
Assert
.
equal
(
ps
.
getPrefType
(
prefName
)
PREF_STRING
)
;
ps
.
clearUserPref
(
prefName
)
;
Assert
.
ok
(
!
ps
.
prefHasUserValue
(
prefName
)
)
;
ps
.
setBoolPref
(
prefName
false
)
;
Assert
.
equal
(
ps
.
getBoolPref
(
prefName
)
false
)
;
Assert
.
equal
(
ps
.
getPrefType
(
prefName
)
PREF_BOOL
)
;
const
pb
=
ps
.
getBranch
(
"
TypeChangeTest
.
"
)
;
const
branchPrefName
=
"
branch_pref
"
;
pb
.
setBoolPref
(
branchPrefName
true
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
branchPrefName
)
true
)
;
Assert
.
equal
(
pb
.
getPrefType
(
branchPrefName
)
PREF_BOOL
)
;
pb
.
clearUserPref
(
branchPrefName
)
;
Assert
.
ok
(
!
pb
.
prefHasUserValue
(
branchPrefName
)
)
;
pb
.
setIntPref
(
branchPrefName
123
)
;
Assert
.
equal
(
pb
.
getIntPref
(
branchPrefName
)
123
)
;
Assert
.
equal
(
pb
.
getPrefType
(
branchPrefName
)
PREF_INT
)
;
pb
.
clearUserPref
(
branchPrefName
)
;
Assert
.
ok
(
!
pb
.
prefHasUserValue
(
branchPrefName
)
)
;
pb
.
setCharPref
(
branchPrefName
"
branch_test
"
)
;
Assert
.
equal
(
pb
.
getCharPref
(
branchPrefName
)
"
branch_test
"
)
;
Assert
.
equal
(
pb
.
getPrefType
(
branchPrefName
)
PREF_STRING
)
;
pb
.
clearUserPref
(
branchPrefName
)
;
Assert
.
ok
(
!
pb
.
prefHasUserValue
(
branchPrefName
)
)
;
pb
.
setBoolPref
(
branchPrefName
true
)
;
Assert
.
equal
(
pb
.
getBoolPref
(
branchPrefName
)
true
)
;
Assert
.
equal
(
pb
.
getPrefType
(
branchPrefName
)
PREF_BOOL
)
;
ps
.
deleteBranch
(
"
TypeChangeTest
"
)
;
}
)
;
