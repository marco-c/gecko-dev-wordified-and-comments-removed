const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
ps
=
Services
.
prefs
;
function
resetAndLoadDefaults
(
)
{
ps
.
resetPrefs
(
)
;
ps
.
readDefaultPrefsFromFile
(
do_get_file
(
"
data
/
testPrefSticky
.
js
"
)
)
;
}
function
resetAndLoadAll
(
)
{
ps
.
resetPrefs
(
)
;
ps
.
readDefaultPrefsFromFile
(
do_get_file
(
"
data
/
testPrefSticky
.
js
"
)
)
;
ps
.
readUserPrefsFromFile
(
do_get_file
(
"
data
/
testPrefStickyUser
.
js
"
)
)
;
}
function
saveAndReload
(
)
{
let
file
=
do_get_profile
(
)
;
file
.
append
(
"
prefs
.
js
"
)
;
ps
.
savePrefFile
(
file
)
;
ps
.
resetPrefs
(
)
;
file
.
exists
(
)
;
ps
.
readUserPrefsFromFile
(
file
)
;
}
add_test
(
function
notWrittenWhenUnchanged
(
)
{
resetAndLoadDefaults
(
)
;
Assert
.
strictEqual
(
ps
.
getBoolPref
(
"
testPref
.
unsticky
.
bool
"
)
true
)
;
Assert
.
strictEqual
(
ps
.
getBoolPref
(
"
testPref
.
sticky
.
bool
"
)
false
)
;
saveAndReload
(
)
;
try
{
ps
.
getBoolPref
(
"
testPref
.
sticky
.
bool
"
)
;
Assert
.
ok
(
false
"
expected
failure
reading
this
pref
"
)
;
}
catch
(
ex
)
{
Assert
.
ok
(
ex
"
exception
reading
regular
pref
"
)
;
}
run_next_test
(
)
;
}
)
;
add_test
(
function
writtenOnceLoadedWithoutChange
(
)
{
resetAndLoadAll
(
)
;
saveAndReload
(
)
;
Assert
.
strictEqual
(
ps
.
getBoolPref
(
"
testPref
.
sticky
.
bool
"
)
false
"
user_pref
was
written
with
default
value
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
writtenOnceLoadedWithChangeNonDefault
(
)
{
resetAndLoadAll
(
)
;
ps
.
setBoolPref
(
"
testPref
.
sticky
.
bool
"
false
)
;
saveAndReload
(
)
;
Assert
.
strictEqual
(
ps
.
getBoolPref
(
"
testPref
.
sticky
.
bool
"
)
false
"
user_pref
was
written
with
custom
value
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
writtenOnceLoadedWithChangeNonDefault
(
)
{
resetAndLoadAll
(
)
;
ps
.
setBoolPref
(
"
testPref
.
sticky
.
bool
"
true
)
;
saveAndReload
(
)
;
Assert
.
strictEqual
(
ps
.
getBoolPref
(
"
testPref
.
sticky
.
bool
"
)
true
"
user_pref
was
written
with
custom
value
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
hasUserValue
(
)
{
resetAndLoadDefaults
(
)
;
Assert
.
strictEqual
(
ps
.
getBoolPref
(
"
testPref
.
sticky
.
bool
"
)
false
)
;
Assert
.
ok
(
!
ps
.
prefHasUserValue
(
"
testPref
.
sticky
.
bool
"
)
"
should
not
initially
reflect
a
user
value
"
)
;
ps
.
setBoolPref
(
"
testPref
.
sticky
.
bool
"
false
)
;
Assert
.
ok
(
ps
.
prefHasUserValue
(
"
testPref
.
sticky
.
bool
"
)
"
should
reflect
a
user
value
after
set
to
default
"
)
;
ps
.
setBoolPref
(
"
testPref
.
sticky
.
bool
"
true
)
;
Assert
.
ok
(
ps
.
prefHasUserValue
(
"
testPref
.
sticky
.
bool
"
)
"
should
reflect
a
user
value
after
change
to
non
-
default
"
)
;
ps
.
clearUserPref
(
"
testPref
.
sticky
.
bool
"
)
;
Assert
.
ok
(
!
ps
.
prefHasUserValue
(
"
testPref
.
sticky
.
bool
"
)
"
should
reset
to
no
user
value
"
)
;
ps
.
setBoolPref
(
"
testPref
.
sticky
.
bool
"
false
"
expected
default
"
)
;
resetAndLoadAll
(
)
;
Assert
.
strictEqual
(
ps
.
getBoolPref
(
"
testPref
.
sticky
.
bool
"
)
false
)
;
Assert
.
ok
(
ps
.
prefHasUserValue
(
"
testPref
.
sticky
.
bool
"
)
"
should
have
a
user
value
when
loaded
value
is
the
default
"
)
;
run_next_test
(
)
;
}
)
;
add_test
(
function
clearUserPref
(
)
{
resetAndLoadAll
(
)
;
ps
.
clearUserPref
(
"
testPref
.
sticky
.
bool
"
)
;
saveAndReload
(
)
;
try
{
ps
.
getBoolPref
(
"
testPref
.
sticky
.
bool
"
)
;
Assert
.
ok
(
false
"
expected
failure
reading
this
pref
"
)
;
}
catch
(
ex
)
{
Assert
.
ok
(
ex
"
pref
doesn
'
t
have
a
sticky
value
"
)
;
}
run_next_test
(
)
;
}
)
;
add_test
(
function
observerFires
(
)
{
resetAndLoadDefaults
(
)
;
function
observe
(
subject
topic
data
)
{
Assert
.
equal
(
data
"
testPref
.
sticky
.
bool
"
)
;
ps
.
removeObserver
(
"
testPref
.
sticky
.
bool
"
observe
)
;
run_next_test
(
)
;
}
ps
.
addObserver
(
"
testPref
.
sticky
.
bool
"
observe
)
;
ps
.
setBoolPref
(
"
testPref
.
sticky
.
bool
"
ps
.
getBoolPref
(
"
testPref
.
sticky
.
bool
"
)
)
;
}
)
;
