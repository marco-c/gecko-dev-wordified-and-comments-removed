#
ifndef
mozilla_StaticPrefs_h
#
define
mozilla_StaticPrefs_h
#
include
"
gfxPlatform
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
mozilla
/
gfx
/
LoggingConstants
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
<
atomic
>
#
include
<
cmath
>
namespace
mozilla
{
class
SharedPrefMapBuilder
;
typedef
const
char
*
String
;
typedef
Atomic
<
bool
Relaxed
>
RelaxedAtomicBool
;
typedef
Atomic
<
bool
ReleaseAcquire
>
ReleaseAcquireAtomicBool
;
typedef
Atomic
<
bool
SequentiallyConsistent
>
SequentiallyConsistentAtomicBool
;
typedef
Atomic
<
int32_t
Relaxed
>
RelaxedAtomicInt32
;
typedef
Atomic
<
int32_t
ReleaseAcquire
>
ReleaseAcquireAtomicInt32
;
typedef
Atomic
<
int32_t
SequentiallyConsistent
>
SequentiallyConsistentAtomicInt32
;
typedef
Atomic
<
uint32_t
Relaxed
>
RelaxedAtomicUint32
;
typedef
Atomic
<
uint32_t
ReleaseAcquire
>
ReleaseAcquireAtomicUint32
;
typedef
Atomic
<
uint32_t
SequentiallyConsistent
>
SequentiallyConsistentAtomicUint32
;
typedef
std
:
:
atomic
<
float
>
AtomicFloat
;
template
<
typename
T
>
struct
StripAtomicImpl
{
typedef
T
Type
;
}
;
template
<
typename
T
MemoryOrdering
Order
>
struct
StripAtomicImpl
<
Atomic
<
T
Order
>
>
{
typedef
T
Type
;
}
;
template
<
typename
T
>
struct
StripAtomicImpl
<
std
:
:
atomic
<
T
>
>
{
typedef
T
Type
;
}
;
template
<
typename
T
>
using
StripAtomic
=
typename
StripAtomicImpl
<
T
>
:
:
Type
;
template
<
typename
T
>
struct
IsAtomic
:
FalseType
{
}
;
template
<
typename
T
MemoryOrdering
Order
>
struct
IsAtomic
<
Atomic
<
T
Order
>
>
:
TrueType
{
}
;
template
<
typename
T
>
struct
IsAtomic
<
std
:
:
atomic
<
T
>
>
:
TrueType
{
}
;
namespace
StaticPrefs
{
enum
class
UpdatePolicy
{
Skip
Once
Live
}
;
void
MaybeInitOncePrefs
(
)
;
#
define
PREF
(
name
cpp_type
default_value
)
#
define
VARCACHE_PREF
(
policy
name
id
cpp_type
default_value
)
\
extern
cpp_type
sVarCache_
#
#
id
;
\
inline
StripAtomic
<
cpp_type
>
id
(
)
{
\
if
(
UpdatePolicy
:
:
policy
!
=
UpdatePolicy
:
:
Once
)
{
\
MOZ_DIAGNOSTIC_ASSERT
(
\
UpdatePolicy
:
:
policy
=
=
UpdatePolicy
:
:
Skip
|
|
\
IsAtomic
<
cpp_type
>
:
:
value
|
|
NS_IsMainThread
(
)
\
"
Non
-
atomic
static
pref
'
"
name
\
"
'
being
accessed
on
background
thread
by
getter
"
)
;
\
return
sVarCache_
#
#
id
;
\
}
\
MaybeInitOncePrefs
(
)
;
\
return
sVarCache_
#
#
id
;
\
}
\
inline
const
char
*
Get
#
#
id
#
#
PrefName
(
)
{
return
name
;
}
\
inline
StripAtomic
<
cpp_type
>
Get
#
#
id
#
#
PrefDefault
(
)
{
return
default_value
;
}
#
include
"
mozilla
/
StaticPrefList
.
h
"
#
undef
PREF
#
undef
VARCACHE_PREF
}
}
#
endif
