#
ifndef
mozilla_StaticPrefs_h
#
define
mozilla_StaticPrefs_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
MainThreadUtils
.
h
"
namespace
mozilla
{
typedef
const
char
*
String
;
typedef
Atomic
<
bool
Relaxed
>
RelaxedAtomicBool
;
typedef
Atomic
<
bool
ReleaseAcquire
>
ReleaseAcquireAtomicBool
;
typedef
Atomic
<
bool
SequentiallyConsistent
>
SequentiallyConsistentAtomicBool
;
typedef
Atomic
<
int32_t
Relaxed
>
RelaxedAtomicInt32
;
typedef
Atomic
<
int32_t
ReleaseAcquire
>
ReleaseAcquireAtomicInt32
;
typedef
Atomic
<
int32_t
SequentiallyConsistent
>
SequentiallyConsistentAtomicInt32
;
typedef
Atomic
<
uint32_t
Relaxed
>
RelaxedAtomicUint32
;
typedef
Atomic
<
uint32_t
ReleaseAcquire
>
ReleaseAcquireAtomicUint32
;
typedef
Atomic
<
uint32_t
SequentiallyConsistent
>
SequentiallyConsistentAtomicUint32
;
template
<
typename
T
>
struct
StripAtomicImpl
{
typedef
T
Type
;
}
;
template
<
typename
T
MemoryOrdering
Order
>
struct
StripAtomicImpl
<
Atomic
<
T
Order
>
>
{
typedef
T
Type
;
}
;
template
<
typename
T
>
using
StripAtomic
=
typename
StripAtomicImpl
<
T
>
:
:
Type
;
template
<
typename
T
>
struct
IsAtomic
:
FalseType
{
}
;
template
<
typename
T
MemoryOrdering
Order
>
struct
IsAtomic
<
Atomic
<
T
Order
>
>
:
TrueType
{
}
;
class
StaticPrefs
{
#
define
PREF
(
str
cpp_type
default_value
)
#
define
VARCACHE_PREF
(
str
id
cpp_type
default_value
)
\
private
:
\
static
cpp_type
sVarCache_
#
#
id
;
\
public
:
\
static
StripAtomic
<
cpp_type
>
id
(
)
{
\
MOZ_ASSERT
(
IsAtomic
<
cpp_type
>
:
:
value
|
|
NS_IsMainThread
(
)
\
"
Non
-
atomic
static
pref
'
"
str
\
"
'
being
accessed
on
background
thread
"
)
;
\
return
sVarCache_
#
#
id
;
\
}
#
include
"
mozilla
/
StaticPrefList
.
h
"
#
undef
PREF
#
undef
VARCACHE_PREF
public
:
static
void
InitAll
(
bool
aIsStartup
)
;
}
;
}
#
endif
