VARCACHE_PREF
(
"
accessibility
.
monoaudio
.
enable
"
accessibility_monoaudio_enable
RelaxedAtomicBool
false
)
#
ifdef
FUZZING
VARCACHE_PREF
(
"
fuzzing
.
enabled
"
fuzzing_enabled
bool
false
)
VARCACHE_PREF
(
"
fuzzing
.
necko
.
enabled
"
fuzzing_necko_enabled
RelaxedAtomicBool
false
)
#
endif
#
if
!
defined
(
ANDROID
)
&
&
!
defined
(
XP_MACOSX
)
&
&
defined
(
XP_UNIX
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
clipboard
.
autocopy
"
clipboard_autocopy
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
dom
.
animations
-
api
.
compositing
.
enabled
"
dom_animations_api_compositing_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
dom
.
animations
-
api
.
getAnimations
.
enabled
"
dom_animations_api_getAnimations_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
dom
.
animations
-
api
.
implicit
-
keyframes
.
enabled
"
dom_animations_api_implicit_keyframes_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
dom
.
animations
-
api
.
timelines
.
enabled
"
dom_animations_api_timelines_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
compositionevent
.
text
.
dispatch_only_system_group_in_content
"
dom_compositionevent_text_dispatch_only_system_group_in_content
bool
true
)
#
if
!
defined
(
DEBUG
)
&
&
!
defined
(
MOZ_ASAN
)
&
&
!
defined
(
MOZ_VALGRIND
)
&
&
\
!
defined
(
MOZ_TSAN
)
#
define
PREF_VALUE
5
#
else
#
define
PREF_VALUE
0
#
endif
VARCACHE_PREF
(
"
dom
.
ipc
.
tabs
.
shutdownTimeoutSecs
"
dom_ipc_tabs_shutdownTimeoutSecs
RelaxedAtomicUint32
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
event
.
clipboardevents
.
enabled
"
dom_event_clipboardevents_enabled
bool
true
)
VARCACHE_PREF
(
"
dom
.
keyboardevent
.
keypress
.
set_keycode_and_charcode_to_same_value
"
dom_keyboardevent_keypress_set_keycode_and_charcode_to_same_value
bool
true
)
VARCACHE_PREF
(
"
dom
.
input_events
.
conform_to_level_1
"
dom_input_events_conform_to_level_1
bool
true
)
VARCACHE_PREF
(
"
dom
.
webcomponents
.
shadowdom
.
report_usage
"
dom_webcomponents_shadowdom_report_usage
bool
false
)
VARCACHE_PREF
(
"
dom
.
mutation
-
events
.
cssom
.
disabled
"
dom_mutation_events_cssom_disabled
bool
true
)
VARCACHE_PREF
(
"
dom
.
link
.
disabled_attribute
.
enabled
"
dom_link_disabled_attribute_enabled
bool
true
)
VARCACHE_PREF
(
"
dom
.
performance
.
enable_scheduler_timing
"
dom_performance_enable_scheduler_timing
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
dom
.
timeout
.
defer_during_load
"
dom_timeout_defer_during_load
bool
true
)
VARCACHE_PREF
(
"
dom
.
timeout
.
max_idle_defer_ms
"
dom_timeout_max_idle_defer_ms
uint32_t
10
*
1000
)
VARCACHE_PREF
(
"
dom
.
performance
.
children_results_ipc_timeout
"
dom_performance_children_results_ipc_timeout
uint32_t
1000
)
PREF
(
"
dom
.
serviceWorkers
.
parent_intercept
"
bool
false
)
VARCACHE_PREF
(
"
dom
.
payments
.
request
.
enabled
"
dom_payments_request_enabled
bool
false
)
VARCACHE_PREF
(
"
dom
.
payments
.
request
.
user_interaction_required
"
dom_payments_request_user_interaction_required
bool
true
)
VARCACHE_PREF
(
"
dom
.
payments
.
response
.
timeout
"
dom_payments_response_timeout
uint32_t
5000
)
VARCACHE_PREF
(
"
dom
.
caches
.
enabled
"
dom_caches_enabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
dom
.
caches
.
testing
.
enabled
"
dom_caches_testing_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
performance
.
enable_user_timing_logging
"
dom_performance_enable_user_timing_logging
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
webnotifications
.
enabled
"
dom_webnotifications_enabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
dom
.
webnotifications
.
allowinsecure
"
dom_webnotifications_allowinsecure
RelaxedAtomicBool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
webnotifications
.
requireuserinteraction
"
dom_webnotifications_requireuserinteraction
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
webnotifications
.
serviceworker
.
enabled
"
dom_webnotifications_serviceworker_enabled
RelaxedAtomicBool
true
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
webnotifications
.
requireinteraction
.
enabled
"
dom_webnotifications_requireinteraction_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
serviceWorkers
.
enabled
"
dom_serviceWorkers_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
serviceWorkers
.
testing
.
enabled
"
dom_serviceWorkers_testing_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
testing
.
structuredclonetester
.
enabled
"
dom_testing_structuredclonetester_enabled
RelaxedAtomicBool
false
)
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
storageManager
.
enabled
"
dom_storageManager_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
promise_rejection_events
.
enabled
"
dom_promise_rejection_events_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
push
.
enabled
"
dom_push_enabled
RelaxedAtomicBool
false
)
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
webkitBlink
.
dirPicker
.
enabled
"
dom_webkitBlink_dirPicker_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
#
if
defined
(
MOZ_WIDGET_ANDROID
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
netinfo
.
enabled
"
dom_netinfo_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
fetchObserver
.
enabled
"
dom_fetchObserver_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
enable_performance_observer
"
dom_enable_performance_observer
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
browser
.
measurement
.
render_anims_and_video_solid
"
browser_measurement_render_anims_and_video_solid
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
indexedDB
.
storageOption
.
enabled
"
dom_indexedDB_storageOption_enabled
RelaxedAtomicBool
false
)
#
ifdef
JS_BUILD_BINAST
VARCACHE_PREF
(
"
dom
.
script_loader
.
binast_encoding
.
enabled
"
dom_script_loader_binast_encoding_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
script_loader
.
binast_encoding
.
domain
.
restrict
"
dom_script_loader_binast_encoding_domain_restrict
bool
true
)
#
endif
#
ifdef
MOZILLA_OFFICIAL
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
browser
.
dom
.
window
.
dump
.
enabled
"
browser_dom_window_dump_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
worker
.
canceling
.
timeoutMilliseconds
"
dom_worker_canceling_timeoutMilliseconds
RelaxedAtomicUint32
30000
)
VARCACHE_PREF
(
"
dom
.
worker
.
use_medium_high_event_queue
"
dom_worker_use_medium_high_event_queue
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
dom
.
xhr
.
standard_content_type_normalization
"
dom_xhr_standard_content_type_normalization
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
dom
.
block_external_protocol_in_iframes
"
dom_block_external_protocol_in_iframes
bool
true
)
VARCACHE_PREF
(
"
dom
.
delay
.
block_external_protocol_in_iframes
"
dom_delay_block_external_protocol_in_iframes
uint32_t
10
)
VARCACHE_PREF
(
"
dom
.
block_multiple_popups
"
dom_block_multiple_popups
bool
true
)
VARCACHE_PREF
(
"
dom
.
targetBlankNoOpener
.
enabled
"
dom_targetBlankNoOpener_enabled
bool
true
)
VARCACHE_PREF
(
"
dom
.
disable_open_during_load
"
dom_disable_open_during_load
bool
false
)
VARCACHE_PREF
(
"
dom
.
storage_access
.
enabled
"
dom_storage_access_enabled
bool
false
)
VARCACHE_PREF
(
"
dom
.
prototype_document_cache
.
enabled
"
dom_prototype_document_cache_enabled
bool
true
)
VARCACHE_PREF
(
"
dom
.
storage_access
.
auto_grants
.
delayed
"
dom_storage_access_auto_grants_delayed
bool
true
)
#
ifdef
ANDROID
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
extensions
.
allowPrivateBrowsingByDefault
"
extensions_allowPrivateBrowsingByDefault
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
extensions
.
cookiesBehavior
.
overrideOnTopLevel
"
extensions_cookiesBehavior_overrideOnTopLevel
bool
false
)
VARCACHE_PREF
(
"
full
-
screen
-
api
.
unprefix
.
enabled
"
full_screen_api_unprefix_enabled
bool
true
)
VARCACHE_PREF
(
"
browser
.
display
.
focus_ring_on_anything
"
browser_display_focus_ring_on_anything
bool
false
)
VARCACHE_PREF
(
"
browser
.
display
.
focus_ring_width
"
browser_display_focus_ring_width
uint32_t
1
)
VARCACHE_PREF
(
"
browser
.
display
.
focus_ring_style
"
browser_display_focus_ring_style
uint32_t
1
)
VARCACHE_PREF
(
"
browser
.
display
.
use_system_colors
"
browser_display_use_system_colors
bool
true
)
VARCACHE_PREF
(
"
browser
.
display
.
document_color_use
"
browser_display_document_color_use
uint32_t
0
)
VARCACHE_PREF
(
"
browser
.
display
.
use_focus_colors
"
browser_display_use_focus_colors
bool
false
)
VARCACHE_PREF
(
"
browser
.
underline_anchors
"
browser_underline_anchors
bool
true
)
PREF
(
"
browser
.
display
.
foreground_color
"
String
"
"
)
PREF
(
"
browser
.
display
.
background_color
"
String
"
"
)
PREF
(
"
browser
.
display
.
focus_background_color
"
String
"
"
)
PREF
(
"
browser
.
display
.
focus_text_color
"
String
"
"
)
PREF
(
"
browser
.
anchor_color
"
String
"
"
)
PREF
(
"
browser
.
active_color
"
String
"
"
)
PREF
(
"
browser
.
visited_color
"
String
"
"
)
VARCACHE_PREF
(
"
browser
.
display
.
use_document_fonts
"
browser_display_use_document_fonts
RelaxedAtomicInt32
1
)
VARCACHE_PREF
(
"
gfx
.
font_rendering
.
opentype_svg
.
enabled
"
gfx_font_rendering_opentype_svg_enabled
bool
true
)
VARCACHE_PREF
(
"
gfx
.
offscreencanvas
.
enabled
"
gfx_offscreencanvas_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
gfx
.
font_ahem_antialias_none
"
gfx_font_ahem_antialias_none
RelaxedAtomicBool
false
)
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
gfx
.
omta
.
background
-
color
"
gfx_omta_background_color
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
html5
.
offmainthread
"
html5_offmainthread
bool
true
)
VARCACHE_PREF
(
"
html5
.
flushtimer
.
initialdelay
"
html5_flushtimer_initialdelay
RelaxedAtomicInt32
16
)
VARCACHE_PREF
(
"
html5
.
flushtimer
.
subsequentdelay
"
html5_flushtimer_subsequentdelay
RelaxedAtomicInt32
16
)
VARCACHE_PREF
(
"
layout
.
cursor
.
block
.
enabled
"
layout_cursor_block_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
cursor
.
block
.
max
-
size
"
layout_cursor_block_max_size
uint32_t
32
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
enabled
"
layout_accessiblecaret_enabled
bool
false
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
enabled_on_touch
"
layout_accessiblecaret_enabled_on_touch
bool
true
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
always_tilt
"
layout_accessiblecaret_always_tilt
bool
false
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
caret_shown_when_long_tapping_on_empty_content
"
layout_accessiblecaret_caret_shown_when_long_tapping_on_empty_content
bool
false
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
script_change_update_mode
"
layout_accessiblecaret_script_change_update_mode
int32_t
0
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
allow_dragging_across_other_caret
"
layout_accessiblecaret_allow_dragging_across_other_caret
bool
true
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
hapticfeedback
"
layout_accessiblecaret_hapticfeedback
bool
false
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
extend_selection_for_phone_number
"
layout_accessiblecaret_extend_selection_for_phone_number
bool
false
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
hide_carets_for_mouse_input
"
layout_accessiblecaret_hide_carets_for_mouse_input
bool
true
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
width
"
layout_accessiblecaret_width
float
34
.
0f
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
height
"
layout_accessiblecaret_height
float
36
.
0f
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
margin
-
left
"
layout_accessiblecaret_margin_left
float
-
18
.
5f
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
use_long_tap_injector
"
layout_accessiblecaret_use_long_tap_injector
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
parsing
.
parallel
"
layout_css_parsing_parallel
bool
true
)
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
use
-
counters
.
enabled
"
layout_css_use_counters_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
layout
.
css
.
report_errors
"
layout_css_report_errors
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
font
-
display
.
enabled
"
layout_css_font_display_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
prefixes
.
webkit
"
layout_css_prefixes_webkit
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
prefixes
.
device
-
pixel
-
ratio
-
webkit
"
layout_css_prefixes_device_pixel_ratio_webkit
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
prefixes
.
gradients
"
layout_css_prefixes_gradients
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
offset
-
logical
-
properties
.
enabled
"
layout_css_offset_logical_properties_enabled
bool
false
)
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
control
-
characters
.
visible
"
layout_css_control_characters_visible
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
layout
.
css
.
visited_links_enabled
"
layout_css_visited_links_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
webkit
-
appearance
.
enabled
"
layout_css_webkit_appearance_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
moz
-
document
.
content
.
enabled
"
layout_css_moz_document_content_enabled
bool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
supports
-
selector
.
enabled
"
layout_css_supports_selector_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
EARLY_BETA_OR_EARLIER
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
moz
-
document
.
url
-
prefix
-
hack
.
enabled
"
layout_css_moz_document_url_prefix_hack_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
layout
.
css
.
xul
-
display
-
values
.
content
.
enabled
"
layout_css_xul_display_values_content_enabled
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
xul
-
box
-
display
-
values
.
content
.
enabled
"
layout_css_xul_box_display_values_content_enabled
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
xul
-
tree
-
pseudos
.
content
.
enabled
"
layout_css_xul_tree_pseudos_content_enabled
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
grid
-
template
-
subgrid
-
value
.
enabled
"
layout_css_grid_template_subgrid_value_enabled
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
line
-
height
-
moz
-
block
-
height
.
content
.
enabled
"
layout_css_line_height_moz_block_height_content_enabled
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
font
-
variations
.
enabled
"
layout_css_font_variations_enabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
emulate
-
moz
-
box
-
with
-
flex
"
layout_css_emulate_moz_box_with_flex
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
unknown
-
webkit
-
pseudo
-
element
"
layout_css_unknown_webkit_pseudo_element
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
clip
-
path
-
path
.
enabled
"
layout_css_clip_path_path_enabled
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
column
-
span
.
enabled
"
layout_css_column_span_enabled
bool
false
)
#
ifdef
EARLY_BETA_OR_EARLIER
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
contain
.
enabled
"
layout_css_contain_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
layout
.
css
.
step
-
position
-
jump
.
enabled
"
layout_css_step_position_jump_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
dynamic
-
reflow
-
roots
.
enabled
"
layout_dynamic_reflow_roots_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
lower_priority_refresh_driver_during_load
"
layout_lower_priority_refresh_driver_during_load
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
anchoring
.
enabled
"
layout_css_scroll_anchoring_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
anchoring
.
highlight
"
layout_css_scroll_anchoring_highlight
bool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
snap
-
v1
.
enabled
"
layout_css_scroll_snap_v1_enabled
RelaxedAtomicBool
PREF_VALUE
)
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
snap
.
enabled
"
layout_css_scroll_snap_enabled
bool
!
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
layout
.
css
.
shared
-
memory
-
ua
-
sheets
.
enabled
"
layout_css_shared_memory_ua_sheets_enabled
bool
false
)
#
ifdef
ANDROID
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
javascript
.
options
.
gc_on_memory_pressure
"
javascript_options_gc_on_memory_pressure
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
javascript
.
options
.
compact_on_user_inactive
"
javascript_options_compact_on_user_inactive
bool
true
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
15000
/
/
ms
#
else
#
define
PREF_VALUE
300000
/
/
ms
#
endif
VARCACHE_PREF
(
"
javascript
.
options
.
compact_on_user_inactive_delay
"
javascript_options_compact_on_user_inactive_delay
uint32_t
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
javascript
.
options
.
mem
.
log
"
javascript_options_mem_log
bool
false
)
VARCACHE_PREF
(
"
javascript
.
options
.
mem
.
notify
"
javascript_options_mem_notify
bool
false
)
VARCACHE_PREF
(
"
javascript
.
options
.
streams
"
javascript_options_streams
RelaxedAtomicBool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
javascript
.
options
.
bigint
"
javascript_options_bigint
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
javascript
.
options
.
experimental
.
fields
"
javascript_options_experimental_fields
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
javascript
.
options
.
experimental
.
await_fix
"
javascript_options_experimental_await_fix
RelaxedAtomicBool
false
)
#
ifdef
ANDROID
#
define
PREF_VALUE
32768
/
/
Measured
in
KiB
#
else
#
define
PREF_VALUE
512000
/
/
Measured
in
KiB
#
endif
VARCACHE_PREF
(
"
media
.
cache_size
"
MediaCacheSize
RelaxedAtomicUint32
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
memory_cache_max_size
"
MediaMemoryCacheMaxSize
uint32_t
8192
)
VARCACHE_PREF
(
"
media
.
memory_caches_combined_limit_kb
"
MediaMemoryCachesCombinedLimitKb
uint32_t
524288
)
VARCACHE_PREF
(
"
media
.
memory_caches_combined_limit_pc_sysmem
"
MediaMemoryCachesCombinedLimitPcSysmem
uint32_t
5
)
#
ifdef
ANDROID
#
define
PREF_VALUE
10
/
/
Use
a
smaller
limit
to
save
battery
.
#
else
#
define
PREF_VALUE
30
#
endif
VARCACHE_PREF
(
"
media
.
cache_resume_threshold
"
MediaCacheResumeThreshold
RelaxedAtomicInt32
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
ANDROID
#
define
PREF_VALUE
30
/
/
Use
a
smaller
limit
to
save
battery
.
#
else
#
define
PREF_VALUE
60
#
endif
VARCACHE_PREF
(
"
media
.
cache_readahead_limit
"
MediaCacheReadaheadLimit
RelaxedAtomicInt32
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
resampling
.
enabled
"
MediaResamplingEnabled
RelaxedAtomicBool
false
)
#
if
defined
(
XP_WIN
)
|
|
defined
(
XP_DARWIN
)
|
|
defined
(
MOZ_PULSEAUDIO
)
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
media
.
forcestereo
.
enabled
"
MediaForcestereoEnabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
ruin
-
av
-
sync
.
enabled
"
MediaRuinAvSyncEnabled
RelaxedAtomicBool
false
)
#
if
defined
(
ANDROID
)
#
if
defined
(
NIGHTLY_BUILD
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
#
elif
defined
(
XP_LINUX
)
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
media
.
eme
.
enabled
"
MediaEmeEnabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
clearkey
.
persistent
-
license
.
enabled
"
MediaClearkeyPersistentLicenseEnabled
bool
false
)
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
VARCACHE_PREF
(
"
media
.
gmp
.
insecure
.
allow
"
MediaGmpInsecureAllow
RelaxedAtomicBool
false
)
#
endif
VARCACHE_PREF
(
"
media
.
use
-
blank
-
decoder
"
MediaUseBlankDecoder
RelaxedAtomicBool
false
)
#
if
defined
(
XP_WIN
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
gpu
-
process
-
decoder
"
MediaGpuProcessDecoder
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
#
if
defined
(
XP_WIN
)
&
&
!
defined
(
_ARM64_
)
#
define
PREF_VALUE
true
#
elif
defined
(
XP_MACOSX
)
#
define
PREF_VALUE
true
#
elif
defined
(
XP_UNIX
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
rdd
-
process
.
enabled
"
MediaRddProcessEnabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
rdd
-
process
.
startup_timeout_ms
"
MediaRddProcessStartupTimeoutMs
RelaxedAtomicInt32
5000
)
VARCACHE_PREF
(
"
media
.
rdd
-
vorbis
.
enabled
"
MediaRddVorbisEnabled
RelaxedAtomicBool
false
)
#
ifdef
ANDROID
VARCACHE_PREF
(
"
media
.
android
-
media
-
codec
.
enabled
"
MediaAndroidMediaCodecEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
android
-
media
-
codec
.
preferred
"
MediaAndroidMediaCodecPreferred
RelaxedAtomicBool
true
)
#
endif
#
ifdef
MOZ_WEBRTC
#
ifdef
ANDROID
VARCACHE_PREF
(
"
media
.
navigator
.
hardware
.
vp8_encode
.
acceleration_remote_enabled
"
MediaNavigatorHardwareVp8encodeAccelerationRemoteEnabled
bool
true
)
PREF
(
"
media
.
navigator
.
hardware
.
vp8_encode
.
acceleration_enabled
"
bool
true
)
PREF
(
"
media
.
navigator
.
hardware
.
vp8_decode
.
acceleration_enabled
"
bool
false
)
#
endif
#
if
defined
(
NIGHTLY_BUILD
)
&
&
!
defined
(
ANDROID
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
navigator
.
mediadatadecoder_vpx_enabled
"
MediaNavigatorMediadatadecoderVPXEnabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
#
if
defined
(
ANDROID
)
#
define
PREF_VALUE
false
/
/
Bug
1509316
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
media
.
navigator
.
mediadatadecoder_h264_enabled
"
MediaNavigatorMediadatadecoderH264Enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
#
endif
#
ifdef
MOZ_OMX
VARCACHE_PREF
(
"
media
.
omx
.
enabled
"
MediaOmxEnabled
bool
false
)
#
endif
#
ifdef
MOZ_FFMPEG
#
if
defined
(
XP_MACOSX
)
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
media
.
ffmpeg
.
enabled
"
MediaFfmpegEnabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
libavcodec
.
allow
-
obsolete
"
MediaLibavcodecAllowObsolete
bool
false
)
#
endif
#
ifdef
MOZ_FFVPX
VARCACHE_PREF
(
"
media
.
ffvpx
.
enabled
"
MediaFfvpxEnabled
RelaxedAtomicBool
true
)
#
endif
#
if
defined
(
MOZ_FFMPEG
)
|
|
defined
(
MOZ_FFVPX
)
VARCACHE_PREF
(
"
media
.
ffmpeg
.
low
-
latency
.
enabled
"
MediaFfmpegLowLatencyEnabled
RelaxedAtomicBool
false
)
#
endif
#
ifdef
MOZ_WMF
VARCACHE_PREF
(
"
media
.
wmf
.
enabled
"
MediaWmfEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
decoder
-
doctor
.
wmf
-
disabled
-
is
-
failure
"
MediaDecoderDoctorWmfDisabledIsFailure
bool
false
)
VARCACHE_PREF
(
"
media
.
wmf
.
vp9
.
enabled
"
MediaWmfVp9Enabled
RelaxedAtomicBool
true
)
#
endif
#
ifdef
ANDROID
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
decoder
.
recycle
.
enabled
"
MediaDecoderRecycleEnabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
decoder
.
skip
-
to
-
next
-
key
-
frame
.
enabled
"
MediaDecoderSkipToNextKeyFrameEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
gmp
.
decoder
.
enabled
"
MediaGmpDecoderEnabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
media
.
eme
.
audio
.
blank
"
MediaEmeAudioBlank
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
media
.
eme
.
video
.
blank
"
MediaEmeVideoBlank
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
media
.
eme
.
chromium
-
api
.
video
-
shmems
"
MediaEmeChromiumApiVideoShmems
RelaxedAtomicUint32
6
)
VARCACHE_PREF
(
"
media
.
suspend
-
bkgnd
-
video
.
enabled
"
MediaSuspendBkgndVideoEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
suspend
-
bkgnd
-
video
.
delay
-
ms
"
MediaSuspendBkgndVideoDelayMs
RelaxedAtomicUint32
10000
)
VARCACHE_PREF
(
"
media
.
dormant
-
on
-
pause
-
timeout
-
ms
"
MediaDormantOnPauseTimeoutMs
RelaxedAtomicInt32
5000
)
VARCACHE_PREF
(
"
media
.
webspeech
.
synth
.
force_global_queue
"
MediaWebspeechSynthForceGlobalQueue
bool
false
)
VARCACHE_PREF
(
"
media
.
webspeech
.
test
.
enable
"
MediaWebspeechTestEnable
bool
false
)
VARCACHE_PREF
(
"
media
.
webspeech
.
test
.
fake_fsm_events
"
MediaWebspeechTextFakeFsmEvents
bool
false
)
VARCACHE_PREF
(
"
media
.
webspeech
.
test
.
fake_recognition_service
"
MediaWebspeechTextFakeRecognitionService
bool
false
)
#
ifdef
MOZ_WEBSPEECH
VARCACHE_PREF
(
"
media
.
webspeech
.
recognition
.
enable
"
MediaWebspeechRecognitionEnable
bool
false
)
#
endif
VARCACHE_PREF
(
"
media
.
webspeech
.
recognition
.
force_enable
"
MediaWebspeechRecognitionForceEnable
bool
false
)
#
if
defined
(
MOZ_WEBM_ENCODER
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
encoder
.
webm
.
enabled
"
MediaEncoderWebMEnabled
RelaxedAtomicBool
true
)
#
undef
PREF_VALUE
#
if
defined
(
RELEASE_OR_BETA
)
#
define
PREF_VALUE
3
#
else
#
define
PREF_VALUE
0
#
endif
VARCACHE_PREF
(
"
media
.
audio
-
max
-
decode
-
error
"
MediaAudioMaxDecodeError
uint32_t
PREF_VALUE
)
#
undef
PREF_VALUE
#
if
defined
(
RELEASE_OR_BETA
)
#
define
PREF_VALUE
2
#
else
#
define
PREF_VALUE
0
#
endif
VARCACHE_PREF
(
"
media
.
video
-
max
-
decode
-
error
"
MediaVideoMaxDecodeError
uint32_t
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
opus
.
enabled
"
MediaOpusEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
wave
.
enabled
"
MediaWaveEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
ogg
.
enabled
"
MediaOggEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
webm
.
enabled
"
MediaWebMEnabled
RelaxedAtomicBool
true
)
#
if
defined
(
XP_WIN
)
&
&
!
defined
(
_ARM64_
)
#
define
PREF_VALUE
true
#
elif
defined
(
XP_MACOSX
)
#
define
PREF_VALUE
true
#
elif
defined
(
XP_UNIX
)
&
&
!
defined
(
Android
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
av1
.
enabled
"
MediaAv1Enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
av1
.
use
-
dav1d
"
MediaAv1UseDav1d
#
if
defined
(
XP_WIN
)
&
&
!
defined
(
_ARM64_
)
RelaxedAtomicBool
true
#
elif
defined
(
XP_MACOSX
)
RelaxedAtomicBool
true
#
elif
defined
(
XP_UNIX
)
&
&
!
defined
(
Android
)
RelaxedAtomicBool
true
#
else
RelaxedAtomicBool
false
#
endif
)
VARCACHE_PREF
(
"
media
.
flac
.
enabled
"
MediaFlacEnabled
bool
true
)
#
ifdef
ANDROID
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
hls
.
enabled
"
MediaHlsEnabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
ANDROID
VARCACHE_PREF
(
"
media
.
hls
.
max
-
allocations
"
MediaHlsMaxAllocations
uint32_t
20
)
#
endif
#
ifdef
MOZ_FMP4
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
mp4
.
enabled
"
MediaMp4Enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
playback
.
warnings
-
as
-
errors
"
MediaPlaybackWarningsAsErrors
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
media
.
resume
-
bkgnd
-
video
-
on
-
tabhover
"
MediaResumeBkgndVideoOnTabhover
bool
true
)
#
ifdef
ANDROID
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
videocontrols
.
lock
-
video
-
orientation
"
MediaVideocontrolsLockVideoOrientation
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
seamless
-
looping
"
MediaSeamlessLooping
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
autoplay
.
block
-
event
.
enabled
"
MediaBlockEventEnabled
bool
false
)
VARCACHE_PREF
(
"
media
.
media
-
capabilities
.
enabled
"
MediaCapabilitiesEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
media
-
capabilities
.
screen
.
enabled
"
MediaCapabilitiesScreenEnabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
media
.
benchmark
.
vp9
.
fps
"
MediaBenchmarkVp9Fps
RelaxedAtomicUint32
0
)
VARCACHE_PREF
(
"
media
.
benchmark
.
vp9
.
threshold
"
MediaBenchmarkVp9Threshold
RelaxedAtomicUint32
150
)
VARCACHE_PREF
(
"
media
.
benchmark
.
vp9
.
versioncheck
"
MediaBenchmarkVp9Versioncheck
RelaxedAtomicUint32
0
)
VARCACHE_PREF
(
"
media
.
benchmark
.
frames
"
MediaBenchmarkFrames
RelaxedAtomicUint32
300
)
VARCACHE_PREF
(
"
media
.
benchmark
.
timeout
"
MediaBenchmarkTimeout
RelaxedAtomicUint32
1000
)
VARCACHE_PREF
(
"
media
.
test
.
video
-
suspend
"
MediaTestVideoSuspend
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
media
.
autoplay
.
allow
-
muted
"
MediaAutoplayAllowMuted
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
autoplay
.
blackList
-
override
-
default
"
MediaAutoplayBlackListOverrideDefault
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
network
.
auth
.
subresource
-
http
-
auth
-
allow
"
network_auth_subresource_http_auth_allow
uint32_t
2
)
VARCACHE_PREF
(
"
network
.
auth
.
subresource
-
img
-
cross
-
origin
-
http
-
auth
-
allow
"
network_auth_subresource_img_cross_origin_http_auth_allow
bool
false
)
VARCACHE_PREF
(
"
network
.
auth
.
non
-
web
-
content
-
triggered
-
resources
-
http
-
auth
-
allow
"
network_auth_non_web_content_triggered_resources_http_auth_allow
bool
false
)
VARCACHE_PREF
(
"
network
.
cookie
.
cookieBehavior
"
network_cookie_cookieBehavior
RelaxedAtomicInt32
0
)
VARCACHE_PREF
(
"
network
.
predictor
.
enabled
"
network_predictor_enabled
bool
true
)
VARCACHE_PREF
(
"
network
.
cookieSettings
.
unblocked_for_testing
"
network_cookieSettings_unblocked_for_testing
bool
false
)
VARCACHE_PREF
(
"
network
.
predictor
.
enable
-
hover
-
on
-
ssl
"
network_predictor_enable_hover_on_ssl
bool
false
)
VARCACHE_PREF
(
"
network
.
predictor
.
enable
-
prefetch
"
network_predictor_enable_prefetch
bool
false
)
VARCACHE_PREF
(
"
network
.
predictor
.
page
-
degradation
.
day
"
network_predictor_page_degradation_day
int32_t
0
)
VARCACHE_PREF
(
"
network
.
predictor
.
page
-
degradation
.
week
"
network_predictor_page_degradation_week
int32_t
5
)
VARCACHE_PREF
(
"
network
.
predictor
.
page
-
degradation
.
month
"
network_predictor_page_degradation_month
int32_t
10
)
VARCACHE_PREF
(
"
network
.
predictor
.
page
-
degradation
.
year
"
network_predictor_page_degradation_year
int32_t
25
)
VARCACHE_PREF
(
"
network
.
predictor
.
page
-
degradation
.
max
"
network_predictor_page_degradation_max
int32_t
50
)
VARCACHE_PREF
(
"
network
.
predictor
.
subresource
-
degradation
.
day
"
network_predictor_subresource_degradation_day
int32_t
1
)
VARCACHE_PREF
(
"
network
.
predictor
.
subresource
-
degradation
.
week
"
network_predictor_subresource_degradation_week
int32_t
10
)
VARCACHE_PREF
(
"
network
.
predictor
.
subresource
-
degradation
.
month
"
network_predictor_subresource_degradation_month
int32_t
25
)
VARCACHE_PREF
(
"
network
.
predictor
.
subresource
-
degradation
.
year
"
network_predictor_subresource_degradation_year
int32_t
50
)
VARCACHE_PREF
(
"
network
.
predictor
.
subresource
-
degradation
.
max
"
network_predictor_subresource_degradation_max
int32_t
100
)
VARCACHE_PREF
(
"
network
.
predictor
.
prefetch
-
rolling
-
load
-
count
"
network_predictor_prefetch_rolling_load_count
int32_t
10
)
VARCACHE_PREF
(
"
network
.
predictor
.
prefetch
-
min
-
confidence
"
network_predictor_prefetch_min_confidence
int32_t
100
)
VARCACHE_PREF
(
"
network
.
predictor
.
preconnect
-
min
-
confidence
"
network_predictor_preconnect_min_confidence
int32_t
90
)
VARCACHE_PREF
(
"
network
.
predictor
.
preresolve
-
min
-
confidence
"
network_predictor_preresolve_min_confidence
int32_t
60
)
VARCACHE_PREF
(
"
network
.
predictor
.
prefetch
-
force
-
valid
-
for
"
network_predictor_prefetch_force_valid_for
int32_t
10
)
VARCACHE_PREF
(
"
network
.
predictor
.
max
-
resources
-
per
-
entry
"
network_predictor_max_resources_per_entry
int32_t
100
)
VARCACHE_PREF
(
"
network
.
predictor
.
max
-
uri
-
length
"
network_predictor_max_uri_length
uint32_t
500
)
PREF
(
"
network
.
predictor
.
cleaned
-
up
"
bool
false
)
VARCACHE_PREF
(
"
network
.
predictor
.
doing
-
tests
"
network_predictor_doing_tests
bool
false
)
VARCACHE_PREF
(
"
network
.
traffic_analyzer
.
enabled
"
network_traffic_analyzer_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
network
.
delay
.
tracking
.
load
"
network_delay_tracking_load
uint32_t
0
)
VARCACHE_PREF
(
"
network
.
dns
.
resolver_shutdown_timeout_ms
"
network_dns_resolver_shutdown_timeout_ms
uint32_t
2000
)
VARCACHE_PREF
(
"
browser
.
sessionstore
.
dom_storage_limit
"
browser_sessionstore_dom_storage_limit
uint32_t
2048
)
PREF
(
"
preferences
.
allow
.
omt
-
write
"
bool
true
)
VARCACHE_PREF
(
"
browser
.
contentblocking
.
allowlist
.
storage
.
enabled
"
browser_contentblocking_allowlist_storage_enabled
bool
false
)
VARCACHE_PREF
(
"
browser
.
contentblocking
.
allowlist
.
annotations
.
enabled
"
browser_contentblocking_allowlist_annotations_enabled
bool
true
)
VARCACHE_PREF
(
"
browser
.
contentblocking
.
originlog
.
length
"
browser_contentblocking_originlog_length
uint32_t
32
)
#
ifdef
EARLY_BETA_OR_EARLIER
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
privacy
.
annotate_channels
.
strict_list
.
enabled
"
privacy_annotate_channels_strict_list_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
annotate_channels
"
privacy_trackingprotection_annotate_channels
bool
true
)
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
fingerprinting
.
enabled
"
privacy_trackingprotection_fingerprinting_enabled
bool
false
)
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
fingerprinting
.
annotate
.
enabled
"
privacy_trackingprotection_fingerprinting_annotate_enabled
bool
false
)
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
cryptomining
.
enabled
"
privacy_trackingprotection_cryptomining_enabled
bool
false
)
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
cryptomining
.
annotate
.
enabled
"
privacy_trackingprotection_cryptomining_annotate_enabled
bool
false
)
VARCACHE_PREF
(
"
privacy
.
spoof_english
"
privacy_spoof_english
RelaxedAtomicUint32
0
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
lower_network_priority
"
privacy_trackingprotection_lower_network_priority
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
privacy
.
restrict3rdpartystorage
.
expiration
"
privacy_restrict3rdpartystorage_expiration
uint32_t
2592000
)
VARCACHE_PREF
(
"
privacy
.
userInteraction
.
expiration
"
privacy_userInteraction_expiration
uint32_t
2592000
)
VARCACHE_PREF
(
"
privacy
.
userInteraction
.
document
.
interval
"
privacy_userInteraction_document_interval
uint32_t
1800
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
604800
/
/
7
days
#
else
#
define
PREF_VALUE
0
#
endif
VARCACHE_PREF
(
"
privacy
.
documentCookies
.
maxage
"
privacy_documentCookies_maxage
uint32_t
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
privacy
.
resistFingerprinting
"
privacy_resistFingerprinting
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
privacy
.
resistFingerprinting
.
autoDeclineNoUserInputCanvasPrompts
"
privacy_resistFingerprinting_autoDeclineNoUserInputCanvasPrompts
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
privacy
.
storagePrincipal
.
enabledForTrackers
"
privacy_storagePrincipal_enabledForTrackers
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
browser
.
safebrowsing
.
passwords
.
enabled
"
browser_safebrowsing_passwords_enabled
bool
false
)
VARCACHE_PREF
(
"
browser
.
safebrowsing
.
malware
.
enabled
"
browser_safebrowsing_malware_enabled
bool
true
)
VARCACHE_PREF
(
"
browser
.
safebrowsing
.
phishing
.
enabled
"
browser_safebrowsing_phishing_enabled
bool
true
)
VARCACHE_PREF
(
"
browser
.
safebrowsing
.
blockedURIs
.
enabled
"
browser_safebrowsing_blockedURIs_enabled
bool
true
)
VARCACHE_PREF
(
"
browser
.
tabs
.
remote
.
useCrossOriginPolicy
"
browser_tabs_remote_useCrossOriginPolicy
bool
false
)
VARCACHE_PREF
(
"
ui
.
use_standins_for_native_colors
"
ui_use_standins_for_native_colors
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
channelclassifier
.
allowlist_example
"
channelclassifier_allowlist_example
bool
false
)
VARCACHE_PREF
(
"
security
.
csp
.
enable
"
security_csp_enable
bool
true
)
VARCACHE_PREF
(
"
security
.
csp
.
enableStrictDynamic
"
security_csp_enableStrictDynamic
bool
true
)
VARCACHE_PREF
(
"
security
.
csp
.
reporting
.
script
-
sample
.
max
-
length
"
security_csp_reporting_script_sample_max_length
int32_t
40
)
VARCACHE_PREF
(
"
view_source
.
editor
.
external
"
view_source_editor_external
bool
false
)
VARCACHE_PREF
(
"
devtools
.
enabled
"
devtools_enabled
RelaxedAtomicBool
false
)
#
ifdef
MOZILLA_OFFICIAL
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
devtools
.
console
.
stdout
.
chrome
"
devtools_console_stdout_chrome
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
devtools
.
console
.
stdout
.
content
"
devtools_console_stdout_content
RelaxedAtomicBool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
security
.
featurePolicy
.
enabled
"
dom_security_featurePolicy_enabled
bool
PREF_VALUE
)
VARCACHE_PREF
(
"
dom
.
security
.
featurePolicy
.
header
.
enabled
"
dom_security_featurePolicy_header_enabled
bool
PREF_VALUE
)
VARCACHE_PREF
(
"
dom
.
security
.
featurePolicy
.
webidl
.
enabled
"
dom_security_featurePolicy_webidl_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
plugins
.
flashBlock
.
enabled
"
plugins_flashBlock_enabled
bool
false
)
VARCACHE_PREF
(
"
plugins
.
http_https_only
"
plugins_http_https_only
bool
true
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
reporting
.
enabled
"
dom_reporting_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
reporting
.
testing
.
enabled
"
dom_reporting_testing_enabled
RelaxedAtomicBool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
reporting
.
featurePolicy
.
enabled
"
dom_reporting_featurePolicy_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
reporting
.
header
.
enabled
"
dom_reporting_header_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
reporting
.
cleanup
.
timeout
"
dom_reporting_cleanup_timeout
uint32_t
3600
)
VARCACHE_PREF
(
"
dom
.
reporting
.
delivering
.
timeout
"
dom_reporting_delivering_timeout
uint32_t
5
)
VARCACHE_PREF
(
"
dom
.
reporting
.
delivering
.
maxFailures
"
dom_reporting_delivering_maxFailures
uint32_t
3
)
VARCACHE_PREF
(
"
dom
.
reporting
.
delivering
.
maxReports
"
dom_reporting_delivering_maxReports
uint32_t
100
)
#
ifdef
ANDROID
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
w3c_touch_events
.
legacy_apis
.
enabled
"
dom_w3c_touch_events_legacy_apis_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
medium_high_event_queue
.
enabled
"
medium_high_event_queue_enabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
security
.
fileuri
.
strict_origin_policy
"
security_fileuri_strict_origin_policy
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
origin_telemetry
.
enabled
"
privacy_trackingprotection_origin_telemetry_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
telemetry
.
origin_telemetry_test_mode
.
enabled
"
telemetry_origin_telemetry_test_mode_enabled
RelaxedAtomicBool
false
)
