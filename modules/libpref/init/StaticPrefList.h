VARCACHE_PREF
(
"
accessibility
.
monoaudio
.
enable
"
accessibility_monoaudio_enable
RelaxedAtomicBool
false
)
#
ifdef
FUZZING
VARCACHE_PREF
(
"
fuzzing
.
enabled
"
fuzzing_enabled
bool
false
)
VARCACHE_PREF
(
"
fuzzing
.
necko
.
enabled
"
fuzzing_necko_enabled
RelaxedAtomicBool
false
)
#
endif
#
if
!
defined
(
ANDROID
)
&
&
!
defined
(
XP_MACOSX
)
&
&
defined
(
XP_UNIX
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
clipboard
.
autocopy
"
clipboard_autocopy
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
dom
.
animations
-
api
.
autoremove
.
enabled
"
dom_animations_api_autoremove_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
dom
.
animations
-
api
.
compositing
.
enabled
"
dom_animations_api_compositing_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
animations
-
api
.
core
.
enabled
"
dom_animations_api_core_enabled
bool
true
)
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
dom
.
animations
-
api
.
getAnimations
.
enabled
"
dom_animations_api_getAnimations_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
dom
.
animations
-
api
.
implicit
-
keyframes
.
enabled
"
dom_animations_api_implicit_keyframes_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
dom
.
animations
-
api
.
timelines
.
enabled
"
dom_animations_api_timelines_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
compositionevent
.
text
.
dispatch_only_system_group_in_content
"
dom_compositionevent_text_dispatch_only_system_group_in_content
bool
true
)
#
if
!
defined
(
DEBUG
)
&
&
!
defined
(
MOZ_ASAN
)
&
&
!
defined
(
MOZ_VALGRIND
)
&
&
\
!
defined
(
MOZ_TSAN
)
#
define
PREF_VALUE
5
#
else
#
define
PREF_VALUE
0
#
endif
VARCACHE_PREF
(
"
dom
.
ipc
.
tabs
.
shutdownTimeoutSecs
"
dom_ipc_tabs_shutdownTimeoutSecs
RelaxedAtomicUint32
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
event
.
clipboardevents
.
enabled
"
dom_event_clipboardevents_enabled
bool
true
)
VARCACHE_PREF
(
"
dom
.
keyboardevent
.
keypress
.
set_keycode_and_charcode_to_same_value
"
dom_keyboardevent_keypress_set_keycode_and_charcode_to_same_value
bool
true
)
VARCACHE_PREF
(
"
dom
.
input_events
.
conform_to_level_1
"
dom_input_events_conform_to_level_1
bool
true
)
VARCACHE_PREF
(
"
dom
.
input
.
skip_cursor_move_for_same_value_set
"
dom_input_skip_cursor_move_for_same_value_set
bool
true
)
VARCACHE_PREF
(
"
dom
.
webcomponents
.
shadowdom
.
report_usage
"
dom_webcomponents_shadowdom_report_usage
bool
false
)
VARCACHE_PREF
(
"
dom
.
mutation
-
events
.
cssom
.
disabled
"
dom_mutation_events_cssom_disabled
bool
true
)
VARCACHE_PREF
(
"
dom
.
link
.
disabled_attribute
.
enabled
"
dom_link_disabled_attribute_enabled
bool
true
)
VARCACHE_PREF
(
"
dom
.
timeout
.
defer_during_load
"
dom_timeout_defer_during_load
bool
true
)
VARCACHE_PREF
(
"
dom
.
timeout
.
max_idle_defer_ms
"
dom_timeout_max_idle_defer_ms
uint32_t
10
*
1000
)
VARCACHE_PREF
(
"
dom
.
performance
.
children_results_ipc_timeout
"
dom_performance_children_results_ipc_timeout
uint32_t
1000
)
PREF
(
"
dom
.
serviceWorkers
.
parent_intercept
"
bool
false
)
VARCACHE_PREF
(
"
dom
.
payments
.
request
.
enabled
"
dom_payments_request_enabled
bool
false
)
VARCACHE_PREF
(
"
dom
.
payments
.
request
.
user_interaction_required
"
dom_payments_request_user_interaction_required
bool
true
)
VARCACHE_PREF
(
"
dom
.
payments
.
response
.
timeout
"
dom_payments_response_timeout
uint32_t
5000
)
VARCACHE_PREF
(
"
dom
.
caches
.
enabled
"
dom_caches_enabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
dom
.
caches
.
testing
.
enabled
"
dom_caches_testing_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
performance
.
enable_user_timing_logging
"
dom_performance_enable_user_timing_logging
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
webnotifications
.
enabled
"
dom_webnotifications_enabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
dom
.
webnotifications
.
allowinsecure
"
dom_webnotifications_allowinsecure
RelaxedAtomicBool
false
)
#
ifdef
EARLY_BETA_OR_EARLIER
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
webnotifications
.
requireuserinteraction
"
dom_webnotifications_requireuserinteraction
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
webnotifications
.
serviceworker
.
enabled
"
dom_webnotifications_serviceworker_enabled
RelaxedAtomicBool
true
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
webnotifications
.
requireinteraction
.
enabled
"
dom_webnotifications_requireinteraction_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
serviceWorkers
.
enabled
"
dom_serviceWorkers_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
serviceWorkers
.
testing
.
enabled
"
dom_serviceWorkers_testing_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
testing
.
structuredclonetester
.
enabled
"
dom_testing_structuredclonetester_enabled
RelaxedAtomicBool
false
)
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
storageManager
.
enabled
"
dom_storageManager_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
promise_rejection_events
.
enabled
"
dom_promise_rejection_events_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
push
.
enabled
"
dom_push_enabled
RelaxedAtomicBool
false
)
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
webkitBlink
.
dirPicker
.
enabled
"
dom_webkitBlink_dirPicker_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
#
if
defined
(
MOZ_WIDGET_ANDROID
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
netinfo
.
enabled
"
dom_netinfo_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
fetchObserver
.
enabled
"
dom_fetchObserver_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
enable_performance
"
dom_enable_performance
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
dom
.
enable_performance_observer
"
dom_enable_performance_observer
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
dom
.
enable_resource_timing
"
dom_enable_resource_timing
bool
true
)
VARCACHE_PREF
(
"
dom
.
enable_performance_navigation_timing
"
dom_enable_performance_navigation_timing
bool
true
)
VARCACHE_PREF
(
"
dom
.
performance
.
enable_notify_performance_timing
"
dom_performance_enable_notify_performance_timing
bool
false
)
VARCACHE_PREF
(
"
browser
.
measurement
.
render_anims_and_video_solid
"
browser_measurement_render_anims_and_video_solid
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
indexedDB
.
storageOption
.
enabled
"
dom_indexedDB_storageOption_enabled
RelaxedAtomicBool
false
)
#
ifdef
JS_BUILD_BINAST
VARCACHE_PREF
(
"
dom
.
script_loader
.
binast_encoding
.
enabled
"
dom_script_loader_binast_encoding_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
script_loader
.
binast_encoding
.
domain
.
restrict
"
dom_script_loader_binast_encoding_domain_restrict
bool
true
)
#
endif
VARCACHE_PREF
(
"
dom
.
script_loader
.
bytecode_cache
.
enabled
"
dom_script_loader_bytecode_cache_enabled
bool
true
)
VARCACHE_PREF
(
"
dom
.
script_loader
.
bytecode_cache
.
strategy
"
dom_script_loader_bytecode_cache_strategy
int32_t
0
)
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
dom
.
worker
.
script_loader
.
utf8_parsing
.
enabled
"
dom_worker_script_loader_utf8_parsing_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
worker
.
canceling
.
timeoutMilliseconds
"
dom_worker_canceling_timeoutMilliseconds
RelaxedAtomicUint32
30000
)
VARCACHE_PREF
(
"
dom
.
worker
.
use_medium_high_event_queue
"
dom_worker_use_medium_high_event_queue
RelaxedAtomicBool
true
)
#
ifdef
MOZILLA_OFFICIAL
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
browser
.
dom
.
window
.
dump
.
enabled
"
browser_dom_window_dump_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
xhr
.
standard_content_type_normalization
"
dom_xhr_standard_content_type_normalization
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
dom
.
block_external_protocol_in_iframes
"
dom_block_external_protocol_in_iframes
bool
true
)
VARCACHE_PREF
(
"
dom
.
delay
.
block_external_protocol_in_iframes
"
dom_delay_block_external_protocol_in_iframes
uint32_t
10
)
VARCACHE_PREF
(
"
dom
.
block_multiple_popups
"
dom_block_multiple_popups
bool
true
)
#
ifdef
EARLY_BETA_OR_EARLIER
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
targetBlankNoOpener
.
enabled
"
dom_targetBlankNoOpener_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
disable_open_during_load
"
dom_disable_open_during_load
bool
false
)
VARCACHE_PREF
(
"
dom
.
storage_access
.
enabled
"
dom_storage_access_enabled
bool
false
)
VARCACHE_PREF
(
"
dom
.
prototype_document_cache
.
enabled
"
dom_prototype_document_cache_enabled
bool
true
)
VARCACHE_PREF
(
"
dom
.
storage_access
.
auto_grants
.
delayed
"
dom_storage_access_auto_grants_delayed
bool
true
)
VARCACHE_PREF
(
"
dom
.
window
.
open
.
noreferrer
.
enabled
"
dom_window_open_noreferrer_enabled
bool
true
)
VARCACHE_PREF
(
"
dom
.
file
.
createInChild
"
dom_file_createInChild
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
allow_cut_copy
"
dom_allow_cut_copy
bool
true
)
VARCACHE_PREF
(
"
dom
.
forms
.
autocomplete
.
formautofill
"
dom_forms_autocomplete_formautofill
bool
false
)
VARCACHE_PREF
(
"
dom
.
requestIdleCallback
.
enabled
"
dom_requestIdleCallback_enabled
bool
true
)
VARCACHE_PREF
(
"
dom
.
placeholder
.
show_on_focus
"
dom_placeholder_show_on_focus
bool
true
)
VARCACHE_PREF
(
"
dom
.
presentation
.
testing
.
simulate
-
receiver
"
dom_presentation_testing_simulate_receiver
bool
false
)
VARCACHE_PREF
(
"
dom
.
largeAllocation
.
forceEnable
"
dom_largeAllocation_forceEnable
bool
false
)
VARCACHE_PREF
(
"
dom
.
metaElement
.
setCookie
.
allowed
"
dom_metaElement_setCookie_allowed
bool
false
)
VARCACHE_PREF
(
"
dom
.
separate_event_queue_for_post_message
.
enabled
"
dom_separate_event_queue_for_post_message_enabled
bool
true
)
#
ifdef
ANDROID
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
extensions
.
allowPrivateBrowsingByDefault
"
extensions_allowPrivateBrowsingByDefault
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
extensions
.
cookiesBehavior
.
overrideOnTopLevel
"
extensions_cookiesBehavior_overrideOnTopLevel
bool
false
)
VARCACHE_PREF
(
"
full
-
screen
-
api
.
enabled
"
full_screen_api_enabled
bool
false
)
VARCACHE_PREF
(
"
full
-
screen
-
api
.
unprefix
.
enabled
"
full_screen_api_unprefix_enabled
bool
true
)
VARCACHE_PREF
(
"
full
-
screen
-
api
.
allow
-
trusted
-
requests
-
only
"
full_screen_api_allow_trusted_requests_only
bool
true
)
VARCACHE_PREF
(
"
full
-
screen
-
api
.
mouse
-
event
-
allow
-
left
-
button
-
only
"
full_screen_api_mouse_event_allow_left_button_only
bool
true
)
VARCACHE_PREF
(
"
browser
.
display
.
focus_ring_on_anything
"
browser_display_focus_ring_on_anything
bool
false
)
VARCACHE_PREF
(
"
browser
.
display
.
focus_ring_width
"
browser_display_focus_ring_width
uint32_t
1
)
VARCACHE_PREF
(
"
browser
.
display
.
focus_ring_style
"
browser_display_focus_ring_style
uint32_t
1
)
VARCACHE_PREF
(
"
browser
.
display
.
use_system_colors
"
browser_display_use_system_colors
bool
true
)
VARCACHE_PREF
(
"
browser
.
display
.
document_color_use
"
browser_display_document_color_use
uint32_t
0
)
VARCACHE_PREF
(
"
browser
.
display
.
use_focus_colors
"
browser_display_use_focus_colors
bool
false
)
VARCACHE_PREF
(
"
browser
.
underline_anchors
"
browser_underline_anchors
bool
true
)
VARCACHE_PREF
(
"
browser
.
autofocus
"
browser_autofocus
bool
true
)
PREF
(
"
browser
.
display
.
foreground_color
"
String
"
"
)
PREF
(
"
browser
.
display
.
background_color
"
String
"
"
)
PREF
(
"
browser
.
display
.
focus_background_color
"
String
"
"
)
PREF
(
"
browser
.
display
.
focus_text_color
"
String
"
"
)
PREF
(
"
browser
.
anchor_color
"
String
"
"
)
PREF
(
"
browser
.
active_color
"
String
"
"
)
PREF
(
"
browser
.
visited_color
"
String
"
"
)
VARCACHE_PREF
(
"
browser
.
display
.
use_document_fonts
"
browser_display_use_document_fonts
RelaxedAtomicInt32
1
)
VARCACHE_PREF
(
"
gfx
.
font_rendering
.
opentype_svg
.
enabled
"
gfx_font_rendering_opentype_svg_enabled
bool
true
)
VARCACHE_PREF
(
"
gfx
.
offscreencanvas
.
enabled
"
gfx_offscreencanvas_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
gfx
.
font_ahem_antialias_none
"
gfx_font_ahem_antialias_none
RelaxedAtomicBool
false
)
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
gfx
.
omta
.
background
-
color
"
gfx_omta_background_color
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
html5
.
offmainthread
"
html5_offmainthread
bool
true
)
VARCACHE_PREF
(
"
html5
.
flushtimer
.
initialdelay
"
html5_flushtimer_initialdelay
RelaxedAtomicInt32
16
)
VARCACHE_PREF
(
"
html5
.
flushtimer
.
subsequentdelay
"
html5_flushtimer_subsequentdelay
RelaxedAtomicInt32
16
)
VARCACHE_PREF
(
"
layout
.
cursor
.
block
.
enabled
"
layout_cursor_block_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
cursor
.
block
.
max
-
size
"
layout_cursor_block_max_size
uint32_t
32
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
enabled
"
layout_accessiblecaret_enabled
bool
false
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
enabled_on_touch
"
layout_accessiblecaret_enabled_on_touch
bool
true
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
always_tilt
"
layout_accessiblecaret_always_tilt
bool
false
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
caret_shown_when_long_tapping_on_empty_content
"
layout_accessiblecaret_caret_shown_when_long_tapping_on_empty_content
bool
false
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
script_change_update_mode
"
layout_accessiblecaret_script_change_update_mode
int32_t
0
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
allow_dragging_across_other_caret
"
layout_accessiblecaret_allow_dragging_across_other_caret
bool
true
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
hapticfeedback
"
layout_accessiblecaret_hapticfeedback
bool
false
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
extend_selection_for_phone_number
"
layout_accessiblecaret_extend_selection_for_phone_number
bool
false
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
hide_carets_for_mouse_input
"
layout_accessiblecaret_hide_carets_for_mouse_input
bool
true
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
width
"
layout_accessiblecaret_width
float
34
.
0f
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
height
"
layout_accessiblecaret_height
float
36
.
0f
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
margin
-
left
"
layout_accessiblecaret_margin_left
float
-
18
.
5f
)
VARCACHE_PREF
(
"
layout
.
accessiblecaret
.
use_long_tap_injector
"
layout_accessiblecaret_use_long_tap_injector
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
parsing
.
parallel
"
layout_css_parsing_parallel
bool
true
)
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
use
-
counters
.
enabled
"
layout_css_use_counters_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
layout
.
css
.
report_errors
"
layout_css_report_errors
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
font
-
display
.
enabled
"
layout_css_font_display_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
prefixes
.
webkit
"
layout_css_prefixes_webkit
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
prefixes
.
device
-
pixel
-
ratio
-
webkit
"
layout_css_prefixes_device_pixel_ratio_webkit
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
simple
-
moz
-
gradient
.
enabled
"
layout_css_simple_moz_gradient_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
offset
-
logical
-
properties
.
enabled
"
layout_css_offset_logical_properties_enabled
bool
false
)
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
control
-
characters
.
visible
"
layout_css_control_characters_visible
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
layout
.
css
.
visited_links_enabled
"
layout_css_visited_links_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
webkit
-
appearance
.
enabled
"
layout_css_webkit_appearance_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
moz
-
document
.
content
.
enabled
"
layout_css_moz_document_content_enabled
bool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
supports
-
selector
.
enabled
"
layout_css_supports_selector_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
EARLY_BETA_OR_EARLIER
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
moz
-
document
.
url
-
prefix
-
hack
.
enabled
"
layout_css_moz_document_url_prefix_hack_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
layout
.
css
.
xul
-
display
-
values
.
content
.
enabled
"
layout_css_xul_display_values_content_enabled
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
xul
-
box
-
display
-
values
.
content
.
enabled
"
layout_css_xul_box_display_values_content_enabled
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
xul
-
tree
-
pseudos
.
content
.
enabled
"
layout_css_xul_tree_pseudos_content_enabled
bool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
grid
-
template
-
subgrid
-
value
.
enabled
"
layout_css_grid_template_subgrid_value_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
layout
.
css
.
line
-
height
-
moz
-
block
-
height
.
content
.
enabled
"
layout_css_line_height_moz_block_height_content_enabled
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
font
-
variations
.
enabled
"
layout_css_font_variations_enabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
emulate
-
moz
-
box
-
with
-
flex
"
layout_css_emulate_moz_box_with_flex
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
unknown
-
webkit
-
pseudo
-
element
"
layout_css_unknown_webkit_pseudo_element
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
clip
-
path
-
path
.
enabled
"
layout_css_clip_path_path_enabled
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
column
-
span
.
enabled
"
layout_css_column_span_enabled
bool
false
)
#
ifdef
EARLY_BETA_OR_EARLIER
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
contain
.
enabled
"
layout_css_contain_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
layout
.
css
.
step
-
position
-
jump
.
enabled
"
layout_css_step_position_jump_enabled
bool
true
)
#
ifdef
EARLY_BETA_OR_EARLIER
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
layout
.
dynamic
-
reflow
-
roots
.
enabled
"
layout_dynamic_reflow_roots_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
layout
.
lower_priority_refresh_driver_during_load
"
layout_lower_priority_refresh_driver_during_load
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
anchoring
.
enabled
"
layout_css_scroll_anchoring_enabled
bool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
anchoring
.
highlight
"
layout_css_scroll_anchoring_highlight
bool
false
)
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
snap
-
v1
.
enabled
"
layout_css_scroll_snap_v1_enabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
layout
.
css
.
shared
-
memory
-
ua
-
sheets
.
enabled
"
layout_css_shared_memory_ua_sheets_enabled
bool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
resizeobserver
.
enabled
"
layout_css_resizeobserver_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
RELEASE_OR_BETA
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
layout
.
css
.
getBoxQuads
.
enabled
"
layout_css_getBoxQuads_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
MOZ_WIDGET_GTK
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
xul
.
panel
-
animations
.
enabled
"
xul_panel_animations_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
layout
.
css
.
webkit
-
line
-
clamp
.
enabled
"
layout_css_webkit_line_clamp_enabled
bool
true
)
#
ifdef
ANDROID
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
javascript
.
options
.
gc_on_memory_pressure
"
javascript_options_gc_on_memory_pressure
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
javascript
.
options
.
compact_on_user_inactive
"
javascript_options_compact_on_user_inactive
bool
true
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
15000
/
/
ms
#
else
#
define
PREF_VALUE
300000
/
/
ms
#
endif
VARCACHE_PREF
(
"
javascript
.
options
.
compact_on_user_inactive_delay
"
javascript_options_compact_on_user_inactive_delay
uint32_t
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
javascript
.
options
.
mem
.
log
"
javascript_options_mem_log
bool
false
)
VARCACHE_PREF
(
"
javascript
.
options
.
mem
.
notify
"
javascript_options_mem_notify
bool
false
)
VARCACHE_PREF
(
"
javascript
.
options
.
streams
"
javascript_options_streams
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
javascript
.
options
.
bigint
"
javascript_options_bigint
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
javascript
.
options
.
experimental
.
fields
"
javascript_options_experimental_fields
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
javascript
.
options
.
experimental
.
await_fix
"
javascript_options_experimental_await_fix
RelaxedAtomicBool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
ipc
.
cancel_content_js_when_navigating
"
dom_ipc_cancel_content_js_when_navigating
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
cache_size
"
MediaCacheSize
RelaxedAtomicUint32
512000
)
VARCACHE_PREF
(
"
media
.
cache_size
.
cellular
"
MediaCacheCellularSize
RelaxedAtomicUint32
32768
)
VARCACHE_PREF
(
"
media
.
memory_cache_max_size
"
MediaMemoryCacheMaxSize
uint32_t
8192
)
VARCACHE_PREF
(
"
media
.
memory_caches_combined_limit_kb
"
MediaMemoryCachesCombinedLimitKb
uint32_t
524288
)
VARCACHE_PREF
(
"
media
.
memory_caches_combined_limit_pc_sysmem
"
MediaMemoryCachesCombinedLimitPcSysmem
uint32_t
5
)
VARCACHE_PREF
(
"
media
.
cache_resume_threshold
"
MediaCacheResumeThreshold
RelaxedAtomicUint32
30
)
VARCACHE_PREF
(
"
media
.
cache_resume_threshold
.
cellular
"
MediaCacheCellularResumeThreshold
RelaxedAtomicUint32
10
)
VARCACHE_PREF
(
"
media
.
cache_readahead_limit
"
MediaCacheReadaheadLimit
RelaxedAtomicUint32
60
)
VARCACHE_PREF
(
"
media
.
cache_readahead_limit
.
cellular
"
MediaCacheCellularReadaheadLimit
RelaxedAtomicUint32
30
)
VARCACHE_PREF
(
"
media
.
resampling
.
enabled
"
MediaResamplingEnabled
RelaxedAtomicBool
false
)
#
if
defined
(
XP_WIN
)
|
|
defined
(
XP_DARWIN
)
|
|
defined
(
MOZ_PULSEAUDIO
)
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
media
.
forcestereo
.
enabled
"
MediaForcestereoEnabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
ruin
-
av
-
sync
.
enabled
"
MediaRuinAvSyncEnabled
RelaxedAtomicBool
false
)
#
if
defined
(
ANDROID
)
#
if
defined
(
NIGHTLY_BUILD
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
#
elif
defined
(
XP_LINUX
)
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
media
.
eme
.
enabled
"
MediaEmeEnabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
clearkey
.
persistent
-
license
.
enabled
"
MediaClearkeyPersistentLicenseEnabled
bool
false
)
#
if
defined
(
XP_LINUX
)
&
&
defined
(
MOZ_SANDBOX
)
VARCACHE_PREF
(
"
media
.
gmp
.
insecure
.
allow
"
MediaGmpInsecureAllow
RelaxedAtomicBool
false
)
#
endif
VARCACHE_PREF
(
"
media
.
use
-
blank
-
decoder
"
MediaUseBlankDecoder
RelaxedAtomicBool
false
)
#
if
defined
(
XP_WIN
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
gpu
-
process
-
decoder
"
MediaGpuProcessDecoder
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
#
if
defined
(
XP_WIN
)
&
&
!
defined
(
_ARM64_
)
#
define
PREF_VALUE
true
#
elif
defined
(
XP_MACOSX
)
#
define
PREF_VALUE
true
#
elif
defined
(
XP_LINUX
)
&
&
!
defined
(
ANDROID
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
rdd
-
process
.
enabled
"
MediaRddProcessEnabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
rdd
-
process
.
startup_timeout_ms
"
MediaRddProcessStartupTimeoutMs
RelaxedAtomicInt32
5000
)
#
if
defined
(
XP_LINUX
)
&
&
!
defined
(
ANDROID
)
#
define
PREF_VALUE
true
#
elif
defined
(
XP_WIN
)
&
&
!
defined
(
_ARM64_
)
#
define
PREF_VALUE
false
#
elif
defined
(
XP_MACOSX
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
rdd
-
vorbis
.
enabled
"
MediaRddVorbisEnabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
ANDROID
VARCACHE_PREF
(
"
media
.
android
-
media
-
codec
.
enabled
"
MediaAndroidMediaCodecEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
android
-
media
-
codec
.
preferred
"
MediaAndroidMediaCodecPreferred
RelaxedAtomicBool
true
)
#
endif
VARCACHE_PREF
(
"
media
.
navigator
.
enabled
"
media_navigator_enabled
bool
true
)
VARCACHE_PREF
(
"
media
.
devices
.
insecure
.
enabled
"
media_devices_insecure_enabled
bool
true
)
VARCACHE_PREF
(
"
media
.
getusermedia
.
insecure
.
enabled
"
media_getusermedia_insecure_enabled
bool
false
)
VARCACHE_PREF
(
"
media
.
peerconnection
.
enabled
"
media_peerconnection_enabled
bool
true
)
#
ifdef
MOZ_WEBRTC
#
ifdef
ANDROID
VARCACHE_PREF
(
"
media
.
navigator
.
hardware
.
vp8_encode
.
acceleration_remote_enabled
"
MediaNavigatorHardwareVp8encodeAccelerationRemoteEnabled
bool
true
)
PREF
(
"
media
.
navigator
.
hardware
.
vp8_encode
.
acceleration_enabled
"
bool
true
)
PREF
(
"
media
.
navigator
.
hardware
.
vp8_decode
.
acceleration_enabled
"
bool
false
)
#
endif
#
if
defined
(
NIGHTLY_BUILD
)
&
&
!
defined
(
ANDROID
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
navigator
.
mediadatadecoder_vpx_enabled
"
MediaNavigatorMediadatadecoderVPXEnabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
#
if
defined
(
ANDROID
)
#
define
PREF_VALUE
false
/
/
Bug
1509316
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
media
.
navigator
.
mediadatadecoder_h264_enabled
"
MediaNavigatorMediadatadecoderH264Enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
#
endif
#
ifdef
MOZ_OMX
VARCACHE_PREF
(
"
media
.
omx
.
enabled
"
MediaOmxEnabled
bool
false
)
#
endif
#
ifdef
MOZ_FFMPEG
#
if
defined
(
XP_MACOSX
)
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
media
.
ffmpeg
.
enabled
"
MediaFfmpegEnabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
libavcodec
.
allow
-
obsolete
"
MediaLibavcodecAllowObsolete
bool
false
)
#
endif
#
ifdef
MOZ_FFVPX
VARCACHE_PREF
(
"
media
.
ffvpx
.
enabled
"
MediaFfvpxEnabled
RelaxedAtomicBool
true
)
#
endif
#
if
defined
(
MOZ_FFMPEG
)
|
|
defined
(
MOZ_FFVPX
)
VARCACHE_PREF
(
"
media
.
ffmpeg
.
low
-
latency
.
enabled
"
MediaFfmpegLowLatencyEnabled
RelaxedAtomicBool
false
)
#
endif
#
ifdef
MOZ_WMF
VARCACHE_PREF
(
"
media
.
wmf
.
enabled
"
MediaWmfEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
decoder
-
doctor
.
wmf
-
disabled
-
is
-
failure
"
MediaDecoderDoctorWmfDisabledIsFailure
bool
false
)
#
endif
#
ifdef
ANDROID
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
decoder
.
recycle
.
enabled
"
MediaDecoderRecycleEnabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
decoder
.
skip
-
to
-
next
-
key
-
frame
.
enabled
"
MediaDecoderSkipToNextKeyFrameEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
gmp
.
decoder
.
enabled
"
MediaGmpDecoderEnabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
media
.
eme
.
audio
.
blank
"
MediaEmeAudioBlank
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
media
.
eme
.
video
.
blank
"
MediaEmeVideoBlank
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
media
.
eme
.
chromium
-
api
.
video
-
shmems
"
MediaEmeChromiumApiVideoShmems
RelaxedAtomicUint32
6
)
VARCACHE_PREF
(
"
media
.
suspend
-
bkgnd
-
video
.
enabled
"
MediaSuspendBkgndVideoEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
suspend
-
bkgnd
-
video
.
delay
-
ms
"
MediaSuspendBkgndVideoDelayMs
RelaxedAtomicUint32
10000
)
VARCACHE_PREF
(
"
media
.
dormant
-
on
-
pause
-
timeout
-
ms
"
MediaDormantOnPauseTimeoutMs
RelaxedAtomicInt32
5000
)
VARCACHE_PREF
(
"
media
.
webspeech
.
synth
.
force_global_queue
"
MediaWebspeechSynthForceGlobalQueue
bool
false
)
VARCACHE_PREF
(
"
media
.
webspeech
.
test
.
enable
"
MediaWebspeechTestEnable
bool
false
)
VARCACHE_PREF
(
"
media
.
webspeech
.
test
.
fake_fsm_events
"
MediaWebspeechTextFakeFsmEvents
bool
false
)
VARCACHE_PREF
(
"
media
.
webspeech
.
test
.
fake_recognition_service
"
MediaWebspeechTextFakeRecognitionService
bool
false
)
#
ifdef
MOZ_WEBSPEECH
VARCACHE_PREF
(
"
media
.
webspeech
.
recognition
.
enable
"
MediaWebspeechRecognitionEnable
bool
false
)
#
endif
VARCACHE_PREF
(
"
media
.
webspeech
.
recognition
.
force_enable
"
MediaWebspeechRecognitionForceEnable
bool
false
)
#
if
defined
(
MOZ_WEBM_ENCODER
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
encoder
.
webm
.
enabled
"
MediaEncoderWebMEnabled
RelaxedAtomicBool
true
)
#
undef
PREF_VALUE
#
if
defined
(
RELEASE_OR_BETA
)
#
define
PREF_VALUE
3
#
else
#
define
PREF_VALUE
0
#
endif
VARCACHE_PREF
(
"
media
.
audio
-
max
-
decode
-
error
"
MediaAudioMaxDecodeError
uint32_t
PREF_VALUE
)
#
undef
PREF_VALUE
#
if
defined
(
RELEASE_OR_BETA
)
#
define
PREF_VALUE
2
#
else
#
define
PREF_VALUE
0
#
endif
VARCACHE_PREF
(
"
media
.
video
-
max
-
decode
-
error
"
MediaVideoMaxDecodeError
uint32_t
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
opus
.
enabled
"
MediaOpusEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
wave
.
enabled
"
MediaWaveEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
ogg
.
enabled
"
MediaOggEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
webm
.
enabled
"
MediaWebMEnabled
RelaxedAtomicBool
true
)
#
if
defined
(
XP_WIN
)
&
&
!
defined
(
_ARM64_
)
#
define
PREF_VALUE
true
#
elif
defined
(
XP_MACOSX
)
#
define
PREF_VALUE
true
#
elif
defined
(
XP_UNIX
)
&
&
!
defined
(
Android
)
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
av1
.
enabled
"
MediaAv1Enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
av1
.
use
-
dav1d
"
MediaAv1UseDav1d
#
if
defined
(
XP_WIN
)
&
&
!
defined
(
_ARM64_
)
RelaxedAtomicBool
true
#
elif
defined
(
XP_MACOSX
)
RelaxedAtomicBool
true
#
elif
defined
(
XP_UNIX
)
&
&
!
defined
(
Android
)
RelaxedAtomicBool
true
#
else
RelaxedAtomicBool
false
#
endif
)
VARCACHE_PREF
(
"
media
.
flac
.
enabled
"
MediaFlacEnabled
bool
true
)
#
ifdef
ANDROID
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
hls
.
enabled
"
MediaHlsEnabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
#
ifdef
ANDROID
VARCACHE_PREF
(
"
media
.
hls
.
max
-
allocations
"
MediaHlsMaxAllocations
uint32_t
20
)
#
endif
#
ifdef
MOZ_FMP4
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
mp4
.
enabled
"
MediaMp4Enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
playback
.
warnings
-
as
-
errors
"
MediaPlaybackWarningsAsErrors
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
media
.
resume
-
bkgnd
-
video
-
on
-
tabhover
"
MediaResumeBkgndVideoOnTabhover
bool
true
)
#
ifdef
ANDROID
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
media
.
videocontrols
.
lock
-
video
-
orientation
"
MediaVideocontrolsLockVideoOrientation
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
media
.
seamless
-
looping
"
MediaSeamlessLooping
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
autoplay
.
block
-
event
.
enabled
"
MediaBlockEventEnabled
bool
false
)
VARCACHE_PREF
(
"
media
.
media
-
capabilities
.
enabled
"
MediaCapabilitiesEnabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
media
-
capabilities
.
screen
.
enabled
"
MediaCapabilitiesScreenEnabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
media
.
benchmark
.
vp9
.
fps
"
MediaBenchmarkVp9Fps
RelaxedAtomicUint32
0
)
VARCACHE_PREF
(
"
media
.
benchmark
.
vp9
.
threshold
"
MediaBenchmarkVp9Threshold
RelaxedAtomicUint32
150
)
VARCACHE_PREF
(
"
media
.
benchmark
.
vp9
.
versioncheck
"
MediaBenchmarkVp9Versioncheck
RelaxedAtomicUint32
0
)
VARCACHE_PREF
(
"
media
.
benchmark
.
frames
"
MediaBenchmarkFrames
RelaxedAtomicUint32
300
)
VARCACHE_PREF
(
"
media
.
benchmark
.
timeout
"
MediaBenchmarkTimeout
RelaxedAtomicUint32
1000
)
VARCACHE_PREF
(
"
media
.
test
.
video
-
suspend
"
MediaTestVideoSuspend
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
media
.
autoplay
.
allow
-
muted
"
MediaAutoplayAllowMuted
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
media
.
autoplay
.
blackList
-
override
-
default
"
MediaAutoplayBlackListOverrideDefault
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
network
.
auth
.
subresource
-
http
-
auth
-
allow
"
network_auth_subresource_http_auth_allow
uint32_t
2
)
VARCACHE_PREF
(
"
network
.
auth
.
subresource
-
img
-
cross
-
origin
-
http
-
auth
-
allow
"
network_auth_subresource_img_cross_origin_http_auth_allow
bool
false
)
VARCACHE_PREF
(
"
network
.
auth
.
non
-
web
-
content
-
triggered
-
resources
-
http
-
auth
-
allow
"
network_auth_non_web_content_triggered_resources_http_auth_allow
bool
false
)
VARCACHE_PREF
(
"
network
.
cookie
.
cookieBehavior
"
network_cookie_cookieBehavior
RelaxedAtomicInt32
0
)
VARCACHE_PREF
(
"
network
.
cookie
.
staleThreshold
"
network_cookie_staleThreshold
uint32_t
60
)
VARCACHE_PREF
(
"
network
.
cookie
.
lifetimePolicy
"
network_cookie_lifetimePolicy
RelaxedAtomicInt32
0
)
VARCACHE_PREF
(
"
network
.
predictor
.
enabled
"
network_predictor_enabled
bool
true
)
VARCACHE_PREF
(
"
network
.
cookieSettings
.
unblocked_for_testing
"
network_cookieSettings_unblocked_for_testing
bool
false
)
VARCACHE_PREF
(
"
network
.
predictor
.
enable
-
hover
-
on
-
ssl
"
network_predictor_enable_hover_on_ssl
bool
false
)
VARCACHE_PREF
(
"
network
.
predictor
.
enable
-
prefetch
"
network_predictor_enable_prefetch
bool
false
)
VARCACHE_PREF
(
"
network
.
predictor
.
page
-
degradation
.
day
"
network_predictor_page_degradation_day
int32_t
0
)
VARCACHE_PREF
(
"
network
.
predictor
.
page
-
degradation
.
week
"
network_predictor_page_degradation_week
int32_t
5
)
VARCACHE_PREF
(
"
network
.
predictor
.
page
-
degradation
.
month
"
network_predictor_page_degradation_month
int32_t
10
)
VARCACHE_PREF
(
"
network
.
predictor
.
page
-
degradation
.
year
"
network_predictor_page_degradation_year
int32_t
25
)
VARCACHE_PREF
(
"
network
.
predictor
.
page
-
degradation
.
max
"
network_predictor_page_degradation_max
int32_t
50
)
VARCACHE_PREF
(
"
network
.
predictor
.
subresource
-
degradation
.
day
"
network_predictor_subresource_degradation_day
int32_t
1
)
VARCACHE_PREF
(
"
network
.
predictor
.
subresource
-
degradation
.
week
"
network_predictor_subresource_degradation_week
int32_t
10
)
VARCACHE_PREF
(
"
network
.
predictor
.
subresource
-
degradation
.
month
"
network_predictor_subresource_degradation_month
int32_t
25
)
VARCACHE_PREF
(
"
network
.
predictor
.
subresource
-
degradation
.
year
"
network_predictor_subresource_degradation_year
int32_t
50
)
VARCACHE_PREF
(
"
network
.
predictor
.
subresource
-
degradation
.
max
"
network_predictor_subresource_degradation_max
int32_t
100
)
VARCACHE_PREF
(
"
network
.
predictor
.
prefetch
-
rolling
-
load
-
count
"
network_predictor_prefetch_rolling_load_count
int32_t
10
)
VARCACHE_PREF
(
"
network
.
predictor
.
prefetch
-
min
-
confidence
"
network_predictor_prefetch_min_confidence
int32_t
100
)
VARCACHE_PREF
(
"
network
.
predictor
.
preconnect
-
min
-
confidence
"
network_predictor_preconnect_min_confidence
int32_t
90
)
VARCACHE_PREF
(
"
network
.
predictor
.
preresolve
-
min
-
confidence
"
network_predictor_preresolve_min_confidence
int32_t
60
)
VARCACHE_PREF
(
"
network
.
predictor
.
prefetch
-
force
-
valid
-
for
"
network_predictor_prefetch_force_valid_for
int32_t
10
)
VARCACHE_PREF
(
"
network
.
predictor
.
max
-
resources
-
per
-
entry
"
network_predictor_max_resources_per_entry
int32_t
100
)
VARCACHE_PREF
(
"
network
.
predictor
.
max
-
uri
-
length
"
network_predictor_max_uri_length
uint32_t
500
)
PREF
(
"
network
.
predictor
.
cleaned
-
up
"
bool
false
)
VARCACHE_PREF
(
"
network
.
predictor
.
doing
-
tests
"
network_predictor_doing_tests
bool
false
)
VARCACHE_PREF
(
"
network
.
traffic_analyzer
.
enabled
"
network_traffic_analyzer_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
network
.
delay
.
tracking
.
load
"
network_delay_tracking_load
uint32_t
0
)
VARCACHE_PREF
(
"
network
.
dns
.
resolver_shutdown_timeout_ms
"
network_dns_resolver_shutdown_timeout_ms
uint32_t
2000
)
VARCACHE_PREF
(
"
network
.
http
.
tailing
.
enabled
"
network_http_tailing_enabled
bool
true
)
VARCACHE_PREF
(
"
browser
.
sessionstore
.
dom_storage_limit
"
browser_sessionstore_dom_storage_limit
uint32_t
2048
)
PREF
(
"
preferences
.
allow
.
omt
-
write
"
bool
true
)
VARCACHE_PREF
(
"
browser
.
contentblocking
.
allowlist
.
storage
.
enabled
"
browser_contentblocking_allowlist_storage_enabled
bool
false
)
VARCACHE_PREF
(
"
browser
.
contentblocking
.
allowlist
.
annotations
.
enabled
"
browser_contentblocking_allowlist_annotations_enabled
bool
true
)
VARCACHE_PREF
(
"
browser
.
contentblocking
.
originlog
.
length
"
browser_contentblocking_originlog_length
uint32_t
32
)
VARCACHE_PREF
(
"
browser
.
contentblocking
.
rejecttrackers
.
control
-
center
.
ui
.
enabled
"
browser_contentblocking_rejecttrackers_control_center_ui_enabled
bool
false
)
#
ifdef
EARLY_BETA_OR_EARLIER
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
privacy
.
annotate_channels
.
strict_list
.
enabled
"
privacy_annotate_channels_strict_list_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
annotate_channels
"
privacy_trackingprotection_annotate_channels
bool
true
)
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
fingerprinting
.
enabled
"
privacy_trackingprotection_fingerprinting_enabled
bool
false
)
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
fingerprinting
.
annotate
.
enabled
"
privacy_trackingprotection_fingerprinting_annotate_enabled
bool
true
)
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
cryptomining
.
enabled
"
privacy_trackingprotection_cryptomining_enabled
bool
false
)
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
cryptomining
.
annotate
.
enabled
"
privacy_trackingprotection_cryptomining_annotate_enabled
bool
true
)
VARCACHE_PREF
(
"
privacy
.
spoof_english
"
privacy_spoof_english
RelaxedAtomicUint32
0
)
VARCACHE_PREF
(
"
privacy
.
donottrackheader
.
enabled
"
privacy_donottrackheader_enabled
bool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
lower_network_priority
"
privacy_trackingprotection_lower_network_priority
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
privacy
.
restrict3rdpartystorage
.
expiration
"
privacy_restrict3rdpartystorage_expiration
uint32_t
2592000
)
VARCACHE_PREF
(
"
privacy
.
userInteraction
.
expiration
"
privacy_userInteraction_expiration
uint32_t
2592000
)
VARCACHE_PREF
(
"
privacy
.
userInteraction
.
document
.
interval
"
privacy_userInteraction_document_interval
uint32_t
1800
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
604800
/
/
7
days
#
else
#
define
PREF_VALUE
0
#
endif
VARCACHE_PREF
(
"
privacy
.
documentCookies
.
maxage
"
privacy_documentCookies_maxage
uint32_t
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
privacy
.
resistFingerprinting
"
privacy_resistFingerprinting
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
privacy
.
resistFingerprinting
.
autoDeclineNoUserInputCanvasPrompts
"
privacy_resistFingerprinting_autoDeclineNoUserInputCanvasPrompts
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
privacy
.
storagePrincipal
.
enabledForTrackers
"
privacy_storagePrincipal_enabledForTrackers
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
privacy
.
window
.
maxInnerWidth
"
privacy_window_maxInnerWidth
int32_t
1000
)
VARCACHE_PREF
(
"
privacy
.
window
.
maxInnerHeight
"
privacy_window_maxInnerHeight
int32_t
1000
)
VARCACHE_PREF
(
"
dom
.
event
.
handling
-
user
-
input
-
time
-
limit
"
dom_event_handling_user_input_time_limit
uint32_t
1000
)
VARCACHE_PREF
(
"
browser
.
safebrowsing
.
passwords
.
enabled
"
browser_safebrowsing_passwords_enabled
bool
false
)
VARCACHE_PREF
(
"
browser
.
safebrowsing
.
malware
.
enabled
"
browser_safebrowsing_malware_enabled
bool
true
)
VARCACHE_PREF
(
"
browser
.
safebrowsing
.
phishing
.
enabled
"
browser_safebrowsing_phishing_enabled
bool
true
)
VARCACHE_PREF
(
"
browser
.
safebrowsing
.
blockedURIs
.
enabled
"
browser_safebrowsing_blockedURIs_enabled
bool
true
)
VARCACHE_PREF
(
"
browser
.
safebrowsing
.
prefixset_max_array_size
"
browser_safebrowsing_prefixset_max_array_size
RelaxedAtomicUint32
512
*
1024
)
VARCACHE_PREF
(
"
browser
.
tabs
.
remote
.
useCrossOriginPolicy
"
browser_tabs_remote_useCrossOriginPolicy
bool
false
)
VARCACHE_PREF
(
"
ui
.
use_standins_for_native_colors
"
ui_use_standins_for_native_colors
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
ui
.
use_activity_cursor
"
ui_use_activity_cursor
bool
false
)
VARCACHE_PREF
(
"
channelclassifier
.
allowlist_example
"
channelclassifier_allowlist_example
bool
false
)
VARCACHE_PREF
(
"
security
.
csp
.
enable
"
security_csp_enable
bool
true
)
VARCACHE_PREF
(
"
security
.
csp
.
enableStrictDynamic
"
security_csp_enableStrictDynamic
bool
true
)
VARCACHE_PREF
(
"
security
.
csp
.
reporting
.
script
-
sample
.
max
-
length
"
security_csp_reporting_script_sample_max_length
int32_t
40
)
VARCACHE_PREF
(
"
view_source
.
editor
.
external
"
view_source_editor_external
bool
false
)
VARCACHE_PREF
(
"
devtools
.
enabled
"
devtools_enabled
RelaxedAtomicBool
false
)
#
ifdef
MOZILLA_OFFICIAL
#
define
PREF_VALUE
false
#
else
#
define
PREF_VALUE
true
#
endif
VARCACHE_PREF
(
"
devtools
.
console
.
stdout
.
chrome
"
devtools_console_stdout_chrome
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
devtools
.
console
.
stdout
.
content
"
devtools_console_stdout_content
RelaxedAtomicBool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
security
.
featurePolicy
.
enabled
"
dom_security_featurePolicy_enabled
bool
PREF_VALUE
)
VARCACHE_PREF
(
"
dom
.
security
.
featurePolicy
.
header
.
enabled
"
dom_security_featurePolicy_header_enabled
bool
PREF_VALUE
)
VARCACHE_PREF
(
"
dom
.
security
.
featurePolicy
.
webidl
.
enabled
"
dom_security_featurePolicy_webidl_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
plugins
.
flashBlock
.
enabled
"
plugins_flashBlock_enabled
bool
false
)
VARCACHE_PREF
(
"
plugins
.
http_https_only
"
plugins_http_https_only
bool
true
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
reporting
.
enabled
"
dom_reporting_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
reporting
.
testing
.
enabled
"
dom_reporting_testing_enabled
RelaxedAtomicBool
false
)
#
ifdef
NIGHTLY_BUILD
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
reporting
.
featurePolicy
.
enabled
"
dom_reporting_featurePolicy_enabled
RelaxedAtomicBool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
dom
.
reporting
.
header
.
enabled
"
dom_reporting_header_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
dom
.
reporting
.
cleanup
.
timeout
"
dom_reporting_cleanup_timeout
uint32_t
3600
)
VARCACHE_PREF
(
"
dom
.
reporting
.
delivering
.
timeout
"
dom_reporting_delivering_timeout
uint32_t
5
)
VARCACHE_PREF
(
"
dom
.
reporting
.
delivering
.
maxFailures
"
dom_reporting_delivering_maxFailures
uint32_t
3
)
VARCACHE_PREF
(
"
dom
.
reporting
.
delivering
.
maxReports
"
dom_reporting_delivering_maxReports
uint32_t
100
)
#
ifdef
ANDROID
#
define
PREF_VALUE
true
#
else
#
define
PREF_VALUE
false
#
endif
VARCACHE_PREF
(
"
dom
.
w3c_touch_events
.
legacy_apis
.
enabled
"
dom_w3c_touch_events_legacy_apis_enabled
bool
PREF_VALUE
)
#
undef
PREF_VALUE
VARCACHE_PREF
(
"
medium_high_event_queue
.
enabled
"
medium_high_event_queue_enabled
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
security
.
fileuri
.
strict_origin_policy
"
security_fileuri_strict_origin_policy
RelaxedAtomicBool
true
)
VARCACHE_PREF
(
"
privacy
.
trackingprotection
.
origin_telemetry
.
enabled
"
privacy_trackingprotection_origin_telemetry_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
telemetry
.
origin_telemetry_test_mode
.
enabled
"
telemetry_origin_telemetry_test_mode_enabled
RelaxedAtomicBool
false
)
VARCACHE_PREF
(
"
accessibility
.
browsewithcaret
"
AccessibilityBrowseWithCaret
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
allow_double_tap_zooming
"
APZAllowDoubleTapZooming
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
apz
.
allow_immediate_handoff
"
APZAllowImmediateHandoff
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
apz
.
allow_zooming
"
APZAllowZooming
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
android
.
chrome_fling_physics
.
enabled
"
APZUseChromeFlingPhysics
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
android
.
chrome_fling_physics
.
friction
"
APZChromeFlingPhysicsFriction
AtomicFloat
0
.
015f
)
;
VARCACHE_PREF
(
"
apz
.
android
.
chrome_fling_physics
.
inflexion
"
APZChromeFlingPhysicsInflexion
AtomicFloat
0
.
35f
)
;
VARCACHE_PREF
(
"
apz
.
android
.
chrome_fling_physics
.
stop_threshold
"
APZChromeFlingPhysicsStopThreshold
AtomicFloat
0
.
1f
)
;
VARCACHE_PREF
(
"
apz
.
autoscroll
.
enabled
"
APZAutoscrollEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
axis_lock
.
breakout_angle
"
APZAxisBreakoutAngle
AtomicFloat
float
(
M_PI
/
8
.
0
)
)
;
VARCACHE_PREF
(
"
apz
.
axis_lock
.
breakout_threshold
"
APZAxisBreakoutThreshold
AtomicFloat
1
.
0f
/
32
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
axis_lock
.
direct_pan_angle
"
APZAllowedDirectPanAngle
AtomicFloat
float
(
M_PI
/
3
.
0
)
)
;
VARCACHE_PREF
(
"
apz
.
axis_lock
.
lock_angle
"
APZAxisLockAngle
AtomicFloat
float
(
M_PI
/
6
.
0
)
)
;
VARCACHE_PREF
(
"
apz
.
axis_lock
.
mode
"
APZAxisLockMode
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
apz
.
content_response_timeout
"
APZContentResponseTimeout
RelaxedAtomicInt32
400
)
;
VARCACHE_PREF
(
"
apz
.
danger_zone_x
"
APZDangerZoneX
RelaxedAtomicInt32
50
)
;
VARCACHE_PREF
(
"
apz
.
danger_zone_y
"
APZDangerZoneY
RelaxedAtomicInt32
100
)
;
VARCACHE_PREF
(
"
apz
.
disable_for_scroll_linked_effects
"
APZDisableForScrollLinkedEffects
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
displayport_expiry_ms
"
APZDisplayPortExpiryTime
RelaxedAtomicUint32
15000
)
;
VARCACHE_PREF
(
"
apz
.
drag
.
enabled
"
APZDragEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
drag
.
initial
.
enabled
"
APZDragInitiationEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
drag
.
touch
.
enabled
"
APZTouchDragEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
enlarge_displayport_when_clipped
"
APZEnlargeDisplayPortWhenClipped
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
fixed
-
margin
-
override
.
enabled
"
APZFixedMarginOverrideEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
fixed
-
margin
-
override
.
bottom
"
APZFixedMarginOverrideBottom
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
apz
.
fixed
-
margin
-
override
.
top
"
APZFixedMarginOverrideTop
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
apz
.
fling_accel_base_mult
"
APZFlingAccelBaseMultiplier
AtomicFloat
1
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
fling_accel_interval_ms
"
APZFlingAccelInterval
RelaxedAtomicInt32
500
)
;
VARCACHE_PREF
(
"
apz
.
fling_accel_supplemental_mult
"
APZFlingAccelSupplementalMultiplier
AtomicFloat
1
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
fling_accel_min_velocity
"
APZFlingAccelMinVelocity
AtomicFloat
1
.
5f
)
;
VARCACHE_PREF
(
"
apz
.
fling_curve_threshold_inches_per_ms
"
APZCurveThreshold
AtomicFloat
-
1
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
fling_friction
"
APZFlingFriction
AtomicFloat
0
.
002f
)
;
VARCACHE_PREF
(
"
apz
.
fling_min_velocity_threshold
"
APZFlingMinVelocityThreshold
AtomicFloat
0
.
5f
)
;
VARCACHE_PREF
(
"
apz
.
fling_stop_on_tap_threshold
"
APZFlingStopOnTapThreshold
AtomicFloat
0
.
05f
)
;
VARCACHE_PREF
(
"
apz
.
fling_stopped_threshold
"
APZFlingStoppedThreshold
AtomicFloat
0
.
01f
)
;
VARCACHE_PREF
(
"
apz
.
frame_delay
.
enabled
"
APZFrameDelayEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
keyboard
.
passive
-
listeners
"
APZKeyboardPassiveListeners
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
max_tap_time
"
APZMaxTapTime
RelaxedAtomicInt32
300
)
;
VARCACHE_PREF
(
"
apz
.
max_velocity_inches_per_ms
"
APZMaxVelocity
AtomicFloat
-
1
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
min_skate_speed
"
APZMinSkateSpeed
AtomicFloat
1
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
minimap
.
enabled
"
APZMinimap
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
one_touch_pinch
.
enabled
"
APZOneTouchPinchEnabled
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
apz
.
overscroll
.
enabled
"
APZOverscrollEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
overscroll
.
min_pan_distance_ratio
"
APZMinPanDistanceRatio
AtomicFloat
1
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
overscroll
.
spring_stiffness
"
APZOverscrollSpringStiffness
AtomicFloat
0
.
001f
)
;
VARCACHE_PREF
(
"
apz
.
overscroll
.
stop_distance_threshold
"
APZOverscrollStopDistanceThreshold
AtomicFloat
5
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
paint_skipping
.
enabled
"
APZPaintSkipping
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
apz
.
peek_messages
.
enabled
"
APZPeekMessages
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
apz
.
pinch_lock
.
mode
"
APZPinchLockMode
RelaxedAtomicInt32
1
)
;
VARCACHE_PREF
(
"
apz
.
pinch_lock
.
scroll_lock_threshold
"
APZPinchLockScrollLockThreshold
AtomicFloat
1
.
0f
/
32
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
pinch_lock
.
span_breakout_threshold
"
APZPinchLockSpanBreakoutThreshold
AtomicFloat
1
.
0f
/
32
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
pinch_lock
.
span_lock_threshold
"
APZPinchLockSpanLockThreshold
AtomicFloat
1
.
0f
/
32
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
popups
.
enabled
"
APZPopupsEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
printtree
"
APZPrintTree
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
record_checkerboarding
"
APZRecordCheckerboarding
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
second_tap_tolerance
"
APZSecondTapTolerance
AtomicFloat
0
.
5f
)
;
VARCACHE_PREF
(
"
apz
.
test
.
fails_with_native_injection
"
APZTestFailsWithNativeInjection
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
test
.
logging_enabled
"
APZTestLoggingEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
apz
.
touch_move_tolerance
"
APZTouchMoveTolerance
AtomicFloat
0
.
1f
)
;
VARCACHE_PREF
(
"
apz
.
touch_start_tolerance
"
APZTouchStartTolerance
AtomicFloat
1
.
0f
/
4
.
5f
)
;
VARCACHE_PREF
(
"
apz
.
velocity_bias
"
APZVelocityBias
AtomicFloat
0
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
velocity_relevance_time_ms
"
APZVelocityRelevanceTime
RelaxedAtomicUint32
150
)
;
VARCACHE_PREF
(
"
apz
.
x_skate_highmem_adjust
"
APZXSkateHighMemAdjust
AtomicFloat
0
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
x_skate_size_multiplier
"
APZXSkateSizeMultiplier
AtomicFloat
1
.
5f
)
;
VARCACHE_PREF
(
"
apz
.
x_stationary_size_multiplier
"
APZXStationarySizeMultiplier
AtomicFloat
3
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
y_skate_highmem_adjust
"
APZYSkateHighMemAdjust
AtomicFloat
0
.
0f
)
;
VARCACHE_PREF
(
"
apz
.
y_skate_size_multiplier
"
APZYSkateSizeMultiplier
AtomicFloat
2
.
5f
)
;
VARCACHE_PREF
(
"
apz
.
y_stationary_size_multiplier
"
APZYStationarySizeMultiplier
AtomicFloat
3
.
5f
)
;
VARCACHE_PREF
(
"
apz
.
zoom_animation_duration_ms
"
APZZoomAnimationDuration
RelaxedAtomicInt32
250
)
;
VARCACHE_PREF
(
"
apz
.
scale_repaint_delay_ms
"
APZScaleRepaintDelay
RelaxedAtomicInt32
500
)
;
VARCACHE_PREF
(
"
apz
.
relative
-
update
.
enabled
"
APZRelativeUpdate
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
browser
.
ui
.
scroll
-
toolbar
-
threshold
"
ToolbarScrollThreshold
RelaxedAtomicInt32
10
)
;
VARCACHE_PREF
(
"
browser
.
ui
.
zoom
.
force
-
user
-
scalable
"
ForceUserScalable
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
browser
.
viewport
.
desktopWidth
"
DesktopViewportWidth
RelaxedAtomicInt32
980
)
;
VARCACHE_PREF
(
"
dom
.
ipc
.
plugins
.
asyncdrawing
.
enabled
"
PluginAsyncDrawingEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
dom
.
meta
-
viewport
.
enabled
"
MetaViewportEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
autoactivate
.
enabled
"
VRAutoActivateEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
controller_trigger_threshold
"
VRControllerTriggerThreshold
AtomicFloat
0
.
1f
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
external
.
notdetected
.
timeout
"
VRExternalNotDetectedTimeout
RelaxedAtomicInt32
60000
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
external
.
quit
.
timeout
"
VRExternalQuitTimeout
RelaxedAtomicInt32
10000
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
navigation
.
timeout
"
VRNavigationTimeout
RelaxedAtomicInt32
1000
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
oculus
.
invisible
.
enabled
"
VROculusInvisibleEnabled
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
oculus
.
present
.
timeout
"
VROculusPresentTimeout
RelaxedAtomicInt32
500
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
oculus
.
quit
.
timeout
"
VROculusQuitTimeout
RelaxedAtomicInt32
10000
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
controller
.
enumerate
.
interval
"
VRControllerEnumerateInterval
RelaxedAtomicInt32
1000
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
display
.
enumerate
.
interval
"
VRDisplayEnumerateInterval
RelaxedAtomicInt32
5000
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
inactive
.
timeout
"
VRInactiveTimeout
RelaxedAtomicInt32
5000
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
poseprediction
.
enabled
"
VRPosePredictionEnabled
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
require
-
gesture
"
VRRequireGesture
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
puppet
.
enabled
"
VRPuppetEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
puppet
.
submitframe
"
VRPuppetSubmitFrame
RelaxedAtomicUint32
0
)
;
VARCACHE_PREF
(
"
dom
.
vr
.
display
.
rafMaxDuration
"
VRDisplayRafMaxDuration
RelaxedAtomicUint32
50
)
;
VARCACHE_PREF
(
"
dom
.
w3c_pointer_events
.
enabled
"
PointerEventsEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
"
SmoothScrollEnabled
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
currentVelocityWeighting
"
SmoothScrollCurrentVelocityWeighting
AtomicFloat
0
.
25
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
durationToIntervalRatio
"
SmoothScrollDurationToIntervalRatio
RelaxedAtomicInt32
200
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
lines
.
durationMaxMS
"
LineSmoothScrollMaxDurationMs
RelaxedAtomicInt32
150
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
lines
.
durationMinMS
"
LineSmoothScrollMinDurationMs
RelaxedAtomicInt32
150
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
mouseWheel
"
WheelSmoothScrollEnabled
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
mouseWheel
.
durationMaxMS
"
WheelSmoothScrollMaxDurationMs
RelaxedAtomicInt32
400
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
mouseWheel
.
durationMinMS
"
WheelSmoothScrollMinDurationMs
RelaxedAtomicInt32
200
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
other
.
durationMaxMS
"
OtherSmoothScrollMaxDurationMs
RelaxedAtomicInt32
150
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
other
.
durationMinMS
"
OtherSmoothScrollMinDurationMs
RelaxedAtomicInt32
150
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
pages
"
PageSmoothScrollEnabled
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
pages
.
durationMaxMS
"
PageSmoothScrollMaxDurationMs
RelaxedAtomicInt32
150
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
pages
.
durationMinMS
"
PageSmoothScrollMinDurationMs
RelaxedAtomicInt32
150
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
pixels
.
durationMaxMS
"
PixelSmoothScrollMaxDurationMs
RelaxedAtomicInt32
150
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
pixels
.
durationMinMS
"
PixelSmoothScrollMinDurationMs
RelaxedAtomicInt32
150
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
stopDecelerationWeighting
"
SmoothScrollStopDecelerationWeighting
AtomicFloat
0
.
4f
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
msdPhysics
.
enabled
"
SmoothScrollMSDPhysicsEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
msdPhysics
.
continuousMotionMaxDeltaMS
"
SmoothScrollMSDPhysicsContinuousMotionMaxDeltaMS
RelaxedAtomicInt32
120
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
msdPhysics
.
motionBeginSpringConstant
"
SmoothScrollMSDPhysicsMotionBeginSpringConstant
RelaxedAtomicInt32
1250
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
msdPhysics
.
slowdownMinDeltaMS
"
SmoothScrollMSDPhysicsSlowdownMinDeltaMS
RelaxedAtomicInt32
12
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
msdPhysics
.
slowdownMinDeltaRatio
"
SmoothScrollMSDPhysicsSlowdownMinDeltaRatio
AtomicFloat
1
.
3f
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
msdPhysics
.
slowdownSpringConstant
"
SmoothScrollMSDPhysicsSlowdownSpringConstant
RelaxedAtomicInt32
2000
)
;
VARCACHE_PREF
(
"
general
.
smoothScroll
.
msdPhysics
.
regularSpringConstant
"
SmoothScrollMSDPhysicsRegularSpringConstant
RelaxedAtomicInt32
1000
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
VARCACHE_PREF
(
"
gfx
.
compositor
.
override
.
clear
-
color
.
r
"
CompositorOverrideClearColorR
AtomicFloat
0
.
0f
)
;
VARCACHE_PREF
(
"
gfx
.
compositor
.
override
.
clear
-
color
.
g
"
CompositorOverrideClearColorG
AtomicFloat
0
.
0f
)
;
VARCACHE_PREF
(
"
gfx
.
compositor
.
override
.
clear
-
color
.
b
"
CompositorOverrideClearColorB
AtomicFloat
0
.
0f
)
;
VARCACHE_PREF
(
"
gfx
.
compositor
.
override
.
clear
-
color
.
a
"
CompositorOverrideClearColorA
AtomicFloat
0
.
0f
)
;
#
endif
VARCACHE_PREF
(
"
gfx
.
compositor
.
clearstate
"
CompositorClearState
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
compositor
.
glcontext
.
opaque
"
CompositorGLContextOpaque
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
canvas
.
max
-
size
"
MaxCanvasSize
RelaxedAtomicInt32
0x7fff
)
;
VARCACHE_PREF
(
"
gfx
.
color_management
.
enablev4
"
CMSEnableV4
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
color_management
.
mode
"
CMSMode
RelaxedAtomicInt32
-
1
)
;
VARCACHE_PREF
(
"
gfx
.
color_management
.
rendering_intent
"
CMSRenderingIntent
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
gfx
.
content
.
always
-
paint
"
AlwaysPaint
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
direct2d
.
destroy
-
dt
-
on
-
paintthread
"
Direct2DDestroyDTOnPaintThread
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
gfx
.
direct3d11
.
reuse
-
decoder
-
device
"
Direct3D11ReuseDecoderDevice
RelaxedAtomicInt32
-
1
)
;
VARCACHE_PREF
(
"
gfx
.
direct3d11
.
allow
-
keyed
-
mutex
"
Direct3D11AllowKeyedMutex
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
gfx
.
direct3d11
.
use
-
double
-
buffering
"
Direct3D11UseDoubleBuffering
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
downloadable_fonts
.
keep_color_bitmaps
"
KeepColorBitmaps
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
downloadable_fonts
.
validate_variation_tables
"
ValidateVariationTables
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
gfx
.
downloadable_fonts
.
otl_validation
"
ValidateOTLTables
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
gfx
.
draw
-
color
-
bars
"
CompositorDrawColorBars
RelaxedAtomicBool
false
)
;
#
if
defined
(
XP_MACOSX
)
VARCACHE_PREF
(
"
gfx
.
font_rendering
.
coretext
.
enabled
"
CoreTextEnabled
RelaxedAtomicBool
false
)
;
#
endif
VARCACHE_PREF
(
"
gfx
.
layerscope
.
enabled
"
LayerScopeEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
layerscope
.
port
"
LayerScopePort
RelaxedAtomicInt32
23456
)
;
VARCACHE_PREF
(
"
gfx
.
logging
.
painted
-
pixel
-
count
.
enabled
"
GfxLoggingPaintedPixelCountEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
partialpresent
.
force
"
PartialPresent
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
gfx
.
perf
-
warnings
.
enabled
"
PerfWarnings
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
testing
.
device
-
reset
"
DeviceResetForTesting
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
gfx
.
testing
.
device
-
fail
"
DeviceFailForTesting
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
ycbcr
.
accurate
-
conversion
"
YCbCrAccurateConversion
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
use
-
glx
-
texture
-
from
-
pixmap
"
UseGLXTextureFromPixmap
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
vsync
.
collect
-
scroll
-
transforms
"
CollectScrollTransforms
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
webrender
.
blob
-
images
"
WebRenderBlobImages
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
gfx
.
webrender
.
blob
.
invalidation
"
WebRenderBlobInvalidation
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
webrender
.
blob
.
paint
-
flashing
"
WebRenderBlobPaintFlashing
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
webrender
.
dl
.
dump
-
parent
"
WebRenderDLDumpParent
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
webrender
.
dl
.
dump
-
content
"
WebRenderDLDumpContent
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
webrender
.
highlight
-
painted
-
layers
"
WebRenderHighlightPaintedLayers
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
webrender
.
late
-
scenebuild
-
threshold
"
WebRenderLateSceneBuildThreshold
RelaxedAtomicInt32
4
)
;
VARCACHE_PREF
(
"
gfx
.
webrender
.
max
-
filter
-
ops
-
per
-
chain
"
WebRenderMaxFilterOpsPerChain
RelaxedAtomicUint32
64
)
;
VARCACHE_PREF
(
"
gfx
.
webrender
.
picture
-
caching
"
WebRenderPictureCaching
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gfx
.
webrender
.
start
-
debug
-
server
"
WebRenderStartDebugServer
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gl
.
allow
-
high
-
power
"
GLAllowHighPower
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
gl
.
ignore
-
dx
-
interop2
-
blacklist
"
IgnoreDXInterop2Blacklist
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gl
.
msaa
-
level
"
MSAALevel
RelaxedAtomicUint32
2
)
;
#
if
defined
(
XP_MACOSX
)
VARCACHE_PREF
(
"
gl
.
multithreaded
"
GLMultithreaded
RelaxedAtomicBool
false
)
;
#
endif
VARCACHE_PREF
(
"
gl
.
require
-
hardware
"
RequireHardwareGL
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
gl
.
use
-
tls
-
is
-
current
"
UseTLSIsCurrent
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
image
.
animated
.
decode
-
on
-
demand
.
threshold
-
kb
"
ImageAnimatedDecodeOnDemandThresholdKB
RelaxedAtomicUint32
20480
)
;
VARCACHE_PREF
(
"
image
.
animated
.
decode
-
on
-
demand
.
batch
-
size
"
ImageAnimatedDecodeOnDemandBatchSize
RelaxedAtomicUint32
6
)
;
VARCACHE_PREF
(
"
image
.
animated
.
decode
-
on
-
demand
.
recycle
"
ImageAnimatedDecodeOnDemandRecycle
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
image
.
animated
.
resume
-
from
-
last
-
displayed
"
ImageAnimatedResumeFromLastDisplayed
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
image
.
cache
.
factor2
.
threshold
-
surfaces
"
ImageCacheFactor2ThresholdSurfaces
RelaxedAtomicInt32
-
1
)
;
VARCACHE_PREF
(
"
image
.
cache
.
max
-
rasterized
-
svg
-
threshold
-
kb
"
ImageCacheMaxRasterizedSVGThresholdKB
RelaxedAtomicInt32
90
*
1024
)
;
VARCACHE_PREF
(
"
image
.
decode
-
immediately
.
enabled
"
ImageDecodeImmediatelyEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
image
.
downscale
-
during
-
decode
.
enabled
"
ImageDownscaleDuringDecodeEnabled
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
image
.
infer
-
src
-
animation
.
threshold
-
ms
"
ImageInferSrcAnimationThresholdMS
RelaxedAtomicUint32
2000
)
;
VARCACHE_PREF
(
"
image
.
layout_network_priority
"
ImageLayoutNetworkPriority
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
image
.
mem
.
discardable
"
ImageMemDiscardable
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
image
.
mem
.
animated
.
use_heap
"
ImageMemAnimatedUseHeap
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
image
.
mem
.
debug
-
reporting
"
ImageMemDebugReporting
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
image
.
mem
.
shared
"
ImageMemShared
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
image
.
mem
.
volatile
.
min_threshold_kb
"
ImageMemVolatileMinThresholdKB
RelaxedAtomicInt32
-
1
)
;
VARCACHE_PREF
(
"
image
.
webp
.
enabled
"
ImageWebPEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
acceleration
.
draw
-
fps
"
LayersDrawFPS
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
acceleration
.
draw
-
fps
.
print
-
histogram
"
FPSPrintHistogram
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
acceleration
.
draw
-
fps
.
write
-
to
-
file
"
WriteFPSToFile
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
advanced
.
basic
-
layer
.
enabled
"
LayersAdvancedBasicLayerEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
bench
.
enabled
"
LayersBenchEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
child
-
process
-
shutdown
"
ChildProcessShutdown
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
layers
.
deaa
.
enabled
"
LayersDEAAEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
draw
-
bigimage
-
borders
"
DrawBigImageBorders
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
draw
-
borders
"
DrawLayerBorders
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
draw
-
tile
-
borders
"
DrawTileBorders
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
draw
-
layer
-
info
"
DrawLayerInfo
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
dump
"
LayersDump
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
dump
-
texture
"
LayersDumpTexture
RelaxedAtomicBool
false
)
;
#
ifdef
MOZ_DUMP_PAINTING
VARCACHE_PREF
(
"
layers
.
dump
-
client
-
layers
"
DumpClientLayers
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
dump
-
decision
"
LayersDumpDecision
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
dump
-
host
-
layers
"
DumpHostLayers
RelaxedAtomicBool
false
)
;
#
endif
VARCACHE_PREF
(
"
layers
.
effect
.
contrast
"
LayersEffectContrast
AtomicFloat
0
.
0f
)
;
VARCACHE_PREF
(
"
layers
.
effect
.
grayscale
"
LayersEffectGrayscale
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
effect
.
invert
"
LayersEffectInvert
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
flash
-
borders
"
FlashLayerBorders
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
gpu
-
process
.
max_restarts
"
GPUProcessMaxRestarts
RelaxedAtomicInt32
1
)
;
VARCACHE_PREF
(
"
layers
.
gpu
-
process
.
max_restarts_with_decoder
"
GPUProcessMaxRestartsWithDecoder
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
layers
.
low
-
precision
-
buffer
"
UseLowPrecisionBuffer
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
low
-
precision
-
opacity
"
LowPrecisionOpacity
AtomicFloat
1
.
0f
)
;
VARCACHE_PREF
(
"
layers
.
low
-
precision
-
resolution
"
LowPrecisionResolution
AtomicFloat
0
.
25f
)
;
VARCACHE_PREF
(
"
layers
.
max
-
active
"
MaxActiveLayers
RelaxedAtomicInt32
-
1
)
;
VARCACHE_PREF
(
"
layers
.
mlgpu
.
enable
-
invalidation
"
AdvancedLayersUseInvalidation
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
layers
.
offmainthreadcomposition
.
frame
-
rate
"
LayersCompositionFrameRate
RelaxedAtomicInt32
-
1
)
;
VARCACHE_PREF
(
"
layers
.
omtp
.
dump
-
capture
"
LayersOMTPDumpCapture
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
omtp
.
release
-
capture
-
on
-
main
-
thread
"
LayersOMTPReleaseCaptureOnMainThread
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
orientation
.
sync
.
timeout
"
OrientationSyncMillis
RelaxedAtomicUint32
(
uint32_t
)
0
)
;
VARCACHE_PREF
(
"
layers
.
progressive
-
paint
"
ProgressivePaint
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
shared
-
buffer
-
provider
.
enabled
"
PersistentBufferProviderSharedEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
single
-
tile
.
enabled
"
LayersSingleTileEnabled
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
layers
.
force
-
synchronous
-
resize
"
LayersForceSynchronousResize
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
layers
.
tiles
.
retain
-
back
-
buffer
"
LayersTileRetainBackBuffer
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
layers
.
tiles
.
fade
-
in
.
enabled
"
LayerTileFadeInEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
tiles
.
fade
-
in
.
duration
-
ms
"
LayerTileFadeInDuration
RelaxedAtomicUint32
250
)
;
VARCACHE_PREF
(
"
layers
.
transaction
.
warning
-
ms
"
LayerTransactionWarning
RelaxedAtomicUint32
200
)
;
VARCACHE_PREF
(
"
layers
.
draw
-
mask
-
debug
"
DrawMaskLayer
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
geometry
.
opengl
.
enabled
"
OGLLayerGeometry
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
geometry
.
basic
.
enabled
"
BasicLayerGeometry
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layers
.
geometry
.
d3d11
.
enabled
"
D3D11LayerGeometry
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
animation
.
prerender
.
partial
"
PartiallyPrerenderAnimatedContent
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
animation
.
prerender
.
viewport
-
ratio
-
limit
-
x
"
AnimationPrerenderViewportRatioLimitX
AtomicFloat
1
.
125f
)
;
VARCACHE_PREF
(
"
layout
.
animation
.
prerender
.
viewport
-
ratio
-
limit
-
y
"
AnimationPrerenderViewportRatioLimitY
AtomicFloat
1
.
125f
)
;
VARCACHE_PREF
(
"
layout
.
animation
.
prerender
.
absolute
-
limit
-
x
"
AnimationPrerenderAbsoluteLimitX
RelaxedAtomicUint32
4096
)
;
VARCACHE_PREF
(
"
layout
.
animation
.
prerender
.
absolute
-
limit
-
y
"
AnimationPrerenderAbsoluteLimitY
RelaxedAtomicUint32
4096
)
;
VARCACHE_PREF
(
"
layout
.
css
.
paint
-
order
.
enabled
"
PaintOrderEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
behavior
.
damping
-
ratio
"
ScrollBehaviorDampingRatio
AtomicFloat
1
.
0f
)
;
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
behavior
.
enabled
"
ScrollBehaviorEnabled
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
behavior
.
spring
-
constant
"
ScrollBehaviorSpringConstant
AtomicFloat
250
.
0f
)
;
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
snap
.
prediction
-
max
-
velocity
"
ScrollSnapPredictionMaxVelocity
RelaxedAtomicInt32
2000
)
;
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
snap
.
prediction
-
sensitivity
"
ScrollSnapPredictionSensitivity
AtomicFloat
0
.
750f
)
;
VARCACHE_PREF
(
"
layout
.
css
.
scroll
-
snap
.
proximity
-
threshold
"
ScrollSnapProximityThreshold
RelaxedAtomicInt32
200
)
;
VARCACHE_PREF
(
"
layout
.
css
.
touch_action
.
enabled
"
TouchActionEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
display
-
list
.
build
-
twice
"
LayoutDisplayListBuildTwice
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
display
-
list
.
retain
"
LayoutRetainDisplayList
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
layout
.
display
-
list
.
retain
.
chrome
"
LayoutRetainDisplayListChrome
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
display
-
list
.
retain
.
verify
"
LayoutVerifyRetainDisplayList
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
display
-
list
.
retain
.
verify
.
order
"
LayoutVerifyRetainDisplayListOrder
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
display
-
list
.
rebuild
-
frame
-
limit
"
LayoutRebuildFrameLimit
RelaxedAtomicUint32
500
)
;
VARCACHE_PREF
(
"
layout
.
display
-
list
.
dump
"
LayoutDumpDisplayList
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
display
-
list
.
dump
-
content
"
LayoutDumpDisplayListContent
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
display
-
list
.
dump
-
parent
"
LayoutDumpDisplayListParent
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
display
-
list
.
show
-
rebuild
-
area
"
LayoutDisplayListShowArea
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
display
-
list
.
flatten
-
transform
"
LayoutFlattenTransform
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
layout
.
min
-
active
-
layer
-
size
"
LayoutMinActiveLayerSize
int
64
)
;
VARCACHE_PREF
(
"
layout
.
scroll
.
root
-
frame
-
containers
"
LayoutUseContainersForRootFrames
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
scrollbars
.
always
-
layerize
-
track
"
AlwaysLayerizeScrollbarTrackTestOnly
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
layout
.
smaller
-
painted
-
layers
"
LayoutSmallerPaintedLayers
RelaxedAtomicBool
false
)
;
#
ifdef
XP_WIN
VARCACHE_PREF
(
"
media
.
wmf
.
dxva
.
d3d11
.
enabled
"
PDMWMFAllowD3D11
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
media
.
wmf
.
dxva
.
max
-
videos
"
PDMWMFMaxDXVAVideos
RelaxedAtomicUint32
8
)
;
VARCACHE_PREF
(
"
media
.
wmf
.
use
-
nv12
-
format
"
PDMWMFUseNV12Format
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
media
.
wmf
.
force
.
allow
-
p010
-
format
"
PDMWMFForceAllowP010Format
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
media
.
wmf
.
low
-
latency
.
enabled
"
PDMWMFLowLatencyEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
media
.
wmf
.
low
-
latency
.
force
-
disabled
"
PDMWMFLowLatencyForceDisabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
media
.
wmf
.
skip
-
blacklist
"
PDMWMFSkipBlacklist
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
media
.
wmf
.
deblacklisting
-
for
-
telemetry
-
in
-
gpu
-
process
"
PDMWMFDeblacklistingForTelemetryInGPUProcess
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
media
.
wmf
.
amd
.
highres
.
enabled
"
PDMWMFAMDHighResEnabled
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
media
.
wmf
.
allow
-
unsupported
-
resolutions
"
PDMWMFAllowUnsupportedResolutions
RelaxedAtomicBool
false
)
;
#
endif
VARCACHE_PREF
(
"
mousewheel
.
acceleration
.
factor
"
MouseWheelAccelerationFactor
RelaxedAtomicInt32
-
1
)
;
VARCACHE_PREF
(
"
mousewheel
.
acceleration
.
start
"
MouseWheelAccelerationStart
RelaxedAtomicInt32
-
1
)
;
VARCACHE_PREF
(
"
mousewheel
.
system_scroll_override_on_root_content
.
enabled
"
MouseWheelHasRootScrollDeltaOverride
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
mousewheel
.
system_scroll_override_on_root_content
.
horizontal
.
factor
"
MouseWheelRootScrollHorizontalFactor
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
mousewheel
.
system_scroll_override_on_root_content
.
vertical
.
factor
"
MouseWheelRootScrollVerticalFactor
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
mousewheel
.
transaction
.
ignoremovedelay
"
MouseWheelIgnoreMoveDelayMs
RelaxedAtomicInt32
(
int32_t
)
100
)
;
VARCACHE_PREF
(
"
mousewheel
.
transaction
.
timeout
"
MouseWheelTransactionTimeoutMs
RelaxedAtomicInt32
(
int32_t
)
1500
)
;
VARCACHE_PREF
(
"
nglayout
.
debug
.
widget_update_flashing
"
WidgetUpdateFlashing
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
print
.
font
-
variations
-
as
-
paths
"
PrintFontVariationsAsPaths
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
privacy
.
resistFingerprinting
"
ResistFingerprinting
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
test
.
events
.
async
.
enabled
"
TestEventsAsyncEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
test
.
mousescroll
"
MouseScrollTestingEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
toolkit
.
scrollbox
.
horizontalScrollDistance
"
ToolkitHorizontalScrollDistance
RelaxedAtomicInt32
5
)
;
VARCACHE_PREF
(
"
toolkit
.
scrollbox
.
verticalScrollDistance
"
ToolkitVerticalScrollDistance
RelaxedAtomicInt32
3
)
;
VARCACHE_PREF
(
"
ui
.
click_hold_context_menus
.
delay
"
UiClickHoldContextMenusDelay
RelaxedAtomicInt32
500
)
;
VARCACHE_PREF
(
"
webgl
.
1
.
allow
-
core
-
profiles
"
WebGL1AllowCoreProfile
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
all
-
angle
-
options
"
WebGLAllANGLEOptions
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
angle
.
force
-
d3d11
"
WebGLANGLEForceD3D11
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
angle
.
try
-
d3d11
"
WebGLANGLETryD3D11
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
angle
.
force
-
warp
"
WebGLANGLEForceWARP
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
can
-
lose
-
context
-
in
-
foreground
"
WebGLCanLoseContextInForeground
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
webgl
.
default
-
low
-
power
"
WebGLDefaultLowPower
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
default
-
no
-
alpha
"
WebGLDefaultNoAlpha
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
disable
-
angle
"
WebGLDisableANGLE
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
disable
-
wgl
"
WebGLDisableWGL
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
disable
-
extensions
"
WebGLDisableExtensions
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
dxgl
.
enabled
"
WebGLDXGLEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
dxgl
.
needs
-
finish
"
WebGLDXGLNeedsFinish
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
disable
-
fail
-
if
-
major
-
performance
-
caveat
"
WebGLDisableFailIfMajorPerformanceCaveat
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
disable
-
DOM
-
blit
-
uploads
"
WebGLDisableDOMBlitUploads
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
disabled
"
WebGLDisabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
enable
-
draft
-
extensions
"
WebGLDraftExtensionsEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
enable
-
privileged
-
extensions
"
WebGLPrivilegedExtensionsEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
enable
-
surface
-
texture
"
WebGLSurfaceTextureEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
enable
-
webgl2
"
WebGL2Enabled
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
webgl
.
force
-
enabled
"
WebGLForceEnabled
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
force
-
index
-
validation
"
WebGLForceIndexValidation
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
webgl
.
lose
-
context
-
on
-
memory
-
pressure
"
WebGLLoseContextOnMemoryPressure
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
max
-
contexts
"
WebGLMaxContexts
RelaxedAtomicUint32
32
)
;
VARCACHE_PREF
(
"
webgl
.
max
-
contexts
-
per
-
principal
"
WebGLMaxContextsPerPrincipal
RelaxedAtomicUint32
16
)
;
VARCACHE_PREF
(
"
webgl
.
max
-
warnings
-
per
-
context
"
WebGLMaxWarningsPerContext
RelaxedAtomicUint32
32
)
;
VARCACHE_PREF
(
"
webgl
.
min_capability_mode
"
WebGLMinCapabilityMode
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
msaa
-
force
"
WebGLForceMSAA
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
msaa
-
samples
"
WebGLMsaaSamples
RelaxedAtomicUint32
4
)
;
VARCACHE_PREF
(
"
webgl
.
prefer
-
16bpp
"
WebGLPrefer16bpp
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
allow
-
immediate
-
queries
"
WebGLImmediateQueries
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
allow
-
fb
-
invalidation
"
WebGLFBInvalidation
RelaxedAtomicBool
false
)
;
VARCACHE_PREF
(
"
webgl
.
perf
.
max
-
warnings
"
WebGLMaxPerfWarnings
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
webgl
.
perf
.
max
-
acceptable
-
fb
-
status
-
invals
"
WebGLMaxAcceptableFBStatusInvals
RelaxedAtomicInt32
0
)
;
VARCACHE_PREF
(
"
webgl
.
perf
.
spew
-
frame
-
allocs
"
WebGLSpewFrameAllocs
RelaxedAtomicBool
true
)
;
VARCACHE_PREF
(
"
widget
.
window
-
transforms
.
disabled
"
WindowTransformsDisabled
RelaxedAtomicBool
false
)
;
