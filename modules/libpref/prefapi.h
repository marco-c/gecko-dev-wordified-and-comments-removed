#
ifndef
PREFAPI_H
#
define
PREFAPI_H
#
include
"
nscore
.
h
"
#
include
"
PLDHashTable
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
static
const
uint32_t
MAX_PREF_LENGTH
=
1
*
1024
*
1024
;
static
const
uint32_t
MAX_ADVISABLE_PREF_LENGTH
=
4
*
1024
;
typedef
union
{
char
*
stringVal
;
int32_t
intVal
;
bool
boolVal
;
}
PrefValue
;
void
PREF_Init
(
)
;
void
PREF_Cleanup
(
)
;
void
PREF_CleanupPrefs
(
)
;
enum
class
PrefType
{
Invalid
=
0
String
=
1
Int
=
2
Bool
=
3
}
;
class
PrefTypeFlags
{
public
:
PrefTypeFlags
(
)
:
mValue
(
AsInt
(
PrefType
:
:
Invalid
)
)
{
}
explicit
PrefTypeFlags
(
PrefType
aType
)
:
mValue
(
AsInt
(
aType
)
)
{
}
PrefTypeFlags
&
Reset
(
)
{
mValue
=
AsInt
(
PrefType
:
:
Invalid
)
;
return
*
this
;
}
bool
IsTypeValid
(
)
const
{
return
!
IsPrefType
(
PrefType
:
:
Invalid
)
;
}
bool
IsTypeString
(
)
const
{
return
IsPrefType
(
PrefType
:
:
String
)
;
}
bool
IsTypeInt
(
)
const
{
return
IsPrefType
(
PrefType
:
:
Int
)
;
}
bool
IsTypeBool
(
)
const
{
return
IsPrefType
(
PrefType
:
:
Bool
)
;
}
bool
IsPrefType
(
PrefType
type
)
const
{
return
GetPrefType
(
)
=
=
type
;
}
PrefTypeFlags
&
SetPrefType
(
PrefType
aType
)
{
mValue
=
mValue
-
AsInt
(
GetPrefType
(
)
)
+
AsInt
(
aType
)
;
return
*
this
;
}
PrefType
GetPrefType
(
)
const
{
return
(
PrefType
)
(
mValue
&
(
AsInt
(
PrefType
:
:
String
)
|
AsInt
(
PrefType
:
:
Int
)
|
AsInt
(
PrefType
:
:
Bool
)
)
)
;
}
bool
HasDefault
(
)
const
{
return
mValue
&
PREF_FLAG_HAS_DEFAULT
;
}
PrefTypeFlags
&
SetHasDefault
(
bool
aSetOrUnset
)
{
return
SetFlag
(
PREF_FLAG_HAS_DEFAULT
aSetOrUnset
)
;
}
bool
HasStickyDefault
(
)
const
{
return
mValue
&
PREF_FLAG_STICKY_DEFAULT
;
}
PrefTypeFlags
&
SetHasStickyDefault
(
bool
aSetOrUnset
)
{
return
SetFlag
(
PREF_FLAG_STICKY_DEFAULT
aSetOrUnset
)
;
}
bool
IsLocked
(
)
const
{
return
mValue
&
PREF_FLAG_LOCKED
;
}
PrefTypeFlags
&
SetLocked
(
bool
aSetOrUnset
)
{
return
SetFlag
(
PREF_FLAG_LOCKED
aSetOrUnset
)
;
}
bool
HasUserValue
(
)
const
{
return
mValue
&
PREF_FLAG_USERSET
;
}
PrefTypeFlags
&
SetHasUserValue
(
bool
aSetOrUnset
)
{
return
SetFlag
(
PREF_FLAG_USERSET
aSetOrUnset
)
;
}
private
:
static
uint16_t
AsInt
(
PrefType
aType
)
{
return
(
uint16_t
)
aType
;
}
PrefTypeFlags
&
SetFlag
(
uint16_t
aFlag
bool
aSetOrUnset
)
{
mValue
=
aSetOrUnset
?
mValue
|
aFlag
:
mValue
&
~
aFlag
;
return
*
this
;
}
enum
{
PREF_FLAG_LOCKED
=
4
PREF_FLAG_USERSET
=
8
PREF_FLAG_CONFIG
=
16
PREF_FLAG_REMOTE
=
32
PREF_FLAG_LILOCAL
=
64
PREF_FLAG_HAS_DEFAULT
=
128
PREF_FLAG_STICKY_DEFAULT
=
256
}
;
uint16_t
mValue
;
}
;
struct
PrefHashEntry
:
PLDHashEntryHdr
{
PrefTypeFlags
prefFlags
;
const
char
*
key
;
PrefValue
defaultPref
;
PrefValue
userPref
;
}
;
nsresult
PREF_SetCharPref
(
const
char
*
pref
const
char
*
value
bool
set_default
=
false
)
;
nsresult
PREF_SetIntPref
(
const
char
*
pref
int32_t
value
bool
set_default
=
false
)
;
nsresult
PREF_SetBoolPref
(
const
char
*
pref
bool
value
bool
set_default
=
false
)
;
bool
PREF_HasUserPref
(
const
char
*
pref_name
)
;
nsresult
PREF_GetIntPref
(
const
char
*
pref
int32_t
*
return_int
bool
get_default
)
;
nsresult
PREF_GetBoolPref
(
const
char
*
pref
bool
*
return_val
bool
get_default
)
;
nsresult
PREF_CopyCharPref
(
const
char
*
pref
char
*
*
return_buf
bool
get_default
)
;
bool
PREF_PrefIsLocked
(
const
char
*
pref_name
)
;
nsresult
PREF_LockPref
(
const
char
*
key
bool
lockIt
)
;
PrefType
PREF_GetPrefType
(
const
char
*
pref_name
)
;
nsresult
PREF_DeleteBranch
(
const
char
*
branch_name
)
;
nsresult
PREF_ClearUserPref
(
const
char
*
pref_name
)
;
nsresult
PREF_ClearAllUserPrefs
(
)
;
#
ifndef
have_PrefChangedFunc_typedef
typedef
void
(
*
PrefChangedFunc
)
(
const
char
*
void
*
)
;
#
define
have_PrefChangedFunc_typedef
#
endif
void
PREF_RegisterPriorityCallback
(
const
char
*
domain
PrefChangedFunc
callback
void
*
instance_data
)
;
void
PREF_RegisterCallback
(
const
char
*
domain
PrefChangedFunc
callback
void
*
instance_data
)
;
nsresult
PREF_UnregisterCallback
(
const
char
*
domain
PrefChangedFunc
callback
void
*
instance_data
)
;
void
PREF_ReaderCallback
(
void
*
closure
const
char
*
pref
PrefValue
value
PrefType
type
bool
isDefault
bool
isStickyDefault
)
;
typedef
void
(
*
PrefsDirtyFunc
)
(
)
;
void
PREF_SetDirtyCallback
(
PrefsDirtyFunc
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
