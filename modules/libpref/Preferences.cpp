#
include
<
ctype
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
base
/
basictypes
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
ArenaAllocatorExtensions
.
h
"
#
include
"
mozilla
/
ArenaAllocator
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
ContentPrefs
.
h
"
#
include
"
mozilla
/
dom
/
PContent
.
h
"
#
include
"
mozilla
/
HashFunctions
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
ModuleUtils
.
h
"
#
include
"
mozilla
/
Omnijar
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
ResultExtensions
.
h
"
#
include
"
mozilla
/
ScopeExit
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
SyncRunnable
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
mozilla
/
URLPreloader
.
h
"
#
include
"
mozilla
/
Variant
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCategoryManagerUtils
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
#
include
"
nsICategoryManager
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsIDirectoryService
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIOutputStream
.
h
"
#
include
"
nsIPrefBranch
.
h
"
#
include
"
nsIPrefLocalizedString
.
h
"
#
include
"
nsIRelativeFilePref
.
h
"
#
include
"
nsISafeOutputStream
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
include
"
nsIStringEnumerator
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
#
include
"
nsIZipReader
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsQuickSort
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsUTF8Utils
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsXPCOMCID
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
nsZipArchive
.
h
"
#
include
"
plbase64
.
h
"
#
include
"
PLDHashTable
.
h
"
#
include
"
plstr
.
h
"
#
include
"
prlink
.
h
"
#
ifdef
MOZ_CRASHREPORTER
#
include
"
nsICrashReporter
.
h
"
#
endif
#
ifdef
XP_WIN
#
include
"
windows
.
h
"
#
endif
using
namespace
mozilla
;
#
ifdef
DEBUG
#
define
ENSURE_MAIN_PROCESS
(
func
pref
)
\
do
{
\
if
(
MOZ_UNLIKELY
(
!
XRE_IsParentProcess
(
)
)
)
{
\
nsPrintfCString
msg
(
\
"
ENSURE_MAIN_PROCESS
:
called
%
s
on
%
s
in
a
non
-
main
process
"
\
func
\
pref
)
;
\
NS_ERROR
(
msg
.
get
(
)
)
;
\
return
NS_ERROR_NOT_AVAILABLE
;
\
}
\
}
while
(
0
)
#
define
ENSURE_MAIN_PROCESS_WITH_WARNING
(
func
pref
)
\
do
{
\
if
(
MOZ_UNLIKELY
(
!
XRE_IsParentProcess
(
)
)
)
{
\
nsPrintfCString
msg
(
\
"
ENSURE_MAIN_PROCESS
:
called
%
s
on
%
s
in
a
non
-
main
process
"
\
func
\
pref
)
;
\
NS_WARNING
(
msg
.
get
(
)
)
;
\
return
NS_ERROR_NOT_AVAILABLE
;
\
}
\
}
while
(
0
)
#
else
#
define
ENSURE_MAIN_PROCESS
(
func
pref
)
\
if
(
MOZ_UNLIKELY
(
!
XRE_IsParentProcess
(
)
)
)
{
\
return
NS_ERROR_NOT_AVAILABLE
;
\
}
#
define
ENSURE_MAIN_PROCESS_WITH_WARNING
(
func
pref
)
\
if
(
MOZ_UNLIKELY
(
!
XRE_IsParentProcess
(
)
)
)
{
\
return
NS_ERROR_NOT_AVAILABLE
;
\
}
#
endif
struct
PrefHashEntry
;
typedef
nsTArray
<
mozilla
:
:
UniqueFreePtr
<
char
>
>
PrefSaveData
;
static
PrefHashEntry
*
pref_HashTableLookup
(
const
char
*
aKey
)
;
static
const
uint32_t
MAX_PREF_LENGTH
=
1
*
1024
*
1024
;
static
const
uint32_t
MAX_ADVISABLE_PREF_LENGTH
=
4
*
1024
;
union
PrefValue
{
char
*
mStringVal
;
int32_t
mIntVal
;
bool
mBoolVal
;
}
;
enum
class
PrefType
{
Invalid
=
0
String
=
1
Int
=
2
Bool
=
3
}
;
class
PrefTypeFlags
{
public
:
PrefTypeFlags
(
)
:
mValue
(
AsInt
(
PrefType
:
:
Invalid
)
)
{
}
explicit
PrefTypeFlags
(
PrefType
aType
)
:
mValue
(
AsInt
(
aType
)
)
{
}
PrefTypeFlags
&
Reset
(
)
{
mValue
=
AsInt
(
PrefType
:
:
Invalid
)
;
return
*
this
;
}
bool
IsTypeValid
(
)
const
{
return
!
IsPrefType
(
PrefType
:
:
Invalid
)
;
}
bool
IsTypeString
(
)
const
{
return
IsPrefType
(
PrefType
:
:
String
)
;
}
bool
IsTypeInt
(
)
const
{
return
IsPrefType
(
PrefType
:
:
Int
)
;
}
bool
IsTypeBool
(
)
const
{
return
IsPrefType
(
PrefType
:
:
Bool
)
;
}
bool
IsPrefType
(
PrefType
type
)
const
{
return
GetPrefType
(
)
=
=
type
;
}
PrefTypeFlags
&
SetPrefType
(
PrefType
aType
)
{
mValue
=
mValue
-
AsInt
(
GetPrefType
(
)
)
+
AsInt
(
aType
)
;
return
*
this
;
}
PrefType
GetPrefType
(
)
const
{
return
(
PrefType
)
(
mValue
&
(
AsInt
(
PrefType
:
:
String
)
|
AsInt
(
PrefType
:
:
Int
)
|
AsInt
(
PrefType
:
:
Bool
)
)
)
;
}
bool
HasDefault
(
)
const
{
return
mValue
&
PREF_FLAG_HAS_DEFAULT
;
}
PrefTypeFlags
&
SetHasDefault
(
bool
aSetOrUnset
)
{
return
SetFlag
(
PREF_FLAG_HAS_DEFAULT
aSetOrUnset
)
;
}
bool
HasStickyDefault
(
)
const
{
return
mValue
&
PREF_FLAG_STICKY_DEFAULT
;
}
PrefTypeFlags
&
SetHasStickyDefault
(
bool
aSetOrUnset
)
{
return
SetFlag
(
PREF_FLAG_STICKY_DEFAULT
aSetOrUnset
)
;
}
bool
IsLocked
(
)
const
{
return
mValue
&
PREF_FLAG_LOCKED
;
}
PrefTypeFlags
&
SetLocked
(
bool
aSetOrUnset
)
{
return
SetFlag
(
PREF_FLAG_LOCKED
aSetOrUnset
)
;
}
bool
HasUserValue
(
)
const
{
return
mValue
&
PREF_FLAG_USERSET
;
}
PrefTypeFlags
&
SetHasUserValue
(
bool
aSetOrUnset
)
{
return
SetFlag
(
PREF_FLAG_USERSET
aSetOrUnset
)
;
}
private
:
static
uint16_t
AsInt
(
PrefType
aType
)
{
return
(
uint16_t
)
aType
;
}
PrefTypeFlags
&
SetFlag
(
uint16_t
aFlag
bool
aSetOrUnset
)
{
mValue
=
aSetOrUnset
?
mValue
|
aFlag
:
mValue
&
~
aFlag
;
return
*
this
;
}
enum
{
PREF_FLAG_LOCKED
=
4
PREF_FLAG_USERSET
=
8
PREF_FLAG_HAS_DEFAULT
=
16
PREF_FLAG_STICKY_DEFAULT
=
32
}
;
uint16_t
mValue
;
}
;
struct
PrefHashEntry
:
PLDHashEntryHdr
{
PrefTypeFlags
mPrefFlags
;
const
char
*
mKey
;
PrefValue
mDefaultPref
;
PrefValue
mUserPref
;
}
;
static
nsresult
PREF_ClearUserPref
(
const
char
*
aPrefName
)
;
static
void
ClearPrefEntry
(
PLDHashTable
*
aTable
PLDHashEntryHdr
*
aEntry
)
{
auto
pref
=
static_cast
<
PrefHashEntry
*
>
(
aEntry
)
;
if
(
pref
-
>
mPrefFlags
.
IsTypeString
(
)
)
{
if
(
pref
-
>
mDefaultPref
.
mStringVal
)
{
free
(
pref
-
>
mDefaultPref
.
mStringVal
)
;
}
if
(
pref
-
>
mUserPref
.
mStringVal
)
{
free
(
pref
-
>
mUserPref
.
mStringVal
)
;
}
}
pref
-
>
mKey
=
nullptr
;
memset
(
aEntry
0
aTable
-
>
EntrySize
(
)
)
;
}
static
bool
MatchPrefEntry
(
const
PLDHashEntryHdr
*
aEntry
const
void
*
aKey
)
{
auto
prefEntry
=
static_cast
<
const
PrefHashEntry
*
>
(
aEntry
)
;
if
(
prefEntry
-
>
mKey
=
=
aKey
)
{
return
true
;
}
if
(
!
prefEntry
-
>
mKey
|
|
!
aKey
)
{
return
false
;
}
auto
otherKey
=
static_cast
<
const
char
*
>
(
aKey
)
;
return
(
strcmp
(
prefEntry
-
>
mKey
otherKey
)
=
=
0
)
;
}
struct
CallbackNode
{
char
*
mDomain
;
PrefChangedFunc
mFunc
;
void
*
mData
;
CallbackNode
*
mNext
;
}
;
static
PLDHashTable
*
gHashTable
;
static
ArenaAllocator
<
8192
4
>
gPrefNameArena
;
static
CallbackNode
*
gFirstCallback
=
nullptr
;
static
CallbackNode
*
gLastPriorityNode
=
nullptr
;
static
bool
gIsAnyPrefLocked
=
false
;
static
bool
gCallbacksInProgress
=
false
;
static
bool
gShouldCleanupDeadNodes
=
false
;
static
PLDHashTableOps
pref_HashTableOps
=
{
PLDHashTable
:
:
HashStringKey
MatchPrefEntry
PLDHashTable
:
:
MoveEntryStub
ClearPrefEntry
nullptr
}
;
static
bool
pref_ValueChanged
(
PrefValue
aOldValue
PrefValue
aNewValue
PrefType
aType
)
;
static
nsresult
pref_DoCallback
(
const
char
*
aChangedPref
)
;
enum
{
kPrefSetDefault
=
1
kPrefForceSet
=
2
kPrefStickyDefault
=
4
}
;
static
nsresult
pref_HashPref
(
const
char
*
aKey
PrefValue
aValue
PrefType
aType
uint32_t
aFlags
)
;
#
define
PREF_HASHTABLE_INITIAL_LENGTH
1024
static
void
PREF_Init
(
)
{
if
(
!
gHashTable
)
{
gHashTable
=
new
PLDHashTable
(
&
pref_HashTableOps
sizeof
(
PrefHashEntry
)
PREF_HASHTABLE_INITIAL_LENGTH
)
;
}
}
static
void
PREF_CleanupPrefs
(
)
{
if
(
gHashTable
)
{
delete
gHashTable
;
gHashTable
=
nullptr
;
gPrefNameArena
.
Clear
(
)
;
}
}
static
void
PREF_Cleanup
(
)
{
NS_ASSERTION
(
!
gCallbacksInProgress
"
PREF_Cleanup
was
called
while
gCallbacksInProgress
is
true
!
"
)
;
CallbackNode
*
node
=
gFirstCallback
;
CallbackNode
*
next_node
;
while
(
node
)
{
next_node
=
node
-
>
mNext
;
free
(
node
-
>
mDomain
)
;
free
(
node
)
;
node
=
next_node
;
}
gLastPriorityNode
=
gFirstCallback
=
nullptr
;
PREF_CleanupPrefs
(
)
;
}
static
void
StrEscape
(
const
char
*
aOriginal
nsCString
&
aResult
)
{
const
char
*
p
;
if
(
aOriginal
=
=
nullptr
)
{
return
;
}
for
(
p
=
aOriginal
;
*
p
;
+
+
p
)
{
switch
(
*
p
)
{
case
'
\
n
'
:
aResult
.
AppendLiteral
(
"
\
\
n
"
)
;
break
;
case
'
\
r
'
:
aResult
.
AppendLiteral
(
"
\
\
r
"
)
;
break
;
case
'
\
\
'
:
aResult
.
AppendLiteral
(
"
\
\
\
\
"
)
;
break
;
case
'
\
"
'
:
aResult
.
AppendLiteral
(
"
\
\
\
"
"
)
;
break
;
default
:
aResult
.
Append
(
*
p
)
;
break
;
}
}
}
static
nsresult
PREF_SetCharPref
(
const
char
*
aPrefName
const
char
*
aValue
bool
aSetDefault
)
{
if
(
strlen
(
aValue
)
>
MAX_PREF_LENGTH
)
{
return
NS_ERROR_ILLEGAL_VALUE
;
}
PrefValue
pref
;
pref
.
mStringVal
=
const_cast
<
char
*
>
(
aValue
)
;
return
pref_HashPref
(
aPrefName
pref
PrefType
:
:
String
aSetDefault
?
kPrefSetDefault
:
0
)
;
}
static
nsresult
PREF_SetIntPref
(
const
char
*
aPrefName
int32_t
aValue
bool
aSetDefault
)
{
PrefValue
pref
;
pref
.
mIntVal
=
aValue
;
return
pref_HashPref
(
aPrefName
pref
PrefType
:
:
Int
aSetDefault
?
kPrefSetDefault
:
0
)
;
}
static
nsresult
PREF_SetBoolPref
(
const
char
*
aPrefName
bool
aValue
bool
aSetDefault
)
{
PrefValue
pref
;
pref
.
mBoolVal
=
aValue
;
return
pref_HashPref
(
aPrefName
pref
PrefType
:
:
Bool
aSetDefault
?
kPrefSetDefault
:
0
)
;
}
enum
WhichValue
{
DEFAULT_VALUE
USER_VALUE
}
;
static
nsresult
SetPrefValue
(
const
char
*
aPrefName
const
dom
:
:
PrefValue
&
aValue
WhichValue
aWhich
)
{
bool
setDefault
=
(
aWhich
=
=
DEFAULT_VALUE
)
;
switch
(
aValue
.
type
(
)
)
{
case
dom
:
:
PrefValue
:
:
TnsCString
:
return
PREF_SetCharPref
(
aPrefName
aValue
.
get_nsCString
(
)
.
get
(
)
setDefault
)
;
case
dom
:
:
PrefValue
:
:
Tint32_t
:
return
PREF_SetIntPref
(
aPrefName
aValue
.
get_int32_t
(
)
setDefault
)
;
case
dom
:
:
PrefValue
:
:
Tbool
:
return
PREF_SetBoolPref
(
aPrefName
aValue
.
get_bool
(
)
setDefault
)
;
default
:
MOZ_CRASH
(
)
;
}
}
static
nsresult
pref_SetPref
(
const
dom
:
:
PrefSetting
&
aPref
)
{
const
char
*
prefName
=
aPref
.
name
(
)
.
get
(
)
;
const
dom
:
:
MaybePrefValue
&
defaultValue
=
aPref
.
defaultValue
(
)
;
const
dom
:
:
MaybePrefValue
&
userValue
=
aPref
.
userValue
(
)
;
nsresult
rv
;
if
(
defaultValue
.
type
(
)
=
=
dom
:
:
MaybePrefValue
:
:
TPrefValue
)
{
rv
=
SetPrefValue
(
prefName
defaultValue
.
get_PrefValue
(
)
DEFAULT_VALUE
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
}
if
(
userValue
.
type
(
)
=
=
dom
:
:
MaybePrefValue
:
:
TPrefValue
)
{
rv
=
SetPrefValue
(
prefName
userValue
.
get_PrefValue
(
)
USER_VALUE
)
;
}
else
{
rv
=
PREF_ClearUserPref
(
prefName
)
;
}
return
rv
;
}
static
PrefSaveData
pref_savePrefs
(
PLDHashTable
*
aTable
)
{
PrefSaveData
savedPrefs
(
aTable
-
>
EntryCount
(
)
)
;
for
(
auto
iter
=
aTable
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
pref
=
static_cast
<
PrefHashEntry
*
>
(
iter
.
Get
(
)
)
;
nsAutoCString
prefValue
;
nsAutoCString
prefPrefix
;
prefPrefix
.
AssignLiteral
(
"
user_pref
(
\
"
"
)
;
PrefValue
*
sourcePref
;
if
(
pref
-
>
mPrefFlags
.
HasUserValue
(
)
&
&
(
pref_ValueChanged
(
pref
-
>
mDefaultPref
pref
-
>
mUserPref
pref
-
>
mPrefFlags
.
GetPrefType
(
)
)
|
|
!
pref
-
>
mPrefFlags
.
HasDefault
(
)
|
|
pref
-
>
mPrefFlags
.
HasStickyDefault
(
)
)
)
{
sourcePref
=
&
pref
-
>
mUserPref
;
}
else
{
continue
;
}
if
(
pref
-
>
mPrefFlags
.
IsTypeString
(
)
)
{
prefValue
=
'
\
"
'
;
StrEscape
(
sourcePref
-
>
mStringVal
prefValue
)
;
prefValue
+
=
'
\
"
'
;
}
else
if
(
pref
-
>
mPrefFlags
.
IsTypeInt
(
)
)
{
prefValue
.
AppendInt
(
sourcePref
-
>
mIntVal
)
;
}
else
if
(
pref
-
>
mPrefFlags
.
IsTypeBool
(
)
)
{
prefValue
=
(
sourcePref
-
>
mBoolVal
)
?
"
true
"
:
"
false
"
;
}
nsAutoCString
prefName
;
StrEscape
(
pref
-
>
mKey
prefName
)
;
savedPrefs
.
AppendElement
(
)
-
>
reset
(
ToNewCString
(
prefPrefix
+
prefName
+
NS_LITERAL_CSTRING
(
"
\
"
"
)
+
prefValue
+
NS_LITERAL_CSTRING
(
"
)
;
"
)
)
)
;
}
return
savedPrefs
;
}
static
bool
pref_EntryHasAdvisablySizedValues
(
PrefHashEntry
*
aHashEntry
)
{
if
(
aHashEntry
-
>
mPrefFlags
.
GetPrefType
(
)
!
=
PrefType
:
:
String
)
{
return
true
;
}
char
*
stringVal
;
if
(
aHashEntry
-
>
mPrefFlags
.
HasDefault
(
)
)
{
stringVal
=
aHashEntry
-
>
mDefaultPref
.
mStringVal
;
if
(
strlen
(
stringVal
)
>
MAX_ADVISABLE_PREF_LENGTH
)
{
return
false
;
}
}
if
(
aHashEntry
-
>
mPrefFlags
.
HasUserValue
(
)
)
{
stringVal
=
aHashEntry
-
>
mUserPref
.
mStringVal
;
if
(
strlen
(
stringVal
)
>
MAX_ADVISABLE_PREF_LENGTH
)
{
return
false
;
}
}
return
true
;
}
static
void
GetPrefValueFromEntry
(
PrefHashEntry
*
aHashEntry
dom
:
:
PrefSetting
*
aPref
WhichValue
aWhich
)
{
PrefValue
*
value
;
dom
:
:
PrefValue
*
settingValue
;
if
(
aWhich
=
=
USER_VALUE
)
{
value
=
&
aHashEntry
-
>
mUserPref
;
aPref
-
>
userValue
(
)
=
dom
:
:
PrefValue
(
)
;
settingValue
=
&
aPref
-
>
userValue
(
)
.
get_PrefValue
(
)
;
}
else
{
value
=
&
aHashEntry
-
>
mDefaultPref
;
aPref
-
>
defaultValue
(
)
=
dom
:
:
PrefValue
(
)
;
settingValue
=
&
aPref
-
>
defaultValue
(
)
.
get_PrefValue
(
)
;
}
switch
(
aHashEntry
-
>
mPrefFlags
.
GetPrefType
(
)
)
{
case
PrefType
:
:
String
:
*
settingValue
=
nsDependentCString
(
value
-
>
mStringVal
)
;
return
;
case
PrefType
:
:
Int
:
*
settingValue
=
value
-
>
mIntVal
;
return
;
case
PrefType
:
:
Bool
:
*
settingValue
=
!
!
value
-
>
mBoolVal
;
return
;
default
:
MOZ_CRASH
(
)
;
}
}
static
void
pref_GetPrefFromEntry
(
PrefHashEntry
*
aHashEntry
dom
:
:
PrefSetting
*
aPref
)
{
aPref
-
>
name
(
)
=
aHashEntry
-
>
mKey
;
if
(
aHashEntry
-
>
mPrefFlags
.
HasDefault
(
)
)
{
GetPrefValueFromEntry
(
aHashEntry
aPref
DEFAULT_VALUE
)
;
}
else
{
aPref
-
>
defaultValue
(
)
=
null_t
(
)
;
}
if
(
aHashEntry
-
>
mPrefFlags
.
HasUserValue
(
)
)
{
GetPrefValueFromEntry
(
aHashEntry
aPref
USER_VALUE
)
;
}
else
{
aPref
-
>
userValue
(
)
=
null_t
(
)
;
}
MOZ_ASSERT
(
aPref
-
>
defaultValue
(
)
.
type
(
)
=
=
dom
:
:
MaybePrefValue
:
:
Tnull_t
|
|
aPref
-
>
userValue
(
)
.
type
(
)
=
=
dom
:
:
MaybePrefValue
:
:
Tnull_t
|
|
(
aPref
-
>
defaultValue
(
)
.
get_PrefValue
(
)
.
type
(
)
=
=
aPref
-
>
userValue
(
)
.
get_PrefValue
(
)
.
type
(
)
)
)
;
}
static
bool
PREF_HasUserPref
(
const
char
*
aPrefName
)
{
if
(
!
gHashTable
)
{
return
false
;
}
PrefHashEntry
*
pref
=
pref_HashTableLookup
(
aPrefName
)
;
return
pref
&
&
pref
-
>
mPrefFlags
.
HasUserValue
(
)
;
}
static
nsresult
PREF_CopyCharPref
(
const
char
*
aPrefName
char
*
*
aValueOut
bool
aGetDefault
)
{
if
(
!
gHashTable
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsresult
rv
=
NS_ERROR_UNEXPECTED
;
char
*
stringVal
;
PrefHashEntry
*
pref
=
pref_HashTableLookup
(
aPrefName
)
;
if
(
pref
&
&
pref
-
>
mPrefFlags
.
IsTypeString
(
)
)
{
if
(
aGetDefault
|
|
pref
-
>
mPrefFlags
.
IsLocked
(
)
|
|
!
pref
-
>
mPrefFlags
.
HasUserValue
(
)
)
{
stringVal
=
pref
-
>
mDefaultPref
.
mStringVal
;
}
else
{
stringVal
=
pref
-
>
mUserPref
.
mStringVal
;
}
if
(
stringVal
)
{
*
aValueOut
=
moz_xstrdup
(
stringVal
)
;
rv
=
NS_OK
;
}
}
return
rv
;
}
static
nsresult
PREF_GetIntPref
(
const
char
*
aPrefName
int32_t
*
aValueOut
bool
aGetDefault
)
{
if
(
!
gHashTable
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsresult
rv
=
NS_ERROR_UNEXPECTED
;
PrefHashEntry
*
pref
=
pref_HashTableLookup
(
aPrefName
)
;
if
(
pref
&
&
pref
-
>
mPrefFlags
.
IsTypeInt
(
)
)
{
if
(
aGetDefault
|
|
pref
-
>
mPrefFlags
.
IsLocked
(
)
|
|
!
pref
-
>
mPrefFlags
.
HasUserValue
(
)
)
{
int32_t
tempInt
=
pref
-
>
mDefaultPref
.
mIntVal
;
if
(
!
pref
-
>
mPrefFlags
.
HasDefault
(
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
*
aValueOut
=
tempInt
;
}
else
{
*
aValueOut
=
pref
-
>
mUserPref
.
mIntVal
;
}
rv
=
NS_OK
;
}
return
rv
;
}
static
nsresult
PREF_GetBoolPref
(
const
char
*
aPrefName
bool
*
aValueOut
bool
aGetDefault
)
{
if
(
!
gHashTable
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsresult
rv
=
NS_ERROR_UNEXPECTED
;
PrefHashEntry
*
pref
=
pref_HashTableLookup
(
aPrefName
)
;
if
(
pref
&
&
pref
-
>
mPrefFlags
.
IsTypeBool
(
)
)
{
if
(
aGetDefault
|
|
pref
-
>
mPrefFlags
.
IsLocked
(
)
|
|
!
pref
-
>
mPrefFlags
.
HasUserValue
(
)
)
{
bool
tempBool
=
pref
-
>
mDefaultPref
.
mBoolVal
;
if
(
pref
-
>
mPrefFlags
.
HasDefault
(
)
)
{
*
aValueOut
=
tempBool
;
rv
=
NS_OK
;
}
}
else
{
*
aValueOut
=
pref
-
>
mUserPref
.
mBoolVal
;
rv
=
NS_OK
;
}
}
return
rv
;
}
static
nsresult
PREF_DeleteBranch
(
const
char
*
aBranchName
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
size_t
len
=
strlen
(
aBranchName
)
;
if
(
!
gHashTable
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
nsAutoCString
branch_dot
(
aBranchName
)
;
if
(
len
>
1
&
&
aBranchName
[
len
-
1
]
!
=
'
.
'
)
{
branch_dot
+
=
'
.
'
;
}
const
char
*
to_delete
=
branch_dot
.
get
(
)
;
MOZ_ASSERT
(
to_delete
)
;
len
=
strlen
(
to_delete
)
;
for
(
auto
iter
=
gHashTable
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
entry
=
static_cast
<
PrefHashEntry
*
>
(
iter
.
Get
(
)
)
;
if
(
PL_strncmp
(
entry
-
>
mKey
to_delete
len
)
=
=
0
|
|
(
len
-
1
=
=
strlen
(
entry
-
>
mKey
)
&
&
PL_strncmp
(
entry
-
>
mKey
to_delete
len
-
1
)
=
=
0
)
)
{
iter
.
Remove
(
)
;
}
}
Preferences
:
:
HandleDirty
(
)
;
return
NS_OK
;
}
static
nsresult
PREF_ClearUserPref
(
const
char
*
aPrefName
)
{
if
(
!
gHashTable
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
PrefHashEntry
*
pref
=
pref_HashTableLookup
(
aPrefName
)
;
if
(
pref
&
&
pref
-
>
mPrefFlags
.
HasUserValue
(
)
)
{
pref
-
>
mPrefFlags
.
SetHasUserValue
(
false
)
;
if
(
!
pref
-
>
mPrefFlags
.
HasDefault
(
)
)
{
gHashTable
-
>
RemoveEntry
(
pref
)
;
}
pref_DoCallback
(
aPrefName
)
;
Preferences
:
:
HandleDirty
(
)
;
}
return
NS_OK
;
}
static
nsresult
PREF_ClearAllUserPrefs
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
gHashTable
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
std
:
:
vector
<
std
:
:
string
>
prefStrings
;
for
(
auto
iter
=
gHashTable
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
pref
=
static_cast
<
PrefHashEntry
*
>
(
iter
.
Get
(
)
)
;
if
(
pref
-
>
mPrefFlags
.
HasUserValue
(
)
)
{
prefStrings
.
push_back
(
std
:
:
string
(
pref
-
>
mKey
)
)
;
pref
-
>
mPrefFlags
.
SetHasUserValue
(
false
)
;
if
(
!
pref
-
>
mPrefFlags
.
HasDefault
(
)
)
{
iter
.
Remove
(
)
;
}
}
}
for
(
std
:
:
string
&
prefString
:
prefStrings
)
{
pref_DoCallback
(
prefString
.
c_str
(
)
)
;
}
Preferences
:
:
HandleDirty
(
)
;
return
NS_OK
;
}
static
nsresult
PREF_LockPref
(
const
char
*
aKey
bool
aLockIt
)
{
if
(
!
gHashTable
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
PrefHashEntry
*
pref
=
pref_HashTableLookup
(
aKey
)
;
if
(
!
pref
)
{
return
NS_ERROR_UNEXPECTED
;
}
if
(
aLockIt
)
{
if
(
!
pref
-
>
mPrefFlags
.
IsLocked
(
)
)
{
pref
-
>
mPrefFlags
.
SetLocked
(
true
)
;
gIsAnyPrefLocked
=
true
;
pref_DoCallback
(
aKey
)
;
}
}
else
if
(
pref
-
>
mPrefFlags
.
IsLocked
(
)
)
{
pref
-
>
mPrefFlags
.
SetLocked
(
false
)
;
pref_DoCallback
(
aKey
)
;
}
return
NS_OK
;
}
static
bool
pref_ValueChanged
(
PrefValue
aOldValue
PrefValue
aNewValue
PrefType
aType
)
{
bool
changed
=
true
;
switch
(
aType
)
{
case
PrefType
:
:
String
:
if
(
aOldValue
.
mStringVal
&
&
aNewValue
.
mStringVal
)
{
changed
=
(
strcmp
(
aOldValue
.
mStringVal
aNewValue
.
mStringVal
)
!
=
0
)
;
}
break
;
case
PrefType
:
:
Int
:
changed
=
aOldValue
.
mIntVal
!
=
aNewValue
.
mIntVal
;
break
;
case
PrefType
:
:
Bool
:
changed
=
aOldValue
.
mBoolVal
!
=
aNewValue
.
mBoolVal
;
break
;
case
PrefType
:
:
Invalid
:
default
:
changed
=
false
;
break
;
}
return
changed
;
}
static
PrefTypeFlags
pref_SetValue
(
PrefValue
*
aExistingValue
PrefTypeFlags
aFlags
PrefValue
aNewValue
PrefType
aNewType
)
{
if
(
aFlags
.
IsTypeString
(
)
&
&
aExistingValue
-
>
mStringVal
)
{
free
(
aExistingValue
-
>
mStringVal
)
;
}
aFlags
.
SetPrefType
(
aNewType
)
;
if
(
aFlags
.
IsTypeString
(
)
)
{
MOZ_ASSERT
(
aNewValue
.
mStringVal
)
;
aExistingValue
-
>
mStringVal
=
aNewValue
.
mStringVal
?
moz_xstrdup
(
aNewValue
.
mStringVal
)
:
nullptr
;
}
else
{
*
aExistingValue
=
aNewValue
;
}
return
aFlags
;
}
#
ifdef
DEBUG
static
pref_initPhase
gPhase
=
START
;
struct
StringComparator
{
const
char
*
mKey
;
explicit
StringComparator
(
const
char
*
aKey
)
:
mKey
(
aKey
)
{
}
int
operator
(
)
(
const
char
*
aString
)
const
{
return
strcmp
(
mKey
aString
)
;
}
}
;
static
bool
InInitArray
(
const
char
*
aKey
)
{
size_t
prefsLen
;
size_t
found
;
const
char
*
*
list
=
mozilla
:
:
dom
:
:
ContentPrefs
:
:
GetContentPrefs
(
&
prefsLen
)
;
return
BinarySearchIf
(
list
0
prefsLen
StringComparator
(
aKey
)
&
found
)
;
}
static
bool
gWatchingPref
=
false
;
class
WatchingPrefRAII
{
public
:
WatchingPrefRAII
(
)
{
gWatchingPref
=
true
;
}
~
WatchingPrefRAII
(
)
{
gWatchingPref
=
false
;
}
}
;
#
define
WATCHING_PREF_RAII
(
)
WatchingPrefRAII
watchingPrefRAII
#
else
#
define
WATCHING_PREF_RAII
(
)
#
endif
static
PrefHashEntry
*
pref_HashTableLookup
(
const
char
*
aKey
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
|
|
mozilla
:
:
ServoStyleSet
:
:
IsInServoTraversal
(
)
)
;
MOZ_ASSERT
(
(
!
XRE_IsContentProcess
(
)
|
|
gPhase
!
=
START
)
"
pref
access
before
commandline
prefs
set
"
)
;
#
ifdef
DEBUG
if
(
XRE_IsContentProcess
(
)
&
&
gPhase
<
=
END_INIT_PREFS
&
&
!
gWatchingPref
&
&
!
InInitArray
(
aKey
)
)
{
MOZ_CRASH_UNSAFE_PRINTF
(
"
accessing
non
-
init
pref
%
s
before
the
rest
of
the
prefs
are
sent
"
aKey
)
;
}
#
endif
return
static_cast
<
PrefHashEntry
*
>
(
gHashTable
-
>
Search
(
aKey
)
)
;
}
static
nsresult
pref_HashPref
(
const
char
*
aKey
PrefValue
aValue
PrefType
aType
uint32_t
aFlags
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
gHashTable
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
auto
pref
=
static_cast
<
PrefHashEntry
*
>
(
gHashTable
-
>
Add
(
aKey
fallible
)
)
;
if
(
!
pref
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
if
(
!
pref
-
>
mKey
)
{
pref
-
>
mPrefFlags
.
Reset
(
)
.
SetPrefType
(
aType
)
;
pref
-
>
mKey
=
ArenaStrdup
(
aKey
gPrefNameArena
)
;
memset
(
&
pref
-
>
mDefaultPref
0
sizeof
(
pref
-
>
mDefaultPref
)
)
;
memset
(
&
pref
-
>
mUserPref
0
sizeof
(
pref
-
>
mUserPref
)
)
;
}
else
if
(
pref
-
>
mPrefFlags
.
HasDefault
(
)
&
&
!
pref
-
>
mPrefFlags
.
IsPrefType
(
aType
)
)
{
NS_WARNING
(
nsPrintfCString
(
"
Trying
to
overwrite
value
of
default
pref
%
s
with
the
wrong
type
!
"
aKey
)
.
get
(
)
)
;
return
NS_ERROR_UNEXPECTED
;
}
bool
valueChanged
=
false
;
if
(
aFlags
&
kPrefSetDefault
)
{
if
(
!
pref
-
>
mPrefFlags
.
IsLocked
(
)
)
{
if
(
pref_ValueChanged
(
pref
-
>
mDefaultPref
aValue
aType
)
|
|
!
pref
-
>
mPrefFlags
.
HasDefault
(
)
)
{
pref
-
>
mPrefFlags
=
pref_SetValue
(
&
pref
-
>
mDefaultPref
pref
-
>
mPrefFlags
aValue
aType
)
.
SetHasDefault
(
true
)
;
if
(
aFlags
&
kPrefStickyDefault
)
{
pref
-
>
mPrefFlags
.
SetHasStickyDefault
(
true
)
;
}
if
(
!
pref
-
>
mPrefFlags
.
HasUserValue
(
)
)
{
valueChanged
=
true
;
}
}
}
}
else
{
if
(
(
pref
-
>
mPrefFlags
.
HasDefault
(
)
)
&
&
!
(
pref
-
>
mPrefFlags
.
HasStickyDefault
(
)
)
&
&
!
pref_ValueChanged
(
pref
-
>
mDefaultPref
aValue
aType
)
&
&
!
(
aFlags
&
kPrefForceSet
)
)
{
if
(
pref
-
>
mPrefFlags
.
HasUserValue
(
)
)
{
pref
-
>
mPrefFlags
.
SetHasUserValue
(
false
)
;
if
(
!
pref
-
>
mPrefFlags
.
IsLocked
(
)
)
{
Preferences
:
:
HandleDirty
(
)
;
valueChanged
=
true
;
}
}
}
else
if
(
!
pref
-
>
mPrefFlags
.
HasUserValue
(
)
|
|
!
pref
-
>
mPrefFlags
.
IsPrefType
(
aType
)
|
|
pref_ValueChanged
(
pref
-
>
mUserPref
aValue
aType
)
)
{
pref
-
>
mPrefFlags
=
pref_SetValue
(
&
pref
-
>
mUserPref
pref
-
>
mPrefFlags
aValue
aType
)
.
SetHasUserValue
(
true
)
;
if
(
!
pref
-
>
mPrefFlags
.
IsLocked
(
)
)
{
Preferences
:
:
HandleDirty
(
)
;
valueChanged
=
true
;
}
}
}
if
(
valueChanged
)
{
return
pref_DoCallback
(
aKey
)
;
}
return
NS_OK
;
}
static
size_t
pref_SizeOfPrivateData
(
MallocSizeOf
aMallocSizeOf
)
{
size_t
n
=
gPrefNameArena
.
SizeOfExcludingThis
(
aMallocSizeOf
)
;
for
(
CallbackNode
*
node
=
gFirstCallback
;
node
;
node
=
node
-
>
mNext
)
{
n
+
=
aMallocSizeOf
(
node
)
;
n
+
=
aMallocSizeOf
(
node
-
>
mDomain
)
;
}
return
n
;
}
static
bool
PREF_PrefIsLocked
(
const
char
*
aPrefName
)
{
bool
result
=
false
;
if
(
gIsAnyPrefLocked
&
&
gHashTable
)
{
PrefHashEntry
*
pref
=
pref_HashTableLookup
(
aPrefName
)
;
if
(
pref
&
&
pref
-
>
mPrefFlags
.
IsLocked
(
)
)
{
result
=
true
;
}
}
return
result
;
}
static
void
PREF_RegisterCallback
(
const
char
*
aPrefNode
PrefChangedFunc
aCallback
void
*
aData
bool
aIsPriority
)
{
NS_PRECONDITION
(
aPrefNode
"
aPrefNode
must
not
be
nullptr
"
)
;
NS_PRECONDITION
(
aCallback
"
aCallback
must
not
be
nullptr
"
)
;
auto
node
=
(
CallbackNode
*
)
moz_xmalloc
(
sizeof
(
CallbackNode
)
)
;
node
-
>
mDomain
=
moz_xstrdup
(
aPrefNode
)
;
node
-
>
mFunc
=
aCallback
;
node
-
>
mData
=
aData
;
if
(
aIsPriority
)
{
node
-
>
mNext
=
gFirstCallback
;
gFirstCallback
=
node
;
if
(
!
gLastPriorityNode
)
{
gLastPriorityNode
=
node
;
}
}
else
{
if
(
gLastPriorityNode
)
{
node
-
>
mNext
=
gLastPriorityNode
-
>
mNext
;
gLastPriorityNode
-
>
mNext
=
node
;
}
else
{
node
-
>
mNext
=
gFirstCallback
;
gFirstCallback
=
node
;
}
}
}
static
CallbackNode
*
pref_RemoveCallbackNode
(
CallbackNode
*
aNode
CallbackNode
*
aPrevNode
)
{
NS_PRECONDITION
(
!
aPrevNode
|
|
aPrevNode
-
>
mNext
=
=
aNode
"
invalid
params
"
)
;
NS_PRECONDITION
(
aPrevNode
|
|
gFirstCallback
=
=
aNode
"
invalid
params
"
)
;
NS_ASSERTION
(
!
gCallbacksInProgress
"
modifying
the
callback
list
while
gCallbacksInProgress
is
true
"
)
;
CallbackNode
*
next_node
=
aNode
-
>
mNext
;
if
(
aPrevNode
)
{
aPrevNode
-
>
mNext
=
next_node
;
}
else
{
gFirstCallback
=
next_node
;
}
if
(
gLastPriorityNode
=
=
aNode
)
{
gLastPriorityNode
=
aPrevNode
;
}
free
(
aNode
-
>
mDomain
)
;
free
(
aNode
)
;
return
next_node
;
}
static
nsresult
PREF_UnregisterCallback
(
const
char
*
aPrefNode
PrefChangedFunc
aCallback
void
*
aData
)
{
nsresult
rv
=
NS_ERROR_FAILURE
;
CallbackNode
*
node
=
gFirstCallback
;
CallbackNode
*
prev_node
=
nullptr
;
while
(
node
!
=
nullptr
)
{
if
(
node
-
>
mFunc
=
=
aCallback
&
&
node
-
>
mData
=
=
aData
&
&
strcmp
(
node
-
>
mDomain
aPrefNode
)
=
=
0
)
{
if
(
gCallbacksInProgress
)
{
node
-
>
mFunc
=
nullptr
;
gShouldCleanupDeadNodes
=
true
;
prev_node
=
node
;
node
=
node
-
>
mNext
;
}
else
{
node
=
pref_RemoveCallbackNode
(
node
prev_node
)
;
}
rv
=
NS_OK
;
}
else
{
prev_node
=
node
;
node
=
node
-
>
mNext
;
}
}
return
rv
;
}
static
nsresult
pref_DoCallback
(
const
char
*
aChangedPref
)
{
nsresult
rv
=
NS_OK
;
CallbackNode
*
node
;
bool
reentered
=
gCallbacksInProgress
;
gCallbacksInProgress
=
true
;
for
(
node
=
gFirstCallback
;
node
!
=
nullptr
;
node
=
node
-
>
mNext
)
{
if
(
node
-
>
mFunc
&
&
PL_strncmp
(
aChangedPref
node
-
>
mDomain
strlen
(
node
-
>
mDomain
)
)
=
=
0
)
{
(
*
node
-
>
mFunc
)
(
aChangedPref
node
-
>
mData
)
;
}
}
gCallbacksInProgress
=
reentered
;
if
(
gShouldCleanupDeadNodes
&
&
!
gCallbacksInProgress
)
{
CallbackNode
*
prev_node
=
nullptr
;
node
=
gFirstCallback
;
while
(
node
!
=
nullptr
)
{
if
(
!
node
-
>
mFunc
)
{
node
=
pref_RemoveCallbackNode
(
node
prev_node
)
;
}
else
{
prev_node
=
node
;
node
=
node
-
>
mNext
;
}
}
gShouldCleanupDeadNodes
=
false
;
}
return
rv
;
}
static
void
PREF_ReaderCallback
(
void
*
aClosure
const
char
*
aPref
PrefValue
aValue
PrefType
aType
bool
aIsDefault
bool
aIsStickyDefault
)
{
uint32_t
flags
=
0
;
if
(
aIsDefault
)
{
flags
|
=
kPrefSetDefault
;
if
(
aIsStickyDefault
)
{
flags
|
=
kPrefStickyDefault
;
}
}
else
{
flags
|
=
kPrefForceSet
;
}
pref_HashPref
(
aPref
aValue
aType
flags
)
;
}
typedef
void
(
*
PrefReader
)
(
void
*
aClosure
const
char
*
aPref
PrefValue
aValue
PrefType
aType
bool
aIsDefault
bool
aIsStickyDefault
)
;
typedef
void
(
*
PrefParseErrorReporter
)
(
const
char
*
aMessage
int
aLine
bool
aError
)
;
struct
PrefParseState
{
PrefReader
mReader
;
PrefParseErrorReporter
mReporter
;
void
*
mClosure
;
int
mState
;
int
mNextState
;
const
char
*
mStrMatch
;
int
mStrIndex
;
char16_t
mUtf16
[
2
]
;
int
mEscLen
;
char
mEscTmp
[
6
]
;
char
mQuoteChar
;
char
*
mLb
;
char
*
mLbCur
;
char
*
mLbEnd
;
char
*
mVb
;
PrefType
mVtype
;
bool
mIsDefault
;
bool
mIsStickyDefault
;
}
;
enum
{
PREF_PARSE_INIT
PREF_PARSE_MATCH_STRING
PREF_PARSE_UNTIL_NAME
PREF_PARSE_QUOTED_STRING
PREF_PARSE_UNTIL_COMMA
PREF_PARSE_UNTIL_VALUE
PREF_PARSE_INT_VALUE
PREF_PARSE_COMMENT_MAYBE_START
PREF_PARSE_COMMENT_BLOCK
PREF_PARSE_COMMENT_BLOCK_MAYBE_END
PREF_PARSE_ESC_SEQUENCE
PREF_PARSE_HEX_ESCAPE
PREF_PARSE_UTF16_LOW_SURROGATE
PREF_PARSE_UNTIL_OPEN_PAREN
PREF_PARSE_UNTIL_CLOSE_PAREN
PREF_PARSE_UNTIL_SEMICOLON
PREF_PARSE_UNTIL_EOL
}
;
#
define
UTF16_ESC_NUM_DIGITS
4
#
define
HEX_ESC_NUM_DIGITS
2
#
define
BITS_PER_HEX_DIGIT
4
static
const
char
kUserPref
[
]
=
"
user_pref
"
;
static
const
char
kPref
[
]
=
"
pref
"
;
static
const
char
kPrefSticky
[
]
=
"
sticky_pref
"
;
static
const
char
kTrue
[
]
=
"
true
"
;
static
const
char
kFalse
[
]
=
"
false
"
;
static
bool
pref_GrowBuf
(
PrefParseState
*
aPS
)
{
int
bufLen
curPos
valPos
;
bufLen
=
aPS
-
>
mLbEnd
-
aPS
-
>
mLb
;
curPos
=
aPS
-
>
mLbCur
-
aPS
-
>
mLb
;
valPos
=
aPS
-
>
mVb
-
aPS
-
>
mLb
;
if
(
bufLen
=
=
0
)
{
bufLen
=
128
;
}
else
{
bufLen
<
<
=
1
;
}
aPS
-
>
mLb
=
(
char
*
)
realloc
(
aPS
-
>
mLb
bufLen
)
;
if
(
!
aPS
-
>
mLb
)
{
return
false
;
}
aPS
-
>
mLbCur
=
aPS
-
>
mLb
+
curPos
;
aPS
-
>
mLbEnd
=
aPS
-
>
mLb
+
bufLen
;
aPS
-
>
mVb
=
aPS
-
>
mLb
+
valPos
;
return
true
;
}
static
void
pref_ReportParseProblem
(
PrefParseState
&
aPS
const
char
*
aMessage
int
aLine
bool
aError
)
{
if
(
aPS
.
mReporter
)
{
aPS
.
mReporter
(
aMessage
aLine
aError
)
;
}
else
{
printf_stderr
(
"
*
*
*
*
Preference
parsing
%
s
(
line
%
d
)
=
%
s
*
*
\
n
"
(
aError
?
"
error
"
:
"
warning
"
)
aLine
aMessage
)
;
}
}
static
void
PREF_InitParseState
(
PrefParseState
*
aPS
PrefReader
aReader
PrefParseErrorReporter
aReporter
void
*
aClosure
)
{
memset
(
aPS
0
sizeof
(
*
aPS
)
)
;
aPS
-
>
mReader
=
aReader
;
aPS
-
>
mClosure
=
aClosure
;
aPS
-
>
mReporter
=
aReporter
;
}
static
void
PREF_FinalizeParseState
(
PrefParseState
*
aPS
)
{
if
(
aPS
-
>
mLb
)
{
free
(
aPS
-
>
mLb
)
;
}
}
static
bool
PREF_ParseBuf
(
PrefParseState
*
aPS
const
char
*
aBuf
int
aBufLen
)
{
const
char
*
end
;
char
c
;
char
udigit
;
int
state
;
int
lineNum
=
0
;
state
=
aPS
-
>
mState
;
for
(
end
=
aBuf
+
aBufLen
;
aBuf
!
=
end
;
+
+
aBuf
)
{
c
=
*
aBuf
;
if
(
c
=
=
'
\
r
'
|
|
c
=
=
'
\
n
'
|
|
c
=
=
0x1A
)
{
lineNum
+
+
;
}
switch
(
state
)
{
case
PREF_PARSE_INIT
:
if
(
aPS
-
>
mLbCur
!
=
aPS
-
>
mLb
)
{
aPS
-
>
mLbCur
=
aPS
-
>
mLb
;
aPS
-
>
mVb
=
nullptr
;
aPS
-
>
mVtype
=
PrefType
:
:
Invalid
;
aPS
-
>
mIsDefault
=
false
;
aPS
-
>
mIsStickyDefault
=
false
;
}
switch
(
c
)
{
case
'
/
'
:
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
break
;
case
'
#
'
:
state
=
PREF_PARSE_UNTIL_EOL
;
break
;
case
'
u
'
:
case
'
s
'
:
case
'
p
'
:
if
(
c
=
=
'
u
'
)
{
aPS
-
>
mStrMatch
=
kUserPref
;
}
else
if
(
c
=
=
'
s
'
)
{
aPS
-
>
mStrMatch
=
kPrefSticky
;
}
else
{
aPS
-
>
mStrMatch
=
kPref
;
}
aPS
-
>
mStrIndex
=
1
;
aPS
-
>
mNextState
=
PREF_PARSE_UNTIL_OPEN_PAREN
;
state
=
PREF_PARSE_MATCH_STRING
;
break
;
}
break
;
case
PREF_PARSE_MATCH_STRING
:
if
(
c
=
=
aPS
-
>
mStrMatch
[
aPS
-
>
mStrIndex
+
+
]
)
{
if
(
aPS
-
>
mStrMatch
[
aPS
-
>
mStrIndex
]
=
=
'
\
0
'
)
{
state
=
aPS
-
>
mNextState
;
aPS
-
>
mNextState
=
PREF_PARSE_INIT
;
}
}
else
{
pref_ReportParseProblem
(
*
aPS
"
non
-
matching
string
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_QUOTED_STRING
:
if
(
aPS
-
>
mLbCur
=
=
aPS
-
>
mLbEnd
&
&
!
pref_GrowBuf
(
aPS
)
)
{
return
false
;
}
if
(
c
=
=
'
\
\
'
)
{
state
=
PREF_PARSE_ESC_SEQUENCE
;
}
else
if
(
c
=
=
aPS
-
>
mQuoteChar
)
{
*
aPS
-
>
mLbCur
+
+
=
'
\
0
'
;
state
=
aPS
-
>
mNextState
;
aPS
-
>
mNextState
=
PREF_PARSE_INIT
;
}
else
{
*
aPS
-
>
mLbCur
+
+
=
c
;
}
break
;
case
PREF_PARSE_UNTIL_NAME
:
if
(
c
=
=
'
\
"
'
|
|
c
=
=
'
\
'
'
)
{
aPS
-
>
mIsDefault
=
(
aPS
-
>
mStrMatch
=
=
kPref
|
|
aPS
-
>
mStrMatch
=
=
kPrefSticky
)
;
aPS
-
>
mIsStickyDefault
=
(
aPS
-
>
mStrMatch
=
=
kPrefSticky
)
;
aPS
-
>
mQuoteChar
=
c
;
aPS
-
>
mNextState
=
PREF_PARSE_UNTIL_COMMA
;
state
=
PREF_PARSE_QUOTED_STRING
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
state
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
!
isspace
(
c
)
)
{
pref_ReportParseProblem
(
*
aPS
"
need
space
comment
or
quote
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_UNTIL_COMMA
:
if
(
c
=
=
'
'
)
{
aPS
-
>
mVb
=
aPS
-
>
mLbCur
;
state
=
PREF_PARSE_UNTIL_VALUE
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
state
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
!
isspace
(
c
)
)
{
pref_ReportParseProblem
(
*
aPS
"
need
space
comment
or
comma
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_UNTIL_VALUE
:
if
(
c
=
=
'
\
"
'
|
|
c
=
=
'
\
'
'
)
{
aPS
-
>
mVtype
=
PrefType
:
:
String
;
aPS
-
>
mQuoteChar
=
c
;
aPS
-
>
mNextState
=
PREF_PARSE_UNTIL_CLOSE_PAREN
;
state
=
PREF_PARSE_QUOTED_STRING
;
}
else
if
(
c
=
=
'
t
'
|
|
c
=
=
'
f
'
)
{
aPS
-
>
mVb
=
(
char
*
)
(
c
=
=
'
t
'
?
kTrue
:
kFalse
)
;
aPS
-
>
mVtype
=
PrefType
:
:
Bool
;
aPS
-
>
mStrMatch
=
aPS
-
>
mVb
;
aPS
-
>
mStrIndex
=
1
;
aPS
-
>
mNextState
=
PREF_PARSE_UNTIL_CLOSE_PAREN
;
state
=
PREF_PARSE_MATCH_STRING
;
}
else
if
(
isdigit
(
c
)
|
|
(
c
=
=
'
-
'
)
|
|
(
c
=
=
'
+
'
)
)
{
aPS
-
>
mVtype
=
PrefType
:
:
Int
;
if
(
aPS
-
>
mLbCur
=
=
aPS
-
>
mLbEnd
&
&
!
pref_GrowBuf
(
aPS
)
)
{
return
false
;
}
*
aPS
-
>
mLbCur
+
+
=
c
;
state
=
PREF_PARSE_INT_VALUE
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
state
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
!
isspace
(
c
)
)
{
pref_ReportParseProblem
(
*
aPS
"
need
value
comment
or
space
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_INT_VALUE
:
if
(
aPS
-
>
mLbCur
=
=
aPS
-
>
mLbEnd
&
&
!
pref_GrowBuf
(
aPS
)
)
{
return
false
;
}
if
(
isdigit
(
c
)
)
{
*
aPS
-
>
mLbCur
+
+
=
c
;
}
else
{
*
aPS
-
>
mLbCur
+
+
=
'
\
0
'
;
if
(
c
=
=
'
)
'
)
{
state
=
PREF_PARSE_UNTIL_SEMICOLON
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
PREF_PARSE_UNTIL_CLOSE_PAREN
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
isspace
(
c
)
)
{
state
=
PREF_PARSE_UNTIL_CLOSE_PAREN
;
}
else
{
pref_ReportParseProblem
(
*
aPS
"
while
parsing
integer
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
}
break
;
case
PREF_PARSE_COMMENT_MAYBE_START
:
switch
(
c
)
{
case
'
*
'
:
state
=
PREF_PARSE_COMMENT_BLOCK
;
break
;
case
'
/
'
:
state
=
PREF_PARSE_UNTIL_EOL
;
break
;
default
:
pref_ReportParseProblem
(
*
aPS
"
while
parsing
comment
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_COMMENT_BLOCK
:
if
(
c
=
=
'
*
'
)
{
state
=
PREF_PARSE_COMMENT_BLOCK_MAYBE_END
;
}
break
;
case
PREF_PARSE_COMMENT_BLOCK_MAYBE_END
:
switch
(
c
)
{
case
'
/
'
:
state
=
aPS
-
>
mNextState
;
aPS
-
>
mNextState
=
PREF_PARSE_INIT
;
break
;
case
'
*
'
:
break
;
default
:
state
=
PREF_PARSE_COMMENT_BLOCK
;
break
;
}
break
;
case
PREF_PARSE_ESC_SEQUENCE
:
switch
(
c
)
{
case
'
\
"
'
:
case
'
\
'
'
:
case
'
\
\
'
:
break
;
case
'
r
'
:
c
=
'
\
r
'
;
break
;
case
'
n
'
:
c
=
'
\
n
'
;
break
;
case
'
x
'
:
case
'
u
'
:
aPS
-
>
mEscTmp
[
0
]
=
c
;
aPS
-
>
mEscLen
=
1
;
aPS
-
>
mUtf16
[
0
]
=
aPS
-
>
mUtf16
[
1
]
=
0
;
aPS
-
>
mStrIndex
=
(
c
=
=
'
x
'
)
?
HEX_ESC_NUM_DIGITS
:
UTF16_ESC_NUM_DIGITS
;
state
=
PREF_PARSE_HEX_ESCAPE
;
continue
;
default
:
pref_ReportParseProblem
(
*
aPS
"
preserving
unexpected
JS
escape
sequence
"
lineNum
false
)
;
NS_WARNING
(
"
preserving
unexpected
JS
escape
sequence
"
)
;
if
(
(
aPS
-
>
mLbCur
+
1
)
=
=
aPS
-
>
mLbEnd
&
&
!
pref_GrowBuf
(
aPS
)
)
{
return
false
;
}
*
aPS
-
>
mLbCur
+
+
=
'
\
\
'
;
break
;
}
*
aPS
-
>
mLbCur
+
+
=
c
;
state
=
PREF_PARSE_QUOTED_STRING
;
break
;
case
PREF_PARSE_HEX_ESCAPE
:
if
(
c
>
=
'
0
'
&
&
c
<
=
'
9
'
)
{
udigit
=
(
c
-
'
0
'
)
;
}
else
if
(
c
>
=
'
A
'
&
&
c
<
=
'
F
'
)
{
udigit
=
(
c
-
'
A
'
)
+
10
;
}
else
if
(
c
>
=
'
a
'
&
&
c
<
=
'
f
'
)
{
udigit
=
(
c
-
'
a
'
)
+
10
;
}
else
{
pref_ReportParseProblem
(
*
aPS
"
preserving
invalid
or
incomplete
hex
escape
"
lineNum
false
)
;
NS_WARNING
(
"
preserving
invalid
or
incomplete
hex
escape
"
)
;
*
aPS
-
>
mLbCur
+
+
=
'
\
\
'
;
if
(
(
aPS
-
>
mLbCur
+
aPS
-
>
mEscLen
)
>
=
aPS
-
>
mLbEnd
&
&
!
pref_GrowBuf
(
aPS
)
)
{
return
false
;
}
for
(
int
i
=
0
;
i
<
aPS
-
>
mEscLen
;
+
+
i
)
{
*
aPS
-
>
mLbCur
+
+
=
aPS
-
>
mEscTmp
[
i
]
;
}
-
-
aBuf
;
state
=
PREF_PARSE_QUOTED_STRING
;
continue
;
}
aPS
-
>
mEscTmp
[
aPS
-
>
mEscLen
+
+
]
=
c
;
aPS
-
>
mUtf16
[
1
]
<
<
=
BITS_PER_HEX_DIGIT
;
aPS
-
>
mUtf16
[
1
]
|
=
udigit
;
aPS
-
>
mStrIndex
-
-
;
if
(
aPS
-
>
mStrIndex
=
=
0
)
{
int
utf16len
=
0
;
if
(
aPS
-
>
mUtf16
[
0
]
)
{
utf16len
=
2
;
}
else
if
(
0xD800
=
=
(
0xFC00
&
aPS
-
>
mUtf16
[
1
]
)
)
{
aPS
-
>
mUtf16
[
0
]
=
aPS
-
>
mUtf16
[
1
]
;
aPS
-
>
mUtf16
[
1
]
=
0
;
state
=
PREF_PARSE_UTF16_LOW_SURROGATE
;
break
;
}
else
{
aPS
-
>
mUtf16
[
0
]
=
aPS
-
>
mUtf16
[
1
]
;
utf16len
=
1
;
}
if
(
aPS
-
>
mLbCur
+
6
>
=
aPS
-
>
mLbEnd
&
&
!
pref_GrowBuf
(
aPS
)
)
{
return
false
;
}
ConvertUTF16toUTF8
converter
(
aPS
-
>
mLbCur
)
;
converter
.
write
(
aPS
-
>
mUtf16
utf16len
)
;
aPS
-
>
mLbCur
+
=
converter
.
Size
(
)
;
state
=
PREF_PARSE_QUOTED_STRING
;
}
break
;
case
PREF_PARSE_UTF16_LOW_SURROGATE
:
if
(
aPS
-
>
mStrIndex
=
=
0
&
&
c
=
=
'
\
\
'
)
{
+
+
aPS
-
>
mStrIndex
;
}
else
if
(
aPS
-
>
mStrIndex
=
=
1
&
&
c
=
=
'
u
'
)
{
aPS
-
>
mStrIndex
=
UTF16_ESC_NUM_DIGITS
;
aPS
-
>
mEscTmp
[
0
]
=
'
u
'
;
aPS
-
>
mEscLen
=
1
;
state
=
PREF_PARSE_HEX_ESCAPE
;
}
else
{
-
-
aBuf
;
if
(
aPS
-
>
mStrIndex
=
=
1
)
{
state
=
PREF_PARSE_ESC_SEQUENCE
;
}
else
{
state
=
PREF_PARSE_QUOTED_STRING
;
}
continue
;
}
break
;
case
PREF_PARSE_UNTIL_OPEN_PAREN
:
if
(
c
=
=
'
(
'
)
{
state
=
PREF_PARSE_UNTIL_NAME
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
state
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
!
isspace
(
c
)
)
{
pref_ReportParseProblem
(
*
aPS
"
need
space
comment
or
open
parentheses
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_UNTIL_CLOSE_PAREN
:
if
(
c
=
=
'
)
'
)
{
state
=
PREF_PARSE_UNTIL_SEMICOLON
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
state
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
!
isspace
(
c
)
)
{
pref_ReportParseProblem
(
*
aPS
"
need
space
comment
or
closing
parentheses
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_UNTIL_SEMICOLON
:
if
(
c
=
=
'
;
'
)
{
PrefValue
value
;
switch
(
aPS
-
>
mVtype
)
{
case
PrefType
:
:
String
:
value
.
mStringVal
=
aPS
-
>
mVb
;
break
;
case
PrefType
:
:
Int
:
if
(
(
aPS
-
>
mVb
[
0
]
=
=
'
-
'
|
|
aPS
-
>
mVb
[
0
]
=
=
'
+
'
)
&
&
aPS
-
>
mVb
[
1
]
=
=
'
\
0
'
)
{
pref_ReportParseProblem
(
*
aPS
"
invalid
integer
value
"
0
true
)
;
NS_WARNING
(
"
malformed
integer
value
"
)
;
return
false
;
}
value
.
mIntVal
=
atoi
(
aPS
-
>
mVb
)
;
break
;
case
PrefType
:
:
Bool
:
value
.
mBoolVal
=
(
aPS
-
>
mVb
=
=
kTrue
)
;
break
;
default
:
break
;
}
aPS
-
>
mReader
(
aPS
-
>
mClosure
aPS
-
>
mLb
value
aPS
-
>
mVtype
aPS
-
>
mIsDefault
aPS
-
>
mIsStickyDefault
)
;
state
=
PREF_PARSE_INIT
;
}
else
if
(
c
=
=
'
/
'
)
{
aPS
-
>
mNextState
=
state
;
state
=
PREF_PARSE_COMMENT_MAYBE_START
;
}
else
if
(
!
isspace
(
c
)
)
{
pref_ReportParseProblem
(
*
aPS
"
need
space
comment
or
semicolon
"
lineNum
true
)
;
NS_WARNING
(
"
malformed
pref
file
"
)
;
return
false
;
}
break
;
case
PREF_PARSE_UNTIL_EOL
:
if
(
c
=
=
'
\
r
'
|
|
c
=
=
'
\
n
'
|
|
c
=
=
0x1A
)
{
state
=
aPS
-
>
mNextState
;
aPS
-
>
mNextState
=
PREF_PARSE_INIT
;
}
break
;
}
}
aPS
-
>
mState
=
state
;
return
true
;
}
namespace
mozilla
{
class
PreferenceServiceReporter
;
}
class
nsPrefBranch
;
class
PrefCallback
:
public
PLDHashEntryHdr
{
friend
class
mozilla
:
:
PreferenceServiceReporter
;
public
:
typedef
PrefCallback
*
KeyType
;
typedef
const
PrefCallback
*
KeyTypePointer
;
static
const
PrefCallback
*
KeyToPointer
(
PrefCallback
*
aKey
)
{
return
aKey
;
}
static
PLDHashNumber
HashKey
(
const
PrefCallback
*
aKey
)
{
uint32_t
hash
=
mozilla
:
:
HashString
(
aKey
-
>
mDomain
)
;
return
mozilla
:
:
AddToHash
(
hash
aKey
-
>
mCanonical
)
;
}
public
:
PrefCallback
(
const
char
*
aDomain
nsIObserver
*
aObserver
nsPrefBranch
*
aBranch
)
:
mDomain
(
aDomain
)
mBranch
(
aBranch
)
mWeakRef
(
nullptr
)
mStrongRef
(
aObserver
)
{
MOZ_COUNT_CTOR
(
PrefCallback
)
;
nsCOMPtr
<
nsISupports
>
canonical
=
do_QueryInterface
(
aObserver
)
;
mCanonical
=
canonical
;
}
PrefCallback
(
const
char
*
aDomain
nsISupportsWeakReference
*
aObserver
nsPrefBranch
*
aBranch
)
:
mDomain
(
aDomain
)
mBranch
(
aBranch
)
mWeakRef
(
do_GetWeakReference
(
aObserver
)
)
mStrongRef
(
nullptr
)
{
MOZ_COUNT_CTOR
(
PrefCallback
)
;
nsCOMPtr
<
nsISupports
>
canonical
=
do_QueryInterface
(
aObserver
)
;
mCanonical
=
canonical
;
}
explicit
PrefCallback
(
const
PrefCallback
*
&
aCopy
)
:
mDomain
(
aCopy
-
>
mDomain
)
mBranch
(
aCopy
-
>
mBranch
)
mWeakRef
(
aCopy
-
>
mWeakRef
)
mStrongRef
(
aCopy
-
>
mStrongRef
)
mCanonical
(
aCopy
-
>
mCanonical
)
{
MOZ_COUNT_CTOR
(
PrefCallback
)
;
}
~
PrefCallback
(
)
{
MOZ_COUNT_DTOR
(
PrefCallback
)
;
}
bool
KeyEquals
(
const
PrefCallback
*
aKey
)
const
{
if
(
IsExpired
(
)
|
|
aKey
-
>
IsExpired
(
)
)
{
return
this
=
=
aKey
;
}
if
(
mCanonical
!
=
aKey
-
>
mCanonical
)
{
return
false
;
}
return
mDomain
.
Equals
(
aKey
-
>
mDomain
)
;
}
PrefCallback
*
GetKey
(
)
const
{
return
const_cast
<
PrefCallback
*
>
(
this
)
;
}
already_AddRefed
<
nsIObserver
>
GetObserver
(
)
const
{
if
(
!
IsWeak
(
)
)
{
nsCOMPtr
<
nsIObserver
>
copy
=
mStrongRef
;
return
copy
.
forget
(
)
;
}
nsCOMPtr
<
nsIObserver
>
observer
=
do_QueryReferent
(
mWeakRef
)
;
return
observer
.
forget
(
)
;
}
const
nsCString
&
GetDomain
(
)
const
{
return
mDomain
;
}
nsPrefBranch
*
GetPrefBranch
(
)
const
{
return
mBranch
;
}
bool
IsExpired
(
)
const
{
if
(
!
IsWeak
(
)
)
return
false
;
nsCOMPtr
<
nsIObserver
>
observer
(
do_QueryReferent
(
mWeakRef
)
)
;
return
!
observer
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
private
:
nsCString
mDomain
;
nsPrefBranch
*
mBranch
;
nsWeakPtr
mWeakRef
;
nsCOMPtr
<
nsIObserver
>
mStrongRef
;
nsISupports
*
mCanonical
;
bool
IsWeak
(
)
const
{
return
!
!
mWeakRef
;
}
}
;
class
nsPrefBranch
final
:
public
nsIPrefBranch
public
nsIObserver
public
nsSupportsWeakReference
{
friend
class
mozilla
:
:
PreferenceServiceReporter
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPREFBRANCH
NS_DECL_NSIOBSERVER
nsPrefBranch
(
const
char
*
aPrefRoot
bool
aDefaultBranch
)
;
nsPrefBranch
(
)
=
delete
;
int32_t
GetRootLength
(
)
const
{
return
mPrefRoot
.
Length
(
)
;
}
static
void
NotifyObserver
(
const
char
*
aNewpref
void
*
aData
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
;
static
void
ReportToConsole
(
const
nsAString
&
aMessage
)
;
protected
:
typedef
mozilla
:
:
Variant
<
const
char
*
const
nsCString
>
PrefNameBase
;
class
PrefName
:
public
PrefNameBase
{
public
:
explicit
PrefName
(
const
char
*
aName
)
:
PrefNameBase
(
aName
)
{
}
explicit
PrefName
(
const
nsCString
&
aName
)
:
PrefNameBase
(
aName
)
{
}
PrefName
(
PrefName
&
&
aOther
)
=
default
;
PrefName
&
operator
=
(
PrefName
&
&
aOther
)
=
default
;
PrefName
(
const
PrefName
&
)
=
delete
;
PrefName
&
operator
=
(
const
PrefName
&
)
=
delete
;
struct
PtrMatcher
{
static
const
char
*
match
(
const
char
*
aVal
)
{
return
aVal
;
}
static
const
char
*
match
(
const
nsCString
&
aVal
)
{
return
aVal
.
get
(
)
;
}
}
;
struct
LenMatcher
{
static
size_t
match
(
const
char
*
aVal
)
{
return
strlen
(
aVal
)
;
}
static
size_t
match
(
const
nsCString
&
aVal
)
{
return
aVal
.
Length
(
)
;
}
}
;
const
char
*
get
(
)
const
{
static
PtrMatcher
m
;
return
match
(
m
)
;
}
size_t
Length
(
)
const
{
static
LenMatcher
m
;
return
match
(
m
)
;
}
}
;
virtual
~
nsPrefBranch
(
)
;
nsresult
GetDefaultFromPropertiesFile
(
const
char
*
aPrefName
nsAString
&
aReturn
)
;
nsresult
SetCharPrefInternal
(
const
char
*
aPrefName
const
char
*
aValue
)
;
nsresult
CheckSanityOfStringLength
(
const
char
*
aPrefName
const
nsAString
&
aValue
)
;
nsresult
CheckSanityOfStringLength
(
const
char
*
aPrefName
const
nsACString
&
aValue
)
;
nsresult
CheckSanityOfStringLength
(
const
char
*
aPrefName
const
char
*
aValue
)
;
nsresult
CheckSanityOfStringLength
(
const
char
*
aPrefName
const
uint32_t
aLength
)
;
void
RemoveExpiredCallback
(
PrefCallback
*
aCallback
)
;
PrefName
GetPrefName
(
const
char
*
aPrefName
)
const
;
void
FreeObserverList
(
void
)
;
private
:
const
nsCString
mPrefRoot
;
bool
mIsDefault
;
bool
mFreeingObserverList
;
nsClassHashtable
<
PrefCallback
PrefCallback
>
mObservers
;
}
;
class
nsPrefLocalizedString
final
:
public
nsIPrefLocalizedString
{
public
:
nsPrefLocalizedString
(
)
;
NS_DECL_ISUPPORTS
NS_FORWARD_NSISUPPORTSPRIMITIVE
(
mUnicodeString
-
>
)
NS_FORWARD_NSISUPPORTSSTRING
(
mUnicodeString
-
>
)
nsresult
Init
(
)
;
private
:
virtual
~
nsPrefLocalizedString
(
)
;
nsCOMPtr
<
nsISupportsString
>
mUnicodeString
;
}
;
class
nsRelativeFilePref
:
public
nsIRelativeFilePref
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIRELATIVEFILEPREF
nsRelativeFilePref
(
)
;
private
:
virtual
~
nsRelativeFilePref
(
)
;
nsCOMPtr
<
nsIFile
>
mFile
;
nsCString
mRelativeToKey
;
}
;
nsPrefBranch
:
:
nsPrefBranch
(
const
char
*
aPrefRoot
bool
aDefaultBranch
)
:
mPrefRoot
(
aPrefRoot
)
mIsDefault
(
aDefaultBranch
)
mFreeingObserverList
(
false
)
mObservers
(
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
+
+
mRefCnt
;
observerService
-
>
AddObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
true
)
;
-
-
mRefCnt
;
}
}
nsPrefBranch
:
:
~
nsPrefBranch
(
)
{
FreeObserverList
(
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
observerService
-
>
RemoveObserver
(
this
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
;
}
}
NS_IMPL_ADDREF
(
nsPrefBranch
)
NS_IMPL_RELEASE
(
nsPrefBranch
)
NS_INTERFACE_MAP_BEGIN
(
nsPrefBranch
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIPrefBranch
)
NS_INTERFACE_MAP_ENTRY
(
nsIPrefBranch
)
NS_INTERFACE_MAP_ENTRY
(
nsIObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsISupportsWeakReference
)
NS_INTERFACE_MAP_END
NS_IMETHODIMP
nsPrefBranch
:
:
GetRoot
(
char
*
*
aRoot
)
{
NS_ENSURE_ARG_POINTER
(
aRoot
)
;
*
aRoot
=
ToNewCString
(
mPrefRoot
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
GetPrefType
(
const
char
*
aPrefName
int32_t
*
aRetVal
)
{
NS_ENSURE_ARG
(
aPrefName
)
;
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
PrefType
type
=
PrefType
:
:
Invalid
;
if
(
gHashTable
)
{
PrefHashEntry
*
entry
=
pref_HashTableLookup
(
pref
.
get
(
)
)
;
if
(
entry
)
{
type
=
entry
-
>
mPrefFlags
.
GetPrefType
(
)
;
}
}
switch
(
type
)
{
case
PrefType
:
:
String
:
*
aRetVal
=
PREF_STRING
;
break
;
case
PrefType
:
:
Int
:
*
aRetVal
=
PREF_INT
;
break
;
case
PrefType
:
:
Bool
:
*
aRetVal
=
PREF_BOOL
;
break
;
case
PrefType
:
:
Invalid
:
default
:
*
aRetVal
=
PREF_INVALID
;
break
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
GetBoolPrefWithDefault
(
const
char
*
aPrefName
bool
aDefaultValue
uint8_t
aArgc
bool
*
aRetVal
)
{
nsresult
rv
=
GetBoolPref
(
aPrefName
aRetVal
)
;
if
(
NS_FAILED
(
rv
)
&
&
aArgc
=
=
1
)
{
*
aRetVal
=
aDefaultValue
;
return
NS_OK
;
}
return
rv
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
GetBoolPref
(
const
char
*
aPrefName
bool
*
aRetVal
)
{
NS_ENSURE_ARG
(
aPrefName
)
;
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
return
PREF_GetBoolPref
(
pref
.
get
(
)
aRetVal
mIsDefault
)
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
SetBoolPref
(
const
char
*
aPrefName
bool
aValue
)
{
ENSURE_MAIN_PROCESS
(
"
SetBoolPref
"
aPrefName
)
;
NS_ENSURE_ARG
(
aPrefName
)
;
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
return
PREF_SetBoolPref
(
pref
.
get
(
)
aValue
mIsDefault
)
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
GetFloatPrefWithDefault
(
const
char
*
aPrefName
float
aDefaultValue
uint8_t
aArgc
float
*
aRetVal
)
{
nsresult
rv
=
GetFloatPref
(
aPrefName
aRetVal
)
;
if
(
NS_FAILED
(
rv
)
&
&
aArgc
=
=
1
)
{
*
aRetVal
=
aDefaultValue
;
return
NS_OK
;
}
return
rv
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
GetFloatPref
(
const
char
*
aPrefName
float
*
aRetVal
)
{
NS_ENSURE_ARG
(
aPrefName
)
;
nsAutoCString
stringVal
;
nsresult
rv
=
GetCharPref
(
aPrefName
getter_Copies
(
stringVal
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
*
aRetVal
=
stringVal
.
ToFloat
(
&
rv
)
;
}
return
rv
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
GetCharPrefWithDefault
(
const
char
*
aPrefName
const
char
*
aDefaultValue
uint8_t
aArgc
char
*
*
aRetVal
)
{
nsresult
rv
=
GetCharPref
(
aPrefName
aRetVal
)
;
if
(
NS_FAILED
(
rv
)
&
&
aArgc
=
=
1
)
{
NS_ENSURE_ARG
(
aDefaultValue
)
;
*
aRetVal
=
moz_xstrdup
(
aDefaultValue
)
;
return
NS_OK
;
}
return
rv
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
GetCharPref
(
const
char
*
aPrefName
char
*
*
aRetVal
)
{
NS_ENSURE_ARG
(
aPrefName
)
;
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
return
PREF_CopyCharPref
(
pref
.
get
(
)
aRetVal
mIsDefault
)
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
SetCharPref
(
const
char
*
aPrefName
const
char
*
aValue
)
{
nsresult
rv
=
CheckSanityOfStringLength
(
aPrefName
aValue
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
SetCharPrefInternal
(
aPrefName
aValue
)
;
}
nsresult
nsPrefBranch
:
:
SetCharPrefInternal
(
const
char
*
aPrefName
const
char
*
aValue
)
{
ENSURE_MAIN_PROCESS
(
"
SetCharPref
"
aPrefName
)
;
NS_ENSURE_ARG
(
aPrefName
)
;
NS_ENSURE_ARG
(
aValue
)
;
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
return
PREF_SetCharPref
(
pref
.
get
(
)
aValue
mIsDefault
)
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
GetStringPref
(
const
char
*
aPrefName
const
nsACString
&
aDefaultValue
uint8_t
aArgc
nsACString
&
aRetVal
)
{
nsCString
utf8String
;
nsresult
rv
=
GetCharPref
(
aPrefName
getter_Copies
(
utf8String
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
aRetVal
=
utf8String
;
return
rv
;
}
if
(
aArgc
=
=
1
)
{
aRetVal
=
aDefaultValue
;
return
NS_OK
;
}
return
rv
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
SetStringPref
(
const
char
*
aPrefName
const
nsACString
&
aValue
)
{
nsresult
rv
=
CheckSanityOfStringLength
(
aPrefName
aValue
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
SetCharPrefInternal
(
aPrefName
PromiseFlatCString
(
aValue
)
.
get
(
)
)
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
GetIntPrefWithDefault
(
const
char
*
aPrefName
int32_t
aDefaultValue
uint8_t
aArgc
int32_t
*
aRetVal
)
{
nsresult
rv
=
GetIntPref
(
aPrefName
aRetVal
)
;
if
(
NS_FAILED
(
rv
)
&
&
aArgc
=
=
1
)
{
*
aRetVal
=
aDefaultValue
;
return
NS_OK
;
}
return
rv
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
GetIntPref
(
const
char
*
aPrefName
int32_t
*
aRetVal
)
{
NS_ENSURE_ARG
(
aPrefName
)
;
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
return
PREF_GetIntPref
(
pref
.
get
(
)
aRetVal
mIsDefault
)
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
SetIntPref
(
const
char
*
aPrefName
int32_t
aValue
)
{
ENSURE_MAIN_PROCESS
(
"
SetIntPref
"
aPrefName
)
;
NS_ENSURE_ARG
(
aPrefName
)
;
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
return
PREF_SetIntPref
(
pref
.
get
(
)
aValue
mIsDefault
)
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
GetComplexValue
(
const
char
*
aPrefName
const
nsIID
&
aType
void
*
*
aRetVal
)
{
NS_ENSURE_ARG
(
aPrefName
)
;
nsresult
rv
;
nsCString
utf8String
;
if
(
aType
.
Equals
(
NS_GET_IID
(
nsIPrefLocalizedString
)
)
)
{
nsCOMPtr
<
nsIPrefLocalizedString
>
theString
(
do_CreateInstance
(
NS_PREFLOCALIZEDSTRING_CONTRACTID
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
bool
bNeedDefault
=
false
;
if
(
mIsDefault
)
{
bNeedDefault
=
true
;
}
else
{
if
(
!
PREF_HasUserPref
(
pref
.
get
(
)
)
&
&
!
PREF_PrefIsLocked
(
pref
.
get
(
)
)
)
{
bNeedDefault
=
true
;
}
}
if
(
bNeedDefault
)
{
nsAutoString
utf16String
;
rv
=
GetDefaultFromPropertiesFile
(
pref
.
get
(
)
utf16String
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
theString
-
>
SetData
(
utf16String
)
;
}
}
else
{
rv
=
GetCharPref
(
aPrefName
getter_Copies
(
utf8String
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
theString
-
>
SetData
(
NS_ConvertUTF8toUTF16
(
utf8String
)
)
;
}
}
if
(
NS_SUCCEEDED
(
rv
)
)
{
theString
.
forget
(
reinterpret_cast
<
nsIPrefLocalizedString
*
*
>
(
aRetVal
)
)
;
}
return
rv
;
}
rv
=
GetCharPref
(
aPrefName
getter_Copies
(
utf8String
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
if
(
aType
.
Equals
(
NS_GET_IID
(
nsIFile
)
)
)
{
if
(
XRE_IsContentProcess
(
)
)
{
NS_ERROR
(
"
cannot
get
nsIFile
pref
from
content
process
"
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
nsCOMPtr
<
nsIFile
>
file
(
do_CreateInstance
(
NS_LOCAL_FILE_CONTRACTID
&
rv
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
file
-
>
SetPersistentDescriptor
(
utf8String
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
file
.
forget
(
reinterpret_cast
<
nsIFile
*
*
>
(
aRetVal
)
)
;
return
NS_OK
;
}
}
return
rv
;
}
if
(
aType
.
Equals
(
NS_GET_IID
(
nsIRelativeFilePref
)
)
)
{
if
(
XRE_IsContentProcess
(
)
)
{
NS_ERROR
(
"
cannot
get
nsIRelativeFilePref
from
content
process
"
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
nsACString
:
:
const_iterator
keyBegin
strEnd
;
utf8String
.
BeginReading
(
keyBegin
)
;
utf8String
.
EndReading
(
strEnd
)
;
if
(
*
keyBegin
+
+
!
=
'
[
'
)
{
return
NS_ERROR_FAILURE
;
}
nsACString
:
:
const_iterator
keyEnd
(
keyBegin
)
;
if
(
!
FindCharInReadable
(
'
]
'
keyEnd
strEnd
)
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoCString
key
(
Substring
(
keyBegin
keyEnd
)
)
;
nsCOMPtr
<
nsIFile
>
fromFile
;
nsCOMPtr
<
nsIProperties
>
directoryService
(
do_GetService
(
NS_DIRECTORY_SERVICE_CONTRACTID
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
directoryService
-
>
Get
(
key
.
get
(
)
NS_GET_IID
(
nsIFile
)
getter_AddRefs
(
fromFile
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIFile
>
theFile
;
rv
=
NS_NewNativeLocalFile
(
EmptyCString
(
)
true
getter_AddRefs
(
theFile
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
theFile
-
>
SetRelativeDescriptor
(
fromFile
Substring
(
+
+
keyEnd
strEnd
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIRelativeFilePref
>
relativePref
;
rv
=
NS_NewRelativeFilePref
(
theFile
key
getter_AddRefs
(
relativePref
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
relativePref
.
forget
(
reinterpret_cast
<
nsIRelativeFilePref
*
*
>
(
aRetVal
)
)
;
return
NS_OK
;
}
if
(
aType
.
Equals
(
NS_GET_IID
(
nsISupportsString
)
)
)
{
nsCOMPtr
<
nsISupportsString
>
theString
(
do_CreateInstance
(
NS_SUPPORTS_STRING_CONTRACTID
&
rv
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsAutoString
wdata
;
if
(
!
AppendUTF8toUTF16
(
utf8String
wdata
mozilla
:
:
fallible
)
)
{
#
ifdef
MOZ_CRASHREPORTER
nsCOMPtr
<
nsICrashReporter
>
cr
=
do_GetService
(
"
mozilla
.
org
/
toolkit
/
crash
-
reporter
;
1
"
)
;
if
(
cr
)
{
cr
-
>
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
bug836263
-
size
"
)
nsPrintfCString
(
"
%
x
"
utf8String
.
Length
(
)
)
)
;
cr
-
>
RegisterAppMemory
(
uint64_t
(
utf8String
.
BeginReading
(
)
)
std
:
:
min
(
0x1000U
utf8String
.
Length
(
)
)
)
;
}
#
endif
MOZ_CRASH
(
"
bug836263
"
)
;
}
theString
-
>
SetData
(
wdata
)
;
theString
.
forget
(
reinterpret_cast
<
nsISupportsString
*
*
>
(
aRetVal
)
)
;
}
return
rv
;
}
NS_WARNING
(
"
nsPrefBranch
:
:
GetComplexValue
-
Unsupported
interface
type
"
)
;
return
NS_NOINTERFACE
;
}
nsresult
nsPrefBranch
:
:
CheckSanityOfStringLength
(
const
char
*
aPrefName
const
char
*
aValue
)
{
if
(
!
aValue
)
{
return
NS_OK
;
}
return
CheckSanityOfStringLength
(
aPrefName
strlen
(
aValue
)
)
;
}
nsresult
nsPrefBranch
:
:
CheckSanityOfStringLength
(
const
char
*
aPrefName
const
nsAString
&
aValue
)
{
return
CheckSanityOfStringLength
(
aPrefName
aValue
.
Length
(
)
)
;
}
nsresult
nsPrefBranch
:
:
CheckSanityOfStringLength
(
const
char
*
aPrefName
const
nsACString
&
aValue
)
{
return
CheckSanityOfStringLength
(
aPrefName
aValue
.
Length
(
)
)
;
}
nsresult
nsPrefBranch
:
:
CheckSanityOfStringLength
(
const
char
*
aPrefName
const
uint32_t
aLength
)
{
if
(
aLength
>
MAX_PREF_LENGTH
)
{
return
NS_ERROR_ILLEGAL_VALUE
;
}
if
(
aLength
<
=
MAX_ADVISABLE_PREF_LENGTH
)
{
return
NS_OK
;
}
nsresult
rv
;
nsCOMPtr
<
nsIConsoleService
>
console
=
do_GetService
(
"
mozilla
.
org
/
consoleservice
;
1
"
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsAutoCString
message
(
nsPrintfCString
(
"
Warning
:
attempting
to
write
%
d
bytes
to
preference
%
s
.
This
is
bad
"
"
for
general
performance
and
memory
usage
.
Such
an
amount
of
data
"
"
should
rather
be
written
to
an
external
file
.
This
preference
will
"
"
not
be
sent
to
any
content
processes
.
"
aLength
GetPrefName
(
aPrefName
)
.
get
(
)
)
)
;
rv
=
console
-
>
LogStringMessage
(
NS_ConvertUTF8toUTF16
(
message
)
.
get
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
NS_OK
;
}
void
nsPrefBranch
:
:
ReportToConsole
(
const
nsAString
&
aMessage
)
{
nsresult
rv
;
nsCOMPtr
<
nsIConsoleService
>
console
=
do_GetService
(
"
mozilla
.
org
/
consoleservice
;
1
"
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
;
}
nsAutoString
message
(
aMessage
)
;
console
-
>
LogStringMessage
(
message
.
get
(
)
)
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
SetComplexValue
(
const
char
*
aPrefName
const
nsIID
&
aType
nsISupports
*
aValue
)
{
ENSURE_MAIN_PROCESS
(
"
SetComplexValue
"
aPrefName
)
;
NS_ENSURE_ARG
(
aPrefName
)
;
nsresult
rv
=
NS_NOINTERFACE
;
if
(
aType
.
Equals
(
NS_GET_IID
(
nsIFile
)
)
)
{
nsCOMPtr
<
nsIFile
>
file
=
do_QueryInterface
(
aValue
)
;
if
(
!
file
)
{
return
NS_NOINTERFACE
;
}
nsAutoCString
descriptorString
;
rv
=
file
-
>
GetPersistentDescriptor
(
descriptorString
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
SetCharPrefInternal
(
aPrefName
descriptorString
.
get
(
)
)
;
}
return
rv
;
}
if
(
aType
.
Equals
(
NS_GET_IID
(
nsIRelativeFilePref
)
)
)
{
nsCOMPtr
<
nsIRelativeFilePref
>
relFilePref
=
do_QueryInterface
(
aValue
)
;
if
(
!
relFilePref
)
{
return
NS_NOINTERFACE
;
}
nsCOMPtr
<
nsIFile
>
file
;
relFilePref
-
>
GetFile
(
getter_AddRefs
(
file
)
)
;
if
(
!
file
)
{
return
NS_NOINTERFACE
;
}
nsAutoCString
relativeToKey
;
(
void
)
relFilePref
-
>
GetRelativeToKey
(
relativeToKey
)
;
nsCOMPtr
<
nsIFile
>
relativeToFile
;
nsCOMPtr
<
nsIProperties
>
directoryService
(
do_GetService
(
NS_DIRECTORY_SERVICE_CONTRACTID
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
directoryService
-
>
Get
(
relativeToKey
.
get
(
)
NS_GET_IID
(
nsIFile
)
getter_AddRefs
(
relativeToFile
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsAutoCString
relDescriptor
;
rv
=
file
-
>
GetRelativeDescriptor
(
relativeToFile
relDescriptor
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsAutoCString
descriptorString
;
descriptorString
.
Append
(
'
[
'
)
;
descriptorString
.
Append
(
relativeToKey
)
;
descriptorString
.
Append
(
'
]
'
)
;
descriptorString
.
Append
(
relDescriptor
)
;
return
SetCharPrefInternal
(
aPrefName
descriptorString
.
get
(
)
)
;
}
if
(
aType
.
Equals
(
NS_GET_IID
(
nsISupportsString
)
)
|
|
aType
.
Equals
(
NS_GET_IID
(
nsIPrefLocalizedString
)
)
)
{
nsCOMPtr
<
nsISupportsString
>
theString
=
do_QueryInterface
(
aValue
)
;
if
(
theString
)
{
nsString
wideString
;
rv
=
theString
-
>
GetData
(
wideString
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
CheckSanityOfStringLength
(
aPrefName
wideString
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
SetCharPrefInternal
(
aPrefName
NS_ConvertUTF16toUTF8
(
wideString
)
.
get
(
)
)
;
}
}
return
rv
;
}
NS_WARNING
(
"
nsPrefBranch
:
:
SetComplexValue
-
Unsupported
interface
type
"
)
;
return
NS_NOINTERFACE
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
ClearUserPref
(
const
char
*
aPrefName
)
{
ENSURE_MAIN_PROCESS
(
"
ClearUserPref
"
aPrefName
)
;
NS_ENSURE_ARG
(
aPrefName
)
;
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
return
PREF_ClearUserPref
(
pref
.
get
(
)
)
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
PrefHasUserValue
(
const
char
*
aPrefName
bool
*
aRetVal
)
{
NS_ENSURE_ARG_POINTER
(
aRetVal
)
;
NS_ENSURE_ARG
(
aPrefName
)
;
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
*
aRetVal
=
PREF_HasUserPref
(
pref
.
get
(
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
LockPref
(
const
char
*
aPrefName
)
{
ENSURE_MAIN_PROCESS
(
"
LockPref
"
aPrefName
)
;
NS_ENSURE_ARG
(
aPrefName
)
;
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
return
PREF_LockPref
(
pref
.
get
(
)
true
)
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
PrefIsLocked
(
const
char
*
aPrefName
bool
*
aRetVal
)
{
ENSURE_MAIN_PROCESS
(
"
PrefIsLocked
"
aPrefName
)
;
NS_ENSURE_ARG_POINTER
(
aRetVal
)
;
NS_ENSURE_ARG
(
aPrefName
)
;
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
*
aRetVal
=
PREF_PrefIsLocked
(
pref
.
get
(
)
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
UnlockPref
(
const
char
*
aPrefName
)
{
ENSURE_MAIN_PROCESS
(
"
UnlockPref
"
aPrefName
)
;
NS_ENSURE_ARG
(
aPrefName
)
;
const
PrefName
&
pref
=
GetPrefName
(
aPrefName
)
;
return
PREF_LockPref
(
pref
.
get
(
)
false
)
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
ResetBranch
(
const
char
*
aStartingAt
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
DeleteBranch
(
const
char
*
aStartingAt
)
{
ENSURE_MAIN_PROCESS
(
"
DeleteBranch
"
aStartingAt
)
;
NS_ENSURE_ARG
(
aStartingAt
)
;
const
PrefName
&
pref
=
GetPrefName
(
aStartingAt
)
;
return
PREF_DeleteBranch
(
pref
.
get
(
)
)
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
GetChildList
(
const
char
*
aStartingAt
uint32_t
*
aCount
char
*
*
*
aChildArray
)
{
char
*
*
outArray
;
int32_t
numPrefs
;
int32_t
dwIndex
;
AutoTArray
<
nsCString
32
>
prefArray
;
NS_ENSURE_ARG
(
aStartingAt
)
;
NS_ENSURE_ARG_POINTER
(
aCount
)
;
NS_ENSURE_ARG_POINTER
(
aChildArray
)
;
*
aChildArray
=
nullptr
;
*
aCount
=
0
;
const
PrefName
&
parent
=
GetPrefName
(
aStartingAt
)
;
size_t
parentLen
=
parent
.
Length
(
)
;
for
(
auto
iter
=
gHashTable
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
entry
=
static_cast
<
PrefHashEntry
*
>
(
iter
.
Get
(
)
)
;
if
(
strncmp
(
entry
-
>
mKey
parent
.
get
(
)
parentLen
)
=
=
0
)
{
prefArray
.
AppendElement
(
entry
-
>
mKey
)
;
}
}
numPrefs
=
prefArray
.
Length
(
)
;
if
(
numPrefs
)
{
outArray
=
(
char
*
*
)
moz_xmalloc
(
numPrefs
*
sizeof
(
char
*
)
)
;
for
(
dwIndex
=
0
;
dwIndex
<
numPrefs
;
+
+
dwIndex
)
{
const
nsCString
&
element
=
prefArray
[
dwIndex
]
;
outArray
[
dwIndex
]
=
(
char
*
)
nsMemory
:
:
Clone
(
element
.
get
(
)
+
mPrefRoot
.
Length
(
)
element
.
Length
(
)
-
mPrefRoot
.
Length
(
)
+
1
)
;
if
(
!
outArray
[
dwIndex
]
)
{
NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY
(
dwIndex
outArray
)
;
return
NS_ERROR_OUT_OF_MEMORY
;
}
}
*
aChildArray
=
outArray
;
}
*
aCount
=
numPrefs
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
AddObserver
(
const
char
*
aDomain
nsIObserver
*
aObserver
bool
aHoldWeak
)
{
PrefCallback
*
pCallback
;
NS_ENSURE_ARG
(
aDomain
)
;
NS_ENSURE_ARG
(
aObserver
)
;
if
(
aHoldWeak
)
{
nsCOMPtr
<
nsISupportsWeakReference
>
weakRefFactory
=
do_QueryInterface
(
aObserver
)
;
if
(
!
weakRefFactory
)
{
return
NS_ERROR_INVALID_ARG
;
}
pCallback
=
new
PrefCallback
(
aDomain
weakRefFactory
this
)
;
}
else
{
pCallback
=
new
PrefCallback
(
aDomain
aObserver
this
)
;
}
auto
p
=
mObservers
.
LookupForAdd
(
pCallback
)
;
if
(
p
)
{
NS_WARNING
(
"
Ignoring
duplicate
observer
.
"
)
;
delete
pCallback
;
return
NS_OK
;
}
p
.
OrInsert
(
[
&
pCallback
]
(
)
{
return
pCallback
;
}
)
;
const
PrefName
&
pref
=
GetPrefName
(
aDomain
)
;
PREF_RegisterCallback
(
pref
.
get
(
)
NotifyObserver
pCallback
false
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
RemoveObserver
(
const
char
*
aDomain
nsIObserver
*
aObserver
)
{
NS_ENSURE_ARG
(
aDomain
)
;
NS_ENSURE_ARG
(
aObserver
)
;
nsresult
rv
=
NS_OK
;
if
(
mFreeingObserverList
)
{
return
NS_OK
;
}
PrefCallback
key
(
aDomain
aObserver
this
)
;
nsAutoPtr
<
PrefCallback
>
pCallback
;
mObservers
.
Remove
(
&
key
&
pCallback
)
;
if
(
pCallback
)
{
const
PrefName
&
pref
=
GetPrefName
(
aDomain
)
;
rv
=
PREF_UnregisterCallback
(
pref
.
get
(
)
NotifyObserver
pCallback
)
;
}
return
rv
;
}
NS_IMETHODIMP
nsPrefBranch
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
nsCRT
:
:
strcmp
(
aTopic
NS_XPCOM_SHUTDOWN_OBSERVER_ID
)
)
{
FreeObserverList
(
)
;
}
return
NS_OK
;
}
void
nsPrefBranch
:
:
NotifyObserver
(
const
char
*
aNewPref
void
*
aData
)
{
PrefCallback
*
pCallback
=
(
PrefCallback
*
)
aData
;
nsCOMPtr
<
nsIObserver
>
observer
=
pCallback
-
>
GetObserver
(
)
;
if
(
!
observer
)
{
pCallback
-
>
GetPrefBranch
(
)
-
>
RemoveExpiredCallback
(
pCallback
)
;
return
;
}
uint32_t
len
=
pCallback
-
>
GetPrefBranch
(
)
-
>
GetRootLength
(
)
;
nsAutoCString
suffix
(
aNewPref
+
len
)
;
observer
-
>
Observe
(
static_cast
<
nsIPrefBranch
*
>
(
pCallback
-
>
GetPrefBranch
(
)
)
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
NS_ConvertASCIItoUTF16
(
suffix
)
.
get
(
)
)
;
}
size_t
nsPrefBranch
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
{
size_t
n
=
aMallocSizeOf
(
this
)
;
n
+
=
mPrefRoot
.
SizeOfExcludingThisIfUnshared
(
aMallocSizeOf
)
;
n
+
=
mObservers
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
return
n
;
}
void
nsPrefBranch
:
:
FreeObserverList
(
)
{
mFreeingObserverList
=
true
;
for
(
auto
iter
=
mObservers
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsAutoPtr
<
PrefCallback
>
&
callback
=
iter
.
Data
(
)
;
nsPrefBranch
*
prefBranch
=
callback
-
>
GetPrefBranch
(
)
;
const
PrefName
&
pref
=
prefBranch
-
>
GetPrefName
(
callback
-
>
GetDomain
(
)
.
get
(
)
)
;
PREF_UnregisterCallback
(
pref
.
get
(
)
nsPrefBranch
:
:
NotifyObserver
callback
)
;
iter
.
Remove
(
)
;
}
mFreeingObserverList
=
false
;
}
void
nsPrefBranch
:
:
RemoveExpiredCallback
(
PrefCallback
*
aCallback
)
{
NS_PRECONDITION
(
aCallback
-
>
IsExpired
(
)
"
Callback
should
be
expired
.
"
)
;
mObservers
.
Remove
(
aCallback
)
;
}
nsresult
nsPrefBranch
:
:
GetDefaultFromPropertiesFile
(
const
char
*
aPrefName
nsAString
&
aReturn
)
{
nsCString
propertyFileURL
;
nsresult
rv
=
PREF_CopyCharPref
(
aPrefName
getter_Copies
(
propertyFileURL
)
true
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsIStringBundleService
>
bundleService
=
mozilla
:
:
services
:
:
GetStringBundleService
(
)
;
if
(
!
bundleService
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIStringBundle
>
bundle
;
rv
=
bundleService
-
>
CreateBundle
(
propertyFileURL
.
get
(
)
getter_AddRefs
(
bundle
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
return
bundle
-
>
GetStringFromName
(
aPrefName
aReturn
)
;
}
nsPrefBranch
:
:
PrefName
nsPrefBranch
:
:
GetPrefName
(
const
char
*
aPrefName
)
const
{
NS_ASSERTION
(
aPrefName
"
null
pref
name
!
"
)
;
if
(
mPrefRoot
.
IsEmpty
(
)
)
{
return
PrefName
(
aPrefName
)
;
}
return
PrefName
(
mPrefRoot
+
nsDependentCString
(
aPrefName
)
)
;
}
nsPrefLocalizedString
:
:
nsPrefLocalizedString
(
)
=
default
;
nsPrefLocalizedString
:
:
~
nsPrefLocalizedString
(
)
=
default
;
NS_IMPL_ADDREF
(
nsPrefLocalizedString
)
NS_IMPL_RELEASE
(
nsPrefLocalizedString
)
NS_INTERFACE_MAP_BEGIN
(
nsPrefLocalizedString
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIPrefLocalizedString
)
NS_INTERFACE_MAP_ENTRY
(
nsIPrefLocalizedString
)
NS_INTERFACE_MAP_ENTRY
(
nsISupportsString
)
NS_INTERFACE_MAP_END
nsresult
nsPrefLocalizedString
:
:
Init
(
)
{
nsresult
rv
;
mUnicodeString
=
do_CreateInstance
(
NS_SUPPORTS_STRING_CONTRACTID
&
rv
)
;
return
rv
;
}
NS_IMPL_ISUPPORTS
(
nsRelativeFilePref
nsIRelativeFilePref
)
nsRelativeFilePref
:
:
nsRelativeFilePref
(
)
=
default
;
nsRelativeFilePref
:
:
~
nsRelativeFilePref
(
)
=
default
;
NS_IMETHODIMP
nsRelativeFilePref
:
:
GetFile
(
nsIFile
*
*
aFile
)
{
NS_ENSURE_ARG_POINTER
(
aFile
)
;
*
aFile
=
mFile
;
NS_IF_ADDREF
(
*
aFile
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsRelativeFilePref
:
:
SetFile
(
nsIFile
*
aFile
)
{
mFile
=
aFile
;
return
NS_OK
;
}
NS_IMETHODIMP
nsRelativeFilePref
:
:
GetRelativeToKey
(
nsACString
&
aRelativeToKey
)
{
aRelativeToKey
.
Assign
(
mRelativeToKey
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsRelativeFilePref
:
:
SetRelativeToKey
(
const
nsACString
&
aRelativeToKey
)
{
mRelativeToKey
.
Assign
(
aRelativeToKey
)
;
return
NS_OK
;
}
namespace
mozilla
{
#
define
INITIAL_PREF_FILES
10
static
NS_DEFINE_CID
(
kZipReaderCID
NS_ZIPREADER_CID
)
;
void
Preferences
:
:
HandleDirty
(
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
if
(
!
gHashTable
|
|
!
sPreferences
)
{
return
;
}
if
(
sPreferences
-
>
mProfileShutdown
)
{
NS_WARNING
(
"
Setting
user
pref
after
profile
shutdown
.
"
)
;
return
;
}
if
(
!
sPreferences
-
>
mDirty
)
{
sPreferences
-
>
mDirty
=
true
;
if
(
sPreferences
-
>
mCurrentFile
&
&
sPreferences
-
>
AllowOffMainThreadSave
(
)
&
&
!
sPreferences
-
>
mSavePending
)
{
sPreferences
-
>
mSavePending
=
true
;
static
const
int
PREF_DELAY_MS
=
500
;
NS_DelayedDispatchToCurrentThread
(
mozilla
:
:
NewRunnableMethod
(
"
Preferences
:
:
SavePrefFileAsynchronous
"
sPreferences
&
Preferences
:
:
SavePrefFileAsynchronous
)
PREF_DELAY_MS
)
;
}
}
}
static
nsresult
openPrefFile
(
nsIFile
*
aFile
)
;
static
Result
<
Ok
const
char
*
>
pref_InitInitialObjects
(
)
;
static
nsresult
pref_LoadPrefsInDirList
(
const
char
*
aListId
)
;
static
const
char
kTelemetryPref
[
]
=
"
toolkit
.
telemetry
.
enabled
"
;
static
const
char
kOldTelemetryPref
[
]
=
"
toolkit
.
telemetry
.
enabledPreRelease
"
;
static
const
char
kChannelPref
[
]
=
"
app
.
update
.
channel
"
;
static
const
char
kPrefFileHeader
[
]
=
"
#
Mozilla
User
Preferences
"
NS_LINEBREAK
NS_LINEBREAK
"
/
*
Do
not
edit
this
file
.
"
NS_LINEBREAK
"
*
"
NS_LINEBREAK
"
*
If
you
make
changes
to
this
file
while
the
application
is
running
"
NS_LINEBREAK
"
*
the
changes
will
be
overwritten
when
the
application
exits
.
"
NS_LINEBREAK
"
*
"
NS_LINEBREAK
"
*
To
make
a
manual
change
to
preferences
you
can
visit
the
URL
"
"
about
:
config
"
NS_LINEBREAK
"
*
/
"
NS_LINEBREAK
NS_LINEBREAK
;
Preferences
*
Preferences
:
:
sPreferences
=
nullptr
;
nsIPrefBranch
*
Preferences
:
:
sRootBranch
=
nullptr
;
nsIPrefBranch
*
Preferences
:
:
sDefaultRootBranch
=
nullptr
;
bool
Preferences
:
:
sShutdown
=
false
;
static
int32_t
sAllowOMTPrefWrite
=
-
1
;
class
ValueObserverHashKey
:
public
PLDHashEntryHdr
{
public
:
typedef
ValueObserverHashKey
*
KeyType
;
typedef
const
ValueObserverHashKey
*
KeyTypePointer
;
static
const
ValueObserverHashKey
*
KeyToPointer
(
ValueObserverHashKey
*
aKey
)
{
return
aKey
;
}
static
PLDHashNumber
HashKey
(
const
ValueObserverHashKey
*
aKey
)
{
PLDHashNumber
hash
=
HashString
(
aKey
-
>
mPrefName
)
;
hash
=
AddToHash
(
hash
aKey
-
>
mMatchKind
)
;
return
AddToHash
(
hash
aKey
-
>
mCallback
)
;
}
ValueObserverHashKey
(
const
char
*
aPref
PrefChangedFunc
aCallback
Preferences
:
:
MatchKind
aMatchKind
)
:
mPrefName
(
aPref
)
mCallback
(
aCallback
)
mMatchKind
(
aMatchKind
)
{
}
explicit
ValueObserverHashKey
(
const
ValueObserverHashKey
*
aOther
)
:
mPrefName
(
aOther
-
>
mPrefName
)
mCallback
(
aOther
-
>
mCallback
)
mMatchKind
(
aOther
-
>
mMatchKind
)
{
}
bool
KeyEquals
(
const
ValueObserverHashKey
*
aOther
)
const
{
return
mCallback
=
=
aOther
-
>
mCallback
&
&
mPrefName
=
=
aOther
-
>
mPrefName
&
&
mMatchKind
=
=
aOther
-
>
mMatchKind
;
}
ValueObserverHashKey
*
GetKey
(
)
const
{
return
const_cast
<
ValueObserverHashKey
*
>
(
this
)
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
nsCString
mPrefName
;
PrefChangedFunc
mCallback
;
Preferences
:
:
MatchKind
mMatchKind
;
}
;
class
ValueObserver
final
:
public
nsIObserver
public
ValueObserverHashKey
{
~
ValueObserver
(
)
{
Preferences
:
:
RemoveObserver
(
this
mPrefName
.
get
(
)
)
;
}
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
ValueObserver
(
const
char
*
aPref
PrefChangedFunc
aCallback
Preferences
:
:
MatchKind
aMatchKind
)
:
ValueObserverHashKey
(
aPref
aCallback
aMatchKind
)
{
}
void
AppendClosure
(
void
*
aClosure
)
{
mClosures
.
AppendElement
(
aClosure
)
;
}
void
RemoveClosure
(
void
*
aClosure
)
{
mClosures
.
RemoveElement
(
aClosure
)
;
}
bool
HasNoClosures
(
)
{
return
mClosures
.
Length
(
)
=
=
0
;
}
nsTArray
<
void
*
>
mClosures
;
}
;
NS_IMPL_ISUPPORTS
(
ValueObserver
nsIObserver
)
NS_IMETHODIMP
ValueObserver
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
NS_ASSERTION
(
!
nsCRT
:
:
strcmp
(
aTopic
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
)
"
invalid
topic
"
)
;
NS_ConvertUTF16toUTF8
data
(
aData
)
;
if
(
mMatchKind
=
=
Preferences
:
:
ExactMatch
&
&
!
mPrefName
.
EqualsASCII
(
data
.
get
(
)
)
)
{
return
NS_OK
;
}
for
(
uint32_t
i
=
0
;
i
<
mClosures
.
Length
(
)
;
i
+
+
)
{
mCallback
(
data
.
get
(
)
mClosures
.
ElementAt
(
i
)
)
;
}
return
NS_OK
;
}
class
PreferencesWriter
final
{
public
:
PreferencesWriter
(
)
=
default
;
static
nsresult
Write
(
nsIFile
*
aFile
PrefSaveData
&
aPrefs
)
{
nsCOMPtr
<
nsIOutputStream
>
outStreamSink
;
nsCOMPtr
<
nsIOutputStream
>
outStream
;
uint32_t
writeAmount
;
nsresult
rv
;
rv
=
NS_NewSafeLocalFileOutputStream
(
getter_AddRefs
(
outStreamSink
)
aFile
-
1
0600
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
rv
=
NS_NewBufferedOutputStream
(
getter_AddRefs
(
outStream
)
outStreamSink
.
forget
(
)
4096
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
struct
CharComparator
{
bool
LessThan
(
const
mozilla
:
:
UniqueFreePtr
<
char
>
&
a
const
mozilla
:
:
UniqueFreePtr
<
char
>
&
b
)
const
{
return
strcmp
(
a
.
get
(
)
b
.
get
(
)
)
<
0
;
}
bool
Equals
(
const
mozilla
:
:
UniqueFreePtr
<
char
>
&
a
const
mozilla
:
:
UniqueFreePtr
<
char
>
&
b
)
const
{
return
strcmp
(
a
.
get
(
)
b
.
get
(
)
)
=
=
0
;
}
}
;
aPrefs
.
Sort
(
CharComparator
(
)
)
;
outStream
-
>
Write
(
kPrefFileHeader
sizeof
(
kPrefFileHeader
)
-
1
&
writeAmount
)
;
for
(
auto
&
prefptr
:
aPrefs
)
{
char
*
pref
=
prefptr
.
get
(
)
;
MOZ_ASSERT
(
pref
)
;
outStream
-
>
Write
(
pref
strlen
(
pref
)
&
writeAmount
)
;
outStream
-
>
Write
(
NS_LINEBREAK
NS_LINEBREAK_LEN
&
writeAmount
)
;
}
nsCOMPtr
<
nsISafeOutputStream
>
safeStream
=
do_QueryInterface
(
outStream
)
;
NS_ASSERTION
(
safeStream
"
expected
a
safe
output
stream
!
"
)
;
if
(
safeStream
)
{
rv
=
safeStream
-
>
Finish
(
)
;
}
#
ifdef
DEBUG
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
failed
to
save
prefs
file
!
possible
data
loss
"
)
;
}
#
endif
return
rv
;
}
static
void
Flush
(
)
{
if
(
!
sPendingWriteData
.
compareExchange
(
nullptr
nullptr
)
)
{
nsresult
rv
=
NS_OK
;
nsCOMPtr
<
nsIEventTarget
>
target
=
do_GetService
(
NS_STREAMTRANSPORTSERVICE_CONTRACTID
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
target
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
Preferences_dummy
"
[
]
{
}
)
nsIEventTarget
:
:
DISPATCH_SYNC
)
;
}
}
}
static
Atomic
<
PrefSaveData
*
>
sPendingWriteData
;
}
;
Atomic
<
PrefSaveData
*
>
PreferencesWriter
:
:
sPendingWriteData
(
nullptr
)
;
class
PWRunnable
:
public
Runnable
{
public
:
explicit
PWRunnable
(
nsIFile
*
aFile
)
:
Runnable
(
"
PWRunnable
"
)
mFile
(
aFile
)
{
}
NS_IMETHOD
Run
(
)
override
{
mozilla
:
:
UniquePtr
<
PrefSaveData
>
prefs
(
PreferencesWriter
:
:
sPendingWriteData
.
exchange
(
nullptr
)
)
;
nsresult
rv
=
NS_OK
;
if
(
prefs
)
{
rv
=
PreferencesWriter
:
:
Write
(
mFile
*
prefs
)
;
nsresult
rvCopy
=
rv
;
nsCOMPtr
<
nsIFile
>
fileCopy
(
mFile
)
;
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
NS_NewRunnableFunction
(
"
Preferences
:
:
WriterRunnable
"
[
fileCopy
rvCopy
]
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
NS_FAILED
(
rvCopy
)
)
{
Preferences
:
:
HandleDirty
(
)
;
}
}
)
)
;
}
return
rv
;
}
protected
:
nsCOMPtr
<
nsIFile
>
mFile
;
}
;
struct
CacheData
{
void
*
mCacheLocation
;
union
{
bool
mDefaultValueBool
;
int32_t
mDefaultValueInt
;
uint32_t
mDefaultValueUint
;
float
mDefaultValueFloat
;
}
;
}
;
static
const
char
*
gCacheDataDesc
=
"
untouched
"
;
static
nsTArray
<
nsAutoPtr
<
CacheData
>
>
*
gCacheData
=
nullptr
;
static
nsRefPtrHashtable
<
ValueObserverHashKey
ValueObserver
>
*
gObserverTable
=
nullptr
;
#
ifdef
DEBUG
static
bool
HaveExistingCacheFor
(
void
*
aPtr
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
gCacheData
)
{
for
(
size_t
i
=
0
count
=
gCacheData
-
>
Length
(
)
;
i
<
count
;
+
+
i
)
{
if
(
(
*
gCacheData
)
[
i
]
-
>
mCacheLocation
=
=
aPtr
)
{
return
true
;
}
}
}
return
false
;
}
static
void
AssertNotAlreadyCached
(
const
char
*
aPrefType
const
char
*
aPref
void
*
aPtr
)
{
if
(
HaveExistingCacheFor
(
aPtr
)
)
{
fprintf_stderr
(
stderr
"
Attempt
to
add
a
%
s
pref
cache
for
preference
'
%
s
'
at
address
'
%
p
'
"
"
was
made
.
However
a
pref
was
already
cached
at
this
address
.
\
n
"
aPrefType
aPref
aPtr
)
;
MOZ_ASSERT
(
false
"
Should
not
have
an
existing
pref
cache
for
this
address
"
)
;
}
}
#
endif
static
void
ReportToConsole
(
const
char
*
aMessage
int
aLine
bool
aError
)
{
nsPrintfCString
message
(
"
*
*
Preference
parsing
%
s
(
line
%
d
)
=
%
s
*
*
\
n
"
(
aError
?
"
error
"
:
"
warning
"
)
aLine
aMessage
)
;
nsPrefBranch
:
:
ReportToConsole
(
NS_ConvertUTF8toUTF16
(
message
.
get
(
)
)
)
;
}
int64_t
Preferences
:
:
SizeOfIncludingThisAndOtherStuff
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
0
)
;
size_t
n
=
aMallocSizeOf
(
sPreferences
)
;
if
(
gHashTable
)
{
n
+
=
gHashTable
-
>
ShallowSizeOfIncludingThis
(
aMallocSizeOf
)
;
}
if
(
gCacheData
)
{
n
+
=
gCacheData
-
>
ShallowSizeOfIncludingThis
(
aMallocSizeOf
)
;
for
(
uint32_t
i
=
0
count
=
gCacheData
-
>
Length
(
)
;
i
<
count
;
+
+
i
)
{
n
+
=
aMallocSizeOf
(
(
*
gCacheData
)
[
i
]
)
;
}
}
if
(
gObserverTable
)
{
n
+
=
gObserverTable
-
>
ShallowSizeOfIncludingThis
(
aMallocSizeOf
)
;
for
(
auto
iter
=
gObserverTable
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
n
+
=
iter
.
Key
(
)
-
>
mPrefName
.
SizeOfExcludingThisIfUnshared
(
aMallocSizeOf
)
;
n
+
=
iter
.
Data
(
)
-
>
mClosures
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
}
if
(
sRootBranch
)
{
n
+
=
reinterpret_cast
<
nsPrefBranch
*
>
(
sRootBranch
)
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
}
if
(
sDefaultRootBranch
)
{
n
+
=
reinterpret_cast
<
nsPrefBranch
*
>
(
sDefaultRootBranch
)
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
}
n
+
=
pref_SizeOfPrivateData
(
aMallocSizeOf
)
;
return
n
;
}
class
PreferenceServiceReporter
final
:
public
nsIMemoryReporter
{
~
PreferenceServiceReporter
(
)
{
}
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIMEMORYREPORTER
protected
:
static
const
uint32_t
kSuspectReferentCount
=
1000
;
}
;
NS_IMPL_ISUPPORTS
(
PreferenceServiceReporter
nsIMemoryReporter
)
MOZ_DEFINE_MALLOC_SIZE_OF
(
PreferenceServiceMallocSizeOf
)
NS_IMETHODIMP
PreferenceServiceReporter
:
:
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
{
MOZ_COLLECT_REPORT
(
"
explicit
/
preferences
"
KIND_HEAP
UNITS_BYTES
Preferences
:
:
SizeOfIncludingThisAndOtherStuff
(
PreferenceServiceMallocSizeOf
)
"
Memory
used
by
the
preferences
system
.
"
)
;
nsPrefBranch
*
rootBranch
=
static_cast
<
nsPrefBranch
*
>
(
Preferences
:
:
GetRootBranch
(
)
)
;
if
(
!
rootBranch
)
{
return
NS_OK
;
}
size_t
numStrong
=
0
;
size_t
numWeakAlive
=
0
;
size_t
numWeakDead
=
0
;
nsTArray
<
nsCString
>
suspectPreferences
;
nsDataHashtable
<
nsCStringHashKey
uint32_t
>
prefCounter
;
for
(
auto
iter
=
rootBranch
-
>
mObservers
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsAutoPtr
<
PrefCallback
>
&
callback
=
iter
.
Data
(
)
;
nsPrefBranch
*
prefBranch
=
callback
-
>
GetPrefBranch
(
)
;
const
auto
&
pref
=
prefBranch
-
>
GetPrefName
(
callback
-
>
GetDomain
(
)
.
get
(
)
)
;
if
(
callback
-
>
IsWeak
(
)
)
{
nsCOMPtr
<
nsIObserver
>
callbackRef
=
do_QueryReferent
(
callback
-
>
mWeakRef
)
;
if
(
callbackRef
)
{
numWeakAlive
+
+
;
}
else
{
numWeakDead
+
+
;
}
}
else
{
numStrong
+
+
;
}
nsDependentCString
prefString
(
pref
.
get
(
)
)
;
uint32_t
oldCount
=
0
;
prefCounter
.
Get
(
prefString
&
oldCount
)
;
uint32_t
currentCount
=
oldCount
+
1
;
prefCounter
.
Put
(
prefString
currentCount
)
;
if
(
currentCount
=
=
kSuspectReferentCount
)
{
suspectPreferences
.
AppendElement
(
prefString
)
;
}
}
for
(
uint32_t
i
=
0
;
i
<
suspectPreferences
.
Length
(
)
;
i
+
+
)
{
nsCString
&
suspect
=
suspectPreferences
[
i
]
;
uint32_t
totalReferentCount
=
0
;
prefCounter
.
Get
(
suspect
&
totalReferentCount
)
;
nsPrintfCString
suspectPath
(
"
preference
-
service
-
suspect
/
"
"
referent
(
pref
=
%
s
)
"
suspect
.
get
(
)
)
;
aHandleReport
-
>
Callback
(
EmptyCString
(
)
suspectPath
KIND_OTHER
UNITS_COUNT
totalReferentCount
NS_LITERAL_CSTRING
(
"
A
preference
with
a
suspiciously
large
number
referents
(
symptom
of
a
"
"
leak
)
.
"
)
aData
)
;
}
MOZ_COLLECT_REPORT
(
"
preference
-
service
/
referent
/
strong
"
KIND_OTHER
UNITS_COUNT
numStrong
"
The
number
of
strong
referents
held
by
the
preference
service
.
"
)
;
MOZ_COLLECT_REPORT
(
"
preference
-
service
/
referent
/
weak
/
alive
"
KIND_OTHER
UNITS_COUNT
numWeakAlive
"
The
number
of
weak
referents
held
by
the
preference
service
that
are
"
"
still
alive
.
"
)
;
MOZ_COLLECT_REPORT
(
"
preference
-
service
/
referent
/
weak
/
dead
"
KIND_OTHER
UNITS_COUNT
numWeakDead
"
The
number
of
weak
referents
held
by
the
preference
service
that
are
"
"
dead
.
"
)
;
return
NS_OK
;
}
namespace
{
class
AddPreferencesMemoryReporterRunnable
:
public
Runnable
{
public
:
AddPreferencesMemoryReporterRunnable
(
)
:
Runnable
(
"
AddPreferencesMemoryReporterRunnable
"
)
{
}
NS_IMETHOD
Run
(
)
override
{
return
RegisterStrongMemoryReporter
(
new
PreferenceServiceReporter
(
)
)
;
}
}
;
}
already_AddRefed
<
Preferences
>
Preferences
:
:
GetInstanceForService
(
)
{
if
(
sPreferences
)
{
return
do_AddRef
(
sPreferences
)
;
}
if
(
sShutdown
)
{
gCacheDataDesc
=
"
shutting
down
in
GetInstanceForService
(
)
"
;
return
nullptr
;
}
sRootBranch
=
new
nsPrefBranch
(
"
"
false
)
;
NS_ADDREF
(
sRootBranch
)
;
sDefaultRootBranch
=
new
nsPrefBranch
(
"
"
true
)
;
NS_ADDREF
(
sDefaultRootBranch
)
;
sPreferences
=
new
Preferences
(
)
;
NS_ADDREF
(
sPreferences
)
;
Result
<
Ok
const
char
*
>
res
=
sPreferences
-
>
Init
(
)
;
if
(
res
.
isErr
(
)
)
{
gCacheDataDesc
=
res
.
unwrapErr
(
)
;
NS_RELEASE
(
sPreferences
)
;
return
nullptr
;
}
gCacheData
=
new
nsTArray
<
nsAutoPtr
<
CacheData
>
>
(
)
;
gCacheDataDesc
=
"
set
by
GetInstanceForService
(
)
"
;
gObserverTable
=
new
nsRefPtrHashtable
<
ValueObserverHashKey
ValueObserver
>
(
)
;
RefPtr
<
AddPreferencesMemoryReporterRunnable
>
runnable
=
new
AddPreferencesMemoryReporterRunnable
(
)
;
NS_DispatchToMainThread
(
runnable
)
;
return
do_AddRef
(
sPreferences
)
;
}
bool
Preferences
:
:
IsServiceAvailable
(
)
{
return
!
!
sPreferences
;
}
bool
Preferences
:
:
InitStaticMembers
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
|
|
mozilla
:
:
ServoStyleSet
:
:
IsInServoTraversal
(
)
)
;
if
(
!
sShutdown
&
&
!
sPreferences
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIPrefService
>
prefService
=
do_GetService
(
NS_PREFSERVICE_CONTRACTID
)
;
}
return
sPreferences
!
=
nullptr
;
}
void
Preferences
:
:
Shutdown
(
)
{
if
(
!
sShutdown
)
{
sShutdown
=
true
;
if
(
sPreferences
)
{
sPreferences
-
>
Release
(
)
;
}
}
}
Preferences
:
:
Preferences
(
)
=
default
;
Preferences
:
:
~
Preferences
(
)
{
NS_ASSERTION
(
sPreferences
=
=
this
"
Isn
'
t
this
the
singleton
instance
?
"
)
;
delete
gObserverTable
;
gObserverTable
=
nullptr
;
delete
gCacheData
;
gCacheData
=
nullptr
;
NS_RELEASE
(
sRootBranch
)
;
NS_RELEASE
(
sDefaultRootBranch
)
;
sPreferences
=
nullptr
;
PREF_Cleanup
(
)
;
}
NS_IMPL_ADDREF
(
Preferences
)
NS_IMPL_RELEASE
(
Preferences
)
NS_INTERFACE_MAP_BEGIN
(
Preferences
)
NS_INTERFACE_MAP_ENTRY_AMBIGUOUS
(
nsISupports
nsIPrefService
)
NS_INTERFACE_MAP_ENTRY
(
nsIPrefService
)
NS_INTERFACE_MAP_ENTRY
(
nsIObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsIPrefBranch
)
NS_INTERFACE_MAP_ENTRY
(
nsISupportsWeakReference
)
NS_INTERFACE_MAP_END
static
InfallibleTArray
<
Preferences
:
:
PrefSetting
>
*
gInitPrefs
;
void
Preferences
:
:
SetInitPreferences
(
nsTArray
<
PrefSetting
>
*
aPrefs
)
{
gInitPrefs
=
new
InfallibleTArray
<
PrefSetting
>
(
mozilla
:
:
Move
(
*
aPrefs
)
)
;
}
Result
<
Ok
const
char
*
>
Preferences
:
:
Init
(
)
{
PREF_Init
(
)
;
MOZ_TRY
(
pref_InitInitialObjects
(
)
)
;
if
(
XRE_IsContentProcess
(
)
)
{
MOZ_ASSERT
(
gInitPrefs
)
;
for
(
unsigned
int
i
=
0
;
i
<
gInitPrefs
-
>
Length
(
)
;
i
+
+
)
{
Preferences
:
:
SetPreference
(
gInitPrefs
-
>
ElementAt
(
i
)
)
;
}
delete
gInitPrefs
;
gInitPrefs
=
nullptr
;
return
Ok
(
)
;
}
nsCString
lockFileName
;
nsresult
rv
=
PREF_CopyCharPref
(
"
general
.
config
.
filename
"
getter_Copies
(
lockFileName
)
false
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
NS_CreateServicesFromCategory
(
"
pref
-
config
-
startup
"
static_cast
<
nsISupports
*
>
(
static_cast
<
void
*
>
(
this
)
)
"
pref
-
config
-
startup
"
)
;
}
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
!
observerService
)
{
return
Err
(
"
GetObserverService
(
)
failed
(
1
)
"
)
;
}
observerService
-
>
AddObserver
(
this
"
profile
-
before
-
change
-
telemetry
"
true
)
;
rv
=
observerService
-
>
AddObserver
(
this
"
profile
-
before
-
change
"
true
)
;
observerService
-
>
AddObserver
(
this
"
load
-
extension
-
defaults
"
true
)
;
observerService
-
>
AddObserver
(
this
"
suspend_process_notification
"
true
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
Err
(
"
AddObserver
(
\
"
profile
-
before
-
change
\
"
)
failed
"
)
;
}
return
Ok
(
)
;
}
void
Preferences
:
:
InitializeUserPrefs
(
)
{
MOZ_ASSERT
(
!
sPreferences
-
>
mCurrentFile
"
Should
only
initialize
prefs
once
"
)
;
sPreferences
-
>
ResetUserPrefs
(
)
;
nsCOMPtr
<
nsIFile
>
prefsFile
=
sPreferences
-
>
ReadSavedPrefs
(
)
;
sPreferences
-
>
ReadUserOverridePrefs
(
)
;
sPreferences
-
>
mDirty
=
false
;
sPreferences
-
>
mCurrentFile
=
prefsFile
.
forget
(
)
;
if
(
!
Preferences
:
:
GetBool
(
kOldTelemetryPref
true
)
)
{
Preferences
:
:
SetBool
(
kTelemetryPref
false
)
;
Preferences
:
:
ClearUser
(
kOldTelemetryPref
)
;
}
sPreferences
-
>
NotifyServiceObservers
(
NS_PREFSERVICE_READ_TOPIC_ID
)
;
}
NS_IMETHODIMP
Preferences
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
someData
)
{
if
(
MOZ_UNLIKELY
(
!
XRE_IsParentProcess
(
)
)
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsresult
rv
=
NS_OK
;
if
(
!
nsCRT
:
:
strcmp
(
aTopic
"
profile
-
before
-
change
"
)
)
{
if
(
AllowOffMainThreadSave
(
)
)
{
SavePrefFile
(
nullptr
)
;
}
}
else
if
(
!
nsCRT
:
:
strcmp
(
aTopic
"
profile
-
before
-
change
-
telemetry
"
)
)
{
SavePrefFileBlocking
(
)
;
MOZ_ASSERT
(
!
mDirty
"
Preferences
should
not
be
dirty
"
)
;
mProfileShutdown
=
true
;
}
else
if
(
!
strcmp
(
aTopic
"
load
-
extension
-
defaults
"
)
)
{
pref_LoadPrefsInDirList
(
NS_EXT_PREFS_DEFAULTS_DIR_LIST
)
;
}
else
if
(
!
nsCRT
:
:
strcmp
(
aTopic
"
reload
-
default
-
prefs
"
)
)
{
Unused
<
<
pref_InitInitialObjects
(
)
;
}
else
if
(
!
nsCRT
:
:
strcmp
(
aTopic
"
suspend_process_notification
"
)
)
{
rv
=
SavePrefFileBlocking
(
)
;
}
return
rv
;
}
NS_IMETHODIMP
Preferences
:
:
ReadUserPrefsFromFile
(
nsIFile
*
aFile
)
{
if
(
MOZ_UNLIKELY
(
!
XRE_IsParentProcess
(
)
)
)
{
NS_ERROR
(
"
must
load
prefs
from
parent
process
"
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
!
aFile
)
{
NS_ERROR
(
"
ReadUserPrefsFromFile
requires
a
parameter
"
)
;
return
NS_ERROR_INVALID_ARG
;
}
return
openPrefFile
(
aFile
)
;
}
NS_IMETHODIMP
Preferences
:
:
ResetPrefs
(
)
{
if
(
MOZ_UNLIKELY
(
!
XRE_IsParentProcess
(
)
)
)
{
NS_ERROR
(
"
must
reset
prefs
from
parent
process
"
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
NotifyServiceObservers
(
NS_PREFSERVICE_RESET_TOPIC_ID
)
;
PREF_CleanupPrefs
(
)
;
PREF_Init
(
)
;
return
pref_InitInitialObjects
(
)
.
isOk
(
)
?
NS_OK
:
NS_ERROR_FAILURE
;
}
NS_IMETHODIMP
Preferences
:
:
ResetUserPrefs
(
)
{
if
(
MOZ_UNLIKELY
(
!
XRE_IsParentProcess
(
)
)
)
{
NS_ERROR
(
"
must
reset
user
prefs
from
parent
process
"
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
PREF_ClearAllUserPrefs
(
)
;
return
NS_OK
;
}
bool
Preferences
:
:
AllowOffMainThreadSave
(
)
{
if
(
sAllowOMTPrefWrite
<
0
)
{
bool
value
=
false
;
Preferences
:
:
GetBool
(
"
preferences
.
allow
.
omt
-
write
"
&
value
)
;
sAllowOMTPrefWrite
=
value
?
1
:
0
;
}
return
!
!
sAllowOMTPrefWrite
;
}
nsresult
Preferences
:
:
SavePrefFileBlocking
(
)
{
if
(
mDirty
)
{
return
SavePrefFileInternal
(
nullptr
SaveMethod
:
:
Blocking
)
;
}
if
(
AllowOffMainThreadSave
(
)
)
{
PreferencesWriter
:
:
Flush
(
)
;
}
return
NS_OK
;
}
nsresult
Preferences
:
:
SavePrefFileAsynchronous
(
)
{
return
SavePrefFileInternal
(
nullptr
SaveMethod
:
:
Asynchronous
)
;
}
NS_IMETHODIMP
Preferences
:
:
SavePrefFile
(
nsIFile
*
aFile
)
{
return
SavePrefFileInternal
(
aFile
SaveMethod
:
:
Asynchronous
)
;
}
static
nsresult
ReadExtensionPrefs
(
nsIFile
*
aFile
)
{
nsresult
rv
;
nsCOMPtr
<
nsIZipReader
>
reader
=
do_CreateInstance
(
kZipReaderCID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
reader
-
>
Open
(
aFile
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIUTF8StringEnumerator
>
files
;
rv
=
reader
-
>
FindEntries
(
nsDependentCString
(
"
defaults
/
preferences
/
*
.
(
J
|
j
)
(
S
|
s
)
"
)
getter_AddRefs
(
files
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
char
buffer
[
4096
]
;
bool
more
;
while
(
NS_SUCCEEDED
(
rv
=
files
-
>
HasMore
(
&
more
)
)
&
&
more
)
{
nsAutoCString
entry
;
rv
=
files
-
>
GetNext
(
entry
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMPtr
<
nsIInputStream
>
stream
;
rv
=
reader
-
>
GetInputStream
(
entry
getter_AddRefs
(
stream
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
uint64_t
avail
;
uint32_t
read
;
PrefParseState
ps
;
PREF_InitParseState
(
&
ps
PREF_ReaderCallback
ReportToConsole
nullptr
)
;
while
(
NS_SUCCEEDED
(
rv
=
stream
-
>
Available
(
&
avail
)
)
&
&
avail
)
{
rv
=
stream
-
>
Read
(
buffer
4096
&
read
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Pref
stream
read
failed
"
)
;
break
;
}
PREF_ParseBuf
(
&
ps
buffer
read
)
;
}
PREF_FinalizeParseState
(
&
ps
)
;
}
return
rv
;
}
void
Preferences
:
:
SetPreference
(
const
PrefSetting
&
aPref
)
{
pref_SetPref
(
aPref
)
;
}
void
Preferences
:
:
GetPreference
(
PrefSetting
*
aPref
)
{
PrefHashEntry
*
entry
=
pref_HashTableLookup
(
aPref
-
>
name
(
)
.
get
(
)
)
;
if
(
!
entry
)
{
return
;
}
if
(
pref_EntryHasAdvisablySizedValues
(
entry
)
)
{
pref_GetPrefFromEntry
(
entry
aPref
)
;
}
}
void
Preferences
:
:
GetPreferences
(
InfallibleTArray
<
PrefSetting
>
*
aPrefs
)
{
aPrefs
-
>
SetCapacity
(
gHashTable
-
>
Capacity
(
)
)
;
for
(
auto
iter
=
gHashTable
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
entry
=
static_cast
<
PrefHashEntry
*
>
(
iter
.
Get
(
)
)
;
if
(
!
pref_EntryHasAdvisablySizedValues
(
entry
)
)
{
continue
;
}
dom
:
:
PrefSetting
*
pref
=
aPrefs
-
>
AppendElement
(
)
;
pref_GetPrefFromEntry
(
entry
pref
)
;
}
}
#
ifdef
DEBUG
void
Preferences
:
:
SetInitPhase
(
pref_initPhase
aPhase
)
{
gPhase
=
aPhase
;
}
pref_initPhase
Preferences
:
:
InitPhase
(
)
{
return
gPhase
;
}
#
endif
NS_IMETHODIMP
Preferences
:
:
GetBranch
(
const
char
*
aPrefRoot
nsIPrefBranch
*
*
aRetVal
)
{
if
(
(
nullptr
!
=
aPrefRoot
)
&
&
(
*
aPrefRoot
!
=
'
\
0
'
)
)
{
RefPtr
<
nsPrefBranch
>
prefBranch
=
new
nsPrefBranch
(
aPrefRoot
false
)
;
prefBranch
.
forget
(
aRetVal
)
;
}
else
{
nsCOMPtr
<
nsIPrefBranch
>
root
(
sRootBranch
)
;
root
.
forget
(
aRetVal
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
Preferences
:
:
GetDefaultBranch
(
const
char
*
aPrefRoot
nsIPrefBranch
*
*
aRetVal
)
{
if
(
!
aPrefRoot
|
|
!
aPrefRoot
[
0
]
)
{
nsCOMPtr
<
nsIPrefBranch
>
root
(
sDefaultRootBranch
)
;
root
.
forget
(
aRetVal
)
;
return
NS_OK
;
}
RefPtr
<
nsPrefBranch
>
prefBranch
=
new
nsPrefBranch
(
aPrefRoot
true
)
;
if
(
!
prefBranch
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
prefBranch
.
forget
(
aRetVal
)
;
return
NS_OK
;
}
NS_IMETHODIMP
Preferences
:
:
GetDirty
(
bool
*
aRetVal
)
{
*
aRetVal
=
mDirty
;
return
NS_OK
;
}
nsresult
Preferences
:
:
NotifyServiceObservers
(
const
char
*
aTopic
)
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
!
observerService
)
{
return
NS_ERROR_FAILURE
;
}
auto
subject
=
static_cast
<
nsIPrefService
*
>
(
this
)
;
observerService
-
>
NotifyObservers
(
subject
aTopic
nullptr
)
;
return
NS_OK
;
}
already_AddRefed
<
nsIFile
>
Preferences
:
:
ReadSavedPrefs
(
)
{
nsCOMPtr
<
nsIFile
>
file
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_APP_PREFS_50_FILE
getter_AddRefs
(
file
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
nullptr
;
}
rv
=
openPrefFile
(
file
)
;
if
(
rv
=
=
NS_ERROR_FILE_NOT_FOUND
)
{
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
PREFERENCES_CREATED_NEW_USER_PREFS_FILE
true
)
;
rv
=
NS_OK
;
}
else
if
(
NS_FAILED
(
rv
)
)
{
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
PREFERENCES_PREFS_FILE_WAS_INVALID
true
)
;
MakeBackupPrefFile
(
file
)
;
}
return
file
.
forget
(
)
;
}
void
Preferences
:
:
ReadUserOverridePrefs
(
)
{
nsCOMPtr
<
nsIFile
>
aFile
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_APP_PREFS_50_DIR
getter_AddRefs
(
aFile
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
;
}
aFile
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
user
.
js
"
)
)
;
rv
=
openPrefFile
(
aFile
)
;
if
(
rv
!
=
NS_ERROR_FILE_NOT_FOUND
)
{
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
PREFERENCES_READ_USER_JS
true
)
;
}
}
nsresult
Preferences
:
:
MakeBackupPrefFile
(
nsIFile
*
aFile
)
{
nsAutoString
newFilename
;
nsresult
rv
=
aFile
-
>
GetLeafName
(
newFilename
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
newFilename
.
InsertLiteral
(
u
"
Invalid
"
0
)
;
nsCOMPtr
<
nsIFile
>
newFile
;
rv
=
aFile
-
>
GetParent
(
getter_AddRefs
(
newFile
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
newFile
-
>
Append
(
newFilename
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
bool
exists
=
false
;
newFile
-
>
Exists
(
&
exists
)
;
if
(
exists
)
{
rv
=
newFile
-
>
Remove
(
false
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
rv
=
aFile
-
>
CopyTo
(
nullptr
newFilename
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
return
rv
;
}
nsresult
Preferences
:
:
SavePrefFileInternal
(
nsIFile
*
aFile
SaveMethod
aSaveMethod
)
{
if
(
MOZ_UNLIKELY
(
!
XRE_IsParentProcess
(
)
)
)
{
NS_ERROR
(
"
must
save
pref
file
from
parent
process
"
)
;
return
NS_ERROR_NOT_AVAILABLE
;
}
if
(
nullptr
=
=
aFile
)
{
mSavePending
=
false
;
if
(
!
AllowOffMainThreadSave
(
)
)
{
aSaveMethod
=
SaveMethod
:
:
Blocking
;
}
if
(
!
mDirty
)
{
return
NS_OK
;
}
if
(
mProfileShutdown
)
{
NS_WARNING
(
"
Cannot
save
pref
file
after
profile
shutdown
.
"
)
;
return
NS_ERROR_ILLEGAL_DURING_SHUTDOWN
;
}
nsresult
rv
=
NS_OK
;
if
(
mCurrentFile
)
{
rv
=
WritePrefFile
(
mCurrentFile
aSaveMethod
)
;
}
if
(
NS_SUCCEEDED
(
rv
)
)
{
mDirty
=
false
;
}
return
rv
;
}
else
{
return
WritePrefFile
(
aFile
SaveMethod
:
:
Blocking
)
;
}
}
nsresult
Preferences
:
:
WritePrefFile
(
nsIFile
*
aFile
SaveMethod
aSaveMethod
)
{
if
(
!
gHashTable
)
{
return
NS_ERROR_NOT_INITIALIZED
;
}
AUTO_PROFILER_LABEL
(
"
Preferences
:
:
WritePrefFile
"
OTHER
)
;
if
(
AllowOffMainThreadSave
(
)
)
{
nsresult
rv
=
NS_OK
;
mozilla
:
:
UniquePtr
<
PrefSaveData
>
prefs
=
MakeUnique
<
PrefSaveData
>
(
pref_savePrefs
(
gHashTable
)
)
;
prefs
.
reset
(
PreferencesWriter
:
:
sPendingWriteData
.
exchange
(
prefs
.
release
(
)
)
)
;
if
(
prefs
)
{
return
rv
;
}
nsCOMPtr
<
nsIEventTarget
>
target
=
do_GetService
(
NS_STREAMTRANSPORTSERVICE_CONTRACTID
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
bool
async
=
aSaveMethod
=
=
SaveMethod
:
:
Asynchronous
;
if
(
async
)
{
rv
=
target
-
>
Dispatch
(
new
PWRunnable
(
aFile
)
nsIEventTarget
:
:
DISPATCH_NORMAL
)
;
}
else
{
SyncRunnable
:
:
DispatchToThread
(
target
new
PWRunnable
(
aFile
)
true
)
;
}
return
rv
;
}
MOZ_ASSERT
(
false
"
failed
to
get
the
target
thread
for
OMT
pref
write
"
)
;
}
PrefSaveData
prefsData
=
pref_savePrefs
(
gHashTable
)
;
return
PreferencesWriter
:
:
Write
(
aFile
prefsData
)
;
}
static
nsresult
openPrefFile
(
nsIFile
*
aFile
)
{
PrefParseState
ps
;
PREF_InitParseState
(
&
ps
PREF_ReaderCallback
ReportToConsole
nullptr
)
;
auto
cleanup
=
MakeScopeExit
(
[
&
]
(
)
{
PREF_FinalizeParseState
(
&
ps
)
;
}
)
;
nsCString
data
;
MOZ_TRY_VAR
(
data
URLPreloader
:
:
ReadFile
(
aFile
)
)
;
if
(
!
PREF_ParseBuf
(
&
ps
data
.
get
(
)
data
.
Length
(
)
)
)
{
return
NS_ERROR_FILE_CORRUPTED
;
}
return
NS_OK
;
}
static
int
pref_CompareFileNames
(
nsIFile
*
aFile1
nsIFile
*
aFile2
void
*
)
{
nsAutoCString
filename1
filename2
;
aFile1
-
>
GetNativeLeafName
(
filename1
)
;
aFile2
-
>
GetNativeLeafName
(
filename2
)
;
return
Compare
(
filename2
filename1
)
;
}
static
nsresult
pref_LoadPrefsInDir
(
nsIFile
*
aDir
char
const
*
const
*
aSpecialFiles
uint32_t
aSpecialFilesCount
)
{
nsresult
rv
rv2
;
bool
hasMoreElements
;
nsCOMPtr
<
nsISimpleEnumerator
>
dirIterator
;
rv
=
aDir
-
>
GetDirectoryEntries
(
getter_AddRefs
(
dirIterator
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
if
(
rv
=
=
NS_ERROR_FILE_NOT_FOUND
|
|
rv
=
=
NS_ERROR_FILE_TARGET_DOES_NOT_EXIST
)
{
rv
=
NS_OK
;
}
return
rv
;
}
rv
=
dirIterator
-
>
HasMoreElements
(
&
hasMoreElements
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsCOMArray
<
nsIFile
>
prefFiles
(
INITIAL_PREF_FILES
)
;
nsCOMArray
<
nsIFile
>
specialFiles
(
aSpecialFilesCount
)
;
nsCOMPtr
<
nsIFile
>
prefFile
;
while
(
hasMoreElements
&
&
NS_SUCCEEDED
(
rv
)
)
{
nsCOMPtr
<
nsISupports
>
supports
;
rv
=
dirIterator
-
>
GetNext
(
getter_AddRefs
(
supports
)
)
;
prefFile
=
do_QueryInterface
(
supports
)
;
if
(
NS_FAILED
(
rv
)
)
{
break
;
}
nsAutoCString
leafName
;
prefFile
-
>
GetNativeLeafName
(
leafName
)
;
NS_ASSERTION
(
!
leafName
.
IsEmpty
(
)
"
Failure
in
default
prefs
:
directory
enumerator
returned
empty
file
?
"
)
;
if
(
StringEndsWith
(
leafName
NS_LITERAL_CSTRING
(
"
.
js
"
)
nsCaseInsensitiveCStringComparator
(
)
)
)
{
bool
shouldParse
=
true
;
for
(
uint32_t
i
=
0
;
i
<
aSpecialFilesCount
;
+
+
i
)
{
if
(
leafName
.
Equals
(
nsDependentCString
(
aSpecialFiles
[
i
]
)
)
)
{
shouldParse
=
false
;
specialFiles
.
ReplaceObjectAt
(
prefFile
i
)
;
}
}
if
(
shouldParse
)
{
prefFiles
.
AppendObject
(
prefFile
)
;
}
}
rv
=
dirIterator
-
>
HasMoreElements
(
&
hasMoreElements
)
;
}
if
(
prefFiles
.
Count
(
)
+
specialFiles
.
Count
(
)
=
=
0
)
{
NS_WARNING
(
"
No
default
pref
files
found
.
"
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
NS_SUCCESS_FILE_DIRECTORY_EMPTY
;
}
return
rv
;
}
prefFiles
.
Sort
(
pref_CompareFileNames
nullptr
)
;
uint32_t
arrayCount
=
prefFiles
.
Count
(
)
;
uint32_t
i
;
for
(
i
=
0
;
i
<
arrayCount
;
+
+
i
)
{
rv2
=
openPrefFile
(
prefFiles
[
i
]
)
;
if
(
NS_FAILED
(
rv2
)
)
{
NS_ERROR
(
"
Default
pref
file
not
parsed
successfully
.
"
)
;
rv
=
rv2
;
}
}
arrayCount
=
specialFiles
.
Count
(
)
;
for
(
i
=
0
;
i
<
arrayCount
;
+
+
i
)
{
nsIFile
*
file
=
specialFiles
[
i
]
;
if
(
file
)
{
rv2
=
openPrefFile
(
file
)
;
if
(
NS_FAILED
(
rv2
)
)
{
NS_ERROR
(
"
Special
default
pref
file
not
parsed
successfully
.
"
)
;
rv
=
rv2
;
}
}
}
return
rv
;
}
static
nsresult
pref_LoadPrefsInDirList
(
const
char
*
aListId
)
{
nsresult
rv
;
nsCOMPtr
<
nsIProperties
>
dirSvc
(
do_GetService
(
NS_DIRECTORY_SERVICE_CONTRACTID
&
rv
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
rv
;
}
nsCOMPtr
<
nsISimpleEnumerator
>
list
;
dirSvc
-
>
Get
(
aListId
NS_GET_IID
(
nsISimpleEnumerator
)
getter_AddRefs
(
list
)
)
;
if
(
!
list
)
{
return
NS_OK
;
}
bool
hasMore
;
while
(
NS_SUCCEEDED
(
list
-
>
HasMoreElements
(
&
hasMore
)
)
&
&
hasMore
)
{
nsCOMPtr
<
nsISupports
>
elem
;
list
-
>
GetNext
(
getter_AddRefs
(
elem
)
)
;
if
(
!
elem
)
{
continue
;
}
nsCOMPtr
<
nsIFile
>
path
=
do_QueryInterface
(
elem
)
;
if
(
!
path
)
{
continue
;
}
nsAutoCString
leaf
;
path
-
>
GetNativeLeafName
(
leaf
)
;
if
(
Substring
(
leaf
leaf
.
Length
(
)
-
4
)
.
EqualsLiteral
(
"
.
xpi
"
)
)
{
ReadExtensionPrefs
(
path
)
;
}
else
{
pref_LoadPrefsInDir
(
path
nullptr
0
)
;
}
}
return
NS_OK
;
}
static
nsresult
pref_ReadPrefFromJar
(
nsZipArchive
*
aJarReader
const
char
*
aName
)
{
nsCString
manifest
;
MOZ_TRY_VAR
(
manifest
URLPreloader
:
:
ReadZip
(
aJarReader
nsDependentCString
(
aName
)
)
)
;
PrefParseState
ps
;
PREF_InitParseState
(
&
ps
PREF_ReaderCallback
ReportToConsole
nullptr
)
;
PREF_ParseBuf
(
&
ps
manifest
.
get
(
)
manifest
.
Length
(
)
)
;
PREF_FinalizeParseState
(
&
ps
)
;
return
NS_OK
;
}
static
Result
<
Ok
const
char
*
>
pref_InitInitialObjects
(
)
{
nsresult
rv
;
nsZipFind
*
findPtr
;
nsAutoPtr
<
nsZipFind
>
find
;
nsTArray
<
nsCString
>
prefEntries
;
const
char
*
entryName
;
uint16_t
entryNameLen
;
RefPtr
<
nsZipArchive
>
jarReader
=
mozilla
:
:
Omnijar
:
:
GetReader
(
mozilla
:
:
Omnijar
:
:
GRE
)
;
if
(
jarReader
)
{
rv
=
pref_ReadPrefFromJar
(
jarReader
"
greprefs
.
js
"
)
;
NS_ENSURE_SUCCESS
(
rv
Err
(
"
pref_ReadPrefFromJar
(
)
failed
"
)
)
;
rv
=
jarReader
-
>
FindInit
(
"
defaults
/
pref
/
*
.
js
"
&
findPtr
)
;
NS_ENSURE_SUCCESS
(
rv
Err
(
"
jarReader
-
>
FindInit
(
)
failed
"
)
)
;
find
=
findPtr
;
while
(
NS_SUCCEEDED
(
find
-
>
FindNext
(
&
entryName
&
entryNameLen
)
)
)
{
prefEntries
.
AppendElement
(
Substring
(
entryName
entryNameLen
)
)
;
}
prefEntries
.
Sort
(
)
;
for
(
uint32_t
i
=
prefEntries
.
Length
(
)
;
i
-
-
;
)
{
rv
=
pref_ReadPrefFromJar
(
jarReader
prefEntries
[
i
]
.
get
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Error
parsing
preferences
.
"
)
;
}
}
}
else
{
nsCOMPtr
<
nsIFile
>
greprefsFile
;
rv
=
NS_GetSpecialDirectory
(
NS_GRE_DIR
getter_AddRefs
(
greprefsFile
)
)
;
NS_ENSURE_SUCCESS
(
rv
Err
(
"
NS_GetSpecialDirectory
(
NS_GRE_DIR
)
failed
"
)
)
;
rv
=
greprefsFile
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
greprefs
.
js
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
Err
(
"
greprefsFile
-
>
AppendNative
(
)
failed
"
)
)
;
rv
=
openPrefFile
(
greprefsFile
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Error
parsing
GRE
default
preferences
.
Is
this
an
old
-
style
"
"
embedding
app
?
"
)
;
}
}
nsCOMPtr
<
nsIFile
>
defaultPrefDir
;
rv
=
NS_GetSpecialDirectory
(
NS_APP_PREF_DEFAULTS_50_DIR
getter_AddRefs
(
defaultPrefDir
)
)
;
NS_ENSURE_SUCCESS
(
rv
Err
(
"
NS_GetSpecialDirectory
(
NS_APP_PREF_DEFAULTS_50_DIR
)
failed
"
)
)
;
static
const
char
*
specialFiles
[
]
=
{
#
if
defined
(
XP_MACOSX
)
"
macprefs
.
js
"
#
elif
defined
(
XP_WIN
)
"
winpref
.
js
"
#
elif
defined
(
XP_UNIX
)
"
unix
.
js
"
#
if
defined
(
_AIX
)
"
aix
.
js
"
#
endif
#
elif
defined
(
XP_BEOS
)
"
beos
.
js
"
#
endif
}
;
rv
=
pref_LoadPrefsInDir
(
defaultPrefDir
specialFiles
ArrayLength
(
specialFiles
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Error
parsing
application
default
preferences
.
"
)
;
}
RefPtr
<
nsZipArchive
>
appJarReader
=
mozilla
:
:
Omnijar
:
:
GetReader
(
mozilla
:
:
Omnijar
:
:
APP
)
;
if
(
!
appJarReader
)
{
appJarReader
=
mozilla
:
:
Omnijar
:
:
GetReader
(
mozilla
:
:
Omnijar
:
:
GRE
)
;
}
if
(
appJarReader
)
{
rv
=
appJarReader
-
>
FindInit
(
"
defaults
/
preferences
/
*
.
js
"
&
findPtr
)
;
NS_ENSURE_SUCCESS
(
rv
Err
(
"
appJarReader
-
>
FindInit
(
)
failed
"
)
)
;
find
=
findPtr
;
prefEntries
.
Clear
(
)
;
while
(
NS_SUCCEEDED
(
find
-
>
FindNext
(
&
entryName
&
entryNameLen
)
)
)
{
prefEntries
.
AppendElement
(
Substring
(
entryName
entryNameLen
)
)
;
}
prefEntries
.
Sort
(
)
;
for
(
uint32_t
i
=
prefEntries
.
Length
(
)
;
i
-
-
;
)
{
rv
=
pref_ReadPrefFromJar
(
appJarReader
prefEntries
[
i
]
.
get
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
Error
parsing
preferences
.
"
)
;
}
}
}
rv
=
pref_LoadPrefsInDirList
(
NS_APP_PREFS_DEFAULTS_DIR_LIST
)
;
NS_ENSURE_SUCCESS
(
rv
Err
(
"
pref_LoadPrefsInDirList
(
NS_APP_PREFS_DEFAULTS_DIR_LIST
)
failed
"
)
)
;
if
(
Preferences
:
:
GetDefaultType
(
kTelemetryPref
)
=
=
nsIPrefBranch
:
:
PREF_INVALID
)
{
bool
prerelease
=
false
;
#
ifdef
MOZ_TELEMETRY_ON_BY_DEFAULT
prerelease
=
true
;
#
else
nsAutoCString
prefValue
;
Preferences
:
:
GetDefaultCString
(
kChannelPref
prefValue
)
;
if
(
prefValue
.
EqualsLiteral
(
"
beta
"
)
)
{
prerelease
=
true
;
}
#
endif
PREF_SetBoolPref
(
kTelemetryPref
prerelease
true
)
;
}
NS_CreateServicesFromCategory
(
NS_PREFSERVICE_APPDEFAULTS_TOPIC_ID
nullptr
NS_PREFSERVICE_APPDEFAULTS_TOPIC_ID
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
NS_ENSURE_SUCCESS
(
rv
Err
(
"
GetObserverService
(
)
failed
(
2
)
"
)
)
;
observerService
-
>
NotifyObservers
(
nullptr
NS_PREFSERVICE_APPDEFAULTS_TOPIC_ID
nullptr
)
;
rv
=
pref_LoadPrefsInDirList
(
NS_EXT_PREFS_DEFAULTS_DIR_LIST
)
;
NS_ENSURE_SUCCESS
(
rv
Err
(
"
pref_LoadPrefsInDirList
(
NS_EXT_PREFS_DEFAULTS_DIR_LIST
)
failed
"
)
)
;
return
Ok
(
)
;
}
nsresult
Preferences
:
:
GetBool
(
const
char
*
aPref
bool
*
aResult
)
{
NS_PRECONDITION
(
aResult
"
aResult
must
not
be
NULL
"
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
PREF_GetBoolPref
(
aPref
aResult
false
)
;
}
nsresult
Preferences
:
:
GetInt
(
const
char
*
aPref
int32_t
*
aResult
)
{
NS_PRECONDITION
(
aResult
"
aResult
must
not
be
NULL
"
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
PREF_GetIntPref
(
aPref
aResult
false
)
;
}
nsresult
Preferences
:
:
GetFloat
(
const
char
*
aPref
float
*
aResult
)
{
NS_PRECONDITION
(
aResult
"
aResult
must
not
be
NULL
"
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
nsAutoCString
result
;
nsresult
rv
=
PREF_CopyCharPref
(
aPref
getter_Copies
(
result
)
false
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
*
aResult
=
result
.
ToFloat
(
&
rv
)
;
}
return
rv
;
}
nsresult
Preferences
:
:
GetCString
(
const
char
*
aPref
nsACString
&
aResult
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
char
*
result
;
nsresult
rv
=
PREF_CopyCharPref
(
aPref
&
result
false
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
aResult
.
Adopt
(
result
)
;
}
return
rv
;
}
nsresult
Preferences
:
:
GetString
(
const
char
*
aPref
nsAString
&
aResult
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
nsAutoCString
result
;
nsresult
rv
=
PREF_CopyCharPref
(
aPref
getter_Copies
(
result
)
false
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
CopyUTF8toUTF16
(
result
aResult
)
;
}
return
rv
;
}
nsresult
Preferences
:
:
GetLocalizedCString
(
const
char
*
aPref
nsACString
&
aResult
)
{
nsAutoString
result
;
nsresult
rv
=
GetLocalizedString
(
aPref
result
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
CopyUTF16toUTF8
(
result
aResult
)
;
}
return
rv
;
}
nsresult
Preferences
:
:
GetLocalizedString
(
const
char
*
aPref
nsAString
&
aResult
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
nsCOMPtr
<
nsIPrefLocalizedString
>
prefLocalString
;
nsresult
rv
=
sRootBranch
-
>
GetComplexValue
(
aPref
NS_GET_IID
(
nsIPrefLocalizedString
)
getter_AddRefs
(
prefLocalString
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
NS_ASSERTION
(
prefLocalString
"
Succeeded
but
the
result
is
NULL
"
)
;
prefLocalString
-
>
GetData
(
aResult
)
;
}
return
rv
;
}
nsresult
Preferences
:
:
GetComplex
(
const
char
*
aPref
const
nsIID
&
aType
void
*
*
aResult
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
sRootBranch
-
>
GetComplexValue
(
aPref
aType
aResult
)
;
}
nsresult
Preferences
:
:
SetCString
(
const
char
*
aPref
const
char
*
aValue
)
{
ENSURE_MAIN_PROCESS_WITH_WARNING
(
"
SetCString
"
aPref
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
PREF_SetCharPref
(
aPref
aValue
false
)
;
}
nsresult
Preferences
:
:
SetCString
(
const
char
*
aPref
const
nsACString
&
aValue
)
{
ENSURE_MAIN_PROCESS_WITH_WARNING
(
"
SetCString
"
aPref
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
PREF_SetCharPref
(
aPref
PromiseFlatCString
(
aValue
)
.
get
(
)
false
)
;
}
nsresult
Preferences
:
:
SetString
(
const
char
*
aPref
const
char16ptr_t
aValue
)
{
ENSURE_MAIN_PROCESS_WITH_WARNING
(
"
SetString
"
aPref
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
PREF_SetCharPref
(
aPref
NS_ConvertUTF16toUTF8
(
aValue
)
.
get
(
)
false
)
;
}
nsresult
Preferences
:
:
SetString
(
const
char
*
aPref
const
nsAString
&
aValue
)
{
ENSURE_MAIN_PROCESS_WITH_WARNING
(
"
SetString
"
aPref
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
PREF_SetCharPref
(
aPref
NS_ConvertUTF16toUTF8
(
aValue
)
.
get
(
)
false
)
;
}
nsresult
Preferences
:
:
SetBool
(
const
char
*
aPref
bool
aValue
)
{
ENSURE_MAIN_PROCESS_WITH_WARNING
(
"
SetBool
"
aPref
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
PREF_SetBoolPref
(
aPref
aValue
false
)
;
}
nsresult
Preferences
:
:
SetInt
(
const
char
*
aPref
int32_t
aValue
)
{
ENSURE_MAIN_PROCESS_WITH_WARNING
(
"
SetInt
"
aPref
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
PREF_SetIntPref
(
aPref
aValue
false
)
;
}
nsresult
Preferences
:
:
SetFloat
(
const
char
*
aPref
float
aValue
)
{
return
SetCString
(
aPref
nsPrintfCString
(
"
%
f
"
aValue
)
.
get
(
)
)
;
}
nsresult
Preferences
:
:
SetComplex
(
const
char
*
aPref
const
nsIID
&
aType
nsISupports
*
aValue
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
sRootBranch
-
>
SetComplexValue
(
aPref
aType
aValue
)
;
}
nsresult
Preferences
:
:
ClearUser
(
const
char
*
aPref
)
{
ENSURE_MAIN_PROCESS_WITH_WARNING
(
"
ClearUser
"
aPref
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
PREF_ClearUserPref
(
aPref
)
;
}
bool
Preferences
:
:
HasUserValue
(
const
char
*
aPref
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
false
)
;
return
PREF_HasUserPref
(
aPref
)
;
}
int32_t
Preferences
:
:
GetType
(
const
char
*
aPref
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
nsIPrefBranch
:
:
PREF_INVALID
)
;
int32_t
result
;
return
NS_SUCCEEDED
(
sRootBranch
-
>
GetPrefType
(
aPref
&
result
)
)
?
result
:
nsIPrefBranch
:
:
PREF_INVALID
;
}
nsresult
Preferences
:
:
AddStrongObserver
(
nsIObserver
*
aObserver
const
char
*
aPref
)
{
MOZ_ASSERT
(
aObserver
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
sRootBranch
-
>
AddObserver
(
aPref
aObserver
false
)
;
}
nsresult
Preferences
:
:
AddWeakObserver
(
nsIObserver
*
aObserver
const
char
*
aPref
)
{
MOZ_ASSERT
(
aObserver
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
sRootBranch
-
>
AddObserver
(
aPref
aObserver
true
)
;
}
nsresult
Preferences
:
:
RemoveObserver
(
nsIObserver
*
aObserver
const
char
*
aPref
)
{
MOZ_ASSERT
(
aObserver
)
;
if
(
!
sPreferences
&
&
sShutdown
)
{
return
NS_OK
;
}
NS_ENSURE_TRUE
(
sPreferences
NS_ERROR_NOT_AVAILABLE
)
;
return
sRootBranch
-
>
RemoveObserver
(
aPref
aObserver
)
;
}
nsresult
Preferences
:
:
AddStrongObservers
(
nsIObserver
*
aObserver
const
char
*
*
aPrefs
)
{
MOZ_ASSERT
(
aObserver
)
;
for
(
uint32_t
i
=
0
;
aPrefs
[
i
]
;
i
+
+
)
{
nsresult
rv
=
AddStrongObserver
(
aObserver
aPrefs
[
i
]
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
nsresult
Preferences
:
:
AddWeakObservers
(
nsIObserver
*
aObserver
const
char
*
*
aPrefs
)
{
MOZ_ASSERT
(
aObserver
)
;
for
(
uint32_t
i
=
0
;
aPrefs
[
i
]
;
i
+
+
)
{
nsresult
rv
=
AddWeakObserver
(
aObserver
aPrefs
[
i
]
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
nsresult
Preferences
:
:
RemoveObservers
(
nsIObserver
*
aObserver
const
char
*
*
aPrefs
)
{
MOZ_ASSERT
(
aObserver
)
;
if
(
!
sPreferences
&
&
sShutdown
)
{
return
NS_OK
;
}
NS_ENSURE_TRUE
(
sPreferences
NS_ERROR_NOT_AVAILABLE
)
;
for
(
uint32_t
i
=
0
;
aPrefs
[
i
]
;
i
+
+
)
{
nsresult
rv
=
RemoveObserver
(
aObserver
aPrefs
[
i
]
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
static
void
NotifyObserver
(
const
char
*
aPref
void
*
aClosure
)
{
nsCOMPtr
<
nsIObserver
>
observer
=
static_cast
<
nsIObserver
*
>
(
aClosure
)
;
observer
-
>
Observe
(
nullptr
NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
NS_ConvertASCIItoUTF16
(
aPref
)
.
get
(
)
)
;
}
static
void
RegisterPriorityCallback
(
PrefChangedFunc
aCallback
const
char
*
aPref
void
*
aClosure
)
{
MOZ_ASSERT
(
Preferences
:
:
IsServiceAvailable
(
)
)
;
ValueObserverHashKey
hashKey
(
aPref
aCallback
Preferences
:
:
ExactMatch
)
;
RefPtr
<
ValueObserver
>
observer
;
gObserverTable
-
>
Get
(
&
hashKey
getter_AddRefs
(
observer
)
)
;
if
(
observer
)
{
observer
-
>
AppendClosure
(
aClosure
)
;
return
;
}
observer
=
new
ValueObserver
(
aPref
aCallback
Preferences
:
:
ExactMatch
)
;
observer
-
>
AppendClosure
(
aClosure
)
;
PREF_RegisterCallback
(
aPref
NotifyObserver
static_cast
<
nsIObserver
*
>
(
observer
)
true
)
;
gObserverTable
-
>
Put
(
observer
observer
)
;
}
nsresult
Preferences
:
:
RegisterCallback
(
PrefChangedFunc
aCallback
const
char
*
aPref
void
*
aClosure
MatchKind
aMatchKind
)
{
MOZ_ASSERT
(
aCallback
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
ValueObserverHashKey
hashKey
(
aPref
aCallback
aMatchKind
)
;
RefPtr
<
ValueObserver
>
observer
;
gObserverTable
-
>
Get
(
&
hashKey
getter_AddRefs
(
observer
)
)
;
if
(
observer
)
{
observer
-
>
AppendClosure
(
aClosure
)
;
return
NS_OK
;
}
observer
=
new
ValueObserver
(
aPref
aCallback
aMatchKind
)
;
observer
-
>
AppendClosure
(
aClosure
)
;
nsresult
rv
=
AddStrongObserver
(
observer
aPref
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
gObserverTable
-
>
Put
(
observer
observer
)
;
return
NS_OK
;
}
nsresult
Preferences
:
:
RegisterCallbackAndCall
(
PrefChangedFunc
aCallback
const
char
*
aPref
void
*
aClosure
MatchKind
aMatchKind
)
{
MOZ_ASSERT
(
aCallback
)
;
WATCHING_PREF_RAII
(
)
;
nsresult
rv
=
RegisterCallback
(
aCallback
aPref
aClosure
aMatchKind
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
(
*
aCallback
)
(
aPref
aClosure
)
;
}
return
rv
;
}
nsresult
Preferences
:
:
UnregisterCallback
(
PrefChangedFunc
aCallback
const
char
*
aPref
void
*
aClosure
MatchKind
aMatchKind
)
{
MOZ_ASSERT
(
aCallback
)
;
if
(
!
sPreferences
&
&
sShutdown
)
{
return
NS_OK
;
}
NS_ENSURE_TRUE
(
sPreferences
NS_ERROR_NOT_AVAILABLE
)
;
ValueObserverHashKey
hashKey
(
aPref
aCallback
aMatchKind
)
;
RefPtr
<
ValueObserver
>
observer
;
gObserverTable
-
>
Get
(
&
hashKey
getter_AddRefs
(
observer
)
)
;
if
(
!
observer
)
{
return
NS_OK
;
}
observer
-
>
RemoveClosure
(
aClosure
)
;
if
(
observer
-
>
HasNoClosures
(
)
)
{
gObserverTable
-
>
Remove
(
observer
)
;
}
return
NS_OK
;
}
static
void
BoolVarChanged
(
const
char
*
aPref
void
*
aClosure
)
{
CacheData
*
cache
=
static_cast
<
CacheData
*
>
(
aClosure
)
;
*
static_cast
<
bool
*
>
(
cache
-
>
mCacheLocation
)
=
Preferences
:
:
GetBool
(
aPref
cache
-
>
mDefaultValueBool
)
;
}
static
void
CacheDataAppendElement
(
CacheData
*
aData
)
{
if
(
!
gCacheData
)
{
MOZ_CRASH_UNSAFE_PRINTF
(
"
!
gCacheData
:
%
s
"
gCacheDataDesc
)
;
}
gCacheData
-
>
AppendElement
(
aData
)
;
}
nsresult
Preferences
:
:
AddBoolVarCache
(
bool
*
aCache
const
char
*
aPref
bool
aDefault
)
{
WATCHING_PREF_RAII
(
)
;
NS_ASSERTION
(
aCache
"
aCache
must
not
be
NULL
"
)
;
#
ifdef
DEBUG
AssertNotAlreadyCached
(
"
bool
"
aPref
aCache
)
;
#
endif
*
aCache
=
GetBool
(
aPref
aDefault
)
;
CacheData
*
data
=
new
CacheData
(
)
;
data
-
>
mCacheLocation
=
aCache
;
data
-
>
mDefaultValueBool
=
aDefault
;
CacheDataAppendElement
(
data
)
;
RegisterPriorityCallback
(
BoolVarChanged
aPref
data
)
;
return
NS_OK
;
}
static
void
IntVarChanged
(
const
char
*
aPref
void
*
aClosure
)
{
CacheData
*
cache
=
static_cast
<
CacheData
*
>
(
aClosure
)
;
*
static_cast
<
int32_t
*
>
(
cache
-
>
mCacheLocation
)
=
Preferences
:
:
GetInt
(
aPref
cache
-
>
mDefaultValueInt
)
;
}
nsresult
Preferences
:
:
AddIntVarCache
(
int32_t
*
aCache
const
char
*
aPref
int32_t
aDefault
)
{
WATCHING_PREF_RAII
(
)
;
NS_ASSERTION
(
aCache
"
aCache
must
not
be
NULL
"
)
;
#
ifdef
DEBUG
AssertNotAlreadyCached
(
"
int
"
aPref
aCache
)
;
#
endif
*
aCache
=
Preferences
:
:
GetInt
(
aPref
aDefault
)
;
CacheData
*
data
=
new
CacheData
(
)
;
data
-
>
mCacheLocation
=
aCache
;
data
-
>
mDefaultValueInt
=
aDefault
;
CacheDataAppendElement
(
data
)
;
RegisterPriorityCallback
(
IntVarChanged
aPref
data
)
;
return
NS_OK
;
}
static
void
UintVarChanged
(
const
char
*
aPref
void
*
aClosure
)
{
CacheData
*
cache
=
static_cast
<
CacheData
*
>
(
aClosure
)
;
*
static_cast
<
uint32_t
*
>
(
cache
-
>
mCacheLocation
)
=
Preferences
:
:
GetUint
(
aPref
cache
-
>
mDefaultValueUint
)
;
}
nsresult
Preferences
:
:
AddUintVarCache
(
uint32_t
*
aCache
const
char
*
aPref
uint32_t
aDefault
)
{
WATCHING_PREF_RAII
(
)
;
NS_ASSERTION
(
aCache
"
aCache
must
not
be
NULL
"
)
;
#
ifdef
DEBUG
AssertNotAlreadyCached
(
"
uint
"
aPref
aCache
)
;
#
endif
*
aCache
=
Preferences
:
:
GetUint
(
aPref
aDefault
)
;
CacheData
*
data
=
new
CacheData
(
)
;
data
-
>
mCacheLocation
=
aCache
;
data
-
>
mDefaultValueUint
=
aDefault
;
CacheDataAppendElement
(
data
)
;
RegisterPriorityCallback
(
UintVarChanged
aPref
data
)
;
return
NS_OK
;
}
template
<
MemoryOrdering
Order
>
static
void
AtomicUintVarChanged
(
const
char
*
aPref
void
*
aClosure
)
{
CacheData
*
cache
=
static_cast
<
CacheData
*
>
(
aClosure
)
;
*
static_cast
<
Atomic
<
uint32_t
Order
>
*
>
(
cache
-
>
mCacheLocation
)
=
Preferences
:
:
GetUint
(
aPref
cache
-
>
mDefaultValueUint
)
;
}
template
<
MemoryOrdering
Order
>
nsresult
Preferences
:
:
AddAtomicUintVarCache
(
Atomic
<
uint32_t
Order
>
*
aCache
const
char
*
aPref
uint32_t
aDefault
)
{
WATCHING_PREF_RAII
(
)
;
NS_ASSERTION
(
aCache
"
aCache
must
not
be
NULL
"
)
;
#
ifdef
DEBUG
AssertNotAlreadyCached
(
"
uint
"
aPref
aCache
)
;
#
endif
*
aCache
=
Preferences
:
:
GetUint
(
aPref
aDefault
)
;
CacheData
*
data
=
new
CacheData
(
)
;
data
-
>
mCacheLocation
=
aCache
;
data
-
>
mDefaultValueUint
=
aDefault
;
CacheDataAppendElement
(
data
)
;
RegisterPriorityCallback
(
AtomicUintVarChanged
<
Order
>
aPref
data
)
;
return
NS_OK
;
}
template
nsresult
Preferences
:
:
AddAtomicUintVarCache
(
Atomic
<
uint32_t
Relaxed
>
*
const
char
*
uint32_t
)
;
static
void
FloatVarChanged
(
const
char
*
aPref
void
*
aClosure
)
{
CacheData
*
cache
=
static_cast
<
CacheData
*
>
(
aClosure
)
;
*
static_cast
<
float
*
>
(
cache
-
>
mCacheLocation
)
=
Preferences
:
:
GetFloat
(
aPref
cache
-
>
mDefaultValueFloat
)
;
}
nsresult
Preferences
:
:
AddFloatVarCache
(
float
*
aCache
const
char
*
aPref
float
aDefault
)
{
WATCHING_PREF_RAII
(
)
;
NS_ASSERTION
(
aCache
"
aCache
must
not
be
NULL
"
)
;
#
ifdef
DEBUG
AssertNotAlreadyCached
(
"
float
"
aPref
aCache
)
;
#
endif
*
aCache
=
Preferences
:
:
GetFloat
(
aPref
aDefault
)
;
CacheData
*
data
=
new
CacheData
(
)
;
data
-
>
mCacheLocation
=
aCache
;
data
-
>
mDefaultValueFloat
=
aDefault
;
CacheDataAppendElement
(
data
)
;
RegisterPriorityCallback
(
FloatVarChanged
aPref
data
)
;
return
NS_OK
;
}
nsresult
Preferences
:
:
GetDefaultBool
(
const
char
*
aPref
bool
*
aResult
)
{
NS_PRECONDITION
(
aResult
"
aResult
must
not
be
NULL
"
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
PREF_GetBoolPref
(
aPref
aResult
true
)
;
}
nsresult
Preferences
:
:
GetDefaultInt
(
const
char
*
aPref
int32_t
*
aResult
)
{
NS_PRECONDITION
(
aResult
"
aResult
must
not
be
NULL
"
)
;
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
PREF_GetIntPref
(
aPref
aResult
true
)
;
}
nsresult
Preferences
:
:
GetDefaultCString
(
const
char
*
aPref
nsACString
&
aResult
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
char
*
result
;
nsresult
rv
=
PREF_CopyCharPref
(
aPref
&
result
true
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
aResult
.
Adopt
(
result
)
;
}
return
rv
;
}
nsresult
Preferences
:
:
GetDefaultString
(
const
char
*
aPref
nsAString
&
aResult
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
nsAutoCString
result
;
nsresult
rv
=
PREF_CopyCharPref
(
aPref
getter_Copies
(
result
)
true
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
CopyUTF8toUTF16
(
result
aResult
)
;
}
return
rv
;
}
nsresult
Preferences
:
:
GetDefaultLocalizedCString
(
const
char
*
aPref
nsACString
&
aResult
)
{
nsAutoString
result
;
nsresult
rv
=
GetDefaultLocalizedString
(
aPref
result
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
CopyUTF16toUTF8
(
result
aResult
)
;
}
return
rv
;
}
nsresult
Preferences
:
:
GetDefaultLocalizedString
(
const
char
*
aPref
nsAString
&
aResult
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
nsCOMPtr
<
nsIPrefLocalizedString
>
prefLocalString
;
nsresult
rv
=
sDefaultRootBranch
-
>
GetComplexValue
(
aPref
NS_GET_IID
(
nsIPrefLocalizedString
)
getter_AddRefs
(
prefLocalString
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
NS_ASSERTION
(
prefLocalString
"
Succeeded
but
the
result
is
NULL
"
)
;
prefLocalString
-
>
GetData
(
aResult
)
;
}
return
rv
;
}
nsresult
Preferences
:
:
GetDefaultComplex
(
const
char
*
aPref
const
nsIID
&
aType
void
*
*
aResult
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
NS_ERROR_NOT_AVAILABLE
)
;
return
sDefaultRootBranch
-
>
GetComplexValue
(
aPref
aType
aResult
)
;
}
int32_t
Preferences
:
:
GetDefaultType
(
const
char
*
aPref
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
nsIPrefBranch
:
:
PREF_INVALID
)
;
int32_t
result
;
return
NS_SUCCEEDED
(
sDefaultRootBranch
-
>
GetPrefType
(
aPref
&
result
)
)
?
result
:
nsIPrefBranch
:
:
PREF_INVALID
;
}
}
#
undef
ENSURE_MAIN_PROCESS
#
undef
ENSURE_MAIN_PROCESS_WITH_WARNING
NS_GENERIC_FACTORY_SINGLETON_CONSTRUCTOR
(
Preferences
Preferences
:
:
GetInstanceForService
)
NS_GENERIC_FACTORY_CONSTRUCTOR_INIT
(
nsPrefLocalizedString
Init
)
NS_GENERIC_FACTORY_CONSTRUCTOR
(
nsRelativeFilePref
)
static
NS_DEFINE_CID
(
kPrefServiceCID
NS_PREFSERVICE_CID
)
;
static
NS_DEFINE_CID
(
kPrefLocalizedStringCID
NS_PREFLOCALIZEDSTRING_CID
)
;
static
NS_DEFINE_CID
(
kRelativeFilePrefCID
NS_RELATIVEFILEPREF_CID
)
;
static
mozilla
:
:
Module
:
:
CIDEntry
kPrefCIDs
[
]
=
{
{
&
kPrefServiceCID
true
nullptr
PreferencesConstructor
}
{
&
kPrefLocalizedStringCID
false
nullptr
nsPrefLocalizedStringConstructor
}
{
&
kRelativeFilePrefCID
false
nullptr
nsRelativeFilePrefConstructor
}
{
nullptr
}
}
;
static
mozilla
:
:
Module
:
:
ContractIDEntry
kPrefContracts
[
]
=
{
{
NS_PREFSERVICE_CONTRACTID
&
kPrefServiceCID
}
{
NS_PREFLOCALIZEDSTRING_CONTRACTID
&
kPrefLocalizedStringCID
}
{
NS_RELATIVEFILEPREF_CONTRACTID
&
kRelativeFilePrefCID
}
{
"
mozilla
.
org
/
preferences
;
1
"
&
kPrefServiceCID
}
{
nullptr
}
}
;
static
void
UnloadPrefsModule
(
)
{
Preferences
:
:
Shutdown
(
)
;
}
static
const
mozilla
:
:
Module
kPrefModule
=
{
mozilla
:
:
Module
:
:
kVersion
kPrefCIDs
kPrefContracts
nullptr
nullptr
nullptr
UnloadPrefsModule
}
;
NSMODULE_DEFN
(
nsPrefModule
)
=
&
kPrefModule
;
