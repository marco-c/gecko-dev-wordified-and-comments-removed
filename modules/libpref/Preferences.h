#
ifndef
mozilla_Preferences_h
#
define
mozilla_Preferences_h
#
ifndef
MOZILLA_INTERNAL_API
#
error
"
This
header
is
only
usable
from
within
libxul
(
MOZILLA_INTERNAL_API
)
.
"
#
endif
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIPrefBranch
.
h
"
#
include
"
nsIPrefService
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
<
atomic
>
class
nsIFile
;
typedef
void
(
*
PrefChangedFunc
)
(
const
char
*
aPref
void
*
aData
)
;
class
nsPrefBranch
;
namespace
mozilla
{
struct
RegisterCallbacksInternal
;
void
UnloadPrefsModule
(
)
;
class
PreferenceServiceReporter
;
namespace
dom
{
class
Pref
;
class
PrefValue
;
}
namespace
ipc
{
class
FileDescriptor
;
}
struct
PrefsSizes
;
#
ifndef
Bool
enum
class
PrefType
:
uint8_t
{
None
=
0
String
=
1
Int
=
2
Bool
=
3
}
;
#
endif
#
ifdef
XP_UNIX
static
const
int
kPrefsFileDescriptor
=
8
;
static
const
int
kPrefMapFileDescriptor
=
9
;
#
endif
enum
class
PrefValueKind
:
uint8_t
{
Default
User
}
;
class
Preferences
final
:
public
nsIPrefService
public
nsIObserver
public
nsIPrefBranch
public
nsSupportsWeakReference
{
friend
class
:
:
nsPrefBranch
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIPREFSERVICE
NS_FORWARD_NSIPREFBRANCH
(
mRootBranch
-
>
)
NS_DECL_NSIOBSERVER
Preferences
(
)
;
static
bool
IsServiceAvailable
(
)
;
static
void
InitializeUserPrefs
(
)
;
static
void
FinishInitializingUserPrefs
(
)
;
static
already_AddRefed
<
Preferences
>
GetInstanceForService
(
)
;
static
void
Shutdown
(
)
;
static
nsIPrefService
*
GetService
(
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
nullptr
)
;
return
sPreferences
;
}
static
nsIPrefBranch
*
GetRootBranch
(
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
{
NS_ENSURE_TRUE
(
InitStaticMembers
(
)
nullptr
)
;
return
(
aKind
=
=
PrefValueKind
:
:
Default
)
?
sPreferences
-
>
mDefaultRootBranch
:
sPreferences
-
>
mRootBranch
;
}
static
int32_t
GetType
(
const
char
*
aPrefName
)
;
static
nsresult
GetBool
(
const
char
*
aPrefName
bool
*
aResult
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
nsresult
GetInt
(
const
char
*
aPrefName
int32_t
*
aResult
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
nsresult
GetUint
(
const
char
*
aPrefName
uint32_t
*
aResult
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
{
return
GetInt
(
aPrefName
reinterpret_cast
<
int32_t
*
>
(
aResult
)
aKind
)
;
}
static
nsresult
GetFloat
(
const
char
*
aPrefName
float
*
aResult
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
nsresult
GetCString
(
const
char
*
aPrefName
nsACString
&
aResult
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
nsresult
GetString
(
const
char
*
aPrefName
nsAString
&
aResult
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
nsresult
GetLocalizedCString
(
const
char
*
aPrefName
nsACString
&
aResult
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
nsresult
GetLocalizedString
(
const
char
*
aPrefName
nsAString
&
aResult
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
nsresult
GetComplex
(
const
char
*
aPrefName
const
nsIID
&
aType
void
*
*
aResult
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
bool
GetBool
(
const
char
*
aPrefName
bool
aFallback
=
false
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
int32_t
GetInt
(
const
char
*
aPrefName
int32_t
aFallback
=
0
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
uint32_t
GetUint
(
const
char
*
aPrefName
uint32_t
aFallback
=
0
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
float
GetFloat
(
const
char
*
aPrefName
float
aFallback
=
0
.
0f
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
nsresult
SetBool
(
const
char
*
aPrefName
bool
aValue
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
nsresult
SetInt
(
const
char
*
aPrefName
int32_t
aValue
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
nsresult
SetCString
(
const
char
*
aPrefName
const
nsACString
&
aValue
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
nsresult
SetUint
(
const
char
*
aPrefName
uint32_t
aValue
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
{
return
SetInt
(
aPrefName
static_cast
<
int32_t
>
(
aValue
)
aKind
)
;
}
static
nsresult
SetFloat
(
const
char
*
aPrefName
float
aValue
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
{
nsAutoCString
value
;
value
.
AppendFloat
(
aValue
)
;
return
SetCString
(
aPrefName
value
aKind
)
;
}
static
nsresult
SetCString
(
const
char
*
aPrefName
const
char
*
aValue
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
{
return
Preferences
:
:
SetCString
(
aPrefName
nsDependentCString
(
aValue
)
aKind
)
;
}
static
nsresult
SetString
(
const
char
*
aPrefName
const
char16ptr_t
aValue
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
{
return
Preferences
:
:
SetCString
(
aPrefName
NS_ConvertUTF16toUTF8
(
aValue
)
aKind
)
;
}
static
nsresult
SetString
(
const
char
*
aPrefName
const
nsAString
&
aValue
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
{
return
Preferences
:
:
SetCString
(
aPrefName
NS_ConvertUTF16toUTF8
(
aValue
)
aKind
)
;
}
static
nsresult
SetComplex
(
const
char
*
aPrefName
const
nsIID
&
aType
nsISupports
*
aValue
PrefValueKind
aKind
=
PrefValueKind
:
:
User
)
;
static
nsresult
Lock
(
const
char
*
aPrefName
)
;
static
nsresult
Unlock
(
const
char
*
aPrefName
)
;
static
bool
IsLocked
(
const
char
*
aPrefName
)
;
static
nsresult
ClearUser
(
const
char
*
aPrefName
)
;
static
bool
HasUserValue
(
const
char
*
aPref
)
;
static
nsresult
AddStrongObserver
(
nsIObserver
*
aObserver
const
nsACString
&
aPref
)
;
static
nsresult
AddWeakObserver
(
nsIObserver
*
aObserver
const
nsACString
&
aPref
)
;
static
nsresult
RemoveObserver
(
nsIObserver
*
aObserver
const
nsACString
&
aPref
)
;
template
<
int
N
>
static
nsresult
AddStrongObserver
(
nsIObserver
*
aObserver
const
char
(
&
aPref
)
[
N
]
)
{
return
AddStrongObserver
(
aObserver
nsLiteralCString
(
aPref
)
)
;
}
template
<
int
N
>
static
nsresult
AddWeakObserver
(
nsIObserver
*
aObserver
const
char
(
&
aPref
)
[
N
]
)
{
return
AddWeakObserver
(
aObserver
nsLiteralCString
(
aPref
)
)
;
}
template
<
int
N
>
static
nsresult
RemoveObserver
(
nsIObserver
*
aObserver
const
char
(
&
aPref
)
[
N
]
)
{
return
RemoveObserver
(
aObserver
nsLiteralCString
(
aPref
)
)
;
}
static
nsresult
AddStrongObservers
(
nsIObserver
*
aObserver
const
char
*
*
aPrefs
)
;
static
nsresult
AddWeakObservers
(
nsIObserver
*
aObserver
const
char
*
*
aPrefs
)
;
static
nsresult
RemoveObservers
(
nsIObserver
*
aObserver
const
char
*
*
aPrefs
)
;
template
<
typename
T
=
void
>
static
nsresult
RegisterCallback
(
PrefChangedFunc
aCallback
const
nsACString
&
aPref
T
*
aClosure
=
nullptr
)
{
return
RegisterCallback
(
aCallback
aPref
aClosure
ExactMatch
)
;
}
template
<
typename
T
=
void
>
static
nsresult
UnregisterCallback
(
PrefChangedFunc
aCallback
const
nsACString
&
aPref
T
*
aClosure
=
nullptr
)
{
return
UnregisterCallback
(
aCallback
aPref
aClosure
ExactMatch
)
;
}
template
<
typename
T
=
void
>
static
nsresult
RegisterCallbackAndCall
(
PrefChangedFunc
aCallback
const
nsACString
&
aPref
T
*
aClosure
=
nullptr
)
{
return
RegisterCallbackAndCall
(
aCallback
aPref
aClosure
ExactMatch
)
;
}
template
<
typename
T
=
void
>
static
nsresult
RegisterPrefixCallback
(
PrefChangedFunc
aCallback
const
nsACString
&
aPref
T
*
aClosure
=
nullptr
)
{
return
RegisterCallback
(
aCallback
aPref
aClosure
PrefixMatch
)
;
}
template
<
typename
T
=
void
>
static
nsresult
RegisterPrefixCallbackAndCall
(
PrefChangedFunc
aCallback
const
nsACString
&
aPref
T
*
aClosure
=
nullptr
)
{
return
RegisterCallbackAndCall
(
aCallback
aPref
aClosure
PrefixMatch
)
;
}
template
<
typename
T
=
void
>
static
nsresult
UnregisterPrefixCallback
(
PrefChangedFunc
aCallback
const
nsACString
&
aPref
T
*
aClosure
=
nullptr
)
{
return
UnregisterCallback
(
aCallback
aPref
aClosure
PrefixMatch
)
;
}
template
<
typename
T
=
void
>
static
nsresult
RegisterCallbacks
(
PrefChangedFunc
aCallback
const
char
*
*
aPrefs
T
*
aClosure
=
nullptr
)
{
return
RegisterCallbacks
(
aCallback
aPrefs
aClosure
ExactMatch
)
;
}
static
nsresult
RegisterCallbacksAndCall
(
PrefChangedFunc
aCallback
const
char
*
*
aPrefs
void
*
aClosure
=
nullptr
)
;
template
<
typename
T
=
void
>
static
nsresult
UnregisterCallbacks
(
PrefChangedFunc
aCallback
const
char
*
*
aPrefs
T
*
aClosure
=
nullptr
)
{
return
UnregisterCallbacks
(
aCallback
aPrefs
aClosure
ExactMatch
)
;
}
template
<
typename
T
=
void
>
static
nsresult
RegisterPrefixCallbacks
(
PrefChangedFunc
aCallback
const
char
*
*
aPrefs
T
*
aClosure
=
nullptr
)
{
return
RegisterCallbacks
(
aCallback
aPrefs
aClosure
PrefixMatch
)
;
}
template
<
typename
T
=
void
>
static
nsresult
UnregisterPrefixCallbacks
(
PrefChangedFunc
aCallback
const
char
*
*
aPrefs
T
*
aClosure
=
nullptr
)
{
return
UnregisterCallbacks
(
aCallback
aPrefs
aClosure
PrefixMatch
)
;
}
template
<
int
N
typename
T
=
void
>
static
nsresult
RegisterCallback
(
PrefChangedFunc
aCallback
const
char
(
&
aPref
)
[
N
]
T
*
aClosure
=
nullptr
)
{
return
RegisterCallback
(
aCallback
nsLiteralCString
(
aPref
)
aClosure
ExactMatch
)
;
}
template
<
int
N
typename
T
=
void
>
static
nsresult
UnregisterCallback
(
PrefChangedFunc
aCallback
const
char
(
&
aPref
)
[
N
]
T
*
aClosure
=
nullptr
)
{
return
UnregisterCallback
(
aCallback
nsLiteralCString
(
aPref
)
aClosure
ExactMatch
)
;
}
template
<
int
N
typename
T
=
void
>
static
nsresult
RegisterCallbackAndCall
(
PrefChangedFunc
aCallback
const
char
(
&
aPref
)
[
N
]
T
*
aClosure
=
nullptr
)
{
return
RegisterCallbackAndCall
(
aCallback
nsLiteralCString
(
aPref
)
aClosure
ExactMatch
)
;
}
template
<
int
N
typename
T
=
void
>
static
nsresult
RegisterPrefixCallback
(
PrefChangedFunc
aCallback
const
char
(
&
aPref
)
[
N
]
T
*
aClosure
=
nullptr
)
{
return
RegisterCallback
(
aCallback
nsLiteralCString
(
aPref
)
aClosure
PrefixMatch
)
;
}
template
<
int
N
typename
T
=
void
>
static
nsresult
RegisterPrefixCallbackAndCall
(
PrefChangedFunc
aCallback
const
char
(
&
aPref
)
[
N
]
T
*
aClosure
=
nullptr
)
{
return
RegisterCallbackAndCall
(
aCallback
nsLiteralCString
(
aPref
)
aClosure
PrefixMatch
)
;
}
template
<
int
N
typename
T
=
void
>
static
nsresult
UnregisterPrefixCallback
(
PrefChangedFunc
aCallback
const
char
(
&
aPref
)
[
N
]
T
*
aClosure
=
nullptr
)
{
return
UnregisterCallback
(
aCallback
nsLiteralCString
(
aPref
)
aClosure
PrefixMatch
)
;
}
static
void
SerializePreferences
(
nsCString
&
aStr
)
;
static
void
DeserializePreferences
(
char
*
aStr
size_t
aPrefsLen
)
;
static
mozilla
:
:
ipc
:
:
FileDescriptor
EnsureSnapshot
(
size_t
*
aSize
)
;
static
void
InitSnapshot
(
const
mozilla
:
:
ipc
:
:
FileDescriptor
&
size_t
aSize
)
;
static
void
GetPreference
(
dom
:
:
Pref
*
aPref
)
;
static
void
SetPreference
(
const
dom
:
:
Pref
&
aPref
)
;
#
ifdef
DEBUG
static
bool
ArePrefsInitedInContentProcess
(
)
;
#
endif
static
void
AddSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
PrefsSizes
&
aSizes
)
;
static
void
HandleDirty
(
)
;
nsresult
SavePrefFileBlocking
(
)
;
nsresult
SavePrefFileAsynchronous
(
)
;
private
:
virtual
~
Preferences
(
)
;
nsresult
NotifyServiceObservers
(
const
char
*
aSubject
)
;
already_AddRefed
<
nsIFile
>
ReadSavedPrefs
(
)
;
void
ReadUserOverridePrefs
(
)
;
nsresult
MakeBackupPrefFile
(
nsIFile
*
aFile
)
;
enum
class
SaveMethod
{
Blocking
Asynchronous
}
;
nsresult
SavePrefFileInternal
(
nsIFile
*
aFile
SaveMethod
aSaveMethod
)
;
nsresult
WritePrefFile
(
nsIFile
*
aFile
SaveMethod
aSaveMethod
)
;
bool
AllowOffMainThreadSave
(
)
;
public
:
enum
MatchKind
{
PrefixMatch
ExactMatch
}
;
private
:
static
void
SetupTelemetryPref
(
)
;
static
nsresult
InitInitialObjects
(
bool
aIsStartup
)
;
friend
struct
Internals
;
static
nsresult
RegisterCallback
(
PrefChangedFunc
aCallback
const
nsACString
&
aPref
void
*
aClosure
MatchKind
aMatchKind
bool
aIsPriority
=
false
)
;
static
nsresult
UnregisterCallback
(
PrefChangedFunc
aCallback
const
nsACString
&
aPref
void
*
aClosure
MatchKind
aMatchKind
)
;
static
nsresult
RegisterCallbackAndCall
(
PrefChangedFunc
aCallback
const
nsACString
&
aPref
void
*
aClosure
MatchKind
aMatchKind
)
;
static
nsresult
RegisterCallbacks
(
PrefChangedFunc
aCallback
const
char
*
*
aPrefs
void
*
aClosure
MatchKind
aMatchKind
)
;
static
nsresult
UnregisterCallbacks
(
PrefChangedFunc
aCallback
const
char
*
*
aPrefs
void
*
aClosure
MatchKind
aMatchKind
)
;
template
<
typename
T
>
static
nsresult
RegisterCallbackImpl
(
PrefChangedFunc
aCallback
T
&
aPref
void
*
aClosure
MatchKind
aMatchKind
bool
aIsPriority
=
false
)
;
template
<
typename
T
>
static
nsresult
UnregisterCallbackImpl
(
PrefChangedFunc
aCallback
T
&
aPref
void
*
aClosure
MatchKind
aMatchKind
)
;
static
nsresult
RegisterCallback
(
PrefChangedFunc
aCallback
const
char
*
aPref
void
*
aClosure
MatchKind
aMatchKind
bool
aIsPriority
=
false
)
{
return
RegisterCallback
(
aCallback
nsDependentCString
(
aPref
)
aClosure
aMatchKind
aIsPriority
)
;
}
static
nsresult
UnregisterCallback
(
PrefChangedFunc
aCallback
const
char
*
aPref
void
*
aClosure
MatchKind
aMatchKind
)
{
return
UnregisterCallback
(
aCallback
nsDependentCString
(
aPref
)
aClosure
aMatchKind
)
;
}
static
nsresult
RegisterCallbackAndCall
(
PrefChangedFunc
aCallback
const
char
*
aPref
void
*
aClosure
MatchKind
aMatchKind
)
{
return
RegisterCallbackAndCall
(
aCallback
nsDependentCString
(
aPref
)
aClosure
aMatchKind
)
;
}
private
:
nsCOMPtr
<
nsIFile
>
mCurrentFile
;
bool
mDirty
=
false
;
bool
mProfileShutdown
=
false
;
bool
mSavePending
=
false
;
nsCOMPtr
<
nsIPrefBranch
>
mRootBranch
;
nsCOMPtr
<
nsIPrefBranch
>
mDefaultRootBranch
;
static
StaticRefPtr
<
Preferences
>
sPreferences
;
static
bool
sShutdown
;
static
bool
InitStaticMembers
(
)
;
}
;
}
#
endif
