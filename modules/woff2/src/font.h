#
ifndef
WOFF2_FONT_H_
#
define
WOFF2_FONT_H_
#
include
<
stddef
.
h
>
#
include
<
inttypes
.
h
>
#
include
<
map
>
#
include
<
vector
>
namespace
woff2
{
struct
Font
{
uint32_t
flavor
;
uint16_t
num_tables
;
struct
Table
{
uint32_t
tag
;
uint32_t
checksum
;
uint32_t
offset
;
uint32_t
length
;
const
uint8_t
*
data
;
std
:
:
vector
<
uint8_t
>
buffer
;
Font
:
:
Table
*
reuse_of
;
uint8_t
flag_byte
;
bool
IsReused
(
)
const
;
}
;
std
:
:
map
<
uint32_t
Table
>
tables
;
std
:
:
vector
<
uint32_t
>
OutputOrderedTags
(
)
const
;
Table
*
FindTable
(
uint32_t
tag
)
;
const
Table
*
FindTable
(
uint32_t
tag
)
const
;
}
;
struct
FontCollection
{
uint32_t
header_version
;
std
:
:
map
<
uint32_t
Font
:
:
Table
*
>
tables
;
std
:
:
vector
<
Font
>
fonts
;
}
;
bool
ReadFont
(
const
uint8_t
*
data
size_t
len
Font
*
font
)
;
bool
ReadFontCollection
(
const
uint8_t
*
data
size_t
len
FontCollection
*
fonts
)
;
size_t
FontFileSize
(
const
Font
&
font
)
;
size_t
FontCollectionFileSize
(
const
FontCollection
&
font
)
;
bool
WriteFont
(
const
Font
&
font
uint8_t
*
dst
size_t
dst_size
)
;
bool
WriteFont
(
const
Font
&
font
size_t
*
offset
uint8_t
*
dst
size_t
dst_size
)
;
bool
WriteFontCollection
(
const
FontCollection
&
font_collection
uint8_t
*
dst
size_t
dst_size
)
;
int
NumGlyphs
(
const
Font
&
font
)
;
int
IndexFormat
(
const
Font
&
font
)
;
bool
GetGlyphData
(
const
Font
&
font
int
glyph_index
const
uint8_t
*
*
glyph_data
size_t
*
glyph_size
)
;
bool
RemoveDigitalSignature
(
Font
*
font
)
;
}
#
endif
