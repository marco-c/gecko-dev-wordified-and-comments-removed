#
include
<
woff2
/
decode
.
h
>
#
include
<
cassert
>
#
include
"
RLBoxWOFF2Sandbox
.
h
"
bool
RLBoxConvertWOFF2ToTTF
(
const
uint8_t
*
aData
size_t
aLength
size_t
aDecompressedSize
size_t
*
aResultSize
void
*
*
aResultOwningStr
uint8_t
*
*
aResultData
)
{
std
:
:
unique_ptr
<
std
:
:
string
>
buf
=
std
:
:
make_unique
<
std
:
:
string
>
(
aDecompressedSize
0
)
;
woff2
:
:
WOFF2StringOut
out
(
buf
.
get
(
)
)
;
if
(
!
woff2
:
:
ConvertWOFF2ToTTF
(
aData
aLength
&
out
)
)
{
return
false
;
}
*
aResultSize
=
out
.
Size
(
)
;
*
aResultData
=
reinterpret_cast
<
uint8_t
*
>
(
buf
-
>
data
(
)
)
;
*
aResultOwningStr
=
static_cast
<
void
*
>
(
buf
.
release
(
)
)
;
return
true
;
}
void
RLBoxDeleteWOFF2String
(
void
*
*
aStr
)
{
std
:
:
string
*
buf
=
static_cast
<
std
:
:
string
*
>
(
*
aStr
)
;
delete
buf
;
}
size_t
RLBoxComputeWOFF2FinalSize
(
const
uint8_t
*
aData
size_t
aLength
)
{
return
woff2
:
:
ComputeWOFF2FinalSize
(
aData
aLength
)
;
}
BrotliDecompressCallback
*
sRLBoxBrotliDecompressCallback
=
nullptr
;
void
RegisterWOFF2Callback
(
BrotliDecompressCallback
*
aCallback
)
{
#
ifdef
MOZ_IN_WASM_SANDBOX
sRLBoxBrotliDecompressCallback
=
aCallback
;
#
endif
}
BrotliDecoderResult
RLBoxBrotliDecoderDecompress
(
size_t
aEncodedSize
const
uint8_t
*
aEncodedBuffer
size_t
*
aDecodedSize
uint8_t
*
aDecodedBuffer
)
{
#
ifdef
MOZ_IN_WASM_SANDBOX
assert
(
sRLBoxBrotliDecompressCallback
)
;
return
sRLBoxBrotliDecompressCallback
(
aEncodedSize
reinterpret_cast
<
const
char
*
>
(
aEncodedBuffer
)
aDecodedSize
reinterpret_cast
<
char
*
>
(
aDecodedBuffer
)
)
;
#
else
return
BrotliDecoderDecompress
(
aEncodedSize
aEncodedBuffer
aDecodedSize
aDecodedBuffer
)
;
#
endif
}
