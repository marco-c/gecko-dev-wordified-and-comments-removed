#
ifndef
WOFF2_WOFF2_OUT_H_
#
define
WOFF2_WOFF2_OUT_H_
#
include
<
algorithm
>
#
include
<
cstring
>
#
include
<
memory
>
#
include
<
string
>
namespace
woff2
{
const
size_t
kDefaultMaxSize
=
30
*
1024
*
1024
;
class
WOFF2Out
{
public
:
virtual
~
WOFF2Out
(
void
)
{
}
virtual
bool
Write
(
const
void
*
buf
size_t
n
)
=
0
;
virtual
bool
Write
(
const
void
*
buf
size_t
offset
size_t
n
)
=
0
;
virtual
size_t
Size
(
)
=
0
;
}
;
class
WOFF2StringOut
:
public
WOFF2Out
{
public
:
explicit
WOFF2StringOut
(
std
:
:
string
*
buf
)
;
bool
Write
(
const
void
*
buf
size_t
n
)
override
;
bool
Write
(
const
void
*
buf
size_t
offset
size_t
n
)
override
;
size_t
Size
(
)
override
{
return
offset_
;
}
size_t
MaxSize
(
)
{
return
max_size_
;
}
void
SetMaxSize
(
size_t
max_size
)
;
private
:
std
:
:
string
*
buf_
;
size_t
max_size_
;
size_t
offset_
;
}
;
class
WOFF2MemoryOut
:
public
WOFF2Out
{
public
:
WOFF2MemoryOut
(
uint8_t
*
buf
size_t
buf_size
)
;
bool
Write
(
const
void
*
buf
size_t
n
)
override
;
bool
Write
(
const
void
*
buf
size_t
offset
size_t
n
)
override
;
size_t
Size
(
)
override
{
return
offset_
;
}
private
:
uint8_t
*
buf_
;
size_t
buf_size_
;
size_t
offset_
;
}
;
}
#
endif
