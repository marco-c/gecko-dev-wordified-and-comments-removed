#
include
"
nsGlobalWindowInner
.
h
"
#
include
"
PermissionDelegateHandler
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIPermissionManager
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
FeaturePolicyUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
typedef
PermissionDelegateHandler
:
:
PermissionDelegatePolicy
DelegatePolicy
;
typedef
PermissionDelegateHandler
:
:
PermissionDelegateInfo
DelegateInfo
;
static
const
DelegateInfo
sPermissionsMap
[
]
=
{
{
"
geo
"
u
"
geolocation
"
DelegatePolicy
:
:
eDelegateUseFeaturePolicy
}
{
"
desktop
-
notification
"
nullptr
DelegatePolicy
:
:
ePersistDeniedCrossOrigin
}
{
"
persistent
-
storage
"
nullptr
DelegatePolicy
:
:
eDelegateUseIframeOrigin
}
}
;
NS_IMPL_CYCLE_COLLECTION
(
PermissionDelegateHandler
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
PermissionDelegateHandler
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
PermissionDelegateHandler
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
PermissionDelegateHandler
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
PermissionDelegateHandler
:
:
PermissionDelegateHandler
(
dom
:
:
Document
*
aDocument
)
:
mDocument
(
aDocument
)
{
MOZ_ASSERT
(
aDocument
)
;
}
const
DelegateInfo
*
PermissionDelegateHandler
:
:
GetPermissionDelegateInfo
(
const
nsAString
&
aPermissionName
)
const
{
nsAutoString
lowerContent
(
aPermissionName
)
;
ToLowerCase
(
lowerContent
)
;
for
(
const
auto
&
perm
:
sPermissionsMap
)
{
if
(
lowerContent
.
EqualsASCII
(
perm
.
mPermissionName
)
)
{
return
&
perm
;
}
}
return
nullptr
;
}
nsresult
PermissionDelegateHandler
:
:
GetPermissionForPermissionsAPI
(
const
nsACString
&
aType
uint32_t
*
aPermission
)
{
MOZ_ASSERT
(
mDocument
)
;
const
DelegateInfo
*
info
=
GetPermissionDelegateInfo
(
NS_ConvertUTF8toUTF16
(
aType
)
)
;
if
(
!
info
)
{
*
aPermission
=
nsIPermissionManager
:
:
DENY_ACTION
;
return
NS_OK
;
}
nsresult
rv
;
nsCOMPtr
<
nsIPermissionManager
>
permMgr
=
do_GetService
(
NS_PERMISSIONMANAGER_CONTRACTID
&
rv
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
*
aPermission
=
nsIPermissionManager
:
:
DENY_ACTION
;
return
rv
;
}
nsCOMPtr
<
nsIPrincipal
>
principal
=
mDocument
-
>
NodePrincipal
(
)
;
if
(
!
Preferences
:
:
GetBool
(
"
permissions
.
delegation
.
enable
"
false
)
)
{
return
permMgr
-
>
TestPermissionFromPrincipal
(
principal
aType
aPermission
)
;
}
if
(
mDocument
-
>
GetWindow
(
)
-
>
IsTopLevelWindow
(
)
|
|
info
-
>
mPolicy
=
=
DelegatePolicy
:
:
eDelegateUseIframeOrigin
)
{
return
permMgr
-
>
TestPermissionFromPrincipal
(
principal
aType
aPermission
)
;
}
nsPIDOMWindowInner
*
window
=
mDocument
-
>
GetInnerWindow
(
)
;
nsGlobalWindowInner
*
innerWindow
=
nsGlobalWindowInner
:
:
Cast
(
window
)
;
nsIPrincipal
*
topPrincipal
=
innerWindow
-
>
GetTopLevelAntiTrackingPrincipal
(
)
;
if
(
principal
-
>
Subsumes
(
topPrincipal
)
)
{
return
permMgr
-
>
TestPermissionFromPrincipal
(
topPrincipal
aType
aPermission
)
;
}
if
(
info
-
>
mPolicy
=
=
DelegatePolicy
:
:
ePersistDeniedCrossOrigin
)
{
*
aPermission
=
nsIPermissionManager
:
:
DENY_ACTION
;
return
NS_OK
;
}
if
(
info
-
>
mPolicy
=
=
DelegatePolicy
:
:
eDelegateUseFeaturePolicy
&
&
info
-
>
mFeatureName
)
{
nsAutoString
featureName
(
info
-
>
mFeatureName
)
;
if
(
!
FeaturePolicyUtils
:
:
IsFeatureAllowed
(
mDocument
featureName
)
)
{
*
aPermission
=
nsIPermissionManager
:
:
DENY_ACTION
;
return
NS_OK
;
}
}
return
permMgr
-
>
TestPermissionFromPrincipal
(
topPrincipal
aType
aPermission
)
;
}
