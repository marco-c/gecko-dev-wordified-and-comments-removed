add_task
(
async
function
testRemovePermissionsSinceATimeWithTypeExceptions
(
)
{
let
pm
=
Services
.
perms
;
Assert
.
equal
(
pm
.
all
.
length
0
"
Should
start
with
no
permissions
"
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
"
http
:
/
/
amazon
.
com
:
8080
"
)
;
let
principal2
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
"
http
:
/
/
google
.
com
:
2048
"
)
;
let
principal3
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
"
https
:
/
/
google
.
com
"
)
;
pm
.
addFromPrincipal
(
principal
"
apple
"
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
)
;
pm
.
addFromPrincipal
(
principal
"
pear
"
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
pm
.
addFromPrincipal
(
principal
"
cucumber
"
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
await
new
Promise
(
resolve
=
>
do_timeout
(
20
resolve
)
)
;
let
since
=
Date
.
now
(
)
;
await
new
Promise
(
resolve
=
>
do_timeout
(
20
resolve
)
)
;
pm
.
addFromPrincipal
(
principal2
"
apple
"
Ci
.
nsIPermissionManager
.
DENY_ACTION
)
;
pm
.
addFromPrincipal
(
principal2
"
pear
"
Ci
.
nsIPermissionManager
.
DENY_ACTION
)
;
pm
.
addFromPrincipal
(
principal3
"
cucumber
"
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
)
;
pm
.
addFromPrincipal
(
principal3
"
apple
"
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
Assert
.
equal
(
pm
.
all
.
length
7
"
Check
all
permissions
added
"
)
;
pm
.
removeAllSinceWithTypeExceptions
(
since
[
"
pear
"
"
cucumber
"
]
)
;
Assert
.
equal
(
pm
.
all
.
length
5
'
"
apple
"
permissions
added
after
since
should
be
removed
'
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal
"
pear
"
)
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal2
"
pear
"
)
Ci
.
nsIPermissionManager
.
DENY_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal
"
apple
"
)
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal2
"
apple
"
)
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal3
"
apple
"
)
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal
"
cucumber
"
)
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal3
"
cucumber
"
)
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
)
;
pm
.
removeAllSinceWithTypeExceptions
(
since
[
"
pear
"
]
)
;
Assert
.
equal
(
pm
.
all
.
length
4
'
"
cucumber
"
permission
added
after
since
should
be
removed
'
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal
"
pear
"
)
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal2
"
pear
"
)
Ci
.
nsIPermissionManager
.
DENY_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal
"
apple
"
)
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal2
"
apple
"
)
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal3
"
apple
"
)
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal
"
cucumber
"
)
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal3
"
cucumber
"
)
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
)
;
pm
.
removeAllSinceWithTypeExceptions
(
since
[
]
)
;
Assert
.
equal
(
pm
.
all
.
length
3
"
All
permissions
added
after
since
should
be
removed
"
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal
"
pear
"
)
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal2
"
pear
"
)
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal
"
apple
"
)
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal2
"
apple
"
)
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal3
"
apple
"
)
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal
"
cucumber
"
)
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal3
"
cucumber
"
)
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
)
;
pm
.
removeAll
(
)
;
Assert
.
equal
(
pm
.
all
.
length
0
"
All
permissions
should
be
removed
"
)
;
}
)
;
