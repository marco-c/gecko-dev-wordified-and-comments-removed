const
TEST_ORIGIN
=
NetUtil
.
newURI
(
"
http
:
/
/
example
.
org
"
)
;
const
TEST_ORIGIN_HTTPS
=
NetUtil
.
newURI
(
"
https
:
/
/
example
.
org
"
)
;
const
TEST_ORIGIN_2
=
NetUtil
.
newURI
(
"
http
:
/
/
example
.
com
"
)
;
const
TEST_ORIGIN_3
=
NetUtil
.
newURI
(
"
https
:
/
/
example2
.
com
:
8080
"
)
;
const
TEST_PERMISSION
=
"
test
-
permission
"
;
function
promiseTimeout
(
delay
)
{
return
new
Promise
(
resolve
=
>
{
do_timeout
(
delay
resolve
)
;
}
)
;
}
add_task
(
async
function
do_test
(
)
{
do_get_profile
(
)
;
let
file
=
do_get_tempdir
(
)
;
file
.
append
(
"
test_default_permissions
"
)
;
let
ostream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileOutputStream
)
;
ostream
.
init
(
file
-
1
0o666
0
)
;
let
conv
=
Cc
[
"
mozilla
.
org
/
intl
/
converter
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIConverterOutputStream
)
;
conv
.
init
(
ostream
"
UTF
-
8
"
)
;
conv
.
writeString
(
"
#
this
is
a
comment
\
n
"
)
;
conv
.
writeString
(
"
\
n
"
)
;
conv
.
writeString
(
"
host
\
t
"
+
TEST_PERMISSION
+
"
\
t1
\
t
"
+
TEST_ORIGIN
.
host
+
"
\
n
"
)
;
conv
.
writeString
(
"
host
\
t
"
+
TEST_PERMISSION
+
"
\
t1
\
t
"
+
TEST_ORIGIN_2
.
host
+
"
\
n
"
)
;
conv
.
writeString
(
"
origin
\
t
"
+
TEST_PERMISSION
+
"
\
t1
\
t
"
+
TEST_ORIGIN_3
.
spec
+
"
\
n
"
)
;
conv
.
writeString
(
"
origin
\
t
"
+
TEST_PERMISSION
+
"
\
t1
\
t
"
+
TEST_ORIGIN
.
spec
+
"
^
inBrowser
=
1
\
n
"
)
;
ostream
.
close
(
)
;
Services
.
prefs
.
setCharPref
(
"
permissions
.
manager
.
defaultsUrl
"
"
file
:
/
/
"
+
file
.
path
)
;
Services
.
obs
.
notifyObservers
(
null
"
testonly
-
reload
-
permissions
-
from
-
disk
"
)
;
let
pm
=
Cc
[
"
mozilla
.
org
/
permissionmanager
;
1
"
]
.
getService
(
Ci
.
nsIPermissionManager
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
TEST_ORIGIN
{
}
)
;
let
principalHttps
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
TEST_ORIGIN_HTTPS
{
}
)
;
let
principal2
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
TEST_ORIGIN_2
{
}
)
;
let
principal3
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
TEST_ORIGIN_3
{
}
)
;
let
attrs
=
{
inIsolatedMozBrowser
:
true
}
;
let
principal4
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
TEST_ORIGIN
attrs
)
;
let
principal5
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
TEST_ORIGIN_3
attrs
)
;
attrs
=
{
userContextId
:
1
}
;
let
principal6
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
TEST_ORIGIN
attrs
)
;
attrs
=
{
firstPartyDomain
:
"
cnn
.
com
"
}
;
let
principal7
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
TEST_ORIGIN
attrs
)
;
attrs
=
{
userContextId
:
1
firstPartyDomain
:
"
cnn
.
com
"
}
;
let
principal8
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
TEST_ORIGIN
attrs
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principalHttps
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal3
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal4
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
pm
.
testPermissionFromPrincipal
(
principal5
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
findCapabilityViaEnum
(
TEST_ORIGIN
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
findCapabilityViaEnum
(
TEST_ORIGIN_3
)
)
;
await
checkCapabilityViaDB
(
null
)
;
pm
.
removeAll
(
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal3
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal4
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal6
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
pm
.
testPermissionFromPrincipal
(
principal7
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
pm
.
testPermissionFromPrincipal
(
principal8
TEST_PERMISSION
)
)
;
pm
.
removeFromPrincipal
(
principal
TEST_PERMISSION
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
pm
.
testPermissionFromPrincipal
(
principal
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
pm
.
testPermissionFromPrincipal
(
principal6
TEST_PERMISSION
)
)
;
await
checkCapabilityViaDB
(
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
)
;
Assert
.
equal
(
null
findCapabilityViaEnum
(
)
)
;
pm
.
removeAll
(
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal6
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
pm
.
testPermissionFromPrincipal
(
principal7
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
pm
.
testPermissionFromPrincipal
(
principal8
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
findCapabilityViaEnum
(
)
)
;
pm
.
addFromPrincipal
(
principal
TEST_PERMISSION
Ci
.
nsIPermissionManager
.
DENY_ACTION
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
DENY_ACTION
pm
.
testPermissionFromPrincipal
(
principal
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
DENY_ACTION
pm
.
testPermissionFromPrincipal
(
principal6
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
pm
.
testPermissionFromPrincipal
(
principal7
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
pm
.
testPermissionFromPrincipal
(
principal8
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
DENY_ACTION
findCapabilityViaEnum
(
)
)
;
await
checkCapabilityViaDB
(
Ci
.
nsIPermissionManager
.
DENY_ACTION
)
;
pm
.
addFromPrincipal
(
principal
TEST_PERMISSION
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
pm
.
testPermissionFromPrincipal
(
principal
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
pm
.
testPermissionFromPrincipal
(
principal6
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
pm
.
testPermissionFromPrincipal
(
principal7
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
pm
.
testPermissionFromPrincipal
(
principal8
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
findCapabilityViaEnum
(
)
)
;
await
checkCapabilityViaDB
(
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
)
;
pm
.
removeAll
(
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal2
TEST_PERMISSION
)
)
;
pm
.
addFromPrincipal
(
principal2
TEST_PERMISSION
Ci
.
nsIPermissionManager
.
DENY_ACTION
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
DENY_ACTION
pm
.
testPermissionFromPrincipal
(
principal2
TEST_PERMISSION
)
)
;
await
promiseTimeout
(
20
)
;
let
since
=
Number
(
Date
.
now
(
)
)
;
await
promiseTimeout
(
20
)
;
pm
.
addFromPrincipal
(
principal
TEST_PERMISSION
Ci
.
nsIPermissionManager
.
DENY_ACTION
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
DENY_ACTION
pm
.
testPermissionFromPrincipal
(
principal
TEST_PERMISSION
)
)
;
pm
.
removeAllSince
(
since
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal
TEST_PERMISSION
)
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
DENY_ACTION
pm
.
testPermissionFromPrincipal
(
principal2
TEST_PERMISSION
)
)
;
file
.
remove
(
false
)
;
}
)
;
function
findCapabilityViaEnum
(
origin
=
TEST_ORIGIN
type
=
TEST_PERMISSION
)
{
let
result
=
undefined
;
for
(
let
perm
of
Services
.
perms
.
enumerator
)
{
if
(
perm
.
matchesURI
(
origin
true
)
&
&
perm
.
type
=
=
type
)
{
if
(
result
!
=
=
undefined
)
{
do_throw
(
"
enumerator
found
multiple
entries
"
)
;
}
result
=
perm
.
capability
;
}
}
return
result
|
|
null
;
}
function
checkCapabilityViaDB
(
expected
origin
=
TEST_ORIGIN
type
=
TEST_PERMISSION
)
{
return
new
Promise
(
resolve
=
>
{
let
count
=
0
;
let
max
=
20
;
let
do_check
=
(
)
=
>
{
let
got
=
findCapabilityViaDB
(
origin
type
)
;
if
(
got
=
=
expected
)
{
Assert
.
equal
(
got
expected
"
The
database
has
the
expected
value
"
)
;
resolve
(
)
;
return
;
}
if
(
count
+
+
=
=
max
)
{
Assert
.
equal
(
got
expected
"
The
database
wasn
'
t
updated
with
the
expected
value
"
)
;
resolve
(
)
;
return
;
}
do_timeout
(
100
do_check
)
;
}
;
do_check
(
)
;
}
)
;
}
function
findCapabilityViaDB
(
origin
=
TEST_ORIGIN
type
=
TEST_PERMISSION
)
{
let
principal
=
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
origin
{
}
)
;
let
originStr
=
principal
.
origin
;
let
file
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
file
.
append
(
"
permissions
.
sqlite
"
)
;
let
storage
=
Cc
[
"
mozilla
.
org
/
storage
/
service
;
1
"
]
.
getService
(
Ci
.
mozIStorageService
)
;
let
connection
=
storage
.
openDatabase
(
file
)
;
let
query
=
connection
.
createStatement
(
"
SELECT
permission
FROM
moz_perms
WHERE
origin
=
:
origin
AND
type
=
:
type
"
)
;
query
.
bindByName
(
"
origin
"
originStr
)
;
query
.
bindByName
(
"
type
"
type
)
;
if
(
!
query
.
executeStep
(
)
)
{
return
null
;
}
let
result
=
query
.
getInt32
(
0
)
;
if
(
query
.
executeStep
(
)
)
{
do_throw
(
"
More
than
1
row
found
!
"
)
;
}
return
result
;
}
