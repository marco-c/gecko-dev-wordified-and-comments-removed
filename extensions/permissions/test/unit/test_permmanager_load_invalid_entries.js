var
DEBUG_TEST
=
false
;
function
run_test
(
)
{
Services
.
prefs
.
setCharPref
(
"
permissions
.
manager
.
defaultsUrl
"
"
"
)
;
var
dir
=
do_get_profile
(
)
;
var
pm
=
Services
.
perms
;
Assert
.
equal
(
pm
.
all
.
length
0
"
No
cookies
"
)
;
var
file
=
dir
.
clone
(
)
;
file
.
append
(
"
permissions
.
sqlite
"
)
;
var
storage
=
Services
.
storage
;
var
connection
=
storage
.
openDatabase
(
file
)
;
Assert
.
ok
(
file
.
exists
(
)
)
;
connection
.
schemaVersion
=
3
;
connection
.
executeSimpleSQL
(
"
DROP
TABLE
moz_hosts
"
)
;
connection
.
executeSimpleSQL
(
"
CREATE
TABLE
moz_hosts
(
"
+
"
id
INTEGER
PRIMARY
KEY
"
+
"
host
TEXT
"
+
"
type
TEXT
"
+
"
permission
INTEGER
"
+
"
expireType
INTEGER
"
+
"
expireTime
INTEGER
"
+
"
appId
INTEGER
"
+
"
isInBrowserElement
INTEGER
"
+
"
)
"
)
;
var
garbadge
=
[
{
host
:
"
42
"
type
:
"
0
"
permission
:
1
expireType
:
0
expireTime
:
0
isInBrowserElement
:
0
}
{
host
:
"
scheme
:
file
"
type
:
"
1
"
permission
:
0
expireType
:
0
expireTime
:
0
isInBrowserElement
:
0
}
{
host
:
"
192
.
168
.
0
.
1
"
type
:
"
2
"
permission
:
0
expireType
:
0
expireTime
:
0
isInBrowserElement
:
0
}
{
host
:
"
2001
:
0db8
:
0000
:
0000
:
0000
:
ff00
:
0042
:
8329
"
type
:
"
3
"
permission
:
0
expireType
:
0
expireTime
:
0
isInBrowserElement
:
0
}
{
host
:
"
:
:
1
"
type
:
"
4
"
permission
:
0
expireType
:
0
expireTime
:
0
isInBrowserElement
:
0
}
{
host
:
"
42
"
type
:
"
5
"
permission
:
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
expireType
:
0
expireTime
:
0
isInBrowserElement
:
0
}
{
host
:
"
42
"
type
:
"
6
"
permission
:
100
expireType
:
0
expireTime
:
0
isInBrowserElement
:
0
}
{
host
:
"
42
"
type
:
"
7
"
permission
:
-
100
expireType
:
0
expireTime
:
0
isInBrowserElement
:
0
}
{
host
:
"
42
"
type
:
"
8
"
permission
:
1
expireType
:
-
100
expireTime
:
0
isInBrowserElement
:
0
}
{
host
:
"
42
"
type
:
"
9
"
permission
:
1
expireType
:
100
expireTime
:
0
isInBrowserElement
:
0
}
{
host
:
"
42
"
type
:
"
10
"
permission
:
1
expireType
:
Ci
.
nsIPermissionManager
.
EXPIRE_TIME
expireTime
:
0
isInBrowserElement
:
0
}
{
host
:
"
42
"
type
:
"
11
"
permission
:
1
expireType
:
Ci
.
nsIPermissionManager
.
EXPIRE_SESSION
expireTime
:
1000
isInBrowserElement
:
0
}
{
host
:
"
42
"
type
:
"
12
"
permission
:
1
expireType
:
Ci
.
nsIPermissionManager
.
EXPIRE_NEVER
expireTime
:
1000
isInBrowserElement
:
0
}
{
host
:
"
42
"
type
:
"
13
"
permission
:
1
expireType
:
Ci
.
nsIPermissionManager
.
EXPIRE_TIME
expireTime
:
-
1
isInBrowserElement
:
0
}
{
host
:
"
42
"
type
:
"
15
"
permission
:
1
expireType
:
0
expireTime
:
0
isInBrowserElement
:
-
1
}
{
host
:
"
42
"
type
:
"
16
"
permission
:
1
expireType
:
0
expireTime
:
0
isInBrowserElement
:
10
}
{
host
:
"
example
.
org
"
type
:
"
test
-
load
-
invalid
-
entries
"
permission
:
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
expireType
:
0
expireTime
:
0
isInBrowserElement
:
0
}
]
;
for
(
var
i
=
0
;
i
<
garbadge
.
length
;
+
+
i
)
{
if
(
DEBUG_TEST
)
{
dump
(
"
\
n
value
#
"
+
i
+
"
\
n
\
n
"
)
;
}
var
data
=
garbadge
[
i
]
;
connection
.
executeSimpleSQL
(
"
INSERT
INTO
moz_hosts
"
+
"
(
id
host
type
permission
expireType
expireTime
isInBrowserElement
appId
)
"
+
"
VALUES
(
"
+
i
+
"
'
"
+
data
.
host
+
"
'
'
"
+
data
.
type
+
"
'
"
+
data
.
permission
+
"
"
+
data
.
expireType
+
"
"
+
data
.
expireTime
+
"
"
+
data
.
isInBrowserElement
+
"
0
)
"
)
;
}
Services
.
obs
.
notifyObservers
(
null
"
testonly
-
reload
-
permissions
-
from
-
disk
"
)
;
Assert
.
greater
(
pm
.
all
.
length
0
)
;
Assert
.
equal
(
connection
.
schemaVersion
12
)
;
let
select
=
connection
.
createStatement
(
"
SELECT
modificationTime
FROM
moz_perms
"
)
;
let
numMigrated
=
0
;
while
(
select
.
executeStep
(
)
)
{
let
thisModTime
=
select
.
getInt64
(
0
)
;
Assert
.
ok
(
thisModTime
>
0
"
new
modifiedTime
field
is
correct
(
but
it
'
s
not
0
!
)
"
)
;
numMigrated
+
=
1
;
}
Assert
.
greater
(
numMigrated
0
"
we
found
at
least
1
record
that
was
migrated
"
)
;
let
ssm
=
Services
.
scriptSecurityManager
;
let
uri
=
NetUtil
.
newURI
(
"
http
:
/
/
example
.
org
"
)
;
let
principal
=
ssm
.
createContentPrincipal
(
uri
{
}
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal
"
test
-
load
-
invalid
-
entries
"
)
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
}
