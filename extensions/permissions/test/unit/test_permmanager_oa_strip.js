const
TEST_URI
=
Services
.
io
.
newURI
(
"
http
:
/
/
example
.
com
"
)
;
const
TEST_PERMISSION
=
"
test
/
oastrip
"
;
const
TEST_PERMISSION2
=
"
test
/
oastrip2
"
;
const
TEST_PERMISSION3
=
"
test
/
oastrip3
"
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
TEST_URI
{
}
)
;
let
principalPrivateBrowsing
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
TEST_URI
{
privateBrowsingId
:
1
}
)
;
let
principalUserContext1
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
TEST_URI
{
userContextId
:
1
}
)
;
let
principalUserContext2
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
TEST_URI
{
userContextId
:
2
}
)
;
function
testOAIsolation
(
permIsolateUserContext
permIsolatePrivateBrowsing
)
{
info
(
testOAIsolation
:
permIsolateUserContext
:
{
permIsolateUserContext
}
;
permIsolatePrivateBrowsing
:
{
permIsolatePrivateBrowsing
}
)
;
let
pm
=
Cc
[
"
mozilla
.
org
/
permissionmanager
;
1
"
]
.
getService
(
Ci
.
nsIPermissionManager
)
;
Services
.
prefs
.
setBoolPref
(
"
permissions
.
isolateBy
.
userContext
"
permIsolateUserContext
)
;
Services
.
prefs
.
setBoolPref
(
"
permissions
.
isolateBy
.
privateBrowsing
"
permIsolatePrivateBrowsing
)
;
pm
.
addFromPrincipal
(
principal
TEST_PERMISSION
pm
.
ALLOW_ACTION
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principal
TEST_PERMISSION
)
)
;
Assert
.
equal
(
permIsolateUserContext
?
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
:
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principalUserContext1
TEST_PERMISSION
)
)
;
Assert
.
equal
(
permIsolateUserContext
?
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
:
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principalUserContext2
TEST_PERMISSION
)
)
;
Assert
.
equal
(
permIsolatePrivateBrowsing
?
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
:
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
pm
.
testPermissionFromPrincipal
(
principalPrivateBrowsing
TEST_PERMISSION
)
)
;
pm
.
addFromPrincipal
(
principalPrivateBrowsing
TEST_PERMISSION2
pm
.
DENY_ACTION
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
DENY_ACTION
pm
.
testPermissionFromPrincipal
(
principalPrivateBrowsing
TEST_PERMISSION2
)
)
;
Assert
.
equal
(
permIsolatePrivateBrowsing
?
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
:
Ci
.
nsIPermissionManager
.
DENY_ACTION
pm
.
testPermissionFromPrincipal
(
principal
TEST_PERMISSION2
)
)
;
Assert
.
equal
(
permIsolatePrivateBrowsing
|
|
permIsolateUserContext
?
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
:
Ci
.
nsIPermissionManager
.
DENY_ACTION
pm
.
testPermissionFromPrincipal
(
principalUserContext1
TEST_PERMISSION2
)
)
;
Assert
.
equal
(
permIsolatePrivateBrowsing
|
|
permIsolateUserContext
?
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
:
Ci
.
nsIPermissionManager
.
DENY_ACTION
pm
.
testPermissionFromPrincipal
(
principalUserContext2
TEST_PERMISSION2
)
)
;
pm
.
addFromPrincipal
(
principalUserContext1
TEST_PERMISSION3
pm
.
PROMPT_ACTION
)
;
Assert
.
equal
(
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
pm
.
testPermissionFromPrincipal
(
principalUserContext1
TEST_PERMISSION3
)
)
;
Assert
.
equal
(
permIsolateUserContext
?
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
:
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
pm
.
testPermissionFromPrincipal
(
principal
TEST_PERMISSION3
)
)
;
Assert
.
equal
(
permIsolateUserContext
?
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
:
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
pm
.
testPermissionFromPrincipal
(
principalUserContext2
TEST_PERMISSION3
)
)
;
Assert
.
equal
(
permIsolatePrivateBrowsing
|
|
permIsolateUserContext
?
Ci
.
nsIPermissionManager
.
UNKNOWN_ACTION
:
Ci
.
nsIPermissionManager
.
PROMPT_ACTION
pm
.
testPermissionFromPrincipal
(
principalPrivateBrowsing
TEST_PERMISSION3
)
)
;
pm
.
removeAll
(
)
;
}
add_task
(
async
function
do_test
(
)
{
testOAIsolation
(
true
true
)
;
testOAIsolation
(
true
false
)
;
testOAIsolation
(
false
true
)
;
testOAIsolation
(
false
false
)
;
}
)
;
