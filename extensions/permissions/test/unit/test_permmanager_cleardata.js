var
pm
;
function
createPrincipal
(
aOrigin
aOriginAttributes
)
{
return
Services
.
scriptSecurityManager
.
createContentPrincipal
(
NetUtil
.
newURI
(
aOrigin
)
aOriginAttributes
)
;
}
function
getData
(
aPattern
)
{
return
JSON
.
stringify
(
aPattern
)
;
}
function
test
(
aEntries
aData
aResults
)
{
let
principals
=
[
]
;
for
(
const
entry
of
aEntries
)
{
principals
.
push
(
createPrincipal
(
entry
.
origin
entry
.
originAttributes
)
)
;
}
for
(
const
principal
of
principals
)
{
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal
"
test
/
clear
-
origin
"
)
pm
.
UNKNOWN_ACTION
)
;
pm
.
addFromPrincipal
(
principal
"
test
/
clear
-
origin
"
pm
.
ALLOW_ACTION
pm
.
EXPIRE_NEVER
0
)
;
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principal
"
test
/
clear
-
origin
"
)
pm
.
ALLOW_ACTION
)
;
}
pm
.
removePermissionsWithAttributes
(
aData
)
;
var
length
=
aEntries
.
length
;
for
(
let
i
=
0
;
i
<
length
;
+
+
i
)
{
Assert
.
equal
(
pm
.
testPermissionFromPrincipal
(
principals
[
i
]
"
test
/
clear
-
origin
"
)
aResults
[
i
]
)
;
if
(
aResults
[
i
]
=
=
pm
.
ALLOW_ACTION
)
{
pm
.
removeFromPrincipal
(
principals
[
i
]
"
test
/
clear
-
origin
"
)
;
}
}
}
function
run_test
(
)
{
do_get_profile
(
)
;
pm
=
Services
.
perms
;
let
entries
=
[
{
origin
:
"
http
:
/
/
example
.
com
"
originAttributes
:
{
}
}
]
;
test
(
entries
getData
(
{
}
)
[
pm
.
UNKNOWN_ACTION
pm
.
UNKNOWN_ACTION
pm
.
ALLOW_ACTION
pm
.
ALLOW_ACTION
]
)
;
}
