var
test_generator
=
do_run_test
(
)
;
function
run_test
(
)
{
do_test_pending
(
)
;
test_generator
.
next
(
)
;
}
function
continue_test
(
)
{
do_run_generator
(
test_generator
)
;
}
function
*
do_run_test
(
)
{
let
pm
=
Services
.
perms
;
let
permURI
=
NetUtil
.
newURI
(
"
http
:
/
/
example
.
com
"
)
;
let
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
permURI
{
}
)
;
let
now
=
Number
(
Date
.
now
(
)
)
;
pm
.
addFromPrincipal
(
principal
"
test
/
expiration
-
perm
-
exp
"
1
pm
.
EXPIRE_TIME
now
)
;
pm
.
addFromPrincipal
(
principal
"
test
/
expiration
-
session
-
exp
"
1
pm
.
EXPIRE_SESSION
now
)
;
pm
.
addFromPrincipal
(
principal
"
test
/
expiration
-
perm
-
exp2
"
1
pm
.
EXPIRE_TIME
now
+
100
)
;
pm
.
addFromPrincipal
(
principal
"
test
/
expiration
-
session
-
exp2
"
1
pm
.
EXPIRE_SESSION
now
+
100
)
;
pm
.
addFromPrincipal
(
principal
"
test
/
expiration
-
perm
-
exp3
"
1
pm
.
EXPIRE_TIME
now
+
1e6
)
;
pm
.
addFromPrincipal
(
principal
"
test
/
expiration
-
session
-
exp3
"
1
pm
.
EXPIRE_SESSION
now
+
1e6
)
;
pm
.
addFromPrincipal
(
principal
"
test
/
expiration
-
perm
-
nexp
"
1
pm
.
EXPIRE_NEVER
0
)
;
Assert
.
equal
(
1
pm
.
testPermissionFromPrincipal
(
principal
"
test
/
expiration
-
perm
-
exp3
"
)
)
;
Assert
.
equal
(
1
pm
.
testPermissionFromPrincipal
(
principal
"
test
/
expiration
-
session
-
exp3
"
)
)
;
Assert
.
equal
(
1
pm
.
testPermissionFromPrincipal
(
principal
"
test
/
expiration
-
perm
-
nexp
"
)
)
;
Assert
.
equal
(
1
pm
.
getAllWithTypePrefix
(
"
test
/
expiration
-
perm
-
exp3
"
)
.
length
)
;
Assert
.
equal
(
1
pm
.
getAllWithTypePrefix
(
"
test
/
expiration
-
session
-
exp3
"
)
.
length
)
;
Assert
.
equal
(
1
pm
.
getAllWithTypePrefix
(
"
test
/
expiration
-
perm
-
nexp
"
)
.
length
)
;
Assert
.
equal
(
5
pm
.
getAllForPrincipal
(
principal
)
.
length
)
;
do_timeout
(
10
continue_test
)
;
yield
;
Assert
.
equal
(
0
pm
.
testPermissionFromPrincipal
(
principal
"
test
/
expiration
-
perm
-
exp
"
)
)
;
Assert
.
equal
(
0
pm
.
testPermissionFromPrincipal
(
principal
"
test
/
expiration
-
session
-
exp
"
)
)
;
do_timeout
(
200
continue_test
)
;
yield
;
Assert
.
equal
(
0
pm
.
testPermissionFromPrincipal
(
principal
"
test
/
expiration
-
perm
-
exp2
"
)
)
;
Assert
.
equal
(
0
pm
.
testPermissionFromPrincipal
(
principal
"
test
/
expiration
-
session
-
exp2
"
)
)
;
Assert
.
equal
(
0
pm
.
getAllWithTypePrefix
(
"
test
/
expiration
-
perm
-
exp2
"
)
.
length
)
;
Assert
.
equal
(
0
pm
.
getAllWithTypePrefix
(
"
test
/
expiration
-
session
-
exp2
"
)
.
length
)
;
Assert
.
equal
(
3
pm
.
getAllForPrincipal
(
principal
)
.
length
)
;
Assert
.
equal
(
null
pm
.
getPermissionObject
(
principal
"
test
/
expiration
-
perm
-
exp
"
false
)
)
;
Assert
.
equal
(
null
pm
.
getPermissionObject
(
principal
"
test
/
expiration
-
session
-
exp
"
false
)
)
;
Assert
.
equal
(
null
pm
.
getPermissionObject
(
principal
"
test
/
expiration
-
perm
-
exp2
"
false
)
)
;
Assert
.
equal
(
null
pm
.
getPermissionObject
(
principal
"
test
/
expiration
-
session
-
exp2
"
false
)
)
;
let
principalPB
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
permURI
{
privateBrowsingId
:
1
}
)
;
pm
.
addFromPrincipal
(
principalPB
"
test
/
expiration
-
session
-
pb
"
pm
.
ALLOW_ACTION
)
;
let
perm
=
pm
.
getPermissionObject
(
principalPB
"
test
/
expiration
-
session
-
pb
"
true
)
;
Assert
.
equal
(
perm
.
expireType
pm
.
EXPIRE_SESSION
)
;
pm
.
addFromPrincipalAndPersistInPrivateBrowsing
(
principalPB
"
test
/
expiration
-
session
-
pb
"
pm
.
ALLOW_ACTION
)
;
perm
=
pm
.
getPermissionObject
(
principalPB
"
test
/
expiration
-
session
-
pb
"
true
)
;
Assert
.
equal
(
perm
.
expireType
pm
.
EXPIRE_NEVER
)
;
do_finish_generator_test
(
test_generator
)
;
}
