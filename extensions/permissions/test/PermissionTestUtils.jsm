"
use
strict
"
;
let
pm
=
Services
.
perms
;
let
secMan
=
Services
.
scriptSecurityManager
;
const
EXPORTED_SYMBOLS
=
[
"
PermissionTestUtils
"
]
;
function
convertToPrincipal
(
subject
)
{
if
(
subject
instanceof
Ci
.
nsIPrincipal
)
{
return
subject
;
}
if
(
typeof
subject
=
=
=
"
string
"
)
{
return
secMan
.
createContentPrincipalFromOrigin
(
subject
)
;
}
if
(
subject
=
=
=
null
|
|
subject
instanceof
Ci
.
nsIURI
)
{
return
secMan
.
createContentPrincipal
(
subject
{
}
)
;
}
throw
new
Error
(
"
subject
parameter
must
be
an
nsIURI
an
origin
string
or
a
principal
.
"
)
;
}
let
PermissionTestUtils
=
{
add
(
subject
.
.
.
args
)
{
return
pm
.
addFromPrincipal
(
convertToPrincipal
(
subject
)
.
.
.
args
)
;
}
getAll
(
subject
.
.
.
args
)
{
return
pm
.
getAllForPrincipal
(
convertToPrincipal
(
subject
)
.
.
.
args
)
;
}
remove
(
subject
.
.
.
args
)
{
return
pm
.
removeFromPrincipal
(
convertToPrincipal
(
subject
)
.
.
.
args
)
;
}
testPermission
(
subject
.
.
.
args
)
{
return
pm
.
testPermissionFromPrincipal
(
convertToPrincipal
(
subject
)
.
.
.
args
)
;
}
testExactPermission
(
subject
.
.
.
args
)
{
return
pm
.
testExactPermissionFromPrincipal
(
convertToPrincipal
(
subject
)
.
.
.
args
)
;
}
getPermissionObject
(
subject
type
exactHost
=
false
)
{
return
pm
.
getPermissionObject
(
convertToPrincipal
(
subject
)
type
exactHost
)
;
}
}
;
