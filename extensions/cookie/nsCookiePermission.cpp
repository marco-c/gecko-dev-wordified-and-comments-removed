#
include
"
nsCookiePermission
.
h
"
#
include
"
nsICookie2
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsICookieManager
.
h
"
#
include
"
nsICookieService
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIProtocolHandler
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIDOMWindow
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsILoadContext
.
h
"
#
include
"
nsIScriptObjectPrincipal
.
h
"
#
include
"
nsNetCID
.
h
"
#
include
"
prtime
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsContentUtils
.
h
"
using
namespace
mozilla
;
static
const
bool
kDefaultPolicy
=
true
;
static
const
nsLiteralCString
kPermissionType
(
NS_LITERAL_CSTRING
(
"
cookie
"
)
)
;
namespace
{
mozilla
:
:
StaticRefPtr
<
nsCookiePermission
>
gSingleton
;
}
NS_IMPL_ISUPPORTS
(
nsCookiePermission
nsICookiePermission
)
already_AddRefed
<
nsICookiePermission
>
nsCookiePermission
:
:
GetOrCreate
(
)
{
if
(
!
gSingleton
)
{
gSingleton
=
new
nsCookiePermission
(
)
;
}
return
do_AddRef
(
gSingleton
)
;
}
void
nsCookiePermission
:
:
Shutdown
(
)
{
gSingleton
=
nullptr
;
}
bool
nsCookiePermission
:
:
Init
(
)
{
nsresult
rv
;
mPermMgr
=
do_GetService
(
NS_PERMISSIONMANAGER_CONTRACTID
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
return
false
;
return
true
;
}
NS_IMETHODIMP
nsCookiePermission
:
:
SetAccess
(
nsIURI
*
aURI
nsCookieAccess
aAccess
)
{
if
(
!
EnsureInitialized
(
)
)
return
NS_ERROR_UNEXPECTED
;
return
mPermMgr
-
>
Add
(
aURI
kPermissionType
aAccess
nsIPermissionManager
:
:
EXPIRE_NEVER
0
)
;
}
NS_IMETHODIMP
nsCookiePermission
:
:
CanSetCookie
(
nsIURI
*
aURI
nsIChannel
*
aChannel
nsICookie2
*
aCookie
bool
*
aIsSession
int64_t
*
aExpiry
bool
*
aResult
)
{
NS_ASSERTION
(
aURI
"
null
uri
"
)
;
*
aResult
=
kDefaultPolicy
;
if
(
!
EnsureInitialized
(
)
)
return
NS_ERROR_UNEXPECTED
;
uint32_t
perm
;
mPermMgr
-
>
TestPermission
(
aURI
kPermissionType
&
perm
)
;
switch
(
perm
)
{
case
nsICookiePermission
:
:
ACCESS_SESSION
:
*
aIsSession
=
true
;
MOZ_FALLTHROUGH
;
case
nsICookiePermission
:
:
ACCESS_ALLOW
:
*
aResult
=
true
;
break
;
case
nsICookiePermission
:
:
ACCESS_DENY
:
*
aResult
=
false
;
break
;
default
:
if
(
StaticPrefs
:
:
network_cookie_lifetimePolicy
(
)
=
=
nsICookieService
:
:
ACCEPT_NORMALLY
)
{
*
aResult
=
true
;
return
NS_OK
;
}
int64_t
currentTime
=
PR_Now
(
)
/
PR_USEC_PER_SEC
;
int64_t
delta
=
*
aExpiry
-
currentTime
;
if
(
!
*
aIsSession
&
&
delta
>
0
)
{
if
(
StaticPrefs
:
:
network_cookie_lifetimePolicy
(
)
=
=
nsICookieService
:
:
ACCEPT_SESSION
)
{
*
aIsSession
=
true
;
}
}
}
return
NS_OK
;
}
