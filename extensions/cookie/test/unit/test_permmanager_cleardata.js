var
pm
;
function
createPrincipal
(
aOrigin
aOriginAttributes
)
{
return
Services
.
scriptSecurityManager
.
createCodebasePrincipal
(
NetUtil
.
newURI
(
aOrigin
)
aOriginAttributes
)
;
}
function
getData
(
aPattern
)
{
return
JSON
.
stringify
(
aPattern
)
;
}
function
test
(
aEntries
aData
aResults
)
{
let
principals
=
[
]
;
for
(
entry
of
aEntries
)
{
principals
.
push
(
createPrincipal
(
entry
.
origin
entry
.
originAttributes
)
)
;
}
for
(
principal
of
principals
)
{
do_check_eq
(
pm
.
testPermissionFromPrincipal
(
principal
"
test
/
clear
-
origin
"
)
pm
.
UNKNOWN_ACTION
)
;
pm
.
addFromPrincipal
(
principal
"
test
/
clear
-
origin
"
pm
.
ALLOW_ACTION
pm
.
EXPIRE_NEVER
0
)
;
do_check_eq
(
pm
.
testPermissionFromPrincipal
(
principal
"
test
/
clear
-
origin
"
)
pm
.
ALLOW_ACTION
)
;
}
Services
.
obs
.
notifyObservers
(
null
'
clear
-
origin
-
data
'
aData
)
;
var
length
=
aEntries
.
length
;
for
(
let
i
=
0
;
i
<
length
;
+
+
i
)
{
do_check_eq
(
pm
.
testPermissionFromPrincipal
(
principals
[
i
]
'
test
/
clear
-
origin
'
)
aResults
[
i
]
)
;
if
(
aResults
[
i
]
=
=
pm
.
ALLOW_ACTION
)
{
pm
.
removeFromPrincipal
(
principals
[
i
]
'
test
/
clear
-
origin
'
)
;
}
}
}
function
run_test
(
)
{
do_get_profile
(
)
;
pm
=
Cc
[
"
mozilla
.
org
/
permissionmanager
;
1
"
]
.
getService
(
Ci
.
nsIPermissionManager
)
;
let
entries
=
[
{
origin
:
'
http
:
/
/
example
.
com
'
originAttributes
:
{
appId
:
1
}
}
{
origin
:
'
http
:
/
/
example
.
com
'
originAttributes
:
{
appId
:
1
inBrowser
:
true
}
}
{
origin
:
'
http
:
/
/
example
.
com
'
originAttributes
:
{
}
}
{
origin
:
'
http
:
/
/
example
.
com
'
originAttributes
:
{
appId
:
2
}
}
]
;
test
(
entries
getData
(
{
appId
:
1
}
)
[
pm
.
UNKNOWN_ACTION
pm
.
UNKNOWN_ACTION
pm
.
ALLOW_ACTION
pm
.
ALLOW_ACTION
]
)
;
test
(
entries
getData
(
{
appId
:
1
inBrowser
:
true
}
)
[
pm
.
ALLOW_ACTION
pm
.
UNKNOWN_ACTION
pm
.
ALLOW_ACTION
pm
.
ALLOW_ACTION
]
)
;
}
