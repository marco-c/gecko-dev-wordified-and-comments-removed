"
use
strict
"
;
var
test_generator
=
do_run_test
(
)
;
function
run_test
(
)
{
do_test_pending
(
)
;
test_generator
.
next
(
)
;
}
function
finish_test
(
)
{
do_execute_soon
(
function
(
)
{
test_generator
.
return
(
)
;
do_test_finished
(
)
;
}
)
;
}
function
*
do_run_test
(
)
{
let
profile
=
do_get_profile
(
)
;
var
spec1
=
"
http
:
/
/
foo
.
com
/
foo
.
html
"
;
var
spec2
=
"
https
:
/
/
bar
.
com
/
bar
.
html
"
;
var
uri1
=
NetUtil
.
newURI
(
spec1
)
;
var
uri2
=
NetUtil
.
newURI
(
spec2
)
;
var
channel1
=
NetUtil
.
newChannel
(
{
uri
:
uri1
loadUsingSystemPrincipal
:
true
}
)
;
var
channel2
=
NetUtil
.
newChannel
(
{
uri
:
uri2
loadUsingSystemPrincipal
:
true
}
)
;
var
httpchannel1
=
channel1
.
QueryInterface
(
Ci
.
nsIHttpChannelInternal
)
;
var
httpchannel2
=
channel2
.
QueryInterface
(
Ci
.
nsIHttpChannelInternal
)
;
httpchannel1
.
forceAllowThirdPartyCookie
=
true
;
httpchannel2
.
forceAllowThirdPartyCookie
=
true
;
Services
.
prefs
.
setIntPref
(
"
network
.
cookie
.
cookieBehavior
"
0
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookie
.
thirdparty
.
nonsecureSessionOnly
"
false
)
;
do_set_cookies
(
uri1
channel2
false
[
1
2
3
4
]
)
;
do_set_cookies
(
uri2
channel1
false
[
1
2
3
4
]
)
;
do_close_profile
(
test_generator
)
;
yield
;
do_load_profile
(
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
uri1
.
host
)
4
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
uri2
.
host
)
4
)
;
Services
.
prefs
.
setBoolPref
(
"
network
.
cookie
.
thirdparty
.
nonsecureSessionOnly
"
true
)
;
Services
.
cookies
.
removeAll
(
)
;
do_set_cookies
(
uri1
channel2
false
[
1
2
3
4
]
)
;
do_set_cookies
(
uri2
channel1
false
[
1
2
3
4
]
)
;
do_close_profile
(
test_generator
)
;
yield
;
do_load_profile
(
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
uri1
.
host
)
0
)
;
Assert
.
equal
(
Services
.
cookies
.
countCookiesFromHost
(
uri2
.
host
)
4
)
;
finish_test
(
)
;
}
