const
SCRIPT_URL
=
SimpleTest
.
getTestFileURL
(
"
file_chromecommon
.
js
"
)
;
var
gExpectedCookies
;
var
gExpectedLoads
;
var
gPopup
;
var
gScript
;
var
gLoads
=
0
;
function
setupTest
(
uri
cookies
loads
)
{
SimpleTest
.
waitForExplicitFinish
(
)
;
var
prefSet
=
new
Promise
(
resolve
=
>
{
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
contentblocking
.
enabled
"
true
]
[
"
network
.
cookie
.
cookieBehavior
"
1
]
]
}
resolve
)
;
}
)
;
gScript
=
SpecialPowers
.
loadChromeScript
(
SCRIPT_URL
)
;
gExpectedCookies
=
cookies
;
gExpectedLoads
=
loads
;
window
.
addEventListener
(
"
message
"
messageReceiver
)
;
prefSet
.
then
(
(
)
=
>
{
gPopup
=
window
.
open
(
uri
'
hai
'
'
width
=
100
height
=
100
'
)
;
}
)
;
}
function
finishTest
(
)
{
gScript
.
destroy
(
)
;
SimpleTest
.
finish
(
)
;
}
function
messageReceiver
(
evt
)
{
is
(
evt
.
data
"
message
"
"
message
data
received
from
popup
"
)
;
if
(
evt
.
data
!
=
"
message
"
)
{
gPopup
.
close
(
)
;
window
.
removeEventListener
(
"
message
"
messageReceiver
)
;
finishTest
(
)
;
return
;
}
if
(
+
+
gLoads
=
=
gExpectedLoads
)
{
gPopup
.
close
(
)
;
window
.
removeEventListener
(
"
message
"
messageReceiver
)
;
runTest
(
)
;
}
}
function
runTest
(
)
{
document
.
cookie
=
"
oh
=
hai
"
;
gScript
.
addMessageListener
(
"
getCookieCountAndClear
:
return
"
(
{
count
}
)
=
>
{
is
(
count
gExpectedCookies
"
total
number
of
cookies
"
)
;
finishTest
(
)
;
}
)
;
gScript
.
sendAsyncMessage
(
"
getCookieCountAndClear
"
)
;
}
