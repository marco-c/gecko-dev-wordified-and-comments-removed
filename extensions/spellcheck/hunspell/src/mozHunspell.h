#
ifndef
mozHunspell_h__
#
define
mozHunspell_h__
#
include
<
hunspell
.
hxx
>
#
include
"
mozISpellCheckingEngine
.
h
"
#
include
"
mozIPersonalDictionary
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIUnicodeEncoder
.
h
"
#
include
"
nsIUnicodeDecoder
.
h
"
#
include
"
nsInterfaceHashtable
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
define
MOZ_HUNSPELL_CONTRACTID
"
mozilla
.
org
/
spellchecker
/
engine
;
1
"
#
define
MOZ_HUNSPELL_CID
\
{
0x56c778e4
0x1bee
0x45f3
\
{
0xa6
0x89
0x88
0x66
0x92
0xa9
0x7f
0xe7
}
}
class
mozHunspell
:
public
mozISpellCheckingEngine
public
nsIObserver
public
nsSupportsWeakReference
public
nsIMemoryReporter
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_MOZISPELLCHECKINGENGINE
NS_DECL_NSIOBSERVER
NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS
(
mozHunspell
mozISpellCheckingEngine
)
mozHunspell
(
)
;
virtual
~
mozHunspell
(
)
;
nsresult
Init
(
)
;
void
LoadDictionaryList
(
)
;
nsresult
ConvertCharset
(
const
PRUnichar
*
aStr
char
*
*
aDst
)
;
MOZ_DEFINE_MALLOC_SIZE_OF_ON_ALLOC
(
MallocSizeOfOnAlloc
)
MOZ_DEFINE_MALLOC_SIZE_OF_ON_FREE
(
MallocSizeOfOnFree
)
static
void
OnAlloc
(
void
*
ptr
)
{
sAmount
+
=
MallocSizeOfOnAlloc
(
ptr
)
;
}
static
void
OnFree
(
void
*
ptr
)
{
sAmount
-
=
MallocSizeOfOnFree
(
ptr
)
;
}
NS_IMETHOD
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
)
{
return
MOZ_COLLECT_REPORT
(
"
explicit
/
spell
-
check
"
KIND_HEAP
UNITS_BYTES
sAmount
"
Memory
used
by
the
spell
-
checking
engine
.
"
)
;
}
protected
:
nsCOMPtr
<
mozIPersonalDictionary
>
mPersonalDictionary
;
nsCOMPtr
<
nsIUnicodeEncoder
>
mEncoder
;
nsCOMPtr
<
nsIUnicodeDecoder
>
mDecoder
;
nsInterfaceHashtable
<
nsStringHashKey
nsIFile
>
mDictionaries
;
nsString
mDictionary
;
nsString
mLanguage
;
nsCString
mAffixFileName
;
nsCOMArray
<
nsIFile
>
mDynamicDirectories
;
Hunspell
*
mHunspell
;
static
int64_t
sAmount
;
}
;
#
endif
