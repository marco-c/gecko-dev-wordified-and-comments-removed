#
ifndef
__CSUTILHXX__
#
define
__CSUTILHXX__
#
define
NOCAP
0
#
define
INITCAP
1
#
define
ALLCAP
2
#
define
HUHCAP
3
#
define
HUHINITCAP
4
#
define
FIELD_STEM
"
st
:
"
#
define
FIELD_POS
"
po
:
"
#
define
FIELD_SUFF
"
su
:
"
#
define
FIELD_PREF
"
pr
:
"
#
define
FIELD_FREQ
"
fr
:
"
#
define
FIELD_PHON
"
ph
:
"
#
define
FIELD_HYPH
"
hy
:
"
#
define
FIELD_COMP
"
co
:
"
#
define
ONLYUPCASEFLAG
65535
typedef
struct
{
unsigned
char
l
;
unsigned
char
h
;
}
w_char
;
#
define
w_char_eq
(
a
b
)
(
(
(
a
)
.
l
=
=
(
b
)
.
l
)
&
&
(
(
a
)
.
h
=
=
(
b
)
.
h
)
)
char
*
u16_u8
(
char
*
dest
int
size
const
w_char
*
src
int
srclen
)
;
int
u8_u16
(
w_char
*
dest
int
size
const
char
*
src
)
;
void
flag_qsort
(
unsigned
short
flags
[
]
int
begin
int
end
)
;
int
flag_bsearch
(
unsigned
short
flags
[
]
unsigned
short
flag
int
right
)
;
void
mychomp
(
char
*
s
)
;
char
*
mystrdup
(
const
char
*
s
)
;
char
*
myrevstrdup
(
const
char
*
s
)
;
char
*
mystrsep
(
char
*
*
sptr
const
char
delim
)
;
char
*
mystrsep2
(
char
*
*
sptr
const
char
delim
)
;
char
*
mystrrep
(
char
*
const
char
*
const
char
*
)
;
void
strlinecat
(
char
*
lines
const
char
*
s
)
;
int
line_tok
(
const
char
*
text
char
*
*
*
lines
)
;
char
*
line_uniq
(
char
*
text
)
;
char
*
line_join
(
char
*
text
char
c
)
;
char
*
delete_zeros
(
char
*
morphout
)
;
int
reverseword
(
char
*
)
;
int
reverseword_utf
(
char
*
)
;
struct
cs_info
{
unsigned
char
ccase
;
unsigned
char
clower
;
unsigned
char
cupper
;
}
;
struct
replentry
{
char
*
pattern
;
char
*
pattern2
;
}
;
struct
unicode_info
{
unsigned
short
c
;
unsigned
short
cupper
;
unsigned
short
clower
;
}
;
struct
unicode_info2
{
char
cletter
;
unsigned
short
cupper
;
unsigned
short
clower
;
}
;
int
initialize_utf_tbl
(
)
;
void
free_utf_tbl
(
)
;
unsigned
short
unicodetoupper
(
unsigned
short
c
int
langnum
)
;
unsigned
short
unicodetolower
(
unsigned
short
c
int
langnum
)
;
int
unicodeisalpha
(
unsigned
short
c
)
;
struct
enc_entry
{
const
char
*
enc_name
;
struct
cs_info
*
cs_table
;
}
;
struct
lang_map
{
const
char
*
lang
;
const
char
*
def_enc
;
int
num
;
}
;
struct
cs_info
*
get_current_cs
(
const
char
*
es
)
;
const
char
*
get_default_enc
(
const
char
*
lang
)
;
int
get_lang_num
(
const
char
*
lang
)
;
char
*
get_casechars
(
const
char
*
enc
)
;
void
enmkallcap
(
char
*
d
const
char
*
p
const
char
*
encoding
)
;
void
enmkallsmall
(
char
*
d
const
char
*
p
const
char
*
encoding
)
;
void
enmkinitcap
(
char
*
d
const
char
*
p
const
char
*
encoding
)
;
void
mkallcap
(
char
*
p
const
struct
cs_info
*
csconv
)
;
void
mkallsmall
(
char
*
p
const
struct
cs_info
*
csconv
)
;
void
mkinitcap
(
char
*
p
const
struct
cs_info
*
csconv
)
;
void
mkallsmall_utf
(
w_char
*
u
int
nc
int
langnum
)
;
void
mkallcap_utf
(
w_char
*
u
int
nc
int
langnum
)
;
int
get_captype
(
char
*
q
int
nl
cs_info
*
)
;
int
get_captype_utf8
(
w_char
*
q
int
nl
int
langnum
)
;
void
remove_ignored_chars_utf
(
char
*
word
unsigned
short
ignored_chars
[
]
int
ignored_len
)
;
void
remove_ignored_chars
(
char
*
word
char
*
ignored_chars
)
;
int
parse_string
(
char
*
line
char
*
*
out
const
char
*
name
)
;
int
parse_array
(
char
*
line
char
*
*
out
unsigned
short
*
*
out_utf16
int
*
out_utf16_len
const
char
*
name
int
utf8
)
;
#
endif
