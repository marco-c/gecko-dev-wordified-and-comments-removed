#
ifndef
HASHMGR_HXX_
#
define
HASHMGR_HXX_
#
include
<
stdio
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
htypes
.
hxx
"
#
include
"
filemgr
.
hxx
"
#
include
"
w_char
.
hxx
"
enum
flag
{
FLAG_CHAR
FLAG_LONG
FLAG_NUM
FLAG_UNI
}
;
#
define
MORPH_PHON_RATIO
500
class
HashMgr
{
int
tablesize
;
struct
hentry
*
*
tableptr
;
flag
flag_mode
;
int
complexprefixes
;
int
utf8
;
unsigned
short
forbiddenword
;
int
langnum
;
std
:
:
string
enc
;
std
:
:
string
lang
;
struct
cs_info
*
csconv
;
std
:
:
string
ignorechars
;
std
:
:
vector
<
w_char
>
ignorechars_utf16
;
int
numaliasf
;
unsigned
short
*
*
aliasf
;
unsigned
short
*
aliasflen
;
int
numaliasm
;
char
*
*
aliasm
;
std
:
:
vector
<
replentry
>
reptable
;
public
:
HashMgr
(
const
char
*
tpath
const
char
*
apath
const
char
*
key
=
NULL
)
;
~
HashMgr
(
)
;
struct
hentry
*
lookup
(
const
char
*
)
const
;
int
hash
(
const
char
*
)
const
;
struct
hentry
*
walk_hashtable
(
int
&
col
struct
hentry
*
hp
)
const
;
int
add
(
const
std
:
:
string
&
word
)
;
int
add_with_affix
(
const
std
:
:
string
&
word
const
std
:
:
string
&
pattern
)
;
int
remove
(
const
std
:
:
string
&
word
)
;
private
:
int
decode_flags
(
unsigned
short
*
*
result
const
std
:
:
string
&
flags
FileMgr
*
af
bool
arena
)
const
;
public
:
int
decode_flags
(
unsigned
short
*
*
result
const
std
:
:
string
&
flags
FileMgr
*
af
)
const
{
return
decode_flags
(
result
flags
af
false
)
;
}
bool
decode_flags
(
std
:
:
vector
<
unsigned
short
>
&
result
const
std
:
:
string
&
flags
FileMgr
*
af
)
const
;
unsigned
short
decode_flag
(
const
char
*
flag
)
const
;
char
*
encode_flag
(
unsigned
short
flag
)
const
;
int
is_aliasf
(
)
const
;
int
get_aliasf
(
int
index
unsigned
short
*
*
fvec
FileMgr
*
af
)
const
;
int
is_aliasm
(
)
const
;
char
*
get_aliasm
(
int
index
)
const
;
const
std
:
:
vector
<
replentry
>
&
get_reptable
(
)
const
;
private
:
int
get_clen_and_captype
(
const
std
:
:
string
&
word
int
*
captype
)
;
int
get_clen_and_captype
(
const
std
:
:
string
&
word
int
*
captype
std
:
:
vector
<
w_char
>
&
workbuf
)
;
int
load_tables
(
const
char
*
tpath
const
char
*
key
)
;
int
add_word
(
const
std
:
:
string
&
word
int
wcl
unsigned
short
*
ap
int
al
const
std
:
:
string
*
desc
bool
onlyupcase
int
captype
)
;
int
load_config
(
const
char
*
affpath
const
char
*
key
)
;
bool
parse_aliasf
(
const
std
:
:
string
&
line
FileMgr
*
af
)
;
int
add_hidden_capitalized_word
(
const
std
:
:
string
&
word
int
wcl
unsigned
short
*
flags
int
al
const
std
:
:
string
*
dp
int
captype
)
;
bool
parse_aliasm
(
const
std
:
:
string
&
line
FileMgr
*
af
)
;
bool
parse_reptable
(
const
std
:
:
string
&
line
FileMgr
*
af
)
;
int
remove_forbidden_flag
(
const
std
:
:
string
&
word
)
;
void
*
arena_alloc
(
int
num_bytes
)
;
void
*
arena_alloc
(
int
num_bytes
)
const
{
return
const_cast
<
HashMgr
*
>
(
this
)
-
>
arena_alloc
(
num_bytes
)
;
}
void
arena_free
(
void
*
ptr
)
;
static
const
int
CHUNK_SIZE
=
4096
;
std
:
:
vector
<
std
:
:
unique_ptr
<
uint8_t
[
]
>
>
arena
;
int
current_chunk_offset
=
0
;
int
outstanding_arena_allocations
=
0
;
}
;
#
endif
