#
ifndef
MYSPELLMGR_HXX_
#
define
MYSPELLMGR_HXX_
#
include
"
hunvisapi
.
h
"
#
include
"
w_char
.
hxx
"
#
include
"
atypes
.
hxx
"
#
include
<
string
>
#
include
<
vector
>
#
define
SPELL_XML
"
<
?
xml
?
>
"
#
define
MAXSUGGESTION
15
#
define
MAXSHARPS
5
#
define
MAXWORDLEN
176
#
if
__GNUC__
>
3
|
|
(
__GNUC__
=
=
3
&
&
__GNUC_MINOR__
>
=
1
)
#
define
H_DEPRECATED
__attribute__
(
(
__deprecated__
)
)
#
elif
defined
(
_MSC_VER
)
&
&
(
_MSC_VER
>
=
1300
)
#
define
H_DEPRECATED
__declspec
(
deprecated
)
#
else
#
define
H_DEPRECATED
#
endif
class
HunspellImpl
;
class
LIBHUNSPELL_DLL_EXPORTED
Hunspell
{
private
:
Hunspell
(
const
Hunspell
&
)
;
Hunspell
&
operator
=
(
const
Hunspell
&
)
;
private
:
HunspellImpl
*
m_Impl
;
public
:
Hunspell
(
const
char
*
affpath
const
char
*
dpath
const
char
*
key
=
NULL
)
;
~
Hunspell
(
)
;
int
add_dic
(
const
char
*
dpath
const
char
*
key
=
NULL
)
;
bool
spell
(
const
std
:
:
string
&
word
int
*
info
=
NULL
std
:
:
string
*
root
=
NULL
)
;
H_DEPRECATED
int
spell
(
const
char
*
word
int
*
info
=
NULL
char
*
*
root
=
NULL
)
;
std
:
:
vector
<
std
:
:
string
>
suggest
(
const
std
:
:
string
&
word
)
;
H_DEPRECATED
int
suggest
(
char
*
*
*
slst
const
char
*
word
)
;
std
:
:
vector
<
std
:
:
string
>
suffix_suggest
(
const
std
:
:
string
&
root_word
)
;
H_DEPRECATED
int
suffix_suggest
(
char
*
*
*
slst
const
char
*
root_word
)
;
H_DEPRECATED
void
free_list
(
char
*
*
*
slst
int
n
)
;
const
std
:
:
string
&
get_dict_encoding
(
)
const
;
char
*
get_dic_encoding
(
)
;
std
:
:
vector
<
std
:
:
string
>
analyze
(
const
std
:
:
string
&
word
)
;
H_DEPRECATED
int
analyze
(
char
*
*
*
slst
const
char
*
word
)
;
std
:
:
vector
<
std
:
:
string
>
stem
(
const
std
:
:
string
&
word
)
;
H_DEPRECATED
int
stem
(
char
*
*
*
slst
const
char
*
word
)
;
std
:
:
vector
<
std
:
:
string
>
stem
(
const
std
:
:
vector
<
std
:
:
string
>
&
morph
)
;
H_DEPRECATED
int
stem
(
char
*
*
*
slst
char
*
*
morph
int
n
)
;
std
:
:
vector
<
std
:
:
string
>
generate
(
const
std
:
:
string
&
word
const
std
:
:
string
&
word2
)
;
H_DEPRECATED
int
generate
(
char
*
*
*
slst
const
char
*
word
const
char
*
word2
)
;
std
:
:
vector
<
std
:
:
string
>
generate
(
const
std
:
:
string
&
word
const
std
:
:
vector
<
std
:
:
string
>
&
pl
)
;
H_DEPRECATED
int
generate
(
char
*
*
*
slst
const
char
*
word
char
*
*
desc
int
n
)
;
int
add
(
const
std
:
:
string
&
word
)
;
int
add_with_affix
(
const
std
:
:
string
&
word
const
std
:
:
string
&
example
)
;
int
remove
(
const
std
:
:
string
&
word
)
;
const
char
*
get_wordchars
(
)
const
;
const
std
:
:
string
&
get_wordchars_cpp
(
)
const
;
const
std
:
:
vector
<
w_char
>
&
get_wordchars_utf16
(
)
const
;
struct
cs_info
*
get_csconv
(
)
;
const
char
*
get_version
(
)
const
;
const
std
:
:
string
&
get_version_cpp
(
)
const
;
int
get_langnum
(
)
const
;
bool
input_conv
(
const
std
:
:
string
&
word
std
:
:
string
&
dest
)
;
H_DEPRECATED
int
input_conv
(
const
char
*
word
char
*
dest
size_t
destsize
)
;
}
;
#
endif
