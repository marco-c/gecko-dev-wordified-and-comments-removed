#
include
"
hunvisapi
.
h
"
#
include
"
hashmgr
.
hxx
"
#
include
"
affixmgr
.
hxx
"
#
include
"
suggestmgr
.
hxx
"
#
include
"
langnum
.
hxx
"
#
include
<
vector
>
#
define
SPELL_XML
"
<
?
xml
?
>
"
#
define
MAXDIC
20
#
define
MAXSUGGESTION
15
#
define
MAXSHARPS
5
#
define
HUNSPELL_OK
(
1
<
<
0
)
#
define
HUNSPELL_OK_WARN
(
1
<
<
1
)
#
ifndef
_MYSPELLMGR_HXX_
#
define
_MYSPELLMGR_HXX_
class
LIBHUNSPELL_DLL_EXPORTED
Hunspell
{
private
:
Hunspell
(
const
Hunspell
&
)
;
Hunspell
&
operator
=
(
const
Hunspell
&
)
;
private
:
AffixMgr
*
pAMgr
;
HashMgr
*
pHMgr
[
MAXDIC
]
;
int
maxdic
;
SuggestMgr
*
pSMgr
;
char
*
affixpath
;
char
*
encoding
;
struct
cs_info
*
csconv
;
int
langnum
;
int
utf8
;
int
complexprefixes
;
char
*
*
wordbreak
;
public
:
Hunspell
(
const
char
*
affpath
const
char
*
dpath
const
char
*
key
=
NULL
)
;
~
Hunspell
(
)
;
int
add_dic
(
const
char
*
dpath
const
char
*
key
=
NULL
)
;
int
spell
(
const
char
*
word
int
*
info
=
NULL
char
*
*
root
=
NULL
)
;
int
suggest
(
char
*
*
*
slst
const
char
*
word
)
;
int
suffix_suggest
(
char
*
*
*
slst
const
char
*
root_word
)
;
void
free_list
(
char
*
*
*
slst
int
n
)
;
char
*
get_dic_encoding
(
)
;
int
analyze
(
char
*
*
*
slst
const
char
*
word
)
;
int
stem
(
char
*
*
*
slst
const
char
*
word
)
;
int
stem
(
char
*
*
*
slst
char
*
*
morph
int
n
)
;
int
generate
(
char
*
*
*
slst
const
char
*
word
const
char
*
word2
)
;
int
generate
(
char
*
*
*
slst
const
char
*
word
char
*
*
desc
int
n
)
;
int
add
(
const
char
*
word
)
;
int
add_with_affix
(
const
char
*
word
const
char
*
example
)
;
int
remove
(
const
char
*
word
)
;
const
char
*
get_wordchars
(
)
;
const
std
:
:
vector
<
w_char
>
&
get_wordchars_utf16
(
)
;
struct
cs_info
*
get_csconv
(
)
;
const
char
*
get_version
(
)
;
int
get_langnum
(
)
const
;
int
input_conv
(
const
char
*
word
char
*
dest
size_t
destsize
)
;
private
:
void
cleanword
(
std
:
:
string
&
dest
const
char
*
int
*
pcaptype
int
*
pabbrev
)
;
size_t
cleanword2
(
std
:
:
string
&
dest
std
:
:
vector
<
w_char
>
&
dest_u
const
char
*
int
*
w_len
int
*
pcaptype
size_t
*
pabbrev
)
;
void
mkinitcap
(
std
:
:
string
&
u8
)
;
int
mkinitcap2
(
std
:
:
string
&
u8
std
:
:
vector
<
w_char
>
&
u16
)
;
int
mkinitsmall2
(
std
:
:
string
&
u8
std
:
:
vector
<
w_char
>
&
u16
)
;
void
mkallcap
(
std
:
:
string
&
u8
)
;
int
mkallsmall2
(
std
:
:
string
&
u8
std
:
:
vector
<
w_char
>
&
u16
)
;
struct
hentry
*
checkword
(
const
char
*
int
*
info
char
*
*
root
)
;
std
:
:
string
sharps_u8_l1
(
const
std
:
:
string
&
source
)
;
hentry
*
spellsharps
(
std
:
:
string
&
base
size_t
start_pos
int
int
int
*
info
char
*
*
root
)
;
int
is_keepcase
(
const
hentry
*
rv
)
;
int
insert_sug
(
char
*
*
*
slst
const
char
*
word
int
ns
)
;
void
cat_result
(
std
:
:
string
&
result
char
*
st
)
;
char
*
stem_description
(
const
char
*
desc
)
;
int
spellml
(
char
*
*
*
slst
const
char
*
word
)
;
std
:
:
string
get_xml_par
(
const
char
*
par
)
;
const
char
*
get_xml_pos
(
const
char
*
s
const
char
*
attr
)
;
int
get_xml_list
(
char
*
*
*
slst
const
char
*
list
const
char
*
tag
)
;
int
check_xml_par
(
const
char
*
q
const
char
*
attr
const
char
*
value
)
;
}
;
#
endif
