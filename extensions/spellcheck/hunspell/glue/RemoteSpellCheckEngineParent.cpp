#
include
"
RemoteSpellCheckEngineParent
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
mozSpellChecker
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
namespace
mozilla
{
RemoteSpellcheckEngineParent
:
:
RemoteSpellcheckEngineParent
(
)
{
mSpellChecker
=
mozSpellChecker
:
:
Create
(
)
;
}
RemoteSpellcheckEngineParent
:
:
~
RemoteSpellcheckEngineParent
(
)
{
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteSpellcheckEngineParent
:
:
RecvSetDictionary
(
const
nsString
&
aDictionary
bool
*
success
)
{
nsresult
rv
=
mSpellChecker
-
>
SetCurrentDictionary
(
aDictionary
)
;
*
success
=
NS_SUCCEEDED
(
rv
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteSpellcheckEngineParent
:
:
RecvSetDictionaryFromList
(
nsTArray
<
nsString
>
&
&
aList
SetDictionaryFromListResolver
&
&
aResolve
)
{
for
(
auto
&
dictionary
:
aList
)
{
nsresult
rv
=
mSpellChecker
-
>
SetCurrentDictionary
(
dictionary
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
aResolve
(
Tuple
<
const
bool
&
const
nsString
&
>
(
true
dictionary
)
)
;
return
IPC_OK
(
)
;
}
}
aResolve
(
Tuple
<
const
bool
&
const
nsString
&
>
(
false
EmptyString
(
)
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteSpellcheckEngineParent
:
:
RecvCheck
(
const
nsString
&
aWord
bool
*
aIsMisspelled
)
{
nsresult
rv
=
mSpellChecker
-
>
CheckWord
(
aWord
aIsMisspelled
nullptr
)
;
if
(
NS_FAILED
(
rv
)
)
*
aIsMisspelled
=
false
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemoteSpellcheckEngineParent
:
:
RecvCheckAndSuggest
(
const
nsString
&
aWord
bool
*
aIsMisspelled
InfallibleTArray
<
nsString
>
*
aSuggestions
)
{
nsresult
rv
=
mSpellChecker
-
>
CheckWord
(
aWord
aIsMisspelled
aSuggestions
)
;
if
(
NS_FAILED
(
rv
)
)
{
aSuggestions
-
>
Clear
(
)
;
*
aIsMisspelled
=
false
;
}
return
IPC_OK
(
)
;
}
void
RemoteSpellcheckEngineParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
}
}
