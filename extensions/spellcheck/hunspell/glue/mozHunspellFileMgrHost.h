#
ifndef
mozHunspellFileMgrHost_h
#
define
mozHunspellFileMgrHost_h
#
include
<
map
>
#
include
<
memory
>
#
include
<
mutex
>
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
ResultExtensions
.
h
"
#
include
"
mozilla
/
RWLock
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsReadLine
.
h
"
namespace
mozilla
{
class
mozHunspellFileMgrHost
final
{
public
:
explicit
mozHunspellFileMgrHost
(
const
char
*
aFilename
const
char
*
aKey
=
nullptr
)
;
~
mozHunspellFileMgrHost
(
)
=
default
;
bool
GetLine
(
std
:
:
string
&
aResult
)
;
int
GetLineNum
(
)
const
{
return
mLineNum
;
}
private
:
mozilla
:
:
Result
<
mozilla
:
:
Ok
nsresult
>
Open
(
const
nsACString
&
aPath
)
;
mozilla
:
:
Result
<
mozilla
:
:
Ok
nsresult
>
ReadLine
(
nsACString
&
aLine
)
;
int
mLineNum
=
0
;
nsCOMPtr
<
nsIInputStream
>
mStream
;
nsLineBuffer
<
char
>
mLineBuffer
;
}
;
class
mozHunspellCallbacks
{
public
:
static
uint32_t
CreateFilemgr
(
const
char
*
aFilename
const
char
*
aKey
)
;
static
bool
GetLine
(
uint32_t
aFd
char
*
*
aLinePtr
)
;
static
int
GetLineNum
(
uint32_t
aFd
)
;
static
void
DestructFilemgr
(
uint32_t
aFd
)
;
private
:
static
std
:
:
map
<
uint32_t
std
:
:
unique_ptr
<
mozHunspellFileMgrHost
>
>
sFileMgrMap
;
static
mozilla
:
:
detail
:
:
StaticRWLock
sFileMgrMapLock
;
static
uint32_t
sCurrentFreshId
;
static
uint32_t
GetFreshId
(
)
;
static
mozHunspellFileMgrHost
&
GetMozHunspellFileMgrHost
(
uint32_t
aFd
)
;
}
;
}
#
endif
