#
ifndef
mozHunspellRLBoxHost_h
#
define
mozHunspellRLBoxHost_h
#
include
<
map
>
#
include
<
memory
>
#
include
<
mutex
>
#
include
<
set
>
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
RLBoxHunspell
.
h
"
#
include
"
mozilla
/
Result
.
h
"
#
include
"
mozilla
/
ResultExtensions
.
h
"
#
include
"
mozilla
/
RWLock
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsReadLine
.
h
"
namespace
mozilla
{
class
mozHunspellFileMgrHost
final
{
public
:
explicit
mozHunspellFileMgrHost
(
const
nsCString
&
aFilename
)
;
~
mozHunspellFileMgrHost
(
)
=
default
;
bool
GetLine
(
nsACString
&
aResult
)
;
int
GetLineNum
(
)
const
{
return
mLineNum
;
}
static
Result
<
int64_t
nsresult
>
GetSize
(
const
nsCString
&
aFilename
)
;
private
:
static
mozilla
:
:
Result
<
mozilla
:
:
Ok
nsresult
>
Open
(
const
nsCString
&
aPath
nsCOMPtr
<
nsIChannel
>
&
aChannel
nsCOMPtr
<
nsIInputStream
>
&
aStream
)
;
mozilla
:
:
Result
<
mozilla
:
:
Ok
nsresult
>
ReadLine
(
nsACString
&
aLine
)
;
int
mLineNum
=
0
;
nsCOMPtr
<
nsIInputStream
>
mStream
;
nsLineBuffer
<
char
>
mLineBuffer
;
}
;
class
mozHunspellCallbacks
{
public
:
static
tainted_hunspell
<
uint32_t
>
CreateFilemgr
(
rlbox_sandbox_hunspell
&
aSandbox
tainted_hunspell
<
const
char
*
>
t_aFilename
)
;
static
tainted_hunspell
<
bool
>
GetLine
(
rlbox_sandbox_hunspell
&
aSandbox
tainted_hunspell
<
uint32_t
>
t_aFd
tainted_hunspell
<
char
*
*
>
t_aLinePtr
)
;
static
tainted_hunspell
<
int
>
GetLineNum
(
rlbox_sandbox_hunspell
&
aSandbox
tainted_hunspell
<
uint32_t
>
t_aFd
)
;
static
void
DestructFilemgr
(
rlbox_sandbox_hunspell
&
aSandbox
tainted_hunspell
<
uint32_t
>
t_aFd
)
;
static
tainted_hunspell
<
uint32_t
>
ToUpperCase
(
rlbox_sandbox_hunspell
&
aSandbox
tainted_hunspell
<
uint32_t
>
t_aChar
)
;
static
tainted_hunspell
<
uint32_t
>
ToLowerCase
(
rlbox_sandbox_hunspell
&
aSandbox
tainted_hunspell
<
uint32_t
>
t_aChar
)
;
static
tainted_hunspell
<
struct
cs_info
*
>
GetCurrentCS
(
rlbox_sandbox_hunspell
&
aSandbox
tainted_hunspell
<
const
char
*
>
t_es
)
;
protected
:
static
void
AllowFile
(
const
nsCString
&
aFilename
)
;
friend
RLBoxHunspell
*
RLBoxHunspell
:
:
Create
(
const
nsCString
&
affpath
const
nsCString
&
dpath
)
;
static
void
Clear
(
)
;
friend
RLBoxHunspell
:
:
~
RLBoxHunspell
(
)
;
private
:
static
std
:
:
map
<
uint32_t
std
:
:
unique_ptr
<
mozHunspellFileMgrHost
>
>
sFileMgrMap
;
static
std
:
:
set
<
nsCString
>
sFileMgrAllowList
;
static
mozilla
:
:
StaticRWLock
sFileMgrMapLock
;
static
uint32_t
sCurrentFreshId
;
static
uint32_t
GetFreshId
(
)
;
static
mozHunspellFileMgrHost
&
GetMozHunspellFileMgrHost
(
tainted_hunspell
<
uint32_t
>
t_aFd
)
;
}
;
}
#
endif
