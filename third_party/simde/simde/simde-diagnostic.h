#
if
!
defined
(
SIMDE_DIAGNOSTIC_H
)
#
define
SIMDE_DIAGNOSTIC_H
#
include
"
hedley
.
h
"
#
include
"
simde
-
detect
-
clang
.
h
"
#
include
"
simde
-
arch
.
h
"
#
if
defined
(
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_
)
#
undef
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wuninitialized
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wuninitialized
\
"
"
)
#
elif
HEDLEY_GCC_VERSION_CHECK
(
4
2
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wuninitialized
\
"
"
)
#
elif
HEDLEY_PGI_VERSION_CHECK
(
19
10
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_
_Pragma
(
"
diag_suppress
549
"
)
#
elif
HEDLEY_SUNPRO_VERSION_CHECK
(
5
14
0
)
&
&
defined
(
__cplusplus
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_
_Pragma
(
"
error_messages
(
off
SEC_UNINITIALIZED_MEM_READ
SEC_UNDEFINED_RETURN_VALUE
unassigned
)
"
)
#
elif
HEDLEY_SUNPRO_VERSION_CHECK
(
5
14
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_
_Pragma
(
"
error_messages
(
off
SEC_UNINITIALIZED_MEM_READ
SEC_UNDEFINED_RETURN_VALUE
)
"
)
#
elif
HEDLEY_SUNPRO_VERSION_CHECK
(
5
12
0
)
&
&
defined
(
__cplusplus
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_
_Pragma
(
"
error_messages
(
off
unassigned
)
"
)
#
elif
\
HEDLEY_TI_VERSION_CHECK
(
16
9
9
)
|
|
\
HEDLEY_TI_CL6X_VERSION_CHECK
(
8
0
0
)
|
|
\
HEDLEY_TI_CL7X_VERSION_CHECK
(
1
2
0
)
|
|
\
HEDLEY_TI_CLPRU_VERSION_CHECK
(
2
3
2
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_
_Pragma
(
"
diag_suppress
551
"
)
#
elif
HEDLEY_INTEL_VERSION_CHECK
(
13
0
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_
_Pragma
(
"
warning
(
disable
:
592
)
"
)
#
elif
HEDLEY_MSVC_VERSION_CHECK
(
19
0
0
)
&
&
!
defined
(
__MSVC_RUNTIME_CHECKS
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_UNINITIALIZED_
__pragma
(
warning
(
disable
:
4700
)
)
#
endif
#
if
HEDLEY_GCC_VERSION_CHECK
(
7
0
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_PSABI_
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wpsabi
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_PSABI_
#
endif
#
if
HEDLEY_INTEL_VERSION_CHECK
(
19
0
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_NO_EMMS_INSTRUCTION_
_Pragma
(
"
warning
(
disable
:
13200
13203
)
"
)
#
elif
defined
(
HEDLEY_MSVC_VERSION
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_NO_EMMS_INSTRUCTION_
__pragma
(
warning
(
disable
:
4799
)
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_NO_EMMS_INSTRUCTION_
#
endif
#
if
HEDLEY_INTEL_VERSION_CHECK
(
18
0
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_SIMD_PRAGMA_DEPRECATED_
_Pragma
(
"
warning
(
disable
:
3948
)
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_SIMD_PRAGMA_DEPRECATED_
#
endif
#
if
\
defined
(
HEDLEY_MSVC_VERSION
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_NON_CONSTANT_AGGREGATE_INITIALIZER_
__pragma
(
warning
(
disable
:
4204
)
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_NON_CONSTANT_AGGREGATE_INITIALIZER_
#
endif
#
if
\
HEDLEY_HAS_WARNING
(
"
-
Wconditional
-
uninitialized
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_CONDITIONAL_UNINITIALIZED_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wconditional
-
uninitialized
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_CONDITIONAL_UNINITIALIZED_
#
endif
#
if
\
HEDLEY_HAS_WARNING
(
"
-
Wfloat
-
equal
"
)
|
|
\
HEDLEY_GCC_VERSION_CHECK
(
3
0
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_FLOAT_EQUAL_
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wfloat
-
equal
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_FLOAT_EQUAL_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wextra
-
semi
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_EXTRA_SEMI_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wextra
-
semi
\
"
"
)
#
elif
HEDLEY_GCC_VERSION_CHECK
(
8
1
0
)
&
&
defined
(
__cplusplus
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_EXTRA_SEMI_
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wextra
-
semi
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_EXTRA_SEMI_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wvariadic
-
macros
"
)
|
|
HEDLEY_GCC_VERSION_CHECK
(
4
0
0
)
#
if
HEDLEY_HAS_WARNING
(
"
-
Wc
+
+
98
-
compat
-
pedantic
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_VARIADIC_MACROS_
\
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wvariadic
-
macros
\
"
"
)
\
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wc
+
+
98
-
compat
-
pedantic
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_VARIADIC_MACROS_
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wvariadic
-
macros
\
"
"
)
#
endif
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_VARIADIC_MACROS_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wreserved
-
id
-
macro
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_RESERVED_ID_MACRO_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wreserved
-
id
-
macro
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_RESERVED_ID_MACRO_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wreserved
-
identifier
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_RESERVED_ID_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wreserved
-
identifier
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_RESERVED_ID_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wpacked
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_PACKED_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wpacked
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_PACKED_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wdouble
-
promotion
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_DOUBLE_PROMOTION_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wdouble
-
promotion
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_DOUBLE_PROMOTION_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wvla
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_VLA_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wvla
\
"
"
)
#
elif
HEDLEY_GCC_VERSION_CHECK
(
4
3
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_VLA_
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wvla
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_VLA_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wused
-
but
-
marked
-
unused
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_USED_BUT_MARKED_UNUSED_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wused
-
but
-
marked
-
unused
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_USED_BUT_MARKED_UNUSED_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wpass
-
failed
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_PASS_FAILED_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wpass
-
failed
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_PASS_FAILED_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wpadded
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_PADDED_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wpadded
\
"
"
)
#
elif
HEDLEY_MSVC_VERSION_CHECK
(
19
0
0
)
/
*
Likely
goes
back
further
*
/
#
define
SIMDE_DIAGNOSTIC_DISABLE_PADDED_
__pragma
(
warning
(
disable
:
4324
)
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_PADDED_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wzero
-
as
-
null
-
pointer
-
constant
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_ZERO_AS_NULL_POINTER_CONSTANT_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wzero
-
as
-
null
-
pointer
-
constant
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_ZERO_AS_NULL_POINTER_CONSTANT_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wold
-
style
-
cast
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_OLD_STYLE_CAST_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wold
-
style
-
cast
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_OLD_STYLE_CAST_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wcast
-
function
-
type
"
)
|
|
HEDLEY_GCC_VERSION_CHECK
(
8
0
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_CAST_FUNCTION_TYPE_
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wcast
-
function
-
type
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_CAST_FUNCTION_TYPE_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wc99
-
extensions
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_C99_EXTENSIONS_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wc99
-
extensions
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_C99_EXTENSIONS_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wdeclaration
-
after
-
statement
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_DECLARATION_AFTER_STATEMENT_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wdeclaration
-
after
-
statement
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_DECLARATION_AFTER_STATEMENT_
#
endif
#
if
defined
(
HEDLEY_GCC_VERSION
)
&
&
HEDLEY_GCC_VERSION_CHECK
(
4
6
0
)
&
&
!
HEDLEY_GCC_VERSION_CHECK
(
6
4
0
)
&
&
defined
(
__cplusplus
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_UNUSED_BUT_SET_VARIBALE_
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wunused
-
but
-
set
-
variable
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_UNUSED_BUT_SET_VARIBALE_
#
endif
#
if
defined
(
_MSC_VER
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_ANNEX_K_
__pragma
(
warning
(
disable
:
4996
)
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_ANNEX_K_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wc
+
+
98
-
compat
-
pedantic
"
)
#
if
HEDLEY_HAS_WARNING
(
"
-
Wc
+
+
11
-
long
-
long
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_CPP98_COMPAT_PEDANTIC_
\
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wc
+
+
98
-
compat
-
pedantic
\
"
"
)
\
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wc
+
+
11
-
long
-
long
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_CPP98_COMPAT_PEDANTIC_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wc
+
+
98
-
compat
-
pedantic
\
"
"
)
#
endif
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_CPP98_COMPAT_PEDANTIC_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wc
+
+
11
-
long
-
long
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_CPP11_LONG_LONG_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wc
+
+
11
-
long
-
long
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_CPP11_LONG_LONG_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wdisabled
-
macro
-
expansion
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_DISABLED_MACRO_EXPANSION_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wdisabled
-
macro
-
expansion
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_DISABLED_MACRO_EXPANSION_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wc11
-
extensions
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_C11_EXTENSIONS_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wc11
-
extensions
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_C11_EXTENSIONS_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wvector
-
conversion
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_VECTOR_CONVERSION_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wvector
-
conversion
\
"
"
)
#
if
\
(
defined
(
SIMDE_ARCH_ARM
)
&
&
SIMDE_DETECT_CLANG_VERSION_NOT
(
10
0
0
)
)
|
|
\
SIMDE_DETECT_CLANG_VERSION_NOT
(
3
8
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_VECTOR_CONVERSION_
SIMDE_DIAGNOSTIC_DISABLE_VECTOR_CONVERSION_
#
endif
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_VECTOR_CONVERSION_
#
endif
#
if
!
defined
(
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_VECTOR_CONVERSION_
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_VECTOR_CONVERSION_
#
endif
#
if
SIMDE_DETECT_CLANG_VERSION_NOT
(
5
0
0
)
&
&
HEDLEY_HAS_WARNING
(
"
-
Wcast
-
qual
"
)
&
&
HEDLEY_HAS_WARNING
(
"
-
Wcast
-
align
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_CASTS_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wcast
-
qual
\
"
"
)
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wcast
-
align
\
"
"
)
#
elif
SIMDE_DETECT_CLANG_VERSION_NOT
(
5
0
0
)
&
&
HEDLEY_HAS_WARNING
(
"
-
Wcast
-
qual
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_CASTS_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wcast
-
qual
\
"
"
)
#
elif
SIMDE_DETECT_CLANG_VERSION_NOT
(
5
0
0
)
&
&
HEDLEY_HAS_WARNING
(
"
-
Wcast
-
align
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_CASTS_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wcast
-
align
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_CASTS_
#
endif
#
if
HEDLEY_HAS_WARNING
(
"
-
Wignored
-
qualifiers
"
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_IGNORED_QUALIFIERS_
_Pragma
(
"
clang
diagnostic
ignored
\
"
-
Wignored
-
qualifiers
\
"
"
)
#
elif
HEDLEY_GCC_VERSION_CHECK
(
4
3
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_IGNORED_QUALIFIERS_
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wignored
-
qualifiers
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_IGNORED_QUALIFIERS_
#
endif
#
if
HEDLEY_GCC_VERSION_CHECK
(
4
8
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_PEDANTIC_
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wpedantic
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_PEDANTIC_
#
endif
#
if
defined
(
HEDLEY_MSVC_VERSION
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_UNREACHABLE_
__pragma
(
warning
(
disable
:
4702
)
)
#
elif
defined
(
__clang__
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_UNREACHABLE_
HEDLEY_PRAGMA
(
clang
diagnostic
ignored
"
-
Wunreachable
-
code
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_UNREACHABLE_
#
endif
#
if
HEDLEY_GCC_VERSION_CHECK
(
4
7
0
)
#
define
SIMDE_DIAGNOSTIC_DISABLE_MAYBE_UNINITIAZILED_
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wmaybe
-
uninitialized
\
"
"
)
#
else
#
define
SIMDE_DIAGNOSTIC_DISABLE_MAYBE_UNINITIAZILED_
#
endif
#
if
defined
(
SIMDE_ENABLE_NATIVE_ALIASES
)
#
define
SIMDE_DISABLE_UNWANTED_DIAGNOSTICS_NATIVE_ALIASES_
\
SIMDE_DIAGNOSTIC_DISABLE_RESERVED_ID_MACRO_
#
else
#
define
SIMDE_DISABLE_UNWANTED_DIAGNOSTICS_NATIVE_ALIASES_
#
endif
#
if
defined
(
HEDLEY_MCST_LCC_VERSION
)
#
define
SIMDE_LCC_DISABLE_DEPRECATED_WARNINGS
_Pragma
(
"
diag_suppress
1215
1444
"
)
#
define
SIMDE_LCC_REVERT_DEPRECATED_WARNINGS
_Pragma
(
"
diag_default
1215
1444
"
)
#
else
#
define
SIMDE_LCC_DISABLE_DEPRECATED_WARNINGS
#
define
SIMDE_LCC_REVERT_DEPRECATED_WARNINGS
#
endif
#
define
SIMDE_DISABLE_UNWANTED_DIAGNOSTICS
\
HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION
\
SIMDE_DISABLE_UNWANTED_DIAGNOSTICS_NATIVE_ALIASES_
\
SIMDE_DIAGNOSTIC_DISABLE_PSABI_
\
SIMDE_DIAGNOSTIC_DISABLE_NO_EMMS_INSTRUCTION_
\
SIMDE_DIAGNOSTIC_DISABLE_SIMD_PRAGMA_DEPRECATED_
\
SIMDE_DIAGNOSTIC_DISABLE_CONDITIONAL_UNINITIALIZED_
\
SIMDE_DIAGNOSTIC_DISABLE_DECLARATION_AFTER_STATEMENT_
\
SIMDE_DIAGNOSTIC_DISABLE_FLOAT_EQUAL_
\
SIMDE_DIAGNOSTIC_DISABLE_NON_CONSTANT_AGGREGATE_INITIALIZER_
\
SIMDE_DIAGNOSTIC_DISABLE_EXTRA_SEMI_
\
SIMDE_DIAGNOSTIC_DISABLE_VLA_
\
SIMDE_DIAGNOSTIC_DISABLE_USED_BUT_MARKED_UNUSED_
\
SIMDE_DIAGNOSTIC_DISABLE_PASS_FAILED_
\
SIMDE_DIAGNOSTIC_DISABLE_CPP98_COMPAT_PEDANTIC_
\
SIMDE_DIAGNOSTIC_DISABLE_CPP11_LONG_LONG_
\
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_UNUSED_BUT_SET_VARIBALE_
\
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_CASTS_
\
SIMDE_DIAGNOSTIC_DISABLE_BUGGY_VECTOR_CONVERSION_
\
SIMDE_DIAGNOSTIC_DISABLE_RESERVED_ID_
#
endif
