#
if
!
defined
(
SIMDE_ARM_NEON_MLAL_LANE_H
)
#
define
SIMDE_ARM_NEON_MLAL_LANE_H
#
include
"
mlal
.
h
"
#
include
"
dup_lane
.
h
"
HEDLEY_DIAGNOSTIC_PUSH
SIMDE_DISABLE_UNWANTED_DIAGNOSTICS
SIMDE_BEGIN_DECLS_
#
if
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
#
define
simde_vmlal_lane_s16
(
a
b
v
lane
)
vmlal_lane_s16
(
(
a
)
(
b
)
(
v
)
(
lane
)
)
#
else
#
define
simde_vmlal_lane_s16
(
a
b
v
lane
)
simde_vmlal_s16
(
(
a
)
(
b
)
simde_vdup_lane_s16
(
(
v
)
(
lane
)
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vmlal_lane_s16
#
define
vmlal_lane_s16
(
a
b
c
lane
)
simde_vmlal_lane_s16
(
(
a
)
(
b
)
(
c
)
(
lane
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
#
define
simde_vmlal_lane_s32
(
a
b
v
lane
)
vmlal_lane_s32
(
(
a
)
(
b
)
(
v
)
(
lane
)
)
#
else
#
define
simde_vmlal_lane_s32
(
a
b
v
lane
)
simde_vmlal_s32
(
(
a
)
(
b
)
simde_vdup_lane_s32
(
(
v
)
(
lane
)
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vmlal_lane_s32
#
define
vmlal_lane_s32
(
a
b
c
lane
)
simde_vmlal_lane_s32
(
(
a
)
(
b
)
(
c
)
(
lane
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
#
define
simde_vmlal_lane_u16
(
a
b
v
lane
)
vmlal_lane_u16
(
(
a
)
(
b
)
(
v
)
(
lane
)
)
#
else
#
define
simde_vmlal_lane_u16
(
a
b
v
lane
)
simde_vmlal_u16
(
(
a
)
(
b
)
simde_vdup_lane_u16
(
(
v
)
(
lane
)
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vmlal_lane_u16
#
define
vmlal_lane_u16
(
a
b
c
lane
)
simde_vmlal_lane_u16
(
(
a
)
(
b
)
(
c
)
(
lane
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
#
define
simde_vmlal_lane_u32
(
a
b
v
lane
)
vmlal_lane_u32
(
(
a
)
(
b
)
(
v
)
(
lane
)
)
#
else
#
define
simde_vmlal_lane_u32
(
a
b
v
lane
)
simde_vmlal_u32
(
(
a
)
(
b
)
simde_vdup_lane_u32
(
(
v
)
(
lane
)
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vmlal_lane_u32
#
define
vmlal_lane_u32
(
a
b
c
lane
)
simde_vmlal_lane_u32
(
(
a
)
(
b
)
(
c
)
(
lane
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
#
define
simde_vmlal_laneq_s16
(
a
b
v
lane
)
vmlal_laneq_s16
(
(
a
)
(
b
)
(
v
)
(
lane
)
)
#
else
#
define
simde_vmlal_laneq_s16
(
a
b
v
lane
)
simde_vmlal_s16
(
(
a
)
(
b
)
simde_vdup_laneq_s16
(
(
v
)
(
lane
)
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A64V8_ENABLE_NATIVE_ALIASES
)
#
undef
vmlal_laneq_s16
#
define
vmlal_laneq_s16
(
a
b
c
lane
)
simde_vmlal_laneq_s16
(
(
a
)
(
b
)
(
c
)
(
lane
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
#
define
simde_vmlal_laneq_s32
(
a
b
v
lane
)
vmlal_laneq_s32
(
(
a
)
(
b
)
(
v
)
(
lane
)
)
#
else
#
define
simde_vmlal_laneq_s32
(
a
b
v
lane
)
simde_vmlal_s32
(
(
a
)
(
b
)
simde_vdup_laneq_s32
(
(
v
)
(
lane
)
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A64V8_ENABLE_NATIVE_ALIASES
)
#
undef
vmlal_laneq_s32
#
define
vmlal_laneq_s32
(
a
b
c
lane
)
simde_vmlal_laneq_s32
(
(
a
)
(
b
)
(
c
)
(
lane
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
#
define
simde_vmlal_laneq_u16
(
a
b
v
lane
)
vmlal_laneq_u16
(
(
a
)
(
b
)
(
v
)
(
lane
)
)
#
else
#
define
simde_vmlal_laneq_u16
(
a
b
v
lane
)
simde_vmlal_u16
(
(
a
)
(
b
)
simde_vdup_laneq_u16
(
(
v
)
(
lane
)
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A64V8_ENABLE_NATIVE_ALIASES
)
#
undef
vmlal_laneq_u16
#
define
vmlal_laneq_u16
(
a
b
c
lane
)
simde_vmlal_laneq_u16
(
(
a
)
(
b
)
(
c
)
(
lane
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
#
define
simde_vmlal_laneq_u32
(
a
b
v
lane
)
vmlal_laneq_u32
(
(
a
)
(
b
)
(
v
)
(
lane
)
)
#
else
#
define
simde_vmlal_laneq_u32
(
a
b
v
lane
)
simde_vmlal_u32
(
(
a
)
(
b
)
simde_vdup_laneq_u32
(
(
v
)
(
lane
)
)
)
#
endif
#
if
defined
(
SIMDE_ARM_NEON_A64V8_ENABLE_NATIVE_ALIASES
)
#
undef
vmlal_laneq_u32
#
define
vmlal_laneq_u32
(
a
b
c
lane
)
simde_vmlal_laneq_u32
(
(
a
)
(
b
)
(
c
)
(
lane
)
)
#
endif
SIMDE_END_DECLS_
HEDLEY_DIAGNOSTIC_POP
#
endif
