#
if
!
defined
(
SIMDE_ARM_NEON_LD1_X3_H
)
#
define
SIMDE_ARM_NEON_LD1_X3_H
#
include
"
types
.
h
"
HEDLEY_DIAGNOSTIC_PUSH
SIMDE_DISABLE_UNWANTED_DIAGNOSTICS
#
if
HEDLEY_GCC_VERSION_CHECK
(
7
0
0
)
SIMDE_DIAGNOSTIC_DISABLE_MAYBE_UNINITIAZILED_
#
endif
SIMDE_BEGIN_DECLS_
#
if
!
defined
(
SIMDE_BUG_INTEL_857088
)
SIMDE_FUNCTION_ATTRIBUTES
simde_float32x2x3_t
simde_vld1_f32_x3
(
simde_float32
const
ptr
[
HEDLEY_ARRAY_PARAM
(
6
)
]
)
{
#
if
\
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
&
&
\
(
!
defined
(
HEDLEY_GCC_VERSION
)
|
|
(
HEDLEY_GCC_VERSION_CHECK
(
8
0
0
)
&
&
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
)
)
&
&
\
(
!
defined
(
__clang__
)
|
|
SIMDE_DETECT_CLANG_VERSION_CHECK
(
7
0
0
)
)
return
vld1_f32_x3
(
ptr
)
;
#
else
simde_float32x2_private
a_
[
3
]
;
for
(
size_t
i
=
0
;
i
<
6
;
i
+
+
)
{
a_
[
i
/
2
]
.
values
[
i
%
2
]
=
ptr
[
i
]
;
}
simde_float32x2x3_t
s_
=
{
{
simde_float32x2_from_private
(
a_
[
0
]
)
simde_float32x2_from_private
(
a_
[
1
]
)
simde_float32x2_from_private
(
a_
[
2
]
)
}
}
;
return
s_
;
#
endif
}
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vld1_f32_x3
#
define
vld1_f32_x3
(
a
)
simde_vld1_f32_x3
(
(
a
)
)
#
endif
SIMDE_FUNCTION_ATTRIBUTES
simde_float64x1x3_t
simde_vld1_f64_x3
(
simde_float64
const
ptr
[
HEDLEY_ARRAY_PARAM
(
3
)
]
)
{
#
if
\
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
&
&
\
(
!
defined
(
HEDLEY_GCC_VERSION
)
|
|
(
HEDLEY_GCC_VERSION_CHECK
(
8
0
0
)
&
&
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
)
)
&
&
\
(
!
defined
(
__clang__
)
|
|
SIMDE_DETECT_CLANG_VERSION_CHECK
(
7
0
0
)
)
return
vld1_f64_x3
(
ptr
)
;
#
else
simde_float64x1_private
a_
[
3
]
;
for
(
size_t
i
=
0
;
i
<
3
;
i
+
+
)
{
a_
[
i
]
.
values
[
0
]
=
ptr
[
i
]
;
}
simde_float64x1x3_t
s_
=
{
{
simde_float64x1_from_private
(
a_
[
0
]
)
simde_float64x1_from_private
(
a_
[
1
]
)
simde_float64x1_from_private
(
a_
[
2
]
)
}
}
;
return
s_
;
#
endif
}
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vld1_f64_x3
#
define
vld1_f64_x3
(
a
)
simde_vld1_f64_x3
(
(
a
)
)
#
endif
SIMDE_FUNCTION_ATTRIBUTES
simde_int8x8x3_t
simde_vld1_s8_x3
(
int8_t
const
ptr
[
HEDLEY_ARRAY_PARAM
(
24
)
]
)
{
#
if
\
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
&
&
\
(
!
defined
(
HEDLEY_GCC_VERSION
)
|
|
(
HEDLEY_GCC_VERSION_CHECK
(
12
0
0
)
&
&
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
)
)
&
&
\
(
!
defined
(
__clang__
)
|
|
SIMDE_DETECT_CLANG_VERSION_CHECK
(
7
0
0
)
)
return
vld1_s8_x3
(
ptr
)
;
#
else
simde_int8x8_private
a_
[
3
]
;
for
(
size_t
i
=
0
;
i
<
24
;
i
+
+
)
{
a_
[
i
/
8
]
.
values
[
i
%
8
]
=
ptr
[
i
]
;
}
simde_int8x8x3_t
s_
=
{
{
simde_int8x8_from_private
(
a_
[
0
]
)
simde_int8x8_from_private
(
a_
[
1
]
)
simde_int8x8_from_private
(
a_
[
2
]
)
}
}
;
return
s_
;
#
endif
}
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vld1_s8_x3
#
define
vld1_s8_x3
(
a
)
simde_vld1_s8_x3
(
(
a
)
)
#
endif
SIMDE_FUNCTION_ATTRIBUTES
simde_int16x4x3_t
simde_vld1_s16_x3
(
int16_t
const
ptr
[
HEDLEY_ARRAY_PARAM
(
12
)
]
)
{
#
if
\
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
&
&
\
(
!
defined
(
HEDLEY_GCC_VERSION
)
|
|
(
HEDLEY_GCC_VERSION_CHECK
(
8
0
0
)
&
&
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
)
)
&
&
\
(
!
defined
(
__clang__
)
|
|
SIMDE_DETECT_CLANG_VERSION_CHECK
(
7
0
0
)
)
return
vld1_s16_x3
(
ptr
)
;
#
else
simde_int16x4_private
a_
[
3
]
;
for
(
size_t
i
=
0
;
i
<
12
;
i
+
+
)
{
a_
[
i
/
4
]
.
values
[
i
%
4
]
=
ptr
[
i
]
;
}
simde_int16x4x3_t
s_
=
{
{
simde_int16x4_from_private
(
a_
[
0
]
)
simde_int16x4_from_private
(
a_
[
1
]
)
simde_int16x4_from_private
(
a_
[
2
]
)
}
}
;
return
s_
;
#
endif
}
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vld1_s16_x3
#
define
vld1_s16_x3
(
a
)
simde_vld1_s16_x3
(
(
a
)
)
#
endif
SIMDE_FUNCTION_ATTRIBUTES
simde_int32x2x3_t
simde_vld1_s32_x3
(
int32_t
const
ptr
[
HEDLEY_ARRAY_PARAM
(
6
)
]
)
{
#
if
\
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
&
&
\
(
!
defined
(
HEDLEY_GCC_VERSION
)
|
|
(
HEDLEY_GCC_VERSION_CHECK
(
12
0
0
)
&
&
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
)
)
&
&
\
(
!
defined
(
__clang__
)
|
|
SIMDE_DETECT_CLANG_VERSION_CHECK
(
7
0
0
)
)
return
vld1_s32_x3
(
ptr
)
;
#
else
simde_int32x2_private
a_
[
3
]
;
for
(
size_t
i
=
0
;
i
<
6
;
i
+
+
)
{
a_
[
i
/
2
]
.
values
[
i
%
2
]
=
ptr
[
i
]
;
}
simde_int32x2x3_t
s_
=
{
{
simde_int32x2_from_private
(
a_
[
0
]
)
simde_int32x2_from_private
(
a_
[
1
]
)
simde_int32x2_from_private
(
a_
[
2
]
)
}
}
;
return
s_
;
#
endif
}
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vld1_s32_x3
#
define
vld1_s32_x3
(
a
)
simde_vld1_s32_x3
(
(
a
)
)
#
endif
SIMDE_FUNCTION_ATTRIBUTES
simde_int64x1x3_t
simde_vld1_s64_x3
(
int64_t
const
ptr
[
HEDLEY_ARRAY_PARAM
(
3
)
]
)
{
#
if
\
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
&
&
\
(
!
defined
(
HEDLEY_GCC_VERSION
)
|
|
(
HEDLEY_GCC_VERSION_CHECK
(
8
0
0
)
&
&
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
)
)
&
&
\
(
!
defined
(
__clang__
)
|
|
SIMDE_DETECT_CLANG_VERSION_CHECK
(
7
0
0
)
)
return
vld1_s64_x3
(
ptr
)
;
#
else
simde_int64x1_private
a_
[
3
]
;
for
(
size_t
i
=
0
;
i
<
3
;
i
+
+
)
{
a_
[
i
]
.
values
[
0
]
=
ptr
[
i
]
;
}
simde_int64x1x3_t
s_
=
{
{
simde_int64x1_from_private
(
a_
[
0
]
)
simde_int64x1_from_private
(
a_
[
1
]
)
simde_int64x1_from_private
(
a_
[
2
]
)
}
}
;
return
s_
;
#
endif
}
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vld1_s64_x3
#
define
vld1_s64_x3
(
a
)
simde_vld1_s64_x3
(
(
a
)
)
#
endif
SIMDE_FUNCTION_ATTRIBUTES
simde_uint8x8x3_t
simde_vld1_u8_x3
(
uint8_t
const
ptr
[
HEDLEY_ARRAY_PARAM
(
24
)
]
)
{
#
if
\
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
&
&
\
(
!
defined
(
HEDLEY_GCC_VERSION
)
|
|
(
HEDLEY_GCC_VERSION_CHECK
(
8
0
0
)
&
&
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
)
)
&
&
\
(
!
defined
(
__clang__
)
|
|
SIMDE_DETECT_CLANG_VERSION_CHECK
(
7
0
0
)
)
return
vld1_u8_x3
(
ptr
)
;
#
else
simde_uint8x8_private
a_
[
3
]
;
for
(
size_t
i
=
0
;
i
<
24
;
i
+
+
)
{
a_
[
i
/
8
]
.
values
[
i
%
8
]
=
ptr
[
i
]
;
}
simde_uint8x8x3_t
s_
=
{
{
simde_uint8x8_from_private
(
a_
[
0
]
)
simde_uint8x8_from_private
(
a_
[
1
]
)
simde_uint8x8_from_private
(
a_
[
2
]
)
}
}
;
return
s_
;
#
endif
}
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vld1_u8_x3
#
define
vld1_u8_x3
(
a
)
simde_vld1_u8_x3
(
(
a
)
)
#
endif
SIMDE_FUNCTION_ATTRIBUTES
simde_uint16x4x3_t
simde_vld1_u16_x3
(
uint16_t
const
ptr
[
HEDLEY_ARRAY_PARAM
(
12
)
]
)
{
#
if
\
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
&
&
\
(
!
defined
(
HEDLEY_GCC_VERSION
)
|
|
(
HEDLEY_GCC_VERSION_CHECK
(
8
0
0
)
&
&
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
)
)
&
&
\
(
!
defined
(
__clang__
)
|
|
SIMDE_DETECT_CLANG_VERSION_CHECK
(
7
0
0
)
)
return
vld1_u16_x3
(
ptr
)
;
#
else
simde_uint16x4_private
a_
[
3
]
;
for
(
size_t
i
=
0
;
i
<
12
;
i
+
+
)
{
a_
[
i
/
4
]
.
values
[
i
%
4
]
=
ptr
[
i
]
;
}
simde_uint16x4x3_t
s_
=
{
{
simde_uint16x4_from_private
(
a_
[
0
]
)
simde_uint16x4_from_private
(
a_
[
1
]
)
simde_uint16x4_from_private
(
a_
[
2
]
)
}
}
;
return
s_
;
#
endif
}
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vld1_u16_x3
#
define
vld1_u16_x3
(
a
)
simde_vld1_u16_x3
(
(
a
)
)
#
endif
SIMDE_FUNCTION_ATTRIBUTES
simde_uint32x2x3_t
simde_vld1_u32_x3
(
uint32_t
const
ptr
[
HEDLEY_ARRAY_PARAM
(
6
)
]
)
{
#
if
\
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
&
&
\
(
!
defined
(
HEDLEY_GCC_VERSION
)
|
|
(
HEDLEY_GCC_VERSION_CHECK
(
8
0
0
)
&
&
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
)
)
&
&
\
(
!
defined
(
__clang__
)
|
|
SIMDE_DETECT_CLANG_VERSION_CHECK
(
7
0
0
)
)
return
vld1_u32_x3
(
ptr
)
;
#
else
simde_uint32x2_private
a_
[
3
]
;
for
(
size_t
i
=
0
;
i
<
6
;
i
+
+
)
{
a_
[
i
/
2
]
.
values
[
i
%
2
]
=
ptr
[
i
]
;
}
simde_uint32x2x3_t
s_
=
{
{
simde_uint32x2_from_private
(
a_
[
0
]
)
simde_uint32x2_from_private
(
a_
[
1
]
)
simde_uint32x2_from_private
(
a_
[
2
]
)
}
}
;
return
s_
;
#
endif
}
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vld1_u32_x3
#
define
vld1_u32_x3
(
a
)
simde_vld1_u32_x3
(
(
a
)
)
#
endif
SIMDE_FUNCTION_ATTRIBUTES
simde_uint64x1x3_t
simde_vld1_u64_x3
(
uint64_t
const
ptr
[
HEDLEY_ARRAY_PARAM
(
3
)
]
)
{
#
if
\
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
&
&
\
(
!
defined
(
HEDLEY_GCC_VERSION
)
|
|
(
HEDLEY_GCC_VERSION_CHECK
(
8
0
0
)
&
&
defined
(
SIMDE_ARM_NEON_A64V8_NATIVE
)
)
)
&
&
\
(
!
defined
(
__clang__
)
|
|
SIMDE_DETECT_CLANG_VERSION_CHECK
(
7
0
0
)
)
return
vld1_u64_x3
(
ptr
)
;
#
else
simde_uint64x1_private
a_
[
3
]
;
for
(
size_t
i
=
0
;
i
<
3
;
i
+
+
)
{
a_
[
i
]
.
values
[
0
]
=
ptr
[
i
]
;
}
simde_uint64x1x3_t
s_
=
{
{
simde_uint64x1_from_private
(
a_
[
0
]
)
simde_uint64x1_from_private
(
a_
[
1
]
)
simde_uint64x1_from_private
(
a_
[
2
]
)
}
}
;
return
s_
;
#
endif
}
#
if
defined
(
SIMDE_ARM_NEON_A32V7_ENABLE_NATIVE_ALIASES
)
#
undef
vld1_u64_x3
#
define
vld1_u64_x3
(
a
)
simde_vld1_u64_x3
(
(
a
)
)
#
endif
#
endif
SIMDE_END_DECLS_
HEDLEY_DIAGNOSTIC_POP
#
endif
