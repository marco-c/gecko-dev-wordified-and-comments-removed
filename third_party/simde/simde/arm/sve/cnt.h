#
if
!
defined
(
SIMDE_ARM_SVE_CNT_H
)
#
define
SIMDE_ARM_SVE_CNT_H
#
include
"
types
.
h
"
HEDLEY_DIAGNOSTIC_PUSH
SIMDE_DISABLE_UNWANTED_DIAGNOSTICS
SIMDE_FUNCTION_ATTRIBUTES
uint64_t
simde_svcntb
(
void
)
{
#
if
defined
(
SIMDE_ARM_SVE_NATIVE
)
return
svcntb
(
)
;
#
else
return
sizeof
(
simde_svint8_t
)
/
sizeof
(
int8_t
)
;
#
endif
}
#
if
defined
(
SIMDE_ARM_SVE_ENABLE_NATIVE_ALIASES
)
#
undef
simde_svcntb
#
define
svcntb
(
)
simde_svcntb
(
)
#
endif
SIMDE_FUNCTION_ATTRIBUTES
uint64_t
simde_svcnth
(
void
)
{
#
if
defined
(
SIMDE_ARM_SVE_NATIVE
)
return
svcnth
(
)
;
#
else
return
sizeof
(
simde_svint16_t
)
/
sizeof
(
int16_t
)
;
#
endif
}
#
if
defined
(
SIMDE_ARM_SVE_ENABLE_NATIVE_ALIASES
)
#
undef
simde_svcnth
#
define
svcnth
(
)
simde_svcnth
(
)
#
endif
SIMDE_FUNCTION_ATTRIBUTES
uint64_t
simde_svcntw
(
void
)
{
#
if
defined
(
SIMDE_ARM_SVE_NATIVE
)
return
svcntw
(
)
;
#
else
return
sizeof
(
simde_svint32_t
)
/
sizeof
(
int32_t
)
;
#
endif
}
#
if
defined
(
SIMDE_ARM_SVE_ENABLE_NATIVE_ALIASES
)
#
undef
simde_svcntw
#
define
svcntw
(
)
simde_svcntw
(
)
#
endif
SIMDE_FUNCTION_ATTRIBUTES
uint64_t
simde_svcntd
(
void
)
{
#
if
defined
(
SIMDE_ARM_SVE_NATIVE
)
return
svcntd
(
)
;
#
else
return
sizeof
(
simde_svint64_t
)
/
sizeof
(
int64_t
)
;
#
endif
}
#
if
defined
(
SIMDE_ARM_SVE_ENABLE_NATIVE_ALIASES
)
#
undef
simde_svcntd
#
define
svcntd
(
)
simde_svcntd
(
)
#
endif
HEDLEY_DIAGNOSTIC_POP
#
endif
