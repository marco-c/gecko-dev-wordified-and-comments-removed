#
if
!
defined
(
SIMDE_MIPS_MSA_AND_H
)
#
define
SIMDE_MIPS_MSA_AND_H
#
include
"
types
.
h
"
HEDLEY_DIAGNOSTIC_PUSH
SIMDE_DISABLE_UNWANTED_DIAGNOSTICS
SIMDE_BEGIN_DECLS_
SIMDE_FUNCTION_ATTRIBUTES
simde_v16u8
simde_msa_and_v
(
simde_v16u8
a
simde_v16u8
b
)
{
#
if
defined
(
SIMDE_MIPS_MSA_NATIVE
)
return
__msa_and_v
(
a
b
)
;
#
elif
defined
(
SIMDE_ARM_NEON_A32V7_NATIVE
)
return
vandq_u8
(
a
b
)
;
#
elif
defined
(
SIMDE_POWER_ALTIVEC_P6_NATIVE
)
return
vec_and
(
a
b
)
;
#
else
simde_v16u8_private
a_
=
simde_v16u8_to_private
(
a
)
b_
=
simde_v16u8_to_private
(
b
)
r_
;
#
if
defined
(
SIMDE_X86_SSSE3_NATIVE
)
r_
.
m128i
=
_mm_and_si128
(
a_
.
m128i
b_
.
m128i
)
;
#
elif
defined
(
SIMDE_WASM_SIMD128_NATIVE
)
r_
.
v128
=
wasm_v128_and
(
a_
.
v128
b_
.
v128
)
;
#
elif
defined
(
SIMDE_VECTOR_SUBSCRIPT_SCALAR
)
r_
.
values
=
a_
.
values
&
b_
.
values
;
#
else
SIMDE_VECTORIZE
for
(
size_t
i
=
0
;
i
<
(
sizeof
(
r_
.
values
)
/
sizeof
(
r_
.
values
[
0
]
)
)
;
i
+
+
)
{
r_
.
values
[
i
]
=
a_
.
values
[
i
]
&
b_
.
values
[
i
]
;
}
#
endif
return
simde_v16u8_from_private
(
r_
)
;
#
endif
}
#
if
defined
(
SIMDE_MIPS_MSA_ENABLE_NATIVE_ALIASES
)
#
undef
__msa_and_v
#
define
__msa_and_v
(
a
b
)
simde_msa_and_v
(
(
a
)
(
b
)
)
#
endif
SIMDE_END_DECLS_
HEDLEY_DIAGNOSTIC_POP
#
endif
