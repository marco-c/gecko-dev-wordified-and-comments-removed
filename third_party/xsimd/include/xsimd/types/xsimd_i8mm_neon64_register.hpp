#
ifndef
XSIMD_I8MM_NEON64_REGISTER_HPP
#
define
XSIMD_I8MM_NEON64_REGISTER_HPP
#
include
"
.
/
xsimd_neon64_register
.
hpp
"
namespace
xsimd
{
template
<
typename
arch
>
struct
i8mm
;
template
<
>
struct
i8mm
<
neon64
>
:
neon64
{
static
constexpr
bool
supported
(
)
noexcept
{
return
XSIMD_WITH_I8MM_NEON64
;
}
static
constexpr
bool
available
(
)
noexcept
{
return
true
;
}
static
constexpr
char
const
*
name
(
)
noexcept
{
return
"
i8mm
+
neon64
"
;
}
}
;
#
if
XSIMD_WITH_I8MM_NEON64
#
if
!
XSIMD_WITH_NEON64
#
error
"
architecture
inconsistency
:
i8mm
+
neon64
requires
neon64
"
#
endif
namespace
types
{
XSIMD_DECLARE_SIMD_REGISTER_ALIAS
(
i8mm
<
neon64
>
neon64
)
;
template
<
class
T
>
struct
get_bool_simd_register
<
T
i8mm
<
neon64
>
>
:
detail
:
:
neon_bool_simd_register
<
T
i8mm
<
neon64
>
>
{
}
;
}
#
endif
}
#
endif
