#
ifndef
XSIMD_NEON64_REGISTER_HPP
#
define
XSIMD_NEON64_REGISTER_HPP
#
include
"
xsimd_neon_register
.
hpp
"
namespace
xsimd
{
struct
neon64
:
neon
{
static
constexpr
bool
supported
(
)
noexcept
{
return
XSIMD_WITH_NEON64
;
}
static
constexpr
bool
available
(
)
noexcept
{
return
true
;
}
static
constexpr
bool
requires_alignment
(
)
noexcept
{
return
true
;
}
static
constexpr
std
:
:
size_t
alignment
(
)
noexcept
{
return
16
;
}
static
constexpr
char
const
*
name
(
)
noexcept
{
return
"
arm64
+
neon
"
;
}
}
;
#
if
XSIMD_WITH_NEON64
#
if
!
XSIMD_WITH_NEON
#
error
"
architecture
inconsistency
:
neon64
requires
neon
"
#
endif
namespace
types
{
XSIMD_DECLARE_SIMD_REGISTER_ALIAS
(
neon64
neon
)
;
XSIMD_DECLARE_SIMD_REGISTER
(
double
neon64
float64x2_t
)
;
template
<
class
T
>
struct
get_bool_simd_register
<
T
neon64
>
:
detail
:
:
neon_bool_simd_register
<
T
neon64
>
{
}
;
}
#
endif
}
#
endif
