#
ifndef
XSIMD_ALIGNMENT_HPP
#
define
XSIMD_ALIGNMENT_HPP
#
include
"
.
.
/
types
/
xsimd_utils
.
hpp
"
#
include
"
xsimd_aligned_allocator
.
hpp
"
namespace
xsimd
{
struct
aligned_mode
{
}
;
struct
unaligned_mode
{
}
;
template
<
class
A
>
struct
allocator_alignment
{
using
type
=
unaligned_mode
;
}
;
template
<
class
T
>
struct
allocator_alignment
<
aligned_allocator
<
T
>
>
{
using
type
=
aligned_mode
;
}
;
template
<
class
A
>
using
allocator_alignment_t
=
typename
allocator_alignment
<
A
>
:
:
type
;
template
<
class
C
class
=
void
>
struct
container_alignment
{
using
type
=
unaligned_mode
;
}
;
template
<
class
C
>
struct
container_alignment
<
C
detail
:
:
void_t
<
typename
C
:
:
allocator_type
>
>
{
using
type
=
allocator_alignment_t
<
typename
C
:
:
allocator_type
>
;
}
;
template
<
class
C
>
using
container_alignment_t
=
typename
container_alignment
<
C
>
:
:
type
;
template
<
class
Arch
=
default_arch
>
inline
bool
is_aligned
(
void
const
*
ptr
)
{
return
(
reinterpret_cast
<
uintptr_t
>
(
ptr
)
%
static_cast
<
uintptr_t
>
(
Arch
:
:
alignment
(
)
)
)
=
=
0
;
}
}
#
endif
