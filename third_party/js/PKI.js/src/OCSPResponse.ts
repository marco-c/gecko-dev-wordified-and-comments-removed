import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
ResponseBytes
ResponseBytesJson
ResponseBytesSchema
}
from
"
.
/
ResponseBytes
"
;
import
{
BasicOCSPResponse
}
from
"
.
/
BasicOCSPResponse
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
import
{
Certificate
}
from
"
.
/
Certificate
"
;
import
{
id_PKIX_OCSP_Basic
}
from
"
.
/
ObjectIdentifiers
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
common
from
"
.
/
common
"
;
const
RESPONSE_STATUS
=
"
responseStatus
"
;
const
RESPONSE_BYTES
=
"
responseBytes
"
;
export
interface
IOCSPResponse
{
responseStatus
:
asn1js
.
Enumerated
;
responseBytes
?
:
ResponseBytes
;
}
export
interface
OCSPResponseJson
{
responseStatus
:
asn1js
.
EnumeratedJson
;
responseBytes
?
:
ResponseBytesJson
;
}
export
type
OCSPResponseParameters
=
PkiObjectParameters
&
Partial
<
IOCSPResponse
>
;
export
class
OCSPResponse
extends
PkiObject
implements
IOCSPResponse
{
public
static
override
CLASS_NAME
=
"
OCSPResponse
"
;
public
responseStatus
!
:
asn1js
.
Enumerated
;
public
responseBytes
?
:
ResponseBytes
;
constructor
(
parameters
:
OCSPResponseParameters
=
{
}
)
{
super
(
)
;
this
.
responseStatus
=
pvutils
.
getParametersValue
(
parameters
RESPONSE_STATUS
OCSPResponse
.
defaultValues
(
RESPONSE_STATUS
)
)
;
if
(
RESPONSE_BYTES
in
parameters
)
{
this
.
responseBytes
=
pvutils
.
getParametersValue
(
parameters
RESPONSE_BYTES
OCSPResponse
.
defaultValues
(
RESPONSE_BYTES
)
)
;
}
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
RESPONSE_STATUS
)
:
asn1js
.
Enumerated
;
public
static
override
defaultValues
(
memberName
:
typeof
RESPONSE_BYTES
)
:
ResponseBytes
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
RESPONSE_STATUS
:
return
new
asn1js
.
Enumerated
(
)
;
case
RESPONSE_BYTES
:
return
new
ResponseBytes
(
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
{
switch
(
memberName
)
{
case
RESPONSE_STATUS
:
return
(
memberValue
.
isEqual
(
OCSPResponse
.
defaultValues
(
memberName
)
)
)
;
case
RESPONSE_BYTES
:
return
(
(
ResponseBytes
.
compareWithDefault
(
"
responseType
"
memberValue
.
responseType
)
)
&
&
(
ResponseBytes
.
compareWithDefault
(
"
response
"
memberValue
.
response
)
)
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
Schema
.
SchemaParameters
<
{
responseStatus
?
:
string
;
responseBytes
?
:
ResponseBytesSchema
;
}
>
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
"
OCSPResponse
"
)
value
:
[
new
asn1js
.
Enumerated
(
{
name
:
(
names
.
responseStatus
|
|
RESPONSE_STATUS
)
}
)
new
asn1js
.
Constructed
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
0
}
value
:
[
ResponseBytes
.
schema
(
names
.
responseBytes
|
|
{
names
:
{
blockName
:
RESPONSE_BYTES
}
}
)
]
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
[
RESPONSE_STATUS
RESPONSE_BYTES
]
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
OCSPResponse
.
schema
(
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
responseStatus
=
asn1
.
result
.
responseStatus
;
if
(
RESPONSE_BYTES
in
asn1
.
result
)
this
.
responseBytes
=
new
ResponseBytes
(
{
schema
:
asn1
.
result
.
responseBytes
}
)
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
const
outputArray
=
[
]
;
outputArray
.
push
(
this
.
responseStatus
)
;
if
(
this
.
responseBytes
)
{
outputArray
.
push
(
new
asn1js
.
Constructed
(
{
idBlock
:
{
tagClass
:
3
tagNumber
:
0
}
value
:
[
this
.
responseBytes
.
toSchema
(
)
]
}
)
)
;
}
return
(
new
asn1js
.
Sequence
(
{
value
:
outputArray
}
)
)
;
}
public
toJSON
(
)
:
OCSPResponseJson
{
const
res
:
OCSPResponseJson
=
{
responseStatus
:
this
.
responseStatus
.
toJSON
(
)
}
;
if
(
this
.
responseBytes
)
{
res
.
responseBytes
=
this
.
responseBytes
.
toJSON
(
)
;
}
return
res
;
}
public
async
getCertificateStatus
(
certificate
:
Certificate
issuerCertificate
:
Certificate
crypto
=
common
.
getCrypto
(
true
)
)
{
let
basicResponse
;
const
result
=
{
isForCertificate
:
false
status
:
2
}
;
if
(
!
this
.
responseBytes
)
return
result
;
if
(
this
.
responseBytes
.
responseType
!
=
=
id_PKIX_OCSP_Basic
)
return
result
;
try
{
const
asn1Basic
=
asn1js
.
fromBER
(
this
.
responseBytes
.
response
.
valueBlock
.
valueHexView
)
;
AsnError
.
assert
(
asn1Basic
"
Basic
OCSP
response
"
)
;
basicResponse
=
new
BasicOCSPResponse
(
{
schema
:
asn1Basic
.
result
}
)
;
}
catch
(
ex
)
{
return
result
;
}
return
basicResponse
.
getCertificateStatus
(
certificate
issuerCertificate
crypto
)
;
}
public
async
sign
(
privateKey
:
CryptoKey
hashAlgorithm
?
:
string
crypto
=
common
.
getCrypto
(
true
)
)
{
if
(
this
.
responseBytes
&
&
this
.
responseBytes
.
responseType
=
=
=
id_PKIX_OCSP_Basic
)
{
const
basicResponse
=
BasicOCSPResponse
.
fromBER
(
this
.
responseBytes
.
response
.
valueBlock
.
valueHexView
)
;
return
basicResponse
.
sign
(
privateKey
hashAlgorithm
crypto
)
;
}
throw
new
Error
(
Unknown
ResponseBytes
type
:
{
this
.
responseBytes
?
.
responseType
|
|
"
Unknown
"
}
)
;
}
public
async
verify
(
issuerCertificate
:
Certificate
|
null
=
null
crypto
=
common
.
getCrypto
(
true
)
)
:
Promise
<
boolean
>
{
if
(
(
RESPONSE_BYTES
in
this
)
=
=
=
false
)
throw
new
Error
(
"
Empty
ResponseBytes
field
"
)
;
if
(
this
.
responseBytes
&
&
this
.
responseBytes
.
responseType
=
=
=
id_PKIX_OCSP_Basic
)
{
const
basicResponse
=
BasicOCSPResponse
.
fromBER
(
this
.
responseBytes
.
response
.
valueBlock
.
valueHexView
)
;
if
(
issuerCertificate
!
=
=
null
)
{
if
(
!
basicResponse
.
certs
)
{
basicResponse
.
certs
=
[
]
;
}
basicResponse
.
certs
.
push
(
issuerCertificate
)
;
}
return
basicResponse
.
verify
(
{
}
crypto
)
;
}
throw
new
Error
(
Unknown
ResponseBytes
type
:
{
this
.
responseBytes
?
.
responseType
|
|
"
Unknown
"
}
)
;
}
}
