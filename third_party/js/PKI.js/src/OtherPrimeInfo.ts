import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvtsutils
from
"
pvtsutils
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
ParameterError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
PRIME
=
"
prime
"
;
const
EXPONENT
=
"
exponent
"
;
const
COEFFICIENT
=
"
coefficient
"
;
const
CLEAR_PROPS
=
[
PRIME
EXPONENT
COEFFICIENT
]
;
export
interface
IOtherPrimeInfo
{
prime
:
asn1js
.
Integer
;
exponent
:
asn1js
.
Integer
;
coefficient
:
asn1js
.
Integer
;
}
export
type
OtherPrimeInfoParameters
=
PkiObjectParameters
&
Partial
<
IOtherPrimeInfo
>
&
{
json
?
:
OtherPrimeInfoJson
;
}
;
export
interface
OtherPrimeInfoJson
{
r
:
string
;
d
:
string
;
t
:
string
;
}
export
type
OtherPrimeInfoSchema
=
Schema
.
SchemaParameters
<
{
prime
?
:
string
;
exponent
?
:
string
;
coefficient
?
:
string
;
}
>
;
export
class
OtherPrimeInfo
extends
PkiObject
implements
IOtherPrimeInfo
{
public
static
override
CLASS_NAME
=
"
OtherPrimeInfo
"
;
public
prime
!
:
asn1js
.
Integer
;
public
exponent
!
:
asn1js
.
Integer
;
public
coefficient
!
:
asn1js
.
Integer
;
constructor
(
parameters
:
OtherPrimeInfoParameters
=
{
}
)
{
super
(
)
;
this
.
prime
=
pvutils
.
getParametersValue
(
parameters
PRIME
OtherPrimeInfo
.
defaultValues
(
PRIME
)
)
;
this
.
exponent
=
pvutils
.
getParametersValue
(
parameters
EXPONENT
OtherPrimeInfo
.
defaultValues
(
EXPONENT
)
)
;
this
.
coefficient
=
pvutils
.
getParametersValue
(
parameters
COEFFICIENT
OtherPrimeInfo
.
defaultValues
(
COEFFICIENT
)
)
;
if
(
parameters
.
json
)
{
this
.
fromJSON
(
parameters
.
json
)
;
}
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
PRIME
|
typeof
EXPONENT
|
typeof
COEFFICIENT
)
:
asn1js
.
Integer
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
PRIME
:
return
new
asn1js
.
Integer
(
)
;
case
EXPONENT
:
return
new
asn1js
.
Integer
(
)
;
case
COEFFICIENT
:
return
new
asn1js
.
Integer
(
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
OtherPrimeInfoSchema
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
new
asn1js
.
Integer
(
{
name
:
(
names
.
prime
|
|
EMPTY_STRING
)
}
)
new
asn1js
.
Integer
(
{
name
:
(
names
.
exponent
|
|
EMPTY_STRING
)
}
)
new
asn1js
.
Integer
(
{
name
:
(
names
.
coefficient
|
|
EMPTY_STRING
)
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
OtherPrimeInfo
.
schema
(
{
names
:
{
prime
:
PRIME
exponent
:
EXPONENT
coefficient
:
COEFFICIENT
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
prime
=
asn1
.
result
.
prime
.
convertFromDER
(
)
;
this
.
exponent
=
asn1
.
result
.
exponent
.
convertFromDER
(
)
;
this
.
coefficient
=
asn1
.
result
.
coefficient
.
convertFromDER
(
)
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
[
this
.
prime
.
convertToDER
(
)
this
.
exponent
.
convertToDER
(
)
this
.
coefficient
.
convertToDER
(
)
]
}
)
)
;
}
public
toJSON
(
)
:
OtherPrimeInfoJson
{
return
{
r
:
pvtsutils
.
Convert
.
ToBase64Url
(
this
.
prime
.
valueBlock
.
valueHexView
)
d
:
pvtsutils
.
Convert
.
ToBase64Url
(
this
.
exponent
.
valueBlock
.
valueHexView
)
t
:
pvtsutils
.
Convert
.
ToBase64Url
(
this
.
coefficient
.
valueBlock
.
valueHexView
)
}
;
}
public
fromJSON
(
json
:
OtherPrimeInfoJson
)
:
void
{
ParameterError
.
assert
(
"
json
"
json
"
r
"
"
d
"
"
r
"
)
;
this
.
prime
=
new
asn1js
.
Integer
(
{
valueHex
:
pvtsutils
.
Convert
.
FromBase64Url
(
json
.
r
)
}
)
;
this
.
exponent
=
new
asn1js
.
Integer
(
{
valueHex
:
pvtsutils
.
Convert
.
FromBase64Url
(
json
.
d
)
}
)
;
this
.
coefficient
=
new
asn1js
.
Integer
(
{
valueHex
:
pvtsutils
.
Convert
.
FromBase64Url
(
json
.
t
)
}
)
;
}
}
