import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
export
const
SECONDS
=
"
seconds
"
;
export
const
MILLIS
=
"
millis
"
;
export
const
MICROS
=
"
micros
"
;
export
interface
IAccuracy
{
seconds
?
:
number
;
millis
?
:
number
;
micros
?
:
number
;
}
export
type
AccuracyParameters
=
PkiObjectParameters
&
Partial
<
IAccuracy
>
;
export
type
AccuracySchema
=
Schema
.
SchemaParameters
<
{
seconds
?
:
string
;
millis
?
:
string
;
micros
?
:
string
;
}
>
;
export
interface
AccuracyJson
{
seconds
?
:
number
;
millis
?
:
number
;
micros
?
:
number
;
}
export
class
Accuracy
extends
PkiObject
implements
IAccuracy
{
public
static
override
CLASS_NAME
=
"
Accuracy
"
;
public
seconds
?
:
number
;
public
millis
?
:
number
;
public
micros
?
:
number
;
constructor
(
parameters
:
AccuracyParameters
=
{
}
)
{
super
(
)
;
if
(
SECONDS
in
parameters
)
{
this
.
seconds
=
pvutils
.
getParametersValue
(
parameters
SECONDS
Accuracy
.
defaultValues
(
SECONDS
)
)
;
}
if
(
MILLIS
in
parameters
)
{
this
.
millis
=
pvutils
.
getParametersValue
(
parameters
MILLIS
Accuracy
.
defaultValues
(
MILLIS
)
)
;
}
if
(
MICROS
in
parameters
)
{
this
.
micros
=
pvutils
.
getParametersValue
(
parameters
MICROS
Accuracy
.
defaultValues
(
MICROS
)
)
;
}
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
SECONDS
)
:
number
;
public
static
override
defaultValues
(
memberName
:
typeof
MILLIS
)
:
number
;
public
static
override
defaultValues
(
memberName
:
typeof
MICROS
)
:
number
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
SECONDS
:
case
MILLIS
:
case
MICROS
:
return
0
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
(
memberName
:
typeof
SECONDS
|
typeof
MILLIS
|
typeof
MICROS
memberValue
:
number
)
:
boolean
;
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
;
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
{
switch
(
memberName
)
{
case
SECONDS
:
case
MILLIS
:
case
MICROS
:
return
(
memberValue
=
=
=
Accuracy
.
defaultValues
(
memberName
)
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
AccuracySchema
=
{
}
)
:
any
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
optional
:
true
value
:
[
new
asn1js
.
Integer
(
{
optional
:
true
name
:
(
names
.
seconds
|
|
EMPTY_STRING
)
}
)
new
asn1js
.
Primitive
(
{
name
:
(
names
.
millis
|
|
EMPTY_STRING
)
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
0
}
}
)
new
asn1js
.
Primitive
(
{
name
:
(
names
.
micros
|
|
EMPTY_STRING
)
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
1
}
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
[
SECONDS
MILLIS
MICROS
]
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
Accuracy
.
schema
(
{
names
:
{
seconds
:
SECONDS
millis
:
MILLIS
micros
:
MICROS
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
if
(
"
seconds
"
in
asn1
.
result
)
{
this
.
seconds
=
asn1
.
result
.
seconds
.
valueBlock
.
valueDec
;
}
if
(
"
millis
"
in
asn1
.
result
)
{
const
intMillis
=
new
asn1js
.
Integer
(
{
valueHex
:
asn1
.
result
.
millis
.
valueBlock
.
valueHex
}
)
;
this
.
millis
=
intMillis
.
valueBlock
.
valueDec
;
}
if
(
"
micros
"
in
asn1
.
result
)
{
const
intMicros
=
new
asn1js
.
Integer
(
{
valueHex
:
asn1
.
result
.
micros
.
valueBlock
.
valueHex
}
)
;
this
.
micros
=
intMicros
.
valueBlock
.
valueDec
;
}
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
const
outputArray
=
[
]
;
if
(
this
.
seconds
!
=
=
undefined
)
outputArray
.
push
(
new
asn1js
.
Integer
(
{
value
:
this
.
seconds
}
)
)
;
if
(
this
.
millis
!
=
=
undefined
)
{
const
intMillis
=
new
asn1js
.
Integer
(
{
value
:
this
.
millis
}
)
;
outputArray
.
push
(
new
asn1js
.
Primitive
(
{
idBlock
:
{
tagClass
:
3
tagNumber
:
0
}
valueHex
:
intMillis
.
valueBlock
.
valueHexView
}
)
)
;
}
if
(
this
.
micros
!
=
=
undefined
)
{
const
intMicros
=
new
asn1js
.
Integer
(
{
value
:
this
.
micros
}
)
;
outputArray
.
push
(
new
asn1js
.
Primitive
(
{
idBlock
:
{
tagClass
:
3
tagNumber
:
1
}
valueHex
:
intMicros
.
valueBlock
.
valueHexView
}
)
)
;
}
return
(
new
asn1js
.
Sequence
(
{
value
:
outputArray
}
)
)
;
}
public
toJSON
(
)
:
AccuracyJson
{
const
_object
:
AccuracyJson
=
{
}
;
if
(
this
.
seconds
!
=
=
undefined
)
_object
.
seconds
=
this
.
seconds
;
if
(
this
.
millis
!
=
=
undefined
)
_object
.
millis
=
this
.
millis
;
if
(
this
.
micros
!
=
=
undefined
)
_object
.
micros
=
this
.
micros
;
return
_object
;
}
}
