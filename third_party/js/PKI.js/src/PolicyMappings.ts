import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
{
PolicyMapping
PolicyMappingJson
}
from
"
.
/
PolicyMapping
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
MAPPINGS
=
"
mappings
"
;
const
CLEAR_PROPS
=
[
MAPPINGS
]
;
export
interface
IPolicyMappings
{
mappings
:
PolicyMapping
[
]
;
}
export
interface
PolicyMappingsJson
{
mappings
:
PolicyMappingJson
[
]
;
}
export
type
PolicyMappingsParameters
=
PkiObjectParameters
&
Partial
<
IPolicyMappings
>
;
export
class
PolicyMappings
extends
PkiObject
implements
IPolicyMappings
{
public
static
override
CLASS_NAME
=
"
PolicyMappings
"
;
public
mappings
!
:
PolicyMapping
[
]
;
constructor
(
parameters
:
PolicyMappingsParameters
=
{
}
)
{
super
(
)
;
this
.
mappings
=
pvutils
.
getParametersValue
(
parameters
MAPPINGS
PolicyMappings
.
defaultValues
(
MAPPINGS
)
)
;
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
string
)
:
PolicyMapping
[
]
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
MAPPINGS
:
return
[
]
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
Schema
.
SchemaParameters
<
{
mappings
?
:
string
;
}
>
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
new
asn1js
.
Repeated
(
{
name
:
(
names
.
mappings
|
|
EMPTY_STRING
)
value
:
PolicyMapping
.
schema
(
)
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
PolicyMappings
.
schema
(
{
names
:
{
mappings
:
MAPPINGS
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
mappings
=
Array
.
from
(
asn1
.
result
.
mappings
element
=
>
new
PolicyMapping
(
{
schema
:
element
}
)
)
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
Array
.
from
(
this
.
mappings
o
=
>
o
.
toSchema
(
)
)
}
)
)
;
}
public
toJSON
(
)
:
PolicyMappingsJson
{
return
{
mappings
:
Array
.
from
(
this
.
mappings
o
=
>
o
.
toJSON
(
)
)
}
;
}
}
