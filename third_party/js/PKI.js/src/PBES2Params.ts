import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
AlgorithmIdentifier
AlgorithmIdentifierJson
AlgorithmIdentifierSchema
}
from
"
.
/
AlgorithmIdentifier
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
KEY_DERIVATION_FUNC
=
"
keyDerivationFunc
"
;
const
ENCRYPTION_SCHEME
=
"
encryptionScheme
"
;
const
CLEAR_PROPS
=
[
KEY_DERIVATION_FUNC
ENCRYPTION_SCHEME
]
;
export
interface
IPBES2Params
{
keyDerivationFunc
:
AlgorithmIdentifier
;
encryptionScheme
:
AlgorithmIdentifier
;
}
export
interface
PBES2ParamsJson
{
keyDerivationFunc
:
AlgorithmIdentifierJson
;
encryptionScheme
:
AlgorithmIdentifierJson
;
}
export
type
PBES2ParamsParameters
=
PkiObjectParameters
&
Partial
<
IPBES2Params
>
;
export
class
PBES2Params
extends
PkiObject
implements
IPBES2Params
{
public
static
override
CLASS_NAME
=
"
PBES2Params
"
;
public
keyDerivationFunc
!
:
AlgorithmIdentifier
;
public
encryptionScheme
!
:
AlgorithmIdentifier
;
constructor
(
parameters
:
PBES2ParamsParameters
=
{
}
)
{
super
(
)
;
this
.
keyDerivationFunc
=
pvutils
.
getParametersValue
(
parameters
KEY_DERIVATION_FUNC
PBES2Params
.
defaultValues
(
KEY_DERIVATION_FUNC
)
)
;
this
.
encryptionScheme
=
pvutils
.
getParametersValue
(
parameters
ENCRYPTION_SCHEME
PBES2Params
.
defaultValues
(
ENCRYPTION_SCHEME
)
)
;
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
KEY_DERIVATION_FUNC
)
:
AlgorithmIdentifier
;
public
static
override
defaultValues
(
memberName
:
typeof
ENCRYPTION_SCHEME
)
:
AlgorithmIdentifier
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
KEY_DERIVATION_FUNC
:
return
new
AlgorithmIdentifier
(
)
;
case
ENCRYPTION_SCHEME
:
return
new
AlgorithmIdentifier
(
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
Schema
.
SchemaParameters
<
{
keyDerivationFunc
?
:
AlgorithmIdentifierSchema
;
encryptionScheme
?
:
AlgorithmIdentifierSchema
;
}
>
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
AlgorithmIdentifier
.
schema
(
names
.
keyDerivationFunc
|
|
{
}
)
AlgorithmIdentifier
.
schema
(
names
.
encryptionScheme
|
|
{
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
PBES2Params
.
schema
(
{
names
:
{
keyDerivationFunc
:
{
names
:
{
blockName
:
KEY_DERIVATION_FUNC
}
}
encryptionScheme
:
{
names
:
{
blockName
:
ENCRYPTION_SCHEME
}
}
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
keyDerivationFunc
=
new
AlgorithmIdentifier
(
{
schema
:
asn1
.
result
.
keyDerivationFunc
}
)
;
this
.
encryptionScheme
=
new
AlgorithmIdentifier
(
{
schema
:
asn1
.
result
.
encryptionScheme
}
)
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
[
this
.
keyDerivationFunc
.
toSchema
(
)
this
.
encryptionScheme
.
toSchema
(
)
]
}
)
)
;
}
public
toJSON
(
)
:
PBES2ParamsJson
{
return
{
keyDerivationFunc
:
this
.
keyDerivationFunc
.
toJSON
(
)
encryptionScheme
:
this
.
encryptionScheme
.
toJSON
(
)
}
;
}
}
