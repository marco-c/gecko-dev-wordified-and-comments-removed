import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
POLICY_QUALIFIER_ID
=
"
policyQualifierId
"
;
const
QUALIFIER
=
"
qualifier
"
;
const
CLEAR_PROPS
=
[
POLICY_QUALIFIER_ID
QUALIFIER
]
;
export
interface
IPolicyQualifierInfo
{
policyQualifierId
:
string
;
qualifier
:
Schema
.
SchemaType
;
}
export
type
PolicyQualifierInfoParameters
=
PkiObjectParameters
&
Partial
<
IPolicyQualifierInfo
>
;
export
interface
PolicyQualifierInfoJson
{
policyQualifierId
:
string
;
qualifier
:
any
;
}
export
class
PolicyQualifierInfo
extends
PkiObject
implements
IPolicyQualifierInfo
{
public
static
override
CLASS_NAME
=
"
PolicyQualifierInfo
"
;
public
policyQualifierId
!
:
string
;
public
qualifier
:
Schema
.
SchemaType
;
constructor
(
parameters
:
PolicyQualifierInfoParameters
=
{
}
)
{
super
(
)
;
this
.
policyQualifierId
=
pvutils
.
getParametersValue
(
parameters
POLICY_QUALIFIER_ID
PolicyQualifierInfo
.
defaultValues
(
POLICY_QUALIFIER_ID
)
)
;
this
.
qualifier
=
pvutils
.
getParametersValue
(
parameters
QUALIFIER
PolicyQualifierInfo
.
defaultValues
(
QUALIFIER
)
)
;
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
POLICY_QUALIFIER_ID
)
:
string
;
public
static
override
defaultValues
(
memberName
:
typeof
QUALIFIER
)
:
asn1js
.
Any
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
POLICY_QUALIFIER_ID
:
return
EMPTY_STRING
;
case
QUALIFIER
:
return
new
asn1js
.
Any
(
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
static
override
schema
(
parameters
:
Schema
.
SchemaParameters
<
{
policyQualifierId
?
:
string
;
qualifier
?
:
string
;
}
>
=
{
}
)
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
name
:
(
names
.
policyQualifierId
|
|
EMPTY_STRING
)
}
)
new
asn1js
.
Any
(
{
name
:
(
names
.
qualifier
|
|
EMPTY_STRING
)
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
PolicyQualifierInfo
.
schema
(
{
names
:
{
policyQualifierId
:
POLICY_QUALIFIER_ID
qualifier
:
QUALIFIER
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
policyQualifierId
=
asn1
.
result
.
policyQualifierId
.
valueBlock
.
toString
(
)
;
this
.
qualifier
=
asn1
.
result
.
qualifier
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
value
:
this
.
policyQualifierId
}
)
this
.
qualifier
]
}
)
)
;
}
public
toJSON
(
)
:
PolicyQualifierInfoJson
{
return
{
policyQualifierId
:
this
.
policyQualifierId
qualifier
:
this
.
qualifier
.
toJSON
(
)
}
;
}
}
