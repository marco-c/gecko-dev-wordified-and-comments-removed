import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
*
as
common
from
"
.
/
common
"
;
import
{
EncryptedContentInfo
EncryptedContentInfoJson
EncryptedContentInfoSchema
}
from
"
.
/
EncryptedContentInfo
"
;
import
{
Attribute
AttributeJson
}
from
"
.
/
Attribute
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
import
{
ArgumentError
AsnError
}
from
"
.
/
errors
"
;
import
{
CryptoEngineEncryptParams
}
from
"
.
/
CryptoEngine
/
CryptoEngineInterface
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
const
VERSION
=
"
version
"
;
const
ENCRYPTED_CONTENT_INFO
=
"
encryptedContentInfo
"
;
const
UNPROTECTED_ATTRS
=
"
unprotectedAttrs
"
;
const
CLEAR_PROPS
=
[
VERSION
ENCRYPTED_CONTENT_INFO
UNPROTECTED_ATTRS
]
;
export
interface
IEncryptedData
{
version
:
number
;
encryptedContentInfo
:
EncryptedContentInfo
;
unprotectedAttrs
?
:
Attribute
[
]
;
}
export
interface
EncryptedDataJson
{
version
:
number
;
encryptedContentInfo
:
EncryptedContentInfoJson
;
unprotectedAttrs
?
:
AttributeJson
[
]
;
}
export
type
EncryptedDataParameters
=
PkiObjectParameters
&
Partial
<
IEncryptedData
>
;
export
type
EncryptedDataEncryptParams
=
Omit
<
CryptoEngineEncryptParams
"
contentType
"
>
;
export
class
EncryptedData
extends
PkiObject
implements
IEncryptedData
{
public
static
override
CLASS_NAME
=
"
EncryptedData
"
;
public
version
!
:
number
;
public
encryptedContentInfo
!
:
EncryptedContentInfo
;
public
unprotectedAttrs
?
:
Attribute
[
]
;
constructor
(
parameters
:
EncryptedDataParameters
=
{
}
)
{
super
(
)
;
this
.
version
=
pvutils
.
getParametersValue
(
parameters
VERSION
EncryptedData
.
defaultValues
(
VERSION
)
)
;
this
.
encryptedContentInfo
=
pvutils
.
getParametersValue
(
parameters
ENCRYPTED_CONTENT_INFO
EncryptedData
.
defaultValues
(
ENCRYPTED_CONTENT_INFO
)
)
;
if
(
UNPROTECTED_ATTRS
in
parameters
)
{
this
.
unprotectedAttrs
=
pvutils
.
getParametersValue
(
parameters
UNPROTECTED_ATTRS
EncryptedData
.
defaultValues
(
UNPROTECTED_ATTRS
)
)
;
}
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
VERSION
)
:
number
;
public
static
override
defaultValues
(
memberName
:
typeof
ENCRYPTED_CONTENT_INFO
)
:
EncryptedContentInfo
;
public
static
override
defaultValues
(
memberName
:
typeof
UNPROTECTED_ATTRS
)
:
Attribute
[
]
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
VERSION
:
return
0
;
case
ENCRYPTED_CONTENT_INFO
:
return
new
EncryptedContentInfo
(
)
;
case
UNPROTECTED_ATTRS
:
return
[
]
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
{
switch
(
memberName
)
{
case
VERSION
:
return
(
memberValue
=
=
=
0
)
;
case
ENCRYPTED_CONTENT_INFO
:
return
(
(
EncryptedContentInfo
.
compareWithDefault
(
"
contentType
"
memberValue
.
contentType
)
)
&
&
(
EncryptedContentInfo
.
compareWithDefault
(
"
contentEncryptionAlgorithm
"
memberValue
.
contentEncryptionAlgorithm
)
)
&
&
(
EncryptedContentInfo
.
compareWithDefault
(
"
encryptedContent
"
memberValue
.
encryptedContent
)
)
)
;
case
UNPROTECTED_ATTRS
:
return
(
memberValue
.
length
=
=
=
0
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
Schema
.
SchemaParameters
<
{
version
?
:
string
;
encryptedContentInfo
?
:
EncryptedContentInfoSchema
;
unprotectedAttrs
?
:
string
;
}
>
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
new
asn1js
.
Integer
(
{
name
:
(
names
.
version
|
|
EMPTY_STRING
)
}
)
EncryptedContentInfo
.
schema
(
names
.
encryptedContentInfo
|
|
{
}
)
new
asn1js
.
Constructed
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
1
}
value
:
[
new
asn1js
.
Repeated
(
{
name
:
(
names
.
unprotectedAttrs
|
|
EMPTY_STRING
)
value
:
Attribute
.
schema
(
)
}
)
]
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
EncryptedData
.
schema
(
{
names
:
{
version
:
VERSION
encryptedContentInfo
:
{
names
:
{
blockName
:
ENCRYPTED_CONTENT_INFO
}
}
unprotectedAttrs
:
UNPROTECTED_ATTRS
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
version
=
asn1
.
result
.
version
.
valueBlock
.
valueDec
;
this
.
encryptedContentInfo
=
new
EncryptedContentInfo
(
{
schema
:
asn1
.
result
.
encryptedContentInfo
}
)
;
if
(
UNPROTECTED_ATTRS
in
asn1
.
result
)
this
.
unprotectedAttrs
=
Array
.
from
(
asn1
.
result
.
unprotectedAttrs
element
=
>
new
Attribute
(
{
schema
:
element
}
)
)
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
const
outputArray
=
[
]
;
outputArray
.
push
(
new
asn1js
.
Integer
(
{
value
:
this
.
version
}
)
)
;
outputArray
.
push
(
this
.
encryptedContentInfo
.
toSchema
(
)
)
;
if
(
this
.
unprotectedAttrs
)
{
outputArray
.
push
(
new
asn1js
.
Constructed
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
1
}
value
:
Array
.
from
(
this
.
unprotectedAttrs
o
=
>
o
.
toSchema
(
)
)
}
)
)
;
}
return
(
new
asn1js
.
Sequence
(
{
value
:
outputArray
}
)
)
;
}
public
toJSON
(
)
:
EncryptedDataJson
{
const
res
:
EncryptedDataJson
=
{
version
:
this
.
version
encryptedContentInfo
:
this
.
encryptedContentInfo
.
toJSON
(
)
}
;
if
(
this
.
unprotectedAttrs
)
res
.
unprotectedAttrs
=
Array
.
from
(
this
.
unprotectedAttrs
o
=
>
o
.
toJSON
(
)
)
;
return
res
;
}
public
async
encrypt
(
parameters
:
EncryptedDataEncryptParams
)
:
Promise
<
void
>
{
ArgumentError
.
assert
(
parameters
"
parameters
"
"
object
"
)
;
const
encryptParams
:
CryptoEngineEncryptParams
=
{
.
.
.
parameters
contentType
:
"
1
.
2
.
840
.
113549
.
1
.
7
.
1
"
}
;
this
.
encryptedContentInfo
=
await
common
.
getCrypto
(
true
)
.
encryptEncryptedContentInfo
(
encryptParams
)
;
}
async
decrypt
(
parameters
:
{
password
:
ArrayBuffer
;
}
crypto
=
common
.
getCrypto
(
true
)
)
:
Promise
<
ArrayBuffer
>
{
ArgumentError
.
assert
(
parameters
"
parameters
"
"
object
"
)
;
const
decryptParams
=
{
.
.
.
parameters
encryptedContentInfo
:
this
.
encryptedContentInfo
}
;
return
crypto
.
decryptEncryptedContentInfo
(
decryptParams
)
;
}
}
