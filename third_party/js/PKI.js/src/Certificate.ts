import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvtsutils
from
"
pvtsutils
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
*
as
common
from
"
.
/
common
"
;
import
{
AlgorithmIdentifier
AlgorithmIdentifierJson
AlgorithmIdentifierSchema
}
from
"
.
/
AlgorithmIdentifier
"
;
import
{
RelativeDistinguishedNames
RelativeDistinguishedNamesJson
RelativeDistinguishedNamesSchema
}
from
"
.
/
RelativeDistinguishedNames
"
;
import
{
Time
TimeJson
TimeSchema
}
from
"
.
/
Time
"
;
import
{
PublicKeyInfo
PublicKeyInfoJson
PublicKeyInfoSchema
}
from
"
.
/
PublicKeyInfo
"
;
import
{
Extension
ExtensionJson
}
from
"
.
/
Extension
"
;
import
{
Extensions
ExtensionsSchema
}
from
"
.
/
Extensions
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
import
{
id_BasicConstraints
}
from
"
.
/
ObjectIdentifiers
"
;
import
{
BasicConstraints
}
from
"
.
/
BasicConstraints
"
;
import
{
CryptoEnginePublicKeyParams
}
from
"
.
/
CryptoEngine
/
CryptoEngineInterface
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
{
EMPTY_BUFFER
EMPTY_STRING
}
from
"
.
/
constants
"
;
const
TBS
=
"
tbs
"
;
const
VERSION
=
"
version
"
;
const
SERIAL_NUMBER
=
"
serialNumber
"
;
const
SIGNATURE
=
"
signature
"
;
const
ISSUER
=
"
issuer
"
;
const
NOT_BEFORE
=
"
notBefore
"
;
const
NOT_AFTER
=
"
notAfter
"
;
const
SUBJECT
=
"
subject
"
;
const
SUBJECT_PUBLIC_KEY_INFO
=
"
subjectPublicKeyInfo
"
;
const
ISSUER_UNIQUE_ID
=
"
issuerUniqueID
"
;
const
SUBJECT_UNIQUE_ID
=
"
subjectUniqueID
"
;
const
EXTENSIONS
=
"
extensions
"
;
const
SIGNATURE_ALGORITHM
=
"
signatureAlgorithm
"
;
const
SIGNATURE_VALUE
=
"
signatureValue
"
;
const
TBS_CERTIFICATE
=
"
tbsCertificate
"
;
const
TBS_CERTIFICATE_VERSION
=
{
TBS_CERTIFICATE
}
.
{
VERSION
}
;
const
TBS_CERTIFICATE_SERIAL_NUMBER
=
{
TBS_CERTIFICATE
}
.
{
SERIAL_NUMBER
}
;
const
TBS_CERTIFICATE_SIGNATURE
=
{
TBS_CERTIFICATE
}
.
{
SIGNATURE
}
;
const
TBS_CERTIFICATE_ISSUER
=
{
TBS_CERTIFICATE
}
.
{
ISSUER
}
;
const
TBS_CERTIFICATE_NOT_BEFORE
=
{
TBS_CERTIFICATE
}
.
{
NOT_BEFORE
}
;
const
TBS_CERTIFICATE_NOT_AFTER
=
{
TBS_CERTIFICATE
}
.
{
NOT_AFTER
}
;
const
TBS_CERTIFICATE_SUBJECT
=
{
TBS_CERTIFICATE
}
.
{
SUBJECT
}
;
const
TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY
=
{
TBS_CERTIFICATE
}
.
{
SUBJECT_PUBLIC_KEY_INFO
}
;
const
TBS_CERTIFICATE_ISSUER_UNIQUE_ID
=
{
TBS_CERTIFICATE
}
.
{
ISSUER_UNIQUE_ID
}
;
const
TBS_CERTIFICATE_SUBJECT_UNIQUE_ID
=
{
TBS_CERTIFICATE
}
.
{
SUBJECT_UNIQUE_ID
}
;
const
TBS_CERTIFICATE_EXTENSIONS
=
{
TBS_CERTIFICATE
}
.
{
EXTENSIONS
}
;
const
CLEAR_PROPS
=
[
TBS_CERTIFICATE
TBS_CERTIFICATE_VERSION
TBS_CERTIFICATE_SERIAL_NUMBER
TBS_CERTIFICATE_SIGNATURE
TBS_CERTIFICATE_ISSUER
TBS_CERTIFICATE_NOT_BEFORE
TBS_CERTIFICATE_NOT_AFTER
TBS_CERTIFICATE_SUBJECT
TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY
TBS_CERTIFICATE_ISSUER_UNIQUE_ID
TBS_CERTIFICATE_SUBJECT_UNIQUE_ID
TBS_CERTIFICATE_EXTENSIONS
SIGNATURE_ALGORITHM
SIGNATURE_VALUE
]
;
export
type
TBSCertificateSchema
=
Schema
.
SchemaParameters
<
{
tbsCertificateVersion
?
:
string
;
tbsCertificateSerialNumber
?
:
string
;
signature
?
:
AlgorithmIdentifierSchema
;
issuer
?
:
RelativeDistinguishedNamesSchema
;
tbsCertificateValidity
?
:
string
;
notBefore
?
:
TimeSchema
;
notAfter
?
:
TimeSchema
;
subject
?
:
RelativeDistinguishedNamesSchema
;
subjectPublicKeyInfo
?
:
PublicKeyInfoSchema
;
tbsCertificateIssuerUniqueID
?
:
string
;
tbsCertificateSubjectUniqueID
?
:
string
;
extensions
?
:
ExtensionsSchema
;
}
>
;
function
tbsCertificate
(
parameters
:
TBSCertificateSchema
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
TBS_CERTIFICATE
)
value
:
[
new
asn1js
.
Constructed
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
0
}
value
:
[
new
asn1js
.
Integer
(
{
name
:
(
names
.
tbsCertificateVersion
|
|
TBS_CERTIFICATE_VERSION
)
}
)
]
}
)
new
asn1js
.
Integer
(
{
name
:
(
names
.
tbsCertificateSerialNumber
|
|
TBS_CERTIFICATE_SERIAL_NUMBER
)
}
)
AlgorithmIdentifier
.
schema
(
names
.
signature
|
|
{
names
:
{
blockName
:
TBS_CERTIFICATE_SIGNATURE
}
}
)
RelativeDistinguishedNames
.
schema
(
names
.
issuer
|
|
{
names
:
{
blockName
:
TBS_CERTIFICATE_ISSUER
}
}
)
new
asn1js
.
Sequence
(
{
name
:
(
names
.
tbsCertificateValidity
|
|
"
tbsCertificate
.
validity
"
)
value
:
[
Time
.
schema
(
names
.
notBefore
|
|
{
names
:
{
utcTimeName
:
TBS_CERTIFICATE_NOT_BEFORE
generalTimeName
:
TBS_CERTIFICATE_NOT_BEFORE
}
}
)
Time
.
schema
(
names
.
notAfter
|
|
{
names
:
{
utcTimeName
:
TBS_CERTIFICATE_NOT_AFTER
generalTimeName
:
TBS_CERTIFICATE_NOT_AFTER
}
}
)
]
}
)
RelativeDistinguishedNames
.
schema
(
names
.
subject
|
|
{
names
:
{
blockName
:
TBS_CERTIFICATE_SUBJECT
}
}
)
PublicKeyInfo
.
schema
(
names
.
subjectPublicKeyInfo
|
|
{
names
:
{
blockName
:
TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY
}
}
)
new
asn1js
.
Primitive
(
{
name
:
(
names
.
tbsCertificateIssuerUniqueID
|
|
TBS_CERTIFICATE_ISSUER_UNIQUE_ID
)
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
1
}
}
)
new
asn1js
.
Primitive
(
{
name
:
(
names
.
tbsCertificateSubjectUniqueID
|
|
TBS_CERTIFICATE_SUBJECT_UNIQUE_ID
)
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
2
}
}
)
new
asn1js
.
Constructed
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
3
}
value
:
[
Extensions
.
schema
(
names
.
extensions
|
|
{
names
:
{
blockName
:
TBS_CERTIFICATE_EXTENSIONS
}
}
)
]
}
)
]
}
)
)
;
}
export
interface
ICertificate
{
tbs
:
ArrayBuffer
;
version
:
number
;
serialNumber
:
asn1js
.
Integer
;
signature
:
AlgorithmIdentifier
;
issuer
:
RelativeDistinguishedNames
;
notBefore
:
Time
;
notAfter
:
Time
;
subject
:
RelativeDistinguishedNames
;
subjectPublicKeyInfo
:
PublicKeyInfo
;
issuerUniqueID
?
:
ArrayBuffer
;
subjectUniqueID
?
:
ArrayBuffer
;
extensions
?
:
Extension
[
]
;
signatureAlgorithm
:
AlgorithmIdentifier
;
signatureValue
:
asn1js
.
BitString
;
}
export
type
CertificateParameters
=
PkiObjectParameters
&
Partial
<
ICertificate
>
;
export
type
CertificateSchema
=
Schema
.
SchemaParameters
<
{
tbsCertificate
?
:
TBSCertificateSchema
;
signatureAlgorithm
?
:
AlgorithmIdentifierSchema
;
signatureValue
?
:
string
;
}
>
;
export
interface
CertificateJson
{
tbs
:
string
;
version
:
number
;
serialNumber
:
asn1js
.
IntegerJson
;
signature
:
AlgorithmIdentifierJson
;
issuer
:
RelativeDistinguishedNamesJson
;
notBefore
:
TimeJson
;
notAfter
:
TimeJson
;
subject
:
RelativeDistinguishedNamesJson
;
subjectPublicKeyInfo
:
PublicKeyInfoJson
|
JsonWebKey
;
issuerUniqueID
?
:
string
;
subjectUniqueID
?
:
string
;
extensions
?
:
ExtensionJson
[
]
;
signatureAlgorithm
:
AlgorithmIdentifierJson
;
signatureValue
:
asn1js
.
BitStringJson
;
}
export
class
Certificate
extends
PkiObject
implements
ICertificate
{
public
static
override
CLASS_NAME
=
"
Certificate
"
;
public
tbsView
!
:
Uint8Array
;
public
get
tbs
(
)
:
ArrayBuffer
{
return
pvtsutils
.
BufferSourceConverter
.
toArrayBuffer
(
this
.
tbsView
)
;
}
public
set
tbs
(
value
:
ArrayBuffer
)
{
this
.
tbsView
=
new
Uint8Array
(
value
)
;
}
public
version
!
:
number
;
public
serialNumber
!
:
asn1js
.
Integer
;
public
signature
!
:
AlgorithmIdentifier
;
public
issuer
!
:
RelativeDistinguishedNames
;
public
notBefore
!
:
Time
;
public
notAfter
!
:
Time
;
public
subject
!
:
RelativeDistinguishedNames
;
public
subjectPublicKeyInfo
!
:
PublicKeyInfo
;
public
issuerUniqueID
?
:
ArrayBuffer
;
public
subjectUniqueID
?
:
ArrayBuffer
;
public
extensions
?
:
Extension
[
]
;
public
signatureAlgorithm
!
:
AlgorithmIdentifier
;
public
signatureValue
!
:
asn1js
.
BitString
;
constructor
(
parameters
:
CertificateParameters
=
{
}
)
{
super
(
)
;
this
.
tbsView
=
new
Uint8Array
(
pvutils
.
getParametersValue
(
parameters
TBS
Certificate
.
defaultValues
(
TBS
)
)
)
;
this
.
version
=
pvutils
.
getParametersValue
(
parameters
VERSION
Certificate
.
defaultValues
(
VERSION
)
)
;
this
.
serialNumber
=
pvutils
.
getParametersValue
(
parameters
SERIAL_NUMBER
Certificate
.
defaultValues
(
SERIAL_NUMBER
)
)
;
this
.
signature
=
pvutils
.
getParametersValue
(
parameters
SIGNATURE
Certificate
.
defaultValues
(
SIGNATURE
)
)
;
this
.
issuer
=
pvutils
.
getParametersValue
(
parameters
ISSUER
Certificate
.
defaultValues
(
ISSUER
)
)
;
this
.
notBefore
=
pvutils
.
getParametersValue
(
parameters
NOT_BEFORE
Certificate
.
defaultValues
(
NOT_BEFORE
)
)
;
this
.
notAfter
=
pvutils
.
getParametersValue
(
parameters
NOT_AFTER
Certificate
.
defaultValues
(
NOT_AFTER
)
)
;
this
.
subject
=
pvutils
.
getParametersValue
(
parameters
SUBJECT
Certificate
.
defaultValues
(
SUBJECT
)
)
;
this
.
subjectPublicKeyInfo
=
pvutils
.
getParametersValue
(
parameters
SUBJECT_PUBLIC_KEY_INFO
Certificate
.
defaultValues
(
SUBJECT_PUBLIC_KEY_INFO
)
)
;
if
(
ISSUER_UNIQUE_ID
in
parameters
)
{
this
.
issuerUniqueID
=
pvutils
.
getParametersValue
(
parameters
ISSUER_UNIQUE_ID
Certificate
.
defaultValues
(
ISSUER_UNIQUE_ID
)
)
;
}
if
(
SUBJECT_UNIQUE_ID
in
parameters
)
{
this
.
subjectUniqueID
=
pvutils
.
getParametersValue
(
parameters
SUBJECT_UNIQUE_ID
Certificate
.
defaultValues
(
SUBJECT_UNIQUE_ID
)
)
;
}
if
(
EXTENSIONS
in
parameters
)
{
this
.
extensions
=
pvutils
.
getParametersValue
(
parameters
EXTENSIONS
Certificate
.
defaultValues
(
EXTENSIONS
)
)
;
}
this
.
signatureAlgorithm
=
pvutils
.
getParametersValue
(
parameters
SIGNATURE_ALGORITHM
Certificate
.
defaultValues
(
SIGNATURE_ALGORITHM
)
)
;
this
.
signatureValue
=
pvutils
.
getParametersValue
(
parameters
SIGNATURE_VALUE
Certificate
.
defaultValues
(
SIGNATURE_VALUE
)
)
;
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
TBS
)
:
ArrayBuffer
;
public
static
override
defaultValues
(
memberName
:
typeof
VERSION
)
:
number
;
public
static
override
defaultValues
(
memberName
:
typeof
SERIAL_NUMBER
)
:
asn1js
.
Integer
;
public
static
override
defaultValues
(
memberName
:
typeof
SIGNATURE
)
:
AlgorithmIdentifier
;
public
static
override
defaultValues
(
memberName
:
typeof
ISSUER
)
:
RelativeDistinguishedNames
;
public
static
override
defaultValues
(
memberName
:
typeof
NOT_BEFORE
)
:
Time
;
public
static
override
defaultValues
(
memberName
:
typeof
NOT_AFTER
)
:
Time
;
public
static
override
defaultValues
(
memberName
:
typeof
SUBJECT
)
:
RelativeDistinguishedNames
;
public
static
override
defaultValues
(
memberName
:
typeof
SUBJECT_PUBLIC_KEY_INFO
)
:
PublicKeyInfo
;
public
static
override
defaultValues
(
memberName
:
typeof
ISSUER_UNIQUE_ID
)
:
ArrayBuffer
;
public
static
override
defaultValues
(
memberName
:
typeof
SUBJECT_UNIQUE_ID
)
:
ArrayBuffer
;
public
static
override
defaultValues
(
memberName
:
typeof
EXTENSIONS
)
:
Extension
[
]
;
public
static
override
defaultValues
(
memberName
:
typeof
SIGNATURE_ALGORITHM
)
:
AlgorithmIdentifier
;
public
static
override
defaultValues
(
memberName
:
typeof
SIGNATURE_VALUE
)
:
asn1js
.
BitString
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
TBS
:
return
EMPTY_BUFFER
;
case
VERSION
:
return
0
;
case
SERIAL_NUMBER
:
return
new
asn1js
.
Integer
(
)
;
case
SIGNATURE
:
return
new
AlgorithmIdentifier
(
)
;
case
ISSUER
:
return
new
RelativeDistinguishedNames
(
)
;
case
NOT_BEFORE
:
return
new
Time
(
)
;
case
NOT_AFTER
:
return
new
Time
(
)
;
case
SUBJECT
:
return
new
RelativeDistinguishedNames
(
)
;
case
SUBJECT_PUBLIC_KEY_INFO
:
return
new
PublicKeyInfo
(
)
;
case
ISSUER_UNIQUE_ID
:
return
EMPTY_BUFFER
;
case
SUBJECT_UNIQUE_ID
:
return
EMPTY_BUFFER
;
case
EXTENSIONS
:
return
[
]
;
case
SIGNATURE_ALGORITHM
:
return
new
AlgorithmIdentifier
(
)
;
case
SIGNATURE_VALUE
:
return
new
asn1js
.
BitString
(
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
CertificateSchema
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
tbsCertificate
(
names
.
tbsCertificate
)
AlgorithmIdentifier
.
schema
(
names
.
signatureAlgorithm
|
|
{
names
:
{
blockName
:
SIGNATURE_ALGORITHM
}
}
)
new
asn1js
.
BitString
(
{
name
:
(
names
.
signatureValue
|
|
SIGNATURE_VALUE
)
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
Certificate
.
schema
(
{
names
:
{
tbsCertificate
:
{
names
:
{
extensions
:
{
names
:
{
extensions
:
TBS_CERTIFICATE_EXTENSIONS
}
}
}
}
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
tbsView
=
(
asn1
.
result
.
tbsCertificate
as
asn1js
.
Sequence
)
.
valueBeforeDecodeView
;
if
(
TBS_CERTIFICATE_VERSION
in
asn1
.
result
)
this
.
version
=
asn1
.
result
[
TBS_CERTIFICATE_VERSION
]
.
valueBlock
.
valueDec
;
this
.
serialNumber
=
asn1
.
result
[
TBS_CERTIFICATE_SERIAL_NUMBER
]
;
this
.
signature
=
new
AlgorithmIdentifier
(
{
schema
:
asn1
.
result
[
TBS_CERTIFICATE_SIGNATURE
]
}
)
;
this
.
issuer
=
new
RelativeDistinguishedNames
(
{
schema
:
asn1
.
result
[
TBS_CERTIFICATE_ISSUER
]
}
)
;
this
.
notBefore
=
new
Time
(
{
schema
:
asn1
.
result
[
TBS_CERTIFICATE_NOT_BEFORE
]
}
)
;
this
.
notAfter
=
new
Time
(
{
schema
:
asn1
.
result
[
TBS_CERTIFICATE_NOT_AFTER
]
}
)
;
this
.
subject
=
new
RelativeDistinguishedNames
(
{
schema
:
asn1
.
result
[
TBS_CERTIFICATE_SUBJECT
]
}
)
;
this
.
subjectPublicKeyInfo
=
new
PublicKeyInfo
(
{
schema
:
asn1
.
result
[
TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY
]
}
)
;
if
(
TBS_CERTIFICATE_ISSUER_UNIQUE_ID
in
asn1
.
result
)
this
.
issuerUniqueID
=
asn1
.
result
[
TBS_CERTIFICATE_ISSUER_UNIQUE_ID
]
.
valueBlock
.
valueHex
;
if
(
TBS_CERTIFICATE_SUBJECT_UNIQUE_ID
in
asn1
.
result
)
this
.
subjectUniqueID
=
asn1
.
result
[
TBS_CERTIFICATE_SUBJECT_UNIQUE_ID
]
.
valueBlock
.
valueHex
;
if
(
TBS_CERTIFICATE_EXTENSIONS
in
asn1
.
result
)
this
.
extensions
=
Array
.
from
(
asn1
.
result
[
TBS_CERTIFICATE_EXTENSIONS
]
element
=
>
new
Extension
(
{
schema
:
element
}
)
)
;
this
.
signatureAlgorithm
=
new
AlgorithmIdentifier
(
{
schema
:
asn1
.
result
.
signatureAlgorithm
}
)
;
this
.
signatureValue
=
asn1
.
result
.
signatureValue
;
}
public
encodeTBS
(
)
:
asn1js
.
Sequence
{
const
outputArray
=
[
]
;
if
(
(
VERSION
in
this
)
&
&
(
this
.
version
!
=
=
Certificate
.
defaultValues
(
VERSION
)
)
)
{
outputArray
.
push
(
new
asn1js
.
Constructed
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
0
}
value
:
[
new
asn1js
.
Integer
(
{
value
:
this
.
version
}
)
]
}
)
)
;
}
outputArray
.
push
(
this
.
serialNumber
)
;
outputArray
.
push
(
this
.
signature
.
toSchema
(
)
)
;
outputArray
.
push
(
this
.
issuer
.
toSchema
(
)
)
;
outputArray
.
push
(
new
asn1js
.
Sequence
(
{
value
:
[
this
.
notBefore
.
toSchema
(
)
this
.
notAfter
.
toSchema
(
)
]
}
)
)
;
outputArray
.
push
(
this
.
subject
.
toSchema
(
)
)
;
outputArray
.
push
(
this
.
subjectPublicKeyInfo
.
toSchema
(
)
)
;
if
(
this
.
issuerUniqueID
)
{
outputArray
.
push
(
new
asn1js
.
Primitive
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
1
}
valueHex
:
this
.
issuerUniqueID
}
)
)
;
}
if
(
this
.
subjectUniqueID
)
{
outputArray
.
push
(
new
asn1js
.
Primitive
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
2
}
valueHex
:
this
.
subjectUniqueID
}
)
)
;
}
if
(
this
.
extensions
)
{
outputArray
.
push
(
new
asn1js
.
Constructed
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
3
}
value
:
[
new
asn1js
.
Sequence
(
{
value
:
Array
.
from
(
this
.
extensions
o
=
>
o
.
toSchema
(
)
)
}
)
]
}
)
)
;
}
return
(
new
asn1js
.
Sequence
(
{
value
:
outputArray
}
)
)
;
}
public
toSchema
(
encodeFlag
=
false
)
:
asn1js
.
Sequence
{
let
tbsSchema
:
asn1js
.
AsnType
;
if
(
encodeFlag
=
=
=
false
)
{
if
(
!
this
.
tbsView
.
byteLength
)
{
return
Certificate
.
schema
(
)
.
value
[
0
]
;
}
const
asn1
=
asn1js
.
fromBER
(
this
.
tbsView
)
;
AsnError
.
assert
(
asn1
"
TBS
Certificate
"
)
;
tbsSchema
=
asn1
.
result
;
}
else
{
tbsSchema
=
this
.
encodeTBS
(
)
;
}
return
(
new
asn1js
.
Sequence
(
{
value
:
[
tbsSchema
this
.
signatureAlgorithm
.
toSchema
(
)
this
.
signatureValue
]
}
)
)
;
}
public
toJSON
(
)
:
CertificateJson
{
const
res
:
CertificateJson
=
{
tbs
:
pvtsutils
.
Convert
.
ToHex
(
this
.
tbsView
)
version
:
this
.
version
serialNumber
:
this
.
serialNumber
.
toJSON
(
)
signature
:
this
.
signature
.
toJSON
(
)
issuer
:
this
.
issuer
.
toJSON
(
)
notBefore
:
this
.
notBefore
.
toJSON
(
)
notAfter
:
this
.
notAfter
.
toJSON
(
)
subject
:
this
.
subject
.
toJSON
(
)
subjectPublicKeyInfo
:
this
.
subjectPublicKeyInfo
.
toJSON
(
)
signatureAlgorithm
:
this
.
signatureAlgorithm
.
toJSON
(
)
signatureValue
:
this
.
signatureValue
.
toJSON
(
)
}
;
if
(
(
VERSION
in
this
)
&
&
(
this
.
version
!
=
=
Certificate
.
defaultValues
(
VERSION
)
)
)
{
res
.
version
=
this
.
version
;
}
if
(
this
.
issuerUniqueID
)
{
res
.
issuerUniqueID
=
pvtsutils
.
Convert
.
ToHex
(
this
.
issuerUniqueID
)
;
}
if
(
this
.
subjectUniqueID
)
{
res
.
subjectUniqueID
=
pvtsutils
.
Convert
.
ToHex
(
this
.
subjectUniqueID
)
;
}
if
(
this
.
extensions
)
{
res
.
extensions
=
Array
.
from
(
this
.
extensions
o
=
>
o
.
toJSON
(
)
)
;
}
return
res
;
}
public
async
getPublicKey
(
parameters
?
:
CryptoEnginePublicKeyParams
crypto
=
common
.
getCrypto
(
true
)
)
:
Promise
<
CryptoKey
>
{
return
crypto
.
getPublicKey
(
this
.
subjectPublicKeyInfo
this
.
signatureAlgorithm
parameters
)
;
}
public
async
getKeyHash
(
hashAlgorithm
=
"
SHA
-
1
"
crypto
=
common
.
getCrypto
(
true
)
)
:
Promise
<
ArrayBuffer
>
{
return
crypto
.
digest
(
{
name
:
hashAlgorithm
}
this
.
subjectPublicKeyInfo
.
subjectPublicKey
.
valueBlock
.
valueHexView
)
;
}
public
async
sign
(
privateKey
:
CryptoKey
hashAlgorithm
=
"
SHA
-
1
"
crypto
=
common
.
getCrypto
(
true
)
)
:
Promise
<
void
>
{
if
(
!
privateKey
)
{
throw
new
Error
(
"
Need
to
provide
a
private
key
for
signing
"
)
;
}
const
signatureParameters
=
await
crypto
.
getSignatureParameters
(
privateKey
hashAlgorithm
)
;
const
parameters
=
signatureParameters
.
parameters
;
this
.
signature
=
signatureParameters
.
signatureAlgorithm
;
this
.
signatureAlgorithm
=
signatureParameters
.
signatureAlgorithm
;
this
.
tbsView
=
new
Uint8Array
(
this
.
encodeTBS
(
)
.
toBER
(
)
)
;
const
signature
=
await
crypto
.
signWithPrivateKey
(
this
.
tbsView
privateKey
parameters
as
any
)
;
this
.
signatureValue
=
new
asn1js
.
BitString
(
{
valueHex
:
signature
}
)
;
}
public
async
verify
(
issuerCertificate
?
:
Certificate
crypto
=
common
.
getCrypto
(
true
)
)
:
Promise
<
boolean
>
{
let
subjectPublicKeyInfo
:
PublicKeyInfo
|
undefined
;
if
(
issuerCertificate
)
{
subjectPublicKeyInfo
=
issuerCertificate
.
subjectPublicKeyInfo
;
}
else
if
(
this
.
issuer
.
isEqual
(
this
.
subject
)
)
{
subjectPublicKeyInfo
=
this
.
subjectPublicKeyInfo
;
}
if
(
!
(
subjectPublicKeyInfo
instanceof
PublicKeyInfo
)
)
{
throw
new
Error
(
"
Please
provide
issuer
certificate
as
a
parameter
"
)
;
}
return
crypto
.
verifyWithPublicKey
(
this
.
tbsView
this
.
signatureValue
subjectPublicKeyInfo
this
.
signatureAlgorithm
)
;
}
}
export
function
checkCA
(
cert
:
Certificate
signerCert
:
Certificate
|
null
=
null
)
:
Certificate
|
null
{
if
(
signerCert
&
&
cert
.
issuer
.
isEqual
(
signerCert
.
issuer
)
&
&
cert
.
serialNumber
.
isEqual
(
signerCert
.
serialNumber
)
)
{
return
null
;
}
let
isCA
=
false
;
if
(
cert
.
extensions
)
{
for
(
const
extension
of
cert
.
extensions
)
{
if
(
extension
.
extnID
=
=
=
id_BasicConstraints
&
&
extension
.
parsedValue
instanceof
BasicConstraints
)
{
if
(
extension
.
parsedValue
.
cA
)
{
isCA
=
true
;
break
;
}
}
}
}
if
(
isCA
)
{
return
cert
;
}
return
null
;
}
