import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
RESPONSE_TYPE
=
"
responseType
"
;
const
RESPONSE
=
"
response
"
;
const
CLEAR_PROPS
=
[
RESPONSE_TYPE
RESPONSE
]
;
export
interface
IResponseBytes
{
responseType
:
string
;
response
:
asn1js
.
OctetString
;
}
export
interface
ResponseBytesJson
{
responseType
:
string
;
response
:
asn1js
.
OctetStringJson
;
}
export
type
ResponseBytesParameters
=
PkiObjectParameters
&
Partial
<
IResponseBytes
>
;
export
type
ResponseBytesSchema
=
Schema
.
SchemaParameters
<
{
responseType
?
:
string
;
response
?
:
string
;
}
>
;
export
class
ResponseBytes
extends
PkiObject
implements
IResponseBytes
{
public
static
override
CLASS_NAME
=
"
ResponseBytes
"
;
public
responseType
!
:
string
;
public
response
!
:
asn1js
.
OctetString
;
constructor
(
parameters
:
ResponseBytesParameters
=
{
}
)
{
super
(
)
;
this
.
responseType
=
pvutils
.
getParametersValue
(
parameters
RESPONSE_TYPE
ResponseBytes
.
defaultValues
(
RESPONSE_TYPE
)
)
;
this
.
response
=
pvutils
.
getParametersValue
(
parameters
RESPONSE
ResponseBytes
.
defaultValues
(
RESPONSE
)
)
;
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
RESPONSE_TYPE
)
:
string
;
public
static
override
defaultValues
(
memberName
:
typeof
RESPONSE
)
:
asn1js
.
OctetString
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
RESPONSE_TYPE
:
return
EMPTY_STRING
;
case
RESPONSE
:
return
new
asn1js
.
OctetString
(
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
{
switch
(
memberName
)
{
case
RESPONSE_TYPE
:
return
(
memberValue
=
=
=
EMPTY_STRING
)
;
case
RESPONSE
:
return
(
memberValue
.
isEqual
(
ResponseBytes
.
defaultValues
(
memberName
)
)
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
ResponseBytesSchema
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
name
:
(
names
.
responseType
|
|
EMPTY_STRING
)
}
)
new
asn1js
.
OctetString
(
{
name
:
(
names
.
response
|
|
EMPTY_STRING
)
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
ResponseBytes
.
schema
(
{
names
:
{
responseType
:
RESPONSE_TYPE
response
:
RESPONSE
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
responseType
=
asn1
.
result
.
responseType
.
valueBlock
.
toString
(
)
;
this
.
response
=
asn1
.
result
.
response
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
value
:
this
.
responseType
}
)
this
.
response
]
}
)
)
;
}
public
toJSON
(
)
:
ResponseBytesJson
{
return
{
responseType
:
this
.
responseType
response
:
this
.
response
.
toJSON
(
)
}
;
}
}
