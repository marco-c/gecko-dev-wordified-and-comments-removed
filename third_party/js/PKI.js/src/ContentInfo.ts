import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
id_ContentType_Data
id_ContentType_EncryptedData
id_ContentType_EnvelopedData
id_ContentType_SignedData
}
from
"
.
/
ObjectIdentifiers
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
CONTENT_TYPE
=
"
contentType
"
;
const
CONTENT
=
"
content
"
;
const
CLEAR_PROPS
=
[
CONTENT_TYPE
CONTENT
]
;
export
interface
IContentInfo
{
contentType
:
string
;
content
:
any
;
}
export
type
ContentInfoParameters
=
PkiObjectParameters
&
Partial
<
IContentInfo
>
;
export
type
ContentInfoSchema
=
Schema
.
SchemaParameters
<
{
contentType
?
:
string
;
content
?
:
string
;
}
>
;
export
interface
ContentInfoJson
{
contentType
:
string
;
content
?
:
any
;
}
export
class
ContentInfo
extends
PkiObject
implements
IContentInfo
{
public
static
override
CLASS_NAME
=
"
ContentInfo
"
;
public
static
readonly
DATA
=
id_ContentType_Data
;
public
static
readonly
SIGNED_DATA
=
id_ContentType_SignedData
;
public
static
readonly
ENVELOPED_DATA
=
id_ContentType_EnvelopedData
;
public
static
readonly
ENCRYPTED_DATA
=
id_ContentType_EncryptedData
;
public
contentType
!
:
string
;
public
content
:
any
;
constructor
(
parameters
:
ContentInfoParameters
=
{
}
)
{
super
(
)
;
this
.
contentType
=
pvutils
.
getParametersValue
(
parameters
CONTENT_TYPE
ContentInfo
.
defaultValues
(
CONTENT_TYPE
)
)
;
this
.
content
=
pvutils
.
getParametersValue
(
parameters
CONTENT
ContentInfo
.
defaultValues
(
CONTENT
)
)
;
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
CONTENT_TYPE
)
:
string
;
public
static
override
defaultValues
(
memberName
:
typeof
CONTENT
)
:
any
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
CONTENT_TYPE
:
return
EMPTY_STRING
;
case
CONTENT
:
return
new
asn1js
.
Any
(
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
static
compareWithDefault
<
T
>
(
memberName
:
string
memberValue
:
T
)
:
memberValue
is
T
{
switch
(
memberName
)
{
case
CONTENT_TYPE
:
return
(
typeof
memberValue
=
=
=
"
string
"
&
&
memberValue
=
=
=
this
.
defaultValues
(
CONTENT_TYPE
)
)
;
case
CONTENT
:
return
(
memberValue
instanceof
asn1js
.
Any
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
ContentInfoSchema
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
if
(
(
"
optional
"
in
names
)
=
=
=
false
)
{
names
.
optional
=
false
;
}
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
"
ContentInfo
"
)
optional
:
names
.
optional
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
name
:
(
names
.
contentType
|
|
CONTENT_TYPE
)
}
)
new
asn1js
.
Constructed
(
{
idBlock
:
{
tagClass
:
3
tagNumber
:
0
}
value
:
[
new
asn1js
.
Any
(
{
name
:
(
names
.
content
|
|
CONTENT
)
}
)
]
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
ContentInfo
.
schema
(
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
contentType
=
asn1
.
result
.
contentType
.
valueBlock
.
toString
(
)
;
this
.
content
=
asn1
.
result
.
content
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
value
:
this
.
contentType
}
)
new
asn1js
.
Constructed
(
{
idBlock
:
{
tagClass
:
3
tagNumber
:
0
}
value
:
[
this
.
content
]
}
)
]
}
)
)
;
}
public
toJSON
(
)
:
ContentInfoJson
{
const
object
:
ContentInfoJson
=
{
contentType
:
this
.
contentType
}
;
if
(
!
(
this
.
content
instanceof
asn1js
.
Any
)
)
{
object
.
content
=
this
.
content
.
toJSON
(
)
;
}
return
object
;
}
}
