import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
GeneralName
GeneralNameJson
GeneralNameSchema
}
from
"
.
/
GeneralName
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
ACCESS_METHOD
=
"
accessMethod
"
;
const
ACCESS_LOCATION
=
"
accessLocation
"
;
const
CLEAR_PROPS
=
[
ACCESS_METHOD
ACCESS_LOCATION
]
;
export
interface
IAccessDescription
{
accessMethod
:
string
;
accessLocation
:
GeneralName
;
}
export
type
AccessDescriptionParameters
=
PkiObjectParameters
&
Partial
<
IAccessDescription
>
;
export
interface
AccessDescriptionJson
{
accessMethod
:
string
;
accessLocation
:
GeneralNameJson
;
}
export
class
AccessDescription
extends
PkiObject
implements
IAccessDescription
{
public
static
override
CLASS_NAME
=
"
AccessDescription
"
;
public
accessMethod
!
:
string
;
public
accessLocation
!
:
GeneralName
;
constructor
(
parameters
:
AccessDescriptionParameters
=
{
}
)
{
super
(
)
;
this
.
accessMethod
=
pvutils
.
getParametersValue
(
parameters
ACCESS_METHOD
AccessDescription
.
defaultValues
(
ACCESS_METHOD
)
)
;
this
.
accessLocation
=
pvutils
.
getParametersValue
(
parameters
ACCESS_LOCATION
AccessDescription
.
defaultValues
(
ACCESS_LOCATION
)
)
;
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
ACCESS_METHOD
)
:
string
;
public
static
override
defaultValues
(
memberName
:
typeof
ACCESS_LOCATION
)
:
GeneralName
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
ACCESS_METHOD
:
return
EMPTY_STRING
;
case
ACCESS_LOCATION
:
return
new
GeneralName
(
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
static
override
schema
(
parameters
:
Schema
.
SchemaParameters
<
{
accessMethod
?
:
string
;
accessLocation
?
:
GeneralNameSchema
;
}
>
=
{
}
)
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
name
:
(
names
.
accessMethod
|
|
EMPTY_STRING
)
}
)
GeneralName
.
schema
(
names
.
accessLocation
|
|
{
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
AccessDescription
.
schema
(
{
names
:
{
accessMethod
:
ACCESS_METHOD
accessLocation
:
{
names
:
{
blockName
:
ACCESS_LOCATION
}
}
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
accessMethod
=
asn1
.
result
.
accessMethod
.
valueBlock
.
toString
(
)
;
this
.
accessLocation
=
new
GeneralName
(
{
schema
:
asn1
.
result
.
accessLocation
}
)
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
value
:
this
.
accessMethod
}
)
this
.
accessLocation
.
toSchema
(
)
]
}
)
)
;
}
public
toJSON
(
)
:
AccessDescriptionJson
{
return
{
accessMethod
:
this
.
accessMethod
accessLocation
:
this
.
accessLocation
.
toJSON
(
)
}
;
}
}
