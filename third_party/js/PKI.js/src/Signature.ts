import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
AlgorithmIdentifier
AlgorithmIdentifierJson
AlgorithmIdentifierSchema
}
from
"
.
/
AlgorithmIdentifier
"
;
import
{
Certificate
CertificateJson
}
from
"
.
/
Certificate
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
SIGNATURE_ALGORITHM
=
"
signatureAlgorithm
"
;
const
SIGNATURE
=
"
signature
"
;
const
CERTS
=
"
certs
"
;
export
interface
ISignature
{
signatureAlgorithm
:
AlgorithmIdentifier
;
signature
:
asn1js
.
BitString
;
certs
?
:
Certificate
[
]
;
}
export
interface
SignatureJson
{
signatureAlgorithm
:
AlgorithmIdentifierJson
;
signature
:
asn1js
.
BitStringJson
;
certs
?
:
CertificateJson
[
]
;
}
export
type
SignatureParameters
=
PkiObjectParameters
&
Partial
<
ISignature
>
;
export
type
SignatureSchema
=
Schema
.
SchemaParameters
<
{
signatureAlgorithm
?
:
AlgorithmIdentifierSchema
;
signature
?
:
string
;
certs
?
:
string
;
}
>
;
export
class
Signature
extends
PkiObject
implements
ISignature
{
public
static
override
CLASS_NAME
=
"
Signature
"
;
public
signatureAlgorithm
!
:
AlgorithmIdentifier
;
public
signature
!
:
asn1js
.
BitString
;
public
certs
?
:
Certificate
[
]
;
constructor
(
parameters
:
SignatureParameters
=
{
}
)
{
super
(
)
;
this
.
signatureAlgorithm
=
pvutils
.
getParametersValue
(
parameters
SIGNATURE_ALGORITHM
Signature
.
defaultValues
(
SIGNATURE_ALGORITHM
)
)
;
this
.
signature
=
pvutils
.
getParametersValue
(
parameters
SIGNATURE
Signature
.
defaultValues
(
SIGNATURE
)
)
;
if
(
CERTS
in
parameters
)
{
this
.
certs
=
pvutils
.
getParametersValue
(
parameters
CERTS
Signature
.
defaultValues
(
CERTS
)
)
;
}
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
SIGNATURE_ALGORITHM
)
:
AlgorithmIdentifier
;
public
static
override
defaultValues
(
memberName
:
typeof
SIGNATURE
)
:
asn1js
.
BitString
;
public
static
override
defaultValues
(
memberName
:
typeof
CERTS
)
:
Certificate
[
]
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
SIGNATURE_ALGORITHM
:
return
new
AlgorithmIdentifier
(
)
;
case
SIGNATURE
:
return
new
asn1js
.
BitString
(
)
;
case
CERTS
:
return
[
]
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
{
switch
(
memberName
)
{
case
SIGNATURE_ALGORITHM
:
return
(
(
memberValue
.
algorithmId
=
=
=
EMPTY_STRING
)
&
&
(
(
"
algorithmParams
"
in
memberValue
)
=
=
=
false
)
)
;
case
SIGNATURE
:
return
(
memberValue
.
isEqual
(
Signature
.
defaultValues
(
memberName
)
)
)
;
case
CERTS
:
return
(
memberValue
.
length
=
=
=
0
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
SignatureSchema
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
AlgorithmIdentifier
.
schema
(
names
.
signatureAlgorithm
|
|
{
}
)
new
asn1js
.
BitString
(
{
name
:
(
names
.
signature
|
|
EMPTY_STRING
)
}
)
new
asn1js
.
Constructed
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
0
}
value
:
[
new
asn1js
.
Sequence
(
{
value
:
[
new
asn1js
.
Repeated
(
{
name
:
(
names
.
certs
|
|
EMPTY_STRING
)
value
:
Certificate
.
schema
(
{
}
)
}
)
]
}
)
]
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
[
SIGNATURE_ALGORITHM
SIGNATURE
CERTS
]
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
Signature
.
schema
(
{
names
:
{
signatureAlgorithm
:
{
names
:
{
blockName
:
SIGNATURE_ALGORITHM
}
}
signature
:
SIGNATURE
certs
:
CERTS
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
signatureAlgorithm
=
new
AlgorithmIdentifier
(
{
schema
:
asn1
.
result
.
signatureAlgorithm
}
)
;
this
.
signature
=
asn1
.
result
.
signature
;
if
(
CERTS
in
asn1
.
result
)
this
.
certs
=
Array
.
from
(
asn1
.
result
.
certs
element
=
>
new
Certificate
(
{
schema
:
element
}
)
)
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
const
outputArray
=
[
]
;
outputArray
.
push
(
this
.
signatureAlgorithm
.
toSchema
(
)
)
;
outputArray
.
push
(
this
.
signature
)
;
if
(
this
.
certs
)
{
outputArray
.
push
(
new
asn1js
.
Constructed
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
0
}
value
:
[
new
asn1js
.
Sequence
(
{
value
:
Array
.
from
(
this
.
certs
o
=
>
o
.
toSchema
(
)
)
}
)
]
}
)
)
;
}
return
(
new
asn1js
.
Sequence
(
{
value
:
outputArray
}
)
)
;
}
public
toJSON
(
)
:
SignatureJson
{
const
res
:
SignatureJson
=
{
signatureAlgorithm
:
this
.
signatureAlgorithm
.
toJSON
(
)
signature
:
this
.
signature
.
toJSON
(
)
}
;
if
(
this
.
certs
)
{
res
.
certs
=
Array
.
from
(
this
.
certs
o
=
>
o
.
toJSON
(
)
)
;
}
return
res
;
}
}
