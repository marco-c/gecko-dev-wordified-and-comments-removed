import
type
*
as
asn1js
from
"
asn1js
"
;
import
type
{
AlgorithmIdentifier
}
from
"
.
.
/
AlgorithmIdentifier
"
;
import
type
{
EncryptedContentInfo
}
from
"
.
.
/
EncryptedContentInfo
"
;
import
type
{
PublicKeyInfo
}
from
"
.
.
/
PublicKeyInfo
"
;
export
type
CryptoEngineAlgorithmOperation
=
"
sign
"
|
"
encrypt
"
|
"
generateKey
"
|
"
importKey
"
|
"
exportKey
"
|
"
verify
"
;
export
interface
CryptoEngineAlgorithmParams
{
algorithm
:
Algorithm
|
object
;
usages
:
KeyUsage
[
]
;
}
export
interface
CryptoEngineSignatureParams
{
signatureAlgorithm
:
AlgorithmIdentifier
;
parameters
:
CryptoEngineAlgorithmParams
;
}
export
interface
CryptoEngineSignWithPrivateKeyParams
{
algorithm
:
Algorithm
;
}
export
interface
CryptoEnginePublicKeyParams
{
algorithm
:
CryptoEngineAlgorithmParams
;
}
export
type
ContentEncryptionAesCbcParams
=
AesCbcParams
&
AesDerivedKeyParams
;
export
type
ContentEncryptionAesGcmParams
=
AesGcmParams
&
AesDerivedKeyParams
;
export
type
ContentEncryptionAlgorithm
=
ContentEncryptionAesCbcParams
|
ContentEncryptionAesGcmParams
;
export
interface
CryptoEngineEncryptParams
{
password
:
ArrayBuffer
;
contentEncryptionAlgorithm
:
ContentEncryptionAlgorithm
;
hmacHashAlgorithm
:
string
;
iterationCount
:
number
;
contentToEncrypt
:
ArrayBuffer
;
contentType
:
string
;
}
export
interface
CryptoEngineDecryptParams
{
password
:
ArrayBuffer
;
encryptedContentInfo
:
EncryptedContentInfo
;
}
export
interface
CryptoEngineStampDataWithPasswordParams
{
password
:
ArrayBuffer
;
hashAlgorithm
:
string
;
salt
:
ArrayBuffer
;
iterationCount
:
number
;
contentToStamp
:
ArrayBuffer
;
}
export
interface
CryptoEngineVerifyDataStampedWithPasswordParams
{
password
:
ArrayBuffer
;
hashAlgorithm
:
string
;
salt
:
ArrayBuffer
;
iterationCount
:
number
;
contentToVerify
:
ArrayBuffer
;
signatureToVerify
:
ArrayBuffer
;
}
export
interface
ICryptoEngine
extends
SubtleCrypto
{
name
:
string
;
crypto
:
Crypto
;
subtle
:
SubtleCrypto
;
getRandomValues
<
T
extends
ArrayBufferView
|
null
>
(
array
:
T
)
:
T
;
getOIDByAlgorithm
(
algorithm
:
Algorithm
safety
?
:
boolean
target
?
:
string
)
:
string
;
getAlgorithmParameters
(
algorithmName
:
string
operation
:
CryptoEngineAlgorithmOperation
)
:
CryptoEngineAlgorithmParams
;
getAlgorithmByOID
<
T
extends
Algorithm
=
Algorithm
>
(
oid
:
string
safety
?
:
boolean
target
?
:
string
)
:
T
|
object
;
getAlgorithmByOID
<
T
extends
Algorithm
=
Algorithm
>
(
oid
:
string
safety
:
true
target
?
:
string
)
:
T
;
getHashAlgorithm
(
signatureAlgorithm
:
AlgorithmIdentifier
)
:
string
;
getSignatureParameters
(
privateKey
:
CryptoKey
hashAlgorithm
?
:
string
)
:
Promise
<
CryptoEngineSignatureParams
>
;
signWithPrivateKey
(
data
:
BufferSource
privateKey
:
CryptoKey
parameters
:
CryptoEngineSignWithPrivateKeyParams
)
:
Promise
<
ArrayBuffer
>
;
verifyWithPublicKey
(
data
:
BufferSource
signature
:
asn1js
.
BitString
|
asn1js
.
OctetString
publicKeyInfo
:
PublicKeyInfo
signatureAlgorithm
:
AlgorithmIdentifier
shaAlgorithm
?
:
string
)
:
Promise
<
boolean
>
;
getPublicKey
(
publicKeyInfo
:
PublicKeyInfo
signatureAlgorithm
:
AlgorithmIdentifier
parameters
?
:
CryptoEnginePublicKeyParams
)
:
Promise
<
CryptoKey
>
;
encryptEncryptedContentInfo
(
parameters
:
CryptoEngineEncryptParams
)
:
Promise
<
EncryptedContentInfo
>
;
decryptEncryptedContentInfo
(
parameters
:
CryptoEngineDecryptParams
)
:
Promise
<
ArrayBuffer
>
;
stampDataWithPassword
(
parameters
:
CryptoEngineStampDataWithPasswordParams
)
:
Promise
<
ArrayBuffer
>
;
verifyDataStampedWithPassword
(
parameters
:
CryptoEngineVerifyDataStampedWithPasswordParams
)
:
Promise
<
boolean
>
;
}
export
interface
CryptoEngineParameters
{
name
?
:
string
;
crypto
:
Crypto
;
subtle
?
:
SubtleCrypto
;
}
export
interface
CryptoEngineConstructor
{
new
(
params
:
CryptoEngineParameters
)
:
ICryptoEngine
;
}
