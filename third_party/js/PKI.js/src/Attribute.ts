import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
TYPE
=
"
type
"
;
const
VALUES
=
"
values
"
;
const
CLEAR_PROPS
=
[
TYPE
VALUES
]
;
export
interface
IAttribute
{
type
:
string
;
values
:
any
[
]
;
}
export
type
AttributeParameters
=
PkiObjectParameters
&
Partial
<
IAttribute
>
;
export
type
AttributeSchema
=
Schema
.
SchemaParameters
<
{
setName
?
:
string
;
type
?
:
string
;
values
?
:
string
;
}
>
;
export
interface
AttributeJson
{
type
:
string
;
values
:
any
[
]
;
}
export
class
Attribute
extends
PkiObject
implements
IAttribute
{
public
static
override
CLASS_NAME
=
"
Attribute
"
;
public
type
!
:
string
;
public
values
!
:
any
[
]
;
constructor
(
parameters
:
AttributeParameters
=
{
}
)
{
super
(
)
;
this
.
type
=
pvutils
.
getParametersValue
(
parameters
TYPE
Attribute
.
defaultValues
(
TYPE
)
)
;
this
.
values
=
pvutils
.
getParametersValue
(
parameters
VALUES
Attribute
.
defaultValues
(
VALUES
)
)
;
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
TYPE
)
:
string
;
public
static
override
defaultValues
(
memberName
:
typeof
VALUES
)
:
any
[
]
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
TYPE
:
return
EMPTY_STRING
;
case
VALUES
:
return
[
]
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
{
switch
(
memberName
)
{
case
TYPE
:
return
(
memberValue
=
=
=
EMPTY_STRING
)
;
case
VALUES
:
return
(
memberValue
.
length
=
=
=
0
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
AttributeSchema
=
{
}
)
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
name
:
(
names
.
type
|
|
EMPTY_STRING
)
}
)
new
asn1js
.
Set
(
{
name
:
(
names
.
setName
|
|
EMPTY_STRING
)
value
:
[
new
asn1js
.
Repeated
(
{
name
:
(
names
.
values
|
|
EMPTY_STRING
)
value
:
new
asn1js
.
Any
(
)
}
)
]
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
Attribute
.
schema
(
{
names
:
{
type
:
TYPE
values
:
VALUES
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
type
=
asn1
.
result
.
type
.
valueBlock
.
toString
(
)
;
this
.
values
=
asn1
.
result
.
values
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
value
:
this
.
type
}
)
new
asn1js
.
Set
(
{
value
:
this
.
values
}
)
]
}
)
)
;
}
public
toJSON
(
)
:
AttributeJson
{
return
{
type
:
this
.
type
values
:
Array
.
from
(
this
.
values
o
=
>
o
.
toJSON
(
)
)
}
;
}
}
