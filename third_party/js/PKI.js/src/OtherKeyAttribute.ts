import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
KEY_ATTR_ID
=
"
keyAttrId
"
;
const
KEY_ATTR
=
"
keyAttr
"
;
const
CLEAR_PROPS
=
[
KEY_ATTR_ID
KEY_ATTR
]
;
export
interface
IOtherKeyAttribute
{
keyAttrId
:
string
;
keyAttr
?
:
any
;
}
export
interface
OtherKeyAttributeJson
{
keyAttrId
:
string
;
keyAttr
?
:
any
;
}
export
type
OtherKeyAttributeParameters
=
PkiObjectParameters
&
Partial
<
IOtherKeyAttribute
>
;
export
type
OtherKeyAttributeSchema
=
Schema
.
SchemaType
;
export
class
OtherKeyAttribute
extends
PkiObject
implements
IOtherKeyAttribute
{
public
static
override
CLASS_NAME
=
"
OtherKeyAttribute
"
;
public
keyAttrId
!
:
string
;
public
keyAttr
?
:
any
;
constructor
(
parameters
:
OtherKeyAttributeParameters
=
{
}
)
{
super
(
)
;
this
.
keyAttrId
=
pvutils
.
getParametersValue
(
parameters
KEY_ATTR_ID
OtherKeyAttribute
.
defaultValues
(
KEY_ATTR_ID
)
)
;
if
(
KEY_ATTR
in
parameters
)
{
this
.
keyAttr
=
pvutils
.
getParametersValue
(
parameters
KEY_ATTR
OtherKeyAttribute
.
defaultValues
(
KEY_ATTR
)
)
;
}
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
KEY_ATTR_ID
)
:
string
;
public
static
override
defaultValues
(
memberName
:
typeof
KEY_ATTR
)
:
any
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
KEY_ATTR_ID
:
return
EMPTY_STRING
;
case
KEY_ATTR
:
return
{
}
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
<
T
>
(
memberName
:
string
memberValue
:
T
)
:
memberValue
is
T
{
switch
(
memberName
)
{
case
KEY_ATTR_ID
:
return
(
typeof
memberValue
=
=
=
"
string
"
&
&
memberValue
=
=
=
EMPTY_STRING
)
;
case
KEY_ATTR
:
return
(
Object
.
keys
(
memberValue
)
.
length
=
=
=
0
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
OtherKeyAttributeSchema
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
optional
:
(
names
.
optional
|
|
true
)
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
name
:
(
names
.
keyAttrId
|
|
EMPTY_STRING
)
}
)
new
asn1js
.
Any
(
{
optional
:
true
name
:
(
names
.
keyAttr
|
|
EMPTY_STRING
)
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
OtherKeyAttribute
.
schema
(
{
names
:
{
keyAttrId
:
KEY_ATTR_ID
keyAttr
:
KEY_ATTR
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
keyAttrId
=
asn1
.
result
.
keyAttrId
.
valueBlock
.
toString
(
)
;
if
(
KEY_ATTR
in
asn1
.
result
)
{
this
.
keyAttr
=
asn1
.
result
.
keyAttr
;
}
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
const
outputArray
=
[
]
;
outputArray
.
push
(
new
asn1js
.
ObjectIdentifier
(
{
value
:
this
.
keyAttrId
}
)
)
;
if
(
KEY_ATTR
in
this
)
{
outputArray
.
push
(
this
.
keyAttr
)
;
}
return
(
new
asn1js
.
Sequence
(
{
value
:
outputArray
}
)
)
;
}
public
toJSON
(
)
:
OtherKeyAttributeJson
{
const
res
:
OtherKeyAttributeJson
=
{
keyAttrId
:
this
.
keyAttrId
}
;
if
(
KEY_ATTR
in
this
)
{
res
.
keyAttr
=
this
.
keyAttr
.
toJSON
(
)
;
}
return
res
;
}
}
