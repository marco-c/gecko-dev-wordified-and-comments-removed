import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
PATH_LENGTH_CONSTRAINT
=
"
pathLenConstraint
"
;
const
CA
=
"
cA
"
;
export
interface
IBasicConstraints
{
cA
:
boolean
;
pathLenConstraint
?
:
number
|
asn1js
.
Integer
;
}
export
type
BasicConstraintsParameters
=
PkiObjectParameters
&
Partial
<
IBasicConstraints
>
;
export
interface
BasicConstraintsJson
{
cA
?
:
boolean
;
pathLenConstraint
?
:
asn1js
.
IntegerJson
|
number
;
}
export
class
BasicConstraints
extends
PkiObject
implements
IBasicConstraints
{
public
static
override
CLASS_NAME
=
"
BasicConstraints
"
;
public
cA
!
:
boolean
;
public
pathLenConstraint
?
:
number
|
asn1js
.
Integer
;
constructor
(
parameters
:
BasicConstraintsParameters
=
{
}
)
{
super
(
)
;
this
.
cA
=
pvutils
.
getParametersValue
(
parameters
CA
false
)
;
if
(
PATH_LENGTH_CONSTRAINT
in
parameters
)
{
this
.
pathLenConstraint
=
pvutils
.
getParametersValue
(
parameters
PATH_LENGTH_CONSTRAINT
0
)
;
}
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
CA
)
:
boolean
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
CA
:
return
false
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
static
override
schema
(
parameters
:
Schema
.
SchemaParameters
<
{
cA
?
:
string
;
pathLenConstraint
?
:
string
;
}
>
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
new
asn1js
.
Boolean
(
{
optional
:
true
name
:
(
names
.
cA
|
|
EMPTY_STRING
)
}
)
new
asn1js
.
Integer
(
{
optional
:
true
name
:
(
names
.
pathLenConstraint
|
|
EMPTY_STRING
)
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
[
CA
PATH_LENGTH_CONSTRAINT
]
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
BasicConstraints
.
schema
(
{
names
:
{
cA
:
CA
pathLenConstraint
:
PATH_LENGTH_CONSTRAINT
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
if
(
CA
in
asn1
.
result
)
{
this
.
cA
=
asn1
.
result
.
cA
.
valueBlock
.
value
;
}
if
(
PATH_LENGTH_CONSTRAINT
in
asn1
.
result
)
{
if
(
asn1
.
result
.
pathLenConstraint
.
valueBlock
.
isHexOnly
)
{
this
.
pathLenConstraint
=
asn1
.
result
.
pathLenConstraint
;
}
else
{
this
.
pathLenConstraint
=
asn1
.
result
.
pathLenConstraint
.
valueBlock
.
valueDec
;
}
}
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
const
outputArray
=
[
]
;
if
(
this
.
cA
!
=
=
BasicConstraints
.
defaultValues
(
CA
)
)
outputArray
.
push
(
new
asn1js
.
Boolean
(
{
value
:
this
.
cA
}
)
)
;
if
(
PATH_LENGTH_CONSTRAINT
in
this
)
{
if
(
this
.
pathLenConstraint
instanceof
asn1js
.
Integer
)
{
outputArray
.
push
(
this
.
pathLenConstraint
)
;
}
else
{
outputArray
.
push
(
new
asn1js
.
Integer
(
{
value
:
this
.
pathLenConstraint
}
)
)
;
}
}
return
(
new
asn1js
.
Sequence
(
{
value
:
outputArray
}
)
)
;
}
public
toJSON
(
)
:
BasicConstraintsJson
{
const
object
:
BasicConstraintsJson
=
{
}
;
if
(
this
.
cA
!
=
=
BasicConstraints
.
defaultValues
(
CA
)
)
{
object
.
cA
=
this
.
cA
;
}
if
(
PATH_LENGTH_CONSTRAINT
in
this
)
{
if
(
this
.
pathLenConstraint
instanceof
asn1js
.
Integer
)
{
object
.
pathLenConstraint
=
this
.
pathLenConstraint
.
toJSON
(
)
;
}
else
{
object
.
pathLenConstraint
=
this
.
pathLenConstraint
;
}
}
return
object
;
}
}
