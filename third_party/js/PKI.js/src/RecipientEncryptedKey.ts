import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
KeyAgreeRecipientIdentifier
KeyAgreeRecipientIdentifierJson
KeyAgreeRecipientIdentifierSchema
}
from
"
.
/
KeyAgreeRecipientIdentifier
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
RID
=
"
rid
"
;
const
ENCRYPTED_KEY
=
"
encryptedKey
"
;
const
CLEAR_PROPS
=
[
RID
ENCRYPTED_KEY
]
;
export
interface
IRecipientEncryptedKey
{
rid
:
KeyAgreeRecipientIdentifier
;
encryptedKey
:
asn1js
.
OctetString
;
}
export
interface
RecipientEncryptedKeyJson
{
rid
:
KeyAgreeRecipientIdentifierJson
;
encryptedKey
:
asn1js
.
OctetStringJson
;
}
export
type
RecipientEncryptedKeyParameters
=
PkiObjectParameters
&
Partial
<
IRecipientEncryptedKey
>
;
export
class
RecipientEncryptedKey
extends
PkiObject
implements
IRecipientEncryptedKey
{
public
static
override
CLASS_NAME
=
"
RecipientEncryptedKey
"
;
public
rid
!
:
KeyAgreeRecipientIdentifier
;
public
encryptedKey
!
:
asn1js
.
OctetString
;
constructor
(
parameters
:
RecipientEncryptedKeyParameters
=
{
}
)
{
super
(
)
;
this
.
rid
=
pvutils
.
getParametersValue
(
parameters
RID
RecipientEncryptedKey
.
defaultValues
(
RID
)
)
;
this
.
encryptedKey
=
pvutils
.
getParametersValue
(
parameters
ENCRYPTED_KEY
RecipientEncryptedKey
.
defaultValues
(
ENCRYPTED_KEY
)
)
;
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
RID
)
:
KeyAgreeRecipientIdentifier
;
public
static
override
defaultValues
(
memberName
:
typeof
ENCRYPTED_KEY
)
:
asn1js
.
OctetString
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
RID
:
return
new
KeyAgreeRecipientIdentifier
(
)
;
case
ENCRYPTED_KEY
:
return
new
asn1js
.
OctetString
(
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
{
switch
(
memberName
)
{
case
RID
:
return
(
(
memberValue
.
variant
=
=
=
(
-
1
)
)
&
&
(
(
"
value
"
in
memberValue
)
=
=
=
false
)
)
;
case
ENCRYPTED_KEY
:
return
(
memberValue
.
isEqual
(
RecipientEncryptedKey
.
defaultValues
(
ENCRYPTED_KEY
)
)
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
Schema
.
SchemaParameters
<
{
rid
?
:
KeyAgreeRecipientIdentifierSchema
;
encryptedKey
?
:
string
;
}
>
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
KeyAgreeRecipientIdentifier
.
schema
(
names
.
rid
|
|
{
}
)
new
asn1js
.
OctetString
(
{
name
:
(
names
.
encryptedKey
|
|
EMPTY_STRING
)
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
RecipientEncryptedKey
.
schema
(
{
names
:
{
rid
:
{
names
:
{
blockName
:
RID
}
}
encryptedKey
:
ENCRYPTED_KEY
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
rid
=
new
KeyAgreeRecipientIdentifier
(
{
schema
:
asn1
.
result
.
rid
}
)
;
this
.
encryptedKey
=
asn1
.
result
.
encryptedKey
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
[
this
.
rid
.
toSchema
(
)
this
.
encryptedKey
]
}
)
)
;
}
public
toJSON
(
)
:
RecipientEncryptedKeyJson
{
return
{
rid
:
this
.
rid
.
toJSON
(
)
encryptedKey
:
this
.
encryptedKey
.
toJSON
(
)
}
;
}
}
