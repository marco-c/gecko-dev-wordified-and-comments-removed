import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
const
ORI_TYPE
=
"
oriType
"
;
const
ORI_VALUE
=
"
oriValue
"
;
const
CLEAR_PROPS
=
[
ORI_TYPE
ORI_VALUE
]
;
export
interface
IOtherRecipientInfo
{
oriType
:
string
;
oriValue
:
any
;
}
export
interface
OtherRecipientInfoJson
{
oriType
:
string
;
oriValue
?
:
any
;
}
export
type
OtherRecipientInfoParameters
=
PkiObjectParameters
&
Partial
<
IOtherRecipientInfo
>
;
export
class
OtherRecipientInfo
extends
PkiObject
implements
IOtherRecipientInfo
{
public
static
override
CLASS_NAME
=
"
OtherRecipientInfo
"
;
public
oriType
!
:
string
;
public
oriValue
:
any
;
constructor
(
parameters
:
OtherRecipientInfoParameters
=
{
}
)
{
super
(
)
;
this
.
oriType
=
pvutils
.
getParametersValue
(
parameters
ORI_TYPE
OtherRecipientInfo
.
defaultValues
(
ORI_TYPE
)
)
;
this
.
oriValue
=
pvutils
.
getParametersValue
(
parameters
ORI_VALUE
OtherRecipientInfo
.
defaultValues
(
ORI_VALUE
)
)
;
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
static
override
defaultValues
(
memberName
:
typeof
ORI_TYPE
)
:
string
;
static
override
defaultValues
(
memberName
:
typeof
ORI_VALUE
)
:
any
;
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
ORI_TYPE
:
return
EMPTY_STRING
;
case
ORI_VALUE
:
return
{
}
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
{
switch
(
memberName
)
{
case
ORI_TYPE
:
return
(
memberValue
=
=
=
EMPTY_STRING
)
;
case
ORI_VALUE
:
return
(
Object
.
keys
(
memberValue
)
.
length
=
=
=
0
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
Schema
.
SchemaParameters
<
{
oriType
?
:
string
;
oriValue
?
:
string
;
}
>
=
{
}
)
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
name
:
(
names
.
oriType
|
|
EMPTY_STRING
)
}
)
new
asn1js
.
Any
(
{
name
:
(
names
.
oriValue
|
|
EMPTY_STRING
)
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
OtherRecipientInfo
.
schema
(
{
names
:
{
oriType
:
ORI_TYPE
oriValue
:
ORI_VALUE
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
oriType
=
asn1
.
result
.
oriType
.
valueBlock
.
toString
(
)
;
this
.
oriValue
=
asn1
.
result
.
oriValue
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
[
new
asn1js
.
ObjectIdentifier
(
{
value
:
this
.
oriType
}
)
this
.
oriValue
]
}
)
)
;
}
public
toJSON
(
)
:
OtherRecipientInfoJson
{
const
res
:
OtherRecipientInfoJson
=
{
oriType
:
this
.
oriType
}
;
if
(
!
OtherRecipientInfo
.
compareWithDefault
(
ORI_VALUE
this
.
oriValue
)
)
{
res
.
oriValue
=
this
.
oriValue
.
toJSON
(
)
;
}
return
res
;
}
}
