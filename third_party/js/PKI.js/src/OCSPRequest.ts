import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
*
as
common
from
"
.
/
common
"
;
import
{
TBSRequest
TBSRequestJson
TBSRequestSchema
}
from
"
.
/
TBSRequest
"
;
import
{
Signature
SignatureJson
SignatureSchema
}
from
"
.
/
Signature
"
;
import
{
Request
}
from
"
.
/
Request
"
;
import
{
CertID
CertIDCreateParams
}
from
"
.
/
CertID
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
import
{
Certificate
}
from
"
.
/
Certificate
"
;
import
{
AsnError
ParameterError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
const
TBS_REQUEST
=
"
tbsRequest
"
;
const
OPTIONAL_SIGNATURE
=
"
optionalSignature
"
;
const
CLEAR_PROPS
=
[
TBS_REQUEST
OPTIONAL_SIGNATURE
]
;
export
interface
IOCSPRequest
{
tbsRequest
:
TBSRequest
;
optionalSignature
?
:
Signature
;
}
export
interface
OCSPRequestJson
{
tbsRequest
:
TBSRequestJson
;
optionalSignature
?
:
SignatureJson
;
}
export
type
OCSPRequestParameters
=
PkiObjectParameters
&
Partial
<
IOCSPRequest
>
;
export
class
OCSPRequest
extends
PkiObject
implements
IOCSPRequest
{
public
static
override
CLASS_NAME
=
"
OCSPRequest
"
;
public
tbsRequest
!
:
TBSRequest
;
public
optionalSignature
?
:
Signature
;
constructor
(
parameters
:
OCSPRequestParameters
=
{
}
)
{
super
(
)
;
this
.
tbsRequest
=
pvutils
.
getParametersValue
(
parameters
TBS_REQUEST
OCSPRequest
.
defaultValues
(
TBS_REQUEST
)
)
;
if
(
OPTIONAL_SIGNATURE
in
parameters
)
{
this
.
optionalSignature
=
pvutils
.
getParametersValue
(
parameters
OPTIONAL_SIGNATURE
OCSPRequest
.
defaultValues
(
OPTIONAL_SIGNATURE
)
)
;
}
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
TBS_REQUEST
)
:
TBSRequest
;
public
static
override
defaultValues
(
memberName
:
typeof
OPTIONAL_SIGNATURE
)
:
Signature
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
TBS_REQUEST
:
return
new
TBSRequest
(
)
;
case
OPTIONAL_SIGNATURE
:
return
new
Signature
(
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
{
switch
(
memberName
)
{
case
TBS_REQUEST
:
return
(
(
TBSRequest
.
compareWithDefault
(
"
tbs
"
memberValue
.
tbs
)
)
&
&
(
TBSRequest
.
compareWithDefault
(
"
version
"
memberValue
.
version
)
)
&
&
(
TBSRequest
.
compareWithDefault
(
"
requestorName
"
memberValue
.
requestorName
)
)
&
&
(
TBSRequest
.
compareWithDefault
(
"
requestList
"
memberValue
.
requestList
)
)
&
&
(
TBSRequest
.
compareWithDefault
(
"
requestExtensions
"
memberValue
.
requestExtensions
)
)
)
;
case
OPTIONAL_SIGNATURE
:
return
(
(
Signature
.
compareWithDefault
(
"
signatureAlgorithm
"
memberValue
.
signatureAlgorithm
)
)
&
&
(
Signature
.
compareWithDefault
(
"
signature
"
memberValue
.
signature
)
)
&
&
(
Signature
.
compareWithDefault
(
"
certs
"
memberValue
.
certs
)
)
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
Schema
.
SchemaParameters
<
{
tbsRequest
?
:
TBSRequestSchema
;
optionalSignature
?
:
SignatureSchema
;
}
>
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
names
.
blockName
|
|
"
OCSPRequest
"
value
:
[
TBSRequest
.
schema
(
names
.
tbsRequest
|
|
{
names
:
{
blockName
:
TBS_REQUEST
}
}
)
new
asn1js
.
Constructed
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
0
}
value
:
[
Signature
.
schema
(
names
.
optionalSignature
|
|
{
names
:
{
blockName
:
OPTIONAL_SIGNATURE
}
}
)
]
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
OCSPRequest
.
schema
(
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
tbsRequest
=
new
TBSRequest
(
{
schema
:
asn1
.
result
.
tbsRequest
}
)
;
if
(
OPTIONAL_SIGNATURE
in
asn1
.
result
)
this
.
optionalSignature
=
new
Signature
(
{
schema
:
asn1
.
result
.
optionalSignature
}
)
;
}
public
toSchema
(
encodeFlag
=
false
)
{
const
outputArray
=
[
]
;
outputArray
.
push
(
this
.
tbsRequest
.
toSchema
(
encodeFlag
)
)
;
if
(
this
.
optionalSignature
)
outputArray
.
push
(
new
asn1js
.
Constructed
(
{
optional
:
true
idBlock
:
{
tagClass
:
3
tagNumber
:
0
}
value
:
[
this
.
optionalSignature
.
toSchema
(
)
]
}
)
)
;
return
(
new
asn1js
.
Sequence
(
{
value
:
outputArray
}
)
)
;
}
public
toJSON
(
)
:
OCSPRequestJson
{
const
res
:
OCSPRequestJson
=
{
tbsRequest
:
this
.
tbsRequest
.
toJSON
(
)
}
;
if
(
this
.
optionalSignature
)
{
res
.
optionalSignature
=
this
.
optionalSignature
.
toJSON
(
)
;
}
return
res
;
}
public
async
createForCertificate
(
certificate
:
Certificate
parameters
:
CertIDCreateParams
crypto
=
common
.
getCrypto
(
true
)
)
:
Promise
<
void
>
{
const
certID
=
new
CertID
(
)
;
await
certID
.
createForCertificate
(
certificate
parameters
crypto
)
;
this
.
tbsRequest
.
requestList
.
push
(
new
Request
(
{
reqCert
:
certID
}
)
)
;
}
public
async
sign
(
privateKey
:
CryptoKey
hashAlgorithm
=
"
SHA
-
1
"
crypto
=
common
.
getCrypto
(
true
)
)
{
ParameterError
.
assertEmpty
(
privateKey
"
privateKey
"
"
OCSPRequest
.
sign
method
"
)
;
if
(
!
this
.
optionalSignature
)
{
throw
new
Error
(
"
Need
to
create
\
"
optionalSignature
\
"
field
before
signing
"
)
;
}
const
signatureParams
=
await
crypto
.
getSignatureParameters
(
privateKey
hashAlgorithm
)
;
const
parameters
=
signatureParams
.
parameters
;
this
.
optionalSignature
.
signatureAlgorithm
=
signatureParams
.
signatureAlgorithm
;
const
tbs
=
this
.
tbsRequest
.
toSchema
(
true
)
.
toBER
(
false
)
;
const
signature
=
await
crypto
.
signWithPrivateKey
(
tbs
privateKey
parameters
as
any
)
;
this
.
optionalSignature
.
signature
=
new
asn1js
.
BitString
(
{
valueHex
:
signature
}
)
;
}
verify
(
)
{
}
}
