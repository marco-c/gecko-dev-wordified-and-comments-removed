import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
*
as
bs
from
"
bytestreamjs
"
;
import
{
SignedCertificateTimestamp
SignedCertificateTimestampJson
}
from
"
.
/
SignedCertificateTimestamp
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
const
TIMESTAMPS
=
"
timestamps
"
;
export
interface
ISignedCertificateTimestampList
{
timestamps
:
SignedCertificateTimestamp
[
]
;
}
export
interface
SignedCertificateTimestampListJson
{
timestamps
:
SignedCertificateTimestampJson
[
]
;
}
export
type
SignedCertificateTimestampListParameters
=
PkiObjectParameters
&
Partial
<
ISignedCertificateTimestampList
>
;
export
class
SignedCertificateTimestampList
extends
PkiObject
implements
ISignedCertificateTimestampList
{
public
static
override
CLASS_NAME
=
"
SignedCertificateTimestampList
"
;
public
timestamps
!
:
SignedCertificateTimestamp
[
]
;
constructor
(
parameters
:
SignedCertificateTimestampListParameters
=
{
}
)
{
super
(
)
;
this
.
timestamps
=
pvutils
.
getParametersValue
(
parameters
TIMESTAMPS
SignedCertificateTimestampList
.
defaultValues
(
TIMESTAMPS
)
)
;
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
TIMESTAMPS
)
:
SignedCertificateTimestamp
[
]
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
TIMESTAMPS
:
return
[
]
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
{
switch
(
memberName
)
{
case
TIMESTAMPS
:
return
(
memberValue
.
length
=
=
=
0
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
Schema
.
SchemaParameters
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
names
.
optional
?
?
=
false
;
return
(
new
asn1js
.
OctetString
(
{
name
:
(
names
.
blockName
|
|
"
SignedCertificateTimestampList
"
)
optional
:
names
.
optional
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
if
(
(
schema
instanceof
asn1js
.
OctetString
)
=
=
=
false
)
{
throw
new
Error
(
"
Object
'
s
schema
was
not
verified
against
input
data
for
SignedCertificateTimestampList
"
)
;
}
const
seqStream
=
new
bs
.
SeqStream
(
{
stream
:
new
bs
.
ByteStream
(
{
buffer
:
schema
.
valueBlock
.
valueHex
}
)
}
)
;
const
dataLength
=
seqStream
.
getUint16
(
)
;
if
(
dataLength
!
=
=
seqStream
.
length
)
{
throw
new
Error
(
"
Object
'
s
schema
was
not
verified
against
input
data
for
SignedCertificateTimestampList
"
)
;
}
while
(
seqStream
.
length
)
{
this
.
timestamps
.
push
(
new
SignedCertificateTimestamp
(
{
stream
:
seqStream
}
)
)
;
}
}
public
toSchema
(
)
:
asn1js
.
OctetString
{
const
stream
=
new
bs
.
SeqStream
(
)
;
let
overallLength
=
0
;
const
timestampsData
=
[
]
;
for
(
const
timestamp
of
this
.
timestamps
)
{
const
timestampStream
=
timestamp
.
toStream
(
)
;
timestampsData
.
push
(
timestampStream
)
;
overallLength
+
=
timestampStream
.
stream
.
buffer
.
byteLength
;
}
stream
.
appendUint16
(
overallLength
)
;
for
(
const
timestamp
of
timestampsData
)
{
stream
.
appendView
(
timestamp
.
stream
.
view
)
;
}
return
new
asn1js
.
OctetString
(
{
valueHex
:
stream
.
stream
.
buffer
.
slice
(
0
)
}
)
;
}
public
toJSON
(
)
:
SignedCertificateTimestampListJson
{
return
{
timestamps
:
Array
.
from
(
this
.
timestamps
o
=
>
o
.
toJSON
(
)
)
}
;
}
}
