import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
{
ContentInfo
ContentInfoJson
}
from
"
.
/
ContentInfo
"
;
import
{
SafeContents
}
from
"
.
/
SafeContents
"
;
import
{
EnvelopedData
}
from
"
.
/
EnvelopedData
"
;
import
{
EncryptedData
}
from
"
.
/
EncryptedData
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
import
{
id_ContentType_Data
id_ContentType_EncryptedData
id_ContentType_EnvelopedData
}
from
"
.
/
ObjectIdentifiers
"
;
import
{
ArgumentError
AsnError
ParameterError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
import
*
as
common
from
"
.
/
common
"
;
const
SAFE_CONTENTS
=
"
safeContents
"
;
const
PARSED_VALUE
=
"
parsedValue
"
;
const
CONTENT_INFOS
=
"
contentInfos
"
;
export
interface
IAuthenticatedSafe
{
safeContents
:
ContentInfo
[
]
;
parsedValue
:
any
;
}
export
type
AuthenticatedSafeParameters
=
PkiObjectParameters
&
Partial
<
IAuthenticatedSafe
>
;
export
interface
AuthenticatedSafeJson
{
safeContents
:
ContentInfoJson
[
]
;
}
export
type
SafeContent
=
ContentInfo
|
EncryptedData
|
EnvelopedData
|
object
;
export
class
AuthenticatedSafe
extends
PkiObject
implements
IAuthenticatedSafe
{
public
static
override
CLASS_NAME
=
"
AuthenticatedSafe
"
;
public
safeContents
!
:
ContentInfo
[
]
;
public
parsedValue
:
any
;
constructor
(
parameters
:
AuthenticatedSafeParameters
=
{
}
)
{
super
(
)
;
this
.
safeContents
=
pvutils
.
getParametersValue
(
parameters
SAFE_CONTENTS
AuthenticatedSafe
.
defaultValues
(
SAFE_CONTENTS
)
)
;
if
(
PARSED_VALUE
in
parameters
)
{
this
.
parsedValue
=
pvutils
.
getParametersValue
(
parameters
PARSED_VALUE
AuthenticatedSafe
.
defaultValues
(
PARSED_VALUE
)
)
;
}
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
SAFE_CONTENTS
)
:
ContentInfo
[
]
;
public
static
override
defaultValues
(
memberName
:
typeof
PARSED_VALUE
)
:
any
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
SAFE_CONTENTS
:
return
[
]
;
case
PARSED_VALUE
:
return
{
}
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
{
switch
(
memberName
)
{
case
SAFE_CONTENTS
:
return
(
memberValue
.
length
=
=
=
0
)
;
case
PARSED_VALUE
:
return
(
(
memberValue
instanceof
Object
)
&
&
(
Object
.
keys
(
memberValue
)
.
length
=
=
=
0
)
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
Schema
.
SchemaParameters
<
{
contentInfos
?
:
string
;
}
>
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
new
asn1js
.
Repeated
(
{
name
:
(
names
.
contentInfos
|
|
EMPTY_STRING
)
value
:
ContentInfo
.
schema
(
)
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
[
CONTENT_INFOS
]
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
AuthenticatedSafe
.
schema
(
{
names
:
{
contentInfos
:
CONTENT_INFOS
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
safeContents
=
Array
.
from
(
asn1
.
result
.
contentInfos
element
=
>
new
ContentInfo
(
{
schema
:
element
}
)
)
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
Array
.
from
(
this
.
safeContents
o
=
>
o
.
toSchema
(
)
)
}
)
)
;
}
public
toJSON
(
)
:
AuthenticatedSafeJson
{
return
{
safeContents
:
Array
.
from
(
this
.
safeContents
o
=
>
o
.
toJSON
(
)
)
}
;
}
public
async
parseInternalValues
(
parameters
:
{
safeContents
:
SafeContent
[
]
;
}
crypto
=
common
.
getCrypto
(
true
)
)
:
Promise
<
void
>
{
ParameterError
.
assert
(
parameters
SAFE_CONTENTS
)
;
ArgumentError
.
assert
(
parameters
.
safeContents
SAFE_CONTENTS
"
Array
"
)
;
if
(
parameters
.
safeContents
.
length
!
=
=
this
.
safeContents
.
length
)
{
throw
new
ArgumentError
(
"
Length
of
\
"
parameters
.
safeContents
\
"
must
be
equal
to
\
"
this
.
safeContents
.
length
\
"
"
)
;
}
this
.
parsedValue
=
{
safeContents
:
[
]
as
any
[
]
}
;
for
(
const
[
index
content
]
of
this
.
safeContents
.
entries
(
)
)
{
const
safeContent
=
parameters
.
safeContents
[
index
]
;
const
errorTarget
=
parameters
.
safeContents
[
{
index
}
]
;
switch
(
content
.
contentType
)
{
case
id_ContentType_Data
:
{
ArgumentError
.
assert
(
content
.
content
"
this
.
safeContents
[
j
]
.
content
"
asn1js
.
OctetString
)
;
const
authSafeContent
=
content
.
content
.
getValue
(
)
;
this
.
parsedValue
.
safeContents
.
push
(
{
privacyMode
:
0
value
:
SafeContents
.
fromBER
(
authSafeContent
)
}
)
;
}
break
;
case
id_ContentType_EnvelopedData
:
{
const
cmsEnveloped
=
new
EnvelopedData
(
{
schema
:
content
.
content
}
)
;
ParameterError
.
assert
(
errorTarget
safeContent
"
recipientCertificate
"
"
recipientKey
"
)
;
const
envelopedData
=
safeContent
as
any
;
const
recipientCertificate
=
envelopedData
.
recipientCertificate
;
const
recipientKey
=
envelopedData
.
recipientKey
;
const
decrypted
=
await
cmsEnveloped
.
decrypt
(
0
{
recipientCertificate
recipientPrivateKey
:
recipientKey
}
crypto
)
;
this
.
parsedValue
.
safeContents
.
push
(
{
privacyMode
:
2
value
:
SafeContents
.
fromBER
(
decrypted
)
}
)
;
}
break
;
case
id_ContentType_EncryptedData
:
{
const
cmsEncrypted
=
new
EncryptedData
(
{
schema
:
content
.
content
}
)
;
ParameterError
.
assert
(
errorTarget
safeContent
"
password
"
)
;
const
password
=
(
safeContent
as
any
)
.
password
;
const
decrypted
=
await
cmsEncrypted
.
decrypt
(
{
password
}
crypto
)
;
this
.
parsedValue
.
safeContents
.
push
(
{
privacyMode
:
1
value
:
SafeContents
.
fromBER
(
decrypted
)
}
)
;
}
break
;
default
:
throw
new
Error
(
Unknown
"
contentType
"
for
AuthenticatedSafe
:
"
{
content
.
contentType
}
)
;
}
}
}
public
async
makeInternalValues
(
parameters
:
{
safeContents
:
any
[
]
;
}
crypto
=
common
.
getCrypto
(
true
)
)
:
Promise
<
this
>
{
if
(
!
(
this
.
parsedValue
)
)
{
throw
new
Error
(
"
Please
run
\
"
parseValues
\
"
first
or
add
\
"
parsedValue
\
"
manually
"
)
;
}
ArgumentError
.
assert
(
this
.
parsedValue
"
this
.
parsedValue
"
"
object
"
)
;
ArgumentError
.
assert
(
this
.
parsedValue
.
safeContents
"
this
.
parsedValue
.
safeContents
"
"
Array
"
)
;
ArgumentError
.
assert
(
parameters
"
parameters
"
"
object
"
)
;
ParameterError
.
assert
(
parameters
"
safeContents
"
)
;
ArgumentError
.
assert
(
parameters
.
safeContents
"
parameters
.
safeContents
"
"
Array
"
)
;
if
(
parameters
.
safeContents
.
length
!
=
=
this
.
parsedValue
.
safeContents
.
length
)
{
throw
new
ArgumentError
(
"
Length
of
\
"
parameters
.
safeContents
\
"
must
be
equal
to
\
"
this
.
parsedValue
.
safeContents
\
"
"
)
;
}
this
.
safeContents
=
[
]
;
for
(
const
[
index
content
]
of
this
.
parsedValue
.
safeContents
.
entries
(
)
)
{
ParameterError
.
assert
(
"
content
"
content
"
privacyMode
"
"
value
"
)
;
ArgumentError
.
assert
(
content
.
value
"
content
.
value
"
SafeContents
)
;
switch
(
content
.
privacyMode
)
{
case
0
:
{
const
contentBuffer
=
content
.
value
.
toSchema
(
)
.
toBER
(
false
)
;
this
.
safeContents
.
push
(
new
ContentInfo
(
{
contentType
:
"
1
.
2
.
840
.
113549
.
1
.
7
.
1
"
content
:
new
asn1js
.
OctetString
(
{
valueHex
:
contentBuffer
}
)
}
)
)
;
}
break
;
case
1
:
{
const
cmsEncrypted
=
new
EncryptedData
(
)
;
const
currentParameters
=
parameters
.
safeContents
[
index
]
;
currentParameters
.
contentToEncrypt
=
content
.
value
.
toSchema
(
)
.
toBER
(
false
)
;
await
cmsEncrypted
.
encrypt
(
currentParameters
)
;
this
.
safeContents
.
push
(
new
ContentInfo
(
{
contentType
:
"
1
.
2
.
840
.
113549
.
1
.
7
.
6
"
content
:
cmsEncrypted
.
toSchema
(
)
}
)
)
;
}
break
;
case
2
:
{
const
cmsEnveloped
=
new
EnvelopedData
(
)
;
const
contentToEncrypt
=
content
.
value
.
toSchema
(
)
.
toBER
(
false
)
;
const
safeContent
=
parameters
.
safeContents
[
index
]
;
ParameterError
.
assert
(
parameters
.
safeContents
[
{
index
}
]
safeContent
"
encryptingCertificate
"
"
encryptionAlgorithm
"
)
;
switch
(
true
)
{
case
(
safeContent
.
encryptionAlgorithm
.
name
.
toLowerCase
(
)
=
=
=
"
aes
-
cbc
"
)
:
case
(
safeContent
.
encryptionAlgorithm
.
name
.
toLowerCase
(
)
=
=
=
"
aes
-
gcm
"
)
:
break
;
default
:
throw
new
Error
(
Incorrect
parameter
"
encryptionAlgorithm
"
in
"
parameters
.
safeContents
[
i
]
"
:
{
safeContent
.
encryptionAlgorithm
}
)
;
}
switch
(
true
)
{
case
(
safeContent
.
encryptionAlgorithm
.
length
=
=
=
128
)
:
case
(
safeContent
.
encryptionAlgorithm
.
length
=
=
=
192
)
:
case
(
safeContent
.
encryptionAlgorithm
.
length
=
=
=
256
)
:
break
;
default
:
throw
new
Error
(
Incorrect
parameter
"
encryptionAlgorithm
.
length
"
in
"
parameters
.
safeContents
[
i
]
"
:
{
safeContent
.
encryptionAlgorithm
.
length
}
)
;
}
const
encryptionAlgorithm
=
safeContent
.
encryptionAlgorithm
;
cmsEnveloped
.
addRecipientByCertificate
(
safeContent
.
encryptingCertificate
{
}
undefined
crypto
)
;
await
cmsEnveloped
.
encrypt
(
encryptionAlgorithm
contentToEncrypt
crypto
)
;
this
.
safeContents
.
push
(
new
ContentInfo
(
{
contentType
:
"
1
.
2
.
840
.
113549
.
1
.
7
.
3
"
content
:
cmsEnveloped
.
toSchema
(
)
}
)
)
;
}
break
;
default
:
throw
new
Error
(
Incorrect
value
for
"
content
.
privacyMode
"
:
{
content
.
privacyMode
}
)
;
}
}
return
this
;
}
}
