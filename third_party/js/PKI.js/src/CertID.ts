import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvtsutils
from
"
pvtsutils
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
*
as
common
from
"
.
/
common
"
;
import
{
AlgorithmIdentifier
AlgorithmIdentifierJson
AlgorithmIdentifierSchema
}
from
"
.
/
AlgorithmIdentifier
"
;
import
{
Certificate
}
from
"
.
/
Certificate
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
import
{
AsnError
ParameterError
}
from
"
.
/
errors
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
const
HASH_ALGORITHM
=
"
hashAlgorithm
"
;
const
ISSUER_NAME_HASH
=
"
issuerNameHash
"
;
const
ISSUER_KEY_HASH
=
"
issuerKeyHash
"
;
const
SERIAL_NUMBER
=
"
serialNumber
"
;
const
CLEAR_PROPS
=
[
HASH_ALGORITHM
ISSUER_NAME_HASH
ISSUER_KEY_HASH
SERIAL_NUMBER
]
;
export
interface
ICertID
{
hashAlgorithm
:
AlgorithmIdentifier
;
issuerNameHash
:
asn1js
.
OctetString
;
issuerKeyHash
:
asn1js
.
OctetString
;
serialNumber
:
asn1js
.
Integer
;
}
export
type
CertIDParameters
=
PkiObjectParameters
&
Partial
<
ICertID
>
;
export
type
CertIDSchema
=
Schema
.
SchemaParameters
<
{
hashAlgorithm
?
:
string
;
hashAlgorithmObject
?
:
AlgorithmIdentifierSchema
;
issuerNameHash
?
:
string
;
issuerKeyHash
?
:
string
;
serialNumber
?
:
string
;
}
>
;
export
interface
CertIDJson
{
hashAlgorithm
:
AlgorithmIdentifierJson
;
issuerNameHash
:
asn1js
.
OctetStringJson
;
issuerKeyHash
:
asn1js
.
OctetStringJson
;
serialNumber
:
asn1js
.
IntegerJson
;
}
export
interface
CertIDCreateParams
{
issuerCertificate
:
Certificate
;
hashAlgorithm
:
string
;
}
export
class
CertID
extends
PkiObject
implements
ICertID
{
public
static
override
CLASS_NAME
=
"
CertID
"
;
public
static
async
create
(
certificate
:
Certificate
parameters
:
CertIDCreateParams
crypto
=
common
.
getCrypto
(
true
)
)
:
Promise
<
CertID
>
{
const
certID
=
new
CertID
(
)
;
await
certID
.
createForCertificate
(
certificate
parameters
crypto
)
;
return
certID
;
}
public
hashAlgorithm
!
:
AlgorithmIdentifier
;
public
issuerNameHash
!
:
asn1js
.
OctetString
;
public
issuerKeyHash
!
:
asn1js
.
OctetString
;
public
serialNumber
!
:
asn1js
.
Integer
;
constructor
(
parameters
:
CertIDParameters
=
{
}
)
{
super
(
)
;
this
.
hashAlgorithm
=
pvutils
.
getParametersValue
(
parameters
HASH_ALGORITHM
CertID
.
defaultValues
(
HASH_ALGORITHM
)
)
;
this
.
issuerNameHash
=
pvutils
.
getParametersValue
(
parameters
ISSUER_NAME_HASH
CertID
.
defaultValues
(
ISSUER_NAME_HASH
)
)
;
this
.
issuerKeyHash
=
pvutils
.
getParametersValue
(
parameters
ISSUER_KEY_HASH
CertID
.
defaultValues
(
ISSUER_KEY_HASH
)
)
;
this
.
serialNumber
=
pvutils
.
getParametersValue
(
parameters
SERIAL_NUMBER
CertID
.
defaultValues
(
SERIAL_NUMBER
)
)
;
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
HASH_ALGORITHM
)
:
AlgorithmIdentifier
;
public
static
override
defaultValues
(
memberName
:
typeof
ISSUER_NAME_HASH
)
:
asn1js
.
OctetString
;
public
static
override
defaultValues
(
memberName
:
typeof
ISSUER_KEY_HASH
)
:
asn1js
.
OctetString
;
public
static
override
defaultValues
(
memberName
:
typeof
SERIAL_NUMBER
)
:
asn1js
.
Integer
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
HASH_ALGORITHM
:
return
new
AlgorithmIdentifier
(
)
;
case
ISSUER_NAME_HASH
:
case
ISSUER_KEY_HASH
:
return
new
asn1js
.
OctetString
(
)
;
case
SERIAL_NUMBER
:
return
new
asn1js
.
Integer
(
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
compareWithDefault
(
memberName
:
string
memberValue
:
any
)
:
boolean
{
switch
(
memberName
)
{
case
HASH_ALGORITHM
:
return
(
(
memberValue
.
algorithmId
=
=
=
EMPTY_STRING
)
&
&
(
(
"
algorithmParams
"
in
memberValue
)
=
=
=
false
)
)
;
case
ISSUER_NAME_HASH
:
case
ISSUER_KEY_HASH
:
case
SERIAL_NUMBER
:
return
(
memberValue
.
isEqual
(
CertID
.
defaultValues
(
SERIAL_NUMBER
)
)
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
CertIDSchema
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
AlgorithmIdentifier
.
schema
(
names
.
hashAlgorithmObject
|
|
{
names
:
{
blockName
:
(
names
.
hashAlgorithm
|
|
EMPTY_STRING
)
}
}
)
new
asn1js
.
OctetString
(
{
name
:
(
names
.
issuerNameHash
|
|
EMPTY_STRING
)
}
)
new
asn1js
.
OctetString
(
{
name
:
(
names
.
issuerKeyHash
|
|
EMPTY_STRING
)
}
)
new
asn1js
.
Integer
(
{
name
:
(
names
.
serialNumber
|
|
EMPTY_STRING
)
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
CertID
.
schema
(
{
names
:
{
hashAlgorithm
:
HASH_ALGORITHM
issuerNameHash
:
ISSUER_NAME_HASH
issuerKeyHash
:
ISSUER_KEY_HASH
serialNumber
:
SERIAL_NUMBER
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
hashAlgorithm
=
new
AlgorithmIdentifier
(
{
schema
:
asn1
.
result
.
hashAlgorithm
}
)
;
this
.
issuerNameHash
=
asn1
.
result
.
issuerNameHash
;
this
.
issuerKeyHash
=
asn1
.
result
.
issuerKeyHash
;
this
.
serialNumber
=
asn1
.
result
.
serialNumber
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
[
this
.
hashAlgorithm
.
toSchema
(
)
this
.
issuerNameHash
this
.
issuerKeyHash
this
.
serialNumber
]
}
)
)
;
}
public
toJSON
(
)
:
CertIDJson
{
return
{
hashAlgorithm
:
this
.
hashAlgorithm
.
toJSON
(
)
issuerNameHash
:
this
.
issuerNameHash
.
toJSON
(
)
issuerKeyHash
:
this
.
issuerKeyHash
.
toJSON
(
)
serialNumber
:
this
.
serialNumber
.
toJSON
(
)
}
;
}
public
isEqual
(
certificateID
:
CertID
)
:
boolean
{
if
(
this
.
hashAlgorithm
.
algorithmId
!
=
=
certificateID
.
hashAlgorithm
.
algorithmId
)
{
return
false
;
}
if
(
!
pvtsutils
.
BufferSourceConverter
.
isEqual
(
this
.
issuerNameHash
.
valueBlock
.
valueHexView
certificateID
.
issuerNameHash
.
valueBlock
.
valueHexView
)
)
{
return
false
;
}
if
(
!
pvtsutils
.
BufferSourceConverter
.
isEqual
(
this
.
issuerKeyHash
.
valueBlock
.
valueHexView
certificateID
.
issuerKeyHash
.
valueBlock
.
valueHexView
)
)
{
return
false
;
}
if
(
!
this
.
serialNumber
.
isEqual
(
certificateID
.
serialNumber
)
)
{
return
false
;
}
return
true
;
}
public
async
createForCertificate
(
certificate
:
Certificate
parameters
:
CertIDCreateParams
crypto
=
common
.
getCrypto
(
true
)
)
:
Promise
<
void
>
{
ParameterError
.
assert
(
parameters
HASH_ALGORITHM
"
issuerCertificate
"
)
;
const
hashOID
=
crypto
.
getOIDByAlgorithm
(
{
name
:
parameters
.
hashAlgorithm
}
true
"
hashAlgorithm
"
)
;
this
.
hashAlgorithm
=
new
AlgorithmIdentifier
(
{
algorithmId
:
hashOID
algorithmParams
:
new
asn1js
.
Null
(
)
}
)
;
const
issuerCertificate
=
parameters
.
issuerCertificate
;
this
.
serialNumber
=
certificate
.
serialNumber
;
const
hashIssuerName
=
await
crypto
.
digest
(
{
name
:
parameters
.
hashAlgorithm
}
issuerCertificate
.
subject
.
toSchema
(
)
.
toBER
(
false
)
)
;
this
.
issuerNameHash
=
new
asn1js
.
OctetString
(
{
valueHex
:
hashIssuerName
}
)
;
const
issuerKeyBuffer
=
issuerCertificate
.
subjectPublicKeyInfo
.
subjectPublicKey
.
valueBlock
.
valueHexView
;
const
hashIssuerKey
=
await
crypto
.
digest
(
{
name
:
parameters
.
hashAlgorithm
}
issuerKeyBuffer
)
;
this
.
issuerKeyHash
=
new
asn1js
.
OctetString
(
{
valueHex
:
hashIssuerKey
}
)
;
}
}
