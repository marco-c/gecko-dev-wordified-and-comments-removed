import
*
as
asn1js
from
"
asn1js
"
;
import
*
as
pvutils
from
"
pvutils
"
;
import
*
as
common
from
"
.
/
common
"
;
import
{
AlgorithmIdentifier
AlgorithmIdentifierJson
AlgorithmIdentifierSchema
}
from
"
.
/
AlgorithmIdentifier
"
;
import
{
ECPublicKey
}
from
"
.
/
ECPublicKey
"
;
import
{
RSAPublicKey
}
from
"
.
/
RSAPublicKey
"
;
import
*
as
Schema
from
"
.
/
Schema
"
;
import
{
PkiObject
PkiObjectParameters
}
from
"
.
/
PkiObject
"
;
import
{
AsnError
}
from
"
.
/
errors
"
;
import
{
EMPTY_STRING
}
from
"
.
/
constants
"
;
const
ALGORITHM
=
"
algorithm
"
;
const
SUBJECT_PUBLIC_KEY
=
"
subjectPublicKey
"
;
const
CLEAR_PROPS
=
[
ALGORITHM
SUBJECT_PUBLIC_KEY
]
;
export
interface
IPublicKeyInfo
{
algorithm
:
AlgorithmIdentifier
;
subjectPublicKey
:
asn1js
.
BitString
;
parsedKey
?
:
ECPublicKey
|
RSAPublicKey
;
}
export
type
PublicKeyInfoParameters
=
PkiObjectParameters
&
Partial
<
IPublicKeyInfo
>
&
{
json
?
:
JsonWebKey
;
}
;
export
interface
PublicKeyInfoJson
{
algorithm
:
AlgorithmIdentifierJson
;
subjectPublicKey
:
asn1js
.
BitStringJson
;
}
export
type
PublicKeyInfoSchema
=
Schema
.
SchemaParameters
<
{
algorithm
?
:
AlgorithmIdentifierSchema
;
subjectPublicKey
?
:
string
;
}
>
;
export
class
PublicKeyInfo
extends
PkiObject
implements
IPublicKeyInfo
{
public
static
override
CLASS_NAME
=
"
PublicKeyInfo
"
;
public
algorithm
!
:
AlgorithmIdentifier
;
public
subjectPublicKey
!
:
asn1js
.
BitString
;
private
_parsedKey
?
:
ECPublicKey
|
RSAPublicKey
|
null
;
public
get
parsedKey
(
)
:
ECPublicKey
|
RSAPublicKey
|
undefined
{
if
(
this
.
_parsedKey
=
=
=
undefined
)
{
switch
(
this
.
algorithm
.
algorithmId
)
{
case
"
1
.
2
.
840
.
10045
.
2
.
1
"
:
if
(
"
algorithmParams
"
in
this
.
algorithm
)
{
if
(
this
.
algorithm
.
algorithmParams
.
constructor
.
blockName
(
)
=
=
=
asn1js
.
ObjectIdentifier
.
blockName
(
)
)
{
try
{
this
.
_parsedKey
=
new
ECPublicKey
(
{
namedCurve
:
this
.
algorithm
.
algorithmParams
.
valueBlock
.
toString
(
)
schema
:
this
.
subjectPublicKey
.
valueBlock
.
valueHexView
}
)
;
}
catch
(
ex
)
{
}
}
}
break
;
case
"
1
.
2
.
840
.
113549
.
1
.
1
.
1
"
:
{
const
publicKeyASN1
=
asn1js
.
fromBER
(
this
.
subjectPublicKey
.
valueBlock
.
valueHexView
)
;
if
(
publicKeyASN1
.
offset
!
=
=
-
1
)
{
try
{
this
.
_parsedKey
=
new
RSAPublicKey
(
{
schema
:
publicKeyASN1
.
result
}
)
;
}
catch
(
ex
)
{
}
}
}
break
;
default
:
}
this
.
_parsedKey
|
|
=
null
;
}
return
this
.
_parsedKey
|
|
undefined
;
}
public
set
parsedKey
(
value
:
ECPublicKey
|
RSAPublicKey
|
undefined
)
{
this
.
_parsedKey
=
value
;
}
constructor
(
parameters
:
PublicKeyInfoParameters
=
{
}
)
{
super
(
)
;
this
.
algorithm
=
pvutils
.
getParametersValue
(
parameters
ALGORITHM
PublicKeyInfo
.
defaultValues
(
ALGORITHM
)
)
;
this
.
subjectPublicKey
=
pvutils
.
getParametersValue
(
parameters
SUBJECT_PUBLIC_KEY
PublicKeyInfo
.
defaultValues
(
SUBJECT_PUBLIC_KEY
)
)
;
const
parsedKey
=
pvutils
.
getParametersValue
(
parameters
"
parsedKey
"
null
)
;
if
(
parsedKey
)
{
this
.
parsedKey
=
parsedKey
;
}
if
(
parameters
.
json
)
{
this
.
fromJSON
(
parameters
.
json
)
;
}
if
(
parameters
.
schema
)
{
this
.
fromSchema
(
parameters
.
schema
)
;
}
}
public
static
override
defaultValues
(
memberName
:
typeof
ALGORITHM
)
:
AlgorithmIdentifier
;
public
static
override
defaultValues
(
memberName
:
typeof
SUBJECT_PUBLIC_KEY
)
:
asn1js
.
BitString
;
public
static
override
defaultValues
(
memberName
:
string
)
:
any
{
switch
(
memberName
)
{
case
ALGORITHM
:
return
new
AlgorithmIdentifier
(
)
;
case
SUBJECT_PUBLIC_KEY
:
return
new
asn1js
.
BitString
(
)
;
default
:
return
super
.
defaultValues
(
memberName
)
;
}
}
public
static
override
schema
(
parameters
:
PublicKeyInfoSchema
=
{
}
)
:
Schema
.
SchemaType
{
const
names
=
pvutils
.
getParametersValue
<
NonNullable
<
typeof
parameters
.
names
>
>
(
parameters
"
names
"
{
}
)
;
return
(
new
asn1js
.
Sequence
(
{
name
:
(
names
.
blockName
|
|
EMPTY_STRING
)
value
:
[
AlgorithmIdentifier
.
schema
(
names
.
algorithm
|
|
{
}
)
new
asn1js
.
BitString
(
{
name
:
(
names
.
subjectPublicKey
|
|
EMPTY_STRING
)
}
)
]
}
)
)
;
}
public
fromSchema
(
schema
:
Schema
.
SchemaType
)
:
void
{
pvutils
.
clearProps
(
schema
CLEAR_PROPS
)
;
const
asn1
=
asn1js
.
compareSchema
(
schema
schema
PublicKeyInfo
.
schema
(
{
names
:
{
algorithm
:
{
names
:
{
blockName
:
ALGORITHM
}
}
subjectPublicKey
:
SUBJECT_PUBLIC_KEY
}
}
)
)
;
AsnError
.
assertSchema
(
asn1
this
.
className
)
;
this
.
algorithm
=
new
AlgorithmIdentifier
(
{
schema
:
asn1
.
result
.
algorithm
}
)
;
this
.
subjectPublicKey
=
asn1
.
result
.
subjectPublicKey
;
}
public
toSchema
(
)
:
asn1js
.
Sequence
{
return
(
new
asn1js
.
Sequence
(
{
value
:
[
this
.
algorithm
.
toSchema
(
)
this
.
subjectPublicKey
]
}
)
)
;
}
public
toJSON
(
)
:
PublicKeyInfoJson
|
JsonWebKey
{
if
(
!
this
.
parsedKey
)
{
return
{
algorithm
:
this
.
algorithm
.
toJSON
(
)
subjectPublicKey
:
this
.
subjectPublicKey
.
toJSON
(
)
}
;
}
const
jwk
:
JsonWebKey
=
{
}
;
switch
(
this
.
algorithm
.
algorithmId
)
{
case
"
1
.
2
.
840
.
10045
.
2
.
1
"
:
jwk
.
kty
=
"
EC
"
;
break
;
case
"
1
.
2
.
840
.
113549
.
1
.
1
.
1
"
:
jwk
.
kty
=
"
RSA
"
;
break
;
default
:
}
const
publicKeyJWK
=
this
.
parsedKey
.
toJSON
(
)
;
Object
.
assign
(
jwk
publicKeyJWK
)
;
return
jwk
;
}
public
fromJSON
(
json
:
any
)
:
void
{
if
(
"
kty
"
in
json
)
{
switch
(
json
.
kty
.
toUpperCase
(
)
)
{
case
"
EC
"
:
this
.
parsedKey
=
new
ECPublicKey
(
{
json
}
)
;
this
.
algorithm
=
new
AlgorithmIdentifier
(
{
algorithmId
:
"
1
.
2
.
840
.
10045
.
2
.
1
"
algorithmParams
:
new
asn1js
.
ObjectIdentifier
(
{
value
:
this
.
parsedKey
.
namedCurve
}
)
}
)
;
break
;
case
"
RSA
"
:
this
.
parsedKey
=
new
RSAPublicKey
(
{
json
}
)
;
this
.
algorithm
=
new
AlgorithmIdentifier
(
{
algorithmId
:
"
1
.
2
.
840
.
113549
.
1
.
1
.
1
"
algorithmParams
:
new
asn1js
.
Null
(
)
}
)
;
break
;
default
:
throw
new
Error
(
Invalid
value
for
"
kty
"
parameter
:
{
json
.
kty
}
)
;
}
this
.
subjectPublicKey
=
new
asn1js
.
BitString
(
{
valueHex
:
this
.
parsedKey
.
toSchema
(
)
.
toBER
(
false
)
}
)
;
}
}
public
async
importKey
(
publicKey
:
CryptoKey
crypto
=
common
.
getCrypto
(
true
)
)
:
Promise
<
void
>
{
try
{
if
(
!
publicKey
)
{
throw
new
Error
(
"
Need
to
provide
publicKey
input
parameter
"
)
;
}
const
exportedKey
=
await
crypto
.
exportKey
(
"
spki
"
publicKey
)
;
const
asn1
=
asn1js
.
fromBER
(
exportedKey
)
;
try
{
this
.
fromSchema
(
asn1
.
result
)
;
}
catch
(
exception
)
{
throw
new
Error
(
"
Error
during
initializing
object
from
schema
"
)
;
}
}
catch
(
e
)
{
const
message
=
e
instanceof
Error
?
e
.
message
:
{
e
}
;
throw
new
Error
(
Error
during
exporting
public
key
:
{
message
}
)
;
}
}
}
