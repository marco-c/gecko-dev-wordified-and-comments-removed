'
use
strict
'
;
const
htmlEscapes
=
{
'
&
'
:
'
&
amp
'
'
<
'
:
'
&
lt
'
'
>
'
:
'
&
gt
'
'
"
'
:
'
&
quot
'
'
\
'
'
:
'
&
#
x27
'
'
'
:
'
&
#
x60
'
}
;
const
reUnescapedHtml
=
/
[
&
<
>
"
'
]
/
g
;
const
reHasUnescapedHtml
=
new
RegExp
(
reUnescapedHtml
.
source
)
;
let
escape
=
str
=
>
(
str
&
&
reHasUnescapedHtml
.
test
(
str
)
)
?
str
.
replace
(
reUnescapedHtml
escapeHtmlChar
)
:
str
;
let
escapeHtmlChar
=
chr
=
>
htmlEscapes
[
chr
]
;
class
Template
{
constructor
(
)
{
this
.
defaultTemplate
=
<
li
data
-
id
=
"
{
{
id
}
}
"
class
=
"
{
{
completed
}
}
"
>
<
div
class
=
"
view
"
>
<
input
class
=
"
toggle
"
type
=
"
checkbox
"
{
{
checked
}
}
>
<
label
>
{
{
title
}
}
<
/
label
>
<
button
class
=
"
destroy
"
>
<
/
button
>
<
/
div
>
<
/
li
>
;
}
show
(
data
)
{
let
i
=
0
;
let
view
=
'
'
;
const
len
=
data
.
length
;
for
(
i
;
i
<
len
;
i
+
+
)
{
let
completed
=
'
'
;
let
checked
=
'
'
;
let
template
=
this
.
defaultTemplate
;
if
(
data
[
i
]
.
completed
)
{
completed
=
'
completed
'
;
checked
=
'
checked
'
;
}
template
=
template
.
replace
(
'
{
{
id
}
}
'
data
[
i
]
.
id
)
;
template
=
template
.
replace
(
'
{
{
title
}
}
'
escape
(
data
[
i
]
.
title
)
)
;
template
=
template
.
replace
(
'
{
{
completed
}
}
'
completed
)
;
template
=
template
.
replace
(
'
{
{
checked
}
}
'
checked
)
;
view
+
=
template
;
}
return
view
;
}
itemCounter
(
activeTodos
)
{
let
plural
=
activeTodos
=
=
=
1
?
'
'
:
'
s
'
;
return
<
strong
>
{
activeTodos
}
<
/
strong
>
item
{
plural
}
left
;
}
clearCompletedButton
(
completedTodos
)
{
return
(
completedTodos
>
0
)
?
'
Clear
completed
'
:
'
'
;
}
}
