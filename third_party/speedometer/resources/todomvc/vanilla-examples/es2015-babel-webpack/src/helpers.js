export
{
qs
qsa
on
delegate
parent
remove
}
function
qs
(
selector
scope
)
{
return
(
scope
|
|
document
)
.
querySelector
(
selector
)
}
function
qsa
(
selector
scope
)
{
return
(
scope
|
|
document
)
.
querySelectorAll
(
selector
)
}
function
on
(
target
type
callback
useCapture
)
{
target
.
addEventListener
(
type
callback
!
!
useCapture
)
}
function
delegate
(
target
selector
type
handler
)
{
var
useCapture
=
type
=
=
=
'
blur
'
|
|
type
=
=
=
'
focus
'
on
(
target
type
dispatchEvent
useCapture
)
function
dispatchEvent
(
event
)
{
var
targetElement
=
event
.
target
var
potentialElements
=
qsa
(
selector
target
)
var
hasMatch
=
Array
.
prototype
.
indexOf
.
call
(
potentialElements
targetElement
)
>
=
0
if
(
hasMatch
)
{
handler
.
call
(
targetElement
event
)
}
}
}
function
parent
(
element
tagName
)
{
if
(
!
element
.
parentNode
)
{
return
undefined
}
if
(
element
.
parentNode
.
tagName
.
toLowerCase
(
)
=
=
=
tagName
.
toLowerCase
(
)
)
{
return
element
.
parentNode
}
return
parent
(
element
.
parentNode
tagName
)
}
function
remove
(
array
thing
)
{
const
index
=
array
.
indexOf
(
thing
)
if
(
index
=
=
=
-
1
)
{
return
array
}
array
.
splice
(
index
1
)
}
NodeList
.
prototype
.
forEach
=
Array
.
prototype
.
forEach
