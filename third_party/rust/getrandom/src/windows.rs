extern
crate
std
;
use
winapi
:
:
shared
:
:
minwindef
:
:
ULONG
;
use
winapi
:
:
um
:
:
ntsecapi
:
:
RtlGenRandom
;
use
winapi
:
:
um
:
:
winnt
:
:
PVOID
;
use
std
:
:
io
;
use
core
:
:
num
:
:
NonZeroU32
;
use
crate
:
:
Error
;
pub
fn
getrandom_inner
(
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
Error
>
{
let
ret
=
unsafe
{
RtlGenRandom
(
dest
.
as_mut_ptr
(
)
as
PVOID
dest
.
len
(
)
as
ULONG
)
}
;
if
ret
=
=
0
{
error
!
(
"
RtlGenRandom
call
failed
"
)
;
return
Err
(
io
:
:
Error
:
:
last_os_error
(
)
.
into
(
)
)
;
}
Ok
(
(
)
)
}
#
[
inline
(
always
)
]
pub
fn
error_msg_inner
(
_
:
NonZeroU32
)
-
>
Option
<
&
'
static
str
>
{
None
}
