#
!
[
no_std
]
#
!
[
doc
(
html_logo_url
=
"
https
:
/
/
www
.
rust
-
lang
.
org
/
logos
/
rust
-
logo
-
128x128
-
blk
.
png
"
html_favicon_url
=
"
https
:
/
/
www
.
rust
-
lang
.
org
/
favicon
.
ico
"
)
]
#
!
[
doc
=
include_str
!
(
"
.
.
/
README
.
md
"
)
]
#
!
[
warn
(
rust_2018_idioms
unused_lifetimes
missing_docs
)
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_auto_cfg
)
)
]
#
!
[
cfg_attr
(
getrandom_backend
=
"
efi_rng
"
feature
(
uefi_std
)
)
]
#
!
[
deny
(
clippy
:
:
cast_lossless
clippy
:
:
cast_possible_truncation
clippy
:
:
cast_possible_wrap
clippy
:
:
cast_precision_loss
clippy
:
:
cast_ptr_alignment
clippy
:
:
cast_sign_loss
clippy
:
:
char_lit_as_u8
clippy
:
:
checked_conversions
clippy
:
:
fn_to_numeric_cast
clippy
:
:
fn_to_numeric_cast_with_truncation
clippy
:
:
ptr_as_ptr
clippy
:
:
unnecessary_cast
clippy
:
:
useless_conversion
)
]
#
[
macro_use
]
extern
crate
cfg_if
;
use
core
:
:
mem
:
:
MaybeUninit
;
mod
backends
;
mod
error
;
mod
util
;
#
[
cfg
(
feature
=
"
std
"
)
]
mod
error_std_impls
;
pub
use
crate
:
:
error
:
:
Error
;
#
[
inline
]
pub
fn
fill
(
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
Error
>
{
fill_uninit
(
unsafe
{
util
:
:
slice_as_uninit_mut
(
dest
)
}
)
?
;
Ok
(
(
)
)
}
#
[
inline
]
pub
fn
fill_uninit
(
dest
:
&
mut
[
MaybeUninit
<
u8
>
]
)
-
>
Result
<
&
mut
[
u8
]
Error
>
{
if
!
dest
.
is_empty
(
)
{
backends
:
:
fill_inner
(
dest
)
?
;
}
#
[
cfg
(
getrandom_msan
)
]
extern
"
C
"
{
fn
__msan_unpoison
(
a
:
*
mut
core
:
:
ffi
:
:
c_void
size
:
usize
)
;
}
Ok
(
unsafe
{
#
[
cfg
(
getrandom_msan
)
]
__msan_unpoison
(
dest
.
as_mut_ptr
(
)
.
cast
(
)
dest
.
len
(
)
)
;
util
:
:
slice_assume_init_mut
(
dest
)
}
)
}
#
[
inline
]
pub
fn
u32
(
)
-
>
Result
<
u32
Error
>
{
backends
:
:
inner_u32
(
)
}
#
[
inline
]
pub
fn
u64
(
)
-
>
Result
<
u64
Error
>
{
backends
:
:
inner_u64
(
)
}
