#
!
[
doc
(
html_logo_url
=
"
https
:
/
/
www
.
rust
-
lang
.
org
/
logos
/
rust
-
logo
-
128x128
-
blk
.
png
"
html_favicon_url
=
"
https
:
/
/
www
.
rust
-
lang
.
org
/
favicon
.
ico
"
html_root_url
=
"
https
:
/
/
rust
-
random
.
github
.
io
/
rand
/
"
)
]
#
!
[
no_std
]
#
!
[
cfg_attr
(
feature
=
"
stdweb
"
recursion_limit
=
"
128
"
)
]
#
[
cfg
(
feature
=
"
log
"
)
]
#
[
macro_use
]
extern
crate
log
;
#
[
cfg
(
not
(
feature
=
"
log
"
)
)
]
#
[
allow
(
unused
)
]
macro_rules
!
error
{
(
(
x
:
tt
)
*
)
=
>
(
)
}
#
[
cfg
(
target_arch
=
"
wasm32
"
)
]
extern
crate
std
;
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
netbsd
"
target_os
=
"
solaris
"
target_os
=
"
illumos
"
target_os
=
"
redox
"
target_os
=
"
dragonfly
"
target_os
=
"
haiku
"
target_os
=
"
linux
"
all
(
target_arch
=
"
wasm32
"
not
(
target_os
=
"
wasi
"
)
)
)
)
]
mod
utils
;
mod
error
;
pub
use
crate
:
:
error
:
:
Error
;
macro_rules
!
mod_use
{
(
cond
:
meta
module
:
ident
)
=
>
{
#
[
cond
]
mod
module
;
#
[
cond
]
use
crate
:
:
module
:
:
{
getrandom_inner
error_msg_inner
}
;
}
}
#
[
cfg
(
any
(
feature
=
"
std
"
windows
unix
target_os
=
"
cloudabi
"
target_os
=
"
redox
"
target_arch
=
"
wasm32
"
)
)
]
mod
error_impls
;
mod_use
!
(
cfg
(
target_os
=
"
android
"
)
linux_android
)
;
mod_use
!
(
cfg
(
target_os
=
"
bitrig
"
)
openbsd_bitrig
)
;
mod_use
!
(
cfg
(
target_os
=
"
cloudabi
"
)
cloudabi
)
;
mod_use
!
(
cfg
(
target_os
=
"
dragonfly
"
)
use_file
)
;
mod_use
!
(
cfg
(
target_os
=
"
emscripten
"
)
use_file
)
;
mod_use
!
(
cfg
(
target_os
=
"
freebsd
"
)
freebsd
)
;
mod_use
!
(
cfg
(
target_os
=
"
fuchsia
"
)
fuchsia
)
;
mod_use
!
(
cfg
(
target_os
=
"
haiku
"
)
use_file
)
;
mod_use
!
(
cfg
(
target_os
=
"
illumos
"
)
solaris_illumos
)
;
mod_use
!
(
cfg
(
target_os
=
"
ios
"
)
macos
)
;
mod_use
!
(
cfg
(
target_os
=
"
linux
"
)
linux_android
)
;
mod_use
!
(
cfg
(
target_os
=
"
macos
"
)
macos
)
;
mod_use
!
(
cfg
(
target_os
=
"
netbsd
"
)
use_file
)
;
mod_use
!
(
cfg
(
target_os
=
"
openbsd
"
)
openbsd_bitrig
)
;
mod_use
!
(
cfg
(
target_os
=
"
redox
"
)
use_file
)
;
mod_use
!
(
cfg
(
target_os
=
"
solaris
"
)
solaris_illumos
)
;
mod_use
!
(
cfg
(
windows
)
windows
)
;
mod_use
!
(
cfg
(
target_env
=
"
sgx
"
)
sgx
)
;
mod_use
!
(
cfg
(
target_os
=
"
wasi
"
)
wasi
)
;
mod_use
!
(
cfg
(
all
(
target_arch
=
"
wasm32
"
not
(
target_os
=
"
emscripten
"
)
not
(
target_os
=
"
wasi
"
)
feature
=
"
wasm
-
bindgen
"
)
)
wasm32_bindgen
)
;
mod_use
!
(
cfg
(
all
(
target_arch
=
"
wasm32
"
not
(
target_os
=
"
emscripten
"
)
not
(
target_os
=
"
wasi
"
)
not
(
feature
=
"
wasm
-
bindgen
"
)
feature
=
"
stdweb
"
)
)
wasm32_stdweb
)
;
mod_use
!
(
cfg
(
not
(
any
(
target_os
=
"
android
"
target_os
=
"
bitrig
"
target_os
=
"
cloudabi
"
target_os
=
"
dragonfly
"
target_os
=
"
emscripten
"
target_os
=
"
freebsd
"
target_os
=
"
fuchsia
"
target_os
=
"
haiku
"
target_os
=
"
illumos
"
target_os
=
"
ios
"
target_os
=
"
linux
"
target_os
=
"
macos
"
target_os
=
"
netbsd
"
target_os
=
"
openbsd
"
target_os
=
"
redox
"
target_os
=
"
solaris
"
target_env
=
"
sgx
"
windows
all
(
target_arch
=
"
wasm32
"
any
(
target_os
=
"
emscripten
"
target_os
=
"
wasi
"
feature
=
"
wasm
-
bindgen
"
feature
=
"
stdweb
"
)
)
)
)
)
dummy
)
;
pub
fn
getrandom
(
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
error
:
:
Error
>
{
getrandom_inner
(
dest
)
}
