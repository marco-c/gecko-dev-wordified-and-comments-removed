extern
crate
std
;
use
std
:
:
{
io
error
}
;
use
core
:
:
convert
:
:
From
;
use
core
:
:
num
:
:
NonZeroU32
;
use
crate
:
:
error
:
:
Error
;
impl
From
<
io
:
:
Error
>
for
Error
{
fn
from
(
err
:
io
:
:
Error
)
-
>
Self
{
err
.
raw_os_error
(
)
.
and_then
(
|
code
|
NonZeroU32
:
:
new
(
code
as
u32
)
)
.
map
(
|
code
|
Error
(
code
)
)
.
unwrap_or
(
Error
:
:
UNKNOWN
)
}
}
impl
From
<
Error
>
for
io
:
:
Error
{
fn
from
(
err
:
Error
)
-
>
Self
{
match
err
.
msg
(
)
{
Some
(
msg
)
=
>
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
Other
msg
)
None
=
>
io
:
:
Error
:
:
from_raw_os_error
(
err
.
0
.
get
(
)
as
i32
)
}
}
}
impl
error
:
:
Error
for
Error
{
}
