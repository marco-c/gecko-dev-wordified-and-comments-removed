use
crate
:
:
Error
;
use
core
:
:
{
ffi
:
:
c_void
mem
:
:
MaybeUninit
}
;
pub
use
crate
:
:
util
:
:
{
inner_u32
inner_u64
}
;
#
[
path
=
"
.
.
/
util_libc
.
rs
"
]
mod
util_libc
;
const
MAX_BYTES
:
usize
=
1024
;
pub
fn
fill_inner
(
dest
:
&
mut
[
MaybeUninit
<
u8
>
]
)
-
>
Result
<
(
)
Error
>
{
for
chunk
in
dest
.
chunks_mut
(
MAX_BYTES
)
{
let
ptr
=
chunk
.
as_mut_ptr
(
)
.
cast
:
:
<
c_void
>
(
)
;
let
ret
=
unsafe
{
libc
:
:
getrandom
(
ptr
chunk
.
len
(
)
libc
:
:
GRND_RANDOM
)
}
;
match
usize
:
:
try_from
(
ret
)
{
Ok
(
ret
)
if
ret
=
=
chunk
.
len
(
)
=
>
{
}
Ok
(
0
)
=
>
return
Err
(
util_libc
:
:
last_os_error
(
)
)
_
=
>
return
Err
(
Error
:
:
UNEXPECTED
)
}
}
Ok
(
(
)
)
}
