use
crate
:
:
Error
;
use
core
:
:
mem
:
:
MaybeUninit
;
pub
use
crate
:
:
util
:
:
{
inner_u32
inner_u64
}
;
#
[
link
(
wasm_import_module
=
"
wasi_snapshot_preview1
"
)
]
extern
"
C
"
{
fn
random_get
(
arg0
:
i32
arg1
:
i32
)
-
>
i32
;
}
pub
fn
fill_inner
(
dest
:
&
mut
[
MaybeUninit
<
u8
>
]
)
-
>
Result
<
(
)
Error
>
{
#
[
allow
(
clippy
:
:
cast_possible_truncation
clippy
:
:
cast_possible_wrap
)
]
let
ret
=
unsafe
{
random_get
(
dest
.
as_mut_ptr
(
)
as
i32
dest
.
len
(
)
as
i32
)
}
;
match
ret
{
0
=
>
Ok
(
(
)
)
code
=
>
{
let
err
=
u32
:
:
try_from
(
code
)
.
map
(
Error
:
:
from_os_error
)
.
unwrap_or
(
Error
:
:
UNEXPECTED
)
;
Err
(
err
)
}
}
}
