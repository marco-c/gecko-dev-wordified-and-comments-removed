use
core
:
:
sync
:
:
atomic
:
:
{
AtomicUsize
Ordering
:
:
Relaxed
}
;
pub
(
crate
)
struct
LazyUsize
(
AtomicUsize
)
;
impl
LazyUsize
{
pub
const
fn
new
(
)
-
>
Self
{
Self
(
AtomicUsize
:
:
new
(
Self
:
:
UNINIT
)
)
}
pub
const
UNINIT
:
usize
=
usize
:
:
max_value
(
)
;
pub
fn
unsync_init
(
&
self
init
:
impl
FnOnce
(
)
-
>
usize
)
-
>
usize
{
let
mut
val
=
self
.
0
.
load
(
Relaxed
)
;
if
val
=
=
Self
:
:
UNINIT
{
val
=
init
(
)
;
self
.
0
.
store
(
val
Relaxed
)
;
}
val
}
}
pub
(
crate
)
struct
LazyBool
(
LazyUsize
)
;
impl
LazyBool
{
pub
const
fn
new
(
)
-
>
Self
{
Self
(
LazyUsize
:
:
new
(
)
)
}
pub
fn
unsync_init
(
&
self
init
:
impl
FnOnce
(
)
-
>
bool
)
-
>
bool
{
self
.
0
.
unsync_init
(
|
|
init
(
)
as
usize
)
!
=
0
}
}
