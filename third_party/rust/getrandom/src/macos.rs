use
crate
:
:
util_libc
:
:
{
last_os_error
Weak
}
;
use
crate
:
:
{
use_file
Error
}
;
use
core
:
:
mem
;
type
GetEntropyFn
=
unsafe
extern
"
C
"
fn
(
*
mut
u8
libc
:
:
size_t
)
-
>
libc
:
:
c_int
;
pub
fn
getrandom_inner
(
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
Error
>
{
static
GETENTROPY
:
Weak
=
unsafe
{
Weak
:
:
new
(
"
getentropy
\
0
"
)
}
;
if
let
Some
(
fptr
)
=
GETENTROPY
.
ptr
(
)
{
let
func
:
GetEntropyFn
=
unsafe
{
mem
:
:
transmute
(
fptr
)
}
;
for
chunk
in
dest
.
chunks_mut
(
256
)
{
let
ret
=
unsafe
{
func
(
chunk
.
as_mut_ptr
(
)
chunk
.
len
(
)
)
}
;
if
ret
!
=
0
{
let
err
=
last_os_error
(
)
;
error
!
(
"
getentropy
syscall
failed
"
)
;
return
Err
(
err
)
;
}
}
Ok
(
(
)
)
}
else
{
use_file
:
:
getrandom_inner
(
dest
)
}
}
