use
crate
:
:
Error
;
use
core
:
:
cell
:
:
RefCell
;
use
core
:
:
ops
:
:
DerefMut
;
pub
(
crate
)
fn
use_init
<
T
F
U
>
(
f
:
&
RefCell
<
Option
<
T
>
>
init_f
:
F
mut
use_f
:
U
)
-
>
Result
<
(
)
Error
>
where
F
:
FnOnce
(
)
-
>
Result
<
T
Error
>
U
:
FnMut
(
&
mut
T
)
-
>
Result
<
(
)
Error
>
{
let
mut
f
=
f
.
borrow_mut
(
)
;
let
f
:
&
mut
Option
<
T
>
=
f
.
deref_mut
(
)
;
match
f
{
None
=
>
*
f
=
Some
(
init_f
(
)
?
)
_
=
>
(
)
}
match
f
{
Some
(
f
)
=
>
use_f
(
f
)
None
=
>
unreachable
!
(
)
}
}
