#
!
[
feature
(
test
)
]
extern
crate
test
;
use
std
:
:
{
alloc
:
:
{
alloc_zeroed
dealloc
Layout
}
ptr
:
:
NonNull
}
;
struct
AlignedBuffer
<
const
N
:
usize
>
(
NonNull
<
[
u8
;
N
]
>
)
;
impl
<
const
N
:
usize
>
AlignedBuffer
<
N
>
{
fn
layout
(
)
-
>
Layout
{
Layout
:
:
from_size_align
(
N
N
)
.
unwrap
(
)
}
fn
new
(
)
-
>
Self
{
let
p
=
unsafe
{
alloc_zeroed
(
Self
:
:
layout
(
)
)
}
as
*
mut
[
u8
;
N
]
;
Self
(
NonNull
:
:
new
(
p
)
.
unwrap
(
)
)
}
fn
buf
(
&
mut
self
)
-
>
&
mut
[
u8
;
N
]
{
unsafe
{
self
.
0
.
as_mut
(
)
}
}
}
impl
<
const
N
:
usize
>
Drop
for
AlignedBuffer
<
N
>
{
fn
drop
(
&
mut
self
)
{
unsafe
{
dealloc
(
self
.
0
.
as_ptr
(
)
as
*
mut
u8
Self
:
:
layout
(
)
)
}
}
}
#
[
inline
(
always
)
]
fn
bench
<
const
N
:
usize
>
(
b
:
&
mut
test
:
:
Bencher
)
{
let
mut
ab
=
AlignedBuffer
:
:
<
N
>
:
:
new
(
)
;
let
buf
=
ab
.
buf
(
)
;
b
.
iter
(
|
|
{
getrandom
:
:
getrandom
(
&
mut
buf
[
.
.
]
)
.
unwrap
(
)
;
test
:
:
black_box
(
&
buf
)
;
}
)
;
b
.
bytes
=
N
as
u64
;
}
#
[
inline
(
always
)
]
fn
bench_with_init
<
const
N
:
usize
>
(
b
:
&
mut
test
:
:
Bencher
)
{
let
mut
ab
=
AlignedBuffer
:
:
<
N
>
:
:
new
(
)
;
let
buf
=
ab
.
buf
(
)
;
b
.
iter
(
|
|
{
for
byte
in
buf
.
iter_mut
(
)
{
*
byte
=
0
;
}
getrandom
:
:
getrandom
(
&
mut
buf
[
.
.
]
)
.
unwrap
(
)
;
test
:
:
black_box
(
&
buf
)
;
}
)
;
b
.
bytes
=
N
as
u64
;
}
const
SEED
:
usize
=
32
;
const
PAGE
:
usize
=
4096
;
const
LARGE
:
usize
=
1
<
<
21
;
#
[
bench
]
fn
bench_seed
(
b
:
&
mut
test
:
:
Bencher
)
{
bench
:
:
<
SEED
>
(
b
)
;
}
#
[
bench
]
fn
bench_seed_init
(
b
:
&
mut
test
:
:
Bencher
)
{
bench_with_init
:
:
<
SEED
>
(
b
)
;
}
#
[
bench
]
fn
bench_page
(
b
:
&
mut
test
:
:
Bencher
)
{
bench
:
:
<
PAGE
>
(
b
)
;
}
#
[
bench
]
fn
bench_page_init
(
b
:
&
mut
test
:
:
Bencher
)
{
bench_with_init
:
:
<
PAGE
>
(
b
)
;
}
#
[
bench
]
fn
bench_large
(
b
:
&
mut
test
:
:
Bencher
)
{
bench
:
:
<
LARGE
>
(
b
)
;
}
#
[
bench
]
fn
bench_large_init
(
b
:
&
mut
test
:
:
Bencher
)
{
bench_with_init
:
:
<
LARGE
>
(
b
)
;
}
