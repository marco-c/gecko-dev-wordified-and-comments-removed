use
std
:
:
borrow
:
:
Cow
;
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
ffi
:
:
{
OsStr
OsString
}
;
use
std
:
:
iter
:
:
Map
;
use
std
:
:
slice
;
use
vec_map
;
use
INVALID_UTF8
;
use
args
:
:
MatchedArg
;
use
args
:
:
SubCommand
;
#
[
derive
(
Debug
Clone
)
]
pub
struct
ArgMatches
<
'
a
>
{
#
[
doc
(
hidden
)
]
pub
args
:
HashMap
<
&
'
a
str
MatchedArg
>
#
[
doc
(
hidden
)
]
pub
subcommand
:
Option
<
Box
<
SubCommand
<
'
a
>
>
>
#
[
doc
(
hidden
)
]
pub
usage
:
Option
<
String
>
}
impl
<
'
a
>
Default
for
ArgMatches
<
'
a
>
{
fn
default
(
)
-
>
Self
{
ArgMatches
{
args
:
HashMap
:
:
new
(
)
subcommand
:
None
usage
:
None
}
}
}
impl
<
'
a
>
ArgMatches
<
'
a
>
{
#
[
doc
(
hidden
)
]
pub
fn
new
(
)
-
>
Self
{
ArgMatches
{
.
.
Default
:
:
default
(
)
}
}
pub
fn
value_of
<
S
:
AsRef
<
str
>
>
(
&
self
name
:
S
)
-
>
Option
<
&
str
>
{
if
let
Some
(
arg
)
=
self
.
args
.
get
(
name
.
as_ref
(
)
)
{
if
let
Some
(
v
)
=
arg
.
vals
.
values
(
)
.
nth
(
0
)
{
return
Some
(
v
.
to_str
(
)
.
expect
(
INVALID_UTF8
)
)
;
}
}
None
}
#
[
cfg_attr
(
not
(
unix
)
doc
=
"
ignore
"
)
]
#
[
cfg_attr
(
unix
doc
=
"
"
)
]
pub
fn
value_of_lossy
<
S
:
AsRef
<
str
>
>
(
&
'
a
self
name
:
S
)
-
>
Option
<
Cow
<
'
a
str
>
>
{
if
let
Some
(
arg
)
=
self
.
args
.
get
(
name
.
as_ref
(
)
)
{
if
let
Some
(
v
)
=
arg
.
vals
.
values
(
)
.
nth
(
0
)
{
return
Some
(
v
.
to_string_lossy
(
)
)
;
}
}
None
}
#
[
cfg_attr
(
not
(
unix
)
doc
=
"
ignore
"
)
]
#
[
cfg_attr
(
unix
doc
=
"
"
)
]
pub
fn
value_of_os
<
S
:
AsRef
<
str
>
>
(
&
self
name
:
S
)
-
>
Option
<
&
OsStr
>
{
self
.
args
.
get
(
name
.
as_ref
(
)
)
.
map_or
(
None
|
arg
|
arg
.
vals
.
values
(
)
.
nth
(
0
)
.
map
(
|
v
|
v
.
as_os_str
(
)
)
)
}
pub
fn
values_of
<
S
:
AsRef
<
str
>
>
(
&
'
a
self
name
:
S
)
-
>
Option
<
Values
<
'
a
>
>
{
if
let
Some
(
arg
)
=
self
.
args
.
get
(
name
.
as_ref
(
)
)
{
fn
to_str_slice
(
o
:
&
OsString
)
-
>
&
str
{
o
.
to_str
(
)
.
expect
(
INVALID_UTF8
)
}
let
to_str_slice
:
fn
(
&
OsString
)
-
>
&
str
=
to_str_slice
;
return
Some
(
Values
{
iter
:
arg
.
vals
.
values
(
)
.
map
(
to_str_slice
)
}
)
;
}
None
}
#
[
cfg_attr
(
not
(
unix
)
doc
=
"
ignore
"
)
]
#
[
cfg_attr
(
unix
doc
=
"
"
)
]
pub
fn
values_of_lossy
<
S
:
AsRef
<
str
>
>
(
&
'
a
self
name
:
S
)
-
>
Option
<
Vec
<
String
>
>
{
if
let
Some
(
arg
)
=
self
.
args
.
get
(
name
.
as_ref
(
)
)
{
return
Some
(
arg
.
vals
.
values
(
)
.
map
(
|
v
|
v
.
to_string_lossy
(
)
.
into_owned
(
)
)
.
collect
(
)
)
;
}
None
}
#
[
cfg_attr
(
not
(
unix
)
doc
=
"
ignore
"
)
]
#
[
cfg_attr
(
unix
doc
=
"
"
)
]
pub
fn
values_of_os
<
S
:
AsRef
<
str
>
>
(
&
'
a
self
name
:
S
)
-
>
Option
<
OsValues
<
'
a
>
>
{
fn
to_str_slice
(
o
:
&
OsString
)
-
>
&
OsStr
{
&
*
o
}
let
to_str_slice
:
fn
(
&
'
a
OsString
)
-
>
&
'
a
OsStr
=
to_str_slice
;
if
let
Some
(
arg
)
=
self
.
args
.
get
(
name
.
as_ref
(
)
)
{
return
Some
(
OsValues
{
iter
:
arg
.
vals
.
values
(
)
.
map
(
to_str_slice
)
}
)
;
}
None
}
pub
fn
is_present
<
S
:
AsRef
<
str
>
>
(
&
self
name
:
S
)
-
>
bool
{
if
let
Some
(
ref
sc
)
=
self
.
subcommand
{
if
sc
.
name
=
=
name
.
as_ref
(
)
{
return
true
;
}
}
self
.
args
.
contains_key
(
name
.
as_ref
(
)
)
}
pub
fn
occurrences_of
<
S
:
AsRef
<
str
>
>
(
&
self
name
:
S
)
-
>
u64
{
self
.
args
.
get
(
name
.
as_ref
(
)
)
.
map_or
(
0
|
a
|
a
.
occurs
)
}
pub
fn
subcommand_matches
<
S
:
AsRef
<
str
>
>
(
&
self
name
:
S
)
-
>
Option
<
&
ArgMatches
<
'
a
>
>
{
if
let
Some
(
ref
s
)
=
self
.
subcommand
{
if
s
.
name
=
=
name
.
as_ref
(
)
{
return
Some
(
&
s
.
matches
)
;
}
}
None
}
pub
fn
subcommand_name
(
&
self
)
-
>
Option
<
&
str
>
{
self
.
subcommand
.
as_ref
(
)
.
map
(
|
sc
|
&
sc
.
name
[
.
.
]
)
}
pub
fn
subcommand
(
&
self
)
-
>
(
&
str
Option
<
&
ArgMatches
<
'
a
>
>
)
{
self
.
subcommand
.
as_ref
(
)
.
map_or
(
(
"
"
None
)
|
sc
|
(
&
sc
.
name
[
.
.
]
Some
(
&
sc
.
matches
)
)
)
}
pub
fn
usage
(
&
self
)
-
>
&
str
{
self
.
usage
.
as_ref
(
)
.
map_or
(
"
"
|
u
|
&
u
[
.
.
]
)
}
}
#
[
derive
(
Clone
)
]
#
[
allow
(
missing_debug_implementations
)
]
pub
struct
Values
<
'
a
>
{
iter
:
Map
<
vec_map
:
:
Values
<
'
a
OsString
>
fn
(
&
'
a
OsString
)
-
>
&
'
a
str
>
}
impl
<
'
a
>
Iterator
for
Values
<
'
a
>
{
type
Item
=
&
'
a
str
;
fn
next
(
&
mut
self
)
-
>
Option
<
&
'
a
str
>
{
self
.
iter
.
next
(
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
}
impl
<
'
a
>
DoubleEndedIterator
for
Values
<
'
a
>
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
&
'
a
str
>
{
self
.
iter
.
next_back
(
)
}
}
#
[
derive
(
Clone
)
]
pub
struct
Iter
<
'
a
V
:
'
a
>
{
front
:
usize
back
:
usize
iter
:
slice
:
:
Iter
<
'
a
Option
<
V
>
>
}
impl
<
'
a
V
>
Iterator
for
Iter
<
'
a
V
>
{
type
Item
=
&
'
a
V
;
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
&
'
a
V
>
{
while
self
.
front
<
self
.
back
{
if
let
Some
(
elem
)
=
self
.
iter
.
next
(
)
{
if
let
Some
(
x
)
=
elem
.
as_ref
(
)
{
self
.
front
+
=
1
;
return
Some
(
x
)
;
}
}
self
.
front
+
=
1
;
}
None
}
#
[
inline
]
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
(
0
Some
(
self
.
back
-
self
.
front
)
)
}
}
impl
<
'
a
V
>
DoubleEndedIterator
for
Iter
<
'
a
V
>
{
#
[
inline
]
fn
next_back
(
&
mut
self
)
-
>
Option
<
&
'
a
V
>
{
while
self
.
front
<
self
.
back
{
if
let
Some
(
elem
)
=
self
.
iter
.
next_back
(
)
{
if
let
Some
(
x
)
=
elem
.
as_ref
(
)
{
self
.
back
-
=
1
;
return
Some
(
x
)
;
}
}
self
.
back
-
=
1
;
}
None
}
}
#
[
cfg_attr
(
not
(
unix
)
doc
=
"
ignore
"
)
]
#
[
cfg_attr
(
unix
doc
=
"
"
)
]
#
[
derive
(
Clone
)
]
#
[
allow
(
missing_debug_implementations
)
]
pub
struct
OsValues
<
'
a
>
{
iter
:
Map
<
vec_map
:
:
Values
<
'
a
OsString
>
fn
(
&
'
a
OsString
)
-
>
&
'
a
OsStr
>
}
impl
<
'
a
>
Iterator
for
OsValues
<
'
a
>
{
type
Item
=
&
'
a
OsStr
;
fn
next
(
&
mut
self
)
-
>
Option
<
&
'
a
OsStr
>
{
self
.
iter
.
next
(
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
}
impl
<
'
a
>
DoubleEndedIterator
for
OsValues
<
'
a
>
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
&
'
a
OsStr
>
{
self
.
iter
.
next_back
(
)
}
}
