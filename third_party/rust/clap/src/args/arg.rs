#
[
cfg
(
feature
=
"
yaml
"
)
]
use
std
:
:
collections
:
:
BTreeMap
;
use
std
:
:
rc
:
:
Rc
;
use
std
:
:
ffi
:
:
{
OsString
OsStr
}
;
#
[
cfg
(
feature
=
"
yaml
"
)
]
use
yaml_rust
:
:
Yaml
;
use
vec_map
:
:
VecMap
;
use
usage_parser
:
:
UsageParser
;
use
args
:
:
settings
:
:
{
ArgFlags
ArgSettings
}
;
#
[
allow
(
missing_debug_implementations
)
]
pub
struct
Arg
<
'
a
'
b
>
where
'
a
:
'
b
{
#
[
doc
(
hidden
)
]
pub
name
:
&
'
a
str
#
[
doc
(
hidden
)
]
pub
short
:
Option
<
char
>
#
[
doc
(
hidden
)
]
pub
long
:
Option
<
&
'
b
str
>
#
[
doc
(
hidden
)
]
pub
aliases
:
Option
<
Vec
<
(
&
'
b
str
bool
)
>
>
#
[
doc
(
hidden
)
]
pub
help
:
Option
<
&
'
b
str
>
#
[
doc
(
hidden
)
]
pub
index
:
Option
<
u64
>
#
[
doc
(
hidden
)
]
pub
blacklist
:
Option
<
Vec
<
&
'
a
str
>
>
#
[
doc
(
hidden
)
]
pub
possible_vals
:
Option
<
Vec
<
&
'
b
str
>
>
#
[
doc
(
hidden
)
]
pub
requires
:
Option
<
Vec
<
(
Option
<
&
'
b
str
>
&
'
a
str
)
>
>
#
[
doc
(
hidden
)
]
pub
groups
:
Option
<
Vec
<
&
'
a
str
>
>
#
[
doc
(
hidden
)
]
pub
val_names
:
Option
<
VecMap
<
&
'
b
str
>
>
#
[
doc
(
hidden
)
]
pub
num_vals
:
Option
<
u64
>
#
[
doc
(
hidden
)
]
pub
max_vals
:
Option
<
u64
>
#
[
doc
(
hidden
)
]
pub
min_vals
:
Option
<
u64
>
#
[
doc
(
hidden
)
]
pub
validator
:
Option
<
Rc
<
Fn
(
String
)
-
>
Result
<
(
)
String
>
>
>
#
[
doc
(
hidden
)
]
pub
validator_os
:
Option
<
Rc
<
Fn
(
&
OsStr
)
-
>
Result
<
(
)
OsString
>
>
>
#
[
doc
(
hidden
)
]
pub
overrides
:
Option
<
Vec
<
&
'
a
str
>
>
#
[
doc
(
hidden
)
]
pub
settings
:
ArgFlags
#
[
doc
(
hidden
)
]
pub
val_delim
:
Option
<
char
>
#
[
doc
(
hidden
)
]
pub
default_val
:
Option
<
&
'
a
str
>
#
[
doc
(
hidden
)
]
pub
default_vals_ifs
:
Option
<
VecMap
<
(
&
'
a
str
Option
<
&
'
b
str
>
&
'
b
str
)
>
>
#
[
doc
(
hidden
)
]
pub
disp_ord
:
usize
#
[
doc
(
hidden
)
]
pub
r_unless
:
Option
<
Vec
<
&
'
a
str
>
>
#
[
doc
(
hidden
)
]
pub
r_ifs
:
Option
<
Vec
<
(
&
'
a
str
&
'
b
str
)
>
>
#
[
doc
(
hidden
)
]
pub
val_terminator
:
Option
<
&
'
b
str
>
}
impl
<
'
a
'
b
>
Default
for
Arg
<
'
a
'
b
>
{
fn
default
(
)
-
>
Self
{
Arg
{
name
:
"
"
.
as_ref
(
)
short
:
None
long
:
None
aliases
:
None
help
:
None
index
:
None
blacklist
:
None
possible_vals
:
None
requires
:
None
groups
:
None
val_names
:
None
num_vals
:
None
max_vals
:
None
min_vals
:
None
validator
:
None
validator_os
:
None
overrides
:
None
settings
:
ArgFlags
:
:
new
(
)
val_delim
:
None
default_val
:
None
default_vals_ifs
:
None
disp_ord
:
999
r_unless
:
None
r_ifs
:
None
val_terminator
:
None
}
}
}
impl
<
'
a
'
b
>
Arg
<
'
a
'
b
>
{
pub
fn
with_name
(
n
:
&
'
a
str
)
-
>
Self
{
Arg
{
name
:
n
.
.
Default
:
:
default
(
)
}
}
#
[
cfg
(
feature
=
"
yaml
"
)
]
pub
fn
from_yaml
(
y
:
&
BTreeMap
<
Yaml
Yaml
>
)
-
>
Arg
{
let
name_yml
=
y
.
keys
(
)
.
nth
(
0
)
.
unwrap
(
)
;
let
name_str
=
name_yml
.
as_str
(
)
.
unwrap
(
)
;
let
mut
a
=
Arg
:
:
with_name
(
name_str
)
;
let
arg_settings
=
y
.
get
(
name_yml
)
.
unwrap
(
)
.
as_hash
(
)
.
unwrap
(
)
;
for
(
k
v
)
in
arg_settings
.
iter
(
)
{
a
=
match
k
.
as_str
(
)
.
unwrap
(
)
{
"
short
"
=
>
yaml_to_str
!
(
a
v
short
)
"
long
"
=
>
yaml_to_str
!
(
a
v
long
)
"
aliases
"
=
>
yaml_vec_or_str
!
(
v
a
alias
)
"
help
"
=
>
yaml_to_str
!
(
a
v
help
)
"
required
"
=
>
yaml_to_bool
!
(
a
v
required
)
"
required_if
"
=
>
yaml_tuple2
!
(
a
v
required_if
)
"
required_ifs
"
=
>
yaml_tuple2
!
(
a
v
required_if
)
"
takes_value
"
=
>
yaml_to_bool
!
(
a
v
takes_value
)
"
index
"
=
>
yaml_to_u64
!
(
a
v
index
)
"
global
"
=
>
yaml_to_bool
!
(
a
v
global
)
"
multiple
"
=
>
yaml_to_bool
!
(
a
v
multiple
)
"
hidden
"
=
>
yaml_to_bool
!
(
a
v
hidden
)
"
next_line_help
"
=
>
yaml_to_bool
!
(
a
v
next_line_help
)
"
empty_values
"
=
>
yaml_to_bool
!
(
a
v
empty_values
)
"
group
"
=
>
yaml_to_str
!
(
a
v
group
)
"
number_of_values
"
=
>
yaml_to_u64
!
(
a
v
number_of_values
)
"
max_values
"
=
>
yaml_to_u64
!
(
a
v
max_values
)
"
min_values
"
=
>
yaml_to_u64
!
(
a
v
min_values
)
"
value_name
"
=
>
yaml_to_str
!
(
a
v
value_name
)
"
use_delimiter
"
=
>
yaml_to_bool
!
(
a
v
use_delimiter
)
"
allow_hyphen_values
"
=
>
yaml_to_bool
!
(
a
v
allow_hyphen_values
)
"
require_delimiter
"
=
>
yaml_to_bool
!
(
a
v
require_delimiter
)
"
value_delimiter
"
=
>
yaml_to_str
!
(
a
v
value_delimiter
)
"
required_unless
"
=
>
yaml_to_str
!
(
a
v
required_unless
)
"
display_order
"
=
>
yaml_to_usize
!
(
a
v
display_order
)
"
default_value
"
=
>
yaml_to_str
!
(
a
v
default_value
)
"
default_value_if
"
=
>
yaml_tuple3
!
(
a
v
default_value_if
)
"
default_value_ifs
"
=
>
yaml_tuple3
!
(
a
v
default_value_if
)
"
value_names
"
=
>
yaml_vec_or_str
!
(
v
a
value_name
)
"
groups
"
=
>
yaml_vec_or_str
!
(
v
a
group
)
"
requires
"
=
>
yaml_vec_or_str
!
(
v
a
requires
)
"
requires_if
"
=
>
yaml_tuple2
!
(
a
v
requires_if
)
"
requires_ifs
"
=
>
yaml_tuple2
!
(
a
v
requires_if
)
"
conflicts_with
"
=
>
yaml_vec_or_str
!
(
v
a
conflicts_with
)
"
overrides_with
"
=
>
yaml_vec_or_str
!
(
v
a
overrides_with
)
"
possible_values
"
=
>
yaml_vec_or_str
!
(
v
a
possible_value
)
"
required_unless_one
"
=
>
yaml_vec_or_str
!
(
v
a
required_unless
)
"
required_unless_all
"
=
>
{
a
=
yaml_vec_or_str
!
(
v
a
required_unless
)
;
a
.
setb
(
ArgSettings
:
:
RequiredUnlessAll
)
;
a
}
s
=
>
{
panic
!
(
"
Unknown
Arg
setting
'
{
}
'
in
YAML
file
for
arg
'
{
}
'
"
s
name_str
)
}
}
}
a
}
pub
fn
from_usage
(
u
:
&
'
a
str
)
-
>
Self
{
let
parser
=
UsageParser
:
:
from_usage
(
u
)
;
parser
.
parse
(
)
}
pub
fn
short
<
S
:
AsRef
<
str
>
>
(
mut
self
s
:
S
)
-
>
Self
{
self
.
short
=
s
.
as_ref
(
)
.
trim_left_matches
(
|
c
|
c
=
=
'
-
'
)
.
chars
(
)
.
nth
(
0
)
;
self
}
pub
fn
long
(
mut
self
l
:
&
'
b
str
)
-
>
Self
{
self
.
long
=
Some
(
l
.
trim_left_matches
(
|
c
|
c
=
=
'
-
'
)
)
;
self
}
pub
fn
alias
<
S
:
Into
<
&
'
b
str
>
>
(
mut
self
name
:
S
)
-
>
Self
{
if
let
Some
(
ref
mut
als
)
=
self
.
aliases
{
als
.
push
(
(
name
.
into
(
)
false
)
)
;
}
else
{
self
.
aliases
=
Some
(
vec
!
[
(
name
.
into
(
)
false
)
]
)
;
}
self
}
pub
fn
aliases
(
mut
self
names
:
&
[
&
'
b
str
]
)
-
>
Self
{
if
let
Some
(
ref
mut
als
)
=
self
.
aliases
{
for
n
in
names
{
als
.
push
(
(
n
false
)
)
;
}
}
else
{
self
.
aliases
=
Some
(
names
.
iter
(
)
.
map
(
|
n
|
(
*
n
false
)
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
)
;
}
self
}
pub
fn
visible_alias
<
S
:
Into
<
&
'
b
str
>
>
(
mut
self
name
:
S
)
-
>
Self
{
if
let
Some
(
ref
mut
als
)
=
self
.
aliases
{
als
.
push
(
(
name
.
into
(
)
true
)
)
;
}
else
{
self
.
aliases
=
Some
(
vec
!
[
(
name
.
into
(
)
true
)
]
)
;
}
self
}
pub
fn
visible_aliases
(
mut
self
names
:
&
[
&
'
b
str
]
)
-
>
Self
{
if
let
Some
(
ref
mut
als
)
=
self
.
aliases
{
for
n
in
names
{
als
.
push
(
(
n
true
)
)
;
}
}
else
{
self
.
aliases
=
Some
(
names
.
iter
(
)
.
map
(
|
n
|
(
*
n
true
)
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
)
;
}
self
}
pub
fn
help
(
mut
self
h
:
&
'
b
str
)
-
>
Self
{
self
.
help
=
Some
(
h
)
;
self
}
pub
fn
required
(
self
r
:
bool
)
-
>
Self
{
if
r
{
self
.
set
(
ArgSettings
:
:
Required
)
}
else
{
self
.
unset
(
ArgSettings
:
:
Required
)
}
}
pub
fn
allow_hyphen_values
(
self
a
:
bool
)
-
>
Self
{
if
a
{
self
.
set
(
ArgSettings
:
:
AllowLeadingHyphen
)
}
else
{
self
.
unset
(
ArgSettings
:
:
AllowLeadingHyphen
)
}
}
pub
fn
required_unless
(
mut
self
name
:
&
'
a
str
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
r_unless
{
vec
.
push
(
name
)
;
}
else
{
self
.
r_unless
=
Some
(
vec
!
[
name
]
)
;
}
self
.
required
(
true
)
}
pub
fn
required_unless_all
(
mut
self
names
:
&
[
&
'
a
str
]
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
r_unless
{
for
s
in
names
{
vec
.
push
(
s
)
;
}
}
else
{
self
.
r_unless
=
Some
(
names
.
iter
(
)
.
map
(
|
s
|
*
s
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
)
;
}
self
.
setb
(
ArgSettings
:
:
RequiredUnlessAll
)
;
self
.
required
(
true
)
}
pub
fn
required_unless_one
(
mut
self
names
:
&
[
&
'
a
str
]
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
r_unless
{
for
s
in
names
{
vec
.
push
(
s
)
;
}
}
else
{
self
.
r_unless
=
Some
(
names
.
iter
(
)
.
map
(
|
s
|
*
s
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
)
;
}
self
.
required
(
true
)
}
pub
fn
conflicts_with
(
mut
self
name
:
&
'
a
str
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
blacklist
{
vec
.
push
(
name
)
;
}
else
{
self
.
blacklist
=
Some
(
vec
!
[
name
]
)
;
}
self
}
pub
fn
conflicts_with_all
(
mut
self
names
:
&
[
&
'
a
str
]
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
blacklist
{
for
s
in
names
{
vec
.
push
(
s
)
;
}
}
else
{
self
.
blacklist
=
Some
(
names
.
iter
(
)
.
map
(
|
s
|
*
s
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
)
;
}
self
}
pub
fn
overrides_with
(
mut
self
name
:
&
'
a
str
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
overrides
{
vec
.
push
(
name
.
as_ref
(
)
)
;
}
else
{
self
.
overrides
=
Some
(
vec
!
[
name
.
as_ref
(
)
]
)
;
}
self
}
pub
fn
overrides_with_all
(
mut
self
names
:
&
[
&
'
a
str
]
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
overrides
{
for
s
in
names
{
vec
.
push
(
s
)
;
}
}
else
{
self
.
overrides
=
Some
(
names
.
iter
(
)
.
map
(
|
s
|
*
s
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
)
;
}
self
}
pub
fn
requires
(
mut
self
name
:
&
'
a
str
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
requires
{
vec
.
push
(
(
None
name
)
)
;
}
else
{
let
mut
vec
=
vec
!
[
]
;
vec
.
push
(
(
None
name
)
)
;
self
.
requires
=
Some
(
vec
)
;
}
self
}
pub
fn
requires_if
(
mut
self
val
:
&
'
b
str
arg
:
&
'
a
str
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
requires
{
vec
.
push
(
(
Some
(
val
)
arg
)
)
;
}
else
{
self
.
requires
=
Some
(
vec
!
[
(
Some
(
val
)
arg
)
]
)
;
}
self
}
pub
fn
requires_ifs
(
mut
self
ifs
:
&
[
(
&
'
b
str
&
'
a
str
)
]
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
requires
{
for
&
(
val
arg
)
in
ifs
{
vec
.
push
(
(
Some
(
val
)
arg
)
)
;
}
}
else
{
let
mut
vec
=
vec
!
[
]
;
for
&
(
val
arg
)
in
ifs
{
vec
.
push
(
(
Some
(
val
)
arg
)
)
;
}
self
.
requires
=
Some
(
vec
)
;
}
self
}
pub
fn
required_if
(
mut
self
arg
:
&
'
a
str
val
:
&
'
b
str
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
r_ifs
{
vec
.
push
(
(
arg
val
)
)
;
}
else
{
self
.
r_ifs
=
Some
(
vec
!
[
(
arg
val
)
]
)
;
}
self
}
pub
fn
required_ifs
(
mut
self
ifs
:
&
[
(
&
'
a
str
&
'
b
str
)
]
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
r_ifs
{
for
r_if
in
ifs
{
vec
.
push
(
(
r_if
.
0
r_if
.
1
)
)
;
}
}
else
{
let
mut
vec
=
vec
!
[
]
;
for
r_if
in
ifs
{
vec
.
push
(
(
r_if
.
0
r_if
.
1
)
)
;
}
self
.
r_ifs
=
Some
(
vec
)
;
}
self
}
pub
fn
requires_all
(
mut
self
names
:
&
[
&
'
a
str
]
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
requires
{
for
s
in
names
{
vec
.
push
(
(
None
s
)
)
;
}
}
else
{
let
mut
vec
=
vec
!
[
]
;
for
s
in
names
{
vec
.
push
(
(
None
*
s
)
)
;
}
self
.
requires
=
Some
(
vec
)
;
}
self
}
pub
fn
takes_value
(
self
tv
:
bool
)
-
>
Self
{
if
tv
{
self
.
set
(
ArgSettings
:
:
TakesValue
)
}
else
{
self
.
unset
(
ArgSettings
:
:
TakesValue
)
}
}
pub
fn
hide_possible_values
(
self
hide
:
bool
)
-
>
Self
{
if
hide
{
self
.
set
(
ArgSettings
:
:
HidePossibleValues
)
}
else
{
self
.
unset
(
ArgSettings
:
:
HidePossibleValues
)
}
}
pub
fn
index
(
mut
self
idx
:
u64
)
-
>
Self
{
self
.
index
=
Some
(
idx
)
;
self
}
pub
fn
multiple
(
self
multi
:
bool
)
-
>
Self
{
if
multi
{
self
.
set
(
ArgSettings
:
:
Multiple
)
}
else
{
self
.
unset
(
ArgSettings
:
:
Multiple
)
}
}
pub
fn
value_terminator
(
mut
self
term
:
&
'
b
str
)
-
>
Self
{
self
.
setb
(
ArgSettings
:
:
TakesValue
)
;
self
.
val_terminator
=
Some
(
term
)
;
self
}
pub
fn
global
(
self
g
:
bool
)
-
>
Self
{
if
g
{
self
.
set
(
ArgSettings
:
:
Global
)
}
else
{
self
.
unset
(
ArgSettings
:
:
Global
)
}
}
pub
fn
empty_values
(
mut
self
ev
:
bool
)
-
>
Self
{
if
ev
{
self
.
set
(
ArgSettings
:
:
EmptyValues
)
}
else
{
self
=
self
.
set
(
ArgSettings
:
:
TakesValue
)
;
self
.
unset
(
ArgSettings
:
:
EmptyValues
)
}
}
pub
fn
hidden
(
self
h
:
bool
)
-
>
Self
{
if
h
{
self
.
set
(
ArgSettings
:
:
Hidden
)
}
else
{
self
.
unset
(
ArgSettings
:
:
Hidden
)
}
}
pub
fn
possible_values
(
mut
self
names
:
&
[
&
'
b
str
]
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
possible_vals
{
for
s
in
names
{
vec
.
push
(
s
)
;
}
}
else
{
self
.
possible_vals
=
Some
(
names
.
iter
(
)
.
map
(
|
s
|
*
s
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
)
;
}
self
}
pub
fn
possible_value
(
mut
self
name
:
&
'
b
str
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
possible_vals
{
vec
.
push
(
name
)
;
}
else
{
self
.
possible_vals
=
Some
(
vec
!
[
name
]
)
;
}
self
}
pub
fn
group
(
mut
self
name
:
&
'
a
str
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
groups
{
vec
.
push
(
name
)
;
}
else
{
self
.
groups
=
Some
(
vec
!
[
name
]
)
;
}
self
}
pub
fn
groups
(
mut
self
names
:
&
[
&
'
a
str
]
)
-
>
Self
{
if
let
Some
(
ref
mut
vec
)
=
self
.
groups
{
for
s
in
names
{
vec
.
push
(
s
)
;
}
}
else
{
self
.
groups
=
Some
(
names
.
into_iter
(
)
.
map
(
|
s
|
*
s
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
)
;
}
self
}
pub
fn
number_of_values
(
mut
self
qty
:
u64
)
-
>
Self
{
self
.
setb
(
ArgSettings
:
:
TakesValue
)
;
self
.
num_vals
=
Some
(
qty
)
;
self
}
pub
fn
validator
<
F
>
(
mut
self
f
:
F
)
-
>
Self
where
F
:
Fn
(
String
)
-
>
Result
<
(
)
String
>
+
'
static
{
self
.
validator
=
Some
(
Rc
:
:
new
(
f
)
)
;
self
}
pub
fn
validator_os
<
F
>
(
mut
self
f
:
F
)
-
>
Self
where
F
:
Fn
(
&
OsStr
)
-
>
Result
<
(
)
OsString
>
+
'
static
{
self
.
validator_os
=
Some
(
Rc
:
:
new
(
f
)
)
;
self
}
pub
fn
max_values
(
mut
self
qty
:
u64
)
-
>
Self
{
self
.
setb
(
ArgSettings
:
:
TakesValue
)
;
self
.
max_vals
=
Some
(
qty
)
;
self
}
pub
fn
min_values
(
mut
self
qty
:
u64
)
-
>
Self
{
self
.
min_vals
=
Some
(
qty
)
;
self
.
set
(
ArgSettings
:
:
TakesValue
)
}
pub
fn
use_delimiter
(
mut
self
d
:
bool
)
-
>
Self
{
if
d
{
if
self
.
val_delim
.
is_none
(
)
{
self
.
val_delim
=
Some
(
'
'
)
;
}
self
.
setb
(
ArgSettings
:
:
TakesValue
)
;
self
.
setb
(
ArgSettings
:
:
UseValueDelimiter
)
;
self
.
unset
(
ArgSettings
:
:
ValueDelimiterNotSet
)
}
else
{
self
.
val_delim
=
None
;
self
.
unsetb
(
ArgSettings
:
:
UseValueDelimiter
)
;
self
.
unset
(
ArgSettings
:
:
ValueDelimiterNotSet
)
}
}
pub
fn
require_delimiter
(
mut
self
d
:
bool
)
-
>
Self
{
if
d
{
self
=
self
.
use_delimiter
(
true
)
;
self
.
unsetb
(
ArgSettings
:
:
ValueDelimiterNotSet
)
;
self
.
setb
(
ArgSettings
:
:
UseValueDelimiter
)
;
self
.
set
(
ArgSettings
:
:
RequireDelimiter
)
}
else
{
self
=
self
.
use_delimiter
(
false
)
;
self
.
unsetb
(
ArgSettings
:
:
UseValueDelimiter
)
;
self
.
unset
(
ArgSettings
:
:
RequireDelimiter
)
}
}
pub
fn
value_delimiter
(
mut
self
d
:
&
str
)
-
>
Self
{
self
.
unsetb
(
ArgSettings
:
:
ValueDelimiterNotSet
)
;
self
.
setb
(
ArgSettings
:
:
TakesValue
)
;
self
.
setb
(
ArgSettings
:
:
UseValueDelimiter
)
;
self
.
val_delim
=
Some
(
d
.
chars
(
)
.
nth
(
0
)
.
expect
(
"
Failed
to
get
value_delimiter
from
arg
"
)
)
;
self
}
pub
fn
value_names
(
mut
self
names
:
&
[
&
'
b
str
]
)
-
>
Self
{
self
.
setb
(
ArgSettings
:
:
TakesValue
)
;
if
self
.
settings
.
is_set
(
ArgSettings
:
:
ValueDelimiterNotSet
)
{
self
.
unsetb
(
ArgSettings
:
:
ValueDelimiterNotSet
)
;
self
.
setb
(
ArgSettings
:
:
UseValueDelimiter
)
;
}
if
let
Some
(
ref
mut
vals
)
=
self
.
val_names
{
let
mut
l
=
vals
.
len
(
)
;
for
s
in
names
{
vals
.
insert
(
l
s
)
;
l
+
=
1
;
}
}
else
{
let
mut
vm
=
VecMap
:
:
new
(
)
;
for
(
i
n
)
in
names
.
iter
(
)
.
enumerate
(
)
{
vm
.
insert
(
i
*
n
)
;
}
self
.
val_names
=
Some
(
vm
)
;
}
self
}
pub
fn
value_name
(
mut
self
name
:
&
'
b
str
)
-
>
Self
{
self
.
setb
(
ArgSettings
:
:
TakesValue
)
;
if
let
Some
(
ref
mut
vals
)
=
self
.
val_names
{
let
l
=
vals
.
len
(
)
;
vals
.
insert
(
l
name
)
;
}
else
{
let
mut
vm
=
VecMap
:
:
new
(
)
;
vm
.
insert
(
0
name
)
;
self
.
val_names
=
Some
(
vm
)
;
}
self
}
pub
fn
default_value
(
mut
self
val
:
&
'
a
str
)
-
>
Self
{
self
.
setb
(
ArgSettings
:
:
TakesValue
)
;
self
.
default_val
=
Some
(
val
)
;
self
}
pub
fn
default_value_if
(
mut
self
arg
:
&
'
a
str
val
:
Option
<
&
'
b
str
>
default
:
&
'
b
str
)
-
>
Self
{
self
.
setb
(
ArgSettings
:
:
TakesValue
)
;
if
let
Some
(
ref
mut
vm
)
=
self
.
default_vals_ifs
{
let
l
=
vm
.
len
(
)
;
vm
.
insert
(
l
(
arg
val
default
)
)
;
}
else
{
let
mut
vm
=
VecMap
:
:
new
(
)
;
vm
.
insert
(
0
(
arg
val
default
)
)
;
self
.
default_vals_ifs
=
Some
(
vm
)
;
}
self
}
#
[
cfg_attr
(
feature
=
"
lints
"
allow
(
explicit_counter_loop
)
)
]
pub
fn
default_value_ifs
(
mut
self
ifs
:
&
[
(
&
'
a
str
Option
<
&
'
b
str
>
&
'
b
str
)
]
)
-
>
Self
{
self
.
setb
(
ArgSettings
:
:
TakesValue
)
;
if
let
Some
(
ref
mut
vm
)
=
self
.
default_vals_ifs
{
let
mut
l
=
vm
.
len
(
)
;
for
&
(
arg
val
default
)
in
ifs
{
vm
.
insert
(
l
(
arg
val
default
)
)
;
l
+
=
1
;
}
}
else
{
let
mut
vm
=
VecMap
:
:
new
(
)
;
let
mut
l
=
0
;
for
&
(
arg
val
default
)
in
ifs
{
vm
.
insert
(
l
(
arg
val
default
)
)
;
l
+
=
1
;
}
self
.
default_vals_ifs
=
Some
(
vm
)
;
}
self
}
pub
fn
next_line_help
(
mut
self
nlh
:
bool
)
-
>
Self
{
if
nlh
{
self
.
setb
(
ArgSettings
:
:
NextLineHelp
)
;
}
else
{
self
.
unsetb
(
ArgSettings
:
:
NextLineHelp
)
;
}
self
}
pub
fn
display_order
(
mut
self
ord
:
usize
)
-
>
Self
{
self
.
disp_ord
=
ord
;
self
}
pub
fn
is_set
(
&
self
s
:
ArgSettings
)
-
>
bool
{
self
.
settings
.
is_set
(
s
)
}
pub
fn
set
(
mut
self
s
:
ArgSettings
)
-
>
Self
{
self
.
setb
(
s
)
;
self
}
pub
fn
unset
(
mut
self
s
:
ArgSettings
)
-
>
Self
{
self
.
unsetb
(
s
)
;
self
}
#
[
doc
(
hidden
)
]
pub
fn
setb
(
&
mut
self
s
:
ArgSettings
)
{
self
.
settings
.
set
(
s
)
;
}
#
[
doc
(
hidden
)
]
pub
fn
unsetb
(
&
mut
self
s
:
ArgSettings
)
{
self
.
settings
.
unset
(
s
)
;
}
}
impl
<
'
a
'
b
'
z
>
From
<
&
'
z
Arg
<
'
a
'
b
>
>
for
Arg
<
'
a
'
b
>
{
fn
from
(
a
:
&
'
z
Arg
<
'
a
'
b
>
)
-
>
Self
{
Arg
{
name
:
a
.
name
short
:
a
.
short
long
:
a
.
long
aliases
:
a
.
aliases
.
clone
(
)
help
:
a
.
help
index
:
a
.
index
possible_vals
:
a
.
possible_vals
.
clone
(
)
blacklist
:
a
.
blacklist
.
clone
(
)
requires
:
a
.
requires
.
clone
(
)
num_vals
:
a
.
num_vals
min_vals
:
a
.
min_vals
max_vals
:
a
.
max_vals
val_names
:
a
.
val_names
.
clone
(
)
groups
:
a
.
groups
.
clone
(
)
validator
:
a
.
validator
.
clone
(
)
validator_os
:
a
.
validator_os
.
clone
(
)
overrides
:
a
.
overrides
.
clone
(
)
settings
:
a
.
settings
val_delim
:
a
.
val_delim
default_val
:
a
.
default_val
default_vals_ifs
:
a
.
default_vals_ifs
.
clone
(
)
disp_ord
:
a
.
disp_ord
r_unless
:
a
.
r_unless
.
clone
(
)
r_ifs
:
a
.
r_ifs
.
clone
(
)
val_terminator
:
a
.
val_terminator
}
}
}
impl
<
'
a
'
b
>
Clone
for
Arg
<
'
a
'
b
>
{
fn
clone
(
&
self
)
-
>
Self
{
Arg
{
name
:
self
.
name
short
:
self
.
short
long
:
self
.
long
aliases
:
self
.
aliases
.
clone
(
)
help
:
self
.
help
index
:
self
.
index
possible_vals
:
self
.
possible_vals
.
clone
(
)
blacklist
:
self
.
blacklist
.
clone
(
)
requires
:
self
.
requires
.
clone
(
)
num_vals
:
self
.
num_vals
min_vals
:
self
.
min_vals
max_vals
:
self
.
max_vals
val_names
:
self
.
val_names
.
clone
(
)
groups
:
self
.
groups
.
clone
(
)
validator
:
self
.
validator
.
clone
(
)
validator_os
:
self
.
validator_os
.
clone
(
)
overrides
:
self
.
overrides
.
clone
(
)
settings
:
self
.
settings
val_delim
:
self
.
val_delim
default_val
:
self
.
default_val
default_vals_ifs
:
self
.
default_vals_ifs
.
clone
(
)
disp_ord
:
self
.
disp_ord
r_unless
:
self
.
r_unless
.
clone
(
)
r_ifs
:
self
.
r_ifs
.
clone
(
)
val_terminator
:
self
.
val_terminator
}
}
}
