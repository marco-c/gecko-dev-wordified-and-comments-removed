#
[
allow
(
unused_imports
)
]
use
std
:
:
ascii
:
:
AsciiExt
;
use
std
:
:
str
:
:
FromStr
;
use
std
:
:
ops
:
:
BitOr
;
bitflags
!
{
struct
Flags
:
u64
{
const
SC_NEGATE_REQS
=
1
;
const
SC_REQUIRED
=
1
<
<
1
;
const
A_REQUIRED_ELSE_HELP
=
1
<
<
2
;
const
GLOBAL_VERSION
=
1
<
<
3
;
const
VERSIONLESS_SC
=
1
<
<
4
;
const
UNIFIED_HELP
=
1
<
<
5
;
const
WAIT_ON_ERROR
=
1
<
<
6
;
const
SC_REQUIRED_ELSE_HELP
=
1
<
<
7
;
const
NEEDS_LONG_HELP
=
1
<
<
8
;
const
NEEDS_LONG_VERSION
=
1
<
<
9
;
const
NEEDS_SC_HELP
=
1
<
<
10
;
const
DISABLE_VERSION
=
1
<
<
11
;
const
HIDDEN
=
1
<
<
12
;
const
TRAILING_VARARG
=
1
<
<
13
;
const
NO_BIN_NAME
=
1
<
<
14
;
const
ALLOW_UNK_SC
=
1
<
<
15
;
const
UTF8_STRICT
=
1
<
<
16
;
const
UTF8_NONE
=
1
<
<
17
;
const
LEADING_HYPHEN
=
1
<
<
18
;
const
NO_POS_VALUES
=
1
<
<
19
;
const
NEXT_LINE_HELP
=
1
<
<
20
;
const
DERIVE_DISP_ORDER
=
1
<
<
21
;
const
COLORED_HELP
=
1
<
<
22
;
const
COLOR_ALWAYS
=
1
<
<
23
;
const
COLOR_AUTO
=
1
<
<
24
;
const
COLOR_NEVER
=
1
<
<
25
;
const
DONT_DELIM_TRAIL
=
1
<
<
26
;
const
ALLOW_NEG_NUMS
=
1
<
<
27
;
const
LOW_INDEX_MUL_POS
=
1
<
<
28
;
const
DISABLE_HELP_SC
=
1
<
<
29
;
const
DONT_COLLAPSE_ARGS
=
1
<
<
30
;
const
ARGS_NEGATE_SCS
=
1
<
<
31
;
const
PROPAGATE_VALS_DOWN
=
1
<
<
32
;
const
ALLOW_MISSING_POS
=
1
<
<
33
;
const
TRAILING_VALUES
=
1
<
<
34
;
const
VALID_NEG_NUM_FOUND
=
1
<
<
35
;
const
PROPAGATED
=
1
<
<
36
;
const
VALID_ARG_FOUND
=
1
<
<
37
;
const
INFER_SUBCOMMANDS
=
1
<
<
38
;
const
CONTAINS_LAST
=
1
<
<
39
;
const
ARGS_OVERRIDE_SELF
=
1
<
<
40
;
}
}
#
[
doc
(
hidden
)
]
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
struct
AppFlags
(
Flags
)
;
impl
BitOr
for
AppFlags
{
type
Output
=
Self
;
fn
bitor
(
self
rhs
:
Self
)
-
>
Self
{
AppFlags
(
self
.
0
|
rhs
.
0
)
}
}
impl
Default
for
AppFlags
{
fn
default
(
)
-
>
Self
{
AppFlags
(
Flags
:
:
NEEDS_LONG_VERSION
|
Flags
:
:
NEEDS_LONG_HELP
|
Flags
:
:
NEEDS_SC_HELP
|
Flags
:
:
UTF8_NONE
|
Flags
:
:
COLOR_AUTO
)
}
}
#
[
allow
(
deprecated
)
]
impl
AppFlags
{
pub
fn
new
(
)
-
>
Self
{
AppFlags
:
:
default
(
)
}
pub
fn
zeroed
(
)
-
>
Self
{
AppFlags
(
Flags
:
:
empty
(
)
)
}
impl_settings
!
{
AppSettings
ArgRequiredElseHelp
=
>
Flags
:
:
A_REQUIRED_ELSE_HELP
ArgsNegateSubcommands
=
>
Flags
:
:
ARGS_NEGATE_SCS
AllArgsOverrideSelf
=
>
Flags
:
:
ARGS_OVERRIDE_SELF
AllowExternalSubcommands
=
>
Flags
:
:
ALLOW_UNK_SC
AllowInvalidUtf8
=
>
Flags
:
:
UTF8_NONE
AllowLeadingHyphen
=
>
Flags
:
:
LEADING_HYPHEN
AllowNegativeNumbers
=
>
Flags
:
:
ALLOW_NEG_NUMS
AllowMissingPositional
=
>
Flags
:
:
ALLOW_MISSING_POS
ColoredHelp
=
>
Flags
:
:
COLORED_HELP
ColorAlways
=
>
Flags
:
:
COLOR_ALWAYS
ColorAuto
=
>
Flags
:
:
COLOR_AUTO
ColorNever
=
>
Flags
:
:
COLOR_NEVER
DontDelimitTrailingValues
=
>
Flags
:
:
DONT_DELIM_TRAIL
DontCollapseArgsInUsage
=
>
Flags
:
:
DONT_COLLAPSE_ARGS
DeriveDisplayOrder
=
>
Flags
:
:
DERIVE_DISP_ORDER
DisableHelpSubcommand
=
>
Flags
:
:
DISABLE_HELP_SC
DisableVersion
=
>
Flags
:
:
DISABLE_VERSION
GlobalVersion
=
>
Flags
:
:
GLOBAL_VERSION
HidePossibleValuesInHelp
=
>
Flags
:
:
NO_POS_VALUES
Hidden
=
>
Flags
:
:
HIDDEN
LowIndexMultiplePositional
=
>
Flags
:
:
LOW_INDEX_MUL_POS
NeedsLongHelp
=
>
Flags
:
:
NEEDS_LONG_HELP
NeedsLongVersion
=
>
Flags
:
:
NEEDS_LONG_VERSION
NeedsSubcommandHelp
=
>
Flags
:
:
NEEDS_SC_HELP
NoBinaryName
=
>
Flags
:
:
NO_BIN_NAME
PropagateGlobalValuesDown
=
>
Flags
:
:
PROPAGATE_VALS_DOWN
StrictUtf8
=
>
Flags
:
:
UTF8_STRICT
SubcommandsNegateReqs
=
>
Flags
:
:
SC_NEGATE_REQS
SubcommandRequired
=
>
Flags
:
:
SC_REQUIRED
SubcommandRequiredElseHelp
=
>
Flags
:
:
SC_REQUIRED_ELSE_HELP
TrailingVarArg
=
>
Flags
:
:
TRAILING_VARARG
UnifiedHelpMessage
=
>
Flags
:
:
UNIFIED_HELP
NextLineHelp
=
>
Flags
:
:
NEXT_LINE_HELP
VersionlessSubcommands
=
>
Flags
:
:
VERSIONLESS_SC
WaitOnError
=
>
Flags
:
:
WAIT_ON_ERROR
TrailingValues
=
>
Flags
:
:
TRAILING_VALUES
ValidNegNumFound
=
>
Flags
:
:
VALID_NEG_NUM_FOUND
Propagated
=
>
Flags
:
:
PROPAGATED
ValidArgFound
=
>
Flags
:
:
VALID_ARG_FOUND
InferSubcommands
=
>
Flags
:
:
INFER_SUBCOMMANDS
ContainsLast
=
>
Flags
:
:
CONTAINS_LAST
}
}
#
[
derive
(
Debug
PartialEq
Copy
Clone
)
]
pub
enum
AppSettings
{
#
[
cfg_attr
(
not
(
unix
)
doc
=
"
ignore
"
)
]
#
[
cfg_attr
(
unix
doc
=
"
"
)
]
AllowInvalidUtf8
AllArgsOverrideSelf
AllowLeadingHyphen
AllowNegativeNumbers
AllowMissingPositional
AllowExternalSubcommands
ArgsNegateSubcommands
ArgRequiredElseHelp
ColoredHelp
ColorAuto
ColorAlways
ColorNever
DontCollapseArgsInUsage
DontDelimitTrailingValues
DisableHelpSubcommand
DisableVersion
DeriveDisplayOrder
GlobalVersion
Hidden
HidePossibleValuesInHelp
InferSubcommands
NoBinaryName
NextLineHelp
#
[
deprecated
(
since
=
"
2
.
27
.
0
"
note
=
"
No
longer
required
to
propagate
values
"
)
]
PropagateGlobalValuesDown
SubcommandsNegateReqs
SubcommandRequiredElseHelp
#
[
cfg_attr
(
not
(
unix
)
doc
=
"
ignore
"
)
]
#
[
cfg_attr
(
unix
doc
=
"
"
)
]
StrictUtf8
SubcommandRequired
TrailingVarArg
UnifiedHelpMessage
VersionlessSubcommands
WaitOnError
#
[
doc
(
hidden
)
]
NeedsLongVersion
#
[
doc
(
hidden
)
]
NeedsLongHelp
#
[
doc
(
hidden
)
]
NeedsSubcommandHelp
#
[
doc
(
hidden
)
]
LowIndexMultiplePositional
#
[
doc
(
hidden
)
]
TrailingValues
#
[
doc
(
hidden
)
]
ValidNegNumFound
#
[
doc
(
hidden
)
]
Propagated
#
[
doc
(
hidden
)
]
ValidArgFound
#
[
doc
(
hidden
)
]
ContainsLast
}
impl
FromStr
for
AppSettings
{
type
Err
=
String
;
fn
from_str
(
s
:
&
str
)
-
>
Result
<
Self
<
Self
as
FromStr
>
:
:
Err
>
{
match
&
*
s
.
to_ascii_lowercase
(
)
{
"
argrequiredelsehelp
"
=
>
Ok
(
AppSettings
:
:
ArgRequiredElseHelp
)
"
argsnegatesubcommands
"
=
>
Ok
(
AppSettings
:
:
ArgsNegateSubcommands
)
"
allowinvalidutf8
"
=
>
Ok
(
AppSettings
:
:
AllowInvalidUtf8
)
"
allowleadinghyphen
"
=
>
Ok
(
AppSettings
:
:
AllowLeadingHyphen
)
"
allowexternalsubcommands
"
=
>
Ok
(
AppSettings
:
:
AllowExternalSubcommands
)
"
allownegativenumbers
"
=
>
Ok
(
AppSettings
:
:
AllowNegativeNumbers
)
"
colorauto
"
=
>
Ok
(
AppSettings
:
:
ColorAuto
)
"
coloralways
"
=
>
Ok
(
AppSettings
:
:
ColorAlways
)
"
colornever
"
=
>
Ok
(
AppSettings
:
:
ColorNever
)
"
coloredhelp
"
=
>
Ok
(
AppSettings
:
:
ColoredHelp
)
"
derivedisplayorder
"
=
>
Ok
(
AppSettings
:
:
DeriveDisplayOrder
)
"
dontcollapseargsinusage
"
=
>
Ok
(
AppSettings
:
:
DontCollapseArgsInUsage
)
"
dontdelimittrailingvalues
"
=
>
Ok
(
AppSettings
:
:
DontDelimitTrailingValues
)
"
disablehelpsubcommand
"
=
>
Ok
(
AppSettings
:
:
DisableHelpSubcommand
)
"
disableversion
"
=
>
Ok
(
AppSettings
:
:
DisableVersion
)
"
globalversion
"
=
>
Ok
(
AppSettings
:
:
GlobalVersion
)
"
hidden
"
=
>
Ok
(
AppSettings
:
:
Hidden
)
"
hidepossiblevaluesinhelp
"
=
>
Ok
(
AppSettings
:
:
HidePossibleValuesInHelp
)
"
infersubcommands
"
=
>
Ok
(
AppSettings
:
:
InferSubcommands
)
"
lowindexmultiplepositional
"
=
>
Ok
(
AppSettings
:
:
LowIndexMultiplePositional
)
"
nobinaryname
"
=
>
Ok
(
AppSettings
:
:
NoBinaryName
)
"
nextlinehelp
"
=
>
Ok
(
AppSettings
:
:
NextLineHelp
)
"
strictutf8
"
=
>
Ok
(
AppSettings
:
:
StrictUtf8
)
"
subcommandsnegatereqs
"
=
>
Ok
(
AppSettings
:
:
SubcommandsNegateReqs
)
"
subcommandrequired
"
=
>
Ok
(
AppSettings
:
:
SubcommandRequired
)
"
subcommandrequiredelsehelp
"
=
>
Ok
(
AppSettings
:
:
SubcommandRequiredElseHelp
)
"
trailingvararg
"
=
>
Ok
(
AppSettings
:
:
TrailingVarArg
)
"
unifiedhelpmessage
"
=
>
Ok
(
AppSettings
:
:
UnifiedHelpMessage
)
"
versionlesssubcommands
"
=
>
Ok
(
AppSettings
:
:
VersionlessSubcommands
)
"
waitonerror
"
=
>
Ok
(
AppSettings
:
:
WaitOnError
)
"
validnegnumfound
"
=
>
Ok
(
AppSettings
:
:
ValidNegNumFound
)
"
validargfound
"
=
>
Ok
(
AppSettings
:
:
ValidArgFound
)
"
propagated
"
=
>
Ok
(
AppSettings
:
:
Propagated
)
"
trailingvalues
"
=
>
Ok
(
AppSettings
:
:
TrailingValues
)
_
=
>
Err
(
"
unknown
AppSetting
cannot
convert
from
str
"
.
to_owned
(
)
)
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
AppSettings
;
#
[
test
]
fn
app_settings_fromstr
(
)
{
assert_eq
!
(
"
argsnegatesubcommands
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
ArgsNegateSubcommands
)
;
assert_eq
!
(
"
argrequiredelsehelp
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
ArgRequiredElseHelp
)
;
assert_eq
!
(
"
allowexternalsubcommands
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
AllowExternalSubcommands
)
;
assert_eq
!
(
"
allowinvalidutf8
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
AllowInvalidUtf8
)
;
assert_eq
!
(
"
allowleadinghyphen
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
AllowLeadingHyphen
)
;
assert_eq
!
(
"
allownegativenumbers
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
AllowNegativeNumbers
)
;
assert_eq
!
(
"
coloredhelp
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
ColoredHelp
)
;
assert_eq
!
(
"
colorauto
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
ColorAuto
)
;
assert_eq
!
(
"
coloralways
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
ColorAlways
)
;
assert_eq
!
(
"
colornever
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
ColorNever
)
;
assert_eq
!
(
"
disablehelpsubcommand
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
DisableHelpSubcommand
)
;
assert_eq
!
(
"
disableversion
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
DisableVersion
)
;
assert_eq
!
(
"
dontcollapseargsinusage
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
DontCollapseArgsInUsage
)
;
assert_eq
!
(
"
dontdelimittrailingvalues
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
DontDelimitTrailingValues
)
;
assert_eq
!
(
"
derivedisplayorder
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
DeriveDisplayOrder
)
;
assert_eq
!
(
"
globalversion
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
GlobalVersion
)
;
assert_eq
!
(
"
hidden
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
Hidden
)
;
assert_eq
!
(
"
hidepossiblevaluesinhelp
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
HidePossibleValuesInHelp
)
;
assert_eq
!
(
"
lowindexmultiplePositional
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
LowIndexMultiplePositional
)
;
assert_eq
!
(
"
nobinaryname
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
NoBinaryName
)
;
assert_eq
!
(
"
nextlinehelp
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
NextLineHelp
)
;
assert_eq
!
(
"
subcommandsnegatereqs
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
SubcommandsNegateReqs
)
;
assert_eq
!
(
"
subcommandrequired
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
SubcommandRequired
)
;
assert_eq
!
(
"
subcommandrequiredelsehelp
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
SubcommandRequiredElseHelp
)
;
assert_eq
!
(
"
strictutf8
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
StrictUtf8
)
;
assert_eq
!
(
"
trailingvararg
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
TrailingVarArg
)
;
assert_eq
!
(
"
unifiedhelpmessage
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
UnifiedHelpMessage
)
;
assert_eq
!
(
"
versionlesssubcommands
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
VersionlessSubcommands
)
;
assert_eq
!
(
"
waitonerror
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
WaitOnError
)
;
assert_eq
!
(
"
validnegnumfound
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
ValidNegNumFound
)
;
assert_eq
!
(
"
validargfound
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
ValidArgFound
)
;
assert_eq
!
(
"
propagated
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
Propagated
)
;
assert_eq
!
(
"
trailingvalues
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
TrailingValues
)
;
assert_eq
!
(
"
infersubcommands
"
.
parse
:
:
<
AppSettings
>
(
)
.
unwrap
(
)
AppSettings
:
:
InferSubcommands
)
;
assert
!
(
"
hahahaha
"
.
parse
:
:
<
AppSettings
>
(
)
.
is_err
(
)
)
;
}
}
