use
clap
:
:
{
app_from_crate
arg
ErrorKind
}
;
fn
main
(
)
{
let
mut
app
=
app_from_crate
!
(
)
.
arg
(
arg
!
(
-
-
"
set
-
ver
"
<
VER
>
"
set
version
manually
"
)
.
required
(
false
)
)
.
arg
(
arg
!
(
-
-
major
"
auto
inc
major
"
)
)
.
arg
(
arg
!
(
-
-
minor
"
auto
inc
minor
"
)
)
.
arg
(
arg
!
(
-
-
patch
"
auto
inc
patch
"
)
)
.
arg
(
arg
!
(
[
INPUT_FILE
]
"
some
regular
input
"
)
)
.
arg
(
arg
!
(
-
-
"
spec
-
in
"
<
SPEC_IN
>
"
some
special
input
argument
"
)
.
required
(
false
)
)
.
arg
(
arg
!
(
config
:
-
c
<
CONFIG
>
)
.
required
(
false
)
)
;
let
matches
=
app
.
get_matches_mut
(
)
;
let
mut
major
=
1
;
let
mut
minor
=
2
;
let
mut
patch
=
3
;
let
version
=
if
let
Some
(
ver
)
=
matches
.
value_of
(
"
set
-
ver
"
)
{
if
matches
.
is_present
(
"
major
"
)
|
|
matches
.
is_present
(
"
minor
"
)
|
|
matches
.
is_present
(
"
patch
"
)
{
app
.
error
(
ErrorKind
:
:
ArgumentConflict
"
Can
'
t
do
relative
and
absolute
version
change
"
)
.
exit
(
)
;
}
ver
.
to_string
(
)
}
else
{
let
(
maj
min
pat
)
=
(
matches
.
is_present
(
"
major
"
)
matches
.
is_present
(
"
minor
"
)
matches
.
is_present
(
"
patch
"
)
)
;
match
(
maj
min
pat
)
{
(
true
false
false
)
=
>
major
+
=
1
(
false
true
false
)
=
>
minor
+
=
1
(
false
false
true
)
=
>
patch
+
=
1
_
=
>
{
app
.
error
(
ErrorKind
:
:
ArgumentConflict
"
Cam
only
modify
one
version
field
"
)
.
exit
(
)
;
}
}
;
format
!
(
"
{
}
.
{
}
.
{
}
"
major
minor
patch
)
}
;
println
!
(
"
Version
:
{
}
"
version
)
;
if
matches
.
is_present
(
"
config
"
)
{
let
input
=
matches
.
value_of
(
"
INPUT_FILE
"
)
.
or_else
(
|
|
matches
.
value_of
(
"
spec
-
in
"
)
)
.
unwrap_or_else
(
|
|
{
app
.
error
(
ErrorKind
:
:
MissingRequiredArgument
"
INPUT_FILE
or
-
-
spec
-
in
is
required
when
using
-
-
config
"
)
.
exit
(
)
}
)
;
println
!
(
"
Doing
work
using
input
{
}
and
config
{
}
"
input
matches
.
value_of
(
"
config
"
)
.
unwrap
(
)
)
;
}
}
