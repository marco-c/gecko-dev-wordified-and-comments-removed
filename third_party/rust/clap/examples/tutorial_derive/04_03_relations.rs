use
clap
:
:
{
Args
Parser
}
;
#
[
derive
(
Parser
)
]
#
[
command
(
author
version
about
long_about
=
None
)
]
struct
Cli
{
#
[
command
(
flatten
)
]
vers
:
Vers
#
[
arg
(
group
=
"
input
"
)
]
input_file
:
Option
<
String
>
#
[
arg
(
long
group
=
"
input
"
)
]
spec_in
:
Option
<
String
>
#
[
arg
(
short
requires
=
"
input
"
)
]
config
:
Option
<
String
>
}
#
[
derive
(
Args
)
]
#
[
group
(
required
=
true
multiple
=
false
)
]
struct
Vers
{
#
[
arg
(
long
value_name
=
"
VER
"
)
]
set_ver
:
Option
<
String
>
#
[
arg
(
long
)
]
major
:
bool
#
[
arg
(
long
)
]
minor
:
bool
#
[
arg
(
long
)
]
patch
:
bool
}
fn
main
(
)
{
let
cli
=
Cli
:
:
parse
(
)
;
let
mut
major
=
1
;
let
mut
minor
=
2
;
let
mut
patch
=
3
;
let
vers
=
&
cli
.
vers
;
let
version
=
if
let
Some
(
ver
)
=
vers
.
set_ver
.
as_deref
(
)
{
ver
.
to_string
(
)
}
else
{
let
(
maj
min
pat
)
=
(
vers
.
major
vers
.
minor
vers
.
patch
)
;
match
(
maj
min
pat
)
{
(
true
_
_
)
=
>
major
+
=
1
(
_
true
_
)
=
>
minor
+
=
1
(
_
_
true
)
=
>
patch
+
=
1
_
=
>
unreachable
!
(
)
}
;
format
!
(
"
{
major
}
.
{
minor
}
.
{
patch
}
"
)
}
;
println
!
(
"
Version
:
{
version
}
"
)
;
if
let
Some
(
config
)
=
cli
.
config
.
as_deref
(
)
{
let
input
=
cli
.
input_file
.
as_deref
(
)
.
unwrap_or_else
(
|
|
cli
.
spec_in
.
as_deref
(
)
.
unwrap
(
)
)
;
println
!
(
"
Doing
work
using
input
{
input
}
and
config
{
config
}
"
)
;
}
}
