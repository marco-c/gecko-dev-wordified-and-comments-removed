use
clap
:
:
error
:
:
ErrorKind
;
use
clap
:
:
{
CommandFactory
Parser
}
;
#
[
derive
(
Parser
)
]
#
[
command
(
version
about
long_about
=
None
)
]
struct
Cli
{
#
[
arg
(
long
value_name
=
"
VER
"
)
]
set_ver
:
Option
<
String
>
#
[
arg
(
long
)
]
major
:
bool
#
[
arg
(
long
)
]
minor
:
bool
#
[
arg
(
long
)
]
patch
:
bool
input_file
:
Option
<
String
>
#
[
arg
(
long
)
]
spec_in
:
Option
<
String
>
#
[
arg
(
short
)
]
config
:
Option
<
String
>
}
fn
main
(
)
{
let
cli
=
Cli
:
:
parse
(
)
;
let
mut
major
=
1
;
let
mut
minor
=
2
;
let
mut
patch
=
3
;
let
version
=
if
let
Some
(
ver
)
=
cli
.
set_ver
.
as_deref
(
)
{
if
cli
.
major
|
|
cli
.
minor
|
|
cli
.
patch
{
let
mut
cmd
=
Cli
:
:
command
(
)
;
cmd
.
error
(
ErrorKind
:
:
ArgumentConflict
"
Can
'
t
do
relative
and
absolute
version
change
"
)
.
exit
(
)
;
}
ver
.
to_string
(
)
}
else
{
let
(
maj
min
pat
)
=
(
cli
.
major
cli
.
minor
cli
.
patch
)
;
match
(
maj
min
pat
)
{
(
true
false
false
)
=
>
major
+
=
1
(
false
true
false
)
=
>
minor
+
=
1
(
false
false
true
)
=
>
patch
+
=
1
_
=
>
{
let
mut
cmd
=
Cli
:
:
command
(
)
;
cmd
.
error
(
ErrorKind
:
:
ArgumentConflict
"
Can
only
modify
one
version
field
"
)
.
exit
(
)
;
}
}
;
format
!
(
"
{
major
}
.
{
minor
}
.
{
patch
}
"
)
}
;
println
!
(
"
Version
:
{
version
}
"
)
;
if
let
Some
(
config
)
=
cli
.
config
.
as_deref
(
)
{
let
input
=
cli
.
input_file
.
as_deref
(
)
.
or
(
cli
.
spec_in
.
as_deref
(
)
)
.
unwrap_or_else
(
|
|
{
let
mut
cmd
=
Cli
:
:
command
(
)
;
cmd
.
error
(
ErrorKind
:
:
MissingRequiredArgument
"
INPUT_FILE
or
-
-
spec
-
in
is
required
when
using
-
-
config
"
)
.
exit
(
)
}
)
;
println
!
(
"
Doing
work
using
input
{
input
}
and
config
{
config
}
"
)
;
}
}
