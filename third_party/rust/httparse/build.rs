use
std
:
:
env
;
fn
main
(
)
{
enable_new_features
(
)
;
}
fn
enable_new_features
(
)
{
enable_simd
(
)
;
}
fn
enable_simd
(
)
{
if
env
:
:
var_os
(
"
CARGO_FEATURE_STD
"
)
.
is_none
(
)
{
println
!
(
"
cargo
:
warning
=
building
for
no_std
disables
httparse
SIMD
"
)
;
return
;
}
let
env_disable
=
"
CARGO_CFG_HTTPARSE_DISABLE_SIMD
"
;
if
var_is
(
env_disable
"
1
"
)
{
println
!
(
"
cargo
:
warning
=
detected
{
}
environment
variable
disabling
SIMD
"
env_disable
)
;
return
;
}
println
!
(
"
cargo
:
rustc
-
cfg
=
httparse_simd
"
)
;
let
env_runtime_only
=
"
CARGO_CFG_HTTPARSE_DISABLE_SIMD_COMPILETIME
"
;
if
var_is
(
env_runtime_only
"
1
"
)
{
println
!
(
"
cargo
:
warning
=
detected
{
}
environment
variable
using
runtime
SIMD
detection
only
"
env_runtime_only
)
;
return
;
}
let
feature_list
=
match
env
:
:
var_os
(
"
CARGO_CFG_TARGET_FEATURE
"
)
{
Some
(
var
)
=
>
match
var
.
into_string
(
)
{
Ok
(
s
)
=
>
s
Err
(
_
)
=
>
{
println
!
(
"
cargo
:
warning
=
CARGO_CFG_TARGET_FEATURE
was
not
valid
utf
-
8
"
)
;
return
;
}
}
None
=
>
{
println
!
(
"
cargo
:
warning
=
CARGO_CFG_TARGET_FEATURE
was
not
set
"
)
;
return
}
}
;
let
mut
saw_sse42
=
false
;
let
mut
saw_avx2
=
false
;
for
feature
in
feature_list
.
split
(
'
'
)
{
let
feature
=
feature
.
trim
(
)
;
if
!
saw_sse42
&
&
feature
=
=
"
sse4
.
2
"
{
saw_sse42
=
true
;
println
!
(
"
cargo
:
rustc
-
cfg
=
httparse_simd_target_feature_sse42
"
)
;
}
if
!
saw_avx2
&
&
feature
=
=
"
avx2
"
{
saw_avx2
=
true
;
println
!
(
"
cargo
:
rustc
-
cfg
=
httparse_simd_target_feature_avx2
"
)
;
}
}
}
fn
var_is
(
key
:
&
str
val
:
&
str
)
-
>
bool
{
match
env
:
:
var
(
key
)
{
Ok
(
v
)
=
>
v
=
=
val
Err
(
_
)
=
>
false
}
}
