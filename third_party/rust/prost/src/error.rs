use
alloc
:
:
borrow
:
:
Cow
;
use
alloc
:
:
boxed
:
:
Box
;
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
fmt
;
#
[
derive
(
Clone
PartialEq
Eq
)
]
pub
struct
DecodeError
{
inner
:
Box
<
Inner
>
}
#
[
derive
(
Clone
PartialEq
Eq
)
]
struct
Inner
{
description
:
Cow
<
'
static
str
>
stack
:
Vec
<
(
&
'
static
str
&
'
static
str
)
>
}
impl
DecodeError
{
#
[
doc
(
hidden
)
]
#
[
cold
]
pub
fn
new
(
description
:
impl
Into
<
Cow
<
'
static
str
>
>
)
-
>
DecodeError
{
DecodeError
{
inner
:
Box
:
:
new
(
Inner
{
description
:
description
.
into
(
)
stack
:
Vec
:
:
new
(
)
}
)
}
}
#
[
doc
(
hidden
)
]
pub
fn
push
(
&
mut
self
message
:
&
'
static
str
field
:
&
'
static
str
)
{
self
.
inner
.
stack
.
push
(
(
message
field
)
)
;
}
}
impl
fmt
:
:
Debug
for
DecodeError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
DecodeError
"
)
.
field
(
"
description
"
&
self
.
inner
.
description
)
.
field
(
"
stack
"
&
self
.
inner
.
stack
)
.
finish
(
)
}
}
impl
fmt
:
:
Display
for
DecodeError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
"
failed
to
decode
Protobuf
message
:
"
)
?
;
for
&
(
message
field
)
in
&
self
.
inner
.
stack
{
write
!
(
f
"
{
}
.
{
}
:
"
message
field
)
?
;
}
f
.
write_str
(
&
self
.
inner
.
description
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
std
:
:
error
:
:
Error
for
DecodeError
{
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
From
<
DecodeError
>
for
std
:
:
io
:
:
Error
{
fn
from
(
error
:
DecodeError
)
-
>
std
:
:
io
:
:
Error
{
std
:
:
io
:
:
Error
:
:
new
(
std
:
:
io
:
:
ErrorKind
:
:
InvalidData
error
)
}
}
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
)
]
pub
struct
EncodeError
{
required
:
usize
remaining
:
usize
}
impl
EncodeError
{
pub
(
crate
)
fn
new
(
required
:
usize
remaining
:
usize
)
-
>
EncodeError
{
EncodeError
{
required
remaining
}
}
pub
fn
required_capacity
(
&
self
)
-
>
usize
{
self
.
required
}
pub
fn
remaining
(
&
self
)
-
>
usize
{
self
.
remaining
}
}
impl
fmt
:
:
Display
for
EncodeError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
failed
to
encode
Protobuf
messsage
;
insufficient
buffer
capacity
(
required
:
{
}
remaining
:
{
}
)
"
self
.
required
self
.
remaining
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
std
:
:
error
:
:
Error
for
EncodeError
{
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
From
<
EncodeError
>
for
std
:
:
io
:
:
Error
{
fn
from
(
error
:
EncodeError
)
-
>
std
:
:
io
:
:
Error
{
std
:
:
io
:
:
Error
:
:
new
(
std
:
:
io
:
:
ErrorKind
:
:
InvalidInput
error
)
}
}
