use
std
:
:
fmt
:
:
Debug
;
use
std
:
:
usize
;
use
bytes
:
:
{
Buf
BufMut
}
;
use
crate
:
:
encoding
:
:
{
decode_key
encode_varint
encoded_len_varint
message
DecodeContext
WireType
}
;
use
crate
:
:
DecodeError
;
use
crate
:
:
EncodeError
;
pub
trait
Message
:
Debug
+
Send
+
Sync
{
#
[
doc
(
hidden
)
]
fn
encode_raw
<
B
>
(
&
self
buf
:
&
mut
B
)
where
B
:
BufMut
Self
:
Sized
;
#
[
doc
(
hidden
)
]
fn
merge_field
<
B
>
(
&
mut
self
tag
:
u32
wire_type
:
WireType
buf
:
&
mut
B
ctx
:
DecodeContext
)
-
>
Result
<
(
)
DecodeError
>
where
B
:
Buf
Self
:
Sized
;
fn
encoded_len
(
&
self
)
-
>
usize
;
fn
encode
<
B
>
(
&
self
buf
:
&
mut
B
)
-
>
Result
<
(
)
EncodeError
>
where
B
:
BufMut
Self
:
Sized
{
let
required
=
self
.
encoded_len
(
)
;
let
remaining
=
buf
.
remaining_mut
(
)
;
if
required
>
buf
.
remaining_mut
(
)
{
return
Err
(
EncodeError
:
:
new
(
required
remaining
)
)
;
}
self
.
encode_raw
(
buf
)
;
Ok
(
(
)
)
}
fn
encode_length_delimited
<
B
>
(
&
self
buf
:
&
mut
B
)
-
>
Result
<
(
)
EncodeError
>
where
B
:
BufMut
Self
:
Sized
{
let
len
=
self
.
encoded_len
(
)
;
let
required
=
len
+
encoded_len_varint
(
len
as
u64
)
;
let
remaining
=
buf
.
remaining_mut
(
)
;
if
required
>
remaining
{
return
Err
(
EncodeError
:
:
new
(
required
remaining
)
)
;
}
encode_varint
(
len
as
u64
buf
)
;
self
.
encode_raw
(
buf
)
;
Ok
(
(
)
)
}
fn
decode
<
B
>
(
mut
buf
:
B
)
-
>
Result
<
Self
DecodeError
>
where
B
:
Buf
Self
:
Default
{
let
mut
message
=
Self
:
:
default
(
)
;
Self
:
:
merge
(
&
mut
message
&
mut
buf
)
.
map
(
|
_
|
message
)
}
fn
decode_length_delimited
<
B
>
(
buf
:
B
)
-
>
Result
<
Self
DecodeError
>
where
B
:
Buf
Self
:
Default
{
let
mut
message
=
Self
:
:
default
(
)
;
message
.
merge_length_delimited
(
buf
)
?
;
Ok
(
message
)
}
fn
merge
<
B
>
(
&
mut
self
mut
buf
:
B
)
-
>
Result
<
(
)
DecodeError
>
where
B
:
Buf
Self
:
Sized
{
let
ctx
=
DecodeContext
:
:
default
(
)
;
while
buf
.
has_remaining
(
)
{
let
(
tag
wire_type
)
=
decode_key
(
&
mut
buf
)
?
;
self
.
merge_field
(
tag
wire_type
&
mut
buf
ctx
.
clone
(
)
)
?
;
}
Ok
(
(
)
)
}
fn
merge_length_delimited
<
B
>
(
&
mut
self
mut
buf
:
B
)
-
>
Result
<
(
)
DecodeError
>
where
B
:
Buf
Self
:
Sized
{
message
:
:
merge
(
WireType
:
:
LengthDelimited
self
&
mut
buf
DecodeContext
:
:
default
(
)
)
}
fn
clear
(
&
mut
self
)
;
}
impl
<
M
>
Message
for
Box
<
M
>
where
M
:
Message
{
fn
encode_raw
<
B
>
(
&
self
buf
:
&
mut
B
)
where
B
:
BufMut
{
(
*
*
self
)
.
encode_raw
(
buf
)
}
fn
merge_field
<
B
>
(
&
mut
self
tag
:
u32
wire_type
:
WireType
buf
:
&
mut
B
ctx
:
DecodeContext
)
-
>
Result
<
(
)
DecodeError
>
where
B
:
Buf
{
(
*
*
self
)
.
merge_field
(
tag
wire_type
buf
ctx
)
}
fn
encoded_len
(
&
self
)
-
>
usize
{
(
*
*
self
)
.
encoded_len
(
)
}
fn
clear
(
&
mut
self
)
{
(
*
*
self
)
.
clear
(
)
}
}
