#
!
[
no_std
]
extern
crate
alloc
;
#
[
cfg
(
feature
=
"
bitflags
"
)
]
#
[
doc
(
hidden
)
]
pub
use
bitflags
;
#
[
cfg
(
not
(
target_env
=
"
p2
"
)
)
]
mod
cabi_realloc
;
pub
fn
maybe_link_cabi_realloc
(
)
{
#
[
cfg
(
all
(
target_family
=
"
wasm
"
not
(
target_env
=
"
p2
"
)
)
)
]
{
extern
"
C
"
{
fn
cabi_realloc
(
old_ptr
:
*
mut
u8
old_len
:
usize
align
:
usize
new_len
:
usize
)
-
>
*
mut
u8
;
}
#
[
used
]
static
_NAME_DOES_NOT_MATTER
:
unsafe
extern
"
C
"
fn
(
*
mut
u8
usize
usize
usize
)
-
>
*
mut
u8
=
cabi_realloc
;
}
}
#
[
cfg
(
not
(
target_env
=
"
p2
"
)
)
]
pub
unsafe
fn
cabi_realloc
(
old_ptr
:
*
mut
u8
old_len
:
usize
align
:
usize
new_len
:
usize
)
-
>
*
mut
u8
{
use
self
:
:
alloc
:
:
alloc
:
:
{
self
Layout
}
;
let
layout
;
let
ptr
=
if
old_len
=
=
0
{
if
new_len
=
=
0
{
return
align
as
*
mut
u8
;
}
layout
=
Layout
:
:
from_size_align_unchecked
(
new_len
align
)
;
alloc
:
:
alloc
(
layout
)
}
else
{
debug_assert_ne
!
(
new_len
0
"
non
-
zero
old_len
requires
non
-
zero
new_len
!
"
)
;
layout
=
Layout
:
:
from_size_align_unchecked
(
old_len
align
)
;
alloc
:
:
realloc
(
old_ptr
layout
new_len
)
}
;
if
ptr
.
is_null
(
)
{
if
cfg
!
(
debug_assertions
)
{
alloc
:
:
handle_alloc_error
(
layout
)
;
}
else
{
#
[
cfg
(
target_arch
=
"
wasm32
"
)
]
core
:
:
arch
:
:
wasm32
:
:
unreachable
(
)
;
#
[
cfg
(
not
(
target_arch
=
"
wasm32
"
)
)
]
unreachable
!
(
)
;
}
}
return
ptr
;
}
#
[
cfg
(
target_arch
=
"
wasm32
"
)
]
pub
fn
run_ctors_once
(
)
{
static
mut
RUN
:
bool
=
false
;
unsafe
{
if
!
RUN
{
extern
"
C
"
{
fn
__wasm_call_ctors
(
)
;
}
__wasm_call_ctors
(
)
;
RUN
=
true
;
}
}
}
#
[
cfg
(
feature
=
"
async
"
)
]
pub
mod
async_support
;
