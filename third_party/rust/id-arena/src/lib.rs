#
!
[
forbid
(
unsafe_code
)
]
#
!
[
deny
(
missing_debug_implementations
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
no_std
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
feature
(
alloc
)
)
]
use
core
:
:
cmp
:
:
Ordering
;
use
core
:
:
fmt
;
use
core
:
:
hash
:
:
{
Hash
Hasher
}
;
use
core
:
:
iter
;
use
core
:
:
marker
:
:
PhantomData
;
use
core
:
:
ops
;
use
core
:
:
slice
;
use
core
:
:
sync
:
:
atomic
:
:
{
self
AtomicUsize
ATOMIC_USIZE_INIT
}
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
extern
crate
alloc
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
use
alloc
:
:
vec
:
:
{
self
Vec
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
extern
crate
std
;
#
[
cfg
(
feature
=
"
std
"
)
]
use
std
:
:
vec
:
:
{
self
Vec
}
;
#
[
cfg
(
feature
=
"
rayon
"
)
]
mod
rayon
;
#
[
cfg
(
feature
=
"
rayon
"
)
]
pub
use
rayon
:
:
*
;
pub
trait
ArenaBehavior
{
type
Id
:
Copy
;
fn
new_id
(
arena_id
:
u32
index
:
usize
)
-
>
Self
:
:
Id
;
fn
index
(
Self
:
:
Id
)
-
>
usize
;
fn
arena_id
(
Self
:
:
Id
)
-
>
u32
;
fn
new_arena_id
(
)
-
>
u32
{
static
ARENA_COUNTER
:
AtomicUsize
=
ATOMIC_USIZE_INIT
;
ARENA_COUNTER
.
fetch_add
(
1
atomic
:
:
Ordering
:
:
SeqCst
)
as
u32
}
}
pub
struct
Id
<
T
>
{
idx
:
usize
arena_id
:
u32
_ty
:
PhantomData
<
fn
(
)
-
>
T
>
}
impl
<
T
>
fmt
:
:
Debug
for
Id
<
T
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
Id
"
)
.
field
(
"
idx
"
&
self
.
idx
)
.
finish
(
)
}
}
impl
<
T
>
Copy
for
Id
<
T
>
{
}
impl
<
T
>
Clone
for
Id
<
T
>
{
#
[
inline
]
fn
clone
(
&
self
)
-
>
Id
<
T
>
{
*
self
}
}
impl
<
T
>
PartialEq
for
Id
<
T
>
{
#
[
inline
]
fn
eq
(
&
self
rhs
:
&
Self
)
-
>
bool
{
self
.
arena_id
=
=
rhs
.
arena_id
&
&
self
.
idx
=
=
rhs
.
idx
}
}
impl
<
T
>
Eq
for
Id
<
T
>
{
}
impl
<
T
>
Hash
for
Id
<
T
>
{
#
[
inline
]
fn
hash
<
H
:
Hasher
>
(
&
self
h
:
&
mut
H
)
{
self
.
arena_id
.
hash
(
h
)
;
self
.
idx
.
hash
(
h
)
;
}
}
impl
<
T
>
PartialOrd
for
Id
<
T
>
{
fn
partial_cmp
(
&
self
rhs
:
&
Self
)
-
>
Option
<
Ordering
>
{
Some
(
self
.
cmp
(
rhs
)
)
}
}
impl
<
T
>
Ord
for
Id
<
T
>
{
fn
cmp
(
&
self
rhs
:
&
Self
)
-
>
Ordering
{
self
.
arena_id
.
cmp
(
&
rhs
.
arena_id
)
.
then
(
self
.
idx
.
cmp
(
&
rhs
.
idx
)
)
}
}
impl
<
T
>
Id
<
T
>
{
#
[
inline
]
pub
fn
index
(
&
self
)
-
>
usize
{
self
.
idx
}
}
#
[
derive
(
Clone
Debug
PartialEq
Eq
)
]
pub
struct
DefaultArenaBehavior
<
T
>
{
_phantom
:
PhantomData
<
fn
(
)
-
>
T
>
}
impl
<
T
>
ArenaBehavior
for
DefaultArenaBehavior
<
T
>
{
type
Id
=
Id
<
T
>
;
#
[
inline
]
fn
new_id
(
arena_id
:
u32
idx
:
usize
)
-
>
Self
:
:
Id
{
Id
{
idx
arena_id
_ty
:
PhantomData
}
}
#
[
inline
]
fn
index
(
id
:
Self
:
:
Id
)
-
>
usize
{
id
.
idx
}
#
[
inline
]
fn
arena_id
(
id
:
Self
:
:
Id
)
-
>
u32
{
id
.
arena_id
}
}
#
[
derive
(
Clone
Debug
PartialEq
Eq
)
]
pub
struct
Arena
<
T
A
=
DefaultArenaBehavior
<
T
>
>
{
arena_id
:
u32
items
:
Vec
<
T
>
_phantom
:
PhantomData
<
fn
(
)
-
>
A
>
}
impl
<
T
A
>
Default
for
Arena
<
T
A
>
where
A
:
ArenaBehavior
{
#
[
inline
]
fn
default
(
)
-
>
Arena
<
T
A
>
{
Arena
{
arena_id
:
A
:
:
new_arena_id
(
)
items
:
Vec
:
:
new
(
)
_phantom
:
PhantomData
}
}
}
impl
<
T
A
>
Arena
<
T
A
>
where
A
:
ArenaBehavior
{
#
[
inline
]
pub
fn
new
(
)
-
>
Arena
<
T
A
>
{
Default
:
:
default
(
)
}
#
[
inline
]
pub
fn
with_capacity
(
capacity
:
usize
)
-
>
Arena
<
T
A
>
{
Arena
{
arena_id
:
A
:
:
new_arena_id
(
)
items
:
Vec
:
:
with_capacity
(
capacity
)
_phantom
:
PhantomData
}
}
#
[
inline
]
pub
fn
alloc
(
&
mut
self
item
:
T
)
-
>
A
:
:
Id
{
let
id
=
self
.
next_id
(
)
;
self
.
items
.
push
(
item
)
;
id
}
#
[
inline
]
pub
fn
alloc_with_id
(
&
mut
self
f
:
impl
FnOnce
(
A
:
:
Id
)
-
>
T
)
-
>
A
:
:
Id
{
let
id
=
self
.
next_id
(
)
;
let
val
=
f
(
id
)
;
self
.
alloc
(
val
)
}
#
[
inline
]
pub
fn
next_id
(
&
self
)
-
>
A
:
:
Id
{
let
arena_id
=
self
.
arena_id
;
let
idx
=
self
.
items
.
len
(
)
;
A
:
:
new_id
(
arena_id
idx
)
}
#
[
inline
]
pub
fn
get
(
&
self
id
:
A
:
:
Id
)
-
>
Option
<
&
T
>
{
if
A
:
:
arena_id
(
id
)
!
=
self
.
arena_id
{
None
}
else
{
self
.
items
.
get
(
A
:
:
index
(
id
)
)
}
}
#
[
inline
]
pub
fn
get_mut
(
&
mut
self
id
:
A
:
:
Id
)
-
>
Option
<
&
mut
T
>
{
if
A
:
:
arena_id
(
id
)
!
=
self
.
arena_id
{
None
}
else
{
self
.
items
.
get_mut
(
A
:
:
index
(
id
)
)
}
}
#
[
inline
]
pub
fn
iter
(
&
self
)
-
>
Iter
<
T
A
>
{
IntoIterator
:
:
into_iter
(
self
)
}
#
[
inline
]
pub
fn
iter_mut
(
&
mut
self
)
-
>
IterMut
<
T
A
>
{
IntoIterator
:
:
into_iter
(
self
)
}
#
[
inline
]
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
items
.
len
(
)
}
}
impl
<
T
A
>
ops
:
:
Index
<
A
:
:
Id
>
for
Arena
<
T
A
>
where
A
:
ArenaBehavior
{
type
Output
=
T
;
#
[
inline
]
fn
index
(
&
self
id
:
A
:
:
Id
)
-
>
&
T
{
assert_eq
!
(
self
.
arena_id
A
:
:
arena_id
(
id
)
)
;
&
self
.
items
[
A
:
:
index
(
id
)
]
}
}
impl
<
T
A
>
ops
:
:
IndexMut
<
A
:
:
Id
>
for
Arena
<
T
A
>
where
A
:
ArenaBehavior
{
#
[
inline
]
fn
index_mut
(
&
mut
self
id
:
A
:
:
Id
)
-
>
&
mut
T
{
assert_eq
!
(
self
.
arena_id
A
:
:
arena_id
(
id
)
)
;
&
mut
self
.
items
[
A
:
:
index
(
id
)
]
}
}
fn
add_id
<
A
T
>
(
item
:
Option
<
(
usize
T
)
>
arena_id
:
u32
)
-
>
Option
<
(
A
:
:
Id
T
)
>
where
A
:
ArenaBehavior
{
item
.
map
(
|
(
idx
item
)
|
(
A
:
:
new_id
(
arena_id
idx
)
item
)
)
}
#
[
derive
(
Debug
)
]
pub
struct
Iter
<
'
a
T
:
'
a
A
:
'
a
>
{
arena_id
:
u32
iter
:
iter
:
:
Enumerate
<
slice
:
:
Iter
<
'
a
T
>
>
_phantom
:
PhantomData
<
fn
(
)
-
>
A
>
}
impl
<
'
a
T
:
'
a
A
:
'
a
>
Iterator
for
Iter
<
'
a
T
A
>
where
A
:
ArenaBehavior
{
type
Item
=
(
A
:
:
Id
&
'
a
T
)
;
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
add_id
:
:
<
A
_
>
(
self
.
iter
.
next
(
)
self
.
arena_id
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
}
impl
<
'
a
T
:
'
a
A
:
'
a
>
DoubleEndedIterator
for
Iter
<
'
a
T
A
>
where
A
:
ArenaBehavior
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
add_id
:
:
<
A
_
>
(
self
.
iter
.
next_back
(
)
self
.
arena_id
)
}
}
impl
<
'
a
T
:
'
a
A
:
'
a
>
ExactSizeIterator
for
Iter
<
'
a
T
A
>
where
A
:
ArenaBehavior
{
fn
len
(
&
self
)
-
>
usize
{
self
.
iter
.
len
(
)
}
}
impl
<
'
a
T
A
>
IntoIterator
for
&
'
a
Arena
<
T
A
>
where
A
:
ArenaBehavior
{
type
Item
=
(
A
:
:
Id
&
'
a
T
)
;
type
IntoIter
=
Iter
<
'
a
T
A
>
;
#
[
inline
]
fn
into_iter
(
self
)
-
>
Iter
<
'
a
T
A
>
{
Iter
{
arena_id
:
self
.
arena_id
iter
:
self
.
items
.
iter
(
)
.
enumerate
(
)
_phantom
:
PhantomData
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
IterMut
<
'
a
T
:
'
a
A
:
'
a
>
{
arena_id
:
u32
iter
:
iter
:
:
Enumerate
<
slice
:
:
IterMut
<
'
a
T
>
>
_phantom
:
PhantomData
<
fn
(
)
-
>
A
>
}
impl
<
'
a
T
:
'
a
A
:
'
a
>
Iterator
for
IterMut
<
'
a
T
A
>
where
A
:
ArenaBehavior
{
type
Item
=
(
A
:
:
Id
&
'
a
mut
T
)
;
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
add_id
:
:
<
A
_
>
(
self
.
iter
.
next
(
)
self
.
arena_id
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
}
impl
<
'
a
T
:
'
a
A
:
'
a
>
DoubleEndedIterator
for
IterMut
<
'
a
T
A
>
where
A
:
ArenaBehavior
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
add_id
:
:
<
A
_
>
(
self
.
iter
.
next_back
(
)
self
.
arena_id
)
}
}
impl
<
'
a
T
:
'
a
A
:
'
a
>
ExactSizeIterator
for
IterMut
<
'
a
T
A
>
where
A
:
ArenaBehavior
{
fn
len
(
&
self
)
-
>
usize
{
self
.
iter
.
len
(
)
}
}
impl
<
'
a
T
A
>
IntoIterator
for
&
'
a
mut
Arena
<
T
A
>
where
A
:
ArenaBehavior
{
type
Item
=
(
A
:
:
Id
&
'
a
mut
T
)
;
type
IntoIter
=
IterMut
<
'
a
T
A
>
;
#
[
inline
]
fn
into_iter
(
self
)
-
>
IterMut
<
'
a
T
A
>
{
IterMut
{
arena_id
:
self
.
arena_id
iter
:
self
.
items
.
iter_mut
(
)
.
enumerate
(
)
_phantom
:
PhantomData
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
IntoIter
<
T
A
>
{
arena_id
:
u32
iter
:
iter
:
:
Enumerate
<
vec
:
:
IntoIter
<
T
>
>
_phantom
:
PhantomData
<
fn
(
)
-
>
A
>
}
impl
<
T
A
>
Iterator
for
IntoIter
<
T
A
>
where
A
:
ArenaBehavior
{
type
Item
=
(
A
:
:
Id
T
)
;
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
add_id
:
:
<
A
_
>
(
self
.
iter
.
next
(
)
self
.
arena_id
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
}
impl
<
T
A
>
DoubleEndedIterator
for
IntoIter
<
T
A
>
where
A
:
ArenaBehavior
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
add_id
:
:
<
A
_
>
(
self
.
iter
.
next_back
(
)
self
.
arena_id
)
}
}
impl
<
T
A
>
ExactSizeIterator
for
IntoIter
<
T
A
>
where
A
:
ArenaBehavior
{
fn
len
(
&
self
)
-
>
usize
{
self
.
iter
.
len
(
)
}
}
impl
<
T
A
>
IntoIterator
for
Arena
<
T
A
>
where
A
:
ArenaBehavior
{
type
Item
=
(
A
:
:
Id
T
)
;
type
IntoIter
=
IntoIter
<
T
A
>
;
#
[
inline
]
fn
into_iter
(
self
)
-
>
IntoIter
<
T
A
>
{
IntoIter
{
arena_id
:
self
.
arena_id
iter
:
self
.
items
.
into_iter
(
)
.
enumerate
(
)
_phantom
:
PhantomData
}
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
ids_are_send_sync
(
)
{
fn
assert_send_sync
<
T
:
Send
+
Sync
>
(
)
{
}
struct
Foo
;
assert_send_sync
:
:
<
Id
<
Foo
>
>
(
)
;
}
}
