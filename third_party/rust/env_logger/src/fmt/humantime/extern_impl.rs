use
std
:
:
fmt
;
use
std
:
:
time
:
:
SystemTime
;
use
humantime
:
:
{
format_rfc3339_micros
format_rfc3339_millis
format_rfc3339_nanos
format_rfc3339_seconds
}
;
use
crate
:
:
fmt
:
:
{
Formatter
TimestampPrecision
}
;
pub
(
in
crate
:
:
fmt
)
mod
glob
{
pub
use
super
:
:
*
;
}
impl
Formatter
{
pub
fn
timestamp
(
&
self
)
-
>
Timestamp
{
Timestamp
{
time
:
SystemTime
:
:
now
(
)
precision
:
TimestampPrecision
:
:
Seconds
}
}
pub
fn
timestamp_seconds
(
&
self
)
-
>
Timestamp
{
Timestamp
{
time
:
SystemTime
:
:
now
(
)
precision
:
TimestampPrecision
:
:
Seconds
}
}
pub
fn
timestamp_millis
(
&
self
)
-
>
Timestamp
{
Timestamp
{
time
:
SystemTime
:
:
now
(
)
precision
:
TimestampPrecision
:
:
Millis
}
}
pub
fn
timestamp_micros
(
&
self
)
-
>
Timestamp
{
Timestamp
{
time
:
SystemTime
:
:
now
(
)
precision
:
TimestampPrecision
:
:
Micros
}
}
pub
fn
timestamp_nanos
(
&
self
)
-
>
Timestamp
{
Timestamp
{
time
:
SystemTime
:
:
now
(
)
precision
:
TimestampPrecision
:
:
Nanos
}
}
}
pub
struct
Timestamp
{
time
:
SystemTime
precision
:
TimestampPrecision
}
impl
fmt
:
:
Debug
for
Timestamp
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
struct
TimestampValue
<
'
a
>
(
&
'
a
Timestamp
)
;
impl
<
'
a
>
fmt
:
:
Debug
for
TimestampValue
<
'
a
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
:
:
Display
:
:
fmt
(
&
self
.
0
f
)
}
}
f
.
debug_tuple
(
"
Timestamp
"
)
.
field
(
&
TimestampValue
(
self
)
)
.
finish
(
)
}
}
impl
fmt
:
:
Display
for
Timestamp
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
let
formatter
=
match
self
.
precision
{
TimestampPrecision
:
:
Seconds
=
>
format_rfc3339_seconds
TimestampPrecision
:
:
Millis
=
>
format_rfc3339_millis
TimestampPrecision
:
:
Micros
=
>
format_rfc3339_micros
TimestampPrecision
:
:
Nanos
=
>
format_rfc3339_nanos
}
;
formatter
(
self
.
time
)
.
fmt
(
f
)
}
}
