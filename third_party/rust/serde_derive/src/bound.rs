use
std
:
:
collections
:
:
HashSet
;
use
syn
;
use
syn
:
:
punctuated
:
:
{
Pair
Punctuated
}
;
use
syn
:
:
visit
:
:
{
self
Visit
}
;
use
internals
:
:
ast
:
:
{
Container
Data
}
;
use
internals
:
:
attr
;
use
proc_macro2
:
:
Span
;
pub
fn
without_defaults
(
generics
:
&
syn
:
:
Generics
)
-
>
syn
:
:
Generics
{
syn
:
:
Generics
{
params
:
generics
.
params
.
iter
(
)
.
map
(
|
param
|
match
*
param
{
syn
:
:
GenericParam
:
:
Type
(
ref
param
)
=
>
syn
:
:
GenericParam
:
:
Type
(
syn
:
:
TypeParam
{
eq_token
:
None
default
:
None
.
.
param
.
clone
(
)
}
)
_
=
>
param
.
clone
(
)
}
)
.
collect
(
)
.
.
generics
.
clone
(
)
}
}
pub
fn
with_where_predicates
(
generics
:
&
syn
:
:
Generics
predicates
:
&
[
syn
:
:
WherePredicate
]
)
-
>
syn
:
:
Generics
{
let
mut
generics
=
generics
.
clone
(
)
;
generics
.
make_where_clause
(
)
.
predicates
.
extend
(
predicates
.
into_iter
(
)
.
cloned
(
)
)
;
generics
}
pub
fn
with_where_predicates_from_fields
(
cont
:
&
Container
generics
:
&
syn
:
:
Generics
from_field
:
fn
(
&
attr
:
:
Field
)
-
>
Option
<
&
[
syn
:
:
WherePredicate
]
>
)
-
>
syn
:
:
Generics
{
let
predicates
=
cont
.
data
.
all_fields
(
)
.
flat_map
(
|
field
|
from_field
(
&
field
.
attrs
)
)
.
flat_map
(
|
predicates
|
predicates
.
to_vec
(
)
)
;
let
mut
generics
=
generics
.
clone
(
)
;
generics
.
make_where_clause
(
)
.
predicates
.
extend
(
predicates
)
;
generics
}
pub
fn
with_where_predicates_from_variants
(
cont
:
&
Container
generics
:
&
syn
:
:
Generics
from_variant
:
fn
(
&
attr
:
:
Variant
)
-
>
Option
<
&
[
syn
:
:
WherePredicate
]
>
)
-
>
syn
:
:
Generics
{
let
variants
=
match
cont
.
data
{
Data
:
:
Enum
(
_
ref
variants
)
=
>
variants
Data
:
:
Struct
(
_
_
)
=
>
{
return
generics
.
clone
(
)
;
}
}
;
let
predicates
=
variants
.
iter
(
)
.
flat_map
(
|
variant
|
from_variant
(
&
variant
.
attrs
)
)
.
flat_map
(
|
predicates
|
predicates
.
to_vec
(
)
)
;
let
mut
generics
=
generics
.
clone
(
)
;
generics
.
make_where_clause
(
)
.
predicates
.
extend
(
predicates
)
;
generics
}
pub
fn
with_bound
(
cont
:
&
Container
generics
:
&
syn
:
:
Generics
filter
:
fn
(
&
attr
:
:
Field
Option
<
&
attr
:
:
Variant
>
)
-
>
bool
bound
:
&
syn
:
:
Path
)
-
>
syn
:
:
Generics
{
struct
FindTyParams
<
'
ast
>
{
all_type_params
:
HashSet
<
syn
:
:
Ident
>
relevant_type_params
:
HashSet
<
syn
:
:
Ident
>
associated_type_usage
:
Vec
<
&
'
ast
syn
:
:
TypePath
>
}
impl
<
'
ast
>
Visit
<
'
ast
>
for
FindTyParams
<
'
ast
>
{
fn
visit_field
(
&
mut
self
field
:
&
'
ast
syn
:
:
Field
)
{
if
let
syn
:
:
Type
:
:
Path
(
ref
ty
)
=
field
.
ty
{
if
let
Some
(
Pair
:
:
Punctuated
(
ref
t
_
)
)
=
ty
.
path
.
segments
.
first
(
)
{
if
self
.
all_type_params
.
contains
(
&
t
.
ident
)
{
self
.
associated_type_usage
.
push
(
ty
)
;
}
}
}
self
.
visit_type
(
&
field
.
ty
)
;
}
fn
visit_path
(
&
mut
self
path
:
&
'
ast
syn
:
:
Path
)
{
if
let
Some
(
seg
)
=
path
.
segments
.
last
(
)
{
if
seg
.
into_value
(
)
.
ident
=
=
"
PhantomData
"
{
return
;
}
}
if
path
.
leading_colon
.
is_none
(
)
&
&
path
.
segments
.
len
(
)
=
=
1
{
let
id
=
path
.
segments
[
0
]
.
ident
;
if
self
.
all_type_params
.
contains
(
&
id
)
{
self
.
relevant_type_params
.
insert
(
id
)
;
}
}
visit
:
:
visit_path
(
self
path
)
;
}
fn
visit_macro
(
&
mut
self
_mac
:
&
'
ast
syn
:
:
Macro
)
{
}
}
let
all_type_params
=
generics
.
type_params
(
)
.
map
(
|
param
|
param
.
ident
)
.
collect
(
)
;
let
mut
visitor
=
FindTyParams
{
all_type_params
:
all_type_params
relevant_type_params
:
HashSet
:
:
new
(
)
associated_type_usage
:
Vec
:
:
new
(
)
}
;
match
cont
.
data
{
Data
:
:
Enum
(
_
ref
variants
)
=
>
for
variant
in
variants
.
iter
(
)
{
let
relevant_fields
=
variant
.
fields
.
iter
(
)
.
filter
(
|
field
|
filter
(
&
field
.
attrs
Some
(
&
variant
.
attrs
)
)
)
;
for
field
in
relevant_fields
{
visitor
.
visit_field
(
field
.
original
)
;
}
}
Data
:
:
Struct
(
_
ref
fields
)
=
>
{
for
field
in
fields
.
iter
(
)
.
filter
(
|
field
|
filter
(
&
field
.
attrs
None
)
)
{
visitor
.
visit_field
(
field
.
original
)
;
}
}
}
let
relevant_type_params
=
visitor
.
relevant_type_params
;
let
associated_type_usage
=
visitor
.
associated_type_usage
;
let
new_predicates
=
generics
.
type_params
(
)
.
map
(
|
param
|
param
.
ident
)
.
filter
(
|
id
|
relevant_type_params
.
contains
(
id
)
)
.
map
(
|
id
|
syn
:
:
TypePath
{
qself
:
None
path
:
id
.
into
(
)
}
)
.
chain
(
associated_type_usage
.
into_iter
(
)
.
cloned
(
)
)
.
map
(
|
bounded_ty
|
{
syn
:
:
WherePredicate
:
:
Type
(
syn
:
:
PredicateType
{
lifetimes
:
None
bounded_ty
:
syn
:
:
Type
:
:
Path
(
bounded_ty
)
colon_token
:
Default
:
:
default
(
)
bounds
:
vec
!
[
syn
:
:
TypeParamBound
:
:
Trait
(
syn
:
:
TraitBound
{
paren_token
:
None
modifier
:
syn
:
:
TraitBoundModifier
:
:
None
lifetimes
:
None
path
:
bound
.
clone
(
)
}
)
]
.
into_iter
(
)
.
collect
(
)
}
)
}
)
;
let
mut
generics
=
generics
.
clone
(
)
;
generics
.
make_where_clause
(
)
.
predicates
.
extend
(
new_predicates
)
;
generics
}
pub
fn
with_self_bound
(
cont
:
&
Container
generics
:
&
syn
:
:
Generics
bound
:
&
syn
:
:
Path
)
-
>
syn
:
:
Generics
{
let
mut
generics
=
generics
.
clone
(
)
;
generics
.
make_where_clause
(
)
.
predicates
.
push
(
syn
:
:
WherePredicate
:
:
Type
(
syn
:
:
PredicateType
{
lifetimes
:
None
bounded_ty
:
type_of_item
(
cont
)
colon_token
:
Default
:
:
default
(
)
bounds
:
vec
!
[
syn
:
:
TypeParamBound
:
:
Trait
(
syn
:
:
TraitBound
{
paren_token
:
None
modifier
:
syn
:
:
TraitBoundModifier
:
:
None
lifetimes
:
None
path
:
bound
.
clone
(
)
}
)
]
.
into_iter
(
)
.
collect
(
)
}
)
)
;
generics
}
pub
fn
with_lifetime_bound
(
generics
:
&
syn
:
:
Generics
lifetime
:
&
str
)
-
>
syn
:
:
Generics
{
let
bound
=
syn
:
:
Lifetime
:
:
new
(
lifetime
Span
:
:
call_site
(
)
)
;
let
def
=
syn
:
:
LifetimeDef
{
attrs
:
Vec
:
:
new
(
)
lifetime
:
bound
colon_token
:
None
bounds
:
Punctuated
:
:
new
(
)
}
;
let
params
=
Some
(
syn
:
:
GenericParam
:
:
Lifetime
(
def
)
)
.
into_iter
(
)
.
chain
(
generics
.
params
.
iter
(
)
.
cloned
(
)
.
map
(
|
mut
param
|
{
match
param
{
syn
:
:
GenericParam
:
:
Lifetime
(
ref
mut
param
)
=
>
{
param
.
bounds
.
push
(
bound
)
;
}
syn
:
:
GenericParam
:
:
Type
(
ref
mut
param
)
=
>
{
param
.
bounds
.
push
(
syn
:
:
TypeParamBound
:
:
Lifetime
(
bound
)
)
;
}
syn
:
:
GenericParam
:
:
Const
(
_
)
=
>
{
}
}
param
}
)
)
.
collect
(
)
;
syn
:
:
Generics
{
params
:
params
.
.
generics
.
clone
(
)
}
}
fn
type_of_item
(
cont
:
&
Container
)
-
>
syn
:
:
Type
{
syn
:
:
Type
:
:
Path
(
syn
:
:
TypePath
{
qself
:
None
path
:
syn
:
:
Path
{
leading_colon
:
None
segments
:
vec
!
[
syn
:
:
PathSegment
{
ident
:
cont
.
ident
arguments
:
syn
:
:
PathArguments
:
:
AngleBracketed
(
syn
:
:
AngleBracketedGenericArguments
{
colon2_token
:
None
lt_token
:
Default
:
:
default
(
)
args
:
cont
.
generics
.
params
.
iter
(
)
.
map
(
|
param
|
match
*
param
{
syn
:
:
GenericParam
:
:
Type
(
ref
param
)
=
>
{
syn
:
:
GenericArgument
:
:
Type
(
syn
:
:
Type
:
:
Path
(
syn
:
:
TypePath
{
qself
:
None
path
:
param
.
ident
.
into
(
)
}
)
)
}
syn
:
:
GenericParam
:
:
Lifetime
(
ref
param
)
=
>
{
syn
:
:
GenericArgument
:
:
Lifetime
(
param
.
lifetime
)
}
syn
:
:
GenericParam
:
:
Const
(
_
)
=
>
{
panic
!
(
"
Serde
does
not
support
const
generics
yet
"
)
;
}
}
)
.
collect
(
)
gt_token
:
Default
:
:
default
(
)
}
)
}
]
.
into_iter
(
)
.
collect
(
)
}
}
)
}
