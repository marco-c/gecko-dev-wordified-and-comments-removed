use
quote
:
:
{
ToTokens
Tokens
}
;
pub
enum
Fragment
{
Expr
(
Tokens
)
Block
(
Tokens
)
}
macro_rules
!
quote_expr
{
(
(
tt
:
tt
)
*
)
=
>
{
crate
:
:
fragment
:
:
Fragment
:
:
Expr
(
quote
!
(
(
tt
)
*
)
)
}
}
macro_rules
!
quote_block
{
(
(
tt
:
tt
)
*
)
=
>
{
crate
:
:
fragment
:
:
Fragment
:
:
Block
(
quote
!
(
(
tt
)
*
)
)
}
}
pub
struct
Expr
(
pub
Fragment
)
;
impl
ToTokens
for
Expr
{
fn
to_tokens
(
&
self
out
:
&
mut
Tokens
)
{
match
self
.
0
{
Fragment
:
:
Expr
(
ref
expr
)
=
>
expr
.
to_tokens
(
out
)
Fragment
:
:
Block
(
ref
block
)
=
>
{
out
.
append
(
"
{
"
)
;
block
.
to_tokens
(
out
)
;
out
.
append
(
"
}
"
)
;
}
}
}
}
pub
struct
Stmts
(
pub
Fragment
)
;
impl
ToTokens
for
Stmts
{
fn
to_tokens
(
&
self
out
:
&
mut
Tokens
)
{
match
self
.
0
{
Fragment
:
:
Expr
(
ref
expr
)
=
>
expr
.
to_tokens
(
out
)
Fragment
:
:
Block
(
ref
block
)
=
>
block
.
to_tokens
(
out
)
}
}
}
pub
struct
Match
(
pub
Fragment
)
;
impl
ToTokens
for
Match
{
fn
to_tokens
(
&
self
out
:
&
mut
Tokens
)
{
match
self
.
0
{
Fragment
:
:
Expr
(
ref
expr
)
=
>
{
expr
.
to_tokens
(
out
)
;
out
.
append
(
"
"
)
;
}
Fragment
:
:
Block
(
ref
block
)
=
>
{
out
.
append
(
"
{
"
)
;
block
.
to_tokens
(
out
)
;
out
.
append
(
"
}
"
)
;
}
}
}
}
impl
AsRef
<
Tokens
>
for
Fragment
{
fn
as_ref
(
&
self
)
-
>
&
Tokens
{
match
*
self
{
Fragment
:
:
Expr
(
ref
expr
)
=
>
expr
Fragment
:
:
Block
(
ref
block
)
=
>
block
}
}
}
