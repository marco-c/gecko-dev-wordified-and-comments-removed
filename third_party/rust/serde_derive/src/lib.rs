#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
serde_derive
/
1
.
0
.
66
"
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
deny
(
clippy
clippy_pedantic
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
enum_variant_names
redundant_field_names
too_many_arguments
used_underscore_binding
cyclomatic_complexity
needless_pass_by_value
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
items_after_statements
doc_markdown
stutter
similar_names
use_self
single_match_else
enum_glob_use
match_same_arms
filter_map
cast_possible_truncation
)
)
]
#
!
[
recursion_limit
=
"
512
"
]
#
[
macro_use
]
extern
crate
quote
;
#
[
macro_use
]
extern
crate
syn
;
extern
crate
proc_macro
;
extern
crate
proc_macro2
;
mod
internals
;
use
proc_macro
:
:
TokenStream
;
use
syn
:
:
DeriveInput
;
#
[
macro_use
]
mod
bound
;
#
[
macro_use
]
mod
fragment
;
mod
de
;
mod
pretend
;
mod
ser
;
mod
try
;
#
[
proc_macro_derive
(
Serialize
attributes
(
serde
)
)
]
pub
fn
derive_serialize
(
input
:
TokenStream
)
-
>
TokenStream
{
let
input
:
DeriveInput
=
syn
:
:
parse
(
input
)
.
unwrap
(
)
;
ser
:
:
expand_derive_serialize
(
&
input
)
.
unwrap_or_else
(
compile_error
)
.
into
(
)
}
#
[
proc_macro_derive
(
Deserialize
attributes
(
serde
)
)
]
pub
fn
derive_deserialize
(
input
:
TokenStream
)
-
>
TokenStream
{
let
input
:
DeriveInput
=
syn
:
:
parse
(
input
)
.
unwrap
(
)
;
de
:
:
expand_derive_deserialize
(
&
input
)
.
unwrap_or_else
(
compile_error
)
.
into
(
)
}
fn
compile_error
(
message
:
String
)
-
>
proc_macro2
:
:
TokenStream
{
quote
!
{
compile_error
!
(
#
message
)
;
}
}
