use
{
AsHandleRef
HandleBased
Handle
HandleRef
Status
}
;
use
{
sys
into_result
}
;
#
[
derive
(
Debug
Eq
PartialEq
)
]
pub
struct
Fifo
(
Handle
)
;
impl_handle_based
!
(
Fifo
)
;
impl
Fifo
{
pub
fn
create
(
elem_count
:
u32
elem_size
:
u32
options
:
FifoOpts
)
-
>
Result
<
(
Fifo
Fifo
)
Status
>
{
let
mut
out0
=
0
;
let
mut
out1
=
0
;
let
status
=
unsafe
{
sys
:
:
zx_fifo_create
(
elem_count
elem_size
options
as
u32
&
mut
out0
&
mut
out1
)
}
;
into_result
(
status
|
|
(
Self
:
:
from
(
Handle
(
out0
)
)
Self
:
:
from
(
Handle
(
out1
)
)
)
)
}
pub
fn
write
(
&
self
bytes
:
&
[
u8
]
)
-
>
Result
<
u32
Status
>
{
let
mut
num_entries_written
=
0
;
let
status
=
unsafe
{
sys
:
:
zx_fifo_write
(
self
.
raw_handle
(
)
bytes
.
as_ptr
(
)
bytes
.
len
(
)
&
mut
num_entries_written
)
}
;
into_result
(
status
|
|
num_entries_written
)
}
pub
fn
read
(
&
self
bytes
:
&
mut
[
u8
]
)
-
>
Result
<
u32
Status
>
{
let
mut
num_entries_read
=
0
;
let
status
=
unsafe
{
sys
:
:
zx_fifo_read
(
self
.
raw_handle
(
)
bytes
.
as_mut_ptr
(
)
bytes
.
len
(
)
&
mut
num_entries_read
)
}
;
into_result
(
status
|
|
num_entries_read
)
}
}
#
[
repr
(
u32
)
]
#
[
derive
(
Debug
Copy
Clone
Eq
PartialEq
)
]
pub
enum
FifoOpts
{
Default
=
0
}
impl
Default
for
FifoOpts
{
fn
default
(
)
-
>
Self
{
FifoOpts
:
:
Default
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
fifo_basic
(
)
{
let
(
fifo1
fifo2
)
=
Fifo
:
:
create
(
4
2
FifoOpts
:
:
Default
)
.
unwrap
(
)
;
assert_eq
!
(
fifo1
.
write
(
b
"
"
)
Err
(
Status
:
:
ErrOutOfRange
)
)
;
assert_eq
!
(
fifo1
.
write
(
b
"
h
"
)
Err
(
Status
:
:
ErrOutOfRange
)
)
;
assert_eq
!
(
fifo1
.
write
(
b
"
hex
"
)
.
unwrap
(
)
1
)
;
assert_eq
!
(
fifo1
.
write
(
b
"
llo
worlds
"
)
.
unwrap
(
)
3
)
;
assert_eq
!
(
fifo1
.
write
(
b
"
blah
blah
"
)
Err
(
Status
:
:
ErrShouldWait
)
)
;
let
mut
read_vec
=
vec
!
[
0
;
8
]
;
assert_eq
!
(
fifo2
.
read
(
&
mut
read_vec
)
.
unwrap
(
)
4
)
;
assert_eq
!
(
read_vec
b
"
hello
wo
"
)
;
assert_eq
!
(
fifo2
.
read
(
&
mut
read_vec
)
Err
(
Status
:
:
ErrShouldWait
)
)
;
}
}
