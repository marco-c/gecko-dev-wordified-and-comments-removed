use
{
AsHandleRef
Cookied
HandleBased
Handle
HandleRef
Peered
Status
}
;
use
{
sys
ok
}
;
#
[
derive
(
Debug
Eq
PartialEq
)
]
pub
struct
EventPair
(
Handle
)
;
impl_handle_based
!
(
EventPair
)
;
impl
Peered
for
EventPair
{
}
impl
Cookied
for
EventPair
{
}
impl
EventPair
{
pub
fn
create
(
)
-
>
Result
<
(
EventPair
EventPair
)
Status
>
{
let
mut
out0
=
0
;
let
mut
out1
=
0
;
let
options
=
0
;
let
status
=
unsafe
{
sys
:
:
zx_eventpair_create
(
options
&
mut
out0
&
mut
out1
)
}
;
ok
(
status
)
?
;
unsafe
{
Ok
(
(
Self
:
:
from
(
Handle
:
:
from_raw
(
out0
)
)
Self
:
:
from
(
Handle
:
:
from_raw
(
out1
)
)
)
)
}
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
{
DurationNum
Signals
}
;
#
[
test
]
fn
wait_and_signal_peer
(
)
{
let
(
p1
p2
)
=
EventPair
:
:
create
(
)
.
unwrap
(
)
;
let
eighty_ms
=
80
.
millis
(
)
;
assert_eq
!
(
p2
.
wait_handle
(
Signals
:
:
USER_0
eighty_ms
.
after_now
(
)
)
Err
(
Status
:
:
TIMED_OUT
)
)
;
assert
!
(
p1
.
signal_peer
(
Signals
:
:
NONE
Signals
:
:
USER_0
)
.
is_ok
(
)
)
;
assert_eq
!
(
p2
.
wait_handle
(
Signals
:
:
USER_0
eighty_ms
.
after_now
(
)
)
.
unwrap
(
)
Signals
:
:
USER_0
)
;
assert_eq
!
(
p2
.
wait_handle
(
Signals
:
:
USER_0
eighty_ms
.
after_now
(
)
)
.
unwrap
(
)
Signals
:
:
USER_0
)
;
assert
!
(
p1
.
signal_peer
(
Signals
:
:
USER_0
Signals
:
:
NONE
)
.
is_ok
(
)
)
;
assert_eq
!
(
p2
.
wait_handle
(
Signals
:
:
USER_0
eighty_ms
.
after_now
(
)
)
Err
(
Status
:
:
TIMED_OUT
)
)
;
}
}
