use
{
AsHandleRef
HandleBased
Handle
HandleRef
Peered
}
;
use
{
sys
Status
ok
}
;
use
std
:
:
ptr
;
#
[
derive
(
Debug
Eq
PartialEq
)
]
pub
struct
Socket
(
Handle
)
;
impl_handle_based
!
(
Socket
)
;
impl
Peered
for
Socket
{
}
impl
Socket
{
pub
fn
create
(
)
-
>
Result
<
(
Socket
Socket
)
Status
>
{
unsafe
{
let
mut
out0
=
0
;
let
mut
out1
=
0
;
let
opts
=
0
;
let
status
=
sys
:
:
zx_socket_create
(
opts
&
mut
out0
&
mut
out1
)
;
ok
(
status
)
?
;
Ok
(
(
Self
:
:
from
(
Handle
:
:
from_raw
(
out0
)
)
Self
:
:
from
(
Handle
:
:
from_raw
(
out1
)
)
)
)
}
}
pub
fn
write
(
&
self
bytes
:
&
[
u8
]
)
-
>
Result
<
usize
Status
>
{
let
mut
actual
=
0
;
let
opts
=
0
;
let
status
=
unsafe
{
sys
:
:
zx_socket_write
(
self
.
raw_handle
(
)
opts
bytes
.
as_ptr
(
)
bytes
.
len
(
)
&
mut
actual
)
}
;
ok
(
status
)
.
map
(
|
(
)
|
actual
)
}
pub
fn
read
(
&
self
bytes
:
&
mut
[
u8
]
)
-
>
Result
<
usize
Status
>
{
let
mut
actual
=
0
;
let
opts
=
0
;
let
status
=
unsafe
{
sys
:
:
zx_socket_read
(
self
.
raw_handle
(
)
opts
bytes
.
as_mut_ptr
(
)
bytes
.
len
(
)
&
mut
actual
)
}
;
ok
(
status
)
.
map
(
|
(
)
|
actual
)
.
map_err
(
|
status
|
{
actual
=
0
;
status
}
)
}
pub
fn
half_close
(
&
self
)
-
>
Result
<
(
)
Status
>
{
let
status
=
unsafe
{
sys
:
:
zx_socket_write
(
self
.
raw_handle
(
)
sys
:
:
ZX_SOCKET_HALF_CLOSE
ptr
:
:
null
(
)
0
ptr
:
:
null_mut
(
)
)
}
;
ok
(
status
)
}
pub
fn
outstanding_read_bytes
(
&
self
)
-
>
Result
<
usize
Status
>
{
let
mut
outstanding
=
0
;
let
status
=
unsafe
{
sys
:
:
zx_socket_read
(
self
.
raw_handle
(
)
0
ptr
:
:
null_mut
(
)
0
&
mut
outstanding
)
}
;
ok
(
status
)
.
map
(
|
(
)
|
outstanding
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
socket_basic
(
)
{
let
(
s1
s2
)
=
Socket
:
:
create
(
)
.
unwrap
(
)
;
assert_eq
!
(
s1
.
write
(
b
"
hello
"
)
.
unwrap
(
)
5
)
;
let
mut
read_vec
=
vec
!
[
0
;
8
]
;
assert_eq
!
(
s2
.
read
(
&
mut
read_vec
)
.
unwrap
(
)
5
)
;
assert_eq
!
(
&
read_vec
[
0
.
.
5
]
b
"
hello
"
)
;
assert_eq
!
(
s2
.
read
(
&
mut
read_vec
)
Err
(
Status
:
:
SHOULD_WAIT
)
)
;
assert
!
(
s1
.
half_close
(
)
.
is_ok
(
)
)
;
assert_eq
!
(
s2
.
read
(
&
mut
read_vec
)
Err
(
Status
:
:
BAD_STATE
)
)
;
assert_eq
!
(
s1
.
write
(
b
"
fail
"
)
Err
(
Status
:
:
BAD_STATE
)
)
;
assert_eq
!
(
s1
.
read
(
&
mut
read_vec
)
Err
(
Status
:
:
SHOULD_WAIT
)
)
;
assert_eq
!
(
s2
.
write
(
b
"
back
"
)
.
unwrap
(
)
4
)
;
assert_eq
!
(
s1
.
read
(
&
mut
read_vec
)
.
unwrap
(
)
4
)
;
assert_eq
!
(
&
read_vec
[
0
.
.
4
]
b
"
back
"
)
;
}
}
