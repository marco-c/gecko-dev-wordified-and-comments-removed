#
!
[
no_std
]
#
!
[
forbid
(
unsafe_code
)
]
#
!
[
warn
(
missing_docs
)
]
#
!
[
cfg_attr
(
feature
=
"
strict
"
deny
(
missing_docs
)
)
]
#
!
[
cfg_attr
(
feature
=
"
strict
"
deny
(
warnings
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
clippy
:
:
len_without_is_empty
clippy
:
:
many_single_char_names
clippy
:
:
new_without_default
clippy
:
:
suspicious_arithmetic_impl
clippy
:
:
type_complexity
clippy
:
:
wrong_self_convention
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
deny
(
clippy
:
:
missing_inline_in_public_items
)
)
]
use
core
:
:
cmp
:
:
Ordering
;
#
[
cfg
(
feature
=
"
force_unix_path_separator
"
)
]
mod
generated
{
include
!
(
concat
!
(
env
!
(
"
OUT_DIR
"
)
"
/
op
.
rs
"
)
)
;
include
!
(
concat
!
(
env
!
(
"
OUT_DIR
"
)
"
/
consts
.
rs
"
)
)
;
}
#
[
cfg
(
not
(
feature
=
"
force_unix_path_separator
"
)
)
]
mod
generated
{
include
!
(
env
!
(
"
TYPENUM_BUILD_OP
"
)
)
;
include
!
(
env
!
(
"
TYPENUM_BUILD_CONSTS
"
)
)
;
}
pub
mod
bit
;
pub
mod
int
;
pub
mod
marker_traits
;
pub
mod
operator_aliases
;
pub
mod
private
;
pub
mod
type_operators
;
pub
mod
uint
;
pub
mod
array
;
pub
use
crate
:
:
{
array
:
:
{
ATerm
TArr
}
consts
:
:
*
generated
:
:
consts
int
:
:
{
NInt
PInt
}
marker_traits
:
:
*
operator_aliases
:
:
*
type_operators
:
:
*
uint
:
:
{
UInt
UTerm
}
}
;
#
[
derive
(
Eq
PartialEq
Ord
PartialOrd
Clone
Copy
Hash
Debug
Default
)
]
pub
struct
Greater
;
#
[
derive
(
Eq
PartialEq
Ord
PartialOrd
Clone
Copy
Hash
Debug
Default
)
]
pub
struct
Less
;
#
[
derive
(
Eq
PartialEq
Ord
PartialOrd
Clone
Copy
Hash
Debug
Default
)
]
pub
struct
Equal
;
impl
Ord
for
Greater
{
#
[
inline
]
fn
to_ordering
(
)
-
>
Ordering
{
Ordering
:
:
Greater
}
}
impl
Ord
for
Less
{
#
[
inline
]
fn
to_ordering
(
)
-
>
Ordering
{
Ordering
:
:
Less
}
}
impl
Ord
for
Equal
{
#
[
inline
]
fn
to_ordering
(
)
-
>
Ordering
{
Ordering
:
:
Equal
}
}
#
[
macro_export
]
macro_rules
!
assert_type_eq
{
(
a
:
ty
b
:
ty
)
=
>
{
const
_
:
core
:
:
marker
:
:
PhantomData
<
<
a
as
crate
:
:
Same
<
b
>
>
:
:
Output
>
=
core
:
:
marker
:
:
PhantomData
;
}
;
}
#
[
macro_export
]
macro_rules
!
assert_type
{
(
a
:
ty
)
=
>
{
const
_
:
core
:
:
marker
:
:
PhantomData
<
<
a
as
crate
:
:
Same
<
True
>
>
:
:
Output
>
=
core
:
:
marker
:
:
PhantomData
;
}
;
}
