use
core
:
:
ops
:
:
{
Add
BitAnd
BitOr
BitXor
Div
Mul
Neg
Rem
Shl
Shr
Sub
}
;
use
type_operators
:
:
{
Abs
Cmp
Gcd
Len
Logarithm2
Max
Min
PartialDiv
Pow
SquareRoot
}
;
pub
type
And
<
A
B
>
=
<
A
as
BitAnd
<
B
>
>
:
:
Output
;
pub
type
Or
<
A
B
>
=
<
A
as
BitOr
<
B
>
>
:
:
Output
;
pub
type
Xor
<
A
B
>
=
<
A
as
BitXor
<
B
>
>
:
:
Output
;
pub
type
Shleft
<
A
B
>
=
<
A
as
Shl
<
B
>
>
:
:
Output
;
pub
type
Shright
<
A
B
>
=
<
A
as
Shr
<
B
>
>
:
:
Output
;
pub
type
Sum
<
A
B
>
=
<
A
as
Add
<
B
>
>
:
:
Output
;
pub
type
Diff
<
A
B
>
=
<
A
as
Sub
<
B
>
>
:
:
Output
;
pub
type
Prod
<
A
B
>
=
<
A
as
Mul
<
B
>
>
:
:
Output
;
pub
type
Quot
<
A
B
>
=
<
A
as
Div
<
B
>
>
:
:
Output
;
pub
type
Mod
<
A
B
>
=
<
A
as
Rem
<
B
>
>
:
:
Output
;
pub
type
PartialQuot
<
A
B
>
=
<
A
as
PartialDiv
<
B
>
>
:
:
Output
;
pub
type
Negate
<
A
>
=
<
A
as
Neg
>
:
:
Output
;
pub
type
AbsVal
<
A
>
=
<
A
as
Abs
>
:
:
Output
;
pub
type
Exp
<
A
B
>
=
<
A
as
Pow
<
B
>
>
:
:
Output
;
pub
type
Gcf
<
A
B
>
=
<
A
as
Gcd
<
B
>
>
:
:
Output
;
pub
type
Add1
<
A
>
=
<
A
as
Add
<
:
:
bit
:
:
B1
>
>
:
:
Output
;
pub
type
Sub1
<
A
>
=
<
A
as
Sub
<
:
:
bit
:
:
B1
>
>
:
:
Output
;
pub
type
Double
<
A
>
=
Shleft
<
A
:
:
bit
:
:
B1
>
;
pub
type
Square
<
A
>
=
<
A
as
Mul
>
:
:
Output
;
pub
type
Cube
<
A
>
=
<
Square
<
A
>
as
Mul
<
A
>
>
:
:
Output
;
pub
type
Sqrt
<
A
>
=
<
A
as
SquareRoot
>
:
:
Output
;
pub
type
Compare
<
A
B
>
=
<
A
as
Cmp
<
B
>
>
:
:
Output
;
pub
type
Length
<
T
>
=
<
T
as
Len
>
:
:
Output
;
pub
type
Minimum
<
A
B
>
=
<
A
as
Min
<
B
>
>
:
:
Output
;
pub
type
Maximum
<
A
B
>
=
<
A
as
Max
<
B
>
>
:
:
Output
;
use
type_operators
:
:
{
IsEqual
IsGreater
IsGreaterOrEqual
IsLess
IsLessOrEqual
IsNotEqual
}
;
pub
type
Le
<
A
B
>
=
<
A
as
IsLess
<
B
>
>
:
:
Output
;
pub
type
Eq
<
A
B
>
=
<
A
as
IsEqual
<
B
>
>
:
:
Output
;
pub
type
Gr
<
A
B
>
=
<
A
as
IsGreater
<
B
>
>
:
:
Output
;
pub
type
GrEq
<
A
B
>
=
<
A
as
IsGreaterOrEqual
<
B
>
>
:
:
Output
;
pub
type
LeEq
<
A
B
>
=
<
A
as
IsLessOrEqual
<
B
>
>
:
:
Output
;
pub
type
NotEq
<
A
B
>
=
<
A
as
IsNotEqual
<
B
>
>
:
:
Output
;
pub
type
Log2
<
A
>
=
<
A
as
Logarithm2
>
:
:
Output
;
