use
crate
:
:
CanonicalCompositionsV1Marker
;
use
crate
:
:
CanonicalDecompositionDataV1Marker
;
use
crate
:
:
CanonicalDecompositionTablesV1Marker
;
use
crate
:
:
CompatibilityDecompositionTablesV1Marker
;
use
crate
:
:
ComposingNormalizer
;
use
crate
:
:
NormalizerError
;
use
crate
:
:
Uts46DecompositionSupplementV1Marker
;
use
icu_provider
:
:
DataProvider
;
#
[
derive
(
Debug
)
]
pub
struct
Uts46Mapper
{
normalizer
:
ComposingNormalizer
}
#
[
cfg
(
feature
=
"
compiled_data
"
)
]
impl
Default
for
Uts46Mapper
{
fn
default
(
)
-
>
Self
{
Self
:
:
new
(
)
}
}
impl
Uts46Mapper
{
#
[
cfg
(
feature
=
"
compiled_data
"
)
]
pub
const
fn
new
(
)
-
>
Self
{
Uts46Mapper
{
normalizer
:
ComposingNormalizer
:
:
new_uts46
(
)
}
}
#
[
doc
=
icu_provider
:
:
gen_any_buffer_unstable_docs
!
(
UNSTABLE
Self
:
:
new
)
]
pub
fn
try_new
<
D
>
(
provider
:
&
D
)
-
>
Result
<
Self
NormalizerError
>
where
D
:
DataProvider
<
CanonicalDecompositionDataV1Marker
>
+
DataProvider
<
Uts46DecompositionSupplementV1Marker
>
+
DataProvider
<
CanonicalDecompositionTablesV1Marker
>
+
DataProvider
<
CompatibilityDecompositionTablesV1Marker
>
+
DataProvider
<
CanonicalCompositionsV1Marker
>
+
?
Sized
{
let
normalizer
=
ComposingNormalizer
:
:
try_new_uts46_unstable
(
provider
)
?
;
Ok
(
Uts46Mapper
{
normalizer
}
)
}
pub
fn
map_normalize
<
'
delegate
I
:
Iterator
<
Item
=
char
>
+
'
delegate
>
(
&
'
delegate
self
iter
:
I
)
-
>
impl
Iterator
<
Item
=
char
>
+
'
delegate
{
self
.
normalizer
.
normalize_iter_private
(
iter
crate
:
:
IgnorableBehavior
:
:
Ignored
)
}
pub
fn
normalize_validate
<
'
delegate
I
:
Iterator
<
Item
=
char
>
+
'
delegate
>
(
&
'
delegate
self
iter
:
I
)
-
>
impl
Iterator
<
Item
=
char
>
+
'
delegate
{
self
.
normalizer
.
normalize_iter_private
(
iter
crate
:
:
IgnorableBehavior
:
:
ReplacementCharacter
)
}
}
