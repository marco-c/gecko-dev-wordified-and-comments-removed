use
crate
:
:
*
;
use
:
:
either
:
:
Either
;
impl
<
W0
W1
>
Writeable
for
Either
<
W0
W1
>
where
W0
:
Writeable
W1
:
Writeable
{
fn
write_to
<
W
:
fmt
:
:
Write
+
?
Sized
>
(
&
self
sink
:
&
mut
W
)
-
>
fmt
:
:
Result
{
match
self
{
Either
:
:
Left
(
w
)
=
>
w
.
write_to
(
sink
)
Either
:
:
Right
(
w
)
=
>
w
.
write_to
(
sink
)
}
}
fn
write_to_parts
<
S
:
PartsWrite
+
?
Sized
>
(
&
self
sink
:
&
mut
S
)
-
>
fmt
:
:
Result
{
match
self
{
Either
:
:
Left
(
w
)
=
>
w
.
write_to_parts
(
sink
)
Either
:
:
Right
(
w
)
=
>
w
.
write_to_parts
(
sink
)
}
}
fn
writeable_length_hint
(
&
self
)
-
>
LengthHint
{
match
self
{
Either
:
:
Left
(
w
)
=
>
w
.
writeable_length_hint
(
)
Either
:
:
Right
(
w
)
=
>
w
.
writeable_length_hint
(
)
}
}
fn
write_to_string
(
&
self
)
-
>
Cow
<
str
>
{
match
self
{
Either
:
:
Left
(
w
)
=
>
w
.
write_to_string
(
)
Either
:
:
Right
(
w
)
=
>
w
.
write_to_string
(
)
}
}
}
