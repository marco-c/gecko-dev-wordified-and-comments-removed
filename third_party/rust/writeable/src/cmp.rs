use
crate
:
:
Writeable
;
use
core
:
:
cmp
:
:
Ordering
;
use
core
:
:
fmt
;
struct
WriteComparator
<
'
a
>
{
code_units
:
&
'
a
[
u8
]
result
:
Ordering
}
impl
fmt
:
:
Write
for
WriteComparator
<
'
_
>
{
#
[
inline
]
fn
write_str
(
&
mut
self
other
:
&
str
)
-
>
fmt
:
:
Result
{
if
self
.
result
!
=
Ordering
:
:
Equal
{
return
Ok
(
(
)
)
;
}
let
(
this
remainder
)
=
self
.
code_units
.
split_at_checked
(
other
.
len
(
)
)
.
unwrap_or
(
(
self
.
code_units
&
[
]
)
)
;
self
.
code_units
=
remainder
;
self
.
result
=
this
.
cmp
(
other
.
as_bytes
(
)
)
;
Ok
(
(
)
)
}
}
impl
<
'
a
>
WriteComparator
<
'
a
>
{
#
[
inline
]
fn
new
(
code_units
:
&
'
a
[
u8
]
)
-
>
Self
{
Self
{
code_units
result
:
Ordering
:
:
Equal
}
}
#
[
inline
]
fn
finish
(
self
)
-
>
Ordering
{
if
matches
!
(
self
.
result
Ordering
:
:
Equal
)
&
&
!
self
.
code_units
.
is_empty
(
)
{
Ordering
:
:
Greater
}
else
{
self
.
result
}
}
}
pub
fn
cmp_utf8
(
writeable
:
&
impl
Writeable
other
:
&
[
u8
]
)
-
>
Ordering
{
let
mut
wc
=
WriteComparator
:
:
new
(
other
)
;
let
_
=
writeable
.
write_to
(
&
mut
wc
)
;
wc
.
finish
(
)
.
reverse
(
)
}
#
[
inline
]
pub
fn
cmp_str
(
writeable
:
&
impl
Writeable
other
:
&
str
)
-
>
Ordering
{
cmp_utf8
(
writeable
other
.
as_bytes
(
)
)
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
core
:
:
fmt
:
:
Write
;
mod
data
{
include
!
(
"
.
.
/
tests
/
data
/
data
.
rs
"
)
;
}
#
[
test
]
fn
test_write_char
(
)
{
for
a
in
data
:
:
KEBAB_CASE_STRINGS
{
for
b
in
data
:
:
KEBAB_CASE_STRINGS
{
let
mut
wc
=
WriteComparator
:
:
new
(
a
.
as_bytes
(
)
)
;
for
ch
in
b
.
chars
(
)
{
wc
.
write_char
(
ch
)
.
unwrap
(
)
;
}
assert_eq
!
(
a
.
cmp
(
b
)
wc
.
finish
(
)
"
{
a
}
<
=
>
{
b
}
"
)
;
}
}
}
#
[
test
]
fn
test_write_str
(
)
{
for
a
in
data
:
:
KEBAB_CASE_STRINGS
{
for
b
in
data
:
:
KEBAB_CASE_STRINGS
{
let
mut
wc
=
WriteComparator
:
:
new
(
a
.
as_bytes
(
)
)
;
wc
.
write_str
(
b
)
.
unwrap
(
)
;
assert_eq
!
(
a
.
cmp
(
b
)
wc
.
finish
(
)
"
{
a
}
<
=
>
{
b
}
"
)
;
}
}
}
#
[
test
]
fn
test_mixed
(
)
{
for
a
in
data
:
:
KEBAB_CASE_STRINGS
{
for
b
in
data
:
:
KEBAB_CASE_STRINGS
{
let
mut
wc
=
WriteComparator
:
:
new
(
a
.
as_bytes
(
)
)
;
let
mut
first
=
true
;
for
substr
in
b
.
split
(
'
-
'
)
{
if
first
{
first
=
false
;
}
else
{
wc
.
write_char
(
'
-
'
)
.
unwrap
(
)
;
}
wc
.
write_str
(
substr
)
.
unwrap
(
)
;
}
assert_eq
!
(
a
.
cmp
(
b
)
wc
.
finish
(
)
"
{
a
}
<
=
>
{
b
}
"
)
;
}
}
}
}
