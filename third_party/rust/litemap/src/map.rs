use
crate
:
:
store
:
:
*
;
use
alloc
:
:
borrow
:
:
Borrow
;
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
cmp
:
:
Ordering
;
use
core
:
:
iter
:
:
FromIterator
;
use
core
:
:
marker
:
:
PhantomData
;
use
core
:
:
mem
;
use
core
:
:
ops
:
:
{
Index
IndexMut
}
;
#
[
derive
(
Clone
Debug
PartialEq
Eq
Hash
PartialOrd
Ord
)
]
#
[
cfg_attr
(
feature
=
"
yoke
"
derive
(
yoke
:
:
Yokeable
)
)
]
pub
struct
LiteMap
<
K
:
?
Sized
V
:
?
Sized
S
=
alloc
:
:
vec
:
:
Vec
<
(
K
V
)
>
>
{
pub
(
crate
)
values
:
S
pub
(
crate
)
_key_type
:
PhantomData
<
K
>
pub
(
crate
)
_value_type
:
PhantomData
<
V
>
}
impl
<
K
V
>
LiteMap
<
K
V
>
{
pub
const
fn
new_vec
(
)
-
>
Self
{
Self
{
values
:
alloc
:
:
vec
:
:
Vec
:
:
new
(
)
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
}
impl
<
K
V
S
>
LiteMap
<
K
V
S
>
{
pub
const
fn
from_sorted_store_unchecked
(
values
:
S
)
-
>
Self
{
Self
{
values
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
}
impl
<
K
V
>
LiteMap
<
K
V
Vec
<
(
K
V
)
>
>
{
#
[
inline
]
pub
fn
into_tuple_vec
(
self
)
-
>
Vec
<
(
K
V
)
>
{
self
.
values
}
}
impl
<
K
:
?
Sized
V
:
?
Sized
S
>
LiteMap
<
K
V
S
>
where
S
:
StoreConstEmpty
<
K
V
>
{
pub
const
fn
new
(
)
-
>
Self
{
Self
{
values
:
S
:
:
EMPTY
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
}
impl
<
K
:
?
Sized
V
:
?
Sized
S
>
LiteMap
<
K
V
S
>
where
S
:
Store
<
K
V
>
{
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
values
.
lm_len
(
)
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
values
.
lm_is_empty
(
)
}
#
[
inline
]
pub
fn
get_indexed
(
&
self
index
:
usize
)
-
>
Option
<
(
&
K
&
V
)
>
{
self
.
values
.
lm_get
(
index
)
}
}
impl
<
K
:
?
Sized
V
:
?
Sized
S
>
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
Store
<
K
V
>
{
pub
fn
get
<
Q
:
?
Sized
>
(
&
self
key
:
&
Q
)
-
>
Option
<
&
V
>
where
K
:
Borrow
<
Q
>
Q
:
Ord
{
match
self
.
find_index
(
key
)
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
Ok
(
found
)
=
>
Some
(
self
.
values
.
lm_get
(
found
)
.
unwrap
(
)
.
1
)
Err
(
_
)
=
>
None
}
}
pub
fn
get_by
(
&
self
predicate
:
impl
FnMut
(
&
K
)
-
>
Ordering
)
-
>
Option
<
&
V
>
{
let
index
=
self
.
values
.
lm_binary_search_by
(
predicate
)
.
ok
(
)
?
;
self
.
values
.
lm_get
(
index
)
.
map
(
|
(
_
v
)
|
v
)
}
pub
fn
contains_key
<
Q
:
?
Sized
>
(
&
self
key
:
&
Q
)
-
>
bool
where
K
:
Borrow
<
Q
>
Q
:
Ord
{
self
.
find_index
(
key
)
.
is_ok
(
)
}
#
[
inline
]
pub
fn
first
(
&
self
)
-
>
Option
<
(
&
K
&
V
)
>
{
self
.
values
.
lm_get
(
0
)
.
map
(
|
(
k
v
)
|
(
k
v
)
)
}
#
[
inline
]
pub
fn
last
(
&
self
)
-
>
Option
<
(
&
K
&
V
)
>
{
self
.
values
.
lm_get
(
self
.
len
(
)
-
1
)
.
map
(
|
(
k
v
)
|
(
k
v
)
)
}
#
[
inline
]
pub
fn
find_index
<
Q
:
?
Sized
>
(
&
self
key
:
&
Q
)
-
>
Result
<
usize
usize
>
where
K
:
Borrow
<
Q
>
Q
:
Ord
{
self
.
values
.
lm_binary_search_by
(
|
k
|
k
.
borrow
(
)
.
cmp
(
key
)
)
}
}
impl
<
K
V
S
>
LiteMap
<
K
V
S
>
where
S
:
StoreMut
<
K
V
>
{
pub
fn
with_capacity
(
capacity
:
usize
)
-
>
Self
{
Self
{
values
:
S
:
:
lm_with_capacity
(
capacity
)
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
pub
fn
clear
(
&
mut
self
)
{
self
.
values
.
lm_clear
(
)
}
pub
fn
reserve
(
&
mut
self
additional
:
usize
)
{
self
.
values
.
lm_reserve
(
additional
)
}
}
impl
<
K
V
S
>
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
StoreMut
<
K
V
>
{
pub
fn
get_mut
<
Q
:
?
Sized
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
&
mut
V
>
where
K
:
Borrow
<
Q
>
Q
:
Ord
{
match
self
.
find_index
(
key
)
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
Ok
(
found
)
=
>
Some
(
self
.
values
.
lm_get_mut
(
found
)
.
unwrap
(
)
.
1
)
Err
(
_
)
=
>
None
}
}
#
[
must_use
]
pub
fn
try_append
(
&
mut
self
key
:
K
value
:
V
)
-
>
Option
<
(
K
V
)
>
{
if
let
Some
(
last
)
=
self
.
values
.
lm_last
(
)
{
if
last
.
0
>
=
&
key
{
return
Some
(
(
key
value
)
)
;
}
}
self
.
values
.
lm_push
(
key
value
)
;
None
}
pub
fn
insert
(
&
mut
self
key
:
K
value
:
V
)
-
>
Option
<
V
>
{
self
.
insert_save_key
(
key
value
)
.
map
(
|
(
_
v
)
|
v
)
}
fn
insert_save_key
(
&
mut
self
key
:
K
value
:
V
)
-
>
Option
<
(
K
V
)
>
{
match
self
.
values
.
lm_binary_search_by
(
|
k
|
k
.
cmp
(
&
key
)
)
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
Ok
(
found
)
=
>
Some
(
(
key
mem
:
:
replace
(
self
.
values
.
lm_get_mut
(
found
)
.
unwrap
(
)
.
1
value
)
)
)
Err
(
ins
)
=
>
{
self
.
values
.
lm_insert
(
ins
key
value
)
;
None
}
}
}
pub
fn
try_insert
(
&
mut
self
key
:
K
value
:
V
)
-
>
Option
<
(
K
V
)
>
{
match
self
.
values
.
lm_binary_search_by
(
|
k
|
k
.
cmp
(
&
key
)
)
{
Ok
(
_
)
=
>
Some
(
(
key
value
)
)
Err
(
ins
)
=
>
{
self
.
values
.
lm_insert
(
ins
key
value
)
;
None
}
}
}
pub
fn
remove
<
Q
:
?
Sized
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
V
>
where
K
:
Borrow
<
Q
>
Q
:
Ord
{
match
self
.
values
.
lm_binary_search_by
(
|
k
|
k
.
borrow
(
)
.
cmp
(
key
)
)
{
Ok
(
found
)
=
>
Some
(
self
.
values
.
lm_remove
(
found
)
.
1
)
Err
(
_
)
=
>
None
}
}
}
impl
<
'
a
K
:
'
a
V
:
'
a
S
>
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
StoreIterableMut
<
'
a
K
V
>
+
StoreFromIterator
<
K
V
>
{
pub
fn
extend_from_litemap
(
&
mut
self
other
:
Self
)
-
>
Option
<
Self
>
{
if
self
.
is_empty
(
)
{
self
.
values
=
other
.
values
;
return
None
;
}
if
other
.
is_empty
(
)
{
return
None
;
}
if
self
.
last
(
)
.
map
(
|
(
k
_
)
|
k
)
<
other
.
first
(
)
.
map
(
|
(
k
_
)
|
k
)
{
self
.
values
.
lm_extend_end
(
other
.
values
)
;
None
}
else
if
self
.
first
(
)
.
map
(
|
(
k
_
)
|
k
)
>
other
.
last
(
)
.
map
(
|
(
k
_
)
|
k
)
{
self
.
values
.
lm_extend_start
(
other
.
values
)
;
None
}
else
{
let
leftover_tuples
=
other
.
values
.
lm_into_iter
(
)
.
filter_map
(
|
(
k
v
)
|
self
.
insert_save_key
(
k
v
)
)
.
collect
(
)
;
let
ret
=
LiteMap
{
values
:
leftover_tuples
_key_type
:
PhantomData
_value_type
:
PhantomData
}
;
if
ret
.
is_empty
(
)
{
None
}
else
{
Some
(
ret
)
}
}
}
}
impl
<
K
V
S
>
Default
for
LiteMap
<
K
V
S
>
where
S
:
Store
<
K
V
>
+
Default
{
fn
default
(
)
-
>
Self
{
Self
{
values
:
S
:
:
default
(
)
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
}
impl
<
K
V
S
>
Index
<
&
'
_
K
>
for
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
Store
<
K
V
>
{
type
Output
=
V
;
fn
index
(
&
self
key
:
&
K
)
-
>
&
V
{
#
[
allow
(
clippy
:
:
panic
)
]
match
self
.
get
(
key
)
{
Some
(
v
)
=
>
v
None
=
>
panic
!
(
"
no
entry
found
for
key
"
)
}
}
}
impl
<
K
V
S
>
IndexMut
<
&
'
_
K
>
for
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
StoreMut
<
K
V
>
{
fn
index_mut
(
&
mut
self
key
:
&
K
)
-
>
&
mut
V
{
#
[
allow
(
clippy
:
:
panic
)
]
match
self
.
get_mut
(
key
)
{
Some
(
v
)
=
>
v
None
=
>
panic
!
(
"
no
entry
found
for
key
"
)
}
}
}
impl
<
K
V
S
>
FromIterator
<
(
K
V
)
>
for
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
StoreFromIterable
<
K
V
>
{
fn
from_iter
<
I
:
IntoIterator
<
Item
=
(
K
V
)
>
>
(
iter
:
I
)
-
>
Self
{
let
values
=
S
:
:
lm_sort_from_iter
(
iter
)
;
Self
:
:
from_sorted_store_unchecked
(
values
)
}
}
impl
<
'
a
K
:
'
a
V
:
'
a
S
>
LiteMap
<
K
V
S
>
where
S
:
StoreIterable
<
'
a
K
V
>
{
pub
fn
iter
(
&
'
a
self
)
-
>
impl
Iterator
<
Item
=
(
&
'
a
K
&
'
a
V
)
>
+
DoubleEndedIterator
{
self
.
values
.
lm_iter
(
)
}
pub
fn
iter_keys
(
&
'
a
self
)
-
>
impl
Iterator
<
Item
=
&
'
a
K
>
+
DoubleEndedIterator
{
self
.
values
.
lm_iter
(
)
.
map
(
|
val
|
val
.
0
)
}
pub
fn
iter_values
(
&
'
a
self
)
-
>
impl
Iterator
<
Item
=
&
'
a
V
>
+
DoubleEndedIterator
{
self
.
values
.
lm_iter
(
)
.
map
(
|
val
|
val
.
1
)
}
}
impl
<
'
a
K
:
'
a
V
:
'
a
S
>
LiteMap
<
K
V
S
>
where
S
:
StoreIterableMut
<
'
a
K
V
>
{
pub
fn
iter_mut
(
&
'
a
mut
self
)
-
>
impl
Iterator
<
Item
=
(
&
'
a
K
&
'
a
mut
V
)
>
+
DoubleEndedIterator
{
self
.
values
.
lm_iter_mut
(
)
}
}
impl
<
K
V
S
>
LiteMap
<
K
V
S
>
where
S
:
StoreMut
<
K
V
>
{
#
[
inline
]
pub
fn
retain
<
F
>
(
&
mut
self
predicate
:
F
)
where
F
:
FnMut
(
&
K
&
V
)
-
>
bool
{
self
.
values
.
lm_retain
(
predicate
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
crate
:
:
LiteMap
;
#
[
test
]
fn
from_iterator
(
)
{
let
mut
expected
=
LiteMap
:
:
with_capacity
(
4
)
;
expected
.
insert
(
1
"
updated
-
one
"
)
;
expected
.
insert
(
2
"
original
-
two
"
)
;
expected
.
insert
(
3
"
original
-
three
"
)
;
expected
.
insert
(
4
"
updated
-
four
"
)
;
let
actual
=
vec
!
[
(
1
"
original
-
one
"
)
(
2
"
original
-
two
"
)
(
4
"
original
-
four
"
)
(
4
"
updated
-
four
"
)
(
1
"
updated
-
one
"
)
(
3
"
original
-
three
"
)
]
.
into_iter
(
)
.
collect
:
:
<
LiteMap
<
_
_
>
>
(
)
;
assert_eq
!
(
expected
actual
)
;
}
fn
make_13
(
)
-
>
LiteMap
<
usize
&
'
static
str
>
{
let
mut
result
=
LiteMap
:
:
new
(
)
;
result
.
insert
(
1
"
one
"
)
;
result
.
insert
(
3
"
three
"
)
;
result
}
fn
make_24
(
)
-
>
LiteMap
<
usize
&
'
static
str
>
{
let
mut
result
=
LiteMap
:
:
new
(
)
;
result
.
insert
(
2
"
TWO
"
)
;
result
.
insert
(
4
"
FOUR
"
)
;
result
}
fn
make_46
(
)
-
>
LiteMap
<
usize
&
'
static
str
>
{
let
mut
result
=
LiteMap
:
:
new
(
)
;
result
.
insert
(
4
"
four
"
)
;
result
.
insert
(
6
"
six
"
)
;
result
}
#
[
test
]
fn
extend_from_litemap_append
(
)
{
let
mut
map
=
LiteMap
:
:
new
(
)
;
map
.
extend_from_litemap
(
make_13
(
)
)
.
ok_or
(
(
)
)
.
expect_err
(
"
Append
to
empty
map
"
)
;
map
.
extend_from_litemap
(
make_46
(
)
)
.
ok_or
(
(
)
)
.
expect_err
(
"
Append
to
lesser
map
"
)
;
assert_eq
!
(
map
.
len
(
)
4
)
;
}
#
[
test
]
fn
extend_from_litemap_prepend
(
)
{
let
mut
map
=
LiteMap
:
:
new
(
)
;
map
.
extend_from_litemap
(
make_46
(
)
)
.
ok_or
(
(
)
)
.
expect_err
(
"
Prepend
to
empty
map
"
)
;
map
.
extend_from_litemap
(
make_13
(
)
)
.
ok_or
(
(
)
)
.
expect_err
(
"
Prepend
to
lesser
map
"
)
;
assert_eq
!
(
map
.
len
(
)
4
)
;
}
#
[
test
]
fn
extend_from_litemap_insert
(
)
{
let
mut
map
=
LiteMap
:
:
new
(
)
;
map
.
extend_from_litemap
(
make_13
(
)
)
.
ok_or
(
(
)
)
.
expect_err
(
"
Append
to
empty
map
"
)
;
map
.
extend_from_litemap
(
make_24
(
)
)
.
ok_or
(
(
)
)
.
expect_err
(
"
Insert
with
no
conflict
"
)
;
map
.
extend_from_litemap
(
make_46
(
)
)
.
ok_or
(
(
)
)
.
expect
(
"
Insert
with
conflict
"
)
;
assert_eq
!
(
map
.
len
(
)
5
)
;
}
}
