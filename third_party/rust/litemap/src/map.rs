use
crate
:
:
store
:
:
*
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
use
alloc
:
:
boxed
:
:
Box
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
borrow
:
:
Borrow
;
use
core
:
:
cmp
:
:
Ordering
;
use
core
:
:
fmt
:
:
Debug
;
use
core
:
:
iter
:
:
FromIterator
;
use
core
:
:
marker
:
:
PhantomData
;
use
core
:
:
mem
;
use
core
:
:
ops
:
:
{
Index
IndexMut
Range
}
;
macro_rules
!
litemap_impl
(
(
cfg
:
meta
store
:
ident
(
=
defaultty
:
ty
)
?
)
=
>
{
/
/
/
A
simple
"
flat
"
map
based
on
a
sorted
vector
/
/
/
/
/
/
See
the
[
module
level
documentation
]
[
super
]
for
why
one
should
use
this
.
/
/
/
/
/
/
The
API
is
roughly
similar
to
that
of
[
std
:
:
collections
:
:
BTreeMap
]
.
#
[
derive
(
Clone
Debug
PartialEq
Eq
Hash
PartialOrd
Ord
)
]
#
[
cfg_attr
(
feature
=
"
yoke
"
derive
(
yoke
:
:
Yokeable
)
)
]
#
[
cfg
(
cfg
)
]
pub
struct
LiteMap
<
K
:
?
Sized
V
:
?
Sized
store
(
=
defaultty
)
?
>
{
pub
(
crate
)
values
:
store
pub
(
crate
)
_key_type
:
PhantomData
<
K
>
pub
(
crate
)
_value_type
:
PhantomData
<
V
>
}
}
;
)
;
litemap_impl
!
(
feature
=
"
alloc
"
S
=
alloc
:
:
vec
:
:
Vec
<
(
K
V
)
>
)
;
litemap_impl
!
(
not
(
feature
=
"
alloc
"
)
S
)
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
impl
<
K
V
>
LiteMap
<
K
V
>
{
pub
const
fn
new_vec
(
)
-
>
Self
{
Self
{
values
:
alloc
:
:
vec
:
:
Vec
:
:
new
(
)
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
}
impl
<
K
V
S
>
LiteMap
<
K
V
S
>
{
pub
const
fn
from_sorted_store_unchecked
(
values
:
S
)
-
>
Self
{
Self
{
values
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
impl
<
K
V
>
LiteMap
<
K
V
Vec
<
(
K
V
)
>
>
{
#
[
inline
]
pub
fn
into_tuple_vec
(
self
)
-
>
Vec
<
(
K
V
)
>
{
self
.
values
}
}
impl
<
K
:
?
Sized
V
:
?
Sized
S
>
LiteMap
<
K
V
S
>
where
S
:
StoreConstEmpty
<
K
V
>
{
pub
const
fn
new
(
)
-
>
Self
{
Self
{
values
:
S
:
:
EMPTY
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
}
impl
<
K
:
?
Sized
V
:
?
Sized
S
>
LiteMap
<
K
V
S
>
where
S
:
Store
<
K
V
>
{
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
values
.
lm_len
(
)
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
values
.
lm_is_empty
(
)
}
#
[
inline
]
pub
fn
get_indexed
(
&
self
index
:
usize
)
-
>
Option
<
(
&
K
&
V
)
>
{
self
.
values
.
lm_get
(
index
)
}
#
[
inline
]
pub
fn
first
(
&
self
)
-
>
Option
<
(
&
K
&
V
)
>
{
self
.
values
.
lm_get
(
0
)
}
#
[
inline
]
pub
fn
last
(
&
self
)
-
>
Option
<
(
&
K
&
V
)
>
{
self
.
values
.
lm_last
(
)
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
fn
to_boxed_keys_values
<
KB
:
?
Sized
VB
:
?
Sized
SB
>
(
&
self
)
-
>
LiteMap
<
Box
<
KB
>
Box
<
VB
>
SB
>
where
SB
:
StoreMut
<
Box
<
KB
>
Box
<
VB
>
>
K
:
Borrow
<
KB
>
V
:
Borrow
<
VB
>
Box
<
KB
>
:
for
<
'
a
>
From
<
&
'
a
KB
>
Box
<
VB
>
:
for
<
'
a
>
From
<
&
'
a
VB
>
{
let
mut
values
=
SB
:
:
lm_with_capacity
(
self
.
len
(
)
)
;
for
i
in
0
.
.
self
.
len
(
)
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
let
(
k
v
)
=
self
.
values
.
lm_get
(
i
)
.
unwrap
(
)
;
values
.
lm_push
(
Box
:
:
from
(
k
.
borrow
(
)
)
Box
:
:
from
(
v
.
borrow
(
)
)
)
}
LiteMap
{
values
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
fn
to_boxed_keys
<
KB
:
?
Sized
SB
>
(
&
self
)
-
>
LiteMap
<
Box
<
KB
>
V
SB
>
where
V
:
Clone
SB
:
StoreMut
<
Box
<
KB
>
V
>
K
:
Borrow
<
KB
>
Box
<
KB
>
:
for
<
'
a
>
From
<
&
'
a
KB
>
{
let
mut
values
=
SB
:
:
lm_with_capacity
(
self
.
len
(
)
)
;
for
i
in
0
.
.
self
.
len
(
)
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
let
(
k
v
)
=
self
.
values
.
lm_get
(
i
)
.
unwrap
(
)
;
values
.
lm_push
(
Box
:
:
from
(
k
.
borrow
(
)
)
v
.
clone
(
)
)
}
LiteMap
{
values
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
fn
to_boxed_values
<
VB
:
?
Sized
SB
>
(
&
self
)
-
>
LiteMap
<
K
Box
<
VB
>
SB
>
where
K
:
Clone
SB
:
StoreMut
<
K
Box
<
VB
>
>
V
:
Borrow
<
VB
>
Box
<
VB
>
:
for
<
'
a
>
From
<
&
'
a
VB
>
{
let
mut
values
=
SB
:
:
lm_with_capacity
(
self
.
len
(
)
)
;
for
i
in
0
.
.
self
.
len
(
)
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
let
(
k
v
)
=
self
.
values
.
lm_get
(
i
)
.
unwrap
(
)
;
values
.
lm_push
(
k
.
clone
(
)
Box
:
:
from
(
v
.
borrow
(
)
)
)
}
LiteMap
{
values
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
}
impl
<
K
:
?
Sized
V
:
?
Sized
S
>
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
Store
<
K
V
>
{
pub
fn
get
<
Q
>
(
&
self
key
:
&
Q
)
-
>
Option
<
&
V
>
where
K
:
Borrow
<
Q
>
Q
:
Ord
+
?
Sized
{
match
self
.
find_index
(
key
)
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
Ok
(
found
)
=
>
Some
(
self
.
values
.
lm_get
(
found
)
.
unwrap
(
)
.
1
)
Err
(
_
)
=
>
None
}
}
pub
fn
get_by
(
&
self
predicate
:
impl
FnMut
(
&
K
)
-
>
Ordering
)
-
>
Option
<
&
V
>
{
let
index
=
self
.
values
.
lm_binary_search_by
(
predicate
)
.
ok
(
)
?
;
self
.
values
.
lm_get
(
index
)
.
map
(
|
(
_
v
)
|
v
)
}
pub
fn
contains_key
<
Q
>
(
&
self
key
:
&
Q
)
-
>
bool
where
K
:
Borrow
<
Q
>
Q
:
Ord
+
?
Sized
{
self
.
find_index
(
key
)
.
is_ok
(
)
}
#
[
inline
]
pub
fn
find_index
<
Q
>
(
&
self
key
:
&
Q
)
-
>
Result
<
usize
usize
>
where
K
:
Borrow
<
Q
>
Q
:
Ord
+
?
Sized
{
self
.
values
.
lm_binary_search_by
(
|
k
|
k
.
borrow
(
)
.
cmp
(
key
)
)
}
}
impl
<
K
:
?
Sized
V
:
?
Sized
S
>
LiteMap
<
K
V
S
>
where
S
:
StoreSlice
<
K
V
>
{
pub
fn
get_indexed_range
(
&
self
range
:
Range
<
usize
>
)
-
>
Option
<
LiteMap
<
K
V
&
S
:
:
Slice
>
>
{
let
subslice
=
self
.
values
.
lm_get_range
(
range
)
?
;
Some
(
LiteMap
{
values
:
subslice
_key_type
:
PhantomData
_value_type
:
PhantomData
}
)
}
pub
fn
as_sliced
(
&
self
)
-
>
LiteMap
<
K
V
&
S
:
:
Slice
>
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
let
subslice
=
self
.
values
.
lm_get_range
(
0
.
.
self
.
len
(
)
)
.
unwrap
(
)
;
LiteMap
{
values
:
subslice
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
pub
fn
as_slice
(
&
self
)
-
>
&
S
:
:
Slice
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
self
.
values
.
lm_get_range
(
0
.
.
self
.
len
(
)
)
.
unwrap
(
)
}
}
impl
<
'
a
K
:
'
a
V
:
'
a
S
>
LiteMap
<
K
V
S
>
where
S
:
Store
<
K
V
>
{
pub
fn
to_borrowed_keys_values
<
KB
:
?
Sized
VB
:
?
Sized
SB
>
(
&
'
a
self
)
-
>
LiteMap
<
&
'
a
KB
&
'
a
VB
SB
>
where
K
:
Borrow
<
KB
>
V
:
Borrow
<
VB
>
SB
:
StoreMut
<
&
'
a
KB
&
'
a
VB
>
{
let
mut
values
=
SB
:
:
lm_with_capacity
(
self
.
len
(
)
)
;
for
i
in
0
.
.
self
.
len
(
)
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
let
(
k
v
)
=
self
.
values
.
lm_get
(
i
)
.
unwrap
(
)
;
values
.
lm_push
(
k
.
borrow
(
)
v
.
borrow
(
)
)
}
LiteMap
{
values
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
pub
fn
to_borrowed_keys
<
KB
:
?
Sized
SB
>
(
&
'
a
self
)
-
>
LiteMap
<
&
'
a
KB
V
SB
>
where
K
:
Borrow
<
KB
>
V
:
Clone
SB
:
StoreMut
<
&
'
a
KB
V
>
{
let
mut
values
=
SB
:
:
lm_with_capacity
(
self
.
len
(
)
)
;
for
i
in
0
.
.
self
.
len
(
)
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
let
(
k
v
)
=
self
.
values
.
lm_get
(
i
)
.
unwrap
(
)
;
values
.
lm_push
(
k
.
borrow
(
)
v
.
clone
(
)
)
}
LiteMap
{
values
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
pub
fn
to_borrowed_values
<
VB
:
?
Sized
SB
>
(
&
'
a
self
)
-
>
LiteMap
<
K
&
'
a
VB
SB
>
where
K
:
Clone
V
:
Borrow
<
VB
>
SB
:
StoreMut
<
K
&
'
a
VB
>
{
let
mut
values
=
SB
:
:
lm_with_capacity
(
self
.
len
(
)
)
;
for
i
in
0
.
.
self
.
len
(
)
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
let
(
k
v
)
=
self
.
values
.
lm_get
(
i
)
.
unwrap
(
)
;
values
.
lm_push
(
k
.
clone
(
)
v
.
borrow
(
)
)
}
LiteMap
{
values
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
}
impl
<
K
V
S
>
LiteMap
<
K
V
S
>
where
S
:
StoreMut
<
K
V
>
{
pub
fn
with_capacity
(
capacity
:
usize
)
-
>
Self
{
Self
{
values
:
S
:
:
lm_with_capacity
(
capacity
)
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
pub
fn
clear
(
&
mut
self
)
{
self
.
values
.
lm_clear
(
)
}
pub
fn
reserve
(
&
mut
self
additional
:
usize
)
{
self
.
values
.
lm_reserve
(
additional
)
}
}
impl
<
K
V
S
>
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
StoreMut
<
K
V
>
{
pub
fn
get_mut
<
Q
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
&
mut
V
>
where
K
:
Borrow
<
Q
>
Q
:
Ord
+
?
Sized
{
match
self
.
find_index
(
key
)
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
Ok
(
found
)
=
>
Some
(
self
.
values
.
lm_get_mut
(
found
)
.
unwrap
(
)
.
1
)
Err
(
_
)
=
>
None
}
}
#
[
must_use
]
pub
fn
try_append
(
&
mut
self
key
:
K
value
:
V
)
-
>
Option
<
(
K
V
)
>
{
if
let
Some
(
last
)
=
self
.
values
.
lm_last
(
)
{
if
last
.
0
>
=
&
key
{
return
Some
(
(
key
value
)
)
;
}
}
self
.
values
.
lm_push
(
key
value
)
;
None
}
pub
fn
insert
(
&
mut
self
key
:
K
value
:
V
)
-
>
Option
<
V
>
{
self
.
insert_save_key
(
key
value
)
.
map
(
|
(
_
v
)
|
v
)
}
fn
insert_save_key
(
&
mut
self
key
:
K
value
:
V
)
-
>
Option
<
(
K
V
)
>
{
match
self
.
values
.
lm_binary_search_by
(
|
k
|
k
.
cmp
(
&
key
)
)
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
Ok
(
found
)
=
>
Some
(
(
key
mem
:
:
replace
(
self
.
values
.
lm_get_mut
(
found
)
.
unwrap
(
)
.
1
value
)
)
)
Err
(
ins
)
=
>
{
self
.
values
.
lm_insert
(
ins
key
value
)
;
None
}
}
}
pub
fn
try_insert
(
&
mut
self
key
:
K
value
:
V
)
-
>
Option
<
(
K
V
)
>
{
match
self
.
values
.
lm_binary_search_by
(
|
k
|
k
.
cmp
(
&
key
)
)
{
Ok
(
_
)
=
>
Some
(
(
key
value
)
)
Err
(
ins
)
=
>
{
self
.
values
.
lm_insert
(
ins
key
value
)
;
None
}
}
}
pub
fn
try_get_or_insert
<
E
>
(
&
mut
self
key
:
K
value
:
impl
FnOnce
(
&
K
)
-
>
Result
<
V
E
>
)
-
>
Result
<
(
usize
&
V
)
E
>
{
let
idx
=
match
self
.
values
.
lm_binary_search_by
(
|
k
|
k
.
cmp
(
&
key
)
)
{
Ok
(
idx
)
=
>
idx
Err
(
idx
)
=
>
{
let
value
=
value
(
&
key
)
?
;
self
.
values
.
lm_insert
(
idx
key
value
)
;
idx
}
}
;
#
[
allow
(
clippy
:
:
unwrap_used
)
]
Ok
(
(
idx
self
.
values
.
lm_get
(
idx
)
.
unwrap
(
)
.
1
)
)
}
pub
fn
remove
<
Q
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
V
>
where
K
:
Borrow
<
Q
>
Q
:
Ord
+
?
Sized
{
match
self
.
values
.
lm_binary_search_by
(
|
k
|
k
.
borrow
(
)
.
cmp
(
key
)
)
{
Ok
(
found
)
=
>
Some
(
self
.
values
.
lm_remove
(
found
)
.
1
)
Err
(
_
)
=
>
None
}
}
}
impl
<
K
V
S
>
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
StoreIntoIterator
<
K
V
>
+
StoreFromIterator
<
K
V
>
{
pub
fn
extend_from_litemap
(
&
mut
self
other
:
Self
)
-
>
Option
<
Self
>
{
if
self
.
is_empty
(
)
{
self
.
values
=
other
.
values
;
return
None
;
}
if
other
.
is_empty
(
)
{
return
None
;
}
if
self
.
last
(
)
.
map
(
|
(
k
_
)
|
k
)
<
other
.
first
(
)
.
map
(
|
(
k
_
)
|
k
)
{
self
.
values
.
lm_extend_end
(
other
.
values
)
;
None
}
else
if
self
.
first
(
)
.
map
(
|
(
k
_
)
|
k
)
>
other
.
last
(
)
.
map
(
|
(
k
_
)
|
k
)
{
self
.
values
.
lm_extend_start
(
other
.
values
)
;
None
}
else
{
let
leftover_tuples
=
other
.
values
.
lm_into_iter
(
)
.
filter_map
(
|
(
k
v
)
|
self
.
insert_save_key
(
k
v
)
)
.
collect
(
)
;
let
ret
=
LiteMap
{
values
:
leftover_tuples
_key_type
:
PhantomData
_value_type
:
PhantomData
}
;
if
ret
.
is_empty
(
)
{
None
}
else
{
Some
(
ret
)
}
}
}
}
impl
<
K
V
S
>
Default
for
LiteMap
<
K
V
S
>
where
S
:
Store
<
K
V
>
+
Default
{
fn
default
(
)
-
>
Self
{
Self
{
values
:
S
:
:
default
(
)
_key_type
:
PhantomData
_value_type
:
PhantomData
}
}
}
impl
<
K
V
S
>
Index
<
&
'
_
K
>
for
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
Store
<
K
V
>
{
type
Output
=
V
;
fn
index
(
&
self
key
:
&
K
)
-
>
&
V
{
#
[
allow
(
clippy
:
:
panic
)
]
match
self
.
get
(
key
)
{
Some
(
v
)
=
>
v
None
=
>
panic
!
(
"
no
entry
found
for
key
"
)
}
}
}
impl
<
K
V
S
>
IndexMut
<
&
'
_
K
>
for
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
StoreMut
<
K
V
>
{
fn
index_mut
(
&
mut
self
key
:
&
K
)
-
>
&
mut
V
{
#
[
allow
(
clippy
:
:
panic
)
]
match
self
.
get_mut
(
key
)
{
Some
(
v
)
=
>
v
None
=
>
panic
!
(
"
no
entry
found
for
key
"
)
}
}
}
impl
<
K
V
S
>
FromIterator
<
(
K
V
)
>
for
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
StoreFromIterable
<
K
V
>
{
fn
from_iter
<
I
:
IntoIterator
<
Item
=
(
K
V
)
>
>
(
iter
:
I
)
-
>
Self
{
let
values
=
S
:
:
lm_sort_from_iter
(
iter
)
;
Self
:
:
from_sorted_store_unchecked
(
values
)
}
}
impl
<
'
a
K
:
'
a
V
:
'
a
S
>
LiteMap
<
K
V
S
>
where
S
:
StoreIterable
<
'
a
K
V
>
{
pub
fn
iter
(
&
'
a
self
)
-
>
impl
DoubleEndedIterator
<
Item
=
(
&
'
a
K
&
'
a
V
)
>
{
self
.
values
.
lm_iter
(
)
}
#
[
deprecated
=
"
use
keys
(
)
instead
"
]
pub
fn
iter_keys
(
&
'
a
self
)
-
>
impl
DoubleEndedIterator
<
Item
=
&
'
a
K
>
{
self
.
values
.
lm_iter
(
)
.
map
(
|
val
|
val
.
0
)
}
#
[
deprecated
=
"
use
values
(
)
instead
"
]
pub
fn
iter_values
(
&
'
a
self
)
-
>
impl
DoubleEndedIterator
<
Item
=
&
'
a
V
>
{
self
.
values
.
lm_iter
(
)
.
map
(
|
val
|
val
.
1
)
}
pub
fn
keys
(
&
'
a
self
)
-
>
impl
DoubleEndedIterator
<
Item
=
&
'
a
K
>
{
self
.
values
.
lm_iter
(
)
.
map
(
|
val
|
val
.
0
)
}
pub
fn
values
(
&
'
a
self
)
-
>
impl
DoubleEndedIterator
<
Item
=
&
'
a
V
>
{
self
.
values
.
lm_iter
(
)
.
map
(
|
val
|
val
.
1
)
}
}
impl
<
'
a
K
:
'
a
V
:
'
a
S
>
LiteMap
<
K
V
S
>
where
S
:
StoreIterableMut
<
'
a
K
V
>
{
pub
fn
iter_mut
(
&
'
a
mut
self
)
-
>
impl
DoubleEndedIterator
<
Item
=
(
&
'
a
K
&
'
a
mut
V
)
>
{
self
.
values
.
lm_iter_mut
(
)
}
}
impl
<
K
V
S
>
IntoIterator
for
LiteMap
<
K
V
S
>
where
S
:
StoreIntoIterator
<
K
V
>
{
type
Item
=
(
K
V
)
;
type
IntoIter
=
S
:
:
KeyValueIntoIter
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
self
.
values
.
lm_into_iter
(
)
}
}
impl
<
'
a
K
V
S
>
IntoIterator
for
&
'
a
LiteMap
<
K
V
S
>
where
S
:
StoreIterable
<
'
a
K
V
>
{
type
Item
=
(
&
'
a
K
&
'
a
V
)
;
type
IntoIter
=
S
:
:
KeyValueIter
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
self
.
values
.
lm_iter
(
)
}
}
impl
<
'
a
K
V
S
>
IntoIterator
for
&
'
a
mut
LiteMap
<
K
V
S
>
where
S
:
StoreIterableMut
<
'
a
K
V
>
{
type
Item
=
(
&
'
a
K
&
'
a
mut
V
)
;
type
IntoIter
=
S
:
:
KeyValueIterMut
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
self
.
values
.
lm_iter_mut
(
)
}
}
impl
<
K
V
S
>
LiteMap
<
K
V
S
>
where
S
:
StoreBulkMut
<
K
V
>
{
#
[
inline
]
pub
fn
retain
<
F
>
(
&
mut
self
predicate
:
F
)
where
F
:
FnMut
(
&
K
&
V
)
-
>
bool
{
self
.
values
.
lm_retain
(
predicate
)
}
}
impl
<
'
a
K
V
>
LiteMap
<
K
V
&
'
a
[
(
K
V
)
]
>
{
#
[
inline
]
pub
const
fn
const_len
(
&
self
)
-
>
usize
{
self
.
values
.
len
(
)
}
#
[
inline
]
pub
const
fn
const_is_empty
(
&
self
)
-
>
bool
{
self
.
values
.
is_empty
(
)
}
#
[
inline
]
#
[
allow
(
clippy
:
:
indexing_slicing
)
]
pub
const
fn
const_get_indexed_or_panic
(
&
self
index
:
usize
)
-
>
&
'
a
(
K
V
)
{
&
self
.
values
[
index
]
}
}
const
fn
const_cmp_bytes
(
a
:
&
[
u8
]
b
:
&
[
u8
]
)
-
>
Ordering
{
let
(
max
default
)
=
if
a
.
len
(
)
=
=
b
.
len
(
)
{
(
a
.
len
(
)
Ordering
:
:
Equal
)
}
else
if
a
.
len
(
)
<
b
.
len
(
)
{
(
a
.
len
(
)
Ordering
:
:
Less
)
}
else
{
(
b
.
len
(
)
Ordering
:
:
Greater
)
}
;
let
mut
i
=
0
;
#
[
allow
(
clippy
:
:
indexing_slicing
)
]
while
i
<
max
{
if
a
[
i
]
=
=
b
[
i
]
{
i
+
=
1
;
continue
;
}
else
if
a
[
i
]
<
b
[
i
]
{
return
Ordering
:
:
Less
;
}
else
{
return
Ordering
:
:
Greater
;
}
}
default
}
impl
<
'
a
V
>
LiteMap
<
&
'
a
str
V
&
'
a
[
(
&
'
a
str
V
)
]
>
{
pub
const
fn
const_get_with_index
(
&
self
key
:
&
str
)
-
>
Option
<
(
usize
&
'
a
V
)
>
{
let
mut
i
=
0
;
let
mut
j
=
self
.
const_len
(
)
;
while
i
<
j
{
let
mid
=
(
i
+
j
)
/
2
;
#
[
allow
(
clippy
:
:
indexing_slicing
)
]
let
x
=
&
self
.
values
[
mid
]
;
match
const_cmp_bytes
(
key
.
as_bytes
(
)
x
.
0
.
as_bytes
(
)
)
{
Ordering
:
:
Equal
=
>
return
Some
(
(
mid
&
x
.
1
)
)
Ordering
:
:
Greater
=
>
i
=
mid
+
1
Ordering
:
:
Less
=
>
j
=
mid
}
;
}
None
}
}
impl
<
'
a
V
>
LiteMap
<
&
'
a
[
u8
]
V
&
'
a
[
(
&
'
a
[
u8
]
V
)
]
>
{
pub
const
fn
const_get_with_index
(
&
self
key
:
&
[
u8
]
)
-
>
Option
<
(
usize
&
'
a
V
)
>
{
let
mut
i
=
0
;
let
mut
j
=
self
.
const_len
(
)
;
while
i
<
j
{
let
mid
=
(
i
+
j
)
/
2
;
#
[
allow
(
clippy
:
:
indexing_slicing
)
]
let
x
=
&
self
.
values
[
mid
]
;
match
const_cmp_bytes
(
key
x
.
0
)
{
Ordering
:
:
Equal
=
>
return
Some
(
(
mid
&
x
.
1
)
)
Ordering
:
:
Greater
=
>
i
=
mid
+
1
Ordering
:
:
Less
=
>
j
=
mid
}
;
}
None
}
}
macro_rules
!
impl_const_get_with_index_for_integer
{
(
integer
:
ty
)
=
>
{
impl
<
'
a
V
>
LiteMap
<
integer
V
&
'
a
[
(
integer
V
)
]
>
{
/
/
/
Const
function
to
get
the
value
associated
with
an
integer
key
if
it
exists
.
/
/
/
/
/
/
Note
:
This
function
will
no
longer
be
needed
if
const
trait
behavior
is
stabilized
.
/
/
/
/
/
/
Also
returns
the
index
of
the
value
.
pub
const
fn
const_get_with_index
(
&
self
key
:
integer
)
-
>
Option
<
(
usize
&
'
a
V
)
>
{
let
mut
i
=
0
;
let
mut
j
=
self
.
const_len
(
)
;
while
i
<
j
{
let
mid
=
(
i
+
j
)
/
2
;
#
[
allow
(
clippy
:
:
indexing_slicing
)
]
/
/
in
range
let
x
=
&
self
.
values
[
mid
]
;
if
key
=
=
x
.
0
{
return
Some
(
(
mid
&
x
.
1
)
)
;
}
else
if
key
>
x
.
0
{
i
=
mid
+
1
;
}
else
{
j
=
mid
;
}
}
return
None
;
}
}
}
;
}
impl_const_get_with_index_for_integer
!
(
u8
)
;
impl_const_get_with_index_for_integer
!
(
u16
)
;
impl_const_get_with_index_for_integer
!
(
u32
)
;
impl_const_get_with_index_for_integer
!
(
u64
)
;
impl_const_get_with_index_for_integer
!
(
u128
)
;
impl_const_get_with_index_for_integer
!
(
usize
)
;
impl_const_get_with_index_for_integer
!
(
i8
)
;
impl_const_get_with_index_for_integer
!
(
i16
)
;
impl_const_get_with_index_for_integer
!
(
i32
)
;
impl_const_get_with_index_for_integer
!
(
i64
)
;
impl_const_get_with_index_for_integer
!
(
i128
)
;
impl_const_get_with_index_for_integer
!
(
isize
)
;
#
[
allow
(
clippy
:
:
exhaustive_enums
)
]
pub
enum
Entry
<
'
a
K
V
S
>
{
Occupied
(
OccupiedEntry
<
'
a
K
V
S
>
)
Vacant
(
VacantEntry
<
'
a
K
V
S
>
)
}
impl
<
K
V
S
>
Debug
for
Entry
<
'
_
K
V
S
>
{
fn
fmt
(
&
self
f
:
&
mut
core
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
core
:
:
fmt
:
:
Result
{
match
self
{
Self
:
:
Occupied
(
arg0
)
=
>
f
.
debug_tuple
(
"
Occupied
"
)
.
field
(
arg0
)
.
finish
(
)
Self
:
:
Vacant
(
arg0
)
=
>
f
.
debug_tuple
(
"
Vacant
"
)
.
field
(
arg0
)
.
finish
(
)
}
}
}
pub
struct
OccupiedEntry
<
'
a
K
V
S
>
{
map
:
&
'
a
mut
LiteMap
<
K
V
S
>
index
:
usize
}
impl
<
K
V
S
>
Debug
for
OccupiedEntry
<
'
_
K
V
S
>
{
fn
fmt
(
&
self
f
:
&
mut
core
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
core
:
:
fmt
:
:
Result
{
f
.
debug_struct
(
"
OccupiedEntry
"
)
.
field
(
"
index
"
&
self
.
index
)
.
finish
(
)
}
}
pub
struct
VacantEntry
<
'
a
K
V
S
>
{
map
:
&
'
a
mut
LiteMap
<
K
V
S
>
key
:
K
index
:
usize
}
impl
<
K
V
S
>
Debug
for
VacantEntry
<
'
_
K
V
S
>
{
fn
fmt
(
&
self
f
:
&
mut
core
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
core
:
:
fmt
:
:
Result
{
f
.
debug_struct
(
"
VacantEntry
"
)
.
field
(
"
index
"
&
self
.
index
)
.
finish
(
)
}
}
impl
<
'
a
K
V
S
>
Entry
<
'
a
K
V
S
>
where
K
:
Ord
S
:
StoreMut
<
K
V
>
{
pub
fn
or_insert
(
self
default
:
V
)
-
>
&
'
a
mut
V
{
match
self
{
Entry
:
:
Occupied
(
entry
)
=
>
entry
.
into_mut
(
)
Entry
:
:
Vacant
(
entry
)
=
>
entry
.
insert
(
default
)
}
}
pub
fn
or_default
(
self
)
-
>
&
'
a
mut
V
where
V
:
Default
{
self
.
or_insert
(
V
:
:
default
(
)
)
}
pub
fn
or_insert_with
<
F
:
FnOnce
(
)
-
>
V
>
(
self
default
:
F
)
-
>
&
'
a
mut
V
{
match
self
{
Entry
:
:
Occupied
(
entry
)
=
>
entry
.
into_mut
(
)
Entry
:
:
Vacant
(
entry
)
=
>
entry
.
insert
(
default
(
)
)
}
}
pub
fn
and_modify
<
F
>
(
self
f
:
F
)
-
>
Self
where
F
:
FnOnce
(
&
mut
V
)
{
match
self
{
Entry
:
:
Occupied
(
mut
entry
)
=
>
{
f
(
entry
.
get_mut
(
)
)
;
Entry
:
:
Occupied
(
entry
)
}
Entry
:
:
Vacant
(
entry
)
=
>
Entry
:
:
Vacant
(
entry
)
}
}
}
impl
<
'
a
K
V
S
>
OccupiedEntry
<
'
a
K
V
S
>
where
K
:
Ord
S
:
StoreMut
<
K
V
>
{
pub
fn
key
(
&
self
)
-
>
&
K
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
self
.
map
.
values
.
lm_get
(
self
.
index
)
.
unwrap
(
)
.
0
}
pub
fn
get
(
&
self
)
-
>
&
V
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
self
.
map
.
values
.
lm_get
(
self
.
index
)
.
unwrap
(
)
.
1
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
V
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
self
.
map
.
values
.
lm_get_mut
(
self
.
index
)
.
unwrap
(
)
.
1
}
pub
fn
into_mut
(
self
)
-
>
&
'
a
mut
V
{
#
[
allow
(
clippy
:
:
unwrap_used
)
]
self
.
map
.
values
.
lm_get_mut
(
self
.
index
)
.
unwrap
(
)
.
1
}
pub
fn
insert
(
&
mut
self
value
:
V
)
-
>
V
{
mem
:
:
replace
(
self
.
get_mut
(
)
value
)
}
pub
fn
remove
(
self
)
-
>
V
{
self
.
map
.
values
.
lm_remove
(
self
.
index
)
.
1
}
}
impl
<
'
a
K
V
S
>
VacantEntry
<
'
a
K
V
S
>
where
K
:
Ord
S
:
StoreMut
<
K
V
>
{
pub
fn
key
(
&
self
)
-
>
&
K
{
&
self
.
key
}
pub
fn
insert
(
self
value
:
V
)
-
>
&
'
a
mut
V
{
self
.
map
.
values
.
lm_insert
(
self
.
index
self
.
key
value
)
;
#
[
allow
(
clippy
:
:
unwrap_used
)
]
self
.
map
.
values
.
lm_get_mut
(
self
.
index
)
.
unwrap
(
)
.
1
}
}
impl
<
K
V
S
>
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
StoreMut
<
K
V
>
{
pub
fn
entry
(
&
mut
self
key
:
K
)
-
>
Entry
<
K
V
S
>
{
match
self
.
values
.
lm_binary_search_by
(
|
k
|
k
.
cmp
(
&
key
)
)
{
Ok
(
index
)
=
>
Entry
:
:
Occupied
(
OccupiedEntry
{
map
:
self
index
}
)
Err
(
index
)
=
>
Entry
:
:
Vacant
(
VacantEntry
{
map
:
self
key
index
}
)
}
}
}
impl
<
K
V
S
>
Extend
<
(
K
V
)
>
for
LiteMap
<
K
V
S
>
where
K
:
Ord
S
:
StoreBulkMut
<
K
V
>
{
fn
extend
<
T
:
IntoIterator
<
Item
=
(
K
V
)
>
>
(
&
mut
self
iter
:
T
)
{
self
.
values
.
lm_extend
(
iter
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
#
[
test
]
fn
from_iterator
(
)
{
let
mut
expected
=
LiteMap
:
:
with_capacity
(
4
)
;
expected
.
insert
(
1
"
updated
-
one
"
)
;
expected
.
insert
(
2
"
original
-
two
"
)
;
expected
.
insert
(
3
"
original
-
three
"
)
;
expected
.
insert
(
4
"
updated
-
four
"
)
;
let
actual
=
[
(
1
"
original
-
one
"
)
(
2
"
original
-
two
"
)
(
4
"
original
-
four
"
)
(
4
"
updated
-
four
"
)
(
1
"
updated
-
one
"
)
(
3
"
original
-
three
"
)
]
.
into_iter
(
)
.
collect
:
:
<
LiteMap
<
_
_
>
>
(
)
;
assert_eq
!
(
expected
actual
)
;
}
#
[
test
]
fn
extend
(
)
{
let
mut
expected
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
with_capacity
(
4
)
;
expected
.
insert
(
1
"
updated
-
one
"
)
;
expected
.
insert
(
2
"
original
-
two
"
)
;
expected
.
insert
(
3
"
original
-
three
"
)
;
expected
.
insert
(
4
"
updated
-
four
"
)
;
let
mut
actual
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
new
(
)
;
actual
.
insert
(
1
"
original
-
one
"
)
;
actual
.
extend
(
[
(
2
"
original
-
two
"
)
(
4
"
original
-
four
"
)
(
4
"
updated
-
four
"
)
(
1
"
updated
-
one
"
)
(
3
"
original
-
three
"
)
]
)
;
assert_eq
!
(
expected
actual
)
;
}
#
[
test
]
fn
extend2
(
)
{
let
mut
map
:
LiteMap
<
usize
&
str
>
=
LiteMap
:
:
new
(
)
;
map
.
extend
(
make_13
(
)
)
;
map
.
extend
(
make_24
(
)
)
;
map
.
extend
(
make_24
(
)
)
;
map
.
extend
(
make_46
(
)
)
;
map
.
extend
(
make_13
(
)
)
;
map
.
extend
(
make_46
(
)
)
;
assert_eq
!
(
map
.
len
(
)
5
)
;
}
fn
make_13
(
)
-
>
LiteMap
<
usize
&
'
static
str
>
{
let
mut
result
=
LiteMap
:
:
new
(
)
;
result
.
insert
(
1
"
one
"
)
;
result
.
insert
(
3
"
three
"
)
;
result
}
fn
make_24
(
)
-
>
LiteMap
<
usize
&
'
static
str
>
{
let
mut
result
=
LiteMap
:
:
new
(
)
;
result
.
insert
(
2
"
TWO
"
)
;
result
.
insert
(
4
"
FOUR
"
)
;
result
}
fn
make_46
(
)
-
>
LiteMap
<
usize
&
'
static
str
>
{
let
mut
result
=
LiteMap
:
:
new
(
)
;
result
.
insert
(
4
"
four
"
)
;
result
.
insert
(
6
"
six
"
)
;
result
}
#
[
test
]
fn
extend_from_litemap_append
(
)
{
let
mut
map
=
LiteMap
:
:
new
(
)
;
map
.
extend_from_litemap
(
make_13
(
)
)
.
ok_or
(
(
)
)
.
expect_err
(
"
Append
to
empty
map
"
)
;
map
.
extend_from_litemap
(
make_46
(
)
)
.
ok_or
(
(
)
)
.
expect_err
(
"
Append
to
lesser
map
"
)
;
assert_eq
!
(
map
.
len
(
)
4
)
;
}
#
[
test
]
fn
extend_from_litemap_prepend
(
)
{
let
mut
map
=
LiteMap
:
:
new
(
)
;
map
.
extend_from_litemap
(
make_46
(
)
)
.
ok_or
(
(
)
)
.
expect_err
(
"
Prepend
to
empty
map
"
)
;
map
.
extend_from_litemap
(
make_13
(
)
)
.
ok_or
(
(
)
)
.
expect_err
(
"
Prepend
to
lesser
map
"
)
;
assert_eq
!
(
map
.
len
(
)
4
)
;
}
#
[
test
]
fn
extend_from_litemap_insert
(
)
{
let
mut
map
=
LiteMap
:
:
new
(
)
;
map
.
extend_from_litemap
(
make_13
(
)
)
.
ok_or
(
(
)
)
.
expect_err
(
"
Append
to
empty
map
"
)
;
map
.
extend_from_litemap
(
make_24
(
)
)
.
ok_or
(
(
)
)
.
expect_err
(
"
Insert
with
no
conflict
"
)
;
map
.
extend_from_litemap
(
make_46
(
)
)
.
ok_or
(
(
)
)
.
expect
(
"
Insert
with
conflict
"
)
;
assert_eq
!
(
map
.
len
(
)
5
)
;
}
#
[
test
]
fn
test_const_cmp_bytes
(
)
{
let
strs
=
&
[
"
a
"
"
aa
"
"
abc
"
"
abde
"
"
bcd
"
"
bcde
"
]
;
for
i
in
0
.
.
strs
.
len
(
)
{
for
j
in
0
.
.
strs
.
len
(
)
{
let
a
=
strs
[
i
]
.
as_bytes
(
)
;
let
b
=
strs
[
j
]
.
as_bytes
(
)
;
assert_eq
!
(
a
.
cmp
(
b
)
const_cmp_bytes
(
a
b
)
)
;
}
}
}
#
[
test
]
fn
into_iterator
(
)
{
let
mut
map
=
LiteMap
:
:
<
_
_
Vec
<
(
_
_
)
>
>
:
:
new
(
)
;
map
.
insert
(
4
"
four
"
)
;
map
.
insert
(
6
"
six
"
)
;
let
mut
reference
=
vec
!
[
(
6
"
six
"
)
(
4
"
four
"
)
]
;
for
i
in
map
{
let
r
=
reference
.
pop
(
)
.
unwrap
(
)
;
assert_eq
!
(
r
i
)
;
}
assert
!
(
reference
.
is_empty
(
)
)
;
}
#
[
test
]
fn
entry_insert
(
)
{
let
mut
map
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
new
(
)
;
assert
!
(
matches
!
(
map
.
entry
(
1
)
Entry
:
:
Vacant
(
_
)
)
)
;
map
.
entry
(
1
)
.
or_insert
(
"
one
"
)
;
assert
!
(
matches
!
(
map
.
entry
(
1
)
Entry
:
:
Occupied
(
_
)
)
)
;
assert_eq
!
(
map
.
get
(
&
1
)
Some
(
&
"
one
"
)
)
;
}
#
[
test
]
fn
entry_insert_with
(
)
{
let
mut
map
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
new
(
)
;
assert
!
(
matches
!
(
map
.
entry
(
1
)
Entry
:
:
Vacant
(
_
)
)
)
;
map
.
entry
(
1
)
.
or_insert_with
(
|
|
"
one
"
)
;
assert
!
(
matches
!
(
map
.
entry
(
1
)
Entry
:
:
Occupied
(
_
)
)
)
;
assert_eq
!
(
map
.
get
(
&
1
)
Some
(
&
"
one
"
)
)
;
}
#
[
test
]
fn
entry_vacant_insert
(
)
{
let
mut
map
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
new
(
)
;
if
let
Entry
:
:
Vacant
(
entry
)
=
map
.
entry
(
1
)
{
entry
.
insert
(
"
one
"
)
;
}
assert_eq
!
(
map
.
get
(
&
1
)
Some
(
&
"
one
"
)
)
;
}
#
[
test
]
fn
entry_occupied_get_mut
(
)
{
let
mut
map
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
new
(
)
;
map
.
insert
(
1
"
one
"
)
;
if
let
Entry
:
:
Occupied
(
mut
entry
)
=
map
.
entry
(
1
)
{
*
entry
.
get_mut
(
)
=
"
uno
"
;
}
assert_eq
!
(
map
.
get
(
&
1
)
Some
(
&
"
uno
"
)
)
;
}
#
[
test
]
fn
entry_occupied_remove
(
)
{
let
mut
map
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
new
(
)
;
map
.
insert
(
1
"
one
"
)
;
if
let
Entry
:
:
Occupied
(
entry
)
=
map
.
entry
(
1
)
{
entry
.
remove
(
)
;
}
assert_eq
!
(
map
.
get
(
&
1
)
None
)
;
}
#
[
test
]
fn
entry_occupied_key
(
)
{
let
mut
map
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
new
(
)
;
map
.
insert
(
1
"
one
"
)
;
if
let
Entry
:
:
Occupied
(
entry
)
=
map
.
entry
(
1
)
{
assert_eq
!
(
entry
.
key
(
)
&
1
)
;
}
}
#
[
test
]
fn
entry_occupied_get
(
)
{
let
mut
map
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
new
(
)
;
map
.
insert
(
1
"
one
"
)
;
if
let
Entry
:
:
Occupied
(
entry
)
=
map
.
entry
(
1
)
{
assert_eq
!
(
entry
.
get
(
)
&
"
one
"
)
;
}
}
#
[
test
]
fn
entry_occupied_insert
(
)
{
let
mut
map
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
new
(
)
;
map
.
insert
(
1
"
one
"
)
;
if
let
Entry
:
:
Occupied
(
mut
entry
)
=
map
.
entry
(
1
)
{
assert_eq
!
(
entry
.
insert
(
"
uno
"
)
"
one
"
)
;
}
assert_eq
!
(
map
.
get
(
&
1
)
Some
(
&
"
uno
"
)
)
;
}
#
[
test
]
fn
entry_vacant_key
(
)
{
let
mut
map
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
new
(
)
;
if
let
Entry
:
:
Vacant
(
entry
)
=
map
.
entry
(
1
)
{
assert_eq
!
(
entry
.
key
(
)
&
1
)
;
}
}
#
[
test
]
fn
entry_or_insert
(
)
{
let
mut
map
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
new
(
)
;
map
.
entry
(
1
)
.
or_insert
(
"
one
"
)
;
assert_eq
!
(
map
.
get
(
&
1
)
Some
(
&
"
one
"
)
)
;
map
.
entry
(
1
)
.
or_insert
(
"
uno
"
)
;
assert_eq
!
(
map
.
get
(
&
1
)
Some
(
&
"
one
"
)
)
;
}
#
[
test
]
fn
entry_or_insert_with
(
)
{
let
mut
map
:
LiteMap
<
i32
&
str
>
=
LiteMap
:
:
new
(
)
;
map
.
entry
(
1
)
.
or_insert_with
(
|
|
"
one
"
)
;
assert_eq
!
(
map
.
get
(
&
1
)
Some
(
&
"
one
"
)
)
;
map
.
entry
(
1
)
.
or_insert_with
(
|
|
"
uno
"
)
;
assert_eq
!
(
map
.
get
(
&
1
)
Some
(
&
"
one
"
)
)
;
}
#
[
test
]
fn
entry_or_default
(
)
{
let
mut
map
:
LiteMap
<
i32
String
>
=
LiteMap
:
:
new
(
)
;
map
.
entry
(
1
)
.
or_default
(
)
;
assert_eq
!
(
map
.
get
(
&
1
)
Some
(
&
String
:
:
new
(
)
)
)
;
}
#
[
test
]
fn
entry_and_modify
(
)
{
let
mut
map
:
LiteMap
<
i32
i32
>
=
LiteMap
:
:
new
(
)
;
map
.
entry
(
1
)
.
or_insert
(
10
)
;
map
.
entry
(
1
)
.
and_modify
(
|
v
|
*
v
+
=
5
)
;
assert_eq
!
(
map
.
get
(
&
1
)
Some
(
&
15
)
)
;
map
.
entry
(
2
)
.
and_modify
(
|
v
|
*
v
+
=
5
)
.
or_insert
(
20
)
;
assert_eq
!
(
map
.
get
(
&
2
)
Some
(
&
20
)
)
;
}
}
