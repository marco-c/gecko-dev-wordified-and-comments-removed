{
%
-
match
obj
.
imp
(
)
-
%
}
{
%
-
when
ObjectImpl
:
:
Trait
%
}
:
:
uniffi
:
:
ffi_converter_trait_decl
!
(
{
{
obj
.
rust_name
(
)
}
}
"
{
{
obj
.
name
(
)
}
}
"
crate
:
:
UniFfiTag
)
;
{
%
else
%
}
#
[
:
:
uniffi
:
:
ffi_converter_interface
(
tag
=
crate
:
:
UniFfiTag
)
]
struct
{
{
obj
.
rust_name
(
)
}
}
{
}
{
%
endmatch
%
}
uniffi
:
:
deps
:
:
static_assertions
:
:
assert_impl_all
!
(
{
{
obj
.
rust_name
(
)
}
}
:
Sync
Send
)
;
{
%
let
ffi_free
=
obj
.
ffi_object_free
(
)
-
%
}
#
[
doc
(
hidden
)
]
#
[
no_mangle
]
pub
extern
"
C
"
fn
{
{
ffi_free
.
name
(
)
}
}
(
ptr
:
*
const
std
:
:
os
:
:
raw
:
:
c_void
call_status
:
&
mut
uniffi
:
:
RustCallStatus
)
{
uniffi
:
:
rust_call
(
call_status
|
|
{
assert
!
(
!
ptr
.
is_null
(
)
)
;
{
%
-
match
obj
.
imp
(
)
-
%
}
{
%
-
when
ObjectImpl
:
:
Trait
%
}
{
#
-
turn
it
into
a
Box
<
Arc
<
T
>
and
explicitly
drop
it
.
#
}
drop
(
unsafe
{
Box
:
:
from_raw
(
ptr
as
*
mut
std
:
:
sync
:
:
Arc
<
{
{
obj
.
rust_name
(
)
}
}
>
)
}
)
;
{
%
-
when
ObjectImpl
:
:
Struct
%
}
{
#
-
turn
it
into
an
Arc
and
explicitly
drop
it
.
#
}
drop
(
unsafe
{
:
:
std
:
:
sync
:
:
Arc
:
:
from_raw
(
ptr
as
*
const
{
{
obj
.
rust_name
(
)
}
}
)
}
)
;
{
%
endmatch
%
}
Ok
(
(
)
)
}
)
}
{
%
-
for
cons
in
obj
.
constructors
(
)
%
}
#
[
doc
(
hidden
)
]
#
[
no_mangle
]
pub
extern
"
C
"
fn
r
#
{
{
cons
.
ffi_func
(
)
.
name
(
)
}
}
(
{
%
-
call
rs
:
:
arg_list_ffi_decl
(
cons
.
ffi_func
(
)
)
%
}
)
-
>
*
const
std
:
:
os
:
:
raw
:
:
c_void
{
uniffi
:
:
deps
:
:
log
:
:
debug
!
(
"
{
{
cons
.
ffi_func
(
)
.
name
(
)
}
}
"
)
;
uniffi
:
:
rust_call
(
call_status
|
|
{
{
{
cons
|
return_ffi_converter
}
}
:
:
lower_return
(
{
%
-
if
cons
.
throws
(
)
%
}
{
{
obj
.
rust_name
(
)
}
}
:
:
{
%
call
rs
:
:
to_rs_call
(
cons
)
%
}
.
map
(
:
:
std
:
:
sync
:
:
Arc
:
:
new
)
.
map_err
(
Into
:
:
into
)
{
%
-
else
%
}
:
:
std
:
:
sync
:
:
Arc
:
:
new
(
{
{
obj
.
rust_name
(
)
}
}
:
:
{
%
call
rs
:
:
to_rs_call
(
cons
)
%
}
)
{
%
-
endif
%
}
)
}
)
}
{
%
-
endfor
%
}
{
%
-
for
meth
in
obj
.
methods
(
)
%
}
{
%
call
rs
:
:
method_decl_prelude
(
meth
)
%
}
<
{
{
obj
.
rust_name
(
)
}
}
>
:
:
{
%
call
rs
:
:
to_rs_call
(
meth
)
%
}
{
%
call
rs
:
:
method_decl_postscript
(
meth
)
%
}
{
%
endfor
%
}
{
%
-
for
tm
in
obj
.
uniffi_traits
(
)
%
}
{
#
All
magic
methods
get
an
explicit
shim
#
}
{
%
match
tm
%
}
{
%
when
UniffiTrait
:
:
Debug
{
fmt
}
%
}
{
%
call
rs
:
:
method_decl_prelude
(
fmt
)
%
}
{
uniffi
:
:
deps
:
:
static_assertions
:
:
assert_impl_all
!
(
{
{
obj
.
rust_name
(
)
}
}
:
std
:
:
fmt
:
:
Debug
)
;
format
!
(
"
{
:
?
}
"
match
<
std
:
:
sync
:
:
Arc
<
{
{
obj
.
rust_name
(
)
}
}
>
as
:
:
uniffi
:
:
FfiConverter
<
crate
:
:
UniFfiTag
>
>
:
:
try_lift
(
r
#
ptr
)
{
Ok
(
ref
val
)
=
>
val
Err
(
err
)
=
>
panic
!
(
"
Failed
to
convert
arg
'
{
}
'
:
{
}
"
"
ptr
"
err
)
}
)
}
{
%
call
rs
:
:
method_decl_postscript
(
fmt
)
%
}
{
%
when
UniffiTrait
:
:
Display
{
fmt
}
%
}
{
%
call
rs
:
:
method_decl_prelude
(
fmt
)
%
}
{
uniffi
:
:
deps
:
:
static_assertions
:
:
assert_impl_all
!
(
{
{
obj
.
rust_name
(
)
}
}
:
std
:
:
fmt
:
:
Display
)
;
format
!
(
"
{
}
"
match
<
std
:
:
sync
:
:
Arc
<
{
{
obj
.
rust_name
(
)
}
}
>
as
:
:
uniffi
:
:
FfiConverter
<
crate
:
:
UniFfiTag
>
>
:
:
try_lift
(
r
#
ptr
)
{
Ok
(
ref
val
)
=
>
val
Err
(
err
)
=
>
panic
!
(
"
Failed
to
convert
arg
'
{
}
'
:
{
}
"
"
ptr
"
err
)
}
)
}
{
%
call
rs
:
:
method_decl_postscript
(
fmt
)
%
}
{
%
when
UniffiTrait
:
:
Hash
{
hash
}
%
}
{
%
call
rs
:
:
method_decl_prelude
(
hash
)
%
}
{
use
:
:
std
:
:
hash
:
:
{
Hash
Hasher
}
;
uniffi
:
:
deps
:
:
static_assertions
:
:
assert_impl_all
!
(
{
{
obj
.
rust_name
(
)
}
}
:
Hash
)
;
let
mut
s
=
:
:
std
:
:
collections
:
:
hash_map
:
:
DefaultHasher
:
:
new
(
)
;
Hash
:
:
hash
(
match
<
std
:
:
sync
:
:
Arc
<
{
{
obj
.
rust_name
(
)
}
}
>
as
:
:
uniffi
:
:
FfiConverter
<
crate
:
:
UniFfiTag
>
>
:
:
try_lift
(
r
#
ptr
)
{
Ok
(
ref
val
)
=
>
val
Err
(
err
)
=
>
panic
!
(
"
Failed
to
convert
arg
'
{
}
'
:
{
}
"
"
ptr
"
err
)
}
&
mut
s
)
;
s
.
finish
(
)
}
{
%
call
rs
:
:
method_decl_postscript
(
hash
)
%
}
{
%
when
UniffiTrait
:
:
Eq
{
eq
ne
}
%
}
{
#
PartialEq
:
:
Eq
#
}
{
%
call
rs
:
:
method_decl_prelude
(
eq
)
%
}
{
use
:
:
std
:
:
cmp
:
:
PartialEq
;
uniffi
:
:
deps
:
:
static_assertions
:
:
assert_impl_all
!
(
{
{
obj
.
rust_name
(
)
}
}
:
PartialEq
)
;
PartialEq
:
:
eq
(
{
%
call
rs
:
:
_arg_list_rs_call
(
eq
)
-
%
}
)
}
{
%
call
rs
:
:
method_decl_postscript
(
eq
)
%
}
{
#
PartialEq
:
:
Ne
#
}
{
%
call
rs
:
:
method_decl_prelude
(
ne
)
%
}
{
use
:
:
std
:
:
cmp
:
:
PartialEq
;
uniffi
:
:
deps
:
:
static_assertions
:
:
assert_impl_all
!
(
{
{
obj
.
rust_name
(
)
}
}
:
PartialEq
)
;
PartialEq
:
:
ne
(
{
%
call
rs
:
:
_arg_list_rs_call
(
ne
)
-
%
}
)
}
{
%
call
rs
:
:
method_decl_postscript
(
ne
)
%
}
{
%
endmatch
%
}
{
%
endfor
%
}
