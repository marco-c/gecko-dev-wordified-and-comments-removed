{
%
if
obj
.
uses_deprecated_threadsafe_attribute
(
)
%
}
#
[
deprecated
(
since
=
"
0
.
11
.
0
"
note
=
"
The
[
Threadsafe
]
attribute
on
interfaces
is
now
the
default
and
its
use
is
deprecated
-
you
should
upgrade
\
{
{
obj
.
name
(
)
}
}
to
remove
the
[
ThreadSafe
]
attribute
.
\
See
https
:
/
/
github
.
com
/
mozilla
/
uniffi
-
rs
/
#
thread
-
safety
for
more
details
"
)
]
#
[
allow
(
non_snake_case
)
]
fn
uniffi_note_threadsafe_deprecation_
{
{
obj
.
name
(
)
}
}
(
)
{
}
{
%
endif
%
}
uniffi
:
:
deps
:
:
static_assertions
:
:
assert_impl_all
!
(
r
#
{
{
obj
.
name
(
)
}
}
:
Sync
Send
)
;
{
%
let
ffi_free
=
obj
.
ffi_object_free
(
)
-
%
}
#
[
doc
(
hidden
)
]
#
[
no_mangle
]
pub
extern
"
C
"
fn
{
{
ffi_free
.
name
(
)
}
}
(
ptr
:
*
const
std
:
:
os
:
:
raw
:
:
c_void
call_status
:
&
mut
uniffi
:
:
RustCallStatus
)
{
uniffi
:
:
call_with_output
(
call_status
|
|
{
assert
!
(
!
ptr
.
is_null
(
)
)
;
{
#
-
turn
it
into
an
Arc
and
explicitly
drop
it
.
#
}
drop
(
unsafe
{
std
:
:
sync
:
:
Arc
:
:
from_raw
(
ptr
as
*
const
r
#
{
{
obj
.
name
(
)
}
}
)
}
)
}
)
}
{
%
-
for
cons
in
obj
.
constructors
(
)
%
}
#
[
doc
(
hidden
)
]
#
[
no_mangle
]
pub
extern
"
C
"
fn
r
#
{
{
cons
.
ffi_func
(
)
.
name
(
)
}
}
(
{
%
-
call
rs
:
:
arg_list_ffi_decl
(
cons
.
ffi_func
(
)
)
%
}
)
-
>
*
const
std
:
:
os
:
:
raw
:
:
c_void
{
uniffi
:
:
deps
:
:
log
:
:
debug
!
(
"
{
{
cons
.
ffi_func
(
)
.
name
(
)
}
}
"
)
;
{
%
if
obj
.
uses_deprecated_threadsafe_attribute
(
)
%
}
uniffi_note_threadsafe_deprecation_
{
{
obj
.
name
(
)
}
}
(
)
;
{
%
endif
%
}
{
%
call
rs
:
:
to_rs_constructor_call
(
obj
cons
)
%
}
}
{
%
-
endfor
%
}
{
%
-
for
meth
in
obj
.
methods
(
)
%
}
#
[
doc
(
hidden
)
]
#
[
no_mangle
]
#
[
allow
(
clippy
:
:
let_unit_value
)
]
pub
extern
"
C
"
fn
r
#
{
{
meth
.
ffi_func
(
)
.
name
(
)
}
}
(
{
%
-
call
rs
:
:
arg_list_ffi_decl
(
meth
.
ffi_func
(
)
)
%
}
)
{
%
call
rs
:
:
return_signature
(
meth
)
%
}
{
uniffi
:
:
deps
:
:
log
:
:
debug
!
(
"
{
{
meth
.
ffi_func
(
)
.
name
(
)
}
}
"
)
;
{
%
call
rs
:
:
to_rs_method_call
(
obj
meth
)
%
}
}
{
%
endfor
%
}
