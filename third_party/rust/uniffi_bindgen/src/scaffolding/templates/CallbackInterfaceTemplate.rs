{
#
#
}
{
%
let
trait_name
=
cbi
.
name
(
)
-
%
}
{
%
let
trait_impl
=
format
!
(
"
UniFFICallbackHandler
{
}
"
trait_name
)
%
}
{
%
let
foreign_callback_internals
=
format
!
(
"
foreign_callback_
{
}
_internals
"
trait_name
)
|
upper
-
%
}
#
[
doc
(
hidden
)
]
static
{
{
foreign_callback_internals
}
}
:
uniffi
:
:
ForeignCallbackInternals
=
uniffi
:
:
ForeignCallbackInternals
:
:
new
(
)
;
#
[
doc
(
hidden
)
]
#
[
no_mangle
]
pub
extern
"
C
"
fn
{
{
cbi
.
ffi_init_callback
(
)
.
name
(
)
}
}
(
callback
:
uniffi
:
:
ForeignCallback
_
:
&
mut
uniffi
:
:
RustCallStatus
)
{
{
{
foreign_callback_internals
}
}
.
set_callback
(
callback
)
;
}
#
[
doc
(
hidden
)
]
#
[
derive
(
Debug
)
]
struct
{
{
trait_impl
}
}
{
handle
:
u64
}
impl
{
{
trait_impl
}
}
{
fn
new
(
handle
:
u64
)
-
>
Self
{
Self
{
handle
}
}
}
impl
Drop
for
{
{
trait_impl
}
}
{
fn
drop
(
&
mut
self
)
{
{
{
foreign_callback_internals
}
}
.
invoke_callback
:
:
<
(
)
crate
:
:
UniFfiTag
>
(
self
.
handle
uniffi
:
:
IDX_CALLBACK_FREE
Default
:
:
default
(
)
)
}
}
uniffi
:
:
deps
:
:
static_assertions
:
:
assert_impl_all
!
(
{
{
trait_impl
}
}
:
Send
)
;
impl
r
#
{
{
trait_name
}
}
for
{
{
trait_impl
}
}
{
{
%
-
for
meth
in
cbi
.
methods
(
)
%
}
{
#
-
Method
declaration
#
}
fn
r
#
{
{
meth
.
name
(
)
-
}
}
(
{
%
call
rs
:
:
arg_list_decl_with_prefix
(
"
&
self
"
meth
)
%
}
)
{
%
-
match
(
meth
.
return_type
(
)
meth
.
throws_type
(
)
)
%
}
{
%
-
when
(
Some
(
return_type
)
None
)
%
}
-
>
{
{
return_type
.
borrow
(
)
|
type_rs
}
}
{
%
-
when
(
Some
(
return_type
)
Some
(
err
)
)
%
}
-
>
:
:
std
:
:
result
:
:
Result
<
{
{
return_type
.
borrow
(
)
|
type_rs
}
}
{
{
err
|
type_rs
}
}
>
{
%
-
when
(
None
Some
(
err
)
)
%
}
-
>
:
:
std
:
:
result
:
:
Result
<
(
)
{
{
err
|
type_rs
}
}
>
{
%
else
-
%
}
{
%
-
endmatch
-
%
}
{
{
#
-
Method
body
#
}
{
#
-
Packing
args
into
a
RustBuffer
#
}
{
%
if
meth
.
arguments
(
)
.
len
(
)
=
=
0
-
%
}
let
args_buf
=
Vec
:
:
new
(
)
;
{
%
else
-
%
}
let
mut
args_buf
=
Vec
:
:
new
(
)
;
{
%
endif
-
%
}
{
%
-
for
arg
in
meth
.
arguments
(
)
%
}
{
{
arg
.
as_type
(
)
.
borrow
(
)
|
ffi_trait
(
"
Lower
"
)
}
}
:
:
write
(
r
#
{
{
arg
.
name
(
)
}
}
&
mut
args_buf
)
;
{
%
-
endfor
-
%
}
let
args_rbuf
=
uniffi
:
:
RustBuffer
:
:
from_vec
(
args_buf
)
;
{
#
-
Calling
into
foreign
code
.
#
}
{
{
foreign_callback_internals
}
}
.
invoke_callback
:
:
<
{
{
meth
|
return_type
}
}
crate
:
:
UniFfiTag
>
(
self
.
handle
{
{
loop
.
index
}
}
args_rbuf
)
}
{
%
-
endfor
%
}
}
:
:
uniffi
:
:
scaffolding_ffi_converter_callback_interface
!
(
r
#
{
{
trait_name
}
}
{
{
trait_impl
}
}
)
;
