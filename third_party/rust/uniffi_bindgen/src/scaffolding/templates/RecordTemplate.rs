{
#
#
}
#
[
doc
(
hidden
)
]
pub
struct
{
{
rec
.
type_
(
)
.
borrow
(
)
|
ffi_converter_name
}
}
;
#
[
doc
(
hidden
)
]
impl
uniffi
:
:
RustBufferFfiConverter
for
{
{
rec
.
type_
(
)
.
borrow
(
)
|
ffi_converter_name
}
}
{
type
RustType
=
r
#
{
{
rec
.
name
(
)
}
}
;
fn
write
(
obj
:
r
#
{
{
rec
.
name
(
)
}
}
buf
:
&
mut
std
:
:
vec
:
:
Vec
<
u8
>
)
{
{
%
-
for
field
in
rec
.
fields
(
)
%
}
{
{
field
.
type_
(
)
.
borrow
(
)
|
ffi_converter
}
}
:
:
write
(
obj
.
r
#
{
{
field
.
name
(
)
}
}
buf
)
;
{
%
-
endfor
%
}
}
fn
try_read
(
buf
:
&
mut
&
[
u8
]
)
-
>
uniffi
:
:
deps
:
:
anyhow
:
:
Result
<
r
#
{
{
rec
.
name
(
)
}
}
>
{
Ok
(
r
#
{
{
rec
.
name
(
)
}
}
{
{
%
-
for
field
in
rec
.
fields
(
)
%
}
r
#
{
{
field
.
name
(
)
}
}
:
{
{
field
.
type_
(
)
.
borrow
(
)
|
ffi_converter
}
}
:
:
try_read
(
buf
)
?
{
%
-
endfor
%
}
}
)
}
}
