{
%
import
"
macros
.
rs
"
as
rs
%
}
uniffi
:
:
assert_compatible_version
!
(
"
{
{
uniffi_version
}
}
"
)
;
{
%
for
ty
in
ci
.
iter_types
(
)
%
}
{
%
-
match
ty
%
}
{
%
-
when
Type
:
:
Map
with
(
k
v
)
-
%
}
{
#
Next
comment
MUST
be
after
the
line
to
be
in
the
compiler
output
#
}
uniffi
:
:
deps
:
:
static_assertions
:
:
assert_impl_all
!
(
{
{
k
|
type_rs
}
}
:
:
:
std
:
:
cmp
:
:
Eq
:
:
std
:
:
hash
:
:
Hash
)
;
{
%
-
else
%
}
{
%
-
endmatch
%
}
{
%
endfor
%
}
{
%
include
"
RustBuffer
.
rs
"
%
}
{
%
for
e
in
ci
.
iter_error_definitions
(
)
%
}
{
%
include
"
ErrorTemplate
.
rs
"
%
}
{
%
endfor
%
}
{
%
for
e
in
ci
.
iter_enum_definitions
(
)
%
}
{
%
include
"
EnumTemplate
.
rs
"
%
}
{
%
endfor
%
}
{
%
for
rec
in
ci
.
iter_record_definitions
(
)
%
}
{
%
include
"
RecordTemplate
.
rs
"
%
}
{
%
endfor
%
}
{
%
-
for
func
in
ci
.
iter_function_definitions
(
)
%
}
{
%
include
"
TopLevelFunctionTemplate
.
rs
"
%
}
{
%
endfor
-
%
}
{
%
for
obj
in
ci
.
iter_object_definitions
(
)
%
}
{
%
include
"
ObjectTemplate
.
rs
"
%
}
{
%
endfor
%
}
{
%
for
cbi
in
ci
.
iter_callback_interface_definitions
(
)
%
}
{
%
include
"
CallbackInterfaceTemplate
.
rs
"
%
}
{
%
endfor
%
}
{
%
include
"
ExternalTypesTemplate
.
rs
"
%
}
{
%
include
"
ReexportUniFFIScaffolding
.
rs
"
%
}
{
%
-
import
"
macros
.
rs
"
as
rs
-
%
}
