{
#
#
}
#
[
doc
(
hidden
)
]
pub
struct
{
{
e
.
type_
(
)
.
borrow
(
)
|
ffi_converter_name
}
}
;
#
[
doc
(
hidden
)
]
impl
uniffi
:
:
RustBufferFfiConverter
for
{
{
e
.
type_
(
)
.
borrow
(
)
|
ffi_converter_name
}
}
{
type
RustType
=
r
#
{
{
e
.
name
(
)
}
}
;
{
%
if
e
.
is_flat
(
)
%
}
fn
write
(
obj
:
r
#
{
{
e
.
name
(
)
}
}
buf
:
&
mut
std
:
:
vec
:
:
Vec
<
u8
>
)
{
use
uniffi
:
:
deps
:
:
bytes
:
:
BufMut
;
let
msg
=
obj
.
to_string
(
)
;
match
obj
{
{
%
-
for
variant
in
e
.
variants
(
)
%
}
r
#
{
{
e
.
name
(
)
}
}
:
:
r
#
{
{
variant
.
name
(
)
}
}
{
.
.
}
=
>
{
buf
.
put_i32
(
{
{
loop
.
index
}
}
)
;
<
String
as
uniffi
:
:
FfiConverter
>
:
:
write
(
msg
buf
)
;
}
{
%
-
endfor
%
}
}
;
}
fn
try_read
(
_buf
:
&
mut
&
[
u8
]
)
-
>
uniffi
:
:
deps
:
:
anyhow
:
:
Result
<
r
#
{
{
e
.
name
(
)
}
}
>
{
panic
!
(
"
try_read
not
supported
for
flat
errors
"
)
;
}
{
%
else
%
}
fn
write
(
obj
:
r
#
{
{
e
.
name
(
)
}
}
buf
:
&
mut
std
:
:
vec
:
:
Vec
<
u8
>
)
{
use
uniffi
:
:
deps
:
:
bytes
:
:
BufMut
;
match
obj
{
{
%
-
for
variant
in
e
.
variants
(
)
%
}
r
#
{
{
e
.
name
(
)
}
}
:
:
r
#
{
{
variant
.
name
(
)
}
}
{
%
if
variant
.
has_fields
(
)
%
}
{
{
%
for
field
in
variant
.
fields
(
)
%
}
r
#
{
{
field
.
name
(
)
}
}
{
%
-
endfor
%
}
}
{
%
else
%
}
{
.
.
}
{
%
endif
%
}
=
>
{
buf
.
put_i32
(
{
{
loop
.
index
}
}
)
;
{
%
for
field
in
variant
.
fields
(
)
-
%
}
{
{
field
.
type_
(
)
.
borrow
(
)
|
ffi_converter
}
}
:
:
write
(
r
#
{
{
field
.
name
(
)
}
}
buf
)
;
{
%
-
endfor
%
}
}
{
%
-
endfor
%
}
}
;
}
fn
try_read
(
buf
:
&
mut
&
[
u8
]
)
-
>
uniffi
:
:
deps
:
:
anyhow
:
:
Result
<
r
#
{
{
e
.
name
(
)
}
}
>
{
use
uniffi
:
:
deps
:
:
bytes
:
:
Buf
;
uniffi
:
:
check_remaining
(
buf
4
)
?
;
Ok
(
match
buf
.
get_i32
(
)
{
{
%
-
for
variant
in
e
.
variants
(
)
%
}
{
{
loop
.
index
}
}
=
>
r
#
{
{
e
.
name
(
)
}
}
:
:
r
#
{
{
variant
.
name
(
)
}
}
{
%
if
variant
.
has_fields
(
)
%
}
{
{
%
for
field
in
variant
.
fields
(
)
%
}
r
#
{
{
field
.
name
(
)
}
}
:
{
{
field
.
type_
(
)
.
borrow
(
)
|
ffi_converter
}
}
:
:
try_read
(
buf
)
?
{
%
-
endfor
%
}
}
{
%
endif
%
}
{
%
-
endfor
%
}
v
=
>
uniffi
:
:
deps
:
:
anyhow
:
:
bail
!
(
"
Invalid
{
{
e
.
name
(
)
}
}
enum
value
:
{
}
"
v
)
}
)
}
{
%
endif
%
}
}
impl
uniffi
:
:
FfiError
for
{
{
e
.
type_
(
)
.
borrow
(
)
|
ffi_converter_name
}
}
{
}
