use
crate
:
:
interface
:
:
{
AsType
FfiType
}
;
use
std
:
:
fmt
;
pub
fn
to_askama_error
<
T
:
ToString
+
?
Sized
>
(
t
:
&
T
)
-
>
askama
:
:
Error
{
askama
:
:
Error
:
:
Custom
(
Box
:
:
new
(
FilterError
(
t
.
to_string
(
)
)
)
)
}
#
[
derive
(
Debug
)
]
struct
FilterError
(
String
)
;
impl
fmt
:
:
Display
for
FilterError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
{
}
"
self
.
0
)
}
}
impl
std
:
:
error
:
:
Error
for
FilterError
{
}
pub
fn
ffi_type
(
type_
:
&
impl
AsType
)
-
>
askama
:
:
Result
<
FfiType
askama
:
:
Error
>
{
Ok
(
type_
.
as_type
(
)
.
into
(
)
)
}
