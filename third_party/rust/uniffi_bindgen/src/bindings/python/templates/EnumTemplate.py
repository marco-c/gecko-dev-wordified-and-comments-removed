{
{
%
if
e
.
is_flat
(
)
%
}
class
{
{
type_name
}
}
(
enum
.
Enum
)
:
    
{
%
for
variant
in
e
.
variants
(
)
-
%
}
    
{
{
variant
.
name
(
)
|
enum_variant_py
}
}
=
{
{
loop
.
index
}
}
    
{
%
endfor
%
}
{
%
else
%
}
class
{
{
type_name
}
}
:
    
def
__init__
(
self
)
:
        
raise
RuntimeError
(
"
{
{
type_name
}
}
cannot
be
instantiated
directly
"
)
    
{
%
for
variant
in
e
.
variants
(
)
-
%
}
    
class
{
{
variant
.
name
(
)
|
enum_variant_py
}
}
:
        
def
__init__
(
self
{
%
for
field
in
variant
.
fields
(
)
%
}
{
{
field
.
name
(
)
|
var_name
}
}
{
%
if
loop
.
last
%
}
{
%
else
%
}
{
%
endif
%
}
{
%
endfor
%
}
)
:
            
{
%
if
variant
.
has_fields
(
)
%
}
            
{
%
-
for
field
in
variant
.
fields
(
)
%
}
            
self
.
{
{
field
.
name
(
)
|
var_name
}
}
=
{
{
field
.
name
(
)
|
var_name
}
}
            
{
%
-
endfor
%
}
            
{
%
else
%
}
            
pass
            
{
%
endif
%
}
        
def
__str__
(
self
)
:
            
return
"
{
{
type_name
}
}
.
{
{
variant
.
name
(
)
|
enum_variant_py
}
}
(
{
%
for
field
in
variant
.
fields
(
)
%
}
{
{
field
.
name
(
)
|
var_name
}
}
=
{
}
{
%
if
loop
.
last
%
}
{
%
else
%
}
{
%
endif
%
}
{
%
endfor
%
}
)
"
.
format
(
{
%
for
field
in
variant
.
fields
(
)
%
}
self
.
{
{
field
.
name
(
)
|
var_name
}
}
{
%
if
loop
.
last
%
}
{
%
else
%
}
{
%
endif
%
}
{
%
endfor
%
}
)
        
def
__eq__
(
self
other
)
:
            
if
not
other
.
is_
{
{
variant
.
name
(
)
|
var_name
}
}
(
)
:
                
return
False
            
{
%
-
for
field
in
variant
.
fields
(
)
%
}
            
if
self
.
{
{
field
.
name
(
)
|
var_name
}
}
!
=
other
.
{
{
field
.
name
(
)
|
var_name
}
}
:
                
return
False
            
{
%
-
endfor
%
}
            
return
True
    
{
%
endfor
%
}
    
{
%
for
variant
in
e
.
variants
(
)
-
%
}
    
def
is_
{
{
variant
.
name
(
)
|
var_name
}
}
(
self
)
-
>
bool
:
        
return
isinstance
(
self
{
{
type_name
}
}
.
{
{
variant
.
name
(
)
|
enum_variant_py
}
}
)
    
{
%
endfor
%
}
{
%
for
variant
in
e
.
variants
(
)
-
%
}
{
{
type_name
}
}
.
{
{
variant
.
name
(
)
|
enum_variant_py
}
}
=
type
(
"
{
{
type_name
}
}
.
{
{
variant
.
name
(
)
|
enum_variant_py
}
}
"
(
{
{
type_name
}
}
.
{
{
variant
.
name
(
)
|
enum_variant_py
}
}
{
{
type_name
}
}
)
{
}
)
{
%
endfor
%
}
{
%
endif
%
}
class
{
{
ffi_converter_name
}
}
(
FfiConverterRustBuffer
)
:
    
staticmethod
    
def
read
(
buf
)
:
        
variant
=
buf
.
readI32
(
)
        
{
%
-
for
variant
in
e
.
variants
(
)
%
}
        
if
variant
=
=
{
{
loop
.
index
}
}
:
            
{
%
-
if
e
.
is_flat
(
)
%
}
            
return
{
{
type_name
}
}
.
{
{
variant
.
name
(
)
|
enum_variant_py
}
}
            
{
%
-
else
%
}
            
return
{
{
type_name
}
}
.
{
{
variant
.
name
(
)
|
enum_variant_py
}
}
(
                
{
%
-
for
field
in
variant
.
fields
(
)
%
}
                
{
{
field
|
read_fn
}
}
(
buf
)
                
{
%
-
endfor
%
}
            
)
            
{
%
-
endif
%
}
        
{
%
-
endfor
%
}
        
raise
InternalError
(
"
Raw
enum
value
doesn
'
t
match
any
cases
"
)
    
def
write
(
value
buf
)
:
        
{
%
-
for
variant
in
e
.
variants
(
)
%
}
        
{
%
-
if
e
.
is_flat
(
)
%
}
        
if
value
=
=
{
{
type_name
}
}
.
{
{
variant
.
name
(
)
|
enum_variant_py
}
}
:
            
buf
.
writeI32
(
{
{
loop
.
index
}
}
)
        
{
%
-
else
%
}
        
if
value
.
is_
{
{
variant
.
name
(
)
|
var_name
}
}
(
)
:
            
buf
.
writeI32
(
{
{
loop
.
index
}
}
)
            
{
%
-
for
field
in
variant
.
fields
(
)
%
}
            
{
{
field
|
write_fn
}
}
(
value
.
{
{
field
.
name
(
)
|
var_name
}
}
buf
)
            
{
%
-
endfor
%
}
        
{
%
-
endif
%
}
        
{
%
-
endfor
%
}
