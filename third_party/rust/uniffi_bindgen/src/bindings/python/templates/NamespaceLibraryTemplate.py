from
pathlib
import
Path
def
loadIndirect
(
)
:
    
if
sys
.
platform
=
=
"
darwin
"
:
        
libname
=
"
lib
{
}
.
dylib
"
    
elif
sys
.
platform
.
startswith
(
"
win
"
)
:
        
libname
=
os
.
path
.
join
(
            
os
.
path
.
dirname
(
__file__
)
            
"
{
}
.
dll
"
        
)
    
else
:
        
libname
=
"
lib
{
}
.
so
"
    
lib
=
libname
.
format
(
"
{
{
config
.
cdylib_name
(
)
}
}
"
)
    
path
=
str
(
Path
(
__file__
)
.
parent
/
lib
)
    
return
ctypes
.
cdll
.
LoadLibrary
(
path
)
_UniFFILib
=
loadIndirect
(
)
{
%
-
for
func
in
ci
.
iter_ffi_function_definitions
(
)
%
}
_UniFFILib
.
{
{
func
.
name
(
)
}
}
.
argtypes
=
(
    
{
%
-
call
py
:
:
arg_list_ffi_decl
(
func
)
-
%
}
)
_UniFFILib
.
{
{
func
.
name
(
)
}
}
.
restype
=
{
%
match
func
.
return_type
(
)
%
}
{
%
when
Some
with
(
type_
)
%
}
{
{
type_
|
ffi_type_name
}
}
{
%
when
None
%
}
None
{
%
endmatch
%
}
{
%
-
endfor
%
}
