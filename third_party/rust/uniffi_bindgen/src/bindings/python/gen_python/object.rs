use
crate
:
:
backend
:
:
{
CodeDeclaration
CodeOracle
CodeType
Literal
}
;
use
crate
:
:
interface
:
:
{
ComponentInterface
Object
}
;
use
askama
:
:
Template
;
use
std
:
:
borrow
:
:
Borrow
;
use
super
:
:
filters
;
pub
struct
ObjectCodeType
{
id
:
String
}
impl
ObjectCodeType
{
pub
fn
new
(
id
:
String
)
-
>
Self
{
Self
{
id
}
}
}
impl
CodeType
for
ObjectCodeType
{
fn
type_label
(
&
self
oracle
:
&
dyn
CodeOracle
)
-
>
String
{
oracle
.
class_name
(
&
self
.
id
)
}
fn
canonical_name
(
&
self
_oracle
:
&
dyn
CodeOracle
)
-
>
String
{
format
!
(
"
Type
{
}
"
self
.
id
)
}
fn
literal
(
&
self
_oracle
:
&
dyn
CodeOracle
_literal
:
&
Literal
)
-
>
String
{
unreachable
!
(
)
;
}
fn
helper_code
(
&
self
oracle
:
&
dyn
CodeOracle
)
-
>
Option
<
String
>
{
Some
(
format
!
(
"
#
Helper
code
for
{
}
class
is
found
in
ObjectTemplate
.
py
"
self
.
type_label
(
oracle
)
)
)
}
fn
coerce
(
&
self
_oracle
:
&
dyn
CodeOracle
nm
:
&
str
)
-
>
String
{
nm
.
to_string
(
)
}
}
#
[
derive
(
Template
)
]
#
[
template
(
syntax
=
"
py
"
escape
=
"
none
"
path
=
"
ObjectTemplate
.
py
"
)
]
pub
struct
PythonObject
{
inner
:
Object
}
impl
PythonObject
{
pub
fn
new
(
inner
:
Object
_ci
:
&
ComponentInterface
)
-
>
Self
{
Self
{
inner
}
}
pub
fn
inner
(
&
self
)
-
>
&
Object
{
&
self
.
inner
}
}
impl
CodeDeclaration
for
PythonObject
{
fn
definition_code
(
&
self
_oracle
:
&
dyn
CodeOracle
)
-
>
Option
<
String
>
{
Some
(
self
.
render
(
)
.
unwrap
(
)
)
}
}
