#
pragma
once
#
include
<
stdbool
.
h
>
#
include
<
stdint
.
h
>
#
ifdef
UNIFFI_SHARED_H
#
ifndef
UNIFFI_SHARED_HEADER_V4
#
error
Combining
helper
code
from
multiple
versions
of
uniffi
is
not
supported
#
endif
#
else
#
define
UNIFFI_SHARED_H
#
define
UNIFFI_SHARED_HEADER_V4
typedef
struct
RustBuffer
{
int32_t
capacity
;
int32_t
len
;
uint8_t
*
_Nullable
data
;
}
RustBuffer
;
typedef
int32_t
(
*
ForeignCallback
)
(
uint64_t
int32_t
RustBuffer
RustBuffer
*
_Nonnull
)
;
typedef
struct
ForeignBytes
{
int32_t
len
;
const
uint8_t
*
_Nullable
data
;
}
ForeignBytes
;
typedef
struct
RustCallStatus
{
int8_t
code
;
RustBuffer
errorBuf
;
}
RustCallStatus
;
#
endif
{
%
for
func
in
ci
.
iter_ffi_function_definitions
(
)
-
%
}
{
%
-
match
func
.
return_type
(
)
-
%
}
{
%
-
when
Some
with
(
type_
)
%
}
{
{
type_
|
ffi_type_name
}
}
{
%
when
None
%
}
void
{
%
endmatch
%
}
{
{
func
.
name
(
)
}
}
(
{
%
call
swift
:
:
arg_list_ffi_decl
(
func
)
%
}
)
;
{
%
endfor
-
%
}
{
%
import
"
macros
.
swift
"
as
swift
%
}
