#
pragma
once
#
include
<
stdbool
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
ifdef
UNIFFI_SHARED_H
#
ifndef
UNIFFI_SHARED_HEADER_V4
#
error
Combining
helper
code
from
multiple
versions
of
uniffi
is
not
supported
#
endif
#
else
#
define
UNIFFI_SHARED_H
#
define
UNIFFI_SHARED_HEADER_V4
typedef
struct
RustBuffer
{
int32_t
capacity
;
int32_t
len
;
uint8_t
*
_Nullable
data
;
}
RustBuffer
;
typedef
int32_t
(
*
ForeignCallback
)
(
uint64_t
int32_t
const
uint8_t
*
_Nonnull
int32_t
RustBuffer
*
_Nonnull
)
;
typedef
void
(
*
UniFfiRustTaskCallback
)
(
const
void
*
_Nullable
int8_t
)
;
typedef
int8_t
(
*
UniFfiForeignExecutorCallback
)
(
size_t
uint32_t
UniFfiRustTaskCallback
_Nullable
const
void
*
_Nullable
)
;
typedef
struct
ForeignBytes
{
int32_t
len
;
const
uint8_t
*
_Nullable
data
;
}
ForeignBytes
;
typedef
struct
RustCallStatus
{
int8_t
code
;
RustBuffer
errorBuf
;
}
RustCallStatus
;
#
endif
typedef
void
(
*
UniFfiRustFutureContinuation
)
(
void
*
_Nonnull
int8_t
)
;
{
%
-
for
func
in
ci
.
iter_ffi_function_definitions
(
)
%
}
{
%
match
func
.
return_type
(
)
-
%
}
{
%
-
when
Some
with
(
type_
)
%
}
{
{
type_
|
header_ffi_type_name
}
}
{
%
when
None
%
}
void
{
%
endmatch
%
}
{
{
func
.
name
(
)
}
}
(
{
%
-
if
func
.
arguments
(
)
.
len
(
)
>
0
%
}
{
%
-
for
arg
in
func
.
arguments
(
)
%
}
{
{
-
arg
.
type_
(
)
.
borrow
(
)
|
header_ffi_type_name
}
}
{
{
arg
.
name
(
)
-
}
}
{
%
if
!
loop
.
last
|
|
func
.
has_rust_call_status_arg
(
)
%
}
{
%
endif
%
}
{
%
-
endfor
%
}
{
%
-
if
func
.
has_rust_call_status_arg
(
)
%
}
RustCallStatus
*
_Nonnull
out_status
{
%
endif
%
}
{
%
-
else
%
}
{
%
-
if
func
.
has_rust_call_status_arg
(
)
%
}
RustCallStatus
*
_Nonnull
out_status
{
%
-
else
%
}
void
{
%
endif
%
}
{
%
endif
%
}
)
;
{
%
-
endfor
%
}
{
%
import
"
macros
.
swift
"
as
swift
%
}
