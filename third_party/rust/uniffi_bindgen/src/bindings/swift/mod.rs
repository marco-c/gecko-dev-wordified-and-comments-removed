use
crate
:
:
{
BindingGenerator
Component
GenerationSettings
}
;
use
anyhow
:
:
Result
;
use
fs_err
as
fs
;
use
std
:
:
process
:
:
Command
;
mod
gen_swift
;
use
gen_swift
:
:
{
generate_bindings
Config
}
;
#
[
cfg
(
feature
=
"
bindgen
-
tests
"
)
]
pub
mod
test
;
struct
Bindings
{
library
:
String
header
:
String
modulemap
:
Option
<
String
>
}
pub
struct
SwiftBindingGenerator
;
impl
BindingGenerator
for
SwiftBindingGenerator
{
type
Config
=
Config
;
fn
new_config
(
&
self
root_toml
:
&
toml
:
:
Value
)
-
>
Result
<
Self
:
:
Config
>
{
Ok
(
match
root_toml
.
get
(
"
bindings
"
)
.
and_then
(
|
b
|
b
.
get
(
"
swift
"
)
)
{
Some
(
v
)
=
>
v
.
clone
(
)
.
try_into
(
)
?
None
=
>
Default
:
:
default
(
)
}
)
}
fn
update_component_configs
(
&
self
_settings
:
&
GenerationSettings
components
:
&
mut
Vec
<
Component
<
Self
:
:
Config
>
>
)
-
>
Result
<
(
)
>
{
for
c
in
&
mut
*
components
{
c
.
config
.
module_name
.
get_or_insert_with
(
|
|
c
.
ci
.
namespace
(
)
.
into
(
)
)
;
}
Ok
(
(
)
)
}
fn
write_bindings
(
&
self
settings
:
&
GenerationSettings
components
:
&
[
Component
<
Self
:
:
Config
>
]
)
-
>
Result
<
(
)
>
{
for
Component
{
ci
config
.
.
}
in
components
{
let
Bindings
{
header
library
modulemap
}
=
generate_bindings
(
config
ci
)
?
;
let
source_file
=
settings
.
out_dir
.
join
(
format
!
(
"
{
}
.
swift
"
config
.
module_name
(
)
)
)
;
fs
:
:
write
(
&
source_file
library
)
?
;
let
header_file
=
settings
.
out_dir
.
join
(
config
.
header_filename
(
)
)
;
fs
:
:
write
(
header_file
header
)
?
;
if
let
Some
(
modulemap
)
=
modulemap
{
let
modulemap_file
=
settings
.
out_dir
.
join
(
config
.
modulemap_filename
(
)
)
;
fs
:
:
write
(
modulemap_file
modulemap
)
?
;
}
if
settings
.
try_format_code
{
if
let
Err
(
e
)
=
Command
:
:
new
(
"
swiftformat
"
)
.
arg
(
source_file
.
as_str
(
)
)
.
output
(
)
{
println
!
(
"
Warning
:
Unable
to
auto
-
format
{
}
using
swiftformat
:
{
e
:
?
}
"
source_file
.
file_name
(
)
.
unwrap
(
)
)
;
}
}
}
Ok
(
(
)
)
}
}
