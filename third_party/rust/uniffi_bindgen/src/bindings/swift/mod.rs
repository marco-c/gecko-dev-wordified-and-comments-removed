use
std
:
:
process
:
:
Command
;
use
anyhow
:
:
Result
;
use
camino
:
:
Utf8Path
;
use
fs_err
as
fs
;
pub
mod
gen_swift
;
pub
use
gen_swift
:
:
{
generate_bindings
Config
}
;
mod
test
;
use
super
:
:
super
:
:
interface
:
:
ComponentInterface
;
pub
use
test
:
:
{
run_script
run_test
}
;
pub
struct
Bindings
{
library
:
String
header
:
String
modulemap
:
Option
<
String
>
}
pub
fn
write_bindings
(
config
:
&
Config
ci
:
&
ComponentInterface
out_dir
:
&
Utf8Path
try_format_code
:
bool
)
-
>
Result
<
(
)
>
{
let
Bindings
{
header
library
modulemap
}
=
generate_bindings
(
config
ci
)
?
;
let
source_file
=
out_dir
.
join
(
format
!
(
"
{
}
.
swift
"
config
.
module_name
(
)
)
)
;
fs
:
:
write
(
&
source_file
library
)
?
;
let
header_file
=
out_dir
.
join
(
config
.
header_filename
(
)
)
;
fs
:
:
write
(
header_file
header
)
?
;
if
let
Some
(
modulemap
)
=
modulemap
{
let
modulemap_file
=
out_dir
.
join
(
config
.
modulemap_filename
(
)
)
;
fs
:
:
write
(
modulemap_file
modulemap
)
?
;
}
if
try_format_code
{
if
let
Err
(
e
)
=
Command
:
:
new
(
"
swiftformat
"
)
.
arg
(
source_file
.
as_str
(
)
)
.
output
(
)
{
println
!
(
"
Warning
:
Unable
to
auto
-
format
{
}
using
swiftformat
:
{
e
:
?
}
"
source_file
.
file_name
(
)
.
unwrap
(
)
)
;
}
}
Ok
(
(
)
)
}
