use
once_cell
:
:
sync
:
:
Lazy
;
use
std
:
:
borrow
:
:
Borrow
;
use
std
:
:
cell
:
:
RefCell
;
use
std
:
:
collections
:
:
{
BTreeSet
HashMap
HashSet
}
;
use
std
:
:
fmt
:
:
Debug
;
use
anyhow
:
:
{
Context
Result
}
;
use
askama
:
:
Template
;
use
heck
:
:
{
ToLowerCamelCase
ToShoutySnakeCase
ToUpperCamelCase
}
;
use
serde
:
:
{
Deserialize
Serialize
}
;
use
super
:
:
Bindings
;
use
crate
:
:
interface
:
:
*
;
mod
callback_interface
;
mod
compounds
;
mod
custom
;
mod
enum_
;
mod
miscellany
;
mod
object
;
mod
primitives
;
mod
record
;
trait
CodeType
:
Debug
{
fn
type_label
(
&
self
)
-
>
String
;
fn
canonical_name
(
&
self
)
-
>
String
{
self
.
type_label
(
)
}
fn
literal
(
&
self
_literal
:
&
Literal
)
-
>
Result
<
String
>
{
unimplemented
!
(
"
Unimplemented
for
{
}
"
self
.
type_label
(
)
)
}
fn
ffi_converter_name
(
&
self
)
-
>
String
{
format
!
(
"
FfiConverter
{
}
"
self
.
canonical_name
(
)
)
}
fn
initialization_fn
(
&
self
)
-
>
Option
<
String
>
{
None
}
}
static
KEYWORDS
:
Lazy
<
HashSet
<
String
>
>
=
Lazy
:
:
new
(
|
|
{
[
"
associatedtype
"
"
class
"
"
deinit
"
"
enum
"
"
extension
"
"
fileprivate
"
"
func
"
"
import
"
"
init
"
"
inout
"
"
internal
"
"
let
"
"
open
"
"
operator
"
"
private
"
"
precedencegroup
"
"
protocol
"
"
public
"
"
rethrows
"
"
static
"
"
struct
"
"
subscript
"
"
typealias
"
"
var
"
"
break
"
"
case
"
"
catch
"
"
continue
"
"
default
"
"
defer
"
"
do
"
"
else
"
"
fallthrough
"
"
for
"
"
guard
"
"
if
"
"
in
"
"
repeat
"
"
return
"
"
throw
"
"
switch
"
"
where
"
"
while
"
"
Any
"
"
as
"
"
await
"
"
catch
"
"
false
"
"
is
"
"
nil
"
"
rethrows
"
"
self
"
"
Self
"
"
super
"
"
throw
"
"
throws
"
"
true
"
"
try
"
]
.
iter
(
)
.
map
(
ToString
:
:
to_string
)
.
collect
:
:
<
HashSet
<
_
>
>
(
)
}
)
;
pub
fn
quote_general_keyword
(
nm
:
String
)
-
>
String
{
if
KEYWORDS
.
contains
(
&
nm
)
{
format
!
(
"
{
nm
}
"
)
}
else
{
nm
}
}
static
ARG_KEYWORDS
:
Lazy
<
HashSet
<
String
>
>
=
Lazy
:
:
new
(
|
|
{
[
"
inout
"
"
var
"
"
let
"
]
.
iter
(
)
.
map
(
ToString
:
:
to_string
)
.
collect
:
:
<
HashSet
<
_
>
>
(
)
}
)
;
pub
fn
quote_arg_keyword
(
nm
:
String
)
-
>
String
{
if
ARG_KEYWORDS
.
contains
(
&
nm
)
{
format
!
(
"
{
nm
}
"
)
}
else
{
nm
}
}
#
[
derive
(
Debug
Clone
Default
Serialize
Deserialize
)
]
pub
struct
Config
{
pub
(
super
)
module_name
:
Option
<
String
>
ffi_module_name
:
Option
<
String
>
ffi_module_filename
:
Option
<
String
>
generate_module_map
:
Option
<
bool
>
#
[
serde
(
default
)
]
omit_checksums
:
bool
omit_argument_labels
:
Option
<
bool
>
generate_immutable_records
:
Option
<
bool
>
omit_localized_error_conformance
:
Option
<
bool
>
generate_case_iterable_conformance
:
Option
<
bool
>
generate_codable_conformance
:
Option
<
bool
>
#
[
serde
(
default
)
]
custom_types
:
HashMap
<
String
CustomTypeConfig
>
#
[
serde
(
default
)
]
link_frameworks
:
Vec
<
String
>
}
#
[
derive
(
Debug
Default
Clone
Serialize
Deserialize
)
]
#
[
serde
(
default
)
]
pub
struct
CustomTypeConfig
{
imports
:
Option
<
Vec
<
String
>
>
type_name
:
Option
<
String
>
into_custom
:
String
lift
:
String
from_custom
:
String
lower
:
String
}
impl
CustomTypeConfig
{
fn
lift
(
&
self
name
:
&
str
)
-
>
String
{
let
converter
=
if
self
.
lift
.
is_empty
(
)
{
&
self
.
into_custom
}
else
{
&
self
.
lift
}
;
converter
.
replace
(
"
{
}
"
name
)
}
fn
lower
(
&
self
name
:
&
str
)
-
>
String
{
let
converter
=
if
self
.
lower
.
is_empty
(
)
{
&
self
.
from_custom
}
else
{
&
self
.
lower
}
;
converter
.
replace
(
"
{
}
"
name
)
}
}
impl
Config
{
pub
fn
module_name
(
&
self
)
-
>
String
{
self
.
module_name
.
as_ref
(
)
.
expect
(
"
module
name
should
have
been
set
in
update_component_configs
"
)
.
clone
(
)
}
pub
fn
ffi_module_name
(
&
self
)
-
>
String
{
match
self
.
ffi_module_name
.
as_ref
(
)
{
Some
(
name
)
=
>
name
.
clone
(
)
None
=
>
format
!
(
"
{
}
FFI
"
self
.
module_name
(
)
)
}
}
pub
fn
ffi_module_filename
(
&
self
)
-
>
String
{
match
self
.
ffi_module_filename
.
as_ref
(
)
{
Some
(
name
)
=
>
name
.
clone
(
)
None
=
>
self
.
ffi_module_name
(
)
}
}
pub
fn
modulemap_filename
(
&
self
)
-
>
String
{
format
!
(
"
{
}
.
modulemap
"
self
.
ffi_module_filename
(
)
)
}
pub
fn
header_filename
(
&
self
)
-
>
String
{
format
!
(
"
{
}
.
h
"
self
.
ffi_module_filename
(
)
)
}
pub
fn
generate_module_map
(
&
self
)
-
>
bool
{
self
.
generate_module_map
.
unwrap_or
(
true
)
}
pub
fn
omit_argument_labels
(
&
self
)
-
>
bool
{
self
.
omit_argument_labels
.
unwrap_or
(
false
)
}
pub
fn
generate_immutable_records
(
&
self
)
-
>
bool
{
self
.
generate_immutable_records
.
unwrap_or
(
false
)
}
pub
fn
omit_localized_error_conformance
(
&
self
)
-
>
bool
{
self
.
omit_localized_error_conformance
.
unwrap_or
(
false
)
}
pub
fn
generate_case_iterable_conformance
(
&
self
)
-
>
bool
{
self
.
generate_case_iterable_conformance
.
unwrap_or
(
false
)
}
pub
fn
generate_codable_conformance
(
&
self
)
-
>
bool
{
self
.
generate_codable_conformance
.
unwrap_or
(
false
)
}
pub
fn
link_frameworks
(
&
self
)
-
>
Vec
<
String
>
{
self
.
link_frameworks
.
clone
(
)
}
}
fn
trait_protocol_name
(
ci
:
&
ComponentInterface
name
:
&
str
)
-
>
Result
<
String
>
{
let
(
obj_name
has_callback_interface
)
=
match
ci
.
get_object_definition
(
name
)
{
Some
(
obj
)
=
>
(
obj
.
name
(
)
obj
.
has_callback_interface
(
)
)
None
=
>
(
ci
.
get_callback_interface_definition
(
name
)
.
ok_or_else
(
|
|
anyhow
:
:
anyhow
!
(
"
no
interface
{
}
"
name
)
)
?
.
name
(
)
true
)
}
;
let
class_name
=
SwiftCodeOracle
.
class_name
(
obj_name
)
;
if
has_callback_interface
{
Ok
(
class_name
)
}
else
{
Ok
(
format
!
(
"
{
class_name
}
Protocol
"
)
)
}
}
pub
fn
generate_bindings
(
config
:
&
Config
ci
:
&
ComponentInterface
)
-
>
Result
<
Bindings
>
{
let
header
=
BridgingHeader
:
:
new
(
config
ci
)
.
render
(
)
.
context
(
"
failed
to
render
Swift
bridging
header
"
)
?
;
let
library
=
SwiftWrapper
:
:
new
(
config
.
clone
(
)
ci
)
.
render
(
)
.
context
(
"
failed
to
render
Swift
library
"
)
?
;
let
modulemap
=
if
config
.
generate_module_map
(
)
{
Some
(
ModuleMap
:
:
new_for_single_component
(
config
ci
)
.
render
(
)
.
context
(
"
failed
to
render
Swift
modulemap
"
)
?
)
}
else
{
None
}
;
Ok
(
Bindings
{
library
header
modulemap
}
)
}
pub
fn
generate_header
(
config
:
&
Config
ci
:
&
ComponentInterface
)
-
>
Result
<
String
>
{
BridgingHeader
:
:
new
(
config
ci
)
.
render
(
)
.
context
(
"
failed
to
render
Swift
bridging
header
"
)
}
pub
fn
generate_swift
(
config
:
&
Config
ci
:
&
ComponentInterface
)
-
>
Result
<
String
>
{
SwiftWrapper
:
:
new
(
config
.
clone
(
)
ci
)
.
render
(
)
.
context
(
"
failed
to
render
Swift
library
"
)
}
pub
fn
generate_modulemap
(
module_name
:
String
header_filenames
:
Vec
<
String
>
xcframework
:
bool
link_frameworks
:
Vec
<
String
>
)
-
>
Result
<
String
>
{
ModuleMap
{
module_name
header_filenames
xcframework
link_frameworks
}
.
render
(
)
.
context
(
"
failed
to
render
Swift
library
"
)
}
#
[
derive
(
Template
)
]
#
[
template
(
syntax
=
"
swift
"
escape
=
"
none
"
path
=
"
Types
.
swift
"
)
]
pub
struct
TypeRenderer
<
'
a
>
{
config
:
&
'
a
Config
ci
:
&
'
a
ComponentInterface
imports
:
RefCell
<
BTreeSet
<
String
>
>
}
impl
<
'
a
>
TypeRenderer
<
'
a
>
{
fn
new
(
config
:
&
'
a
Config
ci
:
&
'
a
ComponentInterface
)
-
>
Self
{
Self
{
config
ci
imports
:
RefCell
:
:
new
(
BTreeSet
:
:
new
(
)
)
}
}
fn
add_import
(
&
self
name
:
&
str
)
-
>
&
str
{
self
.
imports
.
borrow_mut
(
)
.
insert
(
name
.
to_owned
(
)
)
;
"
"
}
}
#
[
derive
(
Template
)
]
#
[
template
(
syntax
=
"
c
"
escape
=
"
none
"
path
=
"
BridgingHeaderTemplate
.
h
"
)
]
pub
struct
BridgingHeader
<
'
config
'
ci
>
{
_config
:
&
'
config
Config
ci
:
&
'
ci
ComponentInterface
}
impl
<
'
config
'
ci
>
BridgingHeader
<
'
config
'
ci
>
{
pub
fn
new
(
config
:
&
'
config
Config
ci
:
&
'
ci
ComponentInterface
)
-
>
Self
{
Self
{
_config
:
config
ci
}
}
}
#
[
derive
(
Template
)
]
#
[
template
(
syntax
=
"
c
"
escape
=
"
none
"
path
=
"
ModuleMapTemplate
.
modulemap
"
)
]
pub
struct
ModuleMap
{
module_name
:
String
header_filenames
:
Vec
<
String
>
xcframework
:
bool
link_frameworks
:
Vec
<
String
>
}
impl
ModuleMap
{
pub
fn
new_for_single_component
(
config
:
&
Config
_ci
:
&
ComponentInterface
)
-
>
Self
{
Self
{
module_name
:
config
.
ffi_module_name
(
)
header_filenames
:
vec
!
[
config
.
header_filename
(
)
]
xcframework
:
false
link_frameworks
:
config
.
link_frameworks
(
)
}
}
}
#
[
derive
(
Template
)
]
#
[
template
(
syntax
=
"
swift
"
escape
=
"
none
"
path
=
"
wrapper
.
swift
"
)
]
pub
struct
SwiftWrapper
<
'
a
>
{
config
:
Config
ci
:
&
'
a
ComponentInterface
type_helper_code
:
String
type_imports
:
BTreeSet
<
String
>
ensure_init_fn_name
:
String
}
impl
<
'
a
>
SwiftWrapper
<
'
a
>
{
pub
fn
new
(
config
:
Config
ci
:
&
'
a
ComponentInterface
)
-
>
Self
{
let
type_renderer
=
TypeRenderer
:
:
new
(
&
config
ci
)
;
let
type_helper_code
=
type_renderer
.
render
(
)
.
unwrap
(
)
;
let
type_imports
=
type_renderer
.
imports
.
into_inner
(
)
;
Self
{
config
ci
type_helper_code
type_imports
ensure_init_fn_name
:
format
!
(
"
uniffiEnsure
{
}
Initialized
"
ci
.
crate_name
(
)
.
to_upper_camel_case
(
)
)
}
}
pub
fn
imports
(
&
self
)
-
>
Vec
<
String
>
{
self
.
type_imports
.
iter
(
)
.
cloned
(
)
.
collect
(
)
}
pub
fn
initialization_fns
(
&
self
)
-
>
Vec
<
String
>
{
let
init_fns
=
self
.
ci
.
iter_local_types
(
)
.
map
(
|
t
|
SwiftCodeOracle
.
find
(
t
)
)
.
filter_map
(
|
ct
|
ct
.
initialization_fn
(
)
)
;
let
extern_module_init_fns
=
self
.
ci
.
iter_external_types
(
)
.
filter_map
(
|
t
|
t
.
module_path
(
)
)
.
map
(
|
module_path
|
{
format
!
(
"
uniffiEnsure
{
}
Initialized
"
module_path
.
to_upper_camel_case
(
)
)
}
)
.
collect
:
:
<
HashSet
<
_
>
>
(
)
;
init_fns
.
chain
(
extern_module_init_fns
)
.
collect
(
)
}
}
#
[
derive
(
Clone
)
]
pub
struct
SwiftCodeOracle
;
impl
SwiftCodeOracle
{
fn
create_code_type
(
&
self
type_
:
Type
)
-
>
Box
<
dyn
CodeType
>
{
match
type_
{
Type
:
:
UInt8
=
>
Box
:
:
new
(
primitives
:
:
UInt8CodeType
)
Type
:
:
Int8
=
>
Box
:
:
new
(
primitives
:
:
Int8CodeType
)
Type
:
:
UInt16
=
>
Box
:
:
new
(
primitives
:
:
UInt16CodeType
)
Type
:
:
Int16
=
>
Box
:
:
new
(
primitives
:
:
Int16CodeType
)
Type
:
:
UInt32
=
>
Box
:
:
new
(
primitives
:
:
UInt32CodeType
)
Type
:
:
Int32
=
>
Box
:
:
new
(
primitives
:
:
Int32CodeType
)
Type
:
:
UInt64
=
>
Box
:
:
new
(
primitives
:
:
UInt64CodeType
)
Type
:
:
Int64
=
>
Box
:
:
new
(
primitives
:
:
Int64CodeType
)
Type
:
:
Float32
=
>
Box
:
:
new
(
primitives
:
:
Float32CodeType
)
Type
:
:
Float64
=
>
Box
:
:
new
(
primitives
:
:
Float64CodeType
)
Type
:
:
Boolean
=
>
Box
:
:
new
(
primitives
:
:
BooleanCodeType
)
Type
:
:
String
=
>
Box
:
:
new
(
primitives
:
:
StringCodeType
)
Type
:
:
Bytes
=
>
Box
:
:
new
(
primitives
:
:
BytesCodeType
)
Type
:
:
Timestamp
=
>
Box
:
:
new
(
miscellany
:
:
TimestampCodeType
)
Type
:
:
Duration
=
>
Box
:
:
new
(
miscellany
:
:
DurationCodeType
)
Type
:
:
Enum
{
name
.
.
}
=
>
Box
:
:
new
(
enum_
:
:
EnumCodeType
:
:
new
(
name
)
)
Type
:
:
Object
{
name
imp
.
.
}
=
>
Box
:
:
new
(
object
:
:
ObjectCodeType
:
:
new
(
name
imp
)
)
Type
:
:
Record
{
name
.
.
}
=
>
Box
:
:
new
(
record
:
:
RecordCodeType
:
:
new
(
name
)
)
Type
:
:
CallbackInterface
{
name
.
.
}
=
>
{
Box
:
:
new
(
callback_interface
:
:
CallbackInterfaceCodeType
:
:
new
(
name
)
)
}
Type
:
:
Optional
{
inner_type
}
=
>
{
Box
:
:
new
(
compounds
:
:
OptionalCodeType
:
:
new
(
*
inner_type
)
)
}
Type
:
:
Sequence
{
inner_type
}
=
>
{
Box
:
:
new
(
compounds
:
:
SequenceCodeType
:
:
new
(
*
inner_type
)
)
}
Type
:
:
Map
{
key_type
value_type
}
=
>
Box
:
:
new
(
compounds
:
:
MapCodeType
:
:
new
(
*
key_type
*
value_type
)
)
Type
:
:
Custom
{
name
.
.
}
=
>
Box
:
:
new
(
custom
:
:
CustomCodeType
:
:
new
(
name
)
)
}
}
fn
find
(
&
self
type_
:
&
Type
)
-
>
Box
<
dyn
CodeType
>
{
self
.
create_code_type
(
type_
.
clone
(
)
)
}
fn
class_name
<
S
:
AsRef
<
str
>
>
(
&
self
nm
:
S
)
-
>
String
{
nm
.
as_ref
(
)
.
to_string
(
)
.
to_upper_camel_case
(
)
}
fn
fn_name
<
S
:
AsRef
<
str
>
>
(
&
self
nm
:
S
)
-
>
String
{
nm
.
as_ref
(
)
.
to_string
(
)
.
to_lower_camel_case
(
)
}
fn
var_name
<
S
:
AsRef
<
str
>
>
(
&
self
nm
:
S
)
-
>
String
{
nm
.
as_ref
(
)
.
to_string
(
)
.
to_lower_camel_case
(
)
}
fn
enum_variant_name
<
S
:
AsRef
<
str
>
>
(
&
self
nm
:
S
)
-
>
String
{
nm
.
as_ref
(
)
.
to_string
(
)
.
to_lower_camel_case
(
)
}
fn
ffi_callback_name
<
S
:
AsRef
<
str
>
>
(
&
self
nm
:
S
)
-
>
String
{
format
!
(
"
Uniffi
{
}
"
nm
.
as_ref
(
)
.
to_upper_camel_case
(
)
)
}
fn
ffi_struct_name
<
S
:
AsRef
<
str
>
>
(
&
self
nm
:
S
)
-
>
String
{
format
!
(
"
Uniffi
{
}
"
nm
.
as_ref
(
)
.
to_upper_camel_case
(
)
)
}
fn
if_guard_name
<
S
:
AsRef
<
str
>
>
(
&
self
nm
:
S
)
-
>
String
{
format
!
(
"
UNIFFI_FFIDEF_
{
}
"
nm
.
as_ref
(
)
.
to_shouty_snake_case
(
)
)
}
fn
ffi_type_label
(
&
self
ffi_type
:
&
FfiType
)
-
>
String
{
match
ffi_type
{
FfiType
:
:
Int8
=
>
"
Int8
"
.
into
(
)
FfiType
:
:
UInt8
=
>
"
UInt8
"
.
into
(
)
FfiType
:
:
Int16
=
>
"
Int16
"
.
into
(
)
FfiType
:
:
UInt16
=
>
"
UInt16
"
.
into
(
)
FfiType
:
:
Int32
=
>
"
Int32
"
.
into
(
)
FfiType
:
:
UInt32
=
>
"
UInt32
"
.
into
(
)
FfiType
:
:
Int64
=
>
"
Int64
"
.
into
(
)
FfiType
:
:
UInt64
=
>
"
UInt64
"
.
into
(
)
FfiType
:
:
Float32
=
>
"
Float
"
.
into
(
)
FfiType
:
:
Float64
=
>
"
Double
"
.
into
(
)
FfiType
:
:
Handle
=
>
"
UInt64
"
.
into
(
)
FfiType
:
:
RustArcPtr
(
_
)
=
>
"
UnsafeMutableRawPointer
"
.
into
(
)
FfiType
:
:
RustBuffer
(
_
)
=
>
"
RustBuffer
"
.
into
(
)
FfiType
:
:
RustCallStatus
=
>
"
RustCallStatus
"
.
into
(
)
FfiType
:
:
ForeignBytes
=
>
"
ForeignBytes
"
.
into
(
)
FfiType
:
:
Callback
(
name
)
=
>
format
!
(
"
escaping
{
}
"
self
.
ffi_callback_name
(
name
)
)
FfiType
:
:
Struct
(
name
)
=
>
self
.
ffi_struct_name
(
name
)
FfiType
:
:
Reference
(
inner
)
=
>
{
format
!
(
"
UnsafePointer
<
{
}
>
"
self
.
ffi_type_label
(
inner
)
)
}
FfiType
:
:
MutReference
(
inner
)
=
>
{
format
!
(
"
UnsafeMutablePointer
<
{
}
>
"
self
.
ffi_type_label
(
inner
)
)
}
FfiType
:
:
VoidPointer
=
>
"
UnsafeMutableRawPointer
"
.
into
(
)
}
}
fn
ffi_default_value
(
&
self
return_type
:
Option
<
&
FfiType
>
)
-
>
String
{
match
return_type
{
Some
(
t
)
=
>
match
t
{
FfiType
:
:
UInt8
|
FfiType
:
:
Int8
|
FfiType
:
:
UInt16
|
FfiType
:
:
Int16
|
FfiType
:
:
UInt32
|
FfiType
:
:
Int32
|
FfiType
:
:
UInt64
|
FfiType
:
:
Int64
=
>
"
0
"
.
to_owned
(
)
FfiType
:
:
Float32
|
FfiType
:
:
Float64
=
>
"
0
.
0
"
.
to_owned
(
)
FfiType
:
:
RustArcPtr
(
_
)
=
>
"
nil
"
.
to_owned
(
)
FfiType
:
:
RustBuffer
(
_
)
=
>
"
RustBuffer
.
empty
(
)
"
.
to_owned
(
)
_
=
>
unimplemented
!
(
"
FFI
return
type
:
{
t
:
?
}
"
)
}
None
=
>
"
0
"
.
to_owned
(
)
}
}
fn
object_names
(
&
self
obj
:
&
Object
)
-
>
(
String
String
)
{
let
class_name
=
self
.
class_name
(
obj
.
name
(
)
)
;
if
obj
.
has_callback_interface
(
)
{
let
impl_name
=
format
!
(
"
{
class_name
}
Impl
"
)
;
(
class_name
impl_name
)
}
else
{
(
format
!
(
"
{
class_name
}
Protocol
"
)
class_name
)
}
}
}
pub
mod
filters
{
use
super
:
:
*
;
pub
use
crate
:
:
backend
:
:
filters
:
:
*
;
use
uniffi_meta
:
:
LiteralMetadata
;
fn
oracle
(
)
-
>
&
'
static
SwiftCodeOracle
{
&
SwiftCodeOracle
}
pub
fn
type_name
(
as_type
:
&
impl
AsType
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
oracle
(
)
.
find
(
&
as_type
.
as_type
(
)
)
.
type_label
(
)
)
}
pub
fn
return_type_name
(
as_type
:
Option
<
&
impl
AsType
>
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
match
as_type
{
Some
(
as_type
)
=
>
oracle
(
)
.
find
(
&
as_type
.
as_type
(
)
)
.
type_label
(
)
None
=
>
"
(
)
"
.
to_owned
(
)
}
)
}
pub
fn
canonical_name
(
as_type
:
&
impl
AsType
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
oracle
(
)
.
find
(
&
as_type
.
as_type
(
)
)
.
canonical_name
(
)
)
}
pub
fn
ffi_converter_name
(
as_type
:
&
impl
AsType
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
oracle
(
)
.
find
(
&
as_type
.
as_type
(
)
)
.
ffi_converter_name
(
)
)
}
pub
fn
ffi_error_converter_name
(
as_type
:
&
impl
AsType
)
-
>
Result
<
String
askama
:
:
Error
>
{
let
mut
name
=
oracle
(
)
.
find
(
&
as_type
.
as_type
(
)
)
.
ffi_converter_name
(
)
;
if
matches
!
(
&
as_type
.
as_type
(
)
Type
:
:
Object
{
.
.
}
)
{
name
.
push_str
(
"
__as_error
"
)
}
Ok
(
name
)
}
pub
fn
lower_fn
(
as_type
:
&
impl
AsType
)
-
>
Result
<
String
askama
:
:
Error
>
{
let
ty
=
&
as_type
.
as_type
(
)
;
let
ffi_converter_name
=
oracle
(
)
.
find
(
ty
)
.
ffi_converter_name
(
)
;
Ok
(
match
ty
.
name
(
)
{
Some
(
_
)
=
>
format
!
(
"
{
}
_lower
"
ffi_converter_name
)
None
=
>
format
!
(
"
{
}
.
lower
"
ffi_converter_name
)
}
)
}
pub
fn
write_fn
(
as_type
:
&
impl
AsType
)
-
>
Result
<
String
askama
:
:
Error
>
{
let
ty
=
&
as_type
.
as_type
(
)
;
let
ffi_converter_name
=
oracle
(
)
.
find
(
ty
)
.
ffi_converter_name
(
)
;
Ok
(
format
!
(
"
{
}
.
write
"
ffi_converter_name
)
)
}
pub
fn
lift_fn
(
as_type
:
&
impl
AsType
)
-
>
Result
<
String
askama
:
:
Error
>
{
let
ty
=
&
as_type
.
as_type
(
)
;
let
ffi_converter_name
=
oracle
(
)
.
find
(
ty
)
.
ffi_converter_name
(
)
;
Ok
(
match
ty
.
name
(
)
{
Some
(
_
)
=
>
format
!
(
"
{
}
_lift
"
ffi_converter_name
)
None
=
>
format
!
(
"
{
}
.
lift
"
ffi_converter_name
)
}
)
}
pub
fn
read_fn
(
as_type
:
&
impl
AsType
)
-
>
Result
<
String
askama
:
:
Error
>
{
let
ty
=
&
as_type
.
as_type
(
)
;
let
ffi_converter_name
=
oracle
(
)
.
find
(
ty
)
.
ffi_converter_name
(
)
;
Ok
(
format
!
(
"
{
}
.
read
"
ffi_converter_name
)
)
}
pub
fn
literal_swift
(
literal
:
&
Literal
as_type
:
&
impl
AsType
)
-
>
Result
<
String
askama
:
:
Error
>
{
oracle
(
)
.
find
(
&
as_type
.
as_type
(
)
)
.
literal
(
literal
)
.
map_err
(
|
e
|
to_askama_error
(
&
e
)
)
}
pub
fn
variant_discr_literal
(
e
:
&
Enum
index
:
&
usize
)
-
>
Result
<
String
askama
:
:
Error
>
{
let
literal
=
e
.
variant_discr
(
*
index
)
.
expect
(
"
invalid
index
"
)
;
match
literal
{
LiteralMetadata
:
:
UInt
(
v
_
_
)
=
>
Ok
(
v
.
to_string
(
)
)
LiteralMetadata
:
:
Int
(
v
_
_
)
=
>
Ok
(
v
.
to_string
(
)
)
_
=
>
unreachable
!
(
"
expected
an
UInt
!
"
)
}
}
pub
fn
ffi_type_name
(
ffi_type
:
&
FfiType
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
oracle
(
)
.
ffi_type_label
(
ffi_type
)
)
}
pub
fn
ffi_default_value
(
return_type
:
Option
<
FfiType
>
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
oracle
(
)
.
ffi_default_value
(
return_type
.
as_ref
(
)
)
)
}
pub
fn
header_ffi_type_name
(
ffi_type
:
&
FfiType
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
match
ffi_type
{
FfiType
:
:
Int8
=
>
"
int8_t
"
.
into
(
)
FfiType
:
:
UInt8
=
>
"
uint8_t
"
.
into
(
)
FfiType
:
:
Int16
=
>
"
int16_t
"
.
into
(
)
FfiType
:
:
UInt16
=
>
"
uint16_t
"
.
into
(
)
FfiType
:
:
Int32
=
>
"
int32_t
"
.
into
(
)
FfiType
:
:
UInt32
=
>
"
uint32_t
"
.
into
(
)
FfiType
:
:
Int64
=
>
"
int64_t
"
.
into
(
)
FfiType
:
:
UInt64
=
>
"
uint64_t
"
.
into
(
)
FfiType
:
:
Float32
=
>
"
float
"
.
into
(
)
FfiType
:
:
Float64
=
>
"
double
"
.
into
(
)
FfiType
:
:
Handle
=
>
"
uint64_t
"
.
into
(
)
FfiType
:
:
RustArcPtr
(
_
)
=
>
"
void
*
_Nonnull
"
.
into
(
)
FfiType
:
:
RustBuffer
(
_
)
=
>
"
RustBuffer
"
.
into
(
)
FfiType
:
:
RustCallStatus
=
>
"
RustCallStatus
"
.
into
(
)
FfiType
:
:
ForeignBytes
=
>
"
ForeignBytes
"
.
into
(
)
FfiType
:
:
Callback
(
name
)
=
>
{
format
!
(
"
{
}
_Nonnull
"
SwiftCodeOracle
.
ffi_callback_name
(
name
)
)
}
FfiType
:
:
Struct
(
name
)
=
>
SwiftCodeOracle
.
ffi_struct_name
(
name
)
FfiType
:
:
Reference
(
inner
)
=
>
{
format
!
(
"
const
{
}
*
_Nonnull
"
header_ffi_type_name
(
inner
)
?
)
}
FfiType
:
:
MutReference
(
inner
)
=
>
format
!
(
"
{
}
*
_Nonnull
"
header_ffi_type_name
(
inner
)
?
)
FfiType
:
:
VoidPointer
=
>
"
void
*
_Nonnull
"
.
into
(
)
}
)
}
pub
fn
class_name
(
nm
:
&
str
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
oracle
(
)
.
class_name
(
nm
)
)
}
pub
fn
fn_name
(
nm
:
&
str
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
quote_general_keyword
(
oracle
(
)
.
fn_name
(
nm
)
)
)
}
pub
fn
var_name
(
nm
:
&
str
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
quote_general_keyword
(
oracle
(
)
.
var_name
(
nm
)
)
)
}
pub
fn
arg_name
(
nm
:
&
str
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
quote_arg_keyword
(
oracle
(
)
.
var_name
(
nm
)
)
)
}
pub
fn
enum_variant_swift_quoted
(
nm
:
&
str
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
quote_general_keyword
(
oracle
(
)
.
enum_variant_name
(
nm
)
)
)
}
pub
fn
error_variant_swift_quoted
(
nm
:
&
str
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
quote_general_keyword
(
oracle
(
)
.
class_name
(
nm
)
)
)
}
pub
fn
ffi_callback_name
(
nm
:
&
str
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
oracle
(
)
.
ffi_callback_name
(
nm
)
)
}
pub
fn
ffi_struct_name
(
nm
:
&
str
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
oracle
(
)
.
ffi_struct_name
(
nm
)
)
}
pub
fn
if_guard_name
(
nm
:
&
str
)
-
>
Result
<
String
askama
:
:
Error
>
{
Ok
(
oracle
(
)
.
if_guard_name
(
nm
)
)
}
pub
fn
docstring
(
docstring
:
&
str
spaces
:
&
i32
)
-
>
Result
<
String
askama
:
:
Error
>
{
let
middle
=
textwrap
:
:
indent
(
&
textwrap
:
:
dedent
(
docstring
)
"
*
"
)
;
let
wrapped
=
format
!
(
"
/
*
*
\
n
{
middle
}
\
n
*
/
"
)
;
let
spaces
=
usize
:
:
try_from
(
*
spaces
)
.
unwrap_or_default
(
)
;
Ok
(
textwrap
:
:
indent
(
&
wrapped
&
"
"
.
repeat
(
spaces
)
)
)
}
pub
fn
object_names
(
obj
:
&
Object
)
-
>
Result
<
(
String
String
)
askama
:
:
Error
>
{
Ok
(
SwiftCodeOracle
.
object_names
(
obj
)
)
}
}
