use
anyhow
:
:
{
bail
Result
}
;
use
camino
:
:
Utf8Path
;
use
serde
:
:
{
Deserialize
Serialize
}
;
use
std
:
:
fmt
;
use
crate
:
:
interface
:
:
ComponentInterface
;
pub
mod
kotlin
;
pub
mod
python
;
pub
mod
ruby
;
pub
mod
swift
;
#
[
derive
(
Copy
Clone
Eq
PartialEq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
clap
"
derive
(
clap
:
:
ValueEnum
)
)
]
pub
enum
TargetLanguage
{
Kotlin
Swift
Python
Ruby
}
impl
fmt
:
:
Display
for
TargetLanguage
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
self
{
Self
:
:
Kotlin
=
>
write
!
(
f
"
kotlin
"
)
Self
:
:
Swift
=
>
write
!
(
f
"
swift
"
)
Self
:
:
Python
=
>
write
!
(
f
"
python
"
)
Self
:
:
Ruby
=
>
write
!
(
f
"
ruby
"
)
}
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
RunScriptOptions
{
pub
show_compiler_messages
:
bool
}
impl
Default
for
RunScriptOptions
{
fn
default
(
)
-
>
Self
{
Self
{
show_compiler_messages
:
true
}
}
}
impl
TryFrom
<
&
str
>
for
TargetLanguage
{
type
Error
=
anyhow
:
:
Error
;
fn
try_from
(
value
:
&
str
)
-
>
Result
<
Self
>
{
Ok
(
match
value
.
to_ascii_lowercase
(
)
.
as_str
(
)
{
"
kotlin
"
|
"
kt
"
|
"
kts
"
=
>
TargetLanguage
:
:
Kotlin
"
swift
"
=
>
TargetLanguage
:
:
Swift
"
python
"
|
"
py
"
=
>
TargetLanguage
:
:
Python
"
ruby
"
|
"
rb
"
=
>
TargetLanguage
:
:
Ruby
_
=
>
bail
!
(
"
Unknown
or
unsupported
target
language
:
\
"
{
value
}
\
"
"
)
}
)
}
}
impl
TryFrom
<
&
std
:
:
ffi
:
:
OsStr
>
for
TargetLanguage
{
type
Error
=
anyhow
:
:
Error
;
fn
try_from
(
value
:
&
std
:
:
ffi
:
:
OsStr
)
-
>
Result
<
Self
>
{
match
value
.
to_str
(
)
{
None
=
>
bail
!
(
"
Unreadable
target
language
"
)
Some
(
s
)
=
>
s
.
try_into
(
)
}
}
}
impl
TryFrom
<
String
>
for
TargetLanguage
{
type
Error
=
anyhow
:
:
Error
;
fn
try_from
(
value
:
String
)
-
>
Result
<
Self
>
{
TryFrom
:
:
try_from
(
value
.
as_str
(
)
)
}
}
#
[
derive
(
Debug
Clone
Default
Serialize
Deserialize
)
]
pub
struct
Config
{
#
[
serde
(
default
)
]
pub
(
crate
)
kotlin
:
kotlin
:
:
Config
#
[
serde
(
default
)
]
pub
(
crate
)
swift
:
swift
:
:
Config
#
[
serde
(
default
)
]
pub
(
crate
)
python
:
python
:
:
Config
#
[
serde
(
default
)
]
pub
(
crate
)
ruby
:
ruby
:
:
Config
}
pub
fn
write_bindings
(
config
:
&
Config
ci
:
&
ComponentInterface
out_dir
:
&
Utf8Path
language
:
TargetLanguage
try_format_code
:
bool
)
-
>
Result
<
(
)
>
{
match
language
{
TargetLanguage
:
:
Kotlin
=
>
{
kotlin
:
:
write_bindings
(
&
config
.
kotlin
ci
out_dir
try_format_code
)
?
}
TargetLanguage
:
:
Swift
=
>
{
swift
:
:
write_bindings
(
&
config
.
swift
ci
out_dir
try_format_code
)
?
}
TargetLanguage
:
:
Python
=
>
{
python
:
:
write_bindings
(
&
config
.
python
ci
out_dir
try_format_code
)
?
}
TargetLanguage
:
:
Ruby
=
>
ruby
:
:
write_bindings
(
&
config
.
ruby
ci
out_dir
try_format_code
)
?
}
Ok
(
(
)
)
}
