use
std
:
:
convert
:
:
TryFrom
;
use
anyhow
:
:
{
bail
Result
}
;
use
super
:
:
super
:
:
attributes
:
:
{
InterfaceAttributes
TypedefAttributes
}
;
use
super
:
:
{
AsType
Type
TypeUniverse
}
;
pub
(
in
super
:
:
super
)
trait
TypeFinder
{
fn
add_type_definitions_to
(
&
self
types
:
&
mut
TypeUniverse
)
-
>
Result
<
(
)
>
;
}
impl
<
T
:
TypeFinder
>
TypeFinder
for
&
[
T
]
{
fn
add_type_definitions_to
(
&
self
types
:
&
mut
TypeUniverse
)
-
>
Result
<
(
)
>
{
for
item
in
*
self
{
item
.
add_type_definitions_to
(
types
)
?
;
}
Ok
(
(
)
)
}
}
impl
TypeFinder
for
weedle
:
:
Definition
<
'
_
>
{
fn
add_type_definitions_to
(
&
self
types
:
&
mut
TypeUniverse
)
-
>
Result
<
(
)
>
{
match
self
{
weedle
:
:
Definition
:
:
Interface
(
d
)
=
>
d
.
add_type_definitions_to
(
types
)
weedle
:
:
Definition
:
:
Dictionary
(
d
)
=
>
d
.
add_type_definitions_to
(
types
)
weedle
:
:
Definition
:
:
Enum
(
d
)
=
>
d
.
add_type_definitions_to
(
types
)
weedle
:
:
Definition
:
:
Typedef
(
d
)
=
>
d
.
add_type_definitions_to
(
types
)
weedle
:
:
Definition
:
:
CallbackInterface
(
d
)
=
>
d
.
add_type_definitions_to
(
types
)
_
=
>
Ok
(
(
)
)
}
}
}
impl
TypeFinder
for
weedle
:
:
InterfaceDefinition
<
'
_
>
{
fn
add_type_definitions_to
(
&
self
types
:
&
mut
TypeUniverse
)
-
>
Result
<
(
)
>
{
let
name
=
self
.
identifier
.
0
.
to_string
(
)
;
let
attrs
=
InterfaceAttributes
:
:
try_from
(
self
.
attributes
.
as_ref
(
)
)
?
;
if
attrs
.
contains_enum_attr
(
)
|
|
attrs
.
contains_error_attr
(
)
{
types
.
add_type_definition
(
self
.
identifier
.
0
Type
:
:
Enum
(
name
)
)
}
else
{
let
obj
=
crate
:
:
interface
:
:
Object
:
:
new
(
name
attrs
.
object_impl
(
)
)
;
types
.
add_type_definition
(
self
.
identifier
.
0
obj
.
as_type
(
)
)
}
}
}
impl
TypeFinder
for
weedle
:
:
DictionaryDefinition
<
'
_
>
{
fn
add_type_definitions_to
(
&
self
types
:
&
mut
TypeUniverse
)
-
>
Result
<
(
)
>
{
let
name
=
self
.
identifier
.
0
.
to_string
(
)
;
types
.
add_type_definition
(
self
.
identifier
.
0
Type
:
:
Record
(
name
)
)
}
}
impl
TypeFinder
for
weedle
:
:
EnumDefinition
<
'
_
>
{
fn
add_type_definitions_to
(
&
self
types
:
&
mut
TypeUniverse
)
-
>
Result
<
(
)
>
{
let
name
=
self
.
identifier
.
0
.
to_string
(
)
;
types
.
add_type_definition
(
self
.
identifier
.
0
Type
:
:
Enum
(
name
)
)
}
}
impl
TypeFinder
for
weedle
:
:
TypedefDefinition
<
'
_
>
{
fn
add_type_definitions_to
(
&
self
types
:
&
mut
TypeUniverse
)
-
>
Result
<
(
)
>
{
let
name
=
self
.
identifier
.
0
;
let
attrs
=
TypedefAttributes
:
:
try_from
(
self
.
attributes
.
as_ref
(
)
)
?
;
if
attrs
.
is_custom
(
)
{
let
builtin
=
types
.
resolve_type_expression
(
&
self
.
type_
)
?
;
types
.
add_type_definition
(
name
Type
:
:
Custom
{
name
:
name
.
to_string
(
)
builtin
:
builtin
.
into
(
)
}
)
}
else
{
let
kind
=
attrs
.
external_kind
(
)
.
expect
(
"
ExternalKind
missing
"
)
;
types
.
add_type_definition
(
name
Type
:
:
External
{
name
:
name
.
to_string
(
)
crate_name
:
attrs
.
get_crate_name
(
)
kind
}
)
}
}
}
impl
TypeFinder
for
weedle
:
:
CallbackInterfaceDefinition
<
'
_
>
{
fn
add_type_definitions_to
(
&
self
types
:
&
mut
TypeUniverse
)
-
>
Result
<
(
)
>
{
if
self
.
attributes
.
is_some
(
)
{
bail
!
(
"
no
typedef
attributes
are
currently
supported
"
)
;
}
let
name
=
self
.
identifier
.
0
.
to_string
(
)
;
types
.
add_type_definition
(
self
.
identifier
.
0
Type
:
:
CallbackInterface
(
name
)
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
crate
:
:
interface
:
:
ExternalKind
;
fn
test_a_finding
<
F
>
(
udl
:
&
str
tester
:
F
)
where
F
:
FnOnce
(
TypeUniverse
)
{
let
idl
=
weedle
:
:
parse
(
udl
)
.
unwrap
(
)
;
let
mut
types
=
TypeUniverse
:
:
default
(
)
;
types
.
add_type_definitions_from
(
idl
.
as_ref
(
)
)
.
unwrap
(
)
;
tester
(
types
)
;
}
#
[
test
]
fn
test_type_finding
(
)
{
test_a_finding
(
r
#
"
callback
interface
TestCallbacks
{
string
hello
(
u32
count
)
;
}
;
"
#
|
types
|
{
assert
!
(
matches
!
(
types
.
get_type_definition
(
"
TestCallbacks
"
)
.
unwrap
(
)
Type
:
:
CallbackInterface
(
nm
)
if
nm
=
=
"
TestCallbacks
"
)
)
;
}
)
;
test_a_finding
(
r
#
"
dictionary
TestRecord
{
u32
field
;
}
;
"
#
|
types
|
{
assert
!
(
matches
!
(
types
.
get_type_definition
(
"
TestRecord
"
)
.
unwrap
(
)
Type
:
:
Record
(
nm
)
if
nm
=
=
"
TestRecord
"
)
)
;
}
)
;
test_a_finding
(
r
#
"
enum
TestItems
{
"
one
"
"
two
"
}
;
[
Error
]
enum
TestError
{
"
ErrorOne
"
"
ErrorTwo
"
}
;
"
#
|
types
|
{
assert
!
(
matches
!
(
types
.
get_type_definition
(
"
TestItems
"
)
.
unwrap
(
)
Type
:
:
Enum
(
nm
)
if
nm
=
=
"
TestItems
"
)
)
;
assert
!
(
matches
!
(
types
.
get_type_definition
(
"
TestError
"
)
.
unwrap
(
)
Type
:
:
Enum
(
nm
)
if
nm
=
=
"
TestError
"
)
)
;
}
)
;
test_a_finding
(
r
#
"
interface
TestObject
{
constructor
(
)
;
}
;
"
#
|
types
|
{
assert
!
(
matches
!
(
types
.
get_type_definition
(
"
TestObject
"
)
.
unwrap
(
)
Type
:
:
Object
{
name
.
.
}
if
name
=
=
"
TestObject
"
)
)
;
}
)
;
test_a_finding
(
r
#
"
[
External
=
"
crate
-
name
"
]
typedef
extern
ExternalType
;
[
ExternalInterface
=
"
crate
-
name
"
]
typedef
extern
ExternalInterfaceType
;
[
Custom
]
typedef
string
CustomType
;
"
#
|
types
|
{
assert
!
(
matches
!
(
types
.
get_type_definition
(
"
ExternalType
"
)
.
unwrap
(
)
Type
:
:
External
{
name
crate_name
kind
:
ExternalKind
:
:
DataClass
}
if
name
=
=
"
ExternalType
"
&
&
crate_name
=
=
"
crate
-
name
"
)
)
;
assert
!
(
matches
!
(
types
.
get_type_definition
(
"
ExternalInterfaceType
"
)
.
unwrap
(
)
Type
:
:
External
{
name
crate_name
kind
:
ExternalKind
:
:
Interface
}
if
name
=
=
"
ExternalInterfaceType
"
&
&
crate_name
=
=
"
crate
-
name
"
)
)
;
assert
!
(
matches
!
(
types
.
get_type_definition
(
"
CustomType
"
)
.
unwrap
(
)
Type
:
:
Custom
{
name
builtin
}
if
name
=
=
"
CustomType
"
&
&
builtin
=
=
Box
:
:
new
(
Type
:
:
String
)
)
)
;
}
)
;
}
fn
get_err
(
udl
:
&
str
)
-
>
String
{
let
parsed
=
weedle
:
:
parse
(
udl
)
.
unwrap
(
)
;
let
mut
types
=
TypeUniverse
:
:
default
(
)
;
let
err
=
types
.
add_type_definitions_from
(
parsed
.
as_ref
(
)
)
.
unwrap_err
(
)
;
err
.
to_string
(
)
}
#
[
test
]
#
[
should_panic
]
fn
test_typedef_error_on_no_attr
(
)
{
get_err
(
"
typedef
string
Custom
;
"
)
;
}
}
