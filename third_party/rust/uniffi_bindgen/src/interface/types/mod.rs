use
std
:
:
{
collections
:
:
hash_map
:
:
Entry
collections
:
:
BTreeSet
collections
:
:
HashMap
iter
}
;
use
anyhow
:
:
{
bail
Result
}
;
use
heck
:
:
ToUpperCamelCase
;
use
uniffi_meta
:
:
Checksum
;
use
super
:
:
ffi
:
:
FfiType
;
mod
finder
;
pub
(
super
)
use
finder
:
:
TypeFinder
;
mod
resolver
;
pub
(
super
)
use
resolver
:
:
{
resolve_builtin_type
TypeResolver
}
;
#
[
derive
(
Debug
Clone
Eq
PartialEq
Checksum
Ord
PartialOrd
)
]
pub
enum
Type
{
UInt8
Int8
UInt16
Int16
UInt32
Int32
UInt64
Int64
Float32
Float64
Boolean
String
Timestamp
Duration
Object
(
String
)
Record
(
String
)
Enum
(
String
)
Error
(
String
)
CallbackInterface
(
String
)
Optional
(
Box
<
Type
>
)
Sequence
(
Box
<
Type
>
)
Map
(
Box
<
Type
>
Box
<
Type
>
)
External
{
name
:
String
crate_name
:
String
}
Custom
{
name
:
String
builtin
:
Box
<
Type
>
}
Unresolved
{
name
:
String
}
}
impl
Type
{
pub
fn
canonical_name
(
&
self
)
-
>
String
{
match
self
{
Type
:
:
Int8
=
>
"
i8
"
.
into
(
)
Type
:
:
UInt8
=
>
"
u8
"
.
into
(
)
Type
:
:
Int16
=
>
"
i16
"
.
into
(
)
Type
:
:
UInt16
=
>
"
u16
"
.
into
(
)
Type
:
:
Int32
=
>
"
i32
"
.
into
(
)
Type
:
:
UInt32
=
>
"
u32
"
.
into
(
)
Type
:
:
Int64
=
>
"
i64
"
.
into
(
)
Type
:
:
UInt64
=
>
"
u64
"
.
into
(
)
Type
:
:
Float32
=
>
"
f32
"
.
into
(
)
Type
:
:
Float64
=
>
"
f64
"
.
into
(
)
Type
:
:
String
=
>
"
string
"
.
into
(
)
Type
:
:
Boolean
=
>
"
bool
"
.
into
(
)
Type
:
:
Object
(
nm
)
=
>
format
!
(
"
Type
{
nm
}
"
)
Type
:
:
Error
(
nm
)
=
>
format
!
(
"
Type
{
nm
}
"
)
Type
:
:
Enum
(
nm
)
=
>
format
!
(
"
Type
{
nm
}
"
)
Type
:
:
Record
(
nm
)
=
>
format
!
(
"
Type
{
nm
}
"
)
Type
:
:
CallbackInterface
(
nm
)
=
>
format
!
(
"
CallbackInterface
{
nm
}
"
)
Type
:
:
Timestamp
=
>
"
Timestamp
"
.
into
(
)
Type
:
:
Duration
=
>
"
Duration
"
.
into
(
)
Type
:
:
Optional
(
t
)
=
>
format
!
(
"
Optional
{
}
"
t
.
canonical_name
(
)
)
Type
:
:
Sequence
(
t
)
=
>
format
!
(
"
Sequence
{
}
"
t
.
canonical_name
(
)
)
Type
:
:
Map
(
k
v
)
=
>
format
!
(
"
Map
{
}
{
}
"
k
.
canonical_name
(
)
.
to_upper_camel_case
(
)
v
.
canonical_name
(
)
.
to_upper_camel_case
(
)
)
Type
:
:
External
{
name
.
.
}
|
Type
:
:
Custom
{
name
.
.
}
=
>
format
!
(
"
Type
{
name
}
"
)
Type
:
:
Unresolved
{
name
}
=
>
{
unreachable
!
(
"
Type
{
name
}
must
be
resolved
before
calling
canonical_name
"
)
}
}
}
pub
fn
ffi_type
(
&
self
)
-
>
FfiType
{
self
.
into
(
)
}
pub
fn
iter_types
(
&
self
)
-
>
TypeIterator
<
'
_
>
{
let
nested_types
=
match
self
{
Type
:
:
Optional
(
t
)
|
Type
:
:
Sequence
(
t
)
=
>
t
.
iter_types
(
)
Type
:
:
Map
(
k
v
)
=
>
Box
:
:
new
(
k
.
iter_types
(
)
.
chain
(
v
.
iter_types
(
)
)
)
_
=
>
Box
:
:
new
(
iter
:
:
empty
(
)
)
}
;
Box
:
:
new
(
std
:
:
iter
:
:
once
(
self
)
.
chain
(
nested_types
)
)
}
}
impl
From
<
&
Type
>
for
FfiType
{
fn
from
(
t
:
&
Type
)
-
>
FfiType
{
match
t
{
Type
:
:
UInt8
=
>
FfiType
:
:
UInt8
Type
:
:
Int8
=
>
FfiType
:
:
Int8
Type
:
:
UInt16
=
>
FfiType
:
:
UInt16
Type
:
:
Int16
=
>
FfiType
:
:
Int16
Type
:
:
UInt32
=
>
FfiType
:
:
UInt32
Type
:
:
Int32
=
>
FfiType
:
:
Int32
Type
:
:
UInt64
=
>
FfiType
:
:
UInt64
Type
:
:
Int64
=
>
FfiType
:
:
Int64
Type
:
:
Float32
=
>
FfiType
:
:
Float32
Type
:
:
Float64
=
>
FfiType
:
:
Float64
Type
:
:
Boolean
=
>
FfiType
:
:
Int8
Type
:
:
String
=
>
FfiType
:
:
RustBuffer
(
None
)
Type
:
:
Object
(
name
)
=
>
FfiType
:
:
RustArcPtr
(
name
.
to_owned
(
)
)
Type
:
:
CallbackInterface
(
_
)
=
>
FfiType
:
:
UInt64
Type
:
:
Enum
(
_
)
|
Type
:
:
Error
(
_
)
|
Type
:
:
Record
(
_
)
|
Type
:
:
Optional
(
_
)
|
Type
:
:
Sequence
(
_
)
|
Type
:
:
Map
(
_
_
)
|
Type
:
:
Timestamp
|
Type
:
:
Duration
=
>
FfiType
:
:
RustBuffer
(
None
)
Type
:
:
External
{
name
.
.
}
=
>
FfiType
:
:
RustBuffer
(
Some
(
name
.
clone
(
)
)
)
Type
:
:
Custom
{
builtin
.
.
}
=
>
FfiType
:
:
from
(
builtin
.
as_ref
(
)
)
Type
:
:
Unresolved
{
name
}
=
>
{
unreachable
!
(
"
Type
{
name
}
must
be
resolved
before
lowering
to
FfiType
"
)
}
}
}
}
impl
From
<
&
&
Type
>
for
FfiType
{
fn
from
(
ty
:
&
&
Type
)
-
>
Self
{
(
*
ty
)
.
into
(
)
}
}
#
[
derive
(
Debug
Default
)
]
pub
(
crate
)
struct
TypeUniverse
{
type_definitions
:
HashMap
<
String
Type
>
all_known_types
:
BTreeSet
<
Type
>
}
impl
TypeUniverse
{
pub
(
super
)
fn
add_type_definitions_from
<
T
:
TypeFinder
>
(
&
mut
self
defn
:
T
)
-
>
Result
<
(
)
>
{
defn
.
add_type_definitions_to
(
self
)
}
pub
fn
add_type_definition
(
&
mut
self
name
:
&
str
type_
:
Type
)
-
>
Result
<
(
)
>
{
if
let
Type
:
:
Unresolved
{
name
:
name_
}
=
&
type_
{
assert_eq
!
(
name
name_
)
;
bail
!
(
"
attempted
to
add
type
definition
of
Unresolved
for
{
name
}
"
)
;
}
if
resolve_builtin_type
(
name
)
.
is_some
(
)
{
bail
!
(
"
please
don
'
t
shadow
builtin
types
(
{
name
}
{
}
)
"
type_
.
canonical_name
(
)
)
;
}
self
.
add_known_type
(
&
type_
)
?
;
match
self
.
type_definitions
.
entry
(
name
.
to_string
(
)
)
{
Entry
:
:
Occupied
(
o
)
=
>
{
let
existing_def
=
o
.
get
(
)
;
if
type_
=
=
*
existing_def
&
&
matches
!
(
type_
Type
:
:
Record
(
_
)
|
Type
:
:
Enum
(
_
)
|
Type
:
:
Error
(
_
)
)
{
Ok
(
(
)
)
}
else
{
bail
!
(
"
Conflicting
type
definition
for
{
name
}
!
\
existing
definition
:
{
existing_def
:
?
}
\
new
definition
:
{
type_
:
?
}
"
)
;
}
}
Entry
:
:
Vacant
(
e
)
=
>
{
e
.
insert
(
type_
)
;
Ok
(
(
)
)
}
}
}
pub
(
super
)
fn
get_type_definition
(
&
self
name
:
&
str
)
-
>
Option
<
Type
>
{
self
.
type_definitions
.
get
(
name
)
.
cloned
(
)
}
pub
(
crate
)
fn
resolve_type_expression
<
T
:
TypeResolver
>
(
&
mut
self
expr
:
T
)
-
>
Result
<
Type
>
{
expr
.
resolve_type_expression
(
self
)
}
pub
fn
add_known_type
(
&
mut
self
type_
:
&
Type
)
-
>
Result
<
(
)
>
{
if
matches
!
(
type_
Type
:
:
Unresolved
{
.
.
}
)
{
bail
!
(
"
Unresolved
types
must
be
resolved
before
being
added
to
known
types
"
)
;
}
if
!
self
.
all_known_types
.
contains
(
type_
)
{
self
.
all_known_types
.
insert
(
type_
.
to_owned
(
)
)
;
match
type_
{
Type
:
:
Optional
(
t
)
=
>
self
.
add_known_type
(
t
)
?
Type
:
:
Sequence
(
t
)
=
>
self
.
add_known_type
(
t
)
?
Type
:
:
Map
(
k
v
)
=
>
{
self
.
add_known_type
(
k
)
?
;
self
.
add_known_type
(
v
)
?
;
}
_
=
>
{
}
}
}
Ok
(
(
)
)
}
pub
fn
iter_known_types
(
&
self
)
-
>
impl
Iterator
<
Item
=
&
Type
>
{
self
.
all_known_types
.
iter
(
)
}
}
pub
type
TypeIterator
<
'
a
>
=
Box
<
dyn
Iterator
<
Item
=
&
'
a
Type
>
+
'
a
>
;
#
[
cfg
(
test
)
]
mod
test_type
{
use
super
:
:
*
;
#
[
test
]
fn
test_canonical_names
(
)
{
assert_eq
!
(
Type
:
:
UInt8
.
canonical_name
(
)
"
u8
"
)
;
assert_eq
!
(
Type
:
:
String
.
canonical_name
(
)
"
string
"
)
;
assert_eq
!
(
Type
:
:
Optional
(
Box
:
:
new
(
Type
:
:
Sequence
(
Box
:
:
new
(
Type
:
:
Object
(
"
Example
"
.
into
(
)
)
)
)
)
)
.
canonical_name
(
)
"
OptionalSequenceTypeExample
"
)
;
}
}
#
[
cfg
(
test
)
]
mod
test_type_universe
{
}
