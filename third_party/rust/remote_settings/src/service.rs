use
std
:
:
{
collections
:
:
HashSet
sync
:
:
{
Arc
Weak
}
}
;
use
camino
:
:
Utf8PathBuf
;
use
parking_lot
:
:
Mutex
;
use
url
:
:
Url
;
use
crate
:
:
{
storage
:
:
Storage
RemoteSettingsClient
RemoteSettingsConfig2
RemoteSettingsContext
RemoteSettingsServer
Result
}
;
pub
struct
RemoteSettingsService
{
inner
:
Mutex
<
RemoteSettingsServiceInner
>
}
struct
RemoteSettingsServiceInner
{
storage_dir
:
Utf8PathBuf
base_url
:
Url
bucket_name
:
String
clients
:
Vec
<
Weak
<
RemoteSettingsClient
>
>
}
impl
RemoteSettingsService
{
pub
fn
new
(
storage_dir
:
String
config
:
RemoteSettingsConfig2
)
-
>
Result
<
Self
>
{
let
storage_dir
=
storage_dir
.
into
(
)
;
let
base_url
=
config
.
server
.
unwrap_or
(
RemoteSettingsServer
:
:
Prod
)
.
get_url
(
)
?
;
let
bucket_name
=
config
.
bucket_name
.
unwrap_or_else
(
|
|
String
:
:
from
(
"
main
"
)
)
;
Ok
(
Self
{
inner
:
Mutex
:
:
new
(
RemoteSettingsServiceInner
{
storage_dir
base_url
bucket_name
clients
:
vec
!
[
]
}
)
}
)
}
#
[
cfg
(
feature
=
"
jexl
"
)
]
pub
fn
make_client
(
&
self
collection_name
:
String
context
:
Option
<
RemoteSettingsContext
>
)
-
>
Result
<
Arc
<
RemoteSettingsClient
>
>
{
let
mut
inner
=
self
.
inner
.
lock
(
)
;
let
storage
=
Storage
:
:
new
(
inner
.
storage_dir
.
join
(
format
!
(
"
{
collection_name
}
.
sql
"
)
)
)
?
;
let
client
=
Arc
:
:
new
(
RemoteSettingsClient
:
:
new
(
inner
.
base_url
.
clone
(
)
inner
.
bucket_name
.
clone
(
)
collection_name
.
clone
(
)
context
storage
)
?
)
;
inner
.
clients
.
push
(
Arc
:
:
downgrade
(
&
client
)
)
;
Ok
(
client
)
}
#
[
cfg
(
not
(
feature
=
"
jexl
"
)
)
]
pub
fn
make_client
(
&
self
collection_name
:
String
#
[
allow
(
unused_variables
)
]
context
:
Option
<
RemoteSettingsContext
>
)
-
>
Result
<
Arc
<
RemoteSettingsClient
>
>
{
let
mut
inner
=
self
.
inner
.
lock
(
)
;
let
storage
=
Storage
:
:
new
(
inner
.
storage_dir
.
join
(
format
!
(
"
{
collection_name
}
.
sql
"
)
)
)
?
;
let
client
=
Arc
:
:
new
(
RemoteSettingsClient
:
:
new
(
inner
.
base_url
.
clone
(
)
inner
.
bucket_name
.
clone
(
)
collection_name
.
clone
(
)
storage
)
?
)
;
inner
.
clients
.
push
(
Arc
:
:
downgrade
(
&
client
)
)
;
Ok
(
client
)
}
pub
fn
sync
(
&
self
)
-
>
Result
<
Vec
<
String
>
>
{
let
mut
synced_collections
=
HashSet
:
:
new
(
)
;
for
client
in
self
.
inner
.
lock
(
)
.
active_clients
(
)
{
if
synced_collections
.
insert
(
client
.
collection_name
(
)
)
{
client
.
internal
.
sync
(
)
?
;
}
}
Ok
(
synced_collections
.
into_iter
(
)
.
collect
(
)
)
}
pub
fn
update_config
(
&
self
config
:
RemoteSettingsConfig2
)
-
>
Result
<
(
)
>
{
let
base_url
=
config
.
server
.
unwrap_or
(
RemoteSettingsServer
:
:
Prod
)
.
get_url
(
)
?
;
let
bucket_name
=
config
.
bucket_name
.
unwrap_or_else
(
|
|
String
:
:
from
(
"
main
"
)
)
;
let
mut
inner
=
self
.
inner
.
lock
(
)
;
for
client
in
inner
.
active_clients
(
)
{
client
.
internal
.
update_config
(
base_url
.
clone
(
)
bucket_name
.
clone
(
)
)
?
;
}
inner
.
base_url
=
base_url
;
inner
.
bucket_name
=
bucket_name
;
Ok
(
(
)
)
}
}
impl
RemoteSettingsServiceInner
{
fn
active_clients
(
&
mut
self
)
-
>
Vec
<
Arc
<
RemoteSettingsClient
>
>
{
let
mut
active_clients
=
vec
!
[
]
;
self
.
clients
.
retain
(
|
weak
|
{
if
let
Some
(
client
)
=
weak
.
upgrade
(
)
{
active_clients
.
push
(
client
)
;
true
}
else
{
false
}
}
)
;
active_clients
}
}
