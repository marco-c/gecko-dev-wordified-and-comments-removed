use
serde_json
:
:
{
Map
Value
}
;
use
std
:
:
collections
:
:
HashMap
;
#
[
derive
(
Debug
Clone
Default
uniffi
:
:
Record
)
]
pub
struct
RemoteSettingsContext
{
#
[
uniffi
(
default
=
None
)
]
pub
channel
:
Option
<
String
>
#
[
uniffi
(
default
=
None
)
]
pub
app_version
:
Option
<
String
>
#
[
uniffi
(
default
=
None
)
]
pub
app_id
:
Option
<
String
>
#
[
uniffi
(
default
=
None
)
]
pub
locale
:
Option
<
String
>
#
[
uniffi
(
default
=
None
)
]
pub
os
:
Option
<
String
>
#
[
uniffi
(
default
=
None
)
]
pub
os_version
:
Option
<
String
>
#
[
uniffi
(
default
=
None
)
]
pub
form_factor
:
Option
<
String
>
#
[
uniffi
(
default
=
None
)
]
pub
country
:
Option
<
String
>
#
[
uniffi
(
default
=
None
)
]
pub
custom_targetting_attributes
:
Option
<
HashMap
<
String
String
>
>
}
impl
RemoteSettingsContext
{
pub
(
crate
)
fn
into_env
(
self
)
-
>
Value
{
let
mut
v
=
Map
:
:
new
(
)
;
v
.
insert
(
"
channel
"
.
to_string
(
)
self
.
channel
.
into
(
)
)
;
if
let
Some
(
version
)
=
self
.
app_version
{
v
.
insert
(
"
version
"
.
to_string
(
)
version
.
into
(
)
)
;
}
if
let
Some
(
locale
)
=
self
.
locale
{
v
.
insert
(
"
locale
"
.
to_string
(
)
locale
.
into
(
)
)
;
}
if
self
.
app_id
.
is_some
(
)
|
|
self
.
os
.
is_some
(
)
|
|
self
.
os_version
.
is_some
(
)
{
let
mut
appinfo
=
Map
:
:
default
(
)
;
if
let
Some
(
app_id
)
=
self
.
app_id
{
appinfo
.
insert
(
"
ID
"
.
to_string
(
)
app_id
.
into
(
)
)
;
}
if
self
.
os
.
is_some
(
)
|
|
self
.
os_version
.
is_some
(
)
{
let
mut
os
=
Map
:
:
default
(
)
;
if
let
Some
(
os_name
)
=
&
self
.
os
{
os
.
insert
(
"
name
"
.
to_string
(
)
os_name
.
to_string
(
)
.
into
(
)
)
;
}
if
let
Some
(
os_version
)
=
self
.
os_version
{
os
.
insert
(
"
version
"
.
to_string
(
)
os_version
.
into
(
)
)
;
}
appinfo
.
insert
(
"
os
"
.
to_string
(
)
os
.
into
(
)
)
;
}
if
let
Some
(
os_name
)
=
self
.
os
{
appinfo
.
insert
(
"
OS
"
.
to_string
(
)
os_name
.
into
(
)
)
;
}
v
.
insert
(
"
appinfo
"
.
to_string
(
)
appinfo
.
into
(
)
)
;
}
if
let
Some
(
form_factor
)
=
self
.
form_factor
{
v
.
insert
(
"
formFactor
"
.
to_string
(
)
form_factor
.
into
(
)
)
;
}
if
let
Some
(
country
)
=
self
.
country
{
v
.
insert
(
"
country
"
.
to_string
(
)
country
.
into
(
)
)
;
}
if
let
Some
(
custom
)
=
self
.
custom_targetting_attributes
{
v
.
extend
(
custom
.
into_iter
(
)
.
map
(
|
(
k
v
)
|
(
k
v
.
into
(
)
)
)
)
;
}
v
.
into
(
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
serde_json
:
:
json
;
#
[
test
]
fn
test_context_normalization
(
)
{
let
context
=
RemoteSettingsContext
{
channel
:
Some
(
"
beta
"
.
into
(
)
)
app_id
:
Some
(
"
{
aaaaaaaa
-
bbbb
-
cccc
-
dddd
-
eeeeeeeeeeee
}
"
.
into
(
)
)
app_version
:
Some
(
"
1
.
0
.
0
"
.
into
(
)
)
os
:
Some
(
"
MS
-
DOS
"
.
into
(
)
)
os_version
:
Some
(
"
6
.
1
"
.
into
(
)
)
locale
:
Some
(
"
en
-
US
"
.
into
(
)
)
form_factor
:
Some
(
"
tablet
"
.
into
(
)
)
country
:
Some
(
"
US
"
.
into
(
)
)
custom_targetting_attributes
:
Some
(
HashMap
:
:
from
(
[
(
"
extra
"
.
into
(
)
"
test
"
.
into
(
)
)
]
)
)
}
;
assert_eq
!
(
context
.
into_env
(
)
json
!
(
{
/
/
Official
fields
"
version
"
:
"
1
.
0
.
0
"
"
channel
"
:
"
beta
"
"
locale
"
:
"
en
-
US
"
"
appinfo
"
:
{
"
ID
"
:
"
{
aaaaaaaa
-
bbbb
-
cccc
-
dddd
-
eeeeeeeeeeee
}
"
"
OS
"
:
"
MS
-
DOS
"
"
os
"
:
{
"
name
"
:
"
MS
-
DOS
"
"
version
"
:
"
6
.
1
"
}
}
/
/
Unofficial
fields
that
we
need
for
Suggest
geo
-
expansion
.
These
should
be
made
/
/
into
official
fields
that
both
the
Gecko
and
Rust
client
support
.
"
formFactor
"
:
"
tablet
"
"
country
"
:
"
US
"
"
extra
"
:
"
test
"
}
)
)
;
}
}
