use
crate
:
:
RemoteSettingsResponse
;
use
std
:
:
collections
:
:
HashSet
;
pub
fn
merge_cache_and_response
(
cached
:
RemoteSettingsResponse
new
:
RemoteSettingsResponse
)
-
>
RemoteSettingsResponse
{
let
new_record_ids
=
new
.
records
.
iter
(
)
.
map
(
|
r
|
r
.
id
.
as_str
(
)
)
.
collect
:
:
<
HashSet
<
&
str
>
>
(
)
;
let
mut
records
=
cached
.
records
.
into_iter
(
)
.
filter
(
|
r
|
!
new_record_ids
.
contains
(
r
.
id
.
as_str
(
)
)
)
.
filter
(
|
r
|
!
r
.
deleted
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
;
records
.
extend
(
new
.
records
.
into_iter
(
)
.
filter
(
|
r
|
!
r
.
deleted
)
)
;
RemoteSettingsResponse
{
last_modified
:
new
.
last_modified
records
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
crate
:
:
{
RemoteSettingsRecord
RsJsonObject
}
;
fn
fields
(
data
:
&
str
)
-
>
RsJsonObject
{
let
mut
map
=
serde_json
:
:
Map
:
:
new
(
)
;
map
.
insert
(
"
data
"
.
into
(
)
data
.
into
(
)
)
;
map
}
#
[
test
]
fn
test_combine_cache_and_response
(
)
{
let
cached_response
=
RemoteSettingsResponse
{
last_modified
:
1000
records
:
vec
!
[
RemoteSettingsRecord
{
id
:
"
a
"
.
into
(
)
last_modified
:
100
deleted
:
false
attachment
:
None
fields
:
fields
(
"
a
"
)
}
RemoteSettingsRecord
{
id
:
"
b
"
.
into
(
)
last_modified
:
200
deleted
:
false
attachment
:
None
fields
:
fields
(
"
b
"
)
}
RemoteSettingsRecord
{
id
:
"
c
"
.
into
(
)
last_modified
:
300
deleted
:
false
attachment
:
None
fields
:
fields
(
"
c
"
)
}
]
}
;
let
new_response
=
RemoteSettingsResponse
{
last_modified
:
2000
records
:
vec
!
[
/
/
d
is
new
RemoteSettingsRecord
{
id
:
"
d
"
.
into
(
)
last_modified
:
1300
deleted
:
false
attachment
:
None
fields
:
fields
(
"
d
"
)
}
/
/
b
was
deleted
RemoteSettingsRecord
{
id
:
"
b
"
.
into
(
)
last_modified
:
1200
deleted
:
true
attachment
:
None
fields
:
RsJsonObject
:
:
new
(
)
}
/
/
a
was
updated
RemoteSettingsRecord
{
id
:
"
a
"
.
into
(
)
last_modified
:
1100
deleted
:
false
attachment
:
None
fields
:
fields
(
"
a
-
with
-
new
-
data
"
)
}
/
/
c
was
not
modified
so
it
'
s
not
present
in
the
new
response
]
}
;
let
mut
merged
=
merge_cache_and_response
(
cached_response
new_response
)
;
merged
.
records
.
sort_by_key
(
|
r
|
r
.
id
.
clone
(
)
)
;
assert_eq
!
(
merged
RemoteSettingsResponse
{
last_modified
:
2000
records
:
vec
!
[
/
/
a
was
updated
RemoteSettingsRecord
{
id
:
"
a
"
.
into
(
)
last_modified
:
1100
deleted
:
false
attachment
:
None
fields
:
fields
(
"
a
-
with
-
new
-
data
"
)
}
RemoteSettingsRecord
{
id
:
"
c
"
.
into
(
)
last_modified
:
300
deleted
:
false
attachment
:
None
fields
:
fields
(
"
c
"
)
}
RemoteSettingsRecord
{
id
:
"
d
"
.
into
(
)
last_modified
:
1300
deleted
:
false
attachment
:
None
fields
:
fields
(
"
d
"
)
}
]
}
)
;
}
}
