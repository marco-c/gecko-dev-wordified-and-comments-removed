use
url
:
:
Url
;
use
crate
:
:
{
ApiResult
Error
Result
}
;
#
[
derive
(
Debug
Clone
uniffi
:
:
Record
)
]
pub
struct
RemoteSettingsConfig
{
pub
collection_name
:
String
#
[
uniffi
(
default
=
None
)
]
pub
bucket_name
:
Option
<
String
>
#
[
uniffi
(
default
=
None
)
]
pub
server_url
:
Option
<
String
>
#
[
uniffi
(
default
=
None
)
]
pub
server
:
Option
<
RemoteSettingsServer
>
}
#
[
derive
(
Debug
Clone
uniffi
:
:
Enum
)
]
pub
enum
RemoteSettingsServer
{
Prod
Stage
Dev
Custom
{
url
:
String
}
}
impl
RemoteSettingsServer
{
#
[
error_support
:
:
handle_error
(
Error
)
]
pub
fn
url
(
&
self
)
-
>
ApiResult
<
Url
>
{
self
.
get_url
(
)
}
pub
(
crate
)
fn
get_url
(
&
self
)
-
>
Result
<
Url
>
{
Ok
(
match
self
{
Self
:
:
Prod
=
>
Url
:
:
parse
(
"
https
:
/
/
firefox
.
settings
.
services
.
mozilla
.
com
"
)
.
unwrap
(
)
Self
:
:
Stage
=
>
Url
:
:
parse
(
"
https
:
/
/
firefox
.
settings
.
services
.
allizom
.
org
"
)
.
unwrap
(
)
Self
:
:
Dev
=
>
Url
:
:
parse
(
"
https
:
/
/
remote
-
settings
-
dev
.
allizom
.
org
"
)
.
unwrap
(
)
Self
:
:
Custom
{
url
}
=
>
Url
:
:
parse
(
url
)
?
}
)
}
}
