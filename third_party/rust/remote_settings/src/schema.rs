use
rusqlite
:
:
{
Connection
Transaction
}
;
use
sql_support
:
:
open_database
:
:
{
self
ConnectionInitializer
}
;
pub
const
VERSION
:
u32
=
2
;
pub
const
SQL
:
&
str
=
r
#
"
CREATE
TABLE
IF
NOT
EXISTS
records
(
id
TEXT
PRIMARY
KEY
collection_url
TEXT
NOT
NULL
data
BLOB
NOT
NULL
)
;
CREATE
TABLE
IF
NOT
EXISTS
attachments
(
id
TEXT
PRIMARY
KEY
collection_url
TEXT
NOT
NULL
data
BLOB
NOT
NULL
)
;
CREATE
TABLE
IF
NOT
EXISTS
collection_metadata
(
collection_url
TEXT
PRIMARY
KEY
last_modified
INTEGER
bucket
TEXT
signature
TEXT
x5u
TEXT
)
;
"
#
;
#
[
derive
(
Default
)
]
pub
struct
RemoteSettingsConnectionInitializer
;
impl
ConnectionInitializer
for
RemoteSettingsConnectionInitializer
{
const
NAME
:
&
'
static
str
=
"
remote_settings
"
;
const
END_VERSION
:
u32
=
2
;
fn
prepare
(
&
self
conn
:
&
Connection
_db_empty
:
bool
)
-
>
open_database
:
:
Result
<
(
)
>
{
let
initial_pragmas
=
"
-
-
Use
in
-
memory
storage
for
TEMP
tables
.
PRAGMA
temp_store
=
2
;
PRAGMA
journal_mode
=
WAL
;
"
;
conn
.
execute_batch
(
initial_pragmas
)
?
;
sql_support
:
:
debug_tools
:
:
define_debug_functions
(
conn
)
?
;
Ok
(
(
)
)
}
fn
init
(
&
self
db
:
&
Transaction
<
'
_
>
)
-
>
open_database
:
:
Result
<
(
)
>
{
db
.
execute_batch
(
SQL
)
?
;
Ok
(
(
)
)
}
fn
upgrade_from
(
&
self
tx
:
&
Transaction
<
'
_
>
version
:
u32
)
-
>
open_database
:
:
Result
<
(
)
>
{
match
version
{
0
=
>
{
tx
.
execute
(
"
ALTER
TABLE
collection_metadata
DROP
column
fetched
"
(
)
)
?
;
Ok
(
(
)
)
}
1
=
>
{
tx
.
execute
(
"
ALTER
TABLE
collection_metadata
ADD
COLUMN
bucket
TEXT
"
(
)
)
?
;
tx
.
execute
(
"
ALTER
TABLE
collection_metadata
ADD
COLUMN
signature
TEXT
"
(
)
)
?
;
tx
.
execute
(
"
ALTER
TABLE
collection_metadata
ADD
COLUMN
x5u
TEXT
"
(
)
)
?
;
Ok
(
(
)
)
}
_
=
>
Err
(
open_database
:
:
Error
:
:
IncompatibleVersion
(
version
)
)
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
sql_support
:
:
open_database
:
:
test_utils
:
:
MigratedDatabaseFile
;
const
V0_SCHEMA
:
&
str
=
r
#
"
CREATE
TABLE
IF
NOT
EXISTS
records
(
id
TEXT
PRIMARY
KEY
collection_url
TEXT
NOT
NULL
data
BLOB
NOT
NULL
)
;
CREATE
TABLE
IF
NOT
EXISTS
attachments
(
id
TEXT
PRIMARY
KEY
collection_url
TEXT
NOT
NULL
data
BLOB
NOT
NULL
)
;
CREATE
TABLE
IF
NOT
EXISTS
collection_metadata
(
collection_url
TEXT
PRIMARY
KEY
last_modified
INTEGER
fetched
BOOLEAN
)
;
PRAGMA
user_version
=
0
;
"
#
;
#
[
test
]
fn
test_all_upgrades
(
)
{
let
db_file
=
MigratedDatabaseFile
:
:
new
(
RemoteSettingsConnectionInitializer
V0_SCHEMA
)
;
db_file
.
run_all_upgrades
(
)
;
db_file
.
assert_schema_matches_new_database
(
)
;
}
}
