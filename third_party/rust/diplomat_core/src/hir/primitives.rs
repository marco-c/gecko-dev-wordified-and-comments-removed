use
crate
:
:
ast
;
#
[
derive
(
Copy
Clone
Debug
)
]
#
[
allow
(
clippy
:
:
exhaustive_enums
)
]
pub
enum
IntType
{
I8
I16
I32
I64
U8
U16
U32
U64
}
#
[
derive
(
Copy
Clone
Debug
)
]
#
[
allow
(
clippy
:
:
exhaustive_enums
)
]
pub
enum
IntSizeType
{
Isize
Usize
}
#
[
derive
(
Copy
Clone
Debug
)
]
#
[
allow
(
clippy
:
:
exhaustive_enums
)
]
pub
enum
Int128Type
{
I128
U128
}
#
[
derive
(
Copy
Clone
Debug
)
]
#
[
allow
(
clippy
:
:
exhaustive_enums
)
]
pub
enum
FloatType
{
F32
F64
}
#
[
derive
(
Copy
Clone
Debug
)
]
#
[
allow
(
clippy
:
:
exhaustive_enums
)
]
pub
enum
PrimitiveType
{
Bool
Char
Int
(
IntType
)
IntSize
(
IntSizeType
)
Int128
(
Int128Type
)
Float
(
FloatType
)
}
impl
IntType
{
pub
fn
as_str
(
&
self
)
-
>
&
'
static
str
{
match
self
{
IntType
:
:
I8
=
>
"
i8
"
IntType
:
:
I16
=
>
"
i16
"
IntType
:
:
I32
=
>
"
i32
"
IntType
:
:
I64
=
>
"
i64
"
IntType
:
:
U8
=
>
"
u8
"
IntType
:
:
U16
=
>
"
u16
"
IntType
:
:
U32
=
>
"
u32
"
IntType
:
:
U64
=
>
"
u64
"
}
}
}
impl
IntSizeType
{
pub
fn
as_str
(
&
self
)
-
>
&
'
static
str
{
match
self
{
IntSizeType
:
:
Isize
=
>
"
isize
"
IntSizeType
:
:
Usize
=
>
"
usize
"
}
}
}
impl
Int128Type
{
pub
fn
as_str
(
&
self
)
-
>
&
'
static
str
{
match
self
{
Int128Type
:
:
I128
=
>
"
i128
"
Int128Type
:
:
U128
=
>
"
u128
"
}
}
}
impl
FloatType
{
pub
fn
as_str
(
&
self
)
-
>
&
'
static
str
{
match
self
{
FloatType
:
:
F32
=
>
"
f32
"
FloatType
:
:
F64
=
>
"
f64
"
}
}
}
impl
PrimitiveType
{
pub
(
super
)
fn
from_ast
(
prim
:
ast
:
:
PrimitiveType
)
-
>
Self
{
match
prim
{
ast
:
:
PrimitiveType
:
:
i8
=
>
PrimitiveType
:
:
Int
(
IntType
:
:
I8
)
ast
:
:
PrimitiveType
:
:
u8
=
>
PrimitiveType
:
:
Int
(
IntType
:
:
U8
)
ast
:
:
PrimitiveType
:
:
i16
=
>
PrimitiveType
:
:
Int
(
IntType
:
:
I16
)
ast
:
:
PrimitiveType
:
:
u16
=
>
PrimitiveType
:
:
Int
(
IntType
:
:
U16
)
ast
:
:
PrimitiveType
:
:
i32
=
>
PrimitiveType
:
:
Int
(
IntType
:
:
I32
)
ast
:
:
PrimitiveType
:
:
u32
=
>
PrimitiveType
:
:
Int
(
IntType
:
:
U32
)
ast
:
:
PrimitiveType
:
:
i64
=
>
PrimitiveType
:
:
Int
(
IntType
:
:
I64
)
ast
:
:
PrimitiveType
:
:
u64
=
>
PrimitiveType
:
:
Int
(
IntType
:
:
U64
)
ast
:
:
PrimitiveType
:
:
isize
=
>
PrimitiveType
:
:
IntSize
(
IntSizeType
:
:
Isize
)
ast
:
:
PrimitiveType
:
:
usize
=
>
PrimitiveType
:
:
IntSize
(
IntSizeType
:
:
Usize
)
ast
:
:
PrimitiveType
:
:
i128
=
>
PrimitiveType
:
:
Int128
(
Int128Type
:
:
I128
)
ast
:
:
PrimitiveType
:
:
u128
=
>
PrimitiveType
:
:
Int128
(
Int128Type
:
:
U128
)
ast
:
:
PrimitiveType
:
:
f32
=
>
PrimitiveType
:
:
Float
(
FloatType
:
:
F32
)
ast
:
:
PrimitiveType
:
:
f64
=
>
PrimitiveType
:
:
Float
(
FloatType
:
:
F64
)
ast
:
:
PrimitiveType
:
:
bool
=
>
PrimitiveType
:
:
Bool
ast
:
:
PrimitiveType
:
:
char
=
>
PrimitiveType
:
:
Char
}
}
pub
fn
as_str
(
&
self
)
-
>
&
'
static
str
{
match
self
{
PrimitiveType
:
:
Bool
=
>
"
bool
"
PrimitiveType
:
:
Char
=
>
"
char
"
PrimitiveType
:
:
Int
(
ty
)
=
>
ty
.
as_str
(
)
PrimitiveType
:
:
IntSize
(
ty
)
=
>
ty
.
as_str
(
)
PrimitiveType
:
:
Int128
(
ty
)
=
>
ty
.
as_str
(
)
PrimitiveType
:
:
Float
(
ty
)
=
>
ty
.
as_str
(
)
}
}
}
