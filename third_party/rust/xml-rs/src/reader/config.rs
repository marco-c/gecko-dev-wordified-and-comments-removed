use
std
:
:
io
:
:
Read
;
use
std
:
:
collections
:
:
HashMap
;
use
reader
:
:
EventReader
;
#
[
derive
(
Clone
PartialEq
Eq
Debug
)
]
pub
struct
ParserConfig
{
pub
trim_whitespace
:
bool
pub
whitespace_to_characters
:
bool
pub
cdata_to_characters
:
bool
pub
ignore_comments
:
bool
pub
coalesce_characters
:
bool
pub
extra_entities
:
HashMap
<
String
String
>
pub
ignore_end_of_stream
:
bool
pub
replace_unknown_entity_references
:
bool
pub
ignore_root_level_whitespace
:
bool
}
impl
ParserConfig
{
pub
fn
new
(
)
-
>
ParserConfig
{
ParserConfig
{
trim_whitespace
:
false
whitespace_to_characters
:
false
cdata_to_characters
:
false
ignore_comments
:
true
coalesce_characters
:
true
extra_entities
:
HashMap
:
:
new
(
)
ignore_end_of_stream
:
false
replace_unknown_entity_references
:
false
ignore_root_level_whitespace
:
true
}
}
#
[
inline
]
pub
fn
create_reader
<
R
:
Read
>
(
self
source
:
R
)
-
>
EventReader
<
R
>
{
EventReader
:
:
new_with_config
(
source
self
)
}
pub
fn
add_entity
<
S
:
Into
<
String
>
T
:
Into
<
String
>
>
(
mut
self
entity
:
S
value
:
T
)
-
>
ParserConfig
{
self
.
extra_entities
.
insert
(
entity
.
into
(
)
value
.
into
(
)
)
;
self
}
}
impl
Default
for
ParserConfig
{
#
[
inline
]
fn
default
(
)
-
>
ParserConfig
{
ParserConfig
:
:
new
(
)
}
}
gen_setters
!
{
ParserConfig
trim_whitespace
:
val
bool
whitespace_to_characters
:
val
bool
cdata_to_characters
:
val
bool
ignore_comments
:
val
bool
coalesce_characters
:
val
bool
ignore_end_of_stream
:
val
bool
replace_unknown_entity_references
:
val
bool
ignore_root_level_whitespace
:
val
bool
}
