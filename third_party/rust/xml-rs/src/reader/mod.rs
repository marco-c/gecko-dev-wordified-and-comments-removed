use
std
:
:
io
:
:
{
Read
}
;
use
std
:
:
result
;
use
common
:
:
{
Position
TextPosition
}
;
pub
use
self
:
:
config
:
:
ParserConfig
;
pub
use
self
:
:
events
:
:
XmlEvent
;
use
self
:
:
parser
:
:
PullParser
;
mod
lexer
;
mod
parser
;
mod
config
;
mod
events
;
mod
error
;
pub
use
self
:
:
error
:
:
{
Error
ErrorKind
}
;
pub
type
Result
<
T
>
=
result
:
:
Result
<
T
Error
>
;
pub
struct
EventReader
<
R
:
Read
>
{
source
:
R
parser
:
PullParser
}
impl
<
R
:
Read
>
EventReader
<
R
>
{
#
[
inline
]
pub
fn
new
(
source
:
R
)
-
>
EventReader
<
R
>
{
EventReader
:
:
new_with_config
(
source
ParserConfig
:
:
new
(
)
)
}
#
[
inline
]
pub
fn
new_with_config
(
source
:
R
config
:
ParserConfig
)
-
>
EventReader
<
R
>
{
EventReader
{
source
:
source
parser
:
PullParser
:
:
new
(
config
)
}
}
#
[
inline
]
pub
fn
next
(
&
mut
self
)
-
>
Result
<
XmlEvent
>
{
self
.
parser
.
next
(
&
mut
self
.
source
)
}
pub
fn
source
(
&
self
)
-
>
&
R
{
&
self
.
source
}
pub
fn
source_mut
(
&
mut
self
)
-
>
&
mut
R
{
&
mut
self
.
source
}
pub
fn
into_inner
(
self
)
-
>
R
{
self
.
source
}
}
impl
<
B
:
Read
>
Position
for
EventReader
<
B
>
{
#
[
inline
]
fn
position
(
&
self
)
-
>
TextPosition
{
self
.
parser
.
position
(
)
}
}
impl
<
R
:
Read
>
IntoIterator
for
EventReader
<
R
>
{
type
Item
=
Result
<
XmlEvent
>
;
type
IntoIter
=
Events
<
R
>
;
fn
into_iter
(
self
)
-
>
Events
<
R
>
{
Events
{
reader
:
self
finished
:
false
}
}
}
pub
struct
Events
<
R
:
Read
>
{
reader
:
EventReader
<
R
>
finished
:
bool
}
impl
<
R
:
Read
>
Events
<
R
>
{
#
[
inline
]
pub
fn
into_inner
(
self
)
-
>
EventReader
<
R
>
{
self
.
reader
}
pub
fn
source
(
&
self
)
-
>
&
R
{
&
self
.
reader
.
source
}
pub
fn
source_mut
(
&
mut
self
)
-
>
&
mut
R
{
&
mut
self
.
reader
.
source
}
}
impl
<
R
:
Read
>
Iterator
for
Events
<
R
>
{
type
Item
=
Result
<
XmlEvent
>
;
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
Result
<
XmlEvent
>
>
{
if
self
.
finished
&
&
!
self
.
reader
.
parser
.
is_ignoring_end_of_stream
(
)
{
None
}
else
{
let
ev
=
self
.
reader
.
next
(
)
;
match
ev
{
Ok
(
XmlEvent
:
:
EndDocument
)
|
Err
(
_
)
=
>
self
.
finished
=
true
_
=
>
{
}
}
Some
(
ev
)
}
}
}
impl
<
'
r
>
EventReader
<
&
'
r
[
u8
]
>
{
#
[
inline
]
pub
fn
from_str
(
source
:
&
'
r
str
)
-
>
EventReader
<
&
'
r
[
u8
]
>
{
EventReader
:
:
new
(
source
.
as_bytes
(
)
)
}
}
