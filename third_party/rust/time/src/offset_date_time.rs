#
[
cfg
(
feature
=
"
std
"
)
]
use
core
:
:
cmp
:
:
Ordering
;
#
[
cfg
(
feature
=
"
std
"
)
]
use
core
:
:
convert
:
:
From
;
use
core
:
:
fmt
;
use
core
:
:
hash
:
:
Hash
;
use
core
:
:
ops
:
:
{
Add
AddAssign
Sub
SubAssign
}
;
use
core
:
:
time
:
:
Duration
as
StdDuration
;
#
[
cfg
(
feature
=
"
formatting
"
)
]
use
std
:
:
io
;
#
[
cfg
(
feature
=
"
std
"
)
]
use
std
:
:
time
:
:
SystemTime
;
use
crate
:
:
date_time
:
:
offset_kind
;
#
[
cfg
(
feature
=
"
formatting
"
)
]
use
crate
:
:
formatting
:
:
Formattable
;
#
[
cfg
(
feature
=
"
parsing
"
)
]
use
crate
:
:
parsing
:
:
Parsable
;
use
crate
:
:
{
error
Date
DateTime
Duration
Month
PrimitiveDateTime
Time
UtcOffset
Weekday
}
;
type
Inner
=
DateTime
<
offset_kind
:
:
Fixed
>
;
#
[
derive
(
Clone
Copy
PartialEq
Eq
PartialOrd
Ord
Hash
)
]
pub
struct
OffsetDateTime
(
pub
(
crate
)
Inner
)
;
impl
OffsetDateTime
{
pub
const
UNIX_EPOCH
:
Self
=
Self
(
Inner
:
:
UNIX_EPOCH
)
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
fn
now_utc
(
)
-
>
Self
{
Self
(
Inner
:
:
now_utc
(
)
)
}
#
[
cfg
(
feature
=
"
local
-
offset
"
)
]
pub
fn
now_local
(
)
-
>
Result
<
Self
error
:
:
IndeterminateOffset
>
{
Inner
:
:
now_local
(
)
.
map
(
Self
)
}
pub
const
fn
to_offset
(
self
offset
:
UtcOffset
)
-
>
Self
{
Self
(
self
.
0
.
to_offset
(
offset
)
)
}
pub
const
fn
checked_to_offset
(
self
offset
:
UtcOffset
)
-
>
Option
<
Self
>
{
Some
(
Self
(
const_try_opt
!
(
self
.
0
.
checked_to_offset
(
offset
)
)
)
)
}
pub
const
fn
from_unix_timestamp
(
timestamp
:
i64
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
Self
(
const_try
!
(
Inner
:
:
from_unix_timestamp
(
timestamp
)
)
)
)
}
pub
const
fn
from_unix_timestamp_nanos
(
timestamp
:
i128
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
Self
(
const_try
!
(
Inner
:
:
from_unix_timestamp_nanos
(
timestamp
)
)
)
)
}
pub
const
fn
offset
(
self
)
-
>
UtcOffset
{
self
.
0
.
offset
(
)
}
pub
const
fn
unix_timestamp
(
self
)
-
>
i64
{
self
.
0
.
unix_timestamp
(
)
}
pub
const
fn
unix_timestamp_nanos
(
self
)
-
>
i128
{
self
.
0
.
unix_timestamp_nanos
(
)
}
pub
const
fn
date
(
self
)
-
>
Date
{
self
.
0
.
date
(
)
}
pub
const
fn
time
(
self
)
-
>
Time
{
self
.
0
.
time
(
)
}
pub
const
fn
year
(
self
)
-
>
i32
{
self
.
0
.
year
(
)
}
pub
const
fn
month
(
self
)
-
>
Month
{
self
.
0
.
month
(
)
}
pub
const
fn
day
(
self
)
-
>
u8
{
self
.
0
.
day
(
)
}
pub
const
fn
ordinal
(
self
)
-
>
u16
{
self
.
0
.
ordinal
(
)
}
pub
const
fn
iso_week
(
self
)
-
>
u8
{
self
.
0
.
iso_week
(
)
}
pub
const
fn
sunday_based_week
(
self
)
-
>
u8
{
self
.
0
.
sunday_based_week
(
)
}
pub
const
fn
monday_based_week
(
self
)
-
>
u8
{
self
.
0
.
monday_based_week
(
)
}
pub
const
fn
to_calendar_date
(
self
)
-
>
(
i32
Month
u8
)
{
self
.
0
.
to_calendar_date
(
)
}
pub
const
fn
to_ordinal_date
(
self
)
-
>
(
i32
u16
)
{
self
.
0
.
to_ordinal_date
(
)
}
pub
const
fn
to_iso_week_date
(
self
)
-
>
(
i32
u8
Weekday
)
{
self
.
0
.
to_iso_week_date
(
)
}
pub
const
fn
weekday
(
self
)
-
>
Weekday
{
self
.
0
.
weekday
(
)
}
pub
const
fn
to_julian_day
(
self
)
-
>
i32
{
self
.
0
.
to_julian_day
(
)
}
pub
const
fn
to_hms
(
self
)
-
>
(
u8
u8
u8
)
{
self
.
0
.
as_hms
(
)
}
pub
const
fn
to_hms_milli
(
self
)
-
>
(
u8
u8
u8
u16
)
{
self
.
0
.
as_hms_milli
(
)
}
pub
const
fn
to_hms_micro
(
self
)
-
>
(
u8
u8
u8
u32
)
{
self
.
0
.
as_hms_micro
(
)
}
pub
const
fn
to_hms_nano
(
self
)
-
>
(
u8
u8
u8
u32
)
{
self
.
0
.
as_hms_nano
(
)
}
pub
const
fn
hour
(
self
)
-
>
u8
{
self
.
0
.
hour
(
)
}
pub
const
fn
minute
(
self
)
-
>
u8
{
self
.
0
.
minute
(
)
}
pub
const
fn
second
(
self
)
-
>
u8
{
self
.
0
.
second
(
)
}
pub
const
fn
millisecond
(
self
)
-
>
u16
{
self
.
0
.
millisecond
(
)
}
pub
const
fn
microsecond
(
self
)
-
>
u32
{
self
.
0
.
microsecond
(
)
}
pub
const
fn
nanosecond
(
self
)
-
>
u32
{
self
.
0
.
nanosecond
(
)
}
pub
const
fn
checked_add
(
self
duration
:
Duration
)
-
>
Option
<
Self
>
{
Some
(
Self
(
const_try_opt
!
(
self
.
0
.
checked_add
(
duration
)
)
)
)
}
pub
const
fn
checked_sub
(
self
duration
:
Duration
)
-
>
Option
<
Self
>
{
Some
(
Self
(
const_try_opt
!
(
self
.
0
.
checked_sub
(
duration
)
)
)
)
}
#
[
cfg_attr
(
feature
=
"
large
-
dates
"
doc
=
"
datetime
!
(
-
999999
-
01
-
01
0
:
00
+
10
)
.
saturating_add
(
(
-
2
)
.
days
(
)
)
"
)
]
#
[
cfg_attr
(
feature
=
"
large
-
dates
"
doc
=
"
datetime
!
(
-
999999
-
01
-
01
0
:
00
+
10
)
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
large
-
dates
"
)
doc
=
"
datetime
!
(
-
9999
-
01
-
01
0
:
00
+
10
)
.
saturating_add
(
(
-
2
)
.
days
(
)
)
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
large
-
dates
"
)
doc
=
"
datetime
!
(
-
9999
-
01
-
01
0
:
00
+
10
)
"
)
]
#
[
cfg_attr
(
feature
=
"
large
-
dates
"
doc
=
"
datetime
!
(
+
999999
-
12
-
31
23
:
59
:
59
.
999_999_999
+
10
)
.
saturating_add
(
2
.
days
(
)
)
"
)
]
#
[
cfg_attr
(
feature
=
"
large
-
dates
"
doc
=
"
datetime
!
(
+
999999
-
12
-
31
23
:
59
:
59
.
999_999_999
+
10
)
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
large
-
dates
"
)
doc
=
"
datetime
!
(
+
9999
-
12
-
31
23
:
59
:
59
.
999_999_999
+
10
)
.
saturating_add
(
2
.
days
(
)
)
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
large
-
dates
"
)
doc
=
"
datetime
!
(
+
9999
-
12
-
31
23
:
59
:
59
.
999_999_999
+
10
)
"
)
]
pub
const
fn
saturating_add
(
self
duration
:
Duration
)
-
>
Self
{
Self
(
self
.
0
.
saturating_add
(
duration
)
)
}
#
[
cfg_attr
(
feature
=
"
large
-
dates
"
doc
=
"
datetime
!
(
-
999999
-
01
-
01
0
:
00
+
10
)
.
saturating_sub
(
2
.
days
(
)
)
"
)
]
#
[
cfg_attr
(
feature
=
"
large
-
dates
"
doc
=
"
datetime
!
(
-
999999
-
01
-
01
0
:
00
+
10
)
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
large
-
dates
"
)
doc
=
"
datetime
!
(
-
9999
-
01
-
01
0
:
00
+
10
)
.
saturating_sub
(
2
.
days
(
)
)
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
large
-
dates
"
)
doc
=
"
datetime
!
(
-
9999
-
01
-
01
0
:
00
+
10
)
"
)
]
#
[
cfg_attr
(
feature
=
"
large
-
dates
"
doc
=
"
datetime
!
(
+
999999
-
12
-
31
23
:
59
:
59
.
999_999_999
+
10
)
.
saturating_sub
(
(
-
2
)
.
days
(
)
)
"
)
]
#
[
cfg_attr
(
feature
=
"
large
-
dates
"
doc
=
"
datetime
!
(
+
999999
-
12
-
31
23
:
59
:
59
.
999_999_999
+
10
)
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
large
-
dates
"
)
doc
=
"
datetime
!
(
+
9999
-
12
-
31
23
:
59
:
59
.
999_999_999
+
10
)
.
saturating_sub
(
(
-
2
)
.
days
(
)
)
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
large
-
dates
"
)
doc
=
"
datetime
!
(
+
9999
-
12
-
31
23
:
59
:
59
.
999_999_999
+
10
)
"
)
]
pub
const
fn
saturating_sub
(
self
duration
:
Duration
)
-
>
Self
{
Self
(
self
.
0
.
saturating_sub
(
duration
)
)
}
}
impl
OffsetDateTime
{
#
[
must_use
=
"
This
method
does
not
mutate
the
original
OffsetDateTime
.
"
]
pub
const
fn
replace_time
(
self
time
:
Time
)
-
>
Self
{
Self
(
self
.
0
.
replace_time
(
time
)
)
}
#
[
must_use
=
"
This
method
does
not
mutate
the
original
OffsetDateTime
.
"
]
pub
const
fn
replace_date
(
self
date
:
Date
)
-
>
Self
{
Self
(
self
.
0
.
replace_date
(
date
)
)
}
#
[
must_use
=
"
This
method
does
not
mutate
the
original
OffsetDateTime
.
"
]
pub
const
fn
replace_date_time
(
self
date_time
:
PrimitiveDateTime
)
-
>
Self
{
Self
(
self
.
0
.
replace_date_time
(
date_time
.
0
)
)
}
#
[
must_use
=
"
This
method
does
not
mutate
the
original
OffsetDateTime
.
"
]
pub
const
fn
replace_offset
(
self
offset
:
UtcOffset
)
-
>
Self
{
Self
(
self
.
0
.
replace_offset
(
offset
)
)
}
pub
const
fn
replace_year
(
self
year
:
i32
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
Self
(
const_try
!
(
self
.
0
.
replace_year
(
year
)
)
)
)
}
pub
const
fn
replace_month
(
self
month
:
Month
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
Self
(
const_try
!
(
self
.
0
.
replace_month
(
month
)
)
)
)
}
pub
const
fn
replace_day
(
self
day
:
u8
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
Self
(
const_try
!
(
self
.
0
.
replace_day
(
day
)
)
)
)
}
pub
const
fn
replace_hour
(
self
hour
:
u8
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
Self
(
const_try
!
(
self
.
0
.
replace_hour
(
hour
)
)
)
)
}
pub
const
fn
replace_minute
(
self
minute
:
u8
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
Self
(
const_try
!
(
self
.
0
.
replace_minute
(
minute
)
)
)
)
}
pub
const
fn
replace_second
(
self
second
:
u8
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
Self
(
const_try
!
(
self
.
0
.
replace_second
(
second
)
)
)
)
}
pub
const
fn
replace_millisecond
(
self
millisecond
:
u16
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
Self
(
const_try
!
(
self
.
0
.
replace_millisecond
(
millisecond
)
)
)
)
}
pub
const
fn
replace_microsecond
(
self
microsecond
:
u32
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
Self
(
const_try
!
(
self
.
0
.
replace_microsecond
(
microsecond
)
)
)
)
}
pub
const
fn
replace_nanosecond
(
self
nanosecond
:
u32
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
Self
(
const_try
!
(
self
.
0
.
replace_nanosecond
(
nanosecond
)
)
)
)
}
}
#
[
cfg
(
feature
=
"
formatting
"
)
]
impl
OffsetDateTime
{
pub
fn
format_into
(
self
output
:
&
mut
impl
io
:
:
Write
format
:
&
(
impl
Formattable
+
?
Sized
)
)
-
>
Result
<
usize
error
:
:
Format
>
{
self
.
0
.
format_into
(
output
format
)
}
pub
fn
format
(
self
format
:
&
(
impl
Formattable
+
?
Sized
)
)
-
>
Result
<
String
error
:
:
Format
>
{
self
.
0
.
format
(
format
)
}
}
#
[
cfg
(
feature
=
"
parsing
"
)
]
impl
OffsetDateTime
{
pub
fn
parse
(
input
:
&
str
description
:
&
(
impl
Parsable
+
?
Sized
)
)
-
>
Result
<
Self
error
:
:
Parse
>
{
Inner
:
:
parse
(
input
description
)
.
map
(
Self
)
}
}
impl
fmt
:
:
Display
for
OffsetDateTime
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
0
.
fmt
(
f
)
}
}
impl
fmt
:
:
Debug
for
OffsetDateTime
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
:
:
Display
:
:
fmt
(
self
f
)
}
}
impl
Add
<
Duration
>
for
OffsetDateTime
{
type
Output
=
Self
;
fn
add
(
self
rhs
:
Duration
)
-
>
Self
:
:
Output
{
Self
(
self
.
0
.
add
(
rhs
)
)
}
}
impl
Add
<
StdDuration
>
for
OffsetDateTime
{
type
Output
=
Self
;
fn
add
(
self
rhs
:
StdDuration
)
-
>
Self
:
:
Output
{
Self
(
self
.
0
.
add
(
rhs
)
)
}
}
impl
AddAssign
<
Duration
>
for
OffsetDateTime
{
fn
add_assign
(
&
mut
self
rhs
:
Duration
)
{
self
.
0
.
add_assign
(
rhs
)
;
}
}
impl
AddAssign
<
StdDuration
>
for
OffsetDateTime
{
fn
add_assign
(
&
mut
self
rhs
:
StdDuration
)
{
self
.
0
.
add_assign
(
rhs
)
;
}
}
impl
Sub
<
Duration
>
for
OffsetDateTime
{
type
Output
=
Self
;
fn
sub
(
self
rhs
:
Duration
)
-
>
Self
:
:
Output
{
Self
(
self
.
0
.
sub
(
rhs
)
)
}
}
impl
Sub
<
StdDuration
>
for
OffsetDateTime
{
type
Output
=
Self
;
fn
sub
(
self
rhs
:
StdDuration
)
-
>
Self
:
:
Output
{
Self
(
self
.
0
.
sub
(
rhs
)
)
}
}
impl
SubAssign
<
Duration
>
for
OffsetDateTime
{
fn
sub_assign
(
&
mut
self
rhs
:
Duration
)
{
self
.
0
.
sub_assign
(
rhs
)
;
}
}
impl
SubAssign
<
StdDuration
>
for
OffsetDateTime
{
fn
sub_assign
(
&
mut
self
rhs
:
StdDuration
)
{
self
.
0
.
sub_assign
(
rhs
)
;
}
}
impl
Sub
for
OffsetDateTime
{
type
Output
=
Duration
;
fn
sub
(
self
rhs
:
Self
)
-
>
Self
:
:
Output
{
self
.
0
.
sub
(
rhs
.
0
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
Sub
<
SystemTime
>
for
OffsetDateTime
{
type
Output
=
Duration
;
fn
sub
(
self
rhs
:
SystemTime
)
-
>
Self
:
:
Output
{
self
.
0
.
sub
(
rhs
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
Sub
<
OffsetDateTime
>
for
SystemTime
{
type
Output
=
Duration
;
fn
sub
(
self
rhs
:
OffsetDateTime
)
-
>
Self
:
:
Output
{
self
.
sub
(
rhs
.
0
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
PartialEq
<
SystemTime
>
for
OffsetDateTime
{
fn
eq
(
&
self
rhs
:
&
SystemTime
)
-
>
bool
{
self
.
0
.
eq
(
rhs
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
PartialEq
<
OffsetDateTime
>
for
SystemTime
{
fn
eq
(
&
self
rhs
:
&
OffsetDateTime
)
-
>
bool
{
self
.
eq
(
&
rhs
.
0
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
PartialOrd
<
SystemTime
>
for
OffsetDateTime
{
fn
partial_cmp
(
&
self
other
:
&
SystemTime
)
-
>
Option
<
Ordering
>
{
self
.
0
.
partial_cmp
(
other
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
PartialOrd
<
OffsetDateTime
>
for
SystemTime
{
fn
partial_cmp
(
&
self
other
:
&
OffsetDateTime
)
-
>
Option
<
Ordering
>
{
self
.
partial_cmp
(
&
other
.
0
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
From
<
SystemTime
>
for
OffsetDateTime
{
fn
from
(
system_time
:
SystemTime
)
-
>
Self
{
Self
(
Inner
:
:
from
(
system_time
)
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
From
<
OffsetDateTime
>
for
SystemTime
{
fn
from
(
datetime
:
OffsetDateTime
)
-
>
Self
{
datetime
.
0
.
into
(
)
}
}
#
[
cfg
(
all
(
target_family
=
"
wasm
"
not
(
any
(
target_os
=
"
emscripten
"
target_os
=
"
wasi
"
)
)
feature
=
"
wasm
-
bindgen
"
)
)
]
impl
From
<
js_sys
:
:
Date
>
for
OffsetDateTime
{
fn
from
(
js_date
:
js_sys
:
:
Date
)
-
>
Self
{
Self
(
Inner
:
:
from
(
js_date
)
)
}
}
#
[
cfg
(
all
(
target_family
=
"
wasm
"
not
(
any
(
target_os
=
"
emscripten
"
target_os
=
"
wasi
"
)
)
feature
=
"
wasm
-
bindgen
"
)
)
]
impl
From
<
OffsetDateTime
>
for
js_sys
:
:
Date
{
fn
from
(
datetime
:
OffsetDateTime
)
-
>
Self
{
datetime
.
0
.
into
(
)
}
}
