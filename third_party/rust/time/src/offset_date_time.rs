use
core
:
:
cmp
:
:
Ordering
;
#
[
cfg
(
feature
=
"
std
"
)
]
use
core
:
:
convert
:
:
From
;
use
core
:
:
fmt
;
use
core
:
:
hash
:
:
{
Hash
Hasher
}
;
use
core
:
:
ops
:
:
{
Add
Sub
}
;
use
core
:
:
time
:
:
Duration
as
StdDuration
;
#
[
cfg
(
feature
=
"
formatting
"
)
]
use
std
:
:
io
;
#
[
cfg
(
feature
=
"
std
"
)
]
use
std
:
:
time
:
:
SystemTime
;
#
[
cfg
(
feature
=
"
formatting
"
)
]
use
crate
:
:
formatting
:
:
Formattable
;
#
[
cfg
(
feature
=
"
parsing
"
)
]
use
crate
:
:
parsing
:
:
Parsable
;
#
[
cfg
(
feature
=
"
parsing
"
)
]
use
crate
:
:
util
;
use
crate
:
:
{
error
Date
Duration
Month
PrimitiveDateTime
Time
UtcOffset
Weekday
}
;
const
UNIX_EPOCH_JULIAN_DAY
:
i32
=
Date
:
:
__from_ordinal_date_unchecked
(
1970
1
)
.
to_julian_day
(
)
;
#
[
derive
(
Debug
Clone
Copy
Eq
)
]
pub
struct
OffsetDateTime
{
pub
(
crate
)
utc_datetime
:
PrimitiveDateTime
pub
(
crate
)
offset
:
UtcOffset
}
impl
OffsetDateTime
{
pub
const
UNIX_EPOCH
:
Self
=
Date
:
:
__from_ordinal_date_unchecked
(
1970
1
)
.
midnight
(
)
.
assume_utc
(
)
;
#
[
cfg
(
feature
=
"
std
"
)
]
#
[
cfg_attr
(
__time_03_docs
doc
(
cfg
(
feature
=
"
std
"
)
)
)
]
pub
fn
now_utc
(
)
-
>
Self
{
SystemTime
:
:
now
(
)
.
into
(
)
}
#
[
cfg
(
feature
=
"
local
-
offset
"
)
]
#
[
cfg_attr
(
__time_03_docs
doc
(
cfg
(
feature
=
"
local
-
offset
"
)
)
)
]
pub
fn
now_local
(
)
-
>
Result
<
Self
error
:
:
IndeterminateOffset
>
{
let
t
=
Self
:
:
now_utc
(
)
;
Ok
(
t
.
to_offset
(
UtcOffset
:
:
local_offset_at
(
t
)
?
)
)
}
pub
const
fn
to_offset
(
self
offset
:
UtcOffset
)
-
>
Self
{
Self
{
utc_datetime
:
self
.
utc_datetime
offset
}
}
pub
const
fn
from_unix_timestamp
(
timestamp
:
i64
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
#
[
allow
(
clippy
:
:
missing_docs_in_private_items
)
]
const
MIN_TIMESTAMP
:
i64
=
Date
:
:
MIN
.
midnight
(
)
.
assume_utc
(
)
.
unix_timestamp
(
)
;
#
[
allow
(
clippy
:
:
missing_docs_in_private_items
)
]
const
MAX_TIMESTAMP
:
i64
=
Date
:
:
MAX
.
with_time
(
Time
:
:
__from_hms_nanos_unchecked
(
23
59
59
999_999_999
)
)
.
assume_utc
(
)
.
unix_timestamp
(
)
;
ensure_value_in_range
!
(
timestamp
in
MIN_TIMESTAMP
=
>
MAX_TIMESTAMP
)
;
let
date
=
Date
:
:
from_julian_day_unchecked
(
UNIX_EPOCH_JULIAN_DAY
+
div_floor
!
(
timestamp
86_400
)
as
i32
)
;
let
seconds_within_day
=
timestamp
.
rem_euclid
(
86_400
)
;
let
time
=
Time
:
:
__from_hms_nanos_unchecked
(
(
seconds_within_day
/
3_600
)
as
_
(
(
seconds_within_day
%
3_600
)
/
60
)
as
_
(
seconds_within_day
%
60
)
as
_
0
)
;
Ok
(
PrimitiveDateTime
:
:
new
(
date
time
)
.
assume_utc
(
)
)
}
pub
const
fn
from_unix_timestamp_nanos
(
timestamp
:
i128
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
let
datetime
=
const_try
!
(
Self
:
:
from_unix_timestamp
(
div_floor
!
(
timestamp
1_000_000_000
)
as
i64
)
)
;
Ok
(
datetime
.
utc_datetime
.
replace_time
(
Time
:
:
__from_hms_nanos_unchecked
(
datetime
.
utc_datetime
.
hour
(
)
datetime
.
utc_datetime
.
minute
(
)
datetime
.
utc_datetime
.
second
(
)
timestamp
.
rem_euclid
(
1_000_000_000
)
as
u32
)
)
.
assume_utc
(
)
)
}
pub
const
fn
offset
(
self
)
-
>
UtcOffset
{
self
.
offset
}
pub
const
fn
unix_timestamp
(
self
)
-
>
i64
{
let
days
=
(
self
.
utc_datetime
.
to_julian_day
(
)
as
i64
-
UNIX_EPOCH_JULIAN_DAY
as
i64
)
*
86_400
;
let
hours
=
self
.
utc_datetime
.
hour
(
)
as
i64
*
3_600
;
let
minutes
=
self
.
utc_datetime
.
minute
(
)
as
i64
*
60
;
let
seconds
=
self
.
utc_datetime
.
second
(
)
as
i64
;
days
+
hours
+
minutes
+
seconds
}
pub
const
fn
unix_timestamp_nanos
(
self
)
-
>
i128
{
self
.
unix_timestamp
(
)
as
i128
*
1_000_000_000
+
self
.
utc_datetime
.
nanosecond
(
)
as
i128
}
pub
const
fn
date
(
self
)
-
>
Date
{
let
mut
second
=
self
.
utc_datetime
.
second
(
)
as
i8
+
self
.
offset
.
seconds_past_minute
(
)
;
let
mut
minute
=
self
.
utc_datetime
.
minute
(
)
as
i8
+
self
.
offset
.
minutes_past_hour
(
)
;
let
mut
hour
=
self
.
utc_datetime
.
hour
(
)
as
i8
+
self
.
offset
.
whole_hours
(
)
;
let
(
mut
year
mut
ordinal
)
=
self
.
utc_datetime
.
date
.
to_ordinal_date
(
)
;
cascade
!
(
second
in
0
.
.
60
=
>
minute
)
;
cascade
!
(
minute
in
0
.
.
60
=
>
hour
)
;
cascade
!
(
hour
in
0
.
.
24
=
>
ordinal
)
;
cascade
!
(
ordinal
=
>
year
)
;
Date
:
:
__from_ordinal_date_unchecked
(
year
ordinal
)
}
pub
const
fn
time
(
self
)
-
>
Time
{
let
mut
second
=
self
.
utc_datetime
.
second
(
)
as
i8
+
self
.
offset
.
seconds_past_minute
(
)
;
let
mut
minute
=
self
.
utc_datetime
.
minute
(
)
as
i8
+
self
.
offset
.
minutes_past_hour
(
)
;
let
mut
hour
=
self
.
utc_datetime
.
hour
(
)
as
i8
+
self
.
offset
.
whole_hours
(
)
;
cascade
!
(
second
in
0
.
.
60
=
>
minute
)
;
cascade
!
(
minute
in
0
.
.
60
=
>
hour
)
;
Time
:
:
__from_hms_nanos_unchecked
(
hour
.
rem_euclid
(
24
)
as
_
minute
as
_
second
as
_
self
.
utc_datetime
.
nanosecond
(
)
)
}
pub
const
fn
year
(
self
)
-
>
i32
{
let
mut
second
=
self
.
utc_datetime
.
second
(
)
as
i8
+
self
.
offset
.
seconds_past_minute
(
)
;
let
mut
minute
=
self
.
utc_datetime
.
minute
(
)
as
i8
+
self
.
offset
.
minutes_past_hour
(
)
;
let
mut
hour
=
self
.
utc_datetime
.
hour
(
)
as
i8
+
self
.
offset
.
whole_hours
(
)
;
let
(
mut
year
mut
ordinal
)
=
self
.
utc_datetime
.
date
.
to_ordinal_date
(
)
;
cascade
!
(
second
in
0
.
.
60
=
>
minute
)
;
cascade
!
(
minute
in
0
.
.
60
=
>
hour
)
;
cascade
!
(
hour
in
0
.
.
24
=
>
ordinal
)
;
cascade
!
(
ordinal
=
>
year
)
;
year
}
pub
const
fn
month
(
self
)
-
>
Month
{
self
.
date
(
)
.
month
(
)
}
pub
const
fn
day
(
self
)
-
>
u8
{
self
.
date
(
)
.
day
(
)
}
pub
const
fn
ordinal
(
self
)
-
>
u16
{
let
mut
second
=
self
.
utc_datetime
.
second
(
)
as
i8
+
self
.
offset
.
seconds_past_minute
(
)
;
let
mut
minute
=
self
.
utc_datetime
.
minute
(
)
as
i8
+
self
.
offset
.
minutes_past_hour
(
)
;
let
mut
hour
=
self
.
utc_datetime
.
hour
(
)
as
i8
+
self
.
offset
.
whole_hours
(
)
;
let
(
mut
year
mut
ordinal
)
=
self
.
utc_datetime
.
date
.
to_ordinal_date
(
)
;
cascade
!
(
second
in
0
.
.
60
=
>
minute
)
;
cascade
!
(
minute
in
0
.
.
60
=
>
hour
)
;
cascade
!
(
hour
in
0
.
.
24
=
>
ordinal
)
;
cascade
!
(
ordinal
=
>
year
)
;
ordinal
}
pub
const
fn
iso_week
(
self
)
-
>
u8
{
self
.
date
(
)
.
iso_week
(
)
}
pub
const
fn
sunday_based_week
(
self
)
-
>
u8
{
self
.
date
(
)
.
sunday_based_week
(
)
}
pub
const
fn
monday_based_week
(
self
)
-
>
u8
{
self
.
date
(
)
.
monday_based_week
(
)
}
pub
const
fn
to_calendar_date
(
self
)
-
>
(
i32
Month
u8
)
{
self
.
date
(
)
.
to_calendar_date
(
)
}
pub
const
fn
to_ordinal_date
(
self
)
-
>
(
i32
u16
)
{
self
.
date
(
)
.
to_ordinal_date
(
)
}
pub
const
fn
to_iso_week_date
(
self
)
-
>
(
i32
u8
Weekday
)
{
self
.
date
(
)
.
to_iso_week_date
(
)
}
pub
const
fn
weekday
(
self
)
-
>
Weekday
{
self
.
date
(
)
.
weekday
(
)
}
pub
const
fn
to_julian_day
(
self
)
-
>
i32
{
self
.
date
(
)
.
to_julian_day
(
)
}
pub
const
fn
to_hms
(
self
)
-
>
(
u8
u8
u8
)
{
self
.
time
(
)
.
as_hms
(
)
}
pub
const
fn
to_hms_milli
(
self
)
-
>
(
u8
u8
u8
u16
)
{
self
.
time
(
)
.
as_hms_milli
(
)
}
pub
const
fn
to_hms_micro
(
self
)
-
>
(
u8
u8
u8
u32
)
{
self
.
time
(
)
.
as_hms_micro
(
)
}
pub
const
fn
to_hms_nano
(
self
)
-
>
(
u8
u8
u8
u32
)
{
self
.
time
(
)
.
as_hms_nano
(
)
}
pub
const
fn
hour
(
self
)
-
>
u8
{
let
mut
second
=
self
.
utc_datetime
.
second
(
)
as
i8
+
self
.
offset
.
seconds_past_minute
(
)
;
let
mut
minute
=
self
.
utc_datetime
.
minute
(
)
as
i8
+
self
.
offset
.
minutes_past_hour
(
)
;
let
mut
hour
=
self
.
utc_datetime
.
hour
(
)
as
i8
+
self
.
offset
.
whole_hours
(
)
;
cascade
!
(
second
in
0
.
.
60
=
>
minute
)
;
cascade
!
(
minute
in
0
.
.
60
=
>
hour
)
;
hour
.
rem_euclid
(
24
)
as
_
}
pub
const
fn
minute
(
self
)
-
>
u8
{
let
mut
second
=
self
.
utc_datetime
.
second
(
)
as
i8
+
self
.
offset
.
seconds_past_minute
(
)
;
let
mut
minute
=
self
.
utc_datetime
.
minute
(
)
as
i8
+
self
.
offset
.
minutes_past_hour
(
)
;
cascade
!
(
second
in
0
.
.
60
=
>
minute
)
;
minute
.
rem_euclid
(
60
)
as
_
}
pub
const
fn
second
(
self
)
-
>
u8
{
let
second
=
self
.
utc_datetime
.
second
(
)
as
i8
+
self
.
offset
.
seconds_past_minute
(
)
;
second
.
rem_euclid
(
60
)
as
_
}
pub
const
fn
millisecond
(
self
)
-
>
u16
{
self
.
utc_datetime
.
millisecond
(
)
}
pub
const
fn
microsecond
(
self
)
-
>
u32
{
self
.
utc_datetime
.
microsecond
(
)
}
pub
const
fn
nanosecond
(
self
)
-
>
u32
{
self
.
utc_datetime
.
nanosecond
(
)
}
pub
const
fn
checked_add
(
self
duration
:
Duration
)
-
>
Option
<
Self
>
{
let
offset_datetime
=
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
;
Some
(
const_try_opt
!
(
offset_datetime
.
checked_add
(
duration
)
)
.
assume_offset
(
self
.
offset
)
)
}
pub
const
fn
checked_sub
(
self
duration
:
Duration
)
-
>
Option
<
Self
>
{
let
offset_datetime
=
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
;
Some
(
const_try_opt
!
(
offset_datetime
.
checked_sub
(
duration
)
)
.
assume_offset
(
self
.
offset
)
)
}
pub
const
fn
saturating_add
(
self
duration
:
Duration
)
-
>
Self
{
if
let
Some
(
datetime
)
=
self
.
checked_add
(
duration
)
{
datetime
}
else
if
duration
.
is_negative
(
)
{
PrimitiveDateTime
:
:
MIN
.
assume_utc
(
)
.
replace_offset
(
self
.
offset
)
}
else
{
PrimitiveDateTime
:
:
MAX
.
assume_utc
(
)
.
replace_offset
(
self
.
offset
)
}
}
pub
const
fn
saturating_sub
(
self
duration
:
Duration
)
-
>
Self
{
if
let
Some
(
datetime
)
=
self
.
checked_sub
(
duration
)
{
datetime
}
else
if
duration
.
is_negative
(
)
{
PrimitiveDateTime
:
:
MAX
.
assume_utc
(
)
.
replace_offset
(
self
.
offset
)
}
else
{
PrimitiveDateTime
:
:
MIN
.
assume_utc
(
)
.
replace_offset
(
self
.
offset
)
}
}
}
impl
OffsetDateTime
{
#
[
must_use
=
"
This
method
does
not
mutate
the
original
OffsetDateTime
.
"
]
pub
const
fn
replace_time
(
self
time
:
Time
)
-
>
Self
{
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
.
replace_time
(
time
)
.
assume_offset
(
self
.
offset
)
}
#
[
must_use
=
"
This
method
does
not
mutate
the
original
OffsetDateTime
.
"
]
pub
const
fn
replace_date
(
self
date
:
Date
)
-
>
Self
{
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
.
replace_date
(
date
)
.
assume_offset
(
self
.
offset
)
}
#
[
must_use
=
"
This
method
does
not
mutate
the
original
OffsetDateTime
.
"
]
pub
const
fn
replace_date_time
(
self
date_time
:
PrimitiveDateTime
)
-
>
Self
{
date_time
.
assume_offset
(
self
.
offset
)
}
#
[
must_use
=
"
This
method
does
not
mutate
the
original
OffsetDateTime
.
"
]
pub
const
fn
replace_offset
(
self
offset
:
UtcOffset
)
-
>
Self
{
self
.
utc_datetime
.
assume_offset
(
offset
)
}
pub
const
fn
replace_year
(
self
year
:
i32
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
const_try
!
(
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
.
replace_year
(
year
)
)
.
assume_offset
(
self
.
offset
)
)
}
pub
const
fn
replace_month
(
self
month
:
Month
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
const_try
!
(
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
.
replace_month
(
month
)
)
.
assume_offset
(
self
.
offset
)
)
}
pub
const
fn
replace_day
(
self
day
:
u8
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
const_try
!
(
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
.
replace_day
(
day
)
)
.
assume_offset
(
self
.
offset
)
)
}
pub
const
fn
replace_hour
(
self
hour
:
u8
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
const_try
!
(
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
.
replace_hour
(
hour
)
)
.
assume_offset
(
self
.
offset
)
)
}
pub
const
fn
replace_minute
(
self
minute
:
u8
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
const_try
!
(
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
.
replace_minute
(
minute
)
)
.
assume_offset
(
self
.
offset
)
)
}
pub
const
fn
replace_second
(
self
second
:
u8
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
const_try
!
(
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
.
replace_second
(
second
)
)
.
assume_offset
(
self
.
offset
)
)
}
pub
const
fn
replace_millisecond
(
self
millisecond
:
u16
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
const_try
!
(
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
.
replace_millisecond
(
millisecond
)
)
.
assume_offset
(
self
.
offset
)
)
}
pub
const
fn
replace_microsecond
(
self
microsecond
:
u32
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
const_try
!
(
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
.
replace_microsecond
(
microsecond
)
)
.
assume_offset
(
self
.
offset
)
)
}
pub
const
fn
replace_nanosecond
(
self
nanosecond
:
u32
)
-
>
Result
<
Self
error
:
:
ComponentRange
>
{
Ok
(
const_try
!
(
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
.
replace_nanosecond
(
nanosecond
)
)
.
assume_offset
(
self
.
offset
)
)
}
}
#
[
cfg
(
feature
=
"
formatting
"
)
]
impl
OffsetDateTime
{
pub
fn
format_into
(
self
output
:
&
mut
impl
io
:
:
Write
format
:
&
(
impl
Formattable
+
?
Sized
)
)
-
>
Result
<
usize
error
:
:
Format
>
{
let
local
=
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
;
format
.
format_into
(
output
Some
(
local
.
date
)
Some
(
local
.
time
)
Some
(
self
.
offset
)
)
}
pub
fn
format
(
self
format
:
&
(
impl
Formattable
+
?
Sized
)
)
-
>
Result
<
String
error
:
:
Format
>
{
let
local
=
self
.
utc_datetime
.
utc_to_offset
(
self
.
offset
)
;
format
.
format
(
Some
(
local
.
date
)
Some
(
local
.
time
)
Some
(
self
.
offset
)
)
}
}
#
[
cfg
(
feature
=
"
parsing
"
)
]
impl
OffsetDateTime
{
pub
fn
parse
(
input
:
&
str
description
:
&
(
impl
Parsable
+
?
Sized
)
)
-
>
Result
<
Self
error
:
:
Parse
>
{
description
.
parse_offset_date_time
(
input
.
as_bytes
(
)
)
}
pub
(
crate
)
const
fn
is_valid_leap_second_stand_in
(
self
)
-
>
bool
{
let
udt
=
self
.
utc_datetime
;
udt
.
hour
(
)
=
=
23
&
&
udt
.
minute
(
)
=
=
59
&
&
udt
.
second
(
)
=
=
59
&
&
udt
.
nanosecond
(
)
=
=
999_999_999
&
&
udt
.
day
(
)
=
=
util
:
:
days_in_year_month
(
udt
.
year
(
)
udt
.
month
(
)
)
}
}
impl
fmt
:
:
Display
for
OffsetDateTime
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
{
}
{
}
{
}
"
self
.
date
(
)
self
.
time
(
)
self
.
offset
)
}
}
impl
PartialEq
for
OffsetDateTime
{
fn
eq
(
&
self
rhs
:
&
Self
)
-
>
bool
{
self
.
utc_datetime
.
eq
(
&
rhs
.
utc_datetime
)
}
}
impl
PartialOrd
for
OffsetDateTime
{
fn
partial_cmp
(
&
self
rhs
:
&
Self
)
-
>
Option
<
Ordering
>
{
Some
(
self
.
cmp
(
rhs
)
)
}
}
impl
Ord
for
OffsetDateTime
{
fn
cmp
(
&
self
rhs
:
&
Self
)
-
>
Ordering
{
self
.
utc_datetime
.
cmp
(
&
rhs
.
utc_datetime
)
}
}
impl
Hash
for
OffsetDateTime
{
fn
hash
<
H
:
Hasher
>
(
&
self
hasher
:
&
mut
H
)
{
hasher
.
write
(
b
"
OffsetDateTime
"
)
;
self
.
utc_datetime
.
hash
(
hasher
)
;
}
}
impl
<
T
>
Add
<
T
>
for
OffsetDateTime
where
PrimitiveDateTime
:
Add
<
T
Output
=
PrimitiveDateTime
>
{
type
Output
=
Self
;
fn
add
(
self
rhs
:
T
)
-
>
Self
:
:
Output
{
(
self
.
utc_datetime
+
rhs
)
.
assume_utc
(
)
.
to_offset
(
self
.
offset
)
}
}
impl_add_assign
!
(
OffsetDateTime
:
Duration
StdDuration
)
;
impl
<
T
>
Sub
<
T
>
for
OffsetDateTime
where
PrimitiveDateTime
:
Sub
<
T
Output
=
PrimitiveDateTime
>
{
type
Output
=
Self
;
fn
sub
(
self
rhs
:
T
)
-
>
Self
:
:
Output
{
(
self
.
utc_datetime
-
rhs
)
.
assume_utc
(
)
.
to_offset
(
self
.
offset
)
}
}
impl_sub_assign
!
(
OffsetDateTime
:
Duration
StdDuration
)
;
impl
Sub
for
OffsetDateTime
{
type
Output
=
Duration
;
fn
sub
(
self
rhs
:
Self
)
-
>
Self
:
:
Output
{
self
.
utc_datetime
-
rhs
.
utc_datetime
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
Add
<
Duration
>
for
SystemTime
{
type
Output
=
Self
;
fn
add
(
self
duration
:
Duration
)
-
>
Self
:
:
Output
{
if
duration
.
is_zero
(
)
{
self
}
else
if
duration
.
is_positive
(
)
{
self
+
duration
.
abs_std
(
)
}
else
{
debug_assert
!
(
duration
.
is_negative
(
)
)
;
self
-
duration
.
abs_std
(
)
}
}
}
impl_add_assign
!
(
SystemTime
:
#
[
cfg
(
feature
=
"
std
"
)
]
Duration
)
;
#
[
cfg
(
feature
=
"
std
"
)
]
impl
Sub
<
Duration
>
for
SystemTime
{
type
Output
=
Self
;
fn
sub
(
self
duration
:
Duration
)
-
>
Self
:
:
Output
{
(
OffsetDateTime
:
:
from
(
self
)
-
duration
)
.
into
(
)
}
}
impl_sub_assign
!
(
SystemTime
:
#
[
cfg
(
feature
=
"
std
"
)
]
Duration
)
;
#
[
cfg
(
feature
=
"
std
"
)
]
impl
Sub
<
SystemTime
>
for
OffsetDateTime
{
type
Output
=
Duration
;
fn
sub
(
self
rhs
:
SystemTime
)
-
>
Self
:
:
Output
{
self
-
Self
:
:
from
(
rhs
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
Sub
<
OffsetDateTime
>
for
SystemTime
{
type
Output
=
Duration
;
fn
sub
(
self
rhs
:
OffsetDateTime
)
-
>
Self
:
:
Output
{
OffsetDateTime
:
:
from
(
self
)
-
rhs
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
PartialEq
<
SystemTime
>
for
OffsetDateTime
{
fn
eq
(
&
self
rhs
:
&
SystemTime
)
-
>
bool
{
self
=
=
&
Self
:
:
from
(
*
rhs
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
PartialEq
<
OffsetDateTime
>
for
SystemTime
{
fn
eq
(
&
self
rhs
:
&
OffsetDateTime
)
-
>
bool
{
&
OffsetDateTime
:
:
from
(
*
self
)
=
=
rhs
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
PartialOrd
<
SystemTime
>
for
OffsetDateTime
{
fn
partial_cmp
(
&
self
other
:
&
SystemTime
)
-
>
Option
<
Ordering
>
{
self
.
partial_cmp
(
&
Self
:
:
from
(
*
other
)
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
PartialOrd
<
OffsetDateTime
>
for
SystemTime
{
fn
partial_cmp
(
&
self
other
:
&
OffsetDateTime
)
-
>
Option
<
Ordering
>
{
OffsetDateTime
:
:
from
(
*
self
)
.
partial_cmp
(
other
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
From
<
SystemTime
>
for
OffsetDateTime
{
fn
from
(
system_time
:
SystemTime
)
-
>
Self
{
match
system_time
.
duration_since
(
SystemTime
:
:
UNIX_EPOCH
)
{
Ok
(
duration
)
=
>
Self
:
:
UNIX_EPOCH
+
duration
Err
(
err
)
=
>
Self
:
:
UNIX_EPOCH
-
err
.
duration
(
)
}
}
}
#
[
allow
(
clippy
:
:
fallible_impl_from
)
]
#
[
cfg
(
feature
=
"
std
"
)
]
impl
From
<
OffsetDateTime
>
for
SystemTime
{
fn
from
(
datetime
:
OffsetDateTime
)
-
>
Self
{
let
duration
=
datetime
-
OffsetDateTime
:
:
UNIX_EPOCH
;
if
duration
.
is_zero
(
)
{
Self
:
:
UNIX_EPOCH
}
else
if
duration
.
is_positive
(
)
{
Self
:
:
UNIX_EPOCH
+
duration
.
abs_std
(
)
}
else
{
debug_assert
!
(
duration
.
is_negative
(
)
)
;
Self
:
:
UNIX_EPOCH
-
duration
.
abs_std
(
)
}
}
}
