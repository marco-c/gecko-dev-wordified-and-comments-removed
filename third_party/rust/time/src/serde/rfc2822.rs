#
[
cfg
(
feature
=
"
parsing
"
)
]
use
core
:
:
marker
:
:
PhantomData
;
#
[
cfg
(
feature
=
"
formatting
"
)
]
use
serde
:
:
ser
:
:
Error
as
_
;
#
[
cfg
(
feature
=
"
parsing
"
)
]
use
serde
:
:
Deserializer
;
#
[
cfg
(
feature
=
"
formatting
"
)
]
use
serde
:
:
{
Serialize
Serializer
}
;
#
[
cfg
(
feature
=
"
parsing
"
)
]
use
super
:
:
Visitor
;
use
crate
:
:
format_description
:
:
well_known
:
:
Rfc2822
;
use
crate
:
:
OffsetDateTime
;
#
[
cfg
(
feature
=
"
formatting
"
)
]
pub
fn
serialize
<
S
:
Serializer
>
(
datetime
:
&
OffsetDateTime
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
{
datetime
.
format
(
&
Rfc2822
)
.
map_err
(
S
:
:
Error
:
:
custom
)
?
.
serialize
(
serializer
)
}
#
[
cfg
(
feature
=
"
parsing
"
)
]
pub
fn
deserialize
<
'
a
D
:
Deserializer
<
'
a
>
>
(
deserializer
:
D
)
-
>
Result
<
OffsetDateTime
D
:
:
Error
>
{
deserializer
.
deserialize_str
(
Visitor
:
:
<
Rfc2822
>
(
PhantomData
)
)
}
pub
mod
option
{
#
[
allow
(
clippy
:
:
wildcard_imports
)
]
use
super
:
:
*
;
#
[
cfg
(
feature
=
"
formatting
"
)
]
pub
fn
serialize
<
S
:
Serializer
>
(
option
:
&
Option
<
OffsetDateTime
>
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
{
option
.
map
(
|
odt
|
odt
.
format
(
&
Rfc2822
)
)
.
transpose
(
)
.
map_err
(
S
:
:
Error
:
:
custom
)
?
.
serialize
(
serializer
)
}
#
[
cfg
(
feature
=
"
parsing
"
)
]
pub
fn
deserialize
<
'
a
D
:
Deserializer
<
'
a
>
>
(
deserializer
:
D
)
-
>
Result
<
Option
<
OffsetDateTime
>
D
:
:
Error
>
{
deserializer
.
deserialize_option
(
Visitor
:
:
<
Option
<
Rfc2822
>
>
(
PhantomData
)
)
}
}
