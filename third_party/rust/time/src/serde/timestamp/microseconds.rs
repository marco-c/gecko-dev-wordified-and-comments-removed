use
serde
:
:
{
de
Deserialize
Deserializer
Serialize
Serializer
}
;
use
crate
:
:
OffsetDateTime
;
pub
fn
serialize
<
S
:
Serializer
>
(
datetime
:
&
OffsetDateTime
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
{
let
timestamp
=
datetime
.
unix_timestamp_nanos
(
)
/
1_000
;
timestamp
.
serialize
(
serializer
)
}
pub
fn
deserialize
<
'
a
D
:
Deserializer
<
'
a
>
>
(
deserializer
:
D
)
-
>
Result
<
OffsetDateTime
D
:
:
Error
>
{
let
value
:
i128
=
<
_
>
:
:
deserialize
(
deserializer
)
?
;
OffsetDateTime
:
:
from_unix_timestamp_nanos
(
value
*
1_000
)
.
map_err
(
|
err
|
de
:
:
Error
:
:
invalid_value
(
de
:
:
Unexpected
:
:
Signed
(
err
.
value
)
&
err
)
)
}
pub
mod
option
{
#
[
allow
(
clippy
:
:
wildcard_imports
)
]
use
super
:
:
*
;
pub
fn
serialize
<
S
:
Serializer
>
(
option
:
&
Option
<
OffsetDateTime
>
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
{
option
.
map
(
|
timestamp
|
timestamp
.
unix_timestamp_nanos
(
)
/
1_000
)
.
serialize
(
serializer
)
}
pub
fn
deserialize
<
'
a
D
:
Deserializer
<
'
a
>
>
(
deserializer
:
D
)
-
>
Result
<
Option
<
OffsetDateTime
>
D
:
:
Error
>
{
Option
:
:
deserialize
(
deserializer
)
?
.
map
(
|
value
:
i128
|
OffsetDateTime
:
:
from_unix_timestamp_nanos
(
value
*
1_000
)
)
.
transpose
(
)
.
map_err
(
|
err
|
de
:
:
Error
:
:
invalid_value
(
de
:
:
Unexpected
:
:
Signed
(
err
.
value
)
&
err
)
)
}
}
