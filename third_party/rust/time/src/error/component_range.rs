use
core
:
:
{
fmt
hash
}
;
use
crate
:
:
error
;
#
[
derive
(
Debug
Clone
Copy
Eq
)
]
pub
struct
ComponentRange
{
pub
(
crate
)
name
:
&
'
static
str
pub
(
crate
)
minimum
:
i64
pub
(
crate
)
maximum
:
i64
pub
(
crate
)
value
:
i64
pub
(
crate
)
conditional_message
:
Option
<
&
'
static
str
>
}
impl
ComponentRange
{
pub
const
fn
name
(
self
)
-
>
&
'
static
str
{
self
.
name
}
pub
const
fn
is_conditional
(
self
)
-
>
bool
{
self
.
conditional_message
.
is_some
(
)
}
}
impl
PartialEq
for
ComponentRange
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
self
.
name
=
=
other
.
name
&
&
self
.
minimum
=
=
other
.
minimum
&
&
self
.
maximum
=
=
other
.
maximum
&
&
self
.
value
=
=
other
.
value
&
&
self
.
conditional_message
.
is_some
(
)
=
=
other
.
conditional_message
.
is_some
(
)
}
}
impl
hash
:
:
Hash
for
ComponentRange
{
fn
hash
<
H
:
hash
:
:
Hasher
>
(
&
self
state
:
&
mut
H
)
{
self
.
name
.
hash
(
state
)
;
self
.
minimum
.
hash
(
state
)
;
self
.
maximum
.
hash
(
state
)
;
self
.
value
.
hash
(
state
)
;
self
.
conditional_message
.
is_some
(
)
.
hash
(
state
)
;
}
}
impl
fmt
:
:
Display
for
ComponentRange
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
{
}
must
be
in
the
range
{
}
.
.
=
{
}
"
self
.
name
self
.
minimum
self
.
maximum
)
?
;
if
let
Some
(
message
)
=
self
.
conditional_message
{
write
!
(
f
"
{
message
}
"
)
?
;
}
Ok
(
(
)
)
}
}
impl
From
<
ComponentRange
>
for
crate
:
:
Error
{
fn
from
(
original
:
ComponentRange
)
-
>
Self
{
Self
:
:
ComponentRange
(
original
)
}
}
impl
TryFrom
<
crate
:
:
Error
>
for
ComponentRange
{
type
Error
=
error
:
:
DifferentVariant
;
fn
try_from
(
err
:
crate
:
:
Error
)
-
>
Result
<
Self
Self
:
:
Error
>
{
match
err
{
crate
:
:
Error
:
:
ComponentRange
(
err
)
=
>
Ok
(
err
)
_
=
>
Err
(
error
:
:
DifferentVariant
)
}
}
}
#
[
cfg
(
feature
=
"
serde
"
)
]
impl
serde
:
:
de
:
:
Expected
for
ComponentRange
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
a
value
in
the
range
{
}
.
.
=
{
}
"
self
.
minimum
self
.
maximum
)
}
}
#
[
cfg
(
feature
=
"
serde
"
)
]
impl
ComponentRange
{
pub
(
crate
)
fn
into_de_error
<
E
:
serde
:
:
de
:
:
Error
>
(
self
)
-
>
E
{
E
:
:
invalid_value
(
serde
:
:
de
:
:
Unexpected
:
:
Signed
(
self
.
value
)
&
self
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
std
:
:
error
:
:
Error
for
ComponentRange
{
}
