mod
adt_hack
;
use
core
:
:
num
:
:
NonZeroU8
;
#
[
doc
(
hidden
no_inline
)
]
pub
use
self
:
:
adt_hack
:
:
DoNotRelyOnWhatThisIs
;
pub
use
self
:
:
adt_hack
:
:
EncodedConfig
;
#
[
cfg_attr
(
feature
=
"
formatting
"
doc
=
"
rust
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
formatting
"
)
doc
=
"
rust
ignore
"
)
]
#
[
derive
(
Clone
Copy
PartialEq
Eq
)
]
pub
struct
Iso8601
<
const
CONFIG
:
EncodedConfig
=
{
Config
:
:
DEFAULT
.
encode
(
)
}
>
;
impl
<
const
CONFIG
:
EncodedConfig
>
core
:
:
fmt
:
:
Debug
for
Iso8601
<
CONFIG
>
{
fn
fmt
(
&
self
f
:
&
mut
core
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
core
:
:
fmt
:
:
Result
{
f
.
debug_struct
(
"
Iso8601
"
)
.
field
(
"
config
"
&
Config
:
:
decode
(
CONFIG
)
)
.
finish
(
)
}
}
macro_rules
!
define_assoc_consts
{
(
(
(
#
[
doc
:
meta
]
)
*
vis
:
vis
const
const_name
:
ident
=
format
:
expr
;
)
*
)
=
>
{
(
const
const_name
:
EncodedConfig
=
format
.
encode
(
)
;
impl
Iso8601
<
const_name
>
{
(
#
[
doc
]
)
*
vis
const
const_name
:
Self
=
Self
;
}
)
*
}
;
}
define_assoc_consts
!
{
/
/
/
An
[
Iso8601
]
with
the
default
configuration
.
/
/
/
/
/
/
The
following
is
the
default
behavior
:
/
/
/
/
/
/
-
The
configuration
can
be
used
for
both
formatting
and
parsing
.
/
/
/
-
The
date
time
and
UTC
offset
are
all
formatted
.
/
/
/
-
Separators
(
such
as
-
and
:
)
are
included
.
/
/
/
-
The
year
contains
four
digits
such
that
the
year
must
be
between
0
and
9999
.
/
/
/
-
The
date
uses
the
calendar
format
.
/
/
/
-
The
time
has
precision
to
the
second
and
nine
decimal
digits
.
/
/
/
-
The
UTC
offset
has
precision
to
the
minute
.
/
/
/
/
/
/
If
you
need
different
behavior
use
another
associated
constant
.
For
full
customization
use
/
/
/
[
Config
:
:
DEFAULT
]
and
[
Config
]
'
s
methods
to
create
a
custom
configuration
.
pub
const
DEFAULT
=
Config
:
:
DEFAULT
;
/
/
/
An
[
Iso8601
]
that
can
only
be
used
for
parsing
.
Using
this
to
format
a
value
is
/
/
/
unspecified
behavior
.
pub
const
PARSING
=
Config
:
:
PARSING
;
/
/
/
An
[
Iso8601
]
that
handles
only
the
date
but
is
otherwise
the
same
as
[
Config
:
:
DEFAULT
]
.
pub
const
DATE
=
Config
:
:
DEFAULT
.
set_formatted_components
(
FormattedComponents
:
:
Date
)
;
/
/
/
An
[
Iso8601
]
that
handles
only
the
time
but
is
otherwise
the
same
as
[
Config
:
:
DEFAULT
]
.
pub
const
TIME
=
Config
:
:
DEFAULT
.
set_formatted_components
(
FormattedComponents
:
:
Time
)
;
/
/
/
An
[
Iso8601
]
that
handles
only
the
UTC
offset
but
is
otherwise
the
same
as
/
/
/
[
Config
:
:
DEFAULT
]
.
pub
const
OFFSET
=
Config
:
:
DEFAULT
.
set_formatted_components
(
FormattedComponents
:
:
Offset
)
;
/
/
/
An
[
Iso8601
]
that
handles
the
date
and
time
but
is
otherwise
the
same
as
/
/
/
[
Config
:
:
DEFAULT
]
.
pub
const
DATE_TIME
=
Config
:
:
DEFAULT
.
set_formatted_components
(
FormattedComponents
:
:
DateTime
)
;
/
/
/
An
[
Iso8601
]
that
handles
the
date
time
and
UTC
offset
.
This
is
the
same
as
/
/
/
[
Config
:
:
DEFAULT
]
.
pub
const
DATE_TIME_OFFSET
=
Config
:
:
DEFAULT
;
/
/
/
An
[
Iso8601
]
that
handles
the
time
and
UTC
offset
but
is
otherwise
the
same
as
/
/
/
[
Config
:
:
DEFAULT
]
.
pub
const
TIME_OFFSET
=
Config
:
:
DEFAULT
.
set_formatted_components
(
FormattedComponents
:
:
TimeOffset
)
;
}
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
enum
FormattedComponents
{
None
Date
Time
Offset
DateTime
DateTimeOffset
TimeOffset
}
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
enum
DateKind
{
Calendar
Week
Ordinal
}
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
enum
TimePrecision
{
Hour
{
#
[
allow
(
missing_docs
)
]
decimal_digits
:
Option
<
NonZeroU8
>
}
Minute
{
#
[
allow
(
missing_docs
)
]
decimal_digits
:
Option
<
NonZeroU8
>
}
Second
{
#
[
allow
(
missing_docs
)
]
decimal_digits
:
Option
<
NonZeroU8
>
}
}
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
enum
OffsetPrecision
{
Hour
Minute
}
#
[
allow
(
missing_copy_implementations
)
]
#
[
doc
(
alias
=
"
EncodedConfig
"
)
]
#
[
derive
(
Debug
)
]
pub
struct
Config
{
pub
(
crate
)
formatted_components
:
FormattedComponents
pub
(
crate
)
use_separators
:
bool
pub
(
crate
)
year_is_six_digits
:
bool
pub
(
crate
)
date_kind
:
DateKind
pub
(
crate
)
time_precision
:
TimePrecision
pub
(
crate
)
offset_precision
:
OffsetPrecision
}
impl
Config
{
pub
const
DEFAULT
:
Self
=
Self
{
formatted_components
:
FormattedComponents
:
:
DateTimeOffset
use_separators
:
true
year_is_six_digits
:
false
date_kind
:
DateKind
:
:
Calendar
time_precision
:
TimePrecision
:
:
Second
{
decimal_digits
:
NonZeroU8
:
:
new
(
9
)
}
offset_precision
:
OffsetPrecision
:
:
Minute
}
;
const
PARSING
:
Self
=
Self
{
formatted_components
:
FormattedComponents
:
:
None
use_separators
:
false
year_is_six_digits
:
false
date_kind
:
DateKind
:
:
Calendar
time_precision
:
TimePrecision
:
:
Hour
{
decimal_digits
:
None
}
offset_precision
:
OffsetPrecision
:
:
Hour
}
;
pub
const
fn
set_formatted_components
(
self
formatted_components
:
FormattedComponents
)
-
>
Self
{
Self
{
formatted_components
.
.
self
}
}
pub
const
fn
set_use_separators
(
self
use_separators
:
bool
)
-
>
Self
{
Self
{
use_separators
.
.
self
}
}
pub
const
fn
set_year_is_six_digits
(
self
year_is_six_digits
:
bool
)
-
>
Self
{
Self
{
year_is_six_digits
.
.
self
}
}
pub
const
fn
set_date_kind
(
self
date_kind
:
DateKind
)
-
>
Self
{
Self
{
date_kind
.
.
self
}
}
pub
const
fn
set_time_precision
(
self
time_precision
:
TimePrecision
)
-
>
Self
{
Self
{
time_precision
.
.
self
}
}
pub
const
fn
set_offset_precision
(
self
offset_precision
:
OffsetPrecision
)
-
>
Self
{
Self
{
offset_precision
.
.
self
}
}
}
