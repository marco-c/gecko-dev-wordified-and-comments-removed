pub
use
time_core
:
:
util
:
:
{
days_in_year
is_leap_year
weeks_in_year
}
;
use
crate
:
:
Month
;
pub
(
crate
)
enum
DateAdjustment
{
Previous
Next
None
}
pub
const
fn
days_in_year_month
(
year
:
i32
month
:
Month
)
-
>
u8
{
use
Month
:
:
*
;
match
month
{
January
|
March
|
May
|
July
|
August
|
October
|
December
=
>
31
April
|
June
|
September
|
November
=
>
30
February
if
is_leap_year
(
year
)
=
>
29
February
=
>
28
}
}
#
[
cfg
(
feature
=
"
local
-
offset
"
)
]
pub
mod
local_offset
{
use
core
:
:
sync
:
:
atomic
:
:
{
AtomicBool
Ordering
}
;
static
LOCAL_OFFSET_IS_SOUND
:
AtomicBool
=
AtomicBool
:
:
new
(
true
)
;
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
enum
Soundness
{
Sound
Unsound
}
pub
unsafe
fn
set_soundness
(
soundness
:
Soundness
)
{
LOCAL_OFFSET_IS_SOUND
.
store
(
soundness
=
=
Soundness
:
:
Sound
Ordering
:
:
SeqCst
)
;
}
pub
fn
get_soundness
(
)
-
>
Soundness
{
match
LOCAL_OFFSET_IS_SOUND
.
load
(
Ordering
:
:
SeqCst
)
{
false
=
>
Soundness
:
:
Unsound
true
=
>
Soundness
:
:
Sound
}
}
}
