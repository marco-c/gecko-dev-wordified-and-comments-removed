use
std
:
:
env
;
use
std
:
:
fs
;
use
std
:
:
path
:
:
PathBuf
;
pub
fn
get_dbpath_for_term
(
term
:
&
str
)
-
>
Option
<
PathBuf
>
{
let
mut
dirs_to_search
=
Vec
:
:
new
(
)
;
let
first_char
=
match
term
.
chars
(
)
.
next
(
)
{
Some
(
c
)
=
>
c
None
=
>
return
None
}
;
match
env
:
:
var_os
(
"
TERMINFO
"
)
{
Some
(
dir
)
=
>
dirs_to_search
.
push
(
PathBuf
:
:
from
(
dir
)
)
None
=
>
{
if
let
Some
(
mut
homedir
)
=
env
:
:
home_dir
(
)
{
homedir
.
push
(
"
.
terminfo
"
)
;
dirs_to_search
.
push
(
homedir
)
}
match
env
:
:
var
(
"
TERMINFO_DIRS
"
)
{
Ok
(
dirs
)
=
>
{
for
i
in
dirs
.
split
(
'
:
'
)
{
if
i
=
=
"
"
{
dirs_to_search
.
push
(
PathBuf
:
:
from
(
"
/
usr
/
share
/
terminfo
"
)
)
;
}
else
{
dirs_to_search
.
push
(
PathBuf
:
:
from
(
i
)
)
;
}
}
}
Err
(
.
.
)
=
>
{
dirs_to_search
.
push
(
PathBuf
:
:
from
(
"
/
etc
/
terminfo
"
)
)
;
dirs_to_search
.
push
(
PathBuf
:
:
from
(
"
/
lib
/
terminfo
"
)
)
;
dirs_to_search
.
push
(
PathBuf
:
:
from
(
"
/
usr
/
share
/
terminfo
"
)
)
;
}
}
}
}
;
for
mut
p
in
dirs_to_search
{
if
fs
:
:
metadata
(
&
p
)
.
is_ok
(
)
{
p
.
push
(
&
first_char
.
to_string
(
)
)
;
p
.
push
(
&
term
)
;
if
fs
:
:
metadata
(
&
p
)
.
is_ok
(
)
{
return
Some
(
p
)
;
}
p
.
pop
(
)
;
p
.
pop
(
)
;
p
.
push
(
&
format
!
(
"
{
:
x
}
"
first_char
as
usize
)
)
;
p
.
push
(
term
)
;
if
fs
:
:
metadata
(
&
p
)
.
is_ok
(
)
{
return
Some
(
p
)
;
}
}
}
None
}
