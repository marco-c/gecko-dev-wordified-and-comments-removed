#
include
"
spirv_cross_util
.
hpp
"
#
include
"
spirv_common
.
hpp
"
using
namespace
spv
;
using
namespace
SPIRV_CROSS_NAMESPACE
;
namespace
spirv_cross_util
{
void
rename_interface_variable
(
Compiler
&
compiler
const
SmallVector
<
Resource
>
&
resources
uint32_t
location
const
std
:
:
string
&
name
)
{
for
(
auto
&
v
:
resources
)
{
if
(
!
compiler
.
has_decoration
(
v
.
id
spv
:
:
DecorationLocation
)
)
continue
;
auto
loc
=
compiler
.
get_decoration
(
v
.
id
spv
:
:
DecorationLocation
)
;
if
(
loc
!
=
location
)
continue
;
auto
&
type
=
compiler
.
get_type
(
v
.
base_type_id
)
;
if
(
type
.
basetype
=
=
SPIRType
:
:
Struct
)
{
compiler
.
set_name
(
v
.
base_type_id
join
(
"
SPIRV_Cross_Interface_Location
"
location
)
)
;
for
(
uint32_t
i
=
0
;
i
<
uint32_t
(
type
.
member_types
.
size
(
)
)
;
i
+
+
)
compiler
.
set_member_name
(
v
.
base_type_id
i
join
(
"
InterfaceMember
"
i
)
)
;
}
compiler
.
set_name
(
v
.
id
name
)
;
}
}
void
inherit_combined_sampler_bindings
(
Compiler
&
compiler
)
{
auto
&
samplers
=
compiler
.
get_combined_image_samplers
(
)
;
for
(
auto
&
s
:
samplers
)
{
if
(
compiler
.
has_decoration
(
s
.
image_id
spv
:
:
DecorationDescriptorSet
)
)
{
uint32_t
set
=
compiler
.
get_decoration
(
s
.
image_id
spv
:
:
DecorationDescriptorSet
)
;
compiler
.
set_decoration
(
s
.
combined_id
spv
:
:
DecorationDescriptorSet
set
)
;
}
if
(
compiler
.
has_decoration
(
s
.
image_id
spv
:
:
DecorationBinding
)
)
{
uint32_t
binding
=
compiler
.
get_decoration
(
s
.
image_id
spv
:
:
DecorationBinding
)
;
compiler
.
set_decoration
(
s
.
combined_id
spv
:
:
DecorationBinding
binding
)
;
}
}
}
}
