use
std
:
:
iter
:
:
Iterator
;
use
num_rational
:
:
Ratio
;
use
buffer
:
:
RgbaImage
;
use
image
:
:
ImageResult
;
pub
struct
Frames
<
'
a
>
{
iterator
:
Box
<
Iterator
<
Item
=
ImageResult
<
Frame
>
>
+
'
a
>
}
impl
<
'
a
>
Frames
<
'
a
>
{
pub
fn
new
(
iterator
:
Box
<
Iterator
<
Item
=
ImageResult
<
Frame
>
>
+
'
a
>
)
-
>
Self
{
Frames
{
iterator
}
}
pub
fn
collect_frames
(
self
)
-
>
ImageResult
<
Vec
<
Frame
>
>
{
self
.
collect
(
)
}
}
impl
<
'
a
>
Iterator
for
Frames
<
'
a
>
{
type
Item
=
ImageResult
<
Frame
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
ImageResult
<
Frame
>
>
{
self
.
iterator
.
next
(
)
}
}
#
[
derive
(
Clone
)
]
pub
struct
Frame
{
delay
:
Ratio
<
u16
>
left
:
u32
top
:
u32
buffer
:
RgbaImage
}
impl
Frame
{
pub
fn
new
(
buffer
:
RgbaImage
)
-
>
Frame
{
Frame
{
delay
:
Ratio
:
:
from_integer
(
0
)
left
:
0
top
:
0
buffer
}
}
pub
fn
from_parts
(
buffer
:
RgbaImage
left
:
u32
top
:
u32
delay
:
Ratio
<
u16
>
)
-
>
Frame
{
Frame
{
delay
left
top
buffer
}
}
pub
fn
delay
(
&
self
)
-
>
Ratio
<
u16
>
{
self
.
delay
}
pub
fn
buffer
(
&
self
)
-
>
&
RgbaImage
{
&
self
.
buffer
}
pub
fn
into_buffer
(
self
)
-
>
RgbaImage
{
self
.
buffer
}
pub
fn
left
(
&
self
)
-
>
u32
{
self
.
left
}
pub
fn
top
(
&
self
)
-
>
u32
{
self
.
top
}
}
