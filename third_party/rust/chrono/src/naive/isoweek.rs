use
core
:
:
fmt
;
use
super
:
:
internals
:
:
{
DateImpl
Of
YearFlags
}
;
#
[
derive
(
PartialEq
Eq
PartialOrd
Ord
Copy
Clone
)
]
pub
struct
IsoWeek
{
ywf
:
DateImpl
}
pub
fn
iso_week_from_yof
(
year
:
i32
of
:
Of
)
-
>
IsoWeek
{
let
(
rawweek
_
)
=
of
.
isoweekdate_raw
(
)
;
let
(
year
week
)
=
if
rawweek
<
1
{
let
prevlastweek
=
YearFlags
:
:
from_year
(
year
-
1
)
.
nisoweeks
(
)
;
(
year
-
1
prevlastweek
)
}
else
{
let
lastweek
=
of
.
flags
(
)
.
nisoweeks
(
)
;
if
rawweek
>
lastweek
{
(
year
+
1
1
)
}
else
{
(
year
rawweek
)
}
}
;
IsoWeek
{
ywf
:
(
year
<
<
10
)
|
(
week
<
<
4
)
as
DateImpl
|
DateImpl
:
:
from
(
of
.
flags
(
)
.
0
)
}
}
impl
IsoWeek
{
#
[
inline
]
pub
fn
year
(
&
self
)
-
>
i32
{
self
.
ywf
>
>
10
}
#
[
inline
]
pub
fn
week
(
&
self
)
-
>
u32
{
(
(
self
.
ywf
>
>
4
)
&
0x3f
)
as
u32
}
#
[
inline
]
pub
fn
week0
(
&
self
)
-
>
u32
{
(
(
self
.
ywf
>
>
4
)
&
0x3f
)
as
u32
-
1
}
}
impl
fmt
:
:
Debug
for
IsoWeek
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
let
year
=
self
.
year
(
)
;
let
week
=
self
.
week
(
)
;
if
0
<
=
year
&
&
year
<
=
9999
{
write
!
(
f
"
{
:
04
}
-
W
{
:
02
}
"
year
week
)
}
else
{
write
!
(
f
"
{
:
+
05
}
-
W
{
:
02
}
"
year
week
)
}
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
naive
:
:
{
internals
MIN_DATE
MAX_DATE
}
;
use
Datelike
;
#
[
test
]
fn
test_iso_week_extremes
(
)
{
let
minweek
=
MIN_DATE
.
iso_week
(
)
;
let
maxweek
=
MAX_DATE
.
iso_week
(
)
;
assert_eq
!
(
minweek
.
year
(
)
internals
:
:
MIN_YEAR
)
;
assert_eq
!
(
minweek
.
week
(
)
1
)
;
assert_eq
!
(
minweek
.
week0
(
)
0
)
;
assert_eq
!
(
format
!
(
"
{
:
?
}
"
minweek
)
MIN_DATE
.
format
(
"
%
G
-
W
%
V
"
)
.
to_string
(
)
)
;
assert_eq
!
(
maxweek
.
year
(
)
internals
:
:
MAX_YEAR
+
1
)
;
assert_eq
!
(
maxweek
.
week
(
)
1
)
;
assert_eq
!
(
maxweek
.
week0
(
)
0
)
;
assert_eq
!
(
format
!
(
"
{
:
?
}
"
maxweek
)
MAX_DATE
.
format
(
"
%
G
-
W
%
V
"
)
.
to_string
(
)
)
;
}
}
