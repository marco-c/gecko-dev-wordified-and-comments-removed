#
!
[
deny
(
missing_docs
)
]
#
!
[
allow
(
dead_code
)
]
#
!
[
warn
(
unreachable_pub
)
]
use
std
:
:
num
:
:
ParseIntError
;
use
std
:
:
str
:
:
Utf8Error
;
use
std
:
:
time
:
:
SystemTimeError
;
use
std
:
:
{
error
fmt
io
}
;
mod
timezone
;
pub
(
crate
)
use
timezone
:
:
TimeZone
;
mod
parser
;
mod
rule
;
#
[
derive
(
Debug
)
]
pub
(
crate
)
enum
Error
{
DateTime
(
&
'
static
str
)
FindLocalTimeType
(
&
'
static
str
)
LocalTimeType
(
&
'
static
str
)
InvalidSlice
(
&
'
static
str
)
InvalidTzFile
(
&
'
static
str
)
InvalidTzString
(
&
'
static
str
)
Io
(
io
:
:
Error
)
OutOfRange
(
&
'
static
str
)
ParseInt
(
ParseIntError
)
ProjectDateTime
(
&
'
static
str
)
SystemTime
(
SystemTimeError
)
TimeZone
(
&
'
static
str
)
TransitionRule
(
&
'
static
str
)
UnsupportedTzFile
(
&
'
static
str
)
UnsupportedTzString
(
&
'
static
str
)
Utf8
(
Utf8Error
)
}
impl
fmt
:
:
Display
for
Error
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
use
Error
:
:
*
;
match
self
{
DateTime
(
error
)
=
>
write
!
(
f
"
invalid
date
time
:
{
error
}
"
)
FindLocalTimeType
(
error
)
=
>
error
.
fmt
(
f
)
LocalTimeType
(
error
)
=
>
write
!
(
f
"
invalid
local
time
type
:
{
error
}
"
)
InvalidSlice
(
error
)
=
>
error
.
fmt
(
f
)
InvalidTzString
(
error
)
=
>
write
!
(
f
"
invalid
TZ
string
:
{
error
}
"
)
InvalidTzFile
(
error
)
=
>
error
.
fmt
(
f
)
Io
(
error
)
=
>
error
.
fmt
(
f
)
OutOfRange
(
error
)
=
>
error
.
fmt
(
f
)
ParseInt
(
error
)
=
>
error
.
fmt
(
f
)
ProjectDateTime
(
error
)
=
>
error
.
fmt
(
f
)
SystemTime
(
error
)
=
>
error
.
fmt
(
f
)
TransitionRule
(
error
)
=
>
write
!
(
f
"
invalid
transition
rule
:
{
error
}
"
)
TimeZone
(
error
)
=
>
write
!
(
f
"
invalid
time
zone
:
{
error
}
"
)
UnsupportedTzFile
(
error
)
=
>
error
.
fmt
(
f
)
UnsupportedTzString
(
error
)
=
>
write
!
(
f
"
unsupported
TZ
string
:
{
error
}
"
)
Utf8
(
error
)
=
>
error
.
fmt
(
f
)
}
}
}
impl
error
:
:
Error
for
Error
{
}
impl
From
<
io
:
:
Error
>
for
Error
{
fn
from
(
error
:
io
:
:
Error
)
-
>
Self
{
Error
:
:
Io
(
error
)
}
}
impl
From
<
ParseIntError
>
for
Error
{
fn
from
(
error
:
ParseIntError
)
-
>
Self
{
Error
:
:
ParseInt
(
error
)
}
}
impl
From
<
SystemTimeError
>
for
Error
{
fn
from
(
error
:
SystemTimeError
)
-
>
Self
{
Error
:
:
SystemTime
(
error
)
}
}
impl
From
<
Utf8Error
>
for
Error
{
fn
from
(
error
:
Utf8Error
)
-
>
Self
{
Error
:
:
Utf8
(
error
)
}
}
const
HOURS_PER_DAY
:
i64
=
24
;
const
SECONDS_PER_HOUR
:
i64
=
3600
;
const
SECONDS_PER_DAY
:
i64
=
SECONDS_PER_HOUR
*
HOURS_PER_DAY
;
const
DAYS_PER_WEEK
:
i64
=
7
;
const
DAY_IN_MONTHS_NORMAL_YEAR
:
[
i64
;
12
]
=
[
31
28
31
30
31
30
31
31
30
31
30
31
]
;
const
CUMUL_DAY_IN_MONTHS_NORMAL_YEAR
:
[
i64
;
12
]
=
[
0
31
59
90
120
151
181
212
243
273
304
334
]
;
