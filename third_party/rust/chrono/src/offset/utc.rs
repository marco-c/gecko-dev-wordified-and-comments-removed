use
core
:
:
fmt
;
#
[
cfg
(
all
(
feature
=
"
now
"
not
(
all
(
target_arch
=
"
wasm32
"
feature
=
"
wasmbind
"
not
(
any
(
target_os
=
"
emscripten
"
target_os
=
"
wasi
"
)
)
)
)
)
)
]
use
std
:
:
time
:
:
{
SystemTime
UNIX_EPOCH
}
;
#
[
cfg
(
any
(
feature
=
"
rkyv
"
feature
=
"
rkyv
-
16
"
feature
=
"
rkyv
-
32
"
feature
=
"
rkyv
-
64
"
)
)
]
use
rkyv
:
:
{
Archive
Deserialize
Serialize
}
;
use
super
:
:
{
FixedOffset
MappedLocalTime
Offset
TimeZone
}
;
use
crate
:
:
naive
:
:
{
NaiveDate
NaiveDateTime
}
;
#
[
cfg
(
feature
=
"
now
"
)
]
#
[
allow
(
deprecated
)
]
use
crate
:
:
{
Date
DateTime
}
;
#
[
derive
(
Copy
Clone
PartialEq
Eq
Hash
)
]
#
[
cfg_attr
(
any
(
feature
=
"
rkyv
"
feature
=
"
rkyv
-
16
"
feature
=
"
rkyv
-
32
"
feature
=
"
rkyv
-
64
"
)
derive
(
Archive
Deserialize
Serialize
)
archive
(
compare
(
PartialEq
)
)
archive_attr
(
derive
(
Clone
Copy
PartialEq
Eq
Debug
Hash
)
)
)
]
#
[
cfg_attr
(
feature
=
"
rkyv
-
validation
"
archive
(
check_bytes
)
)
]
#
[
cfg_attr
(
all
(
feature
=
"
arbitrary
"
feature
=
"
std
"
)
derive
(
arbitrary
:
:
Arbitrary
)
)
]
pub
struct
Utc
;
#
[
cfg
(
feature
=
"
now
"
)
]
impl
Utc
{
#
[
deprecated
(
since
=
"
0
.
4
.
23
"
note
=
"
use
Utc
:
:
now
(
)
instead
potentially
with
.
date_naive
(
)
"
)
]
#
[
allow
(
deprecated
)
]
#
[
must_use
]
pub
fn
today
(
)
-
>
Date
<
Utc
>
{
Utc
:
:
now
(
)
.
date
(
)
}
#
[
cfg
(
not
(
all
(
target_arch
=
"
wasm32
"
feature
=
"
wasmbind
"
not
(
any
(
target_os
=
"
emscripten
"
target_os
=
"
wasi
"
)
)
)
)
)
]
#
[
must_use
]
pub
fn
now
(
)
-
>
DateTime
<
Utc
>
{
let
now
=
SystemTime
:
:
now
(
)
.
duration_since
(
UNIX_EPOCH
)
.
expect
(
"
system
time
before
Unix
epoch
"
)
;
DateTime
:
:
from_timestamp
(
now
.
as_secs
(
)
as
i64
now
.
subsec_nanos
(
)
)
.
unwrap
(
)
}
#
[
cfg
(
all
(
target_arch
=
"
wasm32
"
feature
=
"
wasmbind
"
not
(
any
(
target_os
=
"
emscripten
"
target_os
=
"
wasi
"
)
)
)
)
]
#
[
must_use
]
pub
fn
now
(
)
-
>
DateTime
<
Utc
>
{
let
now
=
js_sys
:
:
Date
:
:
new_0
(
)
;
DateTime
:
:
<
Utc
>
:
:
from
(
now
)
}
}
impl
TimeZone
for
Utc
{
type
Offset
=
Utc
;
fn
from_offset
(
_state
:
&
Utc
)
-
>
Utc
{
Utc
}
fn
offset_from_local_date
(
&
self
_local
:
&
NaiveDate
)
-
>
MappedLocalTime
<
Utc
>
{
MappedLocalTime
:
:
Single
(
Utc
)
}
fn
offset_from_local_datetime
(
&
self
_local
:
&
NaiveDateTime
)
-
>
MappedLocalTime
<
Utc
>
{
MappedLocalTime
:
:
Single
(
Utc
)
}
fn
offset_from_utc_date
(
&
self
_utc
:
&
NaiveDate
)
-
>
Utc
{
Utc
}
fn
offset_from_utc_datetime
(
&
self
_utc
:
&
NaiveDateTime
)
-
>
Utc
{
Utc
}
}
impl
Offset
for
Utc
{
fn
fix
(
&
self
)
-
>
FixedOffset
{
FixedOffset
:
:
east_opt
(
0
)
.
unwrap
(
)
}
}
impl
fmt
:
:
Debug
for
Utc
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
Z
"
)
}
}
impl
fmt
:
:
Display
for
Utc
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
UTC
"
)
}
}
