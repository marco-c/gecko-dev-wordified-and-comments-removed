use
alloc
:
:
sync
:
:
Arc
;
pub
(
crate
)
fn
is_arc_unique
<
M
>
(
arc
:
&
mut
Arc
<
M
>
)
-
>
bool
{
let
strong_count
=
Arc
:
:
strong_count
(
&
*
arc
)
;
debug_assert_ne
!
(
strong_count
0
"
This
Arc
should
exist
"
)
;
debug_assert
!
(
strong_count
>
1
|
|
Arc
:
:
get_mut
(
arc
)
.
is_some
(
)
"
Weak
pointer
exists
"
)
;
strong_count
=
=
1
}
pub
(
crate
)
unsafe
fn
arc_unwrap
<
M
>
(
arc
:
Arc
<
M
>
)
-
>
M
{
use
core
:
:
{
mem
:
:
ManuallyDrop
ptr
:
:
read
}
;
let
raw
=
Arc
:
:
into_raw
(
arc
)
;
let
inner
=
read
(
raw
)
;
drop
(
Arc
:
:
from_raw
(
raw
as
*
const
ManuallyDrop
<
M
>
)
)
;
inner
}
pub
(
crate
)
unsafe
fn
try_arc_unwrap
<
M
>
(
mut
arc
:
Arc
<
M
>
)
-
>
Option
<
M
>
{
if
is_arc_unique
(
&
mut
arc
)
{
Some
(
arc_unwrap
(
arc
)
)
}
else
{
None
}
}
