use
std
:
:
cmp
:
:
Ordering
;
#
[
derive
(
Copy
Clone
Debug
)
]
pub
struct
MinScored
<
K
T
>
(
pub
K
pub
T
)
;
impl
<
K
:
PartialOrd
T
>
PartialEq
for
MinScored
<
K
T
>
{
#
[
inline
]
fn
eq
(
&
self
other
:
&
MinScored
<
K
T
>
)
-
>
bool
{
self
.
cmp
(
other
)
=
=
Ordering
:
:
Equal
}
}
impl
<
K
:
PartialOrd
T
>
Eq
for
MinScored
<
K
T
>
{
}
impl
<
K
:
PartialOrd
T
>
PartialOrd
for
MinScored
<
K
T
>
{
#
[
inline
]
fn
partial_cmp
(
&
self
other
:
&
MinScored
<
K
T
>
)
-
>
Option
<
Ordering
>
{
Some
(
self
.
cmp
(
other
)
)
}
}
impl
<
K
:
PartialOrd
T
>
Ord
for
MinScored
<
K
T
>
{
#
[
inline
]
fn
cmp
(
&
self
other
:
&
MinScored
<
K
T
>
)
-
>
Ordering
{
let
a
=
&
self
.
0
;
let
b
=
&
other
.
0
;
if
a
=
=
b
{
Ordering
:
:
Equal
}
else
if
a
<
b
{
Ordering
:
:
Greater
}
else
if
a
>
b
{
Ordering
:
:
Less
}
else
if
a
.
ne
(
a
)
&
&
b
.
ne
(
b
)
{
Ordering
:
:
Equal
}
else
if
a
.
ne
(
a
)
{
Ordering
:
:
Less
}
else
{
Ordering
:
:
Greater
}
}
}
