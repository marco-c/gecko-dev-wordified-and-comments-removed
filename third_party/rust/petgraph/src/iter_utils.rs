pub
trait
IterUtilsExt
:
Iterator
{
fn
find_map
<
F
R
>
(
&
mut
self
mut
f
:
F
)
-
>
Option
<
R
>
where
F
:
FnMut
(
Self
:
:
Item
)
-
>
Option
<
R
>
{
while
let
Some
(
elt
)
=
self
.
next
(
)
{
if
let
result
Some
(
_
)
=
f
(
elt
)
{
return
result
;
}
}
None
}
fn
rfind_map
<
F
R
>
(
&
mut
self
mut
f
:
F
)
-
>
Option
<
R
>
where
F
:
FnMut
(
Self
:
:
Item
)
-
>
Option
<
R
>
Self
:
DoubleEndedIterator
{
while
let
Some
(
elt
)
=
self
.
next_back
(
)
{
if
let
result
Some
(
_
)
=
f
(
elt
)
{
return
result
;
}
}
None
}
}
impl
<
I
>
IterUtilsExt
for
I
where
I
:
Iterator
{
}
