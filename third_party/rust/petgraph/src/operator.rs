use
super
:
:
graph
:
:
{
Graph
IndexType
}
;
use
super
:
:
EdgeType
;
use
crate
:
:
visit
:
:
IntoNodeReferences
;
pub
fn
complement
<
N
E
Ty
Ix
>
(
input
:
&
Graph
<
N
E
Ty
Ix
>
output
:
&
mut
Graph
<
N
E
Ty
Ix
>
weight
:
E
)
where
Ty
:
EdgeType
Ix
:
IndexType
E
:
Clone
N
:
Clone
{
for
(
_node
weight
)
in
input
.
node_references
(
)
{
output
.
add_node
(
weight
.
clone
(
)
)
;
}
for
x
in
input
.
node_indices
(
)
{
for
y
in
input
.
node_indices
(
)
{
if
x
!
=
y
&
&
!
input
.
contains_edge
(
x
y
)
{
output
.
add_edge
(
x
y
weight
.
clone
(
)
)
;
}
}
}
}
