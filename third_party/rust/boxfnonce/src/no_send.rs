use
traits
:
:
FnBox
;
pub
struct
BoxFnOnce
<
Arguments
Result
=
(
)
>
(
Box
<
FnBox
<
Arguments
Result
>
>
)
;
impl
<
Args
Result
>
BoxFnOnce
<
Args
Result
>
{
#
[
inline
]
pub
fn
call_tuple
(
self
args
:
Args
)
-
>
Result
{
self
.
0
.
call
(
args
)
}
#
[
inline
]
pub
fn
new
<
F
>
(
func
:
F
)
-
>
Self
where
Self
:
From
<
F
>
{
Self
:
:
from
(
func
)
}
}
build_n_args
!
(
BoxFnOnce
[
]
:
)
;
build_n_args
!
(
BoxFnOnce
[
]
:
a1
:
A1
)
;
build_n_args
!
(
BoxFnOnce
[
]
:
a1
:
A1
a2
:
A2
)
;
build_n_args
!
(
BoxFnOnce
[
]
:
a1
:
A1
a2
:
A2
a3
:
A3
)
;
build_n_args
!
(
BoxFnOnce
[
]
:
a1
:
A1
a2
:
A2
a3
:
A3
a4
:
A4
)
;
build_n_args
!
(
BoxFnOnce
[
]
:
a1
:
A1
a2
:
A2
a3
:
A3
a4
:
A4
a5
:
A5
)
;
build_n_args
!
(
BoxFnOnce
[
]
:
a1
:
A1
a2
:
A2
a3
:
A3
a4
:
A4
a5
:
A5
a6
:
A6
)
;
build_n_args
!
(
BoxFnOnce
[
]
:
a1
:
A1
a2
:
A2
a3
:
A3
a4
:
A4
a5
:
A5
a6
:
A6
a7
:
A7
)
;
build_n_args
!
(
BoxFnOnce
[
]
:
a1
:
A1
a2
:
A2
a3
:
A3
a4
:
A4
a5
:
A5
a6
:
A6
a7
:
A7
a8
:
A8
)
;
build_n_args
!
(
BoxFnOnce
[
]
:
a1
:
A1
a2
:
A2
a3
:
A3
a4
:
A4
a5
:
A5
a6
:
A6
a7
:
A7
a8
:
A8
a9
:
A9
)
;
build_n_args
!
(
BoxFnOnce
[
]
:
a1
:
A1
a2
:
A2
a3
:
A3
a4
:
A4
a5
:
A5
a6
:
A6
a7
:
A7
a8
:
A8
a9
:
A9
a10
:
A10
)
;
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
BoxFnOnce
;
use
std
:
:
rc
:
:
Rc
;
struct
NoSendString
(
String
Rc
<
(
)
>
)
;
impl
NoSendString
{
fn
into
(
self
)
-
>
String
{
self
.
0
}
}
fn
closure_string
(
)
-
>
NoSendString
{
NoSendString
(
String
:
:
from
(
"
abc
"
)
Rc
:
:
new
(
(
)
)
)
}
#
[
test
]
fn
test_arg0
(
)
{
let
f
=
BoxFnOnce
:
:
from
(
{
let
s
=
closure_string
(
)
;
move
|
|
-
>
String
{
s
.
into
(
)
}
}
)
;
assert_eq
!
(
f
.
call
(
)
"
abc
"
)
;
}
#
[
test
]
fn
test_arg1
(
)
{
let
f
=
BoxFnOnce
:
:
from
(
{
let
s
=
closure_string
(
)
;
move
|
_
|
-
>
String
{
s
.
into
(
)
}
}
)
;
assert_eq
!
(
f
.
call
(
0
)
"
abc
"
)
;
}
#
[
test
]
fn
test_arg1_fixed_argument_type
(
)
{
let
f
:
BoxFnOnce
<
(
i32
)
String
>
=
BoxFnOnce
:
:
from
(
{
let
s
=
closure_string
(
)
;
move
|
_
|
-
>
String
{
s
.
into
(
)
}
}
)
;
assert_eq
!
(
f
.
call
(
0
)
"
abc
"
)
;
}
#
[
test
]
fn
test_arg2
(
)
{
let
f
=
BoxFnOnce
:
:
from
(
{
let
s
=
closure_string
(
)
;
move
|
_
_
|
-
>
String
{
s
.
into
(
)
}
}
)
;
assert_eq
!
(
f
.
call
(
0
0
)
"
abc
"
)
;
}
#
[
test
]
fn
test_arg3
(
)
{
let
f
=
BoxFnOnce
:
:
from
(
{
let
s
=
closure_string
(
)
;
move
|
_
_
_
|
-
>
String
{
s
.
into
(
)
}
}
)
;
assert_eq
!
(
f
.
call
(
0
0
0
)
"
abc
"
)
;
}
#
[
test
]
fn
test_arg4_void
(
)
{
let
f
=
BoxFnOnce
:
:
from
(
{
let
s
=
closure_string
(
)
;
move
|
_
_
_
_
|
{
drop
(
s
)
;
}
}
)
;
f
.
call
(
0
0
0
0
)
;
}
#
[
test
]
#
[
should_panic
(
expected
=
"
inner
diverging
"
)
]
fn
test_arg4_diverging
(
)
{
let
f
=
BoxFnOnce
:
:
from
(
{
let
s
=
closure_string
(
)
;
move
|
_
_
_
_
|
-
>
!
{
drop
(
s
)
;
panic
!
(
"
inner
diverging
"
)
;
}
}
)
;
f
.
call
(
0
0
0
0
)
;
}
}
