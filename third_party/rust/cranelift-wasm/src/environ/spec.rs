use
crate
:
:
state
:
:
{
FuncTranslationState
ModuleTranslationState
}
;
use
crate
:
:
translation_utils
:
:
{
FuncIndex
Global
GlobalIndex
Memory
MemoryIndex
SignatureIndex
Table
TableIndex
}
;
use
core
:
:
convert
:
:
From
;
use
cranelift_codegen
:
:
cursor
:
:
FuncCursor
;
use
cranelift_codegen
:
:
ir
:
:
immediates
:
:
Offset32
;
use
cranelift_codegen
:
:
ir
:
:
{
self
InstBuilder
}
;
use
cranelift_codegen
:
:
isa
:
:
TargetFrontendConfig
;
use
cranelift_frontend
:
:
FunctionBuilder
;
use
failure_derive
:
:
Fail
;
use
std
:
:
boxed
:
:
Box
;
use
wasmparser
:
:
BinaryReaderError
;
use
wasmparser
:
:
Operator
;
#
[
derive
(
Clone
Copy
)
]
pub
enum
GlobalVariable
{
Const
(
ir
:
:
Value
)
Memory
{
gv
:
ir
:
:
GlobalValue
offset
:
Offset32
ty
:
ir
:
:
Type
}
}
#
[
derive
(
Fail
Debug
)
]
pub
enum
WasmError
{
#
[
fail
(
display
=
"
Invalid
input
WebAssembly
code
at
offset
{
}
:
{
}
"
_1
_0
)
]
InvalidWebAssembly
{
message
:
&
'
static
str
offset
:
usize
}
#
[
fail
(
display
=
"
Unsupported
feature
:
{
}
"
_0
)
]
Unsupported
(
std
:
:
string
:
:
String
)
#
[
fail
(
display
=
"
Implementation
limit
exceeded
"
)
]
ImplLimitExceeded
#
[
fail
(
display
=
"
User
error
:
{
}
"
_0
)
]
User
(
std
:
:
string
:
:
String
)
}
#
[
macro_export
]
macro_rules
!
wasm_unsupported
{
(
(
arg
:
tt
)
*
)
=
>
{
crate
:
:
environ
:
:
WasmError
:
:
Unsupported
(
format
!
(
(
arg
)
*
)
)
}
}
impl
From
<
BinaryReaderError
>
for
WasmError
{
fn
from
(
e
:
BinaryReaderError
)
-
>
Self
{
let
BinaryReaderError
{
message
offset
}
=
e
;
WasmError
:
:
InvalidWebAssembly
{
message
offset
}
}
}
pub
type
WasmResult
<
T
>
=
Result
<
T
WasmError
>
;
#
[
derive
(
Copy
Clone
PartialEq
Eq
Debug
)
]
pub
enum
ReturnMode
{
NormalReturns
FallthroughReturn
}
pub
trait
FuncEnvironment
{
fn
target_config
(
&
self
)
-
>
TargetFrontendConfig
;
fn
pointer_type
(
&
self
)
-
>
ir
:
:
Type
{
ir
:
:
Type
:
:
int
(
u16
:
:
from
(
self
.
target_config
(
)
.
pointer_bits
(
)
)
)
.
unwrap
(
)
}
fn
pointer_bytes
(
&
self
)
-
>
u8
{
self
.
target_config
(
)
.
pointer_bytes
(
)
}
fn
return_mode
(
&
self
)
-
>
ReturnMode
{
ReturnMode
:
:
NormalReturns
}
fn
reference_type
(
&
self
)
-
>
ir
:
:
Type
{
match
self
.
pointer_type
(
)
{
ir
:
:
types
:
:
I32
=
>
ir
:
:
types
:
:
R32
ir
:
:
types
:
:
I64
=
>
ir
:
:
types
:
:
R64
_
=
>
panic
!
(
"
unsupported
pointer
type
"
)
}
}
fn
make_global
(
&
mut
self
func
:
&
mut
ir
:
:
Function
index
:
GlobalIndex
)
-
>
WasmResult
<
GlobalVariable
>
;
fn
make_heap
(
&
mut
self
func
:
&
mut
ir
:
:
Function
index
:
MemoryIndex
)
-
>
WasmResult
<
ir
:
:
Heap
>
;
fn
make_table
(
&
mut
self
func
:
&
mut
ir
:
:
Function
index
:
TableIndex
)
-
>
WasmResult
<
ir
:
:
Table
>
;
fn
make_indirect_sig
(
&
mut
self
func
:
&
mut
ir
:
:
Function
index
:
SignatureIndex
)
-
>
WasmResult
<
ir
:
:
SigRef
>
;
fn
make_direct_func
(
&
mut
self
func
:
&
mut
ir
:
:
Function
index
:
FuncIndex
)
-
>
WasmResult
<
ir
:
:
FuncRef
>
;
#
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
clippy
:
:
too_many_arguments
)
)
]
fn
translate_call_indirect
(
&
mut
self
pos
:
FuncCursor
table_index
:
TableIndex
table
:
ir
:
:
Table
sig_index
:
SignatureIndex
sig_ref
:
ir
:
:
SigRef
callee
:
ir
:
:
Value
call_args
:
&
[
ir
:
:
Value
]
)
-
>
WasmResult
<
ir
:
:
Inst
>
;
fn
translate_call
(
&
mut
self
mut
pos
:
FuncCursor
_callee_index
:
FuncIndex
callee
:
ir
:
:
FuncRef
call_args
:
&
[
ir
:
:
Value
]
)
-
>
WasmResult
<
ir
:
:
Inst
>
{
Ok
(
pos
.
ins
(
)
.
call
(
callee
call_args
)
)
}
fn
translate_memory_grow
(
&
mut
self
pos
:
FuncCursor
index
:
MemoryIndex
heap
:
ir
:
:
Heap
val
:
ir
:
:
Value
)
-
>
WasmResult
<
ir
:
:
Value
>
;
fn
translate_memory_size
(
&
mut
self
pos
:
FuncCursor
index
:
MemoryIndex
heap
:
ir
:
:
Heap
)
-
>
WasmResult
<
ir
:
:
Value
>
;
fn
translate_loop_header
(
&
mut
self
_pos
:
FuncCursor
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
before_translate_operator
(
&
mut
self
_op
:
&
Operator
_builder
:
&
mut
FunctionBuilder
_state
:
&
FuncTranslationState
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
after_translate_operator
(
&
mut
self
_op
:
&
Operator
_builder
:
&
mut
FunctionBuilder
_state
:
&
FuncTranslationState
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
}
pub
trait
ModuleEnvironment
<
'
data
>
{
fn
target_config
(
&
self
)
-
>
TargetFrontendConfig
;
fn
reserve_signatures
(
&
mut
self
_num
:
u32
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
declare_signature
(
&
mut
self
sig
:
ir
:
:
Signature
)
-
>
WasmResult
<
(
)
>
;
fn
reserve_imports
(
&
mut
self
_num
:
u32
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
declare_func_import
(
&
mut
self
sig_index
:
SignatureIndex
module
:
&
'
data
str
field
:
&
'
data
str
)
-
>
WasmResult
<
(
)
>
;
fn
declare_table_import
(
&
mut
self
table
:
Table
module
:
&
'
data
str
field
:
&
'
data
str
)
-
>
WasmResult
<
(
)
>
;
fn
declare_memory_import
(
&
mut
self
memory
:
Memory
module
:
&
'
data
str
field
:
&
'
data
str
)
-
>
WasmResult
<
(
)
>
;
fn
declare_global_import
(
&
mut
self
global
:
Global
module
:
&
'
data
str
field
:
&
'
data
str
)
-
>
WasmResult
<
(
)
>
;
fn
finish_imports
(
&
mut
self
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
reserve_func_types
(
&
mut
self
_num
:
u32
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
declare_func_type
(
&
mut
self
sig_index
:
SignatureIndex
)
-
>
WasmResult
<
(
)
>
;
fn
reserve_tables
(
&
mut
self
_num
:
u32
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
declare_table
(
&
mut
self
table
:
Table
)
-
>
WasmResult
<
(
)
>
;
fn
reserve_memories
(
&
mut
self
_num
:
u32
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
declare_memory
(
&
mut
self
memory
:
Memory
)
-
>
WasmResult
<
(
)
>
;
fn
reserve_globals
(
&
mut
self
_num
:
u32
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
declare_global
(
&
mut
self
global
:
Global
)
-
>
WasmResult
<
(
)
>
;
fn
reserve_exports
(
&
mut
self
_num
:
u32
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
declare_func_export
(
&
mut
self
func_index
:
FuncIndex
name
:
&
'
data
str
)
-
>
WasmResult
<
(
)
>
;
fn
declare_table_export
(
&
mut
self
table_index
:
TableIndex
name
:
&
'
data
str
)
-
>
WasmResult
<
(
)
>
;
fn
declare_memory_export
(
&
mut
self
memory_index
:
MemoryIndex
name
:
&
'
data
str
)
-
>
WasmResult
<
(
)
>
;
fn
declare_global_export
(
&
mut
self
global_index
:
GlobalIndex
name
:
&
'
data
str
)
-
>
WasmResult
<
(
)
>
;
fn
finish_exports
(
&
mut
self
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
declare_start_func
(
&
mut
self
index
:
FuncIndex
)
-
>
WasmResult
<
(
)
>
;
fn
reserve_table_elements
(
&
mut
self
_num
:
u32
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
declare_table_elements
(
&
mut
self
table_index
:
TableIndex
base
:
Option
<
GlobalIndex
>
offset
:
usize
elements
:
Box
<
[
FuncIndex
]
>
)
-
>
WasmResult
<
(
)
>
;
fn
define_function_body
(
&
mut
self
module_translation_state
:
&
ModuleTranslationState
body_bytes
:
&
'
data
[
u8
]
body_offset
:
usize
)
-
>
WasmResult
<
(
)
>
;
fn
reserve_data_initializers
(
&
mut
self
_num
:
u32
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
declare_data_initialization
(
&
mut
self
memory_index
:
MemoryIndex
base
:
Option
<
GlobalIndex
>
offset
:
usize
data
:
&
'
data
[
u8
]
)
-
>
WasmResult
<
(
)
>
;
fn
declare_func_name
(
&
mut
self
_func_index
:
FuncIndex
_name
:
&
'
data
str
)
-
>
WasmResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
custom_section
(
&
mut
self
name
:
&
'
data
str
data
:
&
'
data
[
u8
]
)
-
>
WasmResult
<
(
)
>
{
drop
(
(
name
data
)
)
;
Ok
(
(
)
)
}
}
