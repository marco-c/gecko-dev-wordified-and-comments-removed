#
!
[
cfg_attr
(
feature
=
"
alloc
"
doc
=
"
[
vec
]
:
mod
vec
"
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
alloc
"
)
doc
=
"
[
vec
]
:
#
[
Vec
]
:
https
:
/
/
docs
.
rust
-
lang
.
org
/
stable
/
alloc
/
vec
/
struct
.
Vec
.
html
"
)
]
#
!
[
cfg_attr
(
feature
=
"
serde
"
doc
=
"
[
Serialize
]
:
serde
:
:
Serialize
[
Deserialize
]
:
serde
:
:
Deserialize
"
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
serde
"
)
doc
=
"
[
Serialize
]
:
https
:
/
/
docs
.
rs
/
serde
/
*
/
serde
/
trait
.
Serialize
.
html
[
Deserialize
]
:
https
:
/
/
docs
.
rs
/
serde
/
*
/
serde
/
trait
.
Deserialize
.
html
"
)
]
#
!
[
cfg_attr
(
feature
=
"
num
-
traits
"
doc
=
"
[
ToPrimitive
]
:
:
:
num_traits
:
:
ToPrimitive
[
FromPrimitive
]
:
:
:
num_traits
:
:
FromPrimitive
[
ToBytes
]
:
:
:
num_traits
:
:
ToBytes
[
AsPrimitive
]
:
:
:
num_traits
:
:
AsPrimitive
[
Num
]
:
:
:
num_traits
:
:
Num
[
Float
]
:
:
:
num_traits
:
:
Float
[
FloatCore
]
:
:
:
num_traits
:
:
float
:
:
FloatCore
[
Bounded
]
:
:
:
num_traits
:
:
Bounded
"
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
num
-
traits
"
)
doc
=
"
[
ToPrimitive
]
:
https
:
/
/
docs
.
rs
/
num
-
traits
/
*
/
num_traits
/
cast
/
trait
.
ToPrimitive
.
html
[
FromPrimitive
]
:
https
:
/
/
docs
.
rs
/
num
-
traits
/
*
/
num_traits
/
cast
/
trait
.
FromPrimitive
.
html
[
ToBytes
]
:
https
:
/
/
docs
.
rs
/
num
-
traits
/
*
/
num_traits
/
ops
/
bytes
/
trait
.
ToBytes
.
html
[
AsPrimitive
]
:
https
:
/
/
docs
.
rs
/
num
-
traits
/
*
/
num_traits
/
cast
/
trait
.
AsPrimitive
.
html
[
Num
]
:
https
:
/
/
docs
.
rs
/
num
-
traits
/
*
/
num_traits
/
trait
.
Num
.
html
[
Float
]
:
https
:
/
/
docs
.
rs
/
num
-
traits
/
*
/
num_traits
/
float
/
trait
.
Float
.
html
[
FloatCore
]
:
https
:
/
/
docs
.
rs
/
num
-
traits
/
*
/
num_traits
/
float
/
trait
.
FloatCore
.
html
[
Bounded
]
:
https
:
/
/
docs
.
rs
/
num
-
traits
/
*
/
num_traits
/
bounds
/
trait
.
Bounded
.
html
"
)
]
#
!
[
cfg_attr
(
feature
=
"
bytemuck
"
doc
=
"
[
Zeroable
]
:
bytemuck
:
:
Zeroable
[
Pod
]
:
bytemuck
:
:
Pod
"
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
bytemuck
"
)
doc
=
"
[
Zeroable
]
:
https
:
/
/
docs
.
rs
/
bytemuck
/
*
/
bytemuck
/
trait
.
Zeroable
.
html
[
Pod
]
:
https
:
/
/
docs
.
rs
/
bytemuck
/
*
bytemuck
/
trait
.
Pod
.
html
"
)
]
#
!
[
cfg_attr
(
feature
=
"
zerocopy
"
doc
=
"
[
IntoBytes
]
:
zerocopy
:
:
IntoBytes
[
FromBytes
]
:
zerocopy
:
:
FromBytes
"
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
zerocopy
"
)
doc
=
"
[
IntoBytes
]
:
https
:
/
/
docs
.
rs
/
zerocopy
/
*
/
zerocopy
/
trait
.
IntoBytes
.
html
[
FromBytes
]
:
https
:
/
/
docs
.
rs
/
zerocopy
/
*
/
zerocopy
/
trait
.
FromBytes
.
html
"
)
]
#
!
[
cfg_attr
(
feature
=
"
rand_distr
"
doc
=
"
[
Distribution
]
:
rand
:
:
distr
:
:
Distribution
"
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
rand_distr
"
)
doc
=
"
[
Distribution
]
:
https
:
/
/
docs
.
rs
/
rand
/
*
/
rand
/
distr
/
trait
.
Distribution
.
html
"
)
]
#
!
[
cfg_attr
(
feature
=
"
arbitrary
"
doc
=
"
[
Arbitrary
]
:
arbitrary
:
:
Arbitrary
"
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
arbitrary
"
)
doc
=
"
[
Arbitrary
]
:
https
:
/
/
docs
.
rs
/
arbitrary
/
*
/
arbitrary
/
trait
.
Arbitrary
.
html
"
)
]
#
!
[
warn
(
missing_docs
missing_copy_implementations
trivial_numeric_casts
future_incompatible
)
]
#
!
[
cfg_attr
(
not
(
target_arch
=
"
spirv
"
)
warn
(
missing_debug_implementations
)
)
]
#
!
[
allow
(
clippy
:
:
verbose_bit_mask
clippy
:
:
cast_lossless
unexpected_cfgs
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
half
/
2
.
5
.
0
"
)
]
#
!
[
doc
(
test
(
attr
(
deny
(
warnings
)
allow
(
unused
)
)
)
)
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_auto_cfg
)
)
]
#
[
cfg
(
feature
=
"
alloc
"
)
]
extern
crate
alloc
;
mod
bfloat
;
mod
binary16
;
mod
leading_zeros
;
#
[
cfg
(
feature
=
"
num
-
traits
"
)
]
mod
num_traits
;
#
[
cfg
(
not
(
target_arch
=
"
spirv
"
)
)
]
pub
mod
slice
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
mod
vec
;
pub
use
bfloat
:
:
bf16
;
pub
use
binary16
:
:
f16
;
#
[
cfg
(
feature
=
"
rand_distr
"
)
]
mod
rand_distr
;
pub
mod
prelude
{
#
[
doc
(
no_inline
)
]
pub
use
crate
:
:
{
bf16
f16
}
;
#
[
cfg
(
not
(
target_arch
=
"
spirv
"
)
)
]
#
[
doc
(
no_inline
)
]
pub
use
crate
:
:
slice
:
:
{
HalfBitsSliceExt
HalfFloatSliceExt
}
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
doc
(
no_inline
)
]
pub
use
crate
:
:
vec
:
:
{
HalfBitsVecExt
HalfFloatVecExt
}
;
}
mod
private
{
use
crate
:
:
{
bf16
f16
}
;
pub
trait
SealedHalf
{
}
impl
SealedHalf
for
f16
{
}
impl
SealedHalf
for
bf16
{
}
}
