mod
branch_meta
;
pub
(
crate
)
mod
bytestr
;
pub
(
crate
)
mod
konst
;
#
[
cfg
(
feature
=
"
litemap
"
)
]
mod
litemap
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
(
crate
)
mod
nonconst
;
use
bytestr
:
:
ByteStr
;
use
super
:
:
ZeroTrieSimpleAscii
;
impl
<
const
N
:
usize
>
ZeroTrieSimpleAscii
<
[
u8
;
N
]
>
{
pub
const
fn
from_sorted_u8_tuples
(
tuples
:
&
[
(
&
[
u8
]
usize
)
]
)
-
>
Self
{
use
konst
:
:
*
;
let
byte_str_slice
=
ByteStr
:
:
from_byte_slice_with_value
(
tuples
)
;
let
result
=
ZeroTrieBuilderConst
:
:
<
N
>
:
:
from_tuple_slice
:
:
<
100
>
(
byte_str_slice
)
;
match
result
{
Ok
(
s
)
=
>
Self
:
:
from_store
(
s
.
build_or_panic
(
)
)
Err
(
_
)
=
>
panic
!
(
"
Failed
to
build
ZeroTrie
"
)
}
}
pub
const
fn
from_sorted_str_tuples
(
tuples
:
&
[
(
&
str
usize
)
]
)
-
>
Self
{
use
konst
:
:
*
;
let
byte_str_slice
=
ByteStr
:
:
from_str_slice_with_value
(
tuples
)
;
let
result
=
ZeroTrieBuilderConst
:
:
<
N
>
:
:
from_tuple_slice
:
:
<
100
>
(
byte_str_slice
)
;
match
result
{
Ok
(
s
)
=
>
Self
:
:
from_store
(
s
.
build_or_panic
(
)
)
Err
(
_
)
=
>
panic
!
(
"
Failed
to
build
ZeroTrie
"
)
}
}
}
