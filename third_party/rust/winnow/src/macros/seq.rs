#
[
macro_export
]
#
[
doc
(
alias
=
"
tuple
"
)
]
#
[
doc
(
alias
=
"
preceded
"
)
]
#
[
doc
(
alias
=
"
terminated
"
)
]
#
[
doc
(
alias
=
"
delimited
"
)
]
#
[
doc
(
alias
=
"
pair
"
)
]
#
[
doc
(
alias
=
"
separated_pair
"
)
]
#
[
doc
(
alias
=
"
struct_parser
"
)
]
#
[
doc
(
hidden
)
]
macro_rules
!
seq
{
(
(
name
:
ident
)
:
:
*
{
(
fields
:
tt
)
*
}
)
=
>
{
crate
:
:
combinator
:
:
trace
(
stringify
!
(
(
name
)
:
:
*
)
move
|
input
:
&
mut
_
|
{
crate
:
:
seq_parse_struct_fields
!
(
(
(
fields
)
*
)
;
(
_0
_1
_2
_3
_4
_5
_6
_7
_8
_9
_10
_11
_12
_13
_14
_15
_16
_17
_18
_19
_20
)
;
input
;
)
;
Ok
(
crate
:
:
seq_init_struct_fields
!
(
(
(
fields
)
*
)
;
(
name
)
:
:
*
;
)
)
}
)
}
;
(
(
name
:
ident
)
:
:
*
(
(
fields
:
tt
)
*
)
)
=
>
{
crate
:
:
combinator
:
:
trace
(
stringify
!
(
(
name
)
:
:
*
)
move
|
input
:
&
mut
_
|
{
crate
:
:
seq_parse_tuple_fields
!
(
(
(
fields
)
*
)
;
(
_0
_1
_2
_3
_4
_5
_6
_7
_8
_9
_10
_11
_12
_13
_14
_15
_16
_17
_18
_19
_20
)
;
input
;
)
;
Ok
(
crate
:
:
seq_init_tuple_fields
!
(
(
(
fields
)
*
)
;
(
_0
_1
_2
_3
_4
_5
_6
_7
_8
_9
_10
_11
_12
_13
_14
_15
_16
_17
_18
_19
_20
)
;
(
name
)
:
:
*
;
)
)
}
)
}
;
(
(
(
fields
:
tt
)
*
)
)
=
>
{
crate
:
:
combinator
:
:
trace
(
"
tuple
"
move
|
input
:
&
mut
_
|
{
crate
:
:
seq_parse_tuple_fields
!
(
(
(
fields
)
*
)
;
(
_0
_1
_2
_3
_4
_5
_6
_7
_8
_9
_10
_11
_12
_13
_14
_15
_16
_17
_18
_19
_20
)
;
input
;
)
;
Ok
(
crate
:
:
seq_init_tuple_fields
!
(
(
(
fields
)
*
)
;
(
_0
_1
_2
_3
_4
_5
_6
_7
_8
_9
_10
_11
_12
_13
_14
_15
_16
_17
_18
_19
_20
)
;
;
)
)
}
)
}
;
(
(
fields
:
tt
)
*
)
=
>
{
crate
:
:
seq
!
(
(
(
fields
)
*
)
)
}
;
}
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
seq_parse_struct_fields
{
(
(
_
:
head_parser
:
expr
(
fields
:
tt
)
*
)
;
(
unnamed1
:
ident
(
unnamed
:
ident
)
*
)
;
input
:
ident
;
)
=
>
{
let
unnamed1
=
crate
:
:
Parser
:
:
parse_next
(
&
mut
head_parser
input
)
?
;
crate
:
:
seq_parse_struct_fields
!
(
(
(
fields
)
*
)
;
(
(
unnamed
)
*
)
;
input
;
)
}
;
(
(
_
:
head_parser
:
expr
)
;
(
unnamed1
:
ident
(
unnamed
:
ident
)
*
)
;
input
:
ident
;
)
=
>
{
let
unnamed1
=
crate
:
:
Parser
:
:
parse_next
(
&
mut
head_parser
input
)
?
;
}
;
(
(
head_field
:
ident
:
head_parser
:
expr
(
fields
:
tt
)
*
)
;
(
unnamed1
:
ident
(
unnamed
:
ident
)
*
)
;
input
:
ident
;
)
=
>
{
let
head_field
=
crate
:
:
Parser
:
:
parse_next
(
&
mut
head_parser
input
)
?
;
crate
:
:
seq_parse_struct_fields
!
(
(
(
fields
)
*
)
;
(
(
unnamed
)
*
)
;
input
;
)
}
;
(
(
head_field
:
ident
:
head_parser
:
expr
)
;
(
unnamed1
:
ident
(
unnamed
:
ident
)
*
)
;
input
:
ident
;
)
=
>
{
let
head_field
=
crate
:
:
Parser
:
:
parse_next
(
&
mut
head_parser
input
)
?
;
}
;
(
(
.
.
update
:
expr
)
;
(
(
unnamed
:
ident
)
*
)
;
input
:
expr
;
)
=
>
{
}
;
(
(
(
)
?
)
;
(
(
unnamed
:
ident
)
*
)
;
input
:
expr
;
)
=
>
{
}
;
}
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
seq_parse_tuple_fields
{
(
(
(
_
:
)
?
head_parser
:
expr
(
fields
:
tt
)
*
)
;
(
unnamed1
:
ident
(
unnamed
:
ident
)
*
)
;
input
:
ident
;
)
=
>
{
let
unnamed1
=
crate
:
:
Parser
:
:
parse_next
(
&
mut
head_parser
input
)
?
;
crate
:
:
seq_parse_tuple_fields
!
(
(
(
fields
)
*
)
;
(
(
unnamed
)
*
)
;
input
;
)
}
;
(
(
(
_
:
)
?
head_parser
:
expr
)
;
(
unnamed1
:
ident
(
unnamed
:
ident
)
*
)
;
input
:
ident
;
)
=
>
{
let
unnamed1
=
crate
:
:
Parser
:
:
parse_next
(
&
mut
head_parser
input
)
?
;
}
;
(
(
(
)
?
)
;
(
(
unnamed
:
ident
)
*
)
;
input
:
expr
;
)
=
>
{
}
;
}
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
seq_init_struct_fields
{
(
(
_
:
head_parser
:
expr
(
fields
:
tt
)
*
)
;
(
name
:
ident
)
:
:
*
;
(
inits
:
tt
)
*
)
=
>
{
crate
:
:
seq_init_struct_fields
!
(
(
(
fields
)
*
)
;
(
name
)
:
:
*
;
(
inits
)
*
)
}
;
(
(
_
:
head_parser
:
expr
)
;
(
name
:
ident
)
:
:
*
;
(
inits
:
tt
)
*
)
=
>
{
crate
:
:
seq_init_struct_fields
!
(
(
)
;
(
name
)
:
:
*
;
(
inits
)
*
)
}
;
(
(
head_field
:
ident
:
head_parser
:
expr
(
fields
:
tt
)
*
)
;
(
name
:
ident
)
:
:
*
;
(
inits
:
tt
)
*
)
=
>
{
crate
:
:
seq_init_struct_fields
!
(
(
(
fields
)
*
)
;
(
name
)
:
:
*
;
(
inits
)
*
head_field
)
}
;
(
(
head_field
:
ident
:
head_parser
:
expr
)
;
(
name
:
ident
)
:
:
*
;
(
inits
:
tt
)
*
)
=
>
{
crate
:
:
seq_init_struct_fields
!
(
(
)
;
(
name
)
:
:
*
;
(
inits
)
*
head_field
)
}
;
(
(
.
.
update
:
expr
)
;
(
name
:
ident
)
:
:
*
;
(
inits
:
tt
)
*
)
=
>
{
(
name
)
:
:
*
{
(
inits
)
*
.
.
update
}
}
;
(
(
(
)
?
)
;
(
name
:
ident
)
:
:
*
;
(
inits
:
tt
)
*
)
=
>
{
(
name
)
:
:
*
{
(
inits
)
*
}
}
;
}
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
seq_init_tuple_fields
{
(
(
_
:
head_parser
:
expr
(
fields
:
tt
)
*
)
;
(
unnamed1
:
ident
(
unnamed
:
ident
)
*
)
;
(
name
:
ident
)
:
:
*
;
(
inits
:
tt
)
*
)
=
>
{
crate
:
:
seq_init_tuple_fields
!
(
(
(
fields
)
*
)
;
(
(
unnamed
)
*
)
;
(
name
)
:
:
*
;
(
inits
)
*
)
}
;
(
(
_
:
head_parser
:
expr
)
;
(
unnamed1
:
ident
(
unnamed
:
ident
)
*
)
;
(
name
:
ident
)
:
:
*
;
(
inits
:
tt
)
*
)
=
>
{
crate
:
:
seq_init_tuple_fields
!
(
(
)
;
(
(
unnamed
)
*
)
;
(
name
)
:
:
*
;
(
inits
)
*
)
}
;
(
(
head_parser
:
expr
(
fields
:
tt
)
*
)
;
(
unnamed1
:
ident
(
unnamed
:
ident
)
*
)
;
(
name
:
ident
)
:
:
*
;
(
inits
:
tt
)
*
)
=
>
{
crate
:
:
seq_init_tuple_fields
!
(
(
(
fields
)
*
)
;
(
(
unnamed
)
*
)
;
(
name
)
:
:
*
;
(
inits
)
*
unnamed1
)
}
;
(
(
head_parser
:
expr
)
;
(
unnamed1
:
ident
(
unnamed
:
ident
)
*
)
;
(
name
:
ident
)
:
:
*
;
(
inits
:
tt
)
*
)
=
>
{
crate
:
:
seq_init_tuple_fields
!
(
(
)
;
(
(
unnamed
)
*
)
;
(
name
)
:
:
*
;
(
inits
)
*
unnamed1
)
}
;
(
(
(
)
?
)
;
(
unnamed1
:
ident
(
unnamed
:
ident
)
*
)
;
(
name
:
ident
)
:
:
*
;
(
inits
:
tt
)
*
)
=
>
{
(
name
)
:
:
*
(
(
inits
)
*
)
}
;
}
