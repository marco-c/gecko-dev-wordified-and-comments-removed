#
[
cfg
(
feature
=
"
heapsize
"
)
]
use
heapsize
:
:
HeapSizeOf
;
use
host
:
:
Host
;
use
idna
:
:
domain_to_unicode
;
use
parser
:
:
default_port
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicUsize
ATOMIC_USIZE_INIT
Ordering
}
;
use
Url
;
pub
fn
url_origin
(
url
:
&
Url
)
-
>
Origin
{
let
scheme
=
url
.
scheme
(
)
;
match
scheme
{
"
blob
"
=
>
{
let
result
=
Url
:
:
parse
(
url
.
path
(
)
)
;
match
result
{
Ok
(
ref
url
)
=
>
url_origin
(
url
)
Err
(
_
)
=
>
Origin
:
:
new_opaque
(
)
}
}
"
ftp
"
|
"
gopher
"
|
"
http
"
|
"
https
"
|
"
ws
"
|
"
wss
"
=
>
{
Origin
:
:
Tuple
(
scheme
.
to_owned
(
)
url
.
host
(
)
.
unwrap
(
)
.
to_owned
(
)
url
.
port_or_known_default
(
)
.
unwrap
(
)
)
}
"
file
"
=
>
Origin
:
:
new_opaque
(
)
_
=
>
Origin
:
:
new_opaque
(
)
}
}
#
[
derive
(
PartialEq
Eq
Hash
Clone
Debug
)
]
pub
enum
Origin
{
Opaque
(
OpaqueOrigin
)
Tuple
(
String
Host
<
String
>
u16
)
}
#
[
cfg
(
feature
=
"
heapsize
"
)
]
impl
HeapSizeOf
for
Origin
{
fn
heap_size_of_children
(
&
self
)
-
>
usize
{
match
*
self
{
Origin
:
:
Tuple
(
ref
scheme
ref
host
_
)
=
>
{
scheme
.
heap_size_of_children
(
)
+
host
.
heap_size_of_children
(
)
}
_
=
>
0
}
}
}
impl
Origin
{
pub
fn
new_opaque
(
)
-
>
Origin
{
static
COUNTER
:
AtomicUsize
=
ATOMIC_USIZE_INIT
;
Origin
:
:
Opaque
(
OpaqueOrigin
(
COUNTER
.
fetch_add
(
1
Ordering
:
:
SeqCst
)
)
)
}
pub
fn
is_tuple
(
&
self
)
-
>
bool
{
matches
!
(
*
self
Origin
:
:
Tuple
(
.
.
)
)
}
pub
fn
ascii_serialization
(
&
self
)
-
>
String
{
match
*
self
{
Origin
:
:
Opaque
(
_
)
=
>
"
null
"
.
to_owned
(
)
Origin
:
:
Tuple
(
ref
scheme
ref
host
port
)
=
>
{
if
default_port
(
scheme
)
=
=
Some
(
port
)
{
format
!
(
"
{
}
:
/
/
{
}
"
scheme
host
)
}
else
{
format
!
(
"
{
}
:
/
/
{
}
:
{
}
"
scheme
host
port
)
}
}
}
}
pub
fn
unicode_serialization
(
&
self
)
-
>
String
{
match
*
self
{
Origin
:
:
Opaque
(
_
)
=
>
"
null
"
.
to_owned
(
)
Origin
:
:
Tuple
(
ref
scheme
ref
host
port
)
=
>
{
let
host
=
match
*
host
{
Host
:
:
Domain
(
ref
domain
)
=
>
{
let
(
domain
_errors
)
=
domain_to_unicode
(
domain
)
;
Host
:
:
Domain
(
domain
)
}
_
=
>
host
.
clone
(
)
}
;
if
default_port
(
scheme
)
=
=
Some
(
port
)
{
format
!
(
"
{
}
:
/
/
{
}
"
scheme
host
)
}
else
{
format
!
(
"
{
}
:
/
/
{
}
:
{
}
"
scheme
host
port
)
}
}
}
}
}
#
[
derive
(
Eq
PartialEq
Hash
Clone
Debug
)
]
pub
struct
OpaqueOrigin
(
usize
)
;
#
[
cfg
(
feature
=
"
heapsize
"
)
]
known_heap_size
!
(
0
OpaqueOrigin
)
;
