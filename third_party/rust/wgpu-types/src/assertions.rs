#
[
cfg
(
feature
=
"
strict_asserts
"
)
]
#
[
macro_export
]
macro_rules
!
strict_assert
{
(
(
arg
:
tt
)
*
)
=
>
{
assert
!
(
(
arg
)
*
)
}
}
#
[
cfg
(
feature
=
"
strict_asserts
"
)
]
#
[
macro_export
]
macro_rules
!
strict_assert_eq
{
(
(
arg
:
tt
)
*
)
=
>
{
assert_eq
!
(
(
arg
)
*
)
}
}
#
[
cfg
(
feature
=
"
strict_asserts
"
)
]
#
[
macro_export
]
macro_rules
!
strict_assert_ne
{
(
(
arg
:
tt
)
*
)
=
>
{
assert_ne
!
(
(
arg
)
*
)
}
}
#
[
cfg
(
not
(
feature
=
"
strict_asserts
"
)
)
]
#
[
macro_export
]
macro_rules
!
strict_assert
{
(
(
arg
:
tt
)
*
)
=
>
{
debug_assert
!
(
(
arg
)
*
)
}
;
}
#
[
cfg
(
not
(
feature
=
"
strict_asserts
"
)
)
]
#
[
macro_export
]
macro_rules
!
strict_assert_eq
{
(
(
arg
:
tt
)
*
)
=
>
{
debug_assert_eq
!
(
(
arg
)
*
)
}
;
}
#
[
cfg
(
not
(
feature
=
"
strict_asserts
"
)
)
]
#
[
macro_export
]
macro_rules
!
strict_assert_ne
{
(
(
arg
:
tt
)
*
)
=
>
{
debug_assert_ne
!
(
(
arg
)
*
)
}
;
}
pub
trait
StrictAssertUnwrapExt
<
T
>
{
unsafe
fn
strict_unwrap_unchecked
(
self
)
-
>
T
;
}
impl
<
T
>
StrictAssertUnwrapExt
<
T
>
for
Option
<
T
>
{
unsafe
fn
strict_unwrap_unchecked
(
self
)
-
>
T
{
strict_assert
!
(
self
.
is_some
(
)
"
Called
strict_unwrap_unchecked
on
None
"
)
;
unsafe
{
self
.
unwrap_unchecked
(
)
}
}
}
impl
<
T
E
>
StrictAssertUnwrapExt
<
T
>
for
Result
<
T
E
>
{
unsafe
fn
strict_unwrap_unchecked
(
self
)
-
>
T
{
strict_assert
!
(
self
.
is_ok
(
)
"
Called
strict_unwrap_unchecked
on
Err
"
)
;
unsafe
{
self
.
unwrap_unchecked
(
)
}
}
}
