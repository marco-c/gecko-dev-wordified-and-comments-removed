use
crate
:
:
{
ApiResult
TabsEngine
TabsStore
}
;
use
error_support
:
:
handle_error
;
use
interrupt_support
:
:
NeverInterrupts
;
use
std
:
:
sync
:
:
Arc
;
use
sync15
:
:
client
:
:
{
sync_multiple
MemoryCachedState
Sync15StorageClientInit
}
;
use
sync15
:
:
engine
:
:
EngineSyncAssociation
;
use
sync15
:
:
KeyBundle
;
impl
TabsStore
{
pub
fn
reset
(
self
:
Arc
<
Self
>
)
-
>
ApiResult
<
(
)
>
{
use
sync15
:
:
engine
:
:
SyncEngine
;
let
engine
=
TabsEngine
:
:
new
(
Arc
:
:
clone
(
&
self
)
)
;
engine
.
reset
(
&
EngineSyncAssociation
:
:
Disconnected
)
?
;
Ok
(
(
)
)
}
#
[
handle_error
(
crate
:
:
Error
)
]
pub
fn
sync
(
self
:
Arc
<
Self
>
key_id
:
String
access_token
:
String
sync_key
:
String
tokenserver_url
:
String
local_id
:
String
)
-
>
ApiResult
<
String
>
{
let
mut
mem_cached_state
=
MemoryCachedState
:
:
default
(
)
;
let
engine
=
TabsEngine
:
:
new
(
Arc
:
:
clone
(
&
self
)
)
;
*
engine
.
local_id
.
write
(
)
.
unwrap
(
)
=
local_id
;
let
storage_init
=
&
Sync15StorageClientInit
{
key_id
access_token
tokenserver_url
:
url
:
:
Url
:
:
parse
(
tokenserver_url
.
as_str
(
)
)
?
}
;
let
root_sync_key
=
&
KeyBundle
:
:
from_ksync_base64
(
sync_key
.
as_str
(
)
)
?
;
let
mut
result
=
sync_multiple
(
&
[
&
engine
]
&
mut
None
&
mut
mem_cached_state
storage_init
root_sync_key
&
NeverInterrupts
None
)
;
if
let
Err
(
e
)
=
result
.
result
{
return
Err
(
e
.
into
(
)
)
;
}
match
result
.
engine_results
.
remove
(
"
tabs
"
)
{
None
|
Some
(
Ok
(
(
)
)
)
=
>
Ok
(
serde_json
:
:
to_string
(
&
result
.
telemetry
)
?
)
Some
(
Err
(
e
)
)
=
>
Err
(
e
.
into
(
)
)
}
}
}
