use
std
:
:
error
;
use
std
:
:
fmt
;
use
std
:
:
result
;
pub
type
Result
<
T
>
=
result
:
:
Result
<
T
Error
>
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
Error
{
kind
:
ErrorKind
}
#
[
derive
(
Clone
Debug
)
]
pub
enum
ErrorKind
{
StateIDOverflow
{
max
:
usize
}
PremultiplyOverflow
{
max
:
usize
requested_max
:
usize
}
}
impl
Error
{
pub
fn
kind
(
&
self
)
-
>
&
ErrorKind
{
&
self
.
kind
}
pub
(
crate
)
fn
state_id_overflow
(
max
:
usize
)
-
>
Error
{
Error
{
kind
:
ErrorKind
:
:
StateIDOverflow
{
max
}
}
}
pub
(
crate
)
fn
premultiply_overflow
(
max
:
usize
requested_max
:
usize
)
-
>
Error
{
Error
{
kind
:
ErrorKind
:
:
PremultiplyOverflow
{
max
requested_max
}
}
}
}
impl
error
:
:
Error
for
Error
{
fn
description
(
&
self
)
-
>
&
str
{
match
self
.
kind
{
ErrorKind
:
:
StateIDOverflow
{
.
.
}
=
>
{
"
state
id
representation
too
small
"
}
ErrorKind
:
:
PremultiplyOverflow
{
.
.
}
=
>
{
"
state
id
representation
too
small
for
premultiplication
"
}
}
}
}
impl
fmt
:
:
Display
for
Error
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
match
self
.
kind
{
ErrorKind
:
:
StateIDOverflow
{
max
}
=
>
write
!
(
f
"
building
the
automaton
failed
because
it
required
\
building
more
states
that
can
be
identified
where
the
\
maximum
ID
for
the
chosen
representation
is
{
}
"
max
)
ErrorKind
:
:
PremultiplyOverflow
{
max
requested_max
}
=
>
{
if
max
=
=
requested_max
{
write
!
(
f
"
premultiplication
of
states
requires
the
ability
to
\
represent
a
state
ID
greater
than
what
can
fit
on
\
this
platform
'
s
usize
which
is
{
}
"
:
:
std
:
:
usize
:
:
MAX
)
}
else
{
write
!
(
f
"
premultiplication
of
states
requires
the
ability
to
\
represent
at
least
a
state
ID
of
{
}
but
the
chosen
\
representation
only
permits
a
maximum
state
ID
of
{
}
"
requested_max
max
)
}
}
}
}
}
