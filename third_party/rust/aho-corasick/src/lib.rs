#
!
[
no_std
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
deny
(
rustdoc
:
:
broken_intra_doc_links
)
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_auto_cfg
)
)
]
extern
crate
alloc
;
#
[
cfg
(
any
(
test
feature
=
"
std
"
)
)
]
extern
crate
std
;
#
[
cfg
(
doctest
)
]
doc_comment
:
:
doctest
!
(
"
.
.
/
README
.
md
"
)
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
crate
:
:
ahocorasick
:
:
StreamFindIter
;
pub
use
crate
:
:
{
ahocorasick
:
:
{
AhoCorasick
AhoCorasickBuilder
AhoCorasickKind
FindIter
FindOverlappingIter
}
util
:
:
{
error
:
:
{
BuildError
MatchError
MatchErrorKind
}
primitives
:
:
{
PatternID
PatternIDError
}
search
:
:
{
Anchored
Input
Match
MatchKind
Span
StartKind
}
}
}
;
#
[
macro_use
]
mod
macros
;
mod
ahocorasick
;
pub
mod
automaton
;
pub
mod
dfa
;
pub
mod
nfa
;
pub
mod
packed
;
#
[
cfg
(
test
)
]
mod
tests
;
pub
(
crate
)
mod
util
;
#
[
cfg
(
test
)
]
mod
testoibits
{
use
std
:
:
panic
:
:
{
RefUnwindSafe
UnwindSafe
}
;
use
super
:
:
*
;
fn
assert_all
<
T
:
Send
+
Sync
+
UnwindSafe
+
RefUnwindSafe
>
(
)
{
}
#
[
test
]
fn
oibits_main
(
)
{
assert_all
:
:
<
AhoCorasick
>
(
)
;
assert_all
:
:
<
AhoCorasickBuilder
>
(
)
;
assert_all
:
:
<
AhoCorasickKind
>
(
)
;
assert_all
:
:
<
FindIter
>
(
)
;
assert_all
:
:
<
FindOverlappingIter
>
(
)
;
assert_all
:
:
<
BuildError
>
(
)
;
assert_all
:
:
<
MatchError
>
(
)
;
assert_all
:
:
<
MatchErrorKind
>
(
)
;
assert_all
:
:
<
Anchored
>
(
)
;
assert_all
:
:
<
Input
>
(
)
;
assert_all
:
:
<
Match
>
(
)
;
assert_all
:
:
<
MatchKind
>
(
)
;
assert_all
:
:
<
Span
>
(
)
;
assert_all
:
:
<
StartKind
>
(
)
;
}
#
[
test
]
fn
oibits_automaton
(
)
{
use
crate
:
:
{
automaton
dfa
:
:
DFA
}
;
assert_all
:
:
<
automaton
:
:
FindIter
<
DFA
>
>
(
)
;
assert_all
:
:
<
automaton
:
:
FindOverlappingIter
<
DFA
>
>
(
)
;
#
[
cfg
(
feature
=
"
std
"
)
]
assert_all
:
:
<
automaton
:
:
StreamFindIter
<
DFA
std
:
:
io
:
:
Stdin
>
>
(
)
;
assert_all
:
:
<
automaton
:
:
OverlappingState
>
(
)
;
assert_all
:
:
<
automaton
:
:
Prefilter
>
(
)
;
assert_all
:
:
<
automaton
:
:
Candidate
>
(
)
;
}
#
[
test
]
fn
oibits_packed
(
)
{
use
crate
:
:
packed
;
assert_all
:
:
<
packed
:
:
Config
>
(
)
;
assert_all
:
:
<
packed
:
:
Builder
>
(
)
;
assert_all
:
:
<
packed
:
:
Searcher
>
(
)
;
assert_all
:
:
<
packed
:
:
FindIter
>
(
)
;
assert_all
:
:
<
packed
:
:
MatchKind
>
(
)
;
}
}
