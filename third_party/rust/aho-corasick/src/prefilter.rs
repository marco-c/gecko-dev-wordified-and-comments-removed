use
std
:
:
cmp
;
use
std
:
:
fmt
;
use
std
:
:
panic
:
:
{
RefUnwindSafe
UnwindSafe
}
;
use
std
:
:
u8
;
use
memchr
:
:
{
memchr
memchr2
memchr3
}
;
use
crate
:
:
ahocorasick
:
:
MatchKind
;
use
crate
:
:
packed
;
use
crate
:
:
Match
;
#
[
derive
(
Clone
Debug
)
]
pub
enum
Candidate
{
None
Match
(
Match
)
PossibleStartOfMatch
(
usize
)
}
impl
Candidate
{
pub
fn
into_option
(
self
)
-
>
Option
<
usize
>
{
match
self
{
Candidate
:
:
None
=
>
None
Candidate
:
:
Match
(
ref
m
)
=
>
Some
(
m
.
start
(
)
)
Candidate
:
:
PossibleStartOfMatch
(
start
)
=
>
Some
(
start
)
}
}
}
pub
trait
Prefilter
:
Send
+
Sync
+
RefUnwindSafe
+
UnwindSafe
+
fmt
:
:
Debug
{
fn
next_candidate
(
&
self
state
:
&
mut
PrefilterState
haystack
:
&
[
u8
]
at
:
usize
)
-
>
Candidate
;
fn
clone_prefilter
(
&
self
)
-
>
Box
<
dyn
Prefilter
>
;
fn
heap_bytes
(
&
self
)
-
>
usize
;
fn
reports_false_positives
(
&
self
)
-
>
bool
{
true
}
fn
looks_for_non_start_of_match
(
&
self
)
-
>
bool
{
false
}
}
impl
<
'
a
P
:
Prefilter
+
?
Sized
>
Prefilter
for
&
'
a
P
{
#
[
inline
]
fn
next_candidate
(
&
self
state
:
&
mut
PrefilterState
haystack
:
&
[
u8
]
at
:
usize
)
-
>
Candidate
{
(
*
*
self
)
.
next_candidate
(
state
haystack
at
)
}
fn
clone_prefilter
(
&
self
)
-
>
Box
<
dyn
Prefilter
>
{
(
*
*
self
)
.
clone_prefilter
(
)
}
fn
heap_bytes
(
&
self
)
-
>
usize
{
(
*
*
self
)
.
heap_bytes
(
)
}
fn
reports_false_positives
(
&
self
)
-
>
bool
{
(
*
*
self
)
.
reports_false_positives
(
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
PrefilterObj
(
Box
<
dyn
Prefilter
>
)
;
impl
Clone
for
PrefilterObj
{
fn
clone
(
&
self
)
-
>
Self
{
PrefilterObj
(
self
.
0
.
clone_prefilter
(
)
)
}
}
impl
PrefilterObj
{
pub
fn
new
<
T
:
Prefilter
+
'
static
>
(
t
:
T
)
-
>
PrefilterObj
{
PrefilterObj
(
Box
:
:
new
(
t
)
)
}
pub
fn
as_ref
(
&
self
)
-
>
&
dyn
Prefilter
{
&
*
self
.
0
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
PrefilterState
{
skips
:
usize
skipped
:
usize
max_match_len
:
usize
inert
:
bool
last_scan_at
:
usize
}
impl
PrefilterState
{
const
MIN_SKIPS
:
usize
=
40
;
const
MIN_AVG_FACTOR
:
usize
=
2
;
pub
fn
new
(
max_match_len
:
usize
)
-
>
PrefilterState
{
PrefilterState
{
skips
:
0
skipped
:
0
max_match_len
inert
:
false
last_scan_at
:
0
}
}
pub
fn
disabled
(
)
-
>
PrefilterState
{
PrefilterState
{
skips
:
0
skipped
:
0
max_match_len
:
0
inert
:
true
last_scan_at
:
0
}
}
#
[
inline
]
fn
update_skipped_bytes
(
&
mut
self
skipped
:
usize
)
{
self
.
skips
+
=
1
;
self
.
skipped
+
=
skipped
;
}
#
[
inline
]
fn
update_at
(
&
mut
self
at
:
usize
)
{
if
at
>
self
.
last_scan_at
{
self
.
last_scan_at
=
at
;
}
}
#
[
inline
]
pub
fn
is_effective
(
&
mut
self
at
:
usize
)
-
>
bool
{
if
self
.
inert
{
return
false
;
}
if
at
<
self
.
last_scan_at
{
return
false
;
}
if
self
.
skips
<
PrefilterState
:
:
MIN_SKIPS
{
return
true
;
}
let
min_avg
=
PrefilterState
:
:
MIN_AVG_FACTOR
*
self
.
max_match_len
;
if
self
.
skipped
>
=
min_avg
*
self
.
skips
{
return
true
;
}
self
.
inert
=
true
;
false
}
}
#
[
derive
(
Debug
)
]
pub
struct
Builder
{
count
:
usize
ascii_case_insensitive
:
bool
start_bytes
:
StartBytesBuilder
rare_bytes
:
RareBytesBuilder
packed
:
Option
<
packed
:
:
Builder
>
}
impl
Builder
{
pub
fn
new
(
kind
:
MatchKind
)
-
>
Builder
{
let
pbuilder
=
kind
.
as_packed
(
)
.
map
(
|
kind
|
packed
:
:
Config
:
:
new
(
)
.
match_kind
(
kind
)
.
builder
(
)
)
;
Builder
{
count
:
0
ascii_case_insensitive
:
false
start_bytes
:
StartBytesBuilder
:
:
new
(
)
rare_bytes
:
RareBytesBuilder
:
:
new
(
)
packed
:
pbuilder
}
}
pub
fn
ascii_case_insensitive
(
mut
self
yes
:
bool
)
-
>
Builder
{
self
.
ascii_case_insensitive
=
yes
;
self
.
start_bytes
=
self
.
start_bytes
.
ascii_case_insensitive
(
yes
)
;
self
.
rare_bytes
=
self
.
rare_bytes
.
ascii_case_insensitive
(
yes
)
;
self
}
pub
fn
build
(
&
self
)
-
>
Option
<
PrefilterObj
>
{
match
(
self
.
start_bytes
.
build
(
)
self
.
rare_bytes
.
build
(
)
)
{
(
prestart
Some
(
_
)
prerare
Some
(
_
)
)
=
>
{
let
has_fewer_bytes
=
self
.
start_bytes
.
count
<
self
.
rare_bytes
.
count
;
let
has_rarer_bytes
=
self
.
start_bytes
.
rank_sum
<
=
self
.
rare_bytes
.
rank_sum
+
50
;
if
has_fewer_bytes
|
|
has_rarer_bytes
{
prestart
}
else
{
prerare
}
}
(
prestart
Some
(
_
)
None
)
=
>
prestart
(
None
prerare
Some
(
_
)
)
=
>
prerare
(
None
None
)
if
self
.
ascii_case_insensitive
=
>
None
(
None
None
)
=
>
self
.
packed
.
as_ref
(
)
.
and_then
(
|
b
|
b
.
build
(
)
)
.
map
(
|
s
|
PrefilterObj
:
:
new
(
Packed
(
s
)
)
)
}
}
pub
fn
add
(
&
mut
self
bytes
:
&
[
u8
]
)
{
self
.
count
+
=
1
;
self
.
start_bytes
.
add
(
bytes
)
;
self
.
rare_bytes
.
add
(
bytes
)
;
if
let
Some
(
ref
mut
pbuilder
)
=
self
.
packed
{
pbuilder
.
add
(
bytes
)
;
}
}
}
#
[
derive
(
Clone
Debug
)
]
struct
Packed
(
packed
:
:
Searcher
)
;
impl
Prefilter
for
Packed
{
fn
next_candidate
(
&
self
_state
:
&
mut
PrefilterState
haystack
:
&
[
u8
]
at
:
usize
)
-
>
Candidate
{
self
.
0
.
find_at
(
haystack
at
)
.
map_or
(
Candidate
:
:
None
Candidate
:
:
Match
)
}
fn
clone_prefilter
(
&
self
)
-
>
Box
<
dyn
Prefilter
>
{
Box
:
:
new
(
self
.
clone
(
)
)
}
fn
heap_bytes
(
&
self
)
-
>
usize
{
self
.
0
.
heap_bytes
(
)
}
fn
reports_false_positives
(
&
self
)
-
>
bool
{
false
}
}
#
[
derive
(
Clone
Debug
)
]
struct
RareBytesBuilder
{
ascii_case_insensitive
:
bool
rare_set
:
ByteSet
byte_offsets
:
RareByteOffsets
available
:
bool
count
:
usize
rank_sum
:
u16
}
#
[
derive
(
Clone
Copy
)
]
struct
ByteSet
(
[
bool
;
256
]
)
;
impl
ByteSet
{
fn
empty
(
)
-
>
ByteSet
{
ByteSet
(
[
false
;
256
]
)
}
fn
insert
(
&
mut
self
b
:
u8
)
-
>
bool
{
let
new
=
!
self
.
contains
(
b
)
;
self
.
0
[
b
as
usize
]
=
true
;
new
}
fn
contains
(
&
self
b
:
u8
)
-
>
bool
{
self
.
0
[
b
as
usize
]
}
}
impl
fmt
:
:
Debug
for
ByteSet
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
let
mut
bytes
=
vec
!
[
]
;
for
b
in
0
.
.
=
255
{
if
self
.
contains
(
b
)
{
bytes
.
push
(
b
)
;
}
}
f
.
debug_struct
(
"
ByteSet
"
)
.
field
(
"
set
"
&
bytes
)
.
finish
(
)
}
}
#
[
derive
(
Clone
Copy
)
]
struct
RareByteOffsets
{
set
:
[
RareByteOffset
;
256
]
}
impl
RareByteOffsets
{
pub
fn
empty
(
)
-
>
RareByteOffsets
{
RareByteOffsets
{
set
:
[
RareByteOffset
:
:
default
(
)
;
256
]
}
}
pub
fn
set
(
&
mut
self
byte
:
u8
off
:
RareByteOffset
)
{
self
.
set
[
byte
as
usize
]
.
max
=
cmp
:
:
max
(
self
.
set
[
byte
as
usize
]
.
max
off
.
max
)
;
}
}
impl
fmt
:
:
Debug
for
RareByteOffsets
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
let
mut
offsets
=
vec
!
[
]
;
for
off
in
self
.
set
.
iter
(
)
{
if
off
.
max
>
0
{
offsets
.
push
(
off
)
;
}
}
f
.
debug_struct
(
"
RareByteOffsets
"
)
.
field
(
"
set
"
&
offsets
)
.
finish
(
)
}
}
#
[
derive
(
Clone
Copy
Debug
)
]
struct
RareByteOffset
{
max
:
u8
}
impl
Default
for
RareByteOffset
{
fn
default
(
)
-
>
RareByteOffset
{
RareByteOffset
{
max
:
0
}
}
}
impl
RareByteOffset
{
fn
new
(
max
:
usize
)
-
>
Option
<
RareByteOffset
>
{
if
max
>
u8
:
:
MAX
as
usize
{
None
}
else
{
Some
(
RareByteOffset
{
max
:
max
as
u8
}
)
}
}
}
impl
RareBytesBuilder
{
fn
new
(
)
-
>
RareBytesBuilder
{
RareBytesBuilder
{
ascii_case_insensitive
:
false
rare_set
:
ByteSet
:
:
empty
(
)
byte_offsets
:
RareByteOffsets
:
:
empty
(
)
available
:
true
count
:
0
rank_sum
:
0
}
}
fn
ascii_case_insensitive
(
mut
self
yes
:
bool
)
-
>
RareBytesBuilder
{
self
.
ascii_case_insensitive
=
yes
;
self
}
fn
build
(
&
self
)
-
>
Option
<
PrefilterObj
>
{
if
!
self
.
available
|
|
self
.
count
>
3
{
return
None
;
}
let
(
mut
bytes
mut
len
)
=
(
[
0
;
3
]
0
)
;
for
b
in
0
.
.
=
255
{
if
self
.
rare_set
.
contains
(
b
)
{
bytes
[
len
]
=
b
as
u8
;
len
+
=
1
;
}
}
match
len
{
0
=
>
None
1
=
>
Some
(
PrefilterObj
:
:
new
(
RareBytesOne
{
byte1
:
bytes
[
0
]
offset
:
self
.
byte_offsets
.
set
[
bytes
[
0
]
as
usize
]
}
)
)
2
=
>
Some
(
PrefilterObj
:
:
new
(
RareBytesTwo
{
offsets
:
self
.
byte_offsets
byte1
:
bytes
[
0
]
byte2
:
bytes
[
1
]
}
)
)
3
=
>
Some
(
PrefilterObj
:
:
new
(
RareBytesThree
{
offsets
:
self
.
byte_offsets
byte1
:
bytes
[
0
]
byte2
:
bytes
[
1
]
byte3
:
bytes
[
2
]
}
)
)
_
=
>
unreachable
!
(
)
}
}
fn
add
(
&
mut
self
bytes
:
&
[
u8
]
)
{
if
!
self
.
available
{
return
;
}
if
self
.
count
>
3
{
self
.
available
=
false
;
return
;
}
if
bytes
.
len
(
)
>
=
256
{
self
.
available
=
false
;
return
;
}
let
mut
rarest
=
match
bytes
.
get
(
0
)
{
None
=
>
return
Some
(
&
b
)
=
>
(
b
freq_rank
(
b
)
)
}
;
let
mut
found
=
false
;
for
(
pos
&
b
)
in
bytes
.
iter
(
)
.
enumerate
(
)
{
self
.
set_offset
(
pos
b
)
;
if
found
{
continue
;
}
if
self
.
rare_set
.
contains
(
b
)
{
found
=
true
;
continue
;
}
let
rank
=
freq_rank
(
b
)
;
if
rank
<
rarest
.
1
{
rarest
=
(
b
rank
)
;
}
}
if
!
found
{
self
.
add_rare_byte
(
rarest
.
0
)
;
}
}
fn
set_offset
(
&
mut
self
pos
:
usize
byte
:
u8
)
{
let
offset
=
RareByteOffset
:
:
new
(
pos
)
.
unwrap
(
)
;
self
.
byte_offsets
.
set
(
byte
offset
)
;
if
self
.
ascii_case_insensitive
{
self
.
byte_offsets
.
set
(
opposite_ascii_case
(
byte
)
offset
)
;
}
}
fn
add_rare_byte
(
&
mut
self
byte
:
u8
)
{
self
.
add_one_rare_byte
(
byte
)
;
if
self
.
ascii_case_insensitive
{
self
.
add_one_rare_byte
(
opposite_ascii_case
(
byte
)
)
;
}
}
fn
add_one_rare_byte
(
&
mut
self
byte
:
u8
)
{
if
self
.
rare_set
.
insert
(
byte
)
{
self
.
count
+
=
1
;
self
.
rank_sum
+
=
freq_rank
(
byte
)
as
u16
;
}
}
}
#
[
derive
(
Clone
Debug
)
]
struct
RareBytesOne
{
byte1
:
u8
offset
:
RareByteOffset
}
impl
Prefilter
for
RareBytesOne
{
fn
next_candidate
(
&
self
state
:
&
mut
PrefilterState
haystack
:
&
[
u8
]
at
:
usize
)
-
>
Candidate
{
memchr
(
self
.
byte1
&
haystack
[
at
.
.
]
)
.
map
(
|
i
|
{
let
pos
=
at
+
i
;
state
.
last_scan_at
=
pos
;
cmp
:
:
max
(
at
pos
.
saturating_sub
(
self
.
offset
.
max
as
usize
)
)
}
)
.
map_or
(
Candidate
:
:
None
Candidate
:
:
PossibleStartOfMatch
)
}
fn
clone_prefilter
(
&
self
)
-
>
Box
<
dyn
Prefilter
>
{
Box
:
:
new
(
self
.
clone
(
)
)
}
fn
heap_bytes
(
&
self
)
-
>
usize
{
0
}
fn
looks_for_non_start_of_match
(
&
self
)
-
>
bool
{
true
}
}
#
[
derive
(
Clone
Debug
)
]
struct
RareBytesTwo
{
offsets
:
RareByteOffsets
byte1
:
u8
byte2
:
u8
}
impl
Prefilter
for
RareBytesTwo
{
fn
next_candidate
(
&
self
state
:
&
mut
PrefilterState
haystack
:
&
[
u8
]
at
:
usize
)
-
>
Candidate
{
memchr2
(
self
.
byte1
self
.
byte2
&
haystack
[
at
.
.
]
)
.
map
(
|
i
|
{
let
pos
=
at
+
i
;
state
.
update_at
(
pos
)
;
let
offset
=
self
.
offsets
.
set
[
haystack
[
pos
]
as
usize
]
.
max
;
cmp
:
:
max
(
at
pos
.
saturating_sub
(
offset
as
usize
)
)
}
)
.
map_or
(
Candidate
:
:
None
Candidate
:
:
PossibleStartOfMatch
)
}
fn
clone_prefilter
(
&
self
)
-
>
Box
<
dyn
Prefilter
>
{
Box
:
:
new
(
self
.
clone
(
)
)
}
fn
heap_bytes
(
&
self
)
-
>
usize
{
0
}
fn
looks_for_non_start_of_match
(
&
self
)
-
>
bool
{
true
}
}
#
[
derive
(
Clone
Debug
)
]
struct
RareBytesThree
{
offsets
:
RareByteOffsets
byte1
:
u8
byte2
:
u8
byte3
:
u8
}
impl
Prefilter
for
RareBytesThree
{
fn
next_candidate
(
&
self
state
:
&
mut
PrefilterState
haystack
:
&
[
u8
]
at
:
usize
)
-
>
Candidate
{
memchr3
(
self
.
byte1
self
.
byte2
self
.
byte3
&
haystack
[
at
.
.
]
)
.
map
(
|
i
|
{
let
pos
=
at
+
i
;
state
.
update_at
(
pos
)
;
let
offset
=
self
.
offsets
.
set
[
haystack
[
pos
]
as
usize
]
.
max
;
cmp
:
:
max
(
at
pos
.
saturating_sub
(
offset
as
usize
)
)
}
)
.
map_or
(
Candidate
:
:
None
Candidate
:
:
PossibleStartOfMatch
)
}
fn
clone_prefilter
(
&
self
)
-
>
Box
<
dyn
Prefilter
>
{
Box
:
:
new
(
self
.
clone
(
)
)
}
fn
heap_bytes
(
&
self
)
-
>
usize
{
0
}
fn
looks_for_non_start_of_match
(
&
self
)
-
>
bool
{
true
}
}
#
[
derive
(
Clone
Debug
)
]
struct
StartBytesBuilder
{
ascii_case_insensitive
:
bool
byteset
:
Vec
<
bool
>
count
:
usize
rank_sum
:
u16
}
impl
StartBytesBuilder
{
fn
new
(
)
-
>
StartBytesBuilder
{
StartBytesBuilder
{
ascii_case_insensitive
:
false
byteset
:
vec
!
[
false
;
256
]
count
:
0
rank_sum
:
0
}
}
fn
ascii_case_insensitive
(
mut
self
yes
:
bool
)
-
>
StartBytesBuilder
{
self
.
ascii_case_insensitive
=
yes
;
self
}
fn
build
(
&
self
)
-
>
Option
<
PrefilterObj
>
{
if
self
.
count
>
3
{
return
None
;
}
let
(
mut
bytes
mut
len
)
=
(
[
0
;
3
]
0
)
;
for
b
in
0
.
.
256
{
if
!
self
.
byteset
[
b
]
{
continue
;
}
if
b
>
0x7F
{
return
None
;
}
bytes
[
len
]
=
b
as
u8
;
len
+
=
1
;
}
match
len
{
0
=
>
None
1
=
>
Some
(
PrefilterObj
:
:
new
(
StartBytesOne
{
byte1
:
bytes
[
0
]
}
)
)
2
=
>
Some
(
PrefilterObj
:
:
new
(
StartBytesTwo
{
byte1
:
bytes
[
0
]
byte2
:
bytes
[
1
]
}
)
)
3
=
>
Some
(
PrefilterObj
:
:
new
(
StartBytesThree
{
byte1
:
bytes
[
0
]
byte2
:
bytes
[
1
]
byte3
:
bytes
[
2
]
}
)
)
_
=
>
unreachable
!
(
)
}
}
fn
add
(
&
mut
self
bytes
:
&
[
u8
]
)
{
if
self
.
count
>
3
{
return
;
}
if
let
Some
(
&
byte
)
=
bytes
.
get
(
0
)
{
self
.
add_one_byte
(
byte
)
;
if
self
.
ascii_case_insensitive
{
self
.
add_one_byte
(
opposite_ascii_case
(
byte
)
)
;
}
}
}
fn
add_one_byte
(
&
mut
self
byte
:
u8
)
{
if
!
self
.
byteset
[
byte
as
usize
]
{
self
.
byteset
[
byte
as
usize
]
=
true
;
self
.
count
+
=
1
;
self
.
rank_sum
+
=
freq_rank
(
byte
)
as
u16
;
}
}
}
#
[
derive
(
Clone
Debug
)
]
struct
StartBytesOne
{
byte1
:
u8
}
impl
Prefilter
for
StartBytesOne
{
fn
next_candidate
(
&
self
_state
:
&
mut
PrefilterState
haystack
:
&
[
u8
]
at
:
usize
)
-
>
Candidate
{
memchr
(
self
.
byte1
&
haystack
[
at
.
.
]
)
.
map
(
|
i
|
at
+
i
)
.
map_or
(
Candidate
:
:
None
Candidate
:
:
PossibleStartOfMatch
)
}
fn
clone_prefilter
(
&
self
)
-
>
Box
<
dyn
Prefilter
>
{
Box
:
:
new
(
self
.
clone
(
)
)
}
fn
heap_bytes
(
&
self
)
-
>
usize
{
0
}
}
#
[
derive
(
Clone
Debug
)
]
struct
StartBytesTwo
{
byte1
:
u8
byte2
:
u8
}
impl
Prefilter
for
StartBytesTwo
{
fn
next_candidate
(
&
self
_state
:
&
mut
PrefilterState
haystack
:
&
[
u8
]
at
:
usize
)
-
>
Candidate
{
memchr2
(
self
.
byte1
self
.
byte2
&
haystack
[
at
.
.
]
)
.
map
(
|
i
|
at
+
i
)
.
map_or
(
Candidate
:
:
None
Candidate
:
:
PossibleStartOfMatch
)
}
fn
clone_prefilter
(
&
self
)
-
>
Box
<
dyn
Prefilter
>
{
Box
:
:
new
(
self
.
clone
(
)
)
}
fn
heap_bytes
(
&
self
)
-
>
usize
{
0
}
}
#
[
derive
(
Clone
Debug
)
]
struct
StartBytesThree
{
byte1
:
u8
byte2
:
u8
byte3
:
u8
}
impl
Prefilter
for
StartBytesThree
{
fn
next_candidate
(
&
self
_state
:
&
mut
PrefilterState
haystack
:
&
[
u8
]
at
:
usize
)
-
>
Candidate
{
memchr3
(
self
.
byte1
self
.
byte2
self
.
byte3
&
haystack
[
at
.
.
]
)
.
map
(
|
i
|
at
+
i
)
.
map_or
(
Candidate
:
:
None
Candidate
:
:
PossibleStartOfMatch
)
}
fn
clone_prefilter
(
&
self
)
-
>
Box
<
dyn
Prefilter
>
{
Box
:
:
new
(
self
.
clone
(
)
)
}
fn
heap_bytes
(
&
self
)
-
>
usize
{
0
}
}
#
[
inline
]
pub
fn
next
<
P
:
Prefilter
>
(
prestate
:
&
mut
PrefilterState
prefilter
:
P
haystack
:
&
[
u8
]
at
:
usize
)
-
>
Candidate
{
let
cand
=
prefilter
.
next_candidate
(
prestate
haystack
at
)
;
match
cand
{
Candidate
:
:
None
=
>
{
prestate
.
update_skipped_bytes
(
haystack
.
len
(
)
-
at
)
;
}
Candidate
:
:
Match
(
ref
m
)
=
>
{
prestate
.
update_skipped_bytes
(
m
.
start
(
)
-
at
)
;
}
Candidate
:
:
PossibleStartOfMatch
(
i
)
=
>
{
prestate
.
update_skipped_bytes
(
i
-
at
)
;
}
}
cand
}
pub
fn
opposite_ascii_case
(
b
:
u8
)
-
>
u8
{
if
b
'
A
'
<
=
b
&
&
b
<
=
b
'
Z
'
{
b
.
to_ascii_lowercase
(
)
}
else
if
b
'
a
'
<
=
b
&
&
b
<
=
b
'
z
'
{
b
.
to_ascii_uppercase
(
)
}
else
{
b
}
}
fn
freq_rank
(
b
:
u8
)
-
>
u8
{
use
crate
:
:
byte_frequencies
:
:
BYTE_FREQUENCIES
;
BYTE_FREQUENCIES
[
b
as
usize
]
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
scratch
(
)
{
let
mut
b
=
Builder
:
:
new
(
MatchKind
:
:
LeftmostFirst
)
;
b
.
add
(
b
"
Sherlock
"
)
;
b
.
add
(
b
"
locjaw
"
)
;
let
s
=
b
.
build
(
)
.
unwrap
(
)
;
println
!
(
"
{
:
?
}
"
s
)
;
}
}
