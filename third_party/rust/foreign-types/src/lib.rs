#
!
[
no_std
]
#
!
[
warn
(
missing_docs
)
]
#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
foreign
-
types
/
0
.
3
"
)
]
use
core
:
:
cell
:
:
UnsafeCell
;
pub
struct
Opaque
(
UnsafeCell
<
(
)
>
)
;
pub
trait
ForeignType
:
Sized
{
type
CType
;
type
Ref
:
ForeignTypeRef
<
CType
=
Self
:
:
CType
>
;
unsafe
fn
from_ptr
(
ptr
:
*
mut
Self
:
:
CType
)
-
>
Self
;
fn
as_ptr
(
&
self
)
-
>
*
mut
Self
:
:
CType
;
}
pub
trait
ForeignTypeRef
:
Sized
{
type
CType
;
#
[
inline
]
unsafe
fn
from_ptr
<
'
a
>
(
ptr
:
*
mut
Self
:
:
CType
)
-
>
&
'
a
Self
{
&
*
(
ptr
as
*
mut
_
)
}
#
[
inline
]
unsafe
fn
from_ptr_mut
<
'
a
>
(
ptr
:
*
mut
Self
:
:
CType
)
-
>
&
'
a
mut
Self
{
&
mut
*
(
ptr
as
*
mut
_
)
}
#
[
inline
]
fn
as_ptr
(
&
self
)
-
>
*
mut
Self
:
:
CType
{
self
as
*
const
_
as
*
mut
_
}
}
#
[
macro_export
]
macro_rules
!
foreign_type
{
(
(
#
[
impl_attr
:
meta
]
)
*
type
CType
=
ctype
:
ty
;
fn
drop
=
drop
:
expr
;
(
fn
clone
=
clone
:
expr
;
)
*
(
#
[
owned_attr
:
meta
]
)
*
pub
struct
owned
:
ident
;
(
#
[
borrowed_attr
:
meta
]
)
*
pub
struct
borrowed
:
ident
;
)
=
>
{
(
#
[
owned_attr
]
)
*
pub
struct
owned
(
*
mut
ctype
)
;
(
#
[
impl_attr
]
)
*
impl
crate
:
:
ForeignType
for
owned
{
type
CType
=
ctype
;
type
Ref
=
borrowed
;
#
[
inline
]
unsafe
fn
from_ptr
(
ptr
:
*
mut
ctype
)
-
>
owned
{
owned
(
ptr
)
}
#
[
inline
]
fn
as_ptr
(
&
self
)
-
>
*
mut
ctype
{
self
.
0
}
}
impl
Drop
for
owned
{
#
[
inline
]
fn
drop
(
&
mut
self
)
{
unsafe
{
drop
(
self
.
0
)
}
}
}
(
impl
Clone
for
owned
{
#
[
inline
]
fn
clone
(
&
self
)
-
>
owned
{
unsafe
{
let
handle
:
*
mut
ctype
=
clone
(
self
.
0
)
;
crate
:
:
ForeignType
:
:
from_ptr
(
handle
)
}
}
}
impl
:
:
std
:
:
borrow
:
:
ToOwned
for
borrowed
{
type
Owned
=
owned
;
#
[
inline
]
fn
to_owned
(
&
self
)
-
>
owned
{
unsafe
{
let
handle
:
*
mut
ctype
=
clone
(
crate
:
:
ForeignTypeRef
:
:
as_ptr
(
self
)
)
;
crate
:
:
ForeignType
:
:
from_ptr
(
handle
)
}
}
}
)
*
impl
:
:
std
:
:
ops
:
:
Deref
for
owned
{
type
Target
=
borrowed
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
borrowed
{
unsafe
{
crate
:
:
ForeignTypeRef
:
:
from_ptr
(
self
.
0
)
}
}
}
impl
:
:
std
:
:
ops
:
:
DerefMut
for
owned
{
#
[
inline
]
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
borrowed
{
unsafe
{
crate
:
:
ForeignTypeRef
:
:
from_ptr_mut
(
self
.
0
)
}
}
}
impl
:
:
std
:
:
borrow
:
:
Borrow
<
borrowed
>
for
owned
{
#
[
inline
]
fn
borrow
(
&
self
)
-
>
&
borrowed
{
&
*
*
self
}
}
impl
:
:
std
:
:
convert
:
:
AsRef
<
borrowed
>
for
owned
{
#
[
inline
]
fn
as_ref
(
&
self
)
-
>
&
borrowed
{
&
*
*
self
}
}
(
#
[
borrowed_attr
]
)
*
pub
struct
borrowed
(
crate
:
:
Opaque
)
;
(
#
[
impl_attr
]
)
*
impl
crate
:
:
ForeignTypeRef
for
borrowed
{
type
CType
=
ctype
;
}
}
}
