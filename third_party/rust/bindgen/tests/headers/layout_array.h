typedef
unsigned
char
uint8_t
;
typedef
unsigned
short
uint16_t
;
typedef
unsigned
int
uint32_t
;
typedef
unsigned
long
long
uint64_t
;
typedef
long
long
size_t
;
#
define
RTE_CACHE_LINE_SIZE
64
#
define
__rte_aligned
(
a
)
__attribute__
(
(
__aligned__
(
a
)
)
)
#
define
__rte_cache_aligned
__rte_aligned
(
RTE_CACHE_LINE_SIZE
)
#
define
RTE_MEMPOOL_OPS_NAMESIZE
32
/
*
*
<
Max
length
of
ops
struct
name
.
*
/
typedef
int
(
*
rte_mempool_alloc_t
)
(
struct
rte_mempool
*
mp
)
;
typedef
void
(
*
rte_mempool_free_t
)
(
struct
rte_mempool
*
mp
)
;
typedef
int
(
*
rte_mempool_enqueue_t
)
(
struct
rte_mempool
*
mp
void
*
const
*
obj_table
unsigned
int
n
)
;
typedef
int
(
*
rte_mempool_dequeue_t
)
(
struct
rte_mempool
*
mp
void
*
*
obj_table
unsigned
int
n
)
;
typedef
unsigned
(
*
rte_mempool_get_count
)
(
const
struct
rte_mempool
*
mp
)
;
struct
rte_mempool_ops
{
char
name
[
RTE_MEMPOOL_OPS_NAMESIZE
]
;
rte_mempool_alloc_t
alloc
;
rte_mempool_free_t
free
;
rte_mempool_enqueue_t
enqueue
;
rte_mempool_dequeue_t
dequeue
;
rte_mempool_get_count
get_count
;
}
__rte_cache_aligned
;
#
define
RTE_MEMPOOL_MAX_OPS_IDX
16
/
*
*
<
Max
registered
ops
structs
*
/
typedef
struct
{
volatile
int
locked
;
}
rte_spinlock_t
;
struct
rte_mempool_ops_table
{
rte_spinlock_t
sl
;
uint32_t
num_ops
;
struct
rte_mempool_ops
ops
[
RTE_MEMPOOL_MAX_OPS_IDX
]
;
}
__rte_cache_aligned
;
#
define
RTE_HEAP_NUM_FREELISTS
13
#
define
LIST_HEAD
(
name
type
)
\
struct
name
{
\
struct
type
*
lh_first
;
/
*
first
element
*
/
\
}
struct
malloc_heap
{
rte_spinlock_t
lock
;
LIST_HEAD
(
malloc_elem
)
free_head
[
RTE_HEAP_NUM_FREELISTS
]
;
unsigned
alloc_count
;
size_t
total_size
;
}
__rte_cache_aligned
;
