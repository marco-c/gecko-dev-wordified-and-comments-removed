typedef
unsigned
char
uint8_t
;
typedef
int
int32_t
;
typedef
unsigned
int
uint32_t
;
typedef
unsigned
long
long
uint64_t
;
typedef
unsigned
long
long
size_t
;
typedef
unsigned
long
long
uintptr_t
;
#
define
JS_PUNBOX64
#
define
IS_LITTLE_ENDIAN
#
if
defined
(
__GNUC__
)
|
|
defined
(
__xlc__
)
|
|
defined
(
__xlC__
)
#
define
JSVAL_ALIGNMENT
__attribute__
(
(
aligned
(
8
)
)
)
#
elif
defined
(
_MSC_VER
)
#
define
JSVAL_ALIGNMENT
#
elif
defined
(
__SUNPRO_C
)
|
|
defined
(
__SUNPRO_CC
)
#
define
JSVAL_ALIGNMENT
#
elif
defined
(
__HP_cc
)
|
|
defined
(
__HP_aCC
)
#
define
JSVAL_ALIGNMENT
#
endif
#
if
defined
(
JS_PUNBOX64
)
#
define
JSVAL_TAG_SHIFT
47
#
endif
#
if
!
defined
(
__SUNPRO_CC
)
&
&
!
defined
(
__xlC__
)
#
if
defined
(
_MSC_VER
)
#
define
JS_ENUM_HEADER
(
id
type
)
enum
id
:
type
#
define
JS_ENUM_FOOTER
(
id
)
#
else
#
define
JS_ENUM_HEADER
(
id
type
)
enum
id
#
define
JS_ENUM_FOOTER
(
id
)
__attribute__
(
(
packed
)
)
#
endif
JS_ENUM_HEADER
(
JSValueType
uint8_t
)
{
JSVAL_TYPE_DOUBLE
=
0x00
JSVAL_TYPE_INT32
=
0x01
JSVAL_TYPE_UNDEFINED
=
0x02
JSVAL_TYPE_BOOLEAN
=
0x03
JSVAL_TYPE_MAGIC
=
0x04
JSVAL_TYPE_STRING
=
0x05
JSVAL_TYPE_SYMBOL
=
0x06
JSVAL_TYPE_NULL
=
0x07
JSVAL_TYPE_OBJECT
=
0x08
JSVAL_TYPE_UNKNOWN
=
0x20
JSVAL_TYPE_MISSING
=
0x21
}
JS_ENUM_FOOTER
(
JSValueType
)
;
static_assert
(
sizeof
(
JSValueType
)
=
=
1
"
compiler
typed
enum
support
is
apparently
buggy
"
)
;
#
if
defined
(
JS_NUNBOX32
)
JS_ENUM_HEADER
(
JSValueTag
uint32_t
)
{
JSVAL_TAG_CLEAR
=
0xFFFFFF80
JSVAL_TAG_INT32
=
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_INT32
JSVAL_TAG_UNDEFINED
=
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_UNDEFINED
JSVAL_TAG_STRING
=
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_STRING
JSVAL_TAG_SYMBOL
=
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_SYMBOL
JSVAL_TAG_BOOLEAN
=
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_BOOLEAN
JSVAL_TAG_MAGIC
=
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_MAGIC
JSVAL_TAG_NULL
=
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_NULL
JSVAL_TAG_OBJECT
=
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_OBJECT
}
JS_ENUM_FOOTER
(
JSValueTag
)
;
static_assert
(
sizeof
(
JSValueTag
)
=
=
sizeof
(
uint32_t
)
"
compiler
typed
enum
support
is
apparently
buggy
"
)
;
#
elif
defined
(
JS_PUNBOX64
)
JS_ENUM_HEADER
(
JSValueTag
uint32_t
)
{
JSVAL_TAG_MAX_DOUBLE
=
0x1FFF0
JSVAL_TAG_INT32
=
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_INT32
JSVAL_TAG_UNDEFINED
=
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_UNDEFINED
JSVAL_TAG_STRING
=
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_STRING
JSVAL_TAG_SYMBOL
=
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_SYMBOL
JSVAL_TAG_BOOLEAN
=
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_BOOLEAN
JSVAL_TAG_MAGIC
=
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_MAGIC
JSVAL_TAG_NULL
=
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_NULL
JSVAL_TAG_OBJECT
=
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_OBJECT
}
JS_ENUM_FOOTER
(
JSValueTag
)
;
static_assert
(
sizeof
(
JSValueTag
)
=
=
sizeof
(
uint32_t
)
"
compiler
typed
enum
support
is
apparently
buggy
"
)
;
JS_ENUM_HEADER
(
JSValueShiftedTag
uint64_t
)
{
JSVAL_SHIFTED_TAG_MAX_DOUBLE
=
(
(
(
(
uint64_t
)
JSVAL_TAG_MAX_DOUBLE
)
<
<
JSVAL_TAG_SHIFT
)
|
0xFFFFFFFF
)
JSVAL_SHIFTED_TAG_INT32
=
(
(
(
uint64_t
)
JSVAL_TAG_INT32
)
<
<
JSVAL_TAG_SHIFT
)
JSVAL_SHIFTED_TAG_UNDEFINED
=
(
(
(
uint64_t
)
JSVAL_TAG_UNDEFINED
)
<
<
JSVAL_TAG_SHIFT
)
JSVAL_SHIFTED_TAG_STRING
=
(
(
(
uint64_t
)
JSVAL_TAG_STRING
)
<
<
JSVAL_TAG_SHIFT
)
JSVAL_SHIFTED_TAG_SYMBOL
=
(
(
(
uint64_t
)
JSVAL_TAG_SYMBOL
)
<
<
JSVAL_TAG_SHIFT
)
JSVAL_SHIFTED_TAG_BOOLEAN
=
(
(
(
uint64_t
)
JSVAL_TAG_BOOLEAN
)
<
<
JSVAL_TAG_SHIFT
)
JSVAL_SHIFTED_TAG_MAGIC
=
(
(
(
uint64_t
)
JSVAL_TAG_MAGIC
)
<
<
JSVAL_TAG_SHIFT
)
JSVAL_SHIFTED_TAG_NULL
=
(
(
(
uint64_t
)
JSVAL_TAG_NULL
)
<
<
JSVAL_TAG_SHIFT
)
JSVAL_SHIFTED_TAG_OBJECT
=
(
(
(
uint64_t
)
JSVAL_TAG_OBJECT
)
<
<
JSVAL_TAG_SHIFT
)
}
JS_ENUM_FOOTER
(
JSValueShiftedTag
)
;
static_assert
(
sizeof
(
JSValueShiftedTag
)
=
=
sizeof
(
uint64_t
)
"
compiler
typed
enum
support
is
apparently
buggy
"
)
;
#
endif
#
undef
JS_ENUM_HEADER
#
undef
JS_ENUM_FOOTER
#
else
typedef
uint8_t
JSValueType
;
#
define
JSVAL_TYPE_DOUBLE
(
(
uint8_t
)
0x00
)
#
define
JSVAL_TYPE_INT32
(
(
uint8_t
)
0x01
)
#
define
JSVAL_TYPE_UNDEFINED
(
(
uint8_t
)
0x02
)
#
define
JSVAL_TYPE_BOOLEAN
(
(
uint8_t
)
0x03
)
#
define
JSVAL_TYPE_MAGIC
(
(
uint8_t
)
0x04
)
#
define
JSVAL_TYPE_STRING
(
(
uint8_t
)
0x05
)
#
define
JSVAL_TYPE_SYMBOL
(
(
uint8_t
)
0x06
)
#
define
JSVAL_TYPE_NULL
(
(
uint8_t
)
0x07
)
#
define
JSVAL_TYPE_OBJECT
(
(
uint8_t
)
0x08
)
#
define
JSVAL_TYPE_UNKNOWN
(
(
uint8_t
)
0x20
)
#
if
defined
(
JS_NUNBOX32
)
typedef
uint32_t
JSValueTag
;
#
define
JSVAL_TAG_CLEAR
(
(
uint32_t
)
(
0xFFFFFF80
)
)
#
define
JSVAL_TAG_INT32
(
(
uint32_t
)
(
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_INT32
)
)
#
define
JSVAL_TAG_UNDEFINED
(
(
uint32_t
)
(
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_UNDEFINED
)
)
#
define
JSVAL_TAG_STRING
(
(
uint32_t
)
(
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_STRING
)
)
#
define
JSVAL_TAG_SYMBOL
(
(
uint32_t
)
(
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_SYMBOL
)
)
#
define
JSVAL_TAG_BOOLEAN
(
(
uint32_t
)
(
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_BOOLEAN
)
)
#
define
JSVAL_TAG_MAGIC
(
(
uint32_t
)
(
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_MAGIC
)
)
#
define
JSVAL_TAG_NULL
(
(
uint32_t
)
(
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_NULL
)
)
#
define
JSVAL_TAG_OBJECT
(
(
uint32_t
)
(
JSVAL_TAG_CLEAR
|
JSVAL_TYPE_OBJECT
)
)
#
elif
defined
(
JS_PUNBOX64
)
typedef
uint32_t
JSValueTag
;
#
define
JSVAL_TAG_MAX_DOUBLE
(
(
uint32_t
)
(
0x1FFF0
)
)
#
define
JSVAL_TAG_INT32
(
uint32_t
)
(
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_INT32
)
#
define
JSVAL_TAG_UNDEFINED
(
uint32_t
)
(
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_UNDEFINED
)
#
define
JSVAL_TAG_STRING
(
uint32_t
)
(
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_STRING
)
#
define
JSVAL_TAG_SYMBOL
(
uint32_t
)
(
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_SYMBOL
)
#
define
JSVAL_TAG_BOOLEAN
(
uint32_t
)
(
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_BOOLEAN
)
#
define
JSVAL_TAG_MAGIC
(
uint32_t
)
(
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_MAGIC
)
#
define
JSVAL_TAG_NULL
(
uint32_t
)
(
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_NULL
)
#
define
JSVAL_TAG_OBJECT
(
uint32_t
)
(
JSVAL_TAG_MAX_DOUBLE
|
JSVAL_TYPE_OBJECT
)
typedef
uint64_t
JSValueShiftedTag
;
#
define
JSVAL_SHIFTED_TAG_MAX_DOUBLE
(
(
(
(
uint64_t
)
JSVAL_TAG_MAX_DOUBLE
)
<
<
JSVAL_TAG_SHIFT
)
|
0xFFFFFFFF
)
#
define
JSVAL_SHIFTED_TAG_INT32
(
(
(
uint64_t
)
JSVAL_TAG_INT32
)
<
<
JSVAL_TAG_SHIFT
)
#
define
JSVAL_SHIFTED_TAG_UNDEFINED
(
(
(
uint64_t
)
JSVAL_TAG_UNDEFINED
)
<
<
JSVAL_TAG_SHIFT
)
#
define
JSVAL_SHIFTED_TAG_STRING
(
(
(
uint64_t
)
JSVAL_TAG_STRING
)
<
<
JSVAL_TAG_SHIFT
)
#
define
JSVAL_SHIFTED_TAG_SYMBOL
(
(
(
uint64_t
)
JSVAL_TAG_SYMBOL
)
<
<
JSVAL_TAG_SHIFT
)
#
define
JSVAL_SHIFTED_TAG_BOOLEAN
(
(
(
uint64_t
)
JSVAL_TAG_BOOLEAN
)
<
<
JSVAL_TAG_SHIFT
)
#
define
JSVAL_SHIFTED_TAG_MAGIC
(
(
(
uint64_t
)
JSVAL_TAG_MAGIC
)
<
<
JSVAL_TAG_SHIFT
)
#
define
JSVAL_SHIFTED_TAG_NULL
(
(
(
uint64_t
)
JSVAL_TAG_NULL
)
<
<
JSVAL_TAG_SHIFT
)
#
define
JSVAL_SHIFTED_TAG_OBJECT
(
(
(
uint64_t
)
JSVAL_TAG_OBJECT
)
<
<
JSVAL_TAG_SHIFT
)
#
endif
#
endif
#
if
defined
(
JS_NUNBOX32
)
#
define
JSVAL_TYPE_TO_TAG
(
type
)
(
(
JSValueTag
)
(
JSVAL_TAG_CLEAR
|
(
type
)
)
)
#
define
JSVAL_LOWER_INCL_TAG_OF_OBJ_OR_NULL_SET
JSVAL_TAG_NULL
#
define
JSVAL_UPPER_EXCL_TAG_OF_PRIMITIVE_SET
JSVAL_TAG_OBJECT
#
define
JSVAL_UPPER_INCL_TAG_OF_NUMBER_SET
JSVAL_TAG_INT32
#
define
JSVAL_LOWER_INCL_TAG_OF_GCTHING_SET
JSVAL_TAG_STRING
#
elif
defined
(
JS_PUNBOX64
)
#
define
JSVAL_PAYLOAD_MASK
0x00007FFFFFFFFFFFLL
#
define
JSVAL_TAG_MASK
0xFFFF800000000000LL
#
define
JSVAL_TYPE_TO_TAG
(
type
)
(
(
JSValueTag
)
(
JSVAL_TAG_MAX_DOUBLE
|
(
type
)
)
)
#
define
JSVAL_TYPE_TO_SHIFTED_TAG
(
type
)
(
(
(
uint64_t
)
JSVAL_TYPE_TO_TAG
(
type
)
)
<
<
JSVAL_TAG_SHIFT
)
#
define
JSVAL_LOWER_INCL_TAG_OF_OBJ_OR_NULL_SET
JSVAL_TAG_NULL
#
define
JSVAL_UPPER_EXCL_TAG_OF_PRIMITIVE_SET
JSVAL_TAG_OBJECT
#
define
JSVAL_UPPER_INCL_TAG_OF_NUMBER_SET
JSVAL_TAG_INT32
#
define
JSVAL_LOWER_INCL_TAG_OF_GCTHING_SET
JSVAL_TAG_STRING
#
define
JSVAL_LOWER_INCL_SHIFTED_TAG_OF_OBJ_OR_NULL_SET
JSVAL_SHIFTED_TAG_NULL
#
define
JSVAL_UPPER_EXCL_SHIFTED_TAG_OF_PRIMITIVE_SET
JSVAL_SHIFTED_TAG_OBJECT
#
define
JSVAL_UPPER_EXCL_SHIFTED_TAG_OF_NUMBER_SET
JSVAL_SHIFTED_TAG_UNDEFINED
#
define
JSVAL_LOWER_INCL_SHIFTED_TAG_OF_GCTHING_SET
JSVAL_SHIFTED_TAG_STRING
#
endif
typedef
enum
JSWhyMagic
{
JS_ELEMENTS_HOLE
JS_NO_ITER_VALUE
JS_GENERATOR_CLOSING
JS_NO_CONSTANT
JS_THIS_POISON
JS_ARG_POISON
JS_SERIALIZE_NO_NODE
JS_LAZY_ARGUMENTS
JS_OPTIMIZED_ARGUMENTS
JS_IS_CONSTRUCTING
JS_OVERWRITTEN_CALLEE
JS_BLOCK_NEEDS_CLONE
JS_HASH_KEY_EMPTY
JS_ION_ERROR
JS_ION_BAILOUT
JS_OPTIMIZED_OUT
JS_UNINITIALIZED_LEXICAL
JS_GENERIC_MAGIC
JS_WHY_MAGIC_COUNT
}
JSWhyMagic
;
#
if
defined
(
IS_LITTLE_ENDIAN
)
#
if
defined
(
JS_NUNBOX32
)
typedef
union
jsval_layout
{
uint64_t
asBits
;
struct
{
union
{
int32_t
i32
;
uint32_t
u32
;
uint32_t
boo
;
JSString
*
str
;
JS
:
:
Symbol
*
sym
;
JSObject
*
obj
;
js
:
:
gc
:
:
Cell
*
cell
;
void
*
ptr
;
JSWhyMagic
why
;
size_t
word
;
uintptr_t
uintptr
;
}
payload
;
JSValueTag
tag
;
}
s
;
double
asDouble
;
void
*
asPtr
;
}
JSVAL_ALIGNMENT
jsval_layout
;
#
elif
defined
(
JS_PUNBOX64
)
typedef
union
jsval_layout
{
uint64_t
asBits
;
#
if
!
defined
(
_WIN64
)
struct
{
uint64_t
payload47
:
47
;
JSValueTag
tag
:
17
;
}
debugView
;
#
endif
struct
{
union
{
int32_t
i32
;
uint32_t
u32
;
JSWhyMagic
why
;
}
payload
;
}
s
;
double
asDouble
;
void
*
asPtr
;
size_t
asWord
;
uintptr_t
asUIntPtr
;
}
JSVAL_ALIGNMENT
jsval_layout
;
#
endif
#
else
#
if
defined
(
JS_NUNBOX32
)
typedef
union
jsval_layout
{
uint64_t
asBits
;
struct
{
JSValueTag
tag
;
union
{
int32_t
i32
;
uint32_t
u32
;
uint32_t
boo
;
JSString
*
str
;
JS
:
:
Symbol
*
sym
;
JSObject
*
obj
;
js
:
:
gc
:
:
Cell
*
cell
;
void
*
ptr
;
JSWhyMagic
why
;
size_t
word
;
uintptr_t
uintptr
;
}
payload
;
}
s
;
double
asDouble
;
void
*
asPtr
;
}
JSVAL_ALIGNMENT
jsval_layout
;
#
elif
defined
(
JS_PUNBOX64
)
typedef
union
jsval_layout
{
uint64_t
asBits
;
struct
{
JSValueTag
tag
:
17
;
uint64_t
payload47
:
47
;
}
debugView
;
struct
{
uint32_t
padding
;
union
{
int32_t
i32
;
uint32_t
u32
;
JSWhyMagic
why
;
}
payload
;
}
s
;
double
asDouble
;
void
*
asPtr
;
size_t
asWord
;
uintptr_t
asUIntPtr
;
}
JSVAL_ALIGNMENT
jsval_layout
;
#
endif
#
endif
#
if
defined
(
__clang__
)
#
if
__has_feature
(
cxx_constexpr
)
&
&
__has_feature
(
cxx_defaulted_functions
)
#
define
JS_VALUE_IS_CONSTEXPR
#
endif
#
elif
defined
(
__GNUC__
)
#
if
MOZ_GCC_VERSION_AT_LEAST
(
4
7
3
)
#
define
JS_VALUE_IS_CONSTEXPR
#
endif
#
endif
#
if
defined
(
JS_VALUE_IS_CONSTEXPR
)
#
define
JS_RETURN_LAYOUT_FROM_BITS
(
BITS
)
\
return
(
jsval_layout
)
{
.
asBits
=
(
BITS
)
}
#
define
JS_VALUE_CONSTEXPR
MOZ_CONSTEXPR
#
define
JS_VALUE_CONSTEXPR_VAR
MOZ_CONSTEXPR_VAR
#
else
#
define
JS_RETURN_LAYOUT_FROM_BITS
(
BITS
)
\
jsval_layout
l
;
\
l
.
asBits
=
(
BITS
)
;
\
return
l
;
#
define
JS_VALUE_CONSTEXPR
#
define
JS_VALUE_CONSTEXPR_VAR
const
#
endif
struct
Value
{
jsval_layout
data
;
}
;
