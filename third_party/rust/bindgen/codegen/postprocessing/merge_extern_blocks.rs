use
syn
:
:
{
visit_mut
:
:
{
visit_item_mod_mut
VisitMut
}
Item
ItemForeignMod
ItemMod
}
;
pub
(
super
)
fn
merge_extern_blocks
(
item_mod
:
&
mut
ItemMod
)
{
Visitor
.
visit_item_mod_mut
(
item_mod
)
}
struct
Visitor
;
impl
VisitMut
for
Visitor
{
fn
visit_item_mod_mut
(
&
mut
self
item_mod
:
&
mut
ItemMod
)
{
if
let
Some
(
(
_
ref
mut
items
)
)
=
item_mod
.
content
{
let
mut
extern_blocks
=
Vec
:
:
<
ItemForeignMod
>
:
:
new
(
)
;
for
item
in
std
:
:
mem
:
:
take
(
items
)
{
if
let
Item
:
:
ForeignMod
(
ItemForeignMod
{
attrs
abi
brace_token
items
:
extern_block_items
}
)
=
item
{
let
mut
exists
=
false
;
for
extern_block
in
&
mut
extern_blocks
{
if
extern_block
.
attrs
=
=
attrs
&
&
extern_block
.
abi
=
=
abi
{
extern_block
.
items
.
extend_from_slice
(
&
extern_block_items
)
;
exists
=
true
;
break
;
}
}
if
!
exists
{
extern_blocks
.
push
(
ItemForeignMod
{
attrs
abi
brace_token
items
:
extern_block_items
}
)
;
}
}
else
{
items
.
push
(
item
)
;
}
}
for
extern_block
in
extern_blocks
{
items
.
push
(
Item
:
:
ForeignMod
(
extern_block
)
)
;
}
}
visit_item_mod_mut
(
self
item_mod
)
}
}
