use
crate
:
:
ir
:
:
function
:
:
Abi
;
use
proc_macro2
:
:
Ident
;
#
[
derive
(
Default
)
]
pub
struct
DynamicItems
{
struct_members
:
Vec
<
proc_macro2
:
:
TokenStream
>
struct_implementation
:
Vec
<
proc_macro2
:
:
TokenStream
>
constructor_inits
:
Vec
<
proc_macro2
:
:
TokenStream
>
init_fields
:
Vec
<
proc_macro2
:
:
TokenStream
>
}
impl
DynamicItems
{
pub
fn
new
(
)
-
>
Self
{
Self
:
:
default
(
)
}
pub
fn
get_tokens
(
&
self
lib_ident
:
Ident
)
-
>
proc_macro2
:
:
TokenStream
{
let
struct_members
=
&
self
.
struct_members
;
let
constructor_inits
=
&
self
.
constructor_inits
;
let
init_fields
=
&
self
.
init_fields
;
let
struct_implementation
=
&
self
.
struct_implementation
;
quote
!
{
extern
crate
libloading
;
pub
struct
#
lib_ident
{
__library
:
:
:
libloading
:
:
Library
#
(
#
struct_members
)
*
}
impl
#
lib_ident
{
pub
unsafe
fn
new
<
P
>
(
path
:
P
)
-
>
Result
<
Self
:
:
libloading
:
:
Error
>
where
P
:
AsRef
<
:
:
std
:
:
ffi
:
:
OsStr
>
{
let
__library
=
:
:
libloading
:
:
Library
:
:
new
(
path
)
?
;
#
(
#
constructor_inits
)
*
Ok
(
#
lib_ident
{
__library
#
(
#
init_fields
)
*
}
)
}
#
(
#
struct_implementation
)
*
}
}
}
pub
fn
push
(
&
mut
self
ident
:
Ident
abi
:
Abi
is_variadic
:
bool
args
:
Vec
<
proc_macro2
:
:
TokenStream
>
args_identifiers
:
Vec
<
proc_macro2
:
:
TokenStream
>
ret
:
proc_macro2
:
:
TokenStream
ret_ty
:
proc_macro2
:
:
TokenStream
)
{
if
!
is_variadic
{
assert_eq
!
(
args
.
len
(
)
args_identifiers
.
len
(
)
)
;
}
self
.
struct_members
.
push
(
quote
!
{
pub
#
ident
:
Result
<
unsafe
extern
#
abi
fn
(
#
(
#
args
)
*
)
#
ret
:
:
libloading
:
:
Error
>
}
)
;
if
!
is_variadic
{
self
.
struct_implementation
.
push
(
quote
!
{
pub
unsafe
fn
#
ident
(
&
self
#
(
#
args
)
*
)
-
>
#
ret_ty
{
let
sym
=
self
.
#
ident
.
as_ref
(
)
.
expect
(
"
Expected
function
got
error
.
"
)
;
(
sym
)
(
#
(
#
args_identifiers
)
*
)
}
}
)
;
}
let
ident_str
=
ident
.
to_string
(
)
;
self
.
constructor_inits
.
push
(
quote
!
{
let
#
ident
=
__library
.
get
(
#
ident_str
.
as_bytes
(
)
)
.
map
(
|
sym
|
*
sym
)
;
}
)
;
self
.
init_fields
.
push
(
quote
!
{
#
ident
}
)
;
}
}
