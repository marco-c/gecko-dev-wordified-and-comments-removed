use
crate
:
:
clang
;
#
[
derive
(
Copy
PartialEq
Clone
Debug
)
]
pub
enum
FieldAccessorKind
{
None
Regular
Unsafe
Immutable
}
#
[
derive
(
Default
Clone
PartialEq
Debug
)
]
pub
struct
Annotations
{
opaque
:
bool
hide
:
bool
use_instead_of
:
Option
<
Vec
<
String
>
>
disallow_copy
:
bool
disallow_debug
:
bool
disallow_default
:
bool
must_use_type
:
bool
private_fields
:
Option
<
bool
>
accessor_kind
:
Option
<
FieldAccessorKind
>
constify_enum_variant
:
bool
derives
:
Vec
<
String
>
}
fn
parse_accessor
(
s
:
&
str
)
-
>
FieldAccessorKind
{
match
s
{
"
false
"
=
>
FieldAccessorKind
:
:
None
"
unsafe
"
=
>
FieldAccessorKind
:
:
Unsafe
"
immutable
"
=
>
FieldAccessorKind
:
:
Immutable
_
=
>
FieldAccessorKind
:
:
Regular
}
}
impl
Annotations
{
pub
fn
new
(
cursor
:
&
clang
:
:
Cursor
)
-
>
Option
<
Annotations
>
{
let
mut
anno
=
Annotations
:
:
default
(
)
;
let
mut
matched_one
=
false
;
anno
.
parse
(
&
cursor
.
comment
(
)
&
mut
matched_one
)
;
if
matched_one
{
Some
(
anno
)
}
else
{
None
}
}
pub
fn
hide
(
&
self
)
-
>
bool
{
self
.
hide
}
pub
fn
opaque
(
&
self
)
-
>
bool
{
self
.
opaque
}
pub
fn
use_instead_of
(
&
self
)
-
>
Option
<
&
[
String
]
>
{
self
.
use_instead_of
.
as_deref
(
)
}
pub
fn
derives
(
&
self
)
-
>
&
[
String
]
{
&
self
.
derives
}
pub
fn
disallow_copy
(
&
self
)
-
>
bool
{
self
.
disallow_copy
}
pub
fn
disallow_debug
(
&
self
)
-
>
bool
{
self
.
disallow_debug
}
pub
fn
disallow_default
(
&
self
)
-
>
bool
{
self
.
disallow_default
}
pub
fn
must_use_type
(
&
self
)
-
>
bool
{
self
.
must_use_type
}
pub
fn
private_fields
(
&
self
)
-
>
Option
<
bool
>
{
self
.
private_fields
}
pub
fn
accessor_kind
(
&
self
)
-
>
Option
<
FieldAccessorKind
>
{
self
.
accessor_kind
}
fn
parse
(
&
mut
self
comment
:
&
clang
:
:
Comment
matched
:
&
mut
bool
)
{
use
clang_sys
:
:
CXComment_HTMLStartTag
;
if
comment
.
kind
(
)
=
=
CXComment_HTMLStartTag
&
&
comment
.
get_tag_name
(
)
=
=
"
div
"
&
&
comment
.
get_tag_attrs
(
)
.
next
(
)
.
map_or
(
false
|
attr
|
attr
.
name
=
=
"
rustbindgen
"
)
{
*
matched
=
true
;
for
attr
in
comment
.
get_tag_attrs
(
)
{
match
attr
.
name
.
as_str
(
)
{
"
opaque
"
=
>
self
.
opaque
=
true
"
hide
"
=
>
self
.
hide
=
true
"
nocopy
"
=
>
self
.
disallow_copy
=
true
"
nodebug
"
=
>
self
.
disallow_debug
=
true
"
nodefault
"
=
>
self
.
disallow_default
=
true
"
mustusetype
"
=
>
self
.
must_use_type
=
true
"
replaces
"
=
>
{
self
.
use_instead_of
=
Some
(
attr
.
value
.
split
(
"
:
:
"
)
.
map
(
Into
:
:
into
)
.
collect
(
)
)
}
"
derive
"
=
>
self
.
derives
.
push
(
attr
.
value
)
"
private
"
=
>
{
self
.
private_fields
=
Some
(
attr
.
value
!
=
"
false
"
)
}
"
accessor
"
=
>
{
self
.
accessor_kind
=
Some
(
parse_accessor
(
&
attr
.
value
)
)
}
"
constant
"
=
>
self
.
constify_enum_variant
=
true
_
=
>
{
}
}
}
}
for
child
in
comment
.
get_children
(
)
{
self
.
parse
(
&
child
matched
)
;
}
}
pub
fn
constify_enum_variant
(
&
self
)
-
>
bool
{
self
.
constify_enum_variant
}
}
