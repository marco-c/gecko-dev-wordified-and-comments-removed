use
super
:
:
comp
:
:
MethodKind
;
use
super
:
:
context
:
:
{
BindgenContext
TypeId
}
;
use
super
:
:
dot
:
:
DotAttributes
;
use
super
:
:
item
:
:
Item
;
use
super
:
:
traversal
:
:
{
EdgeKind
Trace
Tracer
}
;
use
super
:
:
ty
:
:
TypeKind
;
use
clang
;
use
clang_sys
:
:
{
self
CXCallingConv
}
;
use
ir
:
:
derive
:
:
{
CanTriviallyDeriveDebug
CanTriviallyDeriveHash
CanTriviallyDerivePartialEqOrPartialOrd
CanDerive
}
;
use
parse
:
:
{
ClangItemParser
ClangSubItemParser
ParseError
ParseResult
}
;
use
quote
;
use
std
:
:
io
;
const
RUST_DERIVE_FUNPTR_LIMIT
:
usize
=
12
;
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
enum
FunctionKind
{
Function
Method
(
MethodKind
)
}
impl
FunctionKind
{
fn
from_cursor
(
cursor
:
&
clang
:
:
Cursor
)
-
>
Option
<
FunctionKind
>
{
Some
(
match
cursor
.
kind
(
)
{
clang_sys
:
:
CXCursor_FunctionDecl
=
>
FunctionKind
:
:
Function
clang_sys
:
:
CXCursor_Constructor
=
>
FunctionKind
:
:
Method
(
MethodKind
:
:
Constructor
)
clang_sys
:
:
CXCursor_Destructor
=
>
FunctionKind
:
:
Method
(
if
cursor
.
method_is_virtual
(
)
{
MethodKind
:
:
VirtualDestructor
{
pure_virtual
:
cursor
.
method_is_pure_virtual
(
)
}
}
else
{
MethodKind
:
:
Destructor
}
)
clang_sys
:
:
CXCursor_CXXMethod
=
>
{
if
cursor
.
method_is_virtual
(
)
{
FunctionKind
:
:
Method
(
MethodKind
:
:
Virtual
{
pure_virtual
:
cursor
.
method_is_pure_virtual
(
)
}
)
}
else
if
cursor
.
method_is_static
(
)
{
FunctionKind
:
:
Method
(
MethodKind
:
:
Static
)
}
else
{
FunctionKind
:
:
Method
(
MethodKind
:
:
Normal
)
}
}
_
=
>
return
None
}
)
}
}
#
[
derive
(
Debug
Clone
Copy
)
]
pub
enum
Linkage
{
External
Internal
}
#
[
derive
(
Debug
)
]
pub
struct
Function
{
name
:
String
mangled_name
:
Option
<
String
>
signature
:
TypeId
comment
:
Option
<
String
>
kind
:
FunctionKind
linkage
:
Linkage
}
impl
Function
{
pub
fn
new
(
name
:
String
mangled_name
:
Option
<
String
>
signature
:
TypeId
comment
:
Option
<
String
>
kind
:
FunctionKind
linkage
:
Linkage
)
-
>
Self
{
Function
{
name
mangled_name
signature
comment
kind
linkage
}
}
pub
fn
name
(
&
self
)
-
>
&
str
{
&
self
.
name
}
pub
fn
mangled_name
(
&
self
)
-
>
Option
<
&
str
>
{
self
.
mangled_name
.
as_ref
(
)
.
map
(
|
n
|
&
*
*
n
)
}
pub
fn
signature
(
&
self
)
-
>
TypeId
{
self
.
signature
}
pub
fn
kind
(
&
self
)
-
>
FunctionKind
{
self
.
kind
}
pub
fn
linkage
(
&
self
)
-
>
Linkage
{
self
.
linkage
}
}
impl
DotAttributes
for
Function
{
fn
dot_attributes
<
W
>
(
&
self
_ctx
:
&
BindgenContext
out
:
&
mut
W
)
-
>
io
:
:
Result
<
(
)
>
where
W
:
io
:
:
Write
{
if
let
Some
(
ref
mangled
)
=
self
.
mangled_name
{
let
mangled
:
String
=
mangled
.
chars
(
)
.
flat_map
(
|
c
|
c
.
escape_default
(
)
)
.
collect
(
)
;
try
!
(
writeln
!
(
out
"
<
tr
>
<
td
>
mangled
name
<
/
td
>
<
td
>
{
}
<
/
td
>
<
/
tr
>
"
mangled
)
)
;
}
Ok
(
(
)
)
}
}
#
[
derive
(
Debug
Copy
Clone
)
]
pub
enum
Abi
{
C
Stdcall
Fastcall
ThisCall
Aapcs
Win64
Unknown
(
CXCallingConv
)
}
impl
Abi
{
fn
is_unknown
(
&
self
)
-
>
bool
{
match
*
self
{
Abi
:
:
Unknown
(
.
.
)
=
>
true
_
=
>
false
}
}
}
impl
quote
:
:
ToTokens
for
Abi
{
fn
to_tokens
(
&
self
tokens
:
&
mut
quote
:
:
Tokens
)
{
tokens
.
append
(
match
*
self
{
Abi
:
:
C
=
>
quote
!
{
"
C
"
}
Abi
:
:
Stdcall
=
>
quote
!
{
"
stdcall
"
}
Abi
:
:
Fastcall
=
>
quote
!
{
"
fastcall
"
}
Abi
:
:
ThisCall
=
>
quote
!
{
"
thiscall
"
}
Abi
:
:
Aapcs
=
>
quote
!
{
"
aapcs
"
}
Abi
:
:
Win64
=
>
quote
!
{
"
win64
"
}
Abi
:
:
Unknown
(
cc
)
=
>
panic
!
(
"
Cannot
turn
unknown
calling
convention
to
tokens
:
{
:
?
}
"
cc
)
}
)
;
}
}
#
[
derive
(
Debug
)
]
pub
struct
FunctionSig
{
return_type
:
TypeId
argument_types
:
Vec
<
(
Option
<
String
>
TypeId
)
>
is_variadic
:
bool
abi
:
Abi
}
fn
get_abi
(
cc
:
CXCallingConv
)
-
>
Abi
{
use
clang_sys
:
:
*
;
match
cc
{
CXCallingConv_Default
=
>
Abi
:
:
C
CXCallingConv_C
=
>
Abi
:
:
C
CXCallingConv_X86StdCall
=
>
Abi
:
:
Stdcall
CXCallingConv_X86FastCall
=
>
Abi
:
:
Fastcall
CXCallingConv_X86ThisCall
=
>
Abi
:
:
ThisCall
CXCallingConv_AAPCS
=
>
Abi
:
:
Aapcs
CXCallingConv_X86_64Win64
=
>
Abi
:
:
Win64
other
=
>
Abi
:
:
Unknown
(
other
)
}
}
pub
fn
cursor_mangling
(
ctx
:
&
BindgenContext
cursor
:
&
clang
:
:
Cursor
)
-
>
Option
<
String
>
{
use
clang_sys
;
if
!
ctx
.
options
(
)
.
enable_mangling
{
return
None
;
}
if
cursor
.
is_in_non_fully_specialized_template
(
)
{
return
None
;
}
let
is_destructor
=
cursor
.
kind
(
)
=
=
clang_sys
:
:
CXCursor_Destructor
;
if
let
Ok
(
mut
manglings
)
=
cursor
.
cxx_manglings
(
)
{
while
let
Some
(
m
)
=
manglings
.
pop
(
)
{
if
is_destructor
&
&
!
m
.
ends_with
(
"
D1Ev
"
)
{
continue
;
}
return
Some
(
m
)
;
}
}
let
mut
mangling
=
cursor
.
mangling
(
)
;
if
mangling
.
is_empty
(
)
{
return
None
;
}
if
is_destructor
{
if
mangling
.
ends_with
(
"
D0Ev
"
)
{
let
new_len
=
mangling
.
len
(
)
-
4
;
mangling
.
truncate
(
new_len
)
;
mangling
.
push_str
(
"
D1Ev
"
)
;
}
}
Some
(
mangling
)
}
impl
FunctionSig
{
pub
fn
new
(
return_type
:
TypeId
arguments
:
Vec
<
(
Option
<
String
>
TypeId
)
>
is_variadic
:
bool
abi
:
Abi
)
-
>
Self
{
FunctionSig
{
return_type
:
return_type
argument_types
:
arguments
is_variadic
:
is_variadic
abi
:
abi
}
}
pub
fn
from_ty
(
ty
:
&
clang
:
:
Type
cursor
:
&
clang
:
:
Cursor
ctx
:
&
mut
BindgenContext
)
-
>
Result
<
Self
ParseError
>
{
use
clang_sys
:
:
*
;
debug
!
(
"
FunctionSig
:
:
from_ty
{
:
?
}
{
:
?
}
"
ty
cursor
)
;
if
cursor
.
kind
(
)
=
=
CXCursor_FunctionTemplate
{
return
Err
(
ParseError
:
:
Continue
)
;
}
let
spelling
=
cursor
.
spelling
(
)
;
if
spelling
.
starts_with
(
"
operator
"
)
{
return
Err
(
ParseError
:
:
Continue
)
;
}
let
cursor
=
if
cursor
.
is_valid
(
)
{
*
cursor
}
else
{
ty
.
declaration
(
)
}
;
let
mut
args
:
Vec
<
_
>
=
match
cursor
.
kind
(
)
{
CXCursor_FunctionDecl
|
CXCursor_Constructor
|
CXCursor_CXXMethod
|
CXCursor_ObjCInstanceMethodDecl
|
CXCursor_ObjCClassMethodDecl
=
>
{
cursor
.
args
(
)
.
unwrap
(
)
.
iter
(
)
.
map
(
|
arg
|
{
let
arg_ty
=
arg
.
cur_type
(
)
;
let
name
=
arg
.
spelling
(
)
;
let
name
=
if
name
.
is_empty
(
)
{
None
}
else
{
Some
(
name
)
}
;
let
ty
=
Item
:
:
from_ty_or_ref
(
arg_ty
*
arg
None
ctx
)
;
(
name
ty
)
}
)
.
collect
(
)
}
_
=
>
{
let
mut
args
=
vec
!
[
]
;
cursor
.
visit
(
|
c
|
{
if
c
.
kind
(
)
=
=
CXCursor_ParmDecl
{
let
ty
=
Item
:
:
from_ty_or_ref
(
c
.
cur_type
(
)
c
None
ctx
)
;
let
name
=
c
.
spelling
(
)
;
let
name
=
if
name
.
is_empty
(
)
{
None
}
else
{
Some
(
name
)
}
;
args
.
push
(
(
name
ty
)
)
;
}
CXChildVisit_Continue
}
)
;
args
}
}
;
let
is_method
=
cursor
.
kind
(
)
=
=
CXCursor_CXXMethod
;
let
is_constructor
=
cursor
.
kind
(
)
=
=
CXCursor_Constructor
;
let
is_destructor
=
cursor
.
kind
(
)
=
=
CXCursor_Destructor
;
if
(
is_constructor
|
|
is_destructor
|
|
is_method
)
&
&
cursor
.
lexical_parent
(
)
!
=
cursor
.
semantic_parent
(
)
{
return
Err
(
ParseError
:
:
Continue
)
;
}
if
is_method
|
|
is_constructor
|
|
is_destructor
{
let
is_const
=
is_method
&
&
cursor
.
method_is_const
(
)
;
let
is_virtual
=
is_method
&
&
cursor
.
method_is_virtual
(
)
;
let
is_static
=
is_method
&
&
cursor
.
method_is_static
(
)
;
if
!
is_static
&
&
!
is_virtual
{
let
class
=
Item
:
:
parse
(
cursor
.
semantic_parent
(
)
None
ctx
)
.
expect
(
"
Expected
to
parse
the
class
"
)
;
let
class
=
class
.
as_type_id_unchecked
(
)
;
let
ptr
=
Item
:
:
builtin_type
(
TypeKind
:
:
Pointer
(
class
)
is_const
ctx
)
;
args
.
insert
(
0
(
Some
(
"
this
"
.
into
(
)
)
ptr
)
)
;
}
else
if
is_virtual
{
let
void
=
Item
:
:
builtin_type
(
TypeKind
:
:
Void
false
ctx
)
;
let
ptr
=
Item
:
:
builtin_type
(
TypeKind
:
:
Pointer
(
void
)
false
ctx
)
;
args
.
insert
(
0
(
Some
(
"
this
"
.
into
(
)
)
ptr
)
)
;
}
}
let
ty_ret_type
=
if
cursor
.
kind
(
)
=
=
CXCursor_ObjCInstanceMethodDecl
|
|
cursor
.
kind
(
)
=
=
CXCursor_ObjCClassMethodDecl
{
try
!
(
ty
.
ret_type
(
)
.
or_else
(
|
|
cursor
.
ret_type
(
)
)
.
ok_or
(
ParseError
:
:
Continue
)
)
}
else
{
try
!
(
ty
.
ret_type
(
)
.
ok_or
(
ParseError
:
:
Continue
)
)
}
;
let
ret
=
Item
:
:
from_ty_or_ref
(
ty_ret_type
cursor
None
ctx
)
;
let
call_conv
=
ty
.
call_conv
(
)
;
let
abi
=
get_abi
(
call_conv
)
;
if
abi
.
is_unknown
(
)
{
warn
!
(
"
Unknown
calling
convention
:
{
:
?
}
"
call_conv
)
;
}
Ok
(
Self
:
:
new
(
ret
.
into
(
)
args
ty
.
is_variadic
(
)
abi
)
)
}
pub
fn
return_type
(
&
self
)
-
>
TypeId
{
self
.
return_type
}
pub
fn
argument_types
(
&
self
)
-
>
&
[
(
Option
<
String
>
TypeId
)
]
{
&
self
.
argument_types
}
pub
fn
abi
(
&
self
)
-
>
Abi
{
self
.
abi
}
pub
fn
is_variadic
(
&
self
)
-
>
bool
{
self
.
is_variadic
&
&
!
self
.
argument_types
.
is_empty
(
)
}
pub
fn
function_pointers_can_derive
(
&
self
)
-
>
bool
{
if
self
.
argument_types
.
len
(
)
>
RUST_DERIVE_FUNPTR_LIMIT
{
return
false
;
}
match
self
.
abi
{
Abi
:
:
C
|
Abi
:
:
Unknown
(
.
.
)
=
>
true
_
=
>
false
}
}
}
impl
ClangSubItemParser
for
Function
{
fn
parse
(
cursor
:
clang
:
:
Cursor
context
:
&
mut
BindgenContext
)
-
>
Result
<
ParseResult
<
Self
>
ParseError
>
{
use
clang_sys
:
:
*
;
let
kind
=
match
FunctionKind
:
:
from_cursor
(
&
cursor
)
{
None
=
>
return
Err
(
ParseError
:
:
Continue
)
Some
(
k
)
=
>
k
}
;
debug
!
(
"
Function
:
:
parse
(
{
:
?
}
{
:
?
}
)
"
cursor
cursor
.
cur_type
(
)
)
;
let
visibility
=
cursor
.
visibility
(
)
;
if
visibility
!
=
CXVisibility_Default
{
return
Err
(
ParseError
:
:
Continue
)
;
}
if
cursor
.
access_specifier
(
)
=
=
CX_CXXPrivate
{
return
Err
(
ParseError
:
:
Continue
)
;
}
if
!
context
.
options
(
)
.
generate_inline_functions
&
&
cursor
.
is_inlined_function
(
)
{
return
Err
(
ParseError
:
:
Continue
)
;
}
let
linkage
=
cursor
.
linkage
(
)
;
let
linkage
=
match
linkage
{
CXLinkage_External
|
CXLinkage_UniqueExternal
=
>
Linkage
:
:
External
CXLinkage_Internal
=
>
Linkage
:
:
Internal
_
=
>
return
Err
(
ParseError
:
:
Continue
)
}
;
let
sig
=
try
!
(
Item
:
:
from_ty
(
&
cursor
.
cur_type
(
)
cursor
None
context
)
)
;
let
mut
name
=
cursor
.
spelling
(
)
;
assert
!
(
!
name
.
is_empty
(
)
"
Empty
function
name
?
"
)
;
if
cursor
.
kind
(
)
=
=
CXCursor_Destructor
{
if
name
.
starts_with
(
'
~
'
)
{
name
.
remove
(
0
)
;
}
name
.
push_str
(
"
_destructor
"
)
;
}
let
mut
mangled_name
=
cursor_mangling
(
context
&
cursor
)
;
if
mangled_name
.
as_ref
(
)
=
=
Some
(
&
name
)
{
mangled_name
=
None
;
}
let
comment
=
cursor
.
raw_comment
(
)
;
let
function
=
Self
:
:
new
(
name
mangled_name
sig
comment
kind
linkage
)
;
Ok
(
ParseResult
:
:
New
(
function
Some
(
cursor
)
)
)
}
}
impl
Trace
for
FunctionSig
{
type
Extra
=
(
)
;
fn
trace
<
T
>
(
&
self
_
:
&
BindgenContext
tracer
:
&
mut
T
_
:
&
(
)
)
where
T
:
Tracer
{
tracer
.
visit_kind
(
self
.
return_type
(
)
.
into
(
)
EdgeKind
:
:
FunctionReturn
)
;
for
&
(
_
ty
)
in
self
.
argument_types
(
)
{
tracer
.
visit_kind
(
ty
.
into
(
)
EdgeKind
:
:
FunctionParameter
)
;
}
}
}
impl
CanTriviallyDeriveDebug
for
FunctionSig
{
fn
can_trivially_derive_debug
(
&
self
)
-
>
bool
{
self
.
function_pointers_can_derive
(
)
}
}
impl
CanTriviallyDeriveHash
for
FunctionSig
{
fn
can_trivially_derive_hash
(
&
self
)
-
>
bool
{
self
.
function_pointers_can_derive
(
)
}
}
impl
CanTriviallyDerivePartialEqOrPartialOrd
for
FunctionSig
{
fn
can_trivially_derive_partialeq_or_partialord
(
&
self
)
-
>
CanDerive
{
if
self
.
argument_types
.
len
(
)
>
RUST_DERIVE_FUNPTR_LIMIT
{
return
CanDerive
:
:
No
;
}
match
self
.
abi
{
Abi
:
:
C
|
Abi
:
:
Unknown
(
.
.
)
=
>
CanDerive
:
:
Yes
_
=
>
CanDerive
:
:
No
}
}
}
