use
super
:
:
context
:
:
{
BindgenContext
ItemId
}
;
use
super
:
:
item
:
:
Item
;
use
super
:
:
ty
:
:
TypeKind
;
use
clang
;
use
ir
:
:
annotations
:
:
Annotations
;
use
ir
:
:
item
:
:
ItemCanonicalName
;
use
parse
:
:
{
ClangItemParser
ParseError
}
;
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
)
]
pub
enum
EnumVariantCustomBehavior
{
ModuleConstify
Constify
Hide
}
#
[
derive
(
Debug
)
]
pub
struct
Enum
{
repr
:
Option
<
ItemId
>
variants
:
Vec
<
EnumVariant
>
}
impl
Enum
{
pub
fn
new
(
repr
:
Option
<
ItemId
>
variants
:
Vec
<
EnumVariant
>
)
-
>
Self
{
Enum
{
repr
:
repr
variants
:
variants
}
}
pub
fn
repr
(
&
self
)
-
>
Option
<
ItemId
>
{
self
.
repr
}
pub
fn
variants
(
&
self
)
-
>
&
[
EnumVariant
]
{
&
self
.
variants
}
pub
fn
from_ty
(
ty
:
&
clang
:
:
Type
ctx
:
&
mut
BindgenContext
)
-
>
Result
<
Self
ParseError
>
{
use
clang_sys
:
:
*
;
debug
!
(
"
Enum
:
:
from_ty
{
:
?
}
"
ty
)
;
if
ty
.
kind
(
)
!
=
CXType_Enum
{
return
Err
(
ParseError
:
:
Continue
)
;
}
let
declaration
=
ty
.
declaration
(
)
.
canonical
(
)
;
let
repr
=
declaration
.
enum_type
(
)
.
and_then
(
|
et
|
Item
:
:
from_ty
(
&
et
declaration
None
ctx
)
.
ok
(
)
)
;
let
mut
variants
=
vec
!
[
]
;
let
is_signed
=
repr
.
and_then
(
|
r
|
ctx
.
resolve_type
(
r
)
.
safe_canonical_type
(
ctx
)
)
.
map_or
(
true
|
ty
|
match
*
ty
.
kind
(
)
{
TypeKind
:
:
Int
(
ref
int_kind
)
=
>
int_kind
.
is_signed
(
)
ref
other
=
>
{
panic
!
(
"
Since
when
enums
can
be
non
-
integers
?
{
:
?
}
"
other
)
}
}
)
;
let
type_name
=
ty
.
spelling
(
)
;
let
type_name
=
if
type_name
.
is_empty
(
)
{
None
}
else
{
Some
(
type_name
)
}
;
let
type_name
=
type_name
.
as_ref
(
)
.
map
(
String
:
:
as_str
)
;
let
definition
=
declaration
.
definition
(
)
.
unwrap_or
(
declaration
)
;
definition
.
visit
(
|
cursor
|
{
if
cursor
.
kind
(
)
=
=
CXCursor_EnumConstantDecl
{
let
value
=
if
is_signed
{
cursor
.
enum_val_signed
(
)
.
map
(
EnumVariantValue
:
:
Signed
)
}
else
{
cursor
.
enum_val_unsigned
(
)
.
map
(
EnumVariantValue
:
:
Unsigned
)
}
;
if
let
Some
(
val
)
=
value
{
let
name
=
cursor
.
spelling
(
)
;
let
custom_behavior
=
ctx
.
parse_callbacks
(
)
.
and_then
(
|
t
|
{
t
.
enum_variant_behavior
(
type_name
&
name
val
)
}
)
.
or_else
(
|
|
{
Annotations
:
:
new
(
&
cursor
)
.
and_then
(
|
anno
|
if
anno
.
hide
(
)
{
Some
(
EnumVariantCustomBehavior
:
:
Hide
)
}
else
if
anno
.
constify_enum_variant
(
)
{
Some
(
EnumVariantCustomBehavior
:
:
Constify
)
}
else
{
None
}
)
}
)
;
let
comment
=
cursor
.
raw_comment
(
)
;
variants
.
push
(
EnumVariant
:
:
new
(
name
comment
val
custom_behavior
)
)
;
}
}
CXChildVisit_Continue
}
)
;
Ok
(
Enum
:
:
new
(
repr
variants
)
)
}
pub
fn
is_constified_enum_module
(
&
self
ctx
:
&
BindgenContext
item
:
&
Item
)
-
>
bool
{
let
name
=
item
.
canonical_name
(
ctx
)
;
let
enum_ty
=
item
.
expect_type
(
)
;
ctx
.
options
(
)
.
constified_enum_modules
.
matches
(
&
name
)
|
|
(
enum_ty
.
name
(
)
.
is_none
(
)
&
&
self
.
variants
(
)
.
iter
(
)
.
any
(
|
v
|
ctx
.
options
(
)
.
constified_enum_modules
.
matches
(
&
v
.
name
(
)
)
)
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
EnumVariant
{
name
:
String
comment
:
Option
<
String
>
val
:
EnumVariantValue
custom_behavior
:
Option
<
EnumVariantCustomBehavior
>
}
#
[
derive
(
Clone
Copy
Debug
PartialEq
Eq
PartialOrd
Ord
Hash
)
]
pub
enum
EnumVariantValue
{
Signed
(
i64
)
Unsigned
(
u64
)
}
impl
EnumVariant
{
pub
fn
new
(
name
:
String
comment
:
Option
<
String
>
val
:
EnumVariantValue
custom_behavior
:
Option
<
EnumVariantCustomBehavior
>
)
-
>
Self
{
EnumVariant
{
name
:
name
comment
:
comment
val
:
val
custom_behavior
:
custom_behavior
}
}
pub
fn
name
(
&
self
)
-
>
&
str
{
&
self
.
name
}
pub
fn
val
(
&
self
)
-
>
EnumVariantValue
{
self
.
val
}
pub
fn
force_constification
(
&
self
)
-
>
bool
{
self
.
custom_behavior
.
map_or
(
false
|
b
|
b
=
=
EnumVariantCustomBehavior
:
:
Constify
)
}
pub
fn
hidden
(
&
self
)
-
>
bool
{
self
.
custom_behavior
.
map_or
(
false
|
b
|
b
=
=
EnumVariantCustomBehavior
:
:
Hide
)
}
}
