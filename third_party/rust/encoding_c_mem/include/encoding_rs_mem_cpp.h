#
pragma
once
#
ifndef
encoding_rs_mem_cpp_h_
#
define
encoding_rs_mem_cpp_h_
#
include
<
optional
>
#
include
<
string_view
>
#
include
<
tuple
>
#
include
"
gsl
/
gsl
"
#
include
"
encoding_rs_mem
.
h
"
namespace
encoding_rs
{
namespace
mem
{
namespace
detail
{
template
<
class
T
>
static
inline
T
*
null_to_bogus
(
T
*
ptr
)
{
return
ptr
?
ptr
:
reinterpret_cast
<
T
*
>
(
alignof
(
T
)
)
;
}
}
;
inline
Latin1Bidi
check_for_latin1_and_bidi
(
std
:
:
u16string_view
buffer
)
{
return
encoding_mem_check_utf16_for_latin1_and_bidi
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char16_t
>
(
buffer
.
data
(
)
)
buffer
.
size
(
)
)
;
}
inline
Latin1Bidi
check_for_latin1_and_bidi
(
std
:
:
string_view
buffer
)
{
return
encoding_mem_check_utf8_for_latin1_and_bidi
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
buffer
.
data
(
)
)
buffer
.
size
(
)
)
;
}
inline
void
convert_latin1_to_utf16
(
gsl
:
:
span
<
const
char
>
src
gsl
:
:
span
<
char16_t
>
dst
)
{
encoding_mem_convert_latin1_to_utf16
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
src
.
data
(
)
)
src
.
size
(
)
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char16_t
>
(
dst
.
data
(
)
)
dst
.
size
(
)
)
;
}
inline
size_t
convert_latin1_to_utf8
(
gsl
:
:
span
<
const
char
>
src
gsl
:
:
span
<
char
>
dst
)
{
return
encoding_mem_convert_latin1_to_utf8
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
src
.
data
(
)
)
src
.
size
(
)
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char
>
(
dst
.
data
(
)
)
dst
.
size
(
)
)
;
}
inline
std
:
:
tuple
<
size_t
size_t
>
convert_latin1_to_utf8_partial
(
gsl
:
:
span
<
const
char
>
src
gsl
:
:
span
<
char
>
dst
)
{
size_t
src_read
=
src
.
size
(
)
;
size_t
dst_written
=
dst
.
size
(
)
;
encoding_mem_convert_latin1_to_utf8_partial
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
src
.
data
(
)
)
&
src_read
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char
>
(
dst
.
data
(
)
)
&
dst_written
)
;
return
{
src_read
dst_written
}
;
}
inline
size_t
convert_str_to_utf16
(
std
:
:
string_view
src
gsl
:
:
span
<
char16_t
>
dst
)
{
return
encoding_mem_convert_str_to_utf16
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
reinterpret_cast
<
const
char
*
>
(
src
.
data
(
)
)
)
src
.
size
(
)
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char16_t
>
(
dst
.
data
(
)
)
dst
.
size
(
)
)
;
}
inline
void
convert_utf16_to_latin1_lossy
(
std
:
:
u16string_view
src
gsl
:
:
span
<
char
>
dst
)
{
encoding_mem_convert_utf16_to_latin1_lossy
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char16_t
>
(
src
.
data
(
)
)
src
.
size
(
)
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char
>
(
dst
.
data
(
)
)
dst
.
size
(
)
)
;
}
inline
size_t
convert_utf16_to_utf8
(
std
:
:
u16string_view
src
gsl
:
:
span
<
char
>
dst
)
{
return
encoding_mem_convert_utf16_to_utf8
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char16_t
>
(
src
.
data
(
)
)
src
.
size
(
)
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char
>
(
dst
.
data
(
)
)
dst
.
size
(
)
)
;
}
inline
std
:
:
tuple
<
size_t
size_t
>
convert_utf16_to_utf8_partial
(
std
:
:
u16string_view
src
gsl
:
:
span
<
char
>
dst
)
{
size_t
src_read
=
src
.
size
(
)
;
size_t
dst_written
=
dst
.
size
(
)
;
encoding_mem_convert_utf16_to_utf8_partial
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char16_t
>
(
src
.
data
(
)
)
&
src_read
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char
>
(
dst
.
data
(
)
)
&
dst_written
)
;
return
{
src_read
dst_written
}
;
}
inline
size_t
convert_utf8_to_latin1_lossy
(
std
:
:
string_view
src
gsl
:
:
span
<
char
>
dst
)
{
return
encoding_mem_convert_utf8_to_latin1_lossy
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
reinterpret_cast
<
const
char
*
>
(
src
.
data
(
)
)
)
src
.
size
(
)
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char
>
(
dst
.
data
(
)
)
dst
.
size
(
)
)
;
}
inline
size_t
convert_utf8_to_utf16
(
std
:
:
string_view
src
gsl
:
:
span
<
char16_t
>
dst
)
{
return
encoding_mem_convert_utf8_to_utf16
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
reinterpret_cast
<
const
char
*
>
(
src
.
data
(
)
)
)
src
.
size
(
)
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char16_t
>
(
dst
.
data
(
)
)
dst
.
size
(
)
)
;
}
inline
std
:
:
optional
<
size_t
>
convert_utf8_to_utf16_without_replacement
(
std
:
:
string_view
src
gsl
:
:
span
<
char16_t
>
dst
)
{
size_t
val
=
encoding_mem_convert_utf8_to_utf16_without_replacement
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
reinterpret_cast
<
const
char
*
>
(
src
.
data
(
)
)
)
src
.
size
(
)
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char16_t
>
(
dst
.
data
(
)
)
dst
.
size
(
)
)
;
if
(
val
=
=
SIZE_MAX
)
{
return
std
:
:
nullopt
;
}
return
val
;
}
inline
size_t
copy_ascii_to_ascii
(
gsl
:
:
span
<
const
char
>
src
gsl
:
:
span
<
char
>
dst
)
{
return
encoding_mem_copy_ascii_to_ascii
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
src
.
data
(
)
)
src
.
size
(
)
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char
>
(
dst
.
data
(
)
)
dst
.
size
(
)
)
;
}
inline
size_t
copy_ascii_to_basic_latin
(
gsl
:
:
span
<
const
char
>
src
gsl
:
:
span
<
char16_t
>
dst
)
{
return
encoding_mem_copy_ascii_to_basic_latin
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
src
.
data
(
)
)
src
.
size
(
)
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char16_t
>
(
dst
.
data
(
)
)
dst
.
size
(
)
)
;
}
inline
size_t
copy_basic_latin_to_ascii
(
gsl
:
:
span
<
const
char16_t
>
src
gsl
:
:
span
<
char
>
dst
)
{
return
encoding_mem_copy_basic_latin_to_ascii
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char16_t
>
(
src
.
data
(
)
)
src
.
size
(
)
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char
>
(
dst
.
data
(
)
)
dst
.
size
(
)
)
;
}
inline
void
ensure_utf16_validity
(
gsl
:
:
span
<
char16_t
>
buffer
)
{
encoding_mem_ensure_utf16_validity
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
char16_t
>
(
buffer
.
data
(
)
)
buffer
.
size
(
)
)
;
}
inline
bool
is_ascii
(
std
:
:
string_view
buffer
)
{
return
encoding_mem_is_ascii
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
buffer
.
data
(
)
)
buffer
.
size
(
)
)
;
}
inline
bool
is_ascii
(
std
:
:
u16string_view
buffer
)
{
return
encoding_mem_is_basic_latin
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char16_t
>
(
buffer
.
data
(
)
)
buffer
.
size
(
)
)
;
}
inline
bool
is_scalar_value_bidi
(
char32_t
c
)
{
return
encoding_mem_is_char_bidi
(
c
)
;
}
inline
bool
is_bidi
(
std
:
:
u16string_view
buffer
)
{
return
encoding_mem_is_utf16_bidi
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char16_t
>
(
buffer
.
data
(
)
)
buffer
.
size
(
)
)
;
}
inline
bool
is_utf16_code_unit_bidi
(
char16_t
u
)
{
return
encoding_mem_is_utf16_code_unit_bidi
(
u
)
;
}
inline
bool
is_utf16_latin1
(
std
:
:
u16string_view
buffer
)
{
return
encoding_mem_is_utf16_latin1
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char16_t
>
(
buffer
.
data
(
)
)
buffer
.
size
(
)
)
;
}
inline
bool
is_bidi
(
std
:
:
string_view
buffer
)
{
return
encoding_mem_is_utf8_bidi
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
buffer
.
data
(
)
)
buffer
.
size
(
)
)
;
}
inline
bool
is_utf8_latin1
(
std
:
:
string_view
buffer
)
{
return
encoding_mem_is_utf8_latin1
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
buffer
.
data
(
)
)
buffer
.
size
(
)
)
;
}
inline
size_t
utf16_valid_up_to
(
std
:
:
u16string_view
buffer
)
{
return
encoding_mem_utf16_valid_up_to
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char16_t
>
(
buffer
.
data
(
)
)
buffer
.
size
(
)
)
;
}
inline
size_t
utf8_latin1_up_to
(
std
:
:
string_view
buffer
)
{
return
encoding_mem_utf8_latin1_up_to
(
encoding_rs
:
:
mem
:
:
detail
:
:
null_to_bogus
<
const
char
>
(
buffer
.
data
(
)
)
buffer
.
size
(
)
)
;
}
}
;
}
;
#
endif
