use
crate
:
:
parser
:
:
RegexSyntax
;
pub
trait
RegExp
:
Sized
{
fn
syntax
(
)
-
>
RegexSyntax
;
fn
parse
(
pattern
:
&
str
flags
:
&
str
force_eval
:
bool
)
-
>
Result
<
Self
(
)
>
;
fn
matches
<
'
a
>
(
&
self
text
:
&
'
a
str
)
-
>
Option
<
Vec
<
Option
<
&
'
a
str
>
>
>
;
}
impl
RegExp
for
regex
:
:
Regex
{
fn
syntax
(
)
-
>
RegexSyntax
{
RegexSyntax
:
:
Rust
}
fn
parse
(
pattern
:
&
str
flags
:
&
str
_force_eval
:
bool
)
-
>
Result
<
Self
(
)
>
{
regex
:
:
Regex
:
:
new
(
&
format
!
(
"
(
?
{
flags
}
)
{
pattern
}
"
)
)
.
map_err
(
|
_
|
(
)
)
}
fn
matches
<
'
a
>
(
&
self
text
:
&
'
a
str
)
-
>
Option
<
Vec
<
Option
<
&
'
a
str
>
>
>
{
let
captures
=
self
.
captures
(
text
)
?
;
let
captures
=
captures
.
iter
(
)
.
skip
(
1
)
.
map
(
|
c
|
c
.
map
(
|
m
|
m
.
as_str
(
)
)
)
.
collect
(
)
;
Some
(
captures
)
}
}
