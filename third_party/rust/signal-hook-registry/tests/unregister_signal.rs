#
!
[
allow
(
deprecated
)
]
extern
crate
libc
;
extern
crate
signal_hook_registry
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicUsize
Ordering
}
;
use
std
:
:
sync
:
:
Arc
;
use
libc
:
:
{
SIGINT
SIGTERM
}
;
use
signal_hook_registry
:
:
{
register
unregister_signal
}
;
#
[
test
]
fn
register_unregister
(
)
{
let
called
=
Arc
:
:
new
(
AtomicUsize
:
:
new
(
0
)
)
;
let
hook
=
{
let
called
=
Arc
:
:
clone
(
&
called
)
;
move
|
|
{
called
.
fetch_add
(
1
Ordering
:
:
Relaxed
)
;
}
}
;
unsafe
{
register
(
SIGTERM
hook
.
clone
(
)
)
.
unwrap
(
)
;
register
(
SIGTERM
hook
.
clone
(
)
)
.
unwrap
(
)
;
register
(
SIGINT
hook
.
clone
(
)
)
.
unwrap
(
)
;
libc
:
:
raise
(
SIGTERM
)
;
}
assert_eq
!
(
2
called
.
load
(
Ordering
:
:
Relaxed
)
)
;
assert
!
(
unregister_signal
(
SIGTERM
)
)
;
unsafe
{
libc
:
:
raise
(
SIGTERM
)
}
;
assert
!
(
!
unregister_signal
(
SIGTERM
)
)
;
assert_eq
!
(
2
called
.
load
(
Ordering
:
:
Relaxed
)
)
;
unsafe
{
libc
:
:
raise
(
SIGINT
)
}
;
assert_eq
!
(
3
called
.
load
(
Ordering
:
:
Relaxed
)
)
;
unsafe
{
register
(
SIGTERM
hook
)
.
unwrap
(
)
;
libc
:
:
raise
(
SIGTERM
)
;
}
assert_eq
!
(
4
called
.
load
(
Ordering
:
:
Relaxed
)
)
;
}
