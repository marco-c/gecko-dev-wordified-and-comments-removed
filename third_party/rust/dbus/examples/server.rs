extern
crate
dbus
;
use
std
:
:
sync
:
:
Arc
;
use
dbus
:
:
{
Connection
BusType
NameFlag
}
;
use
dbus
:
:
tree
:
:
Factory
;
fn
main
(
)
{
let
c
=
Connection
:
:
get_private
(
BusType
:
:
Session
)
.
unwrap
(
)
;
c
.
register_name
(
"
com
.
example
.
dbustest
"
NameFlag
:
:
ReplaceExisting
as
u32
)
.
unwrap
(
)
;
let
f
=
Factory
:
:
new_fn
:
:
<
(
)
>
(
)
;
let
signal
=
Arc
:
:
new
(
f
.
signal
(
"
HelloHappened
"
(
)
)
.
sarg
:
:
<
&
str
_
>
(
"
sender
"
)
)
;
let
signal2
=
signal
.
clone
(
)
;
let
tree
=
f
.
tree
(
(
)
)
.
add
(
f
.
object_path
(
"
/
hello
"
(
)
)
.
introspectable
(
)
.
add
(
f
.
interface
(
"
com
.
example
.
dbustest
"
(
)
)
.
add_m
(
f
.
method
(
"
Hello
"
(
)
move
|
m
|
{
let
name
:
&
str
=
m
.
msg
.
read1
(
)
?
;
let
s
=
format
!
(
"
Hello
{
}
!
"
name
)
;
let
mret
=
m
.
msg
.
method_return
(
)
.
append1
(
s
)
;
let
sig
=
signal
.
msg
(
m
.
path
.
get_name
(
)
m
.
iface
.
get_name
(
)
)
.
append1
(
&
*
name
)
;
Ok
(
vec
!
(
mret
sig
)
)
}
)
.
outarg
:
:
<
&
str
_
>
(
"
reply
"
)
.
inarg
:
:
<
&
str
_
>
(
"
name
"
)
)
.
add_s
(
signal2
)
)
)
;
tree
.
set_registered
(
&
c
true
)
.
unwrap
(
)
;
c
.
add_handler
(
tree
)
;
loop
{
c
.
incoming
(
1000
)
.
next
(
)
;
}
}
