use
crate
:
:
{
Message
MessageType
BusName
Path
Interface
Member
}
;
#
[
derive
(
Clone
Debug
Default
)
]
pub
struct
MatchRule
<
'
a
>
{
pub
msg_type
:
Option
<
MessageType
>
pub
sender
:
Option
<
BusName
<
'
a
>
>
pub
path
:
Option
<
Path
<
'
a
>
>
pub
interface
:
Option
<
Interface
<
'
a
>
>
pub
member
:
Option
<
Member
<
'
a
>
>
_more_fields_may_come
:
(
)
}
fn
msg_type_str
(
m
:
MessageType
)
-
>
&
'
static
str
{
use
MessageType
:
:
*
;
match
m
{
Signal
=
>
"
signal
"
MethodCall
=
>
"
method_call
"
MethodReturn
=
>
"
method_return
"
Error
=
>
"
error
"
Invalid
=
>
unreachable
!
(
)
}
}
impl
<
'
a
>
MatchRule
<
'
a
>
{
pub
fn
match_str
(
&
self
)
-
>
String
{
let
mut
v
=
vec
!
(
)
;
if
let
Some
(
x
)
=
self
.
msg_type
{
v
.
push
(
(
"
type
"
msg_type_str
(
x
)
)
)
}
;
if
let
Some
(
ref
x
)
=
self
.
sender
{
v
.
push
(
(
"
sender
"
&
x
)
)
}
;
if
let
Some
(
ref
x
)
=
self
.
path
{
v
.
push
(
(
"
path
"
&
x
)
)
}
;
if
let
Some
(
ref
x
)
=
self
.
interface
{
v
.
push
(
(
"
interface
"
&
x
)
)
}
;
if
let
Some
(
ref
x
)
=
self
.
member
{
v
.
push
(
(
"
member
"
&
x
)
)
}
;
let
v
:
Vec
<
_
>
=
v
.
into_iter
(
)
.
map
(
|
(
k
v
)
|
format
!
(
"
{
}
=
'
{
}
'
"
k
v
)
)
.
collect
(
)
;
v
.
join
(
"
"
)
}
pub
fn
matches
(
&
self
msg
:
&
Message
)
-
>
bool
{
if
let
Some
(
x
)
=
self
.
msg_type
{
if
x
!
=
msg
.
msg_type
(
)
{
return
false
;
}
}
;
if
self
.
sender
.
is_some
(
)
&
&
msg
.
sender
(
)
!
=
self
.
sender
{
return
false
}
;
if
self
.
path
.
is_some
(
)
&
&
msg
.
path
(
)
!
=
self
.
path
{
return
false
}
;
if
self
.
interface
.
is_some
(
)
&
&
msg
.
interface
(
)
!
=
self
.
interface
{
return
false
}
;
if
self
.
member
.
is_some
(
)
&
&
msg
.
member
(
)
!
=
self
.
member
{
return
false
}
;
true
}
pub
fn
new
(
)
-
>
Self
{
Default
:
:
default
(
)
}
pub
fn
into_static
(
&
self
)
-
>
MatchRule
<
'
static
>
{
MatchRule
{
msg_type
:
self
.
msg_type
sender
:
self
.
sender
.
as_ref
(
)
.
map
(
|
x
|
x
.
clone
(
)
.
into_static
(
)
)
path
:
self
.
path
.
as_ref
(
)
.
map
(
|
x
|
x
.
clone
(
)
.
into_static
(
)
)
interface
:
self
.
interface
.
as_ref
(
)
.
map
(
|
x
|
x
.
clone
(
)
.
into_static
(
)
)
member
:
self
.
member
.
as_ref
(
)
.
map
(
|
x
|
x
.
clone
(
)
.
into_static
(
)
)
_more_fields_may_come
:
(
)
}
}
}
