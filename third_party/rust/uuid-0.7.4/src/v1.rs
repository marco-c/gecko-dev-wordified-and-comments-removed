use
core
:
:
sync
:
:
atomic
;
use
prelude
:
:
*
;
#
[
derive
(
Debug
)
]
pub
struct
Context
{
count
:
atomic
:
:
AtomicUsize
}
pub
trait
ClockSequence
{
fn
generate_sequence
(
&
self
seconds
:
u64
nano_seconds
:
u32
)
-
>
u16
;
}
impl
Uuid
{
pub
fn
new_v1
<
T
>
(
context
:
&
T
seconds
:
u64
nano_seconds
:
u32
node_id
:
&
[
u8
]
)
-
>
Result
<
Self
:
:
BytesError
>
where
T
:
ClockSequence
{
const
NODE_ID_LEN
:
usize
=
6
;
let
len
=
node_id
.
len
(
)
;
if
len
!
=
NODE_ID_LEN
{
return
Err
(
:
:
BytesError
:
:
new
(
NODE_ID_LEN
len
)
)
;
}
let
time_low
;
let
time_mid
;
let
time_high_and_version
;
{
const
UUID_TICKS_BETWEEN_EPOCHS
:
u64
=
0x01B2_1DD2_1381_4000
;
let
timestamp
=
seconds
*
10_000_000
+
u64
:
:
from
(
nano_seconds
/
100
)
;
let
uuid_time
=
timestamp
+
UUID_TICKS_BETWEEN_EPOCHS
;
time_low
=
(
uuid_time
&
0xFFFF_FFFF
)
as
u32
;
time_mid
=
(
(
uuid_time
>
>
32
)
&
0xFFFF
)
as
u16
;
time_high_and_version
=
(
(
(
uuid_time
>
>
48
)
&
0x0FFF
)
as
u16
)
|
(
1
<
<
12
)
;
}
let
mut
d4
=
[
0
;
8
]
;
{
let
count
=
context
.
generate_sequence
(
seconds
nano_seconds
)
;
d4
[
0
]
=
(
(
(
count
&
0x3F00
)
>
>
8
)
as
u8
)
|
0x80
;
d4
[
1
]
=
(
count
&
0xFF
)
as
u8
;
}
d4
[
2
.
.
]
.
copy_from_slice
(
node_id
)
;
Uuid
:
:
from_fields
(
time_low
time_mid
time_high_and_version
&
d4
)
}
}
impl
Context
{
pub
fn
new
(
count
:
u16
)
-
>
Self
{
Self
{
count
:
atomic
:
:
AtomicUsize
:
:
new
(
count
as
usize
)
}
}
}
impl
ClockSequence
for
Context
{
fn
generate_sequence
(
&
self
_
:
u64
_
:
u32
)
-
>
u16
{
(
self
.
count
.
fetch_add
(
1
atomic
:
:
Ordering
:
:
SeqCst
)
&
0xffff
)
as
u16
}
}
#
[
cfg
(
test
)
]
mod
tests
{
#
[
test
]
fn
test_new_v1
(
)
{
use
super
:
:
Context
;
use
prelude
:
:
*
;
let
time
:
u64
=
1_496_854_535
;
let
time_fraction
:
u32
=
812_946_000
;
let
node
=
[
1
2
3
4
5
6
]
;
let
context
=
Context
:
:
new
(
0
)
;
{
let
uuid
=
Uuid
:
:
new_v1
(
&
context
time
time_fraction
&
node
)
.
unwrap
(
)
;
assert_eq
!
(
uuid
.
get_version
(
)
Some
(
Version
:
:
Mac
)
)
;
assert_eq
!
(
uuid
.
get_variant
(
)
Some
(
Variant
:
:
RFC4122
)
)
;
assert_eq
!
(
uuid
.
to_hyphenated
(
)
.
to_string
(
)
"
20616934
-
4ba2
-
11e7
-
8000
-
010203040506
"
)
;
let
ts
=
uuid
.
to_timestamp
(
)
.
unwrap
(
)
;
assert_eq
!
(
ts
.
0
-
0x01B2_1DD2_1381_4000
14_968_545_358_129_460
)
;
assert_eq
!
(
ts
.
1
0
)
;
}
;
{
let
uuid2
=
Uuid
:
:
new_v1
(
&
context
time
time_fraction
&
node
)
.
unwrap
(
)
;
assert_eq
!
(
uuid2
.
to_hyphenated
(
)
.
to_string
(
)
"
20616934
-
4ba2
-
11e7
-
8001
-
010203040506
"
)
;
assert_eq
!
(
uuid2
.
to_timestamp
(
)
.
unwrap
(
)
.
1
1
)
}
;
}
}
