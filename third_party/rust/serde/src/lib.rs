#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
serde
/
1
.
0
.
151
"
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
cfg_attr
(
feature
=
"
unstable
"
feature
(
error_in_core
never_type
)
)
]
#
!
[
allow
(
unknown_lints
bare_trait_objects
deprecated
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
renamed_and_removed_lints
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
unnested_or_patterns
semicolon_if_nothing_returned
empty_enum
type_repetition_in_bounds
cast_possible_truncation
cast_possible_wrap
cast_sign_loss
cast_lossless
module_name_repetitions
option_if_let_else
single_match_else
type_complexity
use_self
zero_prefixed_literal
derive_partial_eq_without_eq
enum_glob_use
explicit_auto_deref
map_err_ignore
new_without_default
result_unit_err
wildcard_imports
needless_pass_by_value
similar_names
too_many_lines
doc_markdown
unseparated_literal_suffix
needless_doctest_main
missing_errors_doc
must_use_candidate
)
)
]
#
!
[
deny
(
missing_docs
unused_imports
)
]
#
[
cfg
(
feature
=
"
alloc
"
)
]
extern
crate
alloc
;
mod
lib
{
mod
core
{
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
pub
use
core
:
:
*
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
*
;
}
pub
use
self
:
:
core
:
:
{
cmp
iter
mem
num
ptr
slice
str
}
;
pub
use
self
:
:
core
:
:
{
f32
f64
}
;
pub
use
self
:
:
core
:
:
{
i16
i32
i64
i8
isize
}
;
pub
use
self
:
:
core
:
:
{
u16
u32
u64
u8
usize
}
;
pub
use
self
:
:
core
:
:
cell
:
:
{
Cell
RefCell
}
;
pub
use
self
:
:
core
:
:
clone
:
:
{
self
Clone
}
;
pub
use
self
:
:
core
:
:
convert
:
:
{
self
From
Into
}
;
pub
use
self
:
:
core
:
:
default
:
:
{
self
Default
}
;
pub
use
self
:
:
core
:
:
fmt
:
:
{
self
Debug
Display
}
;
pub
use
self
:
:
core
:
:
marker
:
:
{
self
PhantomData
}
;
pub
use
self
:
:
core
:
:
num
:
:
Wrapping
;
pub
use
self
:
:
core
:
:
ops
:
:
Range
;
pub
use
self
:
:
core
:
:
option
:
:
{
self
Option
}
;
pub
use
self
:
:
core
:
:
result
:
:
{
self
Result
}
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
borrow
:
:
{
Cow
ToOwned
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
borrow
:
:
{
Cow
ToOwned
}
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
string
:
:
{
String
ToString
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
string
:
:
{
String
ToString
}
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
vec
:
:
Vec
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
vec
:
:
Vec
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
boxed
:
:
Box
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
boxed
:
:
Box
;
#
[
cfg
(
all
(
feature
=
"
rc
"
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
rc
:
:
{
Rc
Weak
as
RcWeak
}
;
#
[
cfg
(
all
(
feature
=
"
rc
"
feature
=
"
std
"
)
)
]
pub
use
std
:
:
rc
:
:
{
Rc
Weak
as
RcWeak
}
;
#
[
cfg
(
all
(
feature
=
"
rc
"
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
sync
:
:
{
Arc
Weak
as
ArcWeak
}
;
#
[
cfg
(
all
(
feature
=
"
rc
"
feature
=
"
std
"
)
)
]
pub
use
std
:
:
sync
:
:
{
Arc
Weak
as
ArcWeak
}
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
collections
:
:
{
BTreeMap
BTreeSet
BinaryHeap
LinkedList
VecDeque
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
collections
:
:
{
BTreeMap
BTreeSet
BinaryHeap
LinkedList
VecDeque
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
{
error
net
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
collections
:
:
{
HashMap
HashSet
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
ffi
:
:
{
CStr
CString
OsStr
OsString
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
hash
:
:
{
BuildHasher
Hash
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
io
:
:
Write
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
path
:
:
{
Path
PathBuf
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
sync
:
:
{
Mutex
RwLock
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
time
:
:
{
SystemTime
UNIX_EPOCH
}
;
#
[
cfg
(
all
(
feature
=
"
std
"
not
(
no_collections_bound
)
no_ops_bound
)
)
]
pub
use
std
:
:
collections
:
:
Bound
;
#
[
cfg
(
not
(
no_core_reverse
)
)
]
pub
use
self
:
:
core
:
:
cmp
:
:
Reverse
;
#
[
cfg
(
not
(
no_ops_bound
)
)
]
pub
use
self
:
:
core
:
:
ops
:
:
Bound
;
#
[
cfg
(
not
(
no_range_inclusive
)
)
]
pub
use
self
:
:
core
:
:
ops
:
:
RangeInclusive
;
#
[
cfg
(
all
(
feature
=
"
std
"
no_target_has_atomic
not
(
no_std_atomic
)
)
)
]
pub
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicBool
AtomicI16
AtomicI32
AtomicI8
AtomicIsize
AtomicU16
AtomicU32
AtomicU8
AtomicUsize
Ordering
}
;
#
[
cfg
(
all
(
feature
=
"
std
"
no_target_has_atomic
not
(
no_std_atomic64
)
)
)
]
pub
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicI64
AtomicU64
}
;
#
[
cfg
(
all
(
feature
=
"
std
"
not
(
no_target_has_atomic
)
)
)
]
pub
use
std
:
:
sync
:
:
atomic
:
:
Ordering
;
#
[
cfg
(
all
(
feature
=
"
std
"
not
(
no_target_has_atomic
)
target_has_atomic
=
"
8
"
)
)
]
pub
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicBool
AtomicI8
AtomicU8
}
;
#
[
cfg
(
all
(
feature
=
"
std
"
not
(
no_target_has_atomic
)
target_has_atomic
=
"
16
"
)
)
]
pub
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicI16
AtomicU16
}
;
#
[
cfg
(
all
(
feature
=
"
std
"
not
(
no_target_has_atomic
)
target_has_atomic
=
"
32
"
)
)
]
pub
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicI32
AtomicU32
}
;
#
[
cfg
(
all
(
feature
=
"
std
"
not
(
no_target_has_atomic
)
target_has_atomic
=
"
64
"
)
)
]
pub
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicI64
AtomicU64
}
;
#
[
cfg
(
all
(
feature
=
"
std
"
not
(
no_target_has_atomic
)
target_has_atomic
=
"
ptr
"
)
)
]
pub
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicIsize
AtomicUsize
}
;
#
[
cfg
(
any
(
feature
=
"
std
"
not
(
no_core_duration
)
)
)
]
pub
use
self
:
:
core
:
:
time
:
:
Duration
;
}
macro_rules
!
try
{
(
expr
:
expr
)
=
>
{
match
expr
{
Ok
(
val
)
=
>
val
Err
(
err
)
=
>
return
Err
(
err
)
}
}
;
}
#
[
macro_use
]
mod
macros
;
#
[
macro_use
]
mod
integer128
;
pub
mod
de
;
pub
mod
ser
;
#
[
doc
(
inline
)
]
pub
use
de
:
:
{
Deserialize
Deserializer
}
;
#
[
doc
(
inline
)
]
pub
use
ser
:
:
{
Serialize
Serializer
}
;
#
[
doc
(
hidden
)
]
#
[
path
=
"
private
/
mod
.
rs
"
]
pub
mod
__private
;
#
[
allow
(
unused_imports
)
]
use
self
:
:
__private
as
export
;
#
[
allow
(
unused_imports
)
]
use
self
:
:
__private
as
private
;
#
[
path
=
"
de
/
seed
.
rs
"
]
mod
seed
;
#
[
cfg
(
not
(
any
(
feature
=
"
std
"
feature
=
"
unstable
"
)
)
)
]
mod
std_error
;
#
[
cfg
(
feature
=
"
serde_derive
"
)
]
#
[
allow
(
unused_imports
)
]
#
[
macro_use
]
extern
crate
serde_derive
;
#
[
cfg
(
feature
=
"
serde_derive
"
)
]
#
[
doc
(
hidden
)
]
pub
use
serde_derive
:
:
*
;
#
[
cfg
(
all
(
not
(
no_serde_derive
)
any
(
feature
=
"
std
"
feature
=
"
alloc
"
)
)
)
]
mod
actually_private
{
pub
struct
T
;
}
