#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
serde
/
1
.
0
.
227
"
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_cfg
rustdoc_internals
)
)
]
#
!
[
cfg_attr
(
docsrs
allow
(
internal_features
)
)
]
#
!
[
cfg_attr
(
feature
=
"
unstable
"
feature
(
never_type
)
)
]
#
!
[
allow
(
unknown_lints
bare_trait_objects
deprecated
mismatched_lifetime_syntaxes
)
]
#
!
[
allow
(
clippy
:
:
unnested_or_patterns
clippy
:
:
semicolon_if_nothing_returned
clippy
:
:
empty_enum
clippy
:
:
type_repetition_in_bounds
clippy
:
:
cast_possible_truncation
clippy
:
:
cast_possible_wrap
clippy
:
:
cast_precision_loss
clippy
:
:
cast_sign_loss
clippy
:
:
cast_lossless
clippy
:
:
module_name_repetitions
clippy
:
:
single_match_else
clippy
:
:
type_complexity
clippy
:
:
use_self
clippy
:
:
zero_prefixed_literal
clippy
:
:
derive_partial_eq_without_eq
clippy
:
:
enum_glob_use
clippy
:
:
explicit_auto_deref
clippy
:
:
incompatible_msrv
clippy
:
:
let_underscore_untyped
clippy
:
:
map_err_ignore
clippy
:
:
new_without_default
clippy
:
:
result_unit_err
clippy
:
:
wildcard_imports
clippy
:
:
needless_pass_by_value
clippy
:
:
similar_names
clippy
:
:
too_many_lines
clippy
:
:
doc_markdown
clippy
:
:
elidable_lifetime_names
clippy
:
:
needless_lifetimes
clippy
:
:
unseparated_literal_suffix
clippy
:
:
needless_doctest_main
clippy
:
:
missing_errors_doc
clippy
:
:
must_use_candidate
)
]
#
!
[
deny
(
clippy
:
:
question_mark_used
)
]
#
!
[
deny
(
missing_docs
unused_imports
)
]
#
[
cfg
(
feature
=
"
alloc
"
)
]
extern
crate
alloc
;
#
[
cfg
(
docsrs
)
]
#
[
macro_use
]
#
[
path
=
"
core
/
crate_root
.
rs
"
]
mod
crate_root
;
#
[
cfg
(
docsrs
)
]
#
[
macro_use
]
#
[
path
=
"
core
/
macros
.
rs
"
]
mod
macros
;
#
[
cfg
(
not
(
docsrs
)
)
]
macro_rules
!
crate_root
{
(
)
=
>
{
/
/
/
A
facade
around
all
the
types
we
need
from
the
std
core
and
alloc
/
/
/
crates
.
This
avoids
elaborate
import
wrangling
having
to
happen
in
every
/
/
/
module
.
mod
lib
{
mod
core
{
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
pub
use
core
:
:
*
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
*
;
}
pub
use
self
:
:
core
:
:
{
f32
f64
}
;
pub
use
self
:
:
core
:
:
{
ptr
str
}
;
#
[
cfg
(
any
(
feature
=
"
std
"
feature
=
"
alloc
"
)
)
]
pub
use
self
:
:
core
:
:
slice
;
pub
use
self
:
:
core
:
:
clone
;
pub
use
self
:
:
core
:
:
convert
;
pub
use
self
:
:
core
:
:
default
;
pub
use
self
:
:
core
:
:
fmt
:
:
{
self
Debug
Display
Write
as
FmtWrite
}
;
pub
use
self
:
:
core
:
:
marker
:
:
{
self
PhantomData
}
;
pub
use
self
:
:
core
:
:
option
;
pub
use
self
:
:
core
:
:
result
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
borrow
:
:
{
Cow
ToOwned
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
borrow
:
:
{
Cow
ToOwned
}
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
string
:
:
{
String
ToString
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
string
:
:
{
String
ToString
}
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
vec
:
:
Vec
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
vec
:
:
Vec
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
boxed
:
:
Box
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
boxed
:
:
Box
;
}
/
/
None
of
this
crate
'
s
error
handling
needs
the
From
:
:
from
error
conversion
/
/
performed
implicitly
by
the
?
operator
or
the
standard
library
'
s
try
!
/
/
macro
.
This
simplified
macro
gives
a
5
.
5
%
improvement
in
compile
time
/
/
compared
to
standard
try
!
and
9
%
improvement
compared
to
?
.
#
[
cfg
(
not
(
no_serde_derive
)
)
]
macro_rules
!
tri
{
(
expr
:
expr
)
=
>
{
match
expr
{
Ok
(
val
)
=
>
val
Err
(
err
)
=
>
return
Err
(
err
)
}
}
;
}
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
pub
use
serde_core
:
:
{
de
forward_to_deserialize_any
ser
Deserialize
Deserializer
Serialize
Serializer
}
;
/
/
Used
by
generated
code
and
doc
tests
.
Not
public
API
.
#
[
doc
(
hidden
)
]
mod
private
;
include
!
(
concat
!
(
env
!
(
"
OUT_DIR
"
)
"
/
private
.
rs
"
)
)
;
}
;
}
crate_root
!
(
)
;
mod
integer128
;
#
[
cfg
(
feature
=
"
serde_derive
"
)
]
extern
crate
serde_derive
;
#
[
cfg
(
feature
=
"
serde_derive
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
derive
"
)
)
)
]
pub
use
serde_derive
:
:
{
Deserialize
Serialize
}
;
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
__require_serde_not_serde_core
{
(
)
=
>
{
}
;
}
