#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
serde
/
1
.
0
.
8
"
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
cfg_attr
(
feature
=
"
unstable
"
feature
(
nonzero
specialization
)
)
]
#
!
[
cfg_attr
(
all
(
feature
=
"
std
"
feature
=
"
unstable
"
)
feature
(
into_boxed_c_str
)
)
]
#
!
[
cfg_attr
(
feature
=
"
alloc
"
feature
(
alloc
)
)
]
#
!
[
cfg_attr
(
feature
=
"
collections
"
feature
(
collections
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
doc_markdown
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
linkedlist
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
type_complexity
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
zero_prefixed_literal
)
)
]
#
!
[
deny
(
missing_docs
unused_imports
)
]
#
[
cfg
(
feature
=
"
collections
"
)
]
extern
crate
collections
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
extern
crate
alloc
;
#
[
cfg
(
all
(
feature
=
"
unstable
"
feature
=
"
std
"
)
)
]
extern
crate
core
;
mod
lib
{
mod
core
{
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
*
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
pub
use
core
:
:
*
;
}
pub
use
self
:
:
core
:
:
{
cmp
iter
mem
ops
slice
str
}
;
pub
use
self
:
:
core
:
:
{
i8
i16
i32
i64
isize
}
;
pub
use
self
:
:
core
:
:
{
u8
u16
u32
u64
usize
}
;
pub
use
self
:
:
core
:
:
{
f32
f64
}
;
pub
use
self
:
:
core
:
:
cell
:
:
{
Cell
RefCell
}
;
pub
use
self
:
:
core
:
:
clone
:
:
{
self
Clone
}
;
pub
use
self
:
:
core
:
:
convert
:
:
{
self
From
Into
}
;
pub
use
self
:
:
core
:
:
default
:
:
{
self
Default
}
;
pub
use
self
:
:
core
:
:
fmt
:
:
{
self
Debug
Display
}
;
pub
use
self
:
:
core
:
:
marker
:
:
{
self
PhantomData
}
;
pub
use
self
:
:
core
:
:
option
:
:
{
self
Option
}
;
pub
use
self
:
:
core
:
:
result
:
:
{
self
Result
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
borrow
:
:
{
Cow
ToOwned
}
;
#
[
cfg
(
all
(
feature
=
"
collections
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
collections
:
:
borrow
:
:
{
Cow
ToOwned
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
string
:
:
String
;
#
[
cfg
(
all
(
feature
=
"
collections
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
collections
:
:
string
:
:
{
String
ToString
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
vec
:
:
Vec
;
#
[
cfg
(
all
(
feature
=
"
collections
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
collections
:
:
vec
:
:
Vec
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
boxed
:
:
Box
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
boxed
:
:
Box
;
#
[
cfg
(
all
(
feature
=
"
rc
"
feature
=
"
std
"
)
)
]
pub
use
std
:
:
rc
:
:
Rc
;
#
[
cfg
(
all
(
feature
=
"
rc
"
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
rc
:
:
Rc
;
#
[
cfg
(
all
(
feature
=
"
rc
"
feature
=
"
std
"
)
)
]
pub
use
std
:
:
sync
:
:
Arc
;
#
[
cfg
(
all
(
feature
=
"
rc
"
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
alloc
:
:
arc
:
:
Arc
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
collections
:
:
{
BinaryHeap
BTreeMap
BTreeSet
LinkedList
VecDeque
}
;
#
[
cfg
(
all
(
feature
=
"
collections
"
not
(
feature
=
"
std
"
)
)
)
]
pub
use
collections
:
:
{
BinaryHeap
BTreeMap
BTreeSet
LinkedList
VecDeque
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
{
error
net
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
collections
:
:
{
HashMap
HashSet
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
ffi
:
:
{
CString
CStr
OsString
OsStr
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
hash
:
:
{
Hash
BuildHasher
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
io
:
:
Write
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
path
:
:
{
Path
PathBuf
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
time
:
:
Duration
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
sync
:
:
{
Mutex
RwLock
}
;
#
[
cfg
(
feature
=
"
unstable
"
)
]
pub
use
core
:
:
nonzero
:
:
{
NonZero
Zeroable
}
;
}
#
[
macro_use
]
mod
macros
;
pub
mod
ser
;
pub
mod
de
;
#
[
doc
(
inline
)
]
pub
use
ser
:
:
{
Serialize
Serializer
}
;
#
[
doc
(
inline
)
]
pub
use
de
:
:
{
Deserialize
Deserializer
}
;
#
[
doc
(
hidden
)
]
pub
mod
export
;
#
[
doc
(
hidden
)
]
pub
mod
private
;
#
[
cfg
(
feature
=
"
serde_derive
"
)
]
#
[
allow
(
unused_imports
)
]
#
[
macro_use
]
extern
crate
serde_derive
;
#
[
cfg
(
feature
=
"
serde_derive
"
)
]
#
[
doc
(
hidden
)
]
pub
use
serde_derive
:
:
*
;
