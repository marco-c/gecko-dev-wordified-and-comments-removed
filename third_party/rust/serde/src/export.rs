pub
use
lib
:
:
clone
:
:
Clone
;
pub
use
lib
:
:
convert
:
:
{
From
Into
}
;
pub
use
lib
:
:
default
:
:
Default
;
pub
use
lib
:
:
fmt
:
:
{
self
Formatter
}
;
pub
use
lib
:
:
marker
:
:
PhantomData
;
pub
use
lib
:
:
option
:
:
Option
:
:
{
self
None
Some
}
;
pub
use
lib
:
:
result
:
:
Result
:
:
{
self
Err
Ok
}
;
pub
use
self
:
:
string
:
:
from_utf8_lossy
;
#
[
cfg
(
any
(
feature
=
"
alloc
"
feature
=
"
std
"
)
)
]
pub
use
lib
:
:
Vec
;
mod
string
{
use
lib
:
:
*
;
#
[
cfg
(
any
(
feature
=
"
std
"
feature
=
"
alloc
"
)
)
]
pub
fn
from_utf8_lossy
(
bytes
:
&
[
u8
]
)
-
>
Cow
<
str
>
{
String
:
:
from_utf8_lossy
(
bytes
)
}
#
[
cfg
(
not
(
any
(
feature
=
"
std
"
feature
=
"
alloc
"
)
)
)
]
pub
fn
from_utf8_lossy
(
bytes
:
&
[
u8
]
)
-
>
&
str
{
str
:
:
from_utf8
(
bytes
)
.
unwrap_or
(
"
\
u
{
fffd
}
\
u
{
fffd
}
\
u
{
fffd
}
"
)
}
}
