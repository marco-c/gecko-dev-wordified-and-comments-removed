#
[
cfg
(
feature
=
"
std
"
)
]
use
std
:
:
error
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
use
error
;
use
core
:
:
fmt
:
:
Display
;
use
core
:
:
iter
:
:
IntoIterator
;
mod
impls
;
mod
impossible
;
#
[
doc
(
hidden
)
]
pub
mod
private
;
#
[
cfg
(
any
(
feature
=
"
std
"
feature
=
"
collections
"
)
)
]
mod
content
;
pub
use
self
:
:
impossible
:
:
Impossible
;
pub
trait
Error
:
Sized
+
error
:
:
Error
{
fn
custom
<
T
:
Display
>
(
msg
:
T
)
-
>
Self
;
}
pub
trait
Serialize
{
fn
serialize
<
S
>
(
&
self
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
Serializer
;
}
pub
trait
Serializer
:
Sized
{
type
Ok
;
type
Error
:
Error
;
type
SerializeSeq
:
SerializeSeq
<
Ok
=
Self
:
:
Ok
Error
=
Self
:
:
Error
>
;
type
SerializeTuple
:
SerializeTuple
<
Ok
=
Self
:
:
Ok
Error
=
Self
:
:
Error
>
;
type
SerializeTupleStruct
:
SerializeTupleStruct
<
Ok
=
Self
:
:
Ok
Error
=
Self
:
:
Error
>
;
type
SerializeTupleVariant
:
SerializeTupleVariant
<
Ok
=
Self
:
:
Ok
Error
=
Self
:
:
Error
>
;
type
SerializeMap
:
SerializeMap
<
Ok
=
Self
:
:
Ok
Error
=
Self
:
:
Error
>
;
type
SerializeStruct
:
SerializeStruct
<
Ok
=
Self
:
:
Ok
Error
=
Self
:
:
Error
>
;
type
SerializeStructVariant
:
SerializeStructVariant
<
Ok
=
Self
:
:
Ok
Error
=
Self
:
:
Error
>
;
fn
serialize_bool
(
self
v
:
bool
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_i8
(
self
v
:
i8
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_i16
(
self
v
:
i16
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_i32
(
self
v
:
i32
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_i64
(
self
v
:
i64
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_u8
(
self
v
:
u8
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_u16
(
self
v
:
u16
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_u32
(
self
v
:
u32
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_u64
(
self
v
:
u64
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_f32
(
self
v
:
f32
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_f64
(
self
v
:
f64
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_char
(
self
v
:
char
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_str
(
self
value
:
&
str
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_bytes
(
self
value
:
&
[
u8
]
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_none
(
self
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_some
<
T
:
?
Sized
+
Serialize
>
(
self
value
:
&
T
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_unit
(
self
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_unit_struct
(
self
name
:
&
'
static
str
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_unit_variant
(
self
name
:
&
'
static
str
variant_index
:
usize
variant
:
&
'
static
str
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_newtype_struct
<
T
:
?
Sized
+
Serialize
>
(
self
name
:
&
'
static
str
value
:
&
T
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_newtype_variant
<
T
:
?
Sized
+
Serialize
>
(
self
name
:
&
'
static
str
variant_index
:
usize
variant
:
&
'
static
str
value
:
&
T
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
fn
serialize_seq
(
self
len
:
Option
<
usize
>
)
-
>
Result
<
Self
:
:
SerializeSeq
Self
:
:
Error
>
;
fn
serialize_seq_fixed_size
(
self
size
:
usize
)
-
>
Result
<
Self
:
:
SerializeSeq
Self
:
:
Error
>
;
fn
serialize_tuple
(
self
len
:
usize
)
-
>
Result
<
Self
:
:
SerializeTuple
Self
:
:
Error
>
;
fn
serialize_tuple_struct
(
self
name
:
&
'
static
str
len
:
usize
)
-
>
Result
<
Self
:
:
SerializeTupleStruct
Self
:
:
Error
>
;
fn
serialize_tuple_variant
(
self
name
:
&
'
static
str
variant_index
:
usize
variant
:
&
'
static
str
len
:
usize
)
-
>
Result
<
Self
:
:
SerializeTupleVariant
Self
:
:
Error
>
;
fn
serialize_map
(
self
len
:
Option
<
usize
>
)
-
>
Result
<
Self
:
:
SerializeMap
Self
:
:
Error
>
;
fn
serialize_struct
(
self
name
:
&
'
static
str
len
:
usize
)
-
>
Result
<
Self
:
:
SerializeStruct
Self
:
:
Error
>
;
fn
serialize_struct_variant
(
self
name
:
&
'
static
str
variant_index
:
usize
variant
:
&
'
static
str
len
:
usize
)
-
>
Result
<
Self
:
:
SerializeStructVariant
Self
:
:
Error
>
;
fn
collect_seq
<
I
>
(
self
iter
:
I
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
where
I
:
IntoIterator
<
I
as
IntoIterator
>
:
:
Item
:
Serialize
{
let
iter
=
iter
.
into_iter
(
)
;
let
mut
serializer
=
try
!
(
self
.
serialize_seq
(
iter
.
len_hint
(
)
)
)
;
for
item
in
iter
{
try
!
(
serializer
.
serialize_element
(
&
item
)
)
;
}
serializer
.
end
(
)
}
fn
collect_map
<
K
V
I
>
(
self
iter
:
I
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
where
K
:
Serialize
V
:
Serialize
I
:
IntoIterator
<
Item
=
(
K
V
)
>
{
let
iter
=
iter
.
into_iter
(
)
;
let
mut
serializer
=
try
!
(
self
.
serialize_map
(
iter
.
len_hint
(
)
)
)
;
for
(
key
value
)
in
iter
{
try
!
(
serializer
.
serialize_entry
(
&
key
&
value
)
)
;
}
serializer
.
end
(
)
}
}
pub
trait
SerializeSeq
{
type
Ok
;
type
Error
:
Error
;
fn
serialize_element
<
T
:
?
Sized
+
Serialize
>
(
&
mut
self
value
:
&
T
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
end
(
self
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
}
pub
trait
SerializeTuple
{
type
Ok
;
type
Error
:
Error
;
fn
serialize_element
<
T
:
?
Sized
+
Serialize
>
(
&
mut
self
value
:
&
T
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
end
(
self
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
}
pub
trait
SerializeTupleStruct
{
type
Ok
;
type
Error
:
Error
;
fn
serialize_field
<
T
:
?
Sized
+
Serialize
>
(
&
mut
self
value
:
&
T
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
end
(
self
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
}
pub
trait
SerializeTupleVariant
{
type
Ok
;
type
Error
:
Error
;
fn
serialize_field
<
T
:
?
Sized
+
Serialize
>
(
&
mut
self
value
:
&
T
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
end
(
self
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
}
pub
trait
SerializeMap
{
type
Ok
;
type
Error
:
Error
;
fn
serialize_key
<
T
:
?
Sized
+
Serialize
>
(
&
mut
self
key
:
&
T
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
serialize_value
<
T
:
?
Sized
+
Serialize
>
(
&
mut
self
value
:
&
T
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
serialize_entry
<
K
:
?
Sized
+
Serialize
V
:
?
Sized
+
Serialize
>
(
&
mut
self
key
:
&
K
value
:
&
V
)
-
>
Result
<
(
)
Self
:
:
Error
>
{
try
!
(
self
.
serialize_key
(
key
)
)
;
self
.
serialize_value
(
value
)
}
fn
end
(
self
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
}
pub
trait
SerializeStruct
{
type
Ok
;
type
Error
:
Error
;
fn
serialize_field
<
T
:
?
Sized
+
Serialize
>
(
&
mut
self
key
:
&
'
static
str
value
:
&
T
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
end
(
self
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
}
pub
trait
SerializeStructVariant
{
type
Ok
;
type
Error
:
Error
;
fn
serialize_field
<
T
:
?
Sized
+
Serialize
>
(
&
mut
self
key
:
&
'
static
str
value
:
&
T
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
end
(
self
)
-
>
Result
<
Self
:
:
Ok
Self
:
:
Error
>
;
}
trait
LenHint
:
Iterator
{
fn
len_hint
(
&
self
)
-
>
Option
<
usize
>
;
}
impl
<
I
:
Iterator
>
LenHint
for
I
{
#
[
cfg
(
not
(
feature
=
"
unstable
"
)
)
]
fn
len_hint
(
&
self
)
-
>
Option
<
usize
>
{
iterator_len_hint
(
self
)
}
#
[
cfg
(
feature
=
"
unstable
"
)
]
default
fn
len_hint
(
&
self
)
-
>
Option
<
usize
>
{
iterator_len_hint
(
self
)
}
}
#
[
cfg
(
feature
=
"
unstable
"
)
]
impl
<
I
:
ExactSizeIterator
>
LenHint
for
I
{
fn
len_hint
(
&
self
)
-
>
Option
<
usize
>
{
Some
(
self
.
len
(
)
)
}
}
fn
iterator_len_hint
<
I
:
Iterator
>
(
iter
:
&
I
)
-
>
Option
<
usize
>
{
match
iter
.
size_hint
(
)
{
(
lo
Some
(
hi
)
)
if
lo
=
=
hi
=
>
Some
(
lo
)
_
=
>
None
}
}
