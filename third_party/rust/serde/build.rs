use
std
:
:
env
;
use
std
:
:
process
:
:
Command
;
use
std
:
:
str
:
:
{
self
FromStr
}
;
fn
main
(
)
{
println
!
(
"
cargo
:
rerun
-
if
-
changed
=
build
.
rs
"
)
;
let
minor
=
match
rustc_minor_version
(
)
{
Some
(
minor
)
=
>
minor
None
=
>
return
}
;
let
target
=
env
:
:
var
(
"
TARGET
"
)
.
unwrap
(
)
;
let
emscripten
=
target
=
=
"
asmjs
-
unknown
-
emscripten
"
|
|
target
=
=
"
wasm32
-
unknown
-
emscripten
"
;
if
minor
<
26
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_ops_bound
"
)
;
if
minor
<
17
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_collections_bound
"
)
;
}
}
if
minor
<
19
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_core_reverse
"
)
;
}
if
minor
<
20
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_de_boxed_c_str
"
)
;
println
!
(
"
cargo
:
rustc
-
cfg
=
no_de_boxed_path
"
)
;
}
if
minor
<
21
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_de_rc_dst
"
)
;
}
if
minor
<
25
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_core_duration
"
)
;
}
if
minor
<
26
|
|
emscripten
&
&
minor
<
40
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_integer128
"
)
;
}
if
minor
<
27
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_range_inclusive
"
)
;
println
!
(
"
cargo
:
rustc
-
cfg
=
no_iterator_try_fold
"
)
;
}
if
minor
<
28
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_num_nonzero
"
)
;
}
if
minor
<
34
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_core_try_from
"
)
;
println
!
(
"
cargo
:
rustc
-
cfg
=
no_num_nonzero_signed
"
)
;
println
!
(
"
cargo
:
rustc
-
cfg
=
no_systemtime_checked_add
"
)
;
println
!
(
"
cargo
:
rustc
-
cfg
=
no_relaxed_trait_bounds
"
)
;
}
if
minor
<
56
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_serde_derive
"
)
;
}
if
minor
<
60
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_target_has_atomic
"
)
;
let
has_atomic64
=
target
.
starts_with
(
"
x86_64
"
)
|
|
target
.
starts_with
(
"
i686
"
)
|
|
target
.
starts_with
(
"
aarch64
"
)
|
|
target
.
starts_with
(
"
powerpc64
"
)
|
|
target
.
starts_with
(
"
sparc64
"
)
|
|
target
.
starts_with
(
"
mips64el
"
)
|
|
target
.
starts_with
(
"
riscv64
"
)
;
let
has_atomic32
=
has_atomic64
|
|
emscripten
;
if
minor
<
34
|
|
!
has_atomic64
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_std_atomic64
"
)
;
}
if
minor
<
34
|
|
!
has_atomic32
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_std_atomic
"
)
;
}
}
if
minor
<
64
{
println
!
(
"
cargo
:
rustc
-
cfg
=
no_core_cstr
"
)
;
}
}
fn
rustc_minor_version
(
)
-
>
Option
<
u32
>
{
let
rustc
=
match
env
:
:
var_os
(
"
RUSTC
"
)
{
Some
(
rustc
)
=
>
rustc
None
=
>
return
None
}
;
let
output
=
match
Command
:
:
new
(
rustc
)
.
arg
(
"
-
-
version
"
)
.
output
(
)
{
Ok
(
output
)
=
>
output
Err
(
_
)
=
>
return
None
}
;
let
version
=
match
str
:
:
from_utf8
(
&
output
.
stdout
)
{
Ok
(
version
)
=
>
version
Err
(
_
)
=
>
return
None
}
;
let
mut
pieces
=
version
.
split
(
'
.
'
)
;
if
pieces
.
next
(
)
!
=
Some
(
"
rustc
1
"
)
{
return
None
;
}
let
next
=
match
pieces
.
next
(
)
{
Some
(
next
)
=
>
next
None
=
>
return
None
}
;
u32
:
:
from_str
(
next
)
.
ok
(
)
}
