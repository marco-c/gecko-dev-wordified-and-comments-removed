mod
derive_enum
;
mod
derive_struct
;
use
proc_macro2
:
:
TokenStream
;
use
quote
:
:
quote
;
use
syn
:
:
{
Data
DeriveInput
Type
}
;
#
[
proc_macro_derive
(
Enum
)
]
pub
fn
derive_enum_map
(
input
:
proc_macro
:
:
TokenStream
)
-
>
proc_macro
:
:
TokenStream
{
let
input
:
DeriveInput
=
syn
:
:
parse
(
input
)
.
unwrap
(
)
;
let
result
=
match
input
.
data
{
Data
:
:
Enum
(
data_enum
)
=
>
derive_enum
:
:
generate
(
input
.
ident
data_enum
)
Data
:
:
Struct
(
data_struct
)
=
>
derive_struct
:
:
generate
(
input
.
ident
data_struct
)
_
=
>
quote
!
{
compile_error
!
{
"
#
[
derive
(
Enum
)
]
is
only
defined
for
enums
and
structs
"
}
}
}
;
result
.
into
(
)
}
fn
type_length
(
ty
:
&
Type
)
-
>
TokenStream
{
quote
!
{
<
#
ty
as
:
:
enum_map
:
:
Enum
>
:
:
LENGTH
}
}
