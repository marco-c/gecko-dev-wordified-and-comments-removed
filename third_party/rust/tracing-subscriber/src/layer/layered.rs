use
tracing_core
:
:
{
metadata
:
:
Metadata
span
Dispatch
Event
Interest
LevelFilter
Subscriber
}
;
use
crate
:
:
{
filter
layer
:
:
{
Context
Layer
}
registry
:
:
LookupSpan
}
;
#
[
cfg
(
all
(
feature
=
"
registry
"
feature
=
"
std
"
)
)
]
use
crate
:
:
{
filter
:
:
FilterId
registry
:
:
Registry
}
;
use
core
:
:
{
any
:
:
{
Any
TypeId
}
cmp
fmt
marker
:
:
PhantomData
}
;
#
[
derive
(
Clone
)
]
pub
struct
Layered
<
L
I
S
=
I
>
{
layer
:
L
inner
:
I
inner_is_registry
:
bool
has_layer_filter
:
bool
inner_has_layer_filter
:
bool
_s
:
PhantomData
<
fn
(
S
)
>
}
impl
<
L
S
>
Layered
<
L
S
>
where
L
:
Layer
<
S
>
S
:
Subscriber
{
pub
fn
is
<
T
:
Any
>
(
&
self
)
-
>
bool
{
self
.
downcast_ref
:
:
<
T
>
(
)
.
is_some
(
)
}
pub
fn
downcast_ref
<
T
:
Any
>
(
&
self
)
-
>
Option
<
&
T
>
{
unsafe
{
let
raw
=
self
.
downcast_raw
(
TypeId
:
:
of
:
:
<
T
>
(
)
)
?
;
if
raw
.
is_null
(
)
{
None
}
else
{
Some
(
&
*
(
raw
as
*
const
T
)
)
}
}
}
}
impl
<
L
S
>
Subscriber
for
Layered
<
L
S
>
where
L
:
Layer
<
S
>
S
:
Subscriber
{
fn
register_callsite
(
&
self
metadata
:
&
'
static
Metadata
<
'
static
>
)
-
>
Interest
{
self
.
pick_interest
(
self
.
layer
.
register_callsite
(
metadata
)
|
|
{
self
.
inner
.
register_callsite
(
metadata
)
}
)
}
fn
enabled
(
&
self
metadata
:
&
Metadata
<
'
_
>
)
-
>
bool
{
if
self
.
layer
.
enabled
(
metadata
self
.
ctx
(
)
)
{
self
.
inner
.
enabled
(
metadata
)
}
else
{
#
[
cfg
(
feature
=
"
registry
"
)
]
filter
:
:
FilterState
:
:
clear_enabled
(
)
;
false
}
}
fn
max_level_hint
(
&
self
)
-
>
Option
<
LevelFilter
>
{
self
.
pick_level_hint
(
self
.
layer
.
max_level_hint
(
)
self
.
inner
.
max_level_hint
(
)
super
:
:
subscriber_is_none
(
&
self
.
inner
)
)
}
fn
new_span
(
&
self
span
:
&
span
:
:
Attributes
<
'
_
>
)
-
>
span
:
:
Id
{
let
id
=
self
.
inner
.
new_span
(
span
)
;
self
.
layer
.
on_new_span
(
span
&
id
self
.
ctx
(
)
)
;
id
}
fn
record
(
&
self
span
:
&
span
:
:
Id
values
:
&
span
:
:
Record
<
'
_
>
)
{
self
.
inner
.
record
(
span
values
)
;
self
.
layer
.
on_record
(
span
values
self
.
ctx
(
)
)
;
}
fn
record_follows_from
(
&
self
span
:
&
span
:
:
Id
follows
:
&
span
:
:
Id
)
{
self
.
inner
.
record_follows_from
(
span
follows
)
;
self
.
layer
.
on_follows_from
(
span
follows
self
.
ctx
(
)
)
;
}
fn
event_enabled
(
&
self
event
:
&
Event
<
'
_
>
)
-
>
bool
{
if
self
.
layer
.
event_enabled
(
event
self
.
ctx
(
)
)
{
self
.
inner
.
event_enabled
(
event
)
}
else
{
false
}
}
fn
event
(
&
self
event
:
&
Event
<
'
_
>
)
{
self
.
inner
.
event
(
event
)
;
self
.
layer
.
on_event
(
event
self
.
ctx
(
)
)
;
}
fn
enter
(
&
self
span
:
&
span
:
:
Id
)
{
self
.
inner
.
enter
(
span
)
;
self
.
layer
.
on_enter
(
span
self
.
ctx
(
)
)
;
}
fn
exit
(
&
self
span
:
&
span
:
:
Id
)
{
self
.
inner
.
exit
(
span
)
;
self
.
layer
.
on_exit
(
span
self
.
ctx
(
)
)
;
}
fn
clone_span
(
&
self
old
:
&
span
:
:
Id
)
-
>
span
:
:
Id
{
let
new
=
self
.
inner
.
clone_span
(
old
)
;
if
&
new
!
=
old
{
self
.
layer
.
on_id_change
(
old
&
new
self
.
ctx
(
)
)
}
;
new
}
#
[
inline
]
fn
drop_span
(
&
self
id
:
span
:
:
Id
)
{
self
.
try_close
(
id
)
;
}
fn
try_close
(
&
self
id
:
span
:
:
Id
)
-
>
bool
{
#
[
cfg
(
all
(
feature
=
"
registry
"
feature
=
"
std
"
)
)
]
let
subscriber
=
&
self
.
inner
as
&
dyn
Subscriber
;
#
[
cfg
(
all
(
feature
=
"
registry
"
feature
=
"
std
"
)
)
]
let
mut
guard
=
subscriber
.
downcast_ref
:
:
<
Registry
>
(
)
.
map
(
|
registry
|
registry
.
start_close
(
id
.
clone
(
)
)
)
;
if
self
.
inner
.
try_close
(
id
.
clone
(
)
)
{
#
[
cfg
(
all
(
feature
=
"
registry
"
feature
=
"
std
"
)
)
]
{
if
let
Some
(
g
)
=
guard
.
as_mut
(
)
{
g
.
set_closing
(
)
}
;
}
self
.
layer
.
on_close
(
id
self
.
ctx
(
)
)
;
true
}
else
{
false
}
}
#
[
inline
]
fn
current_span
(
&
self
)
-
>
span
:
:
Current
{
self
.
inner
.
current_span
(
)
}
#
[
doc
(
hidden
)
]
unsafe
fn
downcast_raw
(
&
self
id
:
TypeId
)
-
>
Option
<
*
const
(
)
>
{
if
id
=
=
TypeId
:
:
of
:
:
<
Self
>
(
)
{
return
Some
(
self
as
*
const
_
as
*
const
(
)
)
;
}
self
.
layer
.
downcast_raw
(
id
)
.
or_else
(
|
|
self
.
inner
.
downcast_raw
(
id
)
)
}
}
impl
<
S
A
B
>
Layer
<
S
>
for
Layered
<
A
B
S
>
where
A
:
Layer
<
S
>
B
:
Layer
<
S
>
S
:
Subscriber
{
fn
on_register_dispatch
(
&
self
subscriber
:
&
Dispatch
)
{
self
.
layer
.
on_register_dispatch
(
subscriber
)
;
self
.
inner
.
on_register_dispatch
(
subscriber
)
;
}
fn
on_layer
(
&
mut
self
subscriber
:
&
mut
S
)
{
self
.
layer
.
on_layer
(
subscriber
)
;
self
.
inner
.
on_layer
(
subscriber
)
;
}
fn
register_callsite
(
&
self
metadata
:
&
'
static
Metadata
<
'
static
>
)
-
>
Interest
{
self
.
pick_interest
(
self
.
layer
.
register_callsite
(
metadata
)
|
|
{
self
.
inner
.
register_callsite
(
metadata
)
}
)
}
fn
enabled
(
&
self
metadata
:
&
Metadata
<
'
_
>
ctx
:
Context
<
'
_
S
>
)
-
>
bool
{
if
self
.
layer
.
enabled
(
metadata
ctx
.
clone
(
)
)
{
self
.
inner
.
enabled
(
metadata
ctx
)
}
else
{
false
}
}
fn
max_level_hint
(
&
self
)
-
>
Option
<
LevelFilter
>
{
self
.
pick_level_hint
(
self
.
layer
.
max_level_hint
(
)
self
.
inner
.
max_level_hint
(
)
super
:
:
layer_is_none
(
&
self
.
inner
)
)
}
#
[
inline
]
fn
on_new_span
(
&
self
attrs
:
&
span
:
:
Attributes
<
'
_
>
id
:
&
span
:
:
Id
ctx
:
Context
<
'
_
S
>
)
{
self
.
inner
.
on_new_span
(
attrs
id
ctx
.
clone
(
)
)
;
self
.
layer
.
on_new_span
(
attrs
id
ctx
)
;
}
#
[
inline
]
fn
on_record
(
&
self
span
:
&
span
:
:
Id
values
:
&
span
:
:
Record
<
'
_
>
ctx
:
Context
<
'
_
S
>
)
{
self
.
inner
.
on_record
(
span
values
ctx
.
clone
(
)
)
;
self
.
layer
.
on_record
(
span
values
ctx
)
;
}
#
[
inline
]
fn
on_follows_from
(
&
self
span
:
&
span
:
:
Id
follows
:
&
span
:
:
Id
ctx
:
Context
<
'
_
S
>
)
{
self
.
inner
.
on_follows_from
(
span
follows
ctx
.
clone
(
)
)
;
self
.
layer
.
on_follows_from
(
span
follows
ctx
)
;
}
#
[
inline
]
fn
event_enabled
(
&
self
event
:
&
Event
<
'
_
>
ctx
:
Context
<
'
_
S
>
)
-
>
bool
{
if
self
.
layer
.
event_enabled
(
event
ctx
.
clone
(
)
)
{
self
.
inner
.
event_enabled
(
event
ctx
)
}
else
{
false
}
}
#
[
inline
]
fn
on_event
(
&
self
event
:
&
Event
<
'
_
>
ctx
:
Context
<
'
_
S
>
)
{
self
.
inner
.
on_event
(
event
ctx
.
clone
(
)
)
;
self
.
layer
.
on_event
(
event
ctx
)
;
}
#
[
inline
]
fn
on_enter
(
&
self
id
:
&
span
:
:
Id
ctx
:
Context
<
'
_
S
>
)
{
self
.
inner
.
on_enter
(
id
ctx
.
clone
(
)
)
;
self
.
layer
.
on_enter
(
id
ctx
)
;
}
#
[
inline
]
fn
on_exit
(
&
self
id
:
&
span
:
:
Id
ctx
:
Context
<
'
_
S
>
)
{
self
.
inner
.
on_exit
(
id
ctx
.
clone
(
)
)
;
self
.
layer
.
on_exit
(
id
ctx
)
;
}
#
[
inline
]
fn
on_close
(
&
self
id
:
span
:
:
Id
ctx
:
Context
<
'
_
S
>
)
{
self
.
inner
.
on_close
(
id
.
clone
(
)
ctx
.
clone
(
)
)
;
self
.
layer
.
on_close
(
id
ctx
)
;
}
#
[
inline
]
fn
on_id_change
(
&
self
old
:
&
span
:
:
Id
new
:
&
span
:
:
Id
ctx
:
Context
<
'
_
S
>
)
{
self
.
inner
.
on_id_change
(
old
new
ctx
.
clone
(
)
)
;
self
.
layer
.
on_id_change
(
old
new
ctx
)
;
}
#
[
doc
(
hidden
)
]
unsafe
fn
downcast_raw
(
&
self
id
:
TypeId
)
-
>
Option
<
*
const
(
)
>
{
match
id
{
id
if
id
=
=
TypeId
:
:
of
:
:
<
Self
>
(
)
=
>
Some
(
self
as
*
const
_
as
*
const
(
)
)
id
if
filter
:
:
is_plf_downcast_marker
(
id
)
=
>
{
self
.
layer
.
downcast_raw
(
id
)
.
and
(
self
.
inner
.
downcast_raw
(
id
)
)
}
_
=
>
self
.
layer
.
downcast_raw
(
id
)
.
or_else
(
|
|
self
.
inner
.
downcast_raw
(
id
)
)
}
}
}
impl
<
'
a
L
S
>
LookupSpan
<
'
a
>
for
Layered
<
L
S
>
where
S
:
Subscriber
+
LookupSpan
<
'
a
>
{
type
Data
=
S
:
:
Data
;
fn
span_data
(
&
'
a
self
id
:
&
span
:
:
Id
)
-
>
Option
<
Self
:
:
Data
>
{
self
.
inner
.
span_data
(
id
)
}
#
[
cfg
(
all
(
feature
=
"
registry
"
feature
=
"
std
"
)
)
]
fn
register_filter
(
&
mut
self
)
-
>
FilterId
{
self
.
inner
.
register_filter
(
)
}
}
impl
<
L
S
>
Layered
<
L
S
>
where
S
:
Subscriber
{
fn
ctx
(
&
self
)
-
>
Context
<
'
_
S
>
{
Context
:
:
new
(
&
self
.
inner
)
}
}
impl
<
A
B
S
>
Layered
<
A
B
S
>
where
A
:
Layer
<
S
>
S
:
Subscriber
{
pub
(
super
)
fn
new
(
layer
:
A
inner
:
B
inner_has_layer_filter
:
bool
)
-
>
Self
{
#
[
cfg
(
all
(
feature
=
"
registry
"
feature
=
"
std
"
)
)
]
let
inner_is_registry
=
TypeId
:
:
of
:
:
<
S
>
(
)
=
=
TypeId
:
:
of
:
:
<
crate
:
:
registry
:
:
Registry
>
(
)
;
#
[
cfg
(
not
(
all
(
feature
=
"
registry
"
feature
=
"
std
"
)
)
)
]
let
inner_is_registry
=
false
;
let
inner_has_layer_filter
=
inner_has_layer_filter
|
|
inner_is_registry
;
let
has_layer_filter
=
filter
:
:
layer_has_plf
(
&
layer
)
;
Self
{
layer
inner
has_layer_filter
inner_has_layer_filter
inner_is_registry
_s
:
PhantomData
}
}
fn
pick_interest
(
&
self
outer
:
Interest
inner
:
impl
FnOnce
(
)
-
>
Interest
)
-
>
Interest
{
if
self
.
has_layer_filter
{
return
inner
(
)
;
}
if
outer
.
is_never
(
)
{
#
[
cfg
(
feature
=
"
registry
"
)
]
filter
:
:
FilterState
:
:
take_interest
(
)
;
return
outer
;
}
let
inner
=
inner
(
)
;
if
outer
.
is_sometimes
(
)
{
return
outer
;
}
if
inner
.
is_never
(
)
&
&
self
.
inner_has_layer_filter
{
return
Interest
:
:
sometimes
(
)
;
}
inner
}
fn
pick_level_hint
(
&
self
outer_hint
:
Option
<
LevelFilter
>
inner_hint
:
Option
<
LevelFilter
>
inner_is_none
:
bool
)
-
>
Option
<
LevelFilter
>
{
if
self
.
inner_is_registry
{
return
outer_hint
;
}
if
self
.
has_layer_filter
&
&
self
.
inner_has_layer_filter
{
return
Some
(
cmp
:
:
max
(
outer_hint
?
inner_hint
?
)
)
;
}
if
self
.
has_layer_filter
&
&
inner_hint
.
is_none
(
)
{
return
None
;
}
if
self
.
inner_has_layer_filter
&
&
outer_hint
.
is_none
(
)
{
return
None
;
}
if
super
:
:
layer_is_none
(
&
self
.
layer
)
{
return
cmp
:
:
max
(
outer_hint
Some
(
inner_hint
?
)
)
;
}
if
inner_is_none
&
&
inner_hint
=
=
Some
(
LevelFilter
:
:
OFF
)
{
return
outer_hint
;
}
cmp
:
:
max
(
outer_hint
inner_hint
)
}
}
impl
<
A
B
S
>
fmt
:
:
Debug
for
Layered
<
A
B
S
>
where
A
:
fmt
:
:
Debug
B
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
#
[
cfg
(
all
(
feature
=
"
registry
"
feature
=
"
std
"
)
)
]
let
alt
=
f
.
alternate
(
)
;
let
mut
s
=
f
.
debug_struct
(
"
Layered
"
)
;
#
[
cfg
(
all
(
feature
=
"
registry
"
feature
=
"
std
"
)
)
]
{
if
alt
{
s
.
field
(
"
inner_is_registry
"
&
self
.
inner_is_registry
)
.
field
(
"
has_layer_filter
"
&
self
.
has_layer_filter
)
.
field
(
"
inner_has_layer_filter
"
&
self
.
inner_has_layer_filter
)
;
}
}
s
.
field
(
"
layer
"
&
self
.
layer
)
.
field
(
"
inner
"
&
self
.
inner
)
.
finish
(
)
}
}
