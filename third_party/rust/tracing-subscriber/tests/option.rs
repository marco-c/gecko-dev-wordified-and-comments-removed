#
!
[
cfg
(
feature
=
"
registry
"
)
]
use
tracing_core
:
:
{
subscriber
:
:
Interest
LevelFilter
Metadata
Subscriber
}
;
use
tracing_subscriber
:
:
{
layer
prelude
:
:
*
}
;
#
[
derive
(
Debug
)
]
struct
BasicLayer
(
Option
<
LevelFilter
>
)
;
impl
<
S
:
Subscriber
>
tracing_subscriber
:
:
Layer
<
S
>
for
BasicLayer
{
fn
register_callsite
(
&
self
_m
:
&
Metadata
<
'
_
>
)
-
>
Interest
{
Interest
:
:
sometimes
(
)
}
fn
enabled
(
&
self
_m
:
&
Metadata
<
'
_
>
_
:
layer
:
:
Context
<
'
_
S
>
)
-
>
bool
{
true
}
fn
max_level_hint
(
&
self
)
-
>
Option
<
LevelFilter
>
{
self
.
0
}
}
#
[
test
]
fn
just_layer
(
)
{
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
LevelFilter
:
:
INFO
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
INFO
)
)
;
}
#
[
test
]
fn
subscriber_and_option_some_layer
(
)
{
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
LevelFilter
:
:
INFO
)
.
with
(
Some
(
LevelFilter
:
:
DEBUG
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
DEBUG
)
)
;
}
#
[
test
]
fn
subscriber_and_option_none_layer
(
)
{
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
LevelFilter
:
:
ERROR
)
.
with
(
None
:
:
<
LevelFilter
>
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
ERROR
)
)
;
}
#
[
test
]
fn
just_option_some_layer
(
)
{
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
None
:
:
<
LevelFilter
>
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
OFF
)
)
;
}
#
[
test
]
fn
just_option_none_layer
(
)
{
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
Some
(
LevelFilter
:
:
ERROR
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
ERROR
)
)
;
}
#
[
test
]
fn
none_outside_doesnt_override_max_level
(
)
{
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
BasicLayer
(
None
)
)
.
with
(
None
:
:
<
LevelFilter
>
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
None
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
BasicLayer
(
None
)
)
.
with
(
Some
(
LevelFilter
:
:
ERROR
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
ERROR
)
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
BasicLayer
(
Some
(
LevelFilter
:
:
DEBUG
)
)
)
.
with
(
None
:
:
<
LevelFilter
>
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
DEBUG
)
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
BasicLayer
(
None
)
)
.
with
(
None
:
:
<
LevelFilter
>
.
with_filter
(
LevelFilter
:
:
DEBUG
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
None
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
BasicLayer
(
Some
(
LevelFilter
:
:
INFO
)
)
)
.
with
(
None
:
:
<
LevelFilter
>
.
with_filter
(
LevelFilter
:
:
DEBUG
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
DEBUG
)
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
BasicLayer
(
Some
(
LevelFilter
:
:
INFO
)
)
.
with_filter
(
LevelFilter
:
:
DEBUG
)
)
.
with
(
None
:
:
<
LevelFilter
>
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
DEBUG
)
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
BasicLayer
(
None
)
.
with_filter
(
LevelFilter
:
:
DEBUG
)
)
.
with
(
None
:
:
<
LevelFilter
>
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
DEBUG
)
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
BasicLayer
(
Some
(
LevelFilter
:
:
INFO
)
)
)
.
with
(
None
:
:
<
LevelFilter
>
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
INFO
)
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
}
#
[
test
]
fn
none_inside_doesnt_override_max_level
(
)
{
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
None
:
:
<
LevelFilter
>
)
.
with
(
BasicLayer
(
None
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
None
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
Some
(
LevelFilter
:
:
ERROR
)
)
.
with
(
BasicLayer
(
None
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
ERROR
)
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
None
:
:
<
LevelFilter
>
)
.
with
(
BasicLayer
(
Some
(
LevelFilter
:
:
DEBUG
)
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
DEBUG
)
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
None
:
:
<
LevelFilter
>
.
with_filter
(
LevelFilter
:
:
DEBUG
)
)
.
with
(
BasicLayer
(
None
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
None
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
None
:
:
<
LevelFilter
>
.
with_filter
(
LevelFilter
:
:
DEBUG
)
)
.
with
(
BasicLayer
(
Some
(
LevelFilter
:
:
INFO
)
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
DEBUG
)
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
None
:
:
<
LevelFilter
>
)
.
with
(
BasicLayer
(
Some
(
LevelFilter
:
:
INFO
)
)
.
with_filter
(
LevelFilter
:
:
DEBUG
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
DEBUG
)
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
None
:
:
<
LevelFilter
>
)
.
with
(
BasicLayer
(
None
)
.
with_filter
(
LevelFilter
:
:
DEBUG
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
DEBUG
)
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
None
:
:
<
LevelFilter
>
)
.
with
(
BasicLayer
(
Some
(
LevelFilter
:
:
INFO
)
)
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
INFO
)
"
\
n
stack
:
{
:
#
?
}
"
subscriber
)
;
}
#
[
test
]
fn
reload_works_with_none
(
)
{
let
(
layer1
handle1
)
=
tracing_subscriber
:
:
reload
:
:
Layer
:
:
new
(
None
:
:
<
BasicLayer
>
)
;
let
(
layer2
_handle2
)
=
tracing_subscriber
:
:
reload
:
:
Layer
:
:
new
(
None
:
:
<
BasicLayer
>
)
;
let
subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
layer1
)
.
with
(
layer2
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
OFF
)
)
;
handle1
.
reload
(
Some
(
BasicLayer
(
None
)
)
)
.
unwrap
(
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
None
)
;
handle1
.
reload
(
Some
(
BasicLayer
(
Some
(
LevelFilter
:
:
DEBUG
)
)
)
)
.
unwrap
(
)
;
assert_eq
!
(
subscriber
.
max_level_hint
(
)
Some
(
LevelFilter
:
:
DEBUG
)
)
;
}
