use
super
:
:
*
;
use
tracing_mock
:
:
layer
:
:
MockLayer
;
use
tracing_subscriber
:
:
{
filter
prelude
:
:
*
Layer
}
;
fn
layer
(
)
-
>
(
MockLayer
subscriber
:
:
MockHandle
)
{
layer
:
:
mock
(
)
.
only
(
)
.
run_with_handle
(
)
}
fn
filter
<
S
>
(
)
-
>
filter
:
:
DynFilterFn
<
S
>
{
filter
:
:
dynamic_filter_fn
(
|
_
_
|
false
)
}
#
[
test
]
fn
box_works
(
)
{
let
(
layer
handle
)
=
layer
(
)
;
let
layer
=
Box
:
:
new
(
layer
.
with_filter
(
filter
(
)
)
)
;
let
_guard
=
tracing_subscriber
:
:
registry
(
)
.
with
(
layer
)
.
set_default
(
)
;
for
i
in
0
.
.
2
{
tracing
:
:
info
!
(
i
)
;
}
handle
.
assert_finished
(
)
;
}
#
[
test
]
fn
dyn_box_works
(
)
{
let
(
layer
handle
)
=
layer
(
)
;
let
layer
:
Box
<
dyn
Layer
<
_
>
+
Send
+
Sync
+
'
static
>
=
Box
:
:
new
(
layer
.
with_filter
(
filter
(
)
)
)
;
let
_guard
=
tracing_subscriber
:
:
registry
(
)
.
with
(
layer
)
.
set_default
(
)
;
for
i
in
0
.
.
2
{
tracing
:
:
info
!
(
i
)
;
}
handle
.
assert_finished
(
)
;
}
