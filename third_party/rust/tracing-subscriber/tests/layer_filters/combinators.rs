use
super
:
:
*
;
use
tracing_subscriber
:
:
{
filter
:
:
{
filter_fn
FilterExt
LevelFilter
}
prelude
:
:
*
}
;
#
[
test
]
fn
and
(
)
{
let
(
layer
handle
)
=
layer
:
:
mock
(
)
.
event
(
event
:
:
msg
(
"
a
very
interesting
event
"
)
.
at_level
(
tracing
:
:
Level
:
:
INFO
)
.
with_target
(
"
interesting_target
"
)
)
.
only
(
)
.
run_with_handle
(
)
;
let
target_filter
=
filter
:
:
filter_fn
(
|
meta
|
meta
.
target
(
)
.
starts_with
(
"
interesting_target
"
)
)
;
let
level_filter
=
LevelFilter
:
:
INFO
;
let
filter
=
target_filter
.
and
(
level_filter
)
;
let
_subscriber
=
tracing_subscriber
:
:
registry
(
)
.
with
(
layer
.
with_filter
(
filter
)
)
.
set_default
(
)
;
tracing
:
:
info
!
(
"
an
event
with
an
uninteresting
target
"
)
;
tracing
:
:
info
!
(
target
:
"
interesting_target
"
"
a
very
interesting
event
"
)
;
tracing
:
:
debug
!
(
target
:
"
interesting_target
"
"
interesting
debug
event
.
.
.
"
)
;
handle
.
assert_finished
(
)
;
}
