use
{
Header
HeaderValue
}
;
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
pub
struct
ContentLength
(
pub
u64
)
;
impl
Header
for
ContentLength
{
fn
name
(
)
-
>
&
'
static
:
:
http
:
:
header
:
:
HeaderName
{
&
:
:
http
:
:
header
:
:
CONTENT_LENGTH
}
fn
decode
<
'
i
I
:
Iterator
<
Item
=
&
'
i
HeaderValue
>
>
(
values
:
&
mut
I
)
-
>
Result
<
Self
:
:
Error
>
{
let
mut
len
=
None
;
for
value
in
values
{
let
parsed
=
value
.
to_str
(
)
.
map_err
(
|
_
|
:
:
Error
:
:
invalid
(
)
)
?
.
parse
:
:
<
u64
>
(
)
.
map_err
(
|
_
|
:
:
Error
:
:
invalid
(
)
)
?
;
if
let
Some
(
prev
)
=
len
{
if
prev
!
=
parsed
{
return
Err
(
:
:
Error
:
:
invalid
(
)
)
;
}
}
else
{
len
=
Some
(
parsed
)
;
}
}
len
.
map
(
ContentLength
)
.
ok_or_else
(
:
:
Error
:
:
invalid
)
}
fn
encode
<
E
:
Extend
<
:
:
HeaderValue
>
>
(
&
self
values
:
&
mut
E
)
{
values
.
extend
(
:
:
std
:
:
iter
:
:
once
(
self
.
0
.
into
(
)
)
)
;
}
}
