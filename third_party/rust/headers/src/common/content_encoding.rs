use
util
:
:
FlatCsv
;
use
{
HeaderValue
}
;
use
self
:
:
sealed
:
:
AsCoding
;
#
[
derive
(
Clone
Debug
Header
)
]
pub
struct
ContentEncoding
(
FlatCsv
)
;
impl
ContentEncoding
{
#
[
inline
]
pub
fn
gzip
(
)
-
>
ContentEncoding
{
ContentEncoding
(
HeaderValue
:
:
from_static
(
"
gzip
"
)
.
into
(
)
)
}
pub
fn
contains
(
&
self
coding
:
impl
AsCoding
)
-
>
bool
{
let
s
=
coding
.
as_coding
(
)
;
self
.
0
.
iter
(
)
.
find
(
|
&
opt
|
opt
=
=
s
)
.
is_some
(
)
}
}
mod
sealed
{
pub
trait
AsCoding
:
Sealed
{
}
pub
trait
Sealed
{
fn
as_coding
(
&
self
)
-
>
&
str
;
}
impl
<
'
a
>
AsCoding
for
&
'
a
str
{
}
impl
<
'
a
>
Sealed
for
&
'
a
str
{
fn
as_coding
(
&
self
)
-
>
&
str
{
*
self
}
}
}
