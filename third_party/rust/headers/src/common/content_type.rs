use
std
:
:
fmt
;
use
mime
:
:
{
self
Mime
}
;
#
[
derive
(
Clone
Debug
PartialEq
)
]
pub
struct
ContentType
(
Mime
)
;
impl
ContentType
{
#
[
inline
]
pub
fn
json
(
)
-
>
ContentType
{
ContentType
(
mime
:
:
APPLICATION_JSON
)
}
#
[
inline
]
pub
fn
text
(
)
-
>
ContentType
{
ContentType
(
mime
:
:
TEXT_PLAIN
)
}
#
[
inline
]
pub
fn
text_utf8
(
)
-
>
ContentType
{
ContentType
(
mime
:
:
TEXT_PLAIN_UTF_8
)
}
#
[
inline
]
pub
fn
html
(
)
-
>
ContentType
{
ContentType
(
mime
:
:
TEXT_HTML
)
}
#
[
inline
]
pub
fn
xml
(
)
-
>
ContentType
{
ContentType
(
mime
:
:
TEXT_XML
)
}
#
[
inline
]
pub
fn
form_url_encoded
(
)
-
>
ContentType
{
ContentType
(
mime
:
:
APPLICATION_WWW_FORM_URLENCODED
)
}
#
[
inline
]
pub
fn
jpeg
(
)
-
>
ContentType
{
ContentType
(
mime
:
:
IMAGE_JPEG
)
}
#
[
inline
]
pub
fn
png
(
)
-
>
ContentType
{
ContentType
(
mime
:
:
IMAGE_PNG
)
}
#
[
inline
]
pub
fn
octet_stream
(
)
-
>
ContentType
{
ContentType
(
mime
:
:
APPLICATION_OCTET_STREAM
)
}
}
impl
:
:
Header
for
ContentType
{
fn
name
(
)
-
>
&
'
static
:
:
HeaderName
{
&
:
:
http
:
:
header
:
:
CONTENT_TYPE
}
fn
decode
<
'
i
I
:
Iterator
<
Item
=
&
'
i
:
:
HeaderValue
>
>
(
values
:
&
mut
I
)
-
>
Result
<
Self
:
:
Error
>
{
values
.
next
(
)
.
and_then
(
|
v
|
v
.
to_str
(
)
.
ok
(
)
?
.
parse
(
)
.
ok
(
)
)
.
map
(
ContentType
)
.
ok_or_else
(
:
:
Error
:
:
invalid
)
}
fn
encode
<
E
:
Extend
<
:
:
HeaderValue
>
>
(
&
self
values
:
&
mut
E
)
{
let
value
=
self
.
0
.
as_ref
(
)
.
parse
(
)
.
expect
(
"
Mime
is
always
a
valid
HeaderValue
"
)
;
values
.
extend
(
:
:
std
:
:
iter
:
:
once
(
value
)
)
;
}
}
impl
From
<
mime
:
:
Mime
>
for
ContentType
{
fn
from
(
m
:
mime
:
:
Mime
)
-
>
ContentType
{
ContentType
(
m
)
}
}
impl
From
<
ContentType
>
for
mime
:
:
Mime
{
fn
from
(
ct
:
ContentType
)
-
>
mime
:
:
Mime
{
ct
.
0
}
}
impl
fmt
:
:
Display
for
ContentType
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
:
:
Display
:
:
fmt
(
&
self
.
0
f
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
ContentType
;
use
super
:
:
super
:
:
test_decode
;
#
[
test
]
fn
json
(
)
{
assert_eq
!
(
test_decode
:
:
<
ContentType
>
(
&
[
"
application
/
json
"
]
)
Some
(
ContentType
:
:
json
(
)
)
)
;
}
bench_header
!
(
bench_plain
ContentType
"
text
/
plain
"
)
;
bench_header
!
(
bench_json
ContentType
"
application
/
json
"
)
;
bench_header
!
(
bench_formdata
ContentType
"
multipart
/
form
-
data
;
boundary
=
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
abcd
"
)
;
}
