#
[
derive
(
Clone
Debug
)
]
pub
struct
ContentDisposition
(
:
:
HeaderValue
)
;
impl
ContentDisposition
{
pub
fn
inline
(
)
-
>
ContentDisposition
{
ContentDisposition
(
:
:
HeaderValue
:
:
from_static
(
"
inline
"
)
)
}
pub
fn
is_inline
(
&
self
)
-
>
bool
{
self
.
get_type
(
)
=
=
"
inline
"
}
pub
fn
is_attachment
(
&
self
)
-
>
bool
{
self
.
get_type
(
)
=
=
"
attachment
"
}
pub
fn
is_form_data
(
&
self
)
-
>
bool
{
self
.
get_type
(
)
=
=
"
form
-
data
"
}
fn
get_type
(
&
self
)
-
>
&
str
{
self
.
0
.
to_str
(
)
.
unwrap_or
(
"
"
)
.
split
(
'
;
'
)
.
next
(
)
.
expect
(
"
split
always
has
at
least
1
item
"
)
}
}
impl
:
:
Header
for
ContentDisposition
{
fn
name
(
)
-
>
&
'
static
:
:
HeaderName
{
&
:
:
http
:
:
header
:
:
CONTENT_DISPOSITION
}
fn
decode
<
'
i
I
:
Iterator
<
Item
=
&
'
i
:
:
HeaderValue
>
>
(
values
:
&
mut
I
)
-
>
Result
<
Self
:
:
Error
>
{
values
.
next
(
)
.
cloned
(
)
.
map
(
ContentDisposition
)
.
ok_or_else
(
:
:
Error
:
:
invalid
)
}
fn
encode
<
E
:
Extend
<
:
:
HeaderValue
>
>
(
&
self
values
:
&
mut
E
)
{
values
.
extend
(
:
:
std
:
:
iter
:
:
once
(
self
.
0
.
clone
(
)
)
)
;
}
}
