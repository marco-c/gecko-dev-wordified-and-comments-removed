use
std
:
:
fmt
;
use
std
:
:
str
:
:
FromStr
;
use
util
:
:
HeaderValueString
;
#
[
derive
(
Clone
Debug
PartialEq
Eq
PartialOrd
Ord
Hash
)
]
pub
struct
UserAgent
(
HeaderValueString
)
;
derive_header
!
{
UserAgent
(
_
)
name
:
USER_AGENT
}
impl
UserAgent
{
pub
fn
from_static
(
src
:
&
'
static
str
)
-
>
UserAgent
{
UserAgent
(
HeaderValueString
:
:
from_static
(
src
)
)
}
pub
fn
as_str
(
&
self
)
-
>
&
str
{
self
.
0
.
as_str
(
)
}
}
error_type
!
(
InvalidUserAgent
)
;
impl
FromStr
for
UserAgent
{
type
Err
=
InvalidUserAgent
;
fn
from_str
(
src
:
&
str
)
-
>
Result
<
Self
Self
:
:
Err
>
{
HeaderValueString
:
:
from_str
(
src
)
.
map
(
UserAgent
)
.
map_err
(
|
_
|
InvalidUserAgent
{
_inner
:
(
)
}
)
}
}
impl
fmt
:
:
Display
for
UserAgent
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
:
:
Display
:
:
fmt
(
&
self
.
0
f
)
}
}
