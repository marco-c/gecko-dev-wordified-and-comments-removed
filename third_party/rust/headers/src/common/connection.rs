use
std
:
:
iter
:
:
FromIterator
;
use
self
:
:
sealed
:
:
AsConnectionOption
;
use
util
:
:
FlatCsv
;
use
{
HeaderName
HeaderValue
}
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
Connection
(
FlatCsv
)
;
derive_header
!
{
Connection
(
_
)
name
:
CONNECTION
}
impl
Connection
{
#
[
inline
]
pub
fn
close
(
)
-
>
Connection
{
Connection
(
HeaderValue
:
:
from_static
(
"
close
"
)
.
into
(
)
)
}
#
[
inline
]
pub
fn
keep_alive
(
)
-
>
Connection
{
Connection
(
HeaderValue
:
:
from_static
(
"
keep
-
alive
"
)
.
into
(
)
)
}
#
[
inline
]
pub
fn
upgrade
(
)
-
>
Connection
{
Connection
(
HeaderValue
:
:
from_static
(
"
upgrade
"
)
.
into
(
)
)
}
pub
fn
contains
(
&
self
name
:
impl
AsConnectionOption
)
-
>
bool
{
let
s
=
name
.
as_connection_option
(
)
;
self
.
0
.
iter
(
)
.
find
(
|
&
opt
|
opt
.
eq_ignore_ascii_case
(
s
)
)
.
is_some
(
)
}
}
impl
FromIterator
<
HeaderName
>
for
Connection
{
fn
from_iter
<
I
>
(
iter
:
I
)
-
>
Self
where
I
:
IntoIterator
<
Item
=
HeaderName
>
{
let
flat
=
iter
.
into_iter
(
)
.
map
(
HeaderValue
:
:
from
)
.
collect
(
)
;
Connection
(
flat
)
}
}
mod
sealed
{
pub
trait
AsConnectionOption
:
Sealed
{
fn
as_connection_option
(
&
self
)
-
>
&
str
;
}
pub
trait
Sealed
{
}
impl
<
'
a
>
AsConnectionOption
for
&
'
a
str
{
fn
as_connection_option
(
&
self
)
-
>
&
str
{
*
self
}
}
impl
<
'
a
>
Sealed
for
&
'
a
str
{
}
impl
<
'
a
>
AsConnectionOption
for
&
'
a
:
:
HeaderName
{
fn
as_connection_option
(
&
self
)
-
>
&
str
{
self
.
as_ref
(
)
}
}
impl
<
'
a
>
Sealed
for
&
'
a
:
:
HeaderName
{
}
impl
AsConnectionOption
for
:
:
HeaderName
{
fn
as_connection_option
(
&
self
)
-
>
&
str
{
self
.
as_ref
(
)
}
}
impl
Sealed
for
:
:
HeaderName
{
}
}
