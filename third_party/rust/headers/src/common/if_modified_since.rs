use
std
:
:
time
:
:
SystemTime
;
use
util
:
:
HttpDate
;
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
PartialOrd
Ord
Hash
)
]
pub
struct
IfModifiedSince
(
HttpDate
)
;
derive_header
!
{
IfModifiedSince
(
_
)
name
:
IF_MODIFIED_SINCE
}
impl
IfModifiedSince
{
pub
fn
is_modified
(
&
self
last_modified
:
SystemTime
)
-
>
bool
{
self
.
0
<
last_modified
.
into
(
)
}
}
impl
From
<
SystemTime
>
for
IfModifiedSince
{
fn
from
(
time
:
SystemTime
)
-
>
IfModifiedSince
{
IfModifiedSince
(
time
.
into
(
)
)
}
}
impl
From
<
IfModifiedSince
>
for
SystemTime
{
fn
from
(
date
:
IfModifiedSince
)
-
>
SystemTime
{
date
.
0
.
into
(
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
std
:
:
time
:
:
Duration
;
#
[
test
]
fn
is_modified
(
)
{
let
newer
=
SystemTime
:
:
now
(
)
;
let
exact
=
newer
-
Duration
:
:
from_secs
(
2
)
;
let
older
=
newer
-
Duration
:
:
from_secs
(
4
)
;
let
if_mod
=
IfModifiedSince
:
:
from
(
exact
)
;
assert
!
(
if_mod
.
is_modified
(
newer
)
)
;
assert
!
(
!
if_mod
.
is_modified
(
exact
)
)
;
assert
!
(
!
if_mod
.
is_modified
(
older
)
)
;
}
}
