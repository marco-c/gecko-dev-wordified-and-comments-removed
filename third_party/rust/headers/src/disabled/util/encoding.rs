use
std
:
:
fmt
;
use
std
:
:
str
;
pub
use
self
:
:
Encoding
:
:
{
Chunked
Brotli
Gzip
Deflate
Compress
Identity
EncodingExt
Trailers
}
;
#
[
derive
(
Clone
PartialEq
Debug
)
]
pub
enum
Encoding
{
Chunked
Brotli
Gzip
Deflate
Compress
Identity
Trailers
EncodingExt
(
String
)
}
impl
fmt
:
:
Display
for
Encoding
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
match
*
self
{
Chunked
=
>
"
chunked
"
Brotli
=
>
"
br
"
Gzip
=
>
"
gzip
"
Deflate
=
>
"
deflate
"
Compress
=
>
"
compress
"
Identity
=
>
"
identity
"
Trailers
=
>
"
trailers
"
EncodingExt
(
ref
s
)
=
>
s
.
as_ref
(
)
}
)
}
}
impl
str
:
:
FromStr
for
Encoding
{
type
Err
=
:
:
Error
;
fn
from_str
(
s
:
&
str
)
-
>
:
:
Result
<
Encoding
>
{
match
s
{
"
chunked
"
=
>
Ok
(
Chunked
)
"
br
"
=
>
Ok
(
Brotli
)
"
deflate
"
=
>
Ok
(
Deflate
)
"
gzip
"
=
>
Ok
(
Gzip
)
"
compress
"
=
>
Ok
(
Compress
)
"
identity
"
=
>
Ok
(
Identity
)
"
trailers
"
=
>
Ok
(
Trailers
)
_
=
>
Ok
(
EncodingExt
(
s
.
to_owned
(
)
)
)
}
}
}
