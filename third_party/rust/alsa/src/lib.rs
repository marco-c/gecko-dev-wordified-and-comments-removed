#
!
[
allow
(
clippy
:
:
all
)
]
#
!
[
warn
(
clippy
:
:
correctness
clippy
:
:
suspicious
clippy
:
:
perf
)
]
extern
crate
alsa_sys
as
alsa
;
extern
crate
libc
;
#
[
macro_use
]
extern
crate
bitflags
;
#
[
macro_use
]
extern
crate
nix
as
nix_the_crate
;
macro_rules
!
alsa_enum
{
(
(
#
[
attr
:
meta
]
)
+
name
:
ident
static_name
:
ident
[
count
:
expr
]
(
a
:
ident
=
b
:
ident
)
*
)
=
>
{
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
PartialOrd
Ord
Hash
)
]
(
#
[
attr
]
)
*
pub
enum
name
{
(
a
=
alsa
:
:
b
as
isize
)
*
}
static
static_name
:
[
name
;
count
]
=
[
(
name
:
:
a
)
*
]
;
impl
name
{
/
/
/
Returns
a
slice
of
all
possible
values
;
useful
for
iteration
pub
fn
all
(
)
-
>
&
'
static
[
name
]
{
&
static_name
[
.
.
]
}
#
[
allow
(
dead_code
)
]
fn
from_c_int
(
c
:
:
:
libc
:
:
c_int
s
:
&
'
static
str
)
-
>
Result
<
name
>
{
Self
:
:
all
(
)
.
iter
(
)
.
find
(
|
&
&
x
|
c
=
=
x
as
:
:
libc
:
:
c_int
)
.
map
(
|
&
x
|
x
)
.
ok_or_else
(
|
|
Error
:
:
unsupported
(
s
)
)
}
}
}
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
PartialOrd
Ord
)
]
pub
enum
Direction
{
Playback
Capture
}
impl
Direction
{
#
[
inline
]
pub
fn
input
(
)
-
>
Direction
{
Direction
:
:
Capture
}
#
[
inline
]
pub
fn
output
(
)
-
>
Direction
{
Direction
:
:
Playback
}
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
PartialOrd
Ord
)
]
pub
enum
ValueOr
{
Less
=
-
1
Nearest
=
0
Greater
=
1
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
PartialOrd
Ord
)
]
pub
enum
Round
{
Floor
=
0
Ceil
=
1
}
mod
error
;
pub
use
crate
:
:
error
:
:
{
Error
Result
}
;
pub
mod
card
;
pub
use
crate
:
:
card
:
:
Card
as
Card
;
mod
ctl_int
;
pub
mod
ctl
{
pub
use
super
:
:
ctl_int
:
:
{
Ctl
CardInfo
ElemIface
ElemId
ElemType
ElemValue
ElemInfo
}
;
}
pub
use
crate
:
:
ctl
:
:
Ctl
as
Ctl
;
pub
mod
hctl
;
pub
use
crate
:
:
hctl
:
:
HCtl
as
HCtl
;
pub
mod
pcm
;
pub
use
crate
:
:
pcm
:
:
PCM
as
PCM
;
pub
mod
rawmidi
;
pub
use
crate
:
:
rawmidi
:
:
Rawmidi
as
Rawmidi
;
pub
mod
device_name
;
pub
mod
poll
;
pub
use
crate
:
:
poll
:
:
Descriptors
as
PollDescriptors
;
pub
mod
mixer
;
pub
use
crate
:
:
mixer
:
:
Mixer
as
Mixer
;
pub
mod
seq
;
pub
use
crate
:
:
seq
:
:
Seq
as
Seq
;
mod
io
;
pub
use
crate
:
:
io
:
:
Output
;
mod
chmap
;
pub
mod
direct
;
pub
mod
nix
{
pub
use
nix_the_crate
:
:
Error
;
pub
use
nix_the_crate
:
:
errno
;
}
