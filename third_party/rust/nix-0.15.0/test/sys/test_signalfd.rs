#
[
test
]
fn
test_signalfd
(
)
{
use
nix
:
:
sys
:
:
signalfd
:
:
SignalFd
;
use
nix
:
:
sys
:
:
signal
:
:
{
self
raise
Signal
SigSet
}
;
let
_m
=
:
:
SIGNAL_MTX
.
lock
(
)
.
expect
(
"
Mutex
got
poisoned
by
another
test
"
)
;
let
mut
mask
=
SigSet
:
:
empty
(
)
;
mask
.
add
(
signal
:
:
SIGUSR1
)
;
mask
.
thread_block
(
)
.
unwrap
(
)
;
let
mut
fd
=
SignalFd
:
:
new
(
&
mask
)
.
unwrap
(
)
;
raise
(
signal
:
:
SIGUSR1
)
.
expect
(
"
Error
:
raise
(
SIGUSR1
)
failed
"
)
;
let
res
=
fd
.
read_signal
(
)
.
unwrap
(
)
.
unwrap
(
)
;
let
signo
=
Signal
:
:
from_c_int
(
res
.
ssi_signo
as
i32
)
.
unwrap
(
)
;
assert_eq
!
(
signo
signal
:
:
SIGUSR1
)
;
}
