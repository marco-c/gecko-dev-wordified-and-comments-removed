mod
types
{
use
inherent
:
:
inherent
;
trait
Trait
{
fn
f
<
T
:
?
Sized
>
(
self
)
;
fn
g
(
&
self
)
{
}
}
pub
struct
Struct
;
#
[
inherent
(
pub
)
]
impl
Trait
for
Struct
{
fn
f
<
T
:
?
Sized
>
(
self
)
{
}
default
!
{
fn
g
(
&
self
)
;
}
}
}
#
[
test
]
fn
test
(
)
{
let
s
=
types
:
:
Struct
;
s
.
g
(
)
;
s
.
f
:
:
<
str
>
(
)
;
}
