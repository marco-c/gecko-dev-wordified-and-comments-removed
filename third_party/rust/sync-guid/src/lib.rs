#
!
[
allow
(
unknown_lints
)
]
#
!
[
warn
(
rust_2018_idioms
)
]
#
!
[
deny
(
unsafe_code
)
]
#
[
cfg
(
feature
=
"
serde_support
"
)
]
mod
serde_support
;
#
[
cfg
(
feature
=
"
rusqlite_support
"
)
]
mod
rusqlite_support
;
use
std
:
:
{
cmp
:
:
Ordering
fmt
hash
:
:
{
Hash
Hasher
}
ops
str
}
;
#
[
derive
(
Clone
)
]
pub
struct
Guid
(
Repr
)
;
#
[
derive
(
Clone
)
]
enum
Repr
{
Fast
(
FastGuid
)
Slow
(
String
)
}
#
[
derive
(
Clone
)
]
struct
FastGuid
{
len
:
u8
data
:
[
u8
;
MAX_FAST_GUID_LEN
]
}
const
MAX_FAST_GUID_LEN
:
usize
=
14
;
impl
FastGuid
{
#
[
inline
]
fn
from_slice
(
bytes
:
&
[
u8
]
)
-
>
Self
{
debug_assert
!
(
can_use_fast
(
bytes
)
"
Bug
:
Caller
failed
to
check
can_use_fast
:
{
:
?
}
"
bytes
)
;
let
mut
data
=
[
0u8
;
MAX_FAST_GUID_LEN
]
;
data
[
0
.
.
bytes
.
len
(
)
]
.
copy_from_slice
(
bytes
)
;
FastGuid
{
len
:
bytes
.
len
(
)
as
u8
data
}
}
#
[
inline
]
fn
as_str
(
&
self
)
-
>
&
str
{
str
:
:
from_utf8
(
self
.
bytes
(
)
)
.
expect
(
"
Invalid
fast
guid
bytes
!
"
)
}
#
[
inline
]
fn
len
(
&
self
)
-
>
usize
{
self
.
len
as
usize
}
#
[
inline
]
fn
bytes
(
&
self
)
-
>
&
[
u8
]
{
&
self
.
data
[
0
.
.
self
.
len
(
)
]
}
}
#
[
inline
]
fn
can_use_fast
<
T
:
?
Sized
+
AsRef
<
[
u8
]
>
>
(
bytes
:
&
T
)
-
>
bool
{
let
bytes
=
bytes
.
as_ref
(
)
;
debug_assert
!
(
str
:
:
from_utf8
(
bytes
)
.
is_ok
(
)
)
;
bytes
.
len
(
)
<
=
MAX_FAST_GUID_LEN
}
impl
Guid
{
#
[
inline
]
pub
fn
new
(
s
:
&
str
)
-
>
Self
{
Guid
:
:
from_slice
(
s
.
as_ref
(
)
)
}
#
[
inline
]
pub
const
fn
empty
(
)
-
>
Self
{
Guid
(
Repr
:
:
Fast
(
FastGuid
{
len
:
0
data
:
[
0u8
;
MAX_FAST_GUID_LEN
]
}
)
)
}
#
[
cfg
(
feature
=
"
random
"
)
]
pub
fn
random
(
)
-
>
Self
{
let
bytes
:
[
u8
;
9
]
=
rand
:
:
random
(
)
;
let
mut
output
=
[
0u8
;
MAX_FAST_GUID_LEN
]
;
let
bytes_written
=
base64
:
:
encode_config_slice
(
bytes
base64
:
:
URL_SAFE_NO_PAD
&
mut
output
[
.
.
12
]
)
;
debug_assert
!
(
bytes_written
=
=
12
)
;
Guid
(
Repr
:
:
Fast
(
FastGuid
{
len
:
12
data
:
output
}
)
)
}
#
[
inline
]
pub
fn
from_string
(
s
:
String
)
-
>
Self
{
Guid
:
:
from_vec
(
s
.
into_bytes
(
)
)
}
#
[
inline
]
pub
fn
from_slice
(
b
:
&
[
u8
]
)
-
>
Self
{
if
can_use_fast
(
b
)
{
Guid
(
Repr
:
:
Fast
(
FastGuid
:
:
from_slice
(
b
)
)
)
}
else
{
Guid
:
:
new_slow
(
b
.
into
(
)
)
}
}
#
[
inline
]
pub
fn
from_vec
(
v
:
Vec
<
u8
>
)
-
>
Self
{
if
can_use_fast
(
&
v
)
{
Guid
(
Repr
:
:
Fast
(
FastGuid
:
:
from_slice
(
&
v
)
)
)
}
else
{
Guid
:
:
new_slow
(
v
)
}
}
#
[
inline
]
pub
fn
as_bytes
(
&
self
)
-
>
&
[
u8
]
{
match
&
self
.
0
{
Repr
:
:
Fast
(
rep
)
=
>
rep
.
bytes
(
)
Repr
:
:
Slow
(
rep
)
=
>
rep
.
as_ref
(
)
}
}
#
[
inline
]
pub
fn
as_str
(
&
self
)
-
>
&
str
{
match
&
self
.
0
{
Repr
:
:
Fast
(
rep
)
=
>
rep
.
as_str
(
)
Repr
:
:
Slow
(
rep
)
=
>
rep
.
as_ref
(
)
}
}
#
[
inline
]
pub
fn
into_string
(
self
)
-
>
String
{
match
self
.
0
{
Repr
:
:
Fast
(
rep
)
=
>
rep
.
as_str
(
)
.
into
(
)
Repr
:
:
Slow
(
rep
)
=
>
rep
}
}
pub
fn
is_valid_for_sync_server
(
&
self
)
-
>
bool
{
!
self
.
is_empty
(
)
&
&
self
.
len
(
)
<
=
64
&
&
self
.
bytes
(
)
.
all
(
|
b
|
(
b
'
'
.
.
=
b
'
~
'
)
.
contains
(
&
b
)
&
&
b
!
=
b
'
'
)
}
pub
fn
is_valid_for_places
(
&
self
)
-
>
bool
{
self
.
len
(
)
=
=
12
&
&
self
.
bytes
(
)
.
all
(
Guid
:
:
is_valid_places_byte
)
}
#
[
inline
]
pub
fn
is_valid_places_byte
(
b
:
u8
)
-
>
bool
{
BASE64URL_BYTES
[
b
as
usize
]
=
=
1
}
#
[
cold
]
fn
new_slow
(
v
:
Vec
<
u8
>
)
-
>
Self
{
assert
!
(
!
can_use_fast
(
&
v
)
"
Could
use
fast
for
guid
(
len
=
{
}
)
"
v
.
len
(
)
)
;
Guid
(
Repr
:
:
Slow
(
String
:
:
from_utf8
(
v
)
.
expect
(
"
Invalid
slow
guid
bytes
!
"
)
)
)
}
}
const
BASE64URL_BYTES
:
[
u8
;
256
]
=
[
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
0
1
1
1
1
1
1
1
1
1
1
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
0
0
0
0
1
0
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
]
;
impl
Ord
for
Guid
{
fn
cmp
(
&
self
other
:
&
Self
)
-
>
Ordering
{
self
.
as_bytes
(
)
.
cmp
(
other
.
as_bytes
(
)
)
}
}
impl
PartialOrd
for
Guid
{
fn
partial_cmp
(
&
self
other
:
&
Self
)
-
>
Option
<
Ordering
>
{
Some
(
self
.
cmp
(
other
)
)
}
}
impl
PartialEq
for
Guid
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
self
.
as_bytes
(
)
=
=
other
.
as_bytes
(
)
}
}
impl
Eq
for
Guid
{
}
impl
Hash
for
Guid
{
fn
hash
<
H
:
Hasher
>
(
&
self
state
:
&
mut
H
)
{
self
.
as_bytes
(
)
.
hash
(
state
)
;
}
}
impl
<
'
a
>
From
<
&
'
a
str
>
for
Guid
{
#
[
inline
]
fn
from
(
s
:
&
'
a
str
)
-
>
Guid
{
Guid
:
:
from_slice
(
s
.
as_ref
(
)
)
}
}
impl
<
'
a
>
From
<
&
'
a
&
str
>
for
Guid
{
#
[
inline
]
fn
from
(
s
:
&
'
a
&
str
)
-
>
Guid
{
Guid
:
:
from_slice
(
s
.
as_ref
(
)
)
}
}
impl
<
'
a
>
From
<
&
'
a
[
u8
]
>
for
Guid
{
#
[
inline
]
fn
from
(
s
:
&
'
a
[
u8
]
)
-
>
Guid
{
Guid
:
:
from_slice
(
s
)
}
}
impl
From
<
String
>
for
Guid
{
#
[
inline
]
fn
from
(
s
:
String
)
-
>
Guid
{
Guid
:
:
from_string
(
s
)
}
}
impl
From
<
Vec
<
u8
>
>
for
Guid
{
#
[
inline
]
fn
from
(
v
:
Vec
<
u8
>
)
-
>
Guid
{
Guid
:
:
from_vec
(
v
)
}
}
impl
From
<
Guid
>
for
String
{
#
[
inline
]
fn
from
(
guid
:
Guid
)
-
>
String
{
guid
.
into_string
(
)
}
}
impl
From
<
Guid
>
for
Vec
<
u8
>
{
#
[
inline
]
fn
from
(
guid
:
Guid
)
-
>
Vec
<
u8
>
{
guid
.
into_string
(
)
.
into_bytes
(
)
}
}
impl
AsRef
<
str
>
for
Guid
{
#
[
inline
]
fn
as_ref
(
&
self
)
-
>
&
str
{
self
.
as_str
(
)
}
}
impl
AsRef
<
[
u8
]
>
for
Guid
{
#
[
inline
]
fn
as_ref
(
&
self
)
-
>
&
[
u8
]
{
self
.
as_bytes
(
)
}
}
impl
ops
:
:
Deref
for
Guid
{
type
Target
=
str
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
str
{
self
.
as_str
(
)
}
}
impl
fmt
:
:
Debug
for
Guid
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
Guid
(
{
:
?
}
)
"
self
.
as_str
(
)
)
}
}
impl
fmt
:
:
Display
for
Guid
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
:
:
Display
:
:
fmt
(
self
.
as_str
(
)
f
)
}
}
impl
std
:
:
default
:
:
Default
for
Guid
{
#
[
inline
]
fn
default
(
)
-
>
Self
{
Guid
:
:
empty
(
)
}
}
macro_rules
!
impl_guid_eq
{
(
(
other
:
ty
)
+
)
=
>
{
(
#
[
allow
(
clippy
:
:
extra_unused_lifetimes
)
]
impl
<
'
a
>
PartialEq
<
other
>
for
Guid
{
#
[
inline
]
fn
eq
(
&
self
other
:
&
other
)
-
>
bool
{
PartialEq
:
:
eq
(
AsRef
:
:
<
[
u8
]
>
:
:
as_ref
(
self
)
AsRef
:
:
<
[
u8
]
>
:
:
as_ref
(
other
)
)
}
}
#
[
allow
(
clippy
:
:
extra_unused_lifetimes
)
]
impl
<
'
a
>
PartialEq
<
Guid
>
for
other
{
#
[
inline
]
fn
eq
(
&
self
other
:
&
Guid
)
-
>
bool
{
PartialEq
:
:
eq
(
AsRef
:
:
<
[
u8
]
>
:
:
as_ref
(
self
)
AsRef
:
:
<
[
u8
]
>
:
:
as_ref
(
other
)
)
}
}
)
+
}
}
impl_guid_eq
!
[
str
&
'
a
str
String
[
u8
]
&
'
a
[
u8
]
Vec
<
u8
>
]
;
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
#
[
test
]
fn
test_base64url_bytes
(
)
{
let
mut
expect
=
[
0u8
;
256
]
;
for
b
in
b
'
0
'
.
.
=
b
'
9
'
{
expect
[
b
as
usize
]
=
1
;
}
for
b
in
b
'
a
'
.
.
=
b
'
z
'
{
expect
[
b
as
usize
]
=
1
;
}
for
b
in
b
'
A
'
.
.
=
b
'
Z
'
{
expect
[
b
as
usize
]
=
1
;
}
expect
[
b
'
_
'
as
usize
]
=
1
;
expect
[
b
'
-
'
as
usize
]
=
1
;
assert_eq
!
(
&
BASE64URL_BYTES
[
.
.
]
&
expect
[
.
.
]
)
;
}
#
[
test
]
fn
test_valid_for_places
(
)
{
assert
!
(
Guid
:
:
from
(
"
aaaabbbbcccc
"
)
.
is_valid_for_places
(
)
)
;
assert
!
(
Guid
:
:
from_slice
(
b
"
09_az
-
AZ_09
-
"
)
.
is_valid_for_places
(
)
)
;
assert
!
(
!
Guid
:
:
from
(
"
aaaabbbbccccd
"
)
.
is_valid_for_places
(
)
)
;
assert
!
(
!
Guid
:
:
from
(
"
aaaabbbbccc
"
)
.
is_valid_for_places
(
)
)
;
assert
!
(
!
Guid
:
:
from
(
"
aaaabbbbccc
=
"
)
.
is_valid_for_places
(
)
)
;
assert
!
(
!
Guid
:
:
empty
(
)
.
is_valid_for_places
(
)
)
;
}
#
[
test
]
fn
test_valid_for_sync_server
(
)
{
assert
!
(
!
Guid
:
:
empty
(
)
.
is_valid_for_sync_server
(
)
)
;
}
#
[
allow
(
clippy
:
:
cmp_owned
)
]
#
[
test
]
fn
test_comparison
(
)
{
assert_eq
!
(
Guid
:
:
from
(
"
abcdabcdabcd
"
)
"
abcdabcdabcd
"
)
;
assert_ne
!
(
Guid
:
:
from
(
"
abcdabcdabcd
"
.
to_string
(
)
)
"
ABCDabcdabcd
"
)
;
assert_eq
!
(
Guid
:
:
from
(
"
abcdabcdabcd
"
)
&
b
"
abcdabcdabcd
"
[
.
.
]
)
;
assert_ne
!
(
Guid
:
:
from
(
&
b
"
abcdabcdabcd
"
[
.
.
]
)
&
b
"
ABCDabcdabcd
"
[
.
.
]
)
;
assert_eq
!
(
Guid
:
:
from
(
b
"
abcdabcdabcd
"
[
.
.
]
.
to_owned
(
)
)
"
abcdabcdabcd
"
.
to_string
(
)
)
;
assert_ne
!
(
Guid
:
:
from
(
"
abcdabcdabcd
"
)
"
ABCDabcdabcd
"
.
to_string
(
)
)
;
assert_eq
!
(
Guid
:
:
from
(
"
abcdabcdabcd1234
"
)
Vec
:
:
from
(
b
"
abcdabcdabcd1234
"
.
as_ref
(
)
)
)
;
assert_ne
!
(
Guid
:
:
from
(
"
abcdabcdabcd4321
"
)
Vec
:
:
from
(
b
"
ABCDabcdabcd4321
"
.
as_ref
(
)
)
)
;
assert
!
(
Guid
:
:
from
(
"
zzz
"
)
>
Guid
:
:
from
(
"
aaaaaa
"
)
)
;
assert
!
(
Guid
:
:
from
(
"
ThisIsASolowGuid
"
)
<
Guid
:
:
from
(
"
zzz
"
)
)
;
assert
!
(
Guid
:
:
from
(
"
ThisIsASolowGuid
"
)
>
Guid
:
:
from
(
"
AnotherSlowGuid
"
)
)
;
}
#
[
cfg
(
feature
=
"
random
"
)
]
#
[
test
]
fn
test_random
(
)
{
use
std
:
:
collections
:
:
HashSet
;
let
mut
seen
:
HashSet
<
String
>
=
HashSet
:
:
new
(
)
;
for
_
in
0
.
.
1000
{
let
g
=
Guid
:
:
random
(
)
;
assert_eq
!
(
g
.
len
(
)
12
)
;
assert
!
(
g
.
is_valid_for_places
(
)
)
;
let
decoded
=
base64
:
:
decode_config
(
&
g
base64
:
:
URL_SAFE_NO_PAD
)
.
unwrap
(
)
;
assert_eq
!
(
decoded
.
len
(
)
9
)
;
let
no_collision
=
seen
.
insert
(
g
.
clone
(
)
.
into_string
(
)
)
;
assert
!
(
no_collision
"
{
}
"
g
)
;
}
}
}
