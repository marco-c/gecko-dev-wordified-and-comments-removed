use
std
:
:
any
:
:
Any
;
use
std
:
:
panic
:
:
{
self
AssertUnwindSafe
}
;
use
std
:
:
io
:
:
stderr
;
use
std
:
:
io
:
:
prelude
:
:
*
;
use
std
:
:
thread
;
pub
fn
halt_unwinding
<
F
R
>
(
func
:
F
)
-
>
thread
:
:
Result
<
R
>
where
F
:
FnOnce
(
)
-
>
R
{
panic
:
:
catch_unwind
(
AssertUnwindSafe
(
func
)
)
}
pub
fn
resume_unwinding
(
payload
:
Box
<
Any
+
Send
>
)
-
>
!
{
panic
:
:
resume_unwind
(
payload
)
}
pub
struct
AbortIfPanic
;
fn
aborting
(
)
{
let
_
=
writeln
!
(
&
mut
stderr
(
)
"
Rayon
:
detected
unexpected
panic
;
aborting
"
)
;
}
impl
Drop
for
AbortIfPanic
{
#
[
cfg
(
all
(
target_arch
=
"
wasm32
"
not
(
target_os
=
"
emscripten
"
)
)
)
]
fn
drop
(
&
mut
self
)
{
aborting
(
)
;
:
:
std
:
:
process
:
:
abort
(
)
;
}
#
[
cfg
(
not
(
all
(
target_arch
=
"
wasm32
"
not
(
target_os
=
"
emscripten
"
)
)
)
)
]
fn
drop
(
&
mut
self
)
{
aborting
(
)
;
unsafe
{
:
:
libc
:
:
abort
(
)
;
}
}
}
