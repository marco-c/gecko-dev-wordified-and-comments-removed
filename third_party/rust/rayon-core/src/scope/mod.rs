use
crate
:
:
job
:
:
{
HeapJob
JobFifo
}
;
use
crate
:
:
latch
:
:
{
CountLatch
CountLockLatch
Latch
}
;
use
crate
:
:
registry
:
:
{
global_registry
in_worker
Registry
WorkerThread
}
;
use
crate
:
:
unwind
;
use
std
:
:
any
:
:
Any
;
use
std
:
:
fmt
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicPtr
Ordering
}
;
use
std
:
:
sync
:
:
Arc
;
#
[
cfg
(
test
)
]
mod
test
;
pub
struct
Scope
<
'
scope
>
{
base
:
ScopeBase
<
'
scope
>
}
pub
struct
ScopeFifo
<
'
scope
>
{
base
:
ScopeBase
<
'
scope
>
fifos
:
Vec
<
JobFifo
>
}
enum
ScopeLatch
{
Stealing
{
latch
:
CountLatch
registry
:
Arc
<
Registry
>
worker_index
:
usize
}
Blocking
{
latch
:
CountLockLatch
}
}
struct
ScopeBase
<
'
scope
>
{
registry
:
Arc
<
Registry
>
panic
:
AtomicPtr
<
Box
<
dyn
Any
+
Send
+
'
static
>
>
job_completed_latch
:
ScopeLatch
marker
:
PhantomData
<
Box
<
dyn
FnOnce
(
&
Scope
<
'
scope
>
)
+
Send
+
Sync
+
'
scope
>
>
}
pub
fn
scope
<
'
scope
OP
R
>
(
op
:
OP
)
-
>
R
where
OP
:
FnOnce
(
&
Scope
<
'
scope
>
)
-
>
R
+
Send
R
:
Send
{
in_worker
(
|
owner_thread
_
|
{
let
scope
=
Scope
:
:
<
'
scope
>
:
:
new
(
Some
(
owner_thread
)
None
)
;
scope
.
base
.
complete
(
Some
(
owner_thread
)
|
|
op
(
&
scope
)
)
}
)
}
pub
fn
scope_fifo
<
'
scope
OP
R
>
(
op
:
OP
)
-
>
R
where
OP
:
FnOnce
(
&
ScopeFifo
<
'
scope
>
)
-
>
R
+
Send
R
:
Send
{
in_worker
(
|
owner_thread
_
|
{
let
scope
=
ScopeFifo
:
:
<
'
scope
>
:
:
new
(
Some
(
owner_thread
)
None
)
;
scope
.
base
.
complete
(
Some
(
owner_thread
)
|
|
op
(
&
scope
)
)
}
)
}
pub
fn
in_place_scope
<
'
scope
OP
R
>
(
op
:
OP
)
-
>
R
where
OP
:
FnOnce
(
&
Scope
<
'
scope
>
)
-
>
R
{
do_in_place_scope
(
None
op
)
}
pub
(
crate
)
fn
do_in_place_scope
<
'
scope
OP
R
>
(
registry
:
Option
<
&
Arc
<
Registry
>
>
op
:
OP
)
-
>
R
where
OP
:
FnOnce
(
&
Scope
<
'
scope
>
)
-
>
R
{
let
thread
=
unsafe
{
WorkerThread
:
:
current
(
)
.
as_ref
(
)
}
;
let
scope
=
Scope
:
:
<
'
scope
>
:
:
new
(
thread
registry
)
;
scope
.
base
.
complete
(
thread
|
|
op
(
&
scope
)
)
}
pub
fn
in_place_scope_fifo
<
'
scope
OP
R
>
(
op
:
OP
)
-
>
R
where
OP
:
FnOnce
(
&
ScopeFifo
<
'
scope
>
)
-
>
R
{
do_in_place_scope_fifo
(
None
op
)
}
pub
(
crate
)
fn
do_in_place_scope_fifo
<
'
scope
OP
R
>
(
registry
:
Option
<
&
Arc
<
Registry
>
>
op
:
OP
)
-
>
R
where
OP
:
FnOnce
(
&
ScopeFifo
<
'
scope
>
)
-
>
R
{
let
thread
=
unsafe
{
WorkerThread
:
:
current
(
)
.
as_ref
(
)
}
;
let
scope
=
ScopeFifo
:
:
<
'
scope
>
:
:
new
(
thread
registry
)
;
scope
.
base
.
complete
(
thread
|
|
op
(
&
scope
)
)
}
impl
<
'
scope
>
Scope
<
'
scope
>
{
fn
new
(
owner
:
Option
<
&
WorkerThread
>
registry
:
Option
<
&
Arc
<
Registry
>
>
)
-
>
Self
{
let
base
=
ScopeBase
:
:
new
(
owner
registry
)
;
Scope
{
base
}
}
pub
fn
spawn
<
BODY
>
(
&
self
body
:
BODY
)
where
BODY
:
FnOnce
(
&
Scope
<
'
scope
>
)
+
Send
+
'
scope
{
self
.
base
.
increment
(
)
;
unsafe
{
let
job_ref
=
Box
:
:
new
(
HeapJob
:
:
new
(
move
|
|
{
self
.
base
.
execute_job
(
move
|
|
body
(
self
)
)
}
)
)
.
as_job_ref
(
)
;
self
.
base
.
registry
.
inject_or_push
(
job_ref
)
;
}
}
}
impl
<
'
scope
>
ScopeFifo
<
'
scope
>
{
fn
new
(
owner
:
Option
<
&
WorkerThread
>
registry
:
Option
<
&
Arc
<
Registry
>
>
)
-
>
Self
{
let
base
=
ScopeBase
:
:
new
(
owner
registry
)
;
let
num_threads
=
base
.
registry
.
num_threads
(
)
;
let
fifos
=
(
0
.
.
num_threads
)
.
map
(
|
_
|
JobFifo
:
:
new
(
)
)
.
collect
(
)
;
ScopeFifo
{
base
fifos
}
}
pub
fn
spawn_fifo
<
BODY
>
(
&
self
body
:
BODY
)
where
BODY
:
FnOnce
(
&
ScopeFifo
<
'
scope
>
)
+
Send
+
'
scope
{
self
.
base
.
increment
(
)
;
unsafe
{
let
job_ref
=
Box
:
:
new
(
HeapJob
:
:
new
(
move
|
|
{
self
.
base
.
execute_job
(
move
|
|
body
(
self
)
)
}
)
)
.
as_job_ref
(
)
;
match
self
.
base
.
registry
.
current_thread
(
)
{
Some
(
worker
)
=
>
{
let
fifo
=
&
self
.
fifos
[
worker
.
index
(
)
]
;
worker
.
push
(
fifo
.
push
(
job_ref
)
)
;
}
None
=
>
self
.
base
.
registry
.
inject
(
&
[
job_ref
]
)
}
}
}
}
impl
<
'
scope
>
ScopeBase
<
'
scope
>
{
fn
new
(
owner
:
Option
<
&
WorkerThread
>
registry
:
Option
<
&
Arc
<
Registry
>
>
)
-
>
Self
{
let
registry
=
registry
.
unwrap_or_else
(
|
|
match
owner
{
Some
(
owner
)
=
>
owner
.
registry
(
)
None
=
>
global_registry
(
)
}
)
;
ScopeBase
{
registry
:
Arc
:
:
clone
(
registry
)
panic
:
AtomicPtr
:
:
new
(
ptr
:
:
null_mut
(
)
)
job_completed_latch
:
ScopeLatch
:
:
new
(
owner
)
marker
:
PhantomData
}
}
fn
increment
(
&
self
)
{
self
.
job_completed_latch
.
increment
(
)
;
}
fn
complete
<
FUNC
R
>
(
&
self
owner
:
Option
<
&
WorkerThread
>
func
:
FUNC
)
-
>
R
where
FUNC
:
FnOnce
(
)
-
>
R
{
let
result
=
self
.
execute_job_closure
(
func
)
;
self
.
job_completed_latch
.
wait
(
owner
)
;
self
.
maybe_propagate_panic
(
)
;
result
.
unwrap
(
)
}
fn
execute_job
<
FUNC
>
(
&
self
func
:
FUNC
)
where
FUNC
:
FnOnce
(
)
{
let
_
:
Option
<
(
)
>
=
self
.
execute_job_closure
(
func
)
;
}
fn
execute_job_closure
<
FUNC
R
>
(
&
self
func
:
FUNC
)
-
>
Option
<
R
>
where
FUNC
:
FnOnce
(
)
-
>
R
{
match
unwind
:
:
halt_unwinding
(
func
)
{
Ok
(
r
)
=
>
{
self
.
job_completed_latch
.
set
(
)
;
Some
(
r
)
}
Err
(
err
)
=
>
{
self
.
job_panicked
(
err
)
;
self
.
job_completed_latch
.
set
(
)
;
None
}
}
}
fn
job_panicked
(
&
self
err
:
Box
<
dyn
Any
+
Send
+
'
static
>
)
{
let
nil
=
ptr
:
:
null_mut
(
)
;
let
mut
err
=
Box
:
:
new
(
err
)
;
if
self
.
panic
.
compare_exchange
(
nil
&
mut
*
err
Ordering
:
:
Release
Ordering
:
:
Relaxed
)
.
is_ok
(
)
{
mem
:
:
forget
(
err
)
;
}
}
fn
maybe_propagate_panic
(
&
self
)
{
let
panic
=
self
.
panic
.
swap
(
ptr
:
:
null_mut
(
)
Ordering
:
:
Relaxed
)
;
if
!
panic
.
is_null
(
)
{
let
value
=
unsafe
{
Box
:
:
from_raw
(
panic
)
}
;
unwind
:
:
resume_unwinding
(
*
value
)
;
}
}
}
impl
ScopeLatch
{
fn
new
(
owner
:
Option
<
&
WorkerThread
>
)
-
>
Self
{
match
owner
{
Some
(
owner
)
=
>
ScopeLatch
:
:
Stealing
{
latch
:
CountLatch
:
:
new
(
)
registry
:
Arc
:
:
clone
(
owner
.
registry
(
)
)
worker_index
:
owner
.
index
(
)
}
None
=
>
ScopeLatch
:
:
Blocking
{
latch
:
CountLockLatch
:
:
new
(
)
}
}
}
fn
increment
(
&
self
)
{
match
self
{
ScopeLatch
:
:
Stealing
{
latch
.
.
}
=
>
latch
.
increment
(
)
ScopeLatch
:
:
Blocking
{
latch
}
=
>
latch
.
increment
(
)
}
}
fn
set
(
&
self
)
{
match
self
{
ScopeLatch
:
:
Stealing
{
latch
registry
worker_index
}
=
>
latch
.
set_and_tickle_one
(
registry
*
worker_index
)
ScopeLatch
:
:
Blocking
{
latch
}
=
>
latch
.
set
(
)
}
}
fn
wait
(
&
self
owner
:
Option
<
&
WorkerThread
>
)
{
match
self
{
ScopeLatch
:
:
Stealing
{
latch
registry
worker_index
}
=
>
unsafe
{
let
owner
=
owner
.
expect
(
"
owner
thread
"
)
;
debug_assert_eq
!
(
registry
.
id
(
)
owner
.
registry
(
)
.
id
(
)
)
;
debug_assert_eq
!
(
*
worker_index
owner
.
index
(
)
)
;
owner
.
wait_until
(
latch
)
;
}
ScopeLatch
:
:
Blocking
{
latch
}
=
>
latch
.
wait
(
)
}
}
}
impl
<
'
scope
>
fmt
:
:
Debug
for
Scope
<
'
scope
>
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
.
debug_struct
(
"
Scope
"
)
.
field
(
"
pool_id
"
&
self
.
base
.
registry
.
id
(
)
)
.
field
(
"
panic
"
&
self
.
base
.
panic
)
.
field
(
"
job_completed_latch
"
&
self
.
base
.
job_completed_latch
)
.
finish
(
)
}
}
impl
<
'
scope
>
fmt
:
:
Debug
for
ScopeFifo
<
'
scope
>
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
.
debug_struct
(
"
ScopeFifo
"
)
.
field
(
"
num_fifos
"
&
self
.
fifos
.
len
(
)
)
.
field
(
"
pool_id
"
&
self
.
base
.
registry
.
id
(
)
)
.
field
(
"
panic
"
&
self
.
base
.
panic
)
.
field
(
"
job_completed_latch
"
&
self
.
base
.
job_completed_latch
)
.
finish
(
)
}
}
impl
fmt
:
:
Debug
for
ScopeLatch
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
self
{
ScopeLatch
:
:
Stealing
{
latch
.
.
}
=
>
fmt
.
debug_tuple
(
"
ScopeLatch
:
:
Stealing
"
)
.
field
(
latch
)
.
finish
(
)
ScopeLatch
:
:
Blocking
{
latch
}
=
>
fmt
.
debug_tuple
(
"
ScopeLatch
:
:
Blocking
"
)
.
field
(
latch
)
.
finish
(
)
}
}
}
