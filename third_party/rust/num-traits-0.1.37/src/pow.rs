use
std
:
:
ops
:
:
Mul
;
use
{
One
CheckedMul
}
;
#
[
inline
]
pub
fn
pow
<
T
:
Clone
+
One
+
Mul
<
T
Output
=
T
>
>
(
mut
base
:
T
mut
exp
:
usize
)
-
>
T
{
if
exp
=
=
0
{
return
T
:
:
one
(
)
}
while
exp
&
1
=
=
0
{
base
=
base
.
clone
(
)
*
base
;
exp
>
>
=
1
;
}
if
exp
=
=
1
{
return
base
}
let
mut
acc
=
base
.
clone
(
)
;
while
exp
>
1
{
exp
>
>
=
1
;
base
=
base
.
clone
(
)
*
base
;
if
exp
&
1
=
=
1
{
acc
=
acc
*
base
.
clone
(
)
;
}
}
acc
}
#
[
inline
]
pub
fn
checked_pow
<
T
:
Clone
+
One
+
CheckedMul
>
(
mut
base
:
T
mut
exp
:
usize
)
-
>
Option
<
T
>
{
if
exp
=
=
0
{
return
Some
(
T
:
:
one
(
)
)
}
macro_rules
!
optry
{
(
expr
:
expr
)
=
>
{
if
let
Some
(
val
)
=
expr
{
val
}
else
{
return
None
}
}
}
while
exp
&
1
=
=
0
{
base
=
optry
!
(
base
.
checked_mul
(
&
base
)
)
;
exp
>
>
=
1
;
}
if
exp
=
=
1
{
return
Some
(
base
)
}
let
mut
acc
=
base
.
clone
(
)
;
while
exp
>
1
{
exp
>
>
=
1
;
base
=
optry
!
(
base
.
checked_mul
(
&
base
)
)
;
if
exp
&
1
=
=
1
{
acc
=
optry
!
(
acc
.
checked_mul
(
&
base
)
)
;
}
}
Some
(
acc
)
}
