use
crate
:
:
helpers
:
:
{
i64_to_i32
I32CastError
}
;
use
crate
:
:
rata_die
:
:
RataDie
;
const
JULIAN_EPOCH
:
RataDie
=
RataDie
:
:
new
(
-
1
)
;
#
[
inline
(
always
)
]
pub
const
fn
is_leap_year
(
year
:
i32
)
-
>
bool
{
year
%
4
=
=
0
}
pub
const
fn
fixed_from_julian
(
year
:
i32
month
:
u8
day
:
u8
)
-
>
RataDie
{
let
mut
fixed
=
JULIAN_EPOCH
.
to_i64_date
(
)
-
1
+
365
*
(
year
as
i64
-
1
)
+
(
year
as
i64
-
1
)
.
div_euclid
(
4
)
;
debug_assert
!
(
month
>
0
&
&
month
<
13
"
Month
should
be
in
range
1
.
.
=
12
.
"
)
;
fixed
+
=
match
month
{
1
=
>
0
2
=
>
31
3
=
>
59
4
=
>
90
5
=
>
120
6
=
>
151
7
=
>
181
8
=
>
212
9
=
>
243
10
=
>
273
11
=
>
304
12
=
>
334
_
=
>
-
1
}
;
if
month
>
2
&
&
is_leap_year
(
year
)
{
fixed
+
=
1
;
}
RataDie
:
:
new
(
fixed
+
(
day
as
i64
)
)
}
pub
fn
julian_from_fixed
(
date
:
RataDie
)
-
>
Result
<
(
i32
u8
u8
)
I32CastError
>
{
let
approx
=
(
4
*
date
.
to_i64_date
(
)
+
1464
)
.
div_euclid
(
1461
)
;
let
year
=
i64_to_i32
(
approx
)
?
;
let
prior_days
=
date
-
fixed_from_julian
(
year
1
1
)
-
if
is_leap_year
(
year
)
&
&
date
>
fixed_from_julian
(
year
2
28
)
{
1
}
else
{
0
}
;
let
adjusted_year
=
if
prior_days
>
=
365
{
year
.
saturating_add
(
1
)
}
else
{
year
}
;
let
adjusted_prior_days
=
prior_days
.
rem_euclid
(
365
)
;
debug_assert
!
(
(
0
.
.
365
)
.
contains
(
&
adjusted_prior_days
)
)
;
let
month
=
if
adjusted_prior_days
<
31
{
1
}
else
if
adjusted_prior_days
<
59
{
2
}
else
if
adjusted_prior_days
<
90
{
3
}
else
if
adjusted_prior_days
<
120
{
4
}
else
if
adjusted_prior_days
<
151
{
5
}
else
if
adjusted_prior_days
<
181
{
6
}
else
if
adjusted_prior_days
<
212
{
7
}
else
if
adjusted_prior_days
<
243
{
8
}
else
if
adjusted_prior_days
<
273
{
9
}
else
if
adjusted_prior_days
<
304
{
10
}
else
if
adjusted_prior_days
<
334
{
11
}
else
{
12
}
;
let
day
=
(
date
-
fixed_from_julian
(
adjusted_year
month
1
)
+
1
)
as
u8
;
debug_assert
!
(
day
<
=
31
"
Day
assertion
failed
;
date
:
{
date
:
?
}
adjusted_year
:
{
adjusted_year
}
prior_days
:
{
prior_days
}
month
:
{
month
}
day
:
{
day
}
"
)
;
Ok
(
(
adjusted_year
month
day
)
)
}
pub
const
fn
fixed_from_julian_book_version
(
book_year
:
i32
month
:
u8
day
:
u8
)
-
>
RataDie
{
debug_assert
!
(
book_year
!
=
0
)
;
fixed_from_julian
(
if
book_year
<
0
{
book_year
+
1
}
else
{
book_year
}
month
day
)
}
