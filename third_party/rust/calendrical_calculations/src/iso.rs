use
crate
:
:
helpers
:
:
{
i64_to_i32
I32CastError
}
;
use
crate
:
:
rata_die
:
:
RataDie
;
const
EPOCH
:
RataDie
=
RataDie
:
:
new
(
1
)
;
pub
fn
is_leap_year
(
year
:
i32
)
-
>
bool
{
year
%
4
=
=
0
&
&
(
year
%
400
=
=
0
|
|
year
%
100
!
=
0
)
}
pub
fn
fixed_from_iso
(
year
:
i32
month
:
u8
day
:
u8
)
-
>
RataDie
{
let
prev_year
=
(
year
as
i64
)
-
1
;
let
mut
fixed
:
i64
=
(
EPOCH
.
to_i64_date
(
)
-
1
)
+
365
*
prev_year
;
let
offset
=
prev_year
.
div_euclid
(
4
)
-
prev_year
.
div_euclid
(
100
)
+
prev_year
.
div_euclid
(
400
)
;
fixed
+
=
offset
;
fixed
+
=
(
367
*
(
month
as
i64
)
-
362
)
.
div_euclid
(
12
)
;
fixed
+
=
if
month
<
=
2
{
0
}
else
if
is_leap_year
(
year
)
{
-
1
}
else
{
-
2
}
;
fixed
+
=
day
as
i64
;
RataDie
:
:
new
(
fixed
)
}
pub
(
crate
)
fn
iso_year_from_fixed
(
date
:
RataDie
)
-
>
i64
{
let
date
=
date
-
EPOCH
;
let
(
n_400
date
)
=
(
date
.
div_euclid
(
146097
)
date
.
rem_euclid
(
146097
)
)
;
let
(
n_100
date
)
=
(
date
.
div_euclid
(
36524
)
date
.
rem_euclid
(
36524
)
)
;
let
(
n_4
date
)
=
(
date
.
div_euclid
(
1461
)
date
.
rem_euclid
(
1461
)
)
;
let
n_1
=
date
.
div_euclid
(
365
)
;
let
year
=
400
*
n_400
+
100
*
n_100
+
4
*
n_4
+
n_1
;
if
n_100
=
=
4
|
|
n_1
=
=
4
{
year
}
else
{
year
+
1
}
}
fn
iso_new_year
(
year
:
i32
)
-
>
RataDie
{
fixed_from_iso
(
year
1
1
)
}
pub
fn
iso_from_fixed
(
date
:
RataDie
)
-
>
Result
<
(
i32
u8
u8
)
I32CastError
>
{
let
year
=
iso_year_from_fixed
(
date
)
;
let
year
=
i64_to_i32
(
year
)
?
;
let
prior_days
=
date
-
iso_new_year
(
year
)
;
let
correction
=
if
date
<
fixed_from_iso
(
year
3
1
)
{
0
}
else
if
is_leap_year
(
year
)
{
1
}
else
{
2
}
;
let
month
=
(
12
*
(
prior_days
+
correction
)
+
373
)
.
div_euclid
(
367
)
as
u8
;
let
day
=
(
date
-
fixed_from_iso
(
year
month
1
)
+
1
)
as
u8
;
Ok
(
(
year
month
day
)
)
}
