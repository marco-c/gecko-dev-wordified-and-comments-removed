use
super
:
:
{
fabsf
scalbnf
sqrtf
}
;
const
BP
:
[
f32
;
2
]
=
[
1
.
0
1
.
5
]
;
const
DP_H
:
[
f32
;
2
]
=
[
0
.
0
5
.
84960938e
-
01
]
;
const
DP_L
:
[
f32
;
2
]
=
[
0
.
0
1
.
56322085e
-
06
]
;
const
TWO24
:
f32
=
16777216
.
0
;
const
HUGE
:
f32
=
1
.
0e30
;
const
TINY
:
f32
=
1
.
0e
-
30
;
const
L1
:
f32
=
6
.
0000002384e
-
01
;
const
L2
:
f32
=
4
.
2857143283e
-
01
;
const
L3
:
f32
=
3
.
3333334327e
-
01
;
const
L4
:
f32
=
2
.
7272811532e
-
01
;
const
L5
:
f32
=
2
.
3066075146e
-
01
;
const
L6
:
f32
=
2
.
0697501302e
-
01
;
const
P1
:
f32
=
1
.
6666667163e
-
01
;
const
P2
:
f32
=
-
2
.
7777778450e
-
03
;
const
P3
:
f32
=
6
.
6137559770e
-
05
;
const
P4
:
f32
=
-
1
.
6533901999e
-
06
;
const
P5
:
f32
=
4
.
1381369442e
-
08
;
const
LG2
:
f32
=
6
.
9314718246e
-
01
;
const
LG2_H
:
f32
=
6
.
93145752e
-
01
;
const
LG2_L
:
f32
=
1
.
42860654e
-
06
;
const
OVT
:
f32
=
4
.
2995665694e
-
08
;
const
CP
:
f32
=
9
.
6179670095e
-
01
;
const
CP_H
:
f32
=
9
.
6191406250e
-
01
;
const
CP_L
:
f32
=
-
1
.
1736857402e
-
04
;
const
IVLN2
:
f32
=
1
.
4426950216e
+
00
;
const
IVLN2_H
:
f32
=
1
.
4426879883e
+
00
;
const
IVLN2_L
:
f32
=
7
.
0526075433e
-
06
;
#
[
cfg_attr
(
all
(
test
assert_no_panic
)
no_panic
:
:
no_panic
)
]
pub
fn
powf
(
x
:
f32
y
:
f32
)
-
>
f32
{
let
mut
z
:
f32
;
let
mut
ax
:
f32
;
let
z_h
:
f32
;
let
z_l
:
f32
;
let
mut
p_h
:
f32
;
let
mut
p_l
:
f32
;
let
y1
:
f32
;
let
mut
t1
:
f32
;
let
t2
:
f32
;
let
mut
r
:
f32
;
let
s
:
f32
;
let
mut
sn
:
f32
;
let
mut
t
:
f32
;
let
mut
u
:
f32
;
let
mut
v
:
f32
;
let
mut
w
:
f32
;
let
i
:
i32
;
let
mut
j
:
i32
;
let
mut
k
:
i32
;
let
mut
yisint
:
i32
;
let
mut
n
:
i32
;
let
hx
:
i32
;
let
hy
:
i32
;
let
mut
ix
:
i32
;
let
iy
:
i32
;
let
mut
is
:
i32
;
hx
=
x
.
to_bits
(
)
as
i32
;
hy
=
y
.
to_bits
(
)
as
i32
;
ix
=
hx
&
0x7fffffff
;
iy
=
hy
&
0x7fffffff
;
if
iy
=
=
0
{
return
1
.
0
;
}
if
hx
=
=
0x3f800000
{
return
1
.
0
;
}
if
ix
>
0x7f800000
|
|
iy
>
0x7f800000
{
return
x
+
y
;
}
yisint
=
0
;
if
hx
<
0
{
if
iy
>
=
0x4b800000
{
yisint
=
2
;
}
else
if
iy
>
=
0x3f800000
{
k
=
(
iy
>
>
23
)
-
0x7f
;
j
=
iy
>
>
(
23
-
k
)
;
if
(
j
<
<
(
23
-
k
)
)
=
=
iy
{
yisint
=
2
-
(
j
&
1
)
;
}
}
}
if
iy
=
=
0x7f800000
{
if
ix
=
=
0x3f800000
{
return
1
.
0
;
}
else
if
ix
>
0x3f800000
{
return
if
hy
>
=
0
{
y
}
else
{
0
.
0
}
;
}
else
{
return
if
hy
>
=
0
{
0
.
0
}
else
{
-
y
}
;
}
}
if
iy
=
=
0x3f800000
{
return
if
hy
>
=
0
{
x
}
else
{
1
.
0
/
x
}
;
}
if
hy
=
=
0x40000000
{
return
x
*
x
;
}
if
hy
=
=
0x3f000000
&
&
hx
>
=
0
{
return
sqrtf
(
x
)
;
}
ax
=
fabsf
(
x
)
;
if
ix
=
=
0x7f800000
|
|
ix
=
=
0
|
|
ix
=
=
0x3f800000
{
z
=
ax
;
if
hy
<
0
{
z
=
1
.
0
/
z
;
}
if
hx
<
0
{
if
(
(
ix
-
0x3f800000
)
|
yisint
)
=
=
0
{
z
=
(
z
-
z
)
/
(
z
-
z
)
;
}
else
if
yisint
=
=
1
{
z
=
-
z
;
}
}
return
z
;
}
sn
=
1
.
0
;
if
hx
<
0
{
if
yisint
=
=
0
{
return
(
x
-
x
)
/
(
x
-
x
)
;
}
if
yisint
=
=
1
{
sn
=
-
1
.
0
;
}
}
if
iy
>
0x4d000000
{
if
ix
<
0x3f7ffff8
{
return
if
hy
<
0
{
sn
*
HUGE
*
HUGE
}
else
{
sn
*
TINY
*
TINY
}
;
}
if
ix
>
0x3f800007
{
return
if
hy
>
0
{
sn
*
HUGE
*
HUGE
}
else
{
sn
*
TINY
*
TINY
}
;
}
t
=
ax
-
1
.
;
w
=
(
t
*
t
)
*
(
0
.
5
-
t
*
(
0
.
333333333333
-
t
*
0
.
25
)
)
;
u
=
IVLN2_H
*
t
;
v
=
t
*
IVLN2_L
-
w
*
IVLN2
;
t1
=
u
+
v
;
is
=
t1
.
to_bits
(
)
as
i32
;
t1
=
f32
:
:
from_bits
(
is
as
u32
&
0xfffff000
)
;
t2
=
v
-
(
t1
-
u
)
;
}
else
{
let
mut
s2
:
f32
;
let
mut
s_h
:
f32
;
let
s_l
:
f32
;
let
mut
t_h
:
f32
;
let
mut
t_l
:
f32
;
n
=
0
;
if
ix
<
0x00800000
{
ax
*
=
TWO24
;
n
-
=
24
;
ix
=
ax
.
to_bits
(
)
as
i32
;
}
n
+
=
(
(
ix
)
>
>
23
)
-
0x7f
;
j
=
ix
&
0x007fffff
;
ix
=
j
|
0x3f800000
;
if
j
<
=
0x1cc471
{
k
=
0
;
}
else
if
j
<
0x5db3d7
{
k
=
1
;
}
else
{
k
=
0
;
n
+
=
1
;
ix
-
=
0x00800000
;
}
ax
=
f32
:
:
from_bits
(
ix
as
u32
)
;
u
=
ax
-
i
!
(
BP
k
as
usize
)
;
v
=
1
.
0
/
(
ax
+
i
!
(
BP
k
as
usize
)
)
;
s
=
u
*
v
;
s_h
=
s
;
is
=
s_h
.
to_bits
(
)
as
i32
;
s_h
=
f32
:
:
from_bits
(
is
as
u32
&
0xfffff000
)
;
is
=
(
(
(
ix
as
u32
>
>
1
)
&
0xfffff000
)
|
0x20000000
)
as
i32
;
t_h
=
f32
:
:
from_bits
(
is
as
u32
+
0x00400000
+
(
(
k
as
u32
)
<
<
21
)
)
;
t_l
=
ax
-
(
t_h
-
i
!
(
BP
k
as
usize
)
)
;
s_l
=
v
*
(
(
u
-
s_h
*
t_h
)
-
s_h
*
t_l
)
;
s2
=
s
*
s
;
r
=
s2
*
s2
*
(
L1
+
s2
*
(
L2
+
s2
*
(
L3
+
s2
*
(
L4
+
s2
*
(
L5
+
s2
*
L6
)
)
)
)
)
;
r
+
=
s_l
*
(
s_h
+
s
)
;
s2
=
s_h
*
s_h
;
t_h
=
3
.
0
+
s2
+
r
;
is
=
t_h
.
to_bits
(
)
as
i32
;
t_h
=
f32
:
:
from_bits
(
is
as
u32
&
0xfffff000
)
;
t_l
=
r
-
(
(
t_h
-
3
.
0
)
-
s2
)
;
u
=
s_h
*
t_h
;
v
=
s_l
*
t_h
+
t_l
*
s
;
p_h
=
u
+
v
;
is
=
p_h
.
to_bits
(
)
as
i32
;
p_h
=
f32
:
:
from_bits
(
is
as
u32
&
0xfffff000
)
;
p_l
=
v
-
(
p_h
-
u
)
;
z_h
=
CP_H
*
p_h
;
z_l
=
CP_L
*
p_h
+
p_l
*
CP
+
i
!
(
DP_L
k
as
usize
)
;
t
=
n
as
f32
;
t1
=
(
(
z_h
+
z_l
)
+
i
!
(
DP_H
k
as
usize
)
)
+
t
;
is
=
t1
.
to_bits
(
)
as
i32
;
t1
=
f32
:
:
from_bits
(
is
as
u32
&
0xfffff000
)
;
t2
=
z_l
-
(
(
(
t1
-
t
)
-
i
!
(
DP_H
k
as
usize
)
)
-
z_h
)
;
}
;
is
=
y
.
to_bits
(
)
as
i32
;
y1
=
f32
:
:
from_bits
(
is
as
u32
&
0xfffff000
)
;
p_l
=
(
y
-
y1
)
*
t1
+
y
*
t2
;
p_h
=
y1
*
t1
;
z
=
p_l
+
p_h
;
j
=
z
.
to_bits
(
)
as
i32
;
if
j
>
0x43000000
{
return
sn
*
HUGE
*
HUGE
;
}
else
if
j
=
=
0x43000000
{
if
p_l
+
OVT
>
z
-
p_h
{
return
sn
*
HUGE
*
HUGE
;
}
}
else
if
(
j
&
0x7fffffff
)
>
0x43160000
{
return
sn
*
TINY
*
TINY
;
}
else
if
j
as
u32
=
=
0xc3160000
&
&
p_l
<
=
z
-
p_h
{
return
sn
*
TINY
*
TINY
;
}
i
=
j
&
0x7fffffff
;
k
=
(
i
>
>
23
)
-
0x7f
;
n
=
0
;
if
i
>
0x3f000000
{
n
=
j
+
(
0x00800000
>
>
(
k
+
1
)
)
;
k
=
(
(
n
&
0x7fffffff
)
>
>
23
)
-
0x7f
;
t
=
f32
:
:
from_bits
(
n
as
u32
&
!
(
0x007fffff
>
>
k
)
)
;
n
=
(
(
n
&
0x007fffff
)
|
0x00800000
)
>
>
(
23
-
k
)
;
if
j
<
0
{
n
=
-
n
;
}
p_h
-
=
t
;
}
t
=
p_l
+
p_h
;
is
=
t
.
to_bits
(
)
as
i32
;
t
=
f32
:
:
from_bits
(
is
as
u32
&
0xffff8000
)
;
u
=
t
*
LG2_H
;
v
=
(
p_l
-
(
t
-
p_h
)
)
*
LG2
+
t
*
LG2_L
;
z
=
u
+
v
;
w
=
v
-
(
z
-
u
)
;
t
=
z
*
z
;
t1
=
z
-
t
*
(
P1
+
t
*
(
P2
+
t
*
(
P3
+
t
*
(
P4
+
t
*
P5
)
)
)
)
;
r
=
(
z
*
t1
)
/
(
t1
-
2
.
0
)
-
(
w
+
z
*
w
)
;
z
=
1
.
0
-
(
r
-
z
)
;
j
=
z
.
to_bits
(
)
as
i32
;
j
+
=
n
<
<
23
;
if
(
j
>
>
23
)
<
=
0
{
z
=
scalbnf
(
z
n
)
;
}
else
{
z
=
f32
:
:
from_bits
(
j
as
u32
)
;
}
sn
*
z
}
