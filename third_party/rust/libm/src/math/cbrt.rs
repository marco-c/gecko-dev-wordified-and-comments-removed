use
core
:
:
f64
;
const
B1
:
u32
=
715094163
;
const
B2
:
u32
=
696219795
;
const
P0
:
f64
=
1
.
87595182427177009643
;
const
P1
:
f64
=
-
1
.
88497979543377169875
;
const
P2
:
f64
=
1
.
621429720105354466140
;
const
P3
:
f64
=
-
0
.
758397934778766047437
;
const
P4
:
f64
=
0
.
145996192886612446982
;
#
[
cfg_attr
(
all
(
test
assert_no_panic
)
no_panic
:
:
no_panic
)
]
pub
fn
cbrt
(
x
:
f64
)
-
>
f64
{
let
x1p54
=
f64
:
:
from_bits
(
0x4350000000000000
)
;
let
mut
ui
:
u64
=
x
.
to_bits
(
)
;
let
mut
r
:
f64
;
let
s
:
f64
;
let
mut
t
:
f64
;
let
w
:
f64
;
let
mut
hx
:
u32
=
(
ui
>
>
32
)
as
u32
&
0x7fffffff
;
if
hx
>
=
0x7ff00000
{
return
x
+
x
;
}
if
hx
<
0x00100000
{
ui
=
(
x
*
x1p54
)
.
to_bits
(
)
;
hx
=
(
ui
>
>
32
)
as
u32
&
0x7fffffff
;
if
hx
=
=
0
{
return
x
;
}
hx
=
hx
/
3
+
B2
;
}
else
{
hx
=
hx
/
3
+
B1
;
}
ui
&
=
1
<
<
63
;
ui
|
=
(
hx
as
u64
)
<
<
32
;
t
=
f64
:
:
from_bits
(
ui
)
;
r
=
(
t
*
t
)
*
(
t
/
x
)
;
t
=
t
*
(
(
P0
+
r
*
(
P1
+
r
*
P2
)
)
+
(
(
r
*
r
)
*
r
)
*
(
P3
+
r
*
P4
)
)
;
ui
=
t
.
to_bits
(
)
;
ui
=
(
ui
+
0x80000000
)
&
0xffffffffc0000000
;
t
=
f64
:
:
from_bits
(
ui
)
;
s
=
t
*
t
;
r
=
x
/
s
;
w
=
t
+
t
;
r
=
(
r
-
t
)
/
(
w
+
r
)
;
t
=
t
+
t
*
r
;
t
}
