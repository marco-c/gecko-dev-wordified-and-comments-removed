use
super
:
:
{
cos
fabs
get_high_word
get_low_word
log
sin
sqrt
}
;
const
INVSQRTPI
:
f64
=
5
.
64189583547756279280e
-
01
;
const
TPI
:
f64
=
6
.
36619772367581382433e
-
01
;
fn
common
(
ix
:
u32
x
:
f64
y1
:
bool
sign
:
bool
)
-
>
f64
{
let
z
:
f64
;
let
mut
s
:
f64
;
let
c
:
f64
;
let
mut
ss
:
f64
;
let
mut
cc
:
f64
;
s
=
sin
(
x
)
;
if
y1
{
s
=
-
s
;
}
c
=
cos
(
x
)
;
cc
=
s
-
c
;
if
ix
<
0x7fe00000
{
ss
=
-
s
-
c
;
z
=
cos
(
2
.
0
*
x
)
;
if
s
*
c
>
0
.
0
{
cc
=
z
/
ss
;
}
else
{
ss
=
z
/
cc
;
}
if
ix
<
0x48000000
{
if
y1
{
ss
=
-
ss
;
}
cc
=
pone
(
x
)
*
cc
-
qone
(
x
)
*
ss
;
}
}
if
sign
{
cc
=
-
cc
;
}
return
INVSQRTPI
*
cc
/
sqrt
(
x
)
;
}
const
R00
:
f64
=
-
6
.
25000000000000000000e
-
02
;
const
R01
:
f64
=
1
.
40705666955189706048e
-
03
;
const
R02
:
f64
=
-
1
.
59955631084035597520e
-
05
;
const
R03
:
f64
=
4
.
96727999609584448412e
-
08
;
const
S01
:
f64
=
1
.
91537599538363460805e
-
02
;
const
S02
:
f64
=
1
.
85946785588630915560e
-
04
;
const
S03
:
f64
=
1
.
17718464042623683263e
-
06
;
const
S04
:
f64
=
5
.
04636257076217042715e
-
09
;
const
S05
:
f64
=
1
.
23542274426137913908e
-
11
;
pub
fn
j1
(
x
:
f64
)
-
>
f64
{
let
mut
z
:
f64
;
let
r
:
f64
;
let
s
:
f64
;
let
mut
ix
:
u32
;
let
sign
:
bool
;
ix
=
get_high_word
(
x
)
;
sign
=
(
ix
>
>
31
)
!
=
0
;
ix
&
=
0x7fffffff
;
if
ix
>
=
0x7ff00000
{
return
1
.
0
/
(
x
*
x
)
;
}
if
ix
>
=
0x40000000
{
return
common
(
ix
fabs
(
x
)
false
sign
)
;
}
if
ix
>
=
0x38000000
{
z
=
x
*
x
;
r
=
z
*
(
R00
+
z
*
(
R01
+
z
*
(
R02
+
z
*
R03
)
)
)
;
s
=
1
.
0
+
z
*
(
S01
+
z
*
(
S02
+
z
*
(
S03
+
z
*
(
S04
+
z
*
S05
)
)
)
)
;
z
=
r
/
s
;
}
else
{
z
=
x
;
}
return
(
0
.
5
+
z
)
*
x
;
}
const
U0
:
[
f64
;
5
]
=
[
-
1
.
96057090646238940668e
-
01
5
.
04438716639811282616e
-
02
-
1
.
91256895875763547298e
-
03
2
.
35252600561610495928e
-
05
-
9
.
19099158039878874504e
-
08
]
;
const
V0
:
[
f64
;
5
]
=
[
1
.
99167318236649903973e
-
02
2
.
02552581025135171496e
-
04
1
.
35608801097516229404e
-
06
6
.
22741452364621501295e
-
09
1
.
66559246207992079114e
-
11
]
;
pub
fn
y1
(
x
:
f64
)
-
>
f64
{
let
z
:
f64
;
let
u
:
f64
;
let
v
:
f64
;
let
ix
:
u32
;
let
lx
:
u32
;
ix
=
get_high_word
(
x
)
;
lx
=
get_low_word
(
x
)
;
if
(
ix
<
<
1
|
lx
)
=
=
0
{
return
-
1
.
0
/
0
.
0
;
}
if
(
ix
>
>
31
)
!
=
0
{
return
0
.
0
/
0
.
0
;
}
if
ix
>
=
0x7ff00000
{
return
1
.
0
/
x
;
}
if
ix
>
=
0x40000000
{
return
common
(
ix
x
true
false
)
;
}
if
ix
<
0x3c900000
{
return
-
TPI
/
x
;
}
z
=
x
*
x
;
u
=
U0
[
0
]
+
z
*
(
U0
[
1
]
+
z
*
(
U0
[
2
]
+
z
*
(
U0
[
3
]
+
z
*
U0
[
4
]
)
)
)
;
v
=
1
.
0
+
z
*
(
V0
[
0
]
+
z
*
(
V0
[
1
]
+
z
*
(
V0
[
2
]
+
z
*
(
V0
[
3
]
+
z
*
V0
[
4
]
)
)
)
)
;
return
x
*
(
u
/
v
)
+
TPI
*
(
j1
(
x
)
*
log
(
x
)
-
1
.
0
/
x
)
;
}
const
PR8
:
[
f64
;
6
]
=
[
0
.
00000000000000000000e
+
00
1
.
17187499999988647970e
-
01
1
.
32394806593073575129e
+
01
4
.
12051854307378562225e
+
02
3
.
87474538913960532227e
+
03
7
.
91447954031891731574e
+
03
]
;
const
PS8
:
[
f64
;
5
]
=
[
1
.
14207370375678408436e
+
02
3
.
65093083420853463394e
+
03
3
.
69562060269033463555e
+
04
9
.
76027935934950801311e
+
04
3
.
08042720627888811578e
+
04
]
;
const
PR5
:
[
f64
;
6
]
=
[
1
.
31990519556243522749e
-
11
1
.
17187493190614097638e
-
01
6
.
80275127868432871736e
+
00
1
.
08308182990189109773e
+
02
5
.
17636139533199752805e
+
02
5
.
28715201363337541807e
+
02
]
;
const
PS5
:
[
f64
;
5
]
=
[
5
.
92805987221131331921e
+
01
9
.
91401418733614377743e
+
02
5
.
35326695291487976647e
+
03
7
.
84469031749551231769e
+
03
1
.
50404688810361062679e
+
03
]
;
const
PR3
:
[
f64
;
6
]
=
[
3
.
02503916137373618024e
-
09
1
.
17186865567253592491e
-
01
3
.
93297750033315640650e
+
00
3
.
51194035591636932736e
+
01
9
.
10550110750781271918e
+
01
4
.
85590685197364919645e
+
01
]
;
const
PS3
:
[
f64
;
5
]
=
[
3
.
47913095001251519989e
+
01
3
.
36762458747825746741e
+
02
1
.
04687139975775130551e
+
03
8
.
90811346398256432622e
+
02
1
.
03787932439639277504e
+
02
]
;
const
PR2
:
[
f64
;
6
]
=
[
1
.
07710830106873743082e
-
07
1
.
17176219462683348094e
-
01
2
.
36851496667608785174e
+
00
1
.
22426109148261232917e
+
01
1
.
76939711271687727390e
+
01
5
.
07352312588818499250e
+
00
]
;
const
PS2
:
[
f64
;
5
]
=
[
2
.
14364859363821409488e
+
01
1
.
25290227168402751090e
+
02
2
.
32276469057162813669e
+
02
1
.
17679373287147100768e
+
02
8
.
36463893371618283368e
+
00
]
;
fn
pone
(
x
:
f64
)
-
>
f64
{
let
p
:
&
[
f64
;
6
]
;
let
q
:
&
[
f64
;
5
]
;
let
z
:
f64
;
let
r
:
f64
;
let
s
:
f64
;
let
mut
ix
:
u32
;
ix
=
get_high_word
(
x
)
;
ix
&
=
0x7fffffff
;
if
ix
>
=
0x40200000
{
p
=
&
PR8
;
q
=
&
PS8
;
}
else
if
ix
>
=
0x40122E8B
{
p
=
&
PR5
;
q
=
&
PS5
;
}
else
if
ix
>
=
0x4006DB6D
{
p
=
&
PR3
;
q
=
&
PS3
;
}
else
{
p
=
&
PR2
;
q
=
&
PS2
;
}
z
=
1
.
0
/
(
x
*
x
)
;
r
=
p
[
0
]
+
z
*
(
p
[
1
]
+
z
*
(
p
[
2
]
+
z
*
(
p
[
3
]
+
z
*
(
p
[
4
]
+
z
*
p
[
5
]
)
)
)
)
;
s
=
1
.
0
+
z
*
(
q
[
0
]
+
z
*
(
q
[
1
]
+
z
*
(
q
[
2
]
+
z
*
(
q
[
3
]
+
z
*
q
[
4
]
)
)
)
)
;
return
1
.
0
+
r
/
s
;
}
const
QR8
:
[
f64
;
6
]
=
[
0
.
00000000000000000000e
+
00
-
1
.
02539062499992714161e
-
01
-
1
.
62717534544589987888e
+
01
-
7
.
59601722513950107896e
+
02
-
1
.
18498066702429587167e
+
04
-
4
.
84385124285750353010e
+
04
]
;
const
QS8
:
[
f64
;
6
]
=
[
1
.
61395369700722909556e
+
02
7
.
82538599923348465381e
+
03
1
.
33875336287249578163e
+
05
7
.
19657723683240939863e
+
05
6
.
66601232617776375264e
+
05
-
2
.
94490264303834643215e
+
05
]
;
const
QR5
:
[
f64
;
6
]
=
[
-
2
.
08979931141764104297e
-
11
-
1
.
02539050241375426231e
-
01
-
8
.
05644828123936029840e
+
00
-
1
.
83669607474888380239e
+
02
-
1
.
37319376065508163265e
+
03
-
2
.
61244440453215656817e
+
03
]
;
const
QS5
:
[
f64
;
6
]
=
[
8
.
12765501384335777857e
+
01
1
.
99179873460485964642e
+
03
1
.
74684851924908907677e
+
04
4
.
98514270910352279316e
+
04
2
.
79480751638918118260e
+
04
-
4
.
71918354795128470869e
+
03
]
;
const
QR3
:
[
f64
;
6
]
=
[
-
5
.
07831226461766561369e
-
09
-
1
.
02537829820837089745e
-
01
-
4
.
61011581139473403113e
+
00
-
5
.
78472216562783643212e
+
01
-
2
.
28244540737631695038e
+
02
-
2
.
19210128478909325622e
+
02
]
;
const
QS3
:
[
f64
;
6
]
=
[
4
.
76651550323729509273e
+
01
6
.
73865112676699709482e
+
02
3
.
38015286679526343505e
+
03
5
.
54772909720722782367e
+
03
1
.
90311919338810798763e
+
03
-
1
.
35201191444307340817e
+
02
]
;
const
QR2
:
[
f64
;
6
]
=
[
-
1
.
78381727510958865572e
-
07
-
1
.
02517042607985553460e
-
01
-
2
.
75220568278187460720e
+
00
-
1
.
96636162643703720221e
+
01
-
4
.
23253133372830490089e
+
01
-
2
.
13719211703704061733e
+
01
]
;
const
QS2
:
[
f64
;
6
]
=
[
2
.
95333629060523854548e
+
01
2
.
52981549982190529136e
+
02
7
.
57502834868645436472e
+
02
7
.
39393205320467245656e
+
02
1
.
55949003336666123687e
+
02
-
4
.
95949898822628210127e
+
00
]
;
fn
qone
(
x
:
f64
)
-
>
f64
{
let
p
:
&
[
f64
;
6
]
;
let
q
:
&
[
f64
;
6
]
;
let
s
:
f64
;
let
r
:
f64
;
let
z
:
f64
;
let
mut
ix
:
u32
;
ix
=
get_high_word
(
x
)
;
ix
&
=
0x7fffffff
;
if
ix
>
=
0x40200000
{
p
=
&
QR8
;
q
=
&
QS8
;
}
else
if
ix
>
=
0x40122E8B
{
p
=
&
QR5
;
q
=
&
QS5
;
}
else
if
ix
>
=
0x4006DB6D
{
p
=
&
QR3
;
q
=
&
QS3
;
}
else
{
p
=
&
QR2
;
q
=
&
QS2
;
}
z
=
1
.
0
/
(
x
*
x
)
;
r
=
p
[
0
]
+
z
*
(
p
[
1
]
+
z
*
(
p
[
2
]
+
z
*
(
p
[
3
]
+
z
*
(
p
[
4
]
+
z
*
p
[
5
]
)
)
)
)
;
s
=
1
.
0
+
z
*
(
q
[
0
]
+
z
*
(
q
[
1
]
+
z
*
(
q
[
2
]
+
z
*
(
q
[
3
]
+
z
*
(
q
[
4
]
+
z
*
q
[
5
]
)
)
)
)
)
;
return
(
0
.
375
+
r
/
s
)
/
x
;
}
