use
super
:
:
{
k_cosf
k_sinf
rem_pio2f
}
;
use
core
:
:
f64
:
:
consts
:
:
FRAC_PI_2
;
const
C1_PIO2
:
f64
=
1
.
*
FRAC_PI_2
;
const
C2_PIO2
:
f64
=
2
.
*
FRAC_PI_2
;
const
C3_PIO2
:
f64
=
3
.
*
FRAC_PI_2
;
const
C4_PIO2
:
f64
=
4
.
*
FRAC_PI_2
;
#
[
cfg_attr
(
all
(
test
assert_no_panic
)
no_panic
:
:
no_panic
)
]
pub
fn
cosf
(
x
:
f32
)
-
>
f32
{
let
x64
=
x
as
f64
;
let
x1p120
=
f32
:
:
from_bits
(
0x7b800000
)
;
let
mut
ix
=
x
.
to_bits
(
)
;
let
sign
=
(
ix
>
>
31
)
!
=
0
;
ix
&
=
0x7fffffff
;
if
ix
<
=
0x3f490fda
{
if
ix
<
0x39800000
{
force_eval
!
(
x
+
x1p120
)
;
return
1
.
;
}
return
k_cosf
(
x64
)
;
}
if
ix
<
=
0x407b53d1
{
if
ix
>
0x4016cbe3
{
return
-
k_cosf
(
if
sign
{
x64
+
C2_PIO2
}
else
{
x64
-
C2_PIO2
}
)
;
}
else
if
sign
{
return
k_sinf
(
x64
+
C1_PIO2
)
;
}
else
{
return
k_sinf
(
C1_PIO2
-
x64
)
;
}
}
if
ix
<
=
0x40e231d5
{
if
ix
>
0x40afeddf
{
return
k_cosf
(
if
sign
{
x64
+
C4_PIO2
}
else
{
x64
-
C4_PIO2
}
)
;
}
else
if
sign
{
return
k_sinf
(
-
x64
-
C3_PIO2
)
;
}
else
{
return
k_sinf
(
x64
-
C3_PIO2
)
;
}
}
if
ix
>
=
0x7f800000
{
return
x
-
x
;
}
let
(
n
y
)
=
rem_pio2f
(
x
)
;
match
n
&
3
{
0
=
>
k_cosf
(
y
)
1
=
>
k_sinf
(
-
y
)
2
=
>
-
k_cosf
(
y
)
_
=
>
k_sinf
(
y
)
}
}
