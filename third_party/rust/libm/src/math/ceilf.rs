use
core
:
:
f32
;
#
[
cfg_attr
(
all
(
test
assert_no_panic
)
no_panic
:
:
no_panic
)
]
pub
fn
ceilf
(
x
:
f32
)
-
>
f32
{
llvm_intrinsically_optimized
!
{
#
[
cfg
(
target_arch
=
"
wasm32
"
)
]
{
return
unsafe
{
:
:
core
:
:
intrinsics
:
:
ceilf32
(
x
)
}
}
}
let
mut
ui
=
x
.
to_bits
(
)
;
let
e
=
(
(
(
ui
>
>
23
)
&
0xff
)
.
wrapping_sub
(
0x7f
)
)
as
i32
;
if
e
>
=
23
{
return
x
;
}
if
e
>
=
0
{
let
m
=
0x007fffff
>
>
e
;
if
(
ui
&
m
)
=
=
0
{
return
x
;
}
force_eval
!
(
x
+
f32
:
:
from_bits
(
0x7b800000
)
)
;
if
ui
>
>
31
=
=
0
{
ui
+
=
m
;
}
ui
&
=
!
m
;
}
else
{
force_eval
!
(
x
+
f32
:
:
from_bits
(
0x7b800000
)
)
;
if
ui
>
>
31
!
=
0
{
return
-
0
.
0
;
}
else
if
ui
<
<
1
!
=
0
{
return
1
.
0
;
}
}
f32
:
:
from_bits
(
ui
)
}
#
[
cfg
(
not
(
target_arch
=
"
powerpc64
"
)
)
]
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
core
:
:
f32
:
:
*
;
#
[
test
]
fn
sanity_check
(
)
{
assert_eq
!
(
ceilf
(
1
.
1
)
2
.
0
)
;
assert_eq
!
(
ceilf
(
2
.
9
)
3
.
0
)
;
}
#
[
test
]
fn
spec_tests
(
)
{
assert
!
(
ceilf
(
NAN
)
.
is_nan
(
)
)
;
for
f
in
[
0
.
0
-
0
.
0
INFINITY
NEG_INFINITY
]
.
iter
(
)
.
copied
(
)
{
assert_eq
!
(
ceilf
(
f
)
f
)
;
}
}
}
