use
core
:
:
f32
;
const
IVLN2HI
:
f32
=
1
.
4428710938e
+
00
;
const
IVLN2LO
:
f32
=
-
1
.
7605285393e
-
04
;
const
LG1
:
f32
=
0
.
66666662693
;
const
LG2
:
f32
=
0
.
40000972152
;
const
LG3
:
f32
=
0
.
28498786688
;
const
LG4
:
f32
=
0
.
24279078841
;
#
[
cfg_attr
(
all
(
test
assert_no_panic
)
no_panic
:
:
no_panic
)
]
pub
fn
log2f
(
mut
x
:
f32
)
-
>
f32
{
let
x1p25f
=
f32
:
:
from_bits
(
0x4c000000
)
;
let
mut
ui
:
u32
=
x
.
to_bits
(
)
;
let
hfsq
:
f32
;
let
f
:
f32
;
let
s
:
f32
;
let
z
:
f32
;
let
r
:
f32
;
let
w
:
f32
;
let
t1
:
f32
;
let
t2
:
f32
;
let
mut
hi
:
f32
;
let
lo
:
f32
;
let
mut
ix
:
u32
;
let
mut
k
:
i32
;
ix
=
ui
;
k
=
0
;
if
ix
<
0x00800000
|
|
(
ix
>
>
31
)
>
0
{
if
ix
<
<
1
=
=
0
{
return
-
1
.
/
(
x
*
x
)
;
}
if
(
ix
>
>
31
)
>
0
{
return
(
x
-
x
)
/
0
.
0
;
}
k
-
=
25
;
x
*
=
x1p25f
;
ui
=
x
.
to_bits
(
)
;
ix
=
ui
;
}
else
if
ix
>
=
0x7f800000
{
return
x
;
}
else
if
ix
=
=
0x3f800000
{
return
0
.
;
}
ix
+
=
0x3f800000
-
0x3f3504f3
;
k
+
=
(
ix
>
>
23
)
as
i32
-
0x7f
;
ix
=
(
ix
&
0x007fffff
)
+
0x3f3504f3
;
ui
=
ix
;
x
=
f32
:
:
from_bits
(
ui
)
;
f
=
x
-
1
.
0
;
s
=
f
/
(
2
.
0
+
f
)
;
z
=
s
*
s
;
w
=
z
*
z
;
t1
=
w
*
(
LG2
+
w
*
LG4
)
;
t2
=
z
*
(
LG1
+
w
*
LG3
)
;
r
=
t2
+
t1
;
hfsq
=
0
.
5
*
f
*
f
;
hi
=
f
-
hfsq
;
ui
=
hi
.
to_bits
(
)
;
ui
&
=
0xfffff000
;
hi
=
f32
:
:
from_bits
(
ui
)
;
lo
=
f
-
hi
-
hfsq
+
s
*
(
hfsq
+
r
)
;
(
lo
+
hi
)
*
IVLN2LO
+
lo
*
IVLN2HI
+
hi
*
IVLN2HI
+
k
as
f32
}
