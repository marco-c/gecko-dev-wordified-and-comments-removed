use
super
:
:
{
cos
fabs
get_high_word
get_low_word
log
sin
sqrt
}
;
const
INVSQRTPI
:
f64
=
5
.
64189583547756279280e
-
01
;
const
TPI
:
f64
=
6
.
36619772367581382433e
-
01
;
fn
common
(
ix
:
u32
x
:
f64
y0
:
bool
)
-
>
f64
{
let
s
:
f64
;
let
mut
c
:
f64
;
let
mut
ss
:
f64
;
let
mut
cc
:
f64
;
let
z
:
f64
;
s
=
sin
(
x
)
;
c
=
cos
(
x
)
;
if
y0
{
c
=
-
c
;
}
cc
=
s
+
c
;
if
ix
<
0x7fe00000
{
ss
=
s
-
c
;
z
=
-
cos
(
2
.
0
*
x
)
;
if
s
*
c
<
0
.
0
{
cc
=
z
/
ss
;
}
else
{
ss
=
z
/
cc
;
}
if
ix
<
0x48000000
{
if
y0
{
ss
=
-
ss
;
}
cc
=
pzero
(
x
)
*
cc
-
qzero
(
x
)
*
ss
;
}
}
return
INVSQRTPI
*
cc
/
sqrt
(
x
)
;
}
const
R02
:
f64
=
1
.
56249999999999947958e
-
02
;
const
R03
:
f64
=
-
1
.
89979294238854721751e
-
04
;
const
R04
:
f64
=
1
.
82954049532700665670e
-
06
;
const
R05
:
f64
=
-
4
.
61832688532103189199e
-
09
;
const
S01
:
f64
=
1
.
56191029464890010492e
-
02
;
const
S02
:
f64
=
1
.
16926784663337450260e
-
04
;
const
S03
:
f64
=
5
.
13546550207318111446e
-
07
;
const
S04
:
f64
=
1
.
16614003333790000205e
-
09
;
pub
fn
j0
(
mut
x
:
f64
)
-
>
f64
{
let
z
:
f64
;
let
r
:
f64
;
let
s
:
f64
;
let
mut
ix
:
u32
;
ix
=
get_high_word
(
x
)
;
ix
&
=
0x7fffffff
;
if
ix
>
=
0x7ff00000
{
return
1
.
0
/
(
x
*
x
)
;
}
x
=
fabs
(
x
)
;
if
ix
>
=
0x40000000
{
return
common
(
ix
x
false
)
;
}
if
ix
>
=
0x3f200000
{
z
=
x
*
x
;
r
=
z
*
(
R02
+
z
*
(
R03
+
z
*
(
R04
+
z
*
R05
)
)
)
;
s
=
1
.
0
+
z
*
(
S01
+
z
*
(
S02
+
z
*
(
S03
+
z
*
S04
)
)
)
;
return
(
1
.
0
+
x
/
2
.
0
)
*
(
1
.
0
-
x
/
2
.
0
)
+
z
*
(
r
/
s
)
;
}
if
ix
>
=
0x38000000
{
x
=
0
.
25
*
x
*
x
;
}
return
1
.
0
-
x
;
}
const
U00
:
f64
=
-
7
.
38042951086872317523e
-
02
;
const
U01
:
f64
=
1
.
76666452509181115538e
-
01
;
const
U02
:
f64
=
-
1
.
38185671945596898896e
-
02
;
const
U03
:
f64
=
3
.
47453432093683650238e
-
04
;
const
U04
:
f64
=
-
3
.
81407053724364161125e
-
06
;
const
U05
:
f64
=
1
.
95590137035022920206e
-
08
;
const
U06
:
f64
=
-
3
.
98205194132103398453e
-
11
;
const
V01
:
f64
=
1
.
27304834834123699328e
-
02
;
const
V02
:
f64
=
7
.
60068627350353253702e
-
05
;
const
V03
:
f64
=
2
.
59150851840457805467e
-
07
;
const
V04
:
f64
=
4
.
41110311332675467403e
-
10
;
pub
fn
y0
(
x
:
f64
)
-
>
f64
{
let
z
:
f64
;
let
u
:
f64
;
let
v
:
f64
;
let
ix
:
u32
;
let
lx
:
u32
;
ix
=
get_high_word
(
x
)
;
lx
=
get_low_word
(
x
)
;
if
(
(
ix
<
<
1
)
|
lx
)
=
=
0
{
return
-
1
.
0
/
0
.
0
;
}
if
(
ix
>
>
31
)
!
=
0
{
return
0
.
0
/
0
.
0
;
}
if
ix
>
=
0x7ff00000
{
return
1
.
0
/
x
;
}
if
ix
>
=
0x40000000
{
return
common
(
ix
x
true
)
;
}
if
ix
>
=
0x3e400000
{
z
=
x
*
x
;
u
=
U00
+
z
*
(
U01
+
z
*
(
U02
+
z
*
(
U03
+
z
*
(
U04
+
z
*
(
U05
+
z
*
U06
)
)
)
)
)
;
v
=
1
.
0
+
z
*
(
V01
+
z
*
(
V02
+
z
*
(
V03
+
z
*
V04
)
)
)
;
return
u
/
v
+
TPI
*
(
j0
(
x
)
*
log
(
x
)
)
;
}
return
U00
+
TPI
*
log
(
x
)
;
}
const
PR8
:
[
f64
;
6
]
=
[
0
.
00000000000000000000e
+
00
-
7
.
03124999999900357484e
-
02
-
8
.
08167041275349795626e
+
00
-
2
.
57063105679704847262e
+
02
-
2
.
48521641009428822144e
+
03
-
5
.
25304380490729545272e
+
03
]
;
const
PS8
:
[
f64
;
5
]
=
[
1
.
16534364619668181717e
+
02
3
.
83374475364121826715e
+
03
4
.
05978572648472545552e
+
04
1
.
16752972564375915681e
+
05
4
.
76277284146730962675e
+
04
]
;
const
PR5
:
[
f64
;
6
]
=
[
-
1
.
14125464691894502584e
-
11
-
7
.
03124940873599280078e
-
02
-
4
.
15961064470587782438e
+
00
-
6
.
76747652265167261021e
+
01
-
3
.
31231299649172967747e
+
02
-
3
.
46433388365604912451e
+
02
]
;
const
PS5
:
[
f64
;
5
]
=
[
6
.
07539382692300335975e
+
01
1
.
05125230595704579173e
+
03
5
.
97897094333855784498e
+
03
9
.
62544514357774460223e
+
03
2
.
40605815922939109441e
+
03
]
;
const
PR3
:
[
f64
;
6
]
=
[
-
2
.
54704601771951915620e
-
09
-
7
.
03119616381481654654e
-
02
-
2
.
40903221549529611423e
+
00
-
2
.
19659774734883086467e
+
01
-
5
.
80791704701737572236e
+
01
-
3
.
14479470594888503854e
+
01
]
;
const
PS3
:
[
f64
;
5
]
=
[
3
.
58560338055209726349e
+
01
3
.
61513983050303863820e
+
02
1
.
19360783792111533330e
+
03
1
.
12799679856907414432e
+
03
1
.
73580930813335754692e
+
02
]
;
const
PR2
:
[
f64
;
6
]
=
[
-
8
.
87534333032526411254e
-
08
-
7
.
03030995483624743247e
-
02
-
1
.
45073846780952986357e
+
00
-
7
.
63569613823527770791e
+
00
-
1
.
11931668860356747786e
+
01
-
3
.
23364579351335335033e
+
00
]
;
const
PS2
:
[
f64
;
5
]
=
[
2
.
22202997532088808441e
+
01
1
.
36206794218215208048e
+
02
2
.
70470278658083486789e
+
02
1
.
53875394208320329881e
+
02
1
.
46576176948256193810e
+
01
]
;
fn
pzero
(
x
:
f64
)
-
>
f64
{
let
p
:
&
[
f64
;
6
]
;
let
q
:
&
[
f64
;
5
]
;
let
z
:
f64
;
let
r
:
f64
;
let
s
:
f64
;
let
mut
ix
:
u32
;
ix
=
get_high_word
(
x
)
;
ix
&
=
0x7fffffff
;
if
ix
>
=
0x40200000
{
p
=
&
PR8
;
q
=
&
PS8
;
}
else
if
ix
>
=
0x40122E8B
{
p
=
&
PR5
;
q
=
&
PS5
;
}
else
if
ix
>
=
0x4006DB6D
{
p
=
&
PR3
;
q
=
&
PS3
;
}
else
{
p
=
&
PR2
;
q
=
&
PS2
;
}
z
=
1
.
0
/
(
x
*
x
)
;
r
=
p
[
0
]
+
z
*
(
p
[
1
]
+
z
*
(
p
[
2
]
+
z
*
(
p
[
3
]
+
z
*
(
p
[
4
]
+
z
*
p
[
5
]
)
)
)
)
;
s
=
1
.
0
+
z
*
(
q
[
0
]
+
z
*
(
q
[
1
]
+
z
*
(
q
[
2
]
+
z
*
(
q
[
3
]
+
z
*
q
[
4
]
)
)
)
)
;
return
1
.
0
+
r
/
s
;
}
const
QR8
:
[
f64
;
6
]
=
[
0
.
00000000000000000000e
+
00
7
.
32421874999935051953e
-
02
1
.
17682064682252693899e
+
01
5
.
57673380256401856059e
+
02
8
.
85919720756468632317e
+
03
3
.
70146267776887834771e
+
04
]
;
const
QS8
:
[
f64
;
6
]
=
[
1
.
63776026895689824414e
+
02
8
.
09834494656449805916e
+
03
1
.
42538291419120476348e
+
05
8
.
03309257119514397345e
+
05
8
.
40501579819060512818e
+
05
-
3
.
43899293537866615225e
+
05
]
;
const
QR5
:
[
f64
;
6
]
=
[
1
.
84085963594515531381e
-
11
7
.
32421766612684765896e
-
02
5
.
83563508962056953777e
+
00
1
.
35111577286449829671e
+
02
1
.
02724376596164097464e
+
03
1
.
98997785864605384631e
+
03
]
;
const
QS5
:
[
f64
;
6
]
=
[
8
.
27766102236537761883e
+
01
2
.
07781416421392987104e
+
03
1
.
88472887785718085070e
+
04
5
.
67511122894947329769e
+
04
3
.
59767538425114471465e
+
04
-
5
.
35434275601944773371e
+
03
]
;
const
QR3
:
[
f64
;
6
]
=
[
4
.
37741014089738620906e
-
09
7
.
32411180042911447163e
-
02
3
.
34423137516170720929e
+
00
4
.
26218440745412650017e
+
01
1
.
70808091340565596283e
+
02
1
.
66733948696651168575e
+
02
]
;
const
QS3
:
[
f64
;
6
]
=
[
4
.
87588729724587182091e
+
01
7
.
09689221056606015736e
+
02
3
.
70414822620111362994e
+
03
6
.
46042516752568917582e
+
03
2
.
51633368920368957333e
+
03
-
1
.
49247451836156386662e
+
02
]
;
const
QR2
:
[
f64
;
6
]
=
[
1
.
50444444886983272379e
-
07
7
.
32234265963079278272e
-
02
1
.
99819174093815998816e
+
00
1
.
44956029347885735348e
+
01
3
.
16662317504781540833e
+
01
1
.
62527075710929267416e
+
01
]
;
const
QS2
:
[
f64
;
6
]
=
[
3
.
03655848355219184498e
+
01
2
.
69348118608049844624e
+
02
8
.
44783757595320139444e
+
02
8
.
82935845112488550512e
+
02
2
.
12666388511798828631e
+
02
-
5
.
31095493882666946917e
+
00
]
;
fn
qzero
(
x
:
f64
)
-
>
f64
{
let
p
:
&
[
f64
;
6
]
;
let
q
:
&
[
f64
;
6
]
;
let
s
:
f64
;
let
r
:
f64
;
let
z
:
f64
;
let
mut
ix
:
u32
;
ix
=
get_high_word
(
x
)
;
ix
&
=
0x7fffffff
;
if
ix
>
=
0x40200000
{
p
=
&
QR8
;
q
=
&
QS8
;
}
else
if
ix
>
=
0x40122E8B
{
p
=
&
QR5
;
q
=
&
QS5
;
}
else
if
ix
>
=
0x4006DB6D
{
p
=
&
QR3
;
q
=
&
QS3
;
}
else
{
p
=
&
QR2
;
q
=
&
QS2
;
}
z
=
1
.
0
/
(
x
*
x
)
;
r
=
p
[
0
]
+
z
*
(
p
[
1
]
+
z
*
(
p
[
2
]
+
z
*
(
p
[
3
]
+
z
*
(
p
[
4
]
+
z
*
p
[
5
]
)
)
)
)
;
s
=
1
.
0
+
z
*
(
q
[
0
]
+
z
*
(
q
[
1
]
+
z
*
(
q
[
2
]
+
z
*
(
q
[
3
]
+
z
*
(
q
[
4
]
+
z
*
q
[
5
]
)
)
)
)
)
;
return
(
-
0
.
125
+
r
/
s
)
/
x
;
}
