use
Diagnostic
;
use
Level
;
use
Handler
;
use
std
:
:
fmt
:
:
{
self
Debug
}
;
use
std
:
:
ops
:
:
{
Deref
DerefMut
}
;
use
std
:
:
thread
:
:
panicking
;
use
syntax_pos
:
:
{
MultiSpan
Span
}
;
#
[
must_use
]
#
[
derive
(
Clone
)
]
pub
struct
DiagnosticBuilder
<
'
a
>
{
handler
:
&
'
a
Handler
diagnostic
:
Diagnostic
}
macro_rules
!
forward
{
(
pub
fn
n
:
ident
(
&
self
(
name
:
ident
:
ty
:
ty
)
*
)
-
>
&
Self
)
=
>
{
pub
fn
n
(
&
self
(
name
:
ty
)
*
)
-
>
&
Self
{
self
.
diagnostic
.
n
(
(
name
)
*
)
;
self
}
}
;
(
pub
fn
n
:
ident
(
&
mut
self
(
name
:
ident
:
ty
:
ty
)
*
)
-
>
&
mut
Self
)
=
>
{
pub
fn
n
(
&
mut
self
(
name
:
ty
)
*
)
-
>
&
mut
Self
{
self
.
diagnostic
.
n
(
(
name
)
*
)
;
self
}
}
;
(
pub
fn
n
:
ident
<
S
:
Into
<
MultiSpan
>
>
(
&
mut
self
(
name
:
ident
:
ty
:
ty
)
*
)
-
>
&
mut
Self
)
=
>
{
pub
fn
n
<
S
:
Into
<
MultiSpan
>
>
(
&
mut
self
(
name
:
ty
)
*
)
-
>
&
mut
Self
{
self
.
diagnostic
.
n
(
(
name
)
*
)
;
self
}
}
;
}
impl
<
'
a
>
Deref
for
DiagnosticBuilder
<
'
a
>
{
type
Target
=
Diagnostic
;
fn
deref
(
&
self
)
-
>
&
Diagnostic
{
&
self
.
diagnostic
}
}
impl
<
'
a
>
DerefMut
for
DiagnosticBuilder
<
'
a
>
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
Diagnostic
{
&
mut
self
.
diagnostic
}
}
impl
<
'
a
>
DiagnosticBuilder
<
'
a
>
{
pub
fn
emit
(
&
mut
self
)
{
if
self
.
cancelled
(
)
{
return
;
}
match
self
.
level
{
Level
:
:
Bug
|
Level
:
:
Fatal
|
Level
:
:
PhaseFatal
|
Level
:
:
Error
=
>
{
self
.
handler
.
bump_err_count
(
)
;
}
Level
:
:
Warning
|
Level
:
:
Note
|
Level
:
:
Help
|
Level
:
:
Cancelled
=
>
{
}
}
self
.
handler
.
emitter
.
borrow_mut
(
)
.
emit
(
&
self
)
;
self
.
cancel
(
)
;
self
.
handler
.
panic_if_treat_err_as_bug
(
)
;
}
forward
!
(
pub
fn
span_label
(
&
mut
self
span
:
Span
label
:
&
fmt
:
:
Display
)
-
>
&
mut
Self
)
;
forward
!
(
pub
fn
note_expected_found
(
&
mut
self
label
:
&
fmt
:
:
Display
expected
:
&
fmt
:
:
Display
found
:
&
fmt
:
:
Display
)
-
>
&
mut
Self
)
;
forward
!
(
pub
fn
note_expected_found_extra
(
&
mut
self
label
:
&
fmt
:
:
Display
expected
:
&
fmt
:
:
Display
found
:
&
fmt
:
:
Display
expected_extra
:
&
fmt
:
:
Display
found_extra
:
&
fmt
:
:
Display
)
-
>
&
mut
Self
)
;
forward
!
(
pub
fn
note
(
&
mut
self
msg
:
&
str
)
-
>
&
mut
Self
)
;
forward
!
(
pub
fn
span_note
<
S
:
Into
<
MultiSpan
>
>
(
&
mut
self
sp
:
S
msg
:
&
str
)
-
>
&
mut
Self
)
;
forward
!
(
pub
fn
warn
(
&
mut
self
msg
:
&
str
)
-
>
&
mut
Self
)
;
forward
!
(
pub
fn
span_warn
<
S
:
Into
<
MultiSpan
>
>
(
&
mut
self
sp
:
S
msg
:
&
str
)
-
>
&
mut
Self
)
;
forward
!
(
pub
fn
help
(
&
mut
self
msg
:
&
str
)
-
>
&
mut
Self
)
;
forward
!
(
pub
fn
span_help
<
S
:
Into
<
MultiSpan
>
>
(
&
mut
self
sp
:
S
msg
:
&
str
)
-
>
&
mut
Self
)
;
forward
!
(
pub
fn
span_suggestion
<
S
:
Into
<
MultiSpan
>
>
(
&
mut
self
sp
:
S
msg
:
&
str
suggestion
:
String
)
-
>
&
mut
Self
)
;
forward
!
(
pub
fn
set_span
<
S
:
Into
<
MultiSpan
>
>
(
&
mut
self
sp
:
S
)
-
>
&
mut
Self
)
;
forward
!
(
pub
fn
code
(
&
mut
self
s
:
String
)
-
>
&
mut
Self
)
;
pub
fn
new
(
handler
:
&
'
a
Handler
level
:
Level
message
:
&
str
)
-
>
DiagnosticBuilder
<
'
a
>
{
DiagnosticBuilder
:
:
new_with_code
(
handler
level
None
message
)
}
pub
fn
new_with_code
(
handler
:
&
'
a
Handler
level
:
Level
code
:
Option
<
String
>
message
:
&
str
)
-
>
DiagnosticBuilder
<
'
a
>
{
DiagnosticBuilder
{
handler
:
handler
diagnostic
:
Diagnostic
:
:
new_with_code
(
level
code
message
)
}
}
pub
fn
into_diagnostic
(
mut
self
)
-
>
Diagnostic
{
let
result
=
self
.
diagnostic
.
clone
(
)
;
self
.
cancel
(
)
;
result
}
}
impl
<
'
a
>
Debug
for
DiagnosticBuilder
<
'
a
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
diagnostic
.
fmt
(
f
)
}
}
impl
<
'
a
>
Drop
for
DiagnosticBuilder
<
'
a
>
{
fn
drop
(
&
mut
self
)
{
if
!
panicking
(
)
&
&
!
self
.
cancelled
(
)
{
let
mut
db
=
DiagnosticBuilder
:
:
new
(
self
.
handler
Level
:
:
Bug
"
Error
constructed
but
not
emitted
"
)
;
db
.
emit
(
)
;
panic
!
(
)
;
}
}
}
