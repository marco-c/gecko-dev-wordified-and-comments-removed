#
[
cfg
(
feature
=
"
serde
"
)
]
#
[
macro_use
]
pub
extern
crate
serde
;
pub
extern
crate
euclid
;
mod
bucketed
;
mod
allocator
;
#
[
cfg
(
feature
=
"
ffi
"
)
]
pub
mod
ffi
;
pub
use
allocator
:
:
*
;
pub
use
bucketed
:
:
*
;
pub
use
euclid
:
:
{
point2
size2
}
;
pub
type
Point
=
euclid
:
:
default
:
:
Point2D
<
i32
>
;
pub
type
Size
=
euclid
:
:
default
:
:
Size2D
<
i32
>
;
pub
type
Rectangle
=
euclid
:
:
default
:
:
Box2D
<
i32
>
;
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
serialization
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
AllocatorOptions
{
pub
alignment
:
Size
pub
vertical_shelves
:
bool
pub
num_columns
:
i32
}
pub
const
DEFAULT_OPTIONS
:
AllocatorOptions
=
AllocatorOptions
{
vertical_shelves
:
false
alignment
:
size2
(
1
1
)
num_columns
:
1
}
;
impl
Default
for
AllocatorOptions
{
fn
default
(
)
-
>
Self
{
DEFAULT_OPTIONS
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
serialization
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
Allocation
{
pub
id
:
AllocId
pub
rectangle
:
Rectangle
}
#
[
repr
(
C
)
]
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
serialization
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
AllocId
(
pub
(
crate
)
u32
)
;
impl
AllocId
{
#
[
inline
]
pub
(
crate
)
fn
new
(
index
:
u16
gen
:
u16
)
-
>
Self
{
AllocId
(
index
as
u32
|
(
(
gen
as
u32
)
<
<
16
)
)
}
#
[
inline
]
pub
(
crate
)
fn
index
(
&
self
)
-
>
u16
{
self
.
0
as
u16
}
#
[
inline
]
pub
(
crate
)
fn
generation
(
&
self
)
-
>
u16
{
(
self
.
0
>
>
16
)
as
u16
}
#
[
inline
]
pub
fn
serialize
(
&
self
)
-
>
u32
{
self
.
0
}
#
[
inline
]
pub
fn
deserialize
(
bytes
:
u32
)
-
>
Self
{
AllocId
(
bytes
)
}
}
