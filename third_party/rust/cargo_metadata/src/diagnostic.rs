#
[
cfg
(
feature
=
"
builder
"
)
]
use
derive_builder
:
:
Builder
;
use
serde
:
:
{
Deserialize
Serialize
}
;
use
std
:
:
fmt
;
#
[
derive
(
Debug
Clone
Serialize
Deserialize
PartialEq
Eq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
builder
"
derive
(
Builder
)
)
]
#
[
non_exhaustive
]
#
[
cfg_attr
(
feature
=
"
builder
"
builder
(
pattern
=
"
owned
"
setter
(
into
)
)
)
]
pub
struct
DiagnosticCode
{
pub
code
:
String
pub
explanation
:
Option
<
String
>
}
#
[
derive
(
Debug
Clone
Serialize
Deserialize
PartialEq
Eq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
builder
"
derive
(
Builder
)
)
]
#
[
non_exhaustive
]
#
[
cfg_attr
(
feature
=
"
builder
"
builder
(
pattern
=
"
owned
"
setter
(
into
)
)
)
]
pub
struct
DiagnosticSpanLine
{
pub
text
:
String
pub
highlight_start
:
usize
pub
highlight_end
:
usize
}
#
[
derive
(
Debug
Clone
Serialize
Deserialize
PartialEq
Eq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
builder
"
derive
(
Builder
)
)
]
#
[
non_exhaustive
]
#
[
cfg_attr
(
feature
=
"
builder
"
builder
(
pattern
=
"
owned
"
setter
(
into
)
)
)
]
pub
struct
DiagnosticSpanMacroExpansion
{
pub
span
:
DiagnosticSpan
pub
macro_decl_name
:
String
pub
def_site_span
:
Option
<
DiagnosticSpan
>
}
#
[
derive
(
Debug
Clone
Serialize
Deserialize
PartialEq
Eq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
builder
"
derive
(
Builder
)
)
]
#
[
non_exhaustive
]
#
[
cfg_attr
(
feature
=
"
builder
"
builder
(
pattern
=
"
owned
"
setter
(
into
)
)
)
]
pub
struct
DiagnosticSpan
{
pub
file_name
:
String
pub
byte_start
:
u32
pub
byte_end
:
u32
pub
line_start
:
usize
pub
line_end
:
usize
pub
column_start
:
usize
pub
column_end
:
usize
pub
is_primary
:
bool
pub
text
:
Vec
<
DiagnosticSpanLine
>
pub
label
:
Option
<
String
>
pub
suggested_replacement
:
Option
<
String
>
pub
suggestion_applicability
:
Option
<
Applicability
>
pub
expansion
:
Option
<
Box
<
DiagnosticSpanMacroExpansion
>
>
}
#
[
derive
(
Debug
Clone
Serialize
Deserialize
PartialEq
Eq
Hash
)
]
#
[
non_exhaustive
]
pub
enum
Applicability
{
MachineApplicable
HasPlaceholders
MaybeIncorrect
Unspecified
}
#
[
derive
(
Debug
Clone
Copy
Serialize
Deserialize
PartialEq
Eq
Hash
)
]
#
[
non_exhaustive
]
#
[
serde
(
rename_all
=
"
lowercase
"
)
]
pub
enum
DiagnosticLevel
{
#
[
serde
(
rename
=
"
error
:
internal
compiler
error
"
)
]
Ice
Error
Warning
#
[
serde
(
rename
=
"
failure
-
note
"
)
]
FailureNote
Note
Help
}
#
[
derive
(
Debug
Clone
Serialize
Deserialize
PartialEq
Eq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
builder
"
derive
(
Builder
)
)
]
#
[
non_exhaustive
]
#
[
cfg_attr
(
feature
=
"
builder
"
builder
(
pattern
=
"
owned
"
setter
(
into
)
)
)
]
pub
struct
Diagnostic
{
pub
message
:
String
pub
code
:
Option
<
DiagnosticCode
>
pub
level
:
DiagnosticLevel
pub
spans
:
Vec
<
DiagnosticSpan
>
pub
children
:
Vec
<
Diagnostic
>
pub
rendered
:
Option
<
String
>
}
impl
fmt
:
:
Display
for
Diagnostic
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
if
let
Some
(
ref
rendered
)
=
self
.
rendered
{
f
.
write_str
(
rendered
)
?
;
}
else
{
f
.
write_str
(
"
cargo
didn
'
t
render
this
message
"
)
?
;
}
Ok
(
(
)
)
}
}
