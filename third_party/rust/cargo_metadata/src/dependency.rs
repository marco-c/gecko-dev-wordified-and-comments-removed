use
std
:
:
fmt
;
use
camino
:
:
Utf8PathBuf
;
#
[
cfg
(
feature
=
"
builder
"
)
]
use
derive_builder
:
:
Builder
;
use
semver
:
:
VersionReq
;
use
serde
:
:
{
Deserialize
Deserializer
Serialize
}
;
#
[
derive
(
Eq
PartialEq
Clone
Debug
Copy
Hash
Serialize
Deserialize
)
]
pub
enum
DependencyKind
{
#
[
serde
(
rename
=
"
normal
"
)
]
Normal
#
[
serde
(
rename
=
"
dev
"
)
]
Development
#
[
serde
(
rename
=
"
build
"
)
]
Build
#
[
doc
(
hidden
)
]
#
[
serde
(
other
)
]
Unknown
}
impl
Default
for
DependencyKind
{
fn
default
(
)
-
>
DependencyKind
{
DependencyKind
:
:
Normal
}
}
impl
fmt
:
:
Display
for
DependencyKind
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
let
s
=
serde_json
:
:
to_string
(
self
)
.
unwrap
(
)
;
f
.
write_str
(
&
s
[
1
.
.
s
.
len
(
)
-
1
]
)
}
}
pub
(
super
)
fn
parse_dependency_kind
<
'
de
D
>
(
d
:
D
)
-
>
Result
<
DependencyKind
D
:
:
Error
>
where
D
:
Deserializer
<
'
de
>
{
Deserialize
:
:
deserialize
(
d
)
.
map
(
|
x
:
Option
<
_
>
|
x
.
unwrap_or_default
(
)
)
}
#
[
derive
(
Clone
Serialize
Deserialize
Debug
PartialEq
Eq
)
]
#
[
cfg_attr
(
feature
=
"
builder
"
derive
(
Builder
)
)
]
#
[
non_exhaustive
]
#
[
cfg_attr
(
feature
=
"
builder
"
builder
(
pattern
=
"
owned
"
setter
(
into
)
)
)
]
pub
struct
Dependency
{
pub
name
:
String
pub
source
:
Option
<
String
>
pub
req
:
VersionReq
#
[
serde
(
deserialize_with
=
"
parse_dependency_kind
"
)
]
pub
kind
:
DependencyKind
pub
optional
:
bool
pub
uses_default_features
:
bool
pub
features
:
Vec
<
String
>
pub
target
:
Option
<
Platform
>
pub
rename
:
Option
<
String
>
pub
registry
:
Option
<
String
>
pub
path
:
Option
<
Utf8PathBuf
>
}
pub
use
cargo_platform
:
:
Platform
;
