use
crate
:
:
Checksum
;
#
[
derive
(
Debug
Copy
Clone
Eq
PartialEq
Checksum
Ord
PartialOrd
)
]
pub
enum
ObjectImpl
{
Struct
Trait
CallbackTrait
}
impl
ObjectImpl
{
pub
fn
rust_name_for
(
&
self
name
:
&
str
)
-
>
String
{
if
self
.
is_trait_interface
(
)
{
format
!
(
"
dyn
r
#
{
name
}
"
)
}
else
{
format
!
(
"
r
#
{
name
}
"
)
}
}
pub
fn
is_trait_interface
(
&
self
)
-
>
bool
{
matches
!
(
self
Self
:
:
Trait
|
Self
:
:
CallbackTrait
)
}
pub
fn
has_callback_interface
(
&
self
)
-
>
bool
{
matches
!
(
self
Self
:
:
CallbackTrait
)
}
}
#
[
derive
(
Debug
Clone
Copy
Eq
PartialEq
Checksum
Ord
PartialOrd
)
]
pub
enum
ExternalKind
{
Interface
Trait
DataClass
}
#
[
derive
(
Debug
Clone
Eq
PartialEq
Checksum
Ord
PartialOrd
)
]
pub
enum
Type
{
UInt8
Int8
UInt16
Int16
UInt32
Int32
UInt64
Int64
Float32
Float64
Boolean
String
Bytes
Timestamp
Duration
Object
{
module_path
:
String
name
:
String
imp
:
ObjectImpl
}
Record
{
module_path
:
String
name
:
String
}
Enum
{
module_path
:
String
name
:
String
}
CallbackInterface
{
module_path
:
String
name
:
String
}
Optional
{
inner_type
:
Box
<
Type
>
}
Sequence
{
inner_type
:
Box
<
Type
>
}
Map
{
key_type
:
Box
<
Type
>
value_type
:
Box
<
Type
>
}
External
{
module_path
:
String
name
:
String
#
[
checksum_ignore
]
namespace
:
String
kind
:
ExternalKind
tagged
:
bool
}
Custom
{
module_path
:
String
name
:
String
builtin
:
Box
<
Type
>
}
}
impl
Type
{
pub
fn
iter_types
(
&
self
)
-
>
TypeIterator
<
'
_
>
{
let
nested_types
=
match
self
{
Type
:
:
Optional
{
inner_type
}
|
Type
:
:
Sequence
{
inner_type
}
=
>
{
inner_type
.
iter_types
(
)
}
Type
:
:
Map
{
key_type
value_type
}
=
>
Box
:
:
new
(
key_type
.
iter_types
(
)
.
chain
(
value_type
.
iter_types
(
)
)
)
_
=
>
Box
:
:
new
(
std
:
:
iter
:
:
empty
(
)
)
}
;
Box
:
:
new
(
std
:
:
iter
:
:
once
(
self
)
.
chain
(
nested_types
)
)
}
pub
fn
name
(
&
self
)
-
>
Option
<
String
>
{
match
self
{
Type
:
:
Object
{
name
.
.
}
=
>
Some
(
name
.
to_string
(
)
)
Type
:
:
Record
{
name
.
.
}
=
>
Some
(
name
.
to_string
(
)
)
Type
:
:
Enum
{
name
.
.
}
=
>
Some
(
name
.
to_string
(
)
)
Type
:
:
External
{
name
.
.
}
=
>
Some
(
name
.
to_string
(
)
)
Type
:
:
Custom
{
name
.
.
}
=
>
Some
(
name
.
to_string
(
)
)
Type
:
:
Optional
{
inner_type
}
|
Type
:
:
Sequence
{
inner_type
}
=
>
inner_type
.
name
(
)
_
=
>
None
}
}
fn
rename
(
&
mut
self
new_name
:
String
)
{
match
self
{
Type
:
:
Object
{
name
.
.
}
=
>
*
name
=
new_name
Type
:
:
Record
{
name
.
.
}
=
>
*
name
=
new_name
Type
:
:
Enum
{
name
.
.
}
=
>
*
name
=
new_name
Type
:
:
External
{
name
.
.
}
=
>
*
name
=
new_name
Type
:
:
Custom
{
name
.
.
}
=
>
*
name
=
new_name
_
=
>
{
}
}
}
pub
fn
rename_recursive
(
&
mut
self
name_transformer
:
&
impl
Fn
(
&
str
)
-
>
String
)
{
if
let
Some
(
name
)
=
self
.
name
(
)
{
self
.
rename
(
name_transformer
(
&
name
)
)
;
}
match
self
{
Type
:
:
Optional
{
inner_type
}
|
Type
:
:
Sequence
{
inner_type
}
=
>
{
inner_type
.
rename_recursive
(
name_transformer
)
;
}
Type
:
:
Map
{
key_type
value_type
.
.
}
=
>
{
key_type
.
rename_recursive
(
name_transformer
)
;
value_type
.
rename_recursive
(
name_transformer
)
;
}
Type
:
:
Custom
{
builtin
.
.
}
=
>
{
builtin
.
rename_recursive
(
name_transformer
)
;
}
_
=
>
{
}
}
}
}
pub
trait
AsType
:
:
:
core
:
:
fmt
:
:
Debug
{
fn
as_type
(
&
self
)
-
>
Type
;
}
impl
AsType
for
Type
{
fn
as_type
(
&
self
)
-
>
Type
{
self
.
clone
(
)
}
}
impl
<
T
C
>
AsType
for
T
where
T
:
std
:
:
ops
:
:
Deref
<
Target
=
C
>
+
std
:
:
fmt
:
:
Debug
C
:
AsType
{
fn
as_type
(
&
self
)
-
>
Type
{
self
.
deref
(
)
.
as_type
(
)
}
}
pub
type
TypeIterator
<
'
a
>
=
Box
<
dyn
Iterator
<
Item
=
&
'
a
Type
>
+
'
a
>
;
