from
math
import
exp
sqrt
log
floor
import
random
TABLE_NAMES
=
[
'
X
'
'
F
'
]
TABLE_LEN
=
256
def
tables
(
r
v
f
f_inv
)
:
    
xvec
=
[
0
]
*
(
TABLE_LEN
+
1
)
    
xvec
[
0
]
=
v
/
f
(
r
)
    
xvec
[
1
]
=
r
    
for
i
in
range
(
2
TABLE_LEN
)
:
        
last
=
xvec
[
i
-
1
]
        
xvec
[
i
]
=
f_inv
(
v
/
last
+
f
(
last
)
)
    
fvec
=
[
0
]
*
(
TABLE_LEN
+
1
)
    
for
i
in
range
(
TABLE_LEN
+
1
)
:
        
fvec
[
i
]
=
f
(
xvec
[
i
]
)
    
return
xvec
fvec
def
norm_f
(
x
)
:
    
return
exp
(
-
x
*
x
/
2
.
0
)
def
norm_f_inv
(
y
)
:
    
return
sqrt
(
-
2
.
0
*
log
(
y
)
)
NORM_R
=
3
.
6541528853610088
NORM_V
=
0
.
00492867323399
NORM
=
tables
(
NORM_R
NORM_V
              
norm_f
norm_f_inv
)
def
exp_f
(
x
)
:
    
return
exp
(
-
x
)
def
exp_f_inv
(
y
)
:
    
return
-
log
(
y
)
EXP_R
=
7
.
69711747013104972
EXP_V
=
0
.
0039496598225815571993
EXP
=
tables
(
EXP_R
EXP_V
             
exp_f
exp_f_inv
)
def
render_static
(
name
type
value
)
:
    
return
'
pub
static
%
s
:
%
s
=
%
s
;
\
n
'
%
(
name
type
value
)
def
render_table
(
name
values
)
:
    
rows
=
[
]
    
for
i
in
range
(
0
len
(
values
)
4
)
:
        
row
=
values
[
i
:
i
+
4
]
        
rows
.
append
(
'
'
.
join
(
'
%
.
18f
'
%
f
for
f
in
row
)
)
    
rendered
=
'
\
n
[
%
s
]
'
%
'
\
n
'
.
join
(
rows
)
    
return
render_static
(
name
'
[
f64
.
.
%
d
]
'
%
len
(
values
)
rendered
)
with
open
(
'
ziggurat_tables
.
rs
'
'
w
'
)
as
f
:
    
f
.
write
(
'
'
'
/
/
Copyright
2013
The
Rust
Project
Developers
.
See
the
COPYRIGHT
/
/
file
at
the
top
-
level
directory
of
this
distribution
and
at
/
/
http
:
/
/
rust
-
lang
.
org
/
COPYRIGHT
.
/
/
/
/
Licensed
under
the
Apache
License
Version
2
.
0
<
LICENSE
-
APACHE
or
/
/
http
:
/
/
www
.
apache
.
org
/
licenses
/
LICENSE
-
2
.
0
>
or
the
MIT
license
/
/
<
LICENSE
-
MIT
or
http
:
/
/
opensource
.
org
/
licenses
/
MIT
>
at
your
/
/
option
.
This
file
may
not
be
copied
modified
or
distributed
/
/
except
according
to
those
terms
.
/
/
Tables
for
distributions
which
are
sampled
using
the
ziggurat
/
/
algorithm
.
Autogenerated
by
ziggurat_tables
.
py
.
pub
type
ZigTable
=
&
\
'
static
[
f64
.
.
%
d
]
;
'
'
'
%
(
TABLE_LEN
+
1
)
)
    
for
name
tables
r
in
[
(
'
NORM
'
NORM
NORM_R
)
                            
(
'
EXP
'
EXP
EXP_R
)
]
:
        
f
.
write
(
render_static
(
'
ZIG_
%
s_R
'
%
name
'
f64
'
'
%
.
18f
'
%
r
)
)
        
for
(
tabname
table
)
in
zip
(
TABLE_NAMES
tables
)
:
            
f
.
write
(
render_table
(
'
ZIG_
%
s_
%
s
'
%
(
name
tabname
)
table
)
)
