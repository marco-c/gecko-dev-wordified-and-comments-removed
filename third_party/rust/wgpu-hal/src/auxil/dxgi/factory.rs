use
std
:
:
ops
:
:
Deref
;
use
windows
:
:
{
core
:
:
Interface
as
_
Win32
:
:
Graphics
:
:
Dxgi
}
;
use
crate
:
:
dx12
:
:
DxgiLib
;
#
[
derive
(
Debug
PartialEq
Eq
PartialOrd
Ord
)
]
pub
enum
DxgiFactoryType
{
Factory2
Factory4
Factory6
}
fn
should_keep_adapter
(
adapter
:
&
Dxgi
:
:
IDXGIAdapter1
)
-
>
bool
{
let
desc
=
unsafe
{
adapter
.
GetDesc1
(
)
}
.
unwrap
(
)
;
let
haswell_device_ids
=
[
0x0422
0x0426
0x042A
0x042B
0x042E
0x0C22
0x0C26
0x0C2A
0x0C2B
0x0C2E
0x0A22
0x0A2A
0x0A2B
0x0D2A
0x0D2B
0x0D2E
0x0A26
0x0A2E
0x0D22
0x0D26
0x0412
0x0416
0x0D12
0x041A
0x041B
0x0C12
0x0C16
0x0C1A
0x0C1B
0x0C1E
0x0A12
0x0A1A
0x0A1B
0x0D16
0x0D1A
0x0D1B
0x0D1E
0x041E
0x0A16
0x0A1E
0x0402
0x0406
0x040A
0x040B
0x040E
0x0C02
0x0C06
0x0C0A
0x0C0B
0x0C0E
0x0A02
0x0A06
0x0A0A
0x0A0B
0x0A0E
0x0D02
0x0D06
0x0D0A
0x0D0B
0x0D0E
]
;
if
desc
.
VendorId
=
=
0x8086
&
&
haswell_device_ids
.
contains
(
&
desc
.
DeviceId
)
{
return
false
;
}
if
desc
.
VendorId
=
=
5140
&
&
Dxgi
:
:
DXGI_ADAPTER_FLAG
(
desc
.
Flags
as
i32
)
.
contains
(
Dxgi
:
:
DXGI_ADAPTER_FLAG_SOFTWARE
)
{
let
adapter_name
=
super
:
:
conv
:
:
map_adapter_name
(
desc
.
Description
)
;
if
adapter_name
.
contains
(
"
Microsoft
Basic
Render
Driver
"
)
{
return
false
;
}
}
true
}
pub
enum
DxgiAdapter
{
Adapter1
(
Dxgi
:
:
IDXGIAdapter1
)
Adapter2
(
Dxgi
:
:
IDXGIAdapter2
)
Adapter3
(
Dxgi
:
:
IDXGIAdapter3
)
Adapter4
(
Dxgi
:
:
IDXGIAdapter4
)
}
impl
windows
:
:
core
:
:
Param
<
Dxgi
:
:
IDXGIAdapter
>
for
&
DxgiAdapter
{
unsafe
fn
param
(
self
)
-
>
windows
:
:
core
:
:
ParamValue
<
Dxgi
:
:
IDXGIAdapter
>
{
unsafe
{
self
.
deref
(
)
.
param
(
)
}
}
}
impl
Deref
for
DxgiAdapter
{
type
Target
=
Dxgi
:
:
IDXGIAdapter
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
match
self
{
DxgiAdapter
:
:
Adapter1
(
a
)
=
>
a
DxgiAdapter
:
:
Adapter2
(
a
)
=
>
a
DxgiAdapter
:
:
Adapter3
(
a
)
=
>
a
DxgiAdapter
:
:
Adapter4
(
a
)
=
>
a
}
}
}
impl
DxgiAdapter
{
pub
fn
as_adapter2
(
&
self
)
-
>
Option
<
&
Dxgi
:
:
IDXGIAdapter2
>
{
match
self
{
Self
:
:
Adapter1
(
_
)
=
>
None
Self
:
:
Adapter2
(
f
)
=
>
Some
(
f
)
Self
:
:
Adapter3
(
f
)
=
>
Some
(
f
)
Self
:
:
Adapter4
(
f
)
=
>
Some
(
f
)
}
}
pub
fn
unwrap_adapter2
(
&
self
)
-
>
&
Dxgi
:
:
IDXGIAdapter2
{
self
.
as_adapter2
(
)
.
unwrap
(
)
}
}
pub
fn
enumerate_adapters
(
factory
:
DxgiFactory
)
-
>
Vec
<
DxgiAdapter
>
{
let
mut
adapters
=
Vec
:
:
with_capacity
(
8
)
;
for
cur_index
in
0
.
.
{
if
let
DxgiFactory
:
:
Factory6
(
ref
factory6
)
=
factory
{
profiling
:
:
scope
!
(
"
IDXGIFactory6
:
:
EnumAdapterByGpuPreference
"
)
;
let
adapter4
:
Dxgi
:
:
IDXGIAdapter4
=
match
unsafe
{
factory6
.
EnumAdapterByGpuPreference
(
cur_index
Dxgi
:
:
DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE
)
}
{
Ok
(
a
)
=
>
a
Err
(
e
)
if
e
.
code
(
)
=
=
Dxgi
:
:
DXGI_ERROR_NOT_FOUND
=
>
break
Err
(
e
)
=
>
{
log
:
:
error
!
(
"
Failed
enumerating
adapters
:
{
}
"
e
)
;
break
;
}
}
;
if
!
should_keep_adapter
(
&
adapter4
)
{
continue
;
}
adapters
.
push
(
DxgiAdapter
:
:
Adapter4
(
adapter4
)
)
;
continue
;
}
profiling
:
:
scope
!
(
"
IDXGIFactory1
:
:
EnumAdapters1
"
)
;
let
adapter1
:
Dxgi
:
:
IDXGIAdapter1
=
match
unsafe
{
factory
.
EnumAdapters1
(
cur_index
)
}
{
Ok
(
a
)
=
>
a
Err
(
e
)
if
e
.
code
(
)
=
=
Dxgi
:
:
DXGI_ERROR_NOT_FOUND
=
>
break
Err
(
e
)
=
>
{
log
:
:
error
!
(
"
Failed
enumerating
adapters
:
{
}
"
e
)
;
break
;
}
}
;
if
!
should_keep_adapter
(
&
adapter1
)
{
continue
;
}
match
adapter1
.
cast
:
:
<
Dxgi
:
:
IDXGIAdapter3
>
(
)
{
Ok
(
adapter3
)
=
>
{
adapters
.
push
(
DxgiAdapter
:
:
Adapter3
(
adapter3
)
)
;
continue
;
}
Err
(
err
)
=
>
{
log
:
:
warn
!
(
"
Failed
casting
Adapter1
to
Adapter3
:
{
}
"
err
)
;
}
}
match
adapter1
.
cast
:
:
<
Dxgi
:
:
IDXGIAdapter2
>
(
)
{
Ok
(
adapter2
)
=
>
{
adapters
.
push
(
DxgiAdapter
:
:
Adapter2
(
adapter2
)
)
;
continue
;
}
Err
(
err
)
=
>
{
log
:
:
warn
!
(
"
Failed
casting
Adapter1
to
Adapter2
:
{
}
"
err
)
;
}
}
adapters
.
push
(
DxgiAdapter
:
:
Adapter1
(
adapter1
)
)
;
}
adapters
}
#
[
derive
(
Clone
Debug
)
]
pub
enum
DxgiFactory
{
Factory1
(
Dxgi
:
:
IDXGIFactory1
)
Factory2
(
Dxgi
:
:
IDXGIFactory2
)
Factory4
(
Dxgi
:
:
IDXGIFactory4
)
Factory6
(
Dxgi
:
:
IDXGIFactory6
)
}
impl
Deref
for
DxgiFactory
{
type
Target
=
Dxgi
:
:
IDXGIFactory1
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
match
self
{
DxgiFactory
:
:
Factory1
(
f
)
=
>
f
DxgiFactory
:
:
Factory2
(
f
)
=
>
f
DxgiFactory
:
:
Factory4
(
f
)
=
>
f
DxgiFactory
:
:
Factory6
(
f
)
=
>
f
}
}
}
impl
DxgiFactory
{
pub
fn
as_factory2
(
&
self
)
-
>
Option
<
&
Dxgi
:
:
IDXGIFactory2
>
{
match
self
{
Self
:
:
Factory1
(
_
)
=
>
None
Self
:
:
Factory2
(
f
)
=
>
Some
(
f
)
Self
:
:
Factory4
(
f
)
=
>
Some
(
f
)
Self
:
:
Factory6
(
f
)
=
>
Some
(
f
)
}
}
pub
fn
unwrap_factory2
(
&
self
)
-
>
&
Dxgi
:
:
IDXGIFactory2
{
self
.
as_factory2
(
)
.
unwrap
(
)
}
pub
fn
as_factory5
(
&
self
)
-
>
Option
<
&
Dxgi
:
:
IDXGIFactory5
>
{
match
self
{
Self
:
:
Factory1
(
_
)
|
Self
:
:
Factory2
(
_
)
|
Self
:
:
Factory4
(
_
)
=
>
None
Self
:
:
Factory6
(
f
)
=
>
Some
(
f
)
}
}
}
pub
fn
create_factory
(
required_factory_type
:
DxgiFactoryType
instance_flags
:
wgt
:
:
InstanceFlags
)
-
>
Result
<
(
DxgiLib
DxgiFactory
)
crate
:
:
InstanceError
>
{
let
lib_dxgi
=
DxgiLib
:
:
new
(
)
.
map_err
(
|
e
|
{
crate
:
:
InstanceError
:
:
with_source
(
String
:
:
from
(
"
failed
to
load
dxgi
.
dll
"
)
e
)
}
)
?
;
let
mut
factory_flags
=
Dxgi
:
:
DXGI_CREATE_FACTORY_FLAGS
:
:
default
(
)
;
if
instance_flags
.
contains
(
wgt
:
:
InstanceFlags
:
:
VALIDATION
)
{
match
lib_dxgi
.
debug_interface1
(
)
{
Ok
(
pair
)
=
>
match
pair
{
Ok
(
_debug_controller
)
=
>
{
factory_flags
|
=
Dxgi
:
:
DXGI_CREATE_FACTORY_DEBUG
;
}
Err
(
err
)
=
>
{
log
:
:
warn
!
(
"
Unable
to
enable
DXGI
debug
interface
:
{
}
"
err
)
;
}
}
Err
(
err
)
=
>
{
log
:
:
warn
!
(
"
Debug
interface
function
for
DXGI
not
found
:
{
:
?
}
"
err
)
;
}
}
super
:
:
exception
:
:
register_exception_handler
(
)
;
}
let
factory4
=
match
lib_dxgi
.
create_factory2
(
factory_flags
)
{
Ok
(
pair
)
=
>
match
pair
{
Ok
(
factory
)
=
>
Some
(
factory
)
Err
(
err
)
=
>
{
return
Err
(
crate
:
:
InstanceError
:
:
new
(
format
!
(
"
failed
to
create
IDXGIFactory4
:
{
err
:
?
}
"
)
)
)
;
}
}
Err
(
err
)
if
required_factory_type
=
=
DxgiFactoryType
:
:
Factory4
=
>
{
return
Err
(
crate
:
:
InstanceError
:
:
with_source
(
String
:
:
from
(
"
IDXGIFactory1
creation
function
not
found
"
)
err
)
)
;
}
Err
(
err
)
=
>
{
log
:
:
warn
!
(
"
IDXGIFactory1
creation
function
not
found
:
{
err
:
?
}
"
)
;
None
}
}
;
if
let
Some
(
factory4
)
=
factory4
{
let
factory6
=
factory4
.
cast
:
:
<
Dxgi
:
:
IDXGIFactory6
>
(
)
;
match
factory6
{
Ok
(
factory6
)
=
>
{
return
Ok
(
(
lib_dxgi
DxgiFactory
:
:
Factory6
(
factory6
)
)
)
;
}
Err
(
err
)
if
required_factory_type
=
=
DxgiFactoryType
:
:
Factory6
=
>
{
return
Err
(
crate
:
:
InstanceError
:
:
new
(
format
!
(
"
failed
to
cast
IDXGIFactory4
to
IDXGIFactory6
:
{
err
:
?
}
"
)
)
)
;
}
Err
(
err
)
=
>
{
log
:
:
warn
!
(
"
Failed
to
cast
IDXGIFactory4
to
IDXGIFactory6
:
{
:
?
}
"
err
)
;
return
Ok
(
(
lib_dxgi
DxgiFactory
:
:
Factory4
(
factory4
)
)
)
;
}
}
}
let
factory1
=
match
lib_dxgi
.
create_factory1
(
)
{
Ok
(
pair
)
=
>
match
pair
{
Ok
(
factory
)
=
>
factory
Err
(
err
)
=
>
{
return
Err
(
crate
:
:
InstanceError
:
:
new
(
format
!
(
"
failed
to
create
IDXGIFactory1
:
{
err
:
?
}
"
)
)
)
;
}
}
Err
(
err
)
=
>
{
return
Err
(
crate
:
:
InstanceError
:
:
with_source
(
String
:
:
from
(
"
IDXGIFactory1
creation
function
not
found
"
)
err
)
)
;
}
}
;
let
factory2
=
factory1
.
cast
:
:
<
Dxgi
:
:
IDXGIFactory2
>
(
)
;
match
factory2
{
Ok
(
factory2
)
=
>
{
return
Ok
(
(
lib_dxgi
DxgiFactory
:
:
Factory2
(
factory2
)
)
)
;
}
Err
(
err
)
if
required_factory_type
=
=
DxgiFactoryType
:
:
Factory2
=
>
{
return
Err
(
crate
:
:
InstanceError
:
:
new
(
format
!
(
"
failed
to
cast
IDXGIFactory1
to
IDXGIFactory2
:
{
err
:
?
}
"
)
)
)
;
}
Err
(
err
)
=
>
{
log
:
:
warn
!
(
"
Failed
to
cast
IDXGIFactory1
to
IDXGIFactory2
:
{
:
?
}
"
err
)
;
}
}
Ok
(
(
lib_dxgi
DxgiFactory
:
:
Factory1
(
factory1
)
)
)
}
