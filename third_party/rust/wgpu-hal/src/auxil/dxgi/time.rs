#
!
[
allow
(
dead_code
)
]
use
std
:
:
mem
;
use
winapi
:
:
um
:
:
{
profileapi
:
:
{
QueryPerformanceCounter
QueryPerformanceFrequency
}
winnt
:
:
LARGE_INTEGER
}
;
pub
enum
PresentationTimer
{
Dxgi
{
frequency
:
u64
}
#
[
allow
(
non_snake_case
)
]
IPresentationManager
{
fnQueryInterruptTimePrecise
:
unsafe
extern
"
system
"
fn
(
*
mut
winapi
:
:
ctypes
:
:
c_ulonglong
)
}
}
impl
std
:
:
fmt
:
:
Debug
for
PresentationTimer
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
std
:
:
fmt
:
:
Result
{
match
*
self
{
Self
:
:
Dxgi
{
frequency
}
=
>
f
.
debug_struct
(
"
DXGI
"
)
.
field
(
"
frequency
"
&
frequency
)
.
finish
(
)
Self
:
:
IPresentationManager
{
fnQueryInterruptTimePrecise
}
=
>
f
.
debug_struct
(
"
IPresentationManager
"
)
.
field
(
"
QueryInterruptTimePrecise
"
&
(
fnQueryInterruptTimePrecise
as
usize
)
)
.
finish
(
)
}
}
}
impl
PresentationTimer
{
pub
fn
new_dxgi
(
)
-
>
Self
{
let
mut
frequency
:
LARGE_INTEGER
=
unsafe
{
mem
:
:
zeroed
(
)
}
;
let
success
=
unsafe
{
QueryPerformanceFrequency
(
&
mut
frequency
)
}
;
assert_ne
!
(
success
0
)
;
Self
:
:
Dxgi
{
frequency
:
unsafe
{
*
frequency
.
QuadPart
(
)
}
as
u64
}
}
pub
fn
new_ipresentation_manager
(
)
-
>
Self
{
let
kernelbase
=
libloading
:
:
os
:
:
windows
:
:
Library
:
:
open_already_loaded
(
"
kernelbase
.
dll
"
)
.
unwrap
(
)
;
let
ptr
=
unsafe
{
kernelbase
.
get
(
b
"
QueryInterruptTimePrecise
"
)
.
unwrap
(
)
}
;
Self
:
:
IPresentationManager
{
fnQueryInterruptTimePrecise
:
*
ptr
}
}
pub
fn
get_timestamp_ns
(
&
self
)
-
>
u128
{
match
*
self
{
PresentationTimer
:
:
Dxgi
{
frequency
}
=
>
{
let
mut
counter
:
LARGE_INTEGER
=
unsafe
{
mem
:
:
zeroed
(
)
}
;
let
success
=
unsafe
{
QueryPerformanceCounter
(
&
mut
counter
)
}
;
assert_ne
!
(
success
0
)
;
(
unsafe
{
*
counter
.
QuadPart
(
)
}
as
u128
*
1_000_000_000
)
/
frequency
as
u128
}
PresentationTimer
:
:
IPresentationManager
{
fnQueryInterruptTimePrecise
}
=
>
{
let
mut
counter
=
0
;
unsafe
{
fnQueryInterruptTimePrecise
(
&
mut
counter
)
}
;
counter
as
u128
*
100
}
}
}
}
