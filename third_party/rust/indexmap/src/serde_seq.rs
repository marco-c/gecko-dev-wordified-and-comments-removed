use
serde
:
:
de
:
:
{
Deserialize
Deserializer
SeqAccess
Visitor
}
;
use
serde
:
:
ser
:
:
{
Serialize
Serializer
}
;
use
core
:
:
fmt
:
:
{
self
Formatter
}
;
use
core
:
:
hash
:
:
{
BuildHasher
Hash
}
;
use
core
:
:
marker
:
:
PhantomData
;
use
crate
:
:
IndexMap
;
pub
fn
serialize
<
K
V
S
T
>
(
map
:
&
IndexMap
<
K
V
S
>
serializer
:
T
)
-
>
Result
<
T
:
:
Ok
T
:
:
Error
>
where
K
:
Serialize
+
Hash
+
Eq
V
:
Serialize
S
:
BuildHasher
T
:
Serializer
{
serializer
.
collect_seq
(
map
)
}
struct
SeqVisitor
<
K
V
S
>
(
PhantomData
<
(
K
V
S
)
>
)
;
impl
<
'
de
K
V
S
>
Visitor
<
'
de
>
for
SeqVisitor
<
K
V
S
>
where
K
:
Deserialize
<
'
de
>
+
Eq
+
Hash
V
:
Deserialize
<
'
de
>
S
:
Default
+
BuildHasher
{
type
Value
=
IndexMap
<
K
V
S
>
;
fn
expecting
(
&
self
formatter
:
&
mut
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
formatter
"
a
sequenced
map
"
)
}
fn
visit_seq
<
A
>
(
self
mut
seq
:
A
)
-
>
Result
<
Self
:
:
Value
A
:
:
Error
>
where
A
:
SeqAccess
<
'
de
>
{
let
capacity
=
seq
.
size_hint
(
)
.
unwrap_or
(
0
)
;
let
mut
map
=
IndexMap
:
:
with_capacity_and_hasher
(
capacity
S
:
:
default
(
)
)
;
while
let
Some
(
(
key
value
)
)
=
seq
.
next_element
(
)
?
{
map
.
insert
(
key
value
)
;
}
Ok
(
map
)
}
}
pub
fn
deserialize
<
'
de
D
K
V
S
>
(
deserializer
:
D
)
-
>
Result
<
IndexMap
<
K
V
S
>
D
:
:
Error
>
where
D
:
Deserializer
<
'
de
>
K
:
Deserialize
<
'
de
>
+
Eq
+
Hash
V
:
Deserialize
<
'
de
>
S
:
Default
+
BuildHasher
{
deserializer
.
deserialize_seq
(
SeqVisitor
(
PhantomData
)
)
}
