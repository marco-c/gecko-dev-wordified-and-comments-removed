use
crate
:
:
crypto
:
:
{
self
HmacKey
}
;
#
[
derive
(
Clone
Copy
PartialEq
PartialOrd
Eq
Ord
Hash
Debug
)
]
#
[
non_exhaustive
]
pub
enum
DigestAlgorithm
{
Sha256
Sha384
Sha512
}
pub
struct
Key
(
Box
<
dyn
HmacKey
>
)
;
impl
Key
{
pub
fn
new
<
B
>
(
key
:
B
algorithm
:
DigestAlgorithm
)
-
>
crate
:
:
Result
<
Key
>
where
B
:
AsRef
<
[
u8
]
>
{
Ok
(
Key
(
crypto
:
:
new_key
(
algorithm
key
.
as_ref
(
)
)
?
)
)
}
pub
fn
sign
(
&
self
data
:
&
[
u8
]
)
-
>
crate
:
:
Result
<
Vec
<
u8
>
>
{
Ok
(
self
.
0
.
sign
(
data
)
?
)
}
}
pub
struct
Credentials
{
pub
id
:
String
pub
key
:
Key
}
#
[
cfg
(
all
(
test
any
(
feature
=
"
use_ring
"
feature
=
"
use_openssl
"
)
)
)
]
mod
test
{
use
super
:
:
*
;
#
[
test
]
fn
test_new_sha256
(
)
{
let
key
=
vec
!
[
77u8
;
32
]
;
Key
:
:
new
(
key
DigestAlgorithm
:
:
Sha256
)
.
unwrap
(
)
;
}
#
[
test
]
fn
test_new_sha256_bad_length
(
)
{
let
key
=
vec
!
[
0u8
;
99
]
;
Key
:
:
new
(
key
DigestAlgorithm
:
:
Sha256
)
.
unwrap
(
)
;
}
}
