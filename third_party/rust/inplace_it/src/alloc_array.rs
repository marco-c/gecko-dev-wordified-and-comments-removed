use
crate
:
:
guards
:
:
UninitializedSliceMemoryGuard
;
use
std
:
:
mem
:
:
MaybeUninit
;
use
crate
:
:
try_inplace_array
;
pub
fn
alloc_array
<
T
R
Consumer
:
FnOnce
(
UninitializedSliceMemoryGuard
<
T
>
)
-
>
R
>
(
size
:
usize
consumer
:
Consumer
)
-
>
R
{
unsafe
{
let
mut
memory_holder
=
Vec
:
:
<
MaybeUninit
<
T
>
>
:
:
with_capacity
(
size
)
;
memory_holder
.
set_len
(
size
)
;
let
result
=
consumer
(
UninitializedSliceMemoryGuard
:
:
new
(
&
mut
*
memory_holder
)
)
;
memory_holder
.
set_len
(
0
)
;
result
}
}
pub
fn
inplace_or_alloc_array
<
T
R
Consumer
>
(
size
:
usize
consumer
:
Consumer
)
-
>
R
where
Consumer
:
FnOnce
(
UninitializedSliceMemoryGuard
<
T
>
)
-
>
R
{
match
try_inplace_array
(
size
consumer
)
{
Ok
(
result
)
=
>
result
Err
(
consumer
)
=
>
alloc_array
(
size
consumer
)
}
}
