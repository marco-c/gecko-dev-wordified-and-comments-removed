use
darling
:
:
{
Error
FromDeriveInput
FromMeta
}
;
use
syn
:
:
parse_quote
;
#
[
derive
(
Debug
FromMeta
PartialEq
Eq
)
]
enum
Volume
{
Normal
#
[
darling
(
word
)
]
Low
High
#
[
darling
(
rename
=
"
dB
"
)
]
Decibels
(
u8
)
}
impl
Default
for
Volume
{
fn
default
(
)
-
>
Self
{
Volume
:
:
Normal
}
}
#
[
derive
(
Debug
FromDeriveInput
)
]
#
[
darling
(
attributes
(
play
)
)
]
struct
PlayReceiver
{
#
[
darling
(
default
)
]
volume
:
Volume
}
fn
main
(
)
{
let
missing_volume
=
PlayReceiver
:
:
from_derive_input
(
&
parse_quote
!
{
#
[
play
]
struct
Player
;
}
)
.
unwrap
(
)
;
assert_eq
!
(
Volume
:
:
Normal
missing_volume
.
volume
)
;
let
empty_volume
=
PlayReceiver
:
:
from_derive_input
(
&
parse_quote
!
{
#
[
play
(
volume
)
]
struct
Player
;
}
)
.
unwrap
(
)
;
assert_eq
!
(
Volume
:
:
Low
empty_volume
.
volume
)
;
let
unit_variant_volume
=
PlayReceiver
:
:
from_derive_input
(
&
parse_quote
!
{
#
[
play
(
volume
(
high
)
)
]
struct
Player
;
}
)
.
unwrap
(
)
;
assert_eq
!
(
Volume
:
:
High
unit_variant_volume
.
volume
)
;
let
newtype_volume
=
PlayReceiver
:
:
from_derive_input
(
&
parse_quote
!
{
#
[
play
(
volume
(
dB
=
100
)
)
]
struct
Player
;
}
)
.
unwrap
(
)
;
assert_eq
!
(
Volume
:
:
Decibels
(
100
)
newtype_volume
.
volume
)
;
let
err
=
PlayReceiver
:
:
from_derive_input
(
&
parse_quote
!
{
#
[
play
(
volume
(
low
dB
=
20
)
)
]
struct
Player
;
}
)
.
unwrap_err
(
)
;
assert_eq
!
(
err
.
to_string
(
)
Error
:
:
too_many_items
(
1
)
.
at
(
"
volume
"
)
.
to_string
(
)
)
;
}
