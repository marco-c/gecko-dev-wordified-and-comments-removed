use
darling
:
:
FromDeriveInput
;
use
syn
:
:
{
parse_quote
Ident
LitStr
Path
}
;
#
[
derive
(
Debug
FromDeriveInput
)
]
#
[
darling
(
supports
(
struct_unit
)
attributes
(
bar
)
)
]
pub
struct
Bar
{
pub
ident
:
Ident
pub
st
:
Path
pub
file
:
LitStr
}
#
[
test
]
fn
non_meta_attribute_gets_own_error
(
)
{
let
di
=
parse_quote
!
{
#
[
derive
(
Bar
)
]
#
[
bar
(
file
=
"
motors
/
example_6
.
csv
"
st
=
RocketEngine
)
]
pub
struct
EstesC6
;
}
;
let
errors
:
darling
:
:
Error
=
Bar
:
:
from_derive_input
(
&
di
)
.
unwrap_err
(
)
.
flatten
(
)
;
assert_eq
!
(
3
errors
.
len
(
)
)
;
assert
!
(
errors
.
into_iter
(
)
.
any
(
|
e
|
e
.
to_string
(
)
.
contains
(
"
expected
lit
"
)
)
)
;
}
#
[
test
]
fn
non_meta_attribute_does_not_block_others
(
)
{
let
di
=
parse_quote
!
{
#
[
derive
(
Bar
)
]
#
[
bar
(
st
=
RocketEngine
)
]
#
[
bar
(
file
=
"
motors
/
example_6
.
csv
"
)
]
pub
struct
EstesC6
;
}
;
let
errors
:
darling
:
:
Error
=
Bar
:
:
from_derive_input
(
&
di
)
.
unwrap_err
(
)
.
flatten
(
)
;
assert_eq
!
(
2
errors
.
len
(
)
)
;
assert
!
(
errors
.
into_iter
(
)
.
any
(
|
e
|
e
.
to_string
(
)
.
contains
(
"
expected
lit
"
)
)
)
;
}
