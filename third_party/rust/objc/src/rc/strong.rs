use
std
:
:
fmt
;
use
std
:
:
mem
;
use
std
:
:
ops
:
:
Deref
;
use
runtime
:
:
{
Object
self
}
;
use
super
:
:
WeakPtr
;
pub
struct
StrongPtr
(
*
mut
Object
)
;
impl
StrongPtr
{
pub
unsafe
fn
new
(
ptr
:
*
mut
Object
)
-
>
Self
{
StrongPtr
(
ptr
)
}
pub
unsafe
fn
retain
(
ptr
:
*
mut
Object
)
-
>
Self
{
StrongPtr
(
runtime
:
:
objc_retain
(
ptr
)
)
}
pub
fn
autorelease
(
self
)
-
>
*
mut
Object
{
let
ptr
=
self
.
0
;
mem
:
:
forget
(
self
)
;
unsafe
{
runtime
:
:
objc_autorelease
(
ptr
)
;
}
ptr
}
pub
fn
weak
(
&
self
)
-
>
WeakPtr
{
unsafe
{
WeakPtr
:
:
new
(
self
.
0
)
}
}
}
impl
Drop
for
StrongPtr
{
fn
drop
(
&
mut
self
)
{
unsafe
{
runtime
:
:
objc_release
(
self
.
0
)
;
}
}
}
impl
Clone
for
StrongPtr
{
fn
clone
(
&
self
)
-
>
StrongPtr
{
unsafe
{
StrongPtr
:
:
retain
(
self
.
0
)
}
}
}
impl
Deref
for
StrongPtr
{
type
Target
=
*
mut
Object
;
fn
deref
(
&
self
)
-
>
&
*
mut
Object
{
&
self
.
0
}
}
impl
fmt
:
:
Pointer
for
StrongPtr
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
:
:
Pointer
:
:
fmt
(
&
self
.
0
f
)
}
}
