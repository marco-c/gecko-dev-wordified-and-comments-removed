use
std
:
:
cell
:
:
UnsafeCell
;
use
std
:
:
ptr
;
use
runtime
:
:
{
Object
self
}
;
use
super
:
:
StrongPtr
;
pub
struct
WeakPtr
(
Box
<
UnsafeCell
<
*
mut
Object
>
>
)
;
impl
WeakPtr
{
pub
unsafe
fn
new
(
obj
:
*
mut
Object
)
-
>
Self
{
let
ptr
=
Box
:
:
new
(
UnsafeCell
:
:
new
(
ptr
:
:
null_mut
(
)
)
)
;
runtime
:
:
objc_initWeak
(
ptr
.
get
(
)
obj
)
;
WeakPtr
(
ptr
)
}
pub
fn
load
(
&
self
)
-
>
StrongPtr
{
unsafe
{
let
ptr
=
runtime
:
:
objc_loadWeakRetained
(
self
.
0
.
get
(
)
)
;
StrongPtr
:
:
new
(
ptr
)
}
}
}
impl
Drop
for
WeakPtr
{
fn
drop
(
&
mut
self
)
{
unsafe
{
runtime
:
:
objc_destroyWeak
(
self
.
0
.
get
(
)
)
;
}
}
}
impl
Clone
for
WeakPtr
{
fn
clone
(
&
self
)
-
>
Self
{
let
ptr
=
Box
:
:
new
(
UnsafeCell
:
:
new
(
ptr
:
:
null_mut
(
)
)
)
;
unsafe
{
runtime
:
:
objc_copyWeak
(
ptr
.
get
(
)
self
.
0
.
get
(
)
)
;
}
WeakPtr
(
ptr
)
}
}
