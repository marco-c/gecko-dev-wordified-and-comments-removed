#
[
macro_use
]
extern
crate
objc
;
use
objc
:
:
Encode
;
use
objc
:
:
rc
:
:
StrongPtr
;
use
objc
:
:
runtime
:
:
{
Class
Object
}
;
fn
main
(
)
{
let
cls
=
class
!
(
NSObject
)
;
println
!
(
"
NSObject
size
:
{
}
"
cls
.
instance_size
(
)
)
;
println
!
(
"
NSObject
ivars
:
"
)
;
for
ivar
in
cls
.
instance_variables
(
)
.
iter
(
)
{
println
!
(
"
{
}
"
ivar
.
name
(
)
)
;
}
let
obj
=
unsafe
{
let
obj
:
*
mut
Object
=
msg_send
!
[
cls
alloc
]
;
let
obj
:
*
mut
Object
=
msg_send
!
[
obj
init
]
;
StrongPtr
:
:
new
(
obj
)
}
;
println
!
(
"
NSObject
address
:
{
:
p
}
"
obj
)
;
let
isa
:
*
const
Class
=
unsafe
{
*
(
*
*
obj
)
.
get_ivar
(
"
isa
"
)
}
;
println
!
(
"
NSObject
isa
:
{
:
?
}
"
isa
)
;
let
hash_sel
=
sel
!
(
hash
)
;
let
hash_method
=
cls
.
instance_method
(
hash_sel
)
.
unwrap
(
)
;
let
hash_return
=
hash_method
.
return_type
(
)
;
println
!
(
"
-
[
NSObject
hash
]
return
type
:
{
:
?
}
"
hash_return
)
;
assert
!
(
hash_return
=
=
usize
:
:
encode
(
)
)
;
let
hash
:
usize
=
unsafe
{
msg_send
!
[
*
obj
hash
]
}
;
println
!
(
"
NSObject
hash
:
{
}
"
hash
)
;
}
