use
size_hint
;
#
[
derive
(
Debug
Clone
)
]
pub
struct
PutBackN
<
I
:
Iterator
>
{
top
:
Vec
<
I
:
:
Item
>
iter
:
I
}
pub
fn
put_back_n
<
I
>
(
iterable
:
I
)
-
>
PutBackN
<
I
:
:
IntoIter
>
where
I
:
IntoIterator
{
PutBackN
{
top
:
Vec
:
:
new
(
)
iter
:
iterable
.
into_iter
(
)
}
}
impl
<
I
:
Iterator
>
PutBackN
<
I
>
{
#
[
inline
]
pub
fn
put_back
(
&
mut
self
x
:
I
:
:
Item
)
{
self
.
top
.
push
(
x
)
;
}
}
impl
<
I
:
Iterator
>
Iterator
for
PutBackN
<
I
>
{
type
Item
=
I
:
:
Item
;
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
I
:
:
Item
>
{
if
self
.
top
.
is_empty
(
)
{
self
.
iter
.
next
(
)
}
else
{
self
.
top
.
pop
(
)
}
}
#
[
inline
]
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
size_hint
:
:
add_scalar
(
self
.
iter
.
size_hint
(
)
self
.
top
.
len
(
)
)
}
}
