use
{
Incoming
UnixStream
}
;
use
tokio_reactor
:
:
{
Handle
PollEvented
}
;
use
futures
:
:
{
Async
Poll
}
;
use
mio
:
:
Ready
;
use
mio_uds
;
use
std
:
:
fmt
;
use
std
:
:
io
;
use
std
:
:
os
:
:
unix
:
:
io
:
:
{
AsRawFd
RawFd
}
;
use
std
:
:
os
:
:
unix
:
:
net
:
:
{
self
SocketAddr
}
;
use
std
:
:
path
:
:
Path
;
pub
struct
UnixListener
{
io
:
PollEvented
<
mio_uds
:
:
UnixListener
>
}
impl
UnixListener
{
pub
fn
bind
<
P
>
(
path
:
P
)
-
>
io
:
:
Result
<
UnixListener
>
where
P
:
AsRef
<
Path
>
{
let
listener
=
mio_uds
:
:
UnixListener
:
:
bind
(
path
)
?
;
let
io
=
PollEvented
:
:
new
(
listener
)
;
Ok
(
UnixListener
{
io
}
)
}
pub
fn
from_std
(
listener
:
net
:
:
UnixListener
handle
:
&
Handle
)
-
>
io
:
:
Result
<
UnixListener
>
{
let
listener
=
mio_uds
:
:
UnixListener
:
:
from_listener
(
listener
)
?
;
let
io
=
PollEvented
:
:
new_with_handle
(
listener
handle
)
?
;
Ok
(
UnixListener
{
io
}
)
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
get_ref
(
)
.
local_addr
(
)
}
pub
fn
poll_read_ready
(
&
self
ready
:
Ready
)
-
>
Poll
<
Ready
io
:
:
Error
>
{
self
.
io
.
poll_read_ready
(
ready
)
}
pub
fn
take_error
(
&
self
)
-
>
io
:
:
Result
<
Option
<
io
:
:
Error
>
>
{
self
.
io
.
get_ref
(
)
.
take_error
(
)
}
pub
fn
poll_accept
(
&
self
)
-
>
Poll
<
(
UnixStream
SocketAddr
)
io
:
:
Error
>
{
let
(
io
addr
)
=
try_ready
!
(
self
.
poll_accept_std
(
)
)
;
let
io
=
mio_uds
:
:
UnixStream
:
:
from_stream
(
io
)
?
;
Ok
(
(
UnixStream
:
:
new
(
io
)
addr
)
.
into
(
)
)
}
pub
fn
poll_accept_std
(
&
self
)
-
>
Poll
<
(
net
:
:
UnixStream
SocketAddr
)
io
:
:
Error
>
{
loop
{
try_ready
!
(
self
.
io
.
poll_read_ready
(
Ready
:
:
readable
(
)
)
)
;
match
self
.
io
.
get_ref
(
)
.
accept_std
(
)
{
Ok
(
None
)
=
>
{
self
.
io
.
clear_read_ready
(
Ready
:
:
readable
(
)
)
?
;
return
Ok
(
Async
:
:
NotReady
)
;
}
Ok
(
Some
(
(
sock
addr
)
)
)
=
>
{
return
Ok
(
Async
:
:
Ready
(
(
sock
addr
)
)
)
;
}
Err
(
ref
err
)
if
err
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_read_ready
(
Ready
:
:
readable
(
)
)
?
;
return
Ok
(
Async
:
:
NotReady
)
;
}
Err
(
err
)
=
>
return
Err
(
err
)
}
}
}
pub
fn
incoming
(
self
)
-
>
Incoming
{
Incoming
:
:
new
(
self
)
}
}
impl
fmt
:
:
Debug
for
UnixListener
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
io
.
get_ref
(
)
.
fmt
(
f
)
}
}
impl
AsRawFd
for
UnixListener
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
io
.
get_ref
(
)
.
as_raw_fd
(
)
}
}
