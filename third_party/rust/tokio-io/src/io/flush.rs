use
std
:
:
io
;
use
futures
:
:
{
Poll
Future
Async
}
;
use
AsyncWrite
;
#
[
derive
(
Debug
)
]
pub
struct
Flush
<
A
>
{
a
:
Option
<
A
>
}
pub
fn
flush
<
A
>
(
a
:
A
)
-
>
Flush
<
A
>
where
A
:
AsyncWrite
{
Flush
{
a
:
Some
(
a
)
}
}
impl
<
A
>
Future
for
Flush
<
A
>
where
A
:
AsyncWrite
{
type
Item
=
A
;
type
Error
=
io
:
:
Error
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
A
io
:
:
Error
>
{
try_ready
!
(
self
.
a
.
as_mut
(
)
.
unwrap
(
)
.
poll_flush
(
)
)
;
Ok
(
Async
:
:
Ready
(
self
.
a
.
take
(
)
.
unwrap
(
)
)
)
}
}
