use
bytes
:
:
BufMut
;
use
futures
:
:
{
Async
Poll
}
;
use
std
:
:
io
as
std_io
;
#
[
allow
(
deprecated
)
]
use
codec
:
:
{
Decoder
Encoder
Framed
}
;
use
split
:
:
{
ReadHalf
WriteHalf
}
;
use
{
framed
split
AsyncWrite
}
;
pub
trait
AsyncRead
:
std_io
:
:
Read
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
buf
:
&
mut
[
u8
]
)
-
>
bool
{
for
i
in
0
.
.
buf
.
len
(
)
{
buf
[
i
]
=
0
;
}
true
}
fn
poll_read
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
usize
std_io
:
:
Error
>
{
match
self
.
read
(
buf
)
{
Ok
(
t
)
=
>
Ok
(
Async
:
:
Ready
(
t
)
)
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
std_io
:
:
ErrorKind
:
:
WouldBlock
=
>
return
Ok
(
Async
:
:
NotReady
)
Err
(
e
)
=
>
return
Err
(
e
.
into
(
)
)
}
}
fn
read_buf
<
B
:
BufMut
>
(
&
mut
self
buf
:
&
mut
B
)
-
>
Poll
<
usize
std_io
:
:
Error
>
where
Self
:
Sized
{
if
!
buf
.
has_remaining_mut
(
)
{
return
Ok
(
Async
:
:
Ready
(
0
)
)
;
}
unsafe
{
let
n
=
{
let
b
=
buf
.
bytes_mut
(
)
;
self
.
prepare_uninitialized_buffer
(
b
)
;
try_ready
!
(
self
.
poll_read
(
b
)
)
}
;
buf
.
advance_mut
(
n
)
;
Ok
(
Async
:
:
Ready
(
n
)
)
}
}
#
[
deprecated
(
since
=
"
0
.
1
.
7
"
note
=
"
Use
tokio_codec
:
:
Decoder
:
:
framed
instead
"
)
]
#
[
allow
(
deprecated
)
]
fn
framed
<
T
:
Encoder
+
Decoder
>
(
self
codec
:
T
)
-
>
Framed
<
Self
T
>
where
Self
:
AsyncWrite
+
Sized
{
framed
:
:
framed
(
self
codec
)
}
fn
split
(
self
)
-
>
(
ReadHalf
<
Self
>
WriteHalf
<
Self
>
)
where
Self
:
AsyncWrite
+
Sized
{
split
:
:
split
(
self
)
}
}
impl
<
T
:
?
Sized
+
AsyncRead
>
AsyncRead
for
Box
<
T
>
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
buf
:
&
mut
[
u8
]
)
-
>
bool
{
(
*
*
self
)
.
prepare_uninitialized_buffer
(
buf
)
}
}
impl
<
'
a
T
:
?
Sized
+
AsyncRead
>
AsyncRead
for
&
'
a
mut
T
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
buf
:
&
mut
[
u8
]
)
-
>
bool
{
(
*
*
self
)
.
prepare_uninitialized_buffer
(
buf
)
}
}
impl
<
'
a
>
AsyncRead
for
&
'
a
[
u8
]
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
_buf
:
&
mut
[
u8
]
)
-
>
bool
{
false
}
}
