#
!
[
deny
(
missing_docs
missing_debug_implementations
)
]
#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
tokio
-
io
/
0
.
1
.
13
"
)
]
#
[
macro_use
]
extern
crate
log
;
#
[
macro_use
]
extern
crate
futures
;
extern
crate
bytes
;
use
std
:
:
io
as
std_io
;
use
futures
:
:
{
Future
Stream
}
;
pub
type
IoFuture
<
T
>
=
Box
<
dyn
Future
<
Item
=
T
Error
=
std_io
:
:
Error
>
+
Send
>
;
pub
type
IoStream
<
T
>
=
Box
<
dyn
Stream
<
Item
=
T
Error
=
std_io
:
:
Error
>
+
Send
>
;
#
[
macro_export
]
macro_rules
!
try_nb
{
(
e
:
expr
)
=
>
{
match
e
{
Ok
(
t
)
=
>
t
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
:
:
std
:
:
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
return
Ok
(
:
:
futures
:
:
Async
:
:
NotReady
)
;
}
Err
(
e
)
=
>
return
Err
(
e
.
into
(
)
)
}
}
;
}
pub
mod
codec
;
pub
mod
io
;
pub
mod
_tokio_codec
;
mod
allow_std
;
mod
async_read
;
mod
async_write
;
mod
framed
;
mod
framed_read
;
mod
framed_write
;
mod
length_delimited
;
mod
lines
;
mod
split
;
mod
window
;
pub
use
self
:
:
async_read
:
:
AsyncRead
;
pub
use
self
:
:
async_write
:
:
AsyncWrite
;
fn
_assert_objects
(
)
{
fn
_assert
<
T
>
(
)
{
}
_assert
:
:
<
Box
<
dyn
AsyncRead
>
>
(
)
;
_assert
:
:
<
Box
<
dyn
AsyncWrite
>
>
(
)
;
}
