#
!
[
crate_name
=
"
cssparser
"
]
#
!
[
crate_type
=
"
rlib
"
]
#
!
[
cfg_attr
(
feature
=
"
bench
"
feature
(
test
)
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
recursion_limit
=
"
200
"
]
extern
crate
dtoa_short
;
extern
crate
itoa
;
#
[
macro_use
]
extern
crate
cssparser_macros
;
#
[
macro_use
]
extern
crate
matches
;
#
[
macro_use
]
extern
crate
procedural_masquerade
;
#
[
doc
(
hidden
)
]
pub
extern
crate
phf
as
_internal__phf
;
#
[
cfg
(
test
)
]
extern
crate
encoding_rs
;
#
[
cfg
(
test
)
]
extern
crate
difference
;
#
[
cfg
(
test
)
]
extern
crate
rustc_serialize
;
#
[
cfg
(
feature
=
"
serde
"
)
]
extern
crate
serde
;
#
[
cfg
(
feature
=
"
heapsize
"
)
]
#
[
macro_use
]
extern
crate
heapsize
;
extern
crate
smallvec
;
pub
use
cssparser_macros
:
:
*
;
pub
use
tokenizer
:
:
{
Token
SourcePosition
SourceLocation
}
;
pub
use
rules_and_declarations
:
:
{
parse_important
}
;
pub
use
rules_and_declarations
:
:
{
DeclarationParser
DeclarationListParser
parse_one_declaration
}
;
pub
use
rules_and_declarations
:
:
{
RuleListParser
parse_one_rule
}
;
pub
use
rules_and_declarations
:
:
{
AtRuleType
QualifiedRuleParser
AtRuleParser
}
;
pub
use
from_bytes
:
:
{
stylesheet_encoding
EncodingSupport
}
;
pub
use
color
:
:
{
RGBA
Color
parse_color_keyword
AngleOrNumber
NumberOrPercentage
ColorComponentParser
}
;
pub
use
nth
:
:
parse_nth
;
pub
use
serializer
:
:
{
ToCss
CssStringWriter
serialize_identifier
serialize_name
serialize_string
TokenSerializationType
}
;
pub
use
parser
:
:
{
Parser
Delimiter
Delimiters
ParserState
ParserInput
}
;
pub
use
parser
:
:
{
ParseError
ParseErrorKind
BasicParseError
BasicParseErrorKind
}
;
pub
use
unicode_range
:
:
UnicodeRange
;
pub
use
cow_rc_str
:
:
CowRcStr
;
#
[
doc
(
hidden
)
]
pub
use
macros
:
:
_internal__to_lowercase
;
mod
cssparser
{
pub
use
_internal__phf
;
}
#
[
macro_use
]
mod
macros
;
mod
rules_and_declarations
;
#
[
cfg
(
feature
=
"
dummy_match_byte
"
)
]
mod
tokenizer
;
#
[
cfg
(
not
(
feature
=
"
dummy_match_byte
"
)
)
]
mod
tokenizer
{
include
!
(
concat
!
(
env
!
(
"
OUT_DIR
"
)
"
/
tokenizer
.
rs
"
)
)
;
}
mod
parser
;
mod
from_bytes
;
mod
color
;
mod
nth
;
mod
serializer
;
mod
unicode_range
;
mod
cow_rc_str
;
#
[
cfg
(
test
)
]
mod
tests
;
#
[
cfg
(
test
)
]
mod
size_of_tests
;
