#
!
[
crate_name
=
"
cssparser
"
]
#
!
[
crate_type
=
"
rlib
"
]
#
!
[
cfg_attr
(
feature
=
"
bench
"
feature
(
test
)
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
recursion_limit
=
"
200
"
]
pub
use
crate
:
:
cow_rc_str
:
:
CowRcStr
;
pub
use
crate
:
:
from_bytes
:
:
{
stylesheet_encoding
EncodingSupport
}
;
#
[
doc
(
hidden
)
]
pub
use
crate
:
:
macros
:
:
{
_cssparser_internal_create_uninit_array
_cssparser_internal_to_lowercase
}
;
pub
use
crate
:
:
nth
:
:
parse_nth
;
pub
use
crate
:
:
parser
:
:
{
BasicParseError
BasicParseErrorKind
ParseError
ParseErrorKind
}
;
pub
use
crate
:
:
parser
:
:
{
Delimiter
Delimiters
Parser
ParserInput
ParserState
}
;
pub
use
crate
:
:
rules_and_declarations
:
:
{
parse_important
parse_one_declaration
}
;
pub
use
crate
:
:
rules_and_declarations
:
:
{
parse_one_rule
StyleSheetParser
}
;
pub
use
crate
:
:
rules_and_declarations
:
:
{
AtRuleParser
QualifiedRuleParser
}
;
pub
use
crate
:
:
rules_and_declarations
:
:
{
DeclarationParser
RuleBodyItemParser
RuleBodyParser
}
;
pub
use
crate
:
:
serializer
:
:
{
serialize_identifier
serialize_name
serialize_string
}
;
pub
use
crate
:
:
serializer
:
:
{
CssStringWriter
ToCss
TokenSerializationType
}
;
pub
use
crate
:
:
tokenizer
:
:
{
SourceLocation
SourcePosition
Token
}
;
pub
use
crate
:
:
unicode_range
:
:
UnicodeRange
;
pub
use
cssparser_macros
:
:
*
;
#
[
doc
(
hidden
)
]
pub
use
phf
as
_cssparser_internal_phf
;
#
[
macro_use
]
mod
macros
;
mod
rules_and_declarations
;
mod
tokenizer
;
pub
mod
color
;
mod
cow_rc_str
;
mod
from_bytes
;
mod
nth
;
mod
parser
;
mod
serializer
;
mod
unicode_range
;
#
[
cfg
(
test
)
]
mod
size_of_tests
;
#
[
cfg
(
test
)
]
mod
tests
;
