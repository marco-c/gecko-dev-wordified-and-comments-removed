use
super
:
:
{
SendDgram
RecvDgram
}
;
use
std
:
:
io
;
use
std
:
:
net
:
:
{
self
SocketAddr
Ipv4Addr
Ipv6Addr
}
;
use
std
:
:
fmt
;
use
futures
:
:
{
Async
Poll
}
;
use
mio
;
use
tokio_reactor
:
:
{
Handle
PollEvented
}
;
pub
struct
UdpSocket
{
io
:
PollEvented
<
mio
:
:
net
:
:
UdpSocket
>
}
impl
UdpSocket
{
pub
fn
bind
(
addr
:
&
SocketAddr
)
-
>
io
:
:
Result
<
UdpSocket
>
{
mio
:
:
net
:
:
UdpSocket
:
:
bind
(
addr
)
.
map
(
UdpSocket
:
:
new
)
}
fn
new
(
socket
:
mio
:
:
net
:
:
UdpSocket
)
-
>
UdpSocket
{
let
io
=
PollEvented
:
:
new
(
socket
)
;
UdpSocket
{
io
:
io
}
}
pub
fn
from_std
(
socket
:
net
:
:
UdpSocket
handle
:
&
Handle
)
-
>
io
:
:
Result
<
UdpSocket
>
{
let
io
=
mio
:
:
net
:
:
UdpSocket
:
:
from_socket
(
socket
)
?
;
let
io
=
PollEvented
:
:
new_with_handle
(
io
handle
)
?
;
Ok
(
UdpSocket
{
io
}
)
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
get_ref
(
)
.
local_addr
(
)
}
pub
fn
connect
(
&
self
addr
:
&
SocketAddr
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
connect
(
*
addr
)
}
#
[
deprecated
(
since
=
"
0
.
1
.
2
"
note
=
"
use
poll_send
instead
"
)
]
#
[
doc
(
hidden
)
]
pub
fn
send
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
match
self
.
poll_send
(
buf
)
?
{
Async
:
:
Ready
(
n
)
=
>
Ok
(
n
)
Async
:
:
NotReady
=
>
Err
(
io
:
:
ErrorKind
:
:
WouldBlock
.
into
(
)
)
}
}
pub
fn
poll_send
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
Poll
<
usize
io
:
:
Error
>
{
try_ready
!
(
self
.
io
.
poll_write_ready
(
)
)
;
match
self
.
io
.
get_ref
(
)
.
send
(
buf
)
{
Ok
(
n
)
=
>
Ok
(
n
.
into
(
)
)
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_write_ready
(
)
?
;
Ok
(
Async
:
:
NotReady
)
}
Err
(
e
)
=
>
Err
(
e
)
}
}
#
[
deprecated
(
since
=
"
0
.
1
.
2
"
note
=
"
use
poll_recv
instead
"
)
]
#
[
doc
(
hidden
)
]
pub
fn
recv
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
match
self
.
poll_recv
(
buf
)
?
{
Async
:
:
Ready
(
n
)
=
>
Ok
(
n
)
Async
:
:
NotReady
=
>
Err
(
io
:
:
ErrorKind
:
:
WouldBlock
.
into
(
)
)
}
}
pub
fn
poll_recv
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
usize
io
:
:
Error
>
{
try_ready
!
(
self
.
io
.
poll_read_ready
(
mio
:
:
Ready
:
:
readable
(
)
)
)
;
match
self
.
io
.
get_ref
(
)
.
recv
(
buf
)
{
Ok
(
n
)
=
>
Ok
(
n
.
into
(
)
)
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_read_ready
(
mio
:
:
Ready
:
:
readable
(
)
)
?
;
Ok
(
Async
:
:
NotReady
)
}
Err
(
e
)
=
>
Err
(
e
)
}
}
#
[
deprecated
(
since
=
"
0
.
1
.
2
"
note
=
"
use
poll_send_to
instead
"
)
]
#
[
doc
(
hidden
)
]
pub
fn
send_to
(
&
mut
self
buf
:
&
[
u8
]
target
:
&
SocketAddr
)
-
>
io
:
:
Result
<
usize
>
{
match
self
.
poll_send_to
(
buf
target
)
?
{
Async
:
:
Ready
(
n
)
=
>
Ok
(
n
)
Async
:
:
NotReady
=
>
Err
(
io
:
:
ErrorKind
:
:
WouldBlock
.
into
(
)
)
}
}
pub
fn
poll_send_to
(
&
mut
self
buf
:
&
[
u8
]
target
:
&
SocketAddr
)
-
>
Poll
<
usize
io
:
:
Error
>
{
try_ready
!
(
self
.
io
.
poll_write_ready
(
)
)
;
match
self
.
io
.
get_ref
(
)
.
send_to
(
buf
target
)
{
Ok
(
n
)
=
>
Ok
(
n
.
into
(
)
)
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_write_ready
(
)
?
;
Ok
(
Async
:
:
NotReady
)
}
Err
(
e
)
=
>
Err
(
e
)
}
}
pub
fn
send_dgram
<
T
>
(
self
buf
:
T
addr
:
&
SocketAddr
)
-
>
SendDgram
<
T
>
where
T
:
AsRef
<
[
u8
]
>
{
SendDgram
:
:
new
(
self
buf
*
addr
)
}
#
[
deprecated
(
since
=
"
0
.
1
.
2
"
note
=
"
use
poll_recv_from
instead
"
)
]
#
[
doc
(
hidden
)
]
pub
fn
recv_from
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
(
usize
SocketAddr
)
>
{
match
self
.
poll_recv_from
(
buf
)
?
{
Async
:
:
Ready
(
ret
)
=
>
Ok
(
ret
)
Async
:
:
NotReady
=
>
Err
(
io
:
:
ErrorKind
:
:
WouldBlock
.
into
(
)
)
}
}
pub
fn
poll_recv_from
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
(
usize
SocketAddr
)
io
:
:
Error
>
{
try_ready
!
(
self
.
io
.
poll_read_ready
(
mio
:
:
Ready
:
:
readable
(
)
)
)
;
match
self
.
io
.
get_ref
(
)
.
recv_from
(
buf
)
{
Ok
(
n
)
=
>
Ok
(
n
.
into
(
)
)
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_read_ready
(
mio
:
:
Ready
:
:
readable
(
)
)
?
;
Ok
(
Async
:
:
NotReady
)
}
Err
(
e
)
=
>
Err
(
e
)
}
}
pub
fn
recv_dgram
<
T
>
(
self
buf
:
T
)
-
>
RecvDgram
<
T
>
where
T
:
AsMut
<
[
u8
]
>
{
RecvDgram
:
:
new
(
self
buf
)
}
pub
fn
broadcast
(
&
self
)
-
>
io
:
:
Result
<
bool
>
{
self
.
io
.
get_ref
(
)
.
broadcast
(
)
}
pub
fn
set_broadcast
(
&
self
on
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
set_broadcast
(
on
)
}
pub
fn
multicast_loop_v4
(
&
self
)
-
>
io
:
:
Result
<
bool
>
{
self
.
io
.
get_ref
(
)
.
multicast_loop_v4
(
)
}
pub
fn
set_multicast_loop_v4
(
&
self
on
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
set_multicast_loop_v4
(
on
)
}
pub
fn
multicast_ttl_v4
(
&
self
)
-
>
io
:
:
Result
<
u32
>
{
self
.
io
.
get_ref
(
)
.
multicast_ttl_v4
(
)
}
pub
fn
set_multicast_ttl_v4
(
&
self
ttl
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
set_multicast_ttl_v4
(
ttl
)
}
pub
fn
multicast_loop_v6
(
&
self
)
-
>
io
:
:
Result
<
bool
>
{
self
.
io
.
get_ref
(
)
.
multicast_loop_v6
(
)
}
pub
fn
set_multicast_loop_v6
(
&
self
on
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
set_multicast_loop_v6
(
on
)
}
pub
fn
ttl
(
&
self
)
-
>
io
:
:
Result
<
u32
>
{
self
.
io
.
get_ref
(
)
.
ttl
(
)
}
pub
fn
set_ttl
(
&
self
ttl
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
set_ttl
(
ttl
)
}
pub
fn
join_multicast_v4
(
&
self
multiaddr
:
&
Ipv4Addr
interface
:
&
Ipv4Addr
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
join_multicast_v4
(
multiaddr
interface
)
}
pub
fn
join_multicast_v6
(
&
self
multiaddr
:
&
Ipv6Addr
interface
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
join_multicast_v6
(
multiaddr
interface
)
}
pub
fn
leave_multicast_v4
(
&
self
multiaddr
:
&
Ipv4Addr
interface
:
&
Ipv4Addr
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
leave_multicast_v4
(
multiaddr
interface
)
}
pub
fn
leave_multicast_v6
(
&
self
multiaddr
:
&
Ipv6Addr
interface
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
leave_multicast_v6
(
multiaddr
interface
)
}
}
impl
fmt
:
:
Debug
for
UdpSocket
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
io
.
get_ref
(
)
.
fmt
(
f
)
}
}
#
[
cfg
(
all
(
unix
)
)
]
mod
sys
{
use
std
:
:
os
:
:
unix
:
:
prelude
:
:
*
;
use
super
:
:
UdpSocket
;
impl
AsRawFd
for
UdpSocket
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
io
.
get_ref
(
)
.
as_raw_fd
(
)
}
}
}
#
[
cfg
(
windows
)
]
mod
sys
{
}
