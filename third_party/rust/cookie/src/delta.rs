use
std
:
:
ops
:
:
{
Deref
DerefMut
}
;
use
std
:
:
hash
:
:
{
Hash
Hasher
}
;
use
std
:
:
borrow
:
:
Borrow
;
use
crate
:
:
Cookie
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
DeltaCookie
{
pub
cookie
:
Cookie
<
'
static
>
pub
removed
:
bool
}
impl
DeltaCookie
{
#
[
inline
]
pub
fn
added
(
cookie
:
Cookie
<
'
static
>
)
-
>
DeltaCookie
{
DeltaCookie
{
cookie
removed
:
false
}
}
#
[
inline
]
pub
fn
removed
(
cookie
:
Cookie
<
'
static
>
)
-
>
DeltaCookie
{
DeltaCookie
{
cookie
removed
:
true
}
}
}
impl
Deref
for
DeltaCookie
{
type
Target
=
Cookie
<
'
static
>
;
fn
deref
(
&
self
)
-
>
&
Cookie
<
'
static
>
{
&
self
.
cookie
}
}
impl
DerefMut
for
DeltaCookie
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
Cookie
<
'
static
>
{
&
mut
self
.
cookie
}
}
impl
PartialEq
for
DeltaCookie
{
fn
eq
(
&
self
other
:
&
DeltaCookie
)
-
>
bool
{
self
.
name
(
)
=
=
other
.
name
(
)
}
}
impl
Eq
for
DeltaCookie
{
}
impl
Hash
for
DeltaCookie
{
fn
hash
<
H
:
Hasher
>
(
&
self
state
:
&
mut
H
)
{
self
.
name
(
)
.
hash
(
state
)
;
}
}
impl
Borrow
<
str
>
for
DeltaCookie
{
fn
borrow
(
&
self
)
-
>
&
str
{
self
.
name
(
)
}
}
