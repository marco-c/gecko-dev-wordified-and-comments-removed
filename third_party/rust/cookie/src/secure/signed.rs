use
secure
:
:
ring
:
:
digest
:
:
{
SHA256
Algorithm
}
;
use
secure
:
:
ring
:
:
hmac
:
:
{
SigningKey
sign
verify_with_own_key
as
verify
}
;
use
secure
:
:
{
base64
Key
}
;
use
{
Cookie
CookieJar
}
;
static
HMAC_DIGEST
:
&
'
static
Algorithm
=
&
SHA256
;
const
BASE64_DIGEST_LEN
:
usize
=
44
;
pub
const
KEY_LEN
:
usize
=
32
;
pub
struct
SignedJar
<
'
a
>
{
parent
:
&
'
a
mut
CookieJar
key
:
SigningKey
}
impl
<
'
a
>
SignedJar
<
'
a
>
{
#
[
doc
(
hidden
)
]
pub
fn
new
(
parent
:
&
'
a
mut
CookieJar
key
:
&
Key
)
-
>
SignedJar
<
'
a
>
{
SignedJar
{
parent
:
parent
key
:
SigningKey
:
:
new
(
HMAC_DIGEST
key
.
signing
(
)
)
}
}
fn
verify
(
&
self
cookie_value
:
&
str
)
-
>
Result
<
String
&
'
static
str
>
{
if
cookie_value
.
len
(
)
<
BASE64_DIGEST_LEN
{
return
Err
(
"
length
of
value
is
<
=
BASE64_DIGEST_LEN
"
)
;
}
let
(
digest_str
value
)
=
cookie_value
.
split_at
(
BASE64_DIGEST_LEN
)
;
let
sig
=
base64
:
:
decode
(
digest_str
)
.
map_err
(
|
_
|
"
bad
base64
digest
"
)
?
;
verify
(
&
self
.
key
value
.
as_bytes
(
)
&
sig
)
.
map
(
|
_
|
value
.
to_string
(
)
)
.
map_err
(
|
_
|
"
value
did
not
verify
"
)
}
pub
fn
get
(
&
self
name
:
&
str
)
-
>
Option
<
Cookie
<
'
static
>
>
{
if
let
Some
(
cookie_ref
)
=
self
.
parent
.
get
(
name
)
{
let
mut
cookie
=
cookie_ref
.
clone
(
)
;
if
let
Ok
(
value
)
=
self
.
verify
(
cookie
.
value
(
)
)
{
cookie
.
set_value
(
value
)
;
return
Some
(
cookie
)
;
}
}
None
}
pub
fn
add
(
&
mut
self
mut
cookie
:
Cookie
<
'
static
>
)
{
let
digest
=
sign
(
&
self
.
key
cookie
.
value
(
)
.
as_bytes
(
)
)
;
let
mut
new_value
=
base64
:
:
encode
(
digest
.
as_ref
(
)
)
;
new_value
.
push_str
(
cookie
.
value
(
)
)
;
cookie
.
set_value
(
new_value
)
;
self
.
parent
.
add
(
cookie
)
;
}
pub
fn
remove
(
&
mut
self
cookie
:
Cookie
<
'
static
>
)
{
self
.
parent
.
remove
(
cookie
)
;
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
{
CookieJar
Cookie
Key
}
;
#
[
test
]
fn
simple
(
)
{
let
key
=
Key
:
:
generate
(
)
;
let
mut
jar
=
CookieJar
:
:
new
(
)
;
assert_simple_behaviour
!
(
jar
jar
.
signed
(
&
key
)
)
;
}
#
[
test
]
fn
private
(
)
{
let
key
=
Key
:
:
generate
(
)
;
let
mut
jar
=
CookieJar
:
:
new
(
)
;
assert_secure_behaviour
!
(
jar
jar
.
signed
(
&
key
)
)
;
}
}
