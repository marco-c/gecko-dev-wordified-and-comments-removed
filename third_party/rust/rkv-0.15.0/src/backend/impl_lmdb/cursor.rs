use
lmdb
:
:
Cursor
;
use
super
:
:
IterImpl
;
use
crate
:
:
backend
:
:
traits
:
:
BackendRoCursor
;
#
[
derive
(
Debug
)
]
pub
struct
RoCursorImpl
<
'
c
>
(
pub
(
crate
)
lmdb
:
:
RoCursor
<
'
c
>
)
;
impl
<
'
c
>
BackendRoCursor
<
'
c
>
for
RoCursorImpl
<
'
c
>
{
type
Iter
=
IterImpl
<
'
c
lmdb
:
:
RoCursor
<
'
c
>
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
Iter
{
IterImpl
:
:
new
(
self
.
0
lmdb
:
:
RoCursor
:
:
iter
)
}
fn
into_iter_from
<
K
>
(
self
key
:
K
)
-
>
Self
:
:
Iter
where
K
:
AsRef
<
[
u8
]
>
+
'
c
{
IterImpl
:
:
new
(
self
.
0
|
cursor
|
cursor
.
iter_from
(
key
)
)
}
fn
into_iter_dup_of
<
K
>
(
self
key
:
K
)
-
>
Self
:
:
Iter
where
K
:
AsRef
<
[
u8
]
>
+
'
c
{
IterImpl
:
:
new
(
self
.
0
|
cursor
|
cursor
.
iter_dup_of
(
key
)
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
RwCursorImpl
<
'
c
>
(
pub
(
crate
)
lmdb
:
:
RwCursor
<
'
c
>
)
;
impl
<
'
c
>
BackendRoCursor
<
'
c
>
for
RwCursorImpl
<
'
c
>
{
type
Iter
=
IterImpl
<
'
c
lmdb
:
:
RwCursor
<
'
c
>
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
Iter
{
IterImpl
:
:
new
(
self
.
0
lmdb
:
:
RwCursor
:
:
iter
)
}
fn
into_iter_from
<
K
>
(
self
key
:
K
)
-
>
Self
:
:
Iter
where
K
:
AsRef
<
[
u8
]
>
+
'
c
{
IterImpl
:
:
new
(
self
.
0
|
cursor
|
cursor
.
iter_from
(
key
)
)
}
fn
into_iter_dup_of
<
K
>
(
self
key
:
K
)
-
>
Self
:
:
Iter
where
K
:
AsRef
<
[
u8
]
>
+
'
c
{
IterImpl
:
:
new
(
self
.
0
|
cursor
|
cursor
.
iter_dup_of
(
key
)
)
}
}
