#
!
[
allow
(
missing_docs
)
]
use
crate
:
:
endian
:
:
{
BigEndian
Endian
U64Bytes
U16
U32
U64
}
;
use
crate
:
:
pod
:
:
Pod
;
pub
const
CPU_ARCH_MASK
:
u32
=
0xff00_0000
;
pub
const
CPU_ARCH_ABI64
:
u32
=
0x0100_0000
;
pub
const
CPU_ARCH_ABI64_32
:
u32
=
0x0200_0000
;
pub
const
CPU_TYPE_ANY
:
u32
=
!
0
;
pub
const
CPU_TYPE_VAX
:
u32
=
1
;
pub
const
CPU_TYPE_MC680X0
:
u32
=
6
;
pub
const
CPU_TYPE_X86
:
u32
=
7
;
pub
const
CPU_TYPE_X86_64
:
u32
=
CPU_TYPE_X86
|
CPU_ARCH_ABI64
;
pub
const
CPU_TYPE_MIPS
:
u32
=
8
;
pub
const
CPU_TYPE_MC98000
:
u32
=
10
;
pub
const
CPU_TYPE_HPPA
:
u32
=
11
;
pub
const
CPU_TYPE_ARM
:
u32
=
12
;
pub
const
CPU_TYPE_ARM64
:
u32
=
CPU_TYPE_ARM
|
CPU_ARCH_ABI64
;
pub
const
CPU_TYPE_ARM64_32
:
u32
=
CPU_TYPE_ARM
|
CPU_ARCH_ABI64_32
;
pub
const
CPU_TYPE_MC88000
:
u32
=
13
;
pub
const
CPU_TYPE_SPARC
:
u32
=
14
;
pub
const
CPU_TYPE_I860
:
u32
=
15
;
pub
const
CPU_TYPE_ALPHA
:
u32
=
16
;
pub
const
CPU_TYPE_POWERPC
:
u32
=
18
;
pub
const
CPU_TYPE_POWERPC64
:
u32
=
CPU_TYPE_POWERPC
|
CPU_ARCH_ABI64
;
pub
const
CPU_SUBTYPE_MASK
:
u32
=
0xff00_0000
;
pub
const
CPU_SUBTYPE_LIB64
:
u32
=
0x8000_0000
;
pub
const
CPU_SUBTYPE_PTRAUTH_ABI
:
u32
=
0x8000_0000
;
pub
const
CPU_SUBTYPE_ANY
:
u32
=
!
0
;
pub
const
CPU_SUBTYPE_MULTIPLE
:
u32
=
!
0
;
pub
const
CPU_SUBTYPE_LITTLE_ENDIAN
:
u32
=
0
;
pub
const
CPU_SUBTYPE_BIG_ENDIAN
:
u32
=
1
;
pub
const
CPU_SUBTYPE_VAX_ALL
:
u32
=
0
;
pub
const
CPU_SUBTYPE_VAX780
:
u32
=
1
;
pub
const
CPU_SUBTYPE_VAX785
:
u32
=
2
;
pub
const
CPU_SUBTYPE_VAX750
:
u32
=
3
;
pub
const
CPU_SUBTYPE_VAX730
:
u32
=
4
;
pub
const
CPU_SUBTYPE_UVAXI
:
u32
=
5
;
pub
const
CPU_SUBTYPE_UVAXII
:
u32
=
6
;
pub
const
CPU_SUBTYPE_VAX8200
:
u32
=
7
;
pub
const
CPU_SUBTYPE_VAX8500
:
u32
=
8
;
pub
const
CPU_SUBTYPE_VAX8600
:
u32
=
9
;
pub
const
CPU_SUBTYPE_VAX8650
:
u32
=
10
;
pub
const
CPU_SUBTYPE_VAX8800
:
u32
=
11
;
pub
const
CPU_SUBTYPE_UVAXIII
:
u32
=
12
;
pub
const
CPU_SUBTYPE_MC680X0_ALL
:
u32
=
1
;
pub
const
CPU_SUBTYPE_MC68030
:
u32
=
1
;
pub
const
CPU_SUBTYPE_MC68040
:
u32
=
2
;
pub
const
CPU_SUBTYPE_MC68030_ONLY
:
u32
=
3
;
#
[
inline
]
pub
const
fn
cpu_subtype_intel
(
f
:
u32
m
:
u32
)
-
>
u32
{
f
+
(
m
<
<
4
)
}
pub
const
CPU_SUBTYPE_I386_ALL
:
u32
=
cpu_subtype_intel
(
3
0
)
;
pub
const
CPU_SUBTYPE_386
:
u32
=
cpu_subtype_intel
(
3
0
)
;
pub
const
CPU_SUBTYPE_486
:
u32
=
cpu_subtype_intel
(
4
0
)
;
pub
const
CPU_SUBTYPE_486SX
:
u32
=
cpu_subtype_intel
(
4
8
)
;
pub
const
CPU_SUBTYPE_586
:
u32
=
cpu_subtype_intel
(
5
0
)
;
pub
const
CPU_SUBTYPE_PENT
:
u32
=
cpu_subtype_intel
(
5
0
)
;
pub
const
CPU_SUBTYPE_PENTPRO
:
u32
=
cpu_subtype_intel
(
6
1
)
;
pub
const
CPU_SUBTYPE_PENTII_M3
:
u32
=
cpu_subtype_intel
(
6
3
)
;
pub
const
CPU_SUBTYPE_PENTII_M5
:
u32
=
cpu_subtype_intel
(
6
5
)
;
pub
const
CPU_SUBTYPE_CELERON
:
u32
=
cpu_subtype_intel
(
7
6
)
;
pub
const
CPU_SUBTYPE_CELERON_MOBILE
:
u32
=
cpu_subtype_intel
(
7
7
)
;
pub
const
CPU_SUBTYPE_PENTIUM_3
:
u32
=
cpu_subtype_intel
(
8
0
)
;
pub
const
CPU_SUBTYPE_PENTIUM_3_M
:
u32
=
cpu_subtype_intel
(
8
1
)
;
pub
const
CPU_SUBTYPE_PENTIUM_3_XEON
:
u32
=
cpu_subtype_intel
(
8
2
)
;
pub
const
CPU_SUBTYPE_PENTIUM_M
:
u32
=
cpu_subtype_intel
(
9
0
)
;
pub
const
CPU_SUBTYPE_PENTIUM_4
:
u32
=
cpu_subtype_intel
(
10
0
)
;
pub
const
CPU_SUBTYPE_PENTIUM_4_M
:
u32
=
cpu_subtype_intel
(
10
1
)
;
pub
const
CPU_SUBTYPE_ITANIUM
:
u32
=
cpu_subtype_intel
(
11
0
)
;
pub
const
CPU_SUBTYPE_ITANIUM_2
:
u32
=
cpu_subtype_intel
(
11
1
)
;
pub
const
CPU_SUBTYPE_XEON
:
u32
=
cpu_subtype_intel
(
12
0
)
;
pub
const
CPU_SUBTYPE_XEON_MP
:
u32
=
cpu_subtype_intel
(
12
1
)
;
#
[
inline
]
pub
const
fn
cpu_subtype_intel_family
(
x
:
u32
)
-
>
u32
{
x
&
15
}
pub
const
CPU_SUBTYPE_INTEL_FAMILY_MAX
:
u32
=
15
;
#
[
inline
]
pub
const
fn
cpu_subtype_intel_model
(
x
:
u32
)
-
>
u32
{
x
>
>
4
}
pub
const
CPU_SUBTYPE_INTEL_MODEL_ALL
:
u32
=
0
;
pub
const
CPU_SUBTYPE_X86_ALL
:
u32
=
3
;
pub
const
CPU_SUBTYPE_X86_64_ALL
:
u32
=
3
;
pub
const
CPU_SUBTYPE_X86_ARCH1
:
u32
=
4
;
pub
const
CPU_SUBTYPE_X86_64_H
:
u32
=
8
;
pub
const
CPU_SUBTYPE_MIPS_ALL
:
u32
=
0
;
pub
const
CPU_SUBTYPE_MIPS_R2300
:
u32
=
1
;
pub
const
CPU_SUBTYPE_MIPS_R2600
:
u32
=
2
;
pub
const
CPU_SUBTYPE_MIPS_R2800
:
u32
=
3
;
pub
const
CPU_SUBTYPE_MIPS_R2000A
:
u32
=
4
;
pub
const
CPU_SUBTYPE_MIPS_R2000
:
u32
=
5
;
pub
const
CPU_SUBTYPE_MIPS_R3000A
:
u32
=
6
;
pub
const
CPU_SUBTYPE_MIPS_R3000
:
u32
=
7
;
pub
const
CPU_SUBTYPE_MC98000_ALL
:
u32
=
0
;
pub
const
CPU_SUBTYPE_MC98601
:
u32
=
1
;
pub
const
CPU_SUBTYPE_HPPA_ALL
:
u32
=
0
;
pub
const
CPU_SUBTYPE_HPPA_7100LC
:
u32
=
1
;
pub
const
CPU_SUBTYPE_MC88000_ALL
:
u32
=
0
;
pub
const
CPU_SUBTYPE_MC88100
:
u32
=
1
;
pub
const
CPU_SUBTYPE_MC88110
:
u32
=
2
;
pub
const
CPU_SUBTYPE_SPARC_ALL
:
u32
=
0
;
pub
const
CPU_SUBTYPE_I860_ALL
:
u32
=
0
;
pub
const
CPU_SUBTYPE_I860_860
:
u32
=
1
;
pub
const
CPU_SUBTYPE_POWERPC_ALL
:
u32
=
0
;
pub
const
CPU_SUBTYPE_POWERPC_601
:
u32
=
1
;
pub
const
CPU_SUBTYPE_POWERPC_602
:
u32
=
2
;
pub
const
CPU_SUBTYPE_POWERPC_603
:
u32
=
3
;
pub
const
CPU_SUBTYPE_POWERPC_603E
:
u32
=
4
;
pub
const
CPU_SUBTYPE_POWERPC_603EV
:
u32
=
5
;
pub
const
CPU_SUBTYPE_POWERPC_604
:
u32
=
6
;
pub
const
CPU_SUBTYPE_POWERPC_604E
:
u32
=
7
;
pub
const
CPU_SUBTYPE_POWERPC_620
:
u32
=
8
;
pub
const
CPU_SUBTYPE_POWERPC_750
:
u32
=
9
;
pub
const
CPU_SUBTYPE_POWERPC_7400
:
u32
=
10
;
pub
const
CPU_SUBTYPE_POWERPC_7450
:
u32
=
11
;
pub
const
CPU_SUBTYPE_POWERPC_970
:
u32
=
100
;
pub
const
CPU_SUBTYPE_ARM_ALL
:
u32
=
0
;
pub
const
CPU_SUBTYPE_ARM_V4T
:
u32
=
5
;
pub
const
CPU_SUBTYPE_ARM_V6
:
u32
=
6
;
pub
const
CPU_SUBTYPE_ARM_V5TEJ
:
u32
=
7
;
pub
const
CPU_SUBTYPE_ARM_XSCALE
:
u32
=
8
;
pub
const
CPU_SUBTYPE_ARM_V7
:
u32
=
9
;
pub
const
CPU_SUBTYPE_ARM_V7F
:
u32
=
10
;
pub
const
CPU_SUBTYPE_ARM_V7S
:
u32
=
11
;
pub
const
CPU_SUBTYPE_ARM_V7K
:
u32
=
12
;
pub
const
CPU_SUBTYPE_ARM_V8
:
u32
=
13
;
pub
const
CPU_SUBTYPE_ARM_V6M
:
u32
=
14
;
pub
const
CPU_SUBTYPE_ARM_V7M
:
u32
=
15
;
pub
const
CPU_SUBTYPE_ARM_V7EM
:
u32
=
16
;
pub
const
CPU_SUBTYPE_ARM_V8M
:
u32
=
17
;
pub
const
CPU_SUBTYPE_ARM64_ALL
:
u32
=
0
;
pub
const
CPU_SUBTYPE_ARM64_V8
:
u32
=
1
;
pub
const
CPU_SUBTYPE_ARM64E
:
u32
=
2
;
pub
const
CPU_SUBTYPE_ARM64_32_ALL
:
u32
=
0
;
pub
const
CPU_SUBTYPE_ARM64_32_V8
:
u32
=
1
;
pub
const
VM_PROT_READ
:
u32
=
0x01
;
pub
const
VM_PROT_WRITE
:
u32
=
0x02
;
pub
const
VM_PROT_EXECUTE
:
u32
=
0x04
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DyldCacheHeader
<
E
:
Endian
>
{
pub
magic
:
[
u8
;
16
]
pub
mapping_offset
:
U32
<
E
>
pub
mapping_count
:
U32
<
E
>
pub
images_offset
:
U32
<
E
>
pub
images_count
:
U32
<
E
>
pub
dyld_base_address
:
U64
<
E
>
reserved1
:
[
u8
;
32
]
pub
local_symbols_offset
:
U64
<
E
>
pub
local_symbols_size
:
U64
<
E
>
pub
uuid
:
[
u8
;
16
]
reserved2
:
[
u8
;
32
]
reserved3
:
[
u8
;
32
]
reserved4
:
[
u8
;
32
]
reserved5
:
[
u8
;
32
]
reserved6
:
[
u8
;
32
]
reserved7
:
[
u8
;
32
]
reserved8
:
[
u8
;
32
]
reserved9
:
[
u8
;
32
]
reserved10
:
[
u8
;
32
]
pub
subcaches_offset
:
U32
<
E
>
pub
subcaches_count
:
U32
<
E
>
pub
symbols_subcache_uuid
:
[
u8
;
16
]
reserved11
:
[
u8
;
32
]
pub
images_across_all_subcaches_offset
:
U32
<
E
>
pub
images_across_all_subcaches_count
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DyldCacheMappingInfo
<
E
:
Endian
>
{
pub
address
:
U64
<
E
>
pub
size
:
U64
<
E
>
pub
file_offset
:
U64
<
E
>
pub
max_prot
:
U32
<
E
>
pub
init_prot
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DyldCacheImageInfo
<
E
:
Endian
>
{
pub
address
:
U64
<
E
>
pub
mod_time
:
U64
<
E
>
pub
inode
:
U64
<
E
>
pub
path_file_offset
:
U32
<
E
>
pub
pad
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DyldSubCacheInfo
<
E
:
Endian
>
{
pub
uuid
:
[
u8
;
16
]
pub
cumulative_size
:
U64
<
E
>
}
pub
const
FAT_MAGIC
:
u32
=
0xcafe_babe
;
pub
const
FAT_CIGAM
:
u32
=
0xbeba_feca
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
FatHeader
{
pub
magic
:
U32
<
BigEndian
>
pub
nfat_arch
:
U32
<
BigEndian
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
FatArch32
{
pub
cputype
:
U32
<
BigEndian
>
pub
cpusubtype
:
U32
<
BigEndian
>
pub
offset
:
U32
<
BigEndian
>
pub
size
:
U32
<
BigEndian
>
pub
align
:
U32
<
BigEndian
>
}
pub
const
FAT_MAGIC_64
:
u32
=
0xcafe_babf
;
pub
const
FAT_CIGAM_64
:
u32
=
0xbfba_feca
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
FatArch64
{
pub
cputype
:
U32
<
BigEndian
>
pub
cpusubtype
:
U32
<
BigEndian
>
pub
offset
:
U64
<
BigEndian
>
pub
size
:
U64
<
BigEndian
>
pub
align
:
U32
<
BigEndian
>
pub
reserved
:
U32
<
BigEndian
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
MachHeader32
<
E
:
Endian
>
{
pub
magic
:
U32
<
BigEndian
>
pub
cputype
:
U32
<
E
>
pub
cpusubtype
:
U32
<
E
>
pub
filetype
:
U32
<
E
>
pub
ncmds
:
U32
<
E
>
pub
sizeofcmds
:
U32
<
E
>
pub
flags
:
U32
<
E
>
}
pub
const
MH_MAGIC
:
u32
=
0xfeed_face
;
pub
const
MH_CIGAM
:
u32
=
0xcefa_edfe
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
MachHeader64
<
E
:
Endian
>
{
pub
magic
:
U32
<
BigEndian
>
pub
cputype
:
U32
<
E
>
pub
cpusubtype
:
U32
<
E
>
pub
filetype
:
U32
<
E
>
pub
ncmds
:
U32
<
E
>
pub
sizeofcmds
:
U32
<
E
>
pub
flags
:
U32
<
E
>
pub
reserved
:
U32
<
E
>
}
pub
const
MH_MAGIC_64
:
u32
=
0xfeed_facf
;
pub
const
MH_CIGAM_64
:
u32
=
0xcffa_edfe
;
pub
const
MH_OBJECT
:
u32
=
0x1
;
pub
const
MH_EXECUTE
:
u32
=
0x2
;
pub
const
MH_FVMLIB
:
u32
=
0x3
;
pub
const
MH_CORE
:
u32
=
0x4
;
pub
const
MH_PRELOAD
:
u32
=
0x5
;
pub
const
MH_DYLIB
:
u32
=
0x6
;
pub
const
MH_DYLINKER
:
u32
=
0x7
;
pub
const
MH_BUNDLE
:
u32
=
0x8
;
pub
const
MH_DYLIB_STUB
:
u32
=
0x9
;
pub
const
MH_DSYM
:
u32
=
0xa
;
pub
const
MH_KEXT_BUNDLE
:
u32
=
0xb
;
pub
const
MH_FILESET
:
u32
=
0xc
;
pub
const
MH_NOUNDEFS
:
u32
=
0x1
;
pub
const
MH_INCRLINK
:
u32
=
0x2
;
pub
const
MH_DYLDLINK
:
u32
=
0x4
;
pub
const
MH_BINDATLOAD
:
u32
=
0x8
;
pub
const
MH_PREBOUND
:
u32
=
0x10
;
pub
const
MH_SPLIT_SEGS
:
u32
=
0x20
;
pub
const
MH_LAZY_INIT
:
u32
=
0x40
;
pub
const
MH_TWOLEVEL
:
u32
=
0x80
;
pub
const
MH_FORCE_FLAT
:
u32
=
0x100
;
pub
const
MH_NOMULTIDEFS
:
u32
=
0x200
;
pub
const
MH_NOFIXPREBINDING
:
u32
=
0x400
;
pub
const
MH_PREBINDABLE
:
u32
=
0x800
;
pub
const
MH_ALLMODSBOUND
:
u32
=
0x1000
;
pub
const
MH_SUBSECTIONS_VIA_SYMBOLS
:
u32
=
0x2000
;
pub
const
MH_CANONICAL
:
u32
=
0x4000
;
pub
const
MH_WEAK_DEFINES
:
u32
=
0x8000
;
pub
const
MH_BINDS_TO_WEAK
:
u32
=
0x10000
;
pub
const
MH_ALLOW_STACK_EXECUTION
:
u32
=
0x20000
;
pub
const
MH_ROOT_SAFE
:
u32
=
0x40000
;
pub
const
MH_SETUID_SAFE
:
u32
=
0x80000
;
pub
const
MH_NO_REEXPORTED_DYLIBS
:
u32
=
0x10_0000
;
pub
const
MH_PIE
:
u32
=
0x20_0000
;
pub
const
MH_DEAD_STRIPPABLE_DYLIB
:
u32
=
0x40_0000
;
pub
const
MH_HAS_TLV_DESCRIPTORS
:
u32
=
0x80_0000
;
pub
const
MH_NO_HEAP_EXECUTION
:
u32
=
0x100_0000
;
pub
const
MH_APP_EXTENSION_SAFE
:
u32
=
0x0200_0000
;
pub
const
MH_NLIST_OUTOFSYNC_WITH_DYLDINFO
:
u32
=
0x0400_0000
;
pub
const
MH_SIM_SUPPORT
:
u32
=
0x0800_0000
;
pub
const
MH_DYLIB_IN_CACHE
:
u32
=
0x8000_0000
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
LoadCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
}
pub
const
LC_REQ_DYLD
:
u32
=
0x8000_0000
;
pub
const
LC_SEGMENT
:
u32
=
0x1
;
pub
const
LC_SYMTAB
:
u32
=
0x2
;
pub
const
LC_SYMSEG
:
u32
=
0x3
;
pub
const
LC_THREAD
:
u32
=
0x4
;
pub
const
LC_UNIXTHREAD
:
u32
=
0x5
;
pub
const
LC_LOADFVMLIB
:
u32
=
0x6
;
pub
const
LC_IDFVMLIB
:
u32
=
0x7
;
pub
const
LC_IDENT
:
u32
=
0x8
;
pub
const
LC_FVMFILE
:
u32
=
0x9
;
pub
const
LC_PREPAGE
:
u32
=
0xa
;
pub
const
LC_DYSYMTAB
:
u32
=
0xb
;
pub
const
LC_LOAD_DYLIB
:
u32
=
0xc
;
pub
const
LC_ID_DYLIB
:
u32
=
0xd
;
pub
const
LC_LOAD_DYLINKER
:
u32
=
0xe
;
pub
const
LC_ID_DYLINKER
:
u32
=
0xf
;
pub
const
LC_PREBOUND_DYLIB
:
u32
=
0x10
;
pub
const
LC_ROUTINES
:
u32
=
0x11
;
pub
const
LC_SUB_FRAMEWORK
:
u32
=
0x12
;
pub
const
LC_SUB_UMBRELLA
:
u32
=
0x13
;
pub
const
LC_SUB_CLIENT
:
u32
=
0x14
;
pub
const
LC_SUB_LIBRARY
:
u32
=
0x15
;
pub
const
LC_TWOLEVEL_HINTS
:
u32
=
0x16
;
pub
const
LC_PREBIND_CKSUM
:
u32
=
0x17
;
pub
const
LC_LOAD_WEAK_DYLIB
:
u32
=
0x18
|
LC_REQ_DYLD
;
pub
const
LC_SEGMENT_64
:
u32
=
0x19
;
pub
const
LC_ROUTINES_64
:
u32
=
0x1a
;
pub
const
LC_UUID
:
u32
=
0x1b
;
pub
const
LC_RPATH
:
u32
=
0x1c
|
LC_REQ_DYLD
;
pub
const
LC_CODE_SIGNATURE
:
u32
=
0x1d
;
pub
const
LC_SEGMENT_SPLIT_INFO
:
u32
=
0x1e
;
pub
const
LC_REEXPORT_DYLIB
:
u32
=
0x1f
|
LC_REQ_DYLD
;
pub
const
LC_LAZY_LOAD_DYLIB
:
u32
=
0x20
;
pub
const
LC_ENCRYPTION_INFO
:
u32
=
0x21
;
pub
const
LC_DYLD_INFO
:
u32
=
0x22
;
pub
const
LC_DYLD_INFO_ONLY
:
u32
=
0x22
|
LC_REQ_DYLD
;
pub
const
LC_LOAD_UPWARD_DYLIB
:
u32
=
0x23
|
LC_REQ_DYLD
;
pub
const
LC_VERSION_MIN_MACOSX
:
u32
=
0x24
;
pub
const
LC_VERSION_MIN_IPHONEOS
:
u32
=
0x25
;
pub
const
LC_FUNCTION_STARTS
:
u32
=
0x26
;
pub
const
LC_DYLD_ENVIRONMENT
:
u32
=
0x27
;
pub
const
LC_MAIN
:
u32
=
0x28
|
LC_REQ_DYLD
;
pub
const
LC_DATA_IN_CODE
:
u32
=
0x29
;
pub
const
LC_SOURCE_VERSION
:
u32
=
0x2A
;
pub
const
LC_DYLIB_CODE_SIGN_DRS
:
u32
=
0x2B
;
pub
const
LC_ENCRYPTION_INFO_64
:
u32
=
0x2C
;
pub
const
LC_LINKER_OPTION
:
u32
=
0x2D
;
pub
const
LC_LINKER_OPTIMIZATION_HINT
:
u32
=
0x2E
;
pub
const
LC_VERSION_MIN_TVOS
:
u32
=
0x2F
;
pub
const
LC_VERSION_MIN_WATCHOS
:
u32
=
0x30
;
pub
const
LC_NOTE
:
u32
=
0x31
;
pub
const
LC_BUILD_VERSION
:
u32
=
0x32
;
pub
const
LC_DYLD_EXPORTS_TRIE
:
u32
=
0x33
|
LC_REQ_DYLD
;
pub
const
LC_DYLD_CHAINED_FIXUPS
:
u32
=
0x34
|
LC_REQ_DYLD
;
pub
const
LC_FILESET_ENTRY
:
u32
=
0x35
|
LC_REQ_DYLD
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
LcStr
<
E
:
Endian
>
{
pub
offset
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
SegmentCommand32
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
segname
:
[
u8
;
16
]
pub
vmaddr
:
U32
<
E
>
pub
vmsize
:
U32
<
E
>
pub
fileoff
:
U32
<
E
>
pub
filesize
:
U32
<
E
>
pub
maxprot
:
U32
<
E
>
pub
initprot
:
U32
<
E
>
pub
nsects
:
U32
<
E
>
pub
flags
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
SegmentCommand64
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
segname
:
[
u8
;
16
]
pub
vmaddr
:
U64
<
E
>
pub
vmsize
:
U64
<
E
>
pub
fileoff
:
U64
<
E
>
pub
filesize
:
U64
<
E
>
pub
maxprot
:
U32
<
E
>
pub
initprot
:
U32
<
E
>
pub
nsects
:
U32
<
E
>
pub
flags
:
U32
<
E
>
}
pub
const
SG_HIGHVM
:
u32
=
0x1
;
pub
const
SG_FVMLIB
:
u32
=
0x2
;
pub
const
SG_NORELOC
:
u32
=
0x4
;
pub
const
SG_PROTECTED_VERSION_1
:
u32
=
0x8
;
pub
const
SG_READ_ONLY
:
u32
=
0x10
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
Section32
<
E
:
Endian
>
{
pub
sectname
:
[
u8
;
16
]
pub
segname
:
[
u8
;
16
]
pub
addr
:
U32
<
E
>
pub
size
:
U32
<
E
>
pub
offset
:
U32
<
E
>
pub
align
:
U32
<
E
>
pub
reloff
:
U32
<
E
>
pub
nreloc
:
U32
<
E
>
pub
flags
:
U32
<
E
>
pub
reserved1
:
U32
<
E
>
pub
reserved2
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
Section64
<
E
:
Endian
>
{
pub
sectname
:
[
u8
;
16
]
pub
segname
:
[
u8
;
16
]
pub
addr
:
U64
<
E
>
pub
size
:
U64
<
E
>
pub
offset
:
U32
<
E
>
pub
align
:
U32
<
E
>
pub
reloff
:
U32
<
E
>
pub
nreloc
:
U32
<
E
>
pub
flags
:
U32
<
E
>
pub
reserved1
:
U32
<
E
>
pub
reserved2
:
U32
<
E
>
pub
reserved3
:
U32
<
E
>
}
pub
const
SECTION_TYPE
:
u32
=
0x0000_00ff
;
pub
const
SECTION_ATTRIBUTES
:
u32
=
0xffff_ff00
;
pub
const
S_REGULAR
:
u32
=
0x0
;
pub
const
S_ZEROFILL
:
u32
=
0x1
;
pub
const
S_CSTRING_LITERALS
:
u32
=
0x2
;
pub
const
S_4BYTE_LITERALS
:
u32
=
0x3
;
pub
const
S_8BYTE_LITERALS
:
u32
=
0x4
;
pub
const
S_LITERAL_POINTERS
:
u32
=
0x5
;
pub
const
S_NON_LAZY_SYMBOL_POINTERS
:
u32
=
0x6
;
pub
const
S_LAZY_SYMBOL_POINTERS
:
u32
=
0x7
;
pub
const
S_SYMBOL_STUBS
:
u32
=
0x8
;
pub
const
S_MOD_INIT_FUNC_POINTERS
:
u32
=
0x9
;
pub
const
S_MOD_TERM_FUNC_POINTERS
:
u32
=
0xa
;
pub
const
S_COALESCED
:
u32
=
0xb
;
pub
const
S_GB_ZEROFILL
:
u32
=
0xc
;
pub
const
S_INTERPOSING
:
u32
=
0xd
;
pub
const
S_16BYTE_LITERALS
:
u32
=
0xe
;
pub
const
S_DTRACE_DOF
:
u32
=
0xf
;
pub
const
S_LAZY_DYLIB_SYMBOL_POINTERS
:
u32
=
0x10
;
pub
const
S_THREAD_LOCAL_REGULAR
:
u32
=
0x11
;
pub
const
S_THREAD_LOCAL_ZEROFILL
:
u32
=
0x12
;
pub
const
S_THREAD_LOCAL_VARIABLES
:
u32
=
0x13
;
pub
const
S_THREAD_LOCAL_VARIABLE_POINTERS
:
u32
=
0x14
;
pub
const
S_THREAD_LOCAL_INIT_FUNCTION_POINTERS
:
u32
=
0x15
;
pub
const
S_INIT_FUNC_OFFSETS
:
u32
=
0x16
;
pub
const
SECTION_ATTRIBUTES_USR
:
u32
=
0xff00_0000
;
pub
const
S_ATTR_PURE_INSTRUCTIONS
:
u32
=
0x8000_0000
;
pub
const
S_ATTR_NO_TOC
:
u32
=
0x4000_0000
;
pub
const
S_ATTR_STRIP_STATIC_SYMS
:
u32
=
0x2000_0000
;
pub
const
S_ATTR_NO_DEAD_STRIP
:
u32
=
0x1000_0000
;
pub
const
S_ATTR_LIVE_SUPPORT
:
u32
=
0x0800_0000
;
pub
const
S_ATTR_SELF_MODIFYING_CODE
:
u32
=
0x0400_0000
;
pub
const
S_ATTR_DEBUG
:
u32
=
0x0200_0000
;
pub
const
SECTION_ATTRIBUTES_SYS
:
u32
=
0x00ff_ff00
;
pub
const
S_ATTR_SOME_INSTRUCTIONS
:
u32
=
0x0000_0400
;
pub
const
S_ATTR_EXT_RELOC
:
u32
=
0x0000_0200
;
pub
const
S_ATTR_LOC_RELOC
:
u32
=
0x0000_0100
;
pub
const
SEG_PAGEZERO
:
&
str
=
"
__PAGEZERO
"
;
pub
const
SEG_TEXT
:
&
str
=
"
__TEXT
"
;
pub
const
SECT_TEXT
:
&
str
=
"
__text
"
;
pub
const
SECT_FVMLIB_INIT0
:
&
str
=
"
__fvmlib_init0
"
;
pub
const
SECT_FVMLIB_INIT1
:
&
str
=
"
__fvmlib_init1
"
;
pub
const
SEG_DATA
:
&
str
=
"
__DATA
"
;
pub
const
SECT_DATA
:
&
str
=
"
__data
"
;
pub
const
SECT_BSS
:
&
str
=
"
__bss
"
;
pub
const
SECT_COMMON
:
&
str
=
"
__common
"
;
pub
const
SEG_OBJC
:
&
str
=
"
__OBJC
"
;
pub
const
SECT_OBJC_SYMBOLS
:
&
str
=
"
__symbol_table
"
;
pub
const
SECT_OBJC_MODULES
:
&
str
=
"
__module_info
"
;
pub
const
SECT_OBJC_STRINGS
:
&
str
=
"
__selector_strs
"
;
pub
const
SECT_OBJC_REFS
:
&
str
=
"
__selector_refs
"
;
pub
const
SEG_ICON
:
&
str
=
"
__ICON
"
;
pub
const
SECT_ICON_HEADER
:
&
str
=
"
__header
"
;
pub
const
SECT_ICON_TIFF
:
&
str
=
"
__tiff
"
;
pub
const
SEG_LINKEDIT
:
&
str
=
"
__LINKEDIT
"
;
pub
const
SEG_LINKINFO
:
&
str
=
"
__LINKINFO
"
;
pub
const
SEG_UNIXSTACK
:
&
str
=
"
__UNIXSTACK
"
;
pub
const
SEG_IMPORT
:
&
str
=
"
__IMPORT
"
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
Fvmlib
<
E
:
Endian
>
{
pub
name
:
LcStr
<
E
>
pub
minor_version
:
U32
<
E
>
pub
header_addr
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
FvmlibCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
fvmlib
:
Fvmlib
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
Dylib
<
E
:
Endian
>
{
pub
name
:
LcStr
<
E
>
pub
timestamp
:
U32
<
E
>
pub
current_version
:
U32
<
E
>
pub
compatibility_version
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DylibCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
dylib
:
Dylib
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
SubFrameworkCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
umbrella
:
LcStr
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
SubClientCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
client
:
LcStr
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
SubUmbrellaCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
sub_umbrella
:
LcStr
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
SubLibraryCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
sub_library
:
LcStr
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
PreboundDylibCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
name
:
LcStr
<
E
>
pub
nmodules
:
U32
<
E
>
pub
linked_modules
:
LcStr
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DylinkerCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
name
:
LcStr
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
ThreadCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
RoutinesCommand32
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
init_address
:
U32
<
E
>
pub
init_module
:
U32
<
E
>
pub
reserved1
:
U32
<
E
>
pub
reserved2
:
U32
<
E
>
pub
reserved3
:
U32
<
E
>
pub
reserved4
:
U32
<
E
>
pub
reserved5
:
U32
<
E
>
pub
reserved6
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
RoutinesCommand64
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
init_address
:
U64
<
E
>
pub
init_module
:
U64
<
E
>
pub
reserved1
:
U64
<
E
>
pub
reserved2
:
U64
<
E
>
pub
reserved3
:
U64
<
E
>
pub
reserved4
:
U64
<
E
>
pub
reserved5
:
U64
<
E
>
pub
reserved6
:
U64
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
SymtabCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
symoff
:
U32
<
E
>
pub
nsyms
:
U32
<
E
>
pub
stroff
:
U32
<
E
>
pub
strsize
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DysymtabCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
ilocalsym
:
U32
<
E
>
pub
nlocalsym
:
U32
<
E
>
pub
iextdefsym
:
U32
<
E
>
pub
nextdefsym
:
U32
<
E
>
pub
iundefsym
:
U32
<
E
>
pub
nundefsym
:
U32
<
E
>
pub
tocoff
:
U32
<
E
>
pub
ntoc
:
U32
<
E
>
pub
modtaboff
:
U32
<
E
>
pub
nmodtab
:
U32
<
E
>
pub
extrefsymoff
:
U32
<
E
>
pub
nextrefsyms
:
U32
<
E
>
pub
indirectsymoff
:
U32
<
E
>
pub
nindirectsyms
:
U32
<
E
>
pub
extreloff
:
U32
<
E
>
pub
nextrel
:
U32
<
E
>
pub
locreloff
:
U32
<
E
>
pub
nlocrel
:
U32
<
E
>
}
pub
const
INDIRECT_SYMBOL_LOCAL
:
u32
=
0x8000_0000
;
pub
const
INDIRECT_SYMBOL_ABS
:
u32
=
0x4000_0000
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DylibTableOfContents
<
E
:
Endian
>
{
pub
symbol_index
:
U32
<
E
>
pub
module_index
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DylibModule32
<
E
:
Endian
>
{
pub
module_name
:
U32
<
E
>
pub
iextdefsym
:
U32
<
E
>
pub
nextdefsym
:
U32
<
E
>
pub
irefsym
:
U32
<
E
>
pub
nrefsym
:
U32
<
E
>
pub
ilocalsym
:
U32
<
E
>
pub
nlocalsym
:
U32
<
E
>
pub
iextrel
:
U32
<
E
>
pub
nextrel
:
U32
<
E
>
pub
iinit_iterm
:
U32
<
E
>
pub
ninit_nterm
:
U32
<
E
>
pub
objc_module_info_addr
:
U32
<
E
>
pub
objc_module_info_size
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DylibModule64
<
E
:
Endian
>
{
pub
module_name
:
U32
<
E
>
pub
iextdefsym
:
U32
<
E
>
pub
nextdefsym
:
U32
<
E
>
pub
irefsym
:
U32
<
E
>
pub
nrefsym
:
U32
<
E
>
pub
ilocalsym
:
U32
<
E
>
pub
nlocalsym
:
U32
<
E
>
pub
iextrel
:
U32
<
E
>
pub
nextrel
:
U32
<
E
>
pub
iinit_iterm
:
U32
<
E
>
pub
ninit_nterm
:
U32
<
E
>
pub
objc_module_info_size
:
U32
<
E
>
pub
objc_module_info_addr
:
U64
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DylibReference
<
E
:
Endian
>
{
pub
bitfield
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
TwolevelHintsCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
offset
:
U32
<
E
>
pub
nhints
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
TwolevelHint
<
E
:
Endian
>
{
pub
bitfield
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
PrebindCksumCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
cksum
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
UuidCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
uuid
:
[
u8
;
16
]
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
RpathCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
path
:
LcStr
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
LinkeditDataCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
dataoff
:
U32
<
E
>
pub
datasize
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
FilesetEntryCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
vmaddr
:
U64
<
E
>
pub
fileoff
:
U64
<
E
>
pub
entry_id
:
LcStr
<
E
>
pub
reserved
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
EncryptionInfoCommand32
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
cryptoff
:
U32
<
E
>
pub
cryptsize
:
U32
<
E
>
pub
cryptid
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
EncryptionInfoCommand64
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
cryptoff
:
U32
<
E
>
pub
cryptsize
:
U32
<
E
>
pub
cryptid
:
U32
<
E
>
pub
pad
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
VersionMinCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
version
:
U32
<
E
>
pub
sdk
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
BuildVersionCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
platform
:
U32
<
E
>
pub
minos
:
U32
<
E
>
pub
sdk
:
U32
<
E
>
pub
ntools
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
BuildToolVersion
<
E
:
Endian
>
{
pub
tool
:
U32
<
E
>
pub
version
:
U32
<
E
>
}
pub
const
PLATFORM_MACOS
:
u32
=
1
;
pub
const
PLATFORM_IOS
:
u32
=
2
;
pub
const
PLATFORM_TVOS
:
u32
=
3
;
pub
const
PLATFORM_WATCHOS
:
u32
=
4
;
pub
const
PLATFORM_BRIDGEOS
:
u32
=
5
;
pub
const
PLATFORM_MACCATALYST
:
u32
=
6
;
pub
const
PLATFORM_IOSSIMULATOR
:
u32
=
7
;
pub
const
PLATFORM_TVOSSIMULATOR
:
u32
=
8
;
pub
const
PLATFORM_WATCHOSSIMULATOR
:
u32
=
9
;
pub
const
PLATFORM_DRIVERKIT
:
u32
=
10
;
pub
const
TOOL_CLANG
:
u32
=
1
;
pub
const
TOOL_SWIFT
:
u32
=
2
;
pub
const
TOOL_LD
:
u32
=
3
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DyldInfoCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
rebase_off
:
U32
<
E
>
pub
rebase_size
:
U32
<
E
>
pub
bind_off
:
U32
<
E
>
pub
bind_size
:
U32
<
E
>
pub
weak_bind_off
:
U32
<
E
>
pub
weak_bind_size
:
U32
<
E
>
pub
lazy_bind_off
:
U32
<
E
>
pub
lazy_bind_size
:
U32
<
E
>
pub
export_off
:
U32
<
E
>
pub
export_size
:
U32
<
E
>
}
pub
const
REBASE_TYPE_POINTER
:
u8
=
1
;
pub
const
REBASE_TYPE_TEXT_ABSOLUTE32
:
u8
=
2
;
pub
const
REBASE_TYPE_TEXT_PCREL32
:
u8
=
3
;
pub
const
REBASE_OPCODE_MASK
:
u8
=
0xF0
;
pub
const
REBASE_IMMEDIATE_MASK
:
u8
=
0x0F
;
pub
const
REBASE_OPCODE_DONE
:
u8
=
0x00
;
pub
const
REBASE_OPCODE_SET_TYPE_IMM
:
u8
=
0x10
;
pub
const
REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB
:
u8
=
0x20
;
pub
const
REBASE_OPCODE_ADD_ADDR_ULEB
:
u8
=
0x30
;
pub
const
REBASE_OPCODE_ADD_ADDR_IMM_SCALED
:
u8
=
0x40
;
pub
const
REBASE_OPCODE_DO_REBASE_IMM_TIMES
:
u8
=
0x50
;
pub
const
REBASE_OPCODE_DO_REBASE_ULEB_TIMES
:
u8
=
0x60
;
pub
const
REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB
:
u8
=
0x70
;
pub
const
REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB
:
u8
=
0x80
;
pub
const
BIND_TYPE_POINTER
:
u8
=
1
;
pub
const
BIND_TYPE_TEXT_ABSOLUTE32
:
u8
=
2
;
pub
const
BIND_TYPE_TEXT_PCREL32
:
u8
=
3
;
pub
const
BIND_SPECIAL_DYLIB_SELF
:
i8
=
0
;
pub
const
BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE
:
i8
=
-
1
;
pub
const
BIND_SPECIAL_DYLIB_FLAT_LOOKUP
:
i8
=
-
2
;
pub
const
BIND_SPECIAL_DYLIB_WEAK_LOOKUP
:
i8
=
-
3
;
pub
const
BIND_SYMBOL_FLAGS_WEAK_IMPORT
:
u8
=
0x1
;
pub
const
BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION
:
u8
=
0x8
;
pub
const
BIND_OPCODE_MASK
:
u8
=
0xF0
;
pub
const
BIND_IMMEDIATE_MASK
:
u8
=
0x0F
;
pub
const
BIND_OPCODE_DONE
:
u8
=
0x00
;
pub
const
BIND_OPCODE_SET_DYLIB_ORDINAL_IMM
:
u8
=
0x10
;
pub
const
BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB
:
u8
=
0x20
;
pub
const
BIND_OPCODE_SET_DYLIB_SPECIAL_IMM
:
u8
=
0x30
;
pub
const
BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM
:
u8
=
0x40
;
pub
const
BIND_OPCODE_SET_TYPE_IMM
:
u8
=
0x50
;
pub
const
BIND_OPCODE_SET_ADDEND_SLEB
:
u8
=
0x60
;
pub
const
BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB
:
u8
=
0x70
;
pub
const
BIND_OPCODE_ADD_ADDR_ULEB
:
u8
=
0x80
;
pub
const
BIND_OPCODE_DO_BIND
:
u8
=
0x90
;
pub
const
BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB
:
u8
=
0xA0
;
pub
const
BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED
:
u8
=
0xB0
;
pub
const
BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB
:
u8
=
0xC0
;
pub
const
BIND_OPCODE_THREADED
:
u8
=
0xD0
;
pub
const
BIND_SUBOPCODE_THREADED_SET_BIND_ORDINAL_TABLE_SIZE_ULEB
:
u8
=
0x00
;
pub
const
BIND_SUBOPCODE_THREADED_APPLY
:
u8
=
0x01
;
pub
const
EXPORT_SYMBOL_FLAGS_KIND_MASK
:
u32
=
0x03
;
pub
const
EXPORT_SYMBOL_FLAGS_KIND_REGULAR
:
u32
=
0x00
;
pub
const
EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL
:
u32
=
0x01
;
pub
const
EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE
:
u32
=
0x02
;
pub
const
EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION
:
u32
=
0x04
;
pub
const
EXPORT_SYMBOL_FLAGS_REEXPORT
:
u32
=
0x08
;
pub
const
EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER
:
u32
=
0x10
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
LinkerOptionCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
count
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
SymsegCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
offset
:
U32
<
E
>
pub
size
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
IdentCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
FvmfileCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
name
:
LcStr
<
E
>
pub
header_addr
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
EntryPointCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
entryoff
:
U64
<
E
>
pub
stacksize
:
U64
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
SourceVersionCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
version
:
U64
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
DataInCodeEntry
<
E
:
Endian
>
{
pub
offset
:
U32
<
E
>
pub
length
:
U16
<
E
>
pub
kind
:
U16
<
E
>
}
pub
const
DICE_KIND_DATA
:
u32
=
0x0001
;
pub
const
DICE_KIND_JUMP_TABLE8
:
u32
=
0x0002
;
pub
const
DICE_KIND_JUMP_TABLE16
:
u32
=
0x0003
;
pub
const
DICE_KIND_JUMP_TABLE32
:
u32
=
0x0004
;
pub
const
DICE_KIND_ABS_JUMP_TABLE32
:
u32
=
0x0005
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
NoteCommand
<
E
:
Endian
>
{
pub
cmd
:
U32
<
E
>
pub
cmdsize
:
U32
<
E
>
pub
data_owner
:
[
u8
;
16
]
pub
offset
:
U64
<
E
>
pub
size
:
U64
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
Nlist32
<
E
:
Endian
>
{
pub
n_strx
:
U32
<
E
>
pub
n_type
:
u8
pub
n_sect
:
u8
pub
n_desc
:
U16
<
E
>
pub
n_value
:
U32
<
E
>
}
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
Nlist64
<
E
:
Endian
>
{
pub
n_strx
:
U32
<
E
>
pub
n_type
:
u8
pub
n_sect
:
u8
pub
n_desc
:
U16
<
E
>
pub
n_value
:
U64Bytes
<
E
>
}
pub
const
N_STAB
:
u8
=
0xe0
;
pub
const
N_PEXT
:
u8
=
0x10
;
pub
const
N_TYPE
:
u8
=
0x0e
;
pub
const
N_EXT
:
u8
=
0x01
;
pub
const
N_UNDF
:
u8
=
0x0
;
pub
const
N_ABS
:
u8
=
0x2
;
pub
const
N_SECT
:
u8
=
0xe
;
pub
const
N_PBUD
:
u8
=
0xc
;
pub
const
N_INDR
:
u8
=
0xa
;
pub
const
NO_SECT
:
u8
=
0
;
pub
const
MAX_SECT
:
u8
=
255
;
pub
const
REFERENCE_TYPE
:
u16
=
0x7
;
pub
const
REFERENCE_FLAG_UNDEFINED_NON_LAZY
:
u16
=
0
;
pub
const
REFERENCE_FLAG_UNDEFINED_LAZY
:
u16
=
1
;
pub
const
REFERENCE_FLAG_DEFINED
:
u16
=
2
;
pub
const
REFERENCE_FLAG_PRIVATE_DEFINED
:
u16
=
3
;
pub
const
REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY
:
u16
=
4
;
pub
const
REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY
:
u16
=
5
;
pub
const
REFERENCED_DYNAMICALLY
:
u16
=
0x0010
;
pub
const
SELF_LIBRARY_ORDINAL
:
u8
=
0x0
;
pub
const
MAX_LIBRARY_ORDINAL
:
u8
=
0xfd
;
pub
const
DYNAMIC_LOOKUP_ORDINAL
:
u8
=
0xfe
;
pub
const
EXECUTABLE_ORDINAL
:
u8
=
0xff
;
pub
const
N_NO_DEAD_STRIP
:
u16
=
0x0020
;
pub
const
N_DESC_DISCARDED
:
u16
=
0x0020
;
pub
const
N_WEAK_REF
:
u16
=
0x0040
;
pub
const
N_WEAK_DEF
:
u16
=
0x0080
;
pub
const
N_REF_TO_WEAK
:
u16
=
0x0080
;
pub
const
N_ARM_THUMB_DEF
:
u16
=
0x0008
;
pub
const
N_SYMBOL_RESOLVER
:
u16
=
0x0100
;
pub
const
N_ALT_ENTRY
:
u16
=
0x0200
;
pub
const
N_GSYM
:
u8
=
0x20
;
pub
const
N_FNAME
:
u8
=
0x22
;
pub
const
N_FUN
:
u8
=
0x24
;
pub
const
N_STSYM
:
u8
=
0x26
;
pub
const
N_LCSYM
:
u8
=
0x28
;
pub
const
N_BNSYM
:
u8
=
0x2e
;
pub
const
N_AST
:
u8
=
0x32
;
pub
const
N_OPT
:
u8
=
0x3c
;
pub
const
N_RSYM
:
u8
=
0x40
;
pub
const
N_SLINE
:
u8
=
0x44
;
pub
const
N_ENSYM
:
u8
=
0x4e
;
pub
const
N_SSYM
:
u8
=
0x60
;
pub
const
N_SO
:
u8
=
0x64
;
pub
const
N_OSO
:
u8
=
0x66
;
pub
const
N_LSYM
:
u8
=
0x80
;
pub
const
N_BINCL
:
u8
=
0x82
;
pub
const
N_SOL
:
u8
=
0x84
;
pub
const
N_PARAMS
:
u8
=
0x86
;
pub
const
N_VERSION
:
u8
=
0x88
;
pub
const
N_OLEVEL
:
u8
=
0x8A
;
pub
const
N_PSYM
:
u8
=
0xa0
;
pub
const
N_EINCL
:
u8
=
0xa2
;
pub
const
N_ENTRY
:
u8
=
0xa4
;
pub
const
N_LBRAC
:
u8
=
0xc0
;
pub
const
N_EXCL
:
u8
=
0xc2
;
pub
const
N_RBRAC
:
u8
=
0xe0
;
pub
const
N_BCOMM
:
u8
=
0xe2
;
pub
const
N_ECOMM
:
u8
=
0xe4
;
pub
const
N_ECOML
:
u8
=
0xe8
;
pub
const
N_LENG
:
u8
=
0xfe
;
pub
const
N_PC
:
u8
=
0x30
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
C
)
]
pub
struct
Relocation
<
E
:
Endian
>
{
pub
r_word0
:
U32
<
E
>
pub
r_word1
:
U32
<
E
>
}
impl
<
E
:
Endian
>
Relocation
<
E
>
{
#
[
inline
]
pub
fn
r_scattered
(
self
endian
:
E
cputype
:
u32
)
-
>
bool
{
if
cputype
=
=
CPU_TYPE_X86_64
{
false
}
else
{
self
.
r_word0
.
get
(
endian
)
&
R_SCATTERED
!
=
0
}
}
pub
fn
info
(
self
endian
:
E
)
-
>
RelocationInfo
{
let
r_address
=
self
.
r_word0
.
get
(
endian
)
;
let
r_word1
=
self
.
r_word1
.
get
(
endian
)
;
if
endian
.
is_little_endian
(
)
{
RelocationInfo
{
r_address
r_symbolnum
:
r_word1
&
0x00ff_ffff
r_pcrel
:
(
(
r_word1
>
>
24
)
&
0x1
)
!
=
0
r_length
:
(
(
r_word1
>
>
25
)
&
0x3
)
as
u8
r_extern
:
(
(
r_word1
>
>
27
)
&
0x1
)
!
=
0
r_type
:
(
r_word1
>
>
28
)
as
u8
}
}
else
{
RelocationInfo
{
r_address
r_symbolnum
:
r_word1
>
>
8
r_pcrel
:
(
(
r_word1
>
>
7
)
&
0x1
)
!
=
0
r_length
:
(
(
r_word1
>
>
5
)
&
0x3
)
as
u8
r_extern
:
(
(
r_word1
>
>
4
)
&
0x1
)
!
=
0
r_type
:
(
r_word1
&
0xf
)
as
u8
}
}
}
pub
fn
scattered_info
(
self
endian
:
E
)
-
>
ScatteredRelocationInfo
{
let
r_word0
=
self
.
r_word0
.
get
(
endian
)
;
let
r_value
=
self
.
r_word1
.
get
(
endian
)
;
ScatteredRelocationInfo
{
r_address
:
r_word0
&
0x00ff_ffff
r_type
:
(
(
r_word0
>
>
24
)
&
0xf
)
as
u8
r_length
:
(
(
r_word0
>
>
28
)
&
0x3
)
as
u8
r_pcrel
:
(
(
r_word0
>
>
30
)
&
0x1
)
!
=
0
r_value
}
}
}
#
[
derive
(
Debug
Clone
Copy
)
]
pub
struct
RelocationInfo
{
pub
r_address
:
u32
pub
r_symbolnum
:
u32
pub
r_pcrel
:
bool
pub
r_length
:
u8
pub
r_extern
:
bool
pub
r_type
:
u8
}
impl
RelocationInfo
{
pub
fn
relocation
<
E
:
Endian
>
(
self
endian
:
E
)
-
>
Relocation
<
E
>
{
let
r_word0
=
U32
:
:
new
(
endian
self
.
r_address
)
;
let
r_word1
=
U32
:
:
new
(
endian
if
endian
.
is_little_endian
(
)
{
self
.
r_symbolnum
&
0x00ff_ffff
|
u32
:
:
from
(
self
.
r_pcrel
)
<
<
24
|
u32
:
:
from
(
self
.
r_length
&
0x3
)
<
<
25
|
u32
:
:
from
(
self
.
r_extern
)
<
<
27
|
u32
:
:
from
(
self
.
r_type
)
<
<
28
}
else
{
self
.
r_symbolnum
>
>
8
|
u32
:
:
from
(
self
.
r_pcrel
)
<
<
7
|
u32
:
:
from
(
self
.
r_length
&
0x3
)
<
<
5
|
u32
:
:
from
(
self
.
r_extern
)
<
<
4
|
u32
:
:
from
(
self
.
r_type
)
&
0xf
}
)
;
Relocation
{
r_word0
r_word1
}
}
}
pub
const
R_ABS
:
u8
=
0
;
pub
const
R_SCATTERED
:
u32
=
0x8000_0000
;
#
[
derive
(
Debug
Clone
Copy
)
]
pub
struct
ScatteredRelocationInfo
{
pub
r_address
:
u32
pub
r_type
:
u8
pub
r_length
:
u8
pub
r_pcrel
:
bool
pub
r_value
:
u32
}
impl
ScatteredRelocationInfo
{
pub
fn
relocation
<
E
:
Endian
>
(
self
endian
:
E
)
-
>
Relocation
<
E
>
{
let
r_word0
=
U32
:
:
new
(
endian
self
.
r_address
&
0x00ff_ffff
|
u32
:
:
from
(
self
.
r_type
&
0xf
)
<
<
24
|
u32
:
:
from
(
self
.
r_length
&
0x3
)
<
<
28
|
u32
:
:
from
(
self
.
r_pcrel
)
<
<
30
|
R_SCATTERED
)
;
let
r_word1
=
U32
:
:
new
(
endian
self
.
r_value
)
;
Relocation
{
r_word0
r_word1
}
}
}
pub
const
GENERIC_RELOC_VANILLA
:
u8
=
0
;
pub
const
GENERIC_RELOC_PAIR
:
u8
=
1
;
pub
const
GENERIC_RELOC_SECTDIFF
:
u8
=
2
;
pub
const
GENERIC_RELOC_PB_LA_PTR
:
u8
=
3
;
pub
const
GENERIC_RELOC_LOCAL_SECTDIFF
:
u8
=
4
;
pub
const
GENERIC_RELOC_TLV
:
u8
=
5
;
pub
const
ARM_RELOC_VANILLA
:
u8
=
0
;
pub
const
ARM_RELOC_PAIR
:
u8
=
1
;
pub
const
ARM_RELOC_SECTDIFF
:
u8
=
2
;
pub
const
ARM_RELOC_LOCAL_SECTDIFF
:
u8
=
3
;
pub
const
ARM_RELOC_PB_LA_PTR
:
u8
=
4
;
pub
const
ARM_RELOC_BR24
:
u8
=
5
;
pub
const
ARM_THUMB_RELOC_BR22
:
u8
=
6
;
pub
const
ARM_THUMB_32BIT_BRANCH
:
u8
=
7
;
pub
const
ARM_RELOC_HALF
:
u8
=
8
;
pub
const
ARM_RELOC_HALF_SECTDIFF
:
u8
=
9
;
pub
const
ARM64_RELOC_UNSIGNED
:
u8
=
0
;
pub
const
ARM64_RELOC_SUBTRACTOR
:
u8
=
1
;
pub
const
ARM64_RELOC_BRANCH26
:
u8
=
2
;
pub
const
ARM64_RELOC_PAGE21
:
u8
=
3
;
pub
const
ARM64_RELOC_PAGEOFF12
:
u8
=
4
;
pub
const
ARM64_RELOC_GOT_LOAD_PAGE21
:
u8
=
5
;
pub
const
ARM64_RELOC_GOT_LOAD_PAGEOFF12
:
u8
=
6
;
pub
const
ARM64_RELOC_POINTER_TO_GOT
:
u8
=
7
;
pub
const
ARM64_RELOC_TLVP_LOAD_PAGE21
:
u8
=
8
;
pub
const
ARM64_RELOC_TLVP_LOAD_PAGEOFF12
:
u8
=
9
;
pub
const
ARM64_RELOC_ADDEND
:
u8
=
10
;
pub
const
ARM64_RELOC_AUTHENTICATED_POINTER
:
u8
=
11
;
pub
const
PPC_RELOC_VANILLA
:
u8
=
0
;
pub
const
PPC_RELOC_PAIR
:
u8
=
1
;
pub
const
PPC_RELOC_BR14
:
u8
=
2
;
pub
const
PPC_RELOC_BR24
:
u8
=
3
;
pub
const
PPC_RELOC_HI16
:
u8
=
4
;
pub
const
PPC_RELOC_LO16
:
u8
=
5
;
pub
const
PPC_RELOC_HA16
:
u8
=
6
;
pub
const
PPC_RELOC_LO14
:
u8
=
7
;
pub
const
PPC_RELOC_SECTDIFF
:
u8
=
8
;
pub
const
PPC_RELOC_PB_LA_PTR
:
u8
=
9
;
pub
const
PPC_RELOC_HI16_SECTDIFF
:
u8
=
10
;
pub
const
PPC_RELOC_LO16_SECTDIFF
:
u8
=
11
;
pub
const
PPC_RELOC_HA16_SECTDIFF
:
u8
=
12
;
pub
const
PPC_RELOC_JBSR
:
u8
=
13
;
pub
const
PPC_RELOC_LO14_SECTDIFF
:
u8
=
14
;
pub
const
PPC_RELOC_LOCAL_SECTDIFF
:
u8
=
15
;
pub
const
X86_64_RELOC_UNSIGNED
:
u8
=
0
;
pub
const
X86_64_RELOC_SIGNED
:
u8
=
1
;
pub
const
X86_64_RELOC_BRANCH
:
u8
=
2
;
pub
const
X86_64_RELOC_GOT_LOAD
:
u8
=
3
;
pub
const
X86_64_RELOC_GOT
:
u8
=
4
;
pub
const
X86_64_RELOC_SUBTRACTOR
:
u8
=
5
;
pub
const
X86_64_RELOC_SIGNED_1
:
u8
=
6
;
pub
const
X86_64_RELOC_SIGNED_2
:
u8
=
7
;
pub
const
X86_64_RELOC_SIGNED_4
:
u8
=
8
;
pub
const
X86_64_RELOC_TLV
:
u8
=
9
;
unsafe_impl_pod
!
(
FatHeader
FatArch32
FatArch64
)
;
unsafe_impl_endian_pod
!
(
DyldCacheHeader
DyldCacheMappingInfo
DyldCacheImageInfo
DyldSubCacheInfo
MachHeader32
MachHeader64
LoadCommand
LcStr
SegmentCommand32
SegmentCommand64
Section32
Section64
Fvmlib
FvmlibCommand
Dylib
DylibCommand
SubFrameworkCommand
SubClientCommand
SubUmbrellaCommand
SubLibraryCommand
PreboundDylibCommand
DylinkerCommand
ThreadCommand
RoutinesCommand32
RoutinesCommand64
SymtabCommand
DysymtabCommand
DylibTableOfContents
DylibModule32
DylibModule64
DylibReference
TwolevelHintsCommand
TwolevelHint
PrebindCksumCommand
UuidCommand
RpathCommand
LinkeditDataCommand
FilesetEntryCommand
EncryptionInfoCommand32
EncryptionInfoCommand64
VersionMinCommand
BuildVersionCommand
BuildToolVersion
DyldInfoCommand
LinkerOptionCommand
SymsegCommand
IdentCommand
FvmfileCommand
EntryPointCommand
SourceVersionCommand
DataInCodeEntry
/
/
TlvDescriptor
NoteCommand
Nlist32
Nlist64
Relocation
)
;
