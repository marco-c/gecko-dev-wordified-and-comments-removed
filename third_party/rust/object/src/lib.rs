#
!
[
deny
(
missing_docs
)
]
#
!
[
deny
(
missing_debug_implementations
)
]
#
!
[
no_std
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
feature
(
alloc
)
)
]
#
[
cfg
(
feature
=
"
std
"
)
]
#
[
macro_use
]
extern
crate
std
;
#
[
cfg
(
all
(
not
(
feature
=
"
std
"
)
feature
=
"
compression
"
)
)
]
#
[
macro_use
]
extern
crate
alloc
;
#
[
cfg
(
all
(
not
(
feature
=
"
std
"
)
not
(
feature
=
"
compression
"
)
)
)
]
extern
crate
alloc
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
extern
crate
core
as
std
;
#
[
cfg
(
feature
=
"
compression
"
)
]
extern
crate
flate2
;
extern
crate
goblin
;
extern
crate
scroll
;
extern
crate
uuid
;
#
[
cfg
(
feature
=
"
wasm
"
)
]
extern
crate
parity_wasm
;
#
[
cfg
(
feature
=
"
std
"
)
]
mod
alloc
{
pub
use
std
:
:
borrow
;
pub
use
std
:
:
fmt
;
pub
use
std
:
:
vec
;
}
use
alloc
:
:
borrow
:
:
Cow
;
use
alloc
:
:
fmt
;
use
alloc
:
:
vec
:
:
Vec
;
mod
elf
;
pub
use
elf
:
:
*
;
mod
macho
;
pub
use
macho
:
:
*
;
mod
pe
;
pub
use
pe
:
:
*
;
mod
traits
;
pub
use
traits
:
:
*
;
#
[
cfg
(
feature
=
"
wasm
"
)
]
mod
wasm
;
#
[
cfg
(
feature
=
"
wasm
"
)
]
pub
use
wasm
:
:
*
;
pub
use
uuid
:
:
Uuid
;
#
[
cfg
(
target_os
=
"
linux
"
)
]
pub
type
NativeFile
<
'
data
>
=
ElfFile
<
'
data
>
;
#
[
cfg
(
target_os
=
"
macos
"
)
]
pub
type
NativeFile
<
'
data
>
=
MachOFile
<
'
data
>
;
#
[
cfg
(
target_os
=
"
windows
"
)
]
pub
type
NativeFile
<
'
data
>
=
PeFile
<
'
data
>
;
#
[
cfg
(
all
(
feature
=
"
wasm
"
target_arch
=
"
wasm32
"
)
)
]
pub
type
NativeFile
<
'
data
>
=
WasmFile
<
'
data
>
;
#
[
derive
(
Debug
)
]
pub
struct
File
<
'
data
>
{
inner
:
FileInternal
<
'
data
>
}
#
[
derive
(
Debug
)
]
enum
FileInternal
<
'
data
>
{
Elf
(
ElfFile
<
'
data
>
)
MachO
(
MachOFile
<
'
data
>
)
Pe
(
PeFile
<
'
data
>
)
#
[
cfg
(
feature
=
"
wasm
"
)
]
Wasm
(
WasmFile
)
}
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
enum
Machine
{
Other
Arm
Arm64
X86
#
[
allow
(
non_camel_case_types
)
]
X86_64
}
#
[
derive
(
Debug
)
]
pub
struct
SegmentIterator
<
'
data
'
file
>
where
'
data
:
'
file
{
inner
:
SegmentIteratorInternal
<
'
data
'
file
>
}
#
[
derive
(
Debug
)
]
enum
SegmentIteratorInternal
<
'
data
'
file
>
where
'
data
:
'
file
{
Elf
(
ElfSegmentIterator
<
'
data
'
file
>
)
MachO
(
MachOSegmentIterator
<
'
data
'
file
>
)
Pe
(
PeSegmentIterator
<
'
data
'
file
>
)
#
[
cfg
(
feature
=
"
wasm
"
)
]
Wasm
(
WasmSegmentIterator
<
'
file
>
)
}
pub
struct
Segment
<
'
data
'
file
>
where
'
data
:
'
file
{
inner
:
SegmentInternal
<
'
data
'
file
>
}
#
[
derive
(
Debug
)
]
enum
SegmentInternal
<
'
data
'
file
>
where
'
data
:
'
file
{
Elf
(
ElfSegment
<
'
data
'
file
>
)
MachO
(
MachOSegment
<
'
data
'
file
>
)
Pe
(
PeSegment
<
'
data
'
file
>
)
#
[
cfg
(
feature
=
"
wasm
"
)
]
Wasm
(
WasmSegment
<
'
file
>
)
}
#
[
derive
(
Debug
)
]
pub
struct
SectionIterator
<
'
data
'
file
>
where
'
data
:
'
file
{
inner
:
SectionIteratorInternal
<
'
data
'
file
>
}
#
[
derive
(
Debug
)
]
enum
SectionIteratorInternal
<
'
data
'
file
>
where
'
data
:
'
file
{
Elf
(
ElfSectionIterator
<
'
data
'
file
>
)
MachO
(
MachOSectionIterator
<
'
data
'
file
>
)
Pe
(
PeSectionIterator
<
'
data
'
file
>
)
#
[
cfg
(
feature
=
"
wasm
"
)
]
Wasm
(
WasmSectionIterator
<
'
file
>
)
}
pub
struct
Section
<
'
data
'
file
>
where
'
data
:
'
file
{
inner
:
SectionInternal
<
'
data
'
file
>
}
enum
SectionInternal
<
'
data
'
file
>
where
'
data
:
'
file
{
Elf
(
ElfSection
<
'
data
'
file
>
)
MachO
(
MachOSection
<
'
data
>
)
Pe
(
PeSection
<
'
data
'
file
>
)
#
[
cfg
(
feature
=
"
wasm
"
)
]
Wasm
(
WasmSection
<
'
file
>
)
}
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
enum
SectionKind
{
Unknown
Text
Data
ReadOnlyData
UninitializedData
Other
}
#
[
derive
(
Debug
)
]
pub
struct
SymbolIterator
<
'
data
'
file
>
where
'
data
:
'
file
{
inner
:
SymbolIteratorInternal
<
'
data
'
file
>
}
#
[
derive
(
Debug
)
]
enum
SymbolIteratorInternal
<
'
data
'
file
>
where
'
data
:
'
file
{
Elf
(
ElfSymbolIterator
<
'
data
'
file
>
)
MachO
(
MachOSymbolIterator
<
'
data
>
)
Pe
(
PeSymbolIterator
<
'
data
'
file
>
)
#
[
cfg
(
feature
=
"
wasm
"
)
]
Wasm
(
WasmSymbolIterator
<
'
file
>
)
}
#
[
derive
(
Debug
)
]
pub
struct
Symbol
<
'
data
>
{
kind
:
SymbolKind
section_kind
:
Option
<
SectionKind
>
global
:
bool
name
:
Option
<
&
'
data
str
>
address
:
u64
size
:
u64
}
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
enum
SymbolKind
{
Unknown
Text
Data
Section
File
Common
Tls
}
#
[
derive
(
Debug
)
]
pub
struct
SymbolMap
<
'
data
>
{
symbols
:
Vec
<
Symbol
<
'
data
>
>
}
macro_rules
!
with_inner
{
(
inner
:
expr
enum
:
ident
|
var
:
ident
|
body
:
expr
)
=
>
{
match
inner
{
enum
:
:
Elf
(
ref
var
)
=
>
body
enum
:
:
MachO
(
ref
var
)
=
>
body
enum
:
:
Pe
(
ref
var
)
=
>
body
#
[
cfg
(
feature
=
"
wasm
"
)
]
enum
:
:
Wasm
(
ref
var
)
=
>
body
}
}
;
}
macro_rules
!
with_inner_mut
{
(
inner
:
expr
enum
:
ident
|
var
:
ident
|
body
:
expr
)
=
>
{
match
inner
{
enum
:
:
Elf
(
ref
mut
var
)
=
>
body
enum
:
:
MachO
(
ref
mut
var
)
=
>
body
enum
:
:
Pe
(
ref
mut
var
)
=
>
body
#
[
cfg
(
feature
=
"
wasm
"
)
]
enum
:
:
Wasm
(
ref
mut
var
)
=
>
body
}
}
;
}
macro_rules
!
map_inner
{
(
inner
:
expr
from
:
ident
to
:
ident
|
var
:
ident
|
body
:
expr
)
=
>
{
match
inner
{
from
:
:
Elf
(
ref
var
)
=
>
to
:
:
Elf
(
body
)
from
:
:
MachO
(
ref
var
)
=
>
to
:
:
MachO
(
body
)
from
:
:
Pe
(
ref
var
)
=
>
to
:
:
Pe
(
body
)
#
[
cfg
(
feature
=
"
wasm
"
)
]
from
:
:
Wasm
(
ref
var
)
=
>
to
:
:
Wasm
(
body
)
}
}
;
}
macro_rules
!
next_inner
{
(
inner
:
expr
from
:
ident
to
:
ident
)
=
>
{
match
inner
{
from
:
:
Elf
(
ref
mut
iter
)
=
>
iter
.
next
(
)
.
map
(
to
:
:
Elf
)
from
:
:
MachO
(
ref
mut
iter
)
=
>
iter
.
next
(
)
.
map
(
to
:
:
MachO
)
from
:
:
Pe
(
ref
mut
iter
)
=
>
iter
.
next
(
)
.
map
(
to
:
:
Pe
)
#
[
cfg
(
feature
=
"
wasm
"
)
]
from
:
:
Wasm
(
ref
mut
iter
)
=
>
iter
.
next
(
)
.
map
(
to
:
:
Wasm
)
}
}
;
}
#
[
cfg
(
feature
=
"
wasm
"
)
]
fn
parse_wasm
(
data
:
&
[
u8
]
)
-
>
Result
<
Option
<
File
>
&
'
static
str
>
{
const
WASM_MAGIC
:
&
[
u8
]
=
&
[
0x00
0x61
0x73
0x6D
]
;
if
&
data
[
.
.
4
]
=
=
WASM_MAGIC
{
let
inner
=
FileInternal
:
:
Wasm
(
WasmFile
:
:
parse
(
data
)
?
)
;
return
Ok
(
Some
(
File
{
inner
}
)
)
;
}
Ok
(
None
)
}
#
[
cfg
(
not
(
feature
=
"
wasm
"
)
)
]
fn
parse_wasm
(
_data
:
&
[
u8
]
)
-
>
Result
<
Option
<
File
>
&
'
static
str
>
{
Ok
(
None
)
}
impl
<
'
data
>
File
<
'
data
>
{
pub
fn
parse
(
data
:
&
'
data
[
u8
]
)
-
>
Result
<
Self
&
'
static
str
>
{
if
data
.
len
(
)
<
16
{
return
Err
(
"
File
too
short
"
)
;
}
if
let
Some
(
wasm
)
=
parse_wasm
(
data
)
?
{
return
Ok
(
wasm
)
;
}
let
mut
bytes
=
[
0u8
;
16
]
;
bytes
.
clone_from_slice
(
&
data
[
.
.
16
]
)
;
let
inner
=
match
goblin
:
:
peek_bytes
(
&
bytes
)
.
map_err
(
|
_
|
"
Could
not
parse
file
magic
"
)
?
{
goblin
:
:
Hint
:
:
Elf
(
_
)
=
>
FileInternal
:
:
Elf
(
ElfFile
:
:
parse
(
data
)
?
)
goblin
:
:
Hint
:
:
Mach
(
_
)
=
>
FileInternal
:
:
MachO
(
MachOFile
:
:
parse
(
data
)
?
)
goblin
:
:
Hint
:
:
PE
=
>
FileInternal
:
:
Pe
(
PeFile
:
:
parse
(
data
)
?
)
_
=
>
return
Err
(
"
Unknown
file
magic
"
)
}
;
Ok
(
File
{
inner
}
)
}
}
impl
<
'
data
'
file
>
Object
<
'
data
'
file
>
for
File
<
'
data
>
where
'
data
:
'
file
{
type
Segment
=
Segment
<
'
data
'
file
>
;
type
SegmentIterator
=
SegmentIterator
<
'
data
'
file
>
;
type
Section
=
Section
<
'
data
'
file
>
;
type
SectionIterator
=
SectionIterator
<
'
data
'
file
>
;
type
SymbolIterator
=
SymbolIterator
<
'
data
'
file
>
;
fn
machine
(
&
self
)
-
>
Machine
{
with_inner
!
(
self
.
inner
FileInternal
|
x
|
x
.
machine
(
)
)
}
fn
segments
(
&
'
file
self
)
-
>
SegmentIterator
<
'
data
'
file
>
{
SegmentIterator
{
inner
:
map_inner
!
(
self
.
inner
FileInternal
SegmentIteratorInternal
|
x
|
{
x
.
segments
(
)
}
)
}
}
fn
section_data_by_name
(
&
self
section_name
:
&
str
)
-
>
Option
<
Cow
<
'
data
[
u8
]
>
>
{
with_inner
!
(
self
.
inner
FileInternal
|
x
|
x
.
section_data_by_name
(
section_name
)
)
}
fn
sections
(
&
'
file
self
)
-
>
SectionIterator
<
'
data
'
file
>
{
SectionIterator
{
inner
:
map_inner
!
(
self
.
inner
FileInternal
SectionIteratorInternal
|
x
|
{
x
.
sections
(
)
}
)
}
}
fn
symbols
(
&
'
file
self
)
-
>
SymbolIterator
<
'
data
'
file
>
{
SymbolIterator
{
inner
:
map_inner
!
(
self
.
inner
FileInternal
SymbolIteratorInternal
|
x
|
{
x
.
symbols
(
)
}
)
}
}
fn
dynamic_symbols
(
&
'
file
self
)
-
>
SymbolIterator
<
'
data
'
file
>
{
SymbolIterator
{
inner
:
map_inner
!
(
self
.
inner
FileInternal
SymbolIteratorInternal
|
x
|
{
x
.
dynamic_symbols
(
)
}
)
}
}
fn
symbol_map
(
&
self
)
-
>
SymbolMap
<
'
data
>
{
with_inner
!
(
self
.
inner
FileInternal
|
x
|
x
.
symbol_map
(
)
)
}
fn
is_little_endian
(
&
self
)
-
>
bool
{
with_inner
!
(
self
.
inner
FileInternal
|
x
|
x
.
is_little_endian
(
)
)
}
fn
has_debug_symbols
(
&
self
)
-
>
bool
{
with_inner
!
(
self
.
inner
FileInternal
|
x
|
x
.
has_debug_symbols
(
)
)
}
#
[
inline
]
fn
mach_uuid
(
&
self
)
-
>
Option
<
Uuid
>
{
with_inner
!
(
self
.
inner
FileInternal
|
x
|
x
.
mach_uuid
(
)
)
}
#
[
inline
]
fn
build_id
(
&
self
)
-
>
Option
<
&
'
data
[
u8
]
>
{
with_inner
!
(
self
.
inner
FileInternal
|
x
|
x
.
build_id
(
)
)
}
#
[
inline
]
fn
gnu_debuglink
(
&
self
)
-
>
Option
<
(
&
'
data
[
u8
]
u32
)
>
{
with_inner
!
(
self
.
inner
FileInternal
|
x
|
x
.
gnu_debuglink
(
)
)
}
fn
entry
(
&
self
)
-
>
u64
{
with_inner
!
(
self
.
inner
FileInternal
|
x
|
x
.
entry
(
)
)
}
}
impl
<
'
data
'
file
>
Iterator
for
SegmentIterator
<
'
data
'
file
>
{
type
Item
=
Segment
<
'
data
'
file
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
next_inner
!
(
self
.
inner
SegmentIteratorInternal
SegmentInternal
)
.
map
(
|
inner
|
Segment
{
inner
}
)
}
}
impl
<
'
data
'
file
>
fmt
:
:
Debug
for
Segment
<
'
data
'
file
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
Segment
"
)
.
field
(
"
name
"
&
self
.
name
(
)
.
unwrap_or
(
"
<
unnamed
>
"
)
)
.
field
(
"
address
"
&
self
.
address
(
)
)
.
field
(
"
size
"
&
self
.
data
(
)
.
len
(
)
)
.
finish
(
)
}
}
impl
<
'
data
'
file
>
ObjectSegment
<
'
data
>
for
Segment
<
'
data
'
file
>
{
fn
address
(
&
self
)
-
>
u64
{
with_inner
!
(
self
.
inner
SegmentInternal
|
x
|
x
.
address
(
)
)
}
fn
size
(
&
self
)
-
>
u64
{
with_inner
!
(
self
.
inner
SegmentInternal
|
x
|
x
.
size
(
)
)
}
fn
data
(
&
self
)
-
>
&
'
data
[
u8
]
{
with_inner
!
(
self
.
inner
SegmentInternal
|
x
|
x
.
data
(
)
)
}
fn
name
(
&
self
)
-
>
Option
<
&
str
>
{
with_inner
!
(
self
.
inner
SegmentInternal
|
x
|
x
.
name
(
)
)
}
}
impl
<
'
data
'
file
>
Iterator
for
SectionIterator
<
'
data
'
file
>
{
type
Item
=
Section
<
'
data
'
file
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
next_inner
!
(
self
.
inner
SectionIteratorInternal
SectionInternal
)
.
map
(
|
inner
|
Section
{
inner
}
)
}
}
impl
<
'
data
'
file
>
fmt
:
:
Debug
for
Section
<
'
data
'
file
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
Section
"
)
.
field
(
"
name
"
&
self
.
name
(
)
.
unwrap_or
(
"
<
invalid
name
>
"
)
)
.
field
(
"
address
"
&
self
.
address
(
)
)
.
field
(
"
size
"
&
self
.
data
(
)
.
len
(
)
)
.
field
(
"
kind
"
&
self
.
kind
(
)
)
.
finish
(
)
}
}
impl
<
'
data
'
file
>
ObjectSection
<
'
data
>
for
Section
<
'
data
'
file
>
{
fn
address
(
&
self
)
-
>
u64
{
with_inner
!
(
self
.
inner
SectionInternal
|
x
|
x
.
address
(
)
)
}
fn
size
(
&
self
)
-
>
u64
{
with_inner
!
(
self
.
inner
SectionInternal
|
x
|
x
.
size
(
)
)
}
fn
data
(
&
self
)
-
>
Cow
<
'
data
[
u8
]
>
{
with_inner
!
(
self
.
inner
SectionInternal
|
x
|
x
.
data
(
)
)
}
fn
name
(
&
self
)
-
>
Option
<
&
str
>
{
with_inner
!
(
self
.
inner
SectionInternal
|
x
|
x
.
name
(
)
)
}
fn
segment_name
(
&
self
)
-
>
Option
<
&
str
>
{
with_inner
!
(
self
.
inner
SectionInternal
|
x
|
x
.
segment_name
(
)
)
}
fn
kind
(
&
self
)
-
>
SectionKind
{
with_inner
!
(
self
.
inner
SectionInternal
|
x
|
x
.
kind
(
)
)
}
}
impl
<
'
data
'
file
>
Iterator
for
SymbolIterator
<
'
data
'
file
>
{
type
Item
=
Symbol
<
'
data
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
with_inner_mut
!
(
self
.
inner
SymbolIteratorInternal
|
x
|
x
.
next
(
)
)
}
}
impl
<
'
data
>
Symbol
<
'
data
>
{
#
[
inline
]
pub
fn
kind
(
&
self
)
-
>
SymbolKind
{
self
.
kind
}
#
[
inline
]
pub
fn
section_kind
(
&
self
)
-
>
Option
<
SectionKind
>
{
self
.
section_kind
}
#
[
inline
]
pub
fn
is_undefined
(
&
self
)
-
>
bool
{
self
.
section_kind
.
is_none
(
)
}
#
[
inline
]
pub
fn
is_global
(
&
self
)
-
>
bool
{
self
.
global
}
#
[
inline
]
pub
fn
is_local
(
&
self
)
-
>
bool
{
!
self
.
is_global
(
)
}
#
[
inline
]
pub
fn
name
(
&
self
)
-
>
Option
<
&
'
data
str
>
{
self
.
name
}
#
[
inline
]
pub
fn
address
(
&
self
)
-
>
u64
{
self
.
address
}
#
[
inline
]
pub
fn
size
(
&
self
)
-
>
u64
{
self
.
size
}
}
impl
<
'
data
>
SymbolMap
<
'
data
>
{
pub
fn
get
(
&
self
address
:
u64
)
-
>
Option
<
&
Symbol
<
'
data
>
>
{
self
.
symbols
.
binary_search_by
(
|
symbol
|
{
if
address
<
symbol
.
address
{
std
:
:
cmp
:
:
Ordering
:
:
Greater
}
else
if
address
<
symbol
.
address
+
symbol
.
size
{
std
:
:
cmp
:
:
Ordering
:
:
Equal
}
else
{
std
:
:
cmp
:
:
Ordering
:
:
Less
}
}
)
.
ok
(
)
.
and_then
(
|
index
|
self
.
symbols
.
get
(
index
)
)
}
pub
fn
symbols
(
&
self
)
-
>
&
[
Symbol
<
'
data
>
]
{
&
self
.
symbols
}
fn
filter
(
symbol
:
&
Symbol
)
-
>
bool
{
match
symbol
.
kind
(
)
{
SymbolKind
:
:
Unknown
|
SymbolKind
:
:
Text
|
SymbolKind
:
:
Data
=
>
{
}
SymbolKind
:
:
Section
|
SymbolKind
:
:
File
|
SymbolKind
:
:
Common
|
SymbolKind
:
:
Tls
=
>
{
return
false
}
}
!
symbol
.
is_undefined
(
)
&
&
symbol
.
size
(
)
>
0
}
}
