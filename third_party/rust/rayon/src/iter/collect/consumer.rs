use
super
:
:
super
:
:
noop
:
:
*
;
use
super
:
:
super
:
:
plumbing
:
:
*
;
use
std
:
:
ptr
;
use
std
:
:
slice
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicUsize
Ordering
}
;
pub
(
super
)
struct
CollectConsumer
<
'
c
T
:
Send
+
'
c
>
{
writes
:
&
'
c
AtomicUsize
target
:
&
'
c
mut
[
T
]
}
pub
(
super
)
struct
CollectFolder
<
'
c
T
:
Send
+
'
c
>
{
global_writes
:
&
'
c
AtomicUsize
local_writes
:
usize
target
:
slice
:
:
IterMut
<
'
c
T
>
}
impl
<
'
c
T
:
Send
+
'
c
>
CollectConsumer
<
'
c
T
>
{
pub
(
super
)
fn
new
(
writes
:
&
'
c
AtomicUsize
target
:
&
'
c
mut
[
T
]
)
-
>
Self
{
CollectConsumer
{
writes
target
}
}
}
impl
<
'
c
T
:
Send
+
'
c
>
Consumer
<
T
>
for
CollectConsumer
<
'
c
T
>
{
type
Folder
=
CollectFolder
<
'
c
T
>
;
type
Reducer
=
NoopReducer
;
type
Result
=
(
)
;
fn
split_at
(
self
index
:
usize
)
-
>
(
Self
Self
NoopReducer
)
{
let
CollectConsumer
{
writes
target
}
=
self
;
let
(
left
right
)
=
target
.
split_at_mut
(
index
)
;
(
CollectConsumer
:
:
new
(
writes
left
)
CollectConsumer
:
:
new
(
writes
right
)
NoopReducer
)
}
fn
into_folder
(
self
)
-
>
CollectFolder
<
'
c
T
>
{
CollectFolder
{
global_writes
:
self
.
writes
local_writes
:
0
target
:
self
.
target
.
iter_mut
(
)
}
}
fn
full
(
&
self
)
-
>
bool
{
false
}
}
impl
<
'
c
T
:
Send
+
'
c
>
Folder
<
T
>
for
CollectFolder
<
'
c
T
>
{
type
Result
=
(
)
;
fn
consume
(
mut
self
item
:
T
)
-
>
CollectFolder
<
'
c
T
>
{
let
head
=
self
.
target
.
next
(
)
.
expect
(
"
too
many
values
pushed
to
consumer
"
)
;
unsafe
{
ptr
:
:
write
(
head
item
)
;
}
self
.
local_writes
+
=
1
;
self
}
fn
complete
(
self
)
{
self
.
global_writes
.
fetch_add
(
self
.
local_writes
Ordering
:
:
Relaxed
)
;
}
fn
full
(
&
self
)
-
>
bool
{
false
}
}
impl
<
'
c
T
:
Send
+
'
c
>
UnindexedConsumer
<
T
>
for
CollectConsumer
<
'
c
T
>
{
fn
split_off_left
(
&
self
)
-
>
Self
{
unreachable
!
(
"
CollectConsumer
must
be
indexed
!
"
)
}
fn
to_reducer
(
&
self
)
-
>
Self
:
:
Reducer
{
NoopReducer
}
}
