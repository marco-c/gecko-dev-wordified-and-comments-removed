use
std
:
:
collections
:
:
BinaryHeap
;
use
iter
:
:
plumbing
:
:
*
;
use
iter
:
:
*
;
use
vec
;
#
[
derive
(
Debug
Clone
)
]
pub
struct
IntoIter
<
T
:
Ord
+
Send
>
{
inner
:
vec
:
:
IntoIter
<
T
>
}
impl
<
T
:
Ord
+
Send
>
IntoParallelIterator
for
BinaryHeap
<
T
>
{
type
Item
=
T
;
type
Iter
=
IntoIter
<
T
>
;
fn
into_par_iter
(
self
)
-
>
Self
:
:
Iter
{
IntoIter
{
inner
:
Vec
:
:
from
(
self
)
.
into_par_iter
(
)
}
}
}
delegate_indexed_iterator
!
{
IntoIter
<
T
>
=
>
T
impl
<
T
:
Ord
+
Send
>
}
#
[
derive
(
Debug
)
]
pub
struct
Iter
<
'
a
T
:
Ord
+
Sync
+
'
a
>
{
inner
:
vec
:
:
IntoIter
<
&
'
a
T
>
}
impl
<
'
a
T
:
Ord
+
Sync
>
Clone
for
Iter
<
'
a
T
>
{
fn
clone
(
&
self
)
-
>
Self
{
Iter
{
inner
:
self
.
inner
.
clone
(
)
}
}
}
into_par_vec
!
{
&
'
a
BinaryHeap
<
T
>
=
>
Iter
<
'
a
T
>
impl
<
'
a
T
:
Ord
+
Sync
>
}
delegate_indexed_iterator
!
{
Iter
<
'
a
T
>
=
>
&
'
a
T
impl
<
'
a
T
:
Ord
+
Sync
+
'
a
>
}
