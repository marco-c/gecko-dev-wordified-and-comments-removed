#
[
derive
(
Copy
Clone
PartialEq
Eq
Hash
Debug
)
]
#
[
repr
(
u8
)
]
pub
enum
BreakClass
{
Mandatory
CarriageReturn
LineFeed
CombiningMark
NextLine
Surrogate
WordJoiner
ZeroWidthSpace
NonBreakingGlue
Space
ZeroWidthJoiner
BeforeAndAfter
After
Before
Hyphen
Contingent
ClosePunctuation
CloseParenthesis
Exclamation
Inseparable
NonStarter
OpenPunctuation
Quotation
InfixSeparator
Numeric
Postfix
Prefix
Symbol
Ambiguous
Alphabetic
ConditionalJapaneseStarter
EmojiBase
EmojiModifier
HangulLvSyllable
HangulLvtSyllable
HebrewLetter
Ideographic
HangulLJamo
HangulVJamo
HangulTJamo
RegionalIndicator
ComplexContext
Unknown
}
use
BreakClass
:
:
{
After
as
BA
Alphabetic
as
AL
Ambiguous
as
AI
Before
as
BB
BeforeAndAfter
as
B2
CarriageReturn
as
CR
CloseParenthesis
as
CP
ClosePunctuation
as
CL
CombiningMark
as
CM
ComplexContext
as
SA
ConditionalJapaneseStarter
as
CJ
Contingent
as
CB
EmojiBase
as
EB
EmojiModifier
as
EM
Exclamation
as
EX
HangulLJamo
as
JL
HangulLvSyllable
as
H2
HangulLvtSyllable
as
H3
HangulTJamo
as
JT
HangulVJamo
as
JV
HebrewLetter
as
HL
Hyphen
as
HY
Ideographic
as
ID
InfixSeparator
as
IS
Inseparable
as
IN
LineFeed
as
LF
Mandatory
as
BK
NextLine
as
NL
NonBreakingGlue
as
GL
NonStarter
as
NS
Numeric
as
NU
OpenPunctuation
as
OP
Postfix
as
PO
Prefix
as
PR
Quotation
as
QU
RegionalIndicator
as
RI
Space
as
SP
Surrogate
as
SG
Symbol
as
SY
Unknown
as
XX
WordJoiner
as
WJ
ZeroWidthJoiner
as
ZWJ
ZeroWidthSpace
as
ZW
}
;
const
BMP_LIMIT
:
u32
=
0x10000
;
const
SHIFT_3
:
u32
=
4
;
const
SHIFT_2
:
u32
=
5
+
SHIFT_3
;
const
SHIFT_1
:
u32
=
5
+
SHIFT_2
;
const
BMP_SHIFT
:
u32
=
6
;
const
INDEX_2_BLOCK_LENGTH
:
u32
=
1
<
<
(
SHIFT_1
-
SHIFT_2
)
;
const
INDEX_3_BLOCK_LENGTH
:
u32
=
1
<
<
(
SHIFT_2
-
SHIFT_3
)
;
const
SMALL_DATA_BLOCK_LENGTH
:
u32
=
1
<
<
SHIFT_3
;
const
BMP_DATA_BLOCK_LENGTH
:
u32
=
1
<
<
BMP_SHIFT
;
const
ALLOWED_BREAK_BIT
:
u8
=
0x80
;
const
MANDATORY_BREAK_BIT
:
u8
=
0x40
;
#
[
allow
(
non_upper_case_globals
)
]
const
eot
:
u8
=
43
;
#
[
allow
(
non_upper_case_globals
)
]
const
sot
:
u8
=
44
;
