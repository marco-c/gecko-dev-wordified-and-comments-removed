#
!
[
deny
(
warnings
)
]
extern
crate
env_logger
;
extern
crate
tokio
;
extern
crate
tokio_codec
;
extern
crate
tokio_io
;
use
std
:
:
net
:
:
SocketAddr
;
use
tokio
:
:
net
:
:
{
UdpFramed
UdpSocket
}
;
use
tokio
:
:
prelude
:
:
*
;
use
tokio_codec
:
:
BytesCodec
;
fn
main
(
)
-
>
Result
<
(
)
Box
<
std
:
:
error
:
:
Error
>
>
{
let
_
=
env_logger
:
:
init
(
)
;
let
addr
:
SocketAddr
=
"
127
.
0
.
0
.
1
:
0
"
.
parse
(
)
?
;
let
a
=
UdpSocket
:
:
bind
(
&
addr
)
?
;
let
b
=
UdpSocket
:
:
bind
(
&
addr
)
?
;
let
b_addr
=
b
.
local_addr
(
)
?
;
let
(
a_sink
a_stream
)
=
UdpFramed
:
:
new
(
a
BytesCodec
:
:
new
(
)
)
.
split
(
)
;
let
(
b_sink
b_stream
)
=
UdpFramed
:
:
new
(
b
BytesCodec
:
:
new
(
)
)
.
split
(
)
;
let
a
=
a_sink
.
send
(
(
"
PING
"
.
into
(
)
b_addr
)
)
.
and_then
(
|
a_sink
|
{
let
mut
i
=
0
;
let
a_stream
=
a_stream
.
take
(
4
)
.
map
(
move
|
(
msg
addr
)
|
{
i
+
=
1
;
println
!
(
"
[
a
]
recv
:
{
}
"
String
:
:
from_utf8_lossy
(
&
msg
)
)
;
(
format
!
(
"
PING
{
}
"
i
)
.
into
(
)
addr
)
}
)
;
a_sink
.
send_all
(
a_stream
)
}
)
;
let
b_stream
=
b_stream
.
map
(
|
(
msg
addr
)
|
{
println
!
(
"
[
b
]
recv
:
{
}
"
String
:
:
from_utf8_lossy
(
&
msg
)
)
;
(
"
PONG
"
.
into
(
)
addr
)
}
)
;
let
b
=
b_sink
.
send_all
(
b_stream
)
;
tokio
:
:
run
(
{
b
.
join
(
a
)
.
map
(
|
_
|
(
)
)
.
map_err
(
|
e
|
println
!
(
"
error
=
{
:
?
}
"
e
)
)
}
)
;
Ok
(
(
)
)
}
