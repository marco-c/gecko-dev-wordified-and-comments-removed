#
!
[
deny
(
missing_docs
)
]
use
ffi_support
:
:
FfiStr
;
use
std
:
:
ffi
:
:
CString
;
use
std
:
:
sync
:
:
Mutex
;
pub
use
glean_core
:
:
{
Configuration
Error
Result
}
;
pub
mod
metrics
;
lazy_static
:
:
lazy_static
!
{
static
ref
GLEAN_HANDLE
:
Mutex
<
u64
>
=
Mutex
:
:
new
(
0
)
;
}
fn
with_glean
<
F
R
>
(
f
:
F
)
-
>
R
where
F
:
Fn
(
u64
)
-
>
R
{
let
lock
=
GLEAN_HANDLE
.
lock
(
)
.
unwrap
(
)
;
debug_assert
!
(
*
lock
!
=
0
)
;
f
(
*
lock
)
}
pub
fn
initialize
(
cfg
:
Configuration
)
-
>
Result
<
(
)
>
{
unsafe
{
let
data_dir
=
CString
:
:
new
(
cfg
.
data_path
)
.
unwrap
(
)
;
let
package_name
=
CString
:
:
new
(
cfg
.
application_id
)
.
unwrap
(
)
;
let
upload_enabled
=
cfg
.
upload_enabled
;
let
max_events
=
cfg
.
max_events
.
map
(
|
m
|
m
as
i32
)
;
let
ffi_cfg
=
glean_ffi
:
:
FfiConfiguration
{
data_dir
:
FfiStr
:
:
from_cstr
(
&
data_dir
)
package_name
:
FfiStr
:
:
from_cstr
(
&
package_name
)
upload_enabled
:
upload_enabled
as
u8
max_events
:
max_events
.
as_ref
(
)
delay_ping_lifetime_io
:
false
as
u8
}
;
let
handle
=
glean_ffi
:
:
glean_initialize
(
&
ffi_cfg
)
;
if
handle
=
=
0
{
return
Err
(
glean_core
:
:
Error
:
:
utf8_error
(
)
)
;
}
let
mut
lock
=
GLEAN_HANDLE
.
lock
(
)
.
unwrap
(
)
;
*
lock
=
handle
;
Ok
(
(
)
)
}
}
pub
fn
set_upload_enabled
(
flag
:
bool
)
-
>
bool
{
with_glean
(
|
glean_handle
|
{
glean_ffi
:
:
glean_set_upload_enabled
(
glean_handle
flag
as
u8
)
;
glean_ffi
:
:
glean_is_upload_enabled
(
glean_handle
)
!
=
0
}
)
}
pub
fn
is_upload_enabled
(
)
-
>
bool
{
with_glean
(
|
glean_handle
|
glean_ffi
:
:
glean_is_upload_enabled
(
glean_handle
)
!
=
0
)
}
pub
fn
register_ping_type
(
ping
:
&
metrics
:
:
PingType
)
{
with_glean
(
|
glean_handle
|
{
glean_ffi
:
:
ping_type
:
:
glean_register_ping_type
(
glean_handle
ping
.
handle
)
;
}
)
}
pub
fn
send_ping
(
ping
:
&
metrics
:
:
PingType
)
-
>
bool
{
send_ping_by_name
(
&
ping
.
name
)
}
pub
fn
send_ping_by_name
(
ping
:
&
str
)
-
>
bool
{
send_pings_by_name
(
&
[
ping
]
)
}
pub
fn
send_pings_by_name
(
pings
:
&
[
&
str
]
)
-
>
bool
{
let
array
:
Vec
<
CString
>
=
pings
.
iter
(
)
.
map
(
|
s
|
CString
:
:
new
(
*
s
)
.
unwrap
(
)
)
.
collect
(
)
;
let
ptr_array
:
Vec
<
*
const
_
>
=
array
.
iter
(
)
.
map
(
|
s
|
s
.
as_ptr
(
)
)
.
collect
(
)
;
with_glean
(
|
glean_handle
|
{
let
res
=
glean_ffi
:
:
glean_send_pings_by_name
(
glean_handle
ptr_array
.
as_ptr
(
)
array
.
len
(
)
as
i32
)
;
res
!
=
0
}
)
}
