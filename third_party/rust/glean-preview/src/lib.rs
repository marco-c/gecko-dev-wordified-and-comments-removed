#
!
[
deny
(
missing_docs
)
]
use
once_cell
:
:
sync
:
:
OnceCell
;
use
std
:
:
sync
:
:
Mutex
;
pub
use
configuration
:
:
Configuration
;
pub
use
core_metrics
:
:
ClientInfoMetrics
;
pub
use
glean_core
:
:
{
CommonMetricData
Error
Glean
Lifetime
Result
}
;
mod
configuration
;
mod
core_metrics
;
pub
mod
metrics
;
mod
system
;
#
[
derive
(
Debug
)
]
struct
GleanWrapper
{
instance
:
Glean
channel
:
Option
<
String
>
client_info
:
ClientInfoMetrics
}
static
GLEAN
:
OnceCell
<
Mutex
<
GleanWrapper
>
>
=
OnceCell
:
:
new
(
)
;
fn
global_glean
(
)
-
>
&
'
static
Mutex
<
GleanWrapper
>
{
GLEAN
.
get
(
)
.
unwrap
(
)
}
fn
setup_glean
(
glean
:
GleanWrapper
)
-
>
Result
<
(
)
>
{
if
GLEAN
.
get
(
)
.
is_none
(
)
{
GLEAN
.
set
(
Mutex
:
:
new
(
glean
)
)
.
unwrap
(
)
;
}
else
{
let
mut
lock
=
GLEAN
.
get
(
)
.
unwrap
(
)
.
lock
(
)
.
unwrap
(
)
;
*
lock
=
glean
;
}
Ok
(
(
)
)
}
fn
with_glean
<
F
R
>
(
f
:
F
)
-
>
R
where
F
:
Fn
(
&
Glean
)
-
>
R
{
let
lock
=
global_glean
(
)
.
lock
(
)
.
unwrap
(
)
;
f
(
&
lock
.
instance
)
}
fn
with_glean_wrapper_mut
<
F
R
>
(
f
:
F
)
-
>
R
where
F
:
Fn
(
&
mut
GleanWrapper
)
-
>
R
{
let
mut
lock
=
global_glean
(
)
.
lock
(
)
.
unwrap
(
)
;
f
(
&
mut
lock
)
}
fn
with_glean_mut
<
F
R
>
(
f
:
F
)
-
>
R
where
F
:
Fn
(
&
mut
Glean
)
-
>
R
{
let
mut
lock
=
global_glean
(
)
.
lock
(
)
.
unwrap
(
)
;
f
(
&
mut
lock
.
instance
)
}
pub
fn
initialize
(
cfg
:
Configuration
client_info
:
ClientInfoMetrics
)
-
>
Result
<
(
)
>
{
let
core_cfg
=
glean_core
:
:
Configuration
{
upload_enabled
:
cfg
.
upload_enabled
data_path
:
cfg
.
data_path
.
clone
(
)
application_id
:
cfg
.
application_id
.
clone
(
)
max_events
:
cfg
.
max_events
delay_ping_lifetime_io
:
cfg
.
delay_ping_lifetime_io
}
;
let
glean
=
Glean
:
:
new
(
core_cfg
)
?
;
initialize_core_metrics
(
&
glean
&
client_info
cfg
.
channel
.
clone
(
)
)
;
let
wrapper
=
GleanWrapper
{
instance
:
glean
channel
:
cfg
.
channel
client_info
}
;
setup_glean
(
wrapper
)
?
;
Ok
(
(
)
)
}
fn
initialize_core_metrics
(
glean
:
&
Glean
client_info
:
&
ClientInfoMetrics
channel
:
Option
<
String
>
)
{
let
core_metrics
=
core_metrics
:
:
InternalMetrics
:
:
new
(
)
;
core_metrics
.
app_build
.
set
(
glean
&
client_info
.
app_build
[
.
.
]
)
;
core_metrics
.
app_display_version
.
set
(
glean
&
client_info
.
app_display_version
[
.
.
]
)
;
if
let
Some
(
app_channel
)
=
channel
{
core_metrics
.
app_channel
.
set
(
glean
app_channel
)
;
}
core_metrics
.
os
.
set
(
glean
system
:
:
OS
.
to_string
(
)
)
;
core_metrics
.
os_version
.
set
(
glean
"
unknown
"
.
to_string
(
)
)
;
core_metrics
.
architecture
.
set
(
glean
system
:
:
ARCH
.
to_string
(
)
)
;
core_metrics
.
device_manufacturer
.
set
(
glean
"
unknown
"
.
to_string
(
)
)
;
core_metrics
.
device_model
.
set
(
glean
"
unknown
"
.
to_string
(
)
)
;
}
pub
fn
set_upload_enabled
(
enabled
:
bool
)
-
>
bool
{
with_glean_wrapper_mut
(
|
glean
|
{
let
old_enabled
=
glean
.
instance
.
is_upload_enabled
(
)
;
glean
.
instance
.
set_upload_enabled
(
enabled
)
;
if
!
old_enabled
&
&
enabled
{
initialize_core_metrics
(
&
glean
.
instance
&
glean
.
client_info
glean
.
channel
.
clone
(
)
)
;
}
enabled
}
)
}
pub
fn
is_upload_enabled
(
)
-
>
bool
{
with_glean
(
|
glean
|
glean
.
is_upload_enabled
(
)
)
}
pub
fn
register_ping_type
(
ping
:
&
metrics
:
:
PingType
)
{
with_glean_mut
(
|
glean
|
{
glean
.
register_ping_type
(
&
ping
.
ping_type
)
;
}
)
}
pub
fn
submit_ping
(
ping
:
&
metrics
:
:
PingType
)
-
>
bool
{
submit_ping_by_name
(
&
ping
.
name
)
}
pub
fn
submit_ping_by_name
(
ping
:
&
str
)
-
>
bool
{
submit_pings_by_name
(
&
[
ping
.
to_string
(
)
]
)
}
pub
fn
submit_pings_by_name
(
pings
:
&
[
String
]
)
-
>
bool
{
with_glean
(
|
glean
|
glean
.
submit_pings_by_name
(
pings
)
)
}
#
[
cfg
(
test
)
]
mod
test
;
