use
std
:
:
io
;
use
std
:
:
mem
;
use
winapi
:
:
shared
:
:
minwindef
:
:
{
DWORD
WORD
}
;
use
winapi
:
:
um
:
:
consoleapi
;
use
winapi
:
:
um
:
:
processenv
;
use
winapi
:
:
um
:
:
winbase
:
:
{
STD_ERROR_HANDLE
STD_OUTPUT_HANDLE
}
;
use
winapi
:
:
um
:
:
wincon
:
:
{
self
FOREGROUND_BLUE
as
FG_BLUE
FOREGROUND_GREEN
as
FG_GREEN
FOREGROUND_RED
as
FG_RED
FOREGROUND_INTENSITY
as
FG_INTENSITY
}
;
const
FG_CYAN
:
WORD
=
FG_BLUE
|
FG_GREEN
;
const
FG_MAGENTA
:
WORD
=
FG_BLUE
|
FG_RED
;
const
FG_YELLOW
:
WORD
=
FG_GREEN
|
FG_RED
;
const
FG_WHITE
:
WORD
=
FG_BLUE
|
FG_GREEN
|
FG_RED
;
#
[
derive
(
Debug
)
]
pub
struct
Console
{
handle_id
:
DWORD
start_attr
:
TextAttributes
cur_attr
:
TextAttributes
}
impl
Console
{
fn
create_for_stream
(
handle_id
:
DWORD
)
-
>
io
:
:
Result
<
Console
>
{
let
mut
info
=
unsafe
{
mem
:
:
zeroed
(
)
}
;
let
res
=
unsafe
{
let
handle
=
processenv
:
:
GetStdHandle
(
handle_id
)
;
wincon
:
:
GetConsoleScreenBufferInfo
(
handle
&
mut
info
)
}
;
if
res
=
=
0
{
return
Err
(
io
:
:
Error
:
:
last_os_error
(
)
)
;
}
let
attr
=
TextAttributes
:
:
from_word
(
info
.
wAttributes
)
;
Ok
(
Console
{
handle_id
:
handle_id
start_attr
:
attr
cur_attr
:
attr
}
)
}
pub
fn
stdout
(
)
-
>
io
:
:
Result
<
Console
>
{
Self
:
:
create_for_stream
(
STD_OUTPUT_HANDLE
)
}
pub
fn
stderr
(
)
-
>
io
:
:
Result
<
Console
>
{
Self
:
:
create_for_stream
(
STD_ERROR_HANDLE
)
}
fn
set
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
let
attr
=
self
.
cur_attr
.
to_word
(
)
;
let
res
=
unsafe
{
let
handle
=
processenv
:
:
GetStdHandle
(
self
.
handle_id
)
;
wincon
:
:
SetConsoleTextAttribute
(
handle
attr
)
}
;
if
res
=
=
0
{
return
Err
(
io
:
:
Error
:
:
last_os_error
(
)
)
;
}
Ok
(
(
)
)
}
pub
fn
fg
(
&
mut
self
intense
:
Intense
color
:
Color
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
cur_attr
.
fg_color
=
color
;
self
.
cur_attr
.
fg_intense
=
intense
;
self
.
set
(
)
}
pub
fn
bg
(
&
mut
self
intense
:
Intense
color
:
Color
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
cur_attr
.
bg_color
=
color
;
self
.
cur_attr
.
bg_intense
=
intense
;
self
.
set
(
)
}
pub
fn
reset
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
cur_attr
=
self
.
start_attr
;
self
.
set
(
)
}
pub
fn
set_virtual_terminal_processing
(
&
mut
self
yes
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
let
vt
=
wincon
:
:
ENABLE_VIRTUAL_TERMINAL_PROCESSING
;
let
mut
old_mode
=
0
;
let
handle
=
unsafe
{
processenv
:
:
GetStdHandle
(
self
.
handle_id
)
}
;
if
unsafe
{
consoleapi
:
:
GetConsoleMode
(
handle
&
mut
old_mode
)
}
=
=
0
{
return
Err
(
io
:
:
Error
:
:
last_os_error
(
)
)
;
}
let
new_mode
=
if
yes
{
old_mode
|
vt
}
else
{
old_mode
&
!
vt
}
;
if
old_mode
=
=
new_mode
{
return
Ok
(
(
)
)
;
}
if
unsafe
{
consoleapi
:
:
SetConsoleMode
(
handle
new_mode
)
}
=
=
0
{
return
Err
(
io
:
:
Error
:
:
last_os_error
(
)
)
;
}
Ok
(
(
)
)
}
}
#
[
derive
(
Copy
Clone
Debug
Eq
PartialEq
)
]
struct
TextAttributes
{
fg_color
:
Color
fg_intense
:
Intense
bg_color
:
Color
bg_intense
:
Intense
}
impl
TextAttributes
{
fn
to_word
(
&
self
)
-
>
WORD
{
let
mut
w
=
0
;
w
|
=
self
.
fg_color
.
to_fg
(
)
;
w
|
=
self
.
fg_intense
.
to_fg
(
)
;
w
|
=
self
.
bg_color
.
to_bg
(
)
;
w
|
=
self
.
bg_intense
.
to_bg
(
)
;
w
}
fn
from_word
(
word
:
WORD
)
-
>
TextAttributes
{
TextAttributes
{
fg_color
:
Color
:
:
from_fg
(
word
)
fg_intense
:
Intense
:
:
from_fg
(
word
)
bg_color
:
Color
:
:
from_bg
(
word
)
bg_intense
:
Intense
:
:
from_bg
(
word
)
}
}
}
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
enum
Intense
{
Yes
No
}
impl
Intense
{
fn
to_bg
(
&
self
)
-
>
WORD
{
self
.
to_fg
(
)
<
<
4
}
fn
from_bg
(
word
:
WORD
)
-
>
Intense
{
Intense
:
:
from_fg
(
word
>
>
4
)
}
fn
to_fg
(
&
self
)
-
>
WORD
{
match
*
self
{
Intense
:
:
No
=
>
0
Intense
:
:
Yes
=
>
FG_INTENSITY
}
}
fn
from_fg
(
word
:
WORD
)
-
>
Intense
{
if
word
&
FG_INTENSITY
>
0
{
Intense
:
:
Yes
}
else
{
Intense
:
:
No
}
}
}
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
enum
Color
{
Black
Blue
Green
Red
Cyan
Magenta
Yellow
White
}
impl
Color
{
fn
to_bg
(
&
self
)
-
>
WORD
{
self
.
to_fg
(
)
<
<
4
}
fn
from_bg
(
word
:
WORD
)
-
>
Color
{
Color
:
:
from_fg
(
word
>
>
4
)
}
fn
to_fg
(
&
self
)
-
>
WORD
{
match
*
self
{
Color
:
:
Black
=
>
0
Color
:
:
Blue
=
>
FG_BLUE
Color
:
:
Green
=
>
FG_GREEN
Color
:
:
Red
=
>
FG_RED
Color
:
:
Cyan
=
>
FG_CYAN
Color
:
:
Magenta
=
>
FG_MAGENTA
Color
:
:
Yellow
=
>
FG_YELLOW
Color
:
:
White
=
>
FG_WHITE
}
}
fn
from_fg
(
word
:
WORD
)
-
>
Color
{
match
word
&
0b111
{
FG_BLUE
=
>
Color
:
:
Blue
FG_GREEN
=
>
Color
:
:
Green
FG_RED
=
>
Color
:
:
Red
FG_CYAN
=
>
Color
:
:
Cyan
FG_MAGENTA
=
>
Color
:
:
Magenta
FG_YELLOW
=
>
Color
:
:
Yellow
FG_WHITE
=
>
Color
:
:
White
_
=
>
Color
:
:
Black
}
}
}
