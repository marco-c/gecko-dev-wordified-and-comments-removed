use
super
:
:
bits
:
:
{
BitIdx
BitPos
Bits
}
;
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
struct
BigEndian
;
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
struct
LittleEndian
;
pub
trait
Cursor
{
const
TYPENAME
:
&
'
static
str
;
fn
at
<
T
:
Bits
>
(
cursor
:
BitIdx
)
-
>
BitPos
;
}
impl
Cursor
for
BigEndian
{
const
TYPENAME
:
&
'
static
str
=
"
BigEndian
"
;
fn
at
<
T
:
Bits
>
(
cursor
:
BitIdx
)
-
>
BitPos
{
assert
!
(
*
cursor
<
T
:
:
SIZE
"
Index
out
of
range
:
{
}
overflows
{
}
"
*
cursor
T
:
:
SIZE
)
;
(
T
:
:
MASK
-
*
cursor
)
.
into
(
)
}
}
impl
Cursor
for
LittleEndian
{
const
TYPENAME
:
&
'
static
str
=
"
LittleEndian
"
;
fn
at
<
T
:
Bits
>
(
cursor
:
BitIdx
)
-
>
BitPos
{
assert
!
(
*
cursor
<
T
:
:
SIZE
"
Index
out
of
range
:
{
}
overflows
{
}
"
*
cursor
T
:
:
SIZE
)
;
(
*
cursor
)
.
into
(
)
}
}
