use
crate
:
:
{
boxed
:
:
BitBox
order
:
:
BitOrder
pointer
:
:
BitPtr
slice
:
:
BitSlice
store
:
:
BitStore
vec
:
:
BitVec
}
;
use
core
:
:
{
marker
:
:
Unpin
mem
:
:
ManuallyDrop
pin
:
:
Pin
}
;
use
tap
:
:
pipe
:
:
Pipe
;
impl
<
O
T
>
BitBox
<
O
T
>
where
O
:
BitOrder
T
:
BitStore
{
#
[
inline
(
always
)
]
#
[
cfg
(
not
(
tarpaulin_include
)
)
]
#
[
deprecated
(
since
=
"
0
.
18
.
0
"
note
=
"
Prefer
:
:
from_bitslice
"
)
]
pub
fn
new
(
x
:
&
BitSlice
<
O
T
>
)
-
>
Self
{
Self
:
:
from_bitslice
(
x
)
}
#
[
inline
]
pub
fn
pin
(
x
:
&
BitSlice
<
O
T
>
)
-
>
Pin
<
Self
>
where
O
:
Unpin
T
:
Unpin
{
x
.
pipe
(
Self
:
:
from_bitslice
)
.
pipe
(
Pin
:
:
new
)
}
#
[
inline
]
pub
unsafe
fn
from_raw
(
raw
:
*
mut
BitSlice
<
O
T
>
)
-
>
Self
{
raw
.
pipe
(
BitPtr
:
:
from_bitslice_ptr_mut
)
.
to_nonnull
(
)
.
pipe
(
|
pointer
|
Self
{
pointer
}
)
}
#
[
cfg_attr
(
not
(
tarpaulin
)
inline
(
always
)
)
]
pub
fn
into_raw
(
b
:
Self
)
-
>
*
mut
BitSlice
<
O
T
>
{
Self
:
:
leak
(
b
)
}
#
[
inline
]
pub
fn
leak
<
'
a
>
(
b
:
Self
)
-
>
&
'
a
mut
BitSlice
<
O
T
>
where
T
:
'
a
{
b
.
pipe
(
ManuallyDrop
:
:
new
)
.
bitptr
(
)
.
to_bitslice_mut
(
)
}
#
[
inline
]
pub
fn
into_bitvec
(
self
)
-
>
BitVec
<
O
T
>
{
let
mut
bitptr
=
self
.
bitptr
(
)
;
let
raw
=
self
.
pipe
(
ManuallyDrop
:
:
new
)
.
with_box
(
|
b
|
unsafe
{
ManuallyDrop
:
:
take
(
b
)
}
)
.
into_vec
(
)
.
pipe
(
ManuallyDrop
:
:
new
)
;
unsafe
{
bitptr
.
set_pointer
(
raw
.
as_ptr
(
)
as
*
const
T
as
*
mut
T
)
;
BitVec
:
:
from_raw_parts
(
bitptr
.
to_bitslice_ptr_mut
(
)
raw
.
capacity
(
)
)
}
}
}
