#
[
cfg
(
doc
)
]
#
[
macro_export
]
macro_rules
!
bail
{
(
msg
:
literal
(
)
?
)
=
>
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
msg
)
)
}
;
(
err
:
expr
(
)
?
)
=
>
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
err
)
)
}
;
(
fmt
:
expr
(
arg
:
tt
)
*
)
=
>
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
fmt
(
arg
)
*
)
)
}
;
}
#
[
cfg
(
not
(
doc
)
)
]
#
[
macro_export
]
macro_rules
!
bail
{
(
"
pattern
does
not
contain
{
}
"
)
=
>
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
Error
:
:
msg
(
"
pattern
does
not
contain
{
}
"
)
)
}
;
(
msg
:
literal
(
)
?
)
=
>
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
msg
)
)
}
;
(
err
:
expr
(
)
?
)
=
>
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
err
)
)
}
;
(
fmt
:
expr
(
arg
:
tt
)
*
)
=
>
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
fmt
(
arg
)
*
)
)
}
;
}
#
[
cfg
(
doc
)
]
#
[
macro_export
]
macro_rules
!
ensure
{
(
cond
:
expr
(
)
?
)
=
>
{
if
!
cond
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
Error
:
:
msg
(
crate
:
:
private
:
:
concat
!
(
"
Condition
failed
:
"
crate
:
:
private
:
:
stringify
!
(
cond
)
"
"
)
)
)
;
}
}
;
(
cond
:
expr
msg
:
literal
(
)
?
)
=
>
{
if
!
cond
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
msg
)
)
;
}
}
;
(
cond
:
expr
err
:
expr
(
)
?
)
=
>
{
if
!
cond
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
err
)
)
;
}
}
;
(
cond
:
expr
fmt
:
expr
(
arg
:
tt
)
*
)
=
>
{
if
!
cond
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
fmt
(
arg
)
*
)
)
;
}
}
;
}
#
[
cfg
(
not
(
doc
)
)
]
#
[
macro_export
]
macro_rules
!
ensure
{
(
(
tt
:
tt
)
*
)
=
>
{
crate
:
:
__parse_ensure
!
(
/
*
state
*
/
0
/
*
stack
*
/
(
)
/
*
bail
*
/
(
(
tt
)
*
)
/
*
fuel
*
/
(
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
)
/
*
parse
*
/
{
(
)
}
/
*
dup
*
/
(
(
tt
)
*
)
/
*
rest
*
/
(
tt
)
*
)
}
;
}
#
[
macro_export
]
macro_rules
!
anyhow
{
(
msg
:
literal
(
)
?
)
=
>
(
{
let
error
=
crate
:
:
private
:
:
format_err
(
crate
:
:
private
:
:
format_args
!
(
msg
)
)
;
error
}
)
;
(
err
:
expr
(
)
?
)
=
>
(
{
use
crate
:
:
private
:
:
kind
:
:
*
;
let
error
=
match
err
{
error
=
>
(
&
error
)
.
anyhow_kind
(
)
.
new
(
error
)
}
;
error
}
)
;
(
fmt
:
expr
(
arg
:
tt
)
*
)
=
>
{
crate
:
:
Error
:
:
msg
(
crate
:
:
private
:
:
format
!
(
fmt
(
arg
)
*
)
)
}
;
}
