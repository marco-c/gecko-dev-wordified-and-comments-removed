#
[
macro_export
]
macro_rules
!
bail
{
(
msg
:
literal
(
)
?
)
=
>
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
msg
)
)
;
}
;
(
err
:
expr
(
)
?
)
=
>
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
err
)
)
;
}
;
(
fmt
:
expr
(
arg
:
tt
)
*
)
=
>
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
fmt
(
arg
)
*
)
)
;
}
;
}
#
[
macro_export
]
macro_rules
!
ensure
{
(
cond
:
expr
msg
:
literal
(
)
?
)
=
>
{
if
!
cond
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
msg
)
)
;
}
}
;
(
cond
:
expr
err
:
expr
(
)
?
)
=
>
{
if
!
cond
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
err
)
)
;
}
}
;
(
cond
:
expr
fmt
:
expr
(
arg
:
tt
)
*
)
=
>
{
if
!
cond
{
return
crate
:
:
private
:
:
Err
(
crate
:
:
anyhow
!
(
fmt
(
arg
)
*
)
)
;
}
}
;
}
#
[
macro_export
]
macro_rules
!
anyhow
{
(
msg
:
literal
(
)
?
)
=
>
{
/
/
Handle
:
literal
as
a
special
case
to
make
cargo
-
expanded
code
more
/
/
concise
in
the
common
case
.
crate
:
:
private
:
:
new_adhoc
(
msg
)
}
;
(
err
:
expr
(
)
?
)
=
>
(
{
use
crate
:
:
private
:
:
kind
:
:
*
;
let
error
=
err
;
(
&
error
)
.
anyhow_kind
(
)
.
new
(
error
)
}
)
;
(
fmt
:
expr
(
arg
:
tt
)
*
)
=
>
{
crate
:
:
private
:
:
new_adhoc
(
format
!
(
fmt
(
arg
)
*
)
)
}
;
}
