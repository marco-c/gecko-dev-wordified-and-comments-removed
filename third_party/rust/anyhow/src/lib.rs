#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
anyhow
/
1
.
0
.
28
"
)
]
#
!
[
cfg_attr
(
backtrace
feature
(
backtrace
)
)
]
#
!
[
cfg_attr
(
doc_cfg
feature
(
doc_cfg
)
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
allow
(
clippy
:
:
needless_doctest_main
clippy
:
:
new_ret_no_self
clippy
:
:
wrong_self_convention
)
]
mod
alloc
{
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
extern
crate
alloc
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
pub
use
alloc
:
:
boxed
:
:
Box
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
boxed
:
:
Box
;
}
#
[
macro_use
]
mod
backtrace
;
mod
chain
;
mod
context
;
mod
error
;
mod
fmt
;
mod
kind
;
mod
macros
;
mod
wrapper
;
use
crate
:
:
alloc
:
:
Box
;
use
crate
:
:
error
:
:
ErrorImpl
;
use
core
:
:
fmt
:
:
Display
;
use
core
:
:
mem
:
:
ManuallyDrop
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
use
core
:
:
fmt
:
:
Debug
;
#
[
cfg
(
feature
=
"
std
"
)
]
use
std
:
:
error
:
:
Error
as
StdError
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
trait
StdError
:
Debug
+
Display
{
fn
source
(
&
self
)
-
>
Option
<
&
(
dyn
StdError
+
'
static
)
>
{
None
}
}
pub
use
anyhow
as
format_err
;
pub
struct
Error
{
inner
:
ManuallyDrop
<
Box
<
ErrorImpl
<
(
)
>
>
>
}
#
[
cfg
(
feature
=
"
std
"
)
]
#
[
derive
(
Clone
)
]
pub
struct
Chain
<
'
a
>
{
state
:
crate
:
:
chain
:
:
ChainState
<
'
a
>
}
pub
type
Result
<
T
E
=
Error
>
=
core
:
:
result
:
:
Result
<
T
E
>
;
pub
trait
Context
<
T
E
>
:
context
:
:
private
:
:
Sealed
{
fn
context
<
C
>
(
self
context
:
C
)
-
>
Result
<
T
Error
>
where
C
:
Display
+
Send
+
Sync
+
'
static
;
fn
with_context
<
C
F
>
(
self
f
:
F
)
-
>
Result
<
T
Error
>
where
C
:
Display
+
Send
+
Sync
+
'
static
F
:
FnOnce
(
)
-
>
C
;
}
#
[
doc
(
hidden
)
]
pub
mod
private
{
use
crate
:
:
Error
;
use
core
:
:
fmt
:
:
{
Debug
Display
}
;
#
[
cfg
(
backtrace
)
]
use
std
:
:
backtrace
:
:
Backtrace
;
pub
use
core
:
:
result
:
:
Result
:
:
Err
;
#
[
doc
(
hidden
)
]
pub
mod
kind
{
pub
use
crate
:
:
kind
:
:
{
AdhocKind
TraitKind
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
crate
:
:
kind
:
:
BoxedKind
;
}
pub
fn
new_adhoc
<
M
>
(
message
:
M
)
-
>
Error
where
M
:
Display
+
Debug
+
Send
+
Sync
+
'
static
{
Error
:
:
from_adhoc
(
message
backtrace
!
(
)
)
}
}
