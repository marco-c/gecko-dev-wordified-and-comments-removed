use
super
:
:
*
;
use
std
:
:
path
:
:
Path
;
#
[
repr
(
u64
)
]
#
[
allow
(
non_camel_case_types
)
]
#
[
derive
(
Copy
Clone
Debug
Eq
PartialEq
Hash
)
]
pub
enum
MTLCaptureDestination
{
DeveloperTools
=
1
GpuTraceDocument
=
2
}
pub
enum
MTLCaptureDescriptor
{
}
foreign_obj_type
!
{
type
CType
=
MTLCaptureDescriptor
;
pub
struct
CaptureDescriptor
;
}
impl
CaptureDescriptor
{
pub
fn
new
(
)
-
>
Self
{
unsafe
{
let
class
=
class
!
(
MTLCaptureDescriptor
)
;
msg_send
!
[
class
new
]
}
}
}
impl
CaptureDescriptorRef
{
pub
fn
set_capture_device
(
&
self
device
:
&
DeviceRef
)
{
unsafe
{
msg_send
!
[
self
setCaptureObject
:
device
]
}
}
pub
fn
set_capture_scope
(
&
self
scope
:
&
CaptureScopeRef
)
{
unsafe
{
msg_send
!
[
self
setCaptureObject
:
scope
]
}
}
pub
fn
set_capture_command_queue
(
&
self
command_queue
:
&
CommandQueueRef
)
{
unsafe
{
msg_send
!
[
self
setCaptureObject
:
command_queue
]
}
}
pub
fn
output_url
(
&
self
)
-
>
&
Path
{
let
url
:
&
URLRef
=
unsafe
{
msg_send
!
[
self
outputURL
]
}
;
Path
:
:
new
(
url
.
path
(
)
)
}
pub
fn
set_output_url
<
P
:
AsRef
<
Path
>
>
(
&
self
output_url
:
P
)
{
let
output_url_string
=
String
:
:
from
(
"
file
:
/
/
"
)
+
output_url
.
as_ref
(
)
.
to_str
(
)
.
unwrap
(
)
;
let
output_url
=
URL
:
:
new_with_string
(
&
output_url_string
)
;
unsafe
{
msg_send
!
[
self
setOutputURL
:
output_url
]
}
}
pub
fn
destination
(
&
self
)
-
>
MTLCaptureDestination
{
unsafe
{
msg_send
!
[
self
destination
]
}
}
pub
fn
set_destination
(
&
self
destination
:
MTLCaptureDestination
)
{
unsafe
{
msg_send
!
[
self
setDestination
:
destination
]
}
}
}
