use
super
:
:
*
;
pub
enum
MTLBuffer
{
}
foreign_obj_type
!
{
type
CType
=
MTLBuffer
;
pub
struct
Buffer
;
pub
struct
BufferRef
;
type
ParentType
=
ResourceRef
;
}
impl
BufferRef
{
pub
fn
length
(
&
self
)
-
>
u64
{
unsafe
{
msg_send
!
[
self
length
]
}
}
pub
fn
contents
(
&
self
)
-
>
*
mut
std
:
:
ffi
:
:
c_void
{
unsafe
{
msg_send
!
[
self
contents
]
}
}
pub
fn
did_modify_range
(
&
self
range
:
crate
:
:
NSRange
)
{
unsafe
{
msg_send
!
[
self
didModifyRange
:
range
]
}
}
pub
fn
new_texture_with_descriptor
(
&
self
descriptor
:
&
TextureDescriptorRef
offset
:
u64
bytes_per_row
:
u64
)
-
>
Texture
{
unsafe
{
msg_send
!
[
self
newTextureWithDescriptor
:
descriptor
offset
:
offset
bytesPerRow
:
bytes_per_row
]
}
}
pub
fn
remote_storage_buffer
(
&
self
)
-
>
&
BufferRef
{
unsafe
{
msg_send
!
[
self
remoteStorageBuffer
]
}
}
pub
fn
new_remote_buffer_view_for_device
(
&
self
device
:
&
DeviceRef
)
-
>
Buffer
{
unsafe
{
msg_send
!
[
self
newRemoteBufferViewForDevice
:
device
]
}
}
pub
fn
add_debug_marker
(
&
self
name
:
&
str
range
:
crate
:
:
NSRange
)
{
unsafe
{
let
name
=
crate
:
:
nsstring_from_str
(
name
)
;
msg_send
!
[
self
addDebugMarker
:
name
range
:
range
]
}
}
pub
fn
remove_all_debug_markers
(
&
self
)
{
unsafe
{
msg_send
!
[
self
removeAllDebugMarkers
]
}
}
}
