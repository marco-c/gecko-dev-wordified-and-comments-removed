use
super
:
:
{
Buf
BufMut
}
;
mod
chain
;
mod
limit
;
#
[
cfg
(
feature
=
"
std
"
)
]
mod
reader
;
mod
take
;
#
[
cfg
(
feature
=
"
std
"
)
]
mod
writer
;
pub
use
self
:
:
chain
:
:
Chain
;
pub
use
self
:
:
limit
:
:
Limit
;
pub
use
self
:
:
take
:
:
Take
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
self
:
:
{
reader
:
:
Reader
writer
:
:
Writer
}
;
pub
trait
BufExt
:
Buf
{
fn
take
(
self
limit
:
usize
)
-
>
Take
<
Self
>
where
Self
:
Sized
{
take
:
:
new
(
self
limit
)
}
fn
chain
<
U
:
Buf
>
(
self
next
:
U
)
-
>
Chain
<
Self
U
>
where
Self
:
Sized
{
Chain
:
:
new
(
self
next
)
}
#
[
cfg
(
feature
=
"
std
"
)
]
fn
reader
(
self
)
-
>
Reader
<
Self
>
where
Self
:
Sized
{
reader
:
:
new
(
self
)
}
}
impl
<
B
:
Buf
+
?
Sized
>
BufExt
for
B
{
}
pub
trait
BufMutExt
:
BufMut
{
fn
limit
(
self
limit
:
usize
)
-
>
Limit
<
Self
>
where
Self
:
Sized
{
limit
:
:
new
(
self
limit
)
}
#
[
cfg
(
feature
=
"
std
"
)
]
fn
writer
(
self
)
-
>
Writer
<
Self
>
where
Self
:
Sized
{
writer
:
:
new
(
self
)
}
fn
chain_mut
<
U
:
BufMut
>
(
self
next
:
U
)
-
>
Chain
<
Self
U
>
where
Self
:
Sized
{
Chain
:
:
new
(
self
next
)
}
}
impl
<
B
:
BufMut
+
?
Sized
>
BufMutExt
for
B
{
}
