#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
use
core
as
std
;
#
[
derive
(
Clone
Debug
PartialOrd
PartialEq
Ord
Eq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
serde
-
1
"
derive
(
serde
:
:
Serialize
serde
:
:
Deserialize
)
)
]
pub
struct
Relevant
;
impl
Relevant
{
pub
fn
dispose
(
self
)
{
std
:
:
mem
:
:
forget
(
self
)
}
}
impl
Drop
for
Relevant
{
fn
drop
(
&
mut
self
)
{
dropped
(
)
}
}
cfg_if
:
:
cfg_if
!
{
if
#
[
cfg
(
feature
=
"
panic
"
)
]
{
macro_rules
!
sink
{
(
(
x
:
tt
)
*
)
=
>
{
panic
!
(
(
x
)
*
)
}
;
}
}
else
if
#
[
cfg
(
feature
=
"
log
"
)
]
{
macro_rules
!
sink
{
(
(
x
:
tt
)
*
)
=
>
{
log
:
:
error
!
(
(
x
)
*
)
}
;
}
}
else
if
#
[
cfg
(
feature
=
"
std
"
)
]
{
macro_rules
!
sink
{
(
(
x
:
tt
)
*
)
=
>
{
eprintln
!
(
(
x
)
*
)
}
;
}
}
else
{
macro_rules
!
sink
{
(
(
x
:
tt
)
*
)
=
>
{
panic
!
(
(
x
)
*
)
}
;
}
}
}
cfg_if
:
:
cfg_if
!
{
if
#
[
cfg
(
all
(
not
(
feature
=
"
panic
"
)
any
(
feature
=
"
std
"
feature
=
"
log
"
)
feature
=
"
backtrace
"
)
)
]
{
fn
whine
(
)
{
let
backtrace
=
backtrace
:
:
Backtrace
:
:
new
(
)
;
sink
!
(
"
Values
of
this
type
can
'
t
be
dropped
!
.
Trace
:
{
:
#
?
}
"
backtrace
)
}
}
else
{
fn
whine
(
)
{
sink
!
(
"
Values
of
this
type
can
'
t
be
dropped
!
"
)
}
}
}
cfg_if
:
:
cfg_if
!
{
if
#
[
cfg
(
feature
=
"
std
"
)
]
{
fn
dropped
(
)
{
if
!
std
:
:
thread
:
:
panicking
(
)
{
whine
(
)
}
}
}
else
{
fn
dropped
(
)
{
whine
(
)
}
}
}
