use
crate
:
:
rpc
:
:
Handler
;
use
futures
:
:
{
Async
AsyncSink
Future
Poll
Sink
Stream
}
;
use
std
:
:
fmt
;
use
std
:
:
io
;
pub
struct
Driver
<
T
>
where
T
:
Handler
{
handler
:
T
run
:
bool
is_flushed
:
bool
}
impl
<
T
>
Driver
<
T
>
where
T
:
Handler
{
pub
fn
new
(
handler
:
T
)
-
>
Driver
<
T
>
{
Driver
{
handler
run
:
true
is_flushed
:
true
}
}
fn
is_done
(
&
self
)
-
>
bool
{
!
self
.
run
&
&
self
.
is_flushed
&
&
!
self
.
has_in_flight
(
)
}
fn
receive_incoming
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
while
self
.
run
{
if
let
Async
:
:
Ready
(
req
)
=
self
.
handler
.
transport
(
)
.
poll
(
)
?
{
self
.
process_incoming
(
req
)
;
}
else
{
break
;
}
}
Ok
(
(
)
)
}
fn
process_incoming
(
&
mut
self
req
:
Option
<
T
:
:
In
>
)
{
trace
!
(
"
process_incoming
"
)
;
match
req
{
Some
(
message
)
=
>
{
trace
!
(
"
received
message
"
)
;
if
let
Err
(
e
)
=
self
.
handler
.
consume
(
message
)
{
panic
!
(
"
unimplemented
error
handling
:
{
:
?
}
"
e
)
;
}
}
None
=
>
{
trace
!
(
"
received
None
"
)
;
self
.
run
=
false
;
}
}
}
fn
send_outgoing
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
trace
!
(
"
send_responses
"
)
;
loop
{
match
self
.
handler
.
produce
(
)
?
{
Async
:
:
Ready
(
Some
(
message
)
)
=
>
{
trace
!
(
"
-
-
>
got
message
"
)
;
self
.
process_outgoing
(
message
)
?
;
}
Async
:
:
Ready
(
None
)
=
>
{
trace
!
(
"
-
-
>
got
None
"
)
;
self
.
run
=
false
;
break
;
}
Async
:
:
NotReady
=
>
break
}
}
Ok
(
(
)
)
}
fn
process_outgoing
(
&
mut
self
message
:
T
:
:
Out
)
-
>
io
:
:
Result
<
(
)
>
{
trace
!
(
"
process_outgoing
"
)
;
assert_send
(
&
mut
self
.
handler
.
transport
(
)
message
)
?
;
Ok
(
(
)
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
is_flushed
=
self
.
handler
.
transport
(
)
.
poll_complete
(
)
?
.
is_ready
(
)
;
Ok
(
(
)
)
}
fn
has_in_flight
(
&
self
)
-
>
bool
{
self
.
handler
.
has_in_flight
(
)
}
}
impl
<
T
>
Future
for
Driver
<
T
>
where
T
:
Handler
{
type
Item
=
(
)
;
type
Error
=
io
:
:
Error
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
(
)
Self
:
:
Error
>
{
trace
!
(
"
rpc
:
:
Driver
:
:
tick
"
)
;
self
.
receive_incoming
(
)
?
;
self
.
send_outgoing
(
)
?
;
self
.
flush
(
)
?
;
if
self
.
is_done
(
)
{
trace
!
(
"
-
-
>
is
done
.
"
)
;
return
Ok
(
(
)
.
into
(
)
)
;
}
Ok
(
Async
:
:
NotReady
)
}
}
fn
assert_send
<
S
:
Sink
>
(
s
:
&
mut
S
item
:
S
:
:
SinkItem
)
-
>
Result
<
(
)
S
:
:
SinkError
>
{
match
s
.
start_send
(
item
)
?
{
AsyncSink
:
:
Ready
=
>
Ok
(
(
)
)
AsyncSink
:
:
NotReady
(
_
)
=
>
panic
!
(
"
sink
reported
itself
as
ready
after
poll_ready
but
was
\
then
unable
to
accept
a
message
"
)
}
}
impl
<
T
>
fmt
:
:
Debug
for
Driver
<
T
>
where
T
:
Handler
+
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
rpc
:
:
Handler
"
)
.
field
(
"
handler
"
&
self
.
handler
)
.
field
(
"
run
"
&
self
.
run
)
.
field
(
"
is_flushed
"
&
self
.
is_flushed
)
.
finish
(
)
}
}
