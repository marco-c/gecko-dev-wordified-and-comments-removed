use
crate
:
:
raw
:
:
Bucket
;
use
crate
:
:
raw
:
:
{
Allocator
Global
RawIter
RawIterRange
RawTable
}
;
use
crate
:
:
scopeguard
:
:
guard
;
use
alloc
:
:
alloc
:
:
dealloc
;
use
core
:
:
marker
:
:
PhantomData
;
use
core
:
:
mem
;
use
core
:
:
ptr
:
:
NonNull
;
use
rayon
:
:
iter
:
:
{
plumbing
:
:
{
self
Folder
UnindexedConsumer
UnindexedProducer
}
ParallelIterator
}
;
pub
struct
RawParIter
<
T
>
{
iter
:
RawIterRange
<
T
>
}
impl
<
T
>
RawParIter
<
T
>
{
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
pub
(
super
)
unsafe
fn
iter
(
&
self
)
-
>
RawIterRange
<
T
>
{
self
.
iter
.
clone
(
)
}
}
impl
<
T
>
Clone
for
RawParIter
<
T
>
{
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
fn
clone
(
&
self
)
-
>
Self
{
Self
{
iter
:
self
.
iter
.
clone
(
)
}
}
}
impl
<
T
>
From
<
RawIter
<
T
>
>
for
RawParIter
<
T
>
{
fn
from
(
it
:
RawIter
<
T
>
)
-
>
Self
{
RawParIter
{
iter
:
it
.
iter
}
}
}
impl
<
T
>
ParallelIterator
for
RawParIter
<
T
>
{
type
Item
=
Bucket
<
T
>
;
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
fn
drive_unindexed
<
C
>
(
self
consumer
:
C
)
-
>
C
:
:
Result
where
C
:
UnindexedConsumer
<
Self
:
:
Item
>
{
let
producer
=
ParIterProducer
{
iter
:
self
.
iter
}
;
plumbing
:
:
bridge_unindexed
(
producer
consumer
)
}
}
struct
ParIterProducer
<
T
>
{
iter
:
RawIterRange
<
T
>
}
impl
<
T
>
UnindexedProducer
for
ParIterProducer
<
T
>
{
type
Item
=
Bucket
<
T
>
;
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
fn
split
(
self
)
-
>
(
Self
Option
<
Self
>
)
{
let
(
left
right
)
=
self
.
iter
.
split
(
)
;
let
left
=
ParIterProducer
{
iter
:
left
}
;
let
right
=
right
.
map
(
|
right
|
ParIterProducer
{
iter
:
right
}
)
;
(
left
right
)
}
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
fn
fold_with
<
F
>
(
self
folder
:
F
)
-
>
F
where
F
:
Folder
<
Self
:
:
Item
>
{
folder
.
consume_iter
(
self
.
iter
)
}
}
pub
struct
RawIntoParIter
<
T
A
:
Allocator
+
Clone
=
Global
>
{
table
:
RawTable
<
T
A
>
}
impl
<
T
A
:
Allocator
+
Clone
>
RawIntoParIter
<
T
A
>
{
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
pub
(
super
)
unsafe
fn
par_iter
(
&
self
)
-
>
RawParIter
<
T
>
{
self
.
table
.
par_iter
(
)
}
}
impl
<
T
:
Send
A
:
Allocator
+
Clone
+
Send
>
ParallelIterator
for
RawIntoParIter
<
T
A
>
{
type
Item
=
T
;
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
fn
drive_unindexed
<
C
>
(
self
consumer
:
C
)
-
>
C
:
:
Result
where
C
:
UnindexedConsumer
<
Self
:
:
Item
>
{
let
iter
=
unsafe
{
self
.
table
.
iter
(
)
.
iter
}
;
let
_guard
=
guard
(
self
.
table
.
into_allocation
(
)
|
alloc
|
{
if
let
Some
(
(
ptr
layout
)
)
=
*
alloc
{
unsafe
{
dealloc
(
ptr
.
as_ptr
(
)
layout
)
;
}
}
}
)
;
let
producer
=
ParDrainProducer
{
iter
}
;
plumbing
:
:
bridge_unindexed
(
producer
consumer
)
}
}
pub
struct
RawParDrain
<
'
a
T
A
:
Allocator
+
Clone
=
Global
>
{
table
:
NonNull
<
RawTable
<
T
A
>
>
marker
:
PhantomData
<
&
'
a
RawTable
<
T
A
>
>
}
unsafe
impl
<
T
:
Send
A
:
Allocator
+
Clone
>
Send
for
RawParDrain
<
'
_
T
A
>
{
}
impl
<
T
A
:
Allocator
+
Clone
>
RawParDrain
<
'
_
T
A
>
{
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
pub
(
super
)
unsafe
fn
par_iter
(
&
self
)
-
>
RawParIter
<
T
>
{
self
.
table
.
as_ref
(
)
.
par_iter
(
)
}
}
impl
<
T
:
Send
A
:
Allocator
+
Clone
>
ParallelIterator
for
RawParDrain
<
'
_
T
A
>
{
type
Item
=
T
;
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
fn
drive_unindexed
<
C
>
(
self
consumer
:
C
)
-
>
C
:
:
Result
where
C
:
UnindexedConsumer
<
Self
:
:
Item
>
{
let
_guard
=
guard
(
self
.
table
|
table
|
unsafe
{
table
.
as_mut
(
)
.
clear_no_drop
(
)
;
}
)
;
let
iter
=
unsafe
{
self
.
table
.
as_ref
(
)
.
iter
(
)
.
iter
}
;
mem
:
:
forget
(
self
)
;
let
producer
=
ParDrainProducer
{
iter
}
;
plumbing
:
:
bridge_unindexed
(
producer
consumer
)
}
}
impl
<
T
A
:
Allocator
+
Clone
>
Drop
for
RawParDrain
<
'
_
T
A
>
{
fn
drop
(
&
mut
self
)
{
unsafe
{
self
.
table
.
as_mut
(
)
.
clear
(
)
;
}
}
}
struct
ParDrainProducer
<
T
>
{
iter
:
RawIterRange
<
T
>
}
impl
<
T
:
Send
>
UnindexedProducer
for
ParDrainProducer
<
T
>
{
type
Item
=
T
;
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
fn
split
(
self
)
-
>
(
Self
Option
<
Self
>
)
{
let
(
left
right
)
=
self
.
iter
.
clone
(
)
.
split
(
)
;
mem
:
:
forget
(
self
)
;
let
left
=
ParDrainProducer
{
iter
:
left
}
;
let
right
=
right
.
map
(
|
right
|
ParDrainProducer
{
iter
:
right
}
)
;
(
left
right
)
}
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
fn
fold_with
<
F
>
(
mut
self
mut
folder
:
F
)
-
>
F
where
F
:
Folder
<
Self
:
:
Item
>
{
for
item
in
&
mut
self
.
iter
{
folder
=
folder
.
consume
(
unsafe
{
item
.
read
(
)
}
)
;
if
folder
.
full
(
)
{
return
folder
;
}
}
mem
:
:
forget
(
self
)
;
folder
}
}
impl
<
T
>
Drop
for
ParDrainProducer
<
T
>
{
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
fn
drop
(
&
mut
self
)
{
if
mem
:
:
needs_drop
:
:
<
T
>
(
)
{
for
item
in
&
mut
self
.
iter
{
unsafe
{
item
.
drop
(
)
;
}
}
}
}
}
impl
<
T
A
:
Allocator
+
Clone
>
RawTable
<
T
A
>
{
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
pub
unsafe
fn
par_iter
(
&
self
)
-
>
RawParIter
<
T
>
{
RawParIter
{
iter
:
self
.
iter
(
)
.
iter
}
}
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
pub
fn
into_par_iter
(
self
)
-
>
RawIntoParIter
<
T
A
>
{
RawIntoParIter
{
table
:
self
}
}
#
[
cfg_attr
(
feature
=
"
inline
-
more
"
inline
)
]
pub
fn
par_drain
(
&
mut
self
)
-
>
RawParDrain
<
'
_
T
A
>
{
RawParDrain
{
table
:
NonNull
:
:
from
(
self
)
marker
:
PhantomData
}
}
}
