use
super
:
:
bitmask
:
:
BitMask
;
use
super
:
:
EMPTY
;
use
core
:
:
mem
;
#
[
cfg
(
target_arch
=
"
x86
"
)
]
use
core
:
:
arch
:
:
x86
;
#
[
cfg
(
target_arch
=
"
x86_64
"
)
]
use
core
:
:
arch
:
:
x86_64
as
x86
;
pub
type
BitMaskWord
=
u16
;
pub
const
BITMASK_STRIDE
:
usize
=
1
;
pub
const
BITMASK_MASK
:
BitMaskWord
=
0xffff
;
#
[
derive
(
Copy
Clone
)
]
pub
struct
Group
(
x86
:
:
__m128i
)
;
#
[
allow
(
clippy
:
:
use_self
)
]
impl
Group
{
pub
const
WIDTH
:
usize
=
mem
:
:
size_of
:
:
<
Self
>
(
)
;
#
[
allow
(
clippy
:
:
items_after_statements
)
]
pub
const
fn
static_empty
(
)
-
>
&
'
static
[
u8
;
Group
:
:
WIDTH
]
{
#
[
repr
(
C
)
]
struct
AlignedBytes
{
_align
:
[
Group
;
0
]
bytes
:
[
u8
;
Group
:
:
WIDTH
]
}
const
ALIGNED_BYTES
:
AlignedBytes
=
AlignedBytes
{
_align
:
[
]
bytes
:
[
EMPTY
;
Group
:
:
WIDTH
]
}
;
&
ALIGNED_BYTES
.
bytes
}
#
[
inline
]
#
[
allow
(
clippy
:
:
cast_ptr_alignment
)
]
pub
unsafe
fn
load
(
ptr
:
*
const
u8
)
-
>
Self
{
Group
(
x86
:
:
_mm_loadu_si128
(
ptr
.
cast
(
)
)
)
}
#
[
inline
]
#
[
allow
(
clippy
:
:
cast_ptr_alignment
)
]
pub
unsafe
fn
load_aligned
(
ptr
:
*
const
u8
)
-
>
Self
{
debug_assert_eq
!
(
ptr
as
usize
&
(
mem
:
:
align_of
:
:
<
Self
>
(
)
-
1
)
0
)
;
Group
(
x86
:
:
_mm_load_si128
(
ptr
.
cast
(
)
)
)
}
#
[
inline
]
#
[
allow
(
clippy
:
:
cast_ptr_alignment
)
]
pub
unsafe
fn
store_aligned
(
self
ptr
:
*
mut
u8
)
{
debug_assert_eq
!
(
ptr
as
usize
&
(
mem
:
:
align_of
:
:
<
Self
>
(
)
-
1
)
0
)
;
x86
:
:
_mm_store_si128
(
ptr
.
cast
(
)
self
.
0
)
;
}
#
[
inline
]
pub
fn
match_byte
(
self
byte
:
u8
)
-
>
BitMask
{
#
[
allow
(
clippy
:
:
cast_possible_wrap
clippy
:
:
cast_sign_loss
clippy
:
:
cast_possible_truncation
)
]
unsafe
{
let
cmp
=
x86
:
:
_mm_cmpeq_epi8
(
self
.
0
x86
:
:
_mm_set1_epi8
(
byte
as
i8
)
)
;
BitMask
(
x86
:
:
_mm_movemask_epi8
(
cmp
)
as
u16
)
}
}
#
[
inline
]
pub
fn
match_empty
(
self
)
-
>
BitMask
{
self
.
match_byte
(
EMPTY
)
}
#
[
inline
]
pub
fn
match_empty_or_deleted
(
self
)
-
>
BitMask
{
#
[
allow
(
clippy
:
:
cast_sign_loss
clippy
:
:
cast_possible_truncation
)
]
unsafe
{
BitMask
(
x86
:
:
_mm_movemask_epi8
(
self
.
0
)
as
u16
)
}
}
#
[
inline
]
pub
fn
match_full
(
&
self
)
-
>
BitMask
{
self
.
match_empty_or_deleted
(
)
.
invert
(
)
}
#
[
inline
]
pub
fn
convert_special_to_empty_and_full_to_deleted
(
self
)
-
>
Self
{
#
[
allow
(
clippy
:
:
cast_possible_wrap
)
]
unsafe
{
let
zero
=
x86
:
:
_mm_setzero_si128
(
)
;
let
special
=
x86
:
:
_mm_cmpgt_epi8
(
zero
self
.
0
)
;
Group
(
x86
:
:
_mm_or_si128
(
special
x86
:
:
_mm_set1_epi8
(
0x80_u8
as
i8
)
)
)
}
}
}
