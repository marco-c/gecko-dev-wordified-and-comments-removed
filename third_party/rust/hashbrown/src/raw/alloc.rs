pub
(
crate
)
use
self
:
:
inner
:
:
{
do_alloc
Allocator
Global
}
;
#
[
cfg
(
feature
=
"
nightly
"
)
]
mod
inner
{
use
crate
:
:
alloc
:
:
alloc
:
:
Layout
;
pub
use
crate
:
:
alloc
:
:
alloc
:
:
{
Allocator
Global
}
;
use
core
:
:
ptr
:
:
NonNull
;
#
[
allow
(
clippy
:
:
map_err_ignore
)
]
pub
(
crate
)
fn
do_alloc
<
A
:
Allocator
>
(
alloc
:
&
A
layout
:
Layout
)
-
>
Result
<
NonNull
<
u8
>
(
)
>
{
match
alloc
.
allocate
(
layout
)
{
Ok
(
ptr
)
=
>
Ok
(
ptr
.
as_non_null_ptr
(
)
)
Err
(
_
)
=
>
Err
(
(
)
)
}
}
}
#
[
cfg
(
all
(
not
(
feature
=
"
nightly
"
)
feature
=
"
allocator
-
api2
"
)
)
]
mod
inner
{
use
crate
:
:
alloc
:
:
alloc
:
:
Layout
;
pub
use
allocator_api2
:
:
alloc
:
:
{
Allocator
Global
}
;
use
core
:
:
ptr
:
:
NonNull
;
#
[
allow
(
clippy
:
:
map_err_ignore
)
]
pub
(
crate
)
fn
do_alloc
<
A
:
Allocator
>
(
alloc
:
&
A
layout
:
Layout
)
-
>
Result
<
NonNull
<
u8
>
(
)
>
{
match
alloc
.
allocate
(
layout
)
{
Ok
(
ptr
)
=
>
Ok
(
ptr
.
cast
(
)
)
Err
(
_
)
=
>
Err
(
(
)
)
}
}
}
#
[
cfg
(
not
(
any
(
feature
=
"
nightly
"
feature
=
"
allocator
-
api2
"
)
)
)
]
mod
inner
{
use
crate
:
:
alloc
:
:
alloc
:
:
{
alloc
dealloc
Layout
}
;
use
core
:
:
ptr
:
:
NonNull
;
#
[
allow
(
clippy
:
:
missing_safety_doc
)
]
pub
unsafe
trait
Allocator
{
fn
allocate
(
&
self
layout
:
Layout
)
-
>
Result
<
NonNull
<
u8
>
(
)
>
;
unsafe
fn
deallocate
(
&
self
ptr
:
NonNull
<
u8
>
layout
:
Layout
)
;
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
Global
;
unsafe
impl
Allocator
for
Global
{
#
[
inline
]
fn
allocate
(
&
self
layout
:
Layout
)
-
>
Result
<
NonNull
<
u8
>
(
)
>
{
unsafe
{
NonNull
:
:
new
(
alloc
(
layout
)
)
.
ok_or
(
(
)
)
}
}
#
[
inline
]
unsafe
fn
deallocate
(
&
self
ptr
:
NonNull
<
u8
>
layout
:
Layout
)
{
dealloc
(
ptr
.
as_ptr
(
)
layout
)
;
}
}
impl
Default
for
Global
{
#
[
inline
]
fn
default
(
)
-
>
Self
{
Global
}
}
pub
(
crate
)
fn
do_alloc
<
A
:
Allocator
>
(
alloc
:
&
A
layout
:
Layout
)
-
>
Result
<
NonNull
<
u8
>
(
)
>
{
alloc
.
allocate
(
layout
)
}
}
