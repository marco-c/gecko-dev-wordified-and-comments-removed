#
!
[
no_std
]
#
!
[
cfg_attr
(
feature
=
"
nightly
"
feature
(
alloc_layout_extra
allocator_api
ptr_offset_from
test
core_intrinsics
dropck_eyepatch
specialization
)
)
]
#
!
[
allow
(
clippy
:
:
doc_markdown
clippy
:
:
module_name_repetitions
clippy
:
:
must_use_candidate
)
]
#
!
[
warn
(
missing_docs
)
]
#
!
[
warn
(
rust_2018_idioms
)
]
#
[
cfg
(
test
)
]
#
[
macro_use
]
extern
crate
std
;
#
[
cfg
(
has_extern_crate_alloc
)
]
#
[
cfg_attr
(
test
macro_use
)
]
extern
crate
alloc
;
#
[
cfg
(
not
(
has_extern_crate_alloc
)
)
]
extern
crate
std
as
alloc
;
#
[
cfg
(
feature
=
"
nightly
"
)
]
#
[
cfg
(
doctest
)
]
doc_comment
:
:
doctest
!
(
"
.
.
/
README
.
md
"
)
;
#
[
macro_use
]
mod
macros
;
#
[
cfg
(
feature
=
"
raw
"
)
]
pub
mod
raw
{
#
[
allow
(
missing_docs
)
]
#
[
path
=
"
mod
.
rs
"
]
mod
inner
;
pub
use
inner
:
:
*
;
#
[
cfg
(
feature
=
"
rayon
"
)
]
pub
mod
rayon
{
pub
use
crate
:
:
external_trait_impls
:
:
rayon
:
:
raw
:
:
*
;
}
}
#
[
cfg
(
not
(
feature
=
"
raw
"
)
)
]
mod
raw
;
mod
external_trait_impls
;
mod
map
;
#
[
cfg
(
feature
=
"
rustc
-
internal
-
api
"
)
]
mod
rustc_entry
;
mod
scopeguard
;
mod
set
;
pub
mod
hash_map
{
pub
use
crate
:
:
map
:
:
*
;
#
[
cfg
(
feature
=
"
rustc
-
internal
-
api
"
)
]
pub
use
crate
:
:
rustc_entry
:
:
*
;
#
[
cfg
(
feature
=
"
rayon
"
)
]
pub
mod
rayon
{
pub
use
crate
:
:
external_trait_impls
:
:
rayon
:
:
map
:
:
*
;
}
}
pub
mod
hash_set
{
pub
use
crate
:
:
set
:
:
*
;
#
[
cfg
(
feature
=
"
rayon
"
)
]
pub
mod
rayon
{
pub
use
crate
:
:
external_trait_impls
:
:
rayon
:
:
set
:
:
*
;
}
}
pub
use
crate
:
:
map
:
:
HashMap
;
pub
use
crate
:
:
set
:
:
HashSet
;
#
[
derive
(
Clone
PartialEq
Eq
Debug
)
]
pub
enum
CollectionAllocErr
{
CapacityOverflow
AllocErr
{
layout
:
alloc
:
:
alloc
:
:
Layout
}
}
