#
!
[
no_std
]
#
!
[
cfg_attr
(
feature
=
"
nightly
"
feature
(
test
core_intrinsics
dropck_eyepatch
min_specialization
extend_one
allocator_api
slice_ptr_get
maybe_uninit_array_assume_init
strict_provenance_lints
)
)
]
#
!
[
cfg_attr
(
feature
=
"
rustc
-
dep
-
of
-
std
"
feature
(
rustc_attrs
)
)
]
#
!
[
allow
(
clippy
:
:
doc_markdown
clippy
:
:
module_name_repetitions
clippy
:
:
must_use_candidate
clippy
:
:
option_if_let_else
clippy
:
:
redundant_else
clippy
:
:
manual_map
clippy
:
:
missing_safety_doc
clippy
:
:
missing_errors_doc
)
]
#
!
[
warn
(
missing_docs
)
]
#
!
[
warn
(
rust_2018_idioms
)
]
#
!
[
cfg_attr
(
feature
=
"
nightly
"
warn
(
fuzzy_provenance_casts
)
)
]
#
!
[
cfg_attr
(
feature
=
"
nightly
"
allow
(
clippy
:
:
incompatible_msrv
internal_features
)
)
]
#
!
[
cfg_attr
(
all
(
feature
=
"
nightly
"
target_arch
=
"
loongarch64
"
)
feature
(
stdarch_loongarch
)
)
]
#
!
[
cfg_attr
(
all
(
feature
=
"
nightly
"
feature
=
"
default
-
hasher
"
)
feature
(
hasher_prefixfree_extras
)
)
]
#
[
cfg
(
test
)
]
#
[
macro_use
]
extern
crate
std
;
#
[
cfg_attr
(
test
macro_use
)
]
#
[
cfg_attr
(
feature
=
"
rustc
-
dep
-
of
-
std
"
allow
(
unused_extern_crates
)
)
]
extern
crate
alloc
;
#
[
cfg
(
feature
=
"
nightly
"
)
]
#
[
cfg
(
doctest
)
]
doc_comment
:
:
doctest
!
(
"
.
.
/
README
.
md
"
)
;
#
[
macro_use
]
mod
macros
;
mod
control
;
mod
hasher
;
mod
raw
;
mod
util
;
mod
external_trait_impls
;
mod
map
;
#
[
cfg
(
feature
=
"
raw
-
entry
"
)
]
mod
raw_entry
;
#
[
cfg
(
feature
=
"
rustc
-
internal
-
api
"
)
]
mod
rustc_entry
;
mod
scopeguard
;
mod
set
;
mod
table
;
pub
use
crate
:
:
hasher
:
:
DefaultHashBuilder
;
#
[
cfg
(
feature
=
"
default
-
hasher
"
)
]
pub
use
crate
:
:
hasher
:
:
DefaultHasher
;
pub
mod
hash_map
{
pub
use
crate
:
:
map
:
:
*
;
#
[
cfg
(
feature
=
"
rustc
-
internal
-
api
"
)
]
pub
use
crate
:
:
rustc_entry
:
:
*
;
#
[
cfg
(
feature
=
"
rayon
"
)
]
pub
mod
rayon
{
pub
use
crate
:
:
external_trait_impls
:
:
rayon
:
:
map
:
:
*
;
}
}
pub
mod
hash_set
{
pub
use
crate
:
:
set
:
:
*
;
#
[
cfg
(
feature
=
"
rayon
"
)
]
pub
mod
rayon
{
pub
use
crate
:
:
external_trait_impls
:
:
rayon
:
:
set
:
:
*
;
}
}
pub
mod
hash_table
{
pub
use
crate
:
:
table
:
:
*
;
#
[
cfg
(
feature
=
"
rayon
"
)
]
pub
mod
rayon
{
pub
use
crate
:
:
external_trait_impls
:
:
rayon
:
:
table
:
:
*
;
}
}
pub
use
crate
:
:
map
:
:
HashMap
;
pub
use
crate
:
:
set
:
:
HashSet
;
pub
use
crate
:
:
table
:
:
HashTable
;
#
[
cfg
(
feature
=
"
equivalent
"
)
]
pub
use
equivalent
:
:
Equivalent
;
#
[
cfg
(
not
(
feature
=
"
equivalent
"
)
)
]
pub
trait
Equivalent
<
K
:
?
Sized
>
{
fn
equivalent
(
&
self
key
:
&
K
)
-
>
bool
;
}
#
[
cfg
(
not
(
feature
=
"
equivalent
"
)
)
]
impl
<
Q
:
?
Sized
K
:
?
Sized
>
Equivalent
<
K
>
for
Q
where
Q
:
Eq
K
:
core
:
:
borrow
:
:
Borrow
<
Q
>
{
fn
equivalent
(
&
self
key
:
&
K
)
-
>
bool
{
self
=
=
key
.
borrow
(
)
}
}
#
[
derive
(
Clone
PartialEq
Eq
Debug
)
]
pub
enum
TryReserveError
{
CapacityOverflow
AllocError
{
layout
:
alloc
:
:
alloc
:
:
Layout
}
}
