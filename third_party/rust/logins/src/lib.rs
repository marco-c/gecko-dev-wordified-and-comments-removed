#
!
[
allow
(
unknown_lints
)
]
#
!
[
warn
(
rust_2018_idioms
)
]
#
[
macro_use
]
mod
error
;
mod
login
;
mod
db
;
pub
mod
encryption
;
mod
schema
;
mod
store
;
mod
sync
;
mod
util
;
use
crate
:
:
encryption
:
:
{
EncryptorDecryptor
KeyManager
ManagedEncryptorDecryptor
StaticKeyManager
}
;
uniffi
:
:
include_scaffolding
!
(
"
logins
"
)
;
#
[
cfg
(
feature
=
"
keydb
"
)
]
pub
use
crate
:
:
encryption
:
:
{
NSSKeyManager
PrimaryPasswordAuthenticator
}
;
pub
use
crate
:
:
db
:
:
{
LoginDb
LoginsDeletionMetrics
}
;
use
crate
:
:
encryption
:
:
{
check_canary
create_canary
create_key
}
;
pub
use
crate
:
:
error
:
:
*
;
pub
use
crate
:
:
login
:
:
*
;
pub
use
crate
:
:
store
:
:
*
;
pub
use
crate
:
:
sync
:
:
LoginsSyncEngine
;
use
std
:
:
sync
:
:
Arc
;
pub
fn
create_static_key_manager
(
key
:
String
)
-
>
Arc
<
StaticKeyManager
>
{
Arc
:
:
new
(
StaticKeyManager
:
:
new
(
key
)
)
}
pub
fn
create_managed_encdec
(
key_manager
:
Arc
<
dyn
KeyManager
>
)
-
>
Arc
<
ManagedEncryptorDecryptor
>
{
Arc
:
:
new
(
ManagedEncryptorDecryptor
:
:
new
(
key_manager
)
)
}
pub
fn
create_login_store_with_static_key_manager
(
path
:
String
key
:
String
)
-
>
Arc
<
LoginStore
>
{
let
encdec
:
ManagedEncryptorDecryptor
=
ManagedEncryptorDecryptor
:
:
new
(
Arc
:
:
new
(
StaticKeyManager
:
:
new
(
key
)
)
)
;
Arc
:
:
new
(
LoginStore
:
:
new
(
path
Arc
:
:
new
(
encdec
)
)
.
unwrap
(
)
)
}
#
[
cfg
(
feature
=
"
keydb
"
)
]
#
[
uniffi
:
:
export
]
pub
fn
create_login_store_with_nss_keymanager
(
path
:
String
primary_password_authenticator
:
Arc
<
dyn
PrimaryPasswordAuthenticator
>
)
-
>
Arc
<
LoginStore
>
{
let
encdec
:
ManagedEncryptorDecryptor
=
ManagedEncryptorDecryptor
:
:
new
(
Arc
:
:
new
(
NSSKeyManager
:
:
new
(
primary_password_authenticator
)
)
)
;
Arc
:
:
new
(
LoginStore
:
:
new
(
path
Arc
:
:
new
(
encdec
)
)
.
unwrap
(
)
)
}
