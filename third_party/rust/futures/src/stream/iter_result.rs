use
{
Async
Poll
}
;
use
stream
:
:
Stream
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
IterResult
<
I
>
{
iter
:
I
}
pub
fn
iter_result
<
J
T
E
>
(
i
:
J
)
-
>
IterResult
<
J
:
:
IntoIter
>
where
J
:
IntoIterator
<
Item
=
Result
<
T
E
>
>
{
IterResult
{
iter
:
i
.
into_iter
(
)
}
}
impl
<
I
T
E
>
Stream
for
IterResult
<
I
>
where
I
:
Iterator
<
Item
=
Result
<
T
E
>
>
{
type
Item
=
T
;
type
Error
=
E
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
Option
<
T
>
E
>
{
match
self
.
iter
.
next
(
)
{
Some
(
Ok
(
e
)
)
=
>
Ok
(
Async
:
:
Ready
(
Some
(
e
)
)
)
Some
(
Err
(
e
)
)
=
>
Err
(
e
)
None
=
>
Ok
(
Async
:
:
Ready
(
None
)
)
}
}
}
