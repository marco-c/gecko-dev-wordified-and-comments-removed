use
core
;
use
Poll
;
use
stream
;
use
stream
:
:
Stream
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
Once
<
T
E
>
(
stream
:
:
Iter
<
core
:
:
iter
:
:
Once
<
Result
<
T
E
>
>
>
)
;
pub
fn
once
<
T
E
>
(
item
:
Result
<
T
E
>
)
-
>
Once
<
T
E
>
{
Once
(
stream
:
:
iter
(
core
:
:
iter
:
:
once
(
item
)
)
)
}
impl
<
T
E
>
Stream
for
Once
<
T
E
>
{
type
Item
=
T
;
type
Error
=
E
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
Option
<
T
>
E
>
{
self
.
0
.
poll
(
)
}
}
