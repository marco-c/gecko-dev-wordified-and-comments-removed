use
stream
:
:
Stream
;
use
executor
;
#
[
must_use
=
"
iterators
do
nothing
unless
advanced
"
]
#
[
derive
(
Debug
)
]
pub
struct
Wait
<
S
>
{
stream
:
executor
:
:
Spawn
<
S
>
}
impl
<
S
>
Wait
<
S
>
{
pub
fn
get_ref
(
&
self
)
-
>
&
S
{
self
.
stream
.
get_ref
(
)
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
S
{
self
.
stream
.
get_mut
(
)
}
pub
fn
into_inner
(
self
)
-
>
S
{
self
.
stream
.
into_inner
(
)
}
}
pub
fn
new
<
S
:
Stream
>
(
s
:
S
)
-
>
Wait
<
S
>
{
Wait
{
stream
:
executor
:
:
spawn
(
s
)
}
}
impl
<
S
:
Stream
>
Iterator
for
Wait
<
S
>
{
type
Item
=
Result
<
S
:
:
Item
S
:
:
Error
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
stream
.
wait_stream
(
)
}
}
