use
std
:
:
mem
;
use
std
:
:
prelude
:
:
v1
:
:
*
;
use
{
Async
Poll
}
;
use
stream
:
:
{
Stream
Fuse
}
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
Chunks
<
S
>
where
S
:
Stream
{
items
:
Vec
<
S
:
:
Item
>
err
:
Option
<
S
:
:
Error
>
stream
:
Fuse
<
S
>
}
pub
fn
new
<
S
>
(
s
:
S
capacity
:
usize
)
-
>
Chunks
<
S
>
where
S
:
Stream
{
assert
!
(
capacity
>
0
)
;
Chunks
{
items
:
Vec
:
:
with_capacity
(
capacity
)
err
:
None
stream
:
super
:
:
fuse
:
:
new
(
s
)
}
}
impl
<
S
>
:
:
sink
:
:
Sink
for
Chunks
<
S
>
where
S
:
:
:
sink
:
:
Sink
+
Stream
{
type
SinkItem
=
S
:
:
SinkItem
;
type
SinkError
=
S
:
:
SinkError
;
fn
start_send
(
&
mut
self
item
:
S
:
:
SinkItem
)
-
>
:
:
StartSend
<
S
:
:
SinkItem
S
:
:
SinkError
>
{
self
.
stream
.
start_send
(
item
)
}
fn
poll_complete
(
&
mut
self
)
-
>
Poll
<
(
)
S
:
:
SinkError
>
{
self
.
stream
.
poll_complete
(
)
}
fn
close
(
&
mut
self
)
-
>
Poll
<
(
)
S
:
:
SinkError
>
{
self
.
stream
.
close
(
)
}
}
impl
<
S
>
Chunks
<
S
>
where
S
:
Stream
{
fn
take
(
&
mut
self
)
-
>
Vec
<
S
:
:
Item
>
{
let
cap
=
self
.
items
.
capacity
(
)
;
mem
:
:
replace
(
&
mut
self
.
items
Vec
:
:
with_capacity
(
cap
)
)
}
}
impl
<
S
>
Stream
for
Chunks
<
S
>
where
S
:
Stream
{
type
Item
=
Vec
<
<
S
as
Stream
>
:
:
Item
>
;
type
Error
=
<
S
as
Stream
>
:
:
Error
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
Self
:
:
Error
>
{
if
let
Some
(
err
)
=
self
.
err
.
take
(
)
{
return
Err
(
err
)
}
let
cap
=
self
.
items
.
capacity
(
)
;
loop
{
match
self
.
stream
.
poll
(
)
{
Ok
(
Async
:
:
NotReady
)
=
>
return
Ok
(
Async
:
:
NotReady
)
Ok
(
Async
:
:
Ready
(
Some
(
item
)
)
)
=
>
{
self
.
items
.
push
(
item
)
;
if
self
.
items
.
len
(
)
>
=
cap
{
return
Ok
(
Some
(
self
.
take
(
)
)
.
into
(
)
)
}
}
Ok
(
Async
:
:
Ready
(
None
)
)
=
>
{
return
if
self
.
items
.
len
(
)
>
0
{
let
full_buf
=
mem
:
:
replace
(
&
mut
self
.
items
Vec
:
:
new
(
)
)
;
Ok
(
Some
(
full_buf
)
.
into
(
)
)
}
else
{
Ok
(
Async
:
:
Ready
(
None
)
)
}
}
Err
(
e
)
=
>
{
if
self
.
items
.
len
(
)
=
=
0
{
return
Err
(
e
)
}
else
{
self
.
err
=
Some
(
e
)
;
return
Ok
(
Some
(
self
.
take
(
)
)
.
into
(
)
)
}
}
}
}
}
}
