use
{
IntoFuture
Poll
StartSend
}
;
use
stream
:
:
Stream
;
mod
with
;
mod
with_flat_map
;
mod
flush
;
mod
from_err
;
mod
send
;
mod
send_all
;
mod
map_err
;
mod
fanout
;
if_std
!
{
mod
buffer
;
mod
wait
;
pub
use
self
:
:
buffer
:
:
Buffer
;
pub
use
self
:
:
wait
:
:
Wait
;
/
/
TODO
:
consider
expanding
this
via
e
.
g
.
FromIterator
impl
<
T
>
Sink
for
:
:
std
:
:
vec
:
:
Vec
<
T
>
{
type
SinkItem
=
T
;
type
SinkError
=
(
)
;
/
/
Change
this
to
!
once
it
stabilizes
fn
start_send
(
&
mut
self
item
:
Self
:
:
SinkItem
)
-
>
StartSend
<
Self
:
:
SinkItem
Self
:
:
SinkError
>
{
self
.
push
(
item
)
;
Ok
(
:
:
AsyncSink
:
:
Ready
)
}
fn
poll_complete
(
&
mut
self
)
-
>
Poll
<
(
)
Self
:
:
SinkError
>
{
Ok
(
:
:
Async
:
:
Ready
(
(
)
)
)
}
fn
close
(
&
mut
self
)
-
>
Poll
<
(
)
Self
:
:
SinkError
>
{
Ok
(
:
:
Async
:
:
Ready
(
(
)
)
)
}
}
/
/
/
A
type
alias
for
Box
<
Sink
+
Send
>
pub
type
BoxSink
<
T
E
>
=
:
:
std
:
:
boxed
:
:
Box
<
Sink
<
SinkItem
=
T
SinkError
=
E
>
+
:
:
core
:
:
marker
:
:
Send
>
;
impl
<
S
:
?
Sized
+
Sink
>
Sink
for
:
:
std
:
:
boxed
:
:
Box
<
S
>
{
type
SinkItem
=
S
:
:
SinkItem
;
type
SinkError
=
S
:
:
SinkError
;
fn
start_send
(
&
mut
self
item
:
Self
:
:
SinkItem
)
-
>
StartSend
<
Self
:
:
SinkItem
Self
:
:
SinkError
>
{
(
*
*
self
)
.
start_send
(
item
)
}
fn
poll_complete
(
&
mut
self
)
-
>
Poll
<
(
)
Self
:
:
SinkError
>
{
(
*
*
self
)
.
poll_complete
(
)
}
fn
close
(
&
mut
self
)
-
>
Poll
<
(
)
Self
:
:
SinkError
>
{
(
*
*
self
)
.
close
(
)
}
}
}
pub
use
self
:
:
with
:
:
With
;
pub
use
self
:
:
with_flat_map
:
:
WithFlatMap
;
pub
use
self
:
:
flush
:
:
Flush
;
pub
use
self
:
:
send
:
:
Send
;
pub
use
self
:
:
send_all
:
:
SendAll
;
pub
use
self
:
:
map_err
:
:
SinkMapErr
;
pub
use
self
:
:
from_err
:
:
SinkFromErr
;
pub
use
self
:
:
fanout
:
:
Fanout
;
pub
trait
Sink
{
type
SinkItem
;
type
SinkError
;
fn
start_send
(
&
mut
self
item
:
Self
:
:
SinkItem
)
-
>
StartSend
<
Self
:
:
SinkItem
Self
:
:
SinkError
>
;
fn
poll_complete
(
&
mut
self
)
-
>
Poll
<
(
)
Self
:
:
SinkError
>
;
#
[
cfg
(
feature
=
"
with
-
deprecated
"
)
]
fn
close
(
&
mut
self
)
-
>
Poll
<
(
)
Self
:
:
SinkError
>
{
self
.
poll_complete
(
)
}
#
[
cfg
(
not
(
feature
=
"
with
-
deprecated
"
)
)
]
fn
close
(
&
mut
self
)
-
>
Poll
<
(
)
Self
:
:
SinkError
>
;
#
[
cfg
(
feature
=
"
use_std
"
)
]
fn
wait
(
self
)
-
>
Wait
<
Self
>
where
Self
:
Sized
{
wait
:
:
new
(
self
)
}
fn
with
<
U
F
Fut
>
(
self
f
:
F
)
-
>
With
<
Self
U
F
Fut
>
where
F
:
FnMut
(
U
)
-
>
Fut
Fut
:
IntoFuture
<
Item
=
Self
:
:
SinkItem
>
Fut
:
:
Error
:
From
<
Self
:
:
SinkError
>
Self
:
Sized
{
with
:
:
new
(
self
f
)
}
fn
with_flat_map
<
U
F
St
>
(
self
f
:
F
)
-
>
WithFlatMap
<
Self
U
F
St
>
where
F
:
FnMut
(
U
)
-
>
St
St
:
Stream
<
Item
=
Self
:
:
SinkItem
Error
=
Self
:
:
SinkError
>
Self
:
Sized
{
with_flat_map
:
:
new
(
self
f
)
}
fn
sink_map_err
<
F
E
>
(
self
f
:
F
)
-
>
SinkMapErr
<
Self
F
>
where
F
:
FnOnce
(
Self
:
:
SinkError
)
-
>
E
Self
:
Sized
{
map_err
:
:
new
(
self
f
)
}
fn
sink_from_err
<
E
:
From
<
Self
:
:
SinkError
>
>
(
self
)
-
>
from_err
:
:
SinkFromErr
<
Self
E
>
where
Self
:
Sized
{
from_err
:
:
new
(
self
)
}
#
[
cfg
(
feature
=
"
use_std
"
)
]
fn
buffer
(
self
amt
:
usize
)
-
>
Buffer
<
Self
>
where
Self
:
Sized
{
buffer
:
:
new
(
self
amt
)
}
fn
fanout
<
S
>
(
self
other
:
S
)
-
>
Fanout
<
Self
S
>
where
Self
:
Sized
Self
:
:
SinkItem
:
Clone
S
:
Sink
<
SinkItem
=
Self
:
:
SinkItem
SinkError
=
Self
:
:
SinkError
>
{
fanout
:
:
new
(
self
other
)
}
fn
flush
(
self
)
-
>
Flush
<
Self
>
where
Self
:
Sized
{
flush
:
:
new
(
self
)
}
fn
send
(
self
item
:
Self
:
:
SinkItem
)
-
>
Send
<
Self
>
where
Self
:
Sized
{
send
:
:
new
(
self
item
)
}
fn
send_all
<
S
>
(
self
stream
:
S
)
-
>
SendAll
<
Self
S
>
where
S
:
Stream
<
Item
=
Self
:
:
SinkItem
>
Self
:
:
SinkError
:
From
<
S
:
:
Error
>
Self
:
Sized
{
send_all
:
:
new
(
self
stream
)
}
}
impl
<
'
a
S
:
?
Sized
+
Sink
>
Sink
for
&
'
a
mut
S
{
type
SinkItem
=
S
:
:
SinkItem
;
type
SinkError
=
S
:
:
SinkError
;
fn
start_send
(
&
mut
self
item
:
Self
:
:
SinkItem
)
-
>
StartSend
<
Self
:
:
SinkItem
Self
:
:
SinkError
>
{
(
*
*
self
)
.
start_send
(
item
)
}
fn
poll_complete
(
&
mut
self
)
-
>
Poll
<
(
)
Self
:
:
SinkError
>
{
(
*
*
self
)
.
poll_complete
(
)
}
fn
close
(
&
mut
self
)
-
>
Poll
<
(
)
Self
:
:
SinkError
>
{
(
*
*
self
)
.
close
(
)
}
}
