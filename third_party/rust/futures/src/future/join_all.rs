use
std
:
:
prelude
:
:
v1
:
:
*
;
use
std
:
:
fmt
;
use
std
:
:
mem
;
use
{
Future
IntoFuture
Poll
Async
}
;
#
[
derive
(
Debug
)
]
enum
ElemState
<
T
>
where
T
:
Future
{
Pending
(
T
)
Done
(
T
:
:
Item
)
}
#
[
must_use
=
"
futures
do
nothing
unless
polled
"
]
pub
struct
JoinAll
<
I
>
where
I
:
IntoIterator
I
:
:
Item
:
IntoFuture
{
elems
:
Vec
<
ElemState
<
<
I
:
:
Item
as
IntoFuture
>
:
:
Future
>
>
}
impl
<
I
>
fmt
:
:
Debug
for
JoinAll
<
I
>
where
I
:
IntoIterator
I
:
:
Item
:
IntoFuture
<
<
I
as
IntoIterator
>
:
:
Item
as
IntoFuture
>
:
:
Future
:
fmt
:
:
Debug
<
<
I
as
IntoIterator
>
:
:
Item
as
IntoFuture
>
:
:
Item
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
.
debug_struct
(
"
JoinAll
"
)
.
field
(
"
elems
"
&
self
.
elems
)
.
finish
(
)
}
}
pub
fn
join_all
<
I
>
(
i
:
I
)
-
>
JoinAll
<
I
>
where
I
:
IntoIterator
I
:
:
Item
:
IntoFuture
{
let
elems
=
i
.
into_iter
(
)
.
map
(
|
f
|
{
ElemState
:
:
Pending
(
f
.
into_future
(
)
)
}
)
.
collect
(
)
;
JoinAll
{
elems
:
elems
}
}
impl
<
I
>
Future
for
JoinAll
<
I
>
where
I
:
IntoIterator
I
:
:
Item
:
IntoFuture
{
type
Item
=
Vec
<
<
I
:
:
Item
as
IntoFuture
>
:
:
Item
>
;
type
Error
=
<
I
:
:
Item
as
IntoFuture
>
:
:
Error
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
Self
:
:
Item
Self
:
:
Error
>
{
let
mut
all_done
=
true
;
for
idx
in
0
.
.
self
.
elems
.
len
(
)
{
let
done_val
=
match
&
mut
self
.
elems
[
idx
]
{
&
mut
ElemState
:
:
Pending
(
ref
mut
t
)
=
>
{
match
t
.
poll
(
)
{
Ok
(
Async
:
:
Ready
(
v
)
)
=
>
Ok
(
v
)
Ok
(
Async
:
:
NotReady
)
=
>
{
all_done
=
false
;
continue
}
Err
(
e
)
=
>
Err
(
e
)
}
}
&
mut
ElemState
:
:
Done
(
ref
mut
_v
)
=
>
continue
}
;
match
done_val
{
Ok
(
v
)
=
>
self
.
elems
[
idx
]
=
ElemState
:
:
Done
(
v
)
Err
(
e
)
=
>
{
self
.
elems
=
Vec
:
:
new
(
)
;
return
Err
(
e
)
}
}
}
if
all_done
{
let
elems
=
mem
:
:
replace
(
&
mut
self
.
elems
Vec
:
:
new
(
)
)
;
let
result
=
elems
.
into_iter
(
)
.
map
(
|
e
|
{
match
e
{
ElemState
:
:
Done
(
t
)
=
>
t
_
=
>
unreachable
!
(
)
}
}
)
.
collect
(
)
;
Ok
(
Async
:
:
Ready
(
result
)
)
}
else
{
Ok
(
Async
:
:
NotReady
)
}
}
}
