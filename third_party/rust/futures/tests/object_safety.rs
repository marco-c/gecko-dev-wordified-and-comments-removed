fn
assert_is_object_safe
<
T
>
(
)
{
}
#
[
test
]
fn
future
(
)
{
use
futures
:
:
future
:
:
{
FusedFuture
Future
TryFuture
}
;
assert_is_object_safe
:
:
<
&
dyn
Future
<
Output
=
(
)
>
>
(
)
;
assert_is_object_safe
:
:
<
&
dyn
FusedFuture
<
Output
=
(
)
>
>
(
)
;
assert_is_object_safe
:
:
<
&
dyn
TryFuture
<
Ok
=
(
)
Error
=
(
)
Output
=
Result
<
(
)
(
)
>
>
>
(
)
;
}
#
[
test
]
fn
stream
(
)
{
use
futures
:
:
stream
:
:
{
FusedStream
Stream
TryStream
}
;
assert_is_object_safe
:
:
<
&
dyn
Stream
<
Item
=
(
)
>
>
(
)
;
assert_is_object_safe
:
:
<
&
dyn
FusedStream
<
Item
=
(
)
>
>
(
)
;
assert_is_object_safe
:
:
<
&
dyn
TryStream
<
Ok
=
(
)
Error
=
(
)
Item
=
Result
<
(
)
(
)
>
>
>
(
)
;
}
#
[
test
]
fn
sink
(
)
{
use
futures
:
:
sink
:
:
Sink
;
assert_is_object_safe
:
:
<
&
dyn
Sink
<
(
)
Error
=
(
)
>
>
(
)
;
}
#
[
test
]
fn
io
(
)
{
use
futures
:
:
io
:
:
{
AsyncBufRead
AsyncRead
AsyncSeek
AsyncWrite
}
;
assert_is_object_safe
:
:
<
&
dyn
AsyncRead
>
(
)
;
assert_is_object_safe
:
:
<
&
dyn
AsyncWrite
>
(
)
;
assert_is_object_safe
:
:
<
&
dyn
AsyncSeek
>
(
)
;
assert_is_object_safe
:
:
<
&
dyn
AsyncBufRead
>
(
)
;
}
#
[
test
]
fn
task
(
)
{
use
futures
:
:
task
:
:
{
LocalSpawn
Spawn
}
;
assert_is_object_safe
:
:
<
&
dyn
Spawn
>
(
)
;
assert_is_object_safe
:
:
<
&
dyn
LocalSpawn
>
(
)
;
}
