use
num_traits
:
:
Float
;
use
crate
:
:
{
uniform
:
:
SampleUniform
Distribution
Uniform
}
;
use
rand
:
:
Rng
;
#
[
derive
(
Clone
Copy
Debug
)
]
#
[
cfg_attr
(
feature
=
"
serde1
"
derive
(
serde
:
:
Serialize
serde
:
:
Deserialize
)
)
]
pub
struct
UnitSphere
;
impl
<
F
:
Float
+
SampleUniform
>
Distribution
<
[
F
;
3
]
>
for
UnitSphere
{
#
[
inline
]
fn
sample
<
R
:
Rng
+
?
Sized
>
(
&
self
rng
:
&
mut
R
)
-
>
[
F
;
3
]
{
let
uniform
=
Uniform
:
:
new
(
F
:
:
from
(
-
1
.
)
.
unwrap
(
)
F
:
:
from
(
1
.
)
.
unwrap
(
)
)
;
loop
{
let
(
x1
x2
)
=
(
uniform
.
sample
(
rng
)
uniform
.
sample
(
rng
)
)
;
let
sum
=
x1
*
x1
+
x2
*
x2
;
if
sum
>
=
F
:
:
from
(
1
.
)
.
unwrap
(
)
{
continue
;
}
let
factor
=
F
:
:
from
(
2
.
)
.
unwrap
(
)
*
(
F
:
:
one
(
)
-
sum
)
.
sqrt
(
)
;
return
[
x1
*
factor
x2
*
factor
F
:
:
from
(
1
.
)
.
unwrap
(
)
-
F
:
:
from
(
2
.
)
.
unwrap
(
)
*
sum
]
;
}
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
UnitSphere
;
use
crate
:
:
Distribution
;
#
[
test
]
fn
norm
(
)
{
let
mut
rng
=
crate
:
:
test
:
:
rng
(
1
)
;
for
_
in
0
.
.
1000
{
let
x
:
[
f64
;
3
]
=
UnitSphere
.
sample
(
&
mut
rng
)
;
assert_almost_eq
!
(
x
[
0
]
*
x
[
0
]
+
x
[
1
]
*
x
[
1
]
+
x
[
2
]
*
x
[
2
]
1
.
1e
-
15
)
;
}
}
}
