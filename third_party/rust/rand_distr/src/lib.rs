#
!
[
doc
(
html_logo_url
=
"
https
:
/
/
www
.
rust
-
lang
.
org
/
logos
/
rust
-
logo
-
128x128
-
blk
.
png
"
html_favicon_url
=
"
https
:
/
/
www
.
rust
-
lang
.
org
/
favicon
.
ico
"
html_root_url
=
"
https
:
/
/
rust
-
random
.
github
.
io
/
rand
/
"
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
deny
(
missing_debug_implementations
)
]
#
!
[
allow
(
clippy
:
:
excessive_precision
clippy
:
:
float_cmp
clippy
:
:
unreadable_literal
)
]
#
!
[
allow
(
clippy
:
:
neg_cmp_op_on_partial_ord
)
]
#
!
[
no_std
]
#
!
[
cfg_attr
(
doc_cfg
feature
(
doc_cfg
)
)
]
#
[
cfg
(
feature
=
"
alloc
"
)
]
extern
crate
alloc
;
#
[
cfg
(
feature
=
"
std
"
)
]
extern
crate
std
;
#
[
allow
(
unused
)
]
use
rand
:
:
Rng
;
pub
use
rand
:
:
distributions
:
:
{
uniform
Alphanumeric
Bernoulli
BernoulliError
DistIter
Distribution
Open01
OpenClosed01
Standard
Uniform
}
;
pub
use
self
:
:
binomial
:
:
{
Binomial
Error
as
BinomialError
}
;
pub
use
self
:
:
cauchy
:
:
{
Cauchy
Error
as
CauchyError
}
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
doc_cfg
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
pub
use
self
:
:
dirichlet
:
:
{
Dirichlet
Error
as
DirichletError
}
;
pub
use
self
:
:
exponential
:
:
{
Error
as
ExpError
Exp
Exp1
}
;
pub
use
self
:
:
frechet
:
:
{
Error
as
FrechetError
Frechet
}
;
pub
use
self
:
:
gamma
:
:
{
Beta
BetaError
ChiSquared
ChiSquaredError
Error
as
GammaError
FisherF
FisherFError
Gamma
StudentT
}
;
pub
use
self
:
:
geometric
:
:
{
Error
as
GeoError
Geometric
StandardGeometric
}
;
pub
use
self
:
:
gumbel
:
:
{
Error
as
GumbelError
Gumbel
}
;
pub
use
self
:
:
hypergeometric
:
:
{
Error
as
HyperGeoError
Hypergeometric
}
;
pub
use
self
:
:
inverse_gaussian
:
:
{
Error
as
InverseGaussianError
InverseGaussian
}
;
pub
use
self
:
:
normal
:
:
{
Error
as
NormalError
LogNormal
Normal
StandardNormal
}
;
pub
use
self
:
:
normal_inverse_gaussian
:
:
{
Error
as
NormalInverseGaussianError
NormalInverseGaussian
}
;
pub
use
self
:
:
pareto
:
:
{
Error
as
ParetoError
Pareto
}
;
pub
use
self
:
:
pert
:
:
{
Pert
PertError
}
;
pub
use
self
:
:
poisson
:
:
{
Error
as
PoissonError
Poisson
}
;
pub
use
self
:
:
skew_normal
:
:
{
Error
as
SkewNormalError
SkewNormal
}
;
pub
use
self
:
:
triangular
:
:
{
Triangular
TriangularError
}
;
pub
use
self
:
:
unit_ball
:
:
UnitBall
;
pub
use
self
:
:
unit_circle
:
:
UnitCircle
;
pub
use
self
:
:
unit_disc
:
:
UnitDisc
;
pub
use
self
:
:
unit_sphere
:
:
UnitSphere
;
pub
use
self
:
:
weibull
:
:
{
Error
as
WeibullError
Weibull
}
;
pub
use
self
:
:
zipf
:
:
{
Zeta
ZetaError
Zipf
ZipfError
}
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
doc_cfg
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
pub
use
rand
:
:
distributions
:
:
{
WeightedError
WeightedIndex
}
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
doc_cfg
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
pub
use
weighted_alias
:
:
WeightedAliasIndex
;
pub
use
num_traits
;
#
[
cfg
(
test
)
]
#
[
macro_use
]
mod
test
{
pub
fn
rng
(
seed
:
u64
)
-
>
impl
rand
:
:
RngCore
{
const
INC
:
u64
=
11634580027462260723
;
rand_pcg
:
:
Pcg32
:
:
new
(
seed
INC
)
}
macro_rules
!
assert_almost_eq
{
(
a
:
expr
b
:
expr
prec
:
expr
)
=
>
{
let
diff
=
(
a
-
b
)
.
abs
(
)
;
assert
!
(
diff
<
=
prec
"
assertion
failed
:
abs
(
left
-
right
)
=
{
:
.
1e
}
<
{
:
e
}
\
(
left
:
{
}
right
:
{
}
)
"
diff
prec
a
b
)
;
}
;
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
doc_cfg
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
pub
mod
weighted_alias
;
mod
binomial
;
mod
cauchy
;
mod
dirichlet
;
mod
exponential
;
mod
frechet
;
mod
gamma
;
mod
geometric
;
mod
gumbel
;
mod
hypergeometric
;
mod
inverse_gaussian
;
mod
normal
;
mod
normal_inverse_gaussian
;
mod
pareto
;
mod
pert
;
mod
poisson
;
mod
skew_normal
;
mod
triangular
;
mod
unit_ball
;
mod
unit_circle
;
mod
unit_disc
;
mod
unit_sphere
;
mod
utils
;
mod
weibull
;
mod
ziggurat_tables
;
mod
zipf
;
