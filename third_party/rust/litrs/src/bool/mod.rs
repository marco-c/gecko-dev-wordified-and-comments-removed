use
std
:
:
fmt
;
use
crate
:
:
{
ParseError
err
:
:
{
perr
ParseErrorKind
:
:
*
}
}
;
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
enum
BoolLit
{
False
True
}
impl
BoolLit
{
pub
fn
parse
(
s
:
&
str
)
-
>
Result
<
Self
ParseError
>
{
match
s
{
"
false
"
=
>
Ok
(
Self
:
:
False
)
"
true
"
=
>
Ok
(
Self
:
:
True
)
_
=
>
Err
(
perr
(
None
InvalidLiteral
)
)
}
}
pub
fn
value
(
self
)
-
>
bool
{
match
self
{
Self
:
:
False
=
>
false
Self
:
:
True
=
>
true
}
}
pub
fn
as_str
(
&
self
)
-
>
&
'
static
str
{
match
self
{
Self
:
:
False
=
>
"
false
"
Self
:
:
True
=
>
"
true
"
}
}
}
impl
fmt
:
:
Display
for
BoolLit
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
pad
(
self
.
as_str
(
)
)
}
}
#
[
cfg
(
test
)
]
mod
tests
;
