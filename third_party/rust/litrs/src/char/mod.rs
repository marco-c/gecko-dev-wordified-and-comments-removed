use
std
:
:
fmt
;
use
crate
:
:
{
Buffer
ParseError
err
:
:
{
perr
ParseErrorKind
:
:
*
}
escape
:
:
unescape
parse
:
:
{
first_byte_or_empty
check_suffix
}
}
;
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
struct
CharLit
<
B
:
Buffer
>
{
raw
:
B
start_suffix
:
usize
value
:
char
}
impl
<
B
:
Buffer
>
CharLit
<
B
>
{
pub
fn
parse
(
input
:
B
)
-
>
Result
<
Self
ParseError
>
{
match
first_byte_or_empty
(
&
input
)
?
{
b
'
\
'
'
=
>
{
let
(
value
start_suffix
)
=
parse_impl
(
&
input
)
?
;
Ok
(
Self
{
raw
:
input
value
start_suffix
}
)
}
_
=
>
Err
(
perr
(
0
DoesNotStartWithQuote
)
)
}
}
pub
fn
value
(
&
self
)
-
>
char
{
self
.
value
}
pub
fn
suffix
(
&
self
)
-
>
&
str
{
&
(
*
self
.
raw
)
[
self
.
start_suffix
.
.
]
}
pub
fn
raw_input
(
&
self
)
-
>
&
str
{
&
self
.
raw
}
pub
fn
into_raw_input
(
self
)
-
>
B
{
self
.
raw
}
}
impl
CharLit
<
&
str
>
{
pub
fn
to_owned
(
&
self
)
-
>
CharLit
<
String
>
{
CharLit
{
raw
:
self
.
raw
.
to_owned
(
)
start_suffix
:
self
.
start_suffix
value
:
self
.
value
}
}
}
impl
<
B
:
Buffer
>
fmt
:
:
Display
for
CharLit
<
B
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
pad
(
&
self
.
raw
)
}
}
#
[
inline
(
never
)
]
pub
(
crate
)
fn
parse_impl
(
input
:
&
str
)
-
>
Result
<
(
char
usize
)
ParseError
>
{
let
first
=
input
.
chars
(
)
.
nth
(
1
)
.
ok_or
(
perr
(
None
UnterminatedCharLiteral
)
)
?
;
let
(
c
len
)
=
match
first
{
'
\
'
'
if
input
.
chars
(
)
.
nth
(
2
)
=
=
Some
(
'
\
'
'
)
=
>
return
Err
(
perr
(
1
UnescapedSingleQuote
)
)
'
\
'
'
=
>
return
Err
(
perr
(
None
EmptyCharLiteral
)
)
'
\
n
'
|
'
\
t
'
|
'
\
r
'
=
>
return
Err
(
perr
(
1
UnescapedSpecialWhitespace
)
)
'
\
\
'
=
>
unescape
:
:
<
char
>
(
&
input
[
1
.
.
]
1
)
?
other
=
>
(
other
other
.
len_utf8
(
)
)
}
;
match
input
[
1
+
len
.
.
]
.
find
(
'
\
'
'
)
{
Some
(
0
)
=
>
{
}
Some
(
_
)
=
>
return
Err
(
perr
(
None
OverlongCharLiteral
)
)
None
=
>
return
Err
(
perr
(
None
UnterminatedCharLiteral
)
)
}
let
start_suffix
=
1
+
len
+
1
;
let
suffix
=
&
input
[
start_suffix
.
.
]
;
check_suffix
(
suffix
)
.
map_err
(
|
kind
|
perr
(
start_suffix
kind
)
)
?
;
Ok
(
(
c
start_suffix
)
)
}
#
[
cfg
(
test
)
]
mod
tests
;
