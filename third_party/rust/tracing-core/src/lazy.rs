#
[
cfg
(
feature
=
"
std
"
)
]
pub
(
crate
)
use
once_cell
:
:
sync
:
:
Lazy
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
pub
(
crate
)
use
self
:
:
spin
:
:
Lazy
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
mod
spin
{
use
crate
:
:
spin
:
:
Once
;
use
core
:
:
{
cell
:
:
Cell
fmt
ops
:
:
Deref
}
;
pub
(
crate
)
struct
Lazy
<
T
F
=
fn
(
)
-
>
T
>
{
cell
:
Once
<
T
>
init
:
Cell
<
Option
<
F
>
>
}
impl
<
T
:
fmt
:
:
Debug
F
>
fmt
:
:
Debug
for
Lazy
<
T
F
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
Lazy
"
)
.
field
(
"
cell
"
&
self
.
cell
)
.
field
(
"
init
"
&
"
.
.
"
)
.
finish
(
)
}
}
unsafe
impl
<
T
F
:
Send
>
Sync
for
Lazy
<
T
F
>
where
Once
<
T
>
:
Sync
{
}
impl
<
T
F
>
Lazy
<
T
F
>
{
pub
(
crate
)
const
fn
new
(
init
:
F
)
-
>
Lazy
<
T
F
>
{
Lazy
{
cell
:
Once
:
:
new
(
)
init
:
Cell
:
:
new
(
Some
(
init
)
)
}
}
}
impl
<
T
F
:
FnOnce
(
)
-
>
T
>
Lazy
<
T
F
>
{
pub
(
crate
)
fn
force
(
this
:
&
Lazy
<
T
F
>
)
-
>
&
T
{
this
.
cell
.
call_once
(
|
|
match
this
.
init
.
take
(
)
{
Some
(
f
)
=
>
f
(
)
None
=
>
panic
!
(
"
Lazy
instance
has
previously
been
poisoned
"
)
}
)
}
}
impl
<
T
F
:
FnOnce
(
)
-
>
T
>
Deref
for
Lazy
<
T
F
>
{
type
Target
=
T
;
fn
deref
(
&
self
)
-
>
&
T
{
Lazy
:
:
force
(
self
)
}
}
impl
<
T
:
Default
>
Default
for
Lazy
<
T
>
{
fn
default
(
)
-
>
Lazy
<
T
>
{
Lazy
:
:
new
(
T
:
:
default
)
}
}
}
