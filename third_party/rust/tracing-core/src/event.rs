use
crate
:
:
parent
:
:
Parent
;
use
crate
:
:
span
:
:
Id
;
use
crate
:
:
{
field
Metadata
}
;
#
[
derive
(
Debug
)
]
pub
struct
Event
<
'
a
>
{
fields
:
&
'
a
field
:
:
ValueSet
<
'
a
>
metadata
:
&
'
static
Metadata
<
'
static
>
parent
:
Parent
}
impl
<
'
a
>
Event
<
'
a
>
{
pub
fn
dispatch
(
metadata
:
&
'
static
Metadata
<
'
static
>
fields
:
&
'
a
field
:
:
ValueSet
<
'
_
>
)
{
let
event
=
Event
:
:
new
(
metadata
fields
)
;
crate
:
:
dispatcher
:
:
get_default
(
|
current
|
{
current
.
event
(
&
event
)
;
}
)
;
}
#
[
inline
]
pub
fn
new
(
metadata
:
&
'
static
Metadata
<
'
static
>
fields
:
&
'
a
field
:
:
ValueSet
<
'
a
>
)
-
>
Self
{
Event
{
fields
metadata
parent
:
Parent
:
:
Current
}
}
#
[
inline
]
pub
fn
new_child_of
(
parent
:
impl
Into
<
Option
<
Id
>
>
metadata
:
&
'
static
Metadata
<
'
static
>
fields
:
&
'
a
field
:
:
ValueSet
<
'
a
>
)
-
>
Self
{
let
parent
=
match
parent
.
into
(
)
{
Some
(
p
)
=
>
Parent
:
:
Explicit
(
p
)
None
=
>
Parent
:
:
Root
}
;
Event
{
fields
metadata
parent
}
}
pub
fn
child_of
(
parent
:
impl
Into
<
Option
<
Id
>
>
metadata
:
&
'
static
Metadata
<
'
static
>
fields
:
&
'
a
field
:
:
ValueSet
<
'
_
>
)
{
let
event
=
Self
:
:
new_child_of
(
parent
metadata
fields
)
;
crate
:
:
dispatcher
:
:
get_default
(
|
current
|
{
current
.
event
(
&
event
)
;
}
)
;
}
#
[
inline
]
pub
fn
record
(
&
self
visitor
:
&
mut
dyn
field
:
:
Visit
)
{
self
.
fields
.
record
(
visitor
)
;
}
pub
fn
fields
(
&
self
)
-
>
field
:
:
Iter
{
self
.
fields
.
field_set
(
)
.
iter
(
)
}
pub
fn
metadata
(
&
self
)
-
>
&
'
static
Metadata
<
'
static
>
{
self
.
metadata
}
pub
fn
is_root
(
&
self
)
-
>
bool
{
matches
!
(
self
.
parent
Parent
:
:
Root
)
}
pub
fn
is_contextual
(
&
self
)
-
>
bool
{
matches
!
(
self
.
parent
Parent
:
:
Current
)
}
pub
fn
parent
(
&
self
)
-
>
Option
<
&
Id
>
{
match
self
.
parent
{
Parent
:
:
Explicit
(
ref
p
)
=
>
Some
(
p
)
_
=
>
None
}
}
}
