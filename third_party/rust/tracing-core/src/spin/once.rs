use
core
:
:
cell
:
:
UnsafeCell
;
use
core
:
:
fmt
;
use
core
:
:
hint
:
:
spin_loop
;
use
core
:
:
sync
:
:
atomic
:
:
{
AtomicUsize
Ordering
}
;
pub
struct
Once
<
T
>
{
state
:
AtomicUsize
data
:
UnsafeCell
<
Option
<
T
>
>
}
impl
<
T
:
fmt
:
:
Debug
>
fmt
:
:
Debug
for
Once
<
T
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
self
.
r
#
try
(
)
{
Some
(
s
)
=
>
write
!
(
f
"
Once
{
{
data
:
"
)
.
and_then
(
|
(
)
|
s
.
fmt
(
f
)
)
.
and_then
(
|
(
)
|
write
!
(
f
"
}
}
"
)
)
None
=
>
write
!
(
f
"
Once
{
{
<
uninitialized
>
}
}
"
)
}
}
}
unsafe
impl
<
T
:
Send
+
Sync
>
Sync
for
Once
<
T
>
{
}
unsafe
impl
<
T
:
Send
>
Send
for
Once
<
T
>
{
}
const
INCOMPLETE
:
usize
=
0x0
;
const
RUNNING
:
usize
=
0x1
;
const
COMPLETE
:
usize
=
0x2
;
const
PANICKED
:
usize
=
0x3
;
use
core
:
:
hint
:
:
unreachable_unchecked
as
unreachable
;
impl
<
T
>
Once
<
T
>
{
pub
const
INIT
:
Self
=
Once
{
state
:
AtomicUsize
:
:
new
(
INCOMPLETE
)
data
:
UnsafeCell
:
:
new
(
None
)
}
;
pub
const
fn
new
(
)
-
>
Once
<
T
>
{
Self
:
:
INIT
}
fn
force_get
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
T
{
match
unsafe
{
&
*
self
.
data
.
get
(
)
}
.
as_ref
(
)
{
None
=
>
unsafe
{
unreachable
(
)
}
Some
(
p
)
=
>
p
}
}
pub
fn
call_once
<
'
a
F
>
(
&
'
a
self
builder
:
F
)
-
>
&
'
a
T
where
F
:
FnOnce
(
)
-
>
T
{
let
mut
status
=
self
.
state
.
load
(
Ordering
:
:
SeqCst
)
;
if
status
=
=
INCOMPLETE
{
status
=
match
self
.
state
.
compare_exchange
(
INCOMPLETE
RUNNING
Ordering
:
:
SeqCst
Ordering
:
:
SeqCst
)
{
Ok
(
status
)
=
>
{
debug_assert_eq
!
(
status
INCOMPLETE
"
if
compare_exchange
succeeded
previous
status
must
be
incomplete
"
)
;
let
mut
finish
=
Finish
{
state
:
&
self
.
state
panicked
:
true
}
;
unsafe
{
*
self
.
data
.
get
(
)
=
Some
(
builder
(
)
)
}
;
finish
.
panicked
=
false
;
self
.
state
.
store
(
COMPLETE
Ordering
:
:
SeqCst
)
;
return
self
.
force_get
(
)
;
}
Err
(
status
)
=
>
status
}
}
loop
{
match
status
{
INCOMPLETE
=
>
unreachable
!
(
)
RUNNING
=
>
{
spin_loop
(
)
;
status
=
self
.
state
.
load
(
Ordering
:
:
SeqCst
)
}
PANICKED
=
>
panic
!
(
"
Once
has
panicked
"
)
COMPLETE
=
>
return
self
.
force_get
(
)
_
=
>
unsafe
{
unreachable
(
)
}
}
}
}
pub
fn
r
#
try
<
'
a
>
(
&
'
a
self
)
-
>
Option
<
&
'
a
T
>
{
match
self
.
state
.
load
(
Ordering
:
:
SeqCst
)
{
COMPLETE
=
>
Some
(
self
.
force_get
(
)
)
_
=
>
None
}
}
pub
fn
wait
<
'
a
>
(
&
'
a
self
)
-
>
Option
<
&
'
a
T
>
{
loop
{
match
self
.
state
.
load
(
Ordering
:
:
SeqCst
)
{
INCOMPLETE
=
>
return
None
RUNNING
=
>
{
spin_loop
(
)
}
COMPLETE
=
>
return
Some
(
self
.
force_get
(
)
)
PANICKED
=
>
panic
!
(
"
Once
has
panicked
"
)
_
=
>
unsafe
{
unreachable
(
)
}
}
}
}
}
struct
Finish
<
'
a
>
{
state
:
&
'
a
AtomicUsize
panicked
:
bool
}
impl
<
'
a
>
Drop
for
Finish
<
'
a
>
{
fn
drop
(
&
mut
self
)
{
if
self
.
panicked
{
self
.
state
.
store
(
PANICKED
Ordering
:
:
SeqCst
)
;
}
}
}
