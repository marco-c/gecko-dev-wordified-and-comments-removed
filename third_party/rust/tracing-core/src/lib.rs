#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
tracing
-
core
/
0
.
1
.
22
"
)
]
#
!
[
doc
(
html_logo_url
=
"
https
:
/
/
raw
.
githubusercontent
.
com
/
tokio
-
rs
/
tracing
/
master
/
assets
/
logo
-
type
.
png
"
issue_tracker_base_url
=
"
https
:
/
/
github
.
com
/
tokio
-
rs
/
tracing
/
issues
/
"
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_cfg
)
deny
(
rustdoc
:
:
broken_intra_doc_links
)
)
]
#
!
[
warn
(
missing_debug_implementations
missing_docs
rust_2018_idioms
unreachable_pub
bad_style
const_err
dead_code
improper_ctypes
non_shorthand_field_patterns
no_mangle_generic_items
overflowing_literals
path_statements
patterns_in_fns_without_body
private_in_public
unconditional_recursion
unused
unused_allocation
unused_comparisons
unused_parens
while_true
)
]
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
extern
crate
alloc
;
#
[
macro_export
]
macro_rules
!
identify_callsite
{
(
callsite
:
expr
)
=
>
{
crate
:
:
callsite
:
:
Identifier
(
callsite
)
}
;
}
#
[
macro_export
]
macro_rules
!
metadata
{
(
name
:
name
:
expr
target
:
target
:
expr
level
:
level
:
expr
fields
:
fields
:
expr
callsite
:
callsite
:
expr
kind
:
kind
:
expr
)
=
>
{
crate
:
:
metadata
!
{
name
:
name
target
:
target
level
:
level
fields
:
fields
callsite
:
callsite
kind
:
kind
}
}
;
(
name
:
name
:
expr
target
:
target
:
expr
level
:
level
:
expr
fields
:
fields
:
expr
callsite
:
callsite
:
expr
kind
:
kind
:
expr
)
=
>
{
crate
:
:
metadata
:
:
Metadata
:
:
new
(
name
target
level
Some
(
file
!
(
)
)
Some
(
line
!
(
)
)
Some
(
module_path
!
(
)
)
crate
:
:
field
:
:
FieldSet
:
:
new
(
fields
crate
:
:
identify_callsite
!
(
callsite
)
)
kind
)
}
;
}
#
[
cfg
(
feature
=
"
std
"
)
]
pub
(
crate
)
use
lazy_static
:
:
lazy_static
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
#
[
macro_use
]
mod
lazy_static
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
pub
(
crate
)
mod
spin
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
#
[
doc
(
hidden
)
]
pub
type
Once
=
self
:
:
spin
:
:
Once
<
(
)
>
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
stdlib
:
:
sync
:
:
Once
;
pub
mod
callsite
;
pub
mod
dispatcher
;
pub
mod
event
;
pub
mod
field
;
pub
mod
metadata
;
mod
parent
;
pub
mod
span
;
pub
(
crate
)
mod
stdlib
;
pub
mod
subscriber
;
#
[
doc
(
inline
)
]
pub
use
self
:
:
{
callsite
:
:
Callsite
dispatcher
:
:
Dispatch
event
:
:
Event
field
:
:
Field
metadata
:
:
{
Level
LevelFilter
Metadata
}
subscriber
:
:
Subscriber
}
;
pub
use
self
:
:
{
metadata
:
:
Kind
subscriber
:
:
Interest
}
;
mod
sealed
{
pub
trait
Sealed
{
}
}
