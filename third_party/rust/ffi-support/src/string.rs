use
crate
:
:
FfiStr
;
use
std
:
:
ffi
:
:
CString
;
use
std
:
:
os
:
:
raw
:
:
c_char
;
use
std
:
:
ptr
;
#
[
inline
]
pub
fn
rust_string_to_c
(
rust_string
:
impl
Into
<
String
>
)
-
>
*
mut
c_char
{
CString
:
:
new
(
rust_string
.
into
(
)
)
.
expect
(
"
Error
:
Rust
string
contained
an
interior
null
byte
.
"
)
.
into_raw
(
)
}
#
[
inline
]
pub
fn
opt_rust_string_to_c
(
opt_rust_string
:
Option
<
impl
Into
<
String
>
>
)
-
>
*
mut
c_char
{
if
let
Some
(
s
)
=
opt_rust_string
{
rust_string_to_c
(
s
)
}
else
{
ptr
:
:
null_mut
(
)
}
}
#
[
inline
]
pub
unsafe
fn
destroy_c_string
(
cstring
:
*
mut
c_char
)
{
if
!
cstring
.
is_null
(
)
{
drop
(
CString
:
:
from_raw
(
cstring
)
)
}
}
#
[
inline
]
#
[
deprecated
(
since
=
"
0
.
3
.
0
"
note
=
"
Please
use
FfiStr
:
:
as_str
instead
"
)
]
pub
unsafe
fn
rust_str_from_c
<
'
a
>
(
c_string
:
*
const
c_char
)
-
>
&
'
a
str
{
FfiStr
:
:
from_raw
(
c_string
)
.
as_str
(
)
}
#
[
inline
]
#
[
deprecated
(
since
=
"
0
.
3
.
0
"
note
=
"
Please
use
FfiStr
:
:
as_opt_str
instead
"
)
]
pub
unsafe
fn
opt_rust_str_from_c
<
'
a
>
(
c_string
:
*
const
c_char
)
-
>
Option
<
&
'
a
str
>
{
FfiStr
:
:
from_raw
(
c_string
)
.
as_opt_str
(
)
}
#
[
inline
]
#
[
deprecated
(
since
=
"
0
.
3
.
0
"
note
=
"
Please
use
FfiStr
:
:
into_string
instead
"
)
]
pub
unsafe
fn
rust_string_from_c
(
c_string
:
*
const
c_char
)
-
>
String
{
FfiStr
:
:
from_raw
(
c_string
)
.
into_string
(
)
}
#
[
inline
]
#
[
deprecated
(
since
=
"
0
.
3
.
0
"
note
=
"
Please
use
FfiStr
:
:
into_opt_string
instead
"
)
]
pub
unsafe
fn
opt_rust_string_from_c
(
c_string
:
*
const
c_char
)
-
>
Option
<
String
>
{
FfiStr
:
:
from_raw
(
c_string
)
.
into_opt_string
(
)
}
