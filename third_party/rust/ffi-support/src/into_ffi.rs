use
crate
:
:
string
:
:
*
;
use
std
:
:
os
:
:
raw
:
:
{
c_char
c_void
}
;
use
std
:
:
ptr
;
pub
unsafe
trait
IntoFfi
:
Sized
{
type
Value
;
fn
ffi_default
(
)
-
>
Self
:
:
Value
;
fn
into_ffi_value
(
self
)
-
>
Self
:
:
Value
;
}
unsafe
impl
IntoFfi
for
String
{
type
Value
=
*
mut
c_char
;
#
[
inline
]
fn
ffi_default
(
)
-
>
Self
:
:
Value
{
ptr
:
:
null_mut
(
)
}
#
[
inline
]
fn
into_ffi_value
(
self
)
-
>
Self
:
:
Value
{
rust_string_to_c
(
self
)
}
}
unsafe
impl
<
T
:
IntoFfi
>
IntoFfi
for
Option
<
T
>
{
type
Value
=
<
T
as
IntoFfi
>
:
:
Value
;
#
[
inline
]
fn
ffi_default
(
)
-
>
Self
:
:
Value
{
T
:
:
ffi_default
(
)
}
#
[
inline
]
fn
into_ffi_value
(
self
)
-
>
Self
:
:
Value
{
if
let
Some
(
s
)
=
self
{
s
.
into_ffi_value
(
)
}
else
{
T
:
:
ffi_default
(
)
}
}
}
unsafe
impl
IntoFfi
for
bool
{
type
Value
=
u8
;
#
[
inline
]
fn
ffi_default
(
)
-
>
Self
:
:
Value
{
0u8
}
#
[
inline
]
fn
into_ffi_value
(
self
)
-
>
Self
:
:
Value
{
self
as
u8
}
}
unsafe
impl
IntoFfi
for
crate
:
:
ByteBuffer
{
type
Value
=
crate
:
:
ByteBuffer
;
#
[
inline
]
fn
ffi_default
(
)
-
>
Self
:
:
Value
{
crate
:
:
ByteBuffer
:
:
default
(
)
}
#
[
inline
]
fn
into_ffi_value
(
self
)
-
>
Self
:
:
Value
{
self
}
}
macro_rules
!
impl_into_ffi_for_primitive
{
(
(
T
:
ty
)
+
)
=
>
{
(
unsafe
impl
IntoFfi
for
T
{
type
Value
=
Self
;
#
[
inline
]
fn
ffi_default
(
)
-
>
Self
{
Default
:
:
default
(
)
}
#
[
inline
]
fn
into_ffi_value
(
self
)
-
>
Self
{
self
}
}
)
+
}
}
impl_into_ffi_for_primitive
!
[
(
)
i8
u8
i16
u16
i32
u32
i64
u64
f32
f64
]
;
macro_rules
!
impl_into_ffi_for_pointer
{
(
(
T
:
ty
)
+
)
=
>
{
(
unsafe
impl
IntoFfi
for
T
{
type
Value
=
Self
;
#
[
inline
]
fn
ffi_default
(
)
-
>
Self
{
ptr
:
:
null_mut
(
)
}
#
[
inline
]
fn
into_ffi_value
(
self
)
-
>
Self
{
self
}
}
)
+
}
}
impl_into_ffi_for_pointer
!
[
*
mut
i8
*
const
i8
*
mut
u8
*
const
u8
*
mut
c_void
*
const
c_void
]
;
