use
super
:
:
Value
;
use
crate
:
:
map
:
:
Map
;
use
crate
:
:
number
:
:
Number
;
use
alloc
:
:
borrow
:
:
Cow
;
use
alloc
:
:
string
:
:
{
String
ToString
}
;
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
iter
:
:
FromIterator
;
macro_rules
!
from_integer
{
(
(
ty
:
ident
)
*
)
=
>
{
(
impl
From
<
ty
>
for
Value
{
fn
from
(
n
:
ty
)
-
>
Self
{
Value
:
:
Number
(
n
.
into
(
)
)
}
}
)
*
}
;
}
from_integer
!
{
i8
i16
i32
i64
isize
u8
u16
u32
u64
usize
}
#
[
cfg
(
feature
=
"
arbitrary_precision
"
)
]
from_integer
!
{
i128
u128
}
impl
From
<
f32
>
for
Value
{
fn
from
(
f
:
f32
)
-
>
Self
{
From
:
:
from
(
f
as
f64
)
}
}
impl
From
<
f64
>
for
Value
{
fn
from
(
f
:
f64
)
-
>
Self
{
Number
:
:
from_f64
(
f
)
.
map_or
(
Value
:
:
Null
Value
:
:
Number
)
}
}
impl
From
<
bool
>
for
Value
{
fn
from
(
f
:
bool
)
-
>
Self
{
Value
:
:
Bool
(
f
)
}
}
impl
From
<
String
>
for
Value
{
fn
from
(
f
:
String
)
-
>
Self
{
Value
:
:
String
(
f
)
}
}
impl
<
'
a
>
From
<
&
'
a
str
>
for
Value
{
fn
from
(
f
:
&
str
)
-
>
Self
{
Value
:
:
String
(
f
.
to_string
(
)
)
}
}
impl
<
'
a
>
From
<
Cow
<
'
a
str
>
>
for
Value
{
fn
from
(
f
:
Cow
<
'
a
str
>
)
-
>
Self
{
Value
:
:
String
(
f
.
into_owned
(
)
)
}
}
impl
From
<
Number
>
for
Value
{
fn
from
(
f
:
Number
)
-
>
Self
{
Value
:
:
Number
(
f
)
}
}
impl
From
<
Map
<
String
Value
>
>
for
Value
{
fn
from
(
f
:
Map
<
String
Value
>
)
-
>
Self
{
Value
:
:
Object
(
f
)
}
}
impl
<
T
:
Into
<
Value
>
>
From
<
Vec
<
T
>
>
for
Value
{
fn
from
(
f
:
Vec
<
T
>
)
-
>
Self
{
Value
:
:
Array
(
f
.
into_iter
(
)
.
map
(
Into
:
:
into
)
.
collect
(
)
)
}
}
impl
<
'
a
T
:
Clone
+
Into
<
Value
>
>
From
<
&
'
a
[
T
]
>
for
Value
{
fn
from
(
f
:
&
'
a
[
T
]
)
-
>
Self
{
Value
:
:
Array
(
f
.
iter
(
)
.
cloned
(
)
.
map
(
Into
:
:
into
)
.
collect
(
)
)
}
}
impl
<
T
:
Into
<
Value
>
>
FromIterator
<
T
>
for
Value
{
fn
from_iter
<
I
:
IntoIterator
<
Item
=
T
>
>
(
iter
:
I
)
-
>
Self
{
Value
:
:
Array
(
iter
.
into_iter
(
)
.
map
(
Into
:
:
into
)
.
collect
(
)
)
}
}
impl
<
K
:
Into
<
String
>
V
:
Into
<
Value
>
>
FromIterator
<
(
K
V
)
>
for
Value
{
fn
from_iter
<
I
:
IntoIterator
<
Item
=
(
K
V
)
>
>
(
iter
:
I
)
-
>
Self
{
Value
:
:
Object
(
iter
.
into_iter
(
)
.
map
(
|
(
k
v
)
|
(
k
.
into
(
)
v
.
into
(
)
)
)
.
collect
(
)
)
}
}
impl
From
<
(
)
>
for
Value
{
fn
from
(
(
)
:
(
)
)
-
>
Self
{
Value
:
:
Null
}
}
impl
<
T
>
From
<
Option
<
T
>
>
for
Value
where
T
:
Into
<
Value
>
{
fn
from
(
opt
:
Option
<
T
>
)
-
>
Self
{
match
opt
{
None
=
>
Value
:
:
Null
Some
(
value
)
=
>
Into
:
:
into
(
value
)
}
}
}
