use
super
:
:
Value
;
use
crate
:
:
map
:
:
Map
;
use
alloc
:
:
borrow
:
:
ToOwned
;
use
alloc
:
:
string
:
:
String
;
use
core
:
:
fmt
:
:
{
self
Display
}
;
use
core
:
:
ops
;
pub
trait
Index
:
private
:
:
Sealed
{
#
[
doc
(
hidden
)
]
fn
index_into
<
'
v
>
(
&
self
v
:
&
'
v
Value
)
-
>
Option
<
&
'
v
Value
>
;
#
[
doc
(
hidden
)
]
fn
index_into_mut
<
'
v
>
(
&
self
v
:
&
'
v
mut
Value
)
-
>
Option
<
&
'
v
mut
Value
>
;
#
[
doc
(
hidden
)
]
fn
index_or_insert
<
'
v
>
(
&
self
v
:
&
'
v
mut
Value
)
-
>
&
'
v
mut
Value
;
}
impl
Index
for
usize
{
fn
index_into
<
'
v
>
(
&
self
v
:
&
'
v
Value
)
-
>
Option
<
&
'
v
Value
>
{
match
*
v
{
Value
:
:
Array
(
ref
vec
)
=
>
vec
.
get
(
*
self
)
_
=
>
None
}
}
fn
index_into_mut
<
'
v
>
(
&
self
v
:
&
'
v
mut
Value
)
-
>
Option
<
&
'
v
mut
Value
>
{
match
*
v
{
Value
:
:
Array
(
ref
mut
vec
)
=
>
vec
.
get_mut
(
*
self
)
_
=
>
None
}
}
fn
index_or_insert
<
'
v
>
(
&
self
v
:
&
'
v
mut
Value
)
-
>
&
'
v
mut
Value
{
match
*
v
{
Value
:
:
Array
(
ref
mut
vec
)
=
>
{
let
len
=
vec
.
len
(
)
;
vec
.
get_mut
(
*
self
)
.
unwrap_or_else
(
|
|
{
panic
!
(
"
cannot
access
index
{
}
of
JSON
array
of
length
{
}
"
self
len
)
}
)
}
_
=
>
panic
!
(
"
cannot
access
index
{
}
of
JSON
{
}
"
self
Type
(
v
)
)
}
}
}
impl
Index
for
str
{
fn
index_into
<
'
v
>
(
&
self
v
:
&
'
v
Value
)
-
>
Option
<
&
'
v
Value
>
{
match
*
v
{
Value
:
:
Object
(
ref
map
)
=
>
map
.
get
(
self
)
_
=
>
None
}
}
fn
index_into_mut
<
'
v
>
(
&
self
v
:
&
'
v
mut
Value
)
-
>
Option
<
&
'
v
mut
Value
>
{
match
*
v
{
Value
:
:
Object
(
ref
mut
map
)
=
>
map
.
get_mut
(
self
)
_
=
>
None
}
}
fn
index_or_insert
<
'
v
>
(
&
self
v
:
&
'
v
mut
Value
)
-
>
&
'
v
mut
Value
{
if
let
Value
:
:
Null
=
*
v
{
*
v
=
Value
:
:
Object
(
Map
:
:
new
(
)
)
;
}
match
*
v
{
Value
:
:
Object
(
ref
mut
map
)
=
>
map
.
entry
(
self
.
to_owned
(
)
)
.
or_insert
(
Value
:
:
Null
)
_
=
>
panic
!
(
"
cannot
access
key
{
:
?
}
in
JSON
{
}
"
self
Type
(
v
)
)
}
}
}
impl
Index
for
String
{
fn
index_into
<
'
v
>
(
&
self
v
:
&
'
v
Value
)
-
>
Option
<
&
'
v
Value
>
{
self
[
.
.
]
.
index_into
(
v
)
}
fn
index_into_mut
<
'
v
>
(
&
self
v
:
&
'
v
mut
Value
)
-
>
Option
<
&
'
v
mut
Value
>
{
self
[
.
.
]
.
index_into_mut
(
v
)
}
fn
index_or_insert
<
'
v
>
(
&
self
v
:
&
'
v
mut
Value
)
-
>
&
'
v
mut
Value
{
self
[
.
.
]
.
index_or_insert
(
v
)
}
}
impl
<
'
a
T
>
Index
for
&
'
a
T
where
T
:
?
Sized
+
Index
{
fn
index_into
<
'
v
>
(
&
self
v
:
&
'
v
Value
)
-
>
Option
<
&
'
v
Value
>
{
(
*
*
self
)
.
index_into
(
v
)
}
fn
index_into_mut
<
'
v
>
(
&
self
v
:
&
'
v
mut
Value
)
-
>
Option
<
&
'
v
mut
Value
>
{
(
*
*
self
)
.
index_into_mut
(
v
)
}
fn
index_or_insert
<
'
v
>
(
&
self
v
:
&
'
v
mut
Value
)
-
>
&
'
v
mut
Value
{
(
*
*
self
)
.
index_or_insert
(
v
)
}
}
mod
private
{
pub
trait
Sealed
{
}
impl
Sealed
for
usize
{
}
impl
Sealed
for
str
{
}
impl
Sealed
for
alloc
:
:
string
:
:
String
{
}
impl
<
'
a
T
>
Sealed
for
&
'
a
T
where
T
:
?
Sized
+
Sealed
{
}
}
struct
Type
<
'
a
>
(
&
'
a
Value
)
;
impl
<
'
a
>
Display
for
Type
<
'
a
>
{
fn
fmt
(
&
self
formatter
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
match
*
self
.
0
{
Value
:
:
Null
=
>
formatter
.
write_str
(
"
null
"
)
Value
:
:
Bool
(
_
)
=
>
formatter
.
write_str
(
"
boolean
"
)
Value
:
:
Number
(
_
)
=
>
formatter
.
write_str
(
"
number
"
)
Value
:
:
String
(
_
)
=
>
formatter
.
write_str
(
"
string
"
)
Value
:
:
Array
(
_
)
=
>
formatter
.
write_str
(
"
array
"
)
Value
:
:
Object
(
_
)
=
>
formatter
.
write_str
(
"
object
"
)
}
}
}
impl
<
I
>
ops
:
:
Index
<
I
>
for
Value
where
I
:
Index
{
type
Output
=
Value
;
fn
index
(
&
self
index
:
I
)
-
>
&
Value
{
static
NULL
:
Value
=
Value
:
:
Null
;
index
.
index_into
(
self
)
.
unwrap_or
(
&
NULL
)
}
}
impl
<
I
>
ops
:
:
IndexMut
<
I
>
for
Value
where
I
:
Index
{
fn
index_mut
(
&
mut
self
index
:
I
)
-
>
&
mut
Value
{
index
.
index_or_insert
(
self
)
}
}
