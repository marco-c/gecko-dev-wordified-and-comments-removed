use
crate
:
:
error
:
:
Error
;
use
crate
:
:
value
:
:
Value
;
use
alloc
:
:
string
:
:
String
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
borrow
:
:
Borrow
;
use
core
:
:
fmt
:
:
{
self
Debug
}
;
use
core
:
:
hash
:
:
{
Hash
Hasher
}
;
use
core
:
:
iter
:
:
FusedIterator
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
use
core
:
:
mem
;
use
core
:
:
ops
;
use
serde
:
:
de
;
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
use
alloc
:
:
collections
:
:
{
btree_map
BTreeMap
}
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
use
indexmap
:
:
IndexMap
;
pub
struct
Map
<
K
V
>
{
map
:
MapImpl
<
K
V
>
}
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
type
MapImpl
<
K
V
>
=
BTreeMap
<
K
V
>
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
type
MapImpl
<
K
V
>
=
IndexMap
<
K
V
>
;
impl
Map
<
String
Value
>
{
#
[
inline
]
pub
fn
new
(
)
-
>
Self
{
Map
{
map
:
MapImpl
:
:
new
(
)
}
}
#
[
inline
]
pub
fn
with_capacity
(
capacity
:
usize
)
-
>
Self
{
Map
{
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
map
:
{
let
_
=
capacity
;
BTreeMap
:
:
new
(
)
}
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
map
:
IndexMap
:
:
with_capacity
(
capacity
)
}
}
#
[
inline
]
pub
fn
clear
(
&
mut
self
)
{
self
.
map
.
clear
(
)
;
}
#
[
inline
]
pub
fn
get
<
Q
>
(
&
self
key
:
&
Q
)
-
>
Option
<
&
Value
>
where
String
:
Borrow
<
Q
>
Q
:
?
Sized
+
Ord
+
Eq
+
Hash
{
self
.
map
.
get
(
key
)
}
#
[
inline
]
pub
fn
contains_key
<
Q
>
(
&
self
key
:
&
Q
)
-
>
bool
where
String
:
Borrow
<
Q
>
Q
:
?
Sized
+
Ord
+
Eq
+
Hash
{
self
.
map
.
contains_key
(
key
)
}
#
[
inline
]
pub
fn
get_mut
<
Q
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
&
mut
Value
>
where
String
:
Borrow
<
Q
>
Q
:
?
Sized
+
Ord
+
Eq
+
Hash
{
self
.
map
.
get_mut
(
key
)
}
#
[
inline
]
pub
fn
get_key_value
<
Q
>
(
&
self
key
:
&
Q
)
-
>
Option
<
(
&
String
&
Value
)
>
where
String
:
Borrow
<
Q
>
Q
:
?
Sized
+
Ord
+
Eq
+
Hash
{
self
.
map
.
get_key_value
(
key
)
}
#
[
inline
]
pub
fn
insert
(
&
mut
self
k
:
String
v
:
Value
)
-
>
Option
<
Value
>
{
self
.
map
.
insert
(
k
v
)
}
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
preserve_order
"
)
)
)
]
#
[
inline
]
pub
fn
shift_insert
(
&
mut
self
index
:
usize
k
:
String
v
:
Value
)
-
>
Option
<
Value
>
{
self
.
map
.
shift_insert
(
index
k
v
)
}
#
[
inline
]
pub
fn
remove
<
Q
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
Value
>
where
String
:
Borrow
<
Q
>
Q
:
?
Sized
+
Ord
+
Eq
+
Hash
{
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
return
self
.
swap_remove
(
key
)
;
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
return
self
.
map
.
remove
(
key
)
;
}
#
[
inline
]
pub
fn
remove_entry
<
Q
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
(
String
Value
)
>
where
String
:
Borrow
<
Q
>
Q
:
?
Sized
+
Ord
+
Eq
+
Hash
{
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
return
self
.
swap_remove_entry
(
key
)
;
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
return
self
.
map
.
remove_entry
(
key
)
;
}
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
preserve_order
"
)
)
)
]
#
[
inline
]
pub
fn
swap_remove
<
Q
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
Value
>
where
String
:
Borrow
<
Q
>
Q
:
?
Sized
+
Ord
+
Eq
+
Hash
{
self
.
map
.
swap_remove
(
key
)
}
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
preserve_order
"
)
)
)
]
#
[
inline
]
pub
fn
swap_remove_entry
<
Q
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
(
String
Value
)
>
where
String
:
Borrow
<
Q
>
Q
:
?
Sized
+
Ord
+
Eq
+
Hash
{
self
.
map
.
swap_remove_entry
(
key
)
}
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
preserve_order
"
)
)
)
]
#
[
inline
]
pub
fn
shift_remove
<
Q
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
Value
>
where
String
:
Borrow
<
Q
>
Q
:
?
Sized
+
Ord
+
Eq
+
Hash
{
self
.
map
.
shift_remove
(
key
)
}
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
preserve_order
"
)
)
)
]
#
[
inline
]
pub
fn
shift_remove_entry
<
Q
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
(
String
Value
)
>
where
String
:
Borrow
<
Q
>
Q
:
?
Sized
+
Ord
+
Eq
+
Hash
{
self
.
map
.
shift_remove_entry
(
key
)
}
#
[
inline
]
pub
fn
append
(
&
mut
self
other
:
&
mut
Self
)
{
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
self
.
map
.
extend
(
mem
:
:
replace
(
&
mut
other
.
map
MapImpl
:
:
default
(
)
)
)
;
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
self
.
map
.
append
(
&
mut
other
.
map
)
;
}
pub
fn
entry
<
S
>
(
&
mut
self
key
:
S
)
-
>
Entry
where
S
:
Into
<
String
>
{
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
use
alloc
:
:
collections
:
:
btree_map
:
:
Entry
as
EntryImpl
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
use
indexmap
:
:
map
:
:
Entry
as
EntryImpl
;
match
self
.
map
.
entry
(
key
.
into
(
)
)
{
EntryImpl
:
:
Vacant
(
vacant
)
=
>
Entry
:
:
Vacant
(
VacantEntry
{
vacant
}
)
EntryImpl
:
:
Occupied
(
occupied
)
=
>
Entry
:
:
Occupied
(
OccupiedEntry
{
occupied
}
)
}
}
#
[
inline
]
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
map
.
len
(
)
}
#
[
inline
]
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
map
.
is_empty
(
)
}
#
[
inline
]
pub
fn
iter
(
&
self
)
-
>
Iter
{
Iter
{
iter
:
self
.
map
.
iter
(
)
}
}
#
[
inline
]
pub
fn
iter_mut
(
&
mut
self
)
-
>
IterMut
{
IterMut
{
iter
:
self
.
map
.
iter_mut
(
)
}
}
#
[
inline
]
pub
fn
keys
(
&
self
)
-
>
Keys
{
Keys
{
iter
:
self
.
map
.
keys
(
)
}
}
#
[
inline
]
pub
fn
values
(
&
self
)
-
>
Values
{
Values
{
iter
:
self
.
map
.
values
(
)
}
}
#
[
inline
]
pub
fn
values_mut
(
&
mut
self
)
-
>
ValuesMut
{
ValuesMut
{
iter
:
self
.
map
.
values_mut
(
)
}
}
#
[
inline
]
pub
fn
into_values
(
self
)
-
>
IntoValues
{
IntoValues
{
iter
:
self
.
map
.
into_values
(
)
}
}
#
[
inline
]
pub
fn
retain
<
F
>
(
&
mut
self
f
:
F
)
where
F
:
FnMut
(
&
String
&
mut
Value
)
-
>
bool
{
self
.
map
.
retain
(
f
)
;
}
#
[
inline
]
pub
fn
sort_keys
(
&
mut
self
)
{
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
self
.
map
.
sort_unstable_keys
(
)
;
}
}
#
[
allow
(
clippy
:
:
derivable_impls
)
]
impl
Default
for
Map
<
String
Value
>
{
#
[
inline
]
fn
default
(
)
-
>
Self
{
Map
{
map
:
MapImpl
:
:
new
(
)
}
}
}
impl
Clone
for
Map
<
String
Value
>
{
#
[
inline
]
fn
clone
(
&
self
)
-
>
Self
{
Map
{
map
:
self
.
map
.
clone
(
)
}
}
#
[
inline
]
fn
clone_from
(
&
mut
self
source
:
&
Self
)
{
self
.
map
.
clone_from
(
&
source
.
map
)
;
}
}
impl
PartialEq
for
Map
<
String
Value
>
{
#
[
inline
]
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
self
.
map
.
eq
(
&
other
.
map
)
}
}
impl
Eq
for
Map
<
String
Value
>
{
}
impl
Hash
for
Map
<
String
Value
>
{
fn
hash
<
H
:
Hasher
>
(
&
self
state
:
&
mut
H
)
{
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
{
self
.
map
.
hash
(
state
)
;
}
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
{
let
mut
kv
=
Vec
:
:
from_iter
(
&
self
.
map
)
;
kv
.
sort_unstable_by
(
|
a
b
|
a
.
0
.
cmp
(
b
.
0
)
)
;
kv
.
hash
(
state
)
;
}
}
}
impl
<
Q
>
ops
:
:
Index
<
&
Q
>
for
Map
<
String
Value
>
where
String
:
Borrow
<
Q
>
Q
:
?
Sized
+
Ord
+
Eq
+
Hash
{
type
Output
=
Value
;
fn
index
(
&
self
index
:
&
Q
)
-
>
&
Value
{
self
.
map
.
index
(
index
)
}
}
impl
<
Q
>
ops
:
:
IndexMut
<
&
Q
>
for
Map
<
String
Value
>
where
String
:
Borrow
<
Q
>
Q
:
?
Sized
+
Ord
+
Eq
+
Hash
{
fn
index_mut
(
&
mut
self
index
:
&
Q
)
-
>
&
mut
Value
{
self
.
map
.
get_mut
(
index
)
.
expect
(
"
no
entry
found
for
key
"
)
}
}
impl
Debug
for
Map
<
String
Value
>
{
#
[
inline
]
fn
fmt
(
&
self
formatter
:
&
mut
fmt
:
:
Formatter
)
-
>
Result
<
(
)
fmt
:
:
Error
>
{
self
.
map
.
fmt
(
formatter
)
}
}
#
[
cfg
(
any
(
feature
=
"
std
"
feature
=
"
alloc
"
)
)
]
impl
serde
:
:
ser
:
:
Serialize
for
Map
<
String
Value
>
{
#
[
inline
]
fn
serialize
<
S
>
(
&
self
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
serde
:
:
ser
:
:
Serializer
{
use
serde
:
:
ser
:
:
SerializeMap
;
let
mut
map
=
tri
!
(
serializer
.
serialize_map
(
Some
(
self
.
len
(
)
)
)
)
;
for
(
k
v
)
in
self
{
tri
!
(
map
.
serialize_entry
(
k
v
)
)
;
}
map
.
end
(
)
}
}
impl
<
'
de
>
de
:
:
Deserialize
<
'
de
>
for
Map
<
String
Value
>
{
#
[
inline
]
fn
deserialize
<
D
>
(
deserializer
:
D
)
-
>
Result
<
Self
D
:
:
Error
>
where
D
:
de
:
:
Deserializer
<
'
de
>
{
struct
Visitor
;
impl
<
'
de
>
de
:
:
Visitor
<
'
de
>
for
Visitor
{
type
Value
=
Map
<
String
Value
>
;
fn
expecting
(
&
self
formatter
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
formatter
.
write_str
(
"
a
map
"
)
}
#
[
inline
]
fn
visit_unit
<
E
>
(
self
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
de
:
:
Error
{
Ok
(
Map
:
:
new
(
)
)
}
#
[
cfg
(
any
(
feature
=
"
std
"
feature
=
"
alloc
"
)
)
]
#
[
inline
]
fn
visit_map
<
V
>
(
self
mut
visitor
:
V
)
-
>
Result
<
Self
:
:
Value
V
:
:
Error
>
where
V
:
de
:
:
MapAccess
<
'
de
>
{
let
mut
values
=
Map
:
:
new
(
)
;
while
let
Some
(
(
key
value
)
)
=
tri
!
(
visitor
.
next_entry
(
)
)
{
values
.
insert
(
key
value
)
;
}
Ok
(
values
)
}
}
deserializer
.
deserialize_map
(
Visitor
)
}
}
impl
FromIterator
<
(
String
Value
)
>
for
Map
<
String
Value
>
{
fn
from_iter
<
T
>
(
iter
:
T
)
-
>
Self
where
T
:
IntoIterator
<
Item
=
(
String
Value
)
>
{
Map
{
map
:
FromIterator
:
:
from_iter
(
iter
)
}
}
}
impl
Extend
<
(
String
Value
)
>
for
Map
<
String
Value
>
{
fn
extend
<
T
>
(
&
mut
self
iter
:
T
)
where
T
:
IntoIterator
<
Item
=
(
String
Value
)
>
{
self
.
map
.
extend
(
iter
)
;
}
}
macro_rules
!
delegate_iterator
{
(
(
name
:
ident
(
generics
:
tt
)
*
)
=
>
item
:
ty
)
=
>
{
impl
(
generics
)
*
Iterator
for
name
(
generics
)
*
{
type
Item
=
item
;
#
[
inline
]
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next
(
)
}
#
[
inline
]
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
}
impl
(
generics
)
*
DoubleEndedIterator
for
name
(
generics
)
*
{
#
[
inline
]
fn
next_back
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next_back
(
)
}
}
impl
(
generics
)
*
ExactSizeIterator
for
name
(
generics
)
*
{
#
[
inline
]
fn
len
(
&
self
)
-
>
usize
{
self
.
iter
.
len
(
)
}
}
impl
(
generics
)
*
FusedIterator
for
name
(
generics
)
*
{
}
}
}
impl
<
'
de
>
de
:
:
IntoDeserializer
<
'
de
Error
>
for
Map
<
String
Value
>
{
type
Deserializer
=
Self
;
fn
into_deserializer
(
self
)
-
>
Self
:
:
Deserializer
{
self
}
}
impl
<
'
de
>
de
:
:
IntoDeserializer
<
'
de
Error
>
for
&
'
de
Map
<
String
Value
>
{
type
Deserializer
=
Self
;
fn
into_deserializer
(
self
)
-
>
Self
:
:
Deserializer
{
self
}
}
pub
enum
Entry
<
'
a
>
{
Vacant
(
VacantEntry
<
'
a
>
)
Occupied
(
OccupiedEntry
<
'
a
>
)
}
pub
struct
VacantEntry
<
'
a
>
{
vacant
:
VacantEntryImpl
<
'
a
>
}
pub
struct
OccupiedEntry
<
'
a
>
{
occupied
:
OccupiedEntryImpl
<
'
a
>
}
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
type
VacantEntryImpl
<
'
a
>
=
btree_map
:
:
VacantEntry
<
'
a
String
Value
>
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
type
VacantEntryImpl
<
'
a
>
=
indexmap
:
:
map
:
:
VacantEntry
<
'
a
String
Value
>
;
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
type
OccupiedEntryImpl
<
'
a
>
=
btree_map
:
:
OccupiedEntry
<
'
a
String
Value
>
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
type
OccupiedEntryImpl
<
'
a
>
=
indexmap
:
:
map
:
:
OccupiedEntry
<
'
a
String
Value
>
;
impl
<
'
a
>
Entry
<
'
a
>
{
pub
fn
key
(
&
self
)
-
>
&
String
{
match
self
{
Entry
:
:
Vacant
(
e
)
=
>
e
.
key
(
)
Entry
:
:
Occupied
(
e
)
=
>
e
.
key
(
)
}
}
pub
fn
or_insert
(
self
default
:
Value
)
-
>
&
'
a
mut
Value
{
match
self
{
Entry
:
:
Vacant
(
entry
)
=
>
entry
.
insert
(
default
)
Entry
:
:
Occupied
(
entry
)
=
>
entry
.
into_mut
(
)
}
}
pub
fn
or_insert_with
<
F
>
(
self
default
:
F
)
-
>
&
'
a
mut
Value
where
F
:
FnOnce
(
)
-
>
Value
{
match
self
{
Entry
:
:
Vacant
(
entry
)
=
>
entry
.
insert
(
default
(
)
)
Entry
:
:
Occupied
(
entry
)
=
>
entry
.
into_mut
(
)
}
}
pub
fn
and_modify
<
F
>
(
self
f
:
F
)
-
>
Self
where
F
:
FnOnce
(
&
mut
Value
)
{
match
self
{
Entry
:
:
Occupied
(
mut
entry
)
=
>
{
f
(
entry
.
get_mut
(
)
)
;
Entry
:
:
Occupied
(
entry
)
}
Entry
:
:
Vacant
(
entry
)
=
>
Entry
:
:
Vacant
(
entry
)
}
}
}
impl
<
'
a
>
VacantEntry
<
'
a
>
{
#
[
inline
]
pub
fn
key
(
&
self
)
-
>
&
String
{
self
.
vacant
.
key
(
)
}
#
[
inline
]
pub
fn
insert
(
self
value
:
Value
)
-
>
&
'
a
mut
Value
{
self
.
vacant
.
insert
(
value
)
}
}
impl
<
'
a
>
OccupiedEntry
<
'
a
>
{
#
[
inline
]
pub
fn
key
(
&
self
)
-
>
&
String
{
self
.
occupied
.
key
(
)
}
#
[
inline
]
pub
fn
get
(
&
self
)
-
>
&
Value
{
self
.
occupied
.
get
(
)
}
#
[
inline
]
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
Value
{
self
.
occupied
.
get_mut
(
)
}
#
[
inline
]
pub
fn
into_mut
(
self
)
-
>
&
'
a
mut
Value
{
self
.
occupied
.
into_mut
(
)
}
#
[
inline
]
pub
fn
insert
(
&
mut
self
value
:
Value
)
-
>
Value
{
self
.
occupied
.
insert
(
value
)
}
#
[
inline
]
pub
fn
remove
(
self
)
-
>
Value
{
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
return
self
.
swap_remove
(
)
;
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
return
self
.
occupied
.
remove
(
)
;
}
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
preserve_order
"
)
)
)
]
#
[
inline
]
pub
fn
swap_remove
(
self
)
-
>
Value
{
self
.
occupied
.
swap_remove
(
)
}
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
preserve_order
"
)
)
)
]
#
[
inline
]
pub
fn
shift_remove
(
self
)
-
>
Value
{
self
.
occupied
.
shift_remove
(
)
}
#
[
inline
]
pub
fn
remove_entry
(
self
)
-
>
(
String
Value
)
{
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
return
self
.
swap_remove_entry
(
)
;
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
return
self
.
occupied
.
remove_entry
(
)
;
}
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
preserve_order
"
)
)
)
]
#
[
inline
]
pub
fn
swap_remove_entry
(
self
)
-
>
(
String
Value
)
{
self
.
occupied
.
swap_remove_entry
(
)
}
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
preserve_order
"
)
)
)
]
#
[
inline
]
pub
fn
shift_remove_entry
(
self
)
-
>
(
String
Value
)
{
self
.
occupied
.
shift_remove_entry
(
)
}
}
impl
<
'
a
>
IntoIterator
for
&
'
a
Map
<
String
Value
>
{
type
Item
=
(
&
'
a
String
&
'
a
Value
)
;
type
IntoIter
=
Iter
<
'
a
>
;
#
[
inline
]
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
Iter
{
iter
:
self
.
map
.
iter
(
)
}
}
}
pub
struct
Iter
<
'
a
>
{
iter
:
IterImpl
<
'
a
>
}
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
type
IterImpl
<
'
a
>
=
btree_map
:
:
Iter
<
'
a
String
Value
>
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
type
IterImpl
<
'
a
>
=
indexmap
:
:
map
:
:
Iter
<
'
a
String
Value
>
;
delegate_iterator
!
(
(
Iter
<
'
a
>
)
=
>
(
&
'
a
String
&
'
a
Value
)
)
;
impl
<
'
a
>
IntoIterator
for
&
'
a
mut
Map
<
String
Value
>
{
type
Item
=
(
&
'
a
String
&
'
a
mut
Value
)
;
type
IntoIter
=
IterMut
<
'
a
>
;
#
[
inline
]
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
IterMut
{
iter
:
self
.
map
.
iter_mut
(
)
}
}
}
pub
struct
IterMut
<
'
a
>
{
iter
:
IterMutImpl
<
'
a
>
}
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
type
IterMutImpl
<
'
a
>
=
btree_map
:
:
IterMut
<
'
a
String
Value
>
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
type
IterMutImpl
<
'
a
>
=
indexmap
:
:
map
:
:
IterMut
<
'
a
String
Value
>
;
delegate_iterator
!
(
(
IterMut
<
'
a
>
)
=
>
(
&
'
a
String
&
'
a
mut
Value
)
)
;
impl
IntoIterator
for
Map
<
String
Value
>
{
type
Item
=
(
String
Value
)
;
type
IntoIter
=
IntoIter
;
#
[
inline
]
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
IntoIter
{
iter
:
self
.
map
.
into_iter
(
)
}
}
}
pub
struct
IntoIter
{
iter
:
IntoIterImpl
}
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
type
IntoIterImpl
=
btree_map
:
:
IntoIter
<
String
Value
>
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
type
IntoIterImpl
=
indexmap
:
:
map
:
:
IntoIter
<
String
Value
>
;
delegate_iterator
!
(
(
IntoIter
)
=
>
(
String
Value
)
)
;
pub
struct
Keys
<
'
a
>
{
iter
:
KeysImpl
<
'
a
>
}
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
type
KeysImpl
<
'
a
>
=
btree_map
:
:
Keys
<
'
a
String
Value
>
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
type
KeysImpl
<
'
a
>
=
indexmap
:
:
map
:
:
Keys
<
'
a
String
Value
>
;
delegate_iterator
!
(
(
Keys
<
'
a
>
)
=
>
&
'
a
String
)
;
pub
struct
Values
<
'
a
>
{
iter
:
ValuesImpl
<
'
a
>
}
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
type
ValuesImpl
<
'
a
>
=
btree_map
:
:
Values
<
'
a
String
Value
>
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
type
ValuesImpl
<
'
a
>
=
indexmap
:
:
map
:
:
Values
<
'
a
String
Value
>
;
delegate_iterator
!
(
(
Values
<
'
a
>
)
=
>
&
'
a
Value
)
;
pub
struct
ValuesMut
<
'
a
>
{
iter
:
ValuesMutImpl
<
'
a
>
}
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
type
ValuesMutImpl
<
'
a
>
=
btree_map
:
:
ValuesMut
<
'
a
String
Value
>
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
type
ValuesMutImpl
<
'
a
>
=
indexmap
:
:
map
:
:
ValuesMut
<
'
a
String
Value
>
;
delegate_iterator
!
(
(
ValuesMut
<
'
a
>
)
=
>
&
'
a
mut
Value
)
;
pub
struct
IntoValues
{
iter
:
IntoValuesImpl
}
#
[
cfg
(
not
(
feature
=
"
preserve_order
"
)
)
]
type
IntoValuesImpl
=
btree_map
:
:
IntoValues
<
String
Value
>
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
type
IntoValuesImpl
=
indexmap
:
:
map
:
:
IntoValues
<
String
Value
>
;
delegate_iterator
!
(
(
IntoValues
)
=
>
Value
)
;
