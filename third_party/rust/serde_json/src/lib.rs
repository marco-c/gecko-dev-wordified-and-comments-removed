#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
serde_json
/
1
.
0
.
116
"
)
]
#
!
[
allow
(
clippy
:
:
collapsible_else_if
clippy
:
:
comparison_chain
clippy
:
:
deprecated_cfg_attr
clippy
:
:
doc_markdown
clippy
:
:
excessive_precision
clippy
:
:
explicit_auto_deref
clippy
:
:
float_cmp
clippy
:
:
manual_range_contains
clippy
:
:
match_like_matches_macro
clippy
:
:
match_single_binding
clippy
:
:
needless_doctest_main
clippy
:
:
needless_late_init
clippy
:
:
return_self_not_must_use
clippy
:
:
transmute_ptr_to_ptr
clippy
:
:
unconditional_recursion
clippy
:
:
unnecessary_wraps
)
]
#
!
[
allow
(
clippy
:
:
should_implement_trait
clippy
:
:
cast_possible_truncation
clippy
:
:
cast_possible_wrap
clippy
:
:
cast_precision_loss
clippy
:
:
cast_sign_loss
clippy
:
:
enum_glob_use
clippy
:
:
if_not_else
clippy
:
:
integer_division
clippy
:
:
let_underscore_untyped
clippy
:
:
map_err_ignore
clippy
:
:
match_same_arms
clippy
:
:
similar_names
clippy
:
:
unused_self
clippy
:
:
wildcard_imports
clippy
:
:
cast_lossless
clippy
:
:
module_name_repetitions
clippy
:
:
redundant_else
clippy
:
:
shadow_unrelated
clippy
:
:
single_match_else
clippy
:
:
too_many_lines
clippy
:
:
unreadable_literal
clippy
:
:
unseparated_literal_suffix
clippy
:
:
use_self
clippy
:
:
zero_prefixed_literal
clippy
:
:
checked_conversions
clippy
:
:
mem_replace_with_default
clippy
:
:
missing_errors_doc
clippy
:
:
must_use_candidate
)
]
#
!
[
deny
(
clippy
:
:
question_mark_used
)
]
#
!
[
allow
(
non_upper_case_globals
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
no_std
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_cfg
)
)
]
#
[
cfg
(
not
(
any
(
feature
=
"
std
"
feature
=
"
alloc
"
)
)
)
]
compile_error
!
{
"
serde_json
requires
that
either
std
(
default
)
or
alloc
feature
is
enabled
"
}
extern
crate
alloc
;
#
[
cfg
(
feature
=
"
std
"
)
]
extern
crate
std
;
#
[
cfg
(
feature
=
"
std
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
std
"
)
)
)
]
#
[
doc
(
inline
)
]
pub
use
crate
:
:
de
:
:
from_reader
;
#
[
doc
(
inline
)
]
pub
use
crate
:
:
de
:
:
{
from_slice
from_str
Deserializer
StreamDeserializer
}
;
#
[
doc
(
inline
)
]
pub
use
crate
:
:
error
:
:
{
Error
Result
}
;
#
[
doc
(
inline
)
]
pub
use
crate
:
:
ser
:
:
{
to_string
to_string_pretty
to_vec
to_vec_pretty
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
std
"
)
)
)
]
#
[
doc
(
inline
)
]
pub
use
crate
:
:
ser
:
:
{
to_writer
to_writer_pretty
Serializer
}
;
#
[
doc
(
inline
)
]
pub
use
crate
:
:
value
:
:
{
from_value
to_value
Map
Number
Value
}
;
macro_rules
!
tri
{
(
e
:
expr
(
)
?
)
=
>
{
match
e
{
core
:
:
result
:
:
Result
:
:
Ok
(
val
)
=
>
val
core
:
:
result
:
:
Result
:
:
Err
(
err
)
=
>
return
core
:
:
result
:
:
Result
:
:
Err
(
err
)
}
}
;
}
#
[
macro_use
]
mod
macros
;
pub
mod
de
;
pub
mod
error
;
pub
mod
map
;
#
[
cfg
(
feature
=
"
std
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
std
"
)
)
)
]
pub
mod
ser
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
mod
ser
;
pub
mod
value
;
mod
io
;
#
[
cfg
(
feature
=
"
std
"
)
]
mod
iter
;
#
[
cfg
(
feature
=
"
float_roundtrip
"
)
]
mod
lexical
;
mod
number
;
mod
read
;
#
[
cfg
(
feature
=
"
raw_value
"
)
]
mod
raw
;
