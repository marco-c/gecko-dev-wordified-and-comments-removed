#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
serde_json
/
1
.
0
.
44
"
)
]
#
!
[
allow
(
unknown_lints
bare_trait_objects
ellipsis_inclusive_range_patterns
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
renamed_and_removed_lints
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
deny
(
clippy
clippy_pedantic
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
deprecated_cfg_attr
doc_markdown
needless_doctest_main
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
should_implement_trait
cast_possible_wrap
cast_precision_loss
cast_sign_loss
integer_division
cast_lossless
module_name_repetitions
shadow_unrelated
single_match_else
too_many_lines
use_self
zero_prefixed_literal
checked_conversions
redundant_field_names
must_use_candidate
)
)
]
#
!
[
deny
(
missing_docs
)
]
#
[
macro_use
]
extern
crate
serde
;
#
[
cfg
(
feature
=
"
preserve_order
"
)
]
extern
crate
indexmap
;
extern
crate
itoa
;
extern
crate
ryu
;
#
[
doc
(
inline
)
]
pub
use
self
:
:
de
:
:
{
from_reader
from_slice
from_str
Deserializer
StreamDeserializer
}
;
#
[
doc
(
inline
)
]
pub
use
self
:
:
error
:
:
{
Error
Result
}
;
#
[
doc
(
inline
)
]
pub
use
self
:
:
ser
:
:
{
to_string
to_string_pretty
to_vec
to_vec_pretty
to_writer
to_writer_pretty
Serializer
}
;
#
[
doc
(
inline
)
]
pub
use
self
:
:
value
:
:
{
from_value
to_value
Map
Number
Value
}
;
macro_rules
!
try
{
(
e
:
expr
)
=
>
{
match
e
{
:
:
std
:
:
result
:
:
Result
:
:
Ok
(
val
)
=
>
val
:
:
std
:
:
result
:
:
Result
:
:
Err
(
err
)
=
>
return
:
:
std
:
:
result
:
:
Result
:
:
Err
(
err
)
}
}
;
}
#
[
macro_use
]
mod
macros
;
pub
mod
de
;
pub
mod
error
;
pub
mod
map
;
pub
mod
ser
;
pub
mod
value
;
mod
iter
;
mod
number
;
mod
read
;
#
[
cfg
(
feature
=
"
raw_value
"
)
]
mod
raw
;
