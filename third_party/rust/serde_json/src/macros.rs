#
[
macro_export
(
local_inner_macros
)
]
macro_rules
!
json
{
(
(
json
:
tt
)
+
)
=
>
{
json_internal
!
(
(
json
)
+
)
}
;
}
#
[
macro_export
(
local_inner_macros
)
]
#
[
doc
(
hidden
)
]
macro_rules
!
json_internal
{
(
array
[
(
elems
:
expr
)
*
]
)
=
>
{
json_internal_vec
!
[
(
elems
)
*
]
}
;
(
array
[
(
elems
:
expr
)
*
]
)
=
>
{
json_internal_vec
!
[
(
elems
)
*
]
}
;
(
array
[
(
elems
:
expr
)
*
]
null
(
rest
:
tt
)
*
)
=
>
{
json_internal
!
(
array
[
(
elems
)
*
json_internal
!
(
null
)
]
(
rest
)
*
)
}
;
(
array
[
(
elems
:
expr
)
*
]
true
(
rest
:
tt
)
*
)
=
>
{
json_internal
!
(
array
[
(
elems
)
*
json_internal
!
(
true
)
]
(
rest
)
*
)
}
;
(
array
[
(
elems
:
expr
)
*
]
false
(
rest
:
tt
)
*
)
=
>
{
json_internal
!
(
array
[
(
elems
)
*
json_internal
!
(
false
)
]
(
rest
)
*
)
}
;
(
array
[
(
elems
:
expr
)
*
]
[
(
array
:
tt
)
*
]
(
rest
:
tt
)
*
)
=
>
{
json_internal
!
(
array
[
(
elems
)
*
json_internal
!
(
[
(
array
)
*
]
)
]
(
rest
)
*
)
}
;
(
array
[
(
elems
:
expr
)
*
]
{
(
map
:
tt
)
*
}
(
rest
:
tt
)
*
)
=
>
{
json_internal
!
(
array
[
(
elems
)
*
json_internal
!
(
{
(
map
)
*
}
)
]
(
rest
)
*
)
}
;
(
array
[
(
elems
:
expr
)
*
]
next
:
expr
(
rest
:
tt
)
*
)
=
>
{
json_internal
!
(
array
[
(
elems
)
*
json_internal
!
(
next
)
]
(
rest
)
*
)
}
;
(
array
[
(
elems
:
expr
)
*
]
last
:
expr
)
=
>
{
json_internal
!
(
array
[
(
elems
)
*
json_internal
!
(
last
)
]
)
}
;
(
array
[
(
elems
:
expr
)
*
]
(
rest
:
tt
)
*
)
=
>
{
json_internal
!
(
array
[
(
elems
)
*
]
(
rest
)
*
)
}
;
(
array
[
(
elems
:
expr
)
*
]
unexpected
:
tt
(
rest
:
tt
)
*
)
=
>
{
json_unexpected
!
(
unexpected
)
}
;
(
object
object
:
ident
(
)
(
)
(
)
)
=
>
{
}
;
(
object
object
:
ident
[
(
key
:
tt
)
+
]
(
value
:
expr
)
(
rest
:
tt
)
*
)
=
>
{
let
_
=
object
.
insert
(
(
(
key
)
+
)
.
into
(
)
value
)
;
json_internal
!
(
object
object
(
)
(
(
rest
)
*
)
(
(
rest
)
*
)
)
;
}
;
(
object
object
:
ident
[
(
key
:
tt
)
+
]
(
value
:
expr
)
unexpected
:
tt
(
rest
:
tt
)
*
)
=
>
{
json_unexpected
!
(
unexpected
)
;
}
;
(
object
object
:
ident
[
(
key
:
tt
)
+
]
(
value
:
expr
)
)
=
>
{
let
_
=
object
.
insert
(
(
(
key
)
+
)
.
into
(
)
value
)
;
}
;
(
object
object
:
ident
(
(
key
:
tt
)
+
)
(
:
null
(
rest
:
tt
)
*
)
copy
:
tt
)
=
>
{
json_internal
!
(
object
object
[
(
key
)
+
]
(
json_internal
!
(
null
)
)
(
rest
)
*
)
;
}
;
(
object
object
:
ident
(
(
key
:
tt
)
+
)
(
:
true
(
rest
:
tt
)
*
)
copy
:
tt
)
=
>
{
json_internal
!
(
object
object
[
(
key
)
+
]
(
json_internal
!
(
true
)
)
(
rest
)
*
)
;
}
;
(
object
object
:
ident
(
(
key
:
tt
)
+
)
(
:
false
(
rest
:
tt
)
*
)
copy
:
tt
)
=
>
{
json_internal
!
(
object
object
[
(
key
)
+
]
(
json_internal
!
(
false
)
)
(
rest
)
*
)
;
}
;
(
object
object
:
ident
(
(
key
:
tt
)
+
)
(
:
[
(
array
:
tt
)
*
]
(
rest
:
tt
)
*
)
copy
:
tt
)
=
>
{
json_internal
!
(
object
object
[
(
key
)
+
]
(
json_internal
!
(
[
(
array
)
*
]
)
)
(
rest
)
*
)
;
}
;
(
object
object
:
ident
(
(
key
:
tt
)
+
)
(
:
{
(
map
:
tt
)
*
}
(
rest
:
tt
)
*
)
copy
:
tt
)
=
>
{
json_internal
!
(
object
object
[
(
key
)
+
]
(
json_internal
!
(
{
(
map
)
*
}
)
)
(
rest
)
*
)
;
}
;
(
object
object
:
ident
(
(
key
:
tt
)
+
)
(
:
value
:
expr
(
rest
:
tt
)
*
)
copy
:
tt
)
=
>
{
json_internal
!
(
object
object
[
(
key
)
+
]
(
json_internal
!
(
value
)
)
(
rest
)
*
)
;
}
;
(
object
object
:
ident
(
(
key
:
tt
)
+
)
(
:
value
:
expr
)
copy
:
tt
)
=
>
{
json_internal
!
(
object
object
[
(
key
)
+
]
(
json_internal
!
(
value
)
)
)
;
}
;
(
object
object
:
ident
(
(
key
:
tt
)
+
)
(
:
)
copy
:
tt
)
=
>
{
/
/
"
unexpected
end
of
macro
invocation
"
json_internal
!
(
)
;
}
;
(
object
object
:
ident
(
(
key
:
tt
)
+
)
(
)
copy
:
tt
)
=
>
{
/
/
"
unexpected
end
of
macro
invocation
"
json_internal
!
(
)
;
}
;
(
object
object
:
ident
(
)
(
:
(
rest
:
tt
)
*
)
(
colon
:
tt
(
copy
:
tt
)
*
)
)
=
>
{
/
/
Takes
no
arguments
so
"
no
rules
expected
the
token
:
"
.
json_unexpected
!
(
colon
)
;
}
;
(
object
object
:
ident
(
(
key
:
tt
)
*
)
(
(
rest
:
tt
)
*
)
(
comma
:
tt
(
copy
:
tt
)
*
)
)
=
>
{
/
/
Takes
no
arguments
so
"
no
rules
expected
the
token
"
.
json_unexpected
!
(
comma
)
;
}
;
(
object
object
:
ident
(
)
(
(
key
:
expr
)
:
(
rest
:
tt
)
*
)
copy
:
tt
)
=
>
{
json_internal
!
(
object
object
(
key
)
(
:
(
rest
)
*
)
(
:
(
rest
)
*
)
)
;
}
;
(
object
object
:
ident
(
(
key
:
tt
)
*
)
(
:
(
unexpected
:
tt
)
+
)
copy
:
tt
)
=
>
{
json_expect_expr_comma
!
(
(
unexpected
)
+
)
;
}
;
(
object
object
:
ident
(
(
key
:
tt
)
*
)
(
tt
:
tt
(
rest
:
tt
)
*
)
copy
:
tt
)
=
>
{
json_internal
!
(
object
object
(
(
key
)
*
tt
)
(
(
rest
)
*
)
(
(
rest
)
*
)
)
;
}
;
(
null
)
=
>
{
crate
:
:
Value
:
:
Null
}
;
(
true
)
=
>
{
crate
:
:
Value
:
:
Bool
(
true
)
}
;
(
false
)
=
>
{
crate
:
:
Value
:
:
Bool
(
false
)
}
;
(
[
]
)
=
>
{
crate
:
:
Value
:
:
Array
(
json_internal_vec
!
[
]
)
}
;
(
[
(
tt
:
tt
)
+
]
)
=
>
{
crate
:
:
Value
:
:
Array
(
json_internal
!
(
array
[
]
(
tt
)
+
)
)
}
;
(
{
}
)
=
>
{
crate
:
:
Value
:
:
Object
(
crate
:
:
Map
:
:
new
(
)
)
}
;
(
{
(
tt
:
tt
)
+
}
)
=
>
{
crate
:
:
Value
:
:
Object
(
{
let
mut
object
=
crate
:
:
Map
:
:
new
(
)
;
json_internal
!
(
object
object
(
)
(
(
tt
)
+
)
(
(
tt
)
+
)
)
;
object
}
)
}
;
(
other
:
expr
)
=
>
{
crate
:
:
to_value
(
&
other
)
.
unwrap
(
)
}
;
}
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
json_internal_vec
{
(
(
content
:
tt
)
*
)
=
>
{
vec
!
[
(
content
)
*
]
}
;
}
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
json_unexpected
{
(
)
=
>
{
}
;
}
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
json_expect_expr_comma
{
(
e
:
expr
(
tt
:
tt
)
*
)
=
>
{
}
;
}
