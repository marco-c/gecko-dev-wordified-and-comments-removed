use
crate
:
:
lexical
:
:
float
:
:
ExtendedFloat
;
use
crate
:
:
lexical
:
:
num
:
:
Float
;
use
crate
:
:
lexical
:
:
rounding
:
:
*
;
#
[
test
]
fn
lower_n_mask_test
(
)
{
assert_eq
!
(
lower_n_mask
(
0u64
)
0b0
)
;
assert_eq
!
(
lower_n_mask
(
1u64
)
0b1
)
;
assert_eq
!
(
lower_n_mask
(
2u64
)
0b11
)
;
assert_eq
!
(
lower_n_mask
(
10u64
)
0b1111111111
)
;
assert_eq
!
(
lower_n_mask
(
32u64
)
0b11111111111111111111111111111111
)
;
}
#
[
test
]
fn
lower_n_halfway_test
(
)
{
assert_eq
!
(
lower_n_halfway
(
0u64
)
0b0
)
;
assert_eq
!
(
lower_n_halfway
(
1u64
)
0b1
)
;
assert_eq
!
(
lower_n_halfway
(
2u64
)
0b10
)
;
assert_eq
!
(
lower_n_halfway
(
10u64
)
0b1000000000
)
;
assert_eq
!
(
lower_n_halfway
(
32u64
)
0b10000000000000000000000000000000
)
;
}
#
[
test
]
fn
nth_bit_test
(
)
{
assert_eq
!
(
nth_bit
(
0u64
)
0b1
)
;
assert_eq
!
(
nth_bit
(
1u64
)
0b10
)
;
assert_eq
!
(
nth_bit
(
2u64
)
0b100
)
;
assert_eq
!
(
nth_bit
(
10u64
)
0b10000000000
)
;
assert_eq
!
(
nth_bit
(
31u64
)
0b10000000000000000000000000000000
)
;
}
#
[
test
]
fn
internal_n_mask_test
(
)
{
assert_eq
!
(
internal_n_mask
(
1u64
0u64
)
0b0
)
;
assert_eq
!
(
internal_n_mask
(
1u64
1u64
)
0b1
)
;
assert_eq
!
(
internal_n_mask
(
2u64
1u64
)
0b10
)
;
assert_eq
!
(
internal_n_mask
(
4u64
2u64
)
0b1100
)
;
assert_eq
!
(
internal_n_mask
(
10u64
2u64
)
0b1100000000
)
;
assert_eq
!
(
internal_n_mask
(
10u64
4u64
)
0b1111000000
)
;
assert_eq
!
(
internal_n_mask
(
32u64
4u64
)
0b11110000000000000000000000000000
)
;
}
#
[
test
]
fn
round_nearest_test
(
)
{
let
mut
fp
=
ExtendedFloat
{
mant
:
0x60
exp
:
0
}
;
let
(
above
halfway
)
=
round_nearest
(
&
mut
fp
6
)
;
assert
!
(
!
above
)
;
assert
!
(
halfway
)
;
assert_eq
!
(
fp
.
mant
1
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x61
exp
:
0
}
;
let
(
above
halfway
)
=
round_nearest
(
&
mut
fp
6
)
;
assert
!
(
above
)
;
assert
!
(
!
halfway
)
;
assert_eq
!
(
fp
.
mant
1
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x5F
exp
:
0
}
;
let
(
above
halfway
)
=
round_nearest
(
&
mut
fp
6
)
;
assert
!
(
!
above
)
;
assert
!
(
!
halfway
)
;
assert_eq
!
(
fp
.
mant
1
)
;
}
#
[
test
]
fn
round_downward_test
(
)
{
let
mut
fp
=
ExtendedFloat
{
mant
:
0x00
exp
:
0
}
;
round_downward
(
&
mut
fp
6
)
;
assert_eq
!
(
fp
.
mant
0
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x40
exp
:
0
}
;
round_downward
(
&
mut
fp
6
)
;
assert_eq
!
(
fp
.
mant
1
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x60
exp
:
0
}
;
round_downward
(
&
mut
fp
6
)
;
assert_eq
!
(
fp
.
mant
1
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x70
exp
:
0
}
;
round_downward
(
&
mut
fp
6
)
;
assert_eq
!
(
fp
.
mant
1
)
;
}
#
[
test
]
fn
round_nearest_tie_even_test
(
)
{
let
mut
fp
=
ExtendedFloat
{
mant
:
0x60
exp
:
0
}
;
round_nearest_tie_even
(
&
mut
fp
6
)
;
assert_eq
!
(
fp
.
mant
2
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x20
exp
:
0
}
;
round_nearest_tie_even
(
&
mut
fp
6
)
;
assert_eq
!
(
fp
.
mant
0
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x61
exp
:
0
}
;
round_nearest_tie_even
(
&
mut
fp
6
)
;
assert_eq
!
(
fp
.
mant
2
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x21
exp
:
0
}
;
round_nearest_tie_even
(
&
mut
fp
6
)
;
assert_eq
!
(
fp
.
mant
1
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x5F
exp
:
0
}
;
round_nearest_tie_even
(
&
mut
fp
6
)
;
assert_eq
!
(
fp
.
mant
1
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x1F
exp
:
0
}
;
round_nearest_tie_even
(
&
mut
fp
6
)
;
assert_eq
!
(
fp
.
mant
0
)
;
}
#
[
test
]
fn
round_to_float_test
(
)
{
let
mut
fp
=
ExtendedFloat
{
mant
:
1
<
<
63
exp
:
f64
:
:
DENORMAL_EXPONENT
-
15
}
;
round_to_float
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
1
<
<
48
)
;
assert_eq
!
(
fp
.
exp
f64
:
:
DENORMAL_EXPONENT
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x8000000000000400
exp
:
-
63
}
;
round_to_float
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
1
<
<
52
)
;
assert_eq
!
(
fp
.
exp
-
52
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x8000000000000C00
exp
:
-
63
}
;
round_to_float
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
(
1
<
<
52
)
+
2
)
;
assert_eq
!
(
fp
.
exp
-
52
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x8000000000000401
exp
:
-
63
}
;
round_to_float
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
(
1
<
<
52
)
+
1
)
;
assert_eq
!
(
fp
.
exp
-
52
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x8000000000000C01
exp
:
-
63
}
;
round_to_float
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
(
1
<
<
52
)
+
2
)
;
assert_eq
!
(
fp
.
exp
-
52
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x80000000000003FF
exp
:
-
63
}
;
round_to_float
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
1
<
<
52
)
;
assert_eq
!
(
fp
.
exp
-
52
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x8000000000000BFF
exp
:
-
63
}
;
round_to_float
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
(
1
<
<
52
)
+
1
)
;
assert_eq
!
(
fp
.
exp
-
52
)
;
}
#
[
test
]
fn
avoid_overflow_test
(
)
{
let
mut
fp
=
ExtendedFloat
{
mant
:
0xFFFFFFFFFFFF
exp
:
f64
:
:
MAX_EXPONENT
+
5
}
;
avoid_overflow
:
:
<
f64
>
(
&
mut
fp
)
;
assert_eq
!
(
fp
.
mant
0xFFFFFFFFFFFF
)
;
assert_eq
!
(
fp
.
exp
f64
:
:
MAX_EXPONENT
+
5
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0xFFFFFFFFFFFF
exp
:
f64
:
:
MAX_EXPONENT
+
4
}
;
avoid_overflow
:
:
<
f64
>
(
&
mut
fp
)
;
assert_eq
!
(
fp
.
mant
0x1FFFFFFFFFFFE0
)
;
assert_eq
!
(
fp
.
exp
f64
:
:
MAX_EXPONENT
-
1
)
;
}
#
[
test
]
fn
round_to_native_test
(
)
{
let
mut
fp
=
ExtendedFloat
{
mant
:
0xFFFFFFFFFFFF
exp
:
f64
:
:
MAX_EXPONENT
+
4
}
;
round_to_native
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
0x1FFFFFFFFFFFE0
)
;
assert_eq
!
(
fp
.
exp
f64
:
:
MAX_EXPONENT
-
1
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
1
exp
:
f64
:
:
DENORMAL_EXPONENT
+
48
}
;
round_to_native
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
1
<
<
48
)
;
assert_eq
!
(
fp
.
exp
f64
:
:
DENORMAL_EXPONENT
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x400000000000020
exp
:
-
58
}
;
round_to_native
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
1
<
<
52
)
;
assert_eq
!
(
fp
.
exp
-
52
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x400000000000060
exp
:
-
58
}
;
round_to_native
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
(
1
<
<
52
)
+
2
)
;
assert_eq
!
(
fp
.
exp
-
52
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x400000000000021
exp
:
-
58
}
;
round_to_native
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
(
1
<
<
52
)
+
1
)
;
assert_eq
!
(
fp
.
exp
-
52
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x400000000000061
exp
:
-
58
}
;
round_to_native
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
(
1
<
<
52
)
+
2
)
;
assert_eq
!
(
fp
.
exp
-
52
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x40000000000001F
exp
:
-
58
}
;
round_to_native
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
1
<
<
52
)
;
assert_eq
!
(
fp
.
exp
-
52
)
;
let
mut
fp
=
ExtendedFloat
{
mant
:
0x40000000000005F
exp
:
-
58
}
;
round_to_native
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
(
1
<
<
52
)
+
1
)
;
assert_eq
!
(
fp
.
exp
-
52
)
;
let
mut
fp
=
ExtendedFloat
{
exp
:
-
1139
mant
:
18446744073709550712
}
;
round_to_native
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
0
)
;
assert_eq
!
(
fp
.
exp
0
)
;
let
mut
fp
=
ExtendedFloat
{
exp
:
-
1139
mant
:
18446744073709551460
}
;
round_to_native
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
0
)
;
assert_eq
!
(
fp
.
exp
0
)
;
let
mut
fp
=
ExtendedFloat
{
exp
:
-
1138
mant
:
9223372036854776103
}
;
round_to_native
:
:
<
f64
_
>
(
&
mut
fp
round_nearest_tie_even
)
;
assert_eq
!
(
fp
.
mant
1
)
;
assert_eq
!
(
fp
.
exp
-
1074
)
;
}
