use
crate
:
:
collections
:
:
{
String
Vec
}
;
use
crate
:
:
Bump
;
pub
trait
FromIteratorIn
<
A
>
{
type
Alloc
;
fn
from_iter_in
<
I
>
(
iter
:
I
alloc
:
Self
:
:
Alloc
)
-
>
Self
where
I
:
IntoIterator
<
Item
=
A
>
;
}
impl
<
'
bump
T
>
FromIteratorIn
<
T
>
for
Vec
<
'
bump
T
>
{
type
Alloc
=
&
'
bump
Bump
;
fn
from_iter_in
<
I
>
(
iter
:
I
alloc
:
Self
:
:
Alloc
)
-
>
Self
where
I
:
IntoIterator
<
Item
=
T
>
{
Vec
:
:
from_iter_in
(
iter
alloc
)
}
}
impl
<
'
a
>
FromIteratorIn
<
char
>
for
String
<
'
a
>
{
type
Alloc
=
&
'
a
Bump
;
fn
from_iter_in
<
I
>
(
iter
:
I
alloc
:
Self
:
:
Alloc
)
-
>
Self
where
I
:
IntoIterator
<
Item
=
char
>
{
String
:
:
from_iter_in
(
iter
alloc
)
}
}
pub
trait
CollectIn
:
Iterator
+
Sized
{
fn
collect_in
<
C
:
FromIteratorIn
<
Self
:
:
Item
>
>
(
self
alloc
:
C
:
:
Alloc
)
-
>
C
{
C
:
:
from_iter_in
(
self
alloc
)
}
}
impl
<
I
:
Iterator
>
CollectIn
for
I
{
}
