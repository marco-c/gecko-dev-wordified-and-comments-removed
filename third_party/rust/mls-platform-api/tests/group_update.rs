use
mls_platform_api
:
:
ClientConfig
;
use
mls_platform_api
:
:
ClientIdentifiers
;
use
mls_platform_api
:
:
MessageOrAck
;
use
mls_platform_api
:
:
PlatformError
;
#
[
test
]
fn
test_group_external_join
(
)
-
>
Result
<
(
)
PlatformError
>
{
let
group_config
=
mls_platform_api
:
:
GroupConfig
:
:
default
(
)
;
let
mut
state_global
=
mls_platform_api
:
:
state_access
(
"
global
.
db
"
&
[
0u8
;
32
]
)
?
;
let
alice_cred
=
mls_platform_api
:
:
mls_generate_credential_basic
(
"
alice
"
.
as_bytes
(
)
)
?
;
let
bob_cred
=
mls_platform_api
:
:
mls_generate_credential_basic
(
"
bob
"
.
as_bytes
(
)
)
?
;
let
diana_cred
=
mls_platform_api
:
:
mls_generate_credential_basic
(
"
diana
"
.
as_bytes
(
)
)
?
;
println
!
(
"
\
nAlice
credential
:
{
}
"
hex
:
:
encode
(
&
alice_cred
)
)
;
println
!
(
"
Bob
credential
:
{
}
"
hex
:
:
encode
(
&
bob_cred
)
)
;
println
!
(
"
Diana
credential
:
{
}
"
hex
:
:
encode
(
&
diana_cred
)
)
;
let
alice_id
=
mls_platform_api
:
:
mls_generate_identity
(
&
state_global
group_config
.
ciphersuite
)
?
;
let
bob_id
=
mls_platform_api
:
:
mls_generate_identity
(
&
state_global
group_config
.
ciphersuite
)
?
;
let
diana_id
=
mls_platform_api
:
:
mls_generate_identity
(
&
state_global
group_config
.
ciphersuite
)
?
;
println
!
(
"
\
nAlice
identifier
:
{
}
"
hex
:
:
encode
(
&
alice_id
)
)
;
println
!
(
"
Bob
identifier
:
{
}
"
hex
:
:
encode
(
&
bob_id
)
)
;
println
!
(
"
Diana
identifier
:
{
}
"
hex
:
:
encode
(
&
diana_id
)
)
;
let
bob_kp
=
mls_platform_api
:
:
mls_generate_key_package
(
&
state_global
&
bob_id
&
bob_cred
&
Default
:
:
default
(
)
)
?
;
let
gide
=
mls_platform_api
:
:
mls_group_create
(
&
mut
state_global
&
alice_id
&
alice_cred
None
None
&
Default
:
:
default
(
)
)
?
;
println
!
(
"
\
nGroup
created
by
Alice
:
{
}
"
hex
:
:
encode
(
&
gide
.
group_id
)
)
;
let
members
=
mls_platform_api
:
:
mls_group_details
(
&
state_global
&
gide
.
group_id
&
alice_id
)
?
;
println
!
(
"
Members
(
alice
before
adding
bob
)
:
{
members
:
?
}
"
)
;
println
!
(
"
\
nAlice
adds
Bob
to
the
Group
"
)
;
let
commit_output
=
mls_platform_api
:
:
mls_group_add
(
&
mut
state_global
&
gide
.
group_id
&
alice_id
vec
!
[
bob_kp
]
)
?
;
let
welcome
=
commit_output
.
welcome
.
first
(
)
.
expect
(
"
No
welcome
messages
found
"
)
.
clone
(
)
;
mls_platform_api
:
:
mls_receive
(
&
state_global
&
alice_id
&
MessageOrAck
:
:
MlsMessage
(
commit_output
.
commit
.
clone
(
)
)
)
?
;
let
members
=
mls_platform_api
:
:
mls_group_details
(
&
state_global
&
gide
.
group_id
&
alice_id
)
?
;
println
!
(
"
Members
(
alice
after
adding
bob
)
:
{
members
:
?
}
"
)
;
println
!
(
"
\
nBob
joins
the
group
created
by
Alice
"
)
;
mls_platform_api
:
:
mls_group_join
(
&
state_global
&
bob_id
&
welcome
None
)
?
;
let
members
=
mls_platform_api
:
:
mls_group_details
(
&
state_global
&
gide
.
group_id
&
bob_id
)
?
;
println
!
(
"
Members
(
bob
after
joining
the
group
)
:
{
members
:
?
}
"
)
;
let
client_config
=
ClientConfig
{
allow_external_commits
:
true
.
.
Default
:
:
default
(
)
}
;
println
!
(
"
\
nBob
produce
a
group
info
so
that
someone
can
do
an
External
join
"
)
;
let
commit_4_output
=
mls_platform_api
:
:
mls_group_update
(
&
mut
state_global
&
gide
.
group_id
&
bob_id
None
None
None
&
client_config
)
?
;
mls_platform_api
:
:
mls_receive
(
&
state_global
&
alice_id
&
MessageOrAck
:
:
MlsMessage
(
commit_4_output
.
commit
.
clone
(
)
)
)
?
;
let
members_alice
=
mls_platform_api
:
:
mls_group_details
(
&
state_global
&
gide
.
group_id
&
alice_id
)
?
;
println
!
(
"
Members
(
alice
after
receiving
the
commit
allowing
external
join
)
:
{
members_alice
:
?
}
"
)
;
mls_platform_api
:
:
mls_receive
(
&
state_global
&
bob_id
&
MessageOrAck
:
:
MlsMessage
(
commit_4_output
.
commit
.
clone
(
)
)
)
?
;
let
members_bob
=
mls_platform_api
:
:
mls_group_details
(
&
state_global
&
gide
.
group_id
&
bob_id
)
?
;
println
!
(
"
Members
(
bob
after
commit
allowing
external
join
)
:
{
members_bob
:
?
}
"
)
;
println
!
(
"
\
nDiana
uses
the
group
info
created
by
Bob
to
do
an
External
join
"
)
;
let
external_commit_output
=
mls_platform_api
:
:
mls_group_external_commit
(
&
state_global
&
diana_id
&
diana_cred
&
commit_4_output
.
group_info
.
expect
(
"
alice
should
produce
group
info
"
)
None
)
?
;
println
!
(
"
Externally
joined
group
{
:
?
}
"
&
external_commit_output
.
gid
)
;
let
members_diana
=
mls_platform_api
:
:
mls_group_details
(
&
state_global
&
gide
.
group_id
&
diana_id
)
?
;
println
!
(
"
Members
(
diane
after
joining
)
:
{
members_diana
:
?
}
"
)
;
println
!
(
"
\
nAlice
receives
the
External
Join
from
Diana
"
)
;
mls_platform_api
:
:
mls_receive
(
&
state_global
&
alice_id
&
MessageOrAck
:
:
MlsMessage
(
external_commit_output
.
external_commit
.
clone
(
)
)
)
?
;
let
members_alice
=
mls_platform_api
:
:
mls_group_details
(
&
state_global
&
gide
.
group_id
&
alice_id
)
?
;
println
!
(
"
Members
(
alice
after
receiving
the
commit
from
Diana
)
:
{
members_alice
:
?
}
"
)
;
println
!
(
"
\
nBob
receives
the
External
Join
from
Diana
"
)
;
mls_platform_api
:
:
mls_receive
(
&
state_global
&
bob_id
&
MessageOrAck
:
:
MlsMessage
(
external_commit_output
.
external_commit
.
clone
(
)
)
)
?
;
let
members_bob
=
mls_platform_api
:
:
mls_group_details
(
&
state_global
&
gide
.
group_id
&
bob_id
)
?
;
println
!
(
"
Members
(
bob
after
receiving
the
commit
from
Diana
)
:
{
members_bob
:
?
}
"
)
;
let
diana_present
=
members_diana
.
group_members
.
iter
(
)
.
any
(
|
ClientIdentifiers
{
identity
.
.
}
|
identity
=
=
&
diana_id
)
;
assert
!
(
diana_present
"
Diana
should
be
in
the
group
members
after
external
join
"
)
;
assert
!
(
members_alice
=
=
members_bob
)
;
assert
!
(
members_diana
=
=
members_bob
)
;
Ok
(
(
)
)
}
