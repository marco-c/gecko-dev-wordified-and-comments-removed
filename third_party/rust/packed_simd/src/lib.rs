#
!
[
feature
(
repr_simd
rustc_attrs
const_fn
platform_intrinsics
stdsimd
aarch64_target_feature
arm_target_feature
link_llvm_intrinsics
core_intrinsics
stmt_expr_attributes
crate_visibility_modifier
custom_inner_attributes
)
]
#
!
[
allow
(
non_camel_case_types
non_snake_case
improper_ctypes_definitions
clippy
:
:
cast_possible_truncation
clippy
:
:
cast_lossless
clippy
:
:
cast_possible_wrap
clippy
:
:
cast_precision_loss
clippy
:
:
must_use_candidate
clippy
:
:
use_self
clippy
:
:
wrong_self_convention
)
]
#
!
[
cfg_attr
(
test
feature
(
hashmap_internals
)
)
]
#
!
[
deny
(
rust_2018_idioms
clippy
:
:
missing_inline_in_public_items
)
]
#
!
[
no_std
]
use
cfg_if
:
:
cfg_if
;
cfg_if
!
{
if
#
[
cfg
(
feature
=
"
core_arch
"
)
]
{
#
[
allow
(
unused_imports
)
]
use
core_arch
as
arch
;
}
else
{
#
[
allow
(
unused_imports
)
]
use
core
:
:
arch
;
}
}
#
[
cfg
(
all
(
target_arch
=
"
wasm32
"
test
)
)
]
use
wasm_bindgen_test
:
:
*
;
#
[
allow
(
unused_imports
)
]
use
core
:
:
{
cmp
f32
f64
fmt
hash
hint
i128
i16
i32
i64
i8
intrinsics
isize
iter
marker
mem
ops
ptr
slice
u128
u16
u32
u64
u8
usize
}
;
#
[
macro_use
]
mod
testing
;
#
[
macro_use
]
mod
api
;
mod
codegen
;
mod
sealed
;
pub
use
crate
:
:
sealed
:
:
{
Simd
as
SimdVector
Shuffle
SimdArray
Mask
}
;
#
[
repr
(
transparent
)
]
#
[
derive
(
Copy
Clone
)
]
pub
struct
Simd
<
A
:
sealed
:
:
SimdArray
>
(
#
[
doc
(
hidden
)
]
pub
<
A
as
sealed
:
:
SimdArray
>
:
:
Tuple
)
;
impl
<
A
:
sealed
:
:
SimdArray
>
sealed
:
:
Seal
for
Simd
<
A
>
{
}
#
[
repr
(
transparent
)
]
#
[
derive
(
Copy
Clone
Debug
)
]
#
[
allow
(
clippy
:
:
missing_inline_in_public_items
)
]
pub
struct
LexicographicallyOrdered
<
T
>
(
T
)
;
mod
masks
;
pub
use
self
:
:
masks
:
:
*
;
mod
v16
;
pub
use
self
:
:
v16
:
:
*
;
mod
v32
;
pub
use
self
:
:
v32
:
:
*
;
mod
v64
;
pub
use
self
:
:
v64
:
:
*
;
mod
v128
;
pub
use
self
:
:
v128
:
:
*
;
mod
v256
;
pub
use
self
:
:
v256
:
:
*
;
mod
v512
;
pub
use
self
:
:
v512
:
:
*
;
mod
vSize
;
pub
use
self
:
:
vSize
:
:
*
;
mod
vPtr
;
pub
use
self
:
:
vPtr
:
:
*
;
pub
use
self
:
:
api
:
:
cast
:
:
*
;
#
[
cfg
(
feature
=
"
into_bits
"
)
]
pub
use
self
:
:
api
:
:
into_bits
:
:
*
;
#
[
doc
(
hidden
)
]
pub
use
self
:
:
codegen
:
:
llvm
:
:
{
__shuffle_vector16
__shuffle_vector2
__shuffle_vector32
__shuffle_vector4
__shuffle_vector64
__shuffle_vector8
}
;
crate
mod
llvm
{
crate
use
crate
:
:
codegen
:
:
llvm
:
:
*
;
}
