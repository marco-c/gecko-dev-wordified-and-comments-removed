use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
path
:
:
PathBuf
;
use
async_trait
:
:
async_trait
;
use
minidump
:
:
Module
;
pub
use
breakpad_symbols
:
:
{
DebugInfoResult
FileError
FileKind
FillSymbolError
FrameSymbolizer
FrameWalker
LocateSymbolsResult
PendingSymbolStats
SymbolError
SymbolFile
SymbolStats
SymbolSupplier
Symbolizer
}
;
#
[
cfg
(
feature
=
"
debuginfo
-
unwind
"
)
]
pub
mod
debuginfo
;
#
[
async_trait
]
pub
trait
SymbolProvider
{
async
fn
fill_symbol
(
&
self
module
:
&
(
dyn
Module
+
Sync
)
frame
:
&
mut
(
dyn
FrameSymbolizer
+
Send
)
)
-
>
Result
<
(
)
FillSymbolError
>
;
async
fn
walk_frame
(
&
self
module
:
&
(
dyn
Module
+
Sync
)
walker
:
&
mut
(
dyn
FrameWalker
+
Send
)
)
-
>
Option
<
(
)
>
;
async
fn
get_file_path
(
&
self
module
:
&
(
dyn
Module
+
Sync
)
file_kind
:
FileKind
)
-
>
Result
<
PathBuf
FileError
>
;
fn
stats
(
&
self
)
-
>
HashMap
<
String
SymbolStats
>
{
HashMap
:
:
new
(
)
}
fn
pending_stats
(
&
self
)
-
>
PendingSymbolStats
{
PendingSymbolStats
:
:
default
(
)
}
}
#
[
async_trait
]
impl
SymbolProvider
for
&
(
dyn
SymbolProvider
+
Sync
)
{
async
fn
fill_symbol
(
&
self
module
:
&
(
dyn
Module
+
Sync
)
frame
:
&
mut
(
dyn
FrameSymbolizer
+
Send
)
)
-
>
Result
<
(
)
FillSymbolError
>
{
(
*
self
)
.
fill_symbol
(
module
frame
)
.
await
}
async
fn
walk_frame
(
&
self
module
:
&
(
dyn
Module
+
Sync
)
walker
:
&
mut
(
dyn
FrameWalker
+
Send
)
)
-
>
Option
<
(
)
>
{
(
*
self
)
.
walk_frame
(
module
walker
)
.
await
}
async
fn
get_file_path
(
&
self
module
:
&
(
dyn
Module
+
Sync
)
file_kind
:
FileKind
)
-
>
Result
<
PathBuf
FileError
>
{
(
*
self
)
.
get_file_path
(
module
file_kind
)
.
await
}
fn
stats
(
&
self
)
-
>
HashMap
<
String
SymbolStats
>
{
(
*
self
)
.
stats
(
)
}
fn
pending_stats
(
&
self
)
-
>
PendingSymbolStats
{
(
*
self
)
.
pending_stats
(
)
}
}
#
[
derive
(
Default
)
]
pub
struct
MultiSymbolProvider
{
providers
:
Vec
<
Box
<
dyn
SymbolProvider
+
Send
+
Sync
>
>
}
impl
MultiSymbolProvider
{
pub
fn
new
(
)
-
>
MultiSymbolProvider
{
Default
:
:
default
(
)
}
pub
fn
add
(
&
mut
self
provider
:
Box
<
dyn
SymbolProvider
+
Send
+
Sync
>
)
{
self
.
providers
.
push
(
provider
)
;
}
}
#
[
async_trait
]
impl
SymbolProvider
for
MultiSymbolProvider
{
async
fn
fill_symbol
(
&
self
module
:
&
(
dyn
Module
+
Sync
)
frame
:
&
mut
(
dyn
FrameSymbolizer
+
Send
)
)
-
>
Result
<
(
)
FillSymbolError
>
{
let
mut
best_result
=
Err
(
FillSymbolError
{
}
)
;
for
p
in
self
.
providers
.
iter
(
)
{
let
new_result
=
p
.
fill_symbol
(
module
frame
)
.
await
;
best_result
=
best_result
.
or
(
new_result
)
;
}
best_result
}
async
fn
walk_frame
(
&
self
module
:
&
(
dyn
Module
+
Sync
)
walker
:
&
mut
(
dyn
FrameWalker
+
Send
)
)
-
>
Option
<
(
)
>
{
for
p
in
self
.
providers
.
iter
(
)
{
let
result
=
p
.
walk_frame
(
module
walker
)
.
await
;
if
result
.
is_some
(
)
{
return
result
;
}
}
None
}
async
fn
get_file_path
(
&
self
module
:
&
(
dyn
Module
+
Sync
)
file_kind
:
FileKind
)
-
>
Result
<
PathBuf
FileError
>
{
let
mut
best_result
=
Err
(
FileError
:
:
NotFound
)
;
for
p
in
self
.
providers
.
iter
(
)
{
let
new_result
=
p
.
get_file_path
(
module
file_kind
)
.
await
;
best_result
=
best_result
.
or
(
new_result
)
;
}
best_result
}
fn
stats
(
&
self
)
-
>
HashMap
<
String
SymbolStats
>
{
let
mut
result
=
HashMap
:
:
new
(
)
;
for
p
in
self
.
providers
.
iter
(
)
{
result
.
extend
(
p
.
stats
(
)
)
;
}
result
}
fn
pending_stats
(
&
self
)
-
>
PendingSymbolStats
{
let
mut
result
=
PendingSymbolStats
:
:
default
(
)
;
for
p
in
self
.
providers
.
iter
(
)
{
result
=
p
.
pending_stats
(
)
;
}
result
}
}
#
[
async_trait
]
impl
SymbolProvider
for
Symbolizer
{
async
fn
fill_symbol
(
&
self
module
:
&
(
dyn
Module
+
Sync
)
frame
:
&
mut
(
dyn
FrameSymbolizer
+
Send
)
)
-
>
Result
<
(
)
FillSymbolError
>
{
self
.
fill_symbol
(
module
frame
)
.
await
}
async
fn
walk_frame
(
&
self
module
:
&
(
dyn
Module
+
Sync
)
walker
:
&
mut
(
dyn
FrameWalker
+
Send
)
)
-
>
Option
<
(
)
>
{
self
.
walk_frame
(
module
walker
)
.
await
}
async
fn
get_file_path
(
&
self
module
:
&
(
dyn
Module
+
Sync
)
file_kind
:
FileKind
)
-
>
Result
<
PathBuf
FileError
>
{
self
.
get_file_path
(
module
file_kind
)
.
await
}
fn
stats
(
&
self
)
-
>
HashMap
<
String
SymbolStats
>
{
self
.
stats
(
)
}
fn
pending_stats
(
&
self
)
-
>
PendingSymbolStats
{
self
.
pending_stats
(
)
}
}
#
[
cfg
(
feature
=
"
http
"
)
]
pub
fn
http_symbol_supplier
(
symbol_paths
:
Vec
<
PathBuf
>
symbol_urls
:
Vec
<
String
>
symbols_cache
:
PathBuf
symbols_tmp
:
PathBuf
timeout
:
std
:
:
time
:
:
Duration
)
-
>
impl
SymbolSupplier
{
breakpad_symbols
:
:
HttpSymbolSupplier
:
:
new
(
symbol_urls
symbols_cache
symbols_tmp
symbol_paths
timeout
)
}
pub
fn
simple_symbol_supplier
(
symbol_paths
:
Vec
<
PathBuf
>
)
-
>
impl
SymbolSupplier
{
breakpad_symbols
:
:
SimpleSymbolSupplier
:
:
new
(
symbol_paths
)
}
pub
fn
string_symbol_supplier
(
modules
:
HashMap
<
String
String
>
)
-
>
impl
SymbolSupplier
{
breakpad_symbols
:
:
StringSymbolSupplier
:
:
new
(
modules
)
}
