use
libc
:
:
c_uint
;
use
std
:
:
ffi
:
:
CString
;
use
std
:
:
ptr
;
use
ffi
;
use
error
:
:
{
Result
lmdb_result
}
;
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
struct
Database
{
dbi
:
ffi
:
:
MDB_dbi
}
impl
Database
{
pub
(
crate
)
unsafe
fn
new
(
txn
:
*
mut
ffi
:
:
MDB_txn
name
:
Option
<
&
str
>
flags
:
c_uint
)
-
>
Result
<
Database
>
{
let
c_name
=
name
.
map
(
|
n
|
CString
:
:
new
(
n
)
.
unwrap
(
)
)
;
let
name_ptr
=
if
let
Some
(
ref
c_name
)
=
c_name
{
c_name
.
as_ptr
(
)
}
else
{
ptr
:
:
null
(
)
}
;
let
mut
dbi
:
ffi
:
:
MDB_dbi
=
0
;
lmdb_result
(
ffi
:
:
mdb_dbi_open
(
txn
name_ptr
flags
&
mut
dbi
)
)
?
;
Ok
(
Database
{
dbi
:
dbi
}
)
}
pub
fn
dbi
(
&
self
)
-
>
ffi
:
:
MDB_dbi
{
self
.
dbi
}
}
unsafe
impl
Sync
for
Database
{
}
unsafe
impl
Send
for
Database
{
}
