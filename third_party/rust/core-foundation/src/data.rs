pub
use
core_foundation_sys
:
:
data
:
:
*
;
use
core_foundation_sys
:
:
base
:
:
{
CFIndex
CFRelease
}
;
use
core_foundation_sys
:
:
base
:
:
{
kCFAllocatorDefault
}
;
use
std
:
:
ops
:
:
Deref
;
use
std
:
:
slice
;
use
base
:
:
{
CFIndexConvertible
TCFType
}
;
pub
struct
CFData
(
CFDataRef
)
;
impl
Drop
for
CFData
{
fn
drop
(
&
mut
self
)
{
unsafe
{
CFRelease
(
self
.
as_CFTypeRef
(
)
)
}
}
}
impl_TCFType
!
(
CFData
CFDataRef
CFDataGetTypeID
)
;
impl_CFTypeDescription
!
(
CFData
)
;
impl
CFData
{
pub
fn
from_buffer
(
buffer
:
&
[
u8
]
)
-
>
CFData
{
unsafe
{
let
data_ref
=
CFDataCreate
(
kCFAllocatorDefault
buffer
.
as_ptr
(
)
buffer
.
len
(
)
.
to_CFIndex
(
)
)
;
TCFType
:
:
wrap_under_create_rule
(
data_ref
)
}
}
#
[
inline
]
pub
fn
bytes
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
[
u8
]
{
unsafe
{
slice
:
:
from_raw_parts
(
CFDataGetBytePtr
(
self
.
0
)
self
.
len
(
)
as
usize
)
}
}
#
[
inline
]
pub
fn
len
(
&
self
)
-
>
CFIndex
{
unsafe
{
CFDataGetLength
(
self
.
0
)
}
}
}
impl
Deref
for
CFData
{
type
Target
=
[
u8
]
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
[
u8
]
{
self
.
bytes
(
)
}
}
