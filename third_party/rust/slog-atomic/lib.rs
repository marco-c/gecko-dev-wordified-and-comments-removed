#
!
[
warn
(
missing_docs
)
]
#
[
macro_use
]
extern
crate
slog
;
extern
crate
crossbeam
;
use
slog
:
:
*
;
use
std
:
:
sync
:
:
Arc
;
use
crossbeam
:
:
sync
:
:
ArcCell
;
pub
struct
AtomicSwitchCtrl
<
E
>
(
Arc
<
ArcCell
<
Box
<
Drain
<
Error
=
E
>
+
Send
+
Sync
>
>
>
)
;
pub
struct
AtomicSwitch
<
E
>
(
Arc
<
ArcCell
<
Box
<
Drain
<
Error
=
E
>
+
Send
+
Sync
>
>
>
)
;
impl
<
E
>
AtomicSwitch
<
E
>
{
pub
fn
new
<
D
:
Drain
<
Error
=
E
>
+
'
static
+
Send
+
Sync
>
(
drain
:
D
)
-
>
Self
{
AtomicSwitch
:
:
new_from_arc
(
Arc
:
:
new
(
ArcCell
:
:
new
(
Arc
:
:
new
(
Box
:
:
new
(
drain
)
as
Box
<
Drain
<
Error
=
E
>
+
Send
+
Sync
>
)
)
)
)
}
pub
fn
new_from_arc
(
d
:
Arc
<
ArcCell
<
Box
<
Drain
<
Error
=
E
>
+
Send
+
Sync
>
>
>
)
-
>
Self
{
AtomicSwitch
(
d
)
}
pub
fn
ctrl
(
&
self
)
-
>
AtomicSwitchCtrl
<
E
>
{
AtomicSwitchCtrl
(
self
.
0
.
clone
(
)
)
}
}
impl
<
E
>
AtomicSwitchCtrl
<
E
>
{
pub
fn
get
(
&
self
)
-
>
Arc
<
Box
<
Drain
<
Error
=
E
>
+
Send
+
Sync
>
>
{
self
.
0
.
get
(
)
}
pub
fn
set
<
D
:
Drain
<
Error
=
E
>
+
Send
+
Sync
>
(
&
self
drain
:
D
)
{
let
_
=
self
.
0
.
set
(
Arc
:
:
new
(
Box
:
:
new
(
drain
)
)
)
;
}
pub
fn
swap
(
&
self
drain
:
Arc
<
Box
<
Drain
<
Error
=
E
>
+
Send
+
Sync
>
>
)
-
>
Arc
<
Box
<
Drain
<
Error
=
E
>
+
Send
+
Sync
>
>
{
self
.
0
.
set
(
drain
)
}
pub
fn
drain
(
&
self
)
-
>
AtomicSwitch
<
E
>
{
AtomicSwitch
(
self
.
0
.
clone
(
)
)
}
}
impl
<
E
>
Drain
for
AtomicSwitch
<
E
>
{
type
Error
=
E
;
fn
log
(
&
self
info
:
&
Record
logger_values
:
&
OwnedKeyValueList
)
-
>
std
:
:
result
:
:
Result
<
(
)
E
>
{
self
.
0
.
get
(
)
.
log
(
info
logger_values
)
}
}
