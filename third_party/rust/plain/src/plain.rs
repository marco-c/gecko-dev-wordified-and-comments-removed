use
Error
;
pub
unsafe
trait
Plain
{
#
[
inline
(
always
)
]
fn
from_bytes
(
bytes
:
&
[
u8
]
)
-
>
Result
<
&
Self
Error
>
where
Self
:
Sized
{
:
:
from_bytes
(
bytes
)
}
#
[
inline
(
always
)
]
fn
slice_from_bytes
(
bytes
:
&
[
u8
]
)
-
>
Result
<
&
[
Self
]
Error
>
where
Self
:
Sized
{
:
:
slice_from_bytes
(
bytes
)
}
#
[
inline
(
always
)
]
fn
slice_from_bytes_len
(
bytes
:
&
[
u8
]
len
:
usize
)
-
>
Result
<
&
[
Self
]
Error
>
where
Self
:
Sized
{
:
:
slice_from_bytes_len
(
bytes
len
)
}
#
[
inline
(
always
)
]
fn
from_mut_bytes
(
bytes
:
&
mut
[
u8
]
)
-
>
Result
<
&
mut
Self
Error
>
where
Self
:
Sized
{
:
:
from_mut_bytes
(
bytes
)
}
#
[
inline
(
always
)
]
fn
slice_from_mut_bytes
(
bytes
:
&
mut
[
u8
]
)
-
>
Result
<
&
mut
[
Self
]
Error
>
where
Self
:
Sized
{
:
:
slice_from_mut_bytes
(
bytes
)
}
#
[
inline
(
always
)
]
fn
slice_from_mut_bytes_len
(
bytes
:
&
mut
[
u8
]
len
:
usize
)
-
>
Result
<
&
mut
[
Self
]
Error
>
where
Self
:
Sized
{
:
:
slice_from_mut_bytes_len
(
bytes
len
)
}
#
[
inline
(
always
)
]
fn
copy_from_bytes
(
&
mut
self
bytes
:
&
[
u8
]
)
-
>
Result
<
(
)
Error
>
{
:
:
copy_from_bytes
(
self
bytes
)
}
}
unsafe
impl
Plain
for
u8
{
}
unsafe
impl
Plain
for
u16
{
}
unsafe
impl
Plain
for
u32
{
}
unsafe
impl
Plain
for
u64
{
}
unsafe
impl
Plain
for
usize
{
}
unsafe
impl
Plain
for
i8
{
}
unsafe
impl
Plain
for
i16
{
}
unsafe
impl
Plain
for
i32
{
}
unsafe
impl
Plain
for
i64
{
}
unsafe
impl
Plain
for
isize
{
}
unsafe
impl
<
S
>
Plain
for
[
S
]
where
S
:
Plain
{
}
