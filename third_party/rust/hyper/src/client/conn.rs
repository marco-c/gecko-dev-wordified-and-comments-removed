#
[
cfg
(
all
(
feature
=
"
backports
"
feature
=
"
http1
"
)
)
]
pub
mod
http1
;
#
[
cfg
(
all
(
feature
=
"
backports
"
feature
=
"
http2
"
)
)
]
pub
mod
http2
;
#
[
cfg
(
not
(
all
(
feature
=
"
http1
"
feature
=
"
http2
"
)
)
)
]
use
std
:
:
convert
:
:
Infallible
;
use
std
:
:
error
:
:
Error
as
StdError
;
use
std
:
:
fmt
;
use
std
:
:
future
:
:
Future
;
#
[
cfg
(
not
(
all
(
feature
=
"
http1
"
feature
=
"
http2
"
)
)
)
]
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
marker
:
:
Unpin
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
#
[
cfg
(
all
(
feature
=
"
runtime
"
feature
=
"
http2
"
)
)
]
use
std
:
:
time
:
:
Duration
;
use
bytes
:
:
Bytes
;
use
futures_util
:
:
future
:
:
{
self
Either
FutureExt
as
_
}
;
use
httparse
:
:
ParserConfig
;
use
pin_project_lite
:
:
pin_project
;
use
tokio
:
:
io
:
:
{
AsyncRead
AsyncWrite
}
;
use
tower_service
:
:
Service
;
use
tracing
:
:
{
debug
trace
}
;
use
super
:
:
dispatch
;
use
crate
:
:
body
:
:
HttpBody
;
use
crate
:
:
common
:
:
exec
:
:
{
BoxSendFuture
Exec
}
;
use
crate
:
:
proto
;
use
crate
:
:
rt
:
:
Executor
;
#
[
cfg
(
feature
=
"
http1
"
)
]
use
crate
:
:
upgrade
:
:
Upgraded
;
use
crate
:
:
{
Body
Request
Response
}
;
#
[
cfg
(
feature
=
"
http1
"
)
]
type
Http1Dispatcher
<
T
B
>
=
proto
:
:
dispatch
:
:
Dispatcher
<
proto
:
:
dispatch
:
:
Client
<
B
>
B
T
proto
:
:
h1
:
:
ClientTransaction
>
;
#
[
cfg
(
not
(
feature
=
"
http1
"
)
)
]
type
Http1Dispatcher
<
T
B
>
=
(
Infallible
PhantomData
<
(
T
Pin
<
Box
<
B
>
>
)
>
)
;
#
[
cfg
(
feature
=
"
http2
"
)
]
type
Http2ClientTask
<
B
>
=
proto
:
:
h2
:
:
ClientTask
<
B
>
;
#
[
cfg
(
not
(
feature
=
"
http2
"
)
)
]
type
Http2ClientTask
<
B
>
=
(
Infallible
PhantomData
<
Pin
<
Box
<
B
>
>
>
)
;
pin_project
!
{
#
[
project
=
ProtoClientProj
]
enum
ProtoClient
<
T
B
>
where
B
:
HttpBody
{
H1
{
#
[
pin
]
h1
:
Http1Dispatcher
<
T
B
>
}
H2
{
#
[
pin
]
h2
:
Http2ClientTask
<
B
>
}
}
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
deprecated
(
note
=
"
This
function
will
be
replaced
with
client
:
:
conn
:
:
http1
:
:
handshake
and
client
:
:
conn
:
:
http2
:
:
handshake
in
1
.
0
enable
the
\
"
backports
\
"
feature
to
use
them
now
.
"
)
)
]
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
pub
async
fn
handshake
<
T
>
(
io
:
T
)
-
>
crate
:
:
Result
<
(
SendRequest
<
crate
:
:
Body
>
Connection
<
T
crate
:
:
Body
>
)
>
where
T
:
AsyncRead
+
AsyncWrite
+
Unpin
+
Send
+
'
static
{
#
[
allow
(
deprecated
)
]
Builder
:
:
new
(
)
.
handshake
(
io
)
.
await
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
deprecated
(
note
=
"
This
type
will
be
replaced
with
client
:
:
conn
:
:
http1
:
:
SendRequest
and
client
:
:
conn
:
:
http2
:
:
SendRequest
in
1
.
0
enable
the
\
"
backports
\
"
feature
to
use
them
now
.
"
)
)
]
pub
struct
SendRequest
<
B
>
{
dispatch
:
dispatch
:
:
Sender
<
Request
<
B
>
Response
<
Body
>
>
}
#
[
must_use
=
"
futures
do
nothing
unless
polled
"
]
#
[
cfg_attr
(
feature
=
"
deprecated
"
deprecated
(
note
=
"
This
type
will
be
replaced
with
client
:
:
conn
:
:
http1
:
:
Connection
and
client
:
:
conn
:
:
http2
:
:
Connection
in
1
.
0
enable
the
\
"
backports
\
"
feature
to
use
them
now
.
"
)
)
]
pub
struct
Connection
<
T
B
>
where
T
:
AsyncRead
+
AsyncWrite
+
Send
+
'
static
B
:
HttpBody
+
'
static
{
inner
:
Option
<
ProtoClient
<
T
B
>
>
}
#
[
derive
(
Clone
Debug
)
]
#
[
cfg_attr
(
feature
=
"
deprecated
"
deprecated
(
note
=
"
This
type
will
be
replaced
with
client
:
:
conn
:
:
http1
:
:
Builder
and
client
:
:
conn
:
:
http2
:
:
Builder
in
1
.
0
enable
the
\
"
backports
\
"
feature
to
use
them
now
.
"
)
)
]
pub
struct
Builder
{
pub
(
super
)
exec
:
Exec
h09_responses
:
bool
h1_parser_config
:
ParserConfig
h1_writev
:
Option
<
bool
>
h1_title_case_headers
:
bool
h1_preserve_header_case
:
bool
#
[
cfg
(
feature
=
"
ffi
"
)
]
h1_preserve_header_order
:
bool
h1_read_buf_exact_size
:
Option
<
usize
>
h1_max_buf_size
:
Option
<
usize
>
#
[
cfg
(
feature
=
"
ffi
"
)
]
h1_headers_raw
:
bool
#
[
cfg
(
feature
=
"
http2
"
)
]
h2_builder
:
proto
:
:
h2
:
:
client
:
:
Config
version
:
Proto
}
#
[
derive
(
Clone
Debug
)
]
enum
Proto
{
#
[
cfg
(
feature
=
"
http1
"
)
]
Http1
#
[
cfg
(
feature
=
"
http2
"
)
]
Http2
}
#
[
must_use
=
"
futures
do
nothing
unless
polled
"
]
pub
struct
ResponseFuture
{
inner
:
ResponseFutureState
}
enum
ResponseFutureState
{
Waiting
(
dispatch
:
:
Promise
<
Response
<
Body
>
>
)
Error
(
Option
<
crate
:
:
Error
>
)
}
#
[
derive
(
Debug
)
]
pub
struct
Parts
<
T
>
{
pub
io
:
T
pub
read_buf
:
Bytes
_inner
:
(
)
}
#
[
must_use
=
"
futures
do
nothing
unless
polled
"
]
#
[
cfg
(
feature
=
"
http2
"
)
]
pub
(
super
)
struct
Http2SendRequest
<
B
>
{
dispatch
:
dispatch
:
:
UnboundedSender
<
Request
<
B
>
Response
<
Body
>
>
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
impl
<
B
>
SendRequest
<
B
>
{
pub
fn
poll_ready
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
crate
:
:
Result
<
(
)
>
>
{
self
.
dispatch
.
poll_ready
(
cx
)
}
pub
(
super
)
async
fn
when_ready
(
self
)
-
>
crate
:
:
Result
<
Self
>
{
let
mut
me
=
Some
(
self
)
;
future
:
:
poll_fn
(
move
|
cx
|
{
ready
!
(
me
.
as_mut
(
)
.
unwrap
(
)
.
poll_ready
(
cx
)
)
?
;
Poll
:
:
Ready
(
Ok
(
me
.
take
(
)
.
unwrap
(
)
)
)
}
)
.
await
}
pub
(
super
)
fn
is_ready
(
&
self
)
-
>
bool
{
self
.
dispatch
.
is_ready
(
)
}
pub
(
super
)
fn
is_closed
(
&
self
)
-
>
bool
{
self
.
dispatch
.
is_closed
(
)
}
#
[
cfg
(
feature
=
"
http2
"
)
]
pub
(
super
)
fn
into_http2
(
self
)
-
>
Http2SendRequest
<
B
>
{
Http2SendRequest
{
dispatch
:
self
.
dispatch
.
unbound
(
)
}
}
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
impl
<
B
>
SendRequest
<
B
>
where
B
:
HttpBody
+
'
static
{
pub
fn
send_request
(
&
mut
self
req
:
Request
<
B
>
)
-
>
ResponseFuture
{
let
inner
=
match
self
.
dispatch
.
send
(
req
)
{
Ok
(
rx
)
=
>
ResponseFutureState
:
:
Waiting
(
rx
)
Err
(
_req
)
=
>
{
debug
!
(
"
connection
was
not
ready
"
)
;
let
err
=
crate
:
:
Error
:
:
new_canceled
(
)
.
with
(
"
connection
was
not
ready
"
)
;
ResponseFutureState
:
:
Error
(
Some
(
err
)
)
}
}
;
ResponseFuture
{
inner
}
}
pub
(
super
)
fn
send_request_retryable
(
&
mut
self
req
:
Request
<
B
>
)
-
>
impl
Future
<
Output
=
Result
<
Response
<
Body
>
(
crate
:
:
Error
Option
<
Request
<
B
>
>
)
>
>
+
Unpin
where
B
:
Send
{
match
self
.
dispatch
.
try_send
(
req
)
{
Ok
(
rx
)
=
>
{
Either
:
:
Left
(
rx
.
then
(
move
|
res
|
{
match
res
{
Ok
(
Ok
(
res
)
)
=
>
future
:
:
ok
(
res
)
Ok
(
Err
(
err
)
)
=
>
future
:
:
err
(
err
)
Err
(
_
)
=
>
panic
!
(
"
dispatch
dropped
without
returning
error
"
)
}
}
)
)
}
Err
(
req
)
=
>
{
debug
!
(
"
connection
was
not
ready
"
)
;
let
err
=
crate
:
:
Error
:
:
new_canceled
(
)
.
with
(
"
connection
was
not
ready
"
)
;
Either
:
:
Right
(
future
:
:
err
(
(
err
Some
(
req
)
)
)
)
}
}
}
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
impl
<
B
>
Service
<
Request
<
B
>
>
for
SendRequest
<
B
>
where
B
:
HttpBody
+
'
static
{
type
Response
=
Response
<
Body
>
;
type
Error
=
crate
:
:
Error
;
type
Future
=
ResponseFuture
;
fn
poll_ready
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Result
<
(
)
Self
:
:
Error
>
>
{
self
.
poll_ready
(
cx
)
}
fn
call
(
&
mut
self
req
:
Request
<
B
>
)
-
>
Self
:
:
Future
{
self
.
send_request
(
req
)
}
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
impl
<
B
>
fmt
:
:
Debug
for
SendRequest
<
B
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
SendRequest
"
)
.
finish
(
)
}
}
#
[
cfg
(
feature
=
"
http2
"
)
]
impl
<
B
>
Http2SendRequest
<
B
>
{
pub
(
super
)
fn
is_ready
(
&
self
)
-
>
bool
{
self
.
dispatch
.
is_ready
(
)
}
pub
(
super
)
fn
is_closed
(
&
self
)
-
>
bool
{
self
.
dispatch
.
is_closed
(
)
}
}
#
[
cfg
(
feature
=
"
http2
"
)
]
impl
<
B
>
Http2SendRequest
<
B
>
where
B
:
HttpBody
+
'
static
{
pub
(
super
)
fn
send_request_retryable
(
&
mut
self
req
:
Request
<
B
>
)
-
>
impl
Future
<
Output
=
Result
<
Response
<
Body
>
(
crate
:
:
Error
Option
<
Request
<
B
>
>
)
>
>
where
B
:
Send
{
match
self
.
dispatch
.
try_send
(
req
)
{
Ok
(
rx
)
=
>
{
Either
:
:
Left
(
rx
.
then
(
move
|
res
|
{
match
res
{
Ok
(
Ok
(
res
)
)
=
>
future
:
:
ok
(
res
)
Ok
(
Err
(
err
)
)
=
>
future
:
:
err
(
err
)
Err
(
_
)
=
>
panic
!
(
"
dispatch
dropped
without
returning
error
"
)
}
}
)
)
}
Err
(
req
)
=
>
{
debug
!
(
"
connection
was
not
ready
"
)
;
let
err
=
crate
:
:
Error
:
:
new_canceled
(
)
.
with
(
"
connection
was
not
ready
"
)
;
Either
:
:
Right
(
future
:
:
err
(
(
err
Some
(
req
)
)
)
)
}
}
}
}
#
[
cfg
(
feature
=
"
http2
"
)
]
impl
<
B
>
fmt
:
:
Debug
for
Http2SendRequest
<
B
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
Http2SendRequest
"
)
.
finish
(
)
}
}
#
[
cfg
(
feature
=
"
http2
"
)
]
impl
<
B
>
Clone
for
Http2SendRequest
<
B
>
{
fn
clone
(
&
self
)
-
>
Self
{
Http2SendRequest
{
dispatch
:
self
.
dispatch
.
clone
(
)
}
}
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
impl
<
T
B
>
Connection
<
T
B
>
where
T
:
AsyncRead
+
AsyncWrite
+
Unpin
+
Send
+
'
static
B
:
HttpBody
+
Unpin
+
Send
+
'
static
B
:
:
Data
:
Send
B
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
{
pub
fn
into_parts
(
self
)
-
>
Parts
<
T
>
{
match
self
.
inner
.
expect
(
"
already
upgraded
"
)
{
#
[
cfg
(
feature
=
"
http1
"
)
]
ProtoClient
:
:
H1
{
h1
}
=
>
{
let
(
io
read_buf
_
)
=
h1
.
into_inner
(
)
;
Parts
{
io
read_buf
_inner
:
(
)
}
}
ProtoClient
:
:
H2
{
.
.
}
=
>
{
panic
!
(
"
http2
cannot
into_inner
"
)
;
}
#
[
cfg
(
not
(
feature
=
"
http1
"
)
)
]
ProtoClient
:
:
H1
{
h1
}
=
>
match
h1
.
0
{
}
}
}
pub
fn
poll_without_shutdown
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
crate
:
:
Result
<
(
)
>
>
{
match
*
self
.
inner
.
as_mut
(
)
.
expect
(
"
already
upgraded
"
)
{
#
[
cfg
(
feature
=
"
http1
"
)
]
ProtoClient
:
:
H1
{
ref
mut
h1
}
=
>
h1
.
poll_without_shutdown
(
cx
)
#
[
cfg
(
feature
=
"
http2
"
)
]
ProtoClient
:
:
H2
{
ref
mut
h2
.
.
}
=
>
Pin
:
:
new
(
h2
)
.
poll
(
cx
)
.
map_ok
(
|
_
|
(
)
)
#
[
cfg
(
not
(
feature
=
"
http1
"
)
)
]
ProtoClient
:
:
H1
{
ref
mut
h1
}
=
>
match
h1
.
0
{
}
#
[
cfg
(
not
(
feature
=
"
http2
"
)
)
]
ProtoClient
:
:
H2
{
ref
mut
h2
.
.
}
=
>
match
h2
.
0
{
}
}
}
pub
fn
without_shutdown
(
self
)
-
>
impl
Future
<
Output
=
crate
:
:
Result
<
Parts
<
T
>
>
>
{
let
mut
conn
=
Some
(
self
)
;
future
:
:
poll_fn
(
move
|
cx
|
-
>
Poll
<
crate
:
:
Result
<
Parts
<
T
>
>
>
{
ready
!
(
conn
.
as_mut
(
)
.
unwrap
(
)
.
poll_without_shutdown
(
cx
)
)
?
;
Poll
:
:
Ready
(
Ok
(
conn
.
take
(
)
.
unwrap
(
)
.
into_parts
(
)
)
)
}
)
}
#
[
cfg
(
feature
=
"
http2
"
)
]
pub
fn
http2_is_extended_connect_protocol_enabled
(
&
self
)
-
>
bool
{
match
self
.
inner
.
as_ref
(
)
.
unwrap
(
)
{
ProtoClient
:
:
H1
{
.
.
}
=
>
false
ProtoClient
:
:
H2
{
h2
}
=
>
h2
.
is_extended_connect_protocol_enabled
(
)
}
}
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
impl
<
T
B
>
Future
for
Connection
<
T
B
>
where
T
:
AsyncRead
+
AsyncWrite
+
Unpin
+
Send
B
:
HttpBody
+
Send
+
'
static
B
:
:
Data
:
Send
B
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
{
type
Output
=
crate
:
:
Result
<
(
)
>
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
match
ready
!
(
Pin
:
:
new
(
self
.
inner
.
as_mut
(
)
.
unwrap
(
)
)
.
poll
(
cx
)
)
?
{
proto
:
:
Dispatched
:
:
Shutdown
=
>
Poll
:
:
Ready
(
Ok
(
(
)
)
)
#
[
cfg
(
feature
=
"
http1
"
)
]
proto
:
:
Dispatched
:
:
Upgrade
(
pending
)
=
>
match
self
.
inner
.
take
(
)
{
Some
(
ProtoClient
:
:
H1
{
h1
}
)
=
>
{
let
(
io
buf
_
)
=
h1
.
into_inner
(
)
;
pending
.
fulfill
(
Upgraded
:
:
new
(
io
buf
)
)
;
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
_
=
>
{
drop
(
pending
)
;
unreachable
!
(
"
Upgrade
expects
h1
"
)
;
}
}
}
}
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
impl
<
T
B
>
fmt
:
:
Debug
for
Connection
<
T
B
>
where
T
:
AsyncRead
+
AsyncWrite
+
fmt
:
:
Debug
+
Send
+
'
static
B
:
HttpBody
+
'
static
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
Connection
"
)
.
finish
(
)
}
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
impl
Builder
{
#
[
inline
]
pub
fn
new
(
)
-
>
Builder
{
Builder
{
exec
:
Exec
:
:
Default
h09_responses
:
false
h1_writev
:
None
h1_read_buf_exact_size
:
None
h1_parser_config
:
Default
:
:
default
(
)
h1_title_case_headers
:
false
h1_preserve_header_case
:
false
#
[
cfg
(
feature
=
"
ffi
"
)
]
h1_preserve_header_order
:
false
h1_max_buf_size
:
None
#
[
cfg
(
feature
=
"
ffi
"
)
]
h1_headers_raw
:
false
#
[
cfg
(
feature
=
"
http2
"
)
]
h2_builder
:
Default
:
:
default
(
)
#
[
cfg
(
feature
=
"
http1
"
)
]
version
:
Proto
:
:
Http1
#
[
cfg
(
not
(
feature
=
"
http1
"
)
)
]
version
:
Proto
:
:
Http2
}
}
pub
fn
executor
<
E
>
(
&
mut
self
exec
:
E
)
-
>
&
mut
Builder
where
E
:
Executor
<
BoxSendFuture
>
+
Send
+
Sync
+
'
static
{
self
.
exec
=
Exec
:
:
Executor
(
Arc
:
:
new
(
exec
)
)
;
self
}
pub
fn
http09_responses
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Builder
{
self
.
h09_responses
=
enabled
;
self
}
pub
fn
http1_allow_spaces_after_header_name_in_responses
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Builder
{
self
.
h1_parser_config
.
allow_spaces_after_header_name_in_responses
(
enabled
)
;
self
}
pub
fn
http1_allow_obsolete_multiline_headers_in_responses
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Builder
{
self
.
h1_parser_config
.
allow_obsolete_multiline_headers_in_responses
(
enabled
)
;
self
}
pub
fn
http1_ignore_invalid_headers_in_responses
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Builder
{
self
.
h1_parser_config
.
ignore_invalid_headers_in_responses
(
enabled
)
;
self
}
pub
fn
http1_writev
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Builder
{
self
.
h1_writev
=
Some
(
enabled
)
;
self
}
pub
fn
http1_title_case_headers
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Builder
{
self
.
h1_title_case_headers
=
enabled
;
self
}
pub
fn
http1_preserve_header_case
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Builder
{
self
.
h1_preserve_header_case
=
enabled
;
self
}
#
[
cfg
(
feature
=
"
ffi
"
)
]
pub
fn
http1_preserve_header_order
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Builder
{
self
.
h1_preserve_header_order
=
enabled
;
self
}
pub
fn
http1_read_buf_exact_size
(
&
mut
self
sz
:
Option
<
usize
>
)
-
>
&
mut
Builder
{
self
.
h1_read_buf_exact_size
=
sz
;
self
.
h1_max_buf_size
=
None
;
self
}
#
[
cfg
(
feature
=
"
http1
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
http1
"
)
)
)
]
pub
fn
http1_max_buf_size
(
&
mut
self
max
:
usize
)
-
>
&
mut
Self
{
assert
!
(
max
>
=
proto
:
:
h1
:
:
MINIMUM_MAX_BUFFER_SIZE
"
the
max_buf_size
cannot
be
smaller
than
the
minimum
that
h1
specifies
.
"
)
;
self
.
h1_max_buf_size
=
Some
(
max
)
;
self
.
h1_read_buf_exact_size
=
None
;
self
}
#
[
cfg
(
feature
=
"
ffi
"
)
]
pub
(
crate
)
fn
http1_headers_raw
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Self
{
self
.
h1_headers_raw
=
enabled
;
self
}
#
[
cfg
(
feature
=
"
http2
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
http2
"
)
)
)
]
pub
fn
http2_only
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Builder
{
if
enabled
{
self
.
version
=
Proto
:
:
Http2
}
self
}
#
[
cfg
(
feature
=
"
http2
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
http2
"
)
)
)
]
pub
fn
http2_initial_stream_window_size
(
&
mut
self
sz
:
impl
Into
<
Option
<
u32
>
>
)
-
>
&
mut
Self
{
if
let
Some
(
sz
)
=
sz
.
into
(
)
{
self
.
h2_builder
.
adaptive_window
=
false
;
self
.
h2_builder
.
initial_stream_window_size
=
sz
;
}
self
}
#
[
cfg
(
feature
=
"
http2
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
http2
"
)
)
)
]
pub
fn
http2_initial_connection_window_size
(
&
mut
self
sz
:
impl
Into
<
Option
<
u32
>
>
)
-
>
&
mut
Self
{
if
let
Some
(
sz
)
=
sz
.
into
(
)
{
self
.
h2_builder
.
adaptive_window
=
false
;
self
.
h2_builder
.
initial_conn_window_size
=
sz
;
}
self
}
#
[
cfg
(
feature
=
"
http2
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
http2
"
)
)
)
]
pub
fn
http2_adaptive_window
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Self
{
use
proto
:
:
h2
:
:
SPEC_WINDOW_SIZE
;
self
.
h2_builder
.
adaptive_window
=
enabled
;
if
enabled
{
self
.
h2_builder
.
initial_conn_window_size
=
SPEC_WINDOW_SIZE
;
self
.
h2_builder
.
initial_stream_window_size
=
SPEC_WINDOW_SIZE
;
}
self
}
#
[
cfg
(
feature
=
"
http2
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
http2
"
)
)
)
]
pub
fn
http2_max_frame_size
(
&
mut
self
sz
:
impl
Into
<
Option
<
u32
>
>
)
-
>
&
mut
Self
{
if
let
Some
(
sz
)
=
sz
.
into
(
)
{
self
.
h2_builder
.
max_frame_size
=
sz
;
}
self
}
#
[
cfg
(
feature
=
"
runtime
"
)
]
#
[
cfg
(
feature
=
"
http2
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
http2
"
)
)
)
]
pub
fn
http2_keep_alive_interval
(
&
mut
self
interval
:
impl
Into
<
Option
<
Duration
>
>
)
-
>
&
mut
Self
{
self
.
h2_builder
.
keep_alive_interval
=
interval
.
into
(
)
;
self
}
#
[
cfg
(
feature
=
"
runtime
"
)
]
#
[
cfg
(
feature
=
"
http2
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
http2
"
)
)
)
]
pub
fn
http2_keep_alive_timeout
(
&
mut
self
timeout
:
Duration
)
-
>
&
mut
Self
{
self
.
h2_builder
.
keep_alive_timeout
=
timeout
;
self
}
#
[
cfg
(
feature
=
"
runtime
"
)
]
#
[
cfg
(
feature
=
"
http2
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
http2
"
)
)
)
]
pub
fn
http2_keep_alive_while_idle
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Self
{
self
.
h2_builder
.
keep_alive_while_idle
=
enabled
;
self
}
#
[
cfg
(
feature
=
"
http2
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
http2
"
)
)
)
]
pub
fn
http2_max_concurrent_reset_streams
(
&
mut
self
max
:
usize
)
-
>
&
mut
Self
{
self
.
h2_builder
.
max_concurrent_reset_streams
=
Some
(
max
)
;
self
}
#
[
cfg
(
feature
=
"
http2
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
http2
"
)
)
)
]
pub
fn
http2_max_send_buf_size
(
&
mut
self
max
:
usize
)
-
>
&
mut
Self
{
assert
!
(
max
<
=
std
:
:
u32
:
:
MAX
as
usize
)
;
self
.
h2_builder
.
max_send_buffer_size
=
max
;
self
}
pub
fn
handshake
<
T
B
>
(
&
self
io
:
T
)
-
>
impl
Future
<
Output
=
crate
:
:
Result
<
(
SendRequest
<
B
>
Connection
<
T
B
>
)
>
>
where
T
:
AsyncRead
+
AsyncWrite
+
Unpin
+
Send
+
'
static
B
:
HttpBody
+
'
static
B
:
:
Data
:
Send
B
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
{
let
opts
=
self
.
clone
(
)
;
async
move
{
trace
!
(
"
client
handshake
{
:
?
}
"
opts
.
version
)
;
let
(
tx
rx
)
=
dispatch
:
:
channel
(
)
;
let
proto
=
match
opts
.
version
{
#
[
cfg
(
feature
=
"
http1
"
)
]
Proto
:
:
Http1
=
>
{
let
mut
conn
=
proto
:
:
Conn
:
:
new
(
io
)
;
conn
.
set_h1_parser_config
(
opts
.
h1_parser_config
)
;
if
let
Some
(
writev
)
=
opts
.
h1_writev
{
if
writev
{
conn
.
set_write_strategy_queue
(
)
;
}
else
{
conn
.
set_write_strategy_flatten
(
)
;
}
}
if
opts
.
h1_title_case_headers
{
conn
.
set_title_case_headers
(
)
;
}
if
opts
.
h1_preserve_header_case
{
conn
.
set_preserve_header_case
(
)
;
}
#
[
cfg
(
feature
=
"
ffi
"
)
]
if
opts
.
h1_preserve_header_order
{
conn
.
set_preserve_header_order
(
)
;
}
if
opts
.
h09_responses
{
conn
.
set_h09_responses
(
)
;
}
#
[
cfg
(
feature
=
"
ffi
"
)
]
conn
.
set_raw_headers
(
opts
.
h1_headers_raw
)
;
if
let
Some
(
sz
)
=
opts
.
h1_read_buf_exact_size
{
conn
.
set_read_buf_exact_size
(
sz
)
;
}
if
let
Some
(
max
)
=
opts
.
h1_max_buf_size
{
conn
.
set_max_buf_size
(
max
)
;
}
let
cd
=
proto
:
:
h1
:
:
dispatch
:
:
Client
:
:
new
(
rx
)
;
let
dispatch
=
proto
:
:
h1
:
:
Dispatcher
:
:
new
(
cd
conn
)
;
ProtoClient
:
:
H1
{
h1
:
dispatch
}
}
#
[
cfg
(
feature
=
"
http2
"
)
]
Proto
:
:
Http2
=
>
{
let
h2
=
proto
:
:
h2
:
:
client
:
:
handshake
(
io
rx
&
opts
.
h2_builder
opts
.
exec
.
clone
(
)
)
.
await
?
;
ProtoClient
:
:
H2
{
h2
}
}
}
;
Ok
(
(
SendRequest
{
dispatch
:
tx
}
Connection
{
inner
:
Some
(
proto
)
}
)
)
}
}
}
impl
Future
for
ResponseFuture
{
type
Output
=
crate
:
:
Result
<
Response
<
Body
>
>
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
match
self
.
inner
{
ResponseFutureState
:
:
Waiting
(
ref
mut
rx
)
=
>
{
Pin
:
:
new
(
rx
)
.
poll
(
cx
)
.
map
(
|
res
|
match
res
{
Ok
(
Ok
(
resp
)
)
=
>
Ok
(
resp
)
Ok
(
Err
(
err
)
)
=
>
Err
(
err
)
Err
(
_canceled
)
=
>
panic
!
(
"
dispatch
dropped
without
returning
error
"
)
}
)
}
ResponseFutureState
:
:
Error
(
ref
mut
err
)
=
>
{
Poll
:
:
Ready
(
Err
(
err
.
take
(
)
.
expect
(
"
polled
after
ready
"
)
)
)
}
}
}
}
impl
fmt
:
:
Debug
for
ResponseFuture
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
ResponseFuture
"
)
.
finish
(
)
}
}
impl
<
T
B
>
Future
for
ProtoClient
<
T
B
>
where
T
:
AsyncRead
+
AsyncWrite
+
Send
+
Unpin
+
'
static
B
:
HttpBody
+
Send
+
'
static
B
:
:
Data
:
Send
B
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
{
type
Output
=
crate
:
:
Result
<
proto
:
:
Dispatched
>
;
fn
poll
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
match
self
.
project
(
)
{
#
[
cfg
(
feature
=
"
http1
"
)
]
ProtoClientProj
:
:
H1
{
h1
}
=
>
h1
.
poll
(
cx
)
#
[
cfg
(
feature
=
"
http2
"
)
]
ProtoClientProj
:
:
H2
{
h2
.
.
}
=
>
h2
.
poll
(
cx
)
#
[
cfg
(
not
(
feature
=
"
http1
"
)
)
]
ProtoClientProj
:
:
H1
{
h1
}
=
>
match
h1
.
0
{
}
#
[
cfg
(
not
(
feature
=
"
http2
"
)
)
]
ProtoClientProj
:
:
H2
{
h2
.
.
}
=
>
match
h2
.
0
{
}
}
}
}
trait
AssertSend
:
Send
{
}
trait
AssertSendSync
:
Send
+
Sync
{
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
#
[
doc
(
hidden
)
]
impl
<
B
:
Send
>
AssertSendSync
for
SendRequest
<
B
>
{
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
#
[
doc
(
hidden
)
]
impl
<
T
:
Send
B
:
Send
>
AssertSend
for
Connection
<
T
B
>
where
T
:
AsyncRead
+
AsyncWrite
+
Send
+
'
static
B
:
HttpBody
+
'
static
B
:
:
Data
:
Send
{
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
#
[
doc
(
hidden
)
]
impl
<
T
:
Send
+
Sync
B
:
Send
+
Sync
>
AssertSendSync
for
Connection
<
T
B
>
where
T
:
AsyncRead
+
AsyncWrite
+
Send
+
'
static
B
:
HttpBody
+
'
static
B
:
:
Data
:
Send
+
Sync
+
'
static
{
}
#
[
cfg_attr
(
feature
=
"
deprecated
"
allow
(
deprecated
)
)
]
#
[
doc
(
hidden
)
]
impl
AssertSendSync
for
Builder
{
}
#
[
doc
(
hidden
)
]
impl
AssertSend
for
ResponseFuture
{
}
