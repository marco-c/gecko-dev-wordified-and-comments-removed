#
!
[
allow
(
non_camel_case_types
)
]
#
!
[
allow
(
missing_debug_implementations
)
]
#
!
[
allow
(
unreachable_pub
)
]
#
[
cfg
(
not
(
all
(
feature
=
"
client
"
feature
=
"
http1
"
)
)
)
]
compile_error
!
(
"
The
ffi
feature
currently
requires
the
client
and
http1
features
.
"
)
;
#
[
cfg
(
not
(
hyper_unstable_ffi
)
)
]
compile_error
!
(
"
\
The
ffi
feature
is
unstable
and
requires
the
\
RUSTFLAGS
=
'
-
-
cfg
hyper_unstable_ffi
'
environment
variable
to
be
set
.
\
"
)
;
#
[
macro_use
]
mod
macros
;
mod
body
;
mod
client
;
mod
error
;
mod
http_types
;
mod
io
;
mod
task
;
pub
use
self
:
:
body
:
:
*
;
pub
use
self
:
:
client
:
:
*
;
pub
use
self
:
:
error
:
:
*
;
pub
use
self
:
:
http_types
:
:
*
;
pub
use
self
:
:
io
:
:
*
;
pub
use
self
:
:
task
:
:
*
;
pub
const
HYPER_ITER_CONTINUE
:
libc
:
:
c_int
=
0
;
#
[
allow
(
unused
)
]
pub
const
HYPER_ITER_BREAK
:
libc
:
:
c_int
=
1
;
pub
const
HYPER_HTTP_VERSION_NONE
:
libc
:
:
c_int
=
0
;
pub
const
HYPER_HTTP_VERSION_1_0
:
libc
:
:
c_int
=
10
;
pub
const
HYPER_HTTP_VERSION_1_1
:
libc
:
:
c_int
=
11
;
pub
const
HYPER_HTTP_VERSION_2
:
libc
:
:
c_int
=
20
;
struct
UserDataPointer
(
*
mut
std
:
:
ffi
:
:
c_void
)
;
unsafe
impl
Send
for
UserDataPointer
{
}
unsafe
impl
Sync
for
UserDataPointer
{
}
/
/
/
cbindgen
:
ignore
static
VERSION_CSTR
:
&
str
=
concat
!
(
env
!
(
"
CARGO_PKG_VERSION
"
)
"
\
0
"
)
;
ffi_fn
!
{
/
/
/
Returns
a
static
ASCII
(
null
terminated
)
string
of
the
hyper
version
.
fn
hyper_version
(
)
-
>
*
const
libc
:
:
c_char
{
VERSION_CSTR
.
as_ptr
(
)
as
_
}
?
=
std
:
:
ptr
:
:
null
(
)
}
