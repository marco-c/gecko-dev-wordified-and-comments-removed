#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
hyper
/
v0
.
10
.
13
"
)
]
#
!
[
cfg_attr
(
test
deny
(
missing_docs
)
)
]
#
!
[
cfg_attr
(
test
deny
(
warnings
)
)
]
#
!
[
cfg_attr
(
all
(
test
feature
=
"
nightly
"
)
feature
(
test
)
)
]
extern
crate
base64
;
extern
crate
time
;
#
[
macro_use
]
extern
crate
url
;
extern
crate
unicase
;
extern
crate
httparse
;
extern
crate
num_cpus
;
extern
crate
traitobject
;
extern
crate
typeable
;
#
[
cfg_attr
(
test
macro_use
)
]
extern
crate
language_tags
;
#
[
macro_use
]
extern
crate
mime
as
mime_crate
;
#
[
macro_use
]
extern
crate
log
;
#
[
cfg
(
all
(
test
feature
=
"
nightly
"
)
)
]
extern
crate
test
;
pub
use
url
:
:
Url
;
pub
use
client
:
:
Client
;
pub
use
error
:
:
{
Result
Error
}
;
pub
use
method
:
:
Method
:
:
{
Get
Head
Post
Delete
}
;
pub
use
status
:
:
StatusCode
:
:
{
Ok
BadRequest
NotFound
}
;
pub
use
server
:
:
Server
;
pub
use
language_tags
:
:
LanguageTag
;
macro_rules
!
todo
(
(
(
arg
:
tt
)
*
)
=
>
(
if
cfg
!
(
not
(
ndebug
)
)
{
trace
!
(
"
TODO
:
{
:
?
}
"
format_args
!
(
(
arg
)
*
)
)
}
)
)
;
#
[
cfg
(
test
)
]
#
[
macro_use
]
mod
mock
;
#
[
doc
(
hidden
)
]
pub
mod
buffer
;
pub
mod
client
;
pub
mod
error
;
pub
mod
method
;
pub
mod
header
;
pub
mod
http
;
pub
mod
net
;
pub
mod
server
;
pub
mod
status
;
pub
mod
uri
;
pub
mod
version
;
pub
mod
mime
{
pub
use
mime_crate
:
:
*
;
}
fn
_assert_types
(
)
{
fn
_assert_send
<
T
:
Send
>
(
)
{
}
fn
_assert_sync
<
T
:
Sync
>
(
)
{
}
_assert_send
:
:
<
Client
>
(
)
;
_assert_send
:
:
<
client
:
:
Request
<
net
:
:
Fresh
>
>
(
)
;
_assert_send
:
:
<
client
:
:
Response
>
(
)
;
_assert_send
:
:
<
error
:
:
Error
>
(
)
;
_assert_send
:
:
<
:
:
client
:
:
pool
:
:
Pool
<
:
:
net
:
:
DefaultConnector
>
>
(
)
;
_assert_sync
:
:
<
Client
>
(
)
;
_assert_sync
:
:
<
error
:
:
Error
>
(
)
;
_assert_sync
:
:
<
:
:
client
:
:
pool
:
:
Pool
<
:
:
net
:
:
DefaultConnector
>
>
(
)
;
}
