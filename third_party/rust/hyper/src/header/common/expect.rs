use
std
:
:
fmt
;
use
std
:
:
str
;
use
unicase
:
:
UniCase
;
use
header
:
:
{
Header
HeaderFormat
}
;
#
[
derive
(
Copy
Clone
PartialEq
Debug
)
]
pub
enum
Expect
{
Continue
}
const
EXPECT_CONTINUE
:
UniCase
<
&
'
static
str
>
=
UniCase
(
"
100
-
continue
"
)
;
impl
Header
for
Expect
{
fn
header_name
(
)
-
>
&
'
static
str
{
"
Expect
"
}
fn
parse_header
(
raw
:
&
[
Vec
<
u8
>
]
)
-
>
:
:
Result
<
Expect
>
{
if
raw
.
len
(
)
=
=
1
{
let
text
=
unsafe
{
str
:
:
from_utf8_unchecked
(
raw
.
get_unchecked
(
0
)
)
}
;
if
UniCase
(
text
)
=
=
EXPECT_CONTINUE
{
Ok
(
Expect
:
:
Continue
)
}
else
{
Err
(
:
:
Error
:
:
Header
)
}
}
else
{
Err
(
:
:
Error
:
:
Header
)
}
}
}
impl
HeaderFormat
for
Expect
{
fn
fmt_header
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
:
:
Display
:
:
fmt
(
self
f
)
}
}
impl
fmt
:
:
Display
for
Expect
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
"
100
-
continue
"
)
}
}
