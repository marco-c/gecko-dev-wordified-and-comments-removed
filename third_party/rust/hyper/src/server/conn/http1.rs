use
std
:
:
error
:
:
Error
as
StdError
;
use
std
:
:
fmt
;
use
std
:
:
future
:
:
Future
;
use
std
:
:
marker
:
:
Unpin
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
use
std
:
:
time
:
:
Duration
;
use
bytes
:
:
Bytes
;
use
tokio
:
:
io
:
:
{
AsyncRead
AsyncWrite
}
;
use
crate
:
:
body
:
:
{
Body
as
IncomingBody
HttpBody
as
Body
}
;
use
crate
:
:
proto
;
use
crate
:
:
service
:
:
HttpService
;
type
Http1Dispatcher
<
T
B
S
>
=
proto
:
:
h1
:
:
Dispatcher
<
proto
:
:
h1
:
:
dispatch
:
:
Server
<
S
IncomingBody
>
B
T
proto
:
:
ServerTransaction
>
;
pin_project_lite
:
:
pin_project
!
{
/
/
/
A
future
binding
an
http1
connection
with
a
Service
.
/
/
/
/
/
/
Polling
this
future
will
drive
HTTP
forward
.
#
[
must_use
=
"
futures
do
nothing
unless
polled
"
]
pub
struct
Connection
<
T
S
>
where
S
:
HttpService
<
IncomingBody
>
{
conn
:
Http1Dispatcher
<
T
S
:
:
ResBody
S
>
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
Builder
{
h1_half_close
:
bool
h1_keep_alive
:
bool
h1_title_case_headers
:
bool
h1_preserve_header_case
:
bool
h1_header_read_timeout
:
Option
<
Duration
>
h1_writev
:
Option
<
bool
>
max_buf_size
:
Option
<
usize
>
pipeline_flush
:
bool
}
#
[
derive
(
Debug
)
]
pub
struct
Parts
<
T
S
>
{
pub
io
:
T
pub
read_buf
:
Bytes
pub
service
:
S
_inner
:
(
)
}
impl
<
I
S
>
fmt
:
:
Debug
for
Connection
<
I
S
>
where
S
:
HttpService
<
IncomingBody
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
Connection
"
)
.
finish
(
)
}
}
impl
<
I
B
S
>
Connection
<
I
S
>
where
S
:
HttpService
<
IncomingBody
ResBody
=
B
>
S
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
I
:
AsyncRead
+
AsyncWrite
+
Unpin
B
:
Body
+
'
static
B
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
{
pub
fn
graceful_shutdown
(
mut
self
:
Pin
<
&
mut
Self
>
)
{
self
.
conn
.
disable_keep_alive
(
)
;
}
pub
fn
into_parts
(
self
)
-
>
Parts
<
I
S
>
{
let
(
io
read_buf
dispatch
)
=
self
.
conn
.
into_inner
(
)
;
Parts
{
io
read_buf
service
:
dispatch
.
into_service
(
)
_inner
:
(
)
}
}
pub
fn
poll_without_shutdown
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
crate
:
:
Result
<
(
)
>
>
where
S
:
Unpin
S
:
:
Future
:
Unpin
B
:
Unpin
{
self
.
conn
.
poll_without_shutdown
(
cx
)
}
pub
fn
without_shutdown
(
self
)
-
>
impl
Future
<
Output
=
crate
:
:
Result
<
Parts
<
I
S
>
>
>
where
S
:
Unpin
S
:
:
Future
:
Unpin
B
:
Unpin
{
let
mut
zelf
=
Some
(
self
)
;
futures_util
:
:
future
:
:
poll_fn
(
move
|
cx
|
{
ready
!
(
zelf
.
as_mut
(
)
.
unwrap
(
)
.
conn
.
poll_without_shutdown
(
cx
)
)
?
;
Poll
:
:
Ready
(
Ok
(
zelf
.
take
(
)
.
unwrap
(
)
.
into_parts
(
)
)
)
}
)
}
pub
fn
with_upgrades
(
self
)
-
>
upgrades
:
:
UpgradeableConnection
<
I
S
>
where
I
:
Send
{
upgrades
:
:
UpgradeableConnection
{
inner
:
Some
(
self
)
}
}
}
impl
<
I
B
S
>
Future
for
Connection
<
I
S
>
where
S
:
HttpService
<
IncomingBody
ResBody
=
B
>
S
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
I
:
AsyncRead
+
AsyncWrite
+
Unpin
+
'
static
B
:
Body
+
'
static
B
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
{
type
Output
=
crate
:
:
Result
<
(
)
>
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
match
ready
!
(
Pin
:
:
new
(
&
mut
self
.
conn
)
.
poll
(
cx
)
)
{
Ok
(
done
)
=
>
{
match
done
{
proto
:
:
Dispatched
:
:
Shutdown
=
>
{
}
proto
:
:
Dispatched
:
:
Upgrade
(
pending
)
=
>
{
pending
.
manual
(
)
;
}
}
;
return
Poll
:
:
Ready
(
Ok
(
(
)
)
)
;
}
Err
(
e
)
=
>
Poll
:
:
Ready
(
Err
(
e
)
)
}
}
}
impl
Builder
{
pub
fn
new
(
)
-
>
Self
{
Self
{
h1_half_close
:
false
h1_keep_alive
:
true
h1_title_case_headers
:
false
h1_preserve_header_case
:
false
h1_header_read_timeout
:
None
h1_writev
:
None
max_buf_size
:
None
pipeline_flush
:
false
}
}
pub
fn
half_close
(
&
mut
self
val
:
bool
)
-
>
&
mut
Self
{
self
.
h1_half_close
=
val
;
self
}
pub
fn
keep_alive
(
&
mut
self
val
:
bool
)
-
>
&
mut
Self
{
self
.
h1_keep_alive
=
val
;
self
}
pub
fn
title_case_headers
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Self
{
self
.
h1_title_case_headers
=
enabled
;
self
}
pub
fn
preserve_header_case
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Self
{
self
.
h1_preserve_header_case
=
enabled
;
self
}
pub
fn
header_read_timeout
(
&
mut
self
read_timeout
:
Duration
)
-
>
&
mut
Self
{
self
.
h1_header_read_timeout
=
Some
(
read_timeout
)
;
self
}
pub
fn
writev
(
&
mut
self
val
:
bool
)
-
>
&
mut
Self
{
self
.
h1_writev
=
Some
(
val
)
;
self
}
pub
fn
max_buf_size
(
&
mut
self
max
:
usize
)
-
>
&
mut
Self
{
assert
!
(
max
>
=
proto
:
:
h1
:
:
MINIMUM_MAX_BUFFER_SIZE
"
the
max_buf_size
cannot
be
smaller
than
the
minimum
that
h1
specifies
.
"
)
;
self
.
max_buf_size
=
Some
(
max
)
;
self
}
pub
fn
pipeline_flush
(
&
mut
self
enabled
:
bool
)
-
>
&
mut
Self
{
self
.
pipeline_flush
=
enabled
;
self
}
pub
fn
serve_connection
<
I
S
>
(
&
self
io
:
I
service
:
S
)
-
>
Connection
<
I
S
>
where
S
:
HttpService
<
IncomingBody
>
S
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
S
:
:
ResBody
:
'
static
<
S
:
:
ResBody
as
Body
>
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
I
:
AsyncRead
+
AsyncWrite
+
Unpin
{
let
mut
conn
=
proto
:
:
Conn
:
:
new
(
io
)
;
if
!
self
.
h1_keep_alive
{
conn
.
disable_keep_alive
(
)
;
}
if
self
.
h1_half_close
{
conn
.
set_allow_half_close
(
)
;
}
if
self
.
h1_title_case_headers
{
conn
.
set_title_case_headers
(
)
;
}
if
self
.
h1_preserve_header_case
{
conn
.
set_preserve_header_case
(
)
;
}
if
let
Some
(
header_read_timeout
)
=
self
.
h1_header_read_timeout
{
conn
.
set_http1_header_read_timeout
(
header_read_timeout
)
;
}
if
let
Some
(
writev
)
=
self
.
h1_writev
{
if
writev
{
conn
.
set_write_strategy_queue
(
)
;
}
else
{
conn
.
set_write_strategy_flatten
(
)
;
}
}
conn
.
set_flush_pipeline
(
self
.
pipeline_flush
)
;
if
let
Some
(
max
)
=
self
.
max_buf_size
{
conn
.
set_max_buf_size
(
max
)
;
}
let
sd
=
proto
:
:
h1
:
:
dispatch
:
:
Server
:
:
new
(
service
)
;
let
proto
=
proto
:
:
h1
:
:
Dispatcher
:
:
new
(
sd
conn
)
;
Connection
{
conn
:
proto
}
}
}
mod
upgrades
{
use
crate
:
:
upgrade
:
:
Upgraded
;
use
super
:
:
*
;
#
[
must_use
=
"
futures
do
nothing
unless
polled
"
]
#
[
allow
(
missing_debug_implementations
)
]
pub
struct
UpgradeableConnection
<
T
S
>
where
S
:
HttpService
<
IncomingBody
>
{
pub
(
super
)
inner
:
Option
<
Connection
<
T
S
>
>
}
impl
<
I
B
S
>
UpgradeableConnection
<
I
S
>
where
S
:
HttpService
<
IncomingBody
ResBody
=
B
>
S
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
I
:
AsyncRead
+
AsyncWrite
+
Unpin
B
:
Body
+
'
static
B
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
{
pub
fn
graceful_shutdown
(
mut
self
:
Pin
<
&
mut
Self
>
)
{
Pin
:
:
new
(
self
.
inner
.
as_mut
(
)
.
unwrap
(
)
)
.
graceful_shutdown
(
)
}
}
impl
<
I
B
S
>
Future
for
UpgradeableConnection
<
I
S
>
where
S
:
HttpService
<
IncomingBody
ResBody
=
B
>
S
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
I
:
AsyncRead
+
AsyncWrite
+
Unpin
+
Send
+
'
static
B
:
Body
+
'
static
B
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
{
type
Output
=
crate
:
:
Result
<
(
)
>
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
match
ready
!
(
Pin
:
:
new
(
&
mut
self
.
inner
.
as_mut
(
)
.
unwrap
(
)
.
conn
)
.
poll
(
cx
)
)
{
Ok
(
proto
:
:
Dispatched
:
:
Shutdown
)
=
>
Poll
:
:
Ready
(
Ok
(
(
)
)
)
Ok
(
proto
:
:
Dispatched
:
:
Upgrade
(
pending
)
)
=
>
{
let
(
io
buf
_
)
=
self
.
inner
.
take
(
)
.
unwrap
(
)
.
conn
.
into_inner
(
)
;
pending
.
fulfill
(
Upgraded
:
:
new
(
io
buf
)
)
;
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
Err
(
e
)
=
>
Poll
:
:
Ready
(
Err
(
e
)
)
}
}
}
}
