use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
#
[
cfg
(
feature
=
"
stream
"
)
]
use
futures_core
:
:
Stream
;
#
[
cfg
(
feature
=
"
stream
"
)
]
use
pin_project_lite
:
:
pin_project
;
pub
trait
Accept
{
type
Conn
;
type
Error
;
fn
poll_accept
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Result
<
Self
:
:
Conn
Self
:
:
Error
>
>
>
;
}
pub
fn
poll_fn
<
F
IO
E
>
(
func
:
F
)
-
>
impl
Accept
<
Conn
=
IO
Error
=
E
>
where
F
:
FnMut
(
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Result
<
IO
E
>
>
>
{
struct
PollFn
<
F
>
(
F
)
;
impl
<
F
>
Unpin
for
PollFn
<
F
>
{
}
impl
<
F
IO
E
>
Accept
for
PollFn
<
F
>
where
F
:
FnMut
(
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Result
<
IO
E
>
>
>
{
type
Conn
=
IO
;
type
Error
=
E
;
fn
poll_accept
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Result
<
Self
:
:
Conn
Self
:
:
Error
>
>
>
{
(
self
.
get_mut
(
)
.
0
)
(
cx
)
}
}
PollFn
(
func
)
}
#
[
cfg
(
feature
=
"
stream
"
)
]
pub
fn
from_stream
<
S
IO
E
>
(
stream
:
S
)
-
>
impl
Accept
<
Conn
=
IO
Error
=
E
>
where
S
:
Stream
<
Item
=
Result
<
IO
E
>
>
{
pin_project
!
{
struct
FromStream
<
S
>
{
#
[
pin
]
stream
:
S
}
}
impl
<
S
IO
E
>
Accept
for
FromStream
<
S
>
where
S
:
Stream
<
Item
=
Result
<
IO
E
>
>
{
type
Conn
=
IO
;
type
Error
=
E
;
fn
poll_accept
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Result
<
Self
:
:
Conn
Self
:
:
Error
>
>
>
{
self
.
project
(
)
.
stream
.
poll_next
(
cx
)
}
}
FromStream
{
stream
}
}
