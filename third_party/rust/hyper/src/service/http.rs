use
std
:
:
error
:
:
Error
as
StdError
;
use
crate
:
:
body
:
:
Payload
;
use
crate
:
:
common
:
:
{
task
Future
Poll
}
;
use
crate
:
:
{
Request
Response
}
;
pub
trait
HttpService
<
ReqBody
>
:
sealed
:
:
Sealed
<
ReqBody
>
{
type
ResBody
:
Payload
;
type
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
;
type
Future
:
Future
<
Output
=
Result
<
Response
<
Self
:
:
ResBody
>
Self
:
:
Error
>
>
;
#
[
doc
(
hidden
)
]
fn
poll_ready
(
&
mut
self
cx
:
&
mut
task
:
:
Context
<
'
_
>
)
-
>
Poll
<
Result
<
(
)
Self
:
:
Error
>
>
;
#
[
doc
(
hidden
)
]
fn
call
(
&
mut
self
req
:
Request
<
ReqBody
>
)
-
>
Self
:
:
Future
;
}
impl
<
T
B1
B2
>
HttpService
<
B1
>
for
T
where
T
:
tower_service
:
:
Service
<
Request
<
B1
>
Response
=
Response
<
B2
>
>
B2
:
Payload
T
:
:
Error
:
Into
<
Box
<
dyn
StdError
+
Send
+
Sync
>
>
{
type
ResBody
=
B2
;
type
Error
=
T
:
:
Error
;
type
Future
=
T
:
:
Future
;
fn
poll_ready
(
&
mut
self
cx
:
&
mut
task
:
:
Context
<
'
_
>
)
-
>
Poll
<
Result
<
(
)
Self
:
:
Error
>
>
{
tower_service
:
:
Service
:
:
poll_ready
(
self
cx
)
}
fn
call
(
&
mut
self
req
:
Request
<
B1
>
)
-
>
Self
:
:
Future
{
tower_service
:
:
Service
:
:
call
(
self
req
)
}
}
impl
<
T
B1
B2
>
sealed
:
:
Sealed
<
B1
>
for
T
where
T
:
tower_service
:
:
Service
<
Request
<
B1
>
Response
=
Response
<
B2
>
>
B2
:
Payload
{
}
mod
sealed
{
pub
trait
Sealed
<
T
>
{
}
}
