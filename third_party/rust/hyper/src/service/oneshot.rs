use
std
:
:
marker
:
:
Unpin
;
use
std
:
:
mem
;
use
tower_service
:
:
Service
;
use
crate
:
:
common
:
:
{
task
Future
Pin
Poll
}
;
pub
(
crate
)
fn
oneshot
<
S
Req
>
(
svc
:
S
req
:
Req
)
-
>
Oneshot
<
S
Req
>
where
S
:
Service
<
Req
>
{
Oneshot
{
state
:
State
:
:
NotReady
(
svc
req
)
}
}
#
[
allow
(
missing_debug_implementations
)
]
pub
struct
Oneshot
<
S
:
Service
<
Req
>
Req
>
{
state
:
State
<
S
Req
>
}
enum
State
<
S
:
Service
<
Req
>
Req
>
{
NotReady
(
S
Req
)
Called
(
S
:
:
Future
)
Tmp
}
impl
<
S
Req
>
Unpin
for
Oneshot
<
S
Req
>
where
S
:
Service
<
Req
>
S
:
:
Future
:
Unpin
{
}
impl
<
S
Req
>
Future
for
Oneshot
<
S
Req
>
where
S
:
Service
<
Req
>
{
type
Output
=
Result
<
S
:
:
Response
S
:
:
Error
>
;
fn
poll
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
task
:
:
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
let
mut
me
=
unsafe
{
Pin
:
:
get_unchecked_mut
(
self
)
}
;
loop
{
match
me
.
state
{
State
:
:
NotReady
(
ref
mut
svc
_
)
=
>
{
ready
!
(
svc
.
poll_ready
(
cx
)
)
?
;
}
State
:
:
Called
(
ref
mut
fut
)
=
>
{
return
unsafe
{
Pin
:
:
new_unchecked
(
fut
)
}
.
poll
(
cx
)
;
}
State
:
:
Tmp
=
>
unreachable
!
(
)
}
match
mem
:
:
replace
(
&
mut
me
.
state
State
:
:
Tmp
)
{
State
:
:
NotReady
(
mut
svc
req
)
=
>
{
me
.
state
=
State
:
:
Called
(
svc
.
call
(
req
)
)
;
}
_
=
>
unreachable
!
(
)
}
}
}
}
