use
std
:
:
error
:
:
Error
as
StdError
;
use
futures
:
:
{
Future
IntoFuture
}
;
use
body
:
:
Payload
;
use
super
:
:
{
MakeService
Service
}
;
pub
trait
NewService
{
type
ReqBody
:
Payload
;
type
ResBody
:
Payload
;
type
Error
:
Into
<
Box
<
StdError
+
Send
+
Sync
>
>
;
type
Service
:
Service
<
ReqBody
=
Self
:
:
ReqBody
ResBody
=
Self
:
:
ResBody
Error
=
Self
:
:
Error
>
;
type
Future
:
Future
<
Item
=
Self
:
:
Service
Error
=
Self
:
:
InitError
>
;
type
InitError
:
Into
<
Box
<
StdError
+
Send
+
Sync
>
>
;
fn
new_service
(
&
self
)
-
>
Self
:
:
Future
;
}
impl
<
F
R
S
>
NewService
for
F
where
F
:
Fn
(
)
-
>
R
R
:
IntoFuture
<
Item
=
S
>
R
:
:
Error
:
Into
<
Box
<
StdError
+
Send
+
Sync
>
>
S
:
Service
{
type
ReqBody
=
S
:
:
ReqBody
;
type
ResBody
=
S
:
:
ResBody
;
type
Error
=
S
:
:
Error
;
type
Service
=
S
;
type
Future
=
R
:
:
Future
;
type
InitError
=
R
:
:
Error
;
fn
new_service
(
&
self
)
-
>
Self
:
:
Future
{
(
*
self
)
(
)
.
into_future
(
)
}
}
impl
<
N
Ctx
>
MakeService
<
Ctx
>
for
N
where
N
:
NewService
{
type
ReqBody
=
N
:
:
ReqBody
;
type
ResBody
=
N
:
:
ResBody
;
type
Error
=
N
:
:
Error
;
type
Service
=
N
:
:
Service
;
type
Future
=
N
:
:
Future
;
type
MakeError
=
N
:
:
InitError
;
fn
make_service
(
&
mut
self
_
:
Ctx
)
-
>
Self
:
:
Future
{
self
.
new_service
(
)
}
}
