#
!
[
allow
(
dead_code
unused_imports
unused_parens
unknown_lints
renamed_and_removed_lints
)
]
#
!
[
allow
(
clippy
:
:
no_effect
clippy
:
:
needless_lifetimes
)
]
use
pin_project
:
:
pin_project
;
struct
Struct
<
T
U
>
{
pinned
:
T
unpinned
:
U
}
#
[
doc
(
hidden
)
]
#
[
allow
(
dead_code
)
]
#
[
allow
(
single_use_lifetimes
)
]
#
[
allow
(
clippy
:
:
mut_mut
)
]
#
[
allow
(
clippy
:
:
type_repetition_in_bounds
)
]
struct
__StructProjection
<
'
pin
T
U
>
where
Struct
<
T
U
>
:
'
pin
{
pinned
:
:
:
pin_project
:
:
__private
:
:
Pin
<
&
'
pin
mut
(
T
)
>
unpinned
:
&
'
pin
mut
(
U
)
}
#
[
doc
(
hidden
)
]
#
[
allow
(
dead_code
)
]
#
[
allow
(
single_use_lifetimes
)
]
#
[
allow
(
clippy
:
:
type_repetition_in_bounds
)
]
struct
__StructProjectionRef
<
'
pin
T
U
>
where
Struct
<
T
U
>
:
'
pin
{
pinned
:
:
:
pin_project
:
:
__private
:
:
Pin
<
&
'
pin
(
T
)
>
unpinned
:
&
'
pin
(
U
)
}
#
[
doc
(
hidden
)
]
#
[
allow
(
dead_code
)
]
#
[
allow
(
unreachable_pub
)
]
#
[
allow
(
single_use_lifetimes
)
]
struct
__StructProjectionOwned
<
T
U
>
{
pinned
:
:
:
pin_project
:
:
__private
:
:
PhantomData
<
T
>
unpinned
:
U
}
#
[
doc
(
hidden
)
]
#
[
allow
(
non_upper_case_globals
)
]
#
[
allow
(
single_use_lifetimes
)
]
#
[
allow
(
clippy
:
:
used_underscore_binding
)
]
const
_
:
(
)
=
{
impl
<
T
U
>
Struct
<
T
U
>
{
fn
project
<
'
pin
>
(
self
:
:
:
pin_project
:
:
__private
:
:
Pin
<
&
'
pin
mut
Self
>
)
-
>
__StructProjection
<
'
pin
T
U
>
{
unsafe
{
let
Self
{
pinned
unpinned
}
=
self
.
get_unchecked_mut
(
)
;
__StructProjection
{
pinned
:
:
:
pin_project
:
:
__private
:
:
Pin
:
:
new_unchecked
(
pinned
)
unpinned
}
}
}
fn
project_ref
<
'
pin
>
(
self
:
:
:
pin_project
:
:
__private
:
:
Pin
<
&
'
pin
Self
>
)
-
>
__StructProjectionRef
<
'
pin
T
U
>
{
unsafe
{
let
Self
{
pinned
unpinned
}
=
self
.
get_ref
(
)
;
__StructProjectionRef
{
pinned
:
:
:
pin_project
:
:
__private
:
:
Pin
:
:
new_unchecked
(
pinned
)
unpinned
}
}
}
fn
project_replace
(
self
:
:
:
pin_project
:
:
__private
:
:
Pin
<
&
mut
Self
>
__replacement
:
Self
)
-
>
__StructProjectionOwned
<
T
U
>
{
unsafe
{
let
__self_ptr
:
*
mut
Self
=
self
.
get_unchecked_mut
(
)
;
let
Self
{
pinned
unpinned
}
=
&
mut
*
__self_ptr
;
let
__result
=
__StructProjectionOwned
{
pinned
:
:
:
pin_project
:
:
__private
:
:
PhantomData
unpinned
:
:
:
pin_project
:
:
__private
:
:
ptr
:
:
read
(
unpinned
)
}
;
let
__guard
=
:
:
pin_project
:
:
__private
:
:
UnsafeOverwriteGuard
{
target
:
__self_ptr
value
:
:
:
pin_project
:
:
__private
:
:
ManuallyDrop
:
:
new
(
__replacement
)
}
;
{
let
__guard
=
:
:
pin_project
:
:
__private
:
:
UnsafeDropInPlaceGuard
(
pinned
)
;
}
__result
}
}
}
struct
__Struct
<
'
pin
T
U
>
{
__pin_project_use_generics
:
:
:
pin_project
:
:
__private
:
:
AlwaysUnpin
<
'
pin
(
:
:
pin_project
:
:
__private
:
:
PhantomData
<
T
>
:
:
pin_project
:
:
__private
:
:
PhantomData
<
U
>
)
>
__field0
:
T
}
impl
<
'
pin
T
U
>
:
:
pin_project
:
:
__private
:
:
Unpin
for
Struct
<
T
U
>
where
__Struct
<
'
pin
T
U
>
:
:
:
pin_project
:
:
__private
:
:
Unpin
{
}
unsafe
impl
<
T
U
>
:
:
pin_project
:
:
UnsafeUnpin
for
Struct
<
T
U
>
{
}
trait
StructMustNotImplDrop
{
}
#
[
allow
(
clippy
:
:
drop_bounds
drop_bounds
)
]
impl
<
T
:
:
:
pin_project
:
:
__private
:
:
Drop
>
StructMustNotImplDrop
for
T
{
}
impl
<
T
U
>
StructMustNotImplDrop
for
Struct
<
T
U
>
{
}
impl
<
T
U
>
:
:
pin_project
:
:
__private
:
:
PinnedDrop
for
Struct
<
T
U
>
{
unsafe
fn
drop
(
self
:
:
:
pin_project
:
:
__private
:
:
Pin
<
&
mut
Self
>
)
{
}
}
#
[
forbid
(
unaligned_references
safe_packed_borrows
)
]
fn
__assert_not_repr_packed
<
T
U
>
(
this
:
&
Struct
<
T
U
>
)
{
let
_
=
&
this
.
pinned
;
let
_
=
&
this
.
unpinned
;
}
}
;
fn
main
(
)
{
}
