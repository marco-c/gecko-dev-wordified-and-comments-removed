#
!
[
allow
(
dead_code
unused_imports
unused_parens
unknown_lints
renamed_and_removed_lints
)
]
#
!
[
allow
(
clippy
:
:
needless_lifetimes
clippy
:
:
just_underscores_and_digits
clippy
:
:
used_underscore_binding
)
]
use
pin_project
:
:
pin_project
;
enum
Enum
<
T
U
>
{
Pinned
(
T
)
Unpinned
(
U
)
}
enum
EnumProj
<
'
pin
T
U
>
where
Enum
<
T
U
>
:
'
pin
{
Pinned
(
:
:
pin_project
:
:
__private
:
:
Pin
<
&
'
pin
mut
(
T
)
>
)
Unpinned
(
&
'
pin
mut
(
U
)
)
}
const
_
:
(
)
=
{
impl
<
T
U
>
Enum
<
T
U
>
{
fn
project
<
'
pin
>
(
self
:
:
:
pin_project
:
:
__private
:
:
Pin
<
&
'
pin
mut
Self
>
)
-
>
EnumProj
<
'
pin
T
U
>
{
unsafe
{
match
self
.
get_unchecked_mut
(
)
{
Self
:
:
Pinned
(
_0
)
=
>
{
EnumProj
:
:
Pinned
(
:
:
pin_project
:
:
__private
:
:
Pin
:
:
new_unchecked
(
_0
)
)
}
Self
:
:
Unpinned
(
_0
)
=
>
EnumProj
:
:
Unpinned
(
_0
)
}
}
}
}
struct
__Enum
<
'
pin
T
U
>
{
__pin_project_use_generics
:
:
:
pin_project
:
:
__private
:
:
AlwaysUnpin
<
'
pin
(
:
:
pin_project
:
:
__private
:
:
PhantomData
<
T
>
:
:
pin_project
:
:
__private
:
:
PhantomData
<
U
>
)
>
__field0
:
T
}
impl
<
'
pin
T
U
>
:
:
pin_project
:
:
__private
:
:
Unpin
for
Enum
<
T
U
>
where
__Enum
<
'
pin
T
U
>
:
:
:
pin_project
:
:
__private
:
:
Unpin
{
}
#
[
doc
(
hidden
)
]
unsafe
impl
<
'
pin
T
U
>
:
:
pin_project
:
:
UnsafeUnpin
for
Enum
<
T
U
>
where
__Enum
<
'
pin
T
U
>
:
:
:
pin_project
:
:
__private
:
:
Unpin
{
}
trait
EnumMustNotImplDrop
{
}
#
[
allow
(
clippy
:
:
drop_bounds
drop_bounds
)
]
impl
<
T
:
:
:
pin_project
:
:
__private
:
:
Drop
>
EnumMustNotImplDrop
for
T
{
}
impl
<
T
U
>
EnumMustNotImplDrop
for
Enum
<
T
U
>
{
}
#
[
doc
(
hidden
)
]
impl
<
T
U
>
:
:
pin_project
:
:
__private
:
:
PinnedDrop
for
Enum
<
T
U
>
{
unsafe
fn
drop
(
self
:
:
:
pin_project
:
:
__private
:
:
Pin
<
&
mut
Self
>
)
{
}
}
}
;
fn
main
(
)
{
}
