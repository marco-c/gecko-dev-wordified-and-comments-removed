#
!
[
allow
(
dead_code
unused_imports
unused_parens
unknown_lints
renamed_and_removed_lints
)
]
#
!
[
allow
(
clippy
:
:
no_effect
clippy
:
:
needless_lifetimes
)
]
use
std
:
:
pin
:
:
Pin
;
use
pin_project
:
:
{
pin_project
pinned_drop
}
;
pub
struct
Struct
<
'
a
T
>
{
was_dropped
:
&
'
a
mut
bool
field
:
T
}
#
[
doc
(
hidden
)
]
#
[
allow
(
dead_code
)
]
#
[
allow
(
single_use_lifetimes
)
]
#
[
allow
(
clippy
:
:
mut_mut
)
]
#
[
allow
(
clippy
:
:
type_repetition_in_bounds
)
]
pub
(
crate
)
struct
__StructProjection
<
'
pin
'
a
T
>
where
Struct
<
'
a
T
>
:
'
pin
{
was_dropped
:
&
'
pin
mut
(
&
'
a
mut
bool
)
field
:
:
:
pin_project
:
:
__private
:
:
Pin
<
&
'
pin
mut
(
T
)
>
}
#
[
doc
(
hidden
)
]
#
[
allow
(
dead_code
)
]
#
[
allow
(
single_use_lifetimes
)
]
#
[
allow
(
clippy
:
:
type_repetition_in_bounds
)
]
pub
(
crate
)
struct
__StructProjectionRef
<
'
pin
'
a
T
>
where
Struct
<
'
a
T
>
:
'
pin
{
was_dropped
:
&
'
pin
(
&
'
a
mut
bool
)
field
:
:
:
pin_project
:
:
__private
:
:
Pin
<
&
'
pin
(
T
)
>
}
#
[
doc
(
hidden
)
]
#
[
allow
(
non_upper_case_globals
)
]
#
[
allow
(
single_use_lifetimes
)
]
#
[
allow
(
clippy
:
:
used_underscore_binding
)
]
const
_
:
(
)
=
{
impl
<
'
a
T
>
Struct
<
'
a
T
>
{
pub
(
crate
)
fn
project
<
'
pin
>
(
self
:
:
:
pin_project
:
:
__private
:
:
Pin
<
&
'
pin
mut
Self
>
)
-
>
__StructProjection
<
'
pin
'
a
T
>
{
unsafe
{
let
Self
{
was_dropped
field
}
=
self
.
get_unchecked_mut
(
)
;
__StructProjection
{
was_dropped
field
:
:
:
pin_project
:
:
__private
:
:
Pin
:
:
new_unchecked
(
field
)
}
}
}
pub
(
crate
)
fn
project_ref
<
'
pin
>
(
self
:
:
:
pin_project
:
:
__private
:
:
Pin
<
&
'
pin
Self
>
)
-
>
__StructProjectionRef
<
'
pin
'
a
T
>
{
unsafe
{
let
Self
{
was_dropped
field
}
=
self
.
get_ref
(
)
;
__StructProjectionRef
{
was_dropped
field
:
:
:
pin_project
:
:
__private
:
:
Pin
:
:
new_unchecked
(
field
)
}
}
}
}
impl
<
'
a
T
>
:
:
pin_project
:
:
__private
:
:
Drop
for
Struct
<
'
a
T
>
{
fn
drop
(
&
mut
self
)
{
let
pinned_self
=
unsafe
{
:
:
pin_project
:
:
__private
:
:
Pin
:
:
new_unchecked
(
self
)
}
;
unsafe
{
:
:
pin_project
:
:
__private
:
:
PinnedDrop
:
:
drop
(
pinned_self
)
;
}
}
}
pub
struct
__Struct
<
'
pin
'
a
T
>
{
__pin_project_use_generics
:
:
:
pin_project
:
:
__private
:
:
AlwaysUnpin
<
'
pin
(
T
)
>
__field0
:
T
__lifetime0
:
&
'
a
(
)
}
impl
<
'
pin
'
a
T
>
:
:
pin_project
:
:
__private
:
:
Unpin
for
Struct
<
'
a
T
>
where
__Struct
<
'
pin
'
a
T
>
:
:
:
pin_project
:
:
__private
:
:
Unpin
{
}
unsafe
impl
<
'
a
T
>
:
:
pin_project
:
:
UnsafeUnpin
for
Struct
<
'
a
T
>
{
}
#
[
forbid
(
unaligned_references
safe_packed_borrows
)
]
fn
__assert_not_repr_packed
<
'
a
T
>
(
this
:
&
Struct
<
'
a
T
>
)
{
let
_
=
&
this
.
was_dropped
;
let
_
=
&
this
.
field
;
}
}
;
impl
<
T
>
:
:
pin_project
:
:
__private
:
:
PinnedDrop
for
Struct
<
'
_
T
>
{
unsafe
fn
drop
(
self
:
Pin
<
&
mut
Self
>
)
{
#
[
allow
(
clippy
:
:
needless_pass_by_value
)
]
fn
__drop_inner
<
T
>
(
__self
:
Pin
<
&
mut
Struct
<
'
_
T
>
>
)
{
fn
__drop_inner
(
)
{
}
*
*
__self
.
project
(
)
.
was_dropped
=
true
;
}
__drop_inner
(
self
)
;
}
}
fn
main
(
)
{
}
