use
std
:
:
{
marker
:
:
PhantomPinned
pin
:
:
Pin
}
;
use
auxiliary_macro
:
:
remove_attr
;
use
pin_project
:
:
pin_project
;
fn
is_unpin
<
T
:
Unpin
>
(
)
{
}
#
[
pin_project
]
#
[
remove_attr
(
struct_all
)
]
struct
A
{
#
[
pin
]
f
:
PhantomPinned
}
#
[
remove_attr
(
struct_all
)
]
#
[
pin_project
]
struct
B
{
#
[
pin
]
f
:
PhantomPinned
}
#
[
pin_project
]
#
[
remove_attr
(
struct_pin
)
]
struct
C
{
f
:
PhantomPinned
}
#
[
remove_attr
(
struct_pin
)
]
#
[
pin_project
]
struct
D
{
f
:
PhantomPinned
}
fn
main
(
)
{
is_unpin
:
:
<
A
>
(
)
;
is_unpin
:
:
<
B
>
(
)
;
is_unpin
:
:
<
D
>
(
)
;
let
mut
x
=
A
{
f
:
PhantomPinned
}
;
let
_
=
Pin
:
:
new
(
&
mut
x
)
.
project
(
)
;
let
mut
x
=
B
{
f
:
PhantomPinned
}
;
let
_
=
Pin
:
:
new
(
&
mut
x
)
.
project
(
)
;
let
mut
x
=
D
{
f
:
PhantomPinned
}
;
let
_
=
Pin
:
:
new
(
&
mut
x
)
.
project
(
)
;
}
