#
!
[
warn
(
rust_2018_idioms
single_use_lifetimes
)
]
#
!
[
allow
(
unknown_lints
renamed_and_removed_lints
)
]
#
!
[
forbid
(
unaligned_references
safe_packed_borrows
)
]
use
std
:
:
cell
:
:
Cell
;
#
[
test
]
fn
weird_repr_packed
(
)
{
thread_local
!
{
static
FIELD_ADDR
:
Cell
<
usize
>
=
Cell
:
:
new
(
0
)
;
}
#
[
repr
(
packed
)
]
struct
Foo
{
field
:
u8
}
impl
Drop
for
Foo
{
fn
drop
(
&
mut
self
)
{
FIELD_ADDR
.
with
(
|
f
|
{
f
.
set
(
&
self
.
field
as
*
const
u8
as
usize
)
;
}
)
}
}
#
[
allow
(
clippy
:
:
let_and_return
)
]
let
field_addr
=
{
let
x
=
Foo
{
field
:
27
}
;
let
field_addr
=
&
x
.
field
as
*
const
u8
as
usize
;
field_addr
}
;
assert_eq
!
(
field_addr
FIELD_ADDR
.
with
(
|
f
|
f
.
get
(
)
)
)
;
}
