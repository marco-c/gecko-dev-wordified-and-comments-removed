#
!
[
no_std
]
#
!
[
recursion_limit
=
"
256
"
]
#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
pin
-
project
/
0
.
4
.
9
"
)
]
#
!
[
doc
(
test
(
no_crate_inject
attr
(
deny
(
warnings
rust_2018_idioms
single_use_lifetimes
)
allow
(
dead_code
)
)
)
)
]
#
!
[
warn
(
unsafe_code
)
]
#
!
[
warn
(
missing_docs
rust_2018_idioms
single_use_lifetimes
unreachable_pub
)
]
#
!
[
warn
(
clippy
:
:
all
)
]
#
!
[
allow
(
clippy
:
:
mem_replace_with_default
)
]
#
!
[
allow
(
clippy
:
:
needless_doctest_main
)
]
#
[
doc
(
inline
)
]
pub
use
pin_project_internal
:
:
pin_project
;
#
[
doc
(
inline
)
]
pub
use
pin_project_internal
:
:
pinned_drop
;
#
[
doc
(
inline
)
]
pub
use
pin_project_internal
:
:
project
;
#
[
doc
(
inline
)
]
pub
use
pin_project_internal
:
:
project_ref
;
#
[
allow
(
unsafe_code
)
]
pub
unsafe
trait
UnsafeUnpin
{
}
#
[
doc
(
hidden
)
]
pub
mod
__private
{
use
super
:
:
UnsafeUnpin
;
use
core
:
:
{
marker
:
:
PhantomData
pin
:
:
Pin
}
;
#
[
doc
(
hidden
)
]
pub
use
pin_project_internal
:
:
__PinProjectInternalDerive
;
#
[
doc
(
hidden
)
]
pub
trait
PinnedDrop
{
#
[
allow
(
unsafe_code
)
]
#
[
doc
(
hidden
)
]
unsafe
fn
drop
(
self
:
Pin
<
&
mut
Self
>
)
;
}
#
[
doc
(
hidden
)
]
pub
struct
Wrapper
<
'
a
T
:
?
Sized
>
(
PhantomData
<
&
'
a
(
)
>
T
)
;
#
[
allow
(
unsafe_code
)
]
unsafe
impl
<
T
:
?
Sized
>
UnsafeUnpin
for
Wrapper
<
'
_
T
>
where
T
:
UnsafeUnpin
{
}
#
[
doc
(
hidden
)
]
pub
struct
AlwaysUnpin
<
'
a
T
:
?
Sized
>
(
PhantomData
<
&
'
a
(
)
>
PhantomData
<
T
>
)
;
impl
<
T
:
?
Sized
>
Unpin
for
AlwaysUnpin
<
'
_
T
>
{
}
}
