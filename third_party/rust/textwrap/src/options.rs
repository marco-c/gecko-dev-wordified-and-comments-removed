use
crate
:
:
{
LineEnding
WordSeparator
WordSplitter
WrapAlgorithm
}
;
#
[
non_exhaustive
]
#
[
derive
(
Debug
Clone
)
]
pub
struct
Options
<
'
a
>
{
pub
width
:
usize
pub
line_ending
:
LineEnding
pub
initial_indent
:
&
'
a
str
pub
subsequent_indent
:
&
'
a
str
pub
break_words
:
bool
pub
wrap_algorithm
:
WrapAlgorithm
pub
word_separator
:
WordSeparator
pub
word_splitter
:
WordSplitter
}
impl
<
'
a
>
From
<
&
'
a
Options
<
'
a
>
>
for
Options
<
'
a
>
{
fn
from
(
options
:
&
'
a
Options
<
'
a
>
)
-
>
Self
{
Self
{
width
:
options
.
width
line_ending
:
options
.
line_ending
initial_indent
:
options
.
initial_indent
subsequent_indent
:
options
.
subsequent_indent
break_words
:
options
.
break_words
word_separator
:
options
.
word_separator
wrap_algorithm
:
options
.
wrap_algorithm
word_splitter
:
options
.
word_splitter
.
clone
(
)
}
}
}
impl
<
'
a
>
From
<
usize
>
for
Options
<
'
a
>
{
fn
from
(
width
:
usize
)
-
>
Self
{
Options
:
:
new
(
width
)
}
}
impl
<
'
a
>
Options
<
'
a
>
{
pub
const
fn
new
(
width
:
usize
)
-
>
Self
{
Options
{
width
line_ending
:
LineEnding
:
:
LF
initial_indent
:
"
"
subsequent_indent
:
"
"
break_words
:
true
word_separator
:
WordSeparator
:
:
new
(
)
wrap_algorithm
:
WrapAlgorithm
:
:
new
(
)
word_splitter
:
WordSplitter
:
:
HyphenSplitter
}
}
pub
fn
line_ending
(
self
line_ending
:
LineEnding
)
-
>
Self
{
Options
{
line_ending
.
.
self
}
}
pub
fn
width
(
self
width
:
usize
)
-
>
Self
{
Options
{
width
.
.
self
}
}
pub
fn
initial_indent
(
self
initial_indent
:
&
'
a
str
)
-
>
Self
{
Options
{
initial_indent
.
.
self
}
}
pub
fn
subsequent_indent
(
self
subsequent_indent
:
&
'
a
str
)
-
>
Self
{
Options
{
subsequent_indent
.
.
self
}
}
pub
fn
break_words
(
self
break_words
:
bool
)
-
>
Self
{
Options
{
break_words
.
.
self
}
}
pub
fn
word_separator
(
self
word_separator
:
WordSeparator
)
-
>
Options
<
'
a
>
{
Options
{
word_separator
.
.
self
}
}
pub
fn
wrap_algorithm
(
self
wrap_algorithm
:
WrapAlgorithm
)
-
>
Options
<
'
a
>
{
Options
{
wrap_algorithm
.
.
self
}
}
pub
fn
word_splitter
(
self
word_splitter
:
WordSplitter
)
-
>
Options
<
'
a
>
{
Options
{
word_splitter
.
.
self
}
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
options_agree_with_usize
(
)
{
let
opt_usize
=
Options
:
:
from
(
42_usize
)
;
let
opt_options
=
Options
:
:
new
(
42
)
;
assert_eq
!
(
opt_usize
.
width
opt_options
.
width
)
;
assert_eq
!
(
opt_usize
.
initial_indent
opt_options
.
initial_indent
)
;
assert_eq
!
(
opt_usize
.
subsequent_indent
opt_options
.
subsequent_indent
)
;
assert_eq
!
(
opt_usize
.
break_words
opt_options
.
break_words
)
;
assert_eq
!
(
opt_usize
.
word_splitter
.
split_points
(
"
hello
-
world
"
)
opt_options
.
word_splitter
.
split_points
(
"
hello
-
world
"
)
)
;
}
}
