use
crate
:
:
core
:
:
display_width
;
use
crate
:
:
{
wrap
Options
}
;
pub
fn
wrap_columns
<
'
a
Opt
>
(
text
:
&
str
columns
:
usize
total_width_or_options
:
Opt
left_gap
:
&
str
middle_gap
:
&
str
right_gap
:
&
str
)
-
>
Vec
<
String
>
where
Opt
:
Into
<
Options
<
'
a
>
>
{
assert
!
(
columns
>
0
)
;
let
mut
options
:
Options
=
total_width_or_options
.
into
(
)
;
let
inner_width
=
options
.
width
.
saturating_sub
(
display_width
(
left_gap
)
)
.
saturating_sub
(
display_width
(
right_gap
)
)
.
saturating_sub
(
display_width
(
middle_gap
)
*
(
columns
-
1
)
)
;
let
column_width
=
std
:
:
cmp
:
:
max
(
inner_width
/
columns
1
)
;
options
.
width
=
column_width
;
let
last_column_padding
=
"
"
.
repeat
(
inner_width
%
column_width
)
;
let
wrapped_lines
=
wrap
(
text
options
)
;
let
lines_per_column
=
wrapped_lines
.
len
(
)
/
columns
+
usize
:
:
from
(
wrapped_lines
.
len
(
)
%
columns
>
0
)
;
let
mut
lines
=
Vec
:
:
new
(
)
;
for
line_no
in
0
.
.
lines_per_column
{
let
mut
line
=
String
:
:
from
(
left_gap
)
;
for
column_no
in
0
.
.
columns
{
match
wrapped_lines
.
get
(
line_no
+
column_no
*
lines_per_column
)
{
Some
(
column_line
)
=
>
{
line
.
push_str
(
column_line
)
;
line
.
push_str
(
&
"
"
.
repeat
(
column_width
-
display_width
(
column_line
)
)
)
;
}
None
=
>
{
line
.
push_str
(
&
"
"
.
repeat
(
column_width
)
)
;
}
}
if
column_no
=
=
columns
-
1
{
line
.
push_str
(
&
last_column_padding
)
;
}
else
{
line
.
push_str
(
middle_gap
)
;
}
}
line
.
push_str
(
right_gap
)
;
lines
.
push
(
line
)
;
}
lines
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
wrap_columns_empty_text
(
)
{
assert_eq
!
(
wrap_columns
(
"
"
1
10
"
|
"
"
"
"
|
"
)
vec
!
[
"
|
|
"
]
)
;
}
#
[
test
]
fn
wrap_columns_single_column
(
)
{
assert_eq
!
(
wrap_columns
(
"
Foo
"
3
30
"
|
"
"
|
"
"
|
"
)
vec
!
[
"
|
Foo
|
|
|
"
]
)
;
}
#
[
test
]
fn
wrap_columns_uneven_columns
(
)
{
assert_eq
!
(
wrap_columns
(
"
Foo
Bar
Baz
Quux
"
4
21
"
|
"
"
|
"
"
|
"
)
vec
!
[
"
|
Foo
|
Bar
|
Baz
|
Quux
|
"
]
)
;
assert_eq
!
(
wrap_columns
(
"
Foo
Bar
Baz
Quux
"
4
24
"
|
"
"
|
"
"
|
"
)
vec
!
[
"
|
Foo
|
Bar
|
Baz
|
Quux
|
"
]
)
;
assert_eq
!
(
wrap_columns
(
"
Foo
Bar
Baz
Quux
"
4
25
"
|
"
"
|
"
"
|
"
)
vec
!
[
"
|
Foo
|
Bar
|
Baz
|
Quux
|
"
]
)
;
}
#
[
test
]
#
[
cfg
(
feature
=
"
unicode
-
width
"
)
]
fn
wrap_columns_with_emojis
(
)
{
assert_eq
!
(
wrap_columns
(
"
Words
and
a
few
emojis
wrapped
in
columns
"
2
30
"
"
"
"
"
"
)
vec
!
[
"
Words
wrapped
in
"
"
and
a
few
columns
"
"
emojis
"
]
)
;
}
#
[
test
]
fn
wrap_columns_big_gaps
(
)
{
assert_eq
!
(
wrap_columns
(
"
xyz
"
2
10
"
-
-
-
-
>
"
"
!
!
!
"
"
<
-
-
-
-
"
)
vec
!
[
"
-
-
-
-
>
x
!
!
!
z
<
-
-
-
-
"
/
/
"
-
-
-
-
>
y
!
!
!
<
-
-
-
-
"
]
)
;
}
#
[
test
]
#
[
should_panic
]
fn
wrap_columns_panic_with_zero_columns
(
)
{
wrap_columns
(
"
"
0
10
"
"
"
"
"
"
)
;
}
}
