use
textwrap
:
:
{
dedent
indent
}
;
const
ROUNDTRIP_CASES
:
[
&
str
;
3
]
=
[
"
Hi
.
\
nThis
is
a
test
.
\
nTesting
.
"
"
Hi
.
\
nThis
is
a
test
.
\
n
\
nTesting
.
"
"
\
nHi
.
\
nThis
is
a
test
.
\
nTesting
.
\
n
"
]
;
const
WINDOWS_CASES
:
[
&
str
;
2
]
=
[
"
Hi
.
\
r
\
nThis
is
a
test
.
\
r
\
nTesting
.
"
"
Hi
.
\
r
\
nThis
is
a
test
.
\
n
\
r
\
nTesting
.
\
r
\
n
\
n
"
]
;
#
[
test
]
fn
test_indent_nomargin_default
(
)
{
for
text
in
ROUNDTRIP_CASES
.
iter
(
)
{
assert_eq
!
(
&
indent
(
text
"
"
)
text
)
;
}
for
text
in
WINDOWS_CASES
.
iter
(
)
{
assert_eq
!
(
&
indent
(
text
"
"
)
text
)
;
}
}
#
[
test
]
fn
test_roundtrip_spaces
(
)
{
for
text
in
ROUNDTRIP_CASES
.
iter
(
)
{
assert_eq
!
(
&
dedent
(
&
indent
(
text
"
"
)
)
text
)
;
}
}
#
[
test
]
fn
test_roundtrip_tabs
(
)
{
for
text
in
ROUNDTRIP_CASES
.
iter
(
)
{
assert_eq
!
(
&
dedent
(
&
indent
(
text
"
\
t
\
t
"
)
)
text
)
;
}
}
#
[
test
]
fn
test_roundtrip_mixed
(
)
{
for
text
in
ROUNDTRIP_CASES
.
iter
(
)
{
assert_eq
!
(
&
dedent
(
&
indent
(
text
"
\
t
\
t
"
)
)
text
)
;
}
}
#
[
test
]
fn
test_indent_default
(
)
{
let
prefix
=
"
"
;
let
expected
=
[
"
Hi
.
\
n
This
is
a
test
.
\
n
Testing
.
"
"
Hi
.
\
n
This
is
a
test
.
\
n
\
n
Testing
.
"
"
\
n
Hi
.
\
n
This
is
a
test
.
\
n
Testing
.
\
n
"
]
;
for
(
text
expect
)
in
ROUNDTRIP_CASES
.
iter
(
)
.
zip
(
expected
.
iter
(
)
)
{
assert_eq
!
(
&
indent
(
text
prefix
)
expect
)
}
let
expected
=
[
"
Hi
.
\
r
\
n
This
is
a
test
.
\
r
\
n
Testing
.
"
"
Hi
.
\
r
\
n
This
is
a
test
.
\
n
\
r
\
n
Testing
.
\
r
\
n
\
n
"
]
;
for
(
text
expect
)
in
WINDOWS_CASES
.
iter
(
)
.
zip
(
expected
.
iter
(
)
)
{
assert_eq
!
(
&
indent
(
text
prefix
)
expect
)
}
}
#
[
test
]
fn
indented_text_should_have_the_same_number_of_lines_as_the_original_text
(
)
{
let
texts
=
[
"
foo
\
nbar
"
"
foo
\
nbar
\
n
"
"
foo
\
nbar
\
nbaz
"
]
;
for
original
in
texts
.
iter
(
)
{
let
indented
=
indent
(
original
"
"
)
;
assert_eq
!
(
&
indented
original
)
;
}
}
