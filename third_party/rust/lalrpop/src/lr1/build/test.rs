use
generate
;
use
grammar
:
:
repr
:
:
*
;
use
lr1
:
:
core
:
:
*
;
use
lr1
:
:
interpret
:
:
interpret
;
use
lr1
:
:
lookahead
:
:
Token
;
use
lr1
:
:
lookahead
:
:
Token
:
:
EOF
;
use
lr1
:
:
lookahead
:
:
TokenSet
;
use
lr1
:
:
tls
:
:
Lr1Tls
;
use
string_cache
:
:
DefaultAtom
as
Atom
;
use
test_util
:
:
{
compare
expect_debug
normalized_grammar
}
;
use
tls
:
:
Tls
;
use
super
:
:
{
build_lr0_states
build_lr1_states
use_lane_table
LR
}
;
fn
nt
(
t
:
&
str
)
-
>
NonterminalString
{
NonterminalString
(
Atom
:
:
from
(
t
)
)
}
const
ITERATIONS
:
usize
=
22
;
fn
random_test
<
'
g
>
(
grammar
:
&
Grammar
states
:
&
'
g
[
LR1State
<
'
g
>
]
start_symbol
:
NonterminalString
)
{
for
i
in
0
.
.
ITERATIONS
{
let
input_tree
=
generate
:
:
random_parse_tree
(
grammar
start_symbol
.
clone
(
)
)
;
let
output_tree
=
interpret
(
&
states
input_tree
.
terminals
(
)
)
.
unwrap
(
)
;
println
!
(
"
test
{
}
"
i
)
;
println
!
(
"
input_tree
=
{
}
"
input_tree
)
;
println
!
(
"
output_tree
=
{
}
"
output_tree
)
;
compare
(
output_tree
input_tree
)
;
}
}
macro_rules
!
tokens
{
(
(
x
:
expr
)
*
)
=
>
{
vec
!
[
(
TerminalString
:
:
quoted
(
Atom
:
:
from
(
x
)
)
)
*
]
}
}
fn
items
<
'
g
>
(
grammar
:
&
'
g
Grammar
nonterminal
:
&
str
index
:
usize
la
:
Token
)
-
>
LR1Items
<
'
g
>
{
let
set
=
TokenSet
:
:
from
(
la
)
;
let
lr1
:
LR
<
TokenSet
>
=
LR
:
:
new
(
&
grammar
nt
(
nonterminal
)
set
.
clone
(
)
)
;
let
items
=
lr1
.
transitive_closure
(
lr1
.
items
(
&
nt
(
nonterminal
)
index
&
set
)
)
;
items
}
#
[
test
]
fn
start_state
(
)
{
let
grammar
=
normalized_grammar
(
r
#
"
grammar
;
extern
{
enum
Tok
{
"
C
"
=
>
.
.
"
D
"
=
>
.
.
}
}
A
=
B
"
C
"
;
B
:
Option
<
u32
>
=
{
"
D
"
=
>
Some
(
1
)
(
)
=
>
None
}
;
"
#
)
;
let
_lr1_tls
=
Lr1Tls
:
:
install
(
grammar
.
terminals
.
clone
(
)
)
;
let
items
=
items
(
&
grammar
"
A
"
0
EOF
)
;
expect_debug
(
items
.
vec
r
#
"
[
A
=
(
*
)
B
"
C
"
[
EOF
]
B
=
(
*
)
[
"
C
"
]
B
=
(
*
)
"
D
"
[
"
C
"
]
]
"
#
)
;
}
#
[
test
]
fn
start_state_1
(
)
{
let
grammar
=
normalized_grammar
(
r
#
"
grammar
;
extern
{
enum
Tok
{
"
B1
"
=
>
.
.
"
C1
"
=
>
.
.
}
}
A
=
B
C
;
B
:
Option
<
u32
>
=
{
"
B1
"
=
>
Some
(
1
)
(
)
=
>
None
}
;
C
:
Option
<
u32
>
=
{
"
C1
"
=
>
Some
(
1
)
(
)
=
>
None
}
;
"
#
)
;
let
_lr1_tls
=
Lr1Tls
:
:
install
(
grammar
.
terminals
.
clone
(
)
)
;
expect_debug
(
items
(
&
grammar
"
A
"
0
EOF
)
.
vec
r
#
"
[
A
=
(
*
)
B
C
[
EOF
]
B
=
(
*
)
[
"
C1
"
EOF
]
B
=
(
*
)
"
B1
"
[
"
C1
"
EOF
]
]
"
#
)
;
expect_debug
(
items
(
&
grammar
"
A
"
1
EOF
)
.
vec
r
#
"
[
A
=
B
(
*
)
C
[
EOF
]
C
=
(
*
)
[
EOF
]
C
=
(
*
)
"
C1
"
[
EOF
]
]
"
#
)
;
}
#
[
test
]
fn
expr_grammar1
(
)
{
let
_tls
=
Tls
:
:
test
(
)
;
let
grammar
=
normalized_grammar
(
r
#
"
grammar
;
extern
{
enum
Tok
{
"
-
"
=
>
.
.
"
N
"
=
>
.
.
"
(
"
=
>
.
.
"
)
"
=
>
.
.
}
}
S
:
(
)
=
E
=
>
(
)
;
E
:
(
)
=
{
E
"
-
"
T
=
>
(
)
T
=
>
(
)
}
;
T
:
(
)
=
{
"
N
"
=
>
(
)
"
(
"
E
"
)
"
=
>
(
)
}
;
"
#
)
;
let
_lr1_tls
=
Lr1Tls
:
:
install
(
grammar
.
terminals
.
clone
(
)
)
;
let
states
=
build_lr1_states
(
&
grammar
nt
(
"
S
"
)
)
.
unwrap
(
)
;
println
!
(
"
{
:
#
?
}
"
states
)
;
assert_eq
!
(
states
.
len
(
)
if
use_lane_table
(
)
{
9
}
else
{
16
}
)
;
let
tree
=
interpret
(
&
states
tokens
!
[
"
N
"
"
-
"
"
(
"
"
N
"
"
-
"
"
N
"
"
)
"
]
)
.
unwrap
(
)
;
assert_eq
!
(
&
format
!
(
"
{
}
"
tree
)
[
.
.
]
r
#
"
[
S
:
[
E
:
[
E
:
[
T
:
"
N
"
]
]
"
-
"
[
T
:
"
(
"
[
E
:
[
E
:
[
T
:
"
N
"
]
]
"
-
"
[
T
:
"
N
"
]
]
"
)
"
]
]
]
"
#
)
;
assert
!
(
interpret
(
&
states
tokens
!
[
"
N
"
"
-
"
"
(
"
"
N
"
"
-
"
"
N
"
]
)
.
is_err
(
)
)
;
assert
!
(
interpret
(
&
states
tokens
!
[
"
N
"
"
-
"
]
)
.
is_err
(
)
)
;
assert
!
(
interpret
(
&
states
tokens
!
[
"
N
"
"
-
"
"
)
"
"
N
"
"
-
"
"
N
"
"
(
"
]
)
.
is_err
(
)
)
;
let
tree
=
interpret
(
&
states
tokens
!
[
"
(
"
"
N
"
"
-
"
"
N
"
"
)
"
"
-
"
"
N
"
]
)
.
unwrap
(
)
;
println
!
(
"
{
}
"
tree
)
;
assert_eq
!
(
&
format
!
(
"
{
}
"
tree
)
[
.
.
]
r
#
"
[
S
:
[
E
:
[
E
:
[
T
:
"
(
"
[
E
:
[
E
:
[
T
:
"
N
"
]
]
"
-
"
[
T
:
"
N
"
]
]
"
)
"
]
]
"
-
"
[
T
:
"
N
"
]
]
]
"
#
)
;
random_test
(
&
grammar
&
states
nt
(
"
S
"
)
)
;
}
#
[
test
]
fn
shift_reduce_conflict1
(
)
{
let
_tls
=
Tls
:
:
test
(
)
;
let
grammar
=
normalized_grammar
(
r
#
"
grammar
;
extern
{
enum
Tok
{
"
L
"
=
>
.
.
"
&
"
=
>
.
.
}
}
E
:
(
)
=
{
"
L
"
"
&
"
OPT_L
E
}
;
OPT_L
:
(
)
=
{
(
)
"
L
"
}
;
"
#
)
;
let
_lr1_tls
=
Lr1Tls
:
:
install
(
grammar
.
terminals
.
clone
(
)
)
;
assert
!
(
build_lr1_states
(
&
grammar
nt
(
"
E
"
)
)
.
is_err
(
)
)
;
}
#
[
test
]
fn
lr0_expr_grammar_with_explicit_eof
(
)
{
let
_tls
=
Tls
:
:
test
(
)
;
let
grammar
=
normalized_grammar
(
r
#
"
grammar
;
S
:
(
)
=
E
"
"
;
E
:
(
)
=
{
E
"
-
"
T
T
}
;
T
:
(
)
=
{
"
N
"
"
(
"
E
"
)
"
}
;
"
#
)
;
let
_lr1_tls
=
Lr1Tls
:
:
install
(
grammar
.
terminals
.
clone
(
)
)
;
let
states
=
build_lr0_states
(
&
grammar
nt
(
"
S
"
)
)
.
unwrap
(
)
;
assert_eq
!
(
states
.
len
(
)
10
)
;
}
#
[
test
]
fn
lr0_expr_grammar_with_implicit_eof
(
)
{
let
_tls
=
Tls
:
:
test
(
)
;
let
grammar
=
normalized_grammar
(
r
#
"
grammar
;
S
:
(
)
=
E
;
E
:
(
)
=
{
E
"
-
"
T
T
}
;
T
:
(
)
=
{
"
N
"
"
(
"
E
"
)
"
}
;
"
#
)
;
let
_lr1_tls
=
Lr1Tls
:
:
install
(
grammar
.
terminals
.
clone
(
)
)
;
build_lr0_states
(
&
grammar
nt
(
"
S
"
)
)
.
unwrap_err
(
)
;
}
#
[
test
]
fn
issue_144
(
)
{
let
_tls
=
Tls
:
:
test
(
)
;
let
grammar
=
normalized_grammar
(
r
#
#
"
grammar
;
pub
ForeignItem
:
(
)
=
{
AttrsAndVis
"
item_foreign_fn
"
AttrsAndVis
"
unsafe
"
"
item_foreign_fn
"
}
;
AttrsAndVis
:
(
)
=
{
MaybeOuterAttrs
visibility
}
;
MaybeOuterAttrs
:
(
)
=
{
OuterAttrs
(
)
}
;
visibility
:
(
)
=
{
"
pub
"
(
)
}
;
OuterAttrs
:
(
)
=
{
OuterAttr
OuterAttrs
OuterAttr
}
;
OuterAttr
:
(
)
=
{
"
#
"
"
[
"
"
]
"
}
;
Ident
:
(
)
=
{
"
IDENT
"
}
;
ty
:
(
)
=
{
"
ty
"
}
;
"
#
#
)
;
let
_lr1_tls
=
Lr1Tls
:
:
install
(
grammar
.
terminals
.
clone
(
)
)
;
build_lr1_states
(
&
grammar
nt
(
"
ForeignItem
"
)
)
.
unwrap
(
)
;
}
#
[
test
]
fn
match_grammar
(
)
{
let
_tls
=
Tls
:
:
test
(
)
;
let
grammar
=
normalized_grammar
(
r
#
"
grammar
;
match
{
r
"
(
?
i
)
select
"
=
>
SELECT
}
else
{
_
}
pub
Query
=
SELECT
r
"
[
a
-
z
]
+
"
;
"
#
)
;
let
_lr1_tls
=
Lr1Tls
:
:
install
(
grammar
.
terminals
.
clone
(
)
)
;
let
states
=
build_lr0_states
(
&
grammar
nt
(
"
Query
"
)
)
.
expect
(
"
build
states
"
)
;
println
!
(
"
states
:
{
:
?
}
"
states
)
;
}
