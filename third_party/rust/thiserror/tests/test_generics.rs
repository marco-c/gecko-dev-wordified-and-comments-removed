#
!
[
allow
(
clippy
:
:
needless_late_init
clippy
:
:
uninlined_format_args
)
]
use
core
:
:
fmt
:
:
{
self
Debug
Display
}
;
use
thiserror
:
:
Error
;
pub
struct
NoFormat
;
#
[
derive
(
Debug
)
]
pub
struct
DebugOnly
;
pub
struct
DisplayOnly
;
impl
Display
for
DisplayOnly
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
"
display
only
"
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
DebugAndDisplay
;
impl
Display
for
DebugAndDisplay
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
"
debug
and
display
"
)
}
}
#
[
derive
(
Error
Debug
)
]
pub
enum
EnumDebugGeneric
<
E
>
{
#
[
error
(
"
{
0
:
?
}
"
)
]
FatalError
(
E
)
}
#
[
derive
(
Error
Debug
)
]
pub
enum
EnumFromGeneric
<
E
>
{
#
[
error
(
"
enum
from
generic
"
)
]
Source
(
#
[
from
]
EnumDebugGeneric
<
E
>
)
}
#
[
derive
(
Error
)
]
pub
enum
EnumCompound
<
HasDisplay
HasDebug
HasNeither
>
{
#
[
error
(
"
{
0
}
{
1
:
?
}
"
)
]
DisplayDebug
(
HasDisplay
HasDebug
)
#
[
error
(
"
{
0
}
"
)
]
Display
(
HasDisplay
HasNeither
)
#
[
error
(
"
{
1
:
?
}
"
)
]
Debug
(
HasNeither
HasDebug
)
}
impl
<
HasDisplay
HasDebug
HasNeither
>
Debug
for
EnumCompound
<
HasDisplay
HasDebug
HasNeither
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
"
EnumCompound
"
)
}
}
#
[
test
]
fn
test_display_enum_compound
(
)
{
let
mut
instance
:
EnumCompound
<
DisplayOnly
DebugOnly
NoFormat
>
;
instance
=
EnumCompound
:
:
DisplayDebug
(
DisplayOnly
DebugOnly
)
;
assert_eq
!
(
format
!
(
"
{
}
"
instance
)
"
display
only
DebugOnly
"
)
;
instance
=
EnumCompound
:
:
Display
(
DisplayOnly
NoFormat
)
;
assert_eq
!
(
format
!
(
"
{
}
"
instance
)
"
display
only
"
)
;
instance
=
EnumCompound
:
:
Debug
(
NoFormat
DebugOnly
)
;
assert_eq
!
(
format
!
(
"
{
}
"
instance
)
"
DebugOnly
"
)
;
}
#
[
derive
(
Error
Debug
)
]
pub
enum
EnumTransparentGeneric
<
E
>
{
#
[
error
(
transparent
)
]
Other
(
E
)
}
#
[
derive
(
Error
Debug
)
]
#
[
error
(
"
{
underlying
:
?
}
"
)
]
pub
struct
StructDebugGeneric
<
E
>
{
pub
underlying
:
E
}
#
[
derive
(
Error
Debug
)
]
pub
struct
StructFromGeneric
<
E
>
{
#
[
from
]
pub
source
:
StructDebugGeneric
<
E
>
}
#
[
derive
(
Error
Debug
)
]
#
[
error
(
transparent
)
]
pub
struct
StructTransparentGeneric
<
E
>
(
E
)
;
