use
std
:
:
env
;
use
std
:
:
ffi
:
:
OsString
;
use
std
:
:
path
:
:
Path
;
use
std
:
:
process
:
:
{
self
Command
Stdio
}
;
fn
main
(
)
{
println
!
(
"
cargo
:
rerun
-
if
-
changed
=
build
/
probe
.
rs
"
)
;
let
error_generic_member_access
;
let
consider_rustc_bootstrap
;
if
compile_probe
(
false
)
{
error_generic_member_access
=
true
;
consider_rustc_bootstrap
=
false
;
}
else
if
let
Some
(
rustc_bootstrap
)
=
env
:
:
var_os
(
"
RUSTC_BOOTSTRAP
"
)
{
if
compile_probe
(
true
)
{
error_generic_member_access
=
true
;
consider_rustc_bootstrap
=
true
;
}
else
if
rustc_bootstrap
=
=
"
1
"
{
error_generic_member_access
=
false
;
consider_rustc_bootstrap
=
false
;
}
else
{
error_generic_member_access
=
false
;
consider_rustc_bootstrap
=
true
;
}
}
else
{
error_generic_member_access
=
false
;
consider_rustc_bootstrap
=
true
;
}
if
error_generic_member_access
{
println
!
(
"
cargo
:
rustc
-
cfg
=
error_generic_member_access
"
)
;
}
if
consider_rustc_bootstrap
{
println
!
(
"
cargo
:
rerun
-
if
-
env
-
changed
=
RUSTC_BOOTSTRAP
"
)
;
}
}
fn
compile_probe
(
rustc_bootstrap
:
bool
)
-
>
bool
{
if
env
:
:
var_os
(
"
RUSTC_STAGE
"
)
.
is_some
(
)
{
return
false
;
}
let
rustc
=
cargo_env_var
(
"
RUSTC
"
)
;
let
out_dir
=
cargo_env_var
(
"
OUT_DIR
"
)
;
let
probefile
=
Path
:
:
new
(
"
build
"
)
.
join
(
"
probe
.
rs
"
)
;
let
mut
cmd
=
if
let
Some
(
wrapper
)
=
env
:
:
var_os
(
"
RUSTC_WRAPPER
"
)
{
let
mut
cmd
=
Command
:
:
new
(
wrapper
)
;
cmd
.
arg
(
rustc
)
;
cmd
}
else
{
Command
:
:
new
(
rustc
)
}
;
if
!
rustc_bootstrap
{
cmd
.
env_remove
(
"
RUSTC_BOOTSTRAP
"
)
;
}
cmd
.
stderr
(
Stdio
:
:
null
(
)
)
.
arg
(
"
-
-
edition
=
2018
"
)
.
arg
(
"
-
-
crate
-
name
=
thiserror
"
)
.
arg
(
"
-
-
crate
-
type
=
lib
"
)
.
arg
(
"
-
-
emit
=
dep
-
info
metadata
"
)
.
arg
(
"
-
-
out
-
dir
"
)
.
arg
(
out_dir
)
.
arg
(
probefile
)
;
if
let
Some
(
target
)
=
env
:
:
var_os
(
"
TARGET
"
)
{
cmd
.
arg
(
"
-
-
target
"
)
.
arg
(
target
)
;
}
if
let
Ok
(
rustflags
)
=
env
:
:
var
(
"
CARGO_ENCODED_RUSTFLAGS
"
)
{
if
!
rustflags
.
is_empty
(
)
{
for
arg
in
rustflags
.
split
(
'
\
x1f
'
)
{
cmd
.
arg
(
arg
)
;
}
}
}
match
cmd
.
status
(
)
{
Ok
(
status
)
=
>
status
.
success
(
)
Err
(
_
)
=
>
false
}
}
fn
cargo_env_var
(
key
:
&
str
)
-
>
OsString
{
env
:
:
var_os
(
key
)
.
unwrap_or_else
(
|
|
{
eprintln
!
(
"
Environment
variable
{
}
is
not
set
during
execution
of
build
script
"
key
)
;
process
:
:
exit
(
1
)
;
}
)
}
