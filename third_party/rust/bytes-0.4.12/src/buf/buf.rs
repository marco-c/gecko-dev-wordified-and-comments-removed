use
super
:
:
{
IntoBuf
Take
Reader
Iter
FromBuf
Chain
}
;
use
byteorder
:
:
{
BigEndian
ByteOrder
LittleEndian
}
;
use
iovec
:
:
IoVec
;
use
std
:
:
{
cmp
io
ptr
}
;
macro_rules
!
buf_get_impl
{
(
this
:
ident
size
:
expr
conv
:
path
)
=
>
(
{
/
/
try
to
convert
directly
from
the
bytes
let
ret
=
{
/
/
this
Option
<
ret
>
trick
is
to
avoid
keeping
a
borrow
on
self
/
/
when
advance
(
)
is
called
(
mut
borrow
)
and
to
call
bytes
(
)
only
once
if
let
Some
(
src
)
=
this
.
bytes
(
)
.
get
(
.
.
(
size
)
)
{
Some
(
conv
(
src
)
)
}
else
{
None
}
}
;
if
let
Some
(
ret
)
=
ret
{
/
/
if
the
direct
convertion
was
possible
advance
and
return
this
.
advance
(
size
)
;
return
ret
;
}
else
{
/
/
if
not
we
copy
the
bytes
in
a
temp
buffer
then
convert
let
mut
buf
=
[
0
;
(
size
)
]
;
this
.
copy_to_slice
(
&
mut
buf
)
;
/
/
(
do
the
advance
)
return
conv
(
&
buf
)
;
}
}
)
;
(
this
:
ident
buf_size
:
expr
conv
:
path
len_to_read
:
expr
)
=
>
(
{
/
/
The
same
trick
as
above
does
not
improve
the
best
case
speed
.
/
/
It
seems
to
be
linked
to
the
way
the
method
is
optimised
by
the
compiler
let
mut
buf
=
[
0
;
(
buf_size
)
]
;
this
.
copy_to_slice
(
&
mut
buf
[
.
.
(
len_to_read
)
]
)
;
return
conv
(
&
buf
[
.
.
(
len_to_read
)
]
len_to_read
)
;
}
)
;
}
pub
trait
Buf
{
fn
remaining
(
&
self
)
-
>
usize
;
fn
bytes
(
&
self
)
-
>
&
[
u8
]
;
fn
bytes_vec
<
'
a
>
(
&
'
a
self
dst
:
&
mut
[
&
'
a
IoVec
]
)
-
>
usize
{
if
dst
.
is_empty
(
)
{
return
0
;
}
if
self
.
has_remaining
(
)
{
dst
[
0
]
=
self
.
bytes
(
)
.
into
(
)
;
1
}
else
{
0
}
}
fn
advance
(
&
mut
self
cnt
:
usize
)
;
fn
has_remaining
(
&
self
)
-
>
bool
{
self
.
remaining
(
)
>
0
}
fn
copy_to_slice
(
&
mut
self
dst
:
&
mut
[
u8
]
)
{
let
mut
off
=
0
;
assert
!
(
self
.
remaining
(
)
>
=
dst
.
len
(
)
)
;
while
off
<
dst
.
len
(
)
{
let
cnt
;
unsafe
{
let
src
=
self
.
bytes
(
)
;
cnt
=
cmp
:
:
min
(
src
.
len
(
)
dst
.
len
(
)
-
off
)
;
ptr
:
:
copy_nonoverlapping
(
src
.
as_ptr
(
)
dst
[
off
.
.
]
.
as_mut_ptr
(
)
cnt
)
;
off
+
=
src
.
len
(
)
;
}
self
.
advance
(
cnt
)
;
}
}
fn
get_u8
(
&
mut
self
)
-
>
u8
{
assert
!
(
self
.
remaining
(
)
>
=
1
)
;
let
ret
=
self
.
bytes
(
)
[
0
]
;
self
.
advance
(
1
)
;
ret
}
fn
get_i8
(
&
mut
self
)
-
>
i8
{
assert
!
(
self
.
remaining
(
)
>
=
1
)
;
let
ret
=
self
.
bytes
(
)
[
0
]
as
i8
;
self
.
advance
(
1
)
;
ret
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
use
get_u16_be
or
get_u16_le
"
)
]
fn
get_u16
<
T
:
ByteOrder
>
(
&
mut
self
)
-
>
u16
where
Self
:
Sized
{
let
mut
buf
=
[
0
;
2
]
;
self
.
copy_to_slice
(
&
mut
buf
)
;
T
:
:
read_u16
(
&
buf
)
}
fn
get_u16_be
(
&
mut
self
)
-
>
u16
{
buf_get_impl
!
(
self
2
BigEndian
:
:
read_u16
)
;
}
fn
get_u16_le
(
&
mut
self
)
-
>
u16
{
buf_get_impl
!
(
self
2
LittleEndian
:
:
read_u16
)
;
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
use
get_i16_be
or
get_i16_le
"
)
]
fn
get_i16
<
T
:
ByteOrder
>
(
&
mut
self
)
-
>
i16
where
Self
:
Sized
{
let
mut
buf
=
[
0
;
2
]
;
self
.
copy_to_slice
(
&
mut
buf
)
;
T
:
:
read_i16
(
&
buf
)
}
fn
get_i16_be
(
&
mut
self
)
-
>
i16
{
buf_get_impl
!
(
self
2
BigEndian
:
:
read_i16
)
;
}
fn
get_i16_le
(
&
mut
self
)
-
>
i16
{
buf_get_impl
!
(
self
2
LittleEndian
:
:
read_i16
)
;
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
use
get_u32_be
or
get_u32_le
"
)
]
fn
get_u32
<
T
:
ByteOrder
>
(
&
mut
self
)
-
>
u32
where
Self
:
Sized
{
let
mut
buf
=
[
0
;
4
]
;
self
.
copy_to_slice
(
&
mut
buf
)
;
T
:
:
read_u32
(
&
buf
)
}
fn
get_u32_be
(
&
mut
self
)
-
>
u32
{
buf_get_impl
!
(
self
4
BigEndian
:
:
read_u32
)
;
}
fn
get_u32_le
(
&
mut
self
)
-
>
u32
{
buf_get_impl
!
(
self
4
LittleEndian
:
:
read_u32
)
;
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
use
get_i32_be
or
get_i32_le
"
)
]
fn
get_i32
<
T
:
ByteOrder
>
(
&
mut
self
)
-
>
i32
where
Self
:
Sized
{
let
mut
buf
=
[
0
;
4
]
;
self
.
copy_to_slice
(
&
mut
buf
)
;
T
:
:
read_i32
(
&
buf
)
}
fn
get_i32_be
(
&
mut
self
)
-
>
i32
{
buf_get_impl
!
(
self
4
BigEndian
:
:
read_i32
)
;
}
fn
get_i32_le
(
&
mut
self
)
-
>
i32
{
buf_get_impl
!
(
self
4
LittleEndian
:
:
read_i32
)
;
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
use
get_u64_be
or
get_u64_le
"
)
]
fn
get_u64
<
T
:
ByteOrder
>
(
&
mut
self
)
-
>
u64
where
Self
:
Sized
{
let
mut
buf
=
[
0
;
8
]
;
self
.
copy_to_slice
(
&
mut
buf
)
;
T
:
:
read_u64
(
&
buf
)
}
fn
get_u64_be
(
&
mut
self
)
-
>
u64
{
buf_get_impl
!
(
self
8
BigEndian
:
:
read_u64
)
;
}
fn
get_u64_le
(
&
mut
self
)
-
>
u64
{
buf_get_impl
!
(
self
8
LittleEndian
:
:
read_u64
)
;
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
use
get_i64_be
or
get_i64_le
"
)
]
fn
get_i64
<
T
:
ByteOrder
>
(
&
mut
self
)
-
>
i64
where
Self
:
Sized
{
let
mut
buf
=
[
0
;
8
]
;
self
.
copy_to_slice
(
&
mut
buf
)
;
T
:
:
read_i64
(
&
buf
)
}
fn
get_i64_be
(
&
mut
self
)
-
>
i64
{
buf_get_impl
!
(
self
8
BigEndian
:
:
read_i64
)
;
}
fn
get_i64_le
(
&
mut
self
)
-
>
i64
{
buf_get_impl
!
(
self
8
LittleEndian
:
:
read_i64
)
;
}
#
[
cfg
(
feature
=
"
i128
"
)
]
fn
get_u128_be
(
&
mut
self
)
-
>
u128
{
buf_get_impl
!
(
self
16
BigEndian
:
:
read_u128
)
;
}
#
[
cfg
(
feature
=
"
i128
"
)
]
fn
get_u128_le
(
&
mut
self
)
-
>
u128
{
buf_get_impl
!
(
self
16
LittleEndian
:
:
read_u128
)
;
}
#
[
cfg
(
feature
=
"
i128
"
)
]
fn
get_i128_be
(
&
mut
self
)
-
>
i128
{
buf_get_impl
!
(
self
16
BigEndian
:
:
read_i128
)
;
}
#
[
cfg
(
feature
=
"
i128
"
)
]
fn
get_i128_le
(
&
mut
self
)
-
>
i128
{
buf_get_impl
!
(
self
16
LittleEndian
:
:
read_i128
)
;
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
use
get_uint_be
or
get_uint_le
"
)
]
fn
get_uint
<
T
:
ByteOrder
>
(
&
mut
self
nbytes
:
usize
)
-
>
u64
where
Self
:
Sized
{
let
mut
buf
=
[
0
;
8
]
;
self
.
copy_to_slice
(
&
mut
buf
[
.
.
nbytes
]
)
;
T
:
:
read_uint
(
&
buf
[
.
.
nbytes
]
nbytes
)
}
fn
get_uint_be
(
&
mut
self
nbytes
:
usize
)
-
>
u64
{
buf_get_impl
!
(
self
8
BigEndian
:
:
read_uint
nbytes
)
;
}
fn
get_uint_le
(
&
mut
self
nbytes
:
usize
)
-
>
u64
{
buf_get_impl
!
(
self
8
LittleEndian
:
:
read_uint
nbytes
)
;
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
use
get_int_be
or
get_int_le
"
)
]
fn
get_int
<
T
:
ByteOrder
>
(
&
mut
self
nbytes
:
usize
)
-
>
i64
where
Self
:
Sized
{
let
mut
buf
=
[
0
;
8
]
;
self
.
copy_to_slice
(
&
mut
buf
[
.
.
nbytes
]
)
;
T
:
:
read_int
(
&
buf
[
.
.
nbytes
]
nbytes
)
}
fn
get_int_be
(
&
mut
self
nbytes
:
usize
)
-
>
i64
{
buf_get_impl
!
(
self
8
BigEndian
:
:
read_int
nbytes
)
;
}
fn
get_int_le
(
&
mut
self
nbytes
:
usize
)
-
>
i64
{
buf_get_impl
!
(
self
8
LittleEndian
:
:
read_int
nbytes
)
;
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
use
get_f32_be
or
get_f32_le
"
)
]
fn
get_f32
<
T
:
ByteOrder
>
(
&
mut
self
)
-
>
f32
where
Self
:
Sized
{
let
mut
buf
=
[
0
;
4
]
;
self
.
copy_to_slice
(
&
mut
buf
)
;
T
:
:
read_f32
(
&
buf
)
}
fn
get_f32_be
(
&
mut
self
)
-
>
f32
{
buf_get_impl
!
(
self
4
BigEndian
:
:
read_f32
)
;
}
fn
get_f32_le
(
&
mut
self
)
-
>
f32
{
buf_get_impl
!
(
self
4
LittleEndian
:
:
read_f32
)
;
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
use
get_f64_be
or
get_f64_le
"
)
]
fn
get_f64
<
T
:
ByteOrder
>
(
&
mut
self
)
-
>
f64
where
Self
:
Sized
{
let
mut
buf
=
[
0
;
8
]
;
self
.
copy_to_slice
(
&
mut
buf
)
;
T
:
:
read_f64
(
&
buf
)
}
fn
get_f64_be
(
&
mut
self
)
-
>
f64
{
buf_get_impl
!
(
self
8
BigEndian
:
:
read_f64
)
;
}
fn
get_f64_le
(
&
mut
self
)
-
>
f64
{
buf_get_impl
!
(
self
8
LittleEndian
:
:
read_f64
)
;
}
fn
collect
<
B
>
(
self
)
-
>
B
where
Self
:
Sized
B
:
FromBuf
{
B
:
:
from_buf
(
self
)
}
fn
take
(
self
limit
:
usize
)
-
>
Take
<
Self
>
where
Self
:
Sized
{
super
:
:
take
:
:
new
(
self
limit
)
}
fn
chain
<
U
>
(
self
next
:
U
)
-
>
Chain
<
Self
U
:
:
Buf
>
where
U
:
IntoBuf
Self
:
Sized
{
Chain
:
:
new
(
self
next
.
into_buf
(
)
)
}
fn
by_ref
(
&
mut
self
)
-
>
&
mut
Self
where
Self
:
Sized
{
self
}
fn
reader
(
self
)
-
>
Reader
<
Self
>
where
Self
:
Sized
{
super
:
:
reader
:
:
new
(
self
)
}
fn
iter
(
self
)
-
>
Iter
<
Self
>
where
Self
:
Sized
{
super
:
:
iter
:
:
new
(
self
)
}
}
impl
<
'
a
T
:
Buf
+
?
Sized
>
Buf
for
&
'
a
mut
T
{
fn
remaining
(
&
self
)
-
>
usize
{
(
*
*
self
)
.
remaining
(
)
}
fn
bytes
(
&
self
)
-
>
&
[
u8
]
{
(
*
*
self
)
.
bytes
(
)
}
fn
bytes_vec
<
'
b
>
(
&
'
b
self
dst
:
&
mut
[
&
'
b
IoVec
]
)
-
>
usize
{
(
*
*
self
)
.
bytes_vec
(
dst
)
}
fn
advance
(
&
mut
self
cnt
:
usize
)
{
(
*
*
self
)
.
advance
(
cnt
)
}
}
impl
<
T
:
Buf
+
?
Sized
>
Buf
for
Box
<
T
>
{
fn
remaining
(
&
self
)
-
>
usize
{
(
*
*
self
)
.
remaining
(
)
}
fn
bytes
(
&
self
)
-
>
&
[
u8
]
{
(
*
*
self
)
.
bytes
(
)
}
fn
bytes_vec
<
'
b
>
(
&
'
b
self
dst
:
&
mut
[
&
'
b
IoVec
]
)
-
>
usize
{
(
*
*
self
)
.
bytes_vec
(
dst
)
}
fn
advance
(
&
mut
self
cnt
:
usize
)
{
(
*
*
self
)
.
advance
(
cnt
)
}
}
impl
<
T
:
AsRef
<
[
u8
]
>
>
Buf
for
io
:
:
Cursor
<
T
>
{
fn
remaining
(
&
self
)
-
>
usize
{
let
len
=
self
.
get_ref
(
)
.
as_ref
(
)
.
len
(
)
;
let
pos
=
self
.
position
(
)
;
if
pos
>
=
len
as
u64
{
return
0
;
}
len
-
pos
as
usize
}
fn
bytes
(
&
self
)
-
>
&
[
u8
]
{
let
len
=
self
.
get_ref
(
)
.
as_ref
(
)
.
len
(
)
;
let
pos
=
self
.
position
(
)
as
usize
;
if
pos
>
=
len
{
return
Default
:
:
default
(
)
;
}
&
(
self
.
get_ref
(
)
.
as_ref
(
)
)
[
pos
.
.
]
}
fn
advance
(
&
mut
self
cnt
:
usize
)
{
let
pos
=
(
self
.
position
(
)
as
usize
)
.
checked_add
(
cnt
)
.
expect
(
"
overflow
"
)
;
assert
!
(
pos
<
=
self
.
get_ref
(
)
.
as_ref
(
)
.
len
(
)
)
;
self
.
set_position
(
pos
as
u64
)
;
}
}
impl
Buf
for
Option
<
[
u8
;
1
]
>
{
fn
remaining
(
&
self
)
-
>
usize
{
if
self
.
is_some
(
)
{
1
}
else
{
0
}
}
fn
bytes
(
&
self
)
-
>
&
[
u8
]
{
self
.
as_ref
(
)
.
map
(
AsRef
:
:
as_ref
)
.
unwrap_or
(
Default
:
:
default
(
)
)
}
fn
advance
(
&
mut
self
cnt
:
usize
)
{
if
cnt
=
=
0
{
return
;
}
if
self
.
is_none
(
)
{
panic
!
(
"
overflow
"
)
;
}
else
{
assert_eq
!
(
1
cnt
)
;
*
self
=
None
;
}
}
}
fn
_assert_trait_object
(
_b
:
&
Buf
)
{
}
