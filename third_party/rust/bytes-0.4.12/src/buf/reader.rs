use
{
Buf
}
;
use
std
:
:
{
cmp
io
}
;
#
[
derive
(
Debug
)
]
pub
struct
Reader
<
B
>
{
buf
:
B
}
pub
fn
new
<
B
>
(
buf
:
B
)
-
>
Reader
<
B
>
{
Reader
{
buf
:
buf
}
}
impl
<
B
:
Buf
>
Reader
<
B
>
{
pub
fn
get_ref
(
&
self
)
-
>
&
B
{
&
self
.
buf
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
B
{
&
mut
self
.
buf
}
pub
fn
into_inner
(
self
)
-
>
B
{
self
.
buf
}
}
impl
<
B
:
Buf
+
Sized
>
io
:
:
Read
for
Reader
<
B
>
{
fn
read
(
&
mut
self
dst
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
let
len
=
cmp
:
:
min
(
self
.
buf
.
remaining
(
)
dst
.
len
(
)
)
;
Buf
:
:
copy_to_slice
(
&
mut
self
.
buf
&
mut
dst
[
0
.
.
len
]
)
;
Ok
(
len
)
}
}
impl
<
B
:
Buf
+
Sized
>
io
:
:
BufRead
for
Reader
<
B
>
{
fn
fill_buf
(
&
mut
self
)
-
>
io
:
:
Result
<
&
[
u8
]
>
{
Ok
(
self
.
buf
.
bytes
(
)
)
}
fn
consume
(
&
mut
self
amt
:
usize
)
{
self
.
buf
.
advance
(
amt
)
}
}
