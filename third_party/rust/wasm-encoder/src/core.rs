mod
code
;
mod
custom
;
mod
data
;
mod
elements
;
mod
exports
;
mod
functions
;
mod
globals
;
mod
imports
;
mod
linking
;
mod
memories
;
mod
names
;
mod
start
;
mod
tables
;
mod
tags
;
mod
types
;
pub
use
code
:
:
*
;
pub
use
custom
:
:
*
;
pub
use
data
:
:
*
;
pub
use
elements
:
:
*
;
pub
use
exports
:
:
*
;
pub
use
functions
:
:
*
;
pub
use
globals
:
:
*
;
pub
use
imports
:
:
*
;
pub
use
linking
:
:
*
;
pub
use
memories
:
:
*
;
pub
use
names
:
:
*
;
pub
use
start
:
:
*
;
pub
use
tables
:
:
*
;
pub
use
tags
:
:
*
;
pub
use
types
:
:
*
;
use
crate
:
:
Encode
;
pub
(
crate
)
const
CORE_FUNCTION_SORT
:
u8
=
0x00
;
pub
(
crate
)
const
CORE_TABLE_SORT
:
u8
=
0x01
;
pub
(
crate
)
const
CORE_MEMORY_SORT
:
u8
=
0x02
;
pub
(
crate
)
const
CORE_GLOBAL_SORT
:
u8
=
0x03
;
pub
(
crate
)
const
CORE_TAG_SORT
:
u8
=
0x04
;
pub
trait
Section
:
Encode
{
fn
id
(
&
self
)
-
>
u8
;
}
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
#
[
repr
(
u8
)
]
pub
enum
SectionId
{
Custom
=
0
Type
=
1
Import
=
2
Function
=
3
Table
=
4
Memory
=
5
Global
=
6
Export
=
7
Start
=
8
Element
=
9
Code
=
10
Data
=
11
DataCount
=
12
Tag
=
13
}
impl
From
<
SectionId
>
for
u8
{
#
[
inline
]
fn
from
(
id
:
SectionId
)
-
>
u8
{
id
as
u8
}
}
impl
Encode
for
SectionId
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
sink
.
push
(
*
self
as
u8
)
;
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
Module
{
pub
(
crate
)
bytes
:
Vec
<
u8
>
}
impl
Module
{
#
[
rustfmt
:
:
skip
]
pub
fn
new
(
)
-
>
Self
{
Module
{
bytes
:
vec
!
[
/
/
Magic
0x00
0x61
0x73
0x6D
/
/
Version
0x01
0x00
0x00
0x00
]
}
}
pub
fn
section
(
&
mut
self
section
:
&
impl
Section
)
-
>
&
mut
Self
{
self
.
bytes
.
push
(
section
.
id
(
)
)
;
section
.
encode
(
&
mut
self
.
bytes
)
;
self
}
pub
fn
as_slice
(
&
self
)
-
>
&
[
u8
]
{
&
self
.
bytes
}
pub
fn
finish
(
self
)
-
>
Vec
<
u8
>
{
self
.
bytes
}
}
impl
Default
for
Module
{
fn
default
(
)
-
>
Self
{
Self
:
:
new
(
)
}
}
