use
crate
:
:
{
encode_section
ComponentSection
ComponentSectionId
ComponentValType
Encode
}
;
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
enum
CanonicalOption
{
UTF8
UTF16
CompactUTF16
Memory
(
u32
)
Realloc
(
u32
)
PostReturn
(
u32
)
}
impl
Encode
for
CanonicalOption
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
match
self
{
Self
:
:
UTF8
=
>
sink
.
push
(
0x00
)
Self
:
:
UTF16
=
>
sink
.
push
(
0x01
)
Self
:
:
CompactUTF16
=
>
sink
.
push
(
0x02
)
Self
:
:
Memory
(
idx
)
=
>
{
sink
.
push
(
0x03
)
;
idx
.
encode
(
sink
)
;
}
Self
:
:
Realloc
(
idx
)
=
>
{
sink
.
push
(
0x04
)
;
idx
.
encode
(
sink
)
;
}
Self
:
:
PostReturn
(
idx
)
=
>
{
sink
.
push
(
0x05
)
;
idx
.
encode
(
sink
)
;
}
}
}
}
#
[
derive
(
Clone
Debug
Default
)
]
pub
struct
CanonicalFunctionSection
{
bytes
:
Vec
<
u8
>
num_added
:
u32
}
impl
CanonicalFunctionSection
{
pub
fn
new
(
)
-
>
Self
{
Self
:
:
default
(
)
}
pub
fn
len
(
&
self
)
-
>
u32
{
self
.
num_added
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
num_added
=
=
0
}
pub
fn
lift
<
O
>
(
&
mut
self
core_func_index
:
u32
type_index
:
u32
options
:
O
)
-
>
&
mut
Self
where
O
:
IntoIterator
<
Item
=
CanonicalOption
>
O
:
:
IntoIter
:
ExactSizeIterator
{
let
options
=
options
.
into_iter
(
)
;
self
.
bytes
.
push
(
0x00
)
;
self
.
bytes
.
push
(
0x00
)
;
core_func_index
.
encode
(
&
mut
self
.
bytes
)
;
options
.
len
(
)
.
encode
(
&
mut
self
.
bytes
)
;
for
option
in
options
{
option
.
encode
(
&
mut
self
.
bytes
)
;
}
type_index
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
pub
fn
lower
<
O
>
(
&
mut
self
func_index
:
u32
options
:
O
)
-
>
&
mut
Self
where
O
:
IntoIterator
<
Item
=
CanonicalOption
>
O
:
:
IntoIter
:
ExactSizeIterator
{
let
options
=
options
.
into_iter
(
)
;
self
.
bytes
.
push
(
0x01
)
;
self
.
bytes
.
push
(
0x00
)
;
func_index
.
encode
(
&
mut
self
.
bytes
)
;
options
.
len
(
)
.
encode
(
&
mut
self
.
bytes
)
;
for
option
in
options
{
option
.
encode
(
&
mut
self
.
bytes
)
;
}
self
.
num_added
+
=
1
;
self
}
pub
fn
resource_new
(
&
mut
self
ty_index
:
u32
)
-
>
&
mut
Self
{
self
.
bytes
.
push
(
0x02
)
;
ty_index
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
pub
fn
resource_drop
(
&
mut
self
ty
:
ComponentValType
)
-
>
&
mut
Self
{
self
.
bytes
.
push
(
0x03
)
;
ty
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
pub
fn
resource_rep
(
&
mut
self
ty_index
:
u32
)
-
>
&
mut
Self
{
self
.
bytes
.
push
(
0x04
)
;
ty_index
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
}
impl
Encode
for
CanonicalFunctionSection
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
encode_section
(
sink
self
.
num_added
&
self
.
bytes
)
;
}
}
impl
ComponentSection
for
CanonicalFunctionSection
{
fn
id
(
&
self
)
-
>
u8
{
ComponentSectionId
:
:
CanonicalFunction
.
into
(
)
}
}
