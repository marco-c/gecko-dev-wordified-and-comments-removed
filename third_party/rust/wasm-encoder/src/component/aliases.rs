use
super
:
:
{
COMPONENT_SORT
CORE_MODULE_SORT
CORE_SORT
CORE_TYPE_SORT
TYPE_SORT
}
;
use
crate
:
:
{
encode_section
ComponentExportKind
ComponentSection
ComponentSectionId
Encode
ExportKind
}
;
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
enum
CoreOuterAliasKind
{
Type
}
impl
Encode
for
CoreOuterAliasKind
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
match
self
{
Self
:
:
Type
=
>
{
sink
.
push
(
CORE_TYPE_SORT
)
;
}
}
}
}
#
[
derive
(
Clone
Debug
Default
)
]
pub
struct
AliasSection
{
bytes
:
Vec
<
u8
>
num_added
:
u32
}
impl
AliasSection
{
pub
fn
new
(
)
-
>
Self
{
Self
:
:
default
(
)
}
pub
fn
len
(
&
self
)
-
>
u32
{
self
.
num_added
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
num_added
=
=
0
}
pub
fn
instance_export
(
&
mut
self
instance_index
:
u32
kind
:
ExportKind
name
:
&
str
)
-
>
&
mut
Self
{
kind
.
encode
(
&
mut
self
.
bytes
)
;
self
.
bytes
.
push
(
0x00
)
;
instance_index
.
encode
(
&
mut
self
.
bytes
)
;
name
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
pub
fn
outer
(
&
mut
self
count
:
u32
kind
:
CoreOuterAliasKind
index
:
u32
)
-
>
&
mut
Self
{
kind
.
encode
(
&
mut
self
.
bytes
)
;
self
.
bytes
.
push
(
0x01
)
;
count
.
encode
(
&
mut
self
.
bytes
)
;
index
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
}
impl
Encode
for
AliasSection
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
encode_section
(
sink
self
.
num_added
&
self
.
bytes
)
;
}
}
impl
ComponentSection
for
AliasSection
{
fn
id
(
&
self
)
-
>
u8
{
ComponentSectionId
:
:
CoreAlias
.
into
(
)
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
enum
ComponentOuterAliasKind
{
CoreModule
CoreType
Type
Component
}
impl
Encode
for
ComponentOuterAliasKind
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
match
self
{
Self
:
:
CoreModule
=
>
{
sink
.
push
(
CORE_SORT
)
;
sink
.
push
(
CORE_MODULE_SORT
)
;
}
Self
:
:
CoreType
=
>
{
sink
.
push
(
CORE_SORT
)
;
sink
.
push
(
CORE_TYPE_SORT
)
;
}
Self
:
:
Type
=
>
sink
.
push
(
TYPE_SORT
)
Self
:
:
Component
=
>
sink
.
push
(
COMPONENT_SORT
)
}
}
}
#
[
derive
(
Clone
Debug
Default
)
]
pub
struct
ComponentAliasSection
{
bytes
:
Vec
<
u8
>
num_added
:
u32
}
impl
ComponentAliasSection
{
pub
fn
new
(
)
-
>
Self
{
Self
:
:
default
(
)
}
pub
fn
len
(
&
self
)
-
>
u32
{
self
.
num_added
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
num_added
=
=
0
}
pub
fn
instance_export
(
&
mut
self
instance_index
:
u32
kind
:
ComponentExportKind
name
:
&
str
)
-
>
&
mut
Self
{
kind
.
encode
(
&
mut
self
.
bytes
)
;
self
.
bytes
.
push
(
0x00
)
;
instance_index
.
encode
(
&
mut
self
.
bytes
)
;
name
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
pub
fn
outer
(
&
mut
self
count
:
u32
kind
:
ComponentOuterAliasKind
index
:
u32
)
-
>
&
mut
Self
{
kind
.
encode
(
&
mut
self
.
bytes
)
;
self
.
bytes
.
push
(
0x01
)
;
count
.
encode
(
&
mut
self
.
bytes
)
;
index
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
}
impl
Encode
for
ComponentAliasSection
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
encode_section
(
sink
self
.
num_added
&
self
.
bytes
)
;
}
}
impl
ComponentSection
for
ComponentAliasSection
{
fn
id
(
&
self
)
-
>
u8
{
ComponentSectionId
:
:
Alias
.
into
(
)
}
}
