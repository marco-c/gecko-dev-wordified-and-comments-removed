use
super
:
:
*
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
ExportSection
{
bytes
:
Vec
<
u8
>
num_added
:
u32
}
impl
ExportSection
{
pub
fn
new
(
)
-
>
ExportSection
{
ExportSection
{
bytes
:
vec
!
[
]
num_added
:
0
}
}
pub
fn
len
(
&
self
)
-
>
u32
{
self
.
num_added
}
pub
fn
export
(
&
mut
self
name
:
&
str
export
:
Export
)
-
>
&
mut
Self
{
self
.
bytes
.
extend
(
encoders
:
:
str
(
name
)
)
;
export
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
}
impl
Section
for
ExportSection
{
fn
id
(
&
self
)
-
>
u8
{
SectionId
:
:
Export
.
into
(
)
}
fn
encode
<
S
>
(
&
self
sink
:
&
mut
S
)
where
S
:
Extend
<
u8
>
{
let
num_added
=
encoders
:
:
u32
(
self
.
num_added
)
;
let
n
=
num_added
.
len
(
)
;
sink
.
extend
(
encoders
:
:
u32
(
u32
:
:
try_from
(
n
+
self
.
bytes
.
len
(
)
)
.
unwrap
(
)
)
.
chain
(
num_added
)
.
chain
(
self
.
bytes
.
iter
(
)
.
copied
(
)
)
)
;
}
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
Export
{
Function
(
u32
)
Table
(
u32
)
Memory
(
u32
)
Global
(
u32
)
Tag
(
u32
)
Instance
(
u32
)
Module
(
u32
)
}
impl
Export
{
pub
(
crate
)
fn
encode
(
&
self
bytes
:
&
mut
Vec
<
u8
>
)
{
let
idx
=
match
*
self
{
Export
:
:
Function
(
x
)
=
>
{
bytes
.
push
(
ItemKind
:
:
Function
as
u8
)
;
x
}
Export
:
:
Table
(
x
)
=
>
{
bytes
.
push
(
ItemKind
:
:
Table
as
u8
)
;
x
}
Export
:
:
Memory
(
x
)
=
>
{
bytes
.
push
(
ItemKind
:
:
Memory
as
u8
)
;
x
}
Export
:
:
Global
(
x
)
=
>
{
bytes
.
push
(
ItemKind
:
:
Global
as
u8
)
;
x
}
Export
:
:
Tag
(
x
)
=
>
{
bytes
.
push
(
ItemKind
:
:
Tag
as
u8
)
;
x
}
Export
:
:
Instance
(
x
)
=
>
{
bytes
.
push
(
ItemKind
:
:
Instance
as
u8
)
;
x
}
Export
:
:
Module
(
x
)
=
>
{
bytes
.
push
(
ItemKind
:
:
Module
as
u8
)
;
x
}
}
;
bytes
.
extend
(
encoders
:
:
u32
(
idx
)
)
;
}
}
#
[
allow
(
missing_docs
)
]
#
[
repr
(
u8
)
]
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
ItemKind
{
Function
=
0x00
Table
=
0x01
Memory
=
0x02
Global
=
0x03
Tag
=
0x04
Module
=
0x05
Instance
=
0x06
}
