use
super
:
:
*
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
DataSection
{
bytes
:
Vec
<
u8
>
num_added
:
u32
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
DataSegment
<
'
a
D
>
{
pub
mode
:
DataSegmentMode
<
'
a
>
pub
data
:
D
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
DataSegmentMode
<
'
a
>
{
Active
{
memory_index
:
u32
offset
:
Instruction
<
'
a
>
}
Passive
}
impl
DataSection
{
pub
fn
new
(
)
-
>
DataSection
{
DataSection
{
bytes
:
vec
!
[
]
num_added
:
0
}
}
pub
fn
len
(
&
self
)
-
>
u32
{
self
.
num_added
}
pub
fn
segment
<
D
>
(
&
mut
self
segment
:
DataSegment
<
D
>
)
-
>
&
mut
Self
where
D
:
IntoIterator
<
Item
=
u8
>
D
:
:
IntoIter
:
ExactSizeIterator
{
match
segment
.
mode
{
DataSegmentMode
:
:
Passive
=
>
{
self
.
bytes
.
push
(
0x01
)
;
}
DataSegmentMode
:
:
Active
{
memory_index
:
0
offset
}
=
>
{
self
.
bytes
.
push
(
0x00
)
;
offset
.
encode
(
&
mut
self
.
bytes
)
;
Instruction
:
:
End
.
encode
(
&
mut
self
.
bytes
)
;
}
DataSegmentMode
:
:
Active
{
memory_index
offset
}
=
>
{
self
.
bytes
.
push
(
0x02
)
;
self
.
bytes
.
extend
(
encoders
:
:
u32
(
memory_index
)
)
;
offset
.
encode
(
&
mut
self
.
bytes
)
;
Instruction
:
:
End
.
encode
(
&
mut
self
.
bytes
)
;
}
}
let
data
=
segment
.
data
.
into_iter
(
)
;
self
.
bytes
.
extend
(
encoders
:
:
u32
(
u32
:
:
try_from
(
data
.
len
(
)
)
.
unwrap
(
)
)
)
;
self
.
bytes
.
extend
(
data
)
;
self
.
num_added
+
=
1
;
self
}
pub
fn
active
<
'
a
D
>
(
&
mut
self
memory_index
:
u32
offset
:
Instruction
<
'
a
>
data
:
D
)
-
>
&
mut
Self
where
D
:
IntoIterator
<
Item
=
u8
>
D
:
:
IntoIter
:
ExactSizeIterator
{
self
.
segment
(
DataSegment
{
mode
:
DataSegmentMode
:
:
Active
{
memory_index
offset
}
data
}
)
}
pub
fn
passive
<
'
a
D
>
(
&
mut
self
data
:
D
)
-
>
&
mut
Self
where
D
:
IntoIterator
<
Item
=
u8
>
D
:
:
IntoIter
:
ExactSizeIterator
{
self
.
segment
(
DataSegment
{
mode
:
DataSegmentMode
:
:
Passive
data
}
)
}
}
impl
Section
for
DataSection
{
fn
id
(
&
self
)
-
>
u8
{
SectionId
:
:
Data
.
into
(
)
}
fn
encode
<
S
>
(
&
self
sink
:
&
mut
S
)
where
S
:
Extend
<
u8
>
{
let
num_added
=
encoders
:
:
u32
(
self
.
num_added
)
;
let
n
=
num_added
.
len
(
)
;
sink
.
extend
(
encoders
:
:
u32
(
u32
:
:
try_from
(
n
+
self
.
bytes
.
len
(
)
)
.
unwrap
(
)
)
.
chain
(
num_added
)
.
chain
(
self
.
bytes
.
iter
(
)
.
copied
(
)
)
)
;
}
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
DataCountSection
{
pub
count
:
u32
}
impl
Section
for
DataCountSection
{
fn
id
(
&
self
)
-
>
u8
{
SectionId
:
:
DataCount
.
into
(
)
}
fn
encode
<
S
>
(
&
self
sink
:
&
mut
S
)
where
S
:
Extend
<
u8
>
{
let
count
=
encoders
:
:
u32
(
self
.
count
)
;
let
n
=
count
.
len
(
)
;
sink
.
extend
(
encoders
:
:
u32
(
u32
:
:
try_from
(
n
)
.
unwrap
(
)
)
.
chain
(
count
)
)
;
}
}
