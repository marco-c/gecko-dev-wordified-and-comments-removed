use
crate
:
:
{
encode_section
ConstExpr
Encode
RefType
Section
SectionId
ValType
}
;
#
[
derive
(
Clone
Default
Debug
)
]
pub
struct
TableSection
{
bytes
:
Vec
<
u8
>
num_added
:
u32
}
impl
TableSection
{
pub
fn
new
(
)
-
>
Self
{
Self
:
:
default
(
)
}
pub
fn
len
(
&
self
)
-
>
u32
{
self
.
num_added
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
num_added
=
=
0
}
pub
fn
table
(
&
mut
self
table_type
:
TableType
)
-
>
&
mut
Self
{
table_type
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
pub
fn
table_with_init
(
&
mut
self
table_type
:
TableType
init
:
&
ConstExpr
)
-
>
&
mut
Self
{
self
.
bytes
.
push
(
0x40
)
;
self
.
bytes
.
push
(
0x00
)
;
table_type
.
encode
(
&
mut
self
.
bytes
)
;
init
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
}
impl
Encode
for
TableSection
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
encode_section
(
sink
self
.
num_added
&
self
.
bytes
)
;
}
}
impl
Section
for
TableSection
{
fn
id
(
&
self
)
-
>
u8
{
SectionId
:
:
Table
.
into
(
)
}
}
#
[
derive
(
Clone
Copy
Debug
PartialEq
Eq
Hash
)
]
pub
struct
TableType
{
pub
element_type
:
RefType
pub
table64
:
bool
pub
minimum
:
u64
pub
maximum
:
Option
<
u64
>
}
impl
TableType
{
pub
fn
index_type
(
&
self
)
-
>
ValType
{
if
self
.
table64
{
ValType
:
:
I64
}
else
{
ValType
:
:
I32
}
}
}
impl
Encode
for
TableType
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
let
mut
flags
=
0
;
if
self
.
maximum
.
is_some
(
)
{
flags
|
=
0b001
;
}
if
self
.
table64
{
flags
|
=
0b100
;
}
self
.
element_type
.
encode
(
sink
)
;
sink
.
push
(
flags
)
;
self
.
minimum
.
encode
(
sink
)
;
if
let
Some
(
max
)
=
self
.
maximum
{
max
.
encode
(
sink
)
;
}
}
}
#
[
cfg
(
feature
=
"
wasmparser
"
)
]
impl
TryFrom
<
wasmparser
:
:
TableType
>
for
TableType
{
type
Error
=
(
)
;
fn
try_from
(
table_ty
:
wasmparser
:
:
TableType
)
-
>
Result
<
Self
Self
:
:
Error
>
{
Ok
(
TableType
{
element_type
:
table_ty
.
element_type
.
try_into
(
)
?
minimum
:
table_ty
.
initial
maximum
:
table_ty
.
maximum
table64
:
table_ty
.
table64
}
)
}
}
