use
super
:
:
{
CORE_FUNCTION_SORT
CORE_GLOBAL_SORT
CORE_MEMORY_SORT
CORE_TABLE_SORT
CORE_TAG_SORT
}
;
use
crate
:
:
{
encode_section
Encode
Section
SectionId
}
;
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
#
[
repr
(
u8
)
]
pub
enum
ExportKind
{
Func
=
CORE_FUNCTION_SORT
Table
=
CORE_TABLE_SORT
Memory
=
CORE_MEMORY_SORT
Global
=
CORE_GLOBAL_SORT
Tag
=
CORE_TAG_SORT
}
impl
Encode
for
ExportKind
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
sink
.
push
(
*
self
as
u8
)
;
}
}
#
[
derive
(
Clone
Debug
Default
)
]
pub
struct
ExportSection
{
bytes
:
Vec
<
u8
>
num_added
:
u32
}
impl
ExportSection
{
pub
fn
new
(
)
-
>
Self
{
Self
:
:
default
(
)
}
pub
fn
len
(
&
self
)
-
>
u32
{
self
.
num_added
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
num_added
=
=
0
}
pub
fn
export
(
&
mut
self
name
:
&
str
kind
:
ExportKind
index
:
u32
)
-
>
&
mut
Self
{
name
.
encode
(
&
mut
self
.
bytes
)
;
kind
.
encode
(
&
mut
self
.
bytes
)
;
index
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
}
impl
Encode
for
ExportSection
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
encode_section
(
sink
self
.
num_added
&
self
.
bytes
)
;
}
}
impl
Section
for
ExportSection
{
fn
id
(
&
self
)
-
>
u8
{
SectionId
:
:
Export
.
into
(
)
}
}
