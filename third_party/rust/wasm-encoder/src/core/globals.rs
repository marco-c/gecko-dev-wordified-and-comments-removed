use
crate
:
:
{
encode_section
Encode
Instruction
Section
SectionId
ValType
}
;
#
[
derive
(
Clone
Default
Debug
)
]
pub
struct
GlobalSection
{
bytes
:
Vec
<
u8
>
num_added
:
u32
}
impl
GlobalSection
{
pub
fn
new
(
)
-
>
Self
{
Self
:
:
default
(
)
}
pub
fn
len
(
&
self
)
-
>
u32
{
self
.
num_added
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
num_added
=
=
0
}
pub
fn
global
(
&
mut
self
global_type
:
GlobalType
init_expr
:
&
Instruction
<
'
_
>
)
-
>
&
mut
Self
{
global_type
.
encode
(
&
mut
self
.
bytes
)
;
init_expr
.
encode
(
&
mut
self
.
bytes
)
;
Instruction
:
:
End
.
encode
(
&
mut
self
.
bytes
)
;
self
.
num_added
+
=
1
;
self
}
pub
fn
raw
(
&
mut
self
data
:
&
[
u8
]
)
-
>
&
mut
Self
{
self
.
bytes
.
extend
(
data
)
;
self
.
num_added
+
=
1
;
self
}
}
impl
Encode
for
GlobalSection
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
encode_section
(
sink
self
.
num_added
&
self
.
bytes
)
;
}
}
impl
Section
for
GlobalSection
{
fn
id
(
&
self
)
-
>
u8
{
SectionId
:
:
Global
.
into
(
)
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
Hash
)
]
pub
struct
GlobalType
{
pub
val_type
:
ValType
pub
mutable
:
bool
}
impl
Encode
for
GlobalType
{
fn
encode
(
&
self
sink
:
&
mut
Vec
<
u8
>
)
{
self
.
val_type
.
encode
(
sink
)
;
sink
.
push
(
self
.
mutable
as
u8
)
;
}
}
