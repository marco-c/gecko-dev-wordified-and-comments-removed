use
std
:
:
convert
:
:
TryFrom
;
pub
fn
u32
(
n
:
u32
)
-
>
impl
ExactSizeIterator
<
Item
=
u8
>
{
let
mut
buf
=
[
0
;
5
]
;
let
n
=
leb128
:
:
write
:
:
unsigned
(
&
mut
&
mut
buf
[
.
.
]
n
.
into
(
)
)
.
unwrap
(
)
;
<
_
>
:
:
into_iter
(
buf
)
.
take
(
n
)
}
pub
fn
u64
(
n
:
u64
)
-
>
impl
ExactSizeIterator
<
Item
=
u8
>
{
let
mut
buf
=
[
0
;
10
]
;
let
n
=
leb128
:
:
write
:
:
unsigned
(
&
mut
&
mut
buf
[
.
.
]
n
.
into
(
)
)
.
unwrap
(
)
;
<
_
>
:
:
into_iter
(
buf
)
.
take
(
n
)
}
pub
fn
s32
(
x
:
i32
)
-
>
impl
ExactSizeIterator
<
Item
=
u8
>
{
let
mut
buf
=
[
0
;
5
]
;
let
n
=
leb128
:
:
write
:
:
signed
(
&
mut
&
mut
buf
[
.
.
]
x
.
into
(
)
)
.
unwrap
(
)
;
<
_
>
:
:
into_iter
(
buf
)
.
take
(
n
)
}
pub
fn
s33
(
x
:
i64
)
-
>
impl
ExactSizeIterator
<
Item
=
u8
>
{
assert
!
(
{
let
mask
=
1
<
<
33
<
<
30
>
>
30
;
x
!
=
mask
&
&
(
x
&
mask
=
=
0
)
=
=
(
x
>
=
0
)
}
)
;
let
mut
buf
=
[
0
;
5
]
;
let
n
=
leb128
:
:
write
:
:
signed
(
&
mut
&
mut
buf
[
.
.
]
x
)
.
unwrap
(
)
;
<
_
>
:
:
into_iter
(
buf
)
.
take
(
n
)
}
pub
fn
s64
(
x
:
i64
)
-
>
impl
ExactSizeIterator
<
Item
=
u8
>
{
let
mut
buf
=
[
0
;
10
]
;
let
n
=
leb128
:
:
write
:
:
signed
(
&
mut
&
mut
buf
[
.
.
]
x
)
.
unwrap
(
)
;
<
_
>
:
:
into_iter
(
buf
)
.
take
(
n
)
}
pub
fn
str
<
'
a
>
(
s
:
&
'
a
str
)
-
>
impl
Iterator
<
Item
=
u8
>
+
'
a
{
u32
(
u32
:
:
try_from
(
s
.
len
(
)
)
.
unwrap
(
)
)
.
chain
(
s
.
as_bytes
(
)
.
iter
(
)
.
copied
(
)
)
}
