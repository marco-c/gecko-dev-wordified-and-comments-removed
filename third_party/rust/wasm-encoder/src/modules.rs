use
super
:
:
*
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
ModuleSection
{
bytes
:
Vec
<
u8
>
num_added
:
u32
}
impl
ModuleSection
{
pub
fn
new
(
)
-
>
ModuleSection
{
ModuleSection
{
bytes
:
vec
!
[
]
num_added
:
0
}
}
pub
fn
len
(
&
self
)
-
>
u32
{
self
.
num_added
}
pub
fn
module
(
&
mut
self
module
:
&
Module
)
-
>
&
mut
Self
{
self
.
bytes
.
extend
(
encoders
:
:
u32
(
u32
:
:
try_from
(
module
.
bytes
.
len
(
)
)
.
unwrap
(
)
)
.
chain
(
module
.
bytes
.
iter
(
)
.
copied
(
)
)
)
;
self
.
num_added
+
=
1
;
self
}
}
impl
Section
for
ModuleSection
{
fn
id
(
&
self
)
-
>
u8
{
SectionId
:
:
Module
.
into
(
)
}
fn
encode
<
S
>
(
&
self
sink
:
&
mut
S
)
where
S
:
Extend
<
u8
>
{
let
num_added
=
encoders
:
:
u32
(
self
.
num_added
)
;
let
n
=
num_added
.
len
(
)
;
sink
.
extend
(
encoders
:
:
u32
(
u32
:
:
try_from
(
n
+
self
.
bytes
.
len
(
)
)
.
unwrap
(
)
)
.
chain
(
num_added
)
.
chain
(
self
.
bytes
.
iter
(
)
.
copied
(
)
)
)
;
}
}
