use
{
crate
:
:
{
private
ErrorList
WriteErrorList
}
std
:
:
ops
:
:
{
Deref
DerefMut
}
}
;
pub
struct
Sublist
<
'
a
E
MapFn
Parent
ParentErr
>
where
MapFn
:
FnOnce
(
ErrorList
<
E
>
)
-
>
ParentErr
Parent
:
WriteErrorList
<
ParentErr
>
{
list
:
ErrorList
<
E
>
map_fn_and_parent
:
Option
<
(
MapFn
&
'
a
mut
Parent
)
>
}
impl
<
'
a
E
MapFn
Parent
ParentErr
>
Sublist
<
'
a
E
MapFn
Parent
ParentErr
>
where
MapFn
:
FnOnce
(
ErrorList
<
E
>
)
-
>
ParentErr
Parent
:
WriteErrorList
<
ParentErr
>
{
pub
fn
new
(
map_fn
:
MapFn
parent
:
&
'
a
mut
Parent
)
-
>
Self
{
Self
{
list
:
ErrorList
:
:
default
(
)
map_fn_and_parent
:
Some
(
(
map_fn
parent
)
)
}
}
}
impl
<
'
a
E
MapFn
Parent
ParentErr
>
Drop
for
Sublist
<
'
a
E
MapFn
Parent
ParentErr
>
where
MapFn
:
FnOnce
(
ErrorList
<
E
>
)
-
>
ParentErr
Parent
:
WriteErrorList
<
ParentErr
>
{
fn
drop
(
&
mut
self
)
{
if
!
self
.
list
.
is_empty
(
)
{
let
list
=
std
:
:
mem
:
:
take
(
&
mut
self
.
list
)
;
let
(
map_fn
parent
)
=
self
.
map_fn_and_parent
.
take
(
)
.
unwrap
(
)
;
let
parent_error
=
map_fn
(
list
)
;
parent
.
push
(
parent_error
)
;
}
}
}
impl
<
'
a
E
MapFn
Parent
ParentErr
>
Deref
for
Sublist
<
'
a
E
MapFn
Parent
ParentErr
>
where
MapFn
:
FnOnce
(
ErrorList
<
E
>
)
-
>
ParentErr
Parent
:
WriteErrorList
<
ParentErr
>
{
type
Target
=
ErrorList
<
E
>
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
self
.
list
}
}
impl
<
'
a
E
MapFn
Parent
ParentErr
>
DerefMut
for
Sublist
<
'
a
E
MapFn
Parent
ParentErr
>
where
MapFn
:
FnOnce
(
ErrorList
<
E
>
)
-
>
ParentErr
Parent
:
WriteErrorList
<
ParentErr
>
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
Self
:
:
Target
{
&
mut
self
.
list
}
}
impl
<
'
a
E
MapFn
Parent
ParentErr
>
private
:
:
Sealed
<
E
>
for
Sublist
<
'
a
E
MapFn
Parent
ParentErr
>
where
MapFn
:
FnOnce
(
ErrorList
<
E
>
)
-
>
ParentErr
Parent
:
WriteErrorList
<
ParentErr
>
{
}
impl
<
'
a
E
MapFn
Parent
ParentErr
>
WriteErrorList
<
E
>
for
Sublist
<
'
a
E
MapFn
Parent
ParentErr
>
where
MapFn
:
FnOnce
(
ErrorList
<
E
>
)
-
>
ParentErr
Parent
:
WriteErrorList
<
ParentErr
>
{
fn
push
(
&
mut
self
error
:
E
)
{
self
.
list
.
push
(
error
)
}
fn
subwriter
<
'
sub
SubMapFn
SubErr
:
'
sub
>
(
&
'
sub
mut
self
map_fn
:
SubMapFn
)
-
>
impl
WriteErrorList
<
SubErr
>
+
'
sub
where
SubMapFn
:
FnOnce
(
ErrorList
<
SubErr
>
)
-
>
E
+
'
sub
{
self
.
sublist
(
map_fn
)
}
}
pub
struct
DontCare
;
impl
<
E
>
private
:
:
Sealed
<
E
>
for
DontCare
{
}
impl
<
E
>
WriteErrorList
<
E
>
for
DontCare
{
fn
push
(
&
mut
self
_error
:
E
)
{
}
fn
subwriter
<
'
sub
SubMapFn
SubErr
:
'
sub
>
(
&
'
sub
mut
self
_map_fn
:
SubMapFn
)
-
>
impl
WriteErrorList
<
SubErr
>
+
'
sub
where
SubMapFn
:
FnOnce
(
ErrorList
<
SubErr
>
)
-
>
E
+
'
sub
{
DontCare
}
}
#
[
derive
(
Clone
Copy
Debug
Default
Eq
Hash
PartialEq
)
]
pub
struct
ErrorOccurred
(
bool
)
;
impl
ErrorOccurred
{
pub
fn
as_bool
(
&
self
)
-
>
bool
{
self
.
0
}
}
impl
<
E
>
private
:
:
Sealed
<
E
>
for
ErrorOccurred
{
}
impl
<
E
>
WriteErrorList
<
E
>
for
ErrorOccurred
{
fn
push
(
&
mut
self
_error
:
E
)
{
self
.
0
=
true
;
}
fn
subwriter
<
'
sub
SubMapFn
SubErr
:
'
sub
>
(
&
'
sub
mut
self
_map_fn
:
SubMapFn
)
-
>
impl
WriteErrorList
<
SubErr
>
+
'
sub
where
SubMapFn
:
FnOnce
(
ErrorList
<
SubErr
>
)
-
>
E
+
'
sub
{
self
}
}
