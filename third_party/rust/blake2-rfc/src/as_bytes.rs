use
core
:
:
mem
;
use
core
:
:
slice
;
pub
unsafe
trait
Safe
{
}
pub
trait
AsBytes
{
fn
as_bytes
(
&
self
)
-
>
&
[
u8
]
;
fn
as_mut_bytes
(
&
mut
self
)
-
>
&
mut
[
u8
]
;
}
impl
<
T
:
Safe
>
AsBytes
for
[
T
]
{
#
[
inline
]
fn
as_bytes
(
&
self
)
-
>
&
[
u8
]
{
unsafe
{
slice
:
:
from_raw_parts
(
self
.
as_ptr
(
)
as
*
const
u8
self
.
len
(
)
*
mem
:
:
size_of
:
:
<
T
>
(
)
)
}
}
#
[
inline
]
fn
as_mut_bytes
(
&
mut
self
)
-
>
&
mut
[
u8
]
{
unsafe
{
slice
:
:
from_raw_parts_mut
(
self
.
as_mut_ptr
(
)
as
*
mut
u8
self
.
len
(
)
*
mem
:
:
size_of
:
:
<
T
>
(
)
)
}
}
}
unsafe
impl
Safe
for
u8
{
}
unsafe
impl
Safe
for
u16
{
}
unsafe
impl
Safe
for
u32
{
}
unsafe
impl
Safe
for
u64
{
}
unsafe
impl
Safe
for
i8
{
}
unsafe
impl
Safe
for
i16
{
}
unsafe
impl
Safe
for
i32
{
}
unsafe
impl
Safe
for
i64
{
}
