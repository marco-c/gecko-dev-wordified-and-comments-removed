use
super
:
:
Style
;
#
[
derive
(
PartialEq
Clone
Copy
Debug
)
]
pub
enum
Difference
{
ExtraStyles
(
Style
)
Reset
NoDifference
}
impl
Difference
{
pub
fn
between
(
first
:
&
Style
next
:
&
Style
)
-
>
Difference
{
use
self
:
:
Difference
:
:
*
;
if
first
=
=
next
{
return
NoDifference
;
}
if
first
.
is_bold
&
&
!
next
.
is_bold
{
return
Reset
;
}
if
first
.
is_dimmed
&
&
!
next
.
is_dimmed
{
return
Reset
;
}
if
first
.
is_italic
&
&
!
next
.
is_italic
{
return
Reset
;
}
if
first
.
is_underline
&
&
!
next
.
is_underline
{
return
Reset
;
}
if
first
.
is_blink
&
&
!
next
.
is_blink
{
return
Reset
;
}
if
first
.
is_reverse
&
&
!
next
.
is_reverse
{
return
Reset
;
}
if
first
.
is_hidden
&
&
!
next
.
is_hidden
{
return
Reset
;
}
if
first
.
is_strikethrough
&
&
!
next
.
is_strikethrough
{
return
Reset
;
}
if
first
.
foreground
.
is_some
(
)
&
&
next
.
foreground
.
is_none
(
)
{
return
Reset
;
}
if
first
.
background
.
is_some
(
)
&
&
next
.
background
.
is_none
(
)
{
return
Reset
;
}
let
mut
extra_styles
=
Style
:
:
default
(
)
;
if
first
.
is_bold
!
=
next
.
is_bold
{
extra_styles
.
is_bold
=
true
;
}
if
first
.
is_dimmed
!
=
next
.
is_dimmed
{
extra_styles
.
is_dimmed
=
true
;
}
if
first
.
is_italic
!
=
next
.
is_italic
{
extra_styles
.
is_italic
=
true
;
}
if
first
.
is_underline
!
=
next
.
is_underline
{
extra_styles
.
is_underline
=
true
;
}
if
first
.
is_blink
!
=
next
.
is_blink
{
extra_styles
.
is_blink
=
true
;
}
if
first
.
is_reverse
!
=
next
.
is_reverse
{
extra_styles
.
is_reverse
=
true
;
}
if
first
.
is_hidden
!
=
next
.
is_hidden
{
extra_styles
.
is_hidden
=
true
;
}
if
first
.
is_strikethrough
!
=
next
.
is_strikethrough
{
extra_styles
.
is_strikethrough
=
true
;
}
if
first
.
foreground
!
=
next
.
foreground
{
extra_styles
.
foreground
=
next
.
foreground
;
}
if
first
.
background
!
=
next
.
background
{
extra_styles
.
background
=
next
.
background
;
}
ExtraStyles
(
extra_styles
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
super
:
:
Difference
:
:
*
;
use
style
:
:
Colour
:
:
*
;
use
style
:
:
Style
;
fn
style
(
)
-
>
Style
{
Style
:
:
new
(
)
}
macro_rules
!
test
{
(
name
:
ident
:
first
:
expr
;
next
:
expr
=
>
result
:
expr
)
=
>
{
#
[
test
]
fn
name
(
)
{
assert_eq
!
(
result
Difference
:
:
between
(
&
first
&
next
)
)
;
}
}
;
}
test
!
(
nothing
:
Green
.
normal
(
)
;
Green
.
normal
(
)
=
>
NoDifference
)
;
test
!
(
uppercase
:
Green
.
normal
(
)
;
Green
.
bold
(
)
=
>
ExtraStyles
(
style
(
)
.
bold
(
)
)
)
;
test
!
(
lowercase
:
Green
.
bold
(
)
;
Green
.
normal
(
)
=
>
Reset
)
;
test
!
(
nothing2
:
Green
.
bold
(
)
;
Green
.
bold
(
)
=
>
NoDifference
)
;
test
!
(
colour_change
:
Red
.
normal
(
)
;
Blue
.
normal
(
)
=
>
ExtraStyles
(
Blue
.
normal
(
)
)
)
;
test
!
(
addition_of_blink
:
style
(
)
;
style
(
)
.
blink
(
)
=
>
ExtraStyles
(
style
(
)
.
blink
(
)
)
)
;
test
!
(
addition_of_dimmed
:
style
(
)
;
style
(
)
.
dimmed
(
)
=
>
ExtraStyles
(
style
(
)
.
dimmed
(
)
)
)
;
test
!
(
addition_of_hidden
:
style
(
)
;
style
(
)
.
hidden
(
)
=
>
ExtraStyles
(
style
(
)
.
hidden
(
)
)
)
;
test
!
(
addition_of_reverse
:
style
(
)
;
style
(
)
.
reverse
(
)
=
>
ExtraStyles
(
style
(
)
.
reverse
(
)
)
)
;
test
!
(
addition_of_strikethrough
:
style
(
)
;
style
(
)
.
strikethrough
(
)
=
>
ExtraStyles
(
style
(
)
.
strikethrough
(
)
)
)
;
test
!
(
removal_of_strikethrough
:
style
(
)
.
strikethrough
(
)
;
style
(
)
=
>
Reset
)
;
test
!
(
removal_of_reverse
:
style
(
)
.
reverse
(
)
;
style
(
)
=
>
Reset
)
;
test
!
(
removal_of_hidden
:
style
(
)
.
hidden
(
)
;
style
(
)
=
>
Reset
)
;
test
!
(
removal_of_dimmed
:
style
(
)
.
dimmed
(
)
;
style
(
)
=
>
Reset
)
;
test
!
(
removal_of_blink
:
style
(
)
.
blink
(
)
;
style
(
)
=
>
Reset
)
;
}
