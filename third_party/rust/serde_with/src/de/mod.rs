#
[
cfg
(
feature
=
"
alloc
"
)
]
mod
duplicates
;
mod
impls
;
use
crate
:
:
prelude
:
:
*
;
pub
trait
DeserializeAs
<
'
de
T
>
:
Sized
{
fn
deserialize_as
<
D
>
(
deserializer
:
D
)
-
>
Result
<
T
D
:
:
Error
>
where
D
:
Deserializer
<
'
de
>
;
}
pub
struct
DeserializeAsWrap
<
T
U
>
{
value
:
T
marker
:
PhantomData
<
U
>
}
impl
<
T
U
>
DeserializeAsWrap
<
T
U
>
{
pub
fn
into_inner
(
self
)
-
>
T
{
self
.
value
}
}
impl
<
'
de
T
U
>
Deserialize
<
'
de
>
for
DeserializeAsWrap
<
T
U
>
where
U
:
DeserializeAs
<
'
de
T
>
{
fn
deserialize
<
D
>
(
deserializer
:
D
)
-
>
Result
<
Self
D
:
:
Error
>
where
D
:
Deserializer
<
'
de
>
{
U
:
:
deserialize_as
(
deserializer
)
.
map
(
|
value
|
Self
{
value
marker
:
PhantomData
}
)
}
}
impl
<
T
:
?
Sized
>
As
<
T
>
{
pub
fn
deserialize
<
'
de
D
I
>
(
deserializer
:
D
)
-
>
Result
<
I
D
:
:
Error
>
where
T
:
DeserializeAs
<
'
de
I
>
D
:
Deserializer
<
'
de
>
{
T
:
:
deserialize_as
(
deserializer
)
}
}
