use
crate
:
:
{
de
:
:
DeserializeAs
ser
:
:
SerializeAs
}
;
use
serde
:
:
{
de
:
:
DeserializeOwned
Deserializer
Serialize
Serializer
}
;
pub
mod
nested
{
use
serde
:
:
{
de
:
:
{
DeserializeOwned
Deserializer
Error
Visitor
}
ser
:
:
{
self
Serialize
Serializer
}
}
;
use
std
:
:
{
fmt
marker
:
:
PhantomData
}
;
pub
fn
deserialize
<
'
de
D
T
>
(
deserializer
:
D
)
-
>
Result
<
T
D
:
:
Error
>
where
D
:
Deserializer
<
'
de
>
T
:
DeserializeOwned
{
#
[
derive
(
Default
)
]
struct
Helper
<
S
:
DeserializeOwned
>
(
PhantomData
<
S
>
)
;
impl
<
'
de
S
>
Visitor
<
'
de
>
for
Helper
<
S
>
where
S
:
DeserializeOwned
{
type
Value
=
S
;
fn
expecting
(
&
self
formatter
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
formatter
"
valid
json
object
"
)
}
fn
visit_str
<
E
>
(
self
value
:
&
str
)
-
>
Result
<
S
E
>
where
E
:
Error
{
serde_json
:
:
from_str
(
value
)
.
map_err
(
Error
:
:
custom
)
}
}
deserializer
.
deserialize_str
(
Helper
(
PhantomData
)
)
}
pub
fn
serialize
<
T
S
>
(
value
:
&
T
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
T
:
Serialize
S
:
Serializer
{
let
s
=
serde_json
:
:
to_string
(
value
)
.
map_err
(
ser
:
:
Error
:
:
custom
)
?
;
serializer
.
serialize_str
(
&
*
s
)
}
}
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
JsonString
;
impl
<
T
>
SerializeAs
<
T
>
for
JsonString
where
T
:
Serialize
{
fn
serialize_as
<
S
>
(
source
:
&
T
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
Serializer
{
crate
:
:
json
:
:
nested
:
:
serialize
(
source
serializer
)
}
}
impl
<
'
de
T
>
DeserializeAs
<
'
de
T
>
for
JsonString
where
T
:
DeserializeOwned
{
fn
deserialize_as
<
D
>
(
deserializer
:
D
)
-
>
Result
<
T
D
:
:
Error
>
where
D
:
Deserializer
<
'
de
>
{
crate
:
:
json
:
:
nested
:
:
deserialize
(
deserializer
)
}
}
