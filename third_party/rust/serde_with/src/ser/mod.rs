#
[
cfg
(
feature
=
"
alloc
"
)
]
mod
duplicates
;
mod
impls
;
use
crate
:
:
prelude
:
:
*
;
pub
trait
SerializeAs
<
T
:
?
Sized
>
{
fn
serialize_as
<
S
>
(
source
:
&
T
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
Serializer
;
}
pub
struct
SerializeAsWrap
<
'
a
T
:
?
Sized
U
:
?
Sized
>
{
value
:
&
'
a
T
marker
:
PhantomData
<
U
>
}
impl
<
'
a
T
U
>
SerializeAsWrap
<
'
a
T
U
>
where
T
:
?
Sized
U
:
?
Sized
{
pub
fn
new
(
value
:
&
'
a
T
)
-
>
Self
{
Self
{
value
marker
:
PhantomData
}
}
}
impl
<
'
a
T
U
>
Serialize
for
SerializeAsWrap
<
'
a
T
U
>
where
T
:
?
Sized
U
:
?
Sized
U
:
SerializeAs
<
T
>
{
fn
serialize
<
S
>
(
&
self
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
Serializer
{
U
:
:
serialize_as
(
self
.
value
serializer
)
}
}
impl
<
'
a
T
U
>
From
<
&
'
a
T
>
for
SerializeAsWrap
<
'
a
T
U
>
where
T
:
?
Sized
U
:
?
Sized
U
:
SerializeAs
<
T
>
{
fn
from
(
value
:
&
'
a
T
)
-
>
Self
{
Self
:
:
new
(
value
)
}
}
impl
<
T
:
?
Sized
>
As
<
T
>
{
pub
fn
serialize
<
S
I
>
(
value
:
&
I
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
Serializer
T
:
SerializeAs
<
I
>
I
:
?
Sized
{
T
:
:
serialize_as
(
value
serializer
)
}
}
