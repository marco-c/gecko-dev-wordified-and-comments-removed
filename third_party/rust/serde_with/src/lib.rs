#
!
[
warn
(
clippy
:
:
semicolon_if_nothing_returned
missing_docs
rust_2018_idioms
rustdoc
:
:
missing_crate_level_docs
trivial_casts
trivial_numeric_casts
unused_extern_crates
unused_import_braces
unused_qualifications
variant_size_differences
)
]
#
!
[
doc
(
test
(
attr
(
forbid
(
unsafe_code
)
)
)
)
]
#
!
[
doc
(
test
(
attr
(
deny
(
missing_debug_implementations
trivial_casts
trivial_numeric_casts
unused_extern_crates
unused_import_braces
unused_qualifications
)
)
)
)
]
#
!
[
doc
(
test
(
attr
(
warn
(
rust_2018_idioms
)
)
)
)
]
#
!
[
doc
(
test
(
no_crate_inject
)
)
]
#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
serde_with
/
3
.
0
.
0
/
"
)
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_cfg
)
)
]
#
!
[
allow
(
unknown_lints
clippy
:
:
only_used_in_recursion
clippy
:
:
derive_partial_eq_without_eq
clippy
:
:
explicit_auto_deref
)
]
#
!
[
no_std
]
#
[
cfg
(
feature
=
"
alloc
"
)
]
extern
crate
alloc
;
#
[
doc
(
hidden
)
]
pub
extern
crate
core
;
#
[
doc
(
hidden
)
]
pub
extern
crate
serde
;
#
[
cfg
(
feature
=
"
std
"
)
]
extern
crate
std
;
#
[
cfg
(
feature
=
"
base64
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
base64
"
)
)
)
]
pub
mod
base64
;
#
[
cfg
(
feature
=
"
chrono_0_4
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
chrono_0_4
"
)
)
)
]
pub
mod
chrono_0_4
;
#
[
cfg
(
feature
=
"
chrono
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
chrono
"
)
)
)
]
pub
mod
chrono
{
pub
use
chrono_0_4
:
:
*
;
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
mod
content
;
pub
mod
de
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
mod
duplicate_key_impls
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
mod
enum_map
;
#
[
cfg
(
feature
=
"
std
"
)
]
mod
flatten_maybe
;
pub
mod
formats
;
#
[
cfg
(
feature
=
"
hex
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
hex
"
)
)
)
]
pub
mod
hex
;
#
[
cfg
(
feature
=
"
json
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
json
"
)
)
)
]
pub
mod
json
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
mod
key_value_map
;
pub
mod
rust
;
pub
mod
ser
;
#
[
cfg
(
feature
=
"
std
"
)
]
mod
serde_conv
;
#
[
cfg
(
feature
=
"
time_0_3
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
time_0_3
"
)
)
)
]
pub
mod
time_0_3
;
mod
utils
;
#
[
cfg
(
feature
=
"
std
"
)
]
#
[
doc
(
hidden
)
]
pub
mod
with_prefix
;
#
[
cfg
(
feature
=
"
guide
"
)
]
#
[
allow
(
unused_macro_rules
)
]
macro_rules
!
generate_guide
{
(
pub
mod
name
:
ident
;
(
rest
:
tt
)
*
)
=
>
{
generate_guide
!
(
gen
"
.
"
pub
mod
name
{
}
(
rest
)
*
)
;
}
;
(
pub
mod
name
:
ident
{
(
children
:
tt
)
*
}
(
rest
:
tt
)
*
)
=
>
{
generate_guide
!
(
gen
"
.
"
pub
mod
name
{
(
children
)
*
}
(
rest
)
*
)
;
}
;
(
gen
prefix
:
expr
)
=
>
{
}
;
(
gen
prefix
:
expr
pub
mod
name
:
ident
;
(
rest
:
tt
)
*
)
=
>
{
generate_guide
!
(
gen
prefix
pub
mod
name
{
}
(
rest
)
*
)
;
}
;
(
gen
prefix
:
expr
code
pub
mod
name
:
ident
;
(
rest
:
tt
)
*
)
=
>
{
pub
mod
name
;
generate_guide
!
(
gen
prefix
(
rest
)
*
)
;
}
;
(
gen
prefix
:
expr
pub
mod
name
:
ident
{
(
children
:
tt
)
*
}
(
rest
:
tt
)
*
)
=
>
{
doc_comment
:
:
doc_comment
!
{
include_str
!
(
concat
!
(
prefix
"
/
"
stringify
!
(
name
)
"
.
md
"
)
)
pub
mod
name
{
generate_guide
!
(
gen
concat
!
(
prefix
"
/
"
stringify
!
(
name
)
)
(
children
)
*
)
;
}
}
generate_guide
!
(
gen
prefix
(
rest
)
*
)
;
}
;
}
#
[
cfg
(
feature
=
"
guide
"
)
]
generate_guide
!
{
pub
mod
guide
{
pub
mod
feature_flags
;
pub
mod
serde_as
;
pub
mod
serde_as_transformations
;
}
}
pub
(
crate
)
mod
prelude
{
#
!
[
allow
(
unused_imports
)
]
pub
(
crate
)
use
crate
:
:
utils
:
:
duration
:
:
{
DurationSigned
Sign
}
;
pub
use
crate
:
:
{
de
:
:
*
ser
:
:
*
*
}
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
target_has_atomic
=
"
ptr
"
)
)
]
pub
use
alloc
:
:
sync
:
:
{
Arc
Weak
as
ArcWeak
}
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
use
alloc
:
:
{
borrow
:
:
{
Cow
ToOwned
}
boxed
:
:
Box
collections
:
:
{
BTreeMap
BTreeSet
BinaryHeap
LinkedList
VecDeque
}
rc
:
:
{
Rc
Weak
as
RcWeak
}
string
:
:
{
String
ToString
}
vec
:
:
Vec
}
;
pub
use
core
:
:
{
cell
:
:
{
Cell
RefCell
}
convert
:
:
{
TryFrom
TryInto
}
fmt
:
:
{
self
Display
}
hash
:
:
{
BuildHasher
Hash
}
marker
:
:
PhantomData
option
:
:
Option
result
:
:
Result
str
:
:
FromStr
time
:
:
Duration
}
;
pub
use
serde
:
:
{
de
:
:
{
Deserialize
DeserializeOwned
DeserializeSeed
Deserializer
EnumAccess
Error
as
DeError
Expected
IgnoredAny
IntoDeserializer
MapAccess
SeqAccess
Unexpected
VariantAccess
Visitor
}
forward_to_deserialize_any
ser
:
:
{
Error
as
SerError
Impossible
Serialize
SerializeMap
SerializeSeq
SerializeStruct
SerializeStructVariant
SerializeTuple
SerializeTupleStruct
SerializeTupleVariant
Serializer
}
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
std
:
:
{
collections
:
:
{
HashMap
HashSet
}
sync
:
:
{
Mutex
RwLock
}
time
:
:
SystemTime
}
;
}
#
[
doc
(
hidden
)
]
pub
mod
__private__
{
pub
use
crate
:
:
prelude
:
:
*
;
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
doc
(
inline
)
]
pub
use
crate
:
:
enum_map
:
:
EnumMap
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
doc
(
inline
)
]
pub
use
crate
:
:
key_value_map
:
:
KeyValueMap
;
#
[
doc
(
inline
)
]
pub
use
crate
:
:
{
de
:
:
DeserializeAs
ser
:
:
SerializeAs
}
;
use
core
:
:
marker
:
:
PhantomData
;
#
[
cfg
(
feature
=
"
macros
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
macros
"
)
)
)
]
#
[
doc
(
inline
)
]
pub
use
serde_with_macros
:
:
*
;
pub
struct
As
<
T
:
?
Sized
>
(
PhantomData
<
T
>
)
;
pub
struct
Same
;
pub
struct
DisplayFromStr
;
pub
struct
NoneAsEmptyString
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
struct
DefaultOnError
<
T
=
Same
>
(
PhantomData
<
T
>
)
;
pub
struct
DefaultOnNull
<
T
=
Same
>
(
PhantomData
<
T
>
)
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
struct
BytesOrString
;
pub
struct
DurationSeconds
<
FORMAT
:
formats
:
:
Format
=
u64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
DurationSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
DurationMilliSeconds
<
FORMAT
:
formats
:
:
Format
=
u64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
DurationMilliSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
DurationMicroSeconds
<
FORMAT
:
formats
:
:
Format
=
u64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
DurationMicroSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
DurationNanoSeconds
<
FORMAT
:
formats
:
:
Format
=
u64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
DurationNanoSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
TimestampSeconds
<
FORMAT
:
formats
:
:
Format
=
i64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
TimestampSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
TimestampMilliSeconds
<
FORMAT
:
formats
:
:
Format
=
i64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
TimestampMilliSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
TimestampMicroSeconds
<
FORMAT
:
formats
:
:
Format
=
i64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
TimestampMicroSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
TimestampNanoSeconds
<
FORMAT
:
formats
:
:
Format
=
i64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
TimestampNanoSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
pub
struct
Bytes
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
struct
OneOrMany
<
T
FORMAT
:
formats
:
:
Format
=
formats
:
:
PreferOne
>
(
PhantomData
<
(
T
FORMAT
)
>
)
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
struct
PickFirst
<
T
>
(
PhantomData
<
T
>
)
;
pub
struct
FromInto
<
T
>
(
PhantomData
<
T
>
)
;
pub
struct
TryFromInto
<
T
>
(
PhantomData
<
T
>
)
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
struct
BorrowCow
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
struct
VecSkipError
<
T
>
(
PhantomData
<
T
>
)
;
pub
struct
BoolFromInt
<
S
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
S
>
)
;
pub
struct
StringWithSeparator
<
Sep
T
>
(
PhantomData
<
(
Sep
T
)
>
)
;
pub
struct
Map
<
K
V
>
(
PhantomData
<
(
K
V
)
>
)
;
pub
struct
Seq
<
V
>
(
PhantomData
<
V
>
)
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
struct
MapPreventDuplicates
<
K
V
>
(
PhantomData
<
(
K
V
)
>
)
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
struct
MapFirstKeyWins
<
K
V
>
(
PhantomData
<
(
K
V
)
>
)
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
struct
SetPreventDuplicates
<
T
>
(
PhantomData
<
T
>
)
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
struct
SetLastValueWins
<
T
>
(
PhantomData
<
T
>
)
;
