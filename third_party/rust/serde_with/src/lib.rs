#
!
[
warn
(
clippy
:
:
semicolon_if_nothing_returned
missing_copy_implementations
missing_debug_implementations
missing_docs
rust_2018_idioms
trivial_casts
trivial_numeric_casts
unused_extern_crates
unused_import_braces
unused_qualifications
variant_size_differences
)
]
#
!
[
doc
(
test
(
attr
(
forbid
(
unsafe_code
)
)
)
)
]
#
!
[
doc
(
test
(
attr
(
deny
(
missing_copy_implementations
missing_debug_implementations
trivial_casts
trivial_numeric_casts
unused_extern_crates
unused_import_braces
unused_qualifications
)
)
)
)
]
#
!
[
doc
(
test
(
attr
(
warn
(
rust_2018_idioms
)
)
)
)
]
#
!
[
doc
(
test
(
no_crate_inject
)
)
]
#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
serde_with
/
1
.
14
.
0
"
)
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_cfg
)
)
]
#
!
[
allow
(
unknown_lints
clippy
:
:
only_used_in_recursion
clippy
:
:
derive_partial_eq_without_eq
)
]
#
!
[
no_std
]
extern
crate
alloc
;
#
[
doc
(
hidden
)
]
pub
extern
crate
serde
;
extern
crate
std
;
#
[
cfg
(
feature
=
"
base64
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
base64
"
)
)
)
]
pub
mod
base64
;
#
[
cfg
(
feature
=
"
chrono
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
chrono
"
)
)
)
]
pub
mod
chrono
;
mod
content
;
pub
mod
de
;
mod
duplicate_key_impls
;
mod
enum_map
;
mod
flatten_maybe
;
pub
mod
formats
;
#
[
cfg
(
feature
=
"
hex
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
hex
"
)
)
)
]
pub
mod
hex
;
#
[
cfg
(
feature
=
"
json
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
json
"
)
)
)
]
pub
mod
json
;
pub
mod
rust
;
pub
mod
ser
;
mod
serde_conv
;
#
[
cfg
(
feature
=
"
time_0_3
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
time_0_3
"
)
)
)
]
pub
mod
time_0_3
;
mod
utils
;
#
[
doc
(
hidden
)
]
pub
mod
with_prefix
;
#
[
cfg
(
feature
=
"
guide
"
)
]
#
[
allow
(
unused_macro_rules
)
]
macro_rules
!
generate_guide
{
(
pub
mod
name
:
ident
;
(
rest
:
tt
)
*
)
=
>
{
generate_guide
!
(
gen
"
.
"
pub
mod
name
{
}
(
rest
)
*
)
;
}
;
(
pub
mod
name
:
ident
{
(
children
:
tt
)
*
}
(
rest
:
tt
)
*
)
=
>
{
generate_guide
!
(
gen
"
.
"
pub
mod
name
{
(
children
)
*
}
(
rest
)
*
)
;
}
;
(
gen
prefix
:
expr
)
=
>
{
}
;
(
gen
prefix
:
expr
pub
mod
name
:
ident
;
(
rest
:
tt
)
*
)
=
>
{
generate_guide
!
(
gen
prefix
pub
mod
name
{
}
(
rest
)
*
)
;
}
;
(
gen
prefix
:
expr
code
pub
mod
name
:
ident
;
(
rest
:
tt
)
*
)
=
>
{
pub
mod
name
;
generate_guide
!
(
gen
prefix
(
rest
)
*
)
;
}
;
(
gen
prefix
:
expr
pub
mod
name
:
ident
{
(
children
:
tt
)
*
}
(
rest
:
tt
)
*
)
=
>
{
doc_comment
:
:
doc_comment
!
{
include_str
!
(
concat
!
(
prefix
"
/
"
stringify
!
(
name
)
"
.
md
"
)
)
pub
mod
name
{
generate_guide
!
(
gen
concat
!
(
prefix
"
/
"
stringify
!
(
name
)
)
(
children
)
*
)
;
}
}
generate_guide
!
(
gen
prefix
(
rest
)
*
)
;
}
;
}
#
[
cfg
(
feature
=
"
guide
"
)
]
generate_guide
!
{
pub
mod
guide
{
pub
mod
feature_flags
;
pub
mod
serde_as
;
pub
mod
serde_as_transformations
;
}
}
#
[
doc
(
inline
)
]
pub
use
crate
:
:
{
de
:
:
DeserializeAs
enum_map
:
:
EnumMap
rust
:
:
StringWithSeparator
ser
:
:
SerializeAs
}
;
use
core
:
:
marker
:
:
PhantomData
;
use
serde
:
:
{
Deserialize
Deserializer
Serialize
Serializer
}
;
#
[
cfg
(
feature
=
"
macros
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
macros
"
)
)
)
]
#
[
doc
(
inline
)
]
pub
use
serde_with_macros
:
:
*
;
pub
trait
Separator
{
fn
separator
(
)
-
>
&
'
static
str
;
}
#
[
derive
(
Copy
Clone
Eq
PartialEq
Ord
PartialOrd
Hash
Debug
Default
)
]
pub
struct
SpaceSeparator
;
impl
Separator
for
SpaceSeparator
{
#
[
inline
]
fn
separator
(
)
-
>
&
'
static
str
{
"
"
}
}
#
[
derive
(
Copy
Clone
Eq
PartialEq
Ord
PartialOrd
Hash
Debug
Default
)
]
pub
struct
CommaSeparator
;
impl
Separator
for
CommaSeparator
{
#
[
inline
]
fn
separator
(
)
-
>
&
'
static
str
{
"
"
}
}
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
As
<
T
:
?
Sized
>
(
PhantomData
<
T
>
)
;
impl
<
T
:
?
Sized
>
As
<
T
>
{
pub
fn
serialize
<
S
I
>
(
value
:
&
I
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
Serializer
T
:
SerializeAs
<
I
>
I
:
?
Sized
{
T
:
:
serialize_as
(
value
serializer
)
}
pub
fn
deserialize
<
'
de
D
I
>
(
deserializer
:
D
)
-
>
Result
<
I
D
:
:
Error
>
where
T
:
DeserializeAs
<
'
de
I
>
D
:
Deserializer
<
'
de
>
{
T
:
:
deserialize_as
(
deserializer
)
}
}
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
Same
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
DisplayFromStr
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
NoneAsEmptyString
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
DefaultOnError
<
T
=
Same
>
(
PhantomData
<
T
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
DefaultOnNull
<
T
=
Same
>
(
PhantomData
<
T
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
BytesOrString
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
DurationSeconds
<
FORMAT
:
formats
:
:
Format
=
u64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
DurationSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
DurationMilliSeconds
<
FORMAT
:
formats
:
:
Format
=
u64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
DurationMilliSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
DurationMicroSeconds
<
FORMAT
:
formats
:
:
Format
=
u64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
DurationMicroSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
DurationNanoSeconds
<
FORMAT
:
formats
:
:
Format
=
u64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
DurationNanoSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
TimestampSeconds
<
FORMAT
:
formats
:
:
Format
=
i64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
TimestampSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
TimestampMilliSeconds
<
FORMAT
:
formats
:
:
Format
=
i64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
TimestampMilliSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
TimestampMicroSeconds
<
FORMAT
:
formats
:
:
Format
=
i64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
TimestampMicroSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
TimestampNanoSeconds
<
FORMAT
:
formats
:
:
Format
=
i64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
TimestampNanoSecondsWithFrac
<
FORMAT
:
formats
:
:
Format
=
f64
STRICTNESS
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
(
FORMAT
STRICTNESS
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
Bytes
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
OneOrMany
<
T
FORMAT
:
formats
:
:
Format
=
formats
:
:
PreferOne
>
(
PhantomData
<
(
T
FORMAT
)
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
PickFirst
<
T
>
(
PhantomData
<
T
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
FromInto
<
T
>
(
PhantomData
<
T
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
TryFromInto
<
T
>
(
PhantomData
<
T
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
BorrowCow
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
VecSkipError
<
T
>
(
PhantomData
<
T
>
)
;
#
[
derive
(
Copy
Clone
Debug
Default
)
]
pub
struct
BoolFromInt
<
S
:
formats
:
:
Strictness
=
formats
:
:
Strict
>
(
PhantomData
<
S
>
)
;
