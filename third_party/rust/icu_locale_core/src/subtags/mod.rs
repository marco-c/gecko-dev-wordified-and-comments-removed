mod
language
;
mod
region
;
mod
script
;
mod
variant
;
mod
variants
;
#
[
doc
(
inline
)
]
pub
use
language
:
:
{
language
Language
}
;
#
[
doc
(
inline
)
]
pub
use
region
:
:
{
region
Region
}
;
#
[
doc
(
inline
)
]
pub
use
script
:
:
{
script
Script
}
;
#
[
doc
(
inline
)
]
pub
use
variant
:
:
{
variant
Variant
}
;
pub
use
variants
:
:
Variants
;
impl_tinystr_subtag
!
(
/
/
/
A
generic
subtag
.
/
/
/
/
/
/
The
subtag
has
to
be
an
ASCII
alphanumerical
string
no
shorter
than
/
/
/
two
characters
and
no
longer
than
eight
.
/
/
/
/
/
/
#
Examples
/
/
/
/
/
/
/
/
/
use
icu
:
:
locale
:
:
subtags
:
:
Subtag
;
/
/
/
/
/
/
let
subtag1
:
Subtag
=
"
Foo
"
.
parse
(
)
/
/
/
.
expect
(
"
Failed
to
parse
a
Subtag
.
"
)
;
/
/
/
/
/
/
assert_eq
!
(
subtag1
.
as_str
(
)
"
foo
"
)
;
/
/
/
Subtag
subtags
subtag
subtags_subtag
2
.
.
=
8
s
s
.
is_ascii_alphanumeric
(
)
s
.
to_ascii_lowercase
(
)
s
.
is_ascii_alphanumeric
(
)
&
&
s
.
is_ascii_lowercase
(
)
InvalidSubtag
[
"
foo12
"
]
[
"
f
"
"
toolooong
"
]
)
;
#
[
allow
(
clippy
:
:
len_without_is_empty
)
]
impl
Subtag
{
#
[
allow
(
dead_code
)
]
pub
(
crate
)
const
fn
valid_key
(
v
:
&
[
u8
]
)
-
>
bool
{
2
<
=
v
.
len
(
)
&
&
v
.
len
(
)
<
=
8
}
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
0
.
len
(
)
}
#
[
doc
(
hidden
)
]
pub
fn
from_tinystr_unvalidated
(
input
:
tinystr
:
:
TinyAsciiStr
<
8
>
)
-
>
Self
{
Self
(
input
)
}
#
[
doc
(
hidden
)
]
pub
fn
as_tinystr
(
&
self
)
-
>
tinystr
:
:
TinyAsciiStr
<
8
>
{
self
.
0
}
#
[
allow
(
dead_code
)
]
pub
(
crate
)
fn
to_ascii_lowercase
(
self
)
-
>
Self
{
Self
(
self
.
0
.
to_ascii_lowercase
(
)
)
}
}
impl
<
const
N
:
usize
>
TryFrom
<
tinystr
:
:
TinyAsciiStr
<
N
>
>
for
Subtag
{
type
Error
=
crate
:
:
parser
:
:
errors
:
:
ParseError
;
fn
try_from
(
value
:
tinystr
:
:
TinyAsciiStr
<
N
>
)
-
>
Result
<
Self
Self
:
:
Error
>
{
Self
:
:
try_from_str
(
&
value
)
}
}
impl
PartialEq
<
str
>
for
Subtag
{
fn
eq
(
&
self
other
:
&
str
)
-
>
bool
{
self
.
0
=
=
other
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
tinystr
:
:
tinystr
;
#
[
test
]
fn
test_subtag
(
)
{
let
subtag
=
subtag
!
(
"
foo
"
)
;
assert_eq
!
(
subtag
.
as_str
(
)
"
foo
"
)
;
}
#
[
test
]
fn
test_subtag_from_tinystr
(
)
{
let
subtag
=
Subtag
:
:
try_from
(
tinystr
!
(
3
"
foo
"
)
)
;
assert
!
(
subtag
.
is_ok
(
)
)
;
let
subtag
=
Subtag
:
:
try_from
(
tinystr
!
(
1
"
f
"
)
)
;
assert
!
(
subtag
.
is_err
(
)
)
;
}
}
