use
crate
:
:
array
:
:
Array
;
use
std
:
:
mem
:
:
MaybeUninit
as
StdMaybeUninit
;
#
[
derive
(
Copy
)
]
pub
struct
MaybeUninit
<
T
>
{
inner
:
StdMaybeUninit
<
T
>
}
impl
<
T
>
Clone
for
MaybeUninit
<
T
>
where
T
:
Copy
{
fn
clone
(
&
self
)
-
>
Self
{
*
self
}
}
impl
<
T
>
MaybeUninit
<
T
>
{
pub
const
unsafe
fn
uninitialized
(
)
-
>
Self
{
MaybeUninit
{
inner
:
StdMaybeUninit
:
:
uninit
(
)
}
}
pub
fn
from
(
v
:
T
)
-
>
Self
{
MaybeUninit
{
inner
:
StdMaybeUninit
:
:
new
(
v
)
}
}
pub
fn
ptr
(
&
self
)
-
>
*
const
T
:
:
Item
where
T
:
Array
{
self
.
inner
.
as_ptr
(
)
as
*
const
T
:
:
Item
}
pub
fn
ptr_mut
(
&
mut
self
)
-
>
*
mut
T
:
:
Item
where
T
:
Array
{
self
.
inner
.
as_mut_ptr
(
)
as
*
mut
T
:
:
Item
}
}
