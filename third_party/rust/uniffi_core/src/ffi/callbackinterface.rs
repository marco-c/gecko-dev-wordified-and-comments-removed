use
std
:
:
fmt
;
#
[
derive
(
Debug
)
]
pub
struct
UnexpectedUniFFICallbackError
{
pub
reason
:
String
}
impl
UnexpectedUniFFICallbackError
{
pub
fn
new
(
reason
:
impl
fmt
:
:
Display
)
-
>
Self
{
Self
{
reason
:
reason
.
to_string
(
)
}
}
}
impl
fmt
:
:
Display
for
UnexpectedUniFFICallbackError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
UnexpectedUniFFICallbackError
(
reason
:
{
:
?
}
)
"
self
.
reason
)
}
}
impl
std
:
:
error
:
:
Error
for
UnexpectedUniFFICallbackError
{
}
#
[
doc
(
hidden
)
]
#
[
derive
(
Debug
)
]
pub
struct
UnexpectedUniFFICallbackErrorConverterGeneric
;
impl
UnexpectedUniFFICallbackErrorConverterGeneric
{
pub
fn
try_convert_unexpected_callback_error
<
E
>
(
&
self
e
:
UnexpectedUniFFICallbackError
)
-
>
anyhow
:
:
Result
<
E
>
{
Err
(
e
.
into
(
)
)
}
}
#
[
doc
(
hidden
)
]
#
[
derive
(
Debug
)
]
pub
struct
UnexpectedUniFFICallbackErrorConverterSpecialized
;
impl
UnexpectedUniFFICallbackErrorConverterSpecialized
{
pub
fn
try_convert_unexpected_callback_error
<
E
>
(
&
self
e
:
UnexpectedUniFFICallbackError
)
-
>
anyhow
:
:
Result
<
E
>
where
E
:
From
<
UnexpectedUniFFICallbackError
>
{
Ok
(
E
:
:
from
(
e
)
)
}
}
#
[
doc
(
hidden
)
]
#
[
macro_export
]
macro_rules
!
convert_unexpected_error
{
(
error
:
ident
ty
:
ty
)
=
>
{
{
/
/
Trait
for
generic
conversion
implemented
for
all
&
T
.
pub
trait
GetConverterGeneric
{
fn
get_converter
(
&
self
)
-
>
crate
:
:
UnexpectedUniFFICallbackErrorConverterGeneric
;
}
impl
<
T
>
GetConverterGeneric
for
&
T
{
fn
get_converter
(
&
self
)
-
>
crate
:
:
UnexpectedUniFFICallbackErrorConverterGeneric
{
crate
:
:
UnexpectedUniFFICallbackErrorConverterGeneric
}
}
/
/
Trait
for
specialized
conversion
implemented
for
all
T
that
implements
/
/
Into
<
ErrorType
>
.
I
.
e
.
it
'
s
implemented
for
UnexpectedUniFFICallbackError
when
/
/
ErrorType
implements
From
<
UnexpectedUniFFICallbackError
>
.
pub
trait
GetConverterSpecialized
{
fn
get_converter
(
&
self
)
-
>
crate
:
:
UnexpectedUniFFICallbackErrorConverterSpecialized
;
}
impl
<
T
:
:
:
std
:
:
convert
:
:
Into
<
ty
>
>
GetConverterSpecialized
for
T
{
fn
get_converter
(
&
self
)
-
>
crate
:
:
UnexpectedUniFFICallbackErrorConverterSpecialized
{
crate
:
:
UnexpectedUniFFICallbackErrorConverterSpecialized
}
}
/
/
Here
'
s
the
hack
.
Because
of
the
auto
-
ref
rules
this
will
use
GetConverterSpecialized
/
/
if
it
'
s
implemented
and
GetConverterGeneric
if
not
.
(
&
error
)
.
get_converter
(
)
.
try_convert_unexpected_callback_error
(
error
)
}
}
;
}
