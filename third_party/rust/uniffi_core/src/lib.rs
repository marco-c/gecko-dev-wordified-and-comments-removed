#
!
[
warn
(
rust_2018_idioms
unused_qualifications
)
]
use
anyhow
:
:
bail
;
use
bytes
:
:
buf
:
:
Buf
;
pub
use
anyhow
:
:
Result
;
pub
mod
ffi
;
mod
ffi_converter_impls
;
mod
ffi_converter_traits
;
pub
mod
metadata
;
mod
oneshot
;
#
[
cfg
(
feature
=
"
scaffolding
-
ffi
-
buffer
-
fns
"
)
]
pub
use
ffi
:
:
ffiserialize
:
:
FfiBufferElement
;
pub
use
ffi
:
:
*
;
pub
use
ffi_converter_traits
:
:
{
ConvertError
FfiConverter
FfiConverterArc
HandleAlloc
Lift
LiftRef
LiftReturn
Lower
LowerReturn
}
;
pub
use
metadata
:
:
*
;
pub
mod
deps
{
pub
use
anyhow
;
#
[
cfg
(
feature
=
"
tokio
"
)
]
pub
use
async_compat
;
pub
use
bytes
;
pub
use
log
;
pub
use
static_assertions
;
}
mod
panichook
;
const
PACKAGE_VERSION
:
&
str
=
env
!
(
"
CARGO_PKG_VERSION
"
)
;
static_assertions
:
:
const_assert
!
(
PACKAGE_VERSION
.
as_bytes
(
)
.
len
(
)
<
10
)
;
#
[
allow
(
clippy
:
:
len_zero
)
]
pub
const
fn
check_compatible_version
(
bindgen_version
:
&
'
static
str
)
-
>
bool
{
let
package_version
=
PACKAGE_VERSION
.
as_bytes
(
)
;
let
bindgen_version
=
bindgen_version
.
as_bytes
(
)
;
package_version
.
len
(
)
=
=
bindgen_version
.
len
(
)
&
&
(
package_version
.
len
(
)
=
=
0
|
|
package_version
[
0
]
=
=
bindgen_version
[
0
]
)
&
&
(
package_version
.
len
(
)
<
=
1
|
|
package_version
[
1
]
=
=
bindgen_version
[
1
]
)
&
&
(
package_version
.
len
(
)
<
=
2
|
|
package_version
[
2
]
=
=
bindgen_version
[
2
]
)
&
&
(
package_version
.
len
(
)
<
=
3
|
|
package_version
[
3
]
=
=
bindgen_version
[
3
]
)
&
&
(
package_version
.
len
(
)
<
=
4
|
|
package_version
[
4
]
=
=
bindgen_version
[
4
]
)
&
&
(
package_version
.
len
(
)
<
=
5
|
|
package_version
[
5
]
=
=
bindgen_version
[
5
]
)
&
&
(
package_version
.
len
(
)
<
=
6
|
|
package_version
[
6
]
=
=
bindgen_version
[
6
]
)
&
&
(
package_version
.
len
(
)
<
=
7
|
|
package_version
[
7
]
=
=
bindgen_version
[
7
]
)
&
&
(
package_version
.
len
(
)
<
=
8
|
|
package_version
[
8
]
=
=
bindgen_version
[
8
]
)
&
&
(
package_version
.
len
(
)
<
=
9
|
|
package_version
[
9
]
=
=
bindgen_version
[
9
]
)
&
&
package_version
.
len
(
)
<
10
}
#
[
macro_export
]
macro_rules
!
assert_compatible_version
{
(
v
:
expr
(
)
?
)
=
>
{
uniffi
:
:
deps
:
:
static_assertions
:
:
const_assert
!
(
uniffi
:
:
check_compatible_version
(
v
)
)
;
}
;
}
struct
UniFfiTag
;
pub
fn
check_remaining
(
buf
:
&
[
u8
]
num_bytes
:
usize
)
-
>
Result
<
(
)
>
{
if
buf
.
remaining
(
)
<
num_bytes
{
bail
!
(
"
not
enough
bytes
remaining
in
buffer
(
{
}
<
{
num_bytes
}
)
"
buf
.
remaining
(
)
)
;
}
Ok
(
(
)
)
}
#
[
macro_export
]
macro_rules
!
ffi_converter_rust_buffer_lift_and_lower
{
(
uniffi_tag
:
ty
)
=
>
{
type
FfiType
=
crate
:
:
RustBuffer
;
fn
lower
(
v
:
Self
)
-
>
crate
:
:
RustBuffer
{
let
mut
buf
=
:
:
std
:
:
vec
:
:
Vec
:
:
new
(
)
;
<
Self
as
crate
:
:
FfiConverter
<
uniffi_tag
>
>
:
:
write
(
v
&
mut
buf
)
;
crate
:
:
RustBuffer
:
:
from_vec
(
buf
)
}
fn
try_lift
(
buf
:
crate
:
:
RustBuffer
)
-
>
crate
:
:
Result
<
Self
>
{
let
vec
=
buf
.
destroy_into_vec
(
)
;
let
mut
buf
=
vec
.
as_slice
(
)
;
let
value
=
<
Self
as
crate
:
:
FfiConverter
<
uniffi_tag
>
>
:
:
try_read
(
&
mut
buf
)
?
;
match
crate
:
:
deps
:
:
bytes
:
:
Buf
:
:
remaining
(
&
buf
)
{
0
=
>
Ok
(
value
)
n
=
>
crate
:
:
deps
:
:
anyhow
:
:
bail
!
(
"
junk
data
left
in
buffer
after
lifting
(
count
:
{
n
}
)
"
)
}
}
}
;
}
#
[
macro_export
]
macro_rules
!
ffi_converter_forward
{
(
T
:
ty
existing_impl_tag
:
ty
new_impl_tag
:
ty
)
=
>
{
:
:
uniffi
:
:
do_ffi_converter_forward
!
(
FfiConverter
T
T
existing_impl_tag
new_impl_tag
)
;
crate
:
:
derive_ffi_traits
!
(
local
T
)
;
}
;
}
#
[
macro_export
]
macro_rules
!
ffi_converter_arc_forward
{
(
T
:
ty
existing_impl_tag
:
ty
new_impl_tag
:
ty
)
=
>
{
:
:
uniffi
:
:
do_ffi_converter_forward
!
(
FfiConverterArc
:
:
std
:
:
sync
:
:
Arc
<
T
>
T
existing_impl_tag
new_impl_tag
)
;
/
/
Note
:
no
need
to
call
derive_ffi_traits
!
because
there
is
a
blanket
impl
for
all
Arc
<
T
>
}
;
}
#
[
doc
(
hidden
)
]
#
[
macro_export
]
macro_rules
!
do_ffi_converter_forward
{
(
trait
:
ident
rust_type
:
ty
T
:
ty
existing_impl_tag
:
ty
new_impl_tag
:
ty
)
=
>
{
unsafe
impl
crate
:
:
trait
<
new_impl_tag
>
for
T
{
type
FfiType
=
<
T
as
crate
:
:
trait
<
existing_impl_tag
>
>
:
:
FfiType
;
fn
lower
(
obj
:
rust_type
)
-
>
Self
:
:
FfiType
{
<
T
as
crate
:
:
trait
<
existing_impl_tag
>
>
:
:
lower
(
obj
)
}
fn
try_lift
(
v
:
Self
:
:
FfiType
)
-
>
crate
:
:
Result
<
rust_type
>
{
<
T
as
crate
:
:
trait
<
existing_impl_tag
>
>
:
:
try_lift
(
v
)
}
fn
write
(
obj
:
rust_type
buf
:
&
mut
Vec
<
u8
>
)
{
<
T
as
crate
:
:
trait
<
existing_impl_tag
>
>
:
:
write
(
obj
buf
)
}
fn
try_read
(
buf
:
&
mut
&
[
u8
]
)
-
>
crate
:
:
Result
<
rust_type
>
{
<
T
as
crate
:
:
trait
<
existing_impl_tag
>
>
:
:
try_read
(
buf
)
}
const
TYPE_ID_META
:
:
:
uniffi
:
:
MetadataBuffer
=
<
T
as
crate
:
:
trait
<
existing_impl_tag
>
>
:
:
TYPE_ID_META
;
}
}
;
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
{
FfiConverter
UniFfiTag
}
;
use
std
:
:
time
:
:
{
Duration
SystemTime
}
;
#
[
test
]
fn
timestamp_roundtrip_post_epoch
(
)
{
let
expected
=
SystemTime
:
:
UNIX_EPOCH
+
Duration
:
:
new
(
100
100
)
;
let
result
=
<
SystemTime
as
FfiConverter
<
UniFfiTag
>
>
:
:
try_lift
(
<
SystemTime
as
FfiConverter
<
UniFfiTag
>
>
:
:
lower
(
expected
)
)
.
expect
(
"
Failed
to
lift
!
"
)
;
assert_eq
!
(
expected
result
)
}
#
[
test
]
fn
timestamp_roundtrip_pre_epoch
(
)
{
let
expected
=
SystemTime
:
:
UNIX_EPOCH
-
Duration
:
:
new
(
100
100
)
;
let
result
=
<
SystemTime
as
FfiConverter
<
UniFfiTag
>
>
:
:
try_lift
(
<
SystemTime
as
FfiConverter
<
UniFfiTag
>
>
:
:
lower
(
expected
)
)
.
expect
(
"
Failed
to
lift
!
"
)
;
assert_eq
!
(
expected
result
"
Expected
results
after
lowering
and
lifting
to
be
equal
"
)
}
}
#
[
cfg
(
test
)
]
pub
mod
test_util
{
use
std
:
:
{
error
:
:
Error
fmt
}
;
use
super
:
:
*
;
#
[
derive
(
Clone
Debug
PartialEq
Eq
)
]
pub
struct
TestError
(
pub
String
)
;
unsafe
impl
<
UT
>
FfiConverter
<
UT
>
for
TestError
{
ffi_converter_rust_buffer_lift_and_lower
!
(
UniFfiTag
)
;
fn
write
(
obj
:
TestError
buf
:
&
mut
Vec
<
u8
>
)
{
<
String
as
FfiConverter
<
UniFfiTag
>
>
:
:
write
(
obj
.
0
buf
)
;
}
fn
try_read
(
buf
:
&
mut
&
[
u8
]
)
-
>
Result
<
TestError
>
{
<
String
as
FfiConverter
<
UniFfiTag
>
>
:
:
try_read
(
buf
)
.
map
(
TestError
)
}
const
TYPE_ID_META
:
MetadataBuffer
=
MetadataBuffer
:
:
new
(
)
;
}
impl
fmt
:
:
Display
for
TestError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
{
}
"
self
.
0
)
}
}
impl
Error
for
TestError
{
}
impl
<
T
:
Into
<
String
>
>
From
<
T
>
for
TestError
{
fn
from
(
v
:
T
)
-
>
Self
{
Self
(
v
.
into
(
)
)
}
}
derive_ffi_traits
!
(
blanket
TestError
)
;
}
