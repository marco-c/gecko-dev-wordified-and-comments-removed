use
std
:
:
time
:
:
Instant
;
#
[
derive
(
uniffi
:
:
Record
)
]
pub
struct
LabeledTimingSample
{
pub
label
:
String
pub
value
:
u64
}
impl
LabeledTimingSample
{
fn
new
(
label
:
String
value
:
u64
)
-
>
Self
{
Self
{
label
value
}
}
}
#
[
derive
(
Default
uniffi
:
:
Record
)
]
pub
struct
SuggestIngestionMetrics
{
pub
ingestion_times
:
Vec
<
LabeledTimingSample
>
pub
download_times
:
Vec
<
LabeledTimingSample
>
}
impl
SuggestIngestionMetrics
{
pub
fn
measure_ingest
<
F
T
>
(
&
mut
self
record_type
:
impl
Into
<
String
>
operation
:
F
)
-
>
T
where
F
:
FnOnce
(
&
mut
DownloadTimer
)
-
>
T
{
let
timer
=
Instant
:
:
now
(
)
;
let
record_type
=
record_type
.
into
(
)
;
let
mut
download_metrics
=
DownloadTimer
:
:
default
(
)
;
let
result
=
operation
(
&
mut
download_metrics
)
;
let
elapsed
=
timer
.
elapsed
(
)
.
as_micros
(
)
as
u64
;
self
.
ingestion_times
.
push
(
LabeledTimingSample
:
:
new
(
record_type
.
clone
(
)
elapsed
-
download_metrics
.
total_time
)
)
;
self
.
download_times
.
push
(
LabeledTimingSample
:
:
new
(
record_type
download_metrics
.
total_time
)
)
;
result
}
}
#
[
derive
(
Default
)
]
pub
struct
DownloadTimer
{
total_time
:
u64
}
impl
DownloadTimer
{
pub
fn
measure_download
<
F
T
>
(
&
mut
self
operation
:
F
)
-
>
T
where
F
:
FnOnce
(
)
-
>
T
{
let
timer
=
Instant
:
:
now
(
)
;
let
result
=
operation
(
)
;
self
.
total_time
+
=
timer
.
elapsed
(
)
.
as_micros
(
)
as
u64
;
result
}
}
#
[
derive
(
Default
)
]
pub
struct
SuggestQueryMetrics
{
pub
times
:
Vec
<
LabeledTimingSample
>
}
impl
SuggestQueryMetrics
{
pub
fn
measure_query
<
F
T
>
(
&
mut
self
provider
:
impl
Into
<
String
>
operation
:
F
)
-
>
T
where
F
:
FnOnce
(
)
-
>
T
{
let
provider
=
provider
.
into
(
)
;
let
timer
=
Instant
:
:
now
(
)
;
let
result
=
std
:
:
hint
:
:
black_box
(
operation
(
)
)
;
let
elapsed
=
timer
.
elapsed
(
)
.
as_micros
(
)
as
u64
;
self
.
times
.
push
(
LabeledTimingSample
:
:
new
(
provider
elapsed
)
)
;
result
}
}
