use
crate
:
:
{
rs
Result
}
;
use
parking_lot
:
:
Mutex
;
use
remote_settings
:
:
{
Client
RemoteSettingsConfig
}
;
use
std
:
:
collections
:
:
HashMap
;
pub
struct
RemoteSettingsWarmUpClient
{
client
:
Client
pub
get_records_responses
:
Mutex
<
HashMap
<
rs
:
:
RecordRequest
Vec
<
rs
:
:
Record
>
>
>
}
impl
RemoteSettingsWarmUpClient
{
pub
fn
new
(
)
-
>
Self
{
Self
{
client
:
Client
:
:
new
(
RemoteSettingsConfig
{
server
:
None
server_url
:
None
bucket_name
:
None
collection_name
:
crate
:
:
rs
:
:
REMOTE_SETTINGS_COLLECTION
.
into
(
)
}
)
.
unwrap
(
)
get_records_responses
:
Mutex
:
:
new
(
HashMap
:
:
new
(
)
)
}
}
}
impl
Default
for
RemoteSettingsWarmUpClient
{
fn
default
(
)
-
>
Self
{
Self
:
:
new
(
)
}
}
impl
rs
:
:
Client
for
RemoteSettingsWarmUpClient
{
fn
get_records
(
&
self
request
:
rs
:
:
RecordRequest
)
-
>
Result
<
Vec
<
rs
:
:
Record
>
>
{
let
response
=
<
Client
as
rs
:
:
Client
>
:
:
get_records
(
&
self
.
client
request
.
clone
(
)
)
?
;
self
.
get_records_responses
.
lock
(
)
.
insert
(
request
response
.
clone
(
)
)
;
Ok
(
response
)
}
}
#
[
derive
(
Clone
)
]
pub
struct
RemoteSettingsBenchmarkClient
{
pub
get_records_responses
:
HashMap
<
rs
:
:
RecordRequest
Vec
<
rs
:
:
Record
>
>
}
impl
rs
:
:
Client
for
RemoteSettingsBenchmarkClient
{
fn
get_records
(
&
self
request
:
rs
:
:
RecordRequest
)
-
>
Result
<
Vec
<
rs
:
:
Record
>
>
{
Ok
(
self
.
get_records_responses
.
get
(
&
request
)
.
unwrap_or_else
(
|
|
panic
!
(
"
options
not
found
:
{
request
:
?
}
"
)
)
.
clone
(
)
)
}
}
impl
From
<
RemoteSettingsWarmUpClient
>
for
RemoteSettingsBenchmarkClient
{
fn
from
(
warm_up_client
:
RemoteSettingsWarmUpClient
)
-
>
Self
{
Self
{
get_records_responses
:
warm_up_client
.
get_records_responses
.
into_inner
(
)
}
}
}
