use
rusqlite
:
:
types
:
:
{
FromSql
FromSqlError
FromSqlResult
ToSqlOutput
ValueRef
}
;
use
rusqlite
:
:
{
Result
as
RusqliteResult
ToSql
}
;
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
Hash
)
]
#
[
repr
(
u8
)
]
pub
enum
KeywordConfidence
{
Low
=
0
High
=
1
}
impl
FromSql
for
KeywordConfidence
{
fn
column_result
(
value
:
ValueRef
<
'
_
>
)
-
>
FromSqlResult
<
Self
>
{
let
v
=
value
.
as_i64
(
)
?
;
u8
:
:
try_from
(
v
)
.
ok
(
)
.
and_then
(
KeywordConfidence
:
:
from_u8
)
.
ok_or_else
(
|
|
FromSqlError
:
:
OutOfRange
(
v
)
)
}
}
impl
KeywordConfidence
{
#
[
inline
]
pub
(
crate
)
fn
from_u8
(
v
:
u8
)
-
>
Option
<
Self
>
{
match
v
{
0
=
>
Some
(
KeywordConfidence
:
:
Low
)
1
=
>
Some
(
KeywordConfidence
:
:
High
)
_
=
>
None
}
}
}
impl
ToSql
for
KeywordConfidence
{
fn
to_sql
(
&
self
)
-
>
RusqliteResult
<
ToSqlOutput
<
'
_
>
>
{
Ok
(
ToSqlOutput
:
:
from
(
*
self
as
u8
)
)
}
}
pub
fn
split_keyword
(
keyword
:
&
str
)
-
>
(
&
str
&
str
)
{
keyword
.
split_once
(
'
'
)
.
unwrap_or
(
(
keyword
"
"
)
)
}
