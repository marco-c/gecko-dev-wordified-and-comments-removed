pub
fn
full_keyword
(
query
:
&
str
keywords
:
&
[
impl
AsRef
<
str
>
]
)
-
>
String
{
let
query_words_len
=
query
.
split_whitespace
(
)
.
count
(
)
;
let
min_phrase_words_len
=
if
query
.
ends_with
(
char
:
:
is_whitespace
)
{
query_words_len
+
1
}
else
{
query_words_len
}
;
keywords
.
iter
(
)
.
map
(
AsRef
:
:
as_ref
)
.
filter
(
|
phrase
|
phrase
.
starts_with
(
query
)
)
.
map
(
|
phrase
|
phrase
.
split_whitespace
(
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
)
.
find
(
|
phrase_words
|
phrase_words
.
len
(
)
>
min_phrase_words_len
)
.
map
(
|
phrase_words
|
phrase_words
[
.
.
min_phrase_words_len
]
.
join
(
"
"
)
)
.
unwrap_or_else
(
|
|
{
keywords
.
iter
(
)
.
map
(
AsRef
:
:
as_ref
)
.
filter
(
|
phrase
|
phrase
.
starts_with
(
query
)
&
&
query
.
len
(
)
<
phrase
.
len
(
)
)
.
max_by_key
(
|
phrase
|
phrase
.
trim
(
)
.
len
(
)
)
.
unwrap_or
(
query
)
.
to_owned
(
)
}
)
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
keywords_with_more_words
(
)
{
assert_eq
!
(
full_keyword
(
"
moz
"
&
[
"
moz
"
"
mozi
"
"
mozil
"
"
mozill
"
"
mozilla
"
"
mozilla
firefox
"
]
)
"
mozilla
"
.
to_owned
(
)
)
;
assert_eq
!
(
full_keyword
(
"
mozilla
"
&
[
"
moz
"
"
mozi
"
"
mozil
"
"
mozill
"
"
mozilla
"
"
mozilla
firefox
"
]
)
"
mozilla
"
.
to_owned
(
)
)
;
}
#
[
test
]
fn
keywords_with_longer_phrase
(
)
{
assert_eq
!
(
full_keyword
(
"
moz
"
&
[
"
moz
"
"
mozi
"
"
mozil
"
"
mozill
"
"
mozilla
"
]
)
"
mozilla
"
.
to_owned
(
)
)
;
assert_eq
!
(
full_keyword
(
"
mozilla
f
"
&
[
"
moz
"
"
mozi
"
"
mozil
"
"
mozill
"
"
mozilla
firefox
"
]
)
"
mozilla
firefox
"
.
to_owned
(
)
)
;
}
#
[
test
]
fn
query_ends_with_space
(
)
{
assert_eq
!
(
full_keyword
(
"
mozilla
"
&
[
"
moz
"
"
mozi
"
"
mozil
"
"
mozill
"
"
mozilla
firefox
"
]
)
"
mozilla
firefox
"
.
to_owned
(
)
)
;
}
}
