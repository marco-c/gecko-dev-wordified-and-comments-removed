use
std
:
:
ops
:
:
Deref
;
use
remote_settings
:
:
{
Attachment
GetItemsOptions
}
;
use
serde
:
:
Deserialize
;
use
crate
:
:
Result
;
pub
(
crate
)
const
REMOTE_SETTINGS_COLLECTION
:
&
str
=
"
quicksuggest
"
;
pub
(
crate
)
const
SUGGESTIONS_PER_ATTACHMENT
:
u64
=
200
;
pub
(
crate
)
trait
SuggestRemoteSettingsClient
{
fn
get_records_with_options
(
&
self
options
:
&
GetItemsOptions
)
-
>
Result
<
SuggestRemoteSettingsRecords
>
;
fn
get_data_attachment
(
&
self
location
:
&
str
)
-
>
Result
<
DownloadedSuggestDataAttachment
>
;
fn
get_icon_attachment
(
&
self
location
:
&
str
)
-
>
Result
<
Vec
<
u8
>
>
;
}
impl
SuggestRemoteSettingsClient
for
remote_settings
:
:
Client
{
fn
get_records_with_options
(
&
self
options
:
&
GetItemsOptions
)
-
>
Result
<
SuggestRemoteSettingsRecords
>
{
Ok
(
self
.
get_records_raw_with_options
(
options
)
?
.
json
(
)
?
)
}
fn
get_data_attachment
(
&
self
location
:
&
str
)
-
>
Result
<
DownloadedSuggestDataAttachment
>
{
Ok
(
self
.
get_attachment
(
location
)
?
.
json
(
)
?
)
}
fn
get_icon_attachment
(
&
self
location
:
&
str
)
-
>
Result
<
Vec
<
u8
>
>
{
Ok
(
self
.
get_attachment
(
location
)
?
.
body
)
}
}
#
[
derive
(
Clone
Debug
Deserialize
)
]
pub
(
crate
)
struct
SuggestRemoteSettingsRecords
{
pub
data
:
Vec
<
SuggestRecord
>
}
#
[
derive
(
Clone
Debug
Deserialize
PartialEq
)
]
#
[
serde
(
untagged
)
]
pub
(
crate
)
enum
SuggestRecord
{
Typed
(
TypedSuggestRecord
)
Untyped
{
id
:
SuggestRecordId
last_modified
:
u64
#
[
serde
(
default
)
]
deleted
:
bool
}
}
#
[
derive
(
Clone
Debug
Deserialize
PartialEq
)
]
#
[
serde
(
tag
=
"
type
"
)
]
pub
(
crate
)
enum
TypedSuggestRecord
{
#
[
serde
(
rename
=
"
icon
"
)
]
Icon
{
id
:
SuggestRecordId
last_modified
:
u64
attachment
:
Attachment
}
#
[
serde
(
rename
=
"
data
"
)
]
Data
{
id
:
SuggestRecordId
last_modified
:
u64
attachment
:
Attachment
}
}
#
[
derive
(
Clone
Debug
Deserialize
)
]
#
[
serde
(
untagged
)
]
pub
(
crate
)
enum
OneOrMany
<
T
>
{
One
(
T
)
Many
(
Vec
<
T
>
)
}
impl
<
T
>
Deref
for
OneOrMany
<
T
>
{
type
Target
=
[
T
]
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
match
self
{
OneOrMany
:
:
One
(
value
)
=
>
std
:
:
slice
:
:
from_ref
(
value
)
OneOrMany
:
:
Many
(
values
)
=
>
values
}
}
}
#
[
derive
(
Clone
Debug
Deserialize
)
]
#
[
serde
(
transparent
)
]
pub
(
crate
)
struct
DownloadedSuggestDataAttachment
(
pub
OneOrMany
<
DownloadedSuggestion
>
)
;
#
[
derive
(
Clone
Debug
Deserialize
Eq
Hash
Ord
PartialEq
PartialOrd
)
]
#
[
serde
(
transparent
)
]
pub
(
crate
)
struct
SuggestRecordId
(
String
)
;
impl
SuggestRecordId
{
pub
fn
as_str
(
&
self
)
-
>
&
str
{
&
self
.
0
}
pub
fn
as_icon_id
(
&
self
)
-
>
Option
<
&
str
>
{
self
.
0
.
strip_prefix
(
"
icon
-
"
)
}
}
#
[
derive
(
Clone
Debug
Deserialize
)
]
pub
(
crate
)
struct
DownloadedSuggestion
{
#
[
serde
(
rename
=
"
id
"
)
]
pub
block_id
:
i64
pub
advertiser
:
String
pub
iab_category
:
String
pub
keywords
:
Vec
<
String
>
pub
title
:
String
pub
url
:
String
#
[
serde
(
rename
=
"
icon
"
)
]
pub
icon_id
:
String
pub
impression_url
:
Option
<
String
>
pub
click_url
:
Option
<
String
>
}
