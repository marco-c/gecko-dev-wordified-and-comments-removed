use
std
:
:
hash
:
:
Hash
;
use
std
:
:
hash
:
:
BuildHasher
;
use
super
:
:
{
OrderMap
Equivalent
}
;
pub
struct
PrivateMarker
{
}
pub
trait
MutableKeys
{
type
Key
;
type
Value
;
fn
get_full_mut2
<
Q
:
?
Sized
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
(
usize
&
mut
Self
:
:
Key
&
mut
Self
:
:
Value
)
>
where
Q
:
Hash
+
Equivalent
<
Self
:
:
Key
>
;
fn
retain2
<
F
>
(
&
mut
self
keep
:
F
)
where
F
:
FnMut
(
&
mut
Self
:
:
Key
&
mut
Self
:
:
Value
)
-
>
bool
;
fn
__private_marker
(
&
self
)
-
>
PrivateMarker
;
}
impl
<
K
V
S
>
MutableKeys
for
OrderMap
<
K
V
S
>
where
K
:
Eq
+
Hash
S
:
BuildHasher
{
type
Key
=
K
;
type
Value
=
V
;
fn
get_full_mut2
<
Q
:
?
Sized
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
(
usize
&
mut
K
&
mut
V
)
>
where
Q
:
Hash
+
Equivalent
<
K
>
{
if
let
Some
(
(
_
found
)
)
=
self
.
find
(
key
)
{
let
entry
=
&
mut
self
.
entries
[
found
]
;
Some
(
(
found
&
mut
entry
.
key
&
mut
entry
.
value
)
)
}
else
{
None
}
}
fn
retain2
<
F
>
(
&
mut
self
keep
:
F
)
where
F
:
FnMut
(
&
mut
K
&
mut
V
)
-
>
bool
{
self
.
retain_mut
(
keep
)
}
fn
__private_marker
(
&
self
)
-
>
PrivateMarker
{
PrivateMarker
{
}
}
}
