mod
attributes
;
mod
collectors
;
mod
converters
;
mod
finder
;
mod
literal
;
mod
resolver
;
use
anyhow
:
:
Result
;
use
collectors
:
:
{
InterfaceCollector
TypeCollector
}
;
use
uniffi_meta
:
:
Type
;
pub
fn
parse_udl
(
udl
:
&
str
crate_name
:
&
str
)
-
>
Result
<
uniffi_meta
:
:
MetadataGroup
>
{
Ok
(
InterfaceCollector
:
:
from_webidl
(
udl
crate_name
)
?
.
into
(
)
)
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
#
[
test
]
fn
test_group
(
)
{
const
UDL
:
&
str
=
r
#
"
namespace
test
{
}
;
dictionary
Empty
{
}
;
"
#
;
let
group
=
parse_udl
(
UDL
"
crate_name
"
)
.
unwrap
(
)
;
assert_eq
!
(
group
.
namespace
.
name
"
test
"
)
;
assert_eq
!
(
group
.
items
.
len
(
)
1
)
;
assert
!
(
matches
!
(
group
.
items
.
into_iter
(
)
.
next
(
)
.
unwrap
(
)
uniffi_meta
:
:
Metadata
:
:
Record
(
r
)
if
r
.
module_path
=
=
"
crate_name
"
&
&
r
.
name
=
=
"
Empty
"
&
&
r
.
fields
.
is_empty
(
)
)
)
;
}
}
