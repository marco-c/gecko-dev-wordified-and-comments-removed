#
[
macro_use
]
extern
crate
log
;
use
env_logger
:
:
filter
:
:
Filter
;
use
log
:
:
{
Log
Metadata
Record
SetLoggerError
}
;
struct
MyLogger
{
inner
:
Filter
}
impl
MyLogger
{
fn
new
(
)
-
>
MyLogger
{
use
env_logger
:
:
filter
:
:
Builder
;
let
mut
builder
=
Builder
:
:
from_env
(
"
MY_LOG_LEVEL
"
)
;
MyLogger
{
inner
:
builder
.
build
(
)
}
}
fn
init
(
)
-
>
Result
<
(
)
SetLoggerError
>
{
let
logger
=
Self
:
:
new
(
)
;
log
:
:
set_max_level
(
logger
.
inner
.
filter
(
)
)
;
log
:
:
set_boxed_logger
(
Box
:
:
new
(
logger
)
)
}
}
impl
Log
for
MyLogger
{
fn
enabled
(
&
self
metadata
:
&
Metadata
)
-
>
bool
{
self
.
inner
.
enabled
(
metadata
)
}
fn
log
(
&
self
record
:
&
Record
)
{
if
self
.
inner
.
matches
(
record
)
{
println
!
(
"
{
}
-
{
}
"
record
.
level
(
)
record
.
args
(
)
)
;
}
}
fn
flush
(
&
self
)
{
}
}
fn
main
(
)
{
MyLogger
:
:
init
(
)
.
unwrap
(
)
;
info
!
(
"
a
log
from
MyLogger
"
)
;
}
