use
icu_segmenter
:
:
LineBreakOptions
;
use
icu_segmenter
:
:
LineBreakStrictness
;
use
icu_segmenter
:
:
LineBreakWordOption
;
use
icu_segmenter
:
:
LineSegmenter
;
fn
check_with_options
(
s
:
&
str
mut
expect_utf8
:
Vec
<
usize
>
mut
expect_utf16
:
Vec
<
usize
>
options
:
LineBreakOptions
)
{
let
segmenter
=
LineSegmenter
:
:
new_dictionary_with_options
(
options
)
;
let
iter
=
segmenter
.
segment_str
(
s
)
;
let
result
:
Vec
<
usize
>
=
iter
.
collect
(
)
;
expect_utf8
.
insert
(
0
0
)
;
assert_eq
!
(
expect_utf8
result
"
{
s
}
"
)
;
let
s_utf16
:
Vec
<
u16
>
=
s
.
encode_utf16
(
)
.
collect
(
)
;
let
iter
=
segmenter
.
segment_utf16
(
&
s_utf16
)
;
let
result
:
Vec
<
usize
>
=
iter
.
collect
(
)
;
expect_utf16
.
insert
(
0
0
)
;
assert_eq
!
(
expect_utf16
result
"
{
s
}
"
)
;
}
fn
strict
(
s
:
&
str
ja_zh
:
bool
expect_utf8
:
Vec
<
usize
>
expect_utf16
:
Vec
<
usize
>
)
{
let
mut
options
=
LineBreakOptions
:
:
default
(
)
;
options
.
strictness
=
LineBreakStrictness
:
:
Strict
;
options
.
word_option
=
LineBreakWordOption
:
:
Normal
;
options
.
ja_zh
=
ja_zh
;
check_with_options
(
s
expect_utf8
expect_utf16
options
)
;
}
fn
normal
(
s
:
&
str
ja_zh
:
bool
expect_utf8
:
Vec
<
usize
>
expect_utf16
:
Vec
<
usize
>
)
{
let
mut
options
=
LineBreakOptions
:
:
default
(
)
;
options
.
strictness
=
LineBreakStrictness
:
:
Normal
;
options
.
word_option
=
LineBreakWordOption
:
:
Normal
;
options
.
ja_zh
=
ja_zh
;
check_with_options
(
s
expect_utf8
expect_utf16
options
)
;
}
fn
loose
(
s
:
&
str
ja_zh
:
bool
expect_utf8
:
Vec
<
usize
>
expect_utf16
:
Vec
<
usize
>
)
{
let
mut
options
=
LineBreakOptions
:
:
default
(
)
;
options
.
strictness
=
LineBreakStrictness
:
:
Loose
;
options
.
word_option
=
LineBreakWordOption
:
:
Normal
;
options
.
ja_zh
=
ja_zh
;
check_with_options
(
s
expect_utf8
expect_utf16
options
)
;
}
fn
anywhere
(
s
:
&
str
ja_zh
:
bool
expect_utf8
:
Vec
<
usize
>
expect_utf16
:
Vec
<
usize
>
)
{
let
mut
options
=
LineBreakOptions
:
:
default
(
)
;
options
.
strictness
=
LineBreakStrictness
:
:
Anywhere
;
options
.
word_option
=
LineBreakWordOption
:
:
Normal
;
options
.
ja_zh
=
ja_zh
;
check_with_options
(
s
expect_utf8
expect_utf16
options
)
;
}
#
[
test
]
fn
linebreak_strict
(
)
{
strict
(
"
\
u
{
3041
}
"
false
vec
!
[
6
9
]
vec
!
[
2
3
]
)
;
strict
(
"
\
u
{
30FC
}
"
false
vec
!
[
6
9
]
vec
!
[
2
3
]
)
;
strict
(
"
\
u
{
301C
}
"
false
vec
!
[
6
9
]
vec
!
[
2
3
]
)
;
strict
(
"
\
u
{
3005
}
"
false
vec
!
[
6
9
]
vec
!
[
2
3
]
)
;
strict
(
"
\
u
{
2025
}
\
u
{
2025
}
"
false
vec
!
[
9
12
]
vec
!
[
3
4
]
)
;
strict
(
"
\
u
{
30FB
}
"
false
vec
!
[
6
9
]
vec
!
[
2
3
]
)
;
strict
(
"
\
u
{
00B0
}
"
false
vec
!
[
5
8
]
vec
!
[
2
3
]
)
;
}
#
[
test
]
fn
linebreak_normal
(
)
{
normal
(
"
\
u
{
3041
}
"
false
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
normal
(
"
\
u
{
30FC
}
"
false
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
normal
(
"
\
u
{
301C
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
normal
(
"
\
u
{
3005
}
"
true
vec
!
[
6
9
]
vec
!
[
2
3
]
)
;
normal
(
"
\
u
{
2025
}
\
u
{
2025
}
"
true
vec
!
[
9
12
]
vec
!
[
3
4
]
)
;
normal
(
"
\
u
{
30FB
}
"
true
vec
!
[
6
9
]
vec
!
[
2
3
]
)
;
normal
(
"
\
u
{
00B0
}
"
true
vec
!
[
5
8
]
vec
!
[
2
3
]
)
;
normal
(
"
\
u
{
20AC
}
"
true
vec
!
[
3
9
]
vec
!
[
1
3
]
)
;
}
#
[
test
]
fn
linebreak_loose
(
)
{
loose
(
"
\
u
{
3041
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
30FC
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
301C
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
3005
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
2025
}
\
u
{
2025
}
"
true
vec
!
[
3
6
9
12
]
vec
!
[
1
2
3
4
]
)
;
loose
(
"
\
u
{
30FB
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
00B0
}
"
true
vec
!
[
3
5
8
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
20AC
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
2116
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
ff04
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
ffe1
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
ffe5
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
00b1
}
"
true
vec
!
[
3
5
8
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
20ac
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
ff04
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
2024
}
"
false
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
2025
}
"
false
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
2026
}
"
false
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
22ef
}
"
false
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
fe19
}
"
false
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
2024
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
2025
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
2026
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
22ef
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
fe19
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
2010
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
\
u
{
2013
}
"
true
vec
!
[
3
6
9
]
vec
!
[
1
2
3
]
)
;
loose
(
"
aa
\
u
{
2010
}
"
false
vec
!
[
5
]
vec
!
[
3
]
)
;
loose
(
"
aa
\
u
{
2013
}
"
false
vec
!
[
5
]
vec
!
[
3
]
)
;
}
#
[
test
]
fn
linebreak_anywhere
(
)
{
anywhere
(
"
aa
-
a
.
a
)
a
a
)
a
\
u
{
00A0
}
aa
\
u
{
2060
}
a
\
u
{
200D
}
a
a
"
true
vec
!
[
1
2
3
4
5
6
7
8
9
10
11
12
13
15
16
17
20
21
24
25
28
29
]
vec
!
[
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
]
)
;
anywhere
(
"
no
hyphenation
"
false
vec
!
[
1
2
3
4
5
6
7
8
9
10
11
12
13
14
]
vec
!
[
1
2
3
4
5
6
7
8
9
10
11
12
13
14
]
)
;
anywhere
(
"
latin
"
false
vec
!
[
1
2
3
4
5
]
vec
!
[
1
2
3
4
5
]
)
;
anywhere
(
"
XX
XXX
"
false
vec
!
[
1
2
3
4
5
6
]
vec
!
[
1
2
3
4
5
6
]
)
;
anywhere
(
"
X
X
"
false
vec
!
[
1
2
3
]
vec
!
[
1
2
3
]
)
;
anywhere
(
"
XXXX
\
u
{
00A0
}
XXXX
"
false
vec
!
[
1
2
3
4
6
7
8
9
10
]
vec
!
[
1
2
3
4
5
6
7
8
9
]
)
;
anywhere
(
"
X
XX
.
.
.
"
true
vec
!
[
1
2
3
4
5
6
7
]
vec
!
[
1
2
3
4
5
6
7
]
)
;
anywhere
(
"
X
XX
.
.
.
"
true
vec
!
[
1
2
3
4
5
6
7
]
vec
!
[
1
2
3
4
5
6
7
]
)
;
anywhere
(
"
X
\
u
{
00A0
}
X
"
true
vec
!
[
1
3
4
]
vec
!
[
1
2
3
]
)
;
anywhere
(
"
XXXX
\
u
{
00A0
}
XXXX
"
true
vec
!
[
1
2
3
4
6
7
8
9
10
]
vec
!
[
1
2
3
4
5
6
7
8
9
]
)
;
anywhere
(
"
XX
/
/
/
"
true
vec
!
[
1
2
3
4
5
]
vec
!
[
1
2
3
4
5
]
)
;
anywhere
(
"
X
XX
\
\
\
\
\
\
"
true
vec
!
[
1
2
3
4
5
6
7
]
vec
!
[
1
2
3
4
5
6
7
]
)
;
anywhere
(
"
XXX
/
X
"
true
vec
!
[
1
2
3
4
5
]
vec
!
[
1
2
3
4
5
]
)
;
anywhere
(
"
XXX
\
\
X
"
false
vec
!
[
1
2
3
4
5
]
vec
!
[
1
2
3
4
5
]
)
;
anywhere
(
"
XXX
\
\
X
"
false
vec
!
[
1
2
3
4
5
]
vec
!
[
1
2
3
4
5
]
)
;
anywhere
(
"
XXX
/
X
"
false
vec
!
[
1
2
3
4
5
]
vec
!
[
1
2
3
4
5
]
)
;
anywhere
(
"
XXXX
X
"
false
vec
!
[
1
2
3
4
5
6
]
vec
!
[
1
2
3
4
5
6
]
)
;
anywhere
(
"
XX
\
u
{
2060
}
XX
"
false
vec
!
[
1
2
5
6
7
]
vec
!
[
1
2
3
4
5
]
)
;
anywhere
(
"
.
.
\
u
{
200B
}
.
.
.
X
"
false
vec
!
[
1
2
5
6
7
8
9
]
vec
!
[
1
2
3
4
5
6
7
]
)
;
}
