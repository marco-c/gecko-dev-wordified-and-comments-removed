use
super
:
:
arc_wake
:
:
ArcWake
;
use
core
:
:
mem
;
use
core
:
:
task
:
:
{
Waker
RawWaker
RawWakerVTable
}
;
use
alloc
:
:
sync
:
:
Arc
;
pub
(
super
)
fn
waker_vtable
<
W
:
ArcWake
>
(
)
-
>
&
'
static
RawWakerVTable
{
&
RawWakerVTable
:
:
new
(
clone_arc_raw
:
:
<
W
>
wake_arc_raw
:
:
<
W
>
wake_by_ref_arc_raw
:
:
<
W
>
drop_arc_raw
:
:
<
W
>
)
}
pub
fn
waker
<
W
>
(
wake
:
Arc
<
W
>
)
-
>
Waker
where
W
:
ArcWake
{
let
ptr
=
Arc
:
:
into_raw
(
wake
)
as
*
const
(
)
;
unsafe
{
Waker
:
:
from_raw
(
RawWaker
:
:
new
(
ptr
waker_vtable
:
:
<
W
>
(
)
)
)
}
}
#
[
allow
(
clippy
:
:
redundant_clone
)
]
unsafe
fn
increase_refcount
<
T
:
ArcWake
>
(
data
:
*
const
(
)
)
{
let
arc
=
mem
:
:
ManuallyDrop
:
:
new
(
Arc
:
:
<
T
>
:
:
from_raw
(
data
as
*
const
T
)
)
;
let
_arc_clone
:
mem
:
:
ManuallyDrop
<
_
>
=
arc
.
clone
(
)
;
}
unsafe
fn
clone_arc_raw
<
T
:
ArcWake
>
(
data
:
*
const
(
)
)
-
>
RawWaker
{
increase_refcount
:
:
<
T
>
(
data
)
;
RawWaker
:
:
new
(
data
waker_vtable
:
:
<
T
>
(
)
)
}
unsafe
fn
wake_arc_raw
<
T
:
ArcWake
>
(
data
:
*
const
(
)
)
{
let
arc
:
Arc
<
T
>
=
Arc
:
:
from_raw
(
data
as
*
const
T
)
;
ArcWake
:
:
wake
(
arc
)
;
}
unsafe
fn
wake_by_ref_arc_raw
<
T
:
ArcWake
>
(
data
:
*
const
(
)
)
{
let
arc
=
mem
:
:
ManuallyDrop
:
:
new
(
Arc
:
:
<
T
>
:
:
from_raw
(
data
as
*
const
T
)
)
;
ArcWake
:
:
wake_by_ref
(
&
arc
)
;
}
unsafe
fn
drop_arc_raw
<
T
:
ArcWake
>
(
data
:
*
const
(
)
)
{
drop
(
Arc
:
:
<
T
>
:
:
from_raw
(
data
as
*
const
T
)
)
}
