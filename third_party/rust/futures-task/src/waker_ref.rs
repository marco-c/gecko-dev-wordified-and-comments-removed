use
super
:
:
arc_wake
:
:
ArcWake
;
use
super
:
:
waker
:
:
waker_vtable
;
use
alloc
:
:
sync
:
:
Arc
;
use
core
:
:
marker
:
:
PhantomData
;
use
core
:
:
mem
:
:
ManuallyDrop
;
use
core
:
:
ops
:
:
Deref
;
use
core
:
:
task
:
:
{
RawWaker
Waker
}
;
#
[
derive
(
Debug
)
]
pub
struct
WakerRef
<
'
a
>
{
waker
:
ManuallyDrop
<
Waker
>
_marker
:
PhantomData
<
&
'
a
(
)
>
}
impl
<
'
a
>
WakerRef
<
'
a
>
{
pub
fn
new
(
waker
:
&
'
a
Waker
)
-
>
Self
{
let
waker
=
ManuallyDrop
:
:
new
(
unsafe
{
core
:
:
ptr
:
:
read
(
waker
)
}
)
;
Self
{
waker
_marker
:
PhantomData
}
}
pub
fn
new_unowned
(
waker
:
ManuallyDrop
<
Waker
>
)
-
>
Self
{
Self
{
waker
_marker
:
PhantomData
}
}
}
impl
Deref
for
WakerRef
<
'
_
>
{
type
Target
=
Waker
;
fn
deref
(
&
self
)
-
>
&
Waker
{
&
self
.
waker
}
}
#
[
inline
]
pub
fn
waker_ref
<
W
>
(
wake
:
&
Arc
<
W
>
)
-
>
WakerRef
<
'
_
>
where
W
:
ArcWake
{
let
ptr
=
(
&
*
*
wake
as
*
const
W
)
as
*
const
(
)
;
let
waker
=
ManuallyDrop
:
:
new
(
unsafe
{
Waker
:
:
from_raw
(
RawWaker
:
:
new
(
ptr
waker_vtable
:
:
<
W
>
(
)
)
)
}
)
;
WakerRef
:
:
new_unowned
(
waker
)
}
