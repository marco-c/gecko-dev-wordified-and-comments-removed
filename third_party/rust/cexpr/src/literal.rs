use
std
:
:
char
;
use
std
:
:
str
:
:
{
self
FromStr
}
;
use
nom_crate
:
:
*
;
use
expr
:
:
EvalResult
;
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
)
]
pub
enum
CChar
{
Char
(
char
)
Raw
(
u64
)
}
impl
From
<
u8
>
for
CChar
{
fn
from
(
i
:
u8
)
-
>
CChar
{
match
i
{
0
.
.
.
0x7f
=
>
CChar
:
:
Char
(
i
as
u8
as
char
)
_
=
>
CChar
:
:
Raw
(
i
as
u64
)
}
}
}
impl
Into
<
Vec
<
u8
>
>
for
CChar
{
fn
into
(
self
)
-
>
Vec
<
u8
>
{
match
self
{
CChar
:
:
Char
(
c
)
=
>
{
let
mut
s
=
String
:
:
with_capacity
(
4
)
;
s
.
extend
(
&
[
c
]
)
;
s
.
into_bytes
(
)
}
CChar
:
:
Raw
(
i
)
=
>
{
let
mut
v
=
Vec
:
:
with_capacity
(
1
)
;
v
.
push
(
i
as
u8
)
;
v
}
}
}
}
macro_rules
!
force_type
(
(
input
:
expr
IResult
<
i
:
ty
o
:
ty
e
:
ty
>
)
=
>
(
IResult
:
:
Error
:
:
<
i
o
e
>
(
Err
:
:
Position
(
ErrorKind
:
:
Fix
input
)
)
)
)
;
macro_rules
!
byte
(
(
i
:
expr
(
p
:
pat
)
|
*
)
=
>
(
{
match
i
.
split_first
(
)
{
(
Some
(
(
&
c
p
rest
)
)
)
|
*
=
>
IResult
:
:
Done
:
:
<
&
[
_
]
u8
u32
>
(
rest
c
)
Some
(
_
)
=
>
IResult
:
:
Error
(
Err
:
:
Position
(
ErrorKind
:
:
OneOf
i
)
)
None
=
>
IResult
:
:
Incomplete
(
Needed
:
:
Size
(
1
)
)
}
}
)
)
;
named
!
(
binary
<
u8
>
byte
!
(
b
'
0
'
.
.
.
b
'
1
'
)
)
;
named
!
(
octal
<
u8
>
byte
!
(
b
'
0
'
.
.
.
b
'
7
'
)
)
;
named
!
(
decimal
<
u8
>
byte
!
(
b
'
0
'
.
.
.
b
'
9
'
)
)
;
named
!
(
hexadecimal
<
u8
>
byte
!
(
b
'
0
'
.
.
.
b
'
9
'
|
b
'
a
'
.
.
.
b
'
f
'
|
b
'
A
'
.
.
.
b
'
F
'
)
)
;
fn
escape2char
(
c
:
char
)
-
>
CChar
{
CChar
:
:
Char
(
match
c
{
'
a
'
=
>
'
\
x07
'
'
b
'
=
>
'
\
x08
'
'
f
'
=
>
'
\
x0c
'
'
n
'
=
>
'
\
n
'
'
r
'
=
>
'
\
r
'
'
t
'
=
>
'
\
t
'
'
v
'
=
>
'
\
x0b
'
_
=
>
unreachable
!
(
"
invalid
escape
{
}
"
c
)
}
)
}
fn
c_raw_escape
(
n
:
Vec
<
u8
>
radix
:
u32
)
-
>
Option
<
CChar
>
{
str
:
:
from_utf8
(
&
n
)
.
ok
(
)
.
and_then
(
|
i
|
u64
:
:
from_str_radix
(
i
radix
)
.
ok
(
)
)
.
map
(
|
i
|
match
i
{
0
.
.
.
0x7f
=
>
CChar
:
:
Char
(
i
as
u8
as
char
)
_
=
>
CChar
:
:
Raw
(
i
)
}
)
}
fn
c_unicode_escape
(
n
:
Vec
<
u8
>
)
-
>
Option
<
CChar
>
{
str
:
:
from_utf8
(
&
n
)
.
ok
(
)
.
and_then
(
|
i
|
u32
:
:
from_str_radix
(
i
16
)
.
ok
(
)
)
.
and_then
(
char
:
:
from_u32
)
.
map
(
CChar
:
:
Char
)
}
named
!
(
escaped_char
<
CChar
>
preceded
!
(
char
!
(
'
\
\
'
)
alt
!
(
map
!
(
one_of
!
(
r
#
"
'
"
?
\
"
#
)
CChar
:
:
Char
)
|
map
!
(
one_of
!
(
"
abfnrtv
"
)
escape2char
)
|
map_opt
!
(
many_m_n
!
(
1
3
octal
)
|
v
|
c_raw_escape
(
v
8
)
)
|
map_opt
!
(
preceded
!
(
char
!
(
'
x
'
)
many1
!
(
hexadecimal
)
)
|
v
|
c_raw_escape
(
v
16
)
)
|
map_opt
!
(
preceded
!
(
char
!
(
'
u
'
)
many_m_n
!
(
4
4
hexadecimal
)
)
c_unicode_escape
)
|
map_opt
!
(
preceded
!
(
char
!
(
'
U
'
)
many_m_n
!
(
8
8
hexadecimal
)
)
c_unicode_escape
)
)
)
)
;
named
!
(
c_width_prefix
alt
!
(
tag
!
(
"
u8
"
)
|
tag
!
(
"
u
"
)
|
tag
!
(
"
U
"
)
|
tag
!
(
"
L
"
)
)
)
;
named
!
(
c_char
<
CChar
>
delimited
!
(
terminated
!
(
opt
!
(
c_width_prefix
)
char
!
(
'
\
'
'
)
)
alt
!
(
escaped_char
|
map
!
(
byte
!
(
0
.
.
.
91
/
*
\
=
92
*
/
|
93
.
.
.
255
)
CChar
:
:
from
)
)
char
!
(
'
\
'
'
)
)
)
;
named
!
(
c_string
<
Vec
<
u8
>
>
delimited
!
(
alt
!
(
preceded
!
(
c_width_prefix
char
!
(
'
"
'
)
)
|
char
!
(
'
"
'
)
)
fold_many0
!
(
alt
!
(
map
!
(
escaped_char
|
c
:
CChar
|
c
.
into
(
)
)
|
map
!
(
is_not
!
(
"
\
"
"
)
|
c
:
&
[
u8
]
|
c
.
into
(
)
)
)
Vec
:
:
new
(
)
|
mut
v
:
Vec
<
u8
>
res
:
Vec
<
u8
>
|
{
v
.
extend_from_slice
(
&
res
)
;
v
}
)
char
!
(
'
"
'
)
)
)
;
fn
c_int_radix
(
n
:
Vec
<
u8
>
radix
:
u32
)
-
>
Option
<
u64
>
{
str
:
:
from_utf8
(
&
n
)
.
ok
(
)
.
and_then
(
|
i
|
u64
:
:
from_str_radix
(
i
radix
)
.
ok
(
)
)
}
named
!
(
c_int
<
i64
>
map
!
(
terminated
!
(
alt_complete
!
(
map_opt
!
(
preceded
!
(
tag
!
(
"
0x
"
)
many1
!
(
hexadecimal
)
)
|
v
|
c_int_radix
(
v
16
)
)
|
map_opt
!
(
preceded
!
(
tag
!
(
"
0b
"
)
many1
!
(
binary
)
)
|
v
|
c_int_radix
(
v
2
)
)
|
map_opt
!
(
preceded
!
(
char
!
(
'
0
'
)
many1
!
(
octal
)
)
|
v
|
c_int_radix
(
v
8
)
)
|
map_opt
!
(
many1
!
(
decimal
)
|
v
|
c_int_radix
(
v
10
)
)
|
force_type
!
(
IResult
<
_
_
u32
>
)
)
is_a
!
(
"
ulUL
"
)
)
|
i
|
i
as
i64
)
)
;
named
!
(
float_width
<
u8
>
complete
!
(
byte
!
(
b
'
f
'
|
b
'
l
'
|
b
'
F
'
|
b
'
L
'
)
)
)
;
named
!
(
float_exp
<
(
Option
<
u8
>
Vec
<
u8
>
)
>
preceded
!
(
byte
!
(
b
'
e
'
|
b
'
E
'
)
pair
!
(
opt
!
(
byte
!
(
b
'
-
'
|
b
'
+
'
)
)
many1
!
(
decimal
)
)
)
)
;
named
!
(
c_float
<
f64
>
map_opt
!
(
alt
!
(
terminated
!
(
recognize
!
(
tuple
!
(
many1
!
(
decimal
)
byte
!
(
b
'
.
'
)
many0
!
(
decimal
)
)
)
opt
!
(
float_width
)
)
|
terminated
!
(
recognize
!
(
tuple
!
(
many0
!
(
decimal
)
byte
!
(
b
'
.
'
)
many1
!
(
decimal
)
)
)
opt
!
(
float_width
)
)
|
terminated
!
(
recognize
!
(
tuple
!
(
many0
!
(
decimal
)
opt
!
(
byte
!
(
b
'
.
'
)
)
many1
!
(
decimal
)
float_exp
)
)
opt
!
(
float_width
)
)
|
terminated
!
(
recognize
!
(
tuple
!
(
many1
!
(
decimal
)
opt
!
(
byte
!
(
b
'
.
'
)
)
many0
!
(
decimal
)
float_exp
)
)
opt
!
(
float_width
)
)
|
terminated
!
(
recognize
!
(
many1
!
(
decimal
)
)
float_width
)
)
|
v
|
str
:
:
from_utf8
(
v
)
.
ok
(
)
.
and_then
(
|
i
|
f64
:
:
from_str
(
i
)
.
ok
(
)
)
)
)
;
named
!
(
one_literal
<
&
[
u8
]
EvalResult
:
:
Error
>
fix_error
!
(
:
:
Error
alt_complete
!
(
map
!
(
c_char
EvalResult
:
:
Char
)
|
map
!
(
c_int
|
i
|
EvalResult
:
:
Int
(
:
:
std
:
:
num
:
:
Wrapping
(
i
)
)
)
|
map
!
(
c_float
EvalResult
:
:
Float
)
|
map
!
(
c_string
EvalResult
:
:
Str
)
)
)
)
;
pub
fn
parse
(
input
:
&
[
u8
]
)
-
>
IResult
<
&
[
u8
]
EvalResult
:
:
Error
>
{
:
:
assert_full_parse
(
one_literal
(
input
)
)
}
