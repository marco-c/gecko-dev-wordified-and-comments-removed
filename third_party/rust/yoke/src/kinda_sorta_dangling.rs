use
core
:
:
mem
:
:
{
ManuallyDrop
MaybeUninit
}
;
use
core
:
:
ops
:
:
{
Deref
DerefMut
}
;
#
[
repr
(
transparent
)
]
pub
(
crate
)
struct
KindaSortaDangling
<
T
:
'
static
>
{
dangle
:
MaybeUninit
<
T
>
}
impl
<
T
:
'
static
>
KindaSortaDangling
<
T
>
{
#
[
inline
]
pub
(
crate
)
const
fn
new
(
dangle
:
T
)
-
>
Self
{
KindaSortaDangling
{
dangle
:
MaybeUninit
:
:
new
(
dangle
)
}
}
#
[
inline
]
pub
(
crate
)
fn
into_inner
(
self
)
-
>
T
{
let
manual
=
ManuallyDrop
:
:
new
(
self
)
;
unsafe
{
manual
.
dangle
.
assume_init_read
(
)
}
}
}
impl
<
T
:
'
static
>
Deref
for
KindaSortaDangling
<
T
>
{
type
Target
=
T
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
T
{
unsafe
{
self
.
dangle
.
assume_init_ref
(
)
}
}
}
impl
<
T
:
'
static
>
DerefMut
for
KindaSortaDangling
<
T
>
{
#
[
inline
]
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
T
{
unsafe
{
self
.
dangle
.
assume_init_mut
(
)
}
}
}
impl
<
T
:
'
static
>
Drop
for
KindaSortaDangling
<
T
>
{
#
[
inline
]
fn
drop
(
&
mut
self
)
{
unsafe
{
self
.
dangle
.
as_mut_ptr
(
)
.
drop_in_place
(
)
;
}
}
}
