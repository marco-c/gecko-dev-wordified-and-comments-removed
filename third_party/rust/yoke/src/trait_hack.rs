use
core
:
:
mem
;
#
[
repr
(
transparent
)
]
#
[
derive
(
Clone
PartialEq
Eq
Debug
)
]
#
[
allow
(
clippy
:
:
exhaustive_structs
)
]
pub
struct
YokeTraitHack
<
T
>
(
pub
T
)
;
impl
<
'
a
T
>
YokeTraitHack
<
&
'
a
T
>
{
pub
fn
into_ref
(
self
)
-
>
&
'
a
YokeTraitHack
<
T
>
{
unsafe
{
mem
:
:
transmute
:
:
<
YokeTraitHack
<
&
T
>
&
YokeTraitHack
<
T
>
>
(
self
)
}
}
}
#
[
cfg
(
feature
=
"
serde
"
)
]
impl
<
'
de
T
>
serde
:
:
de
:
:
Deserialize
<
'
de
>
for
YokeTraitHack
<
T
>
where
T
:
serde
:
:
de
:
:
Deserialize
<
'
de
>
{
#
[
inline
]
fn
deserialize
<
D
>
(
deserializer
:
D
)
-
>
Result
<
Self
D
:
:
Error
>
where
D
:
serde
:
:
de
:
:
Deserializer
<
'
de
>
{
T
:
:
deserialize
(
deserializer
)
.
map
(
YokeTraitHack
)
}
}
