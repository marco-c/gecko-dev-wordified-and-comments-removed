use
crate
:
:
CloneableCart
;
use
core
:
:
ops
:
:
Deref
;
use
stable_deref_trait
:
:
StableDeref
;
#
[
derive
(
Clone
PartialEq
Eq
Debug
)
]
#
[
allow
(
clippy
:
:
exhaustive_enums
)
]
pub
enum
EitherCart
<
C0
C1
>
{
A
(
C0
)
B
(
C1
)
}
impl
<
C0
C1
T
>
Deref
for
EitherCart
<
C0
C1
>
where
C0
:
Deref
<
Target
=
T
>
C1
:
Deref
<
Target
=
T
>
T
:
?
Sized
{
type
Target
=
T
;
fn
deref
(
&
self
)
-
>
&
T
{
use
EitherCart
:
:
*
;
match
self
{
A
(
a
)
=
>
a
.
deref
(
)
B
(
b
)
=
>
b
.
deref
(
)
}
}
}
unsafe
impl
<
C0
C1
T
>
StableDeref
for
EitherCart
<
C0
C1
>
where
C0
:
StableDeref
C1
:
StableDeref
C0
:
Deref
<
Target
=
T
>
C1
:
Deref
<
Target
=
T
>
T
:
?
Sized
{
}
unsafe
impl
<
C0
C1
>
CloneableCart
for
EitherCart
<
C0
C1
>
where
C0
:
CloneableCart
C1
:
CloneableCart
{
}
