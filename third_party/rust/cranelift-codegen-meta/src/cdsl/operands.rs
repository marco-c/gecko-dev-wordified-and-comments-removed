use
std
:
:
collections
:
:
HashMap
;
use
crate
:
:
cdsl
:
:
typevar
:
:
TypeVar
;
#
[
derive
(
Clone
Debug
)
]
pub
(
crate
)
struct
Operand
{
pub
name
:
&
'
static
str
pub
kind
:
OperandKind
doc
:
Option
<
&
'
static
str
>
}
impl
Operand
{
pub
fn
new
(
name
:
&
'
static
str
kind
:
impl
Into
<
OperandKind
>
)
-
>
Self
{
Self
{
name
doc
:
None
kind
:
kind
.
into
(
)
}
}
pub
fn
with_doc
(
mut
self
doc
:
&
'
static
str
)
-
>
Self
{
self
.
doc
=
Some
(
doc
)
;
self
}
pub
fn
doc
(
&
self
)
-
>
Option
<
&
str
>
{
if
let
Some
(
doc
)
=
&
self
.
doc
{
return
Some
(
doc
)
;
}
match
&
self
.
kind
.
fields
{
OperandKindFields
:
:
TypeVar
(
tvar
)
=
>
Some
(
&
tvar
.
doc
)
_
=
>
self
.
kind
.
doc
(
)
}
}
pub
fn
is_value
(
&
self
)
-
>
bool
{
match
self
.
kind
.
fields
{
OperandKindFields
:
:
TypeVar
(
_
)
=
>
true
_
=
>
false
}
}
pub
fn
type_var
(
&
self
)
-
>
Option
<
&
TypeVar
>
{
match
&
self
.
kind
.
fields
{
OperandKindFields
:
:
TypeVar
(
typevar
)
=
>
Some
(
typevar
)
_
=
>
None
}
}
pub
fn
is_varargs
(
&
self
)
-
>
bool
{
match
self
.
kind
.
fields
{
OperandKindFields
:
:
VariableArgs
=
>
true
_
=
>
false
}
}
pub
fn
is_immediate_or_entityref
(
&
self
)
-
>
bool
{
match
self
.
kind
.
fields
{
OperandKindFields
:
:
ImmEnum
(
_
)
|
OperandKindFields
:
:
ImmValue
|
OperandKindFields
:
:
EntityRef
=
>
true
_
=
>
false
}
}
pub
fn
is_immediate
(
&
self
)
-
>
bool
{
match
self
.
kind
.
fields
{
OperandKindFields
:
:
ImmEnum
(
_
)
|
OperandKindFields
:
:
ImmValue
=
>
true
_
=
>
false
}
}
pub
fn
is_cpu_flags
(
&
self
)
-
>
bool
{
match
&
self
.
kind
.
fields
{
OperandKindFields
:
:
TypeVar
(
type_var
)
if
type_var
.
name
=
=
"
iflags
"
|
|
type_var
.
name
=
=
"
fflags
"
=
>
{
true
}
_
=
>
false
}
}
}
pub
type
EnumValues
=
HashMap
<
&
'
static
str
&
'
static
str
>
;
#
[
derive
(
Clone
Debug
)
]
pub
(
crate
)
enum
OperandKindFields
{
EntityRef
VariableArgs
ImmValue
ImmEnum
(
EnumValues
)
TypeVar
(
TypeVar
)
}
#
[
derive
(
Clone
Debug
)
]
pub
(
crate
)
struct
OperandKind
{
pub
rust_type
:
&
'
static
str
pub
rust_field_name
:
&
'
static
str
pub
fields
:
OperandKindFields
doc
:
Option
<
&
'
static
str
>
}
impl
OperandKind
{
pub
fn
new
(
rust_field_name
:
&
'
static
str
rust_type
:
&
'
static
str
fields
:
OperandKindFields
)
-
>
Self
{
Self
{
rust_field_name
rust_type
fields
doc
:
None
}
}
pub
fn
with_doc
(
mut
self
doc
:
&
'
static
str
)
-
>
Self
{
assert
!
(
self
.
doc
.
is_none
(
)
)
;
self
.
doc
=
Some
(
doc
)
;
self
}
fn
doc
(
&
self
)
-
>
Option
<
&
str
>
{
if
let
Some
(
doc
)
=
&
self
.
doc
{
return
Some
(
doc
)
;
}
match
&
self
.
fields
{
OperandKindFields
:
:
TypeVar
(
type_var
)
=
>
Some
(
&
type_var
.
doc
)
OperandKindFields
:
:
ImmEnum
(
_
)
|
OperandKindFields
:
:
ImmValue
|
OperandKindFields
:
:
EntityRef
|
OperandKindFields
:
:
VariableArgs
=
>
None
}
}
}
impl
Into
<
OperandKind
>
for
&
TypeVar
{
fn
into
(
self
)
-
>
OperandKind
{
OperandKind
:
:
new
(
"
value
"
"
ir
:
:
Value
"
OperandKindFields
:
:
TypeVar
(
self
.
into
(
)
)
)
}
}
impl
Into
<
OperandKind
>
for
&
OperandKind
{
fn
into
(
self
)
-
>
OperandKind
{
self
.
clone
(
)
}
}
