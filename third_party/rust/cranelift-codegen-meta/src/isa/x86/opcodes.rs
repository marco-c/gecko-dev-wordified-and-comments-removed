pub
static
EMPTY
:
[
u8
;
0
]
=
[
]
;
pub
static
ADC
:
[
u8
;
1
]
=
[
0x11
]
;
pub
static
ADD
:
[
u8
;
1
]
=
[
0x01
]
;
pub
static
ADD_IMM
:
[
u8
;
1
]
=
[
0x81
]
;
pub
static
ADD_IMM8_SIGN_EXTEND
:
[
u8
;
1
]
=
[
0x83
]
;
pub
static
ADDSD
:
[
u8
;
3
]
=
[
0xf2
0x0f
0x58
]
;
pub
static
ADDSS
:
[
u8
;
3
]
=
[
0xf3
0x0f
0x58
]
;
pub
static
AND
:
[
u8
;
1
]
=
[
0x21
]
;
pub
static
AND_IMM
:
[
u8
;
1
]
=
[
0x81
]
;
pub
static
AND_IMM8_SIGN_EXTEND
:
[
u8
;
1
]
=
[
0x83
]
;
pub
static
ANDNPS
:
[
u8
;
2
]
=
[
0x0f
0x55
]
;
pub
static
ANDPS
:
[
u8
;
2
]
=
[
0x0f
0x54
]
;
pub
static
BIT_SCAN_FORWARD
:
[
u8
;
2
]
=
[
0x0f
0xbc
]
;
pub
static
BIT_SCAN_REVERSE
:
[
u8
;
2
]
=
[
0x0f
0xbd
]
;
pub
static
CALL_RELATIVE
:
[
u8
;
1
]
=
[
0xe8
]
;
pub
static
CMOV_OVERFLOW
:
[
u8
;
2
]
=
[
0x0f
0x40
]
;
pub
static
CMP_IMM
:
[
u8
;
1
]
=
[
0x81
]
;
pub
static
CMP_IMM8
:
[
u8
;
1
]
=
[
0x83
]
;
pub
static
CMP_REG
:
[
u8
;
1
]
=
[
0x39
]
;
pub
static
CVTSD2SS
:
[
u8
;
3
]
=
[
0xf2
0x0f
0x5a
]
;
pub
static
CVTSI2SD
:
[
u8
;
3
]
=
[
0xf2
0x0f
0x2a
]
;
pub
static
CVTSI2SS
:
[
u8
;
3
]
=
[
0xf3
0x0f
0x2a
]
;
pub
static
CVTSS2SD
:
[
u8
;
3
]
=
[
0xf3
0x0f
0x5a
]
;
pub
static
CVTTSD2SI
:
[
u8
;
3
]
=
[
0xf2
0x0f
0x2c
]
;
pub
static
CVTTSS2SI
:
[
u8
;
3
]
=
[
0xf3
0x0f
0x2c
]
;
pub
static
DIV
:
[
u8
;
1
]
=
[
0xf7
]
;
pub
static
DIVSD
:
[
u8
;
3
]
=
[
0xf2
0x0f
0x5e
]
;
pub
static
DIVSS
:
[
u8
;
3
]
=
[
0xf3
0x0f
0x5e
]
;
pub
static
IDIV
:
[
u8
;
1
]
=
[
0xf7
]
;
pub
static
IMUL
:
[
u8
;
2
]
=
[
0x0f
0xaf
]
;
pub
static
IMUL_RDX_RAX
:
[
u8
;
1
]
=
[
0xf7
]
;
pub
static
INSERTPS
:
[
u8
;
4
]
=
[
0x66
0x0f
0x3a
0x21
]
;
pub
static
JUMP_ABSOLUTE
:
[
u8
;
1
]
=
[
0xff
]
;
pub
static
JUMP_NEAR_RELATIVE
:
[
u8
;
1
]
=
[
0xe9
]
;
pub
static
JUMP_NEAR_IF_OVERFLOW
:
[
u8
;
2
]
=
[
0x0f
0x80
]
;
pub
static
JUMP_SHORT
:
[
u8
;
1
]
=
[
0xeb
]
;
pub
static
JUMP_SHORT_IF_EQUAL
:
[
u8
;
1
]
=
[
0x74
]
;
pub
static
JUMP_SHORT_IF_NOT_EQUAL
:
[
u8
;
1
]
=
[
0x75
]
;
pub
static
JUMP_SHORT_IF_OVERFLOW
:
[
u8
;
1
]
=
[
0x70
]
;
pub
static
LEA
:
[
u8
;
1
]
=
[
0x8d
]
;
pub
static
LZCNT
:
[
u8
;
3
]
=
[
0xf3
0x0f
0xbd
]
;
pub
static
MAXSD
:
[
u8
;
3
]
=
[
0xf2
0x0f
0x5f
]
;
pub
static
MAXSS
:
[
u8
;
3
]
=
[
0xf3
0x0f
0x5f
]
;
pub
static
MINSD
:
[
u8
;
3
]
=
[
0xf2
0x0f
0x5d
]
;
pub
static
MINSS
:
[
u8
;
3
]
=
[
0xf3
0x0f
0x5d
]
;
pub
static
MOV_BYTE_STORE
:
[
u8
;
1
]
=
[
0x88
]
;
pub
static
MOV_IMM
:
[
u8
;
1
]
=
[
0xb8
]
;
pub
static
MOV_IMM_SIGNEXTEND
:
[
u8
;
1
]
=
[
0xc7
]
;
pub
static
MOV_LOAD
:
[
u8
;
1
]
=
[
0x8b
]
;
pub
static
MOV_STORE_16
:
[
u8
;
2
]
=
[
0x66
0x89
]
;
pub
static
MOV_STORE
:
[
u8
;
1
]
=
[
0x89
]
;
pub
static
MOVAPS_LOAD
:
[
u8
;
2
]
=
[
0x0f
0x28
]
;
pub
static
MOVD_LOAD_XMM
:
[
u8
;
3
]
=
[
0x66
0x0f
0x6e
]
;
pub
static
MOVD_STORE_XMM
:
[
u8
;
3
]
=
[
0x66
0x0f
0x7e
]
;
pub
static
MOVLHPS
:
[
u8
;
2
]
=
[
0x0f
0x16
]
;
pub
static
MOVSD_LOAD
:
[
u8
;
3
]
=
[
0xf2
0x0f
0x10
]
;
pub
static
MOVSD_STORE
:
[
u8
;
3
]
=
[
0xf2
0x0f
0x11
]
;
pub
static
MOVSS_STORE
:
[
u8
;
3
]
=
[
0xf3
0x0f
0x11
]
;
pub
static
MOVSS_LOAD
:
[
u8
;
3
]
=
[
0xf3
0x0f
0x10
]
;
pub
static
MOVSX_BYTE
:
[
u8
;
2
]
=
[
0x0f
0xbe
]
;
pub
static
MOVSX_WORD
:
[
u8
;
2
]
=
[
0x0f
0xbf
]
;
pub
static
MOVSXD
:
[
u8
;
1
]
=
[
0x63
]
;
pub
static
MOVUPS_LOAD
:
[
u8
;
2
]
=
[
0x0f
0x10
]
;
pub
static
MOVUPS_STORE
:
[
u8
;
2
]
=
[
0x0f
0x11
]
;
pub
static
MOVZX_BYTE
:
[
u8
;
2
]
=
[
0x0f
0xb6
]
;
pub
static
MOVZX_WORD
:
[
u8
;
2
]
=
[
0x0f
0xb7
]
;
pub
static
MUL
:
[
u8
;
1
]
=
[
0xf7
]
;
pub
static
MULSD
:
[
u8
;
3
]
=
[
0xf2
0x0f
0x59
]
;
pub
static
MULSS
:
[
u8
;
3
]
=
[
0xf3
0x0f
0x59
]
;
pub
static
NOT
:
[
u8
;
1
]
=
[
0xf7
]
;
pub
static
OR
:
[
u8
;
1
]
=
[
0x09
]
;
pub
static
OR_IMM
:
[
u8
;
1
]
=
[
0x81
]
;
pub
static
OR_IMM8_SIGN_EXTEND
:
[
u8
;
1
]
=
[
0x83
]
;
pub
static
ORPS
:
[
u8
;
2
]
=
[
0x0f
0x56
]
;
pub
static
PADDB
:
[
u8
;
3
]
=
[
0x66
0x0f
0xfc
]
;
pub
static
PADDD
:
[
u8
;
3
]
=
[
0x66
0x0f
0xfe
]
;
pub
static
PADDQ
:
[
u8
;
3
]
=
[
0x66
0x0f
0xd4
]
;
pub
static
PADDW
:
[
u8
;
3
]
=
[
0x66
0x0f
0xfd
]
;
pub
static
PCMPEQB
:
[
u8
;
3
]
=
[
0x66
0x0f
0x74
]
;
pub
static
PCMPEQD
:
[
u8
;
3
]
=
[
0x66
0x0f
0x76
]
;
pub
static
PCMPEQQ
:
[
u8
;
4
]
=
[
0x66
0x0f
0x38
0x29
]
;
pub
static
PCMPEQW
:
[
u8
;
3
]
=
[
0x66
0x0f
0x75
]
;
pub
static
PEXTR
:
[
u8
;
4
]
=
[
0x66
0x0f
0x3a
0x16
]
;
pub
static
PEXTRB
:
[
u8
;
4
]
=
[
0x66
0x0f
0x3a
0x14
]
;
pub
static
PEXTRW_SSE2
:
[
u8
;
3
]
=
[
0x66
0x0f
0xc5
]
;
pub
static
PINSR
:
[
u8
;
4
]
=
[
0x66
0x0f
0x3a
0x22
]
;
pub
static
PINSRB
:
[
u8
;
4
]
=
[
0x66
0x0f
0x3a
0x20
]
;
pub
static
PINSRW
:
[
u8
;
3
]
=
[
0x66
0x0f
0xc4
]
;
pub
static
POP_REG
:
[
u8
;
1
]
=
[
0x58
]
;
pub
static
POPCNT
:
[
u8
;
3
]
=
[
0xf3
0x0f
0xb8
]
;
pub
static
PSHUFB
:
[
u8
;
4
]
=
[
0x66
0x0f
0x38
0x00
]
;
pub
static
PSHUFD
:
[
u8
;
3
]
=
[
0x66
0x0f
0x70
]
;
pub
static
PUSH_REG
:
[
u8
;
1
]
=
[
0x50
]
;
pub
static
PXOR
:
[
u8
;
3
]
=
[
0x66
0x0f
0xef
]
;
pub
static
RET_NEAR
:
[
u8
;
1
]
=
[
0xc3
]
;
pub
static
ROTATE_CL
:
[
u8
;
1
]
=
[
0xd3
]
;
pub
static
ROTATE_IMM8
:
[
u8
;
1
]
=
[
0xc1
]
;
pub
static
ROUNDSD
:
[
u8
;
4
]
=
[
0x66
0x0f
0x3a
0x0b
]
;
pub
static
ROUNDSS
:
[
u8
;
4
]
=
[
0x66
0x0f
0x3a
0x0a
]
;
pub
static
SBB
:
[
u8
;
1
]
=
[
0x19
]
;
pub
static
SET_BYTE_IF_OVERFLOW
:
[
u8
;
2
]
=
[
0x0f
0x90
]
;
pub
static
SQRTSD
:
[
u8
;
3
]
=
[
0xf2
0x0f
0x51
]
;
pub
static
SQRTSS
:
[
u8
;
3
]
=
[
0xf3
0x0f
0x51
]
;
pub
static
SUB
:
[
u8
;
1
]
=
[
0x29
]
;
pub
static
SUBSD
:
[
u8
;
3
]
=
[
0xf2
0x0f
0x5c
]
;
pub
static
SUBSS
:
[
u8
;
3
]
=
[
0xf3
0x0f
0x5c
]
;
pub
static
TEST_BYTE_REG
:
[
u8
;
1
]
=
[
0x84
]
;
pub
static
TEST_REG
:
[
u8
;
1
]
=
[
0x85
]
;
pub
static
TZCNT
:
[
u8
;
3
]
=
[
0xf3
0x0f
0xbc
]
;
pub
static
UCOMISD
:
[
u8
;
3
]
=
[
0x66
0x0f
0x2e
]
;
pub
static
UCOMISS
:
[
u8
;
2
]
=
[
0x0f
0x2e
]
;
pub
static
UNDEFINED2
:
[
u8
;
2
]
=
[
0x0f
0x0b
]
;
pub
static
XOR_IMM
:
[
u8
;
1
]
=
[
0x81
]
;
pub
static
XOR_IMM8_SIGN_EXTEND
:
[
u8
;
1
]
=
[
0x83
]
;
pub
static
XOR
:
[
u8
;
1
]
=
[
0x31
]
;
pub
static
XORB
:
[
u8
;
1
]
=
[
0x30
]
;
pub
static
XORPD
:
[
u8
;
3
]
=
[
0x66
0x0f
0x57
]
;
pub
static
XORPS
:
[
u8
;
2
]
=
[
0x0f
0x57
]
;
