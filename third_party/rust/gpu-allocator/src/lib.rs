mod
result
;
pub
use
result
:
:
*
;
pub
(
crate
)
mod
allocator
;
pub
use
allocator
:
:
{
AllocationReport
AllocatorReport
MemoryBlockReport
}
;
#
[
cfg
(
feature
=
"
visualizer
"
)
]
pub
mod
visualizer
;
#
[
cfg
(
feature
=
"
vulkan
"
)
]
pub
mod
vulkan
;
#
[
cfg
(
all
(
windows
feature
=
"
d3d12
"
)
)
]
pub
mod
d3d12
;
#
[
cfg
(
all
(
any
(
target_os
=
"
macos
"
target_os
=
"
ios
"
)
feature
=
"
metal
"
)
)
]
pub
mod
metal
;
#
[
derive
(
Clone
Copy
Debug
PartialEq
Eq
Hash
)
]
pub
enum
MemoryLocation
{
Unknown
GpuOnly
CpuToGpu
GpuToCpu
}
#
[
derive
(
Copy
Clone
Debug
)
]
pub
struct
AllocatorDebugSettings
{
pub
log_memory_information
:
bool
pub
log_leaks_on_shutdown
:
bool
pub
store_stack_traces
:
bool
pub
log_allocations
:
bool
pub
log_frees
:
bool
pub
log_stack_traces
:
bool
}
impl
Default
for
AllocatorDebugSettings
{
fn
default
(
)
-
>
Self
{
Self
{
log_memory_information
:
false
log_leaks_on_shutdown
:
true
store_stack_traces
:
false
log_allocations
:
false
log_frees
:
false
log_stack_traces
:
false
}
}
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
AllocationSizes
{
device_memblock_size
:
u64
host_memblock_size
:
u64
}
impl
AllocationSizes
{
pub
fn
new
(
device_memblock_size
:
u64
host_memblock_size
:
u64
)
-
>
Self
{
const
FOUR_MB
:
u64
=
4
*
1024
*
1024
;
const
TWO_HUNDRED_AND_FIFTY_SIX_MB
:
u64
=
256
*
1024
*
1024
;
let
mut
device_memblock_size
=
device_memblock_size
.
clamp
(
FOUR_MB
TWO_HUNDRED_AND_FIFTY_SIX_MB
)
;
let
mut
host_memblock_size
=
host_memblock_size
.
clamp
(
FOUR_MB
TWO_HUNDRED_AND_FIFTY_SIX_MB
)
;
if
device_memblock_size
%
FOUR_MB
!
=
0
{
let
val
=
device_memblock_size
/
FOUR_MB
+
1
;
device_memblock_size
=
val
*
FOUR_MB
;
log
:
:
warn
!
(
"
Device
memory
block
size
must
be
a
multiple
of
4MB
clamping
to
{
}
MB
"
device_memblock_size
/
1024
/
1024
)
}
if
host_memblock_size
%
FOUR_MB
!
=
0
{
let
val
=
host_memblock_size
/
FOUR_MB
+
1
;
host_memblock_size
=
val
*
FOUR_MB
;
log
:
:
warn
!
(
"
Host
memory
block
size
must
be
a
multiple
of
4MB
clamping
to
{
}
MB
"
host_memblock_size
/
1024
/
1024
)
}
Self
{
device_memblock_size
host_memblock_size
}
}
}
impl
Default
for
AllocationSizes
{
fn
default
(
)
-
>
Self
{
Self
{
device_memblock_size
:
256
*
1024
*
1024
host_memblock_size
:
64
*
1024
*
1024
}
}
}
