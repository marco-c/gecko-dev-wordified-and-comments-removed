use
std
:
:
collections
:
:
HashMap
;
use
stencil
:
:
script
:
:
ScriptStencilIndex
;
#
[
derive
(
Debug
)
]
pub
struct
FunctionProperty
{
is_annex_b
:
bool
}
impl
FunctionProperty
{
fn
is_annex_b_default
(
)
-
>
bool
{
false
}
pub
fn
new
(
)
-
>
Self
{
Self
{
is_annex_b
:
Self
:
:
is_annex_b_default
(
)
}
}
pub
fn
mark_annex_b
(
&
mut
self
)
{
self
.
is_annex_b
=
true
;
}
pub
fn
is_annex_b
(
&
self
)
-
>
bool
{
self
.
is_annex_b
}
}
#
[
derive
(
Debug
)
]
pub
struct
FunctionDeclarationPropertyMap
{
props
:
HashMap
<
ScriptStencilIndex
FunctionProperty
>
}
impl
FunctionDeclarationPropertyMap
{
pub
fn
new
(
)
-
>
Self
{
Self
{
props
:
HashMap
:
:
new
(
)
}
}
pub
fn
mark_annex_b
(
&
mut
self
index
:
ScriptStencilIndex
)
{
if
!
self
.
props
.
contains_key
(
&
index
)
{
self
.
props
.
insert
(
index
FunctionProperty
:
:
new
(
)
)
;
}
self
.
props
.
get_mut
(
&
index
)
.
expect
(
"
Should
exist
"
)
.
mark_annex_b
(
)
;
}
pub
fn
is_annex_b
(
&
self
index
:
ScriptStencilIndex
)
-
>
bool
{
if
!
self
.
props
.
contains_key
(
&
index
)
{
return
FunctionProperty
:
:
is_annex_b_default
(
)
;
}
self
.
props
.
get
(
&
index
)
.
expect
(
"
Should
exist
"
)
.
is_annex_b
(
)
}
}
