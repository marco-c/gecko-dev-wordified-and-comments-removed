use
super
:
:
{
write_marker
RmpWrite
}
;
use
crate
:
:
encode
:
:
ValueWriteError
;
use
crate
:
:
Marker
;
#
[
inline
]
pub
fn
write_pfix
<
W
:
RmpWrite
>
(
wr
:
&
mut
W
val
:
u8
)
-
>
Result
<
(
)
W
:
:
Error
>
{
assert
!
(
val
<
128
)
;
write_marker
(
wr
Marker
:
:
FixPos
(
val
)
)
.
map_err
(
|
e
|
e
.
0
)
?
;
Ok
(
(
)
)
}
pub
fn
write_u8
<
W
:
RmpWrite
>
(
wr
:
&
mut
W
val
:
u8
)
-
>
Result
<
(
)
ValueWriteError
<
W
:
:
Error
>
>
{
write_marker
(
wr
Marker
:
:
U8
)
?
;
wr
.
write_data_u8
(
val
)
?
;
Ok
(
(
)
)
}
pub
fn
write_u16
<
W
:
RmpWrite
>
(
wr
:
&
mut
W
val
:
u16
)
-
>
Result
<
(
)
ValueWriteError
<
W
:
:
Error
>
>
{
write_marker
(
wr
Marker
:
:
U16
)
?
;
wr
.
write_data_u16
(
val
)
?
;
Ok
(
(
)
)
}
pub
fn
write_u32
<
W
:
RmpWrite
>
(
wr
:
&
mut
W
val
:
u32
)
-
>
Result
<
(
)
ValueWriteError
<
W
:
:
Error
>
>
{
write_marker
(
wr
Marker
:
:
U32
)
?
;
wr
.
write_data_u32
(
val
)
?
;
Ok
(
(
)
)
}
pub
fn
write_u64
<
W
:
RmpWrite
>
(
wr
:
&
mut
W
val
:
u64
)
-
>
Result
<
(
)
ValueWriteError
<
W
:
:
Error
>
>
{
write_marker
(
wr
Marker
:
:
U64
)
?
;
wr
.
write_data_u64
(
val
)
?
;
Ok
(
(
)
)
}
pub
fn
write_uint8
<
W
:
RmpWrite
>
(
wr
:
&
mut
W
val
:
u8
)
-
>
Result
<
Marker
ValueWriteError
<
W
:
:
Error
>
>
{
if
val
<
128
{
write_pfix
(
wr
val
)
.
and
(
Ok
(
Marker
:
:
FixPos
(
val
)
)
)
.
map_err
(
ValueWriteError
:
:
InvalidMarkerWrite
)
}
else
{
write_u8
(
wr
val
)
.
and
(
Ok
(
Marker
:
:
U8
)
)
}
}
pub
fn
write_uint
<
W
:
RmpWrite
>
(
wr
:
&
mut
W
val
:
u64
)
-
>
Result
<
Marker
ValueWriteError
<
W
:
:
Error
>
>
{
if
val
<
256
{
write_uint8
(
wr
val
as
u8
)
}
else
if
val
<
65536
{
write_u16
(
wr
val
as
u16
)
.
and
(
Ok
(
Marker
:
:
U16
)
)
}
else
if
val
<
4294967296
{
write_u32
(
wr
val
as
u32
)
.
and
(
Ok
(
Marker
:
:
U32
)
)
}
else
{
write_u64
(
wr
val
)
.
and
(
Ok
(
Marker
:
:
U64
)
)
}
}
