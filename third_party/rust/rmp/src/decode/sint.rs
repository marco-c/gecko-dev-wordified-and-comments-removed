use
super
:
:
{
read_marker
RmpRead
ValueReadError
}
;
use
crate
:
:
Marker
;
pub
fn
read_nfix
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
i8
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
FixNeg
(
val
)
=
>
Ok
(
val
)
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
pub
fn
read_i8
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
i8
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
I8
=
>
rd
.
read_data_i8
(
)
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
pub
fn
read_i16
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
i16
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
I16
=
>
rd
.
read_data_i16
(
)
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
pub
fn
read_i32
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
i32
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
I32
=
>
rd
.
read_data_i32
(
)
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
pub
fn
read_i64
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
i64
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
I64
=
>
rd
.
read_data_i64
(
)
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
