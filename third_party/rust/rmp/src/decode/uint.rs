use
super
:
:
{
read_marker
RmpRead
ValueReadError
}
;
use
crate
:
:
Marker
;
pub
fn
read_pfix
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
u8
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
FixPos
(
val
)
=
>
Ok
(
val
)
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
pub
fn
read_u8
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
u8
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
U8
=
>
rd
.
read_data_u8
(
)
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
pub
fn
read_u16
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
u16
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
U16
=
>
rd
.
read_data_u16
(
)
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
pub
fn
read_u32
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
u32
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
U32
=
>
rd
.
read_data_u32
(
)
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
pub
fn
read_u64
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
u64
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
U64
=
>
rd
.
read_data_u64
(
)
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
