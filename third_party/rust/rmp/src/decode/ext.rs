use
super
:
:
{
read_marker
RmpRead
ValueReadError
}
;
use
crate
:
:
Marker
;
pub
fn
read_fixext1
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
(
i8
u8
)
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
FixExt1
=
>
{
let
ty
=
rd
.
read_data_i8
(
)
?
;
let
data
=
rd
.
read_data_u8
(
)
?
;
Ok
(
(
ty
data
)
)
}
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
pub
fn
read_fixext2
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
(
i8
[
u8
;
2
]
)
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
FixExt2
=
>
{
let
mut
buf
=
[
0
;
2
]
;
read_fixext_data
(
rd
&
mut
buf
)
.
map
(
|
ty
|
(
ty
buf
)
)
}
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
pub
fn
read_fixext4
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
(
i8
[
u8
;
4
]
)
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
FixExt4
=
>
{
let
mut
buf
=
[
0
;
4
]
;
read_fixext_data
(
rd
&
mut
buf
)
.
map
(
|
ty
|
(
ty
buf
)
)
}
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
pub
fn
read_fixext8
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
(
i8
[
u8
;
8
]
)
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
FixExt8
=
>
{
let
mut
buf
=
[
0
;
8
]
;
read_fixext_data
(
rd
&
mut
buf
)
.
map
(
|
ty
|
(
ty
buf
)
)
}
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
pub
fn
read_fixext16
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
(
i8
[
u8
;
16
]
)
ValueReadError
<
R
:
:
Error
>
>
{
match
read_marker
(
rd
)
?
{
Marker
:
:
FixExt16
=
>
{
let
mut
buf
=
[
0
;
16
]
;
read_fixext_data
(
rd
&
mut
buf
)
.
map
(
|
ty
|
(
ty
buf
)
)
}
marker
=
>
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
}
fn
read_fixext_data
<
R
:
RmpRead
>
(
rd
:
&
mut
R
buf
:
&
mut
[
u8
]
)
-
>
Result
<
i8
ValueReadError
<
R
:
:
Error
>
>
{
let
id
=
rd
.
read_data_i8
(
)
?
;
match
rd
.
read_exact_buf
(
buf
)
{
Ok
(
(
)
)
=
>
Ok
(
id
)
Err
(
err
)
=
>
Err
(
ValueReadError
:
:
InvalidDataRead
(
err
)
)
}
}
#
[
derive
(
Debug
PartialEq
)
]
pub
struct
ExtMeta
{
pub
typeid
:
i8
pub
size
:
u32
}
pub
fn
read_ext_meta
<
R
:
RmpRead
>
(
rd
:
&
mut
R
)
-
>
Result
<
ExtMeta
ValueReadError
<
R
:
:
Error
>
>
{
let
size
=
match
read_marker
(
rd
)
?
{
Marker
:
:
FixExt1
=
>
1
Marker
:
:
FixExt2
=
>
2
Marker
:
:
FixExt4
=
>
4
Marker
:
:
FixExt8
=
>
8
Marker
:
:
FixExt16
=
>
16
Marker
:
:
Ext8
=
>
u32
:
:
from
(
rd
.
read_data_u8
(
)
?
)
Marker
:
:
Ext16
=
>
u32
:
:
from
(
rd
.
read_data_u16
(
)
?
)
Marker
:
:
Ext32
=
>
rd
.
read_data_u32
(
)
?
marker
=
>
return
Err
(
ValueReadError
:
:
TypeMismatch
(
marker
)
)
}
;
let
ty
=
rd
.
read_data_i8
(
)
?
;
let
meta
=
ExtMeta
{
typeid
:
ty
size
}
;
Ok
(
meta
)
}
