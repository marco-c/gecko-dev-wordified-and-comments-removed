use
crate
:
:
common
:
:
{
DebugInfoOffset
SectionId
}
;
use
crate
:
:
endianity
:
:
Endianity
;
use
crate
:
:
read
:
:
lookup
:
:
{
DebugLookup
LookupEntryIter
PubStuffEntry
PubStuffParser
}
;
use
crate
:
:
read
:
:
{
EndianSlice
Reader
Result
Section
UnitOffset
}
;
#
[
derive
(
Debug
Clone
)
]
pub
struct
PubNamesEntry
<
R
:
Reader
>
{
unit_header_offset
:
DebugInfoOffset
<
R
:
:
Offset
>
die_offset
:
UnitOffset
<
R
:
:
Offset
>
name
:
R
}
impl
<
R
:
Reader
>
PubNamesEntry
<
R
>
{
pub
fn
name
(
&
self
)
-
>
&
R
{
&
self
.
name
}
pub
fn
unit_header_offset
(
&
self
)
-
>
DebugInfoOffset
<
R
:
:
Offset
>
{
self
.
unit_header_offset
}
pub
fn
die_offset
(
&
self
)
-
>
UnitOffset
<
R
:
:
Offset
>
{
self
.
die_offset
}
}
impl
<
R
:
Reader
>
PubStuffEntry
<
R
>
for
PubNamesEntry
<
R
>
{
fn
new
(
die_offset
:
UnitOffset
<
R
:
:
Offset
>
name
:
R
unit_header_offset
:
DebugInfoOffset
<
R
:
:
Offset
>
)
-
>
Self
{
PubNamesEntry
{
unit_header_offset
die_offset
name
}
}
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
DebugPubNames
<
R
:
Reader
>
(
DebugLookup
<
R
PubStuffParser
<
R
PubNamesEntry
<
R
>
>
>
)
;
impl
<
'
input
Endian
>
DebugPubNames
<
EndianSlice
<
'
input
Endian
>
>
where
Endian
:
Endianity
{
pub
fn
new
(
debug_pubnames_section
:
&
'
input
[
u8
]
endian
:
Endian
)
-
>
Self
{
Self
:
:
from
(
EndianSlice
:
:
new
(
debug_pubnames_section
endian
)
)
}
}
impl
<
R
:
Reader
>
DebugPubNames
<
R
>
{
pub
fn
items
(
&
self
)
-
>
PubNamesEntryIter
<
R
>
{
PubNamesEntryIter
(
self
.
0
.
items
(
)
)
}
}
impl
<
R
:
Reader
>
Section
<
R
>
for
DebugPubNames
<
R
>
{
fn
id
(
)
-
>
SectionId
{
SectionId
:
:
DebugPubNames
}
fn
reader
(
&
self
)
-
>
&
R
{
self
.
0
.
reader
(
)
}
}
impl
<
R
:
Reader
>
From
<
R
>
for
DebugPubNames
<
R
>
{
fn
from
(
debug_pubnames_section
:
R
)
-
>
Self
{
DebugPubNames
(
DebugLookup
:
:
from
(
debug_pubnames_section
)
)
}
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
PubNamesEntryIter
<
R
:
Reader
>
(
LookupEntryIter
<
R
PubStuffParser
<
R
PubNamesEntry
<
R
>
>
>
)
;
impl
<
R
:
Reader
>
PubNamesEntryIter
<
R
>
{
pub
fn
next
(
&
mut
self
)
-
>
Result
<
Option
<
PubNamesEntry
<
R
>
>
>
{
self
.
0
.
next
(
)
}
}
#
[
cfg
(
feature
=
"
fallible
-
iterator
"
)
]
impl
<
R
:
Reader
>
fallible_iterator
:
:
FallibleIterator
for
PubNamesEntryIter
<
R
>
{
type
Item
=
PubNamesEntry
<
R
>
;
type
Error
=
crate
:
:
read
:
:
Error
;
fn
next
(
&
mut
self
)
-
>
:
:
core
:
:
result
:
:
Result
<
Option
<
Self
:
:
Item
>
Self
:
:
Error
>
{
self
.
0
.
next
(
)
}
}
