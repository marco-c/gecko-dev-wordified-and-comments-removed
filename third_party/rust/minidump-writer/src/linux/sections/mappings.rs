use
super
:
:
*
;
use
crate
:
:
linux
:
:
maps_reader
:
:
MappingInfo
;
pub
fn
write
(
config
:
&
mut
MinidumpWriter
buffer
:
&
mut
DumpBuf
dumper
:
&
mut
PtraceDumper
)
-
>
Result
<
MDRawDirectory
errors
:
:
SectionMappingsError
>
{
let
mut
modules
=
Vec
:
:
new
(
)
;
for
map_idx
in
0
.
.
dumper
.
mappings
.
len
(
)
{
if
!
dumper
.
mappings
[
map_idx
]
.
is_interesting
(
)
|
|
dumper
.
mappings
[
map_idx
]
.
is_contained_in
(
&
config
.
user_mapping_list
)
{
continue
;
}
let
identifier
=
dumper
.
elf_identifier_for_mapping_index
(
map_idx
)
.
unwrap_or_default
(
)
;
if
identifier
.
is_empty
(
)
|
|
identifier
.
iter
(
)
.
all
(
|
&
x
|
x
=
=
0
)
{
continue
;
}
let
module
=
fill_raw_module
(
buffer
&
dumper
.
mappings
[
map_idx
]
&
identifier
)
?
;
modules
.
push
(
module
)
;
}
for
user
in
&
config
.
user_mapping_list
{
let
module
=
fill_raw_module
(
buffer
&
user
.
mapping
&
user
.
identifier
)
?
;
modules
.
push
(
module
)
;
}
let
list_header
=
MemoryWriter
:
:
<
u32
>
:
:
alloc_with_val
(
buffer
modules
.
len
(
)
as
u32
)
?
;
let
mut
dirent
=
MDRawDirectory
{
stream_type
:
MDStreamType
:
:
ModuleListStream
as
u32
location
:
list_header
.
location
(
)
}
;
if
!
modules
.
is_empty
(
)
{
let
mapping_list
=
MemoryArrayWriter
:
:
<
MDRawModule
>
:
:
alloc_from_iter
(
buffer
modules
)
?
;
dirent
.
location
.
data_size
+
=
mapping_list
.
location
(
)
.
data_size
;
}
Ok
(
dirent
)
}
fn
fill_raw_module
(
buffer
:
&
mut
DumpBuf
mapping
:
&
MappingInfo
identifier
:
&
[
u8
]
)
-
>
Result
<
MDRawModule
errors
:
:
SectionMappingsError
>
{
let
cv_record
=
if
identifier
.
is_empty
(
)
{
Default
:
:
default
(
)
}
else
{
let
cv_signature
=
crate
:
:
minidump_format
:
:
format
:
:
CvSignature
:
:
Elf
as
u32
;
let
array_size
=
std
:
:
mem
:
:
size_of_val
(
&
cv_signature
)
+
identifier
.
len
(
)
;
let
mut
sig_section
=
MemoryArrayWriter
:
:
<
u8
>
:
:
alloc_array
(
buffer
array_size
)
?
;
for
(
index
val
)
in
cv_signature
.
to_ne_bytes
(
)
.
iter
(
)
.
chain
(
identifier
.
iter
(
)
)
.
enumerate
(
)
{
sig_section
.
set_value_at
(
buffer
*
val
index
)
?
;
}
sig_section
.
location
(
)
}
;
let
(
file_path
_
)
=
mapping
.
get_mapping_effective_name_and_path
(
)
.
map_err
(
|
e
|
errors
:
:
SectionMappingsError
:
:
GetEffectivePathError
(
mapping
.
clone
(
)
e
)
)
?
;
let
name_header
=
write_string_to_location
(
buffer
&
file_path
)
?
;
Ok
(
MDRawModule
{
base_of_image
:
mapping
.
start_address
as
u64
size_of_image
:
mapping
.
size
as
u32
cv_record
module_name_rva
:
name_header
.
rva
.
.
Default
:
:
default
(
)
}
)
}
