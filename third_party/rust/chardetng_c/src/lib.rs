#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
chardetng_c
/
0
.
1
.
0
"
)
]
use
encoding_rs
:
:
Encoding
;
use
chardetng
:
:
EncodingDetector
;
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
chardetng_encoding_detector_new
(
)
-
>
*
mut
EncodingDetector
{
Box
:
:
into_raw
(
Box
:
:
new
(
EncodingDetector
:
:
new
(
)
)
)
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
chardetng_encoding_detector_free
(
detector
:
*
mut
EncodingDetector
)
{
let
_
=
Box
:
:
from_raw
(
detector
)
;
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
chardetng_encoding_detector_tld_may_affect_guess
(
tld
:
*
const
u8
tld_len
:
usize
)
-
>
bool
{
let
tld_opt
=
if
tld
.
is_null
(
)
{
assert_eq
!
(
tld_len
0
)
;
None
}
else
{
Some
(
:
:
std
:
:
slice
:
:
from_raw_parts
(
tld
tld_len
)
)
}
;
EncodingDetector
:
:
tld_may_affect_guess
(
tld_opt
)
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
chardetng_encoding_detector_feed
(
detector
:
*
mut
EncodingDetector
buffer
:
*
const
u8
buffer_len
:
usize
last
:
bool
)
-
>
bool
{
(
*
detector
)
.
feed
(
:
:
std
:
:
slice
:
:
from_raw_parts
(
buffer
buffer_len
)
last
)
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
chardetng_encoding_detector_guess
(
detector
:
*
const
EncodingDetector
tld
:
*
const
u8
tld_len
:
usize
allow_utf8
:
bool
)
-
>
*
const
Encoding
{
let
tld_opt
=
if
tld
.
is_null
(
)
{
assert_eq
!
(
tld_len
0
)
;
None
}
else
{
Some
(
:
:
std
:
:
slice
:
:
from_raw_parts
(
tld
tld_len
)
)
}
;
(
*
detector
)
.
guess
(
tld_opt
allow_utf8
)
}
