use
ndarray
:
:
{
Array2
ArrayView1
}
;
#
[
inline
]
pub
fn
lane_minimum
<
T
:
Ord
>
(
lane
:
ArrayView1
<
'
_
T
>
)
-
>
usize
{
lane
.
iter
(
)
.
enumerate
(
)
.
min_by_key
(
|
&
(
idx
elem
)
|
(
elem
idx
)
)
.
map
(
|
(
idx
_
)
|
idx
)
.
expect
(
"
empty
lane
in
matrix
"
)
}
pub
fn
row_minima
<
T
:
Ord
>
(
matrix
:
&
Array2
<
T
>
)
-
>
Vec
<
usize
>
{
matrix
.
rows
(
)
.
into_iter
(
)
.
map
(
lane_minimum
)
.
collect
(
)
}
pub
fn
column_minima
<
T
:
Ord
>
(
matrix
:
&
Array2
<
T
>
)
-
>
Vec
<
usize
>
{
matrix
.
columns
(
)
.
into_iter
(
)
.
map
(
lane_minimum
)
.
collect
(
)
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
ndarray
:
:
arr2
;
#
[
test
]
fn
brute_force_1x1
(
)
{
let
matrix
=
arr2
(
&
[
[
2
]
]
)
;
let
minima
=
vec
!
[
0
]
;
assert_eq
!
(
row_minima
(
&
matrix
)
minima
)
;
assert_eq
!
(
column_minima
(
&
matrix
.
reversed_axes
(
)
)
minima
)
;
}
#
[
test
]
fn
brute_force_2x1
(
)
{
let
matrix
=
arr2
(
&
[
[
3
]
[
2
]
]
)
;
let
minima
=
vec
!
[
0
0
]
;
assert_eq
!
(
row_minima
(
&
matrix
)
minima
)
;
assert_eq
!
(
column_minima
(
&
matrix
.
reversed_axes
(
)
)
minima
)
;
}
#
[
test
]
fn
brute_force_1x2
(
)
{
let
matrix
=
arr2
(
&
[
[
2
1
]
]
)
;
let
minima
=
vec
!
[
1
]
;
assert_eq
!
(
row_minima
(
&
matrix
)
minima
)
;
assert_eq
!
(
column_minima
(
&
matrix
.
reversed_axes
(
)
)
minima
)
;
}
#
[
test
]
fn
brute_force_2x2
(
)
{
let
matrix
=
arr2
(
&
[
[
3
2
]
[
2
1
]
]
)
;
let
minima
=
vec
!
[
1
1
]
;
assert_eq
!
(
row_minima
(
&
matrix
)
minima
)
;
assert_eq
!
(
column_minima
(
&
matrix
.
reversed_axes
(
)
)
minima
)
;
}
#
[
test
]
fn
brute_force_3x3
(
)
{
let
matrix
=
arr2
(
&
[
[
3
4
4
]
[
3
4
4
]
[
2
3
3
]
]
)
;
let
minima
=
vec
!
[
0
0
0
]
;
assert_eq
!
(
row_minima
(
&
matrix
)
minima
)
;
assert_eq
!
(
column_minima
(
&
matrix
.
reversed_axes
(
)
)
minima
)
;
}
#
[
test
]
fn
brute_force_4x4
(
)
{
let
matrix
=
arr2
(
&
[
[
4
5
5
5
]
[
2
3
3
3
]
[
2
3
3
3
]
[
2
2
2
2
]
]
)
;
let
minima
=
vec
!
[
0
0
0
0
]
;
assert_eq
!
(
row_minima
(
&
matrix
)
minima
)
;
assert_eq
!
(
column_minima
(
&
matrix
.
reversed_axes
(
)
)
minima
)
;
}
#
[
test
]
fn
brute_force_5x5
(
)
{
let
matrix
=
arr2
(
&
[
[
3
2
4
5
6
]
[
2
1
3
3
4
]
[
2
1
3
3
4
]
[
3
2
4
3
4
]
[
4
3
2
1
1
]
]
)
;
let
minima
=
vec
!
[
1
1
1
1
3
]
;
assert_eq
!
(
row_minima
(
&
matrix
)
minima
)
;
assert_eq
!
(
column_minima
(
&
matrix
.
reversed_axes
(
)
)
minima
)
;
}
}
