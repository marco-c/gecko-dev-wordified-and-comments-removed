use
std
:
:
marker
;
use
std
:
:
fmt
:
:
Debug
;
use
std
:
:
marker
:
:
PhantomData
;
use
snapshot_vec
as
sv
;
#
[
cfg
(
test
)
]
mod
tests
;
pub
trait
UnifyKey
:
Copy
+
Clone
+
Debug
+
PartialEq
{
type
Value
:
UnifyValue
;
fn
index
(
&
self
)
-
>
u32
;
fn
from_index
(
u
:
u32
)
-
>
Self
;
fn
tag
(
)
-
>
&
'
static
str
;
#
[
allow
(
unused_variables
)
]
fn
order_roots
(
a
:
Self
a_value
:
&
Self
:
:
Value
b
:
Self
b_value
:
&
Self
:
:
Value
)
-
>
Option
<
(
Self
Self
)
>
{
None
}
}
pub
trait
UnifyValue
:
Clone
+
Debug
{
fn
unify_values
(
value1
:
&
Self
value2
:
&
Self
)
-
>
Result
<
Self
(
Self
Self
)
>
;
}
pub
trait
InfallibleUnifyValue
:
UnifyValue
{
}
#
[
derive
(
PartialEq
Clone
Debug
)
]
struct
VarValue
<
K
:
UnifyKey
>
{
parent
:
K
value
:
K
:
:
Value
child
:
K
sibling
:
K
rank
:
u32
}
#
[
derive
(
Clone
)
]
pub
struct
UnificationTable
<
K
:
UnifyKey
>
{
values
:
sv
:
:
SnapshotVec
<
Delegate
<
K
>
>
}
pub
struct
Snapshot
<
K
:
UnifyKey
>
{
marker
:
marker
:
:
PhantomData
<
K
>
snapshot
:
sv
:
:
Snapshot
}
#
[
derive
(
Copy
Clone
)
]
struct
Delegate
<
K
>
(
PhantomData
<
K
>
)
;
impl
<
K
:
UnifyKey
>
VarValue
<
K
>
{
fn
new_var
(
key
:
K
value
:
K
:
:
Value
)
-
>
VarValue
<
K
>
{
VarValue
:
:
new
(
key
value
key
key
0
)
}
fn
new
(
parent
:
K
value
:
K
:
:
Value
child
:
K
sibling
:
K
rank
:
u32
)
-
>
VarValue
<
K
>
{
VarValue
{
parent
:
parent
value
:
value
child
:
child
sibling
:
sibling
rank
:
rank
}
}
fn
redirect
(
&
mut
self
to
:
K
sibling
:
K
)
{
assert_eq
!
(
self
.
parent
self
.
sibling
)
;
self
.
parent
=
to
;
self
.
sibling
=
sibling
;
}
fn
root
(
&
mut
self
rank
:
u32
child
:
K
value
:
K
:
:
Value
)
{
self
.
rank
=
rank
;
self
.
child
=
child
;
self
.
value
=
value
;
}
fn
key
(
&
self
)
-
>
K
{
self
.
parent
}
fn
parent
(
&
self
self_key
:
K
)
-
>
Option
<
K
>
{
self
.
if_not_self
(
self
.
parent
self_key
)
}
fn
child
(
&
self
self_key
:
K
)
-
>
Option
<
K
>
{
self
.
if_not_self
(
self
.
child
self_key
)
}
fn
sibling
(
&
self
self_key
:
K
)
-
>
Option
<
K
>
{
self
.
if_not_self
(
self
.
sibling
self_key
)
}
fn
if_not_self
(
&
self
key
:
K
self_key
:
K
)
-
>
Option
<
K
>
{
if
key
=
=
self_key
{
None
}
else
{
Some
(
key
)
}
}
}
impl
<
K
:
UnifyKey
>
UnificationTable
<
K
>
{
pub
fn
new
(
)
-
>
UnificationTable
<
K
>
{
UnificationTable
{
values
:
sv
:
:
SnapshotVec
:
:
new
(
)
}
}
pub
fn
snapshot
(
&
mut
self
)
-
>
Snapshot
<
K
>
{
Snapshot
{
marker
:
marker
:
:
PhantomData
:
:
<
K
>
snapshot
:
self
.
values
.
start_snapshot
(
)
}
}
pub
fn
rollback_to
(
&
mut
self
snapshot
:
Snapshot
<
K
>
)
{
debug
!
(
"
{
}
:
rollback_to
(
)
"
K
:
:
tag
(
)
)
;
self
.
values
.
rollback_to
(
snapshot
.
snapshot
)
;
}
pub
fn
commit
(
&
mut
self
snapshot
:
Snapshot
<
K
>
)
{
debug
!
(
"
{
}
:
commit
(
)
"
K
:
:
tag
(
)
)
;
self
.
values
.
commit
(
snapshot
.
snapshot
)
;
}
pub
fn
new_key
(
&
mut
self
value
:
K
:
:
Value
)
-
>
K
{
let
len
=
self
.
values
.
len
(
)
;
let
key
:
K
=
UnifyKey
:
:
from_index
(
len
as
u32
)
;
self
.
values
.
push
(
VarValue
:
:
new_var
(
key
value
)
)
;
debug
!
(
"
{
}
:
created
new
key
:
{
:
?
}
"
K
:
:
tag
(
)
key
)
;
key
}
pub
fn
unioned_keys
(
&
mut
self
key
:
K
)
-
>
UnionedKeys
<
K
>
{
let
root_key
=
self
.
get_root_key
(
key
)
;
UnionedKeys
{
table
:
self
stack
:
vec
!
[
root_key
]
}
}
fn
value
(
&
self
key
:
K
)
-
>
&
VarValue
<
K
>
{
&
self
.
values
[
key
.
index
(
)
as
usize
]
}
fn
get_root_key
(
&
mut
self
vid
:
K
)
-
>
K
{
let
redirect
=
{
match
self
.
value
(
vid
)
.
parent
(
vid
)
{
None
=
>
return
vid
Some
(
redirect
)
=
>
redirect
}
}
;
let
root_key
:
K
=
self
.
get_root_key
(
redirect
)
;
if
root_key
!
=
redirect
{
self
.
update_value
(
vid
|
value
|
value
.
parent
=
root_key
)
;
}
root_key
}
fn
is_root
(
&
self
key
:
K
)
-
>
bool
{
let
index
=
key
.
index
(
)
as
usize
;
self
.
values
.
get
(
index
)
.
parent
(
key
)
.
is_none
(
)
}
fn
update_value
<
OP
>
(
&
mut
self
key
:
K
op
:
OP
)
where
OP
:
FnOnce
(
&
mut
VarValue
<
K
>
)
{
self
.
values
.
update
(
key
.
index
(
)
as
usize
op
)
;
debug
!
(
"
Updated
variable
{
:
?
}
to
{
:
?
}
"
key
self
.
value
(
key
)
)
;
}
fn
unify_roots
(
&
mut
self
key_a
:
K
key_b
:
K
new_value
:
K
:
:
Value
)
{
debug
!
(
"
unify
(
key_a
=
{
:
?
}
key_b
=
{
:
?
}
)
"
key_a
key_b
)
;
let
rank_a
=
self
.
value
(
key_a
)
.
rank
;
let
rank_b
=
self
.
value
(
key_b
)
.
rank
;
if
let
Some
(
(
new_root
redirected
)
)
=
K
:
:
order_roots
(
key_a
&
self
.
value
(
key_a
)
.
value
key_b
&
self
.
value
(
key_b
)
.
value
)
{
let
new_rank
=
if
new_root
=
=
key_a
{
debug_assert
!
(
redirected
=
=
key_b
)
;
if
rank_a
>
rank_b
{
rank_a
}
else
{
rank_b
+
1
}
}
else
{
debug_assert
!
(
new_root
=
=
key_b
)
;
debug_assert
!
(
redirected
=
=
key_a
)
;
if
rank_b
>
rank_a
{
rank_b
}
else
{
rank_a
+
1
}
}
;
self
.
redirect_root
(
new_rank
redirected
new_root
new_value
)
;
}
else
if
rank_a
>
rank_b
{
self
.
redirect_root
(
rank_a
key_b
key_a
new_value
)
;
}
else
if
rank_a
<
rank_b
{
self
.
redirect_root
(
rank_b
key_a
key_b
new_value
)
;
}
else
{
self
.
redirect_root
(
rank_a
+
1
key_a
key_b
new_value
)
;
}
}
fn
redirect_root
(
&
mut
self
new_rank
:
u32
old_root_key
:
K
new_root_key
:
K
new_value
:
K
:
:
Value
)
{
let
sibling
=
self
.
value
(
new_root_key
)
.
child
(
new_root_key
)
.
unwrap_or
(
old_root_key
)
;
self
.
update_value
(
old_root_key
|
old_root_value
|
{
old_root_value
.
redirect
(
new_root_key
sibling
)
;
}
)
;
self
.
update_value
(
new_root_key
|
new_root_value
|
{
new_root_value
.
root
(
new_rank
old_root_key
new_value
)
;
}
)
;
}
}
impl
<
K
:
UnifyKey
>
sv
:
:
SnapshotVecDelegate
for
Delegate
<
K
>
{
type
Value
=
VarValue
<
K
>
;
type
Undo
=
(
)
;
fn
reverse
(
_
:
&
mut
Vec
<
VarValue
<
K
>
>
_
:
(
)
)
{
}
}
pub
struct
UnionedKeys
<
'
a
K
>
where
K
:
UnifyKey
+
'
a
K
:
:
Value
:
'
a
{
table
:
&
'
a
mut
UnificationTable
<
K
>
stack
:
Vec
<
K
>
}
impl
<
'
a
K
>
UnionedKeys
<
'
a
K
>
where
K
:
UnifyKey
K
:
:
Value
:
'
a
{
fn
var_value
(
&
self
key
:
K
)
-
>
VarValue
<
K
>
{
self
.
table
.
value
(
key
)
.
clone
(
)
}
}
impl
<
'
a
K
:
'
a
>
Iterator
for
UnionedKeys
<
'
a
K
>
where
K
:
UnifyKey
K
:
:
Value
:
'
a
{
type
Item
=
K
;
fn
next
(
&
mut
self
)
-
>
Option
<
K
>
{
let
key
=
match
self
.
stack
.
last
(
)
{
Some
(
k
)
=
>
*
k
None
=
>
{
return
None
;
}
}
;
let
vv
=
self
.
var_value
(
key
)
;
match
vv
.
child
(
key
)
{
Some
(
child_key
)
=
>
{
self
.
stack
.
push
(
child_key
)
;
}
None
=
>
{
while
let
Some
(
ancestor_key
)
=
self
.
stack
.
pop
(
)
{
let
ancestor_vv
=
self
.
var_value
(
ancestor_key
)
;
match
ancestor_vv
.
sibling
(
ancestor_key
)
{
Some
(
sibling
)
=
>
{
self
.
stack
.
push
(
sibling
)
;
break
;
}
None
=
>
{
}
}
}
}
}
Some
(
key
)
}
}
impl
<
'
tcx
K
V
>
UnificationTable
<
K
>
where
K
:
UnifyKey
<
Value
=
V
>
V
:
UnifyValue
{
pub
fn
union
(
&
mut
self
a_id
:
K
b_id
:
K
)
where
V
:
InfallibleUnifyValue
{
self
.
unify_var_var
(
a_id
b_id
)
.
unwrap
(
)
;
}
pub
fn
unioned
(
&
mut
self
a_id
:
K
b_id
:
K
)
-
>
bool
{
self
.
find
(
a_id
)
=
=
self
.
find
(
b_id
)
}
pub
fn
find
(
&
mut
self
id
:
K
)
-
>
K
{
self
.
get_root_key
(
id
)
}
pub
fn
unify_var_var
(
&
mut
self
a_id
:
K
b_id
:
K
)
-
>
Result
<
(
)
(
V
V
)
>
{
let
root_a
=
self
.
get_root_key
(
a_id
)
;
let
root_b
=
self
.
get_root_key
(
b_id
)
;
if
root_a
=
=
root_b
{
return
Ok
(
(
)
)
;
}
let
combined
=
try
!
(
V
:
:
unify_values
(
&
self
.
value
(
root_a
)
.
value
&
self
.
value
(
root_b
)
.
value
)
)
;
Ok
(
self
.
unify_roots
(
root_a
root_b
combined
)
)
}
pub
fn
unify_var_value
(
&
mut
self
a_id
:
K
b
:
V
)
-
>
Result
<
(
)
(
V
V
)
>
{
let
root_a
=
self
.
get_root_key
(
a_id
)
;
let
value
=
try
!
(
V
:
:
unify_values
(
&
self
.
value
(
root_a
)
.
value
&
b
)
)
;
self
.
update_value
(
root_a
|
node
|
node
.
value
=
value
)
;
Ok
(
(
)
)
}
pub
fn
probe_value
(
&
mut
self
id
:
K
)
-
>
V
{
let
id
=
self
.
get_root_key
(
id
)
;
self
.
value
(
id
)
.
value
.
clone
(
)
}
}
impl
UnifyValue
for
(
)
{
fn
unify_values
(
_
:
&
(
)
_
:
&
(
)
)
-
>
Result
<
(
)
(
(
)
(
)
)
>
{
Ok
(
(
)
)
}
}
impl
InfallibleUnifyValue
for
(
)
{
}
impl
<
V
:
UnifyValue
>
UnifyValue
for
Option
<
V
>
{
fn
unify_values
(
a
:
&
Option
<
V
>
b
:
&
Option
<
V
>
)
-
>
Result
<
Self
(
Self
Self
)
>
{
match
(
a
b
)
{
(
&
None
&
None
)
=
>
Ok
(
None
)
(
&
Some
(
ref
v
)
&
None
)
|
(
&
None
&
Some
(
ref
v
)
)
=
>
Ok
(
Some
(
v
.
clone
(
)
)
)
(
&
Some
(
ref
a
)
&
Some
(
ref
b
)
)
=
>
{
match
V
:
:
unify_values
(
a
b
)
{
Ok
(
v
)
=
>
Ok
(
Some
(
v
)
)
Err
(
(
a
b
)
)
=
>
Err
(
(
Some
(
a
)
Some
(
b
)
)
)
}
}
}
}
}
impl
<
V
:
InfallibleUnifyValue
>
InfallibleUnifyValue
for
Option
<
V
>
{
}
