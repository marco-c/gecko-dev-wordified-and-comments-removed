use
std
:
:
convert
;
use
std
:
:
error
;
use
std
:
:
fmt
;
use
std
:
:
io
;
pub
type
ZipResult
<
T
>
=
Result
<
T
ZipError
>
;
#
[
derive
(
Debug
)
]
pub
enum
ZipError
{
Io
(
io
:
:
Error
)
InvalidArchive
(
&
'
static
str
)
UnsupportedArchive
(
&
'
static
str
)
FileNotFound
}
impl
ZipError
{
fn
detail
(
&
self
)
-
>
:
:
std
:
:
borrow
:
:
Cow
<
str
>
{
use
std
:
:
error
:
:
Error
;
match
*
self
{
ZipError
:
:
Io
(
ref
io_err
)
=
>
{
(
"
Io
Error
:
"
.
to_string
(
)
+
(
io_err
as
&
error
:
:
Error
)
.
description
(
)
)
.
into
(
)
}
ZipError
:
:
InvalidArchive
(
msg
)
|
ZipError
:
:
UnsupportedArchive
(
msg
)
=
>
{
(
self
.
description
(
)
.
to_string
(
)
+
"
:
"
+
msg
)
.
into
(
)
}
ZipError
:
:
FileNotFound
=
>
{
self
.
description
(
)
.
into
(
)
}
}
}
}
impl
convert
:
:
From
<
io
:
:
Error
>
for
ZipError
{
fn
from
(
err
:
io
:
:
Error
)
-
>
ZipError
{
ZipError
:
:
Io
(
err
)
}
}
impl
convert
:
:
From
<
ZipError
>
for
io
:
:
Error
{
fn
from
(
err
:
ZipError
)
-
>
io
:
:
Error
{
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
Other
err
)
}
}
impl
fmt
:
:
Display
for
ZipError
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
Result
<
(
)
fmt
:
:
Error
>
{
fmt
.
write_str
(
&
*
self
.
detail
(
)
)
}
}
impl
error
:
:
Error
for
ZipError
{
fn
description
(
&
self
)
-
>
&
str
{
match
*
self
{
ZipError
:
:
Io
(
ref
io_err
)
=
>
(
io_err
as
&
error
:
:
Error
)
.
description
(
)
ZipError
:
:
InvalidArchive
(
.
.
)
=
>
"
Invalid
Zip
archive
"
ZipError
:
:
UnsupportedArchive
(
.
.
)
=
>
"
Unsupported
Zip
archive
"
ZipError
:
:
FileNotFound
=
>
"
Specified
file
not
found
in
archive
"
}
}
fn
cause
(
&
self
)
-
>
Option
<
&
error
:
:
Error
>
{
match
*
self
{
ZipError
:
:
Io
(
ref
io_err
)
=
>
Some
(
io_err
as
&
error
:
:
Error
)
_
=
>
None
}
}
}
