#
!
[
allow
(
unknown_lints
)
]
#
!
[
allow
(
non_local_definitions
)
]
use
displaydoc
:
:
Display
;
use
thiserror
:
:
Error
;
use
std
:
:
error
:
:
Error
;
use
std
:
:
fmt
;
use
std
:
:
io
;
use
std
:
:
num
:
:
TryFromIntError
;
use
std
:
:
string
:
:
FromUtf8Error
;
pub
type
ZipResult
<
T
>
=
Result
<
T
ZipError
>
;
#
[
derive
(
Debug
Display
Error
)
]
#
[
non_exhaustive
]
pub
enum
ZipError
{
Io
(
#
[
from
]
io
:
:
Error
)
InvalidArchive
(
&
'
static
str
)
UnsupportedArchive
(
&
'
static
str
)
FileNotFound
InvalidPassword
}
impl
ZipError
{
pub
const
PASSWORD_REQUIRED
:
&
'
static
str
=
"
Password
required
to
decrypt
file
"
;
}
impl
From
<
ZipError
>
for
io
:
:
Error
{
fn
from
(
err
:
ZipError
)
-
>
io
:
:
Error
{
let
kind
=
match
&
err
{
ZipError
:
:
Io
(
err
)
=
>
err
.
kind
(
)
ZipError
:
:
InvalidArchive
(
_
)
=
>
io
:
:
ErrorKind
:
:
InvalidData
ZipError
:
:
UnsupportedArchive
(
_
)
=
>
io
:
:
ErrorKind
:
:
Unsupported
ZipError
:
:
FileNotFound
=
>
io
:
:
ErrorKind
:
:
NotFound
ZipError
:
:
InvalidPassword
=
>
io
:
:
ErrorKind
:
:
InvalidInput
}
;
io
:
:
Error
:
:
new
(
kind
err
)
}
}
impl
From
<
DateTimeRangeError
>
for
ZipError
{
fn
from
(
_
:
DateTimeRangeError
)
-
>
Self
{
ZipError
:
:
InvalidArchive
(
"
Invalid
date
or
time
"
)
}
}
impl
From
<
FromUtf8Error
>
for
ZipError
{
fn
from
(
_
:
FromUtf8Error
)
-
>
Self
{
ZipError
:
:
InvalidArchive
(
"
Invalid
UTF
-
8
"
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
DateTimeRangeError
;
impl
From
<
TryFromIntError
>
for
DateTimeRangeError
{
fn
from
(
_value
:
TryFromIntError
)
-
>
Self
{
DateTimeRangeError
}
}
impl
fmt
:
:
Display
for
DateTimeRangeError
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
fmt
"
a
date
could
not
be
represented
within
the
bounds
the
MS
-
DOS
date
range
(
1980
-
2107
)
"
)
}
}
impl
Error
for
DateTimeRangeError
{
}
