use
std
:
:
error
:
:
Error
;
use
std
:
:
fmt
;
use
std
:
:
io
;
pub
type
ZipResult
<
T
>
=
Result
<
T
ZipError
>
;
#
[
derive
(
Debug
)
]
pub
struct
InvalidPassword
;
impl
fmt
:
:
Display
for
InvalidPassword
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
fmt
"
invalid
password
for
file
in
archive
"
)
}
}
impl
Error
for
InvalidPassword
{
}
#
[
derive
(
Debug
)
]
pub
enum
ZipError
{
Io
(
io
:
:
Error
)
InvalidArchive
(
&
'
static
str
)
UnsupportedArchive
(
&
'
static
str
)
FileNotFound
}
impl
From
<
io
:
:
Error
>
for
ZipError
{
fn
from
(
err
:
io
:
:
Error
)
-
>
ZipError
{
ZipError
:
:
Io
(
err
)
}
}
impl
fmt
:
:
Display
for
ZipError
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
match
self
{
ZipError
:
:
Io
(
err
)
=
>
write
!
(
fmt
"
{
err
}
"
)
ZipError
:
:
InvalidArchive
(
err
)
=
>
write
!
(
fmt
"
invalid
Zip
archive
:
{
err
}
"
)
ZipError
:
:
UnsupportedArchive
(
err
)
=
>
write
!
(
fmt
"
unsupported
Zip
archive
:
{
err
}
"
)
ZipError
:
:
FileNotFound
=
>
write
!
(
fmt
"
specified
file
not
found
in
archive
"
)
}
}
}
impl
Error
for
ZipError
{
fn
source
(
&
self
)
-
>
Option
<
&
(
dyn
Error
+
'
static
)
>
{
match
self
{
ZipError
:
:
Io
(
err
)
=
>
Some
(
err
)
_
=
>
None
}
}
}
impl
ZipError
{
pub
const
PASSWORD_REQUIRED
:
&
'
static
str
=
"
Password
required
to
decrypt
file
"
;
}
impl
From
<
ZipError
>
for
io
:
:
Error
{
fn
from
(
err
:
ZipError
)
-
>
io
:
:
Error
{
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
Other
err
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
DateTimeRangeError
;
impl
fmt
:
:
Display
for
DateTimeRangeError
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
fmt
"
a
date
could
not
be
represented
within
the
bounds
the
MS
-
DOS
date
range
(
1980
-
2107
)
"
)
}
}
impl
Error
for
DateTimeRangeError
{
}
