use
std
:
:
fs
;
use
std
:
:
io
;
use
std
:
:
path
:
:
Path
;
use
futures
:
:
{
Future
Poll
}
;
pub
fn
hard_link
<
P
:
AsRef
<
Path
>
Q
:
AsRef
<
Path
>
>
(
src
:
P
dst
:
Q
)
-
>
HardLinkFuture
<
P
Q
>
{
HardLinkFuture
:
:
new
(
src
dst
)
}
#
[
derive
(
Debug
)
]
pub
struct
HardLinkFuture
<
P
Q
>
where
P
:
AsRef
<
Path
>
Q
:
AsRef
<
Path
>
{
src
:
P
dst
:
Q
}
impl
<
P
Q
>
HardLinkFuture
<
P
Q
>
where
P
:
AsRef
<
Path
>
Q
:
AsRef
<
Path
>
{
fn
new
(
src
:
P
dst
:
Q
)
-
>
HardLinkFuture
<
P
Q
>
{
HardLinkFuture
{
src
:
src
dst
:
dst
}
}
}
impl
<
P
Q
>
Future
for
HardLinkFuture
<
P
Q
>
where
P
:
AsRef
<
Path
>
Q
:
AsRef
<
Path
>
{
type
Item
=
(
)
;
type
Error
=
io
:
:
Error
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
Self
:
:
Item
Self
:
:
Error
>
{
:
:
blocking_io
(
|
|
fs
:
:
hard_link
(
&
self
.
src
&
self
.
dst
)
)
}
}
