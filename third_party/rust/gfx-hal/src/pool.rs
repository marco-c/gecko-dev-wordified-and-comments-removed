use
crate
:
:
command
:
:
Level
;
use
crate
:
:
Backend
;
use
smallvec
:
:
SmallVec
;
use
std
:
:
any
:
:
Any
;
use
std
:
:
fmt
;
bitflags
!
(
/
/
/
Command
pool
creation
flags
.
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
CommandPoolCreateFlags
:
u8
{
/
/
/
Indicates
short
-
lived
command
buffers
.
/
/
/
Memory
optimization
hint
for
implementations
.
const
TRANSIENT
=
0x1
;
/
/
/
Allow
command
buffers
to
be
reset
individually
.
const
RESET_INDIVIDUAL
=
0x2
;
}
)
;
pub
trait
CommandPool
<
B
:
Backend
>
:
fmt
:
:
Debug
+
Any
+
Send
+
Sync
{
unsafe
fn
reset
(
&
mut
self
release_resources
:
bool
)
;
unsafe
fn
allocate_one
(
&
mut
self
level
:
Level
)
-
>
B
:
:
CommandBuffer
{
self
.
allocate_vec
(
1
level
)
.
pop
(
)
.
unwrap
(
)
}
unsafe
fn
allocate_vec
(
&
mut
self
num
:
usize
level
:
Level
)
-
>
SmallVec
<
[
B
:
:
CommandBuffer
;
1
]
>
{
(
0
.
.
num
)
.
map
(
|
_
|
self
.
allocate_one
(
level
)
)
.
collect
(
)
}
unsafe
fn
free
<
I
>
(
&
mut
self
buffers
:
I
)
where
I
:
IntoIterator
<
Item
=
B
:
:
CommandBuffer
>
;
}
