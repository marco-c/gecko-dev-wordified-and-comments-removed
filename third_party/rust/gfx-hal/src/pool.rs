use
crate
:
:
{
command
:
:
Level
Backend
PseudoVec
}
;
use
std
:
:
{
any
:
:
Any
fmt
}
;
bitflags
!
(
/
/
/
Command
pool
creation
flags
.
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
CommandPoolCreateFlags
:
u8
{
/
/
/
Indicates
short
-
lived
command
buffers
.
/
/
/
Memory
optimization
hint
for
implementations
.
const
TRANSIENT
=
0x1
;
/
/
/
Allow
command
buffers
to
be
reset
individually
.
const
RESET_INDIVIDUAL
=
0x2
;
}
)
;
pub
trait
CommandPool
<
B
:
Backend
>
:
fmt
:
:
Debug
+
Any
+
Send
+
Sync
{
unsafe
fn
reset
(
&
mut
self
release_resources
:
bool
)
;
unsafe
fn
allocate_one
(
&
mut
self
level
:
Level
)
-
>
B
:
:
CommandBuffer
{
let
mut
result
=
PseudoVec
(
None
)
;
self
.
allocate
(
1
level
&
mut
result
)
;
result
.
0
.
unwrap
(
)
}
unsafe
fn
allocate
<
E
>
(
&
mut
self
num
:
usize
level
:
Level
list
:
&
mut
E
)
where
E
:
Extend
<
B
:
:
CommandBuffer
>
{
list
.
extend
(
(
0
.
.
num
)
.
map
(
|
_
|
self
.
allocate_one
(
level
)
)
)
;
}
unsafe
fn
free
<
I
>
(
&
mut
self
buffers
:
I
)
where
I
:
Iterator
<
Item
=
B
:
:
CommandBuffer
>
;
}
