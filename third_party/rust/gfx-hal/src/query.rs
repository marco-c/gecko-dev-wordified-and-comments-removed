use
crate
:
:
device
:
:
OutOfMemory
;
use
crate
:
:
Backend
;
pub
type
Id
=
u32
;
#
[
derive
(
Clone
Debug
PartialEq
)
]
pub
enum
CreationError
{
OutOfMemory
(
OutOfMemory
)
Unsupported
(
Type
)
}
impl
From
<
OutOfMemory
>
for
CreationError
{
fn
from
(
error
:
OutOfMemory
)
-
>
Self
{
CreationError
:
:
OutOfMemory
(
error
)
}
}
impl
std
:
:
fmt
:
:
Display
for
CreationError
{
fn
fmt
(
&
self
fmt
:
&
mut
std
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
std
:
:
fmt
:
:
Result
{
match
self
{
CreationError
:
:
OutOfMemory
(
err
)
=
>
write
!
(
fmt
"
Failed
to
create
query
:
{
}
"
err
)
CreationError
:
:
Unsupported
(
ty
)
=
>
{
write
!
(
fmt
"
Failed
to
create
query
:
Unsupported
type
:
{
:
?
}
"
ty
)
}
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
Query
<
'
a
B
:
Backend
>
{
pub
pool
:
&
'
a
B
:
:
QueryPool
pub
id
:
Id
}
bitflags
!
(
/
/
/
Query
control
flags
.
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
ControlFlags
:
u32
{
/
/
/
Occlusion
queries
*
*
must
*
*
return
the
exact
sampler
number
.
/
/
/
/
/
/
Requires
precise_occlusion_query
device
feature
.
const
PRECISE
=
0x1
;
}
)
;
bitflags
!
(
/
/
/
Query
result
flags
.
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
ResultFlags
:
u32
{
/
/
/
Results
will
be
written
as
an
array
of
64
-
bit
unsigned
integer
values
.
const
BITS_64
=
0x1
;
/
/
/
Wait
for
each
query
s
status
to
become
available
before
retrieving
its
results
.
const
WAIT
=
0x2
;
/
/
/
Availability
status
accompanies
the
results
.
const
WITH_AVAILABILITY
=
0x4
;
/
/
/
Returning
partial
results
is
acceptable
.
const
PARTIAL
=
0x8
;
}
)
;
#
[
derive
(
Copy
Clone
Debug
Hash
Eq
PartialEq
)
]
pub
enum
Type
{
Occlusion
PipelineStatistics
(
PipelineStatistic
)
Timestamp
}
bitflags
!
(
/
/
/
Pipeline
statistic
flags
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
PipelineStatistic
:
u32
{
/
/
/
const
INPUT_ASSEMBLY_VERTICES
=
0x1
;
/
/
/
const
INPUT_ASSEMBLY_PRIMITIVES
=
0x2
;
/
/
/
const
VERTEX_SHADER_INVOCATIONS
=
0x4
;
/
/
/
const
GEOMETRY_SHADER_INVOCATIONS
=
0x8
;
/
/
/
const
GEOMETRY_SHADER_PRIMITIVES
=
0x10
;
/
/
/
const
CLIPPING_INVOCATIONS
=
0x20
;
/
/
/
const
CLIPPING_PRIMITIVES
=
0x40
;
/
/
/
const
FRAGMENT_SHADER_INVOCATIONS
=
0x80
;
/
/
/
const
HULL_SHADER_PATCHES
=
0x100
;
/
/
/
const
DOMAIN_SHADER_INVOCATIONS
=
0x200
;
/
/
/
const
COMPUTE_SHADER_INVOCATIONS
=
0x400
;
}
)
;
