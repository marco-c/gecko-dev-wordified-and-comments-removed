use
crate
:
:
queue
:
:
QueueType
;
use
crate
:
:
Backend
;
use
std
:
:
any
:
:
Any
;
use
std
:
:
fmt
:
:
Debug
;
pub
trait
QueueFamily
:
Debug
+
Any
+
Send
+
Sync
{
fn
queue_type
(
&
self
)
-
>
QueueType
;
fn
max_queues
(
&
self
)
-
>
usize
;
fn
id
(
&
self
)
-
>
QueueFamilyId
;
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
QueueFamilyId
(
pub
usize
)
;
#
[
derive
(
Debug
)
]
pub
struct
QueueGroup
<
B
:
Backend
>
{
pub
family
:
QueueFamilyId
pub
queues
:
Vec
<
B
:
:
CommandQueue
>
}
impl
<
B
:
Backend
>
QueueGroup
<
B
>
{
pub
fn
new
(
family
:
QueueFamilyId
)
-
>
Self
{
QueueGroup
{
family
queues
:
Vec
:
:
new
(
)
}
}
pub
fn
add_queue
(
&
mut
self
queue
:
B
:
:
CommandQueue
)
{
self
.
queues
.
push
(
queue
)
;
}
}
