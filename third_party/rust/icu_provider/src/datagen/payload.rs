use
crate
:
:
dynutil
:
:
UpcastDataPayload
;
use
crate
:
:
prelude
:
:
*
;
use
alloc
:
:
boxed
:
:
Box
;
use
databake
:
:
{
Bake
CrateEnv
TokenStream
}
;
use
yoke
:
:
*
;
trait
ExportableYoke
{
fn
bake_yoke
(
&
self
env
:
&
CrateEnv
)
-
>
TokenStream
;
fn
serialize_yoke
(
&
self
serializer
:
&
mut
dyn
erased_serde
:
:
Serializer
)
-
>
Result
<
(
)
DataError
>
;
}
impl
<
Y
C
>
ExportableYoke
for
Yoke
<
Y
C
>
where
Y
:
for
<
'
a
>
Yokeable
<
'
a
>
for
<
'
a
>
<
Y
as
Yokeable
<
'
a
>
>
:
:
Output
:
Bake
+
serde
:
:
Serialize
{
fn
bake_yoke
(
&
self
ctx
:
&
CrateEnv
)
-
>
TokenStream
{
self
.
get
(
)
.
bake
(
ctx
)
}
fn
serialize_yoke
(
&
self
serializer
:
&
mut
dyn
erased_serde
:
:
Serializer
)
-
>
Result
<
(
)
DataError
>
{
use
erased_serde
:
:
Serialize
;
self
.
get
(
)
.
erased_serialize
(
serializer
)
.
map_err
(
|
e
|
DataError
:
:
custom
(
"
Serde
export
"
)
.
with_display_context
(
&
e
)
)
?
;
Ok
(
(
)
)
}
}
#
[
doc
(
hidden
)
]
#
[
derive
(
yoke
:
:
Yokeable
)
]
pub
struct
ExportBox
{
payload
:
Box
<
dyn
ExportableYoke
+
Sync
>
}
impl
core
:
:
fmt
:
:
Debug
for
ExportBox
{
fn
fmt
(
&
self
f
:
&
mut
core
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
core
:
:
fmt
:
:
Result
{
f
.
debug_struct
(
"
ExportBox
"
)
.
field
(
"
payload
"
&
"
<
payload
>
"
)
.
finish
(
)
}
}
impl
<
M
>
UpcastDataPayload
<
M
>
for
ExportMarker
where
M
:
DataMarker
M
:
:
Yokeable
:
Sync
for
<
'
a
>
<
M
:
:
Yokeable
as
Yokeable
<
'
a
>
>
:
:
Output
:
Bake
+
serde
:
:
Serialize
{
fn
upcast
(
other
:
DataPayload
<
M
>
)
-
>
DataPayload
<
ExportMarker
>
{
DataPayload
:
:
from_owned
(
ExportBox
{
payload
:
Box
:
:
new
(
other
.
yoke
)
}
)
}
}
impl
DataPayload
<
ExportMarker
>
{
pub
fn
serialize
<
S
>
(
&
self
serializer
:
S
)
-
>
Result
<
(
)
DataError
>
where
S
:
serde
:
:
Serializer
S
:
:
Ok
:
'
static
{
self
.
get
(
)
.
payload
.
serialize_yoke
(
&
mut
<
dyn
erased_serde
:
:
Serializer
>
:
:
erase
(
serializer
)
)
}
pub
fn
tokenize
(
&
self
env
:
&
CrateEnv
)
-
>
TokenStream
{
self
.
get
(
)
.
payload
.
bake_yoke
(
env
)
}
}
#
[
allow
(
clippy
:
:
exhaustive_structs
)
]
#
[
derive
(
Debug
)
]
pub
struct
ExportMarker
{
}
impl
DataMarker
for
ExportMarker
{
type
Yokeable
=
ExportBox
;
}
