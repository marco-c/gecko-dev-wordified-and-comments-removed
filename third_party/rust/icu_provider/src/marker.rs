use
core
:
:
marker
:
:
PhantomData
;
use
crate
:
:
{
data_key
DataKey
DataProvider
DataProviderWithKey
}
;
use
yoke
:
:
Yokeable
;
pub
trait
DataMarker
:
'
static
{
type
Yokeable
:
for
<
'
a
>
Yokeable
<
'
a
>
;
}
pub
trait
KeyedDataMarker
:
DataMarker
{
const
KEY
:
DataKey
;
fn
bind
<
P
>
(
provider
:
P
)
-
>
DataProviderWithKey
<
Self
P
>
where
P
:
DataProvider
<
Self
>
Self
:
Sized
{
DataProviderWithKey
:
:
new
(
provider
)
}
}
#
[
derive
(
Debug
Copy
Clone
)
]
pub
struct
NeverMarker
<
Y
>
(
PhantomData
<
Y
>
)
;
impl
<
Y
>
DataMarker
for
NeverMarker
<
Y
>
where
for
<
'
a
>
Y
:
Yokeable
<
'
a
>
{
type
Yokeable
=
Y
;
}
impl
<
Y
>
KeyedDataMarker
for
NeverMarker
<
Y
>
where
for
<
'
a
>
Y
:
Yokeable
<
'
a
>
{
const
KEY
:
DataKey
=
data_key
!
(
"
_never
1
"
)
;
}
#
[
macro_export
]
macro_rules
!
impl_data_provider_never_marker
{
(
ty
:
path
)
=
>
{
impl
<
Y
>
crate
:
:
DataProvider
<
crate
:
:
NeverMarker
<
Y
>
>
for
ty
where
for
<
'
a
>
Y
:
crate
:
:
yoke
:
:
Yokeable
<
'
a
>
{
fn
load
(
&
self
req
:
crate
:
:
DataRequest
)
-
>
Result
<
crate
:
:
DataResponse
<
crate
:
:
NeverMarker
<
Y
>
>
crate
:
:
DataError
>
{
Err
(
crate
:
:
DataErrorKind
:
:
MissingDataKey
.
with_req
(
<
crate
:
:
NeverMarker
<
Y
>
as
crate
:
:
KeyedDataMarker
>
:
:
KEY
req
)
)
}
}
}
;
}
