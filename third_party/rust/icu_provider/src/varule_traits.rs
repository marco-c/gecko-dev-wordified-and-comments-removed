use
zerovec
:
:
ule
:
:
VarULE
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
use
zerovec
:
:
{
maps
:
:
ZeroMapKV
ZeroMap2d
}
;
pub
trait
MaybeAsVarULE
{
type
EncodedStruct
:
?
Sized
+
VarULE
;
}
#
[
cfg
(
feature
=
"
export
"
)
]
pub
trait
MaybeEncodeAsVarULE
:
MaybeAsVarULE
{
fn
maybe_encode_as_varule
(
&
self
)
-
>
Option
<
&
Self
:
:
EncodedStruct
>
;
}
#
[
macro_export
]
macro_rules
!
data_struct
{
(
<
generic
:
ident
:
bound
:
tt
>
ty
:
path
(
(
#
[
attr
:
meta
]
)
*
)
?
)
=
>
{
impl
<
generic
:
bound
>
crate
:
:
ule
:
:
MaybeAsVarULE
for
ty
{
type
EncodedStruct
=
[
(
)
]
;
}
(
(
#
[
attr
]
)
*
)
?
impl
<
generic
:
bound
>
crate
:
:
ule
:
:
MaybeEncodeAsVarULE
for
ty
{
fn
maybe_encode_as_varule
(
&
self
)
-
>
Option
<
&
Self
:
:
EncodedStruct
>
{
None
}
}
}
;
(
ty
:
path
(
(
#
[
attr
:
meta
]
)
*
)
?
)
=
>
{
impl
crate
:
:
ule
:
:
MaybeAsVarULE
for
ty
{
type
EncodedStruct
=
[
(
)
]
;
}
(
(
#
[
attr
]
)
*
)
?
impl
crate
:
:
ule
:
:
MaybeEncodeAsVarULE
for
ty
{
fn
maybe_encode_as_varule
(
&
self
)
-
>
Option
<
&
Self
:
:
EncodedStruct
>
{
None
}
}
}
;
(
ty
:
ty
varule
:
varule
:
ty
(
#
[
attr
:
meta
]
)
*
encode_as_varule
:
encode_as_varule
:
expr
)
=
>
{
impl
<
'
data
>
crate
:
:
ule
:
:
MaybeAsVarULE
for
ty
{
type
EncodedStruct
=
varule
;
}
(
#
[
attr
]
)
*
impl
<
'
data
>
crate
:
:
ule
:
:
MaybeEncodeAsVarULE
for
ty
{
fn
maybe_encode_as_varule
(
&
self
)
-
>
Option
<
&
Self
:
:
EncodedStruct
>
{
/
/
Workaround
for
<
https
:
/
/
rust
-
lang
.
github
.
io
/
rfcs
/
3216
-
closure
-
lifetime
-
binder
.
html
>
fn
bind_lifetimes
<
F
>
(
f
:
F
)
-
>
F
where
F
:
for
<
'
data
>
Fn
(
&
'
data
ty
)
-
>
&
'
data
varule
{
f
}
Some
(
bind_lifetimes
(
encode_as_varule
)
(
self
)
)
}
}
}
;
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
impl
<
'
a
K0
K1
V
>
MaybeAsVarULE
for
ZeroMap2d
<
'
a
K0
K1
V
>
where
K0
:
ZeroMapKV
<
'
a
>
K1
:
ZeroMapKV
<
'
a
>
V
:
ZeroMapKV
<
'
a
>
K0
:
?
Sized
K1
:
?
Sized
V
:
?
Sized
{
type
EncodedStruct
=
[
(
)
]
;
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg
(
feature
=
"
export
"
)
]
impl
<
'
a
K0
K1
V
>
MaybeEncodeAsVarULE
for
ZeroMap2d
<
'
a
K0
K1
V
>
where
K0
:
ZeroMapKV
<
'
a
>
K1
:
ZeroMapKV
<
'
a
>
V
:
ZeroMapKV
<
'
a
>
K0
:
?
Sized
K1
:
?
Sized
V
:
?
Sized
{
fn
maybe_encode_as_varule
(
&
self
)
-
>
Option
<
&
Self
:
:
EncodedStruct
>
{
None
}
}
impl
<
T
const
N
:
usize
>
MaybeAsVarULE
for
[
T
;
N
]
{
type
EncodedStruct
=
[
(
)
]
;
}
#
[
cfg
(
feature
=
"
export
"
)
]
impl
<
T
const
N
:
usize
>
MaybeEncodeAsVarULE
for
[
T
;
N
]
{
fn
maybe_encode_as_varule
(
&
self
)
-
>
Option
<
&
Self
:
:
EncodedStruct
>
{
None
}
}
