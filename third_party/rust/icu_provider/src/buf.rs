use
crate
:
:
prelude
:
:
*
;
#
[
cfg
(
feature
=
"
serde
"
)
]
mod
serde
;
#
[
cfg
(
feature
=
"
serde
"
)
]
pub
use
self
:
:
serde
:
:
*
;
#
[
non_exhaustive
]
#
[
derive
(
Debug
)
]
pub
struct
BufferMarker
;
impl
DynamicDataMarker
for
BufferMarker
{
type
DataStruct
=
&
'
static
[
u8
]
;
}
pub
trait
BufferProvider
:
DynamicDataProvider
<
BufferMarker
>
{
}
impl
<
P
:
DynamicDataProvider
<
BufferMarker
>
+
?
Sized
>
BufferProvider
for
P
{
}
#
[
derive
(
Debug
PartialEq
Eq
Hash
Copy
Clone
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
:
:
serde
:
:
Serialize
:
:
serde
:
:
Deserialize
)
)
]
#
[
non_exhaustive
]
pub
enum
BufferFormat
{
Json
Bincode1
Postcard1
}
impl
BufferFormat
{
pub
fn
check_available
(
&
self
)
-
>
Result
<
(
)
DataError
>
{
match
self
{
#
[
cfg
(
feature
=
"
deserialize_json
"
)
]
BufferFormat
:
:
Json
=
>
Ok
(
(
)
)
#
[
cfg
(
not
(
feature
=
"
deserialize_json
"
)
)
]
BufferFormat
:
:
Json
=
>
Err
(
DataErrorKind
:
:
Deserialize
.
with_str_context
(
"
deserializing
BufferFormat
:
:
Json
requires
the
deserialize_json
Cargo
feature
"
)
)
#
[
cfg
(
feature
=
"
deserialize_bincode_1
"
)
]
BufferFormat
:
:
Bincode1
=
>
Ok
(
(
)
)
#
[
cfg
(
not
(
feature
=
"
deserialize_bincode_1
"
)
)
]
BufferFormat
:
:
Bincode1
=
>
Err
(
DataErrorKind
:
:
Deserialize
.
with_str_context
(
"
deserializing
BufferFormat
:
:
Bincode1
requires
the
deserialize_bincode_1
Cargo
feature
"
)
)
#
[
cfg
(
feature
=
"
deserialize_postcard_1
"
)
]
BufferFormat
:
:
Postcard1
=
>
Ok
(
(
)
)
#
[
cfg
(
not
(
feature
=
"
deserialize_postcard_1
"
)
)
]
BufferFormat
:
:
Postcard1
=
>
Err
(
DataErrorKind
:
:
Deserialize
.
with_str_context
(
"
deserializing
BufferFormat
:
:
Postcard1
requires
the
deserialize_postcard_1
Cargo
feature
"
)
)
}
}
}
