#
!
[
allow
(
unused_imports
)
]
#
[
cfg
(
feature
=
"
alloc
"
)
]
use
crate
:
:
lib
:
:
std
:
:
boxed
:
:
Box
;
#
[
cfg
(
feature
=
"
std
"
)
]
use
crate
:
:
lib
:
:
std
:
:
fmt
:
:
Debug
;
use
crate
:
:
internal
:
:
*
;
use
crate
:
:
error
:
:
ParseError
;
use
crate
:
:
traits
:
:
{
AsChar
InputIter
InputLength
InputTakeAtPosition
ParseTo
}
;
use
crate
:
:
lib
:
:
std
:
:
ops
:
:
{
Range
RangeFrom
RangeTo
}
;
use
crate
:
:
lib
:
:
std
:
:
borrow
:
:
Borrow
;
use
crate
:
:
traits
:
:
{
Compare
CompareResult
Offset
Slice
}
;
use
crate
:
:
error
:
:
ErrorKind
;
use
crate
:
:
lib
:
:
std
:
:
mem
:
:
transmute
;
#
[
macro_use
]
mod
macros
;
#
[
inline
]
pub
fn
rest
<
T
E
:
ParseError
<
T
>
>
(
input
:
T
)
-
>
IResult
<
T
T
E
>
where
T
:
Slice
<
Range
<
usize
>
>
+
Slice
<
RangeFrom
<
usize
>
>
+
Slice
<
RangeTo
<
usize
>
>
T
:
InputLength
{
Ok
(
(
input
.
slice
(
input
.
input_len
(
)
.
.
)
input
)
)
}
#
[
inline
]
pub
fn
rest_len
<
T
E
:
ParseError
<
T
>
>
(
input
:
T
)
-
>
IResult
<
T
usize
E
>
where
T
:
Slice
<
Range
<
usize
>
>
+
Slice
<
RangeFrom
<
usize
>
>
+
Slice
<
RangeTo
<
usize
>
>
T
:
InputLength
{
let
len
=
input
.
input_len
(
)
;
Ok
(
(
input
len
)
)
}
pub
fn
map
<
I
O1
O2
E
:
ParseError
<
I
>
F
G
>
(
first
:
F
second
:
G
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
O2
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
G
:
Fn
(
O1
)
-
>
O2
{
move
|
input
:
I
|
{
let
(
input
o1
)
=
first
(
input
)
?
;
Ok
(
(
input
second
(
o1
)
)
)
}
}
#
[
doc
(
hidden
)
]
pub
fn
mapc
<
I
O1
O2
E
:
ParseError
<
I
>
F
G
>
(
input
:
I
first
:
F
second
:
G
)
-
>
IResult
<
I
O2
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
G
:
Fn
(
O1
)
-
>
O2
{
map
(
first
second
)
(
input
)
}
pub
fn
map_res
<
I
:
Clone
O1
O2
E
:
ParseError
<
I
>
E2
F
G
>
(
first
:
F
second
:
G
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
O2
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
G
:
Fn
(
O1
)
-
>
Result
<
O2
E2
>
{
move
|
input
:
I
|
{
let
i
=
input
.
clone
(
)
;
let
(
input
o1
)
=
first
(
input
)
?
;
match
second
(
o1
)
{
Ok
(
o2
)
=
>
Ok
(
(
input
o2
)
)
Err
(
_
)
=
>
Err
(
Err
:
:
Error
(
E
:
:
from_error_kind
(
i
ErrorKind
:
:
MapRes
)
)
)
}
}
}
#
[
doc
(
hidden
)
]
pub
fn
map_resc
<
I
:
Clone
O1
O2
E
:
ParseError
<
I
>
E2
F
G
>
(
input
:
I
first
:
F
second
:
G
)
-
>
IResult
<
I
O2
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
G
:
Fn
(
O1
)
-
>
Result
<
O2
E2
>
{
map_res
(
first
second
)
(
input
)
}
pub
fn
map_opt
<
I
:
Clone
O1
O2
E
:
ParseError
<
I
>
F
G
>
(
first
:
F
second
:
G
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
O2
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
G
:
Fn
(
O1
)
-
>
Option
<
O2
>
{
move
|
input
:
I
|
{
let
i
=
input
.
clone
(
)
;
let
(
input
o1
)
=
first
(
input
)
?
;
match
second
(
o1
)
{
Some
(
o2
)
=
>
Ok
(
(
input
o2
)
)
None
=
>
Err
(
Err
:
:
Error
(
E
:
:
from_error_kind
(
i
ErrorKind
:
:
MapOpt
)
)
)
}
}
}
#
[
doc
(
hidden
)
]
pub
fn
map_optc
<
I
:
Clone
O1
O2
E
:
ParseError
<
I
>
F
G
>
(
input
:
I
first
:
F
second
:
G
)
-
>
IResult
<
I
O2
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
G
:
Fn
(
O1
)
-
>
Option
<
O2
>
{
map_opt
(
first
second
)
(
input
)
}
pub
fn
map_parser
<
I
:
Clone
O1
O2
E
:
ParseError
<
I
>
F
G
>
(
first
:
F
second
:
G
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
O2
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
G
:
Fn
(
O1
)
-
>
IResult
<
O1
O2
E
>
O1
:
InputLength
{
move
|
input
:
I
|
{
let
(
input
o1
)
=
first
(
input
)
?
;
let
(
_
o2
)
=
second
(
o1
)
?
;
Ok
(
(
input
o2
)
)
}
}
#
[
doc
(
hidden
)
]
pub
fn
map_parserc
<
I
:
Clone
O1
O2
E
:
ParseError
<
I
>
F
G
>
(
input
:
I
first
:
F
second
:
G
)
-
>
IResult
<
I
O2
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
G
:
Fn
(
O1
)
-
>
IResult
<
O1
O2
E
>
O1
:
InputLength
{
map_parser
(
first
second
)
(
input
)
}
pub
fn
flat_map
<
I
O1
O2
E
:
ParseError
<
I
>
F
G
H
>
(
first
:
F
second
:
G
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
O2
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
G
:
Fn
(
O1
)
-
>
H
H
:
Fn
(
I
)
-
>
IResult
<
I
O2
E
>
{
move
|
input
:
I
|
{
let
(
input
o1
)
=
first
(
input
)
?
;
second
(
o1
)
(
input
)
}
}
pub
fn
opt
<
I
:
Clone
O
E
:
ParseError
<
I
>
F
>
(
f
:
F
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
Option
<
O
>
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
move
|
input
:
I
|
{
let
i
=
input
.
clone
(
)
;
match
f
(
input
)
{
Ok
(
(
i
o
)
)
=
>
Ok
(
(
i
Some
(
o
)
)
)
Err
(
Err
:
:
Error
(
_
)
)
=
>
Ok
(
(
i
None
)
)
Err
(
e
)
=
>
Err
(
e
)
}
}
}
#
[
doc
(
hidden
)
]
pub
fn
optc
<
I
:
Clone
O
E
:
ParseError
<
I
>
F
>
(
input
:
I
f
:
F
)
-
>
IResult
<
I
Option
<
O
>
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
opt
(
f
)
(
input
)
}
pub
fn
cond
<
I
:
Clone
O
E
:
ParseError
<
I
>
F
>
(
b
:
bool
f
:
F
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
Option
<
O
>
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
move
|
input
:
I
|
{
if
b
{
match
f
(
input
)
{
Ok
(
(
i
o
)
)
=
>
Ok
(
(
i
Some
(
o
)
)
)
Err
(
e
)
=
>
Err
(
e
)
}
}
else
{
Ok
(
(
input
None
)
)
}
}
}
#
[
doc
(
hidden
)
]
pub
fn
condc
<
I
:
Clone
O
E
:
ParseError
<
I
>
F
>
(
input
:
I
b
:
bool
f
:
F
)
-
>
IResult
<
I
Option
<
O
>
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
cond
(
b
f
)
(
input
)
}
pub
fn
peek
<
I
:
Clone
O
E
:
ParseError
<
I
>
F
>
(
f
:
F
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
O
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
move
|
input
:
I
|
{
let
i
=
input
.
clone
(
)
;
match
f
(
input
)
{
Ok
(
(
_
o
)
)
=
>
Ok
(
(
i
o
)
)
Err
(
e
)
=
>
Err
(
e
)
}
}
}
#
[
doc
(
hidden
)
]
pub
fn
peekc
<
I
:
Clone
O
E
:
ParseError
<
I
>
F
>
(
input
:
I
f
:
F
)
-
>
IResult
<
I
O
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
peek
(
f
)
(
input
)
}
pub
fn
complete
<
I
:
Clone
O
E
:
ParseError
<
I
>
F
>
(
f
:
F
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
O
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
move
|
input
:
I
|
{
let
i
=
input
.
clone
(
)
;
match
f
(
input
)
{
Err
(
Err
:
:
Incomplete
(
_
)
)
=
>
{
Err
(
Err
:
:
Error
(
E
:
:
from_error_kind
(
i
ErrorKind
:
:
Complete
)
)
)
}
rest
=
>
rest
}
}
}
#
[
doc
(
hidden
)
]
pub
fn
completec
<
I
:
Clone
O
E
:
ParseError
<
I
>
F
>
(
input
:
I
f
:
F
)
-
>
IResult
<
I
O
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
complete
(
f
)
(
input
)
}
pub
fn
all_consuming
<
I
O
E
:
ParseError
<
I
>
F
>
(
f
:
F
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
O
E
>
where
I
:
InputLength
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
move
|
input
:
I
|
{
let
(
input
res
)
=
f
(
input
)
?
;
if
input
.
input_len
(
)
=
=
0
{
Ok
(
(
input
res
)
)
}
else
{
Err
(
Err
:
:
Error
(
E
:
:
from_error_kind
(
input
ErrorKind
:
:
Eof
)
)
)
}
}
}
pub
fn
verify
<
I
:
Clone
O1
O2
E
:
ParseError
<
I
>
F
G
>
(
first
:
F
second
:
G
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
G
:
Fn
(
&
O2
)
-
>
bool
O1
:
Borrow
<
O2
>
O2
:
?
Sized
{
move
|
input
:
I
|
{
let
i
=
input
.
clone
(
)
;
let
(
input
o
)
=
first
(
input
)
?
;
if
second
(
o
.
borrow
(
)
)
{
Ok
(
(
input
o
)
)
}
else
{
Err
(
Err
:
:
Error
(
E
:
:
from_error_kind
(
i
ErrorKind
:
:
Verify
)
)
)
}
}
}
#
[
doc
(
hidden
)
]
pub
fn
verifyc
<
I
:
Clone
O1
O2
E
:
ParseError
<
I
>
F
G
>
(
input
:
I
first
:
F
second
:
G
)
-
>
IResult
<
I
O1
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
G
:
Fn
(
&
O2
)
-
>
bool
O1
:
Borrow
<
O2
>
O2
:
?
Sized
{
verify
(
first
second
)
(
input
)
}
pub
fn
value
<
I
O1
:
Clone
O2
E
:
ParseError
<
I
>
F
>
(
val
:
O1
parser
:
F
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
O1
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O2
E
>
{
move
|
input
:
I
|
{
parser
(
input
)
.
map
(
|
(
i
_
)
|
(
i
val
.
clone
(
)
)
)
}
}
#
[
doc
(
hidden
)
]
pub
fn
valuec
<
I
O1
:
Clone
O2
E
:
ParseError
<
I
>
F
>
(
input
:
I
val
:
O1
parser
:
F
)
-
>
IResult
<
I
O1
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O2
E
>
{
value
(
val
parser
)
(
input
)
}
pub
fn
not
<
I
:
Clone
O
E
:
ParseError
<
I
>
F
>
(
parser
:
F
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
(
)
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
move
|
input
:
I
|
{
let
i
=
input
.
clone
(
)
;
match
parser
(
input
)
{
Ok
(
_
)
=
>
Err
(
Err
:
:
Error
(
E
:
:
from_error_kind
(
i
ErrorKind
:
:
Not
)
)
)
Err
(
Err
:
:
Error
(
_
)
)
=
>
Ok
(
(
i
(
)
)
)
Err
(
e
)
=
>
Err
(
e
)
}
}
}
#
[
doc
(
hidden
)
]
pub
fn
notc
<
I
:
Clone
O
E
:
ParseError
<
I
>
F
>
(
input
:
I
parser
:
F
)
-
>
IResult
<
I
(
)
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
not
(
parser
)
(
input
)
}
pub
fn
recognize
<
I
:
Clone
+
Offset
+
Slice
<
RangeTo
<
usize
>
>
O
E
:
ParseError
<
I
>
F
>
(
parser
:
F
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
I
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
move
|
input
:
I
|
{
let
i
=
input
.
clone
(
)
;
match
parser
(
i
)
{
Ok
(
(
i
_
)
)
=
>
{
let
index
=
input
.
offset
(
&
i
)
;
Ok
(
(
i
input
.
slice
(
.
.
index
)
)
)
}
Err
(
e
)
=
>
Err
(
e
)
}
}
}
#
[
doc
(
hidden
)
]
pub
fn
recognizec
<
I
:
Clone
+
Offset
+
Slice
<
RangeTo
<
usize
>
>
O
E
:
ParseError
<
I
>
F
>
(
input
:
I
parser
:
F
)
-
>
IResult
<
I
I
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
recognize
(
parser
)
(
input
)
}
pub
fn
cut
<
I
:
Clone
+
Slice
<
RangeTo
<
usize
>
>
O
E
:
ParseError
<
I
>
F
>
(
parser
:
F
)
-
>
impl
Fn
(
I
)
-
>
IResult
<
I
O
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
move
|
input
:
I
|
{
let
i
=
input
.
clone
(
)
;
match
parser
(
i
)
{
Err
(
Err
:
:
Error
(
e
)
)
=
>
Err
(
Err
:
:
Failure
(
e
)
)
rest
=
>
rest
}
}
}
#
[
doc
(
hidden
)
]
pub
fn
cutc
<
I
:
Clone
+
Slice
<
RangeTo
<
usize
>
>
O
E
:
ParseError
<
I
>
F
>
(
input
:
I
parser
:
F
)
-
>
IResult
<
I
O
E
>
where
F
:
Fn
(
I
)
-
>
IResult
<
I
O
E
>
{
cut
(
parser
)
(
input
)
}
pub
fn
iterator
<
Input
Output
Error
F
>
(
input
:
Input
f
:
F
)
-
>
ParserIterator
<
Input
Error
F
>
where
F
:
Fn
(
Input
)
-
>
IResult
<
Input
Output
Error
>
Error
:
ParseError
<
Input
>
{
ParserIterator
{
iterator
:
f
input
state
:
State
:
:
Running
}
}
pub
struct
ParserIterator
<
I
E
F
>
{
iterator
:
F
input
:
I
state
:
State
<
E
>
}
impl
<
I
:
Clone
E
:
Clone
F
>
ParserIterator
<
I
E
F
>
{
pub
fn
finish
(
self
)
-
>
IResult
<
I
(
)
E
>
{
match
&
self
.
state
{
State
:
:
Running
|
State
:
:
Done
=
>
Ok
(
(
self
.
input
.
clone
(
)
(
)
)
)
State
:
:
Failure
(
e
)
=
>
Err
(
Err
:
:
Failure
(
e
.
clone
(
)
)
)
State
:
:
Incomplete
(
i
)
=
>
Err
(
Err
:
:
Incomplete
(
i
.
clone
(
)
)
)
}
}
}
impl
<
'
a
Input
Output
Error
F
>
core
:
:
iter
:
:
Iterator
for
&
'
a
mut
ParserIterator
<
Input
Error
F
>
where
F
:
Fn
(
Input
)
-
>
IResult
<
Input
Output
Error
>
Input
:
Clone
{
type
Item
=
Output
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
if
let
State
:
:
Running
=
self
.
state
{
let
input
=
self
.
input
.
clone
(
)
;
match
(
self
.
iterator
)
(
input
)
{
Ok
(
(
i
o
)
)
=
>
{
self
.
input
=
i
;
Some
(
o
)
}
Err
(
Err
:
:
Error
(
_
)
)
=
>
{
self
.
state
=
State
:
:
Done
;
None
}
Err
(
Err
:
:
Failure
(
e
)
)
=
>
{
self
.
state
=
State
:
:
Failure
(
e
)
;
None
}
Err
(
Err
:
:
Incomplete
(
i
)
)
=
>
{
self
.
state
=
State
:
:
Incomplete
(
i
)
;
None
}
}
}
else
{
None
}
}
}
enum
State
<
E
>
{
Running
Done
Failure
(
E
)
Incomplete
(
Needed
)
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
crate
:
:
internal
:
:
{
Err
IResult
Needed
}
;
use
crate
:
:
error
:
:
ParseError
;
use
crate
:
:
bytes
:
:
complete
:
:
take
;
use
crate
:
:
number
:
:
complete
:
:
be_u8
;
macro_rules
!
assert_parse
(
(
left
:
expr
right
:
expr
)
=
>
{
let
res
:
crate
:
:
IResult
<
_
_
(
_
ErrorKind
)
>
=
left
;
assert_eq
!
(
res
right
)
;
}
;
)
;
#
[
test
]
fn
rest_on_slices
(
)
{
let
input
:
&
[
u8
]
=
&
b
"
Hello
world
!
"
[
.
.
]
;
let
empty
:
&
[
u8
]
=
&
b
"
"
[
.
.
]
;
assert_parse
!
(
rest
(
input
)
Ok
(
(
empty
input
)
)
)
;
}
#
[
test
]
fn
rest_on_strs
(
)
{
let
input
:
&
str
=
"
Hello
world
!
"
;
let
empty
:
&
str
=
"
"
;
assert_parse
!
(
rest
(
input
)
Ok
(
(
empty
input
)
)
)
;
}
#
[
test
]
fn
rest_len_on_slices
(
)
{
let
input
:
&
[
u8
]
=
&
b
"
Hello
world
!
"
[
.
.
]
;
assert_parse
!
(
rest_len
(
input
)
Ok
(
(
input
input
.
len
(
)
)
)
)
;
}
use
crate
:
:
lib
:
:
std
:
:
convert
:
:
From
;
impl
From
<
u32
>
for
CustomError
{
fn
from
(
_
:
u32
)
-
>
Self
{
CustomError
}
}
impl
<
I
>
ParseError
<
I
>
for
CustomError
{
fn
from_error_kind
(
_
:
I
_
:
ErrorKind
)
-
>
Self
{
CustomError
}
fn
append
(
_
:
I
_
:
ErrorKind
_
:
CustomError
)
-
>
Self
{
CustomError
}
}
struct
CustomError
;
#
[
allow
(
dead_code
)
]
fn
custom_error
(
input
:
&
[
u8
]
)
-
>
IResult
<
&
[
u8
]
&
[
u8
]
CustomError
>
{
crate
:
:
character
:
:
streaming
:
:
alphanumeric1
(
input
)
}
#
[
test
]
fn
test_flat_map
(
)
{
let
input
:
&
[
u8
]
=
&
[
3
100
101
102
103
104
]
[
.
.
]
;
assert_parse
!
(
flat_map
(
be_u8
take
)
(
input
)
Ok
(
(
&
[
103
104
]
[
.
.
]
&
[
100
101
102
]
[
.
.
]
)
)
)
;
}
#
[
test
]
fn
test_map_opt
(
)
{
let
input
:
&
[
u8
]
=
&
[
50
]
[
.
.
]
;
assert_parse
!
(
map_opt
(
be_u8
|
u
|
if
u
<
20
{
Some
(
u
)
}
else
{
None
}
)
(
input
)
Err
(
Err
:
:
Error
(
(
&
[
50
]
[
.
.
]
ErrorKind
:
:
MapOpt
)
)
)
)
;
assert_parse
!
(
map_opt
(
be_u8
|
u
|
if
u
>
20
{
Some
(
u
)
}
else
{
None
}
)
(
input
)
Ok
(
(
&
[
]
[
.
.
]
50
)
)
)
;
}
#
[
test
]
fn
test_map_parser
(
)
{
let
input
:
&
[
u8
]
=
&
[
100
101
102
103
104
]
[
.
.
]
;
assert_parse
!
(
map_parser
(
take
(
4usize
)
take
(
2usize
)
)
(
input
)
Ok
(
(
&
[
104
]
[
.
.
]
&
[
100
101
]
[
.
.
]
)
)
)
;
}
#
[
test
]
fn
test_all_consuming
(
)
{
let
input
:
&
[
u8
]
=
&
[
100
101
102
]
[
.
.
]
;
assert_parse
!
(
all_consuming
(
take
(
2usize
)
)
(
input
)
Err
(
Err
:
:
Error
(
(
&
[
102
]
[
.
.
]
ErrorKind
:
:
Eof
)
)
)
)
;
assert_parse
!
(
all_consuming
(
take
(
3usize
)
)
(
input
)
Ok
(
(
&
[
]
[
.
.
]
&
[
100
101
102
]
[
.
.
]
)
)
)
;
}
#
[
test
]
#
[
allow
(
unused
)
]
fn
test_verify_ref
(
)
{
use
crate
:
:
bytes
:
:
complete
:
:
take
;
let
parser1
=
verify
(
take
(
3u8
)
|
s
:
&
[
u8
]
|
s
=
=
&
b
"
abc
"
[
.
.
]
)
;
assert_eq
!
(
parser1
(
&
b
"
abcd
"
[
.
.
]
)
Ok
(
(
&
b
"
d
"
[
.
.
]
&
b
"
abc
"
[
.
.
]
)
)
)
;
assert_eq
!
(
parser1
(
&
b
"
defg
"
[
.
.
]
)
Err
(
Err
:
:
Error
(
(
&
b
"
defg
"
[
.
.
]
ErrorKind
:
:
Verify
)
)
)
)
;
fn
parser2
(
i
:
&
[
u8
]
)
-
>
IResult
<
&
[
u8
]
u32
>
{
verify
(
crate
:
:
number
:
:
streaming
:
:
be_u32
|
val
:
&
u32
|
*
val
<
3
)
(
i
)
}
}
#
[
test
]
#
[
cfg
(
feature
=
"
alloc
"
)
]
fn
test_verify_alloc
(
)
{
use
crate
:
:
bytes
:
:
complete
:
:
take
;
let
parser1
=
verify
(
map
(
take
(
3u8
)
|
s
:
&
[
u8
]
|
s
.
to_vec
(
)
)
|
s
:
&
[
u8
]
|
s
=
=
&
b
"
abc
"
[
.
.
]
)
;
assert_eq
!
(
parser1
(
&
b
"
abcd
"
[
.
.
]
)
Ok
(
(
&
b
"
d
"
[
.
.
]
(
&
b
"
abc
"
)
.
to_vec
(
)
)
)
)
;
assert_eq
!
(
parser1
(
&
b
"
defg
"
[
.
.
]
)
Err
(
Err
:
:
Error
(
(
&
b
"
defg
"
[
.
.
]
ErrorKind
:
:
Verify
)
)
)
)
;
}
}
