#
!
[
cfg_attr
(
all
(
not
(
feature
=
"
std
"
)
feature
=
"
alloc
"
)
feature
(
alloc
)
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
doc_markdown
)
)
]
#
!
[
cfg_attr
(
nightly
feature
(
test
)
)
]
#
[
cfg
(
all
(
not
(
feature
=
"
std
"
)
feature
=
"
alloc
"
)
)
]
#
[
macro_use
]
extern
crate
alloc
;
#
[
cfg
(
feature
=
"
regexp_macros
"
)
]
#
[
macro_use
]
extern
crate
lazy_static
;
extern
crate
memchr
;
#
[
cfg
(
feature
=
"
regexp
"
)
]
extern
crate
regex
;
#
[
cfg
(
nightly
)
]
extern
crate
test
;
pub
mod
lib
{
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
pub
mod
std
{
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
feature
=
"
alloc
"
macro_use
)
]
pub
use
alloc
:
:
{
boxed
string
vec
}
;
pub
use
core
:
:
{
cmp
convert
fmt
iter
mem
ops
option
result
slice
str
}
;
pub
mod
prelude
{
pub
use
core
:
:
prelude
as
v1
;
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
pub
mod
std
{
pub
use
std
:
:
{
boxed
cmp
collections
convert
fmt
hash
iter
mem
ops
option
result
slice
str
string
vec
}
;
pub
mod
prelude
{
pub
use
std
:
:
prelude
as
v1
;
}
}
}
pub
use
self
:
:
traits
:
:
*
;
pub
use
self
:
:
util
:
:
*
;
#
[
cfg
(
feature
=
"
verbose
-
errors
"
)
]
pub
use
self
:
:
verbose_errors
:
:
*
;
#
[
cfg
(
not
(
feature
=
"
verbose
-
errors
"
)
)
]
pub
use
self
:
:
simple_errors
:
:
*
;
pub
use
self
:
:
branch
:
:
*
;
pub
use
self
:
:
internal
:
:
*
;
pub
use
self
:
:
macros
:
:
*
;
pub
use
self
:
:
methods
:
:
*
;
pub
use
self
:
:
multi
:
:
*
;
pub
use
self
:
:
sequence
:
:
*
;
pub
use
self
:
:
bits
:
:
*
;
pub
use
self
:
:
bytes
:
:
*
;
pub
use
self
:
:
character
:
:
*
;
pub
use
self
:
:
nom
:
:
*
;
pub
use
self
:
:
whitespace
:
:
*
;
#
[
cfg
(
feature
=
"
regexp
"
)
]
pub
use
self
:
:
regexp
:
:
*
;
pub
use
self
:
:
str
:
:
*
;
#
[
macro_use
]
mod
util
;
#
[
cfg
(
feature
=
"
verbose
-
errors
"
)
]
#
[
macro_use
]
pub
mod
verbose_errors
;
#
[
cfg
(
not
(
feature
=
"
verbose
-
errors
"
)
)
]
#
[
macro_use
]
pub
mod
simple_errors
;
#
[
macro_use
]
mod
internal
;
mod
traits
;
#
[
macro_use
]
mod
macros
;
#
[
macro_use
]
mod
branch
;
#
[
macro_use
]
mod
sequence
;
#
[
macro_use
]
mod
multi
;
#
[
macro_use
]
pub
mod
methods
;
#
[
macro_use
]
mod
bytes
;
#
[
macro_use
]
pub
mod
bits
;
#
[
macro_use
]
mod
character
;
#
[
macro_use
]
mod
nom
;
#
[
macro_use
]
pub
mod
whitespace
;
#
[
cfg
(
feature
=
"
regexp
"
)
]
#
[
macro_use
]
mod
regexp
;
mod
str
;
pub
mod
types
;
