use
crate
:
:
hpack
:
:
BytesStr
;
use
bytes
:
:
Bytes
;
use
std
:
:
fmt
;
#
[
derive
(
Clone
Eq
PartialEq
)
]
pub
struct
Protocol
{
value
:
BytesStr
}
impl
Protocol
{
pub
const
fn
from_static
(
value
:
&
'
static
str
)
-
>
Self
{
Self
{
value
:
BytesStr
:
:
from_static
(
value
)
}
}
pub
fn
as_str
(
&
self
)
-
>
&
str
{
self
.
value
.
as_str
(
)
}
pub
(
crate
)
fn
try_from
(
bytes
:
Bytes
)
-
>
Result
<
Self
std
:
:
str
:
:
Utf8Error
>
{
Ok
(
Self
{
value
:
BytesStr
:
:
try_from
(
bytes
)
?
}
)
}
}
impl
<
'
a
>
From
<
&
'
a
str
>
for
Protocol
{
fn
from
(
value
:
&
'
a
str
)
-
>
Self
{
Self
{
value
:
BytesStr
:
:
from
(
value
)
}
}
}
impl
AsRef
<
[
u8
]
>
for
Protocol
{
fn
as_ref
(
&
self
)
-
>
&
[
u8
]
{
self
.
value
.
as_ref
(
)
}
}
impl
fmt
:
:
Debug
for
Protocol
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
value
.
fmt
(
f
)
}
}
