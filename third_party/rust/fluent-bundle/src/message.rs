use
fluent_syntax
:
:
ast
;
#
[
derive
(
Debug
PartialEq
)
]
pub
struct
FluentAttribute
<
'
m
>
{
node
:
&
'
m
ast
:
:
Attribute
<
&
'
m
str
>
}
impl
<
'
m
>
FluentAttribute
<
'
m
>
{
pub
fn
id
(
&
self
)
-
>
&
'
m
str
{
&
self
.
node
.
id
.
name
}
pub
fn
value
(
&
self
)
-
>
&
'
m
ast
:
:
Pattern
<
&
'
m
str
>
{
&
self
.
node
.
value
}
}
impl
<
'
m
>
From
<
&
'
m
ast
:
:
Attribute
<
&
'
m
str
>
>
for
FluentAttribute
<
'
m
>
{
fn
from
(
attr
:
&
'
m
ast
:
:
Attribute
<
&
'
m
str
>
)
-
>
Self
{
FluentAttribute
{
node
:
attr
}
}
}
#
[
derive
(
Debug
PartialEq
)
]
pub
struct
FluentMessage
<
'
m
>
{
node
:
&
'
m
ast
:
:
Message
<
&
'
m
str
>
}
impl
<
'
m
>
FluentMessage
<
'
m
>
{
pub
fn
value
(
&
self
)
-
>
Option
<
&
'
m
ast
:
:
Pattern
<
&
'
m
str
>
>
{
self
.
node
.
value
.
as_ref
(
)
}
pub
fn
attributes
(
&
self
)
-
>
impl
Iterator
<
Item
=
FluentAttribute
<
'
m
>
>
{
self
.
node
.
attributes
.
iter
(
)
.
map
(
Into
:
:
into
)
}
pub
fn
get_attribute
(
&
self
key
:
&
str
)
-
>
Option
<
FluentAttribute
<
'
m
>
>
{
self
.
node
.
attributes
.
iter
(
)
.
find
(
|
attr
|
attr
.
id
.
name
=
=
key
)
.
map
(
Into
:
:
into
)
}
}
impl
<
'
m
>
From
<
&
'
m
ast
:
:
Message
<
&
'
m
str
>
>
for
FluentMessage
<
'
m
>
{
fn
from
(
msg
:
&
'
m
ast
:
:
Message
<
&
'
m
str
>
)
-
>
Self
{
FluentMessage
{
node
:
msg
}
}
}
