use
std
:
:
os
:
:
raw
:
:
c_int
;
use
crate
:
:
error
:
:
check
;
use
crate
:
:
ffi
;
use
crate
:
:
{
Connection
Result
}
;
#
[
repr
(
i32
)
]
#
[
allow
(
non_snake_case
non_camel_case_types
)
]
#
[
non_exhaustive
]
#
[
allow
(
clippy
:
:
upper_case_acronyms
)
]
pub
enum
DbConfig
{
SQLITE_DBCONFIG_ENABLE_FKEY
=
1002
SQLITE_DBCONFIG_ENABLE_TRIGGER
=
1003
SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER
=
1004
SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE
=
1006
SQLITE_DBCONFIG_ENABLE_QPSG
=
1007
SQLITE_DBCONFIG_TRIGGER_EQP
=
1008
SQLITE_DBCONFIG_RESET_DATABASE
=
1009
SQLITE_DBCONFIG_DEFENSIVE
=
1010
#
[
cfg
(
feature
=
"
modern_sqlite
"
)
]
SQLITE_DBCONFIG_WRITABLE_SCHEMA
=
1011
#
[
cfg
(
feature
=
"
modern_sqlite
"
)
]
SQLITE_DBCONFIG_LEGACY_ALTER_TABLE
=
1012
#
[
cfg
(
feature
=
"
modern_sqlite
"
)
]
SQLITE_DBCONFIG_DQS_DML
=
1013
#
[
cfg
(
feature
=
"
modern_sqlite
"
)
]
SQLITE_DBCONFIG_DQS_DDL
=
1014
#
[
cfg
(
feature
=
"
modern_sqlite
"
)
]
SQLITE_DBCONFIG_ENABLE_VIEW
=
1015
#
[
cfg
(
feature
=
"
modern_sqlite
"
)
]
SQLITE_DBCONFIG_LEGACY_FILE_FORMAT
=
1016
#
[
cfg
(
feature
=
"
modern_sqlite
"
)
]
SQLITE_DBCONFIG_TRUSTED_SCHEMA
=
1017
}
impl
Connection
{
#
[
inline
]
pub
fn
db_config
(
&
self
config
:
DbConfig
)
-
>
Result
<
bool
>
{
let
c
=
self
.
db
.
borrow
(
)
;
unsafe
{
let
mut
val
=
0
;
check
(
ffi
:
:
sqlite3_db_config
(
c
.
db
(
)
config
as
c_int
-
1
&
mut
val
)
)
?
;
Ok
(
val
!
=
0
)
}
}
#
[
inline
]
pub
fn
set_db_config
(
&
self
config
:
DbConfig
new_val
:
bool
)
-
>
Result
<
bool
>
{
let
c
=
self
.
db
.
borrow_mut
(
)
;
unsafe
{
let
mut
val
=
0
;
check
(
ffi
:
:
sqlite3_db_config
(
c
.
db
(
)
config
as
c_int
if
new_val
{
1
}
else
{
0
}
&
mut
val
)
)
?
;
Ok
(
val
!
=
0
)
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
DbConfig
;
use
crate
:
:
{
Connection
Result
}
;
#
[
test
]
fn
test_db_config
(
)
-
>
Result
<
(
)
>
{
let
db
=
Connection
:
:
open_in_memory
(
)
?
;
let
opposite
=
!
db
.
db_config
(
DbConfig
:
:
SQLITE_DBCONFIG_ENABLE_FKEY
)
?
;
assert_eq
!
(
db
.
set_db_config
(
DbConfig
:
:
SQLITE_DBCONFIG_ENABLE_FKEY
opposite
)
Ok
(
opposite
)
)
;
assert_eq
!
(
db
.
db_config
(
DbConfig
:
:
SQLITE_DBCONFIG_ENABLE_FKEY
)
Ok
(
opposite
)
)
;
let
opposite
=
!
db
.
db_config
(
DbConfig
:
:
SQLITE_DBCONFIG_ENABLE_TRIGGER
)
?
;
assert_eq
!
(
db
.
set_db_config
(
DbConfig
:
:
SQLITE_DBCONFIG_ENABLE_TRIGGER
opposite
)
Ok
(
opposite
)
)
;
assert_eq
!
(
db
.
db_config
(
DbConfig
:
:
SQLITE_DBCONFIG_ENABLE_TRIGGER
)
Ok
(
opposite
)
)
;
Ok
(
(
)
)
}
}
