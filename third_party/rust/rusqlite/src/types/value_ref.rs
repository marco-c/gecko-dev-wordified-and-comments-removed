use
super
:
:
{
Type
Value
}
;
use
crate
:
:
types
:
:
{
FromSqlError
FromSqlResult
}
;
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
pub
enum
ValueRef
<
'
a
>
{
Null
Integer
(
i64
)
Real
(
f64
)
Text
(
&
'
a
[
u8
]
)
Blob
(
&
'
a
[
u8
]
)
}
impl
ValueRef
<
'
_
>
{
pub
fn
data_type
(
&
self
)
-
>
Type
{
match
*
self
{
ValueRef
:
:
Null
=
>
Type
:
:
Null
ValueRef
:
:
Integer
(
_
)
=
>
Type
:
:
Integer
ValueRef
:
:
Real
(
_
)
=
>
Type
:
:
Real
ValueRef
:
:
Text
(
_
)
=
>
Type
:
:
Text
ValueRef
:
:
Blob
(
_
)
=
>
Type
:
:
Blob
}
}
}
impl
<
'
a
>
ValueRef
<
'
a
>
{
pub
fn
as_i64
(
&
self
)
-
>
FromSqlResult
<
i64
>
{
match
*
self
{
ValueRef
:
:
Integer
(
i
)
=
>
Ok
(
i
)
_
=
>
Err
(
FromSqlError
:
:
InvalidType
)
}
}
pub
fn
as_f64
(
&
self
)
-
>
FromSqlResult
<
f64
>
{
match
*
self
{
ValueRef
:
:
Real
(
f
)
=
>
Ok
(
f
)
_
=
>
Err
(
FromSqlError
:
:
InvalidType
)
}
}
pub
fn
as_str
(
&
self
)
-
>
FromSqlResult
<
&
'
a
str
>
{
match
*
self
{
ValueRef
:
:
Text
(
t
)
=
>
{
std
:
:
str
:
:
from_utf8
(
t
)
.
map_err
(
|
e
|
FromSqlError
:
:
Other
(
Box
:
:
new
(
e
)
)
)
}
_
=
>
Err
(
FromSqlError
:
:
InvalidType
)
}
}
pub
fn
as_blob
(
&
self
)
-
>
FromSqlResult
<
&
'
a
[
u8
]
>
{
match
*
self
{
ValueRef
:
:
Blob
(
b
)
=
>
Ok
(
b
)
_
=
>
Err
(
FromSqlError
:
:
InvalidType
)
}
}
}
impl
From
<
ValueRef
<
'
_
>
>
for
Value
{
fn
from
(
borrowed
:
ValueRef
<
'
_
>
)
-
>
Value
{
match
borrowed
{
ValueRef
:
:
Null
=
>
Value
:
:
Null
ValueRef
:
:
Integer
(
i
)
=
>
Value
:
:
Integer
(
i
)
ValueRef
:
:
Real
(
r
)
=
>
Value
:
:
Real
(
r
)
ValueRef
:
:
Text
(
s
)
=
>
{
let
s
=
std
:
:
str
:
:
from_utf8
(
s
)
.
expect
(
"
invalid
UTF
-
8
"
)
;
Value
:
:
Text
(
s
.
to_string
(
)
)
}
ValueRef
:
:
Blob
(
b
)
=
>
Value
:
:
Blob
(
b
.
to_vec
(
)
)
}
}
}
impl
<
'
a
>
From
<
&
'
a
str
>
for
ValueRef
<
'
a
>
{
fn
from
(
s
:
&
str
)
-
>
ValueRef
<
'
_
>
{
ValueRef
:
:
Text
(
s
.
as_bytes
(
)
)
}
}
impl
<
'
a
>
From
<
&
'
a
[
u8
]
>
for
ValueRef
<
'
a
>
{
fn
from
(
s
:
&
[
u8
]
)
-
>
ValueRef
<
'
_
>
{
ValueRef
:
:
Blob
(
s
)
}
}
impl
<
'
a
>
From
<
&
'
a
Value
>
for
ValueRef
<
'
a
>
{
fn
from
(
value
:
&
'
a
Value
)
-
>
ValueRef
<
'
a
>
{
match
*
value
{
Value
:
:
Null
=
>
ValueRef
:
:
Null
Value
:
:
Integer
(
i
)
=
>
ValueRef
:
:
Integer
(
i
)
Value
:
:
Real
(
r
)
=
>
ValueRef
:
:
Real
(
r
)
Value
:
:
Text
(
ref
s
)
=
>
ValueRef
:
:
Text
(
s
.
as_bytes
(
)
)
Value
:
:
Blob
(
ref
b
)
=
>
ValueRef
:
:
Blob
(
b
)
}
}
}
impl
<
'
a
T
>
From
<
Option
<
T
>
>
for
ValueRef
<
'
a
>
where
T
:
Into
<
ValueRef
<
'
a
>
>
{
fn
from
(
s
:
Option
<
T
>
)
-
>
ValueRef
<
'
a
>
{
match
s
{
Some
(
x
)
=
>
x
.
into
(
)
None
=
>
ValueRef
:
:
Null
}
}
}
#
[
cfg
(
any
(
feature
=
"
functions
"
feature
=
"
session
"
feature
=
"
vtab
"
)
)
]
impl
<
'
a
>
ValueRef
<
'
a
>
{
pub
(
crate
)
unsafe
fn
from_value
(
value
:
*
mut
crate
:
:
ffi
:
:
sqlite3_value
)
-
>
ValueRef
<
'
a
>
{
use
crate
:
:
ffi
;
use
std
:
:
ffi
:
:
CStr
;
use
std
:
:
os
:
:
raw
:
:
c_char
;
use
std
:
:
slice
:
:
from_raw_parts
;
match
ffi
:
:
sqlite3_value_type
(
value
)
{
ffi
:
:
SQLITE_NULL
=
>
ValueRef
:
:
Null
ffi
:
:
SQLITE_INTEGER
=
>
ValueRef
:
:
Integer
(
ffi
:
:
sqlite3_value_int64
(
value
)
)
ffi
:
:
SQLITE_FLOAT
=
>
ValueRef
:
:
Real
(
ffi
:
:
sqlite3_value_double
(
value
)
)
ffi
:
:
SQLITE_TEXT
=
>
{
let
text
=
ffi
:
:
sqlite3_value_text
(
value
)
;
assert
!
(
!
text
.
is_null
(
)
"
unexpected
SQLITE_TEXT
value
type
with
NULL
data
"
)
;
let
s
=
CStr
:
:
from_ptr
(
text
as
*
const
c_char
)
;
let
s
=
s
.
to_bytes
(
)
;
ValueRef
:
:
Text
(
s
)
}
ffi
:
:
SQLITE_BLOB
=
>
{
let
(
blob
len
)
=
(
ffi
:
:
sqlite3_value_blob
(
value
)
ffi
:
:
sqlite3_value_bytes
(
value
)
)
;
assert
!
(
len
>
=
0
"
unexpected
negative
return
from
sqlite3_value_bytes
"
)
;
if
len
>
0
{
assert
!
(
!
blob
.
is_null
(
)
"
unexpected
SQLITE_BLOB
value
type
with
NULL
data
"
)
;
ValueRef
:
:
Blob
(
from_raw_parts
(
blob
as
*
const
u8
len
as
usize
)
)
}
else
{
ValueRef
:
:
Blob
(
&
[
]
)
}
}
_
=
>
unreachable
!
(
"
sqlite3_value_type
returned
invalid
value
"
)
}
}
}
