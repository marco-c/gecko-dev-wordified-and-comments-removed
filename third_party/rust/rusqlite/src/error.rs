use
crate
:
:
types
:
:
FromSqlError
;
use
crate
:
:
types
:
:
Type
;
use
crate
:
:
{
errmsg_to_string
ffi
}
;
use
std
:
:
error
;
use
std
:
:
fmt
;
use
std
:
:
os
:
:
raw
:
:
c_int
;
use
std
:
:
path
:
:
PathBuf
;
use
std
:
:
str
;
#
[
derive
(
Debug
)
]
#
[
allow
(
clippy
:
:
enum_variant_names
)
]
#
[
non_exhaustive
]
pub
enum
Error
{
SqliteFailure
(
ffi
:
:
Error
Option
<
String
>
)
SqliteSingleThreadedMode
FromSqlConversionFailure
(
usize
Type
Box
<
dyn
error
:
:
Error
+
Send
+
Sync
>
)
IntegralValueOutOfRange
(
usize
i64
)
Utf8Error
(
str
:
:
Utf8Error
)
NulError
(
:
:
std
:
:
ffi
:
:
NulError
)
InvalidParameterName
(
String
)
InvalidPath
(
PathBuf
)
ExecuteReturnedResults
QueryReturnedNoRows
InvalidColumnIndex
(
usize
)
InvalidColumnName
(
String
)
InvalidColumnType
(
usize
String
Type
)
StatementChangedRows
(
usize
)
#
[
cfg
(
feature
=
"
functions
"
)
]
InvalidFunctionParameterType
(
usize
Type
)
#
[
cfg
(
feature
=
"
vtab
"
)
]
InvalidFilterParameterType
(
usize
Type
)
#
[
cfg
(
feature
=
"
functions
"
)
]
#
[
allow
(
dead_code
)
]
UserFunctionError
(
Box
<
dyn
error
:
:
Error
+
Send
+
Sync
>
)
ToSqlConversionFailure
(
Box
<
dyn
error
:
:
Error
+
Send
+
Sync
>
)
InvalidQuery
#
[
cfg
(
feature
=
"
vtab
"
)
]
#
[
allow
(
dead_code
)
]
ModuleError
(
String
)
#
[
cfg
(
feature
=
"
functions
"
)
]
UnwindingPanic
#
[
cfg
(
feature
=
"
functions
"
)
]
GetAuxWrongType
MultipleStatement
InvalidParameterCount
(
usize
usize
)
}
impl
PartialEq
for
Error
{
fn
eq
(
&
self
other
:
&
Error
)
-
>
bool
{
match
(
self
other
)
{
(
Error
:
:
SqliteFailure
(
e1
s1
)
Error
:
:
SqliteFailure
(
e2
s2
)
)
=
>
e1
=
=
e2
&
&
s1
=
=
s2
(
Error
:
:
SqliteSingleThreadedMode
Error
:
:
SqliteSingleThreadedMode
)
=
>
true
(
Error
:
:
IntegralValueOutOfRange
(
i1
n1
)
Error
:
:
IntegralValueOutOfRange
(
i2
n2
)
)
=
>
{
i1
=
=
i2
&
&
n1
=
=
n2
}
(
Error
:
:
Utf8Error
(
e1
)
Error
:
:
Utf8Error
(
e2
)
)
=
>
e1
=
=
e2
(
Error
:
:
NulError
(
e1
)
Error
:
:
NulError
(
e2
)
)
=
>
e1
=
=
e2
(
Error
:
:
InvalidParameterName
(
n1
)
Error
:
:
InvalidParameterName
(
n2
)
)
=
>
n1
=
=
n2
(
Error
:
:
InvalidPath
(
p1
)
Error
:
:
InvalidPath
(
p2
)
)
=
>
p1
=
=
p2
(
Error
:
:
ExecuteReturnedResults
Error
:
:
ExecuteReturnedResults
)
=
>
true
(
Error
:
:
QueryReturnedNoRows
Error
:
:
QueryReturnedNoRows
)
=
>
true
(
Error
:
:
InvalidColumnIndex
(
i1
)
Error
:
:
InvalidColumnIndex
(
i2
)
)
=
>
i1
=
=
i2
(
Error
:
:
InvalidColumnName
(
n1
)
Error
:
:
InvalidColumnName
(
n2
)
)
=
>
n1
=
=
n2
(
Error
:
:
InvalidColumnType
(
i1
n1
t1
)
Error
:
:
InvalidColumnType
(
i2
n2
t2
)
)
=
>
{
i1
=
=
i2
&
&
t1
=
=
t2
&
&
n1
=
=
n2
}
(
Error
:
:
StatementChangedRows
(
n1
)
Error
:
:
StatementChangedRows
(
n2
)
)
=
>
n1
=
=
n2
#
[
cfg
(
feature
=
"
functions
"
)
]
(
Error
:
:
InvalidFunctionParameterType
(
i1
t1
)
Error
:
:
InvalidFunctionParameterType
(
i2
t2
)
)
=
>
i1
=
=
i2
&
&
t1
=
=
t2
#
[
cfg
(
feature
=
"
vtab
"
)
]
(
Error
:
:
InvalidFilterParameterType
(
i1
t1
)
Error
:
:
InvalidFilterParameterType
(
i2
t2
)
)
=
>
i1
=
=
i2
&
&
t1
=
=
t2
(
Error
:
:
InvalidQuery
Error
:
:
InvalidQuery
)
=
>
true
#
[
cfg
(
feature
=
"
vtab
"
)
]
(
Error
:
:
ModuleError
(
s1
)
Error
:
:
ModuleError
(
s2
)
)
=
>
s1
=
=
s2
#
[
cfg
(
feature
=
"
functions
"
)
]
(
Error
:
:
UnwindingPanic
Error
:
:
UnwindingPanic
)
=
>
true
#
[
cfg
(
feature
=
"
functions
"
)
]
(
Error
:
:
GetAuxWrongType
Error
:
:
GetAuxWrongType
)
=
>
true
(
Error
:
:
InvalidParameterCount
(
i1
n1
)
Error
:
:
InvalidParameterCount
(
i2
n2
)
)
=
>
{
i1
=
=
i2
&
&
n1
=
=
n2
}
(
.
.
)
=
>
false
}
}
}
impl
From
<
str
:
:
Utf8Error
>
for
Error
{
fn
from
(
err
:
str
:
:
Utf8Error
)
-
>
Error
{
Error
:
:
Utf8Error
(
err
)
}
}
impl
From
<
:
:
std
:
:
ffi
:
:
NulError
>
for
Error
{
fn
from
(
err
:
:
:
std
:
:
ffi
:
:
NulError
)
-
>
Error
{
Error
:
:
NulError
(
err
)
}
}
const
UNKNOWN_COLUMN
:
usize
=
std
:
:
usize
:
:
MAX
;
impl
From
<
FromSqlError
>
for
Error
{
fn
from
(
err
:
FromSqlError
)
-
>
Error
{
match
err
{
FromSqlError
:
:
OutOfRange
(
val
)
=
>
Error
:
:
IntegralValueOutOfRange
(
UNKNOWN_COLUMN
val
)
#
[
cfg
(
feature
=
"
i128_blob
"
)
]
FromSqlError
:
:
InvalidI128Size
(
_
)
=
>
{
Error
:
:
FromSqlConversionFailure
(
UNKNOWN_COLUMN
Type
:
:
Blob
Box
:
:
new
(
err
)
)
}
#
[
cfg
(
feature
=
"
uuid
"
)
]
FromSqlError
:
:
InvalidUuidSize
(
_
)
=
>
{
Error
:
:
FromSqlConversionFailure
(
UNKNOWN_COLUMN
Type
:
:
Blob
Box
:
:
new
(
err
)
)
}
FromSqlError
:
:
Other
(
source
)
=
>
{
Error
:
:
FromSqlConversionFailure
(
UNKNOWN_COLUMN
Type
:
:
Null
source
)
}
_
=
>
Error
:
:
FromSqlConversionFailure
(
UNKNOWN_COLUMN
Type
:
:
Null
Box
:
:
new
(
err
)
)
}
}
}
impl
fmt
:
:
Display
for
Error
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
*
self
{
Error
:
:
SqliteFailure
(
ref
err
None
)
=
>
err
.
fmt
(
f
)
Error
:
:
SqliteFailure
(
_
Some
(
ref
s
)
)
=
>
write
!
(
f
"
{
}
"
s
)
Error
:
:
SqliteSingleThreadedMode
=
>
write
!
(
f
"
SQLite
was
compiled
or
configured
for
single
-
threaded
use
only
"
)
Error
:
:
FromSqlConversionFailure
(
i
ref
t
ref
err
)
=
>
{
if
i
!
=
UNKNOWN_COLUMN
{
write
!
(
f
"
Conversion
error
from
type
{
}
at
index
:
{
}
{
}
"
t
i
err
)
}
else
{
err
.
fmt
(
f
)
}
}
Error
:
:
IntegralValueOutOfRange
(
col
val
)
=
>
{
if
col
!
=
UNKNOWN_COLUMN
{
write
!
(
f
"
Integer
{
}
out
of
range
at
index
{
}
"
val
col
)
}
else
{
write
!
(
f
"
Integer
{
}
out
of
range
"
val
)
}
}
Error
:
:
Utf8Error
(
ref
err
)
=
>
err
.
fmt
(
f
)
Error
:
:
NulError
(
ref
err
)
=
>
err
.
fmt
(
f
)
Error
:
:
InvalidParameterName
(
ref
name
)
=
>
write
!
(
f
"
Invalid
parameter
name
:
{
}
"
name
)
Error
:
:
InvalidPath
(
ref
p
)
=
>
write
!
(
f
"
Invalid
path
:
{
}
"
p
.
to_string_lossy
(
)
)
Error
:
:
ExecuteReturnedResults
=
>
{
write
!
(
f
"
Execute
returned
results
-
did
you
mean
to
call
query
?
"
)
}
Error
:
:
QueryReturnedNoRows
=
>
write
!
(
f
"
Query
returned
no
rows
"
)
Error
:
:
InvalidColumnIndex
(
i
)
=
>
write
!
(
f
"
Invalid
column
index
:
{
}
"
i
)
Error
:
:
InvalidColumnName
(
ref
name
)
=
>
write
!
(
f
"
Invalid
column
name
:
{
}
"
name
)
Error
:
:
InvalidColumnType
(
i
ref
name
ref
t
)
=
>
write
!
(
f
"
Invalid
column
type
{
}
at
index
:
{
}
name
:
{
}
"
t
i
name
)
Error
:
:
InvalidParameterCount
(
i1
n1
)
=
>
write
!
(
f
"
Wrong
number
of
parameters
passed
to
query
.
Got
{
}
needed
{
}
"
i1
n1
)
Error
:
:
StatementChangedRows
(
i
)
=
>
write
!
(
f
"
Query
changed
{
}
rows
"
i
)
#
[
cfg
(
feature
=
"
functions
"
)
]
Error
:
:
InvalidFunctionParameterType
(
i
ref
t
)
=
>
{
write
!
(
f
"
Invalid
function
parameter
type
{
}
at
index
{
}
"
t
i
)
}
#
[
cfg
(
feature
=
"
vtab
"
)
]
Error
:
:
InvalidFilterParameterType
(
i
ref
t
)
=
>
{
write
!
(
f
"
Invalid
filter
parameter
type
{
}
at
index
{
}
"
t
i
)
}
#
[
cfg
(
feature
=
"
functions
"
)
]
Error
:
:
UserFunctionError
(
ref
err
)
=
>
err
.
fmt
(
f
)
Error
:
:
ToSqlConversionFailure
(
ref
err
)
=
>
err
.
fmt
(
f
)
Error
:
:
InvalidQuery
=
>
write
!
(
f
"
Query
is
not
read
-
only
"
)
#
[
cfg
(
feature
=
"
vtab
"
)
]
Error
:
:
ModuleError
(
ref
desc
)
=
>
write
!
(
f
"
{
}
"
desc
)
#
[
cfg
(
feature
=
"
functions
"
)
]
Error
:
:
UnwindingPanic
=
>
write
!
(
f
"
unwinding
panic
"
)
#
[
cfg
(
feature
=
"
functions
"
)
]
Error
:
:
GetAuxWrongType
=
>
write
!
(
f
"
get_aux
called
with
wrong
type
"
)
Error
:
:
MultipleStatement
=
>
write
!
(
f
"
Multiple
statements
provided
"
)
}
}
}
impl
error
:
:
Error
for
Error
{
#
[
allow
(
deprecated
)
]
fn
description
(
&
self
)
-
>
&
str
{
match
*
self
{
Error
:
:
SqliteFailure
(
ref
err
None
)
=
>
err
.
description
(
)
Error
:
:
SqliteFailure
(
_
Some
(
ref
s
)
)
=
>
s
Error
:
:
SqliteSingleThreadedMode
=
>
{
"
SQLite
was
compiled
or
configured
for
single
-
threaded
use
only
"
}
Error
:
:
FromSqlConversionFailure
(
_
_
ref
err
)
=
>
err
.
description
(
)
Error
:
:
IntegralValueOutOfRange
(
.
.
)
=
>
"
integral
value
out
of
range
of
requested
type
"
Error
:
:
Utf8Error
(
ref
err
)
=
>
err
.
description
(
)
Error
:
:
InvalidParameterName
(
_
)
=
>
"
invalid
parameter
name
"
Error
:
:
NulError
(
ref
err
)
=
>
err
.
description
(
)
Error
:
:
InvalidPath
(
_
)
=
>
"
invalid
path
"
Error
:
:
ExecuteReturnedResults
=
>
{
"
execute
returned
results
-
did
you
mean
to
call
query
?
"
}
Error
:
:
InvalidParameterCount
(
.
.
)
=
>
"
Wrong
number
of
parameters
passed
to
query
.
"
Error
:
:
QueryReturnedNoRows
=
>
"
query
returned
no
rows
"
Error
:
:
InvalidColumnIndex
(
_
)
=
>
"
invalid
column
index
"
Error
:
:
InvalidColumnName
(
_
)
=
>
"
invalid
column
name
"
Error
:
:
InvalidColumnType
(
.
.
)
=
>
"
invalid
column
type
"
Error
:
:
StatementChangedRows
(
_
)
=
>
"
query
inserted
zero
or
more
than
one
row
"
#
[
cfg
(
feature
=
"
functions
"
)
]
Error
:
:
InvalidFunctionParameterType
(
.
.
)
=
>
"
invalid
function
parameter
type
"
#
[
cfg
(
feature
=
"
vtab
"
)
]
Error
:
:
InvalidFilterParameterType
(
.
.
)
=
>
"
invalid
filter
parameter
type
"
#
[
cfg
(
feature
=
"
functions
"
)
]
Error
:
:
UserFunctionError
(
ref
err
)
=
>
err
.
description
(
)
Error
:
:
ToSqlConversionFailure
(
ref
err
)
=
>
err
.
description
(
)
Error
:
:
InvalidQuery
=
>
"
query
is
not
read
-
only
"
#
[
cfg
(
feature
=
"
vtab
"
)
]
Error
:
:
ModuleError
(
ref
desc
)
=
>
desc
#
[
cfg
(
feature
=
"
functions
"
)
]
Error
:
:
UnwindingPanic
=
>
"
unwinding
panic
"
#
[
cfg
(
feature
=
"
functions
"
)
]
Error
:
:
GetAuxWrongType
=
>
"
get_aux
called
with
wrong
type
"
Error
:
:
MultipleStatement
=
>
"
multiple
statements
provided
"
}
}
fn
cause
(
&
self
)
-
>
Option
<
&
dyn
error
:
:
Error
>
{
match
*
self
{
Error
:
:
SqliteFailure
(
ref
err
_
)
=
>
Some
(
err
)
Error
:
:
Utf8Error
(
ref
err
)
=
>
Some
(
err
)
Error
:
:
NulError
(
ref
err
)
=
>
Some
(
err
)
Error
:
:
IntegralValueOutOfRange
(
.
.
)
|
Error
:
:
SqliteSingleThreadedMode
|
Error
:
:
InvalidParameterName
(
_
)
|
Error
:
:
ExecuteReturnedResults
|
Error
:
:
QueryReturnedNoRows
|
Error
:
:
InvalidColumnIndex
(
_
)
|
Error
:
:
InvalidColumnName
(
_
)
|
Error
:
:
InvalidColumnType
(
.
.
)
|
Error
:
:
InvalidPath
(
_
)
|
Error
:
:
InvalidParameterCount
(
.
.
)
|
Error
:
:
StatementChangedRows
(
_
)
|
Error
:
:
InvalidQuery
|
Error
:
:
MultipleStatement
=
>
None
#
[
cfg
(
feature
=
"
functions
"
)
]
Error
:
:
InvalidFunctionParameterType
(
.
.
)
=
>
None
#
[
cfg
(
feature
=
"
vtab
"
)
]
Error
:
:
InvalidFilterParameterType
(
.
.
)
=
>
None
#
[
cfg
(
feature
=
"
functions
"
)
]
Error
:
:
UserFunctionError
(
ref
err
)
=
>
Some
(
&
*
*
err
)
Error
:
:
FromSqlConversionFailure
(
_
_
ref
err
)
|
Error
:
:
ToSqlConversionFailure
(
ref
err
)
=
>
Some
(
&
*
*
err
)
#
[
cfg
(
feature
=
"
vtab
"
)
]
Error
:
:
ModuleError
(
_
)
=
>
None
#
[
cfg
(
feature
=
"
functions
"
)
]
Error
:
:
UnwindingPanic
=
>
None
#
[
cfg
(
feature
=
"
functions
"
)
]
Error
:
:
GetAuxWrongType
=
>
None
}
}
}
pub
fn
error_from_sqlite_code
(
code
:
c_int
message
:
Option
<
String
>
)
-
>
Error
{
Error
:
:
SqliteFailure
(
ffi
:
:
Error
:
:
new
(
code
)
message
)
}
pub
fn
error_from_handle
(
db
:
*
mut
ffi
:
:
sqlite3
code
:
c_int
)
-
>
Error
{
let
message
=
if
db
.
is_null
(
)
{
None
}
else
{
Some
(
unsafe
{
errmsg_to_string
(
ffi
:
:
sqlite3_errmsg
(
db
)
)
}
)
}
;
error_from_sqlite_code
(
code
message
)
}
macro_rules
!
check
{
(
funcall
:
expr
)
=
>
{
{
let
rc
=
funcall
;
if
rc
!
=
crate
:
:
ffi
:
:
SQLITE_OK
{
return
Err
(
crate
:
:
error
:
:
error_from_sqlite_code
(
rc
None
)
.
into
(
)
)
;
}
}
}
;
}
