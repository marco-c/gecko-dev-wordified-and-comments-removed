use
std
:
:
{
cell
:
:
{
Cell
UnsafeCell
}
hint
:
:
unreachable_unchecked
marker
:
:
PhantomData
panic
:
:
{
RefUnwindSafe
UnwindSafe
}
sync
:
:
atomic
:
:
{
AtomicBool
AtomicUsize
Ordering
}
thread
:
:
{
self
Thread
}
}
;
#
[
derive
(
Debug
)
]
pub
(
crate
)
struct
OnceCell
<
T
>
{
state_and_queue
:
AtomicUsize
_marker
:
PhantomData
<
*
mut
Waiter
>
value
:
UnsafeCell
<
Option
<
T
>
>
}
unsafe
impl
<
T
:
Sync
+
Send
>
Sync
for
OnceCell
<
T
>
{
}
unsafe
impl
<
T
:
Send
>
Send
for
OnceCell
<
T
>
{
}
impl
<
T
:
RefUnwindSafe
+
UnwindSafe
>
RefUnwindSafe
for
OnceCell
<
T
>
{
}
impl
<
T
:
UnwindSafe
>
UnwindSafe
for
OnceCell
<
T
>
{
}
const
INCOMPLETE
:
usize
=
0x0
;
const
RUNNING
:
usize
=
0x1
;
const
COMPLETE
:
usize
=
0x2
;
const
STATE_MASK
:
usize
=
0x3
;
#
[
repr
(
align
(
4
)
)
]
struct
Waiter
{
thread
:
Cell
<
Option
<
Thread
>
>
signaled
:
AtomicBool
next
:
*
const
Waiter
}
struct
WaiterQueue
<
'
a
>
{
state_and_queue
:
&
'
a
AtomicUsize
set_state_on_drop_to
:
usize
}
impl
<
T
>
OnceCell
<
T
>
{
pub
(
crate
)
const
fn
new
(
)
-
>
OnceCell
<
T
>
{
OnceCell
{
state_and_queue
:
AtomicUsize
:
:
new
(
INCOMPLETE
)
_marker
:
PhantomData
value
:
UnsafeCell
:
:
new
(
None
)
}
}
#
[
inline
]
pub
(
crate
)
fn
is_initialized
(
&
self
)
-
>
bool
{
self
.
state_and_queue
.
load
(
Ordering
:
:
Acquire
)
=
=
COMPLETE
}
#
[
cold
]
pub
(
crate
)
fn
initialize
<
F
E
>
(
&
self
f
:
F
)
-
>
Result
<
(
)
E
>
where
F
:
FnOnce
(
)
-
>
Result
<
T
E
>
{
let
mut
f
=
Some
(
f
)
;
let
mut
res
:
Result
<
(
)
E
>
=
Ok
(
(
)
)
;
let
slot
:
*
mut
Option
<
T
>
=
self
.
value
.
get
(
)
;
initialize_inner
(
&
self
.
state_and_queue
&
mut
|
|
{
let
f
=
f
.
take
(
)
.
unwrap
(
)
;
match
f
(
)
{
Ok
(
value
)
=
>
{
unsafe
{
*
slot
=
Some
(
value
)
}
;
true
}
Err
(
err
)
=
>
{
res
=
Err
(
err
)
;
false
}
}
}
)
;
res
}
pub
(
crate
)
unsafe
fn
get_unchecked
(
&
self
)
-
>
&
T
{
debug_assert
!
(
self
.
is_initialized
(
)
)
;
let
slot
:
&
Option
<
T
>
=
&
*
self
.
value
.
get
(
)
;
match
slot
{
Some
(
value
)
=
>
value
None
=
>
{
debug_assert
!
(
false
)
;
unreachable_unchecked
(
)
}
}
}
pub
(
crate
)
fn
get_mut
(
&
mut
self
)
-
>
Option
<
&
mut
T
>
{
unsafe
{
&
mut
*
self
.
value
.
get
(
)
}
.
as_mut
(
)
}
#
[
inline
]
pub
(
crate
)
fn
into_inner
(
self
)
-
>
Option
<
T
>
{
self
.
value
.
into_inner
(
)
}
}
fn
initialize_inner
(
my_state_and_queue
:
&
AtomicUsize
init
:
&
mut
dyn
FnMut
(
)
-
>
bool
)
-
>
bool
{
let
mut
state_and_queue
=
my_state_and_queue
.
load
(
Ordering
:
:
Acquire
)
;
loop
{
match
state_and_queue
{
COMPLETE
=
>
return
true
INCOMPLETE
=
>
{
let
old
=
my_state_and_queue
.
compare_and_swap
(
state_and_queue
RUNNING
Ordering
:
:
Acquire
)
;
if
old
!
=
state_and_queue
{
state_and_queue
=
old
;
continue
;
}
let
mut
waiter_queue
=
WaiterQueue
{
state_and_queue
:
my_state_and_queue
set_state_on_drop_to
:
INCOMPLETE
}
;
let
success
=
init
(
)
;
waiter_queue
.
set_state_on_drop_to
=
if
success
{
COMPLETE
}
else
{
INCOMPLETE
}
;
return
success
;
}
_
=
>
{
assert
!
(
state_and_queue
&
STATE_MASK
=
=
RUNNING
)
;
wait
(
&
my_state_and_queue
state_and_queue
)
;
state_and_queue
=
my_state_and_queue
.
load
(
Ordering
:
:
Acquire
)
;
}
}
}
}
fn
wait
(
state_and_queue
:
&
AtomicUsize
mut
current_state
:
usize
)
{
loop
{
if
current_state
&
STATE_MASK
!
=
RUNNING
{
return
;
}
let
node
=
Waiter
{
thread
:
Cell
:
:
new
(
Some
(
thread
:
:
current
(
)
)
)
signaled
:
AtomicBool
:
:
new
(
false
)
next
:
(
current_state
&
!
STATE_MASK
)
as
*
const
Waiter
}
;
let
me
=
&
node
as
*
const
Waiter
as
usize
;
let
old
=
state_and_queue
.
compare_and_swap
(
current_state
me
|
RUNNING
Ordering
:
:
Release
)
;
if
old
!
=
current_state
{
current_state
=
old
;
continue
;
}
while
!
node
.
signaled
.
load
(
Ordering
:
:
Acquire
)
{
thread
:
:
park
(
)
;
}
break
;
}
}
impl
Drop
for
WaiterQueue
<
'
_
>
{
fn
drop
(
&
mut
self
)
{
let
state_and_queue
=
self
.
state_and_queue
.
swap
(
self
.
set_state_on_drop_to
Ordering
:
:
AcqRel
)
;
assert_eq
!
(
state_and_queue
&
STATE_MASK
RUNNING
)
;
unsafe
{
let
mut
queue
=
(
state_and_queue
&
!
STATE_MASK
)
as
*
const
Waiter
;
while
!
queue
.
is_null
(
)
{
let
next
=
(
*
queue
)
.
next
;
let
thread
=
(
*
queue
)
.
thread
.
replace
(
None
)
.
unwrap
(
)
;
(
*
queue
)
.
signaled
.
store
(
true
Ordering
:
:
Release
)
;
queue
=
next
;
thread
.
unpark
(
)
;
}
}
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
std
:
:
panic
;
use
std
:
:
{
sync
:
:
mpsc
:
:
channel
thread
}
;
use
super
:
:
OnceCell
;
impl
<
T
>
OnceCell
<
T
>
{
fn
init
(
&
self
f
:
impl
FnOnce
(
)
-
>
T
)
{
enum
Void
{
}
let
_
=
self
.
initialize
(
|
|
Ok
:
:
<
T
Void
>
(
f
(
)
)
)
;
}
}
#
[
test
]
fn
smoke_once
(
)
{
static
O
:
OnceCell
<
(
)
>
=
OnceCell
:
:
new
(
)
;
let
mut
a
=
0
;
O
.
init
(
|
|
a
+
=
1
)
;
assert_eq
!
(
a
1
)
;
O
.
init
(
|
|
a
+
=
1
)
;
assert_eq
!
(
a
1
)
;
}
#
[
test
]
fn
stampede_once
(
)
{
static
O
:
OnceCell
<
(
)
>
=
OnceCell
:
:
new
(
)
;
static
mut
RUN
:
bool
=
false
;
let
(
tx
rx
)
=
channel
(
)
;
for
_
in
0
.
.
10
{
let
tx
=
tx
.
clone
(
)
;
thread
:
:
spawn
(
move
|
|
{
for
_
in
0
.
.
4
{
thread
:
:
yield_now
(
)
}
unsafe
{
O
.
init
(
|
|
{
assert
!
(
!
RUN
)
;
RUN
=
true
;
}
)
;
assert
!
(
RUN
)
;
}
tx
.
send
(
(
)
)
.
unwrap
(
)
;
}
)
;
}
unsafe
{
O
.
init
(
|
|
{
assert
!
(
!
RUN
)
;
RUN
=
true
;
}
)
;
assert
!
(
RUN
)
;
}
for
_
in
0
.
.
10
{
rx
.
recv
(
)
.
unwrap
(
)
;
}
}
#
[
test
]
fn
poison_bad
(
)
{
static
O
:
OnceCell
<
(
)
>
=
OnceCell
:
:
new
(
)
;
let
t
=
panic
:
:
catch_unwind
(
|
|
{
O
.
init
(
|
|
panic
!
(
)
)
;
}
)
;
assert
!
(
t
.
is_err
(
)
)
;
let
mut
called
=
false
;
O
.
init
(
|
|
{
called
=
true
;
}
)
;
assert
!
(
called
)
;
O
.
init
(
|
|
{
}
)
;
}
#
[
test
]
fn
wait_for_force_to_finish
(
)
{
static
O
:
OnceCell
<
(
)
>
=
OnceCell
:
:
new
(
)
;
let
t
=
panic
:
:
catch_unwind
(
|
|
{
O
.
init
(
|
|
panic
!
(
)
)
;
}
)
;
assert
!
(
t
.
is_err
(
)
)
;
let
(
tx1
rx1
)
=
channel
(
)
;
let
(
tx2
rx2
)
=
channel
(
)
;
let
t1
=
thread
:
:
spawn
(
move
|
|
{
O
.
init
(
|
|
{
tx1
.
send
(
(
)
)
.
unwrap
(
)
;
rx2
.
recv
(
)
.
unwrap
(
)
;
}
)
;
}
)
;
rx1
.
recv
(
)
.
unwrap
(
)
;
let
t2
=
thread
:
:
spawn
(
|
|
{
let
mut
called
=
false
;
O
.
init
(
|
|
{
called
=
true
;
}
)
;
assert
!
(
!
called
)
;
}
)
;
tx2
.
send
(
(
)
)
.
unwrap
(
)
;
assert
!
(
t1
.
join
(
)
.
is_ok
(
)
)
;
assert
!
(
t2
.
join
(
)
.
is_ok
(
)
)
;
}
#
[
test
]
#
[
cfg
(
target_pointer_width
=
"
64
"
)
]
fn
test_size
(
)
{
use
std
:
:
mem
:
:
size_of
;
assert_eq
!
(
size_of
:
:
<
OnceCell
<
u32
>
>
(
)
4
*
size_of
:
:
<
u32
>
(
)
)
;
}
}
