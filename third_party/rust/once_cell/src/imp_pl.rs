use
std
:
:
{
cell
:
:
UnsafeCell
hint
panic
:
:
{
RefUnwindSafe
UnwindSafe
}
sync
:
:
atomic
:
:
{
AtomicU8
Ordering
}
}
;
pub
(
crate
)
struct
OnceCell
<
T
>
{
state
:
AtomicU8
value
:
UnsafeCell
<
Option
<
T
>
>
}
const
INCOMPLETE
:
u8
=
0x0
;
const
RUNNING
:
u8
=
0x1
;
const
COMPLETE
:
u8
=
0x2
;
unsafe
impl
<
T
:
Sync
+
Send
>
Sync
for
OnceCell
<
T
>
{
}
unsafe
impl
<
T
:
Send
>
Send
for
OnceCell
<
T
>
{
}
impl
<
T
:
RefUnwindSafe
+
UnwindSafe
>
RefUnwindSafe
for
OnceCell
<
T
>
{
}
impl
<
T
:
UnwindSafe
>
UnwindSafe
for
OnceCell
<
T
>
{
}
impl
<
T
>
OnceCell
<
T
>
{
pub
(
crate
)
const
fn
new
(
)
-
>
OnceCell
<
T
>
{
OnceCell
{
state
:
AtomicU8
:
:
new
(
INCOMPLETE
)
value
:
UnsafeCell
:
:
new
(
None
)
}
}
pub
(
crate
)
const
fn
with_value
(
value
:
T
)
-
>
OnceCell
<
T
>
{
OnceCell
{
state
:
AtomicU8
:
:
new
(
COMPLETE
)
value
:
UnsafeCell
:
:
new
(
Some
(
value
)
)
}
}
#
[
inline
]
pub
(
crate
)
fn
is_initialized
(
&
self
)
-
>
bool
{
self
.
state
.
load
(
Ordering
:
:
Acquire
)
=
=
COMPLETE
}
#
[
cold
]
pub
(
crate
)
fn
initialize
<
F
E
>
(
&
self
f
:
F
)
-
>
Result
<
(
)
E
>
where
F
:
FnOnce
(
)
-
>
Result
<
T
E
>
{
let
mut
f
=
Some
(
f
)
;
let
mut
res
:
Result
<
(
)
E
>
=
Ok
(
(
)
)
;
let
slot
:
*
mut
Option
<
T
>
=
self
.
value
.
get
(
)
;
initialize_inner
(
&
self
.
state
&
mut
|
|
{
let
f
=
unsafe
{
crate
:
:
take_unchecked
(
&
mut
f
)
}
;
match
f
(
)
{
Ok
(
value
)
=
>
unsafe
{
debug_assert
!
(
(
*
slot
)
.
is_none
(
)
)
;
*
slot
=
Some
(
value
)
;
true
}
Err
(
err
)
=
>
{
res
=
Err
(
err
)
;
false
}
}
}
)
;
res
}
#
[
cold
]
pub
(
crate
)
fn
wait
(
&
self
)
{
let
key
=
&
self
.
state
as
*
const
_
as
usize
;
unsafe
{
parking_lot_core
:
:
park
(
key
|
|
self
.
state
.
load
(
Ordering
:
:
Acquire
)
!
=
COMPLETE
|
|
(
)
|
_
_
|
(
)
parking_lot_core
:
:
DEFAULT_PARK_TOKEN
None
)
;
}
}
pub
(
crate
)
unsafe
fn
get_unchecked
(
&
self
)
-
>
&
T
{
debug_assert
!
(
self
.
is_initialized
(
)
)
;
let
slot
:
&
Option
<
T
>
=
&
*
self
.
value
.
get
(
)
;
match
slot
{
Some
(
value
)
=
>
value
None
=
>
{
debug_assert
!
(
false
)
;
hint
:
:
unreachable_unchecked
(
)
}
}
}
pub
(
crate
)
fn
get_mut
(
&
mut
self
)
-
>
Option
<
&
mut
T
>
{
let
slot
:
&
mut
Option
<
T
>
=
unsafe
{
&
mut
*
self
.
value
.
get
(
)
}
;
slot
.
as_mut
(
)
}
pub
(
crate
)
fn
into_inner
(
self
)
-
>
Option
<
T
>
{
self
.
value
.
into_inner
(
)
}
}
struct
Guard
<
'
a
>
{
state
:
&
'
a
AtomicU8
new_state
:
u8
}
impl
<
'
a
>
Drop
for
Guard
<
'
a
>
{
fn
drop
(
&
mut
self
)
{
self
.
state
.
store
(
self
.
new_state
Ordering
:
:
Release
)
;
unsafe
{
let
key
=
self
.
state
as
*
const
AtomicU8
as
usize
;
parking_lot_core
:
:
unpark_all
(
key
parking_lot_core
:
:
DEFAULT_UNPARK_TOKEN
)
;
}
}
}
#
[
inline
(
never
)
]
fn
initialize_inner
(
state
:
&
AtomicU8
init
:
&
mut
dyn
FnMut
(
)
-
>
bool
)
{
loop
{
let
exchange
=
state
.
compare_exchange_weak
(
INCOMPLETE
RUNNING
Ordering
:
:
Acquire
Ordering
:
:
Acquire
)
;
match
exchange
{
Ok
(
_
)
=
>
{
let
mut
guard
=
Guard
{
state
new_state
:
INCOMPLETE
}
;
if
init
(
)
{
guard
.
new_state
=
COMPLETE
;
}
return
;
}
Err
(
COMPLETE
)
=
>
return
Err
(
RUNNING
)
=
>
unsafe
{
let
key
=
state
as
*
const
AtomicU8
as
usize
;
parking_lot_core
:
:
park
(
key
|
|
state
.
load
(
Ordering
:
:
Relaxed
)
=
=
RUNNING
|
|
(
)
|
_
_
|
(
)
parking_lot_core
:
:
DEFAULT_PARK_TOKEN
None
)
;
}
Err
(
INCOMPLETE
)
=
>
(
)
Err
(
_
)
=
>
debug_assert
!
(
false
)
}
}
}
#
[
test
]
fn
test_size
(
)
{
use
std
:
:
mem
:
:
size_of
;
assert_eq
!
(
size_of
:
:
<
OnceCell
<
bool
>
>
(
)
1
*
size_of
:
:
<
bool
>
(
)
+
size_of
:
:
<
u8
>
(
)
)
;
}
