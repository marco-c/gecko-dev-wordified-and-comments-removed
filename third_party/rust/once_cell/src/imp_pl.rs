use
std
:
:
{
cell
:
:
UnsafeCell
hint
panic
:
:
{
RefUnwindSafe
UnwindSafe
}
sync
:
:
atomic
:
:
{
AtomicBool
Ordering
}
}
;
use
parking_lot
:
:
Mutex
;
pub
(
crate
)
struct
OnceCell
<
T
>
{
mutex
:
Mutex
<
(
)
>
is_initialized
:
AtomicBool
value
:
UnsafeCell
<
Option
<
T
>
>
}
unsafe
impl
<
T
:
Sync
+
Send
>
Sync
for
OnceCell
<
T
>
{
}
unsafe
impl
<
T
:
Send
>
Send
for
OnceCell
<
T
>
{
}
impl
<
T
:
RefUnwindSafe
+
UnwindSafe
>
RefUnwindSafe
for
OnceCell
<
T
>
{
}
impl
<
T
:
UnwindSafe
>
UnwindSafe
for
OnceCell
<
T
>
{
}
impl
<
T
>
OnceCell
<
T
>
{
pub
(
crate
)
const
fn
new
(
)
-
>
OnceCell
<
T
>
{
OnceCell
{
mutex
:
parking_lot
:
:
const_mutex
(
(
)
)
is_initialized
:
AtomicBool
:
:
new
(
false
)
value
:
UnsafeCell
:
:
new
(
None
)
}
}
#
[
inline
]
pub
(
crate
)
fn
is_initialized
(
&
self
)
-
>
bool
{
self
.
is_initialized
.
load
(
Ordering
:
:
Acquire
)
}
#
[
cold
]
pub
(
crate
)
fn
initialize
<
F
E
>
(
&
self
f
:
F
)
-
>
Result
<
(
)
E
>
where
F
:
FnOnce
(
)
-
>
Result
<
T
E
>
{
let
_guard
=
self
.
mutex
.
lock
(
)
;
if
!
self
.
is_initialized
(
)
{
let
value
=
f
(
)
?
;
let
slot
:
&
mut
Option
<
T
>
=
unsafe
{
&
mut
*
self
.
value
.
get
(
)
}
;
debug_assert
!
(
slot
.
is_none
(
)
)
;
*
slot
=
Some
(
value
)
;
self
.
is_initialized
.
store
(
true
Ordering
:
:
Release
)
;
}
Ok
(
(
)
)
}
pub
(
crate
)
unsafe
fn
get_unchecked
(
&
self
)
-
>
&
T
{
debug_assert
!
(
self
.
is_initialized
(
)
)
;
let
slot
:
&
Option
<
T
>
=
&
*
self
.
value
.
get
(
)
;
match
slot
{
Some
(
value
)
=
>
value
None
=
>
{
debug_assert
!
(
false
)
;
hint
:
:
unreachable_unchecked
(
)
}
}
}
pub
(
crate
)
fn
get_mut
(
&
mut
self
)
-
>
Option
<
&
mut
T
>
{
let
slot
:
&
mut
Option
<
T
>
=
unsafe
{
&
mut
*
self
.
value
.
get
(
)
}
;
slot
.
as_mut
(
)
}
pub
(
crate
)
fn
into_inner
(
self
)
-
>
Option
<
T
>
{
self
.
value
.
into_inner
(
)
}
}
#
[
test
]
fn
test_size
(
)
{
use
std
:
:
mem
:
:
size_of
;
assert_eq
!
(
size_of
:
:
<
OnceCell
<
bool
>
>
(
)
2
*
size_of
:
:
<
bool
>
(
)
+
size_of
:
:
<
u8
>
(
)
)
;
}
