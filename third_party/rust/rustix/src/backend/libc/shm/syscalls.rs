use
crate
:
:
ffi
:
:
CStr
;
use
crate
:
:
backend
:
:
c
;
use
crate
:
:
backend
:
:
conv
:
:
{
c_str
ret
ret_owned_fd
}
;
use
crate
:
:
fd
:
:
OwnedFd
;
use
crate
:
:
fs
:
:
Mode
;
use
crate
:
:
io
;
use
crate
:
:
shm
:
:
ShmOFlags
;
pub
(
crate
)
fn
shm_open
(
name
:
&
CStr
oflags
:
ShmOFlags
mode
:
Mode
)
-
>
io
:
:
Result
<
OwnedFd
>
{
#
[
cfg
(
apple
)
]
let
mode
:
c
:
:
c_uint
=
mode
.
bits
(
)
.
into
(
)
;
#
[
cfg
(
not
(
apple
)
)
]
let
mode
:
c
:
:
mode_t
=
mode
.
bits
(
)
as
_
;
unsafe
{
ret_owned_fd
(
c
:
:
shm_open
(
c_str
(
name
)
bitflags_bits
!
(
oflags
)
mode
)
)
}
}
pub
(
crate
)
fn
shm_unlink
(
name
:
&
CStr
)
-
>
io
:
:
Result
<
(
)
>
{
unsafe
{
ret
(
c
:
:
shm_unlink
(
c_str
(
name
)
)
)
}
}
