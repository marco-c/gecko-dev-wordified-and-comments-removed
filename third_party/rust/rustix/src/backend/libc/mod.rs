#
!
[
allow
(
clippy
:
:
undocumented_unsafe_blocks
)
]
#
!
[
allow
(
clippy
:
:
useless_conversion
)
]
mod
conv
;
#
[
cfg
(
windows
)
]
pub
(
crate
)
mod
fd
{
pub
use
crate
:
:
maybe_polyfill
:
:
os
:
:
windows
:
:
io
:
:
{
AsRawSocket
AsSocket
BorrowedSocket
as
BorrowedFd
FromRawSocket
IntoRawSocket
OwnedSocket
as
OwnedFd
RawSocket
as
RawFd
}
;
pub
(
crate
)
use
windows_sys
:
:
Win32
:
:
Networking
:
:
WinSock
:
:
SOCKET
as
LibcFd
;
pub
trait
AsRawFd
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
;
}
impl
<
T
:
AsRawSocket
>
AsRawFd
for
T
{
#
[
inline
]
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
as_raw_socket
(
)
}
}
pub
trait
IntoRawFd
{
fn
into_raw_fd
(
self
)
-
>
RawFd
;
}
impl
<
T
:
IntoRawSocket
>
IntoRawFd
for
T
{
#
[
inline
]
fn
into_raw_fd
(
self
)
-
>
RawFd
{
self
.
into_raw_socket
(
)
}
}
pub
trait
FromRawFd
{
unsafe
fn
from_raw_fd
(
raw_fd
:
RawFd
)
-
>
Self
;
}
impl
<
T
:
FromRawSocket
>
FromRawFd
for
T
{
#
[
inline
]
unsafe
fn
from_raw_fd
(
raw_fd
:
RawFd
)
-
>
Self
{
Self
:
:
from_raw_socket
(
raw_fd
)
}
}
pub
trait
AsFd
{
fn
as_fd
(
&
self
)
-
>
BorrowedFd
;
}
impl
<
T
:
AsSocket
>
AsFd
for
T
{
#
[
inline
]
fn
as_fd
(
&
self
)
-
>
BorrowedFd
{
self
.
as_socket
(
)
}
}
}
#
[
cfg
(
not
(
windows
)
)
]
pub
(
crate
)
mod
fd
{
pub
use
crate
:
:
maybe_polyfill
:
:
os
:
:
fd
:
:
{
AsFd
AsRawFd
BorrowedFd
FromRawFd
IntoRawFd
OwnedFd
RawFd
}
;
#
[
allow
(
unused_imports
)
]
pub
(
crate
)
use
RawFd
as
LibcFd
;
}
#
[
cfg_attr
(
windows
path
=
"
winsock_c
.
rs
"
)
]
pub
(
crate
)
mod
c
;
#
[
cfg
(
feature
=
"
event
"
)
]
pub
(
crate
)
mod
event
;
#
[
cfg
(
not
(
windows
)
)
]
#
[
cfg
(
feature
=
"
fs
"
)
]
pub
(
crate
)
mod
fs
;
pub
(
crate
)
mod
io
;
#
[
cfg
(
linux_kernel
)
]
#
[
cfg
(
feature
=
"
io_uring
"
)
]
pub
(
crate
)
mod
io_uring
;
#
[
cfg
(
not
(
any
(
windows
target_os
=
"
espidf
"
target_os
=
"
wasi
"
)
)
)
]
#
[
cfg
(
feature
=
"
mm
"
)
]
pub
(
crate
)
mod
mm
;
#
[
cfg
(
linux_kernel
)
]
#
[
cfg
(
feature
=
"
mount
"
)
]
pub
(
crate
)
mod
mount
;
#
[
cfg
(
linux_kernel
)
]
#
[
cfg
(
all
(
feature
=
"
fs
"
not
(
feature
=
"
mount
"
)
)
)
]
pub
(
crate
)
mod
mount
;
#
[
cfg
(
not
(
any
(
target_os
=
"
redox
"
target_os
=
"
wasi
"
)
)
)
]
#
[
cfg
(
feature
=
"
net
"
)
]
pub
(
crate
)
mod
net
;
#
[
cfg
(
not
(
any
(
windows
target_os
=
"
espidf
"
)
)
)
]
#
[
cfg
(
any
(
feature
=
"
param
"
feature
=
"
runtime
"
feature
=
"
time
"
target_arch
=
"
x86
"
)
)
]
pub
(
crate
)
mod
param
;
#
[
cfg
(
not
(
windows
)
)
]
#
[
cfg
(
feature
=
"
pipe
"
)
]
pub
(
crate
)
mod
pipe
;
#
[
cfg
(
not
(
windows
)
)
]
#
[
cfg
(
feature
=
"
process
"
)
]
pub
(
crate
)
mod
process
;
#
[
cfg
(
not
(
windows
)
)
]
#
[
cfg
(
not
(
target_os
=
"
wasi
"
)
)
]
#
[
cfg
(
feature
=
"
pty
"
)
]
pub
(
crate
)
mod
pty
;
#
[
cfg
(
not
(
windows
)
)
]
#
[
cfg
(
feature
=
"
rand
"
)
]
pub
(
crate
)
mod
rand
;
#
[
cfg
(
not
(
windows
)
)
]
#
[
cfg
(
not
(
target_os
=
"
wasi
"
)
)
]
#
[
cfg
(
feature
=
"
system
"
)
]
pub
(
crate
)
mod
system
;
#
[
cfg
(
not
(
windows
)
)
]
#
[
cfg
(
feature
=
"
termios
"
)
]
pub
(
crate
)
mod
termios
;
#
[
cfg
(
not
(
windows
)
)
]
#
[
cfg
(
feature
=
"
thread
"
)
]
pub
(
crate
)
mod
thread
;
#
[
cfg
(
not
(
any
(
windows
target_os
=
"
espidf
"
)
)
)
]
#
[
cfg
(
feature
=
"
time
"
)
]
pub
(
crate
)
mod
time
;
#
[
cfg
(
all
(
unix
target_env
=
"
gnu
"
)
)
]
pub
(
crate
)
fn
if_glibc_is_less_than_2_25
(
)
-
>
bool
{
weak
!
{
fn
getrandom
(
*
mut
c
:
:
c_void
c
:
:
size_t
c
:
:
c_uint
)
-
>
c
:
:
ssize_t
}
getrandom
.
get
(
)
.
is_none
(
)
}
#
[
cfg
(
any
(
feature
=
"
procfs
"
feature
=
"
process
"
feature
=
"
runtime
"
)
)
]
#
[
cfg
(
not
(
any
(
windows
target_os
=
"
wasi
"
)
)
)
]
pub
(
crate
)
mod
pid
;
#
[
cfg
(
any
(
feature
=
"
process
"
feature
=
"
thread
"
)
)
]
#
[
cfg
(
linux_kernel
)
]
pub
(
crate
)
mod
prctl
;
#
[
cfg
(
any
(
feature
=
"
fs
"
feature
=
"
thread
"
feature
=
"
process
"
)
)
]
#
[
cfg
(
not
(
any
(
windows
target_os
=
"
wasi
"
)
)
)
]
pub
(
crate
)
mod
ugid
;
#
[
cfg
(
bsd
)
]
const
MAX_IOV
:
usize
=
c
:
:
IOV_MAX
as
usize
;
#
[
cfg
(
any
(
linux_kernel
target_os
=
"
emscripten
"
target_os
=
"
nto
"
)
)
]
const
MAX_IOV
:
usize
=
c
:
:
UIO_MAXIOV
as
usize
;
#
[
cfg
(
not
(
any
(
bsd
linux_kernel
windows
target_os
=
"
emscripten
"
target_os
=
"
espidf
"
target_os
=
"
nto
"
target_os
=
"
horizon
"
)
)
)
]
const
MAX_IOV
:
usize
=
16
;
