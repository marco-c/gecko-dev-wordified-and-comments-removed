#
!
[
allow
(
unsafe_code
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
all
-
apis
"
)
allow
(
unused_imports
)
)
]
#
!
[
allow
(
clippy
:
:
too_many_arguments
)
]
#
[
cfg_attr
(
target_arch
=
"
aarch64
"
path
=
"
aarch64
.
rs
"
)
]
#
[
cfg_attr
(
all
(
target_arch
=
"
arm
"
not
(
thumb_mode
)
)
path
=
"
arm
.
rs
"
)
]
#
[
cfg_attr
(
all
(
target_arch
=
"
arm
"
thumb_mode
)
path
=
"
thumb
.
rs
"
)
]
#
[
cfg_attr
(
target_arch
=
"
mips
"
path
=
"
mips
.
rs
"
)
]
#
[
cfg_attr
(
target_arch
=
"
mips32r6
"
path
=
"
mips32r6
.
rs
"
)
]
#
[
cfg_attr
(
target_arch
=
"
mips64
"
path
=
"
mips64
.
rs
"
)
]
#
[
cfg_attr
(
target_arch
=
"
mips64r6
"
path
=
"
mips64r6
.
rs
"
)
]
#
[
cfg_attr
(
target_arch
=
"
powerpc64
"
path
=
"
powerpc64
.
rs
"
)
]
#
[
cfg_attr
(
target_arch
=
"
riscv64
"
path
=
"
riscv64
.
rs
"
)
]
#
[
cfg_attr
(
target_arch
=
"
x86
"
path
=
"
x86
.
rs
"
)
]
#
[
cfg_attr
(
target_arch
=
"
x86_64
"
path
=
"
x86_64
.
rs
"
)
]
pub
(
in
crate
:
:
backend
)
mod
asm
;
#
[
cfg
(
any
(
target_arch
=
"
arm
"
target_arch
=
"
aarch64
"
target_arch
=
"
mips
"
target_arch
=
"
mips32r6
"
target_arch
=
"
mips64
"
target_arch
=
"
mips64r6
"
target_arch
=
"
powerpc64
"
target_arch
=
"
riscv64
"
target_arch
=
"
x86_64
"
)
)
]
pub
(
in
crate
:
:
backend
)
use
self
:
:
asm
as
choose
;
#
[
cfg
(
target_arch
=
"
x86
"
)
]
pub
(
in
crate
:
:
backend
)
use
super
:
:
vdso_wrappers
:
:
x86_via_vdso
as
choose
;
macro_rules
!
syscall
{
(
nr
:
ident
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall0
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
)
}
;
(
nr
:
ident
a0
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall1
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall2
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall3
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
a3
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall4
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
a3
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
a3
:
expr
a4
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall5
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
a3
.
into
(
)
a4
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
a3
:
expr
a4
:
expr
a5
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall6
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
a3
.
into
(
)
a4
.
into
(
)
a5
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
a3
:
expr
a4
:
expr
a5
:
expr
a6
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall7
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
a3
.
into
(
)
a4
.
into
(
)
a5
.
into
(
)
a6
.
into
(
)
)
}
;
}
#
[
allow
(
unused_macros
)
]
macro_rules
!
syscall_always_asm
{
(
nr
:
ident
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
asm
:
:
syscall0
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
)
}
;
(
nr
:
ident
a0
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
asm
:
:
syscall1
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
asm
:
:
syscall2
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
asm
:
:
syscall3
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
a3
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
asm
:
:
syscall4
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
a3
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
a3
:
expr
a4
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
asm
:
:
syscall5
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
a3
.
into
(
)
a4
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
a3
:
expr
a4
:
expr
a5
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
asm
:
:
syscall6
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
a3
.
into
(
)
a4
.
into
(
)
a5
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
a3
:
expr
a4
:
expr
a5
:
expr
a6
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
asm
:
:
syscall7
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
a3
.
into
(
)
a4
.
into
(
)
a5
.
into
(
)
a6
.
into
(
)
)
}
;
}
macro_rules
!
syscall_readonly
{
(
nr
:
ident
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall0_readonly
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
)
}
;
(
nr
:
ident
a0
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall1_readonly
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall2_readonly
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall3_readonly
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
a3
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall4_readonly
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
a3
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
a3
:
expr
a4
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall5_readonly
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
a3
.
into
(
)
a4
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
a3
:
expr
a4
:
expr
a5
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall6_readonly
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
a3
.
into
(
)
a4
.
into
(
)
a5
.
into
(
)
)
}
;
(
nr
:
ident
a0
:
expr
a1
:
expr
a2
:
expr
a3
:
expr
a4
:
expr
a5
:
expr
a6
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall7_readonly
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
a1
.
into
(
)
a2
.
into
(
)
a3
.
into
(
)
a4
.
into
(
)
a5
.
into
(
)
a6
.
into
(
)
)
}
;
}
#
[
cfg
(
feature
=
"
runtime
"
)
]
macro_rules
!
syscall_noreturn
{
(
nr
:
ident
a0
:
expr
)
=
>
{
crate
:
:
backend
:
:
arch
:
:
choose
:
:
syscall1_noreturn
(
crate
:
:
backend
:
:
reg
:
:
nr
(
linux_raw_sys
:
:
general
:
:
nr
)
a0
.
into
(
)
)
}
;
}
