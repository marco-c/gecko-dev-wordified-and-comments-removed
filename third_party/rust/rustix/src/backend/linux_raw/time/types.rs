use
crate
:
:
backend
:
:
c
;
use
bitflags
:
:
bitflags
;
pub
type
Itimerspec
=
linux_raw_sys
:
:
general
:
:
__kernel_itimerspec
;
bitflags
!
{
/
/
/
TFD_
*
flags
for
use
with
[
timerfd_create
]
.
/
/
/
/
/
/
[
timerfd_create
]
:
crate
:
:
time
:
:
timerfd_create
#
[
repr
(
transparent
)
]
#
[
derive
(
Copy
Clone
Eq
PartialEq
Hash
Debug
)
]
pub
struct
TimerfdFlags
:
c
:
:
c_uint
{
/
/
/
TFD_NONBLOCK
const
NONBLOCK
=
linux_raw_sys
:
:
general
:
:
TFD_NONBLOCK
;
/
/
/
TFD_CLOEXEC
const
CLOEXEC
=
linux_raw_sys
:
:
general
:
:
TFD_CLOEXEC
;
/
/
/
<
https
:
/
/
docs
.
rs
/
bitflags
/
latest
/
bitflags
/
#
externally
-
defined
-
flags
>
const
_
=
!
0
;
}
}
bitflags
!
{
/
/
/
TFD_TIMER_
*
flags
for
use
with
[
timerfd_settime
]
.
/
/
/
/
/
/
[
timerfd_settime
]
:
crate
:
:
time
:
:
timerfd_settime
#
[
repr
(
transparent
)
]
#
[
derive
(
Copy
Clone
Eq
PartialEq
Hash
Debug
)
]
pub
struct
TimerfdTimerFlags
:
c
:
:
c_uint
{
/
/
/
TFD_TIMER_ABSTIME
const
ABSTIME
=
linux_raw_sys
:
:
general
:
:
TFD_TIMER_ABSTIME
;
/
/
/
TFD_TIMER_CANCEL_ON_SET
const
CANCEL_ON_SET
=
linux_raw_sys
:
:
general
:
:
TFD_TIMER_CANCEL_ON_SET
;
/
/
/
<
https
:
/
/
docs
.
rs
/
bitflags
/
latest
/
bitflags
/
#
externally
-
defined
-
flags
>
const
_
=
!
0
;
}
}
#
[
derive
(
Debug
Copy
Clone
Eq
PartialEq
Hash
)
]
#
[
repr
(
u32
)
]
#
[
non_exhaustive
]
pub
enum
TimerfdClockId
{
Realtime
=
linux_raw_sys
:
:
general
:
:
CLOCK_REALTIME
Monotonic
=
linux_raw_sys
:
:
general
:
:
CLOCK_MONOTONIC
Boottime
=
linux_raw_sys
:
:
general
:
:
CLOCK_BOOTTIME
RealtimeAlarm
=
linux_raw_sys
:
:
general
:
:
CLOCK_REALTIME_ALARM
BoottimeAlarm
=
linux_raw_sys
:
:
general
:
:
CLOCK_BOOTTIME_ALARM
}
