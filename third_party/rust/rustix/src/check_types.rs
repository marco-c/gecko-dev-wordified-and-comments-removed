#
!
[
allow
(
unused_macros
)
]
macro_rules
!
check_type
{
(
struct
:
ident
)
=
>
{
assert_eq_size
!
(
struct
c
:
:
struct
)
;
assert_eq_align
!
(
struct
c
:
:
struct
)
;
}
;
}
macro_rules
!
check_renamed_type
{
(
to
:
ident
from
:
ident
)
=
>
{
assert_eq_size
!
(
to
c
:
:
from
)
;
assert_eq_align
!
(
to
c
:
:
from
)
;
}
;
}
macro_rules
!
check_struct_field
{
(
struct
:
ident
field
:
ident
)
=
>
{
const_assert_eq
!
(
memoffset
:
:
offset_of
!
(
struct
field
)
memoffset
:
:
offset_of
!
(
c
:
:
struct
field
)
)
;
/
/
This
can
'
t
use
const_assert_eq
because
span_of
returns
a
/
/
Range
which
can
'
t
be
compared
in
const
contexts
.
assert_eq
!
(
memoffset
:
:
span_of
!
(
struct
field
)
memoffset
:
:
span_of
!
(
c
:
:
struct
field
)
)
;
}
;
}
macro_rules
!
check_struct_renamed_field
{
(
struct
:
ident
to
:
ident
from
:
ident
)
=
>
{
const_assert_eq
!
(
memoffset
:
:
offset_of
!
(
struct
to
)
memoffset
:
:
offset_of
!
(
c
:
:
struct
from
)
)
;
/
/
As
above
this
can
'
t
use
const_assert_eq
.
assert_eq
!
(
memoffset
:
:
span_of
!
(
struct
to
)
memoffset
:
:
span_of
!
(
c
:
:
struct
from
)
)
;
}
;
}
macro_rules
!
check_renamed_struct_renamed_field
{
(
to_struct
:
ident
from_struct
:
ident
to
:
ident
from
:
ident
)
=
>
{
const_assert_eq
!
(
memoffset
:
:
offset_of
!
(
to_struct
to
)
memoffset
:
:
offset_of
!
(
c
:
:
from_struct
from
)
)
;
/
/
As
above
this
can
'
t
use
const_assert_eq
.
assert_eq
!
(
memoffset
:
:
span_of
!
(
to_struct
to
)
memoffset
:
:
span_of
!
(
c
:
:
from_struct
from
)
)
;
}
;
}
macro_rules
!
check_struct
{
(
name
:
ident
(
field
:
ident
)
*
)
=
>
{
/
/
Check
the
size
and
alignment
.
check_type
!
(
name
)
;
/
/
Check
that
we
have
all
the
fields
.
if
false
{
#
[
allow
(
unreachable_code
)
]
let
_test
=
name
{
(
field
:
panic
!
(
)
)
*
}
;
}
/
/
Check
that
the
fields
have
the
right
sizes
and
offsets
.
(
check_struct_field
!
(
name
field
)
)
;
*
}
;
}
