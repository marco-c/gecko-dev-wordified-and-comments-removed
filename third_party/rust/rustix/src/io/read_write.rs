#
!
[
allow
(
unsafe_code
)
]
use
crate
:
:
buffer
:
:
split_init
;
use
crate
:
:
{
backend
io
}
;
use
backend
:
:
fd
:
:
AsFd
;
use
core
:
:
mem
:
:
MaybeUninit
;
#
[
cfg
(
not
(
windows
)
)
]
pub
use
crate
:
:
maybe_polyfill
:
:
io
:
:
{
IoSlice
IoSliceMut
}
;
#
[
cfg
(
linux_kernel
)
]
pub
use
backend
:
:
io
:
:
types
:
:
ReadWriteFlags
;
#
[
inline
]
pub
fn
read
<
Fd
:
AsFd
>
(
fd
:
Fd
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
unsafe
{
backend
:
:
io
:
:
syscalls
:
:
read
(
fd
.
as_fd
(
)
buf
.
as_mut_ptr
(
)
buf
.
len
(
)
)
}
}
#
[
inline
]
pub
fn
read_uninit
<
Fd
:
AsFd
>
(
fd
:
Fd
buf
:
&
mut
[
MaybeUninit
<
u8
>
]
)
-
>
io
:
:
Result
<
(
&
mut
[
u8
]
&
mut
[
MaybeUninit
<
u8
>
]
)
>
{
let
length
=
unsafe
{
backend
:
:
io
:
:
syscalls
:
:
read
(
fd
.
as_fd
(
)
buf
.
as_mut_ptr
(
)
as
*
mut
u8
buf
.
len
(
)
)
}
;
Ok
(
unsafe
{
split_init
(
buf
length
?
)
}
)
}
#
[
inline
]
pub
fn
write
<
Fd
:
AsFd
>
(
fd
:
Fd
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
io
:
:
syscalls
:
:
write
(
fd
.
as_fd
(
)
buf
)
}
#
[
inline
]
pub
fn
pread
<
Fd
:
AsFd
>
(
fd
:
Fd
buf
:
&
mut
[
u8
]
offset
:
u64
)
-
>
io
:
:
Result
<
usize
>
{
unsafe
{
backend
:
:
io
:
:
syscalls
:
:
pread
(
fd
.
as_fd
(
)
buf
.
as_mut_ptr
(
)
buf
.
len
(
)
offset
)
}
}
#
[
inline
]
pub
fn
pread_uninit
<
Fd
:
AsFd
>
(
fd
:
Fd
buf
:
&
mut
[
MaybeUninit
<
u8
>
]
offset
:
u64
)
-
>
io
:
:
Result
<
(
&
mut
[
u8
]
&
mut
[
MaybeUninit
<
u8
>
]
)
>
{
let
length
=
unsafe
{
backend
:
:
io
:
:
syscalls
:
:
pread
(
fd
.
as_fd
(
)
buf
.
as_mut_ptr
(
)
as
*
mut
u8
buf
.
len
(
)
offset
)
}
;
Ok
(
unsafe
{
split_init
(
buf
length
?
)
}
)
}
#
[
inline
]
pub
fn
pwrite
<
Fd
:
AsFd
>
(
fd
:
Fd
buf
:
&
[
u8
]
offset
:
u64
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
io
:
:
syscalls
:
:
pwrite
(
fd
.
as_fd
(
)
buf
offset
)
}
#
[
cfg
(
not
(
target_os
=
"
espidf
"
)
)
]
#
[
inline
]
pub
fn
readv
<
Fd
:
AsFd
>
(
fd
:
Fd
bufs
:
&
mut
[
IoSliceMut
<
'
_
>
]
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
io
:
:
syscalls
:
:
readv
(
fd
.
as_fd
(
)
bufs
)
}
#
[
cfg
(
not
(
target_os
=
"
espidf
"
)
)
]
#
[
inline
]
pub
fn
writev
<
Fd
:
AsFd
>
(
fd
:
Fd
bufs
:
&
[
IoSlice
<
'
_
>
]
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
io
:
:
syscalls
:
:
writev
(
fd
.
as_fd
(
)
bufs
)
}
#
[
cfg
(
not
(
any
(
target_os
=
"
espidf
"
target_os
=
"
haiku
"
target_os
=
"
nto
"
target_os
=
"
redox
"
target_os
=
"
solaris
"
target_os
=
"
vita
"
)
)
)
]
#
[
inline
]
pub
fn
preadv
<
Fd
:
AsFd
>
(
fd
:
Fd
bufs
:
&
mut
[
IoSliceMut
<
'
_
>
]
offset
:
u64
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
io
:
:
syscalls
:
:
preadv
(
fd
.
as_fd
(
)
bufs
offset
)
}
#
[
cfg
(
not
(
any
(
target_os
=
"
espidf
"
target_os
=
"
haiku
"
target_os
=
"
nto
"
target_os
=
"
redox
"
target_os
=
"
solaris
"
target_os
=
"
vita
"
)
)
)
]
#
[
inline
]
pub
fn
pwritev
<
Fd
:
AsFd
>
(
fd
:
Fd
bufs
:
&
[
IoSlice
<
'
_
>
]
offset
:
u64
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
io
:
:
syscalls
:
:
pwritev
(
fd
.
as_fd
(
)
bufs
offset
)
}
#
[
cfg
(
linux_kernel
)
]
#
[
inline
]
pub
fn
preadv2
<
Fd
:
AsFd
>
(
fd
:
Fd
bufs
:
&
mut
[
IoSliceMut
<
'
_
>
]
offset
:
u64
flags
:
ReadWriteFlags
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
io
:
:
syscalls
:
:
preadv2
(
fd
.
as_fd
(
)
bufs
offset
flags
)
}
#
[
cfg
(
linux_kernel
)
]
#
[
inline
]
pub
fn
pwritev2
<
Fd
:
AsFd
>
(
fd
:
Fd
bufs
:
&
[
IoSlice
<
'
_
>
]
offset
:
u64
flags
:
ReadWriteFlags
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
io
:
:
syscalls
:
:
pwritev2
(
fd
.
as_fd
(
)
bufs
offset
flags
)
}
