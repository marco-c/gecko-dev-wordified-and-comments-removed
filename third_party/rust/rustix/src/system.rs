#
!
[
allow
(
unsafe_code
)
]
use
crate
:
:
backend
;
#
[
cfg
(
target_os
=
"
linux
"
)
]
use
crate
:
:
backend
:
:
c
;
use
crate
:
:
ffi
:
:
CStr
;
#
[
cfg
(
not
(
any
(
target_os
=
"
espidf
"
target_os
=
"
emscripten
"
target_os
=
"
vita
"
)
)
)
]
use
crate
:
:
io
;
use
core
:
:
fmt
;
#
[
cfg
(
linux_kernel
)
]
pub
use
backend
:
:
system
:
:
types
:
:
Sysinfo
;
#
[
doc
(
alias
=
"
gethostname
"
)
]
#
[
inline
]
pub
fn
uname
(
)
-
>
Uname
{
Uname
(
backend
:
:
system
:
:
syscalls
:
:
uname
(
)
)
}
#
[
doc
(
alias
=
"
utsname
"
)
]
pub
struct
Uname
(
backend
:
:
system
:
:
types
:
:
RawUname
)
;
impl
Uname
{
#
[
inline
]
pub
fn
sysname
(
&
self
)
-
>
&
CStr
{
Self
:
:
to_cstr
(
self
.
0
.
sysname
.
as_ptr
(
)
.
cast
(
)
)
}
#
[
inline
]
pub
fn
nodename
(
&
self
)
-
>
&
CStr
{
Self
:
:
to_cstr
(
self
.
0
.
nodename
.
as_ptr
(
)
.
cast
(
)
)
}
#
[
inline
]
pub
fn
release
(
&
self
)
-
>
&
CStr
{
Self
:
:
to_cstr
(
self
.
0
.
release
.
as_ptr
(
)
.
cast
(
)
)
}
#
[
inline
]
pub
fn
version
(
&
self
)
-
>
&
CStr
{
Self
:
:
to_cstr
(
self
.
0
.
version
.
as_ptr
(
)
.
cast
(
)
)
}
#
[
inline
]
pub
fn
machine
(
&
self
)
-
>
&
CStr
{
Self
:
:
to_cstr
(
self
.
0
.
machine
.
as_ptr
(
)
.
cast
(
)
)
}
#
[
cfg
(
linux_kernel
)
]
#
[
inline
]
pub
fn
domainname
(
&
self
)
-
>
&
CStr
{
Self
:
:
to_cstr
(
self
.
0
.
domainname
.
as_ptr
(
)
.
cast
(
)
)
}
#
[
inline
]
fn
to_cstr
<
'
a
>
(
ptr
:
*
const
u8
)
-
>
&
'
a
CStr
{
unsafe
{
CStr
:
:
from_ptr
(
ptr
.
cast
(
)
)
}
}
}
impl
fmt
:
:
Debug
for
Uname
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
#
[
cfg
(
not
(
linux_kernel
)
)
]
{
write
!
(
fmt
"
{
:
?
}
{
:
?
}
{
:
?
}
{
:
?
}
{
:
?
}
"
self
.
sysname
(
)
self
.
nodename
(
)
self
.
release
(
)
self
.
version
(
)
self
.
machine
(
)
)
}
#
[
cfg
(
linux_kernel
)
]
{
write
!
(
fmt
"
{
:
?
}
{
:
?
}
{
:
?
}
{
:
?
}
{
:
?
}
{
:
?
}
"
self
.
sysname
(
)
self
.
nodename
(
)
self
.
release
(
)
self
.
version
(
)
self
.
machine
(
)
self
.
domainname
(
)
)
}
}
}
#
[
cfg
(
linux_kernel
)
]
#
[
inline
]
pub
fn
sysinfo
(
)
-
>
Sysinfo
{
backend
:
:
system
:
:
syscalls
:
:
sysinfo
(
)
}
#
[
cfg
(
not
(
any
(
target_os
=
"
emscripten
"
target_os
=
"
espidf
"
target_os
=
"
redox
"
target_os
=
"
vita
"
target_os
=
"
wasi
"
)
)
)
]
#
[
inline
]
pub
fn
sethostname
(
name
:
&
[
u8
]
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
system
:
:
syscalls
:
:
sethostname
(
name
)
}
#
[
cfg
(
target_os
=
"
linux
"
)
]
#
[
derive
(
Copy
Clone
Debug
Eq
PartialEq
)
]
#
[
repr
(
i32
)
]
#
[
non_exhaustive
]
pub
enum
RebootCommand
{
CadOff
=
c
:
:
LINUX_REBOOT_CMD_CAD_OFF
CadOn
=
c
:
:
LINUX_REBOOT_CMD_CAD_ON
Halt
=
c
:
:
LINUX_REBOOT_CMD_HALT
Kexec
=
c
:
:
LINUX_REBOOT_CMD_KEXEC
PowerOff
=
c
:
:
LINUX_REBOOT_CMD_POWER_OFF
Restart
=
c
:
:
LINUX_REBOOT_CMD_RESTART
SwSuspend
=
c
:
:
LINUX_REBOOT_CMD_SW_SUSPEND
}
#
[
cfg
(
target_os
=
"
linux
"
)
]
pub
fn
reboot
(
cmd
:
RebootCommand
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
system
:
:
syscalls
:
:
reboot
(
cmd
)
}
