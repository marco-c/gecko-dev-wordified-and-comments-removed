#
!
[
allow
(
unsafe_code
)
]
use
crate
:
:
{
backend
io
}
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
use
alloc
:
:
vec
:
:
Vec
;
#
[
cfg
(
linux_kernel
)
]
use
backend
:
:
process
:
:
types
:
:
RawCpuid
;
pub
use
crate
:
:
ugid
:
:
RawUid
;
pub
use
crate
:
:
ugid
:
:
RawGid
;
pub
use
crate
:
:
pid
:
:
RawPid
;
pub
use
crate
:
:
pid
:
:
Pid
;
pub
use
crate
:
:
ugid
:
:
{
Gid
Uid
}
;
#
[
cfg
(
linux_kernel
)
]
#
[
repr
(
transparent
)
]
#
[
derive
(
Copy
Clone
Eq
PartialEq
Debug
Hash
)
]
pub
struct
Cpuid
(
RawCpuid
)
;
#
[
cfg
(
linux_kernel
)
]
impl
Cpuid
{
#
[
inline
]
pub
const
unsafe
fn
from_raw
(
raw
:
RawCpuid
)
-
>
Self
{
Self
(
raw
)
}
#
[
inline
]
pub
const
fn
as_raw
(
self
)
-
>
RawCpuid
{
self
.
0
}
}
#
[
inline
]
#
[
must_use
]
pub
fn
getuid
(
)
-
>
Uid
{
backend
:
:
ugid
:
:
syscalls
:
:
getuid
(
)
}
#
[
inline
]
#
[
must_use
]
pub
fn
geteuid
(
)
-
>
Uid
{
backend
:
:
ugid
:
:
syscalls
:
:
geteuid
(
)
}
#
[
inline
]
#
[
must_use
]
pub
fn
getgid
(
)
-
>
Gid
{
backend
:
:
ugid
:
:
syscalls
:
:
getgid
(
)
}
#
[
inline
]
#
[
must_use
]
pub
fn
getegid
(
)
-
>
Gid
{
backend
:
:
ugid
:
:
syscalls
:
:
getegid
(
)
}
#
[
inline
]
#
[
must_use
]
pub
fn
getpid
(
)
-
>
Pid
{
backend
:
:
pid
:
:
syscalls
:
:
getpid
(
)
}
#
[
inline
]
#
[
must_use
]
pub
fn
getppid
(
)
-
>
Option
<
Pid
>
{
backend
:
:
process
:
:
syscalls
:
:
getppid
(
)
}
#
[
inline
]
pub
fn
getpgid
(
pid
:
Option
<
Pid
>
)
-
>
io
:
:
Result
<
Pid
>
{
backend
:
:
process
:
:
syscalls
:
:
getpgid
(
pid
)
}
#
[
inline
]
pub
fn
setpgid
(
pid
:
Option
<
Pid
>
pgid
:
Option
<
Pid
>
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
process
:
:
syscalls
:
:
setpgid
(
pid
pgid
)
}
#
[
inline
]
#
[
must_use
]
pub
fn
getpgrp
(
)
-
>
Pid
{
backend
:
:
process
:
:
syscalls
:
:
getpgrp
(
)
}
#
[
cfg
(
not
(
target_os
=
"
redox
"
)
)
]
#
[
inline
]
pub
fn
getsid
(
pid
:
Option
<
Pid
>
)
-
>
io
:
:
Result
<
Pid
>
{
backend
:
:
process
:
:
syscalls
:
:
getsid
(
pid
)
}
#
[
inline
]
pub
fn
setsid
(
)
-
>
io
:
:
Result
<
Pid
>
{
backend
:
:
process
:
:
syscalls
:
:
setsid
(
)
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
fn
getgroups
(
)
-
>
io
:
:
Result
<
Vec
<
Gid
>
>
{
let
mut
buffer
=
Vec
:
:
new
(
)
;
buffer
.
reserve
(
8
)
;
buffer
.
resize
(
buffer
.
capacity
(
)
Gid
:
:
ROOT
)
;
loop
{
let
ngroups
=
backend
:
:
process
:
:
syscalls
:
:
getgroups
(
&
mut
buffer
)
?
;
let
ngroups
=
ngroups
as
usize
;
assert
!
(
ngroups
<
=
buffer
.
len
(
)
)
;
if
ngroups
<
buffer
.
len
(
)
{
buffer
.
resize
(
ngroups
Gid
:
:
ROOT
)
;
return
Ok
(
buffer
)
;
}
buffer
.
reserve
(
1
)
;
buffer
.
resize
(
buffer
.
capacity
(
)
Gid
:
:
ROOT
)
;
}
}
