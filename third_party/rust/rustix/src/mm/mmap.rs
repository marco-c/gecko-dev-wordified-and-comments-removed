#
!
[
allow
(
unsafe_code
)
]
use
crate
:
:
{
backend
io
}
;
use
backend
:
:
fd
:
:
AsFd
;
use
core
:
:
ffi
:
:
c_void
;
#
[
cfg
(
linux_kernel
)
]
pub
use
backend
:
:
mm
:
:
types
:
:
MlockFlags
;
#
[
cfg
(
any
(
target_os
=
"
emscripten
"
target_os
=
"
linux
"
)
)
]
pub
use
backend
:
:
mm
:
:
types
:
:
MremapFlags
;
pub
use
backend
:
:
mm
:
:
types
:
:
{
MapFlags
MprotectFlags
ProtFlags
}
;
#
[
inline
]
pub
unsafe
fn
mmap
<
Fd
:
AsFd
>
(
ptr
:
*
mut
c_void
len
:
usize
prot
:
ProtFlags
flags
:
MapFlags
fd
:
Fd
offset
:
u64
)
-
>
io
:
:
Result
<
*
mut
c_void
>
{
backend
:
:
mm
:
:
syscalls
:
:
mmap
(
ptr
len
prot
flags
fd
.
as_fd
(
)
offset
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
mmap
"
)
]
pub
unsafe
fn
mmap_anonymous
(
ptr
:
*
mut
c_void
len
:
usize
prot
:
ProtFlags
flags
:
MapFlags
)
-
>
io
:
:
Result
<
*
mut
c_void
>
{
backend
:
:
mm
:
:
syscalls
:
:
mmap_anonymous
(
ptr
len
prot
flags
)
}
#
[
inline
]
pub
unsafe
fn
munmap
(
ptr
:
*
mut
c_void
len
:
usize
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
mm
:
:
syscalls
:
:
munmap
(
ptr
len
)
}
#
[
cfg
(
any
(
target_os
=
"
emscripten
"
target_os
=
"
linux
"
)
)
]
#
[
inline
]
pub
unsafe
fn
mremap
(
old_address
:
*
mut
c_void
old_size
:
usize
new_size
:
usize
flags
:
MremapFlags
)
-
>
io
:
:
Result
<
*
mut
c_void
>
{
backend
:
:
mm
:
:
syscalls
:
:
mremap
(
old_address
old_size
new_size
flags
)
}
#
[
cfg
(
any
(
target_os
=
"
emscripten
"
target_os
=
"
linux
"
)
)
]
#
[
inline
]
#
[
doc
(
alias
=
"
mremap
"
)
]
pub
unsafe
fn
mremap_fixed
(
old_address
:
*
mut
c_void
old_size
:
usize
new_size
:
usize
flags
:
MremapFlags
new_address
:
*
mut
c_void
)
-
>
io
:
:
Result
<
*
mut
c_void
>
{
backend
:
:
mm
:
:
syscalls
:
:
mremap_fixed
(
old_address
old_size
new_size
flags
new_address
)
}
#
[
inline
]
pub
unsafe
fn
mprotect
(
ptr
:
*
mut
c_void
len
:
usize
flags
:
MprotectFlags
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
mm
:
:
syscalls
:
:
mprotect
(
ptr
len
flags
)
}
#
[
inline
]
pub
unsafe
fn
mlock
(
ptr
:
*
mut
c_void
len
:
usize
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
mm
:
:
syscalls
:
:
mlock
(
ptr
len
)
}
#
[
cfg
(
linux_kernel
)
]
#
[
inline
]
#
[
doc
(
alias
=
"
mlock2
"
)
]
pub
unsafe
fn
mlock_with
(
ptr
:
*
mut
c_void
len
:
usize
flags
:
MlockFlags
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
mm
:
:
syscalls
:
:
mlock_with
(
ptr
len
flags
)
}
#
[
inline
]
pub
unsafe
fn
munlock
(
ptr
:
*
mut
c_void
len
:
usize
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
mm
:
:
syscalls
:
:
munlock
(
ptr
len
)
}
