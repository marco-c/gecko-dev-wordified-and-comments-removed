#
!
[
allow
(
unsafe_code
)
]
use
crate
:
:
backend
:
:
fd
:
:
{
AsFd
AsRawFd
}
;
use
crate
:
:
ffi
:
:
CStr
;
use
core
:
:
fmt
:
:
Write
;
use
itoa
:
:
{
Buffer
Integer
}
;
#
[
cfg
(
all
(
feature
=
"
std
"
unix
)
)
]
use
std
:
:
os
:
:
unix
:
:
ffi
:
:
OsStrExt
;
#
[
cfg
(
all
(
feature
=
"
std
"
target_os
=
"
wasi
"
)
)
]
use
std
:
:
os
:
:
wasi
:
:
ffi
:
:
OsStrExt
;
#
[
cfg
(
feature
=
"
std
"
)
]
use
{
core
:
:
fmt
std
:
:
ffi
:
:
OsStr
std
:
:
path
:
:
Path
}
;
#
[
derive
(
Clone
)
]
pub
struct
DecInt
{
buf
:
[
u8
;
20
+
1
]
len
:
usize
}
impl
DecInt
{
#
[
inline
]
pub
fn
new
<
Int
:
Integer
>
(
i
:
Int
)
-
>
Self
{
let
mut
me
=
DecIntWriter
(
Self
{
buf
:
[
0
;
20
+
1
]
len
:
0
}
)
;
let
mut
buf
=
Buffer
:
:
new
(
)
;
me
.
write_str
(
buf
.
format
(
i
)
)
.
unwrap
(
)
;
me
.
0
}
#
[
inline
]
pub
fn
from_fd
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
Self
{
Self
:
:
new
(
fd
.
as_fd
(
)
.
as_raw_fd
(
)
)
}
#
[
inline
]
pub
fn
as_str
(
&
self
)
-
>
&
str
{
unsafe
{
core
:
:
str
:
:
from_utf8_unchecked
(
self
.
as_bytes
(
)
)
}
}
#
[
inline
]
pub
fn
as_c_str
(
&
self
)
-
>
&
CStr
{
let
bytes_with_nul
=
&
self
.
buf
[
.
.
=
self
.
len
]
;
debug_assert
!
(
CStr
:
:
from_bytes_with_nul
(
bytes_with_nul
)
.
is_ok
(
)
)
;
unsafe
{
CStr
:
:
from_bytes_with_nul_unchecked
(
bytes_with_nul
)
}
}
#
[
inline
]
pub
fn
as_bytes
(
&
self
)
-
>
&
[
u8
]
{
&
self
.
buf
[
.
.
self
.
len
]
}
}
struct
DecIntWriter
(
DecInt
)
;
impl
core
:
:
fmt
:
:
Write
for
DecIntWriter
{
#
[
inline
]
fn
write_str
(
&
mut
self
s
:
&
str
)
-
>
core
:
:
fmt
:
:
Result
{
match
self
.
0
.
buf
.
get_mut
(
self
.
0
.
len
.
.
self
.
0
.
len
+
s
.
len
(
)
)
{
Some
(
slice
)
=
>
{
slice
.
copy_from_slice
(
s
.
as_bytes
(
)
)
;
self
.
0
.
len
+
=
s
.
len
(
)
;
Ok
(
(
)
)
}
None
=
>
Err
(
core
:
:
fmt
:
:
Error
)
}
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
AsRef
<
Path
>
for
DecInt
{
#
[
inline
]
fn
as_ref
(
&
self
)
-
>
&
Path
{
let
as_os_str
:
&
OsStr
=
OsStrExt
:
:
from_bytes
(
&
self
.
buf
[
.
.
self
.
len
]
)
;
Path
:
:
new
(
as_os_str
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
fmt
:
:
Debug
for
DecInt
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
as_str
(
)
.
fmt
(
f
)
}
}
