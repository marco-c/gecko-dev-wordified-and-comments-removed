#
!
[
allow
(
unsafe_code
)
]
use
crate
:
:
fd
:
:
OwnedFd
;
use
crate
:
:
{
backend
io
}
;
#
[
cfg
(
not
(
any
(
solarish
windows
target_os
=
"
espidf
"
target_os
=
"
haiku
"
target_os
=
"
redox
"
target_os
=
"
vita
"
target_os
=
"
wasi
"
)
)
)
]
use
backend
:
:
c
;
#
[
cfg
(
linux_kernel
)
]
use
backend
:
:
fd
:
:
AsFd
;
#
[
cfg
(
not
(
apple
)
)
]
pub
use
backend
:
:
pipe
:
:
types
:
:
PipeFlags
;
#
[
cfg
(
linux_kernel
)
]
pub
use
backend
:
:
pipe
:
:
types
:
:
{
IoSliceRaw
SpliceFlags
}
;
#
[
cfg
(
not
(
any
(
solarish
windows
target_os
=
"
espidf
"
target_os
=
"
haiku
"
target_os
=
"
hurd
"
target_os
=
"
redox
"
target_os
=
"
vita
"
target_os
=
"
wasi
"
)
)
)
]
pub
const
PIPE_BUF
:
usize
=
c
:
:
PIPE_BUF
;
#
[
inline
]
pub
fn
pipe
(
)
-
>
io
:
:
Result
<
(
OwnedFd
OwnedFd
)
>
{
backend
:
:
pipe
:
:
syscalls
:
:
pipe
(
)
}
#
[
cfg
(
not
(
any
(
apple
target_os
=
"
aix
"
target_os
=
"
espidf
"
target_os
=
"
haiku
"
target_os
=
"
nto
"
)
)
)
]
#
[
inline
]
#
[
doc
(
alias
=
"
pipe2
"
)
]
pub
fn
pipe_with
(
flags
:
PipeFlags
)
-
>
io
:
:
Result
<
(
OwnedFd
OwnedFd
)
>
{
backend
:
:
pipe
:
:
syscalls
:
:
pipe_with
(
flags
)
}
#
[
cfg
(
linux_kernel
)
]
#
[
inline
]
pub
fn
splice
<
FdIn
:
AsFd
FdOut
:
AsFd
>
(
fd_in
:
FdIn
off_in
:
Option
<
&
mut
u64
>
fd_out
:
FdOut
off_out
:
Option
<
&
mut
u64
>
len
:
usize
flags
:
SpliceFlags
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
pipe
:
:
syscalls
:
:
splice
(
fd_in
.
as_fd
(
)
off_in
fd_out
.
as_fd
(
)
off_out
len
flags
)
}
#
[
cfg
(
linux_kernel
)
]
#
[
inline
]
pub
unsafe
fn
vmsplice
<
PipeFd
:
AsFd
>
(
fd
:
PipeFd
bufs
:
&
[
IoSliceRaw
<
'
_
>
]
flags
:
SpliceFlags
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
pipe
:
:
syscalls
:
:
vmsplice
(
fd
.
as_fd
(
)
bufs
flags
)
}
#
[
cfg
(
linux_kernel
)
]
#
[
inline
]
pub
fn
tee
<
FdIn
:
AsFd
FdOut
:
AsFd
>
(
fd_in
:
FdIn
fd_out
:
FdOut
len
:
usize
flags
:
SpliceFlags
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
pipe
:
:
syscalls
:
:
tee
(
fd_in
.
as_fd
(
)
fd_out
.
as_fd
(
)
len
flags
)
}
#
[
cfg
(
linux_kernel
)
]
#
[
inline
]
pub
fn
fcntl_getpipe_size
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
pipe
:
:
syscalls
:
:
fcntl_getpipe_sz
(
fd
.
as_fd
(
)
)
}
#
[
cfg
(
linux_kernel
)
]
#
[
inline
]
pub
fn
fcntl_setpipe_size
<
Fd
:
AsFd
>
(
fd
:
Fd
size
:
usize
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
pipe
:
:
syscalls
:
:
fcntl_setpipe_sz
(
fd
.
as_fd
(
)
size
)
}
