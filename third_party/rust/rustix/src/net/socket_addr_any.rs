#
!
[
allow
(
unsafe_code
)
]
#
[
cfg
(
unix
)
]
use
crate
:
:
net
:
:
SocketAddrUnix
;
use
crate
:
:
net
:
:
{
AddressFamily
SocketAddrV4
SocketAddrV6
}
;
use
crate
:
:
{
backend
io
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
use
core
:
:
fmt
;
pub
use
backend
:
:
net
:
:
addr
:
:
SocketAddrStorage
;
#
[
derive
(
Clone
PartialEq
PartialOrd
Eq
Ord
Hash
)
]
#
[
doc
(
alias
=
"
sockaddr
"
)
]
#
[
non_exhaustive
]
pub
enum
SocketAddrAny
{
V4
(
SocketAddrV4
)
V6
(
SocketAddrV6
)
#
[
cfg
(
unix
)
]
Unix
(
SocketAddrUnix
)
}
impl
From
<
SocketAddrV4
>
for
SocketAddrAny
{
#
[
inline
]
fn
from
(
from
:
SocketAddrV4
)
-
>
Self
{
Self
:
:
V4
(
from
)
}
}
impl
From
<
SocketAddrV6
>
for
SocketAddrAny
{
#
[
inline
]
fn
from
(
from
:
SocketAddrV6
)
-
>
Self
{
Self
:
:
V6
(
from
)
}
}
#
[
cfg
(
unix
)
]
impl
From
<
SocketAddrUnix
>
for
SocketAddrAny
{
#
[
inline
]
fn
from
(
from
:
SocketAddrUnix
)
-
>
Self
{
Self
:
:
Unix
(
from
)
}
}
impl
SocketAddrAny
{
#
[
inline
]
pub
const
fn
address_family
(
&
self
)
-
>
AddressFamily
{
match
self
{
Self
:
:
V4
(
_
)
=
>
AddressFamily
:
:
INET
Self
:
:
V6
(
_
)
=
>
AddressFamily
:
:
INET6
#
[
cfg
(
unix
)
]
Self
:
:
Unix
(
_
)
=
>
AddressFamily
:
:
UNIX
}
}
pub
unsafe
fn
write
(
&
self
storage
:
*
mut
SocketAddrStorage
)
-
>
usize
{
backend
:
:
net
:
:
write_sockaddr
:
:
write_sockaddr
(
self
storage
)
}
pub
unsafe
fn
read
(
storage
:
*
const
SocketAddrStorage
len
:
usize
)
-
>
io
:
:
Result
<
Self
>
{
backend
:
:
net
:
:
read_sockaddr
:
:
read_sockaddr
(
storage
len
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
fmt
:
:
Debug
for
SocketAddrAny
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
self
{
Self
:
:
V4
(
v4
)
=
>
v4
.
fmt
(
fmt
)
Self
:
:
V6
(
v6
)
=
>
v6
.
fmt
(
fmt
)
#
[
cfg
(
unix
)
]
Self
:
:
Unix
(
unix
)
=
>
unix
.
fmt
(
fmt
)
}
}
}
