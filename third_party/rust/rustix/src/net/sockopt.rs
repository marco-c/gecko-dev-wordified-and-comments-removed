#
!
[
doc
(
alias
=
"
getsockopt
"
)
]
#
!
[
doc
(
alias
=
"
setsockopt
"
)
]
#
[
cfg
(
not
(
any
(
apple
solarish
windows
target_os
=
"
dragonfly
"
target_os
=
"
emscripten
"
target_os
=
"
espidf
"
target_os
=
"
haiku
"
target_os
=
"
netbsd
"
target_os
=
"
nto
"
target_os
=
"
openbsd
"
)
)
)
]
use
crate
:
:
net
:
:
AddressFamily
;
use
crate
:
:
net
:
:
{
Ipv4Addr
Ipv6Addr
SocketType
}
;
use
crate
:
:
{
backend
io
}
;
use
backend
:
:
c
;
use
backend
:
:
fd
:
:
AsFd
;
use
core
:
:
time
:
:
Duration
;
#
[
derive
(
Debug
Clone
Copy
Eq
PartialEq
Hash
)
]
#
[
repr
(
u32
)
]
pub
enum
Timeout
{
Recv
=
c
:
:
SO_RCVTIMEO
as
_
Send
=
c
:
:
SO_SNDTIMEO
as
_
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_TYPE
"
)
]
pub
fn
get_socket_type
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
SocketType
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_socket_type
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_REUSEADDR
"
)
]
pub
fn
set_socket_reuseaddr
<
Fd
:
AsFd
>
(
fd
:
Fd
value
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_socket_reuseaddr
(
fd
.
as_fd
(
)
value
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_BROADCAST
"
)
]
pub
fn
set_socket_broadcast
<
Fd
:
AsFd
>
(
fd
:
Fd
broadcast
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_socket_broadcast
(
fd
.
as_fd
(
)
broadcast
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_BROADCAST
"
)
]
pub
fn
get_socket_broadcast
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
bool
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_socket_broadcast
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_LINGER
"
)
]
pub
fn
set_socket_linger
<
Fd
:
AsFd
>
(
fd
:
Fd
linger
:
Option
<
Duration
>
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_socket_linger
(
fd
.
as_fd
(
)
linger
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_LINGER
"
)
]
pub
fn
get_socket_linger
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
Option
<
Duration
>
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_socket_linger
(
fd
.
as_fd
(
)
)
}
#
[
cfg
(
linux_kernel
)
]
#
[
inline
]
#
[
doc
(
alias
=
"
SO_PASSCRED
"
)
]
pub
fn
set_socket_passcred
<
Fd
:
AsFd
>
(
fd
:
Fd
passcred
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_socket_passcred
(
fd
.
as_fd
(
)
passcred
)
}
#
[
cfg
(
linux_kernel
)
]
#
[
inline
]
#
[
doc
(
alias
=
"
SO_PASSCRED
"
)
]
pub
fn
get_socket_passcred
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
bool
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_socket_passcred
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_RCVTIMEO
"
)
]
#
[
doc
(
alias
=
"
SO_SNDTIMEO
"
)
]
pub
fn
set_socket_timeout
<
Fd
:
AsFd
>
(
fd
:
Fd
id
:
Timeout
timeout
:
Option
<
Duration
>
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_socket_timeout
(
fd
.
as_fd
(
)
id
timeout
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_RCVTIMEO
"
)
]
#
[
doc
(
alias
=
"
SO_SNDTIMEO
"
)
]
pub
fn
get_socket_timeout
<
Fd
:
AsFd
>
(
fd
:
Fd
id
:
Timeout
)
-
>
io
:
:
Result
<
Option
<
Duration
>
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_socket_timeout
(
fd
.
as_fd
(
)
id
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_ERROR
"
)
]
pub
fn
get_socket_error
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
Result
<
(
)
io
:
:
Errno
>
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_socket_error
(
fd
.
as_fd
(
)
)
}
#
[
cfg
(
any
(
apple
target_os
=
"
freebsd
"
)
)
]
#
[
doc
(
alias
=
"
SO_NOSIGPIPE
"
)
]
#
[
inline
]
pub
fn
get_socket_nosigpipe
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
bool
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_socket_nosigpipe
(
fd
.
as_fd
(
)
)
}
#
[
cfg
(
any
(
apple
target_os
=
"
freebsd
"
)
)
]
#
[
doc
(
alias
=
"
SO_NOSIGPIPE
"
)
]
#
[
inline
]
pub
fn
set_socket_nosigpipe
<
Fd
:
AsFd
>
(
fd
:
Fd
val
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_socket_nosigpipe
(
fd
.
as_fd
(
)
val
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_KEEPALIVE
"
)
]
pub
fn
set_socket_keepalive
<
Fd
:
AsFd
>
(
fd
:
Fd
keepalive
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_socket_keepalive
(
fd
.
as_fd
(
)
keepalive
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_KEEPALIVE
"
)
]
pub
fn
get_socket_keepalive
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
bool
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_socket_keepalive
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_RCVBUF
"
)
]
pub
fn
set_socket_recv_buffer_size
<
Fd
:
AsFd
>
(
fd
:
Fd
size
:
usize
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_socket_recv_buffer_size
(
fd
.
as_fd
(
)
size
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_RCVBUF
"
)
]
pub
fn
get_socket_recv_buffer_size
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_socket_recv_buffer_size
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_SNDBUF
"
)
]
pub
fn
set_socket_send_buffer_size
<
Fd
:
AsFd
>
(
fd
:
Fd
size
:
usize
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_socket_send_buffer_size
(
fd
.
as_fd
(
)
size
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
SO_SNDBUF
"
)
]
pub
fn
get_socket_send_buffer_size
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
usize
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_socket_send_buffer_size
(
fd
.
as_fd
(
)
)
}
#
[
cfg
(
not
(
any
(
apple
solarish
windows
target_os
=
"
aix
"
target_os
=
"
dragonfly
"
target_os
=
"
emscripten
"
target_os
=
"
espidf
"
target_os
=
"
haiku
"
target_os
=
"
netbsd
"
target_os
=
"
nto
"
target_os
=
"
openbsd
"
)
)
)
]
#
[
inline
]
#
[
doc
(
alias
=
"
SO_DOMAIN
"
)
]
pub
fn
get_socket_domain
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
AddressFamily
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_socket_domain
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IP_TTL
"
)
]
pub
fn
set_ip_ttl
<
Fd
:
AsFd
>
(
fd
:
Fd
ttl
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_ip_ttl
(
fd
.
as_fd
(
)
ttl
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IP_TTL
"
)
]
pub
fn
get_ip_ttl
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
u32
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_ip_ttl
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IPV6_V6ONLY
"
)
]
pub
fn
set_ipv6_v6only
<
Fd
:
AsFd
>
(
fd
:
Fd
only_v6
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_ipv6_v6only
(
fd
.
as_fd
(
)
only_v6
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IPV6_V6ONLY
"
)
]
pub
fn
get_ipv6_v6only
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
bool
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_ipv6_v6only
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IP_MULTICAST_LOOP
"
)
]
pub
fn
set_ip_multicast_loop
<
Fd
:
AsFd
>
(
fd
:
Fd
multicast_loop
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_ip_multicast_loop
(
fd
.
as_fd
(
)
multicast_loop
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IP_MULTICAST_LOOP
"
)
]
pub
fn
get_ip_multicast_loop
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
bool
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_ip_multicast_loop
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IP_MULTICAST_TTL
"
)
]
pub
fn
set_ip_multicast_ttl
<
Fd
:
AsFd
>
(
fd
:
Fd
multicast_ttl
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_ip_multicast_ttl
(
fd
.
as_fd
(
)
multicast_ttl
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IP_MULTICAST_TTL
"
)
]
pub
fn
get_ip_multicast_ttl
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
u32
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_ip_multicast_ttl
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IPV6_MULTICAST_LOOP
"
)
]
pub
fn
set_ipv6_multicast_loop
<
Fd
:
AsFd
>
(
fd
:
Fd
multicast_loop
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_ipv6_multicast_loop
(
fd
.
as_fd
(
)
multicast_loop
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IPV6_MULTICAST_LOOP
"
)
]
pub
fn
get_ipv6_multicast_loop
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
bool
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_ipv6_multicast_loop
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IP_MULTICAST_TTL
"
)
]
pub
fn
set_ipv6_multicast_hops
<
Fd
:
AsFd
>
(
fd
:
Fd
multicast_hops
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_ipv6_multicast_hops
(
fd
.
as_fd
(
)
multicast_hops
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IPV6_UNICAST_HOPS
"
)
]
pub
fn
get_ipv6_unicast_hops
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
u8
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_ipv6_unicast_hops
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IPV6_UNICAST_HOPS
"
)
]
pub
fn
set_ipv6_unicast_hops
<
Fd
:
AsFd
>
(
fd
:
Fd
unicast_hops
:
Option
<
u8
>
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_ipv6_unicast_hops
(
fd
.
as_fd
(
)
unicast_hops
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IP_MULTICAST_TTL
"
)
]
pub
fn
get_ipv6_multicast_hops
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
u32
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_ipv6_multicast_hops
(
fd
.
as_fd
(
)
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IP_ADD_MEMBERSHIP
"
)
]
pub
fn
set_ip_add_membership
<
Fd
:
AsFd
>
(
fd
:
Fd
multiaddr
:
&
Ipv4Addr
interface
:
&
Ipv4Addr
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_ip_add_membership
(
fd
.
as_fd
(
)
multiaddr
interface
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IPV6_JOIN_GROUP
"
)
]
#
[
doc
(
alias
=
"
IPV6_ADD_MEMBERSHIP
"
)
]
pub
fn
set_ipv6_add_membership
<
Fd
:
AsFd
>
(
fd
:
Fd
multiaddr
:
&
Ipv6Addr
interface
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_ipv6_add_membership
(
fd
.
as_fd
(
)
multiaddr
interface
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IP_DROP_MEMBERSHIP
"
)
]
pub
fn
set_ip_drop_membership
<
Fd
:
AsFd
>
(
fd
:
Fd
multiaddr
:
&
Ipv4Addr
interface
:
&
Ipv4Addr
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_ip_drop_membership
(
fd
.
as_fd
(
)
multiaddr
interface
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
IPV6_LEAVE_GROUP
"
)
]
#
[
doc
(
alias
=
"
IPV6_DROP_MEMBERSHIP
"
)
]
pub
fn
set_ipv6_drop_membership
<
Fd
:
AsFd
>
(
fd
:
Fd
multiaddr
:
&
Ipv6Addr
interface
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_ipv6_drop_membership
(
fd
.
as_fd
(
)
multiaddr
interface
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
TCP_NODELAY
"
)
]
pub
fn
set_tcp_nodelay
<
Fd
:
AsFd
>
(
fd
:
Fd
nodelay
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
set_tcp_nodelay
(
fd
.
as_fd
(
)
nodelay
)
}
#
[
inline
]
#
[
doc
(
alias
=
"
TCP_NODELAY
"
)
]
pub
fn
get_tcp_nodelay
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
io
:
:
Result
<
bool
>
{
backend
:
:
net
:
:
syscalls
:
:
sockopt
:
:
get_tcp_nodelay
(
fd
.
as_fd
(
)
)
}
#
[
test
]
fn
test_sizes
(
)
{
use
c
:
:
c_int
;
assert_eq_size
!
(
Timeout
c_int
)
;
}
