use
crate
:
:
backend
:
:
c
;
use
crate
:
:
backend
:
:
event
:
:
syscalls
;
use
crate
:
:
fd
:
:
{
AsFd
AsRawFd
OwnedFd
}
;
use
crate
:
:
io
;
use
super
:
:
PollFlags
;
use
core
:
:
time
:
:
Duration
;
#
[
repr
(
transparent
)
]
pub
struct
Event
(
pub
(
crate
)
c
:
:
port_event
)
;
impl
Event
{
pub
fn
events
(
&
self
)
-
>
i32
{
self
.
0
.
portev_events
}
pub
fn
object
(
&
self
)
-
>
usize
{
self
.
0
.
portev_object
}
pub
fn
userdata
(
&
self
)
-
>
*
mut
c
:
:
c_void
{
self
.
0
.
portev_user
}
}
pub
fn
port_create
(
)
-
>
io
:
:
Result
<
OwnedFd
>
{
syscalls
:
:
port_create
(
)
}
pub
unsafe
fn
port_associate_fd
(
port
:
impl
AsFd
object
:
impl
AsRawFd
events
:
PollFlags
userdata
:
*
mut
c
:
:
c_void
)
-
>
io
:
:
Result
<
(
)
>
{
syscalls
:
:
port_associate
(
port
.
as_fd
(
)
c
:
:
PORT_SOURCE_FD
object
.
as_raw_fd
(
)
as
_
events
.
bits
(
)
as
_
userdata
.
cast
(
)
)
}
pub
unsafe
fn
port_dissociate_fd
(
port
:
impl
AsFd
object
:
impl
AsRawFd
)
-
>
io
:
:
Result
<
(
)
>
{
syscalls
:
:
port_dissociate
(
port
.
as_fd
(
)
c
:
:
PORT_SOURCE_FD
object
.
as_raw_fd
(
)
as
_
)
}
pub
fn
port_get
(
port
:
impl
AsFd
timeout
:
Option
<
Duration
>
)
-
>
io
:
:
Result
<
Event
>
{
let
mut
timeout
=
timeout
.
map
(
|
timeout
|
c
:
:
timespec
{
tv_sec
:
timeout
.
as_secs
(
)
.
try_into
(
)
.
unwrap
(
)
tv_nsec
:
timeout
.
subsec_nanos
(
)
as
_
}
)
;
syscalls
:
:
port_get
(
port
.
as_fd
(
)
timeout
.
as_mut
(
)
)
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
fn
port_getn
(
port
:
impl
AsFd
events
:
&
mut
Vec
<
Event
>
min_events
:
usize
timeout
:
Option
<
Duration
>
)
-
>
io
:
:
Result
<
(
)
>
{
events
.
clear
(
)
;
let
mut
timeout
=
timeout
.
map
(
|
timeout
|
c
:
:
timespec
{
tv_sec
:
timeout
.
as_secs
(
)
.
try_into
(
)
.
unwrap
(
)
tv_nsec
:
timeout
.
subsec_nanos
(
)
as
_
}
)
;
syscalls
:
:
port_getn
(
port
.
as_fd
(
)
timeout
.
as_mut
(
)
events
min_events
.
try_into
(
)
.
unwrap
(
)
)
}
pub
fn
port_send
(
port
:
impl
AsFd
events
:
i32
userdata
:
*
mut
c
:
:
c_void
)
-
>
io
:
:
Result
<
(
)
>
{
syscalls
:
:
port_send
(
port
.
as_fd
(
)
events
userdata
.
cast
(
)
)
}
