#
!
[
allow
(
unsafe_code
)
]
use
crate
:
:
backend
:
:
c
;
#
[
cfg
(
not
(
target_os
=
"
wasi
"
)
)
]
pub
type
RawGid
=
c
:
:
gid_t
;
#
[
cfg
(
not
(
target_os
=
"
wasi
"
)
)
]
pub
type
RawUid
=
c
:
:
uid_t
;
#
[
repr
(
transparent
)
]
#
[
derive
(
Copy
Clone
Eq
PartialEq
Debug
Hash
)
]
pub
struct
Uid
(
RawUid
)
;
#
[
repr
(
transparent
)
]
#
[
derive
(
Copy
Clone
Eq
PartialEq
Debug
Hash
)
]
pub
struct
Gid
(
RawGid
)
;
impl
Uid
{
pub
const
ROOT
:
Self
=
Self
(
0
)
;
#
[
inline
]
pub
const
unsafe
fn
from_raw
(
raw
:
RawUid
)
-
>
Self
{
Self
(
raw
)
}
#
[
inline
]
pub
const
fn
as_raw
(
self
)
-
>
RawUid
{
self
.
0
}
#
[
inline
]
pub
const
fn
is_root
(
self
)
-
>
bool
{
self
.
0
=
=
Self
:
:
ROOT
.
0
}
}
impl
Gid
{
pub
const
ROOT
:
Self
=
Self
(
0
)
;
#
[
inline
]
pub
const
unsafe
fn
from_raw
(
raw
:
RawGid
)
-
>
Self
{
Self
(
raw
)
}
#
[
inline
]
pub
const
fn
as_raw
(
self
)
-
>
RawGid
{
self
.
0
}
#
[
inline
]
pub
const
fn
is_root
(
self
)
-
>
bool
{
self
.
0
=
=
Self
:
:
ROOT
.
0
}
}
pub
(
crate
)
fn
translate_fchown_args
(
owner
:
Option
<
Uid
>
group
:
Option
<
Gid
>
)
-
>
(
RawUid
RawGid
)
{
let
ow
=
match
owner
{
Some
(
o
)
=
>
o
.
as_raw
(
)
None
=
>
!
0
}
;
let
gr
=
match
group
{
Some
(
g
)
=
>
g
.
as_raw
(
)
None
=
>
!
0
}
;
(
ow
gr
)
}
#
[
test
]
fn
test_sizes
(
)
{
assert_eq_size
!
(
RawUid
u32
)
;
assert_eq_size
!
(
RawGid
u32
)
;
}
