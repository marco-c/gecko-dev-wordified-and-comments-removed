use
crate
:
:
backend
;
use
backend
:
:
fd
:
:
AsFd
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
feature
=
"
procfs
"
)
)
]
#
[
cfg
(
not
(
any
(
target_os
=
"
fuchsia
"
target_os
=
"
wasi
"
)
)
)
]
use
{
crate
:
:
ffi
:
:
CString
crate
:
:
io
crate
:
:
path
:
:
SMALL_PATH_BUFFER_SIZE
alloc
:
:
vec
:
:
Vec
backend
:
:
fd
:
:
BorrowedFd
}
;
#
[
inline
]
pub
fn
isatty
<
Fd
:
AsFd
>
(
fd
:
Fd
)
-
>
bool
{
backend
:
:
termios
:
:
syscalls
:
:
isatty
(
fd
.
as_fd
(
)
)
}
#
[
cfg
(
not
(
any
(
target_os
=
"
fuchsia
"
target_os
=
"
wasi
"
)
)
)
]
#
[
cfg
(
all
(
feature
=
"
alloc
"
feature
=
"
procfs
"
)
)
]
#
[
cfg_attr
(
doc_cfg
doc
(
cfg
(
feature
=
"
procfs
"
)
)
)
]
#
[
doc
(
alias
=
"
ttyname_r
"
)
]
#
[
inline
]
pub
fn
ttyname
<
Fd
:
AsFd
B
:
Into
<
Vec
<
u8
>
>
>
(
dirfd
:
Fd
reuse
:
B
)
-
>
io
:
:
Result
<
CString
>
{
_ttyname
(
dirfd
.
as_fd
(
)
reuse
.
into
(
)
)
}
#
[
cfg
(
not
(
any
(
target_os
=
"
fuchsia
"
target_os
=
"
wasi
"
)
)
)
]
#
[
cfg
(
all
(
feature
=
"
alloc
"
feature
=
"
procfs
"
)
)
]
#
[
allow
(
unsafe_code
)
]
fn
_ttyname
(
dirfd
:
BorrowedFd
<
'
_
>
mut
buffer
:
Vec
<
u8
>
)
-
>
io
:
:
Result
<
CString
>
{
buffer
.
clear
(
)
;
buffer
.
reserve
(
SMALL_PATH_BUFFER_SIZE
)
;
loop
{
match
backend
:
:
termios
:
:
syscalls
:
:
ttyname
(
dirfd
buffer
.
spare_capacity_mut
(
)
)
{
Err
(
io
:
:
Errno
:
:
RANGE
)
=
>
{
buffer
.
reserve
(
buffer
.
capacity
(
)
+
1
)
;
}
Ok
(
len
)
=
>
{
unsafe
{
buffer
.
set_len
(
len
+
1
)
;
}
unsafe
{
return
Ok
(
CString
:
:
from_vec_with_nul_unchecked
(
buffer
)
)
;
}
}
Err
(
errno
)
=
>
return
Err
(
errno
)
}
}
}
