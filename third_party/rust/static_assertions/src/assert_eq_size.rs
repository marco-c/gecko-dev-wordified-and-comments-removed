#
[
macro_export
]
macro_rules
!
assert_eq_size
{
(
x
:
ty
(
xs
:
ty
)
+
(
)
?
)
=
>
{
const
_
:
fn
(
)
=
|
|
{
(
let
_
=
crate
:
:
_core
:
:
mem
:
:
transmute
:
:
<
x
xs
>
;
)
+
}
;
}
;
}
#
[
macro_export
]
macro_rules
!
assert_eq_size_ptr
{
(
x
:
expr
(
xs
:
expr
)
+
(
)
?
)
=
>
{
#
[
allow
(
unknown_lints
unsafe_code
forget_copy
useless_transmute
)
]
let
_
=
|
|
unsafe
{
use
crate
:
:
_core
:
:
{
mem
ptr
}
;
let
mut
copy
=
ptr
:
:
read
(
x
)
;
(
ptr
:
:
write
(
&
mut
copy
mem
:
:
transmute
(
ptr
:
:
read
(
xs
)
)
)
;
)
+
mem
:
:
forget
(
copy
)
;
}
;
}
}
#
[
macro_export
(
local_inner_macros
)
]
macro_rules
!
assert_eq_size_val
{
(
x
:
expr
(
xs
:
expr
)
+
(
)
?
)
=
>
{
assert_eq_size_ptr
!
(
&
x
(
&
xs
)
+
)
;
}
}
