#
[
macro_export
]
macro_rules
!
assert_type_eq_all
{
(
x
:
ty
(
xs
:
ty
)
+
(
)
*
)
=
>
{
const
_
:
fn
(
)
=
|
|
{
(
{
trait
TypeEq
{
type
This
:
?
Sized
;
}
impl
<
T
:
?
Sized
>
TypeEq
for
T
{
type
This
=
Self
;
}
fn
assert_type_eq_all
<
T
U
>
(
)
where
T
:
?
Sized
+
TypeEq
<
This
=
U
>
U
:
?
Sized
{
}
assert_type_eq_all
:
:
<
x
xs
>
(
)
;
}
)
+
}
;
}
;
}
#
[
macro_export
]
macro_rules
!
assert_type_ne_all
{
(
x
:
ty
(
y
:
ty
)
+
(
)
?
)
=
>
{
const
_
:
fn
(
)
=
|
|
{
trait
MutuallyExclusive
{
}
impl
MutuallyExclusive
for
x
{
}
(
impl
MutuallyExclusive
for
y
{
}
)
+
}
;
}
;
}
