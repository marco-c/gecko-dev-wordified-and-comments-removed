use
crate
:
:
util
:
:
{
prefilter
:
:
PrefilterI
search
:
:
{
MatchKind
Span
}
}
;
#
[
derive
(
Clone
Debug
)
]
pub
(
crate
)
struct
Teddy
{
#
[
cfg
(
not
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
)
]
_unused
:
(
)
#
[
cfg
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
]
searcher
:
aho_corasick
:
:
packed
:
:
Searcher
#
[
cfg
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
]
anchored_ac
:
aho_corasick
:
:
dfa
:
:
DFA
#
[
cfg
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
]
minimum_len
:
usize
}
impl
Teddy
{
pub
(
crate
)
fn
new
<
B
:
AsRef
<
[
u8
]
>
>
(
kind
:
MatchKind
needles
:
&
[
B
]
)
-
>
Option
<
Teddy
>
{
#
[
cfg
(
not
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
)
]
{
None
}
#
[
cfg
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
]
{
let
(
packed_match_kind
ac_match_kind
)
=
match
kind
{
MatchKind
:
:
LeftmostFirst
|
MatchKind
:
:
All
=
>
(
aho_corasick
:
:
packed
:
:
MatchKind
:
:
LeftmostFirst
aho_corasick
:
:
MatchKind
:
:
LeftmostFirst
)
}
;
let
minimum_len
=
needles
.
iter
(
)
.
map
(
|
n
|
n
.
as_ref
(
)
.
len
(
)
)
.
min
(
)
.
unwrap_or
(
0
)
;
let
packed
=
aho_corasick
:
:
packed
:
:
Config
:
:
new
(
)
.
match_kind
(
packed_match_kind
)
.
builder
(
)
.
extend
(
needles
)
.
build
(
)
?
;
let
anchored_ac
=
aho_corasick
:
:
dfa
:
:
DFA
:
:
builder
(
)
.
match_kind
(
ac_match_kind
)
.
start_kind
(
aho_corasick
:
:
StartKind
:
:
Anchored
)
.
prefilter
(
false
)
.
build
(
needles
)
.
ok
(
)
?
;
Some
(
Teddy
{
searcher
:
packed
anchored_ac
minimum_len
}
)
}
}
}
impl
PrefilterI
for
Teddy
{
fn
find
(
&
self
haystack
:
&
[
u8
]
span
:
Span
)
-
>
Option
<
Span
>
{
#
[
cfg
(
not
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
)
]
{
unreachable
!
(
)
}
#
[
cfg
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
]
{
let
ac_span
=
aho_corasick
:
:
Span
{
start
:
span
.
start
end
:
span
.
end
}
;
self
.
searcher
.
find_in
(
haystack
ac_span
)
.
map
(
|
m
|
Span
{
start
:
m
.
start
(
)
end
:
m
.
end
(
)
}
)
}
}
fn
prefix
(
&
self
haystack
:
&
[
u8
]
span
:
Span
)
-
>
Option
<
Span
>
{
#
[
cfg
(
not
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
)
]
{
unreachable
!
(
)
}
#
[
cfg
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
]
{
use
aho_corasick
:
:
automaton
:
:
Automaton
;
let
input
=
aho_corasick
:
:
Input
:
:
new
(
haystack
)
.
anchored
(
aho_corasick
:
:
Anchored
:
:
Yes
)
.
span
(
span
.
start
.
.
span
.
end
)
;
self
.
anchored_ac
.
try_find
(
&
input
)
.
expect
(
"
aho
-
corasick
DFA
should
never
fail
"
)
.
map
(
|
m
|
Span
{
start
:
m
.
start
(
)
end
:
m
.
end
(
)
}
)
}
}
fn
memory_usage
(
&
self
)
-
>
usize
{
#
[
cfg
(
not
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
)
]
{
unreachable
!
(
)
}
#
[
cfg
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
]
{
use
aho_corasick
:
:
automaton
:
:
Automaton
;
self
.
searcher
.
memory_usage
(
)
+
self
.
anchored_ac
.
memory_usage
(
)
}
}
fn
is_fast
(
&
self
)
-
>
bool
{
#
[
cfg
(
not
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
)
]
{
unreachable
!
(
)
}
#
[
cfg
(
feature
=
"
perf
-
literal
-
multisubstring
"
)
]
{
self
.
minimum_len
>
=
3
}
}
}
