#
[
test
]
fn
invalid_special_state
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
deserialize_sparse_crash
-
a1b839d899ced76d5d7d0f78f9edb7a421505838
"
)
;
let
_
=
fuzz_run
(
data
)
;
}
#
[
test
]
fn
transition_to_invalid_but_valid_state
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
deserialize_sparse_crash
-
dbb8172d3984e7e7d03f4b5f8bb86ecd1460eff9
"
)
;
let
_
=
fuzz_run
(
data
)
;
}
#
[
test
]
fn
start_state_is_not_match_state
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
deserialize_sparse_crash
-
0da59c0434eaf35e5a6b470fa9244bb79c72b000
"
)
;
let
_
=
fuzz_run
(
data
)
;
}
#
[
test
]
fn
start_state_has_valid_transitions
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
deserialize_sparse_crash
-
61fd8e3003bf9d99f6c1e5a8488727eefd234b98
"
)
;
let
_
=
fuzz_run
(
data
)
;
}
#
[
test
]
fn
match_state_inconsistency
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
deserialize_sparse_crash
-
c383ae07ec5e191422eadc492117439011816570
"
)
;
let
_
=
fuzz_run
(
data
)
;
}
#
[
test
]
fn
invalid_accelerators
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
deserialize_sparse_crash
-
d07703ceb94b10dcd9e4acb809f2051420449e2b
"
)
;
let
_
=
fuzz_run
(
data
)
;
}
#
[
test
]
fn
eoi_transition_to_quit_state
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
deserialize_sparse_crash
-
18cfc246f2ddfc3dfc92b0c7893178c7cf65efa9
"
)
;
let
_
=
fuzz_run
(
data
)
;
}
fn
fuzz_run
(
given_data
:
&
[
u8
]
)
-
>
Option
<
(
)
>
{
use
regex_automata
:
:
dfa
:
:
Automaton
;
if
given_data
.
len
(
)
<
2
{
return
None
;
}
let
haystack_len
=
usize
:
:
from
(
given_data
[
0
]
)
;
let
haystack
=
given_data
.
get
(
1
.
.
1
+
haystack_len
)
?
;
let
given_dfa_bytes
=
given_data
.
get
(
1
+
haystack_len
.
.
)
?
;
let
label
=
"
rust
-
regex
-
automata
-
dfa
-
sparse
\
x00
\
x00
"
;
assert_eq
!
(
0
label
.
len
(
)
%
4
)
;
let
endianness_check
=
0xFEFFu32
.
to_ne_bytes
(
)
.
to_vec
(
)
;
let
version_check
=
2u32
.
to_ne_bytes
(
)
.
to_vec
(
)
;
let
mut
dfa_bytes
:
Vec
<
u8
>
=
vec
!
[
]
;
dfa_bytes
.
extend
(
label
.
as_bytes
(
)
)
;
dfa_bytes
.
extend
(
&
endianness_check
)
;
dfa_bytes
.
extend
(
&
version_check
)
;
dfa_bytes
.
extend
(
given_dfa_bytes
)
;
let
(
dfa
_
)
=
regex_automata
:
:
dfa
:
:
sparse
:
:
DFA
:
:
from_bytes
(
&
dfa_bytes
)
.
ok
(
)
?
;
let
_
=
dfa
.
try_search_fwd
(
&
regex_automata
:
:
Input
:
:
new
(
haystack
)
)
;
Some
(
(
)
)
}
