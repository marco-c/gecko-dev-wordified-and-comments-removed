#
[
test
]
fn
invalid_byte_classes
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
deserialize_dense_crash
-
9486fb7c8a93b12c12a62166b43d31640c0208a9
"
)
;
let
_
=
fuzz_run
(
data
)
;
}
#
[
test
]
fn
invalid_byte_classes_min
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
deserialize_dense_minimized
-
from
-
9486fb7c8a93b12c12a62166b43d31640c0208a9
"
)
;
let
_
=
fuzz_run
(
data
)
;
}
fn
fuzz_run
(
given_data
:
&
[
u8
]
)
-
>
Option
<
(
)
>
{
use
regex_automata
:
:
dfa
:
:
Automaton
;
if
given_data
.
len
(
)
<
2
{
return
None
;
}
let
haystack_len
=
usize
:
:
from
(
given_data
[
0
]
)
;
let
haystack
=
given_data
.
get
(
1
.
.
1
+
haystack_len
)
?
;
let
given_dfa_bytes
=
given_data
.
get
(
1
+
haystack_len
.
.
)
?
;
let
label
=
"
rust
-
regex
-
automata
-
dfa
-
dense
\
x00
\
x00
\
x00
"
;
assert_eq
!
(
0
label
.
len
(
)
%
4
)
;
let
endianness_check
=
0xFEFFu32
.
to_ne_bytes
(
)
.
to_vec
(
)
;
let
version_check
=
2u32
.
to_ne_bytes
(
)
.
to_vec
(
)
;
let
mut
dfa_bytes
:
Vec
<
u8
>
=
vec
!
[
]
;
dfa_bytes
.
extend
(
label
.
as_bytes
(
)
)
;
dfa_bytes
.
extend
(
&
endianness_check
)
;
dfa_bytes
.
extend
(
&
version_check
)
;
dfa_bytes
.
extend
(
given_dfa_bytes
)
;
let
(
dfa
_
)
=
regex_automata
:
:
dfa
:
:
dense
:
:
DFA
:
:
from_bytes
(
&
dfa_bytes
)
.
ok
(
)
?
;
let
_
=
dfa
.
try_search_fwd
(
&
regex_automata
:
:
Input
:
:
new
(
haystack
)
)
;
Some
(
(
)
)
}
