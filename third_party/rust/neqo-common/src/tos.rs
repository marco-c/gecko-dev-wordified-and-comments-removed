use
std
:
:
fmt
:
:
Debug
;
use
enum_map
:
:
Enum
;
#
[
derive
(
Copy
Clone
PartialEq
Eq
Enum
Default
Debug
)
]
#
[
repr
(
u8
)
]
pub
enum
IpTosEcn
{
#
[
default
]
NotEct
=
0b00
Ect1
=
0b01
Ect0
=
0b10
Ce
=
0b11
}
impl
From
<
IpTosEcn
>
for
u8
{
fn
from
(
v
:
IpTosEcn
)
-
>
Self
{
v
as
u8
}
}
impl
From
<
u8
>
for
IpTosEcn
{
fn
from
(
v
:
u8
)
-
>
Self
{
match
v
&
0b11
{
0b00
=
>
IpTosEcn
:
:
NotEct
0b01
=
>
IpTosEcn
:
:
Ect1
0b10
=
>
IpTosEcn
:
:
Ect0
0b11
=
>
IpTosEcn
:
:
Ce
_
=
>
unreachable
!
(
)
}
}
}
#
[
derive
(
Copy
Clone
PartialEq
Eq
Enum
Default
Debug
)
]
#
[
repr
(
u8
)
]
pub
enum
IpTosDscp
{
#
[
default
]
Cs0
=
0b0000_0000
Cs1
=
0b0010_0000
Cs2
=
0b0100_0000
Cs3
=
0b0110_0000
Cs4
=
0b1000_0000
Cs5
=
0b1010_0000
Cs6
=
0b1100_0000
Cs7
=
0b1110_0000
Af11
=
0b0010_1000
Af12
=
0b0011_0000
Af13
=
0b0011_1000
Af21
=
0b0100_1000
Af22
=
0b0101_0000
Af23
=
0b0101_1000
Af31
=
0b0110_1000
Af32
=
0b0111_0000
Af33
=
0b0111_1000
Af41
=
0b1000_1000
Af42
=
0b1001_0000
Af43
=
0b1001_1000
Ef
=
0b1011_1000
VoiceAdmit
=
0b1011_0000
Le
=
0b0000_0100
}
impl
From
<
IpTosDscp
>
for
u8
{
fn
from
(
v
:
IpTosDscp
)
-
>
Self
{
v
as
u8
}
}
impl
From
<
u8
>
for
IpTosDscp
{
fn
from
(
v
:
u8
)
-
>
Self
{
match
v
&
0b1111_1100
{
0b0000_0000
=
>
IpTosDscp
:
:
Cs0
0b0010_0000
=
>
IpTosDscp
:
:
Cs1
0b0100_0000
=
>
IpTosDscp
:
:
Cs2
0b0110_0000
=
>
IpTosDscp
:
:
Cs3
0b1000_0000
=
>
IpTosDscp
:
:
Cs4
0b1010_0000
=
>
IpTosDscp
:
:
Cs5
0b1100_0000
=
>
IpTosDscp
:
:
Cs6
0b1110_0000
=
>
IpTosDscp
:
:
Cs7
0b0010_1000
=
>
IpTosDscp
:
:
Af11
0b0011_0000
=
>
IpTosDscp
:
:
Af12
0b0011_1000
=
>
IpTosDscp
:
:
Af13
0b0100_1000
=
>
IpTosDscp
:
:
Af21
0b0101_0000
=
>
IpTosDscp
:
:
Af22
0b0101_1000
=
>
IpTosDscp
:
:
Af23
0b0110_1000
=
>
IpTosDscp
:
:
Af31
0b0111_0000
=
>
IpTosDscp
:
:
Af32
0b0111_1000
=
>
IpTosDscp
:
:
Af33
0b1000_1000
=
>
IpTosDscp
:
:
Af41
0b1001_0000
=
>
IpTosDscp
:
:
Af42
0b1001_1000
=
>
IpTosDscp
:
:
Af43
0b1011_1000
=
>
IpTosDscp
:
:
Ef
0b1011_0000
=
>
IpTosDscp
:
:
VoiceAdmit
0b0000_0100
=
>
IpTosDscp
:
:
Le
_
=
>
unreachable
!
(
)
}
}
}
#
[
allow
(
clippy
:
:
module_name_repetitions
)
]
#
[
derive
(
Copy
Clone
PartialEq
Eq
)
]
pub
struct
IpTos
(
u8
)
;
impl
From
<
IpTosEcn
>
for
IpTos
{
fn
from
(
v
:
IpTosEcn
)
-
>
Self
{
Self
(
u8
:
:
from
(
v
)
)
}
}
impl
From
<
IpTosDscp
>
for
IpTos
{
fn
from
(
v
:
IpTosDscp
)
-
>
Self
{
Self
(
u8
:
:
from
(
v
)
)
}
}
impl
From
<
(
IpTosDscp
IpTosEcn
)
>
for
IpTos
{
fn
from
(
v
:
(
IpTosDscp
IpTosEcn
)
)
-
>
Self
{
Self
(
u8
:
:
from
(
v
.
0
)
|
u8
:
:
from
(
v
.
1
)
)
}
}
impl
From
<
IpTos
>
for
u8
{
fn
from
(
v
:
IpTos
)
-
>
Self
{
v
.
0
}
}
impl
Debug
for
IpTos
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
std
:
:
fmt
:
:
Result
{
f
.
debug_tuple
(
"
IpTos
"
)
.
field
(
&
IpTosDscp
:
:
from
(
self
.
0
&
0xfc
)
)
.
field
(
&
IpTosEcn
:
:
from
(
self
.
0
&
0x3
)
)
.
finish
(
)
}
}
impl
Default
for
IpTos
{
fn
default
(
)
-
>
Self
{
(
IpTosDscp
:
:
default
(
)
IpTosEcn
:
:
default
(
)
)
.
into
(
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
iptosecn_into_u8
(
)
{
assert_eq
!
(
u8
:
:
from
(
IpTosEcn
:
:
NotEct
)
0b00
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosEcn
:
:
Ect1
)
0b01
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosEcn
:
:
Ect0
)
0b10
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosEcn
:
:
Ce
)
0b11
)
;
}
#
[
test
]
fn
u8_into_iptosecn
(
)
{
assert_eq
!
(
IpTosEcn
:
:
from
(
0b00
)
IpTosEcn
:
:
NotEct
)
;
assert_eq
!
(
IpTosEcn
:
:
from
(
0b01
)
IpTosEcn
:
:
Ect1
)
;
assert_eq
!
(
IpTosEcn
:
:
from
(
0b10
)
IpTosEcn
:
:
Ect0
)
;
assert_eq
!
(
IpTosEcn
:
:
from
(
0b11
)
IpTosEcn
:
:
Ce
)
;
}
#
[
test
]
fn
iptosdscp_into_u8
(
)
{
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Cs0
)
0b0000_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Cs1
)
0b0010_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Cs2
)
0b0100_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Cs3
)
0b0110_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Cs4
)
0b1000_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Cs5
)
0b1010_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Cs6
)
0b1100_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Cs7
)
0b1110_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Af11
)
0b0010_1000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Af12
)
0b0011_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Af13
)
0b0011_1000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Af21
)
0b0100_1000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Af22
)
0b0101_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Af23
)
0b0101_1000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Af31
)
0b0110_1000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Af32
)
0b0111_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Af33
)
0b0111_1000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Af41
)
0b1000_1000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Af42
)
0b1001_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Af43
)
0b1001_1000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Ef
)
0b1011_1000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
VoiceAdmit
)
0b1011_0000
)
;
assert_eq
!
(
u8
:
:
from
(
IpTosDscp
:
:
Le
)
0b0000_0100
)
;
}
#
[
test
]
fn
u8_into_iptosdscp
(
)
{
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0000_0000
)
IpTosDscp
:
:
Cs0
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0010_0000
)
IpTosDscp
:
:
Cs1
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0100_0000
)
IpTosDscp
:
:
Cs2
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0110_0000
)
IpTosDscp
:
:
Cs3
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b1000_0000
)
IpTosDscp
:
:
Cs4
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b1010_0000
)
IpTosDscp
:
:
Cs5
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b1100_0000
)
IpTosDscp
:
:
Cs6
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b1110_0000
)
IpTosDscp
:
:
Cs7
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0010_1000
)
IpTosDscp
:
:
Af11
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0011_0000
)
IpTosDscp
:
:
Af12
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0011_1000
)
IpTosDscp
:
:
Af13
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0100_1000
)
IpTosDscp
:
:
Af21
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0101_0000
)
IpTosDscp
:
:
Af22
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0101_1000
)
IpTosDscp
:
:
Af23
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0110_1000
)
IpTosDscp
:
:
Af31
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0111_0000
)
IpTosDscp
:
:
Af32
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0111_1000
)
IpTosDscp
:
:
Af33
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b1000_1000
)
IpTosDscp
:
:
Af41
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b1001_0000
)
IpTosDscp
:
:
Af42
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b1001_1000
)
IpTosDscp
:
:
Af43
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b1011_1000
)
IpTosDscp
:
:
Ef
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b1011_0000
)
IpTosDscp
:
:
VoiceAdmit
)
;
assert_eq
!
(
IpTosDscp
:
:
from
(
0b0000_0100
)
IpTosDscp
:
:
Le
)
;
}
#
[
test
]
fn
iptosecn_into_iptos
(
)
{
let
ecn
=
IpTosEcn
:
:
default
(
)
;
let
iptos_ecn
:
IpTos
=
ecn
.
into
(
)
;
assert_eq
!
(
u8
:
:
from
(
iptos_ecn
)
ecn
as
u8
)
;
}
#
[
test
]
fn
iptosdscp_into_iptos
(
)
{
let
dscp
=
IpTosDscp
:
:
default
(
)
;
let
iptos_dscp
:
IpTos
=
dscp
.
into
(
)
;
assert_eq
!
(
u8
:
:
from
(
iptos_dscp
)
dscp
as
u8
)
;
}
}
