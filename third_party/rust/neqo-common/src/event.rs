use
std
:
:
marker
:
:
PhantomData
;
pub
trait
Provider
{
type
Event
;
#
[
must_use
]
fn
next_event
(
&
mut
self
)
-
>
Option
<
Self
:
:
Event
>
;
#
[
must_use
]
fn
has_events
(
&
self
)
-
>
bool
;
fn
events
(
&
'
_
mut
self
)
-
>
Iter
<
'
_
Self
Self
:
:
Event
>
{
Iter
:
:
new
(
self
)
}
}
pub
struct
Iter
<
'
a
P
E
>
where
P
:
?
Sized
{
p
:
&
'
a
mut
P
_e
:
PhantomData
<
E
>
}
impl
<
'
a
P
E
>
Iter
<
'
a
P
E
>
where
P
:
Provider
<
Event
=
E
>
+
?
Sized
{
fn
new
(
p
:
&
'
a
mut
P
)
-
>
Self
{
Self
{
p
_e
:
PhantomData
}
}
}
impl
<
P
E
>
Iterator
for
Iter
<
'
_
P
E
>
where
P
:
Provider
<
Event
=
E
>
{
type
Item
=
E
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
p
.
next_event
(
)
}
}
