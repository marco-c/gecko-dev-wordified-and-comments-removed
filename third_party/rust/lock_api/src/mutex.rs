use
core
:
:
cell
:
:
UnsafeCell
;
use
core
:
:
fmt
;
use
core
:
:
marker
:
:
PhantomData
;
use
core
:
:
mem
;
use
core
:
:
ops
:
:
{
Deref
DerefMut
}
;
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
use
alloc
:
:
sync
:
:
Arc
;
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
use
core
:
:
mem
:
:
ManuallyDrop
;
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
use
core
:
:
ptr
;
#
[
cfg
(
feature
=
"
owning_ref
"
)
]
use
owning_ref
:
:
StableAddress
;
#
[
cfg
(
feature
=
"
serde
"
)
]
use
serde
:
:
{
Deserialize
Deserializer
Serialize
Serializer
}
;
pub
unsafe
trait
RawMutex
{
#
[
allow
(
clippy
:
:
declare_interior_mutable_const
)
]
const
INIT
:
Self
;
type
GuardMarker
;
fn
lock
(
&
self
)
;
fn
try_lock
(
&
self
)
-
>
bool
;
unsafe
fn
unlock
(
&
self
)
;
#
[
inline
]
fn
is_locked
(
&
self
)
-
>
bool
{
let
acquired_lock
=
self
.
try_lock
(
)
;
if
acquired_lock
{
unsafe
{
self
.
unlock
(
)
;
}
}
!
acquired_lock
}
}
pub
unsafe
trait
RawMutexFair
:
RawMutex
{
unsafe
fn
unlock_fair
(
&
self
)
;
unsafe
fn
bump
(
&
self
)
{
self
.
unlock_fair
(
)
;
self
.
lock
(
)
;
}
}
pub
unsafe
trait
RawMutexTimed
:
RawMutex
{
type
Duration
;
type
Instant
;
fn
try_lock_for
(
&
self
timeout
:
Self
:
:
Duration
)
-
>
bool
;
fn
try_lock_until
(
&
self
timeout
:
Self
:
:
Instant
)
-
>
bool
;
}
pub
struct
Mutex
<
R
T
:
?
Sized
>
{
raw
:
R
data
:
UnsafeCell
<
T
>
}
unsafe
impl
<
R
:
RawMutex
+
Send
T
:
?
Sized
+
Send
>
Send
for
Mutex
<
R
T
>
{
}
unsafe
impl
<
R
:
RawMutex
+
Sync
T
:
?
Sized
+
Send
>
Sync
for
Mutex
<
R
T
>
{
}
impl
<
R
:
RawMutex
T
>
Mutex
<
R
T
>
{
#
[
cfg
(
has_const_fn_trait_bound
)
]
#
[
inline
]
pub
const
fn
new
(
val
:
T
)
-
>
Mutex
<
R
T
>
{
Mutex
{
raw
:
R
:
:
INIT
data
:
UnsafeCell
:
:
new
(
val
)
}
}
#
[
cfg
(
not
(
has_const_fn_trait_bound
)
)
]
#
[
inline
]
pub
fn
new
(
val
:
T
)
-
>
Mutex
<
R
T
>
{
Mutex
{
raw
:
R
:
:
INIT
data
:
UnsafeCell
:
:
new
(
val
)
}
}
#
[
inline
]
pub
fn
into_inner
(
self
)
-
>
T
{
self
.
data
.
into_inner
(
)
}
}
impl
<
R
T
>
Mutex
<
R
T
>
{
#
[
inline
]
pub
const
fn
const_new
(
raw_mutex
:
R
val
:
T
)
-
>
Mutex
<
R
T
>
{
Mutex
{
raw
:
raw_mutex
data
:
UnsafeCell
:
:
new
(
val
)
}
}
}
impl
<
R
:
RawMutex
T
:
?
Sized
>
Mutex
<
R
T
>
{
#
[
inline
]
unsafe
fn
guard
(
&
self
)
-
>
MutexGuard
<
'
_
R
T
>
{
MutexGuard
{
mutex
:
self
marker
:
PhantomData
}
}
#
[
inline
]
pub
fn
lock
(
&
self
)
-
>
MutexGuard
<
'
_
R
T
>
{
self
.
raw
.
lock
(
)
;
unsafe
{
self
.
guard
(
)
}
}
#
[
inline
]
pub
fn
try_lock
(
&
self
)
-
>
Option
<
MutexGuard
<
'
_
R
T
>
>
{
if
self
.
raw
.
try_lock
(
)
{
Some
(
unsafe
{
self
.
guard
(
)
}
)
}
else
{
None
}
}
#
[
inline
]
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
T
{
unsafe
{
&
mut
*
self
.
data
.
get
(
)
}
}
#
[
inline
]
pub
fn
is_locked
(
&
self
)
-
>
bool
{
self
.
raw
.
is_locked
(
)
}
#
[
inline
]
pub
unsafe
fn
force_unlock
(
&
self
)
{
self
.
raw
.
unlock
(
)
;
}
#
[
inline
]
pub
unsafe
fn
raw
(
&
self
)
-
>
&
R
{
&
self
.
raw
}
#
[
inline
]
pub
fn
data_ptr
(
&
self
)
-
>
*
mut
T
{
self
.
data
.
get
(
)
}
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
#
[
inline
]
unsafe
fn
guard_arc
(
self
:
&
Arc
<
Self
>
)
-
>
ArcMutexGuard
<
R
T
>
{
ArcMutexGuard
{
mutex
:
self
.
clone
(
)
marker
:
PhantomData
}
}
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
#
[
inline
]
pub
fn
lock_arc
(
self
:
&
Arc
<
Self
>
)
-
>
ArcMutexGuard
<
R
T
>
{
self
.
raw
.
lock
(
)
;
unsafe
{
self
.
guard_arc
(
)
}
}
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
#
[
inline
]
pub
fn
try_lock_arc
(
self
:
&
Arc
<
Self
>
)
-
>
Option
<
ArcMutexGuard
<
R
T
>
>
{
if
self
.
raw
.
try_lock
(
)
{
Some
(
unsafe
{
self
.
guard_arc
(
)
}
)
}
else
{
None
}
}
}
impl
<
R
:
RawMutexFair
T
:
?
Sized
>
Mutex
<
R
T
>
{
#
[
inline
]
pub
unsafe
fn
force_unlock_fair
(
&
self
)
{
self
.
raw
.
unlock_fair
(
)
;
}
}
impl
<
R
:
RawMutexTimed
T
:
?
Sized
>
Mutex
<
R
T
>
{
#
[
inline
]
pub
fn
try_lock_for
(
&
self
timeout
:
R
:
:
Duration
)
-
>
Option
<
MutexGuard
<
'
_
R
T
>
>
{
if
self
.
raw
.
try_lock_for
(
timeout
)
{
Some
(
unsafe
{
self
.
guard
(
)
}
)
}
else
{
None
}
}
#
[
inline
]
pub
fn
try_lock_until
(
&
self
timeout
:
R
:
:
Instant
)
-
>
Option
<
MutexGuard
<
'
_
R
T
>
>
{
if
self
.
raw
.
try_lock_until
(
timeout
)
{
Some
(
unsafe
{
self
.
guard
(
)
}
)
}
else
{
None
}
}
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
#
[
inline
]
pub
fn
try_lock_arc_for
(
self
:
&
Arc
<
Self
>
timeout
:
R
:
:
Duration
)
-
>
Option
<
ArcMutexGuard
<
R
T
>
>
{
if
self
.
raw
.
try_lock_for
(
timeout
)
{
Some
(
unsafe
{
self
.
guard_arc
(
)
}
)
}
else
{
None
}
}
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
#
[
inline
]
pub
fn
try_lock_arc_until
(
self
:
&
Arc
<
Self
>
timeout
:
R
:
:
Instant
)
-
>
Option
<
ArcMutexGuard
<
R
T
>
>
{
if
self
.
raw
.
try_lock_until
(
timeout
)
{
Some
(
unsafe
{
self
.
guard_arc
(
)
}
)
}
else
{
None
}
}
}
impl
<
R
:
RawMutex
T
:
?
Sized
+
Default
>
Default
for
Mutex
<
R
T
>
{
#
[
inline
]
fn
default
(
)
-
>
Mutex
<
R
T
>
{
Mutex
:
:
new
(
Default
:
:
default
(
)
)
}
}
impl
<
R
:
RawMutex
T
>
From
<
T
>
for
Mutex
<
R
T
>
{
#
[
inline
]
fn
from
(
t
:
T
)
-
>
Mutex
<
R
T
>
{
Mutex
:
:
new
(
t
)
}
}
impl
<
R
:
RawMutex
T
:
?
Sized
+
fmt
:
:
Debug
>
fmt
:
:
Debug
for
Mutex
<
R
T
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
self
.
try_lock
(
)
{
Some
(
guard
)
=
>
f
.
debug_struct
(
"
Mutex
"
)
.
field
(
"
data
"
&
&
*
guard
)
.
finish
(
)
None
=
>
{
struct
LockedPlaceholder
;
impl
fmt
:
:
Debug
for
LockedPlaceholder
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
"
<
locked
>
"
)
}
}
f
.
debug_struct
(
"
Mutex
"
)
.
field
(
"
data
"
&
LockedPlaceholder
)
.
finish
(
)
}
}
}
}
#
[
cfg
(
feature
=
"
serde
"
)
]
impl
<
R
T
>
Serialize
for
Mutex
<
R
T
>
where
R
:
RawMutex
T
:
Serialize
+
?
Sized
{
fn
serialize
<
S
>
(
&
self
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
Serializer
{
self
.
lock
(
)
.
serialize
(
serializer
)
}
}
#
[
cfg
(
feature
=
"
serde
"
)
]
impl
<
'
de
R
T
>
Deserialize
<
'
de
>
for
Mutex
<
R
T
>
where
R
:
RawMutex
T
:
Deserialize
<
'
de
>
+
?
Sized
{
fn
deserialize
<
D
>
(
deserializer
:
D
)
-
>
Result
<
Self
D
:
:
Error
>
where
D
:
Deserializer
<
'
de
>
{
Deserialize
:
:
deserialize
(
deserializer
)
.
map
(
Mutex
:
:
new
)
}
}
#
[
must_use
=
"
if
unused
the
Mutex
will
immediately
unlock
"
]
pub
struct
MutexGuard
<
'
a
R
:
RawMutex
T
:
?
Sized
>
{
mutex
:
&
'
a
Mutex
<
R
T
>
marker
:
PhantomData
<
(
&
'
a
mut
T
R
:
:
GuardMarker
)
>
}
unsafe
impl
<
'
a
R
:
RawMutex
+
Sync
+
'
a
T
:
?
Sized
+
Sync
+
'
a
>
Sync
for
MutexGuard
<
'
a
R
T
>
{
}
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
?
Sized
+
'
a
>
MutexGuard
<
'
a
R
T
>
{
pub
fn
mutex
(
s
:
&
Self
)
-
>
&
'
a
Mutex
<
R
T
>
{
s
.
mutex
}
#
[
inline
]
pub
fn
map
<
U
:
?
Sized
F
>
(
s
:
Self
f
:
F
)
-
>
MappedMutexGuard
<
'
a
R
U
>
where
F
:
FnOnce
(
&
mut
T
)
-
>
&
mut
U
{
let
raw
=
&
s
.
mutex
.
raw
;
let
data
=
f
(
unsafe
{
&
mut
*
s
.
mutex
.
data
.
get
(
)
}
)
;
mem
:
:
forget
(
s
)
;
MappedMutexGuard
{
raw
data
marker
:
PhantomData
}
}
#
[
inline
]
pub
fn
try_map
<
U
:
?
Sized
F
>
(
s
:
Self
f
:
F
)
-
>
Result
<
MappedMutexGuard
<
'
a
R
U
>
Self
>
where
F
:
FnOnce
(
&
mut
T
)
-
>
Option
<
&
mut
U
>
{
let
raw
=
&
s
.
mutex
.
raw
;
let
data
=
match
f
(
unsafe
{
&
mut
*
s
.
mutex
.
data
.
get
(
)
}
)
{
Some
(
data
)
=
>
data
None
=
>
return
Err
(
s
)
}
;
mem
:
:
forget
(
s
)
;
Ok
(
MappedMutexGuard
{
raw
data
marker
:
PhantomData
}
)
}
#
[
inline
]
pub
fn
unlocked
<
F
U
>
(
s
:
&
mut
Self
f
:
F
)
-
>
U
where
F
:
FnOnce
(
)
-
>
U
{
unsafe
{
s
.
mutex
.
raw
.
unlock
(
)
;
}
defer
!
(
s
.
mutex
.
raw
.
lock
(
)
)
;
f
(
)
}
#
[
inline
]
pub
fn
leak
(
s
:
Self
)
-
>
&
'
a
mut
T
{
let
r
=
unsafe
{
&
mut
*
s
.
mutex
.
data
.
get
(
)
}
;
mem
:
:
forget
(
s
)
;
r
}
}
impl
<
'
a
R
:
RawMutexFair
+
'
a
T
:
?
Sized
+
'
a
>
MutexGuard
<
'
a
R
T
>
{
#
[
inline
]
pub
fn
unlock_fair
(
s
:
Self
)
{
unsafe
{
s
.
mutex
.
raw
.
unlock_fair
(
)
;
}
mem
:
:
forget
(
s
)
;
}
#
[
inline
]
pub
fn
unlocked_fair
<
F
U
>
(
s
:
&
mut
Self
f
:
F
)
-
>
U
where
F
:
FnOnce
(
)
-
>
U
{
unsafe
{
s
.
mutex
.
raw
.
unlock_fair
(
)
;
}
defer
!
(
s
.
mutex
.
raw
.
lock
(
)
)
;
f
(
)
}
#
[
inline
]
pub
fn
bump
(
s
:
&
mut
Self
)
{
unsafe
{
s
.
mutex
.
raw
.
bump
(
)
;
}
}
}
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
?
Sized
+
'
a
>
Deref
for
MutexGuard
<
'
a
R
T
>
{
type
Target
=
T
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
T
{
unsafe
{
&
*
self
.
mutex
.
data
.
get
(
)
}
}
}
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
?
Sized
+
'
a
>
DerefMut
for
MutexGuard
<
'
a
R
T
>
{
#
[
inline
]
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
T
{
unsafe
{
&
mut
*
self
.
mutex
.
data
.
get
(
)
}
}
}
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
?
Sized
+
'
a
>
Drop
for
MutexGuard
<
'
a
R
T
>
{
#
[
inline
]
fn
drop
(
&
mut
self
)
{
unsafe
{
self
.
mutex
.
raw
.
unlock
(
)
;
}
}
}
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
fmt
:
:
Debug
+
?
Sized
+
'
a
>
fmt
:
:
Debug
for
MutexGuard
<
'
a
R
T
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
:
:
Debug
:
:
fmt
(
&
*
*
self
f
)
}
}
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
fmt
:
:
Display
+
?
Sized
+
'
a
>
fmt
:
:
Display
for
MutexGuard
<
'
a
R
T
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
(
*
*
self
)
.
fmt
(
f
)
}
}
#
[
cfg
(
feature
=
"
owning_ref
"
)
]
unsafe
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
?
Sized
+
'
a
>
StableAddress
for
MutexGuard
<
'
a
R
T
>
{
}
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
#
[
must_use
=
"
if
unused
the
Mutex
will
immediately
unlock
"
]
pub
struct
ArcMutexGuard
<
R
:
RawMutex
T
:
?
Sized
>
{
mutex
:
Arc
<
Mutex
<
R
T
>
>
marker
:
PhantomData
<
R
:
:
GuardMarker
>
}
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
impl
<
R
:
RawMutex
T
:
?
Sized
>
ArcMutexGuard
<
R
T
>
{
#
[
inline
]
pub
fn
mutex
(
&
self
)
-
>
&
Arc
<
Mutex
<
R
T
>
>
{
&
self
.
mutex
}
#
[
inline
]
pub
fn
unlocked
<
F
U
>
(
s
:
&
mut
Self
f
:
F
)
-
>
U
where
F
:
FnOnce
(
)
-
>
U
{
unsafe
{
s
.
mutex
.
raw
.
unlock
(
)
;
}
defer
!
(
s
.
mutex
.
raw
.
lock
(
)
)
;
f
(
)
}
}
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
impl
<
R
:
RawMutexFair
T
:
?
Sized
>
ArcMutexGuard
<
R
T
>
{
#
[
inline
]
pub
fn
unlock_fair
(
s
:
Self
)
{
unsafe
{
s
.
mutex
.
raw
.
unlock_fair
(
)
;
}
let
mut
s
=
ManuallyDrop
:
:
new
(
s
)
;
unsafe
{
ptr
:
:
drop_in_place
(
&
mut
s
.
mutex
)
}
;
}
#
[
inline
]
pub
fn
unlocked_fair
<
F
U
>
(
s
:
&
mut
Self
f
:
F
)
-
>
U
where
F
:
FnOnce
(
)
-
>
U
{
unsafe
{
s
.
mutex
.
raw
.
unlock_fair
(
)
;
}
defer
!
(
s
.
mutex
.
raw
.
lock
(
)
)
;
f
(
)
}
#
[
inline
]
pub
fn
bump
(
s
:
&
mut
Self
)
{
unsafe
{
s
.
mutex
.
raw
.
bump
(
)
;
}
}
}
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
impl
<
R
:
RawMutex
T
:
?
Sized
>
Deref
for
ArcMutexGuard
<
R
T
>
{
type
Target
=
T
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
T
{
unsafe
{
&
*
self
.
mutex
.
data
.
get
(
)
}
}
}
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
impl
<
R
:
RawMutex
T
:
?
Sized
>
DerefMut
for
ArcMutexGuard
<
R
T
>
{
#
[
inline
]
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
T
{
unsafe
{
&
mut
*
self
.
mutex
.
data
.
get
(
)
}
}
}
#
[
cfg
(
feature
=
"
arc_lock
"
)
]
impl
<
R
:
RawMutex
T
:
?
Sized
>
Drop
for
ArcMutexGuard
<
R
T
>
{
#
[
inline
]
fn
drop
(
&
mut
self
)
{
unsafe
{
self
.
mutex
.
raw
.
unlock
(
)
;
}
}
}
#
[
must_use
=
"
if
unused
the
Mutex
will
immediately
unlock
"
]
pub
struct
MappedMutexGuard
<
'
a
R
:
RawMutex
T
:
?
Sized
>
{
raw
:
&
'
a
R
data
:
*
mut
T
marker
:
PhantomData
<
&
'
a
mut
T
>
}
unsafe
impl
<
'
a
R
:
RawMutex
+
Sync
+
'
a
T
:
?
Sized
+
Sync
+
'
a
>
Sync
for
MappedMutexGuard
<
'
a
R
T
>
{
}
unsafe
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
?
Sized
+
Send
+
'
a
>
Send
for
MappedMutexGuard
<
'
a
R
T
>
where
R
:
:
GuardMarker
:
Send
{
}
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
?
Sized
+
'
a
>
MappedMutexGuard
<
'
a
R
T
>
{
#
[
inline
]
pub
fn
map
<
U
:
?
Sized
F
>
(
s
:
Self
f
:
F
)
-
>
MappedMutexGuard
<
'
a
R
U
>
where
F
:
FnOnce
(
&
mut
T
)
-
>
&
mut
U
{
let
raw
=
s
.
raw
;
let
data
=
f
(
unsafe
{
&
mut
*
s
.
data
}
)
;
mem
:
:
forget
(
s
)
;
MappedMutexGuard
{
raw
data
marker
:
PhantomData
}
}
#
[
inline
]
pub
fn
try_map
<
U
:
?
Sized
F
>
(
s
:
Self
f
:
F
)
-
>
Result
<
MappedMutexGuard
<
'
a
R
U
>
Self
>
where
F
:
FnOnce
(
&
mut
T
)
-
>
Option
<
&
mut
U
>
{
let
raw
=
s
.
raw
;
let
data
=
match
f
(
unsafe
{
&
mut
*
s
.
data
}
)
{
Some
(
data
)
=
>
data
None
=
>
return
Err
(
s
)
}
;
mem
:
:
forget
(
s
)
;
Ok
(
MappedMutexGuard
{
raw
data
marker
:
PhantomData
}
)
}
}
impl
<
'
a
R
:
RawMutexFair
+
'
a
T
:
?
Sized
+
'
a
>
MappedMutexGuard
<
'
a
R
T
>
{
#
[
inline
]
pub
fn
unlock_fair
(
s
:
Self
)
{
unsafe
{
s
.
raw
.
unlock_fair
(
)
;
}
mem
:
:
forget
(
s
)
;
}
}
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
?
Sized
+
'
a
>
Deref
for
MappedMutexGuard
<
'
a
R
T
>
{
type
Target
=
T
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
T
{
unsafe
{
&
*
self
.
data
}
}
}
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
?
Sized
+
'
a
>
DerefMut
for
MappedMutexGuard
<
'
a
R
T
>
{
#
[
inline
]
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
T
{
unsafe
{
&
mut
*
self
.
data
}
}
}
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
?
Sized
+
'
a
>
Drop
for
MappedMutexGuard
<
'
a
R
T
>
{
#
[
inline
]
fn
drop
(
&
mut
self
)
{
unsafe
{
self
.
raw
.
unlock
(
)
;
}
}
}
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
fmt
:
:
Debug
+
?
Sized
+
'
a
>
fmt
:
:
Debug
for
MappedMutexGuard
<
'
a
R
T
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
:
:
Debug
:
:
fmt
(
&
*
*
self
f
)
}
}
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
fmt
:
:
Display
+
?
Sized
+
'
a
>
fmt
:
:
Display
for
MappedMutexGuard
<
'
a
R
T
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
(
*
*
self
)
.
fmt
(
f
)
}
}
#
[
cfg
(
feature
=
"
owning_ref
"
)
]
unsafe
impl
<
'
a
R
:
RawMutex
+
'
a
T
:
?
Sized
+
'
a
>
StableAddress
for
MappedMutexGuard
<
'
a
R
T
>
{
}
