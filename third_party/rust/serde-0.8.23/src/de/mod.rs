#
[
cfg
(
feature
=
"
std
"
)
]
use
std
:
:
error
;
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
use
error
;
#
[
cfg
(
all
(
not
(
feature
=
"
std
"
)
feature
=
"
collections
"
)
)
]
use
collections
:
:
{
String
Vec
}
;
use
core
:
:
fmt
;
pub
mod
impls
;
pub
mod
value
;
mod
from_primitive
;
pub
trait
Error
:
Sized
+
error
:
:
Error
{
#
[
cfg
(
any
(
feature
=
"
std
"
feature
=
"
collections
"
)
)
]
fn
custom
<
T
:
Into
<
String
>
>
(
msg
:
T
)
-
>
Self
;
#
[
cfg
(
all
(
not
(
feature
=
"
std
"
)
not
(
feature
=
"
collections
"
)
)
)
]
fn
custom
<
T
:
Into
<
&
'
static
str
>
>
(
msg
:
T
)
-
>
Self
;
fn
end_of_stream
(
)
-
>
Self
;
fn
invalid_type
(
ty
:
Type
)
-
>
Self
{
Error
:
:
custom
(
format
!
(
"
Invalid
type
.
Expected
{
:
?
}
"
ty
)
)
}
fn
invalid_value
(
msg
:
&
str
)
-
>
Self
{
Error
:
:
custom
(
format
!
(
"
Invalid
value
:
{
}
"
msg
)
)
}
fn
invalid_length
(
len
:
usize
)
-
>
Self
{
Error
:
:
custom
(
format
!
(
"
Invalid
length
:
{
}
"
len
)
)
}
fn
unknown_variant
(
field
:
&
str
)
-
>
Self
{
Error
:
:
custom
(
format
!
(
"
Unknown
variant
{
}
"
field
)
)
}
fn
unknown_field
(
field
:
&
str
)
-
>
Self
{
Error
:
:
custom
(
format
!
(
"
Unknown
field
{
}
"
field
)
)
}
fn
missing_field
(
field
:
&
'
static
str
)
-
>
Self
{
Error
:
:
custom
(
format
!
(
"
Missing
field
{
}
"
field
)
)
}
fn
duplicate_field
(
field
:
&
'
static
str
)
-
>
Self
{
Error
:
:
custom
(
format
!
(
"
Duplicate
field
{
}
"
field
)
)
}
}
#
[
derive
(
Copy
Clone
PartialEq
Eq
Debug
)
]
pub
enum
Type
{
Bool
Usize
U8
U16
U32
U64
Isize
I8
I16
I32
I64
F32
F64
Char
Str
String
Unit
Option
Seq
Map
UnitStruct
NewtypeStruct
TupleStruct
Struct
FieldName
Tuple
Enum
VariantName
StructVariant
TupleVariant
UnitVariant
Bytes
}
impl
fmt
:
:
Display
for
Type
{
fn
fmt
(
&
self
formatter
:
&
mut
fmt
:
:
Formatter
)
-
>
Result
<
(
)
fmt
:
:
Error
>
{
let
display
=
match
*
self
{
Type
:
:
Bool
=
>
"
bool
"
Type
:
:
Usize
=
>
"
usize
"
Type
:
:
U8
=
>
"
u8
"
Type
:
:
U16
=
>
"
u16
"
Type
:
:
U32
=
>
"
u32
"
Type
:
:
U64
=
>
"
u64
"
Type
:
:
Isize
=
>
"
isize
"
Type
:
:
I8
=
>
"
i8
"
Type
:
:
I16
=
>
"
i16
"
Type
:
:
I32
=
>
"
i32
"
Type
:
:
I64
=
>
"
i64
"
Type
:
:
F32
=
>
"
f32
"
Type
:
:
F64
=
>
"
f64
"
Type
:
:
Char
=
>
"
char
"
Type
:
:
Str
=
>
"
str
"
Type
:
:
String
=
>
"
string
"
Type
:
:
Unit
=
>
"
unit
"
Type
:
:
Option
=
>
"
option
"
Type
:
:
Seq
=
>
"
seq
"
Type
:
:
Map
=
>
"
map
"
Type
:
:
UnitStruct
=
>
"
unit
struct
"
Type
:
:
NewtypeStruct
=
>
"
newtype
struct
"
Type
:
:
TupleStruct
=
>
"
tuple
struct
"
Type
:
:
Struct
=
>
"
struct
"
Type
:
:
FieldName
=
>
"
field
name
"
Type
:
:
Tuple
=
>
"
tuple
"
Type
:
:
Enum
=
>
"
enum
"
Type
:
:
VariantName
=
>
"
variant
name
"
Type
:
:
StructVariant
=
>
"
struct
variant
"
Type
:
:
TupleVariant
=
>
"
tuple
variant
"
Type
:
:
UnitVariant
=
>
"
unit
variant
"
Type
:
:
Bytes
=
>
"
bytes
"
}
;
display
.
fmt
(
formatter
)
}
}
pub
trait
Deserialize
:
Sized
{
fn
deserialize
<
D
>
(
deserializer
:
&
mut
D
)
-
>
Result
<
Self
D
:
:
Error
>
where
D
:
Deserializer
;
}
pub
trait
Deserializer
{
type
Error
:
Error
;
fn
deserialize
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_bool
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_usize
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_u8
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_u16
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_u32
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_u64
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_isize
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_i8
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_i16
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_i32
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_i64
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_f32
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_f64
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_char
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_str
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_string
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_unit
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_option
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_seq
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_seq_fixed_size
<
V
>
(
&
mut
self
len
:
usize
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_bytes
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_map
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_unit_struct
<
V
>
(
&
mut
self
name
:
&
'
static
str
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_newtype_struct
<
V
>
(
&
mut
self
name
:
&
'
static
str
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_tuple_struct
<
V
>
(
&
mut
self
name
:
&
'
static
str
len
:
usize
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_struct
<
V
>
(
&
mut
self
name
:
&
'
static
str
fields
:
&
'
static
[
&
'
static
str
]
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_struct_field
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_tuple
<
V
>
(
&
mut
self
len
:
usize
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
deserialize_enum
<
V
>
(
&
mut
self
name
:
&
'
static
str
variants
:
&
'
static
[
&
'
static
str
]
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
EnumVisitor
;
fn
deserialize_ignored_any
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
}
pub
trait
Visitor
{
type
Value
:
Deserialize
;
fn
visit_bool
<
E
>
(
&
mut
self
v
:
bool
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
let
_
=
v
;
Err
(
Error
:
:
invalid_type
(
Type
:
:
Bool
)
)
}
fn
visit_isize
<
E
>
(
&
mut
self
v
:
isize
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
self
.
visit_i64
(
v
as
i64
)
}
fn
visit_i8
<
E
>
(
&
mut
self
v
:
i8
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
self
.
visit_i64
(
v
as
i64
)
}
fn
visit_i16
<
E
>
(
&
mut
self
v
:
i16
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
self
.
visit_i64
(
v
as
i64
)
}
fn
visit_i32
<
E
>
(
&
mut
self
v
:
i32
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
self
.
visit_i64
(
v
as
i64
)
}
fn
visit_i64
<
E
>
(
&
mut
self
v
:
i64
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
let
_
=
v
;
Err
(
Error
:
:
invalid_type
(
Type
:
:
I64
)
)
}
fn
visit_usize
<
E
>
(
&
mut
self
v
:
usize
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
self
.
visit_u64
(
v
as
u64
)
}
fn
visit_u8
<
E
>
(
&
mut
self
v
:
u8
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
self
.
visit_u64
(
v
as
u64
)
}
fn
visit_u16
<
E
>
(
&
mut
self
v
:
u16
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
self
.
visit_u64
(
v
as
u64
)
}
fn
visit_u32
<
E
>
(
&
mut
self
v
:
u32
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
self
.
visit_u64
(
v
as
u64
)
}
fn
visit_u64
<
E
>
(
&
mut
self
v
:
u64
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
let
_
=
v
;
Err
(
Error
:
:
invalid_type
(
Type
:
:
U64
)
)
}
fn
visit_f32
<
E
>
(
&
mut
self
v
:
f32
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
self
.
visit_f64
(
v
as
f64
)
}
fn
visit_f64
<
E
>
(
&
mut
self
v
:
f64
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
let
_
=
v
;
Err
(
Error
:
:
invalid_type
(
Type
:
:
F64
)
)
}
#
[
inline
]
fn
visit_char
<
E
>
(
&
mut
self
v
:
char
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
self
.
visit_str
(
:
:
utils
:
:
encode_utf8
(
v
)
.
as_str
(
)
)
}
fn
visit_str
<
E
>
(
&
mut
self
v
:
&
str
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
let
_
=
v
;
Err
(
Error
:
:
invalid_type
(
Type
:
:
Str
)
)
}
#
[
inline
]
#
[
cfg
(
any
(
feature
=
"
std
"
feature
=
"
collections
"
)
)
]
fn
visit_string
<
E
>
(
&
mut
self
v
:
String
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
self
.
visit_str
(
&
v
)
}
fn
visit_unit
<
E
>
(
&
mut
self
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
Err
(
Error
:
:
invalid_type
(
Type
:
:
Unit
)
)
}
#
[
inline
]
fn
visit_unit_struct
<
E
>
(
&
mut
self
name
:
&
'
static
str
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
let
_
=
name
;
self
.
visit_unit
(
)
}
fn
visit_none
<
E
>
(
&
mut
self
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
Err
(
Error
:
:
invalid_type
(
Type
:
:
Option
)
)
}
fn
visit_some
<
D
>
(
&
mut
self
deserializer
:
&
mut
D
)
-
>
Result
<
Self
:
:
Value
D
:
:
Error
>
where
D
:
Deserializer
{
let
_
=
deserializer
;
Err
(
Error
:
:
invalid_type
(
Type
:
:
Option
)
)
}
fn
visit_newtype_struct
<
D
>
(
&
mut
self
deserializer
:
&
mut
D
)
-
>
Result
<
Self
:
:
Value
D
:
:
Error
>
where
D
:
Deserializer
{
let
_
=
deserializer
;
Err
(
Error
:
:
invalid_type
(
Type
:
:
NewtypeStruct
)
)
}
fn
visit_seq
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
Self
:
:
Value
V
:
:
Error
>
where
V
:
SeqVisitor
{
let
_
=
visitor
;
Err
(
Error
:
:
invalid_type
(
Type
:
:
Seq
)
)
}
fn
visit_map
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
Self
:
:
Value
V
:
:
Error
>
where
V
:
MapVisitor
{
let
_
=
visitor
;
Err
(
Error
:
:
invalid_type
(
Type
:
:
Map
)
)
}
fn
visit_bytes
<
E
>
(
&
mut
self
v
:
&
[
u8
]
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
let
_
=
v
;
Err
(
Error
:
:
invalid_type
(
Type
:
:
Bytes
)
)
}
#
[
cfg
(
any
(
feature
=
"
std
"
feature
=
"
collections
"
)
)
]
fn
visit_byte_buf
<
E
>
(
&
mut
self
v
:
Vec
<
u8
>
)
-
>
Result
<
Self
:
:
Value
E
>
where
E
:
Error
{
self
.
visit_bytes
(
&
v
)
}
}
pub
trait
SeqVisitor
{
type
Error
:
Error
;
fn
visit
<
T
>
(
&
mut
self
)
-
>
Result
<
Option
<
T
>
Self
:
:
Error
>
where
T
:
Deserialize
;
fn
end
(
&
mut
self
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
#
[
inline
]
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
(
0
None
)
}
}
impl
<
'
a
V
>
SeqVisitor
for
&
'
a
mut
V
where
V
:
SeqVisitor
{
type
Error
=
V
:
:
Error
;
#
[
inline
]
fn
visit
<
T
>
(
&
mut
self
)
-
>
Result
<
Option
<
T
>
V
:
:
Error
>
where
T
:
Deserialize
{
(
*
*
self
)
.
visit
(
)
}
#
[
inline
]
fn
end
(
&
mut
self
)
-
>
Result
<
(
)
V
:
:
Error
>
{
(
*
*
self
)
.
end
(
)
}
#
[
inline
]
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
(
*
*
self
)
.
size_hint
(
)
}
}
pub
trait
MapVisitor
{
type
Error
:
Error
;
#
[
inline
]
fn
visit
<
K
V
>
(
&
mut
self
)
-
>
Result
<
Option
<
(
K
V
)
>
Self
:
:
Error
>
where
K
:
Deserialize
V
:
Deserialize
{
match
try
!
(
self
.
visit_key
(
)
)
{
Some
(
key
)
=
>
{
let
value
=
try
!
(
self
.
visit_value
(
)
)
;
Ok
(
Some
(
(
key
value
)
)
)
}
None
=
>
Ok
(
None
)
}
}
fn
visit_key
<
K
>
(
&
mut
self
)
-
>
Result
<
Option
<
K
>
Self
:
:
Error
>
where
K
:
Deserialize
;
fn
visit_value
<
V
>
(
&
mut
self
)
-
>
Result
<
V
Self
:
:
Error
>
where
V
:
Deserialize
;
fn
end
(
&
mut
self
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
#
[
inline
]
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
(
0
None
)
}
fn
missing_field
<
V
>
(
&
mut
self
field
:
&
'
static
str
)
-
>
Result
<
V
Self
:
:
Error
>
where
V
:
Deserialize
{
Err
(
Error
:
:
missing_field
(
field
)
)
}
}
impl
<
'
a
V_
>
MapVisitor
for
&
'
a
mut
V_
where
V_
:
MapVisitor
{
type
Error
=
V_
:
:
Error
;
#
[
inline
]
fn
visit
<
K
V
>
(
&
mut
self
)
-
>
Result
<
Option
<
(
K
V
)
>
V_
:
:
Error
>
where
K
:
Deserialize
V
:
Deserialize
{
(
*
*
self
)
.
visit
(
)
}
#
[
inline
]
fn
visit_key
<
K
>
(
&
mut
self
)
-
>
Result
<
Option
<
K
>
V_
:
:
Error
>
where
K
:
Deserialize
{
(
*
*
self
)
.
visit_key
(
)
}
#
[
inline
]
fn
visit_value
<
V
>
(
&
mut
self
)
-
>
Result
<
V
V_
:
:
Error
>
where
V
:
Deserialize
{
(
*
*
self
)
.
visit_value
(
)
}
#
[
inline
]
fn
end
(
&
mut
self
)
-
>
Result
<
(
)
V_
:
:
Error
>
{
(
*
*
self
)
.
end
(
)
}
#
[
inline
]
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
(
*
*
self
)
.
size_hint
(
)
}
}
pub
trait
EnumVisitor
{
type
Value
;
fn
visit
<
V
>
(
&
mut
self
visitor
:
V
)
-
>
Result
<
Self
:
:
Value
V
:
:
Error
>
where
V
:
VariantVisitor
;
}
pub
trait
VariantVisitor
{
type
Error
:
Error
;
fn
visit_variant
<
V
>
(
&
mut
self
)
-
>
Result
<
V
Self
:
:
Error
>
where
V
:
Deserialize
;
fn
visit_unit
(
&
mut
self
)
-
>
Result
<
(
)
Self
:
:
Error
>
{
Err
(
Error
:
:
invalid_type
(
Type
:
:
UnitVariant
)
)
}
fn
visit_newtype
<
T
>
(
&
mut
self
)
-
>
Result
<
T
Self
:
:
Error
>
where
T
:
Deserialize
;
fn
visit_tuple
<
V
>
(
&
mut
self
len
:
usize
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
fn
visit_struct
<
V
>
(
&
mut
self
fields
:
&
'
static
[
&
'
static
str
]
visitor
:
V
)
-
>
Result
<
V
:
:
Value
Self
:
:
Error
>
where
V
:
Visitor
;
}
impl
<
'
a
T
>
VariantVisitor
for
&
'
a
mut
T
where
T
:
VariantVisitor
{
type
Error
=
T
:
:
Error
;
fn
visit_variant
<
V
>
(
&
mut
self
)
-
>
Result
<
V
T
:
:
Error
>
where
V
:
Deserialize
{
(
*
*
self
)
.
visit_variant
(
)
}
fn
visit_unit
(
&
mut
self
)
-
>
Result
<
(
)
T
:
:
Error
>
{
(
*
*
self
)
.
visit_unit
(
)
}
fn
visit_newtype
<
D
>
(
&
mut
self
)
-
>
Result
<
D
T
:
:
Error
>
where
D
:
Deserialize
{
(
*
*
self
)
.
visit_newtype
(
)
}
fn
visit_tuple
<
V
>
(
&
mut
self
len
:
usize
visitor
:
V
)
-
>
Result
<
V
:
:
Value
T
:
:
Error
>
where
V
:
Visitor
{
(
*
*
self
)
.
visit_tuple
(
len
visitor
)
}
fn
visit_struct
<
V
>
(
&
mut
self
fields
:
&
'
static
[
&
'
static
str
]
visitor
:
V
)
-
>
Result
<
V
:
:
Value
T
:
:
Error
>
where
V
:
Visitor
{
(
*
*
self
)
.
visit_struct
(
fields
visitor
)
}
}
