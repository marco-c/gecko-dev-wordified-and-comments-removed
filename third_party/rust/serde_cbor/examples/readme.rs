use
serde_derive
:
:
{
Deserialize
Serialize
}
;
use
std
:
:
error
:
:
Error
;
use
std
:
:
fs
:
:
File
;
#
[
derive
(
Debug
Serialize
Deserialize
)
]
struct
Mascot
{
name
:
String
species
:
String
year_of_birth
:
u32
}
fn
main
(
)
-
>
Result
<
(
)
Box
<
dyn
Error
>
>
{
let
ferris
=
Mascot
{
name
:
"
Ferris
"
.
to_owned
(
)
species
:
"
crab
"
.
to_owned
(
)
year_of_birth
:
2015
}
;
let
ferris_file
=
File
:
:
create
(
"
examples
/
ferris
.
cbor
"
)
?
;
serde_cbor
:
:
to_writer
(
ferris_file
&
ferris
)
?
;
let
tux_file
=
File
:
:
open
(
"
examples
/
tux
.
cbor
"
)
?
;
let
tux
:
Mascot
=
serde_cbor
:
:
from_reader
(
tux_file
)
?
;
println
!
(
"
{
:
?
}
"
tux
)
;
Ok
(
(
)
)
}
