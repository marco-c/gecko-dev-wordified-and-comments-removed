use
alloc
:
:
boxed
:
:
Box
;
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
ffi
:
:
c_void
;
use
core
:
:
{
fmt
ptr
}
;
#
[
repr
(
C
)
]
pub
struct
DiplomatWriteable
{
context
:
*
mut
c_void
buf
:
*
mut
u8
len
:
usize
cap
:
usize
flush
:
extern
"
C
"
fn
(
*
mut
DiplomatWriteable
)
grow
:
extern
"
C
"
fn
(
*
mut
DiplomatWriteable
usize
)
-
>
bool
}
impl
DiplomatWriteable
{
pub
fn
flush
(
&
mut
self
)
{
(
self
.
flush
)
(
self
)
;
}
}
impl
fmt
:
:
Write
for
DiplomatWriteable
{
fn
write_str
(
&
mut
self
s
:
&
str
)
-
>
Result
<
(
)
fmt
:
:
Error
>
{
let
needed_len
=
self
.
len
+
s
.
len
(
)
;
if
needed_len
>
self
.
cap
{
let
success
=
(
self
.
grow
)
(
self
needed_len
)
;
if
!
success
{
return
Err
(
fmt
:
:
Error
)
;
}
}
debug_assert
!
(
needed_len
<
=
self
.
cap
)
;
unsafe
{
ptr
:
:
copy_nonoverlapping
(
s
.
as_bytes
(
)
.
as_ptr
(
)
self
.
buf
.
add
(
self
.
len
)
s
.
len
(
)
)
;
}
self
.
len
=
needed_len
;
Ok
(
(
)
)
}
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
diplomat_simple_writeable
(
buf
:
*
mut
u8
buf_size
:
usize
)
-
>
DiplomatWriteable
{
extern
"
C
"
fn
grow
(
_this
:
*
mut
DiplomatWriteable
_cap
:
usize
)
-
>
bool
{
false
}
extern
"
C
"
fn
flush
(
this
:
*
mut
DiplomatWriteable
)
{
unsafe
{
debug_assert
!
(
(
*
this
)
.
len
<
=
(
*
this
)
.
cap
)
;
let
buf
=
(
*
this
)
.
buf
;
ptr
:
:
write
(
buf
.
add
(
(
*
this
)
.
len
)
0
)
}
}
DiplomatWriteable
{
context
:
ptr
:
:
null_mut
(
)
buf
len
:
0
cap
:
buf_size
-
1
flush
grow
}
}
#
[
no_mangle
]
pub
extern
"
C
"
fn
diplomat_buffer_writeable_create
(
cap
:
usize
)
-
>
*
mut
DiplomatWriteable
{
extern
"
C
"
fn
grow
(
this
:
*
mut
DiplomatWriteable
new_cap
:
usize
)
-
>
bool
{
unsafe
{
let
this
=
this
.
as_mut
(
)
.
unwrap
(
)
;
let
mut
vec
=
Vec
:
:
from_raw_parts
(
this
.
buf
0
this
.
cap
)
;
vec
.
reserve
(
new_cap
)
;
this
.
cap
=
vec
.
capacity
(
)
;
this
.
buf
=
vec
.
as_mut_ptr
(
)
;
core
:
:
mem
:
:
forget
(
vec
)
;
}
true
}
extern
"
C
"
fn
flush
(
_
:
*
mut
DiplomatWriteable
)
{
}
let
mut
vec
=
Vec
:
:
<
u8
>
:
:
with_capacity
(
cap
)
;
let
ret
=
DiplomatWriteable
{
context
:
ptr
:
:
null_mut
(
)
buf
:
vec
.
as_mut_ptr
(
)
len
:
0
cap
flush
grow
}
;
core
:
:
mem
:
:
forget
(
vec
)
;
Box
:
:
into_raw
(
Box
:
:
new
(
ret
)
)
}
#
[
no_mangle
]
pub
extern
"
C
"
fn
diplomat_buffer_writeable_get_bytes
(
this
:
&
DiplomatWriteable
)
-
>
*
mut
u8
{
this
.
buf
}
#
[
no_mangle
]
pub
extern
"
C
"
fn
diplomat_buffer_writeable_len
(
this
:
&
DiplomatWriteable
)
-
>
usize
{
this
.
len
}
#
[
no_mangle
]
pub
unsafe
extern
"
C
"
fn
diplomat_buffer_writeable_destroy
(
this
:
*
mut
DiplomatWriteable
)
{
let
this
=
Box
:
:
from_raw
(
this
)
;
let
vec
=
Vec
:
:
from_raw_parts
(
this
.
buf
0
this
.
cap
)
;
drop
(
vec
)
;
drop
(
this
)
;
}
