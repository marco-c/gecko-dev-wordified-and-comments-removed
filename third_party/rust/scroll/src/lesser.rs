use
std
:
:
io
:
:
{
Read
Result
Write
}
;
use
crate
:
:
ctx
:
:
{
FromCtx
IntoCtx
SizeWith
}
;
pub
trait
IOread
<
Ctx
:
Copy
>
:
Read
{
#
[
inline
]
fn
ioread
<
N
:
FromCtx
<
Ctx
>
+
SizeWith
<
Ctx
>
>
(
&
mut
self
)
-
>
Result
<
N
>
where
Ctx
:
Default
{
let
ctx
=
Ctx
:
:
default
(
)
;
self
.
ioread_with
(
ctx
)
}
#
[
inline
]
fn
ioread_with
<
N
:
FromCtx
<
Ctx
>
+
SizeWith
<
Ctx
>
>
(
&
mut
self
ctx
:
Ctx
)
-
>
Result
<
N
>
{
let
mut
scratch
=
[
0u8
;
256
]
;
let
size
=
N
:
:
size_with
(
&
ctx
)
;
let
buf
=
&
mut
scratch
[
0
.
.
size
]
;
self
.
read_exact
(
buf
)
?
;
Ok
(
N
:
:
from_ctx
(
buf
ctx
)
)
}
}
impl
<
Ctx
:
Copy
R
:
Read
+
?
Sized
>
IOread
<
Ctx
>
for
R
{
}
pub
trait
IOwrite
<
Ctx
:
Copy
>
:
Write
{
#
[
inline
]
fn
iowrite
<
N
:
SizeWith
<
Ctx
>
+
IntoCtx
<
Ctx
>
>
(
&
mut
self
n
:
N
)
-
>
Result
<
(
)
>
where
Ctx
:
Default
{
let
ctx
=
Ctx
:
:
default
(
)
;
self
.
iowrite_with
(
n
ctx
)
}
#
[
inline
]
fn
iowrite_with
<
N
:
SizeWith
<
Ctx
>
+
IntoCtx
<
Ctx
>
>
(
&
mut
self
n
:
N
ctx
:
Ctx
)
-
>
Result
<
(
)
>
{
let
mut
buf
=
[
0u8
;
256
]
;
let
size
=
N
:
:
size_with
(
&
ctx
)
;
let
buf
=
&
mut
buf
[
0
.
.
size
]
;
n
.
into_ctx
(
buf
ctx
)
;
self
.
write_all
(
buf
)
?
;
Ok
(
(
)
)
}
}
impl
<
Ctx
:
Copy
W
:
Write
+
?
Sized
>
IOwrite
<
Ctx
>
for
W
{
}
