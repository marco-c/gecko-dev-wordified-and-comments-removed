use
crate
:
:
Uuid
;
impl
Uuid
{
pub
fn
new_v4
(
)
-
>
Uuid
{
crate
:
:
Builder
:
:
from_random_bytes
(
crate
:
:
rng
:
:
bytes
(
)
)
.
into_uuid
(
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
crate
:
:
{
Variant
Version
}
;
#
[
cfg
(
target_arch
=
"
wasm32
"
)
]
use
wasm_bindgen_test
:
:
*
;
#
[
test
]
#
[
cfg_attr
(
target_arch
=
"
wasm32
"
wasm_bindgen_test
)
]
fn
test_new
(
)
{
let
uuid
=
Uuid
:
:
new_v4
(
)
;
assert_eq
!
(
uuid
.
get_version
(
)
Some
(
Version
:
:
Random
)
)
;
assert_eq
!
(
uuid
.
get_variant
(
)
Variant
:
:
RFC4122
)
;
}
#
[
test
]
#
[
cfg_attr
(
target_arch
=
"
wasm32
"
wasm_bindgen_test
)
]
fn
test_get_version
(
)
{
let
uuid
=
Uuid
:
:
new_v4
(
)
;
assert_eq
!
(
uuid
.
get_version
(
)
Some
(
Version
:
:
Random
)
)
;
assert_eq
!
(
uuid
.
get_version_num
(
)
4
)
}
}
