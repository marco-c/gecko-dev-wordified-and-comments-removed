use
crate
:
:
{
Builder
Uuid
}
;
#
[
deprecated
(
note
=
"
use
types
from
the
crate
root
instead
"
)
]
pub
use
crate
:
:
{
timestamp
:
:
context
:
:
Context
Timestamp
}
;
impl
Uuid
{
#
[
cfg
(
all
(
feature
=
"
std
"
feature
=
"
rng
"
)
)
]
pub
fn
now_v1
(
node_id
:
&
[
u8
;
6
]
)
-
>
Self
{
let
ts
=
Timestamp
:
:
now
(
crate
:
:
timestamp
:
:
context
:
:
shared_context
(
)
)
;
Self
:
:
new_v1
(
ts
node_id
)
}
pub
fn
new_v1
(
ts
:
Timestamp
node_id
:
&
[
u8
;
6
]
)
-
>
Self
{
let
(
ticks
counter
)
=
ts
.
to_rfc4122
(
)
;
Builder
:
:
from_rfc4122_timestamp
(
ticks
counter
node_id
)
.
into_uuid
(
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
crate
:
:
{
std
:
:
string
:
:
ToString
Variant
Version
}
;
#
[
cfg
(
target_arch
=
"
wasm32
"
)
]
use
wasm_bindgen_test
:
:
*
;
#
[
test
]
#
[
cfg_attr
(
target_arch
=
"
wasm32
"
wasm_bindgen_test
)
]
fn
test_new
(
)
{
let
time
:
u64
=
1_496_854_535
;
let
time_fraction
:
u32
=
812_946_000
;
let
node
=
[
1
2
3
4
5
6
]
;
let
context
=
Context
:
:
new
(
0
)
;
let
uuid
=
Uuid
:
:
new_v1
(
Timestamp
:
:
from_unix
(
&
context
time
time_fraction
)
&
node
)
;
assert_eq
!
(
uuid
.
get_version
(
)
Some
(
Version
:
:
Mac
)
)
;
assert_eq
!
(
uuid
.
get_variant
(
)
Variant
:
:
RFC4122
)
;
assert_eq
!
(
uuid
.
hyphenated
(
)
.
to_string
(
)
"
20616934
-
4ba2
-
11e7
-
8000
-
010203040506
"
)
;
let
ts
=
uuid
.
get_timestamp
(
)
.
unwrap
(
)
.
to_rfc4122
(
)
;
assert_eq
!
(
ts
.
0
-
0x01B2_1DD2_1381_4000
14_968_545_358_129_460
)
;
let
parsed
=
Uuid
:
:
parse_str
(
"
20616934
-
4ba2
-
11e7
-
8000
-
010203040506
"
)
.
unwrap
(
)
;
assert_eq
!
(
uuid
.
get_timestamp
(
)
.
unwrap
(
)
parsed
.
get_timestamp
(
)
.
unwrap
(
)
)
;
}
#
[
test
]
#
[
cfg_attr
(
target_arch
=
"
wasm32
"
wasm_bindgen_test
)
]
#
[
cfg
(
all
(
feature
=
"
std
"
feature
=
"
rng
"
)
)
]
fn
test_now
(
)
{
let
node
=
[
1
2
3
4
5
6
]
;
let
uuid
=
Uuid
:
:
now_v1
(
&
node
)
;
assert_eq
!
(
uuid
.
get_version
(
)
Some
(
Version
:
:
Mac
)
)
;
assert_eq
!
(
uuid
.
get_variant
(
)
Variant
:
:
RFC4122
)
;
}
#
[
test
]
#
[
cfg_attr
(
target_arch
=
"
wasm32
"
wasm_bindgen_test
)
]
fn
test_new_context
(
)
{
let
time
:
u64
=
1_496_854_535
;
let
time_fraction
:
u32
=
812_946_000
;
let
node
=
[
1
2
3
4
5
6
]
;
let
context
=
Context
:
:
new
(
(
u16
:
:
MAX
>
>
2
)
-
1
)
;
let
uuid1
=
Uuid
:
:
new_v1
(
Timestamp
:
:
from_unix
(
&
context
time
time_fraction
)
&
node
)
;
let
time
:
u64
=
1_496_854_536
;
let
uuid2
=
Uuid
:
:
new_v1
(
Timestamp
:
:
from_unix
(
&
context
time
time_fraction
)
&
node
)
;
assert_eq
!
(
uuid1
.
get_timestamp
(
)
.
unwrap
(
)
.
to_rfc4122
(
)
.
1
16382
)
;
assert_eq
!
(
uuid2
.
get_timestamp
(
)
.
unwrap
(
)
.
to_rfc4122
(
)
.
1
0
)
;
let
time
=
1_496_854_535
;
let
uuid3
=
Uuid
:
:
new_v1
(
Timestamp
:
:
from_unix
(
&
context
time
time_fraction
)
&
node
)
;
let
uuid4
=
Uuid
:
:
new_v1
(
Timestamp
:
:
from_unix
(
&
context
time
time_fraction
)
&
node
)
;
assert_eq
!
(
uuid3
.
get_timestamp
(
)
.
unwrap
(
)
.
to_rfc4122
(
)
.
1
1
)
;
assert_eq
!
(
uuid4
.
get_timestamp
(
)
.
unwrap
(
)
.
to_rfc4122
(
)
.
1
2
)
;
}
}
