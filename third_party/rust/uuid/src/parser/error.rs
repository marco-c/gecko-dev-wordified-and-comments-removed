use
crate
:
:
std
:
:
fmt
;
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
PartialEq
)
]
#
[
allow
(
clippy
:
:
enum_variant_names
)
]
pub
(
crate
)
enum
Error
{
InvalidCharacter
{
expected
:
&
'
static
str
found
:
char
index
:
usize
urn
:
UrnPrefix
}
InvalidGroupCount
{
expected
:
ExpectedLength
found
:
usize
}
InvalidGroupLength
{
expected
:
ExpectedLength
found
:
usize
group
:
usize
}
InvalidLength
{
expected
:
ExpectedLength
found
:
usize
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
Ord
PartialEq
PartialOrd
)
]
pub
(
crate
)
enum
ExpectedLength
{
Any
(
&
'
static
[
usize
]
)
Exact
(
usize
)
}
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
Ord
PartialEq
PartialOrd
)
]
pub
(
crate
)
enum
UrnPrefix
{
Optional
}
impl
Error
{
fn
_description
(
&
self
)
-
>
&
str
{
match
*
self
{
Error
:
:
InvalidCharacter
{
.
.
}
=
>
"
invalid
character
"
Error
:
:
InvalidGroupCount
{
.
.
}
=
>
"
invalid
number
of
groups
"
Error
:
:
InvalidGroupLength
{
.
.
}
=
>
"
invalid
group
length
"
Error
:
:
InvalidLength
{
.
.
}
=
>
"
invalid
length
"
}
}
}
impl
fmt
:
:
Display
for
ExpectedLength
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
*
self
{
ExpectedLength
:
:
Any
(
crits
)
=
>
write
!
(
f
"
one
of
{
:
?
}
"
crits
)
ExpectedLength
:
:
Exact
(
crit
)
=
>
write
!
(
f
"
{
}
"
crit
)
}
}
}
impl
fmt
:
:
Display
for
Error
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
{
}
:
"
self
.
_description
(
)
)
?
;
match
*
self
{
Error
:
:
InvalidCharacter
{
expected
found
index
urn
}
=
>
{
let
urn_str
=
match
urn
{
UrnPrefix
:
:
Optional
=
>
{
"
an
optional
prefix
of
urn
:
uuid
:
followed
by
"
}
}
;
write
!
(
f
"
expected
{
}
{
}
found
{
}
at
{
}
"
urn_str
expected
found
index
)
}
Error
:
:
InvalidGroupCount
{
ref
expected
found
}
=
>
write
!
(
f
"
expected
{
}
found
{
}
"
expected
found
)
Error
:
:
InvalidGroupLength
{
ref
expected
found
group
}
=
>
write
!
(
f
"
expected
{
}
found
{
}
in
group
{
}
"
expected
found
group
)
Error
:
:
InvalidLength
{
ref
expected
found
}
=
>
write
!
(
f
"
expected
{
}
found
{
}
"
expected
found
)
}
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
mod
std_support
{
use
super
:
:
*
;
use
crate
:
:
std
:
:
error
;
impl
error
:
:
Error
for
Error
{
}
}
