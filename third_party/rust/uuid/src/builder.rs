use
prelude
:
:
*
;
use
BytesError
;
#
[
allow
(
missing_copy_implementations
)
]
#
[
derive
(
Debug
)
]
pub
struct
Builder
(
Uuid
)
;
impl
Builder
{
pub
fn
from_bytes
(
b
:
Bytes
)
-
>
Self
{
Builder
(
Uuid
:
:
from_bytes
(
b
)
)
}
pub
fn
from_slice
(
b
:
&
[
u8
]
)
-
>
Result
<
Self
BytesError
>
{
const
BYTES_LEN
:
usize
=
16
;
let
len
=
b
.
len
(
)
;
if
len
!
=
BYTES_LEN
{
return
Err
(
BytesError
:
:
new
(
BYTES_LEN
len
)
)
;
}
let
mut
bytes
:
Bytes
=
[
0
;
16
]
;
bytes
.
copy_from_slice
(
b
)
;
Ok
(
Self
:
:
from_bytes
(
bytes
)
)
}
pub
fn
from_fields
(
d1
:
u32
d2
:
u16
d3
:
u16
d4
:
&
[
u8
]
)
-
>
Result
<
Self
BytesError
>
{
Uuid
:
:
from_fields
(
d1
d2
d3
d4
)
.
map
(
Builder
)
}
pub
fn
nil
(
)
-
>
Self
{
Builder
(
Uuid
:
:
nil
(
)
)
}
pub
fn
set_variant
(
&
mut
self
v
:
Variant
)
-
>
&
mut
Self
{
self
.
0
.
set_variant
(
v
)
;
self
}
pub
fn
set_version
(
&
mut
self
v
:
Version
)
-
>
&
mut
Self
{
self
.
0
.
set_version
(
v
)
;
self
}
pub
fn
build
(
&
mut
self
)
-
>
Uuid
{
self
.
0
}
}
