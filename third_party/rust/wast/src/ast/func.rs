use
crate
:
:
ast
:
:
{
self
kw
}
;
use
crate
:
:
parser
:
:
{
Parse
Parser
Result
}
;
#
[
derive
(
Debug
)
]
pub
struct
Func
<
'
a
>
{
pub
span
:
ast
:
:
Span
pub
id
:
Option
<
ast
:
:
Id
<
'
a
>
>
pub
name
:
Option
<
ast
:
:
NameAnnotation
<
'
a
>
>
pub
exports
:
ast
:
:
InlineExport
<
'
a
>
pub
kind
:
FuncKind
<
'
a
>
pub
ty
:
ast
:
:
TypeUse
<
'
a
ast
:
:
FunctionType
<
'
a
>
>
}
#
[
derive
(
Debug
)
]
pub
enum
FuncKind
<
'
a
>
{
Import
(
ast
:
:
InlineImport
<
'
a
>
)
Inline
{
locals
:
Vec
<
Local
<
'
a
>
>
expression
:
ast
:
:
Expression
<
'
a
>
}
}
impl
<
'
a
>
Parse
<
'
a
>
for
Func
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
span
=
parser
.
parse
:
:
<
kw
:
:
func
>
(
)
?
.
0
;
let
id
=
parser
.
parse
(
)
?
;
let
name
=
parser
.
parse
(
)
?
;
let
exports
=
parser
.
parse
(
)
?
;
let
(
ty
kind
)
=
if
let
Some
(
import
)
=
parser
.
parse
(
)
?
{
(
parser
.
parse
(
)
?
FuncKind
:
:
Import
(
import
)
)
}
else
{
let
ty
=
parser
.
parse
(
)
?
;
let
locals
=
Local
:
:
parse_remainder
(
parser
)
?
;
(
ty
FuncKind
:
:
Inline
{
locals
expression
:
parser
.
parse
(
)
?
}
)
}
;
Ok
(
Func
{
span
id
name
exports
ty
kind
}
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
Local
<
'
a
>
{
pub
id
:
Option
<
ast
:
:
Id
<
'
a
>
>
pub
name
:
Option
<
ast
:
:
NameAnnotation
<
'
a
>
>
pub
ty
:
ast
:
:
ValType
<
'
a
>
}
impl
<
'
a
>
Local
<
'
a
>
{
pub
(
crate
)
fn
parse_remainder
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Vec
<
Local
<
'
a
>
>
>
{
let
mut
locals
=
Vec
:
:
new
(
)
;
while
parser
.
peek2
:
:
<
kw
:
:
local
>
(
)
{
parser
.
parens
(
|
p
|
{
p
.
parse
:
:
<
kw
:
:
local
>
(
)
?
;
if
p
.
is_empty
(
)
{
return
Ok
(
(
)
)
;
}
let
id
:
Option
<
_
>
=
p
.
parse
(
)
?
;
let
name
:
Option
<
_
>
=
p
.
parse
(
)
?
;
let
ty
=
p
.
parse
(
)
?
;
let
parse_more
=
id
.
is_none
(
)
&
&
name
.
is_none
(
)
;
locals
.
push
(
Local
{
id
name
ty
}
)
;
while
parse_more
&
&
!
p
.
is_empty
(
)
{
locals
.
push
(
Local
{
id
:
None
name
:
None
ty
:
p
.
parse
(
)
?
}
)
;
}
Ok
(
(
)
)
}
)
?
;
}
Ok
(
locals
)
}
}
