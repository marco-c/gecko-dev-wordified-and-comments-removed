use
crate
:
:
ast
:
:
{
self
kw
}
;
use
crate
:
:
parser
:
:
{
Parse
Parser
Result
}
;
#
[
derive
(
Debug
)
]
pub
struct
Memory
<
'
a
>
{
pub
span
:
ast
:
:
Span
pub
id
:
Option
<
ast
:
:
Id
<
'
a
>
>
pub
exports
:
ast
:
:
InlineExport
<
'
a
>
pub
kind
:
MemoryKind
<
'
a
>
}
#
[
derive
(
Debug
)
]
pub
enum
MemoryKind
<
'
a
>
{
#
[
allow
(
missing_docs
)
]
Import
{
module
:
&
'
a
str
field
:
&
'
a
str
ty
:
ast
:
:
MemoryType
}
Normal
(
ast
:
:
MemoryType
)
Inline
(
Vec
<
&
'
a
[
u8
]
>
)
}
impl
<
'
a
>
Parse
<
'
a
>
for
Memory
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
span
=
parser
.
parse
:
:
<
kw
:
:
memory
>
(
)
?
.
0
;
let
id
=
parser
.
parse
(
)
?
;
let
exports
=
parser
.
parse
(
)
?
;
let
mut
l
=
parser
.
lookahead1
(
)
;
let
kind
=
if
l
.
peek
:
:
<
ast
:
:
LParen
>
(
)
{
enum
Which
<
'
a
T
>
{
Inline
(
Vec
<
T
>
)
Import
(
&
'
a
str
&
'
a
str
)
}
let
result
=
parser
.
parens
(
|
parser
|
{
let
mut
l
=
parser
.
lookahead1
(
)
;
if
l
.
peek
:
:
<
kw
:
:
data
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
data
>
(
)
?
;
let
mut
data
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
{
data
.
push
(
parser
.
parse
(
)
?
)
;
}
Ok
(
Which
:
:
Inline
(
data
)
)
}
else
if
l
.
peek
:
:
<
kw
:
:
import
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
import
>
(
)
?
;
Ok
(
Which
:
:
Import
(
parser
.
parse
(
)
?
parser
.
parse
(
)
?
)
)
}
else
{
Err
(
l
.
error
(
)
)
}
}
)
?
;
match
result
{
Which
:
:
Inline
(
data
)
=
>
MemoryKind
:
:
Inline
(
data
)
Which
:
:
Import
(
module
field
)
=
>
MemoryKind
:
:
Import
{
module
field
ty
:
parser
.
parse
(
)
?
}
}
}
else
if
l
.
peek
:
:
<
u32
>
(
)
{
MemoryKind
:
:
Normal
(
parser
.
parse
(
)
?
)
}
else
{
return
Err
(
l
.
error
(
)
)
;
}
;
Ok
(
Memory
{
span
id
exports
kind
}
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
Data
<
'
a
>
{
pub
span
:
ast
:
:
Span
pub
id
:
Option
<
ast
:
:
Id
<
'
a
>
>
pub
kind
:
DataKind
<
'
a
>
pub
data
:
Vec
<
&
'
a
[
u8
]
>
}
#
[
derive
(
Debug
)
]
pub
enum
DataKind
<
'
a
>
{
Passive
Active
{
memory
:
ast
:
:
Index
<
'
a
>
offset
:
ast
:
:
Expression
<
'
a
>
}
}
impl
<
'
a
>
Parse
<
'
a
>
for
Data
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
span
=
parser
.
parse
:
:
<
kw
:
:
data
>
(
)
?
.
0
;
let
id
=
parser
.
parse
(
)
?
;
let
kind
=
if
parser
.
peek
:
:
<
kw
:
:
passive
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
passive
>
(
)
?
;
DataKind
:
:
Passive
}
else
if
parser
.
peek
:
:
<
&
[
u8
]
>
(
)
{
DataKind
:
:
Passive
}
else
{
let
memory
=
if
parser
.
peek2
:
:
<
kw
:
:
memory
>
(
)
{
Some
(
parser
.
parens
(
|
p
|
{
p
.
parse
:
:
<
kw
:
:
memory
>
(
)
?
;
p
.
parse
(
)
}
)
?
)
}
else
{
parser
.
parse
(
)
?
}
;
let
offset
=
parser
.
parens
(
|
parser
|
{
if
parser
.
peek
:
:
<
kw
:
:
offset
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
offset
>
(
)
?
;
}
parser
.
parse
(
)
}
)
?
;
DataKind
:
:
Active
{
memory
:
memory
.
unwrap_or
(
ast
:
:
Index
:
:
Num
(
0
)
)
offset
}
}
;
let
mut
data
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
{
data
.
push
(
parser
.
parse
(
)
?
)
;
}
Ok
(
Data
{
span
id
kind
data
}
)
}
}
