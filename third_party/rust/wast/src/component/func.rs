use
crate
:
:
component
:
:
*
;
use
crate
:
:
core
;
use
crate
:
:
kw
;
use
crate
:
:
parser
:
:
{
Parse
Parser
Result
}
;
use
crate
:
:
token
:
:
{
Id
LParen
NameAnnotation
Span
}
;
#
[
derive
(
Debug
)
]
pub
struct
ComponentFunc
<
'
a
>
{
pub
span
:
Span
pub
id
:
Option
<
Id
<
'
a
>
>
pub
name
:
Option
<
NameAnnotation
<
'
a
>
>
pub
exports
:
core
:
:
InlineExport
<
'
a
>
pub
kind
:
ComponentFuncKind
<
'
a
>
}
#
[
derive
(
Debug
)
]
pub
enum
ComponentFuncKind
<
'
a
>
{
Import
{
import
:
InlineImport
<
'
a
>
ty
:
ComponentTypeUse
<
'
a
ComponentFunctionType
<
'
a
>
>
}
Inline
{
body
:
ComponentFuncBody
<
'
a
>
}
}
impl
<
'
a
>
Parse
<
'
a
>
for
ComponentFunc
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
span
=
parser
.
parse
:
:
<
kw
:
:
func
>
(
)
?
.
0
;
let
id
=
parser
.
parse
(
)
?
;
let
name
=
parser
.
parse
(
)
?
;
let
exports
=
parser
.
parse
(
)
?
;
let
kind
=
if
let
Some
(
import
)
=
parser
.
parse
(
)
?
{
ComponentFuncKind
:
:
Import
{
import
ty
:
parser
.
parse
(
)
?
}
}
else
{
ComponentFuncKind
:
:
Inline
{
body
:
parser
.
parens
(
|
p
|
p
.
parse
(
)
)
?
}
}
;
Ok
(
ComponentFunc
{
span
id
name
exports
kind
}
)
}
}
#
[
derive
(
Debug
)
]
pub
enum
ComponentFuncBody
<
'
a
>
{
CanonLift
(
CanonLift
<
'
a
>
)
CanonLower
(
CanonLower
<
'
a
>
)
}
impl
<
'
a
>
Parse
<
'
a
>
for
ComponentFuncBody
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
if
parser
.
peek
:
:
<
kw
:
:
canon_lift
>
(
)
{
Ok
(
ComponentFuncBody
:
:
CanonLift
(
parser
.
parse
(
)
?
)
)
}
else
if
parser
.
peek
:
:
<
kw
:
:
canon_lower
>
(
)
{
Ok
(
ComponentFuncBody
:
:
CanonLower
(
parser
.
parse
(
)
?
)
)
}
else
{
Err
(
parser
.
error
(
"
Expected
canon
.
lift
or
canon
.
lower
"
)
)
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
CanonLift
<
'
a
>
{
pub
type_
:
ComponentTypeUse
<
'
a
ComponentFunctionType
<
'
a
>
>
pub
opts
:
Vec
<
CanonOpt
<
'
a
>
>
pub
func
:
ItemRef
<
'
a
kw
:
:
func
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
CanonLift
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
parser
.
parse
:
:
<
kw
:
:
canon_lift
>
(
)
?
;
let
type_
=
if
parser
.
peek2
:
:
<
kw
:
:
func
>
(
)
{
ComponentTypeUse
:
:
Inline
(
parser
.
parens
(
|
p
|
{
p
.
parse
:
:
<
kw
:
:
func
>
(
)
?
;
p
.
parse
(
)
}
)
?
)
}
else
{
ComponentTypeUse
:
:
Ref
(
parser
.
parse
(
)
?
)
}
;
let
mut
opts
=
Vec
:
:
new
(
)
;
while
!
parser
.
peek2
:
:
<
kw
:
:
func
>
(
)
{
opts
.
push
(
parser
.
parse
(
)
?
)
;
}
let
func
=
parser
.
parse
(
)
?
;
Ok
(
CanonLift
{
type_
opts
func
}
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
CanonLower
<
'
a
>
{
pub
opts
:
Vec
<
CanonOpt
<
'
a
>
>
pub
func
:
ItemRef
<
'
a
kw
:
:
func
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
CanonLower
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
parser
.
parse
:
:
<
kw
:
:
canon_lower
>
(
)
?
;
let
mut
opts
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
&
&
(
!
parser
.
peek
:
:
<
LParen
>
(
)
|
|
!
parser
.
peek2
:
:
<
kw
:
:
func
>
(
)
)
{
opts
.
push
(
parser
.
parse
(
)
?
)
;
}
let
func
=
parser
.
parse
(
)
?
;
Ok
(
CanonLower
{
opts
func
}
)
}
}
#
[
derive
(
Debug
)
]
pub
enum
CanonOpt
<
'
a
>
{
StringUtf8
StringUtf16
StringLatin1Utf16
Into
(
ItemRef
<
'
a
kw
:
:
instance
>
)
}
impl
<
'
a
>
Parse
<
'
a
>
for
CanonOpt
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
mut
l
=
parser
.
lookahead1
(
)
;
if
l
.
peek
:
:
<
kw
:
:
string_utf8
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
string_utf8
>
(
)
?
;
Ok
(
CanonOpt
:
:
StringUtf8
)
}
else
if
l
.
peek
:
:
<
kw
:
:
string_utf16
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
string_utf16
>
(
)
?
;
Ok
(
CanonOpt
:
:
StringUtf16
)
}
else
if
l
.
peek
:
:
<
kw
:
:
string_latin1_utf16
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
string_latin1_utf16
>
(
)
?
;
Ok
(
CanonOpt
:
:
StringLatin1Utf16
)
}
else
if
l
.
peek
:
:
<
LParen
>
(
)
{
parser
.
parens
(
|
parser
|
{
let
mut
l
=
parser
.
lookahead1
(
)
;
if
l
.
peek
:
:
<
kw
:
:
into
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
into
>
(
)
?
;
Ok
(
CanonOpt
:
:
Into
(
parser
.
parse
:
:
<
IndexOrRef
<
'
_
_
>
>
(
)
?
.
0
)
)
}
else
{
Err
(
l
.
error
(
)
)
}
}
)
}
else
{
Err
(
l
.
error
(
)
)
}
}
}
impl
Default
for
kw
:
:
instance
{
fn
default
(
)
-
>
kw
:
:
instance
{
kw
:
:
instance
(
Span
:
:
from_offset
(
0
)
)
}
}
