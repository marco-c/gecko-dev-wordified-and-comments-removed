use
crate
:
:
component
:
:
*
;
use
crate
:
:
kw
;
use
crate
:
:
parser
:
:
{
Parse
Parser
Result
}
;
use
crate
:
:
token
:
:
{
Id
Index
LParen
NameAnnotation
Span
}
;
#
[
derive
(
Debug
)
]
pub
struct
CoreFunc
<
'
a
>
{
pub
span
:
Span
pub
id
:
Option
<
Id
<
'
a
>
>
pub
name
:
Option
<
NameAnnotation
<
'
a
>
>
pub
kind
:
CoreFuncKind
<
'
a
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
CoreFunc
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
span
=
parser
.
parse
:
:
<
kw
:
:
core
>
(
)
?
.
0
;
parser
.
parse
:
:
<
kw
:
:
func
>
(
)
?
;
let
id
=
parser
.
parse
(
)
?
;
let
name
=
parser
.
parse
(
)
?
;
let
kind
=
parser
.
parse
(
)
?
;
Ok
(
Self
{
span
id
name
kind
}
)
}
}
#
[
derive
(
Debug
)
]
#
[
allow
(
missing_docs
)
]
pub
enum
CoreFuncKind
<
'
a
>
{
Lower
(
CanonLower
<
'
a
>
)
Alias
(
InlineExportAlias
<
'
a
true
>
)
ResourceNew
(
CanonResourceNew
<
'
a
>
)
ResourceDrop
(
CanonResourceDrop
<
'
a
>
)
ResourceRep
(
CanonResourceRep
<
'
a
>
)
}
impl
<
'
a
>
Parse
<
'
a
>
for
CoreFuncKind
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
parser
.
parens
(
|
parser
|
{
let
mut
l
=
parser
.
lookahead1
(
)
;
if
l
.
peek
:
:
<
kw
:
:
canon
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
canon
>
(
)
?
;
}
else
if
l
.
peek
:
:
<
kw
:
:
alias
>
(
)
{
return
Ok
(
Self
:
:
Alias
(
parser
.
parse
(
)
?
)
)
;
}
else
{
return
Err
(
l
.
error
(
)
)
;
}
let
mut
l
=
parser
.
lookahead1
(
)
;
if
l
.
peek
:
:
<
kw
:
:
lower
>
(
)
{
Ok
(
CoreFuncKind
:
:
Lower
(
parser
.
parse
(
)
?
)
)
}
else
if
l
.
peek
:
:
<
kw
:
:
resource_new
>
(
)
{
Ok
(
CoreFuncKind
:
:
ResourceNew
(
parser
.
parse
(
)
?
)
)
}
else
if
l
.
peek
:
:
<
kw
:
:
resource_drop
>
(
)
{
Ok
(
CoreFuncKind
:
:
ResourceDrop
(
parser
.
parse
(
)
?
)
)
}
else
if
l
.
peek
:
:
<
kw
:
:
resource_rep
>
(
)
{
Ok
(
CoreFuncKind
:
:
ResourceRep
(
parser
.
parse
(
)
?
)
)
}
else
{
Err
(
l
.
error
(
)
)
}
}
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
Func
<
'
a
>
{
pub
span
:
Span
pub
id
:
Option
<
Id
<
'
a
>
>
pub
name
:
Option
<
NameAnnotation
<
'
a
>
>
pub
exports
:
InlineExport
<
'
a
>
pub
kind
:
FuncKind
<
'
a
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
Func
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
span
=
parser
.
parse
:
:
<
kw
:
:
func
>
(
)
?
.
0
;
let
id
=
parser
.
parse
(
)
?
;
let
name
=
parser
.
parse
(
)
?
;
let
exports
=
parser
.
parse
(
)
?
;
let
kind
=
parser
.
parse
(
)
?
;
Ok
(
Self
{
span
id
name
exports
kind
}
)
}
}
#
[
derive
(
Debug
)
]
pub
enum
FuncKind
<
'
a
>
{
Import
{
import
:
InlineImport
<
'
a
>
ty
:
ComponentTypeUse
<
'
a
ComponentFunctionType
<
'
a
>
>
}
Lift
{
ty
:
ComponentTypeUse
<
'
a
ComponentFunctionType
<
'
a
>
>
info
:
CanonLift
<
'
a
>
}
Alias
(
InlineExportAlias
<
'
a
false
>
)
}
impl
<
'
a
>
Parse
<
'
a
>
for
FuncKind
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
if
let
Some
(
import
)
=
parser
.
parse
(
)
?
{
Ok
(
Self
:
:
Import
{
import
ty
:
parser
.
parse
(
)
?
}
)
}
else
if
parser
.
peek
:
:
<
LParen
>
(
)
&
&
parser
.
peek2
:
:
<
kw
:
:
alias
>
(
)
{
parser
.
parens
(
|
parser
|
Ok
(
Self
:
:
Alias
(
parser
.
parse
(
)
?
)
)
)
}
else
{
Ok
(
Self
:
:
Lift
{
ty
:
parser
.
parse
(
)
?
info
:
parser
.
parens
(
|
parser
|
{
parser
.
parse
:
:
<
kw
:
:
canon
>
(
)
?
;
parser
.
parse
(
)
}
)
?
}
)
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
CanonicalFunc
<
'
a
>
{
pub
span
:
Span
pub
id
:
Option
<
Id
<
'
a
>
>
pub
name
:
Option
<
NameAnnotation
<
'
a
>
>
pub
kind
:
CanonicalFuncKind
<
'
a
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
CanonicalFunc
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
span
=
parser
.
parse
:
:
<
kw
:
:
canon
>
(
)
?
.
0
;
if
parser
.
peek
:
:
<
kw
:
:
lift
>
(
)
{
let
info
=
parser
.
parse
(
)
?
;
let
(
id
name
ty
)
=
parser
.
parens
(
|
parser
|
{
parser
.
parse
:
:
<
kw
:
:
func
>
(
)
?
;
let
id
=
parser
.
parse
(
)
?
;
let
name
=
parser
.
parse
(
)
?
;
let
ty
=
parser
.
parse
(
)
?
;
Ok
(
(
id
name
ty
)
)
}
)
?
;
Ok
(
Self
{
span
id
name
kind
:
CanonicalFuncKind
:
:
Lift
{
info
ty
}
}
)
}
else
if
parser
.
peek
:
:
<
kw
:
:
lower
>
(
)
{
Self
:
:
parse_core_func
(
span
parser
CanonicalFuncKind
:
:
Lower
)
}
else
if
parser
.
peek
:
:
<
kw
:
:
resource_new
>
(
)
{
Self
:
:
parse_core_func
(
span
parser
CanonicalFuncKind
:
:
ResourceNew
)
}
else
if
parser
.
peek
:
:
<
kw
:
:
resource_drop
>
(
)
{
Self
:
:
parse_core_func
(
span
parser
CanonicalFuncKind
:
:
ResourceDrop
)
}
else
if
parser
.
peek
:
:
<
kw
:
:
resource_rep
>
(
)
{
Self
:
:
parse_core_func
(
span
parser
CanonicalFuncKind
:
:
ResourceRep
)
}
else
{
Err
(
parser
.
error
(
"
expected
canon
lift
or
canon
lower
"
)
)
}
}
}
impl
<
'
a
>
CanonicalFunc
<
'
a
>
{
fn
parse_core_func
<
T
>
(
span
:
Span
parser
:
Parser
<
'
a
>
variant
:
fn
(
T
)
-
>
CanonicalFuncKind
<
'
a
>
)
-
>
Result
<
Self
>
where
T
:
Parse
<
'
a
>
{
let
info
=
parser
.
parse
(
)
?
;
let
(
id
name
)
=
parser
.
parens
(
|
parser
|
{
parser
.
parse
:
:
<
kw
:
:
core
>
(
)
?
;
parser
.
parse
:
:
<
kw
:
:
func
>
(
)
?
;
let
id
=
parser
.
parse
(
)
?
;
let
name
=
parser
.
parse
(
)
?
;
Ok
(
(
id
name
)
)
}
)
?
;
Ok
(
Self
{
span
id
name
kind
:
variant
(
info
)
}
)
}
}
#
[
derive
(
Debug
)
]
#
[
allow
(
missing_docs
)
]
pub
enum
CanonicalFuncKind
<
'
a
>
{
Lift
{
ty
:
ComponentTypeUse
<
'
a
ComponentFunctionType
<
'
a
>
>
info
:
CanonLift
<
'
a
>
}
Lower
(
CanonLower
<
'
a
>
)
ResourceNew
(
CanonResourceNew
<
'
a
>
)
ResourceDrop
(
CanonResourceDrop
<
'
a
>
)
ResourceRep
(
CanonResourceRep
<
'
a
>
)
}
#
[
derive
(
Debug
)
]
pub
struct
CanonLift
<
'
a
>
{
pub
func
:
CoreItemRef
<
'
a
kw
:
:
func
>
pub
opts
:
Vec
<
CanonOpt
<
'
a
>
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
CanonLift
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
parser
.
parse
:
:
<
kw
:
:
lift
>
(
)
?
;
Ok
(
Self
{
func
:
parser
.
parens
(
|
parser
|
{
parser
.
parse
:
:
<
kw
:
:
core
>
(
)
?
;
parser
.
parse
(
)
}
)
?
opts
:
parser
.
parse
(
)
?
}
)
}
}
impl
Default
for
CanonLift
<
'
_
>
{
fn
default
(
)
-
>
Self
{
let
span
=
Span
:
:
from_offset
(
0
)
;
Self
{
func
:
CoreItemRef
{
kind
:
kw
:
:
func
(
span
)
idx
:
Index
:
:
Num
(
0
span
)
export_name
:
None
}
opts
:
Vec
:
:
new
(
)
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
CanonLower
<
'
a
>
{
pub
func
:
ItemRef
<
'
a
kw
:
:
func
>
pub
opts
:
Vec
<
CanonOpt
<
'
a
>
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
CanonLower
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
parser
.
parse
:
:
<
kw
:
:
lower
>
(
)
?
;
Ok
(
Self
{
func
:
parser
.
parens
(
|
parser
|
parser
.
parse
(
)
)
?
opts
:
parser
.
parse
(
)
?
}
)
}
}
impl
Default
for
CanonLower
<
'
_
>
{
fn
default
(
)
-
>
Self
{
let
span
=
Span
:
:
from_offset
(
0
)
;
Self
{
func
:
ItemRef
{
kind
:
kw
:
:
func
(
span
)
idx
:
Index
:
:
Num
(
0
span
)
export_names
:
Vec
:
:
new
(
)
}
opts
:
Vec
:
:
new
(
)
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
CanonResourceNew
<
'
a
>
{
pub
ty
:
Index
<
'
a
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
CanonResourceNew
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
parser
.
parse
:
:
<
kw
:
:
resource_new
>
(
)
?
;
Ok
(
Self
{
ty
:
parser
.
parse
(
)
?
}
)
}
}
impl
Default
for
CanonResourceNew
<
'
_
>
{
fn
default
(
)
-
>
Self
{
CanonResourceNew
{
ty
:
Index
:
:
Num
(
0
Span
:
:
from_offset
(
0
)
)
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
CanonResourceDrop
<
'
a
>
{
pub
ty
:
ComponentValType
<
'
a
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
CanonResourceDrop
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
parser
.
parse
:
:
<
kw
:
:
resource_drop
>
(
)
?
;
Ok
(
Self
{
ty
:
parser
.
parse
(
)
?
}
)
}
}
impl
Default
for
CanonResourceDrop
<
'
_
>
{
fn
default
(
)
-
>
Self
{
CanonResourceDrop
{
ty
:
ComponentValType
:
:
Ref
(
Index
:
:
Num
(
0
Span
:
:
from_offset
(
0
)
)
)
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
CanonResourceRep
<
'
a
>
{
pub
ty
:
Index
<
'
a
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
CanonResourceRep
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
parser
.
parse
:
:
<
kw
:
:
resource_rep
>
(
)
?
;
Ok
(
Self
{
ty
:
parser
.
parse
(
)
?
}
)
}
}
impl
Default
for
CanonResourceRep
<
'
_
>
{
fn
default
(
)
-
>
Self
{
CanonResourceRep
{
ty
:
Index
:
:
Num
(
0
Span
:
:
from_offset
(
0
)
)
}
}
}
#
[
derive
(
Debug
)
]
pub
enum
CanonOpt
<
'
a
>
{
StringUtf8
StringUtf16
StringLatin1Utf16
Memory
(
CoreItemRef
<
'
a
kw
:
:
memory
>
)
Realloc
(
CoreItemRef
<
'
a
kw
:
:
func
>
)
PostReturn
(
CoreItemRef
<
'
a
kw
:
:
func
>
)
}
impl
<
'
a
>
Parse
<
'
a
>
for
CanonOpt
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
mut
l
=
parser
.
lookahead1
(
)
;
if
l
.
peek
:
:
<
kw
:
:
string_utf8
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
string_utf8
>
(
)
?
;
Ok
(
Self
:
:
StringUtf8
)
}
else
if
l
.
peek
:
:
<
kw
:
:
string_utf16
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
string_utf16
>
(
)
?
;
Ok
(
Self
:
:
StringUtf16
)
}
else
if
l
.
peek
:
:
<
kw
:
:
string_latin1_utf16
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
string_latin1_utf16
>
(
)
?
;
Ok
(
Self
:
:
StringLatin1Utf16
)
}
else
if
l
.
peek
:
:
<
LParen
>
(
)
{
parser
.
parens
(
|
parser
|
{
let
mut
l
=
parser
.
lookahead1
(
)
;
if
l
.
peek
:
:
<
kw
:
:
memory
>
(
)
{
let
span
=
parser
.
parse
:
:
<
kw
:
:
memory
>
(
)
?
.
0
;
Ok
(
CanonOpt
:
:
Memory
(
parse_trailing_item_ref
(
kw
:
:
memory
(
span
)
parser
)
?
)
)
}
else
if
l
.
peek
:
:
<
kw
:
:
realloc
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
realloc
>
(
)
?
;
Ok
(
CanonOpt
:
:
Realloc
(
parser
.
parse
:
:
<
IndexOrCoreRef
<
'
_
_
>
>
(
)
?
.
0
)
)
}
else
if
l
.
peek
:
:
<
kw
:
:
post_return
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
post_return
>
(
)
?
;
Ok
(
CanonOpt
:
:
PostReturn
(
parser
.
parse
:
:
<
IndexOrCoreRef
<
'
_
_
>
>
(
)
?
.
0
)
)
}
else
{
Err
(
l
.
error
(
)
)
}
}
)
}
else
{
Err
(
l
.
error
(
)
)
}
}
}
fn
parse_trailing_item_ref
<
T
>
(
kind
:
T
parser
:
Parser
)
-
>
Result
<
CoreItemRef
<
T
>
>
{
Ok
(
CoreItemRef
{
kind
idx
:
parser
.
parse
(
)
?
export_name
:
parser
.
parse
(
)
?
}
)
}
impl
<
'
a
>
Parse
<
'
a
>
for
Vec
<
CanonOpt
<
'
a
>
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
mut
funcs
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
{
funcs
.
push
(
parser
.
parse
(
)
?
)
;
}
Ok
(
funcs
)
}
}
