use
crate
:
:
component
:
:
*
;
use
crate
:
:
core
;
use
crate
:
:
kw
;
use
crate
:
:
parser
:
:
{
Parse
Parser
Result
}
;
use
crate
:
:
token
:
:
{
Id
Index
LParen
NameAnnotation
Span
}
;
#
[
derive
(
Debug
)
]
pub
struct
Instance
<
'
a
>
{
pub
span
:
Span
pub
id
:
Option
<
Id
<
'
a
>
>
pub
name
:
Option
<
NameAnnotation
<
'
a
>
>
pub
exports
:
core
:
:
InlineExport
<
'
a
>
pub
kind
:
InstanceKind
<
'
a
>
}
#
[
derive
(
Debug
)
]
pub
enum
InstanceKind
<
'
a
>
{
Import
{
import
:
InlineImport
<
'
a
>
ty
:
ComponentTypeUse
<
'
a
InstanceType
<
'
a
>
>
}
Module
{
module
:
ItemRef
<
'
a
kw
:
:
module
>
args
:
Vec
<
NamedModuleArg
<
'
a
>
>
}
Component
{
component
:
ItemRef
<
'
a
kw
:
:
component
>
args
:
Vec
<
NamedComponentArg
<
'
a
>
>
}
BundleOfExports
{
args
:
Vec
<
CoreExport
<
'
a
>
>
}
BundleOfComponentExports
{
args
:
Vec
<
ComponentExport
<
'
a
>
>
}
}
#
[
derive
(
Debug
)
]
#
[
allow
(
missing_docs
)
]
pub
struct
NamedModuleArg
<
'
a
>
{
pub
name
:
&
'
a
str
pub
arg
:
ModuleArg
<
'
a
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
NamedModuleArg
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
parser
.
parse
:
:
<
kw
:
:
with
>
(
)
?
;
Ok
(
NamedModuleArg
{
name
:
parser
.
parse
(
)
?
arg
:
parser
.
parse
(
)
?
}
)
}
}
#
[
derive
(
Debug
)
]
#
[
allow
(
missing_docs
)
]
pub
struct
NamedComponentArg
<
'
a
>
{
pub
name
:
&
'
a
str
pub
arg
:
ComponentArg
<
'
a
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
NamedComponentArg
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
parser
.
parse
:
:
<
kw
:
:
with
>
(
)
?
;
Ok
(
NamedComponentArg
{
name
:
parser
.
parse
(
)
?
arg
:
parser
.
parse
(
)
?
}
)
}
}
#
[
derive
(
Debug
)
]
pub
enum
ModuleArg
<
'
a
>
{
Def
(
ItemRef
<
'
a
kw
:
:
instance
>
)
BundleOfExports
(
Span
Vec
<
CoreExport
<
'
a
>
>
)
}
#
[
derive
(
Debug
)
]
pub
enum
ComponentArg
<
'
a
>
{
Def
(
ItemRef
<
'
a
DefTypeKind
>
)
BundleOfExports
(
Span
Vec
<
ComponentExport
<
'
a
>
>
)
}
impl
<
'
a
>
Parse
<
'
a
>
for
Instance
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
span
=
parser
.
parse
:
:
<
kw
:
:
instance
>
(
)
?
.
0
;
let
id
=
parser
.
parse
(
)
?
;
let
name
=
parser
.
parse
(
)
?
;
let
exports
=
parser
.
parse
(
)
?
;
let
kind
=
if
let
Some
(
import
)
=
parser
.
parse
(
)
?
{
InstanceKind
:
:
Import
{
import
ty
:
parser
.
parse
(
)
?
}
}
else
if
parser
.
peek
:
:
<
LParen
>
(
)
&
&
parser
.
peek2
:
:
<
kw
:
:
instantiate
>
(
)
{
parser
.
parens
(
|
p
|
{
p
.
parse
:
:
<
kw
:
:
instantiate
>
(
)
?
;
if
p
.
peek2
:
:
<
kw
:
:
module
>
(
)
{
let
module
=
p
.
parse
(
)
?
;
let
mut
args
=
Vec
:
:
new
(
)
;
while
!
p
.
is_empty
(
)
{
args
.
push
(
p
.
parens
(
|
p
|
p
.
parse
(
)
)
?
)
;
}
Ok
(
InstanceKind
:
:
Module
{
module
args
}
)
}
else
if
p
.
peek2
:
:
<
kw
:
:
component
>
(
)
{
let
component
=
p
.
parse
(
)
?
;
let
mut
args
=
Vec
:
:
new
(
)
;
while
!
p
.
is_empty
(
)
{
args
.
push
(
p
.
parens
(
|
p
|
p
.
parse
(
)
)
?
)
;
}
Ok
(
InstanceKind
:
:
Component
{
component
args
}
)
}
else
{
return
Err
(
parser
.
error
(
"
expected
module
or
component
"
)
)
;
}
}
)
?
}
else
if
parser
.
peek
:
:
<
kw
:
:
core
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
core
>
(
)
?
;
let
mut
args
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
{
args
.
push
(
parser
.
parens
(
|
p
|
p
.
parse
(
)
)
?
)
;
}
InstanceKind
:
:
BundleOfExports
{
args
}
}
else
{
let
mut
args
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
{
args
.
push
(
parser
.
parens
(
|
p
|
p
.
parse
(
)
)
?
)
;
}
InstanceKind
:
:
BundleOfComponentExports
{
args
}
}
;
Ok
(
Instance
{
span
id
name
exports
kind
}
)
}
}
impl
<
'
a
>
Parse
<
'
a
>
for
ModuleArg
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
if
parser
.
peek
:
:
<
ItemRef
<
'
a
kw
:
:
instance
>
>
(
)
&
&
parser
.
peek3
:
:
<
Index
>
(
)
{
let
def
=
parser
.
parse
:
:
<
ItemRef
<
kw
:
:
instance
>
>
(
)
?
;
Ok
(
ModuleArg
:
:
Def
(
def
)
)
}
else
if
parser
.
peek
:
:
<
LParen
>
(
)
&
&
parser
.
peek2
:
:
<
kw
:
:
instance
>
(
)
{
let
(
span
exports
)
=
parser
.
parens
(
|
p
|
{
let
span
=
p
.
parse
:
:
<
kw
:
:
instance
>
(
)
?
.
0
;
let
mut
exports
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
{
exports
.
push
(
parser
.
parens
(
|
parser
|
parser
.
parse
(
)
)
?
)
;
}
Ok
(
(
span
exports
)
)
}
)
?
;
Ok
(
ModuleArg
:
:
BundleOfExports
(
span
exports
)
)
}
else
{
Err
(
parser
.
error
(
"
expected
an
instance
"
)
)
}
}
}
impl
<
'
a
>
Parse
<
'
a
>
for
ComponentArg
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
if
parser
.
peek
:
:
<
ItemRef
<
'
a
DefTypeKind
>
>
(
)
&
&
parser
.
peek3
:
:
<
Index
>
(
)
{
let
def
=
parser
.
parse
:
:
<
ItemRef
<
'
a
DefTypeKind
>
>
(
)
?
;
Ok
(
ComponentArg
:
:
Def
(
def
)
)
}
else
if
parser
.
peek
:
:
<
LParen
>
(
)
&
&
parser
.
peek2
:
:
<
kw
:
:
instance
>
(
)
{
let
(
span
exports
)
=
parser
.
parens
(
|
p
|
{
let
span
=
p
.
parse
:
:
<
kw
:
:
instance
>
(
)
?
.
0
;
let
mut
exports
=
Vec
:
:
new
(
)
;
while
!
p
.
is_empty
(
)
{
exports
.
push
(
p
.
parens
(
|
p
|
p
.
parse
(
)
)
?
)
;
}
Ok
(
(
span
exports
)
)
}
)
?
;
Ok
(
ComponentArg
:
:
BundleOfExports
(
span
exports
)
)
}
else
{
Err
(
parser
.
error
(
"
expected
def
type
type
or
instance
"
)
)
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
CoreExport
<
'
a
>
{
pub
span
:
Span
pub
name
:
&
'
a
str
pub
index
:
ItemRef
<
'
a
core
:
:
ExportKind
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
CoreExport
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
Ok
(
CoreExport
{
span
:
parser
.
parse
:
:
<
kw
:
:
export
>
(
)
?
.
0
name
:
parser
.
parse
(
)
?
index
:
parser
.
parse
(
)
?
}
)
}
}
