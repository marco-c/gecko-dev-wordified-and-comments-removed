use
crate
:
:
parser
:
:
{
Cursor
Parse
Parser
Peek
Result
}
;
use
crate
:
:
token
:
:
Index
;
fn
peek
<
K
:
Peek
>
(
cursor
:
Cursor
)
-
>
Result
<
bool
>
{
if
!
K
:
:
peek
(
cursor
)
?
{
return
Ok
(
false
)
;
}
let
cursor
=
match
cursor
.
keyword
(
)
?
{
Some
(
(
_
c
)
)
=
>
c
_
=
>
return
Ok
(
false
)
}
;
let
cursor
=
match
cursor
.
id
(
)
?
{
Some
(
(
_
cursor
)
)
=
>
Some
(
cursor
)
None
=
>
cursor
.
integer
(
)
?
.
map
(
|
p
|
p
.
1
)
}
;
Ok
(
match
cursor
{
Some
(
cursor
)
=
>
cursor
.
rparen
(
)
?
.
is_some
(
)
|
|
cursor
.
string
(
)
?
.
is_some
(
)
None
=
>
false
}
)
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
CoreItemRef
<
'
a
K
>
{
pub
kind
:
K
pub
idx
:
Index
<
'
a
>
pub
export_name
:
Option
<
&
'
a
str
>
}
impl
<
'
a
K
:
Parse
<
'
a
>
>
Parse
<
'
a
>
for
CoreItemRef
<
'
a
K
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
kind
=
parser
.
parse
:
:
<
K
>
(
)
?
;
let
idx
=
parser
.
parse
(
)
?
;
let
export_name
=
parser
.
parse
(
)
?
;
Ok
(
Self
{
kind
idx
export_name
}
)
}
}
impl
<
'
a
K
:
Peek
>
Peek
for
CoreItemRef
<
'
a
K
>
{
fn
peek
(
cursor
:
Cursor
<
'
_
>
)
-
>
Result
<
bool
>
{
peek
:
:
<
K
>
(
cursor
)
}
fn
display
(
)
-
>
&
'
static
str
{
"
a
core
item
reference
"
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
ItemRef
<
'
a
K
>
{
pub
kind
:
K
pub
idx
:
Index
<
'
a
>
pub
export_names
:
Vec
<
&
'
a
str
>
}
impl
<
'
a
K
:
Parse
<
'
a
>
>
Parse
<
'
a
>
for
ItemRef
<
'
a
K
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
kind
=
parser
.
parse
:
:
<
K
>
(
)
?
;
let
idx
=
parser
.
parse
(
)
?
;
let
mut
export_names
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
{
export_names
.
push
(
parser
.
parse
(
)
?
)
;
}
Ok
(
Self
{
kind
idx
export_names
}
)
}
}
impl
<
'
a
K
:
Peek
>
Peek
for
ItemRef
<
'
a
K
>
{
fn
peek
(
cursor
:
Cursor
<
'
_
>
)
-
>
Result
<
bool
>
{
peek
:
:
<
K
>
(
cursor
)
}
fn
display
(
)
-
>
&
'
static
str
{
"
a
component
item
reference
"
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
IndexOrRef
<
'
a
K
>
(
pub
ItemRef
<
'
a
K
>
)
;
impl
<
'
a
K
>
Parse
<
'
a
>
for
IndexOrRef
<
'
a
K
>
where
K
:
Parse
<
'
a
>
+
Default
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
if
parser
.
peek
:
:
<
Index
<
'
_
>
>
(
)
?
{
Ok
(
IndexOrRef
(
ItemRef
{
kind
:
K
:
:
default
(
)
idx
:
parser
.
parse
(
)
?
export_names
:
Vec
:
:
new
(
)
}
)
)
}
else
{
Ok
(
IndexOrRef
(
parser
.
parens
(
|
p
|
p
.
parse
(
)
)
?
)
)
}
}
}
#
[
derive
(
Clone
Debug
)
]
pub
struct
IndexOrCoreRef
<
'
a
K
>
(
pub
CoreItemRef
<
'
a
K
>
)
;
impl
<
'
a
K
>
Parse
<
'
a
>
for
IndexOrCoreRef
<
'
a
K
>
where
K
:
Parse
<
'
a
>
+
Default
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
if
parser
.
peek
:
:
<
Index
<
'
_
>
>
(
)
?
{
Ok
(
IndexOrCoreRef
(
CoreItemRef
{
kind
:
K
:
:
default
(
)
idx
:
parser
.
parse
(
)
?
export_name
:
None
}
)
)
}
else
{
Ok
(
IndexOrCoreRef
(
parser
.
parens
(
|
p
|
p
.
parse
(
)
)
?
)
)
}
}
}
