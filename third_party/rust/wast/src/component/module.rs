use
crate
:
:
component
:
:
*
;
use
crate
:
:
core
;
use
crate
:
:
kw
;
use
crate
:
:
parser
:
:
{
Parse
Parser
Result
}
;
use
crate
:
:
token
:
:
{
Id
NameAnnotation
Span
}
;
#
[
derive
(
Debug
)
]
pub
struct
Module
<
'
a
>
{
pub
span
:
Span
pub
id
:
Option
<
Id
<
'
a
>
>
pub
name
:
Option
<
NameAnnotation
<
'
a
>
>
pub
exports
:
core
:
:
InlineExport
<
'
a
>
pub
kind
:
ModuleKind
<
'
a
>
}
#
[
derive
(
Debug
)
]
pub
enum
ModuleKind
<
'
a
>
{
Import
{
import
:
InlineImport
<
'
a
>
ty
:
ComponentTypeUse
<
'
a
ModuleType
<
'
a
>
>
}
Inline
{
fields
:
Vec
<
core
:
:
ModuleField
<
'
a
>
>
}
}
impl
<
'
a
>
Parse
<
'
a
>
for
Module
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
if
parser
.
parens_depth
(
)
>
100
{
return
Err
(
parser
.
error
(
"
module
nesting
too
deep
"
)
)
;
}
let
span
=
parser
.
parse
:
:
<
kw
:
:
module
>
(
)
?
.
0
;
let
id
=
parser
.
parse
(
)
?
;
let
name
=
parser
.
parse
(
)
?
;
let
exports
=
parser
.
parse
(
)
?
;
let
kind
=
if
let
Some
(
import
)
=
parser
.
parse
(
)
?
{
ModuleKind
:
:
Import
{
import
ty
:
parser
.
parse
(
)
?
}
}
else
{
let
mut
fields
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
{
fields
.
push
(
parser
.
parens
(
|
p
|
p
.
parse
(
)
)
?
)
;
}
ModuleKind
:
:
Inline
{
fields
}
}
;
Ok
(
Module
{
span
id
name
exports
kind
}
)
}
}
