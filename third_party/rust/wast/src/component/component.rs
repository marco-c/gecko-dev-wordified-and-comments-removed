use
crate
:
:
annotation
;
use
crate
:
:
component
:
:
*
;
use
crate
:
:
kw
;
use
crate
:
:
parser
:
:
{
Parse
Parser
Result
}
;
use
crate
:
:
token
:
:
Index
;
use
crate
:
:
token
:
:
{
Id
NameAnnotation
Span
}
;
#
[
derive
(
Debug
)
]
pub
struct
Component
<
'
a
>
{
pub
span
:
Span
pub
id
:
Option
<
Id
<
'
a
>
>
pub
name
:
Option
<
NameAnnotation
<
'
a
>
>
pub
kind
:
ComponentKind
<
'
a
>
}
#
[
derive
(
Debug
)
]
pub
enum
ComponentKind
<
'
a
>
{
Text
(
Vec
<
ComponentField
<
'
a
>
>
)
Binary
(
Vec
<
&
'
a
[
u8
]
>
)
}
impl
<
'
a
>
Component
<
'
a
>
{
pub
fn
resolve
(
&
mut
self
)
-
>
std
:
:
result
:
:
Result
<
(
)
crate
:
:
Error
>
{
match
&
mut
self
.
kind
{
ComponentKind
:
:
Text
(
fields
)
=
>
{
crate
:
:
component
:
:
expand
:
:
expand
(
fields
)
;
}
ComponentKind
:
:
Binary
(
_
)
=
>
{
}
}
crate
:
:
component
:
:
resolve
:
:
resolve
(
self
)
}
pub
fn
encode
(
&
mut
self
)
-
>
std
:
:
result
:
:
Result
<
Vec
<
u8
>
crate
:
:
Error
>
{
self
.
resolve
(
)
?
;
Ok
(
crate
:
:
component
:
:
binary
:
:
encode
(
self
)
)
}
pub
(
crate
)
fn
validate
(
&
self
parser
:
Parser
<
'
_
>
)
-
>
Result
<
(
)
>
{
let
mut
starts
=
0
;
if
let
ComponentKind
:
:
Text
(
fields
)
=
&
self
.
kind
{
for
item
in
fields
.
iter
(
)
{
if
let
ComponentField
:
:
Start
(
_
)
=
item
{
starts
+
=
1
;
}
}
}
if
starts
>
1
{
return
Err
(
parser
.
error
(
"
multiple
start
sections
found
"
)
)
;
}
Ok
(
(
)
)
}
}
impl
<
'
a
>
Parse
<
'
a
>
for
Component
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
_r
=
parser
.
register_annotation
(
"
custom
"
)
;
let
span
=
parser
.
parse
:
:
<
kw
:
:
component
>
(
)
?
.
0
;
let
id
=
parser
.
parse
(
)
?
;
let
name
=
parser
.
parse
(
)
?
;
let
kind
=
if
parser
.
peek
:
:
<
kw
:
:
binary
>
(
)
{
parser
.
parse
:
:
<
kw
:
:
binary
>
(
)
?
;
let
mut
data
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
{
data
.
push
(
parser
.
parse
(
)
?
)
;
}
ComponentKind
:
:
Binary
(
data
)
}
else
{
ComponentKind
:
:
Text
(
ComponentField
:
:
parse_remaining
(
parser
)
?
)
}
;
Ok
(
Component
{
span
id
name
kind
}
)
}
}
#
[
allow
(
missing_docs
)
]
#
[
derive
(
Debug
)
]
pub
enum
ComponentField
<
'
a
>
{
CoreModule
(
CoreModule
<
'
a
>
)
CoreInstance
(
CoreInstance
<
'
a
>
)
CoreType
(
CoreType
<
'
a
>
)
Component
(
NestedComponent
<
'
a
>
)
Instance
(
Instance
<
'
a
>
)
Alias
(
Alias
<
'
a
>
)
Type
(
Type
<
'
a
>
)
CanonicalFunc
(
CanonicalFunc
<
'
a
>
)
CoreFunc
(
CoreFunc
<
'
a
>
)
Func
(
Func
<
'
a
>
)
Start
(
Start
<
'
a
>
)
Import
(
ComponentImport
<
'
a
>
)
Export
(
ComponentExport
<
'
a
>
)
Custom
(
Custom
<
'
a
>
)
}
impl
<
'
a
>
ComponentField
<
'
a
>
{
fn
parse_remaining
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Vec
<
ComponentField
>
>
{
let
mut
fields
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
{
fields
.
push
(
parser
.
parens
(
ComponentField
:
:
parse
)
?
)
;
}
Ok
(
fields
)
}
}
impl
<
'
a
>
Parse
<
'
a
>
for
ComponentField
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
if
parser
.
peek
:
:
<
kw
:
:
core
>
(
)
{
if
parser
.
peek2
:
:
<
kw
:
:
module
>
(
)
{
return
Ok
(
Self
:
:
CoreModule
(
parser
.
parse
(
)
?
)
)
;
}
if
parser
.
peek2
:
:
<
kw
:
:
instance
>
(
)
{
return
Ok
(
Self
:
:
CoreInstance
(
parser
.
parse
(
)
?
)
)
;
}
if
parser
.
peek2
:
:
<
kw
:
:
r
#
type
>
(
)
{
return
Ok
(
Self
:
:
CoreType
(
parser
.
parse
(
)
?
)
)
;
}
if
parser
.
peek2
:
:
<
kw
:
:
func
>
(
)
{
return
Ok
(
Self
:
:
CoreFunc
(
parser
.
parse
(
)
?
)
)
;
}
}
else
{
if
parser
.
peek
:
:
<
kw
:
:
component
>
(
)
{
return
Ok
(
Self
:
:
Component
(
parser
.
parse
(
)
?
)
)
;
}
if
parser
.
peek
:
:
<
kw
:
:
instance
>
(
)
{
return
Ok
(
Self
:
:
Instance
(
parser
.
parse
(
)
?
)
)
;
}
if
parser
.
peek
:
:
<
kw
:
:
alias
>
(
)
{
return
Ok
(
Self
:
:
Alias
(
parser
.
parse
(
)
?
)
)
;
}
if
parser
.
peek
:
:
<
kw
:
:
r
#
type
>
(
)
{
return
Ok
(
Self
:
:
Type
(
parser
.
parse
(
)
?
)
)
;
}
if
parser
.
peek
:
:
<
kw
:
:
import
>
(
)
{
return
Ok
(
Self
:
:
Import
(
parser
.
parse
(
)
?
)
)
;
}
if
parser
.
peek
:
:
<
kw
:
:
func
>
(
)
{
return
Ok
(
Self
:
:
Func
(
parser
.
parse
(
)
?
)
)
;
}
if
parser
.
peek
:
:
<
kw
:
:
export
>
(
)
{
return
Ok
(
Self
:
:
Export
(
parser
.
parse
(
)
?
)
)
;
}
if
parser
.
peek
:
:
<
kw
:
:
start
>
(
)
{
return
Ok
(
Self
:
:
Start
(
parser
.
parse
(
)
?
)
)
;
}
if
parser
.
peek
:
:
<
annotation
:
:
custom
>
(
)
{
return
Ok
(
Self
:
:
Custom
(
parser
.
parse
(
)
?
)
)
;
}
}
Err
(
parser
.
error
(
"
expected
valid
component
field
"
)
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
Start
<
'
a
>
{
pub
func
:
Index
<
'
a
>
pub
args
:
Vec
<
ItemRef
<
'
a
kw
:
:
value
>
>
pub
results
:
Vec
<
Option
<
Id
<
'
a
>
>
>
}
impl
<
'
a
>
Parse
<
'
a
>
for
Start
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
parser
.
parse
:
:
<
kw
:
:
start
>
(
)
?
;
let
func
=
parser
.
parse
(
)
?
;
let
mut
args
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
&
&
!
parser
.
peek2
:
:
<
kw
:
:
result
>
(
)
{
args
.
push
(
parser
.
parens
(
|
parser
|
parser
.
parse
(
)
)
?
)
;
}
let
mut
results
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
&
&
parser
.
peek2
:
:
<
kw
:
:
result
>
(
)
{
results
.
push
(
parser
.
parens
(
|
parser
|
{
parser
.
parse
:
:
<
kw
:
:
result
>
(
)
?
;
parser
.
parens
(
|
parser
|
{
parser
.
parse
:
:
<
kw
:
:
value
>
(
)
?
;
parser
.
parse
(
)
}
)
}
)
?
)
;
}
Ok
(
Start
{
func
args
results
}
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
NestedComponent
<
'
a
>
{
pub
span
:
Span
pub
id
:
Option
<
Id
<
'
a
>
>
pub
name
:
Option
<
NameAnnotation
<
'
a
>
>
pub
exports
:
InlineExport
<
'
a
>
pub
kind
:
NestedComponentKind
<
'
a
>
}
#
[
derive
(
Debug
)
]
pub
enum
NestedComponentKind
<
'
a
>
{
Import
{
import
:
InlineImport
<
'
a
>
ty
:
ComponentTypeUse
<
'
a
ComponentType
<
'
a
>
>
}
Inline
(
Vec
<
ComponentField
<
'
a
>
>
)
}
impl
<
'
a
>
Parse
<
'
a
>
for
NestedComponent
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
parser
.
depth_check
(
)
?
;
let
span
=
parser
.
parse
:
:
<
kw
:
:
component
>
(
)
?
.
0
;
let
id
=
parser
.
parse
(
)
?
;
let
name
=
parser
.
parse
(
)
?
;
let
exports
=
parser
.
parse
(
)
?
;
let
kind
=
if
let
Some
(
import
)
=
parser
.
parse
(
)
?
{
NestedComponentKind
:
:
Import
{
import
ty
:
parser
.
parse
(
)
?
}
}
else
{
let
mut
fields
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
{
fields
.
push
(
parser
.
parens
(
|
p
|
p
.
parse
(
)
)
?
)
;
}
NestedComponentKind
:
:
Inline
(
fields
)
}
;
Ok
(
NestedComponent
{
span
id
name
exports
kind
}
)
}
}
