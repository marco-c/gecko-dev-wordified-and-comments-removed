use
crate
:
:
core
:
:
*
;
use
crate
:
:
kw
;
use
crate
:
:
parser
:
:
{
Parse
Parser
Peek
Result
}
;
use
crate
:
:
token
:
:
{
Id
Index
LParen
NameAnnotation
Span
}
;
#
[
derive
(
Debug
)
]
pub
struct
Table
<
'
a
>
{
pub
span
:
Span
pub
id
:
Option
<
Id
<
'
a
>
>
pub
name
:
Option
<
NameAnnotation
<
'
a
>
>
pub
exports
:
InlineExport
<
'
a
>
pub
kind
:
TableKind
<
'
a
>
}
#
[
derive
(
Debug
)
]
pub
enum
TableKind
<
'
a
>
{
#
[
allow
(
missing_docs
)
]
Import
{
import
:
InlineImport
<
'
a
>
ty
:
TableType
<
'
a
>
}
Normal
{
ty
:
TableType
<
'
a
>
init_expr
:
Option
<
Expression
<
'
a
>
>
}
Inline
{
elem
:
RefType
<
'
a
>
payload
:
ElemPayload
<
'
a
>
}
}
impl
<
'
a
>
Parse
<
'
a
>
for
Table
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
span
=
parser
.
parse
:
:
<
kw
:
:
table
>
(
)
?
.
0
;
let
id
=
parser
.
parse
(
)
?
;
let
name
=
parser
.
parse
(
)
?
;
let
exports
=
parser
.
parse
(
)
?
;
let
mut
l
=
parser
.
lookahead1
(
)
;
let
kind
=
if
l
.
peek
:
:
<
RefType
>
(
)
?
{
let
elem
=
parser
.
parse
(
)
?
;
let
payload
=
parser
.
parens
(
|
p
|
{
p
.
parse
:
:
<
kw
:
:
elem
>
(
)
?
;
if
p
.
peek
:
:
<
LParen
>
(
)
?
{
ElemPayload
:
:
parse_exprs
(
p
elem
)
}
else
{
ElemPayload
:
:
parse_indices
(
p
Some
(
elem
)
)
}
}
)
?
;
TableKind
:
:
Inline
{
elem
payload
}
}
else
if
l
.
peek
:
:
<
u32
>
(
)
?
{
TableKind
:
:
Normal
{
ty
:
parser
.
parse
(
)
?
init_expr
:
if
!
parser
.
is_empty
(
)
{
Some
(
parser
.
parse
:
:
<
Expression
>
(
)
?
)
}
else
{
None
}
}
}
else
if
let
Some
(
import
)
=
parser
.
parse
(
)
?
{
TableKind
:
:
Import
{
import
ty
:
parser
.
parse
(
)
?
}
}
else
{
return
Err
(
l
.
error
(
)
)
;
}
;
Ok
(
Table
{
span
id
name
exports
kind
}
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
Elem
<
'
a
>
{
pub
span
:
Span
pub
id
:
Option
<
Id
<
'
a
>
>
pub
name
:
Option
<
NameAnnotation
<
'
a
>
>
pub
kind
:
ElemKind
<
'
a
>
pub
payload
:
ElemPayload
<
'
a
>
}
#
[
derive
(
Debug
)
]
pub
enum
ElemKind
<
'
a
>
{
Passive
Declared
Active
{
table
:
Index
<
'
a
>
offset
:
Expression
<
'
a
>
}
}
#
[
derive
(
Debug
)
]
pub
enum
ElemPayload
<
'
a
>
{
Indices
(
Vec
<
Index
<
'
a
>
>
)
Exprs
{
ty
:
RefType
<
'
a
>
exprs
:
Vec
<
Expression
<
'
a
>
>
}
}
impl
<
'
a
>
Parse
<
'
a
>
for
Elem
<
'
a
>
{
fn
parse
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Self
>
{
let
span
=
parser
.
parse
:
:
<
kw
:
:
elem
>
(
)
?
.
0
;
let
id
=
parser
.
parse
(
)
?
;
let
name
=
parser
.
parse
(
)
?
;
let
mut
table_omitted
=
false
;
let
kind
=
if
parser
.
peek
:
:
<
kw
:
:
declare
>
(
)
?
{
parser
.
parse
:
:
<
kw
:
:
declare
>
(
)
?
;
ElemKind
:
:
Declared
}
else
if
parser
.
peek
:
:
<
u32
>
(
)
?
|
|
(
parser
.
peek
:
:
<
LParen
>
(
)
?
&
&
!
parser
.
peek
:
:
<
RefType
>
(
)
?
)
{
let
table
=
if
parser
.
peek
:
:
<
u32
>
(
)
?
{
table_omitted
=
true
;
Index
:
:
Num
(
parser
.
parse
(
)
?
span
)
}
else
if
parser
.
peek2
:
:
<
kw
:
:
table
>
(
)
?
{
parser
.
parens
(
|
p
|
{
p
.
parse
:
:
<
kw
:
:
table
>
(
)
?
;
p
.
parse
(
)
}
)
?
}
else
{
table_omitted
=
true
;
Index
:
:
Num
(
0
span
)
}
;
let
offset
=
parse_expr_or_single_instr
:
:
<
kw
:
:
offset
>
(
parser
)
?
;
ElemKind
:
:
Active
{
table
offset
}
}
else
{
ElemKind
:
:
Passive
}
;
let
indices
=
if
parser
.
peek
:
:
<
kw
:
:
func
>
(
)
?
{
parser
.
parse
:
:
<
kw
:
:
func
>
(
)
?
;
true
}
else
if
parser
.
peek
:
:
<
RefType
>
(
)
?
{
false
}
else
if
table_omitted
{
true
}
else
{
false
}
;
let
payload
=
if
indices
{
ElemPayload
:
:
parse_indices
(
parser
None
)
?
}
else
{
let
ty
=
parser
.
parse
(
)
?
;
ElemPayload
:
:
parse_exprs
(
parser
ty
)
?
}
;
Ok
(
Elem
{
span
id
name
kind
payload
}
)
}
}
impl
<
'
a
>
ElemPayload
<
'
a
>
{
fn
parse_indices
(
parser
:
Parser
<
'
a
>
ty
:
Option
<
RefType
<
'
a
>
>
)
-
>
Result
<
Self
>
{
let
mut
ret
=
match
ty
{
None
=
>
ElemPayload
:
:
Indices
(
Vec
:
:
new
(
)
)
Some
(
ty
)
if
ty
=
=
RefType
:
:
func
(
)
=
>
ElemPayload
:
:
Indices
(
Vec
:
:
new
(
)
)
Some
(
ty
)
=
>
ElemPayload
:
:
Exprs
{
ty
exprs
:
Vec
:
:
new
(
)
}
}
;
while
!
parser
.
is_empty
(
)
{
let
func
=
parser
.
parse
(
)
?
;
match
&
mut
ret
{
ElemPayload
:
:
Indices
(
list
)
=
>
list
.
push
(
func
)
ElemPayload
:
:
Exprs
{
exprs
.
.
}
=
>
{
let
expr
=
Expression
{
instrs
:
[
Instruction
:
:
RefFunc
(
func
)
]
.
into
(
)
branch_hints
:
Vec
:
:
new
(
)
}
;
exprs
.
push
(
expr
)
;
}
}
}
Ok
(
ret
)
}
fn
parse_exprs
(
parser
:
Parser
<
'
a
>
ty
:
RefType
<
'
a
>
)
-
>
Result
<
Self
>
{
let
mut
exprs
=
Vec
:
:
new
(
)
;
while
!
parser
.
is_empty
(
)
{
let
expr
=
parse_expr_or_single_instr
:
:
<
kw
:
:
item
>
(
parser
)
?
;
exprs
.
push
(
expr
)
;
}
Ok
(
ElemPayload
:
:
Exprs
{
exprs
ty
}
)
}
}
fn
parse_expr_or_single_instr
<
'
a
T
>
(
parser
:
Parser
<
'
a
>
)
-
>
Result
<
Expression
<
'
a
>
>
where
T
:
Parse
<
'
a
>
+
Peek
{
if
parser
.
peek2
:
:
<
T
>
(
)
?
{
parser
.
parens
(
|
parser
|
{
parser
.
parse
:
:
<
T
>
(
)
?
;
parser
.
parse
(
)
}
)
}
else
{
Ok
(
Expression
:
:
parse_folded_instruction
(
parser
)
?
)
}
}
