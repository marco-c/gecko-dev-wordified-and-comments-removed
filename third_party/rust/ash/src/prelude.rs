use
std
:
:
convert
:
:
TryInto
;
#
[
cfg
(
feature
=
"
debug
"
)
]
use
std
:
:
fmt
;
use
std
:
:
mem
;
use
crate
:
:
vk
;
pub
type
VkResult
<
T
>
=
Result
<
T
vk
:
:
Result
>
;
impl
vk
:
:
Result
{
#
[
inline
]
pub
fn
result
(
self
)
-
>
VkResult
<
(
)
>
{
self
.
result_with_success
(
(
)
)
}
#
[
inline
]
pub
fn
result_with_success
<
T
>
(
self
v
:
T
)
-
>
VkResult
<
T
>
{
match
self
{
Self
:
:
SUCCESS
=
>
Ok
(
v
)
_
=
>
Err
(
self
)
}
}
#
[
inline
]
pub
unsafe
fn
assume_init_on_success
<
T
>
(
self
v
:
mem
:
:
MaybeUninit
<
T
>
)
-
>
VkResult
<
T
>
{
self
.
result
(
)
.
map
(
move
|
(
)
|
v
.
assume_init
(
)
)
}
}
pub
(
crate
)
unsafe
fn
read_into_uninitialized_vector
<
N
:
Copy
+
Default
+
TryInto
<
usize
>
T
>
(
f
:
impl
Fn
(
&
mut
N
*
mut
T
)
-
>
vk
:
:
Result
)
-
>
VkResult
<
Vec
<
T
>
>
where
<
N
as
TryInto
<
usize
>
>
:
:
Error
:
std
:
:
fmt
:
:
Debug
{
loop
{
let
mut
count
=
N
:
:
default
(
)
;
f
(
&
mut
count
std
:
:
ptr
:
:
null_mut
(
)
)
.
result
(
)
?
;
let
mut
data
=
Vec
:
:
with_capacity
(
count
.
try_into
(
)
.
expect
(
"
N
failed
to
convert
to
usize
"
)
)
;
let
err_code
=
f
(
&
mut
count
data
.
as_mut_ptr
(
)
)
;
if
err_code
!
=
vk
:
:
Result
:
:
INCOMPLETE
{
err_code
.
result
(
)
?
;
data
.
set_len
(
count
.
try_into
(
)
.
expect
(
"
N
failed
to
convert
to
usize
"
)
)
;
break
Ok
(
data
)
;
}
}
}
pub
(
crate
)
unsafe
fn
read_into_defaulted_vector
<
N
:
Copy
+
Default
+
TryInto
<
usize
>
T
:
Default
+
Clone
>
(
f
:
impl
Fn
(
&
mut
N
*
mut
T
)
-
>
vk
:
:
Result
)
-
>
VkResult
<
Vec
<
T
>
>
where
<
N
as
TryInto
<
usize
>
>
:
:
Error
:
std
:
:
fmt
:
:
Debug
{
loop
{
let
mut
count
=
N
:
:
default
(
)
;
f
(
&
mut
count
std
:
:
ptr
:
:
null_mut
(
)
)
.
result
(
)
?
;
let
mut
data
=
vec
!
[
Default
:
:
default
(
)
;
count
.
try_into
(
)
.
expect
(
"
N
failed
to
convert
to
usize
"
)
]
;
let
err_code
=
f
(
&
mut
count
data
.
as_mut_ptr
(
)
)
;
if
err_code
!
=
vk
:
:
Result
:
:
INCOMPLETE
{
data
.
set_len
(
count
.
try_into
(
)
.
expect
(
"
N
failed
to
convert
to
usize
"
)
)
;
break
err_code
.
result_with_success
(
data
)
;
}
}
}
#
[
cfg
(
feature
=
"
debug
"
)
]
pub
(
crate
)
fn
debug_flags
<
Value
:
Into
<
u64
>
+
Copy
>
(
f
:
&
mut
fmt
:
:
Formatter
known
:
&
[
(
Value
&
'
static
str
)
]
value
:
Value
)
-
>
fmt
:
:
Result
{
let
mut
first
=
true
;
let
mut
accum
=
value
.
into
(
)
;
for
&
(
bit
name
)
in
known
{
let
bit
=
bit
.
into
(
)
;
if
bit
!
=
0
&
&
accum
&
bit
=
=
bit
{
if
!
first
{
f
.
write_str
(
"
|
"
)
?
;
}
f
.
write_str
(
name
)
?
;
first
=
false
;
accum
&
=
!
bit
;
}
}
if
accum
!
=
0
{
if
!
first
{
f
.
write_str
(
"
|
"
)
?
;
}
write
!
(
f
"
{
accum
:
b
}
"
)
?
;
}
Ok
(
(
)
)
}
