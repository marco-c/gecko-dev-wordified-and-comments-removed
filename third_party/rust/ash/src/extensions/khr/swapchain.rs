#
[
cfg
(
doc
)
]
use
crate
:
:
khr
;
use
crate
:
:
prelude
:
:
*
;
use
crate
:
:
vk
;
use
crate
:
:
RawPtr
;
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
mem
;
impl
crate
:
:
khr
:
:
swapchain
:
:
Device
{
#
[
inline
]
pub
unsafe
fn
create_swapchain
(
&
self
create_info
:
&
vk
:
:
SwapchainCreateInfoKHR
<
'
_
>
allocation_callbacks
:
Option
<
&
vk
:
:
AllocationCallbacks
<
'
_
>
>
)
-
>
VkResult
<
vk
:
:
SwapchainKHR
>
{
let
mut
swapchain
=
mem
:
:
MaybeUninit
:
:
uninit
(
)
;
(
self
.
fp
.
create_swapchain_khr
)
(
self
.
handle
create_info
allocation_callbacks
.
as_raw_ptr
(
)
swapchain
.
as_mut_ptr
(
)
)
.
assume_init_on_success
(
swapchain
)
}
#
[
inline
]
pub
unsafe
fn
destroy_swapchain
(
&
self
swapchain
:
vk
:
:
SwapchainKHR
allocation_callbacks
:
Option
<
&
vk
:
:
AllocationCallbacks
<
'
_
>
>
)
{
(
self
.
fp
.
destroy_swapchain_khr
)
(
self
.
handle
swapchain
allocation_callbacks
.
as_raw_ptr
(
)
)
;
}
#
[
inline
]
pub
unsafe
fn
get_swapchain_images
(
&
self
swapchain
:
vk
:
:
SwapchainKHR
)
-
>
VkResult
<
Vec
<
vk
:
:
Image
>
>
{
read_into_uninitialized_vector
(
|
count
data
|
{
(
self
.
fp
.
get_swapchain_images_khr
)
(
self
.
handle
swapchain
count
data
)
}
)
}
#
[
inline
]
pub
unsafe
fn
acquire_next_image
(
&
self
swapchain
:
vk
:
:
SwapchainKHR
timeout
:
u64
semaphore
:
vk
:
:
Semaphore
fence
:
vk
:
:
Fence
)
-
>
VkResult
<
(
u32
bool
)
>
{
let
mut
index
=
mem
:
:
MaybeUninit
:
:
uninit
(
)
;
let
err_code
=
(
self
.
fp
.
acquire_next_image_khr
)
(
self
.
handle
swapchain
timeout
semaphore
fence
index
.
as_mut_ptr
(
)
)
;
match
err_code
{
vk
:
:
Result
:
:
SUCCESS
=
>
Ok
(
(
index
.
assume_init
(
)
false
)
)
vk
:
:
Result
:
:
SUBOPTIMAL_KHR
=
>
Ok
(
(
index
.
assume_init
(
)
true
)
)
_
=
>
Err
(
err_code
)
}
}
#
[
inline
]
pub
unsafe
fn
queue_present
(
&
self
queue
:
vk
:
:
Queue
present_info
:
&
vk
:
:
PresentInfoKHR
<
'
_
>
)
-
>
VkResult
<
bool
>
{
let
err_code
=
(
self
.
fp
.
queue_present_khr
)
(
queue
present_info
)
;
match
err_code
{
vk
:
:
Result
:
:
SUCCESS
=
>
Ok
(
false
)
vk
:
:
Result
:
:
SUBOPTIMAL_KHR
=
>
Ok
(
true
)
_
=
>
Err
(
err_code
)
}
}
#
[
inline
]
pub
unsafe
fn
get_device_group_present_capabilities
(
&
self
device_group_present_capabilities
:
&
mut
vk
:
:
DeviceGroupPresentCapabilitiesKHR
<
'
_
>
)
-
>
VkResult
<
(
)
>
{
(
self
.
fp
.
get_device_group_present_capabilities_khr
)
(
self
.
handle
device_group_present_capabilities
)
.
result
(
)
}
#
[
inline
]
pub
unsafe
fn
get_device_group_surface_present_modes
(
&
self
surface
:
vk
:
:
SurfaceKHR
)
-
>
VkResult
<
vk
:
:
DeviceGroupPresentModeFlagsKHR
>
{
let
mut
modes
=
mem
:
:
MaybeUninit
:
:
uninit
(
)
;
(
self
.
fp
.
get_device_group_surface_present_modes_khr
)
(
self
.
handle
surface
modes
.
as_mut_ptr
(
)
)
.
assume_init_on_success
(
modes
)
}
#
[
inline
]
pub
unsafe
fn
acquire_next_image2
(
&
self
acquire_info
:
&
vk
:
:
AcquireNextImageInfoKHR
<
'
_
>
)
-
>
VkResult
<
(
u32
bool
)
>
{
let
mut
index
=
mem
:
:
MaybeUninit
:
:
uninit
(
)
;
let
err_code
=
(
self
.
fp
.
acquire_next_image2_khr
)
(
self
.
handle
acquire_info
index
.
as_mut_ptr
(
)
)
;
match
err_code
{
vk
:
:
Result
:
:
SUCCESS
=
>
Ok
(
(
index
.
assume_init
(
)
false
)
)
vk
:
:
Result
:
:
SUBOPTIMAL_KHR
=
>
Ok
(
(
index
.
assume_init
(
)
true
)
)
_
=
>
Err
(
err_code
)
}
}
}
impl
crate
:
:
khr
:
:
swapchain
:
:
Instance
{
#
[
inline
]
pub
unsafe
fn
get_physical_device_present_rectangles
(
&
self
physical_device
:
vk
:
:
PhysicalDevice
surface
:
vk
:
:
SurfaceKHR
)
-
>
VkResult
<
Vec
<
vk
:
:
Rect2D
>
>
{
read_into_uninitialized_vector
(
|
count
data
|
{
(
self
.
fp
.
get_physical_device_present_rectangles_khr
)
(
physical_device
surface
count
data
)
}
)
}
}
