use
crate
:
:
prelude
:
:
*
;
use
crate
:
:
vk
;
use
crate
:
:
{
Entry
Instance
}
;
use
std
:
:
ffi
:
:
CStr
;
use
std
:
:
mem
;
#
[
derive
(
Clone
)
]
pub
struct
CoverageReductionMode
{
fp
:
vk
:
:
NvCoverageReductionModeFn
}
impl
CoverageReductionMode
{
pub
fn
new
(
entry
:
&
Entry
instance
:
&
Instance
)
-
>
Self
{
let
fp
=
vk
:
:
NvCoverageReductionModeFn
:
:
load
(
|
name
|
unsafe
{
mem
:
:
transmute
(
entry
.
get_instance_proc_addr
(
instance
.
handle
(
)
name
.
as_ptr
(
)
)
)
}
)
;
Self
{
fp
}
}
#
[
inline
]
pub
unsafe
fn
get_physical_device_supported_framebuffer_mixed_samples_combinations_len
(
&
self
physical_device
:
vk
:
:
PhysicalDevice
)
-
>
VkResult
<
usize
>
{
let
mut
count
=
0
;
(
self
.
fp
.
get_physical_device_supported_framebuffer_mixed_samples_combinations_nv
)
(
physical_device
&
mut
count
std
:
:
ptr
:
:
null_mut
(
)
)
.
result_with_success
(
count
as
usize
)
}
#
[
inline
]
pub
unsafe
fn
get_physical_device_supported_framebuffer_mixed_samples_combinations
(
&
self
physical_device
:
vk
:
:
PhysicalDevice
out
:
&
mut
[
vk
:
:
FramebufferMixedSamplesCombinationNV
]
)
-
>
VkResult
<
(
)
>
{
let
mut
count
=
out
.
len
(
)
as
u32
;
(
self
.
fp
.
get_physical_device_supported_framebuffer_mixed_samples_combinations_nv
)
(
physical_device
&
mut
count
out
.
as_mut_ptr
(
)
)
.
result
(
)
?
;
assert_eq
!
(
count
as
usize
out
.
len
(
)
)
;
Ok
(
(
)
)
}
#
[
inline
]
pub
const
fn
name
(
)
-
>
&
'
static
CStr
{
vk
:
:
NvCoverageReductionModeFn
:
:
name
(
)
}
#
[
inline
]
pub
fn
fp
(
&
self
)
-
>
&
vk
:
:
NvCoverageReductionModeFn
{
&
self
.
fp
}
}
