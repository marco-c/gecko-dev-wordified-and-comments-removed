mod
common
;
use
std
:
:
{
fs
:
:
{
read_dir
File
}
io
:
:
{
BufRead
BufReader
}
path
:
:
Path
}
;
use
glean
:
:
{
net
ConfigurationBuilder
}
;
use
serde_json
:
:
Value
as
JsonValue
;
#
[
derive
(
Debug
)
]
struct
FakeUploader
;
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
_upload_request
:
net
:
:
CapablePingUploadRequest
)
-
>
net
:
:
UploadResult
{
net
:
:
UploadResult
:
:
http_status
(
500
)
}
}
fn
get_pings
(
pings_dir
:
&
Path
)
-
>
Vec
<
(
String
JsonValue
Option
<
JsonValue
>
)
>
{
let
Ok
(
entries
)
=
read_dir
(
pings_dir
)
else
{
return
vec
!
[
]
;
}
;
entries
.
filter_map
(
|
entry
|
entry
.
ok
(
)
)
.
filter
(
|
entry
|
match
entry
.
file_type
(
)
{
Ok
(
file_type
)
=
>
file_type
.
is_file
(
)
Err
(
_
)
=
>
false
}
)
.
filter_map
(
|
entry
|
File
:
:
open
(
entry
.
path
(
)
)
.
ok
(
)
)
.
filter_map
(
|
file
|
{
let
mut
lines
=
BufReader
:
:
new
(
file
)
.
lines
(
)
;
if
let
(
Some
(
Ok
(
url
)
)
Some
(
Ok
(
body
)
)
Ok
(
metadata
)
)
=
(
lines
.
next
(
)
lines
.
next
(
)
lines
.
next
(
)
.
transpose
(
)
)
{
let
parsed_metadata
=
metadata
.
map
(
|
m
|
{
serde_json
:
:
from_str
:
:
<
JsonValue
>
(
&
m
)
.
expect
(
"
metadata
should
be
valid
JSON
"
)
}
)
;
if
let
Ok
(
parsed_body
)
=
serde_json
:
:
from_str
:
:
<
JsonValue
>
(
&
body
)
{
Some
(
(
url
parsed_body
parsed_metadata
)
)
}
else
{
None
}
}
else
{
None
}
}
)
.
collect
(
)
}
#
[
test
]
fn
test_pre_post_init_health_pings_exist
(
)
{
common
:
:
enable_test_logging
(
)
;
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
ConfigurationBuilder
:
:
new
(
true
tmpname
.
clone
(
)
"
health
-
ping
-
test
"
)
.
with_server_endpoint
(
"
invalid
-
test
-
host
"
)
.
with_uploader
(
FakeUploader
)
.
build
(
)
;
common
:
:
initialize
(
cfg
)
;
glean
:
:
shutdown
(
)
;
let
pings
=
get_pings
(
&
tmpname
.
join
(
"
pending_pings
"
)
)
;
pings
.
iter
(
)
.
for_each
(
|
(
url
_
_
)
|
{
println
!
(
"
Ping
URL
:
{
}
"
url
)
;
}
)
;
assert
!
(
!
pings
.
is_empty
(
)
)
;
assert_eq
!
(
2
pings
.
iter
(
)
.
filter
(
|
(
url
_
_
)
|
url
.
contains
(
"
health
"
)
)
.
count
(
)
)
;
assert_eq
!
(
1
pings
.
iter
(
)
.
filter
(
|
(
url
body
_
)
|
url
.
contains
(
"
health
"
)
&
&
body
.
get
(
"
ping_info
"
)
.
unwrap
(
)
.
get
(
"
reason
"
)
.
unwrap
(
)
=
=
"
pre_init
"
)
.
count
(
)
)
;
assert_eq
!
(
1
pings
.
iter
(
)
.
filter
(
|
(
url
body
_
)
|
url
.
contains
(
"
health
"
)
&
&
body
.
get
(
"
ping_info
"
)
.
unwrap
(
)
.
get
(
"
reason
"
)
.
unwrap
(
)
=
=
"
post_init
"
)
.
count
(
)
)
;
}
