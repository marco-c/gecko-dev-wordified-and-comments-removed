mod
common
;
mod
metrics
{
use
glean
:
:
private
:
:
*
;
use
glean
:
:
traits
;
use
glean
:
:
CommonMetricData
;
use
glean_core
:
:
DynamicLabelType
;
use
once_cell
:
:
sync
:
:
Lazy
;
use
std
:
:
collections
:
:
HashMap
;
pub
struct
SomeExtras
{
extra1
:
Option
<
String
>
extra2
:
Option
<
bool
>
}
impl
traits
:
:
ExtraKeys
for
SomeExtras
{
const
ALLOWED_KEYS
:
&
'
static
[
&
'
static
str
]
=
&
[
"
extra1
"
"
extra2
"
]
;
fn
into_ffi_extra
(
self
)
-
>
HashMap
<
String
String
>
{
let
mut
map
=
HashMap
:
:
new
(
)
;
self
.
extra1
.
and_then
(
|
val
|
map
.
insert
(
"
extra1
"
.
to_string
(
)
val
)
)
;
self
.
extra2
.
and_then
(
|
val
|
map
.
insert
(
"
extra2
"
.
to_string
(
)
val
.
to_string
(
)
)
)
;
map
}
}
#
[
allow
(
non_upper_case_globals
)
]
pub
static
countit
:
Lazy
<
CounterMetric
>
=
Lazy
:
:
new
(
|
|
{
CounterMetric
:
:
new
(
CommonMetricData
{
name
:
"
count_von_count
"
.
into
(
)
category
:
"
sesame
"
.
into
(
)
send_in_pings
:
vec
!
[
"
validation
"
.
into
(
)
]
dynamic_label
:
Some
(
DynamicLabelType
:
:
Label
(
"
ah_ah_ah
"
.
into
(
)
)
)
.
.
Default
:
:
default
(
)
}
)
}
)
;
#
[
allow
(
non_upper_case_globals
)
]
pub
static
event
:
Lazy
<
EventMetric
<
SomeExtras
>
>
=
Lazy
:
:
new
(
|
|
{
EventMetric
:
:
new
(
CommonMetricData
{
name
:
"
birthday
"
.
into
(
)
category
:
"
shire
"
.
into
(
)
send_in_pings
:
vec
!
[
"
validation
"
.
into
(
)
]
dynamic_label
:
Some
(
DynamicLabelType
:
:
Label
(
"
111th
"
.
into
(
)
)
)
.
.
Default
:
:
default
(
)
}
)
}
)
;
#
[
allow
(
non_upper_case_globals
)
]
pub
static
object
:
Lazy
<
ObjectMetric
<
i32
>
>
=
Lazy
:
:
new
(
|
|
{
ObjectMetric
:
:
new
(
CommonMetricData
{
name
:
"
objection
"
.
into
(
)
category
:
"
court
"
.
into
(
)
send_in_pings
:
vec
!
[
"
validation
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
)
}
)
;
}
#
[
test
]
fn
check_metadata
(
)
{
use
glean
:
:
MetricIdentifier
;
common
:
:
enable_test_logging
(
)
;
let
(
category
name
label
)
=
metrics
:
:
countit
.
get_identifiers
(
)
;
assert_eq
!
(
category
"
sesame
"
)
;
assert_eq
!
(
name
"
count_von_count
"
)
;
assert_eq
!
(
label
Some
(
"
ah_ah_ah
"
)
)
;
let
(
category
name
label
)
=
metrics
:
:
event
.
get_identifiers
(
)
;
assert_eq
!
(
category
"
shire
"
)
;
assert_eq
!
(
name
"
birthday
"
)
;
assert_eq
!
(
label
Some
(
"
111th
"
)
)
;
let
(
category
name
label
)
=
metrics
:
:
object
.
get_identifiers
(
)
;
assert_eq
!
(
category
"
court
"
)
;
assert_eq
!
(
name
"
objection
"
)
;
assert_eq
!
(
label
None
)
;
glean
:
:
shutdown
(
)
;
}
