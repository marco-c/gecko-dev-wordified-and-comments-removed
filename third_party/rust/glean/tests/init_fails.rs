mod
common
;
use
std
:
:
{
thread
time
:
:
Duration
}
;
use
glean
:
:
ConfigurationBuilder
;
mod
metrics
{
use
glean
:
:
private
:
:
*
;
use
glean
:
:
{
Lifetime
TimeUnit
}
;
use
glean_core
:
:
CommonMetricData
;
use
once_cell
:
:
sync
:
:
Lazy
;
#
[
allow
(
non_upper_case_globals
)
]
pub
static
initialization
:
Lazy
<
TimespanMetric
>
=
Lazy
:
:
new
(
|
|
{
TimespanMetric
:
:
new
(
CommonMetricData
{
name
:
"
initialization
"
.
into
(
)
category
:
"
sample
"
.
into
(
)
send_in_pings
:
vec
!
[
"
validation
"
.
into
(
)
]
lifetime
:
Lifetime
:
:
Ping
disabled
:
false
.
.
Default
:
:
default
(
)
}
TimeUnit
:
:
Nanosecond
)
}
)
;
}
mod
pings
{
use
glean
:
:
private
:
:
PingType
;
use
once_cell
:
:
sync
:
:
Lazy
;
#
[
allow
(
non_upper_case_globals
)
]
pub
static
validation
:
Lazy
<
PingType
>
=
Lazy
:
:
new
(
|
|
glean
:
:
private
:
:
PingType
:
:
new
(
"
validation
"
true
true
true
true
vec
!
[
]
)
)
;
}
#
[
test
]
fn
init_fails
(
)
{
common
:
:
enable_test_logging
(
)
;
metrics
:
:
initialization
.
start
(
)
;
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
ConfigurationBuilder
:
:
new
(
true
tmpname
"
"
)
.
with_server_endpoint
(
"
invalid
-
test
-
host
"
)
.
build
(
)
;
common
:
:
initialize
(
cfg
)
;
metrics
:
:
initialization
.
stop
(
)
;
pings
:
:
validation
.
submit
(
None
)
;
thread
:
:
sleep
(
Duration
:
:
from_millis
(
500
)
)
;
glean
:
:
shutdown
(
)
;
}
