use
log
:
:
LevelFilter
;
use
crate
:
:
net
:
:
PingUploader
;
use
std
:
:
path
:
:
PathBuf
;
pub
(
crate
)
const
DEFAULT_GLEAN_ENDPOINT
:
&
str
=
"
https
:
/
/
incoming
.
telemetry
.
mozilla
.
org
"
;
#
[
derive
(
Debug
)
]
pub
struct
Configuration
{
pub
upload_enabled
:
bool
pub
data_path
:
PathBuf
pub
application_id
:
String
pub
max_events
:
Option
<
usize
>
pub
delay_ping_lifetime_io
:
bool
pub
server_endpoint
:
Option
<
String
>
pub
uploader
:
Option
<
Box
<
dyn
PingUploader
+
'
static
>
>
pub
use_core_mps
:
bool
pub
trim_data_to_registered_pings
:
bool
pub
log_level
:
Option
<
LevelFilter
>
pub
rate_limit
:
Option
<
crate
:
:
PingRateLimit
>
}
#
[
derive
(
Debug
)
]
pub
struct
Builder
{
pub
upload_enabled
:
bool
pub
data_path
:
PathBuf
pub
application_id
:
String
pub
max_events
:
Option
<
usize
>
pub
delay_ping_lifetime_io
:
bool
pub
server_endpoint
:
Option
<
String
>
pub
uploader
:
Option
<
Box
<
dyn
PingUploader
+
'
static
>
>
pub
use_core_mps
:
bool
pub
trim_data_to_registered_pings
:
bool
pub
log_level
:
Option
<
LevelFilter
>
pub
rate_limit
:
Option
<
crate
:
:
PingRateLimit
>
}
impl
Builder
{
pub
fn
new
<
P
:
Into
<
PathBuf
>
S
:
Into
<
String
>
>
(
upload_enabled
:
bool
data_path
:
P
application_id
:
S
)
-
>
Self
{
Self
{
upload_enabled
data_path
:
data_path
.
into
(
)
application_id
:
application_id
.
into
(
)
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
None
uploader
:
None
use_core_mps
:
false
trim_data_to_registered_pings
:
false
log_level
:
None
rate_limit
:
None
}
}
pub
fn
build
(
self
)
-
>
Configuration
{
Configuration
{
upload_enabled
:
self
.
upload_enabled
data_path
:
self
.
data_path
application_id
:
self
.
application_id
max_events
:
self
.
max_events
delay_ping_lifetime_io
:
self
.
delay_ping_lifetime_io
server_endpoint
:
self
.
server_endpoint
uploader
:
self
.
uploader
use_core_mps
:
self
.
use_core_mps
trim_data_to_registered_pings
:
self
.
trim_data_to_registered_pings
log_level
:
self
.
log_level
rate_limit
:
self
.
rate_limit
}
}
pub
fn
with_max_events
(
mut
self
max_events
:
usize
)
-
>
Self
{
self
.
max_events
=
Some
(
max_events
)
;
self
}
pub
fn
with_delay_ping_lifetime_io
(
mut
self
value
:
bool
)
-
>
Self
{
self
.
delay_ping_lifetime_io
=
value
;
self
}
pub
fn
with_server_endpoint
<
S
:
Into
<
String
>
>
(
mut
self
server_endpoint
:
S
)
-
>
Self
{
self
.
server_endpoint
=
Some
(
server_endpoint
.
into
(
)
)
;
self
}
pub
fn
with_uploader
<
U
:
PingUploader
+
'
static
>
(
mut
self
uploader
:
U
)
-
>
Self
{
self
.
uploader
=
Some
(
Box
:
:
new
(
uploader
)
)
;
self
}
pub
fn
with_use_core_mps
(
mut
self
value
:
bool
)
-
>
Self
{
self
.
use_core_mps
=
value
;
self
}
pub
fn
with_trim_data_to_registered_pings
(
mut
self
value
:
bool
)
-
>
Self
{
self
.
trim_data_to_registered_pings
=
value
;
self
}
}
