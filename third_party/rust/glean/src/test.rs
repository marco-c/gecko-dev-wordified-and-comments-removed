use
std
:
:
sync
:
:
{
Arc
Barrier
Mutex
}
;
use
std
:
:
thread
:
:
{
self
ThreadId
}
;
use
crate
:
:
private
:
:
PingType
;
use
crate
:
:
private
:
:
{
BooleanMetric
CounterMetric
EventMetric
StringMetric
}
;
use
super
:
:
*
;
use
crate
:
:
common_test
:
:
{
lock_test
new_glean
GLOBAL_APPLICATION_ID
}
;
#
[
test
]
fn
send_a_ping
(
)
{
let
_lock
=
lock_test
(
)
;
let
(
s
r
)
=
crossbeam_channel
:
:
bounded
:
:
<
String
>
(
1
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
sender
:
crossbeam_channel
:
:
Sender
<
String
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
url
:
String
_body
:
Vec
<
u8
>
_headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
self
.
sender
.
send
(
url
)
.
unwrap
(
)
;
net
:
:
UploadResult
:
:
http_status
(
200
)
}
}
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
sender
:
s
}
)
)
use_core_mps
:
false
}
;
let
_t
=
new_glean
(
Some
(
cfg
)
true
)
;
const
PING_NAME
:
&
str
=
"
test
-
ping
"
;
let
custom_ping
=
private
:
:
PingType
:
:
new
(
PING_NAME
true
true
vec
!
[
]
)
;
custom_ping
.
submit
(
None
)
;
let
url
=
r
.
recv
(
)
.
unwrap
(
)
;
assert
!
(
url
.
contains
(
PING_NAME
)
)
;
}
#
[
test
]
fn
disabling_upload_disables_metrics_recording
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
true
)
;
let
metric
=
BooleanMetric
:
:
new
(
CommonMetricData
{
name
:
"
bool_metric
"
.
into
(
)
category
:
"
test
"
.
into
(
)
send_in_pings
:
vec
!
[
"
store1
"
.
into
(
)
]
lifetime
:
Lifetime
:
:
Application
disabled
:
false
dynamic_label
:
None
}
)
;
crate
:
:
set_upload_enabled
(
false
)
;
assert
!
(
metric
.
test_get_value
(
Some
(
"
store1
"
.
into
(
)
)
)
.
is_none
(
)
)
}
#
[
test
]
fn
test_experiments_recording
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
true
)
;
set_experiment_active
(
"
experiment_test
"
.
to_string
(
)
"
branch_a
"
.
to_string
(
)
None
)
;
let
mut
extra
=
HashMap
:
:
new
(
)
;
extra
.
insert
(
"
test_key
"
.
to_string
(
)
"
value
"
.
to_string
(
)
)
;
set_experiment_active
(
"
experiment_api
"
.
to_string
(
)
"
branch_b
"
.
to_string
(
)
Some
(
extra
)
)
;
assert
!
(
test_is_experiment_active
(
"
experiment_test
"
.
to_string
(
)
)
)
;
assert
!
(
test_is_experiment_active
(
"
experiment_api
"
.
to_string
(
)
)
)
;
set_experiment_inactive
(
"
experiment_test
"
.
to_string
(
)
)
;
assert
!
(
!
test_is_experiment_active
(
"
experiment_test
"
.
to_string
(
)
)
)
;
assert
!
(
test_is_experiment_active
(
"
experiment_api
"
.
to_string
(
)
)
)
;
let
stored_data
=
test_get_experiment_data
(
"
experiment_api
"
.
to_string
(
)
)
.
unwrap
(
)
;
assert_eq
!
(
"
branch_b
"
stored_data
.
branch
)
;
assert_eq
!
(
"
value
"
stored_data
.
extra
.
unwrap
(
)
[
"
test_key
"
]
)
;
}
#
[
test
]
fn
test_experiments_recording_before_glean_inits
(
)
{
let
_lock
=
lock_test
(
)
;
destroy_glean
(
true
)
;
set_experiment_active
(
"
experiment_set_preinit
"
.
to_string
(
)
"
branch_a
"
.
to_string
(
)
None
)
;
set_experiment_active
(
"
experiment_preinit_disabled
"
.
to_string
(
)
"
branch_a
"
.
to_string
(
)
None
)
;
set_experiment_inactive
(
"
experiment_preinit_disabled
"
.
to_string
(
)
)
;
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
test_reset_glean
(
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
None
use_core_mps
:
false
}
ClientInfoMetrics
:
:
unknown
(
)
false
)
;
assert
!
(
test_is_experiment_active
(
"
experiment_set_preinit
"
.
to_string
(
)
)
)
;
assert
!
(
!
test_is_experiment_active
(
"
experiment_preinit_disabled
"
.
to_string
(
)
)
)
;
}
#
[
test
]
fn
sending_of_foreground_background_pings
(
)
{
let
_lock
=
lock_test
(
)
;
let
click
:
EventMetric
<
traits
:
:
NoExtraKeys
>
=
private
:
:
EventMetric
:
:
new
(
CommonMetricData
{
name
:
"
click
"
.
into
(
)
category
:
"
ui
"
.
into
(
)
send_in_pings
:
vec
!
[
"
events
"
.
into
(
)
]
lifetime
:
Lifetime
:
:
Ping
disabled
:
false
.
.
Default
:
:
default
(
)
}
)
;
let
(
s
r
)
=
crossbeam_channel
:
:
bounded
:
:
<
String
>
(
3
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
sender
:
crossbeam_channel
:
:
Sender
<
String
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
url
:
String
_body
:
Vec
<
u8
>
_headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
self
.
sender
.
send
(
url
)
.
unwrap
(
)
;
net
:
:
UploadResult
:
:
http_status
(
200
)
}
}
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
sender
:
s
}
)
)
use_core_mps
:
false
}
;
let
_t
=
new_glean
(
Some
(
cfg
)
true
)
;
handle_client_active
(
)
;
let
url
=
r
.
recv
(
)
.
unwrap
(
)
;
assert
!
(
url
.
contains
(
"
baseline
"
)
)
;
click
.
record
(
None
)
;
handle_client_inactive
(
)
;
let
mut
expected_pings
=
vec
!
[
"
baseline
"
"
events
"
]
;
for
_
in
0
.
.
2
{
let
url
=
r
.
recv
(
)
.
unwrap
(
)
;
expected_pings
.
retain
(
|
&
name
|
!
url
.
contains
(
name
)
)
;
}
assert_eq
!
(
0
expected_pings
.
len
(
)
)
;
handle_client_active
(
)
;
let
url
=
r
.
recv
(
)
.
unwrap
(
)
;
assert
!
(
url
.
contains
(
"
baseline
"
)
)
;
}
#
[
test
]
fn
sending_of_startup_baseline_ping
(
)
{
let
_lock
=
lock_test
(
)
;
let
data_dir
=
new_glean
(
None
true
)
;
glean_core
:
:
glean_set_dirty_flag
(
true
)
;
let
(
s
r
)
=
crossbeam_channel
:
:
bounded
:
:
<
String
>
(
1
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
sender
:
crossbeam_channel
:
:
Sender
<
String
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
url
:
String
_body
:
Vec
<
u8
>
_headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
self
.
sender
.
send
(
url
)
.
unwrap
(
)
;
net
:
:
UploadResult
:
:
http_status
(
200
)
}
}
let
tmpname
=
data_dir
.
path
(
)
.
to_path_buf
(
)
;
test_reset_glean
(
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
sender
:
s
}
)
)
use_core_mps
:
false
}
ClientInfoMetrics
:
:
unknown
(
)
false
)
;
let
url
=
r
.
recv
(
)
.
unwrap
(
)
;
assert
!
(
url
.
contains
(
"
baseline
"
)
)
;
}
#
[
test
]
fn
no_dirty_baseline_on_clean_shutdowns
(
)
{
let
_lock
=
lock_test
(
)
;
let
data_dir
=
new_glean
(
None
true
)
;
glean_core
:
:
glean_set_dirty_flag
(
true
)
;
crate
:
:
shutdown
(
)
;
let
(
s
r
)
=
crossbeam_channel
:
:
bounded
:
:
<
String
>
(
1
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
sender
:
crossbeam_channel
:
:
Sender
<
String
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
url
:
String
_body
:
Vec
<
u8
>
_headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
self
.
sender
.
send
(
url
)
.
unwrap
(
)
;
net
:
:
UploadResult
:
:
http_status
(
200
)
}
}
let
tmpname
=
data_dir
.
path
(
)
.
to_path_buf
(
)
;
test_reset_glean
(
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
sender
:
s
}
)
)
use_core_mps
:
false
}
ClientInfoMetrics
:
:
unknown
(
)
false
)
;
assert_eq
!
(
r
.
try_recv
(
)
Err
(
crossbeam_channel
:
:
TryRecvError
:
:
Empty
)
)
;
}
#
[
test
]
fn
initialize_must_not_crash_if_data_dir_is_messed_up
(
)
{
let
_lock
=
lock_test
(
)
;
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpdirname
=
dir
.
path
(
)
;
let
file_path
=
tmpdirname
.
to_path_buf
(
)
.
join
(
"
notadir
"
)
;
std
:
:
fs
:
:
write
(
file_path
.
clone
(
)
"
test
"
)
.
expect
(
"
The
test
Glean
dir
file
must
be
created
"
)
;
let
cfg
=
Configuration
{
data_path
:
file_path
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
None
use_core_mps
:
false
}
;
test_reset_glean
(
cfg
ClientInfoMetrics
:
:
unknown
(
)
false
)
;
}
#
[
test
]
fn
queued_recorded_metrics_correctly_record_during_init
(
)
{
let
_lock
=
lock_test
(
)
;
destroy_glean
(
true
)
;
let
metric
=
CounterMetric
:
:
new
(
CommonMetricData
{
name
:
"
counter_metric
"
.
into
(
)
category
:
"
test
"
.
into
(
)
send_in_pings
:
vec
!
[
"
store1
"
.
into
(
)
]
lifetime
:
Lifetime
:
:
Application
disabled
:
false
dynamic_label
:
None
}
)
;
for
_
in
0
.
.
3
{
metric
.
add
(
1
)
;
}
let
_t
=
new_glean
(
None
false
)
;
assert
!
(
metric
.
test_get_value
(
None
)
.
is_some
(
)
"
Value
must
exist
"
)
;
assert_eq
!
(
3
metric
.
test_get_value
(
None
)
.
unwrap
(
)
"
Value
must
match
"
)
;
}
#
[
test
]
fn
initializing_twice_is_a_noop
(
)
{
let
_lock
=
lock_test
(
)
;
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
test_reset_glean
(
Configuration
{
data_path
:
tmpname
.
clone
(
)
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
None
use_core_mps
:
false
}
ClientInfoMetrics
:
:
unknown
(
)
true
)
;
crate
:
:
initialize
(
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
None
use_core_mps
:
false
}
ClientInfoMetrics
:
:
unknown
(
)
)
;
}
#
[
test
]
#
[
ignore
]
fn
dont_handle_events_when_uninitialized
(
)
{
todo
!
(
)
}
#
[
test
]
fn
the_app_channel_must_be_correctly_set_if_requested
(
)
{
let
_lock
=
lock_test
(
)
;
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
app_channel
=
StringMetric
:
:
new
(
CommonMetricData
{
name
:
"
app_channel
"
.
into
(
)
category
:
"
"
.
into
(
)
send_in_pings
:
vec
!
[
"
glean_client_info
"
.
into
(
)
]
lifetime
:
Lifetime
:
:
Application
disabled
:
false
.
.
Default
:
:
default
(
)
}
)
;
let
client_info
=
ClientInfoMetrics
{
channel
:
None
.
.
ClientInfoMetrics
:
:
unknown
(
)
}
;
test_reset_glean
(
Configuration
{
data_path
:
tmpname
.
clone
(
)
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
None
use_core_mps
:
false
}
client_info
true
)
;
assert
!
(
app_channel
.
test_get_value
(
None
)
.
is_none
(
)
)
;
let
client_info
=
ClientInfoMetrics
{
channel
:
Some
(
"
testing
"
.
into
(
)
)
.
.
ClientInfoMetrics
:
:
unknown
(
)
}
;
test_reset_glean
(
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
None
use_core_mps
:
false
}
client_info
true
)
;
assert_eq
!
(
"
testing
"
app_channel
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
}
#
[
test
]
#
[
ignore
]
fn
ping_collection_must_happen_after_concurrently_scheduled_metrics_recordings
(
)
{
todo
!
(
)
}
#
[
test
]
fn
basic_metrics_should_be_cleared_when_disabling_uploading
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
false
)
;
let
metric
=
private
:
:
StringMetric
:
:
new
(
CommonMetricData
{
name
:
"
string_metric
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
vec
!
[
"
default
"
.
into
(
)
]
lifetime
:
Lifetime
:
:
Ping
disabled
:
false
.
.
Default
:
:
default
(
)
}
)
;
assert
!
(
metric
.
test_get_value
(
None
)
.
is_none
(
)
)
;
metric
.
set
(
"
TEST
VALUE
"
.
into
(
)
)
;
assert
!
(
metric
.
test_get_value
(
None
)
.
is_some
(
)
)
;
set_upload_enabled
(
false
)
;
assert
!
(
metric
.
test_get_value
(
None
)
.
is_none
(
)
)
;
metric
.
set
(
"
TEST
VALUE
"
.
into
(
)
)
;
assert
!
(
metric
.
test_get_value
(
None
)
.
is_none
(
)
)
;
set_upload_enabled
(
true
)
;
assert
!
(
metric
.
test_get_value
(
None
)
.
is_none
(
)
)
;
metric
.
set
(
"
TEST
VALUE
"
.
into
(
)
)
;
assert_eq
!
(
"
TEST
VALUE
"
metric
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
core_metrics_should_be_cleared_and_restored_when_disabling_and_enabling_uploading
(
)
{
let
_lock
=
lock_test
(
)
;
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
test_reset_glean
(
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
None
use_core_mps
:
false
}
ClientInfoMetrics
:
:
unknown
(
)
true
)
;
let
os_version
=
StringMetric
:
:
new
(
CommonMetricData
{
name
:
"
os_version
"
.
into
(
)
category
:
"
"
.
into
(
)
send_in_pings
:
vec
!
[
"
glean_client_info
"
.
into
(
)
]
lifetime
:
Lifetime
:
:
Application
disabled
:
false
.
.
Default
:
:
default
(
)
}
)
;
assert
!
(
os_version
.
test_get_value
(
None
)
.
is_some
(
)
)
;
set_upload_enabled
(
false
)
;
assert
!
(
os_version
.
test_get_value
(
None
)
.
is_none
(
)
)
;
set_upload_enabled
(
true
)
;
assert
!
(
os_version
.
test_get_value
(
None
)
.
is_some
(
)
)
;
}
#
[
test
]
fn
sending_deletion_ping_if_disabled_outside_of_run
(
)
{
let
_lock
=
lock_test
(
)
;
let
(
s
r
)
=
crossbeam_channel
:
:
bounded
:
:
<
String
>
(
1
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
sender
:
crossbeam_channel
:
:
Sender
<
String
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
url
:
String
_body
:
Vec
<
u8
>
_headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
self
.
sender
.
send
(
url
)
.
unwrap
(
)
;
net
:
:
UploadResult
:
:
http_status
(
200
)
}
}
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
Configuration
{
data_path
:
tmpname
.
clone
(
)
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
None
use_core_mps
:
false
}
;
let
_t
=
new_glean
(
Some
(
cfg
)
true
)
;
test_reset_glean
(
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
false
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
sender
:
s
}
)
)
use_core_mps
:
false
}
ClientInfoMetrics
:
:
unknown
(
)
false
)
;
let
url
=
r
.
recv
(
)
.
unwrap
(
)
;
assert
!
(
url
.
contains
(
"
deletion
-
request
"
)
)
;
}
#
[
test
]
fn
no_sending_of_deletion_ping_if_unchanged_outside_of_run
(
)
{
let
_lock
=
lock_test
(
)
;
let
(
s
r
)
=
crossbeam_channel
:
:
bounded
:
:
<
String
>
(
1
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
sender
:
crossbeam_channel
:
:
Sender
<
String
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
url
:
String
_body
:
Vec
<
u8
>
_headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
self
.
sender
.
send
(
url
)
.
unwrap
(
)
;
net
:
:
UploadResult
:
:
http_status
(
200
)
}
}
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
Configuration
{
data_path
:
tmpname
.
clone
(
)
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
None
use_core_mps
:
false
}
;
let
_t
=
new_glean
(
Some
(
cfg
)
true
)
;
test_reset_glean
(
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
sender
:
s
}
)
)
use_core_mps
:
false
}
ClientInfoMetrics
:
:
unknown
(
)
false
)
;
assert_eq
!
(
0
r
.
len
(
)
)
;
}
#
[
test
]
#
[
ignore
]
fn
test_sending_of_startup_baseline_ping_with_application_lifetime_metric
(
)
{
todo
!
(
)
}
#
[
test
]
#
[
ignore
]
fn
test_dirty_flag_is_reset_to_false
(
)
{
todo
!
(
)
}
#
[
test
]
fn
setting_debug_view_tag_before_initialization_should_not_crash
(
)
{
let
_lock
=
lock_test
(
)
;
destroy_glean
(
true
)
;
let
(
s
r
)
=
crossbeam_channel
:
:
bounded
:
:
<
Vec
<
(
String
String
)
>
>
(
1
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
sender
:
crossbeam_channel
:
:
Sender
<
Vec
<
(
String
String
)
>
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
_url
:
String
_body
:
Vec
<
u8
>
headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
self
.
sender
.
send
(
headers
)
.
unwrap
(
)
;
net
:
:
UploadResult
:
:
http_status
(
200
)
}
}
set_debug_view_tag
(
"
valid
-
tag
"
)
;
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
sender
:
s
}
)
)
use_core_mps
:
false
}
;
let
_t
=
new_glean
(
Some
(
cfg
)
true
)
;
submit_ping_by_name
(
"
baseline
"
Some
(
"
inactive
"
)
)
;
let
headers
=
r
.
recv
(
)
.
unwrap
(
)
;
assert_eq
!
(
"
valid
-
tag
"
headers
.
iter
(
)
.
find
(
|
&
kv
|
kv
.
0
=
=
"
X
-
Debug
-
ID
"
)
.
unwrap
(
)
.
1
)
;
}
#
[
test
]
fn
setting_source_tags_before_initialization_should_not_crash
(
)
{
let
_lock
=
lock_test
(
)
;
destroy_glean
(
true
)
;
let
(
s
r
)
=
crossbeam_channel
:
:
bounded
:
:
<
Vec
<
(
String
String
)
>
>
(
1
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
sender
:
crossbeam_channel
:
:
Sender
<
Vec
<
(
String
String
)
>
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
_url
:
String
_body
:
Vec
<
u8
>
headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
self
.
sender
.
send
(
headers
)
.
unwrap
(
)
;
net
:
:
UploadResult
:
:
http_status
(
200
)
}
}
set_source_tags
(
vec
!
[
"
valid
-
tag1
"
.
to_string
(
)
"
valid
-
tag2
"
.
to_string
(
)
]
)
;
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
sender
:
s
}
)
)
use_core_mps
:
false
}
;
let
_t
=
new_glean
(
Some
(
cfg
)
true
)
;
submit_ping_by_name
(
"
baseline
"
Some
(
"
inactive
"
)
)
;
let
headers
=
r
.
recv
(
)
.
unwrap
(
)
;
assert_eq
!
(
"
valid
-
tag1
valid
-
tag2
"
headers
.
iter
(
)
.
find
(
|
&
kv
|
kv
.
0
=
=
"
X
-
Source
-
Tags
"
)
.
unwrap
(
)
.
1
)
;
}
#
[
test
]
fn
setting_source_tags_after_initialization_should_not_crash
(
)
{
let
_lock
=
lock_test
(
)
;
destroy_glean
(
true
)
;
let
(
s
r
)
=
crossbeam_channel
:
:
bounded
:
:
<
Vec
<
(
String
String
)
>
>
(
1
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
sender
:
crossbeam_channel
:
:
Sender
<
Vec
<
(
String
String
)
>
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
_url
:
String
_body
:
Vec
<
u8
>
headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
self
.
sender
.
send
(
headers
)
.
unwrap
(
)
;
net
:
:
UploadResult
:
:
http_status
(
200
)
}
}
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
sender
:
s
}
)
)
use_core_mps
:
false
}
;
let
_t
=
new_glean
(
Some
(
cfg
)
true
)
;
set_source_tags
(
vec
!
[
"
valid
-
tag1
"
.
to_string
(
)
"
valid
-
tag2
"
.
to_string
(
)
]
)
;
submit_ping_by_name
(
"
baseline
"
Some
(
"
inactive
"
)
)
;
let
headers
=
r
.
recv
(
)
.
unwrap
(
)
;
assert_eq
!
(
"
valid
-
tag1
valid
-
tag2
"
headers
.
iter
(
)
.
find
(
|
&
kv
|
kv
.
0
=
=
"
X
-
Source
-
Tags
"
)
.
unwrap
(
)
.
1
)
;
}
#
[
test
]
fn
flipping_upload_enabled_respects_order_of_events
(
)
{
let
_lock
=
lock_test
(
)
;
let
(
s
r
)
=
crossbeam_channel
:
:
bounded
:
:
<
String
>
(
1
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
sender
:
crossbeam_channel
:
:
Sender
<
String
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
url
:
String
_body
:
Vec
<
u8
>
_headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
self
.
sender
.
send
(
url
)
.
unwrap
(
)
;
net
:
:
UploadResult
:
:
http_status
(
200
)
}
}
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
sender
:
s
}
)
)
use_core_mps
:
false
}
;
let
sample_ping
=
PingType
:
:
new
(
"
sample
-
ping
-
1
"
true
false
vec
!
[
]
)
;
let
metric
=
private
:
:
StringMetric
:
:
new
(
CommonMetricData
{
name
:
"
string_metric
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
vec
!
[
"
sample
-
ping
-
1
"
.
into
(
)
]
lifetime
:
Lifetime
:
:
Ping
disabled
:
false
.
.
Default
:
:
default
(
)
}
)
;
let
_t
=
new_glean
(
Some
(
cfg
)
true
)
;
set_upload_enabled
(
false
)
;
metric
.
set
(
"
some
-
test
-
value
"
.
into
(
)
)
;
sample_ping
.
submit
(
None
)
;
let
url
=
r
.
recv
(
)
.
unwrap
(
)
;
assert
!
(
url
.
contains
(
"
deletion
-
request
"
)
)
;
}
#
[
test
]
fn
registering_pings_before_init_must_work
(
)
{
let
_lock
=
lock_test
(
)
;
destroy_glean
(
true
)
;
let
(
s
r
)
=
crossbeam_channel
:
:
bounded
:
:
<
String
>
(
1
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
sender
:
crossbeam_channel
:
:
Sender
<
String
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
url
:
String
_body
:
Vec
<
u8
>
_headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
self
.
sender
.
send
(
url
)
.
unwrap
(
)
;
net
:
:
UploadResult
:
:
http_status
(
200
)
}
}
let
sample_ping
=
PingType
:
:
new
(
"
pre
-
register
"
true
true
vec
!
[
]
)
;
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
sender
:
s
}
)
)
use_core_mps
:
false
}
;
let
_t
=
new_glean
(
Some
(
cfg
)
true
)
;
sample_ping
.
submit
(
None
)
;
let
url
=
r
.
recv
(
)
.
unwrap
(
)
;
assert
!
(
url
.
contains
(
"
pre
-
register
"
)
)
;
}
#
[
test
]
fn
test_a_ping_before_submission
(
)
{
let
_lock
=
lock_test
(
)
;
let
(
s
r
)
=
crossbeam_channel
:
:
bounded
:
:
<
String
>
(
1
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
sender
:
crossbeam_channel
:
:
Sender
<
String
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
url
:
String
_body
:
Vec
<
u8
>
_headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
self
.
sender
.
send
(
url
)
.
unwrap
(
)
;
net
:
:
UploadResult
:
:
http_status
(
200
)
}
}
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
cfg
=
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
sender
:
s
}
)
)
use_core_mps
:
false
}
;
let
_t
=
new_glean
(
Some
(
cfg
)
true
)
;
let
sample_ping
=
PingType
:
:
new
(
"
custom1
"
true
true
vec
!
[
]
)
;
let
metric
=
CounterMetric
:
:
new
(
CommonMetricData
{
name
:
"
counter_metric
"
.
into
(
)
category
:
"
test
"
.
into
(
)
send_in_pings
:
vec
!
[
"
custom1
"
.
into
(
)
]
lifetime
:
Lifetime
:
:
Application
disabled
:
false
dynamic_label
:
None
}
)
;
metric
.
add
(
1
)
;
sample_ping
.
test_before_next_submit
(
move
|
reason
|
{
assert_eq
!
(
None
reason
)
;
assert_eq
!
(
1
metric
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
}
)
;
sample_ping
.
submit
(
None
)
;
let
url
=
r
.
recv
(
)
.
unwrap
(
)
;
assert
!
(
url
.
contains
(
"
custom1
"
)
)
;
}
#
[
test
]
fn
test_boolean_get_num_errors
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
false
)
;
let
metric
=
BooleanMetric
:
:
new
(
CommonMetricData
{
name
:
"
counter_metric
"
.
into
(
)
category
:
"
test
"
.
into
(
)
send_in_pings
:
vec
!
[
"
custom1
"
.
into
(
)
]
lifetime
:
Lifetime
:
:
Application
disabled
:
false
dynamic_label
:
Some
(
str
:
:
to_string
(
"
asdf
"
)
)
}
)
;
let
result
=
metric
.
test_get_num_recorded_errors
(
ErrorType
:
:
InvalidLabel
)
;
assert_eq
!
(
result
0
)
;
}
#
[
test
]
fn
signaling_done
(
)
{
let
_lock
=
lock_test
(
)
;
#
[
derive
(
Debug
)
]
pub
struct
FakeUploader
{
barrier
:
Arc
<
Barrier
>
counter
:
Arc
<
Mutex
<
HashMap
<
ThreadId
u32
>
>
>
}
impl
net
:
:
PingUploader
for
FakeUploader
{
fn
upload
(
&
self
_url
:
String
_body
:
Vec
<
u8
>
_headers
:
Vec
<
(
String
String
)
>
)
-
>
net
:
:
UploadResult
{
let
mut
map
=
self
.
counter
.
lock
(
)
.
unwrap
(
)
;
*
map
.
entry
(
thread
:
:
current
(
)
.
id
(
)
)
.
or_insert
(
0
)
+
=
1
;
self
.
barrier
.
wait
(
)
;
net
:
:
UploadResult
:
:
done
(
)
}
}
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
tmpname
=
dir
.
path
(
)
.
to_path_buf
(
)
;
let
barrier
=
Arc
:
:
new
(
Barrier
:
:
new
(
2
)
)
;
let
call_count
=
Arc
:
:
new
(
Mutex
:
:
default
(
)
)
;
let
cfg
=
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
server_endpoint
:
Some
(
"
invalid
-
test
-
host
"
.
into
(
)
)
uploader
:
Some
(
Box
:
:
new
(
FakeUploader
{
barrier
:
Arc
:
:
clone
(
&
barrier
)
counter
:
Arc
:
:
clone
(
&
call_count
)
}
)
)
use_core_mps
:
false
}
;
let
_t
=
new_glean
(
Some
(
cfg
)
true
)
;
const
PING_NAME
:
&
str
=
"
test
-
ping
"
;
let
custom_ping
=
private
:
:
PingType
:
:
new
(
PING_NAME
true
true
vec
!
[
]
)
;
custom_ping
.
submit
(
None
)
;
custom_ping
.
submit
(
None
)
;
barrier
.
wait
(
)
;
custom_ping
.
submit
(
None
)
;
barrier
.
wait
(
)
;
std
:
:
thread
:
:
sleep
(
std
:
:
time
:
:
Duration
:
:
from_millis
(
100
)
)
;
let
map
=
call_count
.
lock
(
)
.
unwrap
(
)
;
assert_eq
!
(
2
map
.
len
(
)
"
should
have
launched
2
uploader
threads
"
)
;
for
&
count
in
map
.
values
(
)
{
assert_eq
!
(
1
count
"
each
thread
should
call
upload
only
once
"
)
;
}
}
