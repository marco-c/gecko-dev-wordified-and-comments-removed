use
std
:
:
sync
:
:
{
atomic
:
:
{
AtomicBool
Ordering
}
Arc
}
;
use
std
:
:
thread
;
use
std
:
:
time
:
:
Duration
;
use
crate
:
:
with_glean
;
use
glean_core
:
:
upload
:
:
PingUploadTask
;
pub
use
glean_core
:
:
upload
:
:
{
PingRequest
UploadResult
}
;
pub
use
http_uploader
:
:
*
;
mod
http_uploader
;
const
THROTTLE_BACKOFF_TIME
:
Duration
=
Duration
:
:
from_secs
(
60
)
;
pub
trait
PingUploader
:
std
:
:
fmt
:
:
Debug
+
Send
+
Sync
{
fn
upload
(
&
self
url
:
String
body
:
Vec
<
u8
>
headers
:
Vec
<
(
String
String
)
>
)
-
>
UploadResult
;
}
#
[
derive
(
Debug
)
]
pub
(
crate
)
struct
UploadManager
{
inner
:
Arc
<
Inner
>
}
#
[
derive
(
Debug
)
]
struct
Inner
{
server_endpoint
:
String
uploader
:
Box
<
dyn
PingUploader
+
'
static
>
thread_running
:
AtomicBool
}
impl
UploadManager
{
pub
(
crate
)
fn
new
(
server_endpoint
:
String
new_uploader
:
Box
<
dyn
PingUploader
+
'
static
>
)
-
>
Self
{
Self
{
inner
:
Arc
:
:
new
(
Inner
{
server_endpoint
uploader
:
new_uploader
thread_running
:
AtomicBool
:
:
new
(
false
)
}
)
}
}
pub
(
crate
)
fn
trigger_upload
(
&
self
)
{
if
self
.
inner
.
thread_running
.
load
(
Ordering
:
:
SeqCst
)
{
log
:
:
debug
!
(
"
The
upload
task
is
already
running
.
"
)
;
return
;
}
let
inner
=
Arc
:
:
clone
(
&
self
.
inner
)
;
thread
:
:
Builder
:
:
new
(
)
.
name
(
"
glean
.
upload
"
.
into
(
)
)
.
spawn
(
move
|
|
{
inner
.
thread_running
.
store
(
true
Ordering
:
:
SeqCst
)
;
loop
{
let
incoming_task
=
with_glean
(
|
glean
|
glean
.
get_upload_task
(
)
)
;
match
incoming_task
{
PingUploadTask
:
:
Upload
(
request
)
=
>
{
let
doc_id
=
request
.
document_id
.
clone
(
)
;
let
upload_url
=
format
!
(
"
{
}
{
}
"
inner
.
server_endpoint
request
.
path
)
;
let
headers
:
Vec
<
(
String
String
)
>
=
request
.
headers
.
into_iter
(
)
.
collect
(
)
;
let
result
=
inner
.
uploader
.
upload
(
upload_url
request
.
body
headers
)
;
with_glean
(
|
glean
|
glean
.
process_ping_upload_response
(
&
doc_id
result
)
)
;
}
PingUploadTask
:
:
Wait
=
>
{
thread
:
:
sleep
(
THROTTLE_BACKOFF_TIME
)
;
}
PingUploadTask
:
:
Done
=
>
{
inner
.
thread_running
.
store
(
false
Ordering
:
:
SeqCst
)
;
return
;
}
}
}
}
)
.
expect
(
"
Failed
to
spawn
Glean
'
s
uploader
thread
"
)
;
}
}
