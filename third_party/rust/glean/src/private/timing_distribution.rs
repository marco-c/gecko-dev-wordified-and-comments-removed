use
inherent
:
:
inherent
;
use
std
:
:
sync
:
:
{
Arc
RwLock
}
;
use
glean_core
:
:
metrics
:
:
{
DistributionData
MetricType
TimeUnit
TimerId
}
;
use
glean_core
:
:
ErrorType
;
use
crate
:
:
dispatcher
;
#
[
derive
(
Clone
)
]
pub
struct
TimingDistributionMetric
(
pub
(
crate
)
Arc
<
RwLock
<
glean_core
:
:
metrics
:
:
TimingDistributionMetric
>
>
)
;
impl
TimingDistributionMetric
{
pub
fn
new
(
meta
:
glean_core
:
:
CommonMetricData
time_unit
:
TimeUnit
)
-
>
Self
{
Self
(
Arc
:
:
new
(
RwLock
:
:
new
(
glean_core
:
:
metrics
:
:
TimingDistributionMetric
:
:
new
(
meta
time_unit
)
)
)
)
}
}
#
[
inherent
(
pub
)
]
impl
glean_core
:
:
traits
:
:
TimingDistribution
for
TimingDistributionMetric
{
fn
start
(
&
self
)
-
>
TimerId
{
let
start_time
=
time
:
:
precise_time_ns
(
)
;
self
.
0
.
write
(
)
.
unwrap
(
)
.
set_start
(
start_time
)
}
fn
stop_and_accumulate
(
&
self
id
:
TimerId
)
{
let
stop_time
=
time
:
:
precise_time_ns
(
)
;
let
metric
=
Arc
:
:
clone
(
&
self
.
0
)
;
crate
:
:
launch_with_glean
(
move
|
glean
|
{
metric
.
write
(
)
.
unwrap
(
)
.
set_stop_and_accumulate
(
glean
id
stop_time
)
}
)
;
}
fn
cancel
(
&
self
id
:
TimerId
)
{
let
metric
=
Arc
:
:
clone
(
&
self
.
0
)
;
dispatcher
:
:
launch
(
move
|
|
metric
.
write
(
)
.
unwrap
(
)
.
cancel
(
id
)
)
;
}
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
DistributionData
>
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
with_glean
(
|
glean
|
{
let
inner
=
self
.
0
.
read
(
)
.
expect
(
"
Lock
poisoned
for
timing
distribution
metric
on
test_get_value
.
"
)
;
let
queried_ping_name
=
ping_name
.
into
(
)
.
unwrap_or_else
(
|
|
&
inner
.
meta
(
)
.
send_in_pings
[
0
]
)
;
inner
.
test_get_value
(
glean
queried_ping_name
)
}
)
}
fn
test_get_num_recorded_errors
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
error
:
ErrorType
ping_name
:
S
)
-
>
i32
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
with_glean_mut
(
|
glean
|
{
glean_core
:
:
test_get_num_recorded_errors
(
&
glean
self
.
0
.
read
(
)
.
unwrap
(
)
.
meta
(
)
error
ping_name
.
into
(
)
)
.
unwrap_or
(
0
)
}
)
}
}
