use
inherent
:
:
inherent
;
use
std
:
:
sync
:
:
Arc
;
use
glean_core
:
:
metrics
:
:
MetricType
;
use
glean_core
:
:
ErrorType
;
use
crate
:
:
dispatcher
;
#
[
derive
(
Clone
)
]
pub
struct
StringListMetric
(
pub
(
crate
)
Arc
<
glean_core
:
:
metrics
:
:
StringListMetric
>
)
;
impl
StringListMetric
{
pub
fn
new
(
meta
:
glean_core
:
:
CommonMetricData
)
-
>
Self
{
Self
(
Arc
:
:
new
(
glean_core
:
:
metrics
:
:
StringListMetric
:
:
new
(
meta
)
)
)
}
}
#
[
inherent
(
pub
)
]
impl
glean_core
:
:
traits
:
:
StringList
for
StringListMetric
{
fn
add
<
S
:
Into
<
String
>
>
(
&
self
value
:
S
)
{
let
metric
=
Arc
:
:
clone
(
&
self
.
0
)
;
let
new_value
=
value
.
into
(
)
;
dispatcher
:
:
launch
(
move
|
|
crate
:
:
with_glean
(
|
glean
|
metric
.
add
(
glean
new_value
)
)
)
;
}
fn
set
(
&
self
value
:
Vec
<
String
>
)
{
let
metric
=
Arc
:
:
clone
(
&
self
.
0
)
;
dispatcher
:
:
launch
(
move
|
|
crate
:
:
with_glean
(
|
glean
|
metric
.
set
(
glean
value
)
)
)
;
}
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
Vec
<
String
>
>
{
crate
:
:
block_on_dispatcher
(
)
;
let
queried_ping_name
=
ping_name
.
into
(
)
.
unwrap_or_else
(
|
|
&
self
.
0
.
meta
(
)
.
send_in_pings
[
0
]
)
;
crate
:
:
with_glean
(
|
glean
|
self
.
0
.
test_get_value
(
glean
queried_ping_name
)
)
}
fn
test_get_num_recorded_errors
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
error
:
ErrorType
ping_name
:
S
)
-
>
i32
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
with_glean_mut
(
|
glean
|
{
glean_core
:
:
test_get_num_recorded_errors
(
&
glean
self
.
0
.
meta
(
)
error
ping_name
.
into
(
)
)
.
unwrap_or
(
0
)
}
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
crate
:
:
common_test
:
:
{
lock_test
new_glean
}
;
use
crate
:
:
{
CommonMetricData
ErrorType
}
;
#
[
test
]
fn
string_list_metric_docs
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
true
)
;
let
engine_metric
:
StringListMetric
=
StringListMetric
:
:
new
(
CommonMetricData
{
name
:
"
event
"
.
into
(
)
category
:
"
test
"
.
into
(
)
send_in_pings
:
vec
!
[
"
test1
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
)
;
let
engines
:
Vec
<
String
>
=
vec
!
[
"
Google
"
.
to_string
(
)
"
DuckDuckGo
"
.
to_string
(
)
]
;
engines
.
iter
(
)
.
for_each
(
|
x
|
engine_metric
.
add
(
x
)
)
;
engine_metric
.
set
(
engines
)
;
assert
!
(
engine_metric
.
test_get_value
(
None
)
.
is_some
(
)
)
;
assert_eq
!
(
vec
!
[
"
Google
"
.
to_string
(
)
"
DuckDuckGo
"
.
to_string
(
)
]
engine_metric
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
assert_eq
!
(
0
engine_metric
.
test_get_num_recorded_errors
(
ErrorType
:
:
InvalidValue
None
)
)
;
}
}
