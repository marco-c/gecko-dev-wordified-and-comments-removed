use
std
:
:
marker
:
:
PhantomData
;
use
glean_core
:
:
metrics
:
:
JsonValue
;
use
glean_core
:
:
traits
;
use
crate
:
:
ErrorType
;
#
[
derive
(
Clone
)
]
pub
struct
ObjectMetric
<
K
>
{
pub
(
crate
)
inner
:
glean_core
:
:
metrics
:
:
ObjectMetric
object_type
:
PhantomData
<
K
>
}
impl
<
K
:
traits
:
:
ObjectSerialize
>
ObjectMetric
<
K
>
{
pub
fn
new
(
meta
:
glean_core
:
:
CommonMetricData
)
-
>
Self
{
let
inner
=
glean_core
:
:
metrics
:
:
ObjectMetric
:
:
new
(
meta
)
;
Self
{
inner
object_type
:
PhantomData
}
}
pub
fn
set
(
&
self
object
:
K
)
{
let
obj
=
object
.
into_serialized_object
(
)
.
expect
(
"
failed
to
serialize
object
.
This
should
be
impossible
.
"
)
;
self
.
inner
.
set
(
obj
)
;
}
pub
fn
set_string
(
&
self
object
:
String
)
{
let
data
=
match
K
:
:
from_str
(
&
object
)
{
Ok
(
data
)
=
>
data
Err
(
_
)
=
>
{
self
.
inner
.
record_schema_error
(
)
;
return
;
}
}
;
self
.
set
(
data
)
}
pub
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
JsonValue
>
{
let
ping_name
=
ping_name
.
into
(
)
.
map
(
|
s
|
s
.
to_string
(
)
)
;
self
.
inner
.
test_get_value
(
ping_name
)
}
pub
fn
test_get_num_recorded_errors
(
&
self
error
:
ErrorType
)
-
>
i32
{
self
.
inner
.
test_get_num_recorded_errors
(
error
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
crate
:
:
common_test
:
:
{
lock_test
new_glean
}
;
use
crate
:
:
CommonMetricData
;
use
serde_json
:
:
json
;
#
[
test
]
fn
simple_array
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
true
)
;
type
SimpleArray
=
Vec
<
i64
>
;
let
metric
:
ObjectMetric
<
SimpleArray
>
=
ObjectMetric
:
:
new
(
CommonMetricData
{
name
:
"
object
"
.
into
(
)
category
:
"
test
"
.
into
(
)
send_in_pings
:
vec
!
[
"
test1
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
)
;
let
arr
=
SimpleArray
:
:
from
(
[
1
2
3
]
)
;
metric
.
set
(
arr
)
;
let
data
=
metric
.
test_get_value
(
None
)
.
expect
(
"
no
object
recorded
"
)
;
let
expected
=
json
!
(
[
1
2
3
]
)
;
assert_eq
!
(
expected
data
)
;
}
#
[
test
]
fn
complex_nested_object
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
true
)
;
type
BalloonsObject
=
Vec
<
BalloonsObjectItem
>
;
#
[
derive
(
Debug
Hash
Eq
PartialEq
traits
:
:
__serde
:
:
Deserialize
traits
:
:
__serde
:
:
Serialize
)
]
#
[
serde
(
crate
=
"
traits
:
:
__serde
"
)
]
#
[
serde
(
deny_unknown_fields
)
]
struct
BalloonsObjectItem
{
#
[
serde
(
skip_serializing_if
=
"
Option
:
:
is_none
"
)
]
colour
:
Option
<
String
>
#
[
serde
(
skip_serializing_if
=
"
Option
:
:
is_none
"
)
]
diameter
:
Option
<
i64
>
}
let
metric
:
ObjectMetric
<
BalloonsObject
>
=
ObjectMetric
:
:
new
(
CommonMetricData
{
name
:
"
object
"
.
into
(
)
category
:
"
test
"
.
into
(
)
send_in_pings
:
vec
!
[
"
test1
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
)
;
let
balloons
=
BalloonsObject
:
:
from
(
[
BalloonsObjectItem
{
colour
:
Some
(
"
red
"
.
to_string
(
)
)
diameter
:
Some
(
5
)
}
BalloonsObjectItem
{
colour
:
Some
(
"
green
"
.
to_string
(
)
)
diameter
:
None
}
]
)
;
metric
.
set
(
balloons
)
;
let
data
=
metric
.
test_get_value
(
None
)
.
expect
(
"
no
object
recorded
"
)
;
let
expected
=
json
!
(
[
{
"
colour
"
:
"
red
"
"
diameter
"
:
5
}
{
"
colour
"
:
"
green
"
}
]
)
;
assert_eq
!
(
expected
data
)
;
}
#
[
test
]
fn
set_string_api
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
true
)
;
type
SimpleArray
=
Vec
<
i64
>
;
let
metric
:
ObjectMetric
<
SimpleArray
>
=
ObjectMetric
:
:
new
(
CommonMetricData
{
name
:
"
object
"
.
into
(
)
category
:
"
test
"
.
into
(
)
send_in_pings
:
vec
!
[
"
test1
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
)
;
let
arr_str
=
String
:
:
from
(
"
[
1
2
3
]
"
)
;
metric
.
set_string
(
arr_str
)
;
let
data
=
metric
.
test_get_value
(
None
)
.
expect
(
"
no
object
recorded
"
)
;
let
expected
=
json
!
(
[
1
2
3
]
)
;
assert_eq
!
(
expected
data
)
;
}
}
