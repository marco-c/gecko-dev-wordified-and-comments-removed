use
inherent
:
:
inherent
;
use
std
:
:
sync
:
:
Arc
;
use
glean_core
:
:
metrics
:
:
MetricType
;
use
glean_core
:
:
ErrorType
;
use
crate
:
:
dispatcher
;
mod
private
{
use
crate
:
:
{
private
:
:
BooleanMetric
private
:
:
CounterMetric
private
:
:
StringMetric
CommonMetricData
}
;
use
std
:
:
sync
:
:
Arc
;
pub
trait
Sealed
{
type
Inner
:
glean_core
:
:
metrics
:
:
MetricType
+
Clone
;
fn
from_inner
(
metric
:
Self
:
:
Inner
)
-
>
Self
;
fn
new_inner
(
meta
:
crate
:
:
CommonMetricData
)
-
>
Self
:
:
Inner
;
}
impl
Sealed
for
BooleanMetric
{
type
Inner
=
glean_core
:
:
metrics
:
:
BooleanMetric
;
fn
from_inner
(
metric
:
Self
:
:
Inner
)
-
>
Self
{
BooleanMetric
(
Arc
:
:
new
(
metric
)
)
}
fn
new_inner
(
meta
:
CommonMetricData
)
-
>
Self
:
:
Inner
{
glean_core
:
:
metrics
:
:
BooleanMetric
:
:
new
(
meta
)
}
}
impl
Sealed
for
StringMetric
{
type
Inner
=
glean_core
:
:
metrics
:
:
StringMetric
;
fn
from_inner
(
metric
:
Self
:
:
Inner
)
-
>
Self
{
StringMetric
(
Arc
:
:
new
(
metric
)
)
}
fn
new_inner
(
meta
:
CommonMetricData
)
-
>
Self
:
:
Inner
{
glean_core
:
:
metrics
:
:
StringMetric
:
:
new
(
meta
)
}
}
impl
Sealed
for
CounterMetric
{
type
Inner
=
glean_core
:
:
metrics
:
:
CounterMetric
;
fn
from_inner
(
metric
:
Self
:
:
Inner
)
-
>
Self
{
CounterMetric
(
Arc
:
:
new
(
metric
)
)
}
fn
new_inner
(
meta
:
CommonMetricData
)
-
>
Self
:
:
Inner
{
glean_core
:
:
metrics
:
:
CounterMetric
:
:
new
(
meta
)
}
}
}
pub
trait
AllowLabeled
:
private
:
:
Sealed
{
}
impl
<
T
>
AllowLabeled
for
T
where
T
:
private
:
:
Sealed
{
}
#
[
derive
(
Clone
)
]
pub
struct
LabeledMetric
<
T
:
AllowLabeled
>
(
pub
(
crate
)
Arc
<
glean_core
:
:
metrics
:
:
LabeledMetric
<
T
:
:
Inner
>
>
)
;
impl
<
T
>
LabeledMetric
<
T
>
where
T
:
AllowLabeled
{
pub
fn
new
(
meta
:
glean_core
:
:
CommonMetricData
labels
:
Option
<
Vec
<
String
>
>
)
-
>
Self
{
let
submetric
=
T
:
:
new_inner
(
meta
)
;
let
core
=
glean_core
:
:
metrics
:
:
LabeledMetric
:
:
new
(
submetric
labels
)
;
Self
(
Arc
:
:
new
(
core
)
)
}
}
#
[
inherent
(
pub
)
]
impl
<
T
>
glean_core
:
:
traits
:
:
Labeled
<
T
>
for
LabeledMetric
<
T
>
where
T
:
AllowLabeled
+
Clone
{
fn
get
(
&
self
label
:
&
str
)
-
>
T
{
let
inner
=
self
.
0
.
get
(
label
)
;
T
:
:
from_inner
(
inner
)
}
fn
test_get_num_recorded_errors
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
error
:
ErrorType
ping_name
:
S
)
-
>
i32
{
dispatcher
:
:
block_on_queue
(
)
;
crate
:
:
with_glean_mut
(
|
glean
|
{
glean_core
:
:
test_get_num_recorded_errors
(
&
glean
self
.
0
.
get_submetric
(
)
.
meta
(
)
error
ping_name
.
into
(
)
)
.
unwrap_or
(
0
)
}
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
ErrorType
;
use
crate
:
:
common_test
:
:
{
lock_test
new_glean
}
;
use
crate
:
:
destroy_glean
;
use
crate
:
:
private
:
:
{
BooleanMetric
CounterMetric
LabeledMetric
StringMetric
}
;
use
crate
:
:
CommonMetricData
;
#
[
test
]
fn
test_labeled_counter_type
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
true
)
;
let
metric
:
LabeledMetric
<
CounterMetric
>
=
LabeledMetric
:
:
new
(
CommonMetricData
{
name
:
"
labeled_counter
"
.
into
(
)
category
:
"
labeled
"
.
into
(
)
send_in_pings
:
vec
!
[
"
test1
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
None
)
;
metric
.
get
(
"
label1
"
)
.
add
(
1
)
;
metric
.
get
(
"
label2
"
)
.
add
(
2
)
;
assert_eq
!
(
1
metric
.
get
(
"
label1
"
)
.
test_get_value
(
"
test1
"
)
.
unwrap
(
)
)
;
assert_eq
!
(
2
metric
.
get
(
"
label2
"
)
.
test_get_value
(
"
test1
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
test_other_label_with_predefined_labels
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
true
)
;
let
metric
:
LabeledMetric
<
CounterMetric
>
=
LabeledMetric
:
:
new
(
CommonMetricData
{
name
:
"
labeled_counter
"
.
into
(
)
category
:
"
labeled
"
.
into
(
)
send_in_pings
:
vec
!
[
"
test1
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
Some
(
vec
!
[
"
foo
"
.
into
(
)
"
bar
"
.
into
(
)
"
baz
"
.
into
(
)
]
)
)
;
metric
.
get
(
"
foo
"
)
.
add
(
1
)
;
metric
.
get
(
"
foo
"
)
.
add
(
2
)
;
metric
.
get
(
"
bar
"
)
.
add
(
1
)
;
metric
.
get
(
"
not_there
"
)
.
add
(
1
)
;
metric
.
get
(
"
also_not_there
"
)
.
add
(
1
)
;
metric
.
get
(
"
not_me
"
)
.
add
(
1
)
;
assert_eq
!
(
3
metric
.
get
(
"
foo
"
)
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
assert_eq
!
(
1
metric
.
get
(
"
bar
"
)
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
assert
!
(
metric
.
get
(
"
baz
"
)
.
test_get_value
(
None
)
.
is_none
(
)
)
;
assert_eq
!
(
3
metric
.
get
(
"
__other__
"
)
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
test_other_label_without_predefined_labels
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
true
)
;
let
metric
:
LabeledMetric
<
CounterMetric
>
=
LabeledMetric
:
:
new
(
CommonMetricData
{
name
:
"
labeled_counter
"
.
into
(
)
category
:
"
labeled
"
.
into
(
)
send_in_pings
:
vec
!
[
"
test1
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
None
)
;
for
i
in
0
.
.
=
20
{
metric
.
get
(
format
!
(
"
label_
{
}
"
i
)
.
as_str
(
)
)
.
add
(
1
)
;
}
metric
.
get
(
"
label_0
"
)
.
add
(
1
)
;
assert_eq
!
(
2
metric
.
get
(
"
label_0
"
)
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
for
i
in
1
.
.
15
{
assert_eq
!
(
1
metric
.
get
(
format
!
(
"
label_
{
}
"
i
)
.
as_str
(
)
)
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
}
assert_eq
!
(
5
metric
.
get
(
"
__other__
"
)
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
test_other_label_without_predefined_labels_before_glean_init
(
)
{
let
_lock
=
lock_test
(
)
;
destroy_glean
(
true
)
;
let
metric
:
LabeledMetric
<
CounterMetric
>
=
LabeledMetric
:
:
new
(
CommonMetricData
{
name
:
"
labeled_counter
"
.
into
(
)
category
:
"
labeled
"
.
into
(
)
send_in_pings
:
vec
!
[
"
test1
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
None
)
;
for
i
in
0
.
.
=
20
{
metric
.
get
(
format
!
(
"
label_
{
}
"
i
)
.
as_str
(
)
)
.
add
(
1
)
;
}
metric
.
get
(
"
label_0
"
)
.
add
(
1
)
;
let
_t
=
new_glean
(
None
false
)
;
assert_eq
!
(
2
metric
.
get
(
"
label_0
"
)
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
for
i
in
1
.
.
15
{
assert_eq
!
(
1
metric
.
get
(
format
!
(
"
label_
{
}
"
i
)
.
as_str
(
)
)
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
}
assert_eq
!
(
5
metric
.
get
(
"
__other__
"
)
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
test_labeled_string_type
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
true
)
;
let
metric
:
LabeledMetric
<
StringMetric
>
=
LabeledMetric
:
:
new
(
CommonMetricData
{
name
:
"
labeled_string
"
.
into
(
)
category
:
"
labeled
"
.
into
(
)
send_in_pings
:
vec
!
[
"
test1
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
None
)
;
metric
.
get
(
"
label1
"
)
.
set
(
"
foo
"
)
;
metric
.
get
(
"
label2
"
)
.
set
(
"
bar
"
)
;
assert_eq
!
(
"
foo
"
metric
.
get
(
"
label1
"
)
.
test_get_value
(
"
test1
"
)
.
unwrap
(
)
)
;
assert_eq
!
(
"
bar
"
metric
.
get
(
"
label2
"
)
.
test_get_value
(
"
test1
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
test_labeled_boolean_type
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
true
)
;
let
metric
:
LabeledMetric
<
BooleanMetric
>
=
LabeledMetric
:
:
new
(
CommonMetricData
{
name
:
"
labeled_boolean
"
.
into
(
)
category
:
"
labeled
"
.
into
(
)
send_in_pings
:
vec
!
[
"
test1
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
None
)
;
metric
.
get
(
"
label1
"
)
.
set
(
false
)
;
metric
.
get
(
"
label2
"
)
.
set
(
true
)
;
assert
!
(
!
metric
.
get
(
"
label1
"
)
.
test_get_value
(
"
test1
"
)
.
unwrap
(
)
)
;
assert
!
(
metric
.
get
(
"
label2
"
)
.
test_get_value
(
"
test1
"
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
test_invalid_labels_record_errors
(
)
{
let
_lock
=
lock_test
(
)
;
let
_t
=
new_glean
(
None
true
)
;
let
metric
:
LabeledMetric
<
BooleanMetric
>
=
LabeledMetric
:
:
new
(
CommonMetricData
{
name
:
"
labeled_boolean
"
.
into
(
)
category
:
"
labeled
"
.
into
(
)
send_in_pings
:
vec
!
[
"
test1
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
None
)
;
let
invalid_label
=
"
!
#
I
'
m
invalid
#
-
-
_
"
;
metric
.
get
(
invalid_label
)
.
set
(
true
)
;
assert_eq
!
(
true
metric
.
get
(
"
__other__
"
)
.
test_get_value
(
None
)
.
unwrap
(
)
)
;
assert_eq
!
(
1
metric
.
test_get_num_recorded_errors
(
ErrorType
:
:
InvalidLabel
None
)
)
;
}
}
