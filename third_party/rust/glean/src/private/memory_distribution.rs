use
inherent
:
:
inherent
;
use
std
:
:
sync
:
:
Arc
;
use
glean_core
:
:
metrics
:
:
{
DistributionData
MemoryUnit
MetricType
}
;
use
glean_core
:
:
ErrorType
;
use
crate
:
:
dispatcher
;
#
[
derive
(
Clone
)
]
pub
struct
MemoryDistributionMetric
(
pub
(
crate
)
Arc
<
glean_core
:
:
metrics
:
:
MemoryDistributionMetric
>
)
;
impl
MemoryDistributionMetric
{
pub
fn
new
(
meta
:
glean_core
:
:
CommonMetricData
memory_unit
:
MemoryUnit
)
-
>
Self
{
Self
(
Arc
:
:
new
(
glean_core
:
:
metrics
:
:
MemoryDistributionMetric
:
:
new
(
meta
memory_unit
)
)
)
}
}
#
[
inherent
(
pub
)
]
impl
glean_core
:
:
traits
:
:
MemoryDistribution
for
MemoryDistributionMetric
{
fn
accumulate
(
&
self
sample
:
u64
)
{
let
metric
=
Arc
:
:
clone
(
&
self
.
0
)
;
dispatcher
:
:
launch
(
move
|
|
crate
:
:
with_glean
(
|
glean
|
metric
.
accumulate
(
glean
sample
)
)
)
;
}
fn
test_get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
ping_name
:
S
)
-
>
Option
<
DistributionData
>
{
crate
:
:
block_on_dispatcher
(
)
;
let
queried_ping_name
=
ping_name
.
into
(
)
.
unwrap_or_else
(
|
|
&
self
.
0
.
meta
(
)
.
send_in_pings
[
0
]
)
;
crate
:
:
with_glean
(
|
glean
|
self
.
0
.
test_get_value
(
glean
queried_ping_name
)
)
}
fn
test_get_num_recorded_errors
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
error
:
ErrorType
ping_name
:
S
)
-
>
i32
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
with_glean_mut
(
|
glean
|
{
glean_core
:
:
test_get_num_recorded_errors
(
&
glean
self
.
0
.
meta
(
)
error
ping_name
.
into
(
)
)
.
unwrap_or
(
0
)
}
)
}
}
