#
ifndef
BACKTRACE_INTERNAL_H
#
define
BACKTRACE_INTERNAL_H
#
ifndef
GCC_VERSION
#
define
GCC_VERSION
(
__GNUC__
*
1000
+
__GNUC_MINOR__
)
#
endif
#
if
(
GCC_VERSION
<
2007
)
#
define
__attribute__
(
x
)
#
endif
#
ifndef
ATTRIBUTE_UNUSED
#
define
ATTRIBUTE_UNUSED
__attribute__
(
(
__unused__
)
)
#
endif
#
ifndef
ATTRIBUTE_MALLOC
#
if
(
GCC_VERSION
>
=
2096
)
#
define
ATTRIBUTE_MALLOC
__attribute__
(
(
__malloc__
)
)
#
else
#
define
ATTRIBUTE_MALLOC
#
endif
#
endif
#
ifndef
HAVE_SYNC_FUNCTIONS
#
define
__sync_bool_compare_and_swap
(
A
B
C
)
(
abort
(
)
1
)
#
define
__sync_lock_test_and_set
(
A
B
)
(
abort
(
)
0
)
#
define
__sync_lock_release
(
A
)
abort
(
)
#
endif
#
ifdef
HAVE_ATOMIC_FUNCTIONS
#
define
backtrace_atomic_load_pointer
(
p
)
\
__atomic_load_n
(
(
p
)
__ATOMIC_ACQUIRE
)
#
define
backtrace_atomic_load_int
(
p
)
\
__atomic_load_n
(
(
p
)
__ATOMIC_ACQUIRE
)
#
define
backtrace_atomic_store_pointer
(
p
v
)
\
__atomic_store_n
(
(
p
)
(
v
)
__ATOMIC_RELEASE
)
#
define
backtrace_atomic_store_size_t
(
p
v
)
\
__atomic_store_n
(
(
p
)
(
v
)
__ATOMIC_RELEASE
)
#
define
backtrace_atomic_store_int
(
p
v
)
\
__atomic_store_n
(
(
p
)
(
v
)
__ATOMIC_RELEASE
)
#
else
#
ifdef
HAVE_SYNC_FUNCTIONS
extern
void
*
backtrace_atomic_load_pointer
(
void
*
)
;
extern
int
backtrace_atomic_load_int
(
int
*
)
;
extern
void
backtrace_atomic_store_pointer
(
void
*
void
*
)
;
extern
void
backtrace_atomic_store_size_t
(
size_t
*
size_t
)
;
extern
void
backtrace_atomic_store_int
(
int
*
int
)
;
#
else
#
define
backtrace_atomic_load_pointer
(
p
)
(
abort
(
)
(
void
*
)
NULL
)
#
define
backtrace_atomic_load_int
(
p
)
(
abort
(
)
0
)
#
define
backtrace_atomic_store_pointer
(
p
v
)
abort
(
)
#
define
backtrace_atomic_store_size_t
(
p
v
)
abort
(
)
#
define
backtrace_atomic_store_int
(
p
v
)
abort
(
)
#
endif
#
endif
typedef
int
(
*
fileline
)
(
struct
backtrace_state
*
state
uintptr_t
pc
backtrace_full_callback
callback
backtrace_error_callback
error_callback
void
*
data
)
;
typedef
void
(
*
syminfo
)
(
struct
backtrace_state
*
state
uintptr_t
pc
backtrace_syminfo_callback
callback
backtrace_error_callback
error_callback
void
*
data
)
;
struct
backtrace_state
{
const
char
*
filename
;
int
threaded
;
void
*
lock
;
fileline
fileline_fn
;
void
*
fileline_data
;
syminfo
syminfo_fn
;
void
*
syminfo_data
;
int
fileline_initialization_failed
;
int
lock_alloc
;
struct
backtrace_freelist_struct
*
freelist
;
}
;
extern
int
backtrace_open
(
const
char
*
filename
backtrace_error_callback
error_callback
void
*
data
int
*
does_not_exist
)
;
struct
backtrace_view
{
const
void
*
data
;
void
*
base
;
size_t
len
;
}
;
extern
int
backtrace_get_view
(
struct
backtrace_state
*
state
int
descriptor
off_t
offset
size_t
size
backtrace_error_callback
error_callback
void
*
data
struct
backtrace_view
*
view
)
;
extern
void
backtrace_release_view
(
struct
backtrace_state
*
state
struct
backtrace_view
*
view
backtrace_error_callback
error_callback
void
*
data
)
;
extern
int
backtrace_close
(
int
descriptor
backtrace_error_callback
error_callback
void
*
data
)
;
extern
void
backtrace_qsort
(
void
*
base
size_t
count
size_t
size
int
(
*
compar
)
(
const
void
*
const
void
*
)
)
;
extern
void
*
backtrace_alloc
(
struct
backtrace_state
*
state
size_t
size
backtrace_error_callback
error_callback
void
*
data
)
ATTRIBUTE_MALLOC
;
extern
void
backtrace_free
(
struct
backtrace_state
*
state
void
*
mem
size_t
size
backtrace_error_callback
error_callback
void
*
data
)
;
struct
backtrace_vector
{
void
*
base
;
size_t
size
;
size_t
alc
;
}
;
extern
void
*
backtrace_vector_grow
(
struct
backtrace_state
*
state
size_t
size
backtrace_error_callback
error_callback
void
*
data
struct
backtrace_vector
*
vec
)
;
extern
void
*
backtrace_vector_finish
(
struct
backtrace_state
*
state
struct
backtrace_vector
*
vec
backtrace_error_callback
error_callback
void
*
data
)
;
extern
int
backtrace_vector_release
(
struct
backtrace_state
*
state
struct
backtrace_vector
*
vec
backtrace_error_callback
error_callback
void
*
data
)
;
extern
int
backtrace_initialize
(
struct
backtrace_state
*
state
const
char
*
filename
int
descriptor
backtrace_error_callback
error_callback
void
*
data
fileline
*
fileline_fn
)
;
extern
int
backtrace_dwarf_add
(
struct
backtrace_state
*
state
uintptr_t
base_address
const
unsigned
char
*
dwarf_info
size_t
dwarf_info_size
const
unsigned
char
*
dwarf_line
size_t
dwarf_line_size
const
unsigned
char
*
dwarf_abbrev
size_t
dwarf_abbrev_size
const
unsigned
char
*
dwarf_ranges
size_t
dwarf_range_size
const
unsigned
char
*
dwarf_str
size_t
dwarf_str_size
int
is_bigendian
backtrace_error_callback
error_callback
void
*
data
fileline
*
fileline_fn
)
;
extern
int
backtrace_uncompress_zdebug
(
struct
backtrace_state
*
const
unsigned
char
*
compressed
size_t
compressed_size
backtrace_error_callback
void
*
data
unsigned
char
*
*
uncompressed
size_t
*
uncompressed_size
)
;
#
endif
