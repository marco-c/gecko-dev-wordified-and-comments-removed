macro_rules
!
delegate_iterator
{
(
(
#
[
attr
:
meta
]
)
+
iter
:
ident
<
(
i
:
tt
)
*
>
=
>
(
inner
:
ident
)
:
:
+
<
item
:
ty
>
impl
(
args
:
tt
)
*
)
=
>
{
delegate_iterator_item
!
{
(
#
[
attr
]
)
+
iter
<
(
i
)
*
>
=
>
(
inner
)
:
:
+
<
item
>
:
item
impl
(
args
)
*
}
}
}
macro_rules
!
delegate_indexed_iterator
{
(
(
#
[
attr
:
meta
]
)
+
iter
:
ident
<
(
i
:
tt
)
*
>
=
>
(
inner
:
ident
)
:
:
+
<
item
:
ty
>
impl
(
args
:
tt
)
*
)
=
>
{
delegate_indexed_iterator_item
!
{
(
#
[
attr
]
)
+
iter
<
(
i
)
*
>
=
>
(
inner
)
:
:
+
<
item
>
:
item
impl
(
args
)
*
}
}
}
macro_rules
!
delegate_iterator_item
{
(
(
#
[
attr
:
meta
]
)
+
iter
:
ident
<
(
i
:
tt
)
*
>
=
>
inner
:
ty
:
item
:
ty
impl
(
args
:
tt
)
*
)
=
>
{
(
#
[
attr
]
)
+
pub
struct
iter
(
args
)
*
{
inner
:
inner
}
impl
(
args
)
*
ParallelIterator
for
iter
<
(
i
)
*
>
{
type
Item
=
item
;
fn
drive_unindexed
<
C
>
(
self
consumer
:
C
)
-
>
C
:
:
Result
where
C
:
UnindexedConsumer
<
Self
:
:
Item
>
{
self
.
inner
.
drive_unindexed
(
consumer
)
}
fn
opt_len
(
&
mut
self
)
-
>
Option
<
usize
>
{
self
.
inner
.
opt_len
(
)
}
}
}
}
macro_rules
!
delegate_indexed_iterator_item
{
(
(
#
[
attr
:
meta
]
)
+
iter
:
ident
<
(
i
:
tt
)
*
>
=
>
inner
:
ty
:
item
:
ty
impl
(
args
:
tt
)
*
)
=
>
{
delegate_iterator_item
!
{
(
#
[
attr
]
)
+
iter
<
(
i
)
*
>
=
>
inner
:
item
impl
(
args
)
*
}
impl
(
args
)
*
IndexedParallelIterator
for
iter
<
(
i
)
*
>
{
fn
drive
<
C
>
(
self
consumer
:
C
)
-
>
C
:
:
Result
where
C
:
Consumer
<
Self
:
:
Item
>
{
self
.
inner
.
drive
(
consumer
)
}
fn
len
(
&
mut
self
)
-
>
usize
{
self
.
inner
.
len
(
)
}
fn
with_producer
<
CB
>
(
self
callback
:
CB
)
-
>
CB
:
:
Output
where
CB
:
ProducerCallback
<
Self
:
:
Item
>
{
self
.
inner
.
with_producer
(
callback
)
}
}
}
}
