use
self
:
:
Kind
:
:
*
;
use
std
:
:
error
;
use
std
:
:
fmt
;
#
[
derive
(
Debug
)
]
pub
struct
Error
(
Kind
)
;
#
[
derive
(
Debug
)
]
enum
Kind
{
Shutdown
AtCapacity
}
impl
Error
{
pub
fn
shutdown
(
)
-
>
Error
{
Error
(
Shutdown
)
}
pub
fn
is_shutdown
(
&
self
)
-
>
bool
{
match
self
.
0
{
Kind
:
:
Shutdown
=
>
true
_
=
>
false
}
}
pub
fn
at_capacity
(
)
-
>
Error
{
Error
(
AtCapacity
)
}
pub
fn
is_at_capacity
(
&
self
)
-
>
bool
{
match
self
.
0
{
Kind
:
:
AtCapacity
=
>
true
_
=
>
false
}
}
}
impl
error
:
:
Error
for
Error
{
fn
description
(
&
self
)
-
>
&
str
{
use
self
:
:
Kind
:
:
*
;
match
self
.
0
{
Shutdown
=
>
"
timer
is
shutdown
"
AtCapacity
=
>
"
timer
is
at
capacity
and
cannot
create
a
new
entry
"
}
}
}
impl
fmt
:
:
Display
for
Error
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
use
std
:
:
error
:
:
Error
;
self
.
description
(
)
.
fmt
(
fmt
)
}
}
