#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
tokio
-
timer
/
0
.
2
.
11
"
)
]
#
!
[
deny
(
missing_docs
warnings
missing_debug_implementations
)
]
extern
crate
tokio_executor
;
extern
crate
crossbeam_utils
;
#
[
macro_use
]
extern
crate
futures
;
extern
crate
slab
;
pub
mod
clock
;
pub
mod
delay_queue
;
pub
mod
throttle
;
pub
mod
timeout
;
pub
mod
timer
;
mod
atomic
;
mod
deadline
;
mod
delay
;
mod
error
;
mod
interval
;
mod
wheel
;
#
[
deprecated
(
since
=
"
0
.
2
.
6
"
note
=
"
use
Timeout
instead
"
)
]
#
[
doc
(
hidden
)
]
#
[
allow
(
deprecated
)
]
pub
use
self
:
:
deadline
:
:
{
Deadline
DeadlineError
}
;
pub
use
self
:
:
delay
:
:
Delay
;
#
[
doc
(
inline
)
]
pub
use
self
:
:
delay_queue
:
:
DelayQueue
;
pub
use
self
:
:
error
:
:
Error
;
pub
use
self
:
:
interval
:
:
Interval
;
#
[
doc
(
inline
)
]
pub
use
self
:
:
timeout
:
:
Timeout
;
pub
use
self
:
:
timer
:
:
{
with_default
Timer
}
;
use
std
:
:
time
:
:
{
Duration
Instant
}
;
pub
fn
sleep
(
duration
:
Duration
)
-
>
Delay
{
Delay
:
:
new
(
Instant
:
:
now
(
)
+
duration
)
}
enum
Round
{
Up
Down
}
#
[
inline
]
fn
ms
(
duration
:
Duration
round
:
Round
)
-
>
u64
{
const
NANOS_PER_MILLI
:
u32
=
1_000_000
;
const
MILLIS_PER_SEC
:
u64
=
1_000
;
let
millis
=
match
round
{
Round
:
:
Up
=
>
(
duration
.
subsec_nanos
(
)
+
NANOS_PER_MILLI
-
1
)
/
NANOS_PER_MILLI
Round
:
:
Down
=
>
duration
.
subsec_nanos
(
)
/
NANOS_PER_MILLI
}
;
duration
.
as_secs
(
)
.
saturating_mul
(
MILLIS_PER_SEC
)
.
saturating_add
(
millis
as
u64
)
}
