use
Delay
;
use
clock
;
use
futures
:
:
{
Future
Stream
Poll
}
;
use
std
:
:
time
:
:
{
Instant
Duration
}
;
#
[
derive
(
Debug
)
]
pub
struct
Interval
{
delay
:
Delay
duration
:
Duration
}
impl
Interval
{
pub
fn
new
(
at
:
Instant
duration
:
Duration
)
-
>
Interval
{
assert
!
(
duration
>
Duration
:
:
new
(
0
0
)
"
duration
must
be
non
-
zero
.
"
)
;
Interval
:
:
new_with_delay
(
Delay
:
:
new
(
at
)
duration
)
}
pub
fn
new_interval
(
duration
:
Duration
)
-
>
Interval
{
Interval
:
:
new
(
clock
:
:
now
(
)
+
duration
duration
)
}
pub
(
crate
)
fn
new_with_delay
(
delay
:
Delay
duration
:
Duration
)
-
>
Interval
{
Interval
{
delay
duration
}
}
}
impl
Stream
for
Interval
{
type
Item
=
Instant
;
type
Error
=
:
:
Error
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
Self
:
:
Error
>
{
let
_
=
try_ready
!
(
self
.
delay
.
poll
(
)
)
;
let
now
=
self
.
delay
.
deadline
(
)
;
self
.
delay
.
reset
(
now
+
self
.
duration
)
;
Ok
(
Some
(
now
)
.
into
(
)
)
}
}
