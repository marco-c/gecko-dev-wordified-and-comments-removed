pub
fn
redact_url
(
url
:
&
str
)
-
>
String
{
if
url
.
is_empty
(
)
{
return
"
<
URL
(
empty
)
>
"
.
to_string
(
)
;
}
match
url
.
find
(
'
:
'
)
{
None
=
>
"
<
URL
(
no
scheme
)
>
"
.
to_string
(
)
Some
(
n
)
=
>
{
let
mut
chars
=
url
[
0
.
.
n
]
.
chars
(
)
;
match
chars
.
next
(
)
{
None
=
>
return
"
<
URL
(
empty
scheme
)
>
"
.
to_string
(
)
Some
(
c
)
=
>
{
if
!
c
.
is_ascii_alphabetic
(
)
{
return
"
<
URL
(
invalid
scheme
)
>
"
.
to_string
(
)
;
}
}
}
for
c
in
chars
{
if
!
(
c
.
is_ascii_alphanumeric
(
)
|
|
c
=
=
'
+
'
|
|
c
=
=
'
-
'
|
|
c
=
=
'
.
'
)
{
return
"
<
URL
(
invalid
scheme
)
>
"
.
to_string
(
)
;
}
}
"
<
URL
>
"
.
to_string
(
)
}
}
}
pub
fn
redact_compact_jwe
(
url
:
&
str
)
-
>
String
{
url
.
replace
(
|
ch
|
ch
!
=
'
.
'
"
x
"
)
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
#
[
test
]
fn
test_redact_url
(
)
{
assert_eq
!
(
redact_url
(
"
http
:
/
/
some
.
website
.
com
/
index
.
html
"
)
"
<
URL
>
"
)
;
assert_eq
!
(
redact_url
(
"
about
:
config
"
)
"
<
URL
>
"
)
;
assert_eq
!
(
redact_url
(
"
"
)
"
<
URL
(
empty
)
>
"
)
;
assert_eq
!
(
redact_url
(
"
:
/
/
some
.
website
.
com
/
"
)
"
<
URL
(
empty
scheme
)
>
"
)
;
assert_eq
!
(
redact_url
(
"
some
.
website
.
com
/
"
)
"
<
URL
(
no
scheme
)
>
"
)
;
assert_eq
!
(
redact_url
(
"
some
.
website
.
com
/
"
)
"
<
URL
(
no
scheme
)
>
"
)
;
assert_eq
!
(
redact_url
(
"
abc
%
=
:
/
/
some
.
website
.
com
/
"
)
"
<
URL
(
invalid
scheme
)
>
"
)
;
assert_eq
!
(
redact_url
(
"
0https
:
/
/
some
.
website
.
com
/
"
)
"
<
URL
(
invalid
scheme
)
>
"
)
;
assert_eq
!
(
redact_url
(
"
a
+
weird
-
but
.
lega1
-
SCHEME
:
/
/
some
.
website
.
com
/
"
)
"
<
URL
>
"
)
;
}
#
[
test
]
fn
test_redact_compact_jwe
(
)
{
assert_eq
!
(
redact_compact_jwe
(
"
abc
.
1234
.
x3243
"
)
"
xxx
.
xxxx
.
xxxxx
"
)
}
}
