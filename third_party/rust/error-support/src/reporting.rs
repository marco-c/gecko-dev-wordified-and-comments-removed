use
parking_lot
:
:
RwLock
;
pub
trait
ApplicationErrorReporter
:
Sync
+
Send
{
fn
report_error
(
&
self
type_name
:
String
message
:
String
)
;
fn
report_breadcrumb
(
&
self
message
:
String
module
:
String
line
:
u32
column
:
u32
)
;
}
struct
DefaultApplicationErrorReporter
;
impl
ApplicationErrorReporter
for
DefaultApplicationErrorReporter
{
fn
report_error
(
&
self
_type_name
:
String
_message
:
String
)
{
}
fn
report_breadcrumb
(
&
self
_message
:
String
_module
:
String
_line
:
u32
_column
:
u32
)
{
}
}
lazy_static
:
:
lazy_static
!
{
/
/
RwLock
rather
than
a
Mutex
since
we
only
expect
to
set
this
once
.
pub
(
crate
)
static
ref
APPLICATION_ERROR_REPORTER
:
RwLock
<
Box
<
dyn
ApplicationErrorReporter
>
>
=
RwLock
:
:
new
(
Box
:
:
new
(
DefaultApplicationErrorReporter
)
)
;
}
pub
fn
set_application_error_reporter
(
reporter
:
Box
<
dyn
ApplicationErrorReporter
>
)
{
*
APPLICATION_ERROR_REPORTER
.
write
(
)
=
reporter
;
}
pub
fn
report_error
(
type_name
:
String
message
:
String
)
{
APPLICATION_ERROR_REPORTER
.
read
(
)
.
report_error
(
type_name
message
)
;
}
pub
fn
report_breadcrumb
(
message
:
String
module
:
String
line
:
u32
column
:
u32
)
{
APPLICATION_ERROR_REPORTER
.
read
(
)
.
report_breadcrumb
(
message
module
line
column
)
;
}
