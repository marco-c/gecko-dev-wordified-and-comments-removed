use
unic_langid
:
:
LanguageIdentifier
;
#
[
cfg
(
not
(
feature
=
"
cldr
"
)
)
]
mod
likely_subtags
;
#
[
cfg
(
not
(
feature
=
"
cldr
"
)
)
]
use
likely_subtags
:
:
MockLikelySubtags
;
#
[
derive
(
PartialEq
Debug
Clone
Copy
)
]
pub
enum
NegotiationStrategy
{
Filtering
Matching
Lookup
}
pub
fn
filter_matches
<
'
a
R
:
'
a
+
AsRef
<
LanguageIdentifier
>
A
:
'
a
+
AsRef
<
LanguageIdentifier
>
>
(
requested
:
&
[
R
]
available
:
&
'
a
[
A
]
strategy
:
NegotiationStrategy
)
-
>
Vec
<
&
'
a
A
>
{
let
mut
supported_locales
=
vec
!
[
]
;
let
mut
available_locales
:
Vec
<
&
A
>
=
available
.
iter
(
)
.
collect
(
)
;
for
req
in
requested
{
let
mut
req
=
req
.
as_ref
(
)
.
to_owned
(
)
;
macro_rules
!
test_strategy
{
(
self_as_range
:
expr
other_as_range
:
expr
)
=
>
{
{
let
mut
match_found
=
false
;
available_locales
.
retain
(
|
locale
|
{
if
strategy
!
=
NegotiationStrategy
:
:
Filtering
&
&
match_found
{
return
true
;
}
if
locale
.
as_ref
(
)
.
matches
(
&
req
self_as_range
other_as_range
)
{
match_found
=
true
;
supported_locales
.
push
(
*
locale
)
;
return
false
;
}
true
}
)
;
if
match_found
{
match
strategy
{
NegotiationStrategy
:
:
Filtering
=
>
{
}
NegotiationStrategy
:
:
Matching
=
>
continue
NegotiationStrategy
:
:
Lookup
=
>
break
}
}
}
}
;
}
test_strategy
!
(
false
false
)
;
test_strategy
!
(
true
false
)
;
if
req
.
language
(
)
=
=
"
und
"
{
continue
;
}
if
req
.
maximize
(
)
{
test_strategy
!
(
true
false
)
;
}
req
.
clear_variants
(
)
;
test_strategy
!
(
true
true
)
;
req
.
clear_region
(
)
;
if
req
.
maximize
(
)
{
test_strategy
!
(
true
false
)
;
}
req
.
clear_region
(
)
;
test_strategy
!
(
true
true
)
;
}
supported_locales
}
pub
fn
negotiate_languages
<
'
a
R
:
'
a
+
AsRef
<
LanguageIdentifier
>
A
:
'
a
+
AsRef
<
LanguageIdentifier
>
+
PartialEq
>
(
requested
:
&
[
R
]
available
:
&
'
a
[
A
]
default
:
Option
<
&
'
a
A
>
strategy
:
NegotiationStrategy
)
-
>
Vec
<
&
'
a
A
>
{
let
mut
supported
=
filter_matches
(
requested
available
strategy
)
;
if
let
Some
(
default
)
=
default
{
if
strategy
=
=
NegotiationStrategy
:
:
Lookup
{
if
supported
.
is_empty
(
)
{
supported
.
push
(
default
)
;
}
}
else
if
!
supported
.
contains
(
&
default
)
{
supported
.
push
(
default
)
;
}
}
supported
}
