use
crate
:
:
mutex
:
:
MutexGuard
;
use
crate
:
:
raw_mutex
:
:
{
RawMutex
TOKEN_HANDOFF
TOKEN_NORMAL
}
;
use
crate
:
:
{
deadlock
util
}
;
use
core
:
:
{
fmt
ptr
sync
:
:
atomic
:
:
{
AtomicPtr
Ordering
}
}
;
use
lock_api
:
:
RawMutex
as
RawMutexTrait
;
use
parking_lot_core
:
:
{
self
ParkResult
RequeueOp
UnparkResult
DEFAULT_PARK_TOKEN
}
;
use
std
:
:
time
:
:
{
Duration
Instant
}
;
#
[
derive
(
Debug
PartialEq
Eq
Copy
Clone
)
]
pub
struct
WaitTimeoutResult
(
bool
)
;
impl
WaitTimeoutResult
{
#
[
inline
]
pub
fn
timed_out
(
&
self
)
-
>
bool
{
self
.
0
}
}
pub
struct
Condvar
{
state
:
AtomicPtr
<
RawMutex
>
}
impl
Condvar
{
#
[
inline
]
pub
const
fn
new
(
)
-
>
Condvar
{
Condvar
{
state
:
AtomicPtr
:
:
new
(
ptr
:
:
null_mut
(
)
)
}
}
#
[
inline
]
pub
fn
notify_one
(
&
self
)
-
>
bool
{
let
state
=
self
.
state
.
load
(
Ordering
:
:
Relaxed
)
;
if
state
.
is_null
(
)
{
return
false
;
}
self
.
notify_one_slow
(
state
)
}
#
[
cold
]
fn
notify_one_slow
(
&
self
mutex
:
*
mut
RawMutex
)
-
>
bool
{
unsafe
{
let
from
=
self
as
*
const
_
as
usize
;
let
to
=
mutex
as
usize
;
let
validate
=
|
|
{
if
self
.
state
.
load
(
Ordering
:
:
Relaxed
)
!
=
mutex
{
return
RequeueOp
:
:
Abort
;
}
if
(
*
mutex
)
.
mark_parked_if_locked
(
)
{
RequeueOp
:
:
RequeueOne
}
else
{
RequeueOp
:
:
UnparkOne
}
}
;
let
callback
=
|
_op
result
:
UnparkResult
|
{
if
!
result
.
have_more_threads
{
self
.
state
.
store
(
ptr
:
:
null_mut
(
)
Ordering
:
:
Relaxed
)
;
}
TOKEN_NORMAL
}
;
let
res
=
parking_lot_core
:
:
unpark_requeue
(
from
to
validate
callback
)
;
res
.
unparked_threads
+
res
.
requeued_threads
!
=
0
}
}
#
[
inline
]
pub
fn
notify_all
(
&
self
)
-
>
usize
{
let
state
=
self
.
state
.
load
(
Ordering
:
:
Relaxed
)
;
if
state
.
is_null
(
)
{
return
0
;
}
self
.
notify_all_slow
(
state
)
}
#
[
cold
]
fn
notify_all_slow
(
&
self
mutex
:
*
mut
RawMutex
)
-
>
usize
{
unsafe
{
let
from
=
self
as
*
const
_
as
usize
;
let
to
=
mutex
as
usize
;
let
validate
=
|
|
{
if
self
.
state
.
load
(
Ordering
:
:
Relaxed
)
!
=
mutex
{
return
RequeueOp
:
:
Abort
;
}
self
.
state
.
store
(
ptr
:
:
null_mut
(
)
Ordering
:
:
Relaxed
)
;
if
(
*
mutex
)
.
mark_parked_if_locked
(
)
{
RequeueOp
:
:
RequeueAll
}
else
{
RequeueOp
:
:
UnparkOneRequeueRest
}
}
;
let
callback
=
|
op
result
:
UnparkResult
|
{
if
op
=
=
RequeueOp
:
:
UnparkOneRequeueRest
&
&
result
.
requeued_threads
!
=
0
{
(
*
mutex
)
.
mark_parked
(
)
;
}
TOKEN_NORMAL
}
;
let
res
=
parking_lot_core
:
:
unpark_requeue
(
from
to
validate
callback
)
;
res
.
unparked_threads
+
res
.
requeued_threads
}
}
#
[
inline
]
pub
fn
wait
<
T
:
?
Sized
>
(
&
self
mutex_guard
:
&
mut
MutexGuard
<
'
_
T
>
)
{
self
.
wait_until_internal
(
unsafe
{
MutexGuard
:
:
mutex
(
mutex_guard
)
.
raw
(
)
}
None
)
;
}
#
[
inline
]
pub
fn
wait_until
<
T
:
?
Sized
>
(
&
self
mutex_guard
:
&
mut
MutexGuard
<
'
_
T
>
timeout
:
Instant
)
-
>
WaitTimeoutResult
{
self
.
wait_until_internal
(
unsafe
{
MutexGuard
:
:
mutex
(
mutex_guard
)
.
raw
(
)
}
Some
(
timeout
)
)
}
fn
wait_until_internal
(
&
self
mutex
:
&
RawMutex
timeout
:
Option
<
Instant
>
)
-
>
WaitTimeoutResult
{
unsafe
{
let
result
;
let
mut
bad_mutex
=
false
;
let
mut
requeued
=
false
;
{
let
addr
=
self
as
*
const
_
as
usize
;
let
lock_addr
=
mutex
as
*
const
_
as
*
mut
_
;
let
validate
=
|
|
{
let
state
=
self
.
state
.
load
(
Ordering
:
:
Relaxed
)
;
if
state
.
is_null
(
)
{
self
.
state
.
store
(
lock_addr
Ordering
:
:
Relaxed
)
;
}
else
if
state
!
=
lock_addr
{
bad_mutex
=
true
;
return
false
;
}
true
}
;
let
before_sleep
=
|
|
{
mutex
.
unlock
(
)
;
}
;
let
timed_out
=
|
k
was_last_thread
|
{
requeued
=
k
!
=
addr
;
if
!
requeued
&
&
was_last_thread
{
self
.
state
.
store
(
ptr
:
:
null_mut
(
)
Ordering
:
:
Relaxed
)
;
}
}
;
result
=
parking_lot_core
:
:
park
(
addr
validate
before_sleep
timed_out
DEFAULT_PARK_TOKEN
timeout
)
;
}
if
bad_mutex
{
panic
!
(
"
attempted
to
use
a
condition
variable
with
more
than
one
mutex
"
)
;
}
if
result
=
=
ParkResult
:
:
Unparked
(
TOKEN_HANDOFF
)
{
deadlock
:
:
acquire_resource
(
mutex
as
*
const
_
as
usize
)
;
}
else
{
mutex
.
lock
(
)
;
}
WaitTimeoutResult
(
!
(
result
.
is_unparked
(
)
|
|
requeued
)
)
}
}
#
[
inline
]
pub
fn
wait_for
<
T
:
?
Sized
>
(
&
self
mutex_guard
:
&
mut
MutexGuard
<
'
_
T
>
timeout
:
Duration
)
-
>
WaitTimeoutResult
{
let
deadline
=
util
:
:
to_deadline
(
timeout
)
;
self
.
wait_until_internal
(
unsafe
{
MutexGuard
:
:
mutex
(
mutex_guard
)
.
raw
(
)
}
deadline
)
}
}
impl
Default
for
Condvar
{
#
[
inline
]
fn
default
(
)
-
>
Condvar
{
Condvar
:
:
new
(
)
}
}
impl
fmt
:
:
Debug
for
Condvar
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
pad
(
"
Condvar
{
.
.
}
"
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
crate
:
:
{
Condvar
Mutex
MutexGuard
}
;
use
std
:
:
sync
:
:
mpsc
:
:
channel
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
thread
;
use
std
:
:
time
:
:
{
Duration
Instant
}
;
#
[
test
]
fn
smoke
(
)
{
let
c
=
Condvar
:
:
new
(
)
;
c
.
notify_one
(
)
;
c
.
notify_all
(
)
;
}
#
[
test
]
fn
notify_one
(
)
{
let
m
=
Arc
:
:
new
(
Mutex
:
:
new
(
(
)
)
)
;
let
m2
=
m
.
clone
(
)
;
let
c
=
Arc
:
:
new
(
Condvar
:
:
new
(
)
)
;
let
c2
=
c
.
clone
(
)
;
let
mut
g
=
m
.
lock
(
)
;
let
_t
=
thread
:
:
spawn
(
move
|
|
{
let
_g
=
m2
.
lock
(
)
;
c2
.
notify_one
(
)
;
}
)
;
c
.
wait
(
&
mut
g
)
;
}
#
[
test
]
fn
notify_all
(
)
{
const
N
:
usize
=
10
;
let
data
=
Arc
:
:
new
(
(
Mutex
:
:
new
(
0
)
Condvar
:
:
new
(
)
)
)
;
let
(
tx
rx
)
=
channel
(
)
;
for
_
in
0
.
.
N
{
let
data
=
data
.
clone
(
)
;
let
tx
=
tx
.
clone
(
)
;
thread
:
:
spawn
(
move
|
|
{
let
&
(
ref
lock
ref
cond
)
=
&
*
data
;
let
mut
cnt
=
lock
.
lock
(
)
;
*
cnt
+
=
1
;
if
*
cnt
=
=
N
{
tx
.
send
(
(
)
)
.
unwrap
(
)
;
}
while
*
cnt
!
=
0
{
cond
.
wait
(
&
mut
cnt
)
;
}
tx
.
send
(
(
)
)
.
unwrap
(
)
;
}
)
;
}
drop
(
tx
)
;
let
&
(
ref
lock
ref
cond
)
=
&
*
data
;
rx
.
recv
(
)
.
unwrap
(
)
;
let
mut
cnt
=
lock
.
lock
(
)
;
*
cnt
=
0
;
cond
.
notify_all
(
)
;
drop
(
cnt
)
;
for
_
in
0
.
.
N
{
rx
.
recv
(
)
.
unwrap
(
)
;
}
}
#
[
test
]
fn
notify_one_return_true
(
)
{
let
m
=
Arc
:
:
new
(
Mutex
:
:
new
(
(
)
)
)
;
let
m2
=
m
.
clone
(
)
;
let
c
=
Arc
:
:
new
(
Condvar
:
:
new
(
)
)
;
let
c2
=
c
.
clone
(
)
;
let
mut
g
=
m
.
lock
(
)
;
let
_t
=
thread
:
:
spawn
(
move
|
|
{
let
_g
=
m2
.
lock
(
)
;
assert
!
(
c2
.
notify_one
(
)
)
;
}
)
;
c
.
wait
(
&
mut
g
)
;
}
#
[
test
]
fn
notify_one_return_false
(
)
{
let
m
=
Arc
:
:
new
(
Mutex
:
:
new
(
(
)
)
)
;
let
c
=
Arc
:
:
new
(
Condvar
:
:
new
(
)
)
;
let
_t
=
thread
:
:
spawn
(
move
|
|
{
let
_g
=
m
.
lock
(
)
;
assert
!
(
!
c
.
notify_one
(
)
)
;
}
)
;
}
#
[
test
]
fn
notify_all_return
(
)
{
const
N
:
usize
=
10
;
let
data
=
Arc
:
:
new
(
(
Mutex
:
:
new
(
0
)
Condvar
:
:
new
(
)
)
)
;
let
(
tx
rx
)
=
channel
(
)
;
for
_
in
0
.
.
N
{
let
data
=
data
.
clone
(
)
;
let
tx
=
tx
.
clone
(
)
;
thread
:
:
spawn
(
move
|
|
{
let
&
(
ref
lock
ref
cond
)
=
&
*
data
;
let
mut
cnt
=
lock
.
lock
(
)
;
*
cnt
+
=
1
;
if
*
cnt
=
=
N
{
tx
.
send
(
(
)
)
.
unwrap
(
)
;
}
while
*
cnt
!
=
0
{
cond
.
wait
(
&
mut
cnt
)
;
}
tx
.
send
(
(
)
)
.
unwrap
(
)
;
}
)
;
}
drop
(
tx
)
;
let
&
(
ref
lock
ref
cond
)
=
&
*
data
;
rx
.
recv
(
)
.
unwrap
(
)
;
let
mut
cnt
=
lock
.
lock
(
)
;
*
cnt
=
0
;
assert_eq
!
(
cond
.
notify_all
(
)
N
)
;
drop
(
cnt
)
;
for
_
in
0
.
.
N
{
rx
.
recv
(
)
.
unwrap
(
)
;
}
assert_eq
!
(
cond
.
notify_all
(
)
0
)
;
}
#
[
test
]
fn
wait_for
(
)
{
let
m
=
Arc
:
:
new
(
Mutex
:
:
new
(
(
)
)
)
;
let
m2
=
m
.
clone
(
)
;
let
c
=
Arc
:
:
new
(
Condvar
:
:
new
(
)
)
;
let
c2
=
c
.
clone
(
)
;
let
mut
g
=
m
.
lock
(
)
;
let
no_timeout
=
c
.
wait_for
(
&
mut
g
Duration
:
:
from_millis
(
1
)
)
;
assert
!
(
no_timeout
.
timed_out
(
)
)
;
let
_t
=
thread
:
:
spawn
(
move
|
|
{
let
_g
=
m2
.
lock
(
)
;
c2
.
notify_one
(
)
;
}
)
;
let
very_long_timeout
=
if
cfg
!
(
feature
=
"
nightly
"
)
{
Duration
:
:
from_secs
(
u64
:
:
max_value
(
)
)
}
else
{
Duration
:
:
from_millis
(
u32
:
:
max_value
(
)
as
u64
)
}
;
let
timeout_res
=
c
.
wait_for
(
&
mut
g
very_long_timeout
)
;
assert
!
(
!
timeout_res
.
timed_out
(
)
)
;
drop
(
g
)
;
}
#
[
test
]
fn
wait_until
(
)
{
let
m
=
Arc
:
:
new
(
Mutex
:
:
new
(
(
)
)
)
;
let
m2
=
m
.
clone
(
)
;
let
c
=
Arc
:
:
new
(
Condvar
:
:
new
(
)
)
;
let
c2
=
c
.
clone
(
)
;
let
mut
g
=
m
.
lock
(
)
;
let
no_timeout
=
c
.
wait_until
(
&
mut
g
Instant
:
:
now
(
)
+
Duration
:
:
from_millis
(
1
)
)
;
assert
!
(
no_timeout
.
timed_out
(
)
)
;
let
_t
=
thread
:
:
spawn
(
move
|
|
{
let
_g
=
m2
.
lock
(
)
;
c2
.
notify_one
(
)
;
}
)
;
let
timeout_res
=
c
.
wait_until
(
&
mut
g
Instant
:
:
now
(
)
+
Duration
:
:
from_millis
(
u32
:
:
max_value
(
)
as
u64
)
)
;
assert
!
(
!
timeout_res
.
timed_out
(
)
)
;
drop
(
g
)
;
}
#
[
test
]
#
[
should_panic
]
fn
two_mutexes
(
)
{
let
m
=
Arc
:
:
new
(
Mutex
:
:
new
(
(
)
)
)
;
let
m2
=
m
.
clone
(
)
;
let
m3
=
Arc
:
:
new
(
Mutex
:
:
new
(
(
)
)
)
;
let
c
=
Arc
:
:
new
(
Condvar
:
:
new
(
)
)
;
let
c2
=
c
.
clone
(
)
;
struct
PanicGuard
<
'
a
>
(
&
'
a
Condvar
)
;
impl
<
'
a
>
Drop
for
PanicGuard
<
'
a
>
{
fn
drop
(
&
mut
self
)
{
self
.
0
.
notify_one
(
)
;
}
}
let
(
tx
rx
)
=
channel
(
)
;
let
g
=
m
.
lock
(
)
;
let
_t
=
thread
:
:
spawn
(
move
|
|
{
let
mut
g
=
m2
.
lock
(
)
;
tx
.
send
(
(
)
)
.
unwrap
(
)
;
c2
.
wait
(
&
mut
g
)
;
}
)
;
drop
(
g
)
;
rx
.
recv
(
)
.
unwrap
(
)
;
let
_g
=
m
.
lock
(
)
;
let
_guard
=
PanicGuard
(
&
*
c
)
;
let
_
=
c
.
wait
(
&
mut
m3
.
lock
(
)
)
;
}
#
[
test
]
fn
two_mutexes_disjoint
(
)
{
let
m
=
Arc
:
:
new
(
Mutex
:
:
new
(
(
)
)
)
;
let
m2
=
m
.
clone
(
)
;
let
m3
=
Arc
:
:
new
(
Mutex
:
:
new
(
(
)
)
)
;
let
c
=
Arc
:
:
new
(
Condvar
:
:
new
(
)
)
;
let
c2
=
c
.
clone
(
)
;
let
mut
g
=
m
.
lock
(
)
;
let
_t
=
thread
:
:
spawn
(
move
|
|
{
let
_g
=
m2
.
lock
(
)
;
c2
.
notify_one
(
)
;
}
)
;
c
.
wait
(
&
mut
g
)
;
drop
(
g
)
;
let
_
=
c
.
wait_for
(
&
mut
m3
.
lock
(
)
Duration
:
:
from_millis
(
1
)
)
;
}
#
[
test
]
fn
test_debug_condvar
(
)
{
let
c
=
Condvar
:
:
new
(
)
;
assert_eq
!
(
format
!
(
"
{
:
?
}
"
c
)
"
Condvar
{
.
.
}
"
)
;
}
#
[
test
]
fn
test_condvar_requeue
(
)
{
let
m
=
Arc
:
:
new
(
Mutex
:
:
new
(
(
)
)
)
;
let
m2
=
m
.
clone
(
)
;
let
c
=
Arc
:
:
new
(
Condvar
:
:
new
(
)
)
;
let
c2
=
c
.
clone
(
)
;
let
t
=
thread
:
:
spawn
(
move
|
|
{
let
mut
g
=
m2
.
lock
(
)
;
c2
.
wait
(
&
mut
g
)
;
}
)
;
let
mut
g
=
m
.
lock
(
)
;
while
!
c
.
notify_one
(
)
{
MutexGuard
:
:
bump
(
&
mut
g
)
;
}
drop
(
g
)
;
t
.
join
(
)
.
unwrap
(
)
;
}
#
[
test
]
fn
test_issue_129
(
)
{
let
locks
=
Arc
:
:
new
(
(
Mutex
:
:
new
(
(
)
)
Condvar
:
:
new
(
)
)
)
;
let
(
tx
rx
)
=
channel
(
)
;
for
_
in
0
.
.
4
{
let
locks
=
locks
.
clone
(
)
;
let
tx
=
tx
.
clone
(
)
;
thread
:
:
spawn
(
move
|
|
{
let
mut
guard
=
locks
.
0
.
lock
(
)
;
locks
.
1
.
wait
(
&
mut
guard
)
;
locks
.
1
.
wait_for
(
&
mut
guard
Duration
:
:
from_millis
(
1
)
)
;
locks
.
1
.
notify_one
(
)
;
tx
.
send
(
(
)
)
.
unwrap
(
)
;
}
)
;
}
thread
:
:
sleep
(
Duration
:
:
from_millis
(
100
)
)
;
locks
.
1
.
notify_one
(
)
;
for
_
in
0
.
.
4
{
assert_eq
!
(
rx
.
recv_timeout
(
Duration
:
:
from_millis
(
500
)
)
Ok
(
(
)
)
)
;
}
}
}
