#
[
cfg
(
feature
=
"
nightly
"
)
]
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicU8
ATOMIC_U8_INIT
Ordering
fence
}
;
#
[
cfg
(
feature
=
"
nightly
"
)
]
type
U8
=
u8
;
#
[
cfg
(
not
(
feature
=
"
nightly
"
)
)
]
use
stable
:
:
{
AtomicU8
ATOMIC_U8_INIT
Ordering
fence
}
;
#
[
cfg
(
not
(
feature
=
"
nightly
"
)
)
]
type
U8
=
usize
;
use
std
:
:
mem
;
use
parking_lot_core
:
:
{
self
SpinWait
DEFAULT_PARK_TOKEN
DEFAULT_UNPARK_TOKEN
}
;
use
util
:
:
UncheckedOptionExt
;
const
DONE_BIT
:
U8
=
1
;
const
POISON_BIT
:
U8
=
2
;
const
LOCKED_BIT
:
U8
=
4
;
const
PARKED_BIT
:
U8
=
8
;
pub
struct
OnceState
(
bool
)
;
impl
OnceState
{
#
[
inline
]
pub
fn
poisoned
(
&
self
)
-
>
bool
{
self
.
0
}
}
pub
struct
Once
(
AtomicU8
)
;
pub
const
ONCE_INIT
:
Once
=
Once
(
ATOMIC_U8_INIT
)
;
impl
Once
{
#
[
cfg
(
feature
=
"
nightly
"
)
]
#
[
inline
]
pub
const
fn
new
(
)
-
>
Once
{
Once
(
AtomicU8
:
:
new
(
0
)
)
}
#
[
cfg
(
not
(
feature
=
"
nightly
"
)
)
]
#
[
inline
]
pub
fn
new
(
)
-
>
Once
{
Once
(
AtomicU8
:
:
new
(
0
)
)
}
#
[
inline
]
pub
fn
call_once
<
F
>
(
&
self
f
:
F
)
where
F
:
FnOnce
(
)
{
if
self
.
0
.
load
(
Ordering
:
:
Acquire
)
=
=
DONE_BIT
{
return
;
}
let
mut
f
=
Some
(
f
)
;
self
.
call_once_slow
(
false
&
mut
|
_
|
unsafe
{
f
.
take
(
)
.
unchecked_unwrap
(
)
(
)
}
)
;
}
#
[
inline
]
pub
fn
call_once_force
<
F
>
(
&
self
f
:
F
)
where
F
:
FnOnce
(
OnceState
)
{
if
self
.
0
.
load
(
Ordering
:
:
Acquire
)
=
=
DONE_BIT
{
return
;
}
let
mut
f
=
Some
(
f
)
;
self
.
call_once_slow
(
true
&
mut
|
state
|
unsafe
{
f
.
take
(
)
.
unchecked_unwrap
(
)
(
state
)
}
)
;
}
#
[
cold
]
#
[
inline
(
never
)
]
fn
call_once_slow
(
&
self
ignore_poison
:
bool
f
:
&
mut
FnMut
(
OnceState
)
)
{
let
mut
spinwait
=
SpinWait
:
:
new
(
)
;
let
mut
state
=
self
.
0
.
load
(
Ordering
:
:
Relaxed
)
;
loop
{
if
state
&
DONE_BIT
!
=
0
{
fence
(
Ordering
:
:
Acquire
)
;
return
;
}
if
state
&
POISON_BIT
!
=
0
&
&
!
ignore_poison
{
fence
(
Ordering
:
:
Acquire
)
;
panic
!
(
"
Once
instance
has
previously
been
poisoned
"
)
;
}
if
state
&
LOCKED_BIT
=
=
0
{
match
self
.
0
.
compare_exchange_weak
(
state
(
state
|
LOCKED_BIT
)
&
!
POISON_BIT
Ordering
:
:
Acquire
Ordering
:
:
Relaxed
)
{
Ok
(
_
)
=
>
break
Err
(
x
)
=
>
state
=
x
}
continue
;
}
if
state
&
PARKED_BIT
=
=
0
&
&
spinwait
.
spin
(
)
{
state
=
self
.
0
.
load
(
Ordering
:
:
Relaxed
)
;
continue
;
}
if
state
&
PARKED_BIT
=
=
0
{
if
let
Err
(
x
)
=
self
.
0
.
compare_exchange_weak
(
state
state
|
PARKED_BIT
Ordering
:
:
Relaxed
Ordering
:
:
Relaxed
)
{
state
=
x
;
continue
;
}
}
unsafe
{
let
addr
=
self
as
*
const
_
as
usize
;
let
validate
=
|
|
self
.
0
.
load
(
Ordering
:
:
Relaxed
)
=
=
LOCKED_BIT
|
PARKED_BIT
;
let
before_sleep
=
|
|
{
}
;
let
timed_out
=
|
_
_
|
unreachable
!
(
)
;
parking_lot_core
:
:
park
(
addr
validate
before_sleep
timed_out
DEFAULT_PARK_TOKEN
None
)
;
}
spinwait
.
reset
(
)
;
state
=
self
.
0
.
load
(
Ordering
:
:
Relaxed
)
;
}
struct
PanicGuard
<
'
a
>
(
&
'
a
Once
)
;
impl
<
'
a
>
Drop
for
PanicGuard
<
'
a
>
{
fn
drop
(
&
mut
self
)
{
let
once
=
self
.
0
;
let
state
=
once
.
0
.
swap
(
POISON_BIT
Ordering
:
:
Release
)
;
if
state
&
PARKED_BIT
!
=
0
{
unsafe
{
let
addr
=
once
as
*
const
_
as
usize
;
parking_lot_core
:
:
unpark_all
(
addr
DEFAULT_UNPARK_TOKEN
)
;
}
}
}
}
let
guard
=
PanicGuard
(
self
)
;
f
(
OnceState
(
state
&
POISON_BIT
!
=
0
)
)
;
mem
:
:
forget
(
guard
)
;
let
state
=
self
.
0
.
swap
(
DONE_BIT
Ordering
:
:
Release
)
;
if
state
&
PARKED_BIT
!
=
0
{
unsafe
{
let
addr
=
self
as
*
const
_
as
usize
;
parking_lot_core
:
:
unpark_all
(
addr
DEFAULT_UNPARK_TOKEN
)
;
}
}
}
}
impl
Default
for
Once
{
#
[
inline
]
fn
default
(
)
-
>
Once
{
Once
:
:
new
(
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
#
[
cfg
(
feature
=
"
nightly
"
)
]
use
std
:
:
panic
;
use
std
:
:
sync
:
:
mpsc
:
:
channel
;
use
std
:
:
thread
;
use
{
Once
ONCE_INIT
}
;
#
[
test
]
fn
smoke_once
(
)
{
static
O
:
Once
=
ONCE_INIT
;
let
mut
a
=
0
;
O
.
call_once
(
|
|
a
+
=
1
)
;
assert_eq
!
(
a
1
)
;
O
.
call_once
(
|
|
a
+
=
1
)
;
assert_eq
!
(
a
1
)
;
}
#
[
test
]
fn
stampede_once
(
)
{
static
O
:
Once
=
ONCE_INIT
;
static
mut
RUN
:
bool
=
false
;
let
(
tx
rx
)
=
channel
(
)
;
for
_
in
0
.
.
10
{
let
tx
=
tx
.
clone
(
)
;
thread
:
:
spawn
(
move
|
|
{
for
_
in
0
.
.
4
{
thread
:
:
yield_now
(
)
}
unsafe
{
O
.
call_once
(
|
|
{
assert
!
(
!
RUN
)
;
RUN
=
true
;
}
)
;
assert
!
(
RUN
)
;
}
tx
.
send
(
(
)
)
.
unwrap
(
)
;
}
)
;
}
unsafe
{
O
.
call_once
(
|
|
{
assert
!
(
!
RUN
)
;
RUN
=
true
;
}
)
;
assert
!
(
RUN
)
;
}
for
_
in
0
.
.
10
{
rx
.
recv
(
)
.
unwrap
(
)
;
}
}
#
[
cfg
(
feature
=
"
nightly
"
)
]
#
[
test
]
fn
poison_bad
(
)
{
static
O
:
Once
=
ONCE_INIT
;
let
t
=
panic
:
:
catch_unwind
(
|
|
{
O
.
call_once
(
|
|
panic
!
(
)
)
;
}
)
;
assert
!
(
t
.
is_err
(
)
)
;
let
t
=
panic
:
:
catch_unwind
(
|
|
{
O
.
call_once
(
|
|
{
}
)
;
}
)
;
assert
!
(
t
.
is_err
(
)
)
;
let
mut
called
=
false
;
O
.
call_once_force
(
|
p
|
{
called
=
true
;
assert
!
(
p
.
poisoned
(
)
)
}
)
;
assert
!
(
called
)
;
O
.
call_once
(
|
|
{
}
)
;
}
#
[
cfg
(
feature
=
"
nightly
"
)
]
#
[
test
]
fn
wait_for_force_to_finish
(
)
{
static
O
:
Once
=
ONCE_INIT
;
let
t
=
panic
:
:
catch_unwind
(
|
|
{
O
.
call_once
(
|
|
panic
!
(
)
)
;
}
)
;
assert
!
(
t
.
is_err
(
)
)
;
let
(
tx1
rx1
)
=
channel
(
)
;
let
(
tx2
rx2
)
=
channel
(
)
;
let
t1
=
thread
:
:
spawn
(
move
|
|
{
O
.
call_once_force
(
|
p
|
{
assert
!
(
p
.
poisoned
(
)
)
;
tx1
.
send
(
(
)
)
.
unwrap
(
)
;
rx2
.
recv
(
)
.
unwrap
(
)
;
}
)
;
}
)
;
rx1
.
recv
(
)
.
unwrap
(
)
;
let
t2
=
thread
:
:
spawn
(
|
|
{
let
mut
called
=
false
;
O
.
call_once
(
|
|
{
called
=
true
;
}
)
;
assert
!
(
!
called
)
;
}
)
;
tx2
.
send
(
(
)
)
.
unwrap
(
)
;
assert
!
(
t1
.
join
(
)
.
is_ok
(
)
)
;
assert
!
(
t2
.
join
(
)
.
is_ok
(
)
)
;
}
}
