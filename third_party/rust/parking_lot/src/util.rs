use
std
:
:
time
:
:
{
Duration
Instant
}
;
pub
trait
UncheckedOptionExt
<
T
>
{
unsafe
fn
unchecked_unwrap
(
self
)
-
>
T
;
}
impl
<
T
>
UncheckedOptionExt
<
T
>
for
Option
<
T
>
{
#
[
inline
]
unsafe
fn
unchecked_unwrap
(
self
)
-
>
T
{
match
self
{
Some
(
x
)
=
>
x
None
=
>
unreachable
(
)
}
}
}
#
[
inline
]
unsafe
fn
unreachable
(
)
-
>
!
{
if
cfg
!
(
debug_assertions
)
{
unreachable
!
(
)
;
}
else
{
core
:
:
hint
:
:
unreachable_unchecked
(
)
}
}
#
[
inline
]
pub
fn
to_deadline
(
timeout
:
Duration
)
-
>
Option
<
Instant
>
{
#
[
cfg
(
has_checked_instant
)
]
let
deadline
=
Instant
:
:
now
(
)
.
checked_add
(
timeout
)
;
#
[
cfg
(
not
(
has_checked_instant
)
)
]
let
deadline
=
Some
(
Instant
:
:
now
(
)
+
timeout
)
;
deadline
}
