#
!
[
warn
(
missing_docs
)
]
#
!
[
cfg_attr
(
feature
=
"
nightly
"
feature
(
const_fn
)
)
]
#
!
[
cfg_attr
(
feature
=
"
nightly
"
feature
(
integer_atomics
)
)
]
#
!
[
cfg_attr
(
feature
=
"
nightly
"
feature
(
asm
)
)
]
#
[
cfg
(
feature
=
"
owning_ref
"
)
]
extern
crate
owning_ref
;
extern
crate
parking_lot_core
;
mod
util
;
mod
elision
;
mod
raw_mutex
;
mod
raw_remutex
;
mod
raw_rwlock
;
mod
condvar
;
mod
mutex
;
mod
remutex
;
mod
rwlock
;
mod
once
;
#
[
cfg
(
feature
=
"
deadlock_detection
"
)
]
pub
mod
deadlock
;
#
[
cfg
(
not
(
feature
=
"
deadlock_detection
"
)
)
]
mod
deadlock
;
pub
use
once
:
:
{
Once
OnceState
ONCE_INIT
}
;
pub
use
mutex
:
:
{
Mutex
MutexGuard
}
;
pub
use
remutex
:
:
{
ReentrantMutex
ReentrantMutexGuard
}
;
pub
use
condvar
:
:
{
Condvar
WaitTimeoutResult
}
;
pub
use
rwlock
:
:
{
RwLock
RwLockReadGuard
RwLockUpgradableReadGuard
RwLockWriteGuard
}
;
#
[
cfg
(
feature
=
"
owning_ref
"
)
]
use
owning_ref
:
:
OwningRef
;
#
[
cfg
(
feature
=
"
owning_ref
"
)
]
pub
type
MutexGuardRef
<
'
a
T
U
=
T
>
=
OwningRef
<
MutexGuard
<
'
a
T
>
U
>
;
#
[
cfg
(
feature
=
"
owning_ref
"
)
]
pub
type
ReentrantMutexGuardRef
<
'
a
T
U
=
T
>
=
OwningRef
<
ReentrantMutexGuard
<
'
a
T
>
U
>
;
#
[
cfg
(
feature
=
"
owning_ref
"
)
]
pub
type
RwLockReadGuardRef
<
'
a
T
U
=
T
>
=
OwningRef
<
RwLockReadGuard
<
'
a
T
>
U
>
;
#
[
cfg
(
feature
=
"
owning_ref
"
)
]
pub
type
RwLockWriteGuardRef
<
'
a
T
U
=
T
>
=
OwningRef
<
RwLockWriteGuard
<
'
a
T
>
U
>
;
#
[
cfg
(
feature
=
"
owning_ref
"
)
]
pub
type
RwLockUpgradableReadGuardRef
<
'
a
T
U
=
T
>
=
OwningRef
<
RwLockUpgradableReadGuard
<
'
a
T
>
U
>
;
