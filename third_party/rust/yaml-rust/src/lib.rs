#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
yaml
-
rust
/
0
.
4
.
2
"
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
renamed_and_removed_lints
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
warn
(
cyclomatic_complexity
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
match_same_arms
should_implement_trait
)
)
]
extern
crate
linked_hash_map
;
pub
mod
emitter
;
pub
mod
parser
;
pub
mod
scanner
;
pub
mod
yaml
;
pub
use
emitter
:
:
{
EmitError
YamlEmitter
}
;
pub
use
parser
:
:
Event
;
pub
use
scanner
:
:
ScanError
;
pub
use
yaml
:
:
{
Yaml
YamlLoader
}
;
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
test_api
(
)
{
let
s
=
"
#
from
yaml
-
cpp
example
-
name
:
Ogre
position
:
[
0
5
0
]
powers
:
-
name
:
Club
damage
:
10
-
name
:
Fist
damage
:
8
-
name
:
Dragon
position
:
[
1
0
10
]
powers
:
-
name
:
Fire
Breath
damage
:
25
-
name
:
Claws
damage
:
15
-
name
:
Wizard
position
:
[
5
-
3
0
]
powers
:
-
name
:
Acid
Rain
damage
:
50
-
name
:
Staff
damage
:
3
"
;
let
docs
=
YamlLoader
:
:
load_from_str
(
s
)
.
unwrap
(
)
;
let
doc
=
&
docs
[
0
]
;
assert_eq
!
(
doc
[
0
]
[
"
name
"
]
.
as_str
(
)
.
unwrap
(
)
"
Ogre
"
)
;
let
mut
writer
=
String
:
:
new
(
)
;
{
let
mut
emitter
=
YamlEmitter
:
:
new
(
&
mut
writer
)
;
emitter
.
dump
(
doc
)
.
unwrap
(
)
;
}
assert
!
(
!
writer
.
is_empty
(
)
)
;
}
fn
try_fail
(
s
:
&
str
)
-
>
Result
<
Vec
<
Yaml
>
ScanError
>
{
let
t
=
try
!
(
YamlLoader
:
:
load_from_str
(
s
)
)
;
Ok
(
t
)
}
#
[
test
]
fn
test_fail
(
)
{
let
s
=
"
#
syntax
error
scalar
key
:
[
1
2
]
]
key1
:
a2
"
;
assert
!
(
YamlLoader
:
:
load_from_str
(
s
)
.
is_err
(
)
)
;
assert
!
(
try_fail
(
s
)
.
is_err
(
)
)
;
}
}
