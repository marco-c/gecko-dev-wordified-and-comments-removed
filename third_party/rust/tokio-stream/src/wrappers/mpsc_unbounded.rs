use
crate
:
:
Stream
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
use
tokio
:
:
sync
:
:
mpsc
:
:
UnboundedReceiver
;
#
[
derive
(
Debug
)
]
pub
struct
UnboundedReceiverStream
<
T
>
{
inner
:
UnboundedReceiver
<
T
>
}
impl
<
T
>
UnboundedReceiverStream
<
T
>
{
pub
fn
new
(
recv
:
UnboundedReceiver
<
T
>
)
-
>
Self
{
Self
{
inner
:
recv
}
}
pub
fn
into_inner
(
self
)
-
>
UnboundedReceiver
<
T
>
{
self
.
inner
}
pub
fn
close
(
&
mut
self
)
{
self
.
inner
.
close
(
)
}
}
impl
<
T
>
Stream
for
UnboundedReceiverStream
<
T
>
{
type
Item
=
T
;
fn
poll_next
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
>
{
self
.
inner
.
poll_recv
(
cx
)
}
}
impl
<
T
>
AsRef
<
UnboundedReceiver
<
T
>
>
for
UnboundedReceiverStream
<
T
>
{
fn
as_ref
(
&
self
)
-
>
&
UnboundedReceiver
<
T
>
{
&
self
.
inner
}
}
impl
<
T
>
AsMut
<
UnboundedReceiver
<
T
>
>
for
UnboundedReceiverStream
<
T
>
{
fn
as_mut
(
&
mut
self
)
-
>
&
mut
UnboundedReceiver
<
T
>
{
&
mut
self
.
inner
}
}
impl
<
T
>
From
<
UnboundedReceiver
<
T
>
>
for
UnboundedReceiverStream
<
T
>
{
fn
from
(
recv
:
UnboundedReceiver
<
T
>
)
-
>
Self
{
Self
:
:
new
(
recv
)
}
}
