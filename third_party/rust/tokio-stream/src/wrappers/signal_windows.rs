use
crate
:
:
Stream
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
use
tokio
:
:
signal
:
:
windows
:
:
{
CtrlBreak
CtrlC
}
;
#
[
derive
(
Debug
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
all
(
windows
feature
=
"
signal
"
)
)
)
)
]
pub
struct
CtrlCStream
{
inner
:
CtrlC
}
impl
CtrlCStream
{
pub
fn
new
(
interval
:
CtrlC
)
-
>
Self
{
Self
{
inner
:
interval
}
}
pub
fn
into_inner
(
self
)
-
>
CtrlC
{
self
.
inner
}
}
impl
Stream
for
CtrlCStream
{
type
Item
=
(
)
;
fn
poll_next
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
(
)
>
>
{
self
.
inner
.
poll_recv
(
cx
)
}
}
impl
AsRef
<
CtrlC
>
for
CtrlCStream
{
fn
as_ref
(
&
self
)
-
>
&
CtrlC
{
&
self
.
inner
}
}
impl
AsMut
<
CtrlC
>
for
CtrlCStream
{
fn
as_mut
(
&
mut
self
)
-
>
&
mut
CtrlC
{
&
mut
self
.
inner
}
}
#
[
derive
(
Debug
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
all
(
windows
feature
=
"
signal
"
)
)
)
)
]
pub
struct
CtrlBreakStream
{
inner
:
CtrlBreak
}
impl
CtrlBreakStream
{
pub
fn
new
(
interval
:
CtrlBreak
)
-
>
Self
{
Self
{
inner
:
interval
}
}
pub
fn
into_inner
(
self
)
-
>
CtrlBreak
{
self
.
inner
}
}
impl
Stream
for
CtrlBreakStream
{
type
Item
=
(
)
;
fn
poll_next
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
(
)
>
>
{
self
.
inner
.
poll_recv
(
cx
)
}
}
impl
AsRef
<
CtrlBreak
>
for
CtrlBreakStream
{
fn
as_ref
(
&
self
)
-
>
&
CtrlBreak
{
&
self
.
inner
}
}
impl
AsMut
<
CtrlBreak
>
for
CtrlBreakStream
{
fn
as_mut
(
&
mut
self
)
-
>
&
mut
CtrlBreak
{
&
mut
self
.
inner
}
}
