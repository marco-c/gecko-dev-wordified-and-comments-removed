use
crate
:
:
{
err
:
:
Res
ssl
:
:
PRFileDesc
time
:
:
{
Interval
PRTime
Time
}
}
;
use
std
:
:
{
convert
:
:
{
TryFrom
TryInto
}
ops
:
:
{
Deref
DerefMut
}
os
:
:
raw
:
:
c_uint
ptr
:
:
null_mut
time
:
:
{
Duration
Instant
}
}
;
#
[
allow
(
clippy
:
:
upper_case_acronyms
)
]
#
[
allow
(
clippy
:
:
empty_enum
)
]
pub
enum
SSLAntiReplayContext
{
}
experimental_api
!
(
SSL_CreateAntiReplayContext
(
now
:
PRTime
window
:
PRTime
k
:
c_uint
bits
:
c_uint
ctx
:
*
mut
*
mut
SSLAntiReplayContext
)
)
;
experimental_api
!
(
SSL_ReleaseAntiReplayContext
(
ctx
:
*
mut
SSLAntiReplayContext
)
)
;
experimental_api
!
(
SSL_SetAntiReplayContext
(
fd
:
*
mut
PRFileDesc
ctx
:
*
mut
SSLAntiReplayContext
)
)
;
scoped_ptr
!
(
AntiReplayContext
SSLAntiReplayContext
SSL_ReleaseAntiReplayContext
)
;
#
[
allow
(
clippy
:
:
module_name_repetitions
)
]
pub
struct
AntiReplay
{
ctx
:
AntiReplayContext
}
impl
AntiReplay
{
pub
fn
new
(
now
:
Instant
window
:
Duration
k
:
usize
bits
:
usize
)
-
>
Res
<
Self
>
{
let
mut
ctx
:
*
mut
SSLAntiReplayContext
=
null_mut
(
)
;
unsafe
{
SSL_CreateAntiReplayContext
(
Time
:
:
from
(
now
)
.
try_into
(
)
?
Interval
:
:
from
(
window
)
.
try_into
(
)
?
c_uint
:
:
try_from
(
k
)
?
c_uint
:
:
try_from
(
bits
)
?
&
mut
ctx
)
}
?
;
Ok
(
Self
{
ctx
:
AntiReplayContext
:
:
from_ptr
(
ctx
)
?
}
)
}
pub
(
crate
)
fn
config_socket
(
&
self
fd
:
*
mut
PRFileDesc
)
-
>
Res
<
(
)
>
{
unsafe
{
SSL_SetAntiReplayContext
(
fd
*
self
.
ctx
)
}
}
}
