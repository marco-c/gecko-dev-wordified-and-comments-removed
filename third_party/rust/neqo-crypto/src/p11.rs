#
!
[
allow
(
dead_code
)
]
#
!
[
allow
(
non_upper_case_globals
)
]
#
!
[
allow
(
non_camel_case_types
)
]
#
!
[
allow
(
non_snake_case
)
]
use
crate
:
:
err
:
:
{
secstatus_to_res
Error
Res
}
;
use
neqo_common
:
:
hex_with_len
;
use
std
:
:
convert
:
:
TryFrom
;
use
std
:
:
ops
:
:
{
Deref
DerefMut
}
;
use
std
:
:
os
:
:
raw
:
:
{
c_int
c_uint
}
;
use
std
:
:
ptr
:
:
null_mut
;
#
[
allow
(
clippy
:
:
upper_case_acronyms
)
]
#
[
allow
(
unknown_lints
deref_nullptr
)
]
#
[
allow
(
clippy
:
:
unreadable_literal
)
]
mod
nss_p11
{
include
!
(
concat
!
(
env
!
(
"
OUT_DIR
"
)
"
/
nss_p11
.
rs
"
)
)
;
}
pub
use
nss_p11
:
:
*
;
macro_rules
!
scoped_ptr
{
(
scoped
:
ident
target
:
ty
dtor
:
path
)
=
>
{
pub
struct
scoped
{
ptr
:
*
mut
target
}
impl
scoped
{
/
/
/
Create
a
new
instance
of
scoped
from
a
pointer
.
/
/
/
/
/
/
#
Errors
/
/
/
When
passed
a
null
pointer
generates
an
error
.
pub
fn
from_ptr
(
ptr
:
*
mut
target
)
-
>
Result
<
Self
crate
:
:
err
:
:
Error
>
{
if
ptr
.
is_null
(
)
{
Err
(
crate
:
:
err
:
:
Error
:
:
last_nss_error
(
)
)
}
else
{
Ok
(
Self
{
ptr
}
)
}
}
}
impl
Deref
for
scoped
{
type
Target
=
*
mut
target
;
#
[
must_use
]
fn
deref
(
&
self
)
-
>
&
*
mut
target
{
&
self
.
ptr
}
}
impl
DerefMut
for
scoped
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
*
mut
target
{
&
mut
self
.
ptr
}
}
impl
Drop
for
scoped
{
#
[
allow
(
unused_must_use
)
]
fn
drop
(
&
mut
self
)
{
unsafe
{
dtor
(
self
.
ptr
)
}
;
}
}
}
;
}
scoped_ptr
!
(
Certificate
CERTCertificate
CERT_DestroyCertificate
)
;
scoped_ptr
!
(
CertList
CERTCertList
CERT_DestroyCertList
)
;
scoped_ptr
!
(
PublicKey
SECKEYPublicKey
SECKEY_DestroyPublicKey
)
;
impl
PublicKey
{
pub
fn
key_data
(
&
self
)
-
>
Res
<
Vec
<
u8
>
>
{
let
mut
buf
=
vec
!
[
0
;
100
]
;
let
mut
len
:
c_uint
=
0
;
secstatus_to_res
(
unsafe
{
PK11_HPKE_Serialize
(
*
*
self
buf
.
as_mut_ptr
(
)
&
mut
len
c_uint
:
:
try_from
(
buf
.
len
(
)
)
.
unwrap
(
)
)
}
)
?
;
buf
.
truncate
(
usize
:
:
try_from
(
len
)
.
unwrap
(
)
)
;
Ok
(
buf
)
}
}
impl
Clone
for
PublicKey
{
#
[
must_use
]
fn
clone
(
&
self
)
-
>
Self
{
let
ptr
=
unsafe
{
SECKEY_CopyPublicKey
(
self
.
ptr
)
}
;
assert
!
(
!
ptr
.
is_null
(
)
)
;
Self
{
ptr
}
}
}
impl
std
:
:
fmt
:
:
Debug
for
PublicKey
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
)
-
>
std
:
:
fmt
:
:
Result
{
if
let
Ok
(
b
)
=
self
.
key_data
(
)
{
write
!
(
f
"
PublicKey
{
}
"
hex_with_len
(
b
)
)
}
else
{
write
!
(
f
"
Opaque
PublicKey
"
)
}
}
}
scoped_ptr
!
(
PrivateKey
SECKEYPrivateKey
SECKEY_DestroyPrivateKey
)
;
impl
PrivateKey
{
pub
fn
key_data
(
&
self
)
-
>
Res
<
Vec
<
u8
>
>
{
let
mut
key_item
=
Item
:
:
make_empty
(
)
;
secstatus_to_res
(
unsafe
{
PK11_ReadRawAttribute
(
PK11ObjectType
:
:
PK11_TypePrivKey
(
*
*
self
)
.
cast
(
)
CK_ATTRIBUTE_TYPE
:
:
from
(
CKA_VALUE
)
&
mut
key_item
)
}
)
?
;
let
slc
=
unsafe
{
std
:
:
slice
:
:
from_raw_parts
(
key_item
.
data
usize
:
:
try_from
(
key_item
.
len
)
.
unwrap
(
)
)
}
;
let
key
=
Vec
:
:
from
(
slc
)
;
unsafe
{
SECITEM_FreeItem
(
&
mut
key_item
PRBool
:
:
from
(
false
)
)
;
}
Ok
(
key
)
}
}
unsafe
impl
Send
for
PrivateKey
{
}
impl
Clone
for
PrivateKey
{
#
[
must_use
]
fn
clone
(
&
self
)
-
>
Self
{
let
ptr
=
unsafe
{
SECKEY_CopyPrivateKey
(
self
.
ptr
)
}
;
assert
!
(
!
ptr
.
is_null
(
)
)
;
Self
{
ptr
}
}
}
impl
std
:
:
fmt
:
:
Debug
for
PrivateKey
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
)
-
>
std
:
:
fmt
:
:
Result
{
if
let
Ok
(
b
)
=
self
.
key_data
(
)
{
write
!
(
f
"
PrivateKey
{
}
"
hex_with_len
(
b
)
)
}
else
{
write
!
(
f
"
Opaque
PrivateKey
"
)
}
}
}
scoped_ptr
!
(
Slot
PK11SlotInfo
PK11_FreeSlot
)
;
impl
Slot
{
pub
fn
internal
(
)
-
>
Res
<
Self
>
{
let
p
=
unsafe
{
PK11_GetInternalSlot
(
)
}
;
Slot
:
:
from_ptr
(
p
)
}
}
scoped_ptr
!
(
SymKey
PK11SymKey
PK11_FreeSymKey
)
;
impl
SymKey
{
pub
fn
as_bytes
(
&
self
)
-
>
Res
<
&
[
u8
]
>
{
secstatus_to_res
(
unsafe
{
PK11_ExtractKeyValue
(
self
.
ptr
)
}
)
?
;
let
key_item
=
unsafe
{
PK11_GetKeyData
(
self
.
ptr
)
}
;
match
unsafe
{
key_item
.
as_mut
(
)
}
{
None
=
>
Err
(
Error
:
:
InternalError
)
Some
(
key
)
=
>
Ok
(
unsafe
{
std
:
:
slice
:
:
from_raw_parts
(
key
.
data
key
.
len
as
usize
)
}
)
}
}
}
impl
Clone
for
SymKey
{
#
[
must_use
]
fn
clone
(
&
self
)
-
>
Self
{
let
ptr
=
unsafe
{
PK11_ReferenceSymKey
(
self
.
ptr
)
}
;
assert
!
(
!
ptr
.
is_null
(
)
)
;
Self
{
ptr
}
}
}
impl
std
:
:
fmt
:
:
Debug
for
SymKey
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
)
-
>
std
:
:
fmt
:
:
Result
{
if
let
Ok
(
b
)
=
self
.
as_bytes
(
)
{
write
!
(
f
"
SymKey
{
}
"
hex_with_len
(
b
)
)
}
else
{
write
!
(
f
"
Opaque
SymKey
"
)
}
}
}
unsafe
fn
destroy_secitem
(
item
:
*
mut
SECItem
)
{
SECITEM_FreeItem
(
item
PRBool
:
:
from
(
true
)
)
;
}
scoped_ptr
!
(
Item
SECItem
destroy_secitem
)
;
impl
Item
{
pub
fn
wrap
(
buf
:
&
[
u8
]
)
-
>
SECItem
{
SECItem
{
type_
:
SECItemType
:
:
siBuffer
data
:
buf
.
as_ptr
(
)
as
*
mut
u8
len
:
c_uint
:
:
try_from
(
buf
.
len
(
)
)
.
unwrap
(
)
}
}
pub
fn
make_empty
(
)
-
>
SECItem
{
SECItem
{
type_
:
SECItemType
:
:
siBuffer
data
:
null_mut
(
)
len
:
0
}
}
pub
unsafe
fn
into_vec
(
self
)
-
>
Vec
<
u8
>
{
let
b
=
self
.
ptr
.
as_ref
(
)
.
unwrap
(
)
;
assert_eq
!
(
b
.
type_
SECItemType
:
:
siBuffer
)
;
let
slc
=
std
:
:
slice
:
:
from_raw_parts
(
b
.
data
usize
:
:
try_from
(
b
.
len
)
.
unwrap
(
)
)
;
Vec
:
:
from
(
slc
)
}
}
#
[
must_use
]
pub
fn
random
(
size
:
usize
)
-
>
Vec
<
u8
>
{
let
mut
buf
=
vec
!
[
0
;
size
]
;
secstatus_to_res
(
unsafe
{
PK11_GenerateRandom
(
buf
.
as_mut_ptr
(
)
c_int
:
:
try_from
(
buf
.
len
(
)
)
.
unwrap
(
)
)
}
)
.
unwrap
(
)
;
buf
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
random
;
use
test_fixture
:
:
fixture_init
;
#
[
test
]
fn
randomness
(
)
{
fixture_init
(
)
;
assert_ne
!
(
random
(
16
)
random
(
16
)
)
;
}
}
