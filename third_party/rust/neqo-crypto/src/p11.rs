#
!
[
allow
(
dead_code
)
]
#
!
[
allow
(
non_upper_case_globals
)
]
#
!
[
allow
(
non_camel_case_types
)
]
#
!
[
allow
(
non_snake_case
)
]
use
crate
:
:
err
:
:
{
secstatus_to_res
Error
Res
}
;
use
neqo_common
:
:
hex_with_len
;
use
std
:
:
convert
:
:
TryInto
;
use
std
:
:
ops
:
:
{
Deref
DerefMut
}
;
use
std
:
:
ptr
:
:
NonNull
;
#
[
allow
(
unknown_lints
renamed_and_removed_lints
clippy
:
:
unknown_clippy_lints
)
]
#
[
allow
(
clippy
:
:
unreadable_literal
clippy
:
:
upper_case_acronyms
)
]
mod
nss_p11
{
include
!
(
concat
!
(
env
!
(
"
OUT_DIR
"
)
"
/
nss_p11
.
rs
"
)
)
;
}
pub
use
nss_p11
:
:
*
;
macro_rules
!
scoped_ptr
{
(
scoped
:
ident
target
:
ty
dtor
:
path
)
=
>
{
pub
struct
scoped
{
ptr
:
*
mut
target
}
impl
scoped
{
#
[
must_use
]
pub
fn
new
(
ptr
:
NonNull
<
target
>
)
-
>
Self
{
Self
{
ptr
:
ptr
.
as_ptr
(
)
}
}
}
impl
Deref
for
scoped
{
type
Target
=
*
mut
target
;
#
[
must_use
]
fn
deref
(
&
self
)
-
>
&
*
mut
target
{
&
self
.
ptr
}
}
impl
DerefMut
for
scoped
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
*
mut
target
{
&
mut
self
.
ptr
}
}
impl
Drop
for
scoped
{
fn
drop
(
&
mut
self
)
{
let
_
=
unsafe
{
dtor
(
self
.
ptr
)
}
;
}
}
}
;
}
scoped_ptr
!
(
Certificate
CERTCertificate
CERT_DestroyCertificate
)
;
scoped_ptr
!
(
CertList
CERTCertList
CERT_DestroyCertList
)
;
scoped_ptr
!
(
PrivateKey
SECKEYPrivateKey
SECKEY_DestroyPrivateKey
)
;
scoped_ptr
!
(
SymKey
PK11SymKey
PK11_FreeSymKey
)
;
scoped_ptr
!
(
Slot
PK11SlotInfo
PK11_FreeSlot
)
;
impl
SymKey
{
pub
fn
as_bytes
(
&
self
)
-
>
Res
<
&
[
u8
]
>
{
secstatus_to_res
(
unsafe
{
PK11_ExtractKeyValue
(
self
.
ptr
)
}
)
?
;
let
key_item
=
unsafe
{
PK11_GetKeyData
(
self
.
ptr
)
}
;
match
unsafe
{
key_item
.
as_mut
(
)
}
{
None
=
>
Err
(
Error
:
:
InternalError
)
Some
(
key
)
=
>
Ok
(
unsafe
{
std
:
:
slice
:
:
from_raw_parts
(
key
.
data
key
.
len
as
usize
)
}
)
}
}
}
impl
Clone
for
SymKey
{
#
[
must_use
]
fn
clone
(
&
self
)
-
>
Self
{
let
ptr
=
unsafe
{
PK11_ReferenceSymKey
(
self
.
ptr
)
}
;
assert
!
(
!
ptr
.
is_null
(
)
)
;
Self
{
ptr
}
}
}
impl
std
:
:
fmt
:
:
Debug
for
SymKey
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
)
-
>
std
:
:
fmt
:
:
Result
{
if
let
Ok
(
b
)
=
self
.
as_bytes
(
)
{
write
!
(
f
"
SymKey
{
}
"
hex_with_len
(
b
)
)
}
else
{
write
!
(
f
"
Opaque
SymKey
"
)
}
}
}
#
[
must_use
]
pub
fn
random
(
size
:
usize
)
-
>
Vec
<
u8
>
{
let
mut
buf
=
vec
!
[
0
;
size
]
;
secstatus_to_res
(
unsafe
{
PK11_GenerateRandom
(
buf
.
as_mut_ptr
(
)
buf
.
len
(
)
.
try_into
(
)
.
unwrap
(
)
)
}
)
.
unwrap
(
)
;
buf
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
random
;
use
test_fixture
:
:
fixture_init
;
#
[
test
]
fn
randomness
(
)
{
fixture_init
(
)
;
assert_ne
!
(
random
(
16
)
random
(
16
)
)
;
}
}
