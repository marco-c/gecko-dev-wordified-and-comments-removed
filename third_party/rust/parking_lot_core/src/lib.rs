#
!
[
warn
(
missing_docs
)
]
#
!
[
cfg_attr
(
feature
=
"
nightly
"
feature
(
const_fn
thread_local_state
)
)
]
#
!
[
cfg_attr
(
all
(
feature
=
"
nightly
"
target_os
=
"
linux
"
)
feature
(
integer_atomics
)
)
]
#
!
[
cfg_attr
(
feature
=
"
nightly
"
feature
(
asm
)
)
]
extern
crate
smallvec
;
extern
crate
rand
;
#
[
cfg
(
unix
)
]
extern
crate
libc
;
#
[
cfg
(
windows
)
]
extern
crate
winapi
;
#
[
cfg
(
windows
)
]
extern
crate
kernel32
;
#
[
cfg
(
all
(
feature
=
"
nightly
"
target_os
=
"
linux
"
)
)
]
#
[
path
=
"
thread_parker
/
linux
.
rs
"
]
mod
thread_parker
;
#
[
cfg
(
all
(
unix
not
(
all
(
feature
=
"
nightly
"
target_os
=
"
linux
"
)
)
)
)
]
#
[
path
=
"
thread_parker
/
unix
.
rs
"
]
mod
thread_parker
;
#
[
cfg
(
windows
)
]
#
[
path
=
"
thread_parker
/
windows
/
mod
.
rs
"
]
mod
thread_parker
;
#
[
cfg
(
not
(
any
(
windows
unix
)
)
)
]
#
[
path
=
"
thread_parker
/
generic
.
rs
"
]
mod
thread_parker
;
#
[
cfg
(
not
(
feature
=
"
nightly
"
)
)
]
mod
stable
;
mod
util
;
mod
spinwait
;
mod
word_lock
;
mod
parking_lot
;
pub
use
parking_lot
:
:
{
ParkResult
UnparkResult
RequeueOp
UnparkToken
ParkToken
FilterOp
}
;
pub
use
parking_lot
:
:
{
DEFAULT_UNPARK_TOKEN
DEFAULT_PARK_TOKEN
}
;
pub
use
parking_lot
:
:
{
park
unpark_one
unpark_all
unpark_requeue
unpark_filter
}
;
pub
use
spinwait
:
:
SpinWait
;
