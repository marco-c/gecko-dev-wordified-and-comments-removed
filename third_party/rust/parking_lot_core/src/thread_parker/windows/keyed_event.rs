use
std
:
:
sync
:
:
atomic
:
:
{
AtomicUsize
Ordering
}
;
use
std
:
:
time
:
:
Instant
;
use
std
:
:
ptr
;
use
std
:
:
mem
;
use
winapi
:
:
shared
:
:
minwindef
:
:
{
TRUE
ULONG
}
;
use
winapi
:
:
shared
:
:
ntdef
:
:
NTSTATUS
;
use
winapi
:
:
shared
:
:
ntstatus
:
:
{
STATUS_SUCCESS
STATUS_TIMEOUT
}
;
use
winapi
:
:
um
:
:
handleapi
:
:
CloseHandle
;
use
winapi
:
:
um
:
:
libloaderapi
:
:
{
GetModuleHandleA
GetProcAddress
}
;
use
winapi
:
:
um
:
:
winnt
:
:
{
ACCESS_MASK
GENERIC_READ
GENERIC_WRITE
LPCSTR
}
;
use
winapi
:
:
um
:
:
winnt
:
:
{
BOOLEAN
HANDLE
LARGE_INTEGER
PHANDLE
PLARGE_INTEGER
PVOID
}
;
const
STATE_UNPARKED
:
usize
=
0
;
const
STATE_PARKED
:
usize
=
1
;
const
STATE_TIMED_OUT
:
usize
=
2
;
#
[
allow
(
non_snake_case
)
]
pub
struct
KeyedEvent
{
handle
:
HANDLE
NtReleaseKeyedEvent
:
extern
"
system
"
fn
(
EventHandle
:
HANDLE
Key
:
PVOID
Alertable
:
BOOLEAN
Timeout
:
PLARGE_INTEGER
)
-
>
NTSTATUS
NtWaitForKeyedEvent
:
extern
"
system
"
fn
(
EventHandle
:
HANDLE
Key
:
PVOID
Alertable
:
BOOLEAN
Timeout
:
PLARGE_INTEGER
)
-
>
NTSTATUS
}
impl
KeyedEvent
{
unsafe
fn
wait_for
(
&
self
key
:
PVOID
timeout
:
PLARGE_INTEGER
)
-
>
NTSTATUS
{
(
self
.
NtWaitForKeyedEvent
)
(
self
.
handle
key
0
timeout
)
}
unsafe
fn
release
(
&
self
key
:
PVOID
)
-
>
NTSTATUS
{
(
self
.
NtReleaseKeyedEvent
)
(
self
.
handle
key
0
ptr
:
:
null_mut
(
)
)
}
#
[
allow
(
non_snake_case
)
]
pub
unsafe
fn
create
(
)
-
>
Option
<
KeyedEvent
>
{
let
ntdll
=
GetModuleHandleA
(
b
"
ntdll
.
dll
\
0
"
.
as_ptr
(
)
as
LPCSTR
)
;
if
ntdll
.
is_null
(
)
{
return
None
;
}
let
NtCreateKeyedEvent
=
GetProcAddress
(
ntdll
b
"
NtCreateKeyedEvent
\
0
"
.
as_ptr
(
)
as
LPCSTR
)
;
if
NtCreateKeyedEvent
.
is_null
(
)
{
return
None
;
}
let
NtReleaseKeyedEvent
=
GetProcAddress
(
ntdll
b
"
NtReleaseKeyedEvent
\
0
"
.
as_ptr
(
)
as
LPCSTR
)
;
if
NtReleaseKeyedEvent
.
is_null
(
)
{
return
None
;
}
let
NtWaitForKeyedEvent
=
GetProcAddress
(
ntdll
b
"
NtWaitForKeyedEvent
\
0
"
.
as_ptr
(
)
as
LPCSTR
)
;
if
NtWaitForKeyedEvent
.
is_null
(
)
{
return
None
;
}
let
NtCreateKeyedEvent
:
extern
"
system
"
fn
(
KeyedEventHandle
:
PHANDLE
DesiredAccess
:
ACCESS_MASK
ObjectAttributes
:
PVOID
Flags
:
ULONG
)
-
>
NTSTATUS
=
mem
:
:
transmute
(
NtCreateKeyedEvent
)
;
let
mut
handle
=
mem
:
:
uninitialized
(
)
;
let
status
=
NtCreateKeyedEvent
(
&
mut
handle
GENERIC_READ
|
GENERIC_WRITE
ptr
:
:
null_mut
(
)
0
)
;
if
status
!
=
STATUS_SUCCESS
{
return
None
;
}
Some
(
KeyedEvent
{
handle
NtReleaseKeyedEvent
:
mem
:
:
transmute
(
NtReleaseKeyedEvent
)
NtWaitForKeyedEvent
:
mem
:
:
transmute
(
NtWaitForKeyedEvent
)
}
)
}
pub
unsafe
fn
prepare_park
(
&
'
static
self
key
:
&
AtomicUsize
)
{
key
.
store
(
STATE_PARKED
Ordering
:
:
Relaxed
)
;
}
pub
unsafe
fn
timed_out
(
&
'
static
self
key
:
&
AtomicUsize
)
-
>
bool
{
key
.
load
(
Ordering
:
:
Relaxed
)
=
=
STATE_TIMED_OUT
}
pub
unsafe
fn
park
(
&
'
static
self
key
:
&
AtomicUsize
)
{
let
status
=
self
.
wait_for
(
key
as
*
const
_
as
PVOID
ptr
:
:
null_mut
(
)
)
;
debug_assert_eq
!
(
status
STATUS_SUCCESS
)
;
}
pub
unsafe
fn
park_until
(
&
'
static
self
key
:
&
AtomicUsize
timeout
:
Instant
)
-
>
bool
{
let
now
=
Instant
:
:
now
(
)
;
if
timeout
<
=
now
{
if
key
.
swap
(
STATE_TIMED_OUT
Ordering
:
:
Relaxed
)
=
=
STATE_UNPARKED
{
self
.
park
(
key
)
;
return
true
;
}
return
false
;
}
let
mut
nt_timeout
:
LARGE_INTEGER
=
mem
:
:
zeroed
(
)
;
let
diff
=
timeout
-
now
;
let
value
=
(
diff
.
as_secs
(
)
as
i64
)
.
checked_mul
(
-
10000000
)
.
and_then
(
|
x
|
x
.
checked_sub
(
(
diff
.
subsec_nanos
(
)
as
i64
+
99
)
/
100
)
)
;
match
value
{
Some
(
x
)
=
>
*
nt_timeout
.
QuadPart_mut
(
)
=
x
None
=
>
{
self
.
park
(
key
)
;
return
true
;
}
}
;
let
status
=
self
.
wait_for
(
key
as
*
const
_
as
PVOID
&
mut
nt_timeout
)
;
if
status
=
=
STATUS_SUCCESS
{
return
true
;
}
debug_assert_eq
!
(
status
STATUS_TIMEOUT
)
;
if
key
.
swap
(
STATE_TIMED_OUT
Ordering
:
:
Relaxed
)
=
=
STATE_UNPARKED
{
self
.
park
(
key
)
;
return
true
;
}
false
}
pub
unsafe
fn
unpark_lock
(
&
'
static
self
key
:
&
AtomicUsize
)
-
>
UnparkHandle
{
if
key
.
swap
(
STATE_UNPARKED
Ordering
:
:
Relaxed
)
=
=
STATE_PARKED
{
UnparkHandle
{
key
:
key
keyed_event
:
self
}
}
else
{
UnparkHandle
{
key
:
ptr
:
:
null
(
)
keyed_event
:
self
}
}
}
}
impl
Drop
for
KeyedEvent
{
fn
drop
(
&
mut
self
)
{
unsafe
{
let
ok
=
CloseHandle
(
self
.
handle
)
;
debug_assert_eq
!
(
ok
TRUE
)
;
}
}
}
pub
struct
UnparkHandle
{
key
:
*
const
AtomicUsize
keyed_event
:
&
'
static
KeyedEvent
}
impl
UnparkHandle
{
pub
unsafe
fn
unpark
(
self
)
{
if
!
self
.
key
.
is_null
(
)
{
let
status
=
self
.
keyed_event
.
release
(
self
.
key
as
PVOID
)
;
debug_assert_eq
!
(
status
STATUS_SUCCESS
)
;
}
}
}
