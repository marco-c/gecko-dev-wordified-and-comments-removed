use
core
:
:
sync
:
:
atomic
:
:
{
AtomicBool
Ordering
}
;
use
std
:
:
{
io
os
:
:
fortanix_sgx
:
:
{
thread
:
:
current
as
current_tcs
usercalls
:
:
{
self
raw
:
:
{
Tcs
EV_UNPARK
WAIT_INDEFINITE
}
}
}
thread
time
:
:
Instant
}
;
pub
struct
ThreadParker
{
parked
:
AtomicBool
tcs
:
Tcs
}
impl
ThreadParker
{
pub
const
IS_CHEAP_TO_CONSTRUCT
:
bool
=
true
;
#
[
inline
]
pub
fn
new
(
)
-
>
ThreadParker
{
ThreadParker
{
parked
:
AtomicBool
:
:
new
(
false
)
tcs
:
current_tcs
(
)
}
}
#
[
inline
]
pub
fn
prepare_park
(
&
self
)
{
self
.
parked
.
store
(
true
Ordering
:
:
Relaxed
)
;
}
#
[
inline
]
pub
fn
timed_out
(
&
self
)
-
>
bool
{
self
.
parked
.
load
(
Ordering
:
:
Relaxed
)
}
#
[
inline
]
pub
fn
park
(
&
self
)
{
while
self
.
parked
.
load
(
Ordering
:
:
Acquire
)
{
let
result
=
usercalls
:
:
wait
(
EV_UNPARK
WAIT_INDEFINITE
)
;
debug_assert_eq
!
(
result
.
expect
(
"
wait
returned
error
"
)
&
EV_UNPARK
EV_UNPARK
)
;
}
}
#
[
inline
]
pub
fn
park_until
(
&
self
_timeout
:
Instant
)
-
>
bool
{
panic
!
(
"
timeout
not
supported
in
SGX
"
)
;
}
#
[
inline
]
pub
fn
unpark_lock
(
&
self
)
-
>
UnparkHandle
{
self
.
parked
.
store
(
false
Ordering
:
:
Release
)
;
UnparkHandle
(
self
.
tcs
)
}
}
pub
struct
UnparkHandle
(
Tcs
)
;
impl
UnparkHandle
{
#
[
inline
]
pub
fn
unpark
(
self
)
{
let
result
=
usercalls
:
:
send
(
EV_UNPARK
Some
(
self
.
0
)
)
;
if
cfg
!
(
debug_assertions
)
{
if
let
Err
(
error
)
=
result
{
if
error
.
kind
(
)
!
=
io
:
:
ErrorKind
:
:
InvalidInput
{
panic
!
(
"
send
returned
an
unexpected
error
:
{
:
?
}
"
error
)
;
}
}
}
}
}
#
[
inline
]
pub
fn
thread_yield
(
)
{
thread
:
:
yield_now
(
)
;
}
