use
core
:
:
marker
;
use
{
Async
Poll
}
;
use
stream
:
:
Stream
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
IterOk
<
I
E
>
{
iter
:
I
_marker
:
marker
:
:
PhantomData
<
fn
(
)
-
>
E
>
}
pub
fn
iter_ok
<
I
E
>
(
i
:
I
)
-
>
IterOk
<
I
:
:
IntoIter
E
>
where
I
:
IntoIterator
{
IterOk
{
iter
:
i
.
into_iter
(
)
_marker
:
marker
:
:
PhantomData
}
}
impl
<
I
E
>
Stream
for
IterOk
<
I
E
>
where
I
:
Iterator
{
type
Item
=
I
:
:
Item
;
type
Error
=
E
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
Option
<
I
:
:
Item
>
E
>
{
Ok
(
Async
:
:
Ready
(
self
.
iter
.
next
(
)
)
)
}
}
