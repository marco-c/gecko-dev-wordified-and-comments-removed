use
std
:
:
mem
;
use
std
:
:
prelude
:
:
v1
:
:
*
;
use
{
Future
IntoFuture
Poll
Async
}
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
futures
do
nothing
unless
polled
"
]
pub
struct
SelectAll
<
A
>
where
A
:
Future
{
inner
:
Vec
<
A
>
}
#
[
doc
(
hidden
)
]
pub
type
SelectAllNext
<
A
>
=
A
;
pub
fn
select_all
<
I
>
(
iter
:
I
)
-
>
SelectAll
<
<
I
:
:
Item
as
IntoFuture
>
:
:
Future
>
where
I
:
IntoIterator
I
:
:
Item
:
IntoFuture
{
let
ret
=
SelectAll
{
inner
:
iter
.
into_iter
(
)
.
map
(
|
a
|
a
.
into_future
(
)
)
.
collect
(
)
}
;
assert
!
(
ret
.
inner
.
len
(
)
>
0
)
;
ret
}
impl
<
A
>
Future
for
SelectAll
<
A
>
where
A
:
Future
{
type
Item
=
(
A
:
:
Item
usize
Vec
<
A
>
)
;
type
Error
=
(
A
:
:
Error
usize
Vec
<
A
>
)
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
Self
:
:
Item
Self
:
:
Error
>
{
let
item
=
self
.
inner
.
iter_mut
(
)
.
enumerate
(
)
.
filter_map
(
|
(
i
f
)
|
{
match
f
.
poll
(
)
{
Ok
(
Async
:
:
NotReady
)
=
>
None
Ok
(
Async
:
:
Ready
(
e
)
)
=
>
Some
(
(
i
Ok
(
e
)
)
)
Err
(
e
)
=
>
Some
(
(
i
Err
(
e
)
)
)
}
}
)
.
next
(
)
;
match
item
{
Some
(
(
idx
res
)
)
=
>
{
self
.
inner
.
remove
(
idx
)
;
let
rest
=
mem
:
:
replace
(
&
mut
self
.
inner
Vec
:
:
new
(
)
)
;
match
res
{
Ok
(
e
)
=
>
Ok
(
Async
:
:
Ready
(
(
e
idx
rest
)
)
)
Err
(
e
)
=
>
Err
(
(
e
idx
rest
)
)
}
}
None
=
>
Ok
(
Async
:
:
NotReady
)
}
}
}
