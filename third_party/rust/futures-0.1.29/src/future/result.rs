use
core
:
:
result
;
use
{
Future
Poll
Async
}
;
#
[
derive
(
Debug
Clone
)
]
#
[
must_use
=
"
futures
do
nothing
unless
polled
"
]
pub
struct
FutureResult
<
T
E
>
{
inner
:
Option
<
result
:
:
Result
<
T
E
>
>
}
pub
fn
result
<
T
E
>
(
r
:
result
:
:
Result
<
T
E
>
)
-
>
FutureResult
<
T
E
>
{
FutureResult
{
inner
:
Some
(
r
)
}
}
pub
fn
ok
<
T
E
>
(
t
:
T
)
-
>
FutureResult
<
T
E
>
{
result
(
Ok
(
t
)
)
}
pub
fn
err
<
T
E
>
(
e
:
E
)
-
>
FutureResult
<
T
E
>
{
result
(
Err
(
e
)
)
}
impl
<
T
E
>
Future
for
FutureResult
<
T
E
>
{
type
Item
=
T
;
type
Error
=
E
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
T
E
>
{
self
.
inner
.
take
(
)
.
expect
(
"
cannot
poll
Result
twice
"
)
.
map
(
Async
:
:
Ready
)
}
}
impl
<
T
E
>
From
<
Result
<
T
E
>
>
for
FutureResult
<
T
E
>
{
fn
from
(
r
:
Result
<
T
E
>
)
-
>
Self
{
result
(
r
)
}
}
