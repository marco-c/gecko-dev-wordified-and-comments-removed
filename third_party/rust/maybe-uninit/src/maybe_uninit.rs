use
core
:
:
mem
:
:
ManuallyDrop
;
use
core
:
:
ptr
;
use
core
:
:
mem
:
:
uninitialized
;
#
[
cfg_attr
(
derive_copy
derive
(
Copy
)
)
]
#
[
cfg_attr
(
repr_transparent
repr
(
transparent
)
)
]
#
[
cfg_attr
(
not
(
repr_transparent
)
repr
(
C
)
)
]
pub
struct
MaybeUninit
<
T
>
{
value
:
ManuallyDrop
<
T
>
}
#
[
cfg
(
derive_copy
)
]
impl
<
T
:
Copy
>
Clone
for
MaybeUninit
<
T
>
{
#
[
inline
(
always
)
]
fn
clone
(
&
self
)
-
>
Self
{
*
self
}
}
impl
<
T
>
MaybeUninit
<
T
>
{
#
[
inline
(
always
)
]
pub
fn
new
(
val
:
T
)
-
>
MaybeUninit
<
T
>
{
MaybeUninit
{
value
:
ManuallyDrop
:
:
new
(
val
)
}
}
#
[
inline
(
always
)
]
pub
fn
uninit
(
)
-
>
MaybeUninit
<
T
>
{
unsafe
{
MaybeUninit
{
value
:
uninitialized
(
)
}
}
}
#
[
inline
]
pub
fn
zeroed
(
)
-
>
MaybeUninit
<
T
>
{
let
mut
u
=
MaybeUninit
:
:
<
T
>
:
:
uninit
(
)
;
unsafe
{
ptr
:
:
write_bytes
(
u
.
as_mut_ptr
(
)
0u8
1
)
;
}
u
}
#
[
inline
(
always
)
]
pub
fn
as_ptr
(
&
self
)
-
>
*
const
T
{
&
*
self
.
value
as
*
const
T
}
#
[
inline
(
always
)
]
pub
fn
as_mut_ptr
(
&
mut
self
)
-
>
*
mut
T
{
&
mut
*
self
.
value
as
*
mut
T
}
#
[
inline
(
always
)
]
pub
unsafe
fn
assume_init
(
self
)
-
>
T
{
ManuallyDrop
:
:
into_inner
(
self
.
value
)
}
}
