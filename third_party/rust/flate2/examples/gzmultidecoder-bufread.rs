use
flate2
:
:
bufread
:
:
MultiGzDecoder
;
use
flate2
:
:
write
:
:
GzEncoder
;
use
flate2
:
:
Compression
;
use
std
:
:
io
;
use
std
:
:
io
:
:
prelude
:
:
*
;
fn
main
(
)
{
let
mut
e
=
GzEncoder
:
:
new
(
Vec
:
:
new
(
)
Compression
:
:
default
(
)
)
;
e
.
write_all
(
b
"
Hello
World
"
)
.
unwrap
(
)
;
let
bytes
=
e
.
finish
(
)
.
unwrap
(
)
;
println
!
(
"
{
}
"
decode_reader
(
bytes
)
.
unwrap
(
)
)
;
}
fn
decode_reader
(
bytes
:
Vec
<
u8
>
)
-
>
io
:
:
Result
<
String
>
{
let
mut
gz
=
MultiGzDecoder
:
:
new
(
&
bytes
[
.
.
]
)
;
let
mut
s
=
String
:
:
new
(
)
;
gz
.
read_to_string
(
&
mut
s
)
?
;
Ok
(
s
)
}
