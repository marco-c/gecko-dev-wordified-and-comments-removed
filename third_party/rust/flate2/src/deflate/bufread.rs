use
std
:
:
io
:
:
prelude
:
:
*
;
use
std
:
:
io
;
use
std
:
:
mem
;
#
[
cfg
(
feature
=
"
tokio
"
)
]
use
futures
:
:
Poll
;
#
[
cfg
(
feature
=
"
tokio
"
)
]
use
tokio_io
:
:
{
AsyncRead
AsyncWrite
}
;
use
zio
;
use
{
Compress
Decompress
}
;
#
[
derive
(
Debug
)
]
pub
struct
DeflateEncoder
<
R
>
{
obj
:
R
data
:
Compress
}
impl
<
R
:
BufRead
>
DeflateEncoder
<
R
>
{
pub
fn
new
(
r
:
R
level
:
:
:
Compression
)
-
>
DeflateEncoder
<
R
>
{
DeflateEncoder
{
obj
:
r
data
:
Compress
:
:
new
(
level
false
)
}
}
}
pub
fn
reset_encoder_data
<
R
>
(
zlib
:
&
mut
DeflateEncoder
<
R
>
)
{
zlib
.
data
.
reset
(
)
;
}
impl
<
R
>
DeflateEncoder
<
R
>
{
pub
fn
reset
(
&
mut
self
r
:
R
)
-
>
R
{
reset_encoder_data
(
self
)
;
mem
:
:
replace
(
&
mut
self
.
obj
r
)
}
pub
fn
get_ref
(
&
self
)
-
>
&
R
{
&
self
.
obj
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
R
{
&
mut
self
.
obj
}
pub
fn
into_inner
(
self
)
-
>
R
{
self
.
obj
}
pub
fn
total_in
(
&
self
)
-
>
u64
{
self
.
data
.
total_in
(
)
}
pub
fn
total_out
(
&
self
)
-
>
u64
{
self
.
data
.
total_out
(
)
}
}
impl
<
R
:
BufRead
>
Read
for
DeflateEncoder
<
R
>
{
fn
read
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
zio
:
:
read
(
&
mut
self
.
obj
&
mut
self
.
data
buf
)
}
}
#
[
cfg
(
feature
=
"
tokio
"
)
]
impl
<
R
:
AsyncRead
+
BufRead
>
AsyncRead
for
DeflateEncoder
<
R
>
{
}
impl
<
W
:
BufRead
+
Write
>
Write
for
DeflateEncoder
<
W
>
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
get_mut
(
)
.
write
(
buf
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
get_mut
(
)
.
flush
(
)
}
}
#
[
cfg
(
feature
=
"
tokio
"
)
]
impl
<
R
:
AsyncWrite
+
BufRead
>
AsyncWrite
for
DeflateEncoder
<
R
>
{
fn
shutdown
(
&
mut
self
)
-
>
Poll
<
(
)
io
:
:
Error
>
{
self
.
get_mut
(
)
.
shutdown
(
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
DeflateDecoder
<
R
>
{
obj
:
R
data
:
Decompress
}
pub
fn
reset_decoder_data
<
R
>
(
zlib
:
&
mut
DeflateDecoder
<
R
>
)
{
zlib
.
data
=
Decompress
:
:
new
(
false
)
;
}
impl
<
R
:
BufRead
>
DeflateDecoder
<
R
>
{
pub
fn
new
(
r
:
R
)
-
>
DeflateDecoder
<
R
>
{
DeflateDecoder
{
obj
:
r
data
:
Decompress
:
:
new
(
false
)
}
}
}
impl
<
R
>
DeflateDecoder
<
R
>
{
pub
fn
reset
(
&
mut
self
r
:
R
)
-
>
R
{
reset_decoder_data
(
self
)
;
mem
:
:
replace
(
&
mut
self
.
obj
r
)
}
pub
fn
reset_data
(
&
mut
self
)
{
reset_decoder_data
(
self
)
;
}
pub
fn
get_ref
(
&
self
)
-
>
&
R
{
&
self
.
obj
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
R
{
&
mut
self
.
obj
}
pub
fn
into_inner
(
self
)
-
>
R
{
self
.
obj
}
pub
fn
total_in
(
&
self
)
-
>
u64
{
self
.
data
.
total_in
(
)
}
pub
fn
total_out
(
&
self
)
-
>
u64
{
self
.
data
.
total_out
(
)
}
}
impl
<
R
:
BufRead
>
Read
for
DeflateDecoder
<
R
>
{
fn
read
(
&
mut
self
into
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
zio
:
:
read
(
&
mut
self
.
obj
&
mut
self
.
data
into
)
}
}
#
[
cfg
(
feature
=
"
tokio
"
)
]
impl
<
R
:
AsyncRead
+
BufRead
>
AsyncRead
for
DeflateDecoder
<
R
>
{
}
impl
<
W
:
BufRead
+
Write
>
Write
for
DeflateDecoder
<
W
>
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
get_mut
(
)
.
write
(
buf
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
get_mut
(
)
.
flush
(
)
}
}
#
[
cfg
(
feature
=
"
tokio
"
)
]
impl
<
R
:
AsyncWrite
+
BufRead
>
AsyncWrite
for
DeflateDecoder
<
R
>
{
fn
shutdown
(
&
mut
self
)
-
>
Poll
<
(
)
io
:
:
Error
>
{
self
.
get_mut
(
)
.
shutdown
(
)
}
}
