use
std
:
:
io
;
use
std
:
:
io
:
:
prelude
:
:
*
;
#
[
cfg
(
feature
=
"
tokio
"
)
]
use
futures
:
:
Poll
;
#
[
cfg
(
feature
=
"
tokio
"
)
]
use
tokio_io
:
:
{
AsyncRead
AsyncWrite
}
;
use
super
:
:
bufread
;
use
bufreader
:
:
BufReader
;
#
[
derive
(
Debug
)
]
pub
struct
DeflateEncoder
<
R
>
{
inner
:
bufread
:
:
DeflateEncoder
<
BufReader
<
R
>
>
}
impl
<
R
:
Read
>
DeflateEncoder
<
R
>
{
pub
fn
new
(
r
:
R
level
:
:
:
Compression
)
-
>
DeflateEncoder
<
R
>
{
DeflateEncoder
{
inner
:
bufread
:
:
DeflateEncoder
:
:
new
(
BufReader
:
:
new
(
r
)
level
)
}
}
}
impl
<
R
>
DeflateEncoder
<
R
>
{
pub
fn
reset
(
&
mut
self
r
:
R
)
-
>
R
{
super
:
:
bufread
:
:
reset_encoder_data
(
&
mut
self
.
inner
)
;
self
.
inner
.
get_mut
(
)
.
reset
(
r
)
}
pub
fn
get_ref
(
&
self
)
-
>
&
R
{
self
.
inner
.
get_ref
(
)
.
get_ref
(
)
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
R
{
self
.
inner
.
get_mut
(
)
.
get_mut
(
)
}
pub
fn
into_inner
(
self
)
-
>
R
{
self
.
inner
.
into_inner
(
)
.
into_inner
(
)
}
pub
fn
total_in
(
&
self
)
-
>
u64
{
self
.
inner
.
total_in
(
)
}
pub
fn
total_out
(
&
self
)
-
>
u64
{
self
.
inner
.
total_out
(
)
}
}
impl
<
R
:
Read
>
Read
for
DeflateEncoder
<
R
>
{
fn
read
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
inner
.
read
(
buf
)
}
}
#
[
cfg
(
feature
=
"
tokio
"
)
]
impl
<
R
:
AsyncRead
>
AsyncRead
for
DeflateEncoder
<
R
>
{
}
impl
<
W
:
Read
+
Write
>
Write
for
DeflateEncoder
<
W
>
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
get_mut
(
)
.
write
(
buf
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
get_mut
(
)
.
flush
(
)
}
}
#
[
cfg
(
feature
=
"
tokio
"
)
]
impl
<
R
:
AsyncRead
+
AsyncWrite
>
AsyncWrite
for
DeflateEncoder
<
R
>
{
fn
shutdown
(
&
mut
self
)
-
>
Poll
<
(
)
io
:
:
Error
>
{
self
.
get_mut
(
)
.
shutdown
(
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
DeflateDecoder
<
R
>
{
inner
:
bufread
:
:
DeflateDecoder
<
BufReader
<
R
>
>
}
impl
<
R
:
Read
>
DeflateDecoder
<
R
>
{
pub
fn
new
(
r
:
R
)
-
>
DeflateDecoder
<
R
>
{
DeflateDecoder
:
:
new_with_buf
(
r
vec
!
[
0
;
32
*
1024
]
)
}
pub
fn
new_with_buf
(
r
:
R
buf
:
Vec
<
u8
>
)
-
>
DeflateDecoder
<
R
>
{
DeflateDecoder
{
inner
:
bufread
:
:
DeflateDecoder
:
:
new
(
BufReader
:
:
with_buf
(
buf
r
)
)
}
}
}
impl
<
R
>
DeflateDecoder
<
R
>
{
pub
fn
reset
(
&
mut
self
r
:
R
)
-
>
R
{
super
:
:
bufread
:
:
reset_decoder_data
(
&
mut
self
.
inner
)
;
self
.
inner
.
get_mut
(
)
.
reset
(
r
)
}
pub
fn
get_ref
(
&
self
)
-
>
&
R
{
self
.
inner
.
get_ref
(
)
.
get_ref
(
)
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
R
{
self
.
inner
.
get_mut
(
)
.
get_mut
(
)
}
pub
fn
into_inner
(
self
)
-
>
R
{
self
.
inner
.
into_inner
(
)
.
into_inner
(
)
}
pub
fn
total_in
(
&
self
)
-
>
u64
{
self
.
inner
.
total_in
(
)
}
pub
fn
total_out
(
&
self
)
-
>
u64
{
self
.
inner
.
total_out
(
)
}
}
impl
<
R
:
Read
>
Read
for
DeflateDecoder
<
R
>
{
fn
read
(
&
mut
self
into
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
inner
.
read
(
into
)
}
}
#
[
cfg
(
feature
=
"
tokio
"
)
]
impl
<
R
:
AsyncRead
>
AsyncRead
for
DeflateDecoder
<
R
>
{
}
impl
<
W
:
Read
+
Write
>
Write
for
DeflateDecoder
<
W
>
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
get_mut
(
)
.
write
(
buf
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
get_mut
(
)
.
flush
(
)
}
}
#
[
cfg
(
feature
=
"
tokio
"
)
]
impl
<
R
:
AsyncWrite
+
AsyncRead
>
AsyncWrite
for
DeflateDecoder
<
R
>
{
fn
shutdown
(
&
mut
self
)
-
>
Poll
<
(
)
io
:
:
Error
>
{
self
.
get_mut
(
)
.
shutdown
(
)
}
}
