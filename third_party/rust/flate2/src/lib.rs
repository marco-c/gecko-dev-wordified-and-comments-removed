#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
flate2
/
0
.
2
"
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
allow
(
trivial_numeric_casts
)
]
#
!
[
cfg_attr
(
test
deny
(
warnings
)
)
]
extern
crate
libc
;
#
[
cfg
(
test
)
]
extern
crate
rand
;
#
[
cfg
(
test
)
]
extern
crate
quickcheck
;
#
[
cfg
(
feature
=
"
tokio
"
)
]
#
[
macro_use
]
extern
crate
tokio_io
;
#
[
cfg
(
feature
=
"
tokio
"
)
]
extern
crate
futures
;
use
std
:
:
io
:
:
prelude
:
:
*
;
use
std
:
:
io
;
pub
use
gz
:
:
Builder
as
GzBuilder
;
pub
use
gz
:
:
Header
as
GzHeader
;
pub
use
mem
:
:
{
Compress
Decompress
DataError
Status
Flush
}
;
pub
use
crc
:
:
{
Crc
CrcReader
}
;
mod
bufreader
;
mod
crc
;
mod
deflate
;
mod
ffi
;
mod
gz
;
mod
zio
;
mod
mem
;
mod
zlib
;
pub
mod
read
{
pub
use
deflate
:
:
EncoderReader
as
DeflateEncoder
;
pub
use
deflate
:
:
DecoderReader
as
DeflateDecoder
;
pub
use
zlib
:
:
EncoderReader
as
ZlibEncoder
;
pub
use
zlib
:
:
DecoderReader
as
ZlibDecoder
;
pub
use
gz
:
:
EncoderReader
as
GzEncoder
;
pub
use
gz
:
:
DecoderReader
as
GzDecoder
;
pub
use
gz
:
:
MultiDecoderReader
as
MultiGzDecoder
;
}
pub
mod
write
{
pub
use
deflate
:
:
EncoderWriter
as
DeflateEncoder
;
pub
use
deflate
:
:
DecoderWriter
as
DeflateDecoder
;
pub
use
zlib
:
:
EncoderWriter
as
ZlibEncoder
;
pub
use
zlib
:
:
DecoderWriter
as
ZlibDecoder
;
pub
use
gz
:
:
EncoderWriter
as
GzEncoder
;
}
pub
mod
bufread
{
pub
use
deflate
:
:
EncoderReaderBuf
as
DeflateEncoder
;
pub
use
deflate
:
:
DecoderReaderBuf
as
DeflateDecoder
;
pub
use
zlib
:
:
EncoderReaderBuf
as
ZlibEncoder
;
pub
use
zlib
:
:
DecoderReaderBuf
as
ZlibDecoder
;
pub
use
gz
:
:
EncoderReaderBuf
as
GzEncoder
;
pub
use
gz
:
:
DecoderReaderBuf
as
GzDecoder
;
pub
use
gz
:
:
MultiDecoderReaderBuf
as
MultiGzDecoder
;
}
fn
_assert_send_sync
(
)
{
fn
_assert_send_sync
<
T
:
Send
+
Sync
>
(
)
{
}
_assert_send_sync
:
:
<
read
:
:
DeflateEncoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
read
:
:
DeflateDecoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
read
:
:
ZlibEncoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
read
:
:
ZlibDecoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
read
:
:
GzEncoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
read
:
:
GzDecoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
read
:
:
MultiGzDecoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
write
:
:
DeflateEncoder
<
Vec
<
u8
>
>
>
(
)
;
_assert_send_sync
:
:
<
write
:
:
DeflateDecoder
<
Vec
<
u8
>
>
>
(
)
;
_assert_send_sync
:
:
<
write
:
:
ZlibEncoder
<
Vec
<
u8
>
>
>
(
)
;
_assert_send_sync
:
:
<
write
:
:
ZlibDecoder
<
Vec
<
u8
>
>
>
(
)
;
_assert_send_sync
:
:
<
write
:
:
GzEncoder
<
Vec
<
u8
>
>
>
(
)
;
}
#
[
derive
(
Copy
Clone
)
]
pub
enum
Compression
{
None
=
0
Fast
=
1
Best
=
9
Default
=
6
}
pub
trait
FlateReadExt
:
Read
+
Sized
{
fn
gz_encode
(
self
lvl
:
Compression
)
-
>
read
:
:
GzEncoder
<
Self
>
{
read
:
:
GzEncoder
:
:
new
(
self
lvl
)
}
fn
gz_decode
(
self
)
-
>
io
:
:
Result
<
read
:
:
GzDecoder
<
Self
>
>
{
read
:
:
GzDecoder
:
:
new
(
self
)
}
fn
zlib_encode
(
self
lvl
:
Compression
)
-
>
read
:
:
ZlibEncoder
<
Self
>
{
read
:
:
ZlibEncoder
:
:
new
(
self
lvl
)
}
fn
zlib_decode
(
self
)
-
>
read
:
:
ZlibDecoder
<
Self
>
{
read
:
:
ZlibDecoder
:
:
new
(
self
)
}
fn
deflate_encode
(
self
lvl
:
Compression
)
-
>
read
:
:
DeflateEncoder
<
Self
>
{
read
:
:
DeflateEncoder
:
:
new
(
self
lvl
)
}
fn
deflate_decode
(
self
)
-
>
read
:
:
DeflateDecoder
<
Self
>
{
read
:
:
DeflateDecoder
:
:
new
(
self
)
}
}
pub
trait
FlateWriteExt
:
Write
+
Sized
{
fn
gz_encode
(
self
lvl
:
Compression
)
-
>
write
:
:
GzEncoder
<
Self
>
{
write
:
:
GzEncoder
:
:
new
(
self
lvl
)
}
fn
zlib_encode
(
self
lvl
:
Compression
)
-
>
write
:
:
ZlibEncoder
<
Self
>
{
write
:
:
ZlibEncoder
:
:
new
(
self
lvl
)
}
fn
zlib_decode
(
self
)
-
>
write
:
:
ZlibDecoder
<
Self
>
{
write
:
:
ZlibDecoder
:
:
new
(
self
)
}
fn
deflate_encode
(
self
lvl
:
Compression
)
-
>
write
:
:
DeflateEncoder
<
Self
>
{
write
:
:
DeflateEncoder
:
:
new
(
self
lvl
)
}
fn
deflate_decode
(
self
)
-
>
write
:
:
DeflateDecoder
<
Self
>
{
write
:
:
DeflateDecoder
:
:
new
(
self
)
}
}
impl
<
T
:
Read
>
FlateReadExt
for
T
{
}
impl
<
T
:
Write
>
FlateWriteExt
for
T
{
}
#
[
cfg
(
test
)
]
mod
test
{
use
std
:
:
io
:
:
prelude
:
:
*
;
use
{
FlateReadExt
Compression
}
;
#
[
test
]
fn
crazy
(
)
{
let
rdr
=
&
mut
b
"
foobar
"
;
let
mut
res
=
Vec
:
:
new
(
)
;
rdr
.
gz_encode
(
Compression
:
:
Default
)
.
deflate_encode
(
Compression
:
:
Default
)
.
zlib_encode
(
Compression
:
:
Default
)
.
zlib_decode
(
)
.
deflate_decode
(
)
.
gz_decode
(
)
.
unwrap
(
)
.
read_to_end
(
&
mut
res
)
.
unwrap
(
)
;
assert_eq
!
(
res
b
"
foobar
"
)
;
}
}
