#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
flate2
/
0
.
2
"
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
deny
(
missing_debug_implementations
)
]
#
!
[
allow
(
trivial_numeric_casts
)
]
#
!
[
cfg_attr
(
test
deny
(
warnings
)
)
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_auto_cfg
)
)
]
pub
use
crate
:
:
crc
:
:
{
Crc
CrcReader
CrcWriter
}
;
pub
use
crate
:
:
gz
:
:
GzBuilder
;
pub
use
crate
:
:
gz
:
:
GzHeader
;
pub
use
crate
:
:
mem
:
:
{
Compress
CompressError
Decompress
DecompressError
Status
}
;
pub
use
crate
:
:
mem
:
:
{
FlushCompress
FlushDecompress
}
;
mod
bufreader
;
mod
crc
;
mod
deflate
;
mod
ffi
;
mod
gz
;
mod
mem
;
mod
zio
;
mod
zlib
;
pub
mod
read
{
pub
use
crate
:
:
deflate
:
:
read
:
:
DeflateDecoder
;
pub
use
crate
:
:
deflate
:
:
read
:
:
DeflateEncoder
;
pub
use
crate
:
:
gz
:
:
read
:
:
GzDecoder
;
pub
use
crate
:
:
gz
:
:
read
:
:
GzEncoder
;
pub
use
crate
:
:
gz
:
:
read
:
:
MultiGzDecoder
;
pub
use
crate
:
:
zlib
:
:
read
:
:
ZlibDecoder
;
pub
use
crate
:
:
zlib
:
:
read
:
:
ZlibEncoder
;
}
pub
mod
write
{
pub
use
crate
:
:
deflate
:
:
write
:
:
DeflateDecoder
;
pub
use
crate
:
:
deflate
:
:
write
:
:
DeflateEncoder
;
pub
use
crate
:
:
gz
:
:
write
:
:
GzDecoder
;
pub
use
crate
:
:
gz
:
:
write
:
:
GzEncoder
;
pub
use
crate
:
:
gz
:
:
write
:
:
MultiGzDecoder
;
pub
use
crate
:
:
zlib
:
:
write
:
:
ZlibDecoder
;
pub
use
crate
:
:
zlib
:
:
write
:
:
ZlibEncoder
;
}
pub
mod
bufread
{
pub
use
crate
:
:
deflate
:
:
bufread
:
:
DeflateDecoder
;
pub
use
crate
:
:
deflate
:
:
bufread
:
:
DeflateEncoder
;
pub
use
crate
:
:
gz
:
:
bufread
:
:
GzDecoder
;
pub
use
crate
:
:
gz
:
:
bufread
:
:
GzEncoder
;
pub
use
crate
:
:
gz
:
:
bufread
:
:
MultiGzDecoder
;
pub
use
crate
:
:
zlib
:
:
bufread
:
:
ZlibDecoder
;
pub
use
crate
:
:
zlib
:
:
bufread
:
:
ZlibEncoder
;
}
fn
_assert_send_sync
(
)
{
fn
_assert_send_sync
<
T
:
Send
+
Sync
>
(
)
{
}
_assert_send_sync
:
:
<
read
:
:
DeflateEncoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
read
:
:
DeflateDecoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
read
:
:
ZlibEncoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
read
:
:
ZlibDecoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
read
:
:
GzEncoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
read
:
:
GzDecoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
read
:
:
MultiGzDecoder
<
&
[
u8
]
>
>
(
)
;
_assert_send_sync
:
:
<
write
:
:
DeflateEncoder
<
Vec
<
u8
>
>
>
(
)
;
_assert_send_sync
:
:
<
write
:
:
DeflateDecoder
<
Vec
<
u8
>
>
>
(
)
;
_assert_send_sync
:
:
<
write
:
:
ZlibEncoder
<
Vec
<
u8
>
>
>
(
)
;
_assert_send_sync
:
:
<
write
:
:
ZlibDecoder
<
Vec
<
u8
>
>
>
(
)
;
_assert_send_sync
:
:
<
write
:
:
GzEncoder
<
Vec
<
u8
>
>
>
(
)
;
_assert_send_sync
:
:
<
write
:
:
GzDecoder
<
Vec
<
u8
>
>
>
(
)
;
}
#
[
derive
(
Copy
Clone
PartialEq
Eq
Debug
)
]
pub
struct
Compression
(
u32
)
;
impl
Compression
{
pub
const
fn
new
(
level
:
u32
)
-
>
Compression
{
Compression
(
level
)
}
pub
const
fn
none
(
)
-
>
Compression
{
Compression
(
0
)
}
pub
const
fn
fast
(
)
-
>
Compression
{
Compression
(
1
)
}
pub
const
fn
best
(
)
-
>
Compression
{
Compression
(
9
)
}
pub
fn
level
(
&
self
)
-
>
u32
{
self
.
0
}
}
impl
Default
for
Compression
{
fn
default
(
)
-
>
Compression
{
Compression
(
6
)
}
}
#
[
cfg
(
test
)
]
fn
random_bytes
(
)
-
>
impl
Iterator
<
Item
=
u8
>
{
use
rand
:
:
Rng
;
use
std
:
:
iter
;
iter
:
:
repeat
(
(
)
)
.
map
(
|
_
|
rand
:
:
thread_rng
(
)
.
gen
(
)
)
}
