use
std
:
:
io
:
:
prelude
:
:
*
;
use
std
:
:
io
;
use
super
:
:
{
Builder
Header
}
;
use
Compression
;
use
bufreader
:
:
BufReader
;
use
super
:
:
bufread
;
#
[
derive
(
Debug
)
]
pub
struct
GzEncoder
<
R
>
{
inner
:
bufread
:
:
GzEncoder
<
BufReader
<
R
>
>
}
pub
fn
gz_encoder
<
R
:
Read
>
(
inner
:
bufread
:
:
GzEncoder
<
BufReader
<
R
>
>
)
-
>
GzEncoder
<
R
>
{
GzEncoder
{
inner
:
inner
}
}
impl
<
R
:
Read
>
GzEncoder
<
R
>
{
pub
fn
new
(
r
:
R
level
:
Compression
)
-
>
GzEncoder
<
R
>
{
Builder
:
:
new
(
)
.
read
(
r
level
)
}
}
impl
<
R
>
GzEncoder
<
R
>
{
pub
fn
get_ref
(
&
self
)
-
>
&
R
{
self
.
inner
.
get_ref
(
)
.
get_ref
(
)
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
R
{
self
.
inner
.
get_mut
(
)
.
get_mut
(
)
}
pub
fn
into_inner
(
self
)
-
>
R
{
self
.
inner
.
into_inner
(
)
.
into_inner
(
)
}
}
impl
<
R
:
Read
>
Read
for
GzEncoder
<
R
>
{
fn
read
(
&
mut
self
into
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
inner
.
read
(
into
)
}
}
impl
<
R
:
Read
+
Write
>
Write
for
GzEncoder
<
R
>
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
get_mut
(
)
.
write
(
buf
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
get_mut
(
)
.
flush
(
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
GzDecoder
<
R
>
{
inner
:
bufread
:
:
GzDecoder
<
BufReader
<
R
>
>
}
impl
<
R
:
Read
>
GzDecoder
<
R
>
{
pub
fn
new
(
r
:
R
)
-
>
io
:
:
Result
<
GzDecoder
<
R
>
>
{
bufread
:
:
GzDecoder
:
:
new
(
BufReader
:
:
new
(
r
)
)
.
map
(
|
r
|
GzDecoder
{
inner
:
r
}
)
}
}
impl
<
R
>
GzDecoder
<
R
>
{
pub
fn
header
(
&
self
)
-
>
&
Header
{
self
.
inner
.
header
(
)
}
pub
fn
get_ref
(
&
self
)
-
>
&
R
{
self
.
inner
.
get_ref
(
)
.
get_ref
(
)
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
R
{
self
.
inner
.
get_mut
(
)
.
get_mut
(
)
}
pub
fn
into_inner
(
self
)
-
>
R
{
self
.
inner
.
into_inner
(
)
.
into_inner
(
)
}
}
impl
<
R
:
Read
>
Read
for
GzDecoder
<
R
>
{
fn
read
(
&
mut
self
into
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
inner
.
read
(
into
)
}
}
impl
<
R
:
Read
+
Write
>
Write
for
GzDecoder
<
R
>
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
get_mut
(
)
.
write
(
buf
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
get_mut
(
)
.
flush
(
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
MultiGzDecoder
<
R
>
{
inner
:
bufread
:
:
MultiGzDecoder
<
BufReader
<
R
>
>
}
impl
<
R
:
Read
>
MultiGzDecoder
<
R
>
{
pub
fn
new
(
r
:
R
)
-
>
io
:
:
Result
<
MultiGzDecoder
<
R
>
>
{
bufread
:
:
MultiGzDecoder
:
:
new
(
BufReader
:
:
new
(
r
)
)
.
map
(
|
r
|
MultiGzDecoder
{
inner
:
r
}
)
}
}
impl
<
R
>
MultiGzDecoder
<
R
>
{
pub
fn
header
(
&
self
)
-
>
&
Header
{
self
.
inner
.
header
(
)
}
pub
fn
get_ref
(
&
self
)
-
>
&
R
{
self
.
inner
.
get_ref
(
)
.
get_ref
(
)
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
R
{
self
.
inner
.
get_mut
(
)
.
get_mut
(
)
}
pub
fn
into_inner
(
self
)
-
>
R
{
self
.
inner
.
into_inner
(
)
.
into_inner
(
)
}
}
impl
<
R
:
Read
>
Read
for
MultiGzDecoder
<
R
>
{
fn
read
(
&
mut
self
into
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
inner
.
read
(
into
)
}
}
impl
<
R
:
Read
+
Write
>
Write
for
MultiGzDecoder
<
R
>
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
get_mut
(
)
.
write
(
buf
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
get_mut
(
)
.
flush
(
)
}
}
