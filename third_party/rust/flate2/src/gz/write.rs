use
std
:
:
io
:
:
prelude
:
:
*
;
use
std
:
:
io
;
#
[
cfg
(
feature
=
"
tokio
"
)
]
use
futures
:
:
Poll
;
#
[
cfg
(
feature
=
"
tokio
"
)
]
use
tokio_io
:
:
{
AsyncRead
AsyncWrite
}
;
use
super
:
:
Builder
;
use
{
Compress
Compression
}
;
use
crc
:
:
Crc
;
use
zio
;
#
[
derive
(
Debug
)
]
pub
struct
GzEncoder
<
W
:
Write
>
{
inner
:
zio
:
:
Writer
<
W
Compress
>
crc
:
Crc
crc_bytes_written
:
usize
header
:
Vec
<
u8
>
}
pub
fn
gz_encoder
<
W
:
Write
>
(
header
:
Vec
<
u8
>
w
:
W
lvl
:
Compression
)
-
>
GzEncoder
<
W
>
{
GzEncoder
{
inner
:
zio
:
:
Writer
:
:
new
(
w
Compress
:
:
new
(
lvl
false
)
)
crc
:
Crc
:
:
new
(
)
header
:
header
crc_bytes_written
:
0
}
}
impl
<
W
:
Write
>
GzEncoder
<
W
>
{
pub
fn
new
(
w
:
W
level
:
Compression
)
-
>
GzEncoder
<
W
>
{
Builder
:
:
new
(
)
.
write
(
w
level
)
}
pub
fn
get_ref
(
&
self
)
-
>
&
W
{
self
.
inner
.
get_ref
(
)
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
W
{
self
.
inner
.
get_mut
(
)
}
pub
fn
try_finish
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
try
!
(
self
.
write_header
(
)
)
;
try
!
(
self
.
inner
.
finish
(
)
)
;
while
self
.
crc_bytes_written
<
8
{
let
(
sum
amt
)
=
(
self
.
crc
.
sum
(
)
as
u32
self
.
crc
.
amount
(
)
)
;
let
buf
=
[
(
sum
>
>
0
)
as
u8
(
sum
>
>
8
)
as
u8
(
sum
>
>
16
)
as
u8
(
sum
>
>
24
)
as
u8
(
amt
>
>
0
)
as
u8
(
amt
>
>
8
)
as
u8
(
amt
>
>
16
)
as
u8
(
amt
>
>
24
)
as
u8
]
;
let
inner
=
self
.
inner
.
get_mut
(
)
;
let
n
=
try
!
(
inner
.
write
(
&
buf
[
self
.
crc_bytes_written
.
.
]
)
)
;
self
.
crc_bytes_written
+
=
n
;
}
Ok
(
(
)
)
}
pub
fn
finish
(
mut
self
)
-
>
io
:
:
Result
<
W
>
{
try
!
(
self
.
try_finish
(
)
)
;
Ok
(
self
.
inner
.
take_inner
(
)
)
}
fn
write_header
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
while
self
.
header
.
len
(
)
>
0
{
let
n
=
try
!
(
self
.
inner
.
get_mut
(
)
.
write
(
&
self
.
header
)
)
;
self
.
header
.
drain
(
.
.
n
)
;
}
Ok
(
(
)
)
}
}
impl
<
W
:
Write
>
Write
for
GzEncoder
<
W
>
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
assert_eq
!
(
self
.
crc_bytes_written
0
)
;
try
!
(
self
.
write_header
(
)
)
;
let
n
=
try
!
(
self
.
inner
.
write
(
buf
)
)
;
self
.
crc
.
update
(
&
buf
[
.
.
n
]
)
;
Ok
(
n
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
assert_eq
!
(
self
.
crc_bytes_written
0
)
;
try
!
(
self
.
write_header
(
)
)
;
self
.
inner
.
flush
(
)
}
}
#
[
cfg
(
feature
=
"
tokio
"
)
]
impl
<
W
:
AsyncWrite
>
AsyncWrite
for
GzEncoder
<
W
>
{
fn
shutdown
(
&
mut
self
)
-
>
Poll
<
(
)
io
:
:
Error
>
{
try_nb
!
(
self
.
try_finish
(
)
)
;
self
.
get_mut
(
)
.
shutdown
(
)
}
}
impl
<
R
:
Read
+
Write
>
Read
for
GzEncoder
<
R
>
{
fn
read
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
get_mut
(
)
.
read
(
buf
)
}
}
#
[
cfg
(
feature
=
"
tokio
"
)
]
impl
<
R
:
AsyncRead
+
AsyncWrite
>
AsyncRead
for
GzEncoder
<
R
>
{
}
impl
<
W
:
Write
>
Drop
for
GzEncoder
<
W
>
{
fn
drop
(
&
mut
self
)
{
if
self
.
inner
.
is_present
(
)
{
let
_
=
self
.
try_finish
(
)
;
}
}
}
