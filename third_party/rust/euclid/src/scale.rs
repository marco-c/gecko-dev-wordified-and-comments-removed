use
crate
:
:
num
:
:
One
;
use
crate
:
:
{
Point2D
Rect
Size2D
Vector2D
}
;
use
core
:
:
cmp
:
:
Ordering
;
use
core
:
:
fmt
;
use
core
:
:
hash
:
:
{
Hash
Hasher
}
;
use
core
:
:
marker
:
:
PhantomData
;
use
core
:
:
ops
:
:
{
Add
Div
Mul
Neg
Sub
}
;
use
num_traits
:
:
NumCast
;
#
[
cfg
(
feature
=
"
serde
"
)
]
use
serde
:
:
{
Deserialize
Serialize
}
;
#
[
repr
(
C
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
Serialize
Deserialize
)
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
bound
(
serialize
=
"
T
:
serde
:
:
Serialize
"
deserialize
=
"
T
:
serde
:
:
Deserialize
<
'
de
>
"
)
)
)
]
pub
struct
Scale
<
T
Src
Dst
>
(
pub
T
#
[
doc
(
hidden
)
]
pub
PhantomData
<
(
Src
Dst
)
>
)
;
impl
<
T
Src
Dst
>
Scale
<
T
Src
Dst
>
{
#
[
inline
]
pub
const
fn
new
(
x
:
T
)
-
>
Self
{
Scale
(
x
PhantomData
)
}
#
[
inline
]
pub
fn
transform_point
(
&
self
point
:
Point2D
<
T
Src
>
)
-
>
Point2D
<
T
:
:
Output
Dst
>
where
T
:
Clone
+
Mul
{
Point2D
:
:
new
(
point
.
x
*
self
.
get
(
)
point
.
y
*
self
.
get
(
)
)
}
#
[
inline
]
pub
fn
transform_vector
(
&
self
vec
:
Vector2D
<
T
Src
>
)
-
>
Vector2D
<
T
:
:
Output
Dst
>
where
T
:
Clone
+
Mul
{
Vector2D
:
:
new
(
vec
.
x
*
self
.
get
(
)
vec
.
y
*
self
.
get
(
)
)
}
#
[
inline
]
pub
fn
transform_size
(
&
self
size
:
Size2D
<
T
Src
>
)
-
>
Size2D
<
T
:
:
Output
Dst
>
where
T
:
Clone
+
Mul
{
Size2D
:
:
new
(
size
.
width
*
self
.
get
(
)
size
.
height
*
self
.
get
(
)
)
}
#
[
inline
]
pub
fn
transform_rect
(
&
self
rect
:
&
Rect
<
T
Src
>
)
-
>
Rect
<
T
:
:
Output
Dst
>
where
T
:
Copy
+
Mul
{
Rect
:
:
new
(
self
.
transform_point
(
rect
.
origin
)
self
.
transform_size
(
rect
.
size
)
)
}
#
[
inline
]
pub
fn
inverse
(
&
self
)
-
>
Scale
<
T
:
:
Output
Dst
Src
>
where
T
:
Clone
+
Neg
{
Scale
:
:
new
(
-
self
.
get
(
)
)
}
#
[
inline
]
pub
fn
is_identity
(
&
self
)
-
>
bool
where
T
:
PartialEq
+
One
{
self
.
0
=
=
T
:
:
one
(
)
}
}
impl
<
T
:
Clone
Src
Dst
>
Scale
<
T
Src
Dst
>
{
#
[
inline
]
pub
fn
get
(
&
self
)
-
>
T
{
self
.
0
.
clone
(
)
}
pub
fn
inv
(
&
self
)
-
>
Scale
<
T
:
:
Output
Dst
Src
>
where
T
:
One
+
Div
{
let
one
:
T
=
One
:
:
one
(
)
;
Scale
:
:
new
(
one
/
self
.
0
.
clone
(
)
)
}
}
impl
<
T
:
NumCast
+
Clone
Src
Dst
>
Scale
<
T
Src
Dst
>
{
#
[
inline
]
pub
fn
cast
<
NewT
:
NumCast
>
(
&
self
)
-
>
Scale
<
NewT
Src
Dst
>
{
self
.
try_cast
(
)
.
unwrap
(
)
}
pub
fn
try_cast
<
NewT
:
NumCast
>
(
&
self
)
-
>
Option
<
Scale
<
NewT
Src
Dst
>
>
{
NumCast
:
:
from
(
self
.
get
(
)
)
.
map
(
Scale
:
:
new
)
}
}
impl
<
Src
Dst
>
Scale
<
f32
Src
Dst
>
{
pub
const
ONE
:
Self
=
Scale
(
1
.
0
PhantomData
)
;
}
impl
<
T
:
Mul
A
B
C
>
Mul
<
Scale
<
T
B
C
>
>
for
Scale
<
T
A
B
>
{
type
Output
=
Scale
<
T
:
:
Output
A
C
>
;
#
[
inline
]
fn
mul
(
self
other
:
Scale
<
T
B
C
>
)
-
>
Self
:
:
Output
{
Scale
:
:
new
(
self
.
0
*
other
.
0
)
}
}
impl
<
T
:
Add
Src
Dst
>
Add
for
Scale
<
T
Src
Dst
>
{
type
Output
=
Scale
<
T
:
:
Output
Src
Dst
>
;
#
[
inline
]
fn
add
(
self
other
:
Scale
<
T
Src
Dst
>
)
-
>
Self
:
:
Output
{
Scale
:
:
new
(
self
.
0
+
other
.
0
)
}
}
impl
<
T
:
Sub
Src
Dst
>
Sub
for
Scale
<
T
Src
Dst
>
{
type
Output
=
Scale
<
T
:
:
Output
Src
Dst
>
;
#
[
inline
]
fn
sub
(
self
other
:
Scale
<
T
Src
Dst
>
)
-
>
Self
:
:
Output
{
Scale
:
:
new
(
self
.
0
-
other
.
0
)
}
}
impl
<
T
:
PartialEq
Src
Dst
>
PartialEq
for
Scale
<
T
Src
Dst
>
{
fn
eq
(
&
self
other
:
&
Scale
<
T
Src
Dst
>
)
-
>
bool
{
self
.
0
=
=
other
.
0
}
}
impl
<
T
:
Eq
Src
Dst
>
Eq
for
Scale
<
T
Src
Dst
>
{
}
impl
<
T
:
PartialOrd
Src
Dst
>
PartialOrd
for
Scale
<
T
Src
Dst
>
{
fn
partial_cmp
(
&
self
other
:
&
Self
)
-
>
Option
<
Ordering
>
{
self
.
0
.
partial_cmp
(
&
other
.
0
)
}
}
impl
<
T
:
Ord
Src
Dst
>
Ord
for
Scale
<
T
Src
Dst
>
{
fn
cmp
(
&
self
other
:
&
Self
)
-
>
Ordering
{
self
.
0
.
cmp
(
&
other
.
0
)
}
}
impl
<
T
:
Clone
Src
Dst
>
Clone
for
Scale
<
T
Src
Dst
>
{
fn
clone
(
&
self
)
-
>
Scale
<
T
Src
Dst
>
{
Scale
:
:
new
(
self
.
get
(
)
)
}
}
impl
<
T
:
Copy
Src
Dst
>
Copy
for
Scale
<
T
Src
Dst
>
{
}
impl
<
T
:
fmt
:
:
Debug
Src
Dst
>
fmt
:
:
Debug
for
Scale
<
T
Src
Dst
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
0
.
fmt
(
f
)
}
}
impl
<
T
:
fmt
:
:
Display
Src
Dst
>
fmt
:
:
Display
for
Scale
<
T
Src
Dst
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
0
.
fmt
(
f
)
}
}
impl
<
T
:
Default
Src
Dst
>
Default
for
Scale
<
T
Src
Dst
>
{
fn
default
(
)
-
>
Self
{
Self
:
:
new
(
T
:
:
default
(
)
)
}
}
impl
<
T
:
Hash
Src
Dst
>
Hash
for
Scale
<
T
Src
Dst
>
{
fn
hash
<
H
:
Hasher
>
(
&
self
state
:
&
mut
H
)
{
self
.
0
.
hash
(
state
)
}
}
impl
<
T
:
One
Src
Dst
>
One
for
Scale
<
T
Src
Dst
>
{
#
[
inline
]
fn
one
(
)
-
>
Self
{
Scale
:
:
new
(
T
:
:
one
(
)
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
Scale
;
enum
Inch
{
}
enum
Cm
{
}
enum
Mm
{
}
#
[
test
]
fn
test_scale
(
)
{
let
mm_per_inch
:
Scale
<
f32
Inch
Mm
>
=
Scale
:
:
new
(
25
.
4
)
;
let
cm_per_mm
:
Scale
<
f32
Mm
Cm
>
=
Scale
:
:
new
(
0
.
1
)
;
let
mm_per_cm
:
Scale
<
f32
Cm
Mm
>
=
cm_per_mm
.
inv
(
)
;
assert_eq
!
(
mm_per_cm
.
get
(
)
10
.
0
)
;
let
one
:
Scale
<
f32
Mm
Mm
>
=
cm_per_mm
*
mm_per_cm
;
assert_eq
!
(
one
.
get
(
)
1
.
0
)
;
let
one
:
Scale
<
f32
Cm
Cm
>
=
mm_per_cm
*
cm_per_mm
;
assert_eq
!
(
one
.
get
(
)
1
.
0
)
;
let
cm_per_inch
:
Scale
<
f32
Inch
Cm
>
=
mm_per_inch
*
cm_per_mm
;
assert_eq
!
(
cm_per_inch
Scale
:
:
new
(
2
.
54
)
)
;
let
a
:
Scale
<
isize
Inch
Inch
>
=
Scale
:
:
new
(
2
)
;
let
b
:
Scale
<
isize
Inch
Inch
>
=
Scale
:
:
new
(
3
)
;
assert_ne
!
(
a
b
)
;
assert_eq
!
(
a
a
.
clone
(
)
)
;
assert_eq
!
(
a
.
clone
(
)
+
b
.
clone
(
)
Scale
:
:
new
(
5
)
)
;
assert_eq
!
(
a
-
b
Scale
:
:
new
(
-
1
)
)
;
}
}
