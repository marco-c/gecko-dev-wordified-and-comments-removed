use
length
:
:
Length
;
use
num
:
:
Zero
;
use
core
:
:
fmt
;
use
core
:
:
ops
:
:
Add
;
use
core
:
:
marker
:
:
PhantomData
;
use
core
:
:
cmp
:
:
{
Eq
PartialEq
}
;
use
core
:
:
hash
:
:
{
Hash
}
;
#
[
cfg
(
feature
=
"
serde
"
)
]
use
serde
:
:
{
Deserialize
Serialize
}
;
#
[
repr
(
C
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
Serialize
Deserialize
)
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
bound
(
serialize
=
"
T
:
Serialize
"
deserialize
=
"
T
:
Deserialize
<
'
de
>
"
)
)
)
]
pub
struct
SideOffsets2D
<
T
U
>
{
pub
top
:
T
pub
right
:
T
pub
bottom
:
T
pub
left
:
T
#
[
doc
(
hidden
)
]
pub
_unit
:
PhantomData
<
U
>
}
impl
<
T
:
Copy
U
>
Copy
for
SideOffsets2D
<
T
U
>
{
}
impl
<
T
:
Clone
U
>
Clone
for
SideOffsets2D
<
T
U
>
{
fn
clone
(
&
self
)
-
>
Self
{
SideOffsets2D
{
top
:
self
.
top
.
clone
(
)
right
:
self
.
right
.
clone
(
)
bottom
:
self
.
bottom
.
clone
(
)
left
:
self
.
left
.
clone
(
)
_unit
:
PhantomData
}
}
}
impl
<
T
U
>
Eq
for
SideOffsets2D
<
T
U
>
where
T
:
Eq
{
}
impl
<
T
U
>
PartialEq
for
SideOffsets2D
<
T
U
>
where
T
:
PartialEq
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
self
.
top
=
=
other
.
top
&
&
self
.
right
=
=
other
.
right
&
&
self
.
bottom
=
=
other
.
bottom
&
&
self
.
left
=
=
other
.
left
}
}
impl
<
T
U
>
Hash
for
SideOffsets2D
<
T
U
>
where
T
:
Hash
{
fn
hash
<
H
:
:
:
core
:
:
hash
:
:
Hasher
>
(
&
self
h
:
&
mut
H
)
{
self
.
top
.
hash
(
h
)
;
self
.
right
.
hash
(
h
)
;
self
.
bottom
.
hash
(
h
)
;
self
.
left
.
hash
(
h
)
;
}
}
impl
<
T
:
fmt
:
:
Debug
U
>
fmt
:
:
Debug
for
SideOffsets2D
<
T
U
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
(
{
:
?
}
{
:
?
}
{
:
?
}
{
:
?
}
)
"
self
.
top
self
.
right
self
.
bottom
self
.
left
)
}
}
impl
<
T
:
Default
U
>
Default
for
SideOffsets2D
<
T
U
>
{
fn
default
(
)
-
>
Self
{
SideOffsets2D
{
top
:
Default
:
:
default
(
)
right
:
Default
:
:
default
(
)
bottom
:
Default
:
:
default
(
)
left
:
Default
:
:
default
(
)
_unit
:
PhantomData
}
}
}
impl
<
T
:
Copy
U
>
SideOffsets2D
<
T
U
>
{
pub
fn
new
(
top
:
T
right
:
T
bottom
:
T
left
:
T
)
-
>
Self
{
SideOffsets2D
{
top
right
bottom
left
_unit
:
PhantomData
}
}
pub
fn
from_lengths
(
top
:
Length
<
T
U
>
right
:
Length
<
T
U
>
bottom
:
Length
<
T
U
>
left
:
Length
<
T
U
>
)
-
>
Self
{
SideOffsets2D
:
:
new
(
top
.
0
right
.
0
bottom
.
0
left
.
0
)
}
pub
fn
new_all_same
(
all
:
T
)
-
>
Self
{
SideOffsets2D
:
:
new
(
all
all
all
all
)
}
pub
fn
from_length_all_same
(
all
:
Length
<
T
U
>
)
-
>
Self
{
SideOffsets2D
:
:
new_all_same
(
all
.
0
)
}
}
impl
<
T
U
>
SideOffsets2D
<
T
U
>
where
T
:
Add
<
T
Output
=
T
>
+
Copy
{
pub
fn
horizontal
(
&
self
)
-
>
T
{
self
.
left
+
self
.
right
}
pub
fn
vertical
(
&
self
)
-
>
T
{
self
.
top
+
self
.
bottom
}
}
impl
<
T
U
>
Add
for
SideOffsets2D
<
T
U
>
where
T
:
Copy
+
Add
<
T
Output
=
T
>
{
type
Output
=
Self
;
fn
add
(
self
other
:
Self
)
-
>
Self
{
SideOffsets2D
:
:
new
(
self
.
top
+
other
.
top
self
.
right
+
other
.
right
self
.
bottom
+
other
.
bottom
self
.
left
+
other
.
left
)
}
}
impl
<
T
:
Copy
+
Zero
U
>
SideOffsets2D
<
T
U
>
{
pub
fn
zero
(
)
-
>
Self
{
SideOffsets2D
:
:
new
(
Zero
:
:
zero
(
)
Zero
:
:
zero
(
)
Zero
:
:
zero
(
)
Zero
:
:
zero
(
)
)
}
}
