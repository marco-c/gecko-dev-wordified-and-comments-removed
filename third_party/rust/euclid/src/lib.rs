#
!
[
cfg_attr
(
feature
=
"
unstable
"
feature
(
fn_must_use
)
)
]
#
!
[
cfg_attr
(
not
(
test
)
no_std
)
]
#
[
cfg
(
feature
=
"
serde
"
)
]
#
[
macro_use
]
extern
crate
serde
;
#
[
cfg
(
feature
=
"
mint
"
)
]
pub
extern
crate
mint
;
#
[
macro_use
]
extern
crate
euclid_macros
;
extern
crate
num_traits
;
#
[
cfg
(
test
)
]
extern
crate
rand
;
#
[
cfg
(
test
)
]
use
std
as
core
;
pub
use
box2d
:
:
{
TypedBox2D
Box2D
}
;
pub
use
length
:
:
Length
;
pub
use
scale
:
:
TypedScale
;
pub
use
transform2d
:
:
{
Transform2D
TypedTransform2D
}
;
pub
use
transform3d
:
:
{
Transform3D
TypedTransform3D
}
;
pub
use
point
:
:
{
Point2D
Point3D
TypedPoint2D
TypedPoint3D
point2
point3
}
;
pub
use
vector
:
:
{
TypedVector2D
TypedVector3D
Vector2D
Vector3D
vec2
vec3
}
;
pub
use
vector
:
:
{
BoolVector2D
BoolVector3D
bvec2
bvec3
}
;
pub
use
homogen
:
:
HomogeneousVector
;
pub
use
rect
:
:
{
rect
Rect
TypedRect
}
;
pub
use
rigid
:
:
{
RigidTransform3D
TypedRigidTransform3D
}
;
pub
use
box3d
:
:
{
box3d
Box3D
TypedBox3D
}
;
pub
use
translation
:
:
{
TypedTranslation2D
TypedTranslation3D
}
;
pub
use
rotation
:
:
{
Angle
Rotation2D
Rotation3D
TypedRotation2D
TypedRotation3D
}
;
pub
use
side_offsets
:
:
{
SideOffsets2D
TypedSideOffsets2D
}
;
pub
use
size
:
:
{
Size2D
TypedSize2D
size2
}
;
pub
use
trig
:
:
Trig
;
#
[
macro_use
]
mod
macros
;
pub
mod
approxeq
;
pub
mod
approxord
;
mod
box2d
;
mod
homogen
;
pub
mod
num
;
mod
length
;
mod
point
;
mod
rect
;
mod
rigid
;
mod
rotation
;
mod
scale
;
mod
side_offsets
;
mod
size
;
mod
transform2d
;
mod
transform3d
;
mod
translation
;
mod
trig
;
mod
vector
;
mod
box3d
;
#
[
derive
(
Clone
Copy
Debug
Default
PartialEq
Eq
PartialOrd
Ord
Hash
)
]
pub
struct
UnknownUnit
;
#
[
deprecated
]
pub
type
Matrix2D
<
T
>
=
Transform2D
<
T
>
;
#
[
deprecated
]
pub
type
TypedMatrix2D
<
T
Src
Dst
>
=
TypedTransform2D
<
T
Src
Dst
>
;
#
[
deprecated
]
pub
type
Matrix4D
<
T
>
=
Transform3D
<
T
>
;
#
[
deprecated
]
pub
type
TypedMatrix4D
<
T
Src
Dst
>
=
TypedTransform3D
<
T
Src
Dst
>
;
#
[
deprecated
]
pub
type
ScaleFactor
<
T
Src
Dst
>
=
TypedScale
<
T
Src
Dst
>
;
#
[
deprecated
]
pub
use
Angle
as
Radians
;
