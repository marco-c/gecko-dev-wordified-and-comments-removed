#
!
[
cfg_attr
(
test
deny
(
warnings
)
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
mod
coreprovider
{
extern
crate
core
;
pub
use
core
:
:
{
fmt
cmp
}
;
}
#
[
cfg
(
feature
=
"
std
"
)
]
mod
coreprovider
{
pub
use
std
:
:
{
fmt
cmp
error
}
;
}
use
coreprovider
:
:
*
;
#
[
derive
(
Copy
)
]
pub
enum
Void
{
}
impl
Clone
for
Void
{
fn
clone
(
&
self
)
-
>
Void
{
unreachable
(
*
self
)
}
}
impl
fmt
:
:
Debug
for
Void
{
fn
fmt
(
&
self
_
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
unreachable
(
*
self
)
}
}
impl
fmt
:
:
Display
for
Void
{
fn
fmt
(
&
self
_
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
unreachable
(
*
self
)
}
}
impl
<
T
>
cmp
:
:
PartialEq
<
T
>
for
Void
{
fn
eq
(
&
self
_
:
&
T
)
-
>
bool
{
unreachable
(
*
self
)
}
}
impl
<
T
>
cmp
:
:
PartialOrd
<
T
>
for
Void
{
fn
partial_cmp
(
&
self
_
:
&
T
)
-
>
Option
<
cmp
:
:
Ordering
>
{
unreachable
(
*
self
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
error
:
:
Error
for
Void
{
fn
description
(
&
self
)
-
>
&
str
{
unreachable
(
*
self
)
}
fn
cause
(
&
self
)
-
>
Option
<
&
error
:
:
Error
>
{
unreachable
(
*
self
)
}
}
#
[
inline
(
always
)
]
pub
fn
unreachable
(
x
:
Void
)
-
>
!
{
match
x
{
}
}
pub
trait
ResultVoidExt
<
T
>
:
Sized
{
fn
void_unwrap
(
self
)
-
>
T
;
}
impl
<
T
>
ResultVoidExt
<
T
>
for
Result
<
T
Void
>
{
#
[
inline
]
fn
void_unwrap
(
self
)
-
>
T
{
match
self
{
Ok
(
val
)
=
>
val
Err
(
e
)
=
>
unreachable
(
e
)
}
}
}
pub
trait
ResultVoidErrExt
<
E
>
:
Sized
{
fn
void_unwrap_err
(
self
)
-
>
E
;
}
impl
<
E
>
ResultVoidErrExt
<
E
>
for
Result
<
Void
E
>
{
#
[
inline
]
fn
void_unwrap_err
(
self
)
-
>
E
{
match
self
{
Ok
(
v
)
=
>
unreachable
(
v
)
Err
(
e
)
=
>
e
}
}
}
