use
pool
:
:
{
self
Pool
Lifecycle
MAX_FUTURES
}
;
use
task
:
:
Task
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
sync
:
:
atomic
:
:
Ordering
:
:
{
AcqRel
Acquire
}
;
use
tokio_executor
:
:
{
self
SpawnError
}
;
use
futures
:
:
{
future
Future
}
;
#
[
cfg
(
feature
=
"
unstable
-
futures
"
)
]
use
futures2
;
#
[
cfg
(
feature
=
"
unstable
-
futures
"
)
]
use
futures2_wake
:
:
{
into_waker
Futures2Wake
}
;
#
[
derive
(
Debug
)
]
pub
struct
Sender
{
pub
(
crate
)
inner
:
Arc
<
Pool
>
}
impl
Sender
{
pub
fn
spawn
<
F
>
(
&
self
future
:
F
)
-
>
Result
<
(
)
SpawnError
>
where
F
:
Future
<
Item
=
(
)
Error
=
(
)
>
+
Send
+
'
static
{
let
mut
s
=
self
;
tokio_executor
:
:
Executor
:
:
spawn
(
&
mut
s
Box
:
:
new
(
future
)
)
}
fn
prepare_for_spawn
(
&
self
)
-
>
Result
<
(
)
SpawnError
>
{
let
mut
state
:
pool
:
:
State
=
self
.
inner
.
state
.
load
(
Acquire
)
.
into
(
)
;
loop
{
let
mut
next
=
state
;
if
next
.
num_futures
(
)
=
=
MAX_FUTURES
{
return
Err
(
SpawnError
:
:
at_capacity
(
)
)
;
}
if
next
.
lifecycle
(
)
=
=
Lifecycle
:
:
ShutdownNow
{
return
Err
(
SpawnError
:
:
shutdown
(
)
)
;
}
next
.
inc_num_futures
(
)
;
let
actual
=
self
.
inner
.
state
.
compare_and_swap
(
state
.
into
(
)
next
.
into
(
)
AcqRel
)
.
into
(
)
;
if
actual
=
=
state
{
trace
!
(
"
execute
;
count
=
{
:
?
}
"
next
.
num_futures
(
)
)
;
break
;
}
state
=
actual
;
}
Ok
(
(
)
)
}
}
impl
tokio_executor
:
:
Executor
for
Sender
{
fn
status
(
&
self
)
-
>
Result
<
(
)
tokio_executor
:
:
SpawnError
>
{
let
s
=
self
;
tokio_executor
:
:
Executor
:
:
status
(
&
s
)
}
fn
spawn
(
&
mut
self
future
:
Box
<
Future
<
Item
=
(
)
Error
=
(
)
>
+
Send
>
)
-
>
Result
<
(
)
SpawnError
>
{
let
mut
s
=
&
*
self
;
tokio_executor
:
:
Executor
:
:
spawn
(
&
mut
s
future
)
}
#
[
cfg
(
feature
=
"
unstable
-
futures
"
)
]
fn
spawn2
(
&
mut
self
f
:
Task2
)
-
>
Result
<
(
)
futures2
:
:
executor
:
:
SpawnError
>
{
futures2
:
:
executor
:
:
Executor
:
:
spawn
(
self
f
)
}
}
impl
<
'
a
>
tokio_executor
:
:
Executor
for
&
'
a
Sender
{
fn
status
(
&
self
)
-
>
Result
<
(
)
tokio_executor
:
:
SpawnError
>
{
let
state
:
pool
:
:
State
=
self
.
inner
.
state
.
load
(
Acquire
)
.
into
(
)
;
if
state
.
num_futures
(
)
=
=
MAX_FUTURES
{
return
Err
(
SpawnError
:
:
at_capacity
(
)
)
;
}
if
state
.
lifecycle
(
)
=
=
Lifecycle
:
:
ShutdownNow
{
return
Err
(
SpawnError
:
:
shutdown
(
)
)
;
}
Ok
(
(
)
)
}
fn
spawn
(
&
mut
self
future
:
Box
<
Future
<
Item
=
(
)
Error
=
(
)
>
+
Send
>
)
-
>
Result
<
(
)
SpawnError
>
{
self
.
prepare_for_spawn
(
)
?
;
let
task
=
Arc
:
:
new
(
Task
:
:
new
(
future
)
)
;
self
.
inner
.
submit
(
task
&
self
.
inner
)
;
Ok
(
(
)
)
}
#
[
cfg
(
feature
=
"
unstable
-
futures
"
)
]
fn
spawn2
(
&
mut
self
f
:
Task2
)
-
>
Result
<
(
)
futures2
:
:
executor
:
:
SpawnError
>
{
futures2
:
:
executor
:
:
Executor
:
:
spawn
(
self
f
)
}
}
impl
<
T
>
future
:
:
Executor
<
T
>
for
Sender
where
T
:
Future
<
Item
=
(
)
Error
=
(
)
>
+
Send
+
'
static
{
fn
execute
(
&
self
future
:
T
)
-
>
Result
<
(
)
future
:
:
ExecuteError
<
T
>
>
{
if
let
Err
(
e
)
=
tokio_executor
:
:
Executor
:
:
status
(
self
)
{
let
kind
=
if
e
.
is_at_capacity
(
)
{
future
:
:
ExecuteErrorKind
:
:
NoCapacity
}
else
{
future
:
:
ExecuteErrorKind
:
:
Shutdown
}
;
return
Err
(
future
:
:
ExecuteError
:
:
new
(
kind
future
)
)
;
}
let
_
=
self
.
spawn
(
future
)
;
Ok
(
(
)
)
}
}
#
[
cfg
(
feature
=
"
unstable
-
futures
"
)
]
type
Task2
=
Box
<
futures2
:
:
Future
<
Item
=
(
)
Error
=
futures2
:
:
Never
>
+
Send
>
;
#
[
cfg
(
feature
=
"
unstable
-
futures
"
)
]
impl
futures2
:
:
executor
:
:
Executor
for
Sender
{
fn
spawn
(
&
mut
self
f
:
Task2
)
-
>
Result
<
(
)
futures2
:
:
executor
:
:
SpawnError
>
{
let
mut
s
=
&
*
self
;
futures2
:
:
executor
:
:
Executor
:
:
spawn
(
&
mut
s
f
)
}
fn
status
(
&
self
)
-
>
Result
<
(
)
futures2
:
:
executor
:
:
SpawnError
>
{
let
s
=
&
*
self
;
futures2
:
:
executor
:
:
Executor
:
:
status
(
&
s
)
}
}
#
[
cfg
(
feature
=
"
unstable
-
futures
"
)
]
impl
<
'
a
>
futures2
:
:
executor
:
:
Executor
for
&
'
a
Sender
{
fn
spawn
(
&
mut
self
f
:
Task2
)
-
>
Result
<
(
)
futures2
:
:
executor
:
:
SpawnError
>
{
self
.
prepare_for_spawn
(
)
.
map_err
(
|
_
|
futures2
:
:
executor
:
:
SpawnError
:
:
shutdown
(
)
)
?
;
let
task
=
Task
:
:
new2
(
f
|
id
|
into_waker
(
Arc
:
:
new
(
Futures2Wake
:
:
new
(
id
&
self
.
inner
)
)
)
)
;
self
.
inner
.
submit
(
task
&
self
.
inner
)
;
Ok
(
(
)
)
}
fn
status
(
&
self
)
-
>
Result
<
(
)
futures2
:
:
executor
:
:
SpawnError
>
{
tokio_executor
:
:
Executor
:
:
status
(
self
)
.
map_err
(
|
_
|
futures2
:
:
executor
:
:
SpawnError
:
:
shutdown
(
)
)
}
}
impl
Clone
for
Sender
{
#
[
inline
]
fn
clone
(
&
self
)
-
>
Sender
{
let
inner
=
self
.
inner
.
clone
(
)
;
Sender
{
inner
}
}
}
