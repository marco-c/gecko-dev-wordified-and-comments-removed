use
builder
:
:
Builder
;
use
pool
:
:
Pool
;
use
sender
:
:
Sender
;
use
shutdown
:
:
Shutdown
;
use
futures
:
:
Future
;
#
[
derive
(
Debug
)
]
pub
struct
ThreadPool
{
pub
(
crate
)
inner
:
Option
<
Sender
>
}
impl
ThreadPool
{
pub
fn
new
(
)
-
>
ThreadPool
{
Builder
:
:
new
(
)
.
build
(
)
}
pub
fn
spawn
<
F
>
(
&
self
future
:
F
)
where
F
:
Future
<
Item
=
(
)
Error
=
(
)
>
+
Send
+
'
static
{
self
.
sender
(
)
.
spawn
(
future
)
.
unwrap
(
)
;
}
pub
fn
sender
(
&
self
)
-
>
&
Sender
{
self
.
inner
.
as_ref
(
)
.
unwrap
(
)
}
pub
fn
sender_mut
(
&
mut
self
)
-
>
&
mut
Sender
{
self
.
inner
.
as_mut
(
)
.
unwrap
(
)
}
pub
fn
shutdown_on_idle
(
mut
self
)
-
>
Shutdown
{
self
.
inner
(
)
.
shutdown
(
false
false
)
;
Shutdown
{
inner
:
self
.
inner
.
take
(
)
.
unwrap
(
)
}
}
pub
fn
shutdown
(
mut
self
)
-
>
Shutdown
{
self
.
inner
(
)
.
shutdown
(
true
false
)
;
Shutdown
{
inner
:
self
.
inner
.
take
(
)
.
unwrap
(
)
}
}
pub
fn
shutdown_now
(
mut
self
)
-
>
Shutdown
{
self
.
inner
(
)
.
shutdown
(
true
true
)
;
Shutdown
{
inner
:
self
.
inner
.
take
(
)
.
unwrap
(
)
}
}
fn
inner
(
&
self
)
-
>
&
Pool
{
&
*
self
.
inner
.
as_ref
(
)
.
unwrap
(
)
.
inner
}
}
impl
Drop
for
ThreadPool
{
fn
drop
(
&
mut
self
)
{
if
let
Some
(
sender
)
=
self
.
inner
.
take
(
)
{
sender
.
inner
.
shutdown
(
true
true
)
;
let
shutdown
=
Shutdown
{
inner
:
sender
}
;
let
_
=
shutdown
.
wait
(
)
;
}
}
}
