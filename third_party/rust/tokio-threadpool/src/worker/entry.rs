use
park
:
:
{
BoxPark
BoxUnpark
}
;
use
task
:
:
{
Task
Queue
}
;
use
worker
:
:
state
:
:
{
State
PUSHED_MASK
}
;
use
std
:
:
cell
:
:
UnsafeCell
;
use
std
:
:
fmt
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicUsize
Ordering
}
;
use
std
:
:
sync
:
:
atomic
:
:
Ordering
:
:
{
Acquire
AcqRel
Relaxed
}
;
use
deque
;
pub
(
crate
)
struct
WorkerEntry
{
pub
state
:
AtomicUsize
next_sleeper
:
UnsafeCell
<
usize
>
deque
:
deque
:
:
Deque
<
Arc
<
Task
>
>
steal
:
deque
:
:
Stealer
<
Arc
<
Task
>
>
pub
park
:
UnsafeCell
<
BoxPark
>
pub
unpark
:
BoxUnpark
pub
inbound
:
Queue
}
impl
WorkerEntry
{
pub
fn
new
(
park
:
BoxPark
unpark
:
BoxUnpark
)
-
>
Self
{
let
w
=
deque
:
:
Deque
:
:
new
(
)
;
let
s
=
w
.
stealer
(
)
;
WorkerEntry
{
state
:
AtomicUsize
:
:
new
(
State
:
:
default
(
)
.
into
(
)
)
next_sleeper
:
UnsafeCell
:
:
new
(
0
)
deque
:
w
steal
:
s
inbound
:
Queue
:
:
new
(
)
park
:
UnsafeCell
:
:
new
(
park
)
unpark
}
}
pub
fn
load_state
(
&
self
)
-
>
State
{
self
.
state
.
load
(
Acquire
)
.
into
(
)
}
pub
fn
fetch_unset_pushed
(
&
self
ordering
:
Ordering
)
-
>
State
{
self
.
state
.
fetch_and
(
!
PUSHED_MASK
ordering
)
.
into
(
)
}
#
[
inline
]
pub
fn
submit_internal
(
&
self
task
:
Arc
<
Task
>
)
{
self
.
push_internal
(
task
)
;
}
pub
fn
submit_external
(
&
self
task
:
Arc
<
Task
>
mut
state
:
State
)
-
>
bool
{
use
worker
:
:
Lifecycle
:
:
*
;
self
.
push_external
(
task
)
;
loop
{
let
mut
next
=
state
;
next
.
notify
(
)
;
let
actual
=
self
.
state
.
compare_and_swap
(
state
.
into
(
)
next
.
into
(
)
AcqRel
)
.
into
(
)
;
if
state
=
=
actual
{
break
;
}
state
=
actual
;
}
match
state
.
lifecycle
(
)
{
Sleeping
=
>
{
self
.
wakeup
(
)
;
true
}
Shutdown
=
>
false
Running
|
Notified
|
Signaled
=
>
{
true
}
}
}
pub
fn
signal_stop
(
&
self
mut
state
:
State
)
{
use
worker
:
:
Lifecycle
:
:
*
;
loop
{
let
mut
next
=
state
;
match
state
.
lifecycle
(
)
{
Shutdown
=
>
{
return
;
}
Running
|
Sleeping
=
>
{
}
Notified
|
Signaled
=
>
{
return
;
}
}
next
.
set_lifecycle
(
Signaled
)
;
let
actual
=
self
.
state
.
compare_and_swap
(
state
.
into
(
)
next
.
into
(
)
AcqRel
)
.
into
(
)
;
if
actual
=
=
state
{
break
;
}
state
=
actual
;
}
self
.
wakeup
(
)
;
}
pub
fn
pop_task
(
&
self
)
-
>
deque
:
:
Steal
<
Arc
<
Task
>
>
{
self
.
deque
.
steal
(
)
}
pub
fn
steal_task
(
&
self
)
-
>
deque
:
:
Steal
<
Arc
<
Task
>
>
{
self
.
steal
.
steal
(
)
}
pub
fn
drain_tasks
(
&
self
)
{
while
let
Some
(
_
)
=
self
.
deque
.
pop
(
)
{
}
}
#
[
inline
]
fn
push_external
(
&
self
task
:
Arc
<
Task
>
)
{
self
.
inbound
.
push
(
task
)
;
}
#
[
inline
]
pub
fn
push_internal
(
&
self
task
:
Arc
<
Task
>
)
{
self
.
deque
.
push
(
task
)
;
}
#
[
inline
]
pub
fn
wakeup
(
&
self
)
{
self
.
unpark
.
unpark
(
)
;
}
#
[
inline
]
pub
fn
next_sleeper
(
&
self
)
-
>
usize
{
unsafe
{
*
self
.
next_sleeper
.
get
(
)
}
}
#
[
inline
]
pub
fn
set_next_sleeper
(
&
self
val
:
usize
)
{
unsafe
{
*
self
.
next_sleeper
.
get
(
)
=
val
;
}
}
}
impl
fmt
:
:
Debug
for
WorkerEntry
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
.
debug_struct
(
"
WorkerEntry
"
)
.
field
(
"
state
"
&
self
.
state
.
load
(
Relaxed
)
)
.
field
(
"
next_sleeper
"
&
"
UnsafeCell
<
usize
>
"
)
.
field
(
"
deque
"
&
self
.
deque
)
.
field
(
"
steal
"
&
self
.
steal
)
.
field
(
"
park
"
&
"
UnsafeCell
<
BoxPark
>
"
)
.
field
(
"
unpark
"
&
"
BoxUnpark
"
)
.
field
(
"
inbound
"
&
self
.
inbound
)
.
finish
(
)
}
}
