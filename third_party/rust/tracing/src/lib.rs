#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_cfg
)
deny
(
broken_intra_doc_links
)
)
]
#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
tracing
/
0
.
1
.
21
"
)
]
#
!
[
doc
(
html_logo_url
=
"
https
:
/
/
raw
.
githubusercontent
.
com
/
tokio
-
rs
/
tracing
/
master
/
assets
/
logo
-
type
.
png
"
issue_tracker_base_url
=
"
https
:
/
/
github
.
com
/
tokio
-
rs
/
tracing
/
issues
/
"
)
]
#
!
[
warn
(
missing_debug_implementations
missing_docs
rust_2018_idioms
unreachable_pub
bad_style
const_err
dead_code
improper_ctypes
non_shorthand_field_patterns
no_mangle_generic_items
overflowing_literals
path_statements
patterns_in_fns_without_body
private_in_public
unconditional_recursion
unused
unused_allocation
unused_comparisons
unused_parens
while_true
)
]
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
extern
crate
alloc
;
#
[
macro_use
]
extern
crate
cfg_if
;
#
[
cfg
(
feature
=
"
log
"
)
]
#
[
doc
(
hidden
)
]
pub
use
log
;
#
[
allow
(
unused_imports
)
]
#
[
doc
(
hidden
)
]
use
tracing_core
:
:
*
;
#
[
doc
(
inline
)
]
pub
use
self
:
:
instrument
:
:
Instrument
;
pub
use
self
:
:
{
dispatcher
:
:
Dispatch
event
:
:
Event
field
:
:
Value
subscriber
:
:
Subscriber
}
;
#
[
doc
(
hidden
)
]
pub
use
self
:
:
span
:
:
Id
;
#
[
doc
(
hidden
)
]
pub
use
tracing_core
:
:
{
callsite
:
:
{
self
Callsite
}
metadata
}
;
pub
use
tracing_core
:
:
{
event
Level
Metadata
}
;
#
[
doc
(
inline
)
]
pub
use
self
:
:
span
:
:
Span
;
#
[
cfg
(
feature
=
"
attributes
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
attributes
"
)
)
)
]
#
[
doc
(
inline
)
]
pub
use
tracing_attributes
:
:
instrument
;
#
[
macro_use
]
mod
macros
;
pub
mod
dispatcher
;
pub
mod
field
;
pub
mod
instrument
;
pub
mod
level_filters
;
pub
mod
span
;
pub
(
crate
)
mod
stdlib
;
pub
mod
subscriber
;
#
[
doc
(
hidden
)
]
pub
mod
__macro_support
{
pub
use
crate
:
:
callsite
:
:
Callsite
;
use
crate
:
:
stdlib
:
:
sync
:
:
atomic
:
:
{
AtomicUsize
Ordering
}
;
use
crate
:
:
{
subscriber
:
:
Interest
Metadata
}
;
use
tracing_core
:
:
Once
;
#
[
derive
(
Debug
)
]
pub
struct
MacroCallsite
{
interest
:
AtomicUsize
meta
:
&
'
static
Metadata
<
'
static
>
registration
:
Once
}
impl
MacroCallsite
{
pub
const
fn
new
(
meta
:
&
'
static
Metadata
<
'
static
>
)
-
>
Self
{
Self
{
interest
:
AtomicUsize
:
:
new
(
0xDEADFACED
)
meta
registration
:
Once
:
:
new
(
)
}
}
#
[
inline
(
never
)
]
#
[
cold
]
pub
fn
register
(
&
'
static
self
)
-
>
Interest
{
self
.
registration
.
call_once
(
|
|
crate
:
:
callsite
:
:
register
(
self
)
)
;
match
self
.
interest
.
load
(
Ordering
:
:
Relaxed
)
{
0
=
>
Interest
:
:
never
(
)
2
=
>
Interest
:
:
always
(
)
_
=
>
Interest
:
:
sometimes
(
)
}
}
#
[
inline
]
pub
fn
interest
(
&
'
static
self
)
-
>
Interest
{
match
self
.
interest
.
load
(
Ordering
:
:
Relaxed
)
{
0
=
>
Interest
:
:
never
(
)
1
=
>
Interest
:
:
sometimes
(
)
2
=
>
Interest
:
:
always
(
)
_
=
>
self
.
register
(
)
}
}
pub
fn
is_enabled
(
&
self
interest
:
Interest
)
-
>
bool
{
interest
.
is_always
(
)
|
|
crate
:
:
dispatcher
:
:
get_default
(
|
default
|
default
.
enabled
(
self
.
meta
)
)
}
#
[
inline
]
#
[
cfg
(
feature
=
"
log
"
)
]
pub
fn
disabled_span
(
&
self
)
-
>
crate
:
:
Span
{
crate
:
:
Span
:
:
new_disabled
(
self
.
meta
)
}
#
[
inline
]
#
[
cfg
(
not
(
feature
=
"
log
"
)
)
]
pub
fn
disabled_span
(
&
self
)
-
>
crate
:
:
Span
{
crate
:
:
Span
:
:
none
(
)
}
}
impl
Callsite
for
MacroCallsite
{
fn
set_interest
(
&
self
interest
:
Interest
)
{
let
interest
=
match
(
)
{
_
if
interest
.
is_never
(
)
=
>
0
_
if
interest
.
is_always
(
)
=
>
2
_
=
>
1
}
;
self
.
interest
.
store
(
interest
Ordering
:
:
SeqCst
)
;
}
#
[
inline
(
always
)
]
fn
metadata
(
&
self
)
-
>
&
Metadata
<
'
static
>
{
&
self
.
meta
}
}
}
mod
sealed
{
pub
trait
Sealed
{
}
}
