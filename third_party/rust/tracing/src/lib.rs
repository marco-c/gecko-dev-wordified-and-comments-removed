#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_cfg
)
deny
(
rustdoc
:
:
broken_intra_doc_links
)
)
]
#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
tracing
/
0
.
1
.
37
"
)
]
#
!
[
doc
(
html_logo_url
=
"
https
:
/
/
raw
.
githubusercontent
.
com
/
tokio
-
rs
/
tracing
/
master
/
assets
/
logo
-
type
.
png
"
issue_tracker_base_url
=
"
https
:
/
/
github
.
com
/
tokio
-
rs
/
tracing
/
issues
/
"
)
]
#
!
[
warn
(
missing_debug_implementations
missing_docs
rust_2018_idioms
unreachable_pub
bad_style
const_err
dead_code
improper_ctypes
non_shorthand_field_patterns
no_mangle_generic_items
overflowing_literals
path_statements
patterns_in_fns_without_body
private_in_public
unconditional_recursion
unused
unused_allocation
unused_comparisons
unused_parens
while_true
)
]
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
extern
crate
alloc
;
#
[
allow
(
unused_imports
)
]
#
[
doc
(
hidden
)
]
use
tracing_core
:
:
*
;
#
[
doc
(
inline
)
]
pub
use
self
:
:
instrument
:
:
Instrument
;
pub
use
self
:
:
{
dispatcher
:
:
Dispatch
event
:
:
Event
field
:
:
Value
subscriber
:
:
Subscriber
}
;
#
[
doc
(
hidden
)
]
pub
use
self
:
:
span
:
:
Id
;
#
[
doc
(
hidden
)
]
pub
use
tracing_core
:
:
{
callsite
:
:
{
self
Callsite
}
metadata
}
;
pub
use
tracing_core
:
:
{
event
Level
Metadata
}
;
#
[
doc
(
inline
)
]
pub
use
self
:
:
span
:
:
Span
;
#
[
cfg
(
feature
=
"
attributes
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
attributes
"
)
)
)
]
#
[
doc
(
inline
)
]
pub
use
tracing_attributes
:
:
instrument
;
#
[
macro_use
]
mod
macros
;
pub
mod
dispatcher
;
pub
mod
field
;
pub
mod
instrument
;
pub
mod
level_filters
;
pub
mod
span
;
pub
(
crate
)
mod
stdlib
;
pub
mod
subscriber
;
#
[
doc
(
hidden
)
]
pub
mod
__macro_support
{
pub
use
crate
:
:
callsite
:
:
Callsite
;
use
crate
:
:
{
subscriber
:
:
Interest
Metadata
}
;
pub
use
core
:
:
concat
;
pub
use
tracing_core
:
:
callsite
:
:
DefaultCallsite
as
MacroCallsite
;
pub
fn
__is_enabled
(
meta
:
&
Metadata
<
'
static
>
interest
:
Interest
)
-
>
bool
{
interest
.
is_always
(
)
|
|
crate
:
:
dispatcher
:
:
get_default
(
|
default
|
default
.
enabled
(
meta
)
)
}
#
[
inline
]
#
[
cfg
(
feature
=
"
log
"
)
]
pub
fn
__disabled_span
(
meta
:
&
'
static
Metadata
<
'
static
>
)
-
>
crate
:
:
Span
{
crate
:
:
Span
:
:
new_disabled
(
meta
)
}
#
[
inline
]
#
[
cfg
(
not
(
feature
=
"
log
"
)
)
]
pub
fn
__disabled_span
(
_
:
&
'
static
Metadata
<
'
static
>
)
-
>
crate
:
:
Span
{
crate
:
:
Span
:
:
none
(
)
}
#
[
cfg
(
feature
=
"
log
"
)
]
pub
fn
__tracing_log
(
meta
:
&
Metadata
<
'
static
>
logger
:
&
'
static
dyn
log
:
:
Log
log_meta
:
log
:
:
Metadata
<
'
_
>
values
:
&
tracing_core
:
:
field
:
:
ValueSet
<
'
_
>
)
{
logger
.
log
(
&
crate
:
:
log
:
:
Record
:
:
builder
(
)
.
file
(
meta
.
file
(
)
)
.
module_path
(
meta
.
module_path
(
)
)
.
line
(
meta
.
line
(
)
)
.
metadata
(
log_meta
)
.
args
(
format_args
!
(
"
{
}
"
crate
:
:
log
:
:
LogValueSet
{
values
is_first
:
true
}
)
)
.
build
(
)
)
;
}
}
#
[
cfg
(
feature
=
"
log
"
)
]
#
[
doc
(
hidden
)
]
pub
mod
log
{
use
core
:
:
fmt
;
pub
use
log
:
:
*
;
use
tracing_core
:
:
field
:
:
{
Field
ValueSet
Visit
}
;
pub
(
crate
)
struct
LogValueSet
<
'
a
>
{
pub
(
crate
)
values
:
&
'
a
ValueSet
<
'
a
>
pub
(
crate
)
is_first
:
bool
}
impl
<
'
a
>
fmt
:
:
Display
for
LogValueSet
<
'
a
>
{
#
[
inline
]
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
struct
LogVisitor
<
'
a
'
b
>
{
f
:
&
'
a
mut
fmt
:
:
Formatter
<
'
b
>
is_first
:
bool
result
:
fmt
:
:
Result
}
impl
Visit
for
LogVisitor
<
'
_
'
_
>
{
fn
record_debug
(
&
mut
self
field
:
&
Field
value
:
&
dyn
fmt
:
:
Debug
)
{
let
res
=
if
self
.
is_first
{
self
.
is_first
=
false
;
if
field
.
name
(
)
=
=
"
message
"
{
write
!
(
self
.
f
"
{
:
?
}
"
value
)
}
else
{
write
!
(
self
.
f
"
{
}
=
{
:
?
}
"
field
.
name
(
)
value
)
}
}
else
{
write
!
(
self
.
f
"
{
}
=
{
:
?
}
"
field
.
name
(
)
value
)
}
;
if
let
Err
(
err
)
=
res
{
self
.
result
=
self
.
result
.
and
(
Err
(
err
)
)
;
}
}
fn
record_str
(
&
mut
self
field
:
&
Field
value
:
&
str
)
{
if
field
.
name
(
)
=
=
"
message
"
{
self
.
record_debug
(
field
&
format_args
!
(
"
{
}
"
value
)
)
}
else
{
self
.
record_debug
(
field
&
value
)
}
}
}
let
mut
visit
=
LogVisitor
{
f
is_first
:
self
.
is_first
result
:
Ok
(
(
)
)
}
;
self
.
values
.
record
(
&
mut
visit
)
;
visit
.
result
}
}
}
mod
sealed
{
pub
trait
Sealed
{
}
}
