pub
use
tracing_core
:
:
field
:
:
*
;
use
crate
:
:
Metadata
;
pub
trait
AsField
:
crate
:
:
sealed
:
:
Sealed
{
fn
as_field
(
&
self
metadata
:
&
Metadata
<
'
_
>
)
-
>
Option
<
Field
>
;
}
impl
AsField
for
Field
{
#
[
inline
]
fn
as_field
(
&
self
metadata
:
&
Metadata
<
'
_
>
)
-
>
Option
<
Field
>
{
if
self
.
callsite
(
)
=
=
metadata
.
callsite
(
)
{
Some
(
self
.
clone
(
)
)
}
else
{
None
}
}
}
impl
<
'
a
>
AsField
for
&
'
a
Field
{
#
[
inline
]
fn
as_field
(
&
self
metadata
:
&
Metadata
<
'
_
>
)
-
>
Option
<
Field
>
{
if
self
.
callsite
(
)
=
=
metadata
.
callsite
(
)
{
Some
(
(
*
self
)
.
clone
(
)
)
}
else
{
None
}
}
}
impl
AsField
for
str
{
#
[
inline
]
fn
as_field
(
&
self
metadata
:
&
Metadata
<
'
_
>
)
-
>
Option
<
Field
>
{
metadata
.
fields
(
)
.
field
(
&
self
)
}
}
impl
crate
:
:
sealed
:
:
Sealed
for
Field
{
}
impl
<
'
a
>
crate
:
:
sealed
:
:
Sealed
for
&
'
a
Field
{
}
impl
crate
:
:
sealed
:
:
Sealed
for
str
{
}
