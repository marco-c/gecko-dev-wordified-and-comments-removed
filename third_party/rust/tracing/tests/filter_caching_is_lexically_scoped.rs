#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
extern
crate
std
;
#
[
macro_use
]
extern
crate
tracing
;
mod
support
;
use
self
:
:
support
:
:
*
;
use
tracing
:
:
Level
;
use
std
:
:
sync
:
:
{
atomic
:
:
{
AtomicUsize
Ordering
}
Arc
}
;
#
[
cfg_attr
(
target_arch
=
"
wasm32
"
wasm_bindgen_test
:
:
wasm_bindgen_test
)
]
#
[
test
]
fn
filter_caching_is_lexically_scoped
(
)
{
pub
fn
my_great_function
(
)
-
>
bool
{
span
!
(
Level
:
:
TRACE
"
emily
"
)
.
in_scope
(
|
|
true
)
}
pub
fn
my_other_function
(
)
-
>
bool
{
span
!
(
Level
:
:
TRACE
"
frank
"
)
.
in_scope
(
|
|
true
)
}
let
count
=
Arc
:
:
new
(
AtomicUsize
:
:
new
(
0
)
)
;
let
count2
=
count
.
clone
(
)
;
let
subscriber
=
subscriber
:
:
mock
(
)
.
with_filter
(
move
|
meta
|
match
meta
.
name
(
)
{
"
emily
"
|
"
frank
"
=
>
{
count2
.
fetch_add
(
1
Ordering
:
:
Relaxed
)
;
true
}
_
=
>
false
}
)
.
run
(
)
;
tracing
:
:
subscriber
:
:
set_global_default
(
subscriber
)
.
unwrap
(
)
;
assert
!
(
my_great_function
(
)
)
;
assert_eq
!
(
count
.
load
(
Ordering
:
:
Relaxed
)
1
)
;
assert
!
(
my_great_function
(
)
)
;
assert_eq
!
(
count
.
load
(
Ordering
:
:
Relaxed
)
1
)
;
assert
!
(
my_other_function
(
)
)
;
assert_eq
!
(
count
.
load
(
Ordering
:
:
Relaxed
)
2
)
;
assert
!
(
my_great_function
(
)
)
;
assert_eq
!
(
count
.
load
(
Ordering
:
:
Relaxed
)
2
)
;
assert
!
(
my_other_function
(
)
)
;
assert_eq
!
(
count
.
load
(
Ordering
:
:
Relaxed
)
2
)
;
assert
!
(
my_great_function
(
)
)
;
assert_eq
!
(
count
.
load
(
Ordering
:
:
Relaxed
)
2
)
;
}
