use
std
:
:
ffi
:
:
{
CStr
CString
}
;
use
std
:
:
borrow
:
:
Cow
;
use
std
:
:
os
:
:
raw
;
use
crate
:
:
Error
;
pub
(
crate
)
fn
cstr_cow_from_bytes
<
'
a
>
(
slice
:
&
'
a
[
u8
]
)
-
>
Result
<
Cow
<
'
a
CStr
>
Error
>
{
static
ZERO
:
raw
:
:
c_char
=
0
;
Ok
(
match
slice
.
last
(
)
{
None
=
>
unsafe
{
Cow
:
:
Borrowed
(
CStr
:
:
from_ptr
(
&
ZERO
)
)
}
Some
(
&
0
)
=
>
Cow
:
:
Borrowed
(
CStr
:
:
from_bytes_with_nul
(
slice
)
.
map_err
(
|
source
|
Error
:
:
CreateCStringWithTrailing
{
source
}
)
?
)
Some
(
_
)
=
>
Cow
:
:
Owned
(
CString
:
:
new
(
slice
)
.
map_err
(
|
source
|
Error
:
:
CreateCString
{
source
}
)
?
)
}
)
}
#
[
inline
]
pub
(
crate
)
fn
ensure_compatible_types
<
T
E
>
(
)
-
>
Result
<
(
)
Error
>
{
if
:
:
std
:
:
mem
:
:
size_of
:
:
<
T
>
(
)
!
=
:
:
std
:
:
mem
:
:
size_of
:
:
<
E
>
(
)
{
Err
(
Error
:
:
IncompatibleSize
)
}
else
{
Ok
(
(
)
)
}
}
