use
std
:
:
convert
:
:
{
TryFrom
TryInto
}
;
use
super
:
:
{
Authority
Parts
PathAndQuery
Scheme
}
;
use
crate
:
:
Uri
;
#
[
derive
(
Debug
)
]
pub
struct
Builder
{
parts
:
Result
<
Parts
crate
:
:
Error
>
}
impl
Builder
{
#
[
inline
]
pub
fn
new
(
)
-
>
Builder
{
Builder
:
:
default
(
)
}
pub
fn
scheme
<
T
>
(
self
scheme
:
T
)
-
>
Self
where
Scheme
:
TryFrom
<
T
>
<
Scheme
as
TryFrom
<
T
>
>
:
:
Error
:
Into
<
crate
:
:
Error
>
{
self
.
map
(
move
|
mut
parts
|
{
let
scheme
=
scheme
.
try_into
(
)
.
map_err
(
Into
:
:
into
)
?
;
parts
.
scheme
=
Some
(
scheme
)
;
Ok
(
parts
)
}
)
}
pub
fn
authority
<
T
>
(
self
auth
:
T
)
-
>
Self
where
Authority
:
TryFrom
<
T
>
<
Authority
as
TryFrom
<
T
>
>
:
:
Error
:
Into
<
crate
:
:
Error
>
{
self
.
map
(
move
|
mut
parts
|
{
let
auth
=
auth
.
try_into
(
)
.
map_err
(
Into
:
:
into
)
?
;
parts
.
authority
=
Some
(
auth
)
;
Ok
(
parts
)
}
)
}
pub
fn
path_and_query
<
T
>
(
self
p_and_q
:
T
)
-
>
Self
where
PathAndQuery
:
TryFrom
<
T
>
<
PathAndQuery
as
TryFrom
<
T
>
>
:
:
Error
:
Into
<
crate
:
:
Error
>
{
self
.
map
(
move
|
mut
parts
|
{
let
p_and_q
=
p_and_q
.
try_into
(
)
.
map_err
(
Into
:
:
into
)
?
;
parts
.
path_and_query
=
Some
(
p_and_q
)
;
Ok
(
parts
)
}
)
}
pub
fn
build
(
self
)
-
>
Result
<
Uri
crate
:
:
Error
>
{
let
parts
=
self
.
parts
?
;
Uri
:
:
from_parts
(
parts
)
.
map_err
(
Into
:
:
into
)
}
fn
map
<
F
>
(
self
func
:
F
)
-
>
Self
where
F
:
FnOnce
(
Parts
)
-
>
Result
<
Parts
crate
:
:
Error
>
{
Builder
{
parts
:
self
.
parts
.
and_then
(
func
)
}
}
}
impl
Default
for
Builder
{
#
[
inline
]
fn
default
(
)
-
>
Builder
{
Builder
{
parts
:
Ok
(
Parts
:
:
default
(
)
)
}
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
build_from_str
(
)
{
let
uri
=
Builder
:
:
new
(
)
.
scheme
(
Scheme
:
:
HTTP
)
.
authority
(
"
hyper
.
rs
"
)
.
path_and_query
(
"
/
foo
?
a
=
1
"
)
.
build
(
)
.
unwrap
(
)
;
assert_eq
!
(
uri
.
scheme_str
(
)
Some
(
"
http
"
)
)
;
assert_eq
!
(
uri
.
authority
(
)
.
unwrap
(
)
.
host
(
)
"
hyper
.
rs
"
)
;
assert_eq
!
(
uri
.
path
(
)
"
/
foo
"
)
;
assert_eq
!
(
uri
.
query
(
)
Some
(
"
a
=
1
"
)
)
;
}
#
[
test
]
fn
build_from_string
(
)
{
for
i
in
1
.
.
10
{
let
uri
=
Builder
:
:
new
(
)
.
path_and_query
(
format
!
(
"
/
foo
?
a
=
{
}
"
i
)
)
.
build
(
)
.
unwrap
(
)
;
let
expected_query
=
format
!
(
"
a
=
{
}
"
i
)
;
assert_eq
!
(
uri
.
path
(
)
"
/
foo
"
)
;
assert_eq
!
(
uri
.
query
(
)
Some
(
expected_query
.
as_str
(
)
)
)
;
}
}
#
[
test
]
fn
build_from_string_ref
(
)
{
for
i
in
1
.
.
10
{
let
p_a_q
=
format
!
(
"
/
foo
?
a
=
{
}
"
i
)
;
let
uri
=
Builder
:
:
new
(
)
.
path_and_query
(
&
p_a_q
)
.
build
(
)
.
unwrap
(
)
;
let
expected_query
=
format
!
(
"
a
=
{
}
"
i
)
;
assert_eq
!
(
uri
.
path
(
)
"
/
foo
"
)
;
assert_eq
!
(
uri
.
query
(
)
Some
(
expected_query
.
as_str
(
)
)
)
;
}
}
}
