use
error_support
:
:
{
ErrorHandling
GetErrorHandling
}
;
#
[
derive
(
Debug
thiserror
:
:
Error
)
]
pub
enum
RelevancyApiError
{
#
[
error
(
"
Unexpected
Error
:
{
reason
}
"
)
]
Unexpected
{
reason
:
String
}
}
#
[
derive
(
Debug
thiserror
:
:
Error
)
]
pub
enum
Error
{
#
[
error
(
"
Error
opening
database
:
{
0
}
"
)
]
OpenDatabase
(
#
[
from
]
sql_support
:
:
open_database
:
:
Error
)
#
[
error
(
"
Sql
error
:
{
0
}
"
)
]
SqlError
(
#
[
from
]
rusqlite
:
:
Error
)
#
[
error
(
"
Error
fetching
interest
data
"
)
]
FetchInterestDataError
#
[
error
(
"
Interrupted
"
)
]
Interrupted
(
#
[
from
]
interrupt_support
:
:
Interrupted
)
#
[
error
(
"
Invalid
interest
code
:
{
0
}
"
)
]
InvalidInterestCode
(
u32
)
#
[
error
(
"
Remote
Setting
Error
:
{
0
}
"
)
]
RemoteSettingsError
(
#
[
from
]
remote_settings
:
:
RemoteSettingsError
)
#
[
error
(
"
Serde
Json
Error
:
{
0
}
"
)
]
SerdeJsonError
(
#
[
from
]
serde_json
:
:
Error
)
#
[
error
(
"
Base64
Decode
Error
:
{
0
}
"
)
]
Base64DecodeError
(
String
)
}
pub
type
ApiResult
<
T
>
=
std
:
:
result
:
:
Result
<
T
RelevancyApiError
>
;
pub
type
Result
<
T
>
=
std
:
:
result
:
:
Result
<
T
Error
>
;
impl
GetErrorHandling
for
Error
{
type
ExternalError
=
RelevancyApiError
;
fn
get_error_handling
(
&
self
)
-
>
ErrorHandling
<
Self
:
:
ExternalError
>
{
ErrorHandling
:
:
convert
(
RelevancyApiError
:
:
Unexpected
{
reason
:
self
.
to_string
(
)
}
)
}
}
