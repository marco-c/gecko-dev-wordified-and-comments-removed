mod
db
;
mod
error
;
mod
interest
;
mod
populate_interests
;
mod
schema
;
pub
mod
url_hash
;
pub
use
db
:
:
RelevancyDb
;
pub
use
error
:
:
{
ApiResult
Error
RelevancyApiError
Result
}
;
pub
use
interest
:
:
{
Interest
InterestVector
}
;
use
error_support
:
:
handle_error
;
pub
struct
RelevancyStore
{
db
:
RelevancyDb
}
impl
RelevancyStore
{
#
[
handle_error
(
Error
)
]
pub
fn
new
(
db_path
:
String
)
-
>
ApiResult
<
Self
>
{
Ok
(
Self
{
db
:
RelevancyDb
:
:
new
(
db_path
)
?
}
)
}
pub
fn
close
(
&
self
)
{
self
.
db
.
close
(
)
}
pub
fn
interrupt
(
&
self
)
{
self
.
db
.
interrupt
(
)
}
#
[
handle_error
(
Error
)
]
pub
fn
ingest
(
&
self
_top_urls_by_frecency
:
Vec
<
String
>
)
-
>
ApiResult
<
(
)
>
{
populate_interests
:
:
ensure_interest_data_populated
(
&
self
.
db
)
?
;
todo
!
(
)
}
#
[
handle_error
(
Error
)
]
pub
fn
calculate_metrics
(
&
self
)
-
>
ApiResult
<
InterestMetrics
>
{
todo
!
(
)
}
#
[
handle_error
(
Error
)
]
pub
fn
user_interest_vector
(
&
self
)
-
>
ApiResult
<
InterestVector
>
{
todo
!
(
)
}
}
pub
struct
InterestMetrics
{
pub
top_single_interest_similarity
:
u32
pub
top_2interest_similarity
:
u32
pub
top_3interest_similarity
:
u32
}
uniffi
:
:
include_scaffolding
!
(
"
relevancy
"
)
;
