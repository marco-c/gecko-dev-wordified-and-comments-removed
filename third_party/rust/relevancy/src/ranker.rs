use
std
:
:
cmp
:
:
max
;
use
crate
:
:
interest
:
:
{
Interest
InterestVector
}
;
#
[
uniffi
:
:
export
]
pub
fn
score
(
interest_vector
:
InterestVector
content_categories
:
Vec
<
Interest
>
)
-
>
f64
{
let
n
=
content_categories
.
iter
(
)
.
fold
(
0
|
acc
&
category
|
acc
+
interest_vector
[
category
]
)
;
(
max
(
n
1
)
as
f64
)
.
log10
(
)
.
tanh
(
)
}
#
[
cfg
(
test
)
]
mod
test
{
use
crate
:
:
interest
:
:
{
Interest
InterestVector
}
;
use
super
:
:
*
;
const
EPSILON
:
f64
=
1e
-
10
;
const
SUBEPSILON
:
f64
=
1e
-
6
;
#
[
test
]
fn
test_score_lower_bound
(
)
{
let
s
=
score
(
InterestVector
:
:
default
(
)
vec
!
[
Interest
:
:
Food
]
)
;
let
delta
=
(
s
-
0_f64
)
.
abs
(
)
;
assert
!
(
delta
<
EPSILON
)
;
let
s
=
score
(
InterestVector
{
animals
:
10
.
.
InterestVector
:
:
default
(
)
}
vec
!
[
Interest
:
:
Food
]
)
;
let
delta
=
(
s
-
0_f64
)
.
abs
(
)
;
assert
!
(
delta
<
EPSILON
)
;
}
#
[
test
]
fn
test_score_upper_bound
(
)
{
let
score
=
score
(
InterestVector
{
animals
:
1_000_000_000
.
.
InterestVector
:
:
default
(
)
}
vec
!
[
Interest
:
:
Animals
]
)
;
let
delta
=
(
score
-
1
.
0_f64
)
.
abs
(
)
;
assert
!
(
delta
<
SUBEPSILON
)
;
}
#
[
test
]
fn
test_score_monotonic
(
)
{
let
l
=
score
(
InterestVector
{
animals
:
1
.
.
InterestVector
:
:
default
(
)
}
vec
!
[
Interest
:
:
Animals
]
)
;
let
r
=
score
(
InterestVector
{
animals
:
5
.
.
InterestVector
:
:
default
(
)
}
vec
!
[
Interest
:
:
Animals
]
)
;
assert
!
(
l
<
r
)
;
}
#
[
test
]
fn
test_score_multi_categories
(
)
{
let
l
=
score
(
InterestVector
{
animals
:
100
food
:
100
.
.
InterestVector
:
:
default
(
)
}
vec
!
[
Interest
:
:
Animals
Interest
:
:
Food
]
)
;
let
r
=
score
(
InterestVector
{
animals
:
200
.
.
InterestVector
:
:
default
(
)
}
vec
!
[
Interest
:
:
Animals
]
)
;
let
delta
=
(
l
-
r
)
.
abs
(
)
;
assert
!
(
delta
<
EPSILON
)
;
}
}
