use
oneshot
:
:
{
Receiver
Sender
}
;
use
std
:
:
mem
;
#
[
test
]
fn
channel_endpoints_single_pointer
(
)
{
const
PTR_SIZE
:
usize
=
mem
:
:
size_of
:
:
<
*
const
(
)
>
(
)
;
assert_eq
!
(
mem
:
:
size_of
:
:
<
Sender
<
(
)
>
>
(
)
PTR_SIZE
)
;
assert_eq
!
(
mem
:
:
size_of
:
:
<
Receiver
<
(
)
>
>
(
)
PTR_SIZE
)
;
assert_eq
!
(
mem
:
:
size_of
:
:
<
Sender
<
u8
>
>
(
)
PTR_SIZE
)
;
assert_eq
!
(
mem
:
:
size_of
:
:
<
Receiver
<
u8
>
>
(
)
PTR_SIZE
)
;
assert_eq
!
(
mem
:
:
size_of
:
:
<
Sender
<
[
u8
;
1024
]
>
>
(
)
PTR_SIZE
)
;
assert_eq
!
(
mem
:
:
size_of
:
:
<
Receiver
<
[
u8
;
1024
]
>
>
(
)
PTR_SIZE
)
;
assert_eq
!
(
mem
:
:
size_of
:
:
<
Option
<
Sender
<
[
u8
;
1024
]
>
>
>
(
)
PTR_SIZE
)
;
assert_eq
!
(
mem
:
:
size_of
:
:
<
Option
<
Receiver
<
[
u8
;
1024
]
>
>
>
(
)
PTR_SIZE
)
;
}
#
[
test
]
fn
error_sizes
(
)
{
const
PTR_SIZE
:
usize
=
mem
:
:
size_of
:
:
<
usize
>
(
)
;
assert_eq
!
(
mem
:
:
size_of
:
:
<
oneshot
:
:
SendError
<
(
)
>
>
(
)
PTR_SIZE
)
;
assert_eq
!
(
mem
:
:
size_of
:
:
<
oneshot
:
:
SendError
<
u8
>
>
(
)
PTR_SIZE
)
;
assert_eq
!
(
mem
:
:
size_of
:
:
<
oneshot
:
:
SendError
<
[
u8
;
1024
]
>
>
(
)
PTR_SIZE
)
;
assert_eq
!
(
mem
:
:
size_of
:
:
<
Result
<
(
)
oneshot
:
:
SendError
<
[
u8
;
1024
]
>
>
>
(
)
PTR_SIZE
)
;
}
