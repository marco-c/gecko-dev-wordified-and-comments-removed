#
[
cfg
(
feature
=
"
databake
"
)
]
mod
databake
;
#
[
cfg
(
feature
=
"
serde
"
)
]
mod
serde
;
mod
slice
;
pub
use
slice
:
:
ZeroSlice
;
use
crate
:
:
ule
:
:
*
;
use
alloc
:
:
borrow
:
:
Cow
;
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
cmp
:
:
{
Ord
Ordering
PartialOrd
}
;
use
core
:
:
fmt
;
use
core
:
:
iter
:
:
FromIterator
;
use
core
:
:
marker
:
:
PhantomData
;
use
core
:
:
mem
;
use
core
:
:
ops
:
:
Deref
;
pub
struct
ZeroVec
<
'
a
T
>
where
T
:
AsULE
{
vector
:
EyepatchHackVector
<
T
:
:
ULE
>
#
[
allow
(
clippy
:
:
type_complexity
)
]
marker
:
PhantomData
<
(
Vec
<
T
:
:
ULE
>
&
'
a
[
T
:
:
ULE
]
)
>
}
unsafe
impl
<
'
a
T
:
AsULE
>
Send
for
ZeroVec
<
'
a
T
>
where
T
:
:
ULE
:
Send
+
Sync
{
}
unsafe
impl
<
'
a
T
:
AsULE
>
Sync
for
ZeroVec
<
'
a
T
>
where
T
:
:
ULE
:
Sync
{
}
impl
<
'
a
T
:
AsULE
>
Deref
for
ZeroVec
<
'
a
T
>
{
type
Target
=
ZeroSlice
<
T
>
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
let
slice
:
&
[
T
:
:
ULE
]
=
self
.
vector
.
as_slice
(
)
;
ZeroSlice
:
:
from_ule_slice
(
slice
)
}
}
struct
EyepatchHackVector
<
U
>
{
buf
:
*
mut
[
U
]
capacity
:
usize
}
impl
<
U
>
EyepatchHackVector
<
U
>
{
#
[
inline
]
unsafe
fn
as_arbitrary_slice
<
'
a
>
(
&
self
)
-
>
&
'
a
[
U
]
{
&
*
self
.
buf
}
#
[
inline
]
fn
as_slice
<
'
a
>
(
&
'
a
self
)
-
>
&
'
a
[
U
]
{
unsafe
{
&
*
self
.
buf
}
}
unsafe
fn
get_vec
(
&
self
)
-
>
Vec
<
U
>
{
debug_assert
!
(
self
.
capacity
!
=
0
)
;
let
slice
:
&
[
U
]
=
self
.
as_slice
(
)
;
let
len
=
slice
.
len
(
)
;
Vec
:
:
from_raw_parts
(
self
.
buf
as
*
mut
U
len
self
.
capacity
)
}
}
impl
<
U
>
Drop
for
EyepatchHackVector
<
U
>
{
#
[
inline
]
fn
drop
(
&
mut
self
)
{
if
self
.
capacity
!
=
0
{
unsafe
{
let
_
=
self
.
get_vec
(
)
;
}
}
}
}
impl
<
'
a
T
:
AsULE
>
Clone
for
ZeroVec
<
'
a
T
>
{
fn
clone
(
&
self
)
-
>
Self
{
if
self
.
is_owned
(
)
{
ZeroVec
:
:
new_owned
(
self
.
as_ule_slice
(
)
.
into
(
)
)
}
else
{
Self
{
vector
:
EyepatchHackVector
{
buf
:
self
.
vector
.
buf
capacity
:
0
}
marker
:
PhantomData
}
}
}
}
impl
<
'
a
T
:
AsULE
>
AsRef
<
ZeroSlice
<
T
>
>
for
ZeroVec
<
'
a
T
>
{
fn
as_ref
(
&
self
)
-
>
&
ZeroSlice
<
T
>
{
self
.
deref
(
)
}
}
impl
<
T
>
fmt
:
:
Debug
for
ZeroVec
<
'
_
T
>
where
T
:
AsULE
+
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
ZeroVec
(
{
:
?
}
)
"
self
.
to_vec
(
)
)
}
}
impl
<
T
>
Eq
for
ZeroVec
<
'
_
T
>
where
T
:
AsULE
+
Eq
+
?
Sized
{
}
impl
<
'
a
'
b
T
>
PartialEq
<
ZeroVec
<
'
b
T
>
>
for
ZeroVec
<
'
a
T
>
where
T
:
AsULE
+
PartialEq
+
?
Sized
{
#
[
inline
]
fn
eq
(
&
self
other
:
&
ZeroVec
<
'
b
T
>
)
-
>
bool
{
self
.
iter
(
)
.
eq
(
other
.
iter
(
)
)
}
}
impl
<
T
>
PartialEq
<
&
[
T
]
>
for
ZeroVec
<
'
_
T
>
where
T
:
AsULE
+
PartialEq
+
?
Sized
{
#
[
inline
]
fn
eq
(
&
self
other
:
&
&
[
T
]
)
-
>
bool
{
self
.
iter
(
)
.
eq
(
other
.
iter
(
)
.
copied
(
)
)
}
}
impl
<
T
const
N
:
usize
>
PartialEq
<
[
T
;
N
]
>
for
ZeroVec
<
'
_
T
>
where
T
:
AsULE
+
PartialEq
+
?
Sized
{
#
[
inline
]
fn
eq
(
&
self
other
:
&
[
T
;
N
]
)
-
>
bool
{
self
.
iter
(
)
.
eq
(
other
.
iter
(
)
.
copied
(
)
)
}
}
impl
<
'
a
T
:
AsULE
>
Default
for
ZeroVec
<
'
a
T
>
{
#
[
inline
]
fn
default
(
)
-
>
Self
{
Self
:
:
new
(
)
}
}
impl
<
'
a
T
:
AsULE
+
PartialOrd
>
PartialOrd
for
ZeroVec
<
'
a
T
>
{
fn
partial_cmp
(
&
self
other
:
&
Self
)
-
>
Option
<
Ordering
>
{
self
.
iter
(
)
.
partial_cmp
(
other
.
iter
(
)
)
}
}
impl
<
'
a
T
:
AsULE
+
Ord
>
Ord
for
ZeroVec
<
'
a
T
>
{
fn
cmp
(
&
self
other
:
&
Self
)
-
>
Ordering
{
self
.
iter
(
)
.
cmp
(
other
.
iter
(
)
)
}
}
impl
<
'
a
T
>
ZeroVec
<
'
a
T
>
where
T
:
AsULE
+
?
Sized
{
#
[
inline
]
pub
const
fn
new
(
)
-
>
Self
{
Self
:
:
new_borrowed
(
&
[
]
)
}
#
[
inline
]
pub
fn
new_owned
(
vec
:
Vec
<
T
:
:
ULE
>
)
-
>
Self
{
let
slice
:
&
[
T
:
:
ULE
]
=
&
vec
;
let
slice
=
slice
as
*
const
[
_
]
as
*
mut
[
_
]
;
let
capacity
=
vec
.
capacity
(
)
;
mem
:
:
forget
(
vec
)
;
Self
{
vector
:
EyepatchHackVector
{
buf
:
slice
capacity
}
marker
:
PhantomData
}
}
#
[
inline
]
pub
const
fn
new_borrowed
(
slice
:
&
'
a
[
T
:
:
ULE
]
)
-
>
Self
{
let
slice
=
slice
as
*
const
[
_
]
as
*
mut
[
_
]
;
Self
{
vector
:
EyepatchHackVector
{
buf
:
slice
capacity
:
0
}
marker
:
PhantomData
}
}
pub
fn
with_capacity
(
capacity
:
usize
)
-
>
Self
{
Self
:
:
new_owned
(
Vec
:
:
with_capacity
(
capacity
)
)
}
pub
fn
parse_byte_slice
(
bytes
:
&
'
a
[
u8
]
)
-
>
Result
<
Self
ZeroVecError
>
{
let
slice
:
&
'
a
[
T
:
:
ULE
]
=
T
:
:
ULE
:
:
parse_byte_slice
(
bytes
)
?
;
Ok
(
Self
:
:
new_borrowed
(
slice
)
)
}
pub
const
unsafe
fn
from_bytes_unchecked
(
bytes
:
&
'
a
[
u8
]
)
-
>
Self
{
Self
:
:
new_borrowed
(
core
:
:
mem
:
:
transmute
(
(
bytes
.
as_ptr
(
)
bytes
.
len
(
)
/
core
:
:
mem
:
:
size_of
:
:
<
T
:
:
ULE
>
(
)
)
)
)
}
pub
fn
into_bytes
(
self
)
-
>
ZeroVec
<
'
a
u8
>
{
match
self
.
into_cow
(
)
{
Cow
:
:
Borrowed
(
slice
)
=
>
{
let
bytes
:
&
'
a
[
u8
]
=
T
:
:
ULE
:
:
as_byte_slice
(
slice
)
;
ZeroVec
:
:
new_borrowed
(
bytes
)
}
Cow
:
:
Owned
(
vec
)
=
>
{
let
bytes
=
Vec
:
:
from
(
T
:
:
ULE
:
:
as_byte_slice
(
&
vec
)
)
;
ZeroVec
:
:
new_owned
(
bytes
)
}
}
}
pub
fn
cast
<
P
>
(
self
)
-
>
ZeroVec
<
'
a
P
>
where
P
:
AsULE
<
ULE
=
T
:
:
ULE
>
{
match
self
.
into_cow
(
)
{
Cow
:
:
Owned
(
v
)
=
>
ZeroVec
:
:
new_owned
(
v
)
Cow
:
:
Borrowed
(
v
)
=
>
ZeroVec
:
:
new_borrowed
(
v
)
}
}
pub
fn
try_into_converted
<
P
:
AsULE
>
(
self
)
-
>
Result
<
ZeroVec
<
'
a
P
>
ZeroVecError
>
{
assert_eq
!
(
core
:
:
mem
:
:
size_of
:
:
<
<
T
as
AsULE
>
:
:
ULE
>
(
)
core
:
:
mem
:
:
size_of
:
:
<
<
P
as
AsULE
>
:
:
ULE
>
(
)
)
;
match
self
.
into_cow
(
)
{
Cow
:
:
Borrowed
(
old_slice
)
=
>
{
let
bytes
:
&
'
a
[
u8
]
=
T
:
:
ULE
:
:
as_byte_slice
(
old_slice
)
;
let
new_slice
=
P
:
:
ULE
:
:
parse_byte_slice
(
bytes
)
?
;
Ok
(
ZeroVec
:
:
new_borrowed
(
new_slice
)
)
}
Cow
:
:
Owned
(
old_vec
)
=
>
{
let
bytes
:
&
[
u8
]
=
T
:
:
ULE
:
:
as_byte_slice
(
&
old_vec
)
;
P
:
:
ULE
:
:
validate_byte_slice
(
bytes
)
?
;
let
(
ptr
len
cap
)
=
{
let
mut
v
=
mem
:
:
ManuallyDrop
:
:
new
(
old_vec
)
;
(
v
.
as_mut_ptr
(
)
v
.
len
(
)
v
.
capacity
(
)
)
}
;
let
new_vec
=
unsafe
{
let
ptr
=
ptr
as
*
mut
P
:
:
ULE
;
Vec
:
:
from_raw_parts
(
ptr
len
cap
)
}
;
Ok
(
ZeroVec
:
:
new_owned
(
new_vec
)
)
}
}
}
#
[
inline
]
pub
fn
is_owned
(
&
self
)
-
>
bool
{
self
.
vector
.
capacity
!
=
0
}
#
[
inline
]
pub
fn
as_maybe_borrowed
(
&
self
)
-
>
Option
<
&
'
a
ZeroSlice
<
T
>
>
{
if
self
.
is_owned
(
)
{
None
}
else
{
let
ule_slice
=
unsafe
{
self
.
vector
.
as_arbitrary_slice
(
)
}
;
Some
(
ZeroSlice
:
:
from_ule_slice
(
ule_slice
)
)
}
}
}
impl
<
'
a
>
ZeroVec
<
'
a
u8
>
{
pub
fn
try_into_parsed
<
T
:
AsULE
>
(
self
)
-
>
Result
<
ZeroVec
<
'
a
T
>
ZeroVecError
>
{
match
self
.
into_cow
(
)
{
Cow
:
:
Borrowed
(
bytes
)
=
>
{
let
slice
:
&
'
a
[
T
:
:
ULE
]
=
T
:
:
ULE
:
:
parse_byte_slice
(
bytes
)
?
;
Ok
(
ZeroVec
:
:
new_borrowed
(
slice
)
)
}
Cow
:
:
Owned
(
vec
)
=
>
{
let
slice
=
Vec
:
:
from
(
T
:
:
ULE
:
:
parse_byte_slice
(
&
vec
)
?
)
;
Ok
(
ZeroVec
:
:
new_owned
(
slice
)
)
}
}
}
}
impl
<
'
a
T
>
ZeroVec
<
'
a
T
>
where
T
:
AsULE
{
#
[
inline
]
pub
fn
alloc_from_slice
(
other
:
&
[
T
]
)
-
>
Self
{
Self
:
:
new_owned
(
other
.
iter
(
)
.
copied
(
)
.
map
(
T
:
:
to_unaligned
)
.
collect
(
)
)
}
#
[
inline
]
pub
fn
to_vec
(
&
self
)
-
>
Vec
<
T
>
{
self
.
iter
(
)
.
collect
(
)
}
}
impl
<
'
a
T
>
ZeroVec
<
'
a
T
>
where
T
:
EqULE
{
#
[
inline
]
pub
fn
try_from_slice
(
slice
:
&
'
a
[
T
]
)
-
>
Option
<
Self
>
{
T
:
:
slice_to_unaligned
(
slice
)
.
map
(
|
ule_slice
|
Self
:
:
new_borrowed
(
ule_slice
)
)
}
#
[
inline
]
pub
fn
from_slice_or_alloc
(
slice
:
&
'
a
[
T
]
)
-
>
Self
{
Self
:
:
try_from_slice
(
slice
)
.
unwrap_or_else
(
|
|
Self
:
:
alloc_from_slice
(
slice
)
)
}
}
impl
<
'
a
T
>
ZeroVec
<
'
a
T
>
where
T
:
AsULE
{
#
[
inline
]
pub
fn
for_each_mut
(
&
mut
self
mut
f
:
impl
FnMut
(
&
mut
T
)
)
{
self
.
to_mut_slice
(
)
.
iter_mut
(
)
.
for_each
(
|
item
|
{
let
mut
aligned
=
T
:
:
from_unaligned
(
*
item
)
;
f
(
&
mut
aligned
)
;
*
item
=
aligned
.
to_unaligned
(
)
}
)
}
#
[
inline
]
pub
fn
try_for_each_mut
<
E
>
(
&
mut
self
mut
f
:
impl
FnMut
(
&
mut
T
)
-
>
Result
<
(
)
E
>
)
-
>
Result
<
(
)
E
>
{
self
.
to_mut_slice
(
)
.
iter_mut
(
)
.
try_for_each
(
|
item
|
{
let
mut
aligned
=
T
:
:
from_unaligned
(
*
item
)
;
f
(
&
mut
aligned
)
?
;
*
item
=
aligned
.
to_unaligned
(
)
;
Ok
(
(
)
)
}
)
}
pub
fn
into_owned
(
self
)
-
>
ZeroVec
<
'
static
T
>
{
match
self
.
into_cow
(
)
{
Cow
:
:
Owned
(
vec
)
=
>
ZeroVec
:
:
new_owned
(
vec
)
Cow
:
:
Borrowed
(
b
)
=
>
{
let
vec
:
Vec
<
T
:
:
ULE
>
=
b
.
into
(
)
;
ZeroVec
:
:
new_owned
(
vec
)
}
}
}
pub
fn
with_mut
<
R
>
(
&
mut
self
f
:
impl
FnOnce
(
&
mut
Vec
<
T
:
:
ULE
>
)
-
>
R
)
-
>
R
{
let
this
=
mem
:
:
take
(
self
)
;
let
mut
vec
=
match
this
.
into_cow
(
)
{
Cow
:
:
Owned
(
v
)
=
>
v
Cow
:
:
Borrowed
(
s
)
=
>
s
.
into
(
)
}
;
let
ret
=
f
(
&
mut
vec
)
;
*
self
=
Self
:
:
new_owned
(
vec
)
;
ret
}
pub
fn
to_mut_slice
(
&
mut
self
)
-
>
&
mut
[
T
:
:
ULE
]
{
if
!
self
.
is_owned
(
)
{
let
slice
=
self
.
vector
.
as_slice
(
)
;
*
self
=
ZeroVec
:
:
new_owned
(
slice
.
into
(
)
)
;
}
unsafe
{
&
mut
*
self
.
vector
.
buf
}
}
pub
fn
clear
(
&
mut
self
)
{
*
self
=
Self
:
:
new_borrowed
(
&
[
]
)
}
#
[
inline
]
pub
fn
into_cow
(
self
)
-
>
Cow
<
'
a
[
T
:
:
ULE
]
>
{
if
self
.
is_owned
(
)
{
let
vec
=
unsafe
{
self
.
vector
.
get_vec
(
)
}
;
mem
:
:
forget
(
self
)
;
Cow
:
:
Owned
(
vec
)
}
else
{
let
slice
=
unsafe
{
self
.
vector
.
as_arbitrary_slice
(
)
}
;
mem
:
:
forget
(
self
)
;
Cow
:
:
Borrowed
(
slice
)
}
}
}
impl
<
T
:
AsULE
>
FromIterator
<
T
>
for
ZeroVec
<
'
_
T
>
{
fn
from_iter
<
I
>
(
iter
:
I
)
-
>
Self
where
I
:
IntoIterator
<
Item
=
T
>
{
ZeroVec
:
:
new_owned
(
iter
.
into_iter
(
)
.
map
(
|
t
|
t
.
to_unaligned
(
)
)
.
collect
(
)
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
crate
:
:
samples
:
:
*
;
#
[
test
]
fn
test_get
(
)
{
{
let
zerovec
=
ZeroVec
:
:
from_slice_or_alloc
(
TEST_SLICE
)
;
assert_eq
!
(
zerovec
.
get
(
0
)
Some
(
TEST_SLICE
[
0
]
)
)
;
assert_eq
!
(
zerovec
.
get
(
1
)
Some
(
TEST_SLICE
[
1
]
)
)
;
assert_eq
!
(
zerovec
.
get
(
2
)
Some
(
TEST_SLICE
[
2
]
)
)
;
}
{
let
zerovec
=
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
TEST_BUFFER_LE
)
.
unwrap
(
)
;
assert_eq
!
(
zerovec
.
get
(
0
)
Some
(
TEST_SLICE
[
0
]
)
)
;
assert_eq
!
(
zerovec
.
get
(
1
)
Some
(
TEST_SLICE
[
1
]
)
)
;
assert_eq
!
(
zerovec
.
get
(
2
)
Some
(
TEST_SLICE
[
2
]
)
)
;
}
}
#
[
test
]
fn
test_binary_search
(
)
{
{
let
zerovec
=
ZeroVec
:
:
from_slice_or_alloc
(
TEST_SLICE
)
;
assert_eq
!
(
Ok
(
3
)
zerovec
.
binary_search
(
&
0x0e0d0c
)
)
;
assert_eq
!
(
Err
(
3
)
zerovec
.
binary_search
(
&
0x0c0d0c
)
)
;
}
{
let
zerovec
=
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
TEST_BUFFER_LE
)
.
unwrap
(
)
;
assert_eq
!
(
Ok
(
3
)
zerovec
.
binary_search
(
&
0x0e0d0c
)
)
;
assert_eq
!
(
Err
(
3
)
zerovec
.
binary_search
(
&
0x0c0d0c
)
)
;
}
}
#
[
test
]
fn
test_odd_alignment
(
)
{
assert_eq
!
(
Some
(
0x020100
)
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
TEST_BUFFER_LE
)
.
unwrap
(
)
.
get
(
0
)
)
;
assert_eq
!
(
Some
(
0x04000201
)
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
&
TEST_BUFFER_LE
[
1
.
.
77
]
)
.
unwrap
(
)
.
get
(
0
)
)
;
assert_eq
!
(
Some
(
0x05040002
)
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
&
TEST_BUFFER_LE
[
2
.
.
78
]
)
.
unwrap
(
)
.
get
(
0
)
)
;
assert_eq
!
(
Some
(
0x06050400
)
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
&
TEST_BUFFER_LE
[
3
.
.
79
]
)
.
unwrap
(
)
.
get
(
0
)
)
;
assert_eq
!
(
Some
(
0x060504
)
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
&
TEST_BUFFER_LE
[
4
.
.
]
)
.
unwrap
(
)
.
get
(
0
)
)
;
assert_eq
!
(
Some
(
0x4e4d4c00
)
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
&
TEST_BUFFER_LE
[
75
.
.
79
]
)
.
unwrap
(
)
.
get
(
0
)
)
;
assert_eq
!
(
Some
(
0x4e4d4c00
)
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
&
TEST_BUFFER_LE
[
3
.
.
79
]
)
.
unwrap
(
)
.
get
(
18
)
)
;
assert_eq
!
(
Some
(
0x4e4d4c
)
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
&
TEST_BUFFER_LE
[
76
.
.
]
)
.
unwrap
(
)
.
get
(
0
)
)
;
assert_eq
!
(
Some
(
0x4e4d4c
)
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
TEST_BUFFER_LE
)
.
unwrap
(
)
.
get
(
19
)
)
;
assert_eq
!
(
None
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
TEST_BUFFER_LE
)
.
unwrap
(
)
.
get
(
20
)
)
;
assert_eq
!
(
None
ZeroVec
:
:
<
u32
>
:
:
parse_byte_slice
(
&
TEST_BUFFER_LE
[
3
.
.
79
]
)
.
unwrap
(
)
.
get
(
19
)
)
;
}
}
