use
super
:
:
*
;
use
core
:
:
cmp
:
:
Ordering
;
use
core
:
:
ops
:
:
Range
;
#
[
repr
(
transparent
)
]
pub
struct
ZeroSlice
<
T
:
AsULE
>
(
[
T
:
:
ULE
]
)
;
impl
<
T
>
ZeroSlice
<
T
>
where
T
:
AsULE
{
pub
const
fn
new_empty
(
)
-
>
&
'
static
Self
{
Self
:
:
from_ule_slice
(
&
[
]
)
}
#
[
inline
]
pub
const
fn
as_zerovec
(
&
self
)
-
>
ZeroVec
<
'
_
T
>
{
ZeroVec
:
:
new_borrowed
(
&
self
.
0
)
}
pub
fn
parse_bytes
(
bytes
:
&
[
u8
]
)
-
>
Result
<
&
Self
UleError
>
{
T
:
:
ULE
:
:
parse_bytes_to_slice
(
bytes
)
.
map
(
Self
:
:
from_ule_slice
)
}
pub
const
unsafe
fn
from_bytes_unchecked
(
bytes
:
&
[
u8
]
)
-
>
&
Self
{
Self
:
:
from_ule_slice
(
core
:
:
slice
:
:
from_raw_parts
(
bytes
.
as_ptr
(
)
as
*
const
T
:
:
ULE
bytes
.
len
(
)
/
core
:
:
mem
:
:
size_of
:
:
<
T
:
:
ULE
>
(
)
)
)
}
#
[
inline
]
pub
const
fn
from_ule_slice
(
slice
:
&
[
T
:
:
ULE
]
)
-
>
&
Self
{
unsafe
{
&
*
(
slice
as
*
const
_
as
*
const
Self
)
}
}
#
[
inline
]
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
fn
from_boxed_slice
(
slice
:
alloc
:
:
boxed
:
:
Box
<
[
T
:
:
ULE
]
>
)
-
>
alloc
:
:
boxed
:
:
Box
<
Self
>
{
unsafe
{
alloc
:
:
boxed
:
:
Box
:
:
from_raw
(
alloc
:
:
boxed
:
:
Box
:
:
into_raw
(
slice
)
as
*
mut
Self
)
}
}
#
[
inline
]
pub
fn
as_bytes
(
&
self
)
-
>
&
[
u8
]
{
T
:
:
ULE
:
:
slice_as_bytes
(
self
.
as_ule_slice
(
)
)
}
#
[
inline
]
pub
const
fn
as_ule_slice
(
&
self
)
-
>
&
[
T
:
:
ULE
]
{
&
self
.
0
}
#
[
inline
]
pub
const
fn
len
(
&
self
)
-
>
usize
{
self
.
as_ule_slice
(
)
.
len
(
)
}
#
[
inline
]
pub
const
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
as_ule_slice
(
)
.
is_empty
(
)
}
}
impl
<
T
>
ZeroSlice
<
T
>
where
T
:
AsULE
{
#
[
inline
]
pub
fn
get
(
&
self
index
:
usize
)
-
>
Option
<
T
>
{
self
.
as_ule_slice
(
)
.
get
(
index
)
.
copied
(
)
.
map
(
T
:
:
from_unaligned
)
}
pub
fn
get_as_array
<
const
N
:
usize
>
(
&
self
)
-
>
Option
<
[
T
;
N
]
>
{
let
ule_array
=
<
&
[
T
:
:
ULE
;
N
]
>
:
:
try_from
(
self
.
as_ule_slice
(
)
)
.
ok
(
)
?
;
Some
(
ule_array
.
map
(
|
u
|
T
:
:
from_unaligned
(
u
)
)
)
}
#
[
inline
]
pub
fn
get_subslice
(
&
self
range
:
Range
<
usize
>
)
-
>
Option
<
&
ZeroSlice
<
T
>
>
{
self
.
0
.
get
(
range
)
.
map
(
ZeroSlice
:
:
from_ule_slice
)
}
pub
fn
get_ule_ref
(
&
self
index
:
usize
)
-
>
Option
<
&
T
:
:
ULE
>
{
self
.
as_ule_slice
(
)
.
get
(
index
)
}
#
[
inline
]
pub
const
fn
cast
<
P
>
(
&
self
)
-
>
&
ZeroSlice
<
P
>
where
P
:
AsULE
<
ULE
=
T
:
:
ULE
>
{
ZeroSlice
:
:
<
P
>
:
:
from_ule_slice
(
self
.
as_ule_slice
(
)
)
}
#
[
inline
]
pub
fn
try_as_converted
<
P
:
AsULE
>
(
&
self
)
-
>
Result
<
&
ZeroSlice
<
P
>
UleError
>
{
let
new_slice
=
P
:
:
ULE
:
:
parse_bytes_to_slice
(
self
.
as_bytes
(
)
)
?
;
Ok
(
ZeroSlice
:
:
from_ule_slice
(
new_slice
)
)
}
#
[
inline
]
pub
fn
first
(
&
self
)
-
>
Option
<
T
>
{
self
.
as_ule_slice
(
)
.
first
(
)
.
copied
(
)
.
map
(
T
:
:
from_unaligned
)
}
#
[
inline
]
pub
fn
last
(
&
self
)
-
>
Option
<
T
>
{
self
.
as_ule_slice
(
)
.
last
(
)
.
copied
(
)
.
map
(
T
:
:
from_unaligned
)
}
#
[
inline
]
pub
fn
iter
<
'
a
>
(
&
'
a
self
)
-
>
ZeroSliceIter
<
'
a
T
>
{
ZeroSliceIter
(
self
.
as_ule_slice
(
)
.
iter
(
)
)
}
#
[
inline
]
pub
fn
split_first
(
&
self
)
-
>
Option
<
(
T
&
ZeroSlice
<
T
>
)
>
{
if
let
Some
(
first
)
=
self
.
first
(
)
{
return
Some
(
(
first
#
[
expect
(
clippy
:
:
unwrap_used
)
]
self
.
get_subslice
(
1
.
.
self
.
len
(
)
)
.
unwrap
(
)
)
)
;
}
None
}
}
#
[
derive
(
Debug
)
]
pub
struct
ZeroSliceIter
<
'
a
T
:
AsULE
>
(
core
:
:
slice
:
:
Iter
<
'
a
T
:
:
ULE
>
)
;
impl
<
'
a
T
:
AsULE
>
Iterator
for
ZeroSliceIter
<
'
a
T
>
{
type
Item
=
T
;
fn
next
(
&
mut
self
)
-
>
Option
<
T
>
{
self
.
0
.
next
(
)
.
copied
(
)
.
map
(
T
:
:
from_unaligned
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
0
.
size_hint
(
)
}
}
impl
<
'
a
T
:
AsULE
>
ExactSizeIterator
for
ZeroSliceIter
<
'
a
T
>
{
fn
len
(
&
self
)
-
>
usize
{
self
.
0
.
len
(
)
}
}
impl
<
'
a
T
:
AsULE
>
DoubleEndedIterator
for
ZeroSliceIter
<
'
a
T
>
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
T
>
{
self
.
0
.
next_back
(
)
.
copied
(
)
.
map
(
T
:
:
from_unaligned
)
}
}
impl
<
T
>
ZeroSlice
<
T
>
where
T
:
AsULE
+
Ord
{
#
[
inline
]
pub
fn
binary_search
(
&
self
x
:
&
T
)
-
>
Result
<
usize
usize
>
{
self
.
as_ule_slice
(
)
.
binary_search_by
(
|
probe
|
T
:
:
from_unaligned
(
*
probe
)
.
cmp
(
x
)
)
}
}
impl
<
T
>
ZeroSlice
<
T
>
where
T
:
AsULE
{
#
[
inline
]
pub
fn
binary_search_by
(
&
self
mut
predicate
:
impl
FnMut
(
T
)
-
>
Ordering
)
-
>
Result
<
usize
usize
>
{
self
.
as_ule_slice
(
)
.
binary_search_by
(
|
probe
|
predicate
(
T
:
:
from_unaligned
(
*
probe
)
)
)
}
}
unsafe
impl
<
T
:
AsULE
+
'
static
>
VarULE
for
ZeroSlice
<
T
>
{
#
[
inline
]
fn
validate_bytes
(
bytes
:
&
[
u8
]
)
-
>
Result
<
(
)
UleError
>
{
T
:
:
ULE
:
:
validate_bytes
(
bytes
)
}
#
[
inline
]
unsafe
fn
from_bytes_unchecked
(
bytes
:
&
[
u8
]
)
-
>
&
Self
{
Self
:
:
from_ule_slice
(
T
:
:
ULE
:
:
slice_from_bytes_unchecked
(
bytes
)
)
}
}
impl
<
T
>
Eq
for
ZeroSlice
<
T
>
where
T
:
AsULE
+
Eq
{
}
impl
<
T
>
PartialEq
<
ZeroSlice
<
T
>
>
for
ZeroSlice
<
T
>
where
T
:
AsULE
+
PartialEq
{
#
[
inline
]
fn
eq
(
&
self
other
:
&
ZeroSlice
<
T
>
)
-
>
bool
{
self
.
as_zerovec
(
)
.
eq
(
&
other
.
as_zerovec
(
)
)
}
}
impl
<
T
>
PartialEq
<
[
T
]
>
for
ZeroSlice
<
T
>
where
T
:
AsULE
+
PartialEq
{
#
[
inline
]
fn
eq
(
&
self
other
:
&
[
T
]
)
-
>
bool
{
self
.
iter
(
)
.
eq
(
other
.
iter
(
)
.
copied
(
)
)
}
}
impl
<
'
a
T
>
PartialEq
<
ZeroVec
<
'
a
T
>
>
for
ZeroSlice
<
T
>
where
T
:
AsULE
+
PartialEq
{
#
[
inline
]
fn
eq
(
&
self
other
:
&
ZeroVec
<
'
a
T
>
)
-
>
bool
{
self
.
as_zerovec
(
)
.
eq
(
other
)
}
}
impl
<
'
a
T
>
PartialEq
<
ZeroSlice
<
T
>
>
for
ZeroVec
<
'
a
T
>
where
T
:
AsULE
+
PartialEq
{
#
[
inline
]
fn
eq
(
&
self
other
:
&
ZeroSlice
<
T
>
)
-
>
bool
{
self
.
eq
(
&
other
.
as_zerovec
(
)
)
}
}
impl
<
T
>
fmt
:
:
Debug
for
ZeroSlice
<
T
>
where
T
:
AsULE
+
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
as_zerovec
(
)
.
fmt
(
f
)
}
}
impl
<
T
:
AsULE
+
PartialOrd
>
PartialOrd
for
ZeroSlice
<
T
>
{
fn
partial_cmp
(
&
self
other
:
&
Self
)
-
>
Option
<
Ordering
>
{
self
.
iter
(
)
.
partial_cmp
(
other
.
iter
(
)
)
}
}
impl
<
T
:
AsULE
+
Ord
>
Ord
for
ZeroSlice
<
T
>
{
fn
cmp
(
&
self
other
:
&
Self
)
-
>
Ordering
{
self
.
iter
(
)
.
cmp
(
other
.
iter
(
)
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
impl
<
T
:
AsULE
>
AsRef
<
ZeroSlice
<
T
>
>
for
alloc
:
:
vec
:
:
Vec
<
T
:
:
ULE
>
{
fn
as_ref
(
&
self
)
-
>
&
ZeroSlice
<
T
>
{
ZeroSlice
:
:
<
T
>
:
:
from_ule_slice
(
self
)
}
}
impl
<
T
:
AsULE
>
AsRef
<
ZeroSlice
<
T
>
>
for
&
[
T
:
:
ULE
]
{
fn
as_ref
(
&
self
)
-
>
&
ZeroSlice
<
T
>
{
ZeroSlice
:
:
<
T
>
:
:
from_ule_slice
(
self
)
}
}
impl
<
T
>
Default
for
&
ZeroSlice
<
T
>
where
T
:
AsULE
{
fn
default
(
)
-
>
Self
{
ZeroSlice
:
:
from_ule_slice
(
&
[
]
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
crate
:
:
zeroslice
;
#
[
test
]
fn
test_split_first
(
)
{
{
assert_eq
!
(
None
ZeroSlice
:
:
<
u16
>
:
:
new_empty
(
)
.
split_first
(
)
)
;
}
{
const
DATA
:
&
ZeroSlice
<
u16
>
=
zeroslice
!
(
u16
;
<
u16
as
AsULE
>
:
:
ULE
:
:
from_unsigned
;
[
211
]
)
;
assert_eq
!
(
(
211
zeroslice
!
[
]
)
DATA
.
split_first
(
)
.
unwrap
(
)
)
;
}
{
const
DATA
:
&
ZeroSlice
<
u16
>
=
zeroslice
!
(
u16
;
<
u16
as
AsULE
>
:
:
ULE
:
:
from_unsigned
;
[
211
281
421
32973
]
)
;
const
EXPECTED_VALUE
:
(
u16
&
ZeroSlice
<
u16
>
)
=
(
211
zeroslice
!
(
u16
;
<
u16
as
AsULE
>
:
:
ULE
:
:
from_unsigned
;
[
281
421
32973
]
)
)
;
assert_eq
!
(
EXPECTED_VALUE
DATA
.
split_first
(
)
.
unwrap
(
)
)
;
}
}
}
