#
[
cfg
(
feature
=
"
serde
"
)
]
pub
(
crate
)
fn
assert_serde_roundtrips
<
T
>
(
var
:
&
T
)
where
T
:
crate
:
:
ule
:
:
VarULE
+
?
Sized
+
serde
:
:
Serialize
for
<
'
a
>
Box
<
T
>
:
serde
:
:
Deserialize
<
'
a
>
for
<
'
a
>
&
'
a
T
:
serde
:
:
Deserialize
<
'
a
>
T
:
core
:
:
fmt
:
:
Debug
+
PartialEq
{
let
bincode
=
bincode
:
:
serialize
(
var
)
.
unwrap
(
)
;
let
deserialized
:
&
T
=
bincode
:
:
deserialize
(
&
bincode
)
.
unwrap
(
)
;
let
deserialized_box
:
Box
<
T
>
=
bincode
:
:
deserialize
(
&
bincode
)
.
unwrap
(
)
;
assert_eq
!
(
var
deserialized
"
Single
element
roundtrips
with
bincode
"
)
;
assert_eq
!
(
var
&
*
deserialized_box
"
Single
element
roundtrips
with
bincode
"
)
;
let
json
=
serde_json
:
:
to_string
(
var
)
.
unwrap
(
)
;
let
deserialized
:
Box
<
T
>
=
serde_json
:
:
from_str
(
&
json
)
.
unwrap
(
)
;
assert_eq
!
(
var
&
*
deserialized
"
Single
element
roundtrips
with
serde
"
)
;
}
