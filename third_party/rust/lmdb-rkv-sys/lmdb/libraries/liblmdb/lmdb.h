#
ifndef
_LMDB_H_
#
define
_LMDB_H_
#
include
<
sys
/
types
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
ifdef
_MSC_VER
typedef
int
mdb_mode_t
;
#
else
typedef
mode_t
mdb_mode_t
;
#
endif
#
ifdef
_WIN32
typedef
void
*
mdb_filehandle_t
;
#
else
typedef
int
mdb_filehandle_t
;
#
endif
#
define
MDB_VERSION_MAJOR
0
#
define
MDB_VERSION_MINOR
9
#
define
MDB_VERSION_PATCH
24
#
define
MDB_VERINT
(
a
b
c
)
(
(
(
a
)
<
<
24
)
|
(
(
b
)
<
<
16
)
|
(
c
)
)
#
define
MDB_VERSION_FULL
\
MDB_VERINT
(
MDB_VERSION_MAJOR
MDB_VERSION_MINOR
MDB_VERSION_PATCH
)
#
define
MDB_VERSION_DATE
"
July
24
2019
"
#
define
MDB_VERSTR
(
a
b
c
d
)
"
LMDB
"
#
a
"
.
"
#
b
"
.
"
#
c
"
:
(
"
d
"
)
"
#
define
MDB_VERFOO
(
a
b
c
d
)
MDB_VERSTR
(
a
b
c
d
)
#
define
MDB_VERSION_STRING
\
MDB_VERFOO
(
MDB_VERSION_MAJOR
MDB_VERSION_MINOR
MDB_VERSION_PATCH
MDB_VERSION_DATE
)
typedef
struct
MDB_env
MDB_env
;
typedef
struct
MDB_txn
MDB_txn
;
typedef
unsigned
int
MDB_dbi
;
typedef
struct
MDB_cursor
MDB_cursor
;
typedef
struct
MDB_val
{
size_t
mv_size
;
void
*
mv_data
;
}
MDB_val
;
typedef
int
(
MDB_cmp_func
)
(
const
MDB_val
*
a
const
MDB_val
*
b
)
;
typedef
void
(
MDB_rel_func
)
(
MDB_val
*
item
void
*
oldptr
void
*
newptr
void
*
relctx
)
;
#
define
MDB_FIXEDMAP
0x01
#
define
MDB_NOSUBDIR
0x4000
#
define
MDB_NOSYNC
0x10000
#
define
MDB_RDONLY
0x20000
#
define
MDB_NOMETASYNC
0x40000
#
define
MDB_WRITEMAP
0x80000
#
define
MDB_MAPASYNC
0x100000
#
define
MDB_NOTLS
0x200000
#
define
MDB_NOLOCK
0x400000
#
define
MDB_NORDAHEAD
0x800000
#
define
MDB_NOMEMINIT
0x1000000
#
define
MDB_REVERSEKEY
0x02
#
define
MDB_DUPSORT
0x04
#
define
MDB_INTEGERKEY
0x08
#
define
MDB_DUPFIXED
0x10
#
define
MDB_INTEGERDUP
0x20
#
define
MDB_REVERSEDUP
0x40
#
define
MDB_CREATE
0x40000
#
define
MDB_NOOVERWRITE
0x10
#
define
MDB_NODUPDATA
0x20
#
define
MDB_CURRENT
0x40
#
define
MDB_RESERVE
0x10000
#
define
MDB_APPEND
0x20000
#
define
MDB_APPENDDUP
0x40000
#
define
MDB_MULTIPLE
0x80000
#
define
MDB_CP_COMPACT
0x01
typedef
enum
MDB_cursor_op
{
MDB_FIRST
MDB_FIRST_DUP
MDB_GET_BOTH
MDB_GET_BOTH_RANGE
MDB_GET_CURRENT
MDB_GET_MULTIPLE
MDB_LAST
MDB_LAST_DUP
MDB_NEXT
MDB_NEXT_DUP
MDB_NEXT_MULTIPLE
MDB_NEXT_NODUP
MDB_PREV
MDB_PREV_DUP
MDB_PREV_NODUP
MDB_SET
MDB_SET_KEY
MDB_SET_RANGE
MDB_PREV_MULTIPLE
}
MDB_cursor_op
;
#
define
MDB_SUCCESS
0
#
define
MDB_KEYEXIST
(
-
30799
)
#
define
MDB_NOTFOUND
(
-
30798
)
#
define
MDB_PAGE_NOTFOUND
(
-
30797
)
#
define
MDB_CORRUPTED
(
-
30796
)
#
define
MDB_PANIC
(
-
30795
)
#
define
MDB_VERSION_MISMATCH
(
-
30794
)
#
define
MDB_INVALID
(
-
30793
)
#
define
MDB_MAP_FULL
(
-
30792
)
#
define
MDB_DBS_FULL
(
-
30791
)
#
define
MDB_READERS_FULL
(
-
30790
)
#
define
MDB_TLS_FULL
(
-
30789
)
#
define
MDB_TXN_FULL
(
-
30788
)
#
define
MDB_CURSOR_FULL
(
-
30787
)
#
define
MDB_PAGE_FULL
(
-
30786
)
#
define
MDB_MAP_RESIZED
(
-
30785
)
#
define
MDB_INCOMPATIBLE
(
-
30784
)
#
define
MDB_BAD_RSLOT
(
-
30783
)
#
define
MDB_BAD_TXN
(
-
30782
)
#
define
MDB_BAD_VALSIZE
(
-
30781
)
#
define
MDB_BAD_DBI
(
-
30780
)
#
define
MDB_LAST_ERRCODE
MDB_BAD_DBI
typedef
struct
MDB_stat
{
unsigned
int
ms_psize
;
unsigned
int
ms_depth
;
size_t
ms_branch_pages
;
size_t
ms_leaf_pages
;
size_t
ms_overflow_pages
;
size_t
ms_entries
;
}
MDB_stat
;
typedef
struct
MDB_envinfo
{
void
*
me_mapaddr
;
size_t
me_mapsize
;
size_t
me_last_pgno
;
size_t
me_last_txnid
;
unsigned
int
me_maxreaders
;
unsigned
int
me_numreaders
;
}
MDB_envinfo
;
char
*
mdb_version
(
int
*
major
int
*
minor
int
*
patch
)
;
char
*
mdb_strerror
(
int
err
)
;
int
mdb_env_create
(
MDB_env
*
*
env
)
;
int
mdb_env_open
(
MDB_env
*
env
const
char
*
path
unsigned
int
flags
mdb_mode_t
mode
)
;
int
mdb_env_copy
(
MDB_env
*
env
const
char
*
path
)
;
int
mdb_env_copyfd
(
MDB_env
*
env
mdb_filehandle_t
fd
)
;
int
mdb_env_copy2
(
MDB_env
*
env
const
char
*
path
unsigned
int
flags
)
;
int
mdb_env_copyfd2
(
MDB_env
*
env
mdb_filehandle_t
fd
unsigned
int
flags
)
;
int
mdb_env_stat
(
MDB_env
*
env
MDB_stat
*
stat
)
;
int
mdb_env_info
(
MDB_env
*
env
MDB_envinfo
*
stat
)
;
int
mdb_env_sync
(
MDB_env
*
env
int
force
)
;
void
mdb_env_close
(
MDB_env
*
env
)
;
int
mdb_env_set_flags
(
MDB_env
*
env
unsigned
int
flags
int
onoff
)
;
int
mdb_env_get_flags
(
MDB_env
*
env
unsigned
int
*
flags
)
;
int
mdb_env_get_path
(
MDB_env
*
env
const
char
*
*
path
)
;
int
mdb_env_get_fd
(
MDB_env
*
env
mdb_filehandle_t
*
fd
)
;
int
mdb_env_set_mapsize
(
MDB_env
*
env
size_t
size
)
;
int
mdb_env_set_maxreaders
(
MDB_env
*
env
unsigned
int
readers
)
;
int
mdb_env_get_maxreaders
(
MDB_env
*
env
unsigned
int
*
readers
)
;
int
mdb_env_set_maxdbs
(
MDB_env
*
env
MDB_dbi
dbs
)
;
int
mdb_env_get_maxkeysize
(
MDB_env
*
env
)
;
int
mdb_env_set_userctx
(
MDB_env
*
env
void
*
ctx
)
;
void
*
mdb_env_get_userctx
(
MDB_env
*
env
)
;
typedef
void
MDB_assert_func
(
MDB_env
*
env
const
char
*
msg
)
;
int
mdb_env_set_assert
(
MDB_env
*
env
MDB_assert_func
*
func
)
;
int
mdb_txn_begin
(
MDB_env
*
env
MDB_txn
*
parent
unsigned
int
flags
MDB_txn
*
*
txn
)
;
MDB_env
*
mdb_txn_env
(
MDB_txn
*
txn
)
;
size_t
mdb_txn_id
(
MDB_txn
*
txn
)
;
int
mdb_txn_commit
(
MDB_txn
*
txn
)
;
void
mdb_txn_abort
(
MDB_txn
*
txn
)
;
void
mdb_txn_reset
(
MDB_txn
*
txn
)
;
int
mdb_txn_renew
(
MDB_txn
*
txn
)
;
#
define
mdb_open
(
txn
name
flags
dbi
)
mdb_dbi_open
(
txn
name
flags
dbi
)
#
define
mdb_close
(
env
dbi
)
mdb_dbi_close
(
env
dbi
)
int
mdb_dbi_open
(
MDB_txn
*
txn
const
char
*
name
unsigned
int
flags
MDB_dbi
*
dbi
)
;
int
mdb_stat
(
MDB_txn
*
txn
MDB_dbi
dbi
MDB_stat
*
stat
)
;
int
mdb_dbi_flags
(
MDB_txn
*
txn
MDB_dbi
dbi
unsigned
int
*
flags
)
;
void
mdb_dbi_close
(
MDB_env
*
env
MDB_dbi
dbi
)
;
int
mdb_drop
(
MDB_txn
*
txn
MDB_dbi
dbi
int
del
)
;
int
mdb_set_compare
(
MDB_txn
*
txn
MDB_dbi
dbi
MDB_cmp_func
*
cmp
)
;
int
mdb_set_dupsort
(
MDB_txn
*
txn
MDB_dbi
dbi
MDB_cmp_func
*
cmp
)
;
int
mdb_set_relfunc
(
MDB_txn
*
txn
MDB_dbi
dbi
MDB_rel_func
*
rel
)
;
int
mdb_set_relctx
(
MDB_txn
*
txn
MDB_dbi
dbi
void
*
ctx
)
;
int
mdb_get
(
MDB_txn
*
txn
MDB_dbi
dbi
MDB_val
*
key
MDB_val
*
data
)
;
int
mdb_put
(
MDB_txn
*
txn
MDB_dbi
dbi
MDB_val
*
key
MDB_val
*
data
unsigned
int
flags
)
;
int
mdb_del
(
MDB_txn
*
txn
MDB_dbi
dbi
MDB_val
*
key
MDB_val
*
data
)
;
int
mdb_cursor_open
(
MDB_txn
*
txn
MDB_dbi
dbi
MDB_cursor
*
*
cursor
)
;
void
mdb_cursor_close
(
MDB_cursor
*
cursor
)
;
int
mdb_cursor_renew
(
MDB_txn
*
txn
MDB_cursor
*
cursor
)
;
MDB_txn
*
mdb_cursor_txn
(
MDB_cursor
*
cursor
)
;
MDB_dbi
mdb_cursor_dbi
(
MDB_cursor
*
cursor
)
;
int
mdb_cursor_get
(
MDB_cursor
*
cursor
MDB_val
*
key
MDB_val
*
data
MDB_cursor_op
op
)
;
int
mdb_cursor_put
(
MDB_cursor
*
cursor
MDB_val
*
key
MDB_val
*
data
unsigned
int
flags
)
;
int
mdb_cursor_del
(
MDB_cursor
*
cursor
unsigned
int
flags
)
;
int
mdb_cursor_count
(
MDB_cursor
*
cursor
size_t
*
countp
)
;
int
mdb_cmp
(
MDB_txn
*
txn
MDB_dbi
dbi
const
MDB_val
*
a
const
MDB_val
*
b
)
;
int
mdb_dcmp
(
MDB_txn
*
txn
MDB_dbi
dbi
const
MDB_val
*
a
const
MDB_val
*
b
)
;
typedef
int
(
MDB_msg_func
)
(
const
char
*
msg
void
*
ctx
)
;
int
mdb_reader_list
(
MDB_env
*
env
MDB_msg_func
*
func
void
*
ctx
)
;
int
mdb_reader_check
(
MDB_env
*
env
int
*
dead
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
