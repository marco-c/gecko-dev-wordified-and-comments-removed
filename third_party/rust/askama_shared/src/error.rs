use
std
:
:
fmt
:
:
{
self
Display
}
;
pub
type
Result
<
I
E
=
Error
>
=
:
:
std
:
:
result
:
:
Result
<
I
E
>
;
#
[
non_exhaustive
]
#
[
derive
(
Debug
)
]
pub
enum
Error
{
Fmt
(
fmt
:
:
Error
)
Custom
(
Box
<
dyn
std
:
:
error
:
:
Error
+
Send
+
Sync
>
)
#
[
cfg
(
feature
=
"
serde_json
"
)
]
Json
(
:
:
serde_json
:
:
Error
)
#
[
cfg
(
feature
=
"
serde_yaml
"
)
]
Yaml
(
:
:
serde_yaml
:
:
Error
)
}
impl
std
:
:
error
:
:
Error
for
Error
{
fn
cause
(
&
self
)
-
>
Option
<
&
dyn
std
:
:
error
:
:
Error
>
{
match
*
self
{
Error
:
:
Fmt
(
ref
err
)
=
>
err
.
source
(
)
Error
:
:
Custom
(
ref
err
)
=
>
Some
(
err
.
as_ref
(
)
)
#
[
cfg
(
feature
=
"
serde_json
"
)
]
Error
:
:
Json
(
ref
err
)
=
>
err
.
source
(
)
#
[
cfg
(
feature
=
"
serde_yaml
"
)
]
Error
:
:
Yaml
(
ref
err
)
=
>
err
.
source
(
)
}
}
}
impl
Display
for
Error
{
fn
fmt
(
&
self
formatter
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
self
{
Error
:
:
Fmt
(
err
)
=
>
write
!
(
formatter
"
formatting
error
:
{
}
"
err
)
Error
:
:
Custom
(
err
)
=
>
write
!
(
formatter
"
{
}
"
err
)
#
[
cfg
(
feature
=
"
serde_json
"
)
]
Error
:
:
Json
(
err
)
=
>
write
!
(
formatter
"
json
conversion
error
:
{
}
"
err
)
#
[
cfg
(
feature
=
"
serde_yaml
"
)
]
Error
:
:
Yaml
(
err
)
=
>
write
!
(
formatter
"
yaml
conversion
error
:
{
}
"
err
)
}
}
}
impl
From
<
fmt
:
:
Error
>
for
Error
{
fn
from
(
err
:
fmt
:
:
Error
)
-
>
Self
{
Error
:
:
Fmt
(
err
)
}
}
#
[
cfg
(
feature
=
"
serde_json
"
)
]
impl
From
<
:
:
serde_json
:
:
Error
>
for
Error
{
fn
from
(
err
:
:
:
serde_json
:
:
Error
)
-
>
Self
{
Error
:
:
Json
(
err
)
}
}
#
[
cfg
(
feature
=
"
serde_yaml
"
)
]
impl
From
<
:
:
serde_yaml
:
:
Error
>
for
Error
{
fn
from
(
err
:
:
:
serde_yaml
:
:
Error
)
-
>
Self
{
Error
:
:
Yaml
(
err
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
Error
;
trait
AssertSendSyncStatic
:
Send
+
Sync
+
'
static
{
}
impl
AssertSendSyncStatic
for
Error
{
}
}
