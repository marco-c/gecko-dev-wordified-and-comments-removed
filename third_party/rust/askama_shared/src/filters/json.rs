use
crate
:
:
error
:
:
{
Error
Result
}
;
use
askama_escape
:
:
JsonEscapeBuffer
;
use
serde
:
:
Serialize
;
use
serde_json
:
:
to_writer_pretty
;
pub
fn
json
<
S
:
Serialize
>
(
s
:
S
)
-
>
Result
<
String
>
{
let
mut
writer
=
JsonEscapeBuffer
:
:
new
(
)
;
to_writer_pretty
(
&
mut
writer
&
s
)
.
map_err
(
Error
:
:
from
)
?
;
Ok
(
writer
.
finish
(
)
)
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
test_json
(
)
{
assert_eq
!
(
json
(
true
)
.
unwrap
(
)
"
true
"
)
;
assert_eq
!
(
json
(
"
foo
"
)
.
unwrap
(
)
r
#
"
"
foo
"
"
#
)
;
assert_eq
!
(
json
(
&
true
)
.
unwrap
(
)
"
true
"
)
;
assert_eq
!
(
json
(
&
"
foo
"
)
.
unwrap
(
)
r
#
"
"
foo
"
"
#
)
;
assert_eq
!
(
json
(
&
vec
!
[
"
foo
"
"
bar
"
]
)
.
unwrap
(
)
r
#
"
[
"
foo
"
"
bar
"
]
"
#
)
;
}
}
