#
!
[
deny
(
missing_docs
missing_debug_implementations
warnings
)
]
#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
tokio
-
executor
/
0
.
1
.
3
"
)
]
extern
crate
futures
;
#
[
cfg
(
feature
=
"
unstable
-
futures
"
)
]
extern
crate
futures2
;
mod
enter
;
mod
global
;
pub
mod
park
;
pub
use
enter
:
:
{
enter
Enter
EnterError
}
;
pub
use
global
:
:
{
spawn
with_default
DefaultExecutor
}
;
#
[
cfg
(
feature
=
"
unstable
-
futures
"
)
]
pub
use
global
:
:
spawn2
;
use
futures
:
:
Future
;
pub
trait
Executor
{
fn
spawn
(
&
mut
self
future
:
Box
<
Future
<
Item
=
(
)
Error
=
(
)
>
+
Send
>
)
-
>
Result
<
(
)
SpawnError
>
;
#
[
cfg
(
feature
=
"
unstable
-
futures
"
)
]
fn
spawn2
(
&
mut
self
future
:
Box
<
futures2
:
:
Future
<
Item
=
(
)
Error
=
futures2
:
:
Never
>
+
Send
>
)
-
>
Result
<
(
)
futures2
:
:
executor
:
:
SpawnError
>
;
fn
status
(
&
self
)
-
>
Result
<
(
)
SpawnError
>
{
Ok
(
(
)
)
}
}
impl
<
E
:
Executor
+
?
Sized
>
Executor
for
Box
<
E
>
{
fn
spawn
(
&
mut
self
future
:
Box
<
Future
<
Item
=
(
)
Error
=
(
)
>
+
Send
>
)
-
>
Result
<
(
)
SpawnError
>
{
(
*
*
self
)
.
spawn
(
future
)
}
#
[
cfg
(
feature
=
"
unstable
-
futures
"
)
]
fn
spawn2
(
&
mut
self
future
:
Box
<
futures2
:
:
Future
<
Item
=
(
)
Error
=
futures2
:
:
Never
>
+
Send
>
)
-
>
Result
<
(
)
futures2
:
:
executor
:
:
SpawnError
>
{
(
*
*
self
)
.
spawn2
(
future
)
}
fn
status
(
&
self
)
-
>
Result
<
(
)
SpawnError
>
{
(
*
*
self
)
.
status
(
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
SpawnError
{
is_shutdown
:
bool
}
impl
SpawnError
{
pub
fn
shutdown
(
)
-
>
Self
{
SpawnError
{
is_shutdown
:
true
}
}
pub
fn
at_capacity
(
)
-
>
Self
{
SpawnError
{
is_shutdown
:
false
}
}
pub
fn
is_shutdown
(
&
self
)
-
>
bool
{
self
.
is_shutdown
}
pub
fn
is_at_capacity
(
&
self
)
-
>
bool
{
!
self
.
is_shutdown
}
}
