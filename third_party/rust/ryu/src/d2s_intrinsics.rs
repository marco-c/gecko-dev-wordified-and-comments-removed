#
[
cfg
(
not
(
integer128
)
)
]
#
[
cfg_attr
(
feature
=
"
no
-
panic
"
inline
)
]
pub
fn
umul128
(
a
:
u64
b
:
u64
)
-
>
(
u64
u64
)
{
let
a_lo
=
a
as
u32
;
let
a_hi
=
(
a
>
>
32
)
as
u32
;
let
b_lo
=
b
as
u32
;
let
b_hi
=
(
b
>
>
32
)
as
u32
;
let
b00
=
a_lo
as
u64
*
b_lo
as
u64
;
let
b01
=
a_lo
as
u64
*
b_hi
as
u64
;
let
b10
=
a_hi
as
u64
*
b_lo
as
u64
;
let
b11
=
a_hi
as
u64
*
b_hi
as
u64
;
let
b00_lo
=
b00
as
u32
;
let
b00_hi
=
(
b00
>
>
32
)
as
u32
;
let
mid1
=
b10
+
b00_hi
as
u64
;
let
mid1_lo
=
mid1
as
u32
;
let
mid1_hi
=
(
mid1
>
>
32
)
as
u32
;
let
mid2
=
b01
+
mid1_lo
as
u64
;
let
mid2_lo
=
mid2
as
u32
;
let
mid2_hi
=
(
mid2
>
>
32
)
as
u32
;
let
p_hi
=
b11
+
mid1_hi
as
u64
+
mid2_hi
as
u64
;
let
p_lo
=
(
(
mid2_lo
as
u64
)
<
<
32
)
|
b00_lo
as
u64
;
(
p_lo
p_hi
)
}
#
[
cfg
(
not
(
integer128
)
)
]
#
[
cfg_attr
(
feature
=
"
no
-
panic
"
inline
)
]
pub
fn
shiftright128
(
lo
:
u64
hi
:
u64
dist
:
u32
)
-
>
u64
{
debug_assert
!
(
dist
>
0
)
;
debug_assert
!
(
dist
<
64
)
;
(
hi
<
<
(
64
-
dist
)
)
|
(
lo
>
>
dist
)
}
#
[
cfg_attr
(
feature
=
"
no
-
panic
"
inline
)
]
pub
fn
div5
(
x
:
u64
)
-
>
u64
{
x
/
5
}
#
[
cfg_attr
(
feature
=
"
no
-
panic
"
inline
)
]
pub
fn
div10
(
x
:
u64
)
-
>
u64
{
x
/
10
}
#
[
cfg_attr
(
feature
=
"
no
-
panic
"
inline
)
]
pub
fn
div100
(
x
:
u64
)
-
>
u64
{
x
/
100
}
#
[
cfg_attr
(
feature
=
"
no
-
panic
"
inline
)
]
fn
pow5_factor
(
mut
value
:
u64
)
-
>
u32
{
let
mut
count
=
0u32
;
loop
{
debug_assert
!
(
value
!
=
0
)
;
let
q
=
div5
(
value
)
;
let
r
=
(
value
as
u32
)
.
wrapping_sub
(
5u32
.
wrapping_mul
(
q
as
u32
)
)
;
if
r
!
=
0
{
break
;
}
value
=
q
;
count
+
=
1
;
}
count
}
#
[
cfg_attr
(
feature
=
"
no
-
panic
"
inline
)
]
pub
fn
multiple_of_power_of_5
(
value
:
u64
p
:
u32
)
-
>
bool
{
pow5_factor
(
value
)
>
=
p
}
#
[
cfg_attr
(
feature
=
"
no
-
panic
"
inline
)
]
pub
fn
multiple_of_power_of_2
(
value
:
u64
p
:
u32
)
-
>
bool
{
debug_assert
!
(
value
!
=
0
)
;
(
value
&
(
(
1u64
<
<
p
)
-
1
)
)
=
=
0
}
