use
crate
:
:
{
impls
CryptoRng
Error
RngCore
}
;
use
getrandom
:
:
getrandom
;
#
[
cfg_attr
(
doc_cfg
doc
(
cfg
(
feature
=
"
getrandom
"
)
)
)
]
#
[
derive
(
Clone
Copy
Debug
Default
)
]
pub
struct
OsRng
;
impl
CryptoRng
for
OsRng
{
}
impl
RngCore
for
OsRng
{
fn
next_u32
(
&
mut
self
)
-
>
u32
{
impls
:
:
next_u32_via_fill
(
self
)
}
fn
next_u64
(
&
mut
self
)
-
>
u64
{
impls
:
:
next_u64_via_fill
(
self
)
}
fn
fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
{
if
let
Err
(
e
)
=
self
.
try_fill_bytes
(
dest
)
{
panic
!
(
"
Error
:
{
}
"
e
)
;
}
}
fn
try_fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
Error
>
{
getrandom
(
dest
)
?
;
Ok
(
(
)
)
}
}
#
[
test
]
fn
test_os_rng
(
)
{
let
x
=
OsRng
.
next_u64
(
)
;
let
y
=
OsRng
.
next_u64
(
)
;
assert
!
(
x
!
=
0
)
;
assert
!
(
x
!
=
y
)
;
}
#
[
test
]
fn
test_construction
(
)
{
let
mut
rng
=
OsRng
:
:
default
(
)
;
assert
!
(
rng
.
next_u64
(
)
!
=
0
)
;
}
