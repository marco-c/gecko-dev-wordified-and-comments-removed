#
!
[
doc
(
html_logo_url
=
"
https
:
/
/
www
.
rust
-
lang
.
org
/
logos
/
rust
-
logo
-
128x128
-
blk
.
png
"
html_favicon_url
=
"
https
:
/
/
www
.
rust
-
lang
.
org
/
favicon
.
ico
"
html_root_url
=
"
https
:
/
/
rust
-
random
.
github
.
io
/
rand
/
"
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
deny
(
missing_debug_implementations
)
]
#
!
[
doc
(
test
(
attr
(
allow
(
unused_variables
)
deny
(
warnings
)
)
)
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
cfg_attr
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
feature
(
alloc
)
)
]
#
[
cfg
(
feature
=
"
std
"
)
]
extern
crate
core
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
extern
crate
alloc
;
#
[
cfg
(
feature
=
"
serde1
"
)
]
extern
crate
serde
;
#
[
cfg
(
feature
=
"
serde1
"
)
]
#
[
macro_use
]
extern
crate
serde_derive
;
use
core
:
:
default
:
:
Default
;
use
core
:
:
convert
:
:
AsMut
;
use
core
:
:
ptr
:
:
copy_nonoverlapping
;
#
[
cfg
(
all
(
feature
=
"
alloc
"
not
(
feature
=
"
std
"
)
)
)
]
use
alloc
:
:
boxed
:
:
Box
;
pub
use
error
:
:
{
ErrorKind
Error
}
;
mod
error
;
pub
mod
block
;
pub
mod
impls
;
pub
mod
le
;
pub
trait
RngCore
{
fn
next_u32
(
&
mut
self
)
-
>
u32
;
fn
next_u64
(
&
mut
self
)
-
>
u64
;
fn
fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
;
fn
try_fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
Error
>
;
}
pub
trait
CryptoRng
{
}
pub
trait
SeedableRng
:
Sized
{
type
Seed
:
Sized
+
Default
+
AsMut
<
[
u8
]
>
;
fn
from_seed
(
seed
:
Self
:
:
Seed
)
-
>
Self
;
fn
seed_from_u64
(
mut
state
:
u64
)
-
>
Self
{
const
MUL
:
u64
=
6364136223846793005
;
const
INC
:
u64
=
11634580027462260723
;
let
mut
seed
=
Self
:
:
Seed
:
:
default
(
)
;
for
chunk
in
seed
.
as_mut
(
)
.
chunks_mut
(
4
)
{
state
=
state
.
wrapping_mul
(
MUL
)
.
wrapping_add
(
INC
)
;
let
xorshifted
=
(
(
(
state
>
>
18
)
^
state
)
>
>
27
)
as
u32
;
let
rot
=
(
state
>
>
59
)
as
u32
;
let
x
=
xorshifted
.
rotate_right
(
rot
)
.
to_le
(
)
;
unsafe
{
let
p
=
&
x
as
*
const
u32
as
*
const
u8
;
copy_nonoverlapping
(
p
chunk
.
as_mut_ptr
(
)
chunk
.
len
(
)
)
;
}
}
Self
:
:
from_seed
(
seed
)
}
fn
from_rng
<
R
:
RngCore
>
(
mut
rng
:
R
)
-
>
Result
<
Self
Error
>
{
let
mut
seed
=
Self
:
:
Seed
:
:
default
(
)
;
rng
.
try_fill_bytes
(
seed
.
as_mut
(
)
)
?
;
Ok
(
Self
:
:
from_seed
(
seed
)
)
}
}
impl
<
'
a
R
:
RngCore
+
?
Sized
>
RngCore
for
&
'
a
mut
R
{
#
[
inline
(
always
)
]
fn
next_u32
(
&
mut
self
)
-
>
u32
{
(
*
*
self
)
.
next_u32
(
)
}
#
[
inline
(
always
)
]
fn
next_u64
(
&
mut
self
)
-
>
u64
{
(
*
*
self
)
.
next_u64
(
)
}
#
[
inline
(
always
)
]
fn
fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
{
(
*
*
self
)
.
fill_bytes
(
dest
)
}
#
[
inline
(
always
)
]
fn
try_fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
Error
>
{
(
*
*
self
)
.
try_fill_bytes
(
dest
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
impl
<
R
:
RngCore
+
?
Sized
>
RngCore
for
Box
<
R
>
{
#
[
inline
(
always
)
]
fn
next_u32
(
&
mut
self
)
-
>
u32
{
(
*
*
self
)
.
next_u32
(
)
}
#
[
inline
(
always
)
]
fn
next_u64
(
&
mut
self
)
-
>
u64
{
(
*
*
self
)
.
next_u64
(
)
}
#
[
inline
(
always
)
]
fn
fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
{
(
*
*
self
)
.
fill_bytes
(
dest
)
}
#
[
inline
(
always
)
]
fn
try_fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
Error
>
{
(
*
*
self
)
.
try_fill_bytes
(
dest
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
std
:
:
io
:
:
Read
for
RngCore
{
fn
read
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
Result
<
usize
std
:
:
io
:
:
Error
>
{
self
.
try_fill_bytes
(
buf
)
?
;
Ok
(
buf
.
len
(
)
)
}
}
impl
<
'
a
R
:
CryptoRng
+
?
Sized
>
CryptoRng
for
&
'
a
mut
R
{
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
impl
<
R
:
CryptoRng
+
?
Sized
>
CryptoRng
for
Box
<
R
>
{
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
#
[
test
]
fn
test_seed_from_u64
(
)
{
struct
SeedableNum
(
u64
)
;
impl
SeedableRng
for
SeedableNum
{
type
Seed
=
[
u8
;
8
]
;
fn
from_seed
(
seed
:
Self
:
:
Seed
)
-
>
Self
{
let
mut
x
=
[
0u64
;
1
]
;
le
:
:
read_u64_into
(
&
seed
&
mut
x
)
;
SeedableNum
(
x
[
0
]
)
}
}
const
N
:
usize
=
8
;
const
SEEDS
:
[
u64
;
N
]
=
[
0u64
1
2
3
4
8
16
-
1i64
as
u64
]
;
let
mut
results
=
[
0u64
;
N
]
;
for
(
i
seed
)
in
SEEDS
.
iter
(
)
.
enumerate
(
)
{
let
SeedableNum
(
x
)
=
SeedableNum
:
:
seed_from_u64
(
*
seed
)
;
results
[
i
]
=
x
;
}
for
(
i1
r1
)
in
results
.
iter
(
)
.
enumerate
(
)
{
let
weight
=
r1
.
count_ones
(
)
;
assert
!
(
weight
>
=
20
&
&
weight
<
=
44
)
;
for
(
i2
r2
)
in
results
.
iter
(
)
.
enumerate
(
)
{
if
i1
=
=
i2
{
continue
;
}
let
diff_weight
=
(
r1
^
r2
)
.
count_ones
(
)
;
assert
!
(
diff_weight
>
=
20
)
;
}
}
assert_eq
!
(
results
[
0
]
5029875928683246316
)
;
}
}
