#
!
[
deny
(
warnings
)
]
use
std
:
:
convert
:
:
Infallible
;
use
std
:
:
error
:
:
Error
;
use
std
:
:
num
:
:
NonZeroU16
;
use
serde_derive
:
:
{
Deserialize
Serialize
}
;
use
warp
:
:
http
:
:
StatusCode
;
use
warp
:
:
{
reject
Filter
Rejection
Reply
}
;
#
[
tokio
:
:
main
]
async
fn
main
(
)
{
let
math
=
warp
:
:
path
!
(
"
math
"
/
u16
)
;
let
div_with_header
=
math
.
and
(
warp
:
:
get
(
)
)
.
and
(
div_by
(
)
)
.
map
(
|
num
:
u16
denom
:
NonZeroU16
|
{
warp
:
:
reply
:
:
json
(
&
Math
{
op
:
format
!
(
"
{
}
/
{
}
"
num
denom
)
output
:
num
/
denom
.
get
(
)
}
)
}
)
;
let
div_with_body
=
math
.
and
(
warp
:
:
post
(
)
)
.
and
(
warp
:
:
body
:
:
json
(
)
)
.
map
(
|
num
:
u16
body
:
DenomRequest
|
{
warp
:
:
reply
:
:
json
(
&
Math
{
op
:
format
!
(
"
{
}
/
{
}
"
num
body
.
denom
)
output
:
num
/
body
.
denom
.
get
(
)
}
)
}
)
;
let
routes
=
div_with_header
.
or
(
div_with_body
)
.
recover
(
handle_rejection
)
;
warp
:
:
serve
(
routes
)
.
run
(
(
[
127
0
0
1
]
3030
)
)
.
await
;
}
fn
div_by
(
)
-
>
impl
Filter
<
Extract
=
(
NonZeroU16
)
Error
=
Rejection
>
+
Copy
{
warp
:
:
header
:
:
<
u16
>
(
"
div
-
by
"
)
.
and_then
(
|
n
:
u16
|
async
move
{
if
let
Some
(
denom
)
=
NonZeroU16
:
:
new
(
n
)
{
Ok
(
denom
)
}
else
{
Err
(
reject
:
:
custom
(
DivideByZero
)
)
}
}
)
}
#
[
derive
(
Deserialize
)
]
struct
DenomRequest
{
pub
denom
:
NonZeroU16
}
#
[
derive
(
Debug
)
]
struct
DivideByZero
;
impl
reject
:
:
Reject
for
DivideByZero
{
}
#
[
derive
(
Serialize
)
]
struct
Math
{
op
:
String
output
:
u16
}
#
[
derive
(
Serialize
)
]
struct
ErrorMessage
{
code
:
u16
message
:
String
}
async
fn
handle_rejection
(
err
:
Rejection
)
-
>
Result
<
impl
Reply
Infallible
>
{
let
code
;
let
message
;
if
err
.
is_not_found
(
)
{
code
=
StatusCode
:
:
NOT_FOUND
;
message
=
"
NOT_FOUND
"
;
}
else
if
let
Some
(
DivideByZero
)
=
err
.
find
(
)
{
code
=
StatusCode
:
:
BAD_REQUEST
;
message
=
"
DIVIDE_BY_ZERO
"
;
}
else
if
let
Some
(
e
)
=
err
.
find
:
:
<
warp
:
:
filters
:
:
body
:
:
BodyDeserializeError
>
(
)
{
message
=
match
e
.
source
(
)
{
Some
(
cause
)
=
>
{
if
cause
.
to_string
(
)
.
contains
(
"
denom
"
)
{
"
FIELD_ERROR
:
denom
"
}
else
{
"
BAD_REQUEST
"
}
}
None
=
>
"
BAD_REQUEST
"
}
;
code
=
StatusCode
:
:
BAD_REQUEST
;
}
else
if
let
Some
(
_
)
=
err
.
find
:
:
<
warp
:
:
reject
:
:
MethodNotAllowed
>
(
)
{
code
=
StatusCode
:
:
METHOD_NOT_ALLOWED
;
message
=
"
METHOD_NOT_ALLOWED
"
;
}
else
{
eprintln
!
(
"
unhandled
rejection
:
{
:
?
}
"
err
)
;
code
=
StatusCode
:
:
INTERNAL_SERVER_ERROR
;
message
=
"
UNHANDLED_REJECTION
"
;
}
let
json
=
warp
:
:
reply
:
:
json
(
&
ErrorMessage
{
code
:
code
.
as_u16
(
)
message
:
message
.
into
(
)
}
)
;
Ok
(
warp
:
:
reply
:
:
with_status
(
json
code
)
)
}
