use
warp
:
:
Filter
;
#
[
tokio
:
:
test
]
async
fn
uses_tracing
(
)
{
let
subscriber
=
tracing_subscriber
:
:
fmt
(
)
.
with_env_filter
(
"
trace
"
)
.
without_time
(
)
.
finish
(
)
;
tracing
:
:
subscriber
:
:
set_global_default
(
subscriber
)
.
unwrap
(
)
;
tracing_log
:
:
LogTracer
:
:
init
(
)
.
unwrap
(
)
;
let
span
=
tracing
:
:
info_span
!
(
"
app
"
domain
=
"
www
.
example
.
org
"
)
;
let
_guard
=
span
.
enter
(
)
;
log
:
:
info
!
(
"
logged
using
log
macro
"
)
;
let
ok
=
warp
:
:
any
(
)
.
map
(
|
|
{
tracing
:
:
info
!
(
"
printed
for
every
request
"
)
;
}
)
.
untuple_one
(
)
.
and
(
warp
:
:
path
(
"
aa
"
)
)
.
map
(
|
|
{
tracing
:
:
info
!
(
"
only
printed
when
path
'
/
aa
'
matches
"
)
;
}
)
.
untuple_one
(
)
.
map
(
warp
:
:
reply
)
.
with
(
warp
:
:
trace
:
:
request
(
)
)
;
tracing
:
:
info
!
(
"
logged
using
tracing
macro
"
)
;
let
req
=
warp
:
:
test
:
:
request
(
)
;
let
resp
=
req
.
reply
(
&
ok
)
;
assert_eq
!
(
resp
.
await
.
status
(
)
404
)
;
let
req
=
warp
:
:
test
:
:
request
(
)
.
path
(
"
/
aa
"
)
;
let
resp
=
req
.
reply
(
&
ok
)
;
assert_eq
!
(
resp
.
await
.
status
(
)
200
)
;
}
