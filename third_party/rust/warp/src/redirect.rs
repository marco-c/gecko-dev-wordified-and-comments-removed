use
http
:
:
{
header
StatusCode
}
;
use
self
:
:
sealed
:
:
AsLocation
;
use
reply
:
:
{
self
Reply
}
;
pub
fn
redirect
(
uri
:
impl
AsLocation
)
-
>
impl
Reply
{
reply
:
:
with_header
(
StatusCode
:
:
MOVED_PERMANENTLY
header
:
:
LOCATION
uri
.
header_value
(
)
)
}
mod
sealed
{
use
bytes
:
:
Bytes
;
use
http
:
:
{
header
:
:
HeaderValue
Uri
}
;
pub
trait
AsLocation
:
Sealed
{
}
pub
trait
Sealed
{
fn
header_value
(
self
)
-
>
HeaderValue
;
}
impl
AsLocation
for
Uri
{
}
impl
Sealed
for
Uri
{
fn
header_value
(
self
)
-
>
HeaderValue
{
let
bytes
=
Bytes
:
:
from
(
self
.
to_string
(
)
)
;
HeaderValue
:
:
from_shared
(
bytes
)
.
expect
(
"
Uri
is
a
valid
HeaderValue
"
)
}
}
}
