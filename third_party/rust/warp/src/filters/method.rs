use
http
:
:
Method
;
use
filter
:
:
{
filter_fn
filter_fn_one
And
Filter
One
}
;
use
never
:
:
Never
;
use
reject
:
:
{
CombineRejection
Rejection
}
;
pub
use
self
:
:
v2
:
:
{
delete
as
delete2
get
as
get2
head
options
patch
post
as
post2
put
as
put2
}
;
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
warp
:
:
get2
(
)
is
meant
to
replace
get
(
)
"
)
]
pub
fn
get
<
F
>
(
filter
:
F
)
-
>
And
<
impl
Filter
<
Extract
=
(
)
Error
=
Rejection
>
+
Copy
F
>
where
F
:
Filter
+
Clone
F
:
:
Error
:
CombineRejection
<
Rejection
>
<
F
:
:
Error
as
CombineRejection
<
Rejection
>
>
:
:
Rejection
:
CombineRejection
<
Rejection
>
{
method_is
(
|
|
&
Method
:
:
GET
)
.
and
(
filter
)
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
warp
:
:
post2
(
)
is
meant
to
replace
post
(
)
"
)
]
pub
fn
post
<
F
>
(
filter
:
F
)
-
>
And
<
impl
Filter
<
Extract
=
(
)
Error
=
Rejection
>
+
Copy
F
>
where
F
:
Filter
+
Clone
F
:
:
Error
:
CombineRejection
<
Rejection
>
<
F
:
:
Error
as
CombineRejection
<
Rejection
>
>
:
:
Rejection
:
CombineRejection
<
Rejection
>
{
method_is
(
|
|
&
Method
:
:
POST
)
.
and
(
filter
)
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
warp
:
:
put2
(
)
is
meant
to
replace
put
(
)
"
)
]
pub
fn
put
<
F
>
(
filter
:
F
)
-
>
And
<
impl
Filter
<
Extract
=
(
)
Error
=
Rejection
>
+
Copy
F
>
where
F
:
Filter
+
Clone
F
:
:
Error
:
CombineRejection
<
Rejection
>
<
F
:
:
Error
as
CombineRejection
<
Rejection
>
>
:
:
Rejection
:
CombineRejection
<
Rejection
>
{
method_is
(
|
|
&
Method
:
:
PUT
)
.
and
(
filter
)
}
#
[
doc
(
hidden
)
]
#
[
deprecated
(
note
=
"
warp
:
:
delete2
(
)
is
meant
to
replace
delete
(
)
"
)
]
pub
fn
delete
<
F
>
(
filter
:
F
)
-
>
And
<
impl
Filter
<
Extract
=
(
)
Error
=
Rejection
>
+
Copy
F
>
where
F
:
Filter
+
Clone
F
:
:
Error
:
CombineRejection
<
Rejection
>
<
F
:
:
Error
as
CombineRejection
<
Rejection
>
>
:
:
Rejection
:
CombineRejection
<
Rejection
>
{
method_is
(
|
|
&
Method
:
:
DELETE
)
.
and
(
filter
)
}
pub
fn
method
(
)
-
>
impl
Filter
<
Extract
=
One
<
Method
>
Error
=
Never
>
+
Copy
{
filter_fn_one
(
|
route
|
Ok
:
:
<
_
Never
>
(
route
.
method
(
)
.
clone
(
)
)
)
}
fn
method_is
<
F
>
(
func
:
F
)
-
>
impl
Filter
<
Extract
=
(
)
Error
=
Rejection
>
+
Copy
where
F
:
Fn
(
)
-
>
&
'
static
Method
+
Copy
{
filter_fn
(
move
|
route
|
{
let
method
=
func
(
)
;
trace
!
(
"
method
:
:
{
:
?
}
?
:
{
:
?
}
"
method
route
.
method
(
)
)
;
if
route
.
method
(
)
=
=
method
{
Ok
(
(
)
)
}
else
{
Err
(
:
:
reject
:
:
method_not_allowed
(
)
)
}
}
)
}
pub
mod
v2
{
use
http
:
:
Method
;
use
filter
:
:
Filter
;
use
reject
:
:
Rejection
;
use
super
:
:
method_is
;
pub
fn
get
(
)
-
>
impl
Filter
<
Extract
=
(
)
Error
=
Rejection
>
+
Copy
{
method_is
(
|
|
&
Method
:
:
GET
)
}
pub
fn
post
(
)
-
>
impl
Filter
<
Extract
=
(
)
Error
=
Rejection
>
+
Copy
{
method_is
(
|
|
&
Method
:
:
POST
)
}
pub
fn
put
(
)
-
>
impl
Filter
<
Extract
=
(
)
Error
=
Rejection
>
+
Copy
{
method_is
(
|
|
&
Method
:
:
PUT
)
}
pub
fn
delete
(
)
-
>
impl
Filter
<
Extract
=
(
)
Error
=
Rejection
>
+
Copy
{
method_is
(
|
|
&
Method
:
:
DELETE
)
}
pub
fn
head
(
)
-
>
impl
Filter
<
Extract
=
(
)
Error
=
Rejection
>
+
Copy
{
method_is
(
|
|
&
Method
:
:
HEAD
)
}
pub
fn
options
(
)
-
>
impl
Filter
<
Extract
=
(
)
Error
=
Rejection
>
+
Copy
{
method_is
(
|
|
&
Method
:
:
OPTIONS
)
}
pub
fn
patch
(
)
-
>
impl
Filter
<
Extract
=
(
)
Error
=
Rejection
>
+
Copy
{
method_is
(
|
|
&
Method
:
:
PATCH
)
}
}
