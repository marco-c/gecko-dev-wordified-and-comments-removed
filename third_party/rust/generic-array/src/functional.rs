use
super
:
:
ArrayLength
;
use
core
:
:
iter
:
:
FromIterator
;
use
crate
:
:
sequence
:
:
*
;
pub
unsafe
trait
MappedGenericSequence
<
T
U
>
:
GenericSequence
<
T
>
where
Self
:
:
Length
:
ArrayLength
<
U
>
{
type
Mapped
:
GenericSequence
<
U
Length
=
Self
:
:
Length
>
;
}
unsafe
impl
<
'
a
T
U
S
:
MappedGenericSequence
<
T
U
>
>
MappedGenericSequence
<
T
U
>
for
&
'
a
S
where
&
'
a
S
:
GenericSequence
<
T
>
S
:
GenericSequence
<
T
Length
=
<
&
'
a
S
as
GenericSequence
<
T
>
>
:
:
Length
>
<
S
as
GenericSequence
<
T
>
>
:
:
Length
:
ArrayLength
<
U
>
{
type
Mapped
=
<
S
as
MappedGenericSequence
<
T
U
>
>
:
:
Mapped
;
}
unsafe
impl
<
'
a
T
U
S
:
MappedGenericSequence
<
T
U
>
>
MappedGenericSequence
<
T
U
>
for
&
'
a
mut
S
where
&
'
a
mut
S
:
GenericSequence
<
T
>
S
:
GenericSequence
<
T
Length
=
<
&
'
a
mut
S
as
GenericSequence
<
T
>
>
:
:
Length
>
<
S
as
GenericSequence
<
T
>
>
:
:
Length
:
ArrayLength
<
U
>
{
type
Mapped
=
<
S
as
MappedGenericSequence
<
T
U
>
>
:
:
Mapped
;
}
pub
type
MappedSequence
<
S
T
U
>
=
<
<
S
as
MappedGenericSequence
<
T
U
>
>
:
:
Mapped
as
GenericSequence
<
U
>
>
:
:
Sequence
;
pub
unsafe
trait
FunctionalSequence
<
T
>
:
GenericSequence
<
T
>
{
fn
map
<
U
F
>
(
self
f
:
F
)
-
>
MappedSequence
<
Self
T
U
>
where
Self
:
MappedGenericSequence
<
T
U
>
Self
:
:
Length
:
ArrayLength
<
U
>
F
:
FnMut
(
Self
:
:
Item
)
-
>
U
{
FromIterator
:
:
from_iter
(
self
.
into_iter
(
)
.
map
(
f
)
)
}
#
[
inline
]
fn
zip
<
B
Rhs
U
F
>
(
self
rhs
:
Rhs
f
:
F
)
-
>
MappedSequence
<
Self
T
U
>
where
Self
:
MappedGenericSequence
<
T
U
>
Rhs
:
MappedGenericSequence
<
B
U
Mapped
=
MappedSequence
<
Self
T
U
>
>
Self
:
:
Length
:
ArrayLength
<
B
>
+
ArrayLength
<
U
>
Rhs
:
GenericSequence
<
B
Length
=
Self
:
:
Length
>
F
:
FnMut
(
Self
:
:
Item
Rhs
:
:
Item
)
-
>
U
{
rhs
.
inverted_zip2
(
self
f
)
}
fn
fold
<
U
F
>
(
self
init
:
U
f
:
F
)
-
>
U
where
F
:
FnMut
(
U
Self
:
:
Item
)
-
>
U
{
self
.
into_iter
(
)
.
fold
(
init
f
)
}
}
unsafe
impl
<
'
a
T
S
:
GenericSequence
<
T
>
>
FunctionalSequence
<
T
>
for
&
'
a
S
where
&
'
a
S
:
GenericSequence
<
T
>
{
}
unsafe
impl
<
'
a
T
S
:
GenericSequence
<
T
>
>
FunctionalSequence
<
T
>
for
&
'
a
mut
S
where
&
'
a
mut
S
:
GenericSequence
<
T
>
{
}
