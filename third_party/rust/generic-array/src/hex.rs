use
core
:
:
{
fmt
str
ops
:
:
Add
cmp
:
:
min
}
;
use
typenum
:
:
*
;
use
crate
:
:
{
ArrayLength
GenericArray
}
;
static
LOWER_CHARS
:
&
'
static
[
u8
]
=
b
"
0123456789abcdef
"
;
static
UPPER_CHARS
:
&
'
static
[
u8
]
=
b
"
0123456789ABCDEF
"
;
impl
<
T
:
ArrayLength
<
u8
>
>
fmt
:
:
LowerHex
for
GenericArray
<
u8
T
>
where
T
:
Add
<
T
>
<
T
as
Add
<
T
>
>
:
:
Output
:
ArrayLength
<
u8
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
let
max_digits
=
f
.
precision
(
)
.
unwrap_or_else
(
|
|
self
.
len
(
)
*
2
)
;
let
max_hex
=
(
max_digits
>
>
1
)
+
(
max_digits
&
1
)
;
if
T
:
:
USIZE
<
1024
{
let
mut
res
=
GenericArray
:
:
<
u8
Sum
<
T
T
>
>
:
:
default
(
)
;
self
.
iter
(
)
.
take
(
max_hex
)
.
enumerate
(
)
.
for_each
(
|
(
i
c
)
|
{
res
[
i
*
2
]
=
LOWER_CHARS
[
(
c
>
>
4
)
as
usize
]
;
res
[
i
*
2
+
1
]
=
LOWER_CHARS
[
(
c
&
0xF
)
as
usize
]
;
}
)
;
f
.
write_str
(
unsafe
{
str
:
:
from_utf8_unchecked
(
&
res
[
.
.
max_digits
]
)
}
)
?
;
}
else
{
let
mut
buf
=
[
0u8
;
2048
]
;
let
mut
digits_left
=
max_digits
;
for
chunk
in
self
[
.
.
max_hex
]
.
chunks
(
1024
)
{
chunk
.
iter
(
)
.
enumerate
(
)
.
for_each
(
|
(
i
c
)
|
{
buf
[
i
*
2
]
=
LOWER_CHARS
[
(
c
>
>
4
)
as
usize
]
;
buf
[
i
*
2
+
1
]
=
LOWER_CHARS
[
(
c
&
0xF
)
as
usize
]
;
}
)
;
let
n
=
min
(
chunk
.
len
(
)
*
2
digits_left
)
;
f
.
write_str
(
unsafe
{
str
:
:
from_utf8_unchecked
(
&
buf
[
.
.
n
]
)
}
)
?
;
digits_left
-
=
n
;
}
}
Ok
(
(
)
)
}
}
impl
<
T
:
ArrayLength
<
u8
>
>
fmt
:
:
UpperHex
for
GenericArray
<
u8
T
>
where
T
:
Add
<
T
>
<
T
as
Add
<
T
>
>
:
:
Output
:
ArrayLength
<
u8
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
let
max_digits
=
f
.
precision
(
)
.
unwrap_or_else
(
|
|
self
.
len
(
)
*
2
)
;
let
max_hex
=
(
max_digits
>
>
1
)
+
(
max_digits
&
1
)
;
if
T
:
:
USIZE
<
1024
{
let
mut
res
=
GenericArray
:
:
<
u8
Sum
<
T
T
>
>
:
:
default
(
)
;
self
.
iter
(
)
.
take
(
max_hex
)
.
enumerate
(
)
.
for_each
(
|
(
i
c
)
|
{
res
[
i
*
2
]
=
UPPER_CHARS
[
(
c
>
>
4
)
as
usize
]
;
res
[
i
*
2
+
1
]
=
UPPER_CHARS
[
(
c
&
0xF
)
as
usize
]
;
}
)
;
f
.
write_str
(
unsafe
{
str
:
:
from_utf8_unchecked
(
&
res
[
.
.
max_digits
]
)
}
)
?
;
}
else
{
let
mut
buf
=
[
0u8
;
2048
]
;
let
mut
digits_left
=
max_digits
;
for
chunk
in
self
[
.
.
max_hex
]
.
chunks
(
1024
)
{
chunk
.
iter
(
)
.
enumerate
(
)
.
for_each
(
|
(
i
c
)
|
{
buf
[
i
*
2
]
=
UPPER_CHARS
[
(
c
>
>
4
)
as
usize
]
;
buf
[
i
*
2
+
1
]
=
UPPER_CHARS
[
(
c
&
0xF
)
as
usize
]
;
}
)
;
let
n
=
min
(
chunk
.
len
(
)
*
2
digits_left
)
;
f
.
write_str
(
unsafe
{
str
:
:
from_utf8_unchecked
(
&
buf
[
.
.
n
]
)
}
)
?
;
digits_left
-
=
n
;
}
}
Ok
(
(
)
)
}
}
