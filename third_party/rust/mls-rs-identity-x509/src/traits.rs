use
crate
:
:
{
DerCertificate
DerCertificateRequest
}
;
use
alloc
:
:
vec
:
:
Vec
;
use
mls_rs_core
:
:
{
crypto
:
:
SignaturePublicKey
error
:
:
IntoAnyError
}
;
#
[
cfg
(
all
(
test
feature
=
"
std
"
)
)
]
use
mockall
:
:
automock
;
use
alloc
:
:
string
:
:
String
;
#
[
derive
(
Debug
Clone
PartialEq
Eq
Hash
)
]
pub
enum
SubjectAltName
{
Email
(
String
)
Uri
(
String
)
Dns
(
String
)
Rid
(
String
)
Ip
(
String
)
}
#
[
derive
(
Debug
Clone
PartialEq
Eq
Hash
)
]
pub
enum
SubjectComponent
{
CommonName
(
String
)
Surname
(
String
)
SerialNumber
(
String
)
CountryName
(
String
)
Locality
(
String
)
State
(
String
)
StreetAddress
(
String
)
OrganizationName
(
String
)
OrganizationalUnit
(
String
)
Title
(
String
)
GivenName
(
String
)
EmailAddress
(
String
)
UserId
(
String
)
DomainComponent
(
String
)
Initials
(
String
)
GenerationQualifier
(
String
)
DistinguishedNameQualifier
(
String
)
Pseudonym
(
String
)
}
#
[
derive
(
Debug
Clone
Default
PartialEq
Eq
)
]
pub
struct
CertificateRequestParameters
{
pub
subject
:
Vec
<
SubjectComponent
>
pub
subject_alt_names
:
Vec
<
SubjectAltName
>
pub
is_ca
:
bool
}
#
[
cfg_attr
(
all
(
test
feature
=
"
std
"
)
automock
(
type
Error
=
crate
:
:
test_utils
:
:
TestError
;
)
)
]
pub
trait
X509RequestWriter
{
type
Error
:
IntoAnyError
;
fn
write
(
&
self
params
:
CertificateRequestParameters
)
-
>
Result
<
DerCertificateRequest
Self
:
:
Error
>
;
}
#
[
cfg_attr
(
all
(
test
feature
=
"
std
"
)
automock
(
type
Error
=
crate
:
:
test_utils
:
:
TestError
;
)
)
]
pub
trait
X509CertificateReader
{
type
Error
:
IntoAnyError
;
fn
subject_bytes
(
&
self
certificate
:
&
DerCertificate
)
-
>
Result
<
Vec
<
u8
>
Self
:
:
Error
>
;
fn
subject_components
(
&
self
certificate
:
&
DerCertificate
)
-
>
Result
<
Vec
<
SubjectComponent
>
Self
:
:
Error
>
;
fn
subject_alt_names
(
&
self
certificate
:
&
DerCertificate
)
-
>
Result
<
Vec
<
SubjectAltName
>
Self
:
:
Error
>
;
fn
public_key
(
&
self
certificate
:
&
DerCertificate
)
-
>
Result
<
SignaturePublicKey
Self
:
:
Error
>
;
}
