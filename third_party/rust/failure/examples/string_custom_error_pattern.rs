extern
crate
core
;
extern
crate
failure
;
use
core
:
:
fmt
:
:
{
self
Display
}
;
use
failure
:
:
{
Backtrace
Context
Fail
ResultExt
}
;
fn
main
(
)
{
let
err
=
err1
(
)
.
unwrap_err
(
)
;
println
!
(
"
error
:
{
}
"
err
)
;
for
cause
in
Fail
:
:
iter_causes
(
&
err
)
{
println
!
(
"
caused
by
:
{
}
"
cause
)
;
}
}
fn
err1
(
)
-
>
Result
<
(
)
MyError
>
{
Ok
(
err2
(
)
.
context
(
"
err1
"
.
to_string
(
)
)
?
)
}
fn
err2
(
)
-
>
Result
<
(
)
MyError
>
{
Ok
(
err3
(
)
.
context
(
"
err2
"
)
?
)
}
fn
err3
(
)
-
>
Result
<
(
)
MyError
>
{
Ok
(
Err
(
MyError
:
:
from
(
"
err3
"
)
)
?
)
}
#
[
derive
(
Debug
)
]
pub
struct
MyError
{
inner
:
Context
<
String
>
}
impl
Fail
for
MyError
{
fn
cause
(
&
self
)
-
>
Option
<
&
Fail
>
{
self
.
inner
.
cause
(
)
}
fn
backtrace
(
&
self
)
-
>
Option
<
&
Backtrace
>
{
self
.
inner
.
backtrace
(
)
}
}
impl
Display
for
MyError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
Display
:
:
fmt
(
&
self
.
inner
f
)
}
}
impl
From
<
&
'
static
str
>
for
MyError
{
fn
from
(
msg
:
&
'
static
str
)
-
>
MyError
{
MyError
{
inner
:
Context
:
:
new
(
msg
.
into
(
)
)
}
}
}
impl
From
<
Context
<
String
>
>
for
MyError
{
fn
from
(
inner
:
Context
<
String
>
)
-
>
MyError
{
MyError
{
inner
}
}
}
impl
From
<
Context
<
&
'
static
str
>
>
for
MyError
{
fn
from
(
inner
:
Context
<
&
'
static
str
>
)
-
>
MyError
{
MyError
{
inner
:
inner
.
map
(
|
s
|
s
.
to_string
(
)
)
}
}
}
