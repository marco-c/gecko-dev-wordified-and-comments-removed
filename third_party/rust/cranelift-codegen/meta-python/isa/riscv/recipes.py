"
"
"
RISC
-
V
Encoding
recipes
.
The
encoding
recipes
defined
here
more
or
less
correspond
to
the
RISC
-
V
native
instruction
formats
described
in
the
reference
:
    
The
RISC
-
V
Instruction
Set
Manual
    
Volume
I
:
User
-
Level
ISA
    
Version
2
.
1
"
"
"
from
__future__
import
absolute_import
from
cdsl
.
isa
import
EncRecipe
from
cdsl
.
predicates
import
IsSignedInt
from
cdsl
.
registers
import
Stack
from
base
.
formats
import
Binary
BinaryImm
MultiAry
IntCompare
IntCompareImm
from
base
.
formats
import
Unary
UnaryImm
BranchIcmp
Branch
Jump
from
base
.
formats
import
Call
CallIndirect
RegMove
from
.
registers
import
GPR
def
LOAD
(
funct3
)
:
    
assert
funct3
<
=
0b111
    
return
0b00000
|
(
funct3
<
<
5
)
def
STORE
(
funct3
)
:
    
assert
funct3
<
=
0b111
    
return
0b01000
|
(
funct3
<
<
5
)
def
BRANCH
(
funct3
)
:
    
assert
funct3
<
=
0b111
    
return
0b11000
|
(
funct3
<
<
5
)
def
JALR
(
funct3
=
0
)
:
    
assert
funct3
<
=
0b111
    
return
0b11001
|
(
funct3
<
<
5
)
def
JAL
(
)
:
    
return
0b11011
def
OPIMM
(
funct3
funct7
=
0
)
:
    
assert
funct3
<
=
0b111
    
return
0b00100
|
(
funct3
<
<
5
)
|
(
funct7
<
<
8
)
def
OPIMM32
(
funct3
funct7
=
0
)
:
    
assert
funct3
<
=
0b111
    
return
0b00110
|
(
funct3
<
<
5
)
|
(
funct7
<
<
8
)
def
OP
(
funct3
funct7
)
:
    
assert
funct3
<
=
0b111
    
assert
funct7
<
=
0b1111111
    
return
0b01100
|
(
funct3
<
<
5
)
|
(
funct7
<
<
8
)
def
OP32
(
funct3
funct7
)
:
    
assert
funct3
<
=
0b111
    
assert
funct7
<
=
0b1111111
    
return
0b01110
|
(
funct3
<
<
5
)
|
(
funct7
<
<
8
)
def
AIUPC
(
)
:
    
return
0b00101
def
LUI
(
)
:
    
return
0b01101
R
=
EncRecipe
(
        
'
R
'
Binary
size
=
4
ins
=
(
GPR
GPR
)
outs
=
GPR
        
emit
=
'
put_r
(
bits
in_reg0
in_reg1
out_reg0
sink
)
;
'
)
Rshamt
=
EncRecipe
(
        
'
Rshamt
'
BinaryImm
size
=
4
ins
=
GPR
outs
=
GPR
        
emit
=
'
put_rshamt
(
bits
in_reg0
imm
.
into
(
)
out_reg0
sink
)
;
'
)
Ricmp
=
EncRecipe
(
        
'
Ricmp
'
IntCompare
size
=
4
ins
=
(
GPR
GPR
)
outs
=
GPR
        
emit
=
'
put_r
(
bits
in_reg0
in_reg1
out_reg0
sink
)
;
'
)
Ii
=
EncRecipe
(
        
'
Ii
'
BinaryImm
size
=
4
ins
=
GPR
outs
=
GPR
        
instp
=
IsSignedInt
(
BinaryImm
.
imm
12
)
        
emit
=
'
put_i
(
bits
in_reg0
imm
.
into
(
)
out_reg0
sink
)
;
'
)
Iz
=
EncRecipe
(
        
'
Iz
'
UnaryImm
size
=
4
ins
=
(
)
outs
=
GPR
        
instp
=
IsSignedInt
(
UnaryImm
.
imm
12
)
        
emit
=
'
put_i
(
bits
0
imm
.
into
(
)
out_reg0
sink
)
;
'
)
Iicmp
=
EncRecipe
(
        
'
Iicmp
'
IntCompareImm
size
=
4
ins
=
GPR
outs
=
GPR
        
instp
=
IsSignedInt
(
IntCompareImm
.
imm
12
)
        
emit
=
'
put_i
(
bits
in_reg0
imm
.
into
(
)
out_reg0
sink
)
;
'
)
Iret
=
EncRecipe
(
        
'
Iret
'
MultiAry
size
=
4
ins
=
(
)
outs
=
(
)
        
emit
=
'
'
'
        
/
/
Return
instructions
are
always
a
jalr
to
%
x1
.
        
/
/
The
return
address
is
provided
as
a
special
-
purpose
link
argument
.
        
put_i
(
            
bits
            
1
/
/
rs1
=
%
x1
            
0
/
/
no
offset
.
            
0
/
/
rd
=
%
x0
:
no
address
written
.
            
sink
        
)
;
        
'
'
'
)
Icall
=
EncRecipe
(
        
'
Icall
'
CallIndirect
size
=
4
ins
=
GPR
outs
=
(
)
        
emit
=
'
'
'
        
/
/
call_indirect
instructions
are
jalr
with
rd
=
%
x1
.
        
put_i
(
            
bits
            
in_reg0
            
0
/
/
no
offset
.
            
1
/
/
rd
=
%
x1
:
link
register
.
            
sink
        
)
;
        
'
'
'
)
Icopy
=
EncRecipe
(
        
'
Icopy
'
Unary
size
=
4
ins
=
GPR
outs
=
GPR
        
emit
=
'
put_i
(
bits
in_reg0
0
out_reg0
sink
)
;
'
)
Irmov
=
EncRecipe
(
        
'
Irmov
'
RegMove
size
=
4
ins
=
GPR
outs
=
(
)
        
emit
=
'
put_i
(
bits
src
0
dst
sink
)
;
'
)
U
=
EncRecipe
(
        
'
U
'
UnaryImm
size
=
4
ins
=
(
)
outs
=
GPR
        
instp
=
IsSignedInt
(
UnaryImm
.
imm
32
12
)
        
emit
=
'
put_u
(
bits
imm
.
into
(
)
out_reg0
sink
)
;
'
)
UJ
=
EncRecipe
(
        
'
UJ
'
Jump
size
=
4
ins
=
(
)
outs
=
(
)
branch_range
=
(
0
21
)
        
emit
=
'
'
'
        
let
dest
=
i64
:
:
from
(
func
.
offsets
[
destination
]
)
;
        
let
disp
=
dest
-
i64
:
:
from
(
sink
.
offset
(
)
)
;
        
put_uj
(
bits
disp
0
sink
)
;
        
'
'
'
)
UJcall
=
EncRecipe
(
        
'
UJcall
'
Call
size
=
4
ins
=
(
)
outs
=
(
)
        
emit
=
'
'
'
        
sink
.
reloc_external
(
Reloc
:
:
RiscvCall
                            
&
func
.
dfg
.
ext_funcs
[
func_ref
]
.
name
                            
0
)
;
        
/
/
rd
=
%
x1
is
the
standard
link
register
.
        
put_uj
(
bits
0
1
sink
)
;
        
'
'
'
)
SB
=
EncRecipe
(
        
'
SB
'
BranchIcmp
size
=
4
        
ins
=
(
GPR
GPR
)
outs
=
(
)
        
branch_range
=
(
0
13
)
        
emit
=
'
'
'
        
let
dest
=
i64
:
:
from
(
func
.
offsets
[
destination
]
)
;
        
let
disp
=
dest
-
i64
:
:
from
(
sink
.
offset
(
)
)
;
        
put_sb
(
bits
disp
in_reg0
in_reg1
sink
)
;
        
'
'
'
)
SBzero
=
EncRecipe
(
        
'
SBzero
'
Branch
size
=
4
        
ins
=
(
GPR
)
outs
=
(
)
        
branch_range
=
(
0
13
)
        
emit
=
'
'
'
        
let
dest
=
i64
:
:
from
(
func
.
offsets
[
destination
]
)
;
        
let
disp
=
dest
-
i64
:
:
from
(
sink
.
offset
(
)
)
;
        
put_sb
(
bits
disp
in_reg0
0
sink
)
;
        
'
'
'
)
GPsp
=
EncRecipe
(
        
'
GPsp
'
Unary
size
=
4
        
ins
=
GPR
outs
=
Stack
(
GPR
)
        
emit
=
'
unimplemented
!
(
)
;
'
)
GPfi
=
EncRecipe
(
        
'
GPfi
'
Unary
size
=
4
        
ins
=
Stack
(
GPR
)
outs
=
GPR
        
emit
=
'
unimplemented
!
(
)
;
'
)
