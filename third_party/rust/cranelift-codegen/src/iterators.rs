pub
trait
IteratorExtras
:
Iterator
{
fn
adjacent_pairs
(
mut
self
)
-
>
AdjacentPairs
<
Self
>
where
Self
:
Sized
Self
:
:
Item
:
Clone
{
let
elem
=
self
.
next
(
)
;
AdjacentPairs
{
iter
:
self
elem
}
}
}
impl
<
T
>
IteratorExtras
for
T
where
T
:
Iterator
{
}
pub
struct
AdjacentPairs
<
I
>
where
I
:
Iterator
I
:
:
Item
:
Clone
{
iter
:
I
elem
:
Option
<
I
:
:
Item
>
}
impl
<
I
>
Iterator
for
AdjacentPairs
<
I
>
where
I
:
Iterator
I
:
:
Item
:
Clone
{
type
Item
=
(
I
:
:
Item
I
:
:
Item
)
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
elem
.
take
(
)
.
and_then
(
|
e
|
{
self
.
elem
=
self
.
iter
.
next
(
)
;
self
.
elem
.
clone
(
)
.
map
(
|
n
|
(
e
n
)
)
}
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
alloc
:
:
vec
:
:
Vec
;
#
[
test
]
fn
adjpairs
(
)
{
use
super
:
:
IteratorExtras
;
assert_eq
!
(
[
1
2
3
4
]
.
iter
(
)
.
cloned
(
)
.
adjacent_pairs
(
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
vec
!
[
(
1
2
)
(
2
3
)
(
3
4
)
]
)
;
assert_eq
!
(
[
2
3
4
]
.
iter
(
)
.
cloned
(
)
.
adjacent_pairs
(
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
vec
!
[
(
2
3
)
(
3
4
)
]
)
;
assert_eq
!
(
[
2
3
4
]
.
iter
(
)
.
cloned
(
)
.
adjacent_pairs
(
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
vec
!
[
(
2
3
)
(
3
4
)
]
)
;
assert_eq
!
(
[
3
4
]
.
iter
(
)
.
cloned
(
)
.
adjacent_pairs
(
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
vec
!
[
(
3
4
)
]
)
;
assert_eq
!
(
[
4
]
.
iter
(
)
.
cloned
(
)
.
adjacent_pairs
(
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
vec
!
[
]
)
;
assert_eq
!
(
[
]
.
iter
(
)
.
cloned
(
)
.
adjacent_pairs
(
)
.
collect
:
:
<
Vec
<
(
i32
i32
)
>
>
(
)
vec
!
[
]
)
;
}
}
