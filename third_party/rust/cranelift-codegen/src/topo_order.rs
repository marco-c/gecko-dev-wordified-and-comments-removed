use
crate
:
:
dominator_tree
:
:
DominatorTree
;
use
crate
:
:
entity
:
:
EntitySet
;
use
crate
:
:
ir
:
:
{
Block
Layout
}
;
use
alloc
:
:
vec
:
:
Vec
;
pub
struct
TopoOrder
{
preferred
:
Vec
<
Block
>
next
:
usize
visited
:
EntitySet
<
Block
>
stack
:
Vec
<
Block
>
}
impl
TopoOrder
{
pub
fn
new
(
)
-
>
Self
{
Self
{
preferred
:
Vec
:
:
new
(
)
next
:
0
visited
:
EntitySet
:
:
new
(
)
stack
:
Vec
:
:
new
(
)
}
}
pub
fn
clear
(
&
mut
self
)
{
self
.
preferred
.
clear
(
)
;
self
.
next
=
0
;
self
.
visited
.
clear
(
)
;
self
.
stack
.
clear
(
)
;
}
pub
fn
reset
<
Blocks
>
(
&
mut
self
preferred
:
Blocks
)
where
Blocks
:
IntoIterator
<
Item
=
Block
>
{
self
.
preferred
.
clear
(
)
;
self
.
preferred
.
extend
(
preferred
)
;
self
.
next
=
0
;
self
.
visited
.
clear
(
)
;
self
.
stack
.
clear
(
)
;
}
pub
fn
next
(
&
mut
self
layout
:
&
Layout
domtree
:
&
DominatorTree
)
-
>
Option
<
Block
>
{
self
.
visited
.
resize
(
layout
.
block_capacity
(
)
)
;
while
self
.
stack
.
is_empty
(
)
{
match
self
.
preferred
.
get
(
self
.
next
)
.
cloned
(
)
{
None
=
>
return
None
Some
(
mut
block
)
=
>
{
self
.
next
+
=
1
;
while
self
.
visited
.
insert
(
block
)
{
self
.
stack
.
push
(
block
)
;
match
domtree
.
idom
(
block
)
{
Some
(
idom
)
=
>
{
block
=
layout
.
inst_block
(
idom
)
.
expect
(
"
idom
not
in
layout
"
)
}
None
=
>
break
}
}
}
}
}
self
.
stack
.
pop
(
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
crate
:
:
cursor
:
:
{
Cursor
FuncCursor
}
;
use
crate
:
:
dominator_tree
:
:
DominatorTree
;
use
crate
:
:
flowgraph
:
:
ControlFlowGraph
;
use
crate
:
:
ir
:
:
{
Function
InstBuilder
}
;
use
core
:
:
iter
;
#
[
test
]
fn
empty
(
)
{
let
func
=
Function
:
:
new
(
)
;
let
cfg
=
ControlFlowGraph
:
:
with_function
(
&
func
)
;
let
domtree
=
DominatorTree
:
:
with_function
(
&
func
&
cfg
)
;
let
mut
topo
=
TopoOrder
:
:
new
(
)
;
assert_eq
!
(
topo
.
next
(
&
func
.
layout
&
domtree
)
None
)
;
topo
.
reset
(
func
.
layout
.
blocks
(
)
)
;
assert_eq
!
(
topo
.
next
(
&
func
.
layout
&
domtree
)
None
)
;
}
#
[
test
]
fn
simple
(
)
{
let
mut
func
=
Function
:
:
new
(
)
;
let
block0
=
func
.
dfg
.
make_block
(
)
;
let
block1
=
func
.
dfg
.
make_block
(
)
;
{
let
mut
cur
=
FuncCursor
:
:
new
(
&
mut
func
)
;
cur
.
insert_block
(
block0
)
;
cur
.
ins
(
)
.
jump
(
block1
&
[
]
)
;
cur
.
insert_block
(
block1
)
;
cur
.
ins
(
)
.
jump
(
block1
&
[
]
)
;
}
let
cfg
=
ControlFlowGraph
:
:
with_function
(
&
func
)
;
let
domtree
=
DominatorTree
:
:
with_function
(
&
func
&
cfg
)
;
let
mut
topo
=
TopoOrder
:
:
new
(
)
;
topo
.
reset
(
iter
:
:
once
(
block1
)
)
;
assert_eq
!
(
topo
.
next
(
&
func
.
layout
&
domtree
)
Some
(
block0
)
)
;
assert_eq
!
(
topo
.
next
(
&
func
.
layout
&
domtree
)
Some
(
block1
)
)
;
assert_eq
!
(
topo
.
next
(
&
func
.
layout
&
domtree
)
None
)
;
}
}
