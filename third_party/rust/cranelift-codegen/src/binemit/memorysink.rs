use
super
:
:
{
Addend
CodeOffset
CodeSink
Reloc
}
;
use
crate
:
:
ir
:
:
{
ExternalName
JumpTable
SourceLoc
TrapCode
}
;
use
core
:
:
ptr
:
:
write_unaligned
;
pub
struct
MemoryCodeSink
<
'
a
>
{
data
:
*
mut
u8
offset
:
isize
pub
code_size
:
isize
relocs
:
&
'
a
mut
RelocSink
traps
:
&
'
a
mut
TrapSink
}
impl
<
'
a
>
MemoryCodeSink
<
'
a
>
{
pub
unsafe
fn
new
(
data
:
*
mut
u8
relocs
:
&
'
a
mut
RelocSink
traps
:
&
'
a
mut
TrapSink
)
-
>
Self
{
Self
{
data
offset
:
0
code_size
:
0
relocs
traps
}
}
}
pub
trait
RelocSink
{
fn
reloc_ebb
(
&
mut
self
_
:
CodeOffset
_
:
Reloc
_
:
CodeOffset
)
;
fn
reloc_external
(
&
mut
self
_
:
CodeOffset
_
:
Reloc
_
:
&
ExternalName
_
:
Addend
)
;
fn
reloc_jt
(
&
mut
self
_
:
CodeOffset
_
:
Reloc
_
:
JumpTable
)
;
}
pub
trait
TrapSink
{
fn
trap
(
&
mut
self
_
:
CodeOffset
_
:
SourceLoc
_
:
TrapCode
)
;
}
impl
<
'
a
>
CodeSink
for
MemoryCodeSink
<
'
a
>
{
fn
offset
(
&
self
)
-
>
CodeOffset
{
self
.
offset
as
CodeOffset
}
fn
put1
(
&
mut
self
x
:
u8
)
{
unsafe
{
write_unaligned
(
self
.
data
.
offset
(
self
.
offset
)
x
)
;
}
self
.
offset
+
=
1
;
}
fn
put2
(
&
mut
self
x
:
u16
)
{
unsafe
{
#
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
clippy
:
:
cast_ptr_alignment
)
)
]
write_unaligned
(
self
.
data
.
offset
(
self
.
offset
)
as
*
mut
u16
x
)
;
}
self
.
offset
+
=
2
;
}
fn
put4
(
&
mut
self
x
:
u32
)
{
unsafe
{
#
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
clippy
:
:
cast_ptr_alignment
)
)
]
write_unaligned
(
self
.
data
.
offset
(
self
.
offset
)
as
*
mut
u32
x
)
;
}
self
.
offset
+
=
4
;
}
fn
put8
(
&
mut
self
x
:
u64
)
{
unsafe
{
#
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
clippy
:
:
cast_ptr_alignment
)
)
]
write_unaligned
(
self
.
data
.
offset
(
self
.
offset
)
as
*
mut
u64
x
)
;
}
self
.
offset
+
=
8
;
}
fn
reloc_ebb
(
&
mut
self
rel
:
Reloc
ebb_offset
:
CodeOffset
)
{
let
ofs
=
self
.
offset
(
)
;
self
.
relocs
.
reloc_ebb
(
ofs
rel
ebb_offset
)
;
}
fn
reloc_external
(
&
mut
self
rel
:
Reloc
name
:
&
ExternalName
addend
:
Addend
)
{
let
ofs
=
self
.
offset
(
)
;
self
.
relocs
.
reloc_external
(
ofs
rel
name
addend
)
;
}
fn
reloc_jt
(
&
mut
self
rel
:
Reloc
jt
:
JumpTable
)
{
let
ofs
=
self
.
offset
(
)
;
self
.
relocs
.
reloc_jt
(
ofs
rel
jt
)
;
}
fn
trap
(
&
mut
self
code
:
TrapCode
srcloc
:
SourceLoc
)
{
let
ofs
=
self
.
offset
(
)
;
self
.
traps
.
trap
(
ofs
srcloc
code
)
;
}
fn
begin_rodata
(
&
mut
self
)
{
self
.
code_size
=
self
.
offset
;
}
}
pub
struct
NullTrapSink
{
}
impl
TrapSink
for
NullTrapSink
{
fn
trap
(
&
mut
self
_offset
:
CodeOffset
_srcloc
:
SourceLoc
_code
:
TrapCode
)
{
}
}
