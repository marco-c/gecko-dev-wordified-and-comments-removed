use
crate
:
:
entity
:
:
SparseMap
;
use
crate
:
:
flowgraph
:
:
{
BasicBlock
ControlFlowGraph
}
;
use
crate
:
:
ir
:
:
dfg
:
:
ValueDef
;
use
crate
:
:
ir
:
:
{
Ebb
Function
Inst
Layout
ProgramPoint
Value
}
;
use
crate
:
:
isa
:
:
{
EncInfo
OperandConstraint
TargetIsa
}
;
use
crate
:
:
regalloc
:
:
affinity
:
:
Affinity
;
use
crate
:
:
regalloc
:
:
liverange
:
:
{
LiveRange
LiveRangeContext
LiveRangeForest
}
;
use
crate
:
:
timing
;
use
core
:
:
mem
;
use
core
:
:
ops
:
:
Index
;
use
std
:
:
vec
:
:
Vec
;
type
LiveRangeSet
=
SparseMap
<
Value
LiveRange
>
;
fn
get_or_create
<
'
a
>
(
lrset
:
&
'
a
mut
LiveRangeSet
value
:
Value
isa
:
&
TargetIsa
func
:
&
Function
encinfo
:
&
EncInfo
)
-
>
&
'
a
mut
LiveRange
{
if
lrset
.
get
(
value
)
.
is_none
(
)
{
let
def
;
let
affinity
;
match
func
.
dfg
.
value_def
(
value
)
{
ValueDef
:
:
Result
(
inst
rnum
)
=
>
{
def
=
inst
.
into
(
)
;
affinity
=
encinfo
.
operand_constraints
(
func
.
encodings
[
inst
]
)
.
and_then
(
|
rc
|
rc
.
outs
.
get
(
rnum
)
)
.
map
(
Affinity
:
:
new
)
.
or_else
(
|
|
{
func
.
dfg
.
call_signature
(
inst
)
.
map
(
|
sig
|
Affinity
:
:
abi
(
&
func
.
dfg
.
signatures
[
sig
]
.
returns
[
rnum
]
isa
)
)
}
)
.
unwrap_or_default
(
)
;
}
ValueDef
:
:
Param
(
ebb
num
)
=
>
{
def
=
ebb
.
into
(
)
;
if
func
.
layout
.
entry_block
(
)
=
=
Some
(
ebb
)
{
affinity
=
Affinity
:
:
abi
(
&
func
.
signature
.
params
[
num
]
isa
)
;
}
else
{
let
rc
=
isa
.
regclass_for_abi_type
(
func
.
dfg
.
value_type
(
value
)
)
;
affinity
=
Affinity
:
:
Reg
(
rc
.
into
(
)
)
;
}
}
}
;
lrset
.
insert
(
LiveRange
:
:
new
(
value
def
affinity
)
)
;
}
lrset
.
get_mut
(
value
)
.
unwrap
(
)
}
fn
extend_to_use
(
lr
:
&
mut
LiveRange
ebb
:
Ebb
to
:
Inst
worklist
:
&
mut
Vec
<
Ebb
>
func
:
&
Function
cfg
:
&
ControlFlowGraph
forest
:
&
mut
LiveRangeForest
)
{
debug_assert
!
(
worklist
.
is_empty
(
)
)
;
if
lr
.
extend_in_ebb
(
ebb
to
&
func
.
layout
forest
)
{
worklist
.
push
(
ebb
)
;
}
while
let
Some
(
livein
)
=
worklist
.
pop
(
)
{
for
BasicBlock
{
ebb
:
pred
inst
:
branch
}
in
cfg
.
pred_iter
(
livein
)
{
if
lr
.
extend_in_ebb
(
pred
branch
&
func
.
layout
forest
)
{
worklist
.
push
(
pred
)
;
}
}
}
}
pub
struct
Liveness
{
ranges
:
LiveRangeSet
forest
:
LiveRangeForest
worklist
:
Vec
<
Ebb
>
}
impl
Liveness
{
pub
fn
new
(
)
-
>
Self
{
Self
{
ranges
:
LiveRangeSet
:
:
new
(
)
forest
:
LiveRangeForest
:
:
new
(
)
worklist
:
Vec
:
:
new
(
)
}
}
pub
fn
ranges
(
&
self
)
-
>
&
LiveRangeSet
{
&
self
.
ranges
}
pub
fn
context
<
'
a
>
(
&
'
a
self
layout
:
&
'
a
Layout
)
-
>
LiveRangeContext
<
'
a
Layout
>
{
LiveRangeContext
:
:
new
(
layout
&
self
.
forest
)
}
pub
fn
clear
(
&
mut
self
)
{
self
.
ranges
.
clear
(
)
;
self
.
forest
.
clear
(
)
;
self
.
worklist
.
clear
(
)
;
}
pub
fn
get
(
&
self
value
:
Value
)
-
>
Option
<
&
LiveRange
>
{
self
.
ranges
.
get
(
value
)
}
pub
fn
create_dead
<
PP
>
(
&
mut
self
value
:
Value
def
:
PP
affinity
:
Affinity
)
where
PP
:
Into
<
ProgramPoint
>
{
let
old
=
self
.
ranges
.
insert
(
LiveRange
:
:
new
(
value
def
.
into
(
)
affinity
)
)
;
debug_assert
!
(
old
.
is_none
(
)
"
{
}
already
has
a
live
range
"
value
)
;
}
pub
fn
move_def_locally
<
PP
>
(
&
mut
self
value
:
Value
def
:
PP
)
where
PP
:
Into
<
ProgramPoint
>
{
let
lr
=
self
.
ranges
.
get_mut
(
value
)
.
expect
(
"
Value
has
no
live
range
"
)
;
lr
.
move_def_locally
(
def
.
into
(
)
)
;
}
pub
fn
extend_locally
(
&
mut
self
value
:
Value
ebb
:
Ebb
user
:
Inst
layout
:
&
Layout
)
-
>
&
mut
Affinity
{
debug_assert_eq
!
(
Some
(
ebb
)
layout
.
inst_ebb
(
user
)
)
;
let
lr
=
self
.
ranges
.
get_mut
(
value
)
.
expect
(
"
Value
has
no
live
range
"
)
;
let
livein
=
lr
.
extend_in_ebb
(
ebb
user
layout
&
mut
self
.
forest
)
;
debug_assert
!
(
!
livein
"
{
}
should
already
be
live
in
{
}
"
value
ebb
)
;
&
mut
lr
.
affinity
}
pub
fn
spill
(
&
mut
self
value
:
Value
)
-
>
Affinity
{
let
lr
=
self
.
ranges
.
get_mut
(
value
)
.
expect
(
"
Value
has
no
live
range
"
)
;
mem
:
:
replace
(
&
mut
lr
.
affinity
Affinity
:
:
Stack
)
}
pub
fn
compute
(
&
mut
self
isa
:
&
TargetIsa
func
:
&
mut
Function
cfg
:
&
ControlFlowGraph
)
{
let
_tt
=
timing
:
:
ra_liveness
(
)
;
self
.
ranges
.
clear
(
)
;
let
encinfo
=
isa
.
encoding_info
(
)
;
let
reginfo
=
isa
.
register_info
(
)
;
for
ebb
in
func
.
layout
.
ebbs
(
)
{
for
&
arg
in
func
.
dfg
.
ebb_params
(
ebb
)
{
get_or_create
(
&
mut
self
.
ranges
arg
isa
func
&
encinfo
)
;
}
for
inst
in
func
.
layout
.
ebb_insts
(
ebb
)
{
func
.
dfg
.
resolve_aliases_in_arguments
(
inst
)
;
for
&
def
in
func
.
dfg
.
inst_results
(
inst
)
{
get_or_create
(
&
mut
self
.
ranges
def
isa
func
&
encinfo
)
;
}
let
encoding
=
func
.
encodings
[
inst
]
;
let
operand_constraint_slice
:
&
[
OperandConstraint
]
=
encinfo
.
operand_constraints
(
encoding
)
.
map_or
(
&
[
]
|
c
|
c
.
ins
)
;
let
mut
operand_constraints
=
operand_constraint_slice
.
iter
(
)
;
for
&
arg
in
func
.
dfg
.
inst_args
(
inst
)
{
let
lr
=
get_or_create
(
&
mut
self
.
ranges
arg
isa
func
&
encinfo
)
;
extend_to_use
(
lr
ebb
inst
&
mut
self
.
worklist
func
cfg
&
mut
self
.
forest
)
;
if
let
Some
(
constraint
)
=
operand_constraints
.
next
(
)
{
lr
.
affinity
.
merge
(
constraint
&
reginfo
)
;
}
}
}
}
}
}
impl
Index
<
Value
>
for
Liveness
{
type
Output
=
LiveRange
;
fn
index
(
&
self
index
:
Value
)
-
>
&
LiveRange
{
match
self
.
ranges
.
get
(
index
)
{
Some
(
lr
)
=
>
lr
None
=
>
panic
!
(
"
{
}
has
no
live
range
"
index
)
}
}
}
