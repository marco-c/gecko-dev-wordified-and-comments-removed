use
regalloc
:
:
RealReg
;
#
[
cfg
(
feature
=
"
enable
-
serde
"
)
]
use
serde
:
:
{
Deserialize
Serialize
}
;
#
[
cfg
(
feature
=
"
unwind
"
)
]
pub
mod
systemv
;
#
[
cfg
(
feature
=
"
unwind
"
)
]
pub
mod
winx64
;
#
[
derive
(
Clone
Debug
PartialEq
Eq
)
]
#
[
cfg_attr
(
feature
=
"
enable
-
serde
"
derive
(
Serialize
Deserialize
)
)
]
#
[
non_exhaustive
]
pub
enum
UnwindInfo
{
#
[
cfg
(
feature
=
"
unwind
"
)
]
WindowsX64
(
winx64
:
:
UnwindInfo
)
#
[
cfg
(
feature
=
"
unwind
"
)
]
SystemV
(
systemv
:
:
UnwindInfo
)
}
pub
mod
input
{
use
crate
:
:
binemit
:
:
CodeOffset
;
use
alloc
:
:
vec
:
:
Vec
;
#
[
cfg
(
feature
=
"
enable
-
serde
"
)
]
use
serde
:
:
{
Deserialize
Serialize
}
;
#
[
derive
(
Clone
Debug
PartialEq
Eq
)
]
#
[
cfg_attr
(
feature
=
"
enable
-
serde
"
derive
(
Serialize
Deserialize
)
)
]
pub
enum
UnwindCode
<
Reg
>
{
SaveRegister
{
reg
:
Reg
stack_offset
:
u32
}
RestoreRegister
{
reg
:
Reg
}
StackAlloc
{
size
:
u32
}
StackDealloc
{
size
:
u32
}
SetFramePointer
{
reg
:
Reg
}
RestoreFramePointer
RememberState
RestoreState
Aarch64SetPointerAuth
{
return_addresses
:
bool
}
}
#
[
derive
(
Clone
Debug
PartialEq
Eq
)
]
#
[
cfg_attr
(
feature
=
"
enable
-
serde
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
UnwindInfo
<
Reg
>
{
pub
prologue_size
:
CodeOffset
pub
prologue_unwind_codes
:
Vec
<
(
CodeOffset
UnwindCode
<
Reg
>
)
>
pub
epilogues_unwind_codes
:
Vec
<
Vec
<
(
CodeOffset
UnwindCode
<
Reg
>
)
>
>
pub
function_size
:
CodeOffset
pub
word_size
:
u8
pub
initial_sp_offset
:
u8
}
}
#
[
derive
(
Clone
Debug
PartialEq
Eq
)
]
#
[
cfg_attr
(
feature
=
"
enable
-
serde
"
derive
(
Serialize
Deserialize
)
)
]
pub
enum
UnwindInst
{
PushFrameRegs
{
offset_upward_to_caller_sp
:
u32
}
DefineNewFrame
{
offset_upward_to_caller_sp
:
u32
offset_downward_to_clobbers
:
u32
}
SaveReg
{
clobber_offset
:
u32
reg
:
RealReg
}
Aarch64SetPointerAuth
{
return_addresses
:
bool
}
}
