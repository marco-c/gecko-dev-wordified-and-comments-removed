use
crate
:
:
settings
:
:
{
self
LibcallCallConv
}
;
use
core
:
:
fmt
;
use
core
:
:
str
;
use
target_lexicon
:
:
{
CallingConvention
Triple
}
;
#
[
cfg
(
feature
=
"
enable
-
serde
"
)
]
use
serde
:
:
{
Deserialize
Serialize
}
;
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
Hash
)
]
#
[
cfg_attr
(
feature
=
"
enable
-
serde
"
derive
(
Serialize
Deserialize
)
)
]
pub
enum
CallConv
{
Fast
Cold
SystemV
WindowsFastcall
AppleAarch64
BaldrdashSystemV
BaldrdashWindows
Baldrdash2020
Probestack
}
impl
CallConv
{
pub
fn
triple_default
(
triple
:
&
Triple
)
-
>
Self
{
match
triple
.
default_calling_convention
(
)
{
Ok
(
CallingConvention
:
:
SystemV
)
|
Err
(
(
)
)
=
>
Self
:
:
SystemV
Ok
(
CallingConvention
:
:
AppleAarch64
)
=
>
Self
:
:
AppleAarch64
Ok
(
CallingConvention
:
:
WindowsFastcall
)
=
>
Self
:
:
WindowsFastcall
Ok
(
unimp
)
=
>
unimplemented
!
(
"
calling
convention
:
{
:
?
}
"
unimp
)
}
}
pub
fn
for_libcall
(
flags
:
&
settings
:
:
Flags
default_call_conv
:
CallConv
)
-
>
Self
{
match
flags
.
libcall_call_conv
(
)
{
LibcallCallConv
:
:
IsaDefault
=
>
default_call_conv
LibcallCallConv
:
:
Fast
=
>
Self
:
:
Fast
LibcallCallConv
:
:
Cold
=
>
Self
:
:
Cold
LibcallCallConv
:
:
SystemV
=
>
Self
:
:
SystemV
LibcallCallConv
:
:
WindowsFastcall
=
>
Self
:
:
WindowsFastcall
LibcallCallConv
:
:
AppleAarch64
=
>
Self
:
:
AppleAarch64
LibcallCallConv
:
:
BaldrdashSystemV
=
>
Self
:
:
BaldrdashSystemV
LibcallCallConv
:
:
BaldrdashWindows
=
>
Self
:
:
BaldrdashWindows
LibcallCallConv
:
:
Baldrdash2020
=
>
Self
:
:
Baldrdash2020
LibcallCallConv
:
:
Probestack
=
>
Self
:
:
Probestack
}
}
pub
fn
extends_windows_fastcall
(
self
)
-
>
bool
{
match
self
{
Self
:
:
WindowsFastcall
|
Self
:
:
BaldrdashWindows
=
>
true
_
=
>
false
}
}
pub
fn
extends_baldrdash
(
self
)
-
>
bool
{
match
self
{
Self
:
:
BaldrdashSystemV
|
Self
:
:
BaldrdashWindows
|
Self
:
:
Baldrdash2020
=
>
true
_
=
>
false
}
}
}
impl
fmt
:
:
Display
for
CallConv
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
match
*
self
{
Self
:
:
Fast
=
>
"
fast
"
Self
:
:
Cold
=
>
"
cold
"
Self
:
:
SystemV
=
>
"
system_v
"
Self
:
:
WindowsFastcall
=
>
"
windows_fastcall
"
Self
:
:
AppleAarch64
=
>
"
apple_aarch64
"
Self
:
:
BaldrdashSystemV
=
>
"
baldrdash_system_v
"
Self
:
:
BaldrdashWindows
=
>
"
baldrdash_windows
"
Self
:
:
Baldrdash2020
=
>
"
baldrdash_2020
"
Self
:
:
Probestack
=
>
"
probestack
"
}
)
}
}
impl
str
:
:
FromStr
for
CallConv
{
type
Err
=
(
)
;
fn
from_str
(
s
:
&
str
)
-
>
Result
<
Self
Self
:
:
Err
>
{
match
s
{
"
fast
"
=
>
Ok
(
Self
:
:
Fast
)
"
cold
"
=
>
Ok
(
Self
:
:
Cold
)
"
system_v
"
=
>
Ok
(
Self
:
:
SystemV
)
"
windows_fastcall
"
=
>
Ok
(
Self
:
:
WindowsFastcall
)
"
apple_aarch64
"
=
>
Ok
(
Self
:
:
AppleAarch64
)
"
baldrdash_system_v
"
=
>
Ok
(
Self
:
:
BaldrdashSystemV
)
"
baldrdash_windows
"
=
>
Ok
(
Self
:
:
BaldrdashWindows
)
"
baldrdash_2020
"
=
>
Ok
(
Self
:
:
Baldrdash2020
)
"
probestack
"
=
>
Ok
(
Self
:
:
Probestack
)
_
=
>
Err
(
(
)
)
}
}
}
