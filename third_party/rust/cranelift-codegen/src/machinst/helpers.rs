use
super
:
:
{
InsnOutput
LowerCtx
VCodeInst
ValueRegs
}
;
use
crate
:
:
ir
:
:
Type
;
use
regalloc
:
:
{
Reg
Writable
}
;
use
std
:
:
ops
:
:
{
Add
BitAnd
Not
Sub
}
;
pub
fn
ty_bits
(
ty
:
Type
)
-
>
usize
{
usize
:
:
from
(
ty
.
bits
(
)
)
}
pub
(
crate
)
fn
ty_has_int_representation
(
ty
:
Type
)
-
>
bool
{
ty
.
is_int
(
)
|
|
ty
.
is_bool
(
)
|
|
ty
.
is_ref
(
)
}
pub
(
crate
)
fn
ty_has_float_or_vec_representation
(
ty
:
Type
)
-
>
bool
{
ty
.
is_vector
(
)
|
|
ty
.
is_float
(
)
}
pub
(
crate
)
fn
get_output_reg
<
I
:
VCodeInst
C
:
LowerCtx
<
I
=
I
>
>
(
ctx
:
&
mut
C
spec
:
InsnOutput
)
-
>
ValueRegs
<
Writable
<
Reg
>
>
{
ctx
.
get_output
(
spec
.
insn
spec
.
output
)
}
pub
(
crate
)
fn
align_to
<
N
>
(
x
:
N
alignment
:
N
)
-
>
N
where
N
:
Not
<
Output
=
N
>
+
BitAnd
<
N
Output
=
N
>
+
Add
<
N
Output
=
N
>
+
Sub
<
N
Output
=
N
>
+
From
<
u8
>
+
Copy
{
let
alignment_mask
=
alignment
-
1
.
into
(
)
;
(
x
+
alignment_mask
)
&
!
alignment_mask
}
