use
regalloc
:
:
{
RealRegUniverse
Reg
Writable
}
;
use
std
:
:
fmt
:
:
Debug
;
use
std
:
:
hash
:
:
Hash
;
use
std
:
:
string
:
:
{
String
ToString
}
;
pub
trait
ShowWithRRU
{
fn
show_rru
(
&
self
mb_rru
:
Option
<
&
RealRegUniverse
>
)
-
>
String
;
fn
show_rru_sized
(
&
self
mb_rru
:
Option
<
&
RealRegUniverse
>
_size
:
u8
)
-
>
String
{
self
.
show_rru
(
mb_rru
)
}
}
impl
ShowWithRRU
for
Reg
{
fn
show_rru
(
&
self
mb_rru
:
Option
<
&
RealRegUniverse
>
)
-
>
String
{
if
self
.
is_real
(
)
{
if
let
Some
(
rru
)
=
mb_rru
{
let
reg_ix
=
self
.
get_index
(
)
;
if
reg_ix
<
rru
.
regs
.
len
(
)
{
return
rru
.
regs
[
reg_ix
]
.
1
.
to_string
(
)
;
}
else
{
return
format
!
(
"
!
!
{
:
?
}
!
!
"
self
)
;
}
}
}
format
!
(
"
%
{
:
?
}
"
self
)
}
fn
show_rru_sized
(
&
self
_mb_rru
:
Option
<
&
RealRegUniverse
>
_size
:
u8
)
-
>
String
{
panic
!
(
"
Reg
:
:
show_rru_sized
:
impossible
to
implement
"
)
;
}
}
impl
<
R
:
ShowWithRRU
+
Copy
+
Ord
+
Hash
+
Eq
+
Debug
>
ShowWithRRU
for
Writable
<
R
>
{
fn
show_rru
(
&
self
mb_rru
:
Option
<
&
RealRegUniverse
>
)
-
>
String
{
self
.
to_reg
(
)
.
show_rru
(
mb_rru
)
}
fn
show_rru_sized
(
&
self
mb_rru
:
Option
<
&
RealRegUniverse
>
size
:
u8
)
-
>
String
{
self
.
to_reg
(
)
.
show_rru_sized
(
mb_rru
size
)
}
}
