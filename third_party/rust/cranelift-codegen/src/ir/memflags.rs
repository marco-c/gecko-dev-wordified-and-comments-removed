use
std
:
:
fmt
;
enum
FlagBit
{
Notrap
Aligned
}
const
NAMES
:
[
&
str
;
2
]
=
[
"
notrap
"
"
aligned
"
]
;
#
[
derive
(
Clone
Copy
Debug
Hash
PartialEq
Eq
)
]
pub
struct
MemFlags
{
bits
:
u8
}
impl
MemFlags
{
pub
fn
new
(
)
-
>
Self
{
Self
{
bits
:
0
}
}
fn
read
(
self
bit
:
FlagBit
)
-
>
bool
{
self
.
bits
&
(
1
<
<
bit
as
usize
)
!
=
0
}
fn
set
(
&
mut
self
bit
:
FlagBit
)
{
self
.
bits
|
=
1
<
<
bit
as
usize
}
pub
fn
set_by_name
(
&
mut
self
name
:
&
str
)
-
>
bool
{
match
NAMES
.
iter
(
)
.
position
(
|
&
s
|
s
=
=
name
)
{
Some
(
bit
)
=
>
{
self
.
bits
|
=
1
<
<
bit
;
true
}
None
=
>
false
}
}
pub
fn
notrap
(
self
)
-
>
bool
{
self
.
read
(
FlagBit
:
:
Notrap
)
}
pub
fn
set_notrap
(
&
mut
self
)
{
self
.
set
(
FlagBit
:
:
Notrap
)
}
pub
fn
aligned
(
self
)
-
>
bool
{
self
.
read
(
FlagBit
:
:
Aligned
)
}
pub
fn
set_aligned
(
&
mut
self
)
{
self
.
set
(
FlagBit
:
:
Aligned
)
}
}
impl
fmt
:
:
Display
for
MemFlags
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
for
(
i
n
)
in
NAMES
.
iter
(
)
.
enumerate
(
)
{
if
self
.
bits
&
(
1
<
<
i
)
!
=
0
{
write
!
(
f
"
{
}
"
n
)
?
;
}
}
Ok
(
(
)
)
}
}
