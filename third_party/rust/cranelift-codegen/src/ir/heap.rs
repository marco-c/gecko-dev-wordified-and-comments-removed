use
ir
:
:
immediates
:
:
Imm64
;
use
ir
:
:
{
GlobalValue
Type
}
;
use
std
:
:
fmt
;
#
[
derive
(
Clone
)
]
pub
struct
HeapData
{
pub
base
:
GlobalValue
pub
min_size
:
Imm64
pub
guard_size
:
Imm64
pub
style
:
HeapStyle
pub
index_type
:
Type
}
#
[
derive
(
Clone
)
]
pub
enum
HeapStyle
{
Dynamic
{
bound_gv
:
GlobalValue
}
Static
{
bound
:
Imm64
}
}
impl
fmt
:
:
Display
for
HeapData
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
match
self
.
style
{
HeapStyle
:
:
Dynamic
{
.
.
}
=
>
"
dynamic
"
HeapStyle
:
:
Static
{
.
.
}
=
>
"
static
"
}
)
?
;
write
!
(
f
"
{
}
min
{
}
"
self
.
base
self
.
min_size
)
?
;
match
self
.
style
{
HeapStyle
:
:
Dynamic
{
bound_gv
}
=
>
write
!
(
f
"
bound
{
}
"
bound_gv
)
?
HeapStyle
:
:
Static
{
bound
}
=
>
write
!
(
f
"
bound
{
}
"
bound
)
?
}
write
!
(
f
"
guard
{
}
index_type
{
}
"
self
.
guard_size
self
.
index_type
)
}
}
