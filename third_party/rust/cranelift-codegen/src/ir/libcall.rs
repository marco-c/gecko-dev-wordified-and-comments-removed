use
crate
:
:
ir
:
:
{
types
AbiParam
ArgumentPurpose
ExtFuncData
ExternalName
FuncRef
Function
Inst
Opcode
Signature
Type
}
;
use
crate
:
:
isa
:
:
{
CallConv
RegUnit
TargetIsa
}
;
use
core
:
:
fmt
;
use
core
:
:
str
:
:
FromStr
;
#
[
cfg
(
feature
=
"
enable
-
serde
"
)
]
use
serde
:
:
{
Deserialize
Serialize
}
;
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
)
]
#
[
cfg_attr
(
feature
=
"
enable
-
serde
"
derive
(
Serialize
Deserialize
)
)
]
pub
enum
LibCall
{
Probestack
CeilF32
CeilF64
FloorF32
FloorF64
TruncF32
TruncF64
NearestF32
NearestF64
Memcpy
Memset
Memmove
}
impl
fmt
:
:
Display
for
LibCall
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
:
:
Debug
:
:
fmt
(
self
f
)
}
}
impl
FromStr
for
LibCall
{
type
Err
=
(
)
;
fn
from_str
(
s
:
&
str
)
-
>
Result
<
Self
Self
:
:
Err
>
{
match
s
{
"
Probestack
"
=
>
Ok
(
LibCall
:
:
Probestack
)
"
CeilF32
"
=
>
Ok
(
LibCall
:
:
CeilF32
)
"
CeilF64
"
=
>
Ok
(
LibCall
:
:
CeilF64
)
"
FloorF32
"
=
>
Ok
(
LibCall
:
:
FloorF32
)
"
FloorF64
"
=
>
Ok
(
LibCall
:
:
FloorF64
)
"
TruncF32
"
=
>
Ok
(
LibCall
:
:
TruncF32
)
"
TruncF64
"
=
>
Ok
(
LibCall
:
:
TruncF64
)
"
NearestF32
"
=
>
Ok
(
LibCall
:
:
NearestF32
)
"
NearestF64
"
=
>
Ok
(
LibCall
:
:
NearestF64
)
"
Memcpy
"
=
>
Ok
(
LibCall
:
:
Memcpy
)
"
Memset
"
=
>
Ok
(
LibCall
:
:
Memset
)
"
Memmove
"
=
>
Ok
(
LibCall
:
:
Memmove
)
_
=
>
Err
(
(
)
)
}
}
}
impl
LibCall
{
pub
fn
for_inst
(
opcode
:
Opcode
ctrl_type
:
Type
)
-
>
Option
<
Self
>
{
Some
(
match
ctrl_type
{
types
:
:
F32
=
>
match
opcode
{
Opcode
:
:
Ceil
=
>
LibCall
:
:
CeilF32
Opcode
:
:
Floor
=
>
LibCall
:
:
FloorF32
Opcode
:
:
Trunc
=
>
LibCall
:
:
TruncF32
Opcode
:
:
Nearest
=
>
LibCall
:
:
NearestF32
_
=
>
return
None
}
types
:
:
F64
=
>
match
opcode
{
Opcode
:
:
Ceil
=
>
LibCall
:
:
CeilF64
Opcode
:
:
Floor
=
>
LibCall
:
:
FloorF64
Opcode
:
:
Trunc
=
>
LibCall
:
:
TruncF64
Opcode
:
:
Nearest
=
>
LibCall
:
:
NearestF64
_
=
>
return
None
}
_
=
>
return
None
}
)
}
}
pub
fn
get_libcall_funcref
(
libcall
:
LibCall
func
:
&
mut
Function
inst
:
Inst
isa
:
&
dyn
TargetIsa
)
-
>
FuncRef
{
find_funcref
(
libcall
func
)
.
unwrap_or_else
(
|
|
make_funcref_for_inst
(
libcall
func
inst
isa
)
)
}
pub
fn
get_probestack_funcref
(
func
:
&
mut
Function
reg_type
:
Type
arg_reg
:
RegUnit
isa
:
&
dyn
TargetIsa
)
-
>
FuncRef
{
find_funcref
(
LibCall
:
:
Probestack
func
)
.
unwrap_or_else
(
|
|
make_funcref_for_probestack
(
func
reg_type
arg_reg
isa
)
)
}
fn
find_funcref
(
libcall
:
LibCall
func
:
&
Function
)
-
>
Option
<
FuncRef
>
{
for
(
fref
func_data
)
in
func
.
dfg
.
ext_funcs
.
iter
(
)
.
rev
(
)
{
match
func_data
.
name
{
ExternalName
:
:
LibCall
(
lc
)
=
>
{
if
lc
=
=
libcall
{
return
Some
(
fref
)
;
}
}
_
=
>
break
}
}
None
}
fn
make_funcref_for_probestack
(
func
:
&
mut
Function
reg_type
:
Type
arg_reg
:
RegUnit
isa
:
&
dyn
TargetIsa
)
-
>
FuncRef
{
let
mut
sig
=
Signature
:
:
new
(
CallConv
:
:
Probestack
)
;
let
rax
=
AbiParam
:
:
special_reg
(
reg_type
ArgumentPurpose
:
:
Normal
arg_reg
)
;
sig
.
params
.
push
(
rax
)
;
if
!
isa
.
flags
(
)
.
probestack_func_adjusts_sp
(
)
{
sig
.
returns
.
push
(
rax
)
;
}
make_funcref
(
LibCall
:
:
Probestack
func
sig
isa
)
}
fn
make_funcref_for_inst
(
libcall
:
LibCall
func
:
&
mut
Function
inst
:
Inst
isa
:
&
dyn
TargetIsa
)
-
>
FuncRef
{
let
mut
sig
=
Signature
:
:
new
(
isa
.
default_call_conv
(
)
)
;
for
&
v
in
func
.
dfg
.
inst_args
(
inst
)
{
sig
.
params
.
push
(
AbiParam
:
:
new
(
func
.
dfg
.
value_type
(
v
)
)
)
;
}
for
&
v
in
func
.
dfg
.
inst_results
(
inst
)
{
sig
.
returns
.
push
(
AbiParam
:
:
new
(
func
.
dfg
.
value_type
(
v
)
)
)
;
}
make_funcref
(
libcall
func
sig
isa
)
}
fn
make_funcref
(
libcall
:
LibCall
func
:
&
mut
Function
sig
:
Signature
isa
:
&
dyn
TargetIsa
)
-
>
FuncRef
{
let
sigref
=
func
.
import_signature
(
sig
)
;
func
.
import_function
(
ExtFuncData
{
name
:
ExternalName
:
:
LibCall
(
libcall
)
signature
:
sigref
colocated
:
isa
.
flags
(
)
.
colocated_libcalls
(
)
}
)
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
std
:
:
string
:
:
ToString
;
#
[
test
]
fn
display
(
)
{
assert_eq
!
(
LibCall
:
:
CeilF32
.
to_string
(
)
"
CeilF32
"
)
;
assert_eq
!
(
LibCall
:
:
NearestF64
.
to_string
(
)
"
NearestF64
"
)
;
}
#
[
test
]
fn
parsing
(
)
{
assert_eq
!
(
"
FloorF32
"
.
parse
(
)
Ok
(
LibCall
:
:
FloorF32
)
)
;
}
}
