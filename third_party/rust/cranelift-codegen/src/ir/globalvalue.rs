use
ir
:
:
immediates
:
:
Offset32
;
use
ir
:
:
{
ExternalName
GlobalValue
Type
}
;
use
isa
:
:
TargetIsa
;
use
std
:
:
fmt
;
#
[
derive
(
Clone
)
]
pub
enum
GlobalValueData
{
VMContext
{
offset
:
Offset32
}
Deref
{
base
:
GlobalValue
offset
:
Offset32
memory_type
:
Type
}
Sym
{
name
:
ExternalName
colocated
:
bool
}
}
impl
GlobalValueData
{
pub
fn
symbol_name
(
&
self
)
-
>
&
ExternalName
{
match
*
self
{
GlobalValueData
:
:
Sym
{
ref
name
.
.
}
=
>
name
_
=
>
panic
!
(
"
only
symbols
have
names
"
)
}
}
pub
fn
global_type
(
&
self
isa
:
&
TargetIsa
)
-
>
Type
{
match
*
self
{
GlobalValueData
:
:
VMContext
{
.
.
}
|
GlobalValueData
:
:
Sym
{
.
.
}
=
>
isa
.
pointer_type
(
)
GlobalValueData
:
:
Deref
{
memory_type
.
.
}
=
>
memory_type
}
}
}
impl
fmt
:
:
Display
for
GlobalValueData
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
match
*
self
{
GlobalValueData
:
:
VMContext
{
offset
}
=
>
write
!
(
f
"
vmctx
{
}
"
offset
)
GlobalValueData
:
:
Deref
{
base
offset
memory_type
}
=
>
write
!
(
f
"
deref
(
{
}
)
{
}
:
{
}
"
base
offset
memory_type
)
GlobalValueData
:
:
Sym
{
ref
name
colocated
}
=
>
{
if
colocated
{
write
!
(
f
"
colocated
"
)
?
;
}
write
!
(
f
"
globalsym
{
}
"
name
)
}
}
}
}
