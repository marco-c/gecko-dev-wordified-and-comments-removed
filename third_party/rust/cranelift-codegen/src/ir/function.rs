use
crate
:
:
binemit
:
:
CodeOffset
;
use
crate
:
:
entity
:
:
{
PrimaryMap
SecondaryMap
}
;
use
crate
:
:
ir
;
use
crate
:
:
ir
:
:
{
DataFlowGraph
ExternalName
Layout
Signature
}
;
use
crate
:
:
ir
:
:
{
Ebb
ExtFuncData
FuncRef
GlobalValue
GlobalValueData
Heap
HeapData
Inst
JumpTable
JumpTableData
SigRef
StackSlot
StackSlotData
Table
TableData
}
;
use
crate
:
:
ir
:
:
{
EbbOffsets
InstEncodings
SourceLocs
StackSlots
ValueLocations
}
;
use
crate
:
:
ir
:
:
{
JumpTableOffsets
JumpTables
}
;
use
crate
:
:
isa
:
:
{
CallConv
EncInfo
Encoding
Legalize
TargetIsa
}
;
use
crate
:
:
regalloc
:
:
RegDiversions
;
use
crate
:
:
value_label
:
:
ValueLabelsRanges
;
use
crate
:
:
write
:
:
write_function
;
use
core
:
:
fmt
;
#
[
cfg
(
feature
=
"
basic
-
blocks
"
)
]
use
crate
:
:
ir
:
:
Opcode
;
#
[
derive
(
Clone
)
]
pub
struct
Function
{
pub
name
:
ExternalName
pub
signature
:
Signature
pub
stack_slots
:
StackSlots
pub
global_values
:
PrimaryMap
<
ir
:
:
GlobalValue
ir
:
:
GlobalValueData
>
pub
heaps
:
PrimaryMap
<
ir
:
:
Heap
ir
:
:
HeapData
>
pub
tables
:
PrimaryMap
<
ir
:
:
Table
ir
:
:
TableData
>
pub
jump_tables
:
JumpTables
pub
dfg
:
DataFlowGraph
pub
layout
:
Layout
pub
encodings
:
InstEncodings
pub
locations
:
ValueLocations
pub
offsets
:
EbbOffsets
pub
jt_offsets
:
JumpTableOffsets
pub
srclocs
:
SourceLocs
}
impl
Function
{
pub
fn
with_name_signature
(
name
:
ExternalName
sig
:
Signature
)
-
>
Self
{
Self
{
name
signature
:
sig
stack_slots
:
StackSlots
:
:
new
(
)
global_values
:
PrimaryMap
:
:
new
(
)
heaps
:
PrimaryMap
:
:
new
(
)
tables
:
PrimaryMap
:
:
new
(
)
jump_tables
:
PrimaryMap
:
:
new
(
)
dfg
:
DataFlowGraph
:
:
new
(
)
layout
:
Layout
:
:
new
(
)
encodings
:
SecondaryMap
:
:
new
(
)
locations
:
SecondaryMap
:
:
new
(
)
offsets
:
SecondaryMap
:
:
new
(
)
jt_offsets
:
SecondaryMap
:
:
new
(
)
srclocs
:
SecondaryMap
:
:
new
(
)
}
}
pub
fn
clear
(
&
mut
self
)
{
self
.
signature
.
clear
(
CallConv
:
:
Fast
)
;
self
.
stack_slots
.
clear
(
)
;
self
.
global_values
.
clear
(
)
;
self
.
heaps
.
clear
(
)
;
self
.
tables
.
clear
(
)
;
self
.
jump_tables
.
clear
(
)
;
self
.
dfg
.
clear
(
)
;
self
.
layout
.
clear
(
)
;
self
.
encodings
.
clear
(
)
;
self
.
locations
.
clear
(
)
;
self
.
offsets
.
clear
(
)
;
self
.
srclocs
.
clear
(
)
;
}
pub
fn
new
(
)
-
>
Self
{
Self
:
:
with_name_signature
(
ExternalName
:
:
default
(
)
Signature
:
:
new
(
CallConv
:
:
Fast
)
)
}
pub
fn
create_jump_table
(
&
mut
self
data
:
JumpTableData
)
-
>
JumpTable
{
self
.
jump_tables
.
push
(
data
)
}
pub
fn
create_stack_slot
(
&
mut
self
data
:
StackSlotData
)
-
>
StackSlot
{
self
.
stack_slots
.
push
(
data
)
}
pub
fn
import_signature
(
&
mut
self
signature
:
Signature
)
-
>
SigRef
{
self
.
dfg
.
signatures
.
push
(
signature
)
}
pub
fn
import_function
(
&
mut
self
data
:
ExtFuncData
)
-
>
FuncRef
{
self
.
dfg
.
ext_funcs
.
push
(
data
)
}
pub
fn
create_global_value
(
&
mut
self
data
:
GlobalValueData
)
-
>
GlobalValue
{
self
.
global_values
.
push
(
data
)
}
pub
fn
create_heap
(
&
mut
self
data
:
HeapData
)
-
>
Heap
{
self
.
heaps
.
push
(
data
)
}
pub
fn
create_table
(
&
mut
self
data
:
TableData
)
-
>
Table
{
self
.
tables
.
push
(
data
)
}
pub
fn
display
<
'
a
I
:
Into
<
Option
<
&
'
a
dyn
TargetIsa
>
>
>
(
&
'
a
self
isa
:
I
)
-
>
DisplayFunction
<
'
a
>
{
DisplayFunction
(
self
isa
.
into
(
)
.
into
(
)
)
}
pub
fn
display_with
<
'
a
>
(
&
'
a
self
annotations
:
DisplayFunctionAnnotations
<
'
a
>
)
-
>
DisplayFunction
<
'
a
>
{
DisplayFunction
(
self
annotations
)
}
pub
fn
special_param
(
&
self
purpose
:
ir
:
:
ArgumentPurpose
)
-
>
Option
<
ir
:
:
Value
>
{
let
entry
=
self
.
layout
.
entry_block
(
)
.
expect
(
"
Function
is
empty
"
)
;
self
.
signature
.
special_param_index
(
purpose
)
.
map
(
|
i
|
self
.
dfg
.
ebb_params
(
entry
)
[
i
]
)
}
pub
fn
inst_offsets
<
'
a
>
(
&
'
a
self
ebb
:
Ebb
encinfo
:
&
EncInfo
)
-
>
InstOffsetIter
<
'
a
>
{
assert
!
(
!
self
.
offsets
.
is_empty
(
)
"
Code
layout
must
be
computed
first
"
)
;
InstOffsetIter
{
encinfo
:
encinfo
.
clone
(
)
func
:
self
divert
:
RegDiversions
:
:
new
(
)
encodings
:
&
self
.
encodings
offset
:
self
.
offsets
[
ebb
]
iter
:
self
.
layout
.
ebb_insts
(
ebb
)
}
}
pub
fn
update_encoding
(
&
mut
self
inst
:
ir
:
:
Inst
isa
:
&
dyn
TargetIsa
)
-
>
Result
<
(
)
Legalize
>
{
self
.
encode
(
inst
isa
)
.
map
(
|
e
|
self
.
encodings
[
inst
]
=
e
)
}
pub
fn
encode
(
&
self
inst
:
ir
:
:
Inst
isa
:
&
dyn
TargetIsa
)
-
>
Result
<
Encoding
Legalize
>
{
isa
.
encode
(
&
self
&
self
.
dfg
[
inst
]
self
.
dfg
.
ctrl_typevar
(
inst
)
)
}
pub
fn
collect_debug_info
(
&
mut
self
)
{
self
.
dfg
.
collect_debug_info
(
)
;
}
pub
fn
change_branch_destination
(
&
mut
self
inst
:
Inst
new_dest
:
Ebb
)
{
match
self
.
dfg
[
inst
]
.
branch_destination_mut
(
)
{
None
=
>
(
)
Some
(
inst_dest
)
=
>
*
inst_dest
=
new_dest
}
}
#
[
cfg
(
feature
=
"
basic
-
blocks
"
)
]
pub
fn
is_ebb_basic
(
&
self
ebb
:
Ebb
)
-
>
Result
<
(
)
(
Inst
&
'
static
str
)
>
{
let
dfg
=
&
self
.
dfg
;
let
inst_iter
=
self
.
layout
.
ebb_insts
(
ebb
)
;
let
mut
inst_iter
=
inst_iter
.
skip_while
(
|
&
inst
|
!
dfg
[
inst
]
.
opcode
(
)
.
is_branch
(
)
)
;
if
let
Some
(
_branch
)
=
inst_iter
.
next
(
)
{
if
let
Some
(
next
)
=
inst_iter
.
next
(
)
{
match
dfg
[
next
]
.
opcode
(
)
{
Opcode
:
:
Fallthrough
|
Opcode
:
:
Jump
=
>
(
)
_
=
>
return
Err
(
(
next
"
post
-
branch
instruction
not
fallthrough
or
jump
"
)
)
}
}
}
Ok
(
(
)
)
}
}
#
[
derive
(
Default
)
]
pub
struct
DisplayFunctionAnnotations
<
'
a
>
{
pub
isa
:
Option
<
&
'
a
dyn
TargetIsa
>
pub
value_ranges
:
Option
<
&
'
a
ValueLabelsRanges
>
}
impl
<
'
a
>
From
<
Option
<
&
'
a
dyn
TargetIsa
>
>
for
DisplayFunctionAnnotations
<
'
a
>
{
fn
from
(
isa
:
Option
<
&
'
a
dyn
TargetIsa
>
)
-
>
DisplayFunctionAnnotations
{
DisplayFunctionAnnotations
{
isa
value_ranges
:
None
}
}
}
pub
struct
DisplayFunction
<
'
a
>
(
&
'
a
Function
DisplayFunctionAnnotations
<
'
a
>
)
;
impl
<
'
a
>
fmt
:
:
Display
for
DisplayFunction
<
'
a
>
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write_function
(
fmt
self
.
0
&
self
.
1
)
}
}
impl
fmt
:
:
Display
for
Function
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write_function
(
fmt
self
&
DisplayFunctionAnnotations
:
:
default
(
)
)
}
}
impl
fmt
:
:
Debug
for
Function
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write_function
(
fmt
self
&
DisplayFunctionAnnotations
:
:
default
(
)
)
}
}
pub
struct
InstOffsetIter
<
'
a
>
{
encinfo
:
EncInfo
divert
:
RegDiversions
func
:
&
'
a
Function
encodings
:
&
'
a
InstEncodings
offset
:
CodeOffset
iter
:
ir
:
:
layout
:
:
Insts
<
'
a
>
}
impl
<
'
a
>
Iterator
for
InstOffsetIter
<
'
a
>
{
type
Item
=
(
CodeOffset
ir
:
:
Inst
CodeOffset
)
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next
(
)
.
map
(
|
inst
|
{
self
.
divert
.
apply
(
&
self
.
func
.
dfg
[
inst
]
)
;
let
byte_size
=
self
.
encinfo
.
byte_size
(
self
.
encodings
[
inst
]
inst
&
self
.
divert
self
.
func
)
;
let
offset
=
self
.
offset
;
self
.
offset
+
=
byte_size
;
(
offset
inst
byte_size
)
}
)
}
}
