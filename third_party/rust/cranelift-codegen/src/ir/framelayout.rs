use
crate
:
:
ir
:
:
entities
:
:
Inst
;
use
crate
:
:
isa
:
:
RegUnit
;
use
std
:
:
boxed
:
:
Box
;
use
crate
:
:
HashMap
;
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
Hash
)
]
pub
enum
FrameLayoutChange
{
CallFrameAddressAt
{
reg
:
RegUnit
offset
:
isize
}
RegAt
{
reg
:
RegUnit
cfa_offset
:
isize
}
ReturnAddressAt
{
cfa_offset
:
isize
}
Preserve
Restore
}
pub
type
FrameLayoutChanges
=
Box
<
[
FrameLayoutChange
]
>
;
#
[
derive
(
Debug
Clone
)
]
pub
struct
FrameLayout
{
pub
initial
:
FrameLayoutChanges
pub
instructions
:
HashMap
<
Inst
FrameLayoutChanges
>
}
impl
FrameLayout
{
pub
fn
new
(
)
-
>
Self
{
FrameLayout
{
initial
:
vec
!
[
]
.
into_boxed_slice
(
)
instructions
:
HashMap
:
:
new
(
)
}
}
pub
fn
clear
(
&
mut
self
)
{
self
.
initial
=
vec
!
[
]
.
into_boxed_slice
(
)
;
self
.
instructions
.
clear
(
)
;
}
}
