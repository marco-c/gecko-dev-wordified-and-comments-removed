use
crate
:
:
entity
:
:
SecondaryMap
;
use
crate
:
:
ir
:
:
dfg
:
:
ValueDef
;
use
crate
:
:
ir
:
:
Value
;
use
crate
:
:
ir
:
:
{
DataFlowGraph
Function
Inst
}
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
NumUses
{
uses
:
SecondaryMap
<
Inst
u32
>
}
impl
NumUses
{
fn
new
(
)
-
>
NumUses
{
NumUses
{
uses
:
SecondaryMap
:
:
with_default
(
0
)
}
}
pub
fn
compute
(
func
:
&
Function
)
-
>
NumUses
{
let
mut
uses
=
NumUses
:
:
new
(
)
;
for
bb
in
func
.
layout
.
blocks
(
)
{
for
inst
in
func
.
layout
.
block_insts
(
bb
)
{
for
arg
in
func
.
dfg
.
inst_args
(
inst
)
{
let
v
=
func
.
dfg
.
resolve_aliases
(
*
arg
)
;
uses
.
add_value
(
&
func
.
dfg
v
)
;
}
}
}
uses
}
fn
add_value
(
&
mut
self
dfg
:
&
DataFlowGraph
v
:
Value
)
{
match
dfg
.
value_def
(
v
)
{
ValueDef
:
:
Result
(
inst
_
)
=
>
{
self
.
uses
[
inst
]
+
=
1
;
}
_
=
>
{
}
}
}
pub
fn
take_uses
(
self
)
-
>
SecondaryMap
<
Inst
u32
>
{
self
.
uses
}
}
