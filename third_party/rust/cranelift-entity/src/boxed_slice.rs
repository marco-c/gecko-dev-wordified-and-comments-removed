use
crate
:
:
iter
:
:
{
Iter
IterMut
}
;
use
crate
:
:
keys
:
:
Keys
;
use
crate
:
:
EntityRef
;
use
core
:
:
marker
:
:
PhantomData
;
use
core
:
:
ops
:
:
{
Index
IndexMut
}
;
use
core
:
:
slice
;
use
std
:
:
boxed
:
:
Box
;
#
[
derive
(
Debug
Clone
)
]
pub
struct
BoxedSlice
<
K
V
>
where
K
:
EntityRef
{
elems
:
Box
<
[
V
]
>
unused
:
PhantomData
<
K
>
}
impl
<
K
V
>
BoxedSlice
<
K
V
>
where
K
:
EntityRef
{
pub
unsafe
fn
from_raw
(
raw
:
*
mut
[
V
]
)
-
>
Self
{
Self
{
elems
:
Box
:
:
from_raw
(
raw
)
unused
:
PhantomData
}
}
pub
fn
is_valid
(
&
self
k
:
K
)
-
>
bool
{
k
.
index
(
)
<
self
.
elems
.
len
(
)
}
pub
fn
get
(
&
self
k
:
K
)
-
>
Option
<
&
V
>
{
self
.
elems
.
get
(
k
.
index
(
)
)
}
pub
fn
get_mut
(
&
mut
self
k
:
K
)
-
>
Option
<
&
mut
V
>
{
self
.
elems
.
get_mut
(
k
.
index
(
)
)
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
elems
.
is_empty
(
)
}
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
elems
.
len
(
)
}
pub
fn
keys
(
&
self
)
-
>
Keys
<
K
>
{
Keys
:
:
with_len
(
self
.
elems
.
len
(
)
)
}
pub
fn
values
(
&
self
)
-
>
slice
:
:
Iter
<
V
>
{
self
.
elems
.
iter
(
)
}
pub
fn
values_mut
(
&
mut
self
)
-
>
slice
:
:
IterMut
<
V
>
{
self
.
elems
.
iter_mut
(
)
}
pub
fn
iter
(
&
self
)
-
>
Iter
<
K
V
>
{
Iter
:
:
new
(
self
.
elems
.
iter
(
)
)
}
pub
fn
iter_mut
(
&
mut
self
)
-
>
IterMut
<
K
V
>
{
IterMut
:
:
new
(
self
.
elems
.
iter_mut
(
)
)
}
pub
fn
last
(
&
self
)
-
>
Option
<
&
V
>
{
self
.
elems
.
last
(
)
}
}
impl
<
K
V
>
Index
<
K
>
for
BoxedSlice
<
K
V
>
where
K
:
EntityRef
{
type
Output
=
V
;
fn
index
(
&
self
k
:
K
)
-
>
&
V
{
&
self
.
elems
[
k
.
index
(
)
]
}
}
impl
<
K
V
>
IndexMut
<
K
>
for
BoxedSlice
<
K
V
>
where
K
:
EntityRef
{
fn
index_mut
(
&
mut
self
k
:
K
)
-
>
&
mut
V
{
&
mut
self
.
elems
[
k
.
index
(
)
]
}
}
impl
<
'
a
K
V
>
IntoIterator
for
&
'
a
BoxedSlice
<
K
V
>
where
K
:
EntityRef
{
type
Item
=
(
K
&
'
a
V
)
;
type
IntoIter
=
Iter
<
'
a
K
V
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
Iter
:
:
new
(
self
.
elems
.
iter
(
)
)
}
}
impl
<
'
a
K
V
>
IntoIterator
for
&
'
a
mut
BoxedSlice
<
K
V
>
where
K
:
EntityRef
{
type
Item
=
(
K
&
'
a
mut
V
)
;
type
IntoIter
=
IterMut
<
'
a
K
V
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
IterMut
:
:
new
(
self
.
elems
.
iter_mut
(
)
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
crate
:
:
primary
:
:
PrimaryMap
;
use
std
:
:
vec
:
:
Vec
;
#
[
derive
(
Clone
Copy
Debug
PartialEq
Eq
)
]
struct
E
(
u32
)
;
impl
EntityRef
for
E
{
fn
new
(
i
:
usize
)
-
>
Self
{
E
(
i
as
u32
)
}
fn
index
(
self
)
-
>
usize
{
self
.
0
as
usize
}
}
#
[
test
]
fn
basic
(
)
{
let
r0
=
E
(
0
)
;
let
r1
=
E
(
1
)
;
let
p
=
PrimaryMap
:
:
<
E
isize
>
:
:
new
(
)
;
let
m
=
p
.
into_boxed_slice
(
)
;
let
v
:
Vec
<
E
>
=
m
.
keys
(
)
.
collect
(
)
;
assert_eq
!
(
v
[
]
)
;
assert
!
(
!
m
.
is_valid
(
r0
)
)
;
assert
!
(
!
m
.
is_valid
(
r1
)
)
;
}
#
[
test
]
fn
iter
(
)
{
let
mut
p
:
PrimaryMap
<
E
usize
>
=
PrimaryMap
:
:
new
(
)
;
p
.
push
(
12
)
;
p
.
push
(
33
)
;
let
mut
m
=
p
.
into_boxed_slice
(
)
;
let
mut
i
=
0
;
for
(
key
value
)
in
&
m
{
assert_eq
!
(
key
.
index
(
)
i
)
;
match
i
{
0
=
>
assert_eq
!
(
*
value
12
)
1
=
>
assert_eq
!
(
*
value
33
)
_
=
>
panic
!
(
)
}
i
+
=
1
;
}
i
=
0
;
for
(
key_mut
value_mut
)
in
m
.
iter_mut
(
)
{
assert_eq
!
(
key_mut
.
index
(
)
i
)
;
match
i
{
0
=
>
assert_eq
!
(
*
value_mut
12
)
1
=
>
assert_eq
!
(
*
value_mut
33
)
_
=
>
panic
!
(
)
}
i
+
=
1
;
}
}
#
[
test
]
fn
iter_rev
(
)
{
let
mut
p
:
PrimaryMap
<
E
usize
>
=
PrimaryMap
:
:
new
(
)
;
p
.
push
(
12
)
;
p
.
push
(
33
)
;
let
mut
m
=
p
.
into_boxed_slice
(
)
;
let
mut
i
=
2
;
for
(
key
value
)
in
m
.
iter
(
)
.
rev
(
)
{
i
-
=
1
;
assert_eq
!
(
key
.
index
(
)
i
)
;
match
i
{
0
=
>
assert_eq
!
(
*
value
12
)
1
=
>
assert_eq
!
(
*
value
33
)
_
=
>
panic
!
(
)
}
}
i
=
2
;
for
(
key
value
)
in
m
.
iter_mut
(
)
.
rev
(
)
{
i
-
=
1
;
assert_eq
!
(
key
.
index
(
)
i
)
;
match
i
{
0
=
>
assert_eq
!
(
*
value
12
)
1
=
>
assert_eq
!
(
*
value
33
)
_
=
>
panic
!
(
)
}
}
}
#
[
test
]
fn
keys
(
)
{
let
mut
p
:
PrimaryMap
<
E
usize
>
=
PrimaryMap
:
:
new
(
)
;
p
.
push
(
12
)
;
p
.
push
(
33
)
;
let
m
=
p
.
into_boxed_slice
(
)
;
let
mut
i
=
0
;
for
key
in
m
.
keys
(
)
{
assert_eq
!
(
key
.
index
(
)
i
)
;
i
+
=
1
;
}
}
#
[
test
]
fn
keys_rev
(
)
{
let
mut
p
:
PrimaryMap
<
E
usize
>
=
PrimaryMap
:
:
new
(
)
;
p
.
push
(
12
)
;
p
.
push
(
33
)
;
let
m
=
p
.
into_boxed_slice
(
)
;
let
mut
i
=
2
;
for
key
in
m
.
keys
(
)
.
rev
(
)
{
i
-
=
1
;
assert_eq
!
(
key
.
index
(
)
i
)
;
}
}
#
[
test
]
fn
values
(
)
{
let
mut
p
:
PrimaryMap
<
E
usize
>
=
PrimaryMap
:
:
new
(
)
;
p
.
push
(
12
)
;
p
.
push
(
33
)
;
let
mut
m
=
p
.
into_boxed_slice
(
)
;
let
mut
i
=
0
;
for
value
in
m
.
values
(
)
{
match
i
{
0
=
>
assert_eq
!
(
*
value
12
)
1
=
>
assert_eq
!
(
*
value
33
)
_
=
>
panic
!
(
)
}
i
+
=
1
;
}
i
=
0
;
for
value_mut
in
m
.
values_mut
(
)
{
match
i
{
0
=
>
assert_eq
!
(
*
value_mut
12
)
1
=
>
assert_eq
!
(
*
value_mut
33
)
_
=
>
panic
!
(
)
}
i
+
=
1
;
}
}
#
[
test
]
fn
values_rev
(
)
{
let
mut
p
:
PrimaryMap
<
E
usize
>
=
PrimaryMap
:
:
new
(
)
;
p
.
push
(
12
)
;
p
.
push
(
33
)
;
let
mut
m
=
p
.
into_boxed_slice
(
)
;
let
mut
i
=
2
;
for
value
in
m
.
values
(
)
.
rev
(
)
{
i
-
=
1
;
match
i
{
0
=
>
assert_eq
!
(
*
value
12
)
1
=
>
assert_eq
!
(
*
value
33
)
_
=
>
panic
!
(
)
}
}
i
=
2
;
for
value_mut
in
m
.
values_mut
(
)
.
rev
(
)
{
i
-
=
1
;
match
i
{
0
=
>
assert_eq
!
(
*
value_mut
12
)
1
=
>
assert_eq
!
(
*
value_mut
33
)
_
=
>
panic
!
(
)
}
}
}
}
