#
!
[
deny
(
missing_docs
trivial_numeric_casts
unused_extern_crates
)
]
#
!
[
warn
(
unused_import_braces
)
]
#
!
[
cfg_attr
(
feature
=
"
std
"
deny
(
unstable_features
)
)
]
#
!
[
cfg_attr
(
feature
=
"
clippy
"
plugin
(
clippy
(
conf_file
=
"
.
.
/
.
.
/
clippy
.
toml
"
)
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
allow
(
new_without_default
new_without_default_derive
)
)
]
#
!
[
cfg_attr
(
feature
=
"
cargo
-
clippy
"
warn
(
float_arithmetic
mut_mut
nonminimal_bool
option_map_unwrap_or
option_map_unwrap_or_else
print_stdout
unicode_not_nfc
use_self
)
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
feature
(
alloc
)
)
]
#
[
cfg
(
not
(
feature
=
"
std
"
)
)
]
mod
std
{
extern
crate
alloc
;
pub
use
self
:
:
alloc
:
:
{
boxed
string
vec
}
;
pub
use
core
:
:
*
;
}
#
[
doc
(
hidden
)
]
pub
extern
crate
core
as
__core
;
pub
trait
EntityRef
:
Copy
+
Eq
{
fn
new
(
usize
)
-
>
Self
;
fn
index
(
self
)
-
>
usize
;
}
#
[
macro_export
]
macro_rules
!
entity_impl
{
(
entity
:
ident
)
=
>
{
impl
crate
:
:
EntityRef
for
entity
{
fn
new
(
index
:
usize
)
-
>
Self
{
debug_assert
!
(
index
<
(
crate
:
:
__core
:
:
u32
:
:
MAX
as
usize
)
)
;
entity
(
index
as
u32
)
}
fn
index
(
self
)
-
>
usize
{
self
.
0
as
usize
}
}
impl
crate
:
:
packed_option
:
:
ReservedValue
for
entity
{
fn
reserved_value
(
)
-
>
entity
{
entity
(
crate
:
:
__core
:
:
u32
:
:
MAX
)
}
}
}
;
(
entity
:
ident
display_prefix
:
expr
)
=
>
{
entity_impl
!
(
entity
)
;
impl
crate
:
:
__core
:
:
fmt
:
:
Display
for
entity
{
fn
fmt
(
&
self
f
:
&
mut
crate
:
:
__core
:
:
fmt
:
:
Formatter
)
-
>
crate
:
:
__core
:
:
fmt
:
:
Result
{
write
!
(
f
concat
!
(
display_prefix
"
{
}
"
)
self
.
0
)
}
}
impl
crate
:
:
__core
:
:
fmt
:
:
Debug
for
entity
{
fn
fmt
(
&
self
f
:
&
mut
crate
:
:
__core
:
:
fmt
:
:
Formatter
)
-
>
crate
:
:
__core
:
:
fmt
:
:
Result
{
(
self
as
&
crate
:
:
__core
:
:
fmt
:
:
Display
)
.
fmt
(
f
)
}
}
}
;
}
pub
mod
packed_option
;
mod
iter
;
mod
keys
;
mod
list
;
mod
map
;
mod
primary
;
mod
set
;
mod
sparse
;
pub
use
self
:
:
iter
:
:
{
Iter
IterMut
}
;
pub
use
self
:
:
keys
:
:
Keys
;
pub
use
self
:
:
list
:
:
{
EntityList
ListPool
}
;
pub
use
self
:
:
map
:
:
EntityMap
;
pub
use
self
:
:
primary
:
:
PrimaryMap
;
pub
use
self
:
:
set
:
:
EntitySet
;
pub
use
self
:
:
sparse
:
:
{
SparseMap
SparseMapValue
SparseSet
}
;
