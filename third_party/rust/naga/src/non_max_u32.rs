#
!
[
allow
(
dead_code
)
]
use
std
:
:
num
:
:
NonZeroU32
;
#
[
derive
(
Copy
Clone
Eq
PartialEq
Ord
PartialOrd
Hash
)
]
#
[
cfg_attr
(
feature
=
"
arbitrary
"
derive
(
arbitrary
:
:
Arbitrary
)
)
]
pub
struct
NonMaxU32
(
NonZeroU32
)
;
impl
NonMaxU32
{
pub
const
fn
new
(
n
:
u32
)
-
>
Option
<
Self
>
{
match
NonZeroU32
:
:
new
(
n
.
wrapping_add
(
1
)
)
{
Some
(
non_zero
)
=
>
Some
(
NonMaxU32
(
non_zero
)
)
None
=
>
None
}
}
pub
const
fn
get
(
self
)
-
>
u32
{
self
.
0
.
get
(
)
-
1
}
pub
const
unsafe
fn
new_unchecked
(
n
:
u32
)
-
>
NonMaxU32
{
NonMaxU32
(
unsafe
{
NonZeroU32
:
:
new_unchecked
(
n
+
1
)
}
)
}
pub
const
unsafe
fn
from_usize_unchecked
(
index
:
usize
)
-
>
Self
{
NonMaxU32
(
unsafe
{
NonZeroU32
:
:
new_unchecked
(
index
as
u32
+
1
)
}
)
}
pub
fn
checked_add
(
self
n
:
u32
)
-
>
Option
<
Self
>
{
Some
(
NonMaxU32
(
self
.
0
.
checked_add
(
n
)
?
)
)
}
}
impl
std
:
:
fmt
:
:
Debug
for
NonMaxU32
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
std
:
:
fmt
:
:
Result
{
self
.
get
(
)
.
fmt
(
f
)
}
}
impl
std
:
:
fmt
:
:
Display
for
NonMaxU32
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
std
:
:
fmt
:
:
Result
{
self
.
get
(
)
.
fmt
(
f
)
}
}
#
[
cfg
(
feature
=
"
serialize
"
)
]
impl
serde
:
:
Serialize
for
NonMaxU32
{
fn
serialize
<
S
>
(
&
self
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
serde
:
:
Serializer
{
serializer
.
serialize_u32
(
self
.
get
(
)
)
}
}
#
[
cfg
(
feature
=
"
deserialize
"
)
]
impl
<
'
de
>
serde
:
:
Deserialize
<
'
de
>
for
NonMaxU32
{
fn
deserialize
<
D
>
(
deserializer
:
D
)
-
>
Result
<
Self
D
:
:
Error
>
where
D
:
serde
:
:
Deserializer
<
'
de
>
{
let
n
=
<
u32
as
serde
:
:
Deserialize
>
:
:
deserialize
(
deserializer
)
?
;
NonMaxU32
:
:
new
(
n
)
.
ok_or_else
(
|
|
{
<
D
:
:
Error
as
serde
:
:
de
:
:
Error
>
:
:
invalid_value
(
serde
:
:
de
:
:
Unexpected
:
:
Unsigned
(
n
as
u64
)
&
"
a
value
no
less
than
0
and
no
greater
than
4294967294
(
2
^
32
-
2
)
"
)
}
)
}
}
#
[
test
]
fn
size
(
)
{
use
core
:
:
mem
:
:
size_of
;
assert_eq
!
(
size_of
:
:
<
Option
<
NonMaxU32
>
>
(
)
size_of
:
:
<
u32
>
(
)
)
;
}
