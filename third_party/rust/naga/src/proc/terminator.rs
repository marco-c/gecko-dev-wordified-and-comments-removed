pub
fn
ensure_block_returns
(
block
:
&
mut
crate
:
:
Block
)
{
use
crate
:
:
Statement
as
S
;
match
block
.
last_mut
(
)
{
Some
(
&
mut
S
:
:
Block
(
ref
mut
b
)
)
=
>
{
ensure_block_returns
(
b
)
;
}
Some
(
&
mut
S
:
:
If
{
condition
:
_
ref
mut
accept
ref
mut
reject
}
)
=
>
{
ensure_block_returns
(
accept
)
;
ensure_block_returns
(
reject
)
;
}
Some
(
&
mut
S
:
:
Switch
{
selector
:
_
ref
mut
cases
}
)
=
>
{
for
case
in
cases
.
iter_mut
(
)
{
if
!
case
.
fall_through
{
ensure_block_returns
(
&
mut
case
.
body
)
;
}
}
}
Some
(
&
mut
(
S
:
:
Break
|
S
:
:
Continue
|
S
:
:
Return
{
.
.
}
|
S
:
:
Kill
)
)
=
>
(
)
Some
(
&
mut
(
S
:
:
Emit
(
_
)
|
S
:
:
Loop
{
.
.
}
|
S
:
:
Store
{
.
.
}
|
S
:
:
ImageStore
{
.
.
}
|
S
:
:
Call
{
.
.
}
|
S
:
:
RayQuery
{
.
.
}
|
S
:
:
Atomic
{
.
.
}
|
S
:
:
ImageAtomic
{
.
.
}
|
S
:
:
WorkGroupUniformLoad
{
.
.
}
|
S
:
:
SubgroupBallot
{
.
.
}
|
S
:
:
SubgroupCollectiveOperation
{
.
.
}
|
S
:
:
SubgroupGather
{
.
.
}
|
S
:
:
ControlBarrier
(
_
)
|
S
:
:
MemoryBarrier
(
_
)
)
)
|
None
=
>
block
.
push
(
S
:
:
Return
{
value
:
None
}
Default
:
:
default
(
)
)
}
}
