#
[
cfg
(
feature
=
"
dot
-
out
"
)
]
pub
mod
dot
;
#
[
cfg
(
feature
=
"
glsl
-
out
"
)
]
pub
mod
glsl
;
#
[
cfg
(
feature
=
"
hlsl
-
out
"
)
]
pub
mod
hlsl
;
#
[
cfg
(
feature
=
"
msl
-
out
"
)
]
pub
mod
msl
;
#
[
cfg
(
feature
=
"
spv
-
out
"
)
]
pub
mod
spv
;
#
[
cfg
(
feature
=
"
wgsl
-
out
"
)
]
pub
mod
wgsl
;
impl
crate
:
:
Expression
{
#
[
allow
(
dead_code
)
]
fn
bake_ref_count
(
&
self
)
-
>
usize
{
match
*
self
{
crate
:
:
Expression
:
:
Access
{
.
.
}
|
crate
:
:
Expression
:
:
AccessIndex
{
.
.
}
=
>
!
0
crate
:
:
Expression
:
:
ImageSample
{
.
.
}
|
crate
:
:
Expression
:
:
ImageLoad
{
.
.
}
=
>
1
crate
:
:
Expression
:
:
Derivative
{
.
.
}
=
>
1
crate
:
:
Expression
:
:
Load
{
.
.
}
=
>
1
_
=
>
2
}
}
}
#
[
allow
(
dead_code
)
]
fn
binary_operation_str
(
op
:
crate
:
:
BinaryOperator
)
-
>
&
'
static
str
{
use
crate
:
:
BinaryOperator
as
Bo
;
match
op
{
Bo
:
:
Add
=
>
"
+
"
Bo
:
:
Subtract
=
>
"
-
"
Bo
:
:
Multiply
=
>
"
*
"
Bo
:
:
Divide
=
>
"
/
"
Bo
:
:
Modulo
=
>
"
%
"
Bo
:
:
Equal
=
>
"
=
=
"
Bo
:
:
NotEqual
=
>
"
!
=
"
Bo
:
:
Less
=
>
"
<
"
Bo
:
:
LessEqual
=
>
"
<
=
"
Bo
:
:
Greater
=
>
"
>
"
Bo
:
:
GreaterEqual
=
>
"
>
=
"
Bo
:
:
And
=
>
"
&
"
Bo
:
:
ExclusiveOr
=
>
"
^
"
Bo
:
:
InclusiveOr
=
>
"
|
"
Bo
:
:
LogicalAnd
=
>
"
&
&
"
Bo
:
:
LogicalOr
=
>
"
|
|
"
Bo
:
:
ShiftLeft
=
>
"
<
<
"
Bo
:
:
ShiftRight
=
>
"
>
>
"
}
}
#
[
allow
(
dead_code
)
]
fn
vector_size_str
(
size
:
crate
:
:
VectorSize
)
-
>
&
'
static
str
{
match
size
{
crate
:
:
VectorSize
:
:
Bi
=
>
"
2
"
crate
:
:
VectorSize
:
:
Tri
=
>
"
3
"
crate
:
:
VectorSize
:
:
Quad
=
>
"
4
"
}
}
