use
super
:
:
{
ast
:
:
*
builtins
:
:
{
inject_builtin
sampled_to_depth
}
context
:
:
{
Context
ExprPos
StmtContext
}
error
:
:
{
Error
ErrorKind
}
types
:
:
scalar_components
Frontend
Result
}
;
use
crate
:
:
{
front
:
:
glsl
:
:
types
:
:
type_power
proc
:
:
ensure_block_returns
AddressSpace
Arena
Block
EntryPoint
Expression
Function
FunctionArgument
FunctionResult
Handle
Literal
LocalVariable
ScalarKind
Span
Statement
StructMember
Type
TypeInner
}
;
use
std
:
:
iter
;
struct
ProxyWrite
{
target
:
Handle
<
Expression
>
value
:
Handle
<
Expression
>
convert
:
Option
<
(
ScalarKind
crate
:
:
Bytes
)
>
}
impl
Frontend
{
pub
(
crate
)
fn
function_or_constructor_call
(
&
mut
self
ctx
:
&
mut
Context
stmt
:
&
StmtContext
body
:
&
mut
Block
fc
:
FunctionCallKind
raw_args
:
&
[
Handle
<
HirExpr
>
]
meta
:
Span
)
-
>
Result
<
Option
<
Handle
<
Expression
>
>
>
{
let
args
:
Vec
<
_
>
=
raw_args
.
iter
(
)
.
map
(
|
e
|
ctx
.
lower_expect_inner
(
stmt
self
*
e
ExprPos
:
:
Rhs
body
)
)
.
collect
:
:
<
Result
<
_
>
>
(
)
?
;
match
fc
{
FunctionCallKind
:
:
TypeConstructor
(
ty
)
=
>
{
if
args
.
len
(
)
=
=
1
{
self
.
constructor_single
(
ctx
body
ty
args
[
0
]
meta
)
.
map
(
Some
)
}
else
{
self
.
constructor_many
(
ctx
body
ty
args
meta
)
.
map
(
Some
)
}
}
FunctionCallKind
:
:
Function
(
name
)
=
>
{
self
.
function_call
(
ctx
stmt
body
name
args
raw_args
meta
)
}
}
}
fn
constructor_single
(
&
mut
self
ctx
:
&
mut
Context
body
:
&
mut
Block
ty
:
Handle
<
Type
>
(
mut
value
expr_meta
)
:
(
Handle
<
Expression
>
Span
)
meta
:
Span
)
-
>
Result
<
Handle
<
Expression
>
>
{
let
expr_type
=
self
.
resolve_type
(
ctx
value
expr_meta
)
?
;
let
vector_size
=
match
*
expr_type
{
TypeInner
:
:
Vector
{
size
.
.
}
=
>
Some
(
size
)
_
=
>
None
}
;
match
self
.
module
.
types
[
ty
]
.
inner
.
scalar_kind
(
)
{
Some
(
result_scalar_kind
)
if
expr_type
.
scalar_kind
(
)
=
=
Some
(
ScalarKind
:
:
Bool
)
&
&
result_scalar_kind
!
=
ScalarKind
:
:
Bool
=
>
{
let
l0
=
Literal
:
:
zero
(
result_scalar_kind
4
)
.
unwrap
(
)
;
let
l1
=
Literal
:
:
one
(
result_scalar_kind
4
)
.
unwrap
(
)
;
let
mut
reject
=
ctx
.
add_expression
(
Expression
:
:
Literal
(
l0
)
expr_meta
body
)
;
let
mut
accept
=
ctx
.
add_expression
(
Expression
:
:
Literal
(
l1
)
expr_meta
body
)
;
ctx
.
implicit_splat
(
self
&
mut
reject
meta
vector_size
)
?
;
ctx
.
implicit_splat
(
self
&
mut
accept
meta
vector_size
)
?
;
let
h
=
ctx
.
add_expression
(
Expression
:
:
Select
{
accept
reject
condition
:
value
}
expr_meta
body
)
;
return
Ok
(
h
)
;
}
_
=
>
{
}
}
Ok
(
match
self
.
module
.
types
[
ty
]
.
inner
{
TypeInner
:
:
Vector
{
size
kind
width
}
if
vector_size
.
is_none
(
)
=
>
{
ctx
.
forced_conversion
(
self
&
mut
value
expr_meta
kind
width
)
?
;
if
let
TypeInner
:
:
Scalar
{
.
.
}
=
*
self
.
resolve_type
(
ctx
value
expr_meta
)
?
{
ctx
.
add_expression
(
Expression
:
:
Splat
{
size
value
}
meta
body
)
}
else
{
self
.
vector_constructor
(
ctx
body
ty
size
kind
width
&
[
(
value
expr_meta
)
]
meta
)
?
}
}
TypeInner
:
:
Scalar
{
kind
width
}
=
>
{
let
mut
expr
=
value
;
if
let
TypeInner
:
:
Vector
{
.
.
}
|
TypeInner
:
:
Matrix
{
.
.
}
=
*
self
.
resolve_type
(
ctx
value
expr_meta
)
?
{
expr
=
ctx
.
add_expression
(
Expression
:
:
AccessIndex
{
base
:
expr
index
:
0
}
meta
body
)
;
}
if
let
TypeInner
:
:
Matrix
{
.
.
}
=
*
self
.
resolve_type
(
ctx
value
expr_meta
)
?
{
expr
=
ctx
.
add_expression
(
Expression
:
:
AccessIndex
{
base
:
expr
index
:
0
}
meta
body
)
;
}
ctx
.
add_expression
(
Expression
:
:
As
{
kind
expr
convert
:
Some
(
width
)
}
meta
body
)
}
TypeInner
:
:
Vector
{
size
kind
width
}
=
>
{
if
vector_size
.
map_or
(
true
|
s
|
s
!
=
size
)
{
value
=
ctx
.
vector_resize
(
size
value
expr_meta
body
)
;
}
ctx
.
add_expression
(
Expression
:
:
As
{
kind
expr
:
value
convert
:
Some
(
width
)
}
meta
body
)
}
TypeInner
:
:
Matrix
{
columns
rows
width
}
=
>
self
.
matrix_one_arg
(
ctx
body
ty
columns
rows
width
(
value
expr_meta
)
meta
)
?
TypeInner
:
:
Struct
{
ref
members
.
.
}
=
>
{
let
scalar_components
=
members
.
get
(
0
)
.
and_then
(
|
member
|
scalar_components
(
&
self
.
module
.
types
[
member
.
ty
]
.
inner
)
)
;
if
let
Some
(
(
kind
width
)
)
=
scalar_components
{
ctx
.
implicit_conversion
(
self
&
mut
value
expr_meta
kind
width
)
?
;
}
ctx
.
add_expression
(
Expression
:
:
Compose
{
ty
components
:
vec
!
[
value
]
}
meta
body
)
}
TypeInner
:
:
Array
{
base
.
.
}
=
>
{
let
scalar_components
=
scalar_components
(
&
self
.
module
.
types
[
base
]
.
inner
)
;
if
let
Some
(
(
kind
width
)
)
=
scalar_components
{
ctx
.
implicit_conversion
(
self
&
mut
value
expr_meta
kind
width
)
?
;
}
ctx
.
add_expression
(
Expression
:
:
Compose
{
ty
components
:
vec
!
[
value
]
}
meta
body
)
}
_
=
>
{
self
.
errors
.
push
(
Error
{
kind
:
ErrorKind
:
:
SemanticError
(
"
Bad
type
constructor
"
.
into
(
)
)
meta
}
)
;
value
}
}
)
}
#
[
allow
(
clippy
:
:
too_many_arguments
)
]
fn
matrix_one_arg
(
&
mut
self
ctx
:
&
mut
Context
body
:
&
mut
Block
ty
:
Handle
<
Type
>
columns
:
crate
:
:
VectorSize
rows
:
crate
:
:
VectorSize
width
:
crate
:
:
Bytes
(
mut
value
expr_meta
)
:
(
Handle
<
Expression
>
Span
)
meta
:
Span
)
-
>
Result
<
Handle
<
Expression
>
>
{
let
mut
components
=
Vec
:
:
with_capacity
(
columns
as
usize
)
;
ctx
.
forced_conversion
(
self
&
mut
value
expr_meta
ScalarKind
:
:
Float
width
)
?
;
match
*
self
.
resolve_type
(
ctx
value
expr_meta
)
?
{
TypeInner
:
:
Scalar
{
.
.
}
=
>
{
let
vector_ty
=
self
.
module
.
types
.
insert
(
Type
{
name
:
None
inner
:
TypeInner
:
:
Vector
{
size
:
rows
kind
:
ScalarKind
:
:
Float
width
}
}
meta
)
;
let
zero_literal
=
Literal
:
:
zero
(
ScalarKind
:
:
Float
width
)
.
unwrap
(
)
;
let
zero
=
ctx
.
add_expression
(
Expression
:
:
Literal
(
zero_literal
)
meta
body
)
;
for
i
in
0
.
.
columns
as
u32
{
components
.
push
(
ctx
.
add_expression
(
Expression
:
:
Compose
{
ty
:
vector_ty
components
:
(
0
.
.
rows
as
u32
)
.
map
(
|
r
|
match
r
=
=
i
{
true
=
>
value
false
=
>
zero
}
)
.
collect
(
)
}
meta
body
)
)
}
}
TypeInner
:
:
Matrix
{
rows
:
ori_rows
columns
:
ori_cols
.
.
}
=
>
{
let
zero_literal
=
Literal
:
:
zero
(
ScalarKind
:
:
Float
width
)
.
unwrap
(
)
;
let
one_literal
=
Literal
:
:
one
(
ScalarKind
:
:
Float
width
)
.
unwrap
(
)
;
let
zero
=
ctx
.
add_expression
(
Expression
:
:
Literal
(
zero_literal
)
meta
body
)
;
let
one
=
ctx
.
add_expression
(
Expression
:
:
Literal
(
one_literal
)
meta
body
)
;
let
vector_ty
=
self
.
module
.
types
.
insert
(
Type
{
name
:
None
inner
:
TypeInner
:
:
Vector
{
size
:
rows
kind
:
ScalarKind
:
:
Float
width
}
}
meta
)
;
for
i
in
0
.
.
columns
as
u32
{
if
i
<
ori_cols
as
u32
{
use
std
:
:
cmp
:
:
Ordering
;
let
vector
=
ctx
.
add_expression
(
Expression
:
:
AccessIndex
{
base
:
value
index
:
i
}
meta
body
)
;
components
.
push
(
match
ori_rows
.
cmp
(
&
rows
)
{
Ordering
:
:
Less
=
>
{
let
components
=
(
0
.
.
rows
as
u32
)
.
map
(
|
r
|
{
if
r
<
ori_rows
as
u32
{
ctx
.
add_expression
(
Expression
:
:
AccessIndex
{
base
:
vector
index
:
r
}
meta
body
)
}
else
if
r
=
=
i
{
one
}
else
{
zero
}
}
)
.
collect
(
)
;
ctx
.
add_expression
(
Expression
:
:
Compose
{
ty
:
vector_ty
components
}
meta
body
)
}
Ordering
:
:
Equal
=
>
vector
Ordering
:
:
Greater
=
>
ctx
.
vector_resize
(
rows
vector
meta
body
)
}
)
}
else
{
let
compose_expr
=
Expression
:
:
Compose
{
ty
:
vector_ty
components
:
(
0
.
.
rows
as
u32
)
.
map
(
|
r
|
match
r
=
=
i
{
true
=
>
one
false
=
>
zero
}
)
.
collect
(
)
}
;
let
vec
=
ctx
.
add_expression
(
compose_expr
meta
body
)
;
components
.
push
(
vec
)
}
}
}
_
=
>
{
components
=
iter
:
:
repeat
(
value
)
.
take
(
columns
as
usize
)
.
collect
(
)
;
}
}
Ok
(
ctx
.
add_expression
(
Expression
:
:
Compose
{
ty
components
}
meta
body
)
)
}
#
[
allow
(
clippy
:
:
too_many_arguments
)
]
fn
vector_constructor
(
&
mut
self
ctx
:
&
mut
Context
body
:
&
mut
Block
ty
:
Handle
<
Type
>
size
:
crate
:
:
VectorSize
kind
:
ScalarKind
width
:
crate
:
:
Bytes
args
:
&
[
(
Handle
<
Expression
>
Span
)
]
meta
:
Span
)
-
>
Result
<
Handle
<
Expression
>
>
{
let
mut
components
=
Vec
:
:
with_capacity
(
size
as
usize
)
;
for
(
mut
arg
expr_meta
)
in
args
.
iter
(
)
.
copied
(
)
{
ctx
.
forced_conversion
(
self
&
mut
arg
expr_meta
kind
width
)
?
;
if
components
.
len
(
)
>
=
size
as
usize
{
break
;
}
match
*
self
.
resolve_type
(
ctx
arg
expr_meta
)
?
{
TypeInner
:
:
Scalar
{
.
.
}
=
>
components
.
push
(
arg
)
TypeInner
:
:
Matrix
{
rows
columns
.
.
}
=
>
{
components
.
reserve
(
rows
as
usize
*
columns
as
usize
)
;
for
c
in
0
.
.
(
columns
as
u32
)
{
let
base
=
ctx
.
add_expression
(
Expression
:
:
AccessIndex
{
base
:
arg
index
:
c
}
expr_meta
body
)
;
for
r
in
0
.
.
(
rows
as
u32
)
{
components
.
push
(
ctx
.
add_expression
(
Expression
:
:
AccessIndex
{
base
index
:
r
}
expr_meta
body
)
)
}
}
}
TypeInner
:
:
Vector
{
size
:
ori_size
.
.
}
=
>
{
components
.
reserve
(
ori_size
as
usize
)
;
for
index
in
0
.
.
(
ori_size
as
u32
)
{
components
.
push
(
ctx
.
add_expression
(
Expression
:
:
AccessIndex
{
base
:
arg
index
}
expr_meta
body
)
)
}
}
_
=
>
components
.
push
(
arg
)
}
}
components
.
truncate
(
size
as
usize
)
;
Ok
(
ctx
.
add_expression
(
Expression
:
:
Compose
{
ty
components
}
meta
body
)
)
}
fn
constructor_many
(
&
mut
self
ctx
:
&
mut
Context
body
:
&
mut
Block
ty
:
Handle
<
Type
>
args
:
Vec
<
(
Handle
<
Expression
>
Span
)
>
meta
:
Span
)
-
>
Result
<
Handle
<
Expression
>
>
{
let
mut
components
=
Vec
:
:
with_capacity
(
args
.
len
(
)
)
;
match
self
.
module
.
types
[
ty
]
.
inner
{
TypeInner
:
:
Matrix
{
columns
rows
width
}
=
>
{
let
mut
flattened
=
Vec
:
:
with_capacity
(
columns
as
usize
*
rows
as
usize
)
;
for
(
mut
arg
meta
)
in
args
.
iter
(
)
.
copied
(
)
{
ctx
.
forced_conversion
(
self
&
mut
arg
meta
ScalarKind
:
:
Float
width
)
?
;
match
*
self
.
resolve_type
(
ctx
arg
meta
)
?
{
TypeInner
:
:
Vector
{
size
.
.
}
=
>
{
for
i
in
0
.
.
(
size
as
u32
)
{
flattened
.
push
(
ctx
.
add_expression
(
Expression
:
:
AccessIndex
{
base
:
arg
index
:
i
}
meta
body
)
)
}
}
_
=
>
flattened
.
push
(
arg
)
}
}
let
ty
=
self
.
module
.
types
.
insert
(
Type
{
name
:
None
inner
:
TypeInner
:
:
Vector
{
size
:
rows
kind
:
ScalarKind
:
:
Float
width
}
}
meta
)
;
for
chunk
in
flattened
.
chunks
(
rows
as
usize
)
{
components
.
push
(
ctx
.
add_expression
(
Expression
:
:
Compose
{
ty
components
:
Vec
:
:
from
(
chunk
)
}
meta
body
)
)
}
}
TypeInner
:
:
Vector
{
size
kind
width
}
=
>
{
return
self
.
vector_constructor
(
ctx
body
ty
size
kind
width
&
args
meta
)
}
TypeInner
:
:
Array
{
base
.
.
}
=
>
{
for
(
mut
arg
meta
)
in
args
.
iter
(
)
.
copied
(
)
{
let
scalar_components
=
scalar_components
(
&
self
.
module
.
types
[
base
]
.
inner
)
;
if
let
Some
(
(
kind
width
)
)
=
scalar_components
{
ctx
.
implicit_conversion
(
self
&
mut
arg
meta
kind
width
)
?
;
}
components
.
push
(
arg
)
}
}
TypeInner
:
:
Struct
{
ref
members
.
.
}
=
>
{
for
(
(
mut
arg
meta
)
member
)
in
args
.
iter
(
)
.
copied
(
)
.
zip
(
members
.
iter
(
)
)
{
let
scalar_components
=
scalar_components
(
&
self
.
module
.
types
[
member
.
ty
]
.
inner
)
;
if
let
Some
(
(
kind
width
)
)
=
scalar_components
{
ctx
.
implicit_conversion
(
self
&
mut
arg
meta
kind
width
)
?
;
}
components
.
push
(
arg
)
}
}
_
=
>
{
return
Err
(
Error
{
kind
:
ErrorKind
:
:
SemanticError
(
"
Constructor
:
Too
many
arguments
"
.
into
(
)
)
meta
}
)
}
}
Ok
(
ctx
.
add_expression
(
Expression
:
:
Compose
{
ty
components
}
meta
body
)
)
}
#
[
allow
(
clippy
:
:
too_many_arguments
)
]
fn
function_call
(
&
mut
self
ctx
:
&
mut
Context
stmt
:
&
StmtContext
body
:
&
mut
Block
name
:
String
args
:
Vec
<
(
Handle
<
Expression
>
Span
)
>
raw_args
:
&
[
Handle
<
HirExpr
>
]
meta
:
Span
)
-
>
Result
<
Option
<
Handle
<
Expression
>
>
>
{
for
&
(
expr
span
)
in
args
.
iter
(
)
{
self
.
typifier_grow
(
ctx
expr
span
)
?
;
}
let
mut
variations
=
builtin_required_variations
(
args
.
iter
(
)
.
map
(
|
&
(
expr
_
)
|
ctx
.
typifier
.
get
(
expr
&
self
.
module
.
types
)
)
)
;
let
declaration
=
self
.
lookup_function
.
entry
(
name
.
clone
(
)
)
.
or_insert_with
(
|
|
{
variations
|
=
BuiltinVariations
:
:
STANDARD
;
Default
:
:
default
(
)
}
)
;
inject_builtin
(
declaration
&
mut
self
.
module
&
name
variations
)
;
let
declaration
=
self
.
lookup_function
.
get
(
&
name
)
.
unwrap
(
)
;
let
mut
maybe_overload
=
None
;
let
mut
old_conversions
=
vec
!
[
Conversion
:
:
None
;
args
.
len
(
)
]
;
let
mut
ambiguous
=
false
;
'
outer
:
for
(
overload_idx
overload
)
in
declaration
.
overloads
.
iter
(
)
.
enumerate
(
)
{
if
args
.
len
(
)
!
=
overload
.
parameters
.
len
(
)
{
continue
;
}
log
:
:
trace
!
(
"
Testing
overload
{
}
"
overload_idx
)
;
let
mut
exact
=
true
;
let
mut
superior
=
None
;
let
mut
new_conversions
=
vec
!
[
Conversion
:
:
None
;
args
.
len
(
)
]
;
for
(
i
overload_parameter
)
in
overload
.
parameters
.
iter
(
)
.
enumerate
(
)
{
let
call_argument
=
&
args
[
i
]
;
let
parameter_info
=
&
overload
.
parameters_info
[
i
]
;
if
parameter_info
.
depth
{
sampled_to_depth
(
&
mut
self
.
module
ctx
call_argument
.
0
call_argument
.
1
&
mut
self
.
errors
)
;
self
.
invalidate_expression
(
ctx
call_argument
.
0
call_argument
.
1
)
?
}
let
overload_param_ty
=
&
self
.
module
.
types
[
*
overload_parameter
]
.
inner
;
let
call_arg_ty
=
self
.
resolve_type
(
ctx
call_argument
.
0
call_argument
.
1
)
?
;
log
:
:
trace
!
(
"
Testing
parameter
{
}
\
n
\
tOverload
=
{
:
?
}
\
n
\
tCall
=
{
:
?
}
"
i
overload_param_ty
call_arg_ty
)
;
if
let
(
&
TypeInner
:
:
Image
{
class
:
crate
:
:
ImageClass
:
:
Storage
{
format
:
overload_format
access
:
overload_access
}
dim
:
overload_dim
arrayed
:
overload_arrayed
}
&
TypeInner
:
:
Image
{
class
:
crate
:
:
ImageClass
:
:
Storage
{
format
:
call_format
access
:
call_access
}
dim
:
call_dim
arrayed
:
call_arrayed
}
)
=
(
overload_param_ty
call_arg_ty
)
{
let
good_size
=
call_dim
=
=
overload_dim
&
&
call_arrayed
=
=
overload_arrayed
;
let
good_format
=
overload_format
=
=
call_format
|
|
(
overload
.
internal
&
&
ScalarKind
:
:
from
(
overload_format
)
=
=
ScalarKind
:
:
from
(
call_format
)
)
;
if
!
(
good_size
&
&
good_format
)
{
continue
'
outer
;
}
if
!
call_access
.
contains
(
overload_access
)
{
self
.
errors
.
push
(
Error
{
kind
:
ErrorKind
:
:
SemanticError
(
format
!
(
"
'
{
name
}
'
:
image
needs
{
overload_access
:
?
}
access
but
only
{
call_access
:
?
}
was
provided
"
)
.
into
(
)
)
meta
}
)
;
}
new_conversions
[
i
]
=
Conversion
:
:
Exact
;
continue
;
}
else
if
overload_param_ty
=
=
call_arg_ty
{
new_conversions
[
i
]
=
Conversion
:
:
Exact
;
continue
;
}
if
let
ParameterQualifier
:
:
InOut
=
parameter_info
.
qualifier
{
continue
'
outer
;
}
let
maybe_conversion
=
if
parameter_info
.
qualifier
.
is_lhs
(
)
{
conversion
(
call_arg_ty
overload_param_ty
)
}
else
{
conversion
(
overload_param_ty
call_arg_ty
)
}
;
let
conversion
=
match
maybe_conversion
{
Some
(
info
)
=
>
info
None
=
>
continue
'
outer
}
;
exact
=
false
;
let
best_arg
=
match
(
conversion
old_conversions
[
i
]
)
{
(
_
Conversion
:
:
Exact
)
=
>
false
(
_
Conversion
:
:
None
)
=
>
true
(
Conversion
:
:
FloatToDouble
_
)
=
>
true
(
_
Conversion
:
:
FloatToDouble
)
=
>
false
(
Conversion
:
:
IntToFloat
Conversion
:
:
IntToDouble
)
=
>
true
(
Conversion
:
:
IntToDouble
Conversion
:
:
IntToFloat
)
=
>
false
_
=
>
continue
}
;
match
best_arg
{
true
=
>
match
superior
{
Some
(
false
)
=
>
ambiguous
=
true
_
=
>
{
superior
=
Some
(
true
)
;
new_conversions
[
i
]
=
conversion
}
}
false
=
>
match
superior
{
Some
(
true
)
=
>
ambiguous
=
true
_
=
>
superior
=
Some
(
false
)
}
}
}
if
exact
{
maybe_overload
=
Some
(
overload
)
;
ambiguous
=
false
;
break
;
}
match
superior
{
Some
(
true
)
=
>
{
maybe_overload
=
Some
(
overload
)
;
old_conversions
=
new_conversions
;
}
Some
(
false
)
=
>
{
}
None
=
>
{
ambiguous
=
true
;
maybe_overload
=
Some
(
overload
)
;
}
}
}
if
ambiguous
{
self
.
errors
.
push
(
Error
{
kind
:
ErrorKind
:
:
SemanticError
(
format
!
(
"
Ambiguous
best
function
for
'
{
name
}
'
"
)
.
into
(
)
)
meta
}
)
}
let
overload
=
maybe_overload
.
ok_or_else
(
|
|
Error
{
kind
:
ErrorKind
:
:
SemanticError
(
format
!
(
"
Unknown
function
'
{
name
}
'
"
)
.
into
(
)
)
meta
}
)
?
;
let
parameters_info
=
overload
.
parameters_info
.
clone
(
)
;
let
parameters
=
overload
.
parameters
.
clone
(
)
;
let
is_void
=
overload
.
void
;
let
kind
=
overload
.
kind
;
let
mut
arguments
=
Vec
:
:
with_capacity
(
args
.
len
(
)
)
;
let
mut
proxy_writes
=
Vec
:
:
new
(
)
;
for
(
(
(
parameter_info
call_argument
)
expr
)
parameter
)
in
parameters_info
.
iter
(
)
.
zip
(
&
args
)
.
zip
(
raw_args
)
.
zip
(
&
parameters
)
{
let
(
mut
handle
meta
)
=
ctx
.
lower_expect_inner
(
stmt
self
*
expr
parameter_info
.
qualifier
.
as_pos
(
)
body
)
?
;
if
parameter_info
.
qualifier
.
is_lhs
(
)
{
self
.
process_lhs_argument
(
ctx
body
meta
*
parameter
parameter_info
handle
call_argument
&
mut
proxy_writes
&
mut
arguments
)
?
;
continue
;
}
let
scalar_comps
=
scalar_components
(
&
self
.
module
.
types
[
*
parameter
]
.
inner
)
;
if
let
Some
(
(
kind
width
)
)
=
scalar_comps
{
ctx
.
implicit_conversion
(
self
&
mut
handle
meta
kind
width
)
?
;
}
arguments
.
push
(
handle
)
}
match
kind
{
FunctionKind
:
:
Call
(
function
)
=
>
{
ctx
.
emit_end
(
body
)
;
let
result
=
if
!
is_void
{
Some
(
ctx
.
add_expression
(
Expression
:
:
CallResult
(
function
)
meta
body
)
)
}
else
{
None
}
;
body
.
push
(
crate
:
:
Statement
:
:
Call
{
function
arguments
result
}
meta
)
;
ctx
.
emit_start
(
)
;
for
proxy_write
in
proxy_writes
{
let
mut
value
=
ctx
.
add_expression
(
Expression
:
:
Load
{
pointer
:
proxy_write
.
value
}
meta
body
)
;
if
let
Some
(
(
kind
width
)
)
=
proxy_write
.
convert
{
ctx
.
conversion
(
&
mut
value
meta
kind
width
)
?
;
}
ctx
.
emit_restart
(
body
)
;
body
.
push
(
Statement
:
:
Store
{
pointer
:
proxy_write
.
target
value
}
meta
)
;
}
Ok
(
result
)
}
FunctionKind
:
:
Macro
(
builtin
)
=
>
{
builtin
.
call
(
self
ctx
body
arguments
.
as_mut_slice
(
)
meta
)
}
}
}
#
[
allow
(
clippy
:
:
too_many_arguments
)
]
fn
process_lhs_argument
(
&
mut
self
ctx
:
&
mut
Context
body
:
&
mut
Block
meta
:
Span
parameter_ty
:
Handle
<
Type
>
parameter_info
:
&
ParameterInfo
original
:
Handle
<
Expression
>
call_argument
:
&
(
Handle
<
Expression
>
Span
)
proxy_writes
:
&
mut
Vec
<
ProxyWrite
>
arguments
:
&
mut
Vec
<
Handle
<
Expression
>
>
)
-
>
Result
<
(
)
>
{
let
original_ty
=
self
.
resolve_type
(
ctx
original
meta
)
?
;
let
original_pointer_space
=
original_ty
.
pointer_space
(
)
;
let
mut
maybe_ty
=
match
*
original_ty
{
TypeInner
:
:
Vector
{
size
kind
width
}
=
>
Some
(
self
.
module
.
types
.
insert
(
Type
{
name
:
None
inner
:
TypeInner
:
:
Vector
{
size
kind
width
}
}
Span
:
:
default
(
)
)
)
TypeInner
:
:
Pointer
{
base
space
}
if
space
!
=
AddressSpace
:
:
Function
=
>
Some
(
base
)
TypeInner
:
:
ValuePointer
{
size
kind
width
space
}
if
space
!
=
AddressSpace
:
:
Function
=
>
{
let
inner
=
match
size
{
Some
(
size
)
=
>
TypeInner
:
:
Vector
{
size
kind
width
}
None
=
>
TypeInner
:
:
Scalar
{
kind
width
}
}
;
Some
(
self
.
module
.
types
.
insert
(
Type
{
name
:
None
inner
}
Span
:
:
default
(
)
)
)
}
_
=
>
None
}
;
let
value
=
if
original_pointer_space
.
is_some
(
)
{
ctx
.
add_expression
(
Expression
:
:
Load
{
pointer
:
original
}
Span
:
:
default
(
)
body
)
}
else
{
original
}
;
let
call_arg_ty
=
self
.
resolve_type
(
ctx
call_argument
.
0
call_argument
.
1
)
?
;
let
overload_param_ty
=
&
self
.
module
.
types
[
parameter_ty
]
.
inner
;
let
needs_conversion
=
call_arg_ty
!
=
overload_param_ty
;
let
arg_scalar_comps
=
scalar_components
(
call_arg_ty
)
;
if
needs_conversion
{
maybe_ty
=
Some
(
parameter_ty
)
;
}
if
let
Some
(
ty
)
=
maybe_ty
{
let
spill_var
=
ctx
.
locals
.
append
(
LocalVariable
{
name
:
None
ty
init
:
None
}
Span
:
:
default
(
)
)
;
let
spill_expr
=
ctx
.
add_expression
(
Expression
:
:
LocalVariable
(
spill_var
)
Span
:
:
default
(
)
body
)
;
if
let
ParameterQualifier
:
:
InOut
=
parameter_info
.
qualifier
{
body
.
push
(
Statement
:
:
Store
{
pointer
:
spill_expr
value
}
Span
:
:
default
(
)
)
;
}
arguments
.
push
(
spill_expr
)
;
let
convert
=
if
needs_conversion
{
arg_scalar_comps
}
else
{
None
}
;
if
let
Expression
:
:
Swizzle
{
size
mut
vector
pattern
}
=
ctx
.
expressions
[
original
]
{
if
let
Expression
:
:
Load
{
pointer
}
=
ctx
.
expressions
[
vector
]
{
vector
=
pointer
;
}
for
(
i
component
)
in
pattern
.
iter
(
)
.
take
(
size
as
usize
)
.
enumerate
(
)
{
let
original
=
ctx
.
add_expression
(
Expression
:
:
AccessIndex
{
base
:
vector
index
:
*
component
as
u32
}
Span
:
:
default
(
)
body
)
;
let
spill_component
=
ctx
.
add_expression
(
Expression
:
:
AccessIndex
{
base
:
spill_expr
index
:
i
as
u32
}
Span
:
:
default
(
)
body
)
;
proxy_writes
.
push
(
ProxyWrite
{
target
:
original
value
:
spill_component
convert
}
)
;
}
}
else
{
proxy_writes
.
push
(
ProxyWrite
{
target
:
original
value
:
spill_expr
convert
}
)
;
}
}
else
{
arguments
.
push
(
original
)
;
}
Ok
(
(
)
)
}
pub
(
crate
)
fn
add_function
(
&
mut
self
ctx
:
Context
name
:
String
result
:
Option
<
FunctionResult
>
mut
body
:
Block
meta
:
Span
)
{
ensure_block_returns
(
&
mut
body
)
;
let
void
=
result
.
is_none
(
)
;
let
&
mut
Frontend
{
ref
mut
lookup_function
ref
mut
module
.
.
}
=
self
;
let
mut
variations
=
builtin_required_variations
(
ctx
.
parameters
.
iter
(
)
.
map
(
|
&
arg
|
&
module
.
types
[
arg
]
.
inner
)
)
;
let
declaration
=
lookup_function
.
entry
(
name
.
clone
(
)
)
.
or_insert_with
(
|
|
{
variations
|
=
BuiltinVariations
:
:
STANDARD
;
Default
:
:
default
(
)
}
)
;
inject_builtin
(
declaration
module
&
name
variations
)
;
let
Context
{
expressions
locals
arguments
parameters
parameters_info
.
.
}
=
ctx
;
let
function
=
Function
{
name
:
Some
(
name
)
arguments
result
local_variables
:
locals
expressions
named_expressions
:
crate
:
:
NamedExpressions
:
:
default
(
)
body
}
;
'
outer
:
for
decl
in
declaration
.
overloads
.
iter_mut
(
)
{
if
parameters
.
len
(
)
!
=
decl
.
parameters
.
len
(
)
{
continue
;
}
for
(
new_parameter
old_parameter
)
in
parameters
.
iter
(
)
.
zip
(
decl
.
parameters
.
iter
(
)
)
{
let
new_inner
=
&
module
.
types
[
*
new_parameter
]
.
inner
;
let
old_inner
=
&
module
.
types
[
*
old_parameter
]
.
inner
;
if
new_inner
!
=
old_inner
{
continue
'
outer
;
}
}
if
decl
.
defined
{
return
self
.
errors
.
push
(
Error
{
kind
:
ErrorKind
:
:
SemanticError
(
"
Function
already
defined
"
.
into
(
)
)
meta
}
)
;
}
decl
.
defined
=
true
;
decl
.
parameters_info
=
parameters_info
;
match
decl
.
kind
{
FunctionKind
:
:
Call
(
handle
)
=
>
*
self
.
module
.
functions
.
get_mut
(
handle
)
=
function
FunctionKind
:
:
Macro
(
_
)
=
>
{
let
handle
=
module
.
functions
.
append
(
function
meta
)
;
decl
.
kind
=
FunctionKind
:
:
Call
(
handle
)
}
}
return
;
}
let
handle
=
module
.
functions
.
append
(
function
meta
)
;
declaration
.
overloads
.
push
(
Overload
{
parameters
parameters_info
kind
:
FunctionKind
:
:
Call
(
handle
)
defined
:
true
internal
:
false
void
}
)
;
}
pub
(
crate
)
fn
add_prototype
(
&
mut
self
ctx
:
Context
name
:
String
result
:
Option
<
FunctionResult
>
meta
:
Span
)
{
let
void
=
result
.
is_none
(
)
;
let
&
mut
Frontend
{
ref
mut
lookup_function
ref
mut
module
.
.
}
=
self
;
let
mut
variations
=
builtin_required_variations
(
ctx
.
parameters
.
iter
(
)
.
map
(
|
&
arg
|
&
module
.
types
[
arg
]
.
inner
)
)
;
let
declaration
=
lookup_function
.
entry
(
name
.
clone
(
)
)
.
or_insert_with
(
|
|
{
variations
|
=
BuiltinVariations
:
:
STANDARD
;
Default
:
:
default
(
)
}
)
;
inject_builtin
(
declaration
module
&
name
variations
)
;
let
Context
{
arguments
parameters
parameters_info
.
.
}
=
ctx
;
let
function
=
Function
{
name
:
Some
(
name
)
arguments
result
.
.
Default
:
:
default
(
)
}
;
'
outer
:
for
decl
in
declaration
.
overloads
.
iter
(
)
{
if
parameters
.
len
(
)
!
=
decl
.
parameters
.
len
(
)
{
continue
;
}
for
(
new_parameter
old_parameter
)
in
parameters
.
iter
(
)
.
zip
(
decl
.
parameters
.
iter
(
)
)
{
let
new_inner
=
&
module
.
types
[
*
new_parameter
]
.
inner
;
let
old_inner
=
&
module
.
types
[
*
old_parameter
]
.
inner
;
if
new_inner
!
=
old_inner
{
continue
'
outer
;
}
}
return
self
.
errors
.
push
(
Error
{
kind
:
ErrorKind
:
:
SemanticError
(
"
Prototype
already
defined
"
.
into
(
)
)
meta
}
)
;
}
let
handle
=
module
.
functions
.
append
(
function
meta
)
;
declaration
.
overloads
.
push
(
Overload
{
parameters
parameters_info
kind
:
FunctionKind
:
:
Call
(
handle
)
defined
:
false
internal
:
false
void
}
)
;
}
fn
arg_type_walker
(
&
self
name
:
Option
<
String
>
binding
:
crate
:
:
Binding
pointer
:
Handle
<
Expression
>
ty
:
Handle
<
Type
>
expressions
:
&
mut
Arena
<
Expression
>
f
:
&
mut
impl
FnMut
(
Option
<
String
>
Handle
<
Expression
>
Handle
<
Type
>
crate
:
:
Binding
&
mut
Arena
<
Expression
>
)
)
{
match
self
.
module
.
types
[
ty
]
.
inner
{
TypeInner
:
:
Array
{
base
size
:
crate
:
:
ArraySize
:
:
Constant
(
size
)
.
.
}
=
>
{
let
mut
location
=
match
binding
{
crate
:
:
Binding
:
:
Location
{
location
.
.
}
=
>
location
crate
:
:
Binding
:
:
BuiltIn
(
_
)
=
>
return
}
;
let
interpolation
=
self
.
module
.
types
[
base
]
.
inner
.
scalar_kind
(
)
.
map
(
|
kind
|
match
kind
{
ScalarKind
:
:
Float
=
>
crate
:
:
Interpolation
:
:
Perspective
_
=
>
crate
:
:
Interpolation
:
:
Flat
}
)
;
for
index
in
0
.
.
size
.
get
(
)
{
let
member_pointer
=
expressions
.
append
(
Expression
:
:
AccessIndex
{
base
:
pointer
index
}
crate
:
:
Span
:
:
default
(
)
)
;
let
binding
=
crate
:
:
Binding
:
:
Location
{
location
interpolation
sampling
:
None
}
;
location
+
=
1
;
self
.
arg_type_walker
(
name
.
clone
(
)
binding
member_pointer
base
expressions
f
)
}
}
TypeInner
:
:
Struct
{
ref
members
.
.
}
=
>
{
let
mut
location
=
match
binding
{
crate
:
:
Binding
:
:
Location
{
location
.
.
}
=
>
location
crate
:
:
Binding
:
:
BuiltIn
(
_
)
=
>
return
}
;
for
(
i
member
)
in
members
.
iter
(
)
.
enumerate
(
)
{
let
member_pointer
=
expressions
.
append
(
Expression
:
:
AccessIndex
{
base
:
pointer
index
:
i
as
u32
}
crate
:
:
Span
:
:
default
(
)
)
;
let
binding
=
match
member
.
binding
.
clone
(
)
{
Some
(
binding
)
=
>
binding
None
=
>
{
let
interpolation
=
self
.
module
.
types
[
member
.
ty
]
.
inner
.
scalar_kind
(
)
.
map
(
|
kind
|
match
kind
{
ScalarKind
:
:
Float
=
>
crate
:
:
Interpolation
:
:
Perspective
_
=
>
crate
:
:
Interpolation
:
:
Flat
}
)
;
let
binding
=
crate
:
:
Binding
:
:
Location
{
location
interpolation
sampling
:
None
}
;
location
+
=
1
;
binding
}
}
;
self
.
arg_type_walker
(
member
.
name
.
clone
(
)
binding
member_pointer
member
.
ty
expressions
f
)
}
}
_
=
>
f
(
name
pointer
ty
binding
expressions
)
}
}
pub
(
crate
)
fn
add_entry_point
(
&
mut
self
function
:
Handle
<
Function
>
global_init_body
:
Block
mut
expressions
:
Arena
<
Expression
>
)
{
let
mut
arguments
=
Vec
:
:
new
(
)
;
let
mut
body
=
Block
:
:
with_capacity
(
global_init_body
.
len
(
)
+
self
.
entry_args
.
len
(
)
*
2
+
3
)
;
for
arg
in
self
.
entry_args
.
iter
(
)
{
if
arg
.
storage
!
=
StorageQualifier
:
:
Input
{
continue
;
}
let
pointer
=
expressions
.
append
(
Expression
:
:
GlobalVariable
(
arg
.
handle
)
Default
:
:
default
(
)
)
;
self
.
arg_type_walker
(
arg
.
name
.
clone
(
)
arg
.
binding
.
clone
(
)
pointer
self
.
module
.
global_variables
[
arg
.
handle
]
.
ty
&
mut
expressions
&
mut
|
name
pointer
ty
binding
expressions
|
{
let
idx
=
arguments
.
len
(
)
as
u32
;
arguments
.
push
(
FunctionArgument
{
name
ty
binding
:
Some
(
binding
)
}
)
;
let
value
=
expressions
.
append
(
Expression
:
:
FunctionArgument
(
idx
)
Default
:
:
default
(
)
)
;
body
.
push
(
Statement
:
:
Store
{
pointer
value
}
Default
:
:
default
(
)
)
;
}
)
}
body
.
extend_block
(
global_init_body
)
;
body
.
push
(
Statement
:
:
Call
{
function
arguments
:
Vec
:
:
new
(
)
result
:
None
}
Default
:
:
default
(
)
)
;
let
mut
span
=
0
;
let
mut
members
=
Vec
:
:
new
(
)
;
let
mut
components
=
Vec
:
:
new
(
)
;
for
arg
in
self
.
entry_args
.
iter
(
)
{
if
arg
.
storage
!
=
StorageQualifier
:
:
Output
{
continue
;
}
let
pointer
=
expressions
.
append
(
Expression
:
:
GlobalVariable
(
arg
.
handle
)
Default
:
:
default
(
)
)
;
self
.
arg_type_walker
(
arg
.
name
.
clone
(
)
arg
.
binding
.
clone
(
)
pointer
self
.
module
.
global_variables
[
arg
.
handle
]
.
ty
&
mut
expressions
&
mut
|
name
pointer
ty
binding
expressions
|
{
members
.
push
(
StructMember
{
name
ty
binding
:
Some
(
binding
)
offset
:
span
}
)
;
span
+
=
self
.
module
.
types
[
ty
]
.
inner
.
size
(
self
.
module
.
to_ctx
(
)
)
;
let
len
=
expressions
.
len
(
)
;
let
load
=
expressions
.
append
(
Expression
:
:
Load
{
pointer
}
Default
:
:
default
(
)
)
;
body
.
push
(
Statement
:
:
Emit
(
expressions
.
range_from
(
len
)
)
Default
:
:
default
(
)
)
;
components
.
push
(
load
)
}
)
}
let
(
ty
value
)
=
if
!
components
.
is_empty
(
)
{
let
ty
=
self
.
module
.
types
.
insert
(
Type
{
name
:
None
inner
:
TypeInner
:
:
Struct
{
members
span
}
}
Default
:
:
default
(
)
)
;
let
len
=
expressions
.
len
(
)
;
let
res
=
expressions
.
append
(
Expression
:
:
Compose
{
ty
components
}
Default
:
:
default
(
)
)
;
body
.
push
(
Statement
:
:
Emit
(
expressions
.
range_from
(
len
)
)
Default
:
:
default
(
)
)
;
(
Some
(
ty
)
Some
(
res
)
)
}
else
{
(
None
None
)
}
;
body
.
push
(
Statement
:
:
Return
{
value
}
Default
:
:
default
(
)
)
;
self
.
module
.
entry_points
.
push
(
EntryPoint
{
name
:
"
main
"
.
to_string
(
)
stage
:
self
.
meta
.
stage
early_depth_test
:
Some
(
crate
:
:
EarlyDepthTest
{
conservative
:
None
}
)
.
filter
(
|
_
|
self
.
meta
.
early_fragment_tests
)
workgroup_size
:
self
.
meta
.
workgroup_size
function
:
Function
{
arguments
expressions
body
result
:
ty
.
map
(
|
ty
|
FunctionResult
{
ty
binding
:
None
}
)
.
.
Default
:
:
default
(
)
}
}
)
;
}
}
#
[
derive
(
PartialEq
Eq
Clone
Copy
Debug
)
]
enum
Conversion
{
Exact
FloatToDouble
IntToFloat
IntToDouble
Other
None
}
fn
conversion
(
target
:
&
TypeInner
source
:
&
TypeInner
)
-
>
Option
<
Conversion
>
{
use
ScalarKind
:
:
*
;
let
(
target_kind
target_width
source_kind
source_width
)
=
match
(
target
source
)
{
(
&
TypeInner
:
:
Scalar
{
kind
:
tgt_kind
width
:
tgt_width
}
&
TypeInner
:
:
Scalar
{
kind
:
src_kind
width
:
src_width
}
)
=
>
(
tgt_kind
tgt_width
src_kind
src_width
)
(
&
TypeInner
:
:
Vector
{
kind
:
tgt_kind
size
:
tgt_size
width
:
tgt_width
}
&
TypeInner
:
:
Vector
{
kind
:
src_kind
size
:
src_size
width
:
src_width
}
)
if
tgt_size
=
=
src_size
=
>
(
tgt_kind
tgt_width
src_kind
src_width
)
(
&
TypeInner
:
:
Matrix
{
rows
:
tgt_rows
columns
:
tgt_cols
width
:
tgt_width
}
&
TypeInner
:
:
Matrix
{
rows
:
src_rows
columns
:
src_cols
width
:
src_width
}
)
if
tgt_cols
=
=
src_cols
&
&
tgt_rows
=
=
src_rows
=
>
(
Float
tgt_width
Float
src_width
)
_
=
>
return
None
}
;
let
target_power
=
type_power
(
target_kind
target_width
)
;
let
source_power
=
type_power
(
source_kind
source_width
)
;
if
target_power
<
source_power
{
return
None
;
}
Some
(
match
(
(
target_kind
target_width
)
(
source_kind
source_width
)
)
{
(
(
Float
8
)
(
Float
4
)
)
=
>
Conversion
:
:
FloatToDouble
(
(
Float
4
)
(
Sint
|
Uint
_
)
)
=
>
Conversion
:
:
IntToFloat
(
(
Float
8
)
(
Sint
|
Uint
_
)
)
=
>
Conversion
:
:
IntToDouble
_
=
>
Conversion
:
:
Other
}
)
}
fn
builtin_required_variations
<
'
a
>
(
args
:
impl
Iterator
<
Item
=
&
'
a
TypeInner
>
)
-
>
BuiltinVariations
{
let
mut
variations
=
BuiltinVariations
:
:
empty
(
)
;
for
ty
in
args
{
match
*
ty
{
TypeInner
:
:
ValuePointer
{
kind
width
.
.
}
|
TypeInner
:
:
Scalar
{
kind
width
}
|
TypeInner
:
:
Vector
{
kind
width
.
.
}
=
>
{
if
kind
=
=
ScalarKind
:
:
Float
&
&
width
=
=
8
{
variations
|
=
BuiltinVariations
:
:
DOUBLE
}
}
TypeInner
:
:
Matrix
{
width
.
.
}
=
>
{
if
width
=
=
8
{
variations
|
=
BuiltinVariations
:
:
DOUBLE
}
}
TypeInner
:
:
Image
{
dim
arrayed
class
}
=
>
{
if
dim
=
=
crate
:
:
ImageDimension
:
:
Cube
&
&
arrayed
{
variations
|
=
BuiltinVariations
:
:
CUBE_TEXTURES_ARRAY
}
if
dim
=
=
crate
:
:
ImageDimension
:
:
D2
&
&
arrayed
&
&
class
.
is_multisampled
(
)
{
variations
|
=
BuiltinVariations
:
:
D2_MULTI_TEXTURES_ARRAY
}
}
_
=
>
{
}
}
}
variations
}
