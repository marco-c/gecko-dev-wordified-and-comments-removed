use
super
:
:
{
HandleSet
ModuleMap
}
;
use
crate
:
:
{
Handle
UniqueArena
}
;
pub
struct
TypeTracer
<
'
a
>
{
pub
types
:
&
'
a
UniqueArena
<
crate
:
:
Type
>
pub
types_used
:
&
'
a
mut
HandleSet
<
crate
:
:
Type
>
}
impl
<
'
a
>
TypeTracer
<
'
a
>
{
pub
fn
trace_types
(
&
mut
self
)
{
for
(
handle
ty
)
in
self
.
types
.
iter
(
)
.
rev
(
)
{
if
!
self
.
types_used
.
contains
(
handle
)
{
continue
;
}
use
crate
:
:
TypeInner
as
Ti
;
match
ty
.
inner
{
Ti
:
:
Scalar
{
.
.
}
|
Ti
:
:
Vector
{
.
.
}
|
Ti
:
:
Matrix
{
.
.
}
|
Ti
:
:
Atomic
{
.
.
}
|
Ti
:
:
ValuePointer
{
.
.
}
|
Ti
:
:
Image
{
.
.
}
|
Ti
:
:
Sampler
{
.
.
}
|
Ti
:
:
AccelerationStructure
|
Ti
:
:
RayQuery
=
>
{
}
Ti
:
:
Pointer
{
base
space
:
_
}
|
Ti
:
:
Array
{
base
size
:
_
stride
:
_
}
|
Ti
:
:
BindingArray
{
base
size
:
_
}
=
>
self
.
types_used
.
insert
(
base
)
Ti
:
:
Struct
{
ref
members
span
:
_
}
=
>
{
self
.
types_used
.
insert_iter
(
members
.
iter
(
)
.
map
(
|
m
|
m
.
ty
)
)
;
}
}
}
}
}
impl
ModuleMap
{
pub
fn
adjust_type
(
&
self
ty
:
&
mut
crate
:
:
Type
)
{
let
adjust
=
|
ty
:
&
mut
Handle
<
crate
:
:
Type
>
|
self
.
types
.
adjust
(
ty
)
;
use
crate
:
:
TypeInner
as
Ti
;
match
ty
.
inner
{
Ti
:
:
Scalar
(
_
)
|
Ti
:
:
Vector
{
.
.
}
|
Ti
:
:
Matrix
{
.
.
}
|
Ti
:
:
Atomic
(
_
)
|
Ti
:
:
ValuePointer
{
.
.
}
|
Ti
:
:
Image
{
.
.
}
|
Ti
:
:
Sampler
{
.
.
}
|
Ti
:
:
AccelerationStructure
|
Ti
:
:
RayQuery
=
>
{
}
Ti
:
:
Pointer
{
ref
mut
base
space
:
_
}
=
>
adjust
(
base
)
Ti
:
:
Array
{
ref
mut
base
size
:
_
stride
:
_
}
=
>
adjust
(
base
)
Ti
:
:
Struct
{
ref
mut
members
span
:
_
}
=
>
{
for
member
in
members
{
self
.
types
.
adjust
(
&
mut
member
.
ty
)
;
}
}
Ti
:
:
BindingArray
{
ref
mut
base
size
:
_
}
=
>
{
adjust
(
base
)
;
}
}
;
}
}
