#
[
macro_use
]
extern
crate
cfg_if
;
#
[
cfg
(
feature
=
"
terminal
-
logging
"
)
]
extern
crate
simple_logger
;
#
[
macro_use
]
extern
crate
log
;
cfg_if
!
{
if
#
[
cfg
(
target_os
=
"
macos
"
)
]
{
mod
rt_mach
;
#
[
allow
(
unused
non_camel_case_types
non_snake_case
non_upper_case_globals
)
]
mod
mach_sys
;
extern
crate
mach
;
extern
crate
libc
;
use
rt_mach
:
:
promote_current_thread_to_real_time_internal
;
use
rt_mach
:
:
demote_current_thread_from_real_time_internal
;
use
rt_mach
:
:
RtPriorityHandleInternal
;
}
else
if
#
[
cfg
(
target_os
=
"
windows
"
)
]
{
extern
crate
winapi
;
mod
rt_win
;
use
rt_win
:
:
promote_current_thread_to_real_time_internal
;
use
rt_win
:
:
demote_current_thread_from_real_time_internal
;
use
rt_win
:
:
RtPriorityHandleInternal
;
}
else
if
#
[
cfg
(
target_os
=
"
linux
"
)
]
{
mod
rt_linux
;
extern
crate
dbus
;
extern
crate
libc
;
use
rt_linux
:
:
promote_current_thread_to_real_time_internal
;
use
rt_linux
:
:
demote_current_thread_from_real_time_internal
;
use
rt_linux
:
:
RtPriorityHandleInternal
;
}
else
{
pub
struct
RtPriorityHandleInternal
{
}
pub
fn
promote_current_thread_to_real_time_internal
(
_
:
u32
audio_samplerate_hz
:
u32
)
-
>
Result
<
RtPriorityHandle
(
)
>
{
if
audio_samplerate_hz
=
=
0
{
return
Err
(
(
)
)
;
}
/
/
no
-
op
return
Ok
(
RtPriorityHandle
{
}
)
;
}
pub
fn
demote_current_thread_from_real_time_internal
(
_
:
RtPriorityHandle
)
-
>
Result
<
(
)
(
)
>
{
/
/
no
-
op
return
Ok
(
(
)
)
;
}
}
}
pub
type
RtPriorityHandle
=
RtPriorityHandleInternal
;
pub
fn
promote_current_thread_to_real_time
(
audio_buffer_frames
:
u32
audio_samplerate_hz
:
u32
)
-
>
Result
<
RtPriorityHandle
(
)
>
{
if
audio_samplerate_hz
=
=
0
{
return
Err
(
(
)
)
;
}
return
promote_current_thread_to_real_time_internal
(
audio_buffer_frames
audio_samplerate_hz
)
;
}
pub
fn
demote_current_thread_from_real_time
(
handle
:
RtPriorityHandle
)
-
>
Result
<
(
)
(
)
>
{
return
demote_current_thread_from_real_time_internal
(
handle
)
;
}
#
[
allow
(
non_camel_case_types
)
]
pub
struct
atp_handle
(
RtPriorityHandle
)
;
#
[
no_mangle
]
pub
extern
"
C
"
fn
atp_promote_current_thread_to_real_time
(
audio_buffer_frames
:
u32
audio_samplerate_hz
:
u32
)
-
>
*
mut
atp_handle
{
match
promote_current_thread_to_real_time
(
audio_buffer_frames
audio_samplerate_hz
)
{
Ok
(
handle
)
=
>
Box
:
:
into_raw
(
Box
:
:
new
(
atp_handle
(
handle
)
)
)
_
=
>
std
:
:
ptr
:
:
null_mut
(
)
}
}
#
[
no_mangle
]
pub
extern
"
C
"
fn
atp_demote_current_thread_from_real_time
(
handle
:
*
mut
atp_handle
)
-
>
i32
{
assert
!
(
!
handle
.
is_null
(
)
)
;
let
handle
=
unsafe
{
Box
:
:
from_raw
(
handle
)
}
;
match
demote_current_thread_from_real_time
(
handle
.
0
)
{
Ok
(
_
)
=
>
0
_
=
>
1
}
}
#
[
no_mangle
]
pub
extern
"
C
"
fn
atp_free_handle
(
handle
:
*
mut
atp_handle
)
-
>
i32
{
if
handle
.
is_null
(
)
{
return
1
;
}
let
_handle
=
unsafe
{
Box
:
:
from_raw
(
handle
)
}
;
0
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
cfg
(
feature
=
"
terminal
-
logging
"
)
]
use
simple_logger
;
#
[
test
]
fn
it_works
(
)
{
#
[
cfg
(
feature
=
"
terminal
-
logging
"
)
]
simple_logger
:
:
init
(
)
.
unwrap
(
)
;
{
assert
!
(
promote_current_thread_to_real_time
(
0
0
)
.
is_err
(
)
)
;
}
{
match
promote_current_thread_to_real_time
(
0
44100
)
{
Ok
(
rt_prio_handle
)
=
>
{
demote_current_thread_from_real_time
(
rt_prio_handle
)
.
unwrap
(
)
;
}
Err
(
e
)
=
>
{
panic
!
(
e
)
;
}
}
}
{
match
promote_current_thread_to_real_time
(
512
44100
)
{
Ok
(
rt_prio_handle
)
=
>
{
demote_current_thread_from_real_time
(
rt_prio_handle
)
.
unwrap
(
)
;
}
Err
(
e
)
=
>
{
panic
!
(
e
)
;
}
}
}
{
match
promote_current_thread_to_real_time
(
512
44100
)
{
Ok
(
_
)
=
>
{
}
Err
(
e
)
=
>
{
panic
!
(
e
)
;
}
}
}
}
}
