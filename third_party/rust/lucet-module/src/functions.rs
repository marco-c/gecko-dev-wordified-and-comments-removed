use
crate
:
:
traps
:
:
{
TrapManifest
TrapSite
}
;
use
cranelift_entity
:
:
entity_impl
;
use
serde
:
:
{
Deserialize
Serialize
}
;
use
std
:
:
slice
:
:
from_raw_parts
;
#
[
derive
(
Copy
Clone
PartialEq
Eq
Hash
Debug
Serialize
Deserialize
)
]
pub
struct
FunctionIndex
(
u32
)
;
impl
FunctionIndex
{
pub
fn
from_u32
(
idx
:
u32
)
-
>
FunctionIndex
{
FunctionIndex
(
idx
)
}
pub
fn
as_u32
(
&
self
)
-
>
u32
{
self
.
0
}
}
#
[
derive
(
Copy
Clone
PartialEq
Eq
Hash
Debug
Serialize
Deserialize
)
]
pub
struct
ImportFunction
<
'
a
>
{
pub
fn_idx
:
FunctionIndex
pub
module
:
&
'
a
str
pub
name
:
&
'
a
str
}
#
[
derive
(
Clone
PartialEq
Eq
Hash
Debug
Serialize
Deserialize
)
]
pub
struct
ExportFunction
<
'
a
>
{
pub
fn_idx
:
FunctionIndex
#
[
serde
(
borrow
)
]
pub
names
:
Vec
<
&
'
a
str
>
}
pub
struct
OwnedExportFunction
{
pub
fn_idx
:
FunctionIndex
pub
names
:
Vec
<
String
>
}
impl
OwnedExportFunction
{
pub
fn
to_ref
<
'
a
>
(
&
'
a
self
)
-
>
ExportFunction
<
'
a
>
{
ExportFunction
{
fn_idx
:
self
.
fn_idx
.
clone
(
)
names
:
self
.
names
.
iter
(
)
.
map
(
|
x
|
x
.
as_str
(
)
)
.
collect
(
)
}
}
}
pub
struct
OwnedImportFunction
{
pub
fn_idx
:
FunctionIndex
pub
module
:
String
pub
name
:
String
}
impl
OwnedImportFunction
{
pub
fn
to_ref
<
'
a
>
(
&
'
a
self
)
-
>
ImportFunction
<
'
a
>
{
ImportFunction
{
fn_idx
:
self
.
fn_idx
.
clone
(
)
module
:
self
.
module
.
as_str
(
)
name
:
self
.
name
.
as_str
(
)
}
}
}
#
[
derive
(
Copy
Clone
PartialEq
Eq
Hash
PartialOrd
Ord
Debug
Serialize
Deserialize
)
]
pub
struct
UniqueSignatureIndex
(
u32
)
;
entity_impl
!
(
UniqueSignatureIndex
)
;
#
[
derive
(
Copy
Clone
PartialEq
Eq
Hash
PartialOrd
Ord
Debug
Serialize
Deserialize
)
]
pub
struct
FunctionPointer
(
usize
)
;
impl
FunctionPointer
{
pub
fn
from_usize
(
ptr
:
usize
)
-
>
FunctionPointer
{
FunctionPointer
(
ptr
)
}
pub
fn
as_usize
(
&
self
)
-
>
usize
{
self
.
0
}
}
#
[
derive
(
Clone
Debug
Serialize
Deserialize
)
]
pub
struct
FunctionMetadata
<
'
a
>
{
pub
signature
:
UniqueSignatureIndex
#
[
serde
(
borrow
)
]
pub
name
:
Option
<
&
'
a
str
>
}
#
[
derive
(
Clone
Debug
Serialize
Deserialize
)
]
pub
struct
OwnedFunctionMetadata
{
pub
signature
:
UniqueSignatureIndex
pub
name
:
Option
<
String
>
}
impl
OwnedFunctionMetadata
{
pub
fn
to_ref
(
&
self
)
-
>
FunctionMetadata
<
'
_
>
{
FunctionMetadata
{
signature
:
self
.
signature
.
clone
(
)
name
:
self
.
name
.
as_ref
(
)
.
map
(
|
n
|
n
.
as_str
(
)
)
}
}
}
pub
struct
FunctionHandle
{
pub
ptr
:
FunctionPointer
pub
id
:
FunctionIndex
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Debug
)
]
pub
struct
FunctionSpec
{
code_addr
:
u64
code_len
:
u32
traps_addr
:
u64
traps_len
:
u64
}
impl
FunctionSpec
{
pub
fn
new
(
code_addr
:
u64
code_len
:
u32
traps_addr
:
u64
traps_len
:
u64
)
-
>
Self
{
FunctionSpec
{
code_addr
code_len
traps_addr
traps_len
}
}
pub
fn
ptr
(
&
self
)
-
>
FunctionPointer
{
FunctionPointer
:
:
from_usize
(
self
.
code_addr
as
usize
)
}
pub
fn
code_len
(
&
self
)
-
>
u32
{
self
.
code_len
}
pub
fn
traps_len
(
&
self
)
-
>
u64
{
self
.
traps_len
}
pub
fn
contains
(
&
self
addr
:
u64
)
-
>
bool
{
addr
>
=
self
.
code_addr
&
&
(
addr
-
self
.
code_addr
)
<
(
self
.
code_len
as
u64
)
}
pub
fn
relative_addr
(
&
self
addr
:
u64
)
-
>
Option
<
u32
>
{
if
let
Some
(
offset
)
=
addr
.
checked_sub
(
self
.
code_addr
)
{
if
offset
<
(
self
.
code_len
as
u64
)
{
return
Some
(
offset
as
u32
)
;
}
}
None
}
pub
fn
traps
(
&
self
)
-
>
Option
<
TrapManifest
<
'
_
>
>
{
let
traps_ptr
=
self
.
traps_addr
as
*
const
TrapSite
;
if
!
traps_ptr
.
is_null
(
)
{
let
traps_slice
=
unsafe
{
from_raw_parts
(
traps_ptr
self
.
traps_len
as
usize
)
}
;
Some
(
TrapManifest
:
:
new
(
traps_slice
)
)
}
else
{
None
}
}
}
