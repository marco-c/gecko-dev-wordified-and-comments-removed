use
std
:
:
collections
:
:
VecDeque
;
use
std
:
:
io
:
:
{
self
Error
ErrorKind
Result
}
;
use
std
:
:
mem
:
:
ManuallyDrop
;
use
std
:
:
sync
:
:
{
Arc
Mutex
}
;
use
crossbeam_channel
:
:
{
self
Receiver
Sender
}
;
use
mio
:
:
Token
;
use
slab
:
:
Slab
;
use
crate
:
:
ipccore
:
:
EventLoopHandle
;
pub
(
crate
)
trait
Handler
{
type
In
;
type
Out
;
fn
consume
(
&
mut
self
request
:
Self
:
:
In
)
-
>
Result
<
(
)
>
;
fn
produce
(
&
mut
self
)
-
>
Result
<
Option
<
Self
:
:
Out
>
>
;
}
pub
trait
Client
{
type
ServerMessage
;
type
ClientMessage
;
}
pub
trait
Server
{
type
ServerMessage
;
type
ClientMessage
;
fn
process
(
&
mut
self
req
:
Self
:
:
ServerMessage
)
-
>
Self
:
:
ClientMessage
;
}
type
ProxyKey
=
usize
;
type
ProxyRequest
<
Request
>
=
(
ProxyKey
Request
)
;
#
[
derive
(
Debug
)
]
pub
struct
Proxy
<
Request
Response
>
{
handle
:
Option
<
(
EventLoopHandle
Token
)
>
key
:
ProxyKey
response_rx
:
Receiver
<
Response
>
handler_tx
:
ManuallyDrop
<
Sender
<
ProxyRequest
<
Request
>
>
>
proxy_mgr
:
Arc
<
ProxyManager
<
Response
>
>
}
impl
<
Request
Response
>
Proxy
<
Request
Response
>
{
fn
new
(
handler_tx
:
Sender
<
ProxyRequest
<
Request
>
>
proxy_mgr
:
Arc
<
ProxyManager
<
Response
>
>
)
-
>
Result
<
Self
>
{
let
(
tx
rx
)
=
crossbeam_channel
:
:
bounded
(
1
)
;
Ok
(
Self
{
handle
:
None
key
:
proxy_mgr
.
register_proxy
(
tx
)
?
response_rx
:
rx
handler_tx
:
ManuallyDrop
:
:
new
(
handler_tx
)
proxy_mgr
}
)
}
pub
fn
try_clone
(
&
self
)
-
>
Result
<
Self
>
{
let
mut
clone
=
Self
:
:
new
(
(
*
self
.
handler_tx
)
.
clone
(
)
self
.
proxy_mgr
.
clone
(
)
)
?
;
let
(
handle
token
)
=
self
.
handle
.
as_ref
(
)
.
expect
(
"
proxy
not
connected
to
event
loop
"
)
;
clone
.
connect_event_loop
(
handle
.
clone
(
)
*
token
)
;
Ok
(
clone
)
}
pub
fn
call
(
&
self
request
:
Request
)
-
>
Result
<
Response
>
{
match
self
.
handler_tx
.
send
(
(
self
.
key
request
)
)
{
Ok
(
_
)
=
>
self
.
wake_connection
(
)
Err
(
_
)
=
>
return
Err
(
Error
:
:
new
(
ErrorKind
:
:
Other
"
proxy
send
error
"
)
)
}
match
self
.
response_rx
.
recv
(
)
{
Ok
(
resp
)
=
>
Ok
(
resp
)
Err
(
_
)
=
>
Err
(
Error
:
:
new
(
ErrorKind
:
:
Other
"
proxy
recv
error
"
)
)
}
}
pub
(
crate
)
fn
connect_event_loop
(
&
mut
self
handle
:
EventLoopHandle
token
:
Token
)
{
self
.
handle
=
Some
(
(
handle
token
)
)
;
}
fn
wake_connection
(
&
self
)
{
let
(
handle
token
)
=
self
.
handle
.
as_ref
(
)
.
expect
(
"
proxy
not
connected
to
event
loop
"
)
;
handle
.
wake_connection
(
*
token
)
;
}
}
impl
<
Request
Response
>
Drop
for
Proxy
<
Request
Response
>
{
fn
drop
(
&
mut
self
)
{
trace
!
(
"
Proxy
drop
waking
EventLoop
"
)
;
let
_
=
self
.
proxy_mgr
.
unregister_proxy
(
self
.
key
)
;
unsafe
{
ManuallyDrop
:
:
drop
(
&
mut
self
.
handler_tx
)
;
}
if
self
.
handle
.
is_some
(
)
{
self
.
wake_connection
(
)
}
}
}
const
RPC_CLIENT_INITIAL_PROXIES
:
usize
=
32
;
#
[
derive
(
Debug
)
]
struct
ProxyManager
<
Response
>
{
proxies
:
Mutex
<
Option
<
Slab
<
Sender
<
Response
>
>
>
>
}
impl
<
Response
>
ProxyManager
<
Response
>
{
fn
new
(
)
-
>
Self
{
Self
{
proxies
:
Mutex
:
:
new
(
Some
(
Slab
:
:
with_capacity
(
RPC_CLIENT_INITIAL_PROXIES
)
)
)
}
}
fn
register_proxy
(
&
self
tx
:
Sender
<
Response
>
)
-
>
Result
<
ProxyKey
>
{
let
mut
proxies
=
self
.
proxies
.
lock
(
)
.
unwrap
(
)
;
match
&
mut
*
proxies
{
Some
(
proxies
)
=
>
{
let
entry
=
proxies
.
vacant_entry
(
)
;
let
key
=
entry
.
key
(
)
;
entry
.
insert
(
tx
)
;
Ok
(
key
)
}
None
=
>
Err
(
Error
:
:
new
(
ErrorKind
:
:
Other
"
register
:
proxy
manager
disconnected
"
)
)
}
}
fn
unregister_proxy
(
&
self
key
:
ProxyKey
)
-
>
Result
<
(
)
>
{
let
mut
proxies
=
self
.
proxies
.
lock
(
)
.
unwrap
(
)
;
match
&
mut
*
proxies
{
Some
(
proxies
)
=
>
match
proxies
.
try_remove
(
key
)
{
Some
(
_
)
=
>
Ok
(
(
)
)
None
=
>
Err
(
Error
:
:
new
(
ErrorKind
:
:
Other
"
unregister
:
unknown
proxy
key
"
)
)
}
None
=
>
Err
(
Error
:
:
new
(
ErrorKind
:
:
Other
"
unregister
:
proxy
manager
disconnected
"
)
)
}
}
fn
deliver
(
&
self
key
:
ProxyKey
resp
:
Response
)
-
>
Result
<
(
)
>
{
let
proxies
=
self
.
proxies
.
lock
(
)
.
unwrap
(
)
;
match
&
*
proxies
{
Some
(
proxies
)
=
>
match
proxies
.
get
(
key
)
{
Some
(
proxy
)
=
>
{
drop
(
proxy
.
send
(
resp
)
)
;
Ok
(
(
)
)
}
None
=
>
Err
(
Error
:
:
new
(
ErrorKind
:
:
Other
"
deliver
:
unknown
proxy
key
"
)
)
}
None
=
>
Err
(
Error
:
:
new
(
ErrorKind
:
:
Other
"
unregister
:
proxy
manager
disconnected
"
)
)
}
}
fn
disconnect_handler
(
&
self
)
{
*
self
.
proxies
.
lock
(
)
.
unwrap
(
)
=
None
;
}
}
pub
(
crate
)
struct
ClientHandler
<
C
:
Client
>
{
messages
:
Receiver
<
ProxyRequest
<
C
:
:
ServerMessage
>
>
proxies
:
Arc
<
ProxyManager
<
C
:
:
ClientMessage
>
>
in_flight
:
VecDeque
<
ProxyKey
>
}
impl
<
C
:
Client
>
ClientHandler
<
C
>
{
fn
new
(
rx
:
Receiver
<
ProxyRequest
<
C
:
:
ServerMessage
>
>
)
-
>
ClientHandler
<
C
>
{
ClientHandler
:
:
<
C
>
{
messages
:
rx
proxies
:
Arc
:
:
new
(
ProxyManager
:
:
new
(
)
)
in_flight
:
VecDeque
:
:
with_capacity
(
RPC_CLIENT_INITIAL_PROXIES
)
}
}
fn
proxy_manager
(
&
self
)
-
>
&
Arc
<
ProxyManager
<
<
C
as
Client
>
:
:
ClientMessage
>
>
{
&
self
.
proxies
}
}
impl
<
C
:
Client
>
Handler
for
ClientHandler
<
C
>
{
type
In
=
C
:
:
ClientMessage
;
type
Out
=
C
:
:
ServerMessage
;
fn
consume
(
&
mut
self
response
:
Self
:
:
In
)
-
>
Result
<
(
)
>
{
trace
!
(
"
ClientHandler
:
:
consume
"
)
;
if
let
Some
(
proxy
)
=
self
.
in_flight
.
pop_front
(
)
{
self
.
proxies
.
deliver
(
proxy
response
)
?
;
}
else
{
return
Err
(
Error
:
:
new
(
ErrorKind
:
:
Other
"
request
/
response
mismatch
"
)
)
;
}
Ok
(
(
)
)
}
fn
produce
(
&
mut
self
)
-
>
Result
<
Option
<
Self
:
:
Out
>
>
{
trace
!
(
"
ClientHandler
:
:
produce
"
)
;
match
self
.
messages
.
try_recv
(
)
{
Ok
(
(
proxy
request
)
)
=
>
{
trace
!
(
"
-
-
>
received
request
"
)
;
self
.
in_flight
.
push_back
(
proxy
)
;
Ok
(
Some
(
request
)
)
}
Err
(
crossbeam_channel
:
:
TryRecvError
:
:
Empty
)
=
>
{
trace
!
(
"
-
-
>
no
request
"
)
;
Ok
(
None
)
}
Err
(
e
)
=
>
{
trace
!
(
"
-
-
>
client
disconnected
"
)
;
Err
(
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
ConnectionAborted
e
)
)
}
}
}
}
impl
<
C
:
Client
>
Drop
for
ClientHandler
<
C
>
{
fn
drop
(
&
mut
self
)
{
self
.
proxies
.
disconnect_handler
(
)
;
}
}
#
[
allow
(
clippy
:
:
type_complexity
)
]
pub
(
crate
)
fn
make_client
<
C
:
Client
>
(
)
-
>
Result
<
(
ClientHandler
<
C
>
Proxy
<
C
:
:
ServerMessage
C
:
:
ClientMessage
>
)
>
{
let
(
tx
rx
)
=
crossbeam_channel
:
:
bounded
(
RPC_CLIENT_INITIAL_PROXIES
)
;
let
handler
=
ClientHandler
:
:
new
(
rx
)
;
let
proxy_mgr
=
handler
.
proxy_manager
(
)
.
clone
(
)
;
Ok
(
(
handler
Proxy
:
:
new
(
tx
proxy_mgr
)
?
)
)
}
pub
(
crate
)
struct
ServerHandler
<
S
:
Server
>
{
server
:
S
in_flight
:
VecDeque
<
S
:
:
ClientMessage
>
}
impl
<
S
:
Server
>
Handler
for
ServerHandler
<
S
>
{
type
In
=
S
:
:
ServerMessage
;
type
Out
=
S
:
:
ClientMessage
;
fn
consume
(
&
mut
self
message
:
Self
:
:
In
)
-
>
Result
<
(
)
>
{
trace
!
(
"
ServerHandler
:
:
consume
"
)
;
let
response
=
self
.
server
.
process
(
message
)
;
self
.
in_flight
.
push_back
(
response
)
;
Ok
(
(
)
)
}
fn
produce
(
&
mut
self
)
-
>
Result
<
Option
<
Self
:
:
Out
>
>
{
trace
!
(
"
ServerHandler
:
:
produce
"
)
;
match
self
.
in_flight
.
pop_front
(
)
{
Some
(
res
)
=
>
{
trace
!
(
"
-
-
>
received
response
"
)
;
Ok
(
Some
(
res
)
)
}
None
=
>
{
trace
!
(
"
-
-
>
no
response
ready
"
)
;
Ok
(
None
)
}
}
}
}
const
RPC_SERVER_INITIAL_CLIENTS
:
usize
=
32
;
pub
(
crate
)
fn
make_server
<
S
:
Server
>
(
server
:
S
)
-
>
ServerHandler
<
S
>
{
ServerHandler
:
:
<
S
>
{
server
in_flight
:
VecDeque
:
:
with_capacity
(
RPC_SERVER_INITIAL_CLIENTS
)
}
}
