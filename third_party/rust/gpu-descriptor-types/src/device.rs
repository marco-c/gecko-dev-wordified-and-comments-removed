use
crate
:
:
types
:
:
{
DescriptorPoolCreateFlags
DescriptorTotalCount
}
;
#
[
derive
(
Debug
)
]
pub
enum
CreatePoolError
{
OutOfDeviceMemory
OutOfHostMemory
Fragmentation
}
#
[
derive
(
Debug
)
]
pub
enum
DeviceAllocationError
{
OutOfDeviceMemory
OutOfHostMemory
OutOfPoolMemory
FragmentedPool
}
pub
trait
DescriptorDevice
<
L
P
S
>
{
unsafe
fn
create_descriptor_pool
(
&
self
descriptor_count
:
&
DescriptorTotalCount
max_sets
:
u32
flags
:
DescriptorPoolCreateFlags
)
-
>
Result
<
P
CreatePoolError
>
;
unsafe
fn
destroy_descriptor_pool
(
&
self
pool
:
P
)
;
unsafe
fn
alloc_descriptor_sets
<
'
a
>
(
&
self
pool
:
&
mut
P
layouts
:
impl
ExactSizeIterator
<
Item
=
&
'
a
L
>
sets
:
&
mut
impl
Extend
<
S
>
)
-
>
Result
<
(
)
DeviceAllocationError
>
where
L
:
'
a
;
unsafe
fn
dealloc_descriptor_sets
(
&
self
pool
:
&
mut
P
sets
:
impl
Iterator
<
Item
=
S
>
)
;
}
