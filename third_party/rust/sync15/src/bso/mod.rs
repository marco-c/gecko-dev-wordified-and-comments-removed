use
crate
:
:
{
Guid
ServerTimestamp
}
;
use
serde
:
:
{
Deserialize
Serialize
}
;
#
[
cfg
(
feature
=
"
crypto
"
)
]
mod
crypto
;
#
[
cfg
(
feature
=
"
crypto
"
)
]
pub
use
crypto
:
:
{
IncomingEncryptedBso
OutgoingEncryptedBso
}
;
mod
content
;
#
[
cfg
(
feature
=
"
test
-
utils
"
)
]
pub
mod
test_utils
;
#
[
derive
(
Debug
Clone
Deserialize
)
]
pub
struct
IncomingEnvelope
{
pub
id
:
Guid
#
[
serde
(
default
=
"
ServerTimestamp
:
:
default
"
)
]
pub
modified
:
ServerTimestamp
pub
sortindex
:
Option
<
i32
>
pub
ttl
:
Option
<
u32
>
}
#
[
derive
(
Debug
Default
Clone
Serialize
)
]
pub
struct
OutgoingEnvelope
{
pub
id
:
Guid
#
[
serde
(
skip_serializing_if
=
"
Option
:
:
is_none
"
)
]
pub
sortindex
:
Option
<
i32
>
#
[
serde
(
skip_serializing_if
=
"
Option
:
:
is_none
"
)
]
pub
ttl
:
Option
<
u32
>
}
impl
From
<
Guid
>
for
OutgoingEnvelope
{
fn
from
(
id
:
Guid
)
-
>
Self
{
OutgoingEnvelope
{
id
.
.
Default
:
:
default
(
)
}
}
}
#
[
derive
(
Deserialize
Debug
)
]
pub
struct
IncomingBso
{
#
[
serde
(
flatten
)
]
pub
envelope
:
IncomingEnvelope
pub
payload
:
String
}
impl
IncomingBso
{
pub
fn
new
(
envelope
:
IncomingEnvelope
payload
:
String
)
-
>
Self
{
Self
{
envelope
payload
}
}
}
#
[
derive
(
Serialize
Debug
)
]
pub
struct
OutgoingBso
{
#
[
serde
(
flatten
)
]
pub
envelope
:
OutgoingEnvelope
pub
payload
:
String
}
impl
OutgoingBso
{
pub
fn
new
<
T
:
Serialize
>
(
envelope
:
OutgoingEnvelope
val
:
&
T
)
-
>
Result
<
Self
serde_json
:
:
Error
>
{
Ok
(
Self
{
envelope
payload
:
serde_json
:
:
to_string
(
&
val
)
?
}
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
IncomingContent
<
T
>
{
pub
envelope
:
IncomingEnvelope
pub
kind
:
IncomingKind
<
T
>
}
pub
enum
IncomingKind
<
T
>
{
Content
(
T
)
Tombstone
Malformed
}
