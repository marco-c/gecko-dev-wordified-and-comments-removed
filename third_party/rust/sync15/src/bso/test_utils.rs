use
super
:
:
{
IncomingBso
IncomingEnvelope
OutgoingBso
}
;
use
crate
:
:
{
Guid
ServerTimestamp
}
;
impl
OutgoingBso
{
pub
fn
to_test_incoming
(
&
self
)
-
>
IncomingBso
{
self
.
to_test_incoming_ts
(
ServerTimestamp
:
:
default
(
)
)
}
pub
fn
to_test_incoming_ts
(
&
self
ts
:
ServerTimestamp
)
-
>
IncomingBso
{
IncomingBso
{
envelope
:
IncomingEnvelope
{
id
:
self
.
envelope
.
id
.
clone
(
)
modified
:
ts
sortindex
:
self
.
envelope
.
sortindex
ttl
:
self
.
envelope
.
ttl
}
payload
:
self
.
payload
.
clone
(
)
}
}
pub
fn
to_test_incoming_t
<
T
:
for
<
'
de
>
serde
:
:
Deserialize
<
'
de
>
>
(
&
self
)
-
>
T
{
self
.
to_test_incoming
(
)
.
into_content
(
)
.
content
(
)
.
unwrap
(
)
}
}
impl
IncomingBso
{
pub
fn
from_test_content
<
T
:
serde
:
:
Serialize
>
(
json
:
T
)
-
>
Self
{
OutgoingBso
:
:
from_content_with_id
(
json
)
.
unwrap
(
)
.
to_test_incoming
(
)
}
pub
fn
from_test_content_ts
<
T
:
serde
:
:
Serialize
>
(
json
:
T
ts
:
ServerTimestamp
)
-
>
Self
{
OutgoingBso
:
:
from_content_with_id
(
json
)
.
unwrap
(
)
.
to_test_incoming_ts
(
ts
)
}
pub
fn
new_test_tombstone
(
guid
:
Guid
)
-
>
Self
{
OutgoingBso
:
:
new_tombstone
(
guid
.
into
(
)
)
.
to_test_incoming
(
)
}
}
