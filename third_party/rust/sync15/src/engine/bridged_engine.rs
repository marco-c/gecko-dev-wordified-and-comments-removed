use
anyhow
:
:
Result
;
use
crate
:
:
bso
:
:
{
IncomingBso
OutgoingBso
}
;
use
crate
:
:
Guid
;
pub
trait
BridgedEngine
:
Send
+
Sync
{
fn
last_sync
(
&
self
)
-
>
Result
<
i64
>
;
fn
set_last_sync
(
&
self
last_sync_millis
:
i64
)
-
>
Result
<
(
)
>
;
fn
sync_id
(
&
self
)
-
>
Result
<
Option
<
String
>
>
;
fn
reset_sync_id
(
&
self
)
-
>
Result
<
String
>
;
fn
ensure_current_sync_id
(
&
self
new_sync_id
:
&
str
)
-
>
Result
<
String
>
;
fn
prepare_for_sync
(
&
self
_client_data
:
&
str
)
-
>
Result
<
(
)
>
{
Ok
(
(
)
)
}
fn
sync_started
(
&
self
)
-
>
Result
<
(
)
>
;
fn
store_incoming
(
&
self
incoming_records
:
Vec
<
IncomingBso
>
)
-
>
Result
<
(
)
>
;
fn
apply
(
&
self
)
-
>
Result
<
ApplyResults
>
;
fn
set_uploaded
(
&
self
server_modified_millis
:
i64
ids
:
&
[
Guid
]
)
-
>
Result
<
(
)
>
;
fn
sync_finished
(
&
self
)
-
>
Result
<
(
)
>
;
fn
reset
(
&
self
)
-
>
Result
<
(
)
>
;
fn
wipe
(
&
self
)
-
>
Result
<
(
)
>
;
}
#
[
derive
(
Debug
Default
)
]
pub
struct
ApplyResults
{
pub
records
:
Vec
<
OutgoingBso
>
pub
num_reconciled
:
Option
<
usize
>
}
impl
ApplyResults
{
pub
fn
new
(
records
:
Vec
<
OutgoingBso
>
num_reconciled
:
impl
Into
<
Option
<
usize
>
>
)
-
>
Self
{
Self
{
records
num_reconciled
:
num_reconciled
.
into
(
)
}
}
}
impl
From
<
Vec
<
OutgoingBso
>
>
for
ApplyResults
{
fn
from
(
records
:
Vec
<
OutgoingBso
>
)
-
>
Self
{
Self
{
records
num_reconciled
:
None
}
}
}
