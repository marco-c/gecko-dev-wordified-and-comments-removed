use
crate
:
:
error
:
:
Result
;
use
payload_support
:
:
Fit
;
use
serde
:
:
Serialize
;
pub
fn
shrink_to_fit
<
T
:
Serialize
>
(
list
:
&
mut
Vec
<
T
>
payload_size_max_bytes
:
usize
)
-
>
Result
<
(
)
>
{
match
payload_support
:
:
try_fit_items
(
list
payload_size_max_bytes
)
{
Fit
:
:
All
=
>
{
}
Fit
:
:
Some
(
count
)
=
>
list
.
truncate
(
count
.
get
(
)
)
Fit
:
:
None
=
>
list
.
clear
(
)
Fit
:
:
Err
(
e
)
=
>
Err
(
e
)
?
}
;
Ok
(
(
)
)
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
super
:
:
record
:
:
CommandRecord
;
use
super
:
:
*
;
#
[
test
]
fn
test_shrink_to_fit
(
)
{
let
mut
commands
=
vec
!
[
CommandRecord
{
name
:
"
wipeEngine
"
.
into
(
)
args
:
vec
!
[
Some
(
"
bookmarks
"
.
into
(
)
)
]
flow_id
:
Some
(
"
flow
"
.
into
(
)
)
}
CommandRecord
{
name
:
"
resetEngine
"
.
into
(
)
args
:
vec
!
[
Some
(
"
history
"
.
into
(
)
)
]
flow_id
:
Some
(
"
flow
"
.
into
(
)
)
}
CommandRecord
{
name
:
"
logout
"
.
into
(
)
args
:
Vec
:
:
new
(
)
flow_id
:
None
}
]
;
shrink_to_fit
(
&
mut
commands
4096
)
.
unwrap
(
)
;
assert_eq
!
(
commands
.
len
(
)
3
)
;
shrink_to_fit
(
&
mut
commands
2168
)
.
unwrap
(
)
;
assert_eq
!
(
commands
.
len
(
)
2
)
;
shrink_to_fit
(
&
mut
commands
2084
)
.
unwrap
(
)
;
assert_eq
!
(
commands
.
len
(
)
1
)
;
shrink_to_fit
(
&
mut
commands
1024
)
.
unwrap
(
)
;
assert
!
(
commands
.
is_empty
(
)
)
;
}
}
