use
serde
:
:
{
Deserialize
Deserializer
Serialize
Serializer
}
;
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
Hash
)
]
pub
enum
DeviceType
{
Desktop
Mobile
Tablet
VR
TV
Unknown
}
impl
Default
for
DeviceType
{
fn
default
(
)
-
>
Self
{
DeviceType
:
:
Unknown
}
}
impl
<
'
de
>
Deserialize
<
'
de
>
for
DeviceType
{
fn
deserialize
<
D
>
(
deserializer
:
D
)
-
>
Result
<
Self
D
:
:
Error
>
where
D
:
Deserializer
<
'
de
>
{
Ok
(
match
String
:
:
deserialize
(
deserializer
)
{
Ok
(
s
)
=
>
match
s
.
as_str
(
)
{
"
desktop
"
=
>
DeviceType
:
:
Desktop
"
mobile
"
=
>
DeviceType
:
:
Mobile
"
tablet
"
=
>
DeviceType
:
:
Tablet
"
vr
"
=
>
DeviceType
:
:
VR
"
tv
"
=
>
DeviceType
:
:
TV
"
phone
"
=
>
DeviceType
:
:
Mobile
_
=
>
DeviceType
:
:
Unknown
}
Err
(
_
)
=
>
DeviceType
:
:
Unknown
}
)
}
}
impl
Serialize
for
DeviceType
{
fn
serialize
<
S
>
(
&
self
s
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
Serializer
{
match
self
{
DeviceType
:
:
Desktop
=
>
s
.
serialize_unit_variant
(
"
DeviceType
"
0
"
desktop
"
)
DeviceType
:
:
Mobile
=
>
s
.
serialize_unit_variant
(
"
DeviceType
"
1
"
mobile
"
)
DeviceType
:
:
Tablet
=
>
s
.
serialize_unit_variant
(
"
DeviceType
"
2
"
tablet
"
)
DeviceType
:
:
VR
=
>
s
.
serialize_unit_variant
(
"
DeviceType
"
3
"
vr
"
)
DeviceType
:
:
TV
=
>
s
.
serialize_unit_variant
(
"
DeviceType
"
4
"
tv
"
)
DeviceType
:
:
Unknown
=
>
s
.
serialize_none
(
)
}
}
}
#
[
cfg
(
test
)
]
mod
device_type_tests
{
use
super
:
:
*
;
#
[
test
]
fn
test_serde_ser
(
)
{
assert_eq
!
(
serde_json
:
:
to_string
(
&
DeviceType
:
:
Desktop
)
.
unwrap
(
)
"
\
"
desktop
\
"
"
)
;
assert_eq
!
(
serde_json
:
:
to_string
(
&
DeviceType
:
:
Mobile
)
.
unwrap
(
)
"
\
"
mobile
\
"
"
)
;
assert_eq
!
(
serde_json
:
:
to_string
(
&
DeviceType
:
:
Tablet
)
.
unwrap
(
)
"
\
"
tablet
\
"
"
)
;
assert_eq
!
(
serde_json
:
:
to_string
(
&
DeviceType
:
:
VR
)
.
unwrap
(
)
"
\
"
vr
\
"
"
)
;
assert_eq
!
(
serde_json
:
:
to_string
(
&
DeviceType
:
:
TV
)
.
unwrap
(
)
"
\
"
tv
\
"
"
)
;
assert_eq
!
(
serde_json
:
:
to_string
(
&
DeviceType
:
:
Unknown
)
.
unwrap
(
)
"
null
"
)
;
}
#
[
test
]
fn
test_serde_de
(
)
{
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
\
"
desktop
\
"
"
)
.
unwrap
(
)
DeviceType
:
:
Desktop
)
)
;
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
\
"
mobile
\
"
"
)
.
unwrap
(
)
DeviceType
:
:
Mobile
)
)
;
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
\
"
tablet
\
"
"
)
.
unwrap
(
)
DeviceType
:
:
Tablet
)
)
;
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
\
"
vr
\
"
"
)
.
unwrap
(
)
DeviceType
:
:
VR
)
)
;
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
\
"
tv
\
"
"
)
.
unwrap
(
)
DeviceType
:
:
TV
)
)
;
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
\
"
something
-
else
\
"
"
)
.
unwrap
(
)
DeviceType
:
:
Unknown
)
)
;
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
null
"
)
.
unwrap
(
)
DeviceType
:
:
Unknown
)
)
;
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
99
"
)
.
unwrap
(
)
DeviceType
:
:
Unknown
)
)
;
}
}
