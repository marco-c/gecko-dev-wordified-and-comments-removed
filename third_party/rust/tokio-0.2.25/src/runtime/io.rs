pub
(
crate
)
use
std
:
:
io
:
:
Result
;
pub
(
crate
)
use
variant
:
:
*
;
#
[
cfg
(
feature
=
"
io
-
driver
"
)
]
mod
variant
{
use
crate
:
:
io
:
:
driver
;
use
crate
:
:
park
:
:
{
Either
ParkThread
}
;
use
std
:
:
io
;
pub
(
crate
)
type
Driver
=
Either
<
driver
:
:
Driver
ParkThread
>
;
pub
(
crate
)
type
Handle
=
Option
<
driver
:
:
Handle
>
;
pub
(
crate
)
fn
create_driver
(
enable
:
bool
)
-
>
io
:
:
Result
<
(
Driver
Handle
)
>
{
#
[
cfg
(
loom
)
]
assert
!
(
!
enable
)
;
if
enable
{
let
driver
=
driver
:
:
Driver
:
:
new
(
)
?
;
let
handle
=
driver
.
handle
(
)
;
Ok
(
(
Either
:
:
A
(
driver
)
Some
(
handle
)
)
)
}
else
{
let
driver
=
ParkThread
:
:
new
(
)
;
Ok
(
(
Either
:
:
B
(
driver
)
None
)
)
}
}
}
#
[
cfg
(
not
(
feature
=
"
io
-
driver
"
)
)
]
mod
variant
{
use
crate
:
:
park
:
:
ParkThread
;
use
std
:
:
io
;
pub
(
crate
)
type
Driver
=
ParkThread
;
pub
(
crate
)
type
Handle
=
(
)
;
pub
(
crate
)
fn
create_driver
(
_enable
:
bool
)
-
>
io
:
:
Result
<
(
Driver
Handle
)
>
{
let
driver
=
ParkThread
:
:
new
(
)
;
Ok
(
(
driver
(
)
)
)
}
}
