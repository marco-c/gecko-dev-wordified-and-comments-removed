use
crate
:
:
stream
:
:
{
self
Iter
Stream
}
;
use
core
:
:
option
;
use
core
:
:
pin
:
:
Pin
;
use
core
:
:
task
:
:
{
Context
Poll
}
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
Once
<
T
>
{
iter
:
Iter
<
option
:
:
IntoIter
<
T
>
>
}
impl
<
I
>
Unpin
for
Once
<
I
>
{
}
pub
fn
once
<
T
>
(
value
:
T
)
-
>
Once
<
T
>
{
Once
{
iter
:
stream
:
:
iter
(
Some
(
value
)
.
into_iter
(
)
)
}
}
impl
<
T
>
Stream
for
Once
<
T
>
{
type
Item
=
T
;
fn
poll_next
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
T
>
>
{
Pin
:
:
new
(
&
mut
self
.
iter
)
.
poll_next
(
cx
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
}
