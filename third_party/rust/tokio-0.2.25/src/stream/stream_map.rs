use
crate
:
:
stream
:
:
Stream
;
use
std
:
:
borrow
:
:
Borrow
;
use
std
:
:
hash
:
:
Hash
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
#
[
derive
(
Debug
Default
)
]
pub
struct
StreamMap
<
K
V
>
{
entries
:
Vec
<
(
K
V
)
>
}
impl
<
K
V
>
StreamMap
<
K
V
>
{
pub
fn
new
(
)
-
>
StreamMap
<
K
V
>
{
StreamMap
{
entries
:
vec
!
[
]
}
}
pub
fn
with_capacity
(
capacity
:
usize
)
-
>
StreamMap
<
K
V
>
{
StreamMap
{
entries
:
Vec
:
:
with_capacity
(
capacity
)
}
}
pub
fn
keys
(
&
self
)
-
>
impl
Iterator
<
Item
=
&
K
>
{
self
.
entries
.
iter
(
)
.
map
(
|
(
k
_
)
|
k
)
}
pub
fn
values
(
&
self
)
-
>
impl
Iterator
<
Item
=
&
V
>
{
self
.
entries
.
iter
(
)
.
map
(
|
(
_
v
)
|
v
)
}
pub
fn
values_mut
(
&
mut
self
)
-
>
impl
Iterator
<
Item
=
&
mut
V
>
{
self
.
entries
.
iter_mut
(
)
.
map
(
|
(
_
v
)
|
v
)
}
pub
fn
capacity
(
&
self
)
-
>
usize
{
self
.
entries
.
capacity
(
)
}
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
entries
.
len
(
)
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
entries
.
is_empty
(
)
}
pub
fn
clear
(
&
mut
self
)
{
self
.
entries
.
clear
(
)
;
}
pub
fn
insert
(
&
mut
self
k
:
K
stream
:
V
)
-
>
Option
<
V
>
where
K
:
Hash
+
Eq
{
let
ret
=
self
.
remove
(
&
k
)
;
self
.
entries
.
push
(
(
k
stream
)
)
;
ret
}
pub
fn
remove
<
Q
:
?
Sized
>
(
&
mut
self
k
:
&
Q
)
-
>
Option
<
V
>
where
K
:
Borrow
<
Q
>
Q
:
Hash
+
Eq
{
for
i
in
0
.
.
self
.
entries
.
len
(
)
{
if
self
.
entries
[
i
]
.
0
.
borrow
(
)
=
=
k
{
return
Some
(
self
.
entries
.
swap_remove
(
i
)
.
1
)
;
}
}
None
}
pub
fn
contains_key
<
Q
:
?
Sized
>
(
&
self
k
:
&
Q
)
-
>
bool
where
K
:
Borrow
<
Q
>
Q
:
Hash
+
Eq
{
for
i
in
0
.
.
self
.
entries
.
len
(
)
{
if
self
.
entries
[
i
]
.
0
.
borrow
(
)
=
=
k
{
return
true
;
}
}
false
}
}
impl
<
K
V
>
StreamMap
<
K
V
>
where
K
:
Unpin
V
:
Stream
+
Unpin
{
fn
poll_next_entry
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
(
usize
V
:
:
Item
)
>
>
{
use
Poll
:
:
*
;
let
start
=
crate
:
:
util
:
:
thread_rng_n
(
self
.
entries
.
len
(
)
as
u32
)
as
usize
;
let
mut
idx
=
start
;
for
_
in
0
.
.
self
.
entries
.
len
(
)
{
let
(
_
stream
)
=
&
mut
self
.
entries
[
idx
]
;
match
Pin
:
:
new
(
stream
)
.
poll_next
(
cx
)
{
Ready
(
Some
(
val
)
)
=
>
return
Ready
(
Some
(
(
idx
val
)
)
)
Ready
(
None
)
=
>
{
self
.
entries
.
swap_remove
(
idx
)
;
if
idx
=
=
self
.
entries
.
len
(
)
{
idx
=
0
;
}
else
if
idx
<
start
&
&
start
<
=
self
.
entries
.
len
(
)
{
idx
=
idx
.
wrapping_add
(
1
)
%
self
.
entries
.
len
(
)
;
}
}
Pending
=
>
{
idx
=
idx
.
wrapping_add
(
1
)
%
self
.
entries
.
len
(
)
;
}
}
}
if
self
.
entries
.
is_empty
(
)
{
Ready
(
None
)
}
else
{
Pending
}
}
}
impl
<
K
V
>
Stream
for
StreamMap
<
K
V
>
where
K
:
Clone
+
Unpin
V
:
Stream
+
Unpin
{
type
Item
=
(
K
V
:
:
Item
)
;
fn
poll_next
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
>
{
if
let
Some
(
(
idx
val
)
)
=
ready
!
(
self
.
poll_next_entry
(
cx
)
)
{
let
key
=
self
.
entries
[
idx
]
.
0
.
clone
(
)
;
Poll
:
:
Ready
(
Some
(
(
key
val
)
)
)
}
else
{
Poll
:
:
Ready
(
None
)
}
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
let
mut
ret
=
(
0
Some
(
0
)
)
;
for
(
_
stream
)
in
&
self
.
entries
{
let
hint
=
stream
.
size_hint
(
)
;
ret
.
0
+
=
hint
.
0
;
match
(
ret
.
1
hint
.
1
)
{
(
Some
(
a
)
Some
(
b
)
)
=
>
ret
.
1
=
Some
(
a
+
b
)
(
Some
(
_
)
None
)
=
>
ret
.
1
=
None
_
=
>
{
}
}
}
ret
}
}
