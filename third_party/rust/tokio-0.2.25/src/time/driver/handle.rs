use
crate
:
:
runtime
:
:
context
;
use
crate
:
:
time
:
:
driver
:
:
Inner
;
use
std
:
:
fmt
;
use
std
:
:
sync
:
:
{
Arc
Weak
}
;
#
[
derive
(
Clone
)
]
pub
(
crate
)
struct
Handle
{
inner
:
Weak
<
Inner
>
}
impl
Handle
{
pub
(
crate
)
fn
new
(
inner
:
Weak
<
Inner
>
)
-
>
Self
{
Handle
{
inner
}
}
pub
(
crate
)
fn
current
(
)
-
>
Self
{
context
:
:
time_handle
(
)
.
expect
(
"
there
is
no
timer
running
must
be
called
from
the
context
of
a
Tokio
0
.
2
.
x
runtime
"
)
}
pub
(
crate
)
fn
inner
(
&
self
)
-
>
Option
<
Arc
<
Inner
>
>
{
self
.
inner
.
upgrade
(
)
}
}
impl
fmt
:
:
Debug
for
Handle
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
Handle
"
)
}
}
