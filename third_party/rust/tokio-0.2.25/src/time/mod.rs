mod
clock
;
pub
(
crate
)
use
self
:
:
clock
:
:
Clock
;
#
[
cfg
(
feature
=
"
test
-
util
"
)
]
pub
use
clock
:
:
{
advance
pause
resume
}
;
pub
mod
delay_queue
;
#
[
doc
(
inline
)
]
pub
use
delay_queue
:
:
DelayQueue
;
mod
delay
;
pub
use
delay
:
:
{
delay_for
delay_until
Delay
}
;
pub
(
crate
)
mod
driver
;
mod
error
;
pub
use
error
:
:
Error
;
mod
instant
;
pub
use
self
:
:
instant
:
:
Instant
;
mod
interval
;
pub
use
interval
:
:
{
interval
interval_at
Interval
}
;
mod
timeout
;
#
[
doc
(
inline
)
]
pub
use
timeout
:
:
{
timeout
timeout_at
Elapsed
Timeout
}
;
cfg_stream
!
{
mod
throttle
;
pub
use
throttle
:
:
{
throttle
Throttle
}
;
}
mod
wheel
;
#
[
cfg
(
test
)
]
#
[
cfg
(
not
(
loom
)
)
]
mod
tests
;
pub
use
std
:
:
time
:
:
Duration
;
enum
Round
{
Up
Down
}
#
[
inline
]
fn
ms
(
duration
:
Duration
round
:
Round
)
-
>
u64
{
const
NANOS_PER_MILLI
:
u32
=
1_000_000
;
const
MILLIS_PER_SEC
:
u64
=
1_000
;
let
millis
=
match
round
{
Round
:
:
Up
=
>
(
duration
.
subsec_nanos
(
)
+
NANOS_PER_MILLI
-
1
)
/
NANOS_PER_MILLI
Round
:
:
Down
=
>
duration
.
subsec_millis
(
)
}
;
duration
.
as_secs
(
)
.
saturating_mul
(
MILLIS_PER_SEC
)
.
saturating_add
(
u64
:
:
from
(
millis
)
)
}
