use
crate
:
:
future
:
:
poll_fn
;
use
crate
:
:
io
:
:
{
AsyncRead
AsyncWrite
}
;
use
crate
:
:
net
:
:
TcpStream
;
use
bytes
:
:
Buf
;
use
std
:
:
io
;
use
std
:
:
mem
:
:
MaybeUninit
;
use
std
:
:
net
:
:
Shutdown
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
#
[
derive
(
Debug
)
]
pub
struct
ReadHalf
<
'
a
>
(
&
'
a
TcpStream
)
;
#
[
derive
(
Debug
)
]
pub
struct
WriteHalf
<
'
a
>
(
&
'
a
TcpStream
)
;
pub
(
crate
)
fn
split
(
stream
:
&
mut
TcpStream
)
-
>
(
ReadHalf
<
'
_
>
WriteHalf
<
'
_
>
)
{
(
ReadHalf
(
&
*
stream
)
WriteHalf
(
&
*
stream
)
)
}
impl
ReadHalf
<
'
_
>
{
pub
fn
poll_peek
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
0
.
poll_peek2
(
cx
buf
)
}
pub
async
fn
peek
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
poll_fn
(
|
cx
|
self
.
poll_peek
(
cx
buf
)
)
.
await
}
}
impl
AsyncRead
for
ReadHalf
<
'
_
>
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
_
:
&
mut
[
MaybeUninit
<
u8
>
]
)
-
>
bool
{
false
}
fn
poll_read
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
0
.
poll_read_priv
(
cx
buf
)
}
}
impl
AsyncWrite
for
WriteHalf
<
'
_
>
{
fn
poll_write
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
0
.
poll_write_priv
(
cx
buf
)
}
fn
poll_write_buf
<
B
:
Buf
>
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
B
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
0
.
poll_write_buf_priv
(
cx
buf
)
}
#
[
inline
]
fn
poll_flush
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
0
.
shutdown
(
Shutdown
:
:
Write
)
.
into
(
)
}
}
impl
AsRef
<
TcpStream
>
for
ReadHalf
<
'
_
>
{
fn
as_ref
(
&
self
)
-
>
&
TcpStream
{
self
.
0
}
}
impl
AsRef
<
TcpStream
>
for
WriteHalf
<
'
_
>
{
fn
as_ref
(
&
self
)
-
>
&
TcpStream
{
self
.
0
}
}
