use
crate
:
:
future
:
:
poll_fn
;
use
crate
:
:
io
:
:
{
AsyncRead
AsyncWrite
}
;
use
crate
:
:
net
:
:
TcpStream
;
use
bytes
:
:
Buf
;
use
std
:
:
error
:
:
Error
;
use
std
:
:
mem
:
:
MaybeUninit
;
use
std
:
:
net
:
:
Shutdown
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
use
std
:
:
{
fmt
io
}
;
#
[
derive
(
Debug
)
]
pub
struct
OwnedReadHalf
{
inner
:
Arc
<
TcpStream
>
}
#
[
derive
(
Debug
)
]
pub
struct
OwnedWriteHalf
{
inner
:
Arc
<
TcpStream
>
shutdown_on_drop
:
bool
}
pub
(
crate
)
fn
split_owned
(
stream
:
TcpStream
)
-
>
(
OwnedReadHalf
OwnedWriteHalf
)
{
let
arc
=
Arc
:
:
new
(
stream
)
;
let
read
=
OwnedReadHalf
{
inner
:
Arc
:
:
clone
(
&
arc
)
}
;
let
write
=
OwnedWriteHalf
{
inner
:
arc
shutdown_on_drop
:
true
}
;
(
read
write
)
}
pub
(
crate
)
fn
reunite
(
read
:
OwnedReadHalf
write
:
OwnedWriteHalf
)
-
>
Result
<
TcpStream
ReuniteError
>
{
if
Arc
:
:
ptr_eq
(
&
read
.
inner
&
write
.
inner
)
{
write
.
forget
(
)
;
Ok
(
Arc
:
:
try_unwrap
(
read
.
inner
)
.
expect
(
"
TcpStream
:
try_unwrap
failed
in
reunite
"
)
)
}
else
{
Err
(
ReuniteError
(
read
write
)
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
ReuniteError
(
pub
OwnedReadHalf
pub
OwnedWriteHalf
)
;
impl
fmt
:
:
Display
for
ReuniteError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
tried
to
reunite
halves
that
are
not
from
the
same
socket
"
)
}
}
impl
Error
for
ReuniteError
{
}
impl
OwnedReadHalf
{
pub
fn
reunite
(
self
other
:
OwnedWriteHalf
)
-
>
Result
<
TcpStream
ReuniteError
>
{
reunite
(
self
other
)
}
pub
fn
poll_peek
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
inner
.
poll_peek2
(
cx
buf
)
}
pub
async
fn
peek
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
poll_fn
(
|
cx
|
self
.
poll_peek
(
cx
buf
)
)
.
await
}
}
impl
AsyncRead
for
OwnedReadHalf
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
_
:
&
mut
[
MaybeUninit
<
u8
>
]
)
-
>
bool
{
false
}
fn
poll_read
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
inner
.
poll_read_priv
(
cx
buf
)
}
}
impl
OwnedWriteHalf
{
pub
fn
reunite
(
self
other
:
OwnedReadHalf
)
-
>
Result
<
TcpStream
ReuniteError
>
{
reunite
(
other
self
)
}
pub
fn
forget
(
mut
self
)
{
self
.
shutdown_on_drop
=
false
;
drop
(
self
)
;
}
}
impl
Drop
for
OwnedWriteHalf
{
fn
drop
(
&
mut
self
)
{
if
self
.
shutdown_on_drop
{
let
_
=
self
.
inner
.
shutdown
(
Shutdown
:
:
Write
)
;
}
}
}
impl
AsyncWrite
for
OwnedWriteHalf
{
fn
poll_write
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
inner
.
poll_write_priv
(
cx
buf
)
}
fn
poll_write_buf
<
B
:
Buf
>
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
B
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
inner
.
poll_write_buf_priv
(
cx
buf
)
}
#
[
inline
]
fn
poll_flush
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
let
res
=
self
.
inner
.
shutdown
(
Shutdown
:
:
Write
)
;
if
res
.
is_ok
(
)
{
Pin
:
:
into_inner
(
self
)
.
shutdown_on_drop
=
false
;
}
res
.
into
(
)
}
}
impl
AsRef
<
TcpStream
>
for
OwnedReadHalf
{
fn
as_ref
(
&
self
)
-
>
&
TcpStream
{
&
*
self
.
inner
}
}
impl
AsRef
<
TcpStream
>
for
OwnedWriteHalf
{
fn
as_ref
(
&
self
)
-
>
&
TcpStream
{
&
*
self
.
inner
}
}
