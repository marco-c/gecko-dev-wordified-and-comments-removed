use
crate
:
:
future
:
:
poll_fn
;
use
crate
:
:
sync
:
:
task
:
:
AtomicWaker
;
use
fnv
:
:
FnvHashSet
;
use
std
:
:
ops
;
use
std
:
:
sync
:
:
atomic
:
:
AtomicUsize
;
use
std
:
:
sync
:
:
atomic
:
:
Ordering
:
:
{
Relaxed
SeqCst
}
;
use
std
:
:
sync
:
:
{
Arc
Mutex
RwLock
RwLockReadGuard
Weak
}
;
use
std
:
:
task
:
:
Poll
:
:
{
Pending
Ready
}
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
#
[
derive
(
Debug
)
]
pub
struct
Receiver
<
T
>
{
shared
:
Arc
<
Shared
<
T
>
>
inner
:
Watcher
}
#
[
derive
(
Debug
)
]
pub
struct
Sender
<
T
>
{
shared
:
Weak
<
Shared
<
T
>
>
}
#
[
derive
(
Debug
)
]
pub
struct
Ref
<
'
a
T
>
{
inner
:
RwLockReadGuard
<
'
a
T
>
}
pub
mod
error
{
use
std
:
:
fmt
;
#
[
derive
(
Debug
)
]
pub
struct
SendError
<
T
>
{
pub
(
crate
)
inner
:
T
}
impl
<
T
:
fmt
:
:
Debug
>
fmt
:
:
Display
for
SendError
<
T
>
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
fmt
"
channel
closed
"
)
}
}
impl
<
T
:
fmt
:
:
Debug
>
std
:
:
error
:
:
Error
for
SendError
<
T
>
{
}
}
#
[
derive
(
Debug
)
]
struct
Shared
<
T
>
{
value
:
RwLock
<
T
>
version
:
AtomicUsize
watchers
:
Mutex
<
Watchers
>
cancel
:
AtomicWaker
}
type
Watchers
=
FnvHashSet
<
Watcher
>
;
#
[
derive
(
Clone
Debug
)
]
struct
Watcher
(
Arc
<
WatchInner
>
)
;
#
[
derive
(
Debug
)
]
struct
WatchInner
{
version
:
AtomicUsize
waker
:
AtomicWaker
}
const
CLOSED
:
usize
=
1
;
pub
fn
channel
<
T
:
Clone
>
(
init
:
T
)
-
>
(
Sender
<
T
>
Receiver
<
T
>
)
{
const
VERSION_0
:
usize
=
0
;
const
VERSION_1
:
usize
=
2
;
let
inner
=
Watcher
:
:
new_version
(
VERSION_0
)
;
let
mut
watchers
=
FnvHashSet
:
:
with_capacity_and_hasher
(
0
Default
:
:
default
(
)
)
;
watchers
.
insert
(
inner
.
clone
(
)
)
;
let
shared
=
Arc
:
:
new
(
Shared
{
value
:
RwLock
:
:
new
(
init
)
version
:
AtomicUsize
:
:
new
(
VERSION_1
)
watchers
:
Mutex
:
:
new
(
watchers
)
cancel
:
AtomicWaker
:
:
new
(
)
}
)
;
let
tx
=
Sender
{
shared
:
Arc
:
:
downgrade
(
&
shared
)
}
;
let
rx
=
Receiver
{
shared
inner
}
;
(
tx
rx
)
}
impl
<
T
>
Receiver
<
T
>
{
pub
fn
borrow
(
&
self
)
-
>
Ref
<
'
_
T
>
{
let
inner
=
self
.
shared
.
value
.
read
(
)
.
unwrap
(
)
;
Ref
{
inner
}
}
#
[
doc
(
hidden
)
]
pub
fn
poll_recv_ref
<
'
a
>
(
&
'
a
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Ref
<
'
a
T
>
>
>
{
self
.
inner
.
waker
.
register_by_ref
(
cx
.
waker
(
)
)
;
let
state
=
self
.
shared
.
version
.
load
(
SeqCst
)
;
let
version
=
state
&
!
CLOSED
;
if
self
.
inner
.
version
.
swap
(
version
Relaxed
)
!
=
version
{
let
inner
=
self
.
shared
.
value
.
read
(
)
.
unwrap
(
)
;
return
Ready
(
Some
(
Ref
{
inner
}
)
)
;
}
if
CLOSED
=
=
state
&
CLOSED
{
return
Ready
(
None
)
;
}
Pending
}
}
impl
<
T
:
Clone
>
Receiver
<
T
>
{
pub
async
fn
recv
(
&
mut
self
)
-
>
Option
<
T
>
{
poll_fn
(
|
cx
|
{
let
v_ref
=
ready
!
(
self
.
poll_recv_ref
(
cx
)
)
;
Poll
:
:
Ready
(
v_ref
.
map
(
|
v_ref
|
(
*
v_ref
)
.
clone
(
)
)
)
}
)
.
await
}
}
#
[
cfg
(
feature
=
"
stream
"
)
]
impl
<
T
:
Clone
>
crate
:
:
stream
:
:
Stream
for
Receiver
<
T
>
{
type
Item
=
T
;
fn
poll_next
(
mut
self
:
std
:
:
pin
:
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
T
>
>
{
let
v_ref
=
ready
!
(
self
.
poll_recv_ref
(
cx
)
)
;
Poll
:
:
Ready
(
v_ref
.
map
(
|
v_ref
|
(
*
v_ref
)
.
clone
(
)
)
)
}
}
impl
<
T
>
Clone
for
Receiver
<
T
>
{
fn
clone
(
&
self
)
-
>
Self
{
let
ver
=
self
.
inner
.
version
.
load
(
Relaxed
)
;
let
inner
=
Watcher
:
:
new_version
(
ver
)
;
let
shared
=
self
.
shared
.
clone
(
)
;
shared
.
watchers
.
lock
(
)
.
unwrap
(
)
.
insert
(
inner
.
clone
(
)
)
;
Receiver
{
shared
inner
}
}
}
impl
<
T
>
Drop
for
Receiver
<
T
>
{
fn
drop
(
&
mut
self
)
{
self
.
shared
.
watchers
.
lock
(
)
.
unwrap
(
)
.
remove
(
&
self
.
inner
)
;
}
}
impl
<
T
>
Sender
<
T
>
{
pub
fn
broadcast
(
&
self
value
:
T
)
-
>
Result
<
(
)
error
:
:
SendError
<
T
>
>
{
let
shared
=
match
self
.
shared
.
upgrade
(
)
{
Some
(
shared
)
=
>
shared
None
=
>
return
Err
(
error
:
:
SendError
{
inner
:
value
}
)
}
;
{
let
mut
lock
=
shared
.
value
.
write
(
)
.
unwrap
(
)
;
*
lock
=
value
;
}
shared
.
version
.
fetch_add
(
2
SeqCst
)
;
notify_all
(
&
*
shared
)
;
Ok
(
(
)
)
}
pub
async
fn
closed
(
&
mut
self
)
{
poll_fn
(
|
cx
|
self
.
poll_close
(
cx
)
)
.
await
}
fn
poll_close
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
(
)
>
{
match
self
.
shared
.
upgrade
(
)
{
Some
(
shared
)
=
>
{
shared
.
cancel
.
register_by_ref
(
cx
.
waker
(
)
)
;
Pending
}
None
=
>
Ready
(
(
)
)
}
}
}
fn
notify_all
<
T
>
(
shared
:
&
Shared
<
T
>
)
{
let
watchers
=
shared
.
watchers
.
lock
(
)
.
unwrap
(
)
;
for
watcher
in
watchers
.
iter
(
)
{
watcher
.
waker
.
wake
(
)
;
}
}
impl
<
T
>
Drop
for
Sender
<
T
>
{
fn
drop
(
&
mut
self
)
{
if
let
Some
(
shared
)
=
self
.
shared
.
upgrade
(
)
{
shared
.
version
.
fetch_or
(
CLOSED
SeqCst
)
;
notify_all
(
&
*
shared
)
;
}
}
}
impl
<
T
>
ops
:
:
Deref
for
Ref
<
'
_
T
>
{
type
Target
=
T
;
fn
deref
(
&
self
)
-
>
&
T
{
self
.
inner
.
deref
(
)
}
}
impl
<
T
>
Drop
for
Shared
<
T
>
{
fn
drop
(
&
mut
self
)
{
self
.
cancel
.
wake
(
)
;
}
}
impl
Watcher
{
fn
new_version
(
version
:
usize
)
-
>
Self
{
Watcher
(
Arc
:
:
new
(
WatchInner
{
version
:
AtomicUsize
:
:
new
(
version
)
waker
:
AtomicWaker
:
:
new
(
)
}
)
)
}
}
impl
std
:
:
cmp
:
:
PartialEq
for
Watcher
{
fn
eq
(
&
self
other
:
&
Watcher
)
-
>
bool
{
Arc
:
:
ptr_eq
(
&
self
.
0
&
other
.
0
)
}
}
impl
std
:
:
cmp
:
:
Eq
for
Watcher
{
}
impl
std
:
:
hash
:
:
Hash
for
Watcher
{
fn
hash
<
H
:
std
:
:
hash
:
:
Hasher
>
(
&
self
state
:
&
mut
H
)
{
(
&
*
self
.
0
as
*
const
WatchInner
)
.
hash
(
state
)
}
}
impl
std
:
:
ops
:
:
Deref
for
Watcher
{
type
Target
=
WatchInner
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
self
.
0
}
}
