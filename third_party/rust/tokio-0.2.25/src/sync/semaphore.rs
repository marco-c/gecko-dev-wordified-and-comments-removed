use
super
:
:
batch_semaphore
as
ll
;
use
std
:
:
sync
:
:
Arc
;
#
[
derive
(
Debug
)
]
pub
struct
Semaphore
{
ll_sem
:
ll
:
:
Semaphore
}
#
[
must_use
]
#
[
derive
(
Debug
)
]
pub
struct
SemaphorePermit
<
'
a
>
{
sem
:
&
'
a
Semaphore
permits
:
u16
}
#
[
must_use
]
#
[
derive
(
Debug
)
]
pub
struct
OwnedSemaphorePermit
{
sem
:
Arc
<
Semaphore
>
permits
:
u16
}
#
[
derive
(
Debug
)
]
pub
struct
TryAcquireError
(
(
)
)
;
#
[
test
]
#
[
cfg
(
not
(
loom
)
)
]
fn
bounds
(
)
{
fn
check_unpin
<
T
:
Unpin
>
(
)
{
}
fn
check_send_sync_val
<
T
:
Send
+
Sync
>
(
_t
:
T
)
{
}
fn
check_send_sync
<
T
:
Send
+
Sync
>
(
)
{
}
check_unpin
:
:
<
Semaphore
>
(
)
;
check_unpin
:
:
<
SemaphorePermit
<
'
_
>
>
(
)
;
check_send_sync
:
:
<
Semaphore
>
(
)
;
let
semaphore
=
Semaphore
:
:
new
(
0
)
;
check_send_sync_val
(
semaphore
.
acquire
(
)
)
;
}
impl
Semaphore
{
pub
fn
new
(
permits
:
usize
)
-
>
Self
{
Self
{
ll_sem
:
ll
:
:
Semaphore
:
:
new
(
permits
)
}
}
pub
fn
available_permits
(
&
self
)
-
>
usize
{
self
.
ll_sem
.
available_permits
(
)
}
pub
fn
add_permits
(
&
self
n
:
usize
)
{
self
.
ll_sem
.
release
(
n
)
;
}
pub
async
fn
acquire
(
&
self
)
-
>
SemaphorePermit
<
'
_
>
{
self
.
ll_sem
.
acquire
(
1
)
.
await
.
unwrap
(
)
;
SemaphorePermit
{
sem
:
&
self
permits
:
1
}
}
pub
fn
try_acquire
(
&
self
)
-
>
Result
<
SemaphorePermit
<
'
_
>
TryAcquireError
>
{
match
self
.
ll_sem
.
try_acquire
(
1
)
{
Ok
(
_
)
=
>
Ok
(
SemaphorePermit
{
sem
:
self
permits
:
1
}
)
Err
(
_
)
=
>
Err
(
TryAcquireError
(
(
)
)
)
}
}
pub
async
fn
acquire_owned
(
self
:
Arc
<
Self
>
)
-
>
OwnedSemaphorePermit
{
self
.
ll_sem
.
acquire
(
1
)
.
await
.
unwrap
(
)
;
OwnedSemaphorePermit
{
sem
:
self
.
clone
(
)
permits
:
1
}
}
pub
fn
try_acquire_owned
(
self
:
Arc
<
Self
>
)
-
>
Result
<
OwnedSemaphorePermit
TryAcquireError
>
{
match
self
.
ll_sem
.
try_acquire
(
1
)
{
Ok
(
_
)
=
>
Ok
(
OwnedSemaphorePermit
{
sem
:
self
.
clone
(
)
permits
:
1
}
)
Err
(
_
)
=
>
Err
(
TryAcquireError
(
(
)
)
)
}
}
}
impl
<
'
a
>
SemaphorePermit
<
'
a
>
{
pub
fn
forget
(
mut
self
)
{
self
.
permits
=
0
;
}
}
impl
OwnedSemaphorePermit
{
pub
fn
forget
(
mut
self
)
{
self
.
permits
=
0
;
}
}
impl
<
'
a
>
Drop
for
SemaphorePermit
<
'
_
>
{
fn
drop
(
&
mut
self
)
{
self
.
sem
.
add_permits
(
self
.
permits
as
usize
)
;
}
}
impl
Drop
for
OwnedSemaphorePermit
{
fn
drop
(
&
mut
self
)
{
self
.
sem
.
add_permits
(
self
.
permits
as
usize
)
;
}
}
