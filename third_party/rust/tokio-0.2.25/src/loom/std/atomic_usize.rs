use
std
:
:
cell
:
:
UnsafeCell
;
use
std
:
:
fmt
;
use
std
:
:
ops
;
pub
(
crate
)
struct
AtomicUsize
{
inner
:
UnsafeCell
<
std
:
:
sync
:
:
atomic
:
:
AtomicUsize
>
}
unsafe
impl
Send
for
AtomicUsize
{
}
unsafe
impl
Sync
for
AtomicUsize
{
}
impl
AtomicUsize
{
pub
(
crate
)
fn
new
(
val
:
usize
)
-
>
AtomicUsize
{
let
inner
=
UnsafeCell
:
:
new
(
std
:
:
sync
:
:
atomic
:
:
AtomicUsize
:
:
new
(
val
)
)
;
AtomicUsize
{
inner
}
}
pub
(
crate
)
unsafe
fn
unsync_load
(
&
self
)
-
>
usize
{
*
(
*
self
.
inner
.
get
(
)
)
.
get_mut
(
)
}
pub
(
crate
)
fn
with_mut
<
R
>
(
&
mut
self
f
:
impl
FnOnce
(
&
mut
usize
)
-
>
R
)
-
>
R
{
f
(
unsafe
{
(
*
self
.
inner
.
get
(
)
)
.
get_mut
(
)
}
)
}
}
impl
ops
:
:
Deref
for
AtomicUsize
{
type
Target
=
std
:
:
sync
:
:
atomic
:
:
AtomicUsize
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
unsafe
{
&
*
self
.
inner
.
get
(
)
}
}
}
impl
ops
:
:
DerefMut
for
AtomicUsize
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
Self
:
:
Target
{
unsafe
{
&
mut
*
self
.
inner
.
get
(
)
}
}
}
impl
fmt
:
:
Debug
for
AtomicUsize
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
(
*
*
self
)
.
fmt
(
fmt
)
}
}
