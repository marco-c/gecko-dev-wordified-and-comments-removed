use
core
:
:
fmt
;
use
crate
:
:
UnitError
;
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
WrongVariantError
{
operation_name
:
&
'
static
str
}
impl
WrongVariantError
{
#
[
doc
(
hidden
)
]
#
[
must_use
]
#
[
inline
]
pub
const
fn
new
(
operation_name
:
&
'
static
str
)
-
>
Self
{
Self
{
operation_name
}
}
}
impl
fmt
:
:
Display
for
WrongVariantError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
Trying
to
{
}
(
)
mismatched
enum
variants
"
self
.
operation_name
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
std
:
:
error
:
:
Error
for
WrongVariantError
{
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
BinaryError
{
Mismatch
(
WrongVariantError
)
Unit
(
UnitError
)
}
impl
fmt
:
:
Display
for
BinaryError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
self
{
Self
:
:
Mismatch
(
e
)
=
>
write
!
(
f
"
{
e
}
"
)
Self
:
:
Unit
(
e
)
=
>
write
!
(
f
"
{
e
}
"
)
}
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
std
:
:
error
:
:
Error
for
BinaryError
{
fn
source
(
&
self
)
-
>
Option
<
&
(
dyn
std
:
:
error
:
:
Error
+
'
static
)
>
{
match
self
{
Self
:
:
Mismatch
(
e
)
=
>
e
.
source
(
)
Self
:
:
Unit
(
e
)
=
>
e
.
source
(
)
}
}
}
