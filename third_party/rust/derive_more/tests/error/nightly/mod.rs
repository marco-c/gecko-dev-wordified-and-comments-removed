use
std
:
:
backtrace
:
:
Backtrace
;
use
super
:
:
*
;
macro_rules
!
assert_bt
{
(
impl
macro
:
ident
error
:
expr
backtrace
:
expr
)
=
>
{
macro
!
(
std
:
:
any
:
:
request_ref
:
:
<
Backtrace
>
(
&
error
)
.
unwrap
(
)
.
to_string
(
)
backtrace
.
to_string
(
)
)
;
}
;
(
expand
macro
:
ident
error
:
expr
.
backtrace
:
ident
)
=
>
{
assert_bt
!
(
impl
macro
error
error
.
backtrace
(
)
)
}
;
(
expand
macro
:
ident
error
:
expr
.
backtrace
:
tt
)
=
>
{
assert_bt
!
(
impl
macro
error
error
.
backtrace
)
}
;
(
expand
macro
:
ident
error
:
expr
backtrace
:
ident
)
=
>
{
assert_bt
!
(
impl
macro
error
error
.
backtrace
)
}
;
(
expand
macro
:
ident
error
:
expr
backtrace
:
expr
)
=
>
{
assert_bt
!
(
impl
macro
error
backtrace
)
}
;
(
expand
macro
:
ident
error
:
expr
)
=
>
{
assert_bt
!
(
expand
macro
error
backtrace
)
}
;
(
=
=
(
args
:
tt
)
*
)
=
>
{
assert_bt
!
(
expand
assert_eq
(
args
)
*
)
}
;
(
!
=
(
args
:
tt
)
*
)
=
>
{
assert_bt
!
(
expand
assert_ne
(
args
)
*
)
}
;
}
mod
derives_for_enums_with_backtrace
;
mod
derives_for_generic_enums_with_backtrace
;
mod
derives_for_generic_structs_with_backtrace
;
mod
derives_for_structs_with_backtrace
;
derive_display
!
(
BacktraceErr
)
;
#
[
derive
(
Debug
)
]
struct
BacktraceErr
{
backtrace
:
Backtrace
}
impl
Default
for
BacktraceErr
{
fn
default
(
)
-
>
Self
{
Self
{
backtrace
:
Backtrace
:
:
force_capture
(
)
}
}
}
impl
Error
for
BacktraceErr
{
fn
provide
<
'
a
>
(
&
'
a
self
demand
:
&
mut
std
:
:
any
:
:
Demand
<
'
a
>
)
{
demand
.
provide_ref
:
:
<
Backtrace
>
(
&
self
.
backtrace
)
.
provide_value
:
:
<
i32
>
(
42
)
;
}
}
