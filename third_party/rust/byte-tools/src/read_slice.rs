use
core
:
:
ptr
;
macro_rules
!
read_slice
{
(
src
:
expr
dst
:
expr
size
:
expr
which
:
ident
)
=
>
(
{
assert_eq
!
(
size
*
dst
.
len
(
)
src
.
len
(
)
)
;
unsafe
{
ptr
:
:
copy_nonoverlapping
(
src
.
as_ptr
(
)
dst
.
as_mut_ptr
(
)
as
*
mut
u8
src
.
len
(
)
)
;
}
for
v
in
dst
.
iter_mut
(
)
{
*
v
=
v
.
which
(
)
;
}
}
)
;
}
#
[
inline
]
pub
fn
read_u32v_le
(
dst
:
&
mut
[
u32
]
src
:
&
[
u8
]
)
{
read_slice
!
(
src
dst
4
to_le
)
;
}
#
[
inline
]
pub
fn
read_u32v_be
(
dst
:
&
mut
[
u32
]
src
:
&
[
u8
]
)
{
read_slice
!
(
src
dst
4
to_be
)
;
}
#
[
inline
]
pub
fn
read_u64v_le
(
dst
:
&
mut
[
u64
]
src
:
&
[
u8
]
)
{
read_slice
!
(
src
dst
8
to_le
)
;
}
#
[
inline
]
pub
fn
read_u64v_be
(
dst
:
&
mut
[
u64
]
src
:
&
[
u8
]
)
{
read_slice
!
(
src
dst
8
to_be
)
;
}
