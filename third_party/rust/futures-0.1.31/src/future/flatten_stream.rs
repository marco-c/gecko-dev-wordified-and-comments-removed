use
{
Async
Future
Poll
}
;
use
core
:
:
fmt
;
use
stream
:
:
Stream
;
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
FlattenStream
<
F
>
where
F
:
Future
<
F
as
Future
>
:
:
Item
:
Stream
<
Error
=
F
:
:
Error
>
{
state
:
State
<
F
>
}
impl
<
F
>
fmt
:
:
Debug
for
FlattenStream
<
F
>
where
F
:
Future
+
fmt
:
:
Debug
<
F
as
Future
>
:
:
Item
:
Stream
<
Error
=
F
:
:
Error
>
+
fmt
:
:
Debug
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
.
debug_struct
(
"
FlattenStream
"
)
.
field
(
"
state
"
&
self
.
state
)
.
finish
(
)
}
}
pub
fn
new
<
F
>
(
f
:
F
)
-
>
FlattenStream
<
F
>
where
F
:
Future
<
F
as
Future
>
:
:
Item
:
Stream
<
Error
=
F
:
:
Error
>
{
FlattenStream
{
state
:
State
:
:
Future
(
f
)
}
}
#
[
derive
(
Debug
)
]
enum
State
<
F
>
where
F
:
Future
<
F
as
Future
>
:
:
Item
:
Stream
<
Error
=
F
:
:
Error
>
{
Future
(
F
)
Stream
(
F
:
:
Item
)
Eof
Done
}
impl
<
F
>
Stream
for
FlattenStream
<
F
>
where
F
:
Future
<
F
as
Future
>
:
:
Item
:
Stream
<
Error
=
F
:
:
Error
>
{
type
Item
=
<
F
:
:
Item
as
Stream
>
:
:
Item
;
type
Error
=
<
F
:
:
Item
as
Stream
>
:
:
Error
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
Self
:
:
Error
>
{
loop
{
let
(
next_state
ret_opt
)
=
match
self
.
state
{
State
:
:
Future
(
ref
mut
f
)
=
>
{
match
f
.
poll
(
)
{
Ok
(
Async
:
:
NotReady
)
=
>
{
return
Ok
(
Async
:
:
NotReady
)
}
Ok
(
Async
:
:
Ready
(
stream
)
)
=
>
{
(
State
:
:
Stream
(
stream
)
None
)
}
Err
(
e
)
=
>
{
(
State
:
:
Eof
Some
(
Err
(
e
)
)
)
}
}
}
State
:
:
Stream
(
ref
mut
s
)
=
>
{
return
s
.
poll
(
)
;
}
State
:
:
Eof
=
>
{
(
State
:
:
Done
Some
(
Ok
(
Async
:
:
Ready
(
None
)
)
)
)
}
State
:
:
Done
=
>
{
panic
!
(
"
poll
called
after
eof
"
)
;
}
}
;
self
.
state
=
next_state
;
if
let
Some
(
ret
)
=
ret_opt
{
return
ret
;
}
}
}
}
