#
[
cfg
(
not
(
feature
=
"
no
-
hash
-
maps
"
)
)
]
mod
impls
{
use
crate
:
:
collections
:
:
hash
;
use
indexmap
:
:
IndexMap
;
pub
type
IndexMapImpl
<
K
V
>
=
IndexMap
<
K
V
hash
:
:
RandomState
>
;
pub
type
EntryImpl
<
'
a
K
V
>
=
indexmap
:
:
map
:
:
Entry
<
'
a
K
V
>
;
pub
type
OccupiedEntryImpl
<
'
a
K
V
>
=
indexmap
:
:
map
:
:
OccupiedEntry
<
'
a
K
V
>
;
pub
type
VacantEntryImpl
<
'
a
K
V
>
=
indexmap
:
:
map
:
:
VacantEntry
<
'
a
K
V
>
;
pub
type
IterImpl
<
'
a
K
V
>
=
indexmap
:
:
map
:
:
Iter
<
'
a
K
V
>
;
pub
type
IterMutImpl
<
'
a
K
V
>
=
indexmap
:
:
map
:
:
IterMut
<
'
a
K
V
>
;
pub
type
IntoIterImpl
<
K
V
>
=
indexmap
:
:
map
:
:
IntoIter
<
K
V
>
;
pub
type
KeysImpl
<
'
a
K
V
>
=
indexmap
:
:
map
:
:
Keys
<
'
a
K
V
>
;
pub
type
ValuesImpl
<
'
a
K
V
>
=
indexmap
:
:
map
:
:
Values
<
'
a
K
V
>
;
pub
type
ValuesMutImpl
<
'
a
K
V
>
=
indexmap
:
:
map
:
:
ValuesMut
<
'
a
K
V
>
;
}
#
[
cfg
(
feature
=
"
no
-
hash
-
maps
"
)
]
mod
impls
{
pub
type
IndexMapImpl
<
K
V
>
=
super
:
:
IndexMap
<
K
V
>
;
pub
type
EntryImpl
<
'
a
K
V
>
=
super
:
:
Entry
<
'
a
K
V
>
;
pub
type
OccupiedEntryImpl
<
'
a
K
V
>
=
super
:
:
OccupiedEntry
<
'
a
K
V
>
;
pub
type
VacantEntryImpl
<
'
a
K
V
>
=
super
:
:
VacantEntry
<
'
a
K
V
>
;
pub
type
IterImpl
<
'
a
K
V
>
=
super
:
:
Iter
<
'
a
K
V
>
;
pub
type
IterMutImpl
<
'
a
K
V
>
=
super
:
:
IterMut
<
'
a
K
V
>
;
pub
type
IntoIterImpl
<
K
V
>
=
super
:
:
IntoIter
<
K
V
>
;
pub
type
KeysImpl
<
'
a
K
V
>
=
super
:
:
Keys
<
'
a
K
V
>
;
pub
type
ValuesImpl
<
'
a
K
V
>
=
super
:
:
Values
<
'
a
K
V
>
;
pub
type
ValuesMutImpl
<
'
a
K
V
>
=
super
:
:
ValuesMut
<
'
a
K
V
>
;
}
pub
use
self
:
:
impls
:
:
*
;
use
alloc
:
:
collections
:
:
{
btree_map
BTreeMap
}
;
use
alloc
:
:
vec
:
:
IntoIter
as
VecIntoIter
;
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
borrow
:
:
Borrow
;
use
core
:
:
fmt
;
use
core
:
:
iter
:
:
FusedIterator
;
use
core
:
:
mem
:
:
replace
;
use
core
:
:
ops
:
:
{
Index
IndexMut
}
;
use
core
:
:
slice
:
:
Iter
as
SliceIter
;
use
core
:
:
slice
:
:
IterMut
as
SliceIterMut
;
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
PartialOrd
Ord
)
]
struct
SlotIndex
(
usize
)
;
impl
SlotIndex
{
pub
fn
index
(
self
)
-
>
usize
{
self
.
0
}
}
#
[
derive
(
Debug
Clone
PartialEq
Eq
PartialOrd
Ord
)
]
struct
Slot
<
K
V
>
{
key
:
K
value
:
V
}
impl
<
K
V
>
Slot
<
K
V
>
{
pub
fn
new
(
key
:
K
value
:
V
)
-
>
Self
{
Self
{
key
value
}
}
pub
fn
as_pair
(
&
self
)
-
>
(
&
K
&
V
)
{
(
&
self
.
key
&
self
.
value
)
}
pub
fn
as_pair_mut
(
&
mut
self
)
-
>
(
&
K
&
mut
V
)
{
(
&
self
.
key
&
mut
self
.
value
)
}
pub
fn
into_pair
(
self
)
-
>
(
K
V
)
{
(
self
.
key
self
.
value
)
}
pub
fn
key
(
&
self
)
-
>
&
K
{
&
self
.
key
}
pub
fn
value
(
&
self
)
-
>
&
V
{
&
self
.
value
}
pub
fn
value_mut
(
&
mut
self
)
-
>
&
mut
V
{
&
mut
self
.
value
}
}
#
[
derive
(
Debug
Clone
PartialEq
Eq
PartialOrd
Ord
)
]
pub
struct
IndexMap
<
K
V
>
{
key2slot
:
BTreeMap
<
K
SlotIndex
>
slots
:
Vec
<
Slot
<
K
V
>
>
}
impl
<
K
V
>
Default
for
IndexMap
<
K
V
>
{
fn
default
(
)
-
>
Self
{
Self
:
:
new
(
)
}
}
impl
<
K
V
>
IndexMap
<
K
V
>
{
pub
fn
new
(
)
-
>
Self
{
Self
{
key2slot
:
BTreeMap
:
:
new
(
)
slots
:
Vec
:
:
new
(
)
}
}
pub
fn
with_capacity
(
capacity
:
usize
)
-
>
Self
{
Self
{
key2slot
:
BTreeMap
:
:
new
(
)
slots
:
Vec
:
:
with_capacity
(
capacity
)
}
}
pub
fn
reserve
(
&
mut
self
additional
:
usize
)
{
self
.
slots
.
reserve
(
additional
)
;
}
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
slots
.
len
(
)
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
len
(
)
=
=
0
}
pub
fn
contains_key
<
Q
:
?
Sized
>
(
&
self
key
:
&
Q
)
-
>
bool
where
K
:
Borrow
<
Q
>
+
Ord
Q
:
Ord
{
self
.
key2slot
.
contains_key
(
key
)
}
pub
fn
insert
(
&
mut
self
key
:
K
value
:
V
)
-
>
Option
<
V
>
where
K
:
Ord
+
Clone
{
self
.
insert_full
(
key
value
)
.
1
}
pub
fn
insert_full
(
&
mut
self
key
:
K
value
:
V
)
-
>
(
usize
Option
<
V
>
)
where
K
:
Ord
+
Clone
{
match
self
.
key2slot
.
entry
(
key
.
clone
(
)
)
{
btree_map
:
:
Entry
:
:
Vacant
(
entry
)
=
>
{
let
index
=
self
.
slots
.
len
(
)
;
entry
.
insert
(
SlotIndex
(
index
)
)
;
self
.
slots
.
push
(
Slot
:
:
new
(
key
value
)
)
;
(
index
None
)
}
btree_map
:
:
Entry
:
:
Occupied
(
entry
)
=
>
{
let
index
=
entry
.
get
(
)
.
index
(
)
;
let
new_slot
=
Slot
:
:
new
(
key
value
)
;
let
old_slot
=
replace
(
&
mut
self
.
slots
[
index
]
new_slot
)
;
(
index
Some
(
old_slot
.
value
)
)
}
}
}
pub
fn
swap_remove
<
Q
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
V
>
where
K
:
Borrow
<
Q
>
+
Ord
Q
:
?
Sized
+
Ord
{
self
.
swap_remove_full
(
key
)
.
map
(
|
(
_index
_key
value
)
|
value
)
}
pub
fn
swap_remove_entry
<
Q
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
(
K
V
)
>
where
K
:
Borrow
<
Q
>
+
Ord
Q
:
?
Sized
+
Ord
{
self
.
swap_remove_full
(
key
)
.
map
(
|
(
_index
key
value
)
|
(
key
value
)
)
}
pub
fn
swap_remove_full
<
Q
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
(
usize
K
V
)
>
where
K
:
Borrow
<
Q
>
+
Ord
Q
:
?
Sized
+
Ord
{
let
index
=
self
.
key2slot
.
remove
(
key
)
?
.
0
;
let
removed
=
self
.
slots
.
swap_remove
(
index
)
;
if
index
!
=
self
.
len
(
)
{
let
swapped
=
self
.
slots
[
index
]
.
key
.
borrow
(
)
;
let
swapped_index
=
self
.
key2slot
.
get_mut
(
swapped
)
.
expect
(
"
the
swapped
entry
'
s
key
must
be
present
"
)
;
*
swapped_index
=
SlotIndex
(
index
)
;
}
Some
(
(
index
removed
.
key
removed
.
value
)
)
}
pub
fn
entry
(
&
mut
self
key
:
K
)
-
>
Entry
<
K
V
>
where
K
:
Ord
+
Clone
{
match
self
.
key2slot
.
entry
(
key
)
{
btree_map
:
:
Entry
:
:
Vacant
(
entry
)
=
>
Entry
:
:
Vacant
(
VacantEntry
{
vacant
:
entry
slots
:
&
mut
self
.
slots
}
)
btree_map
:
:
Entry
:
:
Occupied
(
entry
)
=
>
Entry
:
:
Occupied
(
OccupiedEntry
{
occupied
:
entry
slots
:
&
mut
self
.
slots
}
)
}
}
pub
fn
get
<
Q
>
(
&
self
key
:
&
Q
)
-
>
Option
<
&
V
>
where
K
:
Borrow
<
Q
>
+
Ord
Q
:
?
Sized
+
Ord
{
self
.
key2slot
.
get
(
key
)
.
map
(
|
slot
|
&
self
.
slots
[
slot
.
index
(
)
]
.
value
)
}
pub
fn
get_mut
<
Q
:
?
Sized
>
(
&
mut
self
key
:
&
Q
)
-
>
Option
<
&
mut
V
>
where
K
:
Borrow
<
Q
>
+
Ord
Q
:
Ord
{
self
.
key2slot
.
get
(
key
)
.
map
(
|
slot
|
&
mut
self
.
slots
[
slot
.
index
(
)
]
.
value
)
}
pub
fn
get_key_value
<
Q
:
?
Sized
>
(
&
self
key
:
&
Q
)
-
>
Option
<
(
&
K
&
V
)
>
where
K
:
Borrow
<
Q
>
+
Ord
Q
:
Ord
{
self
.
key2slot
.
get_key_value
(
key
)
.
map
(
|
(
key
slot
)
|
(
key
&
self
.
slots
[
slot
.
index
(
)
]
.
value
)
)
}
pub
fn
get_full
<
Q
:
?
Sized
>
(
&
self
key
:
&
Q
)
-
>
Option
<
(
usize
&
K
&
V
)
>
where
K
:
Borrow
<
Q
>
+
Ord
Q
:
Ord
{
self
.
key2slot
.
get_key_value
(
key
)
.
map
(
|
(
key
slot
)
|
{
let
index
=
slot
.
index
(
)
;
let
value
=
&
self
.
slots
[
index
]
.
value
;
(
index
key
value
)
}
)
}
pub
fn
get_index_of
<
Q
:
?
Sized
>
(
&
self
key
:
&
Q
)
-
>
Option
<
usize
>
where
K
:
Borrow
<
Q
>
+
Ord
Q
:
Ord
{
self
.
key2slot
.
get
(
key
)
.
copied
(
)
.
map
(
SlotIndex
:
:
index
)
}
pub
fn
get_index
(
&
self
index
:
usize
)
-
>
Option
<
(
&
K
&
V
)
>
{
self
.
slots
.
get
(
index
)
.
map
(
Slot
:
:
as_pair
)
}
pub
fn
get_index_mut
(
&
mut
self
index
:
usize
)
-
>
Option
<
(
&
K
&
mut
V
)
>
{
self
.
slots
.
get_mut
(
index
)
.
map
(
Slot
:
:
as_pair_mut
)
}
pub
fn
iter
(
&
self
)
-
>
Iter
<
K
V
>
{
Iter
{
iter
:
self
.
slots
.
iter
(
)
}
}
pub
fn
iter_mut
(
&
mut
self
)
-
>
IterMut
<
K
V
>
{
IterMut
{
iter
:
self
.
slots
.
iter_mut
(
)
}
}
pub
fn
keys
(
&
self
)
-
>
Keys
<
K
V
>
{
Keys
{
iter
:
self
.
slots
.
iter
(
)
}
}
pub
fn
values
(
&
self
)
-
>
Values
<
K
V
>
{
Values
{
iter
:
self
.
slots
.
iter
(
)
}
}
pub
fn
values_mut
(
&
mut
self
)
-
>
ValuesMut
<
K
V
>
{
ValuesMut
{
iter
:
self
.
slots
.
iter_mut
(
)
}
}
pub
fn
clear
(
&
mut
self
)
{
self
.
key2slot
.
clear
(
)
;
self
.
slots
.
clear
(
)
;
}
}
impl
<
'
a
K
Q
V
>
Index
<
&
'
a
Q
>
for
IndexMap
<
K
V
>
where
K
:
Borrow
<
Q
>
+
Ord
Q
:
?
Sized
+
Ord
{
type
Output
=
V
;
fn
index
(
&
self
key
:
&
'
a
Q
)
-
>
&
Self
:
:
Output
{
self
.
get
(
key
)
.
expect
(
"
no
entry
found
for
key
"
)
}
}
impl
<
K
V
>
Index
<
usize
>
for
IndexMap
<
K
V
>
{
type
Output
=
V
;
fn
index
(
&
self
index
:
usize
)
-
>
&
Self
:
:
Output
{
let
(
_key
value
)
=
self
.
get_index
(
index
)
.
expect
(
"
IndexMap
:
index
out
of
bounds
"
)
;
value
}
}
impl
<
K
V
>
IndexMut
<
usize
>
for
IndexMap
<
K
V
>
{
fn
index_mut
(
&
mut
self
index
:
usize
)
-
>
&
mut
Self
:
:
Output
{
let
(
_key
value
)
=
self
.
get_index_mut
(
index
)
.
expect
(
"
IndexMap
:
index
out
of
bounds
"
)
;
value
}
}
impl
<
'
a
K
V
>
Extend
<
(
&
'
a
K
&
'
a
V
)
>
for
IndexMap
<
K
V
>
where
K
:
Ord
+
Copy
V
:
Copy
{
fn
extend
<
T
>
(
&
mut
self
iter
:
T
)
where
T
:
IntoIterator
<
Item
=
(
&
'
a
K
&
'
a
V
)
>
{
self
.
extend
(
iter
.
into_iter
(
)
.
map
(
|
(
key
value
)
|
(
*
key
*
value
)
)
)
}
}
impl
<
K
V
>
Extend
<
(
K
V
)
>
for
IndexMap
<
K
V
>
where
K
:
Ord
+
Clone
{
fn
extend
<
T
>
(
&
mut
self
iter
:
T
)
where
T
:
IntoIterator
<
Item
=
(
K
V
)
>
{
iter
.
into_iter
(
)
.
for_each
(
move
|
(
k
v
)
|
{
self
.
insert
(
k
v
)
;
}
)
;
}
}
impl
<
K
V
>
FromIterator
<
(
K
V
)
>
for
IndexMap
<
K
V
>
where
K
:
Ord
+
Clone
{
fn
from_iter
<
T
>
(
iter
:
T
)
-
>
Self
where
T
:
IntoIterator
<
Item
=
(
K
V
)
>
{
let
mut
map
=
IndexMap
:
:
new
(
)
;
map
.
extend
(
iter
)
;
map
}
}
impl
<
K
V
const
N
:
usize
>
From
<
[
(
K
V
)
;
N
]
>
for
IndexMap
<
K
V
>
where
K
:
Ord
+
Clone
{
fn
from
(
items
:
[
(
K
V
)
;
N
]
)
-
>
Self
{
items
.
into_iter
(
)
.
collect
(
)
}
}
impl
<
'
a
K
V
>
IntoIterator
for
&
'
a
IndexMap
<
K
V
>
{
type
Item
=
(
&
'
a
K
&
'
a
V
)
;
type
IntoIter
=
Iter
<
'
a
K
V
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
self
.
iter
(
)
}
}
impl
<
'
a
K
V
>
IntoIterator
for
&
'
a
mut
IndexMap
<
K
V
>
{
type
Item
=
(
&
'
a
K
&
'
a
mut
V
)
;
type
IntoIter
=
IterMut
<
'
a
K
V
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
self
.
iter_mut
(
)
}
}
impl
<
K
V
>
IntoIterator
for
IndexMap
<
K
V
>
{
type
Item
=
(
K
V
)
;
type
IntoIter
=
IntoIter
<
K
V
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
IntoIter
{
iter
:
self
.
slots
.
into_iter
(
)
}
}
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
Iter
<
'
a
K
V
>
{
iter
:
SliceIter
<
'
a
Slot
<
K
V
>
>
}
impl
<
'
a
K
V
>
Iterator
for
Iter
<
'
a
K
V
>
{
type
Item
=
(
&
'
a
K
&
'
a
V
)
;
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
fn
count
(
self
)
-
>
usize
{
self
.
iter
.
count
(
)
}
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next
(
)
.
map
(
Slot
:
:
as_pair
)
}
}
impl
<
'
a
K
V
>
DoubleEndedIterator
for
Iter
<
'
a
K
V
>
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next_back
(
)
.
map
(
Slot
:
:
as_pair
)
}
}
impl
<
'
a
K
V
>
ExactSizeIterator
for
Iter
<
'
a
K
V
>
{
fn
len
(
&
self
)
-
>
usize
{
self
.
iter
.
len
(
)
}
}
impl
<
'
a
K
V
>
FusedIterator
for
Iter
<
'
a
K
V
>
{
}
#
[
derive
(
Debug
)
]
pub
struct
IterMut
<
'
a
K
V
>
{
iter
:
SliceIterMut
<
'
a
Slot
<
K
V
>
>
}
impl
<
'
a
K
V
>
Iterator
for
IterMut
<
'
a
K
V
>
{
type
Item
=
(
&
'
a
K
&
'
a
mut
V
)
;
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
fn
count
(
self
)
-
>
usize
{
self
.
iter
.
count
(
)
}
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next
(
)
.
map
(
Slot
:
:
as_pair_mut
)
}
}
impl
<
'
a
K
V
>
DoubleEndedIterator
for
IterMut
<
'
a
K
V
>
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next_back
(
)
.
map
(
Slot
:
:
as_pair_mut
)
}
}
impl
<
'
a
K
V
>
ExactSizeIterator
for
IterMut
<
'
a
K
V
>
{
fn
len
(
&
self
)
-
>
usize
{
self
.
iter
.
len
(
)
}
}
impl
<
'
a
K
V
>
FusedIterator
for
IterMut
<
'
a
K
V
>
{
}
#
[
derive
(
Debug
)
]
pub
struct
IntoIter
<
K
V
>
{
iter
:
VecIntoIter
<
Slot
<
K
V
>
>
}
impl
<
K
V
>
Iterator
for
IntoIter
<
K
V
>
{
type
Item
=
(
K
V
)
;
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
fn
count
(
self
)
-
>
usize
{
self
.
iter
.
count
(
)
}
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next
(
)
.
map
(
Slot
:
:
into_pair
)
}
}
impl
<
K
V
>
DoubleEndedIterator
for
IntoIter
<
K
V
>
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next_back
(
)
.
map
(
Slot
:
:
into_pair
)
}
}
impl
<
K
V
>
ExactSizeIterator
for
IntoIter
<
K
V
>
{
fn
len
(
&
self
)
-
>
usize
{
self
.
iter
.
len
(
)
}
}
impl
<
K
V
>
FusedIterator
for
IntoIter
<
K
V
>
{
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
Keys
<
'
a
K
V
>
{
iter
:
SliceIter
<
'
a
Slot
<
K
V
>
>
}
impl
<
'
a
K
V
>
Iterator
for
Keys
<
'
a
K
V
>
{
type
Item
=
&
'
a
K
;
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
fn
count
(
self
)
-
>
usize
{
self
.
iter
.
count
(
)
}
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next
(
)
.
map
(
Slot
:
:
key
)
}
}
impl
<
'
a
K
V
>
DoubleEndedIterator
for
Keys
<
'
a
K
V
>
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next_back
(
)
.
map
(
Slot
:
:
key
)
}
}
impl
<
'
a
K
V
>
ExactSizeIterator
for
Keys
<
'
a
K
V
>
{
fn
len
(
&
self
)
-
>
usize
{
self
.
iter
.
len
(
)
}
}
impl
<
'
a
K
V
>
FusedIterator
for
Keys
<
'
a
K
V
>
{
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
Values
<
'
a
K
V
>
{
iter
:
SliceIter
<
'
a
Slot
<
K
V
>
>
}
impl
<
'
a
K
V
>
Iterator
for
Values
<
'
a
K
V
>
{
type
Item
=
&
'
a
V
;
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
fn
count
(
self
)
-
>
usize
{
self
.
iter
.
count
(
)
}
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next
(
)
.
map
(
Slot
:
:
value
)
}
}
impl
<
'
a
K
V
>
DoubleEndedIterator
for
Values
<
'
a
K
V
>
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next_back
(
)
.
map
(
Slot
:
:
value
)
}
}
impl
<
'
a
K
V
>
ExactSizeIterator
for
Values
<
'
a
K
V
>
{
fn
len
(
&
self
)
-
>
usize
{
self
.
iter
.
len
(
)
}
}
impl
<
'
a
K
V
>
FusedIterator
for
Values
<
'
a
K
V
>
{
}
#
[
derive
(
Debug
)
]
pub
struct
ValuesMut
<
'
a
K
V
>
{
iter
:
SliceIterMut
<
'
a
Slot
<
K
V
>
>
}
impl
<
'
a
K
V
>
Iterator
for
ValuesMut
<
'
a
K
V
>
{
type
Item
=
&
'
a
mut
V
;
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
fn
count
(
self
)
-
>
usize
{
self
.
iter
.
count
(
)
}
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next
(
)
.
map
(
Slot
:
:
value_mut
)
}
}
impl
<
'
a
K
V
>
DoubleEndedIterator
for
ValuesMut
<
'
a
K
V
>
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
iter
.
next_back
(
)
.
map
(
Slot
:
:
value_mut
)
}
}
impl
<
'
a
K
V
>
ExactSizeIterator
for
ValuesMut
<
'
a
K
V
>
{
fn
len
(
&
self
)
-
>
usize
{
self
.
iter
.
len
(
)
}
}
impl
<
'
a
K
V
>
FusedIterator
for
ValuesMut
<
'
a
K
V
>
{
}
pub
enum
Entry
<
'
a
K
V
>
{
Vacant
(
VacantEntry
<
'
a
K
V
>
)
Occupied
(
OccupiedEntry
<
'
a
K
V
>
)
}
impl
<
'
a
K
:
Ord
V
>
Entry
<
'
a
K
V
>
{
pub
fn
or_insert
(
self
default
:
V
)
-
>
&
'
a
mut
V
where
K
:
Clone
{
match
self
{
Self
:
:
Occupied
(
entry
)
=
>
entry
.
into_mut
(
)
Self
:
:
Vacant
(
entry
)
=
>
entry
.
insert
(
default
)
}
}
pub
fn
or_insert_with
<
F
:
FnOnce
(
)
-
>
V
>
(
self
default
:
F
)
-
>
&
'
a
mut
V
where
K
:
Clone
{
match
self
{
Self
:
:
Occupied
(
entry
)
=
>
entry
.
into_mut
(
)
Self
:
:
Vacant
(
entry
)
=
>
entry
.
insert
(
default
(
)
)
}
}
pub
fn
or_insert_with_key
<
F
:
FnOnce
(
&
K
)
-
>
V
>
(
self
default
:
F
)
-
>
&
'
a
mut
V
where
K
:
Clone
{
match
self
{
Self
:
:
Occupied
(
entry
)
=
>
entry
.
into_mut
(
)
Self
:
:
Vacant
(
entry
)
=
>
{
let
value
=
default
(
entry
.
key
(
)
)
;
entry
.
insert
(
value
)
}
}
}
pub
fn
key
(
&
self
)
-
>
&
K
{
match
*
self
{
Self
:
:
Occupied
(
ref
entry
)
=
>
entry
.
key
(
)
Self
:
:
Vacant
(
ref
entry
)
=
>
entry
.
key
(
)
}
}
pub
fn
and_modify
<
F
>
(
self
f
:
F
)
-
>
Self
where
F
:
FnOnce
(
&
mut
V
)
{
match
self
{
Self
:
:
Occupied
(
mut
entry
)
=
>
{
f
(
entry
.
get_mut
(
)
)
;
Self
:
:
Occupied
(
entry
)
}
Self
:
:
Vacant
(
entry
)
=
>
Self
:
:
Vacant
(
entry
)
}
}
}
impl
<
'
a
K
V
>
Entry
<
'
a
K
V
>
where
K
:
Ord
+
Clone
V
:
Default
{
pub
fn
or_default
(
self
)
-
>
&
'
a
mut
V
{
match
self
{
Self
:
:
Occupied
(
entry
)
=
>
entry
.
into_mut
(
)
Self
:
:
Vacant
(
entry
)
=
>
entry
.
insert
(
Default
:
:
default
(
)
)
}
}
}
impl
<
'
a
K
V
>
fmt
:
:
Debug
for
Entry
<
'
a
K
V
>
where
K
:
fmt
:
:
Debug
+
Ord
V
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
self
{
Entry
:
:
Vacant
(
entry
)
=
>
entry
.
fmt
(
f
)
Entry
:
:
Occupied
(
entry
)
=
>
entry
.
fmt
(
f
)
}
}
}
pub
struct
VacantEntry
<
'
a
K
V
>
{
vacant
:
btree_map
:
:
VacantEntry
<
'
a
K
SlotIndex
>
slots
:
&
'
a
mut
Vec
<
Slot
<
K
V
>
>
}
impl
<
'
a
K
V
>
VacantEntry
<
'
a
K
V
>
where
K
:
Ord
{
pub
fn
key
(
&
self
)
-
>
&
K
{
self
.
vacant
.
key
(
)
}
pub
fn
into_key
(
self
)
-
>
K
{
self
.
vacant
.
into_key
(
)
}
pub
fn
insert
(
self
value
:
V
)
-
>
&
'
a
mut
V
where
K
:
Clone
{
let
index
=
self
.
slots
.
len
(
)
;
let
key
=
self
.
vacant
.
key
(
)
.
clone
(
)
;
self
.
vacant
.
insert
(
SlotIndex
(
index
)
)
;
self
.
slots
.
push
(
Slot
:
:
new
(
key
value
)
)
;
&
mut
self
.
slots
[
index
]
.
value
}
}
impl
<
'
a
K
V
>
fmt
:
:
Debug
for
VacantEntry
<
'
a
K
V
>
where
K
:
fmt
:
:
Debug
+
Ord
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
VacantEntry
"
)
.
field
(
"
key
"
self
.
key
(
)
)
.
finish
(
)
}
}
pub
struct
OccupiedEntry
<
'
a
K
V
>
{
occupied
:
btree_map
:
:
OccupiedEntry
<
'
a
K
SlotIndex
>
slots
:
&
'
a
mut
Vec
<
Slot
<
K
V
>
>
}
impl
<
'
a
K
V
>
OccupiedEntry
<
'
a
K
V
>
where
K
:
Ord
{
pub
fn
key
(
&
self
)
-
>
&
K
{
self
.
occupied
.
key
(
)
}
pub
fn
get
(
&
self
)
-
>
&
V
{
let
index
=
self
.
occupied
.
get
(
)
.
index
(
)
;
&
self
.
slots
[
index
]
.
value
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
V
{
let
index
=
self
.
occupied
.
get
(
)
.
index
(
)
;
&
mut
self
.
slots
[
index
]
.
value
}
pub
fn
into_mut
(
self
)
-
>
&
'
a
mut
V
{
let
index
=
self
.
occupied
.
get
(
)
.
index
(
)
;
&
mut
self
.
slots
[
index
]
.
value
}
pub
fn
insert
(
&
mut
self
value
:
V
)
-
>
V
where
K
:
Clone
{
let
index
=
self
.
occupied
.
get
(
)
.
index
(
)
;
let
key
=
self
.
key
(
)
.
clone
(
)
;
let
new_slot
=
Slot
:
:
new
(
key
value
)
;
let
old_slot
=
replace
(
&
mut
self
.
slots
[
index
]
new_slot
)
;
old_slot
.
value
}
}
impl
<
'
a
K
V
>
fmt
:
:
Debug
for
OccupiedEntry
<
'
a
K
V
>
where
K
:
fmt
:
:
Debug
+
Ord
V
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
OccupiedEntry
"
)
.
field
(
"
key
"
self
.
key
(
)
)
.
field
(
"
value
"
self
.
get
(
)
)
.
finish
(
)
}
}
#
[
cfg
(
feature
=
"
serde
"
)
]
mod
serde_impls
{
use
super
:
:
IndexMap
;
use
core
:
:
fmt
;
use
core
:
:
marker
:
:
PhantomData
;
use
serde
:
:
de
:
:
{
Deserialize
MapAccess
Visitor
}
;
use
serde
:
:
ser
:
:
{
Serialize
SerializeMap
Serializer
}
;
impl
<
K
V
>
Serialize
for
IndexMap
<
K
V
>
where
K
:
Serialize
+
Ord
V
:
Serialize
{
fn
serialize
<
S
>
(
&
self
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
Serializer
{
let
mut
map
=
serializer
.
serialize_map
(
Some
(
self
.
len
(
)
)
)
?
;
for
(
k
v
)
in
self
.
iter
(
)
{
map
.
serialize_entry
(
k
v
)
?
;
}
map
.
end
(
)
}
}
impl
<
'
a
K
V
>
Deserialize
<
'
a
>
for
IndexMap
<
K
V
>
where
K
:
Deserialize
<
'
a
>
+
Clone
+
Ord
V
:
Deserialize
<
'
a
>
{
fn
deserialize
<
D
>
(
deserializer
:
D
)
-
>
Result
<
Self
D
:
:
Error
>
where
D
:
serde
:
:
de
:
:
Deserializer
<
'
a
>
{
deserializer
.
deserialize_map
(
IndexMapVisitor
{
_marker
:
PhantomData
}
)
}
}
struct
IndexMapVisitor
<
K
V
>
{
_marker
:
PhantomData
<
fn
(
)
-
>
IndexMap
<
K
V
>
>
}
impl
<
'
de
K
V
>
Visitor
<
'
de
>
for
IndexMapVisitor
<
K
V
>
where
K
:
Deserialize
<
'
de
>
+
Clone
+
Ord
V
:
Deserialize
<
'
de
>
{
type
Value
=
IndexMap
<
K
V
>
;
fn
expecting
(
&
self
formatter
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
formatter
.
write_str
(
"
a
map
"
)
}
fn
visit_map
<
M
>
(
self
mut
access
:
M
)
-
>
Result
<
Self
:
:
Value
M
:
:
Error
>
where
M
:
MapAccess
<
'
de
>
{
let
mut
map
=
IndexMap
:
:
with_capacity
(
access
.
size_hint
(
)
.
unwrap_or
(
0
)
)
;
while
let
Some
(
(
key
value
)
)
=
access
.
next_entry
(
)
?
{
map
.
insert
(
key
value
)
;
}
Ok
(
map
)
}
}
}
