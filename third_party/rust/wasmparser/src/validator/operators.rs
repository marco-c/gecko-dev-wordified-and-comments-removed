use
crate
:
:
{
limits
:
:
MAX_WASM_FUNCTION_LOCALS
BinaryReaderError
BlockType
MemoryImmediate
Operator
Result
SIMDLaneIndex
ValType
WasmFeatures
WasmFuncType
WasmModuleResources
}
;
pub
(
crate
)
struct
OperatorValidatorError
(
pub
(
crate
)
BinaryReaderError
)
;
macro_rules
!
format_op_err
{
(
(
arg
:
expr
)
*
(
)
*
)
=
>
{
OperatorValidatorError
:
:
new
(
format
!
(
(
arg
)
*
)
)
}
}
macro_rules
!
bail_op_err
{
(
(
arg
:
expr
)
*
(
)
*
)
=
>
{
return
Err
(
format_op_err
!
(
(
arg
)
*
)
)
}
}
impl
OperatorValidatorError
{
pub
(
crate
)
fn
new
(
message
:
impl
Into
<
String
>
)
-
>
Self
{
let
offset
=
std
:
:
usize
:
:
MAX
;
let
e
=
BinaryReaderError
:
:
new
(
message
offset
)
;
OperatorValidatorError
(
e
)
}
pub
(
crate
)
fn
set_offset
(
mut
self
offset
:
usize
)
-
>
BinaryReaderError
{
debug_assert_eq
!
(
self
.
0
.
inner
.
offset
std
:
:
usize
:
:
MAX
)
;
self
.
0
.
inner
.
offset
=
offset
;
self
.
0
}
}
type
OperatorValidatorResult
<
T
>
=
std
:
:
result
:
:
Result
<
T
OperatorValidatorError
>
;
pub
(
crate
)
struct
OperatorValidator
{
num_locals
:
u32
locals
:
Vec
<
(
u32
ValType
)
>
pub
(
crate
)
operands
:
Vec
<
Option
<
ValType
>
>
control
:
Vec
<
Frame
>
pub
(
crate
)
features
:
WasmFeatures
br_table_tmp
:
Vec
<
Option
<
ValType
>
>
}
struct
Frame
{
kind
:
FrameKind
block_type
:
BlockType
height
:
usize
unreachable
:
bool
}
#
[
derive
(
PartialEq
Copy
Clone
)
]
enum
FrameKind
{
Block
If
Else
Loop
Try
Catch
CatchAll
}
impl
OperatorValidator
{
pub
fn
new_func
(
ty
:
u32
offset
:
usize
features
:
&
WasmFeatures
resources
:
&
impl
WasmModuleResources
)
-
>
Result
<
OperatorValidator
>
{
let
locals
=
func_type_at
(
resources
ty
)
.
map_err
(
|
e
|
e
.
set_offset
(
offset
)
)
?
.
inputs
(
)
.
enumerate
(
)
.
map
(
|
(
i
ty
)
|
(
i
as
u32
ty
)
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
;
Ok
(
OperatorValidator
{
num_locals
:
locals
.
len
(
)
as
u32
locals
operands
:
Vec
:
:
new
(
)
control
:
vec
!
[
Frame
{
kind
:
FrameKind
:
:
Block
block_type
:
BlockType
:
:
FuncType
(
ty
)
height
:
0
unreachable
:
false
}
]
features
:
*
features
br_table_tmp
:
Vec
:
:
new
(
)
}
)
}
pub
fn
new_init_expr
(
features
:
&
WasmFeatures
ty
:
ValType
)
-
>
OperatorValidator
{
OperatorValidator
{
num_locals
:
0
locals
:
Vec
:
:
new
(
)
operands
:
Vec
:
:
new
(
)
control
:
vec
!
[
Frame
{
kind
:
FrameKind
:
:
Block
block_type
:
BlockType
:
:
Type
(
ty
)
height
:
0
unreachable
:
false
}
]
features
:
*
features
br_table_tmp
:
Vec
:
:
new
(
)
}
}
pub
fn
define_locals
(
&
mut
self
offset
:
usize
count
:
u32
ty
:
ValType
)
-
>
Result
<
(
)
>
{
self
.
features
.
check_value_type
(
ty
)
.
map_err
(
|
e
|
BinaryReaderError
:
:
new
(
e
offset
)
)
?
;
if
count
=
=
0
{
return
Ok
(
(
)
)
;
}
match
self
.
num_locals
.
checked_add
(
count
)
{
Some
(
n
)
=
>
self
.
num_locals
=
n
None
=
>
return
Err
(
BinaryReaderError
:
:
new
(
"
locals
overflow
"
offset
)
)
}
if
self
.
num_locals
>
(
MAX_WASM_FUNCTION_LOCALS
as
u32
)
{
return
Err
(
BinaryReaderError
:
:
new
(
"
too
many
locals
:
locals
exceed
maximum
"
offset
)
)
;
}
self
.
locals
.
push
(
(
self
.
num_locals
-
1
ty
)
)
;
Ok
(
(
)
)
}
fn
local
(
&
self
idx
:
u32
)
-
>
OperatorValidatorResult
<
ValType
>
{
match
self
.
locals
.
binary_search_by_key
(
&
idx
|
(
idx
_
)
|
*
idx
)
{
Err
(
i
)
if
i
=
=
self
.
locals
.
len
(
)
=
>
{
bail_op_err
!
(
"
unknown
local
{
}
:
local
index
out
of
bounds
"
idx
)
}
Ok
(
i
)
|
Err
(
i
)
=
>
Ok
(
self
.
locals
[
i
]
.
1
)
}
}
fn
push_operand
(
&
mut
self
ty
:
ValType
)
-
>
OperatorValidatorResult
<
(
)
>
{
self
.
features
.
check_value_type
(
ty
)
.
map_err
(
OperatorValidatorError
:
:
new
)
?
;
self
.
operands
.
push
(
Some
(
ty
)
)
;
Ok
(
(
)
)
}
fn
pop_operand
(
&
mut
self
expected
:
Option
<
ValType
>
)
-
>
OperatorValidatorResult
<
Option
<
ValType
>
>
{
let
control
=
self
.
control
.
last
(
)
.
unwrap
(
)
;
let
actual
=
if
self
.
operands
.
len
(
)
=
=
control
.
height
{
if
control
.
unreachable
{
None
}
else
{
let
desc
=
match
expected
{
Some
(
ty
)
=
>
ty_to_str
(
ty
)
None
=
>
"
a
type
"
}
;
bail_op_err
!
(
"
type
mismatch
:
expected
{
}
but
nothing
on
stack
"
desc
)
}
}
else
{
self
.
operands
.
pop
(
)
.
unwrap
(
)
}
;
if
let
(
Some
(
actual_ty
)
Some
(
expected_ty
)
)
=
(
actual
expected
)
{
if
actual_ty
!
=
expected_ty
{
bail_op_err
!
(
"
type
mismatch
:
expected
{
}
found
{
}
"
ty_to_str
(
expected_ty
)
ty_to_str
(
actual_ty
)
)
}
}
Ok
(
actual
)
}
fn
unreachable
(
&
mut
self
)
{
let
control
=
self
.
control
.
last_mut
(
)
.
unwrap
(
)
;
self
.
operands
.
truncate
(
control
.
height
)
;
control
.
unreachable
=
true
;
}
fn
push_ctrl
(
&
mut
self
kind
:
FrameKind
ty
:
BlockType
resources
:
&
impl
WasmModuleResources
)
-
>
OperatorValidatorResult
<
(
)
>
{
self
.
control
.
push
(
Frame
{
kind
block_type
:
ty
height
:
self
.
operands
.
len
(
)
unreachable
:
false
}
)
;
for
ty
in
params
(
ty
resources
)
?
{
self
.
push_operand
(
ty
)
?
;
}
Ok
(
(
)
)
}
fn
pop_ctrl
(
&
mut
self
resources
:
&
impl
WasmModuleResources
)
-
>
OperatorValidatorResult
<
Frame
>
{
let
frame
=
self
.
control
.
last
(
)
.
unwrap
(
)
;
let
ty
=
frame
.
block_type
;
let
height
=
frame
.
height
;
for
ty
in
results
(
ty
resources
)
?
.
rev
(
)
{
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
if
self
.
operands
.
len
(
)
!
=
height
{
bail_op_err
!
(
"
type
mismatch
:
values
remaining
on
stack
at
end
of
block
"
)
;
}
Ok
(
self
.
control
.
pop
(
)
.
unwrap
(
)
)
}
fn
jump
(
&
self
depth
:
u32
)
-
>
OperatorValidatorResult
<
(
BlockType
FrameKind
)
>
{
match
(
self
.
control
.
len
(
)
-
1
)
.
checked_sub
(
depth
as
usize
)
{
Some
(
i
)
=
>
{
let
frame
=
&
self
.
control
[
i
]
;
Ok
(
(
frame
.
block_type
frame
.
kind
)
)
}
None
=
>
bail_op_err
!
(
"
unknown
label
:
branch
depth
too
large
"
)
}
}
fn
check_memory_index
(
&
self
memory_index
:
u32
resources
:
impl
WasmModuleResources
)
-
>
OperatorValidatorResult
<
ValType
>
{
if
memory_index
>
0
&
&
!
self
.
features
.
multi_memory
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
multi
-
memory
support
is
not
enabled
"
)
)
;
}
match
resources
.
memory_at
(
memory_index
)
{
Some
(
mem
)
=
>
Ok
(
mem
.
index_type
(
)
)
None
=
>
bail_op_err
!
(
"
unknown
memory
{
}
"
memory_index
)
}
}
fn
check_memarg
(
&
self
memarg
:
MemoryImmediate
max_align
:
u8
resources
:
impl
WasmModuleResources
)
-
>
OperatorValidatorResult
<
ValType
>
{
let
index_ty
=
self
.
check_memory_index
(
memarg
.
memory
resources
)
?
;
let
align
=
memarg
.
align
;
if
align
>
max_align
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
alignment
must
not
be
larger
than
natural
"
)
)
;
}
if
index_ty
=
=
ValType
:
:
I32
&
&
memarg
.
offset
>
u64
:
:
from
(
u32
:
:
MAX
)
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
offset
out
of
range
:
must
be
<
=
2
*
*
32
"
)
)
;
}
Ok
(
index_ty
)
}
#
[
cfg
(
feature
=
"
deterministic
"
)
]
fn
check_non_deterministic_enabled
(
&
self
)
-
>
OperatorValidatorResult
<
(
)
>
{
if
!
self
.
features
.
deterministic_only
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
deterministic_only
support
is
not
enabled
"
)
)
;
}
Ok
(
(
)
)
}
#
[
inline
(
always
)
]
#
[
cfg
(
not
(
feature
=
"
deterministic
"
)
)
]
fn
check_non_deterministic_enabled
(
&
self
)
-
>
OperatorValidatorResult
<
(
)
>
{
Ok
(
(
)
)
}
fn
check_threads_enabled
(
&
self
)
-
>
OperatorValidatorResult
<
(
)
>
{
if
!
self
.
features
.
threads
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
threads
support
is
not
enabled
"
)
)
;
}
Ok
(
(
)
)
}
fn
check_reference_types_enabled
(
&
self
)
-
>
OperatorValidatorResult
<
(
)
>
{
if
!
self
.
features
.
reference_types
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
reference
types
support
is
not
enabled
"
)
)
;
}
Ok
(
(
)
)
}
fn
check_simd_enabled
(
&
self
)
-
>
OperatorValidatorResult
<
(
)
>
{
if
!
self
.
features
.
simd
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
SIMD
support
is
not
enabled
"
)
)
;
}
Ok
(
(
)
)
}
fn
check_relaxed_simd_enabled
(
&
self
)
-
>
OperatorValidatorResult
<
(
)
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
check_simd_enabled
(
)
?
;
if
!
self
.
features
.
relaxed_simd
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
Relaxed
SIMD
support
is
not
enabled
"
)
)
;
}
Ok
(
(
)
)
}
fn
check_exceptions_enabled
(
&
self
)
-
>
OperatorValidatorResult
<
(
)
>
{
if
!
self
.
features
.
exceptions
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
Exceptions
support
is
not
enabled
"
)
)
;
}
Ok
(
(
)
)
}
fn
check_bulk_memory_enabled
(
&
self
)
-
>
OperatorValidatorResult
<
(
)
>
{
if
!
self
.
features
.
bulk_memory
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
bulk
memory
support
is
not
enabled
"
)
)
;
}
Ok
(
(
)
)
}
fn
check_shared_memarg_wo_align
(
&
self
memarg
:
MemoryImmediate
resources
:
impl
WasmModuleResources
)
-
>
OperatorValidatorResult
<
ValType
>
{
self
.
check_memory_index
(
memarg
.
memory
resources
)
}
fn
check_simd_lane_index
(
&
self
index
:
SIMDLaneIndex
max
:
u8
)
-
>
OperatorValidatorResult
<
(
)
>
{
if
index
>
=
max
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
SIMD
index
out
of
bounds
"
)
)
;
}
Ok
(
(
)
)
}
fn
check_block_type
(
&
self
ty
:
BlockType
resources
:
impl
WasmModuleResources
)
-
>
OperatorValidatorResult
<
(
)
>
{
match
ty
{
BlockType
:
:
Empty
|
BlockType
:
:
Type
(
ValType
:
:
I32
)
|
BlockType
:
:
Type
(
ValType
:
:
I64
)
|
BlockType
:
:
Type
(
ValType
:
:
F32
)
|
BlockType
:
:
Type
(
ValType
:
:
F64
)
=
>
Ok
(
(
)
)
BlockType
:
:
Type
(
ValType
:
:
ExternRef
)
|
BlockType
:
:
Type
(
ValType
:
:
FuncRef
)
=
>
{
self
.
check_reference_types_enabled
(
)
}
BlockType
:
:
Type
(
ValType
:
:
V128
)
=
>
self
.
check_simd_enabled
(
)
BlockType
:
:
FuncType
(
idx
)
=
>
{
if
!
self
.
features
.
multi_value
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
blocks
loops
and
ifs
may
only
produce
a
resulttype
\
when
multi
-
value
is
not
enabled
"
)
)
;
}
func_type_at
(
&
resources
idx
)
?
;
Ok
(
(
)
)
}
}
}
fn
check_call
(
&
mut
self
function_index
:
u32
resources
:
&
impl
WasmModuleResources
)
-
>
OperatorValidatorResult
<
(
)
>
{
let
ty
=
match
resources
.
type_of_function
(
function_index
)
{
Some
(
i
)
=
>
i
None
=
>
{
bail_op_err
!
(
"
unknown
function
{
}
:
function
index
out
of
bounds
"
function_index
)
;
}
}
;
for
ty
in
ty
.
inputs
(
)
.
rev
(
)
{
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
for
ty
in
ty
.
outputs
(
)
{
self
.
push_operand
(
ty
)
?
;
}
Ok
(
(
)
)
}
fn
check_call_indirect
(
&
mut
self
index
:
u32
table_index
:
u32
resources
:
&
impl
WasmModuleResources
)
-
>
OperatorValidatorResult
<
(
)
>
{
match
resources
.
table_at
(
table_index
)
{
None
=
>
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
unknown
table
:
table
index
out
of
bounds
"
)
)
;
}
Some
(
tab
)
=
>
{
if
tab
.
element_type
!
=
ValType
:
:
FuncRef
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
indirect
calls
must
go
through
a
table
of
funcref
"
)
)
;
}
}
}
let
ty
=
func_type_at
(
&
resources
index
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
for
ty
in
ty
.
inputs
(
)
.
rev
(
)
{
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
for
ty
in
ty
.
outputs
(
)
{
self
.
push_operand
(
ty
)
?
;
}
Ok
(
(
)
)
}
fn
check_return
(
&
mut
self
resources
:
&
impl
WasmModuleResources
)
-
>
OperatorValidatorResult
<
(
)
>
{
for
ty
in
results
(
self
.
control
[
0
]
.
block_type
resources
)
?
.
rev
(
)
{
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
self
.
unreachable
(
)
;
Ok
(
(
)
)
}
pub
fn
process_operator
(
&
mut
self
operator
:
&
Operator
resources
:
&
impl
WasmModuleResources
)
-
>
OperatorValidatorResult
<
(
)
>
{
if
self
.
control
.
is_empty
(
)
{
bail_op_err
!
(
"
operators
remaining
after
end
of
function
"
)
;
}
match
*
operator
{
Operator
:
:
Nop
=
>
{
}
Operator
:
:
Unreachable
=
>
self
.
unreachable
(
)
Operator
:
:
Block
{
ty
}
=
>
{
self
.
check_block_type
(
ty
resources
)
?
;
for
ty
in
params
(
ty
resources
)
?
.
rev
(
)
{
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
self
.
push_ctrl
(
FrameKind
:
:
Block
ty
resources
)
?
;
}
Operator
:
:
Loop
{
ty
}
=
>
{
self
.
check_block_type
(
ty
resources
)
?
;
for
ty
in
params
(
ty
resources
)
?
.
rev
(
)
{
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
self
.
push_ctrl
(
FrameKind
:
:
Loop
ty
resources
)
?
;
}
Operator
:
:
If
{
ty
}
=
>
{
self
.
check_block_type
(
ty
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
for
ty
in
params
(
ty
resources
)
?
.
rev
(
)
{
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
self
.
push_ctrl
(
FrameKind
:
:
If
ty
resources
)
?
;
}
Operator
:
:
Else
=
>
{
let
frame
=
self
.
pop_ctrl
(
resources
)
?
;
if
frame
.
kind
!
=
FrameKind
:
:
If
{
bail_op_err
!
(
"
else
found
outside
of
an
if
block
"
)
;
}
self
.
push_ctrl
(
FrameKind
:
:
Else
frame
.
block_type
resources
)
?
}
Operator
:
:
Try
{
ty
}
=
>
{
self
.
check_exceptions_enabled
(
)
?
;
self
.
check_block_type
(
ty
resources
)
?
;
for
ty
in
params
(
ty
resources
)
?
.
rev
(
)
{
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
self
.
push_ctrl
(
FrameKind
:
:
Try
ty
resources
)
?
;
}
Operator
:
:
Catch
{
index
}
=
>
{
self
.
check_exceptions_enabled
(
)
?
;
let
frame
=
self
.
pop_ctrl
(
resources
)
?
;
if
frame
.
kind
!
=
FrameKind
:
:
Try
&
&
frame
.
kind
!
=
FrameKind
:
:
Catch
{
bail_op_err
!
(
"
catch
found
outside
of
an
try
block
"
)
;
}
self
.
control
.
push
(
Frame
{
kind
:
FrameKind
:
:
Catch
block_type
:
frame
.
block_type
height
:
self
.
operands
.
len
(
)
unreachable
:
false
}
)
;
let
ty
=
tag_at
(
&
resources
index
)
?
;
for
ty
in
ty
.
inputs
(
)
{
self
.
push_operand
(
ty
)
?
;
}
}
Operator
:
:
Throw
{
index
}
=
>
{
self
.
check_exceptions_enabled
(
)
?
;
let
ty
=
tag_at
(
&
resources
index
)
?
;
for
ty
in
ty
.
inputs
(
)
.
rev
(
)
{
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
if
ty
.
outputs
(
)
.
len
(
)
>
0
{
bail_op_err
!
(
"
result
type
expected
to
be
empty
for
exception
"
)
;
}
self
.
unreachable
(
)
;
}
Operator
:
:
Rethrow
{
relative_depth
}
=
>
{
self
.
check_exceptions_enabled
(
)
?
;
let
(
_
kind
)
=
self
.
jump
(
relative_depth
)
?
;
if
kind
!
=
FrameKind
:
:
Catch
&
&
kind
!
=
FrameKind
:
:
CatchAll
{
bail_op_err
!
(
"
invalid
rethrow
label
:
target
was
not
a
catch
block
"
)
;
}
self
.
unreachable
(
)
;
}
Operator
:
:
Delegate
{
relative_depth
}
=
>
{
self
.
check_exceptions_enabled
(
)
?
;
let
frame
=
self
.
pop_ctrl
(
resources
)
?
;
if
frame
.
kind
!
=
FrameKind
:
:
Try
{
bail_op_err
!
(
"
delegate
found
outside
of
an
try
block
"
)
;
}
let
_
=
self
.
jump
(
relative_depth
)
?
;
for
ty
in
results
(
frame
.
block_type
resources
)
?
{
self
.
push_operand
(
ty
)
?
;
}
}
Operator
:
:
CatchAll
=
>
{
self
.
check_exceptions_enabled
(
)
?
;
let
frame
=
self
.
pop_ctrl
(
resources
)
?
;
if
frame
.
kind
=
=
FrameKind
:
:
CatchAll
{
bail_op_err
!
(
"
only
one
catch_all
allowed
per
try
block
"
)
;
}
else
if
frame
.
kind
!
=
FrameKind
:
:
Try
&
&
frame
.
kind
!
=
FrameKind
:
:
Catch
{
bail_op_err
!
(
"
catch_all
found
outside
of
a
try
block
"
)
;
}
self
.
control
.
push
(
Frame
{
kind
:
FrameKind
:
:
CatchAll
block_type
:
frame
.
block_type
height
:
self
.
operands
.
len
(
)
unreachable
:
false
}
)
;
}
Operator
:
:
End
=
>
{
let
mut
frame
=
self
.
pop_ctrl
(
resources
)
?
;
if
frame
.
kind
=
=
FrameKind
:
:
If
{
self
.
push_ctrl
(
FrameKind
:
:
Else
frame
.
block_type
resources
)
?
;
frame
=
self
.
pop_ctrl
(
resources
)
?
;
}
for
ty
in
results
(
frame
.
block_type
resources
)
?
{
self
.
push_operand
(
ty
)
?
;
}
}
Operator
:
:
Br
{
relative_depth
}
=
>
{
let
(
ty
kind
)
=
self
.
jump
(
relative_depth
)
?
;
for
ty
in
label_types
(
ty
resources
kind
)
?
.
rev
(
)
{
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
self
.
unreachable
(
)
;
}
Operator
:
:
BrIf
{
relative_depth
}
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
let
(
ty
kind
)
=
self
.
jump
(
relative_depth
)
?
;
for
ty
in
label_types
(
ty
resources
kind
)
?
.
rev
(
)
{
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
for
ty
in
label_types
(
ty
resources
kind
)
?
{
self
.
push_operand
(
ty
)
?
;
}
}
Operator
:
:
BrTable
{
ref
table
}
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
let
default
=
self
.
jump
(
table
.
default
(
)
)
?
;
let
default_types
=
label_types
(
default
.
0
resources
default
.
1
)
?
;
for
element
in
table
.
targets
(
)
{
let
relative_depth
=
element
.
map_err
(
|
mut
e
|
{
e
.
inner
.
offset
=
usize
:
:
max_value
(
)
;
OperatorValidatorError
(
e
)
}
)
?
;
let
block
=
self
.
jump
(
relative_depth
)
?
;
let
tys
=
label_types
(
block
.
0
resources
block
.
1
)
?
;
if
tys
.
len
(
)
!
=
default_types
.
len
(
)
{
bail_op_err
!
(
"
type
mismatch
:
br_table
target
labels
have
different
number
of
types
"
)
;
}
debug_assert
!
(
self
.
br_table_tmp
.
is_empty
(
)
)
;
for
ty
in
tys
.
rev
(
)
{
let
ty
=
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
br_table_tmp
.
push
(
ty
)
;
}
self
.
operands
.
extend
(
self
.
br_table_tmp
.
drain
(
.
.
)
.
rev
(
)
)
;
}
for
ty
in
default_types
.
rev
(
)
{
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
self
.
unreachable
(
)
;
}
Operator
:
:
Return
=
>
self
.
check_return
(
resources
)
?
Operator
:
:
Call
{
function_index
}
=
>
self
.
check_call
(
function_index
resources
)
?
Operator
:
:
ReturnCall
{
function_index
}
=
>
{
if
!
self
.
features
.
tail_call
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
tail
calls
support
is
not
enabled
"
)
)
;
}
self
.
check_call
(
function_index
resources
)
?
;
self
.
check_return
(
resources
)
?
;
}
Operator
:
:
CallIndirect
{
index
table_index
table_byte
}
=
>
{
if
table_byte
!
=
0
&
&
!
self
.
features
.
reference_types
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
reference
-
types
not
enabled
:
zero
byte
expected
"
)
)
;
}
self
.
check_call_indirect
(
index
table_index
resources
)
?
}
Operator
:
:
ReturnCallIndirect
{
index
table_index
}
=
>
{
if
!
self
.
features
.
tail_call
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
tail
calls
support
is
not
enabled
"
)
)
;
}
self
.
check_call_indirect
(
index
table_index
resources
)
?
;
self
.
check_return
(
resources
)
?
;
}
Operator
:
:
Drop
=
>
{
self
.
pop_operand
(
None
)
?
;
}
Operator
:
:
Select
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
let
ty1
=
self
.
pop_operand
(
None
)
?
;
let
ty2
=
self
.
pop_operand
(
None
)
?
;
fn
is_num
(
ty
:
Option
<
ValType
>
)
-
>
bool
{
matches
!
(
ty
Some
(
ValType
:
:
I32
)
|
Some
(
ValType
:
:
I64
)
|
Some
(
ValType
:
:
F32
)
|
Some
(
ValType
:
:
F64
)
|
Some
(
ValType
:
:
V128
)
|
None
)
}
if
!
is_num
(
ty1
)
|
|
!
is_num
(
ty2
)
{
bail_op_err
!
(
"
type
mismatch
:
select
only
takes
integral
types
"
)
}
if
ty1
!
=
ty2
&
&
ty1
!
=
None
&
&
ty2
!
=
None
{
bail_op_err
!
(
"
type
mismatch
:
select
operands
have
different
types
"
)
}
self
.
operands
.
push
(
ty1
.
or
(
ty2
)
)
;
}
Operator
:
:
TypedSelect
{
ty
}
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ty
)
?
;
}
Operator
:
:
LocalGet
{
local_index
}
=
>
{
let
ty
=
self
.
local
(
local_index
)
?
;
self
.
push_operand
(
ty
)
?
;
}
Operator
:
:
LocalSet
{
local_index
}
=
>
{
let
ty
=
self
.
local
(
local_index
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
LocalTee
{
local_index
}
=
>
{
let
ty
=
self
.
local
(
local_index
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ty
)
?
;
}
Operator
:
:
GlobalGet
{
global_index
}
=
>
{
if
let
Some
(
ty
)
=
resources
.
global_at
(
global_index
)
{
self
.
push_operand
(
ty
.
content_type
)
?
;
}
else
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
unknown
global
:
global
index
out
of
bounds
"
)
)
;
}
;
}
Operator
:
:
GlobalSet
{
global_index
}
=
>
{
if
let
Some
(
ty
)
=
resources
.
global_at
(
global_index
)
{
if
!
ty
.
mutable
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
global
is
immutable
:
cannot
modify
it
with
global
.
set
"
)
)
;
}
self
.
pop_operand
(
Some
(
ty
.
content_type
)
)
?
;
}
else
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
unknown
global
:
global
index
out
of
bounds
"
)
)
;
}
;
}
Operator
:
:
I32Load
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
2
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I64Load
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
3
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
F32Load
{
memarg
}
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
let
ty
=
self
.
check_memarg
(
memarg
2
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
F32
)
?
;
}
Operator
:
:
F64Load
{
memarg
}
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
let
ty
=
self
.
check_memarg
(
memarg
3
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
F64
)
?
;
}
Operator
:
:
I32Load8S
{
memarg
}
|
Operator
:
:
I32Load8U
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
0
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I32Load16S
{
memarg
}
|
Operator
:
:
I32Load16U
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
1
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I64Load8S
{
memarg
}
|
Operator
:
:
I64Load8U
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
0
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I64Load16S
{
memarg
}
|
Operator
:
:
I64Load16U
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
1
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I64Load32S
{
memarg
}
|
Operator
:
:
I64Load32U
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
2
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I32Store
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
2
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
I64Store
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
3
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
F32Store
{
memarg
}
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
let
ty
=
self
.
check_memarg
(
memarg
2
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
F64Store
{
memarg
}
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
let
ty
=
self
.
check_memarg
(
memarg
3
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
I32Store8
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
0
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
I32Store16
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
1
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
I64Store8
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
0
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
I64Store16
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
1
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
I64Store32
{
memarg
}
=
>
{
let
ty
=
self
.
check_memarg
(
memarg
2
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
MemorySize
{
mem
mem_byte
}
=
>
{
if
mem_byte
!
=
0
&
&
!
self
.
features
.
multi_memory
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
multi
-
memory
not
enabled
:
zero
byte
expected
"
)
)
;
}
let
index_ty
=
self
.
check_memory_index
(
mem
resources
)
?
;
self
.
push_operand
(
index_ty
)
?
;
}
Operator
:
:
MemoryGrow
{
mem
mem_byte
}
=
>
{
if
mem_byte
!
=
0
&
&
!
self
.
features
.
multi_memory
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
multi
-
memory
not
enabled
:
zero
byte
expected
"
)
)
;
}
let
index_ty
=
self
.
check_memory_index
(
mem
resources
)
?
;
self
.
pop_operand
(
Some
(
index_ty
)
)
?
;
self
.
push_operand
(
index_ty
)
?
;
}
Operator
:
:
I32Const
{
.
.
}
=
>
self
.
push_operand
(
ValType
:
:
I32
)
?
Operator
:
:
I64Const
{
.
.
}
=
>
self
.
push_operand
(
ValType
:
:
I64
)
?
Operator
:
:
F32Const
{
.
.
}
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
push_operand
(
ValType
:
:
F32
)
?
;
}
Operator
:
:
F64Const
{
.
.
}
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
push_operand
(
ValType
:
:
F64
)
?
;
}
Operator
:
:
I32Eqz
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I32Eq
|
Operator
:
:
I32Ne
|
Operator
:
:
I32LtS
|
Operator
:
:
I32LtU
|
Operator
:
:
I32GtS
|
Operator
:
:
I32GtU
|
Operator
:
:
I32LeS
|
Operator
:
:
I32LeU
|
Operator
:
:
I32GeS
|
Operator
:
:
I32GeU
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I64Eqz
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I64Eq
|
Operator
:
:
I64Ne
|
Operator
:
:
I64LtS
|
Operator
:
:
I64LtU
|
Operator
:
:
I64GtS
|
Operator
:
:
I64GtU
|
Operator
:
:
I64LeS
|
Operator
:
:
I64LeU
|
Operator
:
:
I64GeS
|
Operator
:
:
I64GeU
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
F32Eq
|
Operator
:
:
F32Ne
|
Operator
:
:
F32Lt
|
Operator
:
:
F32Gt
|
Operator
:
:
F32Le
|
Operator
:
:
F32Ge
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
F64Eq
|
Operator
:
:
F64Ne
|
Operator
:
:
F64Lt
|
Operator
:
:
F64Gt
|
Operator
:
:
F64Le
|
Operator
:
:
F64Ge
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I32Clz
|
Operator
:
:
I32Ctz
|
Operator
:
:
I32Popcnt
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I32Add
|
Operator
:
:
I32Sub
|
Operator
:
:
I32Mul
|
Operator
:
:
I32DivS
|
Operator
:
:
I32DivU
|
Operator
:
:
I32RemS
|
Operator
:
:
I32RemU
|
Operator
:
:
I32And
|
Operator
:
:
I32Or
|
Operator
:
:
I32Xor
|
Operator
:
:
I32Shl
|
Operator
:
:
I32ShrS
|
Operator
:
:
I32ShrU
|
Operator
:
:
I32Rotl
|
Operator
:
:
I32Rotr
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I64Clz
|
Operator
:
:
I64Ctz
|
Operator
:
:
I64Popcnt
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I64Add
|
Operator
:
:
I64Sub
|
Operator
:
:
I64Mul
|
Operator
:
:
I64DivS
|
Operator
:
:
I64DivU
|
Operator
:
:
I64RemS
|
Operator
:
:
I64RemU
|
Operator
:
:
I64And
|
Operator
:
:
I64Or
|
Operator
:
:
I64Xor
|
Operator
:
:
I64Shl
|
Operator
:
:
I64ShrS
|
Operator
:
:
I64ShrU
|
Operator
:
:
I64Rotl
|
Operator
:
:
I64Rotr
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
F32Abs
|
Operator
:
:
F32Neg
|
Operator
:
:
F32Ceil
|
Operator
:
:
F32Floor
|
Operator
:
:
F32Trunc
|
Operator
:
:
F32Nearest
|
Operator
:
:
F32Sqrt
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
push_operand
(
ValType
:
:
F32
)
?
;
}
Operator
:
:
F32Add
|
Operator
:
:
F32Sub
|
Operator
:
:
F32Mul
|
Operator
:
:
F32Div
|
Operator
:
:
F32Min
|
Operator
:
:
F32Max
|
Operator
:
:
F32Copysign
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
push_operand
(
ValType
:
:
F32
)
?
;
}
Operator
:
:
F64Abs
|
Operator
:
:
F64Neg
|
Operator
:
:
F64Ceil
|
Operator
:
:
F64Floor
|
Operator
:
:
F64Trunc
|
Operator
:
:
F64Nearest
|
Operator
:
:
F64Sqrt
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
push_operand
(
ValType
:
:
F64
)
?
;
}
Operator
:
:
F64Add
|
Operator
:
:
F64Sub
|
Operator
:
:
F64Mul
|
Operator
:
:
F64Div
|
Operator
:
:
F64Min
|
Operator
:
:
F64Max
|
Operator
:
:
F64Copysign
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
push_operand
(
ValType
:
:
F64
)
?
;
}
Operator
:
:
I32WrapI64
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I32TruncF32S
|
Operator
:
:
I32TruncF32U
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I32TruncF64S
|
Operator
:
:
I32TruncF64U
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I64ExtendI32S
|
Operator
:
:
I64ExtendI32U
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I64TruncF32S
|
Operator
:
:
I64TruncF32U
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I64TruncF64S
|
Operator
:
:
I64TruncF64U
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
F32ConvertI32S
|
Operator
:
:
F32ConvertI32U
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
push_operand
(
ValType
:
:
F32
)
?
;
}
Operator
:
:
F32ConvertI64S
|
Operator
:
:
F32ConvertI64U
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
push_operand
(
ValType
:
:
F32
)
?
;
}
Operator
:
:
F32DemoteF64
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
push_operand
(
ValType
:
:
F32
)
?
;
}
Operator
:
:
F64ConvertI32S
|
Operator
:
:
F64ConvertI32U
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
push_operand
(
ValType
:
:
F64
)
?
;
}
Operator
:
:
F64ConvertI64S
|
Operator
:
:
F64ConvertI64U
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
push_operand
(
ValType
:
:
F64
)
?
;
}
Operator
:
:
F64PromoteF32
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
push_operand
(
ValType
:
:
F64
)
?
;
}
Operator
:
:
I32ReinterpretF32
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I64ReinterpretF64
=
>
{
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
F32ReinterpretI32
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
push_operand
(
ValType
:
:
F32
)
?
;
}
Operator
:
:
F64ReinterpretI64
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
push_operand
(
ValType
:
:
F64
)
?
;
}
Operator
:
:
I32TruncSatF32S
|
Operator
:
:
I32TruncSatF32U
=
>
{
if
!
self
.
features
.
saturating_float_to_int
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
saturating
float
to
int
conversions
support
is
not
enabled
"
)
)
;
}
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I32TruncSatF64S
|
Operator
:
:
I32TruncSatF64U
=
>
{
if
!
self
.
features
.
saturating_float_to_int
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
saturating
float
to
int
conversions
support
is
not
enabled
"
)
)
;
}
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I64TruncSatF32S
|
Operator
:
:
I64TruncSatF32U
=
>
{
if
!
self
.
features
.
saturating_float_to_int
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
saturating
float
to
int
conversions
support
is
not
enabled
"
)
)
;
}
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I64TruncSatF64S
|
Operator
:
:
I64TruncSatF64U
=
>
{
if
!
self
.
features
.
saturating_float_to_int
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
saturating
float
to
int
conversions
support
is
not
enabled
"
)
)
;
}
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I32Extend16S
|
Operator
:
:
I32Extend8S
=
>
{
if
!
self
.
features
.
sign_extension
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
sign
extension
operations
support
is
not
enabled
"
)
)
;
}
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I64Extend32S
|
Operator
:
:
I64Extend16S
|
Operator
:
:
I64Extend8S
=
>
{
if
!
self
.
features
.
sign_extension
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
sign
extension
operations
support
is
not
enabled
"
)
)
;
}
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I32AtomicLoad
{
memarg
}
|
Operator
:
:
I32AtomicLoad16U
{
memarg
}
|
Operator
:
:
I32AtomicLoad8U
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I64AtomicLoad
{
memarg
}
|
Operator
:
:
I64AtomicLoad32U
{
memarg
}
|
Operator
:
:
I64AtomicLoad16U
{
memarg
}
|
Operator
:
:
I64AtomicLoad8U
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I32AtomicStore
{
memarg
}
|
Operator
:
:
I32AtomicStore16
{
memarg
}
|
Operator
:
:
I32AtomicStore8
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
I64AtomicStore
{
memarg
}
|
Operator
:
:
I64AtomicStore32
{
memarg
}
|
Operator
:
:
I64AtomicStore16
{
memarg
}
|
Operator
:
:
I64AtomicStore8
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
I32AtomicRmwAdd
{
memarg
}
|
Operator
:
:
I32AtomicRmwSub
{
memarg
}
|
Operator
:
:
I32AtomicRmwAnd
{
memarg
}
|
Operator
:
:
I32AtomicRmwOr
{
memarg
}
|
Operator
:
:
I32AtomicRmwXor
{
memarg
}
|
Operator
:
:
I32AtomicRmw16AddU
{
memarg
}
|
Operator
:
:
I32AtomicRmw16SubU
{
memarg
}
|
Operator
:
:
I32AtomicRmw16AndU
{
memarg
}
|
Operator
:
:
I32AtomicRmw16OrU
{
memarg
}
|
Operator
:
:
I32AtomicRmw16XorU
{
memarg
}
|
Operator
:
:
I32AtomicRmw8AddU
{
memarg
}
|
Operator
:
:
I32AtomicRmw8SubU
{
memarg
}
|
Operator
:
:
I32AtomicRmw8AndU
{
memarg
}
|
Operator
:
:
I32AtomicRmw8OrU
{
memarg
}
|
Operator
:
:
I32AtomicRmw8XorU
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I64AtomicRmwAdd
{
memarg
}
|
Operator
:
:
I64AtomicRmwSub
{
memarg
}
|
Operator
:
:
I64AtomicRmwAnd
{
memarg
}
|
Operator
:
:
I64AtomicRmwOr
{
memarg
}
|
Operator
:
:
I64AtomicRmwXor
{
memarg
}
|
Operator
:
:
I64AtomicRmw32AddU
{
memarg
}
|
Operator
:
:
I64AtomicRmw32SubU
{
memarg
}
|
Operator
:
:
I64AtomicRmw32AndU
{
memarg
}
|
Operator
:
:
I64AtomicRmw32OrU
{
memarg
}
|
Operator
:
:
I64AtomicRmw32XorU
{
memarg
}
|
Operator
:
:
I64AtomicRmw16AddU
{
memarg
}
|
Operator
:
:
I64AtomicRmw16SubU
{
memarg
}
|
Operator
:
:
I64AtomicRmw16AndU
{
memarg
}
|
Operator
:
:
I64AtomicRmw16OrU
{
memarg
}
|
Operator
:
:
I64AtomicRmw16XorU
{
memarg
}
|
Operator
:
:
I64AtomicRmw8AddU
{
memarg
}
|
Operator
:
:
I64AtomicRmw8SubU
{
memarg
}
|
Operator
:
:
I64AtomicRmw8AndU
{
memarg
}
|
Operator
:
:
I64AtomicRmw8OrU
{
memarg
}
|
Operator
:
:
I64AtomicRmw8XorU
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I32AtomicRmwXchg
{
memarg
}
|
Operator
:
:
I32AtomicRmw16XchgU
{
memarg
}
|
Operator
:
:
I32AtomicRmw8XchgU
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I32AtomicRmwCmpxchg
{
memarg
}
|
Operator
:
:
I32AtomicRmw16CmpxchgU
{
memarg
}
|
Operator
:
:
I32AtomicRmw8CmpxchgU
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I64AtomicRmwXchg
{
memarg
}
|
Operator
:
:
I64AtomicRmw32XchgU
{
memarg
}
|
Operator
:
:
I64AtomicRmw16XchgU
{
memarg
}
|
Operator
:
:
I64AtomicRmw8XchgU
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I64AtomicRmwCmpxchg
{
memarg
}
|
Operator
:
:
I64AtomicRmw32CmpxchgU
{
memarg
}
|
Operator
:
:
I64AtomicRmw16CmpxchgU
{
memarg
}
|
Operator
:
:
I64AtomicRmw8CmpxchgU
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
MemoryAtomicNotify
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
MemoryAtomicWait32
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
MemoryAtomicWait64
{
memarg
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
let
ty
=
self
.
check_shared_memarg_wo_align
(
memarg
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
AtomicFence
{
ref
flags
}
=
>
{
self
.
check_threads_enabled
(
)
?
;
if
*
flags
!
=
0
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
non
-
zero
flags
for
fence
not
supported
yet
"
)
)
;
}
}
Operator
:
:
RefNull
{
ty
}
=
>
{
self
.
check_reference_types_enabled
(
)
?
;
match
ty
{
ValType
:
:
FuncRef
|
ValType
:
:
ExternRef
=
>
{
}
_
=
>
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
invalid
reference
type
in
ref
.
null
"
)
)
}
}
self
.
push_operand
(
ty
)
?
;
}
Operator
:
:
RefIsNull
=
>
{
self
.
check_reference_types_enabled
(
)
?
;
match
self
.
pop_operand
(
None
)
?
{
None
|
Some
(
ValType
:
:
FuncRef
)
|
Some
(
ValType
:
:
ExternRef
)
=
>
{
}
_
=
>
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
type
mismatch
:
invalid
reference
type
in
ref
.
is_null
"
)
)
}
}
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
RefFunc
{
function_index
}
=
>
{
self
.
check_reference_types_enabled
(
)
?
;
if
resources
.
type_of_function
(
function_index
)
.
is_none
(
)
{
return
Err
(
OperatorValidatorError
:
:
new
(
format
!
(
"
unknown
function
{
}
:
function
index
out
of
bounds
"
function_index
)
)
)
;
}
if
!
resources
.
is_function_referenced
(
function_index
)
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
undeclared
function
reference
"
)
)
;
}
self
.
push_operand
(
ValType
:
:
FuncRef
)
?
;
}
Operator
:
:
V128Load
{
memarg
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
ty
=
self
.
check_memarg
(
memarg
4
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128Store
{
memarg
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
ty
=
self
.
check_memarg
(
memarg
4
resources
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
V128Const
{
.
.
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
I8x16Splat
|
Operator
:
:
I16x8Splat
|
Operator
:
:
I32x4Splat
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
I64x2Splat
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
F32x4Splat
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
F64x2Splat
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
I8x16ExtractLaneS
{
lane
}
|
Operator
:
:
I8x16ExtractLaneU
{
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
check_simd_lane_index
(
lane
16
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I16x8ExtractLaneS
{
lane
}
|
Operator
:
:
I16x8ExtractLaneU
{
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
check_simd_lane_index
(
lane
8
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I32x4ExtractLane
{
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
check_simd_lane_index
(
lane
4
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I8x16ReplaceLane
{
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
check_simd_lane_index
(
lane
16
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
I16x8ReplaceLane
{
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
check_simd_lane_index
(
lane
8
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
I32x4ReplaceLane
{
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
check_simd_lane_index
(
lane
4
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
I64x2ExtractLane
{
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
check_simd_lane_index
(
lane
2
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
I64
)
?
;
}
Operator
:
:
I64x2ReplaceLane
{
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
check_simd_lane_index
(
lane
2
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I64
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
F32x4ExtractLane
{
lane
}
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
check_simd_enabled
(
)
?
;
self
.
check_simd_lane_index
(
lane
4
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
F32
)
?
;
}
Operator
:
:
F32x4ReplaceLane
{
lane
}
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
check_simd_enabled
(
)
?
;
self
.
check_simd_lane_index
(
lane
4
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
F64x2ExtractLane
{
lane
}
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
check_simd_enabled
(
)
?
;
self
.
check_simd_lane_index
(
lane
2
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
F64
)
?
;
}
Operator
:
:
F64x2ReplaceLane
{
lane
}
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
check_simd_enabled
(
)
?
;
self
.
check_simd_lane_index
(
lane
2
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
F64
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
F32x4Eq
|
Operator
:
:
F32x4Ne
|
Operator
:
:
F32x4Lt
|
Operator
:
:
F32x4Gt
|
Operator
:
:
F32x4Le
|
Operator
:
:
F32x4Ge
|
Operator
:
:
F64x2Eq
|
Operator
:
:
F64x2Ne
|
Operator
:
:
F64x2Lt
|
Operator
:
:
F64x2Gt
|
Operator
:
:
F64x2Le
|
Operator
:
:
F64x2Ge
|
Operator
:
:
F32x4Add
|
Operator
:
:
F32x4Sub
|
Operator
:
:
F32x4Mul
|
Operator
:
:
F32x4Div
|
Operator
:
:
F32x4Min
|
Operator
:
:
F32x4Max
|
Operator
:
:
F32x4PMin
|
Operator
:
:
F32x4PMax
|
Operator
:
:
F64x2Add
|
Operator
:
:
F64x2Sub
|
Operator
:
:
F64x2Mul
|
Operator
:
:
F64x2Div
|
Operator
:
:
F64x2Min
|
Operator
:
:
F64x2Max
|
Operator
:
:
F64x2PMin
|
Operator
:
:
F64x2PMax
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
F32x4RelaxedMin
|
Operator
:
:
F32x4RelaxedMax
|
Operator
:
:
F64x2RelaxedMin
|
Operator
:
:
F64x2RelaxedMax
=
>
{
self
.
check_relaxed_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
I8x16Eq
|
Operator
:
:
I8x16Ne
|
Operator
:
:
I8x16LtS
|
Operator
:
:
I8x16LtU
|
Operator
:
:
I8x16GtS
|
Operator
:
:
I8x16GtU
|
Operator
:
:
I8x16LeS
|
Operator
:
:
I8x16LeU
|
Operator
:
:
I8x16GeS
|
Operator
:
:
I8x16GeU
|
Operator
:
:
I16x8Eq
|
Operator
:
:
I16x8Ne
|
Operator
:
:
I16x8LtS
|
Operator
:
:
I16x8LtU
|
Operator
:
:
I16x8GtS
|
Operator
:
:
I16x8GtU
|
Operator
:
:
I16x8LeS
|
Operator
:
:
I16x8LeU
|
Operator
:
:
I16x8GeS
|
Operator
:
:
I16x8GeU
|
Operator
:
:
I32x4Eq
|
Operator
:
:
I32x4Ne
|
Operator
:
:
I32x4LtS
|
Operator
:
:
I32x4LtU
|
Operator
:
:
I32x4GtS
|
Operator
:
:
I32x4GtU
|
Operator
:
:
I32x4LeS
|
Operator
:
:
I32x4LeU
|
Operator
:
:
I32x4GeS
|
Operator
:
:
I32x4GeU
|
Operator
:
:
I64x2Eq
|
Operator
:
:
I64x2Ne
|
Operator
:
:
I64x2LtS
|
Operator
:
:
I64x2GtS
|
Operator
:
:
I64x2LeS
|
Operator
:
:
I64x2GeS
|
Operator
:
:
V128And
|
Operator
:
:
V128AndNot
|
Operator
:
:
V128Or
|
Operator
:
:
V128Xor
|
Operator
:
:
I8x16Add
|
Operator
:
:
I8x16AddSatS
|
Operator
:
:
I8x16AddSatU
|
Operator
:
:
I8x16Sub
|
Operator
:
:
I8x16SubSatS
|
Operator
:
:
I8x16SubSatU
|
Operator
:
:
I8x16MinS
|
Operator
:
:
I8x16MinU
|
Operator
:
:
I8x16MaxS
|
Operator
:
:
I8x16MaxU
|
Operator
:
:
I16x8Add
|
Operator
:
:
I16x8AddSatS
|
Operator
:
:
I16x8AddSatU
|
Operator
:
:
I16x8Sub
|
Operator
:
:
I16x8SubSatS
|
Operator
:
:
I16x8SubSatU
|
Operator
:
:
I16x8Mul
|
Operator
:
:
I16x8MinS
|
Operator
:
:
I16x8MinU
|
Operator
:
:
I16x8MaxS
|
Operator
:
:
I16x8MaxU
|
Operator
:
:
I32x4Add
|
Operator
:
:
I32x4Sub
|
Operator
:
:
I32x4Mul
|
Operator
:
:
I32x4MinS
|
Operator
:
:
I32x4MinU
|
Operator
:
:
I32x4MaxS
|
Operator
:
:
I32x4MaxU
|
Operator
:
:
I32x4DotI16x8S
|
Operator
:
:
I64x2Add
|
Operator
:
:
I64x2Sub
|
Operator
:
:
I64x2Mul
|
Operator
:
:
I8x16RoundingAverageU
|
Operator
:
:
I16x8RoundingAverageU
|
Operator
:
:
I8x16NarrowI16x8S
|
Operator
:
:
I8x16NarrowI16x8U
|
Operator
:
:
I16x8NarrowI32x4S
|
Operator
:
:
I16x8NarrowI32x4U
|
Operator
:
:
I16x8ExtMulLowI8x16S
|
Operator
:
:
I16x8ExtMulHighI8x16S
|
Operator
:
:
I16x8ExtMulLowI8x16U
|
Operator
:
:
I16x8ExtMulHighI8x16U
|
Operator
:
:
I32x4ExtMulLowI16x8S
|
Operator
:
:
I32x4ExtMulHighI16x8S
|
Operator
:
:
I32x4ExtMulLowI16x8U
|
Operator
:
:
I32x4ExtMulHighI16x8U
|
Operator
:
:
I64x2ExtMulLowI32x4S
|
Operator
:
:
I64x2ExtMulHighI32x4S
|
Operator
:
:
I64x2ExtMulLowI32x4U
|
Operator
:
:
I64x2ExtMulHighI32x4U
|
Operator
:
:
I16x8Q15MulrSatS
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
F32x4Ceil
|
Operator
:
:
F32x4Floor
|
Operator
:
:
F32x4Trunc
|
Operator
:
:
F32x4Nearest
|
Operator
:
:
F64x2Ceil
|
Operator
:
:
F64x2Floor
|
Operator
:
:
F64x2Trunc
|
Operator
:
:
F64x2Nearest
|
Operator
:
:
F32x4Abs
|
Operator
:
:
F32x4Neg
|
Operator
:
:
F32x4Sqrt
|
Operator
:
:
F64x2Abs
|
Operator
:
:
F64x2Neg
|
Operator
:
:
F64x2Sqrt
|
Operator
:
:
F32x4DemoteF64x2Zero
|
Operator
:
:
F64x2PromoteLowF32x4
|
Operator
:
:
F64x2ConvertLowI32x4S
|
Operator
:
:
F64x2ConvertLowI32x4U
|
Operator
:
:
I32x4TruncSatF32x4S
|
Operator
:
:
I32x4TruncSatF32x4U
|
Operator
:
:
I32x4TruncSatF64x2SZero
|
Operator
:
:
I32x4TruncSatF64x2UZero
|
Operator
:
:
F32x4ConvertI32x4S
|
Operator
:
:
F32x4ConvertI32x4U
=
>
{
self
.
check_non_deterministic_enabled
(
)
?
;
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128Not
|
Operator
:
:
I8x16Abs
|
Operator
:
:
I8x16Neg
|
Operator
:
:
I8x16Popcnt
|
Operator
:
:
I16x8Abs
|
Operator
:
:
I16x8Neg
|
Operator
:
:
I32x4Abs
|
Operator
:
:
I32x4Neg
|
Operator
:
:
I64x2Abs
|
Operator
:
:
I64x2Neg
|
Operator
:
:
I16x8ExtendLowI8x16S
|
Operator
:
:
I16x8ExtendHighI8x16S
|
Operator
:
:
I16x8ExtendLowI8x16U
|
Operator
:
:
I16x8ExtendHighI8x16U
|
Operator
:
:
I32x4ExtendLowI16x8S
|
Operator
:
:
I32x4ExtendHighI16x8S
|
Operator
:
:
I32x4ExtendLowI16x8U
|
Operator
:
:
I32x4ExtendHighI16x8U
|
Operator
:
:
I64x2ExtendLowI32x4S
|
Operator
:
:
I64x2ExtendHighI32x4S
|
Operator
:
:
I64x2ExtendLowI32x4U
|
Operator
:
:
I64x2ExtendHighI32x4U
|
Operator
:
:
I16x8ExtAddPairwiseI8x16S
|
Operator
:
:
I16x8ExtAddPairwiseI8x16U
|
Operator
:
:
I32x4ExtAddPairwiseI16x8S
|
Operator
:
:
I32x4ExtAddPairwiseI16x8U
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
I32x4RelaxedTruncSatF32x4S
|
Operator
:
:
I32x4RelaxedTruncSatF32x4U
|
Operator
:
:
I32x4RelaxedTruncSatF64x2SZero
|
Operator
:
:
I32x4RelaxedTruncSatF64x2UZero
=
>
{
self
.
check_relaxed_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128Bitselect
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
F32x4Fma
|
Operator
:
:
F32x4Fms
|
Operator
:
:
F64x2Fma
|
Operator
:
:
F64x2Fms
|
Operator
:
:
I8x16LaneSelect
|
Operator
:
:
I16x8LaneSelect
|
Operator
:
:
I32x4LaneSelect
|
Operator
:
:
I64x2LaneSelect
=
>
{
self
.
check_relaxed_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128AnyTrue
|
Operator
:
:
I8x16AllTrue
|
Operator
:
:
I8x16Bitmask
|
Operator
:
:
I16x8AllTrue
|
Operator
:
:
I16x8Bitmask
|
Operator
:
:
I32x4AllTrue
|
Operator
:
:
I32x4Bitmask
|
Operator
:
:
I64x2AllTrue
|
Operator
:
:
I64x2Bitmask
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
I8x16Shl
|
Operator
:
:
I8x16ShrS
|
Operator
:
:
I8x16ShrU
|
Operator
:
:
I16x8Shl
|
Operator
:
:
I16x8ShrS
|
Operator
:
:
I16x8ShrU
|
Operator
:
:
I32x4Shl
|
Operator
:
:
I32x4ShrS
|
Operator
:
:
I32x4ShrU
|
Operator
:
:
I64x2Shl
|
Operator
:
:
I64x2ShrS
|
Operator
:
:
I64x2ShrU
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
I8x16Swizzle
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
I8x16RelaxedSwizzle
=
>
{
self
.
check_relaxed_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
I8x16Shuffle
{
ref
lanes
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
for
i
in
lanes
{
self
.
check_simd_lane_index
(
*
i
32
)
?
;
}
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128Load8Splat
{
memarg
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
ty
=
self
.
check_memarg
(
memarg
0
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128Load16Splat
{
memarg
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
ty
=
self
.
check_memarg
(
memarg
1
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128Load32Splat
{
memarg
}
|
Operator
:
:
V128Load32Zero
{
memarg
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
ty
=
self
.
check_memarg
(
memarg
2
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128Load64Splat
{
memarg
}
|
Operator
:
:
V128Load64Zero
{
memarg
}
|
Operator
:
:
V128Load8x8S
{
memarg
}
|
Operator
:
:
V128Load8x8U
{
memarg
}
|
Operator
:
:
V128Load16x4S
{
memarg
}
|
Operator
:
:
V128Load16x4U
{
memarg
}
|
Operator
:
:
V128Load32x2S
{
memarg
}
|
Operator
:
:
V128Load32x2U
{
memarg
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
idx
=
self
.
check_memarg
(
memarg
3
resources
)
?
;
self
.
pop_operand
(
Some
(
idx
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128Load8Lane
{
memarg
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
idx
=
self
.
check_memarg
(
memarg
0
resources
)
?
;
self
.
check_simd_lane_index
(
lane
16
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
idx
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128Load16Lane
{
memarg
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
idx
=
self
.
check_memarg
(
memarg
1
resources
)
?
;
self
.
check_simd_lane_index
(
lane
8
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
idx
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128Load32Lane
{
memarg
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
idx
=
self
.
check_memarg
(
memarg
2
resources
)
?
;
self
.
check_simd_lane_index
(
lane
4
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
idx
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128Load64Lane
{
memarg
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
idx
=
self
.
check_memarg
(
memarg
3
resources
)
?
;
self
.
check_simd_lane_index
(
lane
2
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
idx
)
)
?
;
self
.
push_operand
(
ValType
:
:
V128
)
?
;
}
Operator
:
:
V128Store8Lane
{
memarg
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
idx
=
self
.
check_memarg
(
memarg
0
resources
)
?
;
self
.
check_simd_lane_index
(
lane
16
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
idx
)
)
?
;
}
Operator
:
:
V128Store16Lane
{
memarg
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
idx
=
self
.
check_memarg
(
memarg
1
resources
)
?
;
self
.
check_simd_lane_index
(
lane
8
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
idx
)
)
?
;
}
Operator
:
:
V128Store32Lane
{
memarg
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
idx
=
self
.
check_memarg
(
memarg
2
resources
)
?
;
self
.
check_simd_lane_index
(
lane
4
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
idx
)
)
?
;
}
Operator
:
:
V128Store64Lane
{
memarg
lane
}
=
>
{
self
.
check_simd_enabled
(
)
?
;
let
idx
=
self
.
check_memarg
(
memarg
3
resources
)
?
;
self
.
check_simd_lane_index
(
lane
2
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
V128
)
)
?
;
self
.
pop_operand
(
Some
(
idx
)
)
?
;
}
Operator
:
:
MemoryInit
{
mem
segment
}
=
>
{
self
.
check_bulk_memory_enabled
(
)
?
;
let
ty
=
self
.
check_memory_index
(
mem
resources
)
?
;
match
resources
.
data_count
(
)
{
None
=
>
bail_op_err
!
(
"
data
count
section
required
"
)
Some
(
count
)
if
segment
<
count
=
>
{
}
Some
(
_
)
=
>
bail_op_err
!
(
"
unknown
data
segment
{
}
"
segment
)
}
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
DataDrop
{
segment
}
=
>
{
self
.
check_bulk_memory_enabled
(
)
?
;
match
resources
.
data_count
(
)
{
None
=
>
bail_op_err
!
(
"
data
count
section
required
"
)
Some
(
count
)
if
segment
<
count
=
>
{
}
Some
(
_
)
=
>
bail_op_err
!
(
"
unknown
data
segment
{
}
"
segment
)
}
}
Operator
:
:
MemoryCopy
{
src
dst
}
=
>
{
self
.
check_bulk_memory_enabled
(
)
?
;
let
dst_ty
=
self
.
check_memory_index
(
dst
resources
)
?
;
let
src_ty
=
self
.
check_memory_index
(
src
resources
)
?
;
self
.
pop_operand
(
Some
(
match
src_ty
{
ValType
:
:
I32
=
>
ValType
:
:
I32
_
=
>
dst_ty
}
)
)
?
;
self
.
pop_operand
(
Some
(
src_ty
)
)
?
;
self
.
pop_operand
(
Some
(
dst_ty
)
)
?
;
}
Operator
:
:
MemoryFill
{
mem
}
=
>
{
self
.
check_bulk_memory_enabled
(
)
?
;
let
ty
=
self
.
check_memory_index
(
mem
resources
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
}
Operator
:
:
TableInit
{
segment
table
}
=
>
{
self
.
check_bulk_memory_enabled
(
)
?
;
if
table
>
0
{
self
.
check_reference_types_enabled
(
)
?
;
}
let
table
=
match
resources
.
table_at
(
table
)
{
Some
(
table
)
=
>
table
None
=
>
bail_op_err
!
(
"
unknown
table
{
}
:
table
index
out
of
bounds
"
table
)
}
;
let
segment_ty
=
match
resources
.
element_type_at
(
segment
)
{
Some
(
ty
)
=
>
ty
None
=
>
bail_op_err
!
(
"
unknown
elem
segment
{
}
:
segment
index
out
of
bounds
"
segment
)
}
;
if
segment_ty
!
=
table
.
element_type
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
type
mismatch
"
)
)
;
}
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
}
Operator
:
:
ElemDrop
{
segment
}
=
>
{
self
.
check_bulk_memory_enabled
(
)
?
;
if
segment
>
=
resources
.
element_count
(
)
{
bail_op_err
!
(
"
unknown
elem
segment
{
}
:
segment
index
out
of
bounds
"
segment
)
;
}
}
Operator
:
:
TableCopy
{
src_table
dst_table
}
=
>
{
self
.
check_bulk_memory_enabled
(
)
?
;
if
src_table
>
0
|
|
dst_table
>
0
{
self
.
check_reference_types_enabled
(
)
?
;
}
let
(
src
dst
)
=
match
(
resources
.
table_at
(
src_table
)
resources
.
table_at
(
dst_table
)
)
{
(
Some
(
a
)
Some
(
b
)
)
=
>
(
a
b
)
_
=
>
return
Err
(
OperatorValidatorError
:
:
new
(
"
table
index
out
of
bounds
"
)
)
}
;
if
src
.
element_type
!
=
dst
.
element_type
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
type
mismatch
"
)
)
;
}
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
}
Operator
:
:
TableGet
{
table
}
=
>
{
self
.
check_reference_types_enabled
(
)
?
;
let
ty
=
match
resources
.
table_at
(
table
)
{
Some
(
ty
)
=
>
ty
.
element_type
None
=
>
return
Err
(
OperatorValidatorError
:
:
new
(
"
table
index
out
of
bounds
"
)
)
}
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
push_operand
(
ty
)
?
;
}
Operator
:
:
TableSet
{
table
}
=
>
{
self
.
check_reference_types_enabled
(
)
?
;
let
ty
=
match
resources
.
table_at
(
table
)
{
Some
(
ty
)
=
>
ty
.
element_type
None
=
>
return
Err
(
OperatorValidatorError
:
:
new
(
"
table
index
out
of
bounds
"
)
)
}
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
}
Operator
:
:
TableGrow
{
table
}
=
>
{
self
.
check_reference_types_enabled
(
)
?
;
let
ty
=
match
resources
.
table_at
(
table
)
{
Some
(
ty
)
=
>
ty
.
element_type
None
=
>
return
Err
(
OperatorValidatorError
:
:
new
(
"
table
index
out
of
bounds
"
)
)
}
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
TableSize
{
table
}
=
>
{
self
.
check_reference_types_enabled
(
)
?
;
if
resources
.
table_at
(
table
)
.
is_none
(
)
{
return
Err
(
OperatorValidatorError
:
:
new
(
"
table
index
out
of
bounds
"
)
)
;
}
self
.
push_operand
(
ValType
:
:
I32
)
?
;
}
Operator
:
:
TableFill
{
table
}
=
>
{
self
.
check_bulk_memory_enabled
(
)
?
;
let
ty
=
match
resources
.
table_at
(
table
)
{
Some
(
ty
)
=
>
ty
.
element_type
None
=
>
return
Err
(
OperatorValidatorError
:
:
new
(
"
table
index
out
of
bounds
"
)
)
}
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
self
.
pop_operand
(
Some
(
ty
)
)
?
;
self
.
pop_operand
(
Some
(
ValType
:
:
I32
)
)
?
;
}
}
Ok
(
(
)
)
}
pub
fn
finish
(
&
mut
self
)
-
>
OperatorValidatorResult
<
(
)
>
{
if
self
.
control
.
last
(
)
.
is_some
(
)
{
bail_op_err
!
(
"
control
frames
remain
at
end
of
function
:
END
opcode
expected
"
)
;
}
Ok
(
(
)
)
}
}
fn
func_type_at
<
T
:
WasmModuleResources
>
(
resources
:
&
T
at
:
u32
)
-
>
OperatorValidatorResult
<
&
T
:
:
FuncType
>
{
resources
.
func_type_at
(
at
)
.
ok_or_else
(
|
|
OperatorValidatorError
:
:
new
(
"
unknown
type
:
type
index
out
of
bounds
"
)
)
}
fn
tag_at
<
T
:
WasmModuleResources
>
(
resources
:
&
T
at
:
u32
)
-
>
OperatorValidatorResult
<
&
T
:
:
FuncType
>
{
resources
.
tag_at
(
at
)
.
ok_or_else
(
|
|
{
OperatorValidatorError
:
:
new
(
format
!
(
"
unknown
tag
{
}
:
tag
index
out
of
bounds
"
at
)
)
}
)
}
enum
Either
<
A
B
>
{
A
(
A
)
B
(
B
)
}
impl
<
A
B
>
Iterator
for
Either
<
A
B
>
where
A
:
Iterator
B
:
Iterator
<
Item
=
A
:
:
Item
>
{
type
Item
=
A
:
:
Item
;
fn
next
(
&
mut
self
)
-
>
Option
<
A
:
:
Item
>
{
match
self
{
Either
:
:
A
(
a
)
=
>
a
.
next
(
)
Either
:
:
B
(
b
)
=
>
b
.
next
(
)
}
}
}
impl
<
A
B
>
DoubleEndedIterator
for
Either
<
A
B
>
where
A
:
DoubleEndedIterator
B
:
DoubleEndedIterator
<
Item
=
A
:
:
Item
>
{
fn
next_back
(
&
mut
self
)
-
>
Option
<
A
:
:
Item
>
{
match
self
{
Either
:
:
A
(
a
)
=
>
a
.
next_back
(
)
Either
:
:
B
(
b
)
=
>
b
.
next_back
(
)
}
}
}
impl
<
A
B
>
ExactSizeIterator
for
Either
<
A
B
>
where
A
:
ExactSizeIterator
B
:
ExactSizeIterator
<
Item
=
A
:
:
Item
>
{
fn
len
(
&
self
)
-
>
usize
{
match
self
{
Either
:
:
A
(
a
)
=
>
a
.
len
(
)
Either
:
:
B
(
b
)
=
>
b
.
len
(
)
}
}
}
trait
PreciseIterator
:
ExactSizeIterator
+
DoubleEndedIterator
{
}
impl
<
T
:
ExactSizeIterator
+
DoubleEndedIterator
>
PreciseIterator
for
T
{
}
fn
params
(
ty
:
BlockType
resources
:
&
impl
WasmModuleResources
)
-
>
OperatorValidatorResult
<
impl
PreciseIterator
<
Item
=
ValType
>
+
'
_
>
{
Ok
(
match
ty
{
BlockType
:
:
Empty
|
BlockType
:
:
Type
(
_
)
=
>
Either
:
:
B
(
None
.
into_iter
(
)
)
BlockType
:
:
FuncType
(
t
)
=
>
Either
:
:
A
(
func_type_at
(
resources
t
)
?
.
inputs
(
)
)
}
)
}
fn
results
(
ty
:
BlockType
resources
:
&
impl
WasmModuleResources
)
-
>
OperatorValidatorResult
<
impl
PreciseIterator
<
Item
=
ValType
>
+
'
_
>
{
Ok
(
match
ty
{
BlockType
:
:
Empty
=
>
Either
:
:
B
(
None
.
into_iter
(
)
)
BlockType
:
:
Type
(
t
)
=
>
Either
:
:
B
(
Some
(
t
)
.
into_iter
(
)
)
BlockType
:
:
FuncType
(
t
)
=
>
Either
:
:
A
(
func_type_at
(
resources
t
)
?
.
outputs
(
)
)
}
)
}
fn
label_types
(
ty
:
BlockType
resources
:
&
impl
WasmModuleResources
kind
:
FrameKind
)
-
>
OperatorValidatorResult
<
impl
PreciseIterator
<
Item
=
ValType
>
+
'
_
>
{
Ok
(
match
kind
{
FrameKind
:
:
Loop
=
>
Either
:
:
A
(
params
(
ty
resources
)
?
)
_
=
>
Either
:
:
B
(
results
(
ty
resources
)
?
)
}
)
}
fn
ty_to_str
(
ty
:
ValType
)
-
>
&
'
static
str
{
match
ty
{
ValType
:
:
I32
=
>
"
i32
"
ValType
:
:
I64
=
>
"
i64
"
ValType
:
:
F32
=
>
"
f32
"
ValType
:
:
F64
=
>
"
f64
"
ValType
:
:
V128
=
>
"
v128
"
ValType
:
:
FuncRef
=
>
"
funcref
"
ValType
:
:
ExternRef
=
>
"
externref
"
}
}
