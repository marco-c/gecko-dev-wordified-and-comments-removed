use
super
:
:
{
check_max
combine_type_sizes
core
:
:
Module
types
:
:
{
ComponentFuncType
ComponentInstanceType
ComponentType
ComponentValType
EntityType
InstanceType
ModuleType
RecordType
Remapping
ResourceId
Type
TypeAlloc
TypeId
TypeList
VariantCase
}
}
;
use
crate
:
:
validator
:
:
names
:
:
{
KebabName
KebabNameKind
KebabStr
KebabString
}
;
use
crate
:
:
{
limits
:
:
*
types
:
:
{
ComponentDefinedType
ComponentEntityType
Context
InstanceTypeKind
LoweringInfo
Remap
SubtypeCx
TupleType
UnionType
VariantType
}
BinaryReaderError
CanonicalOption
ComponentExternName
ComponentExternalKind
ComponentOuterAliasKind
ComponentTypeRef
ExternalKind
FuncType
GlobalType
InstantiationArgKind
MemoryType
Result
StructuralType
SubType
TableType
TypeBounds
ValType
WasmFeatures
}
;
use
indexmap
:
:
{
map
:
:
Entry
IndexMap
IndexSet
}
;
use
std
:
:
collections
:
:
{
HashMap
HashSet
}
;
use
std
:
:
mem
;
fn
to_kebab_str
<
'
a
>
(
s
:
&
'
a
str
desc
:
&
str
offset
:
usize
)
-
>
Result
<
&
'
a
KebabStr
>
{
match
KebabStr
:
:
new
(
s
)
{
Some
(
s
)
=
>
Ok
(
s
)
None
=
>
{
if
s
.
is_empty
(
)
{
bail
!
(
offset
"
{
desc
}
name
cannot
be
empty
"
)
;
}
bail
!
(
offset
"
{
desc
}
name
{
s
}
is
not
in
kebab
case
"
)
;
}
}
}
pub
(
crate
)
struct
ComponentState
{
kind
:
ComponentKind
pub
core_types
:
Vec
<
TypeId
>
pub
core_modules
:
Vec
<
TypeId
>
pub
core_instances
:
Vec
<
TypeId
>
pub
core_funcs
:
Vec
<
TypeId
>
pub
core_memories
:
Vec
<
MemoryType
>
pub
core_tables
:
Vec
<
TableType
>
pub
core_globals
:
Vec
<
GlobalType
>
pub
core_tags
:
Vec
<
TypeId
>
pub
types
:
Vec
<
TypeId
>
pub
funcs
:
Vec
<
TypeId
>
pub
values
:
Vec
<
(
ComponentValType
bool
)
>
pub
instances
:
Vec
<
TypeId
>
pub
components
:
Vec
<
TypeId
>
pub
imports
:
IndexMap
<
String
ComponentEntityType
>
pub
exports
:
IndexMap
<
String
ComponentEntityType
>
pub
kebab_named_externs
:
IndexSet
<
KebabName
>
has_start
:
bool
type_size
:
u32
imported_resources
:
IndexMapAppendOnly
<
ResourceId
Vec
<
usize
>
>
defined_resources
:
IndexMapAppendOnly
<
ResourceId
Option
<
ValType
>
>
explicit_resources
:
IndexMap
<
ResourceId
Vec
<
usize
>
>
exported_types
:
HashSet
<
TypeId
>
imported_types
:
HashSet
<
TypeId
>
toplevel_exported_resources
:
KebabNameContext
toplevel_imported_resources
:
KebabNameContext
}
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
)
]
pub
enum
ComponentKind
{
Component
InstanceType
ComponentType
}
#
[
derive
(
Default
)
]
struct
KebabNameContext
{
resource_name_map
:
HashMap
<
TypeId
usize
>
all_resource_names
:
IndexSet
<
String
>
}
#
[
derive
(
Debug
Copy
Clone
)
]
pub
enum
ExternKind
{
Import
Export
}
impl
ExternKind
{
pub
fn
desc
(
&
self
)
-
>
&
'
static
str
{
match
self
{
ExternKind
:
:
Import
=
>
"
import
"
ExternKind
:
:
Export
=
>
"
export
"
}
}
}
impl
ComponentState
{
pub
fn
new
(
kind
:
ComponentKind
)
-
>
Self
{
Self
{
kind
core_types
:
Default
:
:
default
(
)
core_modules
:
Default
:
:
default
(
)
core_instances
:
Default
:
:
default
(
)
core_funcs
:
Default
:
:
default
(
)
core_memories
:
Default
:
:
default
(
)
core_tables
:
Default
:
:
default
(
)
core_globals
:
Default
:
:
default
(
)
core_tags
:
Default
:
:
default
(
)
types
:
Default
:
:
default
(
)
funcs
:
Default
:
:
default
(
)
values
:
Default
:
:
default
(
)
instances
:
Default
:
:
default
(
)
components
:
Default
:
:
default
(
)
imports
:
Default
:
:
default
(
)
exports
:
Default
:
:
default
(
)
kebab_named_externs
:
Default
:
:
default
(
)
has_start
:
Default
:
:
default
(
)
type_size
:
1
imported_resources
:
Default
:
:
default
(
)
defined_resources
:
Default
:
:
default
(
)
explicit_resources
:
Default
:
:
default
(
)
exported_types
:
Default
:
:
default
(
)
imported_types
:
Default
:
:
default
(
)
toplevel_exported_resources
:
Default
:
:
default
(
)
toplevel_imported_resources
:
Default
:
:
default
(
)
}
}
pub
fn
type_count
(
&
self
)
-
>
usize
{
self
.
core_types
.
len
(
)
+
self
.
types
.
len
(
)
}
pub
fn
instance_count
(
&
self
)
-
>
usize
{
self
.
core_instances
.
len
(
)
+
self
.
instances
.
len
(
)
}
pub
fn
function_count
(
&
self
)
-
>
usize
{
self
.
core_funcs
.
len
(
)
+
self
.
funcs
.
len
(
)
}
pub
fn
add_core_type
(
components
:
&
mut
[
Self
]
ty
:
crate
:
:
CoreType
features
:
&
WasmFeatures
types
:
&
mut
TypeAlloc
offset
:
usize
check_limit
:
bool
)
-
>
Result
<
(
)
>
{
let
ty
=
match
ty
{
crate
:
:
CoreType
:
:
Func
(
ty
)
=
>
Type
:
:
Sub
(
SubType
{
is_final
:
false
supertype_idx
:
None
structural_type
:
StructuralType
:
:
Func
(
ty
)
}
)
crate
:
:
CoreType
:
:
Module
(
decls
)
=
>
Type
:
:
Module
(
Box
:
:
new
(
Self
:
:
create_module_type
(
components
decls
.
into_vec
(
)
features
types
offset
)
?
)
)
}
;
let
current
=
components
.
last_mut
(
)
.
unwrap
(
)
;
if
check_limit
{
check_max
(
current
.
type_count
(
)
1
MAX_WASM_TYPES
"
types
"
offset
)
?
;
}
let
id
=
types
.
push_ty
(
ty
)
;
current
.
core_types
.
push
(
id
)
;
Ok
(
(
)
)
}
pub
fn
add_core_module
(
&
mut
self
module
:
&
Module
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
imports
=
module
.
imports_for_module_type
(
offset
)
?
;
let
ty
=
Type
:
:
Module
(
Box
:
:
new
(
ModuleType
{
type_size
:
module
.
type_size
imports
exports
:
module
.
exports
.
clone
(
)
}
)
)
;
let
id
=
types
.
push_ty
(
ty
)
;
self
.
core_modules
.
push
(
id
)
;
Ok
(
(
)
)
}
pub
fn
add_core_instance
(
&
mut
self
instance
:
crate
:
:
Instance
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
instance
=
match
instance
{
crate
:
:
Instance
:
:
Instantiate
{
module_index
args
}
=
>
{
self
.
instantiate_module
(
module_index
args
.
into_vec
(
)
types
offset
)
?
}
crate
:
:
Instance
:
:
FromExports
(
exports
)
=
>
{
self
.
instantiate_core_exports
(
exports
.
into_vec
(
)
types
offset
)
?
}
}
;
self
.
core_instances
.
push
(
instance
)
;
Ok
(
(
)
)
}
pub
fn
add_type
(
components
:
&
mut
Vec
<
Self
>
ty
:
crate
:
:
ComponentType
features
:
&
WasmFeatures
types
:
&
mut
TypeAlloc
offset
:
usize
check_limit
:
bool
)
-
>
Result
<
(
)
>
{
assert
!
(
!
components
.
is_empty
(
)
)
;
let
ty
=
match
ty
{
crate
:
:
ComponentType
:
:
Defined
(
ty
)
=
>
Type
:
:
Defined
(
components
.
last_mut
(
)
.
unwrap
(
)
.
create_defined_type
(
ty
types
offset
)
?
)
crate
:
:
ComponentType
:
:
Func
(
ty
)
=
>
Type
:
:
ComponentFunc
(
components
.
last_mut
(
)
.
unwrap
(
)
.
create_function_type
(
ty
types
offset
)
?
)
crate
:
:
ComponentType
:
:
Component
(
decls
)
=
>
Type
:
:
Component
(
Box
:
:
new
(
Self
:
:
create_component_type
(
components
decls
.
into_vec
(
)
features
types
offset
)
?
)
)
crate
:
:
ComponentType
:
:
Instance
(
decls
)
=
>
Type
:
:
ComponentInstance
(
Box
:
:
new
(
Self
:
:
create_instance_type
(
components
decls
.
into_vec
(
)
features
types
offset
)
?
)
)
crate
:
:
ComponentType
:
:
Resource
{
rep
dtor
}
=
>
{
let
component
=
components
.
last_mut
(
)
.
unwrap
(
)
;
if
component
.
kind
!
=
ComponentKind
:
:
Component
{
bail
!
(
offset
"
resources
can
only
be
defined
within
a
concrete
component
"
)
;
}
if
rep
!
=
ValType
:
:
I32
{
bail
!
(
offset
"
resources
can
only
be
represented
by
i32
"
)
;
}
if
let
Some
(
dtor
)
=
dtor
{
let
ty
=
component
.
core_function_at
(
dtor
offset
)
?
;
let
ty
=
types
[
ty
]
.
unwrap_func
(
)
;
if
ty
.
params
(
)
!
=
[
rep
]
|
|
ty
.
results
(
)
!
=
[
]
{
bail
!
(
offset
"
core
function
{
dtor
}
has
wrong
signature
for
a
destructor
"
)
;
}
}
let
id
=
types
.
alloc_resource_id
(
)
;
component
.
defined_resources
.
insert
(
id
Some
(
rep
)
)
;
Type
:
:
Resource
(
id
)
}
}
;
let
current
=
components
.
last_mut
(
)
.
unwrap
(
)
;
if
check_limit
{
check_max
(
current
.
type_count
(
)
1
MAX_WASM_TYPES
"
types
"
offset
)
?
;
}
let
id
=
types
.
push_ty
(
ty
)
;
current
.
types
.
push
(
id
)
;
Ok
(
(
)
)
}
pub
fn
add_import
(
&
mut
self
import
:
crate
:
:
ComponentImport
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
mut
entity
=
self
.
check_type_ref
(
&
import
.
ty
types
offset
)
?
;
self
.
add_entity
(
&
mut
entity
Some
(
(
import
.
name
.
as_str
(
)
ExternKind
:
:
Import
)
)
types
offset
)
?
;
self
.
toplevel_imported_resources
.
validate_extern
(
import
.
name
"
import
"
&
entity
types
offset
&
mut
self
.
kebab_named_externs
&
mut
self
.
imports
&
mut
self
.
type_size
)
?
;
Ok
(
(
)
)
}
fn
add_entity
(
&
mut
self
ty
:
&
mut
ComponentEntityType
name_and_kind
:
Option
<
(
&
str
ExternKind
)
>
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
kind
=
name_and_kind
.
map
(
|
(
_
k
)
|
k
)
;
let
(
len
max
desc
)
=
match
ty
{
ComponentEntityType
:
:
Module
(
id
)
=
>
{
self
.
core_modules
.
push
(
*
id
)
;
(
self
.
core_modules
.
len
(
)
MAX_WASM_MODULES
"
modules
"
)
}
ComponentEntityType
:
:
Component
(
id
)
=
>
{
self
.
components
.
push
(
*
id
)
;
(
self
.
components
.
len
(
)
MAX_WASM_COMPONENTS
"
components
"
)
}
ComponentEntityType
:
:
Instance
(
id
)
=
>
{
match
kind
{
Some
(
ExternKind
:
:
Import
)
=
>
self
.
prepare_instance_import
(
id
types
)
Some
(
ExternKind
:
:
Export
)
=
>
self
.
prepare_instance_export
(
id
types
)
None
=
>
{
}
}
self
.
instances
.
push
(
*
id
)
;
(
self
.
instance_count
(
)
MAX_WASM_INSTANCES
"
instances
"
)
}
ComponentEntityType
:
:
Func
(
id
)
=
>
{
self
.
funcs
.
push
(
*
id
)
;
(
self
.
function_count
(
)
MAX_WASM_FUNCTIONS
"
functions
"
)
}
ComponentEntityType
:
:
Value
(
ty
)
=
>
{
let
value_used
=
match
kind
{
Some
(
ExternKind
:
:
Import
)
|
None
=
>
false
Some
(
ExternKind
:
:
Export
)
=
>
true
}
;
self
.
values
.
push
(
(
*
ty
value_used
)
)
;
(
self
.
values
.
len
(
)
MAX_WASM_VALUES
"
values
"
)
}
ComponentEntityType
:
:
Type
{
created
referenced
}
=
>
{
self
.
types
.
push
(
*
created
)
;
if
let
Type
:
:
Resource
(
id
)
=
types
[
*
created
]
{
match
kind
{
Some
(
ExternKind
:
:
Import
)
=
>
{
if
created
=
=
referenced
{
self
.
imported_resources
.
insert
(
id
vec
!
[
self
.
imports
.
len
(
)
]
)
;
}
}
Some
(
ExternKind
:
:
Export
)
=
>
{
if
created
=
=
referenced
{
self
.
defined_resources
.
insert
(
id
None
)
;
}
self
.
explicit_resources
.
insert
(
id
vec
!
[
self
.
exports
.
len
(
)
]
)
;
}
None
=
>
{
}
}
}
(
self
.
types
.
len
(
)
MAX_WASM_TYPES
"
types
"
)
}
}
;
check_max
(
len
0
max
desc
offset
)
?
;
if
let
Some
(
(
name
kind
)
)
=
name_and_kind
{
if
!
self
.
validate_and_register_named_types
(
Some
(
name
)
kind
ty
types
)
{
bail
!
(
offset
"
{
}
not
valid
to
be
used
as
{
}
"
ty
.
desc
(
)
kind
.
desc
(
)
)
;
}
}
Ok
(
(
)
)
}
fn
validate_and_register_named_types
(
&
mut
self
toplevel_name
:
Option
<
&
str
>
kind
:
ExternKind
ty
:
&
ComponentEntityType
types
:
&
TypeAlloc
)
-
>
bool
{
if
let
ComponentEntityType
:
:
Type
{
created
.
.
}
=
ty
{
if
let
Some
(
name
)
=
toplevel_name
{
if
let
Type
:
:
Resource
(
_
)
=
types
[
*
created
]
{
let
cx
=
match
kind
{
ExternKind
:
:
Import
=
>
&
mut
self
.
toplevel_imported_resources
ExternKind
:
:
Export
=
>
&
mut
self
.
toplevel_exported_resources
}
;
cx
.
register
(
name
*
created
)
;
}
}
}
match
self
.
kind
{
ComponentKind
:
:
Component
|
ComponentKind
:
:
ComponentType
=
>
{
}
ComponentKind
:
:
InstanceType
=
>
return
true
}
let
set
=
match
kind
{
ExternKind
:
:
Import
=
>
&
self
.
imported_types
ExternKind
:
:
Export
=
>
&
self
.
exported_types
}
;
match
ty
{
ComponentEntityType
:
:
Type
{
created
referenced
}
=
>
{
if
!
self
.
all_valtypes_named
(
types
*
referenced
set
)
{
return
false
;
}
match
kind
{
ExternKind
:
:
Import
=
>
{
self
.
imported_types
.
insert
(
*
created
)
;
self
.
exported_types
.
insert
(
*
created
)
;
}
ExternKind
:
:
Export
=
>
{
self
.
exported_types
.
insert
(
*
created
)
;
}
}
true
}
ComponentEntityType
:
:
Instance
(
i
)
=
>
{
let
ty
=
types
[
*
i
]
.
unwrap_component_instance
(
)
;
ty
.
exports
.
values
(
)
.
all
(
|
ty
|
self
.
validate_and_register_named_types
(
None
kind
ty
types
)
)
}
ComponentEntityType
:
:
Func
(
id
)
=
>
self
.
all_valtypes_named
(
types
*
id
set
)
ComponentEntityType
:
:
Value
(
ty
)
=
>
types
.
type_named_valtype
(
ty
set
)
ComponentEntityType
:
:
Component
(
_
)
|
ComponentEntityType
:
:
Module
(
_
)
=
>
true
}
}
fn
all_valtypes_named
(
&
self
types
:
&
TypeAlloc
id
:
TypeId
set
:
&
HashSet
<
TypeId
>
)
-
>
bool
{
match
&
types
[
id
]
{
Type
:
:
Defined
(
i
)
=
>
match
i
{
ComponentDefinedType
:
:
Primitive
(
_
)
|
ComponentDefinedType
:
:
Flags
(
_
)
|
ComponentDefinedType
:
:
Enum
(
_
)
=
>
true
ComponentDefinedType
:
:
Record
(
r
)
=
>
{
r
.
fields
.
values
(
)
.
all
(
|
t
|
types
.
type_named_valtype
(
t
set
)
)
}
ComponentDefinedType
:
:
Tuple
(
r
)
=
>
{
r
.
types
.
iter
(
)
.
all
(
|
t
|
types
.
type_named_valtype
(
t
set
)
)
}
ComponentDefinedType
:
:
Union
(
r
)
=
>
{
r
.
types
.
iter
(
)
.
all
(
|
t
|
types
.
type_named_valtype
(
t
set
)
)
}
ComponentDefinedType
:
:
Variant
(
r
)
=
>
r
.
cases
.
values
(
)
.
filter_map
(
|
t
|
t
.
ty
.
as_ref
(
)
)
.
all
(
|
t
|
types
.
type_named_valtype
(
t
set
)
)
ComponentDefinedType
:
:
Result
{
ok
err
}
=
>
{
ok
.
as_ref
(
)
.
map
(
|
t
|
types
.
type_named_valtype
(
t
set
)
)
.
unwrap_or
(
true
)
&
&
err
.
as_ref
(
)
.
map
(
|
t
|
types
.
type_named_valtype
(
t
set
)
)
.
unwrap_or
(
true
)
}
ComponentDefinedType
:
:
List
(
ty
)
|
ComponentDefinedType
:
:
Option
(
ty
)
=
>
{
types
.
type_named_valtype
(
ty
set
)
}
ComponentDefinedType
:
:
Own
(
id
)
|
ComponentDefinedType
:
:
Borrow
(
id
)
=
>
{
set
.
contains
(
id
)
}
}
Type
:
:
Module
(
_
)
|
Type
:
:
Instance
(
_
)
|
Type
:
:
Sub
(
_
)
=
>
true
Type
:
:
Resource
(
_
)
=
>
true
Type
:
:
Component
(
_
)
=
>
true
Type
:
:
ComponentFunc
(
ty
)
=
>
ty
.
params
.
iter
(
)
.
map
(
|
(
_
ty
)
|
ty
)
.
chain
(
ty
.
results
.
iter
(
)
.
map
(
|
(
_
ty
)
|
ty
)
)
.
all
(
|
ty
|
types
.
type_named_valtype
(
ty
set
)
)
Type
:
:
ComponentInstance
(
ty
)
=
>
ty
.
exports
.
values
(
)
.
all
(
|
ty
|
{
let
id
=
match
ty
{
ComponentEntityType
:
:
Module
(
id
)
|
ComponentEntityType
:
:
Func
(
id
)
|
ComponentEntityType
:
:
Value
(
ComponentValType
:
:
Type
(
id
)
)
|
ComponentEntityType
:
:
Type
{
created
:
id
.
.
}
|
ComponentEntityType
:
:
Instance
(
id
)
|
ComponentEntityType
:
:
Component
(
id
)
=
>
*
id
ComponentEntityType
:
:
Value
(
ComponentValType
:
:
Primitive
(
_
)
)
=
>
return
true
}
;
self
.
all_valtypes_named
(
types
id
set
)
}
)
}
}
fn
prepare_instance_import
(
&
mut
self
id
:
&
mut
TypeId
types
:
&
mut
TypeAlloc
)
{
let
ty
=
types
[
*
id
]
.
unwrap_component_instance
(
)
;
if
ty
.
defined_resources
.
is_empty
(
)
{
return
;
}
let
mut
new_ty
=
ComponentInstanceType
{
type_size
:
ty
.
type_size
exports
:
ty
.
exports
.
clone
(
)
explicit_resources
:
ty
.
explicit_resources
.
clone
(
)
defined_resources
:
Default
:
:
default
(
)
}
;
let
resources
=
(
0
.
.
ty
.
defined_resources
.
len
(
)
)
.
map
(
|
_
|
types
.
alloc_resource_id
(
)
)
.
collect
:
:
<
IndexSet
<
_
>
>
(
)
;
let
mut
mapping
=
Remapping
:
:
default
(
)
;
let
ty
=
types
[
*
id
]
.
unwrap_component_instance
(
)
;
for
(
old
new
)
in
ty
.
defined_resources
.
iter
(
)
.
zip
(
&
resources
)
{
let
prev
=
mapping
.
resources
.
insert
(
*
old
*
new
)
;
assert
!
(
prev
.
is_none
(
)
)
;
let
mut
base
=
vec
!
[
self
.
imports
.
len
(
)
]
;
base
.
extend
(
ty
.
explicit_resources
[
old
]
.
iter
(
)
.
copied
(
)
)
;
self
.
imported_resources
.
insert
(
*
new
base
)
;
}
for
ty
in
new_ty
.
exports
.
values_mut
(
)
{
types
.
remap_component_entity
(
ty
&
mut
mapping
)
;
}
for
(
id
path
)
in
mem
:
:
take
(
&
mut
new_ty
.
explicit_resources
)
{
let
id
=
*
mapping
.
resources
.
get
(
&
id
)
.
unwrap_or
(
&
id
)
;
new_ty
.
explicit_resources
.
insert
(
id
path
)
;
}
*
id
=
types
.
push_ty
(
Type
:
:
ComponentInstance
(
Box
:
:
new
(
new_ty
)
)
)
;
}
fn
prepare_instance_export
(
&
mut
self
id
:
&
mut
TypeId
types
:
&
mut
TypeAlloc
)
{
let
ty
=
types
[
*
id
]
.
unwrap_component_instance
(
)
;
if
!
ty
.
defined_resources
.
is_empty
(
)
{
let
mut
new_ty
=
ty
.
clone
(
)
;
let
mut
mapping
=
Remapping
:
:
default
(
)
;
for
old
in
mem
:
:
take
(
&
mut
new_ty
.
defined_resources
)
{
let
new
=
types
.
alloc_resource_id
(
)
;
mapping
.
resources
.
insert
(
old
new
)
;
self
.
defined_resources
.
insert
(
new
None
)
;
}
for
ty
in
new_ty
.
exports
.
values_mut
(
)
{
types
.
remap_component_entity
(
ty
&
mut
mapping
)
;
}
for
(
id
path
)
in
mem
:
:
take
(
&
mut
new_ty
.
explicit_resources
)
{
let
id
=
mapping
.
resources
.
get
(
&
id
)
.
copied
(
)
.
unwrap_or
(
id
)
;
new_ty
.
explicit_resources
.
insert
(
id
path
)
;
}
*
id
=
types
.
push_ty
(
Type
:
:
ComponentInstance
(
Box
:
:
new
(
new_ty
)
)
)
;
}
let
ty
=
types
[
*
id
]
.
unwrap_component_instance
(
)
;
for
(
id
path
)
in
ty
.
explicit_resources
.
iter
(
)
{
let
mut
new_path
=
vec
!
[
self
.
exports
.
len
(
)
]
;
new_path
.
extend
(
path
)
;
self
.
explicit_resources
.
insert
(
*
id
new_path
)
;
}
}
pub
fn
add_export
(
&
mut
self
name
:
ComponentExternName
<
'
_
>
mut
ty
:
ComponentEntityType
types
:
&
mut
TypeAlloc
offset
:
usize
check_limit
:
bool
)
-
>
Result
<
(
)
>
{
if
check_limit
{
check_max
(
self
.
exports
.
len
(
)
1
MAX_WASM_EXPORTS
"
exports
"
offset
)
?
;
}
self
.
add_entity
(
&
mut
ty
Some
(
(
name
.
as_str
(
)
ExternKind
:
:
Export
)
)
types
offset
)
?
;
self
.
toplevel_exported_resources
.
validate_extern
(
name
.
into
(
)
"
export
"
&
ty
types
offset
&
mut
self
.
kebab_named_externs
&
mut
self
.
exports
&
mut
self
.
type_size
)
?
;
Ok
(
(
)
)
}
pub
fn
lift_function
(
&
mut
self
core_func_index
:
u32
type_index
:
u32
options
:
Vec
<
CanonicalOption
>
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
ty
=
self
.
function_type_at
(
type_index
types
offset
)
?
;
let
core_ty
=
types
[
self
.
core_function_at
(
core_func_index
offset
)
?
]
.
unwrap_func
(
)
;
let
info
=
ty
.
lower
(
types
false
)
;
self
.
check_options
(
Some
(
core_ty
)
&
info
&
options
types
offset
)
?
;
if
core_ty
.
params
(
)
!
=
info
.
params
.
as_slice
(
)
{
bail
!
(
offset
"
lowered
parameter
types
{
:
?
}
do
not
match
parameter
types
\
{
:
?
}
of
core
function
{
core_func_index
}
"
info
.
params
.
as_slice
(
)
core_ty
.
params
(
)
)
;
}
if
core_ty
.
results
(
)
!
=
info
.
results
.
as_slice
(
)
{
bail
!
(
offset
"
lowered
result
types
{
:
?
}
do
not
match
result
types
\
{
:
?
}
of
core
function
{
core_func_index
}
"
info
.
results
.
as_slice
(
)
core_ty
.
results
(
)
)
;
}
self
.
funcs
.
push
(
self
.
types
[
type_index
as
usize
]
)
;
Ok
(
(
)
)
}
pub
fn
lower_function
(
&
mut
self
func_index
:
u32
options
:
Vec
<
CanonicalOption
>
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
ty
=
types
[
self
.
function_at
(
func_index
offset
)
?
]
.
unwrap_component_func
(
)
;
let
info
=
ty
.
lower
(
types
true
)
;
self
.
check_options
(
None
&
info
&
options
types
offset
)
?
;
let
lowered_ty
=
Type
:
:
Sub
(
SubType
{
is_final
:
false
supertype_idx
:
None
structural_type
:
StructuralType
:
:
Func
(
info
.
into_func_type
(
)
)
}
)
;
let
id
=
types
.
push_ty
(
lowered_ty
)
;
self
.
core_funcs
.
push
(
id
)
;
Ok
(
(
)
)
}
pub
fn
resource_new
(
&
mut
self
resource
:
u32
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
rep
=
self
.
check_local_resource
(
resource
types
offset
)
?
;
let
core_ty
=
Type
:
:
Sub
(
SubType
{
is_final
:
false
supertype_idx
:
None
structural_type
:
StructuralType
:
:
Func
(
FuncType
:
:
new
(
[
rep
]
[
ValType
:
:
I32
]
)
)
}
)
;
self
.
core_funcs
.
push
(
types
.
push_ty
(
core_ty
)
)
;
Ok
(
(
)
)
}
pub
fn
resource_drop
(
&
mut
self
resource
:
u32
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
self
.
resource_at
(
resource
types
offset
)
?
;
let
core_ty
=
Type
:
:
Sub
(
SubType
{
is_final
:
false
supertype_idx
:
None
structural_type
:
StructuralType
:
:
Func
(
FuncType
:
:
new
(
[
ValType
:
:
I32
]
[
]
)
)
}
)
;
self
.
core_funcs
.
push
(
types
.
push_ty
(
core_ty
)
)
;
Ok
(
(
)
)
}
pub
fn
resource_rep
(
&
mut
self
resource
:
u32
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
rep
=
self
.
check_local_resource
(
resource
types
offset
)
?
;
let
core_ty
=
Type
:
:
Sub
(
SubType
{
is_final
:
false
supertype_idx
:
None
structural_type
:
StructuralType
:
:
Func
(
FuncType
:
:
new
(
[
ValType
:
:
I32
]
[
rep
]
)
)
}
)
;
self
.
core_funcs
.
push
(
types
.
push_ty
(
core_ty
)
)
;
Ok
(
(
)
)
}
fn
check_local_resource
(
&
self
idx
:
u32
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
ValType
>
{
let
id
=
self
.
resource_at
(
idx
types
offset
)
?
;
let
resource
=
types
[
id
]
.
unwrap_resource
(
)
;
match
self
.
defined_resources
.
get
(
&
resource
)
.
and_then
(
|
rep
|
*
rep
)
{
Some
(
ty
)
=
>
Ok
(
ty
)
None
=
>
bail
!
(
offset
"
type
{
idx
}
is
not
a
local
resource
"
)
}
}
fn
resource_at
<
'
a
>
(
&
self
idx
:
u32
types
:
&
'
a
TypeList
offset
:
usize
)
-
>
Result
<
TypeId
>
{
let
id
=
self
.
type_at
(
idx
false
offset
)
?
;
match
&
types
[
id
]
{
Type
:
:
Resource
(
_
)
=
>
Ok
(
id
)
_
=
>
bail
!
(
offset
"
type
index
{
}
is
not
a
resource
type
"
idx
)
}
}
pub
fn
add_component
(
&
mut
self
component
:
ComponentType
types
:
&
mut
TypeAlloc
)
-
>
Result
<
(
)
>
{
let
ty
=
Type
:
:
Component
(
Box
:
:
new
(
component
)
)
;
let
id
=
types
.
push_ty
(
ty
)
;
self
.
components
.
push
(
id
)
;
Ok
(
(
)
)
}
pub
fn
add_instance
(
&
mut
self
instance
:
crate
:
:
ComponentInstance
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
instance
=
match
instance
{
crate
:
:
ComponentInstance
:
:
Instantiate
{
component_index
args
}
=
>
self
.
instantiate_component
(
component_index
args
.
into_vec
(
)
types
offset
)
?
crate
:
:
ComponentInstance
:
:
FromExports
(
exports
)
=
>
{
self
.
instantiate_exports
(
exports
.
into_vec
(
)
types
offset
)
?
}
}
;
self
.
instances
.
push
(
instance
)
;
Ok
(
(
)
)
}
pub
fn
add_alias
(
components
:
&
mut
[
Self
]
alias
:
crate
:
:
ComponentAlias
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
match
alias
{
crate
:
:
ComponentAlias
:
:
InstanceExport
{
instance_index
kind
name
}
=
>
components
.
last_mut
(
)
.
unwrap
(
)
.
alias_instance_export
(
instance_index
kind
name
types
offset
)
crate
:
:
ComponentAlias
:
:
CoreInstanceExport
{
instance_index
kind
name
}
=
>
components
.
last_mut
(
)
.
unwrap
(
)
.
alias_core_instance_export
(
instance_index
kind
name
types
offset
)
crate
:
:
ComponentAlias
:
:
Outer
{
kind
count
index
}
=
>
match
kind
{
ComponentOuterAliasKind
:
:
CoreModule
=
>
{
Self
:
:
alias_module
(
components
count
index
offset
)
}
ComponentOuterAliasKind
:
:
CoreType
=
>
{
Self
:
:
alias_core_type
(
components
count
index
offset
)
}
ComponentOuterAliasKind
:
:
Type
=
>
{
Self
:
:
alias_type
(
components
count
index
types
offset
)
}
ComponentOuterAliasKind
:
:
Component
=
>
{
Self
:
:
alias_component
(
components
count
index
offset
)
}
}
}
}
pub
fn
add_start
(
&
mut
self
func_index
:
u32
args
:
&
[
u32
]
results
:
u32
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
(
)
>
{
if
self
.
has_start
{
return
Err
(
BinaryReaderError
:
:
new
(
"
component
cannot
have
more
than
one
start
function
"
offset
)
)
;
}
let
ft
=
types
[
self
.
function_at
(
func_index
offset
)
?
]
.
unwrap_component_func
(
)
;
if
ft
.
params
.
len
(
)
!
=
args
.
len
(
)
{
bail
!
(
offset
"
component
start
function
requires
{
}
arguments
but
was
given
{
}
"
ft
.
params
.
len
(
)
args
.
len
(
)
)
;
}
if
ft
.
results
.
len
(
)
as
u32
!
=
results
{
bail
!
(
offset
"
component
start
function
has
a
result
count
of
{
results
}
\
but
the
function
type
has
a
result
count
of
{
type_results
}
"
type_results
=
ft
.
results
.
len
(
)
)
;
}
let
cx
=
SubtypeCx
:
:
new
(
types
types
)
;
for
(
i
(
(
_
ty
)
arg
)
)
in
ft
.
params
.
iter
(
)
.
zip
(
args
)
.
enumerate
(
)
{
cx
.
component_val_type
(
self
.
value_at
(
*
arg
offset
)
?
ty
offset
)
.
with_context
(
|
|
{
format
!
(
"
value
type
mismatch
for
component
start
function
argument
{
i
}
"
)
}
)
?
;
}
for
(
_
ty
)
in
ft
.
results
.
iter
(
)
{
self
.
values
.
push
(
(
*
ty
false
)
)
;
}
self
.
has_start
=
true
;
Ok
(
(
)
)
}
fn
check_options
(
&
self
core_ty
:
Option
<
&
FuncType
>
info
:
&
LoweringInfo
options
:
&
[
CanonicalOption
]
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
(
)
>
{
fn
display
(
option
:
CanonicalOption
)
-
>
&
'
static
str
{
match
option
{
CanonicalOption
:
:
UTF8
=
>
"
utf8
"
CanonicalOption
:
:
UTF16
=
>
"
utf16
"
CanonicalOption
:
:
CompactUTF16
=
>
"
latin1
-
utf16
"
CanonicalOption
:
:
Memory
(
_
)
=
>
"
memory
"
CanonicalOption
:
:
Realloc
(
_
)
=
>
"
realloc
"
CanonicalOption
:
:
PostReturn
(
_
)
=
>
"
post
-
return
"
}
}
let
mut
encoding
=
None
;
let
mut
memory
=
None
;
let
mut
realloc
=
None
;
let
mut
post_return
=
None
;
for
option
in
options
{
match
option
{
CanonicalOption
:
:
UTF8
|
CanonicalOption
:
:
UTF16
|
CanonicalOption
:
:
CompactUTF16
=
>
{
match
encoding
{
Some
(
existing
)
=
>
{
bail
!
(
offset
"
canonical
encoding
option
{
}
conflicts
with
option
{
}
"
display
(
existing
)
display
(
*
option
)
)
}
None
=
>
encoding
=
Some
(
*
option
)
}
}
CanonicalOption
:
:
Memory
(
idx
)
=
>
{
memory
=
match
memory
{
None
=
>
{
self
.
memory_at
(
*
idx
offset
)
?
;
Some
(
*
idx
)
}
Some
(
_
)
=
>
{
return
Err
(
BinaryReaderError
:
:
new
(
"
canonical
option
memory
is
specified
more
than
once
"
offset
)
)
}
}
}
CanonicalOption
:
:
Realloc
(
idx
)
=
>
{
realloc
=
match
realloc
{
None
=
>
{
let
ty
=
types
[
self
.
core_function_at
(
*
idx
offset
)
?
]
.
unwrap_func
(
)
;
if
ty
.
params
(
)
!
=
[
ValType
:
:
I32
ValType
:
:
I32
ValType
:
:
I32
ValType
:
:
I32
]
|
|
ty
.
results
(
)
!
=
[
ValType
:
:
I32
]
{
return
Err
(
BinaryReaderError
:
:
new
(
"
canonical
option
realloc
uses
a
core
function
with
an
incorrect
signature
"
offset
)
)
;
}
Some
(
*
idx
)
}
Some
(
_
)
=
>
{
return
Err
(
BinaryReaderError
:
:
new
(
"
canonical
option
realloc
is
specified
more
than
once
"
offset
)
)
}
}
}
CanonicalOption
:
:
PostReturn
(
idx
)
=
>
{
post_return
=
match
post_return
{
None
=
>
{
let
core_ty
=
core_ty
.
ok_or_else
(
|
|
{
BinaryReaderError
:
:
new
(
"
canonical
option
post
-
return
cannot
be
specified
for
lowerings
"
offset
)
}
)
?
;
let
ty
=
types
[
self
.
core_function_at
(
*
idx
offset
)
?
]
.
unwrap_func
(
)
;
if
ty
.
params
(
)
!
=
core_ty
.
results
(
)
|
|
!
ty
.
results
(
)
.
is_empty
(
)
{
return
Err
(
BinaryReaderError
:
:
new
(
"
canonical
option
post
-
return
uses
a
core
function
with
an
incorrect
signature
"
offset
)
)
;
}
Some
(
*
idx
)
}
Some
(
_
)
=
>
{
return
Err
(
BinaryReaderError
:
:
new
(
"
canonical
option
post
-
return
is
specified
more
than
once
"
offset
)
)
}
}
}
}
}
if
info
.
requires_memory
&
&
memory
.
is_none
(
)
{
return
Err
(
BinaryReaderError
:
:
new
(
"
canonical
option
memory
is
required
"
offset
)
)
;
}
if
info
.
requires_realloc
&
&
realloc
.
is_none
(
)
{
return
Err
(
BinaryReaderError
:
:
new
(
"
canonical
option
realloc
is
required
"
offset
)
)
;
}
Ok
(
(
)
)
}
fn
check_type_ref
(
&
mut
self
ty
:
&
ComponentTypeRef
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
ComponentEntityType
>
{
Ok
(
match
ty
{
ComponentTypeRef
:
:
Module
(
index
)
=
>
{
let
id
=
self
.
type_at
(
*
index
true
offset
)
?
;
match
&
types
[
id
]
{
Type
:
:
Module
(
_
)
=
>
{
}
_
=
>
bail
!
(
offset
"
core
type
index
{
index
}
is
not
a
module
type
"
)
}
ComponentEntityType
:
:
Module
(
id
)
}
ComponentTypeRef
:
:
Func
(
index
)
=
>
{
let
id
=
self
.
type_at
(
*
index
false
offset
)
?
;
match
&
types
[
id
]
{
Type
:
:
ComponentFunc
(
_
)
=
>
{
}
_
=
>
bail
!
(
offset
"
type
index
{
index
}
is
not
a
function
type
"
)
}
ComponentEntityType
:
:
Func
(
id
)
}
ComponentTypeRef
:
:
Value
(
ty
)
=
>
{
let
ty
=
match
ty
{
crate
:
:
ComponentValType
:
:
Primitive
(
ty
)
=
>
ComponentValType
:
:
Primitive
(
*
ty
)
crate
:
:
ComponentValType
:
:
Type
(
index
)
=
>
{
ComponentValType
:
:
Type
(
self
.
defined_type_at
(
*
index
types
offset
)
?
)
}
}
;
ComponentEntityType
:
:
Value
(
ty
)
}
ComponentTypeRef
:
:
Type
(
TypeBounds
:
:
Eq
(
index
)
)
=
>
{
let
referenced
=
self
.
type_at
(
*
index
false
offset
)
?
;
let
created
=
types
.
with_unique
(
referenced
)
;
ComponentEntityType
:
:
Type
{
referenced
created
}
}
ComponentTypeRef
:
:
Type
(
TypeBounds
:
:
SubResource
)
=
>
{
let
id
=
types
.
alloc_resource_id
(
)
;
let
id
=
types
.
push_ty
(
Type
:
:
Resource
(
id
)
)
;
ComponentEntityType
:
:
Type
{
referenced
:
id
created
:
id
}
}
ComponentTypeRef
:
:
Instance
(
index
)
=
>
{
let
id
=
self
.
type_at
(
*
index
false
offset
)
?
;
match
&
types
[
id
]
{
Type
:
:
ComponentInstance
(
_
)
=
>
{
}
_
=
>
bail
!
(
offset
"
type
index
{
index
}
is
not
an
instance
type
"
)
}
ComponentEntityType
:
:
Instance
(
id
)
}
ComponentTypeRef
:
:
Component
(
index
)
=
>
{
let
id
=
self
.
type_at
(
*
index
false
offset
)
?
;
match
&
types
[
id
]
{
Type
:
:
Component
(
_
)
=
>
{
}
_
=
>
bail
!
(
offset
"
type
index
{
index
}
is
not
a
component
type
"
)
}
ComponentEntityType
:
:
Component
(
id
)
}
}
)
}
pub
fn
export_to_entity_type
(
&
mut
self
export
:
&
crate
:
:
ComponentExport
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
ComponentEntityType
>
{
let
actual
=
match
export
.
kind
{
ComponentExternalKind
:
:
Module
=
>
{
ComponentEntityType
:
:
Module
(
self
.
module_at
(
export
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Func
=
>
{
ComponentEntityType
:
:
Func
(
self
.
function_at
(
export
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Value
=
>
{
ComponentEntityType
:
:
Value
(
*
self
.
value_at
(
export
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Type
=
>
{
let
referenced
=
self
.
type_at
(
export
.
index
false
offset
)
?
;
let
created
=
types
.
with_unique
(
referenced
)
;
ComponentEntityType
:
:
Type
{
referenced
created
}
}
ComponentExternalKind
:
:
Instance
=
>
{
ComponentEntityType
:
:
Instance
(
self
.
instance_at
(
export
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Component
=
>
{
ComponentEntityType
:
:
Component
(
self
.
component_at
(
export
.
index
offset
)
?
)
}
}
;
let
ascribed
=
match
&
export
.
ty
{
Some
(
ty
)
=
>
self
.
check_type_ref
(
ty
types
offset
)
?
None
=
>
return
Ok
(
actual
)
}
;
SubtypeCx
:
:
new
(
types
types
)
.
component_entity_type
(
&
actual
&
ascribed
offset
)
.
with_context
(
|
|
"
ascribed
type
of
export
is
not
compatible
with
item
'
s
type
"
)
?
;
Ok
(
ascribed
)
}
fn
create_module_type
(
components
:
&
[
Self
]
decls
:
Vec
<
crate
:
:
ModuleTypeDeclaration
>
features
:
&
WasmFeatures
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
ModuleType
>
{
let
mut
state
=
Module
:
:
default
(
)
;
for
decl
in
decls
{
match
decl
{
crate
:
:
ModuleTypeDeclaration
:
:
Type
(
ty
)
=
>
{
state
.
add_type
(
ty
features
types
offset
true
)
?
;
}
crate
:
:
ModuleTypeDeclaration
:
:
Export
{
name
ty
}
=
>
{
let
ty
=
state
.
check_type_ref
(
&
ty
features
types
offset
)
?
;
state
.
add_export
(
name
ty
features
offset
true
)
?
;
}
crate
:
:
ModuleTypeDeclaration
:
:
OuterAlias
{
kind
count
index
}
=
>
{
if
count
>
1
{
return
Err
(
BinaryReaderError
:
:
new
(
"
outer
type
aliases
in
module
type
declarations
are
limited
to
a
maximum
count
of
1
"
offset
)
)
;
}
match
kind
{
crate
:
:
OuterAliasKind
:
:
Type
=
>
{
let
ty
=
if
count
=
=
0
{
state
.
type_id_at
(
index
offset
)
?
}
else
{
let
component
=
Self
:
:
check_alias_count
(
components
count
-
1
offset
)
?
;
component
.
type_at
(
index
true
offset
)
?
}
;
check_max
(
state
.
types
.
len
(
)
1
MAX_WASM_TYPES
"
types
"
offset
)
?
;
state
.
types
.
push
(
ty
)
;
}
}
}
crate
:
:
ModuleTypeDeclaration
:
:
Import
(
import
)
=
>
{
state
.
add_import
(
import
features
types
offset
)
?
;
}
}
}
let
imports
=
state
.
imports_for_module_type
(
offset
)
?
;
Ok
(
ModuleType
{
type_size
:
state
.
type_size
imports
exports
:
state
.
exports
}
)
}
fn
create_component_type
(
components
:
&
mut
Vec
<
Self
>
decls
:
Vec
<
crate
:
:
ComponentTypeDeclaration
>
features
:
&
WasmFeatures
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
ComponentType
>
{
components
.
push
(
ComponentState
:
:
new
(
ComponentKind
:
:
ComponentType
)
)
;
for
decl
in
decls
{
match
decl
{
crate
:
:
ComponentTypeDeclaration
:
:
CoreType
(
ty
)
=
>
{
Self
:
:
add_core_type
(
components
ty
features
types
offset
true
)
?
;
}
crate
:
:
ComponentTypeDeclaration
:
:
Type
(
ty
)
=
>
{
Self
:
:
add_type
(
components
ty
features
types
offset
true
)
?
;
}
crate
:
:
ComponentTypeDeclaration
:
:
Export
{
name
ty
}
=
>
{
let
current
=
components
.
last_mut
(
)
.
unwrap
(
)
;
let
ty
=
current
.
check_type_ref
(
&
ty
types
offset
)
?
;
current
.
add_export
(
name
ty
types
offset
true
)
?
;
}
crate
:
:
ComponentTypeDeclaration
:
:
Import
(
import
)
=
>
{
components
.
last_mut
(
)
.
unwrap
(
)
.
add_import
(
import
types
offset
)
?
;
}
crate
:
:
ComponentTypeDeclaration
:
:
Alias
(
alias
)
=
>
{
Self
:
:
add_alias
(
components
alias
types
offset
)
?
;
}
}
;
}
components
.
pop
(
)
.
unwrap
(
)
.
finish
(
types
offset
)
}
fn
create_instance_type
(
components
:
&
mut
Vec
<
Self
>
decls
:
Vec
<
crate
:
:
InstanceTypeDeclaration
>
features
:
&
WasmFeatures
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
ComponentInstanceType
>
{
components
.
push
(
ComponentState
:
:
new
(
ComponentKind
:
:
InstanceType
)
)
;
for
decl
in
decls
{
match
decl
{
crate
:
:
InstanceTypeDeclaration
:
:
CoreType
(
ty
)
=
>
{
Self
:
:
add_core_type
(
components
ty
features
types
offset
true
)
?
;
}
crate
:
:
InstanceTypeDeclaration
:
:
Type
(
ty
)
=
>
{
Self
:
:
add_type
(
components
ty
features
types
offset
true
)
?
;
}
crate
:
:
InstanceTypeDeclaration
:
:
Export
{
name
ty
}
=
>
{
let
current
=
components
.
last_mut
(
)
.
unwrap
(
)
;
let
ty
=
current
.
check_type_ref
(
&
ty
types
offset
)
?
;
current
.
add_export
(
name
ty
types
offset
true
)
?
;
}
crate
:
:
InstanceTypeDeclaration
:
:
Alias
(
alias
)
=
>
{
Self
:
:
add_alias
(
components
alias
types
offset
)
?
;
}
}
;
}
let
mut
state
=
components
.
pop
(
)
.
unwrap
(
)
;
assert
!
(
state
.
imported_resources
.
is_empty
(
)
)
;
Ok
(
ComponentInstanceType
{
type_size
:
state
.
type_size
defined_resources
:
mem
:
:
take
(
&
mut
state
.
defined_resources
)
.
into_iter
(
)
.
map
(
|
(
id
rep
)
|
{
assert
!
(
rep
.
is_none
(
)
)
;
id
}
)
.
collect
(
)
explicit_resources
:
mem
:
:
take
(
&
mut
state
.
explicit_resources
)
exports
:
mem
:
:
take
(
&
mut
state
.
exports
)
}
)
}
fn
create_function_type
(
&
self
ty
:
crate
:
:
ComponentFuncType
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
ComponentFuncType
>
{
let
mut
type_size
=
1
;
let
mut
set
=
HashSet
:
:
with_capacity
(
std
:
:
cmp
:
:
max
(
ty
.
params
.
len
(
)
ty
.
results
.
type_count
(
)
)
)
;
let
params
=
ty
.
params
.
iter
(
)
.
map
(
|
(
name
ty
)
|
{
let
name
=
to_kebab_str
(
name
"
function
parameter
"
offset
)
?
;
if
!
set
.
insert
(
name
)
{
bail
!
(
offset
"
function
parameter
name
{
name
}
conflicts
with
previous
parameter
name
{
prev
}
"
prev
=
set
.
get
(
&
name
)
.
unwrap
(
)
)
;
}
let
ty
=
self
.
create_component_val_type
(
*
ty
types
offset
)
?
;
type_size
=
combine_type_sizes
(
type_size
ty
.
type_size
(
)
offset
)
?
;
Ok
(
(
name
.
to_owned
(
)
ty
)
)
}
)
.
collect
:
:
<
Result
<
_
>
>
(
)
?
;
set
.
clear
(
)
;
let
results
=
ty
.
results
.
iter
(
)
.
map
(
|
(
name
ty
)
|
{
let
name
=
name
.
map
(
|
name
|
{
let
name
=
to_kebab_str
(
name
"
function
result
"
offset
)
?
;
if
!
set
.
insert
(
name
)
{
bail
!
(
offset
"
function
result
name
{
name
}
conflicts
with
previous
result
name
{
prev
}
"
prev
=
set
.
get
(
name
)
.
unwrap
(
)
)
;
}
Ok
(
name
.
to_owned
(
)
)
}
)
.
transpose
(
)
?
;
let
ty
=
self
.
create_component_val_type
(
*
ty
types
offset
)
?
;
type_size
=
combine_type_sizes
(
type_size
ty
.
type_size
(
)
offset
)
?
;
Ok
(
(
name
ty
)
)
}
)
.
collect
:
:
<
Result
<
_
>
>
(
)
?
;
Ok
(
ComponentFuncType
{
type_size
params
results
}
)
}
fn
instantiate_module
(
&
self
module_index
:
u32
module_args
:
Vec
<
crate
:
:
InstantiationArg
>
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
TypeId
>
{
fn
insert_arg
<
'
a
>
(
name
:
&
'
a
str
arg
:
&
'
a
InstanceType
args
:
&
mut
IndexMap
<
&
'
a
str
&
'
a
InstanceType
>
offset
:
usize
)
-
>
Result
<
(
)
>
{
if
args
.
insert
(
name
arg
)
.
is_some
(
)
{
bail
!
(
offset
"
duplicate
module
instantiation
argument
named
{
name
}
"
)
;
}
Ok
(
(
)
)
}
let
module_type_id
=
self
.
module_at
(
module_index
offset
)
?
;
let
mut
args
=
IndexMap
:
:
new
(
)
;
for
module_arg
in
module_args
{
match
module_arg
.
kind
{
InstantiationArgKind
:
:
Instance
=
>
{
let
instance_type
=
types
[
self
.
core_instance_at
(
module_arg
.
index
offset
)
?
]
.
unwrap_instance
(
)
;
insert_arg
(
module_arg
.
name
instance_type
&
mut
args
offset
)
?
;
}
}
}
let
module_type
=
types
[
module_type_id
]
.
unwrap_module
(
)
;
let
cx
=
SubtypeCx
:
:
new
(
types
types
)
;
for
(
(
module
name
)
expected
)
in
module_type
.
imports
.
iter
(
)
{
let
instance
=
args
.
get
(
module
.
as_str
(
)
)
.
ok_or_else
(
|
|
{
format_err
!
(
offset
"
missing
module
instantiation
argument
named
{
module
}
"
)
}
)
?
;
let
arg
=
instance
.
internal_exports
(
types
)
.
get
(
name
.
as_str
(
)
)
.
ok_or_else
(
|
|
{
format_err
!
(
offset
"
module
instantiation
argument
{
module
}
does
not
\
export
an
item
named
{
name
}
"
)
}
)
?
;
cx
.
entity_type
(
arg
expected
offset
)
.
with_context
(
|
|
{
format
!
(
"
type
mismatch
for
export
{
name
}
of
module
\
instantiation
argument
{
module
}
"
)
}
)
?
;
}
let
ty
=
Type
:
:
Instance
(
Box
:
:
new
(
InstanceType
{
type_size
:
module_type
.
exports
.
iter
(
)
.
fold
(
1
|
acc
(
_
ty
)
|
acc
+
ty
.
type_size
(
)
)
kind
:
InstanceTypeKind
:
:
Instantiated
(
module_type_id
)
}
)
)
;
Ok
(
types
.
push_ty
(
ty
)
)
}
fn
instantiate_component
(
&
mut
self
component_index
:
u32
component_args
:
Vec
<
crate
:
:
ComponentInstantiationArg
>
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
TypeId
>
{
let
component_type_id
=
self
.
component_at
(
component_index
offset
)
?
;
let
mut
args
=
IndexMap
:
:
new
(
)
;
for
component_arg
in
component_args
{
let
ty
=
match
component_arg
.
kind
{
ComponentExternalKind
:
:
Module
=
>
{
ComponentEntityType
:
:
Module
(
self
.
module_at
(
component_arg
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Component
=
>
{
ComponentEntityType
:
:
Component
(
self
.
component_at
(
component_arg
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Instance
=
>
{
ComponentEntityType
:
:
Instance
(
self
.
instance_at
(
component_arg
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Func
=
>
{
ComponentEntityType
:
:
Func
(
self
.
function_at
(
component_arg
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Value
=
>
{
ComponentEntityType
:
:
Value
(
*
self
.
value_at
(
component_arg
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Type
=
>
{
let
ty
=
self
.
type_at
(
component_arg
.
index
false
offset
)
?
;
ComponentEntityType
:
:
Type
{
referenced
:
ty
created
:
ty
}
}
}
;
match
args
.
entry
(
component_arg
.
name
.
to_string
(
)
)
{
Entry
:
:
Occupied
(
e
)
=
>
{
bail
!
(
offset
"
instantiation
argument
{
name
}
conflicts
with
previous
argument
{
prev
}
"
prev
=
e
.
key
(
)
name
=
component_arg
.
name
)
;
}
Entry
:
:
Vacant
(
e
)
=
>
{
e
.
insert
(
ty
)
;
}
}
}
let
component_type
=
types
[
component_type_id
]
.
unwrap_component
(
)
;
let
mut
exports
=
component_type
.
exports
.
clone
(
)
;
let
type_size
=
component_type
.
exports
.
iter
(
)
.
fold
(
1
|
acc
(
_
ty
)
|
acc
+
ty
.
type_size
(
)
)
;
let
mut
mapping
=
SubtypeCx
:
:
new
(
types
types
)
.
open_instance_type
(
&
args
component_type_id
ExternKind
:
:
Import
offset
)
?
;
let
fresh_defined_resources
=
(
0
.
.
component_type
.
defined_resources
.
len
(
)
)
.
map
(
|
_
|
types
.
alloc_resource_id
(
)
)
.
collect
:
:
<
IndexSet
<
_
>
>
(
)
;
let
component_type
=
types
[
component_type_id
]
.
unwrap_component
(
)
;
for
(
(
old
_path
)
new
)
in
component_type
.
defined_resources
.
iter
(
)
.
zip
(
&
fresh_defined_resources
)
{
let
prev
=
mapping
.
resources
.
insert
(
*
old
*
new
)
;
assert
!
(
prev
.
is_none
(
)
)
;
}
for
entity
in
exports
.
values_mut
(
)
{
types
.
remap_component_entity
(
entity
&
mut
mapping
)
;
}
let
component_type
=
types
[
component_type_id
]
.
unwrap_component
(
)
;
let
explicit_resources
=
component_type
.
explicit_resources
.
iter
(
)
.
map
(
|
(
id
path
)
|
{
(
mapping
.
resources
.
get
(
id
)
.
copied
(
)
.
unwrap_or
(
*
id
)
path
.
clone
(
)
)
}
)
.
collect
:
:
<
IndexMap
<
_
_
>
>
(
)
;
if
cfg
!
(
debug_assertions
)
{
let
mut
free
=
IndexSet
:
:
new
(
)
;
for
ty
in
exports
.
values
(
)
{
types
.
free_variables_component_entity
(
ty
&
mut
free
)
;
}
assert
!
(
fresh_defined_resources
.
is_subset
(
&
free
)
)
;
for
resource
in
fresh_defined_resources
.
iter
(
)
{
assert
!
(
explicit_resources
.
contains_key
(
resource
)
)
;
}
}
for
resource
in
fresh_defined_resources
{
self
.
defined_resources
.
insert
(
resource
None
)
;
}
let
ty
=
Type
:
:
ComponentInstance
(
Box
:
:
new
(
ComponentInstanceType
{
type_size
defined_resources
:
Default
:
:
default
(
)
explicit_resources
exports
}
)
)
;
Ok
(
types
.
push_ty
(
ty
)
)
}
fn
instantiate_exports
(
&
mut
self
exports
:
Vec
<
crate
:
:
ComponentExport
>
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
TypeId
>
{
let
mut
type_size
=
1
;
let
mut
inst_exports
=
IndexMap
:
:
new
(
)
;
let
mut
explicit_resources
=
IndexMap
:
:
new
(
)
;
let
mut
kebab_names
=
IndexSet
:
:
new
(
)
;
let
names
=
KebabNameContext
:
:
default
(
)
;
for
export
in
exports
{
assert
!
(
export
.
ty
.
is_none
(
)
)
;
let
ty
=
match
export
.
kind
{
ComponentExternalKind
:
:
Module
=
>
{
ComponentEntityType
:
:
Module
(
self
.
module_at
(
export
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Component
=
>
{
ComponentEntityType
:
:
Component
(
self
.
component_at
(
export
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Instance
=
>
{
let
ty
=
self
.
instance_at
(
export
.
index
offset
)
?
;
explicit_resources
.
extend
(
types
[
ty
]
.
unwrap_component_instance
(
)
.
explicit_resources
.
iter
(
)
.
map
(
|
(
id
path
)
|
{
let
mut
new_path
=
vec
!
[
inst_exports
.
len
(
)
]
;
new_path
.
extend
(
path
)
;
(
*
id
new_path
)
}
)
)
;
ComponentEntityType
:
:
Instance
(
ty
)
}
ComponentExternalKind
:
:
Func
=
>
{
ComponentEntityType
:
:
Func
(
self
.
function_at
(
export
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Value
=
>
{
ComponentEntityType
:
:
Value
(
*
self
.
value_at
(
export
.
index
offset
)
?
)
}
ComponentExternalKind
:
:
Type
=
>
{
let
ty
=
self
.
type_at
(
export
.
index
false
offset
)
?
;
if
let
Type
:
:
Resource
(
id
)
=
&
types
[
ty
]
{
explicit_resources
.
insert
(
*
id
vec
!
[
inst_exports
.
len
(
)
]
)
;
}
ComponentEntityType
:
:
Type
{
referenced
:
ty
created
:
ty
}
}
}
;
names
.
validate_extern
(
export
.
name
.
into
(
)
"
instance
export
"
&
ty
types
offset
&
mut
kebab_names
&
mut
inst_exports
&
mut
type_size
)
?
;
}
let
ty
=
Type
:
:
ComponentInstance
(
Box
:
:
new
(
ComponentInstanceType
{
type_size
explicit_resources
exports
:
inst_exports
defined_resources
:
Default
:
:
default
(
)
}
)
)
;
Ok
(
types
.
push_ty
(
ty
)
)
}
fn
instantiate_core_exports
(
&
mut
self
exports
:
Vec
<
crate
:
:
Export
>
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
TypeId
>
{
fn
insert_export
(
name
:
&
str
export
:
EntityType
exports
:
&
mut
IndexMap
<
String
EntityType
>
type_size
:
&
mut
u32
offset
:
usize
)
-
>
Result
<
(
)
>
{
*
type_size
=
combine_type_sizes
(
*
type_size
export
.
type_size
(
)
offset
)
?
;
if
exports
.
insert
(
name
.
to_string
(
)
export
)
.
is_some
(
)
{
bail
!
(
offset
"
duplicate
instantiation
export
name
{
name
}
already
defined
"
)
}
Ok
(
(
)
)
}
let
mut
type_size
=
1
;
let
mut
inst_exports
=
IndexMap
:
:
new
(
)
;
for
export
in
exports
{
match
export
.
kind
{
ExternalKind
:
:
Func
=
>
{
insert_export
(
export
.
name
EntityType
:
:
Func
(
self
.
core_function_at
(
export
.
index
offset
)
?
)
&
mut
inst_exports
&
mut
type_size
offset
)
?
;
}
ExternalKind
:
:
Table
=
>
insert_export
(
export
.
name
EntityType
:
:
Table
(
*
self
.
table_at
(
export
.
index
offset
)
?
)
&
mut
inst_exports
&
mut
type_size
offset
)
?
ExternalKind
:
:
Memory
=
>
insert_export
(
export
.
name
EntityType
:
:
Memory
(
*
self
.
memory_at
(
export
.
index
offset
)
?
)
&
mut
inst_exports
&
mut
type_size
offset
)
?
ExternalKind
:
:
Global
=
>
{
insert_export
(
export
.
name
EntityType
:
:
Global
(
*
self
.
global_at
(
export
.
index
offset
)
?
)
&
mut
inst_exports
&
mut
type_size
offset
)
?
;
}
ExternalKind
:
:
Tag
=
>
insert_export
(
export
.
name
EntityType
:
:
Tag
(
self
.
core_function_at
(
export
.
index
offset
)
?
)
&
mut
inst_exports
&
mut
type_size
offset
)
?
}
}
let
ty
=
Type
:
:
Instance
(
Box
:
:
new
(
InstanceType
{
type_size
kind
:
InstanceTypeKind
:
:
Exports
(
inst_exports
)
}
)
)
;
Ok
(
types
.
push_ty
(
ty
)
)
}
fn
alias_core_instance_export
(
&
mut
self
instance_index
:
u32
kind
:
ExternalKind
name
:
&
str
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
(
)
>
{
macro_rules
!
push_module_export
{
(
expected
:
path
collection
:
ident
ty
:
literal
)
=
>
{
{
match
self
.
core_instance_export
(
instance_index
name
types
offset
)
?
{
expected
(
ty
)
=
>
{
self
.
collection
.
push
(
*
ty
)
;
Ok
(
(
)
)
}
_
=
>
{
bail
!
(
offset
"
export
{
name
}
for
core
instance
{
instance_index
}
is
not
a
{
}
"
ty
)
}
}
}
}
;
}
match
kind
{
ExternalKind
:
:
Func
=
>
{
check_max
(
self
.
function_count
(
)
1
MAX_WASM_FUNCTIONS
"
functions
"
offset
)
?
;
push_module_export
!
(
EntityType
:
:
Func
core_funcs
"
function
"
)
}
ExternalKind
:
:
Table
=
>
{
check_max
(
self
.
core_tables
.
len
(
)
1
MAX_WASM_TABLES
"
tables
"
offset
)
?
;
push_module_export
!
(
EntityType
:
:
Table
core_tables
"
table
"
)
}
ExternalKind
:
:
Memory
=
>
{
check_max
(
self
.
core_memories
.
len
(
)
1
MAX_WASM_MEMORIES
"
memories
"
offset
)
?
;
push_module_export
!
(
EntityType
:
:
Memory
core_memories
"
memory
"
)
}
ExternalKind
:
:
Global
=
>
{
check_max
(
self
.
core_globals
.
len
(
)
1
MAX_WASM_GLOBALS
"
globals
"
offset
)
?
;
push_module_export
!
(
EntityType
:
:
Global
core_globals
"
global
"
)
}
ExternalKind
:
:
Tag
=
>
{
check_max
(
self
.
core_tags
.
len
(
)
1
MAX_WASM_TAGS
"
tags
"
offset
)
?
;
push_module_export
!
(
EntityType
:
:
Tag
core_tags
"
tag
"
)
}
}
}
fn
alias_instance_export
(
&
mut
self
instance_index
:
u32
kind
:
ComponentExternalKind
name
:
&
str
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
mut
ty
=
match
types
[
self
.
instance_at
(
instance_index
offset
)
?
]
.
unwrap_component_instance
(
)
.
exports
.
get
(
name
)
{
Some
(
ty
)
=
>
*
ty
None
=
>
bail
!
(
offset
"
instance
{
instance_index
}
has
no
export
named
{
name
}
"
)
}
;
let
ok
=
match
(
&
ty
kind
)
{
(
ComponentEntityType
:
:
Module
(
_
)
ComponentExternalKind
:
:
Module
)
=
>
true
(
ComponentEntityType
:
:
Module
(
_
)
_
)
=
>
false
(
ComponentEntityType
:
:
Component
(
_
)
ComponentExternalKind
:
:
Component
)
=
>
true
(
ComponentEntityType
:
:
Component
(
_
)
_
)
=
>
false
(
ComponentEntityType
:
:
Func
(
_
)
ComponentExternalKind
:
:
Func
)
=
>
true
(
ComponentEntityType
:
:
Func
(
_
)
_
)
=
>
false
(
ComponentEntityType
:
:
Instance
(
_
)
ComponentExternalKind
:
:
Instance
)
=
>
true
(
ComponentEntityType
:
:
Instance
(
_
)
_
)
=
>
false
(
ComponentEntityType
:
:
Value
(
_
)
ComponentExternalKind
:
:
Value
)
=
>
true
(
ComponentEntityType
:
:
Value
(
_
)
_
)
=
>
false
(
ComponentEntityType
:
:
Type
{
.
.
}
ComponentExternalKind
:
:
Type
)
=
>
true
(
ComponentEntityType
:
:
Type
{
.
.
}
_
)
=
>
false
}
;
if
!
ok
{
bail
!
(
offset
"
export
{
name
}
for
instance
{
instance_index
}
is
not
a
{
}
"
kind
.
desc
(
)
)
;
}
self
.
add_entity
(
&
mut
ty
None
types
offset
)
?
;
Ok
(
(
)
)
}
fn
alias_module
(
components
:
&
mut
[
Self
]
count
:
u32
index
:
u32
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
component
=
Self
:
:
check_alias_count
(
components
count
offset
)
?
;
let
ty
=
component
.
module_at
(
index
offset
)
?
;
let
current
=
components
.
last_mut
(
)
.
unwrap
(
)
;
check_max
(
current
.
core_modules
.
len
(
)
1
MAX_WASM_MODULES
"
modules
"
offset
)
?
;
current
.
core_modules
.
push
(
ty
)
;
Ok
(
(
)
)
}
fn
alias_component
(
components
:
&
mut
[
Self
]
count
:
u32
index
:
u32
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
component
=
Self
:
:
check_alias_count
(
components
count
offset
)
?
;
let
ty
=
component
.
component_at
(
index
offset
)
?
;
let
current
=
components
.
last_mut
(
)
.
unwrap
(
)
;
check_max
(
current
.
components
.
len
(
)
1
MAX_WASM_COMPONENTS
"
components
"
offset
)
?
;
current
.
components
.
push
(
ty
)
;
Ok
(
(
)
)
}
fn
alias_core_type
(
components
:
&
mut
[
Self
]
count
:
u32
index
:
u32
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
component
=
Self
:
:
check_alias_count
(
components
count
offset
)
?
;
let
ty
=
component
.
type_at
(
index
true
offset
)
?
;
let
current
=
components
.
last_mut
(
)
.
unwrap
(
)
;
check_max
(
current
.
type_count
(
)
1
MAX_WASM_TYPES
"
types
"
offset
)
?
;
current
.
core_types
.
push
(
ty
)
;
Ok
(
(
)
)
}
fn
alias_type
(
components
:
&
mut
[
Self
]
count
:
u32
index
:
u32
types
:
&
mut
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
component
=
Self
:
:
check_alias_count
(
components
count
offset
)
?
;
let
ty
=
component
.
type_at
(
index
false
offset
)
?
;
let
pos_after_component
=
components
.
len
(
)
-
(
count
as
usize
)
;
if
let
Some
(
component
)
=
components
.
get
(
pos_after_component
)
{
if
component
.
kind
=
=
ComponentKind
:
:
Component
{
let
mut
free
=
IndexSet
:
:
new
(
)
;
types
.
free_variables_type_id
(
ty
&
mut
free
)
;
if
!
free
.
is_empty
(
)
{
bail
!
(
offset
"
cannot
alias
outer
type
which
transitively
refers
\
to
resources
not
defined
in
the
current
component
"
)
;
}
}
}
let
current
=
components
.
last_mut
(
)
.
unwrap
(
)
;
check_max
(
current
.
type_count
(
)
1
MAX_WASM_TYPES
"
types
"
offset
)
?
;
current
.
types
.
push
(
ty
)
;
Ok
(
(
)
)
}
fn
check_alias_count
(
components
:
&
[
Self
]
count
:
u32
offset
:
usize
)
-
>
Result
<
&
Self
>
{
let
count
=
count
as
usize
;
if
count
>
=
components
.
len
(
)
{
bail
!
(
offset
"
invalid
outer
alias
count
of
{
count
}
"
)
;
}
Ok
(
&
components
[
components
.
len
(
)
-
count
-
1
]
)
}
fn
create_defined_type
(
&
self
ty
:
crate
:
:
ComponentDefinedType
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
ComponentDefinedType
>
{
match
ty
{
crate
:
:
ComponentDefinedType
:
:
Primitive
(
ty
)
=
>
Ok
(
ComponentDefinedType
:
:
Primitive
(
ty
)
)
crate
:
:
ComponentDefinedType
:
:
Record
(
fields
)
=
>
{
self
.
create_record_type
(
fields
.
as_ref
(
)
types
offset
)
}
crate
:
:
ComponentDefinedType
:
:
Variant
(
cases
)
=
>
{
self
.
create_variant_type
(
cases
.
as_ref
(
)
types
offset
)
}
crate
:
:
ComponentDefinedType
:
:
List
(
ty
)
=
>
Ok
(
ComponentDefinedType
:
:
List
(
self
.
create_component_val_type
(
ty
types
offset
)
?
)
)
crate
:
:
ComponentDefinedType
:
:
Tuple
(
tys
)
=
>
{
self
.
create_tuple_type
(
tys
.
as_ref
(
)
types
offset
)
}
crate
:
:
ComponentDefinedType
:
:
Flags
(
names
)
=
>
{
self
.
create_flags_type
(
names
.
as_ref
(
)
offset
)
}
crate
:
:
ComponentDefinedType
:
:
Enum
(
cases
)
=
>
{
self
.
create_enum_type
(
cases
.
as_ref
(
)
offset
)
}
crate
:
:
ComponentDefinedType
:
:
Union
(
tys
)
=
>
{
self
.
create_union_type
(
tys
.
as_ref
(
)
types
offset
)
}
crate
:
:
ComponentDefinedType
:
:
Option
(
ty
)
=
>
Ok
(
ComponentDefinedType
:
:
Option
(
self
.
create_component_val_type
(
ty
types
offset
)
?
)
)
crate
:
:
ComponentDefinedType
:
:
Result
{
ok
err
}
=
>
Ok
(
ComponentDefinedType
:
:
Result
{
ok
:
ok
.
map
(
|
ty
|
self
.
create_component_val_type
(
ty
types
offset
)
)
.
transpose
(
)
?
err
:
err
.
map
(
|
ty
|
self
.
create_component_val_type
(
ty
types
offset
)
)
.
transpose
(
)
?
}
)
crate
:
:
ComponentDefinedType
:
:
Own
(
idx
)
=
>
Ok
(
ComponentDefinedType
:
:
Own
(
self
.
resource_at
(
idx
types
offset
)
?
)
)
crate
:
:
ComponentDefinedType
:
:
Borrow
(
idx
)
=
>
Ok
(
ComponentDefinedType
:
:
Borrow
(
self
.
resource_at
(
idx
types
offset
)
?
)
)
}
}
fn
create_record_type
(
&
self
fields
:
&
[
(
&
str
crate
:
:
ComponentValType
)
]
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
ComponentDefinedType
>
{
let
mut
type_size
=
1
;
let
mut
field_map
=
IndexMap
:
:
with_capacity
(
fields
.
len
(
)
)
;
for
(
name
ty
)
in
fields
{
let
name
=
to_kebab_str
(
name
"
record
field
"
offset
)
?
;
let
ty
=
self
.
create_component_val_type
(
*
ty
types
offset
)
?
;
match
field_map
.
entry
(
name
.
to_owned
(
)
)
{
Entry
:
:
Occupied
(
e
)
=
>
bail
!
(
offset
"
record
field
name
{
name
}
conflicts
with
previous
field
name
{
prev
}
"
prev
=
e
.
key
(
)
)
Entry
:
:
Vacant
(
e
)
=
>
{
type_size
=
combine_type_sizes
(
type_size
ty
.
type_size
(
)
offset
)
?
;
e
.
insert
(
ty
)
;
}
}
}
Ok
(
ComponentDefinedType
:
:
Record
(
RecordType
{
type_size
fields
:
field_map
}
)
)
}
fn
create_variant_type
(
&
self
cases
:
&
[
crate
:
:
VariantCase
]
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
ComponentDefinedType
>
{
let
mut
type_size
=
1
;
let
mut
case_map
:
IndexMap
<
KebabString
VariantCase
>
=
IndexMap
:
:
with_capacity
(
cases
.
len
(
)
)
;
if
cases
.
is_empty
(
)
{
return
Err
(
BinaryReaderError
:
:
new
(
"
variant
type
must
have
at
least
one
case
"
offset
)
)
;
}
if
cases
.
len
(
)
>
u32
:
:
MAX
as
usize
{
return
Err
(
BinaryReaderError
:
:
new
(
"
variant
type
cannot
be
represented
with
a
32
-
bit
discriminant
value
"
offset
)
)
;
}
for
(
i
case
)
in
cases
.
iter
(
)
.
enumerate
(
)
{
if
let
Some
(
refines
)
=
case
.
refines
{
if
refines
>
=
i
as
u32
{
return
Err
(
BinaryReaderError
:
:
new
(
"
variant
case
can
only
refine
a
previously
defined
case
"
offset
)
)
;
}
}
let
name
=
to_kebab_str
(
case
.
name
"
variant
case
"
offset
)
?
;
let
ty
=
case
.
ty
.
map
(
|
ty
|
self
.
create_component_val_type
(
ty
types
offset
)
)
.
transpose
(
)
?
;
match
case_map
.
entry
(
name
.
to_owned
(
)
)
{
Entry
:
:
Occupied
(
e
)
=
>
bail
!
(
offset
"
variant
case
name
{
name
}
conflicts
with
previous
case
name
{
prev
}
"
name
=
case
.
name
prev
=
e
.
key
(
)
)
Entry
:
:
Vacant
(
e
)
=
>
{
type_size
=
combine_type_sizes
(
type_size
ty
.
map
(
|
ty
|
ty
.
type_size
(
)
)
.
unwrap_or
(
1
)
offset
)
?
;
e
.
insert
(
VariantCase
{
ty
refines
:
case
.
refines
.
map
(
|
i
|
KebabStr
:
:
new_unchecked
(
cases
[
i
as
usize
]
.
name
)
.
to_owned
(
)
)
}
)
;
}
}
}
Ok
(
ComponentDefinedType
:
:
Variant
(
VariantType
{
type_size
cases
:
case_map
}
)
)
}
fn
create_tuple_type
(
&
self
tys
:
&
[
crate
:
:
ComponentValType
]
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
ComponentDefinedType
>
{
let
mut
type_size
=
1
;
let
types
=
tys
.
iter
(
)
.
map
(
|
ty
|
{
let
ty
=
self
.
create_component_val_type
(
*
ty
types
offset
)
?
;
type_size
=
combine_type_sizes
(
type_size
ty
.
type_size
(
)
offset
)
?
;
Ok
(
ty
)
}
)
.
collect
:
:
<
Result
<
_
>
>
(
)
?
;
Ok
(
ComponentDefinedType
:
:
Tuple
(
TupleType
{
type_size
types
}
)
)
}
fn
create_flags_type
(
&
self
names
:
&
[
&
str
]
offset
:
usize
)
-
>
Result
<
ComponentDefinedType
>
{
let
mut
names_set
=
IndexSet
:
:
with_capacity
(
names
.
len
(
)
)
;
for
name
in
names
{
let
name
=
to_kebab_str
(
name
"
flag
"
offset
)
?
;
if
!
names_set
.
insert
(
name
.
to_owned
(
)
)
{
bail
!
(
offset
"
flag
name
{
name
}
conflicts
with
previous
flag
name
{
prev
}
"
prev
=
names_set
.
get
(
name
)
.
unwrap
(
)
)
;
}
}
Ok
(
ComponentDefinedType
:
:
Flags
(
names_set
)
)
}
fn
create_enum_type
(
&
self
cases
:
&
[
&
str
]
offset
:
usize
)
-
>
Result
<
ComponentDefinedType
>
{
if
cases
.
len
(
)
>
u32
:
:
MAX
as
usize
{
return
Err
(
BinaryReaderError
:
:
new
(
"
enumeration
type
cannot
be
represented
with
a
32
-
bit
discriminant
value
"
offset
)
)
;
}
let
mut
tags
=
IndexSet
:
:
with_capacity
(
cases
.
len
(
)
)
;
for
tag
in
cases
{
let
tag
=
to_kebab_str
(
tag
"
enum
tag
"
offset
)
?
;
if
!
tags
.
insert
(
tag
.
to_owned
(
)
)
{
bail
!
(
offset
"
enum
tag
name
{
tag
}
conflicts
with
previous
tag
name
{
prev
}
"
prev
=
tags
.
get
(
tag
)
.
unwrap
(
)
)
;
}
}
Ok
(
ComponentDefinedType
:
:
Enum
(
tags
)
)
}
fn
create_union_type
(
&
self
tys
:
&
[
crate
:
:
ComponentValType
]
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
ComponentDefinedType
>
{
let
mut
type_size
=
1
;
let
types
=
tys
.
iter
(
)
.
map
(
|
ty
|
{
let
ty
=
self
.
create_component_val_type
(
*
ty
types
offset
)
?
;
type_size
=
combine_type_sizes
(
type_size
ty
.
type_size
(
)
offset
)
?
;
Ok
(
ty
)
}
)
.
collect
:
:
<
Result
<
_
>
>
(
)
?
;
Ok
(
ComponentDefinedType
:
:
Union
(
UnionType
{
type_size
types
}
)
)
}
fn
create_component_val_type
(
&
self
ty
:
crate
:
:
ComponentValType
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
ComponentValType
>
{
Ok
(
match
ty
{
crate
:
:
ComponentValType
:
:
Primitive
(
pt
)
=
>
ComponentValType
:
:
Primitive
(
pt
)
crate
:
:
ComponentValType
:
:
Type
(
idx
)
=
>
{
ComponentValType
:
:
Type
(
self
.
defined_type_at
(
idx
types
offset
)
?
)
}
}
)
}
pub
fn
type_at
(
&
self
idx
:
u32
core
:
bool
offset
:
usize
)
-
>
Result
<
TypeId
>
{
let
types
=
if
core
{
&
self
.
core_types
}
else
{
&
self
.
types
}
;
types
.
get
(
idx
as
usize
)
.
copied
(
)
.
ok_or_else
(
|
|
format_err
!
(
offset
"
unknown
type
{
idx
}
:
type
index
out
of
bounds
"
)
)
}
fn
function_type_at
<
'
a
>
(
&
self
idx
:
u32
types
:
&
'
a
TypeList
offset
:
usize
)
-
>
Result
<
&
'
a
ComponentFuncType
>
{
match
&
types
[
self
.
type_at
(
idx
false
offset
)
?
]
{
Type
:
:
ComponentFunc
(
f
)
=
>
Ok
(
f
)
_
=
>
bail
!
(
offset
"
type
index
{
idx
}
is
not
a
function
type
"
)
}
}
fn
function_at
(
&
self
idx
:
u32
offset
:
usize
)
-
>
Result
<
TypeId
>
{
self
.
funcs
.
get
(
idx
as
usize
)
.
copied
(
)
.
ok_or_else
(
|
|
{
format_err
!
(
offset
"
unknown
function
{
idx
}
:
function
index
out
of
bounds
"
)
}
)
}
fn
component_at
(
&
self
idx
:
u32
offset
:
usize
)
-
>
Result
<
TypeId
>
{
self
.
components
.
get
(
idx
as
usize
)
.
copied
(
)
.
ok_or_else
(
|
|
{
format_err
!
(
offset
"
unknown
component
{
idx
}
:
component
index
out
of
bounds
"
)
}
)
}
fn
instance_at
(
&
self
idx
:
u32
offset
:
usize
)
-
>
Result
<
TypeId
>
{
self
.
instances
.
get
(
idx
as
usize
)
.
copied
(
)
.
ok_or_else
(
|
|
{
format_err
!
(
offset
"
unknown
instance
{
idx
}
:
instance
index
out
of
bounds
"
)
}
)
}
fn
value_at
(
&
mut
self
idx
:
u32
offset
:
usize
)
-
>
Result
<
&
ComponentValType
>
{
match
self
.
values
.
get_mut
(
idx
as
usize
)
{
Some
(
(
ty
used
)
)
if
!
*
used
=
>
{
*
used
=
true
;
Ok
(
ty
)
}
Some
(
_
)
=
>
bail
!
(
offset
"
value
{
idx
}
cannot
be
used
more
than
once
"
)
None
=
>
bail
!
(
offset
"
unknown
value
{
idx
}
:
value
index
out
of
bounds
"
)
}
}
fn
defined_type_at
(
&
self
idx
:
u32
types
:
&
TypeList
offset
:
usize
)
-
>
Result
<
TypeId
>
{
let
id
=
self
.
type_at
(
idx
false
offset
)
?
;
match
&
types
[
id
]
{
Type
:
:
Defined
(
_
)
=
>
Ok
(
id
)
_
=
>
bail
!
(
offset
"
type
index
{
}
is
not
a
defined
type
"
idx
)
}
}
fn
core_function_at
(
&
self
idx
:
u32
offset
:
usize
)
-
>
Result
<
TypeId
>
{
match
self
.
core_funcs
.
get
(
idx
as
usize
)
{
Some
(
id
)
=
>
Ok
(
*
id
)
None
=
>
bail
!
(
offset
"
unknown
core
function
{
idx
}
:
function
index
out
of
bounds
"
)
}
}
fn
module_at
(
&
self
idx
:
u32
offset
:
usize
)
-
>
Result
<
TypeId
>
{
match
self
.
core_modules
.
get
(
idx
as
usize
)
{
Some
(
id
)
=
>
Ok
(
*
id
)
None
=
>
bail
!
(
offset
"
unknown
module
{
idx
}
:
module
index
out
of
bounds
"
)
}
}
fn
core_instance_at
(
&
self
idx
:
u32
offset
:
usize
)
-
>
Result
<
TypeId
>
{
match
self
.
core_instances
.
get
(
idx
as
usize
)
{
Some
(
id
)
=
>
Ok
(
*
id
)
None
=
>
bail
!
(
offset
"
unknown
core
instance
{
idx
}
:
instance
index
out
of
bounds
"
)
}
}
fn
core_instance_export
<
'
a
>
(
&
self
instance_index
:
u32
name
:
&
str
types
:
&
'
a
TypeList
offset
:
usize
)
-
>
Result
<
&
'
a
EntityType
>
{
match
types
[
self
.
core_instance_at
(
instance_index
offset
)
?
]
.
unwrap_instance
(
)
.
internal_exports
(
types
)
.
get
(
name
)
{
Some
(
export
)
=
>
Ok
(
export
)
None
=
>
bail
!
(
offset
"
core
instance
{
instance_index
}
has
no
export
named
{
name
}
"
)
}
}
fn
global_at
(
&
self
idx
:
u32
offset
:
usize
)
-
>
Result
<
&
GlobalType
>
{
match
self
.
core_globals
.
get
(
idx
as
usize
)
{
Some
(
t
)
=
>
Ok
(
t
)
None
=
>
bail
!
(
offset
"
unknown
global
{
idx
}
:
global
index
out
of
bounds
"
)
}
}
fn
table_at
(
&
self
idx
:
u32
offset
:
usize
)
-
>
Result
<
&
TableType
>
{
match
self
.
core_tables
.
get
(
idx
as
usize
)
{
Some
(
t
)
=
>
Ok
(
t
)
None
=
>
bail
!
(
offset
"
unknown
table
{
idx
}
:
table
index
out
of
bounds
"
)
}
}
fn
memory_at
(
&
self
idx
:
u32
offset
:
usize
)
-
>
Result
<
&
MemoryType
>
{
match
self
.
core_memories
.
get
(
idx
as
usize
)
{
Some
(
t
)
=
>
Ok
(
t
)
None
=
>
bail
!
(
offset
"
unknown
memory
{
idx
}
:
memory
index
out
of
bounds
"
)
}
}
pub
fn
finish
(
&
mut
self
types
:
&
TypeAlloc
offset
:
usize
)
-
>
Result
<
ComponentType
>
{
let
mut
ty
=
ComponentType
{
type_size
:
self
.
type_size
imports
:
self
.
imports
.
clone
(
)
exports
:
self
.
exports
.
clone
(
)
defined_resources
:
Default
:
:
default
(
)
imported_resources
:
mem
:
:
take
(
&
mut
self
.
imported_resources
)
.
into_iter
(
)
.
collect
(
)
explicit_resources
:
mem
:
:
take
(
&
mut
self
.
explicit_resources
)
}
;
let
mut
free
=
IndexSet
:
:
default
(
)
;
for
ty
in
ty
.
imports
.
values
(
)
{
types
.
free_variables_component_entity
(
ty
&
mut
free
)
;
}
for
(
resource
_path
)
in
self
.
defined_resources
.
iter
(
)
{
if
free
.
contains
(
resource
)
{
bail
!
(
offset
"
local
resource
type
found
in
imports
"
)
;
}
}
free
.
clear
(
)
;
for
ty
in
ty
.
exports
.
values
(
)
{
types
.
free_variables_component_entity
(
ty
&
mut
free
)
;
}
for
(
id
_rep
)
in
mem
:
:
take
(
&
mut
self
.
defined_resources
)
{
if
!
free
.
contains
(
&
id
)
{
continue
;
}
let
path
=
match
ty
.
explicit_resources
.
get
(
&
id
)
.
cloned
(
)
{
Some
(
path
)
=
>
path
None
=
>
bail
!
(
offset
"
local
resource
type
found
in
export
but
not
exported
itself
"
)
}
;
ty
.
defined_resources
.
push
(
(
id
path
)
)
;
}
Ok
(
ty
)
}
}
impl
KebabNameContext
{
fn
register
(
&
mut
self
name
:
&
str
id
:
TypeId
)
{
let
idx
=
self
.
all_resource_names
.
len
(
)
;
let
prev
=
self
.
resource_name_map
.
insert
(
id
idx
)
;
assert
!
(
prev
.
is_none
(
)
)
;
self
.
all_resource_names
.
insert
(
name
.
to_string
(
)
)
;
}
fn
validate_extern
(
&
self
name
:
ComponentExternName
<
'
_
>
desc
:
&
str
ty
:
&
ComponentEntityType
types
:
&
TypeAlloc
offset
:
usize
kebab_names
:
&
mut
IndexSet
<
KebabName
>
items
:
&
mut
IndexMap
<
String
ComponentEntityType
>
type_size
:
&
mut
u32
)
-
>
Result
<
(
)
>
{
let
kebab
=
KebabName
:
:
new
(
name
offset
)
.
with_context
(
|
|
{
format
!
(
"
{
desc
}
name
{
}
is
not
a
valid
extern
name
"
name
.
as_str
(
)
)
}
)
?
;
self
.
validate
(
&
kebab
ty
types
offset
)
.
with_context
(
|
|
format
!
(
"
{
desc
}
name
{
kebab
}
is
not
valid
"
)
)
?
;
if
let
ComponentExternName
:
:
Kebab
(
_
)
=
name
{
if
let
Some
(
prev
)
=
kebab_names
.
replace
(
kebab
.
clone
(
)
)
{
bail
!
(
offset
"
{
desc
}
name
{
kebab
}
conflicts
with
previous
name
{
prev
}
"
)
;
}
}
match
items
.
entry
(
kebab
.
into
(
)
)
{
Entry
:
:
Occupied
(
e
)
=
>
{
bail
!
(
offset
"
{
desc
}
name
{
name
}
conflicts
with
previous
name
{
prev
}
"
name
=
name
.
as_str
(
)
prev
=
e
.
key
(
)
)
;
}
Entry
:
:
Vacant
(
e
)
=
>
{
e
.
insert
(
*
ty
)
;
*
type_size
=
combine_type_sizes
(
*
type_size
ty
.
type_size
(
)
offset
)
?
;
}
}
Ok
(
(
)
)
}
fn
validate
(
&
self
name
:
&
KebabName
ty
:
&
ComponentEntityType
types
:
&
TypeAlloc
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
func
=
|
|
{
let
id
=
match
ty
{
ComponentEntityType
:
:
Func
(
id
)
=
>
*
id
_
=
>
bail
!
(
offset
"
item
is
not
a
func
"
)
}
;
Ok
(
types
[
id
]
.
unwrap_component_func
(
)
)
}
;
match
name
.
kind
(
)
{
KebabNameKind
:
:
Normal
(
_
)
|
KebabNameKind
:
:
Id
{
.
.
}
=
>
{
}
KebabNameKind
:
:
Constructor
(
rname
)
=
>
{
let
ty
=
func
(
)
?
;
if
ty
.
results
.
len
(
)
!
=
1
{
bail
!
(
offset
"
function
should
return
one
value
"
)
;
}
let
ty
=
ty
.
results
[
0
]
.
1
;
let
resource
=
match
ty
{
ComponentValType
:
:
Primitive
(
_
)
=
>
None
ComponentValType
:
:
Type
(
ty
)
=
>
match
&
types
[
ty
]
{
Type
:
:
Defined
(
ComponentDefinedType
:
:
Own
(
id
)
)
=
>
Some
(
id
)
_
=
>
None
}
}
;
let
resource
=
match
resource
{
Some
(
id
)
=
>
id
None
=
>
bail
!
(
offset
"
function
should
return
(
own
T
)
"
)
}
;
self
.
validate_resource_name
(
*
resource
rname
offset
)
?
;
}
KebabNameKind
:
:
Method
{
resource
.
.
}
=
>
{
let
ty
=
func
(
)
?
;
if
ty
.
params
.
len
(
)
=
=
0
{
bail
!
(
offset
"
function
should
have
at
least
one
argument
"
)
;
}
let
(
pname
pty
)
=
&
ty
.
params
[
0
]
;
if
pname
.
as_str
(
)
!
=
"
self
"
{
bail
!
(
offset
"
function
should
have
a
first
argument
called
self
"
)
;
}
let
id
=
match
pty
{
ComponentValType
:
:
Primitive
(
_
)
=
>
None
ComponentValType
:
:
Type
(
ty
)
=
>
match
&
types
[
*
ty
]
{
Type
:
:
Defined
(
ComponentDefinedType
:
:
Borrow
(
id
)
)
=
>
Some
(
id
)
_
=
>
None
}
}
;
let
id
=
match
id
{
Some
(
id
)
=
>
id
None
=
>
bail
!
(
offset
"
function
should
take
a
first
argument
of
(
borrow
T
)
"
)
}
;
self
.
validate_resource_name
(
*
id
resource
offset
)
?
;
}
KebabNameKind
:
:
Static
{
resource
.
.
}
=
>
{
func
(
)
?
;
if
!
self
.
all_resource_names
.
contains
(
resource
.
as_str
(
)
)
{
bail
!
(
offset
"
static
resource
name
is
not
known
in
this
context
"
)
;
}
}
}
Ok
(
(
)
)
}
fn
validate_resource_name
(
&
self
id
:
TypeId
name
:
&
KebabStr
offset
:
usize
)
-
>
Result
<
(
)
>
{
let
expected_name_idx
=
match
self
.
resource_name_map
.
get
(
&
id
)
{
Some
(
idx
)
=
>
*
idx
None
=
>
{
bail
!
(
offset
"
resource
used
in
function
does
not
have
a
name
in
this
context
"
)
}
}
;
let
expected_name
=
&
self
.
all_resource_names
[
expected_name_idx
]
;
if
name
.
as_str
(
)
!
=
expected_name
{
bail
!
(
offset
"
function
does
not
match
expected
\
resource
name
{
expected_name
}
"
)
;
}
Ok
(
(
)
)
}
}
use
self
:
:
append_only
:
:
*
;
mod
append_only
{
use
indexmap
:
:
IndexMap
;
use
std
:
:
hash
:
:
Hash
;
use
std
:
:
ops
:
:
Deref
;
pub
struct
IndexMapAppendOnly
<
K
V
>
(
IndexMap
<
K
V
>
)
;
impl
<
K
V
>
IndexMapAppendOnly
<
K
V
>
where
K
:
Hash
+
Eq
+
PartialEq
{
pub
fn
insert
(
&
mut
self
key
:
K
value
:
V
)
{
let
prev
=
self
.
0
.
insert
(
key
value
)
;
assert
!
(
prev
.
is_none
(
)
)
;
}
}
impl
<
K
V
>
Deref
for
IndexMapAppendOnly
<
K
V
>
{
type
Target
=
IndexMap
<
K
V
>
;
fn
deref
(
&
self
)
-
>
&
IndexMap
<
K
V
>
{
&
self
.
0
}
}
impl
<
K
V
>
Default
for
IndexMapAppendOnly
<
K
V
>
{
fn
default
(
)
-
>
Self
{
Self
(
Default
:
:
default
(
)
)
}
}
impl
<
K
V
>
IntoIterator
for
IndexMapAppendOnly
<
K
V
>
{
type
IntoIter
=
<
IndexMap
<
K
V
>
as
IntoIterator
>
:
:
IntoIter
;
type
Item
=
<
IndexMap
<
K
V
>
as
IntoIterator
>
:
:
Item
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
self
.
0
.
into_iter
(
)
}
}
}
