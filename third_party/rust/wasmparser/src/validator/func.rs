use
crate
:
:
operators_validator
:
:
OperatorValidator
;
use
crate
:
:
{
BinaryReader
Result
Type
}
;
use
crate
:
:
{
FunctionBody
Operator
WasmFeatures
WasmModuleResources
}
;
pub
struct
FuncValidator
<
T
>
{
validator
:
OperatorValidator
resources
:
T
}
impl
<
T
:
WasmModuleResources
>
FuncValidator
<
T
>
{
pub
fn
new
(
ty
:
u32
offset
:
usize
resources
:
T
features
:
&
WasmFeatures
)
-
>
Result
<
FuncValidator
<
T
>
>
{
Ok
(
FuncValidator
{
validator
:
OperatorValidator
:
:
new
(
ty
offset
features
&
resources
)
?
resources
}
)
}
pub
fn
validate
(
&
mut
self
body
:
&
FunctionBody
<
'
_
>
)
-
>
Result
<
(
)
>
{
let
mut
reader
=
body
.
get_binary_reader
(
)
;
self
.
read_locals
(
&
mut
reader
)
?
;
while
!
reader
.
eof
(
)
{
let
pos
=
reader
.
original_position
(
)
;
let
op
=
reader
.
read_operator
(
)
?
;
self
.
op
(
pos
&
op
)
?
;
}
self
.
finish
(
reader
.
original_position
(
)
)
}
pub
fn
read_locals
(
&
mut
self
reader
:
&
mut
BinaryReader
<
'
_
>
)
-
>
Result
<
(
)
>
{
for
_
in
0
.
.
reader
.
read_var_u32
(
)
?
{
let
offset
=
reader
.
original_position
(
)
;
let
cnt
=
reader
.
read_var_u32
(
)
?
;
let
ty
=
reader
.
read_type
(
)
?
;
self
.
define_locals
(
offset
cnt
ty
)
?
;
}
Ok
(
(
)
)
}
pub
fn
define_locals
(
&
mut
self
offset
:
usize
count
:
u32
ty
:
Type
)
-
>
Result
<
(
)
>
{
self
.
validator
.
define_locals
(
offset
count
ty
)
}
pub
fn
op
(
&
mut
self
offset
:
usize
operator
:
&
Operator
<
'
_
>
)
-
>
Result
<
(
)
>
{
self
.
validator
.
process_operator
(
operator
&
self
.
resources
)
.
map_err
(
|
e
|
e
.
set_offset
(
offset
)
)
?
;
Ok
(
(
)
)
}
pub
fn
finish
(
&
mut
self
offset
:
usize
)
-
>
Result
<
(
)
>
{
self
.
validator
.
finish
(
)
.
map_err
(
|
e
|
e
.
set_offset
(
offset
)
)
?
;
Ok
(
(
)
)
}
pub
fn
resources
(
&
self
)
-
>
&
T
{
&
self
.
resources
}
}
