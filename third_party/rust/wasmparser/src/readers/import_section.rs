use
super
:
:
{
BinaryReader
ExternalKind
ImportSectionEntryType
Result
SectionIteratorLimited
SectionReader
SectionWithLimitedItems
}
;
#
[
derive
(
Debug
Copy
Clone
)
]
pub
struct
Import
<
'
a
>
{
pub
module
:
&
'
a
[
u8
]
pub
field
:
&
'
a
[
u8
]
pub
ty
:
ImportSectionEntryType
}
pub
struct
ImportSectionReader
<
'
a
>
{
reader
:
BinaryReader
<
'
a
>
count
:
u32
}
impl
<
'
a
>
ImportSectionReader
<
'
a
>
{
pub
fn
new
(
data
:
&
'
a
[
u8
]
offset
:
usize
)
-
>
Result
<
ImportSectionReader
<
'
a
>
>
{
let
mut
reader
=
BinaryReader
:
:
new_with_offset
(
data
offset
)
;
let
count
=
reader
.
read_var_u32
(
)
?
;
Ok
(
ImportSectionReader
{
reader
count
}
)
}
pub
fn
original_position
(
&
self
)
-
>
usize
{
self
.
reader
.
original_position
(
)
}
pub
fn
get_count
(
&
self
)
-
>
u32
{
self
.
count
}
pub
fn
read
<
'
b
>
(
&
mut
self
)
-
>
Result
<
Import
<
'
b
>
>
where
'
a
:
'
b
{
let
module
=
self
.
reader
.
read_string
(
)
?
;
let
field
=
self
.
reader
.
read_string
(
)
?
;
let
kind
=
self
.
reader
.
read_external_kind
(
)
?
;
let
ty
=
match
kind
{
ExternalKind
:
:
Function
=
>
ImportSectionEntryType
:
:
Function
(
self
.
reader
.
read_var_u32
(
)
?
)
ExternalKind
:
:
Table
=
>
ImportSectionEntryType
:
:
Table
(
self
.
reader
.
read_table_type
(
)
?
)
ExternalKind
:
:
Memory
=
>
ImportSectionEntryType
:
:
Memory
(
self
.
reader
.
read_memory_type
(
)
?
)
ExternalKind
:
:
Global
=
>
ImportSectionEntryType
:
:
Global
(
self
.
reader
.
read_global_type
(
)
?
)
}
;
Ok
(
Import
{
module
field
ty
}
)
}
}
impl
<
'
a
>
SectionReader
for
ImportSectionReader
<
'
a
>
{
type
Item
=
Import
<
'
a
>
;
fn
read
(
&
mut
self
)
-
>
Result
<
Self
:
:
Item
>
{
ImportSectionReader
:
:
read
(
self
)
}
fn
eof
(
&
self
)
-
>
bool
{
self
.
reader
.
eof
(
)
}
fn
original_position
(
&
self
)
-
>
usize
{
ImportSectionReader
:
:
original_position
(
self
)
}
}
impl
<
'
a
>
SectionWithLimitedItems
for
ImportSectionReader
<
'
a
>
{
fn
get_count
(
&
self
)
-
>
u32
{
ImportSectionReader
:
:
get_count
(
self
)
}
}
impl
<
'
a
>
IntoIterator
for
ImportSectionReader
<
'
a
>
{
type
Item
=
Result
<
Import
<
'
a
>
>
;
type
IntoIter
=
SectionIteratorLimited
<
ImportSectionReader
<
'
a
>
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
SectionIteratorLimited
:
:
new
(
self
)
}
}
