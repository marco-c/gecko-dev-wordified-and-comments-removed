use
crate
:
:
{
BinaryReader
Result
SectionIteratorLimited
SectionReader
SectionWithLimitedItems
}
;
use
std
:
:
ops
:
:
Range
;
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
enum
ComponentExternalKind
{
Module
Func
Value
Type
Instance
Component
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
ComponentExport
<
'
a
>
{
pub
name
:
&
'
a
str
pub
kind
:
ComponentExternalKind
pub
index
:
u32
}
#
[
derive
(
Clone
)
]
pub
struct
ComponentExportSectionReader
<
'
a
>
{
reader
:
BinaryReader
<
'
a
>
count
:
u32
}
impl
<
'
a
>
ComponentExportSectionReader
<
'
a
>
{
pub
fn
new
(
data
:
&
'
a
[
u8
]
offset
:
usize
)
-
>
Result
<
Self
>
{
let
mut
reader
=
BinaryReader
:
:
new_with_offset
(
data
offset
)
;
let
count
=
reader
.
read_var_u32
(
)
?
;
Ok
(
Self
{
reader
count
}
)
}
pub
fn
original_position
(
&
self
)
-
>
usize
{
self
.
reader
.
original_position
(
)
}
pub
fn
get_count
(
&
self
)
-
>
u32
{
self
.
count
}
pub
fn
read
(
&
mut
self
)
-
>
Result
<
ComponentExport
<
'
a
>
>
{
self
.
reader
.
read_component_export
(
)
}
}
impl
<
'
a
>
SectionReader
for
ComponentExportSectionReader
<
'
a
>
{
type
Item
=
ComponentExport
<
'
a
>
;
fn
read
(
&
mut
self
)
-
>
Result
<
Self
:
:
Item
>
{
Self
:
:
read
(
self
)
}
fn
eof
(
&
self
)
-
>
bool
{
self
.
reader
.
eof
(
)
}
fn
original_position
(
&
self
)
-
>
usize
{
Self
:
:
original_position
(
self
)
}
fn
range
(
&
self
)
-
>
Range
<
usize
>
{
self
.
reader
.
range
(
)
}
}
impl
<
'
a
>
SectionWithLimitedItems
for
ComponentExportSectionReader
<
'
a
>
{
fn
get_count
(
&
self
)
-
>
u32
{
Self
:
:
get_count
(
self
)
}
}
impl
<
'
a
>
IntoIterator
for
ComponentExportSectionReader
<
'
a
>
{
type
Item
=
Result
<
ComponentExport
<
'
a
>
>
;
type
IntoIter
=
SectionIteratorLimited
<
Self
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
SectionIteratorLimited
:
:
new
(
self
)
}
}
