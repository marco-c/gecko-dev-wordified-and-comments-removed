use
crate
:
:
{
BinaryReader
ComponentExternalKind
ComponentValType
FromReader
Result
SectionLimited
}
;
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
enum
TypeBounds
{
Eq
(
u32
)
SubResource
}
impl
<
'
a
>
FromReader
<
'
a
>
for
TypeBounds
{
fn
from_reader
(
reader
:
&
mut
BinaryReader
<
'
a
>
)
-
>
Result
<
Self
>
{
Ok
(
match
reader
.
read_u8
(
)
?
{
0x00
=
>
TypeBounds
:
:
Eq
(
reader
.
read
(
)
?
)
0x01
=
>
TypeBounds
:
:
SubResource
x
=
>
return
reader
.
invalid_leading_byte
(
x
"
type
bound
"
)
}
)
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
enum
ComponentTypeRef
{
Module
(
u32
)
Func
(
u32
)
Value
(
ComponentValType
)
Type
(
TypeBounds
)
Instance
(
u32
)
Component
(
u32
)
}
impl
ComponentTypeRef
{
pub
fn
kind
(
&
self
)
-
>
ComponentExternalKind
{
match
self
{
ComponentTypeRef
:
:
Module
(
_
)
=
>
ComponentExternalKind
:
:
Module
ComponentTypeRef
:
:
Func
(
_
)
=
>
ComponentExternalKind
:
:
Func
ComponentTypeRef
:
:
Value
(
_
)
=
>
ComponentExternalKind
:
:
Value
ComponentTypeRef
:
:
Type
(
.
.
)
=
>
ComponentExternalKind
:
:
Type
ComponentTypeRef
:
:
Instance
(
_
)
=
>
ComponentExternalKind
:
:
Instance
ComponentTypeRef
:
:
Component
(
_
)
=
>
ComponentExternalKind
:
:
Component
}
}
}
impl
<
'
a
>
FromReader
<
'
a
>
for
ComponentTypeRef
{
fn
from_reader
(
reader
:
&
mut
BinaryReader
<
'
a
>
)
-
>
Result
<
Self
>
{
Ok
(
match
reader
.
read
(
)
?
{
ComponentExternalKind
:
:
Module
=
>
ComponentTypeRef
:
:
Module
(
reader
.
read
(
)
?
)
ComponentExternalKind
:
:
Func
=
>
ComponentTypeRef
:
:
Func
(
reader
.
read
(
)
?
)
ComponentExternalKind
:
:
Value
=
>
ComponentTypeRef
:
:
Value
(
reader
.
read
(
)
?
)
ComponentExternalKind
:
:
Type
=
>
ComponentTypeRef
:
:
Type
(
reader
.
read
(
)
?
)
ComponentExternalKind
:
:
Instance
=
>
ComponentTypeRef
:
:
Instance
(
reader
.
read
(
)
?
)
ComponentExternalKind
:
:
Component
=
>
ComponentTypeRef
:
:
Component
(
reader
.
read
(
)
?
)
}
)
}
}
#
[
derive
(
Debug
Copy
Clone
Eq
PartialEq
)
]
pub
struct
ComponentImport
<
'
a
>
{
pub
name
:
ComponentImportName
<
'
a
>
pub
ty
:
ComponentTypeRef
}
impl
<
'
a
>
FromReader
<
'
a
>
for
ComponentImport
<
'
a
>
{
fn
from_reader
(
reader
:
&
mut
BinaryReader
<
'
a
>
)
-
>
Result
<
Self
>
{
Ok
(
ComponentImport
{
name
:
reader
.
read
(
)
?
ty
:
reader
.
read
(
)
?
}
)
}
}
pub
type
ComponentImportSectionReader
<
'
a
>
=
SectionLimited
<
'
a
ComponentImport
<
'
a
>
>
;
#
[
derive
(
Debug
Copy
Clone
Eq
PartialEq
)
]
#
[
allow
(
missing_docs
)
]
pub
struct
ComponentImportName
<
'
a
>
(
pub
&
'
a
str
)
;
impl
<
'
a
>
FromReader
<
'
a
>
for
ComponentImportName
<
'
a
>
{
fn
from_reader
(
reader
:
&
mut
BinaryReader
<
'
a
>
)
-
>
Result
<
Self
>
{
match
reader
.
read_u8
(
)
?
{
0x00
=
>
{
}
0x01
=
>
{
}
x
=
>
return
reader
.
invalid_leading_byte
(
x
"
import
name
"
)
}
Ok
(
ComponentImportName
(
reader
.
read_string
(
)
?
)
)
}
}
