use
crate
:
:
limits
:
:
MAX_WASM_CANONICAL_OPTIONS
;
use
crate
:
:
{
BinaryReader
FromReader
Result
SectionLimited
}
;
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
enum
CanonicalOption
{
UTF8
UTF16
CompactUTF16
Memory
(
u32
)
Realloc
(
u32
)
PostReturn
(
u32
)
}
#
[
derive
(
Debug
Clone
)
]
pub
enum
CanonicalFunction
{
Lift
{
core_func_index
:
u32
type_index
:
u32
options
:
Box
<
[
CanonicalOption
]
>
}
Lower
{
func_index
:
u32
options
:
Box
<
[
CanonicalOption
]
>
}
ResourceNew
{
resource
:
u32
}
ResourceDrop
{
resource
:
u32
}
ResourceRep
{
resource
:
u32
}
}
pub
type
ComponentCanonicalSectionReader
<
'
a
>
=
SectionLimited
<
'
a
CanonicalFunction
>
;
impl
<
'
a
>
FromReader
<
'
a
>
for
CanonicalFunction
{
fn
from_reader
(
reader
:
&
mut
BinaryReader
<
'
a
>
)
-
>
Result
<
CanonicalFunction
>
{
Ok
(
match
reader
.
read_u8
(
)
?
{
0x00
=
>
match
reader
.
read_u8
(
)
?
{
0x00
=
>
{
let
core_func_index
=
reader
.
read_var_u32
(
)
?
;
let
options
=
reader
.
read_iter
(
MAX_WASM_CANONICAL_OPTIONS
"
canonical
options
"
)
?
.
collect
:
:
<
Result
<
_
>
>
(
)
?
;
let
type_index
=
reader
.
read_var_u32
(
)
?
;
CanonicalFunction
:
:
Lift
{
core_func_index
options
type_index
}
}
x
=
>
return
reader
.
invalid_leading_byte
(
x
"
canonical
function
lift
"
)
}
0x01
=
>
match
reader
.
read_u8
(
)
?
{
0x00
=
>
CanonicalFunction
:
:
Lower
{
func_index
:
reader
.
read_var_u32
(
)
?
options
:
reader
.
read_iter
(
MAX_WASM_CANONICAL_OPTIONS
"
canonical
options
"
)
?
.
collect
:
:
<
Result
<
_
>
>
(
)
?
}
x
=
>
return
reader
.
invalid_leading_byte
(
x
"
canonical
function
lower
"
)
}
0x02
=
>
CanonicalFunction
:
:
ResourceNew
{
resource
:
reader
.
read
(
)
?
}
0x03
=
>
CanonicalFunction
:
:
ResourceDrop
{
resource
:
reader
.
read
(
)
?
}
0x04
=
>
CanonicalFunction
:
:
ResourceRep
{
resource
:
reader
.
read
(
)
?
}
x
=
>
return
reader
.
invalid_leading_byte
(
x
"
canonical
function
"
)
}
)
}
}
impl
<
'
a
>
FromReader
<
'
a
>
for
CanonicalOption
{
fn
from_reader
(
reader
:
&
mut
BinaryReader
<
'
a
>
)
-
>
Result
<
Self
>
{
Ok
(
match
reader
.
read_u8
(
)
?
{
0x00
=
>
CanonicalOption
:
:
UTF8
0x01
=
>
CanonicalOption
:
:
UTF16
0x02
=
>
CanonicalOption
:
:
CompactUTF16
0x03
=
>
CanonicalOption
:
:
Memory
(
reader
.
read_var_u32
(
)
?
)
0x04
=
>
CanonicalOption
:
:
Realloc
(
reader
.
read_var_u32
(
)
?
)
0x05
=
>
CanonicalOption
:
:
PostReturn
(
reader
.
read_var_u32
(
)
?
)
x
=
>
return
reader
.
invalid_leading_byte
(
x
"
canonical
option
"
)
}
)
}
}
