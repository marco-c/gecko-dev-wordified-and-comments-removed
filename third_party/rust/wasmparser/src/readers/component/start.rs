use
crate
:
:
{
BinaryReader
Result
SectionReader
}
;
use
std
:
:
ops
:
:
Range
;
#
[
derive
(
Debug
Clone
)
]
pub
struct
ComponentStartFunction
{
pub
func_index
:
u32
pub
arguments
:
Box
<
[
u32
]
>
pub
results
:
u32
}
#
[
derive
(
Clone
)
]
pub
struct
ComponentStartSectionReader
<
'
a
>
(
BinaryReader
<
'
a
>
)
;
impl
<
'
a
>
ComponentStartSectionReader
<
'
a
>
{
pub
fn
new
(
data
:
&
'
a
[
u8
]
offset
:
usize
)
-
>
Result
<
Self
>
{
Ok
(
Self
(
BinaryReader
:
:
new_with_offset
(
data
offset
)
)
)
}
pub
fn
original_position
(
&
self
)
-
>
usize
{
self
.
0
.
original_position
(
)
}
pub
fn
read
(
&
mut
self
)
-
>
Result
<
ComponentStartFunction
>
{
self
.
0
.
read_component_start
(
)
}
}
impl
<
'
a
>
SectionReader
for
ComponentStartSectionReader
<
'
a
>
{
type
Item
=
ComponentStartFunction
;
fn
read
(
&
mut
self
)
-
>
Result
<
Self
:
:
Item
>
{
Self
:
:
read
(
self
)
}
fn
eof
(
&
self
)
-
>
bool
{
self
.
0
.
eof
(
)
}
fn
original_position
(
&
self
)
-
>
usize
{
Self
:
:
original_position
(
self
)
}
fn
range
(
&
self
)
-
>
Range
<
usize
>
{
self
.
0
.
range
(
)
}
}
