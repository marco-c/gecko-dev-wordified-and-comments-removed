use
crate
:
:
{
BinaryReader
FromReader
MemoryType
Result
SectionLimited
}
;
pub
type
MemorySectionReader
<
'
a
>
=
SectionLimited
<
'
a
MemoryType
>
;
impl
<
'
a
>
FromReader
<
'
a
>
for
MemoryType
{
fn
from_reader
(
reader
:
&
mut
BinaryReader
<
'
a
>
)
-
>
Result
<
Self
>
{
let
pos
=
reader
.
original_position
(
)
;
let
flags
=
reader
.
read_u8
(
)
?
;
if
(
flags
&
!
0b111
)
!
=
0
{
bail
!
(
pos
"
invalid
memory
limits
flags
"
)
;
}
let
memory64
=
flags
&
0b100
!
=
0
;
let
shared
=
flags
&
0b010
!
=
0
;
let
has_max
=
flags
&
0b001
!
=
0
;
Ok
(
MemoryType
{
memory64
shared
initial
:
if
memory64
{
reader
.
read_var_u64
(
)
?
}
else
{
reader
.
read_var_u32
(
)
?
.
into
(
)
}
maximum
:
if
!
has_max
{
None
}
else
if
memory64
{
Some
(
reader
.
read_var_u64
(
)
?
)
}
else
{
Some
(
reader
.
read_var_u32
(
)
?
.
into
(
)
)
}
}
)
}
}
