use
crate
:
:
limits
:
:
{
MAX_WASM_FUNCTION_PARAMS
MAX_WASM_FUNCTION_RETURNS
}
;
use
crate
:
:
{
BinaryReader
FromReader
Result
SectionLimited
}
;
use
std
:
:
fmt
:
:
Debug
;
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
Hash
)
]
pub
enum
ValType
{
I32
I64
F32
F64
V128
FuncRef
ExternRef
}
impl
ValType
{
pub
fn
is_reference_type
(
&
self
)
-
>
bool
{
matches
!
(
self
ValType
:
:
FuncRef
|
ValType
:
:
ExternRef
)
}
pub
(
crate
)
fn
from_byte
(
byte
:
u8
)
-
>
Option
<
ValType
>
{
match
byte
{
0x7F
=
>
Some
(
ValType
:
:
I32
)
0x7E
=
>
Some
(
ValType
:
:
I64
)
0x7D
=
>
Some
(
ValType
:
:
F32
)
0x7C
=
>
Some
(
ValType
:
:
F64
)
0x7B
=
>
Some
(
ValType
:
:
V128
)
0x70
=
>
Some
(
ValType
:
:
FuncRef
)
0x6F
=
>
Some
(
ValType
:
:
ExternRef
)
_
=
>
None
}
}
}
impl
<
'
a
>
FromReader
<
'
a
>
for
ValType
{
fn
from_reader
(
reader
:
&
mut
BinaryReader
<
'
a
>
)
-
>
Result
<
Self
>
{
match
ValType
:
:
from_byte
(
reader
.
peek
(
)
?
)
{
Some
(
ty
)
=
>
{
reader
.
position
+
=
1
;
Ok
(
ty
)
}
None
=
>
bail
!
(
reader
.
original_position
(
)
"
invalid
value
type
"
)
}
}
}
#
[
derive
(
Debug
Clone
)
]
pub
enum
Type
{
Func
(
FuncType
)
}
#
[
derive
(
Clone
Eq
PartialEq
Hash
)
]
pub
struct
FuncType
{
params_results
:
Box
<
[
ValType
]
>
len_params
:
usize
}
impl
Debug
for
FuncType
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
std
:
:
fmt
:
:
Result
{
f
.
debug_struct
(
"
FuncType
"
)
.
field
(
"
params
"
&
self
.
params
(
)
)
.
field
(
"
returns
"
&
self
.
results
(
)
)
.
finish
(
)
}
}
impl
FuncType
{
pub
fn
new
<
P
R
>
(
params
:
P
results
:
R
)
-
>
Self
where
P
:
IntoIterator
<
Item
=
ValType
>
R
:
IntoIterator
<
Item
=
ValType
>
{
let
mut
buffer
=
params
.
into_iter
(
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
;
let
len_params
=
buffer
.
len
(
)
;
buffer
.
extend
(
results
)
;
Self
{
params_results
:
buffer
.
into
(
)
len_params
}
}
pub
(
crate
)
fn
from_raw_parts
(
params_results
:
Box
<
[
ValType
]
>
len_params
:
usize
)
-
>
Self
{
assert
!
(
len_params
<
=
params_results
.
len
(
)
)
;
Self
{
params_results
len_params
}
}
#
[
inline
]
pub
fn
params
(
&
self
)
-
>
&
[
ValType
]
{
&
self
.
params_results
[
.
.
self
.
len_params
]
}
#
[
inline
]
pub
fn
results
(
&
self
)
-
>
&
[
ValType
]
{
&
self
.
params_results
[
self
.
len_params
.
.
]
}
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
Hash
)
]
pub
struct
TableType
{
pub
element_type
:
ValType
pub
initial
:
u32
pub
maximum
:
Option
<
u32
>
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
Hash
)
]
pub
struct
MemoryType
{
pub
memory64
:
bool
pub
shared
:
bool
pub
initial
:
u64
pub
maximum
:
Option
<
u64
>
}
impl
MemoryType
{
pub
fn
index_type
(
&
self
)
-
>
ValType
{
if
self
.
memory64
{
ValType
:
:
I64
}
else
{
ValType
:
:
I32
}
}
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
Eq
Hash
)
]
pub
struct
GlobalType
{
pub
content_type
:
ValType
pub
mutable
:
bool
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
TagKind
{
Exception
}
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
TagType
{
pub
kind
:
TagKind
pub
func_type_idx
:
u32
}
pub
type
TypeSectionReader
<
'
a
>
=
SectionLimited
<
'
a
Type
>
;
impl
<
'
a
>
FromReader
<
'
a
>
for
Type
{
fn
from_reader
(
reader
:
&
mut
BinaryReader
<
'
a
>
)
-
>
Result
<
Self
>
{
Ok
(
match
reader
.
read_u8
(
)
?
{
0x60
=
>
Type
:
:
Func
(
reader
.
read
(
)
?
)
x
=
>
return
reader
.
invalid_leading_byte
(
x
"
type
"
)
}
)
}
}
impl
<
'
a
>
FromReader
<
'
a
>
for
FuncType
{
fn
from_reader
(
reader
:
&
mut
BinaryReader
<
'
a
>
)
-
>
Result
<
Self
>
{
let
mut
params_results
=
reader
.
read_iter
(
MAX_WASM_FUNCTION_PARAMS
"
function
params
"
)
?
.
collect
:
:
<
Result
<
Vec
<
_
>
>
>
(
)
?
;
let
len_params
=
params_results
.
len
(
)
;
let
results
=
reader
.
read_iter
(
MAX_WASM_FUNCTION_RETURNS
"
function
returns
"
)
?
;
params_results
.
reserve
(
results
.
size_hint
(
)
.
0
)
;
for
result
in
results
{
params_results
.
push
(
result
?
)
;
}
Ok
(
FuncType
:
:
from_raw_parts
(
params_results
.
into
(
)
len_params
)
)
}
}
