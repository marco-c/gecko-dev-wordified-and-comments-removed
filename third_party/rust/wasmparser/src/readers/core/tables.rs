use
crate
:
:
{
BinaryReader
FromReader
Result
SectionLimited
TableType
}
;
pub
type
TableSectionReader
<
'
a
>
=
SectionLimited
<
'
a
TableType
>
;
impl
<
'
a
>
FromReader
<
'
a
>
for
TableType
{
fn
from_reader
(
reader
:
&
mut
BinaryReader
<
'
a
>
)
-
>
Result
<
Self
>
{
let
element_type
=
reader
.
read
(
)
?
;
let
has_max
=
match
reader
.
read_u8
(
)
?
{
0x00
=
>
false
0x01
=
>
true
_
=
>
{
bail
!
(
reader
.
original_position
(
)
-
1
"
invalid
table
resizable
limits
flags
"
)
}
}
;
let
initial
=
reader
.
read
(
)
?
;
let
maximum
=
if
has_max
{
Some
(
reader
.
read
(
)
?
)
}
else
{
None
}
;
Ok
(
TableType
{
element_type
initial
maximum
}
)
}
}
