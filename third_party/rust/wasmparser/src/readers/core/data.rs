use
crate
:
:
{
BinaryReader
BinaryReaderError
ConstExpr
Result
SectionIteratorLimited
SectionReader
SectionWithLimitedItems
}
;
use
std
:
:
ops
:
:
Range
;
#
[
derive
(
Debug
Clone
)
]
pub
struct
Data
<
'
a
>
{
pub
kind
:
DataKind
<
'
a
>
pub
data
:
&
'
a
[
u8
]
pub
range
:
Range
<
usize
>
}
#
[
derive
(
Debug
Copy
Clone
)
]
pub
enum
DataKind
<
'
a
>
{
Passive
Active
{
memory_index
:
u32
offset_expr
:
ConstExpr
<
'
a
>
}
}
#
[
derive
(
Clone
)
]
pub
struct
DataSectionReader
<
'
a
>
{
reader
:
BinaryReader
<
'
a
>
count
:
u32
}
impl
<
'
a
>
DataSectionReader
<
'
a
>
{
pub
fn
new
(
data
:
&
'
a
[
u8
]
offset
:
usize
)
-
>
Result
<
DataSectionReader
<
'
a
>
>
{
let
mut
reader
=
BinaryReader
:
:
new_with_offset
(
data
offset
)
;
let
count
=
reader
.
read_var_u32
(
)
?
;
Ok
(
DataSectionReader
{
reader
count
}
)
}
pub
fn
original_position
(
&
self
)
-
>
usize
{
self
.
reader
.
original_position
(
)
}
pub
fn
get_count
(
&
self
)
-
>
u32
{
self
.
count
}
fn
verify_data_end
(
&
self
end
:
usize
)
-
>
Result
<
(
)
>
{
if
self
.
reader
.
buffer
.
len
(
)
<
end
{
return
Err
(
BinaryReaderError
:
:
new
(
"
unexpected
end
of
section
or
function
:
data
segment
extends
past
end
of
the
data
section
"
self
.
reader
.
original_offset
+
self
.
reader
.
buffer
.
len
(
)
)
)
;
}
Ok
(
(
)
)
}
pub
fn
read
<
'
b
>
(
&
mut
self
)
-
>
Result
<
Data
<
'
b
>
>
where
'
a
:
'
b
{
let
segment_start
=
self
.
reader
.
original_position
(
)
;
let
flags
=
self
.
reader
.
read_var_u32
(
)
?
;
let
kind
=
match
flags
{
1
=
>
DataKind
:
:
Passive
0
|
2
=
>
{
let
memory_index
=
if
flags
=
=
0
{
0
}
else
{
self
.
reader
.
read_var_u32
(
)
?
}
;
let
offset_expr
=
{
let
expr_offset
=
self
.
reader
.
position
;
self
.
reader
.
skip_const_expr
(
)
?
;
let
data
=
&
self
.
reader
.
buffer
[
expr_offset
.
.
self
.
reader
.
position
]
;
ConstExpr
:
:
new
(
data
self
.
reader
.
original_offset
+
expr_offset
)
}
;
DataKind
:
:
Active
{
memory_index
offset_expr
}
}
_
=
>
{
return
Err
(
BinaryReaderError
:
:
new
(
"
invalid
flags
byte
in
data
segment
"
self
.
reader
.
original_position
(
)
-
1
)
)
;
}
}
;
let
data_len
=
self
.
reader
.
read_var_u32
(
)
?
as
usize
;
let
data_end
=
self
.
reader
.
position
+
data_len
;
self
.
verify_data_end
(
data_end
)
?
;
let
data
=
&
self
.
reader
.
buffer
[
self
.
reader
.
position
.
.
data_end
]
;
self
.
reader
.
skip_to
(
data_end
)
;
let
segment_end
=
self
.
reader
.
original_position
(
)
;
let
range
=
segment_start
.
.
segment_end
;
Ok
(
Data
{
kind
data
range
}
)
}
}
impl
<
'
a
>
SectionReader
for
DataSectionReader
<
'
a
>
{
type
Item
=
Data
<
'
a
>
;
fn
read
(
&
mut
self
)
-
>
Result
<
Self
:
:
Item
>
{
DataSectionReader
:
:
read
(
self
)
}
fn
eof
(
&
self
)
-
>
bool
{
self
.
reader
.
eof
(
)
}
fn
original_position
(
&
self
)
-
>
usize
{
DataSectionReader
:
:
original_position
(
self
)
}
fn
range
(
&
self
)
-
>
Range
<
usize
>
{
self
.
reader
.
range
(
)
}
}
impl
<
'
a
>
SectionWithLimitedItems
for
DataSectionReader
<
'
a
>
{
fn
get_count
(
&
self
)
-
>
u32
{
DataSectionReader
:
:
get_count
(
self
)
}
}
impl
<
'
a
>
IntoIterator
for
DataSectionReader
<
'
a
>
{
type
Item
=
Result
<
Data
<
'
a
>
>
;
type
IntoIter
=
SectionIteratorLimited
<
DataSectionReader
<
'
a
>
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
SectionIteratorLimited
:
:
new
(
self
)
}
}
