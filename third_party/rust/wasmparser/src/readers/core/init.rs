use
crate
:
:
{
BinaryReader
FromReader
OperatorsReader
Result
}
;
#
[
derive
(
Debug
Copy
Clone
)
]
pub
struct
ConstExpr
<
'
a
>
{
offset
:
usize
data
:
&
'
a
[
u8
]
}
impl
<
'
a
>
ConstExpr
<
'
a
>
{
pub
fn
new
(
data
:
&
[
u8
]
offset
:
usize
)
-
>
ConstExpr
{
ConstExpr
{
offset
data
}
}
pub
fn
get_binary_reader
(
&
self
)
-
>
BinaryReader
<
'
a
>
{
BinaryReader
:
:
new_with_offset
(
self
.
data
self
.
offset
)
}
pub
fn
get_operators_reader
(
&
self
)
-
>
OperatorsReader
<
'
a
>
{
OperatorsReader
:
:
new
(
self
.
get_binary_reader
(
)
)
}
}
impl
<
'
a
>
FromReader
<
'
a
>
for
ConstExpr
<
'
a
>
{
fn
from_reader
(
reader
:
&
mut
BinaryReader
<
'
a
>
)
-
>
Result
<
Self
>
{
let
reader
=
reader
.
skip
(
|
r
|
r
.
skip_const_expr
(
)
)
?
;
Ok
(
ConstExpr
:
:
new
(
reader
.
remaining_buffer
(
)
reader
.
original_position
(
)
)
)
}
}
