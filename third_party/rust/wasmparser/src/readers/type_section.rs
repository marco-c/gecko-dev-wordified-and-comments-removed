use
super
:
:
{
BinaryReader
FuncType
Result
SectionIteratorLimited
SectionReader
SectionWithLimitedItems
}
;
pub
struct
TypeSectionReader
<
'
a
>
{
reader
:
BinaryReader
<
'
a
>
count
:
u32
}
impl
<
'
a
>
TypeSectionReader
<
'
a
>
{
pub
fn
new
(
data
:
&
'
a
[
u8
]
offset
:
usize
)
-
>
Result
<
TypeSectionReader
<
'
a
>
>
{
let
mut
reader
=
BinaryReader
:
:
new_with_offset
(
data
offset
)
;
let
count
=
reader
.
read_var_u32
(
)
?
;
Ok
(
TypeSectionReader
{
reader
count
}
)
}
pub
fn
original_position
(
&
self
)
-
>
usize
{
self
.
reader
.
original_position
(
)
}
pub
fn
get_count
(
&
self
)
-
>
u32
{
self
.
count
}
pub
fn
read
(
&
mut
self
)
-
>
Result
<
FuncType
>
{
self
.
reader
.
read_func_type
(
)
}
}
impl
<
'
a
>
SectionReader
for
TypeSectionReader
<
'
a
>
{
type
Item
=
FuncType
;
fn
read
(
&
mut
self
)
-
>
Result
<
Self
:
:
Item
>
{
TypeSectionReader
:
:
read
(
self
)
}
fn
eof
(
&
self
)
-
>
bool
{
self
.
reader
.
eof
(
)
}
fn
original_position
(
&
self
)
-
>
usize
{
TypeSectionReader
:
:
original_position
(
self
)
}
}
impl
<
'
a
>
SectionWithLimitedItems
for
TypeSectionReader
<
'
a
>
{
fn
get_count
(
&
self
)
-
>
u32
{
TypeSectionReader
:
:
get_count
(
self
)
}
}
impl
<
'
a
>
IntoIterator
for
TypeSectionReader
<
'
a
>
{
type
Item
=
Result
<
FuncType
>
;
type
IntoIter
=
SectionIteratorLimited
<
TypeSectionReader
<
'
a
>
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
SectionIteratorLimited
:
:
new
(
self
)
}
}
