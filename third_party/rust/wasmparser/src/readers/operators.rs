use
super
:
:
{
BinaryReader
BinaryReaderError
Operator
Result
}
;
#
[
derive
(
Clone
)
]
pub
struct
OperatorsReader
<
'
a
>
{
pub
(
crate
)
reader
:
BinaryReader
<
'
a
>
}
impl
<
'
a
>
OperatorsReader
<
'
a
>
{
pub
(
crate
)
fn
new
<
'
b
>
(
data
:
&
'
a
[
u8
]
offset
:
usize
)
-
>
OperatorsReader
<
'
b
>
where
'
a
:
'
b
{
OperatorsReader
{
reader
:
BinaryReader
:
:
new_with_offset
(
data
offset
)
}
}
pub
fn
eof
(
&
self
)
-
>
bool
{
self
.
reader
.
eof
(
)
}
pub
fn
original_position
(
&
self
)
-
>
usize
{
self
.
reader
.
original_position
(
)
}
pub
fn
ensure_end
(
&
self
)
-
>
Result
<
(
)
>
{
if
self
.
eof
(
)
{
return
Ok
(
(
)
)
;
}
Err
(
BinaryReaderError
{
message
:
"
Unexpected
data
at
the
end
of
operators
"
offset
:
self
.
reader
.
original_position
(
)
}
)
}
pub
fn
read
<
'
b
>
(
&
mut
self
)
-
>
Result
<
Operator
<
'
b
>
>
where
'
a
:
'
b
{
self
.
reader
.
read_operator
(
)
}
pub
fn
into_iter_with_offsets
<
'
b
>
(
self
)
-
>
OperatorsIteratorWithOffsets
<
'
b
>
where
'
a
:
'
b
{
OperatorsIteratorWithOffsets
{
reader
:
self
err
:
false
}
}
pub
fn
read_with_offset
<
'
b
>
(
&
mut
self
)
-
>
Result
<
(
Operator
<
'
b
>
usize
)
>
where
'
a
:
'
b
{
let
pos
=
self
.
reader
.
original_position
(
)
;
Ok
(
(
self
.
read
(
)
?
pos
)
)
}
}
impl
<
'
a
>
IntoIterator
for
OperatorsReader
<
'
a
>
{
type
Item
=
Result
<
Operator
<
'
a
>
>
;
type
IntoIter
=
OperatorsIterator
<
'
a
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
OperatorsIterator
{
reader
:
self
err
:
false
}
}
}
pub
struct
OperatorsIterator
<
'
a
>
{
reader
:
OperatorsReader
<
'
a
>
err
:
bool
}
impl
<
'
a
>
Iterator
for
OperatorsIterator
<
'
a
>
{
type
Item
=
Result
<
Operator
<
'
a
>
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
if
self
.
err
|
|
self
.
reader
.
eof
(
)
{
return
None
;
}
let
result
=
self
.
reader
.
read
(
)
;
self
.
err
=
result
.
is_err
(
)
;
Some
(
result
)
}
}
pub
struct
OperatorsIteratorWithOffsets
<
'
a
>
{
reader
:
OperatorsReader
<
'
a
>
err
:
bool
}
impl
<
'
a
>
Iterator
for
OperatorsIteratorWithOffsets
<
'
a
>
{
type
Item
=
Result
<
(
Operator
<
'
a
>
usize
)
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
if
self
.
err
|
|
self
.
reader
.
eof
(
)
{
return
None
;
}
let
result
=
self
.
reader
.
read_with_offset
(
)
;
self
.
err
=
result
.
is_err
(
)
;
Some
(
result
)
}
}
