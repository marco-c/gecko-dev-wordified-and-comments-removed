use
core
:
:
borrow
:
:
Borrow
;
use
core
:
:
fmt
;
use
core
:
:
marker
:
:
PhantomData
;
use
crate
:
:
{
HandleError
RawDisplayHandle
RawWindowHandle
}
;
pub
trait
HasDisplayHandle
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
;
}
impl
<
H
:
HasDisplayHandle
+
?
Sized
>
HasDisplayHandle
for
&
H
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
display_handle
(
)
}
}
impl
<
H
:
HasDisplayHandle
+
?
Sized
>
HasDisplayHandle
for
&
mut
H
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
display_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
impl
<
H
:
HasDisplayHandle
+
?
Sized
>
HasDisplayHandle
for
alloc
:
:
boxed
:
:
Box
<
H
>
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
display_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
impl
<
H
:
HasDisplayHandle
+
?
Sized
>
HasDisplayHandle
for
alloc
:
:
rc
:
:
Rc
<
H
>
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
display_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
impl
<
H
:
HasDisplayHandle
+
?
Sized
>
HasDisplayHandle
for
alloc
:
:
sync
:
:
Arc
<
H
>
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
display_handle
(
)
}
}
#
[
repr
(
transparent
)
]
#
[
derive
(
PartialEq
Eq
Hash
Copy
Clone
)
]
pub
struct
DisplayHandle
<
'
a
>
{
raw
:
RawDisplayHandle
_marker
:
PhantomData
<
&
'
a
*
const
(
)
>
}
impl
fmt
:
:
Debug
for
DisplayHandle
<
'
_
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_tuple
(
"
DisplayHandle
"
)
.
field
(
&
self
.
raw
)
.
finish
(
)
}
}
impl
<
'
a
>
DisplayHandle
<
'
a
>
{
pub
unsafe
fn
borrow_raw
(
raw
:
RawDisplayHandle
)
-
>
Self
{
Self
{
raw
_marker
:
PhantomData
}
}
pub
fn
as_raw
(
&
self
)
-
>
RawDisplayHandle
{
self
.
raw
}
}
impl
AsRef
<
RawDisplayHandle
>
for
DisplayHandle
<
'
_
>
{
fn
as_ref
(
&
self
)
-
>
&
RawDisplayHandle
{
&
self
.
raw
}
}
impl
Borrow
<
RawDisplayHandle
>
for
DisplayHandle
<
'
_
>
{
fn
borrow
(
&
self
)
-
>
&
RawDisplayHandle
{
&
self
.
raw
}
}
impl
From
<
DisplayHandle
<
'
_
>
>
for
RawDisplayHandle
{
fn
from
(
handle
:
DisplayHandle
<
'
_
>
)
-
>
Self
{
handle
.
raw
}
}
impl
<
'
a
>
HasDisplayHandle
for
DisplayHandle
<
'
a
>
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
{
Ok
(
*
self
)
}
}
pub
trait
HasWindowHandle
{
fn
window_handle
(
&
self
)
-
>
Result
<
WindowHandle
<
'
_
>
HandleError
>
;
}
impl
<
H
:
HasWindowHandle
+
?
Sized
>
HasWindowHandle
for
&
H
{
fn
window_handle
(
&
self
)
-
>
Result
<
WindowHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
window_handle
(
)
}
}
impl
<
H
:
HasWindowHandle
+
?
Sized
>
HasWindowHandle
for
&
mut
H
{
fn
window_handle
(
&
self
)
-
>
Result
<
WindowHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
window_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
impl
<
H
:
HasWindowHandle
+
?
Sized
>
HasWindowHandle
for
alloc
:
:
boxed
:
:
Box
<
H
>
{
fn
window_handle
(
&
self
)
-
>
Result
<
WindowHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
window_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
impl
<
H
:
HasWindowHandle
+
?
Sized
>
HasWindowHandle
for
alloc
:
:
rc
:
:
Rc
<
H
>
{
fn
window_handle
(
&
self
)
-
>
Result
<
WindowHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
window_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
impl
<
H
:
HasWindowHandle
+
?
Sized
>
HasWindowHandle
for
alloc
:
:
sync
:
:
Arc
<
H
>
{
fn
window_handle
(
&
self
)
-
>
Result
<
WindowHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
window_handle
(
)
}
}
#
[
derive
(
PartialEq
Eq
Hash
Copy
Clone
)
]
pub
struct
WindowHandle
<
'
a
>
{
raw
:
RawWindowHandle
_marker
:
PhantomData
<
&
'
a
*
const
(
)
>
}
impl
fmt
:
:
Debug
for
WindowHandle
<
'
_
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_tuple
(
"
WindowHandle
"
)
.
field
(
&
self
.
raw
)
.
finish
(
)
}
}
impl
<
'
a
>
WindowHandle
<
'
a
>
{
pub
unsafe
fn
borrow_raw
(
raw
:
RawWindowHandle
)
-
>
Self
{
Self
{
raw
_marker
:
PhantomData
}
}
pub
fn
as_raw
(
&
self
)
-
>
RawWindowHandle
{
self
.
raw
.
clone
(
)
}
}
impl
AsRef
<
RawWindowHandle
>
for
WindowHandle
<
'
_
>
{
fn
as_ref
(
&
self
)
-
>
&
RawWindowHandle
{
&
self
.
raw
}
}
impl
Borrow
<
RawWindowHandle
>
for
WindowHandle
<
'
_
>
{
fn
borrow
(
&
self
)
-
>
&
RawWindowHandle
{
&
self
.
raw
}
}
impl
From
<
WindowHandle
<
'
_
>
>
for
RawWindowHandle
{
fn
from
(
handle
:
WindowHandle
<
'
_
>
)
-
>
Self
{
handle
.
raw
}
}
impl
HasWindowHandle
for
WindowHandle
<
'
_
>
{
fn
window_handle
(
&
self
)
-
>
Result
<
Self
HandleError
>
{
Ok
(
*
self
)
}
}
fn
_not_send_or_sync
(
)
{
}
