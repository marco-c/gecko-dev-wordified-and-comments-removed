#
[
cfg
(
all
(
not
(
feature
=
"
std
"
)
target_os
=
"
android
"
)
)
]
compile_error
!
(
"
Using
borrowed
handles
on
Android
requires
the
std
feature
to
be
enabled
.
"
)
;
use
core
:
:
fmt
;
use
core
:
:
hash
:
:
{
Hash
Hasher
}
;
use
core
:
:
marker
:
:
PhantomData
;
use
crate
:
:
{
HasRawDisplayHandle
HasRawWindowHandle
RawDisplayHandle
RawWindowHandle
}
;
pub
struct
Active
(
imp
:
:
Active
)
;
impl
fmt
:
:
Debug
for
Active
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
"
Active
{
.
.
}
"
)
}
}
#
[
derive
(
Clone
)
]
pub
struct
ActiveHandle
<
'
a
>
(
imp
:
:
ActiveHandle
<
'
a
>
)
;
impl
<
'
a
>
fmt
:
:
Debug
for
ActiveHandle
<
'
a
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
"
ActiveHandle
{
.
.
}
"
)
}
}
impl
Active
{
pub
const
fn
new
(
)
-
>
Self
{
Self
(
imp
:
:
Active
:
:
new
(
)
)
}
pub
fn
handle
(
&
self
)
-
>
Option
<
ActiveHandle
<
'
_
>
>
{
self
.
0
.
handle
(
)
.
map
(
ActiveHandle
)
}
pub
fn
set_inactive
(
&
self
)
{
self
.
0
.
set_inactive
(
)
}
pub
unsafe
fn
set_active
(
&
self
)
{
self
.
0
.
set_active
(
)
}
}
impl
ActiveHandle
<
'
_
>
{
pub
unsafe
fn
new_unchecked
(
)
-
>
Self
{
Self
(
imp
:
:
ActiveHandle
:
:
new_unchecked
(
)
)
}
}
pub
trait
HasDisplayHandle
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
;
}
impl
<
H
:
HasDisplayHandle
+
?
Sized
>
HasDisplayHandle
for
&
H
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
display_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
impl
<
H
:
HasDisplayHandle
+
?
Sized
>
HasDisplayHandle
for
alloc
:
:
boxed
:
:
Box
<
H
>
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
display_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
impl
<
H
:
HasDisplayHandle
+
?
Sized
>
HasDisplayHandle
for
alloc
:
:
rc
:
:
Rc
<
H
>
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
display_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
impl
<
H
:
HasDisplayHandle
+
?
Sized
>
HasDisplayHandle
for
alloc
:
:
sync
:
:
Arc
<
H
>
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
display_handle
(
)
}
}
#
[
repr
(
transparent
)
]
#
[
derive
(
PartialEq
Eq
Hash
)
]
pub
struct
DisplayHandle
<
'
a
>
{
raw
:
RawDisplayHandle
_marker
:
PhantomData
<
&
'
a
*
const
(
)
>
}
impl
fmt
:
:
Debug
for
DisplayHandle
<
'
_
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_tuple
(
"
DisplayHandle
"
)
.
field
(
&
self
.
raw
)
.
finish
(
)
}
}
impl
<
'
a
>
Clone
for
DisplayHandle
<
'
a
>
{
fn
clone
(
&
self
)
-
>
Self
{
Self
{
raw
:
self
.
raw
_marker
:
PhantomData
}
}
}
impl
<
'
a
>
DisplayHandle
<
'
a
>
{
pub
unsafe
fn
borrow_raw
(
raw
:
RawDisplayHandle
)
-
>
Self
{
Self
{
raw
_marker
:
PhantomData
}
}
}
unsafe
impl
HasRawDisplayHandle
for
DisplayHandle
<
'
_
>
{
fn
raw_display_handle
(
&
self
)
-
>
RawDisplayHandle
{
self
.
raw
}
}
impl
<
'
a
>
HasDisplayHandle
for
DisplayHandle
<
'
a
>
{
fn
display_handle
(
&
self
)
-
>
Result
<
DisplayHandle
<
'
_
>
HandleError
>
{
Ok
(
self
.
clone
(
)
)
}
}
pub
trait
HasWindowHandle
{
fn
window_handle
(
&
self
)
-
>
Result
<
WindowHandle
<
'
_
>
HandleError
>
;
}
impl
<
H
:
HasWindowHandle
+
?
Sized
>
HasWindowHandle
for
&
H
{
fn
window_handle
(
&
self
)
-
>
Result
<
WindowHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
window_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
impl
<
H
:
HasWindowHandle
+
?
Sized
>
HasWindowHandle
for
alloc
:
:
boxed
:
:
Box
<
H
>
{
fn
window_handle
(
&
self
)
-
>
Result
<
WindowHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
window_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
impl
<
H
:
HasWindowHandle
+
?
Sized
>
HasWindowHandle
for
alloc
:
:
rc
:
:
Rc
<
H
>
{
fn
window_handle
(
&
self
)
-
>
Result
<
WindowHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
window_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
impl
<
H
:
HasWindowHandle
+
?
Sized
>
HasWindowHandle
for
alloc
:
:
sync
:
:
Arc
<
H
>
{
fn
window_handle
(
&
self
)
-
>
Result
<
WindowHandle
<
'
_
>
HandleError
>
{
(
*
*
self
)
.
window_handle
(
)
}
}
#
[
derive
(
Clone
)
]
pub
struct
WindowHandle
<
'
a
>
{
raw
:
RawWindowHandle
_active
:
ActiveHandle
<
'
a
>
_marker
:
PhantomData
<
&
'
a
*
const
(
)
>
}
impl
fmt
:
:
Debug
for
WindowHandle
<
'
_
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_tuple
(
"
WindowHandle
"
)
.
field
(
&
self
.
raw
)
.
finish
(
)
}
}
impl
PartialEq
for
WindowHandle
<
'
_
>
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
self
.
raw
=
=
other
.
raw
}
}
impl
Eq
for
WindowHandle
<
'
_
>
{
}
impl
Hash
for
WindowHandle
<
'
_
>
{
fn
hash
<
H
:
Hasher
>
(
&
self
state
:
&
mut
H
)
{
self
.
raw
.
hash
(
state
)
;
}
}
impl
<
'
a
>
WindowHandle
<
'
a
>
{
pub
unsafe
fn
borrow_raw
(
raw
:
RawWindowHandle
active
:
ActiveHandle
<
'
a
>
)
-
>
Self
{
Self
{
raw
_active
:
active
_marker
:
PhantomData
}
}
}
unsafe
impl
HasRawWindowHandle
for
WindowHandle
<
'
_
>
{
fn
raw_window_handle
(
&
self
)
-
>
RawWindowHandle
{
self
.
raw
}
}
impl
HasWindowHandle
for
WindowHandle
<
'
_
>
{
fn
window_handle
(
&
self
)
-
>
Result
<
Self
HandleError
>
{
Ok
(
self
.
clone
(
)
)
}
}
#
[
derive
(
Debug
)
]
#
[
non_exhaustive
]
pub
enum
HandleError
{
Inactive
}
impl
fmt
:
:
Display
for
HandleError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
self
{
Self
:
:
Inactive
=
>
write
!
(
f
"
the
handle
is
not
currently
active
"
)
}
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
std
:
:
error
:
:
Error
for
HandleError
{
}
fn
_not_send_or_sync
(
)
{
}
#
[
cfg
(
not
(
any
(
target_os
=
"
android
"
raw_window_handle_force_refcount
)
)
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
not
(
target_os
=
"
android
"
)
)
)
)
]
mod
imp
{
use
core
:
:
cell
:
:
UnsafeCell
;
use
core
:
:
marker
:
:
PhantomData
;
pub
(
super
)
struct
Active
;
#
[
derive
(
Clone
)
]
pub
(
super
)
struct
ActiveHandle
<
'
a
>
{
_marker
:
PhantomData
<
&
'
a
UnsafeCell
<
(
)
>
>
}
impl
Active
{
pub
(
super
)
const
fn
new
(
)
-
>
Self
{
Self
}
pub
(
super
)
fn
handle
(
&
self
)
-
>
Option
<
ActiveHandle
<
'
_
>
>
{
Some
(
unsafe
{
ActiveHandle
:
:
new_unchecked
(
)
}
)
}
pub
(
super
)
unsafe
fn
set_active
(
&
self
)
{
}
pub
(
super
)
fn
set_inactive
(
&
self
)
{
}
}
impl
ActiveHandle
<
'
_
>
{
pub
(
super
)
unsafe
fn
new_unchecked
(
)
-
>
Self
{
Self
{
_marker
:
PhantomData
}
}
}
impl
Drop
for
ActiveHandle
<
'
_
>
{
fn
drop
(
&
mut
self
)
{
}
}
impl
super
:
:
ActiveHandle
<
'
_
>
{
#
[
allow
(
clippy
:
:
new_without_default
)
]
pub
fn
new
(
)
-
>
Self
{
unsafe
{
super
:
:
ActiveHandle
:
:
new_unchecked
(
)
}
}
}
}
#
[
cfg
(
any
(
target_os
=
"
android
"
raw_window_handle_force_refcount
)
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
any
(
target_os
=
"
android
"
)
)
)
)
]
mod
imp
{
use
std
:
:
sync
:
:
{
RwLock
RwLockReadGuard
}
;
pub
(
super
)
struct
Active
{
active
:
RwLock
<
bool
>
}
pub
(
super
)
struct
ActiveHandle
<
'
a
>
{
inner
:
Option
<
Inner
<
'
a
>
>
}
struct
Inner
<
'
a
>
{
_read_guard
:
RwLockReadGuard
<
'
a
bool
>
active
:
&
'
a
Active
}
impl
Clone
for
ActiveHandle
<
'
_
>
{
fn
clone
(
&
self
)
-
>
Self
{
Self
{
inner
:
self
.
inner
.
as_ref
(
)
.
map
(
|
inner
|
Inner
{
_read_guard
:
inner
.
active
.
active
.
read
(
)
.
unwrap
(
)
active
:
inner
.
active
}
)
}
}
}
impl
Active
{
pub
(
super
)
const
fn
new
(
)
-
>
Self
{
Self
{
active
:
RwLock
:
:
new
(
false
)
}
}
pub
(
super
)
fn
handle
(
&
self
)
-
>
Option
<
ActiveHandle
<
'
_
>
>
{
let
active
=
self
.
active
.
read
(
)
.
ok
(
)
?
;
if
!
*
active
{
return
None
;
}
Some
(
ActiveHandle
{
inner
:
Some
(
Inner
{
_read_guard
:
active
active
:
self
}
)
}
)
}
pub
(
super
)
unsafe
fn
set_active
(
&
self
)
{
*
self
.
active
.
write
(
)
.
unwrap
(
)
=
true
;
}
pub
(
super
)
fn
set_inactive
(
&
self
)
{
*
self
.
active
.
write
(
)
.
unwrap
(
)
=
false
;
}
}
impl
ActiveHandle
<
'
_
>
{
pub
(
super
)
unsafe
fn
new_unchecked
(
)
-
>
Self
{
Self
{
inner
:
None
}
}
}
}
