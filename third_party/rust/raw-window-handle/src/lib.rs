#
!
[
no_std
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_cfg
)
)
]
#
[
cfg
(
feature
=
"
alloc
"
)
]
extern
crate
alloc
;
mod
android
;
mod
appkit
;
mod
haiku
;
mod
redox
;
mod
uikit
;
mod
unix
;
mod
web
;
mod
windows
;
pub
use
android
:
:
{
AndroidDisplayHandle
AndroidNdkWindowHandle
}
;
pub
use
appkit
:
:
{
AppKitDisplayHandle
AppKitWindowHandle
}
;
pub
use
haiku
:
:
{
HaikuDisplayHandle
HaikuWindowHandle
}
;
pub
use
redox
:
:
{
OrbitalDisplayHandle
OrbitalWindowHandle
}
;
pub
use
uikit
:
:
{
UiKitDisplayHandle
UiKitWindowHandle
}
;
pub
use
unix
:
:
{
DrmDisplayHandle
DrmWindowHandle
GbmDisplayHandle
GbmWindowHandle
WaylandDisplayHandle
WaylandWindowHandle
XcbDisplayHandle
XcbWindowHandle
XlibDisplayHandle
XlibWindowHandle
}
;
pub
use
web
:
:
{
WebDisplayHandle
WebWindowHandle
}
;
pub
use
windows
:
:
{
Win32WindowHandle
WinRtWindowHandle
WindowsDisplayHandle
}
;
pub
unsafe
trait
HasRawWindowHandle
{
fn
raw_window_handle
(
&
self
)
-
>
RawWindowHandle
;
}
unsafe
impl
<
'
a
T
:
HasRawWindowHandle
+
?
Sized
>
HasRawWindowHandle
for
&
'
a
T
{
fn
raw_window_handle
(
&
self
)
-
>
RawWindowHandle
{
(
*
self
)
.
raw_window_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
unsafe
impl
<
T
:
HasRawWindowHandle
+
?
Sized
>
HasRawWindowHandle
for
alloc
:
:
rc
:
:
Rc
<
T
>
{
fn
raw_window_handle
(
&
self
)
-
>
RawWindowHandle
{
(
*
*
self
)
.
raw_window_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
unsafe
impl
<
T
:
HasRawWindowHandle
+
?
Sized
>
HasRawWindowHandle
for
alloc
:
:
sync
:
:
Arc
<
T
>
{
fn
raw_window_handle
(
&
self
)
-
>
RawWindowHandle
{
(
*
*
self
)
.
raw_window_handle
(
)
}
}
#
[
non_exhaustive
]
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
Hash
)
]
pub
enum
RawWindowHandle
{
UiKit
(
UiKitWindowHandle
)
AppKit
(
AppKitWindowHandle
)
Orbital
(
OrbitalWindowHandle
)
Xlib
(
XlibWindowHandle
)
Xcb
(
XcbWindowHandle
)
Wayland
(
WaylandWindowHandle
)
Drm
(
DrmWindowHandle
)
Gbm
(
GbmWindowHandle
)
Win32
(
Win32WindowHandle
)
WinRt
(
WinRtWindowHandle
)
Web
(
WebWindowHandle
)
AndroidNdk
(
AndroidNdkWindowHandle
)
Haiku
(
HaikuWindowHandle
)
}
pub
unsafe
trait
HasRawDisplayHandle
{
fn
raw_display_handle
(
&
self
)
-
>
RawDisplayHandle
;
}
unsafe
impl
<
'
a
T
:
HasRawDisplayHandle
+
?
Sized
>
HasRawDisplayHandle
for
&
'
a
T
{
fn
raw_display_handle
(
&
self
)
-
>
RawDisplayHandle
{
(
*
self
)
.
raw_display_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
unsafe
impl
<
T
:
HasRawDisplayHandle
+
?
Sized
>
HasRawDisplayHandle
for
alloc
:
:
rc
:
:
Rc
<
T
>
{
fn
raw_display_handle
(
&
self
)
-
>
RawDisplayHandle
{
(
*
*
self
)
.
raw_display_handle
(
)
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
alloc
"
)
)
)
]
unsafe
impl
<
T
:
HasRawDisplayHandle
+
?
Sized
>
HasRawDisplayHandle
for
alloc
:
:
sync
:
:
Arc
<
T
>
{
fn
raw_display_handle
(
&
self
)
-
>
RawDisplayHandle
{
(
*
*
self
)
.
raw_display_handle
(
)
}
}
#
[
non_exhaustive
]
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
Hash
)
]
pub
enum
RawDisplayHandle
{
UiKit
(
UiKitDisplayHandle
)
AppKit
(
AppKitDisplayHandle
)
Orbital
(
OrbitalDisplayHandle
)
Xlib
(
XlibDisplayHandle
)
Xcb
(
XcbDisplayHandle
)
Wayland
(
WaylandDisplayHandle
)
Drm
(
DrmDisplayHandle
)
Gbm
(
GbmDisplayHandle
)
Windows
(
WindowsDisplayHandle
)
Web
(
WebDisplayHandle
)
Android
(
AndroidDisplayHandle
)
Haiku
(
HaikuDisplayHandle
)
}
