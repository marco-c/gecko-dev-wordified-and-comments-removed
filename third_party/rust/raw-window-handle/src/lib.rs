#
!
[
no_std
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_cfg
)
)
]
#
!
[
allow
(
clippy
:
:
new_without_default
)
]
#
!
[
deny
(
unsafe_op_in_unsafe_fn
)
]
#
[
cfg
(
feature
=
"
alloc
"
)
]
extern
crate
alloc
;
#
[
cfg
(
feature
=
"
std
"
)
]
extern
crate
std
;
mod
android
;
mod
appkit
;
mod
borrowed
;
mod
haiku
;
mod
ohos
;
mod
redox
;
mod
uikit
;
mod
unix
;
mod
web
;
mod
windows
;
pub
use
android
:
:
{
AndroidDisplayHandle
AndroidNdkWindowHandle
}
;
pub
use
appkit
:
:
{
AppKitDisplayHandle
AppKitWindowHandle
}
;
pub
use
borrowed
:
:
{
DisplayHandle
HasDisplayHandle
HasWindowHandle
WindowHandle
}
;
pub
use
haiku
:
:
{
HaikuDisplayHandle
HaikuWindowHandle
}
;
pub
use
ohos
:
:
{
OhosDisplayHandle
OhosNdkWindowHandle
}
;
pub
use
redox
:
:
{
OrbitalDisplayHandle
OrbitalWindowHandle
}
;
pub
use
uikit
:
:
{
UiKitDisplayHandle
UiKitWindowHandle
}
;
pub
use
unix
:
:
{
DrmDisplayHandle
DrmWindowHandle
GbmDisplayHandle
GbmWindowHandle
WaylandDisplayHandle
WaylandWindowHandle
XcbDisplayHandle
XcbWindowHandle
XlibDisplayHandle
XlibWindowHandle
}
;
pub
use
web
:
:
{
WebCanvasWindowHandle
WebDisplayHandle
WebOffscreenCanvasWindowHandle
WebWindowHandle
}
;
pub
use
windows
:
:
{
Win32WindowHandle
WinRtWindowHandle
WindowsDisplayHandle
}
;
use
core
:
:
fmt
;
#
[
deprecated
=
"
Use
HasWindowHandle
instead
"
]
pub
unsafe
trait
HasRawWindowHandle
{
fn
raw_window_handle
(
&
self
)
-
>
Result
<
RawWindowHandle
HandleError
>
;
}
#
[
allow
(
deprecated
)
]
unsafe
impl
<
T
:
HasWindowHandle
+
?
Sized
>
HasRawWindowHandle
for
T
{
fn
raw_window_handle
(
&
self
)
-
>
Result
<
RawWindowHandle
HandleError
>
{
self
.
window_handle
(
)
.
map
(
Into
:
:
into
)
}
}
#
[
non_exhaustive
]
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
Hash
)
]
pub
enum
RawWindowHandle
{
UiKit
(
UiKitWindowHandle
)
AppKit
(
AppKitWindowHandle
)
Orbital
(
OrbitalWindowHandle
)
OhosNdk
(
OhosNdkWindowHandle
)
Xlib
(
XlibWindowHandle
)
Xcb
(
XcbWindowHandle
)
Wayland
(
WaylandWindowHandle
)
Drm
(
DrmWindowHandle
)
Gbm
(
GbmWindowHandle
)
Win32
(
Win32WindowHandle
)
WinRt
(
WinRtWindowHandle
)
Web
(
WebWindowHandle
)
WebCanvas
(
WebCanvasWindowHandle
)
WebOffscreenCanvas
(
WebOffscreenCanvasWindowHandle
)
AndroidNdk
(
AndroidNdkWindowHandle
)
Haiku
(
HaikuWindowHandle
)
}
#
[
deprecated
=
"
Use
HasDisplayHandle
instead
"
]
pub
unsafe
trait
HasRawDisplayHandle
{
fn
raw_display_handle
(
&
self
)
-
>
Result
<
RawDisplayHandle
HandleError
>
;
}
#
[
allow
(
deprecated
)
]
unsafe
impl
<
T
:
HasDisplayHandle
+
?
Sized
>
HasRawDisplayHandle
for
T
{
fn
raw_display_handle
(
&
self
)
-
>
Result
<
RawDisplayHandle
HandleError
>
{
self
.
display_handle
(
)
.
map
(
Into
:
:
into
)
}
}
#
[
non_exhaustive
]
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
Hash
)
]
pub
enum
RawDisplayHandle
{
UiKit
(
UiKitDisplayHandle
)
AppKit
(
AppKitDisplayHandle
)
Orbital
(
OrbitalDisplayHandle
)
Ohos
(
OhosDisplayHandle
)
Xlib
(
XlibDisplayHandle
)
Xcb
(
XcbDisplayHandle
)
Wayland
(
WaylandDisplayHandle
)
Drm
(
DrmDisplayHandle
)
Gbm
(
GbmDisplayHandle
)
Windows
(
WindowsDisplayHandle
)
Web
(
WebDisplayHandle
)
Android
(
AndroidDisplayHandle
)
Haiku
(
HaikuDisplayHandle
)
}
#
[
derive
(
Debug
Clone
)
]
#
[
non_exhaustive
]
pub
enum
HandleError
{
NotSupported
Unavailable
}
impl
fmt
:
:
Display
for
HandleError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
self
{
Self
:
:
NotSupported
=
>
write
!
(
f
"
the
underlying
handle
cannot
be
represented
using
the
types
in
this
crate
"
)
Self
:
:
Unavailable
=
>
write
!
(
f
"
the
underlying
handle
is
not
available
"
)
}
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
std
:
:
error
:
:
Error
for
HandleError
{
}
macro_rules
!
from_impl
{
(
(
to
:
ident
enum
:
ident
from
:
ty
)
*
)
=
>
(
(
impl
From
<
from
>
for
to
{
fn
from
(
value
:
from
)
-
>
Self
{
to
:
:
enum
(
value
)
}
}
)
*
)
}
from_impl
!
(
RawDisplayHandle
UiKit
UiKitDisplayHandle
)
;
from_impl
!
(
RawDisplayHandle
AppKit
AppKitDisplayHandle
)
;
from_impl
!
(
RawDisplayHandle
Orbital
OrbitalDisplayHandle
)
;
from_impl
!
(
RawDisplayHandle
Ohos
OhosDisplayHandle
)
;
from_impl
!
(
RawDisplayHandle
Xlib
XlibDisplayHandle
)
;
from_impl
!
(
RawDisplayHandle
Xcb
XcbDisplayHandle
)
;
from_impl
!
(
RawDisplayHandle
Wayland
WaylandDisplayHandle
)
;
from_impl
!
(
RawDisplayHandle
Drm
DrmDisplayHandle
)
;
from_impl
!
(
RawDisplayHandle
Gbm
GbmDisplayHandle
)
;
from_impl
!
(
RawDisplayHandle
Windows
WindowsDisplayHandle
)
;
from_impl
!
(
RawDisplayHandle
Web
WebDisplayHandle
)
;
from_impl
!
(
RawDisplayHandle
Android
AndroidDisplayHandle
)
;
from_impl
!
(
RawDisplayHandle
Haiku
HaikuDisplayHandle
)
;
from_impl
!
(
RawWindowHandle
UiKit
UiKitWindowHandle
)
;
from_impl
!
(
RawWindowHandle
AppKit
AppKitWindowHandle
)
;
from_impl
!
(
RawWindowHandle
Orbital
OrbitalWindowHandle
)
;
from_impl
!
(
RawWindowHandle
OhosNdk
OhosNdkWindowHandle
)
;
from_impl
!
(
RawWindowHandle
Xlib
XlibWindowHandle
)
;
from_impl
!
(
RawWindowHandle
Xcb
XcbWindowHandle
)
;
from_impl
!
(
RawWindowHandle
Wayland
WaylandWindowHandle
)
;
from_impl
!
(
RawWindowHandle
Drm
DrmWindowHandle
)
;
from_impl
!
(
RawWindowHandle
Gbm
GbmWindowHandle
)
;
from_impl
!
(
RawWindowHandle
Win32
Win32WindowHandle
)
;
from_impl
!
(
RawWindowHandle
WinRt
WinRtWindowHandle
)
;
from_impl
!
(
RawWindowHandle
Web
WebWindowHandle
)
;
from_impl
!
(
RawWindowHandle
WebCanvas
WebCanvasWindowHandle
)
;
from_impl
!
(
RawWindowHandle
WebOffscreenCanvas
WebOffscreenCanvasWindowHandle
)
;
from_impl
!
(
RawWindowHandle
AndroidNdk
AndroidNdkWindowHandle
)
;
from_impl
!
(
RawWindowHandle
Haiku
HaikuWindowHandle
)
;
#
[
cfg
(
test
)
]
mod
tests
{
use
core
:
:
panic
:
:
{
RefUnwindSafe
UnwindSafe
}
;
use
static_assertions
:
:
{
assert_impl_all
assert_not_impl_any
}
;
use
super
:
:
*
;
#
[
test
]
fn
auto_traits
(
)
{
assert_impl_all
!
(
RawDisplayHandle
:
UnwindSafe
RefUnwindSafe
Unpin
)
;
assert_not_impl_any
!
(
RawDisplayHandle
:
Send
Sync
)
;
assert_impl_all
!
(
DisplayHandle
<
'
_
>
:
UnwindSafe
RefUnwindSafe
Unpin
)
;
assert_not_impl_any
!
(
DisplayHandle
<
'
_
>
:
Send
Sync
)
;
assert_impl_all
!
(
RawWindowHandle
:
UnwindSafe
RefUnwindSafe
Unpin
)
;
assert_not_impl_any
!
(
RawWindowHandle
:
Send
Sync
)
;
assert_impl_all
!
(
WindowHandle
<
'
_
>
:
UnwindSafe
RefUnwindSafe
Unpin
)
;
assert_not_impl_any
!
(
WindowHandle
<
'
_
>
:
Send
Sync
)
;
assert_impl_all
!
(
HandleError
:
Send
Sync
UnwindSafe
RefUnwindSafe
Unpin
)
;
assert_impl_all
!
(
UiKitDisplayHandle
:
Send
Sync
)
;
assert_impl_all
!
(
AppKitDisplayHandle
:
Send
Sync
)
;
assert_impl_all
!
(
OrbitalDisplayHandle
:
Send
Sync
)
;
assert_impl_all
!
(
OhosDisplayHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
XlibDisplayHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
XcbDisplayHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
WaylandDisplayHandle
:
Send
Sync
)
;
assert_impl_all
!
(
DrmDisplayHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
GbmDisplayHandle
:
Send
Sync
)
;
assert_impl_all
!
(
WindowsDisplayHandle
:
Send
Sync
)
;
assert_impl_all
!
(
WebDisplayHandle
:
Send
Sync
)
;
assert_impl_all
!
(
AndroidDisplayHandle
:
Send
Sync
)
;
assert_impl_all
!
(
HaikuDisplayHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
UiKitWindowHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
AppKitWindowHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
OrbitalWindowHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
OhosNdkWindowHandle
:
Send
Sync
)
;
assert_impl_all
!
(
XlibWindowHandle
:
Send
Sync
)
;
assert_impl_all
!
(
XcbWindowHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
WaylandWindowHandle
:
Send
Sync
)
;
assert_impl_all
!
(
DrmWindowHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
GbmWindowHandle
:
Send
Sync
)
;
assert_impl_all
!
(
Win32WindowHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
WinRtWindowHandle
:
Send
Sync
)
;
assert_impl_all
!
(
WebWindowHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
WebCanvasWindowHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
WebOffscreenCanvasWindowHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
AndroidNdkWindowHandle
:
Send
Sync
)
;
assert_not_impl_any
!
(
HaikuWindowHandle
:
Send
Sync
)
;
}
#
[
allow
(
deprecated
unused
)
]
fn
assert_object_safe
(
_
:
&
dyn
HasRawWindowHandle
_
:
&
dyn
HasRawDisplayHandle
_
:
&
dyn
HasWindowHandle
_
:
&
dyn
HasDisplayHandle
)
{
}
}
