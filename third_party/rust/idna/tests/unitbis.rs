use
idna
:
:
uts46
:
:
AsciiDenyList
;
use
idna
:
:
uts46
:
:
DnsLength
;
use
idna
:
:
uts46
:
:
Hyphens
;
#
[
test
]
fn
test_punycode_prefix_with_length_check
(
)
{
let
config
=
idna
:
:
uts46
:
:
Uts46
:
:
new
(
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
"
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
-
"
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
-
-
-
"
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
.
"
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
.
.
.
"
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
.
xn
-
-
"
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
.
.
.
xn
-
-
"
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
.
xn
-
-
"
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
.
example
.
org
"
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
}
#
[
test
]
fn
test_punycode_prefix_without_length_check
(
)
{
let
config
=
idna
:
:
uts46
:
:
Uts46
:
:
new
(
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
"
AsciiDenyList
:
:
URL
Hyphens
:
:
Allow
DnsLength
:
:
Ignore
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
-
"
AsciiDenyList
:
:
URL
Hyphens
:
:
Allow
DnsLength
:
:
Ignore
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
-
-
-
"
AsciiDenyList
:
:
URL
Hyphens
:
:
Allow
DnsLength
:
:
Ignore
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
.
"
AsciiDenyList
:
:
URL
Hyphens
:
:
Allow
DnsLength
:
:
Ignore
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
.
.
.
"
AsciiDenyList
:
:
URL
Hyphens
:
:
Allow
DnsLength
:
:
Ignore
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
.
xn
-
-
"
AsciiDenyList
:
:
URL
Hyphens
:
:
Allow
DnsLength
:
:
Ignore
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
.
.
.
xn
-
-
"
AsciiDenyList
:
:
URL
Hyphens
:
:
Allow
DnsLength
:
:
Ignore
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
.
xn
-
-
"
AsciiDenyList
:
:
URL
Hyphens
:
:
Allow
DnsLength
:
:
Ignore
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
.
example
.
org
"
AsciiDenyList
:
:
URL
Hyphens
:
:
Allow
DnsLength
:
:
Ignore
)
.
is_err
(
)
)
;
}
#
[
test
]
fn
test_v5
(
)
{
let
config
=
idna
:
:
uts46
:
:
Uts46
:
:
new
(
)
;
assert
!
(
config
.
to_ascii
(
"
\
u
{
11C3A
}
"
.
as_bytes
(
)
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
"
\
u
{
850f
}
.
\
u
{
11C3A
}
"
.
as_bytes
(
)
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
"
\
u
{
850f
}
\
u
{
ff61
}
\
u
{
11C3A
}
"
.
as_bytes
(
)
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
}
#
[
test
]
fn
test_v8_bidi_rules
(
)
{
let
config
=
idna
:
:
uts46
:
:
Uts46
:
:
new
(
)
;
assert_eq
!
(
config
.
to_ascii
(
b
"
abc
"
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
unwrap
(
)
"
abc
"
)
;
assert_eq
!
(
config
.
to_ascii
(
b
"
123
"
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
unwrap
(
)
"
123
"
)
;
assert_eq
!
(
config
.
to_ascii
(
"
"
.
as_bytes
(
)
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
unwrap
(
)
"
xn
-
-
kdb3bdf
"
)
;
assert_eq
!
(
config
.
to_ascii
(
"
"
.
as_bytes
(
)
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
unwrap
(
)
"
xn
-
-
mgbcm
"
)
;
assert_eq
!
(
config
.
to_ascii
(
"
abc
.
"
.
as_bytes
(
)
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
unwrap
(
)
"
abc
.
xn
-
-
mgbcm
"
)
;
assert_eq
!
(
config
.
to_ascii
(
"
.
"
.
as_bytes
(
)
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
unwrap
(
)
"
xn
-
-
kdb3bdf
.
xn
-
-
mgbcm
"
)
;
assert
!
(
config
.
to_ascii
(
"
0a
.
\
u
{
05D0
}
"
.
as_bytes
(
)
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
"
0
.
\
u
{
05D0
}
"
.
as_bytes
(
)
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
assert
!
(
config
.
to_ascii
(
b
"
xn
-
-
0ca24w
"
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
}
#
[
test
]
fn
emoji_domains
(
)
{
let
config
=
idna
:
:
uts46
:
:
Uts46
:
:
new
(
)
;
assert_eq
!
(
config
.
to_ascii
(
"
.
com
"
.
as_bytes
(
)
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
unwrap
(
)
"
xn
-
-
53h
.
com
"
)
;
}
#
[
test
]
fn
unicode_before_delimiter
(
)
{
let
config
=
idna
:
:
uts46
:
:
Uts46
:
:
new
(
)
;
assert
!
(
config
.
to_ascii
(
"
xn
-
-
f
\
u
{
34a
}
-
PTP
"
.
as_bytes
(
)
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
DnsLength
:
:
Verify
)
.
is_err
(
)
)
;
}
#
[
test
]
fn
upper_case_ascii_in_punycode
(
)
{
let
config
=
idna
:
:
uts46
:
:
Uts46
:
:
new
(
)
;
let
(
unicode
result
)
=
config
.
to_unicode
(
"
xn
-
-
A
-
1ga
"
.
as_bytes
(
)
AsciiDenyList
:
:
STD3
Hyphens
:
:
Check
)
;
assert
!
(
result
.
is_ok
(
)
)
;
assert_eq
!
(
&
unicode
"
a
"
)
;
}
