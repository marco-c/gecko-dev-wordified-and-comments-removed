#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
socket2
/
0
.
3
"
)
]
#
!
[
deny
(
missing_docs
)
]
use
crate
:
:
utils
:
:
NetInt
;
#
[
cfg
(
any
(
unix
target_os
=
"
redox
"
)
)
]
use
libc
:
:
{
sockaddr_storage
socklen_t
}
;
#
[
cfg
(
windows
)
]
use
winapi
:
:
shared
:
:
ws2def
:
:
SOCKADDR_STORAGE
as
sockaddr_storage
;
#
[
cfg
(
windows
)
]
use
winapi
:
:
um
:
:
ws2tcpip
:
:
socklen_t
;
mod
sockaddr
;
mod
socket
;
mod
utils
;
#
[
cfg
(
unix
)
]
#
[
path
=
"
sys
/
unix
.
rs
"
]
mod
sys
;
#
[
cfg
(
windows
)
]
#
[
path
=
"
sys
/
windows
.
rs
"
]
mod
sys
;
#
[
cfg
(
target_os
=
"
redox
"
)
]
#
[
path
=
"
sys
/
redox
/
mod
.
rs
"
]
mod
sys
;
pub
struct
Socket
{
inner
:
sys
:
:
Socket
}
pub
struct
SockAddr
{
storage
:
sockaddr_storage
len
:
socklen_t
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
Domain
(
i32
)
;
#
[
derive
(
Copy
Clone
)
]
pub
struct
Type
(
i32
)
;
#
[
derive
(
Copy
Clone
)
]
pub
struct
Protocol
(
i32
)
;
fn
hton
<
I
:
NetInt
>
(
i
:
I
)
-
>
I
{
i
.
to_be
(
)
}
#
[
cfg
(
not
(
target_os
=
"
redox
"
)
)
]
fn
ntoh
<
I
:
NetInt
>
(
i
:
I
)
-
>
I
{
I
:
:
from_be
(
i
)
}
