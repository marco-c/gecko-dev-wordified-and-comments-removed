#
[
cfg
(
raw_ref_macros
)
]
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
_memoffset__addr_of
{
(
path
:
expr
)
=
>
{
{
crate
:
:
__priv
:
:
ptr
:
:
addr_of
!
(
path
)
}
}
;
}
#
[
cfg
(
not
(
raw_ref_macros
)
)
]
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
_memoffset__addr_of
{
(
path
:
expr
)
=
>
{
{
/
/
This
is
UB
because
we
create
an
intermediate
reference
to
uninitialized
memory
.
/
/
Nothing
we
can
do
about
that
without
addr_of
!
though
.
&
path
as
*
const
_
}
}
;
}
#
[
cfg
(
allow_clippy
)
]
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
_memoffset__field_check
{
(
type
:
path
field
:
tt
)
=
>
{
/
/
Make
sure
the
field
actually
exists
.
This
line
ensures
that
a
/
/
compile
-
time
error
is
generated
if
field
is
accessed
through
a
/
/
Deref
impl
.
#
[
allow
(
clippy
:
:
unneeded_field_pattern
)
]
let
type
{
field
:
_
.
.
}
;
}
;
}
#
[
cfg
(
not
(
allow_clippy
)
)
]
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
_memoffset__field_check
{
(
type
:
path
field
:
tt
)
=
>
{
/
/
Make
sure
the
field
actually
exists
.
This
line
ensures
that
a
/
/
compile
-
time
error
is
generated
if
field
is
accessed
through
a
/
/
Deref
impl
.
let
type
{
field
:
_
.
.
}
;
}
;
}
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
_memoffset__field_check_tuple
{
(
type
:
ty
field
:
tt
)
=
>
{
/
/
Make
sure
the
type
argument
is
a
tuple
let
(
_
.
.
)
:
type
;
}
;
}
#
[
macro_export
(
local_inner_macros
)
]
macro_rules
!
raw_field
{
(
base
:
expr
parent
:
path
field
:
tt
)
=
>
{
{
_memoffset__field_check
!
(
parent
field
)
;
let
base
=
base
;
/
/
evaluate
base
outside
the
unsafe
block
/
/
Get
the
field
address
.
/
/
Crucially
we
know
that
this
will
not
trigger
a
deref
coercion
because
/
/
of
the
field
check
we
did
above
.
#
[
allow
(
unused_unsafe
)
]
/
/
for
when
the
macro
is
used
in
an
unsafe
block
unsafe
{
_memoffset__addr_of
!
(
(
*
(
base
as
*
const
parent
)
)
.
field
)
}
}
}
;
}
#
[
cfg
(
tuple_ty
)
]
#
[
macro_export
(
local_inner_macros
)
]
macro_rules
!
raw_field_tuple
{
(
base
:
expr
parent
:
ty
field
:
tt
)
=
>
{
{
_memoffset__field_check_tuple
!
(
parent
field
)
;
let
base
=
base
;
/
/
evaluate
base
outside
the
unsafe
block
/
/
Get
the
field
address
.
/
/
Crucially
we
know
that
this
will
not
trigger
a
deref
coercion
because
/
/
of
the
field
check
we
did
above
.
#
[
allow
(
unused_unsafe
)
]
/
/
for
when
the
macro
is
used
in
an
unsafe
block
unsafe
{
_memoffset__addr_of
!
(
(
*
(
base
as
*
const
parent
)
)
.
field
)
}
}
}
;
}
