#
ifndef
CONTEXT_H
#
define
CONTEXT_H
#
include
"
errors
.
h
"
#
include
"
extensions
.
h
"
#
include
"
mtypes
.
h
"
#
include
"
vbo
/
vbo
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
struct
_glapi_table
;
extern
struct
gl_config
*
_mesa_create_visual
(
GLboolean
dbFlag
GLboolean
stereoFlag
GLint
redBits
GLint
greenBits
GLint
blueBits
GLint
alphaBits
GLint
depthBits
GLint
stencilBits
GLint
accumRedBits
GLint
accumGreenBits
GLint
accumBlueBits
GLint
accumAlphaBits
GLuint
numSamples
)
;
extern
GLboolean
_mesa_initialize_visual
(
struct
gl_config
*
v
GLboolean
dbFlag
GLboolean
stereoFlag
GLint
redBits
GLint
greenBits
GLint
blueBits
GLint
alphaBits
GLint
depthBits
GLint
stencilBits
GLint
accumRedBits
GLint
accumGreenBits
GLint
accumBlueBits
GLint
accumAlphaBits
GLuint
numSamples
)
;
extern
void
_mesa_destroy_visual
(
struct
gl_config
*
vis
)
;
extern
void
_mesa_initialize
(
void
)
;
extern
GLboolean
_mesa_initialize_context
(
struct
gl_context
*
ctx
gl_api
api
const
struct
gl_config
*
visual
struct
gl_context
*
share_list
const
struct
dd_function_table
*
driverFunctions
)
;
extern
void
_mesa_free_context_data
(
struct
gl_context
*
ctx
)
;
extern
void
_mesa_destroy_context
(
struct
gl_context
*
ctx
)
;
extern
void
_mesa_copy_context
(
const
struct
gl_context
*
src
struct
gl_context
*
dst
GLuint
mask
)
;
extern
GLboolean
_mesa_make_current
(
struct
gl_context
*
ctx
struct
gl_framebuffer
*
drawBuffer
struct
gl_framebuffer
*
readBuffer
)
;
extern
GLboolean
_mesa_share_state
(
struct
gl_context
*
ctx
struct
gl_context
*
ctxToShare
)
;
extern
struct
gl_context
*
_mesa_get_current_context
(
void
)
;
extern
void
_mesa_init_constants
(
struct
gl_constants
*
consts
gl_api
api
)
;
extern
void
_mesa_notifySwapBuffers
(
struct
gl_context
*
gc
)
;
extern
struct
_glapi_table
*
_mesa_get_dispatch
(
struct
gl_context
*
ctx
)
;
extern
void
_mesa_set_context_lost_dispatch
(
struct
gl_context
*
ctx
)
;
extern
void
_mesa_flush
(
struct
gl_context
*
ctx
)
;
extern
void
GLAPIENTRY
_mesa_Finish
(
void
)
;
extern
void
GLAPIENTRY
_mesa_Flush
(
void
)
;
static
inline
GLboolean
_mesa_inside_begin_end
(
const
struct
gl_context
*
ctx
)
{
return
ctx
-
>
Driver
.
CurrentExecPrimitive
!
=
PRIM_OUTSIDE_BEGIN_END
;
}
static
inline
GLboolean
_mesa_inside_dlist_begin_end
(
const
struct
gl_context
*
ctx
)
{
return
ctx
-
>
Driver
.
CurrentSavePrimitive
<
=
PRIM_MAX
;
}
#
define
FLUSH_VERTICES
(
ctx
newstate
)
\
do
{
\
if
(
MESA_VERBOSE
&
VERBOSE_STATE
)
\
_mesa_debug
(
ctx
"
FLUSH_VERTICES
in
%
s
\
n
"
__func__
)
;
\
if
(
ctx
-
>
Driver
.
NeedFlush
&
FLUSH_STORED_VERTICES
)
\
vbo_exec_FlushVertices
(
ctx
FLUSH_STORED_VERTICES
)
;
\
ctx
-
>
NewState
|
=
newstate
;
\
}
while
(
0
)
#
define
FLUSH_CURRENT
(
ctx
newstate
)
\
do
{
\
if
(
MESA_VERBOSE
&
VERBOSE_STATE
)
\
_mesa_debug
(
ctx
"
FLUSH_CURRENT
in
%
s
\
n
"
__func__
)
;
\
if
(
ctx
-
>
Driver
.
NeedFlush
&
FLUSH_UPDATE_CURRENT
)
\
vbo_exec_FlushVertices
(
ctx
FLUSH_UPDATE_CURRENT
)
;
\
ctx
-
>
NewState
|
=
newstate
;
\
}
while
(
0
)
#
define
FLUSH_FOR_DRAW
(
ctx
)
\
do
{
\
if
(
MESA_VERBOSE
&
VERBOSE_STATE
)
\
_mesa_debug
(
ctx
"
FLUSH_FOR_DRAW
in
%
s
\
n
"
__func__
)
;
\
if
(
ctx
-
>
Driver
.
NeedFlush
)
{
\
if
(
ctx
-
>
_AllowDrawOutOfOrder
)
{
\
if
(
ctx
-
>
Driver
.
NeedFlush
&
FLUSH_UPDATE_CURRENT
)
\
vbo_exec_FlushVertices
(
ctx
FLUSH_UPDATE_CURRENT
)
;
\
}
else
{
\
vbo_exec_FlushVertices
(
ctx
ctx
-
>
Driver
.
NeedFlush
)
;
\
}
\
}
\
}
while
(
0
)
#
define
ASSERT_OUTSIDE_BEGIN_END_WITH_RETVAL
(
ctx
retval
)
\
do
{
\
if
(
_mesa_inside_begin_end
(
ctx
)
)
{
\
_mesa_error
(
ctx
GL_INVALID_OPERATION
"
Inside
glBegin
/
glEnd
"
)
;
\
return
retval
;
\
}
\
}
while
(
0
)
#
define
ASSERT_OUTSIDE_BEGIN_END
(
ctx
)
\
do
{
\
if
(
_mesa_inside_begin_end
(
ctx
)
)
{
\
_mesa_error
(
ctx
GL_INVALID_OPERATION
"
Inside
glBegin
/
glEnd
"
)
;
\
return
;
\
}
\
}
while
(
0
)
static
inline
bool
_mesa_is_desktop_gl
(
const
struct
gl_context
*
ctx
)
{
return
ctx
-
>
API
=
=
API_OPENGL_COMPAT
|
|
ctx
-
>
API
=
=
API_OPENGL_CORE
;
}
static
inline
bool
_mesa_is_gles
(
const
struct
gl_context
*
ctx
)
{
return
ctx
-
>
API
=
=
API_OPENGLES
|
|
ctx
-
>
API
=
=
API_OPENGLES2
;
}
static
inline
bool
_mesa_is_gles3
(
const
struct
gl_context
*
ctx
)
{
return
ctx
-
>
API
=
=
API_OPENGLES2
&
&
ctx
-
>
Version
>
=
30
;
}
static
inline
bool
_mesa_is_gles31
(
const
struct
gl_context
*
ctx
)
{
return
ctx
-
>
API
=
=
API_OPENGLES2
&
&
ctx
-
>
Version
>
=
31
;
}
static
inline
bool
_mesa_is_gles32
(
const
struct
gl_context
*
ctx
)
{
return
ctx
-
>
API
=
=
API_OPENGLES2
&
&
ctx
-
>
Version
>
=
32
;
}
static
inline
bool
_mesa_is_no_error_enabled
(
const
struct
gl_context
*
ctx
)
{
return
ctx
-
>
Const
.
ContextFlags
&
GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR
;
}
static
inline
bool
_mesa_has_integer_textures
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_EXT_texture_integer
(
ctx
)
|
|
_mesa_is_gles3
(
ctx
)
;
}
static
inline
bool
_mesa_has_half_float_textures
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_ARB_texture_float
(
ctx
)
|
|
_mesa_has_OES_texture_half_float
(
ctx
)
|
|
_mesa_is_gles3
(
ctx
)
;
}
static
inline
bool
_mesa_has_float_textures
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_ARB_texture_float
(
ctx
)
|
|
_mesa_has_OES_texture_float
(
ctx
)
|
|
_mesa_is_gles3
(
ctx
)
;
}
static
inline
bool
_mesa_has_texture_rgb10_a2ui
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_ARB_texture_rgb10_a2ui
(
ctx
)
|
|
_mesa_is_gles3
(
ctx
)
;
}
static
inline
bool
_mesa_has_float_depth_buffer
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_ARB_depth_buffer_float
(
ctx
)
|
|
_mesa_is_gles3
(
ctx
)
;
}
static
inline
bool
_mesa_has_packed_float
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_EXT_packed_float
(
ctx
)
|
|
_mesa_is_gles3
(
ctx
)
;
}
static
inline
bool
_mesa_has_rg_textures
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_ARB_texture_rg
(
ctx
)
|
|
_mesa_has_EXT_texture_rg
(
ctx
)
|
|
_mesa_is_gles3
(
ctx
)
;
}
static
inline
bool
_mesa_has_texture_shared_exponent
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_EXT_texture_shared_exponent
(
ctx
)
|
|
_mesa_is_gles3
(
ctx
)
;
}
static
inline
bool
_mesa_has_texture_type_2_10_10_10_REV
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_is_desktop_gl
(
ctx
)
|
|
_mesa_has_EXT_texture_type_2_10_10_10_REV
(
ctx
)
;
}
static
inline
bool
_mesa_has_geometry_shaders
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_OES_geometry_shader
(
ctx
)
|
|
(
_mesa_is_desktop_gl
(
ctx
)
&
&
ctx
-
>
Version
>
=
32
)
;
}
static
inline
bool
_mesa_has_compute_shaders
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_ARB_compute_shader
(
ctx
)
|
|
(
ctx
-
>
API
=
=
API_OPENGLES2
&
&
ctx
-
>
Version
>
=
31
)
;
}
static
inline
bool
_mesa_has_tessellation
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_OES_tessellation_shader
(
ctx
)
|
|
_mesa_has_ARB_tessellation_shader
(
ctx
)
;
}
static
inline
bool
_mesa_has_texture_cube_map_array
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_ARB_texture_cube_map_array
(
ctx
)
|
|
_mesa_has_OES_texture_cube_map_array
(
ctx
)
;
}
static
inline
bool
_mesa_has_texture_view
(
const
struct
gl_context
*
ctx
)
{
return
_mesa_has_ARB_texture_view
(
ctx
)
|
|
_mesa_has_OES_texture_view
(
ctx
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
