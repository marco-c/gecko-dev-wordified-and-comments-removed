#
ifndef
DD_INCLUDED
#
define
DD_INCLUDED
#
include
"
glheader
.
h
"
#
include
"
formats
.
h
"
#
include
"
menums
.
h
"
struct
gl_bitmap_atlas
;
struct
gl_buffer_object
;
struct
gl_context
;
struct
gl_display_list
;
struct
gl_framebuffer
;
struct
gl_image_unit
;
struct
gl_pixelstore_attrib
;
struct
gl_program
;
struct
gl_renderbuffer
;
struct
gl_renderbuffer_attachment
;
struct
gl_shader
;
struct
gl_shader_program
;
struct
gl_texture_image
;
struct
gl_texture_object
;
struct
gl_memory_info
;
struct
gl_transform_feedback_object
;
struct
ati_fragment_shader
;
struct
util_queue_monitoring
;
struct
_mesa_prim
;
struct
_mesa_index_buffer
;
#
define
MESA_MAP_NOWAIT_BIT
0x4000
struct
dd_function_table
{
const
GLubyte
*
(
*
GetString
)
(
struct
gl_context
*
ctx
GLenum
name
)
;
void
(
*
UpdateState
)
(
struct
gl_context
*
ctx
)
;
void
(
*
Finish
)
(
struct
gl_context
*
ctx
)
;
void
(
*
Flush
)
(
struct
gl_context
*
ctx
)
;
void
(
*
Clear
)
(
struct
gl_context
*
ctx
GLbitfield
buffers
)
;
void
(
*
RasterPos
)
(
struct
gl_context
*
ctx
const
GLfloat
v
[
4
]
)
;
void
(
*
DrawPixels
)
(
struct
gl_context
*
ctx
GLint
x
GLint
y
GLsizei
width
GLsizei
height
GLenum
format
GLenum
type
const
struct
gl_pixelstore_attrib
*
unpack
const
GLvoid
*
pixels
)
;
void
(
*
ReadPixels
)
(
struct
gl_context
*
ctx
GLint
x
GLint
y
GLsizei
width
GLsizei
height
GLenum
format
GLenum
type
const
struct
gl_pixelstore_attrib
*
unpack
GLvoid
*
dest
)
;
void
(
*
CopyPixels
)
(
struct
gl_context
*
ctx
GLint
srcx
GLint
srcy
GLsizei
width
GLsizei
height
GLint
dstx
GLint
dsty
GLenum
type
)
;
void
(
*
Bitmap
)
(
struct
gl_context
*
ctx
GLint
x
GLint
y
GLsizei
width
GLsizei
height
const
struct
gl_pixelstore_attrib
*
unpack
const
GLubyte
*
bitmap
)
;
void
(
*
DrawAtlasBitmaps
)
(
struct
gl_context
*
ctx
const
struct
gl_bitmap_atlas
*
atlas
GLuint
count
const
GLubyte
*
ids
)
;
mesa_format
(
*
ChooseTextureFormat
)
(
struct
gl_context
*
ctx
GLenum
target
GLint
internalFormat
GLenum
srcFormat
GLenum
srcType
)
;
void
(
*
QueryInternalFormat
)
(
struct
gl_context
*
ctx
GLenum
target
GLenum
internalFormat
GLenum
pname
GLint
*
params
)
;
void
(
*
TexImage
)
(
struct
gl_context
*
ctx
GLuint
dims
struct
gl_texture_image
*
texImage
GLenum
format
GLenum
type
const
GLvoid
*
pixels
const
struct
gl_pixelstore_attrib
*
packing
)
;
void
(
*
TexSubImage
)
(
struct
gl_context
*
ctx
GLuint
dims
struct
gl_texture_image
*
texImage
GLint
xoffset
GLint
yoffset
GLint
zoffset
GLsizei
width
GLsizei
height
GLint
depth
GLenum
format
GLenum
type
const
GLvoid
*
pixels
const
struct
gl_pixelstore_attrib
*
packing
)
;
void
(
*
GetTexSubImage
)
(
struct
gl_context
*
ctx
GLint
xoffset
GLint
yoffset
GLint
zoffset
GLsizei
width
GLsizei
height
GLsizei
depth
GLenum
format
GLenum
type
GLvoid
*
pixels
struct
gl_texture_image
*
texImage
)
;
void
(
*
ClearTexSubImage
)
(
struct
gl_context
*
ctx
struct
gl_texture_image
*
texImage
GLint
xoffset
GLint
yoffset
GLint
zoffset
GLsizei
width
GLsizei
height
GLsizei
depth
const
GLvoid
*
clearValue
)
;
void
(
*
CopyTexSubImage
)
(
struct
gl_context
*
ctx
GLuint
dims
struct
gl_texture_image
*
texImage
GLint
xoffset
GLint
yoffset
GLint
slice
struct
gl_renderbuffer
*
rb
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
;
void
(
*
CopyImageSubData
)
(
struct
gl_context
*
ctx
struct
gl_texture_image
*
src_teximage
struct
gl_renderbuffer
*
src_renderbuffer
int
src_x
int
src_y
int
src_z
struct
gl_texture_image
*
dst_teximage
struct
gl_renderbuffer
*
dst_renderbuffer
int
dst_x
int
dst_y
int
dst_z
int
src_width
int
src_height
)
;
void
(
*
GenerateMipmap
)
(
struct
gl_context
*
ctx
GLenum
target
struct
gl_texture_object
*
texObj
)
;
GLboolean
(
*
TestProxyTexImage
)
(
struct
gl_context
*
ctx
GLenum
target
GLuint
numLevels
GLint
level
mesa_format
format
GLuint
numSamples
GLint
width
GLint
height
GLint
depth
)
;
void
(
*
CompressedTexImage
)
(
struct
gl_context
*
ctx
GLuint
dims
struct
gl_texture_image
*
texImage
GLsizei
imageSize
const
GLvoid
*
data
)
;
void
(
*
CompressedTexSubImage
)
(
struct
gl_context
*
ctx
GLuint
dims
struct
gl_texture_image
*
texImage
GLint
xoffset
GLint
yoffset
GLint
zoffset
GLsizei
width
GLsizei
height
GLsizei
depth
GLenum
format
GLsizei
imageSize
const
GLvoid
*
data
)
;
void
(
*
BindTexture
)
(
struct
gl_context
*
ctx
GLuint
texUnit
GLenum
target
struct
gl_texture_object
*
tObj
)
;
struct
gl_texture_object
*
(
*
NewTextureObject
)
(
struct
gl_context
*
ctx
GLuint
name
GLenum
target
)
;
void
(
*
DeleteTexture
)
(
struct
gl_context
*
ctx
struct
gl_texture_object
*
texObj
)
;
struct
gl_texture_image
*
(
*
NewTextureImage
)
(
struct
gl_context
*
ctx
)
;
void
(
*
DeleteTextureImage
)
(
struct
gl_context
*
ctx
struct
gl_texture_image
*
)
;
GLboolean
(
*
AllocTextureImageBuffer
)
(
struct
gl_context
*
ctx
struct
gl_texture_image
*
texImage
)
;
void
(
*
FreeTextureImageBuffer
)
(
struct
gl_context
*
ctx
struct
gl_texture_image
*
texImage
)
;
void
(
*
MapTextureImage
)
(
struct
gl_context
*
ctx
struct
gl_texture_image
*
texImage
GLuint
slice
GLuint
x
GLuint
y
GLuint
w
GLuint
h
GLbitfield
mode
GLubyte
*
*
mapOut
GLint
*
rowStrideOut
)
;
void
(
*
UnmapTextureImage
)
(
struct
gl_context
*
ctx
struct
gl_texture_image
*
texImage
GLuint
slice
)
;
GLboolean
(
*
AllocTextureStorage
)
(
struct
gl_context
*
ctx
struct
gl_texture_object
*
texObj
GLsizei
levels
GLsizei
width
GLsizei
height
GLsizei
depth
)
;
GLboolean
(
*
TextureView
)
(
struct
gl_context
*
ctx
struct
gl_texture_object
*
texObj
struct
gl_texture_object
*
origTexObj
)
;
void
(
*
MapRenderbuffer
)
(
struct
gl_context
*
ctx
struct
gl_renderbuffer
*
rb
GLuint
x
GLuint
y
GLuint
w
GLuint
h
GLbitfield
mode
GLubyte
*
*
mapOut
GLint
*
rowStrideOut
bool
flip_y
)
;
void
(
*
UnmapRenderbuffer
)
(
struct
gl_context
*
ctx
struct
gl_renderbuffer
*
rb
)
;
GLboolean
(
*
BindRenderbufferTexImage
)
(
struct
gl_context
*
ctx
struct
gl_renderbuffer
*
rb
struct
gl_texture_image
*
texImage
)
;
struct
gl_program
*
(
*
NewProgram
)
(
struct
gl_context
*
ctx
GLenum
target
GLuint
id
bool
is_arb_asm
)
;
void
(
*
DeleteProgram
)
(
struct
gl_context
*
ctx
struct
gl_program
*
prog
)
;
struct
gl_program
*
(
*
NewATIfs
)
(
struct
gl_context
*
ctx
struct
ati_fragment_shader
*
curProg
)
;
GLboolean
(
*
ProgramStringNotify
)
(
struct
gl_context
*
ctx
GLenum
target
struct
gl_program
*
prog
)
;
void
(
*
SamplerUniformChange
)
(
struct
gl_context
*
ctx
GLenum
target
struct
gl_program
*
prog
)
;
GLboolean
(
*
IsProgramNative
)
(
struct
gl_context
*
ctx
GLenum
target
struct
gl_program
*
prog
)
;
GLboolean
(
*
LinkShader
)
(
struct
gl_context
*
ctx
struct
gl_shader_program
*
shader
)
;
void
(
*
Draw
)
(
struct
gl_context
*
ctx
const
struct
_mesa_prim
*
prims
GLuint
nr_prims
const
struct
_mesa_index_buffer
*
ib
GLboolean
index_bounds_valid
GLuint
min_index
GLuint
max_index
struct
gl_transform_feedback_object
*
tfb_vertcount
unsigned
tfb_stream
struct
gl_buffer_object
*
indirect
)
;
void
(
*
DrawIndirect
)
(
struct
gl_context
*
ctx
GLuint
mode
struct
gl_buffer_object
*
indirect_data
GLsizeiptr
indirect_offset
unsigned
draw_count
unsigned
stride
struct
gl_buffer_object
*
indirect_draw_count_buffer
GLsizeiptr
indirect_draw_count_offset
const
struct
_mesa_index_buffer
*
ib
)
;
void
(
*
AlphaFunc
)
(
struct
gl_context
*
ctx
GLenum
func
GLfloat
ref
)
;
void
(
*
BlendColor
)
(
struct
gl_context
*
ctx
const
GLfloat
color
[
4
]
)
;
void
(
*
BlendEquationSeparate
)
(
struct
gl_context
*
ctx
GLenum
modeRGB
GLenum
modeA
)
;
void
(
*
BlendFuncSeparate
)
(
struct
gl_context
*
ctx
GLenum
sfactorRGB
GLenum
dfactorRGB
GLenum
sfactorA
GLenum
dfactorA
)
;
void
(
*
ClipPlane
)
(
struct
gl_context
*
ctx
GLenum
plane
const
GLfloat
*
eq
)
;
void
(
*
ColorMask
)
(
struct
gl_context
*
ctx
GLboolean
rmask
GLboolean
gmask
GLboolean
bmask
GLboolean
amask
)
;
void
(
*
ColorMaterial
)
(
struct
gl_context
*
ctx
GLenum
face
GLenum
mode
)
;
void
(
*
CullFace
)
(
struct
gl_context
*
ctx
GLenum
mode
)
;
void
(
*
FrontFace
)
(
struct
gl_context
*
ctx
GLenum
mode
)
;
void
(
*
DepthFunc
)
(
struct
gl_context
*
ctx
GLenum
func
)
;
void
(
*
DepthMask
)
(
struct
gl_context
*
ctx
GLboolean
flag
)
;
void
(
*
DepthRange
)
(
struct
gl_context
*
ctx
)
;
void
(
*
DrawBuffer
)
(
struct
gl_context
*
ctx
)
;
void
(
*
DrawBufferAllocate
)
(
struct
gl_context
*
ctx
)
;
void
(
*
Enable
)
(
struct
gl_context
*
ctx
GLenum
cap
GLboolean
state
)
;
void
(
*
Fogfv
)
(
struct
gl_context
*
ctx
GLenum
pname
const
GLfloat
*
params
)
;
void
(
*
Lightfv
)
(
struct
gl_context
*
ctx
GLenum
light
GLenum
pname
const
GLfloat
*
params
)
;
void
(
*
LightModelfv
)
(
struct
gl_context
*
ctx
GLenum
pname
const
GLfloat
*
params
)
;
void
(
*
LineStipple
)
(
struct
gl_context
*
ctx
GLint
factor
GLushort
pattern
)
;
void
(
*
LineWidth
)
(
struct
gl_context
*
ctx
GLfloat
width
)
;
void
(
*
LogicOpcode
)
(
struct
gl_context
*
ctx
enum
gl_logicop_mode
opcode
)
;
void
(
*
PointParameterfv
)
(
struct
gl_context
*
ctx
GLenum
pname
const
GLfloat
*
params
)
;
void
(
*
PointSize
)
(
struct
gl_context
*
ctx
GLfloat
size
)
;
void
(
*
PolygonMode
)
(
struct
gl_context
*
ctx
GLenum
face
GLenum
mode
)
;
void
(
*
PolygonOffset
)
(
struct
gl_context
*
ctx
GLfloat
factor
GLfloat
units
GLfloat
clamp
)
;
void
(
*
PolygonStipple
)
(
struct
gl_context
*
ctx
const
GLubyte
*
mask
)
;
void
(
*
ReadBuffer
)
(
struct
gl_context
*
ctx
GLenum
buffer
)
;
void
(
*
RenderMode
)
(
struct
gl_context
*
ctx
GLenum
mode
)
;
void
(
*
Scissor
)
(
struct
gl_context
*
ctx
)
;
void
(
*
ShadeModel
)
(
struct
gl_context
*
ctx
GLenum
mode
)
;
void
(
*
StencilFuncSeparate
)
(
struct
gl_context
*
ctx
GLenum
face
GLenum
func
GLint
ref
GLuint
mask
)
;
void
(
*
StencilMaskSeparate
)
(
struct
gl_context
*
ctx
GLenum
face
GLuint
mask
)
;
void
(
*
StencilOpSeparate
)
(
struct
gl_context
*
ctx
GLenum
face
GLenum
fail
GLenum
zfail
GLenum
zpass
)
;
void
(
*
TexGen
)
(
struct
gl_context
*
ctx
GLenum
coord
GLenum
pname
const
GLfloat
*
params
)
;
void
(
*
TexEnv
)
(
struct
gl_context
*
ctx
GLenum
target
GLenum
pname
const
GLfloat
*
param
)
;
void
(
*
TexParameter
)
(
struct
gl_context
*
ctx
struct
gl_texture_object
*
texObj
GLenum
pname
)
;
void
(
*
Viewport
)
(
struct
gl_context
*
ctx
)
;
struct
gl_buffer_object
*
(
*
NewBufferObject
)
(
struct
gl_context
*
ctx
GLuint
buffer
)
;
void
(
*
DeleteBuffer
)
(
struct
gl_context
*
ctx
struct
gl_buffer_object
*
obj
)
;
GLboolean
(
*
BufferData
)
(
struct
gl_context
*
ctx
GLenum
target
GLsizeiptrARB
size
const
GLvoid
*
data
GLenum
usage
GLenum
storageFlags
struct
gl_buffer_object
*
obj
)
;
void
(
*
BufferSubData
)
(
struct
gl_context
*
ctx
GLintptrARB
offset
GLsizeiptrARB
size
const
GLvoid
*
data
struct
gl_buffer_object
*
obj
)
;
void
(
*
GetBufferSubData
)
(
struct
gl_context
*
ctx
GLintptrARB
offset
GLsizeiptrARB
size
GLvoid
*
data
struct
gl_buffer_object
*
obj
)
;
void
(
*
ClearBufferSubData
)
(
struct
gl_context
*
ctx
GLintptr
offset
GLsizeiptr
size
const
GLvoid
*
clearValue
GLsizeiptr
clearValueSize
struct
gl_buffer_object
*
obj
)
;
void
(
*
CopyBufferSubData
)
(
struct
gl_context
*
ctx
struct
gl_buffer_object
*
src
struct
gl_buffer_object
*
dst
GLintptr
readOffset
GLintptr
writeOffset
GLsizeiptr
size
)
;
void
(
*
InvalidateBufferSubData
)
(
struct
gl_context
*
ctx
struct
gl_buffer_object
*
obj
GLintptr
offset
GLsizeiptr
length
)
;
void
*
(
*
MapBufferRange
)
(
struct
gl_context
*
ctx
GLintptr
offset
GLsizeiptr
length
GLbitfield
access
struct
gl_buffer_object
*
obj
gl_map_buffer_index
index
)
;
void
(
*
FlushMappedBufferRange
)
(
struct
gl_context
*
ctx
GLintptr
offset
GLsizeiptr
length
struct
gl_buffer_object
*
obj
gl_map_buffer_index
index
)
;
GLboolean
(
*
UnmapBuffer
)
(
struct
gl_context
*
ctx
struct
gl_buffer_object
*
obj
gl_map_buffer_index
index
)
;
GLenum
(
*
BufferObjectPurgeable
)
(
struct
gl_context
*
ctx
struct
gl_buffer_object
*
obj
GLenum
option
)
;
GLenum
(
*
RenderObjectPurgeable
)
(
struct
gl_context
*
ctx
struct
gl_renderbuffer
*
obj
GLenum
option
)
;
GLenum
(
*
TextureObjectPurgeable
)
(
struct
gl_context
*
ctx
struct
gl_texture_object
*
obj
GLenum
option
)
;
GLenum
(
*
BufferObjectUnpurgeable
)
(
struct
gl_context
*
ctx
struct
gl_buffer_object
*
obj
GLenum
option
)
;
GLenum
(
*
RenderObjectUnpurgeable
)
(
struct
gl_context
*
ctx
struct
gl_renderbuffer
*
obj
GLenum
option
)
;
GLenum
(
*
TextureObjectUnpurgeable
)
(
struct
gl_context
*
ctx
struct
gl_texture_object
*
obj
GLenum
option
)
;
struct
gl_framebuffer
*
(
*
NewFramebuffer
)
(
struct
gl_context
*
ctx
GLuint
name
)
;
struct
gl_renderbuffer
*
(
*
NewRenderbuffer
)
(
struct
gl_context
*
ctx
GLuint
name
)
;
void
(
*
BindFramebuffer
)
(
struct
gl_context
*
ctx
GLenum
target
struct
gl_framebuffer
*
drawFb
struct
gl_framebuffer
*
readFb
)
;
void
(
*
FramebufferRenderbuffer
)
(
struct
gl_context
*
ctx
struct
gl_framebuffer
*
fb
GLenum
attachment
struct
gl_renderbuffer
*
rb
)
;
void
(
*
RenderTexture
)
(
struct
gl_context
*
ctx
struct
gl_framebuffer
*
fb
struct
gl_renderbuffer_attachment
*
att
)
;
void
(
*
FinishRenderTexture
)
(
struct
gl_context
*
ctx
struct
gl_renderbuffer
*
rb
)
;
void
(
*
ValidateFramebuffer
)
(
struct
gl_context
*
ctx
struct
gl_framebuffer
*
fb
)
;
void
(
*
BlitFramebuffer
)
(
struct
gl_context
*
ctx
struct
gl_framebuffer
*
readFb
struct
gl_framebuffer
*
drawFb
GLint
srcX0
GLint
srcY0
GLint
srcX1
GLint
srcY1
GLint
dstX0
GLint
dstY0
GLint
dstX1
GLint
dstY1
GLbitfield
mask
GLenum
filter
)
;
void
(
*
DiscardFramebuffer
)
(
struct
gl_context
*
ctx
struct
gl_framebuffer
*
fb
struct
gl_renderbuffer_attachment
*
att
)
;
void
(
*
GetProgrammableSampleCaps
)
(
struct
gl_context
*
ctx
const
struct
gl_framebuffer
*
fb
GLuint
*
bits
GLuint
*
width
GLuint
*
height
)
;
void
(
*
EvaluateDepthValues
)
(
struct
gl_context
*
ctx
)
;
struct
gl_query_object
*
(
*
NewQueryObject
)
(
struct
gl_context
*
ctx
GLuint
id
)
;
void
(
*
DeleteQuery
)
(
struct
gl_context
*
ctx
struct
gl_query_object
*
q
)
;
void
(
*
BeginQuery
)
(
struct
gl_context
*
ctx
struct
gl_query_object
*
q
)
;
void
(
*
QueryCounter
)
(
struct
gl_context
*
ctx
struct
gl_query_object
*
q
)
;
void
(
*
EndQuery
)
(
struct
gl_context
*
ctx
struct
gl_query_object
*
q
)
;
void
(
*
CheckQuery
)
(
struct
gl_context
*
ctx
struct
gl_query_object
*
q
)
;
void
(
*
WaitQuery
)
(
struct
gl_context
*
ctx
struct
gl_query_object
*
q
)
;
void
(
*
StoreQueryResult
)
(
struct
gl_context
*
ctx
struct
gl_query_object
*
q
struct
gl_buffer_object
*
buf
intptr_t
offset
GLenum
pname
GLenum
ptype
)
;
void
(
*
InitPerfMonitorGroups
)
(
struct
gl_context
*
ctx
)
;
struct
gl_perf_monitor_object
*
(
*
NewPerfMonitor
)
(
struct
gl_context
*
ctx
)
;
void
(
*
DeletePerfMonitor
)
(
struct
gl_context
*
ctx
struct
gl_perf_monitor_object
*
m
)
;
GLboolean
(
*
BeginPerfMonitor
)
(
struct
gl_context
*
ctx
struct
gl_perf_monitor_object
*
m
)
;
void
(
*
ResetPerfMonitor
)
(
struct
gl_context
*
ctx
struct
gl_perf_monitor_object
*
m
)
;
void
(
*
EndPerfMonitor
)
(
struct
gl_context
*
ctx
struct
gl_perf_monitor_object
*
m
)
;
GLboolean
(
*
IsPerfMonitorResultAvailable
)
(
struct
gl_context
*
ctx
struct
gl_perf_monitor_object
*
m
)
;
void
(
*
GetPerfMonitorResult
)
(
struct
gl_context
*
ctx
struct
gl_perf_monitor_object
*
m
GLsizei
dataSize
GLuint
*
data
GLint
*
bytesWritten
)
;
unsigned
(
*
InitPerfQueryInfo
)
(
struct
gl_context
*
ctx
)
;
void
(
*
GetPerfQueryInfo
)
(
struct
gl_context
*
ctx
unsigned
queryIndex
const
char
*
*
name
GLuint
*
dataSize
GLuint
*
numCounters
GLuint
*
numActive
)
;
void
(
*
GetPerfCounterInfo
)
(
struct
gl_context
*
ctx
unsigned
queryIndex
unsigned
counterIndex
const
char
*
*
name
const
char
*
*
desc
GLuint
*
offset
GLuint
*
data_size
GLuint
*
type_enum
GLuint
*
data_type_enum
GLuint64
*
raw_max
)
;
struct
gl_perf_query_object
*
(
*
NewPerfQueryObject
)
(
struct
gl_context
*
ctx
unsigned
queryIndex
)
;
void
(
*
DeletePerfQuery
)
(
struct
gl_context
*
ctx
struct
gl_perf_query_object
*
obj
)
;
bool
(
*
BeginPerfQuery
)
(
struct
gl_context
*
ctx
struct
gl_perf_query_object
*
obj
)
;
void
(
*
EndPerfQuery
)
(
struct
gl_context
*
ctx
struct
gl_perf_query_object
*
obj
)
;
void
(
*
WaitPerfQuery
)
(
struct
gl_context
*
ctx
struct
gl_perf_query_object
*
obj
)
;
bool
(
*
IsPerfQueryReady
)
(
struct
gl_context
*
ctx
struct
gl_perf_query_object
*
obj
)
;
void
(
*
GetPerfQueryData
)
(
struct
gl_context
*
ctx
struct
gl_perf_query_object
*
obj
GLsizei
dataSize
GLuint
*
data
GLuint
*
bytesWritten
)
;
void
(
*
EmitStringMarker
)
(
struct
gl_context
*
ctx
const
GLchar
*
string
GLsizei
len
)
;
GLuint
CurrentExecPrimitive
;
GLuint
CurrentSavePrimitive
;
#
define
FLUSH_STORED_VERTICES
0x1
#
define
FLUSH_UPDATE_CURRENT
0x2
GLbitfield
NeedFlush
;
GLboolean
SaveNeedFlush
;
void
(
*
LightingSpaceChange
)
(
struct
gl_context
*
ctx
)
;
struct
gl_sync_object
*
(
*
NewSyncObject
)
(
struct
gl_context
*
)
;
void
(
*
FenceSync
)
(
struct
gl_context
*
struct
gl_sync_object
*
GLenum
GLbitfield
)
;
void
(
*
DeleteSyncObject
)
(
struct
gl_context
*
struct
gl_sync_object
*
)
;
void
(
*
CheckSync
)
(
struct
gl_context
*
struct
gl_sync_object
*
)
;
void
(
*
ClientWaitSync
)
(
struct
gl_context
*
struct
gl_sync_object
*
GLbitfield
GLuint64
)
;
void
(
*
ServerWaitSync
)
(
struct
gl_context
*
struct
gl_sync_object
*
GLbitfield
GLuint64
)
;
void
(
*
BeginConditionalRender
)
(
struct
gl_context
*
ctx
struct
gl_query_object
*
q
GLenum
mode
)
;
void
(
*
EndConditionalRender
)
(
struct
gl_context
*
ctx
struct
gl_query_object
*
q
)
;
void
(
*
DrawTex
)
(
struct
gl_context
*
ctx
GLfloat
x
GLfloat
y
GLfloat
z
GLfloat
width
GLfloat
height
)
;
void
(
*
EGLImageTargetTexture2D
)
(
struct
gl_context
*
ctx
GLenum
target
struct
gl_texture_object
*
texObj
struct
gl_texture_image
*
texImage
GLeglImageOES
image_handle
)
;
void
(
*
EGLImageTargetRenderbufferStorage
)
(
struct
gl_context
*
ctx
struct
gl_renderbuffer
*
rb
void
*
image_handle
)
;
void
(
*
EGLImageTargetTexStorage
)
(
struct
gl_context
*
ctx
GLenum
target
struct
gl_texture_object
*
texObj
struct
gl_texture_image
*
texImage
GLeglImageOES
image_handle
)
;
struct
gl_transform_feedback_object
*
(
*
NewTransformFeedback
)
(
struct
gl_context
*
ctx
GLuint
name
)
;
void
(
*
DeleteTransformFeedback
)
(
struct
gl_context
*
ctx
struct
gl_transform_feedback_object
*
obj
)
;
void
(
*
BeginTransformFeedback
)
(
struct
gl_context
*
ctx
GLenum
mode
struct
gl_transform_feedback_object
*
obj
)
;
void
(
*
EndTransformFeedback
)
(
struct
gl_context
*
ctx
struct
gl_transform_feedback_object
*
obj
)
;
void
(
*
PauseTransformFeedback
)
(
struct
gl_context
*
ctx
struct
gl_transform_feedback_object
*
obj
)
;
void
(
*
ResumeTransformFeedback
)
(
struct
gl_context
*
ctx
struct
gl_transform_feedback_object
*
obj
)
;
GLsizei
(
*
GetTransformFeedbackVertexCount
)
(
struct
gl_context
*
ctx
struct
gl_transform_feedback_object
*
obj
GLuint
stream
)
;
void
(
*
TextureBarrier
)
(
struct
gl_context
*
ctx
)
;
struct
gl_sampler_object
*
(
*
NewSamplerObject
)
(
struct
gl_context
*
ctx
GLuint
name
)
;
uint64_t
(
*
GetTimestamp
)
(
struct
gl_context
*
ctx
)
;
void
(
*
GetSamplePosition
)
(
struct
gl_context
*
ctx
struct
gl_framebuffer
*
fb
GLuint
index
GLfloat
*
outValue
)
;
void
(
*
VDPAUMapSurface
)
(
struct
gl_context
*
ctx
GLenum
target
GLenum
access
GLboolean
output
struct
gl_texture_object
*
texObj
struct
gl_texture_image
*
texImage
const
GLvoid
*
vdpSurface
GLuint
index
)
;
void
(
*
VDPAUUnmapSurface
)
(
struct
gl_context
*
ctx
GLenum
target
GLenum
access
GLboolean
output
struct
gl_texture_object
*
texObj
struct
gl_texture_image
*
texImage
const
GLvoid
*
vdpSurface
GLuint
index
)
;
GLenum
(
*
GetGraphicsResetStatus
)
(
struct
gl_context
*
ctx
)
;
void
(
*
MemoryBarrier
)
(
struct
gl_context
*
ctx
GLbitfield
barriers
)
;
void
(
*
FramebufferFetchBarrier
)
(
struct
gl_context
*
ctx
)
;
void
(
*
DispatchCompute
)
(
struct
gl_context
*
ctx
const
GLuint
*
num_groups
)
;
void
(
*
DispatchComputeIndirect
)
(
struct
gl_context
*
ctx
GLintptr
indirect
)
;
void
(
*
DispatchComputeGroupSize
)
(
struct
gl_context
*
ctx
const
GLuint
*
num_groups
const
GLuint
*
group_size
)
;
void
(
*
QueryMemoryInfo
)
(
struct
gl_context
*
ctx
struct
gl_memory_info
*
info
)
;
void
(
*
SetBackgroundContext
)
(
struct
gl_context
*
ctx
struct
util_queue_monitoring
*
queue_info
)
;
void
(
*
BufferPageCommitment
)
(
struct
gl_context
*
ctx
struct
gl_buffer_object
*
bufferObj
GLintptr
offset
GLsizeiptr
size
GLboolean
commit
)
;
GLuint64
(
*
NewTextureHandle
)
(
struct
gl_context
*
ctx
struct
gl_texture_object
*
texObj
struct
gl_sampler_object
*
sampObj
)
;
void
(
*
DeleteTextureHandle
)
(
struct
gl_context
*
ctx
GLuint64
handle
)
;
void
(
*
MakeTextureHandleResident
)
(
struct
gl_context
*
ctx
GLuint64
handle
bool
resident
)
;
GLuint64
(
*
NewImageHandle
)
(
struct
gl_context
*
ctx
struct
gl_image_unit
*
imgObj
)
;
void
(
*
DeleteImageHandle
)
(
struct
gl_context
*
ctx
GLuint64
handle
)
;
void
(
*
MakeImageHandleResident
)
(
struct
gl_context
*
ctx
GLuint64
handle
GLenum
access
bool
resident
)
;
struct
gl_memory_object
*
(
*
NewMemoryObject
)
(
struct
gl_context
*
ctx
GLuint
name
)
;
void
(
*
DeleteMemoryObject
)
(
struct
gl_context
*
ctx
struct
gl_memory_object
*
memObj
)
;
GLboolean
(
*
SetTextureStorageForMemoryObject
)
(
struct
gl_context
*
ctx
struct
gl_texture_object
*
tex_obj
struct
gl_memory_object
*
mem_obj
GLsizei
levels
GLsizei
width
GLsizei
height
GLsizei
depth
GLuint64
offset
)
;
GLboolean
(
*
BufferDataMem
)
(
struct
gl_context
*
ctx
GLenum
target
GLsizeiptrARB
size
struct
gl_memory_object
*
memObj
GLuint64
offset
GLenum
usage
struct
gl_buffer_object
*
bufObj
)
;
void
(
*
GetDriverUuid
)
(
struct
gl_context
*
ctx
char
*
uuid
)
;
void
(
*
GetDeviceUuid
)
(
struct
gl_context
*
ctx
char
*
uuid
)
;
void
(
*
ImportMemoryObjectFd
)
(
struct
gl_context
*
ctx
struct
gl_memory_object
*
memObj
GLuint64
size
int
fd
)
;
void
(
*
GetProgramBinaryDriverSHA1
)
(
struct
gl_context
*
ctx
uint8_t
*
sha1
)
;
void
(
*
ProgramBinarySerializeDriverBlob
)
(
struct
gl_context
*
ctx
struct
gl_shader_program
*
shProg
struct
gl_program
*
prog
)
;
void
(
*
ProgramBinaryDeserializeDriverBlob
)
(
struct
gl_context
*
ctx
struct
gl_shader_program
*
shProg
struct
gl_program
*
prog
)
;
struct
gl_semaphore_object
*
(
*
NewSemaphoreObject
)
(
struct
gl_context
*
ctx
GLuint
name
)
;
void
(
*
DeleteSemaphoreObject
)
(
struct
gl_context
*
ctx
struct
gl_semaphore_object
*
semObj
)
;
void
(
*
ServerWaitSemaphoreObject
)
(
struct
gl_context
*
ctx
struct
gl_semaphore_object
*
semObj
GLuint
numBufferBarriers
struct
gl_buffer_object
*
*
bufObjs
GLuint
numTextureBarriers
struct
gl_texture_object
*
*
texObjs
const
GLenum
*
srcLayouts
)
;
void
(
*
ServerSignalSemaphoreObject
)
(
struct
gl_context
*
ctx
struct
gl_semaphore_object
*
semObj
GLuint
numBufferBarriers
struct
gl_buffer_object
*
*
bufObjs
GLuint
numTextureBarriers
struct
gl_texture_object
*
*
texObjs
const
GLenum
*
dstLayouts
)
;
void
(
*
ImportSemaphoreFd
)
(
struct
gl_context
*
ctx
struct
gl_semaphore_object
*
semObj
int
fd
)
;
void
(
*
ShaderCacheSerializeDriverBlob
)
(
struct
gl_context
*
ctx
struct
gl_program
*
prog
)
;
void
(
*
SetMaxShaderCompilerThreads
)
(
struct
gl_context
*
ctx
unsigned
count
)
;
bool
(
*
GetShaderProgramCompletionStatus
)
(
struct
gl_context
*
ctx
struct
gl_shader_program
*
shprog
)
;
}
;
typedef
struct
{
void
(
GLAPIENTRYP
ArrayElement
)
(
GLint
)
;
void
(
GLAPIENTRYP
Color3f
)
(
GLfloat
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
Color3fv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
Color4f
)
(
GLfloat
GLfloat
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
Color4fv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
EdgeFlag
)
(
GLboolean
)
;
void
(
GLAPIENTRYP
EvalCoord1f
)
(
GLfloat
)
;
void
(
GLAPIENTRYP
EvalCoord1fv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
EvalCoord2f
)
(
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
EvalCoord2fv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
EvalPoint1
)
(
GLint
)
;
void
(
GLAPIENTRYP
EvalPoint2
)
(
GLint
GLint
)
;
void
(
GLAPIENTRYP
FogCoordfEXT
)
(
GLfloat
)
;
void
(
GLAPIENTRYP
FogCoordfvEXT
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
Indexf
)
(
GLfloat
)
;
void
(
GLAPIENTRYP
Indexfv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
Materialfv
)
(
GLenum
face
GLenum
pname
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
MultiTexCoord1fARB
)
(
GLenum
GLfloat
)
;
void
(
GLAPIENTRYP
MultiTexCoord1fvARB
)
(
GLenum
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
MultiTexCoord2fARB
)
(
GLenum
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
MultiTexCoord2fvARB
)
(
GLenum
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
MultiTexCoord3fARB
)
(
GLenum
GLfloat
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
MultiTexCoord3fvARB
)
(
GLenum
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
MultiTexCoord4fARB
)
(
GLenum
GLfloat
GLfloat
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
MultiTexCoord4fvARB
)
(
GLenum
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
Normal3f
)
(
GLfloat
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
Normal3fv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
SecondaryColor3fEXT
)
(
GLfloat
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
SecondaryColor3fvEXT
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
TexCoord1f
)
(
GLfloat
)
;
void
(
GLAPIENTRYP
TexCoord1fv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
TexCoord2f
)
(
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
TexCoord2fv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
TexCoord3f
)
(
GLfloat
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
TexCoord3fv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
TexCoord4f
)
(
GLfloat
GLfloat
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
TexCoord4fv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
Vertex2f
)
(
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
Vertex2fv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
Vertex3f
)
(
GLfloat
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
Vertex3fv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
Vertex4f
)
(
GLfloat
GLfloat
GLfloat
GLfloat
)
;
void
(
GLAPIENTRYP
Vertex4fv
)
(
const
GLfloat
*
)
;
void
(
GLAPIENTRYP
CallList
)
(
GLuint
)
;
void
(
GLAPIENTRYP
CallLists
)
(
GLsizei
GLenum
const
GLvoid
*
)
;
void
(
GLAPIENTRYP
Begin
)
(
GLenum
)
;
void
(
GLAPIENTRYP
End
)
(
void
)
;
void
(
GLAPIENTRYP
PrimitiveRestartNV
)
(
void
)
;
void
(
GLAPIENTRYP
VertexAttrib1fNV
)
(
GLuint
index
GLfloat
x
)
;
void
(
GLAPIENTRYP
VertexAttrib1fvNV
)
(
GLuint
index
const
GLfloat
*
v
)
;
void
(
GLAPIENTRYP
VertexAttrib2fNV
)
(
GLuint
index
GLfloat
x
GLfloat
y
)
;
void
(
GLAPIENTRYP
VertexAttrib2fvNV
)
(
GLuint
index
const
GLfloat
*
v
)
;
void
(
GLAPIENTRYP
VertexAttrib3fNV
)
(
GLuint
index
GLfloat
x
GLfloat
y
GLfloat
z
)
;
void
(
GLAPIENTRYP
VertexAttrib3fvNV
)
(
GLuint
index
const
GLfloat
*
v
)
;
void
(
GLAPIENTRYP
VertexAttrib4fNV
)
(
GLuint
index
GLfloat
x
GLfloat
y
GLfloat
z
GLfloat
w
)
;
void
(
GLAPIENTRYP
VertexAttrib4fvNV
)
(
GLuint
index
const
GLfloat
*
v
)
;
void
(
GLAPIENTRYP
VertexAttrib1fARB
)
(
GLuint
index
GLfloat
x
)
;
void
(
GLAPIENTRYP
VertexAttrib1fvARB
)
(
GLuint
index
const
GLfloat
*
v
)
;
void
(
GLAPIENTRYP
VertexAttrib2fARB
)
(
GLuint
index
GLfloat
x
GLfloat
y
)
;
void
(
GLAPIENTRYP
VertexAttrib2fvARB
)
(
GLuint
index
const
GLfloat
*
v
)
;
void
(
GLAPIENTRYP
VertexAttrib3fARB
)
(
GLuint
index
GLfloat
x
GLfloat
y
GLfloat
z
)
;
void
(
GLAPIENTRYP
VertexAttrib3fvARB
)
(
GLuint
index
const
GLfloat
*
v
)
;
void
(
GLAPIENTRYP
VertexAttrib4fARB
)
(
GLuint
index
GLfloat
x
GLfloat
y
GLfloat
z
GLfloat
w
)
;
void
(
GLAPIENTRYP
VertexAttrib4fvARB
)
(
GLuint
index
const
GLfloat
*
v
)
;
void
(
GLAPIENTRYP
VertexAttribI1i
)
(
GLuint
index
GLint
x
)
;
void
(
GLAPIENTRYP
VertexAttribI2i
)
(
GLuint
index
GLint
x
GLint
y
)
;
void
(
GLAPIENTRYP
VertexAttribI3i
)
(
GLuint
index
GLint
x
GLint
y
GLint
z
)
;
void
(
GLAPIENTRYP
VertexAttribI4i
)
(
GLuint
index
GLint
x
GLint
y
GLint
z
GLint
w
)
;
void
(
GLAPIENTRYP
VertexAttribI2iv
)
(
GLuint
index
const
GLint
*
v
)
;
void
(
GLAPIENTRYP
VertexAttribI3iv
)
(
GLuint
index
const
GLint
*
v
)
;
void
(
GLAPIENTRYP
VertexAttribI4iv
)
(
GLuint
index
const
GLint
*
v
)
;
void
(
GLAPIENTRYP
VertexAttribI1ui
)
(
GLuint
index
GLuint
x
)
;
void
(
GLAPIENTRYP
VertexAttribI2ui
)
(
GLuint
index
GLuint
x
GLuint
y
)
;
void
(
GLAPIENTRYP
VertexAttribI3ui
)
(
GLuint
index
GLuint
x
GLuint
y
GLuint
z
)
;
void
(
GLAPIENTRYP
VertexAttribI4ui
)
(
GLuint
index
GLuint
x
GLuint
y
GLuint
z
GLuint
w
)
;
void
(
GLAPIENTRYP
VertexAttribI2uiv
)
(
GLuint
index
const
GLuint
*
v
)
;
void
(
GLAPIENTRYP
VertexAttribI3uiv
)
(
GLuint
index
const
GLuint
*
v
)
;
void
(
GLAPIENTRYP
VertexAttribI4uiv
)
(
GLuint
index
const
GLuint
*
v
)
;
void
(
GLAPIENTRYP
VertexP2ui
)
(
GLenum
type
GLuint
value
)
;
void
(
GLAPIENTRYP
VertexP2uiv
)
(
GLenum
type
const
GLuint
*
value
)
;
void
(
GLAPIENTRYP
VertexP3ui
)
(
GLenum
type
GLuint
value
)
;
void
(
GLAPIENTRYP
VertexP3uiv
)
(
GLenum
type
const
GLuint
*
value
)
;
void
(
GLAPIENTRYP
VertexP4ui
)
(
GLenum
type
GLuint
value
)
;
void
(
GLAPIENTRYP
VertexP4uiv
)
(
GLenum
type
const
GLuint
*
value
)
;
void
(
GLAPIENTRYP
TexCoordP1ui
)
(
GLenum
type
GLuint
coords
)
;
void
(
GLAPIENTRYP
TexCoordP1uiv
)
(
GLenum
type
const
GLuint
*
coords
)
;
void
(
GLAPIENTRYP
TexCoordP2ui
)
(
GLenum
type
GLuint
coords
)
;
void
(
GLAPIENTRYP
TexCoordP2uiv
)
(
GLenum
type
const
GLuint
*
coords
)
;
void
(
GLAPIENTRYP
TexCoordP3ui
)
(
GLenum
type
GLuint
coords
)
;
void
(
GLAPIENTRYP
TexCoordP3uiv
)
(
GLenum
type
const
GLuint
*
coords
)
;
void
(
GLAPIENTRYP
TexCoordP4ui
)
(
GLenum
type
GLuint
coords
)
;
void
(
GLAPIENTRYP
TexCoordP4uiv
)
(
GLenum
type
const
GLuint
*
coords
)
;
void
(
GLAPIENTRYP
MultiTexCoordP1ui
)
(
GLenum
texture
GLenum
type
GLuint
coords
)
;
void
(
GLAPIENTRYP
MultiTexCoordP1uiv
)
(
GLenum
texture
GLenum
type
const
GLuint
*
coords
)
;
void
(
GLAPIENTRYP
MultiTexCoordP2ui
)
(
GLenum
texture
GLenum
type
GLuint
coords
)
;
void
(
GLAPIENTRYP
MultiTexCoordP2uiv
)
(
GLenum
texture
GLenum
type
const
GLuint
*
coords
)
;
void
(
GLAPIENTRYP
MultiTexCoordP3ui
)
(
GLenum
texture
GLenum
type
GLuint
coords
)
;
void
(
GLAPIENTRYP
MultiTexCoordP3uiv
)
(
GLenum
texture
GLenum
type
const
GLuint
*
coords
)
;
void
(
GLAPIENTRYP
MultiTexCoordP4ui
)
(
GLenum
texture
GLenum
type
GLuint
coords
)
;
void
(
GLAPIENTRYP
MultiTexCoordP4uiv
)
(
GLenum
texture
GLenum
type
const
GLuint
*
coords
)
;
void
(
GLAPIENTRYP
NormalP3ui
)
(
GLenum
type
GLuint
coords
)
;
void
(
GLAPIENTRYP
NormalP3uiv
)
(
GLenum
type
const
GLuint
*
coords
)
;
void
(
GLAPIENTRYP
ColorP3ui
)
(
GLenum
type
GLuint
color
)
;
void
(
GLAPIENTRYP
ColorP3uiv
)
(
GLenum
type
const
GLuint
*
color
)
;
void
(
GLAPIENTRYP
ColorP4ui
)
(
GLenum
type
GLuint
color
)
;
void
(
GLAPIENTRYP
ColorP4uiv
)
(
GLenum
type
const
GLuint
*
color
)
;
void
(
GLAPIENTRYP
SecondaryColorP3ui
)
(
GLenum
type
GLuint
color
)
;
void
(
GLAPIENTRYP
SecondaryColorP3uiv
)
(
GLenum
type
const
GLuint
*
color
)
;
void
(
GLAPIENTRYP
VertexAttribP1ui
)
(
GLuint
index
GLenum
type
GLboolean
normalized
GLuint
value
)
;
void
(
GLAPIENTRYP
VertexAttribP2ui
)
(
GLuint
index
GLenum
type
GLboolean
normalized
GLuint
value
)
;
void
(
GLAPIENTRYP
VertexAttribP3ui
)
(
GLuint
index
GLenum
type
GLboolean
normalized
GLuint
value
)
;
void
(
GLAPIENTRYP
VertexAttribP4ui
)
(
GLuint
index
GLenum
type
GLboolean
normalized
GLuint
value
)
;
void
(
GLAPIENTRYP
VertexAttribP1uiv
)
(
GLuint
index
GLenum
type
GLboolean
normalized
const
GLuint
*
value
)
;
void
(
GLAPIENTRYP
VertexAttribP2uiv
)
(
GLuint
index
GLenum
type
GLboolean
normalized
const
GLuint
*
value
)
;
void
(
GLAPIENTRYP
VertexAttribP3uiv
)
(
GLuint
index
GLenum
type
GLboolean
normalized
const
GLuint
*
value
)
;
void
(
GLAPIENTRYP
VertexAttribP4uiv
)
(
GLuint
index
GLenum
type
GLboolean
normalized
const
GLuint
*
value
)
;
void
(
GLAPIENTRYP
VertexAttribL1d
)
(
GLuint
index
GLdouble
x
)
;
void
(
GLAPIENTRYP
VertexAttribL2d
)
(
GLuint
index
GLdouble
x
GLdouble
y
)
;
void
(
GLAPIENTRYP
VertexAttribL3d
)
(
GLuint
index
GLdouble
x
GLdouble
y
GLdouble
z
)
;
void
(
GLAPIENTRYP
VertexAttribL4d
)
(
GLuint
index
GLdouble
x
GLdouble
y
GLdouble
z
GLdouble
w
)
;
void
(
GLAPIENTRYP
VertexAttribL1dv
)
(
GLuint
index
const
GLdouble
*
v
)
;
void
(
GLAPIENTRYP
VertexAttribL2dv
)
(
GLuint
index
const
GLdouble
*
v
)
;
void
(
GLAPIENTRYP
VertexAttribL3dv
)
(
GLuint
index
const
GLdouble
*
v
)
;
void
(
GLAPIENTRYP
VertexAttribL4dv
)
(
GLuint
index
const
GLdouble
*
v
)
;
void
(
GLAPIENTRYP
VertexAttribL1ui64ARB
)
(
GLuint
index
GLuint64EXT
x
)
;
void
(
GLAPIENTRYP
VertexAttribL1ui64vARB
)
(
GLuint
index
const
GLuint64EXT
*
v
)
;
}
GLvertexformat
;
#
endif
