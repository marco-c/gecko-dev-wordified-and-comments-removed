#
ifndef
IMPORTS_H
#
define
IMPORTS_H
#
include
<
stdlib
.
h
>
#
include
<
stdarg
.
h
>
#
include
<
string
.
h
>
#
include
"
compiler
.
h
"
#
include
"
glheader
.
h
"
#
include
"
util
/
bitscan
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
MALLOC_STRUCT
(
T
)
(
struct
T
*
)
malloc
(
sizeof
(
struct
T
)
)
#
define
CALLOC_STRUCT
(
T
)
(
struct
T
*
)
calloc
(
1
sizeof
(
struct
T
)
)
#
define
ADD_POINTERS
(
A
B
)
(
(
GLubyte
*
)
(
A
)
+
(
uintptr_t
)
(
B
)
)
typedef
union
{
GLfloat
f
;
GLint
i
;
GLuint
u
;
}
fi_type
;
static
inline
GLfloat
LOG2
(
GLfloat
x
)
{
#
if
0
const
GLfloat
y
=
x
*
x
*
x
*
x
;
const
GLuint
ix
=
*
(
(
GLuint
*
)
&
y
)
;
const
GLuint
exp
=
(
ix
>
>
23
)
&
0xFF
;
const
GLint
log2
=
(
(
GLint
)
exp
)
-
127
;
return
(
GLfloat
)
log2
*
(
1
.
0
/
4
.
0
)
;
#
endif
fi_type
num
;
GLint
log_2
;
num
.
f
=
x
;
log_2
=
(
(
num
.
i
>
>
23
)
&
255
)
-
128
;
num
.
i
&
=
~
(
255
<
<
23
)
;
num
.
i
+
=
127
<
<
23
;
num
.
f
=
(
(
-
1
.
0f
/
3
)
*
num
.
f
+
2
)
*
num
.
f
-
2
.
0f
/
3
;
return
num
.
f
+
log_2
;
}
#
if
defined
(
_MSC_VER
)
#
define
finite
_finite
#
endif
#
if
defined
(
isfinite
)
#
define
IS_INF_OR_NAN
(
x
)
(
!
isfinite
(
x
)
)
#
elif
defined
(
finite
)
#
define
IS_INF_OR_NAN
(
x
)
(
!
finite
(
x
)
)
#
elif
defined
(
__STDC_VERSION__
)
&
&
__STDC_VERSION__
>
=
199901L
#
define
IS_INF_OR_NAN
(
x
)
(
!
isfinite
(
x
)
)
#
else
#
define
IS_INF_OR_NAN
(
x
)
(
!
finite
(
x
)
)
#
endif
static
inline
int
IROUND
(
float
f
)
{
return
(
int
)
(
(
f
>
=
0
.
0F
)
?
(
f
+
0
.
5F
)
:
(
f
-
0
.
5F
)
)
;
}
static
inline
int
IROUNDD
(
double
d
)
{
return
(
int
)
(
(
d
>
=
0
.
0
)
?
(
d
+
0
.
5
)
:
(
d
-
0
.
5
)
)
;
}
static
inline
GLint64
IROUND64
(
float
f
)
{
return
(
GLint64
)
(
(
f
>
=
0
.
0F
)
?
(
f
+
0
.
5F
)
:
(
f
-
0
.
5F
)
)
;
}
static
inline
int
IROUND_POS
(
float
f
)
{
assert
(
f
>
=
0
.
0F
)
;
return
(
int
)
(
f
+
0
.
5F
)
;
}
static
inline
int
IFLOOR
(
float
f
)
{
#
if
defined
(
USE_X86_ASM
)
&
&
defined
(
__GNUC__
)
&
&
defined
(
__i386__
)
int
ai
bi
;
double
af
bf
;
af
=
(
3
<
<
22
)
+
0
.
5
+
(
double
)
f
;
bf
=
(
3
<
<
22
)
+
0
.
5
-
(
double
)
f
;
__asm__
(
"
fstps
%
0
"
:
"
=
m
"
(
ai
)
:
"
t
"
(
af
)
:
"
st
"
)
;
__asm__
(
"
fstps
%
0
"
:
"
=
m
"
(
bi
)
:
"
t
"
(
bf
)
:
"
st
"
)
;
return
(
ai
-
bi
)
>
>
1
;
#
else
int
ai
bi
;
double
af
bf
;
fi_type
u
;
af
=
(
3
<
<
22
)
+
0
.
5
+
(
double
)
f
;
bf
=
(
3
<
<
22
)
+
0
.
5
-
(
double
)
f
;
u
.
f
=
(
float
)
af
;
ai
=
u
.
i
;
u
.
f
=
(
float
)
bf
;
bi
=
u
.
i
;
return
(
ai
-
bi
)
>
>
1
;
#
endif
}
static
inline
int
_mesa_is_pow_two
(
int
x
)
{
return
!
(
x
&
(
x
-
1
)
)
;
}
static
inline
int32_t
_mesa_next_pow_two_32
(
uint32_t
x
)
{
#
ifdef
HAVE___BUILTIN_CLZ
uint32_t
y
=
(
x
!
=
1
)
;
return
(
1
+
y
)
<
<
(
(
__builtin_clz
(
x
-
y
)
^
31
)
)
;
#
else
x
-
-
;
x
|
=
x
>
>
1
;
x
|
=
x
>
>
2
;
x
|
=
x
>
>
4
;
x
|
=
x
>
>
8
;
x
|
=
x
>
>
16
;
x
+
+
;
return
x
;
#
endif
}
static
inline
int64_t
_mesa_next_pow_two_64
(
uint64_t
x
)
{
#
ifdef
HAVE___BUILTIN_CLZLL
uint64_t
y
=
(
x
!
=
1
)
;
STATIC_ASSERT
(
sizeof
(
x
)
=
=
sizeof
(
long
long
)
)
;
return
(
1
+
y
)
<
<
(
(
__builtin_clzll
(
x
-
y
)
^
63
)
)
;
#
else
x
-
-
;
x
|
=
x
>
>
1
;
x
|
=
x
>
>
2
;
x
|
=
x
>
>
4
;
x
|
=
x
>
>
8
;
x
|
=
x
>
>
16
;
x
|
=
x
>
>
32
;
x
+
+
;
return
x
;
#
endif
}
static
inline
GLuint
_mesa_logbase2
(
GLuint
n
)
{
#
ifdef
HAVE___BUILTIN_CLZ
return
(
31
-
__builtin_clz
(
n
|
1
)
)
;
#
else
GLuint
pos
=
0
;
if
(
n
>
=
1
<
<
16
)
{
n
>
>
=
16
;
pos
+
=
16
;
}
if
(
n
>
=
1
<
<
8
)
{
n
>
>
=
8
;
pos
+
=
8
;
}
if
(
n
>
=
1
<
<
4
)
{
n
>
>
=
4
;
pos
+
=
4
;
}
if
(
n
>
=
1
<
<
2
)
{
n
>
>
=
2
;
pos
+
=
2
;
}
if
(
n
>
=
1
<
<
1
)
{
pos
+
=
1
;
}
return
pos
;
#
endif
}
extern
void
*
_mesa_align_malloc
(
size_t
bytes
unsigned
long
alignment
)
;
extern
void
*
_mesa_align_calloc
(
size_t
bytes
unsigned
long
alignment
)
;
extern
void
_mesa_align_free
(
void
*
ptr
)
;
extern
void
*
_mesa_align_realloc
(
void
*
oldBuffer
size_t
oldSize
size_t
newSize
unsigned
long
alignment
)
;
extern
int
_mesa_snprintf
(
char
*
str
size_t
size
const
char
*
fmt
.
.
.
)
PRINTFLIKE
(
3
4
)
;
extern
int
_mesa_vsnprintf
(
char
*
str
size_t
size
const
char
*
fmt
va_list
arg
)
;
#
if
defined
(
_WIN32
)
&
&
!
defined
(
HAVE_STRTOK_R
)
#
define
strtok_r
strtok_s
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
