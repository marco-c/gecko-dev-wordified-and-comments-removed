#
include
"
ir
.
h
"
#
include
"
ir_visitor
.
h
"
#
include
"
ir_variable_refcount
.
h
"
#
include
"
compiler
/
glsl_types
.
h
"
#
include
"
util
/
hash_table
.
h
"
static
bool
debug
=
false
;
bool
do_dead_code
(
exec_list
*
instructions
bool
uniform_locations_assigned
)
{
ir_variable_refcount_visitor
v
;
bool
progress
=
false
;
v
.
run
(
instructions
)
;
hash_table_foreach
(
v
.
ht
e
)
{
ir_variable_refcount_entry
*
entry
=
(
ir_variable_refcount_entry
*
)
e
-
>
data
;
assert
(
entry
-
>
referenced_count
>
=
entry
-
>
assigned_count
)
;
if
(
debug
)
{
printf
(
"
%
s
%
p
:
%
d
refs
%
d
assigns
%
sdeclared
in
our
scope
\
n
"
entry
-
>
var
-
>
name
(
void
*
)
entry
-
>
var
entry
-
>
referenced_count
entry
-
>
assigned_count
entry
-
>
declaration
?
"
"
:
"
not
"
)
;
}
if
(
(
entry
-
>
referenced_count
>
entry
-
>
assigned_count
)
|
|
!
entry
-
>
declaration
)
continue
;
if
(
entry
-
>
var
-
>
data
.
always_active_io
)
continue
;
if
(
!
entry
-
>
assign_list
.
is_empty
(
)
)
{
if
(
entry
-
>
var
-
>
data
.
mode
!
=
ir_var_function_out
&
&
entry
-
>
var
-
>
data
.
mode
!
=
ir_var_function_inout
&
&
entry
-
>
var
-
>
data
.
mode
!
=
ir_var_shader_out
&
&
entry
-
>
var
-
>
data
.
mode
!
=
ir_var_shader_storage
)
{
while
(
!
entry
-
>
assign_list
.
is_empty
(
)
)
{
struct
assignment_entry
*
assignment_entry
=
exec_node_data
(
struct
assignment_entry
entry
-
>
assign_list
.
get_head_raw
(
)
link
)
;
assignment_entry
-
>
assign
-
>
remove
(
)
;
if
(
debug
)
{
printf
(
"
Removed
assignment
to
%
s
%
p
\
n
"
entry
-
>
var
-
>
name
(
void
*
)
entry
-
>
var
)
;
}
assignment_entry
-
>
link
.
remove
(
)
;
free
(
assignment_entry
)
;
}
progress
=
true
;
}
}
if
(
entry
-
>
assign_list
.
is_empty
(
)
)
{
if
(
entry
-
>
var
-
>
data
.
mode
=
=
ir_var_uniform
|
|
entry
-
>
var
-
>
data
.
mode
=
=
ir_var_shader_storage
)
{
if
(
uniform_locations_assigned
|
|
entry
-
>
var
-
>
constant_initializer
)
continue
;
if
(
entry
-
>
var
-
>
is_in_buffer_block
(
)
)
{
if
(
entry
-
>
var
-
>
get_interface_type_packing
(
)
!
=
GLSL_INTERFACE_PACKING_PACKED
)
{
entry
-
>
var
-
>
data
.
used
=
false
;
continue
;
}
}
if
(
entry
-
>
var
-
>
type
-
>
is_subroutine
(
)
)
continue
;
}
entry
-
>
var
-
>
remove
(
)
;
progress
=
true
;
if
(
debug
)
{
printf
(
"
Removed
declaration
of
%
s
%
p
\
n
"
entry
-
>
var
-
>
name
(
void
*
)
entry
-
>
var
)
;
}
}
}
return
progress
;
}
bool
do_dead_code_unlinked
(
exec_list
*
instructions
)
{
bool
progress
=
false
;
foreach_in_list
(
ir_instruction
ir
instructions
)
{
ir_function
*
f
=
ir
-
>
as_function
(
)
;
if
(
f
)
{
foreach_in_list
(
ir_function_signature
sig
&
f
-
>
signatures
)
{
if
(
do_dead_code
(
&
sig
-
>
body
false
)
)
progress
=
true
;
}
}
}
return
progress
;
}
