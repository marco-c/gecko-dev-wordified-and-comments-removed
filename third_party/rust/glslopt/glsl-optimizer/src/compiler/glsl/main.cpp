#
include
<
stdlib
.
h
>
#
include
<
stdio
.
h
>
#
include
<
getopt
.
h
>
#
include
"
main
/
mtypes
.
h
"
#
include
"
standalone
.
h
"
static
struct
standalone_options
options
;
const
struct
option
compiler_opts
[
]
=
{
{
"
dump
-
ast
"
no_argument
&
options
.
dump_ast
1
}
{
"
dump
-
hir
"
no_argument
&
options
.
dump_hir
1
}
{
"
dump
-
lir
"
no_argument
&
options
.
dump_lir
1
}
{
"
dump
-
builder
"
no_argument
&
options
.
dump_builder
1
}
{
"
link
"
no_argument
&
options
.
do_link
1
}
{
"
just
-
log
"
no_argument
&
options
.
just_log
1
}
{
"
lower
-
precision
"
no_argument
&
options
.
lower_precision
1
}
{
"
version
"
required_argument
NULL
'
v
'
}
{
NULL
0
NULL
0
}
}
;
static
void
usage_fail
(
const
char
*
name
)
{
const
char
*
header
=
"
usage
:
%
s
[
options
]
<
file
.
vert
|
file
.
tesc
|
file
.
tese
|
file
.
geom
|
file
.
frag
|
file
.
comp
>
\
n
"
"
\
n
"
"
Possible
options
are
:
\
n
"
;
printf
(
header
name
)
;
for
(
const
struct
option
*
o
=
compiler_opts
;
o
-
>
name
!
=
0
;
+
+
o
)
{
printf
(
"
-
-
%
s
"
o
-
>
name
)
;
if
(
o
-
>
has_arg
=
=
required_argument
)
printf
(
"
(
mandatory
)
"
)
;
printf
(
"
\
n
"
)
;
}
exit
(
EXIT_FAILURE
)
;
}
int
main
(
int
argc
char
*
const
*
argv
)
{
int
status
=
EXIT_SUCCESS
;
int
c
;
int
idx
=
0
;
while
(
(
c
=
getopt_long
(
argc
argv
"
"
compiler_opts
&
idx
)
)
!
=
-
1
)
{
switch
(
c
)
{
case
'
v
'
:
options
.
glsl_version
=
strtol
(
optarg
NULL
10
)
;
break
;
default
:
break
;
}
}
if
(
argc
<
=
optind
)
usage_fail
(
argv
[
0
]
)
;
struct
gl_shader_program
*
whole_program
;
static
struct
gl_context
local_ctx
;
whole_program
=
standalone_compile_shader
(
&
options
argc
-
optind
&
argv
[
optind
]
&
local_ctx
)
;
if
(
!
whole_program
)
usage_fail
(
argv
[
0
]
)
;
standalone_compiler_cleanup
(
whole_program
)
;
return
status
;
}
