#
include
"
ir
.
h
"
#
include
"
ir_basic_block
.
h
"
void
call_for_basic_blocks
(
exec_list
*
instructions
void
(
*
callback
)
(
ir_instruction
*
first
ir_instruction
*
last
void
*
data
)
void
*
data
)
{
ir_instruction
*
leader
=
NULL
;
ir_instruction
*
last
=
NULL
;
foreach_in_list
(
ir_instruction
ir
instructions
)
{
ir_if
*
ir_if
;
ir_loop
*
ir_loop
;
ir_function
*
ir_function
;
if
(
!
leader
)
leader
=
ir
;
if
(
(
ir_if
=
ir
-
>
as_if
(
)
)
)
{
callback
(
leader
ir
data
)
;
leader
=
NULL
;
call_for_basic_blocks
(
&
ir_if
-
>
then_instructions
callback
data
)
;
call_for_basic_blocks
(
&
ir_if
-
>
else_instructions
callback
data
)
;
}
else
if
(
(
ir_loop
=
ir
-
>
as_loop
(
)
)
)
{
callback
(
leader
ir
data
)
;
leader
=
NULL
;
call_for_basic_blocks
(
&
ir_loop
-
>
body_instructions
callback
data
)
;
}
else
if
(
ir
-
>
as_jump
(
)
|
|
ir
-
>
as_call
(
)
)
{
callback
(
leader
ir
data
)
;
leader
=
NULL
;
}
else
if
(
(
ir_function
=
ir
-
>
as_function
(
)
)
)
{
foreach_in_list
(
ir_function_signature
ir_sig
&
ir_function
-
>
signatures
)
{
call_for_basic_blocks
(
&
ir_sig
-
>
body
callback
data
)
;
}
}
last
=
ir
;
}
if
(
leader
)
{
callback
(
leader
last
data
)
;
}
}
