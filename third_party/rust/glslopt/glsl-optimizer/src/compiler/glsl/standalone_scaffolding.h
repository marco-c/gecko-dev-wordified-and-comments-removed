#
ifndef
STANDALONE_SCAFFOLDING_H
#
define
STANDALONE_SCAFFOLDING_H
#
include
<
assert
.
h
>
#
include
"
main
/
menums
.
h
"
#
include
"
program
/
prog_statevars
.
h
"
extern
"
C
"
void
_mesa_warning
(
struct
gl_context
*
ctx
const
char
*
fmtString
.
.
.
)
;
extern
"
C
"
void
_mesa_problem
(
struct
gl_context
*
ctx
const
char
*
fmtString
.
.
.
)
;
extern
"
C
"
void
_mesa_reference_shader_program_data
(
struct
gl_context
*
ctx
struct
gl_shader_program_data
*
*
ptr
struct
gl_shader_program_data
*
data
)
;
extern
"
C
"
void
_mesa_reference_shader
(
struct
gl_context
*
ctx
struct
gl_shader
*
*
ptr
struct
gl_shader
*
sh
)
;
extern
"
C
"
void
_mesa_reference_program_
(
struct
gl_context
*
ctx
struct
gl_program
*
*
ptr
struct
gl_program
*
prog
)
;
extern
"
C
"
struct
gl_shader
*
_mesa_new_shader
(
GLuint
name
gl_shader_stage
stage
)
;
extern
"
C
"
void
_mesa_delete_shader
(
struct
gl_context
*
ctx
struct
gl_shader
*
sh
)
;
extern
"
C
"
void
_mesa_delete_linked_shader
(
struct
gl_context
*
ctx
struct
gl_linked_shader
*
sh
)
;
extern
"
C
"
void
_mesa_clear_shader_program_data
(
struct
gl_context
*
ctx
struct
gl_shader_program
*
)
;
extern
"
C
"
void
_mesa_shader_debug
(
struct
gl_context
*
ctx
GLenum
type
GLuint
*
id
const
char
*
msg
)
;
extern
"
C
"
GLbitfield
_mesa_program_state_flags
(
const
gl_state_index16
state
[
STATE_LENGTH
]
)
;
extern
"
C
"
char
*
_mesa_program_state_string
(
const
gl_state_index16
state
[
STATE_LENGTH
]
)
;
static
inline
gl_shader_stage
_mesa_shader_enum_to_shader_stage
(
GLenum
v
)
{
switch
(
v
)
{
case
GL_VERTEX_SHADER
:
return
MESA_SHADER_VERTEX
;
case
GL_FRAGMENT_SHADER
:
return
MESA_SHADER_FRAGMENT
;
case
GL_GEOMETRY_SHADER
:
return
MESA_SHADER_GEOMETRY
;
case
GL_TESS_CONTROL_SHADER
:
return
MESA_SHADER_TESS_CTRL
;
case
GL_TESS_EVALUATION_SHADER
:
return
MESA_SHADER_TESS_EVAL
;
case
GL_COMPUTE_SHADER
:
return
MESA_SHADER_COMPUTE
;
default
:
assert
(
!
"
bad
value
in
_mesa_shader_enum_to_shader_stage
(
)
"
)
;
return
MESA_SHADER_VERTEX
;
}
}
void
initialize_context_to_defaults
(
struct
gl_context
*
ctx
gl_api
api
)
;
#
endif
