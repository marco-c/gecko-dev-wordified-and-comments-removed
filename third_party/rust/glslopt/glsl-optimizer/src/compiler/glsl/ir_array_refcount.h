#
ifndef
GLSL_IR_ARRAY_REFCOUNT_H
#
define
GLSL_IR_ARRAY_REFCOUNT_H
#
include
"
ir
.
h
"
#
include
"
ir_visitor
.
h
"
#
include
"
compiler
/
glsl_types
.
h
"
#
include
"
util
/
bitset
.
h
"
struct
array_deref_range
{
unsigned
index
;
unsigned
size
;
}
;
class
ir_array_refcount_entry
{
public
:
ir_array_refcount_entry
(
ir_variable
*
var
)
;
~
ir_array_refcount_entry
(
)
;
ir_variable
*
var
;
bool
is_referenced
;
void
mark_array_elements_referenced
(
const
array_deref_range
*
dr
unsigned
count
)
;
bool
is_linearized_index_referenced
(
unsigned
linearized_index
)
const
{
assert
(
bits
!
=
0
)
;
assert
(
linearized_index
<
=
num_bits
)
;
return
BITSET_TEST
(
bits
linearized_index
)
;
}
private
:
BITSET_WORD
*
bits
;
unsigned
num_bits
;
unsigned
array_depth
;
void
mark_array_elements_referenced
(
const
array_deref_range
*
dr
unsigned
count
unsigned
scale
unsigned
linearized_index
)
;
friend
class
array_refcount_test
;
}
;
class
ir_array_refcount_visitor
:
public
ir_hierarchical_visitor
{
public
:
ir_array_refcount_visitor
(
void
)
;
~
ir_array_refcount_visitor
(
void
)
;
virtual
ir_visitor_status
visit
(
ir_dereference_variable
*
)
;
virtual
ir_visitor_status
visit_enter
(
ir_function_signature
*
)
;
virtual
ir_visitor_status
visit_enter
(
ir_dereference_array
*
)
;
ir_array_refcount_entry
*
get_variable_entry
(
ir_variable
*
var
)
;
struct
hash_table
*
ht
;
void
*
mem_ctx
;
private
:
array_deref_range
*
get_array_deref
(
)
;
ir_dereference_array
*
last_array_deref
;
array_deref_range
*
derefs
;
unsigned
num_derefs
;
unsigned
derefs_size
;
}
;
#
endif
