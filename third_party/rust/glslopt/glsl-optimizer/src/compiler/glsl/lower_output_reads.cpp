#
include
"
ir
.
h
"
#
include
"
util
/
hash_table
.
h
"
namespace
{
class
output_read_remover
:
public
ir_hierarchical_visitor
{
protected
:
hash_table
*
replacements
;
unsigned
stage
;
public
:
output_read_remover
(
unsigned
stage
)
;
~
output_read_remover
(
)
;
virtual
ir_visitor_status
visit
(
class
ir_dereference_variable
*
)
;
virtual
ir_visitor_status
visit_leave
(
class
ir_emit_vertex
*
)
;
virtual
ir_visitor_status
visit_leave
(
class
ir_return
*
)
;
virtual
ir_visitor_status
visit_leave
(
class
ir_function_signature
*
)
;
}
;
}
static
unsigned
hash_table_var_hash
(
const
void
*
key
)
{
const
ir_variable
*
var
=
static_cast
<
const
ir_variable
*
>
(
key
)
;
return
_mesa_hash_string
(
var
-
>
name
)
;
}
output_read_remover
:
:
output_read_remover
(
unsigned
stage
)
{
this
-
>
stage
=
stage
;
replacements
=
_mesa_hash_table_create
(
NULL
hash_table_var_hash
_mesa_key_pointer_equal
)
;
}
output_read_remover
:
:
~
output_read_remover
(
)
{
_mesa_hash_table_destroy
(
replacements
NULL
)
;
}
ir_visitor_status
output_read_remover
:
:
visit
(
ir_dereference_variable
*
ir
)
{
if
(
ir
-
>
var
-
>
data
.
mode
!
=
ir_var_shader_out
|
|
ir
-
>
var
-
>
data
.
fb_fetch_output
)
return
visit_continue
;
hash_entry
*
entry
=
_mesa_hash_table_search
(
replacements
ir
-
>
var
)
;
ir_variable
*
temp
=
entry
?
(
ir_variable
*
)
entry
-
>
data
:
NULL
;
if
(
temp
=
=
NULL
)
{
void
*
var_ctx
=
ralloc_parent
(
ir
-
>
var
)
;
temp
=
new
(
var_ctx
)
ir_variable
(
ir
-
>
var
-
>
type
ir
-
>
var
-
>
name
ir_var_temporary
)
;
temp
-
>
data
.
invariant
=
ir
-
>
var
-
>
data
.
invariant
;
temp
-
>
data
.
precise
=
ir
-
>
var
-
>
data
.
precise
;
temp
-
>
data
.
precision
=
ir
-
>
var
-
>
data
.
precision
;
_mesa_hash_table_insert
(
replacements
ir
-
>
var
temp
)
;
ir
-
>
var
-
>
insert_after
(
temp
)
;
}
ir
-
>
var
=
temp
;
return
visit_continue
;
}
static
ir_assignment
*
copy
(
void
*
ctx
ir_variable
*
output
ir_variable
*
temp
)
{
ir_dereference_variable
*
lhs
=
new
(
ctx
)
ir_dereference_variable
(
output
)
;
ir_dereference_variable
*
rhs
=
new
(
ctx
)
ir_dereference_variable
(
temp
)
;
return
new
(
ctx
)
ir_assignment
(
lhs
rhs
)
;
}
static
void
emit_return_copy
(
const
void
*
key
void
*
data
void
*
closure
)
{
ir_return
*
ir
=
(
ir_return
*
)
closure
;
ir
-
>
insert_before
(
copy
(
ir
(
ir_variable
*
)
key
(
ir_variable
*
)
data
)
)
;
}
static
void
emit_main_copy
(
const
void
*
key
void
*
data
void
*
closure
)
{
ir_function_signature
*
sig
=
(
ir_function_signature
*
)
closure
;
sig
-
>
body
.
push_tail
(
copy
(
sig
(
ir_variable
*
)
key
(
ir_variable
*
)
data
)
)
;
}
ir_visitor_status
output_read_remover
:
:
visit_leave
(
ir_return
*
ir
)
{
hash_table_call_foreach
(
replacements
emit_return_copy
ir
)
;
return
visit_continue
;
}
ir_visitor_status
output_read_remover
:
:
visit_leave
(
ir_emit_vertex
*
ir
)
{
hash_table_call_foreach
(
replacements
emit_return_copy
ir
)
;
return
visit_continue
;
}
ir_visitor_status
output_read_remover
:
:
visit_leave
(
ir_function_signature
*
sig
)
{
if
(
strcmp
(
sig
-
>
function_name
(
)
"
main
"
)
!
=
0
)
return
visit_continue
;
hash_table_call_foreach
(
replacements
emit_main_copy
sig
)
;
return
visit_continue
;
}
void
lower_output_reads
(
unsigned
stage
exec_list
*
instructions
)
{
if
(
stage
=
=
MESA_SHADER_TESS_CTRL
)
return
;
output_read_remover
v
(
stage
)
;
visit_list_elements
(
&
v
instructions
)
;
}
