#
encoding
=
utf
-
8
from
__future__
import
unicode_literals
import
argparse
import
io
import
string
import
sys
def
get_args
(
)
:
    
parser
=
argparse
.
ArgumentParser
(
)
    
parser
.
add_argument
(
'
input
'
help
=
"
Name
of
input
file
"
)
    
parser
.
add_argument
(
'
output
'
help
=
"
Name
of
output
file
"
)
    
parser
.
add_argument
(
"
-
n
"
"
-
-
name
"
                        
help
=
"
Name
of
C
variable
"
)
    
args
=
parser
.
parse_args
(
)
    
return
args
def
filename_to_C_identifier
(
n
)
:
    
if
n
[
0
]
!
=
'
_
'
and
not
n
[
0
]
.
isalpha
(
)
:
        
n
=
"
_
"
+
n
[
1
:
]
    
return
"
"
.
join
(
[
c
if
c
.
isalnum
(
)
or
c
=
=
"
_
"
else
"
_
"
for
c
in
n
]
)
def
emit_byte
(
f
b
)
:
    
if
ord
(
b
)
=
=
ord
(
'
\
n
'
)
:
        
f
.
write
(
b
"
\
\
n
\
"
\
n
\
"
"
)
        
return
    
elif
ord
(
b
)
=
=
ord
(
'
\
r
'
)
:
        
f
.
write
(
b
"
\
\
r
\
"
\
n
\
"
"
)
        
return
    
elif
ord
(
b
)
=
=
ord
(
'
\
t
'
)
:
        
f
.
write
(
b
"
\
\
t
"
)
        
return
    
elif
ord
(
b
)
=
=
ord
(
'
"
'
)
:
        
f
.
write
(
b
"
\
\
\
"
"
)
        
return
    
elif
ord
(
b
)
=
=
ord
(
'
\
\
'
)
:
        
f
.
write
(
b
"
\
\
\
\
"
)
        
return
    
if
ord
(
b
)
>
=
ord
(
'
'
)
and
ord
(
b
)
<
=
ord
(
'
~
'
)
:
        
f
.
write
(
b
)
    
else
:
        
hi
=
ord
(
b
)
>
>
4
        
lo
=
ord
(
b
)
&
0x0f
        
f
.
write
(
"
\
\
x
{
:
x
}
{
:
x
}
"
.
format
(
hi
lo
)
.
encode
(
'
utf
-
8
'
)
)
def
process_file
(
args
)
:
    
with
io
.
open
(
args
.
input
"
rb
"
)
as
infile
:
        
try
:
            
with
io
.
open
(
args
.
output
"
wb
"
)
as
outfile
:
                
if
args
.
name
is
not
None
:
                    
name
=
args
.
name
                
else
:
                    
name
=
filename_to_C_identifier
(
args
.
input
)
                
outfile
.
write
(
"
static
const
char
{
}
[
]
=
\
n
\
"
"
.
format
(
name
)
.
encode
(
'
utf
-
8
'
)
)
                
while
True
:
                    
byte
=
infile
.
read
(
1
)
                    
if
byte
=
=
b
"
"
:
                        
break
                    
emit_byte
(
outfile
byte
)
                
outfile
.
write
(
b
"
\
"
\
n
;
\
n
"
)
        
except
Exception
:
            
os
.
unlink
(
args
.
output
)
            
raise
def
main
(
)
:
    
args
=
get_args
(
)
    
process_file
(
args
)
if
__name__
=
=
"
__main__
"
:
    
main
(
)
