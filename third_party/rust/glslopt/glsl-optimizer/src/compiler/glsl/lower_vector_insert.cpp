#
include
"
ir
.
h
"
#
include
"
ir_builder
.
h
"
#
include
"
ir_rvalue_visitor
.
h
"
#
include
"
ir_optimization
.
h
"
using
namespace
ir_builder
;
namespace
{
class
vector_insert_visitor
:
public
ir_rvalue_visitor
{
public
:
vector_insert_visitor
(
bool
lower_nonconstant_index
)
:
progress
(
false
)
lower_nonconstant_index
(
lower_nonconstant_index
)
{
factory
.
instructions
=
&
factory_instructions
;
}
virtual
~
vector_insert_visitor
(
)
{
assert
(
factory_instructions
.
is_empty
(
)
)
;
}
virtual
void
handle_rvalue
(
ir_rvalue
*
*
rv
)
;
ir_factory
factory
;
exec_list
factory_instructions
;
bool
progress
;
bool
lower_nonconstant_index
;
}
;
}
void
vector_insert_visitor
:
:
handle_rvalue
(
ir_rvalue
*
*
rv
)
{
if
(
*
rv
=
=
NULL
|
|
(
*
rv
)
-
>
ir_type
!
=
ir_type_expression
)
return
;
ir_expression
*
const
expr
=
(
ir_expression
*
)
*
rv
;
if
(
likely
(
expr
-
>
operation
!
=
ir_triop_vector_insert
)
)
return
;
factory
.
mem_ctx
=
ralloc_parent
(
expr
)
;
ir_constant
*
const
idx
=
expr
-
>
operands
[
2
]
-
>
constant_expression_value
(
factory
.
mem_ctx
)
;
if
(
idx
!
=
NULL
)
{
ir_variable
*
const
temp
=
factory
.
make_temp
(
expr
-
>
operands
[
0
]
-
>
type
"
vec_tmp
"
)
;
const
int
mask
=
1
<
<
idx
-
>
value
.
i
[
0
]
;
factory
.
emit
(
assign
(
temp
expr
-
>
operands
[
0
]
)
)
;
factory
.
emit
(
assign
(
temp
expr
-
>
operands
[
1
]
mask
)
)
;
this
-
>
progress
=
true
;
*
rv
=
new
(
factory
.
mem_ctx
)
ir_dereference_variable
(
temp
)
;
}
else
if
(
this
-
>
lower_nonconstant_index
)
{
ir_variable
*
const
temp
=
factory
.
make_temp
(
expr
-
>
operands
[
0
]
-
>
type
"
vec_tmp
"
)
;
ir_variable
*
const
src_temp
=
factory
.
make_temp
(
expr
-
>
operands
[
1
]
-
>
type
"
src_temp
"
)
;
factory
.
emit
(
assign
(
temp
expr
-
>
operands
[
0
]
)
)
;
factory
.
emit
(
assign
(
src_temp
expr
-
>
operands
[
1
]
)
)
;
assert
(
expr
-
>
operands
[
2
]
-
>
type
=
=
glsl_type
:
:
int_type
|
|
expr
-
>
operands
[
2
]
-
>
type
=
=
glsl_type
:
:
uint_type
)
;
for
(
unsigned
i
=
0
;
i
<
expr
-
>
type
-
>
vector_elements
;
i
+
+
)
{
ir_constant
*
const
cmp_index
=
ir_constant
:
:
zero
(
factory
.
mem_ctx
expr
-
>
operands
[
2
]
-
>
type
)
;
cmp_index
-
>
value
.
u
[
0
]
=
i
;
ir_variable
*
const
cmp_result
=
factory
.
make_temp
(
glsl_type
:
:
bool_type
"
index_condition
"
)
;
factory
.
emit
(
assign
(
cmp_result
equal
(
expr
-
>
operands
[
2
]
-
>
clone
(
factory
.
mem_ctx
NULL
)
cmp_index
)
)
)
;
factory
.
emit
(
if_tree
(
cmp_result
assign
(
temp
src_temp
WRITEMASK_X
<
<
i
)
)
)
;
}
this
-
>
progress
=
true
;
*
rv
=
new
(
factory
.
mem_ctx
)
ir_dereference_variable
(
temp
)
;
}
base_ir
-
>
insert_before
(
factory
.
instructions
)
;
}
bool
lower_vector_insert
(
exec_list
*
instructions
bool
lower_nonconstant_index
)
{
vector_insert_visitor
v
(
lower_nonconstant_index
)
;
visit_list_elements
(
&
v
instructions
)
;
return
v
.
progress
;
}
