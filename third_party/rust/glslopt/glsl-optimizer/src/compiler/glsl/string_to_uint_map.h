#
ifndef
STRING_TO_UINT_MAP_H
#
define
STRING_TO_UINT_MAP_H
#
include
<
string
.
h
>
#
include
<
limits
.
h
>
#
include
"
util
/
hash_table
.
h
"
struct
string_to_uint_map
;
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
struct
string_to_uint_map
*
string_to_uint_map_ctor
(
)
;
void
string_to_uint_map_dtor
(
struct
string_to_uint_map
*
)
;
#
ifdef
__cplusplus
}
struct
string_map_iterate_wrapper_closure
{
void
(
*
callback
)
(
const
char
*
key
unsigned
value
void
*
closure
)
;
void
*
closure
;
}
;
struct
string_to_uint_map
{
public
:
string_to_uint_map
(
)
{
this
-
>
ht
=
_mesa_hash_table_create
(
NULL
_mesa_hash_string
_mesa_key_string_equal
)
;
}
~
string_to_uint_map
(
)
{
hash_table_call_foreach
(
this
-
>
ht
delete_key
NULL
)
;
_mesa_hash_table_destroy
(
this
-
>
ht
NULL
)
;
}
void
clear
(
)
{
hash_table_call_foreach
(
this
-
>
ht
delete_key
NULL
)
;
_mesa_hash_table_clear
(
this
-
>
ht
NULL
)
;
}
void
iterate
(
void
(
*
func
)
(
const
char
*
unsigned
void
*
)
void
*
closure
)
{
struct
string_map_iterate_wrapper_closure
*
wrapper
;
wrapper
=
(
struct
string_map_iterate_wrapper_closure
*
)
malloc
(
sizeof
(
struct
string_map_iterate_wrapper_closure
)
)
;
if
(
wrapper
=
=
NULL
)
return
;
wrapper
-
>
callback
=
func
;
wrapper
-
>
closure
=
closure
;
hash_table_call_foreach
(
this
-
>
ht
subtract_one_wrapper
wrapper
)
;
free
(
wrapper
)
;
}
bool
get
(
unsigned
&
value
const
char
*
key
)
{
hash_entry
*
entry
=
_mesa_hash_table_search
(
this
-
>
ht
(
const
void
*
)
key
)
;
if
(
!
entry
)
return
false
;
const
intptr_t
v
=
(
intptr_t
)
entry
-
>
data
;
value
=
(
unsigned
)
(
v
-
1
)
;
return
true
;
}
void
put
(
unsigned
value
const
char
*
key
)
{
assert
(
value
!
=
UINT_MAX
)
;
char
*
dup_key
=
strdup
(
key
)
;
struct
hash_entry
*
entry
=
_mesa_hash_table_search
(
this
-
>
ht
dup_key
)
;
if
(
entry
)
{
entry
-
>
data
=
(
void
*
)
(
intptr_t
)
(
value
+
1
)
;
}
else
{
_mesa_hash_table_insert
(
this
-
>
ht
dup_key
(
void
*
)
(
intptr_t
)
(
value
+
1
)
)
;
}
if
(
entry
)
free
(
dup_key
)
;
}
private
:
static
void
delete_key
(
const
void
*
key
void
*
data
void
*
closure
)
{
(
void
)
data
;
(
void
)
closure
;
free
(
(
char
*
)
key
)
;
}
static
void
subtract_one_wrapper
(
const
void
*
key
void
*
data
void
*
closure
)
{
struct
string_map_iterate_wrapper_closure
*
wrapper
=
(
struct
string_map_iterate_wrapper_closure
*
)
closure
;
unsigned
value
=
(
intptr_t
)
data
;
value
-
=
1
;
wrapper
-
>
callback
(
(
const
char
*
)
key
value
wrapper
-
>
closure
)
;
}
struct
hash_table
*
ht
;
}
;
#
endif
#
endif
