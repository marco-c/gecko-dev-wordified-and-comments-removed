#
ifndef
SHADER_ENUMS_H
#
define
SHADER_ENUMS_H
#
include
<
stdbool
.
h
>
#
define
MAX_DRAW_BUFFERS
8
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
enum
{
MESA_SHADER_NONE
=
-
1
MESA_SHADER_VERTEX
=
0
MESA_SHADER_TESS_CTRL
=
1
MESA_SHADER_TESS_EVAL
=
2
MESA_SHADER_GEOMETRY
=
3
MESA_SHADER_FRAGMENT
=
4
MESA_SHADER_COMPUTE
=
5
MESA_SHADER_KERNEL
=
6
}
gl_shader_stage
;
static
inline
bool
gl_shader_stage_is_compute
(
gl_shader_stage
stage
)
{
return
stage
=
=
MESA_SHADER_COMPUTE
|
|
stage
=
=
MESA_SHADER_KERNEL
;
}
#
define
STATE_LENGTH
5
typedef
short
gl_state_index16
;
const
char
*
gl_shader_stage_name
(
gl_shader_stage
stage
)
;
const
char
*
_mesa_shader_stage_to_string
(
unsigned
stage
)
;
const
char
*
_mesa_shader_stage_to_abbrev
(
unsigned
stage
)
;
#
define
MESA_SHADER_STAGES
(
MESA_SHADER_COMPUTE
+
1
)
#
define
MESA_ALL_SHADER_STAGES
(
MESA_SHADER_KERNEL
+
1
)
typedef
enum
{
VERT_ATTRIB_POS
VERT_ATTRIB_NORMAL
VERT_ATTRIB_COLOR0
VERT_ATTRIB_COLOR1
VERT_ATTRIB_FOG
VERT_ATTRIB_COLOR_INDEX
VERT_ATTRIB_EDGEFLAG
VERT_ATTRIB_TEX0
VERT_ATTRIB_TEX1
VERT_ATTRIB_TEX2
VERT_ATTRIB_TEX3
VERT_ATTRIB_TEX4
VERT_ATTRIB_TEX5
VERT_ATTRIB_TEX6
VERT_ATTRIB_TEX7
VERT_ATTRIB_POINT_SIZE
VERT_ATTRIB_GENERIC0
VERT_ATTRIB_GENERIC1
VERT_ATTRIB_GENERIC2
VERT_ATTRIB_GENERIC3
VERT_ATTRIB_GENERIC4
VERT_ATTRIB_GENERIC5
VERT_ATTRIB_GENERIC6
VERT_ATTRIB_GENERIC7
VERT_ATTRIB_GENERIC8
VERT_ATTRIB_GENERIC9
VERT_ATTRIB_GENERIC10
VERT_ATTRIB_GENERIC11
VERT_ATTRIB_GENERIC12
VERT_ATTRIB_GENERIC13
VERT_ATTRIB_GENERIC14
VERT_ATTRIB_GENERIC15
VERT_ATTRIB_MAX
}
gl_vert_attrib
;
const
char
*
gl_vert_attrib_name
(
gl_vert_attrib
attrib
)
;
#
define
VERT_ATTRIB_FF
(
i
)
(
VERT_ATTRIB_POS
+
(
i
)
)
#
define
VERT_ATTRIB_FF_MAX
VERT_ATTRIB_GENERIC0
#
define
VERT_ATTRIB_TEX
(
i
)
(
VERT_ATTRIB_TEX0
+
(
i
)
)
#
define
VERT_ATTRIB_TEX_MAX
MAX_TEXTURE_COORD_UNITS
#
define
VERT_ATTRIB_GENERIC
(
i
)
(
VERT_ATTRIB_GENERIC0
+
(
i
)
)
#
define
VERT_ATTRIB_GENERIC_MAX
MAX_VERTEX_GENERIC_ATTRIBS
#
define
VERT_ATTRIB_MAT0
\
(
VERT_ATTRIB_GENERIC_MAX
-
VERT_ATTRIB_MAT_MAX
)
#
define
VERT_ATTRIB_MAT
(
i
)
\
VERT_ATTRIB_GENERIC
(
(
i
)
+
VERT_ATTRIB_MAT0
)
#
define
VERT_ATTRIB_MAT_MAX
MAT_ATTRIB_MAX
#
define
VERT_BIT_POS
BITFIELD_BIT
(
VERT_ATTRIB_POS
)
#
define
VERT_BIT_NORMAL
BITFIELD_BIT
(
VERT_ATTRIB_NORMAL
)
#
define
VERT_BIT_COLOR0
BITFIELD_BIT
(
VERT_ATTRIB_COLOR0
)
#
define
VERT_BIT_COLOR1
BITFIELD_BIT
(
VERT_ATTRIB_COLOR1
)
#
define
VERT_BIT_FOG
BITFIELD_BIT
(
VERT_ATTRIB_FOG
)
#
define
VERT_BIT_COLOR_INDEX
BITFIELD_BIT
(
VERT_ATTRIB_COLOR_INDEX
)
#
define
VERT_BIT_EDGEFLAG
BITFIELD_BIT
(
VERT_ATTRIB_EDGEFLAG
)
#
define
VERT_BIT_TEX0
BITFIELD_BIT
(
VERT_ATTRIB_TEX0
)
#
define
VERT_BIT_TEX1
BITFIELD_BIT
(
VERT_ATTRIB_TEX1
)
#
define
VERT_BIT_TEX2
BITFIELD_BIT
(
VERT_ATTRIB_TEX2
)
#
define
VERT_BIT_TEX3
BITFIELD_BIT
(
VERT_ATTRIB_TEX3
)
#
define
VERT_BIT_TEX4
BITFIELD_BIT
(
VERT_ATTRIB_TEX4
)
#
define
VERT_BIT_TEX5
BITFIELD_BIT
(
VERT_ATTRIB_TEX5
)
#
define
VERT_BIT_TEX6
BITFIELD_BIT
(
VERT_ATTRIB_TEX6
)
#
define
VERT_BIT_TEX7
BITFIELD_BIT
(
VERT_ATTRIB_TEX7
)
#
define
VERT_BIT_POINT_SIZE
BITFIELD_BIT
(
VERT_ATTRIB_POINT_SIZE
)
#
define
VERT_BIT_GENERIC0
BITFIELD_BIT
(
VERT_ATTRIB_GENERIC0
)
#
define
VERT_BIT
(
i
)
BITFIELD_BIT
(
i
)
#
define
VERT_BIT_ALL
BITFIELD_RANGE
(
0
VERT_ATTRIB_MAX
)
#
define
VERT_BIT_FF
(
i
)
VERT_BIT
(
i
)
#
define
VERT_BIT_FF_ALL
BITFIELD_RANGE
(
0
VERT_ATTRIB_FF_MAX
)
#
define
VERT_BIT_TEX
(
i
)
VERT_BIT
(
VERT_ATTRIB_TEX
(
i
)
)
#
define
VERT_BIT_TEX_ALL
\
BITFIELD_RANGE
(
VERT_ATTRIB_TEX
(
0
)
VERT_ATTRIB_TEX_MAX
)
#
define
VERT_BIT_GENERIC
(
i
)
VERT_BIT
(
VERT_ATTRIB_GENERIC
(
i
)
)
#
define
VERT_BIT_GENERIC_ALL
\
BITFIELD_RANGE
(
VERT_ATTRIB_GENERIC
(
0
)
VERT_ATTRIB_GENERIC_MAX
)
#
define
VERT_BIT_MAT
(
i
)
VERT_BIT
(
VERT_ATTRIB_MAT
(
i
)
)
#
define
VERT_BIT_MAT_ALL
\
BITFIELD_RANGE
(
VERT_ATTRIB_MAT
(
0
)
VERT_ATTRIB_MAT_MAX
)
#
define
MAX_VARYING
32
/
*
*
<
number
of
float
[
4
]
vectors
*
/
typedef
enum
{
VARYING_SLOT_POS
VARYING_SLOT_COL0
VARYING_SLOT_COL1
VARYING_SLOT_FOGC
VARYING_SLOT_TEX0
VARYING_SLOT_TEX1
VARYING_SLOT_TEX2
VARYING_SLOT_TEX3
VARYING_SLOT_TEX4
VARYING_SLOT_TEX5
VARYING_SLOT_TEX6
VARYING_SLOT_TEX7
VARYING_SLOT_PSIZ
VARYING_SLOT_BFC0
VARYING_SLOT_BFC1
VARYING_SLOT_EDGE
VARYING_SLOT_CLIP_VERTEX
VARYING_SLOT_CLIP_DIST0
VARYING_SLOT_CLIP_DIST1
VARYING_SLOT_CULL_DIST0
VARYING_SLOT_CULL_DIST1
VARYING_SLOT_PRIMITIVE_ID
VARYING_SLOT_LAYER
VARYING_SLOT_VIEWPORT
VARYING_SLOT_FACE
VARYING_SLOT_PNTC
VARYING_SLOT_TESS_LEVEL_OUTER
VARYING_SLOT_TESS_LEVEL_INNER
VARYING_SLOT_BOUNDING_BOX0
VARYING_SLOT_BOUNDING_BOX1
VARYING_SLOT_VIEW_INDEX
VARYING_SLOT_VAR0
VARYING_SLOT_VAR1
VARYING_SLOT_VAR2
VARYING_SLOT_VAR3
VARYING_SLOT_VAR4
VARYING_SLOT_VAR5
VARYING_SLOT_VAR6
VARYING_SLOT_VAR7
VARYING_SLOT_VAR8
VARYING_SLOT_VAR9
VARYING_SLOT_VAR10
VARYING_SLOT_VAR11
VARYING_SLOT_VAR12
VARYING_SLOT_VAR13
VARYING_SLOT_VAR14
VARYING_SLOT_VAR15
VARYING_SLOT_VAR16
VARYING_SLOT_VAR17
VARYING_SLOT_VAR18
VARYING_SLOT_VAR19
VARYING_SLOT_VAR20
VARYING_SLOT_VAR21
VARYING_SLOT_VAR22
VARYING_SLOT_VAR23
VARYING_SLOT_VAR24
VARYING_SLOT_VAR25
VARYING_SLOT_VAR26
VARYING_SLOT_VAR27
VARYING_SLOT_VAR28
VARYING_SLOT_VAR29
VARYING_SLOT_VAR30
VARYING_SLOT_VAR31
}
gl_varying_slot
;
#
define
VARYING_SLOT_MAX
(
VARYING_SLOT_VAR0
+
MAX_VARYING
)
#
define
VARYING_SLOT_PATCH0
(
VARYING_SLOT_MAX
)
#
define
VARYING_SLOT_TESS_MAX
(
VARYING_SLOT_PATCH0
+
MAX_VARYING
)
#
define
MAX_VARYINGS_INCL_PATCH
(
VARYING_SLOT_TESS_MAX
-
VARYING_SLOT_VAR0
)
const
char
*
gl_varying_slot_name
(
gl_varying_slot
slot
)
;
#
define
VARYING_BIT_POS
BITFIELD64_BIT
(
VARYING_SLOT_POS
)
#
define
VARYING_BIT_COL0
BITFIELD64_BIT
(
VARYING_SLOT_COL0
)
#
define
VARYING_BIT_COL1
BITFIELD64_BIT
(
VARYING_SLOT_COL1
)
#
define
VARYING_BIT_FOGC
BITFIELD64_BIT
(
VARYING_SLOT_FOGC
)
#
define
VARYING_BIT_TEX0
BITFIELD64_BIT
(
VARYING_SLOT_TEX0
)
#
define
VARYING_BIT_TEX1
BITFIELD64_BIT
(
VARYING_SLOT_TEX1
)
#
define
VARYING_BIT_TEX2
BITFIELD64_BIT
(
VARYING_SLOT_TEX2
)
#
define
VARYING_BIT_TEX3
BITFIELD64_BIT
(
VARYING_SLOT_TEX3
)
#
define
VARYING_BIT_TEX4
BITFIELD64_BIT
(
VARYING_SLOT_TEX4
)
#
define
VARYING_BIT_TEX5
BITFIELD64_BIT
(
VARYING_SLOT_TEX5
)
#
define
VARYING_BIT_TEX6
BITFIELD64_BIT
(
VARYING_SLOT_TEX6
)
#
define
VARYING_BIT_TEX7
BITFIELD64_BIT
(
VARYING_SLOT_TEX7
)
#
define
VARYING_BIT_TEX
(
U
)
BITFIELD64_BIT
(
VARYING_SLOT_TEX0
+
(
U
)
)
#
define
VARYING_BITS_TEX_ANY
BITFIELD64_RANGE
(
VARYING_SLOT_TEX0
\
MAX_TEXTURE_COORD_UNITS
)
#
define
VARYING_BIT_PSIZ
BITFIELD64_BIT
(
VARYING_SLOT_PSIZ
)
#
define
VARYING_BIT_BFC0
BITFIELD64_BIT
(
VARYING_SLOT_BFC0
)
#
define
VARYING_BIT_BFC1
BITFIELD64_BIT
(
VARYING_SLOT_BFC1
)
#
define
VARYING_BIT_EDGE
BITFIELD64_BIT
(
VARYING_SLOT_EDGE
)
#
define
VARYING_BIT_CLIP_VERTEX
BITFIELD64_BIT
(
VARYING_SLOT_CLIP_VERTEX
)
#
define
VARYING_BIT_CLIP_DIST0
BITFIELD64_BIT
(
VARYING_SLOT_CLIP_DIST0
)
#
define
VARYING_BIT_CLIP_DIST1
BITFIELD64_BIT
(
VARYING_SLOT_CLIP_DIST1
)
#
define
VARYING_BIT_CULL_DIST0
BITFIELD64_BIT
(
VARYING_SLOT_CULL_DIST0
)
#
define
VARYING_BIT_CULL_DIST1
BITFIELD64_BIT
(
VARYING_SLOT_CULL_DIST1
)
#
define
VARYING_BIT_PRIMITIVE_ID
BITFIELD64_BIT
(
VARYING_SLOT_PRIMITIVE_ID
)
#
define
VARYING_BIT_LAYER
BITFIELD64_BIT
(
VARYING_SLOT_LAYER
)
#
define
VARYING_BIT_VIEWPORT
BITFIELD64_BIT
(
VARYING_SLOT_VIEWPORT
)
#
define
VARYING_BIT_FACE
BITFIELD64_BIT
(
VARYING_SLOT_FACE
)
#
define
VARYING_BIT_PNTC
BITFIELD64_BIT
(
VARYING_SLOT_PNTC
)
#
define
VARYING_BIT_TESS_LEVEL_OUTER
BITFIELD64_BIT
(
VARYING_SLOT_TESS_LEVEL_OUTER
)
#
define
VARYING_BIT_TESS_LEVEL_INNER
BITFIELD64_BIT
(
VARYING_SLOT_TESS_LEVEL_INNER
)
#
define
VARYING_BIT_BOUNDING_BOX0
BITFIELD64_BIT
(
VARYING_SLOT_BOUNDING_BOX0
)
#
define
VARYING_BIT_BOUNDING_BOX1
BITFIELD64_BIT
(
VARYING_SLOT_BOUNDING_BOX1
)
#
define
VARYING_BIT_VAR
(
V
)
BITFIELD64_BIT
(
VARYING_SLOT_VAR0
+
(
V
)
)
#
define
SYSTEM_BIT_SAMPLE_ID
(
(
uint64_t
)
1
<
<
SYSTEM_VALUE_SAMPLE_ID
)
#
define
SYSTEM_BIT_SAMPLE_POS
(
(
uint64_t
)
1
<
<
SYSTEM_VALUE_SAMPLE_POS
)
#
define
SYSTEM_BIT_SAMPLE_MASK_IN
(
(
uint64_t
)
1
<
<
SYSTEM_VALUE_SAMPLE_MASK_IN
)
#
define
SYSTEM_BIT_LOCAL_INVOCATION_ID
(
(
uint64_t
)
1
<
<
SYSTEM_VALUE_LOCAL_INVOCATION_ID
)
typedef
enum
{
SYSTEM_VALUE_SUBGROUP_SIZE
SYSTEM_VALUE_SUBGROUP_INVOCATION
SYSTEM_VALUE_SUBGROUP_EQ_MASK
SYSTEM_VALUE_SUBGROUP_GE_MASK
SYSTEM_VALUE_SUBGROUP_GT_MASK
SYSTEM_VALUE_SUBGROUP_LE_MASK
SYSTEM_VALUE_SUBGROUP_LT_MASK
SYSTEM_VALUE_NUM_SUBGROUPS
SYSTEM_VALUE_SUBGROUP_ID
SYSTEM_VALUE_VERTEX_ID
SYSTEM_VALUE_INSTANCE_ID
SYSTEM_VALUE_INSTANCE_INDEX
SYSTEM_VALUE_VERTEX_ID_ZERO_BASE
SYSTEM_VALUE_BASE_VERTEX
SYSTEM_VALUE_FIRST_VERTEX
SYSTEM_VALUE_IS_INDEXED_DRAW
SYSTEM_VALUE_BASE_INSTANCE
SYSTEM_VALUE_DRAW_ID
SYSTEM_VALUE_INVOCATION_ID
SYSTEM_VALUE_FRAG_COORD
SYSTEM_VALUE_POINT_COORD
SYSTEM_VALUE_FRONT_FACE
SYSTEM_VALUE_SAMPLE_ID
SYSTEM_VALUE_SAMPLE_POS
SYSTEM_VALUE_SAMPLE_MASK_IN
SYSTEM_VALUE_HELPER_INVOCATION
SYSTEM_VALUE_COLOR0
SYSTEM_VALUE_COLOR1
SYSTEM_VALUE_TESS_COORD
SYSTEM_VALUE_VERTICES_IN
SYSTEM_VALUE_PRIMITIVE_ID
SYSTEM_VALUE_TESS_LEVEL_OUTER
SYSTEM_VALUE_TESS_LEVEL_INNER
SYSTEM_VALUE_TESS_LEVEL_OUTER_DEFAULT
SYSTEM_VALUE_TESS_LEVEL_INNER_DEFAULT
SYSTEM_VALUE_LOCAL_INVOCATION_ID
SYSTEM_VALUE_LOCAL_INVOCATION_INDEX
SYSTEM_VALUE_GLOBAL_INVOCATION_ID
SYSTEM_VALUE_GLOBAL_INVOCATION_INDEX
SYSTEM_VALUE_WORK_GROUP_ID
SYSTEM_VALUE_NUM_WORK_GROUPS
SYSTEM_VALUE_LOCAL_GROUP_SIZE
SYSTEM_VALUE_GLOBAL_GROUP_SIZE
SYSTEM_VALUE_WORK_DIM
SYSTEM_VALUE_USER_DATA_AMD
SYSTEM_VALUE_DEVICE_INDEX
SYSTEM_VALUE_VIEW_INDEX
SYSTEM_VALUE_VERTEX_CNT
SYSTEM_VALUE_BARYCENTRIC_PERSP_PIXEL
SYSTEM_VALUE_BARYCENTRIC_PERSP_SAMPLE
SYSTEM_VALUE_BARYCENTRIC_PERSP_CENTROID
SYSTEM_VALUE_BARYCENTRIC_PERSP_SIZE
SYSTEM_VALUE_BARYCENTRIC_LINEAR_PIXEL
SYSTEM_VALUE_BARYCENTRIC_LINEAR_CENTROID
SYSTEM_VALUE_BARYCENTRIC_LINEAR_SAMPLE
SYSTEM_VALUE_BARYCENTRIC_PULL_MODEL
SYSTEM_VALUE_GS_HEADER_IR3
SYSTEM_VALUE_TCS_HEADER_IR3
SYSTEM_VALUE_MAX
}
gl_system_value
;
const
char
*
gl_system_value_name
(
gl_system_value
sysval
)
;
enum
glsl_interp_mode
{
INTERP_MODE_NONE
=
0
INTERP_MODE_SMOOTH
INTERP_MODE_FLAT
INTERP_MODE_NOPERSPECTIVE
INTERP_MODE_EXPLICIT
INTERP_MODE_COUNT
}
;
enum
glsl_interface_packing
{
GLSL_INTERFACE_PACKING_STD140
GLSL_INTERFACE_PACKING_SHARED
GLSL_INTERFACE_PACKING_PACKED
GLSL_INTERFACE_PACKING_STD430
}
;
const
char
*
glsl_interp_mode_name
(
enum
glsl_interp_mode
qual
)
;
typedef
enum
{
FRAG_RESULT_DEPTH
=
0
FRAG_RESULT_STENCIL
=
1
FRAG_RESULT_COLOR
=
2
FRAG_RESULT_SAMPLE_MASK
=
3
FRAG_RESULT_DATA0
=
4
FRAG_RESULT_DATA1
FRAG_RESULT_DATA2
FRAG_RESULT_DATA3
FRAG_RESULT_DATA4
FRAG_RESULT_DATA5
FRAG_RESULT_DATA6
FRAG_RESULT_DATA7
}
gl_frag_result
;
const
char
*
gl_frag_result_name
(
gl_frag_result
result
)
;
#
define
FRAG_RESULT_MAX
(
FRAG_RESULT_DATA0
+
MAX_DRAW_BUFFERS
)
enum
gl_frag_depth_layout
{
FRAG_DEPTH_LAYOUT_NONE
FRAG_DEPTH_LAYOUT_ANY
FRAG_DEPTH_LAYOUT_GREATER
FRAG_DEPTH_LAYOUT_LESS
FRAG_DEPTH_LAYOUT_UNCHANGED
}
;
enum
gl_access_qualifier
{
ACCESS_COHERENT
=
(
1
<
<
0
)
ACCESS_RESTRICT
=
(
1
<
<
1
)
ACCESS_VOLATILE
=
(
1
<
<
2
)
ACCESS_NON_READABLE
=
(
1
<
<
3
)
ACCESS_NON_WRITEABLE
=
(
1
<
<
4
)
ACCESS_NON_UNIFORM
=
(
1
<
<
5
)
ACCESS_CAN_REORDER
=
(
1
<
<
6
)
ACCESS_STREAM_CACHE_POLICY
=
(
1
<
<
7
)
}
;
enum
gl_advanced_blend_mode
{
BLEND_NONE
=
0x0000
BLEND_MULTIPLY
=
0x0001
BLEND_SCREEN
=
0x0002
BLEND_OVERLAY
=
0x0004
BLEND_DARKEN
=
0x0008
BLEND_LIGHTEN
=
0x0010
BLEND_COLORDODGE
=
0x0020
BLEND_COLORBURN
=
0x0040
BLEND_HARDLIGHT
=
0x0080
BLEND_SOFTLIGHT
=
0x0100
BLEND_DIFFERENCE
=
0x0200
BLEND_EXCLUSION
=
0x0400
BLEND_HSL_HUE
=
0x0800
BLEND_HSL_SATURATION
=
0x1000
BLEND_HSL_COLOR
=
0x2000
BLEND_HSL_LUMINOSITY
=
0x4000
BLEND_ALL
=
0x7fff
}
;
enum
blend_func
{
BLEND_FUNC_ADD
BLEND_FUNC_SUBTRACT
BLEND_FUNC_REVERSE_SUBTRACT
BLEND_FUNC_MIN
BLEND_FUNC_MAX
}
;
enum
blend_factor
{
BLEND_FACTOR_ZERO
BLEND_FACTOR_SRC_COLOR
BLEND_FACTOR_DST_COLOR
BLEND_FACTOR_SRC_ALPHA
BLEND_FACTOR_DST_ALPHA
BLEND_FACTOR_CONSTANT_COLOR
BLEND_FACTOR_CONSTANT_ALPHA
BLEND_FACTOR_SRC_ALPHA_SATURATE
}
;
enum
gl_tess_spacing
{
TESS_SPACING_UNSPECIFIED
TESS_SPACING_EQUAL
TESS_SPACING_FRACTIONAL_ODD
TESS_SPACING_FRACTIONAL_EVEN
}
;
enum
compare_func
{
COMPARE_FUNC_NEVER
COMPARE_FUNC_LESS
COMPARE_FUNC_EQUAL
COMPARE_FUNC_LEQUAL
COMPARE_FUNC_GREATER
COMPARE_FUNC_NOTEQUAL
COMPARE_FUNC_GEQUAL
COMPARE_FUNC_ALWAYS
}
;
enum
gl_derivative_group
{
DERIVATIVE_GROUP_NONE
=
0
DERIVATIVE_GROUP_QUADS
DERIVATIVE_GROUP_LINEAR
}
;
enum
float_controls
{
FLOAT_CONTROLS_DEFAULT_FLOAT_CONTROL_MODE
=
0x0000
FLOAT_CONTROLS_DENORM_PRESERVE_FP16
=
0x0001
FLOAT_CONTROLS_DENORM_PRESERVE_FP32
=
0x0002
FLOAT_CONTROLS_DENORM_PRESERVE_FP64
=
0x0004
FLOAT_CONTROLS_DENORM_FLUSH_TO_ZERO_FP16
=
0x0008
FLOAT_CONTROLS_DENORM_FLUSH_TO_ZERO_FP32
=
0x0010
FLOAT_CONTROLS_DENORM_FLUSH_TO_ZERO_FP64
=
0x0020
FLOAT_CONTROLS_SIGNED_ZERO_INF_NAN_PRESERVE_FP16
=
0x0040
FLOAT_CONTROLS_SIGNED_ZERO_INF_NAN_PRESERVE_FP32
=
0x0080
FLOAT_CONTROLS_SIGNED_ZERO_INF_NAN_PRESERVE_FP64
=
0x0100
FLOAT_CONTROLS_ROUNDING_MODE_RTE_FP16
=
0x0200
FLOAT_CONTROLS_ROUNDING_MODE_RTE_FP32
=
0x0400
FLOAT_CONTROLS_ROUNDING_MODE_RTE_FP64
=
0x0800
FLOAT_CONTROLS_ROUNDING_MODE_RTZ_FP16
=
0x1000
FLOAT_CONTROLS_ROUNDING_MODE_RTZ_FP32
=
0x2000
FLOAT_CONTROLS_ROUNDING_MODE_RTZ_FP64
=
0x4000
}
;
#
ifdef
__cplusplus
}
#
endif
#
endif
