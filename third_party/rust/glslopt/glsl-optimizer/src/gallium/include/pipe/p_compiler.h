#
ifndef
P_COMPILER_H
#
define
P_COMPILER_H
#
include
"
c99_compat
.
h
"
#
include
"
p_config
.
h
"
#
include
"
util
/
macros
.
h
"
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdarg
.
h
>
#
include
<
limits
.
h
>
#
if
defined
(
_WIN32
)
&
&
!
defined
(
__WIN32__
)
#
define
__WIN32__
#
endif
#
if
defined
(
_MSC_VER
)
#
include
<
intrin
.
h
>
#
pragma
warning
(
disable
:
4296
)
#
endif
#
include
<
stdint
.
h
>
#
include
<
stdbool
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
if
!
defined
(
__HAIKU__
)
&
&
!
defined
(
__USE_MISC
)
#
if
!
defined
(
PIPE_OS_ANDROID
)
typedef
unsigned
int
uint
;
#
endif
typedef
unsigned
short
ushort
;
#
endif
typedef
unsigned
char
ubyte
;
typedef
unsigned
char
boolean
;
#
ifndef
TRUE
#
define
TRUE
true
#
endif
#
ifndef
FALSE
#
define
FALSE
false
#
endif
#
ifndef
va_copy
#
ifdef
__va_copy
#
define
va_copy
(
dest
src
)
__va_copy
(
(
dest
)
(
src
)
)
#
else
#
define
va_copy
(
dest
src
)
(
dest
)
=
(
src
)
#
endif
#
endif
#
ifndef
__FUNCTION__
#
define
__FUNCTION__
__func__
#
endif
#
ifdef
_MSC_VER
#
define
PIPE_CDECL
__cdecl
#
else
#
define
PIPE_CDECL
#
endif
#
if
defined
(
__GNUC__
)
#
define
PIPE_DEPRECATED
__attribute__
(
(
__deprecated__
)
)
#
else
#
define
PIPE_DEPRECATED
#
endif
#
if
defined
(
__GNUC__
)
#
define
PIPE_ALIGN_TYPE
(
_alignment
_type
)
_type
__attribute__
(
(
aligned
(
_alignment
)
)
)
#
define
PIPE_ALIGN_VAR
(
_alignment
)
__attribute__
(
(
aligned
(
_alignment
)
)
)
#
if
defined
(
__GNUC__
)
&
&
defined
(
PIPE_ARCH_X86
)
#
define
PIPE_ALIGN_STACK
__attribute__
(
(
force_align_arg_pointer
)
)
#
else
#
define
PIPE_ALIGN_STACK
#
endif
#
elif
defined
(
_MSC_VER
)
#
define
PIPE_ALIGN_TYPE
(
_alignment
_type
)
__declspec
(
align
(
_alignment
)
)
_type
#
define
PIPE_ALIGN_VAR
(
_alignment
)
__declspec
(
align
(
_alignment
)
)
#
define
PIPE_ALIGN_STACK
#
elif
defined
(
SWIG
)
#
define
PIPE_ALIGN_TYPE
(
_alignment
_type
)
_type
#
define
PIPE_ALIGN_VAR
(
_alignment
)
#
define
PIPE_ALIGN_STACK
#
else
#
error
"
Unsupported
compiler
"
#
endif
#
if
defined
(
__GNUC__
)
#
define
PIPE_READ_WRITE_BARRIER
(
)
__asm__
(
"
"
:
:
:
"
memory
"
)
#
elif
defined
(
_MSC_VER
)
#
define
PIPE_READ_WRITE_BARRIER
(
)
_ReadWriteBarrier
(
)
#
else
#
warning
"
Unsupported
compiler
"
#
define
PIPE_READ_WRITE_BARRIER
(
)
#
endif
#
if
defined
(
__cplusplus
)
}
#
endif
#
endif
