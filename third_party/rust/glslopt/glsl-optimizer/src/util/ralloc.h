#
ifndef
RALLOC_H
#
define
RALLOC_H
#
include
<
stddef
.
h
>
#
include
<
stdarg
.
h
>
#
include
<
stdbool
.
h
>
#
include
"
macros
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
ralloc
(
ctx
type
)
(
(
type
*
)
ralloc_size
(
ctx
sizeof
(
type
)
)
)
#
define
rzalloc
(
ctx
type
)
(
(
type
*
)
rzalloc_size
(
ctx
sizeof
(
type
)
)
)
void
*
ralloc_context
(
const
void
*
ctx
)
;
void
*
ralloc_size
(
const
void
*
ctx
size_t
size
)
MALLOCLIKE
;
void
*
rzalloc_size
(
const
void
*
ctx
size_t
size
)
MALLOCLIKE
;
void
*
reralloc_size
(
const
void
*
ctx
void
*
ptr
size_t
size
)
;
void
*
rerzalloc_size
(
const
void
*
ctx
void
*
ptr
size_t
old_size
size_t
new_size
)
;
#
define
ralloc_array
(
ctx
type
count
)
\
(
(
type
*
)
ralloc_array_size
(
ctx
sizeof
(
type
)
count
)
)
#
define
rzalloc_array
(
ctx
type
count
)
\
(
(
type
*
)
rzalloc_array_size
(
ctx
sizeof
(
type
)
count
)
)
#
define
reralloc
(
ctx
ptr
type
count
)
\
(
(
type
*
)
reralloc_array_size
(
ctx
ptr
sizeof
(
type
)
count
)
)
#
define
rerzalloc
(
ctx
ptr
type
old_count
new_count
)
\
(
(
type
*
)
rerzalloc_array_size
(
ctx
ptr
sizeof
(
type
)
old_count
new_count
)
)
void
*
ralloc_array_size
(
const
void
*
ctx
size_t
size
unsigned
count
)
MALLOCLIKE
;
void
*
rzalloc_array_size
(
const
void
*
ctx
size_t
size
unsigned
count
)
MALLOCLIKE
;
void
*
reralloc_array_size
(
const
void
*
ctx
void
*
ptr
size_t
size
unsigned
count
)
;
void
*
rerzalloc_array_size
(
const
void
*
ctx
void
*
ptr
size_t
size
unsigned
old_count
unsigned
new_count
)
;
void
ralloc_free
(
void
*
ptr
)
;
void
ralloc_steal
(
const
void
*
new_ctx
void
*
ptr
)
;
void
ralloc_adopt
(
const
void
*
new_ctx
void
*
old_ctx
)
;
void
*
ralloc_parent
(
const
void
*
ptr
)
;
void
ralloc_set_destructor
(
const
void
*
ptr
void
(
*
destructor
)
(
void
*
)
)
;
char
*
ralloc_strdup
(
const
void
*
ctx
const
char
*
str
)
MALLOCLIKE
;
char
*
ralloc_strndup
(
const
void
*
ctx
const
char
*
str
size_t
n
)
MALLOCLIKE
;
bool
ralloc_strcat
(
char
*
*
dest
const
char
*
str
)
;
bool
ralloc_strncat
(
char
*
*
dest
const
char
*
str
size_t
n
)
;
bool
ralloc_str_append
(
char
*
*
dest
const
char
*
str
size_t
existing_length
size_t
str_size
)
;
char
*
ralloc_asprintf
(
const
void
*
ctx
const
char
*
fmt
.
.
.
)
PRINTFLIKE
(
2
3
)
MALLOCLIKE
;
size_t
printf_length
(
const
char
*
fmt
va_list
untouched_args
)
;
char
*
ralloc_vasprintf
(
const
void
*
ctx
const
char
*
fmt
va_list
args
)
MALLOCLIKE
;
bool
ralloc_asprintf_rewrite_tail
(
char
*
*
str
size_t
*
start
const
char
*
fmt
.
.
.
)
PRINTFLIKE
(
3
4
)
;
bool
ralloc_vasprintf_rewrite_tail
(
char
*
*
str
size_t
*
start
const
char
*
fmt
va_list
args
)
;
bool
ralloc_asprintf_append
(
char
*
*
str
const
char
*
fmt
.
.
.
)
PRINTFLIKE
(
2
3
)
;
bool
ralloc_vasprintf_append
(
char
*
*
str
const
char
*
fmt
va_list
args
)
;
#
define
DECLARE_ALLOC_CXX_OPERATORS_TEMPLATE
(
TYPE
ALLOC_FUNC
)
\
private
:
\
static
void
_ralloc_destructor
(
void
*
p
)
\
{
\
reinterpret_cast
<
TYPE
*
>
(
p
)
-
>
TYPE
:
:
~
TYPE
(
)
;
\
}
\
public
:
\
static
void
*
operator
new
(
size_t
size
void
*
mem_ctx
)
\
{
\
void
*
p
=
ALLOC_FUNC
(
mem_ctx
size
)
;
\
assert
(
p
!
=
NULL
)
;
\
if
(
!
HAS_TRIVIAL_DESTRUCTOR
(
TYPE
)
)
\
ralloc_set_destructor
(
p
_ralloc_destructor
)
;
\
return
p
;
\
}
\
\
static
void
operator
delete
(
void
*
p
)
\
{
\
/
*
The
object
'
s
destructor
is
guaranteed
to
have
already
been
\
*
called
by
the
delete
operator
at
this
point
-
-
Make
sure
it
'
s
\
*
not
called
again
.
\
*
/
\
if
(
!
HAS_TRIVIAL_DESTRUCTOR
(
TYPE
)
)
\
ralloc_set_destructor
(
p
NULL
)
;
\
ralloc_free
(
p
)
;
\
}
#
define
DECLARE_RALLOC_CXX_OPERATORS
(
type
)
\
DECLARE_ALLOC_CXX_OPERATORS_TEMPLATE
(
type
ralloc_size
)
#
define
DECLARE_RZALLOC_CXX_OPERATORS
(
type
)
\
DECLARE_ALLOC_CXX_OPERATORS_TEMPLATE
(
type
rzalloc_size
)
#
define
DECLARE_LINEAR_ALLOC_CXX_OPERATORS
(
type
)
\
DECLARE_ALLOC_CXX_OPERATORS_TEMPLATE
(
type
linear_alloc_child
)
#
define
DECLARE_LINEAR_ZALLOC_CXX_OPERATORS
(
type
)
\
DECLARE_ALLOC_CXX_OPERATORS_TEMPLATE
(
type
linear_zalloc_child
)
void
*
linear_alloc_child
(
void
*
parent
unsigned
size
)
;
void
*
linear_alloc_parent
(
void
*
ralloc_ctx
unsigned
size
)
;
void
*
linear_zalloc_child
(
void
*
parent
unsigned
size
)
;
void
*
linear_zalloc_parent
(
void
*
ralloc_ctx
unsigned
size
)
;
void
linear_free_parent
(
void
*
ptr
)
;
void
ralloc_steal_linear_parent
(
void
*
new_ralloc_ctx
void
*
ptr
)
;
void
*
ralloc_parent_of_linear_parent
(
void
*
ptr
)
;
void
*
linear_realloc
(
void
*
parent
void
*
old
unsigned
new_size
)
;
char
*
linear_strdup
(
void
*
parent
const
char
*
str
)
;
char
*
linear_asprintf
(
void
*
parent
const
char
*
fmt
.
.
.
)
;
char
*
linear_vasprintf
(
void
*
parent
const
char
*
fmt
va_list
args
)
;
bool
linear_asprintf_append
(
void
*
parent
char
*
*
str
const
char
*
fmt
.
.
.
)
;
bool
linear_vasprintf_append
(
void
*
parent
char
*
*
str
const
char
*
fmt
va_list
args
)
;
bool
linear_asprintf_rewrite_tail
(
void
*
parent
char
*
*
str
size_t
*
start
const
char
*
fmt
.
.
.
)
;
bool
linear_vasprintf_rewrite_tail
(
void
*
parent
char
*
*
str
size_t
*
start
const
char
*
fmt
va_list
args
)
;
bool
linear_strcat
(
void
*
parent
char
*
*
dest
const
char
*
str
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
