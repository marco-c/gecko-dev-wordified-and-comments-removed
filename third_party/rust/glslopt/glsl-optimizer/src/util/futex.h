#
ifndef
UTIL_FUTEX_H
#
define
UTIL_FUTEX_H
#
if
defined
(
HAVE_LINUX_FUTEX_H
)
#
include
<
limits
.
h
>
#
include
<
stdint
.
h
>
#
include
<
unistd
.
h
>
#
include
<
linux
/
futex
.
h
>
#
include
<
sys
/
syscall
.
h
>
#
include
<
sys
/
time
.
h
>
static
inline
long
sys_futex
(
void
*
addr1
int
op
int
val1
const
struct
timespec
*
timeout
void
*
addr2
int
val3
)
{
return
syscall
(
SYS_futex
addr1
op
val1
timeout
addr2
val3
)
;
}
static
inline
int
futex_wake
(
uint32_t
*
addr
int
count
)
{
return
sys_futex
(
addr
FUTEX_WAKE
count
NULL
NULL
0
)
;
}
static
inline
int
futex_wait
(
uint32_t
*
addr
int32_t
value
const
struct
timespec
*
timeout
)
{
return
sys_futex
(
addr
FUTEX_WAIT_BITSET
value
timeout
NULL
FUTEX_BITSET_MATCH_ANY
)
;
}
#
elif
defined
(
__FreeBSD__
)
#
include
<
assert
.
h
>
#
include
<
errno
.
h
>
#
include
<
fcntl
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
sys
/
umtx
.
h
>
#
include
<
sys
/
time
.
h
>
static
inline
int
futex_wake
(
uint32_t
*
addr
int
count
)
{
assert
(
count
=
=
(
int
)
(
uint32_t
)
count
)
;
return
_umtx_op
(
addr
UMTX_OP_WAKE
(
uint32_t
)
count
NULL
NULL
)
=
=
-
1
?
errno
:
0
;
}
static
inline
int
futex_wait
(
uint32_t
*
addr
int32_t
value
struct
timespec
*
timeout
)
{
void
*
uaddr
=
NULL
*
uaddr2
=
NULL
;
struct
_umtx_time
tmo
=
{
.
_flags
=
UMTX_ABSTIME
.
_clockid
=
CLOCK_MONOTONIC
}
;
assert
(
value
=
=
(
int
)
(
uint32_t
)
value
)
;
if
(
timeout
!
=
NULL
)
{
tmo
.
_timeout
=
*
timeout
;
uaddr
=
(
void
*
)
(
uintptr_t
)
sizeof
(
tmo
)
;
uaddr2
=
(
void
*
)
&
tmo
;
}
return
_umtx_op
(
addr
UMTX_OP_WAIT_UINT
(
uint32_t
)
value
uaddr
uaddr2
)
=
=
-
1
?
errno
:
0
;
}
#
elif
defined
(
__OpenBSD__
)
#
include
<
sys
/
time
.
h
>
#
include
<
sys
/
futex
.
h
>
static
inline
int
futex_wake
(
uint32_t
*
addr
int
count
)
{
return
futex
(
addr
FUTEX_WAKE
count
NULL
NULL
)
;
}
static
inline
int
futex_wait
(
uint32_t
*
addr
int32_t
value
const
struct
timespec
*
timeout
)
{
struct
timespec
tsrel
tsnow
;
clock_gettime
(
CLOCK_MONOTONIC
&
tsnow
)
;
timespecsub
(
timeout
&
tsrel
&
tsrel
)
;
return
futex
(
addr
FUTEX_WAIT
value
&
tsrel
NULL
)
;
}
#
endif
#
endif
