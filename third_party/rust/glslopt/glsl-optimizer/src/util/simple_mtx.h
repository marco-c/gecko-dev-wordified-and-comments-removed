#
ifndef
_SIMPLE_MTX_H
#
define
_SIMPLE_MTX_H
#
include
"
util
/
futex
.
h
"
#
include
"
util
/
macros
.
h
"
#
include
"
c11
/
threads
.
h
"
#
if
UTIL_FUTEX_SUPPORTED
typedef
struct
{
uint32_t
val
;
}
simple_mtx_t
;
#
define
_SIMPLE_MTX_INITIALIZER_NP
{
0
}
#
define
_SIMPLE_MTX_INVALID_VALUE
0xd0d0d0d0
static
inline
void
simple_mtx_init
(
simple_mtx_t
*
mtx
ASSERTED
int
type
)
{
assert
(
type
=
=
mtx_plain
)
;
mtx
-
>
val
=
0
;
}
static
inline
void
simple_mtx_destroy
(
ASSERTED
simple_mtx_t
*
mtx
)
{
#
ifndef
NDEBUG
mtx
-
>
val
=
_SIMPLE_MTX_INVALID_VALUE
;
#
endif
}
static
inline
void
simple_mtx_lock
(
simple_mtx_t
*
mtx
)
{
uint32_t
c
;
c
=
__sync_val_compare_and_swap
(
&
mtx
-
>
val
0
1
)
;
assert
(
c
!
=
_SIMPLE_MTX_INVALID_VALUE
)
;
if
(
__builtin_expect
(
c
!
=
0
0
)
)
{
if
(
c
!
=
2
)
c
=
__sync_lock_test_and_set
(
&
mtx
-
>
val
2
)
;
while
(
c
!
=
0
)
{
futex_wait
(
&
mtx
-
>
val
2
NULL
)
;
c
=
__sync_lock_test_and_set
(
&
mtx
-
>
val
2
)
;
}
}
}
static
inline
void
simple_mtx_unlock
(
simple_mtx_t
*
mtx
)
{
uint32_t
c
;
c
=
__sync_fetch_and_sub
(
&
mtx
-
>
val
1
)
;
assert
(
c
!
=
_SIMPLE_MTX_INVALID_VALUE
)
;
if
(
__builtin_expect
(
c
!
=
1
0
)
)
{
mtx
-
>
val
=
0
;
futex_wake
(
&
mtx
-
>
val
1
)
;
}
}
#
else
typedef
mtx_t
simple_mtx_t
;
#
define
_SIMPLE_MTX_INITIALIZER_NP
_MTX_INITIALIZER_NP
static
inline
void
simple_mtx_init
(
simple_mtx_t
*
mtx
int
type
)
{
mtx_init
(
mtx
type
)
;
}
static
inline
void
simple_mtx_destroy
(
simple_mtx_t
*
mtx
)
{
mtx_destroy
(
mtx
)
;
}
static
inline
void
simple_mtx_lock
(
simple_mtx_t
*
mtx
)
{
mtx_lock
(
mtx
)
;
}
static
inline
void
simple_mtx_unlock
(
simple_mtx_t
*
mtx
)
{
mtx_unlock
(
mtx
)
;
}
#
endif
#
endif
