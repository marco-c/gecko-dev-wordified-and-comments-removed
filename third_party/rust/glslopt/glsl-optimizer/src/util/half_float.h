#
ifndef
_HALF_FLOAT_H_
#
define
_HALF_FLOAT_H_
#
include
<
stdbool
.
h
>
#
include
<
stdint
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
FP16_ONE
(
(
uint16_t
)
0x3c00
)
#
define
FP16_ZERO
(
(
uint16_t
)
0
)
uint16_t
_mesa_float_to_half
(
float
val
)
;
float
_mesa_half_to_float
(
uint16_t
val
)
;
uint8_t
_mesa_half_to_unorm8
(
uint16_t
v
)
;
uint16_t
_mesa_uint16_div_64k_to_half
(
uint16_t
v
)
;
uint16_t
_mesa_float_to_float16_rtz
(
float
val
)
;
static
inline
uint16_t
_mesa_float_to_float16_rtne
(
float
val
)
{
return
_mesa_float_to_half
(
val
)
;
}
static
inline
bool
_mesa_half_is_negative
(
uint16_t
h
)
{
return
!
!
(
h
&
0x8000
)
;
}
#
ifdef
__cplusplus
struct
float16_t
{
uint16_t
bits
;
float16_t
(
float
f
)
:
bits
(
_mesa_float_to_half
(
f
)
)
{
}
float16_t
(
double
d
)
:
bits
(
_mesa_float_to_half
(
d
)
)
{
}
float16_t
(
uint16_t
bits
)
:
bits
(
bits
)
{
}
static
float16_t
one
(
)
{
return
float16_t
(
FP16_ONE
)
;
}
static
float16_t
zero
(
)
{
return
float16_t
(
FP16_ZERO
)
;
}
}
;
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
