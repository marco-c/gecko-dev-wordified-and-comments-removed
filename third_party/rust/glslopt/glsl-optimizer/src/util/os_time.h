#
ifndef
_OS_TIME_H_
#
define
_OS_TIME_H_
#
include
<
stdbool
.
h
>
#
include
<
stdint
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
OS_TIMEOUT_INFINITE
0xffffffffffffffffull
int64_t
os_time_get_nano
(
void
)
;
static
inline
int64_t
os_time_get
(
void
)
{
return
os_time_get_nano
(
)
/
1000
;
}
void
os_time_sleep
(
int64_t
usecs
)
;
static
inline
bool
os_time_timeout
(
int64_t
start
int64_t
end
int64_t
curr
)
{
if
(
start
<
=
end
)
return
!
(
start
<
=
curr
&
&
curr
<
end
)
;
else
return
!
(
(
start
<
=
curr
)
|
|
(
curr
<
end
)
)
;
}
int64_t
os_time_get_absolute_timeout
(
uint64_t
timeout
)
;
bool
os_wait_until_zero
(
volatile
int
*
var
uint64_t
timeout
)
;
bool
os_wait_until_zero_abs_timeout
(
volatile
int
*
var
int64_t
timeout
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
