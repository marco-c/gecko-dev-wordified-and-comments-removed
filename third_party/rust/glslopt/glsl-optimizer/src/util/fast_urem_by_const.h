#
include
<
stdint
.
h
>
#
define
REMAINDER_MAGIC
(
divisor
)
\
(
(
uint64_t
)
~
0ull
/
(
divisor
)
+
1
)
static
inline
uint32_t
_mul32by64_hi
(
uint32_t
a
uint64_t
b
)
{
#
ifdef
HAVE_UINT128
return
(
(
__uint128_t
)
b
*
a
)
>
>
64
;
#
else
uint32_t
b0
=
(
uint32_t
)
b
;
uint32_t
b1
=
b
>
>
32
;
return
(
(
(
(
uint64_t
)
a
*
b0
)
>
>
32
)
+
(
uint64_t
)
a
*
b1
)
>
>
32
;
#
endif
}
static
inline
uint32_t
util_fast_urem32
(
uint32_t
n
uint32_t
d
uint64_t
magic
)
{
uint64_t
lowbits
=
magic
*
n
;
uint32_t
result
=
_mul32by64_hi
(
d
lowbits
)
;
assert
(
result
=
=
n
%
d
)
;
return
result
;
}
