use
mls_rs_core
:
:
{
crypto
:
:
{
HpkePublicKey
HpkeSecretKey
}
error
:
:
IntoAnyError
}
;
use
alloc
:
:
vec
:
:
Vec
;
#
[
cfg
(
feature
=
"
mock
"
)
]
use
mockall
:
:
automock
;
#
[
derive
(
Clone
Debug
Copy
)
]
pub
enum
SamplingMethod
{
HpkeWithBitmask
(
u8
)
HpkeWithoutBitmask
Raw
}
#
[
cfg_attr
(
feature
=
"
mock
"
automock
(
type
Error
=
crate
:
:
mock
:
:
TestError
;
)
)
]
#
[
cfg_attr
(
not
(
mls_build_async
)
maybe_async
:
:
must_be_sync
)
]
#
[
cfg_attr
(
all
(
target_arch
=
"
wasm32
"
mls_build_async
)
maybe_async
:
:
must_be_async
(
?
Send
)
)
]
#
[
cfg_attr
(
all
(
not
(
target_arch
=
"
wasm32
"
)
mls_build_async
)
maybe_async
:
:
must_be_async
)
]
pub
trait
DhType
:
Send
+
Sync
{
type
Error
:
IntoAnyError
+
Send
+
Sync
;
async
fn
dh
(
&
self
secret_key
:
&
HpkeSecretKey
public_key
:
&
HpkePublicKey
)
-
>
Result
<
Vec
<
u8
>
Self
:
:
Error
>
;
async
fn
generate
(
&
self
)
-
>
Result
<
(
HpkeSecretKey
HpkePublicKey
)
Self
:
:
Error
>
;
async
fn
to_public
(
&
self
secret_key
:
&
HpkeSecretKey
)
-
>
Result
<
HpkePublicKey
Self
:
:
Error
>
;
fn
bitmask_for_rejection_sampling
(
&
self
)
-
>
SamplingMethod
;
fn
secret_key_size
(
&
self
)
-
>
usize
;
fn
public_key_size
(
&
self
)
-
>
usize
;
fn
public_key_validate
(
&
self
key
:
&
HpkePublicKey
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
}
