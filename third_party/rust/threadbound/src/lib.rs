#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
threadbound
/
0
.
1
.
3
"
)
]
#
!
[
allow
(
clippy
:
:
doc_markdown
)
]
use
std
:
:
fmt
:
:
{
self
Debug
}
;
use
std
:
:
thread
:
:
{
self
ThreadId
}
;
pub
struct
ThreadBound
<
T
>
{
value
:
T
thread_id
:
ThreadId
}
unsafe
impl
<
T
>
Sync
for
ThreadBound
<
T
>
{
}
unsafe
impl
<
T
:
Copy
>
Send
for
ThreadBound
<
T
>
{
}
impl
<
T
>
ThreadBound
<
T
>
{
pub
fn
new
(
value
:
T
)
-
>
Self
{
ThreadBound
{
value
thread_id
:
thread
:
:
current
(
)
.
id
(
)
}
}
pub
fn
get_ref
(
&
self
)
-
>
Option
<
&
T
>
{
if
thread
:
:
current
(
)
.
id
(
)
=
=
self
.
thread_id
{
Some
(
&
self
.
value
)
}
else
{
None
}
}
pub
fn
get_mut
(
&
mut
self
)
-
>
Option
<
&
mut
T
>
{
if
thread
:
:
current
(
)
.
id
(
)
=
=
self
.
thread_id
{
Some
(
&
mut
self
.
value
)
}
else
{
None
}
}
pub
fn
into_inner
(
self
)
-
>
Option
<
T
>
{
if
thread
:
:
current
(
)
.
id
(
)
=
=
self
.
thread_id
{
Some
(
self
.
value
)
}
else
{
None
}
}
}
impl
<
T
:
Default
>
Default
for
ThreadBound
<
T
>
{
fn
default
(
)
-
>
Self
{
ThreadBound
:
:
new
(
Default
:
:
default
(
)
)
}
}
impl
<
T
:
Debug
>
Debug
for
ThreadBound
<
T
>
{
fn
fmt
(
&
self
formatter
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
match
self
.
get_ref
(
)
{
Some
(
value
)
=
>
Debug
:
:
fmt
(
value
formatter
)
None
=
>
formatter
.
write_str
(
"
unknown
"
)
}
}
}
