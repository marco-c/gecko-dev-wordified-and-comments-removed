pub
fn
decode_permutation_6
(
count
:
u32
mut
encoding
:
u32
)
-
>
std
:
:
result
:
:
Result
<
[
u8
;
6
]
(
)
>
{
if
count
>
6
{
return
Err
(
(
)
)
;
}
let
mut
compressed_regindexes
=
[
0
;
6
]
;
if
count
>
4
{
compressed_regindexes
[
4
]
=
encoding
%
2
;
encoding
/
=
2
;
}
if
count
>
3
{
compressed_regindexes
[
3
]
=
encoding
%
3
;
encoding
/
=
3
;
}
if
count
>
2
{
compressed_regindexes
[
2
]
=
encoding
%
4
;
encoding
/
=
4
;
}
if
count
>
1
{
compressed_regindexes
[
1
]
=
encoding
%
5
;
encoding
/
=
5
;
}
if
count
>
0
{
compressed_regindexes
[
0
]
=
encoding
;
}
if
compressed_regindexes
[
0
]
>
=
6
{
return
Err
(
(
)
)
;
}
let
mut
registers
=
[
0
;
6
]
;
let
mut
used
=
[
false
;
6
]
;
for
i
in
0
.
.
count
{
let
compressed_regindex
=
compressed_regindexes
[
i
as
usize
]
;
debug_assert
!
(
compressed_regindex
<
6
-
i
)
;
let
uncompressed_regindex
=
(
0
.
.
6
)
.
filter
(
|
ri
|
!
used
[
*
ri
]
)
.
nth
(
compressed_regindex
as
usize
)
.
unwrap
(
)
;
used
[
uncompressed_regindex
]
=
true
;
registers
[
i
as
usize
]
=
(
uncompressed_regindex
+
1
)
as
u8
;
}
Ok
(
registers
)
}
