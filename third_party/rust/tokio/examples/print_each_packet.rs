#
!
[
deny
(
warnings
)
]
extern
crate
tokio
;
extern
crate
tokio_codec
;
use
tokio_codec
:
:
BytesCodec
;
use
tokio
:
:
net
:
:
TcpListener
;
use
tokio
:
:
prelude
:
:
*
;
use
tokio
:
:
codec
:
:
Decoder
;
use
std
:
:
env
;
use
std
:
:
net
:
:
SocketAddr
;
fn
main
(
)
{
let
addr
=
env
:
:
args
(
)
.
nth
(
1
)
.
unwrap_or
(
"
127
.
0
.
0
.
1
:
8080
"
.
to_string
(
)
)
;
let
addr
=
addr
.
parse
:
:
<
SocketAddr
>
(
)
.
unwrap
(
)
;
let
socket
=
TcpListener
:
:
bind
(
&
addr
)
.
unwrap
(
)
;
println
!
(
"
Listening
on
:
{
}
"
addr
)
;
let
done
=
socket
.
incoming
(
)
.
map_err
(
|
e
|
println
!
(
"
failed
to
accept
socket
;
error
=
{
:
?
}
"
e
)
)
.
for_each
(
move
|
socket
|
{
let
framed
=
BytesCodec
:
:
new
(
)
.
framed
(
socket
)
;
let
(
_writer
reader
)
=
framed
.
split
(
)
;
let
processor
=
reader
.
for_each
(
|
bytes
|
{
println
!
(
"
bytes
:
{
:
?
}
"
bytes
)
;
Ok
(
(
)
)
}
)
.
and_then
(
|
(
)
|
{
println
!
(
"
Socket
received
FIN
packet
and
closed
connection
"
)
;
Ok
(
(
)
)
}
)
.
or_else
(
|
err
|
{
println
!
(
"
Socket
closed
with
error
:
{
:
?
}
"
err
)
;
Err
(
err
)
}
)
.
then
(
|
result
|
{
println
!
(
"
Socket
closed
with
result
:
{
:
?
}
"
result
)
;
Ok
(
(
)
)
}
)
;
tokio
:
:
spawn
(
processor
)
}
)
;
tokio
:
:
run
(
done
)
;
}
