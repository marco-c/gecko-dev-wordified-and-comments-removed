#
!
[
warn
(
rust_2018_idioms
)
]
#
!
[
cfg
(
all
(
feature
=
"
full
"
target_os
=
"
linux
"
)
)
]
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicUsize
Ordering
}
;
use
std
:
:
sync
:
:
Arc
;
use
tokio
:
:
net
:
:
UdpSocket
;
use
tokio
:
:
task
:
:
coop
:
:
{
consume_budget
has_budget_remaining
}
;
const
BUDGET
:
usize
=
128
;
#
[
tokio
:
:
test
]
#
[
cfg_attr
(
miri
ignore
)
]
async
fn
coop_budget_udp_send_recv
(
)
{
const
N_ITERATIONS
:
usize
=
1024
;
const
PACKET
:
&
[
u8
]
=
b
"
Hello
world
"
;
const
PACKET_LEN
:
usize
=
12
;
assert_eq
!
(
PACKET_LEN
PACKET
.
len
(
)
"
Defect
in
test
programmer
can
'
t
do
math
"
)
;
let
tx
=
UdpSocket
:
:
bind
(
"
127
.
0
.
0
.
1
:
0
"
)
.
await
.
unwrap
(
)
;
let
rx
=
UdpSocket
:
:
bind
(
"
127
.
0
.
0
.
1
:
0
"
)
.
await
.
unwrap
(
)
;
tx
.
connect
(
rx
.
local_addr
(
)
.
unwrap
(
)
)
.
await
.
unwrap
(
)
;
rx
.
connect
(
tx
.
local_addr
(
)
.
unwrap
(
)
)
.
await
.
unwrap
(
)
;
let
tracker
=
Arc
:
:
new
(
AtomicUsize
:
:
default
(
)
)
;
let
tracker_clone
=
Arc
:
:
clone
(
&
tracker
)
;
tokio
:
:
task
:
:
yield_now
(
)
.
await
;
tokio
:
:
spawn
(
async
move
{
loop
{
tracker_clone
.
fetch_add
(
1
Ordering
:
:
SeqCst
)
;
tokio
:
:
task
:
:
yield_now
(
)
.
await
;
}
}
)
;
for
_
in
0
.
.
N_ITERATIONS
{
tx
.
send
(
PACKET
)
.
await
.
unwrap
(
)
;
let
mut
tmp
=
[
0
;
PACKET_LEN
]
;
assert_eq
!
(
PACKET_LEN
rx
.
recv
(
&
mut
tmp
)
.
await
.
unwrap
(
)
"
Defect
in
test
case
received
unexpected
result
from
socket
"
)
;
assert_eq
!
(
PACKET
&
tmp
"
Defect
in
test
case
received
unexpected
result
from
socket
"
)
;
}
assert_eq
!
(
N_ITERATIONS
/
(
BUDGET
/
2
)
tracker
.
load
(
Ordering
:
:
SeqCst
)
)
;
}
#
[
tokio
:
:
test
]
async
fn
test_has_budget_remaining
(
)
{
assert
!
(
has_budget_remaining
(
)
)
;
for
_
in
0
.
.
BUDGET
{
consume_budget
(
)
.
await
;
}
assert
!
(
!
has_budget_remaining
(
)
)
;
}
