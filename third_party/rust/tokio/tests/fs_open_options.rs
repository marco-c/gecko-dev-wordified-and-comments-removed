#
!
[
warn
(
rust_2018_idioms
)
]
#
!
[
cfg
(
all
(
feature
=
"
full
"
not
(
target_os
=
"
wasi
"
)
)
)
]
use
std
:
:
io
:
:
Write
;
use
tempfile
:
:
NamedTempFile
;
use
tokio
:
:
fs
:
:
OpenOptions
;
use
tokio
:
:
io
:
:
AsyncReadExt
;
const
HELLO
:
&
[
u8
]
=
b
"
hello
world
.
.
.
"
;
#
[
tokio
:
:
test
]
async
fn
open_with_open_options_and_read
(
)
{
let
mut
tempfile
=
NamedTempFile
:
:
new
(
)
.
unwrap
(
)
;
tempfile
.
write_all
(
HELLO
)
.
unwrap
(
)
;
let
mut
file
=
OpenOptions
:
:
new
(
)
.
read
(
true
)
.
open
(
tempfile
)
.
await
.
unwrap
(
)
;
let
mut
buf
=
[
0
;
1024
]
;
let
n
=
file
.
read
(
&
mut
buf
)
.
await
.
unwrap
(
)
;
assert_eq
!
(
n
HELLO
.
len
(
)
)
;
assert_eq
!
(
&
buf
[
.
.
n
]
HELLO
)
;
}
#
[
tokio
:
:
test
]
async
fn
open_options_write
(
)
{
assert
!
(
format
!
(
"
{
:
?
}
"
OpenOptions
:
:
new
(
)
.
write
(
true
)
)
.
contains
(
"
write
:
true
"
)
)
;
}
#
[
tokio
:
:
test
]
async
fn
open_options_append
(
)
{
assert
!
(
format
!
(
"
{
:
?
}
"
OpenOptions
:
:
new
(
)
.
append
(
true
)
)
.
contains
(
"
append
:
true
"
)
)
;
}
#
[
tokio
:
:
test
]
async
fn
open_options_truncate
(
)
{
assert
!
(
format
!
(
"
{
:
?
}
"
OpenOptions
:
:
new
(
)
.
truncate
(
true
)
)
.
contains
(
"
truncate
:
true
"
)
)
;
}
#
[
tokio
:
:
test
]
async
fn
open_options_create
(
)
{
assert
!
(
format
!
(
"
{
:
?
}
"
OpenOptions
:
:
new
(
)
.
create
(
true
)
)
.
contains
(
"
create
:
true
"
)
)
;
}
#
[
tokio
:
:
test
]
async
fn
open_options_create_new
(
)
{
assert
!
(
format
!
(
"
{
:
?
}
"
OpenOptions
:
:
new
(
)
.
create_new
(
true
)
)
.
contains
(
"
create_new
:
true
"
)
)
;
}
#
[
tokio
:
:
test
]
#
[
cfg
(
unix
)
]
async
fn
open_options_mode
(
)
{
let
mode
=
format
!
(
"
{
:
?
}
"
OpenOptions
:
:
new
(
)
.
mode
(
0o644
)
)
;
assert
!
(
mode
.
contains
(
"
mode
:
420
"
)
|
|
mode
.
contains
(
"
mode
:
0o000644
"
)
"
mode
is
:
{
}
"
mode
)
;
}
#
[
tokio
:
:
test
]
#
[
cfg
(
target_os
=
"
linux
"
)
]
async
fn
open_options_custom_flags_linux
(
)
{
assert
!
(
format
!
(
"
{
:
?
}
"
OpenOptions
:
:
new
(
)
.
custom_flags
(
libc
:
:
O_TRUNC
)
)
.
contains
(
"
custom_flags
:
512
"
)
)
;
}
#
[
tokio
:
:
test
]
#
[
cfg
(
any
(
target_os
=
"
freebsd
"
target_os
=
"
macos
"
)
)
]
async
fn
open_options_custom_flags_bsd_family
(
)
{
assert
!
(
format
!
(
"
{
:
?
}
"
OpenOptions
:
:
new
(
)
.
custom_flags
(
libc
:
:
O_NOFOLLOW
)
)
.
contains
(
"
custom_flags
:
256
"
)
)
;
}
