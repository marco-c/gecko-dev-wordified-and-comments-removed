#
!
[
allow
(
unknown_lints
unexpected_cfgs
)
]
#
!
[
allow
(
clippy
:
:
cognitive_complexity
clippy
:
:
large_enum_variant
clippy
:
:
module_inception
clippy
:
:
needless_doctest_main
)
]
#
!
[
warn
(
missing_debug_implementations
missing_docs
rust_2018_idioms
unreachable_pub
)
]
#
!
[
deny
(
unused_must_use
)
]
#
!
[
doc
(
test
(
no_crate_inject
attr
(
deny
(
warnings
rust_2018_idioms
)
allow
(
dead_code
unused_variables
)
)
)
)
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_cfg
)
)
]
#
!
[
cfg_attr
(
docsrs
allow
(
unused_attributes
)
)
]
#
!
[
cfg_attr
(
loom
allow
(
dead_code
unreachable_pub
)
)
]
#
[
cfg
(
not
(
any
(
target_pointer_width
=
"
32
"
target_pointer_width
=
"
64
"
)
)
)
]
compile_error
!
{
"
Tokio
requires
the
platform
pointer
width
to
be
at
least
32
bits
"
}
#
[
cfg
(
all
(
not
(
tokio_unstable
)
target_family
=
"
wasm
"
any
(
feature
=
"
fs
"
feature
=
"
io
-
std
"
feature
=
"
net
"
feature
=
"
process
"
feature
=
"
rt
-
multi
-
thread
"
feature
=
"
signal
"
)
)
)
]
compile_error
!
(
"
Only
features
sync
macros
io
-
util
rt
time
are
supported
on
wasm
.
"
)
;
#
[
cfg
(
all
(
not
(
tokio_unstable
)
tokio_taskdump
)
)
]
compile_error
!
(
"
The
tokio_taskdump
feature
requires
-
-
cfg
tokio_unstable
.
"
)
;
#
[
cfg
(
all
(
tokio_taskdump
not
(
doc
)
not
(
all
(
target_os
=
"
linux
"
any
(
target_arch
=
"
aarch64
"
target_arch
=
"
x86
"
target_arch
=
"
x86_64
"
)
)
)
)
)
]
compile_error
!
(
"
The
tokio_taskdump
feature
is
only
currently
supported
on
\
linux
on
aarch64
x86
and
x86_64
.
"
)
;
#
[
macro_use
]
#
[
doc
(
hidden
)
]
pub
mod
macros
;
cfg_fs
!
{
pub
mod
fs
;
}
mod
future
;
pub
mod
io
;
pub
mod
net
;
mod
loom
;
cfg_process
!
{
pub
mod
process
;
}
#
[
cfg
(
any
(
feature
=
"
fs
"
feature
=
"
io
-
std
"
feature
=
"
net
"
all
(
windows
feature
=
"
process
"
)
)
)
]
mod
blocking
;
cfg_rt
!
{
pub
mod
runtime
;
}
cfg_not_rt
!
{
pub
(
crate
)
mod
runtime
;
}
cfg_signal
!
{
pub
mod
signal
;
}
cfg_signal_internal
!
{
#
[
cfg
(
not
(
feature
=
"
signal
"
)
)
]
#
[
allow
(
dead_code
)
]
#
[
allow
(
unreachable_pub
)
]
pub
(
crate
)
mod
signal
;
}
cfg_sync
!
{
pub
mod
sync
;
}
cfg_not_sync
!
{
mod
sync
;
}
pub
mod
task
;
cfg_rt
!
{
pub
use
task
:
:
spawn
;
}
cfg_time
!
{
pub
mod
time
;
}
mod
trace
{
use
std
:
:
future
:
:
Future
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
cfg_taskdump
!
{
pub
(
crate
)
use
crate
:
:
runtime
:
:
task
:
:
trace
:
:
trace_leaf
;
}
cfg_not_taskdump
!
{
#
[
inline
(
always
)
]
#
[
allow
(
dead_code
)
]
pub
(
crate
)
fn
trace_leaf
(
_
:
&
mut
std
:
:
task
:
:
Context
<
'
_
>
)
-
>
std
:
:
task
:
:
Poll
<
(
)
>
{
std
:
:
task
:
:
Poll
:
:
Ready
(
(
)
)
}
}
#
[
cfg_attr
(
not
(
feature
=
"
sync
"
)
allow
(
dead_code
)
)
]
pub
(
crate
)
fn
async_trace_leaf
(
)
-
>
impl
Future
<
Output
=
(
)
>
{
struct
Trace
;
impl
Future
for
Trace
{
type
Output
=
(
)
;
#
[
inline
(
always
)
]
fn
poll
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
(
)
>
{
trace_leaf
(
cx
)
}
}
Trace
}
}
mod
util
;
pub
mod
stream
{
}
#
[
cfg
(
docsrs
)
]
pub
mod
doc
;
#
[
cfg
(
any
(
feature
=
"
net
"
feature
=
"
fs
"
)
)
]
#
[
cfg
(
docsrs
)
]
#
[
allow
(
unused
)
]
pub
(
crate
)
use
self
:
:
doc
:
:
os
;
#
[
cfg
(
not
(
docsrs
)
)
]
#
[
allow
(
unused
)
]
pub
(
crate
)
use
std
:
:
os
;
cfg_macros
!
{
/
/
/
Implementation
detail
of
the
select
!
macro
.
This
macro
is
*
*
not
*
*
/
/
/
intended
to
be
used
as
part
of
the
public
API
and
is
permitted
to
/
/
/
change
.
#
[
doc
(
hidden
)
]
pub
use
tokio_macros
:
:
select_priv_declare_output_enum
;
/
/
/
Implementation
detail
of
the
select
!
macro
.
This
macro
is
*
*
not
*
*
/
/
/
intended
to
be
used
as
part
of
the
public
API
and
is
permitted
to
/
/
/
change
.
#
[
doc
(
hidden
)
]
pub
use
tokio_macros
:
:
select_priv_clean_pattern
;
cfg_rt
!
{
#
[
cfg
(
feature
=
"
rt
-
multi
-
thread
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
macros
"
)
)
)
]
#
[
doc
(
inline
)
]
pub
use
tokio_macros
:
:
main
;
#
[
cfg
(
feature
=
"
rt
-
multi
-
thread
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
macros
"
)
)
)
]
#
[
doc
(
inline
)
]
pub
use
tokio_macros
:
:
test
;
cfg_not_rt_multi_thread
!
{
#
[
doc
(
inline
)
]
pub
use
tokio_macros
:
:
main_rt
as
main
;
#
[
doc
(
inline
)
]
pub
use
tokio_macros
:
:
test_rt
as
test
;
}
}
/
/
Always
fail
if
rt
is
not
enabled
.
cfg_not_rt
!
{
#
[
doc
(
inline
)
]
pub
use
tokio_macros
:
:
main_fail
as
main
;
#
[
doc
(
inline
)
]
pub
use
tokio_macros
:
:
test_fail
as
test
;
}
}
#
[
cfg
(
feature
=
"
io
-
util
"
)
]
#
[
cfg
(
test
)
]
fn
is_unpin
<
T
:
Unpin
>
(
)
{
}
#
[
cfg
(
fuzzing
)
]
pub
mod
fuzz
;
