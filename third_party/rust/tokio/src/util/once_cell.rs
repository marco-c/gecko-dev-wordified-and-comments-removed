#
!
[
allow
(
dead_code
)
]
use
std
:
:
cell
:
:
UnsafeCell
;
use
std
:
:
mem
:
:
MaybeUninit
;
use
std
:
:
sync
:
:
Once
;
pub
(
crate
)
struct
OnceCell
<
T
>
{
once
:
Once
value
:
UnsafeCell
<
MaybeUninit
<
T
>
>
}
unsafe
impl
<
T
:
Send
+
Sync
>
Send
for
OnceCell
<
T
>
{
}
unsafe
impl
<
T
:
Send
+
Sync
>
Sync
for
OnceCell
<
T
>
{
}
impl
<
T
>
OnceCell
<
T
>
{
pub
(
crate
)
const
fn
new
(
)
-
>
Self
{
Self
{
once
:
Once
:
:
new
(
)
value
:
UnsafeCell
:
:
new
(
MaybeUninit
:
:
uninit
(
)
)
}
}
#
[
inline
]
pub
(
crate
)
fn
get
(
&
self
init
:
impl
FnOnce
(
)
-
>
T
)
-
>
&
T
{
if
!
self
.
once
.
is_completed
(
)
{
self
.
do_init
(
init
)
;
}
unsafe
{
&
*
(
self
.
value
.
get
(
)
as
*
const
T
)
}
}
#
[
cold
]
fn
do_init
(
&
self
init
:
impl
FnOnce
(
)
-
>
T
)
{
let
value_ptr
=
self
.
value
.
get
(
)
as
*
mut
T
;
self
.
once
.
call_once
(
|
|
{
let
set_to
=
init
(
)
;
unsafe
{
std
:
:
ptr
:
:
write
(
value_ptr
set_to
)
;
}
}
)
;
}
}
impl
<
T
>
Drop
for
OnceCell
<
T
>
{
fn
drop
(
&
mut
self
)
{
if
self
.
once
.
is_completed
(
)
{
let
value_ptr
=
self
.
value
.
get
(
)
as
*
mut
T
;
unsafe
{
std
:
:
ptr
:
:
drop_in_place
(
value_ptr
)
;
}
}
}
}
