use
crate
:
:
loom
:
:
cell
:
:
UnsafeCell
;
use
std
:
:
rc
:
:
Rc
;
pub
(
crate
)
struct
RcCell
<
T
>
{
inner
:
UnsafeCell
<
Option
<
Rc
<
T
>
>
>
}
impl
<
T
>
RcCell
<
T
>
{
#
[
cfg
(
not
(
all
(
loom
test
)
)
)
]
pub
(
crate
)
const
fn
new
(
)
-
>
Self
{
Self
{
inner
:
UnsafeCell
:
:
new
(
None
)
}
}
#
[
cfg
(
all
(
loom
test
)
)
]
pub
(
crate
)
fn
new
(
)
-
>
Self
{
Self
{
inner
:
UnsafeCell
:
:
new
(
None
)
}
}
#
[
inline
]
unsafe
fn
with_inner
<
F
R
>
(
&
self
f
:
F
)
-
>
R
where
F
:
FnOnce
(
&
mut
Option
<
Rc
<
T
>
>
)
-
>
R
{
self
.
inner
.
with_mut
(
|
ptr
|
f
(
&
mut
*
ptr
)
)
}
pub
(
crate
)
fn
get
(
&
self
)
-
>
Option
<
Rc
<
T
>
>
{
unsafe
{
self
.
with_inner
(
|
rc
|
rc
.
clone
(
)
)
}
}
pub
(
crate
)
fn
replace
(
&
self
val
:
Option
<
Rc
<
T
>
>
)
-
>
Option
<
Rc
<
T
>
>
{
unsafe
{
self
.
with_inner
(
|
rc
|
std
:
:
mem
:
:
replace
(
rc
val
)
)
}
}
pub
(
crate
)
fn
set
(
&
self
val
:
Option
<
Rc
<
T
>
>
)
{
let
old
=
self
.
replace
(
val
)
;
drop
(
old
)
;
}
}
