use
super
:
:
{
FastRand
RngSeed
}
;
use
std
:
:
sync
:
:
Mutex
;
#
[
derive
(
Debug
)
]
pub
(
crate
)
struct
RngSeedGenerator
{
state
:
Mutex
<
FastRand
>
}
impl
RngSeedGenerator
{
pub
(
crate
)
fn
new
(
seed
:
RngSeed
)
-
>
Self
{
Self
{
state
:
Mutex
:
:
new
(
FastRand
:
:
from_seed
(
seed
)
)
}
}
pub
(
crate
)
fn
next_seed
(
&
self
)
-
>
RngSeed
{
let
mut
rng
=
self
.
state
.
lock
(
)
.
expect
(
"
RNG
seed
generator
is
internally
corrupt
"
)
;
let
s
=
rng
.
fastrand
(
)
;
let
r
=
rng
.
fastrand
(
)
;
RngSeed
:
:
from_pair
(
s
r
)
}
pub
(
crate
)
fn
next_generator
(
&
self
)
-
>
Self
{
RngSeedGenerator
:
:
new
(
self
.
next_seed
(
)
)
}
}
impl
FastRand
{
pub
(
crate
)
fn
replace_seed
(
&
mut
self
seed
:
RngSeed
)
-
>
RngSeed
{
let
old_seed
=
RngSeed
:
:
from_pair
(
self
.
one
self
.
two
)
;
self
.
one
=
seed
.
s
;
self
.
two
=
seed
.
r
;
old_seed
}
}
