#
[
macro_export
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
macros
"
)
)
)
]
macro_rules
!
select
{
(
{
(
(
count
:
tt
)
*
)
(
(
(
skip
:
tt
)
*
)
bind
:
pat
=
fut
:
expr
if
c
:
expr
=
>
handle
:
expr
)
+
;
else
:
expr
}
)
=
>
{
{
/
/
Enter
a
context
where
stable
"
function
-
like
"
proc
macros
can
be
used
.
/
/
/
/
This
module
is
defined
within
a
scope
and
should
not
leak
out
of
this
/
/
macro
.
mod
util
{
/
/
Generate
an
enum
with
one
variant
per
select
branch
crate
:
:
select_priv_declare_output_enum
!
(
(
(
count
)
*
)
)
;
}
/
/
tokio
:
:
macros
:
:
support
is
a
public
but
doc
(
hidden
)
module
/
/
including
a
re
-
export
of
all
types
needed
by
this
macro
.
use
crate
:
:
macros
:
:
support
:
:
Future
;
use
crate
:
:
macros
:
:
support
:
:
Pin
;
use
crate
:
:
macros
:
:
support
:
:
Poll
:
:
{
Ready
Pending
}
;
const
BRANCHES
:
u32
=
crate
:
:
count
!
(
(
count
)
*
)
;
let
mut
disabled
:
util
:
:
Mask
=
Default
:
:
default
(
)
;
/
/
First
invoke
all
the
pre
-
conditions
.
For
any
that
return
true
/
/
set
the
appropriate
bit
in
disabled
.
(
if
!
c
{
let
mask
=
1
<
<
crate
:
:
count
!
(
(
skip
)
*
)
;
disabled
|
=
mask
;
}
)
*
/
/
Create
a
scope
to
separate
polling
from
handling
the
output
.
This
/
/
adds
borrow
checker
flexibility
when
using
the
macro
.
let
mut
output
=
{
/
/
Safety
:
Nothing
must
be
moved
out
of
futures
.
This
is
to
/
/
satisfy
the
requirement
of
Pin
:
:
new_unchecked
called
below
.
let
mut
futures
=
(
(
fut
)
+
)
;
crate
:
:
macros
:
:
support
:
:
poll_fn
(
|
cx
|
{
/
/
Track
if
any
branch
returns
pending
.
If
no
branch
completes
/
/
*
*
or
*
*
returns
pending
this
implies
that
all
branches
are
/
/
disabled
.
let
mut
is_pending
=
false
;
/
/
Randomly
generate
a
starting
point
.
This
makes
select
!
a
/
/
bit
more
fair
and
avoids
always
polling
the
first
future
.
let
start
=
crate
:
:
macros
:
:
support
:
:
thread_rng_n
(
BRANCHES
)
;
for
i
in
0
.
.
BRANCHES
{
let
branch
=
(
start
+
i
)
%
BRANCHES
;
match
branch
{
(
crate
:
:
count
!
(
(
skip
)
*
)
=
>
{
/
/
First
if
the
future
has
previously
been
/
/
disabled
do
not
poll
it
again
.
This
is
done
/
/
by
checking
the
associated
bit
in
the
/
/
disabled
bit
field
.
let
mask
=
1
<
<
branch
;
if
disabled
&
mask
=
=
mask
{
/
/
The
future
has
been
disabled
.
continue
;
}
/
/
Extract
the
future
for
this
branch
from
the
/
/
tuple
let
(
(
skip
)
*
fut
.
.
)
=
&
mut
futures
;
/
/
Safety
:
future
is
stored
on
the
stack
above
/
/
and
never
moved
.
let
mut
fut
=
unsafe
{
Pin
:
:
new_unchecked
(
fut
)
}
;
/
/
Try
polling
it
let
out
=
match
fut
.
poll
(
cx
)
{
Ready
(
out
)
=
>
out
Pending
=
>
{
/
/
Track
that
at
least
one
future
is
/
/
still
pending
and
continue
polling
.
is_pending
=
true
;
continue
;
}
}
;
/
/
Disable
the
future
from
future
polling
.
disabled
|
=
mask
;
/
/
The
future
returned
a
value
check
if
matches
/
/
the
specified
pattern
.
#
[
allow
(
unused_variables
)
]
match
&
out
{
bind
=
>
{
}
_
=
>
continue
}
/
/
The
select
is
complete
return
the
value
return
Ready
(
crate
:
:
select_variant
!
(
util
:
:
Out
(
(
skip
)
*
)
)
(
out
)
)
;
}
)
*
_
=
>
unreachable
!
(
"
reaching
this
means
there
probably
is
an
off
by
one
bug
"
)
}
}
if
is_pending
{
Pending
}
else
{
/
/
All
branches
have
been
disabled
.
Ready
(
util
:
:
Out
:
:
Disabled
)
}
}
)
.
await
}
;
match
output
{
(
crate
:
:
select_variant
!
(
util
:
:
Out
(
(
skip
)
*
)
(
bind
)
)
=
>
handle
)
*
util
:
:
Out
:
:
Disabled
=
>
else
_
=
>
unreachable
!
(
"
failed
to
match
bind
"
)
}
}
}
;
(
{
(
t
:
tt
)
*
}
)
=
>
{
/
/
No
else
branch
crate
:
:
select
!
(
{
(
t
)
*
;
unreachable
!
(
)
}
)
}
;
(
{
(
t
:
tt
)
*
}
else
=
>
else
:
expr
(
)
?
)
=
>
{
crate
:
:
select
!
(
{
(
t
)
*
;
else
}
)
}
;
(
{
(
(
s
:
tt
)
*
)
(
t
:
tt
)
*
}
p
:
pat
=
f
:
expr
if
c
:
expr
=
>
h
:
block
(
r
:
tt
)
*
)
=
>
{
crate
:
:
select
!
(
{
(
(
s
)
*
_
)
(
t
)
*
(
(
s
)
*
)
p
=
f
if
c
=
>
h
}
(
r
)
*
)
}
;
(
{
(
(
s
:
tt
)
*
)
(
t
:
tt
)
*
}
p
:
pat
=
f
:
expr
=
>
h
:
block
(
r
:
tt
)
*
)
=
>
{
crate
:
:
select
!
(
{
(
(
s
)
*
_
)
(
t
)
*
(
(
s
)
*
)
p
=
f
if
true
=
>
h
}
(
r
)
*
)
}
;
(
{
(
(
s
:
tt
)
*
)
(
t
:
tt
)
*
}
p
:
pat
=
f
:
expr
if
c
:
expr
=
>
h
:
block
(
r
:
tt
)
*
)
=
>
{
crate
:
:
select
!
(
{
(
(
s
)
*
_
)
(
t
)
*
(
(
s
)
*
)
p
=
f
if
c
=
>
h
}
(
r
)
*
)
}
;
(
{
(
(
s
:
tt
)
*
)
(
t
:
tt
)
*
}
p
:
pat
=
f
:
expr
=
>
h
:
block
(
r
:
tt
)
*
)
=
>
{
crate
:
:
select
!
(
{
(
(
s
)
*
_
)
(
t
)
*
(
(
s
)
*
)
p
=
f
if
true
=
>
h
}
(
r
)
*
)
}
;
(
{
(
(
s
:
tt
)
*
)
(
t
:
tt
)
*
}
p
:
pat
=
f
:
expr
if
c
:
expr
=
>
h
:
expr
)
=
>
{
crate
:
:
select
!
(
{
(
(
s
)
*
_
)
(
t
)
*
(
(
s
)
*
)
p
=
f
if
c
=
>
h
}
)
}
;
(
{
(
(
s
:
tt
)
*
)
(
t
:
tt
)
*
}
p
:
pat
=
f
:
expr
=
>
h
:
expr
)
=
>
{
crate
:
:
select
!
(
{
(
(
s
)
*
_
)
(
t
)
*
(
(
s
)
*
)
p
=
f
if
true
=
>
h
}
)
}
;
(
{
(
(
s
:
tt
)
*
)
(
t
:
tt
)
*
}
p
:
pat
=
f
:
expr
if
c
:
expr
=
>
h
:
expr
(
r
:
tt
)
*
)
=
>
{
crate
:
:
select
!
(
{
(
(
s
)
*
_
)
(
t
)
*
(
(
s
)
*
)
p
=
f
if
c
=
>
h
}
(
r
)
*
)
}
;
(
{
(
(
s
:
tt
)
*
)
(
t
:
tt
)
*
}
p
:
pat
=
f
:
expr
=
>
h
:
expr
(
r
:
tt
)
*
)
=
>
{
crate
:
:
select
!
(
{
(
(
s
)
*
_
)
(
t
)
*
(
(
s
)
*
)
p
=
f
if
true
=
>
h
}
(
r
)
*
)
}
;
(
p
:
pat
=
(
t
:
tt
)
*
)
=
>
{
crate
:
:
select
!
(
{
(
)
}
p
=
(
t
)
*
)
}
;
(
)
=
>
{
compile_error
!
(
"
select
!
requires
at
least
one
branch
.
"
)
}
;
}
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
count
{
(
)
=
>
{
0
}
;
(
_
)
=
>
{
1
}
;
(
_
_
)
=
>
{
2
}
;
(
_
_
_
)
=
>
{
3
}
;
(
_
_
_
_
)
=
>
{
4
}
;
(
_
_
_
_
_
)
=
>
{
5
}
;
(
_
_
_
_
_
_
)
=
>
{
6
}
;
(
_
_
_
_
_
_
_
)
=
>
{
7
}
;
(
_
_
_
_
_
_
_
_
)
=
>
{
8
}
;
(
_
_
_
_
_
_
_
_
_
)
=
>
{
9
}
;
(
_
_
_
_
_
_
_
_
_
_
)
=
>
{
10
}
;
(
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
11
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
12
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
13
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
14
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
15
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
16
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
17
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
18
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
19
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
20
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
21
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
22
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
23
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
24
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
25
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
26
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
27
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
28
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
29
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
30
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
31
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
32
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
33
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
34
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
35
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
36
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
37
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
38
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
39
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
40
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
41
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
42
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
43
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
44
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
45
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
46
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
47
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
48
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
49
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
50
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
51
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
52
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
53
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
54
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
55
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
56
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
57
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
58
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
59
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
60
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
61
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
62
}
;
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
=
>
{
63
}
;
}
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
select_variant
{
(
(
p
:
ident
)
:
:
*
(
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_0
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_1
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_2
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_3
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_4
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_5
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_6
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_7
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_8
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_9
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_10
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_11
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_12
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_13
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_14
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_15
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_16
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_17
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_18
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_19
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_20
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_21
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_22
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_23
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_24
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_25
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_26
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_27
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_28
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_29
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_30
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_31
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_32
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_33
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_34
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_35
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_36
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_37
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_38
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_39
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_40
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_41
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_42
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_43
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_44
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_45
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_46
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_47
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_48
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_49
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_50
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_51
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_52
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_53
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_54
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_55
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_56
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_57
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_58
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_59
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_60
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_61
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_62
(
t
)
*
}
;
(
(
p
:
ident
)
:
:
*
(
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
)
(
t
:
tt
)
*
)
=
>
{
(
p
)
:
:
*
:
:
_63
(
t
)
*
}
;
}
