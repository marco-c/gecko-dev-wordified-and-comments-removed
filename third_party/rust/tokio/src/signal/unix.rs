#
!
[
cfg
(
unix
)
]
#
!
[
cfg_attr
(
docsrs
doc
(
cfg
(
all
(
unix
feature
=
"
signal
"
)
)
)
)
]
use
crate
:
:
signal
:
:
registry
:
:
{
globals
EventId
EventInfo
Globals
Init
Storage
}
;
use
crate
:
:
signal
:
:
RxFuture
;
use
crate
:
:
sync
:
:
watch
;
use
mio
:
:
net
:
:
UnixStream
;
use
std
:
:
io
:
:
{
self
Error
ErrorKind
Write
}
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
sync
:
:
atomic
:
:
{
AtomicBool
Ordering
}
;
use
std
:
:
sync
:
:
Once
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
pub
(
crate
)
mod
driver
;
use
self
:
:
driver
:
:
Handle
;
pub
(
crate
)
type
OsStorage
=
Vec
<
SignalInfo
>
;
const
SIGNUM
:
usize
=
33
;
impl
Init
for
OsStorage
{
fn
init
(
)
-
>
Self
{
(
0
.
.
SIGNUM
)
.
map
(
|
_
|
SignalInfo
:
:
default
(
)
)
.
collect
(
)
}
}
impl
Storage
for
OsStorage
{
fn
event_info
(
&
self
id
:
EventId
)
-
>
Option
<
&
EventInfo
>
{
self
.
get
(
id
)
.
map
(
|
si
|
&
si
.
event_info
)
}
fn
for_each
<
'
a
F
>
(
&
'
a
self
f
:
F
)
where
F
:
FnMut
(
&
'
a
EventInfo
)
{
self
.
iter
(
)
.
map
(
|
si
|
&
si
.
event_info
)
.
for_each
(
f
)
}
}
#
[
derive
(
Debug
)
]
pub
(
crate
)
struct
OsExtraData
{
sender
:
UnixStream
receiver
:
UnixStream
}
impl
Init
for
OsExtraData
{
fn
init
(
)
-
>
Self
{
let
(
receiver
sender
)
=
UnixStream
:
:
pair
(
)
.
expect
(
"
failed
to
create
UnixStream
"
)
;
Self
{
sender
receiver
}
}
}
#
[
derive
(
Debug
Clone
Copy
)
]
pub
struct
SignalKind
(
libc
:
:
c_int
)
;
impl
SignalKind
{
pub
fn
from_raw
(
signum
:
std
:
:
os
:
:
raw
:
:
c_int
)
-
>
Self
{
Self
(
signum
as
libc
:
:
c_int
)
}
pub
fn
alarm
(
)
-
>
Self
{
Self
(
libc
:
:
SIGALRM
)
}
pub
fn
child
(
)
-
>
Self
{
Self
(
libc
:
:
SIGCHLD
)
}
pub
fn
hangup
(
)
-
>
Self
{
Self
(
libc
:
:
SIGHUP
)
}
#
[
cfg
(
any
(
target_os
=
"
dragonfly
"
target_os
=
"
freebsd
"
target_os
=
"
macos
"
target_os
=
"
netbsd
"
target_os
=
"
openbsd
"
)
)
]
pub
fn
info
(
)
-
>
Self
{
Self
(
libc
:
:
SIGINFO
)
}
pub
fn
interrupt
(
)
-
>
Self
{
Self
(
libc
:
:
SIGINT
)
}
pub
fn
io
(
)
-
>
Self
{
Self
(
libc
:
:
SIGIO
)
}
pub
fn
pipe
(
)
-
>
Self
{
Self
(
libc
:
:
SIGPIPE
)
}
pub
fn
quit
(
)
-
>
Self
{
Self
(
libc
:
:
SIGQUIT
)
}
pub
fn
terminate
(
)
-
>
Self
{
Self
(
libc
:
:
SIGTERM
)
}
pub
fn
user_defined1
(
)
-
>
Self
{
Self
(
libc
:
:
SIGUSR1
)
}
pub
fn
user_defined2
(
)
-
>
Self
{
Self
(
libc
:
:
SIGUSR2
)
}
pub
fn
window_change
(
)
-
>
Self
{
Self
(
libc
:
:
SIGWINCH
)
}
}
pub
(
crate
)
struct
SignalInfo
{
event_info
:
EventInfo
init
:
Once
initialized
:
AtomicBool
}
impl
Default
for
SignalInfo
{
fn
default
(
)
-
>
SignalInfo
{
SignalInfo
{
event_info
:
Default
:
:
default
(
)
init
:
Once
:
:
new
(
)
initialized
:
AtomicBool
:
:
new
(
false
)
}
}
}
fn
action
(
globals
:
Pin
<
&
'
static
Globals
>
signal
:
libc
:
:
c_int
)
{
globals
.
record_event
(
signal
as
EventId
)
;
let
mut
sender
=
&
globals
.
sender
;
drop
(
sender
.
write
(
&
[
1
]
)
)
;
}
fn
signal_enable
(
signal
:
SignalKind
handle
:
&
Handle
)
-
>
io
:
:
Result
<
(
)
>
{
let
signal
=
signal
.
0
;
if
signal
<
0
|
|
signal_hook_registry
:
:
FORBIDDEN
.
contains
(
&
signal
)
{
return
Err
(
Error
:
:
new
(
ErrorKind
:
:
Other
format
!
(
"
Refusing
to
register
signal
{
}
"
signal
)
)
)
;
}
handle
.
check_inner
(
)
?
;
let
globals
=
globals
(
)
;
let
siginfo
=
match
globals
.
storage
(
)
.
get
(
signal
as
EventId
)
{
Some
(
slot
)
=
>
slot
None
=
>
return
Err
(
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
Other
"
signal
too
large
"
)
)
}
;
let
mut
registered
=
Ok
(
(
)
)
;
siginfo
.
init
.
call_once
(
|
|
{
registered
=
unsafe
{
signal_hook_registry
:
:
register
(
signal
move
|
|
action
(
globals
signal
)
)
.
map
(
|
_
|
(
)
)
}
;
if
registered
.
is_ok
(
)
{
siginfo
.
initialized
.
store
(
true
Ordering
:
:
Relaxed
)
;
}
}
)
;
registered
?
;
if
siginfo
.
initialized
.
load
(
Ordering
:
:
Relaxed
)
{
Ok
(
(
)
)
}
else
{
Err
(
Error
:
:
new
(
ErrorKind
:
:
Other
"
Failed
to
register
signal
handler
"
)
)
}
}
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
#
[
derive
(
Debug
)
]
pub
struct
Signal
{
inner
:
RxFuture
}
pub
fn
signal
(
kind
:
SignalKind
)
-
>
io
:
:
Result
<
Signal
>
{
let
rx
=
signal_with_handle
(
kind
&
Handle
:
:
current
(
)
)
?
;
Ok
(
Signal
{
inner
:
RxFuture
:
:
new
(
rx
)
}
)
}
pub
(
crate
)
fn
signal_with_handle
(
kind
:
SignalKind
handle
:
&
Handle
)
-
>
io
:
:
Result
<
watch
:
:
Receiver
<
(
)
>
>
{
signal_enable
(
kind
handle
)
?
;
Ok
(
globals
(
)
.
register_listener
(
kind
.
0
as
EventId
)
)
}
impl
Signal
{
pub
async
fn
recv
(
&
mut
self
)
-
>
Option
<
(
)
>
{
self
.
inner
.
recv
(
)
.
await
}
pub
fn
poll_recv
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
(
)
>
>
{
self
.
inner
.
poll_recv
(
cx
)
}
}
pub
(
crate
)
trait
InternalStream
{
fn
poll_recv
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
(
)
>
>
;
}
impl
InternalStream
for
Signal
{
fn
poll_recv
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
(
)
>
>
{
self
.
poll_recv
(
cx
)
}
}
pub
(
crate
)
fn
ctrl_c
(
)
-
>
io
:
:
Result
<
Signal
>
{
signal
(
SignalKind
:
:
interrupt
(
)
)
}
#
[
cfg
(
all
(
test
not
(
loom
)
)
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
signal_enable_error_on_invalid_input
(
)
{
signal_enable
(
SignalKind
:
:
from_raw
(
-
1
)
&
Handle
:
:
default
(
)
)
.
unwrap_err
(
)
;
}
#
[
test
]
fn
signal_enable_error_on_forbidden_input
(
)
{
signal_enable
(
SignalKind
:
:
from_raw
(
signal_hook_registry
:
:
FORBIDDEN
[
0
]
)
&
Handle
:
:
default
(
)
)
.
unwrap_err
(
)
;
}
}
