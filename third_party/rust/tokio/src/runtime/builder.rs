use
runtime
:
:
{
Inner
Runtime
}
;
use
reactor
:
:
Reactor
;
use
std
:
:
io
;
use
tokio_reactor
;
use
tokio_threadpool
:
:
Builder
as
ThreadPoolBuilder
;
use
tokio_threadpool
:
:
park
:
:
DefaultPark
;
use
tokio_timer
:
:
clock
:
:
{
self
Clock
}
;
use
tokio_timer
:
:
timer
:
:
{
self
Timer
}
;
#
[
derive
(
Debug
)
]
pub
struct
Builder
{
threadpool_builder
:
ThreadPoolBuilder
clock
:
Clock
}
impl
Builder
{
pub
fn
new
(
)
-
>
Builder
{
let
mut
threadpool_builder
=
ThreadPoolBuilder
:
:
new
(
)
;
threadpool_builder
.
name_prefix
(
"
tokio
-
runtime
-
worker
-
"
)
;
Builder
{
threadpool_builder
clock
:
Clock
:
:
new
(
)
}
}
pub
fn
clock
(
&
mut
self
clock
:
Clock
)
-
>
&
mut
Self
{
self
.
clock
=
clock
;
self
}
pub
fn
threadpool_builder
(
&
mut
self
val
:
ThreadPoolBuilder
)
-
>
&
mut
Self
{
self
.
threadpool_builder
=
val
;
self
}
pub
fn
build
(
&
mut
self
)
-
>
io
:
:
Result
<
Runtime
>
{
use
std
:
:
collections
:
:
HashMap
;
use
std
:
:
sync
:
:
{
Arc
Mutex
}
;
let
clock1
=
self
.
clock
.
clone
(
)
;
let
clock2
=
clock1
.
clone
(
)
;
let
timers
=
Arc
:
:
new
(
Mutex
:
:
new
(
HashMap
:
:
<
_
timer
:
:
Handle
>
:
:
new
(
)
)
)
;
let
t1
=
timers
.
clone
(
)
;
let
reactor
=
Reactor
:
:
new
(
)
?
.
background
(
)
?
;
let
reactor_handle
=
reactor
.
handle
(
)
.
clone
(
)
;
let
pool
=
self
.
threadpool_builder
.
around_worker
(
move
|
w
enter
|
{
let
timer_handle
=
t1
.
lock
(
)
.
unwrap
(
)
.
get
(
w
.
id
(
)
)
.
unwrap
(
)
.
clone
(
)
;
tokio_reactor
:
:
with_default
(
&
reactor_handle
enter
|
enter
|
{
clock
:
:
with_default
(
&
clock1
enter
|
enter
|
{
timer
:
:
with_default
(
&
timer_handle
enter
|
_
|
{
w
.
run
(
)
;
}
)
;
}
)
}
)
;
}
)
.
custom_park
(
move
|
worker_id
|
{
let
timer
=
Timer
:
:
new_with_now
(
DefaultPark
:
:
new
(
)
clock2
.
clone
(
)
)
;
timers
.
lock
(
)
.
unwrap
(
)
.
insert
(
worker_id
.
clone
(
)
timer
.
handle
(
)
)
;
timer
}
)
.
build
(
)
;
Ok
(
Runtime
{
inner
:
Some
(
Inner
{
reactor
pool
}
)
}
)
}
}
