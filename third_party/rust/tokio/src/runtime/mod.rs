#
[
cfg
(
test
)
]
#
[
cfg
(
not
(
tokio_wasm
)
)
]
#
[
macro_use
]
mod
tests
;
pub
(
crate
)
mod
context
;
pub
(
crate
)
mod
coop
;
pub
(
crate
)
mod
park
;
mod
driver
;
pub
(
crate
)
mod
scheduler
;
cfg_io_driver_impl
!
{
pub
(
crate
)
mod
io
;
}
cfg_process_driver
!
{
mod
process
;
}
cfg_time
!
{
pub
(
crate
)
mod
time
;
}
cfg_signal_internal_and_unix
!
{
pub
(
crate
)
mod
signal
;
}
cfg_rt
!
{
pub
(
crate
)
mod
task
;
mod
config
;
use
config
:
:
Config
;
mod
blocking
;
#
[
cfg_attr
(
tokio_wasi
allow
(
unused_imports
)
)
]
pub
(
crate
)
use
blocking
:
:
spawn_blocking
;
cfg_trace
!
{
pub
(
crate
)
use
blocking
:
:
Mandatory
;
}
cfg_fs
!
{
pub
(
crate
)
use
blocking
:
:
spawn_mandatory_blocking
;
}
mod
builder
;
pub
use
self
:
:
builder
:
:
Builder
;
cfg_unstable
!
{
pub
use
self
:
:
builder
:
:
UnhandledPanic
;
pub
use
crate
:
:
util
:
:
rand
:
:
RngSeed
;
}
cfg_taskdump
!
{
pub
mod
dump
;
pub
use
dump
:
:
Dump
;
}
mod
handle
;
pub
use
handle
:
:
{
EnterGuard
Handle
TryCurrentError
}
;
mod
runtime
;
pub
use
runtime
:
:
{
Runtime
RuntimeFlavor
}
;
mod
thread_id
;
pub
(
crate
)
use
thread_id
:
:
ThreadId
;
cfg_metrics
!
{
mod
metrics
;
pub
use
metrics
:
:
{
RuntimeMetrics
HistogramScale
}
;
pub
(
crate
)
use
metrics
:
:
{
MetricsBatch
SchedulerMetrics
WorkerMetrics
HistogramBuilder
}
;
cfg_net
!
{
pub
(
crate
)
use
metrics
:
:
IoDriverMetrics
;
}
}
cfg_not_metrics
!
{
pub
(
crate
)
mod
metrics
;
pub
(
crate
)
use
metrics
:
:
{
SchedulerMetrics
WorkerMetrics
MetricsBatch
HistogramBuilder
}
;
}
/
/
/
After
thread
starts
/
before
thread
stops
type
Callback
=
std
:
:
sync
:
:
Arc
<
dyn
Fn
(
)
+
Send
+
Sync
>
;
}
