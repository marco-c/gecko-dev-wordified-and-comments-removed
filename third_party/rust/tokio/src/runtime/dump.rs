use
std
:
:
fmt
;
#
[
derive
(
Debug
)
]
pub
struct
Dump
{
tasks
:
Tasks
}
#
[
derive
(
Debug
)
]
pub
struct
Tasks
{
tasks
:
Vec
<
Task
>
}
#
[
derive
(
Debug
)
]
pub
struct
Task
{
trace
:
Trace
}
#
[
derive
(
Debug
)
]
pub
struct
Trace
{
inner
:
super
:
:
task
:
:
trace
:
:
Trace
}
impl
Dump
{
pub
(
crate
)
fn
new
(
tasks
:
Vec
<
Task
>
)
-
>
Self
{
Self
{
tasks
:
Tasks
{
tasks
}
}
}
pub
fn
tasks
(
&
self
)
-
>
&
Tasks
{
&
self
.
tasks
}
}
impl
Tasks
{
pub
fn
iter
(
&
self
)
-
>
impl
Iterator
<
Item
=
&
Task
>
{
self
.
tasks
.
iter
(
)
}
}
impl
Task
{
pub
(
crate
)
fn
new
(
trace
:
super
:
:
task
:
:
trace
:
:
Trace
)
-
>
Self
{
Self
{
trace
:
Trace
{
inner
:
trace
}
}
}
pub
fn
trace
(
&
self
)
-
>
&
Trace
{
&
self
.
trace
}
}
impl
fmt
:
:
Display
for
Trace
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
inner
.
fmt
(
f
)
}
}
