mod
idle
;
use
self
:
:
idle
:
:
Idle
;
mod
worker
;
pub
(
crate
)
use
worker
:
:
Launch
;
pub
(
crate
)
use
worker
:
:
block_in_place
;
use
crate
:
:
loom
:
:
sync
:
:
Arc
;
use
crate
:
:
runtime
:
:
task
:
:
JoinHandle
;
use
crate
:
:
runtime
:
:
{
Callback
Parker
}
;
use
std
:
:
fmt
;
use
std
:
:
future
:
:
Future
;
pub
(
crate
)
struct
ThreadPool
{
spawner
:
Spawner
}
#
[
derive
(
Clone
)
]
pub
(
crate
)
struct
Spawner
{
shared
:
Arc
<
worker
:
:
Shared
>
}
impl
ThreadPool
{
pub
(
crate
)
fn
new
(
size
:
usize
parker
:
Parker
before_park
:
Option
<
Callback
>
after_unpark
:
Option
<
Callback
>
)
-
>
(
ThreadPool
Launch
)
{
let
(
shared
launch
)
=
worker
:
:
create
(
size
parker
before_park
after_unpark
)
;
let
spawner
=
Spawner
{
shared
}
;
let
thread_pool
=
ThreadPool
{
spawner
}
;
(
thread_pool
launch
)
}
pub
(
crate
)
fn
spawner
(
&
self
)
-
>
&
Spawner
{
&
self
.
spawner
}
pub
(
crate
)
fn
block_on
<
F
>
(
&
self
future
:
F
)
-
>
F
:
:
Output
where
F
:
Future
{
let
mut
enter
=
crate
:
:
runtime
:
:
enter
(
true
)
;
enter
.
block_on
(
future
)
.
expect
(
"
failed
to
park
thread
"
)
}
}
impl
fmt
:
:
Debug
for
ThreadPool
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
.
debug_struct
(
"
ThreadPool
"
)
.
finish
(
)
}
}
impl
Drop
for
ThreadPool
{
fn
drop
(
&
mut
self
)
{
self
.
spawner
.
shutdown
(
)
;
}
}
impl
Spawner
{
pub
(
crate
)
fn
spawn
<
F
>
(
&
self
future
:
F
)
-
>
JoinHandle
<
F
:
:
Output
>
where
F
:
crate
:
:
future
:
:
Future
+
Send
+
'
static
F
:
:
Output
:
Send
+
'
static
{
worker
:
:
Shared
:
:
bind_new_task
(
&
self
.
shared
future
)
}
pub
(
crate
)
fn
shutdown
(
&
mut
self
)
{
self
.
shared
.
close
(
)
;
}
}
cfg_metrics
!
{
use
crate
:
:
runtime
:
:
{
SchedulerMetrics
WorkerMetrics
}
;
impl
Spawner
{
pub
(
crate
)
fn
num_workers
(
&
self
)
-
>
usize
{
self
.
shared
.
worker_metrics
.
len
(
)
}
pub
(
crate
)
fn
scheduler_metrics
(
&
self
)
-
>
&
SchedulerMetrics
{
&
self
.
shared
.
scheduler_metrics
}
pub
(
crate
)
fn
worker_metrics
(
&
self
worker
:
usize
)
-
>
&
WorkerMetrics
{
&
self
.
shared
.
worker_metrics
[
worker
]
}
pub
(
crate
)
fn
injection_queue_depth
(
&
self
)
-
>
usize
{
self
.
shared
.
injection_queue_depth
(
)
}
pub
(
crate
)
fn
worker_local_queue_depth
(
&
self
worker
:
usize
)
-
>
usize
{
self
.
shared
.
worker_local_queue_depth
(
worker
)
}
}
}
impl
fmt
:
:
Debug
for
Spawner
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
.
debug_struct
(
"
Spawner
"
)
.
finish
(
)
}
}
