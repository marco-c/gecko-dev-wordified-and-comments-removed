use
crate
:
:
runtime
:
:
task
:
:
{
Header
RawTask
}
;
use
std
:
:
fmt
;
use
std
:
:
future
:
:
Future
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
panic
:
:
{
RefUnwindSafe
UnwindSafe
}
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
Waker
}
;
cfg_rt
!
{
/
/
/
An
owned
permission
to
join
on
a
task
(
await
its
termination
)
.
/
/
/
/
/
/
This
can
be
thought
of
as
the
equivalent
of
[
std
:
:
thread
:
:
JoinHandle
]
/
/
/
for
a
Tokio
task
rather
than
a
thread
.
Note
that
the
background
task
/
/
/
associated
with
this
JoinHandle
started
running
immediately
when
you
/
/
/
called
spawn
even
if
you
have
not
yet
awaited
the
JoinHandle
.
pub
struct
JoinHandle
<
T
>
{
raw
:
RawTask
_p
:
PhantomData
<
T
>
}
}
unsafe
impl
<
T
:
Send
>
Send
for
JoinHandle
<
T
>
{
}
unsafe
impl
<
T
:
Send
>
Sync
for
JoinHandle
<
T
>
{
}
impl
<
T
>
UnwindSafe
for
JoinHandle
<
T
>
{
}
impl
<
T
>
RefUnwindSafe
for
JoinHandle
<
T
>
{
}
impl
<
T
>
JoinHandle
<
T
>
{
pub
(
super
)
fn
new
(
raw
:
RawTask
)
-
>
JoinHandle
<
T
>
{
JoinHandle
{
raw
_p
:
PhantomData
}
}
pub
fn
abort
(
&
self
)
{
self
.
raw
.
remote_abort
(
)
;
}
pub
fn
is_finished
(
&
self
)
-
>
bool
{
let
state
=
self
.
raw
.
header
(
)
.
state
.
load
(
)
;
state
.
is_complete
(
)
}
pub
(
crate
)
fn
set_join_waker
(
&
mut
self
waker
:
&
Waker
)
{
if
self
.
raw
.
try_set_join_waker
(
waker
)
{
waker
.
wake_by_ref
(
)
;
}
}
pub
fn
abort_handle
(
&
self
)
-
>
super
:
:
AbortHandle
{
self
.
raw
.
ref_inc
(
)
;
super
:
:
AbortHandle
:
:
new
(
self
.
raw
)
}
#
[
cfg
(
tokio_unstable
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
tokio_unstable
)
)
)
]
pub
fn
id
(
&
self
)
-
>
super
:
:
Id
{
unsafe
{
Header
:
:
get_id
(
self
.
raw
.
header_ptr
(
)
)
}
}
}
impl
<
T
>
Unpin
for
JoinHandle
<
T
>
{
}
impl
<
T
>
Future
for
JoinHandle
<
T
>
{
type
Output
=
super
:
:
Result
<
T
>
;
fn
poll
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
ready
!
(
crate
:
:
trace
:
:
trace_leaf
(
cx
)
)
;
let
mut
ret
=
Poll
:
:
Pending
;
let
coop
=
ready
!
(
crate
:
:
runtime
:
:
coop
:
:
poll_proceed
(
cx
)
)
;
unsafe
{
self
.
raw
.
try_read_output
(
&
mut
ret
as
*
mut
_
as
*
mut
(
)
cx
.
waker
(
)
)
;
}
if
ret
.
is_ready
(
)
{
coop
.
made_progress
(
)
;
}
ret
}
}
impl
<
T
>
Drop
for
JoinHandle
<
T
>
{
fn
drop
(
&
mut
self
)
{
if
self
.
raw
.
state
(
)
.
drop_join_handle_fast
(
)
.
is_ok
(
)
{
return
;
}
self
.
raw
.
drop_join_handle_slow
(
)
;
}
}
impl
<
T
>
fmt
:
:
Debug
for
JoinHandle
<
T
>
where
T
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
let
id_ptr
=
unsafe
{
Header
:
:
get_id_ptr
(
self
.
raw
.
header_ptr
(
)
)
}
;
let
id
=
unsafe
{
id_ptr
.
as_ref
(
)
}
;
fmt
.
debug_struct
(
"
JoinHandle
"
)
.
field
(
"
id
"
id
)
.
finish
(
)
}
}
