use
crate
:
:
future
:
:
Future
;
use
crate
:
:
runtime
:
:
task
:
:
core
:
:
{
Cell
Core
CoreStage
Header
Trailer
}
;
use
crate
:
:
runtime
:
:
task
:
:
state
:
:
Snapshot
;
use
crate
:
:
runtime
:
:
task
:
:
waker
:
:
waker_ref
;
use
crate
:
:
runtime
:
:
task
:
:
{
JoinError
Notified
Schedule
Task
}
;
use
std
:
:
mem
;
use
std
:
:
mem
:
:
ManuallyDrop
;
use
std
:
:
panic
;
use
std
:
:
ptr
:
:
NonNull
;
use
std
:
:
task
:
:
{
Context
Poll
Waker
}
;
pub
(
super
)
struct
Harness
<
T
:
Future
S
:
'
static
>
{
cell
:
NonNull
<
Cell
<
T
S
>
>
}
impl
<
T
S
>
Harness
<
T
S
>
where
T
:
Future
S
:
'
static
{
pub
(
super
)
unsafe
fn
from_raw
(
ptr
:
NonNull
<
Header
>
)
-
>
Harness
<
T
S
>
{
Harness
{
cell
:
ptr
.
cast
:
:
<
Cell
<
T
S
>
>
(
)
}
}
fn
header_ptr
(
&
self
)
-
>
NonNull
<
Header
>
{
self
.
cell
.
cast
(
)
}
fn
header
(
&
self
)
-
>
&
Header
{
unsafe
{
&
self
.
cell
.
as_ref
(
)
.
header
}
}
fn
trailer
(
&
self
)
-
>
&
Trailer
{
unsafe
{
&
self
.
cell
.
as_ref
(
)
.
trailer
}
}
fn
core
(
&
self
)
-
>
&
Core
<
T
S
>
{
unsafe
{
&
self
.
cell
.
as_ref
(
)
.
core
}
}
}
impl
<
T
S
>
Harness
<
T
S
>
where
T
:
Future
S
:
Schedule
{
pub
(
super
)
fn
poll
(
self
)
{
match
self
.
poll_inner
(
)
{
PollFuture
:
:
Notified
=
>
{
self
.
core
(
)
.
scheduler
.
yield_now
(
Notified
(
self
.
get_new_task
(
)
)
)
;
self
.
drop_reference
(
)
;
}
PollFuture
:
:
Complete
=
>
{
self
.
complete
(
)
;
}
PollFuture
:
:
Dealloc
=
>
{
self
.
dealloc
(
)
;
}
PollFuture
:
:
Done
=
>
(
)
}
}
fn
poll_inner
(
&
self
)
-
>
PollFuture
{
use
super
:
:
state
:
:
{
TransitionToIdle
TransitionToRunning
}
;
match
self
.
header
(
)
.
state
.
transition_to_running
(
)
{
TransitionToRunning
:
:
Success
=
>
{
let
header_ptr
=
self
.
header_ptr
(
)
;
let
waker_ref
=
waker_ref
:
:
<
T
S
>
(
&
header_ptr
)
;
let
cx
=
Context
:
:
from_waker
(
&
*
waker_ref
)
;
let
res
=
poll_future
(
&
self
.
core
(
)
.
stage
cx
)
;
if
res
=
=
Poll
:
:
Ready
(
(
)
)
{
return
PollFuture
:
:
Complete
;
}
match
self
.
header
(
)
.
state
.
transition_to_idle
(
)
{
TransitionToIdle
:
:
Ok
=
>
PollFuture
:
:
Done
TransitionToIdle
:
:
OkNotified
=
>
PollFuture
:
:
Notified
TransitionToIdle
:
:
OkDealloc
=
>
PollFuture
:
:
Dealloc
TransitionToIdle
:
:
Cancelled
=
>
{
cancel_task
(
&
self
.
core
(
)
.
stage
)
;
PollFuture
:
:
Complete
}
}
}
TransitionToRunning
:
:
Cancelled
=
>
{
cancel_task
(
&
self
.
core
(
)
.
stage
)
;
PollFuture
:
:
Complete
}
TransitionToRunning
:
:
Failed
=
>
PollFuture
:
:
Done
TransitionToRunning
:
:
Dealloc
=
>
PollFuture
:
:
Dealloc
}
}
pub
(
super
)
fn
shutdown
(
self
)
{
if
!
self
.
header
(
)
.
state
.
transition_to_shutdown
(
)
{
self
.
drop_reference
(
)
;
return
;
}
cancel_task
(
&
self
.
core
(
)
.
stage
)
;
self
.
complete
(
)
;
}
pub
(
super
)
fn
dealloc
(
self
)
{
self
.
trailer
(
)
.
waker
.
with_mut
(
drop
)
;
self
.
core
(
)
.
stage
.
with_mut
(
drop
)
;
unsafe
{
drop
(
Box
:
:
from_raw
(
self
.
cell
.
as_ptr
(
)
)
)
;
}
}
pub
(
super
)
fn
try_read_output
(
self
dst
:
&
mut
Poll
<
super
:
:
Result
<
T
:
:
Output
>
>
waker
:
&
Waker
)
{
if
can_read_output
(
self
.
header
(
)
self
.
trailer
(
)
waker
)
{
*
dst
=
Poll
:
:
Ready
(
self
.
core
(
)
.
stage
.
take_output
(
)
)
;
}
}
pub
(
super
)
fn
try_set_join_waker
(
self
waker
:
&
Waker
)
-
>
bool
{
can_read_output
(
self
.
header
(
)
self
.
trailer
(
)
waker
)
}
pub
(
super
)
fn
drop_join_handle_slow
(
self
)
{
if
self
.
header
(
)
.
state
.
unset_join_interested
(
)
.
is_err
(
)
{
let
_
=
panic
:
:
catch_unwind
(
panic
:
:
AssertUnwindSafe
(
|
|
{
self
.
core
(
)
.
stage
.
drop_future_or_output
(
)
;
}
)
)
;
}
self
.
drop_reference
(
)
;
}
pub
(
super
)
fn
remote_abort
(
self
)
{
if
self
.
header
(
)
.
state
.
transition_to_notified_and_cancel
(
)
{
self
.
core
(
)
.
scheduler
.
schedule
(
Notified
(
self
.
get_new_task
(
)
)
)
;
}
}
pub
(
super
)
fn
wake_by_val
(
self
)
{
use
super
:
:
state
:
:
TransitionToNotifiedByVal
;
match
self
.
header
(
)
.
state
.
transition_to_notified_by_val
(
)
{
TransitionToNotifiedByVal
:
:
Submit
=
>
{
self
.
core
(
)
.
scheduler
.
schedule
(
Notified
(
self
.
get_new_task
(
)
)
)
;
self
.
drop_reference
(
)
;
}
TransitionToNotifiedByVal
:
:
Dealloc
=
>
{
self
.
dealloc
(
)
;
}
TransitionToNotifiedByVal
:
:
DoNothing
=
>
{
}
}
}
pub
(
super
)
fn
wake_by_ref
(
&
self
)
{
use
super
:
:
state
:
:
TransitionToNotifiedByRef
;
match
self
.
header
(
)
.
state
.
transition_to_notified_by_ref
(
)
{
TransitionToNotifiedByRef
:
:
Submit
=
>
{
self
.
core
(
)
.
scheduler
.
schedule
(
Notified
(
self
.
get_new_task
(
)
)
)
;
}
TransitionToNotifiedByRef
:
:
DoNothing
=
>
{
}
}
}
pub
(
super
)
fn
drop_reference
(
self
)
{
if
self
.
header
(
)
.
state
.
ref_dec
(
)
{
self
.
dealloc
(
)
;
}
}
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
pub
(
super
)
fn
id
(
&
self
)
-
>
Option
<
&
tracing
:
:
Id
>
{
self
.
header
(
)
.
id
.
as_ref
(
)
}
fn
complete
(
self
)
{
let
snapshot
=
self
.
header
(
)
.
state
.
transition_to_complete
(
)
;
let
_
=
panic
:
:
catch_unwind
(
panic
:
:
AssertUnwindSafe
(
|
|
{
if
!
snapshot
.
is_join_interested
(
)
{
self
.
core
(
)
.
stage
.
drop_future_or_output
(
)
;
}
else
if
snapshot
.
has_join_waker
(
)
{
self
.
trailer
(
)
.
wake_join
(
)
;
}
}
)
)
;
let
num_release
=
self
.
release
(
)
;
if
self
.
header
(
)
.
state
.
transition_to_terminal
(
num_release
)
{
self
.
dealloc
(
)
;
}
}
fn
release
(
&
self
)
-
>
usize
{
let
me
=
ManuallyDrop
:
:
new
(
self
.
get_new_task
(
)
)
;
if
let
Some
(
task
)
=
self
.
core
(
)
.
scheduler
.
release
(
&
me
)
{
mem
:
:
forget
(
task
)
;
2
}
else
{
1
}
}
fn
get_new_task
(
&
self
)
-
>
Task
<
S
>
{
unsafe
{
Task
:
:
from_raw
(
self
.
cell
.
cast
(
)
)
}
}
}
fn
can_read_output
(
header
:
&
Header
trailer
:
&
Trailer
waker
:
&
Waker
)
-
>
bool
{
let
snapshot
=
header
.
state
.
load
(
)
;
debug_assert
!
(
snapshot
.
is_join_interested
(
)
)
;
if
!
snapshot
.
is_complete
(
)
{
let
res
=
if
snapshot
.
has_join_waker
(
)
{
let
will_wake
=
unsafe
{
trailer
.
will_wake
(
waker
)
}
;
if
will_wake
{
return
false
;
}
header
.
state
.
unset_waker
(
)
.
and_then
(
|
snapshot
|
set_join_waker
(
header
trailer
waker
.
clone
(
)
snapshot
)
)
}
else
{
set_join_waker
(
header
trailer
waker
.
clone
(
)
snapshot
)
}
;
match
res
{
Ok
(
_
)
=
>
return
false
Err
(
snapshot
)
=
>
{
assert
!
(
snapshot
.
is_complete
(
)
)
;
}
}
}
true
}
fn
set_join_waker
(
header
:
&
Header
trailer
:
&
Trailer
waker
:
Waker
snapshot
:
Snapshot
)
-
>
Result
<
Snapshot
Snapshot
>
{
assert
!
(
snapshot
.
is_join_interested
(
)
)
;
assert
!
(
!
snapshot
.
has_join_waker
(
)
)
;
unsafe
{
trailer
.
set_waker
(
Some
(
waker
)
)
;
}
let
res
=
header
.
state
.
set_join_waker
(
)
;
if
res
.
is_err
(
)
{
unsafe
{
trailer
.
set_waker
(
None
)
;
}
}
res
}
enum
PollFuture
{
Complete
Notified
Done
Dealloc
}
fn
cancel_task
<
T
:
Future
>
(
stage
:
&
CoreStage
<
T
>
)
{
let
res
=
panic
:
:
catch_unwind
(
panic
:
:
AssertUnwindSafe
(
|
|
{
stage
.
drop_future_or_output
(
)
;
}
)
)
;
match
res
{
Ok
(
(
)
)
=
>
{
stage
.
store_output
(
Err
(
JoinError
:
:
cancelled
(
)
)
)
;
}
Err
(
panic
)
=
>
{
stage
.
store_output
(
Err
(
JoinError
:
:
panic
(
panic
)
)
)
;
}
}
}
fn
poll_future
<
T
:
Future
>
(
core
:
&
CoreStage
<
T
>
cx
:
Context
<
'
_
>
)
-
>
Poll
<
(
)
>
{
let
output
=
panic
:
:
catch_unwind
(
panic
:
:
AssertUnwindSafe
(
|
|
{
struct
Guard
<
'
a
T
:
Future
>
{
core
:
&
'
a
CoreStage
<
T
>
}
impl
<
'
a
T
:
Future
>
Drop
for
Guard
<
'
a
T
>
{
fn
drop
(
&
mut
self
)
{
self
.
core
.
drop_future_or_output
(
)
;
}
}
let
guard
=
Guard
{
core
}
;
let
res
=
guard
.
core
.
poll
(
cx
)
;
mem
:
:
forget
(
guard
)
;
res
}
)
)
;
let
output
=
match
output
{
Ok
(
Poll
:
:
Pending
)
=
>
return
Poll
:
:
Pending
Ok
(
Poll
:
:
Ready
(
output
)
)
=
>
Ok
(
output
)
Err
(
panic
)
=
>
Err
(
JoinError
:
:
panic
(
panic
)
)
}
;
let
_
=
panic
:
:
catch_unwind
(
panic
:
:
AssertUnwindSafe
(
|
|
{
core
.
store_output
(
output
)
;
}
)
)
;
Poll
:
:
Ready
(
(
)
)
}
