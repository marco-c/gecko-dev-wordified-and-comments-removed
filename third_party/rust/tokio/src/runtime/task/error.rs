use
std
:
:
any
:
:
Any
;
use
std
:
:
fmt
;
use
std
:
:
io
;
use
super
:
:
Id
;
use
crate
:
:
util
:
:
SyncWrapper
;
cfg_rt
!
{
/
/
/
Task
failed
to
execute
to
completion
.
pub
struct
JoinError
{
repr
:
Repr
id
:
Id
}
}
enum
Repr
{
Cancelled
Panic
(
SyncWrapper
<
Box
<
dyn
Any
+
Send
+
'
static
>
>
)
}
impl
JoinError
{
pub
(
crate
)
fn
cancelled
(
id
:
Id
)
-
>
JoinError
{
JoinError
{
repr
:
Repr
:
:
Cancelled
id
}
}
pub
(
crate
)
fn
panic
(
id
:
Id
err
:
Box
<
dyn
Any
+
Send
+
'
static
>
)
-
>
JoinError
{
JoinError
{
repr
:
Repr
:
:
Panic
(
SyncWrapper
:
:
new
(
err
)
)
id
}
}
pub
fn
is_cancelled
(
&
self
)
-
>
bool
{
matches
!
(
&
self
.
repr
Repr
:
:
Cancelled
)
}
pub
fn
is_panic
(
&
self
)
-
>
bool
{
matches
!
(
&
self
.
repr
Repr
:
:
Panic
(
_
)
)
}
#
[
track_caller
]
pub
fn
into_panic
(
self
)
-
>
Box
<
dyn
Any
+
Send
+
'
static
>
{
self
.
try_into_panic
(
)
.
expect
(
"
JoinError
reason
is
not
a
panic
.
"
)
}
pub
fn
try_into_panic
(
self
)
-
>
Result
<
Box
<
dyn
Any
+
Send
+
'
static
>
JoinError
>
{
match
self
.
repr
{
Repr
:
:
Panic
(
p
)
=
>
Ok
(
p
.
into_inner
(
)
)
_
=
>
Err
(
self
)
}
}
#
[
cfg
(
tokio_unstable
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
tokio_unstable
)
)
)
]
pub
fn
id
(
&
self
)
-
>
Id
{
self
.
id
}
}
impl
fmt
:
:
Display
for
JoinError
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
&
self
.
repr
{
Repr
:
:
Cancelled
=
>
write
!
(
fmt
"
task
{
}
was
cancelled
"
self
.
id
)
Repr
:
:
Panic
(
_
)
=
>
write
!
(
fmt
"
task
{
}
panicked
"
self
.
id
)
}
}
}
impl
fmt
:
:
Debug
for
JoinError
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
&
self
.
repr
{
Repr
:
:
Cancelled
=
>
write
!
(
fmt
"
JoinError
:
:
Cancelled
(
{
:
?
}
)
"
self
.
id
)
Repr
:
:
Panic
(
_
)
=
>
write
!
(
fmt
"
JoinError
:
:
Panic
(
{
:
?
}
.
.
.
)
"
self
.
id
)
}
}
}
impl
std
:
:
error
:
:
Error
for
JoinError
{
}
impl
From
<
JoinError
>
for
io
:
:
Error
{
fn
from
(
src
:
JoinError
)
-
>
io
:
:
Error
{
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
Other
match
src
.
repr
{
Repr
:
:
Cancelled
=
>
"
task
was
cancelled
"
Repr
:
:
Panic
(
_
)
=
>
"
task
panicked
"
}
)
}
}
