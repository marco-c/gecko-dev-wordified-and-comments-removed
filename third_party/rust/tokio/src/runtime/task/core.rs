use
crate
:
:
future
:
:
Future
;
use
crate
:
:
loom
:
:
cell
:
:
UnsafeCell
;
use
crate
:
:
runtime
:
:
task
:
:
raw
:
:
{
self
Vtable
}
;
use
crate
:
:
runtime
:
:
task
:
:
state
:
:
State
;
use
crate
:
:
runtime
:
:
task
:
:
Schedule
;
use
crate
:
:
util
:
:
linked_list
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
ptr
:
:
NonNull
;
use
std
:
:
task
:
:
{
Context
Poll
Waker
}
;
#
[
repr
(
C
)
]
pub
(
super
)
struct
Cell
<
T
:
Future
S
>
{
pub
(
super
)
header
:
Header
pub
(
super
)
core
:
Core
<
T
S
>
pub
(
super
)
trailer
:
Trailer
}
pub
(
super
)
struct
CoreStage
<
T
:
Future
>
{
stage
:
UnsafeCell
<
Stage
<
T
>
>
}
pub
(
super
)
struct
Core
<
T
:
Future
S
>
{
pub
(
super
)
scheduler
:
S
pub
(
super
)
stage
:
CoreStage
<
T
>
}
#
[
repr
(
C
)
]
pub
(
crate
)
struct
Header
{
pub
(
super
)
state
:
State
pub
(
super
)
owned
:
UnsafeCell
<
linked_list
:
:
Pointers
<
Header
>
>
pub
(
super
)
queue_next
:
UnsafeCell
<
Option
<
NonNull
<
Header
>
>
>
pub
(
super
)
vtable
:
&
'
static
Vtable
pub
(
super
)
owner_id
:
UnsafeCell
<
u64
>
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
pub
(
super
)
id
:
Option
<
tracing
:
:
Id
>
}
unsafe
impl
Send
for
Header
{
}
unsafe
impl
Sync
for
Header
{
}
pub
(
super
)
struct
Trailer
{
pub
(
super
)
waker
:
UnsafeCell
<
Option
<
Waker
>
>
}
pub
(
super
)
enum
Stage
<
T
:
Future
>
{
Running
(
T
)
Finished
(
super
:
:
Result
<
T
:
:
Output
>
)
Consumed
}
impl
<
T
:
Future
S
:
Schedule
>
Cell
<
T
S
>
{
pub
(
super
)
fn
new
(
future
:
T
scheduler
:
S
state
:
State
)
-
>
Box
<
Cell
<
T
S
>
>
{
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
let
id
=
future
.
id
(
)
;
Box
:
:
new
(
Cell
{
header
:
Header
{
state
owned
:
UnsafeCell
:
:
new
(
linked_list
:
:
Pointers
:
:
new
(
)
)
queue_next
:
UnsafeCell
:
:
new
(
None
)
vtable
:
raw
:
:
vtable
:
:
<
T
S
>
(
)
owner_id
:
UnsafeCell
:
:
new
(
0
)
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
id
}
core
:
Core
{
scheduler
stage
:
CoreStage
{
stage
:
UnsafeCell
:
:
new
(
Stage
:
:
Running
(
future
)
)
}
}
trailer
:
Trailer
{
waker
:
UnsafeCell
:
:
new
(
None
)
}
}
)
}
}
impl
<
T
:
Future
>
CoreStage
<
T
>
{
pub
(
super
)
fn
with_mut
<
R
>
(
&
self
f
:
impl
FnOnce
(
*
mut
Stage
<
T
>
)
-
>
R
)
-
>
R
{
self
.
stage
.
with_mut
(
f
)
}
pub
(
super
)
fn
poll
(
&
self
mut
cx
:
Context
<
'
_
>
)
-
>
Poll
<
T
:
:
Output
>
{
let
res
=
{
self
.
stage
.
with_mut
(
|
ptr
|
{
let
future
=
match
unsafe
{
&
mut
*
ptr
}
{
Stage
:
:
Running
(
future
)
=
>
future
_
=
>
unreachable
!
(
"
unexpected
stage
"
)
}
;
let
future
=
unsafe
{
Pin
:
:
new_unchecked
(
future
)
}
;
future
.
poll
(
&
mut
cx
)
}
)
}
;
if
res
.
is_ready
(
)
{
self
.
drop_future_or_output
(
)
;
}
res
}
pub
(
super
)
fn
drop_future_or_output
(
&
self
)
{
unsafe
{
self
.
set_stage
(
Stage
:
:
Consumed
)
;
}
}
pub
(
super
)
fn
store_output
(
&
self
output
:
super
:
:
Result
<
T
:
:
Output
>
)
{
unsafe
{
self
.
set_stage
(
Stage
:
:
Finished
(
output
)
)
;
}
}
pub
(
super
)
fn
take_output
(
&
self
)
-
>
super
:
:
Result
<
T
:
:
Output
>
{
use
std
:
:
mem
;
self
.
stage
.
with_mut
(
|
ptr
|
{
match
mem
:
:
replace
(
unsafe
{
&
mut
*
ptr
}
Stage
:
:
Consumed
)
{
Stage
:
:
Finished
(
output
)
=
>
output
_
=
>
panic
!
(
"
JoinHandle
polled
after
completion
"
)
}
}
)
}
unsafe
fn
set_stage
(
&
self
stage
:
Stage
<
T
>
)
{
self
.
stage
.
with_mut
(
|
ptr
|
*
ptr
=
stage
)
}
}
cfg_rt_multi_thread
!
{
impl
Header
{
pub
(
super
)
unsafe
fn
set_next
(
&
self
next
:
Option
<
NonNull
<
Header
>
>
)
{
self
.
queue_next
.
with_mut
(
|
ptr
|
*
ptr
=
next
)
;
}
}
}
impl
Header
{
pub
(
super
)
unsafe
fn
set_owner_id
(
&
self
owner
:
u64
)
{
self
.
owner_id
.
with_mut
(
|
ptr
|
*
ptr
=
owner
)
;
}
pub
(
super
)
fn
get_owner_id
(
&
self
)
-
>
u64
{
unsafe
{
self
.
owner_id
.
with
(
|
ptr
|
*
ptr
)
}
}
}
impl
Trailer
{
pub
(
super
)
unsafe
fn
set_waker
(
&
self
waker
:
Option
<
Waker
>
)
{
self
.
waker
.
with_mut
(
|
ptr
|
{
*
ptr
=
waker
;
}
)
;
}
pub
(
super
)
unsafe
fn
will_wake
(
&
self
waker
:
&
Waker
)
-
>
bool
{
self
.
waker
.
with
(
|
ptr
|
(
*
ptr
)
.
as_ref
(
)
.
unwrap
(
)
.
will_wake
(
waker
)
)
}
pub
(
super
)
fn
wake_join
(
&
self
)
{
self
.
waker
.
with
(
|
ptr
|
match
unsafe
{
&
*
ptr
}
{
Some
(
waker
)
=
>
waker
.
wake_by_ref
(
)
None
=
>
panic
!
(
"
waker
missing
"
)
}
)
;
}
}
#
[
test
]
#
[
cfg
(
not
(
loom
)
)
]
fn
header_lte_cache_line
(
)
{
use
std
:
:
mem
:
:
size_of
;
assert
!
(
size_of
:
:
<
Header
>
(
)
<
=
8
*
size_of
:
:
<
*
const
(
)
>
(
)
)
;
}
