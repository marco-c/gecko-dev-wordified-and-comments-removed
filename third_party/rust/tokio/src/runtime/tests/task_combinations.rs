use
std
:
:
future
:
:
Future
;
use
std
:
:
panic
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
use
crate
:
:
runtime
:
:
Builder
;
use
crate
:
:
sync
:
:
oneshot
;
use
crate
:
:
task
:
:
JoinHandle
;
use
futures
:
:
future
:
:
FutureExt
;
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
enum
CombiRuntime
{
CurrentThread
Multi1
Multi2
}
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
enum
CombiLocalSet
{
Yes
No
}
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
enum
CombiTask
{
PanicOnRun
PanicOnDrop
PanicOnRunAndDrop
NoPanic
}
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
enum
CombiOutput
{
PanicOnDrop
NoPanic
}
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
enum
CombiJoinInterest
{
Polled
NotPolled
}
#
[
allow
(
clippy
:
:
enum_variant_names
)
]
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
enum
CombiJoinHandle
{
DropImmediately
=
1
DropFirstPoll
=
2
DropAfterNoConsume
=
3
DropAfterConsume
=
4
}
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
enum
CombiAbort
{
NotAborted
=
0
AbortedImmediately
=
1
AbortedFirstPoll
=
2
AbortedAfterFinish
=
3
AbortedAfterConsumeOutput
=
4
}
#
[
test
]
fn
test_combinations
(
)
{
let
mut
rt
=
&
[
CombiRuntime
:
:
CurrentThread
CombiRuntime
:
:
Multi1
CombiRuntime
:
:
Multi2
]
[
.
.
]
;
if
cfg
!
(
miri
)
{
rt
=
&
[
CombiRuntime
:
:
CurrentThread
]
;
}
let
ls
=
[
CombiLocalSet
:
:
Yes
CombiLocalSet
:
:
No
]
;
let
task
=
[
CombiTask
:
:
NoPanic
CombiTask
:
:
PanicOnRun
CombiTask
:
:
PanicOnDrop
CombiTask
:
:
PanicOnRunAndDrop
]
;
let
output
=
[
CombiOutput
:
:
NoPanic
CombiOutput
:
:
PanicOnDrop
]
;
let
ji
=
[
CombiJoinInterest
:
:
Polled
CombiJoinInterest
:
:
NotPolled
]
;
let
jh
=
[
CombiJoinHandle
:
:
DropImmediately
CombiJoinHandle
:
:
DropFirstPoll
CombiJoinHandle
:
:
DropAfterNoConsume
CombiJoinHandle
:
:
DropAfterConsume
]
;
let
abort
=
[
CombiAbort
:
:
NotAborted
CombiAbort
:
:
AbortedImmediately
CombiAbort
:
:
AbortedFirstPoll
CombiAbort
:
:
AbortedAfterFinish
CombiAbort
:
:
AbortedAfterConsumeOutput
]
;
for
rt
in
rt
.
iter
(
)
.
copied
(
)
{
for
ls
in
ls
.
iter
(
)
.
copied
(
)
{
for
task
in
task
.
iter
(
)
.
copied
(
)
{
for
output
in
output
.
iter
(
)
.
copied
(
)
{
for
ji
in
ji
.
iter
(
)
.
copied
(
)
{
for
jh
in
jh
.
iter
(
)
.
copied
(
)
{
for
abort
in
abort
.
iter
(
)
.
copied
(
)
{
test_combination
(
rt
ls
task
output
ji
jh
abort
)
;
}
}
}
}
}
}
}
}
fn
test_combination
(
rt
:
CombiRuntime
ls
:
CombiLocalSet
task
:
CombiTask
output
:
CombiOutput
ji
:
CombiJoinInterest
jh
:
CombiJoinHandle
abort
:
CombiAbort
)
{
if
(
jh
as
usize
)
<
(
abort
as
usize
)
{
return
;
}
if
(
task
=
=
CombiTask
:
:
PanicOnDrop
)
&
&
(
output
=
=
CombiOutput
:
:
PanicOnDrop
)
{
return
;
}
if
(
task
=
=
CombiTask
:
:
PanicOnRunAndDrop
)
&
&
(
abort
!
=
CombiAbort
:
:
AbortedImmediately
)
{
return
;
}
println
!
(
"
Runtime
{
:
?
}
LocalSet
{
:
?
}
Task
{
:
?
}
Output
{
:
?
}
JoinInterest
{
:
?
}
JoinHandle
{
:
?
}
Abort
{
:
?
}
"
rt
ls
task
output
ji
jh
abort
)
;
struct
Rt
{
rt
:
crate
:
:
runtime
:
:
Runtime
ls
:
Option
<
crate
:
:
task
:
:
LocalSet
>
}
impl
Rt
{
fn
new
(
rt
:
CombiRuntime
ls
:
CombiLocalSet
)
-
>
Self
{
let
rt
=
match
rt
{
CombiRuntime
:
:
CurrentThread
=
>
Builder
:
:
new_current_thread
(
)
.
build
(
)
.
unwrap
(
)
CombiRuntime
:
:
Multi1
=
>
Builder
:
:
new_multi_thread
(
)
.
worker_threads
(
1
)
.
build
(
)
.
unwrap
(
)
CombiRuntime
:
:
Multi2
=
>
Builder
:
:
new_multi_thread
(
)
.
worker_threads
(
2
)
.
build
(
)
.
unwrap
(
)
}
;
let
ls
=
match
ls
{
CombiLocalSet
:
:
Yes
=
>
Some
(
crate
:
:
task
:
:
LocalSet
:
:
new
(
)
)
CombiLocalSet
:
:
No
=
>
None
}
;
Self
{
rt
ls
}
}
fn
block_on
<
T
>
(
&
self
task
:
T
)
-
>
T
:
:
Output
where
T
:
Future
{
match
&
self
.
ls
{
Some
(
ls
)
=
>
ls
.
block_on
(
&
self
.
rt
task
)
None
=
>
self
.
rt
.
block_on
(
task
)
}
}
fn
spawn
<
T
>
(
&
self
task
:
T
)
-
>
JoinHandle
<
T
:
:
Output
>
where
T
:
Future
+
Send
+
'
static
T
:
:
Output
:
Send
+
'
static
{
match
&
self
.
ls
{
Some
(
ls
)
=
>
ls
.
spawn_local
(
task
)
None
=
>
self
.
rt
.
spawn
(
task
)
}
}
}
struct
Output
{
panic_on_drop
:
bool
on_drop
:
Option
<
oneshot
:
:
Sender
<
(
)
>
>
}
impl
Output
{
fn
disarm
(
&
mut
self
)
{
self
.
panic_on_drop
=
false
;
}
}
impl
Drop
for
Output
{
fn
drop
(
&
mut
self
)
{
let
_
=
self
.
on_drop
.
take
(
)
.
unwrap
(
)
.
send
(
(
)
)
;
if
self
.
panic_on_drop
{
panic
!
(
"
Panicking
in
Output
"
)
;
}
}
}
struct
FutWrapper
<
F
>
{
inner
:
F
on_drop
:
Option
<
oneshot
:
:
Sender
<
(
)
>
>
panic_on_drop
:
bool
}
impl
<
F
:
Future
>
Future
for
FutWrapper
<
F
>
{
type
Output
=
F
:
:
Output
;
fn
poll
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
F
:
:
Output
>
{
unsafe
{
let
me
=
Pin
:
:
into_inner_unchecked
(
self
)
;
let
inner
=
Pin
:
:
new_unchecked
(
&
mut
me
.
inner
)
;
inner
.
poll
(
cx
)
}
}
}
impl
<
F
>
Drop
for
FutWrapper
<
F
>
{
fn
drop
(
&
mut
self
)
{
let
_
:
Result
<
(
)
(
)
>
=
self
.
on_drop
.
take
(
)
.
unwrap
(
)
.
send
(
(
)
)
;
if
self
.
panic_on_drop
{
panic
!
(
"
Panicking
in
FutWrapper
"
)
;
}
}
}
struct
Signals
{
on_first_poll
:
Option
<
oneshot
:
:
Sender
<
(
)
>
>
wait_complete
:
Option
<
oneshot
:
:
Receiver
<
(
)
>
>
on_output_drop
:
Option
<
oneshot
:
:
Sender
<
(
)
>
>
}
async
fn
my_task
(
mut
signal
:
Signals
task
:
CombiTask
out
:
CombiOutput
)
-
>
Output
{
let
_
=
signal
.
on_first_poll
.
take
(
)
.
unwrap
(
)
.
send
(
(
)
)
;
let
_
=
signal
.
wait_complete
.
take
(
)
.
unwrap
(
)
.
await
;
crate
:
:
task
:
:
yield_now
(
)
.
await
;
if
task
=
=
CombiTask
:
:
PanicOnRun
|
|
task
=
=
CombiTask
:
:
PanicOnRunAndDrop
{
panic
!
(
"
Panicking
in
my_task
on
{
:
?
}
"
std
:
:
thread
:
:
current
(
)
.
id
(
)
)
;
}
Output
{
panic_on_drop
:
out
=
=
CombiOutput
:
:
PanicOnDrop
on_drop
:
signal
.
on_output_drop
.
take
(
)
}
}
let
rt
=
Rt
:
:
new
(
rt
ls
)
;
let
(
on_first_poll
wait_first_poll
)
=
oneshot
:
:
channel
(
)
;
let
(
on_complete
wait_complete
)
=
oneshot
:
:
channel
(
)
;
let
(
on_future_drop
wait_future_drop
)
=
oneshot
:
:
channel
(
)
;
let
(
on_output_drop
wait_output_drop
)
=
oneshot
:
:
channel
(
)
;
let
signal
=
Signals
{
on_first_poll
:
Some
(
on_first_poll
)
wait_complete
:
Some
(
wait_complete
)
on_output_drop
:
Some
(
on_output_drop
)
}
;
let
mut
handle
=
Some
(
rt
.
spawn
(
FutWrapper
{
inner
:
my_task
(
signal
task
output
)
on_drop
:
Some
(
on_future_drop
)
panic_on_drop
:
task
=
=
CombiTask
:
:
PanicOnDrop
|
|
task
=
=
CombiTask
:
:
PanicOnRunAndDrop
}
)
)
;
let
mut
aborted
=
false
;
if
ji
=
=
CombiJoinInterest
:
:
Polled
{
assert
!
(
handle
.
as_mut
(
)
.
unwrap
(
)
.
now_or_never
(
)
.
is_none
(
)
"
Polling
handle
succeeded
"
)
;
}
if
abort
=
=
CombiAbort
:
:
AbortedImmediately
{
handle
.
as_mut
(
)
.
unwrap
(
)
.
abort
(
)
;
aborted
=
true
;
}
if
jh
=
=
CombiJoinHandle
:
:
DropImmediately
{
drop
(
handle
.
take
(
)
.
unwrap
(
)
)
;
}
let
got_polled
=
rt
.
block_on
(
wait_first_poll
)
.
is_ok
(
)
;
if
!
got_polled
{
assert
!
(
aborted
"
Task
completed
without
ever
being
polled
but
was
not
aborted
.
"
)
;
}
if
abort
=
=
CombiAbort
:
:
AbortedFirstPoll
{
handle
.
as_mut
(
)
.
unwrap
(
)
.
abort
(
)
;
aborted
=
true
;
}
if
jh
=
=
CombiJoinHandle
:
:
DropFirstPoll
{
drop
(
handle
.
take
(
)
.
unwrap
(
)
)
;
}
let
_
=
on_complete
.
send
(
(
)
)
;
assert
!
(
rt
.
block_on
(
wait_future_drop
)
.
is_ok
(
)
"
The
future
should
always
be
dropped
.
"
)
;
if
abort
=
=
CombiAbort
:
:
AbortedAfterFinish
{
handle
.
as_mut
(
)
.
unwrap
(
)
.
abort
(
)
;
}
if
jh
=
=
CombiJoinHandle
:
:
DropAfterNoConsume
{
let
panic
=
panic
:
:
catch_unwind
(
panic
:
:
AssertUnwindSafe
(
|
|
{
drop
(
handle
.
take
(
)
.
unwrap
(
)
)
;
}
)
)
;
if
panic
.
is_err
(
)
{
assert
!
(
(
output
=
=
CombiOutput
:
:
PanicOnDrop
)
&
&
(
!
matches
!
(
task
CombiTask
:
:
PanicOnRun
|
CombiTask
:
:
PanicOnRunAndDrop
)
)
&
&
!
aborted
"
Dropping
JoinHandle
shouldn
'
t
panic
here
"
)
;
}
}
if
jh
=
=
CombiJoinHandle
:
:
DropAfterConsume
{
let
result
=
rt
.
block_on
(
handle
.
as_mut
(
)
.
unwrap
(
)
)
;
match
result
{
Ok
(
mut
output
)
=
>
{
output
.
disarm
(
)
;
assert
!
(
!
aborted
"
Task
was
aborted
but
returned
output
"
)
;
}
Err
(
err
)
if
err
.
is_cancelled
(
)
=
>
assert
!
(
aborted
"
Cancelled
output
but
not
aborted
"
)
Err
(
err
)
if
err
.
is_panic
(
)
=
>
{
assert
!
(
(
task
=
=
CombiTask
:
:
PanicOnRun
)
|
|
(
task
=
=
CombiTask
:
:
PanicOnDrop
)
|
|
(
task
=
=
CombiTask
:
:
PanicOnRunAndDrop
)
|
|
(
output
=
=
CombiOutput
:
:
PanicOnDrop
)
"
Panic
but
nothing
should
panic
"
)
;
}
_
=
>
unreachable
!
(
)
}
let
handle
=
handle
.
take
(
)
.
unwrap
(
)
;
if
abort
=
=
CombiAbort
:
:
AbortedAfterConsumeOutput
{
handle
.
abort
(
)
;
}
drop
(
handle
)
;
}
let
output_created
=
rt
.
block_on
(
wait_output_drop
)
.
is_ok
(
)
;
assert_eq
!
(
output_created
(
!
matches
!
(
task
CombiTask
:
:
PanicOnRun
|
CombiTask
:
:
PanicOnRunAndDrop
)
)
&
&
!
aborted
"
Creation
of
output
object
"
)
;
}
