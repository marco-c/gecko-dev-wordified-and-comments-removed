use
crate
:
:
loom
:
:
sync
:
:
atomic
:
:
Ordering
:
:
Relaxed
;
use
crate
:
:
loom
:
:
sync
:
:
atomic
:
:
{
AtomicU64
AtomicUsize
}
;
#
[
derive
(
Debug
)
]
#
[
repr
(
align
(
128
)
)
]
pub
(
crate
)
struct
WorkerMetrics
{
pub
(
crate
)
park_count
:
AtomicU64
pub
(
crate
)
noop_count
:
AtomicU64
pub
(
crate
)
steal_count
:
AtomicU64
pub
(
crate
)
poll_count
:
AtomicU64
pub
(
crate
)
busy_duration_total
:
AtomicU64
pub
(
crate
)
local_schedule_count
:
AtomicU64
pub
(
crate
)
overflow_count
:
AtomicU64
pub
(
crate
)
queue_depth
:
AtomicUsize
}
impl
WorkerMetrics
{
pub
(
crate
)
fn
new
(
)
-
>
WorkerMetrics
{
WorkerMetrics
{
park_count
:
AtomicU64
:
:
new
(
0
)
noop_count
:
AtomicU64
:
:
new
(
0
)
steal_count
:
AtomicU64
:
:
new
(
0
)
poll_count
:
AtomicU64
:
:
new
(
0
)
overflow_count
:
AtomicU64
:
:
new
(
0
)
busy_duration_total
:
AtomicU64
:
:
new
(
0
)
local_schedule_count
:
AtomicU64
:
:
new
(
0
)
queue_depth
:
AtomicUsize
:
:
new
(
0
)
}
}
pub
(
crate
)
fn
queue_depth
(
&
self
)
-
>
usize
{
self
.
queue_depth
.
load
(
Relaxed
)
}
pub
(
crate
)
fn
set_queue_depth
(
&
self
len
:
usize
)
{
self
.
queue_depth
.
store
(
len
Relaxed
)
;
}
}
