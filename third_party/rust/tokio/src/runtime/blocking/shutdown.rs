use
crate
:
:
loom
:
:
sync
:
:
Arc
;
use
crate
:
:
sync
:
:
oneshot
;
use
std
:
:
time
:
:
Duration
;
#
[
derive
(
Debug
Clone
)
]
pub
(
super
)
struct
Sender
{
tx
:
Arc
<
oneshot
:
:
Sender
<
(
)
>
>
}
#
[
derive
(
Debug
)
]
pub
(
super
)
struct
Receiver
{
rx
:
oneshot
:
:
Receiver
<
(
)
>
}
pub
(
super
)
fn
channel
(
)
-
>
(
Sender
Receiver
)
{
let
(
tx
rx
)
=
oneshot
:
:
channel
(
)
;
let
tx
=
Sender
{
tx
:
Arc
:
:
new
(
tx
)
}
;
let
rx
=
Receiver
{
rx
}
;
(
tx
rx
)
}
impl
Receiver
{
pub
(
crate
)
fn
wait
(
&
mut
self
timeout
:
Option
<
Duration
>
)
{
use
crate
:
:
runtime
:
:
enter
:
:
{
enter
try_enter
}
;
let
mut
e
=
if
std
:
:
thread
:
:
panicking
(
)
{
match
try_enter
(
)
{
Some
(
enter
)
=
>
enter
_
=
>
return
}
}
else
{
enter
(
)
}
;
if
let
Some
(
timeout
)
=
timeout
{
let
_
=
e
.
block_on_timeout
(
&
mut
self
.
rx
timeout
)
;
}
else
{
let
_
=
e
.
block_on
(
&
mut
self
.
rx
)
;
}
}
}
