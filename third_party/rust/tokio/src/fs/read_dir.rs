use
crate
:
:
fs
:
:
asyncify
;
use
std
:
:
collections
:
:
VecDeque
;
use
std
:
:
ffi
:
:
OsString
;
use
std
:
:
fs
:
:
{
FileType
Metadata
}
;
use
std
:
:
future
:
:
Future
;
use
std
:
:
io
;
use
std
:
:
path
:
:
{
Path
PathBuf
}
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
task
:
:
{
ready
Context
Poll
}
;
#
[
cfg
(
test
)
]
use
super
:
:
mocks
:
:
spawn_blocking
;
#
[
cfg
(
test
)
]
use
super
:
:
mocks
:
:
JoinHandle
;
#
[
cfg
(
not
(
test
)
)
]
use
crate
:
:
blocking
:
:
spawn_blocking
;
#
[
cfg
(
not
(
test
)
)
]
use
crate
:
:
blocking
:
:
JoinHandle
;
const
CHUNK_SIZE
:
usize
=
32
;
pub
async
fn
read_dir
(
path
:
impl
AsRef
<
Path
>
)
-
>
io
:
:
Result
<
ReadDir
>
{
let
path
=
path
.
as_ref
(
)
.
to_owned
(
)
;
asyncify
(
|
|
-
>
io
:
:
Result
<
ReadDir
>
{
let
mut
std
=
std
:
:
fs
:
:
read_dir
(
path
)
?
;
let
mut
buf
=
VecDeque
:
:
with_capacity
(
CHUNK_SIZE
)
;
let
remain
=
ReadDir
:
:
next_chunk
(
&
mut
buf
&
mut
std
)
;
Ok
(
ReadDir
(
State
:
:
Idle
(
Some
(
(
buf
std
remain
)
)
)
)
)
}
)
.
await
}
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
ReadDir
(
State
)
;
#
[
derive
(
Debug
)
]
enum
State
{
Idle
(
Option
<
(
VecDeque
<
io
:
:
Result
<
DirEntry
>
>
std
:
:
fs
:
:
ReadDir
bool
)
>
)
Pending
(
JoinHandle
<
(
VecDeque
<
io
:
:
Result
<
DirEntry
>
>
std
:
:
fs
:
:
ReadDir
bool
)
>
)
}
impl
ReadDir
{
pub
async
fn
next_entry
(
&
mut
self
)
-
>
io
:
:
Result
<
Option
<
DirEntry
>
>
{
use
std
:
:
future
:
:
poll_fn
;
poll_fn
(
|
cx
|
self
.
poll_next_entry
(
cx
)
)
.
await
}
pub
fn
poll_next_entry
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
Option
<
DirEntry
>
>
>
{
loop
{
match
self
.
0
{
State
:
:
Idle
(
ref
mut
data
)
=
>
{
let
(
buf
_
ref
remain
)
=
data
.
as_mut
(
)
.
unwrap
(
)
;
if
let
Some
(
ent
)
=
buf
.
pop_front
(
)
{
return
Poll
:
:
Ready
(
ent
.
map
(
Some
)
)
;
}
else
if
!
remain
{
return
Poll
:
:
Ready
(
Ok
(
None
)
)
;
}
let
(
mut
buf
mut
std
_
)
=
data
.
take
(
)
.
unwrap
(
)
;
self
.
0
=
State
:
:
Pending
(
spawn_blocking
(
move
|
|
{
let
remain
=
ReadDir
:
:
next_chunk
(
&
mut
buf
&
mut
std
)
;
(
buf
std
remain
)
}
)
)
;
}
State
:
:
Pending
(
ref
mut
rx
)
=
>
{
self
.
0
=
State
:
:
Idle
(
Some
(
ready
!
(
Pin
:
:
new
(
rx
)
.
poll
(
cx
)
)
?
)
)
;
}
}
}
}
fn
next_chunk
(
buf
:
&
mut
VecDeque
<
io
:
:
Result
<
DirEntry
>
>
std
:
&
mut
std
:
:
fs
:
:
ReadDir
)
-
>
bool
{
for
_
in
0
.
.
CHUNK_SIZE
{
let
ret
=
match
std
.
next
(
)
{
Some
(
ret
)
=
>
ret
None
=
>
return
false
}
;
let
success
=
ret
.
is_ok
(
)
;
buf
.
push_back
(
ret
.
map
(
|
std
|
DirEntry
{
#
[
cfg
(
not
(
any
(
target_os
=
"
solaris
"
target_os
=
"
illumos
"
target_os
=
"
haiku
"
target_os
=
"
vxworks
"
target_os
=
"
aix
"
target_os
=
"
nto
"
target_os
=
"
vita
"
)
)
)
]
file_type
:
std
.
file_type
(
)
.
ok
(
)
std
:
Arc
:
:
new
(
std
)
}
)
)
;
if
!
success
{
break
;
}
}
true
}
}
feature
!
{
#
!
[
unix
]
use
std
:
:
os
:
:
unix
:
:
fs
:
:
DirEntryExt
;
impl
DirEntry
{
/
/
/
Returns
the
underlying
d_ino
field
in
the
contained
dirent
/
/
/
structure
.
/
/
/
/
/
/
#
Examples
/
/
/
/
/
/
/
/
/
use
tokio
:
:
fs
;
/
/
/
/
/
/
#
#
[
tokio
:
:
main
]
/
/
/
#
async
fn
main
(
)
-
>
std
:
:
io
:
:
Result
<
(
)
>
{
/
/
/
let
mut
entries
=
fs
:
:
read_dir
(
"
.
"
)
.
await
?
;
/
/
/
while
let
Some
(
entry
)
=
entries
.
next_entry
(
)
.
await
?
{
/
/
/
/
/
Here
entry
is
a
DirEntry
.
/
/
/
println
!
(
"
{
:
?
}
:
{
}
"
entry
.
file_name
(
)
entry
.
ino
(
)
)
;
/
/
/
}
/
/
/
#
Ok
(
(
)
)
/
/
/
#
}
/
/
/
pub
fn
ino
(
&
self
)
-
>
u64
{
self
.
as_inner
(
)
.
ino
(
)
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
DirEntry
{
#
[
cfg
(
not
(
any
(
target_os
=
"
solaris
"
target_os
=
"
illumos
"
target_os
=
"
haiku
"
target_os
=
"
vxworks
"
target_os
=
"
aix
"
target_os
=
"
nto
"
target_os
=
"
vita
"
)
)
)
]
file_type
:
Option
<
FileType
>
std
:
Arc
<
std
:
:
fs
:
:
DirEntry
>
}
impl
DirEntry
{
pub
fn
path
(
&
self
)
-
>
PathBuf
{
self
.
std
.
path
(
)
}
pub
fn
file_name
(
&
self
)
-
>
OsString
{
self
.
std
.
file_name
(
)
}
pub
async
fn
metadata
(
&
self
)
-
>
io
:
:
Result
<
Metadata
>
{
let
std
=
self
.
std
.
clone
(
)
;
asyncify
(
move
|
|
std
.
metadata
(
)
)
.
await
}
pub
async
fn
file_type
(
&
self
)
-
>
io
:
:
Result
<
FileType
>
{
#
[
cfg
(
not
(
any
(
target_os
=
"
solaris
"
target_os
=
"
illumos
"
target_os
=
"
haiku
"
target_os
=
"
vxworks
"
target_os
=
"
aix
"
target_os
=
"
nto
"
target_os
=
"
vita
"
)
)
)
]
if
let
Some
(
file_type
)
=
self
.
file_type
{
return
Ok
(
file_type
)
;
}
let
std
=
self
.
std
.
clone
(
)
;
asyncify
(
move
|
|
std
.
file_type
(
)
)
.
await
}
#
[
cfg
(
unix
)
]
pub
(
super
)
fn
as_inner
(
&
self
)
-
>
&
std
:
:
fs
:
:
DirEntry
{
&
self
.
std
}
}
