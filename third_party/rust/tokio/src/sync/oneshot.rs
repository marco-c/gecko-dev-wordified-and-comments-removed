#
!
[
cfg_attr
(
not
(
feature
=
"
sync
"
)
allow
(
dead_code
unreachable_pub
)
)
]
use
crate
:
:
loom
:
:
cell
:
:
UnsafeCell
;
use
crate
:
:
loom
:
:
sync
:
:
atomic
:
:
AtomicUsize
;
use
crate
:
:
loom
:
:
sync
:
:
Arc
;
use
std
:
:
fmt
;
use
std
:
:
future
:
:
Future
;
use
std
:
:
mem
:
:
MaybeUninit
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
sync
:
:
atomic
:
:
Ordering
:
:
{
self
AcqRel
Acquire
}
;
use
std
:
:
task
:
:
Poll
:
:
{
Pending
Ready
}
;
use
std
:
:
task
:
:
{
Context
Poll
Waker
}
;
#
[
derive
(
Debug
)
]
pub
struct
Sender
<
T
>
{
inner
:
Option
<
Arc
<
Inner
<
T
>
>
>
}
#
[
derive
(
Debug
)
]
pub
struct
Receiver
<
T
>
{
inner
:
Option
<
Arc
<
Inner
<
T
>
>
>
}
pub
mod
error
{
use
std
:
:
fmt
;
#
[
derive
(
Debug
Eq
PartialEq
)
]
pub
struct
RecvError
(
pub
(
super
)
(
)
)
;
#
[
derive
(
Debug
Eq
PartialEq
)
]
pub
enum
TryRecvError
{
Empty
Closed
}
impl
fmt
:
:
Display
for
RecvError
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
fmt
"
channel
closed
"
)
}
}
impl
std
:
:
error
:
:
Error
for
RecvError
{
}
impl
fmt
:
:
Display
for
TryRecvError
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
self
{
TryRecvError
:
:
Empty
=
>
write
!
(
fmt
"
channel
empty
"
)
TryRecvError
:
:
Closed
=
>
write
!
(
fmt
"
channel
closed
"
)
}
}
}
impl
std
:
:
error
:
:
Error
for
TryRecvError
{
}
}
use
self
:
:
error
:
:
*
;
struct
Inner
<
T
>
{
state
:
AtomicUsize
value
:
UnsafeCell
<
Option
<
T
>
>
tx_task
:
UnsafeCell
<
MaybeUninit
<
Waker
>
>
rx_task
:
UnsafeCell
<
MaybeUninit
<
Waker
>
>
}
#
[
derive
(
Clone
Copy
)
]
struct
State
(
usize
)
;
pub
fn
channel
<
T
>
(
)
-
>
(
Sender
<
T
>
Receiver
<
T
>
)
{
#
[
allow
(
deprecated
)
]
let
inner
=
Arc
:
:
new
(
Inner
{
state
:
AtomicUsize
:
:
new
(
State
:
:
new
(
)
.
as_usize
(
)
)
value
:
UnsafeCell
:
:
new
(
None
)
tx_task
:
UnsafeCell
:
:
new
(
MaybeUninit
:
:
uninit
(
)
)
rx_task
:
UnsafeCell
:
:
new
(
MaybeUninit
:
:
uninit
(
)
)
}
)
;
let
tx
=
Sender
{
inner
:
Some
(
inner
.
clone
(
)
)
}
;
let
rx
=
Receiver
{
inner
:
Some
(
inner
)
}
;
(
tx
rx
)
}
impl
<
T
>
Sender
<
T
>
{
pub
fn
send
(
mut
self
t
:
T
)
-
>
Result
<
(
)
T
>
{
let
inner
=
self
.
inner
.
take
(
)
.
unwrap
(
)
;
inner
.
value
.
with_mut
(
|
ptr
|
unsafe
{
*
ptr
=
Some
(
t
)
;
}
)
;
if
!
inner
.
complete
(
)
{
return
Err
(
inner
.
value
.
with_mut
(
|
ptr
|
unsafe
{
(
*
ptr
)
.
take
(
)
}
.
unwrap
(
)
)
)
;
}
Ok
(
(
)
)
}
#
[
doc
(
hidden
)
]
pub
fn
poll_closed
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
(
)
>
{
let
coop
=
ready
!
(
crate
:
:
coop
:
:
poll_proceed
(
cx
)
)
;
let
inner
=
self
.
inner
.
as_ref
(
)
.
unwrap
(
)
;
let
mut
state
=
State
:
:
load
(
&
inner
.
state
Acquire
)
;
if
state
.
is_closed
(
)
{
coop
.
made_progress
(
)
;
return
Poll
:
:
Ready
(
(
)
)
;
}
if
state
.
is_tx_task_set
(
)
{
let
will_notify
=
unsafe
{
inner
.
with_tx_task
(
|
w
|
w
.
will_wake
(
cx
.
waker
(
)
)
)
}
;
if
!
will_notify
{
state
=
State
:
:
unset_tx_task
(
&
inner
.
state
)
;
if
state
.
is_closed
(
)
{
State
:
:
set_tx_task
(
&
inner
.
state
)
;
coop
.
made_progress
(
)
;
return
Ready
(
(
)
)
;
}
else
{
unsafe
{
inner
.
drop_tx_task
(
)
}
;
}
}
}
if
!
state
.
is_tx_task_set
(
)
{
unsafe
{
inner
.
set_tx_task
(
cx
)
;
}
state
=
State
:
:
set_tx_task
(
&
inner
.
state
)
;
if
state
.
is_closed
(
)
{
coop
.
made_progress
(
)
;
return
Ready
(
(
)
)
;
}
}
Pending
}
pub
async
fn
closed
(
&
mut
self
)
{
use
crate
:
:
future
:
:
poll_fn
;
poll_fn
(
|
cx
|
self
.
poll_closed
(
cx
)
)
.
await
}
pub
fn
is_closed
(
&
self
)
-
>
bool
{
let
inner
=
self
.
inner
.
as_ref
(
)
.
unwrap
(
)
;
let
state
=
State
:
:
load
(
&
inner
.
state
Acquire
)
;
state
.
is_closed
(
)
}
}
impl
<
T
>
Drop
for
Sender
<
T
>
{
fn
drop
(
&
mut
self
)
{
if
let
Some
(
inner
)
=
self
.
inner
.
as_ref
(
)
{
inner
.
complete
(
)
;
}
}
}
impl
<
T
>
Receiver
<
T
>
{
pub
fn
close
(
&
mut
self
)
{
let
inner
=
self
.
inner
.
as_ref
(
)
.
unwrap
(
)
;
inner
.
close
(
)
;
}
pub
fn
try_recv
(
&
mut
self
)
-
>
Result
<
T
TryRecvError
>
{
let
result
=
if
let
Some
(
inner
)
=
self
.
inner
.
as_ref
(
)
{
let
state
=
State
:
:
load
(
&
inner
.
state
Acquire
)
;
if
state
.
is_complete
(
)
{
match
unsafe
{
inner
.
consume_value
(
)
}
{
Some
(
value
)
=
>
Ok
(
value
)
None
=
>
Err
(
TryRecvError
:
:
Closed
)
}
}
else
if
state
.
is_closed
(
)
{
Err
(
TryRecvError
:
:
Closed
)
}
else
{
return
Err
(
TryRecvError
:
:
Empty
)
;
}
}
else
{
panic
!
(
"
called
after
complete
"
)
;
}
;
self
.
inner
=
None
;
result
}
}
impl
<
T
>
Drop
for
Receiver
<
T
>
{
fn
drop
(
&
mut
self
)
{
if
let
Some
(
inner
)
=
self
.
inner
.
as_ref
(
)
{
inner
.
close
(
)
;
}
}
}
impl
<
T
>
Future
for
Receiver
<
T
>
{
type
Output
=
Result
<
T
RecvError
>
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
let
ret
=
if
let
Some
(
inner
)
=
self
.
as_ref
(
)
.
get_ref
(
)
.
inner
.
as_ref
(
)
{
ready
!
(
inner
.
poll_recv
(
cx
)
)
?
}
else
{
panic
!
(
"
called
after
complete
"
)
;
}
;
self
.
inner
=
None
;
Ready
(
Ok
(
ret
)
)
}
}
impl
<
T
>
Inner
<
T
>
{
fn
complete
(
&
self
)
-
>
bool
{
let
prev
=
State
:
:
set_complete
(
&
self
.
state
)
;
if
prev
.
is_closed
(
)
{
return
false
;
}
if
prev
.
is_rx_task_set
(
)
{
unsafe
{
self
.
with_rx_task
(
Waker
:
:
wake_by_ref
)
;
}
}
true
}
fn
poll_recv
(
&
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Result
<
T
RecvError
>
>
{
let
coop
=
ready
!
(
crate
:
:
coop
:
:
poll_proceed
(
cx
)
)
;
let
mut
state
=
State
:
:
load
(
&
self
.
state
Acquire
)
;
if
state
.
is_complete
(
)
{
coop
.
made_progress
(
)
;
match
unsafe
{
self
.
consume_value
(
)
}
{
Some
(
value
)
=
>
Ready
(
Ok
(
value
)
)
None
=
>
Ready
(
Err
(
RecvError
(
(
)
)
)
)
}
}
else
if
state
.
is_closed
(
)
{
coop
.
made_progress
(
)
;
Ready
(
Err
(
RecvError
(
(
)
)
)
)
}
else
{
if
state
.
is_rx_task_set
(
)
{
let
will_notify
=
unsafe
{
self
.
with_rx_task
(
|
w
|
w
.
will_wake
(
cx
.
waker
(
)
)
)
}
;
if
!
will_notify
{
state
=
State
:
:
unset_rx_task
(
&
self
.
state
)
;
if
state
.
is_complete
(
)
{
State
:
:
set_rx_task
(
&
self
.
state
)
;
coop
.
made_progress
(
)
;
return
match
unsafe
{
self
.
consume_value
(
)
}
{
Some
(
value
)
=
>
Ready
(
Ok
(
value
)
)
None
=
>
Ready
(
Err
(
RecvError
(
(
)
)
)
)
}
;
}
else
{
unsafe
{
self
.
drop_rx_task
(
)
}
;
}
}
}
if
!
state
.
is_rx_task_set
(
)
{
unsafe
{
self
.
set_rx_task
(
cx
)
;
}
state
=
State
:
:
set_rx_task
(
&
self
.
state
)
;
if
state
.
is_complete
(
)
{
coop
.
made_progress
(
)
;
match
unsafe
{
self
.
consume_value
(
)
}
{
Some
(
value
)
=
>
Ready
(
Ok
(
value
)
)
None
=
>
Ready
(
Err
(
RecvError
(
(
)
)
)
)
}
}
else
{
Pending
}
}
else
{
Pending
}
}
}
fn
close
(
&
self
)
{
let
prev
=
State
:
:
set_closed
(
&
self
.
state
)
;
if
prev
.
is_tx_task_set
(
)
&
&
!
prev
.
is_complete
(
)
{
unsafe
{
self
.
with_tx_task
(
Waker
:
:
wake_by_ref
)
;
}
}
}
unsafe
fn
consume_value
(
&
self
)
-
>
Option
<
T
>
{
self
.
value
.
with_mut
(
|
ptr
|
(
*
ptr
)
.
take
(
)
)
}
unsafe
fn
with_rx_task
<
F
R
>
(
&
self
f
:
F
)
-
>
R
where
F
:
FnOnce
(
&
Waker
)
-
>
R
{
self
.
rx_task
.
with
(
|
ptr
|
{
let
waker
:
*
const
Waker
=
(
&
*
ptr
)
.
as_ptr
(
)
;
f
(
&
*
waker
)
}
)
}
unsafe
fn
with_tx_task
<
F
R
>
(
&
self
f
:
F
)
-
>
R
where
F
:
FnOnce
(
&
Waker
)
-
>
R
{
self
.
tx_task
.
with
(
|
ptr
|
{
let
waker
:
*
const
Waker
=
(
&
*
ptr
)
.
as_ptr
(
)
;
f
(
&
*
waker
)
}
)
}
unsafe
fn
drop_rx_task
(
&
self
)
{
self
.
rx_task
.
with_mut
(
|
ptr
|
{
let
ptr
:
*
mut
Waker
=
(
&
mut
*
ptr
)
.
as_mut_ptr
(
)
;
ptr
.
drop_in_place
(
)
;
}
)
;
}
unsafe
fn
drop_tx_task
(
&
self
)
{
self
.
tx_task
.
with_mut
(
|
ptr
|
{
let
ptr
:
*
mut
Waker
=
(
&
mut
*
ptr
)
.
as_mut_ptr
(
)
;
ptr
.
drop_in_place
(
)
;
}
)
;
}
unsafe
fn
set_rx_task
(
&
self
cx
:
&
mut
Context
<
'
_
>
)
{
self
.
rx_task
.
with_mut
(
|
ptr
|
{
let
ptr
:
*
mut
Waker
=
(
&
mut
*
ptr
)
.
as_mut_ptr
(
)
;
ptr
.
write
(
cx
.
waker
(
)
.
clone
(
)
)
;
}
)
;
}
unsafe
fn
set_tx_task
(
&
self
cx
:
&
mut
Context
<
'
_
>
)
{
self
.
tx_task
.
with_mut
(
|
ptr
|
{
let
ptr
:
*
mut
Waker
=
(
&
mut
*
ptr
)
.
as_mut_ptr
(
)
;
ptr
.
write
(
cx
.
waker
(
)
.
clone
(
)
)
;
}
)
;
}
}
unsafe
impl
<
T
:
Send
>
Send
for
Inner
<
T
>
{
}
unsafe
impl
<
T
:
Send
>
Sync
for
Inner
<
T
>
{
}
impl
<
T
>
Drop
for
Inner
<
T
>
{
fn
drop
(
&
mut
self
)
{
let
state
=
State
(
self
.
state
.
with_mut
(
|
v
|
*
v
)
)
;
if
state
.
is_rx_task_set
(
)
{
unsafe
{
self
.
drop_rx_task
(
)
;
}
}
if
state
.
is_tx_task_set
(
)
{
unsafe
{
self
.
drop_tx_task
(
)
;
}
}
}
}
impl
<
T
:
fmt
:
:
Debug
>
fmt
:
:
Debug
for
Inner
<
T
>
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
use
std
:
:
sync
:
:
atomic
:
:
Ordering
:
:
Relaxed
;
fmt
.
debug_struct
(
"
Inner
"
)
.
field
(
"
state
"
&
State
:
:
load
(
&
self
.
state
Relaxed
)
)
.
finish
(
)
}
}
const
RX_TASK_SET
:
usize
=
0b00001
;
const
VALUE_SENT
:
usize
=
0b00010
;
const
CLOSED
:
usize
=
0b00100
;
const
TX_TASK_SET
:
usize
=
0b01000
;
impl
State
{
fn
new
(
)
-
>
State
{
State
(
0
)
}
fn
is_complete
(
self
)
-
>
bool
{
self
.
0
&
VALUE_SENT
=
=
VALUE_SENT
}
fn
set_complete
(
cell
:
&
AtomicUsize
)
-
>
State
{
let
val
=
cell
.
fetch_or
(
VALUE_SENT
AcqRel
)
;
State
(
val
)
}
fn
is_rx_task_set
(
self
)
-
>
bool
{
self
.
0
&
RX_TASK_SET
=
=
RX_TASK_SET
}
fn
set_rx_task
(
cell
:
&
AtomicUsize
)
-
>
State
{
let
val
=
cell
.
fetch_or
(
RX_TASK_SET
AcqRel
)
;
State
(
val
|
RX_TASK_SET
)
}
fn
unset_rx_task
(
cell
:
&
AtomicUsize
)
-
>
State
{
let
val
=
cell
.
fetch_and
(
!
RX_TASK_SET
AcqRel
)
;
State
(
val
&
!
RX_TASK_SET
)
}
fn
is_closed
(
self
)
-
>
bool
{
self
.
0
&
CLOSED
=
=
CLOSED
}
fn
set_closed
(
cell
:
&
AtomicUsize
)
-
>
State
{
let
val
=
cell
.
fetch_or
(
CLOSED
Acquire
)
;
State
(
val
)
}
fn
set_tx_task
(
cell
:
&
AtomicUsize
)
-
>
State
{
let
val
=
cell
.
fetch_or
(
TX_TASK_SET
AcqRel
)
;
State
(
val
|
TX_TASK_SET
)
}
fn
unset_tx_task
(
cell
:
&
AtomicUsize
)
-
>
State
{
let
val
=
cell
.
fetch_and
(
!
TX_TASK_SET
AcqRel
)
;
State
(
val
&
!
TX_TASK_SET
)
}
fn
is_tx_task_set
(
self
)
-
>
bool
{
self
.
0
&
TX_TASK_SET
=
=
TX_TASK_SET
}
fn
as_usize
(
self
)
-
>
usize
{
self
.
0
}
fn
load
(
cell
:
&
AtomicUsize
order
:
Ordering
)
-
>
State
{
let
val
=
cell
.
load
(
order
)
;
State
(
val
)
}
}
impl
fmt
:
:
Debug
for
State
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
.
debug_struct
(
"
State
"
)
.
field
(
"
is_complete
"
&
self
.
is_complete
(
)
)
.
field
(
"
is_closed
"
&
self
.
is_closed
(
)
)
.
field
(
"
is_rx_task_set
"
&
self
.
is_rx_task_set
(
)
)
.
field
(
"
is_tx_task_set
"
&
self
.
is_tx_task_set
(
)
)
.
finish
(
)
}
}
