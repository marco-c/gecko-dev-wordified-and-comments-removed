use
crate
:
:
coop
:
:
CoopFutureExt
;
use
crate
:
:
sync
:
:
batch_semaphore
as
semaphore
;
use
std
:
:
cell
:
:
UnsafeCell
;
use
std
:
:
error
:
:
Error
;
use
std
:
:
fmt
;
use
std
:
:
ops
:
:
{
Deref
DerefMut
}
;
#
[
derive
(
Debug
)
]
pub
struct
Mutex
<
T
>
{
c
:
UnsafeCell
<
T
>
s
:
semaphore
:
:
Semaphore
}
pub
struct
MutexGuard
<
'
a
T
>
{
lock
:
&
'
a
Mutex
<
T
>
}
unsafe
impl
<
T
>
Send
for
Mutex
<
T
>
where
T
:
Send
{
}
unsafe
impl
<
T
>
Sync
for
Mutex
<
T
>
where
T
:
Send
{
}
unsafe
impl
<
'
a
T
>
Sync
for
MutexGuard
<
'
a
T
>
where
T
:
Send
+
Sync
{
}
#
[
derive
(
Debug
)
]
pub
struct
TryLockError
(
(
)
)
;
impl
fmt
:
:
Display
for
TryLockError
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
fmt
"
{
}
"
"
operation
would
block
"
)
}
}
impl
Error
for
TryLockError
{
}
#
[
test
]
#
[
cfg
(
not
(
loom
)
)
]
fn
bounds
(
)
{
fn
check_send
<
T
:
Send
>
(
)
{
}
fn
check_unpin
<
T
:
Unpin
>
(
)
{
}
fn
check_send_sync_val
<
T
:
Send
+
Sync
>
(
_t
:
T
)
{
}
fn
check_send_sync
<
T
:
Send
+
Sync
>
(
)
{
}
check_send
:
:
<
MutexGuard
<
'
_
u32
>
>
(
)
;
check_unpin
:
:
<
Mutex
<
u32
>
>
(
)
;
check_send_sync
:
:
<
Mutex
<
u32
>
>
(
)
;
let
mutex
=
Mutex
:
:
new
(
1
)
;
check_send_sync_val
(
mutex
.
lock
(
)
)
;
}
impl
<
T
>
Mutex
<
T
>
{
pub
fn
new
(
t
:
T
)
-
>
Self
{
Self
{
c
:
UnsafeCell
:
:
new
(
t
)
s
:
semaphore
:
:
Semaphore
:
:
new
(
1
)
}
}
pub
async
fn
lock
(
&
self
)
-
>
MutexGuard
<
'
_
T
>
{
self
.
s
.
acquire
(
1
)
.
cooperate
(
)
.
await
.
unwrap_or_else
(
|
_
|
{
unreachable
!
(
)
}
)
;
MutexGuard
{
lock
:
self
}
}
pub
fn
try_lock
(
&
self
)
-
>
Result
<
MutexGuard
<
'
_
T
>
TryLockError
>
{
match
self
.
s
.
try_acquire
(
1
)
{
Ok
(
_
)
=
>
Ok
(
MutexGuard
{
lock
:
self
}
)
Err
(
_
)
=
>
Err
(
TryLockError
(
(
)
)
)
}
}
pub
fn
into_inner
(
self
)
-
>
T
{
self
.
c
.
into_inner
(
)
}
}
impl
<
'
a
T
>
Drop
for
MutexGuard
<
'
a
T
>
{
fn
drop
(
&
mut
self
)
{
self
.
lock
.
s
.
release
(
1
)
}
}
impl
<
T
>
From
<
T
>
for
Mutex
<
T
>
{
fn
from
(
s
:
T
)
-
>
Self
{
Self
:
:
new
(
s
)
}
}
impl
<
T
>
Default
for
Mutex
<
T
>
where
T
:
Default
{
fn
default
(
)
-
>
Self
{
Self
:
:
new
(
T
:
:
default
(
)
)
}
}
impl
<
'
a
T
>
Deref
for
MutexGuard
<
'
a
T
>
{
type
Target
=
T
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
unsafe
{
&
*
self
.
lock
.
c
.
get
(
)
}
}
}
impl
<
'
a
T
>
DerefMut
for
MutexGuard
<
'
a
T
>
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
Self
:
:
Target
{
unsafe
{
&
mut
*
self
.
lock
.
c
.
get
(
)
}
}
}
impl
<
'
a
T
:
fmt
:
:
Debug
>
fmt
:
:
Debug
for
MutexGuard
<
'
a
T
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
:
:
Debug
:
:
fmt
(
&
*
*
self
f
)
}
}
impl
<
'
a
T
:
fmt
:
:
Display
>
fmt
:
:
Display
for
MutexGuard
<
'
a
T
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
:
:
Display
:
:
fmt
(
&
*
*
self
f
)
}
}
