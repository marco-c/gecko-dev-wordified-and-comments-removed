use
crate
:
:
sync
:
:
rwlock
:
:
owned_read_guard
:
:
OwnedRwLockReadGuard
;
use
crate
:
:
sync
:
:
rwlock
:
:
owned_write_guard_mapped
:
:
OwnedRwLockMappedWriteGuard
;
use
crate
:
:
sync
:
:
rwlock
:
:
RwLock
;
use
std
:
:
fmt
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
mem
:
:
{
self
ManuallyDrop
}
;
use
std
:
:
ops
;
use
std
:
:
sync
:
:
Arc
;
pub
struct
OwnedRwLockWriteGuard
<
T
:
?
Sized
>
{
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
pub
(
super
)
resource_span
:
tracing
:
:
Span
pub
(
super
)
permits_acquired
:
u32
pub
(
super
)
lock
:
ManuallyDrop
<
Arc
<
RwLock
<
T
>
>
>
pub
(
super
)
data
:
*
mut
T
pub
(
super
)
_p
:
PhantomData
<
T
>
}
impl
<
T
:
?
Sized
>
OwnedRwLockWriteGuard
<
T
>
{
#
[
inline
]
pub
fn
map
<
F
U
:
?
Sized
>
(
mut
this
:
Self
f
:
F
)
-
>
OwnedRwLockMappedWriteGuard
<
T
U
>
where
F
:
FnOnce
(
&
mut
T
)
-
>
&
mut
U
{
let
data
=
f
(
&
mut
*
this
)
as
*
mut
U
;
let
lock
=
unsafe
{
ManuallyDrop
:
:
take
(
&
mut
this
.
lock
)
}
;
let
permits_acquired
=
this
.
permits_acquired
;
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
let
resource_span
=
this
.
resource_span
.
clone
(
)
;
mem
:
:
forget
(
this
)
;
OwnedRwLockMappedWriteGuard
{
permits_acquired
lock
:
ManuallyDrop
:
:
new
(
lock
)
data
_p
:
PhantomData
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
resource_span
}
}
#
[
inline
]
pub
fn
try_map
<
F
U
:
?
Sized
>
(
mut
this
:
Self
f
:
F
)
-
>
Result
<
OwnedRwLockMappedWriteGuard
<
T
U
>
Self
>
where
F
:
FnOnce
(
&
mut
T
)
-
>
Option
<
&
mut
U
>
{
let
data
=
match
f
(
&
mut
*
this
)
{
Some
(
data
)
=
>
data
as
*
mut
U
None
=
>
return
Err
(
this
)
}
;
let
permits_acquired
=
this
.
permits_acquired
;
let
lock
=
unsafe
{
ManuallyDrop
:
:
take
(
&
mut
this
.
lock
)
}
;
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
let
resource_span
=
this
.
resource_span
.
clone
(
)
;
mem
:
:
forget
(
this
)
;
Ok
(
OwnedRwLockMappedWriteGuard
{
permits_acquired
lock
:
ManuallyDrop
:
:
new
(
lock
)
data
_p
:
PhantomData
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
resource_span
}
)
}
#
[
inline
]
pub
fn
into_mapped
(
this
:
Self
)
-
>
OwnedRwLockMappedWriteGuard
<
T
>
{
Self
:
:
map
(
this
|
me
|
me
)
}
pub
fn
downgrade
(
mut
self
)
-
>
OwnedRwLockReadGuard
<
T
>
{
let
lock
=
unsafe
{
ManuallyDrop
:
:
take
(
&
mut
self
.
lock
)
}
;
let
data
=
self
.
data
;
let
to_release
=
(
self
.
permits_acquired
-
1
)
as
usize
;
lock
.
s
.
release
(
to_release
)
;
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
self
.
resource_span
.
in_scope
(
|
|
{
tracing
:
:
trace
!
(
target
:
"
runtime
:
:
resource
:
:
state_update
"
write_locked
=
false
write_locked
.
op
=
"
override
"
)
}
)
;
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
self
.
resource_span
.
in_scope
(
|
|
{
tracing
:
:
trace
!
(
target
:
"
runtime
:
:
resource
:
:
state_update
"
current_readers
=
1
current_readers
.
op
=
"
add
"
)
}
)
;
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
let
resource_span
=
self
.
resource_span
.
clone
(
)
;
mem
:
:
forget
(
self
)
;
OwnedRwLockReadGuard
{
lock
:
ManuallyDrop
:
:
new
(
lock
)
data
_p
:
PhantomData
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
resource_span
}
}
}
impl
<
T
:
?
Sized
>
ops
:
:
Deref
for
OwnedRwLockWriteGuard
<
T
>
{
type
Target
=
T
;
fn
deref
(
&
self
)
-
>
&
T
{
unsafe
{
&
*
self
.
data
}
}
}
impl
<
T
:
?
Sized
>
ops
:
:
DerefMut
for
OwnedRwLockWriteGuard
<
T
>
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
T
{
unsafe
{
&
mut
*
self
.
data
}
}
}
impl
<
T
:
?
Sized
>
fmt
:
:
Debug
for
OwnedRwLockWriteGuard
<
T
>
where
T
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
:
:
Debug
:
:
fmt
(
&
*
*
self
f
)
}
}
impl
<
T
:
?
Sized
>
fmt
:
:
Display
for
OwnedRwLockWriteGuard
<
T
>
where
T
:
fmt
:
:
Display
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
fmt
:
:
Display
:
:
fmt
(
&
*
*
self
f
)
}
}
impl
<
T
:
?
Sized
>
Drop
for
OwnedRwLockWriteGuard
<
T
>
{
fn
drop
(
&
mut
self
)
{
self
.
lock
.
s
.
release
(
self
.
permits_acquired
as
usize
)
;
#
[
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
]
self
.
resource_span
.
in_scope
(
|
|
{
tracing
:
:
trace
!
(
target
:
"
runtime
:
:
resource
:
:
state_update
"
write_locked
=
false
write_locked
.
op
=
"
override
"
)
}
)
;
unsafe
{
ManuallyDrop
:
:
drop
(
&
mut
self
.
lock
)
}
;
}
}
