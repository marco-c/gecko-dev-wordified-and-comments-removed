use
crate
:
:
future
:
:
poll_fn
;
use
crate
:
:
io
:
:
{
AsyncRead
AsyncWrite
Interest
PollEvented
ReadBuf
Ready
}
;
use
crate
:
:
net
:
:
unix
:
:
split
:
:
{
split
ReadHalf
WriteHalf
}
;
use
crate
:
:
net
:
:
unix
:
:
split_owned
:
:
{
split_owned
OwnedReadHalf
OwnedWriteHalf
}
;
use
crate
:
:
net
:
:
unix
:
:
ucred
:
:
{
self
UCred
}
;
use
crate
:
:
net
:
:
unix
:
:
SocketAddr
;
use
std
:
:
fmt
;
use
std
:
:
io
:
:
{
self
Read
Write
}
;
use
std
:
:
net
:
:
Shutdown
;
#
[
cfg
(
not
(
tokio_no_as_fd
)
)
]
use
std
:
:
os
:
:
unix
:
:
io
:
:
{
AsFd
BorrowedFd
}
;
use
std
:
:
os
:
:
unix
:
:
io
:
:
{
AsRawFd
FromRawFd
IntoRawFd
RawFd
}
;
use
std
:
:
os
:
:
unix
:
:
net
;
use
std
:
:
path
:
:
Path
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
cfg_io_util
!
{
use
bytes
:
:
BufMut
;
}
cfg_net_unix
!
{
/
/
/
A
structure
representing
a
connected
Unix
socket
.
/
/
/
/
/
/
This
socket
can
be
connected
directly
with
[
UnixStream
:
:
connect
]
or
accepted
/
/
/
from
a
listener
with
[
UnixListener
:
:
accept
]
.
Additionally
a
pair
of
/
/
/
anonymous
Unix
sockets
can
be
created
with
UnixStream
:
:
pair
.
#
[
cfg_attr
(
docsrs
doc
(
alias
=
"
uds
"
)
)
]
pub
struct
UnixStream
{
io
:
PollEvented
<
mio
:
:
net
:
:
UnixStream
>
}
}
impl
UnixStream
{
pub
async
fn
connect
<
P
>
(
path
:
P
)
-
>
io
:
:
Result
<
UnixStream
>
where
P
:
AsRef
<
Path
>
{
let
stream
=
mio
:
:
net
:
:
UnixStream
:
:
connect
(
path
)
?
;
let
stream
=
UnixStream
:
:
new
(
stream
)
?
;
poll_fn
(
|
cx
|
stream
.
io
.
registration
(
)
.
poll_write_ready
(
cx
)
)
.
await
?
;
if
let
Some
(
e
)
=
stream
.
io
.
take_error
(
)
?
{
return
Err
(
e
)
;
}
Ok
(
stream
)
}
pub
async
fn
ready
(
&
self
interest
:
Interest
)
-
>
io
:
:
Result
<
Ready
>
{
let
event
=
self
.
io
.
registration
(
)
.
readiness
(
interest
)
.
await
?
;
Ok
(
event
.
ready
)
}
pub
async
fn
readable
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
ready
(
Interest
:
:
READABLE
)
.
await
?
;
Ok
(
(
)
)
}
pub
fn
poll_read_ready
(
&
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
io
.
registration
(
)
.
poll_read_ready
(
cx
)
.
map_ok
(
|
_
|
(
)
)
}
pub
fn
try_read
(
&
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
READABLE
|
|
(
&
*
self
.
io
)
.
read
(
buf
)
)
}
pub
fn
try_read_vectored
(
&
self
bufs
:
&
mut
[
io
:
:
IoSliceMut
<
'
_
>
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
READABLE
|
|
(
&
*
self
.
io
)
.
read_vectored
(
bufs
)
)
}
cfg_io_util
!
{
/
/
/
Tries
to
read
data
from
the
stream
into
the
provided
buffer
advancing
the
/
/
/
buffer
'
s
internal
cursor
returning
how
many
bytes
were
read
.
/
/
/
/
/
/
Receives
any
pending
data
from
the
socket
but
does
not
wait
for
new
data
/
/
/
to
arrive
.
On
success
returns
the
number
of
bytes
read
.
Because
/
/
/
try_read_buf
(
)
is
non
-
blocking
the
buffer
does
not
have
to
be
stored
by
/
/
/
the
async
task
and
can
exist
entirely
on
the
stack
.
/
/
/
/
/
/
Usually
[
readable
(
)
]
or
[
ready
(
)
]
is
used
with
this
function
.
/
/
/
/
/
/
[
readable
(
)
]
:
UnixStream
:
:
readable
(
)
/
/
/
[
ready
(
)
]
:
UnixStream
:
:
ready
(
)
/
/
/
/
/
/
#
Return
/
/
/
/
/
/
If
data
is
successfully
read
Ok
(
n
)
is
returned
where
n
is
the
/
/
/
number
of
bytes
read
.
Ok
(
0
)
indicates
the
stream
'
s
read
half
is
closed
/
/
/
and
will
no
longer
yield
data
.
If
the
stream
is
not
ready
to
read
data
/
/
/
Err
(
io
:
:
ErrorKind
:
:
WouldBlock
)
is
returned
.
/
/
/
/
/
/
#
Examples
/
/
/
/
/
/
no_run
/
/
/
use
tokio
:
:
net
:
:
UnixStream
;
/
/
/
use
std
:
:
error
:
:
Error
;
/
/
/
use
std
:
:
io
;
/
/
/
/
/
/
#
[
tokio
:
:
main
]
/
/
/
async
fn
main
(
)
-
>
Result
<
(
)
Box
<
dyn
Error
>
>
{
/
/
/
/
/
Connect
to
a
peer
/
/
/
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
/
/
/
let
bind_path
=
dir
.
path
(
)
.
join
(
"
bind_path
"
)
;
/
/
/
let
stream
=
UnixStream
:
:
connect
(
bind_path
)
.
await
?
;
/
/
/
/
/
/
loop
{
/
/
/
/
/
Wait
for
the
socket
to
be
readable
/
/
/
stream
.
readable
(
)
.
await
?
;
/
/
/
/
/
/
let
mut
buf
=
Vec
:
:
with_capacity
(
4096
)
;
/
/
/
/
/
/
/
/
Try
to
read
data
this
may
still
fail
with
WouldBlock
/
/
/
/
/
if
the
readiness
event
is
a
false
positive
.
/
/
/
match
stream
.
try_read_buf
(
&
mut
buf
)
{
/
/
/
Ok
(
0
)
=
>
break
/
/
/
Ok
(
n
)
=
>
{
/
/
/
println
!
(
"
read
{
}
bytes
"
n
)
;
/
/
/
}
/
/
/
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
/
/
/
continue
;
/
/
/
}
/
/
/
Err
(
e
)
=
>
{
/
/
/
return
Err
(
e
.
into
(
)
)
;
/
/
/
}
/
/
/
}
/
/
/
}
/
/
/
/
/
/
Ok
(
(
)
)
/
/
/
}
/
/
/
pub
fn
try_read_buf
<
B
:
BufMut
>
(
&
self
buf
:
&
mut
B
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
READABLE
|
|
{
use
std
:
:
io
:
:
Read
;
let
dst
=
buf
.
chunk_mut
(
)
;
let
dst
=
unsafe
{
&
mut
*
(
dst
as
*
mut
_
as
*
mut
[
std
:
:
mem
:
:
MaybeUninit
<
u8
>
]
as
*
mut
[
u8
]
)
}
;
/
/
Safety
:
We
trust
UnixStream
:
:
read
to
have
filled
up
n
bytes
in
the
/
/
buffer
.
let
n
=
(
&
*
self
.
io
)
.
read
(
dst
)
?
;
unsafe
{
buf
.
advance_mut
(
n
)
;
}
Ok
(
n
)
}
)
}
}
pub
async
fn
writable
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
ready
(
Interest
:
:
WRITABLE
)
.
await
?
;
Ok
(
(
)
)
}
pub
fn
poll_write_ready
(
&
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
io
.
registration
(
)
.
poll_write_ready
(
cx
)
.
map_ok
(
|
_
|
(
)
)
}
pub
fn
try_write
(
&
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
WRITABLE
|
|
(
&
*
self
.
io
)
.
write
(
buf
)
)
}
pub
fn
try_write_vectored
(
&
self
buf
:
&
[
io
:
:
IoSlice
<
'
_
>
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
WRITABLE
|
|
(
&
*
self
.
io
)
.
write_vectored
(
buf
)
)
}
pub
fn
try_io
<
R
>
(
&
self
interest
:
Interest
f
:
impl
FnOnce
(
)
-
>
io
:
:
Result
<
R
>
)
-
>
io
:
:
Result
<
R
>
{
self
.
io
.
registration
(
)
.
try_io
(
interest
|
|
self
.
io
.
try_io
(
f
)
)
}
pub
async
fn
async_io
<
R
>
(
&
self
interest
:
Interest
mut
f
:
impl
FnMut
(
)
-
>
io
:
:
Result
<
R
>
)
-
>
io
:
:
Result
<
R
>
{
self
.
io
.
registration
(
)
.
async_io
(
interest
|
|
self
.
io
.
try_io
(
&
mut
f
)
)
.
await
}
#
[
track_caller
]
pub
fn
from_std
(
stream
:
net
:
:
UnixStream
)
-
>
io
:
:
Result
<
UnixStream
>
{
let
stream
=
mio
:
:
net
:
:
UnixStream
:
:
from_std
(
stream
)
;
let
io
=
PollEvented
:
:
new
(
stream
)
?
;
Ok
(
UnixStream
{
io
}
)
}
pub
fn
into_std
(
self
)
-
>
io
:
:
Result
<
std
:
:
os
:
:
unix
:
:
net
:
:
UnixStream
>
{
self
.
io
.
into_inner
(
)
.
map
(
|
io
|
io
.
into_raw_fd
(
)
)
.
map
(
|
raw_fd
|
unsafe
{
std
:
:
os
:
:
unix
:
:
net
:
:
UnixStream
:
:
from_raw_fd
(
raw_fd
)
}
)
}
pub
fn
pair
(
)
-
>
io
:
:
Result
<
(
UnixStream
UnixStream
)
>
{
let
(
a
b
)
=
mio
:
:
net
:
:
UnixStream
:
:
pair
(
)
?
;
let
a
=
UnixStream
:
:
new
(
a
)
?
;
let
b
=
UnixStream
:
:
new
(
b
)
?
;
Ok
(
(
a
b
)
)
}
pub
(
crate
)
fn
new
(
stream
:
mio
:
:
net
:
:
UnixStream
)
-
>
io
:
:
Result
<
UnixStream
>
{
let
io
=
PollEvented
:
:
new
(
stream
)
?
;
Ok
(
UnixStream
{
io
}
)
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
local_addr
(
)
.
map
(
SocketAddr
)
}
pub
fn
peer_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
peer_addr
(
)
.
map
(
SocketAddr
)
}
pub
fn
peer_cred
(
&
self
)
-
>
io
:
:
Result
<
UCred
>
{
ucred
:
:
get_peer_cred
(
self
)
}
pub
fn
take_error
(
&
self
)
-
>
io
:
:
Result
<
Option
<
io
:
:
Error
>
>
{
self
.
io
.
take_error
(
)
}
pub
(
super
)
fn
shutdown_std
(
&
self
how
:
Shutdown
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
shutdown
(
how
)
}
#
[
allow
(
clippy
:
:
needless_lifetimes
)
]
pub
fn
split
<
'
a
>
(
&
'
a
mut
self
)
-
>
(
ReadHalf
<
'
a
>
WriteHalf
<
'
a
>
)
{
split
(
self
)
}
pub
fn
into_split
(
self
)
-
>
(
OwnedReadHalf
OwnedWriteHalf
)
{
split_owned
(
self
)
}
}
impl
TryFrom
<
net
:
:
UnixStream
>
for
UnixStream
{
type
Error
=
io
:
:
Error
;
fn
try_from
(
stream
:
net
:
:
UnixStream
)
-
>
io
:
:
Result
<
Self
>
{
Self
:
:
from_std
(
stream
)
}
}
impl
AsyncRead
for
UnixStream
{
fn
poll_read
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
ReadBuf
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
poll_read_priv
(
cx
buf
)
}
}
impl
AsyncWrite
for
UnixStream
{
fn
poll_write
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
poll_write_priv
(
cx
buf
)
}
fn
poll_write_vectored
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
bufs
:
&
[
io
:
:
IoSlice
<
'
_
>
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
poll_write_vectored_priv
(
cx
bufs
)
}
fn
is_write_vectored
(
&
self
)
-
>
bool
{
true
}
fn
poll_flush
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
shutdown_std
(
std
:
:
net
:
:
Shutdown
:
:
Write
)
?
;
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
}
impl
UnixStream
{
pub
(
crate
)
fn
poll_read_priv
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
ReadBuf
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
unsafe
{
self
.
io
.
poll_read
(
cx
buf
)
}
}
pub
(
crate
)
fn
poll_write_priv
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
io
.
poll_write
(
cx
buf
)
}
pub
(
super
)
fn
poll_write_vectored_priv
(
&
self
cx
:
&
mut
Context
<
'
_
>
bufs
:
&
[
io
:
:
IoSlice
<
'
_
>
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
io
.
poll_write_vectored
(
cx
bufs
)
}
}
impl
fmt
:
:
Debug
for
UnixStream
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
io
.
fmt
(
f
)
}
}
impl
AsRawFd
for
UnixStream
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
io
.
as_raw_fd
(
)
}
}
#
[
cfg
(
not
(
tokio_no_as_fd
)
)
]
impl
AsFd
for
UnixStream
{
fn
as_fd
(
&
self
)
-
>
BorrowedFd
<
'
_
>
{
unsafe
{
BorrowedFd
:
:
borrow_raw
(
self
.
as_raw_fd
(
)
)
}
}
}
