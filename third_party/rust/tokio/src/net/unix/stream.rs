use
crate
:
:
future
:
:
poll_fn
;
use
crate
:
:
io
:
:
{
AsyncRead
AsyncWrite
PollEvented
}
;
use
crate
:
:
net
:
:
unix
:
:
split
:
:
{
split
ReadHalf
WriteHalf
}
;
use
crate
:
:
net
:
:
unix
:
:
split_owned
:
:
{
split_owned
OwnedReadHalf
OwnedWriteHalf
}
;
use
crate
:
:
net
:
:
unix
:
:
ucred
:
:
{
self
UCred
}
;
use
std
:
:
convert
:
:
TryFrom
;
use
std
:
:
fmt
;
use
std
:
:
io
:
:
{
self
Read
Write
}
;
use
std
:
:
mem
:
:
MaybeUninit
;
use
std
:
:
net
:
:
Shutdown
;
use
std
:
:
os
:
:
unix
:
:
io
:
:
{
AsRawFd
RawFd
}
;
use
std
:
:
os
:
:
unix
:
:
net
:
:
{
self
SocketAddr
}
;
use
std
:
:
path
:
:
Path
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
cfg_uds
!
{
/
/
/
A
structure
representing
a
connected
Unix
socket
.
/
/
/
/
/
/
This
socket
can
be
connected
directly
with
UnixStream
:
:
connect
or
accepted
/
/
/
from
a
listener
with
UnixListener
:
:
incoming
.
Additionally
a
pair
of
/
/
/
anonymous
Unix
sockets
can
be
created
with
UnixStream
:
:
pair
.
pub
struct
UnixStream
{
io
:
PollEvented
<
mio_uds
:
:
UnixStream
>
}
}
impl
UnixStream
{
pub
async
fn
connect
<
P
>
(
path
:
P
)
-
>
io
:
:
Result
<
UnixStream
>
where
P
:
AsRef
<
Path
>
{
let
stream
=
mio_uds
:
:
UnixStream
:
:
connect
(
path
)
?
;
let
stream
=
UnixStream
:
:
new
(
stream
)
?
;
poll_fn
(
|
cx
|
stream
.
io
.
poll_write_ready
(
cx
)
)
.
await
?
;
Ok
(
stream
)
}
pub
fn
from_std
(
stream
:
net
:
:
UnixStream
)
-
>
io
:
:
Result
<
UnixStream
>
{
let
stream
=
mio_uds
:
:
UnixStream
:
:
from_stream
(
stream
)
?
;
let
io
=
PollEvented
:
:
new
(
stream
)
?
;
Ok
(
UnixStream
{
io
}
)
}
pub
fn
pair
(
)
-
>
io
:
:
Result
<
(
UnixStream
UnixStream
)
>
{
let
(
a
b
)
=
mio_uds
:
:
UnixStream
:
:
pair
(
)
?
;
let
a
=
UnixStream
:
:
new
(
a
)
?
;
let
b
=
UnixStream
:
:
new
(
b
)
?
;
Ok
(
(
a
b
)
)
}
pub
(
crate
)
fn
new
(
stream
:
mio_uds
:
:
UnixStream
)
-
>
io
:
:
Result
<
UnixStream
>
{
let
io
=
PollEvented
:
:
new
(
stream
)
?
;
Ok
(
UnixStream
{
io
}
)
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
get_ref
(
)
.
local_addr
(
)
}
pub
fn
peer_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
get_ref
(
)
.
peer_addr
(
)
}
pub
fn
peer_cred
(
&
self
)
-
>
io
:
:
Result
<
UCred
>
{
ucred
:
:
get_peer_cred
(
self
)
}
pub
fn
take_error
(
&
self
)
-
>
io
:
:
Result
<
Option
<
io
:
:
Error
>
>
{
self
.
io
.
get_ref
(
)
.
take_error
(
)
}
pub
fn
shutdown
(
&
self
how
:
Shutdown
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
shutdown
(
how
)
}
#
[
allow
(
clippy
:
:
needless_lifetimes
)
]
pub
fn
split
<
'
a
>
(
&
'
a
mut
self
)
-
>
(
ReadHalf
<
'
a
>
WriteHalf
<
'
a
>
)
{
split
(
self
)
}
pub
fn
into_split
(
self
)
-
>
(
OwnedReadHalf
OwnedWriteHalf
)
{
split_owned
(
self
)
}
}
impl
TryFrom
<
UnixStream
>
for
mio_uds
:
:
UnixStream
{
type
Error
=
io
:
:
Error
;
fn
try_from
(
value
:
UnixStream
)
-
>
Result
<
Self
Self
:
:
Error
>
{
value
.
io
.
into_inner
(
)
}
}
impl
TryFrom
<
net
:
:
UnixStream
>
for
UnixStream
{
type
Error
=
io
:
:
Error
;
fn
try_from
(
stream
:
net
:
:
UnixStream
)
-
>
io
:
:
Result
<
Self
>
{
Self
:
:
from_std
(
stream
)
}
}
impl
AsyncRead
for
UnixStream
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
_
:
&
mut
[
MaybeUninit
<
u8
>
]
)
-
>
bool
{
false
}
fn
poll_read
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
poll_read_priv
(
cx
buf
)
}
}
impl
AsyncWrite
for
UnixStream
{
fn
poll_write
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
poll_write_priv
(
cx
buf
)
}
fn
poll_flush
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
shutdown
(
std
:
:
net
:
:
Shutdown
:
:
Write
)
?
;
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
}
impl
UnixStream
{
pub
(
crate
)
fn
poll_read_priv
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
ready
!
(
self
.
io
.
poll_read_ready
(
cx
mio
:
:
Ready
:
:
readable
(
)
)
)
?
;
match
self
.
io
.
get_ref
(
)
.
read
(
buf
)
{
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_read_ready
(
cx
mio
:
:
Ready
:
:
readable
(
)
)
?
;
Poll
:
:
Pending
}
x
=
>
Poll
:
:
Ready
(
x
)
}
}
pub
(
crate
)
fn
poll_write_priv
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
ready
!
(
self
.
io
.
poll_write_ready
(
cx
)
)
?
;
match
self
.
io
.
get_ref
(
)
.
write
(
buf
)
{
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_write_ready
(
cx
)
?
;
Poll
:
:
Pending
}
x
=
>
Poll
:
:
Ready
(
x
)
}
}
}
impl
fmt
:
:
Debug
for
UnixStream
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
io
.
get_ref
(
)
.
fmt
(
f
)
}
}
impl
AsRawFd
for
UnixStream
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
io
.
get_ref
(
)
.
as_raw_fd
(
)
}
}
