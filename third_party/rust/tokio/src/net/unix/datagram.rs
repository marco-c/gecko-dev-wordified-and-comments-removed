use
crate
:
:
future
:
:
poll_fn
;
use
crate
:
:
io
:
:
PollEvented
;
use
std
:
:
convert
:
:
TryFrom
;
use
std
:
:
fmt
;
use
std
:
:
io
;
use
std
:
:
net
:
:
Shutdown
;
use
std
:
:
os
:
:
unix
:
:
io
:
:
{
AsRawFd
RawFd
}
;
use
std
:
:
os
:
:
unix
:
:
net
:
:
{
self
SocketAddr
}
;
use
std
:
:
path
:
:
Path
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
cfg_uds
!
{
/
/
/
An
I
/
O
object
representing
a
Unix
datagram
socket
.
pub
struct
UnixDatagram
{
io
:
PollEvented
<
mio_uds
:
:
UnixDatagram
>
}
}
impl
UnixDatagram
{
pub
fn
bind
<
P
>
(
path
:
P
)
-
>
io
:
:
Result
<
UnixDatagram
>
where
P
:
AsRef
<
Path
>
{
let
socket
=
mio_uds
:
:
UnixDatagram
:
:
bind
(
path
)
?
;
UnixDatagram
:
:
new
(
socket
)
}
pub
fn
pair
(
)
-
>
io
:
:
Result
<
(
UnixDatagram
UnixDatagram
)
>
{
let
(
a
b
)
=
mio_uds
:
:
UnixDatagram
:
:
pair
(
)
?
;
let
a
=
UnixDatagram
:
:
new
(
a
)
?
;
let
b
=
UnixDatagram
:
:
new
(
b
)
?
;
Ok
(
(
a
b
)
)
}
pub
fn
from_std
(
datagram
:
net
:
:
UnixDatagram
)
-
>
io
:
:
Result
<
UnixDatagram
>
{
let
socket
=
mio_uds
:
:
UnixDatagram
:
:
from_datagram
(
datagram
)
?
;
let
io
=
PollEvented
:
:
new
(
socket
)
?
;
Ok
(
UnixDatagram
{
io
}
)
}
fn
new
(
socket
:
mio_uds
:
:
UnixDatagram
)
-
>
io
:
:
Result
<
UnixDatagram
>
{
let
io
=
PollEvented
:
:
new
(
socket
)
?
;
Ok
(
UnixDatagram
{
io
}
)
}
pub
fn
unbound
(
)
-
>
io
:
:
Result
<
UnixDatagram
>
{
let
socket
=
mio_uds
:
:
UnixDatagram
:
:
unbound
(
)
?
;
UnixDatagram
:
:
new
(
socket
)
}
pub
fn
connect
<
P
:
AsRef
<
Path
>
>
(
&
self
path
:
P
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
connect
(
path
)
}
pub
async
fn
send
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
poll_fn
(
|
cx
|
self
.
poll_send_priv
(
cx
buf
)
)
.
await
}
pub
(
crate
)
fn
poll_send_priv
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
ready
!
(
self
.
io
.
poll_write_ready
(
cx
)
)
?
;
match
self
.
io
.
get_ref
(
)
.
send
(
buf
)
{
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_write_ready
(
cx
)
?
;
Poll
:
:
Pending
}
x
=
>
Poll
:
:
Ready
(
x
)
}
}
pub
async
fn
recv
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
poll_fn
(
|
cx
|
self
.
poll_recv_priv
(
cx
buf
)
)
.
await
}
pub
(
crate
)
fn
poll_recv_priv
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
ready
!
(
self
.
io
.
poll_read_ready
(
cx
mio
:
:
Ready
:
:
readable
(
)
)
)
?
;
match
self
.
io
.
get_ref
(
)
.
recv
(
buf
)
{
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_read_ready
(
cx
mio
:
:
Ready
:
:
readable
(
)
)
?
;
Poll
:
:
Pending
}
x
=
>
Poll
:
:
Ready
(
x
)
}
}
pub
async
fn
send_to
<
P
>
(
&
mut
self
buf
:
&
[
u8
]
target
:
P
)
-
>
io
:
:
Result
<
usize
>
where
P
:
AsRef
<
Path
>
+
Unpin
{
poll_fn
(
|
cx
|
self
.
poll_send_to_priv
(
cx
buf
target
.
as_ref
(
)
)
)
.
await
}
pub
(
crate
)
fn
poll_send_to_priv
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
target
:
&
Path
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
ready
!
(
self
.
io
.
poll_write_ready
(
cx
)
)
?
;
match
self
.
io
.
get_ref
(
)
.
send_to
(
buf
target
)
{
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_write_ready
(
cx
)
?
;
Poll
:
:
Pending
}
x
=
>
Poll
:
:
Ready
(
x
)
}
}
pub
async
fn
recv_from
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
(
usize
SocketAddr
)
>
{
poll_fn
(
|
cx
|
self
.
poll_recv_from_priv
(
cx
buf
)
)
.
await
}
pub
(
crate
)
fn
poll_recv_from_priv
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
Result
<
(
usize
SocketAddr
)
io
:
:
Error
>
>
{
ready
!
(
self
.
io
.
poll_read_ready
(
cx
mio
:
:
Ready
:
:
readable
(
)
)
)
?
;
match
self
.
io
.
get_ref
(
)
.
recv_from
(
buf
)
{
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_read_ready
(
cx
mio
:
:
Ready
:
:
readable
(
)
)
?
;
Poll
:
:
Pending
}
x
=
>
Poll
:
:
Ready
(
x
)
}
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
get_ref
(
)
.
local_addr
(
)
}
pub
fn
peer_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
get_ref
(
)
.
peer_addr
(
)
}
pub
fn
take_error
(
&
self
)
-
>
io
:
:
Result
<
Option
<
io
:
:
Error
>
>
{
self
.
io
.
get_ref
(
)
.
take_error
(
)
}
pub
fn
shutdown
(
&
self
how
:
Shutdown
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
shutdown
(
how
)
}
}
impl
TryFrom
<
UnixDatagram
>
for
mio_uds
:
:
UnixDatagram
{
type
Error
=
io
:
:
Error
;
fn
try_from
(
value
:
UnixDatagram
)
-
>
Result
<
Self
Self
:
:
Error
>
{
value
.
io
.
into_inner
(
)
}
}
impl
TryFrom
<
net
:
:
UnixDatagram
>
for
UnixDatagram
{
type
Error
=
io
:
:
Error
;
fn
try_from
(
stream
:
net
:
:
UnixDatagram
)
-
>
Result
<
Self
Self
:
:
Error
>
{
Self
:
:
from_std
(
stream
)
}
}
impl
fmt
:
:
Debug
for
UnixDatagram
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
io
.
get_ref
(
)
.
fmt
(
f
)
}
}
impl
AsRawFd
for
UnixDatagram
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
io
.
get_ref
(
)
.
as_raw_fd
(
)
}
}
