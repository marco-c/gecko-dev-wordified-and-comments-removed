use
crate
:
:
future
:
:
poll_fn
;
use
crate
:
:
io
:
:
PollEvented
;
use
crate
:
:
net
:
:
udp
:
:
split
:
:
{
split
RecvHalf
SendHalf
}
;
use
crate
:
:
net
:
:
ToSocketAddrs
;
use
std
:
:
convert
:
:
TryFrom
;
use
std
:
:
fmt
;
use
std
:
:
io
;
use
std
:
:
net
:
:
{
self
Ipv4Addr
Ipv6Addr
SocketAddr
}
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
cfg_udp
!
{
/
/
/
A
UDP
socket
pub
struct
UdpSocket
{
io
:
PollEvented
<
mio
:
:
net
:
:
UdpSocket
>
}
}
impl
UdpSocket
{
pub
async
fn
bind
<
A
:
ToSocketAddrs
>
(
addr
:
A
)
-
>
io
:
:
Result
<
UdpSocket
>
{
let
addrs
=
addr
.
to_socket_addrs
(
)
.
await
?
;
let
mut
last_err
=
None
;
for
addr
in
addrs
{
match
UdpSocket
:
:
bind_addr
(
addr
)
{
Ok
(
socket
)
=
>
return
Ok
(
socket
)
Err
(
e
)
=
>
last_err
=
Some
(
e
)
}
}
Err
(
last_err
.
unwrap_or_else
(
|
|
{
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
InvalidInput
"
could
not
resolve
to
any
address
"
)
}
)
)
}
fn
bind_addr
(
addr
:
SocketAddr
)
-
>
io
:
:
Result
<
UdpSocket
>
{
let
sys
=
mio
:
:
net
:
:
UdpSocket
:
:
bind
(
&
addr
)
?
;
UdpSocket
:
:
new
(
sys
)
}
fn
new
(
socket
:
mio
:
:
net
:
:
UdpSocket
)
-
>
io
:
:
Result
<
UdpSocket
>
{
let
io
=
PollEvented
:
:
new
(
socket
)
?
;
Ok
(
UdpSocket
{
io
}
)
}
pub
fn
from_std
(
socket
:
net
:
:
UdpSocket
)
-
>
io
:
:
Result
<
UdpSocket
>
{
let
io
=
mio
:
:
net
:
:
UdpSocket
:
:
from_socket
(
socket
)
?
;
let
io
=
PollEvented
:
:
new
(
io
)
?
;
Ok
(
UdpSocket
{
io
}
)
}
pub
fn
split
(
self
)
-
>
(
RecvHalf
SendHalf
)
{
split
(
self
)
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
get_ref
(
)
.
local_addr
(
)
}
pub
async
fn
connect
<
A
:
ToSocketAddrs
>
(
&
self
addr
:
A
)
-
>
io
:
:
Result
<
(
)
>
{
let
addrs
=
addr
.
to_socket_addrs
(
)
.
await
?
;
let
mut
last_err
=
None
;
for
addr
in
addrs
{
match
self
.
io
.
get_ref
(
)
.
connect
(
addr
)
{
Ok
(
_
)
=
>
return
Ok
(
(
)
)
Err
(
e
)
=
>
last_err
=
Some
(
e
)
}
}
Err
(
last_err
.
unwrap_or_else
(
|
|
{
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
InvalidInput
"
could
not
resolve
to
any
address
"
)
}
)
)
}
pub
async
fn
send
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
poll_fn
(
|
cx
|
self
.
poll_send
(
cx
buf
)
)
.
await
}
pub
fn
try_send
(
&
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
get_ref
(
)
.
send
(
buf
)
}
#
[
doc
(
hidden
)
]
pub
fn
poll_send
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
ready
!
(
self
.
io
.
poll_write_ready
(
cx
)
)
?
;
match
self
.
io
.
get_ref
(
)
.
send
(
buf
)
{
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_write_ready
(
cx
)
?
;
Poll
:
:
Pending
}
x
=
>
Poll
:
:
Ready
(
x
)
}
}
pub
async
fn
recv
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
poll_fn
(
|
cx
|
self
.
poll_recv
(
cx
buf
)
)
.
await
}
#
[
doc
(
hidden
)
]
pub
fn
poll_recv
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
ready
!
(
self
.
io
.
poll_read_ready
(
cx
mio
:
:
Ready
:
:
readable
(
)
)
)
?
;
match
self
.
io
.
get_ref
(
)
.
recv
(
buf
)
{
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_read_ready
(
cx
mio
:
:
Ready
:
:
readable
(
)
)
?
;
Poll
:
:
Pending
}
x
=
>
Poll
:
:
Ready
(
x
)
}
}
pub
async
fn
send_to
<
A
:
ToSocketAddrs
>
(
&
mut
self
buf
:
&
[
u8
]
target
:
A
)
-
>
io
:
:
Result
<
usize
>
{
let
mut
addrs
=
target
.
to_socket_addrs
(
)
.
await
?
;
match
addrs
.
next
(
)
{
Some
(
target
)
=
>
poll_fn
(
|
cx
|
self
.
poll_send_to
(
cx
buf
&
target
)
)
.
await
None
=
>
Err
(
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
InvalidInput
"
no
addresses
to
send
data
to
"
)
)
}
}
pub
fn
try_send_to
(
&
self
buf
:
&
[
u8
]
target
:
SocketAddr
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
get_ref
(
)
.
send_to
(
buf
&
target
)
}
#
[
doc
(
hidden
)
]
pub
fn
poll_send_to
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
target
:
&
SocketAddr
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
ready
!
(
self
.
io
.
poll_write_ready
(
cx
)
)
?
;
match
self
.
io
.
get_ref
(
)
.
send_to
(
buf
target
)
{
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_write_ready
(
cx
)
?
;
Poll
:
:
Pending
}
x
=
>
Poll
:
:
Ready
(
x
)
}
}
pub
async
fn
recv_from
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
(
usize
SocketAddr
)
>
{
poll_fn
(
|
cx
|
self
.
poll_recv_from
(
cx
buf
)
)
.
await
}
#
[
doc
(
hidden
)
]
pub
fn
poll_recv_from
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
Result
<
(
usize
SocketAddr
)
io
:
:
Error
>
>
{
ready
!
(
self
.
io
.
poll_read_ready
(
cx
mio
:
:
Ready
:
:
readable
(
)
)
)
?
;
match
self
.
io
.
get_ref
(
)
.
recv_from
(
buf
)
{
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_read_ready
(
cx
mio
:
:
Ready
:
:
readable
(
)
)
?
;
Poll
:
:
Pending
}
x
=
>
Poll
:
:
Ready
(
x
)
}
}
pub
fn
broadcast
(
&
self
)
-
>
io
:
:
Result
<
bool
>
{
self
.
io
.
get_ref
(
)
.
broadcast
(
)
}
pub
fn
set_broadcast
(
&
self
on
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
set_broadcast
(
on
)
}
pub
fn
multicast_loop_v4
(
&
self
)
-
>
io
:
:
Result
<
bool
>
{
self
.
io
.
get_ref
(
)
.
multicast_loop_v4
(
)
}
pub
fn
set_multicast_loop_v4
(
&
self
on
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
set_multicast_loop_v4
(
on
)
}
pub
fn
multicast_ttl_v4
(
&
self
)
-
>
io
:
:
Result
<
u32
>
{
self
.
io
.
get_ref
(
)
.
multicast_ttl_v4
(
)
}
pub
fn
set_multicast_ttl_v4
(
&
self
ttl
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
set_multicast_ttl_v4
(
ttl
)
}
pub
fn
multicast_loop_v6
(
&
self
)
-
>
io
:
:
Result
<
bool
>
{
self
.
io
.
get_ref
(
)
.
multicast_loop_v6
(
)
}
pub
fn
set_multicast_loop_v6
(
&
self
on
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
set_multicast_loop_v6
(
on
)
}
pub
fn
ttl
(
&
self
)
-
>
io
:
:
Result
<
u32
>
{
self
.
io
.
get_ref
(
)
.
ttl
(
)
}
pub
fn
set_ttl
(
&
self
ttl
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
set_ttl
(
ttl
)
}
pub
fn
join_multicast_v4
(
&
self
multiaddr
:
Ipv4Addr
interface
:
Ipv4Addr
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
join_multicast_v4
(
&
multiaddr
&
interface
)
}
pub
fn
join_multicast_v6
(
&
self
multiaddr
:
&
Ipv6Addr
interface
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
join_multicast_v6
(
multiaddr
interface
)
}
pub
fn
leave_multicast_v4
(
&
self
multiaddr
:
Ipv4Addr
interface
:
Ipv4Addr
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
leave_multicast_v4
(
&
multiaddr
&
interface
)
}
pub
fn
leave_multicast_v6
(
&
self
multiaddr
:
&
Ipv6Addr
interface
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
leave_multicast_v6
(
multiaddr
interface
)
}
}
impl
TryFrom
<
UdpSocket
>
for
mio
:
:
net
:
:
UdpSocket
{
type
Error
=
io
:
:
Error
;
fn
try_from
(
value
:
UdpSocket
)
-
>
Result
<
Self
Self
:
:
Error
>
{
value
.
io
.
into_inner
(
)
}
}
impl
TryFrom
<
net
:
:
UdpSocket
>
for
UdpSocket
{
type
Error
=
io
:
:
Error
;
fn
try_from
(
stream
:
net
:
:
UdpSocket
)
-
>
Result
<
Self
Self
:
:
Error
>
{
Self
:
:
from_std
(
stream
)
}
}
impl
fmt
:
:
Debug
for
UdpSocket
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
io
.
get_ref
(
)
.
fmt
(
f
)
}
}
#
[
cfg
(
all
(
unix
)
)
]
mod
sys
{
use
super
:
:
UdpSocket
;
use
std
:
:
os
:
:
unix
:
:
prelude
:
:
*
;
impl
AsRawFd
for
UdpSocket
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
io
.
get_ref
(
)
.
as_raw_fd
(
)
}
}
}
#
[
cfg
(
windows
)
]
mod
sys
{
}
