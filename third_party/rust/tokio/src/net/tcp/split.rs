use
crate
:
:
future
:
:
poll_fn
;
use
crate
:
:
io
:
:
{
AsyncRead
AsyncWrite
Interest
ReadBuf
Ready
}
;
use
crate
:
:
net
:
:
TcpStream
;
use
std
:
:
io
;
use
std
:
:
net
:
:
{
Shutdown
SocketAddr
}
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
cfg_io_util
!
{
use
bytes
:
:
BufMut
;
}
#
[
derive
(
Debug
)
]
pub
struct
ReadHalf
<
'
a
>
(
&
'
a
TcpStream
)
;
#
[
derive
(
Debug
)
]
pub
struct
WriteHalf
<
'
a
>
(
&
'
a
TcpStream
)
;
pub
(
crate
)
fn
split
(
stream
:
&
mut
TcpStream
)
-
>
(
ReadHalf
<
'
_
>
WriteHalf
<
'
_
>
)
{
(
ReadHalf
(
&
*
stream
)
WriteHalf
(
&
*
stream
)
)
}
impl
ReadHalf
<
'
_
>
{
pub
fn
poll_peek
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
ReadBuf
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
0
.
poll_peek
(
cx
buf
)
}
pub
async
fn
peek
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
let
mut
buf
=
ReadBuf
:
:
new
(
buf
)
;
poll_fn
(
|
cx
|
self
.
poll_peek
(
cx
&
mut
buf
)
)
.
await
}
pub
async
fn
ready
(
&
self
interest
:
Interest
)
-
>
io
:
:
Result
<
Ready
>
{
self
.
0
.
ready
(
interest
)
.
await
}
pub
async
fn
readable
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
0
.
readable
(
)
.
await
}
pub
fn
try_read
(
&
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
0
.
try_read
(
buf
)
}
pub
fn
try_read_vectored
(
&
self
bufs
:
&
mut
[
io
:
:
IoSliceMut
<
'
_
>
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
0
.
try_read_vectored
(
bufs
)
}
cfg_io_util
!
{
/
/
/
Tries
to
read
data
from
the
stream
into
the
provided
buffer
advancing
the
/
/
/
buffer
'
s
internal
cursor
returning
how
many
bytes
were
read
.
/
/
/
/
/
/
Receives
any
pending
data
from
the
socket
but
does
not
wait
for
new
data
/
/
/
to
arrive
.
On
success
returns
the
number
of
bytes
read
.
Because
/
/
/
try_read_buf
(
)
is
non
-
blocking
the
buffer
does
not
have
to
be
stored
by
/
/
/
the
async
task
and
can
exist
entirely
on
the
stack
.
/
/
/
/
/
/
Usually
[
readable
(
)
]
or
[
ready
(
)
]
is
used
with
this
function
.
/
/
/
/
/
/
[
readable
(
)
]
:
Self
:
:
readable
(
)
/
/
/
[
ready
(
)
]
:
Self
:
:
ready
(
)
/
/
/
/
/
/
#
Return
/
/
/
/
/
/
If
data
is
successfully
read
Ok
(
n
)
is
returned
where
n
is
the
/
/
/
number
of
bytes
read
.
Ok
(
0
)
indicates
the
stream
'
s
read
half
is
closed
/
/
/
and
will
no
longer
yield
data
.
If
the
stream
is
not
ready
to
read
data
/
/
/
Err
(
io
:
:
ErrorKind
:
:
WouldBlock
)
is
returned
.
pub
fn
try_read_buf
<
B
:
BufMut
>
(
&
self
buf
:
&
mut
B
)
-
>
io
:
:
Result
<
usize
>
{
self
.
0
.
try_read_buf
(
buf
)
}
}
pub
fn
peer_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
0
.
peer_addr
(
)
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
0
.
local_addr
(
)
}
}
impl
WriteHalf
<
'
_
>
{
pub
async
fn
ready
(
&
self
interest
:
Interest
)
-
>
io
:
:
Result
<
Ready
>
{
self
.
0
.
ready
(
interest
)
.
await
}
pub
async
fn
writable
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
0
.
writable
(
)
.
await
}
pub
fn
try_write
(
&
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
0
.
try_write
(
buf
)
}
pub
fn
try_write_vectored
(
&
self
bufs
:
&
[
io
:
:
IoSlice
<
'
_
>
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
0
.
try_write_vectored
(
bufs
)
}
pub
fn
peer_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
0
.
peer_addr
(
)
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
0
.
local_addr
(
)
}
}
impl
AsyncRead
for
ReadHalf
<
'
_
>
{
fn
poll_read
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
ReadBuf
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
0
.
poll_read_priv
(
cx
buf
)
}
}
impl
AsyncWrite
for
WriteHalf
<
'
_
>
{
fn
poll_write
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
0
.
poll_write_priv
(
cx
buf
)
}
fn
poll_write_vectored
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
bufs
:
&
[
io
:
:
IoSlice
<
'
_
>
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
0
.
poll_write_vectored_priv
(
cx
bufs
)
}
fn
is_write_vectored
(
&
self
)
-
>
bool
{
self
.
0
.
is_write_vectored
(
)
}
#
[
inline
]
fn
poll_flush
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
0
.
shutdown_std
(
Shutdown
:
:
Write
)
.
into
(
)
}
}
impl
AsRef
<
TcpStream
>
for
ReadHalf
<
'
_
>
{
fn
as_ref
(
&
self
)
-
>
&
TcpStream
{
self
.
0
}
}
impl
AsRef
<
TcpStream
>
for
WriteHalf
<
'
_
>
{
fn
as_ref
(
&
self
)
-
>
&
TcpStream
{
self
.
0
}
}
