use
crate
:
:
future
:
:
poll_fn
;
use
crate
:
:
io
:
:
PollEvented
;
use
crate
:
:
net
:
:
tcp
:
:
{
Incoming
TcpStream
}
;
use
crate
:
:
net
:
:
ToSocketAddrs
;
use
std
:
:
convert
:
:
TryFrom
;
use
std
:
:
fmt
;
use
std
:
:
io
;
use
std
:
:
net
:
:
{
self
SocketAddr
}
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
cfg_tcp
!
{
/
/
/
A
TCP
socket
server
listening
for
connections
.
/
/
/
/
/
/
You
can
accept
a
new
connection
by
using
the
[
accept
]
(
TcpListener
:
:
accept
)
method
.
Alternatively
TcpListener
/
/
/
implements
the
[
Stream
]
(
crate
:
:
stream
:
:
Stream
)
trait
which
allows
you
to
use
the
listener
in
places
that
want
a
/
/
/
stream
.
The
stream
will
never
return
None
and
will
also
not
yield
the
peer
'
s
SocketAddr
structure
.
Iterating
over
/
/
/
it
is
equivalent
to
calling
accept
in
a
loop
.
/
/
/
/
/
/
#
Errors
/
/
/
/
/
/
Note
that
accepting
a
connection
can
lead
to
various
errors
and
not
all
/
/
/
of
them
are
necessarily
fatal
for
example
having
too
many
open
file
/
/
/
descriptors
or
the
other
side
closing
the
connection
while
it
waits
in
/
/
/
an
accept
queue
.
These
would
terminate
the
stream
if
not
handled
in
any
/
/
/
way
.
/
/
/
/
/
/
#
Examples
/
/
/
/
/
/
Using
accept
:
/
/
/
no_run
/
/
/
use
tokio
:
:
net
:
:
TcpListener
;
/
/
/
/
/
/
use
std
:
:
io
;
/
/
/
/
/
/
async
fn
process_socket
<
T
>
(
socket
:
T
)
{
/
/
/
#
drop
(
socket
)
;
/
/
/
/
/
do
work
with
socket
here
/
/
/
}
/
/
/
/
/
/
#
[
tokio
:
:
main
]
/
/
/
async
fn
main
(
)
-
>
io
:
:
Result
<
(
)
>
{
/
/
/
let
mut
listener
=
TcpListener
:
:
bind
(
"
127
.
0
.
0
.
1
:
8080
"
)
.
await
?
;
/
/
/
/
/
/
loop
{
/
/
/
let
(
socket
_
)
=
listener
.
accept
(
)
.
await
?
;
/
/
/
process_socket
(
socket
)
.
await
;
/
/
/
}
/
/
/
}
/
/
/
/
/
/
/
/
/
Using
impl
Stream
:
/
/
/
no_run
/
/
/
use
tokio
:
:
{
net
:
:
TcpListener
stream
:
:
StreamExt
}
;
/
/
/
/
/
/
#
[
tokio
:
:
main
]
/
/
/
async
fn
main
(
)
{
/
/
/
let
mut
listener
=
TcpListener
:
:
bind
(
"
127
.
0
.
0
.
1
:
8080
"
)
.
await
.
unwrap
(
)
;
/
/
/
while
let
Some
(
stream
)
=
listener
.
next
(
)
.
await
{
/
/
/
match
stream
{
/
/
/
Ok
(
stream
)
=
>
{
/
/
/
println
!
(
"
new
client
!
"
)
;
/
/
/
}
/
/
/
Err
(
e
)
=
>
{
/
*
connection
failed
*
/
}
/
/
/
}
/
/
/
}
/
/
/
}
/
/
/
pub
struct
TcpListener
{
io
:
PollEvented
<
mio
:
:
net
:
:
TcpListener
>
}
}
impl
TcpListener
{
pub
async
fn
bind
<
A
:
ToSocketAddrs
>
(
addr
:
A
)
-
>
io
:
:
Result
<
TcpListener
>
{
let
addrs
=
addr
.
to_socket_addrs
(
)
.
await
?
;
let
mut
last_err
=
None
;
for
addr
in
addrs
{
match
TcpListener
:
:
bind_addr
(
addr
)
{
Ok
(
listener
)
=
>
return
Ok
(
listener
)
Err
(
e
)
=
>
last_err
=
Some
(
e
)
}
}
Err
(
last_err
.
unwrap_or_else
(
|
|
{
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
InvalidInput
"
could
not
resolve
to
any
address
"
)
}
)
)
}
fn
bind_addr
(
addr
:
SocketAddr
)
-
>
io
:
:
Result
<
TcpListener
>
{
let
listener
=
mio
:
:
net
:
:
TcpListener
:
:
bind
(
&
addr
)
?
;
TcpListener
:
:
new
(
listener
)
}
pub
async
fn
accept
(
&
mut
self
)
-
>
io
:
:
Result
<
(
TcpStream
SocketAddr
)
>
{
poll_fn
(
|
cx
|
self
.
poll_accept
(
cx
)
)
.
await
}
pub
fn
poll_accept
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
TcpStream
SocketAddr
)
>
>
{
let
(
io
addr
)
=
ready
!
(
self
.
poll_accept_std
(
cx
)
)
?
;
let
io
=
mio
:
:
net
:
:
TcpStream
:
:
from_stream
(
io
)
?
;
let
io
=
TcpStream
:
:
new
(
io
)
?
;
Poll
:
:
Ready
(
Ok
(
(
io
addr
)
)
)
}
fn
poll_accept_std
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
net
:
:
TcpStream
SocketAddr
)
>
>
{
ready
!
(
self
.
io
.
poll_read_ready
(
cx
mio
:
:
Ready
:
:
readable
(
)
)
)
?
;
match
self
.
io
.
get_ref
(
)
.
accept_std
(
)
{
Ok
(
pair
)
=
>
Poll
:
:
Ready
(
Ok
(
pair
)
)
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
clear_read_ready
(
cx
mio
:
:
Ready
:
:
readable
(
)
)
?
;
Poll
:
:
Pending
}
Err
(
e
)
=
>
Poll
:
:
Ready
(
Err
(
e
)
)
}
}
pub
fn
from_std
(
listener
:
net
:
:
TcpListener
)
-
>
io
:
:
Result
<
TcpListener
>
{
let
io
=
mio
:
:
net
:
:
TcpListener
:
:
from_std
(
listener
)
?
;
let
io
=
PollEvented
:
:
new
(
io
)
?
;
Ok
(
TcpListener
{
io
}
)
}
fn
new
(
listener
:
mio
:
:
net
:
:
TcpListener
)
-
>
io
:
:
Result
<
TcpListener
>
{
let
io
=
PollEvented
:
:
new
(
listener
)
?
;
Ok
(
TcpListener
{
io
}
)
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
get_ref
(
)
.
local_addr
(
)
}
pub
fn
incoming
(
&
mut
self
)
-
>
Incoming
<
'
_
>
{
Incoming
:
:
new
(
self
)
}
pub
fn
ttl
(
&
self
)
-
>
io
:
:
Result
<
u32
>
{
self
.
io
.
get_ref
(
)
.
ttl
(
)
}
pub
fn
set_ttl
(
&
self
ttl
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
set_ttl
(
ttl
)
}
}
#
[
cfg
(
feature
=
"
stream
"
)
]
impl
crate
:
:
stream
:
:
Stream
for
TcpListener
{
type
Item
=
io
:
:
Result
<
TcpStream
>
;
fn
poll_next
(
mut
self
:
std
:
:
pin
:
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
>
{
let
(
socket
_
)
=
ready
!
(
self
.
poll_accept
(
cx
)
)
?
;
Poll
:
:
Ready
(
Some
(
Ok
(
socket
)
)
)
}
}
impl
TryFrom
<
TcpListener
>
for
mio
:
:
net
:
:
TcpListener
{
type
Error
=
io
:
:
Error
;
fn
try_from
(
value
:
TcpListener
)
-
>
Result
<
Self
Self
:
:
Error
>
{
value
.
io
.
into_inner
(
)
}
}
impl
TryFrom
<
net
:
:
TcpListener
>
for
TcpListener
{
type
Error
=
io
:
:
Error
;
fn
try_from
(
stream
:
net
:
:
TcpListener
)
-
>
Result
<
Self
Self
:
:
Error
>
{
Self
:
:
from_std
(
stream
)
}
}
impl
fmt
:
:
Debug
for
TcpListener
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
io
.
get_ref
(
)
.
fmt
(
f
)
}
}
#
[
cfg
(
unix
)
]
mod
sys
{
use
super
:
:
TcpListener
;
use
std
:
:
os
:
:
unix
:
:
prelude
:
:
*
;
impl
AsRawFd
for
TcpListener
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
io
.
get_ref
(
)
.
as_raw_fd
(
)
}
}
}
#
[
cfg
(
windows
)
]
mod
sys
{
}
