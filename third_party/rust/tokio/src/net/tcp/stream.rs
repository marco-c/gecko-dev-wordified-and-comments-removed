cfg_not_wasi
!
{
use
crate
:
:
future
:
:
poll_fn
;
use
crate
:
:
net
:
:
{
to_socket_addrs
ToSocketAddrs
}
;
use
std
:
:
time
:
:
Duration
;
}
use
crate
:
:
io
:
:
{
AsyncRead
AsyncWrite
Interest
PollEvented
ReadBuf
Ready
}
;
use
crate
:
:
net
:
:
tcp
:
:
split
:
:
{
split
ReadHalf
WriteHalf
}
;
use
crate
:
:
net
:
:
tcp
:
:
split_owned
:
:
{
split_owned
OwnedReadHalf
OwnedWriteHalf
}
;
use
std
:
:
fmt
;
use
std
:
:
io
;
use
std
:
:
net
:
:
{
Shutdown
SocketAddr
}
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
cfg_io_util
!
{
use
bytes
:
:
BufMut
;
}
cfg_net
!
{
/
/
/
A
TCP
stream
between
a
local
and
a
remote
socket
.
/
/
/
/
/
/
A
TCP
stream
can
either
be
created
by
connecting
to
an
endpoint
via
the
/
/
/
[
connect
]
method
or
by
[
accepting
]
a
connection
from
a
[
listener
]
.
A
/
/
/
TCP
stream
can
also
be
created
via
the
[
TcpSocket
]
type
.
/
/
/
/
/
/
Reading
and
writing
to
a
TcpStream
is
usually
done
using
the
/
/
/
convenience
methods
found
on
the
[
AsyncReadExt
]
and
[
AsyncWriteExt
]
/
/
/
traits
.
/
/
/
/
/
/
[
connect
]
:
method
TcpStream
:
:
connect
/
/
/
[
accepting
]
:
method
crate
:
:
net
:
:
TcpListener
:
:
accept
/
/
/
[
listener
]
:
struct
crate
:
:
net
:
:
TcpListener
/
/
/
[
TcpSocket
]
:
struct
crate
:
:
net
:
:
TcpSocket
/
/
/
[
AsyncReadExt
]
:
trait
crate
:
:
io
:
:
AsyncReadExt
/
/
/
[
AsyncWriteExt
]
:
trait
crate
:
:
io
:
:
AsyncWriteExt
/
/
/
/
/
/
#
Examples
/
/
/
/
/
/
no_run
/
/
/
use
tokio
:
:
net
:
:
TcpStream
;
/
/
/
use
tokio
:
:
io
:
:
AsyncWriteExt
;
/
/
/
use
std
:
:
error
:
:
Error
;
/
/
/
/
/
/
#
[
tokio
:
:
main
]
/
/
/
async
fn
main
(
)
-
>
Result
<
(
)
Box
<
dyn
Error
>
>
{
/
/
/
/
/
Connect
to
a
peer
/
/
/
let
mut
stream
=
TcpStream
:
:
connect
(
"
127
.
0
.
0
.
1
:
8080
"
)
.
await
?
;
/
/
/
/
/
/
/
/
Write
some
data
.
/
/
/
stream
.
write_all
(
b
"
hello
world
!
"
)
.
await
?
;
/
/
/
/
/
/
Ok
(
(
)
)
/
/
/
}
/
/
/
/
/
/
/
/
/
The
[
write_all
]
method
is
defined
on
the
[
AsyncWriteExt
]
trait
.
/
/
/
/
/
/
[
write_all
]
:
fn
crate
:
:
io
:
:
AsyncWriteExt
:
:
write_all
/
/
/
[
AsyncWriteExt
]
:
trait
crate
:
:
io
:
:
AsyncWriteExt
/
/
/
/
/
/
To
shut
down
the
stream
in
the
write
direction
you
can
call
the
/
/
/
[
shutdown
(
)
]
method
.
This
will
cause
the
other
peer
to
receive
a
read
of
/
/
/
length
0
indicating
that
no
more
data
will
be
sent
.
This
only
closes
/
/
/
the
stream
in
one
direction
.
/
/
/
/
/
/
[
shutdown
(
)
]
:
fn
crate
:
:
io
:
:
AsyncWriteExt
:
:
shutdown
pub
struct
TcpStream
{
io
:
PollEvented
<
mio
:
:
net
:
:
TcpStream
>
}
}
impl
TcpStream
{
cfg_not_wasi
!
{
/
/
/
Opens
a
TCP
connection
to
a
remote
host
.
/
/
/
/
/
/
addr
is
an
address
of
the
remote
host
.
Anything
which
implements
the
/
/
/
[
ToSocketAddrs
]
trait
can
be
supplied
as
the
address
.
If
addr
/
/
/
yields
multiple
addresses
connect
will
be
attempted
with
each
of
the
/
/
/
addresses
until
a
connection
is
successful
.
If
none
of
the
addresses
/
/
/
result
in
a
successful
connection
the
error
returned
from
the
last
/
/
/
connection
attempt
(
the
last
address
)
is
returned
.
/
/
/
/
/
/
To
configure
the
socket
before
connecting
you
can
use
the
[
TcpSocket
]
/
/
/
type
.
/
/
/
/
/
/
[
ToSocketAddrs
]
:
trait
crate
:
:
net
:
:
ToSocketAddrs
/
/
/
[
TcpSocket
]
:
struct
crate
:
:
net
:
:
TcpSocket
/
/
/
/
/
/
#
Examples
/
/
/
/
/
/
no_run
/
/
/
use
tokio
:
:
net
:
:
TcpStream
;
/
/
/
use
tokio
:
:
io
:
:
AsyncWriteExt
;
/
/
/
use
std
:
:
error
:
:
Error
;
/
/
/
/
/
/
#
[
tokio
:
:
main
]
/
/
/
async
fn
main
(
)
-
>
Result
<
(
)
Box
<
dyn
Error
>
>
{
/
/
/
/
/
Connect
to
a
peer
/
/
/
let
mut
stream
=
TcpStream
:
:
connect
(
"
127
.
0
.
0
.
1
:
8080
"
)
.
await
?
;
/
/
/
/
/
/
/
/
Write
some
data
.
/
/
/
stream
.
write_all
(
b
"
hello
world
!
"
)
.
await
?
;
/
/
/
/
/
/
Ok
(
(
)
)
/
/
/
}
/
/
/
/
/
/
/
/
/
The
[
write_all
]
method
is
defined
on
the
[
AsyncWriteExt
]
trait
.
/
/
/
/
/
/
[
write_all
]
:
fn
crate
:
:
io
:
:
AsyncWriteExt
:
:
write_all
/
/
/
[
AsyncWriteExt
]
:
trait
crate
:
:
io
:
:
AsyncWriteExt
pub
async
fn
connect
<
A
:
ToSocketAddrs
>
(
addr
:
A
)
-
>
io
:
:
Result
<
TcpStream
>
{
let
addrs
=
to_socket_addrs
(
addr
)
.
await
?
;
let
mut
last_err
=
None
;
for
addr
in
addrs
{
match
TcpStream
:
:
connect_addr
(
addr
)
.
await
{
Ok
(
stream
)
=
>
return
Ok
(
stream
)
Err
(
e
)
=
>
last_err
=
Some
(
e
)
}
}
Err
(
last_err
.
unwrap_or_else
(
|
|
{
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
InvalidInput
"
could
not
resolve
to
any
address
"
)
}
)
)
}
/
/
/
Establishes
a
connection
to
the
specified
addr
.
async
fn
connect_addr
(
addr
:
SocketAddr
)
-
>
io
:
:
Result
<
TcpStream
>
{
let
sys
=
mio
:
:
net
:
:
TcpStream
:
:
connect
(
addr
)
?
;
TcpStream
:
:
connect_mio
(
sys
)
.
await
}
pub
(
crate
)
async
fn
connect_mio
(
sys
:
mio
:
:
net
:
:
TcpStream
)
-
>
io
:
:
Result
<
TcpStream
>
{
let
stream
=
TcpStream
:
:
new
(
sys
)
?
;
/
/
Once
we
'
ve
connected
wait
for
the
stream
to
be
writable
as
/
/
that
'
s
when
the
actual
connection
has
been
initiated
.
Once
we
'
re
/
/
writable
we
check
for
take_socket_error
to
see
if
the
connect
/
/
actually
hit
an
error
or
not
.
/
/
/
/
If
all
that
succeeded
then
we
ship
everything
on
up
.
poll_fn
(
|
cx
|
stream
.
io
.
registration
(
)
.
poll_write_ready
(
cx
)
)
.
await
?
;
if
let
Some
(
e
)
=
stream
.
io
.
take_error
(
)
?
{
return
Err
(
e
)
;
}
Ok
(
stream
)
}
}
pub
(
crate
)
fn
new
(
connected
:
mio
:
:
net
:
:
TcpStream
)
-
>
io
:
:
Result
<
TcpStream
>
{
let
io
=
PollEvented
:
:
new
(
connected
)
?
;
Ok
(
TcpStream
{
io
}
)
}
#
[
track_caller
]
pub
fn
from_std
(
stream
:
std
:
:
net
:
:
TcpStream
)
-
>
io
:
:
Result
<
TcpStream
>
{
let
io
=
mio
:
:
net
:
:
TcpStream
:
:
from_std
(
stream
)
;
let
io
=
PollEvented
:
:
new
(
io
)
?
;
Ok
(
TcpStream
{
io
}
)
}
pub
fn
into_std
(
self
)
-
>
io
:
:
Result
<
std
:
:
net
:
:
TcpStream
>
{
#
[
cfg
(
unix
)
]
{
use
std
:
:
os
:
:
unix
:
:
io
:
:
{
FromRawFd
IntoRawFd
}
;
self
.
io
.
into_inner
(
)
.
map
(
|
io
|
io
.
into_raw_fd
(
)
)
.
map
(
|
raw_fd
|
unsafe
{
std
:
:
net
:
:
TcpStream
:
:
from_raw_fd
(
raw_fd
)
}
)
}
#
[
cfg
(
windows
)
]
{
use
std
:
:
os
:
:
windows
:
:
io
:
:
{
FromRawSocket
IntoRawSocket
}
;
self
.
io
.
into_inner
(
)
.
map
(
|
io
|
io
.
into_raw_socket
(
)
)
.
map
(
|
raw_socket
|
unsafe
{
std
:
:
net
:
:
TcpStream
:
:
from_raw_socket
(
raw_socket
)
}
)
}
#
[
cfg
(
tokio_wasi
)
]
{
use
std
:
:
os
:
:
wasi
:
:
io
:
:
{
FromRawFd
IntoRawFd
}
;
self
.
io
.
into_inner
(
)
.
map
(
|
io
|
io
.
into_raw_fd
(
)
)
.
map
(
|
raw_fd
|
unsafe
{
std
:
:
net
:
:
TcpStream
:
:
from_raw_fd
(
raw_fd
)
}
)
}
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
local_addr
(
)
}
pub
fn
take_error
(
&
self
)
-
>
io
:
:
Result
<
Option
<
io
:
:
Error
>
>
{
self
.
io
.
take_error
(
)
}
pub
fn
peer_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
peer_addr
(
)
}
pub
fn
poll_peek
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
ReadBuf
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
loop
{
let
ev
=
ready
!
(
self
.
io
.
registration
(
)
.
poll_read_ready
(
cx
)
)
?
;
let
b
=
unsafe
{
&
mut
*
(
buf
.
unfilled_mut
(
)
as
*
mut
[
std
:
:
mem
:
:
MaybeUninit
<
u8
>
]
as
*
mut
[
u8
]
)
}
;
match
self
.
io
.
peek
(
b
)
{
Ok
(
ret
)
=
>
{
unsafe
{
buf
.
assume_init
(
ret
)
}
;
buf
.
advance
(
ret
)
;
return
Poll
:
:
Ready
(
Ok
(
ret
)
)
;
}
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
registration
(
)
.
clear_readiness
(
ev
)
;
}
Err
(
e
)
=
>
return
Poll
:
:
Ready
(
Err
(
e
)
)
}
}
}
pub
async
fn
ready
(
&
self
interest
:
Interest
)
-
>
io
:
:
Result
<
Ready
>
{
let
event
=
self
.
io
.
registration
(
)
.
readiness
(
interest
)
.
await
?
;
Ok
(
event
.
ready
)
}
pub
async
fn
readable
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
ready
(
Interest
:
:
READABLE
)
.
await
?
;
Ok
(
(
)
)
}
pub
fn
poll_read_ready
(
&
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
io
.
registration
(
)
.
poll_read_ready
(
cx
)
.
map_ok
(
|
_
|
(
)
)
}
pub
fn
try_read
(
&
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
use
std
:
:
io
:
:
Read
;
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
READABLE
|
|
(
&
*
self
.
io
)
.
read
(
buf
)
)
}
pub
fn
try_read_vectored
(
&
self
bufs
:
&
mut
[
io
:
:
IoSliceMut
<
'
_
>
]
)
-
>
io
:
:
Result
<
usize
>
{
use
std
:
:
io
:
:
Read
;
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
READABLE
|
|
(
&
*
self
.
io
)
.
read_vectored
(
bufs
)
)
}
cfg_io_util
!
{
/
/
/
Tries
to
read
data
from
the
stream
into
the
provided
buffer
advancing
the
/
/
/
buffer
'
s
internal
cursor
returning
how
many
bytes
were
read
.
/
/
/
/
/
/
Receives
any
pending
data
from
the
socket
but
does
not
wait
for
new
data
/
/
/
to
arrive
.
On
success
returns
the
number
of
bytes
read
.
Because
/
/
/
try_read_buf
(
)
is
non
-
blocking
the
buffer
does
not
have
to
be
stored
by
/
/
/
the
async
task
and
can
exist
entirely
on
the
stack
.
/
/
/
/
/
/
Usually
[
readable
(
)
]
or
[
ready
(
)
]
is
used
with
this
function
.
/
/
/
/
/
/
[
readable
(
)
]
:
TcpStream
:
:
readable
(
)
/
/
/
[
ready
(
)
]
:
TcpStream
:
:
ready
(
)
/
/
/
/
/
/
#
Return
/
/
/
/
/
/
If
data
is
successfully
read
Ok
(
n
)
is
returned
where
n
is
the
/
/
/
number
of
bytes
read
.
Ok
(
0
)
indicates
the
stream
'
s
read
half
is
closed
/
/
/
and
will
no
longer
yield
data
.
If
the
stream
is
not
ready
to
read
data
/
/
/
Err
(
io
:
:
ErrorKind
:
:
WouldBlock
)
is
returned
.
/
/
/
/
/
/
#
Examples
/
/
/
/
/
/
no_run
/
/
/
use
tokio
:
:
net
:
:
TcpStream
;
/
/
/
use
std
:
:
error
:
:
Error
;
/
/
/
use
std
:
:
io
;
/
/
/
/
/
/
#
[
tokio
:
:
main
]
/
/
/
async
fn
main
(
)
-
>
Result
<
(
)
Box
<
dyn
Error
>
>
{
/
/
/
/
/
Connect
to
a
peer
/
/
/
let
stream
=
TcpStream
:
:
connect
(
"
127
.
0
.
0
.
1
:
8080
"
)
.
await
?
;
/
/
/
/
/
/
loop
{
/
/
/
/
/
Wait
for
the
socket
to
be
readable
/
/
/
stream
.
readable
(
)
.
await
?
;
/
/
/
/
/
/
let
mut
buf
=
Vec
:
:
with_capacity
(
4096
)
;
/
/
/
/
/
/
/
/
Try
to
read
data
this
may
still
fail
with
WouldBlock
/
/
/
/
/
if
the
readiness
event
is
a
false
positive
.
/
/
/
match
stream
.
try_read_buf
(
&
mut
buf
)
{
/
/
/
Ok
(
0
)
=
>
break
/
/
/
Ok
(
n
)
=
>
{
/
/
/
println
!
(
"
read
{
}
bytes
"
n
)
;
/
/
/
}
/
/
/
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
/
/
/
continue
;
/
/
/
}
/
/
/
Err
(
e
)
=
>
{
/
/
/
return
Err
(
e
.
into
(
)
)
;
/
/
/
}
/
/
/
}
/
/
/
}
/
/
/
/
/
/
Ok
(
(
)
)
/
/
/
}
/
/
/
pub
fn
try_read_buf
<
B
:
BufMut
>
(
&
self
buf
:
&
mut
B
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
READABLE
|
|
{
use
std
:
:
io
:
:
Read
;
let
dst
=
buf
.
chunk_mut
(
)
;
let
dst
=
unsafe
{
&
mut
*
(
dst
as
*
mut
_
as
*
mut
[
std
:
:
mem
:
:
MaybeUninit
<
u8
>
]
as
*
mut
[
u8
]
)
}
;
/
/
Safety
:
We
trust
TcpStream
:
:
read
to
have
filled
up
n
bytes
in
the
/
/
buffer
.
let
n
=
(
&
*
self
.
io
)
.
read
(
dst
)
?
;
unsafe
{
buf
.
advance_mut
(
n
)
;
}
Ok
(
n
)
}
)
}
}
pub
async
fn
writable
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
ready
(
Interest
:
:
WRITABLE
)
.
await
?
;
Ok
(
(
)
)
}
pub
fn
poll_write_ready
(
&
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
io
.
registration
(
)
.
poll_write_ready
(
cx
)
.
map_ok
(
|
_
|
(
)
)
}
pub
fn
try_write
(
&
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
use
std
:
:
io
:
:
Write
;
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
WRITABLE
|
|
(
&
*
self
.
io
)
.
write
(
buf
)
)
}
pub
fn
try_write_vectored
(
&
self
bufs
:
&
[
io
:
:
IoSlice
<
'
_
>
]
)
-
>
io
:
:
Result
<
usize
>
{
use
std
:
:
io
:
:
Write
;
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
WRITABLE
|
|
(
&
*
self
.
io
)
.
write_vectored
(
bufs
)
)
}
pub
fn
try_io
<
R
>
(
&
self
interest
:
Interest
f
:
impl
FnOnce
(
)
-
>
io
:
:
Result
<
R
>
)
-
>
io
:
:
Result
<
R
>
{
self
.
io
.
registration
(
)
.
try_io
(
interest
|
|
self
.
io
.
try_io
(
f
)
)
}
pub
async
fn
async_io
<
R
>
(
&
self
interest
:
Interest
mut
f
:
impl
FnMut
(
)
-
>
io
:
:
Result
<
R
>
)
-
>
io
:
:
Result
<
R
>
{
self
.
io
.
registration
(
)
.
async_io
(
interest
|
|
self
.
io
.
try_io
(
&
mut
f
)
)
.
await
}
pub
async
fn
peek
(
&
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
async_io
(
Interest
:
:
READABLE
|
|
self
.
io
.
peek
(
buf
)
)
.
await
}
pub
(
super
)
fn
shutdown_std
(
&
self
how
:
Shutdown
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
shutdown
(
how
)
}
pub
fn
nodelay
(
&
self
)
-
>
io
:
:
Result
<
bool
>
{
self
.
io
.
nodelay
(
)
}
pub
fn
set_nodelay
(
&
self
nodelay
:
bool
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
set_nodelay
(
nodelay
)
}
cfg_not_wasi
!
{
/
/
/
Reads
the
linger
duration
for
this
socket
by
getting
the
SO_LINGER
/
/
/
option
.
/
/
/
/
/
/
For
more
information
about
this
option
see
[
set_linger
]
.
/
/
/
/
/
/
[
set_linger
]
:
TcpStream
:
:
set_linger
/
/
/
/
/
/
#
Examples
/
/
/
/
/
/
no_run
/
/
/
use
tokio
:
:
net
:
:
TcpStream
;
/
/
/
/
/
/
#
async
fn
dox
(
)
-
>
Result
<
(
)
Box
<
dyn
std
:
:
error
:
:
Error
>
>
{
/
/
/
let
stream
=
TcpStream
:
:
connect
(
"
127
.
0
.
0
.
1
:
8080
"
)
.
await
?
;
/
/
/
/
/
/
println
!
(
"
{
:
?
}
"
stream
.
linger
(
)
?
)
;
/
/
/
#
Ok
(
(
)
)
/
/
/
#
}
/
/
/
pub
fn
linger
(
&
self
)
-
>
io
:
:
Result
<
Option
<
Duration
>
>
{
socket2
:
:
SockRef
:
:
from
(
self
)
.
linger
(
)
}
/
/
/
Sets
the
linger
duration
of
this
socket
by
setting
the
SO_LINGER
option
.
/
/
/
/
/
/
This
option
controls
the
action
taken
when
a
stream
has
unsent
messages
and
the
stream
is
/
/
/
closed
.
If
SO_LINGER
is
set
the
system
shall
block
the
process
until
it
can
transmit
the
/
/
/
data
or
until
the
time
expires
.
/
/
/
/
/
/
If
SO_LINGER
is
not
specified
and
the
stream
is
closed
the
system
handles
the
call
in
a
/
/
/
way
that
allows
the
process
to
continue
as
quickly
as
possible
.
/
/
/
/
/
/
#
Examples
/
/
/
/
/
/
no_run
/
/
/
use
tokio
:
:
net
:
:
TcpStream
;
/
/
/
/
/
/
#
async
fn
dox
(
)
-
>
Result
<
(
)
Box
<
dyn
std
:
:
error
:
:
Error
>
>
{
/
/
/
let
stream
=
TcpStream
:
:
connect
(
"
127
.
0
.
0
.
1
:
8080
"
)
.
await
?
;
/
/
/
/
/
/
stream
.
set_linger
(
None
)
?
;
/
/
/
#
Ok
(
(
)
)
/
/
/
#
}
/
/
/
pub
fn
set_linger
(
&
self
dur
:
Option
<
Duration
>
)
-
>
io
:
:
Result
<
(
)
>
{
socket2
:
:
SockRef
:
:
from
(
self
)
.
set_linger
(
dur
)
}
}
pub
fn
ttl
(
&
self
)
-
>
io
:
:
Result
<
u32
>
{
self
.
io
.
ttl
(
)
}
pub
fn
set_ttl
(
&
self
ttl
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
set_ttl
(
ttl
)
}
#
[
allow
(
clippy
:
:
needless_lifetimes
)
]
pub
fn
split
<
'
a
>
(
&
'
a
mut
self
)
-
>
(
ReadHalf
<
'
a
>
WriteHalf
<
'
a
>
)
{
split
(
self
)
}
pub
fn
into_split
(
self
)
-
>
(
OwnedReadHalf
OwnedWriteHalf
)
{
split_owned
(
self
)
}
pub
(
crate
)
fn
poll_read_priv
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
ReadBuf
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
unsafe
{
self
.
io
.
poll_read
(
cx
buf
)
}
}
pub
(
super
)
fn
poll_write_priv
(
&
self
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
io
.
poll_write
(
cx
buf
)
}
pub
(
super
)
fn
poll_write_vectored_priv
(
&
self
cx
:
&
mut
Context
<
'
_
>
bufs
:
&
[
io
:
:
IoSlice
<
'
_
>
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
io
.
poll_write_vectored
(
cx
bufs
)
}
}
impl
TryFrom
<
std
:
:
net
:
:
TcpStream
>
for
TcpStream
{
type
Error
=
io
:
:
Error
;
fn
try_from
(
stream
:
std
:
:
net
:
:
TcpStream
)
-
>
Result
<
Self
Self
:
:
Error
>
{
Self
:
:
from_std
(
stream
)
}
}
impl
AsyncRead
for
TcpStream
{
fn
poll_read
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
ReadBuf
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
poll_read_priv
(
cx
buf
)
}
}
impl
AsyncWrite
for
TcpStream
{
fn
poll_write
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
poll_write_priv
(
cx
buf
)
}
fn
poll_write_vectored
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
bufs
:
&
[
io
:
:
IoSlice
<
'
_
>
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
poll_write_vectored_priv
(
cx
bufs
)
}
fn
is_write_vectored
(
&
self
)
-
>
bool
{
true
}
#
[
inline
]
fn
poll_flush
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
shutdown_std
(
std
:
:
net
:
:
Shutdown
:
:
Write
)
?
;
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
}
impl
fmt
:
:
Debug
for
TcpStream
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
io
.
fmt
(
f
)
}
}
#
[
cfg
(
unix
)
]
mod
sys
{
use
super
:
:
TcpStream
;
use
std
:
:
os
:
:
unix
:
:
prelude
:
:
*
;
impl
AsRawFd
for
TcpStream
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
io
.
as_raw_fd
(
)
}
}
#
[
cfg
(
not
(
tokio_no_as_fd
)
)
]
impl
AsFd
for
TcpStream
{
fn
as_fd
(
&
self
)
-
>
BorrowedFd
<
'
_
>
{
unsafe
{
BorrowedFd
:
:
borrow_raw
(
self
.
as_raw_fd
(
)
)
}
}
}
}
cfg_windows
!
{
use
crate
:
:
os
:
:
windows
:
:
io
:
:
{
AsRawSocket
RawSocket
}
;
#
[
cfg
(
not
(
tokio_no_as_fd
)
)
]
use
crate
:
:
os
:
:
windows
:
:
io
:
:
{
AsSocket
BorrowedSocket
}
;
impl
AsRawSocket
for
TcpStream
{
fn
as_raw_socket
(
&
self
)
-
>
RawSocket
{
self
.
io
.
as_raw_socket
(
)
}
}
#
[
cfg
(
not
(
tokio_no_as_fd
)
)
]
impl
AsSocket
for
TcpStream
{
fn
as_socket
(
&
self
)
-
>
BorrowedSocket
<
'
_
>
{
unsafe
{
BorrowedSocket
:
:
borrow_raw
(
self
.
as_raw_socket
(
)
)
}
}
}
}
#
[
cfg
(
all
(
tokio_unstable
tokio_wasi
)
)
]
mod
sys
{
use
super
:
:
TcpStream
;
use
std
:
:
os
:
:
wasi
:
:
prelude
:
:
*
;
impl
AsRawFd
for
TcpStream
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
io
.
as_raw_fd
(
)
}
}
#
[
cfg
(
not
(
tokio_no_as_fd
)
)
]
impl
AsFd
for
TcpStream
{
fn
as_fd
(
&
self
)
-
>
BorrowedFd
<
'
_
>
{
unsafe
{
BorrowedFd
:
:
borrow_raw
(
self
.
as_raw_fd
(
)
)
}
}
}
}
