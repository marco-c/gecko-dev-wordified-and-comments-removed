use
std
:
:
ffi
:
:
c_void
;
use
std
:
:
ffi
:
:
OsStr
;
use
std
:
:
io
:
:
{
self
Read
Write
}
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
ptr
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
use
crate
:
:
io
:
:
{
AsyncRead
AsyncWrite
Interest
PollEvented
ReadBuf
Ready
}
;
use
crate
:
:
os
:
:
windows
:
:
io
:
:
{
AsRawHandle
FromRawHandle
RawHandle
}
;
#
[
cfg
(
not
(
docsrs
)
)
]
mod
doc
{
pub
(
super
)
use
crate
:
:
os
:
:
windows
:
:
ffi
:
:
OsStrExt
;
pub
(
super
)
use
crate
:
:
winapi
:
:
shared
:
:
minwindef
:
:
{
DWORD
FALSE
}
;
pub
(
super
)
use
crate
:
:
winapi
:
:
um
:
:
fileapi
;
pub
(
super
)
use
crate
:
:
winapi
:
:
um
:
:
handleapi
;
pub
(
super
)
use
crate
:
:
winapi
:
:
um
:
:
namedpipeapi
;
pub
(
super
)
use
crate
:
:
winapi
:
:
um
:
:
winbase
;
pub
(
super
)
use
crate
:
:
winapi
:
:
um
:
:
winnt
;
pub
(
super
)
use
mio
:
:
windows
as
mio_windows
;
}
#
[
cfg
(
docsrs
)
]
mod
doc
{
pub
type
DWORD
=
crate
:
:
doc
:
:
NotDefinedHere
;
pub
(
super
)
mod
mio_windows
{
pub
type
NamedPipe
=
crate
:
:
doc
:
:
NotDefinedHere
;
}
}
use
self
:
:
doc
:
:
*
;
#
[
derive
(
Debug
)
]
pub
struct
NamedPipeServer
{
io
:
PollEvented
<
mio_windows
:
:
NamedPipe
>
}
impl
NamedPipeServer
{
pub
unsafe
fn
from_raw_handle
(
handle
:
RawHandle
)
-
>
io
:
:
Result
<
Self
>
{
let
named_pipe
=
mio_windows
:
:
NamedPipe
:
:
from_raw_handle
(
handle
)
;
Ok
(
Self
{
io
:
PollEvented
:
:
new
(
named_pipe
)
?
}
)
}
pub
fn
info
(
&
self
)
-
>
io
:
:
Result
<
PipeInfo
>
{
unsafe
{
named_pipe_info
(
self
.
io
.
as_raw_handle
(
)
)
}
}
pub
async
fn
connect
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
loop
{
match
self
.
io
.
connect
(
)
{
Ok
(
(
)
)
=
>
break
Err
(
e
)
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
self
.
io
.
registration
(
)
.
readiness
(
Interest
:
:
WRITABLE
)
.
await
?
;
}
Err
(
e
)
=
>
return
Err
(
e
)
}
}
Ok
(
(
)
)
}
pub
fn
disconnect
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
disconnect
(
)
}
pub
async
fn
ready
(
&
self
interest
:
Interest
)
-
>
io
:
:
Result
<
Ready
>
{
let
event
=
self
.
io
.
registration
(
)
.
readiness
(
interest
)
.
await
?
;
Ok
(
event
.
ready
)
}
pub
async
fn
readable
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
ready
(
Interest
:
:
READABLE
)
.
await
?
;
Ok
(
(
)
)
}
pub
fn
poll_read_ready
(
&
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
io
.
registration
(
)
.
poll_read_ready
(
cx
)
.
map_ok
(
|
_
|
(
)
)
}
pub
fn
try_read
(
&
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
READABLE
|
|
(
&
*
self
.
io
)
.
read
(
buf
)
)
}
pub
fn
try_read_vectored
(
&
self
bufs
:
&
mut
[
io
:
:
IoSliceMut
<
'
_
>
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
READABLE
|
|
(
&
*
self
.
io
)
.
read_vectored
(
bufs
)
)
}
pub
async
fn
writable
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
ready
(
Interest
:
:
WRITABLE
)
.
await
?
;
Ok
(
(
)
)
}
pub
fn
poll_write_ready
(
&
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
io
.
registration
(
)
.
poll_write_ready
(
cx
)
.
map_ok
(
|
_
|
(
)
)
}
pub
fn
try_write
(
&
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
WRITABLE
|
|
(
&
*
self
.
io
)
.
write
(
buf
)
)
}
pub
fn
try_write_vectored
(
&
self
buf
:
&
[
io
:
:
IoSlice
<
'
_
>
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
WRITABLE
|
|
(
&
*
self
.
io
)
.
write_vectored
(
buf
)
)
}
pub
fn
try_io
<
R
>
(
&
self
interest
:
Interest
f
:
impl
FnOnce
(
)
-
>
io
:
:
Result
<
R
>
)
-
>
io
:
:
Result
<
R
>
{
self
.
io
.
registration
(
)
.
try_io
(
interest
f
)
}
}
impl
AsyncRead
for
NamedPipeServer
{
fn
poll_read
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
ReadBuf
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
unsafe
{
self
.
io
.
poll_read
(
cx
buf
)
}
}
}
impl
AsyncWrite
for
NamedPipeServer
{
fn
poll_write
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
io
.
poll_write
(
cx
buf
)
}
fn
poll_write_vectored
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
bufs
:
&
[
io
:
:
IoSlice
<
'
_
>
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
io
.
poll_write_vectored
(
cx
bufs
)
}
fn
poll_flush
(
self
:
Pin
<
&
mut
Self
>
_cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
poll_flush
(
cx
)
}
}
impl
AsRawHandle
for
NamedPipeServer
{
fn
as_raw_handle
(
&
self
)
-
>
RawHandle
{
self
.
io
.
as_raw_handle
(
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
NamedPipeClient
{
io
:
PollEvented
<
mio_windows
:
:
NamedPipe
>
}
impl
NamedPipeClient
{
pub
unsafe
fn
from_raw_handle
(
handle
:
RawHandle
)
-
>
io
:
:
Result
<
Self
>
{
let
named_pipe
=
mio_windows
:
:
NamedPipe
:
:
from_raw_handle
(
handle
)
;
Ok
(
Self
{
io
:
PollEvented
:
:
new
(
named_pipe
)
?
}
)
}
pub
fn
info
(
&
self
)
-
>
io
:
:
Result
<
PipeInfo
>
{
unsafe
{
named_pipe_info
(
self
.
io
.
as_raw_handle
(
)
)
}
}
pub
async
fn
ready
(
&
self
interest
:
Interest
)
-
>
io
:
:
Result
<
Ready
>
{
let
event
=
self
.
io
.
registration
(
)
.
readiness
(
interest
)
.
await
?
;
Ok
(
event
.
ready
)
}
pub
async
fn
readable
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
ready
(
Interest
:
:
READABLE
)
.
await
?
;
Ok
(
(
)
)
}
pub
fn
poll_read_ready
(
&
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
io
.
registration
(
)
.
poll_read_ready
(
cx
)
.
map_ok
(
|
_
|
(
)
)
}
pub
fn
try_read
(
&
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
READABLE
|
|
(
&
*
self
.
io
)
.
read
(
buf
)
)
}
pub
fn
try_read_vectored
(
&
self
bufs
:
&
mut
[
io
:
:
IoSliceMut
<
'
_
>
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
READABLE
|
|
(
&
*
self
.
io
)
.
read_vectored
(
bufs
)
)
}
pub
async
fn
writable
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
ready
(
Interest
:
:
WRITABLE
)
.
await
?
;
Ok
(
(
)
)
}
pub
fn
poll_write_ready
(
&
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
io
.
registration
(
)
.
poll_write_ready
(
cx
)
.
map_ok
(
|
_
|
(
)
)
}
pub
fn
try_write
(
&
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
WRITABLE
|
|
(
&
*
self
.
io
)
.
write
(
buf
)
)
}
pub
fn
try_write_vectored
(
&
self
buf
:
&
[
io
:
:
IoSlice
<
'
_
>
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
registration
(
)
.
try_io
(
Interest
:
:
WRITABLE
|
|
(
&
*
self
.
io
)
.
write_vectored
(
buf
)
)
}
pub
fn
try_io
<
R
>
(
&
self
interest
:
Interest
f
:
impl
FnOnce
(
)
-
>
io
:
:
Result
<
R
>
)
-
>
io
:
:
Result
<
R
>
{
self
.
io
.
registration
(
)
.
try_io
(
interest
f
)
}
}
impl
AsyncRead
for
NamedPipeClient
{
fn
poll_read
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
ReadBuf
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
unsafe
{
self
.
io
.
poll_read
(
cx
buf
)
}
}
}
impl
AsyncWrite
for
NamedPipeClient
{
fn
poll_write
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
io
.
poll_write
(
cx
buf
)
}
fn
poll_write_vectored
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
bufs
:
&
[
io
:
:
IoSlice
<
'
_
>
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
io
.
poll_write_vectored
(
cx
bufs
)
}
fn
poll_flush
(
self
:
Pin
<
&
mut
Self
>
_cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
poll_flush
(
cx
)
}
}
impl
AsRawHandle
for
NamedPipeClient
{
fn
as_raw_handle
(
&
self
)
-
>
RawHandle
{
self
.
io
.
as_raw_handle
(
)
}
}
macro_rules
!
bool_flag
{
(
f
:
expr
t
:
expr
flag
:
expr
)
=
>
{
{
let
current
=
f
;
if
t
{
f
=
current
|
flag
;
}
else
{
f
=
current
&
!
flag
;
}
;
}
}
;
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
ServerOptions
{
open_mode
:
DWORD
pipe_mode
:
DWORD
max_instances
:
DWORD
out_buffer_size
:
DWORD
in_buffer_size
:
DWORD
default_timeout
:
DWORD
}
impl
ServerOptions
{
pub
fn
new
(
)
-
>
ServerOptions
{
ServerOptions
{
open_mode
:
winbase
:
:
PIPE_ACCESS_DUPLEX
|
winbase
:
:
FILE_FLAG_OVERLAPPED
pipe_mode
:
winbase
:
:
PIPE_TYPE_BYTE
|
winbase
:
:
PIPE_REJECT_REMOTE_CLIENTS
max_instances
:
winbase
:
:
PIPE_UNLIMITED_INSTANCES
out_buffer_size
:
65536
in_buffer_size
:
65536
default_timeout
:
0
}
}
pub
fn
pipe_mode
(
&
mut
self
pipe_mode
:
PipeMode
)
-
>
&
mut
Self
{
self
.
pipe_mode
=
match
pipe_mode
{
PipeMode
:
:
Byte
=
>
winbase
:
:
PIPE_TYPE_BYTE
PipeMode
:
:
Message
=
>
winbase
:
:
PIPE_TYPE_MESSAGE
}
;
self
}
pub
fn
access_inbound
(
&
mut
self
allowed
:
bool
)
-
>
&
mut
Self
{
bool_flag
!
(
self
.
open_mode
allowed
winbase
:
:
PIPE_ACCESS_INBOUND
)
;
self
}
pub
fn
access_outbound
(
&
mut
self
allowed
:
bool
)
-
>
&
mut
Self
{
bool_flag
!
(
self
.
open_mode
allowed
winbase
:
:
PIPE_ACCESS_OUTBOUND
)
;
self
}
pub
fn
first_pipe_instance
(
&
mut
self
first
:
bool
)
-
>
&
mut
Self
{
bool_flag
!
(
self
.
open_mode
first
winbase
:
:
FILE_FLAG_FIRST_PIPE_INSTANCE
)
;
self
}
pub
fn
reject_remote_clients
(
&
mut
self
reject
:
bool
)
-
>
&
mut
Self
{
bool_flag
!
(
self
.
pipe_mode
reject
winbase
:
:
PIPE_REJECT_REMOTE_CLIENTS
)
;
self
}
pub
fn
max_instances
(
&
mut
self
instances
:
usize
)
-
>
&
mut
Self
{
assert
!
(
instances
<
255
"
cannot
specify
more
than
254
instances
"
)
;
self
.
max_instances
=
instances
as
DWORD
;
self
}
pub
fn
out_buffer_size
(
&
mut
self
buffer
:
u32
)
-
>
&
mut
Self
{
self
.
out_buffer_size
=
buffer
as
DWORD
;
self
}
pub
fn
in_buffer_size
(
&
mut
self
buffer
:
u32
)
-
>
&
mut
Self
{
self
.
in_buffer_size
=
buffer
as
DWORD
;
self
}
pub
fn
create
(
&
self
addr
:
impl
AsRef
<
OsStr
>
)
-
>
io
:
:
Result
<
NamedPipeServer
>
{
unsafe
{
self
.
create_with_security_attributes_raw
(
addr
ptr
:
:
null_mut
(
)
)
}
}
pub
unsafe
fn
create_with_security_attributes_raw
(
&
self
addr
:
impl
AsRef
<
OsStr
>
attrs
:
*
mut
c_void
)
-
>
io
:
:
Result
<
NamedPipeServer
>
{
let
addr
=
encode_addr
(
addr
)
;
let
h
=
namedpipeapi
:
:
CreateNamedPipeW
(
addr
.
as_ptr
(
)
self
.
open_mode
self
.
pipe_mode
self
.
max_instances
self
.
out_buffer_size
self
.
in_buffer_size
self
.
default_timeout
attrs
as
*
mut
_
)
;
if
h
=
=
handleapi
:
:
INVALID_HANDLE_VALUE
{
return
Err
(
io
:
:
Error
:
:
last_os_error
(
)
)
;
}
NamedPipeServer
:
:
from_raw_handle
(
h
)
}
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
ClientOptions
{
desired_access
:
DWORD
security_qos_flags
:
DWORD
}
impl
ClientOptions
{
pub
fn
new
(
)
-
>
Self
{
Self
{
desired_access
:
winnt
:
:
GENERIC_READ
|
winnt
:
:
GENERIC_WRITE
security_qos_flags
:
winbase
:
:
SECURITY_IDENTIFICATION
|
winbase
:
:
SECURITY_SQOS_PRESENT
}
}
pub
fn
read
(
&
mut
self
allowed
:
bool
)
-
>
&
mut
Self
{
bool_flag
!
(
self
.
desired_access
allowed
winnt
:
:
GENERIC_READ
)
;
self
}
pub
fn
write
(
&
mut
self
allowed
:
bool
)
-
>
&
mut
Self
{
bool_flag
!
(
self
.
desired_access
allowed
winnt
:
:
GENERIC_WRITE
)
;
self
}
pub
fn
security_qos_flags
(
&
mut
self
flags
:
u32
)
-
>
&
mut
Self
{
self
.
security_qos_flags
=
flags
|
winbase
:
:
SECURITY_SQOS_PRESENT
;
self
}
pub
fn
open
(
&
self
addr
:
impl
AsRef
<
OsStr
>
)
-
>
io
:
:
Result
<
NamedPipeClient
>
{
unsafe
{
self
.
open_with_security_attributes_raw
(
addr
ptr
:
:
null_mut
(
)
)
}
}
pub
unsafe
fn
open_with_security_attributes_raw
(
&
self
addr
:
impl
AsRef
<
OsStr
>
attrs
:
*
mut
c_void
)
-
>
io
:
:
Result
<
NamedPipeClient
>
{
let
addr
=
encode_addr
(
addr
)
;
let
h
=
fileapi
:
:
CreateFileW
(
addr
.
as_ptr
(
)
self
.
desired_access
0
attrs
as
*
mut
_
fileapi
:
:
OPEN_EXISTING
self
.
get_flags
(
)
ptr
:
:
null_mut
(
)
)
;
if
h
=
=
handleapi
:
:
INVALID_HANDLE_VALUE
{
return
Err
(
io
:
:
Error
:
:
last_os_error
(
)
)
;
}
NamedPipeClient
:
:
from_raw_handle
(
h
)
}
fn
get_flags
(
&
self
)
-
>
u32
{
self
.
security_qos_flags
|
winbase
:
:
FILE_FLAG_OVERLAPPED
}
}
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
Hash
)
]
#
[
non_exhaustive
]
pub
enum
PipeMode
{
Byte
Message
}
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
Hash
)
]
#
[
non_exhaustive
]
pub
enum
PipeEnd
{
Client
Server
}
#
[
derive
(
Debug
)
]
#
[
non_exhaustive
]
pub
struct
PipeInfo
{
pub
mode
:
PipeMode
pub
end
:
PipeEnd
pub
max_instances
:
u32
pub
out_buffer_size
:
u32
pub
in_buffer_size
:
u32
}
fn
encode_addr
(
addr
:
impl
AsRef
<
OsStr
>
)
-
>
Box
<
[
u16
]
>
{
let
len
=
addr
.
as_ref
(
)
.
encode_wide
(
)
.
count
(
)
;
let
mut
vec
=
Vec
:
:
with_capacity
(
len
+
1
)
;
vec
.
extend
(
addr
.
as_ref
(
)
.
encode_wide
(
)
)
;
vec
.
push
(
0
)
;
vec
.
into_boxed_slice
(
)
}
unsafe
fn
named_pipe_info
(
handle
:
RawHandle
)
-
>
io
:
:
Result
<
PipeInfo
>
{
let
mut
flags
=
0
;
let
mut
out_buffer_size
=
0
;
let
mut
in_buffer_size
=
0
;
let
mut
max_instances
=
0
;
let
result
=
namedpipeapi
:
:
GetNamedPipeInfo
(
handle
&
mut
flags
&
mut
out_buffer_size
&
mut
in_buffer_size
&
mut
max_instances
)
;
if
result
=
=
FALSE
{
return
Err
(
io
:
:
Error
:
:
last_os_error
(
)
)
;
}
let
mut
end
=
PipeEnd
:
:
Client
;
let
mut
mode
=
PipeMode
:
:
Byte
;
if
flags
&
winbase
:
:
PIPE_SERVER_END
!
=
0
{
end
=
PipeEnd
:
:
Server
;
}
if
flags
&
winbase
:
:
PIPE_TYPE_MESSAGE
!
=
0
{
mode
=
PipeMode
:
:
Message
;
}
Ok
(
PipeInfo
{
end
mode
out_buffer_size
in_buffer_size
max_instances
}
)
}
