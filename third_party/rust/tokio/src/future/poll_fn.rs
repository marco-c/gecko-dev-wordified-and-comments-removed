#
!
[
allow
(
dead_code
)
]
use
std
:
:
fmt
;
use
std
:
:
future
:
:
Future
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
pub
struct
PollFn
<
F
>
{
f
:
F
}
impl
<
F
>
Unpin
for
PollFn
<
F
>
{
}
pub
fn
poll_fn
<
T
F
>
(
f
:
F
)
-
>
PollFn
<
F
>
where
F
:
FnMut
(
&
mut
Context
<
'
_
>
)
-
>
Poll
<
T
>
{
PollFn
{
f
}
}
impl
<
F
>
fmt
:
:
Debug
for
PollFn
<
F
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
PollFn
"
)
.
finish
(
)
}
}
impl
<
T
F
>
Future
for
PollFn
<
F
>
where
F
:
FnMut
(
&
mut
Context
<
'
_
>
)
-
>
Poll
<
T
>
{
type
Output
=
T
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
T
>
{
(
&
mut
self
.
f
)
(
cx
)
}
}
