use
std
:
:
io
:
:
{
self
SeekFrom
}
;
use
std
:
:
ops
:
:
DerefMut
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
pub
trait
AsyncSeek
{
fn
start_seek
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
position
:
SeekFrom
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
;
fn
poll_complete
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
u64
>
>
;
}
macro_rules
!
deref_async_seek
{
(
)
=
>
{
fn
start_seek
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
pos
:
SeekFrom
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Pin
:
:
new
(
&
mut
*
*
self
)
.
start_seek
(
cx
pos
)
}
fn
poll_complete
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
u64
>
>
{
Pin
:
:
new
(
&
mut
*
*
self
)
.
poll_complete
(
cx
)
}
}
}
impl
<
T
:
?
Sized
+
AsyncSeek
+
Unpin
>
AsyncSeek
for
Box
<
T
>
{
deref_async_seek
!
(
)
;
}
impl
<
T
:
?
Sized
+
AsyncSeek
+
Unpin
>
AsyncSeek
for
&
mut
T
{
deref_async_seek
!
(
)
;
}
impl
<
P
>
AsyncSeek
for
Pin
<
P
>
where
P
:
DerefMut
+
Unpin
P
:
:
Target
:
AsyncSeek
{
fn
start_seek
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
pos
:
SeekFrom
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
get_mut
(
)
.
as_mut
(
)
.
start_seek
(
cx
pos
)
}
fn
poll_complete
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
u64
>
>
{
self
.
get_mut
(
)
.
as_mut
(
)
.
poll_complete
(
cx
)
}
}
impl
<
T
:
AsRef
<
[
u8
]
>
+
Unpin
>
AsyncSeek
for
io
:
:
Cursor
<
T
>
{
fn
start_seek
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
pos
:
SeekFrom
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
io
:
:
Seek
:
:
seek
(
&
mut
*
self
pos
)
.
map
(
drop
)
)
}
fn
poll_complete
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
u64
>
>
{
Poll
:
:
Ready
(
Ok
(
self
.
get_mut
(
)
.
position
(
)
)
)
}
}
