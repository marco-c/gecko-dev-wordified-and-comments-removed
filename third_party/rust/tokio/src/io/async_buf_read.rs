use
crate
:
:
io
:
:
AsyncRead
;
use
std
:
:
io
;
use
std
:
:
ops
:
:
DerefMut
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
pub
trait
AsyncBufRead
:
AsyncRead
{
fn
poll_fill_buf
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
&
[
u8
]
>
>
;
fn
consume
(
self
:
Pin
<
&
mut
Self
>
amt
:
usize
)
;
}
macro_rules
!
deref_async_buf_read
{
(
)
=
>
{
fn
poll_fill_buf
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
&
[
u8
]
>
>
{
Pin
:
:
new
(
&
mut
*
*
self
.
get_mut
(
)
)
.
poll_fill_buf
(
cx
)
}
fn
consume
(
mut
self
:
Pin
<
&
mut
Self
>
amt
:
usize
)
{
Pin
:
:
new
(
&
mut
*
*
self
)
.
consume
(
amt
)
}
}
;
}
impl
<
T
:
?
Sized
+
AsyncBufRead
+
Unpin
>
AsyncBufRead
for
Box
<
T
>
{
deref_async_buf_read
!
(
)
;
}
impl
<
T
:
?
Sized
+
AsyncBufRead
+
Unpin
>
AsyncBufRead
for
&
mut
T
{
deref_async_buf_read
!
(
)
;
}
impl
<
P
>
AsyncBufRead
for
Pin
<
P
>
where
P
:
DerefMut
P
:
:
Target
:
AsyncBufRead
{
fn
poll_fill_buf
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
&
[
u8
]
>
>
{
crate
:
:
util
:
:
pin_as_deref_mut
(
self
)
.
poll_fill_buf
(
cx
)
}
fn
consume
(
self
:
Pin
<
&
mut
Self
>
amt
:
usize
)
{
crate
:
:
util
:
:
pin_as_deref_mut
(
self
)
.
consume
(
amt
)
;
}
}
impl
AsyncBufRead
for
&
[
u8
]
{
fn
poll_fill_buf
(
self
:
Pin
<
&
mut
Self
>
_cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
&
[
u8
]
>
>
{
Poll
:
:
Ready
(
Ok
(
*
self
)
)
}
fn
consume
(
mut
self
:
Pin
<
&
mut
Self
>
amt
:
usize
)
{
*
self
=
&
self
[
amt
.
.
]
;
}
}
impl
<
T
:
AsRef
<
[
u8
]
>
+
Unpin
>
AsyncBufRead
for
io
:
:
Cursor
<
T
>
{
fn
poll_fill_buf
(
self
:
Pin
<
&
mut
Self
>
_cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
&
[
u8
]
>
>
{
Poll
:
:
Ready
(
io
:
:
BufRead
:
:
fill_buf
(
self
.
get_mut
(
)
)
)
}
fn
consume
(
self
:
Pin
<
&
mut
Self
>
amt
:
usize
)
{
io
:
:
BufRead
:
:
consume
(
self
.
get_mut
(
)
amt
)
;
}
}
