use
crate
:
:
io
:
:
ReadBuf
;
use
std
:
:
mem
:
:
MaybeUninit
;
mod
private
{
pub
trait
Sealed
{
}
impl
Sealed
for
Vec
<
u8
>
{
}
impl
Sealed
for
&
mut
Vec
<
u8
>
{
}
}
pub
(
crate
)
trait
VecU8
:
AsMut
<
Vec
<
u8
>
>
+
private
:
:
Sealed
{
}
impl
VecU8
for
Vec
<
u8
>
{
}
impl
VecU8
for
&
mut
Vec
<
u8
>
{
}
#
[
derive
(
Debug
)
]
pub
(
crate
)
struct
VecWithInitialized
<
V
>
{
vec
:
V
num_initialized
:
usize
}
impl
VecWithInitialized
<
Vec
<
u8
>
>
{
#
[
cfg
(
feature
=
"
io
-
util
"
)
]
pub
(
crate
)
fn
take
(
&
mut
self
)
-
>
Vec
<
u8
>
{
self
.
num_initialized
=
0
;
std
:
:
mem
:
:
take
(
&
mut
self
.
vec
)
}
}
impl
<
V
>
VecWithInitialized
<
V
>
where
V
:
VecU8
{
pub
(
crate
)
fn
new
(
mut
vec
:
V
)
-
>
Self
{
Self
{
num_initialized
:
vec
.
as_mut
(
)
.
len
(
)
vec
}
}
pub
(
crate
)
fn
reserve
(
&
mut
self
num_bytes
:
usize
)
{
let
vec
=
self
.
vec
.
as_mut
(
)
;
if
vec
.
capacity
(
)
-
vec
.
len
(
)
>
=
num_bytes
{
return
;
}
self
.
num_initialized
=
vec
.
len
(
)
;
vec
.
reserve
(
num_bytes
)
;
}
#
[
cfg
(
feature
=
"
io
-
util
"
)
]
pub
(
crate
)
fn
is_empty
(
&
mut
self
)
-
>
bool
{
self
.
vec
.
as_mut
(
)
.
is_empty
(
)
}
pub
(
crate
)
fn
get_read_buf
<
'
a
>
(
&
'
a
mut
self
)
-
>
ReadBuf
<
'
a
>
{
let
num_initialized
=
self
.
num_initialized
;
let
vec
=
self
.
vec
.
as_mut
(
)
;
let
len
=
vec
.
len
(
)
;
let
cap
=
vec
.
capacity
(
)
;
let
ptr
=
vec
.
as_mut_ptr
(
)
.
cast
:
:
<
MaybeUninit
<
u8
>
>
(
)
;
let
slice
=
unsafe
{
std
:
:
slice
:
:
from_raw_parts_mut
:
:
<
'
a
MaybeUninit
<
u8
>
>
(
ptr
cap
)
}
;
let
mut
read_buf
=
ReadBuf
:
:
uninit
(
slice
)
;
unsafe
{
read_buf
.
assume_init
(
num_initialized
)
;
}
read_buf
.
set_filled
(
len
)
;
read_buf
}
pub
(
crate
)
fn
apply_read_buf
(
&
mut
self
parts
:
ReadBufParts
)
{
let
vec
=
self
.
vec
.
as_mut
(
)
;
assert_eq
!
(
vec
.
as_ptr
(
)
parts
.
ptr
)
;
unsafe
{
self
.
num_initialized
=
parts
.
initialized
;
vec
.
set_len
(
parts
.
len
)
;
}
}
}
pub
(
crate
)
struct
ReadBufParts
{
ptr
:
*
const
u8
len
:
usize
initialized
:
usize
}
pub
(
crate
)
fn
into_read_buf_parts
(
rb
:
ReadBuf
<
'
_
>
)
-
>
ReadBufParts
{
ReadBufParts
{
ptr
:
rb
.
filled
(
)
.
as_ptr
(
)
len
:
rb
.
filled
(
)
.
len
(
)
initialized
:
rb
.
initialized
(
)
.
len
(
)
}
}
