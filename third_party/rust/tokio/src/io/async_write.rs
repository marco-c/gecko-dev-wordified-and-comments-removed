use
bytes
:
:
Buf
;
use
std
:
:
io
;
use
std
:
:
ops
:
:
DerefMut
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
pub
trait
AsyncWrite
{
fn
poll_write
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
Result
<
usize
io
:
:
Error
>
>
;
fn
poll_flush
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Result
<
(
)
io
:
:
Error
>
>
;
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Result
<
(
)
io
:
:
Error
>
>
;
fn
poll_write_buf
<
B
:
Buf
>
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
B
)
-
>
Poll
<
Result
<
usize
io
:
:
Error
>
>
where
Self
:
Sized
{
if
!
buf
.
has_remaining
(
)
{
return
Poll
:
:
Ready
(
Ok
(
0
)
)
;
}
let
n
=
ready
!
(
self
.
poll_write
(
cx
buf
.
bytes
(
)
)
)
?
;
buf
.
advance
(
n
)
;
Poll
:
:
Ready
(
Ok
(
n
)
)
}
}
macro_rules
!
deref_async_write
{
(
)
=
>
{
fn
poll_write
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Pin
:
:
new
(
&
mut
*
*
self
)
.
poll_write
(
cx
buf
)
}
fn
poll_flush
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Pin
:
:
new
(
&
mut
*
*
self
)
.
poll_flush
(
cx
)
}
fn
poll_shutdown
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Pin
:
:
new
(
&
mut
*
*
self
)
.
poll_shutdown
(
cx
)
}
}
}
impl
<
T
:
?
Sized
+
AsyncWrite
+
Unpin
>
AsyncWrite
for
Box
<
T
>
{
deref_async_write
!
(
)
;
}
impl
<
T
:
?
Sized
+
AsyncWrite
+
Unpin
>
AsyncWrite
for
&
mut
T
{
deref_async_write
!
(
)
;
}
impl
<
P
>
AsyncWrite
for
Pin
<
P
>
where
P
:
DerefMut
+
Unpin
P
:
:
Target
:
AsyncWrite
{
fn
poll_write
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
get_mut
(
)
.
as_mut
(
)
.
poll_write
(
cx
buf
)
}
fn
poll_flush
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
get_mut
(
)
.
as_mut
(
)
.
poll_flush
(
cx
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
get_mut
(
)
.
as_mut
(
)
.
poll_shutdown
(
cx
)
}
}
impl
AsyncWrite
for
Vec
<
u8
>
{
fn
poll_write
(
self
:
Pin
<
&
mut
Self
>
_cx
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
get_mut
(
)
.
extend_from_slice
(
buf
)
;
Poll
:
:
Ready
(
Ok
(
buf
.
len
(
)
)
)
}
fn
poll_flush
(
self
:
Pin
<
&
mut
Self
>
_cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
_cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
}
impl
AsyncWrite
for
io
:
:
Cursor
<
&
mut
[
u8
]
>
{
fn
poll_write
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Poll
:
:
Ready
(
io
:
:
Write
:
:
write
(
&
mut
*
self
buf
)
)
}
fn
poll_flush
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
io
:
:
Write
:
:
flush
(
&
mut
*
self
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
poll_flush
(
cx
)
}
}
impl
AsyncWrite
for
io
:
:
Cursor
<
&
mut
Vec
<
u8
>
>
{
fn
poll_write
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Poll
:
:
Ready
(
io
:
:
Write
:
:
write
(
&
mut
*
self
buf
)
)
}
fn
poll_flush
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
io
:
:
Write
:
:
flush
(
&
mut
*
self
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
poll_flush
(
cx
)
}
}
impl
AsyncWrite
for
io
:
:
Cursor
<
Vec
<
u8
>
>
{
fn
poll_write
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Poll
:
:
Ready
(
io
:
:
Write
:
:
write
(
&
mut
*
self
buf
)
)
}
fn
poll_flush
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
io
:
:
Write
:
:
flush
(
&
mut
*
self
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
poll_flush
(
cx
)
}
}
impl
AsyncWrite
for
io
:
:
Cursor
<
Box
<
[
u8
]
>
>
{
fn
poll_write
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Poll
:
:
Ready
(
io
:
:
Write
:
:
write
(
&
mut
*
self
buf
)
)
}
fn
poll_flush
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
io
:
:
Write
:
:
flush
(
&
mut
*
self
)
)
}
fn
poll_shutdown
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
poll_flush
(
cx
)
}
}
