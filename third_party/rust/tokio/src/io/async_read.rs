use
bytes
:
:
BufMut
;
use
std
:
:
io
;
use
std
:
:
mem
:
:
MaybeUninit
;
use
std
:
:
ops
:
:
DerefMut
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
pub
trait
AsyncRead
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
buf
:
&
mut
[
MaybeUninit
<
u8
>
]
)
-
>
bool
{
for
x
in
buf
{
*
x
.
as_mut_ptr
(
)
=
0
;
}
true
}
fn
poll_read
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
;
fn
poll_read_buf
<
B
:
BufMut
>
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
B
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
where
Self
:
Sized
{
if
!
buf
.
has_remaining_mut
(
)
{
return
Poll
:
:
Ready
(
Ok
(
0
)
)
;
}
unsafe
{
let
n
=
{
let
b
=
buf
.
bytes_mut
(
)
;
self
.
prepare_uninitialized_buffer
(
b
)
;
let
b
=
&
mut
*
(
b
as
*
mut
[
MaybeUninit
<
u8
>
]
as
*
mut
[
u8
]
)
;
let
n
=
ready
!
(
self
.
poll_read
(
cx
b
)
)
?
;
assert
!
(
n
<
=
b
.
len
(
)
"
Bad
AsyncRead
implementation
more
bytes
were
reported
as
read
than
the
buffer
can
hold
"
)
;
n
}
;
buf
.
advance_mut
(
n
)
;
Poll
:
:
Ready
(
Ok
(
n
)
)
}
}
}
macro_rules
!
deref_async_read
{
(
)
=
>
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
buf
:
&
mut
[
MaybeUninit
<
u8
>
]
)
-
>
bool
{
(
*
*
self
)
.
prepare_uninitialized_buffer
(
buf
)
}
fn
poll_read
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Pin
:
:
new
(
&
mut
*
*
self
)
.
poll_read
(
cx
buf
)
}
}
}
impl
<
T
:
?
Sized
+
AsyncRead
+
Unpin
>
AsyncRead
for
Box
<
T
>
{
deref_async_read
!
(
)
;
}
impl
<
T
:
?
Sized
+
AsyncRead
+
Unpin
>
AsyncRead
for
&
mut
T
{
deref_async_read
!
(
)
;
}
impl
<
P
>
AsyncRead
for
Pin
<
P
>
where
P
:
DerefMut
+
Unpin
P
:
:
Target
:
AsyncRead
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
buf
:
&
mut
[
MaybeUninit
<
u8
>
]
)
-
>
bool
{
(
*
*
self
)
.
prepare_uninitialized_buffer
(
buf
)
}
fn
poll_read
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
self
.
get_mut
(
)
.
as_mut
(
)
.
poll_read
(
cx
buf
)
}
}
impl
AsyncRead
for
&
[
u8
]
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
_buf
:
&
mut
[
MaybeUninit
<
u8
>
]
)
-
>
bool
{
false
}
fn
poll_read
(
self
:
Pin
<
&
mut
Self
>
_cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Poll
:
:
Ready
(
io
:
:
Read
:
:
read
(
self
.
get_mut
(
)
buf
)
)
}
}
impl
<
T
:
AsRef
<
[
u8
]
>
+
Unpin
>
AsyncRead
for
io
:
:
Cursor
<
T
>
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
_buf
:
&
mut
[
MaybeUninit
<
u8
>
]
)
-
>
bool
{
false
}
fn
poll_read
(
self
:
Pin
<
&
mut
Self
>
_cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Poll
:
:
Ready
(
io
:
:
Read
:
:
read
(
self
.
get_mut
(
)
buf
)
)
}
}
