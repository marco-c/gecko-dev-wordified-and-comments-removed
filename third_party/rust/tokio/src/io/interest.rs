#
!
[
cfg_attr
(
not
(
feature
=
"
net
"
)
allow
(
dead_code
unreachable_pub
)
)
]
use
crate
:
:
io
:
:
ready
:
:
Ready
;
use
std
:
:
fmt
;
use
std
:
:
ops
;
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
net
"
)
)
)
]
#
[
derive
(
Clone
Copy
Eq
PartialEq
)
]
pub
struct
Interest
(
mio
:
:
Interest
)
;
impl
Interest
{
cfg_aio
!
{
/
/
/
Interest
for
POSIX
AIO
.
#
[
cfg
(
target_os
=
"
freebsd
"
)
]
pub
const
AIO
:
Interest
=
Interest
(
mio
:
:
Interest
:
:
AIO
)
;
/
/
/
Interest
for
POSIX
AIO
.
#
[
cfg
(
not
(
target_os
=
"
freebsd
"
)
)
]
pub
const
AIO
:
Interest
=
Interest
(
mio
:
:
Interest
:
:
READABLE
)
;
/
/
/
Interest
for
POSIX
AIO
lio_listio
events
.
#
[
cfg
(
target_os
=
"
freebsd
"
)
]
pub
const
LIO
:
Interest
=
Interest
(
mio
:
:
Interest
:
:
LIO
)
;
/
/
/
Interest
for
POSIX
AIO
lio_listio
events
.
#
[
cfg
(
not
(
target_os
=
"
freebsd
"
)
)
]
pub
const
LIO
:
Interest
=
Interest
(
mio
:
:
Interest
:
:
READABLE
)
;
}
pub
const
READABLE
:
Interest
=
Interest
(
mio
:
:
Interest
:
:
READABLE
)
;
pub
const
WRITABLE
:
Interest
=
Interest
(
mio
:
:
Interest
:
:
WRITABLE
)
;
#
[
cfg
(
any
(
target_os
=
"
linux
"
target_os
=
"
android
"
)
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
any
(
target_os
=
"
linux
"
target_os
=
"
android
"
)
)
)
)
]
pub
const
PRIORITY
:
Interest
=
Interest
(
mio
:
:
Interest
:
:
PRIORITY
)
;
pub
const
fn
is_readable
(
self
)
-
>
bool
{
self
.
0
.
is_readable
(
)
}
pub
const
fn
is_writable
(
self
)
-
>
bool
{
self
.
0
.
is_writable
(
)
}
#
[
cfg
(
any
(
target_os
=
"
linux
"
target_os
=
"
android
"
)
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
any
(
target_os
=
"
linux
"
target_os
=
"
android
"
)
)
)
)
]
pub
const
fn
is_priority
(
self
)
-
>
bool
{
self
.
0
.
is_priority
(
)
}
pub
const
fn
add
(
self
other
:
Interest
)
-
>
Interest
{
Interest
(
self
.
0
.
add
(
other
.
0
)
)
}
pub
(
crate
)
const
fn
to_mio
(
self
)
-
>
mio
:
:
Interest
{
self
.
0
}
pub
(
crate
)
fn
mask
(
self
)
-
>
Ready
{
match
self
{
Interest
:
:
READABLE
=
>
Ready
:
:
READABLE
|
Ready
:
:
READ_CLOSED
Interest
:
:
WRITABLE
=
>
Ready
:
:
WRITABLE
|
Ready
:
:
WRITE_CLOSED
#
[
cfg
(
any
(
target_os
=
"
linux
"
target_os
=
"
android
"
)
)
]
Interest
:
:
PRIORITY
=
>
Ready
:
:
PRIORITY
|
Ready
:
:
READ_CLOSED
_
=
>
Ready
:
:
EMPTY
}
}
}
impl
ops
:
:
BitOr
for
Interest
{
type
Output
=
Self
;
#
[
inline
]
fn
bitor
(
self
other
:
Self
)
-
>
Self
{
self
.
add
(
other
)
}
}
impl
ops
:
:
BitOrAssign
for
Interest
{
#
[
inline
]
fn
bitor_assign
(
&
mut
self
other
:
Self
)
{
self
.
0
=
(
*
self
|
other
)
.
0
;
}
}
impl
fmt
:
:
Debug
for
Interest
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
0
.
fmt
(
fmt
)
}
}
