#
!
[
allow
(
unreachable_pub
)
]
use
crate
:
:
{
runtime
:
:
context
task
:
:
JoinHandle
}
;
use
std
:
:
future
:
:
Future
;
#
[
derive
(
Default
Debug
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
all
(
tokio_unstable
feature
=
"
tracing
"
)
)
)
)
]
pub
struct
Builder
<
'
a
>
{
name
:
Option
<
&
'
a
str
>
}
impl
<
'
a
>
Builder
<
'
a
>
{
pub
fn
new
(
)
-
>
Self
{
Self
:
:
default
(
)
}
pub
fn
name
(
&
self
name
:
&
'
a
str
)
-
>
Self
{
Self
{
name
:
Some
(
name
)
}
}
#
[
track_caller
]
pub
fn
spawn
<
Fut
>
(
self
future
:
Fut
)
-
>
JoinHandle
<
Fut
:
:
Output
>
where
Fut
:
Future
+
Send
+
'
static
Fut
:
:
Output
:
Send
+
'
static
{
super
:
:
spawn
:
:
spawn_inner
(
future
self
.
name
)
}
#
[
track_caller
]
pub
fn
spawn_local
<
Fut
>
(
self
future
:
Fut
)
-
>
JoinHandle
<
Fut
:
:
Output
>
where
Fut
:
Future
+
'
static
Fut
:
:
Output
:
'
static
{
super
:
:
local
:
:
spawn_local_inner
(
future
self
.
name
)
}
#
[
track_caller
]
pub
fn
spawn_blocking
<
Function
Output
>
(
self
function
:
Function
)
-
>
JoinHandle
<
Output
>
where
Function
:
FnOnce
(
)
-
>
Output
+
Send
+
'
static
Output
:
Send
+
'
static
{
use
crate
:
:
runtime
:
:
Mandatory
;
let
(
join_handle
_was_spawned
)
=
context
:
:
current
(
)
.
spawn_blocking_inner
(
function
Mandatory
:
:
NonMandatory
self
.
name
)
;
join_handle
}
}
