use
pin_project_lite
:
:
pin_project
;
use
std
:
:
future
:
:
Future
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
pin_project
!
{
/
/
/
Future
for
the
[
unconstrained
]
(
unconstrained
)
method
.
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
rt
"
)
)
)
]
#
[
must_use
=
"
Unconstrained
does
nothing
unless
polled
"
]
pub
struct
Unconstrained
<
F
>
{
#
[
pin
]
inner
:
F
}
}
impl
<
F
>
Future
for
Unconstrained
<
F
>
where
F
:
Future
{
type
Output
=
<
F
as
Future
>
:
:
Output
;
cfg_coop
!
{
fn
poll
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
let
inner
=
self
.
project
(
)
.
inner
;
crate
:
:
coop
:
:
with_unconstrained
(
|
|
inner
.
poll
(
cx
)
)
}
}
cfg_not_coop
!
{
fn
poll
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
let
inner
=
self
.
project
(
)
.
inner
;
inner
.
poll
(
cx
)
}
}
}
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
rt
"
)
)
)
]
pub
fn
unconstrained
<
F
>
(
inner
:
F
)
-
>
Unconstrained
<
F
>
{
Unconstrained
{
inner
}
}
