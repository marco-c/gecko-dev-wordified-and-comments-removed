#
!
[
cfg_attr
(
not
(
feature
=
"
full
"
)
allow
(
dead_code
)
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
rt
"
)
allow
(
unreachable_pub
)
)
]
cfg_rt
!
{
mod
consume_budget
;
pub
use
consume_budget
:
:
consume_budget
;
mod
unconstrained
;
pub
use
unconstrained
:
:
{
unconstrained
Unconstrained
}
;
}
use
crate
:
:
runtime
:
:
context
;
#
[
derive
(
Debug
Copy
Clone
)
]
pub
(
crate
)
struct
Budget
(
Option
<
u8
>
)
;
pub
(
crate
)
struct
BudgetDecrement
{
success
:
bool
hit_zero
:
bool
}
impl
Budget
{
const
fn
initial
(
)
-
>
Budget
{
Budget
(
Some
(
128
)
)
}
pub
(
crate
)
const
fn
unconstrained
(
)
-
>
Budget
{
Budget
(
None
)
}
fn
has_remaining
(
self
)
-
>
bool
{
self
.
0
.
map_or
(
true
|
budget
|
budget
>
0
)
}
}
#
[
inline
(
always
)
]
pub
(
crate
)
fn
budget
<
R
>
(
f
:
impl
FnOnce
(
)
-
>
R
)
-
>
R
{
with_budget
(
Budget
:
:
initial
(
)
f
)
}
#
[
inline
(
always
)
]
pub
(
crate
)
fn
with_unconstrained
<
R
>
(
f
:
impl
FnOnce
(
)
-
>
R
)
-
>
R
{
with_budget
(
Budget
:
:
unconstrained
(
)
f
)
}
#
[
inline
(
always
)
]
fn
with_budget
<
R
>
(
budget
:
Budget
f
:
impl
FnOnce
(
)
-
>
R
)
-
>
R
{
struct
ResetGuard
{
prev
:
Budget
}
impl
Drop
for
ResetGuard
{
fn
drop
(
&
mut
self
)
{
let
_
=
context
:
:
budget
(
|
cell
|
{
cell
.
set
(
self
.
prev
)
;
}
)
;
}
}
#
[
allow
(
unused_variables
)
]
let
maybe_guard
=
context
:
:
budget
(
|
cell
|
{
let
prev
=
cell
.
get
(
)
;
cell
.
set
(
budget
)
;
ResetGuard
{
prev
}
}
)
;
f
(
)
}
#
[
inline
(
always
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
rt
"
)
)
)
]
pub
fn
has_budget_remaining
(
)
-
>
bool
{
context
:
:
budget
(
|
cell
|
cell
.
get
(
)
.
has_remaining
(
)
)
.
unwrap_or
(
true
)
}
cfg_rt_multi_thread
!
{
/
/
/
Sets
the
current
task
'
s
budget
.
pub
(
crate
)
fn
set
(
budget
:
Budget
)
{
let
_
=
context
:
:
budget
(
|
cell
|
cell
.
set
(
budget
)
)
;
}
}
cfg_rt
!
{
/
/
/
Forcibly
removes
the
budgeting
constraints
early
.
/
/
/
/
/
/
Returns
the
remaining
budget
pub
(
crate
)
fn
stop
(
)
-
>
Budget
{
context
:
:
budget
(
|
cell
|
{
let
prev
=
cell
.
get
(
)
;
cell
.
set
(
Budget
:
:
unconstrained
(
)
)
;
prev
}
)
.
unwrap_or
(
Budget
:
:
unconstrained
(
)
)
}
}
cfg_coop
!
{
use
pin_project_lite
:
:
pin_project
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
future
:
:
Future
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
ready
Context
Poll
}
;
#
[
must_use
]
pub
(
crate
)
struct
RestoreOnPending
(
Cell
<
Budget
>
)
;
impl
RestoreOnPending
{
pub
(
crate
)
fn
made_progress
(
&
self
)
{
self
.
0
.
set
(
Budget
:
:
unconstrained
(
)
)
;
}
}
impl
Drop
for
RestoreOnPending
{
fn
drop
(
&
mut
self
)
{
/
/
Don
'
t
reset
if
budget
was
unconstrained
or
if
we
made
progress
.
/
/
They
are
both
represented
as
the
remembered
budget
being
unconstrained
.
let
budget
=
self
.
0
.
get
(
)
;
if
!
budget
.
is_unconstrained
(
)
{
let
_
=
context
:
:
budget
(
|
cell
|
{
cell
.
set
(
budget
)
;
}
)
;
}
}
}
/
/
/
Returns
Poll
:
:
Pending
if
the
current
task
has
exceeded
its
budget
and
should
yield
.
/
/
/
/
/
/
When
you
call
this
method
the
current
budget
is
decremented
.
However
to
ensure
that
/
/
/
progress
is
made
every
time
a
task
is
polled
the
budget
is
automatically
restored
to
its
/
/
/
former
value
if
the
returned
RestoreOnPending
is
dropped
.
It
is
the
caller
'
s
/
/
/
responsibility
to
call
RestoreOnPending
:
:
made_progress
if
it
made
progress
to
ensure
/
/
/
that
the
budget
empties
appropriately
.
/
/
/
/
/
/
Note
that
RestoreOnPending
restores
the
budget
*
*
as
it
was
before
poll_proceed
*
*
.
#
[
inline
]
pub
(
crate
)
fn
poll_proceed
(
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
RestoreOnPending
>
{
context
:
:
budget
(
|
cell
|
{
let
mut
budget
=
cell
.
get
(
)
;
let
decrement
=
budget
.
decrement
(
)
;
if
decrement
.
success
{
let
restore
=
RestoreOnPending
(
Cell
:
:
new
(
cell
.
get
(
)
)
)
;
cell
.
set
(
budget
)
;
/
/
avoid
double
counting
if
decrement
.
hit_zero
{
inc_budget_forced_yield_count
(
)
;
}
Poll
:
:
Ready
(
restore
)
}
else
{
register_waker
(
cx
)
;
Poll
:
:
Pending
}
}
)
.
unwrap_or
(
Poll
:
:
Ready
(
RestoreOnPending
(
Cell
:
:
new
(
Budget
:
:
unconstrained
(
)
)
)
)
)
}
/
/
/
Returns
Poll
:
:
Ready
if
the
current
task
has
budget
to
consume
and
Poll
:
:
Pending
otherwise
.
/
/
/
/
/
/
Note
that
in
contrast
to
poll_proceed
this
method
does
not
consume
any
budget
and
is
used
when
/
/
/
polling
for
budget
availability
.
#
[
inline
]
pub
(
crate
)
fn
poll_budget_available
(
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
(
)
>
{
if
has_budget_remaining
(
)
{
Poll
:
:
Ready
(
(
)
)
}
else
{
register_waker
(
cx
)
;
Poll
:
:
Pending
}
}
cfg_rt
!
{
cfg_unstable_metrics
!
{
#
[
inline
(
always
)
]
fn
inc_budget_forced_yield_count
(
)
{
let
_
=
context
:
:
with_current
(
|
handle
|
{
handle
.
scheduler_metrics
(
)
.
inc_budget_forced_yield_count
(
)
;
}
)
;
}
}
cfg_not_unstable_metrics
!
{
#
[
inline
(
always
)
]
fn
inc_budget_forced_yield_count
(
)
{
}
}
fn
register_waker
(
cx
:
&
mut
Context
<
'
_
>
)
{
context
:
:
defer
(
cx
.
waker
(
)
)
;
}
}
cfg_not_rt
!
{
#
[
inline
(
always
)
]
fn
inc_budget_forced_yield_count
(
)
{
}
fn
register_waker
(
cx
:
&
mut
Context
<
'
_
>
)
{
cx
.
waker
(
)
.
wake_by_ref
(
)
}
}
impl
Budget
{
/
/
/
Decrements
the
budget
.
Returns
true
if
successful
.
Decrementing
fails
/
/
/
when
there
is
not
enough
remaining
budget
.
fn
decrement
(
&
mut
self
)
-
>
BudgetDecrement
{
if
let
Some
(
num
)
=
&
mut
self
.
0
{
if
*
num
>
0
{
*
num
-
=
1
;
let
hit_zero
=
*
num
=
=
0
;
BudgetDecrement
{
success
:
true
hit_zero
}
}
else
{
BudgetDecrement
{
success
:
false
hit_zero
:
false
}
}
}
else
{
BudgetDecrement
{
success
:
true
hit_zero
:
false
}
}
}
fn
is_unconstrained
(
self
)
-
>
bool
{
self
.
0
.
is_none
(
)
}
}
pin_project
!
{
/
/
/
Future
wrapper
to
ensure
cooperative
scheduling
.
/
/
/
/
/
/
When
being
polled
poll_proceed
is
called
before
the
inner
future
is
polled
to
check
/
/
/
if
the
inner
future
has
exceeded
its
budget
.
If
the
inner
future
resolves
this
will
/
/
/
automatically
call
RestoreOnPending
:
:
made_progress
before
resolving
this
future
with
/
/
/
the
result
of
the
inner
one
.
If
polling
the
inner
future
is
pending
polling
this
future
/
/
/
type
will
also
return
a
Poll
:
:
Pending
.
#
[
must_use
=
"
futures
do
nothing
unless
polled
"
]
pub
(
crate
)
struct
Coop
<
F
:
Future
>
{
#
[
pin
]
pub
(
crate
)
fut
:
F
}
}
impl
<
F
:
Future
>
Future
for
Coop
<
F
>
{
type
Output
=
F
:
:
Output
;
fn
poll
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
let
coop
=
ready
!
(
poll_proceed
(
cx
)
)
;
let
me
=
self
.
project
(
)
;
if
let
Poll
:
:
Ready
(
ret
)
=
me
.
fut
.
poll
(
cx
)
{
coop
.
made_progress
(
)
;
Poll
:
:
Ready
(
ret
)
}
else
{
Poll
:
:
Pending
}
}
}
/
/
/
Run
a
future
with
a
budget
constraint
for
cooperative
scheduling
.
/
/
/
If
the
future
exceeds
its
budget
while
being
polled
control
is
yielded
back
to
the
/
/
/
runtime
.
#
[
inline
]
pub
(
crate
)
fn
cooperative
<
F
:
Future
>
(
fut
:
F
)
-
>
Coop
<
F
>
{
Coop
{
fut
}
}
}
#
[
cfg
(
all
(
test
not
(
loom
)
)
)
]
mod
test
{
use
super
:
:
*
;
#
[
cfg
(
all
(
target_family
=
"
wasm
"
not
(
target_os
=
"
wasi
"
)
)
)
]
use
wasm_bindgen_test
:
:
wasm_bindgen_test
as
test
;
fn
get
(
)
-
>
Budget
{
context
:
:
budget
(
|
cell
|
cell
.
get
(
)
)
.
unwrap_or
(
Budget
:
:
unconstrained
(
)
)
}
#
[
test
]
fn
budgeting
(
)
{
use
std
:
:
future
:
:
poll_fn
;
use
tokio_test
:
:
*
;
assert
!
(
get
(
)
.
0
.
is_none
(
)
)
;
let
coop
=
assert_ready
!
(
task
:
:
spawn
(
(
)
)
.
enter
(
|
cx
_
|
poll_proceed
(
cx
)
)
)
;
assert
!
(
get
(
)
.
0
.
is_none
(
)
)
;
drop
(
coop
)
;
assert
!
(
get
(
)
.
0
.
is_none
(
)
)
;
budget
(
|
|
{
assert_eq
!
(
get
(
)
.
0
Budget
:
:
initial
(
)
.
0
)
;
let
coop
=
assert_ready
!
(
task
:
:
spawn
(
(
)
)
.
enter
(
|
cx
_
|
poll_proceed
(
cx
)
)
)
;
assert_eq
!
(
get
(
)
.
0
.
unwrap
(
)
Budget
:
:
initial
(
)
.
0
.
unwrap
(
)
-
1
)
;
drop
(
coop
)
;
assert_eq
!
(
get
(
)
.
0
Budget
:
:
initial
(
)
.
0
)
;
let
coop
=
assert_ready
!
(
task
:
:
spawn
(
(
)
)
.
enter
(
|
cx
_
|
poll_proceed
(
cx
)
)
)
;
assert_eq
!
(
get
(
)
.
0
.
unwrap
(
)
Budget
:
:
initial
(
)
.
0
.
unwrap
(
)
-
1
)
;
coop
.
made_progress
(
)
;
drop
(
coop
)
;
assert_eq
!
(
get
(
)
.
0
.
unwrap
(
)
Budget
:
:
initial
(
)
.
0
.
unwrap
(
)
-
1
)
;
let
coop
=
assert_ready
!
(
task
:
:
spawn
(
(
)
)
.
enter
(
|
cx
_
|
poll_proceed
(
cx
)
)
)
;
assert_eq
!
(
get
(
)
.
0
.
unwrap
(
)
Budget
:
:
initial
(
)
.
0
.
unwrap
(
)
-
2
)
;
coop
.
made_progress
(
)
;
drop
(
coop
)
;
assert_eq
!
(
get
(
)
.
0
.
unwrap
(
)
Budget
:
:
initial
(
)
.
0
.
unwrap
(
)
-
2
)
;
budget
(
|
|
{
assert_eq
!
(
get
(
)
.
0
Budget
:
:
initial
(
)
.
0
)
;
let
coop
=
assert_ready
!
(
task
:
:
spawn
(
(
)
)
.
enter
(
|
cx
_
|
poll_proceed
(
cx
)
)
)
;
assert_eq
!
(
get
(
)
.
0
.
unwrap
(
)
Budget
:
:
initial
(
)
.
0
.
unwrap
(
)
-
1
)
;
coop
.
made_progress
(
)
;
drop
(
coop
)
;
assert_eq
!
(
get
(
)
.
0
.
unwrap
(
)
Budget
:
:
initial
(
)
.
0
.
unwrap
(
)
-
1
)
;
}
)
;
assert_eq
!
(
get
(
)
.
0
.
unwrap
(
)
Budget
:
:
initial
(
)
.
0
.
unwrap
(
)
-
2
)
;
}
)
;
assert
!
(
get
(
)
.
0
.
is_none
(
)
)
;
budget
(
|
|
{
let
n
=
get
(
)
.
0
.
unwrap
(
)
;
for
_
in
0
.
.
n
{
let
coop
=
assert_ready
!
(
task
:
:
spawn
(
(
)
)
.
enter
(
|
cx
_
|
poll_proceed
(
cx
)
)
)
;
coop
.
made_progress
(
)
;
}
let
mut
task
=
task
:
:
spawn
(
poll_fn
(
|
cx
|
{
let
coop
=
std
:
:
task
:
:
ready
!
(
poll_proceed
(
cx
)
)
;
coop
.
made_progress
(
)
;
Poll
:
:
Ready
(
(
)
)
}
)
)
;
assert_pending
!
(
task
.
poll
(
)
)
;
}
)
;
}
}
