use
ffi_support
:
:
implement_into_ffi_by_pointer
;
use
interrupt_support
:
:
Interruptee
;
use
rusqlite
:
:
InterruptHandle
;
use
std
:
:
sync
:
:
{
atomic
:
:
{
AtomicUsize
Ordering
}
Arc
}
;
pub
struct
SqlInterruptHandle
{
db_handle
:
InterruptHandle
interrupt_counter
:
Arc
<
AtomicUsize
>
}
impl
SqlInterruptHandle
{
pub
fn
new
(
db_handle
:
InterruptHandle
interrupt_counter
:
Arc
<
AtomicUsize
>
)
-
>
SqlInterruptHandle
{
SqlInterruptHandle
{
db_handle
interrupt_counter
}
}
pub
fn
interrupt
(
&
self
)
{
self
.
interrupt_counter
.
fetch_add
(
1
Ordering
:
:
SeqCst
)
;
self
.
db_handle
.
interrupt
(
)
;
}
}
implement_into_ffi_by_pointer
!
(
SqlInterruptHandle
)
;
#
[
derive
(
Debug
)
]
pub
struct
SqlInterruptScope
{
start_value
:
usize
ptr
:
Arc
<
AtomicUsize
>
}
impl
SqlInterruptScope
{
#
[
inline
]
pub
fn
new
(
ptr
:
Arc
<
AtomicUsize
>
)
-
>
Self
{
let
start_value
=
ptr
.
load
(
Ordering
:
:
SeqCst
)
;
Self
{
start_value
ptr
}
}
#
[
inline
]
pub
fn
err_if_interrupted
(
&
self
)
-
>
Result
<
(
)
interrupt_support
:
:
Interrupted
>
{
<
Self
as
Interruptee
>
:
:
err_if_interrupted
(
self
)
}
}
impl
Interruptee
for
SqlInterruptScope
{
#
[
inline
]
fn
was_interrupted
(
&
self
)
-
>
bool
{
self
.
ptr
.
load
(
Ordering
:
:
SeqCst
)
!
=
self
.
start_value
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
#
[
test
]
fn
test_sync_send
(
)
{
fn
is_sync
<
T
:
Sync
>
(
)
{
}
fn
is_send
<
T
:
Send
>
(
)
{
}
is_sync
:
:
<
SqlInterruptHandle
>
(
)
;
is_send
:
:
<
SqlInterruptHandle
>
(
)
;
}
}
