use
Rng
;
use
distributions
:
:
{
Distribution
OpenClosed01
}
;
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
Pareto
{
scale
:
f64
inv_neg_shape
:
f64
}
impl
Pareto
{
pub
fn
new
(
scale
:
f64
shape
:
f64
)
-
>
Pareto
{
assert
!
(
(
scale
>
0
.
)
&
(
shape
>
0
.
)
)
;
Pareto
{
scale
inv_neg_shape
:
-
1
.
0
/
shape
}
}
}
impl
Distribution
<
f64
>
for
Pareto
{
fn
sample
<
R
:
Rng
+
?
Sized
>
(
&
self
rng
:
&
mut
R
)
-
>
f64
{
let
u
:
f64
=
rng
.
sample
(
OpenClosed01
)
;
self
.
scale
*
u
.
powf
(
self
.
inv_neg_shape
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
distributions
:
:
Distribution
;
use
super
:
:
Pareto
;
#
[
test
]
#
[
should_panic
]
fn
invalid
(
)
{
Pareto
:
:
new
(
0
.
0
.
)
;
}
#
[
test
]
fn
sample
(
)
{
let
scale
=
1
.
0
;
let
shape
=
2
.
0
;
let
d
=
Pareto
:
:
new
(
scale
shape
)
;
let
mut
rng
=
:
:
test
:
:
rng
(
1
)
;
for
_
in
0
.
.
1000
{
let
r
=
d
.
sample
(
&
mut
rng
)
;
assert
!
(
r
>
=
scale
)
;
}
}
}
