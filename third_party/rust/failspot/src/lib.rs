#
!
[
cfg_attr
(
feature
=
"
enabled
"
doc
=
r
#
"
#
Testing
code
Testing
code
should
see
the
documentation
for
the
[
testing
]
module
.
"
#
)
]
#
!
[
forbid
(
missing_docs
)
]
#
[
cfg
(
feature
=
"
enabled
"
)
]
pub
mod
testing
;
#
[
cfg
(
feature
=
"
enabled
"
)
]
#
[
allow
(
clippy
:
:
crate_in_macro_def
)
]
#
[
macro_export
]
macro_rules
!
failspot
{
(
if
<
e
:
ty
>
:
:
n
:
ident
{
(
enabled
:
tt
)
*
}
(
else
{
(
disabled
:
tt
)
*
}
)
?
)
=
>
{
{
if
crate
:
:
failspot
!
(
<
e
>
:
:
n
)
{
(
enabled
)
*
}
(
else
{
(
disabled
)
*
}
)
?
}
}
;
(
if
n
:
ident
{
(
enabled
:
tt
)
*
}
(
else
{
(
disabled
:
tt
)
*
}
)
?
)
=
>
{
crate
:
:
failspot
!
(
if
<
crate
:
:
FailSpotName
>
:
:
n
{
(
enabled
)
*
}
(
else
{
(
disabled
)
*
}
)
?
)
}
;
(
<
e
:
ty
>
:
:
n
:
ident
bail
(
err
:
expr
)
)
=
>
{
{
if
crate
:
:
failspot
!
(
<
e
>
:
:
n
)
{
return
Err
(
err
.
into
(
)
)
;
}
}
}
;
(
n
:
ident
bail
(
err
:
expr
)
)
=
>
{
crate
:
:
failspot
!
(
<
crate
:
:
FailSpotName
>
:
:
n
bail
(
err
)
)
}
;
(
<
e
:
ty
>
:
:
n
:
ident
)
=
>
{
{
<
e
>
:
:
enabled
(
<
e
>
:
:
n
)
}
}
;
(
n
:
ident
)
=
>
{
crate
:
:
failspot
!
(
<
crate
:
:
FailSpotName
>
:
:
n
)
}
;
(
<
e
:
ty
>
:
:
n
:
ident
(
enabled
:
tt
)
+
)
=
>
{
{
if
crate
:
:
failspot
!
(
<
e
>
:
:
n
)
{
(
enabled
)
+
}
}
}
;
(
n
:
ident
(
enabled
:
tt
)
+
)
=
>
{
crate
:
:
failspot
!
(
<
crate
:
:
FailSpotName
>
:
:
n
(
enabled
)
+
)
}
}
#
[
cfg
(
not
(
feature
=
"
enabled
"
)
)
]
#
[
allow
(
clippy
:
:
crate_in_macro_def
)
]
#
[
macro_export
]
macro_rules
!
failspot
{
(
if
<
e
:
ty
>
:
:
n
:
ident
{
(
enabled
:
tt
)
*
}
(
else
{
(
disabled
:
tt
)
*
}
)
?
)
=
>
{
{
(
(
disabled
)
*
)
?
}
}
;
(
if
n
:
ident
{
(
enabled
:
tt
)
*
}
(
else
{
(
disabled
:
tt
)
*
}
)
?
)
=
>
{
crate
:
:
failspot
!
(
if
<
crate
:
:
FailSpotName
>
:
:
n
{
(
enabled
)
*
}
(
else
{
(
disabled
)
*
}
)
?
)
}
;
(
<
e
:
ty
>
:
:
n
:
ident
bail
(
err
:
expr
)
)
=
>
{
{
}
}
;
(
n
:
ident
bail
(
err
:
expr
)
)
=
>
{
crate
:
:
failspot
!
(
<
crate
:
:
FailSpotName
>
:
:
n
bail
(
err
)
)
}
;
(
<
e
:
ty
>
:
:
n
:
ident
)
=
>
{
false
}
;
(
n
:
ident
)
=
>
{
crate
:
:
failspot
!
(
<
crate
:
:
FailSpotName
>
:
:
n
)
}
;
(
<
e
:
ty
>
:
:
n
:
ident
(
enabled
:
tt
)
+
)
=
>
{
{
}
}
;
(
n
:
ident
(
enabled
:
tt
)
+
)
=
>
{
crate
:
:
failspot
!
(
<
crate
:
:
FailSpotName
>
:
:
n
(
enabled
)
+
)
}
}
#
[
cfg
(
feature
=
"
enabled
"
)
]
#
[
macro_export
]
macro_rules
!
failspot_name
{
{
(
#
[
m
:
meta
]
)
*
p
:
vis
enum
n
:
ident
{
(
(
#
[
a
:
meta
]
)
*
k
:
ident
)
+
(
)
*
}
}
=
>
{
crate
:
:
flagset
:
:
flags
!
{
(
#
[
m
]
)
*
p
enum
n
:
usize
{
(
(
#
[
a
]
)
*
k
)
+
}
}
crate
:
:
failspot_global
!
(
n
)
;
}
}
#
[
cfg
(
not
(
feature
=
"
enabled
"
)
)
]
#
[
macro_export
]
macro_rules
!
failspot_name
(
(
(
t
:
tt
)
*
)
=
>
(
)
)
;
#
[
doc
(
hidden
)
]
#
[
macro_export
]
macro_rules
!
failspot_global
(
(
n
:
ident
)
=
>
{
impl
n
{
pub
fn
enabled
(
name
:
Self
)
-
>
bool
{
Self
:
:
global_config
(
)
.
enabled
(
name
)
}
pub
fn
testing_client
(
)
-
>
crate
:
:
testing
:
:
Client
<
'
static
n
>
{
Self
:
:
global_config
(
)
.
client
(
)
}
fn
global_config
(
)
-
>
&
'
static
crate
:
:
testing
:
:
Config
<
n
>
{
static
GLOBAL
:
std
:
:
sync
:
:
LazyLock
<
crate
:
:
testing
:
:
Config
<
n
>
>
=
std
:
:
sync
:
:
LazyLock
:
:
new
(
crate
:
:
testing
:
:
Config
:
:
default
)
;
&
GLOBAL
}
}
}
)
;
#
[
cfg
(
feature
=
"
enabled
"
)
]
#
[
doc
(
hidden
)
]
pub
use
flagset
;
