use
std
:
:
str
:
:
FromStr
;
use
std
:
:
ops
:
:
Deref
;
use
std
:
:
fmt
;
use
std
:
:
time
:
:
{
Duration
as
StdDuration
SystemTime
}
;
use
crate
:
:
duration
:
:
{
self
parse_duration
format_duration
}
;
use
crate
:
:
date
:
:
{
self
parse_rfc3339_weak
format_rfc3339
}
;
#
[
derive
(
Debug
PartialEq
Eq
Hash
Clone
Copy
)
]
pub
struct
Duration
(
StdDuration
)
;
#
[
derive
(
Debug
PartialEq
Eq
Clone
)
]
pub
struct
Timestamp
(
SystemTime
)
;
impl
AsRef
<
StdDuration
>
for
Duration
{
fn
as_ref
(
&
self
)
-
>
&
StdDuration
{
&
self
.
0
}
}
impl
Deref
for
Duration
{
type
Target
=
StdDuration
;
fn
deref
(
&
self
)
-
>
&
StdDuration
{
&
self
.
0
}
}
impl
Into
<
StdDuration
>
for
Duration
{
fn
into
(
self
)
-
>
StdDuration
{
self
.
0
}
}
impl
From
<
StdDuration
>
for
Duration
{
fn
from
(
dur
:
StdDuration
)
-
>
Duration
{
Duration
(
dur
)
}
}
impl
FromStr
for
Duration
{
type
Err
=
duration
:
:
Error
;
fn
from_str
(
s
:
&
str
)
-
>
Result
<
Duration
Self
:
:
Err
>
{
parse_duration
(
s
)
.
map
(
Duration
)
}
}
impl
fmt
:
:
Display
for
Duration
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
format_duration
(
self
.
0
)
.
fmt
(
f
)
}
}
impl
AsRef
<
SystemTime
>
for
Timestamp
{
fn
as_ref
(
&
self
)
-
>
&
SystemTime
{
&
self
.
0
}
}
impl
Deref
for
Timestamp
{
type
Target
=
SystemTime
;
fn
deref
(
&
self
)
-
>
&
SystemTime
{
&
self
.
0
}
}
impl
Into
<
SystemTime
>
for
Timestamp
{
fn
into
(
self
)
-
>
SystemTime
{
self
.
0
}
}
impl
From
<
SystemTime
>
for
Timestamp
{
fn
from
(
dur
:
SystemTime
)
-
>
Timestamp
{
Timestamp
(
dur
)
}
}
impl
FromStr
for
Timestamp
{
type
Err
=
date
:
:
Error
;
fn
from_str
(
s
:
&
str
)
-
>
Result
<
Timestamp
Self
:
:
Err
>
{
parse_rfc3339_weak
(
s
)
.
map
(
Timestamp
)
}
}
impl
fmt
:
:
Display
for
Timestamp
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
format_rfc3339
(
self
.
0
)
.
fmt
(
f
)
}
}
