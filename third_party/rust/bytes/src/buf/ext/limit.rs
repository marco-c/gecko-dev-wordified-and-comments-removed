use
crate
:
:
BufMut
;
use
core
:
:
{
cmp
mem
:
:
MaybeUninit
}
;
#
[
derive
(
Debug
)
]
pub
struct
Limit
<
T
>
{
inner
:
T
limit
:
usize
}
pub
(
super
)
fn
new
<
T
>
(
inner
:
T
limit
:
usize
)
-
>
Limit
<
T
>
{
Limit
{
inner
limit
}
}
impl
<
T
>
Limit
<
T
>
{
pub
fn
into_inner
(
self
)
-
>
T
{
self
.
inner
}
pub
fn
get_ref
(
&
self
)
-
>
&
T
{
&
self
.
inner
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
T
{
&
mut
self
.
inner
}
pub
fn
limit
(
&
self
)
-
>
usize
{
self
.
limit
}
pub
fn
set_limit
(
&
mut
self
lim
:
usize
)
{
self
.
limit
=
lim
}
}
impl
<
T
:
BufMut
>
BufMut
for
Limit
<
T
>
{
fn
remaining_mut
(
&
self
)
-
>
usize
{
cmp
:
:
min
(
self
.
inner
.
remaining_mut
(
)
self
.
limit
)
}
fn
bytes_mut
(
&
mut
self
)
-
>
&
mut
[
MaybeUninit
<
u8
>
]
{
let
bytes
=
self
.
inner
.
bytes_mut
(
)
;
let
end
=
cmp
:
:
min
(
bytes
.
len
(
)
self
.
limit
)
;
&
mut
bytes
[
.
.
end
]
}
unsafe
fn
advance_mut
(
&
mut
self
cnt
:
usize
)
{
assert
!
(
cnt
<
=
self
.
limit
)
;
self
.
inner
.
advance_mut
(
cnt
)
;
self
.
limit
-
=
cnt
;
}
}
