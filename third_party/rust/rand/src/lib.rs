#
!
[
doc
(
html_logo_url
=
"
https
:
/
/
www
.
rust
-
lang
.
org
/
logos
/
rust
-
logo
-
128x128
-
blk
.
png
"
html_favicon_url
=
"
https
:
/
/
www
.
rust
-
lang
.
org
/
favicon
.
ico
"
html_root_url
=
"
https
:
/
/
rust
-
random
.
github
.
io
/
rand
/
"
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
deny
(
missing_debug_implementations
)
]
#
!
[
doc
(
test
(
attr
(
allow
(
unused_variables
)
deny
(
warnings
)
)
)
)
]
#
!
[
no_std
]
#
!
[
cfg_attr
(
feature
=
"
simd_support
"
feature
(
stdsimd
)
)
]
#
!
[
cfg_attr
(
doc_cfg
feature
(
doc_cfg
)
)
]
#
!
[
allow
(
clippy
:
:
float_cmp
clippy
:
:
neg_cmp_op_on_partial_ord
)
]
#
[
cfg
(
feature
=
"
std
"
)
]
extern
crate
std
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
extern
crate
alloc
;
#
[
allow
(
unused
)
]
macro_rules
!
trace
{
(
(
x
:
tt
)
*
)
=
>
(
#
[
cfg
(
feature
=
"
log
"
)
]
{
log
:
:
trace
!
(
(
x
)
*
)
}
)
}
#
[
allow
(
unused
)
]
macro_rules
!
debug
{
(
(
x
:
tt
)
*
)
=
>
(
#
[
cfg
(
feature
=
"
log
"
)
]
{
log
:
:
debug
!
(
(
x
)
*
)
}
)
}
#
[
allow
(
unused
)
]
macro_rules
!
info
{
(
(
x
:
tt
)
*
)
=
>
(
#
[
cfg
(
feature
=
"
log
"
)
]
{
log
:
:
info
!
(
(
x
)
*
)
}
)
}
#
[
allow
(
unused
)
]
macro_rules
!
warn
{
(
(
x
:
tt
)
*
)
=
>
(
#
[
cfg
(
feature
=
"
log
"
)
]
{
log
:
:
warn
!
(
(
x
)
*
)
}
)
}
#
[
allow
(
unused
)
]
macro_rules
!
error
{
(
(
x
:
tt
)
*
)
=
>
(
#
[
cfg
(
feature
=
"
log
"
)
]
{
log
:
:
error
!
(
(
x
)
*
)
}
)
}
pub
use
rand_core
:
:
{
CryptoRng
Error
RngCore
SeedableRng
}
;
pub
mod
distributions
;
pub
mod
prelude
;
mod
rng
;
pub
mod
rngs
;
pub
mod
seq
;
#
[
cfg
(
all
(
feature
=
"
std
"
feature
=
"
std_rng
"
)
)
]
pub
use
crate
:
:
rngs
:
:
thread
:
:
thread_rng
;
pub
use
rng
:
:
{
Fill
Rng
}
;
#
[
cfg
(
all
(
feature
=
"
std
"
feature
=
"
std_rng
"
)
)
]
use
crate
:
:
distributions
:
:
{
Distribution
Standard
}
;
#
[
cfg
(
all
(
feature
=
"
std
"
feature
=
"
std_rng
"
)
)
]
#
[
cfg_attr
(
doc_cfg
doc
(
cfg
(
all
(
feature
=
"
std
"
feature
=
"
std_rng
"
)
)
)
)
]
#
[
inline
]
pub
fn
random
<
T
>
(
)
-
>
T
where
Standard
:
Distribution
<
T
>
{
thread_rng
(
)
.
gen
(
)
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
pub
fn
rng
(
seed
:
u64
)
-
>
impl
RngCore
{
const
INC
:
u64
=
11634580027462260723
;
rand_pcg
:
:
Pcg32
:
:
new
(
seed
INC
)
}
#
[
test
]
#
[
cfg
(
all
(
feature
=
"
std
"
feature
=
"
std_rng
"
)
)
]
fn
test_random
(
)
{
let
_n
:
usize
=
random
(
)
;
let
_f
:
f32
=
random
(
)
;
let
_o
:
Option
<
Option
<
i8
>
>
=
random
(
)
;
#
[
allow
(
clippy
:
:
type_complexity
)
]
let
_many
:
(
(
)
(
usize
isize
Option
<
(
u32
(
bool
)
)
>
)
(
u8
i8
u16
i16
u32
i32
u64
i64
)
(
f32
(
f64
(
f64
)
)
)
)
=
random
(
)
;
}
}
