use
rand_core
:
:
{
Error
RngCore
SeedableRng
}
;
#
[
cfg
(
target_pointer_width
=
"
64
"
)
]
type
Rng
=
super
:
:
xoshiro256plusplus
:
:
Xoshiro256PlusPlus
;
#
[
cfg
(
not
(
target_pointer_width
=
"
64
"
)
)
]
type
Rng
=
super
:
:
xoshiro128plusplus
:
:
Xoshiro128PlusPlus
;
#
[
cfg_attr
(
doc_cfg
doc
(
cfg
(
feature
=
"
small_rng
"
)
)
)
]
#
[
derive
(
Clone
Debug
PartialEq
Eq
)
]
pub
struct
SmallRng
(
Rng
)
;
impl
RngCore
for
SmallRng
{
#
[
inline
(
always
)
]
fn
next_u32
(
&
mut
self
)
-
>
u32
{
self
.
0
.
next_u32
(
)
}
#
[
inline
(
always
)
]
fn
next_u64
(
&
mut
self
)
-
>
u64
{
self
.
0
.
next_u64
(
)
}
#
[
inline
(
always
)
]
fn
fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
{
self
.
0
.
fill_bytes
(
dest
)
;
}
#
[
inline
(
always
)
]
fn
try_fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
Error
>
{
self
.
0
.
try_fill_bytes
(
dest
)
}
}
impl
SeedableRng
for
SmallRng
{
type
Seed
=
<
Rng
as
SeedableRng
>
:
:
Seed
;
#
[
inline
(
always
)
]
fn
from_seed
(
seed
:
Self
:
:
Seed
)
-
>
Self
{
SmallRng
(
Rng
:
:
from_seed
(
seed
)
)
}
#
[
inline
(
always
)
]
fn
from_rng
<
R
:
RngCore
>
(
rng
:
R
)
-
>
Result
<
Self
Error
>
{
Rng
:
:
from_rng
(
rng
)
.
map
(
SmallRng
)
}
}
