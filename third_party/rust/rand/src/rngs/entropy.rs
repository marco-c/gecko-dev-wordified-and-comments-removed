#
!
[
allow
(
deprecated
)
]
use
crate
:
:
rngs
:
:
OsRng
;
use
rand_core
:
:
{
CryptoRng
Error
RngCore
}
;
#
[
derive
(
Debug
)
]
#
[
deprecated
(
since
=
"
0
.
7
.
0
"
note
=
"
use
rngs
:
:
OsRng
instead
"
)
]
pub
struct
EntropyRng
{
source
:
OsRng
}
impl
EntropyRng
{
pub
fn
new
(
)
-
>
Self
{
EntropyRng
{
source
:
OsRng
}
}
}
impl
Default
for
EntropyRng
{
fn
default
(
)
-
>
Self
{
EntropyRng
:
:
new
(
)
}
}
impl
RngCore
for
EntropyRng
{
fn
next_u32
(
&
mut
self
)
-
>
u32
{
self
.
source
.
next_u32
(
)
}
fn
next_u64
(
&
mut
self
)
-
>
u64
{
self
.
source
.
next_u64
(
)
}
fn
fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
{
self
.
source
.
fill_bytes
(
dest
)
}
fn
try_fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
Error
>
{
self
.
source
.
try_fill_bytes
(
dest
)
}
}
impl
CryptoRng
for
EntropyRng
{
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
#
[
test
]
fn
test_entropy
(
)
{
let
mut
rng
=
EntropyRng
:
:
new
(
)
;
let
n
=
(
rng
.
next_u32
(
)
^
rng
.
next_u32
(
)
)
.
count_ones
(
)
;
assert
!
(
n
>
=
2
)
;
}
}
