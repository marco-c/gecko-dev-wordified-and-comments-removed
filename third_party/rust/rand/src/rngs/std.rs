use
{
RngCore
CryptoRng
Error
SeedableRng
}
;
use
rand_hc
:
:
Hc128Rng
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
StdRng
(
Hc128Rng
)
;
impl
RngCore
for
StdRng
{
#
[
inline
(
always
)
]
fn
next_u32
(
&
mut
self
)
-
>
u32
{
self
.
0
.
next_u32
(
)
}
#
[
inline
(
always
)
]
fn
next_u64
(
&
mut
self
)
-
>
u64
{
self
.
0
.
next_u64
(
)
}
fn
fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
{
self
.
0
.
fill_bytes
(
dest
)
;
}
fn
try_fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
Error
>
{
self
.
0
.
try_fill_bytes
(
dest
)
}
}
impl
SeedableRng
for
StdRng
{
type
Seed
=
<
Hc128Rng
as
SeedableRng
>
:
:
Seed
;
fn
from_seed
(
seed
:
Self
:
:
Seed
)
-
>
Self
{
StdRng
(
Hc128Rng
:
:
from_seed
(
seed
)
)
}
fn
from_rng
<
R
:
RngCore
>
(
rng
:
R
)
-
>
Result
<
Self
Error
>
{
Hc128Rng
:
:
from_rng
(
rng
)
.
map
(
StdRng
)
}
}
impl
CryptoRng
for
StdRng
{
}
#
[
cfg
(
test
)
]
mod
test
{
use
{
RngCore
SeedableRng
}
;
use
rngs
:
:
StdRng
;
#
[
test
]
fn
test_stdrng_construction
(
)
{
let
seed
=
[
1
0
0
0
23
0
0
0
200
1
0
0
210
30
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
]
;
let
mut
rng1
=
StdRng
:
:
from_seed
(
seed
)
;
assert_eq
!
(
rng1
.
next_u64
(
)
15759097995037006553
)
;
let
mut
rng2
=
StdRng
:
:
from_rng
(
rng1
)
.
unwrap
(
)
;
assert_eq
!
(
rng2
.
next_u64
(
)
6766915756997287454
)
;
}
}
