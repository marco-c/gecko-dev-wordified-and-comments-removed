use
rand_core
:
:
{
impls
Error
RngCore
}
;
#
[
derive
(
Debug
Clone
)
]
pub
struct
StepRng
{
v
:
u64
a
:
u64
}
impl
StepRng
{
pub
fn
new
(
initial
:
u64
increment
:
u64
)
-
>
Self
{
StepRng
{
v
:
initial
a
:
increment
}
}
}
impl
RngCore
for
StepRng
{
#
[
inline
]
fn
next_u32
(
&
mut
self
)
-
>
u32
{
self
.
next_u64
(
)
as
u32
}
#
[
inline
]
fn
next_u64
(
&
mut
self
)
-
>
u64
{
let
result
=
self
.
v
;
self
.
v
=
self
.
v
.
wrapping_add
(
self
.
a
)
;
result
}
#
[
inline
]
fn
fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
{
impls
:
:
fill_bytes_via_next
(
self
dest
)
;
}
#
[
inline
]
fn
try_fill_bytes
(
&
mut
self
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
Error
>
{
self
.
fill_bytes
(
dest
)
;
Ok
(
(
)
)
}
}
