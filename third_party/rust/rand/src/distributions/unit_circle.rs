use
Rng
;
use
distributions
:
:
{
Distribution
Uniform
}
;
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
UnitCircle
;
impl
UnitCircle
{
#
[
inline
]
pub
fn
new
(
)
-
>
UnitCircle
{
UnitCircle
}
}
impl
Distribution
<
[
f64
;
2
]
>
for
UnitCircle
{
#
[
inline
]
fn
sample
<
R
:
Rng
+
?
Sized
>
(
&
self
rng
:
&
mut
R
)
-
>
[
f64
;
2
]
{
let
uniform
=
Uniform
:
:
new
(
-
1
.
1
.
)
;
let
mut
x1
;
let
mut
x2
;
let
mut
sum
;
loop
{
x1
=
uniform
.
sample
(
rng
)
;
x2
=
uniform
.
sample
(
rng
)
;
sum
=
x1
*
x1
+
x2
*
x2
;
if
sum
<
1
.
{
break
;
}
}
let
diff
=
x1
*
x1
-
x2
*
x2
;
[
diff
/
sum
2
.
*
x1
*
x2
/
sum
]
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
distributions
:
:
Distribution
;
use
super
:
:
UnitCircle
;
macro_rules
!
assert_almost_eq
{
(
a
:
expr
b
:
expr
prec
:
expr
)
=
>
(
let
diff
=
(
a
-
b
)
.
abs
(
)
;
if
diff
>
prec
{
panic
!
(
format
!
(
"
assertion
failed
:
abs
(
left
-
right
)
=
{
:
.
1e
}
<
{
:
e
}
\
(
left
:
{
}
right
:
{
}
)
"
diff
prec
a
b
)
)
;
}
)
;
}
#
[
test
]
fn
norm
(
)
{
let
mut
rng
=
:
:
test
:
:
rng
(
1
)
;
let
dist
=
UnitCircle
:
:
new
(
)
;
for
_
in
0
.
.
1000
{
let
x
=
dist
.
sample
(
&
mut
rng
)
;
assert_almost_eq
!
(
x
[
0
]
*
x
[
0
]
+
x
[
1
]
*
x
[
1
]
1
.
1e
-
15
)
;
}
}
#
[
test
]
fn
value_stability
(
)
{
let
mut
rng
=
:
:
test
:
:
rng
(
2
)
;
let
dist
=
UnitCircle
:
:
new
(
)
;
assert_eq
!
(
dist
.
sample
(
&
mut
rng
)
[
-
0
.
8032118336637037
0
.
5956935036263119
]
)
;
assert_eq
!
(
dist
.
sample
(
&
mut
rng
)
[
-
0
.
4742919588505423
-
0
.
880367615130018
]
)
;
assert_eq
!
(
dist
.
sample
(
&
mut
rng
)
[
0
.
9297328981467168
0
.
368234623716601
]
)
;
}
}
