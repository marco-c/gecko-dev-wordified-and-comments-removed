#
!
[
allow
(
deprecated
)
]
#
!
[
allow
(
clippy
:
:
all
)
]
use
crate
:
:
distributions
:
:
Distribution
;
use
crate
:
:
Rng
;
use
std
:
:
f64
:
:
consts
:
:
PI
;
#
[
deprecated
(
since
=
"
0
.
7
.
0
"
note
=
"
moved
to
rand_distr
crate
"
)
]
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
Cauchy
{
median
:
f64
scale
:
f64
}
impl
Cauchy
{
pub
fn
new
(
median
:
f64
scale
:
f64
)
-
>
Cauchy
{
assert
!
(
scale
>
0
.
0
"
Cauchy
:
:
new
called
with
scale
factor
<
=
0
"
)
;
Cauchy
{
median
scale
}
}
}
impl
Distribution
<
f64
>
for
Cauchy
{
fn
sample
<
R
:
Rng
+
?
Sized
>
(
&
self
rng
:
&
mut
R
)
-
>
f64
{
let
x
=
rng
.
gen
:
:
<
f64
>
(
)
;
let
comp_dev
=
(
PI
*
x
)
.
tan
(
)
;
let
result
=
self
.
median
+
self
.
scale
*
comp_dev
;
result
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
Cauchy
;
use
crate
:
:
distributions
:
:
Distribution
;
fn
median
(
mut
numbers
:
&
mut
[
f64
]
)
-
>
f64
{
sort
(
&
mut
numbers
)
;
let
mid
=
numbers
.
len
(
)
/
2
;
numbers
[
mid
]
}
fn
sort
(
numbers
:
&
mut
[
f64
]
)
{
numbers
.
sort_by
(
|
a
b
|
a
.
partial_cmp
(
b
)
.
unwrap
(
)
)
;
}
#
[
test
]
fn
test_cauchy_averages
(
)
{
let
cauchy
=
Cauchy
:
:
new
(
10
.
0
5
.
0
)
;
let
mut
rng
=
crate
:
:
test
:
:
rng
(
123
)
;
let
mut
numbers
:
[
f64
;
1000
]
=
[
0
.
0
;
1000
]
;
let
mut
sum
=
0
.
0
;
for
i
in
0
.
.
1000
{
numbers
[
i
]
=
cauchy
.
sample
(
&
mut
rng
)
;
sum
+
=
numbers
[
i
]
;
}
let
median
=
median
(
&
mut
numbers
)
;
println
!
(
"
Cauchy
median
:
{
}
"
median
)
;
assert
!
(
(
median
-
10
.
0
)
.
abs
(
)
<
0
.
4
)
;
let
mean
=
sum
/
1000
.
0
;
println
!
(
"
Cauchy
mean
:
{
}
"
mean
)
;
assert
!
(
(
mean
-
10
.
0
)
.
abs
(
)
>
0
.
4
)
;
}
#
[
test
]
#
[
should_panic
]
fn
test_cauchy_invalid_scale_zero
(
)
{
Cauchy
:
:
new
(
0
.
0
0
.
0
)
;
}
#
[
test
]
#
[
should_panic
]
fn
test_cauchy_invalid_scale_neg
(
)
{
Cauchy
:
:
new
(
0
.
0
-
10
.
0
)
;
}
}
