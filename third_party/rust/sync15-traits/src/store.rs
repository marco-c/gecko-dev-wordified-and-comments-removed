use
crate
:
:
{
client
:
:
ClientData
telemetry
CollectionRequest
Guid
IncomingChangeset
OutgoingChangeset
ServerTimestamp
}
;
use
anyhow
:
:
Result
;
#
[
derive
(
Debug
Clone
PartialEq
)
]
pub
struct
CollSyncIds
{
pub
global
:
Guid
pub
coll
:
Guid
}
#
[
derive
(
Debug
Clone
PartialEq
)
]
pub
enum
StoreSyncAssociation
{
Disconnected
Connected
(
CollSyncIds
)
}
pub
trait
Store
{
fn
collection_name
(
&
self
)
-
>
std
:
:
borrow
:
:
Cow
<
'
static
str
>
;
fn
prepare_for_sync
(
&
self
_get_client_data
:
&
dyn
Fn
(
)
-
>
ClientData
)
-
>
Result
<
(
)
>
{
Ok
(
(
)
)
}
fn
apply_incoming
(
&
self
inbound
:
Vec
<
IncomingChangeset
>
telem
:
&
mut
telemetry
:
:
Engine
)
-
>
Result
<
OutgoingChangeset
>
;
fn
sync_finished
(
&
self
new_timestamp
:
ServerTimestamp
records_synced
:
Vec
<
Guid
>
)
-
>
Result
<
(
)
>
;
fn
get_collection_requests
(
&
self
server_timestamp
:
ServerTimestamp
)
-
>
Result
<
Vec
<
CollectionRequest
>
>
;
fn
get_sync_assoc
(
&
self
)
-
>
Result
<
StoreSyncAssociation
>
;
fn
reset
(
&
self
assoc
:
&
StoreSyncAssociation
)
-
>
Result
<
(
)
>
;
fn
wipe
(
&
self
)
-
>
Result
<
(
)
>
;
}
