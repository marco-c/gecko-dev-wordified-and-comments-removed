use
serde
:
:
{
Deserialize
Serialize
}
;
use
std
:
:
collections
:
:
HashMap
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
ClientData
{
pub
local_client_id
:
String
pub
recent_clients
:
HashMap
<
String
RemoteClient
>
}
#
[
derive
(
Clone
Debug
Eq
Hash
PartialEq
)
]
pub
struct
RemoteClient
{
pub
fxa_device_id
:
Option
<
String
>
pub
device_name
:
String
pub
device_type
:
Option
<
DeviceType
>
}
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
Hash
Serialize
Deserialize
)
]
pub
enum
DeviceType
{
#
[
serde
(
rename
=
"
desktop
"
)
]
Desktop
#
[
serde
(
rename
=
"
mobile
"
)
]
Mobile
#
[
serde
(
rename
=
"
tablet
"
)
]
Tablet
#
[
serde
(
rename
=
"
vr
"
)
]
VR
#
[
serde
(
rename
=
"
tv
"
)
]
TV
#
[
serde
(
other
)
]
#
[
serde
(
skip_serializing
)
]
Unknown
}
#
[
cfg
(
test
)
]
mod
device_type_tests
{
use
super
:
:
*
;
#
[
test
]
fn
test_serde_ser
(
)
{
assert_eq
!
(
serde_json
:
:
to_string
(
&
DeviceType
:
:
Desktop
)
.
unwrap
(
)
"
\
"
desktop
\
"
"
)
;
assert_eq
!
(
serde_json
:
:
to_string
(
&
DeviceType
:
:
Mobile
)
.
unwrap
(
)
"
\
"
mobile
\
"
"
)
;
assert_eq
!
(
serde_json
:
:
to_string
(
&
DeviceType
:
:
Tablet
)
.
unwrap
(
)
"
\
"
tablet
\
"
"
)
;
assert_eq
!
(
serde_json
:
:
to_string
(
&
DeviceType
:
:
VR
)
.
unwrap
(
)
"
\
"
vr
\
"
"
)
;
assert_eq
!
(
serde_json
:
:
to_string
(
&
DeviceType
:
:
TV
)
.
unwrap
(
)
"
\
"
tv
\
"
"
)
;
assert
!
(
serde_json
:
:
to_string
(
&
DeviceType
:
:
Unknown
)
.
is_err
(
)
)
;
}
#
[
test
]
fn
test_serde_de
(
)
{
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
\
"
desktop
\
"
"
)
.
unwrap
(
)
DeviceType
:
:
Desktop
)
)
;
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
\
"
mobile
\
"
"
)
.
unwrap
(
)
DeviceType
:
:
Mobile
)
)
;
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
\
"
tablet
\
"
"
)
.
unwrap
(
)
DeviceType
:
:
Tablet
)
)
;
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
\
"
vr
\
"
"
)
.
unwrap
(
)
DeviceType
:
:
VR
)
)
;
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
\
"
tv
\
"
"
)
.
unwrap
(
)
DeviceType
:
:
TV
)
)
;
assert
!
(
matches
!
(
serde_json
:
:
from_str
:
:
<
DeviceType
>
(
"
\
"
something
-
else
\
"
"
)
.
unwrap
(
)
DeviceType
:
:
Unknown
)
)
;
}
}
