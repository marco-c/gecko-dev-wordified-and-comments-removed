use
std
:
:
{
error
:
:
Error
fmt
}
;
use
serde
:
:
{
Deserialize
Serialize
}
;
use
super
:
:
{
Guid
Payload
ServerTimestamp
}
;
pub
trait
BridgedEngine
{
type
Error
;
fn
initialize
(
&
self
)
-
>
Result
<
(
)
Self
:
:
Error
>
{
Ok
(
(
)
)
}
fn
last_sync
(
&
self
)
-
>
Result
<
i64
Self
:
:
Error
>
;
fn
set_last_sync
(
&
self
last_sync_millis
:
i64
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
sync_id
(
&
self
)
-
>
Result
<
Option
<
String
>
Self
:
:
Error
>
;
fn
reset_sync_id
(
&
self
)
-
>
Result
<
String
Self
:
:
Error
>
;
fn
ensure_current_sync_id
(
&
self
new_sync_id
:
&
str
)
-
>
Result
<
String
Self
:
:
Error
>
;
fn
store_incoming
(
&
self
incoming_cleartexts
:
&
[
IncomingEnvelope
]
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
apply
(
&
self
)
-
>
Result
<
ApplyResults
Self
:
:
Error
>
;
fn
set_uploaded
(
&
self
server_modified_millis
:
i64
ids
:
&
[
String
]
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
sync_finished
(
&
self
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
reset
(
&
self
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
wipe
(
&
self
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
fn
finalize
(
&
self
)
-
>
Result
<
(
)
Self
:
:
Error
>
{
Ok
(
(
)
)
}
}
#
[
derive
(
Clone
Debug
Default
)
]
pub
struct
ApplyResults
{
pub
envelopes
:
Vec
<
OutgoingEnvelope
>
pub
num_reconciled
:
Option
<
usize
>
}
impl
ApplyResults
{
pub
fn
new
(
envelopes
:
Vec
<
OutgoingEnvelope
>
num_reconciled
:
impl
Into
<
Option
<
usize
>
>
)
-
>
Self
{
Self
{
envelopes
num_reconciled
:
num_reconciled
.
into
(
)
}
}
}
impl
From
<
Vec
<
OutgoingEnvelope
>
>
for
ApplyResults
{
fn
from
(
envelopes
:
Vec
<
OutgoingEnvelope
>
)
-
>
Self
{
Self
{
envelopes
num_reconciled
:
None
}
}
}
#
[
derive
(
Clone
Debug
Deserialize
)
]
pub
struct
IncomingEnvelope
{
pub
id
:
Guid
pub
modified
:
ServerTimestamp
#
[
serde
(
default
)
]
pub
sortindex
:
Option
<
i32
>
cleartext
:
String
}
impl
IncomingEnvelope
{
pub
fn
payload
(
&
self
)
-
>
Result
<
Payload
Box
<
dyn
Error
>
>
{
let
payload
:
Payload
=
serde_json
:
:
from_str
(
&
self
.
cleartext
)
?
;
if
payload
.
id
!
=
self
.
id
{
return
Err
(
MismatchedIdError
{
envelope
:
self
.
id
.
clone
(
)
payload
:
payload
.
id
}
.
into
(
)
)
;
}
Ok
(
payload
)
}
}
#
[
derive
(
Clone
Debug
Serialize
)
]
pub
struct
OutgoingEnvelope
{
id
:
Guid
cleartext
:
String
}
impl
OutgoingEnvelope
{
pub
fn
new
(
payload
:
Payload
)
-
>
Result
<
OutgoingEnvelope
Box
<
dyn
Error
>
>
{
let
cleartext
=
serde_json
:
:
to_string
(
&
payload
)
?
;
Ok
(
OutgoingEnvelope
{
id
:
payload
.
id
cleartext
}
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
MismatchedIdError
{
pub
envelope
:
Guid
pub
payload
:
Guid
}
impl
Error
for
MismatchedIdError
{
}
impl
fmt
:
:
Display
for
MismatchedIdError
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
ID
{
}
in
envelope
doesn
'
t
match
{
}
in
payload
"
self
.
envelope
self
.
payload
)
}
}
