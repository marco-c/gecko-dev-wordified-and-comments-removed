use
core
:
:
marker
;
use
stream
:
:
Stream
;
use
{
Async
Poll
}
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
Repeat
<
T
E
>
where
T
:
Clone
{
item
:
T
error
:
marker
:
:
PhantomData
<
E
>
}
pub
fn
repeat
<
T
E
>
(
item
:
T
)
-
>
Repeat
<
T
E
>
where
T
:
Clone
{
Repeat
{
item
:
item
error
:
marker
:
:
PhantomData
}
}
impl
<
T
E
>
Stream
for
Repeat
<
T
E
>
where
T
:
Clone
{
type
Item
=
T
;
type
Error
=
E
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
Self
:
:
Error
>
{
Ok
(
Async
:
:
Ready
(
Some
(
self
.
item
.
clone
(
)
)
)
)
}
}
