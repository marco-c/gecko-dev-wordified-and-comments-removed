#
!
[
deprecated
(
note
=
"
implementation
moved
to
iter_ok
and
iter_result
"
)
]
#
!
[
allow
(
deprecated
)
]
use
Poll
;
use
stream
:
:
{
iter_result
IterResult
Stream
}
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
Iter
<
I
>
(
IterResult
<
I
>
)
;
#
[
inline
]
pub
fn
iter
<
J
T
E
>
(
i
:
J
)
-
>
Iter
<
J
:
:
IntoIter
>
where
J
:
IntoIterator
<
Item
=
Result
<
T
E
>
>
{
Iter
(
iter_result
(
i
)
)
}
impl
<
I
T
E
>
Stream
for
Iter
<
I
>
where
I
:
Iterator
<
Item
=
Result
<
T
E
>
>
{
type
Item
=
T
;
type
Error
=
E
;
#
[
inline
]
fn
poll
(
&
mut
self
)
-
>
Poll
<
Option
<
T
>
E
>
{
self
.
0
.
poll
(
)
}
}
