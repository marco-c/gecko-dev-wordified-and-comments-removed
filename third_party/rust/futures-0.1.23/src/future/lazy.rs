use
core
:
:
mem
;
use
{
Future
IntoFuture
Poll
}
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
futures
do
nothing
unless
polled
"
]
pub
struct
Lazy
<
F
R
:
IntoFuture
>
{
inner
:
_Lazy
<
F
R
:
:
Future
>
}
#
[
derive
(
Debug
)
]
enum
_Lazy
<
F
R
>
{
First
(
F
)
Second
(
R
)
Moved
}
pub
fn
lazy
<
F
R
>
(
f
:
F
)
-
>
Lazy
<
F
R
>
where
F
:
FnOnce
(
)
-
>
R
R
:
IntoFuture
{
Lazy
{
inner
:
_Lazy
:
:
First
(
f
)
}
}
impl
<
F
R
>
Lazy
<
F
R
>
where
F
:
FnOnce
(
)
-
>
R
R
:
IntoFuture
{
fn
get
(
&
mut
self
)
-
>
&
mut
R
:
:
Future
{
match
self
.
inner
{
_Lazy
:
:
First
(
_
)
=
>
{
}
_Lazy
:
:
Second
(
ref
mut
f
)
=
>
return
f
_Lazy
:
:
Moved
=
>
panic
!
(
)
}
match
mem
:
:
replace
(
&
mut
self
.
inner
_Lazy
:
:
Moved
)
{
_Lazy
:
:
First
(
f
)
=
>
self
.
inner
=
_Lazy
:
:
Second
(
f
(
)
.
into_future
(
)
)
_
=
>
panic
!
(
)
}
match
self
.
inner
{
_Lazy
:
:
Second
(
ref
mut
f
)
=
>
f
_
=
>
panic
!
(
)
}
}
}
impl
<
F
R
>
Future
for
Lazy
<
F
R
>
where
F
:
FnOnce
(
)
-
>
R
R
:
IntoFuture
{
type
Item
=
R
:
:
Item
;
type
Error
=
R
:
:
Error
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
R
:
:
Item
R
:
:
Error
>
{
self
.
get
(
)
.
poll
(
)
}
}
