use
{
Future
Poll
}
;
#
[
derive
(
Debug
)
]
pub
enum
Either
<
A
B
>
{
A
(
A
)
B
(
B
)
}
impl
<
T
A
B
>
Either
<
(
T
A
)
(
T
B
)
>
{
pub
fn
split
(
self
)
-
>
(
T
Either
<
A
B
>
)
{
match
self
{
Either
:
:
A
(
(
a
b
)
)
=
>
(
a
Either
:
:
A
(
b
)
)
Either
:
:
B
(
(
a
b
)
)
=
>
(
a
Either
:
:
B
(
b
)
)
}
}
}
impl
<
A
B
>
Future
for
Either
<
A
B
>
where
A
:
Future
B
:
Future
<
Item
=
A
:
:
Item
Error
=
A
:
:
Error
>
{
type
Item
=
A
:
:
Item
;
type
Error
=
A
:
:
Error
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
A
:
:
Item
A
:
:
Error
>
{
match
*
self
{
Either
:
:
A
(
ref
mut
a
)
=
>
a
.
poll
(
)
Either
:
:
B
(
ref
mut
b
)
=
>
b
.
poll
(
)
}
}
}
