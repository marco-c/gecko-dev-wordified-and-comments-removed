#
!
[
no_std
]
#
!
[
deny
(
unsafe_code
)
]
extern
crate
arrayvec
;
use
arrayvec
:
:
{
Array
ArrayVec
}
;
use
core
:
:
fmt
;
#
[
cfg
(
test
)
]
extern
crate
quickcheck
;
#
[
cfg
(
test
)
]
#
[
macro_use
(
quickcheck
)
]
extern
crate
quickcheck_macros
;
#
[
cfg
(
test
)
]
mod
tests
;
pub
struct
LRUCache
<
A
:
Array
>
{
entries
:
ArrayVec
<
A
>
head
:
u16
tail
:
u16
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
Entry
<
T
>
{
val
:
T
prev
:
u16
next
:
u16
}
impl
<
A
:
Array
>
Default
for
LRUCache
<
A
>
{
fn
default
(
)
-
>
Self
{
let
cache
=
LRUCache
{
entries
:
ArrayVec
:
:
new
(
)
head
:
0
tail
:
0
}
;
assert
!
(
cache
.
entries
.
capacity
(
)
<
u16
:
:
max_value
(
)
as
usize
"
Capacity
overflow
"
)
;
cache
}
}
impl
<
T
A
>
LRUCache
<
A
>
where
A
:
Array
<
Item
=
Entry
<
T
>
>
{
pub
fn
len
(
&
self
)
-
>
usize
{
self
.
entries
.
len
(
)
}
#
[
inline
]
#
[
deprecated
=
"
Use
the
'
len
'
method
instead
.
"
]
pub
fn
num_entries
(
&
self
)
-
>
usize
{
self
.
len
(
)
}
pub
fn
front
(
&
self
)
-
>
Option
<
&
T
>
{
self
.
entries
.
get
(
self
.
head
as
usize
)
.
map
(
|
e
|
&
e
.
val
)
}
pub
fn
front_mut
(
&
mut
self
)
-
>
Option
<
&
mut
T
>
{
self
.
entries
.
get_mut
(
self
.
head
as
usize
)
.
map
(
|
e
|
&
mut
e
.
val
)
}
pub
fn
lookup
<
F
R
>
(
&
mut
self
mut
test_one
:
F
)
-
>
Option
<
R
>
where
F
:
FnMut
(
&
mut
T
)
-
>
Option
<
R
>
{
let
mut
result
=
None
;
let
mut
iter
=
self
.
iter_mut
(
)
;
while
let
Some
(
(
i
val
)
)
=
iter
.
next
(
)
{
if
let
Some
(
r
)
=
test_one
(
val
)
{
result
=
Some
(
(
i
r
)
)
;
break
;
}
}
match
result
{
None
=
>
None
Some
(
(
i
r
)
)
=
>
{
self
.
touch_index
(
i
)
;
Some
(
r
)
}
}
}
pub
fn
touch
<
F
>
(
&
mut
self
mut
pred
:
F
)
-
>
bool
where
F
:
FnMut
(
&
T
)
-
>
bool
{
let
mut
iter
=
self
.
iter_mut
(
)
;
while
let
Some
(
(
i
val
)
)
=
iter
.
next
(
)
{
if
pred
(
val
)
{
self
.
touch_index
(
i
)
;
return
true
}
}
false
}
pub
fn
find
<
F
>
(
&
mut
self
pred
:
F
)
-
>
Option
<
&
mut
T
>
where
F
:
FnMut
(
&
T
)
-
>
bool
{
if
self
.
touch
(
pred
)
{
self
.
front_mut
(
)
}
else
{
None
}
}
pub
fn
insert
(
&
mut
self
val
:
T
)
{
let
entry
=
Entry
{
val
prev
:
0
next
:
0
}
;
let
new_head
=
if
self
.
entries
.
len
(
)
=
=
self
.
entries
.
capacity
(
)
{
let
i
=
self
.
pop_back
(
)
;
self
.
entries
[
i
as
usize
]
=
entry
;
i
}
else
{
self
.
entries
.
push
(
entry
)
;
self
.
entries
.
len
(
)
as
u16
-
1
}
;
self
.
push_front
(
new_head
)
;
}
pub
fn
clear
(
&
mut
self
)
{
self
.
entries
.
clear
(
)
;
}
#
[
inline
]
#
[
deprecated
=
"
Use
the
'
clear
'
method
instead
.
"
]
pub
fn
evict_all
(
&
mut
self
)
{
self
.
clear
(
)
;
}
fn
iter_mut
(
&
mut
self
)
-
>
IterMut
<
A
>
{
IterMut
{
pos
:
self
.
head
cache
:
self
}
}
#
[
inline
]
fn
touch_index
(
&
mut
self
idx
:
u16
)
{
if
idx
!
=
self
.
head
{
self
.
remove
(
idx
)
;
self
.
push_front
(
idx
)
;
}
}
fn
remove
(
&
mut
self
i
:
u16
)
{
let
prev
=
self
.
entries
[
i
as
usize
]
.
prev
;
let
next
=
self
.
entries
[
i
as
usize
]
.
next
;
if
i
=
=
self
.
head
{
self
.
head
=
next
;
}
else
{
self
.
entries
[
prev
as
usize
]
.
next
=
next
;
}
if
i
=
=
self
.
tail
{
self
.
tail
=
prev
;
}
else
{
self
.
entries
[
next
as
usize
]
.
prev
=
prev
;
}
}
fn
push_front
(
&
mut
self
i
:
u16
)
{
if
self
.
entries
.
len
(
)
=
=
1
{
self
.
tail
=
i
;
}
else
{
self
.
entries
[
i
as
usize
]
.
next
=
self
.
head
;
self
.
entries
[
self
.
head
as
usize
]
.
prev
=
i
;
}
self
.
head
=
i
;
}
fn
pop_back
(
&
mut
self
)
-
>
u16
{
let
old_tail
=
self
.
tail
;
let
new_tail
=
self
.
entries
[
old_tail
as
usize
]
.
prev
;
self
.
tail
=
new_tail
;
old_tail
}
}
impl
<
T
A
>
Clone
for
LRUCache
<
A
>
where
A
:
Array
<
Item
=
Entry
<
T
>
>
T
:
Clone
{
fn
clone
(
&
self
)
-
>
Self
{
Self
{
entries
:
self
.
entries
.
clone
(
)
head
:
self
.
head
tail
:
self
.
tail
}
}
}
impl
<
T
A
>
fmt
:
:
Debug
for
LRUCache
<
A
>
where
A
:
Array
<
Item
=
Entry
<
T
>
>
T
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
LRUCache
"
)
.
field
(
"
head
"
&
self
.
head
)
.
field
(
"
tail
"
&
self
.
tail
)
.
field
(
"
entries
"
&
self
.
entries
)
.
finish
(
)
}
}
struct
IterMut
<
'
a
A
:
'
a
+
Array
>
{
cache
:
&
'
a
mut
LRUCache
<
A
>
pos
:
u16
}
impl
<
'
a
A
T
>
IterMut
<
'
a
A
>
where
A
:
Array
<
Item
=
Entry
<
T
>
>
{
fn
next
(
&
mut
self
)
-
>
Option
<
(
u16
&
mut
T
)
>
{
let
index
=
self
.
pos
;
let
entry
=
self
.
cache
.
entries
.
get_mut
(
index
as
usize
)
?
;
self
.
pos
=
if
index
=
=
self
.
cache
.
tail
{
A
:
:
CAPACITY
as
u16
}
else
{
entry
.
next
}
;
Some
(
(
index
&
mut
entry
.
val
)
)
}
}
