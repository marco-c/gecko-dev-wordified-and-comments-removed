use
crate
:
:
{
SearchApplicationName
SearchDeviceType
SearchEngineClassification
SearchUpdateChannel
SearchUrlParam
}
;
use
serde
:
:
Deserialize
;
use
std
:
:
collections
:
:
HashMap
;
#
[
derive
(
Debug
uniffi
:
:
Enum
PartialEq
Deserialize
Clone
Default
)
]
#
[
serde
(
rename_all
=
"
UPPERCASE
"
)
]
pub
(
crate
)
enum
JSONEngineMethod
{
Post
=
2
#
[
serde
(
other
)
]
#
[
default
]
Get
=
1
}
impl
JSONEngineMethod
{
pub
fn
as_str
(
&
self
)
-
>
&
'
static
str
{
match
self
{
JSONEngineMethod
:
:
Get
=
>
"
GET
"
JSONEngineMethod
:
:
Post
=
>
"
POST
"
}
}
}
#
[
derive
(
Debug
uniffi
:
:
Record
PartialEq
Deserialize
Clone
Default
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
(
crate
)
struct
JSONEngineUrl
{
pub
base
:
Option
<
String
>
pub
method
:
Option
<
JSONEngineMethod
>
pub
params
:
Option
<
Vec
<
SearchUrlParam
>
>
pub
search_term_param_name
:
Option
<
String
>
pub
display_name_map
:
Option
<
HashMap
<
String
String
>
>
pub
is_new_until
:
Option
<
String
>
#
[
serde
(
default
)
]
pub
exclude_partner_code_from_telemetry
:
bool
pub
accepted_content_types
:
Option
<
Vec
<
String
>
>
}
#
[
derive
(
Debug
uniffi
:
:
Record
PartialEq
Deserialize
Clone
Default
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
(
crate
)
struct
JSONEngineUrls
{
pub
search
:
Option
<
JSONEngineUrl
>
pub
suggestions
:
Option
<
JSONEngineUrl
>
pub
trending
:
Option
<
JSONEngineUrl
>
pub
search_form
:
Option
<
JSONEngineUrl
>
pub
visual_search
:
Option
<
JSONEngineUrl
>
}
#
[
derive
(
Debug
Default
Deserialize
Clone
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
(
crate
)
struct
JSONEngineBase
{
pub
aliases
:
Option
<
Vec
<
String
>
>
pub
charset
:
Option
<
String
>
#
[
serde
(
default
)
]
pub
classification
:
SearchEngineClassification
pub
name
:
String
pub
partner_code
:
Option
<
String
>
pub
urls
:
JSONEngineUrls
}
#
[
derive
(
Debug
Deserialize
Clone
Default
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
(
crate
)
struct
JSONVariantEnvironment
{
#
[
serde
(
default
)
]
pub
all_regions_and_locales
:
bool
#
[
serde
(
default
)
]
pub
excluded_locales
:
Vec
<
String
>
#
[
serde
(
default
)
]
pub
excluded_regions
:
Vec
<
String
>
#
[
serde
(
default
)
]
pub
locales
:
Vec
<
String
>
#
[
serde
(
default
)
]
pub
regions
:
Vec
<
String
>
#
[
serde
(
default
)
]
pub
distributions
:
Vec
<
String
>
#
[
serde
(
default
)
]
pub
excluded_distributions
:
Vec
<
String
>
#
[
serde
(
default
)
]
pub
applications
:
Vec
<
SearchApplicationName
>
#
[
serde
(
default
)
]
pub
channels
:
Vec
<
SearchUpdateChannel
>
#
[
serde
(
default
)
]
pub
experiment
:
String
#
[
serde
(
default
)
]
pub
min_version
:
String
#
[
serde
(
default
)
]
pub
max_version
:
String
#
[
serde
(
default
)
]
pub
device_type
:
Vec
<
SearchDeviceType
>
}
#
[
derive
(
Debug
Deserialize
Clone
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
(
crate
)
struct
JSONEngineVariant
{
pub
environment
:
JSONVariantEnvironment
pub
is_new_until
:
Option
<
String
>
#
[
serde
(
default
)
]
pub
optional
:
bool
pub
partner_code
:
Option
<
String
>
pub
telemetry_suffix
:
Option
<
String
>
pub
urls
:
Option
<
JSONEngineUrls
>
#
[
serde
(
default
)
]
pub
sub_variants
:
Vec
<
JSONEngineVariant
>
}
#
[
derive
(
Debug
Deserialize
Clone
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
(
crate
)
struct
JSONEngineRecord
{
pub
identifier
:
String
pub
base
:
JSONEngineBase
pub
variants
:
Vec
<
JSONEngineVariant
>
}
#
[
derive
(
Debug
Deserialize
Clone
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
(
crate
)
struct
JSONSpecificDefaultRecord
{
#
[
serde
(
default
)
]
pub
default
:
String
#
[
serde
(
default
)
]
pub
default_private
:
String
pub
environment
:
JSONVariantEnvironment
}
#
[
derive
(
Debug
Deserialize
Clone
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
(
crate
)
struct
JSONDefaultEnginesRecord
{
pub
global_default
:
String
#
[
serde
(
default
)
]
pub
global_default_private
:
String
#
[
serde
(
default
)
]
pub
specific_defaults
:
Vec
<
JSONSpecificDefaultRecord
>
}
#
[
derive
(
Debug
Deserialize
Clone
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
(
crate
)
struct
JSONEngineOrder
{
pub
environment
:
JSONVariantEnvironment
#
[
serde
(
default
)
]
pub
order
:
Vec
<
String
>
}
#
[
derive
(
Debug
Deserialize
Clone
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
(
crate
)
struct
JSONEngineOrdersRecord
{
pub
orders
:
Vec
<
JSONEngineOrder
>
}
#
[
derive
(
Debug
Deserialize
Clone
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
(
crate
)
struct
JSONAvailableLocalesRecord
{
pub
locales
:
Vec
<
String
>
}
#
[
derive
(
Debug
Deserialize
Clone
)
]
#
[
serde
(
tag
=
"
recordType
"
rename_all
=
"
camelCase
"
)
]
pub
(
crate
)
enum
JSONSearchConfigurationRecords
{
DefaultEngines
(
JSONDefaultEnginesRecord
)
Engine
(
Box
<
JSONEngineRecord
>
)
EngineOrders
(
JSONEngineOrdersRecord
)
AvailableLocales
(
JSONAvailableLocalesRecord
)
#
[
serde
(
other
)
]
Unknown
}
#
[
derive
(
Debug
Deserialize
)
]
pub
(
crate
)
struct
JSONSearchConfiguration
{
pub
data
:
Vec
<
JSONSearchConfigurationRecords
>
}
