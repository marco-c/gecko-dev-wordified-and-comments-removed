use
serde
:
:
Deserialize
;
#
[
derive
(
Clone
Debug
Default
Deserialize
PartialEq
uniffi
:
:
Enum
)
]
#
[
serde
(
rename_all
=
"
kebab
-
case
"
)
]
pub
enum
SearchApplicationName
{
FirefoxAndroid
=
1
FirefoxIos
=
2
FocusAndroid
=
3
FocusIos
=
4
#
[
default
]
Firefox
=
5
}
impl
SearchApplicationName
{
pub
fn
as_str
(
&
self
)
-
>
&
'
static
str
{
match
self
{
SearchApplicationName
:
:
Firefox
=
>
"
firefox
"
SearchApplicationName
:
:
FirefoxAndroid
=
>
"
firefox
-
android
"
SearchApplicationName
:
:
FocusAndroid
=
>
"
focus
-
android
"
SearchApplicationName
:
:
FirefoxIos
=
>
"
firefox
-
ios
"
SearchApplicationName
:
:
FocusIos
=
>
"
focus
-
ios
"
}
}
}
#
[
derive
(
Clone
Debug
Default
Deserialize
PartialEq
uniffi
:
:
Enum
)
]
#
[
serde
(
rename_all
=
"
lowercase
"
)
]
pub
enum
SearchUpdateChannel
{
Nightly
=
1
Aurora
=
2
Beta
=
3
Release
=
4
Esr
=
5
#
[
default
]
Default
=
6
}
#
[
derive
(
Clone
Debug
Default
Deserialize
PartialEq
uniffi
:
:
Enum
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
enum
SearchDeviceType
{
Smartphone
=
1
Tablet
=
2
#
[
default
]
None
=
3
}
#
[
derive
(
Clone
Debug
uniffi
:
:
Record
Default
)
]
pub
struct
SearchUserEnvironment
{
pub
locale
:
String
pub
region
:
String
pub
update_channel
:
SearchUpdateChannel
pub
distribution_id
:
String
pub
experiment
:
String
pub
app_name
:
SearchApplicationName
pub
version
:
String
pub
device_type
:
SearchDeviceType
}
#
[
derive
(
Debug
uniffi
:
:
Record
PartialEq
Deserialize
Clone
)
]
#
[
serde
(
rename_all
=
"
camelCase
"
)
]
pub
struct
SearchUrlParam
{
pub
name
:
String
pub
value
:
Option
<
String
>
pub
enterprise_value
:
Option
<
String
>
pub
experiment_config
:
Option
<
String
>
}
#
[
derive
(
Debug
uniffi
:
:
Record
PartialEq
Deserialize
Clone
)
]
pub
struct
SearchEngineUrl
{
pub
base
:
String
pub
method
:
String
pub
params
:
Vec
<
SearchUrlParam
>
pub
search_term_param_name
:
Option
<
String
>
#
[
uniffi
(
default
=
None
)
]
pub
display_name
:
Option
<
String
>
}
#
[
derive
(
Debug
uniffi
:
:
Record
PartialEq
Deserialize
Clone
Default
)
]
pub
struct
SearchEngineUrls
{
pub
search
:
SearchEngineUrl
pub
suggestions
:
Option
<
SearchEngineUrl
>
pub
trending
:
Option
<
SearchEngineUrl
>
pub
search_form
:
Option
<
SearchEngineUrl
>
pub
visual_search
:
Option
<
SearchEngineUrl
>
}
#
[
derive
(
Debug
uniffi
:
:
Enum
PartialEq
Deserialize
Clone
Default
)
]
#
[
serde
(
rename_all
=
"
lowercase
"
)
]
pub
enum
SearchEngineClassification
{
General
=
2
#
[
default
]
Unknown
=
1
}
impl
SearchEngineClassification
{
pub
fn
as_str
(
&
self
)
-
>
&
'
static
str
{
match
self
{
SearchEngineClassification
:
:
Unknown
=
>
"
unknown
"
SearchEngineClassification
:
:
General
=
>
"
general
"
}
}
}
#
[
derive
(
Debug
uniffi
:
:
Record
PartialEq
Clone
Default
)
]
pub
struct
SearchEngineDefinition
{
pub
aliases
:
Vec
<
String
>
pub
charset
:
String
pub
classification
:
SearchEngineClassification
pub
identifier
:
String
pub
is_new_until
:
Option
<
String
>
pub
name
:
String
pub
optional
:
bool
pub
partner_code
:
String
pub
telemetry_suffix
:
String
pub
urls
:
SearchEngineUrls
pub
order_hint
:
Option
<
u32
>
pub
click_url
:
Option
<
String
>
}
#
[
derive
(
Debug
uniffi
:
:
Record
PartialEq
)
]
pub
struct
RefinedSearchConfig
{
pub
engines
:
Vec
<
SearchEngineDefinition
>
pub
app_default_engine_id
:
Option
<
String
>
pub
app_private_default_engine_id
:
Option
<
String
>
}
