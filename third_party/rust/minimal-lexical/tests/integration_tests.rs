#
[
inline
]
fn
parse_sign
<
'
a
>
(
bytes
:
&
'
a
[
u8
]
)
-
>
(
bool
&
'
a
[
u8
]
)
{
match
bytes
.
get
(
0
)
{
Some
(
&
b
'
+
'
)
=
>
(
true
&
bytes
[
1
.
.
]
)
Some
(
&
b
'
-
'
)
=
>
(
false
&
bytes
[
1
.
.
]
)
_
=
>
(
true
bytes
)
}
}
#
[
inline
]
fn
to_digit
(
c
:
u8
)
-
>
Option
<
u32
>
{
(
c
as
char
)
.
to_digit
(
10
)
}
#
[
inline
]
fn
add_digit_i32
(
value
:
i32
digit
:
u32
)
-
>
Option
<
i32
>
{
return
value
.
checked_mul
(
10
)
?
.
checked_add
(
digit
as
i32
)
;
}
#
[
inline
]
fn
sub_digit_i32
(
value
:
i32
digit
:
u32
)
-
>
Option
<
i32
>
{
return
value
.
checked_mul
(
10
)
?
.
checked_sub
(
digit
as
i32
)
;
}
#
[
inline
]
fn
is_digit
(
c
:
u8
)
-
>
bool
{
to_digit
(
c
)
.
is_some
(
)
}
#
[
inline
]
fn
split_at_index
<
'
a
>
(
digits
:
&
'
a
[
u8
]
index
:
usize
)
-
>
(
&
'
a
[
u8
]
&
'
a
[
u8
]
)
{
(
&
digits
[
.
.
index
]
&
digits
[
index
.
.
]
)
}
#
[
inline
]
fn
consume_digits
<
'
a
>
(
digits
:
&
'
a
[
u8
]
)
-
>
(
&
'
a
[
u8
]
&
'
a
[
u8
]
)
{
let
mut
index
=
0
;
while
index
<
digits
.
len
(
)
&
&
is_digit
(
digits
[
index
]
)
{
index
+
=
1
;
}
split_at_index
(
digits
index
)
}
#
[
inline
]
fn
ltrim_zero
<
'
a
>
(
bytes
:
&
'
a
[
u8
]
)
-
>
&
'
a
[
u8
]
{
let
count
=
bytes
.
iter
(
)
.
take_while
(
|
&
&
si
|
si
=
=
b
'
0
'
)
.
count
(
)
;
&
bytes
[
count
.
.
]
}
#
[
inline
]
fn
rtrim_zero
<
'
a
>
(
bytes
:
&
'
a
[
u8
]
)
-
>
&
'
a
[
u8
]
{
let
count
=
bytes
.
iter
(
)
.
rev
(
)
.
take_while
(
|
&
&
si
|
si
=
=
b
'
0
'
)
.
count
(
)
;
let
index
=
bytes
.
len
(
)
-
count
;
&
bytes
[
.
.
index
]
}
fn
parse_exponent
(
exponent
:
&
[
u8
]
is_positive
:
bool
)
-
>
i32
{
let
mut
value
:
i32
=
0
;
match
is_positive
{
true
=
>
{
for
c
in
exponent
{
value
=
match
add_digit_i32
(
value
to_digit
(
*
c
)
.
unwrap
(
)
)
{
Some
(
v
)
=
>
v
None
=
>
return
i32
:
:
max_value
(
)
}
;
}
}
false
=
>
{
for
c
in
exponent
{
value
=
match
sub_digit_i32
(
value
to_digit
(
*
c
)
.
unwrap
(
)
)
{
Some
(
v
)
=
>
v
None
=
>
return
i32
:
:
min_value
(
)
}
;
}
}
}
value
}
pub
fn
case_insensitive_starts_with
<
'
a
'
b
Iter1
Iter2
>
(
mut
x
:
Iter1
mut
y
:
Iter2
)
-
>
bool
where
Iter1
:
Iterator
<
Item
=
&
'
a
u8
>
Iter2
:
Iterator
<
Item
=
&
'
b
u8
>
{
loop
{
let
yi
=
y
.
next
(
)
;
if
yi
.
is_none
(
)
{
return
true
;
}
let
yi
=
*
yi
.
unwrap
(
)
;
let
is_not_equal
=
x
.
next
(
)
.
map_or
(
true
|
&
xi
|
{
let
xor
=
xi
^
yi
;
xor
!
=
0
&
&
xor
!
=
0x20
}
)
;
if
is_not_equal
{
return
false
;
}
}
}
pub
fn
parse_float
<
'
a
F
>
(
bytes
:
&
'
a
[
u8
]
)
-
>
(
F
&
'
a
[
u8
]
)
where
F
:
minimal_lexical
:
:
Float
{
let
start
=
bytes
;
let
(
is_positive
bytes
)
=
parse_sign
(
bytes
)
;
if
case_insensitive_starts_with
(
bytes
.
iter
(
)
b
"
NaN
"
.
iter
(
)
)
{
let
mut
float
=
F
:
:
from_bits
(
F
:
:
EXPONENT_MASK
|
(
F
:
:
HIDDEN_BIT_MASK
>
>
1
)
)
;
if
!
is_positive
{
float
=
-
float
;
}
return
(
float
&
bytes
[
3
.
.
]
)
;
}
else
if
case_insensitive_starts_with
(
bytes
.
iter
(
)
b
"
Infinity
"
.
iter
(
)
)
{
let
mut
float
=
F
:
:
from_bits
(
F
:
:
EXPONENT_MASK
)
;
if
!
is_positive
{
float
=
-
float
;
}
return
(
float
&
bytes
[
8
.
.
]
)
;
}
else
if
case_insensitive_starts_with
(
bytes
.
iter
(
)
b
"
inf
"
.
iter
(
)
)
{
let
mut
float
=
F
:
:
from_bits
(
F
:
:
EXPONENT_MASK
)
;
if
!
is_positive
{
float
=
-
float
;
}
return
(
float
&
bytes
[
3
.
.
]
)
;
}
let
(
integer_slc
bytes
)
=
consume_digits
(
bytes
)
;
let
(
fraction_slc
bytes
)
=
match
bytes
.
first
(
)
{
Some
(
&
b
'
.
'
)
=
>
consume_digits
(
&
bytes
[
1
.
.
]
)
_
=
>
(
&
bytes
[
.
.
0
]
bytes
)
}
;
let
(
exponent
bytes
)
=
match
bytes
.
first
(
)
{
Some
(
&
b
'
e
'
)
|
Some
(
&
b
'
E
'
)
=
>
{
let
(
is_positive
bytes
)
=
parse_sign
(
&
bytes
[
1
.
.
]
)
;
let
(
exponent
bytes
)
=
consume_digits
(
bytes
)
;
(
parse_exponent
(
exponent
is_positive
)
bytes
)
}
_
=
>
(
0
bytes
)
}
;
if
bytes
.
len
(
)
=
=
start
.
len
(
)
{
return
(
F
:
:
from_u64
(
0
)
bytes
)
;
}
let
integer_slc
=
ltrim_zero
(
integer_slc
)
;
let
fraction_slc
=
rtrim_zero
(
fraction_slc
)
;
let
mut
float
:
F
=
minimal_lexical
:
:
parse_float
(
integer_slc
.
iter
(
)
fraction_slc
.
iter
(
)
exponent
)
;
if
!
is_positive
{
float
=
-
float
;
}
(
float
bytes
)
}
macro_rules
!
b
{
(
x
:
literal
)
=
>
{
x
.
as_bytes
(
)
}
;
}
#
[
test
]
fn
f32_test
(
)
{
assert_eq
!
(
(
184467440000000000000
.
0
b
!
(
"
\
x00
\
x00006
"
)
)
parse_float
:
:
<
f32
>
(
b
"
000184467440737095516150
\
x00
\
x00006
"
)
)
;
}
#
[
test
]
fn
f64_test
(
)
{
assert_eq
!
(
(
184467440737095500000
.
0
b
!
(
"
\
x00
\
x00006
"
)
)
parse_float
:
:
<
f64
>
(
b
"
000184467440737095516150
\
x00
\
x00006
"
)
)
;
}
