use
crate
:
:
ast_emitter
:
:
AstEmitter
;
use
crate
:
:
emitter
:
:
EmitError
;
use
crate
:
:
function
:
:
{
FunctionCreationData
FunctionFlags
}
;
use
crate
:
:
gcthings
:
:
GCThingIndex
;
use
ast
:
:
source_atom_set
:
:
SourceAtomSetIndex
;
pub
struct
DummyFunctionScriptEmitter
{
pub
name
:
SourceAtomSetIndex
}
impl
DummyFunctionScriptEmitter
{
pub
fn
emit
(
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
GCThingIndex
EmitError
>
{
let
script_index
=
emitter
.
with_inner
(
|
_emitter
|
{
Err
(
EmitError
:
:
NotImplemented
(
"
TODO
:
FunctionDeclaration
"
)
)
}
)
?
;
let
fun_data
=
FunctionCreationData
:
:
non_lazy
(
Some
(
self
.
name
)
script_index
FunctionFlags
:
:
interpreted_normal
(
)
)
;
Ok
(
emitter
.
emit
.
get_function_gcthing_index
(
fun_data
)
)
}
}
pub
struct
FunctionDeclarationEmitter
{
pub
fun
:
GCThingIndex
}
impl
FunctionDeclarationEmitter
{
pub
fn
emit
(
self
emitter
:
&
mut
AstEmitter
)
{
emitter
.
emit
.
lambda
(
self
.
fun
)
;
emitter
.
emit
.
def_fun
(
)
;
}
}
