use
crate
:
:
ast_emitter
:
:
AstEmitter
;
use
crate
:
:
bytecode_offset
:
:
{
BytecodeOffset
BytecodeOffsetDiff
}
;
use
crate
:
:
emitter
:
:
EmitError
;
use
crate
:
:
emitter
:
:
InstructionWriter
;
#
[
derive
(
Debug
)
]
pub
enum
JumpKind
{
Coalesce
LogicalAnd
LogicalOr
IfEq
Goto
}
trait
Jump
{
fn
jump_kind
(
&
mut
self
)
-
>
&
JumpKind
{
&
JumpKind
:
:
Goto
}
fn
should_fallthrough
(
&
mut
self
)
-
>
bool
{
match
self
.
jump_kind
(
)
{
JumpKind
:
:
Coalesce
{
.
.
}
|
JumpKind
:
:
LogicalOr
{
.
.
}
|
JumpKind
:
:
LogicalAnd
{
.
.
}
|
JumpKind
:
:
IfEq
{
.
.
}
=
>
true
JumpKind
:
:
Goto
{
.
.
}
=
>
false
}
}
fn
emit_jump
(
&
mut
self
emitter
:
&
mut
AstEmitter
)
{
let
placeholder_offset
=
BytecodeOffsetDiff
:
:
uninitialized
(
)
;
match
self
.
jump_kind
(
)
{
JumpKind
:
:
Coalesce
{
.
.
}
=
>
{
emitter
.
emit
.
coalesce
(
placeholder_offset
)
;
}
JumpKind
:
:
LogicalOr
{
.
.
}
=
>
{
emitter
.
emit
.
or_
(
placeholder_offset
)
;
}
JumpKind
:
:
LogicalAnd
{
.
.
}
=
>
{
emitter
.
emit
.
and_
(
placeholder_offset
)
;
}
JumpKind
:
:
IfEq
{
.
.
}
=
>
{
emitter
.
emit
.
if_eq
(
placeholder_offset
)
;
}
JumpKind
:
:
Goto
{
.
.
}
=
>
{
emitter
.
emit
.
goto_
(
placeholder_offset
)
;
}
}
if
self
.
should_fallthrough
(
)
{
emitter
.
emit
.
jump_target
(
)
;
}
}
}
#
[
derive
(
Debug
)
]
#
[
must_use
]
pub
struct
JumpPatchEmitter
{
offsets
:
Vec
<
BytecodeOffset
>
depth
:
usize
}
impl
JumpPatchEmitter
{
pub
fn
patch_merge
(
self
emitter
:
&
mut
AstEmitter
)
{
emitter
.
emit
.
emit_jump_target_and_patch
(
self
.
offsets
)
;
debug_assert
!
(
emitter
.
emit
.
stack_depth
(
)
=
=
self
.
depth
)
;
}
pub
fn
patch_not_merge
(
self
emitter
:
&
mut
AstEmitter
)
{
emitter
.
emit
.
emit_jump_target_and_patch
(
self
.
offsets
)
;
emitter
.
emit
.
set_stack_depth
(
self
.
depth
)
;
}
}
#
[
derive
(
Debug
)
]
pub
struct
ForwardJumpEmitter
{
pub
jump
:
JumpKind
}
impl
Jump
for
ForwardJumpEmitter
{
fn
jump_kind
(
&
mut
self
)
-
>
&
JumpKind
{
&
self
.
jump
}
}
impl
ForwardJumpEmitter
{
pub
fn
emit
(
&
mut
self
emitter
:
&
mut
AstEmitter
)
-
>
JumpPatchEmitter
{
let
offsets
=
vec
!
[
emitter
.
emit
.
bytecode_offset
(
)
]
;
self
.
emit_jump
(
emitter
)
;
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
JumpPatchEmitter
{
offsets
depth
}
}
}
pub
struct
LoopStack
{
loop_stack
:
Vec
<
LoopControl
>
}
impl
LoopStack
{
pub
fn
new
(
)
-
>
Self
{
Self
{
loop_stack
:
Vec
:
:
new
(
)
}
}
pub
fn
open_loop
(
&
mut
self
emit
:
&
mut
InstructionWriter
)
{
let
depth
=
(
self
.
loop_stack
.
len
(
)
+
1
)
as
u8
;
let
new_loop
=
LoopControl
:
:
new
(
emit
depth
)
;
self
.
loop_stack
.
push
(
new_loop
)
;
}
pub
fn
register_break
(
&
mut
self
offset
:
BytecodeOffset
)
{
let
innermost
=
self
.
innermost
(
)
;
innermost
.
register_break
(
offset
)
;
}
pub
fn
register_continue
(
&
mut
self
offset
:
BytecodeOffset
)
{
let
innermost
=
self
.
innermost
(
)
;
innermost
.
register_continue
(
offset
)
;
}
pub
fn
emit_continue_target
(
&
mut
self
emit
:
&
mut
InstructionWriter
)
{
let
innermost
=
self
.
innermost
(
)
;
innermost
.
emit_continue_target
(
emit
)
;
}
pub
fn
close_loop
(
&
mut
self
emit
:
&
mut
InstructionWriter
)
{
let
innermost
=
self
.
loop_stack
.
pop
(
)
.
expect
(
"
There
should
be
at
least
one
loop
"
)
;
innermost
.
emit_end_target
(
emit
)
;
}
pub
fn
innermost
(
&
mut
self
)
-
>
&
mut
LoopControl
{
self
.
loop_stack
.
last_mut
(
)
.
expect
(
"
There
should
be
at
least
one
loop
"
)
}
}
pub
struct
LoopControl
{
breaks
:
Vec
<
BytecodeOffset
>
continues
:
Vec
<
BytecodeOffset
>
head
:
BytecodeOffset
}
impl
LoopControl
{
pub
fn
new
(
emit
:
&
mut
InstructionWriter
depth
:
u8
)
-
>
Self
{
let
mut
offset
=
emit
.
bytecode_offset
(
)
;
if
offset
.
offset
=
=
0
{
emit
.
nop
(
)
;
offset
=
emit
.
bytecode_offset
(
)
;
}
emit
.
loop_head
(
depth
)
;
Self
{
breaks
:
Vec
:
:
new
(
)
continues
:
Vec
:
:
new
(
)
head
:
offset
}
}
pub
fn
register_break
(
&
mut
self
offset
:
BytecodeOffset
)
{
self
.
breaks
.
push
(
offset
)
;
}
pub
fn
register_continue
(
&
mut
self
offset
:
BytecodeOffset
)
{
self
.
continues
.
push
(
offset
)
;
}
pub
fn
emit_continue_target
(
&
mut
self
emit
:
&
mut
InstructionWriter
)
{
emit
.
emit_jump_target_and_patch
(
(
*
self
.
continues
)
.
to_vec
(
)
)
;
}
pub
fn
emit_end_target
(
self
emit
:
&
mut
InstructionWriter
)
{
let
offset
=
emit
.
bytecode_offset
(
)
;
let
diff
=
self
.
head
.
diff_from
(
offset
)
;
emit
.
goto_
(
diff
)
;
emit
.
emit_jump_target_and_patch
(
self
.
breaks
)
;
}
}
pub
struct
BreakEmitter
{
pub
jump
:
JumpKind
}
impl
Jump
for
BreakEmitter
{
fn
jump_kind
(
&
mut
self
)
-
>
&
JumpKind
{
&
self
.
jump
}
}
impl
BreakEmitter
{
pub
fn
emit
(
&
mut
self
emitter
:
&
mut
AstEmitter
)
{
let
offset
=
emitter
.
emit
.
bytecode_offset
(
)
;
emitter
.
loop_stack
.
register_break
(
offset
)
;
self
.
emit_jump
(
emitter
)
;
}
}
pub
struct
ContinueEmitter
{
pub
jump
:
JumpKind
}
impl
Jump
for
ContinueEmitter
{
fn
jump_kind
(
&
mut
self
)
-
>
&
JumpKind
{
&
self
.
jump
}
}
impl
ContinueEmitter
{
pub
fn
emit
(
&
mut
self
emitter
:
&
mut
AstEmitter
)
{
let
offset
=
emitter
.
emit
.
bytecode_offset
(
)
;
emitter
.
loop_stack
.
register_continue
(
offset
)
;
self
.
emit_jump
(
emitter
)
;
}
}
pub
struct
WhileEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
test
:
F1
pub
block
:
F2
}
impl
<
F1
F2
>
WhileEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
fn
emit
(
&
mut
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
emitter
.
loop_stack
.
open_loop
(
&
mut
emitter
.
emit
)
;
(
self
.
test
)
(
emitter
)
?
;
BreakEmitter
{
jump
:
JumpKind
:
:
IfEq
}
.
emit
(
emitter
)
;
(
self
.
block
)
(
emitter
)
?
;
emitter
.
loop_stack
.
emit_continue_target
(
&
mut
emitter
.
emit
)
;
emitter
.
loop_stack
.
close_loop
(
&
mut
emitter
.
emit
)
;
Ok
(
(
)
)
}
}
pub
struct
DoWhileEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
block
:
F2
pub
test
:
F1
}
impl
<
F1
F2
>
DoWhileEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
fn
emit
(
&
mut
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
emitter
.
loop_stack
.
open_loop
(
&
mut
emitter
.
emit
)
;
(
self
.
block
)
(
emitter
)
?
;
emitter
.
loop_stack
.
emit_continue_target
(
&
mut
emitter
.
emit
)
;
(
self
.
test
)
(
emitter
)
?
;
BreakEmitter
{
jump
:
JumpKind
:
:
IfEq
}
.
emit
(
emitter
)
;
emitter
.
loop_stack
.
close_loop
(
&
mut
emitter
.
emit
)
;
Ok
(
(
)
)
}
}
pub
struct
CForEmitter
<
'
a
CondT
ExprT
InitFn
TestFn
UpdateFn
BlockFn
>
where
InitFn
:
Fn
(
&
mut
AstEmitter
&
CondT
)
-
>
Result
<
(
)
EmitError
>
TestFn
:
Fn
(
&
mut
AstEmitter
&
ExprT
)
-
>
Result
<
(
)
EmitError
>
UpdateFn
:
Fn
(
&
mut
AstEmitter
&
ExprT
)
-
>
Result
<
(
)
EmitError
>
BlockFn
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
maybe_init
:
&
'
a
Option
<
CondT
>
pub
maybe_test
:
&
'
a
Option
<
ExprT
>
pub
maybe_update
:
&
'
a
Option
<
ExprT
>
pub
init
:
InitFn
pub
test
:
TestFn
pub
update
:
UpdateFn
pub
block
:
BlockFn
}
impl
<
'
a
CondT
ExprT
InitFn
TestFn
UpdateFn
BlockFn
>
CForEmitter
<
'
a
CondT
ExprT
InitFn
TestFn
UpdateFn
BlockFn
>
where
InitFn
:
Fn
(
&
mut
AstEmitter
&
CondT
)
-
>
Result
<
(
)
EmitError
>
TestFn
:
Fn
(
&
mut
AstEmitter
&
ExprT
)
-
>
Result
<
(
)
EmitError
>
UpdateFn
:
Fn
(
&
mut
AstEmitter
&
ExprT
)
-
>
Result
<
(
)
EmitError
>
BlockFn
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
fn
emit
(
&
mut
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
if
let
Some
(
init
)
=
self
.
maybe_init
{
(
self
.
init
)
(
emitter
init
)
?
;
emitter
.
emit
.
pop
(
)
;
}
emitter
.
loop_stack
.
open_loop
(
&
mut
emitter
.
emit
)
;
if
let
Some
(
test
)
=
self
.
maybe_test
{
(
self
.
test
)
(
emitter
&
test
)
?
;
BreakEmitter
{
jump
:
JumpKind
:
:
IfEq
}
.
emit
(
emitter
)
;
}
(
self
.
block
)
(
emitter
)
?
;
emitter
.
loop_stack
.
emit_continue_target
(
&
mut
emitter
.
emit
)
;
if
let
Some
(
update
)
=
self
.
maybe_update
{
(
self
.
update
)
(
emitter
&
update
)
?
;
emitter
.
emit
.
pop
(
)
;
}
emitter
.
loop_stack
.
close_loop
(
&
mut
emitter
.
emit
)
;
Ok
(
(
)
)
}
}
