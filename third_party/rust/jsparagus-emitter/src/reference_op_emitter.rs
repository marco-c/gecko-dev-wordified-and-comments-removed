use
crate
:
:
ast_emitter
:
:
AstEmitter
;
use
crate
:
:
emitter
:
:
EmitError
;
use
crate
:
:
script_atom_set
:
:
ScriptAtomSetIndex
;
use
ast
:
:
source_atom_set
:
:
SourceAtomSetIndex
;
#
[
derive
(
Debug
PartialEq
)
]
enum
AssignmentReferenceKind
{
GlobalName
(
ScriptAtomSetIndex
)
#
[
allow
(
dead_code
)
]
Prop
(
ScriptAtomSetIndex
)
#
[
allow
(
dead_code
)
]
Elem
}
#
[
derive
(
Debug
)
]
#
[
must_use
]
pub
struct
AssignmentReference
{
kind
:
AssignmentReferenceKind
}
impl
AssignmentReference
{
fn
new
(
kind
:
AssignmentReferenceKind
)
-
>
Self
{
Self
{
kind
}
}
fn
stack_slots
(
&
self
)
-
>
usize
{
match
self
.
kind
{
AssignmentReferenceKind
:
:
GlobalName
(
_
)
=
>
1
AssignmentReferenceKind
:
:
Prop
(
_
)
=
>
1
AssignmentReferenceKind
:
:
Elem
=
>
2
}
}
}
#
[
derive
(
Debug
PartialEq
)
]
enum
CallKind
{
Normal
}
#
[
derive
(
Debug
)
]
#
[
must_use
]
pub
struct
CallReference
{
kind
:
CallKind
}
impl
CallReference
{
fn
new
(
kind
:
CallKind
)
-
>
Self
{
Self
{
kind
}
}
}
pub
struct
GetNameEmitter
{
pub
name
:
SourceAtomSetIndex
}
impl
GetNameEmitter
{
pub
fn
emit
(
self
emitter
:
&
mut
AstEmitter
)
{
let
name_index
=
emitter
.
emit
.
get_atom_index
(
self
.
name
)
;
emitter
.
emit
.
get_g_name
(
name_index
)
;
}
}
pub
struct
GetPropEmitter
<
F
>
where
F
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
obj
:
F
pub
key
:
SourceAtomSetIndex
}
impl
<
F
>
GetPropEmitter
<
F
>
where
F
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
fn
emit
(
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
let
key_index
=
emitter
.
emit
.
get_atom_index
(
self
.
key
)
;
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
obj
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
emitter
.
emit
.
get_prop
(
key_index
)
;
Ok
(
(
)
)
}
}
pub
struct
GetSuperPropEmitter
<
F
>
where
F
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
this
:
F
pub
key
:
SourceAtomSetIndex
}
impl
<
F
>
GetSuperPropEmitter
<
F
>
where
F
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
fn
emit
(
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
let
key_index
=
emitter
.
emit
.
get_atom_index
(
self
.
key
)
;
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
this
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
emitter
.
emit
.
callee
(
)
;
emitter
.
emit
.
super_base
(
)
;
emitter
.
emit
.
get_prop_super
(
key_index
)
;
Ok
(
(
)
)
}
}
pub
struct
GetElemEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
obj
:
F1
pub
key
:
F2
}
impl
<
F1
F2
>
GetElemEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
fn
emit
(
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
obj
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
key
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
emitter
.
emit
.
get_elem
(
)
;
Ok
(
(
)
)
}
}
pub
struct
GetSuperElemEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
this
:
F1
pub
key
:
F2
}
impl
<
F1
F2
>
GetSuperElemEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
fn
emit
(
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
this
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
key
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
emitter
.
emit
.
callee
(
)
;
emitter
.
emit
.
super_base
(
)
;
emitter
.
emit
.
get_elem_super
(
)
;
Ok
(
(
)
)
}
}
pub
struct
NameReferenceEmitter
{
pub
name
:
SourceAtomSetIndex
}
impl
NameReferenceEmitter
{
pub
fn
emit_for_call
(
self
emitter
:
&
mut
AstEmitter
)
-
>
CallReference
{
let
name_index
=
emitter
.
emit
.
get_atom_index
(
self
.
name
)
;
emitter
.
emit
.
get_g_name
(
name_index
)
;
emitter
.
emit
.
g_implicit_this
(
name_index
)
;
CallReference
:
:
new
(
CallKind
:
:
Normal
)
}
pub
fn
emit_for_assignment
(
self
emitter
:
&
mut
AstEmitter
)
-
>
AssignmentReference
{
let
name_index
=
emitter
.
emit
.
get_atom_index
(
self
.
name
)
;
emitter
.
emit
.
bind_g_name
(
name_index
)
;
AssignmentReference
:
:
new
(
AssignmentReferenceKind
:
:
GlobalName
(
name_index
)
)
}
}
pub
struct
PropReferenceEmitter
<
F
>
where
F
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
obj
:
F
pub
key
:
SourceAtomSetIndex
}
impl
<
F
>
PropReferenceEmitter
<
F
>
where
F
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
fn
emit_for_call
(
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
CallReference
EmitError
>
{
let
key_index
=
emitter
.
emit
.
get_atom_index
(
self
.
key
)
;
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
obj
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
emitter
.
emit
.
dup
(
)
;
emitter
.
emit
.
call_prop
(
key_index
)
;
emitter
.
emit
.
swap
(
)
;
Ok
(
CallReference
:
:
new
(
CallKind
:
:
Normal
)
)
}
#
[
allow
(
dead_code
)
]
pub
fn
emit_for_assignment
(
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
AssignmentReference
EmitError
>
{
let
key_index
=
emitter
.
emit
.
get_atom_index
(
self
.
key
)
;
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
obj
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
Ok
(
AssignmentReference
:
:
new
(
AssignmentReferenceKind
:
:
Prop
(
key_index
)
)
)
}
}
pub
struct
ElemReferenceEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
obj
:
F1
pub
key
:
F2
}
impl
<
F1
F2
>
ElemReferenceEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
fn
emit_for_call
(
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
CallReference
EmitError
>
{
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
obj
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
emitter
.
emit
.
dup
(
)
;
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
key
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
emitter
.
emit
.
call_elem
(
)
;
emitter
.
emit
.
swap
(
)
;
Ok
(
CallReference
:
:
new
(
CallKind
:
:
Normal
)
)
}
#
[
allow
(
dead_code
)
]
pub
fn
emit_for_assignment
(
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
AssignmentReference
EmitError
>
{
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
obj
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
key
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
Ok
(
AssignmentReference
:
:
new
(
AssignmentReferenceKind
:
:
Elem
)
)
}
}
pub
struct
CallEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
CallReference
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
usize
EmitError
>
{
pub
callee
:
F1
pub
arguments
:
F2
}
impl
<
F1
F2
>
CallEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
CallReference
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
usize
EmitError
>
{
pub
fn
emit
(
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
let
reference
=
(
self
.
callee
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
2
)
;
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
let
len
=
(
self
.
arguments
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
len
)
;
match
reference
.
kind
{
CallKind
:
:
Normal
=
>
{
emitter
.
emit
.
call
(
len
as
u16
)
;
}
}
Ok
(
(
)
)
}
}
pub
struct
NewEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
usize
EmitError
>
{
pub
callee
:
F1
pub
arguments
:
F2
}
impl
<
F1
F2
>
NewEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
usize
EmitError
>
{
pub
fn
emit
(
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
callee
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
emitter
.
emit
.
is_constructing
(
)
;
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
let
len
=
(
self
.
arguments
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
len
)
;
emitter
.
emit
.
dup_at
(
len
as
u32
+
1
)
;
emitter
.
emit
.
new_
(
len
as
u16
)
;
Ok
(
(
)
)
}
}
pub
struct
AssignmentEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
AssignmentReference
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
lhs
:
F1
pub
rhs
:
F2
}
impl
<
F1
F2
>
AssignmentEmitter
<
F1
F2
>
where
F1
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
AssignmentReference
EmitError
>
F2
:
Fn
(
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
pub
fn
emit
(
self
emitter
:
&
mut
AstEmitter
)
-
>
Result
<
(
)
EmitError
>
{
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
let
reference
=
(
self
.
lhs
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
reference
.
stack_slots
(
)
)
;
let
depth
=
emitter
.
emit
.
stack_depth
(
)
;
(
self
.
rhs
)
(
emitter
)
?
;
debug_assert_eq
!
(
emitter
.
emit
.
stack_depth
(
)
depth
+
1
)
;
match
reference
.
kind
{
AssignmentReferenceKind
:
:
GlobalName
(
name_index
)
=
>
{
emitter
.
emit
.
set_g_name
(
name_index
)
;
}
AssignmentReferenceKind
:
:
Prop
(
key_index
)
=
>
{
emitter
.
emit
.
set_prop
(
key_index
)
;
}
AssignmentReferenceKind
:
:
Elem
=
>
{
emitter
.
emit
.
set_elem
(
)
;
}
}
Ok
(
(
)
)
}
}
