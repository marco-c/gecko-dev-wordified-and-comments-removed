use
crate
:
:
Calendar
;
use
core
:
:
fmt
;
use
core
:
:
marker
:
:
PhantomData
;
#
[
derive
(
Eq
PartialEq
)
]
#
[
allow
(
clippy
:
:
exhaustive_structs
)
]
#
[
doc
(
hidden
)
]
pub
struct
DateDuration
<
C
:
Calendar
+
?
Sized
>
{
pub
years
:
i32
pub
months
:
i32
pub
weeks
:
i32
pub
days
:
i32
pub
marker
:
PhantomData
<
C
>
}
impl
<
C
:
Calendar
+
?
Sized
>
Clone
for
DateDuration
<
C
>
{
fn
clone
(
&
self
)
-
>
Self
{
*
self
}
}
impl
<
C
:
Calendar
+
?
Sized
>
Copy
for
DateDuration
<
C
>
{
}
#
[
derive
(
Copy
Clone
Eq
PartialEq
Debug
)
]
#
[
allow
(
clippy
:
:
exhaustive_enums
)
]
#
[
doc
(
hidden
)
]
pub
enum
DateDurationUnit
{
Years
Months
Weeks
Days
}
impl
<
C
:
Calendar
+
?
Sized
>
Default
for
DateDuration
<
C
>
{
fn
default
(
)
-
>
Self
{
Self
{
years
:
0
months
:
0
weeks
:
0
days
:
0
marker
:
PhantomData
}
}
}
impl
<
C
:
Calendar
+
?
Sized
>
DateDuration
<
C
>
{
pub
fn
new
(
years
:
i32
months
:
i32
weeks
:
i32
days
:
i32
)
-
>
Self
{
DateDuration
{
years
months
weeks
days
marker
:
PhantomData
}
}
pub
fn
cast_unit
<
C2
:
Calendar
+
?
Sized
>
(
self
)
-
>
DateDuration
<
C2
>
{
DateDuration
{
years
:
self
.
years
months
:
self
.
months
days
:
self
.
days
weeks
:
self
.
weeks
marker
:
PhantomData
}
}
}
impl
<
C
:
Calendar
>
fmt
:
:
Debug
for
DateDuration
<
C
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
Result
<
(
)
fmt
:
:
Error
>
{
f
.
debug_struct
(
"
DateDuration
"
)
.
field
(
"
years
"
&
self
.
years
)
.
field
(
"
months
"
&
self
.
months
)
.
field
(
"
weeks
"
&
self
.
weeks
)
.
field
(
"
days
"
&
self
.
days
)
.
finish
(
)
}
}
