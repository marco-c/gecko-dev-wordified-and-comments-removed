use
crate
:
:
any_calendar
:
:
AnyCalendarKind
;
use
crate
:
:
{
types
CalendarError
Date
DateDuration
DateDurationUnit
Iso
}
;
use
core
:
:
fmt
;
pub
trait
Calendar
{
type
DateInner
:
PartialEq
+
Eq
+
Clone
+
fmt
:
:
Debug
;
fn
date_from_codes
(
&
self
era
:
types
:
:
Era
year
:
i32
month_code
:
types
:
:
MonthCode
day
:
u8
)
-
>
Result
<
Self
:
:
DateInner
CalendarError
>
;
fn
date_from_iso
(
&
self
iso
:
Date
<
Iso
>
)
-
>
Self
:
:
DateInner
;
fn
date_to_iso
(
&
self
date
:
&
Self
:
:
DateInner
)
-
>
Date
<
Iso
>
;
fn
months_in_year
(
&
self
date
:
&
Self
:
:
DateInner
)
-
>
u8
;
fn
days_in_year
(
&
self
date
:
&
Self
:
:
DateInner
)
-
>
u16
;
fn
days_in_month
(
&
self
date
:
&
Self
:
:
DateInner
)
-
>
u8
;
fn
day_of_week
(
&
self
date
:
&
Self
:
:
DateInner
)
-
>
types
:
:
IsoWeekday
{
self
.
date_to_iso
(
date
)
.
day_of_week
(
)
}
#
[
doc
(
hidden
)
]
fn
offset_date
(
&
self
date
:
&
mut
Self
:
:
DateInner
offset
:
DateDuration
<
Self
>
)
;
#
[
doc
(
hidden
)
]
fn
until
(
&
self
date1
:
&
Self
:
:
DateInner
date2
:
&
Self
:
:
DateInner
calendar2
:
&
Self
largest_unit
:
DateDurationUnit
smallest_unit
:
DateDurationUnit
)
-
>
DateDuration
<
Self
>
;
fn
debug_name
(
&
self
)
-
>
&
'
static
str
;
fn
year
(
&
self
date
:
&
Self
:
:
DateInner
)
-
>
types
:
:
FormattableYear
;
fn
is_in_leap_year
(
&
self
date
:
&
Self
:
:
DateInner
)
-
>
bool
;
fn
month
(
&
self
date
:
&
Self
:
:
DateInner
)
-
>
types
:
:
FormattableMonth
;
fn
day_of_month
(
&
self
date
:
&
Self
:
:
DateInner
)
-
>
types
:
:
DayOfMonth
;
fn
day_of_year_info
(
&
self
date
:
&
Self
:
:
DateInner
)
-
>
types
:
:
DayOfYearInfo
;
fn
any_calendar_kind
(
&
self
)
-
>
Option
<
AnyCalendarKind
>
{
None
}
}
