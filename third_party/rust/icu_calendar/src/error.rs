use
displaydoc
:
:
Display
;
use
icu_provider
:
:
DataError
;
use
tinystr
:
:
{
tinystr
TinyStr16
TinyStr4
}
;
use
writeable
:
:
Writeable
;
#
[
cfg
(
feature
=
"
std
"
)
]
impl
std
:
:
error
:
:
Error
for
CalendarError
{
}
#
[
derive
(
Display
Debug
Copy
Clone
PartialEq
)
]
#
[
non_exhaustive
]
pub
enum
CalendarError
{
#
[
displaydoc
(
"
Could
not
parse
as
integer
"
)
]
Parse
#
[
displaydoc
(
"
{
field
}
must
be
between
0
-
{
max
}
"
)
]
Overflow
{
field
:
&
'
static
str
max
:
usize
}
#
[
displaydoc
(
"
{
field
}
must
be
between
{
min
}
-
0
"
)
]
Underflow
{
field
:
&
'
static
str
min
:
isize
}
OutOfRange
#
[
displaydoc
(
"
No
era
named
{
0
}
for
calendar
{
1
}
"
)
]
UnknownEra
(
TinyStr16
&
'
static
str
)
#
[
displaydoc
(
"
No
month
code
named
{
0
}
for
calendar
{
1
}
"
)
]
UnknownMonthCode
(
TinyStr4
&
'
static
str
)
#
[
displaydoc
(
"
No
value
for
{
0
}
"
)
]
MissingInput
(
&
'
static
str
)
#
[
displaydoc
(
"
AnyCalendar
does
not
support
calendar
{
0
}
"
)
]
UnknownAnyCalendarKind
(
TinyStr16
)
#
[
displaydoc
(
"
An
operation
required
a
calendar
but
a
calendar
was
not
provided
"
)
]
MissingCalendar
#
[
displaydoc
(
"
{
0
}
"
)
]
Data
(
DataError
)
}
impl
From
<
core
:
:
num
:
:
ParseIntError
>
for
CalendarError
{
fn
from
(
_
:
core
:
:
num
:
:
ParseIntError
)
-
>
Self
{
CalendarError
:
:
Parse
}
}
impl
From
<
DataError
>
for
CalendarError
{
fn
from
(
e
:
DataError
)
-
>
Self
{
CalendarError
:
:
Data
(
e
)
}
}
impl
CalendarError
{
pub
fn
unknown_any_calendar_kind
(
description
:
impl
Writeable
)
-
>
Self
{
let
tiny
=
description
.
write_to_string
(
)
.
get
(
0
.
.
16
)
.
and_then
(
|
x
|
TinyStr16
:
:
from_str
(
x
)
.
ok
(
)
)
.
unwrap_or
(
tinystr
!
(
16
"
invalid
"
)
)
;
Self
:
:
UnknownAnyCalendarKind
(
tiny
)
}
}
