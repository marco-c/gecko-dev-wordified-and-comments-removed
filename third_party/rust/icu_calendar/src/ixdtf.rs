use
core
:
:
str
:
:
FromStr
;
use
crate
:
:
{
AsCalendar
Calendar
Date
Iso
RangeError
}
;
use
icu_locale_core
:
:
preferences
:
:
extensions
:
:
unicode
:
:
keywords
:
:
CalendarAlgorithm
;
use
ixdtf
:
:
parsers
:
:
records
:
:
IxdtfParseRecord
;
use
ixdtf
:
:
parsers
:
:
IxdtfParser
;
use
ixdtf
:
:
ParseError
as
Rfc9557Error
;
#
[
derive
(
Debug
displaydoc
:
:
Display
)
]
#
[
non_exhaustive
]
pub
enum
ParseError
{
#
[
displaydoc
(
"
Syntax
error
in
the
RFC
9557
string
:
{
0
}
"
)
]
Syntax
(
Rfc9557Error
)
#
[
displaydoc
(
"
Value
out
of
range
:
{
0
}
"
)
]
Range
(
RangeError
)
MissingFields
UnknownCalendar
#
[
displaydoc
(
"
Expected
calendar
{
0
:
?
}
but
found
calendar
{
1
:
?
}
"
)
]
MismatchedCalendar
(
CalendarAlgorithm
CalendarAlgorithm
)
}
impl
From
<
RangeError
>
for
ParseError
{
fn
from
(
value
:
RangeError
)
-
>
Self
{
Self
:
:
Range
(
value
)
}
}
impl
From
<
Rfc9557Error
>
for
ParseError
{
fn
from
(
value
:
Rfc9557Error
)
-
>
Self
{
Self
:
:
Syntax
(
value
)
}
}
impl
FromStr
for
Date
<
Iso
>
{
type
Err
=
ParseError
;
fn
from_str
(
rfc_9557_str
:
&
str
)
-
>
Result
<
Self
Self
:
:
Err
>
{
Self
:
:
try_from_str
(
rfc_9557_str
Iso
)
}
}
impl
<
A
:
AsCalendar
>
Date
<
A
>
{
pub
fn
try_from_str
(
rfc_9557_str
:
&
str
calendar
:
A
)
-
>
Result
<
Self
ParseError
>
{
Self
:
:
try_from_utf8
(
rfc_9557_str
.
as_bytes
(
)
calendar
)
}
pub
fn
try_from_utf8
(
rfc_9557_str
:
&
[
u8
]
calendar
:
A
)
-
>
Result
<
Self
ParseError
>
{
let
ixdtf_record
=
IxdtfParser
:
:
from_utf8
(
rfc_9557_str
)
.
parse
(
)
?
;
Self
:
:
try_from_ixdtf_record
(
&
ixdtf_record
calendar
)
}
#
[
doc
(
hidden
)
]
pub
fn
try_from_ixdtf_record
(
ixdtf_record
:
&
IxdtfParseRecord
calendar
:
A
)
-
>
Result
<
Self
ParseError
>
{
let
date_record
=
ixdtf_record
.
date
.
ok_or
(
ParseError
:
:
MissingFields
)
?
;
let
iso
=
Date
:
:
try_new_iso
(
date_record
.
year
date_record
.
month
date_record
.
day
)
?
;
if
let
Some
(
ixdtf_calendar
)
=
ixdtf_record
.
calendar
{
if
let
Some
(
expected_calendar
)
=
calendar
.
as_calendar
(
)
.
calendar_algorithm
(
)
{
if
let
Some
(
parsed_calendar
)
=
icu_locale_core
:
:
extensions
:
:
unicode
:
:
Value
:
:
try_from_utf8
(
ixdtf_calendar
)
.
ok
(
)
.
and_then
(
|
v
|
CalendarAlgorithm
:
:
try_from
(
&
v
)
.
ok
(
)
)
{
if
parsed_calendar
!
=
expected_calendar
{
return
Err
(
ParseError
:
:
MismatchedCalendar
(
expected_calendar
parsed_calendar
)
)
;
}
}
}
}
Ok
(
iso
.
to_calendar
(
calendar
)
)
}
}
