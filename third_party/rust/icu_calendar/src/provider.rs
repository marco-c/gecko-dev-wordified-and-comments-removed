#
!
[
allow
(
clippy
:
:
exhaustive_structs
clippy
:
:
exhaustive_enums
)
]
use
crate
:
:
types
:
:
IsoWeekday
;
use
core
:
:
str
:
:
FromStr
;
use
icu_provider
:
:
prelude
:
:
*
;
use
tinystr
:
:
TinyStr16
;
use
zerovec
:
:
ZeroVec
;
#
[
cfg
(
feature
=
"
compiled_data
"
)
]
#
[
derive
(
Debug
)
]
pub
struct
Baked
;
#
[
cfg
(
feature
=
"
compiled_data
"
)
]
const
_
:
(
)
=
{
pub
mod
icu
{
pub
use
crate
as
calendar
;
pub
use
icu_locid_transform
as
locid_transform
;
}
icu_calendar_data
:
:
make_provider
!
(
Baked
)
;
icu_calendar_data
:
:
impl_calendar_japanese_v1
!
(
Baked
)
;
icu_calendar_data
:
:
impl_calendar_japanext_v1
!
(
Baked
)
;
icu_calendar_data
:
:
impl_datetime_week_data_v1
!
(
Baked
)
;
}
;
#
[
cfg
(
feature
=
"
datagen
"
)
]
pub
const
KEYS
:
&
[
DataKey
]
=
&
[
JapaneseErasV1Marker
:
:
KEY
JapaneseExtendedErasV1Marker
:
:
KEY
WeekDataV1Marker
:
:
KEY
]
;
#
[
zerovec
:
:
make_ule
(
EraStartDateULE
)
]
#
[
derive
(
Copy
Clone
PartialEq
PartialOrd
Eq
Ord
Hash
Debug
yoke
:
:
Yokeable
zerofrom
:
:
ZeroFrom
)
]
#
[
cfg_attr
(
feature
=
"
datagen
"
derive
(
serde
:
:
Serialize
databake
:
:
Bake
)
databake
(
path
=
icu_calendar
:
:
provider
)
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
serde
:
:
Deserialize
)
)
]
pub
struct
EraStartDate
{
pub
year
:
i32
pub
month
:
u8
pub
day
:
u8
}
#
[
icu_provider
:
:
data_struct
(
marker
(
JapaneseErasV1Marker
"
calendar
/
japanese
1
"
singleton
)
marker
(
JapaneseExtendedErasV1Marker
"
calendar
/
japanext
1
"
singleton
)
)
]
#
[
derive
(
Debug
PartialEq
Clone
Default
)
]
#
[
cfg_attr
(
feature
=
"
datagen
"
derive
(
serde
:
:
Serialize
databake
:
:
Bake
)
databake
(
path
=
icu_calendar
:
:
provider
)
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
serde
:
:
Deserialize
)
)
]
pub
struct
JapaneseErasV1
<
'
data
>
{
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
dates_to_eras
:
ZeroVec
<
'
data
(
EraStartDate
TinyStr16
)
>
}
impl
FromStr
for
EraStartDate
{
type
Err
=
(
)
;
fn
from_str
(
mut
s
:
&
str
)
-
>
Result
<
Self
(
)
>
{
let
sign
=
if
let
Some
(
suffix
)
=
s
.
strip_prefix
(
'
-
'
)
{
s
=
suffix
;
-
1
}
else
{
1
}
;
let
mut
split
=
s
.
split
(
'
-
'
)
;
let
year
=
split
.
next
(
)
.
ok_or
(
(
)
)
?
.
parse
:
:
<
i32
>
(
)
.
map_err
(
|
_
|
(
)
)
?
*
sign
;
let
month
=
split
.
next
(
)
.
ok_or
(
(
)
)
?
.
parse
(
)
.
map_err
(
|
_
|
(
)
)
?
;
let
day
=
split
.
next
(
)
.
ok_or
(
(
)
)
?
.
parse
(
)
.
map_err
(
|
_
|
(
)
)
?
;
Ok
(
EraStartDate
{
year
month
day
}
)
}
}
#
[
icu_provider
:
:
data_struct
(
marker
(
WeekDataV1Marker
"
datetime
/
week_data
1
"
fallback_by
=
"
region
"
)
)
]
#
[
derive
(
Clone
Copy
Debug
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
datagen
"
derive
(
serde
:
:
Serialize
databake
:
:
Bake
)
databake
(
path
=
icu_calendar
:
:
provider
)
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
serde
:
:
Deserialize
)
)
]
#
[
allow
(
clippy
:
:
exhaustive_structs
)
]
pub
struct
WeekDataV1
{
pub
first_weekday
:
IsoWeekday
pub
min_week_days
:
u8
}
