use
crate
:
:
data_structures
:
:
{
MoveInfo
MoveInfoElem
RangeId
RealRange
RealRangeIx
RegClass
RegToRangesMaps
TypedIxVec
VirtualRange
VirtualRangeIx
VirtualReg
}
;
use
crate
:
:
sparse_set
:
:
SparseSet
;
use
log
:
:
debug
;
pub
fn
do_reftypes_analysis
(
rlr_env
:
&
mut
TypedIxVec
<
RealRangeIx
RealRange
>
vlr_env
:
&
mut
TypedIxVec
<
VirtualRangeIx
VirtualRange
>
reg_to_ranges_maps
:
&
RegToRangesMaps
move_info
:
&
MoveInfo
reftype_class
:
RegClass
reftyped_vregs
:
&
Vec
<
VirtualReg
>
)
{
let
mut
range_pairs
=
Vec
:
:
<
(
RangeId
RangeId
)
>
:
:
new
(
)
;
debug
!
(
"
do_reftypes_analysis
starting
"
)
;
for
&
MoveInfoElem
{
dst
src
src_range
dst_range
iix
.
.
}
in
&
move_info
.
moves
{
if
dst
.
get_class
(
)
!
=
reftype_class
{
continue
;
}
debug
!
(
"
move
from
{
:
?
}
(
range
{
:
?
}
)
to
{
:
?
}
(
range
{
:
?
}
)
at
inst
{
:
?
}
"
src
src_range
dst
dst_range
iix
)
;
range_pairs
.
push
(
(
dst_range
src_range
)
)
;
}
let
mut
reftyped_ranges
=
SparseSet
:
:
<
RangeId
>
:
:
empty
(
)
;
for
vreg
in
reftyped_vregs
{
debug_assert
!
(
vreg
.
get_class
(
)
=
=
reftype_class
)
;
for
vlrix
in
&
reg_to_ranges_maps
.
vreg_to_vlrs_map
[
vreg
.
get_index
(
)
]
{
debug
!
(
"
range
{
:
?
}
is
reffy
due
to
reffy
vreg
{
:
?
}
"
vlrix
vreg
)
;
reftyped_ranges
.
insert
(
RangeId
:
:
new_virtual
(
*
vlrix
)
)
;
}
}
loop
{
let
card_before
=
reftyped_ranges
.
card
(
)
;
for
(
dst_lr_id
src_lr_id
)
in
&
range_pairs
{
if
reftyped_ranges
.
contains
(
*
src_lr_id
)
{
debug
!
(
"
reftyped
range
{
:
?
}
-
>
{
:
?
}
"
src_lr_id
dst_lr_id
)
;
reftyped_ranges
.
insert
(
*
dst_lr_id
)
;
}
}
let
card_after
=
reftyped_ranges
.
card
(
)
;
if
card_after
=
=
card_before
{
break
;
}
}
for
lr_id
in
reftyped_ranges
.
iter
(
)
{
if
lr_id
.
is_real
(
)
{
let
rrange
=
&
mut
rlr_env
[
lr_id
.
to_real
(
)
]
;
debug_assert
!
(
!
rrange
.
is_ref
)
;
debug
!
(
"
-
>
rrange
{
:
?
}
is
reffy
"
lr_id
.
to_real
(
)
)
;
rrange
.
is_ref
=
true
;
}
else
{
let
vrange
=
&
mut
vlr_env
[
lr_id
.
to_virtual
(
)
]
;
debug_assert
!
(
!
vrange
.
is_ref
)
;
debug
!
(
"
-
>
rrange
{
:
?
}
is
reffy
"
lr_id
.
to_virtual
(
)
)
;
vrange
.
is_ref
=
true
;
}
}
}
