use
ast
;
use
codemap
:
:
Span
;
use
parse
:
:
parser
:
:
Parser
;
use
ptr
:
:
P
;
use
tokenstream
:
:
TokenStream
;
use
ext
:
:
base
:
:
*
;
pub
fn
build_block_emitter
<
'
cx
>
(
cx
:
&
'
cx
mut
ExtCtxt
sp
:
Span
output
:
TokenStream
)
-
>
Box
<
MacResult
+
'
cx
>
{
let
parser
=
cx
.
new_parser_from_tts
(
&
output
.
to_tts
(
)
)
;
struct
Result
<
'
a
>
{
prsr
:
Parser
<
'
a
>
span
:
Span
}
;
impl
<
'
a
>
Result
<
'
a
>
{
fn
block
(
&
mut
self
)
-
>
P
<
ast
:
:
Block
>
{
let
res
=
self
.
prsr
.
parse_block
(
)
.
unwrap
(
)
;
res
}
}
impl
<
'
a
>
MacResult
for
Result
<
'
a
>
{
fn
make_expr
(
self
:
Box
<
Self
>
)
-
>
Option
<
P
<
ast
:
:
Expr
>
>
{
let
mut
me
=
*
self
;
Some
(
P
(
ast
:
:
Expr
{
id
:
ast
:
:
DUMMY_NODE_ID
node
:
ast
:
:
ExprKind
:
:
Block
(
me
.
block
(
)
)
span
:
me
.
span
attrs
:
ast
:
:
ThinVec
:
:
new
(
)
}
)
)
}
}
Box
:
:
new
(
Result
{
prsr
:
parser
span
:
sp
}
)
}
pub
mod
prelude
{
pub
use
super
:
:
build_block_emitter
;
pub
use
ast
:
:
Ident
;
pub
use
codemap
:
:
{
DUMMY_SP
Span
}
;
pub
use
ext
:
:
base
:
:
{
ExtCtxt
MacResult
}
;
pub
use
parse
:
:
token
:
:
{
self
Token
DelimToken
keywords
str_to_ident
}
;
pub
use
tokenstream
:
:
{
TokenTree
TokenStream
}
;
}
