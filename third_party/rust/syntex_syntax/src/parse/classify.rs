use
ast
:
:
{
self
BlockCheckMode
}
;
pub
fn
expr_requires_semi_to_be_stmt
(
e
:
&
ast
:
:
Expr
)
-
>
bool
{
match
e
.
node
{
ast
:
:
ExprKind
:
:
If
(
.
.
)
|
ast
:
:
ExprKind
:
:
IfLet
(
.
.
)
|
ast
:
:
ExprKind
:
:
Match
(
.
.
)
|
ast
:
:
ExprKind
:
:
Block
(
_
)
|
ast
:
:
ExprKind
:
:
While
(
.
.
)
|
ast
:
:
ExprKind
:
:
WhileLet
(
.
.
)
|
ast
:
:
ExprKind
:
:
Loop
(
.
.
)
|
ast
:
:
ExprKind
:
:
ForLoop
(
.
.
)
=
>
false
_
=
>
true
}
}
pub
fn
expr_is_simple_block
(
e
:
&
ast
:
:
Expr
)
-
>
bool
{
match
e
.
node
{
ast
:
:
ExprKind
:
:
Block
(
ref
block
)
=
>
block
.
rules
=
=
BlockCheckMode
:
:
Default
_
=
>
false
}
}
pub
fn
stmt_ends_with_semi
(
stmt
:
&
ast
:
:
StmtKind
)
-
>
bool
{
match
*
stmt
{
ast
:
:
StmtKind
:
:
Local
(
_
)
=
>
true
ast
:
:
StmtKind
:
:
Item
(
_
)
=
>
false
ast
:
:
StmtKind
:
:
Expr
(
ref
e
)
=
>
expr_requires_semi_to_be_stmt
(
e
)
ast
:
:
StmtKind
:
:
Semi
(
.
.
)
=
>
false
ast
:
:
StmtKind
:
:
Mac
(
.
.
)
=
>
false
}
}
