extern
crate
zerocopy
;
use
zerocopy
:
:
KnownLayout
;
fn
main
(
)
{
}
fn
assert_kl
<
T
:
?
Sized
+
KnownLayout
>
(
_
:
&
T
)
{
}
#
[
derive
(
KnownLayout
)
]
struct
KL04
<
T
:
?
Sized
>
(
u8
T
)
;
fn
test_kl04
<
T
:
?
Sized
>
(
kl
:
&
KL04
<
T
>
)
{
assert_kl
(
kl
)
;
}
#
[
derive
(
KnownLayout
)
]
struct
KL06
<
T
:
?
Sized
+
KnownLayout
>
(
u8
T
)
;
fn
test_kl06
<
T
:
?
Sized
+
KnownLayout
>
(
kl
:
&
KL06
<
T
>
)
{
assert_kl
(
kl
)
;
}
#
[
derive
(
KnownLayout
)
]
#
[
repr
(
C
)
]
struct
KL12
<
T
:
?
Sized
>
(
u8
T
)
;
fn
test_kl12
<
T
:
?
Sized
>
(
kl
:
&
KL12
<
T
>
)
{
assert_kl
(
kl
)
}
#
[
derive
(
KnownLayout
)
]
#
[
repr
(
C
)
]
struct
KL13
<
T
>
(
u8
T
)
;
fn
test_kl13
<
T
>
(
t
:
T
)
-
>
impl
KnownLayout
{
KL13
(
0u8
t
)
}
