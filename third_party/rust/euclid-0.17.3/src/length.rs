use
scale
:
:
TypedScale
;
use
num
:
:
Zero
;
use
num_traits
:
:
{
NumCast
Saturating
}
;
use
num
:
:
One
;
#
[
cfg
(
feature
=
"
serde
"
)
]
use
serde
:
:
{
Deserialize
Deserializer
Serialize
Serializer
}
;
use
std
:
:
cmp
:
:
Ordering
;
use
std
:
:
ops
:
:
{
Add
Div
Mul
Neg
Sub
}
;
use
std
:
:
ops
:
:
{
AddAssign
DivAssign
MulAssign
SubAssign
}
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
fmt
;
#
[
repr
(
C
)
]
pub
struct
Length
<
T
Unit
>
(
pub
T
PhantomData
<
Unit
>
)
;
impl
<
T
:
Clone
Unit
>
Clone
for
Length
<
T
Unit
>
{
fn
clone
(
&
self
)
-
>
Self
{
Length
(
self
.
0
.
clone
(
)
PhantomData
)
}
}
impl
<
T
:
Copy
Unit
>
Copy
for
Length
<
T
Unit
>
{
}
#
[
cfg
(
feature
=
"
serde
"
)
]
impl
<
'
de
Unit
T
>
Deserialize
<
'
de
>
for
Length
<
T
Unit
>
where
T
:
Deserialize
<
'
de
>
{
fn
deserialize
<
D
>
(
deserializer
:
D
)
-
>
Result
<
Self
D
:
:
Error
>
where
D
:
Deserializer
<
'
de
>
{
Ok
(
Length
(
try
!
(
Deserialize
:
:
deserialize
(
deserializer
)
)
PhantomData
)
)
}
}
#
[
cfg
(
feature
=
"
serde
"
)
]
impl
<
T
Unit
>
Serialize
for
Length
<
T
Unit
>
where
T
:
Serialize
{
fn
serialize
<
S
>
(
&
self
serializer
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
Serializer
{
self
.
0
.
serialize
(
serializer
)
}
}
impl
<
T
Unit
>
Length
<
T
Unit
>
{
pub
fn
new
(
x
:
T
)
-
>
Self
{
Length
(
x
PhantomData
)
}
}
impl
<
Unit
T
:
Clone
>
Length
<
T
Unit
>
{
pub
fn
get
(
&
self
)
-
>
T
{
self
.
0
.
clone
(
)
}
}
impl
<
T
:
fmt
:
:
Debug
+
Clone
U
>
fmt
:
:
Debug
for
Length
<
T
U
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
get
(
)
.
fmt
(
f
)
}
}
impl
<
T
:
fmt
:
:
Display
+
Clone
U
>
fmt
:
:
Display
for
Length
<
T
U
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
get
(
)
.
fmt
(
f
)
}
}
impl
<
U
T
:
Clone
+
Add
<
T
Output
=
T
>
>
Add
for
Length
<
T
U
>
{
type
Output
=
Length
<
T
U
>
;
fn
add
(
self
other
:
Length
<
T
U
>
)
-
>
Length
<
T
U
>
{
Length
:
:
new
(
self
.
get
(
)
+
other
.
get
(
)
)
}
}
impl
<
U
T
:
Clone
+
AddAssign
<
T
>
>
AddAssign
for
Length
<
T
U
>
{
fn
add_assign
(
&
mut
self
other
:
Length
<
T
U
>
)
{
self
.
0
+
=
other
.
get
(
)
;
}
}
impl
<
U
T
:
Clone
+
Sub
<
T
Output
=
T
>
>
Sub
<
Length
<
T
U
>
>
for
Length
<
T
U
>
{
type
Output
=
Length
<
T
U
>
;
fn
sub
(
self
other
:
Length
<
T
U
>
)
-
>
<
Self
as
Sub
>
:
:
Output
{
Length
:
:
new
(
self
.
get
(
)
-
other
.
get
(
)
)
}
}
impl
<
U
T
:
Clone
+
SubAssign
<
T
>
>
SubAssign
for
Length
<
T
U
>
{
fn
sub_assign
(
&
mut
self
other
:
Length
<
T
U
>
)
{
self
.
0
-
=
other
.
get
(
)
;
}
}
impl
<
U
T
:
Clone
+
Saturating
>
Saturating
for
Length
<
T
U
>
{
fn
saturating_add
(
self
other
:
Length
<
T
U
>
)
-
>
Length
<
T
U
>
{
Length
:
:
new
(
self
.
get
(
)
.
saturating_add
(
other
.
get
(
)
)
)
}
fn
saturating_sub
(
self
other
:
Length
<
T
U
>
)
-
>
Length
<
T
U
>
{
Length
:
:
new
(
self
.
get
(
)
.
saturating_sub
(
other
.
get
(
)
)
)
}
}
impl
<
Src
Dst
T
:
Clone
+
Div
<
T
Output
=
T
>
>
Div
<
Length
<
T
Src
>
>
for
Length
<
T
Dst
>
{
type
Output
=
TypedScale
<
T
Src
Dst
>
;
#
[
inline
]
fn
div
(
self
other
:
Length
<
T
Src
>
)
-
>
TypedScale
<
T
Src
Dst
>
{
TypedScale
:
:
new
(
self
.
get
(
)
/
other
.
get
(
)
)
}
}
impl
<
T
:
Copy
+
Mul
<
T
Output
=
T
>
U
>
Mul
<
T
>
for
Length
<
T
U
>
{
type
Output
=
Self
;
#
[
inline
]
fn
mul
(
self
scale
:
T
)
-
>
Self
{
Length
:
:
new
(
self
.
get
(
)
*
scale
)
}
}
impl
<
T
:
Copy
+
Mul
<
T
Output
=
T
>
U
>
MulAssign
<
T
>
for
Length
<
T
U
>
{
#
[
inline
]
fn
mul_assign
(
&
mut
self
scale
:
T
)
{
*
self
=
*
self
*
scale
}
}
impl
<
T
:
Copy
+
Div
<
T
Output
=
T
>
U
>
Div
<
T
>
for
Length
<
T
U
>
{
type
Output
=
Self
;
#
[
inline
]
fn
div
(
self
scale
:
T
)
-
>
Self
{
Length
:
:
new
(
self
.
get
(
)
/
scale
)
}
}
impl
<
T
:
Copy
+
Div
<
T
Output
=
T
>
U
>
DivAssign
<
T
>
for
Length
<
T
U
>
{
#
[
inline
]
fn
div_assign
(
&
mut
self
scale
:
T
)
{
*
self
=
*
self
/
scale
}
}
impl
<
Src
Dst
T
:
Clone
+
Mul
<
T
Output
=
T
>
>
Mul
<
TypedScale
<
T
Src
Dst
>
>
for
Length
<
T
Src
>
{
type
Output
=
Length
<
T
Dst
>
;
#
[
inline
]
fn
mul
(
self
scale
:
TypedScale
<
T
Src
Dst
>
)
-
>
Length
<
T
Dst
>
{
Length
:
:
new
(
self
.
get
(
)
*
scale
.
get
(
)
)
}
}
impl
<
Src
Dst
T
:
Clone
+
Div
<
T
Output
=
T
>
>
Div
<
TypedScale
<
T
Src
Dst
>
>
for
Length
<
T
Dst
>
{
type
Output
=
Length
<
T
Src
>
;
#
[
inline
]
fn
div
(
self
scale
:
TypedScale
<
T
Src
Dst
>
)
-
>
Length
<
T
Src
>
{
Length
:
:
new
(
self
.
get
(
)
/
scale
.
get
(
)
)
}
}
impl
<
U
T
:
Clone
+
Neg
<
Output
=
T
>
>
Neg
for
Length
<
T
U
>
{
type
Output
=
Length
<
T
U
>
;
#
[
inline
]
fn
neg
(
self
)
-
>
Length
<
T
U
>
{
Length
:
:
new
(
-
self
.
get
(
)
)
}
}
impl
<
Unit
T0
:
NumCast
+
Clone
>
Length
<
T0
Unit
>
{
pub
fn
cast
<
T1
:
NumCast
+
Clone
>
(
&
self
)
-
>
Option
<
Length
<
T1
Unit
>
>
{
NumCast
:
:
from
(
self
.
get
(
)
)
.
map
(
Length
:
:
new
)
}
}
impl
<
Unit
T
:
Clone
+
PartialEq
>
PartialEq
for
Length
<
T
Unit
>
{
fn
eq
(
&
self
other
:
&
Self
)
-
>
bool
{
self
.
get
(
)
.
eq
(
&
other
.
get
(
)
)
}
}
impl
<
Unit
T
:
Clone
+
PartialOrd
>
PartialOrd
for
Length
<
T
Unit
>
{
fn
partial_cmp
(
&
self
other
:
&
Self
)
-
>
Option
<
Ordering
>
{
self
.
get
(
)
.
partial_cmp
(
&
other
.
get
(
)
)
}
}
impl
<
Unit
T
:
Clone
+
Eq
>
Eq
for
Length
<
T
Unit
>
{
}
impl
<
Unit
T
:
Clone
+
Ord
>
Ord
for
Length
<
T
Unit
>
{
fn
cmp
(
&
self
other
:
&
Self
)
-
>
Ordering
{
self
.
get
(
)
.
cmp
(
&
other
.
get
(
)
)
}
}
impl
<
Unit
T
:
Zero
>
Zero
for
Length
<
T
Unit
>
{
fn
zero
(
)
-
>
Self
{
Length
:
:
new
(
Zero
:
:
zero
(
)
)
}
}
impl
<
T
U
>
Length
<
T
U
>
where
T
:
Copy
+
One
+
Add
<
Output
=
T
>
+
Sub
<
Output
=
T
>
+
Mul
<
Output
=
T
>
{
#
[
inline
]
pub
fn
lerp
(
&
self
other
:
Self
t
:
T
)
-
>
Self
{
let
one_t
=
T
:
:
one
(
)
-
t
;
Length
:
:
new
(
one_t
*
self
.
get
(
)
+
t
*
other
.
get
(
)
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
Length
;
use
num
:
:
Zero
;
use
num_traits
:
:
Saturating
;
use
scale
:
:
TypedScale
;
use
std
:
:
f32
:
:
INFINITY
;
enum
Inch
{
}
enum
Mm
{
}
enum
Cm
{
}
enum
Second
{
}
#
[
cfg
(
feature
=
"
serde
"
)
]
mod
serde
{
use
super
:
:
*
;
extern
crate
serde_test
;
use
self
:
:
serde_test
:
:
Token
;
use
self
:
:
serde_test
:
:
assert_tokens
;
#
[
test
]
fn
test_length_serde
(
)
{
let
one_cm
:
Length
<
f32
Mm
>
=
Length
:
:
new
(
10
.
0
)
;
assert_tokens
(
&
one_cm
&
[
Token
:
:
F32
(
10
.
0
)
]
)
;
}
}
#
[
test
]
fn
test_clone
(
)
{
let
mut
variable_length
:
Length
<
f32
Inch
>
=
Length
:
:
new
(
12
.
0
)
;
let
one_foot
=
variable_length
.
clone
(
)
;
variable_length
.
0
=
24
.
0
;
assert_eq
!
(
one_foot
.
get
(
)
12
.
0
)
;
assert_eq
!
(
variable_length
.
get
(
)
24
.
0
)
;
}
#
[
test
]
fn
test_get_clones_length_value
(
)
{
let
mut
length
:
Length
<
Vec
<
i32
>
Inch
>
=
Length
:
:
new
(
vec
!
[
1
2
3
]
)
;
let
value
=
length
.
get
(
)
;
length
.
0
.
push
(
4
)
;
assert_eq
!
(
value
vec
!
[
1
2
3
]
)
;
assert_eq
!
(
length
.
get
(
)
vec
!
[
1
2
3
4
]
)
;
}
#
[
test
]
fn
test_add
(
)
{
let
length1
:
Length
<
u8
Mm
>
=
Length
:
:
new
(
250
)
;
let
length2
:
Length
<
u8
Mm
>
=
Length
:
:
new
(
5
)
;
let
result
=
length1
+
length2
;
assert_eq
!
(
result
.
get
(
)
255
)
;
}
#
[
test
]
fn
test_addassign
(
)
{
let
one_cm
:
Length
<
f32
Mm
>
=
Length
:
:
new
(
10
.
0
)
;
let
mut
measurement
:
Length
<
f32
Mm
>
=
Length
:
:
new
(
5
.
0
)
;
measurement
+
=
one_cm
;
assert_eq
!
(
measurement
.
get
(
)
15
.
0
)
;
}
#
[
test
]
fn
test_sub
(
)
{
let
length1
:
Length
<
u8
Mm
>
=
Length
:
:
new
(
250
)
;
let
length2
:
Length
<
u8
Mm
>
=
Length
:
:
new
(
5
)
;
let
result
=
length1
-
length2
;
assert_eq
!
(
result
.
get
(
)
245
)
;
}
#
[
test
]
fn
test_subassign
(
)
{
let
one_cm
:
Length
<
f32
Mm
>
=
Length
:
:
new
(
10
.
0
)
;
let
mut
measurement
:
Length
<
f32
Mm
>
=
Length
:
:
new
(
5
.
0
)
;
measurement
-
=
one_cm
;
assert_eq
!
(
measurement
.
get
(
)
-
5
.
0
)
;
}
#
[
test
]
fn
test_saturating_add
(
)
{
let
length1
:
Length
<
u8
Mm
>
=
Length
:
:
new
(
250
)
;
let
length2
:
Length
<
u8
Mm
>
=
Length
:
:
new
(
6
)
;
let
result
=
length1
.
saturating_add
(
length2
)
;
assert_eq
!
(
result
.
get
(
)
255
)
;
}
#
[
test
]
fn
test_saturating_sub
(
)
{
let
length1
:
Length
<
u8
Mm
>
=
Length
:
:
new
(
5
)
;
let
length2
:
Length
<
u8
Mm
>
=
Length
:
:
new
(
10
)
;
let
result
=
length1
.
saturating_sub
(
length2
)
;
assert_eq
!
(
result
.
get
(
)
0
)
;
}
#
[
test
]
fn
test_division_by_length
(
)
{
let
length
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
5
.
0
)
;
let
duration
:
Length
<
f32
Second
>
=
Length
:
:
new
(
10
.
0
)
;
let
result
=
length
/
duration
;
let
expected
:
TypedScale
<
f32
Second
Cm
>
=
TypedScale
:
:
new
(
0
.
5
)
;
assert_eq
!
(
result
expected
)
;
}
#
[
test
]
fn
test_multiplication
(
)
{
let
length_mm
:
Length
<
f32
Mm
>
=
Length
:
:
new
(
10
.
0
)
;
let
cm_per_mm
:
TypedScale
<
f32
Mm
Cm
>
=
TypedScale
:
:
new
(
0
.
1
)
;
let
result
=
length_mm
*
cm_per_mm
;
let
expected
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
1
.
0
)
;
assert_eq
!
(
result
expected
)
;
}
#
[
test
]
fn
test_multiplication_with_scalar
(
)
{
let
length_mm
:
Length
<
f32
Mm
>
=
Length
:
:
new
(
10
.
0
)
;
let
result
=
length_mm
*
2
.
0
;
let
expected
:
Length
<
f32
Mm
>
=
Length
:
:
new
(
20
.
0
)
;
assert_eq
!
(
result
expected
)
;
}
#
[
test
]
fn
test_multiplication_assignment
(
)
{
let
mut
length
:
Length
<
f32
Mm
>
=
Length
:
:
new
(
10
.
0
)
;
length
*
=
2
.
0
;
let
expected
:
Length
<
f32
Mm
>
=
Length
:
:
new
(
20
.
0
)
;
assert_eq
!
(
length
expected
)
;
}
#
[
test
]
fn
test_division_by_scalefactor
(
)
{
let
length
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
5
.
0
)
;
let
cm_per_second
:
TypedScale
<
f32
Second
Cm
>
=
TypedScale
:
:
new
(
10
.
0
)
;
let
result
=
length
/
cm_per_second
;
let
expected
:
Length
<
f32
Second
>
=
Length
:
:
new
(
0
.
5
)
;
assert_eq
!
(
result
expected
)
;
}
#
[
test
]
fn
test_division_by_scalar
(
)
{
let
length
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
5
.
0
)
;
let
result
=
length
/
2
.
0
;
let
expected
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
2
.
5
)
;
assert_eq
!
(
result
expected
)
;
}
#
[
test
]
fn
test_division_assignment
(
)
{
let
mut
length
:
Length
<
f32
Mm
>
=
Length
:
:
new
(
10
.
0
)
;
length
/
=
2
.
0
;
let
expected
:
Length
<
f32
Mm
>
=
Length
:
:
new
(
5
.
0
)
;
assert_eq
!
(
length
expected
)
;
}
#
[
test
]
fn
test_negation
(
)
{
let
length
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
5
.
0
)
;
let
result
=
-
length
;
let
expected
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
-
5
.
0
)
;
assert_eq
!
(
result
expected
)
;
}
#
[
test
]
fn
test_cast
(
)
{
let
length_as_i32
:
Length
<
i32
Cm
>
=
Length
:
:
new
(
5
)
;
let
result
:
Length
<
f32
Cm
>
=
length_as_i32
.
cast
(
)
.
unwrap
(
)
;
let
length_as_f32
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
5
.
0
)
;
assert_eq
!
(
result
length_as_f32
)
;
}
#
[
test
]
fn
test_equality
(
)
{
let
length_5_point_0
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
5
.
0
)
;
let
length_5_point_1
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
5
.
1
)
;
let
length_0_point_1
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
0
.
1
)
;
assert
!
(
length_5_point_0
=
=
length_5_point_1
-
length_0_point_1
)
;
assert
!
(
length_5_point_0
!
=
length_5_point_1
)
;
}
#
[
test
]
fn
test_order
(
)
{
let
length_5_point_0
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
5
.
0
)
;
let
length_5_point_1
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
5
.
1
)
;
let
length_0_point_1
:
Length
<
f32
Cm
>
=
Length
:
:
new
(
0
.
1
)
;
assert
!
(
length_5_point_0
<
length_5_point_1
)
;
assert
!
(
length_5_point_0
<
=
length_5_point_1
)
;
assert
!
(
length_5_point_0
<
=
length_5_point_1
-
length_0_point_1
)
;
assert
!
(
length_5_point_1
>
length_5_point_0
)
;
assert
!
(
length_5_point_1
>
=
length_5_point_0
)
;
assert
!
(
length_5_point_0
>
=
length_5_point_1
-
length_0_point_1
)
;
}
#
[
test
]
fn
test_zero_add
(
)
{
type
LengthCm
=
Length
<
f32
Cm
>
;
let
length
:
LengthCm
=
Length
:
:
new
(
5
.
0
)
;
let
result
=
length
-
LengthCm
:
:
zero
(
)
;
assert_eq
!
(
result
length
)
;
}
#
[
test
]
fn
test_zero_division
(
)
{
type
LengthCm
=
Length
<
f32
Cm
>
;
let
length
:
LengthCm
=
Length
:
:
new
(
5
.
0
)
;
let
length_zero
:
LengthCm
=
Length
:
:
zero
(
)
;
let
result
=
length
/
length_zero
;
let
expected
:
TypedScale
<
f32
Cm
Cm
>
=
TypedScale
:
:
new
(
INFINITY
)
;
assert_eq
!
(
result
expected
)
;
}
}
