use
syn
:
:
{
Expr
Meta
}
;
use
crate
:
:
{
Error
FromMeta
}
;
pub
fn
preserve_str_literal
(
meta
:
&
Meta
)
-
>
crate
:
:
Result
<
Expr
>
{
match
meta
{
Meta
:
:
Path
(
_
)
=
>
Err
(
Error
:
:
unsupported_format
(
"
path
"
)
.
with_span
(
meta
)
)
Meta
:
:
List
(
_
)
=
>
Err
(
Error
:
:
unsupported_format
(
"
list
"
)
.
with_span
(
meta
)
)
Meta
:
:
NameValue
(
nv
)
=
>
Ok
(
nv
.
value
.
clone
(
)
)
}
}
pub
fn
parse_str_literal
(
meta
:
&
Meta
)
-
>
crate
:
:
Result
<
Expr
>
{
match
meta
{
Meta
:
:
Path
(
_
)
=
>
Err
(
Error
:
:
unsupported_format
(
"
path
"
)
.
with_span
(
meta
)
)
Meta
:
:
List
(
_
)
=
>
Err
(
Error
:
:
unsupported_format
(
"
list
"
)
.
with_span
(
meta
)
)
Meta
:
:
NameValue
(
nv
)
=
>
{
if
let
Expr
:
:
Lit
(
expr_lit
)
=
&
nv
.
value
{
Expr
:
:
from_value
(
&
expr_lit
.
lit
)
}
else
{
Ok
(
nv
.
value
.
clone
(
)
)
}
}
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
syn
:
:
parse_quote
;
use
super
:
:
*
;
macro_rules
!
meta
{
(
body
:
expr
)
=
>
{
{
let
attr
:
:
:
syn
:
:
Attribute
=
:
:
syn
:
:
parse_quote
!
(
#
[
ignore
=
body
]
)
;
attr
.
meta
}
}
;
}
#
[
test
]
fn
preserve_str
(
)
{
assert_eq
!
(
preserve_str_literal
(
&
meta
!
(
"
World
"
)
)
.
unwrap
(
)
parse_quote
!
(
"
World
"
)
)
;
}
#
[
test
]
fn
preserve_binary_exp
(
)
{
assert_eq
!
(
preserve_str_literal
(
&
meta
!
(
"
World
"
+
5
)
)
.
unwrap
(
)
parse_quote
!
(
"
World
"
+
5
)
)
}
#
[
test
]
fn
parse_ident
(
)
{
assert_eq
!
(
parse_str_literal
(
&
meta
!
(
"
world
"
)
)
.
unwrap
(
)
parse_quote
!
(
world
)
)
}
}
