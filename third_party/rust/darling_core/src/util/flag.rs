use
proc_macro2
:
:
Span
;
use
syn
:
:
{
spanned
:
:
Spanned
Meta
}
;
use
crate
:
:
{
FromMeta
Result
}
;
#
[
derive
(
Debug
Clone
Copy
Default
)
]
pub
struct
Flag
(
Option
<
Span
>
)
;
impl
Flag
{
pub
fn
present
(
)
-
>
Self
{
Flag
(
Some
(
Span
:
:
call_site
(
)
)
)
}
pub
fn
is_present
(
&
self
)
-
>
bool
{
self
.
0
.
is_some
(
)
}
#
[
deprecated
(
since
=
"
0
.
14
.
0
"
note
=
"
Use
Flag
:
:
is_present
"
)
]
pub
fn
is_some
(
&
self
)
-
>
bool
{
self
.
is_present
(
)
}
pub
fn
span
(
&
self
)
-
>
Span
{
self
.
0
.
unwrap_or_else
(
Span
:
:
call_site
)
}
}
impl
FromMeta
for
Flag
{
fn
from_none
(
)
-
>
Option
<
Self
>
{
Some
(
Flag
(
None
)
)
}
fn
from_meta
(
mi
:
&
syn
:
:
Meta
)
-
>
Result
<
Self
>
{
if
let
Meta
:
:
Path
(
p
)
=
mi
{
Ok
(
Flag
(
Some
(
p
.
span
(
)
)
)
)
}
else
{
Err
(
<
(
)
>
:
:
from_meta
(
mi
)
.
unwrap_err
(
)
)
}
}
}
impl
From
<
Flag
>
for
bool
{
fn
from
(
flag
:
Flag
)
-
>
Self
{
flag
.
is_present
(
)
}
}
impl
From
<
bool
>
for
Flag
{
fn
from
(
v
:
bool
)
-
>
Self
{
if
v
{
Flag
:
:
present
(
)
}
else
{
Flag
(
None
)
}
}
}
