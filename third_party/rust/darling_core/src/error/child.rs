use
proc_macro2
:
:
Span
;
#
[
derive
(
Debug
Clone
)
]
pub
(
in
crate
:
:
error
)
enum
Level
{
Error
Warning
Note
Help
}
#
[
derive
(
Debug
Clone
)
]
pub
(
in
crate
:
:
error
)
struct
ChildDiagnostic
{
level
:
Level
span
:
Option
<
Span
>
message
:
String
}
impl
ChildDiagnostic
{
pub
(
in
crate
:
:
error
)
fn
new
(
level
:
Level
span
:
Option
<
Span
>
message
:
String
)
-
>
Self
{
Self
{
level
span
message
}
}
}
impl
ChildDiagnostic
{
pub
fn
append_to
(
self
diagnostic
:
proc_macro
:
:
Diagnostic
)
-
>
proc_macro
:
:
Diagnostic
{
match
self
.
level
{
Level
:
:
Error
=
>
{
if
let
Some
(
span
)
=
self
.
span
{
diagnostic
.
span_error
(
span
.
unwrap
(
)
self
.
message
)
}
else
{
diagnostic
.
error
(
self
.
message
)
}
}
Level
:
:
Warning
=
>
{
if
let
Some
(
span
)
=
self
.
span
{
diagnostic
.
span_warning
(
span
.
unwrap
(
)
self
.
message
)
}
else
{
diagnostic
.
warning
(
self
.
message
)
}
}
Level
:
:
Note
=
>
{
if
let
Some
(
span
)
=
self
.
span
{
diagnostic
.
span_note
(
span
.
unwrap
(
)
self
.
message
)
}
else
{
diagnostic
.
note
(
self
.
message
)
}
}
Level
:
:
Help
=
>
{
if
let
Some
(
span
)
=
self
.
span
{
diagnostic
.
span_help
(
span
.
unwrap
(
)
self
.
message
)
}
else
{
diagnostic
.
help
(
self
.
message
)
}
}
}
}
}
