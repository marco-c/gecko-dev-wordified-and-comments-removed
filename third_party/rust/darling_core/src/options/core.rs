use
ident_case
:
:
RenameRule
;
use
syn
;
use
{
Result
Error
FromMetaItem
}
;
use
ast
:
:
{
Body
Style
VariantData
}
;
use
codegen
;
use
options
:
:
{
DefaultExpression
InputField
InputVariant
ParseAttribute
ParseBody
}
;
#
[
derive
(
Debug
Clone
PartialEq
Eq
)
]
pub
struct
Core
{
pub
ident
:
syn
:
:
Ident
pub
generics
:
syn
:
:
Generics
pub
default
:
Option
<
DefaultExpression
>
pub
rename_rule
:
RenameRule
pub
map
:
Option
<
syn
:
:
Path
>
pub
body
:
Body
<
InputVariant
InputField
>
pub
bound
:
Option
<
Vec
<
syn
:
:
WherePredicate
>
>
}
impl
Core
{
pub
fn
start
(
di
:
&
syn
:
:
DeriveInput
)
-
>
Self
{
Core
{
ident
:
di
.
ident
.
clone
(
)
generics
:
di
.
generics
.
clone
(
)
body
:
Body
:
:
empty_from
(
&
di
.
body
)
default
:
Default
:
:
default
(
)
rename_rule
:
if
let
syn
:
:
Body
:
:
Enum
(
_
)
=
di
.
body
{
RenameRule
:
:
SnakeCase
}
else
{
Default
:
:
default
(
)
}
map
:
Default
:
:
default
(
)
bound
:
Default
:
:
default
(
)
}
}
fn
as_codegen_default
<
'
a
>
(
&
'
a
self
)
-
>
Option
<
codegen
:
:
DefaultExpression
<
'
a
>
>
{
self
.
default
.
as_ref
(
)
.
map
(
|
expr
|
{
match
*
expr
{
DefaultExpression
:
:
Explicit
(
ref
path
)
=
>
codegen
:
:
DefaultExpression
:
:
Explicit
(
path
)
DefaultExpression
:
:
Inherit
|
DefaultExpression
:
:
Trait
=
>
codegen
:
:
DefaultExpression
:
:
Trait
}
}
)
}
}
impl
ParseAttribute
for
Core
{
fn
parse_nested
(
&
mut
self
mi
:
&
syn
:
:
MetaItem
)
-
>
Result
<
(
)
>
{
match
mi
.
name
(
)
{
"
default
"
=
>
{
if
self
.
default
.
is_some
(
)
{
Err
(
Error
:
:
duplicate_field
(
"
default
"
)
)
}
else
{
self
.
default
=
FromMetaItem
:
:
from_meta_item
(
mi
)
?
;
Ok
(
(
)
)
}
}
"
rename_all
"
=
>
{
self
.
rename_rule
=
FromMetaItem
:
:
from_meta_item
(
mi
)
?
;
Ok
(
(
)
)
}
"
map
"
=
>
{
if
self
.
map
.
is_some
(
)
{
Err
(
Error
:
:
duplicate_field
(
"
map
"
)
)
}
else
{
self
.
map
=
FromMetaItem
:
:
from_meta_item
(
mi
)
?
;
Ok
(
(
)
)
}
}
"
bound
"
=
>
{
self
.
bound
=
FromMetaItem
:
:
from_meta_item
(
mi
)
?
;
Ok
(
(
)
)
}
n
=
>
Err
(
Error
:
:
unknown_field
(
n
)
)
}
}
}
impl
ParseBody
for
Core
{
fn
parse_variant
(
&
mut
self
variant
:
&
syn
:
:
Variant
)
-
>
Result
<
(
)
>
{
let
v
=
InputVariant
:
:
from_variant
(
variant
Some
(
&
self
)
)
?
;
match
self
.
body
{
Body
:
:
Enum
(
ref
mut
variants
)
=
>
{
variants
.
push
(
v
)
;
Ok
(
(
)
)
}
Body
:
:
Struct
(
_
)
=
>
panic
!
(
"
Core
:
:
parse_variant
should
never
be
called
for
a
struct
"
)
}
}
fn
parse_field
(
&
mut
self
field
:
&
syn
:
:
Field
)
-
>
Result
<
(
)
>
{
let
f
=
InputField
:
:
from_field
(
field
Some
(
&
self
)
)
?
;
match
self
.
body
{
Body
:
:
Struct
(
VariantData
{
style
:
Style
:
:
Unit
.
.
}
)
=
>
{
panic
!
(
"
Core
:
:
parse_field
should
not
be
called
on
unit
"
)
}
Body
:
:
Struct
(
VariantData
{
ref
mut
fields
.
.
}
)
=
>
{
fields
.
push
(
f
)
;
Ok
(
(
)
)
}
Body
:
:
Enum
(
_
)
=
>
panic
!
(
"
Core
:
:
parse_field
should
never
be
called
for
an
enum
"
)
}
}
}
impl
<
'
a
>
From
<
&
'
a
Core
>
for
codegen
:
:
TraitImpl
<
'
a
>
{
fn
from
(
v
:
&
'
a
Core
)
-
>
Self
{
codegen
:
:
TraitImpl
{
ident
:
&
v
.
ident
generics
:
&
v
.
generics
body
:
v
.
body
.
as_ref
(
)
.
map_struct_fields
(
InputField
:
:
as_codegen_field
)
.
map_enum_variants
(
|
variant
|
variant
.
as_codegen_variant
(
&
v
.
ident
)
)
default
:
v
.
as_codegen_default
(
)
map
:
v
.
map
.
as_ref
(
)
bound
:
v
.
bound
.
as_ref
(
)
.
map
(
|
i
|
i
.
as_slice
(
)
)
}
}
}
