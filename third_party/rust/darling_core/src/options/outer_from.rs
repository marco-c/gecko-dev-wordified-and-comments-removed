use
syn
:
:
{
Field
Ident
Meta
}
;
use
crate
:
:
options
:
:
{
Core
DefaultExpression
ForwardAttrs
ParseAttribute
ParseData
}
;
use
crate
:
:
util
:
:
PathList
;
use
crate
:
:
{
FromMeta
Result
}
;
#
[
derive
(
Debug
Clone
PartialEq
Eq
)
]
pub
struct
OuterFrom
{
pub
ident
:
Option
<
Ident
>
pub
attrs
:
Option
<
Ident
>
pub
container
:
Core
pub
attr_names
:
PathList
pub
forward_attrs
:
Option
<
ForwardAttrs
>
pub
from_ident
:
bool
}
impl
OuterFrom
{
pub
fn
start
(
di
:
&
syn
:
:
DeriveInput
)
-
>
Result
<
Self
>
{
Ok
(
OuterFrom
{
container
:
Core
:
:
start
(
di
)
?
attrs
:
Default
:
:
default
(
)
ident
:
Default
:
:
default
(
)
attr_names
:
Default
:
:
default
(
)
forward_attrs
:
Default
:
:
default
(
)
from_ident
:
Default
:
:
default
(
)
}
)
}
}
impl
ParseAttribute
for
OuterFrom
{
fn
parse_nested
(
&
mut
self
mi
:
&
Meta
)
-
>
Result
<
(
)
>
{
let
path
=
mi
.
path
(
)
;
if
path
.
is_ident
(
"
attributes
"
)
{
self
.
attr_names
=
FromMeta
:
:
from_meta
(
mi
)
?
;
}
else
if
path
.
is_ident
(
"
forward_attrs
"
)
{
self
.
forward_attrs
=
FromMeta
:
:
from_meta
(
mi
)
?
;
}
else
if
path
.
is_ident
(
"
from_ident
"
)
{
self
.
container
.
default
=
Some
(
DefaultExpression
:
:
Trait
)
;
self
.
from_ident
=
true
;
}
else
{
return
self
.
container
.
parse_nested
(
mi
)
;
}
Ok
(
(
)
)
}
}
impl
ParseData
for
OuterFrom
{
fn
parse_field
(
&
mut
self
field
:
&
Field
)
-
>
Result
<
(
)
>
{
match
field
.
ident
.
as_ref
(
)
.
map
(
|
v
|
v
.
to_string
(
)
)
.
as_ref
(
)
.
map
(
|
v
|
v
.
as_str
(
)
)
{
Some
(
"
ident
"
)
=
>
{
self
.
ident
=
field
.
ident
.
clone
(
)
;
Ok
(
(
)
)
}
Some
(
"
attrs
"
)
=
>
{
self
.
attrs
=
field
.
ident
.
clone
(
)
;
Ok
(
(
)
)
}
_
=
>
self
.
container
.
parse_field
(
field
)
}
}
}
