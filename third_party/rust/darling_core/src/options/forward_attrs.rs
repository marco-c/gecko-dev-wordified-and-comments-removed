use
syn
:
:
NestedMeta
;
use
util
:
:
PathList
;
use
{
FromMeta
Result
}
;
#
[
derive
(
Debug
Clone
PartialEq
Eq
)
]
pub
enum
ForwardAttrs
{
All
Only
(
PathList
)
}
impl
ForwardAttrs
{
pub
fn
is_empty
(
&
self
)
-
>
bool
{
match
*
self
{
ForwardAttrs
:
:
All
=
>
false
ForwardAttrs
:
:
Only
(
ref
list
)
=
>
list
.
is_empty
(
)
}
}
}
impl
FromMeta
for
ForwardAttrs
{
fn
from_word
(
)
-
>
Result
<
Self
>
{
Ok
(
ForwardAttrs
:
:
All
)
}
fn
from_list
(
nested
:
&
[
NestedMeta
]
)
-
>
Result
<
Self
>
{
Ok
(
ForwardAttrs
:
:
Only
(
PathList
:
:
from_list
(
nested
)
?
)
)
}
}
