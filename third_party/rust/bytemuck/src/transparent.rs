use
super
:
:
*
;
pub
unsafe
trait
TransparentWrapper
<
Wrapped
:
?
Sized
>
{
#
[
inline
]
fn
wrap_ref
(
s
:
&
Wrapped
)
-
>
&
Self
{
unsafe
{
assert
!
(
size_of
:
:
<
*
const
Wrapped
>
(
)
=
=
size_of
:
:
<
*
const
Self
>
(
)
)
;
let
wrapped_ptr
=
s
as
*
const
Wrapped
;
let
wrapper_ptr
:
*
const
Self
=
transmute_copy
(
&
wrapped_ptr
)
;
&
*
wrapper_ptr
}
}
#
[
inline
]
fn
wrap_mut
(
s
:
&
mut
Wrapped
)
-
>
&
mut
Self
{
unsafe
{
assert
!
(
size_of
:
:
<
*
mut
Wrapped
>
(
)
=
=
size_of
:
:
<
*
mut
Self
>
(
)
)
;
let
wrapped_ptr
=
s
as
*
mut
Wrapped
;
let
wrapper_ptr
:
*
mut
Self
=
transmute_copy
(
&
wrapped_ptr
)
;
&
mut
*
wrapper_ptr
}
}
}
