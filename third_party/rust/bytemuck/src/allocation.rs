use
super
:
:
*
;
use
alloc
:
:
{
alloc
:
:
{
alloc_zeroed
Layout
}
boxed
:
:
Box
vec
:
:
Vec
}
;
#
[
inline
]
pub
fn
cast_box
<
A
:
Pod
B
:
Pod
>
(
input
:
Box
<
A
>
)
-
>
Box
<
B
>
{
try_cast_box
(
input
)
.
map_err
(
|
(
e
_v
)
|
e
)
.
unwrap
(
)
}
#
[
inline
]
pub
fn
try_cast_box
<
A
:
Pod
B
:
Pod
>
(
input
:
Box
<
A
>
)
-
>
Result
<
Box
<
B
>
(
PodCastError
Box
<
A
>
)
>
{
if
align_of
:
:
<
A
>
(
)
!
=
align_of
:
:
<
B
>
(
)
{
Err
(
(
PodCastError
:
:
AlignmentMismatch
input
)
)
}
else
if
size_of
:
:
<
A
>
(
)
!
=
size_of
:
:
<
B
>
(
)
{
Err
(
(
PodCastError
:
:
SizeMismatch
input
)
)
}
else
{
let
ptr
:
*
mut
B
=
Box
:
:
into_raw
(
input
)
as
*
mut
B
;
Ok
(
unsafe
{
Box
:
:
from_raw
(
ptr
)
}
)
}
}
#
[
inline
]
pub
fn
try_zeroed_box
<
T
:
Zeroable
>
(
)
-
>
Result
<
Box
<
T
>
(
)
>
{
if
size_of
:
:
<
T
>
(
)
=
=
0
{
return
Ok
(
Box
:
:
new
(
T
:
:
zeroed
(
)
)
)
;
}
let
layout
=
Layout
:
:
from_size_align
(
size_of
:
:
<
T
>
(
)
align_of
:
:
<
T
>
(
)
)
.
unwrap
(
)
;
let
ptr
=
unsafe
{
alloc_zeroed
(
layout
)
}
;
if
ptr
.
is_null
(
)
{
Err
(
(
)
)
}
else
{
Ok
(
unsafe
{
Box
:
:
<
T
>
:
:
from_raw
(
ptr
as
*
mut
T
)
}
)
}
}
#
[
inline
]
pub
fn
zeroed_box
<
T
:
Zeroable
>
(
)
-
>
Box
<
T
>
{
try_zeroed_box
(
)
.
unwrap
(
)
}
#
[
inline
]
pub
fn
cast_vec
<
A
:
Pod
B
:
Pod
>
(
input
:
Vec
<
A
>
)
-
>
Vec
<
B
>
{
try_cast_vec
(
input
)
.
map_err
(
|
(
e
_v
)
|
e
)
.
unwrap
(
)
}
#
[
inline
]
pub
fn
try_cast_vec
<
A
:
Pod
B
:
Pod
>
(
input
:
Vec
<
A
>
)
-
>
Result
<
Vec
<
B
>
(
PodCastError
Vec
<
A
>
)
>
{
if
align_of
:
:
<
A
>
(
)
!
=
align_of
:
:
<
B
>
(
)
{
Err
(
(
PodCastError
:
:
AlignmentMismatch
input
)
)
}
else
if
size_of
:
:
<
A
>
(
)
!
=
size_of
:
:
<
B
>
(
)
{
Err
(
(
PodCastError
:
:
SizeMismatch
input
)
)
}
else
{
let
length
:
usize
=
input
.
len
(
)
;
let
capacity
:
usize
=
input
.
capacity
(
)
;
let
mut
manual_drop_vec
=
ManuallyDrop
:
:
new
(
input
)
;
let
vec_ptr
:
*
mut
A
=
manual_drop_vec
.
as_mut_ptr
(
)
;
let
ptr
:
*
mut
B
=
vec_ptr
as
*
mut
B
;
Ok
(
unsafe
{
Vec
:
:
from_raw_parts
(
ptr
length
capacity
)
}
)
}
}
