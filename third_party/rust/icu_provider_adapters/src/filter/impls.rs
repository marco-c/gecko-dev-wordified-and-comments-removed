use
super
:
:
*
;
use
alloc
:
:
boxed
:
:
Box
;
use
icu_provider
:
:
prelude
:
:
*
;
use
icu_locid
:
:
LanguageIdentifier
;
type
RequestFilterDataProviderOutput
<
'
a
D
>
=
RequestFilterDataProvider
<
D
Box
<
dyn
Fn
(
DataRequest
)
-
>
bool
+
Sync
+
'
a
>
>
;
impl
<
D
F
>
RequestFilterDataProvider
<
D
F
>
where
F
:
Fn
(
DataRequest
)
-
>
bool
+
Sync
{
pub
fn
filter_by_langid
<
'
a
>
(
self
predicate
:
impl
Fn
(
&
LanguageIdentifier
)
-
>
bool
+
Sync
+
'
a
)
-
>
RequestFilterDataProviderOutput
<
'
a
D
>
where
F
:
'
a
{
let
old_predicate
=
self
.
predicate
;
RequestFilterDataProvider
{
inner
:
self
.
inner
predicate
:
Box
:
:
new
(
move
|
request
|
-
>
bool
{
if
!
(
old_predicate
)
(
request
)
{
return
false
;
}
predicate
(
&
request
.
locale
.
get_langid
(
)
)
}
)
filter_name
:
self
.
filter_name
}
}
pub
fn
filter_by_langid_allowlist_strict
<
'
a
>
(
self
allowlist
:
&
'
a
[
LanguageIdentifier
]
)
-
>
RequestFilterDataProviderOutput
<
'
a
D
>
where
F
:
'
a
{
let
old_predicate
=
self
.
predicate
;
RequestFilterDataProvider
{
inner
:
self
.
inner
predicate
:
Box
:
:
new
(
move
|
request
|
-
>
bool
{
if
!
(
old_predicate
)
(
request
)
{
return
false
;
}
request
.
locale
.
is_langid_und
(
)
|
|
allowlist
.
contains
(
&
request
.
locale
.
get_langid
(
)
)
}
)
filter_name
:
self
.
filter_name
}
}
pub
fn
require_langid
<
'
a
>
(
self
)
-
>
RequestFilterDataProviderOutput
<
'
a
D
>
where
F
:
'
a
{
let
old_predicate
=
self
.
predicate
;
RequestFilterDataProvider
{
inner
:
self
.
inner
predicate
:
Box
:
:
new
(
move
|
request
|
-
>
bool
{
if
!
(
old_predicate
)
(
request
)
{
return
false
;
}
!
request
.
locale
.
is_langid_und
(
)
}
)
filter_name
:
self
.
filter_name
}
}
}
