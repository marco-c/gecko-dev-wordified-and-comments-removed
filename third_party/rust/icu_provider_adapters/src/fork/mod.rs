use
alloc
:
:
vec
:
:
Vec
;
mod
by_error
;
pub
mod
predicates
;
pub
use
by_error
:
:
ForkByErrorProvider
;
pub
use
by_error
:
:
MultiForkByErrorProvider
;
use
predicates
:
:
ForkByErrorPredicate
;
use
predicates
:
:
MarkerNotFoundPredicate
;
pub
type
ForkByMarkerProvider
<
P0
P1
>
=
ForkByErrorProvider
<
P0
P1
MarkerNotFoundPredicate
>
;
impl
<
P0
P1
>
ForkByMarkerProvider
<
P0
P1
>
{
pub
fn
new
(
p0
:
P0
p1
:
P1
)
-
>
Self
{
ForkByErrorProvider
:
:
new_with_predicate
(
p0
p1
MarkerNotFoundPredicate
)
}
}
pub
type
MultiForkByMarkerProvider
<
P
>
=
MultiForkByErrorProvider
<
P
MarkerNotFoundPredicate
>
;
impl
<
P
>
MultiForkByMarkerProvider
<
P
>
{
pub
fn
new
(
providers
:
Vec
<
P
>
)
-
>
Self
{
MultiForkByErrorProvider
:
:
new_with_predicate
(
providers
MarkerNotFoundPredicate
)
}
}
