use
icu_provider
:
:
prelude
:
:
*
;
pub
trait
ForkByErrorPredicate
{
const
UNIT_ERROR
:
DataErrorKind
=
DataErrorKind
:
:
MarkerNotFound
;
fn
test
(
&
self
marker
:
DataMarkerInfo
req
:
Option
<
DataRequest
>
err
:
DataError
)
-
>
bool
;
}
#
[
derive
(
Debug
PartialEq
Eq
)
]
#
[
non_exhaustive
]
pub
struct
MarkerNotFoundPredicate
;
impl
ForkByErrorPredicate
for
MarkerNotFoundPredicate
{
const
UNIT_ERROR
:
DataErrorKind
=
DataErrorKind
:
:
MarkerNotFound
;
#
[
inline
]
fn
test
(
&
self
_
:
DataMarkerInfo
_
:
Option
<
DataRequest
>
err
:
DataError
)
-
>
bool
{
matches
!
(
err
DataError
{
kind
:
DataErrorKind
:
:
MarkerNotFound
.
.
}
)
}
}
#
[
derive
(
Debug
PartialEq
Eq
)
]
#
[
allow
(
clippy
:
:
exhaustive_structs
)
]
pub
struct
IdentifierNotFoundPredicate
;
impl
ForkByErrorPredicate
for
IdentifierNotFoundPredicate
{
const
UNIT_ERROR
:
DataErrorKind
=
DataErrorKind
:
:
IdentifierNotFound
;
#
[
inline
]
fn
test
(
&
self
_
:
DataMarkerInfo
_
:
Option
<
DataRequest
>
err
:
DataError
)
-
>
bool
{
Err
:
:
<
(
)
_
>
(
err
)
.
allow_identifier_not_found
(
)
.
is_ok
(
)
}
}
