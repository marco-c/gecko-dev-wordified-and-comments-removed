use
core
:
:
fmt
;
use
icu_provider
:
:
prelude
:
:
*
;
use
yoke
:
:
Yokeable
;
#
[
allow
(
clippy
:
:
exhaustive_structs
)
]
pub
struct
FixedProvider
<
M
:
DataMarker
>
{
data
:
DataPayload
<
M
>
}
impl
<
M
:
DataMarker
>
FixedProvider
<
M
>
{
pub
fn
from_owned
(
data
:
M
:
:
DataStruct
)
-
>
Self
{
Self
:
:
from_payload
(
DataPayload
:
:
from_owned
(
data
)
)
}
pub
fn
from_static
(
data
:
&
'
static
M
:
:
DataStruct
)
-
>
Self
{
FixedProvider
{
data
:
DataPayload
:
:
from_static_ref
(
data
)
}
}
pub
fn
from_payload
(
data
:
DataPayload
<
M
>
)
-
>
Self
{
FixedProvider
{
data
}
}
pub
fn
new_default
(
)
-
>
Self
where
M
:
:
DataStruct
:
Default
{
Self
:
:
from_owned
(
M
:
:
DataStruct
:
:
default
(
)
)
}
}
impl
<
M
>
DataProvider
<
M
>
for
FixedProvider
<
M
>
where
M
:
DataMarker
for
<
'
a
>
<
M
:
:
DataStruct
as
Yokeable
<
'
a
>
>
:
:
Output
:
Clone
{
fn
load
(
&
self
_
:
DataRequest
)
-
>
Result
<
DataResponse
<
M
>
DataError
>
{
Ok
(
DataResponse
{
metadata
:
Default
:
:
default
(
)
payload
:
self
.
data
.
clone
(
)
}
)
}
}
impl
<
M
>
fmt
:
:
Debug
for
FixedProvider
<
M
>
where
M
:
DynamicDataMarker
M
:
DataMarker
for
<
'
a
>
&
'
a
<
M
:
:
DataStruct
as
Yokeable
<
'
a
>
>
:
:
Output
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
data
.
fmt
(
f
)
}
}
