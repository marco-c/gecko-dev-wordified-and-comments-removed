use
icu_locid
:
:
extensions
:
:
unicode
:
:
{
Key
Value
}
;
use
icu_locid
:
:
subtags
:
:
Variants
;
use
icu_provider
:
:
prelude
:
:
*
;
use
icu_provider
:
:
FallbackPriority
;
use
icu_provider
:
:
FallbackSupplement
;
mod
adapter
;
mod
algorithms
;
pub
mod
provider
;
pub
use
adapter
:
:
LocaleFallbackProvider
;
use
provider
:
:
*
;
#
[
derive
(
Debug
Clone
PartialEq
Eq
Default
)
]
#
[
non_exhaustive
]
pub
struct
LocaleFallbackConfig
{
pub
priority
:
FallbackPriority
pub
extension_key
:
Option
<
Key
>
pub
fallback_supplement
:
Option
<
FallbackSupplement
>
}
#
[
derive
(
Debug
Clone
PartialEq
)
]
pub
struct
LocaleFallbacker
{
likely_subtags
:
DataPayload
<
LocaleFallbackLikelySubtagsV1Marker
>
parents
:
DataPayload
<
LocaleFallbackParentsV1Marker
>
collation_supplement
:
Option
<
DataPayload
<
CollationFallbackSupplementV1Marker
>
>
}
#
[
derive
(
Debug
Clone
PartialEq
)
]
pub
struct
LocaleFallbackerWithConfig
<
'
a
>
{
likely_subtags
:
&
'
a
LocaleFallbackLikelySubtagsV1
<
'
a
>
parents
:
&
'
a
LocaleFallbackParentsV1
<
'
a
>
supplement
:
Option
<
&
'
a
LocaleFallbackSupplementV1
<
'
a
>
>
config
:
LocaleFallbackConfig
}
#
[
derive
(
Debug
)
]
struct
LocaleFallbackIteratorInner
<
'
a
'
b
>
{
likely_subtags
:
&
'
a
LocaleFallbackLikelySubtagsV1
<
'
a
>
parents
:
&
'
a
LocaleFallbackParentsV1
<
'
a
>
supplement
:
Option
<
&
'
a
LocaleFallbackSupplementV1
<
'
a
>
>
config
:
&
'
b
LocaleFallbackConfig
backup_extension
:
Option
<
Value
>
backup_subdivision
:
Option
<
Value
>
backup_variants
:
Option
<
Variants
>
}
#
[
derive
(
Debug
)
]
pub
struct
LocaleFallbackIterator
<
'
a
'
b
>
{
current
:
DataLocale
inner
:
LocaleFallbackIteratorInner
<
'
a
'
b
>
}
impl
LocaleFallbacker
{
pub
fn
try_new_unstable
<
P
>
(
provider
:
&
P
)
-
>
Result
<
Self
DataError
>
where
P
:
DataProvider
<
LocaleFallbackLikelySubtagsV1Marker
>
+
DataProvider
<
LocaleFallbackParentsV1Marker
>
+
DataProvider
<
CollationFallbackSupplementV1Marker
>
+
?
Sized
{
let
likely_subtags
=
provider
.
load
(
Default
:
:
default
(
)
)
?
.
take_payload
(
)
?
;
let
parents
=
provider
.
load
(
Default
:
:
default
(
)
)
?
.
take_payload
(
)
?
;
let
collation_supplement
=
match
DataProvider
:
:
<
CollationFallbackSupplementV1Marker
>
:
:
load
(
provider
Default
:
:
default
(
)
)
{
Ok
(
response
)
=
>
Some
(
response
.
take_payload
(
)
?
)
Err
(
DataError
{
kind
:
DataErrorKind
:
:
MissingDataKey
.
.
}
)
=
>
None
Err
(
e
)
=
>
return
Err
(
e
)
}
;
Ok
(
LocaleFallbacker
{
likely_subtags
parents
collation_supplement
}
)
}
icu_provider
:
:
gen_any_buffer_constructors
!
(
locale
:
skip
options
:
skip
error
:
DataError
)
;
pub
fn
new_without_data
(
)
-
>
Self
{
LocaleFallbacker
{
likely_subtags
:
DataPayload
:
:
from_owned
(
Default
:
:
default
(
)
)
parents
:
DataPayload
:
:
from_owned
(
Default
:
:
default
(
)
)
collation_supplement
:
None
}
}
pub
fn
for_config
(
&
self
config
:
LocaleFallbackConfig
)
-
>
LocaleFallbackerWithConfig
{
let
supplement
=
match
config
.
fallback_supplement
{
Some
(
FallbackSupplement
:
:
Collation
)
=
>
{
self
.
collation_supplement
.
as_ref
(
)
.
map
(
|
p
|
p
.
get
(
)
)
}
_
=
>
None
}
;
LocaleFallbackerWithConfig
{
likely_subtags
:
self
.
likely_subtags
.
get
(
)
parents
:
self
.
parents
.
get
(
)
supplement
config
}
}
pub
fn
for_key
(
&
self
data_key
:
DataKey
)
-
>
LocaleFallbackerWithConfig
{
let
priority
=
data_key
.
metadata
(
)
.
fallback_priority
;
let
extension_key
=
data_key
.
metadata
(
)
.
extension_key
;
let
fallback_supplement
=
data_key
.
metadata
(
)
.
fallback_supplement
;
self
.
for_config
(
LocaleFallbackConfig
{
priority
extension_key
fallback_supplement
}
)
}
}
impl
<
'
a
>
LocaleFallbackerWithConfig
<
'
a
>
{
pub
fn
fallback_for
<
'
b
>
(
&
'
b
self
mut
locale
:
DataLocale
)
-
>
LocaleFallbackIterator
<
'
a
'
b
>
{
self
.
normalize
(
&
mut
locale
)
;
LocaleFallbackIterator
{
current
:
locale
inner
:
LocaleFallbackIteratorInner
{
likely_subtags
:
self
.
likely_subtags
parents
:
self
.
parents
supplement
:
self
.
supplement
config
:
&
self
.
config
backup_extension
:
None
backup_subdivision
:
None
backup_variants
:
None
}
}
}
}
impl
LocaleFallbackIterator
<
'
_
'
_
>
{
pub
fn
get
(
&
self
)
-
>
&
DataLocale
{
&
self
.
current
}
pub
fn
take
(
self
)
-
>
DataLocale
{
self
.
current
}
pub
fn
step
(
&
mut
self
)
-
>
&
mut
Self
{
self
.
inner
.
step
(
&
mut
self
.
current
)
;
self
}
}
