use
std
:
:
io
:
:
{
self
Read
}
;
use
std
:
:
sync
:
:
mpsc
;
use
std
:
:
thread
;
use
sys
:
:
tty
:
:
get_tty
;
pub
fn
async_stdin
(
)
-
>
AsyncReader
{
let
(
send
recv
)
=
mpsc
:
:
channel
(
)
;
thread
:
:
spawn
(
move
|
|
for
i
in
get_tty
(
)
.
unwrap
(
)
.
bytes
(
)
{
if
send
.
send
(
i
)
.
is_err
(
)
{
return
;
}
}
)
;
AsyncReader
{
recv
:
recv
}
}
pub
struct
AsyncReader
{
recv
:
mpsc
:
:
Receiver
<
io
:
:
Result
<
u8
>
>
}
impl
Read
for
AsyncReader
{
fn
read
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
let
mut
total
=
0
;
loop
{
if
total
>
=
buf
.
len
(
)
{
break
;
}
match
self
.
recv
.
try_recv
(
)
{
Ok
(
Ok
(
b
)
)
=
>
{
buf
[
total
]
=
b
;
total
+
=
1
;
}
Ok
(
Err
(
e
)
)
=
>
return
Err
(
e
)
Err
(
_
)
=
>
break
}
}
Ok
(
total
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
std
:
:
io
:
:
Read
;
#
[
test
]
fn
test_async_stdin
(
)
{
let
stdin
=
async_stdin
(
)
;
stdin
.
bytes
(
)
.
next
(
)
;
}
}
