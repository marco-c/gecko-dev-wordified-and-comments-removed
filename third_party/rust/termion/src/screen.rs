use
std
:
:
io
:
:
{
self
Write
}
;
use
std
:
:
ops
;
use
std
:
:
fmt
;
pub
struct
ToMainScreen
;
impl
fmt
:
:
Display
for
ToMainScreen
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
csi
!
(
"
?
1049l
"
)
)
}
}
pub
struct
ToAlternateScreen
;
impl
fmt
:
:
Display
for
ToAlternateScreen
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
csi
!
(
"
?
1049h
"
)
)
}
}
pub
struct
AlternateScreen
<
W
:
Write
>
{
output
:
W
}
impl
<
W
:
Write
>
AlternateScreen
<
W
>
{
pub
fn
from
(
mut
output
:
W
)
-
>
Self
{
write
!
(
output
"
{
}
"
ToAlternateScreen
)
.
expect
(
"
switch
to
alternate
screen
"
)
;
AlternateScreen
{
output
:
output
}
}
}
impl
<
W
:
Write
>
Drop
for
AlternateScreen
<
W
>
{
fn
drop
(
&
mut
self
)
{
write
!
(
self
"
{
}
"
ToMainScreen
)
.
expect
(
"
switch
to
main
screen
"
)
;
}
}
impl
<
W
:
Write
>
ops
:
:
Deref
for
AlternateScreen
<
W
>
{
type
Target
=
W
;
fn
deref
(
&
self
)
-
>
&
W
{
&
self
.
output
}
}
impl
<
W
:
Write
>
ops
:
:
DerefMut
for
AlternateScreen
<
W
>
{
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
W
{
&
mut
self
.
output
}
}
impl
<
W
:
Write
>
Write
for
AlternateScreen
<
W
>
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
output
.
write
(
buf
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
output
.
flush
(
)
}
}
