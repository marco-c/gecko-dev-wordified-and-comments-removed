use
std
:
:
mem
;
use
winapi
:
:
*
;
#
[
derive
(
Debug
)
]
pub
struct
Overlapped
(
OVERLAPPED
)
;
unsafe
impl
Send
for
Overlapped
{
}
unsafe
impl
Sync
for
Overlapped
{
}
impl
Overlapped
{
pub
fn
zero
(
)
-
>
Overlapped
{
Overlapped
(
unsafe
{
mem
:
:
zeroed
(
)
}
)
}
pub
unsafe
fn
from_raw
<
'
a
>
(
ptr
:
*
mut
OVERLAPPED
)
-
>
&
'
a
mut
Overlapped
{
&
mut
*
(
ptr
as
*
mut
Overlapped
)
}
pub
fn
raw
(
&
self
)
-
>
*
mut
OVERLAPPED
{
&
self
.
0
as
*
const
_
as
*
mut
_
}
pub
fn
set_offset
(
&
mut
self
offset
:
u64
)
{
self
.
0
.
Offset
=
offset
as
u32
;
self
.
0
.
OffsetHigh
=
(
offset
>
>
32
)
as
u32
;
}
pub
fn
offset
(
&
self
)
-
>
u64
{
(
self
.
0
.
Offset
as
u64
)
|
(
(
self
.
0
.
OffsetHigh
as
u64
)
<
<
32
)
}
pub
fn
set_event
(
&
mut
self
event
:
HANDLE
)
{
self
.
0
.
hEvent
=
event
;
}
pub
fn
event
(
&
self
)
-
>
HANDLE
{
self
.
0
.
hEvent
}
}
