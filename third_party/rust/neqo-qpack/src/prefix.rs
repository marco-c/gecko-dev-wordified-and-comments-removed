#
[
derive
(
Copy
Clone
Debug
)
]
pub
struct
Prefix
{
#
[
allow
(
clippy
:
:
struct_field_names
)
]
prefix
:
u8
len
:
u8
mask
:
u8
}
impl
Prefix
{
pub
fn
new
(
prefix
:
u8
len
:
u8
)
-
>
Self
{
assert
!
(
len
<
=
7
)
;
assert
!
(
(
len
=
=
0
)
|
|
(
prefix
&
(
(
1
<
<
(
8
-
len
)
)
-
1
)
=
=
0
)
)
;
Self
{
prefix
len
mask
:
if
len
=
=
0
{
0xFF
}
else
{
(
(
1
<
<
len
)
-
1
)
<
<
(
8
-
len
)
}
}
}
pub
const
fn
len
(
self
)
-
>
u8
{
self
.
len
}
pub
const
fn
prefix
(
self
)
-
>
u8
{
self
.
prefix
}
pub
const
fn
cmp_prefix
(
self
b
:
u8
)
-
>
bool
{
(
b
&
self
.
mask
)
=
=
self
.
prefix
}
}
#
[
macro_export
]
macro_rules
!
create_prefix
{
(
n
:
ident
)
=
>
{
pub
const
n
:
Prefix
=
Prefix
{
prefix
:
0x0
len
:
0
mask
:
0xFF
}
;
}
;
(
n
:
ident
v
:
expr
l
:
expr
)
=
>
{
static_assertions
:
:
const_assert
!
(
l
<
7
)
;
static_assertions
:
:
const_assert
!
(
v
&
(
(
1
<
<
(
8
-
l
)
)
-
1
)
=
=
0
)
;
pub
const
n
:
Prefix
=
Prefix
{
prefix
:
v
len
:
l
mask
:
(
(
1
<
<
l
)
-
1
)
<
<
(
8
-
l
)
}
;
}
;
(
n
:
ident
v
:
expr
l
:
expr
m
:
expr
)
=
>
{
static_assertions
:
:
const_assert
!
(
l
<
7
)
;
static_assertions
:
:
const_assert
!
(
v
&
(
(
1
<
<
(
8
-
l
)
)
-
1
)
=
=
0
)
;
static_assertions
:
:
const_assert
!
(
(
(
(
1
<
<
l
)
-
1
)
<
<
(
8
-
l
)
)
>
=
m
)
;
pub
const
n
:
Prefix
=
Prefix
{
prefix
:
v
len
:
l
mask
:
m
}
;
}
;
}
create_prefix
!
(
NO_PREFIX
)
;
create_prefix
!
(
DECODER_HEADER_ACK
0x80
1
)
;
create_prefix
!
(
DECODER_STREAM_CANCELLATION
0x40
2
)
;
create_prefix
!
(
DECODER_INSERT_COUNT_INCREMENT
0x00
2
)
;
create_prefix
!
(
ENCODER_CAPACITY
0x20
3
)
;
create_prefix
!
(
ENCODER_INSERT_WITH_NAME_REF_STATIC
0xC0
2
)
;
create_prefix
!
(
ENCODER_INSERT_WITH_NAME_REF_DYNAMIC
0x80
2
)
;
create_prefix
!
(
ENCODER_INSERT_WITH_NAME_LITERAL
0x40
2
)
;
create_prefix
!
(
ENCODER_DUPLICATE
0x00
3
)
;
create_prefix
!
(
BASE_PREFIX_POSITIVE
0x00
1
)
;
create_prefix
!
(
BASE_PREFIX_NEGATIVE
0x80
1
)
;
create_prefix
!
(
HEADER_FIELD_INDEX_STATIC
0xC0
2
)
;
create_prefix
!
(
HEADER_FIELD_INDEX_DYNAMIC
0x80
2
)
;
create_prefix
!
(
HEADER_FIELD_INDEX_DYNAMIC_POST
0x10
4
)
;
create_prefix
!
(
HEADER_FIELD_LITERAL_NAME_REF_STATIC
0x50
4
0xD0
)
;
create_prefix
!
(
HEADER_FIELD_LITERAL_NAME_REF_DYNAMIC
0x40
4
0xD0
)
;
create_prefix
!
(
HEADER_FIELD_LITERAL_NAME_REF_DYNAMIC_POST
0x00
5
0xF0
)
;
create_prefix
!
(
HEADER_FIELD_LITERAL_NAME_LITERAL
0x20
4
0xE0
)
;
