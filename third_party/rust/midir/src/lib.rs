#
!
[
warn
(
future_incompatible
)
]
#
!
[
warn
(
rust_2018_idioms
)
]
#
!
[
warn
(
rust_2021_compatibility
)
]
#
[
cfg
(
feature
=
"
jack
"
)
]
#
[
macro_use
]
extern
crate
bitflags
;
#
[
repr
(
u8
)
]
#
[
derive
(
Debug
Clone
Copy
PartialEq
Eq
)
]
pub
enum
Ignore
{
None
=
0x00
Sysex
=
0x01
Time
=
0x02
SysexAndTime
=
0x03
ActiveSense
=
0x04
SysexAndActiveSense
=
0x05
TimeAndActiveSense
=
0x06
All
=
0x07
}
impl
std
:
:
ops
:
:
BitOr
for
Ignore
{
type
Output
=
Ignore
;
#
[
inline
(
always
)
]
fn
bitor
(
self
rhs
:
Self
)
-
>
Self
:
:
Output
{
unsafe
{
std
:
:
mem
:
:
transmute
(
self
as
u8
|
rhs
as
u8
)
}
}
}
impl
Ignore
{
#
[
inline
(
always
)
]
pub
fn
contains
(
self
other
:
Ignore
)
-
>
bool
{
self
as
u8
&
other
as
u8
!
=
0
}
}
#
[
derive
(
Debug
Clone
)
]
struct
MidiMessage
{
bytes
:
Vec
<
u8
>
timestamp
:
u64
}
impl
MidiMessage
{
fn
new
(
)
-
>
MidiMessage
{
MidiMessage
{
bytes
:
vec
!
[
]
timestamp
:
0
}
}
}
pub
mod
os
;
mod
errors
;
pub
use
errors
:
:
*
;
mod
common
;
pub
use
common
:
:
*
;
mod
backend
;
