use
super
:
:
Pin
;
use
crate
:
:
ctap2
:
:
commands
:
:
get_info
:
:
AuthenticatorInfo
;
use
serde
:
:
{
Deserialize
Serialize
as
DeriveSer
Serializer
}
;
use
std
:
:
sync
:
:
mpsc
:
:
Sender
;
#
[
derive
(
Debug
Deserialize
DeriveSer
)
]
pub
enum
InteractiveRequest
{
Reset
ChangePIN
(
Pin
Pin
)
SetPIN
(
Pin
)
}
pub
(
crate
)
fn
serialize_pin_required
<
S
>
(
_
:
&
Sender
<
Pin
>
s
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
Serializer
{
s
.
serialize_none
(
)
}
pub
(
crate
)
fn
serialize_pin_invalid
<
S
>
(
_
:
&
Sender
<
Pin
>
retries
:
&
Option
<
u8
>
s
:
S
)
-
>
Result
<
S
:
:
Ok
S
:
:
Error
>
where
S
:
Serializer
{
if
let
Some
(
r
)
=
retries
{
s
.
serialize_u8
(
*
r
)
}
else
{
s
.
serialize_none
(
)
}
}
#
[
derive
(
Debug
DeriveSer
)
]
pub
enum
StatusPinUv
{
#
[
serde
(
serialize_with
=
"
serialize_pin_required
"
)
]
PinRequired
(
Sender
<
Pin
>
)
#
[
serde
(
serialize_with
=
"
serialize_pin_invalid
"
)
]
InvalidPin
(
Sender
<
Pin
>
Option
<
u8
>
)
PinIsTooShort
PinIsTooLong
(
usize
)
InvalidUv
(
Option
<
u8
>
)
PinAuthBlocked
PinBlocked
PinNotSet
UvBlocked
}
#
[
derive
(
Debug
)
]
pub
enum
StatusUpdate
{
PresenceRequired
PinUvError
(
StatusPinUv
)
SelectDeviceNotice
InteractiveManagement
(
(
Sender
<
InteractiveRequest
>
Option
<
AuthenticatorInfo
>
)
)
}
pub
(
crate
)
fn
send_status
(
status
:
&
Sender
<
StatusUpdate
>
msg
:
StatusUpdate
)
{
match
status
.
send
(
msg
)
{
Ok
(
_
)
=
>
{
}
Err
(
e
)
=
>
error
!
(
"
Couldn
'
t
send
status
:
{
:
?
}
"
e
)
}
;
}
