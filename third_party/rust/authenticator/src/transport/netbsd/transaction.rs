use
crate
:
:
errors
;
use
crate
:
:
statecallback
:
:
StateCallback
;
use
crate
:
:
transport
:
:
device_selector
:
:
{
DeviceBuildParameters
DeviceSelector
DeviceSelectorEvent
}
;
use
crate
:
:
transport
:
:
platform
:
:
monitor
:
:
Monitor
;
use
runloop
:
:
RunLoop
;
use
std
:
:
sync
:
:
mpsc
:
:
Sender
;
pub
struct
Transaction
{
thread
:
RunLoop
device_selector
:
DeviceSelector
}
impl
Transaction
{
pub
fn
new
<
F
T
>
(
timeout
:
u64
callback
:
StateCallback
<
crate
:
:
Result
<
T
>
>
status
:
Sender
<
crate
:
:
StatusUpdate
>
new_device_cb
:
F
)
-
>
crate
:
:
Result
<
Self
>
where
F
:
Fn
(
DeviceBuildParameters
Sender
<
DeviceSelectorEvent
>
Sender
<
crate
:
:
StatusUpdate
>
&
dyn
Fn
(
)
-
>
bool
)
+
Sync
+
Send
+
'
static
T
:
'
static
{
let
status_sender
=
status
.
clone
(
)
;
let
device_selector
=
DeviceSelector
:
:
run
(
status
)
;
let
selector_sender
=
device_selector
.
clone_sender
(
)
;
let
thread
=
RunLoop
:
:
new_with_timeout
(
move
|
alive
|
{
let
mut
monitor
=
Monitor
:
:
new
(
new_device_cb
selector_sender
status_sender
)
;
try_or
!
(
monitor
.
run
(
alive
)
|
_
|
callback
.
call
(
Err
(
errors
:
:
AuthenticatorError
:
:
Platform
)
)
)
;
callback
.
call
(
Err
(
errors
:
:
AuthenticatorError
:
:
U2FToken
(
errors
:
:
U2FTokenError
:
:
NotAllowed
)
)
)
;
}
timeout
)
.
map_err
(
|
_
|
errors
:
:
AuthenticatorError
:
:
Platform
)
?
;
Ok
(
Self
{
thread
device_selector
}
)
}
pub
fn
cancel
(
&
mut
self
)
{
info
!
(
"
Transaction
was
cancelled
.
"
)
;
self
.
device_selector
.
stop
(
)
;
self
.
thread
.
cancel
(
)
;
}
}
