use
crate
:
:
authenticatorservice
:
:
{
RegisterArgs
SignArgs
}
;
use
crate
:
:
consts
:
:
PARAMETER_SIZE
;
use
crate
:
:
ctap2
:
:
client_data
:
:
ClientDataHash
;
use
crate
:
:
ctap2
:
:
commands
:
:
client_pin
:
:
Pin
;
use
crate
:
:
ctap2
:
:
commands
:
:
get_assertion
:
:
GetAssertionResult
;
use
crate
:
:
ctap2
:
:
commands
:
:
make_credentials
:
:
MakeCredentialsResult
;
use
crate
:
:
ctap2
:
:
server
:
:
{
PublicKeyCredentialDescriptor
RelyingParty
RelyingPartyWrapper
ResidentKeyRequirement
RpIdHash
UserVerificationRequirement
}
;
use
crate
:
:
errors
:
:
{
self
AuthenticatorError
}
;
use
crate
:
:
statecallback
:
:
StateCallback
;
use
crate
:
:
status_update
:
:
{
send_status
InteractiveUpdate
}
;
use
crate
:
:
transport
:
:
device_selector
:
:
{
BlinkResult
Device
DeviceBuildParameters
DeviceCommand
DeviceSelectorEvent
}
;
use
crate
:
:
transport
:
:
platform
:
:
transaction
:
:
Transaction
;
use
crate
:
:
transport
:
:
{
hid
:
:
HIDDevice
FidoDevice
FidoProtocol
}
;
use
crate
:
:
u2fprotocol
:
:
{
u2f_init_device
u2f_is_keyhandle_valid
u2f_register
u2f_sign
}
;
use
crate
:
:
ctap2
;
use
crate
:
:
{
AuthenticatorTransports
InteractiveRequest
KeyHandle
ManageResult
RegisterFlags
SignFlags
}
;
use
std
:
:
sync
:
:
mpsc
:
:
{
channel
RecvTimeoutError
Sender
}
;
use
std
:
:
thread
;
use
std
:
:
time
:
:
Duration
;
fn
is_valid_transport
(
transports
:
crate
:
:
AuthenticatorTransports
)
-
>
bool
{
transports
.
is_empty
(
)
|
|
transports
.
contains
(
crate
:
:
AuthenticatorTransports
:
:
USB
)
}
fn
find_valid_key_handles
<
'
a
F
>
(
app_ids
:
&
'
a
[
crate
:
:
AppId
]
key_handles
:
&
'
a
[
crate
:
:
KeyHandle
]
mut
is_valid
:
F
)
-
>
(
&
'
a
crate
:
:
AppId
Vec
<
&
'
a
crate
:
:
KeyHandle
>
)
where
F
:
FnMut
(
&
Vec
<
u8
>
&
crate
:
:
KeyHandle
)
-
>
bool
{
for
app_id
in
app_ids
{
let
valid_handles
=
key_handles
.
iter
(
)
.
filter
(
|
key_handle
|
is_valid
(
app_id
key_handle
)
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
;
if
!
valid_handles
.
is_empty
(
)
{
return
(
app_id
valid_handles
)
;
}
}
(
&
app_ids
[
0
]
vec
!
[
]
)
}
#
[
derive
(
Default
)
]
pub
struct
StateMachine
{
transaction
:
Option
<
Transaction
>
}
impl
StateMachine
{
pub
fn
new
(
)
-
>
Self
{
Default
:
:
default
(
)
}
fn
init_and_select
(
info
:
DeviceBuildParameters
selector
:
&
Sender
<
DeviceSelectorEvent
>
status
:
&
Sender
<
crate
:
:
StatusUpdate
>
ctap2_only
:
bool
keep_alive
:
&
dyn
Fn
(
)
-
>
bool
)
-
>
Option
<
Device
>
{
let
mut
dev
=
match
Device
:
:
new
(
info
)
{
Ok
(
dev
)
=
>
dev
Err
(
(
e
id
)
)
=
>
{
info
!
(
"
error
happened
with
device
:
{
}
"
e
)
;
selector
.
send
(
DeviceSelectorEvent
:
:
NotAToken
(
id
)
)
.
ok
(
)
?
;
return
None
;
}
}
;
if
let
Err
(
e
)
=
dev
.
init
(
)
{
warn
!
(
"
error
while
initializing
device
:
{
}
"
e
)
;
selector
.
send
(
DeviceSelectorEvent
:
:
NotAToken
(
dev
.
id
(
)
)
)
.
ok
(
)
;
return
None
;
}
if
ctap2_only
&
&
dev
.
get_protocol
(
)
!
=
FidoProtocol
:
:
CTAP2
{
info
!
(
"
Device
does
not
support
CTAP2
"
)
;
selector
.
send
(
DeviceSelectorEvent
:
:
NotAToken
(
dev
.
id
(
)
)
)
.
ok
(
)
;
return
None
;
}
let
(
tx
rx
)
=
channel
(
)
;
selector
.
send
(
DeviceSelectorEvent
:
:
ImAToken
(
(
dev
.
id
(
)
tx
)
)
)
.
ok
(
)
?
;
let
keep_blinking
=
|
|
keep_alive
(
)
&
&
!
matches
!
(
rx
.
try_recv
(
)
Ok
(
DeviceCommand
:
:
Cancel
)
)
;
match
rx
.
recv
(
)
{
Ok
(
DeviceCommand
:
:
Blink
)
=
>
{
send_status
(
status
crate
:
:
StatusUpdate
:
:
SelectDeviceNotice
)
;
match
dev
.
block_and_blink
(
&
keep_blinking
)
{
BlinkResult
:
:
DeviceSelected
=
>
{
selector
.
send
(
DeviceSelectorEvent
:
:
SelectedToken
(
dev
.
id
(
)
)
)
.
ok
(
)
?
;
}
BlinkResult
:
:
Cancelled
=
>
{
info
!
(
"
Device
{
:
?
}
was
not
selected
"
dev
.
id
(
)
)
;
return
None
;
}
}
}
Ok
(
DeviceCommand
:
:
Cancel
)
=
>
{
info
!
(
"
Device
{
:
?
}
was
not
selected
"
dev
.
id
(
)
)
;
return
None
;
}
Ok
(
DeviceCommand
:
:
Removed
)
=
>
{
info
!
(
"
Device
{
:
?
}
was
removed
"
dev
.
id
(
)
)
;
return
None
;
}
Ok
(
DeviceCommand
:
:
Continue
)
=
>
{
}
Err
(
_
)
=
>
{
warn
!
(
"
Error
when
trying
to
receive
messages
from
DeviceSelector
!
Exiting
.
"
)
;
return
None
;
}
}
Some
(
dev
)
}
pub
fn
register
(
&
mut
self
timeout
:
u64
args
:
RegisterArgs
status
:
Sender
<
crate
:
:
StatusUpdate
>
callback
:
StateCallback
<
crate
:
:
Result
<
crate
:
:
RegisterResult
>
>
)
{
if
args
.
use_ctap1_fallback
{
let
mut
flags
=
RegisterFlags
:
:
empty
(
)
;
if
args
.
resident_key_req
=
=
ResidentKeyRequirement
:
:
Required
{
flags
|
=
RegisterFlags
:
:
REQUIRE_RESIDENT_KEY
;
}
if
args
.
user_verification_req
=
=
UserVerificationRequirement
:
:
Required
{
flags
|
=
RegisterFlags
:
:
REQUIRE_USER_VERIFICATION
;
}
let
rp
=
RelyingPartyWrapper
:
:
Data
(
args
.
relying_party
)
;
let
application
=
rp
.
hash
(
)
.
as_ref
(
)
.
to_vec
(
)
;
let
key_handles
=
args
.
exclude_list
.
iter
(
)
.
map
(
|
cred_desc
|
KeyHandle
{
credential
:
cred_desc
.
id
.
clone
(
)
transports
:
AuthenticatorTransports
:
:
empty
(
)
}
)
.
collect
(
)
;
let
challenge
=
ClientDataHash
(
args
.
client_data_hash
)
;
self
.
legacy_register
(
flags
timeout
challenge
application
key_handles
status
callback
)
;
return
;
}
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
transaction
=
Transaction
:
:
new
(
timeout
cbc
.
clone
(
)
status
move
|
info
selector
status
alive
|
{
let
mut
dev
=
match
Self
:
:
init_and_select
(
info
&
selector
&
status
false
alive
)
{
None
=
>
{
return
;
}
Some
(
dev
)
=
>
dev
}
;
info
!
(
"
Device
{
:
?
}
continues
with
the
register
process
"
dev
.
id
(
)
)
;
if
ctap2
:
:
register
(
&
mut
dev
args
.
clone
(
)
status
callback
.
clone
(
)
alive
)
{
let
_
=
selector
.
send
(
DeviceSelectorEvent
:
:
SelectedToken
(
dev
.
id
(
)
)
)
;
}
}
)
;
self
.
transaction
=
Some
(
try_or
!
(
transaction
|
e
|
cbc
.
call
(
Err
(
e
)
)
)
)
;
}
pub
fn
sign
(
&
mut
self
timeout
:
u64
args
:
SignArgs
status
:
Sender
<
crate
:
:
StatusUpdate
>
callback
:
StateCallback
<
crate
:
:
Result
<
crate
:
:
SignResult
>
>
)
{
if
args
.
use_ctap1_fallback
{
let
mut
flags
=
SignFlags
:
:
empty
(
)
;
if
args
.
user_verification_req
=
=
UserVerificationRequirement
:
:
Required
{
flags
|
=
SignFlags
:
:
REQUIRE_USER_VERIFICATION
;
}
let
mut
app_ids
=
vec
!
[
]
;
let
rp_id
=
RelyingPartyWrapper
:
:
Data
(
RelyingParty
{
id
:
args
.
relying_party_id
.
.
Default
:
:
default
(
)
}
)
;
app_ids
.
push
(
rp_id
.
hash
(
)
.
as_ref
(
)
.
to_vec
(
)
)
;
if
let
Some
(
app_id
)
=
args
.
alternate_rp_id
{
let
app_id
=
RelyingPartyWrapper
:
:
Data
(
RelyingParty
{
id
:
app_id
.
.
Default
:
:
default
(
)
}
)
;
app_ids
.
push
(
app_id
.
hash
(
)
.
as_ref
(
)
.
to_vec
(
)
)
;
}
let
key_handles
=
args
.
allow_list
.
iter
(
)
.
map
(
|
cred_desc
|
KeyHandle
{
credential
:
cred_desc
.
id
.
clone
(
)
transports
:
AuthenticatorTransports
:
:
empty
(
)
}
)
.
collect
(
)
;
let
challenge
=
ClientDataHash
(
args
.
client_data_hash
)
;
self
.
legacy_sign
(
flags
timeout
challenge
app_ids
key_handles
status
callback
)
;
return
;
}
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
transaction
=
Transaction
:
:
new
(
timeout
callback
.
clone
(
)
status
move
|
info
selector
status
alive
|
{
let
mut
dev
=
match
Self
:
:
init_and_select
(
info
&
selector
&
status
false
alive
)
{
None
=
>
{
return
;
}
Some
(
dev
)
=
>
dev
}
;
info
!
(
"
Device
{
:
?
}
continues
with
the
signing
process
"
dev
.
id
(
)
)
;
if
ctap2
:
:
sign
(
&
mut
dev
args
.
clone
(
)
status
callback
.
clone
(
)
alive
)
{
let
_
=
selector
.
send
(
DeviceSelectorEvent
:
:
SelectedToken
(
dev
.
id
(
)
)
)
;
}
}
)
;
self
.
transaction
=
Some
(
try_or
!
(
transaction
move
|
e
|
cbc
.
call
(
Err
(
e
)
)
)
)
;
}
pub
fn
cancel
(
&
mut
self
)
{
if
let
Some
(
mut
transaction
)
=
self
.
transaction
.
take
(
)
{
info
!
(
"
Statemachine
was
cancelled
.
Cancelling
transaction
now
.
"
)
;
transaction
.
cancel
(
)
;
}
}
pub
fn
reset
(
&
mut
self
timeout
:
u64
status
:
Sender
<
crate
:
:
StatusUpdate
>
callback
:
StateCallback
<
crate
:
:
Result
<
crate
:
:
ResetResult
>
>
)
{
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
transaction
=
Transaction
:
:
new
(
timeout
callback
.
clone
(
)
status
move
|
info
selector
status
alive
|
{
let
mut
dev
=
match
Self
:
:
init_and_select
(
info
&
selector
&
status
true
alive
)
{
None
=
>
{
return
;
}
Some
(
dev
)
=
>
dev
}
;
ctap2
:
:
reset_helper
(
&
mut
dev
selector
status
callback
.
clone
(
)
alive
)
;
}
)
;
self
.
transaction
=
Some
(
try_or
!
(
transaction
move
|
e
|
cbc
.
call
(
Err
(
e
)
)
)
)
;
}
pub
fn
set_pin
(
&
mut
self
timeout
:
u64
new_pin
:
Pin
status
:
Sender
<
crate
:
:
StatusUpdate
>
callback
:
StateCallback
<
crate
:
:
Result
<
crate
:
:
ResetResult
>
>
)
{
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
transaction
=
Transaction
:
:
new
(
timeout
callback
.
clone
(
)
status
move
|
info
selector
status
alive
|
{
let
mut
dev
=
match
Self
:
:
init_and_select
(
info
&
selector
&
status
true
alive
)
{
None
=
>
{
return
;
}
Some
(
dev
)
=
>
dev
}
;
ctap2
:
:
set_or_change_pin_helper
(
&
mut
dev
None
new_pin
.
clone
(
)
status
callback
.
clone
(
)
alive
)
;
}
)
;
self
.
transaction
=
Some
(
try_or
!
(
transaction
move
|
e
|
cbc
.
call
(
Err
(
e
)
)
)
)
;
}
pub
fn
legacy_register
(
&
mut
self
flags
:
crate
:
:
RegisterFlags
timeout
:
u64
challenge
:
ClientDataHash
application
:
crate
:
:
AppId
key_handles
:
Vec
<
crate
:
:
KeyHandle
>
status
:
Sender
<
crate
:
:
StatusUpdate
>
callback
:
StateCallback
<
crate
:
:
Result
<
crate
:
:
RegisterResult
>
>
)
{
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
transaction
=
Transaction
:
:
new
(
timeout
cbc
.
clone
(
)
status
move
|
info
_
status
alive
|
{
let
dev
=
&
mut
match
Device
:
:
new
(
info
)
{
Ok
(
dev
)
=
>
dev
_
=
>
return
}
;
if
!
dev
.
is_u2f
(
)
|
|
!
u2f_init_device
(
dev
)
{
return
;
}
dev
.
downgrade_to_ctap1
(
)
;
if
!
flags
.
is_empty
(
)
{
return
;
}
let
excluded
=
key_handles
.
iter
(
)
.
any
(
|
key_handle
|
{
is_valid_transport
(
key_handle
.
transports
)
&
&
u2f_is_keyhandle_valid
(
dev
challenge
.
as_ref
(
)
&
application
&
key_handle
.
credential
)
.
unwrap_or
(
false
)
}
)
;
send_status
(
&
status
crate
:
:
StatusUpdate
:
:
PresenceRequired
)
;
while
alive
(
)
{
if
excluded
{
let
blank
=
vec
!
[
0u8
;
PARAMETER_SIZE
]
;
if
u2f_register
(
dev
&
blank
&
blank
)
.
is_ok
(
)
{
callback
.
call
(
Err
(
errors
:
:
AuthenticatorError
:
:
U2FToken
(
errors
:
:
U2FTokenError
:
:
InvalidState
)
)
)
;
break
;
}
}
else
if
let
Ok
(
bytes
)
=
u2f_register
(
dev
challenge
.
as_ref
(
)
&
application
)
{
let
mut
rp_id_hash
:
RpIdHash
=
RpIdHash
(
[
0u8
;
32
]
)
;
rp_id_hash
.
0
.
copy_from_slice
(
&
application
)
;
callback
.
call
(
MakeCredentialsResult
:
:
from_ctap1
(
&
bytes
&
rp_id_hash
)
.
map_err
(
|
_
|
{
errors
:
:
AuthenticatorError
:
:
U2FToken
(
errors
:
:
U2FTokenError
:
:
Unknown
)
}
)
)
;
break
;
}
thread
:
:
sleep
(
Duration
:
:
from_millis
(
100
)
)
;
}
}
)
;
self
.
transaction
=
Some
(
try_or
!
(
transaction
|
e
|
cbc
.
call
(
Err
(
e
)
)
)
)
;
}
pub
fn
legacy_sign
(
&
mut
self
flags
:
crate
:
:
SignFlags
timeout
:
u64
challenge
:
ClientDataHash
app_ids
:
Vec
<
crate
:
:
AppId
>
key_handles
:
Vec
<
crate
:
:
KeyHandle
>
status
:
Sender
<
crate
:
:
StatusUpdate
>
callback
:
StateCallback
<
crate
:
:
Result
<
crate
:
:
SignResult
>
>
)
{
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
transaction
=
Transaction
:
:
new
(
timeout
cbc
.
clone
(
)
status
move
|
info
_
status
alive
|
{
let
dev
=
&
mut
match
Device
:
:
new
(
info
)
{
Ok
(
dev
)
=
>
dev
_
=
>
return
}
;
if
!
dev
.
is_u2f
(
)
|
|
!
u2f_init_device
(
dev
)
{
return
;
}
dev
.
downgrade_to_ctap1
(
)
;
if
!
flags
.
is_empty
(
)
{
return
;
}
let
(
app_id
valid_handles
)
=
find_valid_key_handles
(
&
app_ids
&
key_handles
|
app_id
key_handle
|
{
u2f_is_keyhandle_valid
(
dev
challenge
.
as_ref
(
)
app_id
&
key_handle
.
credential
)
.
unwrap_or
(
false
)
}
)
;
let
transports
=
key_handles
.
iter
(
)
.
fold
(
crate
:
:
AuthenticatorTransports
:
:
empty
(
)
|
t
k
|
{
t
|
k
.
transports
}
)
;
if
!
is_valid_transport
(
transports
)
{
return
;
}
send_status
(
&
status
crate
:
:
StatusUpdate
:
:
PresenceRequired
)
;
'
outer
:
while
alive
(
)
{
if
valid_handles
.
is_empty
(
)
{
let
blank
=
vec
!
[
0u8
;
PARAMETER_SIZE
]
;
if
u2f_register
(
dev
&
blank
&
blank
)
.
is_ok
(
)
{
callback
.
call
(
Err
(
errors
:
:
AuthenticatorError
:
:
U2FToken
(
errors
:
:
U2FTokenError
:
:
InvalidState
)
)
)
;
break
;
}
}
else
{
for
key_handle
in
&
valid_handles
{
if
let
Ok
(
bytes
)
=
u2f_sign
(
dev
challenge
.
as_ref
(
)
app_id
&
key_handle
.
credential
)
{
let
pkcd
=
PublicKeyCredentialDescriptor
{
id
:
key_handle
.
credential
.
clone
(
)
transports
:
vec
!
[
]
}
;
let
mut
rp_id_hash
:
RpIdHash
=
RpIdHash
(
[
0u8
;
32
]
)
;
rp_id_hash
.
0
.
copy_from_slice
(
app_id
)
;
let
result
=
match
GetAssertionResult
:
:
from_ctap1
(
&
bytes
&
rp_id_hash
&
pkcd
)
{
Ok
(
assertions
)
=
>
assertions
Err
(
_
)
=
>
{
callback
.
call
(
Err
(
errors
:
:
AuthenticatorError
:
:
U2FToken
(
errors
:
:
U2FTokenError
:
:
Unknown
)
)
)
;
break
'
outer
;
}
}
;
callback
.
call
(
Ok
(
result
)
)
;
break
'
outer
;
}
}
}
thread
:
:
sleep
(
Duration
:
:
from_millis
(
100
)
)
;
}
}
)
;
self
.
transaction
=
Some
(
try_or
!
(
transaction
|
e
|
cbc
.
call
(
Err
(
e
)
)
)
)
;
}
pub
fn
manage
(
&
mut
self
timeout
:
u64
status
:
Sender
<
crate
:
:
StatusUpdate
>
callback
:
StateCallback
<
crate
:
:
Result
<
crate
:
:
ManageResult
>
>
)
{
self
.
cancel
(
)
;
let
cbc
=
callback
.
clone
(
)
;
let
transaction
=
Transaction
:
:
new
(
timeout
callback
.
clone
(
)
status
move
|
info
selector
status
alive
|
{
let
mut
dev
=
match
Self
:
:
init_and_select
(
info
&
selector
&
status
true
alive
)
{
None
=
>
{
return
;
}
Some
(
dev
)
=
>
dev
}
;
info
!
(
"
Device
{
:
?
}
selected
for
interactive
management
.
"
dev
.
id
(
)
)
;
let
(
tx
rx
)
=
channel
(
)
;
send_status
(
&
status
crate
:
:
StatusUpdate
:
:
InteractiveManagement
(
InteractiveUpdate
:
:
StartManagement
(
(
tx
dev
.
get_authenticator_info
(
)
.
cloned
(
)
)
)
)
)
;
while
alive
(
)
{
match
rx
.
recv_timeout
(
Duration
:
:
from_millis
(
400
)
)
{
Ok
(
InteractiveRequest
:
:
Quit
)
=
>
{
callback
.
call
(
Ok
(
ManageResult
:
:
Success
)
)
;
break
;
}
Ok
(
InteractiveRequest
:
:
Reset
)
=
>
{
ctap2
:
:
reset_helper
(
&
mut
dev
selector
status
callback
.
clone
(
)
alive
)
;
}
Ok
(
InteractiveRequest
:
:
ChangePIN
(
curr_pin
new_pin
)
)
=
>
{
ctap2
:
:
set_or_change_pin_helper
(
&
mut
dev
Some
(
curr_pin
)
new_pin
status
callback
.
clone
(
)
alive
)
;
}
Ok
(
InteractiveRequest
:
:
SetPIN
(
pin
)
)
=
>
{
ctap2
:
:
set_or_change_pin_helper
(
&
mut
dev
None
pin
status
callback
.
clone
(
)
alive
)
;
}
Ok
(
InteractiveRequest
:
:
ChangeConfig
(
authcfg
puat
)
)
=
>
{
ctap2
:
:
configure_authenticator
(
&
mut
dev
puat
authcfg
status
.
clone
(
)
callback
.
clone
(
)
alive
)
;
continue
;
}
Ok
(
InteractiveRequest
:
:
CredentialManagement
(
cred_management
puat
)
)
=
>
{
ctap2
:
:
credential_management
(
&
mut
dev
puat
cred_management
status
.
clone
(
)
callback
.
clone
(
)
alive
)
;
continue
;
}
Ok
(
InteractiveRequest
:
:
BioEnrollment
(
bio_enrollment
puat
)
)
=
>
{
ctap2
:
:
bio_enrollment
(
&
mut
dev
puat
bio_enrollment
status
.
clone
(
)
callback
.
clone
(
)
alive
)
;
continue
;
}
Err
(
RecvTimeoutError
:
:
Timeout
)
=
>
{
if
!
alive
(
)
{
callback
.
call
(
Err
(
AuthenticatorError
:
:
CancelledByUser
)
)
;
break
;
}
continue
;
}
Err
(
RecvTimeoutError
:
:
Disconnected
)
=
>
{
info
!
(
"
Callback
dropped
the
channel
so
we
abort
the
interactive
session
"
)
;
callback
.
call
(
Err
(
AuthenticatorError
:
:
CancelledByUser
)
)
;
}
}
break
;
}
}
)
;
self
.
transaction
=
Some
(
try_or
!
(
transaction
move
|
e
|
cbc
.
call
(
Err
(
e
)
)
)
)
;
}
}
