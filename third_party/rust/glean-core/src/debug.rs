use
std
:
:
env
;
const
GLEAN_LOG_PINGS
:
&
str
=
"
GLEAN_LOG_PINGS
"
;
const
GLEAN_DEBUG_VIEW_TAG
:
&
str
=
"
GLEAN_DEBUG_VIEW_TAG
"
;
#
[
derive
(
Debug
)
]
pub
struct
DebugOptions
{
pub
log_pings
:
DebugOption
<
bool
>
pub
debug_view_tag
:
DebugOption
<
String
>
}
impl
DebugOptions
{
pub
fn
new
(
)
-
>
Self
{
Self
{
log_pings
:
DebugOption
:
:
new
(
GLEAN_LOG_PINGS
None
)
debug_view_tag
:
DebugOption
:
:
new
(
GLEAN_DEBUG_VIEW_TAG
Some
(
validate_debug_view_tag
)
)
}
}
}
#
[
derive
(
Debug
)
]
pub
struct
DebugOption
<
T
F
=
fn
(
T
)
-
>
Option
<
T
>
>
{
env
:
String
value
:
Option
<
T
>
validation
:
Option
<
F
>
}
impl
<
T
F
>
DebugOption
<
T
F
>
where
T
:
std
:
:
str
:
:
FromStr
F
:
Fn
(
T
)
-
>
Option
<
T
>
{
pub
fn
new
(
env
:
&
str
validation
:
Option
<
F
>
)
-
>
Self
{
let
mut
option
=
Self
{
env
:
env
.
into
(
)
value
:
None
validation
}
;
option
.
set_from_env
(
)
;
option
}
fn
validate
(
&
self
value
:
T
)
-
>
Option
<
T
>
{
if
let
Some
(
f
)
=
self
.
validation
.
as_ref
(
)
{
f
(
value
)
}
else
{
Some
(
value
)
}
}
fn
set_from_env
(
&
mut
self
)
{
match
env
:
:
var
(
&
self
.
env
)
{
Ok
(
env_value
)
=
>
match
T
:
:
from_str
(
&
env_value
)
{
Ok
(
v
)
=
>
{
self
.
set
(
v
)
;
}
Err
(
_
)
=
>
{
log
:
:
error
!
(
"
Unable
to
parse
debug
option
{
}
=
{
}
into
{
}
.
Ignoring
.
"
self
.
env
env_value
std
:
:
any
:
:
type_name
:
:
<
T
>
(
)
)
;
}
}
Err
(
env
:
:
VarError
:
:
NotUnicode
(
_
)
)
=
>
{
log
:
:
error
!
(
"
The
value
of
{
}
is
not
valid
unicode
.
Ignoring
.
"
self
.
env
)
}
Err
(
_
)
=
>
{
}
}
}
pub
fn
set
(
&
mut
self
value
:
T
)
-
>
bool
{
let
validated
=
self
.
validate
(
value
)
;
if
validated
.
is_some
(
)
{
log
:
:
info
!
(
"
Setting
the
debug
option
{
}
.
"
self
.
env
)
;
self
.
value
=
validated
;
return
true
;
}
log
:
:
info
!
(
"
Invalid
value
for
debug
option
{
}
.
"
self
.
env
)
;
false
}
pub
fn
get
(
&
self
)
-
>
Option
<
&
T
>
{
self
.
value
.
as_ref
(
)
}
}
pub
fn
validate_debug_view_tag
(
value
:
String
)
-
>
Option
<
String
>
{
if
value
.
is_empty
(
)
{
log
:
:
error
!
(
"
Debug
view
tag
must
have
at
least
one
character
.
"
)
;
return
None
;
}
let
mut
iter
=
value
.
chars
(
)
;
let
mut
count
=
0
;
loop
{
match
iter
.
next
(
)
{
None
=
>
return
Some
(
value
)
Some
(
'
-
'
)
|
Some
(
'
a
'
.
.
=
'
z
'
)
|
Some
(
'
A
'
.
.
=
'
Z
'
)
|
Some
(
'
0
'
.
.
=
'
9
'
)
=
>
(
)
Some
(
c
)
=
>
{
log
:
:
error
!
(
"
Invalid
character
'
{
}
'
in
debug
view
tag
.
"
c
)
;
return
None
;
}
}
count
+
=
1
;
if
count
=
=
20
{
log
:
:
error
!
(
"
Debug
view
tag
cannot
exceed
20
characters
"
)
;
return
None
;
}
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
std
:
:
env
;
#
[
test
]
fn
debug_option_is_correctly_loaded_from_env
(
)
{
env
:
:
set_var
(
"
GLEAN_TEST_1
"
"
test
"
)
;
let
option
:
DebugOption
<
String
>
=
DebugOption
:
:
new
(
"
GLEAN_TEST_1
"
None
)
;
assert_eq
!
(
option
.
get
(
)
.
unwrap
(
)
"
test
"
)
;
}
#
[
test
]
fn
debug_option_is_correctly_validated_when_necessary
(
)
{
fn
validate
(
value
:
String
)
-
>
Option
<
String
>
{
if
value
=
=
"
test
"
{
Some
(
value
)
}
else
{
None
}
}
env
:
:
set_var
(
"
GLEAN_TEST_2
"
"
invalid
"
)
;
let
mut
option
:
DebugOption
<
String
>
=
DebugOption
:
:
new
(
"
GLEAN_TEST_2
"
Some
(
validate
)
)
;
assert
!
(
option
.
get
(
)
.
is_none
(
)
)
;
assert
!
(
option
.
set
(
"
test
"
.
into
(
)
)
)
;
assert_eq
!
(
option
.
get
(
)
.
unwrap
(
)
"
test
"
)
;
assert
!
(
!
option
.
set
(
"
invalid
"
.
into
(
)
)
)
;
assert_eq
!
(
option
.
get
(
)
.
unwrap
(
)
"
test
"
)
;
}
#
[
test
]
fn
validates_debug_view_tag_correctly
(
)
{
assert
!
(
validate_debug_view_tag
(
"
valid
-
value
"
.
to_string
(
)
)
.
is_some
(
)
)
;
assert
!
(
validate_debug_view_tag
(
"
-
also
-
valid
-
value
"
.
to_string
(
)
)
.
is_some
(
)
)
;
assert
!
(
validate_debug_view_tag
(
"
invalid_value
"
.
to_string
(
)
)
.
is_none
(
)
)
;
assert
!
(
validate_debug_view_tag
(
"
invalid
value
"
.
to_string
(
)
)
.
is_none
(
)
)
;
assert
!
(
validate_debug_view_tag
(
"
!
nv
lid
-
val
*
e
"
.
to_string
(
)
)
.
is_none
(
)
)
;
assert
!
(
validate_debug_view_tag
(
"
invalid
-
value
-
because
-
way
-
too
-
long
"
.
to_string
(
)
)
.
is_none
(
)
)
;
assert
!
(
validate_debug_view_tag
(
"
"
.
to_string
(
)
)
.
is_none
(
)
)
;
}
}
