use
std
:
:
fs
:
:
File
;
use
std
:
:
io
:
:
Write
;
use
std
:
:
sync
:
:
RwLock
;
#
[
cfg
(
target_os
=
"
windows
"
)
]
use
std
:
:
os
:
:
windows
:
:
io
:
:
FromRawHandle
;
#
[
cfg
(
target_os
=
"
windows
"
)
]
use
std
:
:
ffi
:
:
c_void
;
#
[
cfg
(
not
(
target_os
=
"
windows
"
)
)
]
use
std
:
:
os
:
:
unix
:
:
io
:
:
FromRawFd
;
use
serde
:
:
Serialize
;
pub
struct
FdLogger
{
pub
file
:
RwLock
<
File
>
}
#
[
derive
(
Serialize
)
]
struct
FdLoggingRecord
{
level
:
String
message
:
String
target
:
String
}
#
[
cfg
(
target_os
=
"
windows
"
)
]
unsafe
fn
get_file_from_fd
(
fd
:
u64
)
-
>
File
{
File
:
:
from_raw_handle
(
fd
as
*
mut
c_void
)
}
#
[
cfg
(
not
(
target_os
=
"
windows
"
)
)
]
unsafe
fn
get_file_from_fd
(
fd
:
u64
)
-
>
File
{
File
:
:
from_raw_fd
(
fd
as
i32
)
}
impl
FdLogger
{
pub
unsafe
fn
new
(
fd
:
u64
)
-
>
Self
{
FdLogger
{
file
:
RwLock
:
:
new
(
get_file_from_fd
(
fd
)
)
}
}
}
impl
log
:
:
Log
for
FdLogger
{
fn
enabled
(
&
self
_metadata
:
&
log
:
:
Metadata
)
-
>
bool
{
true
}
fn
log
(
&
self
record
:
&
log
:
:
Record
)
{
let
payload
=
FdLoggingRecord
{
level
:
record
.
level
(
)
.
to_string
(
)
message
:
record
.
args
(
)
.
to_string
(
)
target
:
record
.
target
(
)
.
to_string
(
)
}
;
let
_
=
writeln
!
(
self
.
file
.
write
(
)
.
unwrap
(
)
"
{
}
"
serde_json
:
:
to_string
(
&
payload
)
.
unwrap
(
)
)
;
}
fn
flush
(
&
self
)
{
let
_
=
self
.
file
.
write
(
)
.
unwrap
(
)
.
flush
(
)
;
}
}
