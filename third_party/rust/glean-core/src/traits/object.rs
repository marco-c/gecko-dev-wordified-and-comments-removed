use
std
:
:
fmt
:
:
Display
;
use
serde
:
:
{
Deserialize
Serialize
}
;
use
serde_json
:
:
Value
as
JsonValue
;
#
[
derive
(
Debug
)
]
pub
struct
ObjectError
(
serde_json
:
:
Error
)
;
impl
Display
for
ObjectError
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
std
:
:
fmt
:
:
Result
{
Display
:
:
fmt
(
&
self
.
0
f
)
}
}
impl
std
:
:
error
:
:
Error
for
ObjectError
{
}
pub
trait
ObjectSerialize
{
fn
from_str
(
obj
:
&
str
)
-
>
Result
<
Self
ObjectError
>
where
Self
:
Sized
;
fn
into_serialized_object
(
self
)
-
>
Result
<
JsonValue
ObjectError
>
;
}
impl
<
V
>
ObjectSerialize
for
V
where
V
:
Serialize
V
:
for
<
'
de
>
Deserialize
<
'
de
>
{
fn
from_str
(
obj
:
&
str
)
-
>
Result
<
Self
ObjectError
>
{
serde_json
:
:
from_str
(
obj
)
.
map_err
(
ObjectError
)
}
fn
into_serialized_object
(
self
)
-
>
Result
<
JsonValue
ObjectError
>
{
serde_json
:
:
to_value
(
self
)
.
map_err
(
ObjectError
)
}
}
