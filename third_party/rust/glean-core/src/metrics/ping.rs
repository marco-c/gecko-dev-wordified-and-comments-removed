use
crate
:
:
error
:
:
Result
;
use
crate
:
:
Glean
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
PingType
{
pub
name
:
String
pub
include_client_id
:
bool
pub
send_if_empty
:
bool
pub
reason_codes
:
Vec
<
String
>
}
impl
PingType
{
pub
fn
new
<
A
:
Into
<
String
>
>
(
name
:
A
include_client_id
:
bool
send_if_empty
:
bool
reason_codes
:
Vec
<
String
>
)
-
>
Self
{
Self
{
name
:
name
.
into
(
)
include_client_id
send_if_empty
reason_codes
}
}
pub
fn
submit
(
&
self
glean
:
&
Glean
reason
:
Option
<
&
str
>
)
-
>
Result
<
bool
>
{
let
corrected_reason
=
match
reason
{
Some
(
reason
)
=
>
{
if
self
.
reason_codes
.
contains
(
&
reason
.
to_string
(
)
)
{
Some
(
reason
)
}
else
{
log
:
:
error
!
(
"
Invalid
reason
code
{
}
for
ping
{
}
"
reason
self
.
name
)
;
None
}
}
None
=
>
None
}
;
glean
.
submit_ping
(
self
corrected_reason
)
}
}
