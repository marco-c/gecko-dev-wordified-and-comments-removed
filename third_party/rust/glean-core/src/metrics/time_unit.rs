use
std
:
:
convert
:
:
TryFrom
;
use
std
:
:
time
:
:
Duration
;
use
serde
:
:
{
Deserialize
Serialize
}
;
use
crate
:
:
error
:
:
{
Error
ErrorKind
}
;
#
[
derive
(
Copy
Clone
Debug
Deserialize
Serialize
PartialEq
)
]
#
[
serde
(
rename_all
=
"
lowercase
"
)
]
#
[
repr
(
i32
)
]
pub
enum
TimeUnit
{
Nanosecond
Microsecond
Millisecond
Second
Minute
Hour
Day
}
impl
TimeUnit
{
pub
fn
format_pattern
(
self
)
-
>
&
'
static
str
{
use
TimeUnit
:
:
*
;
match
self
{
Nanosecond
=
>
"
%
Y
-
%
m
-
%
dT
%
H
:
%
M
:
%
S
%
.
f
%
:
z
"
Microsecond
=
>
"
%
Y
-
%
m
-
%
dT
%
H
:
%
M
:
%
S
%
.
6f
%
:
z
"
Millisecond
=
>
"
%
Y
-
%
m
-
%
dT
%
H
:
%
M
:
%
S
%
.
3f
%
:
z
"
Second
=
>
"
%
Y
-
%
m
-
%
dT
%
H
:
%
M
:
%
S
%
:
z
"
Minute
=
>
"
%
Y
-
%
m
-
%
dT
%
H
:
%
M
%
:
z
"
Hour
=
>
"
%
Y
-
%
m
-
%
dT
%
H
%
:
z
"
Day
=
>
"
%
Y
-
%
m
-
%
d
%
:
z
"
}
}
pub
fn
duration_convert
(
self
duration
:
Duration
)
-
>
u64
{
use
TimeUnit
:
:
*
;
match
self
{
Nanosecond
=
>
duration
.
as_nanos
(
)
as
u64
Microsecond
=
>
duration
.
as_micros
(
)
as
u64
Millisecond
=
>
duration
.
as_millis
(
)
as
u64
Second
=
>
duration
.
as_secs
(
)
Minute
=
>
duration
.
as_secs
(
)
/
60
Hour
=
>
duration
.
as_secs
(
)
/
60
/
60
Day
=
>
duration
.
as_secs
(
)
/
60
/
60
/
24
}
}
pub
fn
as_nanos
(
self
duration
:
u64
)
-
>
u64
{
use
TimeUnit
:
:
*
;
let
duration
=
match
self
{
Nanosecond
=
>
Duration
:
:
from_nanos
(
duration
)
Microsecond
=
>
Duration
:
:
from_micros
(
duration
)
Millisecond
=
>
Duration
:
:
from_millis
(
duration
)
Second
=
>
Duration
:
:
from_secs
(
duration
)
Minute
=
>
Duration
:
:
from_secs
(
duration
*
60
)
Hour
=
>
Duration
:
:
from_secs
(
duration
*
60
*
60
)
Day
=
>
Duration
:
:
from_secs
(
duration
*
60
*
60
*
24
)
}
;
duration
.
as_nanos
(
)
as
u64
}
}
impl
TryFrom
<
i32
>
for
TimeUnit
{
type
Error
=
Error
;
fn
try_from
(
value
:
i32
)
-
>
Result
<
TimeUnit
Self
:
:
Error
>
{
match
value
{
0
=
>
Ok
(
TimeUnit
:
:
Nanosecond
)
1
=
>
Ok
(
TimeUnit
:
:
Microsecond
)
2
=
>
Ok
(
TimeUnit
:
:
Millisecond
)
3
=
>
Ok
(
TimeUnit
:
:
Second
)
4
=
>
Ok
(
TimeUnit
:
:
Minute
)
5
=
>
Ok
(
TimeUnit
:
:
Hour
)
6
=
>
Ok
(
TimeUnit
:
:
Day
)
e
=
>
Err
(
ErrorKind
:
:
TimeUnit
(
e
)
.
into
(
)
)
}
}
}
