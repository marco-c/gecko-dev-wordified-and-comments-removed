use
std
:
:
collections
:
:
HashMap
;
use
serde_json
:
:
{
json
Value
as
JsonValue
}
;
use
crate
:
:
error_recording
:
:
{
record_error
ErrorType
}
;
use
crate
:
:
event_database
:
:
RecordedEvent
;
use
crate
:
:
metrics
:
:
MetricType
;
use
crate
:
:
util
:
:
truncate_string_at_boundary_with_error
;
use
crate
:
:
CommonMetricData
;
use
crate
:
:
Glean
;
const
MAX_LENGTH_EXTRA_KEY_VALUE
:
usize
=
100
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
EventMetric
{
meta
:
CommonMetricData
allowed_extra_keys
:
Vec
<
String
>
}
impl
MetricType
for
EventMetric
{
fn
meta
(
&
self
)
-
>
&
CommonMetricData
{
&
self
.
meta
}
fn
meta_mut
(
&
mut
self
)
-
>
&
mut
CommonMetricData
{
&
mut
self
.
meta
}
}
impl
EventMetric
{
pub
fn
new
(
meta
:
CommonMetricData
allowed_extra_keys
:
Vec
<
String
>
)
-
>
Self
{
Self
{
meta
allowed_extra_keys
}
}
pub
fn
record
<
M
:
Into
<
Option
<
HashMap
<
i32
String
>
>
>
>
(
&
self
glean
:
&
Glean
timestamp
:
u64
extra
:
M
)
{
if
!
self
.
should_record
(
glean
)
{
return
;
}
let
extra
=
extra
.
into
(
)
;
let
extra_strings
:
Option
<
HashMap
<
String
String
>
>
=
if
let
Some
(
extra
)
=
extra
{
if
extra
.
is_empty
(
)
{
None
}
else
{
let
mut
extra_strings
=
HashMap
:
:
new
(
)
;
for
(
k
v
)
in
extra
.
into_iter
(
)
{
match
self
.
allowed_extra_keys
.
get
(
k
as
usize
)
{
Some
(
k
)
=
>
extra_strings
.
insert
(
k
.
to_string
(
)
truncate_string_at_boundary_with_error
(
glean
&
self
.
meta
v
MAX_LENGTH_EXTRA_KEY_VALUE
)
)
None
=
>
{
let
msg
=
format
!
(
"
Invalid
key
index
{
}
"
k
)
;
record_error
(
glean
&
self
.
meta
ErrorType
:
:
InvalidValue
msg
None
)
;
return
;
}
}
;
}
Some
(
extra_strings
)
}
}
else
{
None
}
;
glean
.
event_storage
(
)
.
record
(
glean
&
self
.
meta
timestamp
extra_strings
)
;
}
pub
fn
test_has_value
(
&
self
glean
:
&
Glean
store_name
:
&
str
)
-
>
bool
{
glean
.
event_storage
(
)
.
test_has_value
(
&
self
.
meta
store_name
)
}
pub
fn
test_get_value
(
&
self
glean
:
&
Glean
store_name
:
&
str
)
-
>
Option
<
Vec
<
RecordedEvent
>
>
{
glean
.
event_storage
(
)
.
test_get_value
(
&
self
.
meta
store_name
)
}
pub
fn
test_get_value_as_json_string
(
&
self
glean
:
&
Glean
store_name
:
&
str
)
-
>
String
{
match
self
.
test_get_value
(
glean
store_name
)
{
Some
(
value
)
=
>
json
!
(
value
)
None
=
>
json
!
(
JsonValue
:
:
Null
)
}
.
to_string
(
)
}
}
