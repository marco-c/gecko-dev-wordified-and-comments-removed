use
crate
:
:
error_recording
:
:
{
record_error
ErrorType
}
;
use
crate
:
:
metrics
:
:
Metric
;
use
crate
:
:
metrics
:
:
MetricType
;
use
crate
:
:
storage
:
:
StorageManager
;
use
crate
:
:
CommonMetricData
;
use
crate
:
:
Glean
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
QuantityMetric
{
meta
:
CommonMetricData
}
impl
MetricType
for
QuantityMetric
{
fn
meta
(
&
self
)
-
>
&
CommonMetricData
{
&
self
.
meta
}
fn
meta_mut
(
&
mut
self
)
-
>
&
mut
CommonMetricData
{
&
mut
self
.
meta
}
}
impl
QuantityMetric
{
pub
fn
new
(
meta
:
CommonMetricData
)
-
>
Self
{
Self
{
meta
}
}
pub
fn
set
(
&
self
glean
:
&
Glean
value
:
i64
)
{
if
!
self
.
should_record
(
glean
)
{
return
;
}
if
value
<
0
{
record_error
(
glean
&
self
.
meta
ErrorType
:
:
InvalidValue
format
!
(
"
Set
negative
value
{
}
"
value
)
None
)
;
return
;
}
glean
.
storage
(
)
.
record
(
glean
&
self
.
meta
&
Metric
:
:
Quantity
(
value
)
)
}
pub
fn
test_get_value
(
&
self
glean
:
&
Glean
storage_name
:
&
str
)
-
>
Option
<
i64
>
{
match
StorageManager
.
snapshot_metric
(
glean
.
storage
(
)
storage_name
&
self
.
meta
.
identifier
(
glean
)
self
.
meta
.
lifetime
)
{
Some
(
Metric
:
:
Quantity
(
i
)
)
=
>
Some
(
i
)
_
=
>
None
}
}
}
