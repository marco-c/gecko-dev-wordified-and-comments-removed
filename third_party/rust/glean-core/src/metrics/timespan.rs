use
std
:
:
time
:
:
Duration
;
use
crate
:
:
error_recording
:
:
{
record_error
ErrorType
}
;
use
crate
:
:
metrics
:
:
time_unit
:
:
TimeUnit
;
use
crate
:
:
metrics
:
:
Metric
;
use
crate
:
:
metrics
:
:
MetricType
;
use
crate
:
:
storage
:
:
StorageManager
;
use
crate
:
:
CommonMetricData
;
use
crate
:
:
Glean
;
#
[
derive
(
Debug
)
]
pub
struct
TimespanMetric
{
meta
:
CommonMetricData
time_unit
:
TimeUnit
start_time
:
Option
<
u64
>
}
impl
MetricType
for
TimespanMetric
{
fn
meta
(
&
self
)
-
>
&
CommonMetricData
{
&
self
.
meta
}
fn
meta_mut
(
&
mut
self
)
-
>
&
mut
CommonMetricData
{
&
mut
self
.
meta
}
}
impl
TimespanMetric
{
pub
fn
new
(
meta
:
CommonMetricData
time_unit
:
TimeUnit
)
-
>
Self
{
Self
{
meta
time_unit
start_time
:
None
}
}
pub
fn
set_start
(
&
mut
self
glean
:
&
Glean
start_time
:
u64
)
{
if
!
self
.
should_record
(
glean
)
{
return
;
}
if
self
.
start_time
.
is_some
(
)
{
record_error
(
glean
&
self
.
meta
ErrorType
:
:
InvalidState
"
Timespan
already
started
"
None
)
;
return
;
}
self
.
start_time
=
Some
(
start_time
)
;
}
pub
fn
set_stop
(
&
mut
self
glean
:
&
Glean
stop_time
:
u64
)
{
if
!
self
.
should_record
(
glean
)
{
self
.
start_time
=
None
;
return
;
}
if
self
.
start_time
.
is_none
(
)
{
record_error
(
glean
&
self
.
meta
ErrorType
:
:
InvalidState
"
Timespan
not
running
"
None
)
;
return
;
}
let
start_time
=
self
.
start_time
.
take
(
)
.
unwrap
(
)
;
let
duration
=
match
stop_time
.
checked_sub
(
start_time
)
{
Some
(
duration
)
=
>
duration
None
=
>
{
record_error
(
glean
&
self
.
meta
ErrorType
:
:
InvalidValue
"
Timespan
was
negative
"
None
)
;
return
;
}
}
;
let
duration
=
Duration
:
:
from_nanos
(
duration
)
;
self
.
set_raw
(
glean
duration
)
;
}
pub
fn
cancel
(
&
mut
self
)
{
self
.
start_time
=
None
;
}
pub
fn
set_raw
(
&
self
glean
:
&
Glean
elapsed
:
Duration
)
{
if
!
self
.
should_record
(
glean
)
{
return
;
}
if
self
.
start_time
.
is_some
(
)
{
record_error
(
glean
&
self
.
meta
ErrorType
:
:
InvalidState
"
Timespan
already
running
.
Raw
value
not
recorded
.
"
None
)
;
return
;
}
let
mut
report_value_exists
:
bool
=
false
;
glean
.
storage
(
)
.
record_with
(
glean
&
self
.
meta
|
old_value
|
{
match
old_value
{
Some
(
old
Metric
:
:
Timespan
(
.
.
)
)
=
>
{
report_value_exists
=
true
;
old
}
_
=
>
Metric
:
:
Timespan
(
elapsed
self
.
time_unit
)
}
}
)
;
if
report_value_exists
{
record_error
(
glean
&
self
.
meta
ErrorType
:
:
InvalidState
"
Timespan
value
already
recorded
.
New
value
discarded
.
"
None
)
;
}
;
}
pub
fn
test_get_value
(
&
self
glean
:
&
Glean
storage_name
:
&
str
)
-
>
Option
<
u64
>
{
match
StorageManager
.
snapshot_metric
(
glean
.
storage
(
)
storage_name
&
self
.
meta
.
identifier
(
glean
)
self
.
meta
.
lifetime
)
{
Some
(
Metric
:
:
Timespan
(
time
time_unit
)
)
=
>
Some
(
time_unit
.
duration_convert
(
time
)
)
_
=
>
None
}
}
}
