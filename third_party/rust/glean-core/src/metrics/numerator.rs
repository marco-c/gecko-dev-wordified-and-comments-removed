use
std
:
:
sync
:
:
Arc
;
use
crate
:
:
common_metric_data
:
:
CommonMetricDataInternal
;
use
crate
:
:
error_recording
:
:
ErrorType
;
use
crate
:
:
metrics
:
:
MetricType
;
use
crate
:
:
metrics
:
:
Rate
;
use
crate
:
:
metrics
:
:
RateMetric
;
use
crate
:
:
Glean
;
use
crate
:
:
{
CommonMetricData
TestGetValue
}
;
#
[
derive
(
Clone
)
]
pub
struct
NumeratorMetric
(
pub
(
crate
)
Arc
<
RateMetric
>
)
;
impl
MetricType
for
NumeratorMetric
{
fn
meta
(
&
self
)
-
>
&
CommonMetricDataInternal
{
self
.
0
.
meta
(
)
}
}
impl
NumeratorMetric
{
pub
fn
new
(
meta
:
CommonMetricData
)
-
>
Self
{
Self
(
Arc
:
:
new
(
RateMetric
:
:
new
(
meta
)
)
)
}
pub
fn
add_to_numerator
(
&
self
amount
:
i32
)
{
let
metric
=
self
.
clone
(
)
;
crate
:
:
launch_with_glean
(
move
|
glean
|
metric
.
add_to_numerator_sync
(
glean
amount
)
)
;
}
#
[
doc
(
hidden
)
]
pub
fn
add_to_numerator_sync
(
&
self
glean
:
&
Glean
amount
:
i32
)
{
self
.
0
.
add_to_numerator_sync
(
glean
amount
)
}
#
[
doc
(
hidden
)
]
pub
fn
get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
glean
:
&
Glean
ping_name
:
S
)
-
>
Option
<
Rate
>
{
self
.
0
.
get_value
(
glean
ping_name
)
}
pub
fn
test_get_num_recorded_errors
(
&
self
error
:
ErrorType
)
-
>
i32
{
self
.
0
.
test_get_num_recorded_errors
(
error
)
}
}
impl
TestGetValue
<
Rate
>
for
NumeratorMetric
{
fn
test_get_value
(
&
self
ping_name
:
Option
<
String
>
)
-
>
Option
<
Rate
>
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
core
:
:
with_glean
(
|
glean
|
self
.
get_value
(
glean
ping_name
.
as_deref
(
)
)
)
}
}
