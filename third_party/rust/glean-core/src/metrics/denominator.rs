use
crate
:
:
common_metric_data
:
:
CommonMetricDataInternal
;
use
crate
:
:
error_recording
:
:
{
record_error
test_get_num_recorded_errors
ErrorType
}
;
use
crate
:
:
metrics
:
:
CounterMetric
;
use
crate
:
:
metrics
:
:
Metric
;
use
crate
:
:
metrics
:
:
MetricType
;
use
crate
:
:
metrics
:
:
RateMetric
;
use
crate
:
:
storage
:
:
StorageManager
;
use
crate
:
:
Glean
;
use
crate
:
:
{
CommonMetricData
TestGetValue
}
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
DenominatorMetric
{
counter
:
CounterMetric
numerators
:
Vec
<
RateMetric
>
}
impl
MetricType
for
DenominatorMetric
{
fn
meta
(
&
self
)
-
>
&
CommonMetricDataInternal
{
self
.
counter
.
meta
(
)
}
}
impl
DenominatorMetric
{
pub
fn
new
(
meta
:
CommonMetricData
numerators
:
Vec
<
CommonMetricData
>
)
-
>
Self
{
Self
{
counter
:
CounterMetric
:
:
new
(
meta
)
numerators
:
numerators
.
into_iter
(
)
.
map
(
RateMetric
:
:
new
)
.
collect
(
)
}
}
pub
fn
add
(
&
self
amount
:
i32
)
{
let
metric
=
self
.
clone
(
)
;
crate
:
:
launch_with_glean
(
move
|
glean
|
metric
.
add_sync
(
glean
amount
)
)
}
#
[
doc
(
hidden
)
]
pub
fn
add_sync
(
&
self
glean
:
&
Glean
amount
:
i32
)
{
if
!
self
.
should_record
(
glean
)
{
return
;
}
if
amount
<
=
0
{
record_error
(
glean
self
.
meta
(
)
ErrorType
:
:
InvalidValue
format
!
(
"
Added
negative
or
zero
value
{
}
"
amount
)
None
)
;
return
;
}
for
num
in
&
self
.
numerators
{
num
.
add_to_denominator_sync
(
glean
amount
)
;
}
glean
.
storage
(
)
.
record_with
(
glean
self
.
counter
.
meta
(
)
|
old_value
|
match
old_value
{
Some
(
Metric
:
:
Counter
(
old_value
)
)
=
>
{
Metric
:
:
Counter
(
old_value
.
saturating_add
(
amount
)
)
}
_
=
>
Metric
:
:
Counter
(
amount
)
}
)
}
#
[
doc
(
hidden
)
]
pub
fn
get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
glean
:
&
Glean
ping_name
:
S
)
-
>
Option
<
i32
>
{
let
queried_ping_name
=
ping_name
.
into
(
)
.
unwrap_or_else
(
|
|
&
self
.
meta
(
)
.
inner
.
send_in_pings
[
0
]
)
;
match
StorageManager
.
snapshot_metric_for_test
(
glean
.
storage
(
)
queried_ping_name
&
self
.
meta
(
)
.
identifier
(
glean
)
self
.
meta
(
)
.
inner
.
lifetime
)
{
Some
(
Metric
:
:
Counter
(
i
)
)
=
>
Some
(
i
)
_
=
>
None
}
}
pub
fn
test_get_num_recorded_errors
(
&
self
error
:
ErrorType
)
-
>
i32
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
core
:
:
with_glean
(
|
glean
|
{
test_get_num_recorded_errors
(
glean
self
.
meta
(
)
error
)
.
unwrap_or
(
0
)
}
)
}
}
impl
TestGetValue
<
i32
>
for
DenominatorMetric
{
fn
test_get_value
(
&
self
ping_name
:
Option
<
String
>
)
-
>
Option
<
i32
>
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
core
:
:
with_glean
(
|
glean
|
self
.
get_value
(
glean
ping_name
.
as_deref
(
)
)
)
}
}
