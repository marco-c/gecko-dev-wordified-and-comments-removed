use
uuid
:
:
Uuid
;
use
crate
:
:
error_recording
:
:
{
record_error
ErrorType
}
;
use
crate
:
:
metrics
:
:
Metric
;
use
crate
:
:
metrics
:
:
MetricType
;
use
crate
:
:
storage
:
:
StorageManager
;
use
crate
:
:
CommonMetricData
;
use
crate
:
:
Glean
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
UuidMetric
{
meta
:
CommonMetricData
}
impl
MetricType
for
UuidMetric
{
fn
meta
(
&
self
)
-
>
&
CommonMetricData
{
&
self
.
meta
}
fn
meta_mut
(
&
mut
self
)
-
>
&
mut
CommonMetricData
{
&
mut
self
.
meta
}
}
impl
UuidMetric
{
pub
fn
new
(
meta
:
CommonMetricData
)
-
>
Self
{
Self
{
meta
}
}
pub
fn
set
(
&
self
glean
:
&
Glean
value
:
Uuid
)
{
if
!
self
.
should_record
(
glean
)
{
return
;
}
let
s
=
value
.
to_string
(
)
;
let
value
=
Metric
:
:
Uuid
(
s
)
;
glean
.
storage
(
)
.
record
(
glean
&
self
.
meta
&
value
)
}
pub
fn
set_from_str
(
&
self
glean
:
&
Glean
value
:
&
str
)
{
if
!
self
.
should_record
(
glean
)
{
return
;
}
if
let
Ok
(
uuid
)
=
uuid
:
:
Uuid
:
:
parse_str
(
&
value
)
{
self
.
set
(
glean
uuid
)
;
}
else
{
let
msg
=
format
!
(
"
Unexpected
UUID
value
'
{
}
'
"
value
)
;
record_error
(
glean
&
self
.
meta
ErrorType
:
:
InvalidValue
msg
None
)
;
}
}
pub
fn
generate_and_set
(
&
self
storage
:
&
Glean
)
-
>
Uuid
{
let
uuid
=
Uuid
:
:
new_v4
(
)
;
self
.
set
(
storage
uuid
)
;
uuid
}
pub
(
crate
)
fn
get_value
(
&
self
glean
:
&
Glean
storage_name
:
&
str
)
-
>
Option
<
Uuid
>
{
match
StorageManager
.
snapshot_metric
(
glean
.
storage
(
)
storage_name
&
self
.
meta
(
)
.
identifier
(
glean
)
self
.
meta
.
lifetime
)
{
Some
(
Metric
:
:
Uuid
(
uuid
)
)
=
>
Uuid
:
:
parse_str
(
&
uuid
)
.
ok
(
)
_
=
>
None
}
}
pub
fn
test_get_value
(
&
self
glean
:
&
Glean
storage_name
:
&
str
)
-
>
Option
<
Uuid
>
{
self
.
get_value
(
glean
storage_name
)
}
}
