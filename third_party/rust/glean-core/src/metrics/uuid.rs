use
std
:
:
sync
:
:
Arc
;
use
uuid
:
:
Uuid
;
use
crate
:
:
common_metric_data
:
:
CommonMetricDataInternal
;
use
crate
:
:
error_recording
:
:
{
record_error
test_get_num_recorded_errors
ErrorType
}
;
use
crate
:
:
metrics
:
:
Metric
;
use
crate
:
:
metrics
:
:
MetricType
;
use
crate
:
:
storage
:
:
StorageManager
;
use
crate
:
:
Glean
;
use
crate
:
:
{
CommonMetricData
TestGetValue
}
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
UuidMetric
{
meta
:
Arc
<
CommonMetricDataInternal
>
}
impl
MetricType
for
UuidMetric
{
fn
meta
(
&
self
)
-
>
&
CommonMetricDataInternal
{
&
self
.
meta
}
}
impl
UuidMetric
{
pub
fn
new
(
meta
:
CommonMetricData
)
-
>
Self
{
Self
{
meta
:
Arc
:
:
new
(
meta
.
into
(
)
)
}
}
pub
fn
set
(
&
self
value
:
String
)
{
let
metric
=
self
.
clone
(
)
;
crate
:
:
launch_with_glean
(
move
|
glean
|
metric
.
set_sync
(
glean
&
value
)
)
}
#
[
doc
(
hidden
)
]
pub
fn
set_sync
<
S
:
Into
<
String
>
>
(
&
self
glean
:
&
Glean
value
:
S
)
{
if
!
self
.
should_record
(
glean
)
{
return
;
}
let
value
=
value
.
into
(
)
;
if
let
Ok
(
uuid
)
=
uuid
:
:
Uuid
:
:
parse_str
(
&
value
)
{
let
value
=
Metric
:
:
Uuid
(
uuid
.
as_hyphenated
(
)
.
to_string
(
)
)
;
glean
.
storage
(
)
.
record
(
glean
&
self
.
meta
&
value
)
}
else
{
let
msg
=
format
!
(
"
Unexpected
UUID
value
'
{
}
'
"
value
)
;
record_error
(
glean
&
self
.
meta
ErrorType
:
:
InvalidValue
msg
None
)
;
}
}
#
[
doc
(
hidden
)
]
pub
fn
set_from_uuid_sync
(
&
self
glean
:
&
Glean
value
:
Uuid
)
{
self
.
set_sync
(
glean
value
.
to_string
(
)
)
}
pub
fn
generate_and_set
(
&
self
)
-
>
String
{
let
uuid
=
Uuid
:
:
new_v4
(
)
;
let
value
=
uuid
.
to_string
(
)
;
let
metric
=
self
.
clone
(
)
;
crate
:
:
launch_with_glean
(
move
|
glean
|
metric
.
set_sync
(
glean
value
)
)
;
uuid
.
to_string
(
)
}
#
[
doc
(
hidden
)
]
pub
fn
generate_and_set_sync
(
&
self
storage
:
&
Glean
)
-
>
Uuid
{
let
uuid
=
Uuid
:
:
new_v4
(
)
;
self
.
set_sync
(
storage
uuid
.
to_string
(
)
)
;
uuid
}
#
[
doc
(
hidden
)
]
pub
fn
get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
glean
:
&
Glean
ping_name
:
S
)
-
>
Option
<
Uuid
>
{
let
queried_ping_name
=
ping_name
.
into
(
)
.
unwrap_or_else
(
|
|
&
self
.
meta
(
)
.
inner
.
send_in_pings
[
0
]
)
;
match
StorageManager
.
snapshot_metric_for_test
(
glean
.
storage
(
)
queried_ping_name
&
self
.
meta
.
identifier
(
glean
)
self
.
meta
.
inner
.
lifetime
)
{
Some
(
Metric
:
:
Uuid
(
uuid
)
)
=
>
Uuid
:
:
parse_str
(
&
uuid
)
.
ok
(
)
_
=
>
None
}
}
pub
fn
test_get_num_recorded_errors
(
&
self
error
:
ErrorType
)
-
>
i32
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
core
:
:
with_glean
(
|
glean
|
{
test_get_num_recorded_errors
(
glean
self
.
meta
(
)
error
)
.
unwrap_or
(
0
)
}
)
}
}
impl
TestGetValue
<
String
>
for
UuidMetric
{
fn
test_get_value
(
&
self
ping_name
:
Option
<
String
>
)
-
>
Option
<
String
>
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
core
:
:
with_glean
(
|
glean
|
{
self
.
get_value
(
glean
ping_name
.
as_deref
(
)
)
.
map
(
|
uuid
|
uuid
.
to_string
(
)
)
}
)
}
}
