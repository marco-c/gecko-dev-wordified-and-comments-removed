use
crate
:
:
error_recording
:
:
{
record_error
ErrorType
}
;
use
crate
:
:
metrics
:
:
Metric
;
use
crate
:
:
metrics
:
:
MetricType
;
use
crate
:
:
storage
:
:
StorageManager
;
use
crate
:
:
CommonMetricData
;
use
crate
:
:
Glean
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
RateMetric
{
meta
:
CommonMetricData
}
impl
MetricType
for
RateMetric
{
fn
meta
(
&
self
)
-
>
&
CommonMetricData
{
&
self
.
meta
}
fn
meta_mut
(
&
mut
self
)
-
>
&
mut
CommonMetricData
{
&
mut
self
.
meta
}
}
impl
RateMetric
{
pub
fn
new
(
meta
:
CommonMetricData
)
-
>
Self
{
Self
{
meta
}
}
pub
fn
add_to_numerator
(
&
self
glean
:
&
Glean
amount
:
i32
)
{
if
!
self
.
should_record
(
glean
)
{
return
;
}
if
amount
<
0
{
record_error
(
glean
&
self
.
meta
ErrorType
:
:
InvalidValue
format
!
(
"
Added
negative
value
{
}
to
numerator
"
amount
)
None
)
;
return
;
}
glean
.
storage
(
)
.
record_with
(
glean
&
self
.
meta
|
old_value
|
match
old_value
{
Some
(
Metric
:
:
Rate
(
num
den
)
)
=
>
Metric
:
:
Rate
(
num
.
saturating_add
(
amount
)
den
)
_
=
>
Metric
:
:
Rate
(
amount
0
)
}
)
;
}
pub
fn
add_to_denominator
(
&
self
glean
:
&
Glean
amount
:
i32
)
{
if
!
self
.
should_record
(
glean
)
{
return
;
}
if
amount
<
0
{
record_error
(
glean
&
self
.
meta
ErrorType
:
:
InvalidValue
format
!
(
"
Added
negative
value
{
}
to
denominator
"
amount
)
None
)
;
return
;
}
glean
.
storage
(
)
.
record_with
(
glean
&
self
.
meta
|
old_value
|
match
old_value
{
Some
(
Metric
:
:
Rate
(
num
den
)
)
=
>
Metric
:
:
Rate
(
num
den
.
saturating_add
(
amount
)
)
_
=
>
Metric
:
:
Rate
(
0
amount
)
}
)
;
}
pub
fn
test_get_value
(
&
self
glean
:
&
Glean
storage_name
:
&
str
)
-
>
Option
<
(
i32
i32
)
>
{
match
StorageManager
.
snapshot_metric_for_test
(
glean
.
storage
(
)
storage_name
&
self
.
meta
.
identifier
(
glean
)
self
.
meta
.
lifetime
)
{
Some
(
Metric
:
:
Rate
(
n
d
)
)
=
>
Some
(
(
n
d
)
)
_
=
>
None
}
}
}
