use
std
:
:
mem
;
use
std
:
:
sync
:
:
Arc
;
use
crate
:
:
common_metric_data
:
:
{
CommonMetricDataInternal
DynamicLabelType
}
;
use
crate
:
:
error_recording
:
:
{
record_error
test_get_num_recorded_errors
ErrorType
}
;
use
crate
:
:
histogram
:
:
{
Bucketing
Histogram
HistogramType
LinearOrExponential
}
;
use
crate
:
:
metrics
:
:
{
DistributionData
Metric
MetricType
}
;
use
crate
:
:
storage
:
:
StorageManager
;
use
crate
:
:
CommonMetricData
;
use
crate
:
:
Glean
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
CustomDistributionMetric
{
meta
:
Arc
<
CommonMetricDataInternal
>
range_min
:
u64
range_max
:
u64
bucket_count
:
u64
histogram_type
:
HistogramType
}
pub
(
crate
)
fn
snapshot
<
B
:
Bucketing
>
(
hist
:
&
Histogram
<
B
>
)
-
>
DistributionData
{
DistributionData
{
values
:
hist
.
snapshot_values
(
)
.
into_iter
(
)
.
map
(
|
(
k
v
)
|
(
k
as
i64
v
as
i64
)
)
.
collect
(
)
sum
:
hist
.
sum
(
)
as
i64
count
:
hist
.
count
(
)
as
i64
}
}
impl
MetricType
for
CustomDistributionMetric
{
fn
meta
(
&
self
)
-
>
&
CommonMetricDataInternal
{
&
self
.
meta
}
fn
with_name
(
&
self
name
:
String
)
-
>
Self
{
let
mut
meta
=
(
*
self
.
meta
)
.
clone
(
)
;
meta
.
inner
.
name
=
name
;
Self
{
meta
:
Arc
:
:
new
(
meta
)
range_min
:
self
.
range_min
range_max
:
self
.
range_max
bucket_count
:
self
.
bucket_count
histogram_type
:
self
.
histogram_type
}
}
fn
with_dynamic_label
(
&
self
label
:
DynamicLabelType
)
-
>
Self
{
let
mut
meta
=
(
*
self
.
meta
)
.
clone
(
)
;
meta
.
inner
.
dynamic_label
=
Some
(
label
)
;
Self
{
meta
:
Arc
:
:
new
(
meta
)
range_min
:
self
.
range_min
range_max
:
self
.
range_max
bucket_count
:
self
.
bucket_count
histogram_type
:
self
.
histogram_type
}
}
}
impl
CustomDistributionMetric
{
pub
fn
new
(
meta
:
CommonMetricData
range_min
:
i64
range_max
:
i64
bucket_count
:
i64
histogram_type
:
HistogramType
)
-
>
Self
{
Self
{
meta
:
Arc
:
:
new
(
meta
.
into
(
)
)
range_min
:
range_min
as
u64
range_max
:
range_max
as
u64
bucket_count
:
bucket_count
as
u64
histogram_type
}
}
pub
fn
accumulate_samples
(
&
self
samples
:
Vec
<
i64
>
)
{
let
metric
=
self
.
clone
(
)
;
crate
:
:
launch_with_glean
(
move
|
glean
|
metric
.
accumulate_samples_sync
(
glean
&
samples
)
)
}
pub
fn
accumulate_single_sample
(
&
self
sample
:
i64
)
{
let
metric
=
self
.
clone
(
)
;
crate
:
:
launch_with_glean
(
move
|
glean
|
metric
.
accumulate_samples_sync
(
glean
&
[
sample
]
)
)
}
#
[
doc
(
hidden
)
]
pub
fn
accumulate_samples_sync
(
&
self
glean
:
&
Glean
samples
:
&
[
i64
]
)
{
if
!
self
.
should_record
(
glean
)
{
return
;
}
let
mut
num_negative_samples
=
0
;
fn
accumulate
<
B
:
Bucketing
F
>
(
samples
:
&
[
i64
]
mut
hist
:
Histogram
<
B
>
metric
:
F
)
-
>
(
i32
Metric
)
where
F
:
Fn
(
Histogram
<
B
>
)
-
>
Metric
{
let
mut
num_negative_samples
=
0
;
for
&
sample
in
samples
.
iter
(
)
{
if
sample
<
0
{
num_negative_samples
+
=
1
;
}
else
{
let
sample
=
sample
as
u64
;
hist
.
accumulate
(
sample
)
;
}
}
(
num_negative_samples
metric
(
hist
)
)
}
glean
.
storage
(
)
.
record_with
(
glean
&
self
.
meta
|
old_value
|
{
let
(
num_negative
hist
)
=
match
self
.
histogram_type
{
HistogramType
:
:
Linear
=
>
{
let
hist
=
if
let
Some
(
Metric
:
:
CustomDistributionLinear
(
hist
)
)
=
old_value
{
hist
}
else
{
Histogram
:
:
linear
(
self
.
range_min
self
.
range_max
self
.
bucket_count
as
usize
)
}
;
accumulate
(
samples
hist
Metric
:
:
CustomDistributionLinear
)
}
HistogramType
:
:
Exponential
=
>
{
let
hist
=
if
let
Some
(
Metric
:
:
CustomDistributionExponential
(
hist
)
)
=
old_value
{
hist
}
else
{
Histogram
:
:
exponential
(
self
.
range_min
self
.
range_max
self
.
bucket_count
as
usize
)
}
;
accumulate
(
samples
hist
Metric
:
:
CustomDistributionExponential
)
}
}
;
num_negative_samples
=
num_negative
;
hist
}
)
;
if
num_negative_samples
>
0
{
let
msg
=
format
!
(
"
Accumulated
{
}
negative
samples
"
num_negative_samples
)
;
record_error
(
glean
&
self
.
meta
ErrorType
:
:
InvalidValue
msg
num_negative_samples
)
;
}
}
#
[
doc
(
hidden
)
]
pub
fn
get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
glean
:
&
Glean
ping_name
:
S
)
-
>
Option
<
DistributionData
>
{
let
queried_ping_name
=
ping_name
.
into
(
)
.
unwrap_or_else
(
|
|
&
self
.
meta
(
)
.
inner
.
send_in_pings
[
0
]
)
;
match
StorageManager
.
snapshot_metric_for_test
(
glean
.
storage
(
)
queried_ping_name
&
self
.
meta
.
identifier
(
glean
)
self
.
meta
.
inner
.
lifetime
)
{
Some
(
Metric
:
:
CustomDistributionExponential
(
hist
)
)
=
>
Some
(
snapshot
(
&
hist
)
)
Some
(
Metric
:
:
CustomDistributionLinear
(
hist
)
)
=
>
Some
(
snapshot
(
&
hist
)
)
_
=
>
None
}
}
pub
fn
test_get_value
(
&
self
ping_name
:
Option
<
String
>
)
-
>
Option
<
DistributionData
>
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
core
:
:
with_glean
(
|
glean
|
self
.
get_value
(
glean
ping_name
.
as_deref
(
)
)
)
}
pub
fn
test_get_num_recorded_errors
(
&
self
error
:
ErrorType
)
-
>
i32
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
core
:
:
with_glean
(
|
glean
|
{
test_get_num_recorded_errors
(
glean
self
.
meta
(
)
error
)
.
unwrap_or
(
0
)
}
)
}
pub
fn
start_buffer
(
&
self
)
-
>
LocalCustomDistribution
<
'
_
>
{
LocalCustomDistribution
:
:
new
(
self
)
}
fn
commit_histogram
(
&
self
histogram
:
Histogram
<
LinearOrExponential
>
)
{
let
metric
=
self
.
clone
(
)
;
crate
:
:
launch_with_glean
(
move
|
glean
|
{
glean
.
storage
(
)
.
record_with
(
glean
&
metric
.
meta
move
|
old_value
|
{
match
metric
.
histogram_type
{
HistogramType
:
:
Linear
=
>
{
let
mut
hist
=
if
let
Some
(
Metric
:
:
CustomDistributionLinear
(
hist
)
)
=
old_value
{
hist
}
else
{
Histogram
:
:
linear
(
metric
.
range_min
metric
.
range_max
metric
.
bucket_count
as
usize
)
}
;
hist
.
_merge
(
&
histogram
)
;
Metric
:
:
CustomDistributionLinear
(
hist
)
}
HistogramType
:
:
Exponential
=
>
{
let
mut
hist
=
if
let
Some
(
Metric
:
:
CustomDistributionExponential
(
hist
)
)
=
old_value
{
hist
}
else
{
Histogram
:
:
exponential
(
metric
.
range_min
metric
.
range_max
metric
.
bucket_count
as
usize
)
}
;
hist
.
_merge
(
&
histogram
)
;
Metric
:
:
CustomDistributionExponential
(
hist
)
}
}
}
)
;
}
)
;
}
}
pub
struct
LocalCustomDistribution
<
'
a
>
{
histogram
:
Histogram
<
LinearOrExponential
>
metric
:
&
'
a
CustomDistributionMetric
}
impl
<
'
a
>
LocalCustomDistribution
<
'
a
>
{
fn
new
(
metric
:
&
'
a
CustomDistributionMetric
)
-
>
Self
{
let
histogram
=
match
metric
.
histogram_type
{
HistogramType
:
:
Linear
=
>
Histogram
:
:
<
LinearOrExponential
>
:
:
_linear
(
metric
.
range_min
metric
.
range_max
metric
.
bucket_count
as
usize
)
HistogramType
:
:
Exponential
=
>
Histogram
:
:
<
LinearOrExponential
>
:
:
_exponential
(
metric
.
range_min
metric
.
range_max
metric
.
bucket_count
as
usize
)
}
;
Self
{
histogram
metric
}
}
pub
fn
accumulate
(
&
mut
self
sample
:
u64
)
{
self
.
histogram
.
accumulate
(
sample
)
}
pub
fn
abandon
(
mut
self
)
{
self
.
histogram
.
clear
(
)
;
}
}
impl
Drop
for
LocalCustomDistribution
<
'
_
>
{
fn
drop
(
&
mut
self
)
{
if
self
.
histogram
.
is_empty
(
)
{
return
;
}
let
empty
=
Histogram
:
:
_linear
(
0
0
0
)
;
let
buffer
=
mem
:
:
replace
(
&
mut
self
.
histogram
empty
)
;
self
.
metric
.
commit_histogram
(
buffer
)
;
}
}
