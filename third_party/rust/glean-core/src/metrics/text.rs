use
std
:
:
sync
:
:
Arc
;
use
crate
:
:
common_metric_data
:
:
CommonMetricDataInternal
;
use
crate
:
:
error_recording
:
:
{
test_get_num_recorded_errors
ErrorType
}
;
use
crate
:
:
metrics
:
:
Metric
;
use
crate
:
:
metrics
:
:
MetricType
;
use
crate
:
:
storage
:
:
StorageManager
;
use
crate
:
:
util
:
:
truncate_string_at_boundary_with_error
;
use
crate
:
:
CommonMetricData
;
use
crate
:
:
Glean
;
const
MAX_LENGTH_VALUE
:
usize
=
200
*
1024
;
#
[
derive
(
Clone
Debug
)
]
pub
struct
TextMetric
{
meta
:
Arc
<
CommonMetricDataInternal
>
}
impl
MetricType
for
TextMetric
{
fn
meta
(
&
self
)
-
>
&
CommonMetricDataInternal
{
&
self
.
meta
}
fn
with_name
(
&
self
name
:
String
)
-
>
Self
{
let
mut
meta
=
(
*
self
.
meta
)
.
clone
(
)
;
meta
.
inner
.
name
=
name
;
Self
{
meta
:
Arc
:
:
new
(
meta
)
}
}
fn
with_dynamic_label
(
&
self
label
:
String
)
-
>
Self
{
let
mut
meta
=
(
*
self
.
meta
)
.
clone
(
)
;
meta
.
inner
.
dynamic_label
=
Some
(
label
)
;
Self
{
meta
:
Arc
:
:
new
(
meta
)
}
}
}
impl
TextMetric
{
pub
fn
new
(
meta
:
CommonMetricData
)
-
>
Self
{
Self
{
meta
:
Arc
:
:
new
(
meta
.
into
(
)
)
}
}
pub
fn
set
(
&
self
value
:
String
)
{
let
metric
=
self
.
clone
(
)
;
crate
:
:
launch_with_glean
(
move
|
glean
|
metric
.
set_sync
(
glean
&
value
)
)
}
#
[
doc
(
hidden
)
]
pub
fn
set_sync
<
S
:
Into
<
String
>
>
(
&
self
glean
:
&
Glean
value
:
S
)
{
if
!
self
.
should_record
(
glean
)
{
return
;
}
let
s
=
truncate_string_at_boundary_with_error
(
glean
&
self
.
meta
value
MAX_LENGTH_VALUE
)
;
let
value
=
Metric
:
:
Text
(
s
)
;
glean
.
storage
(
)
.
record
(
glean
&
self
.
meta
&
value
)
}
#
[
doc
(
hidden
)
]
pub
fn
get_value
<
'
a
S
:
Into
<
Option
<
&
'
a
str
>
>
>
(
&
self
glean
:
&
Glean
ping_name
:
S
)
-
>
Option
<
String
>
{
let
queried_ping_name
=
ping_name
.
into
(
)
.
unwrap_or_else
(
|
|
&
self
.
meta
(
)
.
inner
.
send_in_pings
[
0
]
)
;
match
StorageManager
.
snapshot_metric_for_test
(
glean
.
storage
(
)
queried_ping_name
&
self
.
meta
.
identifier
(
glean
)
self
.
meta
.
inner
.
lifetime
)
{
Some
(
Metric
:
:
Text
(
s
)
)
=
>
Some
(
s
)
_
=
>
None
}
}
pub
fn
test_get_value
(
&
self
ping_name
:
Option
<
String
>
)
-
>
Option
<
String
>
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
core
:
:
with_glean
(
|
glean
|
self
.
get_value
(
glean
ping_name
.
as_deref
(
)
)
)
}
pub
fn
test_get_num_recorded_errors
(
&
self
error
:
ErrorType
)
-
>
i32
{
crate
:
:
block_on_dispatcher
(
)
;
crate
:
:
core
:
:
with_glean
(
|
glean
|
{
test_get_num_recorded_errors
(
glean
self
.
meta
(
)
error
)
.
unwrap_or
(
0
)
}
)
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
use
crate
:
:
tests
:
:
new_glean
;
use
crate
:
:
util
:
:
truncate_string_at_boundary
;
use
crate
:
:
Lifetime
;
#
[
test
]
fn
setting_a_long_string_records_an_error
(
)
{
let
(
glean
_t
)
=
new_glean
(
None
)
;
let
metric
=
TextMetric
:
:
new
(
CommonMetricData
{
name
:
"
text_metric
"
.
into
(
)
category
:
"
test
"
.
into
(
)
send_in_pings
:
vec
!
[
"
store1
"
.
into
(
)
]
lifetime
:
Lifetime
:
:
Application
disabled
:
false
dynamic_label
:
None
}
)
;
let
sample_string
=
"
0123456789
"
.
repeat
(
200
*
1024
)
;
metric
.
set_sync
(
&
glean
sample_string
.
clone
(
)
)
;
let
truncated
=
truncate_string_at_boundary
(
sample_string
MAX_LENGTH_VALUE
)
;
assert_eq
!
(
truncated
metric
.
get_value
(
&
glean
"
store1
"
)
.
unwrap
(
)
)
;
assert_eq
!
(
1
test_get_num_recorded_errors
(
&
glean
metric
.
meta
(
)
ErrorType
:
:
InvalidOverflow
)
.
unwrap
(
)
)
;
}
}
