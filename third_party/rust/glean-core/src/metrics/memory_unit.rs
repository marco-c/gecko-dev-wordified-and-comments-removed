use
serde
:
:
{
Deserialize
Serialize
}
;
use
crate
:
:
error
:
:
{
Error
ErrorKind
}
;
#
[
derive
(
Copy
Clone
Debug
Deserialize
Serialize
)
]
#
[
serde
(
rename_all
=
"
lowercase
"
)
]
#
[
repr
(
i32
)
]
pub
enum
MemoryUnit
{
Byte
Kilobyte
Megabyte
Gigabyte
}
impl
MemoryUnit
{
pub
fn
as_bytes
(
self
value
:
u64
)
-
>
u64
{
use
MemoryUnit
:
:
*
;
match
self
{
Byte
=
>
value
Kilobyte
=
>
value
<
<
10
Megabyte
=
>
value
<
<
20
Gigabyte
=
>
value
<
<
30
}
}
}
impl
TryFrom
<
i32
>
for
MemoryUnit
{
type
Error
=
Error
;
fn
try_from
(
value
:
i32
)
-
>
Result
<
MemoryUnit
Self
:
:
Error
>
{
match
value
{
0
=
>
Ok
(
MemoryUnit
:
:
Byte
)
1
=
>
Ok
(
MemoryUnit
:
:
Kilobyte
)
2
=
>
Ok
(
MemoryUnit
:
:
Megabyte
)
3
=
>
Ok
(
MemoryUnit
:
:
Gigabyte
)
e
=
>
Err
(
ErrorKind
:
:
MemoryUnit
(
e
)
.
into
(
)
)
}
}
}
