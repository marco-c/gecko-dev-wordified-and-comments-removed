use
std
:
:
{
collections
:
:
HashMap
convert
:
:
TryFrom
}
;
use
serde
:
:
{
Deserialize
Serialize
}
;
#
[
derive
(
Serialize
Deserialize
Debug
Clone
Default
)
]
pub
struct
MetricsDisabledConfig
{
#
[
serde
(
flatten
)
]
pub
metrics_disabled
:
HashMap
<
String
bool
>
}
impl
MetricsDisabledConfig
{
pub
fn
new
(
)
-
>
Self
{
Default
:
:
default
(
)
}
}
impl
TryFrom
<
String
>
for
MetricsDisabledConfig
{
type
Error
=
crate
:
:
ErrorKind
;
fn
try_from
(
json
:
String
)
-
>
Result
<
Self
Self
:
:
Error
>
{
match
serde_json
:
:
from_str
(
json
.
as_str
(
)
)
{
Ok
(
config
)
=
>
Ok
(
config
)
Err
(
e
)
=
>
Err
(
crate
:
:
ErrorKind
:
:
Json
(
e
)
)
}
}
}
