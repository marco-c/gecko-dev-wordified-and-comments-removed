use
std
:
:
ffi
:
:
OsString
;
use
std
:
:
fmt
:
:
{
self
Display
}
;
use
std
:
:
io
;
use
std
:
:
result
;
use
ffi_support
:
:
{
handle_map
:
:
HandleError
ExternError
}
;
use
rkv
:
:
StoreError
;
pub
type
Result
<
T
>
=
result
:
:
Result
<
T
Error
>
;
#
[
derive
(
Debug
)
]
#
[
non_exhaustive
]
pub
enum
ErrorKind
{
Lifetime
(
i32
)
Handle
(
HandleError
)
IoError
(
io
:
:
Error
)
Rkv
(
StoreError
)
Json
(
serde_json
:
:
error
:
:
Error
)
TimeUnit
(
i32
)
MemoryUnit
(
i32
)
HistogramType
(
i32
)
OsString
(
OsString
)
Utf8Error
InvalidConfig
NotInitialized
PingBodyOverflow
(
usize
)
}
#
[
derive
(
Debug
)
]
pub
struct
Error
{
kind
:
ErrorKind
}
impl
Error
{
pub
fn
utf8_error
(
)
-
>
Error
{
Error
{
kind
:
ErrorKind
:
:
Utf8Error
}
}
pub
fn
not_initialized
(
)
-
>
Error
{
Error
{
kind
:
ErrorKind
:
:
NotInitialized
}
}
pub
fn
kind
(
&
self
)
-
>
&
ErrorKind
{
&
self
.
kind
}
}
impl
std
:
:
error
:
:
Error
for
Error
{
}
impl
Display
for
Error
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
use
ErrorKind
:
:
*
;
match
self
.
kind
(
)
{
Lifetime
(
l
)
=
>
write
!
(
f
"
Lifetime
conversion
from
{
}
failed
"
l
)
Handle
(
e
)
=
>
write
!
(
f
"
Invalid
handle
:
{
}
"
e
)
IoError
(
e
)
=
>
write
!
(
f
"
An
I
/
O
error
occurred
:
{
}
"
e
)
Rkv
(
e
)
=
>
write
!
(
f
"
An
Rkv
error
occurred
:
{
}
"
e
)
Json
(
e
)
=
>
write
!
(
f
"
A
JSON
error
occurred
:
{
}
"
e
)
TimeUnit
(
t
)
=
>
write
!
(
f
"
TimeUnit
conversion
from
{
}
failed
"
t
)
MemoryUnit
(
m
)
=
>
write
!
(
f
"
MemoryUnit
conversion
from
{
}
failed
"
m
)
HistogramType
(
h
)
=
>
write
!
(
f
"
HistogramType
conversion
from
{
}
failed
"
h
)
OsString
(
s
)
=
>
write
!
(
f
"
OsString
conversion
from
{
:
?
}
failed
"
s
)
Utf8Error
=
>
write
!
(
f
"
Invalid
UTF
-
8
byte
sequence
in
string
"
)
InvalidConfig
=
>
write
!
(
f
"
Invalid
Glean
configuration
provided
"
)
NotInitialized
=
>
write
!
(
f
"
Global
Glean
object
missing
"
)
PingBodyOverflow
(
s
)
=
>
write
!
(
f
"
Ping
request
body
size
exceeded
maximum
size
allowed
:
{
}
kB
.
"
s
/
1024
)
}
}
}
impl
From
<
ErrorKind
>
for
Error
{
fn
from
(
kind
:
ErrorKind
)
-
>
Error
{
Error
{
kind
}
}
}
impl
From
<
HandleError
>
for
Error
{
fn
from
(
error
:
HandleError
)
-
>
Error
{
Error
{
kind
:
ErrorKind
:
:
Handle
(
error
)
}
}
}
impl
From
<
io
:
:
Error
>
for
Error
{
fn
from
(
error
:
io
:
:
Error
)
-
>
Error
{
Error
{
kind
:
ErrorKind
:
:
IoError
(
error
)
}
}
}
impl
From
<
StoreError
>
for
Error
{
fn
from
(
error
:
StoreError
)
-
>
Error
{
Error
{
kind
:
ErrorKind
:
:
Rkv
(
error
)
}
}
}
impl
From
<
Error
>
for
ExternError
{
fn
from
(
error
:
Error
)
-
>
ExternError
{
ffi_support
:
:
ExternError
:
:
new_error
(
ffi_support
:
:
ErrorCode
:
:
new
(
42
)
format
!
(
"
{
}
"
error
)
)
}
}
impl
From
<
serde_json
:
:
error
:
:
Error
>
for
Error
{
fn
from
(
error
:
serde_json
:
:
error
:
:
Error
)
-
>
Error
{
Error
{
kind
:
ErrorKind
:
:
Json
(
error
)
}
}
}
impl
From
<
OsString
>
for
Error
{
fn
from
(
error
:
OsString
)
-
>
Error
{
Error
{
kind
:
ErrorKind
:
:
OsString
(
error
)
}
}
}
impl
From
<
std
:
:
convert
:
:
Infallible
>
for
Error
{
fn
from
(
_
:
std
:
:
convert
:
:
Infallible
)
-
>
Error
{
unreachable
!
(
)
}
}
