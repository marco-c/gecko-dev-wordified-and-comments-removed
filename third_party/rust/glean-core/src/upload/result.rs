pub
mod
ffi_upload_result
{
pub
const
UPLOAD_RESULT_RECOVERABLE
:
u32
=
0x1
;
pub
const
UPLOAD_RESULT_UNRECOVERABLE
:
u32
=
0x2
;
pub
const
UPLOAD_RESULT_HTTP_STATUS
:
u32
=
0x8000
;
}
use
ffi_upload_result
:
:
*
;
#
[
derive
(
Debug
)
]
pub
enum
UploadResult
{
RecoverableFailure
UnrecoverableFailure
HttpStatus
(
u32
)
}
impl
From
<
u32
>
for
UploadResult
{
fn
from
(
status
:
u32
)
-
>
Self
{
match
status
{
status
if
(
status
&
UPLOAD_RESULT_HTTP_STATUS
)
=
=
UPLOAD_RESULT_HTTP_STATUS
=
>
{
let
http_status
=
status
&
!
UPLOAD_RESULT_HTTP_STATUS
;
UploadResult
:
:
HttpStatus
(
http_status
)
}
UPLOAD_RESULT_RECOVERABLE
=
>
UploadResult
:
:
RecoverableFailure
UPLOAD_RESULT_UNRECOVERABLE
=
>
UploadResult
:
:
UnrecoverableFailure
_
=
>
UploadResult
:
:
UnrecoverableFailure
}
}
}
impl
UploadResult
{
pub
fn
get_label
(
&
self
)
-
>
Option
<
&
str
>
{
match
self
{
UploadResult
:
:
HttpStatus
(
200
.
.
=
299
)
=
>
None
UploadResult
:
:
HttpStatus
(
400
.
.
=
499
)
=
>
Some
(
"
status_code_4xx
"
)
UploadResult
:
:
HttpStatus
(
500
.
.
=
599
)
=
>
Some
(
"
status_code_5xx
"
)
UploadResult
:
:
HttpStatus
(
_
)
=
>
Some
(
"
status_code_unknown
"
)
UploadResult
:
:
UnrecoverableFailure
=
>
Some
(
"
unrecoverable
"
)
UploadResult
:
:
RecoverableFailure
=
>
Some
(
"
recoverable
"
)
}
}
}
