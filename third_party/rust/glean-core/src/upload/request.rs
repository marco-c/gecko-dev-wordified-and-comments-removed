use
std
:
:
collections
:
:
HashMap
;
use
chrono
:
:
prelude
:
:
{
DateTime
Utc
}
;
use
serde_json
:
:
Value
as
JsonValue
;
#
[
derive
(
PartialEq
Debug
Clone
)
]
pub
struct
PingRequest
{
pub
uuid
:
String
pub
path
:
String
pub
body
:
JsonValue
pub
headers
:
HashMap
<
String
String
>
}
impl
PingRequest
{
pub
fn
new
(
uuid
:
&
str
path
:
&
str
body
:
JsonValue
)
-
>
Self
{
Self
{
uuid
:
uuid
.
into
(
)
path
:
path
.
into
(
)
body
headers
:
Self
:
:
create_request_headers
(
)
}
}
pub
fn
is_deletion_request
(
&
self
)
-
>
bool
{
self
.
path
.
split
(
'
/
'
)
.
nth
(
3
)
.
map
(
|
url
|
url
=
=
"
deletion
-
request
"
)
.
unwrap_or
(
false
)
}
fn
create_request_headers
(
)
-
>
HashMap
<
String
String
>
{
let
mut
headers
=
HashMap
:
:
new
(
)
;
let
date
:
DateTime
<
Utc
>
=
Utc
:
:
now
(
)
;
headers
.
insert
(
"
Date
"
.
to_string
(
)
date
.
to_string
(
)
)
;
headers
.
insert
(
"
X
-
Client
-
Type
"
.
to_string
(
)
"
Glean
"
.
to_string
(
)
)
;
headers
.
insert
(
"
Content
-
Type
"
.
to_string
(
)
"
application
/
json
;
charset
=
utf
-
8
"
.
to_string
(
)
)
;
headers
.
insert
(
"
X
-
Client
-
Version
"
.
to_string
(
)
env
!
(
"
CARGO_PKG_VERSION
"
)
.
to_string
(
)
)
;
headers
}
}
