use
std
:
:
cmp
:
:
Ordering
;
use
std
:
:
fs
:
:
{
self
File
}
;
use
std
:
:
io
:
:
{
BufRead
BufReader
}
;
use
std
:
:
path
:
:
{
Path
PathBuf
}
;
use
serde_json
:
:
Value
as
JsonValue
;
use
uuid
:
:
Uuid
;
use
super
:
:
PingRequest
;
use
crate
:
:
{
DELETION_REQUEST_PINGS_DIRECTORY
PENDING_PINGS_DIRECTORY
}
;
fn
get_file_name_as_str
(
path
:
&
Path
)
-
>
Option
<
&
str
>
{
match
path
.
file_name
(
)
{
None
=
>
{
log
:
:
warn
!
(
"
Error
getting
file
name
from
path
:
{
}
"
path
.
display
(
)
)
;
None
}
Some
(
file_name
)
=
>
{
let
file_name
=
file_name
.
to_str
(
)
;
if
file_name
.
is_none
(
)
{
log
:
:
warn
!
(
"
File
name
is
not
valid
unicode
:
{
}
"
path
.
display
(
)
)
;
}
file_name
}
}
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
PingDirectoryManager
{
pings_dirs
:
[
PathBuf
;
2
]
}
impl
PingDirectoryManager
{
pub
fn
new
<
P
:
Into
<
PathBuf
>
>
(
data_path
:
P
)
-
>
Self
{
let
data_path
=
data_path
.
into
(
)
;
Self
{
pings_dirs
:
[
data_path
.
join
(
PENDING_PINGS_DIRECTORY
)
data_path
.
join
(
DELETION_REQUEST_PINGS_DIRECTORY
)
]
}
}
pub
fn
delete_file
(
&
self
uuid
:
&
str
)
{
let
path
=
match
self
.
get_file_path
(
uuid
)
{
Some
(
path
)
=
>
path
None
=
>
{
log
:
:
error
!
(
"
Cannot
find
ping
file
to
delete
{
}
"
uuid
)
;
return
;
}
}
;
match
fs
:
:
remove_file
(
&
path
)
{
Err
(
e
)
=
>
log
:
:
error
!
(
"
Error
deleting
file
{
}
.
{
}
"
path
.
display
(
)
e
)
_
=
>
log
:
:
info
!
(
"
File
was
deleted
{
}
"
path
.
display
(
)
)
}
;
}
pub
fn
process_file
(
&
self
document_id
:
&
str
)
-
>
Option
<
PingRequest
>
{
let
path
=
match
self
.
get_file_path
(
document_id
)
{
Some
(
path
)
=
>
path
None
=
>
{
log
:
:
error
!
(
"
Cannot
find
ping
file
to
process
{
}
"
document_id
)
;
return
None
;
}
}
;
let
file
=
match
File
:
:
open
(
&
path
)
{
Ok
(
file
)
=
>
file
Err
(
e
)
=
>
{
log
:
:
error
!
(
"
Error
reading
ping
file
{
}
.
{
}
"
path
.
display
(
)
e
)
;
return
None
;
}
}
;
log
:
:
info
!
(
"
Processing
ping
at
:
{
}
"
path
.
display
(
)
)
;
let
mut
lines
=
BufReader
:
:
new
(
file
)
.
lines
(
)
;
if
let
(
Some
(
Ok
(
path
)
)
Some
(
Ok
(
body
)
)
)
=
(
lines
.
next
(
)
lines
.
next
(
)
)
{
if
let
Ok
(
parsed_body
)
=
serde_json
:
:
from_str
:
:
<
JsonValue
>
(
&
body
)
{
return
Some
(
PingRequest
:
:
new
(
document_id
&
path
parsed_body
)
)
;
}
else
{
log
:
:
warn
!
(
"
Error
processing
ping
file
:
{
}
.
Can
'
t
parse
ping
contents
as
JSON
.
"
document_id
)
;
}
}
else
{
log
:
:
warn
!
(
"
Error
processing
ping
file
:
{
}
.
Ping
file
is
not
formatted
as
expected
.
"
document_id
)
;
}
self
.
delete_file
(
document_id
)
;
None
}
pub
fn
process_dir
(
&
self
)
-
>
Vec
<
PingRequest
>
{
log
:
:
info
!
(
"
Processing
persisted
pings
.
"
)
;
let
mut
pending_pings
:
Vec
<
_
>
=
self
.
get_ping_entries
(
)
.
into_iter
(
)
.
filter_map
(
|
entry
|
{
let
path
=
entry
.
path
(
)
;
if
let
Some
(
file_name
)
=
get_file_name_as_str
(
&
path
)
{
if
Uuid
:
:
parse_str
(
file_name
)
.
is_err
(
)
{
log
:
:
warn
!
(
"
Pattern
mismatch
.
Deleting
{
}
"
path
.
display
(
)
)
;
self
.
delete_file
(
file_name
)
;
return
None
;
}
if
let
Some
(
request
)
=
self
.
process_file
(
file_name
)
{
let
modified_date
=
fs
:
:
metadata
(
&
path
)
.
and_then
(
|
data
|
data
.
modified
(
)
)
;
return
Some
(
(
modified_date
request
)
)
;
}
}
;
None
}
)
.
collect
(
)
;
pending_pings
.
sort_by
(
|
(
a
_
)
(
b
_
)
|
{
if
let
(
Ok
(
a
)
Ok
(
b
)
)
=
(
a
b
)
{
a
.
cmp
(
b
)
}
else
{
Ordering
:
:
Less
}
}
)
;
pending_pings
.
into_iter
(
)
.
map
(
|
(
_
request
)
|
request
)
.
collect
(
)
}
fn
get_ping_entries
(
&
self
)
-
>
Vec
<
fs
:
:
DirEntry
>
{
let
mut
result
=
Vec
:
:
new
(
)
;
for
dir
in
&
self
.
pings_dirs
{
if
let
Ok
(
entries
)
=
dir
.
read_dir
(
)
{
result
.
extend
(
entries
.
filter_map
(
|
entry
|
entry
.
ok
(
)
)
)
}
;
}
result
}
fn
get_file_path
(
&
self
document_id
:
&
str
)
-
>
Option
<
PathBuf
>
{
for
dir
in
&
self
.
pings_dirs
{
let
path
=
dir
.
join
(
document_id
)
;
if
path
.
exists
(
)
{
return
Some
(
path
)
;
}
}
None
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
std
:
:
fs
:
:
File
;
use
std
:
:
io
:
:
prelude
:
:
*
;
use
uuid
:
:
Uuid
;
use
super
:
:
*
;
use
crate
:
:
metrics
:
:
PingType
;
use
crate
:
:
tests
:
:
new_glean
;
#
[
test
]
fn
test_doesnt_panic_if_no_pending_pings_directory
(
)
{
let
dir
=
tempfile
:
:
tempdir
(
)
.
unwrap
(
)
;
let
directory_manager
=
PingDirectoryManager
:
:
new
(
dir
.
path
(
)
)
;
assert_eq
!
(
directory_manager
.
process_dir
(
)
.
len
(
)
0
)
;
}
#
[
test
]
fn
test_creates_requests_correctly_from_valid_ping_file
(
)
{
let
(
mut
glean
dir
)
=
new_glean
(
None
)
;
let
ping_type
=
PingType
:
:
new
(
"
test
"
true
true
vec
!
[
]
)
;
glean
.
register_ping_type
(
&
ping_type
)
;
glean
.
submit_ping
(
&
ping_type
None
)
.
unwrap
(
)
;
let
directory_manager
=
PingDirectoryManager
:
:
new
(
dir
.
path
(
)
)
;
let
requests
=
directory_manager
.
process_dir
(
)
;
assert_eq
!
(
requests
.
len
(
)
1
)
;
let
request_ping_type
=
requests
[
0
]
.
path
.
split
(
'
/
'
)
.
nth
(
3
)
.
unwrap
(
)
;
assert_eq
!
(
request_ping_type
"
test
"
)
;
}
#
[
test
]
fn
test_non_uuid_files_are_deleted_and_ignored
(
)
{
let
(
mut
glean
dir
)
=
new_glean
(
None
)
;
let
ping_type
=
PingType
:
:
new
(
"
test
"
true
true
vec
!
[
]
)
;
glean
.
register_ping_type
(
&
ping_type
)
;
glean
.
submit_ping
(
&
ping_type
None
)
.
unwrap
(
)
;
let
directory_manager
=
PingDirectoryManager
:
:
new
(
&
dir
.
path
(
)
)
;
let
not_uuid_path
=
dir
.
path
(
)
.
join
(
PENDING_PINGS_DIRECTORY
)
.
join
(
"
not
-
uuid
-
file
-
name
.
txt
"
)
;
File
:
:
create
(
&
not_uuid_path
)
.
unwrap
(
)
;
let
requests
=
directory_manager
.
process_dir
(
)
;
assert_eq
!
(
requests
.
len
(
)
1
)
;
let
request_ping_type
=
requests
[
0
]
.
path
.
split
(
'
/
'
)
.
nth
(
3
)
.
unwrap
(
)
;
assert_eq
!
(
request_ping_type
"
test
"
)
;
assert
!
(
!
not_uuid_path
.
exists
(
)
)
;
}
#
[
test
]
fn
test_wrongly_formatted_files_are_deleted_and_ignored
(
)
{
let
(
mut
glean
dir
)
=
new_glean
(
None
)
;
let
ping_type
=
PingType
:
:
new
(
"
test
"
true
true
vec
!
[
]
)
;
glean
.
register_ping_type
(
&
ping_type
)
;
glean
.
submit_ping
(
&
ping_type
None
)
.
unwrap
(
)
;
let
directory_manager
=
PingDirectoryManager
:
:
new
(
&
dir
.
path
(
)
)
;
let
wrong_contents_file_path
=
dir
.
path
(
)
.
join
(
PENDING_PINGS_DIRECTORY
)
.
join
(
Uuid
:
:
new_v4
(
)
.
to_string
(
)
)
;
File
:
:
create
(
&
wrong_contents_file_path
)
.
unwrap
(
)
;
let
requests
=
directory_manager
.
process_dir
(
)
;
assert_eq
!
(
requests
.
len
(
)
1
)
;
let
request_ping_type
=
requests
[
0
]
.
path
.
split
(
'
/
'
)
.
nth
(
3
)
.
unwrap
(
)
;
assert_eq
!
(
request_ping_type
"
test
"
)
;
assert
!
(
!
wrong_contents_file_path
.
exists
(
)
)
;
}
#
[
test
]
fn
test_non_json_ping_body_files_are_deleted_and_ignored
(
)
{
let
(
mut
glean
dir
)
=
new_glean
(
None
)
;
let
ping_type
=
PingType
:
:
new
(
"
test
"
true
true
vec
!
[
]
)
;
glean
.
register_ping_type
(
&
ping_type
)
;
glean
.
submit_ping
(
&
ping_type
None
)
.
unwrap
(
)
;
let
directory_manager
=
PingDirectoryManager
:
:
new
(
&
dir
.
path
(
)
)
;
let
non_json_body_file_path
=
dir
.
path
(
)
.
join
(
PENDING_PINGS_DIRECTORY
)
.
join
(
Uuid
:
:
new_v4
(
)
.
to_string
(
)
)
;
let
mut
non_json_body_file
=
File
:
:
create
(
&
non_json_body_file_path
)
.
unwrap
(
)
;
non_json_body_file
.
write_all
(
b
"
https
:
/
/
doc
.
rust
-
lang
.
org
/
std
/
fs
/
struct
.
File
.
html
This
is
not
JSON
!
!
!
!
"
)
.
unwrap
(
)
;
let
requests
=
directory_manager
.
process_dir
(
)
;
assert_eq
!
(
requests
.
len
(
)
1
)
;
let
request_ping_type
=
requests
[
0
]
.
path
.
split
(
'
/
'
)
.
nth
(
3
)
.
unwrap
(
)
;
assert_eq
!
(
request_ping_type
"
test
"
)
;
assert
!
(
!
non_json_body_file_path
.
exists
(
)
)
;
}
#
[
test
]
fn
test_takes_deletion_request_pings_into_account_while_processing
(
)
{
let
(
glean
dir
)
=
new_glean
(
None
)
;
glean
.
internal_pings
.
deletion_request
.
submit
(
&
glean
None
)
.
unwrap
(
)
;
let
directory_manager
=
PingDirectoryManager
:
:
new
(
dir
.
path
(
)
)
;
let
requests
=
directory_manager
.
process_dir
(
)
;
assert_eq
!
(
requests
.
len
(
)
1
)
;
assert
!
(
requests
[
0
]
.
is_deletion_request
(
)
)
;
}
}
