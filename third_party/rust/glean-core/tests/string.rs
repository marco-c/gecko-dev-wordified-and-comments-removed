mod
common
;
use
crate
:
:
common
:
:
*
;
use
serde_json
:
:
json
;
use
glean_core
:
:
metrics
:
:
*
;
use
glean_core
:
:
storage
:
:
StorageManager
;
use
glean_core
:
:
{
test_get_num_recorded_errors
ErrorType
}
;
use
glean_core
:
:
{
CommonMetricData
Glean
Lifetime
}
;
#
[
test
]
fn
string_serializer_should_correctly_serialize_strings
(
)
{
let
(
_t
tmpname
)
=
tempdir
(
)
;
let
cfg
=
glean_core
:
:
Configuration
{
data_path
:
tmpname
application_id
:
GLOBAL_APPLICATION_ID
.
into
(
)
upload_enabled
:
true
max_events
:
None
delay_ping_lifetime_io
:
false
}
;
{
let
glean
=
Glean
:
:
new
(
cfg
.
clone
(
)
)
.
unwrap
(
)
;
let
metric
=
StringMetric
:
:
new
(
CommonMetricData
{
name
:
"
string_metric
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
vec
!
[
"
store1
"
.
into
(
)
]
disabled
:
false
lifetime
:
Lifetime
:
:
User
.
.
Default
:
:
default
(
)
}
)
;
metric
.
set
(
&
glean
"
test_string_value
"
)
;
let
snapshot
=
StorageManager
.
snapshot_as_json
(
glean
.
storage
(
)
"
store1
"
true
)
.
unwrap
(
)
;
assert_eq
!
(
json
!
(
{
"
string
"
:
{
"
telemetry
.
string_metric
"
:
"
test_string_value
"
}
}
)
snapshot
)
;
}
{
let
glean
=
Glean
:
:
new
(
cfg
.
clone
(
)
)
.
unwrap
(
)
;
let
snapshot
=
StorageManager
.
snapshot_as_json
(
glean
.
storage
(
)
"
store1
"
true
)
.
unwrap
(
)
;
assert_eq
!
(
json
!
(
{
"
string
"
:
{
"
telemetry
.
string_metric
"
:
"
test_string_value
"
}
}
)
snapshot
)
;
}
}
#
[
test
]
fn
set_properly_sets_the_value_in_all_stores
(
)
{
let
(
glean
_t
)
=
new_glean
(
)
;
let
store_names
:
Vec
<
String
>
=
vec
!
[
"
store1
"
.
into
(
)
"
store2
"
.
into
(
)
]
;
let
metric
=
StringMetric
:
:
new
(
CommonMetricData
{
name
:
"
string_metric
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
store_names
.
clone
(
)
disabled
:
false
lifetime
:
Lifetime
:
:
Ping
.
.
Default
:
:
default
(
)
}
)
;
metric
.
set
(
&
glean
"
test_string_value
"
)
;
for
store_name
in
store_names
{
let
snapshot
=
StorageManager
.
snapshot_as_json
(
glean
.
storage
(
)
&
store_name
true
)
.
unwrap
(
)
;
assert_eq
!
(
json
!
(
{
"
string
"
:
{
"
telemetry
.
string_metric
"
:
"
test_string_value
"
}
}
)
snapshot
)
;
}
}
#
[
test
]
fn
long_string_values_are_truncated
(
)
{
let
(
glean
_t
)
=
new_glean
(
)
;
let
metric
=
StringMetric
:
:
new
(
CommonMetricData
{
name
:
"
string_metric
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
vec
!
[
"
store1
"
.
into
(
)
]
disabled
:
false
lifetime
:
Lifetime
:
:
Ping
.
.
Default
:
:
default
(
)
}
)
;
let
test_sting
=
"
01234567890
"
.
repeat
(
20
)
;
metric
.
set
(
&
glean
test_sting
.
clone
(
)
)
;
assert_eq
!
(
test_sting
[
.
.
100
]
metric
.
test_get_value
(
&
glean
"
store1
"
)
.
unwrap
(
)
)
;
assert_eq
!
(
Ok
(
1
)
test_get_num_recorded_errors
(
&
glean
metric
.
meta
(
)
ErrorType
:
:
InvalidValue
None
)
)
;
}
