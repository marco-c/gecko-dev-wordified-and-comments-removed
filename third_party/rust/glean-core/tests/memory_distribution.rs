mod
common
;
use
crate
:
:
common
:
:
*
;
use
serde_json
:
:
json
;
use
glean_core
:
:
metrics
:
:
*
;
use
glean_core
:
:
storage
:
:
StorageManager
;
use
glean_core
:
:
{
test_get_num_recorded_errors
ErrorType
}
;
use
glean_core
:
:
{
CommonMetricData
Lifetime
}
;
#
[
test
]
fn
serializer_should_correctly_serialize_memory_distribution
(
)
{
let
(
mut
tempdir
_
)
=
tempdir
(
)
;
let
memory_unit
=
MemoryUnit
:
:
Kilobyte
;
let
kb
=
1024
;
{
let
(
glean
dir
)
=
new_glean
(
Some
(
tempdir
)
)
;
tempdir
=
dir
;
let
metric
=
MemoryDistributionMetric
:
:
new
(
CommonMetricData
{
name
:
"
distribution
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
vec
!
[
"
store1
"
.
into
(
)
]
disabled
:
false
lifetime
:
Lifetime
:
:
Ping
.
.
Default
:
:
default
(
)
}
memory_unit
)
;
metric
.
accumulate_sync
(
&
glean
100_000
)
;
let
snapshot
=
metric
.
get_value
(
&
glean
"
store1
"
)
.
expect
(
"
Value
should
be
stored
"
)
;
assert_eq
!
(
snapshot
.
sum
100_000
*
kb
)
;
}
{
let
(
glean
_t
)
=
new_glean
(
Some
(
tempdir
)
)
;
let
snapshot
=
StorageManager
.
snapshot_as_json
(
glean
.
storage
(
)
"
store1
"
true
)
.
unwrap
(
)
;
let
expected
=
json
!
(
{
"
sum
"
:
100_000
*
kb
"
values
"
:
{
"
99108124
"
:
1
"
103496016
"
:
0
}
}
)
;
assert_eq
!
(
expected
snapshot
[
"
memory_distribution
"
]
[
"
telemetry
.
distribution
"
]
)
;
}
}
#
[
test
]
fn
set_value_properly_sets_the_value_in_all_stores
(
)
{
let
(
glean
_t
)
=
new_glean
(
None
)
;
let
store_names
:
Vec
<
String
>
=
vec
!
[
"
store1
"
.
into
(
)
"
store2
"
.
into
(
)
]
;
let
metric
=
MemoryDistributionMetric
:
:
new
(
CommonMetricData
{
name
:
"
distribution
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
store_names
.
clone
(
)
disabled
:
false
lifetime
:
Lifetime
:
:
Ping
.
.
Default
:
:
default
(
)
}
MemoryUnit
:
:
Byte
)
;
metric
.
accumulate_sync
(
&
glean
100_000
)
;
let
expected
=
json
!
(
{
"
sum
"
:
100_000
"
values
"
:
{
"
96785
"
:
1
"
101070
"
:
0
}
}
)
;
for
store_name
in
store_names
{
let
snapshot
=
StorageManager
.
snapshot_as_json
(
glean
.
storage
(
)
&
store_name
true
)
.
unwrap
(
)
;
assert_eq
!
(
expected
snapshot
[
"
memory_distribution
"
]
[
"
telemetry
.
distribution
"
]
)
;
}
}
#
[
test
]
fn
the_accumulate_samples_api_correctly_stores_memory_values
(
)
{
let
(
glean
_t
)
=
new_glean
(
None
)
;
let
metric
=
MemoryDistributionMetric
:
:
new
(
CommonMetricData
{
name
:
"
distribution
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
vec
!
[
"
store1
"
.
into
(
)
]
disabled
:
false
lifetime
:
Lifetime
:
:
Ping
.
.
Default
:
:
default
(
)
}
MemoryUnit
:
:
Kilobyte
)
;
metric
.
accumulate_samples_sync
(
&
glean
[
1
2
3
]
.
to_vec
(
)
)
;
let
snapshot
=
metric
.
get_value
(
&
glean
"
store1
"
)
.
expect
(
"
Value
should
be
stored
"
)
;
let
kb
=
1024
;
assert_eq
!
(
snapshot
.
sum
6
*
kb
)
;
assert_eq
!
(
1
snapshot
.
values
[
&
1023
]
)
;
assert_eq
!
(
1
snapshot
.
values
[
&
2047
]
)
;
assert_eq
!
(
1
snapshot
.
values
[
&
3024
]
)
;
assert
!
(
test_get_num_recorded_errors
(
&
glean
metric
.
meta
(
)
ErrorType
:
:
InvalidValue
)
.
is_err
(
)
)
;
}
#
[
test
]
fn
the_accumulate_samples_api_correctly_handles_negative_values
(
)
{
let
(
glean
_t
)
=
new_glean
(
None
)
;
let
metric
=
MemoryDistributionMetric
:
:
new
(
CommonMetricData
{
name
:
"
distribution
"
.
into
(
)
category
:
"
telemetry
"
.
into
(
)
send_in_pings
:
vec
!
[
"
store1
"
.
into
(
)
]
disabled
:
false
lifetime
:
Lifetime
:
:
Ping
.
.
Default
:
:
default
(
)
}
MemoryUnit
:
:
Kilobyte
)
;
metric
.
accumulate_samples_sync
(
&
glean
[
-
1
1
2
3
]
.
to_vec
(
)
)
;
let
snapshot
=
metric
.
get_value
(
&
glean
"
store1
"
)
.
expect
(
"
Value
should
be
stored
"
)
;
let
kb
=
1024
;
assert_eq
!
(
snapshot
.
sum
6
*
kb
)
;
assert_eq
!
(
1
snapshot
.
values
[
&
1023
]
)
;
assert_eq
!
(
1
snapshot
.
values
[
&
2047
]
)
;
assert_eq
!
(
1
snapshot
.
values
[
&
3024
]
)
;
assert_eq
!
(
Ok
(
1
)
test_get_num_recorded_errors
(
&
glean
metric
.
meta
(
)
ErrorType
:
:
InvalidValue
)
)
;
}
