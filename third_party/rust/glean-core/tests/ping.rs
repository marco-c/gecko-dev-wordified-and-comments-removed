mod
common
;
use
crate
:
:
common
:
:
*
;
use
glean_core
:
:
metrics
:
:
*
;
use
glean_core
:
:
CommonMetricData
;
use
glean_core
:
:
Lifetime
;
#
[
test
]
fn
write_ping_to_disk
(
)
{
let
(
mut
glean
_temp
)
=
new_glean
(
None
)
;
let
ping
=
PingType
:
:
new
(
"
metrics
"
true
false
vec
!
[
]
)
;
glean
.
register_ping_type
(
&
ping
)
;
let
counter
=
CounterMetric
:
:
new
(
CommonMetricData
{
name
:
"
counter
"
.
into
(
)
category
:
"
local
"
.
into
(
)
send_in_pings
:
vec
!
[
"
metrics
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
)
;
counter
.
add
(
&
glean
1
)
;
assert
!
(
ping
.
submit
(
&
glean
None
)
)
;
assert_eq
!
(
1
get_queued_pings
(
glean
.
get_data_path
(
)
)
.
unwrap
(
)
.
len
(
)
)
;
}
#
[
test
]
fn
disabling_upload_clears_pending_pings
(
)
{
let
(
mut
glean
_
)
=
new_glean
(
None
)
;
let
ping
=
PingType
:
:
new
(
"
metrics
"
true
false
vec
!
[
]
)
;
glean
.
register_ping_type
(
&
ping
)
;
let
counter
=
CounterMetric
:
:
new
(
CommonMetricData
{
name
:
"
counter
"
.
into
(
)
category
:
"
local
"
.
into
(
)
send_in_pings
:
vec
!
[
"
metrics
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
)
;
counter
.
add
(
&
glean
1
)
;
assert
!
(
ping
.
submit
(
&
glean
None
)
)
;
assert_eq
!
(
1
get_queued_pings
(
glean
.
get_data_path
(
)
)
.
unwrap
(
)
.
len
(
)
)
;
assert
!
(
get_deletion_pings
(
glean
.
get_data_path
(
)
)
.
is_err
(
)
)
;
glean
.
set_upload_enabled
(
false
)
;
assert_eq
!
(
0
get_queued_pings
(
glean
.
get_data_path
(
)
)
.
unwrap
(
)
.
len
(
)
)
;
let
dpings
=
get_deletion_pings
(
glean
.
get_data_path
(
)
)
.
unwrap
(
)
;
assert_eq
!
(
1
dpings
.
len
(
)
)
;
let
payload
=
&
dpings
[
0
]
.
1
;
assert_eq
!
(
"
set_upload_enabled
"
payload
[
"
ping_info
"
]
.
as_object
(
)
.
unwrap
(
)
[
"
reason
"
]
.
as_str
(
)
.
unwrap
(
)
)
;
glean
.
set_upload_enabled
(
true
)
;
assert_eq
!
(
0
get_queued_pings
(
glean
.
get_data_path
(
)
)
.
unwrap
(
)
.
len
(
)
)
;
counter
.
add
(
&
glean
1
)
;
assert
!
(
ping
.
submit
(
&
glean
None
)
)
;
assert_eq
!
(
1
get_queued_pings
(
glean
.
get_data_path
(
)
)
.
unwrap
(
)
.
len
(
)
)
;
}
#
[
test
]
fn
deletion_request_only_when_toggled_from_on_to_off
(
)
{
let
(
mut
glean
_
)
=
new_glean
(
None
)
;
glean
.
set_upload_enabled
(
false
)
;
let
dpings
=
get_deletion_pings
(
glean
.
get_data_path
(
)
)
.
unwrap
(
)
;
assert_eq
!
(
1
dpings
.
len
(
)
)
;
let
payload
=
&
dpings
[
0
]
.
1
;
assert_eq
!
(
"
set_upload_enabled
"
payload
[
"
ping_info
"
]
.
as_object
(
)
.
unwrap
(
)
[
"
reason
"
]
.
as_str
(
)
.
unwrap
(
)
)
;
glean
.
set_upload_enabled
(
false
)
;
assert_eq
!
(
1
get_deletion_pings
(
glean
.
get_data_path
(
)
)
.
unwrap
(
)
.
len
(
)
)
;
glean
.
set_upload_enabled
(
true
)
;
assert_eq
!
(
1
get_deletion_pings
(
glean
.
get_data_path
(
)
)
.
unwrap
(
)
.
len
(
)
)
;
}
#
[
test
]
fn
empty_pings_with_flag_are_sent
(
)
{
let
(
mut
glean
_
)
=
new_glean
(
None
)
;
let
ping1
=
PingType
:
:
new
(
"
custom
-
ping1
"
true
true
vec
!
[
]
)
;
glean
.
register_ping_type
(
&
ping1
)
;
let
ping2
=
PingType
:
:
new
(
"
custom
-
ping2
"
true
false
vec
!
[
]
)
;
glean
.
register_ping_type
(
&
ping2
)
;
assert
!
(
ping1
.
submit
(
&
glean
None
)
)
;
assert_eq
!
(
1
get_queued_pings
(
glean
.
get_data_path
(
)
)
.
unwrap
(
)
.
len
(
)
)
;
assert
!
(
!
ping2
.
submit
(
&
glean
None
)
)
;
assert_eq
!
(
1
get_queued_pings
(
glean
.
get_data_path
(
)
)
.
unwrap
(
)
.
len
(
)
)
;
}
#
[
test
]
fn
test_pings_submitted_metric
(
)
{
let
(
mut
glean
_temp
)
=
new_glean
(
None
)
;
let
pings_submitted
=
LabeledMetric
:
:
new
(
CounterMetric
:
:
new
(
CommonMetricData
{
name
:
"
pings_submitted
"
.
into
(
)
category
:
"
glean
.
validation
"
.
into
(
)
send_in_pings
:
vec
!
[
"
metrics
"
.
into
(
)
"
baseline
"
.
into
(
)
]
lifetime
:
Lifetime
:
:
Ping
disabled
:
false
dynamic_label
:
None
}
)
None
)
;
let
metrics_ping
=
PingType
:
:
new
(
"
metrics
"
true
false
vec
!
[
]
)
;
glean
.
register_ping_type
(
&
metrics_ping
)
;
let
baseline_ping
=
PingType
:
:
new
(
"
baseline
"
true
false
vec
!
[
]
)
;
glean
.
register_ping_type
(
&
baseline_ping
)
;
let
counter
=
CounterMetric
:
:
new
(
CommonMetricData
{
name
:
"
counter
"
.
into
(
)
category
:
"
local
"
.
into
(
)
send_in_pings
:
vec
!
[
"
metrics
"
.
into
(
)
]
.
.
Default
:
:
default
(
)
}
)
;
counter
.
add
(
&
glean
1
)
;
assert
!
(
metrics_ping
.
submit
(
&
glean
None
)
)
;
assert_eq
!
(
Some
(
1
)
pings_submitted
.
get
(
"
metrics
"
)
.
test_get_value
(
&
glean
"
metrics
"
)
)
;
assert_eq
!
(
None
pings_submitted
.
get
(
"
baseline
"
)
.
test_get_value
(
&
glean
"
metrics
"
)
)
;
assert_eq
!
(
Some
(
1
)
pings_submitted
.
get
(
"
metrics
"
)
.
test_get_value
(
&
glean
"
baseline
"
)
)
;
assert_eq
!
(
None
pings_submitted
.
get
(
"
baseline
"
)
.
test_get_value
(
&
glean
"
baseline
"
)
)
;
assert
!
(
baseline_ping
.
submit
(
&
glean
None
)
)
;
assert
!
(
baseline_ping
.
submit
(
&
glean
None
)
)
;
assert_eq
!
(
Some
(
1
)
pings_submitted
.
get
(
"
metrics
"
)
.
test_get_value
(
&
glean
"
metrics
"
)
)
;
assert_eq
!
(
Some
(
2
)
pings_submitted
.
get
(
"
baseline
"
)
.
test_get_value
(
&
glean
"
metrics
"
)
)
;
assert_eq
!
(
None
pings_submitted
.
get
(
"
metrics
"
)
.
test_get_value
(
&
glean
"
baseline
"
)
)
;
assert_eq
!
(
Some
(
1
)
pings_submitted
.
get
(
"
baseline
"
)
.
test_get_value
(
&
glean
"
baseline
"
)
)
;
}
