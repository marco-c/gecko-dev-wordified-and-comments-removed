use
std
:
:
fmt
;
pub
struct
BsDebug
<
'
a
>
(
pub
&
'
a
[
u8
]
)
;
impl
<
'
a
>
fmt
:
:
Debug
for
BsDebug
<
'
a
>
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
Result
<
(
)
fmt
:
:
Error
>
{
try
!
(
write
!
(
fmt
"
b
\
"
"
)
)
;
for
&
c
in
self
.
0
{
if
c
=
=
b
'
\
n
'
{
try
!
(
write
!
(
fmt
"
\
\
n
"
)
)
;
}
else
if
c
=
=
b
'
\
r
'
{
try
!
(
write
!
(
fmt
"
\
\
r
"
)
)
;
}
else
if
c
=
=
b
'
\
t
'
{
try
!
(
write
!
(
fmt
"
\
\
t
"
)
)
;
}
else
if
c
=
=
b
'
\
\
'
|
|
c
=
=
b
'
"
'
{
try
!
(
write
!
(
fmt
"
\
\
{
}
"
c
as
char
)
)
;
}
else
if
c
=
=
b
'
\
0
'
{
try
!
(
write
!
(
fmt
"
\
\
0
"
)
)
;
}
else
if
c
>
=
0x20
&
&
c
<
0x7f
{
try
!
(
write
!
(
fmt
"
{
}
"
c
as
char
)
)
;
}
else
{
try
!
(
write
!
(
fmt
"
\
\
x
{
:
02x
}
"
c
)
)
;
}
}
try
!
(
write
!
(
fmt
"
\
"
"
)
)
;
Ok
(
(
)
)
}
}
