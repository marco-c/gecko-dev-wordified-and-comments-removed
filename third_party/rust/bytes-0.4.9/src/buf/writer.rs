use
BufMut
;
use
std
:
:
{
cmp
io
}
;
#
[
derive
(
Debug
)
]
pub
struct
Writer
<
B
>
{
buf
:
B
}
pub
fn
new
<
B
>
(
buf
:
B
)
-
>
Writer
<
B
>
{
Writer
{
buf
:
buf
}
}
impl
<
B
:
BufMut
>
Writer
<
B
>
{
pub
fn
get_ref
(
&
self
)
-
>
&
B
{
&
self
.
buf
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
B
{
&
mut
self
.
buf
}
pub
fn
into_inner
(
self
)
-
>
B
{
self
.
buf
}
}
impl
<
B
:
BufMut
+
Sized
>
io
:
:
Write
for
Writer
<
B
>
{
fn
write
(
&
mut
self
src
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
let
n
=
cmp
:
:
min
(
self
.
buf
.
remaining_mut
(
)
src
.
len
(
)
)
;
self
.
buf
.
put
(
&
src
[
0
.
.
n
]
)
;
Ok
(
n
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
Ok
(
(
)
)
}
}
