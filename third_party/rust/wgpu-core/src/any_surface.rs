use
wgt
:
:
Backend
;
use
crate
:
:
hal_api
:
:
HalApi
;
use
crate
:
:
instance
:
:
HalSurface
;
use
std
:
:
any
:
:
Any
;
use
std
:
:
fmt
;
use
std
:
:
sync
:
:
Arc
;
pub
struct
AnySurface
(
Arc
<
dyn
Any
+
'
static
>
)
;
impl
AnySurface
{
pub
fn
new
<
A
:
HalApi
>
(
surface
:
HalSurface
<
A
>
)
-
>
AnySurface
{
AnySurface
(
Arc
:
:
new
(
surface
)
)
}
pub
fn
backend
(
&
self
)
-
>
Backend
{
#
[
cfg
(
all
(
feature
=
"
vulkan
"
not
(
target_arch
=
"
wasm32
"
)
)
)
]
if
self
.
downcast_ref
:
:
<
hal
:
:
api
:
:
Vulkan
>
(
)
.
is_some
(
)
{
return
Backend
:
:
Vulkan
;
}
#
[
cfg
(
all
(
feature
=
"
metal
"
any
(
target_os
=
"
macos
"
target_os
=
"
ios
"
)
)
)
]
if
self
.
downcast_ref
:
:
<
hal
:
:
api
:
:
Metal
>
(
)
.
is_some
(
)
{
return
Backend
:
:
Metal
;
}
#
[
cfg
(
all
(
feature
=
"
dx12
"
windows
)
)
]
if
self
.
downcast_ref
:
:
<
hal
:
:
api
:
:
Dx12
>
(
)
.
is_some
(
)
{
return
Backend
:
:
Dx12
;
}
#
[
cfg
(
all
(
feature
=
"
dx11
"
windows
)
)
]
if
self
.
downcast_ref
:
:
<
hal
:
:
api
:
:
Dx11
>
(
)
.
is_some
(
)
{
return
Backend
:
:
Dx11
;
}
#
[
cfg
(
feature
=
"
gles
"
)
]
if
self
.
downcast_ref
:
:
<
hal
:
:
api
:
:
Gles
>
(
)
.
is_some
(
)
{
return
Backend
:
:
Gl
;
}
Backend
:
:
Empty
}
pub
fn
downcast_ref
<
A
:
HalApi
>
(
&
self
)
-
>
Option
<
&
HalSurface
<
A
>
>
{
self
.
0
.
downcast_ref
:
:
<
HalSurface
<
A
>
>
(
)
}
pub
fn
take
<
A
:
HalApi
>
(
self
)
-
>
Option
<
Arc
<
HalSurface
<
A
>
>
>
{
if
(
self
.
0
)
.
is
:
:
<
HalSurface
<
A
>
>
(
)
{
let
raw_erased
:
*
const
(
dyn
Any
+
'
static
)
=
Arc
:
:
into_raw
(
self
.
0
)
;
let
raw_typed
:
*
const
HalSurface
<
A
>
=
raw_erased
.
cast
:
:
<
HalSurface
<
A
>
>
(
)
;
let
arc_typed
:
Arc
<
HalSurface
<
A
>
>
=
unsafe
{
Arc
:
:
from_raw
(
raw_typed
)
}
;
Some
(
arc_typed
)
}
else
{
None
}
}
}
impl
fmt
:
:
Debug
for
AnySurface
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
"
AnySurface
"
)
}
}
#
[
cfg
(
any
(
not
(
target_arch
=
"
wasm32
"
)
all
(
feature
=
"
fragile
-
send
-
sync
-
non
-
atomic
-
wasm
"
not
(
target_feature
=
"
atomics
"
)
)
)
)
]
unsafe
impl
Send
for
AnySurface
{
}
#
[
cfg
(
any
(
not
(
target_arch
=
"
wasm32
"
)
all
(
feature
=
"
fragile
-
send
-
sync
-
non
-
atomic
-
wasm
"
not
(
target_feature
=
"
atomics
"
)
)
)
)
]
unsafe
impl
Sync
for
AnySurface
{
}
