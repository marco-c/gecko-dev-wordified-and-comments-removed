use
alloc
:
:
{
boxed
:
:
Box
vec
:
:
Vec
}
;
use
crate
:
:
lock
:
:
{
rank
Mutex
}
;
pub
(
crate
)
struct
CommandAllocator
{
free_encoders
:
Mutex
<
Vec
<
Box
<
dyn
hal
:
:
DynCommandEncoder
>
>
>
}
impl
CommandAllocator
{
pub
(
crate
)
fn
new
(
)
-
>
Self
{
Self
{
free_encoders
:
Mutex
:
:
new
(
rank
:
:
COMMAND_ALLOCATOR_FREE_ENCODERS
Vec
:
:
new
(
)
)
}
}
pub
(
crate
)
fn
acquire_encoder
(
&
self
device
:
&
dyn
hal
:
:
DynDevice
queue
:
&
dyn
hal
:
:
DynQueue
)
-
>
Result
<
Box
<
dyn
hal
:
:
DynCommandEncoder
>
hal
:
:
DeviceError
>
{
let
mut
free_encoders
=
self
.
free_encoders
.
lock
(
)
;
match
free_encoders
.
pop
(
)
{
Some
(
encoder
)
=
>
Ok
(
encoder
)
None
=
>
unsafe
{
let
hal_desc
=
hal
:
:
CommandEncoderDescriptor
{
label
:
None
queue
}
;
device
.
create_command_encoder
(
&
hal_desc
)
}
}
}
pub
(
crate
)
fn
release_encoder
(
&
self
encoder
:
Box
<
dyn
hal
:
:
DynCommandEncoder
>
)
{
let
mut
free_encoders
=
self
.
free_encoders
.
lock
(
)
;
free_encoders
.
push
(
encoder
)
;
}
}
