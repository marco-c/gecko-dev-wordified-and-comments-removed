use
alloc
:
:
{
sync
:
:
Weak
vec
:
:
Vec
}
;
#
[
derive
(
Debug
)
]
pub
(
crate
)
struct
WeakVec
<
T
>
{
inner
:
Vec
<
Weak
<
T
>
>
}
impl
<
T
>
Default
for
WeakVec
<
T
>
{
fn
default
(
)
-
>
Self
{
Self
{
inner
:
Default
:
:
default
(
)
}
}
}
impl
<
T
>
WeakVec
<
T
>
{
pub
(
crate
)
fn
new
(
)
-
>
Self
{
Self
{
inner
:
Vec
:
:
new
(
)
}
}
pub
(
crate
)
fn
push
(
&
mut
self
value
:
Weak
<
T
>
)
{
if
self
.
inner
.
len
(
)
=
=
self
.
inner
.
capacity
(
)
{
for
i
in
(
0
.
.
self
.
inner
.
len
(
)
)
.
rev
(
)
{
if
self
.
inner
[
i
]
.
strong_count
(
)
=
=
0
{
self
.
inner
.
swap_remove
(
i
)
;
}
}
self
.
inner
.
reserve_exact
(
self
.
inner
.
len
(
)
)
;
}
self
.
inner
.
push
(
value
)
;
}
}
pub
(
crate
)
struct
WeakVecIter
<
T
>
{
inner
:
alloc
:
:
vec
:
:
IntoIter
<
Weak
<
T
>
>
}
impl
<
T
>
Iterator
for
WeakVecIter
<
T
>
{
type
Item
=
Weak
<
T
>
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
inner
.
next
(
)
}
}
impl
<
T
>
IntoIterator
for
WeakVec
<
T
>
{
type
Item
=
Weak
<
T
>
;
type
IntoIter
=
WeakVecIter
<
T
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
WeakVecIter
{
inner
:
self
.
inner
.
into_iter
(
)
}
}
}
