pub
(
crate
)
struct
ZipWithProperAdvance
<
A
:
ExactSizeIterator
<
Item
=
IA
>
B
:
ExactSizeIterator
<
Item
=
IB
>
IA
IB
>
{
a
:
A
b
:
B
iter_a_first
:
bool
}
impl
<
A
:
ExactSizeIterator
<
Item
=
IA
>
B
:
ExactSizeIterator
<
Item
=
IB
>
IA
IB
>
ZipWithProperAdvance
<
A
B
IA
IB
>
{
pub
(
crate
)
fn
new
(
a
:
A
b
:
B
)
-
>
Self
{
let
iter_a_first
=
a
.
len
(
)
<
=
b
.
len
(
)
;
Self
{
a
b
iter_a_first
}
}
}
impl
<
A
:
ExactSizeIterator
<
Item
=
IA
>
B
:
ExactSizeIterator
<
Item
=
IB
>
IA
IB
>
Iterator
for
ZipWithProperAdvance
<
A
B
IA
IB
>
{
type
Item
=
(
IA
IB
)
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
if
self
.
iter_a_first
{
let
a
=
self
.
a
.
next
(
)
?
;
let
b
=
self
.
b
.
next
(
)
?
;
Some
(
(
a
b
)
)
}
else
{
let
b
=
self
.
b
.
next
(
)
?
;
let
a
=
self
.
a
.
next
(
)
?
;
Some
(
(
a
b
)
)
}
}
}
impl
<
A
:
ExactSizeIterator
<
Item
=
IA
>
B
:
ExactSizeIterator
<
Item
=
IB
>
IA
IB
>
ExactSizeIterator
for
ZipWithProperAdvance
<
A
B
IA
IB
>
{
fn
len
(
&
self
)
-
>
usize
{
self
.
a
.
len
(
)
.
min
(
self
.
b
.
len
(
)
)
}
}
