use
super
:
:
Device
;
use
crate
:
:
hal_api
:
:
HalApi
;
use
std
:
:
any
:
:
Any
;
use
std
:
:
fmt
;
use
std
:
:
sync
:
:
Arc
;
pub
struct
AnyDevice
(
Arc
<
dyn
Any
+
'
static
>
)
;
impl
AnyDevice
{
pub
fn
new
<
A
:
HalApi
>
(
device
:
Arc
<
Device
<
A
>
>
)
-
>
AnyDevice
{
AnyDevice
(
device
)
}
pub
fn
downcast_ref
<
A
:
HalApi
>
(
&
self
)
-
>
Option
<
&
Device
<
A
>
>
{
self
.
0
.
downcast_ref
:
:
<
Device
<
A
>
>
(
)
}
pub
fn
downcast_clone
<
A
:
HalApi
>
(
&
self
)
-
>
Option
<
Arc
<
Device
<
A
>
>
>
{
if
(
self
.
0
)
.
is
:
:
<
Device
<
A
>
>
(
)
{
let
clone
=
self
.
0
.
clone
(
)
;
let
raw_erased
:
*
const
(
dyn
Any
+
'
static
)
=
Arc
:
:
into_raw
(
clone
)
;
let
raw_typed
:
*
const
Device
<
A
>
=
raw_erased
.
cast
:
:
<
Device
<
A
>
>
(
)
;
let
arc_typed
:
Arc
<
Device
<
A
>
>
=
unsafe
{
Arc
:
:
from_raw
(
raw_typed
)
}
;
Some
(
arc_typed
)
}
else
{
None
}
}
}
impl
fmt
:
:
Debug
for
AnyDevice
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
"
AnyDevice
"
)
}
}
#
[
cfg
(
send_sync
)
]
unsafe
impl
Send
for
AnyDevice
{
}
#
[
cfg
(
send_sync
)
]
unsafe
impl
Sync
for
AnyDevice
{
}
