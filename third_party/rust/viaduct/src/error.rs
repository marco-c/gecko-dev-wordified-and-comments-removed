pub
type
Result
<
T
E
=
ViaductError
>
=
std
:
:
result
:
:
Result
<
T
E
>
;
#
[
derive
(
Debug
thiserror
:
:
Error
uniffi
:
:
Error
)
]
pub
enum
ViaductError
{
#
[
error
(
"
[
no
-
sentry
]
Illegal
characters
in
request
header
'
{
0
}
'
"
)
]
RequestHeaderError
(
String
)
#
[
error
(
"
[
no
-
sentry
]
Backend
error
:
{
0
}
"
)
]
BackendError
(
String
)
#
[
error
(
"
[
no
-
sentry
]
Network
error
:
{
0
}
"
)
]
NetworkError
(
String
)
#
[
error
(
"
The
rust
-
components
network
backend
only
be
initialized
once
!
"
)
]
BackendAlreadyInitialized
#
[
error
(
"
The
rust
-
components
network
backend
must
be
initialized
before
use
!
"
)
]
BackendNotInitialized
#
[
error
(
"
Backend
already
initialized
.
"
)
]
SetBackendError
#
[
error
(
"
[
no
-
sentry
]
URL
Parse
Error
:
{
0
}
"
)
]
UrlError
(
String
)
#
[
error
(
"
[
no
-
sentry
]
Validation
error
:
URL
does
not
use
TLS
protocol
.
"
)
]
NonTlsUrl
}
impl
ViaductError
{
pub
fn
new_backend_error
(
msg
:
impl
Into
<
String
>
)
-
>
Self
{
Self
:
:
BackendError
(
msg
.
into
(
)
)
}
}
impl
From
<
url
:
:
ParseError
>
for
ViaductError
{
fn
from
(
e
:
url
:
:
ParseError
)
-
>
Self
{
ViaductError
:
:
UrlError
(
e
.
to_string
(
)
)
}
}
#
[
derive
(
thiserror
:
:
Error
Debug
Clone
)
]
#
[
error
(
"
Error
:
{
method
}
{
url
}
returned
{
status
}
"
)
]
pub
struct
UnexpectedStatus
{
pub
status
:
u16
pub
method
:
crate
:
:
Method
pub
url
:
url
:
:
Url
}
pub
trait
MapBackendError
{
type
Ok
;
fn
map_backend_error
(
self
)
-
>
Result
<
Self
:
:
Ok
>
;
}
impl
<
T
E
:
ToString
>
MapBackendError
for
std
:
:
result
:
:
Result
<
T
E
>
{
type
Ok
=
T
;
fn
map_backend_error
(
self
)
-
>
Result
<
T
>
{
self
.
map_err
(
|
e
|
ViaductError
:
:
BackendError
(
e
.
to_string
(
)
)
)
}
}
impl
From
<
uniffi
:
:
UnexpectedUniFFICallbackError
>
for
ViaductError
{
fn
from
(
error
:
uniffi
:
:
UnexpectedUniFFICallbackError
)
-
>
Self
{
ViaductError
:
:
BackendError
(
error
.
to_string
(
)
)
}
}
