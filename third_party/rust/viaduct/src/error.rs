use
failure
:
:
Fail
;
#
[
derive
(
Debug
Fail
)
]
pub
enum
Error
{
#
[
fail
(
display
=
"
Illegal
characters
in
request
header
'
{
}
'
"
_0
)
]
RequestHeaderError
(
crate
:
:
HeaderName
)
#
[
fail
(
display
=
"
Backend
error
:
{
}
"
_0
)
]
BackendError
(
String
)
#
[
fail
(
display
=
"
Network
error
:
{
}
"
_0
)
]
NetworkError
(
String
)
#
[
fail
(
display
=
"
The
rust
-
components
network
backend
must
be
initialized
before
use
!
"
)
]
BackendNotInitialized
#
[
fail
(
display
=
"
Backend
already
initialized
.
"
)
]
SetBackendError
#
[
fail
(
display
=
"
URL
Parse
Error
:
{
}
"
_0
)
]
UrlError
(
#
[
fail
(
cause
)
]
url
:
:
ParseError
)
#
[
fail
(
display
=
"
Validation
error
:
URL
does
not
use
TLS
protocol
.
"
)
]
NonTlsUrl
}
impl
From
<
url
:
:
ParseError
>
for
Error
{
fn
from
(
u
:
url
:
:
ParseError
)
-
>
Self
{
Error
:
:
UrlError
(
u
)
}
}
#
[
derive
(
failure
:
:
Fail
Debug
Clone
PartialEq
)
]
#
[
fail
(
display
=
"
Error
:
{
}
{
}
returned
{
}
"
method
url
status
)
]
pub
struct
UnexpectedStatus
{
pub
status
:
u16
pub
method
:
crate
:
:
Method
pub
url
:
url
:
:
Url
}
