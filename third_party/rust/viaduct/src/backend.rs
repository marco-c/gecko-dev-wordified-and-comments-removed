use
crate
:
:
{
info
settings
:
:
validate_request
trace
}
;
use
ffi
:
:
FfiBackend
;
use
once_cell
:
:
sync
:
:
OnceCell
;
mod
ffi
;
pub
fn
note_backend
(
which
:
&
str
)
{
static
NOTE_BACKEND_ONCE
:
std
:
:
sync
:
:
Once
=
std
:
:
sync
:
:
Once
:
:
new
(
)
;
let
mut
called
=
false
;
NOTE_BACKEND_ONCE
.
call_once
(
|
|
{
info
!
(
"
Using
HTTP
backend
{
}
"
which
)
;
called
=
true
;
}
)
;
if
!
called
{
trace
!
(
"
Using
HTTP
backend
{
}
"
which
)
;
}
}
pub
trait
Backend
:
Send
+
Sync
+
'
static
{
fn
send
(
&
self
request
:
crate
:
:
Request
)
-
>
Result
<
crate
:
:
Response
crate
:
:
ViaductError
>
;
}
static
BACKEND
:
OnceCell
<
&
'
static
dyn
Backend
>
=
OnceCell
:
:
new
(
)
;
pub
fn
set_backend
(
b
:
&
'
static
dyn
Backend
)
-
>
Result
<
(
)
crate
:
:
ViaductError
>
{
BACKEND
.
set
(
b
)
.
map_err
(
|
_
|
crate
:
:
error
:
:
ViaductError
:
:
SetBackendError
)
}
pub
(
crate
)
fn
get_backend
(
)
-
>
&
'
static
dyn
Backend
{
*
BACKEND
.
get_or_init
(
|
|
Box
:
:
leak
(
Box
:
:
new
(
FfiBackend
)
)
)
}
pub
fn
send
(
request
:
crate
:
:
Request
)
-
>
Result
<
crate
:
:
Response
crate
:
:
ViaductError
>
{
validate_request
(
&
request
)
?
;
get_backend
(
)
.
send
(
request
)
}
