use
std
:
:
{
error
fmt
}
;
#
[
cfg
(
feature
=
"
serde
"
)
]
use
serde
:
:
{
Deserialize
Serialize
}
;
#
[
derive
(
Clone
Debug
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
Serialize
Deserialize
)
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
rename_all
=
"
snake_case
"
)
)
]
pub
enum
Error
{
OutputTooShort
OutputTooLong
PwdTooShort
PwdTooLong
SaltTooShort
SaltTooLong
AdTooShort
AdTooLong
SecretTooShort
SecretTooLong
TimeTooSmall
TimeTooLarge
MemoryTooLittle
MemoryTooMuch
LanesTooFew
LanesTooMany
IncorrectType
IncorrectVersion
DecodingFail
}
impl
Error
{
fn
msg
(
&
self
)
-
>
&
str
{
match
*
self
{
Error
:
:
OutputTooShort
=
>
"
Output
is
too
short
"
Error
:
:
OutputTooLong
=
>
"
Output
is
too
long
"
Error
:
:
PwdTooShort
=
>
"
Password
is
too
short
"
Error
:
:
PwdTooLong
=
>
"
Password
is
too
long
"
Error
:
:
SaltTooShort
=
>
"
Salt
is
too
short
"
Error
:
:
SaltTooLong
=
>
"
Salt
is
too
long
"
Error
:
:
AdTooShort
=
>
"
Associated
data
is
too
short
"
Error
:
:
AdTooLong
=
>
"
Associated
data
is
too
long
"
Error
:
:
SecretTooShort
=
>
"
Secret
is
too
short
"
Error
:
:
SecretTooLong
=
>
"
Secret
is
too
long
"
Error
:
:
TimeTooSmall
=
>
"
Time
cost
is
too
small
"
Error
:
:
TimeTooLarge
=
>
"
Time
cost
is
too
large
"
Error
:
:
MemoryTooLittle
=
>
"
Memory
cost
is
too
small
"
Error
:
:
MemoryTooMuch
=
>
"
Memory
cost
is
too
large
"
Error
:
:
LanesTooFew
=
>
"
Too
few
lanes
"
Error
:
:
LanesTooMany
=
>
"
Too
many
lanes
"
Error
:
:
IncorrectType
=
>
"
There
is
no
such
type
of
Argon2
"
Error
:
:
IncorrectVersion
=
>
"
There
is
no
such
version
of
Argon2
"
Error
:
:
DecodingFail
=
>
"
Decoding
failed
"
}
}
}
impl
fmt
:
:
Display
for
Error
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
{
}
"
self
.
msg
(
)
)
}
}
impl
error
:
:
Error
for
Error
{
fn
description
(
&
self
)
-
>
&
str
{
self
.
msg
(
)
}
fn
cause
(
&
self
)
-
>
Option
<
&
dyn
error
:
:
Error
>
{
None
}
}
impl
From
<
base64
:
:
DecodeError
>
for
Error
{
fn
from
(
_
:
base64
:
:
DecodeError
)
-
>
Self
{
Error
:
:
DecodingFail
}
}
