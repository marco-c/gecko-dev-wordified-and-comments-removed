use
crate
:
:
common
;
use
crate
:
:
thread_mode
:
:
ThreadMode
;
use
crate
:
:
variant
:
:
Variant
;
use
crate
:
:
version
:
:
Version
;
#
[
derive
(
Clone
Debug
PartialEq
)
]
pub
struct
Config
<
'
a
>
{
pub
ad
:
&
'
a
[
u8
]
pub
hash_length
:
u32
pub
lanes
:
u32
pub
mem_cost
:
u32
pub
secret
:
&
'
a
[
u8
]
pub
thread_mode
:
ThreadMode
pub
time_cost
:
u32
pub
variant
:
Variant
pub
version
:
Version
}
impl
<
'
a
>
Config
<
'
a
>
{
pub
fn
uses_sequential
(
&
self
)
-
>
bool
{
self
.
thread_mode
=
=
ThreadMode
:
:
Sequential
|
|
self
.
lanes
=
=
1
}
}
impl
<
'
a
>
Default
for
Config
<
'
a
>
{
fn
default
(
)
-
>
Config
<
'
a
>
{
Config
{
ad
:
&
[
]
hash_length
:
common
:
:
DEF_HASH_LENGTH
lanes
:
common
:
:
DEF_LANES
mem_cost
:
common
:
:
DEF_MEMORY
secret
:
&
[
]
thread_mode
:
ThreadMode
:
:
default
(
)
time_cost
:
common
:
:
DEF_TIME
variant
:
Variant
:
:
default
(
)
version
:
Version
:
:
default
(
)
}
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
crate
:
:
config
:
:
Config
;
use
crate
:
:
thread_mode
:
:
ThreadMode
;
use
crate
:
:
variant
:
:
Variant
;
use
crate
:
:
version
:
:
Version
;
#
[
test
]
fn
default_returns_correct_instance
(
)
{
let
config
=
Config
:
:
default
(
)
;
assert_eq
!
(
config
.
ad
&
[
]
)
;
assert_eq
!
(
config
.
hash_length
32
)
;
assert_eq
!
(
config
.
lanes
1
)
;
assert_eq
!
(
config
.
mem_cost
4096
)
;
assert_eq
!
(
config
.
secret
&
[
]
)
;
assert_eq
!
(
config
.
thread_mode
ThreadMode
:
:
Sequential
)
;
assert_eq
!
(
config
.
time_cost
3
)
;
assert_eq
!
(
config
.
variant
Variant
:
:
Argon2i
)
;
assert_eq
!
(
config
.
version
Version
:
:
Version13
)
;
}
}
