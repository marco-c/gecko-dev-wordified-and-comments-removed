use
super
:
:
arch
:
:
*
;
use
super
:
:
data
:
:
{
SigAction
Stat
StatVfs
TimeSpec
}
;
use
super
:
:
error
:
:
Result
;
use
super
:
:
number
:
:
*
;
use
core
:
:
{
mem
ptr
}
;
extern
"
C
"
fn
restorer
(
)
-
>
!
{
sigreturn
(
)
.
unwrap
(
)
;
unreachable
!
(
)
;
}
pub
unsafe
fn
brk
(
addr
:
usize
)
-
>
Result
<
usize
>
{
syscall1
(
SYS_BRK
addr
)
}
pub
fn
chdir
<
T
:
AsRef
<
[
u8
]
>
>
(
path
:
T
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_CHDIR
path
.
as_ref
(
)
.
as_ptr
(
)
as
usize
path
.
as_ref
(
)
.
len
(
)
)
}
}
pub
fn
chmod
<
T
:
AsRef
<
[
u8
]
>
>
(
path
:
T
mode
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_CHMOD
path
.
as_ref
(
)
.
as_ptr
(
)
as
usize
path
.
as_ref
(
)
.
len
(
)
mode
)
}
}
pub
unsafe
fn
clone
(
flags
:
usize
)
-
>
Result
<
usize
>
{
syscall1_clobber
(
SYS_CLONE
flags
)
}
pub
fn
close
(
fd
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall1
(
SYS_CLOSE
fd
)
}
}
pub
fn
clock_gettime
(
clock
:
usize
tp
:
&
mut
TimeSpec
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_CLOCK_GETTIME
clock
tp
as
*
mut
TimeSpec
as
usize
)
}
}
pub
fn
dup
(
fd
:
usize
buf
:
&
[
u8
]
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_DUP
fd
buf
.
as_ptr
(
)
as
usize
buf
.
len
(
)
)
}
}
pub
fn
dup2
(
fd
:
usize
newfd
:
usize
buf
:
&
[
u8
]
)
-
>
Result
<
usize
>
{
unsafe
{
syscall4
(
SYS_DUP2
fd
newfd
buf
.
as_ptr
(
)
as
usize
buf
.
len
(
)
)
}
}
pub
fn
execve
<
T
:
AsRef
<
[
u8
]
>
>
(
path
:
T
args
:
&
[
[
usize
;
2
]
]
)
-
>
Result
<
usize
>
{
unsafe
{
syscall4
(
SYS_EXECVE
path
.
as_ref
(
)
.
as_ptr
(
)
as
usize
path
.
as_ref
(
)
.
len
(
)
args
.
as_ptr
(
)
as
usize
args
.
len
(
)
)
}
}
pub
fn
exit
(
status
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall1
(
SYS_EXIT
status
)
}
}
pub
fn
fchmod
(
fd
:
usize
mode
:
u16
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_FCHMOD
fd
mode
as
usize
)
}
}
pub
fn
fchown
(
fd
:
usize
uid
:
u32
gid
:
u32
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_FCHOWN
fd
uid
as
usize
gid
as
usize
)
}
}
pub
fn
fcntl
(
fd
:
usize
cmd
:
usize
arg
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_FCNTL
fd
cmd
arg
)
}
}
pub
fn
fevent
(
fd
:
usize
flags
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_FEVENT
fd
flags
)
}
}
pub
unsafe
fn
fmap
(
fd
:
usize
offset
:
usize
size
:
usize
)
-
>
Result
<
usize
>
{
syscall3
(
SYS_FMAP
fd
offset
size
)
}
pub
unsafe
fn
funmap
(
addr
:
usize
)
-
>
Result
<
usize
>
{
syscall1
(
SYS_FUNMAP
addr
)
}
pub
fn
fpath
(
fd
:
usize
buf
:
&
mut
[
u8
]
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_FPATH
fd
buf
.
as_mut_ptr
(
)
as
usize
buf
.
len
(
)
)
}
}
pub
fn
fstat
(
fd
:
usize
stat
:
&
mut
Stat
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_FSTAT
fd
stat
as
*
mut
Stat
as
usize
mem
:
:
size_of
:
:
<
Stat
>
(
)
)
}
}
pub
fn
fstatvfs
(
fd
:
usize
stat
:
&
mut
StatVfs
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_FSTATVFS
fd
stat
as
*
mut
StatVfs
as
usize
mem
:
:
size_of
:
:
<
StatVfs
>
(
)
)
}
}
pub
fn
fsync
(
fd
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall1
(
SYS_FSYNC
fd
)
}
}
pub
fn
ftruncate
(
fd
:
usize
len
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_FTRUNCATE
fd
len
)
}
}
pub
fn
futimens
(
fd
:
usize
times
:
&
[
TimeSpec
]
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_FUTIMENS
fd
times
.
as_ptr
(
)
as
usize
times
.
len
(
)
*
mem
:
:
size_of
:
:
<
TimeSpec
>
(
)
)
}
}
pub
unsafe
fn
futex
(
addr
:
*
mut
i32
op
:
usize
val
:
i32
val2
:
usize
addr2
:
*
mut
i32
)
-
>
Result
<
usize
>
{
syscall5
(
SYS_FUTEX
addr
as
usize
op
(
val
as
isize
)
as
usize
val2
addr2
as
usize
)
}
pub
fn
getcwd
(
buf
:
&
mut
[
u8
]
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_GETCWD
buf
.
as_mut_ptr
(
)
as
usize
buf
.
len
(
)
)
}
}
pub
fn
getegid
(
)
-
>
Result
<
usize
>
{
unsafe
{
syscall0
(
SYS_GETEGID
)
}
}
pub
fn
getens
(
)
-
>
Result
<
usize
>
{
unsafe
{
syscall0
(
SYS_GETENS
)
}
}
pub
fn
geteuid
(
)
-
>
Result
<
usize
>
{
unsafe
{
syscall0
(
SYS_GETEUID
)
}
}
pub
fn
getgid
(
)
-
>
Result
<
usize
>
{
unsafe
{
syscall0
(
SYS_GETGID
)
}
}
pub
fn
getns
(
)
-
>
Result
<
usize
>
{
unsafe
{
syscall0
(
SYS_GETNS
)
}
}
pub
fn
getpid
(
)
-
>
Result
<
usize
>
{
unsafe
{
syscall0
(
SYS_GETPID
)
}
}
pub
fn
getpgid
(
pid
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall1
(
SYS_GETPGID
pid
)
}
}
pub
fn
getppid
(
)
-
>
Result
<
usize
>
{
unsafe
{
syscall0
(
SYS_GETPPID
)
}
}
pub
fn
getuid
(
)
-
>
Result
<
usize
>
{
unsafe
{
syscall0
(
SYS_GETUID
)
}
}
pub
unsafe
fn
iopl
(
level
:
usize
)
-
>
Result
<
usize
>
{
syscall1
(
SYS_IOPL
level
)
}
pub
fn
kill
(
pid
:
usize
sig
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_KILL
pid
sig
)
}
}
pub
unsafe
fn
link
(
old
:
*
const
u8
new
:
*
const
u8
)
-
>
Result
<
usize
>
{
syscall2
(
SYS_LINK
old
as
usize
new
as
usize
)
}
pub
fn
lseek
(
fd
:
usize
offset
:
isize
whence
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_LSEEK
fd
offset
as
usize
whence
)
}
}
pub
fn
mkns
(
schemes
:
&
[
[
usize
;
2
]
]
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_MKNS
schemes
.
as_ptr
(
)
as
usize
schemes
.
len
(
)
)
}
}
pub
fn
nanosleep
(
req
:
&
TimeSpec
rem
:
&
mut
TimeSpec
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_NANOSLEEP
req
as
*
const
TimeSpec
as
usize
rem
as
*
mut
TimeSpec
as
usize
)
}
}
pub
fn
open
<
T
:
AsRef
<
[
u8
]
>
>
(
path
:
T
flags
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_OPEN
path
.
as_ref
(
)
.
as_ptr
(
)
as
usize
path
.
as_ref
(
)
.
len
(
)
flags
)
}
}
pub
unsafe
fn
physalloc
(
size
:
usize
)
-
>
Result
<
usize
>
{
syscall1
(
SYS_PHYSALLOC
size
)
}
pub
unsafe
fn
physfree
(
physical_address
:
usize
size
:
usize
)
-
>
Result
<
usize
>
{
syscall2
(
SYS_PHYSFREE
physical_address
size
)
}
pub
unsafe
fn
physmap
(
physical_address
:
usize
size
:
usize
flags
:
usize
)
-
>
Result
<
usize
>
{
syscall3
(
SYS_PHYSMAP
physical_address
size
flags
)
}
pub
unsafe
fn
physunmap
(
virtual_address
:
usize
)
-
>
Result
<
usize
>
{
syscall1
(
SYS_PHYSUNMAP
virtual_address
)
}
pub
fn
pipe2
(
fds
:
&
mut
[
usize
;
2
]
flags
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_PIPE2
fds
.
as_ptr
(
)
as
usize
flags
)
}
}
pub
fn
read
(
fd
:
usize
buf
:
&
mut
[
u8
]
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_READ
fd
buf
.
as_mut_ptr
(
)
as
usize
buf
.
len
(
)
)
}
}
pub
fn
rmdir
<
T
:
AsRef
<
[
u8
]
>
>
(
path
:
T
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_RMDIR
path
.
as_ref
(
)
.
as_ptr
(
)
as
usize
path
.
as_ref
(
)
.
len
(
)
)
}
}
pub
fn
setpgid
(
pid
:
usize
pgid
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_SETPGID
pid
pgid
)
}
}
pub
fn
setregid
(
rgid
:
usize
egid
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_SETREGID
rgid
egid
)
}
}
pub
fn
setrens
(
rns
:
usize
ens
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_SETRENS
rns
ens
)
}
}
pub
fn
setreuid
(
ruid
:
usize
euid
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_SETREUID
ruid
euid
)
}
}
pub
fn
sigaction
(
sig
:
usize
act
:
Option
<
&
SigAction
>
oldact
:
Option
<
&
mut
SigAction
>
)
-
>
Result
<
usize
>
{
unsafe
{
syscall4
(
SYS_SIGACTION
sig
act
.
map
(
|
x
|
x
as
*
const
_
)
.
unwrap_or_else
(
ptr
:
:
null
)
as
usize
oldact
.
map
(
|
x
|
x
as
*
mut
_
)
.
unwrap_or_else
(
ptr
:
:
null_mut
)
as
usize
restorer
as
usize
)
}
}
pub
fn
sigreturn
(
)
-
>
Result
<
usize
>
{
unsafe
{
syscall0
(
SYS_SIGRETURN
)
}
}
pub
fn
unlink
<
T
:
AsRef
<
[
u8
]
>
>
(
path
:
T
)
-
>
Result
<
usize
>
{
unsafe
{
syscall2
(
SYS_UNLINK
path
.
as_ref
(
)
.
as_ptr
(
)
as
usize
path
.
as_ref
(
)
.
len
(
)
)
}
}
pub
unsafe
fn
virttophys
(
virtual_address
:
usize
)
-
>
Result
<
usize
>
{
syscall1
(
SYS_VIRTTOPHYS
virtual_address
)
}
pub
fn
waitpid
(
pid
:
usize
status
:
&
mut
usize
options
:
usize
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_WAITPID
pid
status
as
*
mut
usize
as
usize
options
)
}
}
pub
fn
write
(
fd
:
usize
buf
:
&
[
u8
]
)
-
>
Result
<
usize
>
{
unsafe
{
syscall3
(
SYS_WRITE
fd
buf
.
as_ptr
(
)
as
usize
buf
.
len
(
)
)
}
}
pub
fn
sched_yield
(
)
-
>
Result
<
usize
>
{
unsafe
{
syscall0
(
SYS_YIELD
)
}
}
