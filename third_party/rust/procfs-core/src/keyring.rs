use
crate
:
:
{
build_internal_error
expect
from_str
ProcResult
}
;
use
bitflags
:
:
bitflags
;
#
[
cfg
(
feature
=
"
serde1
"
)
]
use
serde
:
:
{
Deserialize
Serialize
}
;
use
std
:
:
{
collections
:
:
HashMap
io
:
:
BufRead
time
:
:
Duration
}
;
bitflags
!
{
/
/
/
Various
key
flags
#
[
cfg_attr
(
feature
=
"
serde1
"
derive
(
Serialize
Deserialize
)
)
]
#
[
derive
(
Copy
Clone
Debug
Hash
Eq
PartialEq
PartialOrd
Ord
)
]
pub
struct
KeyFlags
:
u32
{
/
/
/
The
key
has
been
instantiated
const
INSTANTIATED
=
0x01
;
/
/
/
THe
key
has
been
revoked
const
REVOKED
=
0x02
;
/
/
/
The
key
is
dead
/
/
/
/
/
/
I
.
e
.
the
key
type
has
been
unregistered
.
A
key
may
be
briefly
in
this
state
during
garbage
collection
.
const
DEAD
=
0x04
;
/
/
/
The
key
contributes
to
the
user
'
s
quota
const
QUOTA
=
0x08
;
/
/
/
The
key
is
under
construction
via
a
callback
to
user
space
const
UNDER_CONSTRUCTION
=
0x10
;
/
/
/
The
key
is
negatively
instantiated
const
NEGATIVE
=
0x20
;
/
/
/
The
key
has
been
invalidated
const
INVALID
=
0x40
;
}
}
bitflags
!
{
/
/
/
Bitflags
that
represent
the
permissions
for
a
key
#
[
cfg_attr
(
feature
=
"
serde1
"
derive
(
Serialize
Deserialize
)
)
]
#
[
derive
(
Copy
Clone
Debug
Hash
Eq
PartialEq
PartialOrd
Ord
)
]
pub
struct
PermissionFlags
:
u32
{
/
/
/
The
attributes
of
the
key
may
be
read
/
/
/
/
/
/
This
includes
the
type
description
and
access
rights
(
excluding
the
security
label
)
const
VIEW
=
0x01
;
/
/
/
For
a
key
:
the
payload
of
the
key
may
be
read
.
For
a
keyring
:
the
list
of
serial
numbers
(
keys
)
to
which
the
keyring
has
links
may
be
read
.
const
READ
=
0x02
;
/
/
/
The
payload
of
the
key
may
be
updated
and
the
key
may
be
revoked
.
/
/
/
/
/
/
For
a
keyring
links
may
be
added
to
or
removed
from
the
keyring
and
the
keyring
/
/
/
may
be
cleared
completely
(
all
links
are
removed
)
.
const
WRITE
=
0x04
;
/
/
/
The
key
may
be
found
by
a
search
.
/
/
/
/
/
/
For
keyrings
:
keys
and
keyrings
that
are
linked
to
by
the
keyring
may
be
searched
.
const
SEARCH
=
0x08
;
/
/
/
Links
may
be
created
from
keyrings
to
the
key
.
/
/
/
/
/
/
The
initial
link
to
a
key
that
is
established
when
the
key
is
created
doesn
'
t
require
this
permission
.
const
LINK
=
0x10
;
/
/
/
The
ownership
details
and
security
label
of
the
key
may
be
changed
the
key
'
s
expiration
/
/
/
time
may
be
set
and
the
key
may
be
revoked
.
const
SETATTR
=
0x20
;
const
ALL
=
Self
:
:
VIEW
.
bits
(
)
|
Self
:
:
READ
.
bits
(
)
|
Self
:
:
WRITE
.
bits
(
)
|
Self
:
:
SEARCH
.
bits
(
)
|
Self
:
:
LINK
.
bits
(
)
|
Self
:
:
SETATTR
.
bits
(
)
;
}
}
impl
KeyFlags
{
fn
from_str
(
s
:
&
str
)
-
>
KeyFlags
{
let
mut
me
=
KeyFlags
:
:
empty
(
)
;
let
mut
chars
=
s
.
chars
(
)
;
match
chars
.
next
(
)
{
Some
(
c
)
if
c
=
=
'
I
'
=
>
me
.
insert
(
KeyFlags
:
:
INSTANTIATED
)
_
=
>
{
}
}
match
chars
.
next
(
)
{
Some
(
c
)
if
c
=
=
'
R
'
=
>
me
.
insert
(
KeyFlags
:
:
REVOKED
)
_
=
>
{
}
}
match
chars
.
next
(
)
{
Some
(
c
)
if
c
=
=
'
D
'
=
>
me
.
insert
(
KeyFlags
:
:
DEAD
)
_
=
>
{
}
}
match
chars
.
next
(
)
{
Some
(
c
)
if
c
=
=
'
Q
'
=
>
me
.
insert
(
KeyFlags
:
:
QUOTA
)
_
=
>
{
}
}
match
chars
.
next
(
)
{
Some
(
c
)
if
c
=
=
'
U
'
=
>
me
.
insert
(
KeyFlags
:
:
UNDER_CONSTRUCTION
)
_
=
>
{
}
}
match
chars
.
next
(
)
{
Some
(
c
)
if
c
=
=
'
N
'
=
>
me
.
insert
(
KeyFlags
:
:
NEGATIVE
)
_
=
>
{
}
}
match
chars
.
next
(
)
{
Some
(
c
)
if
c
=
=
'
i
'
=
>
me
.
insert
(
KeyFlags
:
:
INVALID
)
_
=
>
{
}
}
me
}
}
#
[
derive
(
Debug
Clone
)
]
#
[
cfg_attr
(
feature
=
"
serde1
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
Permissions
{
pub
possessor
:
PermissionFlags
pub
user
:
PermissionFlags
pub
group
:
PermissionFlags
pub
other
:
PermissionFlags
}
impl
Permissions
{
fn
from_str
(
s
:
&
str
)
-
>
ProcResult
<
Permissions
>
{
let
possessor
=
PermissionFlags
:
:
from_bits
(
from_str
!
(
u32
&
s
[
0
.
.
2
]
16
)
)
.
ok_or_else
(
|
|
build_internal_error
!
(
format
!
(
"
Unable
to
parse
{
:
?
}
as
PermissionFlags
"
s
)
)
)
?
;
let
user
=
PermissionFlags
:
:
from_bits
(
from_str
!
(
u32
&
s
[
2
.
.
4
]
16
)
)
.
ok_or_else
(
|
|
build_internal_error
!
(
format
!
(
"
Unable
to
parse
{
:
?
}
as
PermissionFlags
"
s
)
)
)
?
;
let
group
=
PermissionFlags
:
:
from_bits
(
from_str
!
(
u32
&
s
[
4
.
.
6
]
16
)
)
.
ok_or_else
(
|
|
build_internal_error
!
(
format
!
(
"
Unable
to
parse
{
:
?
}
as
PermissionFlags
"
s
)
)
)
?
;
let
other
=
PermissionFlags
:
:
from_bits
(
from_str
!
(
u32
&
s
[
6
.
.
8
]
16
)
)
.
ok_or_else
(
|
|
build_internal_error
!
(
format
!
(
"
Unable
to
parse
{
:
?
}
as
PermissionFlags
"
s
)
)
)
?
;
Ok
(
Permissions
{
possessor
user
group
other
}
)
}
}
#
[
derive
(
Debug
Clone
Eq
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
serde1
"
derive
(
Serialize
Deserialize
)
)
]
pub
enum
KeyTimeout
{
Permanent
Expired
Timeout
(
Duration
)
}
impl
KeyTimeout
{
fn
from_str
(
s
:
&
str
)
-
>
ProcResult
<
KeyTimeout
>
{
if
s
=
=
"
perm
"
{
Ok
(
KeyTimeout
:
:
Permanent
)
}
else
if
s
=
=
"
expd
"
{
Ok
(
KeyTimeout
:
:
Expired
)
}
else
{
let
(
val
unit
)
=
s
.
split_at
(
s
.
len
(
)
-
1
)
;
let
val
=
from_str
!
(
u64
val
)
;
match
unit
{
"
s
"
=
>
Ok
(
KeyTimeout
:
:
Timeout
(
Duration
:
:
from_secs
(
val
)
)
)
"
m
"
=
>
Ok
(
KeyTimeout
:
:
Timeout
(
Duration
:
:
from_secs
(
val
*
60
)
)
)
"
h
"
=
>
Ok
(
KeyTimeout
:
:
Timeout
(
Duration
:
:
from_secs
(
val
*
60
*
60
)
)
)
"
d
"
=
>
Ok
(
KeyTimeout
:
:
Timeout
(
Duration
:
:
from_secs
(
val
*
60
*
60
*
24
)
)
)
"
w
"
=
>
Ok
(
KeyTimeout
:
:
Timeout
(
Duration
:
:
from_secs
(
val
*
60
*
60
*
24
*
7
)
)
)
_
=
>
Err
(
build_internal_error
!
(
format
!
(
"
Unable
to
parse
keytimeout
of
{
:
?
}
"
s
)
)
)
}
}
}
}
#
[
derive
(
Debug
Clone
)
]
#
[
cfg_attr
(
feature
=
"
serde1
"
derive
(
Serialize
Deserialize
)
)
]
pub
enum
KeyType
{
User
Keyring
Logon
BigKey
Other
(
String
)
}
impl
KeyType
{
fn
from_str
(
s
:
&
str
)
-
>
KeyType
{
match
s
{
"
keyring
"
=
>
KeyType
:
:
Keyring
"
user
"
=
>
KeyType
:
:
User
"
logon
"
=
>
KeyType
:
:
Logon
"
big_key
"
=
>
KeyType
:
:
BigKey
other
=
>
KeyType
:
:
Other
(
other
.
to_string
(
)
)
}
}
}
#
[
derive
(
Debug
Clone
)
]
#
[
cfg_attr
(
feature
=
"
serde1
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
Key
{
pub
id
:
u64
pub
flags
:
KeyFlags
pub
usage
:
u32
pub
timeout
:
KeyTimeout
pub
permissions
:
Permissions
pub
uid
:
u32
pub
gid
:
Option
<
u32
>
pub
key_type
:
KeyType
pub
description
:
String
}
impl
Key
{
fn
from_line
(
s
:
&
str
)
-
>
ProcResult
<
Key
>
{
let
mut
s
=
s
.
split_whitespace
(
)
;
let
id
=
from_str
!
(
u64
expect
!
(
s
.
next
(
)
)
16
)
;
let
s_flags
=
expect
!
(
s
.
next
(
)
)
;
let
usage
=
from_str
!
(
u32
expect
!
(
s
.
next
(
)
)
)
;
let
s_timeout
=
expect
!
(
s
.
next
(
)
)
;
let
s_perms
=
expect
!
(
s
.
next
(
)
)
;
let
uid
=
from_str
!
(
u32
expect
!
(
s
.
next
(
)
)
)
;
let
s_gid
=
expect
!
(
s
.
next
(
)
)
;
let
s_type
=
expect
!
(
s
.
next
(
)
)
;
let
desc
:
Vec
<
_
>
=
s
.
collect
(
)
;
Ok
(
Key
{
id
flags
:
KeyFlags
:
:
from_str
(
s_flags
)
usage
timeout
:
KeyTimeout
:
:
from_str
(
s_timeout
)
?
permissions
:
Permissions
:
:
from_str
(
s_perms
)
?
uid
gid
:
if
s_gid
=
=
"
-
1
"
{
None
}
else
{
Some
(
from_str
!
(
u32
s_gid
)
)
}
key_type
:
KeyType
:
:
from_str
(
s_type
)
description
:
desc
.
join
(
"
"
)
}
)
}
}
#
[
derive
(
Debug
Clone
)
]
#
[
cfg_attr
(
feature
=
"
serde1
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
Keys
(
pub
Vec
<
Key
>
)
;
impl
crate
:
:
FromBufRead
for
Keys
{
fn
from_buf_read
<
R
:
BufRead
>
(
r
:
R
)
-
>
ProcResult
<
Self
>
{
let
mut
v
=
Vec
:
:
new
(
)
;
for
line
in
r
.
lines
(
)
{
let
line
=
line
?
;
v
.
push
(
Key
:
:
from_line
(
&
line
)
?
)
;
}
Ok
(
Keys
(
v
)
)
}
}
#
[
derive
(
Debug
Clone
)
]
#
[
cfg_attr
(
feature
=
"
serde1
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
KeyUser
{
pub
uid
:
u32
pub
usage
:
u32
pub
nkeys
:
u32
pub
nikeys
:
u32
pub
qnkeys
:
u32
pub
maxkeys
:
u32
pub
qnbytes
:
u32
pub
maxbytes
:
u32
}
impl
KeyUser
{
fn
from_str
(
s
:
&
str
)
-
>
ProcResult
<
KeyUser
>
{
let
mut
s
=
s
.
split_whitespace
(
)
;
let
uid
=
expect
!
(
s
.
next
(
)
)
;
let
usage
=
from_str
!
(
u32
expect
!
(
s
.
next
(
)
)
)
;
let
keys
=
expect
!
(
s
.
next
(
)
)
;
let
qkeys
=
expect
!
(
s
.
next
(
)
)
;
let
qbytes
=
expect
!
(
s
.
next
(
)
)
;
let
(
nkeys
nikeys
)
=
{
let
mut
s
=
keys
.
split
(
'
/
'
)
;
(
from_str
!
(
u32
expect
!
(
s
.
next
(
)
)
)
from_str
!
(
u32
expect
!
(
s
.
next
(
)
)
)
)
}
;
let
(
qnkeys
maxkeys
)
=
{
let
mut
s
=
qkeys
.
split
(
'
/
'
)
;
(
from_str
!
(
u32
expect
!
(
s
.
next
(
)
)
)
from_str
!
(
u32
expect
!
(
s
.
next
(
)
)
)
)
}
;
let
(
qnbytes
maxbytes
)
=
{
let
mut
s
=
qbytes
.
split
(
'
/
'
)
;
(
from_str
!
(
u32
expect
!
(
s
.
next
(
)
)
)
from_str
!
(
u32
expect
!
(
s
.
next
(
)
)
)
)
}
;
Ok
(
KeyUser
{
uid
:
from_str
!
(
u32
&
uid
[
0
.
.
uid
.
len
(
)
-
1
]
)
usage
nkeys
nikeys
qnkeys
maxkeys
qnbytes
maxbytes
}
)
}
}
#
[
derive
(
Debug
Clone
)
]
#
[
cfg_attr
(
feature
=
"
serde1
"
derive
(
Serialize
Deserialize
)
)
]
pub
struct
KeyUsers
(
pub
HashMap
<
u32
KeyUser
>
)
;
impl
crate
:
:
FromBufRead
for
KeyUsers
{
fn
from_buf_read
<
R
:
BufRead
>
(
r
:
R
)
-
>
ProcResult
<
Self
>
{
let
mut
map
=
HashMap
:
:
new
(
)
;
for
line
in
r
.
lines
(
)
{
let
line
=
line
?
;
let
user
=
KeyUser
:
:
from_str
(
&
line
)
?
;
map
.
insert
(
user
.
uid
user
)
;
}
Ok
(
KeyUsers
(
map
)
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
key_flags
(
)
{
assert_eq
!
(
KeyFlags
:
:
from_str
(
"
I
-
-
-
-
-
-
"
)
KeyFlags
:
:
INSTANTIATED
)
;
assert_eq
!
(
KeyFlags
:
:
from_str
(
"
IR
"
)
KeyFlags
:
:
INSTANTIATED
|
KeyFlags
:
:
REVOKED
)
;
assert_eq
!
(
KeyFlags
:
:
from_str
(
"
IRDQUNi
"
)
KeyFlags
:
:
all
(
)
)
;
}
#
[
test
]
fn
timeout
(
)
{
assert_eq
!
(
KeyTimeout
:
:
from_str
(
"
perm
"
)
.
unwrap
(
)
KeyTimeout
:
:
Permanent
)
;
assert_eq
!
(
KeyTimeout
:
:
from_str
(
"
expd
"
)
.
unwrap
(
)
KeyTimeout
:
:
Expired
)
;
assert_eq
!
(
KeyTimeout
:
:
from_str
(
"
2w
"
)
.
unwrap
(
)
KeyTimeout
:
:
Timeout
(
Duration
:
:
from_secs
(
1209600
)
)
)
;
assert_eq
!
(
KeyTimeout
:
:
from_str
(
"
14d
"
)
.
unwrap
(
)
KeyTimeout
:
:
Timeout
(
Duration
:
:
from_secs
(
1209600
)
)
)
;
assert_eq
!
(
KeyTimeout
:
:
from_str
(
"
336h
"
)
.
unwrap
(
)
KeyTimeout
:
:
Timeout
(
Duration
:
:
from_secs
(
1209600
)
)
)
;
assert_eq
!
(
KeyTimeout
:
:
from_str
(
"
20160m
"
)
.
unwrap
(
)
KeyTimeout
:
:
Timeout
(
Duration
:
:
from_secs
(
1209600
)
)
)
;
assert_eq
!
(
KeyTimeout
:
:
from_str
(
"
1209600s
"
)
.
unwrap
(
)
KeyTimeout
:
:
Timeout
(
Duration
:
:
from_secs
(
1209600
)
)
)
;
}
}
