#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
cfg_attr
(
docsrs
feature
(
doc_cfg
)
)
]
pub
mod
additional_attributes
;
use
core
:
:
iter
:
:
FusedIterator
;
#
[
cfg
(
feature
=
"
phf
"
)
]
#
[
doc
(
hidden
)
]
pub
use
phf
as
_private_phf_reexport_for_macro_if_phf_feature
;
#
[
derive
(
Debug
Clone
Copy
Eq
PartialEq
Hash
)
]
pub
enum
ParseError
{
VariantNotFound
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
std
:
:
fmt
:
:
Display
for
ParseError
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
)
-
>
Result
<
(
)
std
:
:
fmt
:
:
Error
>
{
match
self
{
ParseError
:
:
VariantNotFound
=
>
write
!
(
f
"
Matching
variant
not
found
"
)
}
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
std
:
:
error
:
:
Error
for
ParseError
{
fn
description
(
&
self
)
-
>
&
str
{
match
self
{
ParseError
:
:
VariantNotFound
=
>
{
"
Unable
to
find
a
variant
of
the
given
enum
matching
the
string
given
.
Matching
\
can
be
extended
with
the
Serialize
attribute
and
is
case
sensitive
.
"
}
}
}
}
pub
trait
IntoEnumIterator
:
Sized
{
type
Iterator
:
Iterator
<
Item
=
Self
>
+
Clone
+
DoubleEndedIterator
+
ExactSizeIterator
+
FusedIterator
;
fn
iter
(
)
-
>
Self
:
:
Iterator
;
}
pub
trait
VariantIterator
:
Sized
{
type
Iterator
:
Iterator
<
Item
=
Self
>
;
fn
iter
(
)
-
>
Self
:
:
Iterator
;
}
pub
trait
VariantMetadata
{
const
VARIANT_COUNT
:
usize
;
const
VARIANT_NAMES
:
&
'
static
[
&
'
static
str
]
;
fn
variant_name
(
&
self
)
-
>
&
'
static
str
;
}
pub
trait
EnumMessage
{
fn
get_message
(
&
self
)
-
>
Option
<
&
'
static
str
>
;
fn
get_detailed_message
(
&
self
)
-
>
Option
<
&
'
static
str
>
;
fn
get_documentation
(
&
self
)
-
>
Option
<
&
'
static
str
>
;
fn
get_serializations
(
&
self
)
-
>
&
'
static
[
&
'
static
str
]
;
}
pub
trait
EnumProperty
{
fn
get_str
(
&
self
prop
:
&
str
)
-
>
Option
<
&
'
static
str
>
;
fn
get_int
(
&
self
_prop
:
&
str
)
-
>
Option
<
i64
>
;
fn
get_bool
(
&
self
_prop
:
&
str
)
-
>
Option
<
bool
>
;
}
#
[
deprecated
(
since
=
"
0
.
22
.
0
"
note
=
"
please
use
#
[
derive
(
IntoStaticStr
)
]
instead
"
)
]
pub
trait
AsStaticRef
<
T
>
where
T
:
?
Sized
{
fn
as_static
(
&
self
)
-
>
&
'
static
T
;
}
pub
trait
EnumCount
{
const
COUNT
:
usize
;
}
pub
trait
VariantNames
{
const
VARIANTS
:
&
'
static
[
&
'
static
str
]
;
}
pub
trait
IntoDiscriminant
{
type
Discriminant
;
fn
discriminant
(
&
self
)
-
>
Self
:
:
Discriminant
;
}
pub
trait
VariantArray
:
:
:
core
:
:
marker
:
:
Sized
+
'
static
{
const
VARIANTS
:
&
'
static
[
Self
]
;
}
#
[
cfg
(
feature
=
"
derive
"
)
]
pub
use
strum_macros
:
:
*
;
macro_rules
!
DocumentMacroRexports
{
(
(
export
:
ident
)
+
)
=
>
{
(
#
[
cfg
(
all
(
docsrs
feature
=
"
derive
"
)
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
derive
"
)
)
)
]
pub
use
strum_macros
:
:
export
;
)
+
}
;
}
DocumentMacroRexports
!
{
AsRefStr
Display
EnumCount
EnumDiscriminants
EnumIter
EnumMessage
EnumProperty
EnumString
VariantNames
FromRepr
IntoStaticStr
VariantArray
}
