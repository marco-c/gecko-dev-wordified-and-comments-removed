from
jsparagus
import
runtime
from
jsparagus
.
runtime
import
Nt
ErrorToken
actions
=
[
    
{
'
nt
'
:
1
'
goal
'
:
2
'
token
'
:
3
'
var
'
:
4
}
    
{
'
IDENT
'
:
10
}
    
{
'
nt
'
:
11
}
    
{
'
IDENT
'
:
12
}
    
{
'
token
'
:
13
}
    
{
None
:
-
4611686018427387905
}
    
{
'
nt
'
:
1
'
goal
'
:
2
None
:
-
1
}
    
{
'
token
'
:
3
'
var
'
:
4
'
nt
'
:
1
'
goal
'
:
2
}
    
{
None
:
-
5
'
nt
'
:
-
5
'
goal
'
:
-
5
}
    
{
'
nt
'
:
-
3
'
goal
'
:
-
3
'
token
'
:
-
3
'
var
'
:
-
3
}
    
{
'
{
'
:
17
}
    
{
'
IDENT
'
:
18
}
    
{
'
=
'
:
19
}
    
{
'
IDENT
'
:
20
}
    
{
None
:
-
6
'
nt
'
:
-
6
'
goal
'
:
-
6
}
    
{
'
nt
'
:
1
'
goal
'
:
2
None
:
-
2
}
    
{
'
nt
'
:
-
4
'
goal
'
:
-
4
'
token
'
:
-
4
'
var
'
:
-
4
}
    
{
'
}
'
:
21
'
IDENT
'
:
22
'
STR
'
:
23
}
    
{
'
{
'
:
29
}
    
{
'
STR
'
:
30
}
    
{
'
;
'
:
31
}
    
{
None
:
-
9
'
nt
'
:
-
9
'
goal
'
:
-
9
}
    
{
'
;
'
:
-
27
'
?
'
:
-
27
'
=
>
'
:
-
27
'
IDENT
'
:
-
27
'
STR
'
:
-
27
}
    
{
'
;
'
:
-
28
'
?
'
:
-
28
'
=
>
'
:
-
28
'
IDENT
'
:
-
28
'
STR
'
:
-
28
}
    
{
'
}
'
:
32
'
IDENT
'
:
22
'
STR
'
:
23
}
    
{
'
}
'
:
-
13
'
IDENT
'
:
-
13
'
STR
'
:
-
13
}
    
{
'
;
'
:
34
'
=
>
'
:
35
'
IDENT
'
:
22
'
STR
'
:
23
}
    
{
'
;
'
:
-
17
'
=
>
'
:
-
17
'
IDENT
'
:
-
17
'
STR
'
:
-
17
}
    
{
'
?
'
:
38
'
;
'
:
-
20
'
=
>
'
:
-
20
'
IDENT
'
:
-
20
'
STR
'
:
-
20
}
    
{
'
}
'
:
39
'
IDENT
'
:
22
'
STR
'
:
23
}
    
{
'
;
'
:
41
}
    
{
'
nt
'
:
-
8
'
goal
'
:
-
8
'
token
'
:
-
8
'
var
'
:
-
8
}
    
{
None
:
-
11
'
nt
'
:
-
11
'
goal
'
:
-
11
}
    
{
'
}
'
:
-
14
'
IDENT
'
:
-
14
'
STR
'
:
-
14
}
    
{
'
}
'
:
-
15
'
IDENT
'
:
-
15
'
STR
'
:
-
15
}
    
{
'
MATCH
'
:
42
'
IDENT
'
:
43
'
Some
'
:
44
'
None
'
:
45
}
    
{
'
;
'
:
47
}
    
{
'
;
'
:
-
18
'
=
>
'
:
-
18
'
IDENT
'
:
-
18
'
STR
'
:
-
18
}
    
{
'
;
'
:
-
21
'
=
>
'
:
-
21
'
IDENT
'
:
-
21
'
STR
'
:
-
21
}
    
{
None
:
-
10
'
nt
'
:
-
10
'
goal
'
:
-
10
}
    
{
'
}
'
:
48
'
IDENT
'
:
22
'
STR
'
:
23
}
    
{
'
nt
'
:
-
7
'
goal
'
:
-
7
'
token
'
:
-
7
'
var
'
:
-
7
}
    
{
'
;
'
:
-
22
'
)
'
:
-
22
'
'
:
-
22
}
    
{
'
(
'
:
49
}
    
{
'
(
'
:
50
}
    
{
'
;
'
:
-
26
'
)
'
:
-
26
'
'
:
-
26
}
    
{
'
;
'
:
-
19
}
    
{
'
}
'
:
-
16
'
IDENT
'
:
-
16
'
STR
'
:
-
16
}
    
{
None
:
-
12
'
nt
'
:
-
12
'
goal
'
:
-
12
}
    
{
'
)
'
:
51
'
MATCH
'
:
42
'
IDENT
'
:
43
'
Some
'
:
44
'
None
'
:
45
}
    
{
'
MATCH
'
:
42
'
IDENT
'
:
43
'
Some
'
:
44
'
None
'
:
45
}
    
{
'
;
'
:
-
23
'
)
'
:
-
23
'
'
:
-
23
}
    
{
'
)
'
:
55
'
'
:
56
}
    
{
'
)
'
:
-
29
'
'
:
-
29
}
    
{
'
)
'
:
57
}
    
{
'
;
'
:
-
24
'
)
'
:
-
24
'
'
:
-
24
}
    
{
'
MATCH
'
:
42
'
IDENT
'
:
43
'
Some
'
:
44
'
None
'
:
45
}
    
{
'
;
'
:
-
25
'
)
'
:
-
25
'
'
:
-
25
}
    
{
'
)
'
:
-
30
'
'
:
-
30
}
]
ctns
=
[
    
{
'
grammar
'
:
5
'
nt_defs
'
:
6
'
token_defs
'
:
7
'
nt_def
'
:
8
'
token_def
'
:
9
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
'
nt_def
'
:
14
}
    
{
'
nt_defs
'
:
15
'
token_def
'
:
16
'
nt_def
'
:
8
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
'
nt_def
'
:
14
}
    
{
}
    
{
'
prods
'
:
24
'
prod
'
:
25
'
terms
'
:
26
'
term
'
:
27
'
symbol
'
:
28
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
'
prod
'
:
33
'
terms
'
:
26
'
term
'
:
27
'
symbol
'
:
28
}
    
{
}
    
{
'
reducer
'
:
36
'
term
'
:
37
'
symbol
'
:
28
}
    
{
}
    
{
}
    
{
'
prods
'
:
40
'
prod
'
:
25
'
terms
'
:
26
'
term
'
:
27
'
symbol
'
:
28
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
'
expr
'
:
46
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
'
prod
'
:
33
'
terms
'
:
26
'
term
'
:
27
'
symbol
'
:
28
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
'
expr_args
'
:
52
'
expr
'
:
53
}
    
{
'
expr
'
:
54
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
}
    
{
'
expr
'
:
58
}
    
{
}
    
{
}
]
special_cases
=
[
]
error_codes
=
[
    
None
None
None
None
None
None
None
None
None
None
None
None
None
None
None
None
    
None
None
None
None
None
None
None
None
None
None
None
None
None
None
None
None
    
None
None
None
None
None
None
None
None
None
None
None
None
None
None
None
None
    
None
None
None
None
None
None
None
None
None
None
None
]
reductions
=
[
    
(
'
grammar
'
1
lambda
builder
x0
:
builder
.
grammar
(
None
x0
)
)
    
(
'
grammar
'
2
lambda
builder
x0
x1
:
builder
.
grammar
(
x0
x1
)
)
    
(
'
token_defs
'
1
lambda
builder
x0
:
builder
.
single
(
x0
)
)
    
(
'
token_defs
'
2
lambda
builder
x0
x1
:
builder
.
append
(
x0
x1
)
)
    
(
'
nt_defs
'
1
lambda
builder
x0
:
builder
.
nt_defs_single
(
x0
)
)
    
(
'
nt_defs
'
2
lambda
builder
x0
x1
:
builder
.
nt_defs_append
(
x0
x1
)
)
    
(
'
token_def
'
5
lambda
builder
x0
x1
x2
x3
x4
:
builder
.
const_token
(
x1
x3
)
)
    
(
'
token_def
'
4
lambda
builder
x0
x1
x2
x3
:
builder
.
var_token
(
x2
)
)
    
(
'
nt_def
'
4
lambda
builder
x0
x1
x2
x3
:
builder
.
nt_def
(
None
x1
None
)
)
    
(
'
nt_def
'
5
lambda
builder
x0
x1
x2
x3
x4
:
builder
.
nt_def
(
x0
x2
None
)
)
    
(
'
nt_def
'
5
lambda
builder
x0
x1
x2
x3
x4
:
builder
.
nt_def
(
None
x1
x3
)
)
    
(
'
nt_def
'
6
lambda
builder
x0
x1
x2
x3
x4
x5
:
builder
.
nt_def
(
x0
x2
x4
)
)
    
(
'
prods
'
1
lambda
builder
x0
:
builder
.
single
(
x0
)
)
    
(
'
prods
'
2
lambda
builder
x0
x1
:
builder
.
append
(
x0
x1
)
)
    
(
'
prod
'
2
lambda
builder
x0
x1
:
builder
.
prod
(
x0
None
)
)
    
(
'
prod
'
3
lambda
builder
x0
x1
x2
:
builder
.
prod
(
x0
x1
)
)
    
(
'
terms
'
1
lambda
builder
x0
:
builder
.
single
(
x0
)
)
    
(
'
terms
'
2
lambda
builder
x0
x1
:
builder
.
append
(
x0
x1
)
)
    
(
'
reducer
'
2
lambda
builder
x0
x1
:
x1
)
    
(
'
term
'
1
lambda
builder
x0
:
x0
)
    
(
'
term
'
2
lambda
builder
x0
x1
:
builder
.
optional
(
x0
)
)
    
(
'
expr
'
1
lambda
builder
x0
:
builder
.
expr_match
(
x0
)
)
    
(
'
expr
'
3
lambda
builder
x0
x1
x2
:
builder
.
expr_call
(
x0
None
)
)
    
(
'
expr
'
4
lambda
builder
x0
x1
x2
x3
:
builder
.
expr_call
(
x0
x2
)
)
    
(
'
expr
'
4
lambda
builder
x0
x1
x2
x3
:
builder
.
expr_some
(
x2
)
)
    
(
'
expr
'
1
lambda
builder
x0
:
builder
.
expr_none
(
)
)
    
(
'
symbol
'
1
lambda
builder
x0
:
builder
.
ident
(
x0
)
)
    
(
'
symbol
'
1
lambda
builder
x0
:
builder
.
str
(
x0
)
)
    
(
'
expr_args
'
1
lambda
builder
x0
:
builder
.
args_single
(
x0
)
)
    
(
'
expr_args
'
3
lambda
builder
x0
x1
x2
:
builder
.
args_append
(
x0
x2
)
)
]
class
DefaultBuilder
:
    
def
grammar
(
self
x0
x1
)
:
return
(
'
grammar
'
x0
x1
)
    
def
single
(
self
x0
)
:
return
(
'
single
'
x0
)
    
def
append
(
self
x0
x1
)
:
return
(
'
append
'
x0
x1
)
    
def
const_token
(
self
x0
x1
)
:
return
(
'
const_token
'
x0
x1
)
    
def
var_token
(
self
x0
)
:
return
(
'
var_token
'
x0
)
    
def
nt_defs_single
(
self
x0
)
:
return
(
'
nt_defs_single
'
x0
)
    
def
nt_defs_append
(
self
x0
x1
)
:
return
(
'
nt_defs_append
'
x0
x1
)
    
def
nt_def
(
self
x0
x1
x2
)
:
return
(
'
nt_def
'
x0
x1
x2
)
    
def
prod
(
self
x0
x1
)
:
return
(
'
prod
'
x0
x1
)
    
def
optional
(
self
x0
)
:
return
(
'
optional
'
x0
)
    
def
ident
(
self
x0
)
:
return
(
'
ident
'
x0
)
    
def
str
(
self
x0
)
:
return
(
'
str
'
x0
)
    
def
expr_match
(
self
x0
)
:
return
(
'
expr_match
'
x0
)
    
def
expr_call
(
self
x0
x1
)
:
return
(
'
expr_call
'
x0
x1
)
    
def
expr_some
(
self
x0
)
:
return
(
'
expr_some
'
x0
)
    
def
expr_none
(
self
)
:
return
(
'
expr_none
'
)
    
def
args_single
(
self
x0
)
:
return
(
'
args_single
'
x0
)
    
def
args_append
(
self
x0
x1
)
:
return
(
'
args_append
'
x0
x1
)
goal_nt_to_init_state
=
{
    
'
grammar
'
:
0
}
class
Parser
(
runtime
.
Parser
)
:
    
def
__init__
(
self
goal
=
'
grammar
'
builder
=
None
)
:
        
if
builder
is
None
:
            
builder
=
DefaultBuilder
(
)
        
super
(
)
.
__init__
(
actions
ctns
reductions
special_cases
error_codes
                         
goal_nt_to_init_state
[
goal
]
builder
)
