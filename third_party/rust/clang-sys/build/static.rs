extern
crate
glob
;
use
std
:
:
path
:
:
{
Path
PathBuf
}
;
use
common
;
fn
get_library_name
(
path
:
&
Path
)
-
>
Option
<
String
>
{
path
.
file_stem
(
)
.
map
(
|
p
|
{
let
string
=
p
.
to_string_lossy
(
)
;
if
string
.
starts_with
(
"
lib
"
)
{
string
[
3
.
.
]
.
to_owned
(
)
}
else
{
string
.
to_string
(
)
}
}
)
}
fn
get_llvm_libraries
(
)
-
>
Vec
<
String
>
{
common
:
:
run_llvm_config
(
&
[
"
-
-
libs
"
]
)
.
unwrap
(
)
.
split_whitespace
(
)
.
filter_map
(
|
p
|
{
if
p
.
starts_with
(
"
-
l
"
)
{
Some
(
p
[
2
.
.
]
.
into
(
)
)
}
else
{
get_library_name
(
Path
:
:
new
(
p
)
)
}
}
)
.
collect
(
)
}
const
CLANG_LIBRARIES
:
&
[
&
str
]
=
&
[
"
clang
"
"
clangAST
"
"
clangAnalysis
"
"
clangBasic
"
"
clangDriver
"
"
clangEdit
"
"
clangFrontend
"
"
clangIndex
"
"
clangLex
"
"
clangParse
"
"
clangRewrite
"
"
clangSema
"
"
clangSerialization
"
]
;
fn
get_clang_libraries
<
P
:
AsRef
<
Path
>
>
(
directory
:
P
)
-
>
Vec
<
String
>
{
let
pattern
=
directory
.
as_ref
(
)
.
join
(
"
libclang
*
.
a
"
)
.
to_string_lossy
(
)
.
to_string
(
)
;
if
let
Ok
(
libraries
)
=
glob
:
:
glob
(
&
pattern
)
{
libraries
.
filter_map
(
|
l
|
l
.
ok
(
)
.
and_then
(
|
l
|
get_library_name
(
&
l
)
)
)
.
collect
(
)
}
else
{
CLANG_LIBRARIES
.
iter
(
)
.
map
(
|
l
|
(
*
l
)
.
to_string
(
)
)
.
collect
(
)
}
}
fn
find
(
)
-
>
PathBuf
{
let
name
=
if
cfg
!
(
target_os
=
"
windows
"
)
{
"
libclang
.
lib
"
}
else
{
"
libclang
.
a
"
}
;
let
files
=
common
:
:
search_libclang_directories
(
&
[
name
.
into
(
)
]
"
LIBCLANG_STATIC_PATH
"
)
;
if
let
Some
(
(
directory
_
)
)
=
files
.
into_iter
(
)
.
nth
(
0
)
{
directory
}
else
{
panic
!
(
"
could
not
find
any
static
libraries
"
)
;
}
}
pub
fn
link
(
)
{
let
directory
=
find
(
)
;
println
!
(
"
cargo
:
rustc
-
link
-
search
=
native
=
{
}
"
directory
.
display
(
)
)
;
for
library
in
get_clang_libraries
(
directory
)
{
println
!
(
"
cargo
:
rustc
-
link
-
lib
=
static
=
{
}
"
library
)
;
}
let
mode
=
common
:
:
run_llvm_config
(
&
[
"
-
-
shared
-
mode
"
]
)
.
map
(
|
m
|
m
.
trim
(
)
.
to_owned
(
)
)
;
let
prefix
=
if
mode
.
map_or
(
false
|
m
|
m
=
=
"
static
"
)
{
"
static
=
"
}
else
{
"
"
}
;
println
!
(
"
cargo
:
rustc
-
link
-
search
=
native
=
{
}
"
common
:
:
run_llvm_config
(
&
[
"
-
-
libdir
"
]
)
.
unwrap
(
)
.
trim_end
(
)
)
;
for
library
in
get_llvm_libraries
(
)
{
println
!
(
"
cargo
:
rustc
-
link
-
lib
=
{
}
{
}
"
prefix
library
)
;
}
if
cfg
!
(
target_os
=
"
freebsd
"
)
{
println
!
(
"
cargo
:
rustc
-
flags
=
-
l
ffi
-
l
ncursesw
-
l
c
+
+
-
l
z
"
)
;
}
else
if
cfg
!
(
target_os
=
"
linux
"
)
{
println
!
(
"
cargo
:
rustc
-
flags
=
-
l
ffi
-
l
ncursesw
-
l
stdc
+
+
-
l
z
"
)
;
}
else
if
cfg
!
(
target_os
=
"
macos
"
)
{
println
!
(
"
cargo
:
rustc
-
flags
=
-
l
ffi
-
l
ncurses
-
l
c
+
+
-
l
z
"
)
;
}
}
