#
!
[
deny
(
missing_docs
)
]
#
!
[
crate_name
=
"
bincode
"
]
#
!
[
crate_type
=
"
rlib
"
]
#
!
[
crate_type
=
"
dylib
"
]
extern
crate
byteorder
;
extern
crate
serde
;
mod
config
;
mod
ser
;
mod
error
;
mod
de
;
mod
internal
;
pub
use
error
:
:
{
Error
ErrorKind
Result
}
;
pub
use
config
:
:
Config
;
pub
use
de
:
:
read
:
:
{
BincodeRead
IoReader
SliceReader
}
;
#
[
doc
(
hidden
)
]
pub
trait
DeserializerAcceptor
<
'
a
>
{
type
Output
;
fn
accept
<
T
:
serde
:
:
Deserializer
<
'
a
>
>
(
self
T
)
-
>
Self
:
:
Output
;
}
#
[
doc
(
hidden
)
]
pub
trait
SerializerAcceptor
{
type
Output
;
fn
accept
<
T
:
serde
:
:
Serializer
>
(
self
T
)
-
>
Self
:
:
Output
;
}
pub
fn
config
(
)
-
>
Config
{
Config
:
:
new
(
)
}
pub
fn
serialize_into
<
W
T
:
?
Sized
>
(
writer
:
W
value
:
&
T
)
-
>
Result
<
(
)
>
where
W
:
std
:
:
io
:
:
Write
T
:
serde
:
:
Serialize
{
config
(
)
.
serialize_into
(
writer
value
)
}
pub
fn
serialize
<
T
:
?
Sized
>
(
value
:
&
T
)
-
>
Result
<
Vec
<
u8
>
>
where
T
:
serde
:
:
Serialize
{
config
(
)
.
serialize
(
value
)
}
pub
fn
deserialize_from
<
R
T
>
(
reader
:
R
)
-
>
Result
<
T
>
where
R
:
std
:
:
io
:
:
Read
T
:
serde
:
:
de
:
:
DeserializeOwned
{
config
(
)
.
deserialize_from
(
reader
)
}
pub
fn
deserialize_from_custom
<
'
a
R
T
>
(
reader
:
R
)
-
>
Result
<
T
>
where
R
:
de
:
:
read
:
:
BincodeRead
<
'
a
>
T
:
serde
:
:
de
:
:
DeserializeOwned
{
config
(
)
.
deserialize_from_custom
(
reader
)
}
#
[
doc
(
hidden
)
]
pub
fn
deserialize_in_place
<
'
a
R
T
>
(
reader
:
R
place
:
&
mut
T
)
-
>
Result
<
(
)
>
where
T
:
serde
:
:
de
:
:
Deserialize
<
'
a
>
R
:
BincodeRead
<
'
a
>
{
config
(
)
.
deserialize_in_place
(
reader
place
)
}
pub
fn
deserialize
<
'
a
T
>
(
bytes
:
&
'
a
[
u8
]
)
-
>
Result
<
T
>
where
T
:
serde
:
:
de
:
:
Deserialize
<
'
a
>
{
config
(
)
.
deserialize
(
bytes
)
}
pub
fn
serialized_size
<
T
:
?
Sized
>
(
value
:
&
T
)
-
>
Result
<
u64
>
where
T
:
serde
:
:
Serialize
{
config
(
)
.
serialized_size
(
value
)
}
#
[
doc
(
hidden
)
]
pub
fn
with_deserializer
<
'
a
A
R
>
(
reader
:
R
acceptor
:
A
)
-
>
A
:
:
Output
where
A
:
DeserializerAcceptor
<
'
a
>
R
:
BincodeRead
<
'
a
>
{
config
(
)
.
with_deserializer
(
reader
acceptor
)
}
#
[
doc
(
hidden
)
]
pub
fn
with_serializer
<
A
W
>
(
writer
:
W
acceptor
:
A
)
-
>
A
:
:
Output
where
A
:
SerializerAcceptor
W
:
std
:
:
io
:
:
Write
{
config
(
)
.
with_serializer
(
writer
acceptor
)
}
