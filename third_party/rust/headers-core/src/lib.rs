#
!
[
deny
(
missing_docs
)
]
#
!
[
deny
(
missing_debug_implementations
)
]
#
!
[
cfg_attr
(
test
deny
(
warnings
)
)
]
#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
headers
-
core
/
0
.
1
.
1
"
)
]
extern
crate
bytes
;
extern
crate
http
;
pub
use
http
:
:
header
:
:
{
self
HeaderName
HeaderValue
}
;
use
std
:
:
fmt
:
:
{
self
Display
Formatter
}
;
use
std
:
:
error
;
pub
trait
Header
{
fn
name
(
)
-
>
&
'
static
HeaderName
;
fn
decode
<
'
i
I
>
(
values
:
&
mut
I
)
-
>
Result
<
Self
Error
>
where
Self
:
Sized
I
:
Iterator
<
Item
=
&
'
i
HeaderValue
>
;
fn
encode
<
E
:
Extend
<
HeaderValue
>
>
(
&
self
values
:
&
mut
E
)
;
}
#
[
derive
(
Debug
)
]
pub
struct
Error
{
kind
:
Kind
}
#
[
derive
(
Debug
)
]
enum
Kind
{
Invalid
}
impl
Error
{
pub
fn
invalid
(
)
-
>
Error
{
Error
{
kind
:
Kind
:
:
Invalid
}
}
}
impl
Display
for
Error
{
fn
fmt
(
&
self
f
:
&
mut
Formatter
)
-
>
fmt
:
:
Result
{
match
&
self
.
kind
{
Kind
:
:
Invalid
=
>
f
.
write_str
(
"
invalid
HTTP
header
"
)
}
}
}
impl
error
:
:
Error
for
Error
{
}
