use
super
:
:
*
;
use
icu_locid
:
:
subtags
:
:
{
Language
Region
Script
Variant
}
;
use
icu_provider
:
:
prelude
:
:
*
;
use
tinystr
:
:
UnvalidatedTinyAsciiStr
;
use
zerovec
:
:
{
VarZeroVec
ZeroMap
ZeroSlice
}
;
#
[
icu_provider
:
:
data_struct
(
marker
(
AliasesV1Marker
"
locid_transform
/
aliases
1
"
singleton
)
)
]
#
[
derive
(
PartialEq
Clone
Default
)
]
#
[
cfg_attr
(
feature
=
"
datagen
"
derive
(
serde
:
:
Serialize
databake
:
:
Bake
)
databake
(
path
=
icu_locid_transform
:
:
provider
)
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
serde
:
:
Deserialize
)
)
]
#
[
yoke
(
prove_covariance_manually
)
]
#
[
derive
(
Debug
)
]
pub
struct
AliasesV1
<
'
data
>
{
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
language_variants
:
VarZeroVec
<
'
data
UnvalidatedLanguageIdentifierPair
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
sgn_region
:
ZeroMap
<
'
data
UnvalidatedRegion
Language
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
language_len2
:
ZeroMap
<
'
data
UnvalidatedTinyAsciiStr
<
2
>
UnvalidatedLanguageIdentifier
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
language_len3
:
ZeroMap
<
'
data
UnvalidatedLanguage
UnvalidatedLanguageIdentifier
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
language
:
VarZeroVec
<
'
data
UnvalidatedLanguageIdentifierPair
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
script
:
ZeroMap
<
'
data
UnvalidatedScript
Script
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
region_alpha
:
ZeroMap
<
'
data
UnvalidatedTinyAsciiStr
<
2
>
Region
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
region_num
:
ZeroMap
<
'
data
UnvalidatedRegion
Region
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
complex_region
:
ZeroMap
<
'
data
UnvalidatedRegion
ZeroSlice
<
Region
>
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
variant
:
ZeroMap
<
'
data
UnvalidatedVariant
Variant
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
subdivision
:
ZeroMap
<
'
data
UnvalidatedSubdivision
SemivalidatedSubdivision
>
}
#
[
cfg
(
feature
=
"
datagen
"
)
]
impl
<
'
data
>
From
<
AliasesV2
<
'
data
>
>
for
AliasesV1
<
'
data
>
{
fn
from
(
value
:
AliasesV2
<
'
data
>
)
-
>
Self
{
let
language_variants
=
value
.
language_variants
.
iter
(
)
.
map
(
zerofrom
:
:
ZeroFrom
:
:
zero_from
)
.
map
(
|
v
:
LanguageStrStrPair
|
{
let
langid
=
alloc
:
:
format
!
(
"
{
0
}
-
{
1
}
"
v
.
0
v
.
1
)
;
StrStrPair
(
langid
.
into
(
)
v
.
2
)
}
)
.
collect
:
:
<
alloc
:
:
vec
:
:
Vec
<
StrStrPair
>
>
(
)
;
Self
{
language_variants
:
VarZeroVec
:
:
from
(
&
language_variants
)
sgn_region
:
value
.
sgn_region
language_len2
:
value
.
language_len2
language_len3
:
value
.
language_len3
language
:
value
.
language
script
:
value
.
script
region_alpha
:
value
.
region_alpha
region_num
:
value
.
region_num
complex_region
:
value
.
complex_region
variant
:
value
.
variant
subdivision
:
value
.
subdivision
}
}
}
impl
<
'
data
>
TryFrom
<
AliasesV1
<
'
data
>
>
for
AliasesV2
<
'
data
>
{
type
Error
=
icu_provider
:
:
DataError
;
fn
try_from
(
value
:
AliasesV1
<
'
data
>
)
-
>
Result
<
Self
Self
:
:
Error
>
{
#
[
allow
(
unused_imports
)
]
use
alloc
:
:
borrow
:
:
ToOwned
;
let
language_variants
=
value
.
language_variants
.
iter
(
)
.
map
(
zerofrom
:
:
ZeroFrom
:
:
zero_from
)
.
map
(
|
v
:
StrStrPair
|
-
>
Result
<
LanguageStrStrPair
DataError
>
{
let
(
lang
variant
)
=
v
.
0
.
split_once
(
'
-
'
)
.
ok_or_else
(
|
|
DataError
:
:
custom
(
"
Each
pair
should
be
language
-
variant
"
)
)
?
;
let
lang
:
Language
=
lang
.
parse
(
)
.
map_err
(
|
_
|
DataError
:
:
custom
(
"
Language
should
be
a
valid
language
subtag
"
)
)
?
;
Ok
(
LanguageStrStrPair
(
lang
variant
.
to_owned
(
)
.
into
(
)
v
.
1
)
)
}
)
.
collect
:
:
<
Result
<
alloc
:
:
vec
:
:
Vec
<
_
>
_
>
>
(
)
?
;
Ok
(
Self
{
language_variants
:
VarZeroVec
:
:
from
(
&
language_variants
)
sgn_region
:
value
.
sgn_region
language_len2
:
value
.
language_len2
language_len3
:
value
.
language_len3
language
:
value
.
language
script
:
value
.
script
region_alpha
:
value
.
region_alpha
region_num
:
value
.
region_num
complex_region
:
value
.
complex_region
variant
:
value
.
variant
subdivision
:
value
.
subdivision
}
)
}
}
#
[
icu_provider
:
:
data_struct
(
marker
(
AliasesV2Marker
"
locid_transform
/
aliases
2
"
singleton
)
)
]
#
[
derive
(
PartialEq
Clone
Default
)
]
#
[
cfg_attr
(
feature
=
"
datagen
"
derive
(
serde
:
:
Serialize
databake
:
:
Bake
)
databake
(
path
=
icu_locid_transform
:
:
provider
)
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
serde
:
:
Deserialize
)
)
]
#
[
yoke
(
prove_covariance_manually
)
]
#
[
derive
(
Debug
)
]
pub
struct
AliasesV2
<
'
data
>
{
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
language_variants
:
VarZeroVec
<
'
data
UnvalidatedLanguageVariantsPair
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
sgn_region
:
ZeroMap
<
'
data
UnvalidatedRegion
Language
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
language_len2
:
ZeroMap
<
'
data
UnvalidatedTinyAsciiStr
<
2
>
UnvalidatedLanguageIdentifier
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
language_len3
:
ZeroMap
<
'
data
UnvalidatedLanguage
UnvalidatedLanguageIdentifier
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
language
:
VarZeroVec
<
'
data
UnvalidatedLanguageIdentifierPair
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
script
:
ZeroMap
<
'
data
UnvalidatedScript
Script
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
region_alpha
:
ZeroMap
<
'
data
UnvalidatedTinyAsciiStr
<
2
>
Region
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
region_num
:
ZeroMap
<
'
data
UnvalidatedRegion
Region
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
complex_region
:
ZeroMap
<
'
data
UnvalidatedRegion
ZeroSlice
<
Region
>
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
variant
:
ZeroMap
<
'
data
UnvalidatedVariant
Variant
>
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
borrow
)
)
]
pub
subdivision
:
ZeroMap
<
'
data
UnvalidatedSubdivision
SemivalidatedSubdivision
>
}
