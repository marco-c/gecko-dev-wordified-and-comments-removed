use
crate
:
:
future
:
:
Either
;
use
crate
:
:
stream
:
:
{
Fuse
StreamExt
}
;
use
core
:
:
fmt
;
use
core
:
:
pin
:
:
Pin
;
use
futures_core
:
:
future
:
:
{
FusedFuture
Future
}
;
use
futures_core
:
:
stream
:
:
{
FusedStream
Stream
}
;
use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
#
[
cfg
(
feature
=
"
sink
"
)
]
use
futures_sink
:
:
Sink
;
use
pin_utils
:
:
{
unsafe_pinned
unsafe_unpinned
}
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
Peekable
<
St
:
Stream
>
{
stream
:
Fuse
<
St
>
peeked
:
Option
<
St
:
:
Item
>
}
impl
<
St
:
Stream
+
Unpin
>
Unpin
for
Peekable
<
St
>
{
}
impl
<
St
:
Stream
>
Peekable
<
St
>
{
unsafe_pinned
!
(
stream
:
Fuse
<
St
>
)
;
unsafe_unpinned
!
(
peeked
:
Option
<
St
:
:
Item
>
)
;
pub
(
super
)
fn
new
(
stream
:
St
)
-
>
Peekable
<
St
>
{
Peekable
{
stream
:
stream
.
fuse
(
)
peeked
:
None
}
}
pub
fn
get_ref
(
&
self
)
-
>
&
St
{
self
.
stream
.
get_ref
(
)
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
St
{
self
.
stream
.
get_mut
(
)
}
pub
fn
get_pin_mut
(
self
:
Pin
<
&
mut
Self
>
)
-
>
Pin
<
&
mut
St
>
{
self
.
stream
(
)
.
get_pin_mut
(
)
}
pub
fn
into_inner
(
self
)
-
>
St
{
self
.
stream
.
into_inner
(
)
}
pub
fn
peek
(
self
:
Pin
<
&
mut
Self
>
)
-
>
Peek
<
'
_
St
>
{
Peek
{
inner
:
Some
(
self
)
}
}
fn
do_poll_peek
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Either
<
Pin
<
&
mut
Self
>
Option
<
&
St
:
:
Item
>
>
{
if
self
.
peeked
.
is_some
(
)
{
let
this
:
&
Self
=
self
.
into_ref
(
)
.
get_ref
(
)
;
return
Either
:
:
Right
(
this
.
peeked
.
as_ref
(
)
)
;
}
match
self
.
as_mut
(
)
.
stream
(
)
.
poll_next
(
cx
)
{
Poll
:
:
Ready
(
None
)
=
>
Either
:
:
Right
(
None
)
Poll
:
:
Ready
(
Some
(
item
)
)
=
>
{
*
self
.
as_mut
(
)
.
peeked
(
)
=
Some
(
item
)
;
let
this
:
&
Self
=
self
.
into_ref
(
)
.
get_ref
(
)
;
Either
:
:
Right
(
this
.
peeked
.
as_ref
(
)
)
}
_
=
>
Either
:
:
Left
(
self
)
}
}
pub
fn
poll_peek
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
&
St
:
:
Item
>
>
{
match
self
.
do_poll_peek
(
cx
)
{
Either
:
:
Left
(
_
)
=
>
Poll
:
:
Pending
Either
:
:
Right
(
poll
)
=
>
Poll
:
:
Ready
(
poll
)
}
}
}
impl
<
St
:
Stream
>
FusedStream
for
Peekable
<
St
>
{
fn
is_terminated
(
&
self
)
-
>
bool
{
self
.
peeked
.
is_none
(
)
&
&
self
.
stream
.
is_terminated
(
)
}
}
impl
<
S
:
Stream
>
Stream
for
Peekable
<
S
>
{
type
Item
=
S
:
:
Item
;
fn
poll_next
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
>
{
if
let
Some
(
item
)
=
self
.
as_mut
(
)
.
peeked
(
)
.
take
(
)
{
return
Poll
:
:
Ready
(
Some
(
item
)
)
;
}
self
.
as_mut
(
)
.
stream
(
)
.
poll_next
(
cx
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
let
peek_len
=
if
self
.
peeked
.
is_some
(
)
{
1
}
else
{
0
}
;
let
(
lower
upper
)
=
self
.
stream
.
size_hint
(
)
;
let
lower
=
lower
.
saturating_add
(
peek_len
)
;
let
upper
=
match
upper
{
Some
(
x
)
=
>
x
.
checked_add
(
peek_len
)
None
=
>
None
}
;
(
lower
upper
)
}
}
#
[
cfg
(
feature
=
"
sink
"
)
]
impl
<
S
Item
>
Sink
<
Item
>
for
Peekable
<
S
>
where
S
:
Sink
<
Item
>
+
Stream
{
type
Error
=
S
:
:
Error
;
delegate_sink
!
(
stream
Item
)
;
}
#
[
must_use
=
"
futures
do
nothing
unless
polled
"
]
pub
struct
Peek
<
'
a
St
:
Stream
>
{
inner
:
Option
<
Pin
<
&
'
a
mut
Peekable
<
St
>
>
>
}
impl
<
St
:
Stream
>
Unpin
for
Peek
<
'
_
St
>
{
}
impl
<
St
>
fmt
:
:
Debug
for
Peek
<
'
_
St
>
where
St
:
Stream
+
fmt
:
:
Debug
St
:
:
Item
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
Peek
"
)
.
field
(
"
inner
"
&
self
.
inner
)
.
finish
(
)
}
}
impl
<
St
:
Stream
>
FusedFuture
for
Peek
<
'
_
St
>
{
fn
is_terminated
(
&
self
)
-
>
bool
{
self
.
inner
.
is_none
(
)
}
}
impl
<
'
a
St
>
Future
for
Peek
<
'
a
St
>
where
St
:
Stream
{
type
Output
=
Option
<
&
'
a
St
:
:
Item
>
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
if
let
Some
(
peekable
)
=
self
.
inner
.
take
(
)
{
match
peekable
.
do_poll_peek
(
cx
)
{
Either
:
:
Left
(
peekable
)
=
>
{
self
.
inner
=
Some
(
peekable
)
;
Poll
:
:
Pending
}
Either
:
:
Right
(
peek
)
=
>
Poll
:
:
Ready
(
peek
)
}
}
else
{
panic
!
(
"
Peek
polled
after
completion
"
)
}
}
}
