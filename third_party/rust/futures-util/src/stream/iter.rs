use
super
:
:
assert_stream
;
use
core
:
:
pin
:
:
Pin
;
use
futures_core
:
:
stream
:
:
Stream
;
use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
#
[
derive
(
Debug
Clone
)
]
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
Iter
<
I
>
{
iter
:
I
}
impl
<
I
>
Iter
<
I
>
{
pub
fn
get_ref
(
&
self
)
-
>
&
I
{
&
self
.
iter
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
I
{
&
mut
self
.
iter
}
pub
fn
into_inner
(
self
)
-
>
I
{
self
.
iter
}
}
impl
<
I
>
Unpin
for
Iter
<
I
>
{
}
pub
fn
iter
<
I
>
(
i
:
I
)
-
>
Iter
<
I
:
:
IntoIter
>
where
I
:
IntoIterator
{
assert_stream
:
:
<
I
:
:
Item
_
>
(
Iter
{
iter
:
i
.
into_iter
(
)
}
)
}
impl
<
I
>
Stream
for
Iter
<
I
>
where
I
:
Iterator
{
type
Item
=
I
:
:
Item
;
fn
poll_next
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
I
:
:
Item
>
>
{
Poll
:
:
Ready
(
self
.
iter
.
next
(
)
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
iter
.
size_hint
(
)
}
}
