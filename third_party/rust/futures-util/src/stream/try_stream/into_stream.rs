use
core
:
:
pin
:
:
Pin
;
use
futures_core
:
:
stream
:
:
{
FusedStream
Stream
TryStream
}
;
use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
#
[
cfg
(
feature
=
"
sink
"
)
]
use
futures_sink
:
:
Sink
;
use
pin_utils
:
:
unsafe_pinned
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
IntoStream
<
St
>
{
stream
:
St
}
impl
<
St
>
IntoStream
<
St
>
{
unsafe_pinned
!
(
stream
:
St
)
;
#
[
inline
]
pub
(
super
)
fn
new
(
stream
:
St
)
-
>
Self
{
IntoStream
{
stream
}
}
pub
fn
get_ref
(
&
self
)
-
>
&
St
{
&
self
.
stream
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
St
{
&
mut
self
.
stream
}
pub
fn
get_pin_mut
(
self
:
Pin
<
&
mut
Self
>
)
-
>
Pin
<
&
mut
St
>
{
self
.
stream
(
)
}
pub
fn
into_inner
(
self
)
-
>
St
{
self
.
stream
}
}
impl
<
St
:
TryStream
+
FusedStream
>
FusedStream
for
IntoStream
<
St
>
{
fn
is_terminated
(
&
self
)
-
>
bool
{
self
.
stream
.
is_terminated
(
)
}
}
impl
<
St
:
TryStream
>
Stream
for
IntoStream
<
St
>
{
type
Item
=
Result
<
St
:
:
Ok
St
:
:
Error
>
;
#
[
inline
]
fn
poll_next
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
>
{
self
.
stream
(
)
.
try_poll_next
(
cx
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
stream
.
size_hint
(
)
}
}
#
[
cfg
(
feature
=
"
sink
"
)
]
impl
<
S
:
Sink
<
Item
>
Item
>
Sink
<
Item
>
for
IntoStream
<
S
>
{
type
Error
=
S
:
:
Error
;
delegate_sink
!
(
stream
Item
)
;
}
