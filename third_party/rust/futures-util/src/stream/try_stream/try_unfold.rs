use
super
:
:
assert_stream
;
use
core
:
:
fmt
;
use
core
:
:
pin
:
:
Pin
;
use
futures_core
:
:
future
:
:
TryFuture
;
use
futures_core
:
:
ready
;
use
futures_core
:
:
stream
:
:
Stream
;
use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
use
pin_project_lite
:
:
pin_project
;
pub
fn
try_unfold
<
T
F
Fut
Item
>
(
init
:
T
f
:
F
)
-
>
TryUnfold
<
T
F
Fut
>
where
F
:
FnMut
(
T
)
-
>
Fut
Fut
:
TryFuture
<
Ok
=
Option
<
(
Item
T
)
>
>
{
assert_stream
:
:
<
Result
<
Item
Fut
:
:
Error
>
_
>
(
TryUnfold
{
f
state
:
Some
(
init
)
fut
:
None
}
)
}
pin_project
!
{
/
/
/
Stream
for
the
[
try_unfold
]
function
.
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
TryUnfold
<
T
F
Fut
>
{
f
:
F
state
:
Option
<
T
>
#
[
pin
]
fut
:
Option
<
Fut
>
}
}
impl
<
T
F
Fut
>
fmt
:
:
Debug
for
TryUnfold
<
T
F
Fut
>
where
T
:
fmt
:
:
Debug
Fut
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
TryUnfold
"
)
.
field
(
"
state
"
&
self
.
state
)
.
field
(
"
fut
"
&
self
.
fut
)
.
finish
(
)
}
}
impl
<
T
F
Fut
Item
>
Stream
for
TryUnfold
<
T
F
Fut
>
where
F
:
FnMut
(
T
)
-
>
Fut
Fut
:
TryFuture
<
Ok
=
Option
<
(
Item
T
)
>
>
{
type
Item
=
Result
<
Item
Fut
:
:
Error
>
;
fn
poll_next
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
>
{
let
mut
this
=
self
.
project
(
)
;
if
let
Some
(
state
)
=
this
.
state
.
take
(
)
{
this
.
fut
.
set
(
Some
(
(
this
.
f
)
(
state
)
)
)
;
}
match
this
.
fut
.
as_mut
(
)
.
as_pin_mut
(
)
{
None
=
>
{
Poll
:
:
Ready
(
None
)
}
Some
(
future
)
=
>
{
let
step
=
ready
!
(
future
.
try_poll
(
cx
)
)
;
this
.
fut
.
set
(
None
)
;
match
step
{
Ok
(
Some
(
(
item
next_state
)
)
)
=
>
{
*
this
.
state
=
Some
(
next_state
)
;
Poll
:
:
Ready
(
Some
(
Ok
(
item
)
)
)
}
Ok
(
None
)
=
>
Poll
:
:
Ready
(
None
)
Err
(
e
)
=
>
Poll
:
:
Ready
(
Some
(
Err
(
e
)
)
)
}
}
}
}
}
