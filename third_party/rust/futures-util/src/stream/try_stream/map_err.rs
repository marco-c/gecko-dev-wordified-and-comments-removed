use
core
:
:
fmt
;
use
core
:
:
pin
:
:
Pin
;
use
futures_core
:
:
stream
:
:
{
FusedStream
Stream
TryStream
}
;
use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
#
[
cfg
(
feature
=
"
sink
"
)
]
use
futures_sink
:
:
Sink
;
use
pin_utils
:
:
{
unsafe_pinned
unsafe_unpinned
}
;
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
MapErr
<
St
F
>
{
stream
:
St
f
:
F
}
impl
<
St
:
Unpin
F
>
Unpin
for
MapErr
<
St
F
>
{
}
impl
<
St
F
>
fmt
:
:
Debug
for
MapErr
<
St
F
>
where
St
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
MapErr
"
)
.
field
(
"
stream
"
&
self
.
stream
)
.
finish
(
)
}
}
impl
<
St
F
>
MapErr
<
St
F
>
{
unsafe_pinned
!
(
stream
:
St
)
;
unsafe_unpinned
!
(
f
:
F
)
;
pub
(
super
)
fn
new
(
stream
:
St
f
:
F
)
-
>
Self
{
MapErr
{
stream
f
}
}
pub
fn
get_ref
(
&
self
)
-
>
&
St
{
&
self
.
stream
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
St
{
&
mut
self
.
stream
}
pub
fn
get_pin_mut
(
self
:
Pin
<
&
mut
Self
>
)
-
>
Pin
<
&
mut
St
>
{
self
.
stream
(
)
}
pub
fn
into_inner
(
self
)
-
>
St
{
self
.
stream
}
}
impl
<
St
F
E
>
FusedStream
for
MapErr
<
St
F
>
where
St
:
TryStream
+
FusedStream
F
:
FnMut
(
St
:
:
Error
)
-
>
E
{
fn
is_terminated
(
&
self
)
-
>
bool
{
self
.
stream
.
is_terminated
(
)
}
}
impl
<
St
F
E
>
Stream
for
MapErr
<
St
F
>
where
St
:
TryStream
F
:
FnMut
(
St
:
:
Error
)
-
>
E
{
type
Item
=
Result
<
St
:
:
Ok
E
>
;
fn
poll_next
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
>
{
self
.
as_mut
(
)
.
stream
(
)
.
try_poll_next
(
cx
)
.
map
(
|
opt
|
opt
.
map
(
|
res
|
res
.
map_err
(
|
e
|
self
.
as_mut
(
)
.
f
(
)
(
e
)
)
)
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
self
.
stream
.
size_hint
(
)
}
}
#
[
cfg
(
feature
=
"
sink
"
)
]
impl
<
S
F
Item
>
Sink
<
Item
>
for
MapErr
<
S
F
>
where
S
:
Sink
<
Item
>
{
type
Error
=
S
:
:
Error
;
delegate_sink
!
(
stream
Item
)
;
}
