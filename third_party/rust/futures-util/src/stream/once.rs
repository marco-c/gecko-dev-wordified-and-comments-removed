use
core
:
:
pin
:
:
Pin
;
use
futures_core
:
:
future
:
:
Future
;
use
futures_core
:
:
stream
:
:
{
Stream
FusedStream
}
;
use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
use
pin_utils
:
:
unsafe_pinned
;
pub
fn
once
<
Fut
:
Future
>
(
future
:
Fut
)
-
>
Once
<
Fut
>
{
Once
{
future
:
Some
(
future
)
}
}
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
Once
<
Fut
>
{
future
:
Option
<
Fut
>
}
impl
<
Fut
:
Unpin
>
Unpin
for
Once
<
Fut
>
{
}
impl
<
Fut
>
Once
<
Fut
>
{
unsafe_pinned
!
(
future
:
Option
<
Fut
>
)
;
}
impl
<
Fut
:
Future
>
Stream
for
Once
<
Fut
>
{
type
Item
=
Fut
:
:
Output
;
fn
poll_next
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
>
{
let
v
=
match
self
.
as_mut
(
)
.
future
(
)
.
as_pin_mut
(
)
{
Some
(
fut
)
=
>
ready
!
(
fut
.
poll
(
cx
)
)
None
=
>
return
Poll
:
:
Ready
(
None
)
}
;
self
.
as_mut
(
)
.
future
(
)
.
set
(
None
)
;
Poll
:
:
Ready
(
Some
(
v
)
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
if
self
.
future
.
is_some
(
)
{
(
1
Some
(
1
)
)
}
else
{
(
0
Some
(
0
)
)
}
}
}
impl
<
Fut
:
Future
>
FusedStream
for
Once
<
Fut
>
{
fn
is_terminated
(
&
self
)
-
>
bool
{
self
.
future
.
is_none
(
)
}
}
