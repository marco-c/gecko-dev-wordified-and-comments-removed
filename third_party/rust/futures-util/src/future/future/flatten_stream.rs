use
core
:
:
fmt
;
use
core
:
:
pin
:
:
Pin
;
use
futures_core
:
:
future
:
:
Future
;
use
futures_core
:
:
stream
:
:
{
FusedStream
Stream
}
;
use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
use
pin_utils
:
:
unsafe_pinned
;
#
[
must_use
=
"
streams
do
nothing
unless
polled
"
]
pub
struct
FlattenStream
<
Fut
:
Future
>
{
state
:
State
<
Fut
Fut
:
:
Output
>
}
impl
<
Fut
:
Future
>
FlattenStream
<
Fut
>
{
unsafe_pinned
!
(
state
:
State
<
Fut
Fut
:
:
Output
>
)
;
pub
(
super
)
fn
new
(
future
:
Fut
)
-
>
FlattenStream
<
Fut
>
{
FlattenStream
{
state
:
State
:
:
Future
(
future
)
}
}
}
impl
<
Fut
>
fmt
:
:
Debug
for
FlattenStream
<
Fut
>
where
Fut
:
Future
+
fmt
:
:
Debug
Fut
:
:
Output
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
FlattenStream
"
)
.
field
(
"
state
"
&
self
.
state
)
.
finish
(
)
}
}
#
[
derive
(
Debug
)
]
enum
State
<
Fut
St
>
{
Future
(
Fut
)
Stream
(
St
)
}
impl
<
Fut
St
>
State
<
Fut
St
>
{
fn
get_pin_mut
(
self
:
Pin
<
&
mut
Self
>
)
-
>
State
<
Pin
<
&
mut
Fut
>
Pin
<
&
mut
St
>
>
{
match
unsafe
{
self
.
get_unchecked_mut
(
)
}
{
State
:
:
Future
(
f
)
=
>
State
:
:
Future
(
unsafe
{
Pin
:
:
new_unchecked
(
f
)
}
)
State
:
:
Stream
(
s
)
=
>
State
:
:
Stream
(
unsafe
{
Pin
:
:
new_unchecked
(
s
)
}
)
}
}
}
impl
<
Fut
>
FusedStream
for
FlattenStream
<
Fut
>
where
Fut
:
Future
Fut
:
:
Output
:
Stream
+
FusedStream
{
fn
is_terminated
(
&
self
)
-
>
bool
{
match
&
self
.
state
{
State
:
:
Future
(
_
)
=
>
false
State
:
:
Stream
(
stream
)
=
>
stream
.
is_terminated
(
)
}
}
}
impl
<
Fut
>
Stream
for
FlattenStream
<
Fut
>
where
Fut
:
Future
Fut
:
:
Output
:
Stream
{
type
Item
=
<
Fut
:
:
Output
as
Stream
>
:
:
Item
;
fn
poll_next
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
>
{
loop
{
match
self
.
as_mut
(
)
.
state
(
)
.
get_pin_mut
(
)
{
State
:
:
Future
(
f
)
=
>
{
let
stream
=
ready
!
(
f
.
poll
(
cx
)
)
;
self
.
as_mut
(
)
.
state
(
)
.
set
(
State
:
:
Stream
(
stream
)
)
;
}
State
:
:
Stream
(
s
)
=
>
return
s
.
poll_next
(
cx
)
}
}
}
}
