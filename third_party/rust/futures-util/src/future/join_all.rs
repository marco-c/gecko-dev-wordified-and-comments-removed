use
alloc
:
:
boxed
:
:
Box
;
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
fmt
;
use
core
:
:
future
:
:
Future
;
use
core
:
:
iter
:
:
FromIterator
;
use
core
:
:
mem
;
use
core
:
:
pin
:
:
Pin
;
use
core
:
:
task
:
:
{
Context
Poll
}
;
use
super
:
:
{
assert_future
MaybeDone
}
;
#
[
cfg_attr
(
target_os
=
"
none
"
cfg
(
target_has_atomic
=
"
ptr
"
)
)
]
use
crate
:
:
stream
:
:
{
Collect
FuturesOrdered
StreamExt
}
;
pub
(
crate
)
fn
iter_pin_mut
<
T
>
(
slice
:
Pin
<
&
mut
[
T
]
>
)
-
>
impl
Iterator
<
Item
=
Pin
<
&
mut
T
>
>
{
unsafe
{
slice
.
get_unchecked_mut
(
)
}
.
iter_mut
(
)
.
map
(
|
t
|
unsafe
{
Pin
:
:
new_unchecked
(
t
)
}
)
}
#
[
must_use
=
"
futures
do
nothing
unless
you
.
await
or
poll
them
"
]
pub
struct
JoinAll
<
F
>
where
F
:
Future
{
kind
:
JoinAllKind
<
F
>
}
#
[
cfg_attr
(
target_os
=
"
none
"
cfg
(
target_has_atomic
=
"
ptr
"
)
)
]
pub
(
crate
)
const
SMALL
:
usize
=
30
;
enum
JoinAllKind
<
F
>
where
F
:
Future
{
Small
{
elems
:
Pin
<
Box
<
[
MaybeDone
<
F
>
]
>
>
}
#
[
cfg_attr
(
target_os
=
"
none
"
cfg
(
target_has_atomic
=
"
ptr
"
)
)
]
Big
{
fut
:
Collect
<
FuturesOrdered
<
F
>
Vec
<
F
:
:
Output
>
>
}
}
impl
<
F
>
fmt
:
:
Debug
for
JoinAll
<
F
>
where
F
:
Future
+
fmt
:
:
Debug
F
:
:
Output
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
match
self
.
kind
{
JoinAllKind
:
:
Small
{
ref
elems
}
=
>
{
f
.
debug_struct
(
"
JoinAll
"
)
.
field
(
"
elems
"
elems
)
.
finish
(
)
}
#
[
cfg_attr
(
target_os
=
"
none
"
cfg
(
target_has_atomic
=
"
ptr
"
)
)
]
JoinAllKind
:
:
Big
{
ref
fut
.
.
}
=
>
fmt
:
:
Debug
:
:
fmt
(
fut
f
)
}
}
}
pub
fn
join_all
<
I
>
(
iter
:
I
)
-
>
JoinAll
<
I
:
:
Item
>
where
I
:
IntoIterator
I
:
:
Item
:
Future
{
let
iter
=
iter
.
into_iter
(
)
;
#
[
cfg
(
target_os
=
"
none
"
)
]
#
[
cfg_attr
(
target_os
=
"
none
"
cfg
(
not
(
target_has_atomic
=
"
ptr
"
)
)
)
]
{
let
kind
=
JoinAllKind
:
:
Small
{
elems
:
iter
.
map
(
MaybeDone
:
:
Future
)
.
collect
:
:
<
Box
<
[
_
]
>
>
(
)
.
into
(
)
}
;
assert_future
:
:
<
Vec
<
<
I
:
:
Item
as
Future
>
:
:
Output
>
_
>
(
JoinAll
{
kind
}
)
}
#
[
cfg_attr
(
target_os
=
"
none
"
cfg
(
target_has_atomic
=
"
ptr
"
)
)
]
{
let
kind
=
match
iter
.
size_hint
(
)
.
1
{
Some
(
max
)
if
max
<
=
SMALL
=
>
JoinAllKind
:
:
Small
{
elems
:
iter
.
map
(
MaybeDone
:
:
Future
)
.
collect
:
:
<
Box
<
[
_
]
>
>
(
)
.
into
(
)
}
_
=
>
JoinAllKind
:
:
Big
{
fut
:
iter
.
collect
:
:
<
FuturesOrdered
<
_
>
>
(
)
.
collect
(
)
}
}
;
assert_future
:
:
<
Vec
<
<
I
:
:
Item
as
Future
>
:
:
Output
>
_
>
(
JoinAll
{
kind
}
)
}
}
impl
<
F
>
Future
for
JoinAll
<
F
>
where
F
:
Future
{
type
Output
=
Vec
<
F
:
:
Output
>
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
match
&
mut
self
.
kind
{
JoinAllKind
:
:
Small
{
elems
}
=
>
{
let
mut
all_done
=
true
;
for
elem
in
iter_pin_mut
(
elems
.
as_mut
(
)
)
{
if
elem
.
poll
(
cx
)
.
is_pending
(
)
{
all_done
=
false
;
}
}
if
all_done
{
let
mut
elems
=
mem
:
:
replace
(
elems
Box
:
:
pin
(
[
]
)
)
;
let
result
=
iter_pin_mut
(
elems
.
as_mut
(
)
)
.
map
(
|
e
|
e
.
take_output
(
)
.
unwrap
(
)
)
.
collect
(
)
;
Poll
:
:
Ready
(
result
)
}
else
{
Poll
:
:
Pending
}
}
#
[
cfg_attr
(
target_os
=
"
none
"
cfg
(
target_has_atomic
=
"
ptr
"
)
)
]
JoinAllKind
:
:
Big
{
fut
}
=
>
Pin
:
:
new
(
fut
)
.
poll
(
cx
)
}
}
}
impl
<
F
:
Future
>
FromIterator
<
F
>
for
JoinAll
<
F
>
{
fn
from_iter
<
T
:
IntoIterator
<
Item
=
F
>
>
(
iter
:
T
)
-
>
Self
{
join_all
(
iter
)
}
}
