use
core
:
:
pin
:
:
Pin
;
use
futures_core
:
:
future
:
:
{
FusedFuture
Future
}
;
use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
futures
do
nothing
unless
you
.
await
or
poll
them
"
]
pub
struct
Lazy
<
F
>
{
f
:
Option
<
F
>
}
impl
<
F
>
Unpin
for
Lazy
<
F
>
{
}
pub
fn
lazy
<
F
R
>
(
f
:
F
)
-
>
Lazy
<
F
>
where
F
:
FnOnce
(
&
mut
Context
<
'
_
>
)
-
>
R
{
Lazy
{
f
:
Some
(
f
)
}
}
impl
<
F
R
>
FusedFuture
for
Lazy
<
F
>
where
F
:
FnOnce
(
&
mut
Context
<
'
_
>
)
-
>
R
{
fn
is_terminated
(
&
self
)
-
>
bool
{
self
.
f
.
is_none
(
)
}
}
impl
<
F
R
>
Future
for
Lazy
<
F
>
where
F
:
FnOnce
(
&
mut
Context
<
'
_
>
)
-
>
R
{
type
Output
=
R
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
R
>
{
Poll
:
:
Ready
(
(
self
.
f
.
take
(
)
.
expect
(
"
Lazy
polled
after
completion
"
)
)
(
cx
)
)
}
}
