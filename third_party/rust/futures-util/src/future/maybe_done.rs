use
super
:
:
assert_future
;
use
core
:
:
mem
;
use
core
:
:
pin
:
:
Pin
;
use
futures_core
:
:
future
:
:
{
FusedFuture
Future
}
;
use
futures_core
:
:
ready
;
use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
#
[
derive
(
Debug
)
]
pub
enum
MaybeDone
<
Fut
:
Future
>
{
Future
(
Fut
)
Done
(
Fut
:
:
Output
)
Gone
}
impl
<
Fut
:
Future
+
Unpin
>
Unpin
for
MaybeDone
<
Fut
>
{
}
pub
fn
maybe_done
<
Fut
:
Future
>
(
future
:
Fut
)
-
>
MaybeDone
<
Fut
>
{
assert_future
:
:
<
(
)
_
>
(
MaybeDone
:
:
Future
(
future
)
)
}
impl
<
Fut
:
Future
>
MaybeDone
<
Fut
>
{
#
[
inline
]
pub
fn
output_mut
(
self
:
Pin
<
&
mut
Self
>
)
-
>
Option
<
&
mut
Fut
:
:
Output
>
{
unsafe
{
match
self
.
get_unchecked_mut
(
)
{
MaybeDone
:
:
Done
(
res
)
=
>
Some
(
res
)
_
=
>
None
}
}
}
#
[
inline
]
pub
fn
take_output
(
self
:
Pin
<
&
mut
Self
>
)
-
>
Option
<
Fut
:
:
Output
>
{
match
&
*
self
{
Self
:
:
Done
(
_
)
=
>
{
}
Self
:
:
Future
(
_
)
|
Self
:
:
Gone
=
>
return
None
}
unsafe
{
match
mem
:
:
replace
(
self
.
get_unchecked_mut
(
)
Self
:
:
Gone
)
{
MaybeDone
:
:
Done
(
output
)
=
>
Some
(
output
)
_
=
>
unreachable
!
(
)
}
}
}
}
impl
<
Fut
:
Future
>
FusedFuture
for
MaybeDone
<
Fut
>
{
fn
is_terminated
(
&
self
)
-
>
bool
{
match
self
{
Self
:
:
Future
(
_
)
=
>
false
Self
:
:
Done
(
_
)
|
Self
:
:
Gone
=
>
true
}
}
}
impl
<
Fut
:
Future
>
Future
for
MaybeDone
<
Fut
>
{
type
Output
=
(
)
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
unsafe
{
match
self
.
as_mut
(
)
.
get_unchecked_mut
(
)
{
MaybeDone
:
:
Future
(
f
)
=
>
{
let
res
=
ready
!
(
Pin
:
:
new_unchecked
(
f
)
.
poll
(
cx
)
)
;
self
.
set
(
Self
:
:
Done
(
res
)
)
;
}
MaybeDone
:
:
Done
(
_
)
=
>
{
}
MaybeDone
:
:
Gone
=
>
panic
!
(
"
MaybeDone
polled
after
value
taken
"
)
}
}
Poll
:
:
Ready
(
(
)
)
}
}
