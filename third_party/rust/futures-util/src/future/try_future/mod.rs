#
[
cfg
(
feature
=
"
compat
"
)
]
use
crate
:
:
compat
:
:
Compat
;
use
core
:
:
pin
:
:
Pin
;
use
futures_core
:
:
{
future
:
:
TryFuture
stream
:
:
TryStream
task
:
:
{
Context
Poll
}
}
;
#
[
cfg
(
feature
=
"
sink
"
)
]
use
futures_sink
:
:
Sink
;
use
crate
:
:
fns
:
:
{
inspect_err_fn
inspect_ok_fn
into_fn
map_err_fn
map_ok_fn
map_ok_or_else_fn
unwrap_or_else_fn
InspectErrFn
InspectOkFn
IntoFn
MapErrFn
MapOkFn
MapOkOrElseFn
UnwrapOrElseFn
}
;
use
crate
:
:
future
:
:
{
assert_future
Inspect
Map
}
;
use
crate
:
:
stream
:
:
assert_stream
;
mod
into_future
;
mod
try_flatten
;
mod
try_flatten_err
;
delegate_all
!
(
/
/
/
Future
for
the
[
try_flatten
]
(
TryFutureExt
:
:
try_flatten
)
method
.
TryFlatten
<
Fut1
Fut2
>
(
try_flatten
:
:
TryFlatten
<
Fut1
Fut2
>
)
:
Debug
+
Future
+
FusedFuture
+
New
[
|
x
:
Fut1
|
try_flatten
:
:
TryFlatten
:
:
new
(
x
)
]
)
;
delegate_all
!
(
/
/
/
Future
for
the
[
try_flatten_err
]
(
TryFutureExt
:
:
try_flatten_err
)
method
.
TryFlattenErr
<
Fut1
Fut2
>
(
try_flatten_err
:
:
TryFlattenErr
<
Fut1
Fut2
>
)
:
Debug
+
Future
+
FusedFuture
+
New
[
|
x
:
Fut1
|
try_flatten_err
:
:
TryFlattenErr
:
:
new
(
x
)
]
)
;
delegate_all
!
(
/
/
/
Future
for
the
[
try_flatten_stream
]
(
TryFutureExt
:
:
try_flatten_stream
)
method
.
TryFlattenStream
<
Fut
>
(
try_flatten
:
:
TryFlatten
<
Fut
Fut
:
:
Ok
>
)
:
Debug
+
Sink
+
Stream
+
FusedStream
+
New
[
|
x
:
Fut
|
try_flatten
:
:
TryFlatten
:
:
new
(
x
)
]
where
Fut
:
TryFuture
)
;
#
[
cfg
(
feature
=
"
sink
"
)
]
delegate_all
!
(
/
/
/
Sink
for
the
[
flatten_sink
]
(
TryFutureExt
:
:
flatten_sink
)
method
.
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
sink
"
)
)
)
]
FlattenSink
<
Fut
Si
>
(
try_flatten
:
:
TryFlatten
<
Fut
Si
>
)
:
Debug
+
Sink
+
Stream
+
FusedStream
+
New
[
|
x
:
Fut
|
try_flatten
:
:
TryFlatten
:
:
new
(
x
)
]
)
;
delegate_all
!
(
/
/
/
Future
for
the
[
and_then
]
(
TryFutureExt
:
:
and_then
)
method
.
AndThen
<
Fut1
Fut2
F
>
(
TryFlatten
<
MapOk
<
Fut1
F
>
Fut2
>
)
:
Debug
+
Future
+
FusedFuture
+
New
[
|
x
:
Fut1
f
:
F
|
TryFlatten
:
:
new
(
MapOk
:
:
new
(
x
f
)
)
]
)
;
delegate_all
!
(
/
/
/
Future
for
the
[
or_else
]
(
TryFutureExt
:
:
or_else
)
method
.
OrElse
<
Fut1
Fut2
F
>
(
TryFlattenErr
<
MapErr
<
Fut1
F
>
Fut2
>
)
:
Debug
+
Future
+
FusedFuture
+
New
[
|
x
:
Fut1
f
:
F
|
TryFlattenErr
:
:
new
(
MapErr
:
:
new
(
x
f
)
)
]
)
;
delegate_all
!
(
/
/
/
Future
for
the
[
err_into
]
(
TryFutureExt
:
:
err_into
)
method
.
ErrInto
<
Fut
E
>
(
MapErr
<
Fut
IntoFn
<
E
>
>
)
:
Debug
+
Future
+
FusedFuture
+
New
[
|
x
:
Fut
|
MapErr
:
:
new
(
x
into_fn
(
)
)
]
)
;
delegate_all
!
(
/
/
/
Future
for
the
[
ok_into
]
(
TryFutureExt
:
:
ok_into
)
method
.
OkInto
<
Fut
E
>
(
MapOk
<
Fut
IntoFn
<
E
>
>
)
:
Debug
+
Future
+
FusedFuture
+
New
[
|
x
:
Fut
|
MapOk
:
:
new
(
x
into_fn
(
)
)
]
)
;
delegate_all
!
(
/
/
/
Future
for
the
[
inspect_ok
]
(
super
:
:
TryFutureExt
:
:
inspect_ok
)
method
.
InspectOk
<
Fut
F
>
(
Inspect
<
IntoFuture
<
Fut
>
InspectOkFn
<
F
>
>
)
:
Debug
+
Future
+
FusedFuture
+
New
[
|
x
:
Fut
f
:
F
|
Inspect
:
:
new
(
IntoFuture
:
:
new
(
x
)
inspect_ok_fn
(
f
)
)
]
)
;
delegate_all
!
(
/
/
/
Future
for
the
[
inspect_err
]
(
super
:
:
TryFutureExt
:
:
inspect_err
)
method
.
InspectErr
<
Fut
F
>
(
Inspect
<
IntoFuture
<
Fut
>
InspectErrFn
<
F
>
>
)
:
Debug
+
Future
+
FusedFuture
+
New
[
|
x
:
Fut
f
:
F
|
Inspect
:
:
new
(
IntoFuture
:
:
new
(
x
)
inspect_err_fn
(
f
)
)
]
)
;
#
[
allow
(
unreachable_pub
)
]
pub
use
self
:
:
into_future
:
:
IntoFuture
;
delegate_all
!
(
/
/
/
Future
for
the
[
map_ok
]
(
TryFutureExt
:
:
map_ok
)
method
.
MapOk
<
Fut
F
>
(
Map
<
IntoFuture
<
Fut
>
MapOkFn
<
F
>
>
)
:
Debug
+
Future
+
FusedFuture
+
New
[
|
x
:
Fut
f
:
F
|
Map
:
:
new
(
IntoFuture
:
:
new
(
x
)
map_ok_fn
(
f
)
)
]
)
;
delegate_all
!
(
/
/
/
Future
for
the
[
map_err
]
(
TryFutureExt
:
:
map_err
)
method
.
MapErr
<
Fut
F
>
(
Map
<
IntoFuture
<
Fut
>
MapErrFn
<
F
>
>
)
:
Debug
+
Future
+
FusedFuture
+
New
[
|
x
:
Fut
f
:
F
|
Map
:
:
new
(
IntoFuture
:
:
new
(
x
)
map_err_fn
(
f
)
)
]
)
;
delegate_all
!
(
/
/
/
Future
for
the
[
map_ok_or_else
]
(
TryFutureExt
:
:
map_ok_or_else
)
method
.
MapOkOrElse
<
Fut
F
G
>
(
Map
<
IntoFuture
<
Fut
>
MapOkOrElseFn
<
F
G
>
>
)
:
Debug
+
Future
+
FusedFuture
+
New
[
|
x
:
Fut
f
:
F
g
:
G
|
Map
:
:
new
(
IntoFuture
:
:
new
(
x
)
map_ok_or_else_fn
(
f
g
)
)
]
)
;
delegate_all
!
(
/
/
/
Future
for
the
[
unwrap_or_else
]
(
TryFutureExt
:
:
unwrap_or_else
)
method
.
UnwrapOrElse
<
Fut
F
>
(
Map
<
IntoFuture
<
Fut
>
UnwrapOrElseFn
<
F
>
>
)
:
Debug
+
Future
+
FusedFuture
+
New
[
|
x
:
Fut
f
:
F
|
Map
:
:
new
(
IntoFuture
:
:
new
(
x
)
unwrap_or_else_fn
(
f
)
)
]
)
;
impl
<
Fut
:
?
Sized
+
TryFuture
>
TryFutureExt
for
Fut
{
}
pub
trait
TryFutureExt
:
TryFuture
{
#
[
cfg
(
feature
=
"
sink
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
sink
"
)
)
)
]
fn
flatten_sink
<
Item
>
(
self
)
-
>
FlattenSink
<
Self
Self
:
:
Ok
>
where
Self
:
:
Ok
:
Sink
<
Item
Error
=
Self
:
:
Error
>
Self
:
Sized
{
crate
:
:
sink
:
:
assert_sink
:
:
<
Item
Self
:
:
Error
_
>
(
FlattenSink
:
:
new
(
self
)
)
}
fn
map_ok
<
T
F
>
(
self
f
:
F
)
-
>
MapOk
<
Self
F
>
where
F
:
FnOnce
(
Self
:
:
Ok
)
-
>
T
Self
:
Sized
{
assert_future
:
:
<
Result
<
T
Self
:
:
Error
>
_
>
(
MapOk
:
:
new
(
self
f
)
)
}
fn
map_ok_or_else
<
T
E
F
>
(
self
e
:
E
f
:
F
)
-
>
MapOkOrElse
<
Self
F
E
>
where
F
:
FnOnce
(
Self
:
:
Ok
)
-
>
T
E
:
FnOnce
(
Self
:
:
Error
)
-
>
T
Self
:
Sized
{
assert_future
:
:
<
T
_
>
(
MapOkOrElse
:
:
new
(
self
f
e
)
)
}
fn
map_err
<
E
F
>
(
self
f
:
F
)
-
>
MapErr
<
Self
F
>
where
F
:
FnOnce
(
Self
:
:
Error
)
-
>
E
Self
:
Sized
{
assert_future
:
:
<
Result
<
Self
:
:
Ok
E
>
_
>
(
MapErr
:
:
new
(
self
f
)
)
}
fn
err_into
<
E
>
(
self
)
-
>
ErrInto
<
Self
E
>
where
Self
:
Sized
Self
:
:
Error
:
Into
<
E
>
{
assert_future
:
:
<
Result
<
Self
:
:
Ok
E
>
_
>
(
ErrInto
:
:
new
(
self
)
)
}
fn
ok_into
<
U
>
(
self
)
-
>
OkInto
<
Self
U
>
where
Self
:
Sized
Self
:
:
Ok
:
Into
<
U
>
{
assert_future
:
:
<
Result
<
U
Self
:
:
Error
>
_
>
(
OkInto
:
:
new
(
self
)
)
}
fn
and_then
<
Fut
F
>
(
self
f
:
F
)
-
>
AndThen
<
Self
Fut
F
>
where
F
:
FnOnce
(
Self
:
:
Ok
)
-
>
Fut
Fut
:
TryFuture
<
Error
=
Self
:
:
Error
>
Self
:
Sized
{
assert_future
:
:
<
Result
<
Fut
:
:
Ok
Fut
:
:
Error
>
_
>
(
AndThen
:
:
new
(
self
f
)
)
}
fn
or_else
<
Fut
F
>
(
self
f
:
F
)
-
>
OrElse
<
Self
Fut
F
>
where
F
:
FnOnce
(
Self
:
:
Error
)
-
>
Fut
Fut
:
TryFuture
<
Ok
=
Self
:
:
Ok
>
Self
:
Sized
{
assert_future
:
:
<
Result
<
Fut
:
:
Ok
Fut
:
:
Error
>
_
>
(
OrElse
:
:
new
(
self
f
)
)
}
fn
inspect_ok
<
F
>
(
self
f
:
F
)
-
>
InspectOk
<
Self
F
>
where
F
:
FnOnce
(
&
Self
:
:
Ok
)
Self
:
Sized
{
assert_future
:
:
<
Result
<
Self
:
:
Ok
Self
:
:
Error
>
_
>
(
InspectOk
:
:
new
(
self
f
)
)
}
fn
inspect_err
<
F
>
(
self
f
:
F
)
-
>
InspectErr
<
Self
F
>
where
F
:
FnOnce
(
&
Self
:
:
Error
)
Self
:
Sized
{
assert_future
:
:
<
Result
<
Self
:
:
Ok
Self
:
:
Error
>
_
>
(
InspectErr
:
:
new
(
self
f
)
)
}
fn
try_flatten
(
self
)
-
>
TryFlatten
<
Self
Self
:
:
Ok
>
where
Self
:
:
Ok
:
TryFuture
<
Error
=
Self
:
:
Error
>
Self
:
Sized
{
assert_future
:
:
<
Result
<
<
Self
:
:
Ok
as
TryFuture
>
:
:
Ok
Self
:
:
Error
>
_
>
(
TryFlatten
:
:
new
(
self
)
)
}
fn
try_flatten_stream
(
self
)
-
>
TryFlattenStream
<
Self
>
where
Self
:
:
Ok
:
TryStream
<
Error
=
Self
:
:
Error
>
Self
:
Sized
{
assert_stream
:
:
<
Result
<
<
Self
:
:
Ok
as
TryStream
>
:
:
Ok
Self
:
:
Error
>
_
>
(
TryFlattenStream
:
:
new
(
self
)
)
}
fn
unwrap_or_else
<
F
>
(
self
f
:
F
)
-
>
UnwrapOrElse
<
Self
F
>
where
Self
:
Sized
F
:
FnOnce
(
Self
:
:
Error
)
-
>
Self
:
:
Ok
{
assert_future
:
:
<
Self
:
:
Ok
_
>
(
UnwrapOrElse
:
:
new
(
self
f
)
)
}
#
[
cfg
(
feature
=
"
compat
"
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
compat
"
)
)
)
]
fn
compat
(
self
)
-
>
Compat
<
Self
>
where
Self
:
Sized
+
Unpin
{
Compat
:
:
new
(
self
)
}
fn
into_future
(
self
)
-
>
IntoFuture
<
Self
>
where
Self
:
Sized
{
assert_future
:
:
<
Result
<
Self
:
:
Ok
Self
:
:
Error
>
_
>
(
IntoFuture
:
:
new
(
self
)
)
}
fn
try_poll_unpin
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Result
<
Self
:
:
Ok
Self
:
:
Error
>
>
where
Self
:
Unpin
{
Pin
:
:
new
(
self
)
.
try_poll
(
cx
)
}
}
