use
core
:
:
fmt
;
use
core
:
:
future
:
:
Future
;
use
core
:
:
iter
:
:
FromIterator
;
use
core
:
:
mem
;
use
core
:
:
pin
:
:
Pin
;
use
core
:
:
task
:
:
{
Context
Poll
}
;
use
alloc
:
:
boxed
:
:
Box
;
use
alloc
:
:
vec
:
:
Vec
;
use
super
:
:
TryFuture
;
#
[
derive
(
Debug
)
]
enum
ElemState
<
F
>
where
F
:
TryFuture
{
Pending
(
F
)
Done
(
Option
<
F
:
:
Ok
>
)
}
impl
<
F
>
ElemState
<
F
>
where
F
:
TryFuture
{
fn
pending_pin_mut
(
self
:
Pin
<
&
mut
Self
>
)
-
>
Option
<
Pin
<
&
mut
F
>
>
{
match
unsafe
{
self
.
get_unchecked_mut
(
)
}
{
ElemState
:
:
Pending
(
f
)
=
>
Some
(
unsafe
{
Pin
:
:
new_unchecked
(
f
)
}
)
ElemState
:
:
Done
(
_
)
=
>
None
}
}
fn
take_done
(
self
:
Pin
<
&
mut
Self
>
)
-
>
Option
<
F
:
:
Ok
>
{
match
unsafe
{
self
.
get_unchecked_mut
(
)
}
{
ElemState
:
:
Pending
(
_
)
=
>
None
ElemState
:
:
Done
(
output
)
=
>
output
.
take
(
)
}
}
}
impl
<
F
>
Unpin
for
ElemState
<
F
>
where
F
:
TryFuture
+
Unpin
{
}
fn
iter_pin_mut
<
T
>
(
slice
:
Pin
<
&
mut
[
T
]
>
)
-
>
impl
Iterator
<
Item
=
Pin
<
&
mut
T
>
>
{
unsafe
{
slice
.
get_unchecked_mut
(
)
}
.
iter_mut
(
)
.
map
(
|
t
|
unsafe
{
Pin
:
:
new_unchecked
(
t
)
}
)
}
enum
FinalState
<
E
=
(
)
>
{
Pending
AllDone
Error
(
E
)
}
#
[
must_use
=
"
futures
do
nothing
unless
you
.
await
or
poll
them
"
]
pub
struct
TryJoinAll
<
F
>
where
F
:
TryFuture
{
elems
:
Pin
<
Box
<
[
ElemState
<
F
>
]
>
>
}
impl
<
F
>
fmt
:
:
Debug
for
TryJoinAll
<
F
>
where
F
:
TryFuture
+
fmt
:
:
Debug
F
:
:
Ok
:
fmt
:
:
Debug
F
:
:
Error
:
fmt
:
:
Debug
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
TryJoinAll
"
)
.
field
(
"
elems
"
&
self
.
elems
)
.
finish
(
)
}
}
pub
fn
try_join_all
<
I
>
(
i
:
I
)
-
>
TryJoinAll
<
I
:
:
Item
>
where
I
:
IntoIterator
I
:
:
Item
:
TryFuture
{
let
elems
:
Box
<
[
_
]
>
=
i
.
into_iter
(
)
.
map
(
ElemState
:
:
Pending
)
.
collect
(
)
;
TryJoinAll
{
elems
:
elems
.
into
(
)
}
}
impl
<
F
>
Future
for
TryJoinAll
<
F
>
where
F
:
TryFuture
{
type
Output
=
Result
<
Vec
<
F
:
:
Ok
>
F
:
:
Error
>
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
let
mut
state
=
FinalState
:
:
AllDone
;
for
mut
elem
in
iter_pin_mut
(
self
.
elems
.
as_mut
(
)
)
{
if
let
Some
(
pending
)
=
elem
.
as_mut
(
)
.
pending_pin_mut
(
)
{
match
pending
.
try_poll
(
cx
)
{
Poll
:
:
Pending
=
>
state
=
FinalState
:
:
Pending
Poll
:
:
Ready
(
output
)
=
>
match
output
{
Ok
(
item
)
=
>
elem
.
set
(
ElemState
:
:
Done
(
Some
(
item
)
)
)
Err
(
e
)
=
>
{
state
=
FinalState
:
:
Error
(
e
)
;
break
;
}
}
}
}
}
match
state
{
FinalState
:
:
Pending
=
>
Poll
:
:
Pending
FinalState
:
:
AllDone
=
>
{
let
mut
elems
=
mem
:
:
replace
(
&
mut
self
.
elems
Box
:
:
pin
(
[
]
)
)
;
let
results
=
iter_pin_mut
(
elems
.
as_mut
(
)
)
.
map
(
|
e
|
e
.
take_done
(
)
.
unwrap
(
)
)
.
collect
(
)
;
Poll
:
:
Ready
(
Ok
(
results
)
)
}
FinalState
:
:
Error
(
e
)
=
>
{
let
_
=
mem
:
:
replace
(
&
mut
self
.
elems
Box
:
:
pin
(
[
]
)
)
;
Poll
:
:
Ready
(
Err
(
e
)
)
}
}
}
}
impl
<
F
:
TryFuture
>
FromIterator
<
F
>
for
TryJoinAll
<
F
>
{
fn
from_iter
<
T
:
IntoIterator
<
Item
=
F
>
>
(
iter
:
T
)
-
>
Self
{
try_join_all
(
iter
)
}
}
