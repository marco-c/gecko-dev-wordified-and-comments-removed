use
core
:
:
pin
:
:
Pin
;
use
futures_core
:
:
future
:
:
{
Future
TryFuture
}
;
use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
use
crate
:
:
future
:
:
{
Either
TryFutureExt
}
;
#
[
must_use
=
"
futures
do
nothing
unless
you
.
await
or
poll
them
"
]
#
[
derive
(
Debug
)
]
pub
struct
TrySelect
<
A
B
>
{
inner
:
Option
<
(
A
B
)
>
}
impl
<
A
:
Unpin
B
:
Unpin
>
Unpin
for
TrySelect
<
A
B
>
{
}
pub
fn
try_select
<
A
B
>
(
future1
:
A
future2
:
B
)
-
>
TrySelect
<
A
B
>
where
A
:
TryFuture
+
Unpin
B
:
TryFuture
+
Unpin
{
TrySelect
{
inner
:
Some
(
(
future1
future2
)
)
}
}
impl
<
A
:
Unpin
B
:
Unpin
>
Future
for
TrySelect
<
A
B
>
where
A
:
TryFuture
B
:
TryFuture
{
#
[
allow
(
clippy
:
:
type_complexity
)
]
type
Output
=
Result
<
Either
<
(
A
:
:
Ok
B
)
(
B
:
:
Ok
A
)
>
Either
<
(
A
:
:
Error
B
)
(
B
:
:
Error
A
)
>
>
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
let
(
mut
a
mut
b
)
=
self
.
inner
.
take
(
)
.
expect
(
"
cannot
poll
Select
twice
"
)
;
match
a
.
try_poll_unpin
(
cx
)
{
Poll
:
:
Ready
(
Err
(
x
)
)
=
>
Poll
:
:
Ready
(
Err
(
Either
:
:
Left
(
(
x
b
)
)
)
)
Poll
:
:
Ready
(
Ok
(
x
)
)
=
>
Poll
:
:
Ready
(
Ok
(
Either
:
:
Left
(
(
x
b
)
)
)
)
Poll
:
:
Pending
=
>
match
b
.
try_poll_unpin
(
cx
)
{
Poll
:
:
Ready
(
Err
(
x
)
)
=
>
Poll
:
:
Ready
(
Err
(
Either
:
:
Right
(
(
x
a
)
)
)
)
Poll
:
:
Ready
(
Ok
(
x
)
)
=
>
Poll
:
:
Ready
(
Ok
(
Either
:
:
Right
(
(
x
a
)
)
)
)
Poll
:
:
Pending
=
>
{
self
.
inner
=
Some
(
(
a
b
)
)
;
Poll
:
:
Pending
}
}
}
}
}
