use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
use
futures_io
:
:
{
AsyncWrite
IoSlice
}
;
use
std
:
:
fmt
;
use
std
:
:
io
;
use
std
:
:
pin
:
:
Pin
;
#
[
must_use
=
"
writers
do
nothing
unless
polled
"
]
pub
struct
Sink
{
_priv
:
(
)
}
pub
fn
sink
(
)
-
>
Sink
{
Sink
{
_priv
:
(
)
}
}
impl
AsyncWrite
for
Sink
{
#
[
inline
]
fn
poll_write
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Poll
:
:
Ready
(
Ok
(
buf
.
len
(
)
)
)
}
#
[
inline
]
fn
poll_write_vectored
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
bufs
:
&
[
IoSlice
<
'
_
>
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Poll
:
:
Ready
(
Ok
(
bufs
.
iter
(
)
.
map
(
|
b
|
b
.
len
(
)
)
.
sum
(
)
)
)
}
#
[
inline
]
fn
poll_flush
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
#
[
inline
]
fn
poll_close
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
}
impl
fmt
:
:
Debug
for
Sink
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
pad
(
"
Sink
{
.
.
}
"
)
}
}
