use
futures_core
:
:
future
:
:
Future
;
use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
use
futures_io
:
:
AsyncRead
;
use
std
:
:
io
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
vec
:
:
Vec
;
#
[
derive
(
Debug
)
]
#
[
must_use
=
"
futures
do
nothing
unless
you
.
await
or
poll
them
"
]
pub
struct
ReadToEnd
<
'
a
R
:
?
Sized
>
{
reader
:
&
'
a
mut
R
buf
:
&
'
a
mut
Vec
<
u8
>
start_len
:
usize
}
impl
<
R
:
?
Sized
+
Unpin
>
Unpin
for
ReadToEnd
<
'
_
R
>
{
}
impl
<
'
a
R
:
AsyncRead
+
?
Sized
+
Unpin
>
ReadToEnd
<
'
a
R
>
{
pub
(
super
)
fn
new
(
reader
:
&
'
a
mut
R
buf
:
&
'
a
mut
Vec
<
u8
>
)
-
>
Self
{
let
start_len
=
buf
.
len
(
)
;
Self
{
reader
buf
start_len
}
}
}
struct
Guard
<
'
a
>
{
buf
:
&
'
a
mut
Vec
<
u8
>
len
:
usize
}
impl
Drop
for
Guard
<
'
_
>
{
fn
drop
(
&
mut
self
)
{
unsafe
{
self
.
buf
.
set_len
(
self
.
len
)
;
}
}
}
pub
(
super
)
fn
read_to_end_internal
<
R
:
AsyncRead
+
?
Sized
>
(
mut
rd
:
Pin
<
&
mut
R
>
cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
Vec
<
u8
>
start_len
:
usize
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
let
mut
g
=
Guard
{
len
:
buf
.
len
(
)
buf
}
;
let
ret
;
loop
{
if
g
.
len
=
=
g
.
buf
.
len
(
)
{
unsafe
{
g
.
buf
.
reserve
(
32
)
;
let
capacity
=
g
.
buf
.
capacity
(
)
;
g
.
buf
.
set_len
(
capacity
)
;
super
:
:
initialize
(
&
rd
&
mut
g
.
buf
[
g
.
len
.
.
]
)
;
}
}
match
ready
!
(
rd
.
as_mut
(
)
.
poll_read
(
cx
&
mut
g
.
buf
[
g
.
len
.
.
]
)
)
{
Ok
(
0
)
=
>
{
ret
=
Poll
:
:
Ready
(
Ok
(
g
.
len
-
start_len
)
)
;
break
;
}
Ok
(
n
)
=
>
g
.
len
+
=
n
Err
(
e
)
=
>
{
ret
=
Poll
:
:
Ready
(
Err
(
e
)
)
;
break
;
}
}
}
ret
}
impl
<
A
>
Future
for
ReadToEnd
<
'
_
A
>
where
A
:
AsyncRead
+
?
Sized
+
Unpin
{
type
Output
=
io
:
:
Result
<
usize
>
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
let
this
=
&
mut
*
self
;
read_to_end_internal
(
Pin
:
:
new
(
&
mut
this
.
reader
)
cx
this
.
buf
this
.
start_len
)
}
}
