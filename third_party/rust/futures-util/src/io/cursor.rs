use
futures_core
:
:
task
:
:
{
Context
Poll
}
;
use
futures_io
:
:
{
AsyncBufRead
AsyncRead
AsyncSeek
AsyncWrite
IoSlice
IoSliceMut
SeekFrom
}
;
use
std
:
:
io
;
use
std
:
:
pin
:
:
Pin
;
#
[
derive
(
Clone
Debug
Default
)
]
pub
struct
Cursor
<
T
>
{
inner
:
io
:
:
Cursor
<
T
>
}
impl
<
T
>
Cursor
<
T
>
{
pub
fn
new
(
inner
:
T
)
-
>
Self
{
Self
{
inner
:
io
:
:
Cursor
:
:
new
(
inner
)
}
}
pub
fn
into_inner
(
self
)
-
>
T
{
self
.
inner
.
into_inner
(
)
}
pub
fn
get_ref
(
&
self
)
-
>
&
T
{
self
.
inner
.
get_ref
(
)
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
T
{
self
.
inner
.
get_mut
(
)
}
pub
fn
position
(
&
self
)
-
>
u64
{
self
.
inner
.
position
(
)
}
pub
fn
set_position
(
&
mut
self
pos
:
u64
)
{
self
.
inner
.
set_position
(
pos
)
}
}
impl
<
T
>
AsyncSeek
for
Cursor
<
T
>
where
T
:
AsRef
<
[
u8
]
>
+
Unpin
{
fn
poll_seek
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
pos
:
SeekFrom
)
-
>
Poll
<
io
:
:
Result
<
u64
>
>
{
Poll
:
:
Ready
(
io
:
:
Seek
:
:
seek
(
&
mut
self
.
inner
pos
)
)
}
}
impl
<
T
:
AsRef
<
[
u8
]
>
+
Unpin
>
AsyncRead
for
Cursor
<
T
>
{
fn
poll_read
(
mut
self
:
Pin
<
&
mut
Self
>
_cx
:
&
mut
Context
<
'
_
>
buf
:
&
mut
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Poll
:
:
Ready
(
io
:
:
Read
:
:
read
(
&
mut
self
.
inner
buf
)
)
}
fn
poll_read_vectored
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
bufs
:
&
mut
[
IoSliceMut
<
'
_
>
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Poll
:
:
Ready
(
io
:
:
Read
:
:
read_vectored
(
&
mut
self
.
inner
bufs
)
)
}
}
impl
<
T
>
AsyncBufRead
for
Cursor
<
T
>
where
T
:
AsRef
<
[
u8
]
>
+
Unpin
{
fn
poll_fill_buf
(
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
&
[
u8
]
>
>
{
Poll
:
:
Ready
(
io
:
:
BufRead
:
:
fill_buf
(
&
mut
self
.
get_mut
(
)
.
inner
)
)
}
fn
consume
(
mut
self
:
Pin
<
&
mut
Self
>
amt
:
usize
)
{
io
:
:
BufRead
:
:
consume
(
&
mut
self
.
inner
amt
)
}
}
macro_rules
!
delegate_async_write_to_stdio
{
(
)
=
>
{
fn
poll_write
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
buf
:
&
[
u8
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Poll
:
:
Ready
(
io
:
:
Write
:
:
write
(
&
mut
self
.
inner
buf
)
)
}
fn
poll_write_vectored
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
bufs
:
&
[
IoSlice
<
'
_
>
]
)
-
>
Poll
<
io
:
:
Result
<
usize
>
>
{
Poll
:
:
Ready
(
io
:
:
Write
:
:
write_vectored
(
&
mut
self
.
inner
bufs
)
)
}
fn
poll_flush
(
mut
self
:
Pin
<
&
mut
Self
>
_
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
Poll
:
:
Ready
(
io
:
:
Write
:
:
flush
(
&
mut
self
.
inner
)
)
}
fn
poll_close
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
io
:
:
Result
<
(
)
>
>
{
self
.
poll_flush
(
cx
)
}
}
;
}
impl
AsyncWrite
for
Cursor
<
&
mut
[
u8
]
>
{
delegate_async_write_to_stdio
!
(
)
;
}
impl
AsyncWrite
for
Cursor
<
&
mut
Vec
<
u8
>
>
{
delegate_async_write_to_stdio
!
(
)
;
}
impl
AsyncWrite
for
Cursor
<
Vec
<
u8
>
>
{
delegate_async_write_to_stdio
!
(
)
;
}
impl
AsyncWrite
for
Cursor
<
Box
<
[
u8
]
>
>
{
delegate_async_write_to_stdio
!
(
)
;
}
