#
!
[
warn
(
rust_2018_idioms
single_use_lifetimes
)
]
use
autocfg
:
:
AutoCfg
;
use
std
:
:
env
;
include
!
(
"
no_atomic_cas
.
rs
"
)
;
fn
main
(
)
{
let
target
=
match
env
:
:
var
(
"
TARGET
"
)
{
Ok
(
target
)
=
>
target
Err
(
e
)
=
>
{
println
!
(
"
cargo
:
warning
=
{
}
:
unable
to
get
TARGET
environment
variable
:
{
}
"
env
!
(
"
CARGO_PKG_NAME
"
)
e
)
;
return
;
}
}
;
if
NO_ATOMIC_CAS_TARGETS
.
contains
(
&
&
*
target
)
{
println
!
(
"
cargo
:
rustc
-
cfg
=
futures_no_atomic_cas
"
)
;
}
let
cfg
=
match
AutoCfg
:
:
new
(
)
{
Ok
(
cfg
)
=
>
cfg
Err
(
e
)
=
>
{
println
!
(
"
cargo
:
warning
=
{
}
:
unable
to
determine
rustc
version
:
{
}
"
env
!
(
"
CARGO_PKG_NAME
"
)
e
)
;
return
;
}
}
;
if
cfg
.
probe_rustc_version
(
1
45
)
{
println
!
(
"
cargo
:
rustc
-
cfg
=
fn_like_proc_macro
"
)
;
}
println
!
(
"
cargo
:
rerun
-
if
-
changed
=
no_atomic_cas
.
rs
"
)
;
}
