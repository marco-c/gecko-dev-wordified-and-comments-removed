use
std
:
:
hint
:
:
unreachable_unchecked
;
pub
trait
UncheckedOptionExt
<
T
>
{
unsafe
fn
unchecked_unwrap
(
self
)
-
>
T
;
unsafe
fn
unchecked_unwrap_none
(
self
)
;
}
pub
trait
UncheckedResultExt
<
T
E
>
{
unsafe
fn
unchecked_unwrap_ok
(
self
)
-
>
T
;
unsafe
fn
unchecked_unwrap_err
(
self
)
-
>
E
;
}
impl
<
T
>
UncheckedOptionExt
<
T
>
for
Option
<
T
>
{
unsafe
fn
unchecked_unwrap
(
self
)
-
>
T
{
match
self
{
Some
(
x
)
=
>
x
None
=
>
unreachable_unchecked
(
)
}
}
unsafe
fn
unchecked_unwrap_none
(
self
)
{
if
self
.
is_some
(
)
{
unreachable_unchecked
(
)
}
}
}
impl
<
T
E
>
UncheckedResultExt
<
T
E
>
for
Result
<
T
E
>
{
unsafe
fn
unchecked_unwrap_ok
(
self
)
-
>
T
{
match
self
{
Ok
(
x
)
=
>
x
Err
(
_
)
=
>
unreachable_unchecked
(
)
}
}
unsafe
fn
unchecked_unwrap_err
(
self
)
-
>
E
{
match
self
{
Ok
(
_
)
=
>
unreachable_unchecked
(
)
Err
(
e
)
=
>
e
}
}
}
