extern
crate
backtrace
;
#
[
cfg
(
all
(
windows
feature
=
"
dbghelp
"
)
)
]
extern
crate
winapi
;
use
backtrace
:
:
Backtrace
;
mod
_234567890_234567890_234567890_234567890_234567890
{
#
[
allow
(
non_camel_case_types
)
]
pub
struct
_234567890_234567890_234567890_234567890_234567890
<
T
>
(
T
)
;
impl
<
T
>
_234567890_234567890_234567890_234567890_234567890
<
T
>
{
#
[
allow
(
dead_code
)
]
pub
fn
new
(
)
-
>
:
:
Backtrace
{
:
:
Backtrace
:
:
new
(
)
}
}
}
#
[
test
]
#
[
cfg
(
all
(
windows
feature
=
"
dbghelp
"
target_env
=
"
msvc
"
)
)
]
fn
test_long_fn_name
(
)
{
use
_234567890_234567890_234567890_234567890_234567890
:
:
_234567890_234567890_234567890_234567890_234567890
as
S
;
let
bt
=
S
:
:
<
S
<
S
<
S
<
S
<
S
<
S
<
S
<
S
<
S
<
i32
>
>
>
>
>
>
>
>
>
>
:
:
new
(
)
;
println
!
(
"
{
:
?
}
"
bt
)
;
let
mut
found_long_name_frame
=
false
;
for
frame
in
bt
.
frames
(
)
{
let
symbols
=
frame
.
symbols
(
)
;
if
symbols
.
is_empty
(
)
{
continue
;
}
if
let
Some
(
function_name
)
=
symbols
[
0
]
.
name
(
)
{
let
function_name
=
function_name
.
as_str
(
)
.
unwrap
(
)
;
if
function_name
.
contains
(
"
:
:
_234567890_234567890_234567890_234567890_234567890
"
)
{
found_long_name_frame
=
true
;
assert_eq
!
(
function_name
.
len
(
)
winapi
:
:
MAX_SYM_NAME
-
1
)
;
}
}
}
assert
!
(
found_long_name_frame
)
;
}
