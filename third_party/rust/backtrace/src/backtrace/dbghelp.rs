#
!
[
allow
(
bad_style
)
]
use
std
:
:
mem
;
use
winapi
:
:
ctypes
:
:
*
;
use
winapi
:
:
shared
:
:
minwindef
:
:
*
;
use
winapi
:
:
um
:
:
processthreadsapi
;
use
winapi
:
:
um
:
:
winnt
:
:
{
self
CONTEXT
}
;
use
winapi
:
:
um
:
:
dbghelp
;
use
winapi
:
:
um
:
:
dbghelp
:
:
*
;
pub
struct
Frame
{
inner
:
STACKFRAME64
}
impl
Frame
{
pub
fn
ip
(
&
self
)
-
>
*
mut
c_void
{
self
.
inner
.
AddrPC
.
Offset
as
*
mut
_
}
pub
fn
symbol_address
(
&
self
)
-
>
*
mut
c_void
{
self
.
ip
(
)
}
}
#
[
inline
(
always
)
]
pub
fn
trace
(
cb
:
&
mut
FnMut
(
&
super
:
:
Frame
)
-
>
bool
)
{
let
_g
=
:
:
lock
:
:
lock
(
)
;
unsafe
{
let
process
=
processthreadsapi
:
:
GetCurrentProcess
(
)
;
let
thread
=
processthreadsapi
:
:
GetCurrentThread
(
)
;
let
mut
context
=
Box
:
:
new
(
mem
:
:
zeroed
:
:
<
CONTEXT
>
(
)
)
;
winnt
:
:
RtlCaptureContext
(
&
mut
*
context
)
;
let
mut
frame
=
super
:
:
Frame
{
inner
:
Frame
{
inner
:
mem
:
:
zeroed
(
)
}
}
;
let
image
=
init_frame
(
&
mut
frame
.
inner
.
inner
&
context
)
;
let
_c
=
:
:
dbghelp_init
(
)
;
while
dbghelp
:
:
StackWalk64
(
image
as
DWORD
process
thread
&
mut
frame
.
inner
.
inner
&
mut
*
context
as
*
mut
_
as
*
mut
_
None
Some
(
dbghelp
:
:
SymFunctionTableAccess64
)
Some
(
dbghelp
:
:
SymGetModuleBase64
)
None
)
=
=
TRUE
{
if
frame
.
inner
.
inner
.
AddrPC
.
Offset
=
=
frame
.
inner
.
inner
.
AddrReturn
.
Offset
|
|
frame
.
inner
.
inner
.
AddrPC
.
Offset
=
=
0
|
|
frame
.
inner
.
inner
.
AddrReturn
.
Offset
=
=
0
{
break
}
if
!
cb
(
&
frame
)
{
break
}
}
}
}
#
[
cfg
(
target_arch
=
"
x86_64
"
)
]
fn
init_frame
(
frame
:
&
mut
STACKFRAME64
ctx
:
&
CONTEXT
)
-
>
WORD
{
frame
.
AddrPC
.
Offset
=
ctx
.
Rip
as
u64
;
frame
.
AddrPC
.
Mode
=
AddrModeFlat
;
frame
.
AddrStack
.
Offset
=
ctx
.
Rsp
as
u64
;
frame
.
AddrStack
.
Mode
=
AddrModeFlat
;
frame
.
AddrFrame
.
Offset
=
ctx
.
Rbp
as
u64
;
frame
.
AddrFrame
.
Mode
=
AddrModeFlat
;
winnt
:
:
IMAGE_FILE_MACHINE_AMD64
}
#
[
cfg
(
target_arch
=
"
x86
"
)
]
fn
init_frame
(
frame
:
&
mut
STACKFRAME64
ctx
:
&
CONTEXT
)
-
>
WORD
{
frame
.
AddrPC
.
Offset
=
ctx
.
Eip
as
u64
;
frame
.
AddrPC
.
Mode
=
AddrModeFlat
;
frame
.
AddrStack
.
Offset
=
ctx
.
Esp
as
u64
;
frame
.
AddrStack
.
Mode
=
AddrModeFlat
;
frame
.
AddrFrame
.
Offset
=
ctx
.
Ebp
as
u64
;
frame
.
AddrFrame
.
Mode
=
AddrModeFlat
;
winnt
:
:
IMAGE_FILE_MACHINE_I386
}
