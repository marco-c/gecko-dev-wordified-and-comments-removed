use
core
:
:
ffi
:
:
c_void
;
pub
enum
Frame
{
Raw
(
*
mut
uw
:
:
_Unwind_Context
)
Cloned
{
ip
:
*
mut
c_void
symbol_address
:
*
mut
c_void
}
}
unsafe
impl
Send
for
Frame
{
}
unsafe
impl
Sync
for
Frame
{
}
impl
Frame
{
pub
fn
ip
(
&
self
)
-
>
*
mut
c_void
{
let
ctx
=
match
*
self
{
Frame
:
:
Raw
(
ctx
)
=
>
ctx
Frame
:
:
Cloned
{
ip
.
.
}
=
>
return
ip
}
;
unsafe
{
uw
:
:
_Unwind_GetIP
(
ctx
)
as
*
mut
c_void
}
}
pub
fn
symbol_address
(
&
self
)
-
>
*
mut
c_void
{
if
let
Frame
:
:
Cloned
{
symbol_address
.
.
}
=
*
self
{
return
symbol_address
;
}
if
cfg
!
(
target_os
=
"
macos
"
)
|
|
cfg
!
(
target_os
=
"
ios
"
)
{
self
.
ip
(
)
}
else
{
unsafe
{
uw
:
:
_Unwind_FindEnclosingFunction
(
self
.
ip
(
)
)
}
}
}
}
impl
Clone
for
Frame
{
fn
clone
(
&
self
)
-
>
Frame
{
Frame
:
:
Cloned
{
ip
:
self
.
ip
(
)
symbol_address
:
self
.
symbol_address
(
)
}
}
}
#
[
inline
(
always
)
]
pub
unsafe
fn
trace
(
mut
cb
:
&
mut
FnMut
(
&
super
:
:
Frame
)
-
>
bool
)
{
uw
:
:
_Unwind_Backtrace
(
trace_fn
&
mut
cb
as
*
mut
_
as
*
mut
_
)
;
extern
fn
trace_fn
(
ctx
:
*
mut
uw
:
:
_Unwind_Context
arg
:
*
mut
c_void
)
-
>
uw
:
:
_Unwind_Reason_Code
{
let
cb
=
unsafe
{
&
mut
*
(
arg
as
*
mut
&
mut
FnMut
(
&
super
:
:
Frame
)
-
>
bool
)
}
;
let
cx
=
super
:
:
Frame
{
inner
:
Frame
:
:
Raw
(
ctx
)
}
;
let
mut
bomb
=
crate
:
:
Bomb
{
enabled
:
true
}
;
let
keep_going
=
cb
(
&
cx
)
;
bomb
.
enabled
=
false
;
if
keep_going
{
uw
:
:
_URC_NO_REASON
}
else
{
uw
:
:
_URC_FAILURE
}
}
}
#
[
allow
(
non_camel_case_types
)
]
#
[
allow
(
non_snake_case
)
]
#
[
allow
(
dead_code
)
]
mod
uw
{
pub
use
self
:
:
_Unwind_Reason_Code
:
:
*
;
use
core
:
:
ffi
:
:
c_void
;
#
[
repr
(
C
)
]
pub
enum
_Unwind_Reason_Code
{
_URC_NO_REASON
=
0
_URC_FOREIGN_EXCEPTION_CAUGHT
=
1
_URC_FATAL_PHASE2_ERROR
=
2
_URC_FATAL_PHASE1_ERROR
=
3
_URC_NORMAL_STOP
=
4
_URC_END_OF_STACK
=
5
_URC_HANDLER_FOUND
=
6
_URC_INSTALL_CONTEXT
=
7
_URC_CONTINUE_UNWIND
=
8
_URC_FAILURE
=
9
}
pub
enum
_Unwind_Context
{
}
pub
type
_Unwind_Trace_Fn
=
extern
fn
(
ctx
:
*
mut
_Unwind_Context
arg
:
*
mut
c_void
)
-
>
_Unwind_Reason_Code
;
extern
{
#
[
cfg
(
not
(
all
(
target_os
=
"
ios
"
target_arch
=
"
arm
"
)
)
)
]
pub
fn
_Unwind_Backtrace
(
trace
:
_Unwind_Trace_Fn
trace_argument
:
*
mut
c_void
)
-
>
_Unwind_Reason_Code
;
#
[
cfg
(
all
(
not
(
all
(
target_os
=
"
android
"
target_arch
=
"
arm
"
)
)
not
(
all
(
target_os
=
"
freebsd
"
target_arch
=
"
arm
"
)
)
not
(
all
(
target_os
=
"
linux
"
target_arch
=
"
arm
"
)
)
)
)
]
pub
fn
_Unwind_GetIP
(
ctx
:
*
mut
_Unwind_Context
)
-
>
libc
:
:
uintptr_t
;
#
[
cfg
(
all
(
not
(
target_os
=
"
android
"
)
not
(
all
(
target_os
=
"
freebsd
"
target_arch
=
"
arm
"
)
)
not
(
all
(
target_os
=
"
linux
"
target_arch
=
"
arm
"
)
)
)
)
]
pub
fn
_Unwind_FindEnclosingFunction
(
pc
:
*
mut
c_void
)
-
>
*
mut
c_void
;
}
#
[
cfg
(
any
(
all
(
target_os
=
"
android
"
target_arch
=
"
arm
"
)
all
(
target_os
=
"
freebsd
"
target_arch
=
"
arm
"
)
all
(
target_os
=
"
linux
"
target_arch
=
"
arm
"
)
)
)
]
pub
unsafe
fn
_Unwind_GetIP
(
ctx
:
*
mut
_Unwind_Context
)
-
>
libc
:
:
uintptr_t
{
#
[
repr
(
C
)
]
enum
_Unwind_VRS_Result
{
_UVRSR_OK
=
0
_UVRSR_NOT_IMPLEMENTED
=
1
_UVRSR_FAILED
=
2
}
#
[
repr
(
C
)
]
enum
_Unwind_VRS_RegClass
{
_UVRSC_CORE
=
0
_UVRSC_VFP
=
1
_UVRSC_FPA
=
2
_UVRSC_WMMXD
=
3
_UVRSC_WMMXC
=
4
}
#
[
repr
(
C
)
]
enum
_Unwind_VRS_DataRepresentation
{
_UVRSD_UINT32
=
0
_UVRSD_VFPX
=
1
_UVRSD_FPAX
=
2
_UVRSD_UINT64
=
3
_UVRSD_FLOAT
=
4
_UVRSD_DOUBLE
=
5
}
type
_Unwind_Word
=
libc
:
:
c_uint
;
extern
{
fn
_Unwind_VRS_Get
(
ctx
:
*
mut
_Unwind_Context
klass
:
_Unwind_VRS_RegClass
word
:
_Unwind_Word
repr
:
_Unwind_VRS_DataRepresentation
data
:
*
mut
c_void
)
-
>
_Unwind_VRS_Result
;
}
let
mut
val
:
_Unwind_Word
=
0
;
let
ptr
=
&
mut
val
as
*
mut
_Unwind_Word
;
let
_
=
_Unwind_VRS_Get
(
ctx
_Unwind_VRS_RegClass
:
:
_UVRSC_CORE
15
_Unwind_VRS_DataRepresentation
:
:
_UVRSD_UINT32
ptr
as
*
mut
c_void
)
;
(
val
&
!
1
)
as
libc
:
:
uintptr_t
}
#
[
cfg
(
any
(
target_os
=
"
android
"
all
(
target_os
=
"
freebsd
"
target_arch
=
"
arm
"
)
all
(
target_os
=
"
linux
"
target_arch
=
"
arm
"
)
)
)
]
pub
unsafe
fn
_Unwind_FindEnclosingFunction
(
pc
:
*
mut
c_void
)
-
>
*
mut
c_void
{
pc
}
}
