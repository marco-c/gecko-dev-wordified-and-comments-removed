#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
backtrace
"
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
no_std
]
#
!
[
cfg_attr
(
all
(
feature
=
"
std
"
target_env
=
"
sgx
"
)
feature
(
sgx_platform
)
)
]
#
!
[
allow
(
bare_trait_objects
)
]
#
!
[
allow
(
rust_2018_idioms
)
]
#
[
cfg
(
feature
=
"
std
"
)
]
#
[
macro_use
]
extern
crate
std
;
pub
use
crate
:
:
backtrace
:
:
{
trace_unsynchronized
Frame
}
;
mod
backtrace
;
pub
use
crate
:
:
symbolize
:
:
resolve_frame_unsynchronized
;
pub
use
crate
:
:
symbolize
:
:
{
resolve_unsynchronized
Symbol
SymbolName
}
;
mod
symbolize
;
pub
use
crate
:
:
types
:
:
BytesOrWideString
;
mod
types
;
#
[
cfg
(
feature
=
"
std
"
)
]
pub
use
crate
:
:
symbolize
:
:
clear_symbol_cache
;
mod
print
;
pub
use
print
:
:
{
BacktraceFmt
BacktraceFrameFmt
PrintFmt
}
;
cfg_if
:
:
cfg_if
!
{
if
#
[
cfg
(
feature
=
"
std
"
)
]
{
pub
use
crate
:
:
backtrace
:
:
trace
;
pub
use
crate
:
:
symbolize
:
:
{
resolve
resolve_frame
}
;
pub
use
crate
:
:
capture
:
:
{
Backtrace
BacktraceFrame
BacktraceSymbol
}
;
mod
capture
;
}
}
#
[
allow
(
dead_code
)
]
struct
Bomb
{
enabled
:
bool
}
#
[
allow
(
dead_code
)
]
impl
Drop
for
Bomb
{
fn
drop
(
&
mut
self
)
{
if
self
.
enabled
{
panic
!
(
"
cannot
panic
during
the
backtrace
function
"
)
;
}
}
}
#
[
allow
(
dead_code
)
]
#
[
cfg
(
feature
=
"
std
"
)
]
mod
lock
{
use
std
:
:
boxed
:
:
Box
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
sync
:
:
{
Mutex
MutexGuard
Once
}
;
pub
struct
LockGuard
(
Option
<
MutexGuard
<
'
static
(
)
>
>
)
;
static
mut
LOCK
:
*
mut
Mutex
<
(
)
>
=
0
as
*
mut
_
;
static
INIT
:
Once
=
Once
:
:
new
(
)
;
thread_local
!
(
static
LOCK_HELD
:
Cell
<
bool
>
=
Cell
:
:
new
(
false
)
)
;
impl
Drop
for
LockGuard
{
fn
drop
(
&
mut
self
)
{
if
self
.
0
.
is_some
(
)
{
LOCK_HELD
.
with
(
|
slot
|
{
assert
!
(
slot
.
get
(
)
)
;
slot
.
set
(
false
)
;
}
)
;
}
}
}
pub
fn
lock
(
)
-
>
LockGuard
{
if
LOCK_HELD
.
with
(
|
l
|
l
.
get
(
)
)
{
return
LockGuard
(
None
)
;
}
LOCK_HELD
.
with
(
|
s
|
s
.
set
(
true
)
)
;
unsafe
{
INIT
.
call_once
(
|
|
{
LOCK
=
Box
:
:
into_raw
(
Box
:
:
new
(
Mutex
:
:
new
(
(
)
)
)
)
;
}
)
;
LockGuard
(
Some
(
(
*
LOCK
)
.
lock
(
)
.
unwrap
(
)
)
)
}
}
}
#
[
cfg
(
all
(
windows
feature
=
"
dbghelp
"
not
(
target_vendor
=
"
uwp
"
)
)
)
]
mod
dbghelp
;
#
[
cfg
(
windows
)
]
mod
windows
;
