use
camino
:
:
Utf8PathBuf
;
use
clap
:
:
{
Parser
Subcommand
}
;
use
uniffi_bindgen
:
:
bindings
:
:
TargetLanguage
;
#
[
derive
(
Parser
)
]
#
[
clap
(
name
=
"
uniffi
-
bindgen
"
)
]
#
[
clap
(
version
=
clap
:
:
crate_version
!
(
)
)
]
#
[
clap
(
propagate_version
=
true
)
]
struct
Cli
{
#
[
clap
(
subcommand
)
]
command
:
Commands
}
#
[
derive
(
Subcommand
)
]
enum
Commands
{
Generate
{
#
[
clap
(
long
short
value_enum
)
]
language
:
Vec
<
TargetLanguage
>
#
[
clap
(
long
short
)
]
out_dir
:
Option
<
Utf8PathBuf
>
#
[
clap
(
long
short
)
]
no_format
:
bool
#
[
clap
(
long
short
)
]
config
:
Option
<
Utf8PathBuf
>
#
[
clap
(
long
)
]
lib_file
:
Option
<
Utf8PathBuf
>
#
[
clap
(
long
=
"
library
"
)
]
library_mode
:
bool
#
[
clap
(
long
=
"
crate
"
)
]
crate_name
:
Option
<
String
>
source
:
Utf8PathBuf
}
Scaffolding
{
#
[
clap
(
long
short
)
]
out_dir
:
Option
<
Utf8PathBuf
>
#
[
clap
(
long
short
)
]
no_format
:
bool
udl_file
:
Utf8PathBuf
}
PrintJson
{
path
:
Utf8PathBuf
}
}
pub
fn
run_main
(
)
-
>
anyhow
:
:
Result
<
(
)
>
{
let
cli
=
Cli
:
:
parse
(
)
;
match
cli
.
command
{
Commands
:
:
Generate
{
language
out_dir
no_format
config
lib_file
source
crate_name
library_mode
}
=
>
{
if
library_mode
{
if
lib_file
.
is_some
(
)
{
panic
!
(
"
-
-
lib
-
file
is
not
compatible
with
-
-
library
.
"
)
}
if
config
.
is_some
(
)
{
panic
!
(
"
-
-
config
is
not
compatible
with
-
-
library
.
The
config
file
(
s
)
will
be
found
automatically
.
"
)
}
let
out_dir
=
out_dir
.
expect
(
"
-
-
out
-
dir
is
required
when
using
-
-
library
"
)
;
if
language
.
is_empty
(
)
{
panic
!
(
"
please
specify
at
least
one
language
with
-
-
language
"
)
}
uniffi_bindgen
:
:
library_mode
:
:
generate_bindings
(
&
source
crate_name
&
language
&
out_dir
!
no_format
)
?
;
}
else
{
if
crate_name
.
is_some
(
)
{
panic
!
(
"
-
-
crate
requires
-
-
library
.
"
)
}
uniffi_bindgen
:
:
generate_bindings
(
&
source
config
.
as_deref
(
)
language
out_dir
.
as_deref
(
)
lib_file
.
as_deref
(
)
!
no_format
)
?
;
}
}
Commands
:
:
Scaffolding
{
out_dir
no_format
udl_file
}
=
>
{
uniffi_bindgen
:
:
generate_component_scaffolding
(
&
udl_file
out_dir
.
as_deref
(
)
!
no_format
)
?
;
}
Commands
:
:
PrintJson
{
path
}
=
>
{
uniffi_bindgen
:
:
print_json
(
&
path
)
?
;
}
}
;
Ok
(
(
)
)
}
