use
camino
:
:
Utf8PathBuf
;
use
clap
:
:
{
Parser
Subcommand
}
;
#
[
derive
(
Parser
)
]
#
[
clap
(
name
=
"
uniffi
-
bindgen
"
)
]
#
[
clap
(
version
=
clap
:
:
crate_version
!
(
)
)
]
#
[
clap
(
propagate_version
=
true
)
]
struct
Cli
{
#
[
clap
(
subcommand
)
]
command
:
Commands
}
#
[
derive
(
Subcommand
)
]
enum
Commands
{
Generate
{
#
[
clap
(
long
short
possible_values
=
&
[
"
kotlin
"
"
python
"
"
swift
"
"
ruby
"
]
)
]
language
:
Vec
<
String
>
#
[
clap
(
long
short
)
]
out_dir
:
Option
<
Utf8PathBuf
>
#
[
clap
(
long
short
)
]
no_format
:
bool
#
[
clap
(
long
short
)
]
config
:
Option
<
Utf8PathBuf
>
#
[
clap
(
long
)
]
lib_file
:
Option
<
Utf8PathBuf
>
udl_file
:
Utf8PathBuf
}
Scaffolding
{
#
[
clap
(
long
short
)
]
out_dir
:
Option
<
Utf8PathBuf
>
#
[
clap
(
long
short
)
]
config
:
Option
<
Utf8PathBuf
>
#
[
clap
(
long
short
)
]
no_format
:
bool
udl_file
:
Utf8PathBuf
}
PrintJson
{
path
:
Utf8PathBuf
}
}
pub
fn
run_main
(
)
-
>
anyhow
:
:
Result
<
(
)
>
{
let
cli
=
Cli
:
:
parse
(
)
;
match
&
cli
.
command
{
Commands
:
:
Generate
{
language
out_dir
no_format
config
lib_file
udl_file
}
=
>
uniffi_bindgen
:
:
generate_bindings
(
udl_file
config
.
as_deref
(
)
language
.
iter
(
)
.
map
(
String
:
:
as_str
)
.
collect
(
)
out_dir
.
as_deref
(
)
lib_file
.
as_deref
(
)
!
no_format
)
Commands
:
:
Scaffolding
{
out_dir
config
no_format
udl_file
}
=
>
uniffi_bindgen
:
:
generate_component_scaffolding
(
udl_file
config
.
as_deref
(
)
out_dir
.
as_deref
(
)
!
no_format
)
Commands
:
:
PrintJson
{
path
}
=
>
uniffi_bindgen
:
:
print_json
(
path
)
}
?
;
Ok
(
(
)
)
}
