use
aa_stroke
:
:
{
StrokeStyle
LineCap
LineJoin
Point
Stroker
tri_rasterize
:
:
rasterize_to_mask
}
;
fn
write_image
(
data
:
&
[
u8
]
path
:
&
str
width
:
u32
height
:
u32
)
{
use
std
:
:
path
:
:
Path
;
use
std
:
:
fs
:
:
File
;
use
std
:
:
io
:
:
BufWriter
;
let
path
=
Path
:
:
new
(
path
)
;
let
file
=
File
:
:
create
(
path
)
.
unwrap
(
)
;
let
w
=
&
mut
BufWriter
:
:
new
(
file
)
;
let
mut
encoder
=
png
:
:
Encoder
:
:
new
(
w
width
height
)
;
encoder
.
set_color
(
png
:
:
ColorType
:
:
Grayscale
)
;
encoder
.
set_depth
(
png
:
:
BitDepth
:
:
Eight
)
;
let
mut
writer
=
encoder
.
write_header
(
)
.
unwrap
(
)
;
writer
.
write_image_data
(
&
data
)
.
unwrap
(
)
;
}
fn
main
(
)
{
let
mut
stroker
=
Stroker
:
:
new
(
&
StrokeStyle
{
cap
:
LineCap
:
:
Round
join
:
LineJoin
:
:
Bevel
width
:
20
.
.
.
Default
:
:
default
(
)
}
)
;
stroker
.
move_to
(
Point
:
:
new
(
20
.
20
.
)
false
)
;
stroker
.
line_to
(
Point
:
:
new
(
100
.
100
.
)
)
;
stroker
.
line_to_capped
(
Point
:
:
new
(
110
.
20
.
)
)
;
stroker
.
move_to
(
Point
:
:
new
(
120
.
20
.
)
true
)
;
stroker
.
line_to
(
Point
:
:
new
(
120
.
50
.
)
)
;
stroker
.
line_to
(
Point
:
:
new
(
140
.
50
.
)
)
;
stroker
.
close
(
)
;
stroker
.
move_to
(
Point
:
:
new
(
20
.
160
.
)
true
)
;
stroker
.
curve_to
(
Point
:
:
new
(
100
.
160
.
)
Point
:
:
new
(
100
.
180
.
)
Point
:
:
new
(
20
.
180
.
)
)
;
stroker
.
close
(
)
;
let
stroked
=
stroker
.
finish
(
)
;
dbg
!
(
&
stroked
)
;
println
!
(
"
num
of
vertices
{
}
"
stroked
.
len
(
)
)
;
let
mask
=
rasterize_to_mask
(
&
stroked
200
200
)
;
write_image
(
&
mask
"
out
.
png
"
200
200
)
;
}
