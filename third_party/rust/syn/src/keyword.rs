#
[
macro_export
(
local_inner_macros
)
]
macro_rules
!
custom_keyword
{
(
ident
:
ident
)
=
>
{
pub
struct
ident
{
pub
span
:
crate
:
:
export
:
:
Span
}
#
[
doc
(
hidden
)
]
#
[
allow
(
non_snake_case
)
]
pub
fn
ident
<
__S
:
crate
:
:
export
:
:
IntoSpans
<
[
crate
:
:
export
:
:
Span
;
1
]
>
>
(
span
:
__S
)
-
>
ident
{
ident
{
span
:
crate
:
:
export
:
:
IntoSpans
:
:
into_spans
(
span
)
[
0
]
}
}
impl
crate
:
:
export
:
:
Default
for
ident
{
fn
default
(
)
-
>
Self
{
ident
{
span
:
crate
:
:
export
:
:
Span
:
:
call_site
(
)
}
}
}
impl_parse_for_custom_keyword
!
(
ident
)
;
impl_to_tokens_for_custom_keyword
!
(
ident
)
;
impl_clone_for_custom_keyword
!
(
ident
)
;
impl_extra_traits_for_custom_keyword
!
(
ident
)
;
}
;
}
#
[
cfg
(
feature
=
"
parsing
"
)
]
#
[
doc
(
hidden
)
]
#
[
macro_export
]
macro_rules
!
impl_parse_for_custom_keyword
{
(
ident
:
ident
)
=
>
{
/
/
For
peek
.
impl
crate
:
:
token
:
:
CustomKeyword
for
ident
{
fn
ident
(
)
-
>
&
'
static
crate
:
:
export
:
:
str
{
stringify
!
(
ident
)
}
fn
display
(
)
-
>
&
'
static
crate
:
:
export
:
:
str
{
concat
!
(
"
"
stringify
!
(
ident
)
"
"
)
}
}
impl
crate
:
:
parse
:
:
Parse
for
ident
{
fn
parse
(
input
:
crate
:
:
parse
:
:
ParseStream
)
-
>
crate
:
:
parse
:
:
Result
<
ident
>
{
input
.
step
(
|
cursor
|
{
if
let
crate
:
:
export
:
:
Some
(
(
ident
rest
)
)
=
cursor
.
ident
(
)
{
if
ident
=
=
stringify
!
(
ident
)
{
return
crate
:
:
export
:
:
Ok
(
(
ident
{
span
:
ident
.
span
(
)
}
rest
)
)
;
}
}
crate
:
:
export
:
:
Err
(
cursor
.
error
(
concat
!
(
"
expected
"
stringify
!
(
ident
)
"
"
)
)
)
}
)
}
}
}
;
}
#
[
cfg
(
not
(
feature
=
"
parsing
"
)
)
]
#
[
doc
(
hidden
)
]
#
[
macro_export
]
macro_rules
!
impl_parse_for_custom_keyword
{
(
ident
:
ident
)
=
>
{
}
;
}
#
[
cfg
(
feature
=
"
printing
"
)
]
#
[
doc
(
hidden
)
]
#
[
macro_export
]
macro_rules
!
impl_to_tokens_for_custom_keyword
{
(
ident
:
ident
)
=
>
{
impl
crate
:
:
export
:
:
ToTokens
for
ident
{
fn
to_tokens
(
&
self
tokens
:
&
mut
crate
:
:
export
:
:
TokenStream2
)
{
let
ident
=
crate
:
:
Ident
:
:
new
(
stringify
!
(
ident
)
self
.
span
)
;
crate
:
:
export
:
:
TokenStreamExt
:
:
append
(
tokens
ident
)
;
}
}
}
;
}
#
[
cfg
(
not
(
feature
=
"
printing
"
)
)
]
#
[
doc
(
hidden
)
]
#
[
macro_export
]
macro_rules
!
impl_to_tokens_for_custom_keyword
{
(
ident
:
ident
)
=
>
{
}
;
}
#
[
cfg
(
feature
=
"
clone
-
impls
"
)
]
#
[
doc
(
hidden
)
]
#
[
macro_export
]
macro_rules
!
impl_clone_for_custom_keyword
{
(
ident
:
ident
)
=
>
{
impl
crate
:
:
export
:
:
Copy
for
ident
{
}
impl
crate
:
:
export
:
:
Clone
for
ident
{
fn
clone
(
&
self
)
-
>
Self
{
*
self
}
}
}
;
}
#
[
cfg
(
not
(
feature
=
"
clone
-
impls
"
)
)
]
#
[
doc
(
hidden
)
]
#
[
macro_export
]
macro_rules
!
impl_clone_for_custom_keyword
{
(
ident
:
ident
)
=
>
{
}
;
}
#
[
cfg
(
feature
=
"
extra
-
traits
"
)
]
#
[
doc
(
hidden
)
]
#
[
macro_export
]
macro_rules
!
impl_extra_traits_for_custom_keyword
{
(
ident
:
ident
)
=
>
{
impl
crate
:
:
export
:
:
Debug
for
ident
{
fn
fmt
(
&
self
f
:
&
mut
crate
:
:
export
:
:
Formatter
)
-
>
crate
:
:
export
:
:
fmt
:
:
Result
{
crate
:
:
export
:
:
Formatter
:
:
write_str
(
f
stringify
!
(
ident
)
)
}
}
impl
crate
:
:
export
:
:
Eq
for
ident
{
}
impl
crate
:
:
export
:
:
PartialEq
for
ident
{
fn
eq
(
&
self
_other
:
&
Self
)
-
>
crate
:
:
export
:
:
bool
{
true
}
}
impl
crate
:
:
export
:
:
Hash
for
ident
{
fn
hash
<
__H
:
crate
:
:
export
:
:
Hasher
>
(
&
self
_state
:
&
mut
__H
)
{
}
}
}
;
}
#
[
cfg
(
not
(
feature
=
"
extra
-
traits
"
)
)
]
#
[
doc
(
hidden
)
]
#
[
macro_export
]
macro_rules
!
impl_extra_traits_for_custom_keyword
{
(
ident
:
ident
)
=
>
{
}
;
}
