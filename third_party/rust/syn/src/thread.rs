use
std
:
:
fmt
:
:
{
self
Debug
}
;
use
std
:
:
thread
:
:
{
self
ThreadId
}
;
pub
(
crate
)
struct
ThreadBound
<
T
>
{
value
:
T
thread_id
:
ThreadId
}
unsafe
impl
<
T
>
Sync
for
ThreadBound
<
T
>
{
}
unsafe
impl
<
T
:
Copy
>
Send
for
ThreadBound
<
T
>
{
}
impl
<
T
>
ThreadBound
<
T
>
{
pub
(
crate
)
fn
new
(
value
:
T
)
-
>
Self
{
ThreadBound
{
value
thread_id
:
thread
:
:
current
(
)
.
id
(
)
}
}
pub
(
crate
)
fn
get
(
&
self
)
-
>
Option
<
&
T
>
{
if
thread
:
:
current
(
)
.
id
(
)
=
=
self
.
thread_id
{
Some
(
&
self
.
value
)
}
else
{
None
}
}
}
impl
<
T
:
Debug
>
Debug
for
ThreadBound
<
T
>
{
fn
fmt
(
&
self
formatter
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
match
self
.
get
(
)
{
Some
(
value
)
=
>
Debug
:
:
fmt
(
value
formatter
)
None
=
>
formatter
.
write_str
(
"
unknown
"
)
}
}
}
impl
<
T
:
Copy
>
Copy
for
ThreadBound
<
T
>
{
}
impl
<
T
:
Copy
>
Clone
for
ThreadBound
<
T
>
{
fn
clone
(
&
self
)
-
>
Self
{
*
self
}
}
