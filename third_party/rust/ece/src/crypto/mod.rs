use
crate
:
:
error
:
:
*
;
use
std
:
:
any
:
:
Any
;
pub
(
crate
)
mod
holder
;
#
[
cfg
(
feature
=
"
backend
-
openssl
"
)
]
mod
openssl
;
#
[
cfg
(
not
(
feature
=
"
backend
-
openssl
"
)
)
]
pub
use
holder
:
:
{
set_boxed_cryptographer
set_cryptographer
}
;
pub
trait
RemotePublicKey
:
Send
+
Sync
+
'
static
{
fn
as_raw
(
&
self
)
-
>
Result
<
Vec
<
u8
>
>
;
fn
as_any
(
&
self
)
-
>
&
dyn
Any
;
}
pub
trait
LocalKeyPair
:
Send
+
Sync
+
'
static
{
fn
pub_as_raw
(
&
self
)
-
>
Result
<
Vec
<
u8
>
>
;
fn
raw_components
(
&
self
)
-
>
Result
<
EcKeyComponents
>
;
fn
as_any
(
&
self
)
-
>
&
dyn
Any
;
}
#
[
derive
(
Clone
Debug
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
serializable
-
keys
"
derive
(
serde
:
:
Serialize
serde
:
:
Deserialize
)
)
]
pub
enum
EcCurve
{
P256
}
impl
Default
for
EcCurve
{
fn
default
(
)
-
>
Self
{
EcCurve
:
:
P256
}
}
#
[
derive
(
Clone
Debug
PartialEq
)
]
#
[
cfg_attr
(
feature
=
"
serializable
-
keys
"
derive
(
serde
:
:
Serialize
serde
:
:
Deserialize
)
)
]
pub
struct
EcKeyComponents
{
curve
:
EcCurve
private_key
:
Vec
<
u8
>
public_key
:
Vec
<
u8
>
}
impl
EcKeyComponents
{
pub
fn
new
<
T
:
Into
<
Vec
<
u8
>
>
>
(
private_key
:
T
public_key
:
T
)
-
>
Self
{
EcKeyComponents
{
private_key
:
private_key
.
into
(
)
public_key
:
public_key
.
into
(
)
curve
:
Default
:
:
default
(
)
}
}
pub
fn
curve
(
&
self
)
-
>
&
EcCurve
{
&
self
.
curve
}
pub
fn
private_key
(
&
self
)
-
>
&
[
u8
]
{
&
self
.
private_key
}
pub
fn
public_key
(
&
self
)
-
>
&
[
u8
]
{
&
self
.
public_key
}
}
pub
trait
Cryptographer
:
Send
+
Sync
+
'
static
{
fn
generate_ephemeral_keypair
(
&
self
)
-
>
Result
<
Box
<
dyn
LocalKeyPair
>
>
;
fn
import_key_pair
(
&
self
components
:
&
EcKeyComponents
)
-
>
Result
<
Box
<
dyn
LocalKeyPair
>
>
;
fn
import_public_key
(
&
self
raw
:
&
[
u8
]
)
-
>
Result
<
Box
<
dyn
RemotePublicKey
>
>
;
fn
compute_ecdh_secret
(
&
self
remote
:
&
dyn
RemotePublicKey
local
:
&
dyn
LocalKeyPair
)
-
>
Result
<
Vec
<
u8
>
>
;
fn
hkdf_sha256
(
&
self
salt
:
&
[
u8
]
secret
:
&
[
u8
]
info
:
&
[
u8
]
len
:
usize
)
-
>
Result
<
Vec
<
u8
>
>
;
fn
aes_gcm_128_encrypt
(
&
self
key
:
&
[
u8
]
iv
:
&
[
u8
]
data
:
&
[
u8
]
)
-
>
Result
<
Vec
<
u8
>
>
;
fn
aes_gcm_128_decrypt
(
&
self
key
:
&
[
u8
]
iv
:
&
[
u8
]
ciphertext_and_tag
:
&
[
u8
]
)
-
>
Result
<
Vec
<
u8
>
>
;
fn
random_bytes
(
&
self
dest
:
&
mut
[
u8
]
)
-
>
Result
<
(
)
>
;
}
