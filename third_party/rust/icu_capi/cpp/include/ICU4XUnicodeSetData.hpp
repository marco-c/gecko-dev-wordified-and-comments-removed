#
ifndef
ICU4XUnicodeSetData_HPP
#
define
ICU4XUnicodeSetData_HPP
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdbool
.
h
>
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
variant
>
#
include
<
optional
>
#
include
"
diplomat_runtime
.
hpp
"
#
include
"
ICU4XUnicodeSetData
.
h
"
class
ICU4XDataProvider
;
class
ICU4XUnicodeSetData
;
#
include
"
ICU4XError
.
hpp
"
class
ICU4XLocale
;
struct
ICU4XUnicodeSetDataDeleter
{
void
operator
(
)
(
capi
:
:
ICU4XUnicodeSetData
*
l
)
const
noexcept
{
capi
:
:
ICU4XUnicodeSetData_destroy
(
l
)
;
}
}
;
class
ICU4XUnicodeSetData
{
public
:
bool
contains
(
const
std
:
:
string_view
s
)
const
;
bool
contains_char
(
char32_t
cp
)
const
;
bool
contains32
(
uint32_t
cp
)
const
;
static
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
load_basic_emoji
(
const
ICU4XDataProvider
&
provider
)
;
static
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
load_exemplars_main
(
const
ICU4XDataProvider
&
provider
const
ICU4XLocale
&
locale
)
;
static
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
load_exemplars_auxiliary
(
const
ICU4XDataProvider
&
provider
const
ICU4XLocale
&
locale
)
;
static
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
load_exemplars_punctuation
(
const
ICU4XDataProvider
&
provider
const
ICU4XLocale
&
locale
)
;
static
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
load_exemplars_numbers
(
const
ICU4XDataProvider
&
provider
const
ICU4XLocale
&
locale
)
;
static
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
load_exemplars_index
(
const
ICU4XDataProvider
&
provider
const
ICU4XLocale
&
locale
)
;
inline
const
capi
:
:
ICU4XUnicodeSetData
*
AsFFI
(
)
const
{
return
this
-
>
inner
.
get
(
)
;
}
inline
capi
:
:
ICU4XUnicodeSetData
*
AsFFIMut
(
)
{
return
this
-
>
inner
.
get
(
)
;
}
inline
ICU4XUnicodeSetData
(
capi
:
:
ICU4XUnicodeSetData
*
i
)
:
inner
(
i
)
{
}
ICU4XUnicodeSetData
(
)
=
default
;
ICU4XUnicodeSetData
(
ICU4XUnicodeSetData
&
&
)
noexcept
=
default
;
ICU4XUnicodeSetData
&
operator
=
(
ICU4XUnicodeSetData
&
&
other
)
noexcept
=
default
;
private
:
std
:
:
unique_ptr
<
capi
:
:
ICU4XUnicodeSetData
ICU4XUnicodeSetDataDeleter
>
inner
;
}
;
#
include
"
ICU4XDataProvider
.
hpp
"
#
include
"
ICU4XLocale
.
hpp
"
inline
bool
ICU4XUnicodeSetData
:
:
contains
(
const
std
:
:
string_view
s
)
const
{
return
capi
:
:
ICU4XUnicodeSetData_contains
(
this
-
>
inner
.
get
(
)
s
.
data
(
)
s
.
size
(
)
)
;
}
inline
bool
ICU4XUnicodeSetData
:
:
contains_char
(
char32_t
cp
)
const
{
return
capi
:
:
ICU4XUnicodeSetData_contains_char
(
this
-
>
inner
.
get
(
)
cp
)
;
}
inline
bool
ICU4XUnicodeSetData
:
:
contains32
(
uint32_t
cp
)
const
{
return
capi
:
:
ICU4XUnicodeSetData_contains32
(
this
-
>
inner
.
get
(
)
cp
)
;
}
inline
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
ICU4XUnicodeSetData
:
:
load_basic_emoji
(
const
ICU4XDataProvider
&
provider
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XUnicodeSetData_load_basic_emoji
(
provider
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XUnicodeSetData
>
(
std
:
:
move
(
ICU4XUnicodeSetData
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
inline
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
ICU4XUnicodeSetData
:
:
load_exemplars_main
(
const
ICU4XDataProvider
&
provider
const
ICU4XLocale
&
locale
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XUnicodeSetData_load_exemplars_main
(
provider
.
AsFFI
(
)
locale
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XUnicodeSetData
>
(
std
:
:
move
(
ICU4XUnicodeSetData
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
inline
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
ICU4XUnicodeSetData
:
:
load_exemplars_auxiliary
(
const
ICU4XDataProvider
&
provider
const
ICU4XLocale
&
locale
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XUnicodeSetData_load_exemplars_auxiliary
(
provider
.
AsFFI
(
)
locale
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XUnicodeSetData
>
(
std
:
:
move
(
ICU4XUnicodeSetData
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
inline
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
ICU4XUnicodeSetData
:
:
load_exemplars_punctuation
(
const
ICU4XDataProvider
&
provider
const
ICU4XLocale
&
locale
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XUnicodeSetData_load_exemplars_punctuation
(
provider
.
AsFFI
(
)
locale
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XUnicodeSetData
>
(
std
:
:
move
(
ICU4XUnicodeSetData
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
inline
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
ICU4XUnicodeSetData
:
:
load_exemplars_numbers
(
const
ICU4XDataProvider
&
provider
const
ICU4XLocale
&
locale
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XUnicodeSetData_load_exemplars_numbers
(
provider
.
AsFFI
(
)
locale
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XUnicodeSetData
>
(
std
:
:
move
(
ICU4XUnicodeSetData
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
inline
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
ICU4XUnicodeSetData
:
:
load_exemplars_index
(
const
ICU4XDataProvider
&
provider
const
ICU4XLocale
&
locale
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XUnicodeSetData_load_exemplars_index
(
provider
.
AsFFI
(
)
locale
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XUnicodeSetData
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XUnicodeSetData
>
(
std
:
:
move
(
ICU4XUnicodeSetData
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
#
endif
