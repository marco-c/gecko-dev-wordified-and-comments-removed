#
ifndef
ICU4XWordBreakIteratorLatin1_HPP
#
define
ICU4XWordBreakIteratorLatin1_HPP
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdbool
.
h
>
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
variant
>
#
include
<
optional
>
#
include
"
diplomat_runtime
.
hpp
"
#
include
"
ICU4XWordBreakIteratorLatin1
.
h
"
#
include
"
ICU4XSegmenterWordType
.
hpp
"
struct
ICU4XWordBreakIteratorLatin1Deleter
{
void
operator
(
)
(
capi
:
:
ICU4XWordBreakIteratorLatin1
*
l
)
const
noexcept
{
capi
:
:
ICU4XWordBreakIteratorLatin1_destroy
(
l
)
;
}
}
;
class
ICU4XWordBreakIteratorLatin1
{
public
:
int32_t
next
(
)
;
ICU4XSegmenterWordType
word_type
(
)
const
;
bool
is_word_like
(
)
const
;
inline
const
capi
:
:
ICU4XWordBreakIteratorLatin1
*
AsFFI
(
)
const
{
return
this
-
>
inner
.
get
(
)
;
}
inline
capi
:
:
ICU4XWordBreakIteratorLatin1
*
AsFFIMut
(
)
{
return
this
-
>
inner
.
get
(
)
;
}
inline
ICU4XWordBreakIteratorLatin1
(
capi
:
:
ICU4XWordBreakIteratorLatin1
*
i
)
:
inner
(
i
)
{
}
ICU4XWordBreakIteratorLatin1
(
)
=
default
;
ICU4XWordBreakIteratorLatin1
(
ICU4XWordBreakIteratorLatin1
&
&
)
noexcept
=
default
;
ICU4XWordBreakIteratorLatin1
&
operator
=
(
ICU4XWordBreakIteratorLatin1
&
&
other
)
noexcept
=
default
;
private
:
std
:
:
unique_ptr
<
capi
:
:
ICU4XWordBreakIteratorLatin1
ICU4XWordBreakIteratorLatin1Deleter
>
inner
;
}
;
inline
int32_t
ICU4XWordBreakIteratorLatin1
:
:
next
(
)
{
return
capi
:
:
ICU4XWordBreakIteratorLatin1_next
(
this
-
>
inner
.
get
(
)
)
;
}
inline
ICU4XSegmenterWordType
ICU4XWordBreakIteratorLatin1
:
:
word_type
(
)
const
{
return
static_cast
<
ICU4XSegmenterWordType
>
(
capi
:
:
ICU4XWordBreakIteratorLatin1_word_type
(
this
-
>
inner
.
get
(
)
)
)
;
}
inline
bool
ICU4XWordBreakIteratorLatin1
:
:
is_word_like
(
)
const
{
return
capi
:
:
ICU4XWordBreakIteratorLatin1_is_word_like
(
this
-
>
inner
.
get
(
)
)
;
}
#
endif
