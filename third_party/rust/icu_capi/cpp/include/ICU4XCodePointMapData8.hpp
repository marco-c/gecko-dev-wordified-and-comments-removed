#
ifndef
ICU4XCodePointMapData8_HPP
#
define
ICU4XCodePointMapData8_HPP
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdbool
.
h
>
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
variant
>
#
include
<
optional
>
#
include
"
diplomat_runtime
.
hpp
"
#
include
"
ICU4XCodePointMapData8
.
h
"
class
CodePointRangeIterator
;
class
ICU4XCodePointSetData
;
class
ICU4XDataProvider
;
class
ICU4XCodePointMapData8
;
#
include
"
ICU4XError
.
hpp
"
struct
ICU4XCodePointMapData8Deleter
{
void
operator
(
)
(
capi
:
:
ICU4XCodePointMapData8
*
l
)
const
noexcept
{
capi
:
:
ICU4XCodePointMapData8_destroy
(
l
)
;
}
}
;
class
ICU4XCodePointMapData8
{
public
:
uint8_t
get
(
char32_t
cp
)
const
;
uint8_t
get32
(
uint32_t
cp
)
const
;
static
uint32_t
general_category_to_mask
(
uint8_t
gc
)
;
CodePointRangeIterator
iter_ranges_for_value
(
uint8_t
value
)
const
;
CodePointRangeIterator
iter_ranges_for_value_complemented
(
uint8_t
value
)
const
;
CodePointRangeIterator
iter_ranges_for_mask
(
uint32_t
mask
)
const
;
ICU4XCodePointSetData
get_set_for_value
(
uint8_t
value
)
const
;
static
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
load_general_category
(
const
ICU4XDataProvider
&
provider
)
;
static
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
load_bidi_class
(
const
ICU4XDataProvider
&
provider
)
;
static
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
load_east_asian_width
(
const
ICU4XDataProvider
&
provider
)
;
static
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
load_line_break
(
const
ICU4XDataProvider
&
provider
)
;
static
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
try_grapheme_cluster_break
(
const
ICU4XDataProvider
&
provider
)
;
static
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
load_word_break
(
const
ICU4XDataProvider
&
provider
)
;
static
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
load_sentence_break
(
const
ICU4XDataProvider
&
provider
)
;
inline
const
capi
:
:
ICU4XCodePointMapData8
*
AsFFI
(
)
const
{
return
this
-
>
inner
.
get
(
)
;
}
inline
capi
:
:
ICU4XCodePointMapData8
*
AsFFIMut
(
)
{
return
this
-
>
inner
.
get
(
)
;
}
inline
ICU4XCodePointMapData8
(
capi
:
:
ICU4XCodePointMapData8
*
i
)
:
inner
(
i
)
{
}
ICU4XCodePointMapData8
(
)
=
default
;
ICU4XCodePointMapData8
(
ICU4XCodePointMapData8
&
&
)
noexcept
=
default
;
ICU4XCodePointMapData8
&
operator
=
(
ICU4XCodePointMapData8
&
&
other
)
noexcept
=
default
;
private
:
std
:
:
unique_ptr
<
capi
:
:
ICU4XCodePointMapData8
ICU4XCodePointMapData8Deleter
>
inner
;
}
;
#
include
"
CodePointRangeIterator
.
hpp
"
#
include
"
ICU4XCodePointSetData
.
hpp
"
#
include
"
ICU4XDataProvider
.
hpp
"
inline
uint8_t
ICU4XCodePointMapData8
:
:
get
(
char32_t
cp
)
const
{
return
capi
:
:
ICU4XCodePointMapData8_get
(
this
-
>
inner
.
get
(
)
cp
)
;
}
inline
uint8_t
ICU4XCodePointMapData8
:
:
get32
(
uint32_t
cp
)
const
{
return
capi
:
:
ICU4XCodePointMapData8_get32
(
this
-
>
inner
.
get
(
)
cp
)
;
}
inline
uint32_t
ICU4XCodePointMapData8
:
:
general_category_to_mask
(
uint8_t
gc
)
{
return
capi
:
:
ICU4XCodePointMapData8_general_category_to_mask
(
gc
)
;
}
inline
CodePointRangeIterator
ICU4XCodePointMapData8
:
:
iter_ranges_for_value
(
uint8_t
value
)
const
{
return
CodePointRangeIterator
(
capi
:
:
ICU4XCodePointMapData8_iter_ranges_for_value
(
this
-
>
inner
.
get
(
)
value
)
)
;
}
inline
CodePointRangeIterator
ICU4XCodePointMapData8
:
:
iter_ranges_for_value_complemented
(
uint8_t
value
)
const
{
return
CodePointRangeIterator
(
capi
:
:
ICU4XCodePointMapData8_iter_ranges_for_value_complemented
(
this
-
>
inner
.
get
(
)
value
)
)
;
}
inline
CodePointRangeIterator
ICU4XCodePointMapData8
:
:
iter_ranges_for_mask
(
uint32_t
mask
)
const
{
return
CodePointRangeIterator
(
capi
:
:
ICU4XCodePointMapData8_iter_ranges_for_mask
(
this
-
>
inner
.
get
(
)
mask
)
)
;
}
inline
ICU4XCodePointSetData
ICU4XCodePointMapData8
:
:
get_set_for_value
(
uint8_t
value
)
const
{
return
ICU4XCodePointSetData
(
capi
:
:
ICU4XCodePointMapData8_get_set_for_value
(
this
-
>
inner
.
get
(
)
value
)
)
;
}
inline
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
ICU4XCodePointMapData8
:
:
load_general_category
(
const
ICU4XDataProvider
&
provider
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XCodePointMapData8_load_general_category
(
provider
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XCodePointMapData8
>
(
std
:
:
move
(
ICU4XCodePointMapData8
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
inline
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
ICU4XCodePointMapData8
:
:
load_bidi_class
(
const
ICU4XDataProvider
&
provider
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XCodePointMapData8_load_bidi_class
(
provider
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XCodePointMapData8
>
(
std
:
:
move
(
ICU4XCodePointMapData8
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
inline
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
ICU4XCodePointMapData8
:
:
load_east_asian_width
(
const
ICU4XDataProvider
&
provider
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XCodePointMapData8_load_east_asian_width
(
provider
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XCodePointMapData8
>
(
std
:
:
move
(
ICU4XCodePointMapData8
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
inline
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
ICU4XCodePointMapData8
:
:
load_line_break
(
const
ICU4XDataProvider
&
provider
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XCodePointMapData8_load_line_break
(
provider
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XCodePointMapData8
>
(
std
:
:
move
(
ICU4XCodePointMapData8
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
inline
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
ICU4XCodePointMapData8
:
:
try_grapheme_cluster_break
(
const
ICU4XDataProvider
&
provider
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XCodePointMapData8_try_grapheme_cluster_break
(
provider
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XCodePointMapData8
>
(
std
:
:
move
(
ICU4XCodePointMapData8
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
inline
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
ICU4XCodePointMapData8
:
:
load_word_break
(
const
ICU4XDataProvider
&
provider
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XCodePointMapData8_load_word_break
(
provider
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XCodePointMapData8
>
(
std
:
:
move
(
ICU4XCodePointMapData8
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
inline
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
ICU4XCodePointMapData8
:
:
load_sentence_break
(
const
ICU4XDataProvider
&
provider
)
{
auto
diplomat_result_raw_out_value
=
capi
:
:
ICU4XCodePointMapData8_load_sentence_break
(
provider
.
AsFFI
(
)
)
;
diplomat
:
:
result
<
ICU4XCodePointMapData8
ICU4XError
>
diplomat_result_out_value
;
if
(
diplomat_result_raw_out_value
.
is_ok
)
{
diplomat_result_out_value
=
diplomat
:
:
Ok
<
ICU4XCodePointMapData8
>
(
std
:
:
move
(
ICU4XCodePointMapData8
(
diplomat_result_raw_out_value
.
ok
)
)
)
;
}
else
{
diplomat_result_out_value
=
diplomat
:
:
Err
<
ICU4XError
>
(
std
:
:
move
(
static_cast
<
ICU4XError
>
(
diplomat_result_raw_out_value
.
err
)
)
)
;
}
return
diplomat_result_out_value
;
}
#
endif
