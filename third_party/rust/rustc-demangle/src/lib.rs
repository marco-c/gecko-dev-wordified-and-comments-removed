#
!
[
no_std
]
#
!
[
deny
(
missing_docs
)
]
#
[
cfg
(
test
)
]
#
[
macro_use
]
extern
crate
std
;
#
[
cfg
(
test
)
]
macro_rules
!
assert_contains
{
(
s
:
expr
needle
:
expr
)
=
>
{
{
let
(
s
needle
)
=
(
s
needle
)
;
assert
!
(
s
.
contains
(
needle
)
"
{
:
?
}
should
'
ve
contained
{
:
?
}
"
s
needle
)
;
}
}
;
}
#
[
cfg
(
test
)
]
macro_rules
!
assert_ends_with
{
(
s
:
expr
suffix
:
expr
)
=
>
{
{
let
(
s
suffix
)
=
(
s
suffix
)
;
assert
!
(
s
.
ends_with
(
suffix
)
"
{
:
?
}
should
'
ve
ended
in
{
:
?
}
"
s
suffix
)
;
}
}
;
}
mod
legacy
;
mod
v0
;
use
core
:
:
fmt
:
:
{
self
Write
as
_
}
;
pub
struct
Demangle
<
'
a
>
{
style
:
Option
<
DemangleStyle
<
'
a
>
>
original
:
&
'
a
str
suffix
:
&
'
a
str
}
enum
DemangleStyle
<
'
a
>
{
Legacy
(
legacy
:
:
Demangle
<
'
a
>
)
V0
(
v0
:
:
Demangle
<
'
a
>
)
}
pub
fn
demangle
(
mut
s
:
&
str
)
-
>
Demangle
{
let
llvm
=
"
.
llvm
.
"
;
if
let
Some
(
i
)
=
s
.
find
(
llvm
)
{
let
candidate
=
&
s
[
i
+
llvm
.
len
(
)
.
.
]
;
let
all_hex
=
candidate
.
chars
(
)
.
all
(
|
c
|
match
c
{
'
A
'
.
.
=
'
F
'
|
'
0
'
.
.
=
'
9
'
|
'
'
=
>
true
_
=
>
false
}
)
;
if
all_hex
{
s
=
&
s
[
.
.
i
]
;
}
}
let
mut
suffix
=
"
"
;
let
mut
style
=
match
legacy
:
:
demangle
(
s
)
{
Ok
(
(
d
s
)
)
=
>
{
suffix
=
s
;
Some
(
DemangleStyle
:
:
Legacy
(
d
)
)
}
Err
(
(
)
)
=
>
match
v0
:
:
demangle
(
s
)
{
Ok
(
(
d
s
)
)
=
>
{
suffix
=
s
;
Some
(
DemangleStyle
:
:
V0
(
d
)
)
}
Err
(
v0
:
:
ParseError
:
:
Invalid
)
|
Err
(
v0
:
:
ParseError
:
:
RecursedTooDeep
)
=
>
None
}
}
;
if
!
suffix
.
is_empty
(
)
{
if
suffix
.
starts_with
(
'
.
'
)
&
&
is_symbol_like
(
suffix
)
{
}
else
{
suffix
=
"
"
;
style
=
None
;
}
}
Demangle
{
style
original
:
s
suffix
}
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
TryDemangleError
{
_priv
:
(
)
}
pub
fn
try_demangle
(
s
:
&
str
)
-
>
Result
<
Demangle
TryDemangleError
>
{
let
sym
=
demangle
(
s
)
;
if
sym
.
style
.
is_some
(
)
{
Ok
(
sym
)
}
else
{
Err
(
TryDemangleError
{
_priv
:
(
)
}
)
}
}
impl
<
'
a
>
Demangle
<
'
a
>
{
pub
fn
as_str
(
&
self
)
-
>
&
'
a
str
{
self
.
original
}
}
fn
is_symbol_like
(
s
:
&
str
)
-
>
bool
{
s
.
chars
(
)
.
all
(
|
c
|
{
is_ascii_alphanumeric
(
c
)
|
|
is_ascii_punctuation
(
c
)
}
)
}
fn
is_ascii_alphanumeric
(
c
:
char
)
-
>
bool
{
match
c
{
'
\
u
{
0041
}
'
.
.
=
'
\
u
{
005A
}
'
|
'
\
u
{
0061
}
'
.
.
=
'
\
u
{
007A
}
'
|
'
\
u
{
0030
}
'
.
.
=
'
\
u
{
0039
}
'
=
>
true
_
=
>
false
}
}
fn
is_ascii_punctuation
(
c
:
char
)
-
>
bool
{
match
c
{
'
\
u
{
0021
}
'
.
.
=
'
\
u
{
002F
}
'
|
'
\
u
{
003A
}
'
.
.
=
'
\
u
{
0040
}
'
|
'
\
u
{
005B
}
'
.
.
=
'
\
u
{
0060
}
'
|
'
\
u
{
007B
}
'
.
.
=
'
\
u
{
007E
}
'
=
>
true
_
=
>
false
}
}
impl
<
'
a
>
fmt
:
:
Display
for
DemangleStyle
<
'
a
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
match
*
self
{
DemangleStyle
:
:
Legacy
(
ref
d
)
=
>
fmt
:
:
Display
:
:
fmt
(
d
f
)
DemangleStyle
:
:
V0
(
ref
d
)
=
>
fmt
:
:
Display
:
:
fmt
(
d
f
)
}
}
}
const
MAX_SIZE
:
usize
=
1_000_000
;
#
[
derive
(
Copy
Clone
Debug
)
]
struct
SizeLimitExhausted
;
struct
SizeLimitedFmtAdapter
<
F
>
{
remaining
:
Result
<
usize
SizeLimitExhausted
>
inner
:
F
}
impl
<
F
:
fmt
:
:
Write
>
fmt
:
:
Write
for
SizeLimitedFmtAdapter
<
F
>
{
fn
write_str
(
&
mut
self
s
:
&
str
)
-
>
fmt
:
:
Result
{
self
.
remaining
=
self
.
remaining
.
and_then
(
|
r
|
r
.
checked_sub
(
s
.
len
(
)
)
.
ok_or
(
SizeLimitExhausted
)
)
;
match
self
.
remaining
{
Ok
(
_
)
=
>
self
.
inner
.
write_str
(
s
)
Err
(
SizeLimitExhausted
)
=
>
Err
(
fmt
:
:
Error
)
}
}
}
impl
<
'
a
>
fmt
:
:
Display
for
Demangle
<
'
a
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
match
self
.
style
{
None
=
>
f
.
write_str
(
self
.
original
)
?
Some
(
ref
d
)
=
>
{
let
alternate
=
f
.
alternate
(
)
;
let
mut
size_limited_fmt
=
SizeLimitedFmtAdapter
{
remaining
:
Ok
(
MAX_SIZE
)
inner
:
&
mut
*
f
}
;
let
fmt_result
=
if
alternate
{
write
!
(
size_limited_fmt
"
{
:
#
}
"
d
)
}
else
{
write
!
(
size_limited_fmt
"
{
}
"
d
)
}
;
let
size_limit_result
=
size_limited_fmt
.
remaining
.
map
(
|
_
|
(
)
)
;
match
(
fmt_result
size_limit_result
)
{
(
Err
(
_
)
Err
(
SizeLimitExhausted
)
)
=
>
f
.
write_str
(
"
{
size
limit
reached
}
"
)
?
_
=
>
{
fmt_result
?
;
size_limit_result
.
expect
(
"
fmt
:
:
Error
from
SizeLimitedFmtAdapter
was
discarded
"
)
;
}
}
}
}
f
.
write_str
(
self
.
suffix
)
}
}
impl
<
'
a
>
fmt
:
:
Debug
for
Demangle
<
'
a
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
:
:
Display
:
:
fmt
(
self
f
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
std
:
:
prelude
:
:
v1
:
:
*
;
macro_rules
!
t
{
(
a
:
expr
b
:
expr
)
=
>
{
assert
!
(
ok
(
a
b
)
)
}
;
}
macro_rules
!
t_err
{
(
a
:
expr
)
=
>
{
assert
!
(
ok_err
(
a
)
)
}
;
}
macro_rules
!
t_nohash
{
(
a
:
expr
b
:
expr
)
=
>
{
{
assert_eq
!
(
format
!
(
"
{
:
#
}
"
super
:
:
demangle
(
a
)
)
b
)
;
}
}
;
}
fn
ok
(
sym
:
&
str
expected
:
&
str
)
-
>
bool
{
match
super
:
:
try_demangle
(
sym
)
{
Ok
(
s
)
=
>
{
if
s
.
to_string
(
)
=
=
expected
{
true
}
else
{
println
!
(
"
\
n
{
}
\
n
!
=
\
n
{
}
\
n
"
s
expected
)
;
false
}
}
Err
(
_
)
=
>
{
println
!
(
"
error
demangling
"
)
;
false
}
}
}
fn
ok_err
(
sym
:
&
str
)
-
>
bool
{
match
super
:
:
try_demangle
(
sym
)
{
Ok
(
_
)
=
>
{
println
!
(
"
succeeded
in
demangling
"
)
;
false
}
Err
(
_
)
=
>
super
:
:
demangle
(
sym
)
.
to_string
(
)
=
=
sym
}
}
#
[
test
]
fn
demangle
(
)
{
t_err
!
(
"
test
"
)
;
t
!
(
"
_ZN4testE
"
"
test
"
)
;
t_err
!
(
"
_ZN4test
"
)
;
t
!
(
"
_ZN4test1a2bcE
"
"
test
:
:
a
:
:
bc
"
)
;
}
#
[
test
]
fn
demangle_dollars
(
)
{
t
!
(
"
_ZN4
RP
E
"
"
)
"
)
;
t
!
(
"
_ZN8
RF
testE
"
"
&
test
"
)
;
t
!
(
"
_ZN8
BP
test4foobE
"
"
*
test
:
:
foob
"
)
;
t
!
(
"
_ZN9
u20
test4foobE
"
"
test
:
:
foob
"
)
;
t
!
(
"
_ZN35Bar
LT
u5b
u32
u3b
u20
4
u5d
GT
E
"
"
Bar
<
[
u32
;
4
]
>
"
)
;
}
#
[
test
]
fn
demangle_many_dollars
(
)
{
t
!
(
"
_ZN13test
u20
test4foobE
"
"
test
test
:
:
foob
"
)
;
t
!
(
"
_ZN12test
BP
test4foobE
"
"
test
*
test
:
:
foob
"
)
;
}
#
[
test
]
fn
demangle_osx
(
)
{
t
!
(
"
__ZN5alloc9allocator6Layout9for_value17h02a996811f781011E
"
"
alloc
:
:
allocator
:
:
Layout
:
:
for_value
:
:
h02a996811f781011
"
)
;
t
!
(
"
__ZN38_
LT
core
.
.
option
.
.
Option
LT
T
GT
GT
6unwrap18_MSG_FILE_LINE_COL17haf7cb8d5824ee659E
"
"
<
core
:
:
option
:
:
Option
<
T
>
>
:
:
unwrap
:
:
_MSG_FILE_LINE_COL
:
:
haf7cb8d5824ee659
"
)
;
t
!
(
"
__ZN4core5slice89_
LT
impl
u20
core
.
.
iter
.
.
traits
.
.
IntoIterator
u20
for
u20
RF
u27
a
u20
u5b
T
u5d
GT
9into_iter17h450e234d27262170E
"
"
core
:
:
slice
:
:
<
impl
core
:
:
iter
:
:
traits
:
:
IntoIterator
for
&
'
a
[
T
]
>
:
:
into_iter
:
:
h450e234d27262170
"
)
;
}
#
[
test
]
fn
demangle_windows
(
)
{
t
!
(
"
ZN4testE
"
"
test
"
)
;
t
!
(
"
ZN13test
u20
test4foobE
"
"
test
test
:
:
foob
"
)
;
t
!
(
"
ZN12test
RF
test4foobE
"
"
test
&
test
:
:
foob
"
)
;
}
#
[
test
]
fn
demangle_elements_beginning_with_underscore
(
)
{
t
!
(
"
_ZN13_
LT
test
GT
E
"
"
<
test
>
"
)
;
t
!
(
"
_ZN28_
u7b
u7b
closure
u7d
u7d
E
"
"
{
{
closure
}
}
"
)
;
t
!
(
"
_ZN15__STATIC_FMTSTRE
"
"
__STATIC_FMTSTR
"
)
;
}
#
[
test
]
fn
demangle_trait_impls
(
)
{
t
!
(
"
_ZN71_
LT
Test
u20
u2b
u20
u27
static
u20
as
u20
foo
.
.
Bar
LT
Test
GT
GT
3barE
"
"
<
Test
+
'
static
as
foo
:
:
Bar
<
Test
>
>
:
:
bar
"
)
;
}
#
[
test
]
fn
demangle_without_hash
(
)
{
let
s
=
"
_ZN3foo17h05af221e174051e9E
"
;
t
!
(
s
"
foo
:
:
h05af221e174051e9
"
)
;
t_nohash
!
(
s
"
foo
"
)
;
}
#
[
test
]
fn
demangle_without_hash_edgecases
(
)
{
t_nohash
!
(
"
_ZN3fooE
"
"
foo
"
)
;
t_nohash
!
(
"
_ZN3foo3barE
"
"
foo
:
:
bar
"
)
;
t_nohash
!
(
"
_ZN3foo20h05af221e174051e9abcE
"
"
foo
"
)
;
t_nohash
!
(
"
_ZN3foo5h05afE
"
"
foo
"
)
;
t_nohash
!
(
"
_ZN17h05af221e174051e93fooE
"
"
h05af221e174051e9
:
:
foo
"
)
;
t_nohash
!
(
"
_ZN3foo16ffaf221e174051e9E
"
"
foo
:
:
ffaf221e174051e9
"
)
;
t_nohash
!
(
"
_ZN3foo17hg5af221e174051e9E
"
"
foo
:
:
hg5af221e174051e9
"
)
;
}
#
[
test
]
fn
demangle_thinlto
(
)
{
t
!
(
"
_ZN3fooE
.
llvm
.
9D1C9369
"
"
foo
"
)
;
t
!
(
"
_ZN3fooE
.
llvm
.
9D1C9369
16
"
"
foo
"
)
;
t_nohash
!
(
"
_ZN9backtrace3foo17hbb467fcdaea5d79bE
.
llvm
.
A5310EB9
"
"
backtrace
:
:
foo
"
)
;
}
#
[
test
]
fn
demangle_llvm_ir_branch_labels
(
)
{
t
!
(
"
_ZN4core5slice77_
LT
impl
u20
core
.
.
ops
.
.
index
.
.
IndexMut
LT
I
GT
u20
for
u20
u5b
T
u5d
GT
9index_mut17haf9727c2edfbc47bE
.
exit
.
i
.
i
"
"
core
:
:
slice
:
:
<
impl
core
:
:
ops
:
:
index
:
:
IndexMut
<
I
>
for
[
T
]
>
:
:
index_mut
:
:
haf9727c2edfbc47b
.
exit
.
i
.
i
"
)
;
t_nohash
!
(
"
_ZN4core5slice77_
LT
impl
u20
core
.
.
ops
.
.
index
.
.
IndexMut
LT
I
GT
u20
for
u20
u5b
T
u5d
GT
9index_mut17haf9727c2edfbc47bE
.
exit
.
i
.
i
"
"
core
:
:
slice
:
:
<
impl
core
:
:
ops
:
:
index
:
:
IndexMut
<
I
>
for
[
T
]
>
:
:
index_mut
.
exit
.
i
.
i
"
)
;
}
#
[
test
]
fn
demangle_ignores_suffix_that_doesnt_look_like_a_symbol
(
)
{
t_err
!
(
"
_ZN3fooE
.
llvm
moocow
"
)
;
}
#
[
test
]
fn
dont_panic
(
)
{
super
:
:
demangle
(
"
_ZN2222222222222222222222EE
"
)
.
to_string
(
)
;
super
:
:
demangle
(
"
_ZN5
*
70527e27
.
ll34csa
E
"
)
.
to_string
(
)
;
super
:
:
demangle
(
"
_ZN5
*
70527a54
.
ll34_
b
.
1E
"
)
.
to_string
(
)
;
super
:
:
demangle
(
"
\
_ZN5
~
sa
b4e
\
n
\
2734cOsbE
\
n
\
5usage20h
)
3
\
0
\
0
\
0
\
0
\
0
\
0
\
07e2734cOsbE
\
"
)
.
to_string
(
)
;
}
#
[
test
]
fn
invalid_no_chop
(
)
{
t_err
!
(
"
_ZNfooE
"
)
;
}
#
[
test
]
fn
handle_assoc_types
(
)
{
t
!
(
"
_ZN151_
LT
alloc
.
.
boxed
.
.
Box
LT
alloc
.
.
boxed
.
.
FnBox
LT
A
C
u20
Output
u3d
R
GT
u20
u2b
u20
u27
a
GT
u20
as
u20
core
.
.
ops
.
.
function
.
.
FnOnce
LT
A
GT
GT
9call_once17h69e8f44b3723e1caE
"
"
<
alloc
:
:
boxed
:
:
Box
<
alloc
:
:
boxed
:
:
FnBox
<
A
Output
=
R
>
+
'
a
>
as
core
:
:
ops
:
:
function
:
:
FnOnce
<
A
>
>
:
:
call_once
:
:
h69e8f44b3723e1ca
"
)
;
}
#
[
test
]
fn
handle_bang
(
)
{
t
!
(
"
_ZN88_
LT
core
.
.
result
.
.
Result
LT
u21
C
u20
E
GT
u20
as
u20
std
.
.
process
.
.
Termination
GT
6report17hfc41d0da4a40b3e8E
"
"
<
core
:
:
result
:
:
Result
<
!
E
>
as
std
:
:
process
:
:
Termination
>
:
:
report
:
:
hfc41d0da4a40b3e8
"
)
;
}
#
[
test
]
fn
limit_recursion
(
)
{
assert_contains
!
(
super
:
:
demangle
(
"
_RNvB_1a
"
)
.
to_string
(
)
"
{
recursion
limit
reached
}
"
)
;
assert_contains
!
(
super
:
:
demangle
(
"
_RMC0RB2_
"
)
.
to_string
(
)
"
{
recursion
limit
reached
}
"
)
;
}
#
[
test
]
fn
limit_output
(
)
{
assert_ends_with
!
(
super
:
:
demangle
(
"
RYFG_FGyyEvRYFF_EvRYFFEvERLB_B_B_ERLRjB_B_B_
"
)
.
to_string
(
)
"
{
size
limit
reached
}
"
)
;
assert_ends_with
!
(
super
:
:
demangle
(
"
_RMC0FGZZZ_Eu
"
)
.
to_string
(
)
"
{
size
limit
reached
}
"
)
;
}
}
