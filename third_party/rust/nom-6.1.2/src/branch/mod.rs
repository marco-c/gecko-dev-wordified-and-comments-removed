#
[
macro_use
]
mod
macros
;
use
crate
:
:
error
:
:
ErrorKind
;
use
crate
:
:
error
:
:
ParseError
;
use
crate
:
:
internal
:
:
{
Err
IResult
Parser
}
;
pub
trait
Alt
<
I
O
E
>
{
fn
choice
(
&
mut
self
input
:
I
)
-
>
IResult
<
I
O
E
>
;
}
pub
fn
alt
<
I
:
Clone
O
E
:
ParseError
<
I
>
List
:
Alt
<
I
O
E
>
>
(
mut
l
:
List
)
-
>
impl
FnMut
(
I
)
-
>
IResult
<
I
O
E
>
{
move
|
i
:
I
|
l
.
choice
(
i
)
}
pub
trait
Permutation
<
I
O
E
>
{
fn
permutation
(
&
mut
self
input
:
I
)
-
>
IResult
<
I
O
E
>
;
}
pub
fn
permutation
<
I
:
Clone
O
E
:
ParseError
<
I
>
List
:
Permutation
<
I
O
E
>
>
(
mut
l
:
List
)
-
>
impl
FnMut
(
I
)
-
>
IResult
<
I
O
E
>
{
move
|
i
:
I
|
l
.
permutation
(
i
)
}
macro_rules
!
alt_trait
(
(
first
:
ident
second
:
ident
(
id
:
ident
)
+
)
=
>
(
alt_trait
!
(
__impl
first
second
;
(
id
)
+
)
;
)
;
(
__impl
(
current
:
ident
)
*
;
head
:
ident
(
id
:
ident
)
+
)
=
>
(
alt_trait_impl
!
(
(
current
)
*
)
;
alt_trait
!
(
__impl
(
current
)
*
head
;
(
id
)
+
)
;
)
;
(
__impl
(
current
:
ident
)
*
;
head
:
ident
)
=
>
(
alt_trait_impl
!
(
(
current
)
*
)
;
alt_trait_impl
!
(
(
current
)
*
head
)
;
)
;
)
;
macro_rules
!
alt_trait_impl
(
(
(
id
:
ident
)
+
)
=
>
(
impl
<
Input
:
Clone
Output
Error
:
ParseError
<
Input
>
(
id
:
Parser
<
Input
Output
Error
>
)
+
>
Alt
<
Input
Output
Error
>
for
(
(
id
)
+
)
{
fn
choice
(
&
mut
self
input
:
Input
)
-
>
IResult
<
Input
Output
Error
>
{
match
self
.
0
.
parse
(
input
.
clone
(
)
)
{
Err
(
Err
:
:
Error
(
e
)
)
=
>
alt_trait_inner
!
(
1
self
input
e
(
id
)
+
)
res
=
>
res
}
}
}
)
;
)
;
macro_rules
!
alt_trait_inner
(
(
it
:
tt
self
:
expr
input
:
expr
err
:
expr
head
:
ident
(
id
:
ident
)
+
)
=
>
(
match
self
.
it
.
parse
(
input
.
clone
(
)
)
{
Err
(
Err
:
:
Error
(
e
)
)
=
>
{
let
err
=
err
.
or
(
e
)
;
succ
!
(
it
alt_trait_inner
!
(
self
input
err
(
id
)
+
)
)
}
res
=
>
res
}
)
;
(
it
:
tt
self
:
expr
input
:
expr
err
:
expr
head
:
ident
)
=
>
(
Err
(
Err
:
:
Error
(
Error
:
:
append
(
input
ErrorKind
:
:
Alt
err
)
)
)
)
;
)
;
alt_trait
!
(
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
)
;
macro_rules
!
permutation_trait
(
(
name1
:
ident
ty1
:
ident
item1
:
ident
name2
:
ident
ty2
:
ident
item2
:
ident
(
name3
:
ident
ty3
:
ident
item3
:
ident
)
*
)
=
>
(
permutation_trait
!
(
__impl
name1
ty1
item1
name2
ty2
item2
;
(
name3
ty3
item3
)
*
)
;
)
;
(
__impl
(
name
:
ident
ty
:
ident
item
:
ident
)
+
;
name1
:
ident
ty1
:
ident
item1
:
ident
(
name2
:
ident
ty2
:
ident
item2
:
ident
)
*
)
=
>
(
permutation_trait_impl
!
(
(
name
ty
item
)
+
)
;
permutation_trait
!
(
__impl
(
name
ty
item
)
+
name1
ty1
item1
;
(
name2
ty2
item2
)
*
)
;
)
;
(
__impl
(
name
:
ident
ty
:
ident
item
:
ident
)
+
;
)
=
>
(
permutation_trait_impl
!
(
(
name
ty
item
)
+
)
;
)
;
)
;
macro_rules
!
permutation_trait_impl
(
(
(
name
:
ident
ty
:
ident
item
:
ident
)
+
)
=
>
(
impl
<
Input
:
Clone
(
ty
)
+
Error
:
ParseError
<
Input
>
(
name
:
Parser
<
Input
ty
Error
>
)
+
>
Permutation
<
Input
(
(
ty
)
+
)
Error
>
for
(
(
name
)
+
)
{
fn
permutation
(
&
mut
self
mut
input
:
Input
)
-
>
IResult
<
Input
(
(
ty
)
+
)
Error
>
{
let
mut
res
=
(
(
Option
:
:
<
ty
>
:
:
None
)
+
)
;
loop
{
let
mut
err
:
Option
<
Error
>
=
None
;
permutation_trait_inner
!
(
0
self
input
res
err
(
name
)
+
)
;
/
/
If
we
reach
here
every
iterator
has
either
been
applied
before
/
/
or
errored
on
the
remaining
input
if
let
Some
(
err
)
=
err
{
/
/
There
are
remaining
parsers
and
all
errored
on
the
remaining
input
return
Err
(
Err
:
:
Error
(
Error
:
:
append
(
input
ErrorKind
:
:
Permutation
err
)
)
)
;
}
/
/
All
parsers
were
applied
match
res
{
(
(
Some
(
item
)
)
+
)
=
>
return
Ok
(
(
input
(
(
item
)
+
)
)
)
_
=
>
unreachable
!
(
)
}
}
}
}
)
;
)
;
macro_rules
!
permutation_trait_inner
(
(
it
:
tt
self
:
expr
input
:
ident
res
:
expr
err
:
expr
head
:
ident
(
id
:
ident
)
*
)
=
>
(
if
res
.
it
.
is_none
(
)
{
match
self
.
it
.
parse
(
input
.
clone
(
)
)
{
Ok
(
(
i
o
)
)
=
>
{
input
=
i
;
res
.
it
=
Some
(
o
)
;
continue
;
}
Err
(
Err
:
:
Error
(
e
)
)
=
>
{
err
=
Some
(
match
err
{
Some
(
err
)
=
>
err
.
or
(
e
)
None
=
>
e
}
)
;
}
Err
(
e
)
=
>
return
Err
(
e
)
}
;
}
succ
!
(
it
permutation_trait_inner
!
(
self
input
res
err
(
id
)
*
)
)
;
)
;
(
it
:
tt
self
:
expr
input
:
ident
res
:
expr
err
:
expr
)
=
>
(
)
;
)
;
permutation_trait
!
(
FnA
A
a
FnB
B
b
FnC
C
c
FnD
D
d
FnE
E
e
FnF
F
f
FnG
G
g
FnH
H
h
FnI
I
i
FnJ
J
j
FnK
K
k
FnL
L
l
FnM
M
m
FnN
N
n
FnO
O
o
FnP
P
p
FnQ
Q
q
FnR
R
r
FnS
S
s
FnT
T
t
FnU
U
u
)
;
