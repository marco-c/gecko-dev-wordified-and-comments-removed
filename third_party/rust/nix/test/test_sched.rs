use
nix
:
:
sched
:
:
{
sched_getaffinity
sched_getcpu
sched_setaffinity
CpuSet
}
;
use
nix
:
:
unistd
:
:
Pid
;
#
[
test
]
fn
test_sched_affinity
(
)
{
let
initial_affinity
=
sched_getaffinity
(
Pid
:
:
from_raw
(
0
)
)
.
unwrap
(
)
;
let
mut
at_least_one_cpu
=
false
;
let
mut
last_valid_cpu
=
0
;
for
field
in
0
.
.
CpuSet
:
:
count
(
)
{
if
initial_affinity
.
is_set
(
field
)
.
unwrap
(
)
{
at_least_one_cpu
=
true
;
last_valid_cpu
=
field
;
}
}
assert
!
(
at_least_one_cpu
)
;
let
mut
new_affinity
=
CpuSet
:
:
new
(
)
;
new_affinity
.
set
(
last_valid_cpu
)
.
unwrap
(
)
;
sched_setaffinity
(
Pid
:
:
from_raw
(
0
)
&
new_affinity
)
.
unwrap
(
)
;
let
updated_affinity
=
sched_getaffinity
(
Pid
:
:
from_raw
(
0
)
)
.
unwrap
(
)
;
for
field
in
0
.
.
CpuSet
:
:
count
(
)
{
assert_eq
!
(
updated_affinity
.
is_set
(
field
)
.
unwrap
(
)
field
=
=
last_valid_cpu
)
}
let
cur_cpu
=
sched_getcpu
(
)
.
unwrap
(
)
;
assert_eq
!
(
cur_cpu
last_valid_cpu
)
;
sched_setaffinity
(
Pid
:
:
from_raw
(
0
)
&
initial_affinity
)
.
unwrap
(
)
;
}
