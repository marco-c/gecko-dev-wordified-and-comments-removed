use
nix
:
:
sys
:
:
resource
:
:
{
getrlimit
setrlimit
Resource
}
;
use
nix
:
:
sys
:
:
resource
:
:
{
getrusage
UsageWho
}
;
#
[
test
]
#
[
cfg_attr
(
target_os
=
"
cygwin
"
ignore
)
]
pub
fn
test_resource_limits_nofile
(
)
{
let
(
mut
soft_limit
hard_limit
)
=
getrlimit
(
Resource
:
:
RLIMIT_NOFILE
)
.
unwrap
(
)
;
soft_limit
-
=
1
;
assert_ne
!
(
soft_limit
hard_limit
)
;
setrlimit
(
Resource
:
:
RLIMIT_NOFILE
soft_limit
hard_limit
)
.
unwrap
(
)
;
let
(
new_soft_limit
_
)
=
getrlimit
(
Resource
:
:
RLIMIT_NOFILE
)
.
unwrap
(
)
;
assert_eq
!
(
new_soft_limit
soft_limit
)
;
}
#
[
test
]
pub
fn
test_self_cpu_time
(
)
{
let
mut
numbers
:
Vec
<
i32
>
=
(
1
.
.
1_000_000
)
.
collect
(
)
;
numbers
.
iter_mut
(
)
.
for_each
(
|
item
|
*
item
*
=
2
)
;
assert_eq
!
(
numbers
[
100
.
.
200
]
.
iter
(
)
.
sum
:
:
<
i32
>
(
)
30_100
)
;
let
usage
=
getrusage
(
UsageWho
:
:
RUSAGE_SELF
)
.
expect
(
"
Failed
to
call
getrusage
for
SELF
"
)
;
let
rusage
=
usage
.
as_ref
(
)
;
let
user
=
usage
.
user_time
(
)
;
assert
!
(
user
.
tv_sec
(
)
>
0
|
|
user
.
tv_usec
(
)
>
0
)
;
assert_eq
!
(
user
.
tv_sec
(
)
rusage
.
ru_utime
.
tv_sec
)
;
assert_eq
!
(
user
.
tv_usec
(
)
rusage
.
ru_utime
.
tv_usec
)
;
}
