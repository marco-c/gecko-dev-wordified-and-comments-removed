use
std
:
:
convert
:
:
TryFrom
;
#
[
test
]
fn
create_signalfd
(
)
{
use
nix
:
:
sys
:
:
{
signal
:
:
SigSet
signalfd
:
:
SignalFd
}
;
let
mask
=
SigSet
:
:
empty
(
)
;
SignalFd
:
:
new
(
&
mask
)
.
unwrap
(
)
;
}
#
[
test
]
fn
create_signalfd_with_opts
(
)
{
use
nix
:
:
sys
:
:
{
signal
:
:
SigSet
signalfd
:
:
{
SfdFlags
SignalFd
}
}
;
let
mask
=
SigSet
:
:
empty
(
)
;
SignalFd
:
:
with_flags
(
&
mask
SfdFlags
:
:
SFD_CLOEXEC
|
SfdFlags
:
:
SFD_NONBLOCK
)
.
unwrap
(
)
;
}
#
[
test
]
fn
read_empty_signalfd
(
)
{
use
nix
:
:
sys
:
:
{
signal
:
:
SigSet
signalfd
:
:
{
SfdFlags
SignalFd
}
}
;
let
mask
=
SigSet
:
:
empty
(
)
;
let
fd
=
SignalFd
:
:
with_flags
(
&
mask
SfdFlags
:
:
SFD_NONBLOCK
)
.
unwrap
(
)
;
let
res
=
fd
.
read_signal
(
)
;
assert
!
(
res
.
unwrap
(
)
.
is_none
(
)
)
;
}
#
[
test
]
fn
test_signalfd
(
)
{
use
nix
:
:
sys
:
:
signal
:
:
{
self
raise
SigSet
Signal
}
;
use
nix
:
:
sys
:
:
signalfd
:
:
SignalFd
;
let
_m
=
crate
:
:
SIGNAL_MTX
.
lock
(
)
;
let
mut
mask
=
SigSet
:
:
empty
(
)
;
mask
.
add
(
signal
:
:
SIGUSR1
)
;
mask
.
thread_block
(
)
.
unwrap
(
)
;
let
fd
=
SignalFd
:
:
new
(
&
mask
)
.
unwrap
(
)
;
raise
(
signal
:
:
SIGUSR1
)
.
expect
(
"
Error
:
raise
(
SIGUSR1
)
failed
"
)
;
let
res
=
fd
.
read_signal
(
)
.
unwrap
(
)
.
unwrap
(
)
;
let
signo
=
Signal
:
:
try_from
(
res
.
ssi_signo
as
i32
)
.
unwrap
(
)
;
assert_eq
!
(
signo
signal
:
:
SIGUSR1
)
;
}
#
[
test
]
fn
test_signalfd_setmask
(
)
{
use
nix
:
:
sys
:
:
signal
:
:
{
self
raise
SigSet
Signal
}
;
use
nix
:
:
sys
:
:
signalfd
:
:
SignalFd
;
let
_m
=
crate
:
:
SIGNAL_MTX
.
lock
(
)
;
let
mut
mask
=
SigSet
:
:
empty
(
)
;
let
fd
=
SignalFd
:
:
new
(
&
mask
)
.
unwrap
(
)
;
mask
.
add
(
signal
:
:
SIGUSR1
)
;
mask
.
thread_block
(
)
.
unwrap
(
)
;
fd
.
set_mask
(
&
mask
)
.
unwrap
(
)
;
raise
(
signal
:
:
SIGUSR1
)
.
expect
(
"
Error
:
raise
(
SIGUSR1
)
failed
"
)
;
let
res
=
fd
.
read_signal
(
)
.
unwrap
(
)
.
unwrap
(
)
;
let
signo
=
Signal
:
:
try_from
(
res
.
ssi_signo
as
i32
)
.
unwrap
(
)
;
assert_eq
!
(
signo
signal
:
:
SIGUSR1
)
;
}
