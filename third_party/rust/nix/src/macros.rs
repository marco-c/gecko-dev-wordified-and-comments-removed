macro_rules
!
feature
{
(
#
!
[
meta
:
meta
]
(
item
:
item
)
*
)
=
>
{
(
#
[
cfg
(
meta
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
meta
)
)
)
]
item
)
*
}
}
macro_rules
!
libc_bitflags
{
(
(
#
[
outer
:
meta
]
)
*
pub
struct
BitFlags
:
ident
:
T
:
ty
{
(
(
#
[
inner
:
ident
(
args
:
tt
)
*
]
)
*
Flag
:
ident
(
as
cast
:
ty
)
*
;
)
+
}
)
=
>
{
:
:
bitflags
:
:
bitflags
!
{
#
[
derive
(
Copy
Clone
Debug
Eq
Hash
Ord
PartialEq
PartialOrd
)
]
#
[
repr
(
transparent
)
]
(
#
[
outer
]
)
*
pub
struct
BitFlags
:
T
{
(
(
#
[
inner
(
args
)
*
]
)
*
const
Flag
=
libc
:
:
Flag
(
as
cast
)
*
;
)
+
}
}
}
;
}
#
[
allow
(
unused_macro_rules
)
]
macro_rules
!
libc_enum
{
(
make_enum
name
:
BitFlags
:
ident
{
v
:
vis
attrs
:
[
(
attrs
:
tt
)
*
]
entries
:
[
(
entries
:
tt
)
*
]
}
)
=
>
{
(
attrs
)
*
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
Ord
PartialEq
PartialOrd
)
]
v
enum
BitFlags
{
(
entries
)
*
}
}
;
(
make_enum
name
:
BitFlags
:
ident
{
v
:
vis
attrs
:
[
(
attrs
:
tt
)
*
]
entries
:
[
(
entries
:
tt
)
*
]
from_type
:
repr
:
path
try_froms
:
[
(
try_froms
:
tt
)
*
]
}
)
=
>
{
(
attrs
)
*
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
Ord
PartialEq
PartialOrd
)
]
v
enum
BitFlags
{
(
entries
)
*
}
impl
:
:
std
:
:
convert
:
:
TryFrom
<
repr
>
for
BitFlags
{
type
Error
=
crate
:
:
Error
;
#
[
allow
(
unused_doc_comments
)
]
#
[
allow
(
deprecated
)
]
#
[
allow
(
unused_attributes
)
]
fn
try_from
(
x
:
repr
)
-
>
crate
:
:
Result
<
Self
>
{
match
x
{
(
try_froms
)
*
_
=
>
Err
(
crate
:
:
Error
:
:
EINVAL
)
}
}
}
}
;
(
accumulate_entries
name
:
BitFlags
:
ident
{
v
:
vis
attrs
:
attrs
:
tt
}
entries
:
tt
try_froms
:
tt
;
)
=
>
{
libc_enum
!
{
make_enum
name
:
BitFlags
{
v
attrs
:
attrs
entries
:
entries
}
}
}
;
(
accumulate_entries
name
:
BitFlags
:
ident
{
v
:
vis
attrs
:
attrs
:
tt
from_type
:
repr
:
path
}
entries
:
tt
try_froms
:
tt
;
)
=
>
{
libc_enum
!
{
make_enum
name
:
BitFlags
{
v
attrs
:
attrs
entries
:
entries
from_type
:
repr
try_froms
:
try_froms
}
}
}
;
(
accumulate_entries
name
:
BitFlags
:
ident
prefix
:
tt
[
(
entries
:
tt
)
*
]
[
(
try_froms
:
tt
)
*
]
;
#
[
attr
:
meta
]
(
tail
:
tt
)
*
)
=
>
{
libc_enum
!
{
accumulate_entries
name
:
BitFlags
prefix
[
(
entries
)
*
#
[
attr
]
]
[
(
try_froms
)
*
#
[
attr
]
]
;
(
tail
)
*
}
}
;
(
accumulate_entries
name
:
BitFlags
:
ident
prefix
:
tt
[
(
entries
:
tt
)
*
]
[
(
try_froms
:
tt
)
*
]
;
entry
:
ident
)
=
>
{
libc_enum
!
{
accumulate_entries
name
:
BitFlags
prefix
[
(
entries
)
*
entry
=
libc
:
:
entry
]
[
(
try_froms
)
*
libc
:
:
entry
=
>
Ok
(
BitFlags
:
:
entry
)
]
;
}
}
;
(
accumulate_entries
name
:
BitFlags
:
ident
prefix
:
tt
[
(
entries
:
tt
)
*
]
[
(
try_froms
:
tt
)
*
]
;
entry
:
ident
(
tail
:
tt
)
*
)
=
>
{
libc_enum
!
{
accumulate_entries
name
:
BitFlags
prefix
[
(
entries
)
*
entry
=
libc
:
:
entry
]
[
(
try_froms
)
*
libc
:
:
entry
=
>
Ok
(
BitFlags
:
:
entry
)
]
;
(
tail
)
*
}
}
;
(
accumulate_entries
name
:
BitFlags
:
ident
prefix
:
tt
[
(
entries
:
tt
)
*
]
[
(
try_froms
:
tt
)
*
]
;
entry
:
ident
as
ty
:
ty
(
tail
:
tt
)
*
)
=
>
{
libc_enum
!
{
accumulate_entries
name
:
BitFlags
prefix
[
(
entries
)
*
entry
=
libc
:
:
entry
as
ty
]
[
(
try_froms
)
*
libc
:
:
entry
as
ty
=
>
Ok
(
BitFlags
:
:
entry
)
]
;
(
tail
)
*
}
}
;
(
(
#
[
attr
:
meta
]
)
*
v
:
vis
enum
BitFlags
:
ident
{
(
vals
:
tt
)
*
}
)
=
>
{
libc_enum
!
{
accumulate_entries
name
:
BitFlags
{
v
attrs
:
[
(
#
[
attr
]
)
*
]
}
[
]
[
]
;
(
vals
)
*
}
}
;
(
(
#
[
attr
:
meta
]
)
*
v
:
vis
enum
BitFlags
:
ident
{
(
vals
:
tt
)
*
}
impl
TryFrom
<
repr
:
path
>
)
=
>
{
libc_enum
!
{
accumulate_entries
name
:
BitFlags
{
v
attrs
:
[
(
#
[
attr
]
)
*
]
from_type
:
repr
}
[
]
[
]
;
(
vals
)
*
}
}
;
}
