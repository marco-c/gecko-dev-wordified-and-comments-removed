use
std
:
:
ffi
:
:
CStr
;
use
std
:
:
os
:
:
unix
:
:
io
:
:
{
AsFd
AsRawFd
}
;
use
crate
:
:
errno
:
:
Errno
;
use
crate
:
:
Result
;
pub
fn
init_module
(
module_image
:
&
[
u8
]
param_values
:
&
CStr
)
-
>
Result
<
(
)
>
{
let
res
=
unsafe
{
libc
:
:
syscall
(
libc
:
:
SYS_init_module
module_image
.
as_ptr
(
)
module_image
.
len
(
)
param_values
.
as_ptr
(
)
)
}
;
Errno
:
:
result
(
res
)
.
map
(
drop
)
}
libc_bitflags
!
(
/
/
/
Flags
used
by
the
finit_module
function
.
pub
struct
ModuleInitFlags
:
libc
:
:
c_uint
{
/
/
/
Ignore
symbol
version
hashes
.
MODULE_INIT_IGNORE_MODVERSIONS
;
/
/
/
Ignore
kernel
version
magic
.
MODULE_INIT_IGNORE_VERMAGIC
;
}
)
;
pub
fn
finit_module
<
Fd
:
AsFd
>
(
fd
:
Fd
param_values
:
&
CStr
flags
:
ModuleInitFlags
)
-
>
Result
<
(
)
>
{
let
res
=
unsafe
{
libc
:
:
syscall
(
libc
:
:
SYS_finit_module
fd
.
as_fd
(
)
.
as_raw_fd
(
)
param_values
.
as_ptr
(
)
flags
.
bits
(
)
)
}
;
Errno
:
:
result
(
res
)
.
map
(
drop
)
}
libc_bitflags
!
(
/
/
/
Flags
used
by
delete_module
.
/
/
/
/
/
/
See
[
man
delete_module
(
2
)
]
(
https
:
/
/
man7
.
org
/
linux
/
man
-
pages
/
man2
/
delete_module
.
2
.
html
)
/
/
/
for
a
detailed
description
how
these
flags
work
.
pub
struct
DeleteModuleFlags
:
libc
:
:
c_int
{
O_NONBLOCK
;
O_TRUNC
;
}
)
;
pub
fn
delete_module
(
name
:
&
CStr
flags
:
DeleteModuleFlags
)
-
>
Result
<
(
)
>
{
let
res
=
unsafe
{
libc
:
:
syscall
(
libc
:
:
SYS_delete_module
name
.
as_ptr
(
)
flags
.
bits
(
)
)
}
;
Errno
:
:
result
(
res
)
.
map
(
drop
)
}
