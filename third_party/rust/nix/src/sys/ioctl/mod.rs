#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
#
[
macro_use
]
mod
linux
;
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
pub
use
self
:
:
linux
:
:
*
;
#
[
cfg
(
any
(
target_os
=
"
dragonfly
"
target_os
=
"
freebsd
"
target_os
=
"
ios
"
target_os
=
"
macos
"
target_os
=
"
netbsd
"
target_os
=
"
openbsd
"
)
)
]
#
[
macro_use
]
mod
bsd
;
#
[
cfg
(
any
(
target_os
=
"
dragonfly
"
target_os
=
"
freebsd
"
target_os
=
"
ios
"
target_os
=
"
macos
"
target_os
=
"
netbsd
"
target_os
=
"
openbsd
"
)
)
]
pub
use
self
:
:
bsd
:
:
*
;
#
[
macro_export
]
#
[
doc
(
hidden
)
]
macro_rules
!
convert_ioctl_res
{
(
w
:
expr
)
=
>
(
{
crate
:
:
errno
:
:
Errno
:
:
result
(
w
)
}
)
;
}
#
[
macro_export
]
macro_rules
!
ioctl_none
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
ioty
:
expr
nr
:
expr
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
request_code_none
!
(
ioty
nr
)
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
)
)
}
)
}
#
[
macro_export
]
macro_rules
!
ioctl_none_bad
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
nr
:
expr
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
nr
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
)
)
}
)
}
#
[
macro_export
]
macro_rules
!
ioctl_read
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
ioty
:
expr
nr
:
expr
ty
:
ty
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
data
:
*
mut
ty
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
request_code_read
!
(
ioty
nr
:
:
std
:
:
mem
:
:
size_of
:
:
<
ty
>
(
)
)
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
data
)
)
}
)
}
#
[
macro_export
]
macro_rules
!
ioctl_read_bad
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
nr
:
expr
ty
:
ty
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
data
:
*
mut
ty
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
nr
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
data
)
)
}
)
}
#
[
macro_export
]
macro_rules
!
ioctl_write_ptr
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
ioty
:
expr
nr
:
expr
ty
:
ty
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
data
:
*
const
ty
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
request_code_write
!
(
ioty
nr
:
:
std
:
:
mem
:
:
size_of
:
:
<
ty
>
(
)
)
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
data
)
)
}
)
}
#
[
macro_export
]
macro_rules
!
ioctl_write_ptr_bad
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
nr
:
expr
ty
:
ty
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
data
:
*
const
ty
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
nr
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
data
)
)
}
)
}
cfg_if
!
{
if
#
[
cfg
(
any
(
target_os
=
"
dragonfly
"
target_os
=
"
freebsd
"
)
)
]
{
/
/
/
Generates
a
wrapper
function
for
a
ioctl
that
writes
an
integer
to
the
kernel
.
/
/
/
/
/
/
The
arguments
to
this
macro
are
:
/
/
/
/
/
/
*
The
function
name
/
/
/
*
The
ioctl
identifier
/
/
/
*
The
ioctl
sequence
number
/
/
/
/
/
/
The
generated
function
has
the
following
signature
:
/
/
/
/
/
/
rust
ignore
/
/
/
pub
unsafe
fn
FUNCTION_NAME
(
fd
:
libc
:
:
c_int
data
:
nix
:
:
sys
:
:
ioctl
:
:
ioctl_param_type
)
-
>
Result
<
libc
:
:
c_int
>
/
/
/
/
/
/
/
/
/
nix
:
:
sys
:
:
ioctl
:
:
ioctl_param_type
depends
on
the
OS
:
/
/
/
*
BSD
-
libc
:
:
c_int
/
/
/
*
Linux
-
libc
:
:
c_ulong
/
/
/
/
/
/
For
a
more
in
-
depth
explanation
of
ioctls
see
[
:
:
sys
:
:
ioctl
]
(
sys
/
ioctl
/
index
.
html
)
.
/
/
/
/
/
/
#
Example
/
/
/
/
/
/
/
/
/
#
#
[
macro_use
]
extern
crate
nix
;
/
/
/
ioctl_write_int
!
(
vt_activate
b
'
v
'
4
)
;
/
/
/
#
fn
main
(
)
{
}
/
/
/
#
[
macro_export
]
macro_rules
!
ioctl_write_int
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
ioty
:
expr
nr
:
expr
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
data
:
crate
:
:
sys
:
:
ioctl
:
:
ioctl_param_type
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
request_code_write_int
!
(
ioty
nr
)
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
data
)
)
}
)
}
}
else
{
/
/
/
Generates
a
wrapper
function
for
a
ioctl
that
writes
an
integer
to
the
kernel
.
/
/
/
/
/
/
The
arguments
to
this
macro
are
:
/
/
/
/
/
/
*
The
function
name
/
/
/
*
The
ioctl
identifier
/
/
/
*
The
ioctl
sequence
number
/
/
/
/
/
/
The
generated
function
has
the
following
signature
:
/
/
/
/
/
/
rust
ignore
/
/
/
pub
unsafe
fn
FUNCTION_NAME
(
fd
:
libc
:
:
c_int
data
:
nix
:
:
sys
:
:
ioctl
:
:
ioctl_param_type
)
-
>
Result
<
libc
:
:
c_int
>
/
/
/
/
/
/
/
/
/
nix
:
:
sys
:
:
ioctl
:
:
ioctl_param_type
depends
on
the
OS
:
/
/
/
*
BSD
-
libc
:
:
c_int
/
/
/
*
Linux
-
libc
:
:
c_ulong
/
/
/
/
/
/
For
a
more
in
-
depth
explanation
of
ioctls
see
[
:
:
sys
:
:
ioctl
]
(
sys
/
ioctl
/
index
.
html
)
.
/
/
/
/
/
/
#
Example
/
/
/
/
/
/
/
/
/
#
#
[
macro_use
]
extern
crate
nix
;
/
/
/
const
HCI_IOC_MAGIC
:
u8
=
b
'
k
'
;
/
/
/
const
HCI_IOC_HCIDEVUP
:
u8
=
1
;
/
/
/
ioctl_write_int
!
(
hci_dev_up
HCI_IOC_MAGIC
HCI_IOC_HCIDEVUP
)
;
/
/
/
#
fn
main
(
)
{
}
/
/
/
#
[
macro_export
]
macro_rules
!
ioctl_write_int
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
ioty
:
expr
nr
:
expr
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
data
:
crate
:
:
sys
:
:
ioctl
:
:
ioctl_param_type
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
request_code_write
!
(
ioty
nr
:
:
std
:
:
mem
:
:
size_of
:
:
<
crate
:
:
libc
:
:
c_int
>
(
)
)
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
data
)
)
}
)
}
}
}
#
[
macro_export
]
macro_rules
!
ioctl_write_int_bad
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
nr
:
expr
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
data
:
crate
:
:
libc
:
:
c_int
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
nr
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
data
)
)
}
)
}
#
[
macro_export
]
macro_rules
!
ioctl_readwrite
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
ioty
:
expr
nr
:
expr
ty
:
ty
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
data
:
*
mut
ty
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
request_code_readwrite
!
(
ioty
nr
:
:
std
:
:
mem
:
:
size_of
:
:
<
ty
>
(
)
)
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
data
)
)
}
)
}
#
[
macro_export
]
macro_rules
!
ioctl_readwrite_bad
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
nr
:
expr
ty
:
ty
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
data
:
*
mut
ty
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
nr
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
data
)
)
}
)
}
#
[
macro_export
]
macro_rules
!
ioctl_read_buf
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
ioty
:
expr
nr
:
expr
ty
:
ty
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
data
:
&
mut
[
ty
]
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
request_code_read
!
(
ioty
nr
data
.
len
(
)
*
:
:
std
:
:
mem
:
:
size_of
:
:
<
ty
>
(
)
)
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
data
)
)
}
)
}
#
[
macro_export
]
macro_rules
!
ioctl_write_buf
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
ioty
:
expr
nr
:
expr
ty
:
ty
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
data
:
&
[
ty
]
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
request_code_write
!
(
ioty
nr
data
.
len
(
)
*
:
:
std
:
:
mem
:
:
size_of
:
:
<
ty
>
(
)
)
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
data
)
)
}
)
}
#
[
macro_export
]
macro_rules
!
ioctl_readwrite_buf
{
(
(
#
[
attr
:
meta
]
)
*
name
:
ident
ioty
:
expr
nr
:
expr
ty
:
ty
)
=
>
(
(
#
[
attr
]
)
*
pub
unsafe
fn
name
(
fd
:
crate
:
:
libc
:
:
c_int
data
:
&
mut
[
ty
]
)
-
>
crate
:
:
Result
<
crate
:
:
libc
:
:
c_int
>
{
convert_ioctl_res
!
(
crate
:
:
libc
:
:
ioctl
(
fd
request_code_readwrite
!
(
ioty
nr
data
.
len
(
)
*
:
:
std
:
:
mem
:
:
size_of
:
:
<
ty
>
(
)
)
as
crate
:
:
sys
:
:
ioctl
:
:
ioctl_num_type
data
)
)
}
)
}
