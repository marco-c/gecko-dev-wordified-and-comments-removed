use
libc
:
:
{
self
SI_LOAD_SHIFT
}
;
use
std
:
:
{
cmp
mem
}
;
use
std
:
:
time
:
:
Duration
;
use
Result
;
use
errno
:
:
Errno
;
#
[
derive
(
Copy
Clone
Debug
Eq
Hash
PartialEq
)
]
pub
struct
SysInfo
(
libc
:
:
sysinfo
)
;
impl
SysInfo
{
pub
fn
load_average
(
&
self
)
-
>
(
f64
f64
f64
)
{
(
self
.
0
.
loads
[
0
]
as
f64
/
(
1
<
<
SI_LOAD_SHIFT
)
as
f64
self
.
0
.
loads
[
1
]
as
f64
/
(
1
<
<
SI_LOAD_SHIFT
)
as
f64
self
.
0
.
loads
[
2
]
as
f64
/
(
1
<
<
SI_LOAD_SHIFT
)
as
f64
)
}
pub
fn
uptime
(
&
self
)
-
>
Duration
{
Duration
:
:
from_secs
(
cmp
:
:
max
(
self
.
0
.
uptime
0
)
as
u64
)
}
pub
fn
process_count
(
&
self
)
-
>
u16
{
self
.
0
.
procs
}
pub
fn
swap_total
(
&
self
)
-
>
u64
{
self
.
scale_mem
(
self
.
0
.
totalswap
)
}
pub
fn
swap_free
(
&
self
)
-
>
u64
{
self
.
scale_mem
(
self
.
0
.
freeswap
)
}
pub
fn
ram_total
(
&
self
)
-
>
u64
{
self
.
scale_mem
(
self
.
0
.
totalram
)
}
pub
fn
ram_unused
(
&
self
)
-
>
u64
{
self
.
scale_mem
(
self
.
0
.
freeram
)
}
fn
scale_mem
(
&
self
units
:
libc
:
:
c_ulong
)
-
>
u64
{
units
as
u64
*
self
.
0
.
mem_unit
as
u64
}
}
pub
fn
sysinfo
(
)
-
>
Result
<
SysInfo
>
{
let
mut
info
:
libc
:
:
sysinfo
=
unsafe
{
mem
:
:
uninitialized
(
)
}
;
let
res
=
unsafe
{
libc
:
:
sysinfo
(
&
mut
info
)
}
;
Errno
:
:
result
(
res
)
.
map
(
|
_
|
SysInfo
(
info
)
)
}
