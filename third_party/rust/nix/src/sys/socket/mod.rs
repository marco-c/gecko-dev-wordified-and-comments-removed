use
{
Error
Result
}
;
use
errno
:
:
Errno
;
use
libc
:
:
{
self
c_void
c_int
iovec
socklen_t
size_t
CMSG_FIRSTHDR
CMSG_NXTHDR
CMSG_DATA
CMSG_LEN
}
;
use
std
:
:
{
mem
ptr
slice
}
;
use
std
:
:
os
:
:
unix
:
:
io
:
:
RawFd
;
use
sys
:
:
time
:
:
TimeVal
;
use
sys
:
:
uio
:
:
IoVec
;
mod
addr
;
pub
mod
sockopt
;
pub
use
self
:
:
addr
:
:
{
AddressFamily
SockAddr
InetAddr
UnixAddr
IpAddr
Ipv4Addr
Ipv6Addr
LinkAddr
}
;
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
pub
use
:
:
sys
:
:
socket
:
:
addr
:
:
netlink
:
:
NetlinkAddr
;
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
pub
use
sys
:
:
socket
:
:
addr
:
:
alg
:
:
AlgAddr
;
#
[
cfg
(
target_os
=
"
linux
"
)
]
pub
use
sys
:
:
socket
:
:
addr
:
:
vsock
:
:
VsockAddr
;
pub
use
libc
:
:
{
cmsghdr
msghdr
sa_family_t
sockaddr
sockaddr_in
sockaddr_in6
sockaddr_storage
sockaddr_un
}
;
#
[
doc
(
hidden
)
]
pub
use
libc
:
:
{
c_uint
CMSG_SPACE
}
;
#
[
derive
(
Clone
Copy
PartialEq
Eq
Debug
)
]
#
[
repr
(
i32
)
]
pub
enum
SockType
{
Stream
=
libc
:
:
SOCK_STREAM
Datagram
=
libc
:
:
SOCK_DGRAM
SeqPacket
=
libc
:
:
SOCK_SEQPACKET
Raw
=
libc
:
:
SOCK_RAW
Rdm
=
libc
:
:
SOCK_RDM
}
#
[
repr
(
i32
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
PartialEq
)
]
pub
enum
SockProtocol
{
Tcp
=
libc
:
:
IPPROTO_TCP
Udp
=
libc
:
:
IPPROTO_UDP
#
[
cfg
(
any
(
target_os
=
"
ios
"
target_os
=
"
macos
"
)
)
]
KextEvent
=
libc
:
:
SYSPROTO_EVENT
#
[
cfg
(
any
(
target_os
=
"
ios
"
target_os
=
"
macos
"
)
)
]
KextControl
=
libc
:
:
SYSPROTO_CONTROL
}
libc_bitflags
!
{
/
/
/
Additional
socket
options
pub
struct
SockFlag
:
c_int
{
/
/
/
Set
non
-
blocking
mode
on
the
new
socket
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
dragonfly
"
target_os
=
"
freebsd
"
target_os
=
"
linux
"
target_os
=
"
netbsd
"
target_os
=
"
openbsd
"
)
)
]
SOCK_NONBLOCK
;
/
/
/
Set
close
-
on
-
exec
on
the
new
descriptor
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
dragonfly
"
target_os
=
"
freebsd
"
target_os
=
"
linux
"
target_os
=
"
netbsd
"
target_os
=
"
openbsd
"
)
)
]
SOCK_CLOEXEC
;
/
/
/
Return
EPIPE
instead
of
raising
SIGPIPE
#
[
cfg
(
target_os
=
"
netbsd
"
)
]
SOCK_NOSIGPIPE
;
/
/
/
For
domains
AF_INET
(
6
)
only
allow
connect
(
2
)
sendto
(
2
)
or
sendmsg
(
2
)
#
[
cfg
(
target_os
=
"
openbsd
"
)
]
SOCK_DNS
;
}
}
libc_bitflags
!
{
/
/
/
Flags
for
send
/
recv
and
their
relatives
pub
struct
MsgFlags
:
c_int
{
/
/
/
Sends
or
requests
out
-
of
-
band
data
on
sockets
that
support
this
notion
/
/
/
(
e
.
g
.
of
type
[
Stream
]
(
enum
.
SockType
.
html
)
)
;
the
underlying
protocol
must
also
/
/
/
support
out
-
of
-
band
data
.
MSG_OOB
;
/
/
/
Peeks
at
an
incoming
message
.
The
data
is
treated
as
unread
and
the
next
/
/
/
[
recv
(
)
]
(
fn
.
recv
.
html
)
/
/
/
or
similar
function
shall
still
return
this
data
.
MSG_PEEK
;
/
/
/
Receive
operation
blocks
until
the
full
amount
of
data
can
be
/
/
/
returned
.
The
function
may
return
smaller
amount
of
data
if
a
signal
/
/
/
is
caught
an
error
or
disconnect
occurs
.
MSG_WAITALL
;
/
/
/
Enables
nonblocking
operation
;
if
the
operation
would
block
/
/
/
EAGAIN
or
EWOULDBLOCK
is
returned
.
This
provides
similar
/
/
/
behavior
to
setting
the
O_NONBLOCK
flag
/
/
/
(
via
the
[
fcntl
]
(
.
.
/
.
.
/
fcntl
/
fn
.
fcntl
.
html
)
/
/
/
F_SETFL
operation
)
but
differs
in
that
MSG_DONTWAIT
is
a
per
-
/
/
/
call
option
whereas
O_NONBLOCK
is
a
setting
on
the
open
file
/
/
/
description
(
see
[
open
(
2
)
]
(
http
:
/
/
man7
.
org
/
linux
/
man
-
pages
/
man2
/
open
.
2
.
html
)
)
/
/
/
which
will
affect
all
threads
in
/
/
/
the
calling
process
and
as
well
as
other
processes
that
hold
/
/
/
file
descriptors
referring
to
the
same
open
file
description
.
MSG_DONTWAIT
;
/
/
/
Receive
flags
:
Control
Data
was
discarded
(
buffer
too
small
)
MSG_CTRUNC
;
/
/
/
For
raw
(
[
Packet
]
(
addr
/
enum
.
AddressFamily
.
html
)
)
Internet
datagram
/
/
/
(
since
Linux
2
.
4
.
27
/
2
.
6
.
8
)
/
/
/
netlink
(
since
Linux
2
.
6
.
22
)
and
UNIX
datagram
(
since
Linux
3
.
4
)
/
/
/
sockets
:
return
the
real
length
of
the
packet
or
datagram
even
/
/
/
when
it
was
longer
than
the
passed
buffer
.
Not
implemented
for
UNIX
/
/
/
domain
(
[
unix
(
7
)
]
(
https
:
/
/
linux
.
die
.
net
/
man
/
7
/
unix
)
)
sockets
.
/
/
/
/
/
/
For
use
with
Internet
stream
sockets
see
[
tcp
(
7
)
]
(
https
:
/
/
linux
.
die
.
net
/
man
/
7
/
tcp
)
.
MSG_TRUNC
;
/
/
/
Terminates
a
record
(
when
this
notion
is
supported
as
for
/
/
/
sockets
of
type
[
SeqPacket
]
(
enum
.
SockType
.
html
)
)
.
MSG_EOR
;
/
/
/
This
flag
specifies
that
queued
errors
should
be
received
from
/
/
/
the
socket
error
queue
.
(
For
more
details
see
/
/
/
[
recvfrom
(
2
)
]
(
https
:
/
/
linux
.
die
.
net
/
man
/
2
/
recvfrom
)
)
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
MSG_ERRQUEUE
;
/
/
/
Set
the
close
-
on
-
exec
flag
for
the
file
descriptor
received
via
a
UNIX
domain
/
/
/
file
descriptor
using
the
SCM_RIGHTS
operation
(
described
in
/
/
/
[
unix
(
7
)
]
(
https
:
/
/
linux
.
die
.
net
/
man
/
7
/
unix
)
)
.
/
/
/
This
flag
is
useful
for
the
same
reasons
as
the
O_CLOEXEC
flag
of
/
/
/
[
open
(
2
)
]
(
http
:
/
/
pubs
.
opengroup
.
org
/
onlinepubs
/
9699919799
/
functions
/
open
.
html
)
.
/
/
/
/
/
/
Only
used
in
[
recvmsg
]
(
fn
.
recvmsg
.
html
)
function
.
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
dragonfly
"
target_os
=
"
freebsd
"
target_os
=
"
linux
"
target_os
=
"
netbsd
"
target_os
=
"
openbsd
"
)
)
]
MSG_CMSG_CLOEXEC
;
}
}
cfg_if
!
{
if
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
{
/
/
/
Unix
credentials
of
the
sending
process
.
/
/
/
/
/
/
This
struct
is
used
with
the
SO_PEERCRED
ancillary
message
for
UNIX
sockets
.
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
struct
UnixCredentials
(
libc
:
:
ucred
)
;
impl
UnixCredentials
{
/
/
/
Returns
the
process
identifier
pub
fn
pid
(
&
self
)
-
>
libc
:
:
pid_t
{
self
.
0
.
pid
}
/
/
/
Returns
the
user
identifier
pub
fn
uid
(
&
self
)
-
>
libc
:
:
uid_t
{
self
.
0
.
uid
}
/
/
/
Returns
the
group
identifier
pub
fn
gid
(
&
self
)
-
>
libc
:
:
gid_t
{
self
.
0
.
gid
}
}
impl
From
<
libc
:
:
ucred
>
for
UnixCredentials
{
fn
from
(
cred
:
libc
:
:
ucred
)
-
>
Self
{
UnixCredentials
(
cred
)
}
}
impl
Into
<
libc
:
:
ucred
>
for
UnixCredentials
{
fn
into
(
self
)
-
>
libc
:
:
ucred
{
self
.
0
}
}
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
struct
IpMembershipRequest
(
libc
:
:
ip_mreq
)
;
impl
IpMembershipRequest
{
pub
fn
new
(
group
:
Ipv4Addr
interface
:
Option
<
Ipv4Addr
>
)
-
>
Self
{
IpMembershipRequest
(
libc
:
:
ip_mreq
{
imr_multiaddr
:
group
.
0
imr_interface
:
interface
.
unwrap_or_else
(
Ipv4Addr
:
:
any
)
.
0
}
)
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
struct
Ipv6MembershipRequest
(
libc
:
:
ipv6_mreq
)
;
impl
Ipv6MembershipRequest
{
pub
fn
new
(
group
:
Ipv6Addr
)
-
>
Self
{
Ipv6MembershipRequest
(
libc
:
:
ipv6_mreq
{
ipv6mr_multiaddr
:
group
.
0
ipv6mr_interface
:
0
}
)
}
}
cfg_if
!
{
/
/
Darwin
and
DragonFly
BSD
always
align
struct
cmsghdr
to
32
-
bit
only
.
if
#
[
cfg
(
any
(
target_os
=
"
dragonfly
"
target_os
=
"
ios
"
target_os
=
"
macos
"
)
)
]
{
type
align_of_cmsg_data
=
u32
;
}
else
{
type
align_of_cmsg_data
=
size_t
;
}
}
pub
trait
CmsgBuffer
{
fn
as_bytes_mut
(
&
mut
self
)
-
>
&
mut
[
u8
]
;
}
#
[
macro_export
]
macro_rules
!
cmsg_space
{
(
(
x
:
ty
)
*
)
=
>
{
{
use
nix
:
:
sys
:
:
socket
:
:
{
c_uint
CMSG_SPACE
}
;
use
std
:
:
mem
;
let
mut
space
=
0
;
(
space
+
=
unsafe
{
CMSG_SPACE
(
mem
:
:
size_of
:
:
<
x
>
(
)
as
c_uint
)
}
as
usize
;
)
*
let
mut
v
=
Vec
:
:
<
u8
>
:
:
with_capacity
(
space
)
;
/
/
safe
because
any
bit
pattern
is
a
valid
u8
unsafe
{
v
.
set_len
(
space
)
}
;
v
}
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
struct
CmsgSpace
<
T
>
{
_hdr
:
cmsghdr
_pad
:
[
align_of_cmsg_data
;
0
]
_data
:
T
}
impl
<
T
>
CmsgSpace
<
T
>
{
#
[
deprecated
(
since
=
"
0
.
14
.
0
"
note
=
"
Use
the
cmsg_space
!
macro
instead
"
)
]
pub
fn
new
(
)
-
>
Self
{
unsafe
{
mem
:
:
uninitialized
(
)
}
}
}
impl
<
T
>
CmsgBuffer
for
CmsgSpace
<
T
>
{
fn
as_bytes_mut
(
&
mut
self
)
-
>
&
mut
[
u8
]
{
unsafe
{
slice
:
:
from_raw_parts_mut
(
self
as
*
mut
CmsgSpace
<
T
>
as
*
mut
u8
mem
:
:
size_of
:
:
<
Self
>
(
)
)
}
}
}
impl
CmsgBuffer
for
Vec
<
u8
>
{
fn
as_bytes_mut
(
&
mut
self
)
-
>
&
mut
[
u8
]
{
&
mut
self
[
.
.
]
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
struct
RecvMsg
<
'
a
>
{
pub
bytes
:
usize
cmsghdr
:
Option
<
&
'
a
cmsghdr
>
pub
address
:
Option
<
SockAddr
>
pub
flags
:
MsgFlags
mhdr
:
msghdr
}
impl
<
'
a
>
RecvMsg
<
'
a
>
{
pub
fn
cmsgs
(
&
self
)
-
>
CmsgIterator
{
CmsgIterator
{
cmsghdr
:
self
.
cmsghdr
mhdr
:
&
self
.
mhdr
}
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
struct
CmsgIterator
<
'
a
>
{
cmsghdr
:
Option
<
&
'
a
cmsghdr
>
mhdr
:
&
'
a
msghdr
}
impl
<
'
a
>
Iterator
for
CmsgIterator
<
'
a
>
{
type
Item
=
ControlMessageOwned
;
fn
next
(
&
mut
self
)
-
>
Option
<
ControlMessageOwned
>
{
match
self
.
cmsghdr
{
None
=
>
None
Some
(
hdr
)
=
>
{
let
cm
=
unsafe
{
Some
(
ControlMessageOwned
:
:
decode_from
(
hdr
)
)
}
;
self
.
cmsghdr
=
unsafe
{
let
p
=
CMSG_NXTHDR
(
self
.
mhdr
as
*
const
_
hdr
as
*
const
_
)
;
p
.
as_ref
(
)
}
;
cm
}
}
}
}
#
[
derive
(
Clone
Debug
Eq
PartialEq
)
]
pub
enum
ControlMessageOwned
{
ScmRights
(
Vec
<
RawFd
>
)
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
ScmCredentials
(
libc
:
:
ucred
)
#
[
cfg_attr
(
not
(
all
(
target_os
=
"
freebsd
"
target_arch
=
"
x86
"
)
)
doc
=
"
"
)
]
#
[
cfg_attr
(
all
(
target_os
=
"
freebsd
"
target_arch
=
"
x86
"
)
doc
=
"
no_run
"
)
]
ScmTimestamp
(
TimeVal
)
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
ios
"
target_os
=
"
linux
"
target_os
=
"
macos
"
target_os
=
"
netbsd
"
)
)
]
Ipv4PacketInfo
(
libc
:
:
in_pktinfo
)
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
dragonfly
"
target_os
=
"
freebsd
"
target_os
=
"
ios
"
target_os
=
"
linux
"
target_os
=
"
macos
"
target_os
=
"
openbsd
"
target_os
=
"
netbsd
"
)
)
]
Ipv6PacketInfo
(
libc
:
:
in6_pktinfo
)
#
[
cfg
(
any
(
target_os
=
"
freebsd
"
target_os
=
"
ios
"
target_os
=
"
macos
"
target_os
=
"
netbsd
"
target_os
=
"
openbsd
"
)
)
]
Ipv4RecvIf
(
libc
:
:
sockaddr_dl
)
#
[
cfg
(
any
(
target_os
=
"
freebsd
"
target_os
=
"
ios
"
target_os
=
"
macos
"
target_os
=
"
netbsd
"
target_os
=
"
openbsd
"
)
)
]
Ipv4RecvDstAddr
(
libc
:
:
in_addr
)
#
[
doc
(
hidden
)
]
Unknown
(
UnknownCmsg
)
}
impl
ControlMessageOwned
{
unsafe
fn
decode_from
(
header
:
&
cmsghdr
)
-
>
ControlMessageOwned
{
let
p
=
CMSG_DATA
(
header
)
;
let
len
=
header
as
*
const
_
as
usize
+
header
.
cmsg_len
as
usize
-
p
as
usize
;
match
(
header
.
cmsg_level
header
.
cmsg_type
)
{
(
libc
:
:
SOL_SOCKET
libc
:
:
SCM_RIGHTS
)
=
>
{
let
n
=
len
/
mem
:
:
size_of
:
:
<
RawFd
>
(
)
;
let
mut
fds
=
Vec
:
:
with_capacity
(
n
)
;
for
i
in
0
.
.
n
{
let
fdp
=
(
p
as
*
const
RawFd
)
.
offset
(
i
as
isize
)
;
fds
.
push
(
ptr
:
:
read_unaligned
(
fdp
)
)
;
}
let
cmo
=
ControlMessageOwned
:
:
ScmRights
(
fds
)
;
cmo
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
(
libc
:
:
SOL_SOCKET
libc
:
:
SCM_CREDENTIALS
)
=
>
{
let
cred
:
libc
:
:
ucred
=
ptr
:
:
read_unaligned
(
p
as
*
const
_
)
;
ControlMessageOwned
:
:
ScmCredentials
(
cred
)
}
(
libc
:
:
SOL_SOCKET
libc
:
:
SCM_TIMESTAMP
)
=
>
{
let
tv
:
libc
:
:
timeval
=
ptr
:
:
read_unaligned
(
p
as
*
const
_
)
;
ControlMessageOwned
:
:
ScmTimestamp
(
TimeVal
:
:
from
(
tv
)
)
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
freebsd
"
target_os
=
"
ios
"
target_os
=
"
linux
"
target_os
=
"
macos
"
)
)
]
(
libc
:
:
IPPROTO_IPV6
libc
:
:
IPV6_PKTINFO
)
=
>
{
let
info
=
ptr
:
:
read_unaligned
(
p
as
*
const
libc
:
:
in6_pktinfo
)
;
ControlMessageOwned
:
:
Ipv6PacketInfo
(
info
)
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
ios
"
target_os
=
"
linux
"
target_os
=
"
macos
"
target_os
=
"
netbsd
"
)
)
]
(
libc
:
:
IPPROTO_IP
libc
:
:
IP_PKTINFO
)
=
>
{
let
info
=
ptr
:
:
read_unaligned
(
p
as
*
const
libc
:
:
in_pktinfo
)
;
ControlMessageOwned
:
:
Ipv4PacketInfo
(
info
)
}
#
[
cfg
(
any
(
target_os
=
"
freebsd
"
target_os
=
"
ios
"
target_os
=
"
macos
"
target_os
=
"
netbsd
"
target_os
=
"
openbsd
"
)
)
]
(
libc
:
:
IPPROTO_IP
libc
:
:
IP_RECVIF
)
=
>
{
let
dl
=
ptr
:
:
read_unaligned
(
p
as
*
const
libc
:
:
sockaddr_dl
)
;
ControlMessageOwned
:
:
Ipv4RecvIf
(
dl
)
}
#
[
cfg
(
any
(
target_os
=
"
freebsd
"
target_os
=
"
ios
"
target_os
=
"
macos
"
target_os
=
"
netbsd
"
target_os
=
"
openbsd
"
)
)
]
(
libc
:
:
IPPROTO_IP
libc
:
:
IP_RECVDSTADDR
)
=
>
{
let
dl
=
ptr
:
:
read_unaligned
(
p
as
*
const
libc
:
:
in_addr
)
;
ControlMessageOwned
:
:
Ipv4RecvDstAddr
(
dl
)
}
(
_
_
)
=
>
{
let
sl
=
slice
:
:
from_raw_parts
(
p
len
)
;
let
ucmsg
=
UnknownCmsg
(
*
header
Vec
:
:
<
u8
>
:
:
from
(
&
sl
[
.
.
]
)
)
;
ControlMessageOwned
:
:
Unknown
(
ucmsg
)
}
}
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
)
]
pub
enum
ControlMessage
<
'
a
>
{
ScmRights
(
&
'
a
[
RawFd
]
)
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
ScmCredentials
(
&
'
a
libc
:
:
ucred
)
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
AlgSetIv
(
&
'
a
[
u8
]
)
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
AlgSetOp
(
&
'
a
libc
:
:
c_int
)
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
AlgSetAeadAssoclen
(
&
'
a
u32
)
}
#
[
doc
(
hidden
)
]
#
[
derive
(
Clone
Debug
Eq
PartialEq
)
]
pub
struct
UnknownCmsg
(
cmsghdr
Vec
<
u8
>
)
;
impl
<
'
a
>
ControlMessage
<
'
a
>
{
fn
space
(
&
self
)
-
>
usize
{
unsafe
{
CMSG_SPACE
(
self
.
len
(
)
as
libc
:
:
c_uint
)
as
usize
}
}
#
[
cfg
(
any
(
target_os
=
"
android
"
all
(
target_os
=
"
linux
"
not
(
target_env
=
"
musl
"
)
)
)
)
]
fn
cmsg_len
(
&
self
)
-
>
usize
{
unsafe
{
CMSG_LEN
(
self
.
len
(
)
as
libc
:
:
c_uint
)
as
usize
}
}
#
[
cfg
(
not
(
any
(
target_os
=
"
android
"
all
(
target_os
=
"
linux
"
not
(
target_env
=
"
musl
"
)
)
)
)
)
]
fn
cmsg_len
(
&
self
)
-
>
libc
:
:
c_uint
{
unsafe
{
CMSG_LEN
(
self
.
len
(
)
as
libc
:
:
c_uint
)
}
}
fn
copy_to_cmsg_data
(
&
self
cmsg_data
:
*
mut
u8
)
{
let
data_ptr
=
match
self
{
&
ControlMessage
:
:
ScmRights
(
fds
)
=
>
{
fds
as
*
const
_
as
*
const
u8
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
ScmCredentials
(
creds
)
=
>
{
creds
as
*
const
libc
:
:
ucred
as
*
const
u8
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
AlgSetIv
(
iv
)
=
>
{
unsafe
{
let
alg_iv
=
cmsg_data
as
*
mut
libc
:
:
af_alg_iv
;
(
*
alg_iv
)
.
ivlen
=
iv
.
len
(
)
as
u32
;
ptr
:
:
copy_nonoverlapping
(
iv
.
as_ptr
(
)
(
*
alg_iv
)
.
iv
.
as_mut_ptr
(
)
iv
.
len
(
)
)
;
}
;
return
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
AlgSetOp
(
op
)
=
>
{
op
as
*
const
_
as
*
const
u8
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
AlgSetAeadAssoclen
(
len
)
=
>
{
len
as
*
const
_
as
*
const
u8
}
}
;
unsafe
{
ptr
:
:
copy_nonoverlapping
(
data_ptr
cmsg_data
self
.
len
(
)
)
}
;
}
fn
len
(
&
self
)
-
>
usize
{
match
self
{
&
ControlMessage
:
:
ScmRights
(
fds
)
=
>
{
mem
:
:
size_of_val
(
fds
)
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
ScmCredentials
(
creds
)
=
>
{
mem
:
:
size_of_val
(
creds
)
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
AlgSetIv
(
iv
)
=
>
{
mem
:
:
size_of
:
:
<
libc
:
:
af_alg_iv
>
(
)
+
iv
.
len
(
)
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
AlgSetOp
(
op
)
=
>
{
mem
:
:
size_of_val
(
op
)
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
AlgSetAeadAssoclen
(
len
)
=
>
{
mem
:
:
size_of_val
(
len
)
}
}
}
fn
cmsg_level
(
&
self
)
-
>
libc
:
:
c_int
{
match
self
{
&
ControlMessage
:
:
ScmRights
(
_
)
=
>
libc
:
:
SOL_SOCKET
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
ScmCredentials
(
_
)
=
>
libc
:
:
SOL_SOCKET
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
AlgSetIv
(
_
)
|
&
ControlMessage
:
:
AlgSetOp
(
_
)
|
&
ControlMessage
:
:
AlgSetAeadAssoclen
(
_
)
=
>
{
libc
:
:
SOL_ALG
}
}
}
fn
cmsg_type
(
&
self
)
-
>
libc
:
:
c_int
{
match
self
{
&
ControlMessage
:
:
ScmRights
(
_
)
=
>
libc
:
:
SCM_RIGHTS
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
ScmCredentials
(
_
)
=
>
libc
:
:
SCM_CREDENTIALS
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
AlgSetIv
(
_
)
=
>
{
libc
:
:
ALG_SET_IV
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
AlgSetOp
(
_
)
=
>
{
libc
:
:
ALG_SET_OP
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
&
ControlMessage
:
:
AlgSetAeadAssoclen
(
_
)
=
>
{
libc
:
:
ALG_SET_AEAD_ASSOCLEN
}
}
}
unsafe
fn
encode_into
(
&
self
cmsg
:
*
mut
cmsghdr
)
{
(
*
cmsg
)
.
cmsg_level
=
self
.
cmsg_level
(
)
;
(
*
cmsg
)
.
cmsg_type
=
self
.
cmsg_type
(
)
;
(
*
cmsg
)
.
cmsg_len
=
self
.
cmsg_len
(
)
;
self
.
copy_to_cmsg_data
(
CMSG_DATA
(
cmsg
)
)
;
}
}
pub
fn
sendmsg
(
fd
:
RawFd
iov
:
&
[
IoVec
<
&
[
u8
]
>
]
cmsgs
:
&
[
ControlMessage
]
flags
:
MsgFlags
addr
:
Option
<
&
SockAddr
>
)
-
>
Result
<
usize
>
{
let
capacity
=
cmsgs
.
iter
(
)
.
map
(
|
c
|
c
.
space
(
)
)
.
sum
(
)
;
let
cmsg_buffer
=
vec
!
[
0u8
;
capacity
]
;
let
(
name
namelen
)
=
match
addr
{
Some
(
addr
)
=
>
{
let
(
x
y
)
=
unsafe
{
addr
.
as_ffi_pair
(
)
}
;
(
x
as
*
const
_
y
)
}
None
=
>
(
ptr
:
:
null
(
)
0
)
}
;
let
cmsg_ptr
=
if
capacity
>
0
{
cmsg_buffer
.
as_ptr
(
)
as
*
mut
c_void
}
else
{
ptr
:
:
null_mut
(
)
}
;
let
mhdr
=
{
let
mut
mhdr
:
msghdr
=
unsafe
{
mem
:
:
uninitialized
(
)
}
;
mhdr
.
msg_name
=
name
as
*
mut
_
;
mhdr
.
msg_namelen
=
namelen
;
mhdr
.
msg_iov
=
iov
.
as_ptr
(
)
as
*
mut
_
;
mhdr
.
msg_iovlen
=
iov
.
len
(
)
as
_
;
mhdr
.
msg_control
=
cmsg_ptr
;
mhdr
.
msg_controllen
=
capacity
as
_
;
mhdr
.
msg_flags
=
0
;
mhdr
}
;
let
mut
pmhdr
:
*
mut
cmsghdr
=
unsafe
{
CMSG_FIRSTHDR
(
&
mhdr
as
*
const
msghdr
)
}
;
for
cmsg
in
cmsgs
{
assert_ne
!
(
pmhdr
ptr
:
:
null_mut
(
)
)
;
unsafe
{
cmsg
.
encode_into
(
pmhdr
)
}
;
pmhdr
=
unsafe
{
CMSG_NXTHDR
(
&
mhdr
as
*
const
msghdr
pmhdr
)
}
;
}
let
ret
=
unsafe
{
libc
:
:
sendmsg
(
fd
&
mhdr
flags
.
bits
(
)
)
}
;
Errno
:
:
result
(
ret
)
.
map
(
|
r
|
r
as
usize
)
}
pub
fn
recvmsg
<
'
a
>
(
fd
:
RawFd
iov
:
&
[
IoVec
<
&
mut
[
u8
]
>
]
cmsg_buffer
:
Option
<
&
'
a
mut
dyn
CmsgBuffer
>
flags
:
MsgFlags
)
-
>
Result
<
RecvMsg
<
'
a
>
>
{
let
mut
address
:
sockaddr_storage
=
unsafe
{
mem
:
:
uninitialized
(
)
}
;
let
(
msg_control
msg_controllen
)
=
match
cmsg_buffer
{
Some
(
cmsgspace
)
=
>
{
let
msg_buf
=
cmsgspace
.
as_bytes_mut
(
)
;
(
msg_buf
.
as_mut_ptr
(
)
msg_buf
.
len
(
)
)
}
None
=
>
(
ptr
:
:
null_mut
(
)
0
)
}
;
let
mut
mhdr
=
{
let
mut
mhdr
:
msghdr
=
unsafe
{
mem
:
:
uninitialized
(
)
}
;
mhdr
.
msg_name
=
&
mut
address
as
*
mut
sockaddr_storage
as
*
mut
c_void
;
mhdr
.
msg_namelen
=
mem
:
:
size_of
:
:
<
sockaddr_storage
>
(
)
as
socklen_t
;
mhdr
.
msg_iov
=
iov
.
as_ptr
(
)
as
*
mut
iovec
;
mhdr
.
msg_iovlen
=
iov
.
len
(
)
as
_
;
mhdr
.
msg_control
=
msg_control
as
*
mut
c_void
;
mhdr
.
msg_controllen
=
msg_controllen
as
_
;
mhdr
.
msg_flags
=
0
;
mhdr
}
;
let
ret
=
unsafe
{
libc
:
:
recvmsg
(
fd
&
mut
mhdr
flags
.
bits
(
)
)
}
;
Errno
:
:
result
(
ret
)
.
map
(
|
r
|
{
let
cmsghdr
=
unsafe
{
if
mhdr
.
msg_controllen
>
0
{
debug_assert
!
(
!
mhdr
.
msg_control
.
is_null
(
)
)
;
debug_assert
!
(
msg_controllen
>
=
mhdr
.
msg_controllen
as
usize
)
;
CMSG_FIRSTHDR
(
&
mhdr
as
*
const
msghdr
)
}
else
{
ptr
:
:
null
(
)
}
.
as_ref
(
)
}
;
let
address
=
unsafe
{
sockaddr_storage_to_addr
(
&
address
mhdr
.
msg_namelen
as
usize
)
.
ok
(
)
}
;
RecvMsg
{
bytes
:
r
as
usize
cmsghdr
address
flags
:
MsgFlags
:
:
from_bits_truncate
(
mhdr
.
msg_flags
)
mhdr
}
}
)
}
pub
fn
socket
<
T
:
Into
<
Option
<
SockProtocol
>
>
>
(
domain
:
AddressFamily
ty
:
SockType
flags
:
SockFlag
protocol
:
T
)
-
>
Result
<
RawFd
>
{
let
protocol
=
match
protocol
.
into
(
)
{
None
=
>
0
Some
(
p
)
=
>
p
as
c_int
}
;
let
mut
ty
=
ty
as
c_int
;
ty
|
=
flags
.
bits
(
)
;
let
res
=
unsafe
{
libc
:
:
socket
(
domain
as
c_int
ty
protocol
)
}
;
Errno
:
:
result
(
res
)
}
pub
fn
socketpair
<
T
:
Into
<
Option
<
SockProtocol
>
>
>
(
domain
:
AddressFamily
ty
:
SockType
protocol
:
T
flags
:
SockFlag
)
-
>
Result
<
(
RawFd
RawFd
)
>
{
let
protocol
=
match
protocol
.
into
(
)
{
None
=
>
0
Some
(
p
)
=
>
p
as
c_int
}
;
let
mut
ty
=
ty
as
c_int
;
ty
|
=
flags
.
bits
(
)
;
let
mut
fds
=
[
-
1
-
1
]
;
let
res
=
unsafe
{
libc
:
:
socketpair
(
domain
as
c_int
ty
protocol
fds
.
as_mut_ptr
(
)
)
}
;
Errno
:
:
result
(
res
)
?
;
Ok
(
(
fds
[
0
]
fds
[
1
]
)
)
}
pub
fn
listen
(
sockfd
:
RawFd
backlog
:
usize
)
-
>
Result
<
(
)
>
{
let
res
=
unsafe
{
libc
:
:
listen
(
sockfd
backlog
as
c_int
)
}
;
Errno
:
:
result
(
res
)
.
map
(
drop
)
}
pub
fn
bind
(
fd
:
RawFd
addr
:
&
SockAddr
)
-
>
Result
<
(
)
>
{
let
res
=
unsafe
{
let
(
ptr
len
)
=
addr
.
as_ffi_pair
(
)
;
libc
:
:
bind
(
fd
ptr
len
)
}
;
Errno
:
:
result
(
res
)
.
map
(
drop
)
}
pub
fn
accept
(
sockfd
:
RawFd
)
-
>
Result
<
RawFd
>
{
let
res
=
unsafe
{
libc
:
:
accept
(
sockfd
ptr
:
:
null_mut
(
)
ptr
:
:
null_mut
(
)
)
}
;
Errno
:
:
result
(
res
)
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
freebsd
"
target_os
=
"
linux
"
target_os
=
"
openbsd
"
)
)
]
pub
fn
accept4
(
sockfd
:
RawFd
flags
:
SockFlag
)
-
>
Result
<
RawFd
>
{
let
res
=
unsafe
{
libc
:
:
accept4
(
sockfd
ptr
:
:
null_mut
(
)
ptr
:
:
null_mut
(
)
flags
.
bits
(
)
)
}
;
Errno
:
:
result
(
res
)
}
pub
fn
connect
(
fd
:
RawFd
addr
:
&
SockAddr
)
-
>
Result
<
(
)
>
{
let
res
=
unsafe
{
let
(
ptr
len
)
=
addr
.
as_ffi_pair
(
)
;
libc
:
:
connect
(
fd
ptr
len
)
}
;
Errno
:
:
result
(
res
)
.
map
(
drop
)
}
pub
fn
recv
(
sockfd
:
RawFd
buf
:
&
mut
[
u8
]
flags
:
MsgFlags
)
-
>
Result
<
usize
>
{
unsafe
{
let
ret
=
libc
:
:
recv
(
sockfd
buf
.
as_ptr
(
)
as
*
mut
c_void
buf
.
len
(
)
as
size_t
flags
.
bits
(
)
)
;
Errno
:
:
result
(
ret
)
.
map
(
|
r
|
r
as
usize
)
}
}
pub
fn
recvfrom
(
sockfd
:
RawFd
buf
:
&
mut
[
u8
]
)
-
>
Result
<
(
usize
SockAddr
)
>
{
unsafe
{
let
addr
:
sockaddr_storage
=
mem
:
:
zeroed
(
)
;
let
mut
len
=
mem
:
:
size_of
:
:
<
sockaddr_storage
>
(
)
as
socklen_t
;
let
ret
=
Errno
:
:
result
(
libc
:
:
recvfrom
(
sockfd
buf
.
as_ptr
(
)
as
*
mut
c_void
buf
.
len
(
)
as
size_t
0
mem
:
:
transmute
(
&
addr
)
&
mut
len
as
*
mut
socklen_t
)
)
?
;
sockaddr_storage_to_addr
(
&
addr
len
as
usize
)
.
map
(
|
addr
|
(
ret
as
usize
addr
)
)
}
}
pub
fn
sendto
(
fd
:
RawFd
buf
:
&
[
u8
]
addr
:
&
SockAddr
flags
:
MsgFlags
)
-
>
Result
<
usize
>
{
let
ret
=
unsafe
{
let
(
ptr
len
)
=
addr
.
as_ffi_pair
(
)
;
libc
:
:
sendto
(
fd
buf
.
as_ptr
(
)
as
*
const
c_void
buf
.
len
(
)
as
size_t
flags
.
bits
(
)
ptr
len
)
}
;
Errno
:
:
result
(
ret
)
.
map
(
|
r
|
r
as
usize
)
}
pub
fn
send
(
fd
:
RawFd
buf
:
&
[
u8
]
flags
:
MsgFlags
)
-
>
Result
<
usize
>
{
let
ret
=
unsafe
{
libc
:
:
send
(
fd
buf
.
as_ptr
(
)
as
*
const
c_void
buf
.
len
(
)
as
size_t
flags
.
bits
(
)
)
}
;
Errno
:
:
result
(
ret
)
.
map
(
|
r
|
r
as
usize
)
}
#
[
repr
(
i32
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
PartialEq
)
]
pub
enum
SockLevel
{
Socket
=
libc
:
:
SOL_SOCKET
Tcp
=
libc
:
:
IPPROTO_TCP
Ip
=
libc
:
:
IPPROTO_IP
Ipv6
=
libc
:
:
IPPROTO_IPV6
Udp
=
libc
:
:
IPPROTO_UDP
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
Netlink
=
libc
:
:
SOL_NETLINK
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
Alg
=
libc
:
:
SOL_ALG
}
pub
trait
GetSockOpt
:
Copy
{
type
Val
;
#
[
doc
(
hidden
)
]
fn
get
(
&
self
fd
:
RawFd
)
-
>
Result
<
Self
:
:
Val
>
;
}
pub
trait
SetSockOpt
:
Clone
{
type
Val
;
#
[
doc
(
hidden
)
]
fn
set
(
&
self
fd
:
RawFd
val
:
&
Self
:
:
Val
)
-
>
Result
<
(
)
>
;
}
pub
fn
getsockopt
<
O
:
GetSockOpt
>
(
fd
:
RawFd
opt
:
O
)
-
>
Result
<
O
:
:
Val
>
{
opt
.
get
(
fd
)
}
pub
fn
setsockopt
<
O
:
SetSockOpt
>
(
fd
:
RawFd
opt
:
O
val
:
&
O
:
:
Val
)
-
>
Result
<
(
)
>
{
opt
.
set
(
fd
val
)
}
pub
fn
getpeername
(
fd
:
RawFd
)
-
>
Result
<
SockAddr
>
{
unsafe
{
let
addr
:
sockaddr_storage
=
mem
:
:
uninitialized
(
)
;
let
mut
len
=
mem
:
:
size_of
:
:
<
sockaddr_storage
>
(
)
as
socklen_t
;
let
ret
=
libc
:
:
getpeername
(
fd
mem
:
:
transmute
(
&
addr
)
&
mut
len
)
;
Errno
:
:
result
(
ret
)
?
;
sockaddr_storage_to_addr
(
&
addr
len
as
usize
)
}
}
pub
fn
getsockname
(
fd
:
RawFd
)
-
>
Result
<
SockAddr
>
{
unsafe
{
let
addr
:
sockaddr_storage
=
mem
:
:
uninitialized
(
)
;
let
mut
len
=
mem
:
:
size_of
:
:
<
sockaddr_storage
>
(
)
as
socklen_t
;
let
ret
=
libc
:
:
getsockname
(
fd
mem
:
:
transmute
(
&
addr
)
&
mut
len
)
;
Errno
:
:
result
(
ret
)
?
;
sockaddr_storage_to_addr
(
&
addr
len
as
usize
)
}
}
pub
unsafe
fn
sockaddr_storage_to_addr
(
addr
:
&
sockaddr_storage
len
:
usize
)
-
>
Result
<
SockAddr
>
{
if
len
<
mem
:
:
size_of_val
(
&
addr
.
ss_family
)
{
return
Err
(
Error
:
:
Sys
(
Errno
:
:
ENOTCONN
)
)
;
}
match
addr
.
ss_family
as
c_int
{
libc
:
:
AF_INET
=
>
{
assert
!
(
len
as
usize
=
=
mem
:
:
size_of
:
:
<
sockaddr_in
>
(
)
)
;
let
ret
=
*
(
addr
as
*
const
_
as
*
const
sockaddr_in
)
;
Ok
(
SockAddr
:
:
Inet
(
InetAddr
:
:
V4
(
ret
)
)
)
}
libc
:
:
AF_INET6
=
>
{
assert
!
(
len
as
usize
=
=
mem
:
:
size_of
:
:
<
sockaddr_in6
>
(
)
)
;
Ok
(
SockAddr
:
:
Inet
(
InetAddr
:
:
V6
(
*
(
addr
as
*
const
_
as
*
const
sockaddr_in6
)
)
)
)
}
libc
:
:
AF_UNIX
=
>
{
let
sun
=
*
(
addr
as
*
const
_
as
*
const
sockaddr_un
)
;
let
pathlen
=
len
-
offset_of
!
(
sockaddr_un
sun_path
)
;
Ok
(
SockAddr
:
:
Unix
(
UnixAddr
(
sun
pathlen
)
)
)
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
libc
:
:
AF_NETLINK
=
>
{
use
libc
:
:
sockaddr_nl
;
Ok
(
SockAddr
:
:
Netlink
(
NetlinkAddr
(
*
(
addr
as
*
const
_
as
*
const
sockaddr_nl
)
)
)
)
}
#
[
cfg
(
any
(
target_os
=
"
android
"
target_os
=
"
linux
"
)
)
]
libc
:
:
AF_ALG
=
>
{
use
libc
:
:
sockaddr_alg
;
Ok
(
SockAddr
:
:
Alg
(
AlgAddr
(
*
(
addr
as
*
const
_
as
*
const
sockaddr_alg
)
)
)
)
}
#
[
cfg
(
target_os
=
"
linux
"
)
]
libc
:
:
AF_VSOCK
=
>
{
use
libc
:
:
sockaddr_vm
;
Ok
(
SockAddr
:
:
Vsock
(
VsockAddr
(
*
(
addr
as
*
const
_
as
*
const
sockaddr_vm
)
)
)
)
}
af
=
>
panic
!
(
"
unexpected
address
family
{
}
"
af
)
}
}
#
[
derive
(
Clone
Copy
Debug
Eq
Hash
PartialEq
)
]
pub
enum
Shutdown
{
Read
Write
Both
}
pub
fn
shutdown
(
df
:
RawFd
how
:
Shutdown
)
-
>
Result
<
(
)
>
{
unsafe
{
use
libc
:
:
shutdown
;
let
how
=
match
how
{
Shutdown
:
:
Read
=
>
libc
:
:
SHUT_RD
Shutdown
:
:
Write
=
>
libc
:
:
SHUT_WR
Shutdown
:
:
Both
=
>
libc
:
:
SHUT_RDWR
}
;
Errno
:
:
result
(
shutdown
(
df
how
)
)
.
map
(
drop
)
}
}
