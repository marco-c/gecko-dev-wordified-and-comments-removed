#
[
test
]
fn
meta_stopat_specialize_start_states
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
crash
-
8760b19b25d74e3603d4c643e9c7404fdd3631f9
"
)
;
let
_
=
run
(
data
)
;
}
#
[
test
]
fn
meta_stopat_specialize_start_states_min
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
minimized
-
from
-
8760b19b25d74e3603d4c643e9c7404fdd3631f9
"
)
;
let
_
=
run
(
data
)
;
}
#
[
test
]
fn
fail_branch_prevents_match
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
crash
-
cd33b13df59ea9d74503986f9d32a270dd43cc04
"
)
;
let
_
=
run
(
data
)
;
}
#
[
test
]
fn
slow_big_empty_chain
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
slow
-
unit
-
9ca9cc9929fee1fcbb847a78384effb8b98ea18a
"
)
;
let
_
=
run
(
data
)
;
}
#
[
test
]
fn
slow_big_empty_chain2
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
slow
-
unit
-
3ab758ea520027fefd3f00e1384d9aeef155739e
"
)
;
let
_
=
run
(
data
)
;
}
#
[
test
]
fn
slow_big_empty_chain3
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
slow
-
unit
-
b8a052f4254802edbe5f569b6ce6e9b6c927e9d6
"
)
;
let
_
=
run
(
data
)
;
}
#
[
test
]
fn
slow_big_empty_chain4
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
slow
-
unit
-
93c73a43581f205f9aaffd9c17e52b34b17becd0
"
)
;
let
_
=
run
(
data
)
;
}
#
[
test
]
fn
slow_big_empty_chain5
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
slow
-
unit
-
5345fccadf3812c53c3ccc7af5aa2741b7b2106c
"
)
;
let
_
=
run
(
data
)
;
}
#
[
test
]
fn
slow_big_empty_chain6
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
slow
-
unit
-
6bd643eec330166e4ada91da2d3f284268481085
"
)
;
let
_
=
run
(
data
)
;
}
#
[
test
]
fn
minimum_len_overflow
(
)
{
let
data
=
include_bytes
!
(
"
testdata
/
crash
-
7eb3351f0965e5d6c1cb98aa8585949ef96531ff
"
)
;
let
_
=
run
(
data
)
;
}
fn
run
(
data
:
&
[
u8
]
)
-
>
Option
<
(
)
>
{
if
data
.
len
(
)
<
2
{
return
None
;
}
let
mut
split_at
=
usize
:
:
from
(
data
[
0
]
)
;
let
data
=
std
:
:
str
:
:
from_utf8
(
&
data
[
1
.
.
]
)
.
ok
(
)
?
;
let
len
=
usize
:
:
try_from
(
data
.
chars
(
)
.
count
(
)
)
.
ok
(
)
?
;
split_at
=
std
:
:
cmp
:
:
max
(
split_at
1
)
%
len
;
let
char_index
=
data
.
char_indices
(
)
.
nth
(
split_at
)
?
.
0
;
let
(
pattern
input
)
=
data
.
split_at
(
char_index
)
;
let
re
=
regex
:
:
Regex
:
:
new
(
pattern
)
.
ok
(
)
?
;
re
.
is_match
(
input
)
;
Some
(
(
)
)
}
