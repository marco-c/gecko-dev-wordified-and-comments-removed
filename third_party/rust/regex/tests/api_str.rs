#
[
test
]
fn
empty_match_unicode_find_iter
(
)
{
let
re
=
regex
!
(
r
"
.
*
?
"
)
;
assert_eq
!
(
vec
!
[
(
0
0
)
(
3
3
)
(
4
4
)
(
7
7
)
(
8
8
)
]
findall
!
(
re
"
1
2
"
)
)
;
}
#
[
test
]
fn
empty_match_unicode_captures_iter
(
)
{
let
re
=
regex
!
(
r
"
.
*
?
"
)
;
let
ms
:
Vec
<
_
>
=
re
.
captures_iter
(
text
!
(
"
1
2
"
)
)
.
map
(
|
c
|
c
.
get
(
0
)
.
unwrap
(
)
)
.
map
(
|
m
|
(
m
.
start
(
)
m
.
end
(
)
)
)
.
collect
(
)
;
assert_eq
!
(
vec
!
[
(
0
0
)
(
3
3
)
(
4
4
)
(
7
7
)
(
8
8
)
]
ms
)
;
}
#
[
test
]
fn
match_as_str
(
)
{
let
re
=
regex
!
(
r
"
fo
+
"
)
;
let
caps
=
re
.
captures
(
"
barfoobar
"
)
.
unwrap
(
)
;
assert_eq
!
(
caps
.
get
(
0
)
.
map
(
|
m
|
m
.
as_str
(
)
)
Some
(
"
foo
"
)
)
;
assert_eq
!
(
caps
.
get
(
0
)
.
map
(
From
:
:
from
)
Some
(
"
foo
"
)
)
;
assert_eq
!
(
caps
.
get
(
0
)
.
map
(
Into
:
:
into
)
Some
(
"
foo
"
)
)
;
}
