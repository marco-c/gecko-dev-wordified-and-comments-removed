#
!
[
allow
(
dead_code
)
]
use
std
:
:
arch
:
:
x86_64
:
:
*
;
use
std
:
:
fmt
;
#
[
derive
(
Clone
Copy
Debug
)
]
pub
struct
SSSE3VectorBuilder
(
(
)
)
;
impl
SSSE3VectorBuilder
{
pub
fn
new
(
)
-
>
Option
<
SSSE3VectorBuilder
>
{
if
is_x86_feature_detected
!
(
"
ssse3
"
)
{
Some
(
SSSE3VectorBuilder
(
(
)
)
)
}
else
{
None
}
}
#
[
inline
]
pub
fn
u8x16_splat
(
self
n
:
u8
)
-
>
u8x16
{
unsafe
{
u8x16
:
:
splat
(
n
)
}
}
#
[
inline
]
pub
fn
u8x16_load_unaligned
(
self
slice
:
&
[
u8
]
)
-
>
u8x16
{
unsafe
{
u8x16
:
:
load_unaligned
(
slice
)
}
}
#
[
inline
]
pub
unsafe
fn
u8x16_load_unchecked_unaligned
(
self
slice
:
&
[
u8
]
)
-
>
u8x16
{
u8x16
:
:
load_unchecked_unaligned
(
slice
)
}
#
[
inline
]
pub
fn
u8x16_load
(
self
slice
:
&
[
u8
]
)
-
>
u8x16
{
unsafe
{
u8x16
:
:
load
(
slice
)
}
}
#
[
inline
]
pub
unsafe
fn
u8x16_load_unchecked
(
self
slice
:
&
[
u8
]
)
-
>
u8x16
{
u8x16
:
:
load_unchecked
(
slice
)
}
}
#
[
derive
(
Clone
Copy
)
]
#
[
allow
(
non_camel_case_types
)
]
pub
union
u8x16
{
vector
:
__m128i
bytes
:
[
u8
;
16
]
}
impl
u8x16
{
#
[
inline
]
unsafe
fn
splat
(
n
:
u8
)
-
>
u8x16
{
u8x16
{
vector
:
_mm_set1_epi8
(
n
as
i8
)
}
}
#
[
inline
]
unsafe
fn
load_unaligned
(
slice
:
&
[
u8
]
)
-
>
u8x16
{
assert
!
(
slice
.
len
(
)
>
=
16
)
;
u8x16
:
:
load_unchecked
(
slice
)
}
#
[
inline
]
unsafe
fn
load_unchecked_unaligned
(
slice
:
&
[
u8
]
)
-
>
u8x16
{
let
v
=
_mm_loadu_si128
(
slice
.
as_ptr
(
)
as
*
const
u8
as
*
const
__m128i
)
;
u8x16
{
vector
:
v
}
}
#
[
inline
]
unsafe
fn
load
(
slice
:
&
[
u8
]
)
-
>
u8x16
{
assert
!
(
slice
.
len
(
)
>
=
16
)
;
assert
!
(
slice
.
as_ptr
(
)
as
usize
%
16
=
=
0
)
;
u8x16
:
:
load_unchecked
(
slice
)
}
#
[
inline
]
unsafe
fn
load_unchecked
(
slice
:
&
[
u8
]
)
-
>
u8x16
{
let
v
=
_mm_load_si128
(
slice
.
as_ptr
(
)
as
*
const
u8
as
*
const
__m128i
)
;
u8x16
{
vector
:
v
}
}
#
[
inline
]
pub
fn
extract
(
self
i
:
usize
)
-
>
u8
{
unsafe
{
self
.
bytes
[
i
]
}
}
#
[
inline
]
pub
fn
replace
(
&
mut
self
i
:
usize
byte
:
u8
)
{
unsafe
{
self
.
bytes
[
i
]
=
byte
;
}
}
#
[
inline
]
pub
fn
shuffle
(
self
indices
:
u8x16
)
-
>
u8x16
{
unsafe
{
u8x16
{
vector
:
_mm_shuffle_epi8
(
self
.
vector
indices
.
vector
)
}
}
}
#
[
inline
]
pub
fn
ne
(
self
other
:
u8x16
)
-
>
u8x16
{
unsafe
{
let
boolv
=
_mm_cmpeq_epi8
(
self
.
vector
other
.
vector
)
;
let
ones
=
_mm_set1_epi8
(
0xFF
as
u8
as
i8
)
;
u8x16
{
vector
:
_mm_andnot_si128
(
boolv
ones
)
}
}
}
#
[
inline
]
pub
fn
and
(
self
other
:
u8x16
)
-
>
u8x16
{
unsafe
{
u8x16
{
vector
:
_mm_and_si128
(
self
.
vector
other
.
vector
)
}
}
}
#
[
inline
]
pub
fn
movemask
(
self
)
-
>
u32
{
unsafe
{
_mm_movemask_epi8
(
self
.
vector
)
as
u32
}
}
#
[
inline
]
pub
fn
alignr_14
(
self
other
:
u8x16
)
-
>
u8x16
{
unsafe
{
u8x16
{
vector
:
_mm_alignr_epi8
(
self
.
vector
other
.
vector
14
)
}
}
}
#
[
inline
]
pub
fn
alignr_15
(
self
other
:
u8x16
)
-
>
u8x16
{
unsafe
{
u8x16
{
vector
:
_mm_alignr_epi8
(
self
.
vector
other
.
vector
15
)
}
}
}
#
[
inline
]
pub
fn
bit_shift_right_4
(
self
)
-
>
u8x16
{
unsafe
{
u8x16
{
vector
:
_mm_srli_epi16
(
self
.
vector
4
)
}
}
}
}
impl
fmt
:
:
Debug
for
u8x16
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
unsafe
{
self
.
bytes
.
fmt
(
f
)
}
}
}
