use
std
:
:
fmt
;
use
syntax
;
#
[
derive
(
Debug
)
]
pub
enum
Error
{
Syntax
(
String
)
CompiledTooBig
(
usize
)
#
[
doc
(
hidden
)
]
__Nonexhaustive
}
impl
:
:
std
:
:
error
:
:
Error
for
Error
{
fn
description
(
&
self
)
-
>
&
str
{
match
*
self
{
Error
:
:
Syntax
(
ref
err
)
=
>
err
Error
:
:
CompiledTooBig
(
_
)
=
>
"
compiled
program
too
big
"
Error
:
:
__Nonexhaustive
=
>
unreachable
!
(
)
}
}
fn
cause
(
&
self
)
-
>
Option
<
&
:
:
std
:
:
error
:
:
Error
>
{
None
}
}
impl
fmt
:
:
Display
for
Error
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
match
*
self
{
Error
:
:
Syntax
(
ref
err
)
=
>
err
.
fmt
(
f
)
Error
:
:
CompiledTooBig
(
limit
)
=
>
{
write
!
(
f
"
Compiled
regex
exceeds
size
limit
of
{
}
bytes
.
"
limit
)
}
Error
:
:
__Nonexhaustive
=
>
unreachable
!
(
)
}
}
}
impl
From
<
syntax
:
:
Error
>
for
Error
{
fn
from
(
err
:
syntax
:
:
Error
)
-
>
Error
{
Error
:
:
Syntax
(
err
.
to_string
(
)
)
}
}
