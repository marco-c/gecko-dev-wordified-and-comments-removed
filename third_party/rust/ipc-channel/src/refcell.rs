use
std
:
:
cell
:
:
{
UnsafeCell
Cell
}
;
use
std
:
:
cmp
:
:
Ordering
;
use
std
:
:
ops
:
:
{
Deref
DerefMut
}
;
pub
struct
RefCell
<
T
:
?
Sized
>
{
borrow
:
Cell
<
BorrowFlag
>
value
:
UnsafeCell
<
T
>
}
type
BorrowFlag
=
usize
;
#
[
derive
(
Copy
Clone
PartialEq
Eq
Debug
)
]
pub
enum
BorrowState
{
Reading
Writing
Unused
}
const
UNUSED
:
BorrowFlag
=
0
;
const
WRITING
:
BorrowFlag
=
!
0
;
impl
<
T
>
RefCell
<
T
>
{
#
[
inline
]
pub
fn
new
(
value
:
T
)
-
>
RefCell
<
T
>
{
RefCell
{
value
:
UnsafeCell
:
:
new
(
value
)
borrow
:
Cell
:
:
new
(
UNUSED
)
}
}
}
impl
<
T
:
?
Sized
>
RefCell
<
T
>
{
#
[
inline
]
pub
fn
borrow_state
(
&
self
)
-
>
BorrowState
{
match
self
.
borrow
.
get
(
)
{
WRITING
=
>
BorrowState
:
:
Writing
UNUSED
=
>
BorrowState
:
:
Unused
_
=
>
BorrowState
:
:
Reading
}
}
#
[
inline
]
pub
fn
borrow
(
&
self
)
-
>
Ref
<
T
>
{
match
BorrowRef
:
:
new
(
&
self
.
borrow
)
{
Some
(
b
)
=
>
Ref
{
value
:
unsafe
{
&
*
self
.
value
.
get
(
)
}
borrow
:
b
}
None
=
>
panic
!
(
"
RefCell
<
T
>
already
mutably
borrowed
"
)
}
}
#
[
inline
]
pub
fn
borrow_mut
(
&
self
)
-
>
RefMut
<
T
>
{
match
BorrowRefMut
:
:
new
(
&
self
.
borrow
)
{
Some
(
b
)
=
>
RefMut
{
value
:
unsafe
{
&
mut
*
self
.
value
.
get
(
)
}
borrow
:
b
}
None
=
>
panic
!
(
"
RefCell
<
T
>
already
borrowed
"
)
}
}
}
unsafe
impl
<
T
:
?
Sized
>
Send
for
RefCell
<
T
>
where
T
:
Send
{
}
impl
<
T
:
Clone
>
Clone
for
RefCell
<
T
>
{
#
[
inline
]
fn
clone
(
&
self
)
-
>
RefCell
<
T
>
{
RefCell
:
:
new
(
self
.
borrow
(
)
.
clone
(
)
)
}
}
impl
<
T
:
Default
>
Default
for
RefCell
<
T
>
{
#
[
inline
]
fn
default
(
)
-
>
RefCell
<
T
>
{
RefCell
:
:
new
(
Default
:
:
default
(
)
)
}
}
impl
<
T
:
?
Sized
+
PartialEq
>
PartialEq
for
RefCell
<
T
>
{
#
[
inline
]
fn
eq
(
&
self
other
:
&
RefCell
<
T
>
)
-
>
bool
{
*
self
.
borrow
(
)
=
=
*
other
.
borrow
(
)
}
}
impl
<
T
:
?
Sized
+
Eq
>
Eq
for
RefCell
<
T
>
{
}
impl
<
T
:
?
Sized
+
PartialOrd
>
PartialOrd
for
RefCell
<
T
>
{
#
[
inline
]
fn
partial_cmp
(
&
self
other
:
&
RefCell
<
T
>
)
-
>
Option
<
Ordering
>
{
self
.
borrow
(
)
.
partial_cmp
(
&
*
other
.
borrow
(
)
)
}
#
[
inline
]
fn
lt
(
&
self
other
:
&
RefCell
<
T
>
)
-
>
bool
{
*
self
.
borrow
(
)
<
*
other
.
borrow
(
)
}
#
[
inline
]
fn
le
(
&
self
other
:
&
RefCell
<
T
>
)
-
>
bool
{
*
self
.
borrow
(
)
<
=
*
other
.
borrow
(
)
}
#
[
inline
]
fn
gt
(
&
self
other
:
&
RefCell
<
T
>
)
-
>
bool
{
*
self
.
borrow
(
)
>
*
other
.
borrow
(
)
}
#
[
inline
]
fn
ge
(
&
self
other
:
&
RefCell
<
T
>
)
-
>
bool
{
*
self
.
borrow
(
)
>
=
*
other
.
borrow
(
)
}
}
impl
<
T
:
?
Sized
+
Ord
>
Ord
for
RefCell
<
T
>
{
#
[
inline
]
fn
cmp
(
&
self
other
:
&
RefCell
<
T
>
)
-
>
Ordering
{
self
.
borrow
(
)
.
cmp
(
&
*
other
.
borrow
(
)
)
}
}
struct
BorrowRef
<
'
b
>
{
borrow
:
&
'
b
Cell
<
BorrowFlag
>
}
impl
<
'
b
>
BorrowRef
<
'
b
>
{
#
[
inline
]
fn
new
(
borrow
:
&
'
b
Cell
<
BorrowFlag
>
)
-
>
Option
<
BorrowRef
<
'
b
>
>
{
match
borrow
.
get
(
)
{
WRITING
=
>
None
b
=
>
{
borrow
.
set
(
b
+
1
)
;
Some
(
BorrowRef
{
borrow
:
borrow
}
)
}
}
}
}
impl
<
'
b
>
Drop
for
BorrowRef
<
'
b
>
{
#
[
inline
]
fn
drop
(
&
mut
self
)
{
let
borrow
=
self
.
borrow
.
get
(
)
;
debug_assert
!
(
borrow
!
=
WRITING
&
&
borrow
!
=
UNUSED
)
;
self
.
borrow
.
set
(
borrow
-
1
)
;
}
}
impl
<
'
b
>
Clone
for
BorrowRef
<
'
b
>
{
#
[
inline
]
fn
clone
(
&
self
)
-
>
BorrowRef
<
'
b
>
{
let
borrow
=
self
.
borrow
.
get
(
)
;
debug_assert
!
(
borrow
!
=
UNUSED
)
;
assert
!
(
borrow
!
=
WRITING
)
;
self
.
borrow
.
set
(
borrow
+
1
)
;
BorrowRef
{
borrow
:
self
.
borrow
}
}
}
pub
struct
Ref
<
'
b
T
:
?
Sized
+
'
b
>
{
value
:
&
'
b
T
#
[
allow
(
dead_code
)
]
borrow
:
BorrowRef
<
'
b
>
}
impl
<
'
b
T
:
?
Sized
>
Deref
for
Ref
<
'
b
T
>
{
type
Target
=
T
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
T
{
self
.
value
}
}
struct
BorrowRefMut
<
'
b
>
{
borrow
:
&
'
b
Cell
<
BorrowFlag
>
}
impl
<
'
b
>
Drop
for
BorrowRefMut
<
'
b
>
{
#
[
inline
]
fn
drop
(
&
mut
self
)
{
let
borrow
=
self
.
borrow
.
get
(
)
;
debug_assert
!
(
borrow
=
=
WRITING
)
;
self
.
borrow
.
set
(
UNUSED
)
;
}
}
impl
<
'
b
>
BorrowRefMut
<
'
b
>
{
#
[
inline
]
fn
new
(
borrow
:
&
'
b
Cell
<
BorrowFlag
>
)
-
>
Option
<
BorrowRefMut
<
'
b
>
>
{
match
borrow
.
get
(
)
{
UNUSED
=
>
{
borrow
.
set
(
WRITING
)
;
Some
(
BorrowRefMut
{
borrow
:
borrow
}
)
}
_
=
>
None
}
}
}
pub
struct
RefMut
<
'
b
T
:
?
Sized
+
'
b
>
{
value
:
&
'
b
mut
T
#
[
allow
(
dead_code
)
]
borrow
:
BorrowRefMut
<
'
b
>
}
impl
<
'
b
T
:
?
Sized
>
Deref
for
RefMut
<
'
b
T
>
{
type
Target
=
T
;
#
[
inline
]
fn
deref
(
&
self
)
-
>
&
T
{
self
.
value
}
}
impl
<
'
b
T
:
?
Sized
>
DerefMut
for
RefMut
<
'
b
T
>
{
#
[
inline
]
fn
deref_mut
(
&
mut
self
)
-
>
&
mut
T
{
self
.
value
}
}
