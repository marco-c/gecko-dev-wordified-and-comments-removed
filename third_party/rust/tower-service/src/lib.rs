#
!
[
doc
(
html_root_url
=
"
https
:
/
/
docs
.
rs
/
tower
-
service
/
0
.
3
.
1
"
)
]
#
!
[
warn
(
missing_debug_implementations
missing_docs
rust_2018_idioms
unreachable_pub
)
]
#
!
[
deny
(
broken_intra_doc_links
)
]
use
std
:
:
future
:
:
Future
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
pub
trait
Service
<
Request
>
{
type
Response
;
type
Error
;
type
Future
:
Future
<
Output
=
Result
<
Self
:
:
Response
Self
:
:
Error
>
>
;
fn
poll_ready
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Result
<
(
)
Self
:
:
Error
>
>
;
fn
call
(
&
mut
self
req
:
Request
)
-
>
Self
:
:
Future
;
}
impl
<
'
a
S
Request
>
Service
<
Request
>
for
&
'
a
mut
S
where
S
:
Service
<
Request
>
+
'
a
{
type
Response
=
S
:
:
Response
;
type
Error
=
S
:
:
Error
;
type
Future
=
S
:
:
Future
;
fn
poll_ready
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Result
<
(
)
S
:
:
Error
>
>
{
(
*
*
self
)
.
poll_ready
(
cx
)
}
fn
call
(
&
mut
self
request
:
Request
)
-
>
S
:
:
Future
{
(
*
*
self
)
.
call
(
request
)
}
}
impl
<
S
Request
>
Service
<
Request
>
for
Box
<
S
>
where
S
:
Service
<
Request
>
+
?
Sized
{
type
Response
=
S
:
:
Response
;
type
Error
=
S
:
:
Error
;
type
Future
=
S
:
:
Future
;
fn
poll_ready
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Result
<
(
)
S
:
:
Error
>
>
{
(
*
*
self
)
.
poll_ready
(
cx
)
}
fn
call
(
&
mut
self
request
:
Request
)
-
>
S
:
:
Future
{
(
*
*
self
)
.
call
(
request
)
}
}
