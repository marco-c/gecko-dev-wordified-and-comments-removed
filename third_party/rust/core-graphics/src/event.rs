use
core_foundation
:
:
base
:
:
{
CFRelease
CFRetain
CFTypeID
CFTypeRef
TCFType
}
;
use
geometry
:
:
CGPoint
;
use
event_source
:
:
{
CGEventSource
CGEventSourceRef
}
;
use
libc
;
use
std
:
:
mem
;
use
std
:
:
ptr
;
pub
type
CGKeyCode
=
libc
:
:
uint16_t
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
CGEventFlags
{
AlphaShift
=
0x00010000
Shift
=
0x00020000
Control
=
0x00040000
Alternate
=
0x00080000
Command
=
0x00100000
Help
=
0x00400000
SecondaryFn
=
0x00800000
NumericPad
=
0x00200000
NonCoalesced
=
0x00000100
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
CGEventType
{
Null
=
1
<
<
0
LeftMouseDown
=
1
<
<
1
LeftMouseUp
=
1
<
<
2
RightMouseDown
=
1
<
<
3
RightMouseUp
=
1
<
<
4
MouseMoved
=
1
<
<
5
LeftMouseDragged
=
1
<
<
6
RightMouseDragged
=
1
<
<
7
KeyDown
=
1
<
<
10
KeyUp
=
1
<
<
11
FlagsChanged
=
1
<
<
12
ScrollWheel
=
1
<
<
22
TabletPointer
=
1
<
<
23
TabletProximity
=
1
<
<
24
OtherMouseDown
=
1
<
<
25
OtherMouseUp
=
1
<
<
26
OtherMouseDragged
=
1
<
<
27
TapDisabledByTimeout
=
0xFFFFFFFE
TapDisabledByUserInput
=
0xFFFFFFFF
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
CGMouseButton
{
Left
Right
Center
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
)
]
pub
enum
CGEventTapLocation
{
HID
Session
AnnotatedSession
}
#
[
repr
(
C
)
]
pub
struct
__CGEvent
;
pub
type
CGEventRef
=
*
const
__CGEvent
;
pub
struct
CGEvent
{
obj
:
CGEventRef
}
impl
Clone
for
CGEvent
{
#
[
inline
]
fn
clone
(
&
self
)
-
>
CGEvent
{
unsafe
{
TCFType
:
:
wrap_under_get_rule
(
self
.
obj
)
}
}
}
impl
Drop
for
CGEvent
{
fn
drop
(
&
mut
self
)
{
unsafe
{
let
ptr
=
self
.
as_CFTypeRef
(
)
;
assert
!
(
ptr
!
=
ptr
:
:
null
(
)
)
;
CFRelease
(
ptr
)
;
}
}
}
impl
TCFType
<
CGEventRef
>
for
CGEvent
{
#
[
inline
]
fn
as_concrete_TypeRef
(
&
self
)
-
>
CGEventRef
{
self
.
obj
}
#
[
inline
]
unsafe
fn
wrap_under_get_rule
(
reference
:
CGEventRef
)
-
>
CGEvent
{
let
reference
:
CGEventRef
=
mem
:
:
transmute
(
CFRetain
(
mem
:
:
transmute
(
reference
)
)
)
;
TCFType
:
:
wrap_under_create_rule
(
reference
)
}
#
[
inline
]
fn
as_CFTypeRef
(
&
self
)
-
>
CFTypeRef
{
unsafe
{
mem
:
:
transmute
(
self
.
as_concrete_TypeRef
(
)
)
}
}
#
[
inline
]
unsafe
fn
wrap_under_create_rule
(
obj
:
CGEventRef
)
-
>
CGEvent
{
CGEvent
{
obj
:
obj
}
}
#
[
inline
]
fn
type_id
(
)
-
>
CFTypeID
{
unsafe
{
CGEventGetTypeID
(
)
}
}
}
impl
CGEvent
{
pub
fn
new
(
source
:
CGEventSource
)
-
>
Result
<
CGEvent
(
)
>
{
unsafe
{
let
event_ref
=
CGEventCreate
(
source
.
as_concrete_TypeRef
(
)
)
;
if
event_ref
!
=
ptr
:
:
null
(
)
{
Ok
(
TCFType
:
:
wrap_under_create_rule
(
event_ref
)
)
}
else
{
Err
(
(
)
)
}
}
}
pub
fn
new_keyboard_event
(
source
:
CGEventSource
keycode
:
CGKeyCode
keydown
:
bool
)
-
>
Result
<
CGEvent
(
)
>
{
unsafe
{
let
event_ref
=
CGEventCreateKeyboardEvent
(
source
.
as_concrete_TypeRef
(
)
keycode
keydown
)
;
if
event_ref
!
=
ptr
:
:
null
(
)
{
Ok
(
TCFType
:
:
wrap_under_create_rule
(
event_ref
)
)
}
else
{
Err
(
(
)
)
}
}
}
pub
fn
new_mouse_event
(
source
:
CGEventSource
mouse_type
:
CGEventType
mouse_cursor_position
:
CGPoint
mouse_button
:
CGMouseButton
)
-
>
Result
<
CGEvent
(
)
>
{
unsafe
{
let
event_ref
=
CGEventCreateMouseEvent
(
source
.
as_concrete_TypeRef
(
)
mouse_type
mouse_cursor_position
mouse_button
)
;
if
event_ref
!
=
ptr
:
:
null
(
)
{
Ok
(
TCFType
:
:
wrap_under_create_rule
(
event_ref
)
)
}
else
{
Err
(
(
)
)
}
}
}
pub
fn
post
(
&
self
tap_location
:
CGEventTapLocation
)
{
unsafe
{
CGEventPost
(
tap_location
self
.
as_concrete_TypeRef
(
)
)
;
}
}
pub
fn
location
(
&
self
)
-
>
CGPoint
{
unsafe
{
CGEventGetLocation
(
self
.
as_concrete_TypeRef
(
)
)
}
}
pub
fn
post_to_pid
(
&
self
pid
:
libc
:
:
pid_t
)
{
unsafe
{
CGEventPostToPid
(
pid
self
.
as_concrete_TypeRef
(
)
)
;
}
}
pub
fn
set_flags
(
&
self
flags
:
CGEventFlags
)
{
unsafe
{
CGEventSetFlags
(
self
.
as_concrete_TypeRef
(
)
flags
)
;
}
}
pub
fn
get_flags
(
&
self
)
-
>
CGEventFlags
{
unsafe
{
CGEventGetFlags
(
self
.
as_concrete_TypeRef
(
)
)
}
}
}
#
[
link
(
name
=
"
ApplicationServices
"
kind
=
"
framework
"
)
]
extern
{
fn
CGEventGetTypeID
(
)
-
>
CFTypeID
;
fn
CGEventCreate
(
source
:
CGEventSourceRef
)
-
>
CGEventRef
;
fn
CGEventCreateKeyboardEvent
(
source
:
CGEventSourceRef
keycode
:
CGKeyCode
keydown
:
bool
)
-
>
CGEventRef
;
fn
CGEventCreateMouseEvent
(
source
:
CGEventSourceRef
mouseType
:
CGEventType
mouseCursorPosition
:
CGPoint
mouseButton
:
CGMouseButton
)
-
>
CGEventRef
;
fn
CGEventPost
(
tapLocation
:
CGEventTapLocation
event
:
CGEventRef
)
;
fn
CGEventPostToPid
(
pid
:
libc
:
:
pid_t
event
:
CGEventRef
)
;
fn
CGEventSetFlags
(
event
:
CGEventRef
flags
:
CGEventFlags
)
;
fn
CGEventGetFlags
(
event
:
CGEventRef
)
-
>
CGEventFlags
;
fn
CGEventGetLocation
(
event
:
CGEventRef
)
-
>
CGPoint
;
}
