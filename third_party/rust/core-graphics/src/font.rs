use
core_foundation
:
:
base
:
:
{
CFRelease
CFRetain
CFTypeID
TCFType
}
;
use
core_foundation
:
:
string
:
:
{
CFString
CFStringRef
}
;
use
core_foundation
:
:
dictionary
:
:
{
CFDictionary
CFDictionaryRef
}
;
use
data_provider
:
:
CGDataProvider
;
use
geometry
:
:
CGRect
;
use
foreign_types
:
:
ForeignType
;
use
libc
:
:
{
self
c_int
size_t
}
;
pub
type
CGGlyph
=
libc
:
:
c_ushort
;
foreign_type
!
{
#
[
doc
(
hidden
)
]
type
CType
=
:
:
sys
:
:
CGFont
;
fn
drop
=
|
p
|
CFRelease
(
p
as
*
mut
_
)
;
fn
clone
=
|
p
|
CFRetain
(
p
as
*
const
_
)
as
*
mut
_
;
pub
struct
CGFont
;
pub
struct
CGFontRef
;
}
unsafe
impl
Send
for
CGFont
{
}
unsafe
impl
Sync
for
CGFont
{
}
impl
CGFont
{
pub
fn
type_id
(
)
-
>
CFTypeID
{
unsafe
{
CGFontGetTypeID
(
)
}
}
pub
fn
from_data_provider
(
provider
:
CGDataProvider
)
-
>
Result
<
CGFont
(
)
>
{
unsafe
{
let
font_ref
=
CGFontCreateWithDataProvider
(
provider
.
as_ptr
(
)
)
;
if
!
font_ref
.
is_null
(
)
{
Ok
(
CGFont
:
:
from_ptr
(
font_ref
)
)
}
else
{
Err
(
(
)
)
}
}
}
pub
fn
from_name
(
name
:
&
CFString
)
-
>
Result
<
CGFont
(
)
>
{
unsafe
{
let
font_ref
=
CGFontCreateWithFontName
(
name
.
as_concrete_TypeRef
(
)
)
;
if
!
font_ref
.
is_null
(
)
{
Ok
(
CGFont
:
:
from_ptr
(
font_ref
)
)
}
else
{
Err
(
(
)
)
}
}
}
pub
fn
create_copy_from_variations
(
&
self
vars
:
&
CFDictionary
)
-
>
Result
<
CGFont
(
)
>
{
unsafe
{
let
font_ref
=
CGFontCreateCopyWithVariations
(
self
.
as_ptr
(
)
vars
.
as_concrete_TypeRef
(
)
)
;
if
!
font_ref
.
is_null
(
)
{
Ok
(
CGFont
:
:
from_ptr
(
font_ref
)
)
}
else
{
Err
(
(
)
)
}
}
}
pub
fn
postscript_name
(
&
self
)
-
>
CFString
{
unsafe
{
let
string_ref
=
CGFontCopyPostScriptName
(
self
.
as_ptr
(
)
)
;
TCFType
:
:
wrap_under_create_rule
(
string_ref
)
}
}
pub
fn
get_glyph_b_boxes
(
&
self
glyphs
:
&
[
CGGlyph
]
bboxes
:
&
mut
[
CGRect
]
)
-
>
bool
{
unsafe
{
assert
!
(
bboxes
.
len
(
)
>
=
glyphs
.
len
(
)
)
;
CGFontGetGlyphBBoxes
(
self
.
as_ptr
(
)
glyphs
.
as_ptr
(
)
glyphs
.
len
(
)
bboxes
.
as_mut_ptr
(
)
)
}
}
pub
fn
get_glyph_advances
(
&
self
glyphs
:
&
[
CGGlyph
]
advances
:
&
mut
[
c_int
]
)
-
>
bool
{
unsafe
{
assert
!
(
advances
.
len
(
)
>
=
glyphs
.
len
(
)
)
;
CGFontGetGlyphAdvances
(
self
.
as_ptr
(
)
glyphs
.
as_ptr
(
)
glyphs
.
len
(
)
advances
.
as_mut_ptr
(
)
)
}
}
pub
fn
get_units_per_em
(
&
self
)
-
>
c_int
{
unsafe
{
CGFontGetUnitsPerEm
(
self
.
as_ptr
(
)
)
}
}
}
#
[
link
(
name
=
"
CoreGraphics
"
kind
=
"
framework
"
)
]
extern
{
fn
CGFontCreateWithDataProvider
(
provider
:
:
:
sys
:
:
CGDataProviderRef
)
-
>
:
:
sys
:
:
CGFontRef
;
fn
CGFontCreateWithFontName
(
name
:
CFStringRef
)
-
>
:
:
sys
:
:
CGFontRef
;
fn
CGFontCreateCopyWithVariations
(
font
:
:
:
sys
:
:
CGFontRef
vars
:
CFDictionaryRef
)
-
>
:
:
sys
:
:
CGFontRef
;
fn
CGFontGetTypeID
(
)
-
>
CFTypeID
;
fn
CGFontCopyPostScriptName
(
font
:
:
:
sys
:
:
CGFontRef
)
-
>
CFStringRef
;
fn
CGFontGetGlyphBBoxes
(
font
:
:
:
sys
:
:
CGFontRef
glyphs
:
*
const
CGGlyph
count
:
size_t
bboxes
:
*
mut
CGRect
)
-
>
bool
;
fn
CGFontGetGlyphAdvances
(
font
:
:
:
sys
:
:
CGFontRef
glyphs
:
*
const
CGGlyph
count
:
size_t
advances
:
*
mut
c_int
)
-
>
bool
;
fn
CGFontGetUnitsPerEm
(
font
:
:
:
sys
:
:
CGFontRef
)
-
>
c_int
;
}
