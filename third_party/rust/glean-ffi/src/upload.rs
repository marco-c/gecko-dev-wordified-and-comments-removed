use
std
:
:
ffi
:
:
CString
;
use
std
:
:
os
:
:
raw
:
:
c_char
;
use
ffi_support
:
:
IntoFfi
;
use
crate
:
:
{
byte_buffer
:
:
ByteBuffer
glean_str_free
}
;
use
glean_core
:
:
upload
:
:
PingUploadTask
;
#
[
allow
(
dead_code
)
]
pub
mod
upload_result
{
pub
const
UPLOAD_RESULT_RECOVERABLE
:
u32
=
0x1
;
pub
const
UPLOAD_RESULT_UNRECOVERABLE
:
u32
=
0x2
;
pub
const
UPLOAD_RESULT_HTTP_STATUS
:
u32
=
0x8000
;
}
/
/
/
cbindgen
:
prefix
-
with
-
name
#
[
repr
(
u8
)
]
pub
enum
FfiPingUploadTask
{
Upload
{
document_id
:
*
mut
c_char
path
:
*
mut
c_char
body
:
ByteBuffer
headers
:
*
mut
c_char
}
Wait
(
u64
)
Done
}
impl
From
<
PingUploadTask
>
for
FfiPingUploadTask
{
fn
from
(
task
:
PingUploadTask
)
-
>
Self
{
match
task
{
PingUploadTask
:
:
Upload
(
request
)
=
>
{
let
document_id
=
CString
:
:
new
(
request
.
document_id
.
to_owned
(
)
)
.
unwrap
(
)
;
let
path
=
CString
:
:
new
(
request
.
path
.
to_owned
(
)
)
.
unwrap
(
)
;
let
headers
=
CString
:
:
new
(
serde_json
:
:
to_string
(
&
request
.
headers
)
.
unwrap
(
)
)
.
unwrap
(
)
;
FfiPingUploadTask
:
:
Upload
{
document_id
:
document_id
.
into_raw
(
)
path
:
path
.
into_raw
(
)
body
:
ByteBuffer
:
:
from_vec
(
request
.
body
)
headers
:
headers
.
into_raw
(
)
}
}
PingUploadTask
:
:
Wait
(
time
)
=
>
FfiPingUploadTask
:
:
Wait
(
time
)
PingUploadTask
:
:
Done
=
>
FfiPingUploadTask
:
:
Done
}
}
}
impl
Drop
for
FfiPingUploadTask
{
fn
drop
(
&
mut
self
)
{
if
let
FfiPingUploadTask
:
:
Upload
{
document_id
path
body
headers
}
=
self
{
unsafe
{
glean_str_free
(
*
document_id
)
;
glean_str_free
(
*
path
)
;
glean_str_free
(
*
headers
)
;
}
let
body
=
std
:
:
mem
:
:
replace
(
body
ByteBuffer
:
:
new_with_size
(
0
)
)
;
body
.
destroy
(
)
;
}
}
}
unsafe
impl
IntoFfi
for
FfiPingUploadTask
{
type
Value
=
FfiPingUploadTask
;
#
[
inline
]
fn
ffi_default
(
)
-
>
FfiPingUploadTask
{
FfiPingUploadTask
:
:
Done
}
#
[
inline
]
fn
into_ffi_value
(
self
)
-
>
FfiPingUploadTask
{
self
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
*
;
#
[
test
]
fn
constants_match_with_glean_core
(
)
{
assert_eq
!
(
upload_result
:
:
UPLOAD_RESULT_RECOVERABLE
glean_core
:
:
upload
:
:
ffi_upload_result
:
:
UPLOAD_RESULT_RECOVERABLE
)
;
assert_eq
!
(
upload_result
:
:
UPLOAD_RESULT_UNRECOVERABLE
glean_core
:
:
upload
:
:
ffi_upload_result
:
:
UPLOAD_RESULT_UNRECOVERABLE
)
;
assert_eq
!
(
upload_result
:
:
UPLOAD_RESULT_HTTP_STATUS
glean_core
:
:
upload
:
:
ffi_upload_result
:
:
UPLOAD_RESULT_HTTP_STATUS
)
;
}
}
