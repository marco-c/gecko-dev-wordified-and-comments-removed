#
[
repr
(
C
)
]
pub
struct
ByteBuffer
{
len
:
i32
data
:
*
mut
u8
}
impl
From
<
Vec
<
u8
>
>
for
ByteBuffer
{
#
[
inline
]
fn
from
(
bytes
:
Vec
<
u8
>
)
-
>
Self
{
Self
:
:
from_vec
(
bytes
)
}
}
impl
ByteBuffer
{
#
[
inline
]
pub
fn
new_with_size
(
size
:
usize
)
-
>
Self
{
let
mut
buf
=
vec
!
[
]
;
buf
.
reserve_exact
(
size
)
;
buf
.
resize
(
size
0
)
;
ByteBuffer
:
:
from_vec
(
buf
)
}
#
[
inline
]
pub
fn
from_vec
(
bytes
:
Vec
<
u8
>
)
-
>
Self
{
use
std
:
:
convert
:
:
TryFrom
;
let
mut
buf
=
bytes
.
into_boxed_slice
(
)
;
let
data
=
buf
.
as_mut_ptr
(
)
;
let
len
=
i32
:
:
try_from
(
buf
.
len
(
)
)
.
expect
(
"
buffer
length
cannot
fit
into
a
i32
.
"
)
;
std
:
:
mem
:
:
forget
(
buf
)
;
Self
{
len
data
}
}
#
[
inline
]
pub
fn
into_vec
(
self
)
-
>
Vec
<
u8
>
{
if
self
.
data
.
is_null
(
)
{
vec
!
[
]
}
else
{
unsafe
{
Vec
:
:
from_raw_parts
(
self
.
data
self
.
len
as
usize
self
.
len
as
usize
)
}
}
}
#
[
inline
]
pub
fn
destroy
(
self
)
{
drop
(
self
.
into_vec
(
)
)
}
}
impl
Default
for
ByteBuffer
{
#
[
inline
]
fn
default
(
)
-
>
Self
{
Self
{
len
:
0
data
:
std
:
:
ptr
:
:
null_mut
(
)
}
}
}
