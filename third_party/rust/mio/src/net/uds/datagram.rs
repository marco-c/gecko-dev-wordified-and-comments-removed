use
std
:
:
net
:
:
Shutdown
;
use
std
:
:
os
:
:
fd
:
:
{
AsFd
AsRawFd
BorrowedFd
FromRawFd
IntoRawFd
RawFd
}
;
use
std
:
:
os
:
:
unix
:
:
net
:
:
{
self
SocketAddr
}
;
use
std
:
:
path
:
:
Path
;
use
std
:
:
{
fmt
io
}
;
use
crate
:
:
io_source
:
:
IoSource
;
use
crate
:
:
{
event
sys
Interest
Registry
Token
}
;
pub
struct
UnixDatagram
{
inner
:
IoSource
<
net
:
:
UnixDatagram
>
}
impl
UnixDatagram
{
pub
fn
bind
<
P
:
AsRef
<
Path
>
>
(
path
:
P
)
-
>
io
:
:
Result
<
UnixDatagram
>
{
let
addr
=
SocketAddr
:
:
from_pathname
(
path
)
?
;
UnixDatagram
:
:
bind_addr
(
&
addr
)
}
pub
fn
bind_addr
(
address
:
&
SocketAddr
)
-
>
io
:
:
Result
<
UnixDatagram
>
{
sys
:
:
uds
:
:
datagram
:
:
bind_addr
(
address
)
.
map
(
UnixDatagram
:
:
from_std
)
}
pub
fn
from_std
(
socket
:
net
:
:
UnixDatagram
)
-
>
UnixDatagram
{
UnixDatagram
{
inner
:
IoSource
:
:
new
(
socket
)
}
}
pub
fn
connect
<
P
:
AsRef
<
Path
>
>
(
&
self
path
:
P
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
inner
.
connect
(
path
)
}
pub
fn
unbound
(
)
-
>
io
:
:
Result
<
UnixDatagram
>
{
sys
:
:
uds
:
:
datagram
:
:
unbound
(
)
.
map
(
UnixDatagram
:
:
from_std
)
}
pub
fn
pair
(
)
-
>
io
:
:
Result
<
(
UnixDatagram
UnixDatagram
)
>
{
sys
:
:
uds
:
:
datagram
:
:
pair
(
)
.
map
(
|
(
socket1
socket2
)
|
{
(
UnixDatagram
:
:
from_std
(
socket1
)
UnixDatagram
:
:
from_std
(
socket2
)
)
}
)
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
inner
.
local_addr
(
)
}
pub
fn
peer_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
inner
.
peer_addr
(
)
}
pub
fn
recv_from
(
&
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
(
usize
SocketAddr
)
>
{
self
.
inner
.
do_io
(
|
inner
|
inner
.
recv_from
(
buf
)
)
}
pub
fn
recv
(
&
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
inner
.
do_io
(
|
inner
|
inner
.
recv
(
buf
)
)
}
pub
fn
send_to
<
P
:
AsRef
<
Path
>
>
(
&
self
buf
:
&
[
u8
]
path
:
P
)
-
>
io
:
:
Result
<
usize
>
{
self
.
inner
.
do_io
(
|
inner
|
inner
.
send_to
(
buf
path
)
)
}
pub
fn
send
(
&
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
inner
.
do_io
(
|
inner
|
inner
.
send
(
buf
)
)
}
pub
fn
take_error
(
&
self
)
-
>
io
:
:
Result
<
Option
<
io
:
:
Error
>
>
{
self
.
inner
.
take_error
(
)
}
pub
fn
shutdown
(
&
self
how
:
Shutdown
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
inner
.
shutdown
(
how
)
}
pub
fn
try_io
<
F
T
>
(
&
self
f
:
F
)
-
>
io
:
:
Result
<
T
>
where
F
:
FnOnce
(
)
-
>
io
:
:
Result
<
T
>
{
self
.
inner
.
do_io
(
|
_
|
f
(
)
)
}
}
impl
event
:
:
Source
for
UnixDatagram
{
fn
register
(
&
mut
self
registry
:
&
Registry
token
:
Token
interests
:
Interest
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
inner
.
register
(
registry
token
interests
)
}
fn
reregister
(
&
mut
self
registry
:
&
Registry
token
:
Token
interests
:
Interest
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
inner
.
reregister
(
registry
token
interests
)
}
fn
deregister
(
&
mut
self
registry
:
&
Registry
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
inner
.
deregister
(
registry
)
}
}
impl
fmt
:
:
Debug
for
UnixDatagram
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
inner
.
fmt
(
f
)
}
}
impl
IntoRawFd
for
UnixDatagram
{
fn
into_raw_fd
(
self
)
-
>
RawFd
{
self
.
inner
.
into_inner
(
)
.
into_raw_fd
(
)
}
}
impl
AsRawFd
for
UnixDatagram
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
inner
.
as_raw_fd
(
)
}
}
impl
FromRawFd
for
UnixDatagram
{
unsafe
fn
from_raw_fd
(
fd
:
RawFd
)
-
>
UnixDatagram
{
UnixDatagram
:
:
from_std
(
FromRawFd
:
:
from_raw_fd
(
fd
)
)
}
}
impl
From
<
UnixDatagram
>
for
net
:
:
UnixDatagram
{
fn
from
(
datagram
:
UnixDatagram
)
-
>
Self
{
unsafe
{
net
:
:
UnixDatagram
:
:
from_raw_fd
(
datagram
.
into_raw_fd
(
)
)
}
}
}
impl
AsFd
for
UnixDatagram
{
fn
as_fd
(
&
self
)
-
>
BorrowedFd
<
'
_
>
{
self
.
inner
.
as_fd
(
)
}
}
