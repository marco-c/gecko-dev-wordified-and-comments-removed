use
std
:
:
net
:
:
{
self
SocketAddr
}
;
#
[
cfg
(
unix
)
]
use
std
:
:
os
:
:
unix
:
:
io
:
:
{
AsRawFd
FromRawFd
IntoRawFd
RawFd
}
;
#
[
cfg
(
target_os
=
"
wasi
"
)
]
use
std
:
:
os
:
:
wasi
:
:
io
:
:
{
AsRawFd
FromRawFd
IntoRawFd
RawFd
}
;
#
[
cfg
(
windows
)
]
use
std
:
:
os
:
:
windows
:
:
io
:
:
{
AsRawSocket
FromRawSocket
IntoRawSocket
RawSocket
}
;
use
std
:
:
{
fmt
io
}
;
use
crate
:
:
io_source
:
:
IoSource
;
use
crate
:
:
net
:
:
TcpStream
;
#
[
cfg
(
unix
)
]
use
crate
:
:
sys
:
:
tcp
:
:
set_reuseaddr
;
#
[
cfg
(
not
(
target_os
=
"
wasi
"
)
)
]
use
crate
:
:
sys
:
:
tcp
:
:
{
bind
listen
new_for_addr
}
;
use
crate
:
:
{
event
sys
Interest
Registry
Token
}
;
#
[
cfg_attr
(
feature
=
"
os
-
poll
"
doc
=
"
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
os
-
poll
"
)
doc
=
"
ignore
"
)
]
pub
struct
TcpListener
{
inner
:
IoSource
<
net
:
:
TcpListener
>
}
impl
TcpListener
{
#
[
cfg
(
not
(
target_os
=
"
wasi
"
)
)
]
pub
fn
bind
(
addr
:
SocketAddr
)
-
>
io
:
:
Result
<
TcpListener
>
{
let
socket
=
new_for_addr
(
addr
)
?
;
#
[
cfg
(
unix
)
]
let
listener
=
unsafe
{
TcpListener
:
:
from_raw_fd
(
socket
)
}
;
#
[
cfg
(
windows
)
]
let
listener
=
unsafe
{
TcpListener
:
:
from_raw_socket
(
socket
as
_
)
}
;
#
[
cfg
(
not
(
windows
)
)
]
set_reuseaddr
(
&
listener
.
inner
true
)
?
;
bind
(
&
listener
.
inner
addr
)
?
;
listen
(
&
listener
.
inner
1024
)
?
;
Ok
(
listener
)
}
pub
fn
from_std
(
listener
:
net
:
:
TcpListener
)
-
>
TcpListener
{
TcpListener
{
inner
:
IoSource
:
:
new
(
listener
)
}
}
pub
fn
accept
(
&
self
)
-
>
io
:
:
Result
<
(
TcpStream
SocketAddr
)
>
{
self
.
inner
.
do_io
(
|
inner
|
{
sys
:
:
tcp
:
:
accept
(
inner
)
.
map
(
|
(
stream
addr
)
|
(
TcpStream
:
:
from_std
(
stream
)
addr
)
)
}
)
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
inner
.
local_addr
(
)
}
pub
fn
set_ttl
(
&
self
ttl
:
u32
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
inner
.
set_ttl
(
ttl
)
}
pub
fn
ttl
(
&
self
)
-
>
io
:
:
Result
<
u32
>
{
self
.
inner
.
ttl
(
)
}
pub
fn
take_error
(
&
self
)
-
>
io
:
:
Result
<
Option
<
io
:
:
Error
>
>
{
self
.
inner
.
take_error
(
)
}
}
impl
event
:
:
Source
for
TcpListener
{
fn
register
(
&
mut
self
registry
:
&
Registry
token
:
Token
interests
:
Interest
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
inner
.
register
(
registry
token
interests
)
}
fn
reregister
(
&
mut
self
registry
:
&
Registry
token
:
Token
interests
:
Interest
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
inner
.
reregister
(
registry
token
interests
)
}
fn
deregister
(
&
mut
self
registry
:
&
Registry
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
inner
.
deregister
(
registry
)
}
}
impl
fmt
:
:
Debug
for
TcpListener
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
inner
.
fmt
(
f
)
}
}
#
[
cfg
(
unix
)
]
impl
IntoRawFd
for
TcpListener
{
fn
into_raw_fd
(
self
)
-
>
RawFd
{
self
.
inner
.
into_inner
(
)
.
into_raw_fd
(
)
}
}
#
[
cfg
(
unix
)
]
impl
AsRawFd
for
TcpListener
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
inner
.
as_raw_fd
(
)
}
}
#
[
cfg
(
unix
)
]
impl
FromRawFd
for
TcpListener
{
unsafe
fn
from_raw_fd
(
fd
:
RawFd
)
-
>
TcpListener
{
TcpListener
:
:
from_std
(
FromRawFd
:
:
from_raw_fd
(
fd
)
)
}
}
#
[
cfg
(
windows
)
]
impl
IntoRawSocket
for
TcpListener
{
fn
into_raw_socket
(
self
)
-
>
RawSocket
{
self
.
inner
.
into_inner
(
)
.
into_raw_socket
(
)
}
}
#
[
cfg
(
windows
)
]
impl
AsRawSocket
for
TcpListener
{
fn
as_raw_socket
(
&
self
)
-
>
RawSocket
{
self
.
inner
.
as_raw_socket
(
)
}
}
#
[
cfg
(
windows
)
]
impl
FromRawSocket
for
TcpListener
{
unsafe
fn
from_raw_socket
(
socket
:
RawSocket
)
-
>
TcpListener
{
TcpListener
:
:
from_std
(
FromRawSocket
:
:
from_raw_socket
(
socket
)
)
}
}
#
[
cfg
(
target_os
=
"
wasi
"
)
]
impl
IntoRawFd
for
TcpListener
{
fn
into_raw_fd
(
self
)
-
>
RawFd
{
self
.
inner
.
into_inner
(
)
.
into_raw_fd
(
)
}
}
#
[
cfg
(
target_os
=
"
wasi
"
)
]
impl
AsRawFd
for
TcpListener
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
inner
.
as_raw_fd
(
)
}
}
#
[
cfg
(
target_os
=
"
wasi
"
)
]
impl
FromRawFd
for
TcpListener
{
unsafe
fn
from_raw_fd
(
fd
:
RawFd
)
-
>
TcpListener
{
TcpListener
:
:
from_std
(
FromRawFd
:
:
from_raw_fd
(
fd
)
)
}
}
