use
crate
:
:
{
Interest
Registry
Token
}
;
use
std
:
:
io
;
#
[
cfg_attr
(
all
(
feature
=
"
os
-
poll
"
feature
=
"
net
"
)
doc
=
"
"
)
]
#
[
cfg_attr
(
not
(
all
(
feature
=
"
os
-
poll
"
feature
=
"
net
"
)
)
doc
=
"
ignore
"
)
]
pub
trait
Source
{
fn
register
(
&
mut
self
registry
:
&
Registry
token
:
Token
interests
:
Interest
)
-
>
io
:
:
Result
<
(
)
>
;
fn
reregister
(
&
mut
self
registry
:
&
Registry
token
:
Token
interests
:
Interest
)
-
>
io
:
:
Result
<
(
)
>
;
fn
deregister
(
&
mut
self
registry
:
&
Registry
)
-
>
io
:
:
Result
<
(
)
>
;
}
impl
<
T
>
Source
for
Box
<
T
>
where
T
:
Source
+
?
Sized
{
fn
register
(
&
mut
self
registry
:
&
Registry
token
:
Token
interests
:
Interest
)
-
>
io
:
:
Result
<
(
)
>
{
(
*
*
self
)
.
register
(
registry
token
interests
)
}
fn
reregister
(
&
mut
self
registry
:
&
Registry
token
:
Token
interests
:
Interest
)
-
>
io
:
:
Result
<
(
)
>
{
(
*
*
self
)
.
reregister
(
registry
token
interests
)
}
fn
deregister
(
&
mut
self
registry
:
&
Registry
)
-
>
io
:
:
Result
<
(
)
>
{
(
*
*
self
)
.
deregister
(
registry
)
}
}
