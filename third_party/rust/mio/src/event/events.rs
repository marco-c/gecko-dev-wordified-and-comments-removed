use
crate
:
:
event
:
:
Event
;
use
crate
:
:
sys
;
use
std
:
:
fmt
;
#
[
cfg_attr
(
feature
=
"
os
-
poll
"
doc
=
"
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
os
-
poll
"
)
doc
=
"
ignore
"
)
]
pub
struct
Events
{
inner
:
sys
:
:
Events
}
#
[
cfg_attr
(
feature
=
"
os
-
poll
"
doc
=
"
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
os
-
poll
"
)
doc
=
"
ignore
"
)
]
#
[
derive
(
Debug
Clone
)
]
pub
struct
Iter
<
'
a
>
{
inner
:
&
'
a
Events
pos
:
usize
}
impl
Events
{
pub
fn
with_capacity
(
capacity
:
usize
)
-
>
Events
{
Events
{
inner
:
sys
:
:
Events
:
:
with_capacity
(
capacity
)
}
}
pub
fn
capacity
(
&
self
)
-
>
usize
{
self
.
inner
.
capacity
(
)
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
inner
.
is_empty
(
)
}
#
[
cfg_attr
(
feature
=
"
os
-
poll
"
doc
=
"
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
os
-
poll
"
)
doc
=
"
ignore
"
)
]
pub
fn
iter
(
&
self
)
-
>
Iter
<
'
_
>
{
Iter
{
inner
:
self
pos
:
0
}
}
#
[
cfg_attr
(
feature
=
"
os
-
poll
"
doc
=
"
"
)
]
#
[
cfg_attr
(
not
(
feature
=
"
os
-
poll
"
)
doc
=
"
ignore
"
)
]
pub
fn
clear
(
&
mut
self
)
{
self
.
inner
.
clear
(
)
;
}
pub
(
crate
)
fn
sys
(
&
mut
self
)
-
>
&
mut
sys
:
:
Events
{
&
mut
self
.
inner
}
}
impl
<
'
a
>
IntoIterator
for
&
'
a
Events
{
type
Item
=
&
'
a
Event
;
type
IntoIter
=
Iter
<
'
a
>
;
fn
into_iter
(
self
)
-
>
Self
:
:
IntoIter
{
self
.
iter
(
)
}
}
impl
<
'
a
>
Iterator
for
Iter
<
'
a
>
{
type
Item
=
&
'
a
Event
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
let
ret
=
self
.
inner
.
inner
.
get
(
self
.
pos
)
.
map
(
Event
:
:
from_sys_event_ref
)
;
self
.
pos
+
=
1
;
ret
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
let
size
=
self
.
inner
.
inner
.
len
(
)
;
(
size
Some
(
size
)
)
}
fn
count
(
self
)
-
>
usize
{
self
.
inner
.
inner
.
len
(
)
}
}
impl
fmt
:
:
Debug
for
Events
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_list
(
)
.
entries
(
self
)
.
finish
(
)
}
}
