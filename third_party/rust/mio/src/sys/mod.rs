cfg_os_poll
!
{
macro_rules
!
debug_detail
{
(
type
:
ident
(
event_type
:
ty
)
test
:
path
(
(
#
[
target
:
meta
]
)
*
libc
:
ident
:
:
flag
:
ident
)
+
(
)
*
)
=
>
{
struct
type
(
event_type
)
;
impl
fmt
:
:
Debug
for
type
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
let
mut
written_one
=
false
;
(
(
#
[
target
]
)
*
#
[
allow
(
clippy
:
:
bad_bit_mask
)
]
{
/
/
Windows
doesn
'
t
use
libc
but
the
afd
module
.
if
test
(
&
self
.
0
&
libc
:
:
flag
)
{
if
!
written_one
{
write
!
(
f
"
{
}
"
stringify
!
(
flag
)
)
?
;
written_one
=
true
;
}
else
{
write
!
(
f
"
|
{
}
"
stringify
!
(
flag
)
)
?
;
}
}
}
)
+
if
!
written_one
{
write
!
(
f
"
(
empty
)
"
)
}
else
{
Ok
(
(
)
)
}
}
}
}
;
}
}
#
[
cfg
(
unix
)
]
cfg_os_poll
!
{
mod
unix
;
pub
use
self
:
:
unix
:
:
*
;
}
#
[
cfg
(
windows
)
]
cfg_os_poll
!
{
mod
windows
;
pub
use
self
:
:
windows
:
:
*
;
}
cfg_not_os_poll
!
{
mod
shell
;
pub
(
crate
)
use
self
:
:
shell
:
:
*
;
#
[
cfg
(
unix
)
]
cfg_any_os_ext
!
{
mod
unix
;
pub
use
self
:
:
unix
:
:
SourceFd
;
}
#
[
cfg
(
unix
)
]
cfg_net
!
{
pub
use
self
:
:
unix
:
:
SocketAddr
;
}
}
