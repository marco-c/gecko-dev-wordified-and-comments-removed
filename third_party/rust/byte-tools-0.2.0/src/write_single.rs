use
core
:
:
{
mem
ptr
}
;
macro_rules
!
write_single
{
(
dst
:
expr
n
:
expr
size
:
expr
which
:
ident
)
=
>
(
{
assert
!
(
size
=
=
dst
.
len
(
)
)
;
unsafe
{
let
bytes
=
mem
:
:
transmute
:
:
<
_
[
u8
;
size
]
>
(
n
.
which
(
)
)
;
ptr
:
:
copy_nonoverlapping
(
(
&
bytes
)
.
as_ptr
(
)
dst
.
as_mut_ptr
(
)
size
)
;
}
}
)
;
}
#
[
inline
]
pub
fn
write_u32_le
(
dst
:
&
mut
[
u8
]
n
:
u32
)
{
write_single
!
(
dst
n
4
to_le
)
;
}
#
[
inline
]
pub
fn
write_u32_be
(
dst
:
&
mut
[
u8
]
n
:
u32
)
{
write_single
!
(
dst
n
4
to_be
)
;
}
#
[
inline
]
pub
fn
write_u64_le
(
dst
:
&
mut
[
u8
]
n
:
u64
)
{
write_single
!
(
dst
n
8
to_le
)
;
}
#
[
inline
]
pub
fn
write_u64_be
(
dst
:
&
mut
[
u8
]
n
:
u64
)
{
write_single
!
(
dst
n
8
to_be
)
;
}
