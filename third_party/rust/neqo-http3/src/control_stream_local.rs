use
crate
:
:
hframe
:
:
HFrame
;
use
crate
:
:
Res
;
use
neqo_common
:
:
{
qtrace
Encoder
}
;
use
neqo_transport
:
:
{
Connection
StreamType
}
;
pub
const
HTTP3_UNI_STREAM_TYPE_CONTROL
:
u64
=
0x0
;
#
[
derive
(
Default
Debug
)
]
pub
struct
ControlStreamLocal
{
stream_id
:
Option
<
u64
>
buf
:
Vec
<
u8
>
}
impl
:
:
std
:
:
fmt
:
:
Display
for
ControlStreamLocal
{
fn
fmt
(
&
self
f
:
&
mut
:
:
std
:
:
fmt
:
:
Formatter
)
-
>
:
:
std
:
:
fmt
:
:
Result
{
write
!
(
f
"
Local
control
stream
{
:
?
}
"
self
.
stream_id
)
}
}
impl
ControlStreamLocal
{
pub
fn
queue_frame
(
&
mut
self
f
:
HFrame
)
{
let
mut
enc
=
Encoder
:
:
default
(
)
;
f
.
encode
(
&
mut
enc
)
;
self
.
buf
.
append
(
&
mut
enc
.
into
(
)
)
;
}
pub
fn
send
(
&
mut
self
conn
:
&
mut
Connection
)
-
>
Res
<
(
)
>
{
if
let
Some
(
stream_id
)
=
self
.
stream_id
{
if
!
self
.
buf
.
is_empty
(
)
{
qtrace
!
(
[
self
]
"
sending
data
.
"
)
;
let
sent
=
conn
.
stream_send
(
stream_id
&
self
.
buf
[
.
.
]
)
?
;
if
sent
=
=
self
.
buf
.
len
(
)
{
self
.
buf
.
clear
(
)
;
}
else
{
let
b
=
self
.
buf
.
split_off
(
sent
)
;
self
.
buf
=
b
;
}
}
}
Ok
(
(
)
)
}
pub
fn
create
(
&
mut
self
conn
:
&
mut
Connection
)
-
>
Res
<
(
)
>
{
qtrace
!
(
[
self
]
"
Create
a
control
stream
.
"
)
;
self
.
stream_id
=
Some
(
conn
.
stream_create
(
StreamType
:
:
UniDi
)
?
)
;
let
mut
enc
=
Encoder
:
:
default
(
)
;
enc
.
encode_varint
(
HTTP3_UNI_STREAM_TYPE_CONTROL
as
u64
)
;
self
.
buf
.
append
(
&
mut
enc
.
into
(
)
)
;
Ok
(
(
)
)
}
}
