use
crate
:
:
frames
:
:
HFrame
;
use
crate
:
:
{
BufferedStream
Http3StreamType
RecvStream
Res
}
;
use
neqo_common
:
:
{
qtrace
Encoder
}
;
use
neqo_transport
:
:
{
Connection
StreamId
StreamType
}
;
use
std
:
:
collections
:
:
{
HashMap
VecDeque
}
;
use
std
:
:
convert
:
:
TryFrom
;
pub
const
HTTP3_UNI_STREAM_TYPE_CONTROL
:
u64
=
0x0
;
#
[
derive
(
Debug
)
]
pub
(
crate
)
struct
ControlStreamLocal
{
stream
:
BufferedStream
outstanding_priority_update
:
VecDeque
<
StreamId
>
}
impl
:
:
std
:
:
fmt
:
:
Display
for
ControlStreamLocal
{
fn
fmt
(
&
self
f
:
&
mut
:
:
std
:
:
fmt
:
:
Formatter
)
-
>
:
:
std
:
:
fmt
:
:
Result
{
write
!
(
f
"
Local
control
stream
{
:
?
}
"
self
.
stream
)
}
}
impl
ControlStreamLocal
{
pub
fn
new
(
)
-
>
Self
{
Self
{
stream
:
BufferedStream
:
:
default
(
)
outstanding_priority_update
:
VecDeque
:
:
new
(
)
}
}
pub
fn
queue_frame
(
&
mut
self
f
:
&
HFrame
)
{
let
mut
enc
=
Encoder
:
:
default
(
)
;
f
.
encode
(
&
mut
enc
)
;
self
.
stream
.
buffer
(
&
enc
)
;
}
pub
fn
queue_update_priority
(
&
mut
self
stream_id
:
StreamId
)
{
self
.
outstanding_priority_update
.
push_back
(
stream_id
)
;
}
pub
fn
send
(
&
mut
self
conn
:
&
mut
Connection
recv_conn
:
&
mut
HashMap
<
StreamId
Box
<
dyn
RecvStream
>
>
)
-
>
Res
<
(
)
>
{
self
.
stream
.
send_buffer
(
conn
)
?
;
self
.
send_priority_update
(
conn
recv_conn
)
}
fn
send_priority_update
(
&
mut
self
conn
:
&
mut
Connection
recv_conn
:
&
mut
HashMap
<
StreamId
Box
<
dyn
RecvStream
>
>
)
-
>
Res
<
(
)
>
{
while
let
Some
(
update_id
)
=
self
.
outstanding_priority_update
.
pop_front
(
)
{
let
update_stream
=
match
recv_conn
.
get_mut
(
&
update_id
)
{
Some
(
update_stream
)
=
>
update_stream
None
=
>
continue
}
;
debug_assert
!
(
matches
!
(
update_stream
.
stream_type
(
)
Http3StreamType
:
:
Http
|
Http3StreamType
:
:
Push
)
)
;
let
stream
=
update_stream
.
http_stream
(
)
.
unwrap
(
)
;
if
let
Some
(
hframe
)
=
stream
.
priority_update_frame
(
)
{
let
mut
enc
=
Encoder
:
:
new
(
)
;
hframe
.
encode
(
&
mut
enc
)
;
if
self
.
stream
.
send_atomic
(
conn
&
enc
)
?
{
stream
.
priority_update_sent
(
)
;
}
else
{
self
.
outstanding_priority_update
.
push_front
(
update_id
)
;
break
;
}
}
}
Ok
(
(
)
)
}
pub
fn
create
(
&
mut
self
conn
:
&
mut
Connection
)
-
>
Res
<
(
)
>
{
qtrace
!
(
[
self
]
"
Create
a
control
stream
.
"
)
;
self
.
stream
.
init
(
conn
.
stream_create
(
StreamType
:
:
UniDi
)
?
)
;
self
.
stream
.
buffer
(
&
[
u8
:
:
try_from
(
HTTP3_UNI_STREAM_TYPE_CONTROL
)
.
unwrap
(
)
]
)
;
Ok
(
(
)
)
}
#
[
must_use
]
pub
fn
stream_id
(
&
self
)
-
>
Option
<
StreamId
>
{
(
&
self
.
stream
)
.
into
(
)
}
}
