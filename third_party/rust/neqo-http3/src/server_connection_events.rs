use
crate
:
:
connection
:
:
Http3State
;
use
crate
:
:
send_message
:
:
SendMessageEvents
;
use
crate
:
:
RecvMessageEvents
;
use
crate
:
:
{
Header
Priority
}
;
use
neqo_transport
:
:
AppError
;
use
std
:
:
cell
:
:
RefCell
;
use
std
:
:
collections
:
:
VecDeque
;
use
std
:
:
rc
:
:
Rc
;
#
[
derive
(
Debug
PartialEq
Eq
Clone
)
]
pub
(
crate
)
enum
Http3ServerConnEvent
{
Headers
{
stream_id
:
u64
headers
:
Vec
<
Header
>
fin
:
bool
}
PriorityUpdate
{
stream_id
:
u64
priority
:
Priority
}
DataReadable
{
stream_id
:
u64
}
StateChange
(
Http3State
)
}
#
[
derive
(
Debug
Default
Clone
)
]
pub
(
crate
)
struct
Http3ServerConnEvents
{
events
:
Rc
<
RefCell
<
VecDeque
<
Http3ServerConnEvent
>
>
>
}
impl
RecvMessageEvents
for
Http3ServerConnEvents
{
fn
header_ready
(
&
self
stream_id
:
u64
headers
:
Vec
<
Header
>
_interim
:
bool
fin
:
bool
)
{
self
.
insert
(
Http3ServerConnEvent
:
:
Headers
{
stream_id
headers
fin
}
)
;
}
fn
data_readable
(
&
self
stream_id
:
u64
)
{
self
.
insert
(
Http3ServerConnEvent
:
:
DataReadable
{
stream_id
}
)
;
}
fn
reset
(
&
self
_stream_id
:
u64
_error
:
AppError
_local
:
bool
)
{
}
}
impl
SendMessageEvents
for
Http3ServerConnEvents
{
fn
data_writable
(
&
self
_stream_id
:
u64
)
{
}
fn
remove_send_side_event
(
&
self
_stream_id
:
u64
)
{
}
fn
stop_sending
(
&
self
_stream_id
:
u64
_app_err
:
AppError
)
{
}
}
impl
Http3ServerConnEvents
{
fn
insert
(
&
self
event
:
Http3ServerConnEvent
)
{
self
.
events
.
borrow_mut
(
)
.
push_back
(
event
)
;
}
fn
remove
<
F
>
(
&
self
f
:
F
)
where
F
:
Fn
(
&
Http3ServerConnEvent
)
-
>
bool
{
self
.
events
.
borrow_mut
(
)
.
retain
(
|
evt
|
!
f
(
evt
)
)
}
pub
fn
has_events
(
&
self
)
-
>
bool
{
!
self
.
events
.
borrow
(
)
.
is_empty
(
)
}
pub
fn
next_event
(
&
self
)
-
>
Option
<
Http3ServerConnEvent
>
{
self
.
events
.
borrow_mut
(
)
.
pop_front
(
)
}
pub
fn
connection_state_change
(
&
self
state
:
Http3State
)
{
self
.
insert
(
Http3ServerConnEvent
:
:
StateChange
(
state
)
)
;
}
pub
fn
priority_update
(
&
self
stream_id
:
u64
priority
:
Priority
)
{
self
.
insert
(
Http3ServerConnEvent
:
:
PriorityUpdate
{
stream_id
priority
}
)
}
pub
fn
remove_events_for_stream_id
(
&
self
stream_id
:
u64
)
{
self
.
remove
(
|
evt
|
{
matches
!
(
evt
Http3ServerConnEvent
:
:
Headers
{
stream_id
:
x
.
.
}
|
Http3ServerConnEvent
:
:
DataReadable
{
stream_id
:
x
.
.
}
if
*
x
=
=
stream_id
)
}
)
;
}
}
