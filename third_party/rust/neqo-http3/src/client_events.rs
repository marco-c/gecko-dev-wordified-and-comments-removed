#
!
[
allow
(
clippy
:
:
module_name_repetitions
)
]
use
crate
:
:
connection
:
:
Http3State
;
use
crate
:
:
recv_message
:
:
RecvMessageEvents
;
use
crate
:
:
send_message
:
:
SendMessageEvents
;
use
crate
:
:
Header
;
use
neqo_common
:
:
matches
;
use
neqo_transport
:
:
{
AppError
StreamType
}
;
use
std
:
:
cell
:
:
RefCell
;
use
std
:
:
collections
:
:
VecDeque
;
use
std
:
:
rc
:
:
Rc
;
#
[
derive
(
Debug
PartialOrd
Ord
PartialEq
Eq
Clone
)
]
pub
enum
Http3ClientEvent
{
HeaderReady
{
stream_id
:
u64
headers
:
Option
<
Vec
<
Header
>
>
fin
:
bool
}
DataWritable
{
stream_id
:
u64
}
DataReadable
{
stream_id
:
u64
}
Reset
{
stream_id
:
u64
error
:
AppError
}
StopSending
{
stream_id
:
u64
error
:
AppError
}
NewPushStream
{
stream_id
:
u64
}
RequestsCreatable
AuthenticationNeeded
ZeroRttRejected
GoawayReceived
StateChange
(
Http3State
)
}
#
[
derive
(
Debug
Default
Clone
)
]
pub
struct
Http3ClientEvents
{
events
:
Rc
<
RefCell
<
VecDeque
<
Http3ClientEvent
>
>
>
}
impl
RecvMessageEvents
for
Http3ClientEvents
{
fn
header_ready
(
&
self
stream_id
:
u64
headers
:
Option
<
Vec
<
Header
>
>
fin
:
bool
)
{
self
.
insert
(
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
)
;
}
fn
data_readable
(
&
self
stream_id
:
u64
)
{
self
.
insert
(
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
)
;
}
}
impl
SendMessageEvents
for
Http3ClientEvents
{
fn
data_writable
(
&
self
stream_id
:
u64
)
{
self
.
insert
(
Http3ClientEvent
:
:
DataWritable
{
stream_id
}
)
;
}
}
impl
Http3ClientEvents
{
pub
(
crate
)
fn
stop_sending
(
&
self
stream_id
:
u64
error
:
AppError
)
{
self
.
remove
(
|
evt
|
{
matches
!
(
evt
Http3ClientEvent
:
:
DataWritable
{
stream_id
:
x
}
if
*
x
=
=
stream_id
)
}
)
;
self
.
insert
(
Http3ClientEvent
:
:
StopSending
{
stream_id
error
}
)
;
}
pub
(
crate
)
fn
new_requests_creatable
(
&
self
stream_type
:
StreamType
)
{
if
stream_type
=
=
StreamType
:
:
BiDi
{
self
.
insert
(
Http3ClientEvent
:
:
RequestsCreatable
)
;
}
}
pub
(
crate
)
fn
authentication_needed
(
&
self
)
{
self
.
insert
(
Http3ClientEvent
:
:
AuthenticationNeeded
)
;
}
pub
(
crate
)
fn
zero_rtt_rejected
(
&
self
)
{
self
.
insert
(
Http3ClientEvent
:
:
ZeroRttRejected
)
;
}
pub
(
crate
)
fn
goaway_received
(
&
self
)
{
self
.
remove
(
|
evt
|
matches
!
(
evt
Http3ClientEvent
:
:
RequestsCreatable
)
)
;
self
.
insert
(
Http3ClientEvent
:
:
GoawayReceived
)
;
}
pub
(
crate
)
fn
events
(
&
self
)
-
>
impl
Iterator
<
Item
=
Http3ClientEvent
>
{
self
.
events
.
replace
(
VecDeque
:
:
new
(
)
)
.
into_iter
(
)
}
pub
fn
has_events
(
&
self
)
-
>
bool
{
!
self
.
events
.
borrow
(
)
.
is_empty
(
)
}
pub
fn
next_event
(
&
self
)
-
>
Option
<
Http3ClientEvent
>
{
self
.
events
.
borrow_mut
(
)
.
pop_front
(
)
}
fn
insert
(
&
self
event
:
Http3ClientEvent
)
{
self
.
events
.
borrow_mut
(
)
.
push_back
(
event
)
;
}
fn
remove
<
F
>
(
&
self
f
:
F
)
where
F
:
Fn
(
&
Http3ClientEvent
)
-
>
bool
{
self
.
events
.
borrow_mut
(
)
.
retain
(
|
evt
|
!
f
(
evt
)
)
}
pub
(
crate
)
fn
reset
(
&
self
stream_id
:
u64
error
:
AppError
)
{
self
.
remove_events_for_stream_id
(
stream_id
)
;
self
.
insert
(
Http3ClientEvent
:
:
Reset
{
stream_id
error
}
)
;
}
pub
(
crate
)
fn
connection_state_change
(
&
self
state
:
Http3State
)
{
match
state
{
Http3State
:
:
Closing
{
.
.
}
|
Http3State
:
:
Closed
(
_
)
=
>
self
.
events
.
borrow_mut
(
)
.
clear
(
)
_
=
>
(
)
}
self
.
insert
(
Http3ClientEvent
:
:
StateChange
(
state
)
)
;
}
pub
(
crate
)
fn
remove_events_for_stream_id
(
&
self
stream_id
:
u64
)
{
self
.
remove
(
|
evt
|
{
matches
!
(
evt
Http3ClientEvent
:
:
HeaderReady
{
stream_id
:
x
.
.
}
|
Http3ClientEvent
:
:
DataWritable
{
stream_id
:
x
}
|
Http3ClientEvent
:
:
DataReadable
{
stream_id
:
x
}
|
Http3ClientEvent
:
:
NewPushStream
{
stream_id
:
x
}
|
Http3ClientEvent
:
:
Reset
{
stream_id
:
x
.
.
}
|
Http3ClientEvent
:
:
StopSending
{
stream_id
:
x
.
.
}
if
*
x
=
=
stream_id
)
}
)
;
}
}
