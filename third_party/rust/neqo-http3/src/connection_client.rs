use
crate
:
:
client_events
:
:
{
Http3ClientEvent
Http3ClientEvents
}
;
use
crate
:
:
connection
:
:
{
HandleReadableOutput
Http3Connection
Http3State
}
;
use
crate
:
:
hframe
:
:
HFrame
;
use
crate
:
:
hsettings_frame
:
:
HSettings
;
use
crate
:
:
push_controller
:
:
PushController
;
use
crate
:
:
recv_message
:
:
RecvMessage
;
use
crate
:
:
send_message
:
:
{
SendMessage
SendMessageEvents
}
;
use
crate
:
:
Header
;
use
neqo_common
:
:
{
hex
hex_with_len
matches
qdebug
qinfo
qlog
:
:
NeqoQlog
qtrace
Datagram
Decoder
Encoder
Role
}
;
use
neqo_crypto
:
:
{
agent
:
:
CertificateInfo
AuthenticationStatus
SecretAgentInfo
}
;
use
neqo_qpack
:
:
QpackSettings
;
use
neqo_transport
:
:
{
AppError
Connection
ConnectionEvent
ConnectionIdManager
Output
StreamId
StreamType
ZeroRttState
}
;
use
std
:
:
cell
:
:
RefCell
;
use
std
:
:
fmt
:
:
Display
;
use
std
:
:
net
:
:
SocketAddr
;
use
std
:
:
rc
:
:
Rc
;
use
std
:
:
time
:
:
Instant
;
use
crate
:
:
{
Error
Res
}
;
fn
id_gte
<
T
U
>
(
base
:
T
)
-
>
impl
FnMut
(
(
&
T
&
U
)
)
-
>
Option
<
T
>
+
'
static
where
T
:
PartialOrd
+
Copy
+
'
static
U
:
?
Sized
{
move
|
(
id
_
)
|
{
if
*
id
>
=
base
{
Some
(
*
id
)
}
else
{
None
}
}
}
pub
struct
Http3Client
{
conn
:
Connection
base_handler
:
Http3Connection
events
:
Http3ClientEvents
push_handler
:
Rc
<
RefCell
<
PushController
>
>
}
impl
Display
for
Http3Client
{
fn
fmt
(
&
self
f
:
&
mut
:
:
std
:
:
fmt
:
:
Formatter
)
-
>
:
:
std
:
:
fmt
:
:
Result
{
write
!
(
f
"
Http3
client
"
)
}
}
impl
Http3Client
{
pub
fn
new
(
server_name
:
&
str
protocols
:
&
[
impl
AsRef
<
str
>
]
cid_manager
:
Rc
<
RefCell
<
dyn
ConnectionIdManager
>
>
local_addr
:
SocketAddr
remote_addr
:
SocketAddr
qpack_settings
:
QpackSettings
)
-
>
Res
<
Self
>
{
Ok
(
Self
:
:
new_with_conn
(
Connection
:
:
new_client
(
server_name
protocols
cid_manager
local_addr
remote_addr
)
?
qpack_settings
)
)
}
#
[
must_use
]
pub
fn
new_with_conn
(
c
:
Connection
qpack_settings
:
QpackSettings
)
-
>
Self
{
Self
{
conn
:
c
base_handler
:
Http3Connection
:
:
new
(
qpack_settings
)
events
:
Http3ClientEvents
:
:
default
(
)
push_handler
:
Rc
:
:
new
(
RefCell
:
:
new
(
PushController
:
:
new
(
)
)
)
}
}
#
[
must_use
]
pub
fn
role
(
&
self
)
-
>
Role
{
self
.
conn
.
role
(
)
}
#
[
must_use
]
pub
fn
state
(
&
self
)
-
>
Http3State
{
self
.
base_handler
.
state
(
)
}
#
[
must_use
]
pub
fn
tls_info
(
&
self
)
-
>
Option
<
&
SecretAgentInfo
>
{
self
.
conn
.
tls_info
(
)
}
#
[
must_use
]
pub
fn
peer_certificate
(
&
self
)
-
>
Option
<
CertificateInfo
>
{
self
.
conn
.
peer_certificate
(
)
}
pub
fn
authenticated
(
&
mut
self
status
:
AuthenticationStatus
now
:
Instant
)
{
self
.
conn
.
authenticated
(
status
now
)
;
}
pub
fn
set_qlog
(
&
mut
self
qlog
:
Option
<
NeqoQlog
>
)
{
self
.
conn
.
set_qlog
(
qlog
)
;
}
#
[
must_use
]
pub
fn
resumption_token
(
&
self
)
-
>
Option
<
Vec
<
u8
>
>
{
if
let
Some
(
token
)
=
self
.
conn
.
resumption_token
(
)
{
if
let
Some
(
settings
)
=
self
.
base_handler
.
get_settings
(
)
{
let
mut
enc
=
Encoder
:
:
default
(
)
;
settings
.
encode_frame_contents
(
&
mut
enc
)
;
enc
.
encode
(
&
token
[
.
.
]
)
;
Some
(
enc
.
into
(
)
)
}
else
{
None
}
}
else
{
None
}
}
pub
fn
set_resumption_token
(
&
mut
self
now
:
Instant
token
:
&
[
u8
]
)
-
>
Res
<
(
)
>
{
if
self
.
base_handler
.
state
!
=
Http3State
:
:
Initializing
{
return
Err
(
Error
:
:
InvalidState
)
;
}
let
mut
dec
=
Decoder
:
:
from
(
token
)
;
let
settings_slice
=
match
dec
.
decode_vvec
(
)
{
Some
(
v
)
=
>
v
_
=
>
return
Err
(
Error
:
:
InvalidResumptionToken
)
}
;
qtrace
!
(
[
self
]
"
settings
{
}
"
hex_with_len
(
&
settings_slice
)
)
;
let
mut
dec_settings
=
Decoder
:
:
from
(
settings_slice
)
;
let
mut
settings
=
HSettings
:
:
default
(
)
;
settings
.
decode_frame_contents
(
&
mut
dec_settings
)
?
;
let
tok
=
dec
.
decode_remainder
(
)
;
qtrace
!
(
[
self
]
"
Transport
token
{
}
"
hex
(
&
tok
)
)
;
self
.
conn
.
set_resumption_token
(
now
tok
)
?
;
if
*
self
.
conn
.
zero_rtt_state
(
)
=
=
ZeroRttState
:
:
Sending
{
self
.
base_handler
.
set_0rtt_settings
(
&
mut
self
.
conn
settings
)
?
;
}
Ok
(
(
)
)
}
pub
fn
close
<
S
>
(
&
mut
self
now
:
Instant
error
:
AppError
msg
:
S
)
where
S
:
AsRef
<
str
>
+
Display
{
qinfo
!
(
[
self
]
"
Close
the
connection
error
=
{
}
msg
=
{
}
.
"
error
msg
)
;
if
!
matches
!
(
self
.
base_handler
.
state
Http3State
:
:
Closing
(
_
)
|
Http3State
:
:
Closed
(
_
)
)
{
self
.
conn
.
close
(
now
error
msg
)
;
self
.
base_handler
.
close
(
error
)
;
self
.
events
.
connection_state_change
(
self
.
base_handler
.
state
(
)
)
;
}
}
pub
fn
fetch
(
&
mut
self
method
:
&
str
scheme
:
&
str
host
:
&
str
path
:
&
str
headers
:
&
[
Header
]
)
-
>
Res
<
u64
>
{
qinfo
!
(
[
self
]
"
Fetch
method
=
{
}
scheme
=
{
}
host
=
{
}
path
=
{
}
"
method
scheme
host
path
)
;
match
self
.
base_handler
.
state
(
)
{
Http3State
:
:
GoingAway
(
.
.
)
|
Http3State
:
:
Closing
(
.
.
)
|
Http3State
:
:
Closed
(
.
.
)
=
>
{
return
Err
(
Error
:
:
AlreadyClosed
)
}
Http3State
:
:
Initializing
=
>
return
Err
(
Error
:
:
Unavailable
)
_
=
>
{
}
}
let
id
=
self
.
conn
.
stream_create
(
StreamType
:
:
BiDi
)
?
;
let
mut
final_headers
=
Vec
:
:
new
(
)
;
final_headers
.
push
(
(
"
:
method
"
.
into
(
)
method
.
to_owned
(
)
)
)
;
final_headers
.
push
(
(
"
:
scheme
"
.
into
(
)
scheme
.
to_owned
(
)
)
)
;
final_headers
.
push
(
(
"
:
authority
"
.
into
(
)
host
.
to_owned
(
)
)
)
;
final_headers
.
push
(
(
"
:
path
"
.
into
(
)
path
.
to_owned
(
)
)
)
;
final_headers
.
extend_from_slice
(
headers
)
;
self
.
base_handler
.
add_streams
(
id
SendMessage
:
:
new_with_headers
(
id
final_headers
Box
:
:
new
(
self
.
events
.
clone
(
)
)
)
RecvMessage
:
:
new
(
id
Box
:
:
new
(
self
.
events
.
clone
(
)
)
Some
(
self
.
push_handler
.
clone
(
)
)
)
)
;
Ok
(
id
)
}
pub
fn
stream_reset
(
&
mut
self
stream_id
:
u64
error
:
AppError
)
-
>
Res
<
(
)
>
{
qinfo
!
(
[
self
]
"
reset_stream
{
}
error
=
{
}
.
"
stream_id
error
)
;
self
.
base_handler
.
stream_reset
(
&
mut
self
.
conn
stream_id
error
)
?
;
self
.
events
.
remove_events_for_stream_id
(
stream_id
)
;
Ok
(
(
)
)
}
pub
fn
stream_close_send
(
&
mut
self
stream_id
:
u64
)
-
>
Res
<
(
)
>
{
qinfo
!
(
[
self
]
"
Close
sending
side
stream
=
{
}
.
"
stream_id
)
;
self
.
base_handler
.
stream_close_send
(
&
mut
self
.
conn
stream_id
)
}
pub
fn
send_request_body
(
&
mut
self
stream_id
:
u64
buf
:
&
[
u8
]
)
-
>
Res
<
usize
>
{
qinfo
!
(
[
self
]
"
send_request_body
from
stream
{
}
sending
{
}
bytes
.
"
stream_id
buf
.
len
(
)
)
;
self
.
base_handler
.
send_streams
.
get_mut
(
&
stream_id
)
.
ok_or
(
Error
:
:
InvalidStreamId
)
?
.
send_body
(
&
mut
self
.
conn
buf
)
}
pub
fn
read_response_data
(
&
mut
self
now
:
Instant
stream_id
:
u64
buf
:
&
mut
[
u8
]
)
-
>
Res
<
(
usize
bool
)
>
{
qinfo
!
(
[
self
]
"
read_data
from
stream
{
}
.
"
stream_id
)
;
let
recv_stream
=
self
.
base_handler
.
recv_streams
.
get_mut
(
&
stream_id
)
.
ok_or
(
Error
:
:
InvalidStreamId
)
?
;
match
recv_stream
.
read_data
(
&
mut
self
.
conn
&
mut
self
.
base_handler
.
qpack_decoder
buf
)
{
Ok
(
(
amount
fin
)
)
=
>
{
if
recv_stream
.
done
(
)
{
self
.
base_handler
.
recv_streams
.
remove
(
&
stream_id
)
;
}
Ok
(
(
amount
fin
)
)
}
Err
(
e
)
=
>
{
if
e
=
=
Error
:
:
HttpFrame
{
self
.
close
(
now
e
.
code
(
)
"
"
)
;
}
Err
(
e
)
}
}
}
pub
fn
events
(
&
mut
self
)
-
>
impl
Iterator
<
Item
=
Http3ClientEvent
>
{
self
.
events
.
events
(
)
}
#
[
must_use
]
pub
fn
has_events
(
&
self
)
-
>
bool
{
self
.
events
.
has_events
(
)
}
pub
fn
next_event
(
&
mut
self
)
-
>
Option
<
Http3ClientEvent
>
{
self
.
events
.
next_event
(
)
}
pub
fn
process
(
&
mut
self
dgram
:
Option
<
Datagram
>
now
:
Instant
)
-
>
Output
{
qtrace
!
(
[
self
]
"
Process
.
"
)
;
if
let
Some
(
d
)
=
dgram
{
self
.
process_input
(
d
now
)
;
}
self
.
process_output
(
now
)
}
pub
fn
process_input
(
&
mut
self
dgram
:
Datagram
now
:
Instant
)
{
qtrace
!
(
[
self
]
"
Process
input
.
"
)
;
self
.
conn
.
process_input
(
dgram
now
)
;
self
.
process_http3
(
now
)
;
}
pub
fn
conn
(
&
mut
self
)
-
>
&
mut
Connection
{
&
mut
self
.
conn
}
fn
process_http3
(
&
mut
self
now
:
Instant
)
{
qtrace
!
(
[
self
]
"
Process
http3
internal
.
"
)
;
match
self
.
base_handler
.
state
(
)
{
Http3State
:
:
ZeroRtt
|
Http3State
:
:
Connected
|
Http3State
:
:
GoingAway
(
.
.
)
=
>
{
let
res
=
self
.
check_connection_events
(
)
;
if
self
.
check_result
(
now
&
res
)
{
return
;
}
let
res
=
self
.
base_handler
.
process_sending
(
&
mut
self
.
conn
)
;
self
.
check_result
(
now
&
res
)
;
}
Http3State
:
:
Closed
{
.
.
}
=
>
{
}
_
=
>
{
let
res
=
self
.
check_connection_events
(
)
;
let
_
=
self
.
check_result
(
now
&
res
)
;
}
}
}
pub
fn
process_output
(
&
mut
self
now
:
Instant
)
-
>
Output
{
qtrace
!
(
[
self
]
"
Process
output
.
"
)
;
self
.
process_http3
(
now
)
;
let
out
=
self
.
conn
.
process_output
(
now
)
;
self
.
process_http3
(
now
)
;
out
}
fn
check_result
<
ERR
>
(
&
mut
self
now
:
Instant
res
:
&
Res
<
ERR
>
)
-
>
bool
{
match
&
res
{
Err
(
Error
:
:
HttpGoaway
)
=
>
{
qinfo
!
(
[
self
]
"
Connection
error
:
goaway
stream_id
increased
.
"
)
;
self
.
close
(
now
Error
:
:
HttpGeneralProtocol
.
code
(
)
"
Connection
error
:
goaway
stream_id
increased
"
)
;
true
}
Err
(
e
)
=
>
{
qinfo
!
(
[
self
]
"
Connection
error
:
{
}
.
"
e
)
;
self
.
close
(
now
e
.
code
(
)
&
format
!
(
"
{
}
"
e
)
)
;
true
}
_
=
>
false
}
}
fn
check_connection_events
(
&
mut
self
)
-
>
Res
<
(
)
>
{
qtrace
!
(
[
self
]
"
Check
connection
events
.
"
)
;
while
let
Some
(
e
)
=
self
.
conn
.
next_event
(
)
{
qdebug
!
(
[
self
]
"
check_connection_events
-
event
{
:
?
}
.
"
e
)
;
match
e
{
ConnectionEvent
:
:
NewStream
{
stream_id
stream_type
}
=
>
match
stream_type
{
StreamType
:
:
BiDi
=
>
return
Err
(
Error
:
:
HttpStreamCreation
)
StreamType
:
:
UniDi
=
>
{
if
self
.
base_handler
.
handle_new_unidi_stream
(
&
mut
self
.
conn
stream_id
)
?
{
return
Err
(
Error
:
:
HttpId
)
;
}
}
}
ConnectionEvent
:
:
SendStreamWritable
{
stream_id
}
=
>
{
if
let
Some
(
s
)
=
self
.
base_handler
.
send_streams
.
get_mut
(
&
stream_id
)
{
if
s
.
is_state_sending_data
(
)
{
self
.
events
.
data_writable
(
stream_id
)
;
}
}
}
ConnectionEvent
:
:
RecvStreamReadable
{
stream_id
}
=
>
{
self
.
handle_stream_readable
(
stream_id
)
?
}
ConnectionEvent
:
:
RecvStreamReset
{
stream_id
app_error
}
=
>
{
if
self
.
base_handler
.
handle_stream_reset
(
&
mut
self
.
conn
stream_id
app_error
)
?
{
self
.
events
.
reset
(
stream_id
app_error
)
;
}
}
ConnectionEvent
:
:
SendStreamStopSending
{
stream_id
app_error
}
=
>
self
.
handle_stream_stop_sending
(
stream_id
app_error
)
?
ConnectionEvent
:
:
SendStreamComplete
{
.
.
}
=
>
{
}
ConnectionEvent
:
:
SendStreamCreatable
{
stream_type
}
=
>
{
self
.
events
.
new_requests_creatable
(
stream_type
)
}
ConnectionEvent
:
:
AuthenticationNeeded
=
>
self
.
events
.
authentication_needed
(
)
ConnectionEvent
:
:
StateChange
(
state
)
=
>
{
if
self
.
base_handler
.
handle_state_change
(
&
mut
self
.
conn
&
state
)
?
{
self
.
events
.
connection_state_change
(
self
.
base_handler
.
state
(
)
)
;
}
}
ConnectionEvent
:
:
ZeroRttRejected
=
>
{
self
.
base_handler
.
handle_zero_rtt_rejected
(
)
?
;
self
.
events
.
zero_rtt_rejected
(
)
;
}
}
}
Ok
(
(
)
)
}
fn
handle_stream_readable
(
&
mut
self
stream_id
:
u64
)
-
>
Res
<
(
)
>
{
match
self
.
base_handler
.
handle_stream_readable
(
&
mut
self
.
conn
stream_id
)
?
{
HandleReadableOutput
:
:
PushStream
=
>
Err
(
Error
:
:
HttpId
)
HandleReadableOutput
:
:
ControlFrames
(
control_frames
)
=
>
{
for
f
in
control_frames
{
match
f
{
HFrame
:
:
MaxPushId
{
.
.
}
=
>
Err
(
Error
:
:
HttpFrameUnexpected
)
HFrame
:
:
Goaway
{
stream_id
}
=
>
self
.
handle_goaway
(
stream_id
)
_
=
>
{
unreachable
!
(
"
we
should
only
put
MaxPushId
and
Goaway
into
control_frames
.
"
)
;
}
}
?
;
}
Ok
(
(
)
)
}
_
=
>
Ok
(
(
)
)
}
}
fn
handle_stream_stop_sending
(
&
mut
self
stop_stream_id
:
u64
app_err
:
AppError
)
-
>
Res
<
(
)
>
{
qinfo
!
(
[
self
]
"
Handle
stream_stop_sending
stream_id
=
{
}
app_err
=
{
}
"
stop_stream_id
app_err
)
;
let
mut
found
=
false
;
if
let
Some
(
s
)
=
self
.
base_handler
.
send_streams
.
remove
(
&
stop_stream_id
)
{
if
app_err
=
=
Error
:
:
HttpNoError
.
code
(
)
&
&
!
s
.
is_sending_closed
(
)
{
self
.
events
.
stop_sending
(
stop_stream_id
app_err
)
;
}
found
=
true
;
}
if
app_err
!
=
Error
:
:
HttpNoError
.
code
(
)
{
found
|
=
self
.
base_handler
.
recv_streams
.
remove
(
&
stop_stream_id
)
.
is_some
(
)
;
if
found
{
self
.
events
.
reset
(
stop_stream_id
app_err
)
;
}
let
_
=
self
.
conn
.
stream_stop_sending
(
stop_stream_id
app_err
)
;
}
if
!
found
&
&
self
.
base_handler
.
is_critical_stream
(
stop_stream_id
)
{
return
Err
(
Error
:
:
HttpClosedCriticalStream
)
;
}
Ok
(
(
)
)
}
fn
handle_goaway
(
&
mut
self
goaway_stream_id
:
u64
)
-
>
Res
<
(
)
>
{
qinfo
!
(
[
self
]
"
handle_goaway
{
}
"
goaway_stream_id
)
;
let
id
=
StreamId
:
:
from
(
goaway_stream_id
)
;
if
id
.
is_uni
(
)
|
|
id
.
is_server_initiated
(
)
{
return
Err
(
Error
:
:
HttpId
)
;
}
match
self
.
base_handler
.
state
{
Http3State
:
:
Connected
=
>
{
self
.
base_handler
.
state
=
Http3State
:
:
GoingAway
(
goaway_stream_id
)
;
}
Http3State
:
:
GoingAway
(
ref
mut
stream_id
)
=
>
{
if
goaway_stream_id
>
*
stream_id
{
return
Err
(
Error
:
:
HttpGoaway
)
;
}
*
stream_id
=
goaway_stream_id
;
}
Http3State
:
:
Closing
(
.
.
)
|
Http3State
:
:
Closed
(
.
.
)
=
>
{
}
_
=
>
unreachable
!
(
"
Should
not
receive
Goaway
frame
in
this
state
.
"
)
}
for
id
in
self
.
base_handler
.
send_streams
.
iter
(
)
.
filter_map
(
id_gte
(
goaway_stream_id
)
)
{
self
.
events
.
reset
(
id
Error
:
:
HttpRequestRejected
.
code
(
)
)
;
}
for
id
in
self
.
base_handler
.
recv_streams
.
iter
(
)
.
filter_map
(
id_gte
(
goaway_stream_id
)
)
{
self
.
events
.
reset
(
id
Error
:
:
HttpRequestRejected
.
code
(
)
)
;
}
self
.
events
.
goaway_received
(
)
;
self
.
base_handler
.
send_streams
.
retain
(
|
id
_
|
*
id
<
goaway_stream_id
)
;
self
.
base_handler
.
recv_streams
.
retain
(
|
id
_
|
*
id
<
goaway_stream_id
)
;
Ok
(
(
)
)
}
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
{
AuthenticationStatus
Connection
Error
HSettings
Header
Http3Client
Http3ClientEvent
Http3State
QpackSettings
Rc
RefCell
StreamType
}
;
use
crate
:
:
hframe
:
:
HFrame
;
use
crate
:
:
hsettings_frame
:
:
{
HSetting
HSettingType
}
;
use
neqo_common
:
:
{
matches
Encoder
}
;
use
neqo_crypto
:
:
AntiReplay
;
use
neqo_qpack
:
:
encoder
:
:
QPackEncoder
;
use
neqo_transport
:
:
{
CloseError
ConnectionEvent
FixedConnectionIdManager
State
}
;
use
test_fixture
:
:
{
default_server
fixture_init
loopback
now
DEFAULT_ALPN
DEFAULT_SERVER_NAME
}
;
fn
assert_closed
(
client
:
&
Http3Client
expected
:
&
Error
)
{
match
client
.
state
(
)
{
Http3State
:
:
Closing
(
err
)
|
Http3State
:
:
Closed
(
err
)
=
>
{
assert_eq
!
(
err
CloseError
:
:
Application
(
expected
.
code
(
)
)
)
}
_
=
>
panic
!
(
"
Wrong
state
{
:
?
}
"
client
.
state
(
)
)
}
;
}
pub
fn
default_http3_client
(
)
-
>
Http3Client
{
fixture_init
(
)
;
Http3Client
:
:
new
(
DEFAULT_SERVER_NAME
DEFAULT_ALPN
Rc
:
:
new
(
RefCell
:
:
new
(
FixedConnectionIdManager
:
:
new
(
3
)
)
)
loopback
(
)
loopback
(
)
QpackSettings
{
max_table_size_encoder
:
100
max_table_size_decoder
:
100
max_blocked_streams
:
100
}
)
.
expect
(
"
create
a
default
client
"
)
}
const
CONTROL_STREAM_DATA
:
&
[
u8
]
=
&
[
0x0
0x4
0x6
0x1
0x40
0x64
0x7
0x40
0x64
]
;
const
CONTROL_STREAM_TYPE
:
&
[
u8
]
=
&
[
0x0
]
;
const
ENCODER_STREAM_DATA
:
&
[
u8
]
=
&
[
0x2
]
;
const
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
:
&
[
u8
]
=
&
[
0x2
0x3f
0x45
]
;
const
DECODER_STREAM_DATA
:
&
[
u8
]
=
&
[
0x3
]
;
const
PUSH_STREAM_DATA
:
&
[
u8
]
=
&
[
0x1
]
;
struct
TestServer
{
settings
:
HFrame
conn
:
Connection
control_stream_id
:
Option
<
u64
>
encoder
:
QPackEncoder
encoder_stream_id
:
Option
<
u64
>
decoder_stream_id
:
Option
<
u64
>
}
fn
make_server
(
server_settings
:
&
[
HSetting
]
)
-
>
TestServer
{
fixture_init
(
)
;
TestServer
{
settings
:
HFrame
:
:
Settings
{
settings
:
HSettings
:
:
new
(
server_settings
)
}
conn
:
default_server
(
)
control_stream_id
:
None
encoder
:
QPackEncoder
:
:
new
(
QpackSettings
{
max_table_size_encoder
:
128
max_table_size_decoder
:
0
max_blocked_streams
:
0
}
true
)
encoder_stream_id
:
None
decoder_stream_id
:
None
}
}
fn
make_default_server
(
)
-
>
TestServer
{
make_server
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
)
}
fn
connect_only_transport_with
(
client
:
&
mut
Http3Client
server
:
&
mut
TestServer
)
{
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Initializing
)
;
let
out
=
client
.
process
(
None
now
(
)
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Initializing
)
;
assert_eq
!
(
*
server
.
conn
.
state
(
)
State
:
:
Init
)
;
let
out
=
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_eq
!
(
*
server
.
conn
.
state
(
)
State
:
:
Handshaking
)
;
let
out
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
out
=
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert
!
(
out
.
as_dgram_ref
(
)
.
is_none
(
)
)
;
let
authentication_needed
=
|
e
|
matches
!
(
e
Http3ClientEvent
:
:
AuthenticationNeeded
)
;
assert
!
(
client
.
events
(
)
.
any
(
authentication_needed
)
)
;
client
.
authenticated
(
AuthenticationStatus
:
:
Ok
now
(
)
)
;
let
out
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
connected
=
|
e
|
matches
!
(
e
Http3ClientEvent
:
:
StateChange
(
Http3State
:
:
Connected
)
)
;
assert
!
(
client
.
events
(
)
.
any
(
connected
)
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Connected
)
;
let
_
=
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert
!
(
server
.
conn
.
state
(
)
.
connected
(
)
)
;
}
fn
connect_only_transport
(
)
-
>
(
Http3Client
TestServer
)
{
let
mut
client
=
default_http3_client
(
)
;
let
mut
server
=
make_default_server
(
)
;
connect_only_transport_with
(
&
mut
client
&
mut
server
)
;
(
client
server
)
}
fn
connect_with
(
client
:
&
mut
Http3Client
server
:
&
mut
TestServer
)
{
connect_only_transport_with
(
client
server
)
;
let
out
=
client
.
process
(
None
now
(
)
)
;
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
check_control_qpack_streams
(
&
mut
server
.
conn
)
;
server
.
control_stream_id
=
Some
(
server
.
conn
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
)
;
let
mut
enc
=
Encoder
:
:
default
(
)
;
server
.
settings
.
encode
(
&
mut
enc
)
;
let
mut
sent
=
server
.
conn
.
stream_send
(
server
.
control_stream_id
.
unwrap
(
)
CONTROL_STREAM_TYPE
)
;
assert_eq
!
(
sent
.
unwrap
(
)
1
)
;
let
mut
enc
=
Encoder
:
:
default
(
)
;
server
.
settings
.
encode
(
&
mut
enc
)
;
sent
=
server
.
conn
.
stream_send
(
server
.
control_stream_id
.
unwrap
(
)
&
enc
[
.
.
]
)
;
assert_eq
!
(
sent
.
unwrap
(
)
enc
[
.
.
]
.
len
(
)
)
;
server
.
encoder_stream_id
=
Some
(
server
.
conn
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
)
;
server
.
encoder
.
add_send_stream
(
server
.
encoder_stream_id
.
unwrap
(
)
)
;
server
.
encoder
.
send
(
&
mut
server
.
conn
)
.
unwrap
(
)
;
server
.
decoder_stream_id
=
Some
(
server
.
conn
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
server
.
decoder_stream_id
.
unwrap
(
)
DECODER_STREAM_DATA
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Connected
)
;
}
fn
connect
(
)
-
>
(
Http3Client
TestServer
)
{
let
mut
client
=
default_http3_client
(
)
;
let
mut
server
=
make_default_server
(
)
;
connect_with
(
&
mut
client
&
mut
server
)
;
(
client
server
)
}
fn
read_and_check_stream_data
(
server
:
&
mut
Connection
stream_id
:
u64
expected_data
:
&
[
u8
]
expected_fin
:
bool
)
{
let
mut
buf
=
[
0_u8
;
100
]
;
let
(
amount
fin
)
=
server
.
stream_recv
(
stream_id
&
mut
buf
)
.
unwrap
(
)
;
assert_eq
!
(
fin
expected_fin
)
;
assert_eq
!
(
amount
expected_data
.
len
(
)
)
;
assert_eq
!
(
&
buf
[
.
.
amount
]
expected_data
)
;
}
const
CLIENT_SIDE_CONTROL_STREAM_ID
:
u64
=
2
;
const
CLIENT_SIDE_ENCODER_STREAM_ID
:
u64
=
6
;
const
CLIENT_SIDE_DECODER_STREAM_ID
:
u64
=
10
;
fn
check_control_qpack_streams
(
server
:
&
mut
Connection
)
{
let
mut
connected
=
false
;
let
mut
control_stream
=
false
;
let
mut
qpack_decoder_stream
=
false
;
let
mut
qpack_encoder_stream
=
false
;
while
let
Some
(
e
)
=
server
.
next_event
(
)
{
match
e
{
ConnectionEvent
:
:
NewStream
{
stream_id
stream_type
}
=
>
{
assert
!
(
matches
!
(
stream_id
2
|
6
|
10
)
)
;
assert_eq
!
(
stream_type
StreamType
:
:
UniDi
)
;
}
ConnectionEvent
:
:
RecvStreamReadable
{
stream_id
}
=
>
{
if
stream_id
=
=
CLIENT_SIDE_CONTROL_STREAM_ID
{
read_and_check_stream_data
(
server
stream_id
CONTROL_STREAM_DATA
false
)
;
control_stream
=
true
;
}
else
if
stream_id
=
=
CLIENT_SIDE_ENCODER_STREAM_ID
{
read_and_check_stream_data
(
server
stream_id
ENCODER_STREAM_DATA
false
)
;
qpack_encoder_stream
=
true
;
}
else
if
stream_id
=
=
CLIENT_SIDE_DECODER_STREAM_ID
{
read_and_check_stream_data
(
server
stream_id
DECODER_STREAM_DATA
false
)
;
qpack_decoder_stream
=
true
;
}
else
{
panic
!
(
"
unexpected
event
"
)
;
}
}
ConnectionEvent
:
:
SendStreamWritable
{
stream_id
}
=
>
{
assert
!
(
matches
!
(
stream_id
2
|
6
|
10
)
)
;
}
ConnectionEvent
:
:
StateChange
(
State
:
:
Connected
)
=
>
connected
=
true
ConnectionEvent
:
:
StateChange
(
_
)
=
>
{
}
_
=
>
panic
!
(
"
unexpected
event
"
)
}
}
assert
!
(
connected
)
;
assert
!
(
control_stream
)
;
assert
!
(
qpack_encoder_stream
)
;
assert
!
(
qpack_decoder_stream
)
;
}
fn
make_request
(
client
:
&
mut
Http3Client
close_sending_side
:
bool
)
-
>
u64
{
let
request_stream_id
=
client
.
fetch
(
"
GET
"
"
https
"
"
something
.
com
"
"
/
"
&
[
]
)
.
unwrap
(
)
;
if
close_sending_side
{
let
_
=
client
.
stream_close_send
(
request_stream_id
)
;
}
request_stream_id
}
const
EXPECTED_REQUEST_HEADER_FRAME
:
&
[
u8
]
=
&
[
0x01
0x10
0x00
0x00
0xd1
0xd7
0x50
0x89
0x41
0xe9
0x2a
0x67
0x35
0x53
0x2e
0x43
0xd3
0xc1
]
;
const
HTTP_HEADER_FRAME_0
:
&
[
u8
]
=
&
[
0x01
0x06
0x00
0x00
0xd9
0x54
0x01
0x30
]
;
fn
check_response_header_0
(
header
:
&
[
Header
]
)
{
let
expected_response_header_0
=
&
[
(
String
:
:
from
(
"
:
status
"
)
String
:
:
from
(
"
200
"
)
)
(
String
:
:
from
(
"
content
-
length
"
)
String
:
:
from
(
"
0
"
)
)
]
;
assert_eq
!
(
header
expected_response_header_0
)
;
}
const
HTTP_RESPONSE_1
:
&
[
u8
]
=
&
[
0x01
0x06
0x00
0x00
0xd9
0x54
0x01
0x37
0x0
0x3
0x61
0x62
0x63
0x0
0x4
0x64
0x65
0x66
0x67
]
;
fn
check_response_header_1
(
header
:
&
[
Header
]
)
{
let
expected_response_header_1
=
&
[
(
String
:
:
from
(
"
:
status
"
)
String
:
:
from
(
"
200
"
)
)
(
String
:
:
from
(
"
content
-
length
"
)
String
:
:
from
(
"
7
"
)
)
]
;
assert_eq
!
(
header
expected_response_header_1
)
;
}
const
EXPECTED_RESPONSE_DATA_1
:
&
[
u8
]
=
&
[
0x61
0x62
0x63
0x64
0x65
0x66
0x67
]
;
const
HTTP_RESPONSE_2
:
&
[
u8
]
=
&
[
0x01
0x06
0x00
0x00
0xd9
0x54
0x01
0x33
0x0
0x3
0x61
0x62
0x63
]
;
const
HTTP_RESPONSE_HEADER_ONLY_2
:
&
[
u8
]
=
&
[
0x01
0x06
0x00
0x00
0xd9
0x54
0x01
0x33
]
;
fn
check_response_header_2
(
header
:
&
[
Header
]
)
{
let
expected_response_header_2
=
&
[
(
String
:
:
from
(
"
:
status
"
)
String
:
:
from
(
"
200
"
)
)
(
String
:
:
from
(
"
content
-
length
"
)
String
:
:
from
(
"
3
"
)
)
]
;
assert_eq
!
(
header
expected_response_header_2
)
;
}
const
EXPECTED_RESPONSE_DATA_2_FRAME_1
:
&
[
u8
]
=
&
[
0x61
0x62
0x63
]
;
fn
connect_and_send_request
(
close_sending_side
:
bool
)
-
>
(
Http3Client
TestServer
u64
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
let
request_stream_id
=
make_request
(
&
mut
client
close_sending_side
)
;
assert_eq
!
(
request_stream_id
0
)
;
let
out
=
client
.
process
(
None
now
(
)
)
;
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
while
let
Some
(
e
)
=
server
.
conn
.
next_event
(
)
{
match
e
{
ConnectionEvent
:
:
NewStream
{
stream_id
stream_type
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
assert_eq
!
(
stream_type
StreamType
:
:
BiDi
)
;
}
ConnectionEvent
:
:
RecvStreamReadable
{
stream_id
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
read_and_check_stream_data
(
&
mut
server
.
conn
stream_id
EXPECTED_REQUEST_HEADER_FRAME
close_sending_side
)
;
}
_
=
>
{
}
}
}
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
(
client
server
request_stream_id
)
}
#
[
test
]
fn
test_client_connect_and_exchange_qpack_and_control_streams
(
)
{
let
_
=
connect
(
)
;
}
#
[
test
]
fn
test_client_close_control_stream
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
server
.
conn
.
stream_close_send
(
server
.
control_stream_id
.
unwrap
(
)
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpClosedCriticalStream
)
;
}
#
[
test
]
fn
test_client_reset_control_stream
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
server
.
conn
.
stream_reset_send
(
server
.
control_stream_id
.
unwrap
(
)
Error
:
:
HttpNoError
.
code
(
)
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpClosedCriticalStream
)
;
}
#
[
test
]
fn
test_client_reset_server_side_encoder_stream
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
server
.
conn
.
stream_reset_send
(
server
.
encoder_stream_id
.
unwrap
(
)
Error
:
:
HttpNoError
.
code
(
)
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpClosedCriticalStream
)
;
}
#
[
test
]
fn
test_client_reset_server_side_decoder_stream
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
server
.
conn
.
stream_reset_send
(
server
.
decoder_stream_id
.
unwrap
(
)
Error
:
:
HttpNoError
.
code
(
)
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpClosedCriticalStream
)
;
}
#
[
test
]
fn
test_client_stop_sending_control_stream
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
server
.
conn
.
stream_stop_sending
(
CLIENT_SIDE_CONTROL_STREAM_ID
Error
:
:
HttpNoError
.
code
(
)
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpClosedCriticalStream
)
;
}
#
[
test
]
fn
test_client_stop_sending_encoder_stream
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
server
.
conn
.
stream_stop_sending
(
CLIENT_SIDE_ENCODER_STREAM_ID
Error
:
:
HttpNoError
.
code
(
)
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpClosedCriticalStream
)
;
}
#
[
test
]
fn
test_client_stop_sending_decoder_stream
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
server
.
conn
.
stream_stop_sending
(
CLIENT_SIDE_DECODER_STREAM_ID
Error
:
:
HttpNoError
.
code
(
)
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpClosedCriticalStream
)
;
}
#
[
test
]
fn
test_client_missing_settings
(
)
{
let
(
mut
client
mut
server
)
=
connect_only_transport
(
)
;
let
control_stream
=
server
.
conn
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
;
let
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x0
0x1
0x3
0x0
0x1
0x2
]
)
;
assert_eq
!
(
sent
Ok
(
6
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpMissingSettings
)
;
}
#
[
test
]
fn
test_client_receive_settings_twice
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
let
sent
=
server
.
conn
.
stream_send
(
server
.
control_stream_id
.
unwrap
(
)
&
[
0x4
0x6
0x1
0x40
0x64
0x7
0x40
0x64
]
)
;
assert_eq
!
(
sent
Ok
(
8
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpFrameUnexpected
)
;
}
fn
test_wrong_frame_on_control_stream
(
v
:
&
[
u8
]
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
let
_
=
server
.
conn
.
stream_send
(
server
.
control_stream_id
.
unwrap
(
)
v
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpFrameUnexpected
)
;
}
#
[
test
]
fn
test_data_frame_on_control_stream
(
)
{
test_wrong_frame_on_control_stream
(
&
[
0x0
0x2
0x1
0x2
]
)
;
}
#
[
test
]
fn
test_headers_frame_on_control_stream
(
)
{
test_wrong_frame_on_control_stream
(
&
[
0x1
0x2
0x1
0x2
]
)
;
}
#
[
test
]
fn
test_push_promise_frame_on_control_stream
(
)
{
test_wrong_frame_on_control_stream
(
&
[
0x5
0x2
0x1
0x2
]
)
;
}
#
[
test
]
fn
test_client_received_unknown_stream
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
let
new_stream_id
=
server
.
conn
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
;
let
_
=
server
.
conn
.
stream_send
(
new_stream_id
&
[
0x41
0x19
0x4
0x4
0x6
0x0
0x8
0x0
]
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
let
out
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
stop_sending_event_found
=
false
;
while
let
Some
(
e
)
=
server
.
conn
.
next_event
(
)
{
if
let
ConnectionEvent
:
:
SendStreamStopSending
{
stream_id
app_error
}
=
e
{
stop_sending_event_found
=
true
;
assert_eq
!
(
stream_id
new_stream_id
)
;
assert_eq
!
(
app_error
Error
:
:
HttpStreamCreation
.
code
(
)
)
;
}
}
assert
!
(
stop_sending_event_found
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Connected
)
;
}
#
[
test
]
fn
test_client_received_push_stream
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
let
push_stream_id
=
server
.
conn
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
;
let
_
=
server
.
conn
.
stream_send
(
push_stream_id
PUSH_STREAM_DATA
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
let
out
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpId
)
;
}
fn
test_wrong_frame_on_request_stream
(
v
:
&
[
u8
]
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
false
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
v
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
let
_
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpFrameUnexpected
)
;
}
#
[
test
]
fn
test_cancel_push_frame_on_request_stream
(
)
{
test_wrong_frame_on_request_stream
(
&
[
0x3
0x1
0x5
]
)
;
}
#
[
test
]
fn
test_settings_frame_on_request_stream
(
)
{
test_wrong_frame_on_request_stream
(
&
[
0x4
0x4
0x6
0x4
0x8
0x4
]
)
;
}
#
[
test
]
fn
test_goaway_frame_on_request_stream
(
)
{
test_wrong_frame_on_request_stream
(
&
[
0x7
0x1
0x5
]
)
;
}
#
[
test
]
fn
test_max_push_id_frame_on_request_stream
(
)
{
test_wrong_frame_on_request_stream
(
&
[
0xd
0x1
0x5
]
)
;
}
#
[
test
]
fn
test_frame_reading
(
)
{
let
(
mut
client
mut
server
)
=
connect_only_transport
(
)
;
let
control_stream
=
server
.
conn
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
;
let
mut
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x0
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x4
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x4
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x6
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x0
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x8
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x0
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Connected
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x5
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x5
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x4
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x61
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x62
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x63
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
[
0x64
]
)
;
assert_eq
!
(
sent
Ok
(
1
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpFrameUnexpected
)
;
}
#
[
test
]
fn
fetch_basic
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_1
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
http_events
=
client
.
events
(
)
.
collect
:
:
<
Vec
<
_
>
>
(
)
;
assert_eq
!
(
http_events
.
len
(
)
2
)
;
for
e
in
http_events
{
match
e
{
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
check_response_header_1
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
false
)
;
}
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
(
amount
fin
)
=
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf
)
.
unwrap
(
)
;
assert_eq
!
(
fin
true
)
;
assert_eq
!
(
amount
EXPECTED_RESPONSE_DATA_1
.
len
(
)
)
;
assert_eq
!
(
&
buf
[
.
.
amount
]
EXPECTED_RESPONSE_DATA_1
)
;
}
_
=
>
{
}
}
}
let
mut
buf
=
[
0_u8
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf
)
;
assert_eq
!
(
res
.
unwrap_err
(
)
Error
:
:
InvalidStreamId
)
;
client
.
close
(
now
(
)
0
"
"
)
;
}
fn
read_response
(
client
:
&
mut
Http3Client
server
:
&
mut
Connection
request_stream_id
:
u64
)
{
let
out
=
server
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
check_response_header_2
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
false
)
;
}
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
(
amount
fin
)
=
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf
)
.
unwrap
(
)
;
assert_eq
!
(
fin
true
)
;
assert_eq
!
(
amount
EXPECTED_RESPONSE_DATA_2_FRAME_1
.
len
(
)
)
;
assert_eq
!
(
&
buf
[
.
.
amount
]
EXPECTED_RESPONSE_DATA_2_FRAME_1
)
;
}
_
=
>
{
}
}
}
let
mut
buf
=
[
0_u8
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf
)
;
assert
!
(
res
.
is_err
(
)
)
;
assert_eq
!
(
res
.
unwrap_err
(
)
Error
:
:
InvalidStreamId
)
;
client
.
close
(
now
(
)
0
"
"
)
;
}
const
REQUEST_BODY
:
&
[
u8
]
=
&
[
0x64
0x65
0x66
]
;
const
EXPECTED_REQUEST_BODY_FRAME
:
&
[
u8
]
=
&
[
0x0
0x3
0x64
0x65
0x66
]
;
#
[
test
]
fn
fetch_with_data
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
false
)
;
let
data_writable
=
|
e
|
matches
!
(
e
Http3ClientEvent
:
:
DataWritable
{
.
.
}
)
;
assert
!
(
client
.
events
(
)
.
any
(
data_writable
)
)
;
let
sent
=
client
.
send_request_body
(
request_stream_id
REQUEST_BODY
)
.
unwrap
(
)
;
assert_eq
!
(
sent
REQUEST_BODY
.
len
(
)
)
;
let
_
=
client
.
stream_close_send
(
request_stream_id
)
;
let
out
=
client
.
process
(
None
now
(
)
)
;
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
while
let
Some
(
e
)
=
server
.
conn
.
next_event
(
)
{
match
e
{
ConnectionEvent
:
:
NewStream
{
stream_id
stream_type
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
assert_eq
!
(
stream_type
StreamType
:
:
BiDi
)
;
}
ConnectionEvent
:
:
RecvStreamReadable
{
stream_id
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
(
amount
fin
)
=
server
.
conn
.
stream_recv
(
stream_id
&
mut
buf
)
.
unwrap
(
)
;
assert_eq
!
(
fin
true
)
;
assert_eq
!
(
amount
EXPECTED_REQUEST_BODY_FRAME
.
len
(
)
)
;
assert_eq
!
(
&
buf
[
.
.
amount
]
EXPECTED_REQUEST_BODY_FRAME
)
;
let
_
=
server
.
conn
.
stream_send
(
stream_id
HTTP_RESPONSE_2
)
;
server
.
conn
.
stream_close_send
(
stream_id
)
.
unwrap
(
)
;
}
_
=
>
{
}
}
}
read_response
(
&
mut
client
&
mut
server
.
conn
request_stream_id
)
;
}
fn
fetch_with_data_length_xbytes
(
request_body
:
&
[
u8
]
expected_data_frame_header
:
&
[
u8
]
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
false
)
;
let
data_writable
=
|
e
|
matches
!
(
e
Http3ClientEvent
:
:
DataWritable
{
.
.
}
)
;
assert
!
(
client
.
events
(
)
.
any
(
data_writable
)
)
;
let
sent
=
client
.
send_request_body
(
request_stream_id
request_body
)
;
assert_eq
!
(
sent
Ok
(
request_body
.
len
(
)
)
)
;
let
_
=
client
.
stream_close_send
(
request_stream_id
)
;
let
mut
out
=
client
.
process
(
None
now
(
)
)
;
for
_i
in
0
.
.
20
{
out
=
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
out
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
}
while
let
Some
(
e
)
=
server
.
conn
.
next_event
(
)
{
if
let
ConnectionEvent
:
:
RecvStreamReadable
{
stream_id
}
=
e
{
if
stream_id
=
=
request_stream_id
{
let
mut
buf
=
[
1_u8
;
0xffff
]
;
let
(
amount
fin
)
=
server
.
conn
.
stream_recv
(
stream_id
&
mut
buf
)
.
unwrap
(
)
;
assert_eq
!
(
fin
true
)
;
assert_eq
!
(
amount
request_body
.
len
(
)
+
expected_data_frame_header
.
len
(
)
)
;
assert_eq
!
(
&
buf
[
.
.
expected_data_frame_header
.
len
(
)
]
expected_data_frame_header
)
;
assert_eq
!
(
&
buf
[
expected_data_frame_header
.
len
(
)
.
.
amount
]
request_body
)
;
let
_
=
server
.
conn
.
stream_send
(
stream_id
HTTP_RESPONSE_2
)
;
server
.
conn
.
stream_close_send
(
stream_id
)
.
unwrap
(
)
;
}
}
}
read_response
(
&
mut
client
&
mut
server
.
conn
request_stream_id
)
;
}
#
[
test
]
fn
fetch_with_data_length_63bytes
(
)
{
fetch_with_data_length_xbytes
(
&
[
0_u8
;
63
]
&
[
0x0
0x3f
]
)
;
}
#
[
test
]
fn
fetch_with_data_length_64bytes
(
)
{
fetch_with_data_length_xbytes
(
&
[
0_u8
;
64
]
&
[
0x0
0x40
0x40
]
)
;
}
#
[
test
]
fn
fetch_with_data_length_16383bytes
(
)
{
fetch_with_data_length_xbytes
(
&
[
0_u8
;
16383
]
&
[
0x0
0x7f
0xff
]
)
;
}
#
[
test
]
fn
fetch_with_data_length_16384bytes
(
)
{
fetch_with_data_length_xbytes
(
&
[
0_u8
;
16384
]
&
[
0x0
0x80
0x0
0x40
0x0
]
)
;
}
fn
fetch_with_two_data_frames
(
first_frame
:
&
[
u8
]
expected_first_data_frame_header
:
&
[
u8
]
expected_second_data_frame_header
:
&
[
u8
]
expected_second_data_frame
:
&
[
u8
]
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
false
)
;
let
data_writable
=
|
e
|
matches
!
(
e
Http3ClientEvent
:
:
DataWritable
{
.
.
}
)
;
assert
!
(
client
.
events
(
)
.
any
(
data_writable
)
)
;
let
sent
=
client
.
send_request_body
(
request_stream_id
first_frame
)
;
assert_eq
!
(
sent
Ok
(
first_frame
.
len
(
)
)
)
;
let
sent
=
client
.
send_request_body
(
request_stream_id
&
[
0_u8
;
0xffff
]
)
;
assert_eq
!
(
sent
Ok
(
expected_second_data_frame
.
len
(
)
)
)
;
let
_
=
client
.
stream_close_send
(
request_stream_id
)
;
let
mut
out
=
client
.
process
(
None
now
(
)
)
;
for
_i
in
0
.
.
55
{
out
=
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
out
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
}
while
let
Some
(
e
)
=
server
.
conn
.
next_event
(
)
{
if
let
ConnectionEvent
:
:
RecvStreamReadable
{
stream_id
}
=
e
{
if
stream_id
=
=
request_stream_id
{
let
mut
buf
=
[
1_u8
;
0xffff
]
;
let
(
amount
fin
)
=
server
.
conn
.
stream_recv
(
stream_id
&
mut
buf
)
.
unwrap
(
)
;
assert_eq
!
(
fin
true
)
;
assert_eq
!
(
amount
expected_first_data_frame_header
.
len
(
)
+
first_frame
.
len
(
)
+
expected_second_data_frame_header
.
len
(
)
+
expected_second_data_frame
.
len
(
)
)
;
let
end
=
expected_first_data_frame_header
.
len
(
)
;
assert_eq
!
(
&
buf
[
.
.
end
]
expected_first_data_frame_header
)
;
let
start
=
end
;
let
end
=
end
+
first_frame
.
len
(
)
;
assert_eq
!
(
&
buf
[
start
.
.
end
]
first_frame
)
;
let
start2
=
end
;
let
end2
=
end
+
expected_second_data_frame_header
.
len
(
)
;
assert_eq
!
(
&
buf
[
start2
.
.
end2
]
expected_second_data_frame_header
)
;
let
start3
=
end2
;
let
end3
=
end2
+
expected_second_data_frame
.
len
(
)
;
assert_eq
!
(
&
buf
[
start3
.
.
end3
]
expected_second_data_frame
)
;
let
_
=
server
.
conn
.
stream_send
(
stream_id
HTTP_RESPONSE_2
)
;
server
.
conn
.
stream_close_send
(
stream_id
)
.
unwrap
(
)
;
}
}
}
read_response
(
&
mut
client
&
mut
server
.
conn
request_stream_id
)
;
}
#
[
test
]
fn
fetch_two_data_frame_second_63bytes
(
)
{
fetch_with_two_data_frames
(
&
[
0_u8
;
65447
]
&
[
0x0
0x80
0x0
0xff
0x0a7
]
&
[
0x0
0x3f
]
&
[
0_u8
;
63
]
)
;
}
#
[
test
]
fn
fetch_two_data_frame_second_63bytes_place_for_66
(
)
{
fetch_with_two_data_frames
(
&
[
0_u8
;
65446
]
&
[
0x0
0x80
0x0
0xff
0x0a6
]
&
[
0x0
0x3f
]
&
[
0_u8
;
63
]
)
;
}
#
[
test
]
fn
fetch_two_data_frame_second_64bytes_place_for_67
(
)
{
fetch_with_two_data_frames
(
&
[
0_u8
;
65445
]
&
[
0x0
0x80
0x0
0xff
0x0a5
]
&
[
0x0
0x40
0x40
]
&
[
0_u8
;
64
]
)
;
}
#
[
test
]
fn
fetch_two_data_frame_second_16383bytes
(
)
{
fetch_with_two_data_frames
(
&
[
0_u8
;
49126
]
&
[
0x0
0x80
0x0
0xbf
0x0e6
]
&
[
0x0
0x7f
0xff
]
&
[
0_u8
;
16383
]
)
;
}
#
[
test
]
fn
fetch_two_data_frame_second_16383bytes_place_for_16387
(
)
{
fetch_with_two_data_frames
(
&
[
0_u8
;
49125
]
&
[
0x0
0x80
0x0
0xbf
0x0e5
]
&
[
0x0
0x7f
0xff
]
&
[
0_u8
;
16383
]
)
;
}
#
[
test
]
fn
fetch_two_data_frame_second_16383bytes_place_for_16388
(
)
{
fetch_with_two_data_frames
(
&
[
0_u8
;
49124
]
&
[
0x0
0x80
0x0
0xbf
0x0e4
]
&
[
0x0
0x7f
0xff
]
&
[
0_u8
;
16383
]
)
;
}
#
[
test
]
fn
fetch_two_data_frame_second_16384bytes_place_for_16389
(
)
{
fetch_with_two_data_frames
(
&
[
0_u8
;
49123
]
&
[
0x0
0x80
0x0
0xbf
0x0e3
]
&
[
0x0
0x80
0x0
0x40
0x0
]
&
[
0_u8
;
16384
]
)
;
}
#
[
test
]
fn
test_stop_sending_early_response
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
false
)
;
assert_eq
!
(
Ok
(
(
)
)
server
.
conn
.
stream_stop_sending
(
request_stream_id
Error
:
:
HttpNoError
.
code
(
)
)
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_2
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
stop_sending
=
false
;
let
mut
response_headers
=
false
;
let
mut
response_body
=
false
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
StopSending
{
stream_id
error
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
assert_eq
!
(
error
Error
:
:
HttpNoError
.
code
(
)
)
;
assert_eq
!
(
Err
(
Error
:
:
InvalidStreamId
)
client
.
send_request_body
(
request_stream_id
&
[
0_u8
;
10
]
)
)
;
stop_sending
=
true
;
}
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
check_response_header_2
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
false
)
;
response_headers
=
true
;
}
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
(
amount
fin
)
=
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf
)
.
unwrap
(
)
;
assert_eq
!
(
fin
true
)
;
assert_eq
!
(
amount
EXPECTED_RESPONSE_DATA_2_FRAME_1
.
len
(
)
)
;
assert_eq
!
(
&
buf
[
.
.
amount
]
EXPECTED_RESPONSE_DATA_2_FRAME_1
)
;
response_body
=
true
;
}
_
=
>
{
}
}
}
assert
!
(
response_headers
)
;
assert
!
(
response_body
)
;
assert
!
(
stop_sending
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf
)
;
assert
!
(
res
.
is_err
(
)
)
;
assert_eq
!
(
res
.
unwrap_err
(
)
Error
:
:
InvalidStreamId
)
;
client
.
close
(
now
(
)
0
"
"
)
;
}
#
[
test
]
fn
test_stop_sending_other_error_with_reset
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
false
)
;
assert_eq
!
(
Ok
(
(
)
)
server
.
conn
.
stream_stop_sending
(
request_stream_id
Error
:
:
HttpRequestRejected
.
code
(
)
)
)
;
assert_eq
!
(
Ok
(
(
)
)
server
.
conn
.
stream_reset_send
(
request_stream_id
Error
:
:
HttpRequestRejected
.
code
(
)
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
reset
=
false
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
StopSending
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
get
StopSending
.
"
)
;
}
Http3ClientEvent
:
:
Reset
{
stream_id
error
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
assert_eq
!
(
error
Error
:
:
HttpRequestRejected
.
code
(
)
)
;
reset
=
true
;
}
Http3ClientEvent
:
:
HeaderReady
{
.
.
}
|
Http3ClientEvent
:
:
DataReadable
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
get
any
headers
or
data
"
)
;
}
_
=
>
{
}
}
}
assert
!
(
reset
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf
)
;
assert
!
(
res
.
is_err
(
)
)
;
assert_eq
!
(
res
.
unwrap_err
(
)
Error
:
:
InvalidStreamId
)
;
client
.
close
(
now
(
)
0
"
"
)
;
}
#
[
test
]
fn
test_stop_sending_other_error_wo_reset
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
false
)
;
assert_eq
!
(
Ok
(
(
)
)
server
.
conn
.
stream_stop_sending
(
request_stream_id
Error
:
:
HttpRequestRejected
.
code
(
)
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
reset
=
false
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
StopSending
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
get
StopSending
.
"
)
;
}
Http3ClientEvent
:
:
Reset
{
stream_id
error
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
assert_eq
!
(
error
Error
:
:
HttpRequestRejected
.
code
(
)
)
;
reset
=
true
;
}
Http3ClientEvent
:
:
HeaderReady
{
.
.
}
|
Http3ClientEvent
:
:
DataReadable
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
get
any
headers
or
data
"
)
;
}
_
=
>
{
}
}
}
assert
!
(
reset
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf
)
;
assert
!
(
res
.
is_err
(
)
)
;
assert_eq
!
(
res
.
unwrap_err
(
)
Error
:
:
InvalidStreamId
)
;
client
.
close
(
now
(
)
0
"
"
)
;
}
#
[
test
]
fn
test_stop_sending_and_reset_other_error_with_events
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
false
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_2
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_eq
!
(
Ok
(
(
)
)
server
.
conn
.
stream_stop_sending
(
request_stream_id
Error
:
:
HttpRequestCancelled
.
code
(
)
)
)
;
assert_eq
!
(
Ok
(
(
)
)
server
.
conn
.
stream_reset_send
(
request_stream_id
Error
:
:
HttpRequestCancelled
.
code
(
)
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
reset
=
false
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
StopSending
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
get
StopSending
.
"
)
;
}
Http3ClientEvent
:
:
Reset
{
stream_id
error
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
assert_eq
!
(
error
Error
:
:
HttpRequestCancelled
.
code
(
)
)
;
reset
=
true
;
}
Http3ClientEvent
:
:
HeaderReady
{
.
.
}
|
Http3ClientEvent
:
:
DataReadable
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
get
any
headers
or
data
"
)
;
}
_
=
>
{
}
}
}
assert
!
(
reset
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf
)
;
assert
!
(
res
.
is_err
(
)
)
;
assert_eq
!
(
res
.
unwrap_err
(
)
Error
:
:
InvalidStreamId
)
;
client
.
close
(
now
(
)
0
"
"
)
;
}
#
[
test
]
fn
test_stop_sending_other_error_with_events
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
false
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_2
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_eq
!
(
Ok
(
(
)
)
server
.
conn
.
stream_stop_sending
(
request_stream_id
Error
:
:
HttpRequestCancelled
.
code
(
)
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
reset
=
false
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
StopSending
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
get
StopSending
.
"
)
;
}
Http3ClientEvent
:
:
Reset
{
stream_id
error
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
assert_eq
!
(
error
Error
:
:
HttpRequestCancelled
.
code
(
)
)
;
reset
=
true
;
}
Http3ClientEvent
:
:
HeaderReady
{
.
.
}
|
Http3ClientEvent
:
:
DataReadable
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
get
any
headers
or
data
"
)
;
}
_
=
>
{
}
}
}
assert
!
(
reset
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf
)
;
assert
!
(
res
.
is_err
(
)
)
;
assert_eq
!
(
res
.
unwrap_err
(
)
Error
:
:
InvalidStreamId
)
;
client
.
close
(
now
(
)
0
"
"
)
;
}
#
[
test
]
fn
test_reset_wo_stop_sending
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
false
)
;
assert_eq
!
(
Ok
(
(
)
)
server
.
conn
.
stream_reset_send
(
request_stream_id
Error
:
:
HttpRequestCancelled
.
code
(
)
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
reset
=
false
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
StopSending
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
get
StopSending
.
"
)
;
}
Http3ClientEvent
:
:
Reset
{
stream_id
error
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
assert_eq
!
(
error
Error
:
:
HttpRequestCancelled
.
code
(
)
)
;
reset
=
true
;
}
Http3ClientEvent
:
:
HeaderReady
{
.
.
}
|
Http3ClientEvent
:
:
DataReadable
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
get
any
headers
or
data
"
)
;
}
_
=
>
{
}
}
}
assert
!
(
reset
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf
)
;
assert
!
(
res
.
is_err
(
)
)
;
assert_eq
!
(
res
.
unwrap_err
(
)
Error
:
:
InvalidStreamId
)
;
client
.
close
(
now
(
)
0
"
"
)
;
}
fn
test_incomplet_frame
(
buf
:
&
[
u8
]
error
:
&
Error
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
buf
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
if
let
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
e
{
assert_eq
!
(
stream_id
request_stream_id
)
;
let
mut
buf_res
=
[
0_u8
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf_res
)
;
assert
!
(
res
.
is_err
(
)
)
;
assert_eq
!
(
res
.
unwrap_err
(
)
Error
:
:
HttpFrame
)
;
}
}
assert_closed
(
&
client
&
error
)
;
}
#
[
test
]
fn
test_incomplet_data_frame
(
)
{
test_incomplet_frame
(
&
HTTP_RESPONSE_2
[
.
.
12
]
&
Error
:
:
HttpFrame
)
;
}
#
[
test
]
fn
test_incomplet_headers_frame
(
)
{
test_incomplet_frame
(
&
HTTP_RESPONSE_2
[
.
.
7
]
&
Error
:
:
HttpFrame
)
;
}
#
[
test
]
fn
test_incomplet_unknown_frame
(
)
{
test_incomplet_frame
(
&
[
0x21
]
&
Error
:
:
HttpFrame
)
;
}
#
[
test
]
fn
test_goaway
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
let
request_stream_id_1
=
make_request
(
&
mut
client
false
)
;
assert_eq
!
(
request_stream_id_1
0
)
;
let
request_stream_id_2
=
make_request
(
&
mut
client
false
)
;
assert_eq
!
(
request_stream_id_2
4
)
;
let
request_stream_id_3
=
make_request
(
&
mut
client
false
)
;
assert_eq
!
(
request_stream_id_3
8
)
;
let
out
=
client
.
process
(
None
now
(
)
)
;
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
_
=
server
.
conn
.
stream_send
(
server
.
control_stream_id
.
unwrap
(
)
&
[
0x7
0x1
0x8
]
)
;
while
let
Some
(
e
)
=
server
.
conn
.
next_event
(
)
{
if
let
ConnectionEvent
:
:
RecvStreamReadable
{
stream_id
}
=
e
{
let
mut
buf
=
[
0_u8
;
100
]
;
let
_
=
server
.
conn
.
stream_recv
(
stream_id
&
mut
buf
)
.
unwrap
(
)
;
if
(
stream_id
=
=
request_stream_id_1
)
|
|
(
stream_id
=
=
request_stream_id_2
)
{
let
_
=
server
.
conn
.
stream_send
(
stream_id
HTTP_RESPONSE_1
)
;
server
.
conn
.
stream_close_send
(
stream_id
)
.
unwrap
(
)
;
}
}
}
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
stream_reset
=
false
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
HeaderReady
{
headers
fin
.
.
}
=
>
{
check_response_header_1
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
false
)
;
}
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
>
{
assert
!
(
(
stream_id
=
=
request_stream_id_1
)
|
|
(
stream_id
=
=
request_stream_id_2
)
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
(
EXPECTED_RESPONSE_DATA_1
.
len
(
)
true
)
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf
)
.
unwrap
(
)
)
;
}
Http3ClientEvent
:
:
Reset
{
stream_id
error
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id_3
)
;
assert_eq
!
(
error
Error
:
:
HttpRequestRejected
.
code
(
)
)
;
stream_reset
=
true
;
}
_
=
>
{
}
}
}
assert
!
(
stream_reset
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
GoingAway
(
8
)
)
;
assert_eq
!
(
client
.
fetch
(
"
GET
"
"
https
"
"
something
.
com
"
"
/
"
&
[
]
)
Err
(
Error
:
:
AlreadyClosed
)
)
;
client
.
close
(
now
(
)
0
"
"
)
;
}
#
[
test
]
fn
multiple_goaways
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
let
request_stream_id_1
=
make_request
(
&
mut
client
false
)
;
assert_eq
!
(
request_stream_id_1
0
)
;
let
request_stream_id_2
=
make_request
(
&
mut
client
false
)
;
assert_eq
!
(
request_stream_id_2
4
)
;
let
request_stream_id_3
=
make_request
(
&
mut
client
false
)
;
assert_eq
!
(
request_stream_id_3
8
)
;
let
out
=
client
.
process
(
None
now
(
)
)
;
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
_
=
server
.
conn
.
stream_send
(
server
.
control_stream_id
.
unwrap
(
)
&
[
0x7
0x1
0x8
]
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
stream_reset_1
=
0
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
if
let
Http3ClientEvent
:
:
Reset
{
stream_id
error
}
=
e
{
assert_eq
!
(
stream_id
request_stream_id_3
)
;
assert_eq
!
(
error
Error
:
:
HttpRequestRejected
.
code
(
)
)
;
stream_reset_1
+
=
1
;
}
}
assert_eq
!
(
stream_reset_1
1
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
GoingAway
(
8
)
)
;
let
_
=
server
.
conn
.
stream_send
(
server
.
control_stream_id
.
unwrap
(
)
&
[
0x7
0x1
0x4
]
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id_1
HTTP_RESPONSE_1
)
;
server
.
conn
.
stream_close_send
(
request_stream_id_1
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
stream_reset_2
=
0
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
HeaderReady
{
headers
fin
.
.
}
=
>
{
check_response_header_1
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
false
)
;
}
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
>
{
assert
!
(
stream_id
=
=
request_stream_id_1
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
(
EXPECTED_RESPONSE_DATA_1
.
len
(
)
true
)
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf
)
.
unwrap
(
)
)
;
}
Http3ClientEvent
:
:
Reset
{
stream_id
error
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id_2
)
;
assert_eq
!
(
error
Error
:
:
HttpRequestRejected
.
code
(
)
)
;
stream_reset_2
+
=
1
;
}
_
=
>
{
}
}
}
assert_eq
!
(
stream_reset_2
1
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
GoingAway
(
4
)
)
;
}
#
[
test
]
fn
multiple_goaways_stream_id_increased
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
let
request_stream_id_1
=
make_request
(
&
mut
client
false
)
;
assert_eq
!
(
request_stream_id_1
0
)
;
let
request_stream_id_2
=
make_request
(
&
mut
client
false
)
;
assert_eq
!
(
request_stream_id_2
4
)
;
let
request_stream_id_3
=
make_request
(
&
mut
client
false
)
;
assert_eq
!
(
request_stream_id_3
8
)
;
let
_
=
server
.
conn
.
stream_send
(
server
.
control_stream_id
.
unwrap
(
)
&
[
0x7
0x1
0x4
]
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
GoingAway
(
4
)
)
;
let
_
=
server
.
conn
.
stream_send
(
server
.
control_stream_id
.
unwrap
(
)
&
[
0x7
0x1
0x8
]
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpGeneralProtocol
)
;
}
#
[
test
]
fn
goaway_wrong_stream_id
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
let
_
=
server
.
conn
.
stream_send
(
server
.
control_stream_id
.
unwrap
(
)
&
[
0x7
0x1
0x9
]
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpId
)
;
}
#
[
test
]
fn
test_stream_fin_wo_headers
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
e
=
client
.
events
(
)
.
next
(
)
.
unwrap
(
)
;
if
let
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
e
{
assert_eq
!
(
stream_id
request_stream_id
)
;
assert_eq
!
(
headers
None
)
;
assert_eq
!
(
fin
true
)
;
}
else
{
panic
!
(
"
wrong
event
type
"
)
;
}
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
client
.
read_response_data
(
now
(
)
0
&
mut
buf
)
Err
(
Error
:
:
InvalidStreamId
)
)
;
}
#
[
test
]
fn
test_stream_fin_after_headers
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_HEADER_ONLY_2
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
e
=
client
.
events
(
)
.
next
(
)
.
unwrap
(
)
;
if
let
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
e
{
assert_eq
!
(
stream_id
request_stream_id
)
;
check_response_header_2
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
true
)
;
}
else
{
panic
!
(
"
wrong
event
type
"
)
;
}
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
client
.
read_response_data
(
now
(
)
0
&
mut
buf
)
Err
(
Error
:
:
InvalidStreamId
)
)
;
}
#
[
test
]
fn
test_stream_fin_after_headers_are_read_wo_data_frame
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_HEADER_ONLY_2
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
check_response_header_2
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
false
)
;
}
Http3ClientEvent
:
:
DataReadable
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
receive
a
DataGeadable
event
!
"
)
;
}
_
=
>
{
}
}
;
}
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
HeaderReady
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
get
another
HeaderReady
!
"
)
;
}
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf
)
;
let
(
len
fin
)
=
res
.
expect
(
"
should
read
"
)
;
assert_eq
!
(
0
len
)
;
assert_eq
!
(
fin
true
)
;
}
_
=
>
{
}
}
;
}
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
client
.
read_response_data
(
now
(
)
0
&
mut
buf
)
Err
(
Error
:
:
InvalidStreamId
)
)
;
}
#
[
test
]
fn
test_stream_fin_after_headers_and_a_empty_data_frame
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_HEADER_ONLY_2
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
&
[
0x00
0x00
]
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
check_response_header_2
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
false
)
;
}
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
Ok
(
(
0
true
)
)
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf
)
)
;
}
_
=
>
{
}
}
;
}
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf
)
Err
(
Error
:
:
InvalidStreamId
)
)
;
}
#
[
test
]
fn
test_stream_fin_after_headers_an_empty_data_frame_are_read
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_HEADER_ONLY_2
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
&
[
0x00
0x00
]
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
check_response_header_2
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
false
)
;
}
Http3ClientEvent
:
:
DataReadable
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
receive
a
DataGeadable
event
!
"
)
;
}
_
=
>
{
}
}
;
}
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
HeaderReady
{
.
.
}
=
>
{
panic
!
(
"
We
should
not
get
another
HeaderReady
!
"
)
;
}
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf
)
;
let
(
len
fin
)
=
res
.
expect
(
"
should
read
"
)
;
assert_eq
!
(
0
len
)
;
assert_eq
!
(
fin
true
)
;
}
_
=
>
{
}
}
;
}
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
client
.
read_response_data
(
now
(
)
0
&
mut
buf
)
Err
(
Error
:
:
InvalidStreamId
)
)
;
}
#
[
test
]
fn
test_stream_fin_after_a_data_frame
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_2
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
check_response_header_2
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
false
)
;
}
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf
)
;
let
(
len
fin
)
=
res
.
expect
(
"
should
have
data
"
)
;
assert_eq
!
(
len
EXPECTED_RESPONSE_DATA_2_FRAME_1
.
len
(
)
)
;
assert_eq
!
(
&
buf
[
.
.
len
]
EXPECTED_RESPONSE_DATA_2_FRAME_1
)
;
assert_eq
!
(
fin
false
)
;
}
_
=
>
{
}
}
;
}
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
e
=
client
.
events
(
)
.
next
(
)
.
unwrap
(
)
;
if
let
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
e
{
assert_eq
!
(
stream_id
request_stream_id
)
;
let
mut
buf
=
[
0
;
100
]
;
let
res
=
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf
)
;
let
(
len
fin
)
=
res
.
expect
(
"
should
read
"
)
;
assert_eq
!
(
0
len
)
;
assert_eq
!
(
fin
true
)
;
}
else
{
panic
!
(
"
wrong
event
type
"
)
;
}
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
client
.
read_response_data
(
now
(
)
0
&
mut
buf
)
Err
(
Error
:
:
InvalidStreamId
)
)
;
}
#
[
test
]
fn
test_multiple_data_frames
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_1
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
match
client
.
events
(
)
.
nth
(
1
)
.
unwrap
(
)
{
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
(
EXPECTED_RESPONSE_DATA_1
.
len
(
)
true
)
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf
)
.
unwrap
(
)
)
;
}
x
=
>
{
eprintln
!
(
"
event
{
:
?
}
"
x
)
;
panic
!
(
)
}
}
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
client
.
read_response_data
(
now
(
)
0
&
mut
buf
)
Err
(
Error
:
:
InvalidStreamId
)
)
;
}
#
[
test
]
fn
test_receive_grease_before_response
(
)
{
const
UNKNOWN_FRAME_LEN
:
usize
=
832
;
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
mut
enc
=
Encoder
:
:
with_capacity
(
UNKNOWN_FRAME_LEN
+
4
)
;
enc
.
encode_varint
(
1028_u64
)
;
enc
.
encode_varint
(
UNKNOWN_FRAME_LEN
as
u64
)
;
let
mut
buf
:
Vec
<
_
>
=
enc
.
into
(
)
;
buf
.
resize
(
UNKNOWN_FRAME_LEN
+
buf
.
len
(
)
0
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
&
buf
)
.
unwrap
(
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_2
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
client
.
process
(
None
now
(
)
)
;
match
client
.
events
(
)
.
nth
(
1
)
.
unwrap
(
)
{
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
(
len
fin
)
=
client
.
read_response_data
(
now
(
)
stream_id
&
mut
buf
)
.
unwrap
(
)
;
assert_eq
!
(
len
EXPECTED_RESPONSE_DATA_2_FRAME_1
.
len
(
)
)
;
assert_eq
!
(
&
buf
[
.
.
len
]
EXPECTED_RESPONSE_DATA_2_FRAME_1
)
;
assert_eq
!
(
fin
true
)
;
}
x
=
>
{
eprintln
!
(
"
event
{
:
?
}
"
x
)
;
panic
!
(
)
}
}
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
client
.
read_response_data
(
now
(
)
0
&
mut
buf
)
Err
(
Error
:
:
InvalidStreamId
)
)
;
}
#
[
test
]
fn
test_read_frames_header_blocked
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
server
.
encoder
.
set_max_capacity
(
100
)
.
unwrap
(
)
;
server
.
encoder
.
set_max_blocked_streams
(
100
)
.
unwrap
(
)
;
server
.
encoder
.
send
(
&
mut
server
.
conn
)
.
unwrap
(
)
;
let
headers
=
vec
!
[
(
String
:
:
from
(
"
:
status
"
)
String
:
:
from
(
"
200
"
)
)
(
String
:
:
from
(
"
my
-
header
"
)
String
:
:
from
(
"
my
-
header
"
)
)
(
String
:
:
from
(
"
content
-
length
"
)
String
:
:
from
(
"
3
"
)
)
]
;
let
encoded_headers
=
server
.
encoder
.
encode_header_block
(
&
mut
server
.
conn
&
headers
request_stream_id
)
.
unwrap
(
)
;
let
hframe
=
HFrame
:
:
Headers
{
header_block
:
encoded_headers
.
to_vec
(
)
}
;
let
encoder_inst_pkt
=
server
.
conn
.
process
(
None
now
(
)
)
;
let
mut
d
=
Encoder
:
:
default
(
)
;
hframe
.
encode
(
&
mut
d
)
;
let
d_frame
=
HFrame
:
:
Data
{
len
:
3
}
;
d_frame
.
encode
(
&
mut
d
)
;
d
.
encode
(
&
[
0x61
0x62
0x63
]
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
&
d
[
.
.
]
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
let
_out
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
header_ready_event
=
|
e
|
matches
!
(
e
Http3ClientEvent
:
:
HeaderReady
{
.
.
}
)
;
assert
!
(
!
client
.
events
(
)
.
any
(
header_ready_event
)
)
;
let
_out
=
client
.
process
(
encoder_inst_pkt
.
dgram
(
)
now
(
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
let
_out
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
_out
=
client
.
process
(
None
now
(
)
)
;
let
mut
recv_header
=
false
;
let
mut
recv_data
=
false
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
match
e
{
Http3ClientEvent
:
:
HeaderReady
{
stream_id
.
.
}
=
>
{
assert_eq
!
(
stream_id
request_stream_id
)
;
recv_header
=
true
;
}
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
=
>
{
recv_data
=
true
;
assert_eq
!
(
stream_id
request_stream_id
)
;
}
x
=
>
{
eprintln
!
(
"
event
{
:
?
}
"
x
)
;
panic
!
(
)
}
}
}
assert
!
(
recv_header
&
&
recv_data
)
;
}
#
[
test
]
fn
test_read_frames_header_blocked_with_fin_after_headers
(
)
{
let
(
mut
hconn
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
server
.
encoder
.
set_max_capacity
(
100
)
.
unwrap
(
)
;
server
.
encoder
.
set_max_blocked_streams
(
100
)
.
unwrap
(
)
;
server
.
encoder
.
send
(
&
mut
server
.
conn
)
.
unwrap
(
)
;
let
sent_headers
=
vec
!
[
(
String
:
:
from
(
"
:
status
"
)
String
:
:
from
(
"
200
"
)
)
(
String
:
:
from
(
"
my
-
header
"
)
String
:
:
from
(
"
my
-
header
"
)
)
(
String
:
:
from
(
"
content
-
length
"
)
String
:
:
from
(
"
0
"
)
)
]
;
let
encoded_headers
=
server
.
encoder
.
encode_header_block
(
&
mut
server
.
conn
&
sent_headers
request_stream_id
)
.
unwrap
(
)
;
let
hframe
=
HFrame
:
:
Headers
{
header_block
:
encoded_headers
.
to_vec
(
)
}
;
let
encoder_inst_pkt
=
server
.
conn
.
process
(
None
now
(
)
)
;
let
mut
d
=
Encoder
:
:
default
(
)
;
hframe
.
encode
(
&
mut
d
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
&
d
[
.
.
]
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
let
_out
=
hconn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
header_ready_event
=
|
e
|
matches
!
(
e
Http3ClientEvent
:
:
HeaderReady
{
.
.
}
)
;
assert
!
(
!
hconn
.
events
(
)
.
any
(
header_ready_event
)
)
;
let
_out
=
hconn
.
process
(
encoder_inst_pkt
.
dgram
(
)
now
(
)
)
;
let
mut
recv_header
=
false
;
while
let
Some
(
e
)
=
hconn
.
next_event
(
)
{
if
let
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
e
{
assert_eq
!
(
stream_id
request_stream_id
)
;
assert_eq
!
(
headers
.
unwrap
(
)
sent_headers
)
;
assert_eq
!
(
fin
true
)
;
recv_header
=
true
;
}
else
{
panic
!
(
"
event
{
:
?
}
"
e
)
;
}
}
assert
!
(
recv_header
)
;
}
fn
check_control_qpack_request_streams_resumption
(
server
:
&
mut
Connection
expect_encoder_stream_data
:
&
[
u8
]
expect_request
:
bool
)
{
let
mut
control_stream
=
false
;
let
mut
qpack_decoder_stream
=
false
;
let
mut
qpack_encoder_stream
=
false
;
let
mut
request
=
false
;
while
let
Some
(
e
)
=
server
.
next_event
(
)
{
match
e
{
ConnectionEvent
:
:
NewStream
{
stream_id
stream_type
}
=
>
{
assert
!
(
matches
!
(
stream_id
2
|
6
|
10
|
0
)
)
;
if
stream_id
=
=
0
{
assert_eq
!
(
stream_type
StreamType
:
:
BiDi
)
;
}
else
{
assert_eq
!
(
stream_type
StreamType
:
:
UniDi
)
;
}
}
ConnectionEvent
:
:
RecvStreamReadable
{
stream_id
}
=
>
{
if
stream_id
=
=
2
{
read_and_check_stream_data
(
server
stream_id
CONTROL_STREAM_DATA
false
)
;
control_stream
=
true
;
}
else
if
stream_id
=
=
6
{
let
mut
buf
=
[
0_u8
;
100
]
;
let
(
amount
fin
)
=
server
.
stream_recv
(
stream_id
&
mut
buf
)
.
unwrap
(
)
;
assert_eq
!
(
fin
false
)
;
assert_eq
!
(
amount
expect_encoder_stream_data
.
len
(
)
)
;
assert_eq
!
(
&
buf
[
.
.
amount
]
expect_encoder_stream_data
)
;
qpack_encoder_stream
=
true
;
}
else
if
stream_id
=
=
10
{
let
mut
buf
=
[
0_u8
;
100
]
;
let
(
amount
fin
)
=
server
.
stream_recv
(
stream_id
&
mut
buf
)
.
unwrap
(
)
;
assert_eq
!
(
fin
false
)
;
assert_eq
!
(
amount
DECODER_STREAM_DATA
.
len
(
)
)
;
assert_eq
!
(
&
buf
[
.
.
amount
]
DECODER_STREAM_DATA
)
;
qpack_decoder_stream
=
true
;
}
else
if
stream_id
=
=
0
{
assert
!
(
expect_request
)
;
read_and_check_stream_data
(
server
stream_id
EXPECTED_REQUEST_HEADER_FRAME
true
)
;
request
=
true
;
}
else
{
panic
!
(
"
unexpected
event
"
)
;
}
}
ConnectionEvent
:
:
SendStreamWritable
{
stream_id
}
=
>
{
assert
!
(
matches
!
(
stream_id
2
|
6
|
10
)
)
;
}
ConnectionEvent
:
:
StateChange
(
_
)
=
>
(
)
_
=
>
panic
!
(
"
unexpected
event
"
)
}
}
assert
!
(
control_stream
)
;
assert
!
(
qpack_encoder_stream
)
;
assert
!
(
qpack_decoder_stream
)
;
assert_eq
!
(
request
expect_request
)
;
}
fn
exchange_token
(
client
:
&
mut
Http3Client
server
:
&
mut
Connection
)
-
>
Vec
<
u8
>
{
server
.
send_ticket
(
now
(
)
&
[
]
)
.
expect
(
"
can
send
ticket
"
)
;
let
out
=
server
.
process_output
(
now
(
)
)
;
assert
!
(
out
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
client
.
process_input
(
out
.
dgram
(
)
.
unwrap
(
)
now
(
)
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Connected
)
;
client
.
resumption_token
(
)
.
expect
(
"
should
have
token
"
)
}
fn
start_with_0rtt
(
)
-
>
(
Http3Client
TestServer
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
let
token
=
exchange_token
(
&
mut
client
&
mut
server
.
conn
)
;
let
mut
client
=
default_http3_client
(
)
;
let
server
=
make_default_server
(
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Initializing
)
;
client
.
set_resumption_token
(
now
(
)
&
token
)
.
expect
(
"
Set
resumption
token
.
"
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
ZeroRtt
)
;
(
client
server
)
}
#
[
test
]
fn
zero_rtt_negotiated
(
)
{
let
(
mut
client
mut
server
)
=
start_with_0rtt
(
)
;
let
out
=
client
.
process
(
None
now
(
)
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
ZeroRtt
)
;
assert_eq
!
(
*
server
.
conn
.
state
(
)
State
:
:
Init
)
;
let
out
=
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
check_control_qpack_request_streams_resumption
(
&
mut
server
.
conn
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
false
)
;
assert_eq
!
(
*
server
.
conn
.
state
(
)
State
:
:
Handshaking
)
;
let
out
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Connected
)
;
let
_out
=
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert
!
(
server
.
conn
.
state
(
)
.
connected
(
)
)
;
assert
!
(
client
.
tls_info
(
)
.
unwrap
(
)
.
resumed
(
)
)
;
assert
!
(
server
.
conn
.
tls_info
(
)
.
unwrap
(
)
.
resumed
(
)
)
;
}
#
[
test
]
fn
zero_rtt_send_request
(
)
{
let
(
mut
client
mut
server
)
=
start_with_0rtt
(
)
;
let
request_stream_id
=
make_request
(
&
mut
client
true
)
;
assert_eq
!
(
request_stream_id
0
)
;
let
out
=
client
.
process
(
None
now
(
)
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
ZeroRtt
)
;
assert_eq
!
(
*
server
.
conn
.
state
(
)
State
:
:
Init
)
;
let
out
=
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
check_control_qpack_request_streams_resumption
(
&
mut
server
.
conn
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
true
)
;
assert_eq
!
(
*
server
.
conn
.
state
(
)
State
:
:
Handshaking
)
;
let
out
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Connected
)
;
let
out
=
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert
!
(
server
.
conn
.
state
(
)
.
connected
(
)
)
;
let
out
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert
!
(
out
.
as_dgram_ref
(
)
.
is_none
(
)
)
;
let
res
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_2
)
;
assert_eq
!
(
res
Ok
(
HTTP_RESPONSE_2
.
len
(
)
)
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
read_response
(
&
mut
client
&
mut
server
.
conn
request_stream_id
)
;
assert
!
(
client
.
tls_info
(
)
.
unwrap
(
)
.
resumed
(
)
)
;
assert
!
(
server
.
conn
.
tls_info
(
)
.
unwrap
(
)
.
resumed
(
)
)
;
}
#
[
test
]
fn
zero_rtt_before_resumption_token
(
)
{
let
mut
client
=
default_http3_client
(
)
;
assert
!
(
client
.
fetch
(
"
GET
"
"
https
"
"
something
.
com
"
"
/
"
&
[
]
)
.
is_err
(
)
)
;
}
#
[
test
]
fn
zero_rtt_send_reject
(
)
{
let
(
mut
client
mut
server
)
=
connect
(
)
;
let
token
=
exchange_token
(
&
mut
client
&
mut
server
.
conn
)
;
let
mut
client
=
default_http3_client
(
)
;
let
ar
=
AntiReplay
:
:
new
(
now
(
)
test_fixture
:
:
ANTI_REPLAY_WINDOW
1
3
)
.
expect
(
"
setup
anti
-
replay
"
)
;
let
mut
server
=
Connection
:
:
new_server
(
test_fixture
:
:
DEFAULT_KEYS
test_fixture
:
:
DEFAULT_ALPN
&
ar
Rc
:
:
new
(
RefCell
:
:
new
(
FixedConnectionIdManager
:
:
new
(
10
)
)
)
)
.
unwrap
(
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Initializing
)
;
client
.
set_resumption_token
(
now
(
)
&
token
)
.
expect
(
"
Set
resumption
token
.
"
)
;
let
client_hs
=
client
.
process
(
None
now
(
)
)
;
assert
!
(
client_hs
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
let
request_stream_id
=
make_request
(
&
mut
client
false
)
;
assert_eq
!
(
request_stream_id
0
)
;
let
client_0rtt
=
client
.
process
(
None
now
(
)
)
;
assert
!
(
client_0rtt
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
let
server_hs
=
server
.
process
(
client_hs
.
dgram
(
)
now
(
)
)
;
assert
!
(
server_hs
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
let
server_ignored
=
server
.
process
(
client_0rtt
.
dgram
(
)
now
(
)
)
;
assert
!
(
server_ignored
.
as_dgram_ref
(
)
.
is_none
(
)
)
;
let
recvd_stream_evt
=
|
e
|
matches
!
(
e
ConnectionEvent
:
:
NewStream
{
.
.
}
)
;
assert
!
(
!
server
.
events
(
)
.
any
(
recvd_stream_evt
)
)
;
let
client_out
=
client
.
process
(
server_hs
.
dgram
(
)
now
(
)
)
;
assert
!
(
client_out
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
let
recvd_0rtt_reject
=
|
e
|
e
=
=
Http3ClientEvent
:
:
ZeroRttRejected
;
assert
!
(
client
.
events
(
)
.
any
(
recvd_0rtt_reject
)
)
;
let
res
=
client
.
stream_close_send
(
request_stream_id
)
;
assert
!
(
res
.
is_err
(
)
)
;
assert_eq
!
(
res
.
unwrap_err
(
)
Error
:
:
InvalidStreamId
)
;
let
_
=
server
.
process
(
client_out
.
dgram
(
)
now
(
)
)
;
check_control_qpack_streams
(
&
mut
server
)
;
assert_eq
!
(
make_request
(
&
mut
client
false
)
0
)
;
}
fn
zero_rtt_change_settings
(
original_settings
:
&
[
HSetting
]
resumption_settings
:
&
[
HSetting
]
expected_client_state
:
&
Http3State
expected_encoder_stream_data
:
&
[
u8
]
)
{
let
mut
client
=
default_http3_client
(
)
;
let
mut
server
=
make_server
(
original_settings
)
;
connect_with
(
&
mut
client
&
mut
server
)
;
let
token
=
exchange_token
(
&
mut
client
&
mut
server
.
conn
)
;
let
mut
client
=
default_http3_client
(
)
;
let
mut
server
=
make_server
(
resumption_settings
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Initializing
)
;
client
.
set_resumption_token
(
now
(
)
&
token
)
.
expect
(
"
Set
resumption
token
.
"
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
ZeroRtt
)
;
let
out
=
client
.
process
(
None
now
(
)
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
ZeroRtt
)
;
assert_eq
!
(
*
server
.
conn
.
state
(
)
State
:
:
Init
)
;
let
out
=
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
check_control_qpack_request_streams_resumption
(
&
mut
server
.
conn
expected_encoder_stream_data
false
)
;
assert_eq
!
(
*
server
.
conn
.
state
(
)
State
:
:
Handshaking
)
;
let
out
=
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_eq
!
(
client
.
state
(
)
Http3State
:
:
Connected
)
;
let
_
=
server
.
conn
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert
!
(
server
.
conn
.
state
(
)
.
connected
(
)
)
;
assert
!
(
client
.
tls_info
(
)
.
unwrap
(
)
.
resumed
(
)
)
;
assert
!
(
server
.
conn
.
tls_info
(
)
.
unwrap
(
)
.
resumed
(
)
)
;
let
control_stream
=
server
.
conn
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
;
let
mut
enc
=
Encoder
:
:
default
(
)
;
server
.
settings
.
encode
(
&
mut
enc
)
;
let
mut
sent
=
server
.
conn
.
stream_send
(
control_stream
CONTROL_STREAM_TYPE
)
;
assert_eq
!
(
sent
.
unwrap
(
)
CONTROL_STREAM_TYPE
.
len
(
)
)
;
sent
=
server
.
conn
.
stream_send
(
control_stream
&
enc
)
;
assert_eq
!
(
sent
.
unwrap
(
)
enc
.
len
(
)
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_eq
!
(
&
client
.
state
(
)
expected_client_state
)
;
assert
!
(
server
.
conn
.
state
(
)
.
connected
(
)
)
;
}
#
[
test
]
fn
zero_rtt_new_server_setting_are_the_same
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
Http3State
:
:
Connected
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
)
;
}
#
[
test
]
fn
zero_rtt_new_server_setting_omit_max_table
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
Http3State
:
:
Closing
(
CloseError
:
:
Application
(
265
)
)
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
)
;
}
#
[
test
]
fn
zero_rtt_new_server_setting_omit_blocked_streams
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
Http3State
:
:
Closing
(
CloseError
:
:
Application
(
265
)
)
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
)
;
}
#
[
test
]
fn
zero_rtt_new_server_setting_omit_header_list_size
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
]
&
Http3State
:
:
Connected
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
)
;
}
#
[
test
]
fn
zero_rtt_new_server_setting_max_table_size_bigger
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
200
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
Http3State
:
:
Closing
(
CloseError
:
:
Application
(
514
)
)
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
)
;
}
#
[
test
]
fn
zero_rtt_new_server_setting_max_table_size_smaller
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
50
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
Http3State
:
:
Closing
(
CloseError
:
:
Application
(
265
)
)
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
)
;
}
#
[
test
]
fn
zero_rtt_new_server_setting_blocked_streams_bigger
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
200
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
Http3State
:
:
Connected
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
)
;
}
#
[
test
]
fn
zero_rtt_new_server_setting_blocked_streams_smaller
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
50
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
Http3State
:
:
Closing
(
CloseError
:
:
Application
(
265
)
)
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
)
;
}
#
[
test
]
fn
zero_rtt_new_server_setting_max_header_size_bigger
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
20000
)
]
&
Http3State
:
:
Connected
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
)
;
}
#
[
test
]
fn
zero_rtt_new_server_setting_max_headers_size_smaller
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
5000
)
]
&
Http3State
:
:
Closing
(
CloseError
:
:
Application
(
265
)
)
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
)
;
}
#
[
test
]
fn
zero_rtt_max_table_size_first_omitted
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
Http3State
:
:
Connected
ENCODER_STREAM_DATA
)
;
}
#
[
test
]
fn
zero_rtt_blocked_streams_first_omitted
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
Http3State
:
:
Connected
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
)
;
}
#
[
test
]
fn
zero_rtt_max_header_size_first_omitted
(
)
{
zero_rtt_change_settings
(
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
10000
)
]
&
[
HSetting
:
:
new
(
HSettingType
:
:
MaxTableCapacity
100
)
HSetting
:
:
new
(
HSettingType
:
:
BlockedStreams
100
)
HSetting
:
:
new
(
HSettingType
:
:
MaxHeaderListSize
10000
)
]
&
Http3State
:
:
Closing
(
CloseError
:
:
Application
(
265
)
)
ENCODER_STREAM_DATA_WITH_CAP_INSTRUCTION
)
;
}
#
[
test
]
fn
test_trailers_with_fin_after_headers
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_HEADER_FRAME_0
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
response_headers
=
false
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
if
let
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
e
{
assert_eq
!
(
stream_id
request_stream_id
)
;
check_response_header_0
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
false
)
;
response_headers
=
true
;
}
}
assert
!
(
response_headers
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_HEADER_FRAME_0
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
events
:
Vec
<
Http3ClientEvent
>
=
client
.
events
(
)
.
collect
(
)
;
let
header_ready
:
fn
(
&
Http3ClientEvent
)
-
>
_
=
|
e
|
matches
!
(
*
e
Http3ClientEvent
:
:
HeaderReady
{
.
.
}
)
;
assert
!
(
!
events
.
iter
(
)
.
any
(
header_ready
)
)
;
let
data_readable
:
fn
(
&
Http3ClientEvent
)
-
>
_
=
|
e
|
matches
!
(
*
e
Http3ClientEvent
:
:
DataReadable
{
.
.
}
)
;
assert
!
(
events
.
iter
(
)
.
any
(
data_readable
)
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
(
len
fin
)
=
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf
)
.
unwrap
(
)
;
assert_eq
!
(
0
len
)
;
assert_eq
!
(
fin
true
)
}
#
[
test
]
fn
test_trailers_with_later_fin_after_headers
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_HEADER_FRAME_0
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
response_headers
=
false
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
if
let
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
e
{
assert_eq
!
(
stream_id
request_stream_id
)
;
check_response_header_0
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
false
)
;
response_headers
=
true
;
}
}
assert
!
(
response_headers
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_HEADER_FRAME_0
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
data_readable
=
|
e
|
matches
!
(
e
Http3ClientEvent
:
:
DataReadable
{
.
.
}
)
;
assert
!
(
!
client
.
events
(
)
.
any
(
data_readable
)
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
events
:
Vec
<
Http3ClientEvent
>
=
client
.
events
(
)
.
collect
(
)
;
let
header_ready
:
fn
(
&
Http3ClientEvent
)
-
>
_
=
|
e
|
matches
!
(
*
e
Http3ClientEvent
:
:
HeaderReady
{
.
.
}
)
;
assert
!
(
!
events
.
iter
(
)
.
any
(
header_ready
)
)
;
let
data_readable_fn
:
fn
(
&
Http3ClientEvent
)
-
>
_
=
|
e
|
matches
!
(
*
e
Http3ClientEvent
:
:
DataReadable
{
.
.
}
)
;
assert
!
(
events
.
iter
(
)
.
any
(
data_readable_fn
)
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
let
(
len
fin
)
=
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf
)
.
unwrap
(
)
;
assert_eq
!
(
0
len
)
;
assert_eq
!
(
fin
true
)
;
}
#
[
test
]
fn
test_data_after_trailers_after_headers
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_HEADER_FRAME_0
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
mut
response_headers
=
false
;
while
let
Some
(
e
)
=
client
.
next_event
(
)
{
if
let
Http3ClientEvent
:
:
HeaderReady
{
stream_id
headers
fin
}
=
e
{
assert_eq
!
(
stream_id
request_stream_id
)
;
check_response_header_0
(
&
headers
.
unwrap
(
)
)
;
assert_eq
!
(
fin
false
)
;
response_headers
=
true
;
}
}
assert
!
(
response_headers
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_HEADER_FRAME_0
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
data_readable
=
|
e
|
matches
!
(
e
Http3ClientEvent
:
:
DataReadable
{
.
.
}
)
;
assert
!
(
!
client
.
events
(
)
.
any
(
data_readable
)
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
&
[
0x0
0x3
0x61
0x62
0x63
]
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
assert_closed
(
&
client
&
Error
:
:
HttpFrameUnexpected
)
;
}
#
[
test
]
fn
transport_stream_readable_event_after_all_data
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
false
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_2
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
&
[
0x00
0x00
]
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process_input
(
out
.
dgram
(
)
.
unwrap
(
)
now
(
)
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
client
.
read_response_data
(
now
(
)
0
&
mut
buf
)
Ok
(
(
3
true
)
)
)
;
client
.
process
(
None
now
(
)
)
;
}
#
[
test
]
fn
no_data_ready_events_after_fin
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_1
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
data_readable_event
=
|
e
|
matches
!
(
e
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
if
stream_id
=
=
request_stream_id
)
;
assert
!
(
client
.
events
(
)
.
any
(
data_readable_event
)
)
;
let
mut
buf
=
[
0_u8
;
100
]
;
assert_eq
!
(
(
EXPECTED_RESPONSE_DATA_1
.
len
(
)
true
)
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf
)
.
unwrap
(
)
)
;
assert
!
(
!
client
.
events
(
)
.
any
(
data_readable_event
)
)
;
}
#
[
test
]
fn
reading_small_chunks_of_data
(
)
{
let
(
mut
client
mut
server
request_stream_id
)
=
connect_and_send_request
(
true
)
;
let
_
=
server
.
conn
.
stream_send
(
request_stream_id
HTTP_RESPONSE_1
)
;
server
.
conn
.
stream_close_send
(
request_stream_id
)
.
unwrap
(
)
;
let
out
=
server
.
conn
.
process
(
None
now
(
)
)
;
client
.
process
(
out
.
dgram
(
)
now
(
)
)
;
let
data_readable_event
=
|
e
|
matches
!
(
e
Http3ClientEvent
:
:
DataReadable
{
stream_id
}
if
stream_id
=
=
request_stream_id
)
;
assert
!
(
client
.
events
(
)
.
any
(
data_readable_event
)
)
;
let
mut
buf1
=
[
0_u8
;
1
]
;
assert_eq
!
(
(
1
false
)
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf1
)
.
unwrap
(
)
)
;
assert
!
(
!
client
.
events
(
)
.
any
(
data_readable_event
)
)
;
let
mut
buf2
=
[
0_u8
;
2
]
;
assert_eq
!
(
(
2
false
)
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf2
)
.
unwrap
(
)
)
;
assert
!
(
!
client
.
events
(
)
.
any
(
data_readable_event
)
)
;
assert_eq
!
(
(
2
false
)
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf2
)
.
unwrap
(
)
)
;
assert
!
(
!
client
.
events
(
)
.
any
(
data_readable_event
)
)
;
assert_eq
!
(
(
2
true
)
client
.
read_response_data
(
now
(
)
request_stream_id
&
mut
buf2
)
.
unwrap
(
)
)
;
assert
!
(
!
client
.
events
(
)
.
any
(
data_readable_event
)
)
;
}
}
