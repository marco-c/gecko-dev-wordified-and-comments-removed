use
core
:
:
fmt
;
if_std
!
{
use
std
:
:
fs
:
:
File
;
use
std
:
:
io
:
:
{
self
Read
}
;
}
use
scroll
:
:
{
self
Pread
}
;
use
mach
:
:
constants
:
:
cputype
:
:
{
CpuType
CpuSubType
CPU_SUBTYPE_MASK
CPU_ARCH_ABI64
}
;
use
error
;
pub
const
FAT_MAGIC
:
u32
=
0xcafebabe
;
pub
const
FAT_CIGAM
:
u32
=
0xbebafeca
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Default
Pread
Pwrite
SizeWith
)
]
pub
struct
FatHeader
{
pub
magic
:
u32
pub
nfat_arch
:
u32
}
pub
const
SIZEOF_FAT_HEADER
:
usize
=
8
;
impl
fmt
:
:
Debug
for
FatHeader
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
0x
{
:
x
}
nfat_arch
:
{
}
\
n
"
self
.
magic
self
.
nfat_arch
)
}
}
impl
FatHeader
{
pub
fn
from_bytes
(
bytes
:
&
[
u8
;
SIZEOF_FAT_HEADER
]
)
-
>
FatHeader
{
let
mut
offset
=
0
;
let
magic
=
bytes
.
gread_with
(
&
mut
offset
scroll
:
:
BE
)
.
unwrap
(
)
;
let
nfat_arch
=
bytes
.
gread_with
(
&
mut
offset
scroll
:
:
BE
)
.
unwrap
(
)
;
FatHeader
{
magic
:
magic
nfat_arch
:
nfat_arch
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
pub
fn
from_fd
(
fd
:
&
mut
File
)
-
>
io
:
:
Result
<
FatHeader
>
{
let
mut
header
=
[
0
;
SIZEOF_FAT_HEADER
]
;
try
!
(
fd
.
read
(
&
mut
header
)
)
;
Ok
(
FatHeader
:
:
from_bytes
(
&
header
)
)
}
pub
fn
parse
(
bytes
:
&
[
u8
]
)
-
>
error
:
:
Result
<
FatHeader
>
{
Ok
(
bytes
.
pread_with
:
:
<
FatHeader
>
(
0
scroll
:
:
BE
)
?
)
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Default
Pread
Pwrite
SizeWith
)
]
pub
struct
FatArch
{
pub
cputype
:
u32
pub
cpusubtype
:
u32
pub
offset
:
u32
pub
size
:
u32
pub
align
:
u32
}
pub
const
SIZEOF_FAT_ARCH
:
usize
=
20
;
impl
fmt
:
:
Debug
for
FatArch
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
fmt
.
debug_struct
(
"
FatArch
"
)
.
field
(
"
cputype
"
&
self
.
cputype
(
)
)
.
field
(
"
cmdsize
"
&
self
.
cpusubtype
(
)
)
.
field
(
"
offset
"
&
format_args
!
(
"
{
:
#
x
}
"
&
self
.
offset
)
)
.
field
(
"
size
"
&
self
.
size
)
.
field
(
"
align
"
&
self
.
align
)
.
finish
(
)
}
}
impl
FatArch
{
pub
fn
slice
<
'
a
>
(
&
self
bytes
:
&
'
a
[
u8
]
)
-
>
&
'
a
[
u8
]
{
let
start
=
self
.
offset
as
usize
;
let
end
=
(
self
.
offset
+
self
.
size
)
as
usize
;
&
bytes
[
start
.
.
end
]
}
pub
fn
cputype
(
&
self
)
-
>
CpuType
{
self
.
cputype
}
pub
fn
cpusubtype
(
&
self
)
-
>
CpuSubType
{
self
.
cpusubtype
&
!
CPU_SUBTYPE_MASK
}
pub
fn
cpu_caps
(
&
self
)
-
>
u32
{
(
self
.
cpusubtype
&
CPU_SUBTYPE_MASK
)
>
>
24
}
pub
fn
is_64
(
&
self
)
-
>
bool
{
(
self
.
cputype
&
CPU_ARCH_ABI64
)
=
=
CPU_ARCH_ABI64
}
pub
fn
parse
(
bytes
:
&
[
u8
]
offset
:
usize
)
-
>
error
:
:
Result
<
Self
>
{
let
arch
=
bytes
.
pread_with
:
:
<
FatArch
>
(
offset
scroll
:
:
BE
)
?
;
Ok
(
arch
)
}
}
