use
crate
:
:
error
:
:
Result
;
use
rusqlite
:
:
{
Connection
NO_PARAMS
}
;
use
sql_support
:
:
ConnExt
;
const
VERSION
:
i64
=
1
;
const
CREATE_SCHEMA_SQL
:
&
str
=
include_str
!
(
"
.
.
/
sql
/
create_schema
.
sql
"
)
;
fn
get_current_schema_version
(
db
:
&
Connection
)
-
>
Result
<
i64
>
{
Ok
(
db
.
query_one
:
:
<
i64
>
(
"
PRAGMA
user_version
"
)
?
)
}
pub
fn
init
(
db
:
&
Connection
)
-
>
Result
<
(
)
>
{
let
user_version
=
get_current_schema_version
(
db
)
?
;
if
user_version
=
=
0
{
create
(
db
)
?
;
}
else
if
user_version
!
=
VERSION
{
if
user_version
<
VERSION
{
panic
!
(
"
no
migrations
yet
!
"
)
;
}
else
{
log
:
:
warn
!
(
"
Loaded
future
schema
version
{
}
(
we
only
understand
version
{
}
)
.
\
Optimistically
"
user_version
VERSION
)
;
db
.
execute_batch
(
&
format
!
(
"
PRAGMA
user_version
=
{
}
;
"
VERSION
)
)
?
;
}
}
Ok
(
(
)
)
}
fn
create
(
db
:
&
Connection
)
-
>
Result
<
(
)
>
{
log
:
:
debug
!
(
"
Creating
schema
"
)
;
db
.
execute_batch
(
CREATE_SCHEMA_SQL
)
?
;
db
.
execute
(
&
format
!
(
"
PRAGMA
user_version
=
{
version
}
"
version
=
VERSION
)
NO_PARAMS
)
?
;
Ok
(
(
)
)
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
use
crate
:
:
db
:
:
test
:
:
new_mem_db
;
#
[
test
]
fn
test_create_schema_twice
(
)
{
let
db
=
new_mem_db
(
)
;
let
conn
=
db
.
writer
.
lock
(
)
.
unwrap
(
)
;
conn
.
execute_batch
(
CREATE_SCHEMA_SQL
)
.
expect
(
"
should
allow
running
twice
"
)
;
}
}
