use
cases
:
:
snakecase
:
:
to_snake_case
;
pub
fn
to_foreign_key
(
non_foreign_key_string
:
&
str
)
-
>
String
{
if
non_foreign_key_string
.
contains
(
"
:
:
"
)
{
let
split_string
:
Vec
<
&
str
>
=
non_foreign_key_string
.
split
(
"
:
:
"
)
.
collect
(
)
;
safe_convert
(
split_string
[
split_string
.
len
(
)
-
1
]
)
}
else
{
safe_convert
(
non_foreign_key_string
)
}
}
fn
safe_convert
(
safe_string
:
&
str
)
-
>
String
{
let
snake_cased
:
String
=
to_snake_case
(
safe_string
)
;
if
snake_cased
.
ends_with
(
"
_id
"
)
{
snake_cased
}
else
{
format
!
(
"
{
}
{
}
"
snake_cased
"
_id
"
)
}
}
pub
fn
is_foreign_key
(
test_string
:
&
str
)
-
>
bool
{
to_foreign_key
(
test_string
.
clone
(
)
)
=
=
test_string
}
