pub
fn
ordinalize
(
non_ordinalized_string
:
&
str
)
-
>
String
{
let
chars
:
Vec
<
char
>
=
non_ordinalized_string
.
clone
(
)
.
chars
(
)
.
collect
(
)
;
let
last_number
:
char
=
chars
[
chars
.
len
(
)
-
1
]
;
if
is_ordinalizable
(
last_number
)
{
return
non_ordinalized_string
.
to_owned
(
)
;
}
if
chars
.
len
(
)
>
1
{
if
second_last_number_is_one
(
chars
)
{
return
format
!
(
"
{
}
{
}
"
non_ordinalized_string
"
th
"
)
;
}
else
if
string_contains_decimal
(
non_ordinalized_string
.
to_owned
(
)
)
{
return
non_ordinalized_string
.
to_owned
(
)
;
}
}
match
last_number
{
'
1
'
=
>
format
!
(
"
{
}
{
}
"
non_ordinalized_string
"
st
"
)
'
2
'
=
>
format
!
(
"
{
}
{
}
"
non_ordinalized_string
"
nd
"
)
'
3
'
=
>
format
!
(
"
{
}
{
}
"
non_ordinalized_string
"
rd
"
)
_
=
>
format
!
(
"
{
}
{
}
"
non_ordinalized_string
"
th
"
)
}
}
fn
is_ordinalizable
(
last_number
:
char
)
-
>
bool
{
!
last_number
.
is_numeric
(
)
}
fn
second_last_number_is_one
(
chars
:
Vec
<
char
>
)
-
>
bool
{
let
second_last_number
:
char
=
chars
[
chars
.
len
(
)
-
2
]
;
second_last_number
=
=
'
1
'
}
fn
string_contains_decimal
(
non_ordinalized_string
:
String
)
-
>
bool
{
non_ordinalized_string
.
contains
(
'
.
'
)
}
