extern
crate
futures
;
#
[
macro_use
]
extern
crate
tokio_core
;
use
std
:
:
{
env
io
}
;
use
std
:
:
net
:
:
SocketAddr
;
use
futures
:
:
{
Future
Poll
}
;
use
tokio_core
:
:
net
:
:
UdpSocket
;
use
tokio_core
:
:
reactor
:
:
Core
;
struct
Server
{
socket
:
UdpSocket
buf
:
Vec
<
u8
>
to_send
:
Option
<
(
usize
SocketAddr
)
>
}
impl
Future
for
Server
{
type
Item
=
(
)
;
type
Error
=
io
:
:
Error
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
(
)
io
:
:
Error
>
{
loop
{
if
let
Some
(
(
size
peer
)
)
=
self
.
to_send
{
let
amt
=
try_nb
!
(
self
.
socket
.
send_to
(
&
self
.
buf
[
.
.
size
]
&
peer
)
)
;
println
!
(
"
Echoed
{
}
/
{
}
bytes
to
{
}
"
amt
size
peer
)
;
self
.
to_send
=
None
;
}
self
.
to_send
=
Some
(
try_nb
!
(
self
.
socket
.
recv_from
(
&
mut
self
.
buf
)
)
)
;
}
}
}
fn
main
(
)
{
let
addr
=
env
:
:
args
(
)
.
nth
(
1
)
.
unwrap_or
(
"
127
.
0
.
0
.
1
:
8080
"
.
to_string
(
)
)
;
let
addr
=
addr
.
parse
:
:
<
SocketAddr
>
(
)
.
unwrap
(
)
;
let
mut
l
=
Core
:
:
new
(
)
.
unwrap
(
)
;
let
handle
=
l
.
handle
(
)
;
let
socket
=
UdpSocket
:
:
bind
(
&
addr
&
handle
)
.
unwrap
(
)
;
println
!
(
"
Listening
on
:
{
}
"
addr
)
;
l
.
run
(
Server
{
socket
:
socket
buf
:
vec
!
[
0
;
1024
]
to_send
:
None
}
)
.
unwrap
(
)
;
}
