extern
crate
env_logger
;
extern
crate
futures
;
extern
crate
tokio_core
;
extern
crate
tokio_io
;
use
std
:
:
env
;
use
std
:
:
iter
;
use
std
:
:
net
:
:
SocketAddr
;
use
futures
:
:
Future
;
use
futures
:
:
stream
:
:
{
self
Stream
}
;
use
tokio_io
:
:
IoFuture
;
use
tokio_core
:
:
net
:
:
{
TcpListener
TcpStream
}
;
use
tokio_core
:
:
reactor
:
:
Core
;
fn
main
(
)
{
env_logger
:
:
init
(
)
.
unwrap
(
)
;
let
addr
=
env
:
:
args
(
)
.
nth
(
1
)
.
unwrap_or
(
"
127
.
0
.
0
.
1
:
8080
"
.
to_string
(
)
)
;
let
addr
=
addr
.
parse
:
:
<
SocketAddr
>
(
)
.
unwrap
(
)
;
let
mut
core
=
Core
:
:
new
(
)
.
unwrap
(
)
;
let
handle
=
core
.
handle
(
)
;
let
socket
=
TcpListener
:
:
bind
(
&
addr
&
handle
)
.
unwrap
(
)
;
println
!
(
"
Listening
on
:
{
}
"
addr
)
;
let
server
=
socket
.
incoming
(
)
.
for_each
(
|
(
socket
addr
)
|
{
println
!
(
"
got
a
socket
:
{
}
"
addr
)
;
handle
.
spawn
(
write
(
socket
)
.
or_else
(
|
_
|
Ok
(
(
)
)
)
)
;
Ok
(
(
)
)
}
)
;
core
.
run
(
server
)
.
unwrap
(
)
;
}
fn
write
(
socket
:
TcpStream
)
-
>
IoFuture
<
(
)
>
{
static
BUF
:
&
'
static
[
u8
]
=
&
[
0
;
64
*
1024
]
;
let
iter
=
iter
:
:
repeat
(
(
)
)
;
Box
:
:
new
(
stream
:
:
iter_ok
(
iter
)
.
fold
(
socket
|
socket
(
)
|
{
tokio_io
:
:
io
:
:
write_all
(
socket
BUF
)
.
map
(
|
(
socket
_
)
|
socket
)
}
)
.
map
(
|
_
|
(
)
)
)
}
