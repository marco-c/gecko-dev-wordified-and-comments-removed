use
std
:
:
io
;
use
std
:
:
time
:
:
Instant
;
use
futures
:
:
task
;
use
reactor
:
:
{
Message
Handle
Remote
}
;
pub
struct
TimeoutToken
{
token
:
usize
}
impl
TimeoutToken
{
pub
fn
new
(
at
:
Instant
handle
:
&
Handle
)
-
>
io
:
:
Result
<
TimeoutToken
>
{
match
handle
.
inner
.
upgrade
(
)
{
Some
(
inner
)
=
>
{
let
token
=
inner
.
borrow_mut
(
)
.
add_timeout
(
at
)
;
Ok
(
TimeoutToken
{
token
:
token
}
)
}
None
=
>
Err
(
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
Other
"
event
loop
gone
"
)
)
}
}
pub
fn
update_timeout
(
&
self
handle
:
&
Remote
)
{
handle
.
send
(
Message
:
:
UpdateTimeout
(
self
.
token
task
:
:
park
(
)
)
)
}
pub
fn
reset_timeout
(
&
mut
self
at
:
Instant
handle
:
&
Remote
)
{
handle
.
send
(
Message
:
:
ResetTimeout
(
self
.
token
at
)
)
;
}
pub
fn
cancel_timeout
(
&
self
handle
:
&
Remote
)
{
debug
!
(
"
cancel
timeout
{
}
"
self
.
token
)
;
handle
.
send
(
Message
:
:
CancelTimeout
(
self
.
token
)
)
}
}
