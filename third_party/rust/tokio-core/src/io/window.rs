use
std
:
:
ops
;
pub
struct
Window
<
T
>
{
inner
:
T
range
:
ops
:
:
Range
<
usize
>
}
impl
<
T
:
AsRef
<
[
u8
]
>
>
Window
<
T
>
{
pub
fn
new
(
t
:
T
)
-
>
Window
<
T
>
{
Window
{
range
:
0
.
.
t
.
as_ref
(
)
.
len
(
)
inner
:
t
}
}
pub
fn
get_ref
(
&
self
)
-
>
&
T
{
&
self
.
inner
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
T
{
&
mut
self
.
inner
}
pub
fn
into_inner
(
self
)
-
>
T
{
self
.
inner
}
pub
fn
start
(
&
self
)
-
>
usize
{
self
.
range
.
start
}
pub
fn
end
(
&
self
)
-
>
usize
{
self
.
range
.
end
}
pub
fn
set_start
(
&
mut
self
start
:
usize
)
-
>
&
mut
Window
<
T
>
{
assert
!
(
start
<
=
self
.
inner
.
as_ref
(
)
.
len
(
)
)
;
assert
!
(
start
<
=
self
.
range
.
end
)
;
self
.
range
.
start
=
start
;
self
}
pub
fn
set_end
(
&
mut
self
end
:
usize
)
-
>
&
mut
Window
<
T
>
{
assert
!
(
end
<
=
self
.
inner
.
as_ref
(
)
.
len
(
)
)
;
assert
!
(
self
.
range
.
start
<
=
end
)
;
self
.
range
.
end
=
end
;
self
}
}
impl
<
T
:
AsRef
<
[
u8
]
>
>
AsRef
<
[
u8
]
>
for
Window
<
T
>
{
fn
as_ref
(
&
self
)
-
>
&
[
u8
]
{
&
self
.
inner
.
as_ref
(
)
[
self
.
range
.
start
.
.
self
.
range
.
end
]
}
}
impl
<
T
:
AsMut
<
[
u8
]
>
>
AsMut
<
[
u8
]
>
for
Window
<
T
>
{
fn
as_mut
(
&
mut
self
)
-
>
&
mut
[
u8
]
{
&
mut
self
.
inner
.
as_mut
(
)
[
self
.
range
.
start
.
.
self
.
range
.
end
]
}
}
