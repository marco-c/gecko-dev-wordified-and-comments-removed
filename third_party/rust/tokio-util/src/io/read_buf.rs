use
bytes
:
:
BufMut
;
use
std
:
:
future
:
:
Future
;
use
std
:
:
io
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
use
tokio
:
:
io
:
:
AsyncRead
;
pub
async
fn
read_buf
<
R
B
>
(
read
:
&
mut
R
buf
:
&
mut
B
)
-
>
io
:
:
Result
<
usize
>
where
R
:
AsyncRead
+
Unpin
B
:
BufMut
{
return
ReadBufFn
(
read
buf
)
.
await
;
struct
ReadBufFn
<
'
a
R
B
>
(
&
'
a
mut
R
&
'
a
mut
B
)
;
impl
<
'
a
R
B
>
Future
for
ReadBufFn
<
'
a
R
B
>
where
R
:
AsyncRead
+
Unpin
B
:
BufMut
{
type
Output
=
io
:
:
Result
<
usize
>
;
fn
poll
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Self
:
:
Output
>
{
let
this
=
&
mut
*
self
;
crate
:
:
util
:
:
poll_read_buf
(
Pin
:
:
new
(
this
.
0
)
cx
this
.
1
)
}
}
}
