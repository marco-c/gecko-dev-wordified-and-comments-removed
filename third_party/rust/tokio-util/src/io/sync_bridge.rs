use
std
:
:
io
:
:
{
Read
Write
}
;
use
tokio
:
:
io
:
:
{
AsyncRead
AsyncReadExt
AsyncWrite
AsyncWriteExt
}
;
#
[
derive
(
Debug
)
]
pub
struct
SyncIoBridge
<
T
>
{
src
:
T
rt
:
tokio
:
:
runtime
:
:
Handle
}
impl
<
T
:
AsyncRead
+
Unpin
>
Read
for
SyncIoBridge
<
T
>
{
fn
read
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
std
:
:
io
:
:
Result
<
usize
>
{
let
src
=
&
mut
self
.
src
;
self
.
rt
.
block_on
(
AsyncReadExt
:
:
read
(
src
buf
)
)
}
fn
read_to_end
(
&
mut
self
buf
:
&
mut
Vec
<
u8
>
)
-
>
std
:
:
io
:
:
Result
<
usize
>
{
let
src
=
&
mut
self
.
src
;
self
.
rt
.
block_on
(
src
.
read_to_end
(
buf
)
)
}
fn
read_to_string
(
&
mut
self
buf
:
&
mut
String
)
-
>
std
:
:
io
:
:
Result
<
usize
>
{
let
src
=
&
mut
self
.
src
;
self
.
rt
.
block_on
(
src
.
read_to_string
(
buf
)
)
}
fn
read_exact
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
std
:
:
io
:
:
Result
<
(
)
>
{
let
src
=
&
mut
self
.
src
;
let
_n
=
self
.
rt
.
block_on
(
src
.
read_exact
(
buf
)
)
?
;
Ok
(
(
)
)
}
}
impl
<
T
:
AsyncWrite
+
Unpin
>
Write
for
SyncIoBridge
<
T
>
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
std
:
:
io
:
:
Result
<
usize
>
{
let
src
=
&
mut
self
.
src
;
self
.
rt
.
block_on
(
src
.
write
(
buf
)
)
}
fn
flush
(
&
mut
self
)
-
>
std
:
:
io
:
:
Result
<
(
)
>
{
let
src
=
&
mut
self
.
src
;
self
.
rt
.
block_on
(
src
.
flush
(
)
)
}
fn
write_all
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
std
:
:
io
:
:
Result
<
(
)
>
{
let
src
=
&
mut
self
.
src
;
self
.
rt
.
block_on
(
src
.
write_all
(
buf
)
)
}
fn
write_vectored
(
&
mut
self
bufs
:
&
[
std
:
:
io
:
:
IoSlice
<
'
_
>
]
)
-
>
std
:
:
io
:
:
Result
<
usize
>
{
let
src
=
&
mut
self
.
src
;
self
.
rt
.
block_on
(
src
.
write_vectored
(
bufs
)
)
}
}
impl
<
T
:
AsyncWrite
>
SyncIoBridge
<
T
>
{
pub
fn
is_write_vectored
(
&
self
)
-
>
bool
{
self
.
src
.
is_write_vectored
(
)
}
}
impl
<
T
:
Unpin
>
SyncIoBridge
<
T
>
{
pub
fn
new
(
src
:
T
)
-
>
Self
{
Self
:
:
new_with_handle
(
src
tokio
:
:
runtime
:
:
Handle
:
:
current
(
)
)
}
pub
fn
new_with_handle
(
src
:
T
rt
:
tokio
:
:
runtime
:
:
Handle
)
-
>
Self
{
Self
{
src
rt
}
}
}
