use
bytes
:
:
{
Bytes
BytesMut
}
;
use
futures_core
:
:
stream
:
:
Stream
;
use
pin_project_lite
:
:
pin_project
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
use
tokio
:
:
io
:
:
AsyncRead
;
const
DEFAULT_CAPACITY
:
usize
=
4096
;
pin_project
!
{
/
/
/
Convert
an
[
AsyncRead
]
into
a
[
Stream
]
of
byte
chunks
.
/
/
/
/
/
/
This
stream
is
fused
.
It
performs
the
inverse
operation
of
/
/
/
[
StreamReader
]
.
/
/
/
/
/
/
#
Example
/
/
/
/
/
/
#
[
derive
(
Debug
)
]
pub
struct
ReaderStream
<
R
>
{
#
[
pin
]
reader
:
Option
<
R
>
buf
:
BytesMut
capacity
:
usize
}
}
impl
<
R
:
AsyncRead
>
ReaderStream
<
R
>
{
pub
fn
new
(
reader
:
R
)
-
>
Self
{
ReaderStream
{
reader
:
Some
(
reader
)
buf
:
BytesMut
:
:
new
(
)
capacity
:
DEFAULT_CAPACITY
}
}
pub
fn
with_capacity
(
reader
:
R
capacity
:
usize
)
-
>
Self
{
ReaderStream
{
reader
:
Some
(
reader
)
buf
:
BytesMut
:
:
with_capacity
(
capacity
)
capacity
}
}
}
impl
<
R
:
AsyncRead
>
Stream
for
ReaderStream
<
R
>
{
type
Item
=
std
:
:
io
:
:
Result
<
Bytes
>
;
fn
poll_next
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
>
{
use
crate
:
:
util
:
:
poll_read_buf
;
let
mut
this
=
self
.
as_mut
(
)
.
project
(
)
;
let
reader
=
match
this
.
reader
.
as_pin_mut
(
)
{
Some
(
r
)
=
>
r
None
=
>
return
Poll
:
:
Ready
(
None
)
}
;
if
this
.
buf
.
capacity
(
)
=
=
0
{
this
.
buf
.
reserve
(
*
this
.
capacity
)
;
}
match
poll_read_buf
(
reader
cx
&
mut
this
.
buf
)
{
Poll
:
:
Pending
=
>
Poll
:
:
Pending
Poll
:
:
Ready
(
Err
(
err
)
)
=
>
{
self
.
project
(
)
.
reader
.
set
(
None
)
;
Poll
:
:
Ready
(
Some
(
Err
(
err
)
)
)
}
Poll
:
:
Ready
(
Ok
(
0
)
)
=
>
{
self
.
project
(
)
.
reader
.
set
(
None
)
;
Poll
:
:
Ready
(
None
)
}
Poll
:
:
Ready
(
Ok
(
_
)
)
=
>
{
let
chunk
=
this
.
buf
.
split
(
)
;
Poll
:
:
Ready
(
Some
(
Ok
(
chunk
.
freeze
(
)
)
)
)
}
}
}
}
