use
futures_core
:
:
{
ready
Stream
}
;
use
std
:
:
fmt
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
sync
:
:
Arc
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
use
tokio
:
:
sync
:
:
{
AcquireError
OwnedSemaphorePermit
Semaphore
TryAcquireError
}
;
use
super
:
:
ReusableBoxFuture
;
pub
struct
PollSemaphore
{
semaphore
:
Arc
<
Semaphore
>
permit_fut
:
Option
<
ReusableBoxFuture
<
'
static
Result
<
OwnedSemaphorePermit
AcquireError
>
>
>
}
impl
PollSemaphore
{
pub
fn
new
(
semaphore
:
Arc
<
Semaphore
>
)
-
>
Self
{
Self
{
semaphore
permit_fut
:
None
}
}
pub
fn
close
(
&
self
)
{
self
.
semaphore
.
close
(
)
}
pub
fn
clone_inner
(
&
self
)
-
>
Arc
<
Semaphore
>
{
self
.
semaphore
.
clone
(
)
}
pub
fn
into_inner
(
self
)
-
>
Arc
<
Semaphore
>
{
self
.
semaphore
}
pub
fn
poll_acquire
(
&
mut
self
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
OwnedSemaphorePermit
>
>
{
let
permit_future
=
match
self
.
permit_fut
.
as_mut
(
)
{
Some
(
fut
)
=
>
fut
None
=
>
{
match
Arc
:
:
clone
(
&
self
.
semaphore
)
.
try_acquire_owned
(
)
{
Ok
(
permit
)
=
>
return
Poll
:
:
Ready
(
Some
(
permit
)
)
Err
(
TryAcquireError
:
:
Closed
)
=
>
return
Poll
:
:
Ready
(
None
)
Err
(
TryAcquireError
:
:
NoPermits
)
=
>
{
}
}
let
next_fut
=
Arc
:
:
clone
(
&
self
.
semaphore
)
.
acquire_owned
(
)
;
self
.
permit_fut
.
get_or_insert
(
ReusableBoxFuture
:
:
new
(
next_fut
)
)
}
}
;
let
result
=
ready
!
(
permit_future
.
poll
(
cx
)
)
;
let
next_fut
=
Arc
:
:
clone
(
&
self
.
semaphore
)
.
acquire_owned
(
)
;
permit_future
.
set
(
next_fut
)
;
match
result
{
Ok
(
permit
)
=
>
Poll
:
:
Ready
(
Some
(
permit
)
)
Err
(
_closed
)
=
>
{
self
.
permit_fut
=
None
;
Poll
:
:
Ready
(
None
)
}
}
}
pub
fn
available_permits
(
&
self
)
-
>
usize
{
self
.
semaphore
.
available_permits
(
)
}
pub
fn
add_permits
(
&
self
n
:
usize
)
{
self
.
semaphore
.
add_permits
(
n
)
;
}
}
impl
Stream
for
PollSemaphore
{
type
Item
=
OwnedSemaphorePermit
;
fn
poll_next
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
OwnedSemaphorePermit
>
>
{
Pin
:
:
into_inner
(
self
)
.
poll_acquire
(
cx
)
}
}
impl
Clone
for
PollSemaphore
{
fn
clone
(
&
self
)
-
>
PollSemaphore
{
PollSemaphore
:
:
new
(
self
.
clone_inner
(
)
)
}
}
impl
fmt
:
:
Debug
for
PollSemaphore
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
PollSemaphore
"
)
.
field
(
"
semaphore
"
&
self
.
semaphore
)
.
finish
(
)
}
}
impl
AsRef
<
Semaphore
>
for
PollSemaphore
{
fn
as_ref
(
&
self
)
-
>
&
Semaphore
{
&
*
self
.
semaphore
}
}
