use
crate
:
:
codec
:
:
{
Decoder
Encoder
}
;
use
tokio
:
:
net
:
:
UdpSocket
;
use
bytes
:
:
{
BufMut
BytesMut
}
;
use
futures_core
:
:
{
ready
Stream
}
;
use
futures_sink
:
:
Sink
;
use
std
:
:
io
;
use
std
:
:
net
:
:
{
Ipv4Addr
SocketAddr
SocketAddrV4
}
;
use
std
:
:
pin
:
:
Pin
;
use
std
:
:
task
:
:
{
Context
Poll
}
;
#
[
must_use
=
"
sinks
do
nothing
unless
polled
"
]
#
[
cfg_attr
(
docsrs
doc
(
feature
=
"
codec
-
udp
"
)
)
]
#
[
derive
(
Debug
)
]
pub
struct
UdpFramed
<
C
>
{
socket
:
UdpSocket
codec
:
C
rd
:
BytesMut
wr
:
BytesMut
out_addr
:
SocketAddr
flushed
:
bool
}
impl
<
C
:
Decoder
+
Unpin
>
Stream
for
UdpFramed
<
C
>
{
type
Item
=
Result
<
(
C
:
:
Item
SocketAddr
)
C
:
:
Error
>
;
fn
poll_next
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Option
<
Self
:
:
Item
>
>
{
let
pin
=
self
.
get_mut
(
)
;
pin
.
rd
.
reserve
(
INITIAL_RD_CAPACITY
)
;
let
(
_n
addr
)
=
unsafe
{
let
res
=
{
let
bytes
=
&
mut
*
(
pin
.
rd
.
bytes_mut
(
)
as
*
mut
_
as
*
mut
[
u8
]
)
;
ready
!
(
Pin
:
:
new
(
&
mut
pin
.
socket
)
.
poll_recv_from
(
cx
bytes
)
)
}
;
let
(
n
addr
)
=
res
?
;
pin
.
rd
.
advance_mut
(
n
)
;
(
n
addr
)
}
;
let
frame_res
=
pin
.
codec
.
decode
(
&
mut
pin
.
rd
)
;
pin
.
rd
.
clear
(
)
;
let
frame
=
frame_res
?
;
let
result
=
frame
.
map
(
|
frame
|
Ok
(
(
frame
addr
)
)
)
;
Poll
:
:
Ready
(
result
)
}
}
impl
<
C
:
Encoder
+
Unpin
>
Sink
<
(
C
:
:
Item
SocketAddr
)
>
for
UdpFramed
<
C
>
{
type
Error
=
C
:
:
Error
;
fn
poll_ready
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Result
<
(
)
Self
:
:
Error
>
>
{
if
!
self
.
flushed
{
match
self
.
poll_flush
(
cx
)
?
{
Poll
:
:
Ready
(
(
)
)
=
>
{
}
Poll
:
:
Pending
=
>
return
Poll
:
:
Pending
}
}
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
fn
start_send
(
self
:
Pin
<
&
mut
Self
>
item
:
(
C
:
:
Item
SocketAddr
)
)
-
>
Result
<
(
)
Self
:
:
Error
>
{
let
(
frame
out_addr
)
=
item
;
let
pin
=
self
.
get_mut
(
)
;
pin
.
codec
.
encode
(
frame
&
mut
pin
.
wr
)
?
;
pin
.
out_addr
=
out_addr
;
pin
.
flushed
=
false
;
Ok
(
(
)
)
}
fn
poll_flush
(
mut
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Result
<
(
)
Self
:
:
Error
>
>
{
if
self
.
flushed
{
return
Poll
:
:
Ready
(
Ok
(
(
)
)
)
;
}
let
Self
{
ref
mut
socket
ref
mut
out_addr
ref
mut
wr
.
.
}
=
*
self
;
let
n
=
ready
!
(
socket
.
poll_send_to
(
cx
&
wr
&
out_addr
)
)
?
;
let
wrote_all
=
n
=
=
self
.
wr
.
len
(
)
;
self
.
wr
.
clear
(
)
;
self
.
flushed
=
true
;
let
res
=
if
wrote_all
{
Ok
(
(
)
)
}
else
{
Err
(
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
Other
"
failed
to
write
entire
datagram
to
socket
"
)
.
into
(
)
)
}
;
Poll
:
:
Ready
(
res
)
}
fn
poll_close
(
self
:
Pin
<
&
mut
Self
>
cx
:
&
mut
Context
<
'
_
>
)
-
>
Poll
<
Result
<
(
)
Self
:
:
Error
>
>
{
ready
!
(
self
.
poll_flush
(
cx
)
)
?
;
Poll
:
:
Ready
(
Ok
(
(
)
)
)
}
}
const
INITIAL_RD_CAPACITY
:
usize
=
64
*
1024
;
const
INITIAL_WR_CAPACITY
:
usize
=
8
*
1024
;
impl
<
C
>
UdpFramed
<
C
>
{
pub
fn
new
(
socket
:
UdpSocket
codec
:
C
)
-
>
UdpFramed
<
C
>
{
UdpFramed
{
socket
codec
out_addr
:
SocketAddr
:
:
V4
(
SocketAddrV4
:
:
new
(
Ipv4Addr
:
:
new
(
0
0
0
0
)
0
)
)
rd
:
BytesMut
:
:
with_capacity
(
INITIAL_RD_CAPACITY
)
wr
:
BytesMut
:
:
with_capacity
(
INITIAL_WR_CAPACITY
)
flushed
:
true
}
}
pub
fn
get_ref
(
&
self
)
-
>
&
UdpSocket
{
&
self
.
socket
}
pub
fn
get_mut
(
&
mut
self
)
-
>
&
mut
UdpSocket
{
&
mut
self
.
socket
}
pub
fn
into_inner
(
self
)
-
>
UdpSocket
{
self
.
socket
}
}
