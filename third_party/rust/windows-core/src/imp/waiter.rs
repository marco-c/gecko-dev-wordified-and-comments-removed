use
super
:
:
*
;
pub
struct
Waiter
(
HANDLE
)
;
pub
struct
WaiterSignaler
(
HANDLE
)
;
unsafe
impl
Send
for
WaiterSignaler
{
}
impl
Waiter
{
pub
fn
new
(
)
-
>
crate
:
:
Result
<
(
Waiter
WaiterSignaler
)
>
{
unsafe
{
let
handle
=
CreateEventW
(
core
:
:
ptr
:
:
null
(
)
1
0
core
:
:
ptr
:
:
null
(
)
)
;
if
handle
.
is_null
(
)
{
Err
(
crate
:
:
Error
:
:
from_win32
(
)
)
}
else
{
Ok
(
(
Waiter
(
handle
)
WaiterSignaler
(
handle
)
)
)
}
}
}
}
impl
WaiterSignaler
{
pub
unsafe
fn
signal
(
&
self
)
{
SetEvent
(
self
.
0
)
;
}
}
impl
Drop
for
Waiter
{
fn
drop
(
&
mut
self
)
{
unsafe
{
WaitForSingleObject
(
self
.
0
0xFFFFFFFF
)
;
CloseHandle
(
self
.
0
)
;
}
}
}
