pub
unsafe
trait
Interface
:
Sized
{
type
Vtable
;
#
[
doc
(
hidden
)
]
fn
vtable
(
&
self
)
-
>
&
Self
:
:
Vtable
{
unsafe
{
self
.
assume_vtable
:
:
<
Self
>
(
)
}
}
#
[
doc
(
hidden
)
]
unsafe
fn
assume_vtable
<
T
:
Interface
>
(
&
self
)
-
>
&
T
:
:
Vtable
{
&
*
*
(
self
.
as_raw
(
)
as
*
mut
*
mut
T
:
:
Vtable
)
}
#
[
inline
(
always
)
]
fn
as_raw
(
&
self
)
-
>
*
mut
std
:
:
ffi
:
:
c_void
{
unsafe
{
std
:
:
mem
:
:
transmute_copy
(
self
)
}
}
fn
into_raw
(
self
)
-
>
*
mut
std
:
:
ffi
:
:
c_void
{
let
raw
=
self
.
as_raw
(
)
;
std
:
:
mem
:
:
forget
(
self
)
;
raw
}
unsafe
fn
from_raw
(
raw
:
*
mut
std
:
:
ffi
:
:
c_void
)
-
>
Self
{
std
:
:
mem
:
:
transmute_copy
(
&
raw
)
}
unsafe
fn
from_raw_borrowed
(
raw
:
&
*
mut
std
:
:
ffi
:
:
c_void
)
-
>
Option
<
&
Self
>
{
if
raw
.
is_null
(
)
{
None
}
else
{
Some
(
std
:
:
mem
:
:
transmute_copy
(
&
raw
)
)
}
}
}
#
[
doc
(
hidden
)
]
pub
unsafe
fn
from_raw_borrowed
<
T
:
Interface
>
(
raw
:
&
*
mut
std
:
:
ffi
:
:
c_void
)
-
>
Option
<
&
T
>
{
T
:
:
from_raw_borrowed
(
raw
)
}
