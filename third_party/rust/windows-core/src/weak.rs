use
super
:
:
*
;
use
core
:
:
marker
:
:
PhantomData
;
#
[
derive
(
Clone
PartialEq
Eq
Default
)
]
pub
struct
Weak
<
I
:
Interface
>
(
Option
<
imp
:
:
IWeakReference
>
PhantomData
<
I
>
)
;
impl
<
I
:
Interface
>
Weak
<
I
>
{
pub
fn
new
(
)
-
>
Self
{
Self
(
None
PhantomData
)
}
pub
fn
upgrade
(
&
self
)
-
>
Option
<
I
>
{
self
.
0
.
as_ref
(
)
.
and_then
(
|
inner
|
unsafe
{
inner
.
Resolve
(
)
.
ok
(
)
}
)
}
pub
(
crate
)
fn
downgrade
(
source
:
&
imp
:
:
IWeakReferenceSource
)
-
>
Result
<
Self
>
{
let
reference
=
unsafe
{
source
.
GetWeakReference
(
)
.
ok
(
)
}
;
Ok
(
Self
(
reference
PhantomData
)
)
}
}
unsafe
impl
<
I
:
Interface
>
Send
for
Weak
<
I
>
{
}
unsafe
impl
<
I
:
Interface
>
Sync
for
Weak
<
I
>
{
}
