use
std
:
:
ffi
:
:
OsStr
;
use
std
:
:
fs
:
:
remove_dir_all
;
use
std
:
:
mem
;
use
std
:
:
path
:
:
{
self
Path
PathBuf
}
;
use
std
:
:
{
fmt
io
}
;
use
crate
:
:
error
:
:
IoResultExt
;
use
crate
:
:
Builder
;
#
[
cfg
(
doc
)
]
use
crate
:
:
env
;
pub
fn
tempdir
(
)
-
>
io
:
:
Result
<
TempDir
>
{
TempDir
:
:
new
(
)
}
pub
fn
tempdir_in
<
P
:
AsRef
<
Path
>
>
(
dir
:
P
)
-
>
io
:
:
Result
<
TempDir
>
{
TempDir
:
:
new_in
(
dir
)
}
pub
struct
TempDir
{
path
:
Box
<
Path
>
keep
:
bool
}
impl
TempDir
{
pub
fn
new
(
)
-
>
io
:
:
Result
<
TempDir
>
{
Builder
:
:
new
(
)
.
tempdir
(
)
}
pub
fn
new_in
<
P
:
AsRef
<
Path
>
>
(
dir
:
P
)
-
>
io
:
:
Result
<
TempDir
>
{
Builder
:
:
new
(
)
.
tempdir_in
(
dir
)
}
pub
fn
with_prefix
<
S
:
AsRef
<
OsStr
>
>
(
prefix
:
S
)
-
>
io
:
:
Result
<
TempDir
>
{
Builder
:
:
new
(
)
.
prefix
(
&
prefix
)
.
tempdir
(
)
}
pub
fn
with_suffix
<
S
:
AsRef
<
OsStr
>
>
(
suffix
:
S
)
-
>
io
:
:
Result
<
TempDir
>
{
Builder
:
:
new
(
)
.
suffix
(
&
suffix
)
.
tempdir
(
)
}
pub
fn
with_suffix_in
<
S
:
AsRef
<
OsStr
>
P
:
AsRef
<
Path
>
>
(
suffix
:
S
dir
:
P
)
-
>
io
:
:
Result
<
TempDir
>
{
Builder
:
:
new
(
)
.
suffix
(
&
suffix
)
.
tempdir_in
(
dir
)
}
pub
fn
with_prefix_in
<
S
:
AsRef
<
OsStr
>
P
:
AsRef
<
Path
>
>
(
prefix
:
S
dir
:
P
)
-
>
io
:
:
Result
<
TempDir
>
{
Builder
:
:
new
(
)
.
prefix
(
&
prefix
)
.
tempdir_in
(
dir
)
}
#
[
must_use
]
pub
fn
path
(
&
self
)
-
>
&
path
:
:
Path
{
self
.
path
.
as_ref
(
)
}
#
[
must_use
]
pub
fn
into_path
(
self
)
-
>
PathBuf
{
let
mut
this
=
mem
:
:
ManuallyDrop
:
:
new
(
self
)
;
mem
:
:
replace
(
&
mut
this
.
path
PathBuf
:
:
new
(
)
.
into_boxed_path
(
)
)
.
into
(
)
}
pub
fn
close
(
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
let
result
=
remove_dir_all
(
self
.
path
(
)
)
.
with_err_path
(
|
|
self
.
path
(
)
)
;
self
.
path
=
PathBuf
:
:
new
(
)
.
into_boxed_path
(
)
;
mem
:
:
forget
(
self
)
;
result
}
}
impl
AsRef
<
Path
>
for
TempDir
{
fn
as_ref
(
&
self
)
-
>
&
Path
{
self
.
path
(
)
}
}
impl
fmt
:
:
Debug
for
TempDir
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
TempDir
"
)
.
field
(
"
path
"
&
self
.
path
(
)
)
.
finish
(
)
}
}
impl
Drop
for
TempDir
{
fn
drop
(
&
mut
self
)
{
if
!
self
.
keep
{
let
_
=
remove_dir_all
(
self
.
path
(
)
)
;
}
}
}
pub
(
crate
)
fn
create
(
path
:
PathBuf
permissions
:
Option
<
&
std
:
:
fs
:
:
Permissions
>
keep
:
bool
)
-
>
io
:
:
Result
<
TempDir
>
{
imp
:
:
create
(
path
permissions
keep
)
}
mod
imp
;
