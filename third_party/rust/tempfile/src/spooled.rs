use
crate
:
:
file
:
:
tempfile
;
use
std
:
:
fs
:
:
File
;
use
std
:
:
io
:
:
{
self
Cursor
Read
Seek
SeekFrom
Write
}
;
#
[
derive
(
Debug
)
]
pub
enum
SpooledData
{
InMemory
(
Cursor
<
Vec
<
u8
>
>
)
OnDisk
(
File
)
}
#
[
derive
(
Debug
)
]
pub
struct
SpooledTempFile
{
max_size
:
usize
inner
:
SpooledData
}
#
[
inline
]
pub
fn
spooled_tempfile
(
max_size
:
usize
)
-
>
SpooledTempFile
{
SpooledTempFile
:
:
new
(
max_size
)
}
impl
SpooledTempFile
{
pub
fn
new
(
max_size
:
usize
)
-
>
SpooledTempFile
{
SpooledTempFile
{
max_size
:
max_size
inner
:
SpooledData
:
:
InMemory
(
Cursor
:
:
new
(
Vec
:
:
new
(
)
)
)
}
}
pub
fn
is_rolled
(
&
self
)
-
>
bool
{
match
self
.
inner
{
SpooledData
:
:
InMemory
(
_
)
=
>
false
SpooledData
:
:
OnDisk
(
_
)
=
>
true
}
}
pub
fn
roll
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
if
!
self
.
is_rolled
(
)
{
let
mut
file
=
tempfile
(
)
?
;
if
let
SpooledData
:
:
InMemory
(
ref
mut
cursor
)
=
self
.
inner
{
file
.
write_all
(
cursor
.
get_ref
(
)
)
?
;
file
.
seek
(
SeekFrom
:
:
Start
(
cursor
.
position
(
)
)
)
?
;
}
self
.
inner
=
SpooledData
:
:
OnDisk
(
file
)
;
}
Ok
(
(
)
)
}
pub
fn
set_len
(
&
mut
self
size
:
u64
)
-
>
Result
<
(
)
io
:
:
Error
>
{
if
size
as
usize
>
self
.
max_size
{
self
.
roll
(
)
?
;
}
match
self
.
inner
{
SpooledData
:
:
InMemory
(
ref
mut
cursor
)
=
>
{
cursor
.
get_mut
(
)
.
resize
(
size
as
usize
0
)
;
Ok
(
(
)
)
}
SpooledData
:
:
OnDisk
(
ref
mut
file
)
=
>
file
.
set_len
(
size
)
}
}
pub
fn
into_inner
(
self
)
-
>
SpooledData
{
self
.
inner
}
}
impl
Read
for
SpooledTempFile
{
fn
read
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
match
self
.
inner
{
SpooledData
:
:
InMemory
(
ref
mut
cursor
)
=
>
cursor
.
read
(
buf
)
SpooledData
:
:
OnDisk
(
ref
mut
file
)
=
>
file
.
read
(
buf
)
}
}
}
impl
Write
for
SpooledTempFile
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
let
mut
rolling
=
false
;
if
let
SpooledData
:
:
InMemory
(
ref
mut
cursor
)
=
self
.
inner
{
rolling
=
cursor
.
position
(
)
as
usize
+
buf
.
len
(
)
>
self
.
max_size
;
}
if
rolling
{
self
.
roll
(
)
?
;
}
match
self
.
inner
{
SpooledData
:
:
InMemory
(
ref
mut
cursor
)
=
>
cursor
.
write
(
buf
)
SpooledData
:
:
OnDisk
(
ref
mut
file
)
=
>
file
.
write
(
buf
)
}
}
#
[
inline
]
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
match
self
.
inner
{
SpooledData
:
:
InMemory
(
ref
mut
cursor
)
=
>
cursor
.
flush
(
)
SpooledData
:
:
OnDisk
(
ref
mut
file
)
=
>
file
.
flush
(
)
}
}
}
impl
Seek
for
SpooledTempFile
{
fn
seek
(
&
mut
self
pos
:
SeekFrom
)
-
>
io
:
:
Result
<
u64
>
{
match
self
.
inner
{
SpooledData
:
:
InMemory
(
ref
mut
cursor
)
=
>
cursor
.
seek
(
pos
)
SpooledData
:
:
OnDisk
(
ref
mut
file
)
=
>
file
.
seek
(
pos
)
}
}
}
