#
[
cfg
(
mls_build_async
)
]
use
alloc
:
:
boxed
:
:
Box
;
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
fmt
:
:
{
self
Debug
}
;
use
mls_rs_codec
:
:
{
MlsDecode
MlsEncode
MlsSize
}
;
use
crate
:
:
{
crypto
:
:
HpkeSecretKey
error
:
:
IntoAnyError
}
;
#
[
derive
(
Clone
PartialEq
Eq
MlsEncode
MlsDecode
MlsSize
)
]
#
[
cfg_attr
(
feature
=
"
serde
"
derive
(
serde
:
:
Serialize
serde
:
:
Deserialize
)
)
]
#
[
non_exhaustive
]
pub
struct
KeyPackageData
{
#
[
cfg_attr
(
feature
=
"
serde
"
serde
(
with
=
"
crate
:
:
vec_serde
"
)
)
]
pub
key_package_bytes
:
Vec
<
u8
>
pub
init_key
:
HpkeSecretKey
pub
leaf_node_key
:
HpkeSecretKey
pub
expiration
:
u64
}
impl
Debug
for
KeyPackageData
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
KeyPackageData
"
)
.
field
(
"
key_package_bytes
"
&
crate
:
:
debug
:
:
pretty_bytes
(
&
self
.
key_package_bytes
)
)
.
field
(
"
init_key
"
&
self
.
init_key
)
.
field
(
"
leaf_node_key
"
&
self
.
leaf_node_key
)
.
field
(
"
expiration
"
&
self
.
expiration
)
.
finish
(
)
}
}
impl
KeyPackageData
{
pub
fn
new
(
key_package_bytes
:
Vec
<
u8
>
init_key
:
HpkeSecretKey
leaf_node_key
:
HpkeSecretKey
expiration
:
u64
)
-
>
KeyPackageData
{
Self
{
key_package_bytes
init_key
leaf_node_key
expiration
}
}
}
#
[
cfg_attr
(
not
(
mls_build_async
)
maybe_async
:
:
must_be_sync
)
]
#
[
cfg_attr
(
mls_build_async
maybe_async
:
:
must_be_async
)
]
pub
trait
KeyPackageStorage
:
Send
+
Sync
{
type
Error
:
IntoAnyError
;
async
fn
delete
(
&
mut
self
id
:
&
[
u8
]
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
async
fn
insert
(
&
mut
self
id
:
Vec
<
u8
>
pkg
:
KeyPackageData
)
-
>
Result
<
(
)
Self
:
:
Error
>
;
async
fn
get
(
&
self
id
:
&
[
u8
]
)
-
>
Result
<
Option
<
KeyPackageData
>
Self
:
:
Error
>
;
}
