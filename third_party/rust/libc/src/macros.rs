macro_rules
!
cfg_if
{
(
(
if
#
[
cfg
(
(
meta
:
meta
)
*
)
]
{
(
it
:
item
)
*
}
)
else
*
else
{
(
it2
:
item
)
*
}
)
=
>
{
__cfg_if_items
!
{
(
)
;
(
(
(
(
meta
)
*
)
(
(
it
)
*
)
)
)
*
(
(
)
(
(
it2
)
*
)
)
}
}
}
macro_rules
!
__cfg_if_items
{
(
(
(
not
:
meta
)
*
)
;
)
=
>
{
}
;
(
(
(
not
:
meta
)
*
)
;
(
(
(
m
:
meta
)
*
)
(
(
it
:
item
)
*
)
)
(
rest
:
tt
)
*
)
=
>
{
__cfg_if_apply
!
{
cfg
(
all
(
not
(
any
(
(
not
)
*
)
)
(
m
)
*
)
)
(
it
)
*
}
__cfg_if_items
!
{
(
(
not
)
*
(
m
)
*
)
;
(
rest
)
*
}
}
}
macro_rules
!
__cfg_if_apply
{
(
m
:
meta
(
it
:
item
)
*
)
=
>
{
(
#
[
m
]
it
)
*
}
}
macro_rules
!
s
{
(
(
(
#
[
attr
:
meta
]
)
*
pub
struct
i
:
ident
{
(
field
:
tt
)
*
}
)
*
)
=
>
(
(
__item
!
{
#
[
repr
(
C
)
]
(
#
[
attr
]
)
*
pub
struct
i
{
(
field
)
*
}
}
impl
:
:
dox
:
:
Copy
for
i
{
}
impl
:
:
dox
:
:
Clone
for
i
{
fn
clone
(
&
self
)
-
>
i
{
*
self
}
}
)
*
)
}
macro_rules
!
f
{
(
(
pub
fn
i
:
ident
(
(
arg
:
ident
:
argty
:
ty
)
*
)
-
>
ret
:
ty
{
(
body
:
stmt
)
;
*
}
)
*
)
=
>
(
(
#
[
inline
]
#
[
cfg
(
not
(
dox
)
)
]
pub
unsafe
extern
fn
i
(
(
arg
:
argty
)
*
)
-
>
ret
{
(
body
)
;
*
}
#
[
cfg
(
dox
)
]
#
[
allow
(
dead_code
)
]
pub
unsafe
extern
fn
i
(
(
arg
:
argty
)
*
)
-
>
ret
{
loop
{
}
}
)
*
)
}
macro_rules
!
__item
{
(
i
:
item
)
=
>
(
i
)
}
#
[
cfg
(
test
)
]
mod
tests
{
cfg_if
!
{
if
#
[
cfg
(
test
)
]
{
use
std
:
:
option
:
:
Option
as
Option2
;
fn
works1
(
)
-
>
Option2
<
u32
>
{
Some
(
1
)
}
}
else
{
fn
works1
(
)
-
>
Option
<
u32
>
{
None
}
}
}
cfg_if
!
{
if
#
[
cfg
(
foo
)
]
{
fn
works2
(
)
-
>
bool
{
false
}
}
else
if
#
[
cfg
(
test
)
]
{
fn
works2
(
)
-
>
bool
{
true
}
}
else
{
fn
works2
(
)
-
>
bool
{
false
}
}
}
cfg_if
!
{
if
#
[
cfg
(
foo
)
]
{
fn
works3
(
)
-
>
bool
{
false
}
}
else
{
fn
works3
(
)
-
>
bool
{
true
}
}
}
#
[
test
]
fn
it_works
(
)
{
assert
!
(
works1
(
)
.
is_some
(
)
)
;
assert
!
(
works2
(
)
)
;
assert
!
(
works3
(
)
)
;
}
}
