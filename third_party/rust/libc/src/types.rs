use
core
:
:
mem
:
:
MaybeUninit
;
use
crate
:
:
prelude
:
:
*
;
#
[
allow
(
unused
)
]
#
[
repr
(
transparent
)
]
#
[
derive
(
Clone
Copy
)
]
pub
(
crate
)
struct
Padding
<
T
:
Copy
>
(
MaybeUninit
<
T
>
)
;
impl
<
T
:
Copy
>
Default
for
Padding
<
T
>
{
fn
default
(
)
-
>
Self
{
Self
(
MaybeUninit
:
:
zeroed
(
)
)
}
}
impl
<
T
:
Copy
>
fmt
:
:
Debug
for
Padding
<
T
>
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
let
full_name
=
core
:
:
any
:
:
type_name
:
:
<
Self
>
(
)
;
let
prefix_len
=
full_name
.
find
(
"
Padding
"
)
.
unwrap
(
)
;
f
.
pad
(
&
full_name
[
prefix_len
.
.
]
)
}
}
#
[
cfg
(
target_env
=
"
msvc
"
)
]
#
[
allow
(
unused
)
]
pub
(
crate
)
type
CEnumRepr
=
c_int
;
#
[
cfg
(
not
(
target_env
=
"
msvc
"
)
)
]
#
[
allow
(
unused
)
]
pub
(
crate
)
type
CEnumRepr
=
c_uint
;
