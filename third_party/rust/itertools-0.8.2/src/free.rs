#
[
cfg
(
feature
=
"
use_std
"
)
]
use
std
:
:
fmt
:
:
Display
;
use
std
:
:
iter
:
:
{
self
Zip
}
;
#
[
cfg
(
feature
=
"
use_std
"
)
]
type
VecIntoIter
<
T
>
=
:
:
std
:
:
vec
:
:
IntoIter
<
T
>
;
#
[
cfg
(
feature
=
"
use_std
"
)
]
use
Itertools
;
pub
use
adaptors
:
:
{
interleave
merge
put_back
}
;
#
[
cfg
(
feature
=
"
use_std
"
)
]
pub
use
put_back_n_impl
:
:
put_back_n
;
#
[
cfg
(
feature
=
"
use_std
"
)
]
pub
use
multipeek_impl
:
:
multipeek
;
#
[
cfg
(
feature
=
"
use_std
"
)
]
pub
use
kmerge_impl
:
:
kmerge
;
pub
use
zip_eq_impl
:
:
zip_eq
;
pub
use
merge_join
:
:
merge_join_by
;
#
[
cfg
(
feature
=
"
use_std
"
)
]
pub
use
rciter_impl
:
:
rciter
;
pub
fn
enumerate
<
I
>
(
iterable
:
I
)
-
>
iter
:
:
Enumerate
<
I
:
:
IntoIter
>
where
I
:
IntoIterator
{
iterable
.
into_iter
(
)
.
enumerate
(
)
}
pub
fn
rev
<
I
>
(
iterable
:
I
)
-
>
iter
:
:
Rev
<
I
:
:
IntoIter
>
where
I
:
IntoIterator
I
:
:
IntoIter
:
DoubleEndedIterator
{
iterable
.
into_iter
(
)
.
rev
(
)
}
pub
fn
zip
<
I
J
>
(
i
:
I
j
:
J
)
-
>
Zip
<
I
:
:
IntoIter
J
:
:
IntoIter
>
where
I
:
IntoIterator
J
:
IntoIterator
{
i
.
into_iter
(
)
.
zip
(
j
)
}
pub
fn
chain
<
I
J
>
(
i
:
I
j
:
J
)
-
>
iter
:
:
Chain
<
<
I
as
IntoIterator
>
:
:
IntoIter
<
J
as
IntoIterator
>
:
:
IntoIter
>
where
I
:
IntoIterator
J
:
IntoIterator
<
Item
=
I
:
:
Item
>
{
i
.
into_iter
(
)
.
chain
(
j
)
}
pub
fn
cloned
<
'
a
I
T
:
'
a
>
(
iterable
:
I
)
-
>
iter
:
:
Cloned
<
I
:
:
IntoIter
>
where
I
:
IntoIterator
<
Item
=
&
'
a
T
>
T
:
Clone
{
iterable
.
into_iter
(
)
.
cloned
(
)
}
pub
fn
fold
<
I
B
F
>
(
iterable
:
I
init
:
B
f
:
F
)
-
>
B
where
I
:
IntoIterator
F
:
FnMut
(
B
I
:
:
Item
)
-
>
B
{
iterable
.
into_iter
(
)
.
fold
(
init
f
)
}
pub
fn
all
<
I
F
>
(
iterable
:
I
f
:
F
)
-
>
bool
where
I
:
IntoIterator
F
:
FnMut
(
I
:
:
Item
)
-
>
bool
{
iterable
.
into_iter
(
)
.
all
(
f
)
}
pub
fn
any
<
I
F
>
(
iterable
:
I
f
:
F
)
-
>
bool
where
I
:
IntoIterator
F
:
FnMut
(
I
:
:
Item
)
-
>
bool
{
iterable
.
into_iter
(
)
.
any
(
f
)
}
pub
fn
max
<
I
>
(
iterable
:
I
)
-
>
Option
<
I
:
:
Item
>
where
I
:
IntoIterator
I
:
:
Item
:
Ord
{
iterable
.
into_iter
(
)
.
max
(
)
}
pub
fn
min
<
I
>
(
iterable
:
I
)
-
>
Option
<
I
:
:
Item
>
where
I
:
IntoIterator
I
:
:
Item
:
Ord
{
iterable
.
into_iter
(
)
.
min
(
)
}
#
[
cfg
(
feature
=
"
use_std
"
)
]
pub
fn
join
<
I
>
(
iterable
:
I
sep
:
&
str
)
-
>
String
where
I
:
IntoIterator
I
:
:
Item
:
Display
{
iterable
.
into_iter
(
)
.
join
(
sep
)
}
#
[
cfg
(
feature
=
"
use_std
"
)
]
pub
fn
sorted
<
I
>
(
iterable
:
I
)
-
>
VecIntoIter
<
I
:
:
Item
>
where
I
:
IntoIterator
I
:
:
Item
:
Ord
{
iterable
.
into_iter
(
)
.
sorted
(
)
}
