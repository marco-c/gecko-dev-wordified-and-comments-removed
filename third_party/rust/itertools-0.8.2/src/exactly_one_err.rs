use
std
:
:
iter
:
:
ExactSizeIterator
;
use
size_hint
;
#
[
derive
(
Debug
Clone
)
]
pub
struct
ExactlyOneError
<
I
>
where
I
:
Iterator
{
first_two
:
(
Option
<
I
:
:
Item
>
Option
<
I
:
:
Item
>
)
inner
:
I
}
impl
<
I
>
ExactlyOneError
<
I
>
where
I
:
Iterator
{
pub
(
crate
)
fn
new
(
first_two
:
(
Option
<
I
:
:
Item
>
Option
<
I
:
:
Item
>
)
inner
:
I
)
-
>
Self
{
Self
{
first_two
inner
}
}
}
impl
<
I
>
Iterator
for
ExactlyOneError
<
I
>
where
I
:
Iterator
{
type
Item
=
I
:
:
Item
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
self
.
first_two
.
0
.
take
(
)
.
or_else
(
|
|
self
.
first_two
.
1
.
take
(
)
)
.
or_else
(
|
|
self
.
inner
.
next
(
)
)
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
let
mut
additional_len
=
0
;
if
self
.
first_two
.
0
.
is_some
(
)
{
additional_len
+
=
1
;
}
if
self
.
first_two
.
1
.
is_some
(
)
{
additional_len
+
=
1
;
}
size_hint
:
:
add_scalar
(
self
.
inner
.
size_hint
(
)
additional_len
)
}
}
impl
<
I
>
ExactSizeIterator
for
ExactlyOneError
<
I
>
where
I
:
ExactSizeIterator
{
}
