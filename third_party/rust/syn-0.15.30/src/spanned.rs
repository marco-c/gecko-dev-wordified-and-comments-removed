use
proc_macro2
:
:
{
Span
TokenStream
}
;
use
quote
:
:
ToTokens
;
pub
trait
Spanned
:
private
:
:
Sealed
{
fn
span
(
&
self
)
-
>
Span
;
}
mod
private
{
use
quote
:
:
ToTokens
;
pub
trait
Sealed
{
}
impl
<
T
:
ToTokens
>
Sealed
for
T
{
}
}
impl
<
T
>
Spanned
for
T
where
T
:
ToTokens
{
fn
span
(
&
self
)
-
>
Span
{
join_spans
(
self
.
into_token_stream
(
)
)
}
}
fn
join_spans
(
tokens
:
TokenStream
)
-
>
Span
{
let
mut
iter
=
tokens
.
into_iter
(
)
.
filter_map
(
|
tt
|
{
let
span
=
tt
.
span
(
)
;
let
debug
=
format
!
(
"
{
:
?
}
"
span
)
;
if
debug
.
ends_with
(
"
bytes
(
0
.
.
0
)
"
)
{
None
}
else
{
Some
(
span
)
}
}
)
;
let
mut
joined
=
match
iter
.
next
(
)
{
Some
(
span
)
=
>
span
None
=
>
return
Span
:
:
call_site
(
)
}
;
#
[
cfg
(
procmacro2_semver_exempt
)
]
{
for
next
in
iter
{
if
let
Some
(
span
)
=
joined
.
join
(
next
)
{
joined
=
span
;
}
}
}
#
[
cfg
(
not
(
procmacro2_semver_exempt
)
)
]
{
joined
=
joined
;
}
joined
}
