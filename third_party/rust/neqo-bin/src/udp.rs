#
!
[
expect
(
clippy
:
:
missing_errors_doc
reason
=
"
Passing
up
tokio
errors
.
"
)
]
use
std
:
:
{
io
net
:
:
SocketAddr
}
;
use
neqo_common
:
:
{
qdebug
DatagramBatch
}
;
use
neqo_udp
:
:
{
DatagramIter
RecvBuf
}
;
pub
struct
Socket
{
state
:
quinn_udp
:
:
UdpSocketState
inner
:
tokio
:
:
net
:
:
UdpSocket
}
impl
Socket
{
pub
fn
bind
<
A
:
std
:
:
net
:
:
ToSocketAddrs
>
(
addr
:
A
)
-
>
Result
<
Self
io
:
:
Error
>
{
const
ONE_MB
:
usize
=
1
<
<
20
;
let
socket
=
std
:
:
net
:
:
UdpSocket
:
:
bind
(
addr
)
?
;
let
state
=
quinn_udp
:
:
UdpSocketState
:
:
new
(
(
&
socket
)
.
into
(
)
)
?
;
qdebug
!
(
"
Default
socket
send
buffer
size
is
{
:
?
}
"
state
.
send_buffer_size
(
(
&
socket
)
.
into
(
)
)
)
;
let
recv_buf_before
=
state
.
recv_buffer_size
(
(
&
socket
)
.
into
(
)
)
?
;
if
recv_buf_before
<
ONE_MB
{
state
.
set_recv_buffer_size
(
(
&
socket
)
.
into
(
)
ONE_MB
)
?
;
qdebug
!
(
"
Increasing
socket
recv
buffer
size
from
{
recv_buf_before
}
to
{
ONE_MB
}
now
:
{
:
?
}
"
state
.
recv_buffer_size
(
(
&
socket
)
.
into
(
)
)
)
;
}
else
{
qdebug
!
(
"
Default
socket
receive
buffer
size
is
{
recv_buf_before
}
not
changing
"
)
;
}
Ok
(
Self
{
state
inner
:
tokio
:
:
net
:
:
UdpSocket
:
:
from_std
(
socket
)
?
}
)
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
inner
.
local_addr
(
)
}
pub
async
fn
writable
(
&
self
)
-
>
Result
<
(
)
io
:
:
Error
>
{
self
.
inner
.
writable
(
)
.
await
}
pub
async
fn
readable
(
&
self
)
-
>
Result
<
(
)
io
:
:
Error
>
{
self
.
inner
.
readable
(
)
.
await
}
pub
fn
send
(
&
self
d
:
&
DatagramBatch
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
inner
.
try_io
(
tokio
:
:
io
:
:
Interest
:
:
WRITABLE
|
|
{
neqo_udp
:
:
send_inner
(
&
self
.
state
(
&
self
.
inner
)
.
into
(
)
d
)
}
)
}
pub
fn
recv
<
'
a
>
(
&
self
local_address
:
SocketAddr
recv_buf
:
&
'
a
mut
RecvBuf
)
-
>
Result
<
Option
<
DatagramIter
<
'
a
>
>
io
:
:
Error
>
{
self
.
inner
.
try_io
(
tokio
:
:
io
:
:
Interest
:
:
READABLE
|
|
{
neqo_udp
:
:
recv_inner
(
local_address
&
self
.
state
&
self
.
inner
recv_buf
)
}
)
.
map
(
Some
)
.
or_else
(
|
e
|
{
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
{
Ok
(
None
)
}
else
{
Err
(
e
)
}
}
)
}
pub
fn
max_gso_segments
(
&
self
)
-
>
usize
{
self
.
state
.
max_gso_segments
(
)
}
}
