use
crate
:
:
group
:
:
{
proposal_filter
:
:
ProposalBundle
Roster
}
;
#
[
cfg
(
feature
=
"
private_message
"
)
]
use
crate
:
:
{
group
:
:
{
padding
:
:
PaddingMode
Sender
}
WireFormat
}
;
use
alloc
:
:
boxed
:
:
Box
;
use
core
:
:
convert
:
:
Infallible
;
use
mls_rs_core
:
:
{
error
:
:
IntoAnyError
extension
:
:
ExtensionList
group
:
:
Member
identity
:
:
SigningIdentity
}
;
#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
)
]
pub
enum
CommitDirection
{
Send
Receive
}
#
[
derive
(
Clone
Debug
PartialEq
Eq
)
]
pub
enum
CommitSource
{
ExistingMember
(
Member
)
NewMember
(
SigningIdentity
)
}
#
[
derive
(
Clone
Copy
Debug
PartialEq
Eq
)
]
#
[
non_exhaustive
]
pub
struct
CommitOptions
{
pub
path_required
:
bool
pub
ratchet_tree_extension
:
bool
pub
single_welcome_message
:
bool
pub
allow_external_commit
:
bool
}
impl
Default
for
CommitOptions
{
fn
default
(
)
-
>
Self
{
CommitOptions
{
path_required
:
false
ratchet_tree_extension
:
true
single_welcome_message
:
true
allow_external_commit
:
false
}
}
}
impl
CommitOptions
{
pub
fn
new
(
)
-
>
Self
{
Self
:
:
default
(
)
}
pub
fn
with_path_required
(
self
path_required
:
bool
)
-
>
Self
{
Self
{
path_required
.
.
self
}
}
pub
fn
with_ratchet_tree_extension
(
self
ratchet_tree_extension
:
bool
)
-
>
Self
{
Self
{
ratchet_tree_extension
.
.
self
}
}
pub
fn
with_single_welcome_message
(
self
single_welcome_message
:
bool
)
-
>
Self
{
Self
{
single_welcome_message
.
.
self
}
}
pub
fn
with_allow_external_commit
(
self
allow_external_commit
:
bool
)
-
>
Self
{
Self
{
allow_external_commit
.
.
self
}
}
}
#
[
derive
(
Clone
Copy
Debug
Default
PartialEq
Eq
)
]
#
[
non_exhaustive
]
pub
struct
EncryptionOptions
{
#
[
cfg
(
feature
=
"
private_message
"
)
]
pub
encrypt_control_messages
:
bool
#
[
cfg
(
feature
=
"
private_message
"
)
]
pub
padding_mode
:
PaddingMode
}
#
[
cfg
(
feature
=
"
private_message
"
)
]
impl
EncryptionOptions
{
pub
fn
new
(
encrypt_control_messages
:
bool
padding_mode
:
PaddingMode
)
-
>
Self
{
Self
{
encrypt_control_messages
padding_mode
}
}
pub
(
crate
)
fn
control_wire_format
(
&
self
sender
:
Sender
)
-
>
WireFormat
{
match
sender
{
Sender
:
:
Member
(
_
)
if
self
.
encrypt_control_messages
=
>
WireFormat
:
:
PrivateMessage
_
=
>
WireFormat
:
:
PublicMessage
}
}
}
#
[
cfg_attr
(
not
(
mls_build_async
)
maybe_async
:
:
must_be_sync
)
]
#
[
cfg_attr
(
mls_build_async
maybe_async
:
:
must_be_async
)
]
pub
trait
MlsRules
:
Send
+
Sync
{
type
Error
:
IntoAnyError
;
async
fn
filter_proposals
(
&
self
direction
:
CommitDirection
source
:
CommitSource
current_roster
:
&
Roster
extension_list
:
&
ExtensionList
proposals
:
ProposalBundle
)
-
>
Result
<
ProposalBundle
Self
:
:
Error
>
;
fn
commit_options
(
&
self
new_roster
:
&
Roster
new_extension_list
:
&
ExtensionList
proposals
:
&
ProposalBundle
)
-
>
Result
<
CommitOptions
Self
:
:
Error
>
;
fn
encryption_options
(
&
self
current_roster
:
&
Roster
current_extension_list
:
&
ExtensionList
)
-
>
Result
<
EncryptionOptions
Self
:
:
Error
>
;
}
macro_rules
!
delegate_mls_rules
{
(
implementer
:
ty
)
=
>
{
#
[
cfg_attr
(
not
(
mls_build_async
)
maybe_async
:
:
must_be_sync
)
]
#
[
cfg_attr
(
mls_build_async
maybe_async
:
:
must_be_async
)
]
impl
<
T
:
MlsRules
+
?
Sized
>
MlsRules
for
implementer
{
type
Error
=
T
:
:
Error
;
#
[
cfg_attr
(
not
(
mls_build_async
)
maybe_async
:
:
must_be_sync
)
]
async
fn
filter_proposals
(
&
self
direction
:
CommitDirection
source
:
CommitSource
current_roster
:
&
Roster
extension_list
:
&
ExtensionList
proposals
:
ProposalBundle
)
-
>
Result
<
ProposalBundle
Self
:
:
Error
>
{
(
*
*
self
)
.
filter_proposals
(
direction
source
current_roster
extension_list
proposals
)
.
await
}
fn
commit_options
(
&
self
roster
:
&
Roster
extension_list
:
&
ExtensionList
proposals
:
&
ProposalBundle
)
-
>
Result
<
CommitOptions
Self
:
:
Error
>
{
(
*
*
self
)
.
commit_options
(
roster
extension_list
proposals
)
}
fn
encryption_options
(
&
self
roster
:
&
Roster
extension_list
:
&
ExtensionList
)
-
>
Result
<
EncryptionOptions
Self
:
:
Error
>
{
(
*
*
self
)
.
encryption_options
(
roster
extension_list
)
}
}
}
;
}
delegate_mls_rules
!
(
Box
<
T
>
)
;
delegate_mls_rules
!
(
&
T
)
;
#
[
derive
(
Clone
Debug
Default
)
]
#
[
non_exhaustive
]
pub
struct
DefaultMlsRules
{
pub
commit_options
:
CommitOptions
pub
encryption_options
:
EncryptionOptions
}
impl
DefaultMlsRules
{
pub
fn
new
(
)
-
>
Self
{
Default
:
:
default
(
)
}
pub
fn
with_commit_options
(
self
commit_options
:
CommitOptions
)
-
>
Self
{
Self
{
commit_options
encryption_options
:
self
.
encryption_options
}
}
pub
fn
with_encryption_options
(
self
encryption_options
:
EncryptionOptions
)
-
>
Self
{
Self
{
commit_options
:
self
.
commit_options
encryption_options
}
}
}
#
[
cfg_attr
(
not
(
mls_build_async
)
maybe_async
:
:
must_be_sync
)
]
#
[
cfg_attr
(
mls_build_async
maybe_async
:
:
must_be_async
)
]
impl
MlsRules
for
DefaultMlsRules
{
type
Error
=
Infallible
;
async
fn
filter_proposals
(
&
self
_direction
:
CommitDirection
_source
:
CommitSource
_current_roster
:
&
Roster
_extension_list
:
&
ExtensionList
proposals
:
ProposalBundle
)
-
>
Result
<
ProposalBundle
Self
:
:
Error
>
{
Ok
(
proposals
)
}
fn
commit_options
(
&
self
_
:
&
Roster
_
:
&
ExtensionList
_
:
&
ProposalBundle
)
-
>
Result
<
CommitOptions
Self
:
:
Error
>
{
Ok
(
self
.
commit_options
)
}
fn
encryption_options
(
&
self
_
:
&
Roster
_
:
&
ExtensionList
)
-
>
Result
<
EncryptionOptions
Self
:
:
Error
>
{
Ok
(
self
.
encryption_options
)
}
}
