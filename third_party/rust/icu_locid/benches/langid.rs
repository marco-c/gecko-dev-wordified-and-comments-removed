mod
fixtures
;
mod
helpers
;
use
criterion
:
:
{
black_box
criterion_group
criterion_main
Criterion
}
;
use
icu_locid
:
:
LanguageIdentifier
;
fn
langid_benches
(
c
:
&
mut
Criterion
)
{
let
path
=
"
.
/
benches
/
fixtures
/
langid
.
json
"
;
let
data
:
fixtures
:
:
LocaleList
=
helpers
:
:
read_fixture
(
path
)
.
expect
(
"
Failed
to
read
a
fixture
"
)
;
{
let
mut
group
=
c
.
benchmark_group
(
"
langid
"
)
;
overview
!
(
group
LanguageIdentifier
&
data
.
canonicalized
"
en
-
US
"
)
;
group
.
finish
(
)
;
}
#
[
cfg
(
feature
=
"
bench
"
)
]
{
use
criterion
:
:
BenchmarkId
;
{
let
mut
group
=
c
.
benchmark_group
(
"
langid
/
construct
"
)
;
construct
!
(
group
LanguageIdentifier
"
langid
"
&
data
.
canonicalized
)
;
group
.
finish
(
)
;
}
{
let
mut
group
=
c
.
benchmark_group
(
"
langid
/
to_string
"
)
;
let
langids
:
Vec
<
LanguageIdentifier
>
=
data
.
canonicalized
.
iter
(
)
.
map
(
|
s
|
s
.
parse
(
)
.
unwrap
(
)
)
.
collect
(
)
;
to_string
!
(
group
LanguageIdentifier
"
langid
"
&
langids
)
;
group
.
finish
(
)
;
}
{
let
mut
group
=
c
.
benchmark_group
(
"
langid
/
compare
"
)
;
let
langids
:
Vec
<
LanguageIdentifier
>
=
data
.
canonicalized
.
iter
(
)
.
map
(
|
s
|
s
.
parse
(
)
.
unwrap
(
)
)
.
collect
(
)
;
let
langids2
:
Vec
<
LanguageIdentifier
>
=
data
.
canonicalized
.
iter
(
)
.
map
(
|
s
|
s
.
parse
(
)
.
unwrap
(
)
)
.
collect
(
)
;
compare_struct
!
(
group
LanguageIdentifier
"
langid
"
&
langids
&
langids2
)
;
compare_str
!
(
group
LanguageIdentifier
"
langid
"
&
langids
&
data
.
canonicalized
)
;
group
.
finish
(
)
;
}
{
let
mut
group
=
c
.
benchmark_group
(
"
langid
/
canonicalize
"
)
;
canonicalize
!
(
group
LanguageIdentifier
"
langid
"
&
data
.
casing
)
;
group
.
finish
(
)
;
}
}
}
criterion_group
!
(
benches
langid_benches
)
;
criterion_main
!
(
benches
)
;
