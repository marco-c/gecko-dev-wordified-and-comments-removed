use
super
:
:
Variant
;
use
crate
:
:
helpers
:
:
ShortSlice
;
use
alloc
:
:
vec
:
:
Vec
;
use
core
:
:
ops
:
:
Deref
;
#
[
derive
(
Default
Debug
PartialEq
Eq
Clone
Hash
PartialOrd
Ord
)
]
pub
struct
Variants
(
ShortSlice
<
Variant
>
)
;
impl
Variants
{
#
[
inline
]
pub
const
fn
new
(
)
-
>
Self
{
Self
(
ShortSlice
:
:
new
(
)
)
}
#
[
inline
]
pub
const
fn
from_variant
(
variant
:
Variant
)
-
>
Self
{
Self
(
ShortSlice
:
:
new_single
(
variant
)
)
}
pub
fn
from_vec_unchecked
(
input
:
Vec
<
Variant
>
)
-
>
Self
{
Self
(
ShortSlice
:
:
from
(
input
)
)
}
pub
fn
clear
(
&
mut
self
)
-
>
Self
{
core
:
:
mem
:
:
take
(
self
)
}
pub
(
crate
)
fn
for_each_subtag_str
<
E
F
>
(
&
self
f
:
&
mut
F
)
-
>
Result
<
(
)
E
>
where
F
:
FnMut
(
&
str
)
-
>
Result
<
(
)
E
>
{
self
.
deref
(
)
.
iter
(
)
.
map
(
|
t
|
t
.
as_str
(
)
)
.
try_for_each
(
f
)
}
}
impl_writeable_for_subtag_list
!
(
Variants
"
macos
"
"
posix
"
)
;
impl
Deref
for
Variants
{
type
Target
=
[
Variant
]
;
fn
deref
(
&
self
)
-
>
&
[
Variant
]
{
self
.
0
.
as_slice
(
)
}
}
