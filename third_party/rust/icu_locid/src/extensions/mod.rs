pub
mod
other
;
pub
mod
private
;
pub
mod
transform
;
pub
mod
unicode
;
use
other
:
:
Other
;
use
private
:
:
Private
;
use
transform
:
:
Transform
;
use
unicode
:
:
Unicode
;
use
alloc
:
:
vec
:
:
Vec
;
use
crate
:
:
parser
:
:
ParserError
;
use
crate
:
:
parser
:
:
SubtagIterator
;
#
[
derive
(
Debug
PartialEq
Eq
Clone
Hash
PartialOrd
Ord
Copy
)
]
#
[
non_exhaustive
]
pub
enum
ExtensionType
{
Transform
Unicode
Private
Other
(
u8
)
}
impl
ExtensionType
{
pub
(
crate
)
const
fn
try_from_byte
(
key
:
u8
)
-
>
Result
<
Self
ParserError
>
{
let
key
=
key
.
to_ascii_lowercase
(
)
;
match
key
{
b
'
u
'
=
>
Ok
(
Self
:
:
Unicode
)
b
'
t
'
=
>
Ok
(
Self
:
:
Transform
)
b
'
x
'
=
>
Ok
(
Self
:
:
Private
)
b
'
a
'
.
.
=
b
'
z
'
=
>
Ok
(
Self
:
:
Other
(
key
)
)
_
=
>
Err
(
ParserError
:
:
InvalidExtension
)
}
}
pub
(
crate
)
const
fn
try_from_bytes_manual_slice
(
bytes
:
&
[
u8
]
start
:
usize
end
:
usize
)
-
>
Result
<
Self
ParserError
>
{
if
end
-
start
!
=
1
{
return
Err
(
ParserError
:
:
InvalidExtension
)
;
}
#
[
allow
(
clippy
:
:
indexing_slicing
)
]
Self
:
:
try_from_byte
(
bytes
[
start
]
)
}
}
#
[
derive
(
Debug
Default
PartialEq
Eq
Clone
Hash
)
]
#
[
non_exhaustive
]
pub
struct
Extensions
{
pub
unicode
:
Unicode
pub
transform
:
Transform
pub
private
:
Private
pub
other
:
Vec
<
Other
>
}
impl
Extensions
{
#
[
inline
]
pub
const
fn
new
(
)
-
>
Self
{
Self
{
unicode
:
Unicode
:
:
new
(
)
transform
:
Transform
:
:
new
(
)
private
:
Private
:
:
new
(
)
other
:
Vec
:
:
new
(
)
}
}
#
[
inline
]
pub
const
fn
from_unicode
(
unicode
:
Unicode
)
-
>
Self
{
Self
{
unicode
transform
:
Transform
:
:
new
(
)
private
:
Private
:
:
new
(
)
other
:
Vec
:
:
new
(
)
}
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
unicode
.
is_empty
(
)
&
&
self
.
transform
.
is_empty
(
)
&
&
self
.
private
.
is_empty
(
)
&
&
self
.
other
.
is_empty
(
)
}
pub
fn
retain_by_type
<
F
>
(
&
mut
self
mut
predicate
:
F
)
where
F
:
FnMut
(
ExtensionType
)
-
>
bool
{
if
!
predicate
(
ExtensionType
:
:
Unicode
)
{
self
.
unicode
.
clear
(
)
;
}
if
!
predicate
(
ExtensionType
:
:
Transform
)
{
self
.
transform
.
clear
(
)
;
}
if
!
predicate
(
ExtensionType
:
:
Private
)
{
self
.
private
.
clear
(
)
;
}
self
.
other
.
retain
(
|
o
|
predicate
(
ExtensionType
:
:
Other
(
o
.
get_ext_byte
(
)
)
)
)
;
}
pub
(
crate
)
fn
try_from_iter
(
iter
:
&
mut
SubtagIterator
)
-
>
Result
<
Self
ParserError
>
{
let
mut
unicode
=
None
;
let
mut
transform
=
None
;
let
mut
private
=
None
;
let
mut
other
=
Vec
:
:
new
(
)
;
while
let
Some
(
subtag
)
=
iter
.
next
(
)
{
if
subtag
.
is_empty
(
)
{
return
Err
(
ParserError
:
:
InvalidExtension
)
;
}
match
subtag
.
first
(
)
.
map
(
|
b
|
ExtensionType
:
:
try_from_byte
(
*
b
)
)
{
Some
(
Ok
(
ExtensionType
:
:
Unicode
)
)
=
>
{
if
unicode
.
is_some
(
)
{
return
Err
(
ParserError
:
:
DuplicatedExtension
)
;
}
unicode
=
Some
(
Unicode
:
:
try_from_iter
(
iter
)
?
)
;
}
Some
(
Ok
(
ExtensionType
:
:
Transform
)
)
=
>
{
if
transform
.
is_some
(
)
{
return
Err
(
ParserError
:
:
DuplicatedExtension
)
;
}
transform
=
Some
(
Transform
:
:
try_from_iter
(
iter
)
?
)
;
}
Some
(
Ok
(
ExtensionType
:
:
Private
)
)
=
>
{
if
private
.
is_some
(
)
{
return
Err
(
ParserError
:
:
DuplicatedExtension
)
;
}
private
=
Some
(
Private
:
:
try_from_iter
(
iter
)
?
)
;
}
Some
(
Ok
(
ExtensionType
:
:
Other
(
ext
)
)
)
=
>
{
if
other
.
iter
(
)
.
any
(
|
o
:
&
Other
|
o
.
get_ext_byte
(
)
=
=
ext
)
{
return
Err
(
ParserError
:
:
DuplicatedExtension
)
;
}
let
parsed
=
Other
:
:
try_from_iter
(
ext
iter
)
?
;
if
let
Err
(
idx
)
=
other
.
binary_search
(
&
parsed
)
{
other
.
insert
(
idx
parsed
)
;
}
else
{
return
Err
(
ParserError
:
:
InvalidExtension
)
;
}
}
_
=
>
return
Err
(
ParserError
:
:
InvalidExtension
)
}
}
Ok
(
Self
{
unicode
:
unicode
.
unwrap_or_default
(
)
transform
:
transform
.
unwrap_or_default
(
)
private
:
private
.
unwrap_or_default
(
)
other
}
)
}
pub
(
crate
)
fn
for_each_subtag_str
<
E
F
>
(
&
self
f
:
&
mut
F
)
-
>
Result
<
(
)
E
>
where
F
:
FnMut
(
&
str
)
-
>
Result
<
(
)
E
>
{
let
mut
wrote_tu
=
false
;
self
.
other
.
iter
(
)
.
try_for_each
(
|
other
|
{
if
other
.
get_ext
(
)
>
'
t
'
&
&
!
wrote_tu
{
self
.
transform
.
for_each_subtag_str
(
f
)
?
;
self
.
unicode
.
for_each_subtag_str
(
f
)
?
;
wrote_tu
=
true
;
}
other
.
for_each_subtag_str
(
f
)
?
;
Ok
(
(
)
)
}
)
?
;
if
!
wrote_tu
{
self
.
transform
.
for_each_subtag_str
(
f
)
?
;
self
.
unicode
.
for_each_subtag_str
(
f
)
?
;
}
self
.
private
.
for_each_subtag_str
(
f
)
?
;
Ok
(
(
)
)
}
}
impl_writeable_for_each_subtag_str_no_test
!
(
Extensions
)
;
#
[
test
]
fn
test_writeable
(
)
{
use
crate
:
:
Locale
;
use
writeable
:
:
assert_writeable_eq
;
assert_writeable_eq
!
(
Extensions
:
:
new
(
)
"
"
)
;
assert_writeable_eq
!
(
"
my
-
t
-
my
-
d0
-
zawgyi
"
.
parse
:
:
<
Locale
>
(
)
.
unwrap
(
)
.
extensions
"
t
-
my
-
d0
-
zawgyi
"
)
;
assert_writeable_eq
!
(
"
ar
-
SA
-
u
-
ca
-
islamic
-
civil
"
.
parse
:
:
<
Locale
>
(
)
.
unwrap
(
)
.
extensions
"
u
-
ca
-
islamic
-
civil
"
)
;
assert_writeable_eq
!
(
"
en
-
001
-
x
-
foo
-
bar
"
.
parse
:
:
<
Locale
>
(
)
.
unwrap
(
)
.
extensions
"
x
-
foo
-
bar
"
)
;
assert_writeable_eq
!
(
"
und
-
t
-
m0
-
true
"
.
parse
:
:
<
Locale
>
(
)
.
unwrap
(
)
.
extensions
"
t
-
m0
-
true
"
)
;
assert_writeable_eq
!
(
"
und
-
a
-
foo
-
t
-
foo
-
u
-
foo
-
w
-
foo
-
z
-
foo
-
x
-
foo
"
.
parse
:
:
<
Locale
>
(
)
.
unwrap
(
)
.
extensions
"
a
-
foo
-
t
-
foo
-
u
-
foo
-
w
-
foo
-
z
-
foo
-
x
-
foo
"
)
;
}
