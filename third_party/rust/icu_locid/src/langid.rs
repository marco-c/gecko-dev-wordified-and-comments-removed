use
core
:
:
cmp
:
:
Ordering
;
use
core
:
:
str
:
:
FromStr
;
#
[
allow
(
deprecated
)
]
use
crate
:
:
ordering
:
:
SubtagOrderingResult
;
use
crate
:
:
parser
:
:
{
parse_language_identifier
parse_language_identifier_with_single_variant
ParserError
ParserMode
SubtagIterator
}
;
use
crate
:
:
subtags
;
use
alloc
:
:
string
:
:
String
;
use
writeable
:
:
Writeable
;
#
[
derive
(
Default
PartialEq
Eq
Clone
Hash
)
]
#
[
allow
(
clippy
:
:
exhaustive_structs
)
]
pub
struct
LanguageIdentifier
{
pub
language
:
subtags
:
:
Language
pub
script
:
Option
<
subtags
:
:
Script
>
pub
region
:
Option
<
subtags
:
:
Region
>
pub
variants
:
subtags
:
:
Variants
}
impl
LanguageIdentifier
{
pub
fn
try_from_bytes
(
v
:
&
[
u8
]
)
-
>
Result
<
Self
ParserError
>
{
parse_language_identifier
(
v
ParserMode
:
:
LanguageIdentifier
)
}
#
[
doc
(
hidden
)
]
#
[
allow
(
clippy
:
:
type_complexity
)
]
pub
const
fn
try_from_bytes_with_single_variant
(
v
:
&
[
u8
]
)
-
>
Result
<
(
subtags
:
:
Language
Option
<
subtags
:
:
Script
>
Option
<
subtags
:
:
Region
>
Option
<
subtags
:
:
Variant
>
)
ParserError
>
{
parse_language_identifier_with_single_variant
(
v
ParserMode
:
:
LanguageIdentifier
)
}
pub
fn
try_from_locale_bytes
(
v
:
&
[
u8
]
)
-
>
Result
<
Self
ParserError
>
{
parse_language_identifier
(
v
ParserMode
:
:
Locale
)
}
pub
const
UND
:
Self
=
Self
{
language
:
subtags
:
:
Language
:
:
UND
script
:
None
region
:
None
variants
:
subtags
:
:
Variants
:
:
new
(
)
}
;
pub
fn
canonicalize
<
S
:
AsRef
<
[
u8
]
>
>
(
input
:
S
)
-
>
Result
<
String
ParserError
>
{
let
lang_id
=
Self
:
:
try_from_bytes
(
input
.
as_ref
(
)
)
?
;
Ok
(
lang_id
.
write_to_string
(
)
.
into_owned
(
)
)
}
pub
fn
strict_cmp
(
&
self
other
:
&
[
u8
]
)
-
>
Ordering
{
self
.
writeable_cmp_bytes
(
other
)
}
pub
(
crate
)
fn
as_tuple
(
&
self
)
-
>
(
subtags
:
:
Language
Option
<
subtags
:
:
Script
>
Option
<
subtags
:
:
Region
>
&
subtags
:
:
Variants
)
{
(
self
.
language
self
.
script
self
.
region
&
self
.
variants
)
}
pub
fn
total_cmp
(
&
self
other
:
&
Self
)
-
>
Ordering
{
self
.
as_tuple
(
)
.
cmp
(
&
other
.
as_tuple
(
)
)
}
#
[
deprecated
(
since
=
"
1
.
5
.
0
"
note
=
"
if
you
need
this
please
file
an
issue
"
)
]
#
[
allow
(
deprecated
)
]
pub
fn
strict_cmp_iter
<
'
l
I
>
(
&
self
mut
subtags
:
I
)
-
>
SubtagOrderingResult
<
I
>
where
I
:
Iterator
<
Item
=
&
'
l
[
u8
]
>
{
let
r
=
self
.
for_each_subtag_str
(
&
mut
|
subtag
|
{
if
let
Some
(
other
)
=
subtags
.
next
(
)
{
match
subtag
.
as_bytes
(
)
.
cmp
(
other
)
{
Ordering
:
:
Equal
=
>
Ok
(
(
)
)
not_equal
=
>
Err
(
not_equal
)
}
}
else
{
Err
(
Ordering
:
:
Greater
)
}
}
)
;
match
r
{
Ok
(
_
)
=
>
SubtagOrderingResult
:
:
Subtags
(
subtags
)
Err
(
o
)
=
>
SubtagOrderingResult
:
:
Ordering
(
o
)
}
}
pub
fn
normalizing_eq
(
&
self
other
:
&
str
)
-
>
bool
{
macro_rules
!
subtag_matches
{
(
T
:
ty
iter
:
ident
expected
:
expr
)
=
>
{
iter
.
next
(
)
.
map
(
|
b
|
<
T
>
:
:
try_from_bytes
(
b
)
=
=
Ok
(
expected
)
)
.
unwrap_or
(
false
)
}
;
}
let
mut
iter
=
SubtagIterator
:
:
new
(
other
.
as_bytes
(
)
)
;
if
!
subtag_matches
!
(
subtags
:
:
Language
iter
self
.
language
)
{
return
false
;
}
if
let
Some
(
ref
script
)
=
self
.
script
{
if
!
subtag_matches
!
(
subtags
:
:
Script
iter
*
script
)
{
return
false
;
}
}
if
let
Some
(
ref
region
)
=
self
.
region
{
if
!
subtag_matches
!
(
subtags
:
:
Region
iter
*
region
)
{
return
false
;
}
}
for
variant
in
self
.
variants
.
iter
(
)
{
if
!
subtag_matches
!
(
subtags
:
:
Variant
iter
*
variant
)
{
return
false
;
}
}
iter
.
next
(
)
.
is_none
(
)
}
pub
(
crate
)
fn
for_each_subtag_str
<
E
F
>
(
&
self
f
:
&
mut
F
)
-
>
Result
<
(
)
E
>
where
F
:
FnMut
(
&
str
)
-
>
Result
<
(
)
E
>
{
f
(
self
.
language
.
as_str
(
)
)
?
;
if
let
Some
(
ref
script
)
=
self
.
script
{
f
(
script
.
as_str
(
)
)
?
;
}
if
let
Some
(
ref
region
)
=
self
.
region
{
f
(
region
.
as_str
(
)
)
?
;
}
for
variant
in
self
.
variants
.
iter
(
)
{
f
(
variant
.
as_str
(
)
)
?
;
}
Ok
(
(
)
)
}
pub
(
crate
)
fn
for_each_subtag_str_lowercased
<
E
F
>
(
&
self
f
:
&
mut
F
)
-
>
Result
<
(
)
E
>
where
F
:
FnMut
(
&
str
)
-
>
Result
<
(
)
E
>
{
f
(
self
.
language
.
as_str
(
)
)
?
;
if
let
Some
(
ref
script
)
=
self
.
script
{
f
(
script
.
into_tinystr
(
)
.
to_ascii_lowercase
(
)
.
as_str
(
)
)
?
;
}
if
let
Some
(
ref
region
)
=
self
.
region
{
f
(
region
.
into_tinystr
(
)
.
to_ascii_lowercase
(
)
.
as_str
(
)
)
?
;
}
for
variant
in
self
.
variants
.
iter
(
)
{
f
(
variant
.
as_str
(
)
)
?
;
}
Ok
(
(
)
)
}
pub
(
crate
)
fn
write_lowercased_to
<
W
:
core
:
:
fmt
:
:
Write
+
?
Sized
>
(
&
self
sink
:
&
mut
W
)
-
>
core
:
:
fmt
:
:
Result
{
let
mut
initial
=
true
;
self
.
for_each_subtag_str_lowercased
(
&
mut
|
subtag
|
{
if
initial
{
initial
=
false
;
}
else
{
sink
.
write_char
(
'
-
'
)
?
;
}
sink
.
write_str
(
subtag
)
}
)
}
}
impl
AsRef
<
LanguageIdentifier
>
for
LanguageIdentifier
{
#
[
inline
(
always
)
]
fn
as_ref
(
&
self
)
-
>
&
Self
{
self
}
}
impl
AsMut
<
LanguageIdentifier
>
for
LanguageIdentifier
{
fn
as_mut
(
&
mut
self
)
-
>
&
mut
Self
{
self
}
}
impl
core
:
:
fmt
:
:
Debug
for
LanguageIdentifier
{
fn
fmt
(
&
self
f
:
&
mut
core
:
:
fmt
:
:
Formatter
)
-
>
core
:
:
fmt
:
:
Result
{
core
:
:
fmt
:
:
Display
:
:
fmt
(
&
self
f
)
}
}
impl
FromStr
for
LanguageIdentifier
{
type
Err
=
ParserError
;
fn
from_str
(
source
:
&
str
)
-
>
Result
<
Self
Self
:
:
Err
>
{
Self
:
:
try_from_bytes
(
source
.
as_bytes
(
)
)
}
}
impl_writeable_for_each_subtag_str_no_test
!
(
LanguageIdentifier
selff
selff
.
script
.
is_none
(
)
&
&
selff
.
region
.
is_none
(
)
&
&
selff
.
variants
.
is_empty
(
)
=
>
selff
.
language
.
write_to_string
(
)
)
;
#
[
test
]
fn
test_writeable
(
)
{
use
writeable
:
:
assert_writeable_eq
;
assert_writeable_eq
!
(
LanguageIdentifier
:
:
UND
"
und
"
)
;
assert_writeable_eq
!
(
"
und
-
001
"
.
parse
:
:
<
LanguageIdentifier
>
(
)
.
unwrap
(
)
"
und
-
001
"
)
;
assert_writeable_eq
!
(
"
und
-
Mymr
"
.
parse
:
:
<
LanguageIdentifier
>
(
)
.
unwrap
(
)
"
und
-
Mymr
"
)
;
assert_writeable_eq
!
(
"
my
-
Mymr
-
MM
"
.
parse
:
:
<
LanguageIdentifier
>
(
)
.
unwrap
(
)
"
my
-
Mymr
-
MM
"
)
;
assert_writeable_eq
!
(
"
my
-
Mymr
-
MM
-
posix
"
.
parse
:
:
<
LanguageIdentifier
>
(
)
.
unwrap
(
)
"
my
-
Mymr
-
MM
-
posix
"
)
;
assert_writeable_eq
!
(
"
zh
-
macos
-
posix
"
.
parse
:
:
<
LanguageIdentifier
>
(
)
.
unwrap
(
)
"
zh
-
macos
-
posix
"
)
;
}
impl
From
<
subtags
:
:
Language
>
for
LanguageIdentifier
{
fn
from
(
language
:
subtags
:
:
Language
)
-
>
Self
{
Self
{
language
.
.
Default
:
:
default
(
)
}
}
}
impl
From
<
Option
<
subtags
:
:
Script
>
>
for
LanguageIdentifier
{
fn
from
(
script
:
Option
<
subtags
:
:
Script
>
)
-
>
Self
{
Self
{
script
.
.
Default
:
:
default
(
)
}
}
}
impl
From
<
Option
<
subtags
:
:
Region
>
>
for
LanguageIdentifier
{
fn
from
(
region
:
Option
<
subtags
:
:
Region
>
)
-
>
Self
{
Self
{
region
.
.
Default
:
:
default
(
)
}
}
}
impl
From
<
(
subtags
:
:
Language
Option
<
subtags
:
:
Script
>
Option
<
subtags
:
:
Region
>
)
>
for
LanguageIdentifier
{
fn
from
(
lsr
:
(
subtags
:
:
Language
Option
<
subtags
:
:
Script
>
Option
<
subtags
:
:
Region
>
)
)
-
>
Self
{
Self
{
language
:
lsr
.
0
script
:
lsr
.
1
region
:
lsr
.
2
.
.
Default
:
:
default
(
)
}
}
}
impl
From
<
&
LanguageIdentifier
>
for
(
subtags
:
:
Language
Option
<
subtags
:
:
Script
>
Option
<
subtags
:
:
Region
>
)
{
fn
from
(
langid
:
&
LanguageIdentifier
)
-
>
Self
{
(
langid
.
language
langid
.
script
langid
.
region
)
}
}
