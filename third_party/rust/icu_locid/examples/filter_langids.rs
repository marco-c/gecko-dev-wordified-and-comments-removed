#
!
[
no_main
]
icu_benchmark_macros
:
:
static_setup
!
(
)
;
use
std
:
:
env
;
use
icu_locid
:
:
{
subtags
LanguageIdentifier
}
;
use
writeable
:
:
Writeable
;
const
DEFAULT_INPUT
:
&
str
=
"
de
en
-
us
zh
-
hant
sr
-
cyrl
fr
-
ca
es
-
cl
pl
en
-
latn
-
us
ca
-
valencia
und
-
arab
"
;
fn
filter_input
(
input
:
&
str
)
-
>
String
{
let
langids
=
input
.
split
(
'
'
)
.
filter_map
(
|
s
|
s
.
trim
(
)
.
parse
(
)
.
ok
(
)
)
;
let
en_lang
:
subtags
:
:
Language
=
"
en
"
.
parse
(
)
.
expect
(
"
Failed
to
parse
language
subtag
.
"
)
;
let
en_langids
=
langids
.
filter
(
|
langid
:
&
LanguageIdentifier
|
langid
.
language
=
=
en_lang
)
;
let
en_strs
:
Vec
<
String
>
=
en_langids
.
map
(
|
langid
|
langid
.
write_to_string
(
)
.
into_owned
(
)
)
.
collect
(
)
;
en_strs
.
join
(
"
"
)
}
#
[
no_mangle
]
fn
main
(
_argc
:
isize
_argv
:
*
const
*
const
u8
)
-
>
isize
{
icu_benchmark_macros
:
:
main_setup
!
(
)
;
let
args
:
Vec
<
String
>
=
env
:
:
args
(
)
.
collect
(
)
;
let
input
=
if
let
Some
(
input
)
=
args
.
get
(
1
)
{
input
.
as_str
(
)
}
else
{
DEFAULT_INPUT
}
;
let
_output
=
filter_input
(
input
)
;
#
[
cfg
(
debug_assertions
)
]
println
!
(
"
\
nInput
:
{
input
}
\
nOutput
:
{
_output
}
"
)
;
0
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
const
DEFAULT_OUTPUT
:
&
str
=
"
en
-
US
en
-
Latn
-
US
"
;
#
[
test
]
fn
ensure_default_output
(
)
{
assert_eq
!
(
filter_input
(
DEFAULT_INPUT
)
DEFAULT_OUTPUT
)
;
}
}
