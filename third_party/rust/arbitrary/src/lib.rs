#
!
[
deny
(
bad_style
)
]
#
!
[
deny
(
missing_docs
)
]
#
!
[
deny
(
future_incompatible
)
]
#
!
[
deny
(
nonstandard_style
)
]
#
!
[
deny
(
rust_2018_compatibility
)
]
#
!
[
deny
(
rust_2018_idioms
)
]
#
!
[
deny
(
unused
)
]
mod
error
;
mod
foreign
;
pub
mod
size_hint
;
pub
mod
unstructured
;
#
[
cfg
(
test
)
]
mod
tests
;
pub
use
error
:
:
*
;
#
[
cfg
(
feature
=
"
derive_arbitrary
"
)
]
pub
use
derive_arbitrary
:
:
*
;
#
[
doc
(
inline
)
]
pub
use
unstructured
:
:
Unstructured
;
#
[
derive
(
Debug
Clone
)
]
#
[
non_exhaustive
]
pub
struct
MaxRecursionReached
{
}
impl
core
:
:
fmt
:
:
Display
for
MaxRecursionReached
{
fn
fmt
(
&
self
f
:
&
mut
core
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
core
:
:
fmt
:
:
Result
{
f
.
write_str
(
"
Maximum
recursion
depth
has
been
reached
"
)
}
}
impl
std
:
:
error
:
:
Error
for
MaxRecursionReached
{
}
pub
trait
Arbitrary
<
'
a
>
:
Sized
{
fn
arbitrary
(
u
:
&
mut
Unstructured
<
'
a
>
)
-
>
Result
<
Self
>
;
fn
arbitrary_take_rest
(
mut
u
:
Unstructured
<
'
a
>
)
-
>
Result
<
Self
>
{
Self
:
:
arbitrary
(
&
mut
u
)
}
#
[
inline
]
fn
size_hint
(
depth
:
usize
)
-
>
(
usize
Option
<
usize
>
)
{
let
_
=
depth
;
(
0
None
)
}
#
[
inline
]
fn
try_size_hint
(
depth
:
usize
)
-
>
Result
<
(
usize
Option
<
usize
>
)
MaxRecursionReached
>
{
Ok
(
Self
:
:
size_hint
(
depth
)
)
}
}
#
[
cfg
(
all
(
doctest
feature
=
"
derive
"
)
)
]
pub
struct
CompileFailTests
;
