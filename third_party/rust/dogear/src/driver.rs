use
std
:
:
{
fmt
:
:
Arguments
time
:
:
Duration
}
;
use
log
:
:
{
Level
LevelFilter
Log
}
;
use
crate
:
:
error
:
:
{
ErrorKind
Result
}
;
use
crate
:
:
guid
:
:
Guid
;
use
crate
:
:
merge
:
:
StructureCounts
;
use
crate
:
:
tree
:
:
ProblemCounts
;
pub
trait
AbortSignal
{
fn
aborted
(
&
self
)
-
>
bool
;
fn
err_if_aborted
(
&
self
)
-
>
Result
<
(
)
>
{
if
self
.
aborted
(
)
{
Err
(
ErrorKind
:
:
Abort
.
into
(
)
)
}
else
{
Ok
(
(
)
)
}
}
}
pub
struct
DefaultAbortSignal
;
impl
AbortSignal
for
DefaultAbortSignal
{
fn
aborted
(
&
self
)
-
>
bool
{
false
}
}
pub
enum
TelemetryEvent
{
FetchLocalTree
(
TreeStats
)
FetchRemoteTree
(
TreeStats
)
Merge
(
Duration
StructureCounts
)
Apply
(
Duration
)
}
pub
struct
TreeStats
{
pub
time
:
Duration
pub
items
:
usize
pub
deletions
:
usize
pub
problems
:
ProblemCounts
}
pub
trait
Driver
{
fn
generate_new_guid
(
&
self
invalid_guid
:
&
Guid
)
-
>
Result
<
Guid
>
{
Err
(
ErrorKind
:
:
InvalidGuid
(
invalid_guid
.
clone
(
)
)
.
into
(
)
)
}
fn
max_log_level
(
&
self
)
-
>
LevelFilter
{
log
:
:
max_level
(
)
}
fn
logger
(
&
self
)
-
>
&
dyn
Log
{
log
:
:
logger
(
)
}
fn
record_telemetry_event
(
&
self
_
:
TelemetryEvent
)
{
}
}
pub
struct
DefaultDriver
;
impl
Driver
for
DefaultDriver
{
}
pub
fn
log
<
D
:
Driver
>
(
driver
:
&
D
level
:
Level
args
:
Arguments
<
'
_
>
module_path
:
&
'
static
str
file
:
&
'
static
str
line
:
u32
)
{
let
meta
=
log
:
:
Metadata
:
:
builder
(
)
.
level
(
level
)
.
target
(
module_path
)
.
build
(
)
;
if
driver
.
logger
(
)
.
enabled
(
&
meta
)
{
driver
.
logger
(
)
.
log
(
&
log
:
:
Record
:
:
builder
(
)
.
args
(
args
)
.
metadata
(
meta
)
.
module_path
(
Some
(
module_path
)
)
.
file
(
Some
(
file
)
)
.
line
(
Some
(
line
)
)
.
build
(
)
)
;
}
}
#
[
macro_export
]
macro_rules
!
error
{
(
driver
:
expr
(
args
:
tt
)
+
)
=
>
{
if
log
:
:
Level
:
:
Error
<
=
crate
:
:
Driver
:
:
max_log_level
(
driver
)
{
crate
:
:
log
(
driver
log
:
:
Level
:
:
Error
format_args
!
(
(
args
)
+
)
module_path
!
(
)
file
!
(
)
line
!
(
)
)
;
}
}
}
#
[
macro_export
]
macro_rules
!
warn
{
(
driver
:
expr
(
args
:
tt
)
+
)
=
>
{
if
log
:
:
Level
:
:
Warn
<
=
crate
:
:
Driver
:
:
max_log_level
(
driver
)
{
crate
:
:
log
(
driver
log
:
:
Level
:
:
Warn
format_args
!
(
(
args
)
+
)
module_path
!
(
)
file
!
(
)
line
!
(
)
)
;
}
}
}
#
[
macro_export
]
macro_rules
!
debug
{
(
driver
:
expr
(
args
:
tt
)
+
)
=
>
{
if
log
:
:
Level
:
:
Debug
<
=
crate
:
:
Driver
:
:
max_log_level
(
driver
)
{
crate
:
:
log
(
driver
log
:
:
Level
:
:
Debug
format_args
!
(
(
args
)
+
)
module_path
!
(
)
file
!
(
)
line
!
(
)
)
;
}
}
}
#
[
macro_export
]
macro_rules
!
trace
{
(
driver
:
expr
(
args
:
tt
)
+
)
=
>
{
if
log
:
:
Level
:
:
Trace
<
=
crate
:
:
Driver
:
:
max_log_level
(
driver
)
{
crate
:
:
log
(
driver
log
:
:
Level
:
:
Trace
format_args
!
(
(
args
)
+
)
module_path
!
(
)
file
!
(
)
line
!
(
)
)
;
}
}
}
