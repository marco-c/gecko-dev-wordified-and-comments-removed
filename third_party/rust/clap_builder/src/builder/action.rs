#
[
cfg
(
debug_assertions
)
]
use
crate
:
:
util
:
:
AnyValueId
;
#
[
derive
(
Clone
Debug
)
]
#
[
non_exhaustive
]
#
[
allow
(
missing_copy_implementations
)
]
pub
enum
ArgAction
{
Set
Append
SetTrue
SetFalse
Count
Help
HelpShort
HelpLong
Version
}
impl
ArgAction
{
pub
fn
takes_values
(
&
self
)
-
>
bool
{
match
self
{
Self
:
:
Set
=
>
true
Self
:
:
Append
=
>
true
Self
:
:
SetTrue
=
>
false
Self
:
:
SetFalse
=
>
false
Self
:
:
Count
=
>
false
Self
:
:
Help
=
>
false
Self
:
:
HelpShort
=
>
false
Self
:
:
HelpLong
=
>
false
Self
:
:
Version
=
>
false
}
}
pub
(
crate
)
fn
default_value
(
&
self
)
-
>
Option
<
&
'
static
std
:
:
ffi
:
:
OsStr
>
{
match
self
{
Self
:
:
Set
=
>
None
Self
:
:
Append
=
>
None
Self
:
:
SetTrue
=
>
Some
(
std
:
:
ffi
:
:
OsStr
:
:
new
(
"
false
"
)
)
Self
:
:
SetFalse
=
>
Some
(
std
:
:
ffi
:
:
OsStr
:
:
new
(
"
true
"
)
)
Self
:
:
Count
=
>
Some
(
std
:
:
ffi
:
:
OsStr
:
:
new
(
"
0
"
)
)
Self
:
:
Help
=
>
None
Self
:
:
HelpShort
=
>
None
Self
:
:
HelpLong
=
>
None
Self
:
:
Version
=
>
None
}
}
pub
(
crate
)
fn
default_missing_value
(
&
self
)
-
>
Option
<
&
'
static
std
:
:
ffi
:
:
OsStr
>
{
match
self
{
Self
:
:
Set
=
>
None
Self
:
:
Append
=
>
None
Self
:
:
SetTrue
=
>
Some
(
std
:
:
ffi
:
:
OsStr
:
:
new
(
"
true
"
)
)
Self
:
:
SetFalse
=
>
Some
(
std
:
:
ffi
:
:
OsStr
:
:
new
(
"
false
"
)
)
Self
:
:
Count
=
>
None
Self
:
:
Help
=
>
None
Self
:
:
HelpShort
=
>
None
Self
:
:
HelpLong
=
>
None
Self
:
:
Version
=
>
None
}
}
pub
(
crate
)
fn
default_value_parser
(
&
self
)
-
>
Option
<
super
:
:
ValueParser
>
{
match
self
{
Self
:
:
Set
=
>
None
Self
:
:
Append
=
>
None
Self
:
:
SetTrue
=
>
Some
(
super
:
:
ValueParser
:
:
bool
(
)
)
Self
:
:
SetFalse
=
>
Some
(
super
:
:
ValueParser
:
:
bool
(
)
)
Self
:
:
Count
=
>
Some
(
crate
:
:
value_parser
!
(
u8
)
.
into
(
)
)
Self
:
:
Help
=
>
None
Self
:
:
HelpShort
=
>
None
Self
:
:
HelpLong
=
>
None
Self
:
:
Version
=
>
None
}
}
#
[
cfg
(
debug_assertions
)
]
pub
(
crate
)
fn
value_type_id
(
&
self
)
-
>
Option
<
AnyValueId
>
{
match
self
{
Self
:
:
Set
=
>
None
Self
:
:
Append
=
>
None
Self
:
:
SetTrue
=
>
None
Self
:
:
SetFalse
=
>
None
Self
:
:
Count
=
>
Some
(
AnyValueId
:
:
of
:
:
<
CountType
>
(
)
)
Self
:
:
Help
=
>
None
Self
:
:
HelpShort
=
>
None
Self
:
:
HelpLong
=
>
None
Self
:
:
Version
=
>
None
}
}
}
pub
(
crate
)
type
CountType
=
u8
;
