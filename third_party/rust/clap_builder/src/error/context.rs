#
[
derive
(
Copy
Clone
Debug
PartialEq
Eq
Hash
)
]
#
[
non_exhaustive
]
#
[
cfg
(
feature
=
"
error
-
context
"
)
]
pub
enum
ContextKind
{
InvalidSubcommand
InvalidArg
PriorArg
ValidSubcommand
ValidValue
InvalidValue
ActualNumValues
ExpectedNumValues
MinValues
SuggestedCommand
SuggestedSubcommand
SuggestedArg
SuggestedValue
TrailingArg
Suggested
Usage
Custom
}
impl
ContextKind
{
pub
fn
as_str
(
self
)
-
>
Option
<
&
'
static
str
>
{
match
self
{
Self
:
:
InvalidSubcommand
=
>
Some
(
"
Invalid
Subcommand
"
)
Self
:
:
InvalidArg
=
>
Some
(
"
Invalid
Argument
"
)
Self
:
:
PriorArg
=
>
Some
(
"
Prior
Argument
"
)
Self
:
:
ValidSubcommand
=
>
Some
(
"
Valid
Subcommand
"
)
Self
:
:
ValidValue
=
>
Some
(
"
Valid
Value
"
)
Self
:
:
InvalidValue
=
>
Some
(
"
Invalid
Value
"
)
Self
:
:
ActualNumValues
=
>
Some
(
"
Actual
Number
of
Values
"
)
Self
:
:
ExpectedNumValues
=
>
Some
(
"
Expected
Number
of
Values
"
)
Self
:
:
MinValues
=
>
Some
(
"
Minimum
Number
of
Values
"
)
Self
:
:
SuggestedCommand
=
>
Some
(
"
Suggested
Command
"
)
Self
:
:
SuggestedSubcommand
=
>
Some
(
"
Suggested
Subcommand
"
)
Self
:
:
SuggestedArg
=
>
Some
(
"
Suggested
Argument
"
)
Self
:
:
SuggestedValue
=
>
Some
(
"
Suggested
Value
"
)
Self
:
:
TrailingArg
=
>
Some
(
"
Trailing
Argument
"
)
Self
:
:
Suggested
=
>
Some
(
"
Suggested
"
)
Self
:
:
Usage
=
>
None
Self
:
:
Custom
=
>
None
}
}
}
impl
std
:
:
fmt
:
:
Display
for
ContextKind
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
std
:
:
fmt
:
:
Result
{
self
.
as_str
(
)
.
unwrap_or_default
(
)
.
fmt
(
f
)
}
}
#
[
derive
(
Clone
Debug
PartialEq
Eq
)
]
#
[
non_exhaustive
]
#
[
cfg
(
feature
=
"
error
-
context
"
)
]
pub
enum
ContextValue
{
None
Bool
(
bool
)
String
(
String
)
Strings
(
Vec
<
String
>
)
StyledStr
(
crate
:
:
builder
:
:
StyledStr
)
StyledStrs
(
Vec
<
crate
:
:
builder
:
:
StyledStr
>
)
Number
(
isize
)
}
impl
std
:
:
fmt
:
:
Display
for
ContextValue
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
std
:
:
fmt
:
:
Result
{
match
self
{
Self
:
:
None
=
>
"
"
.
fmt
(
f
)
Self
:
:
Bool
(
v
)
=
>
v
.
fmt
(
f
)
Self
:
:
String
(
v
)
=
>
v
.
fmt
(
f
)
Self
:
:
Strings
(
v
)
=
>
v
.
join
(
"
"
)
.
fmt
(
f
)
Self
:
:
StyledStr
(
v
)
=
>
v
.
fmt
(
f
)
Self
:
:
StyledStrs
(
v
)
=
>
{
for
(
i
v
)
in
v
.
iter
(
)
.
enumerate
(
)
{
if
i
!
=
0
{
"
"
.
fmt
(
f
)
?
;
}
v
.
fmt
(
f
)
?
;
}
Ok
(
(
)
)
}
Self
:
:
Number
(
v
)
=
>
v
.
fmt
(
f
)
}
}
}
