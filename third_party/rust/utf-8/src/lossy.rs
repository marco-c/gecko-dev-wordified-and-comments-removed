use
super
:
:
*
;
pub
struct
LossyDecoder
<
F
:
FnMut
(
&
str
)
>
{
push_str
:
F
incomplete
:
Incomplete
}
impl
<
F
:
FnMut
(
&
str
)
>
LossyDecoder
<
F
>
{
#
[
inline
]
pub
fn
new
(
push_str
:
F
)
-
>
Self
{
LossyDecoder
{
push_str
:
push_str
incomplete
:
Incomplete
{
buffer
:
[
0
0
0
0
]
buffer_len
:
0
}
}
}
pub
fn
feed
(
&
mut
self
mut
input
:
&
[
u8
]
)
{
if
self
.
incomplete
.
buffer_len
>
0
{
match
self
.
incomplete
.
try_complete
(
input
)
{
Some
(
(
Ok
(
s
)
remaining
)
)
=
>
{
(
self
.
push_str
)
(
s
)
;
input
=
remaining
}
Some
(
(
Err
(
_
)
remaining
)
)
=
>
{
(
self
.
push_str
)
(
REPLACEMENT_CHARACTER
)
;
input
=
remaining
}
None
=
>
{
return
}
}
}
loop
{
match
decode
(
input
)
{
Ok
(
s
)
=
>
{
(
self
.
push_str
)
(
s
)
;
return
}
Err
(
DecodeError
:
:
Incomplete
{
valid_prefix
incomplete_suffix
}
)
=
>
{
(
self
.
push_str
)
(
valid_prefix
)
;
self
.
incomplete
=
incomplete_suffix
;
return
}
Err
(
DecodeError
:
:
Invalid
{
valid_prefix
remaining_input
.
.
}
)
=
>
{
(
self
.
push_str
)
(
valid_prefix
)
;
(
self
.
push_str
)
(
REPLACEMENT_CHARACTER
)
;
input
=
remaining_input
}
}
}
}
}
impl
<
F
:
FnMut
(
&
str
)
>
Drop
for
LossyDecoder
<
F
>
{
#
[
inline
]
fn
drop
(
&
mut
self
)
{
if
self
.
incomplete
.
buffer_len
>
0
{
(
self
.
push_str
)
(
REPLACEMENT_CHARACTER
)
}
}
}
