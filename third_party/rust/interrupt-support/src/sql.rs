use
crate
:
:
{
in_shutdown
Interrupted
Interruptee
}
;
use
rusqlite
:
:
{
Connection
InterruptHandle
}
;
use
std
:
:
fmt
;
use
std
:
:
sync
:
:
{
atomic
:
:
{
AtomicUsize
Ordering
}
Arc
}
;
pub
struct
SqlInterruptHandle
{
db_handle
:
InterruptHandle
interrupt_counter
:
Arc
<
AtomicUsize
>
}
impl
SqlInterruptHandle
{
#
[
inline
]
pub
fn
new
(
conn
:
&
Connection
)
-
>
Self
{
Self
{
db_handle
:
conn
.
get_interrupt_handle
(
)
interrupt_counter
:
Arc
:
:
new
(
AtomicUsize
:
:
new
(
0
)
)
}
}
#
[
inline
]
pub
fn
begin_interrupt_scope
(
&
self
)
-
>
Result
<
SqlInterruptScope
Interrupted
>
{
if
in_shutdown
(
)
{
Err
(
Interrupted
)
}
else
{
Ok
(
SqlInterruptScope
:
:
new
(
Arc
:
:
clone
(
&
self
.
interrupt_counter
)
)
)
}
}
#
[
inline
]
pub
fn
interrupt
(
&
self
)
{
self
.
interrupt_counter
.
fetch_add
(
1
Ordering
:
:
Relaxed
)
;
self
.
db_handle
.
interrupt
(
)
;
}
}
impl
fmt
:
:
Debug
for
SqlInterruptHandle
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
f
.
debug_struct
(
"
SqlInterruptHandle
"
)
.
field
(
"
interrupt_counter
"
&
self
.
interrupt_counter
.
load
(
Ordering
:
:
Relaxed
)
)
.
finish
(
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
SqlInterruptScope
{
start_value
:
usize
interrupt_counter
:
Arc
<
AtomicUsize
>
}
impl
SqlInterruptScope
{
fn
new
(
interrupt_counter
:
Arc
<
AtomicUsize
>
)
-
>
Self
{
let
start_value
=
interrupt_counter
.
load
(
Ordering
:
:
Relaxed
)
;
Self
{
start_value
interrupt_counter
}
}
pub
fn
dummy
(
)
-
>
Self
{
Self
:
:
new
(
Arc
:
:
new
(
AtomicUsize
:
:
new
(
0
)
)
)
}
#
[
inline
]
pub
fn
was_interrupted
(
&
self
)
-
>
bool
{
self
.
interrupt_counter
.
load
(
Ordering
:
:
Relaxed
)
!
=
self
.
start_value
}
#
[
inline
]
pub
fn
err_if_interrupted
(
&
self
)
-
>
Result
<
(
)
Interrupted
>
{
if
self
.
was_interrupted
(
)
{
Err
(
Interrupted
)
}
else
{
Ok
(
(
)
)
}
}
}
impl
Interruptee
for
SqlInterruptScope
{
#
[
inline
]
fn
was_interrupted
(
&
self
)
-
>
bool
{
self
.
was_interrupted
(
)
}
}
impl
AsRef
<
SqlInterruptHandle
>
for
SqlInterruptHandle
{
fn
as_ref
(
&
self
)
-
>
&
SqlInterruptHandle
{
self
}
}
