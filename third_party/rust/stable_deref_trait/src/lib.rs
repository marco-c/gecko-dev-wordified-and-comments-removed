#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
[
cfg
(
feature
=
"
std
"
)
]
extern
crate
core
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
extern
crate
alloc
;
use
core
:
:
ops
:
:
Deref
;
pub
unsafe
trait
StableDeref
:
Deref
{
}
pub
unsafe
trait
CloneStableDeref
:
StableDeref
+
Clone
{
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
use
alloc
:
:
boxed
:
:
Box
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
use
alloc
:
:
rc
:
:
Rc
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
use
alloc
:
:
sync
:
:
Arc
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
use
alloc
:
:
vec
:
:
Vec
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
use
alloc
:
:
string
:
:
String
;
#
[
cfg
(
feature
=
"
std
"
)
]
use
std
:
:
ffi
:
:
{
CString
OsString
}
;
#
[
cfg
(
feature
=
"
std
"
)
]
use
std
:
:
path
:
:
PathBuf
;
#
[
cfg
(
feature
=
"
std
"
)
]
use
std
:
:
sync
:
:
{
MutexGuard
RwLockReadGuard
RwLockWriteGuard
}
;
use
core
:
:
cell
:
:
{
Ref
RefMut
}
;
#
[
cfg
(
feature
=
"
alloc
"
)
]
unsafe
impl
<
T
:
?
Sized
>
StableDeref
for
Box
<
T
>
{
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
unsafe
impl
<
T
>
StableDeref
for
Vec
<
T
>
{
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
unsafe
impl
StableDeref
for
String
{
}
#
[
cfg
(
feature
=
"
std
"
)
]
unsafe
impl
StableDeref
for
CString
{
}
#
[
cfg
(
feature
=
"
std
"
)
]
unsafe
impl
StableDeref
for
OsString
{
}
#
[
cfg
(
feature
=
"
std
"
)
]
unsafe
impl
StableDeref
for
PathBuf
{
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
unsafe
impl
<
T
:
?
Sized
>
StableDeref
for
Rc
<
T
>
{
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
unsafe
impl
<
T
:
?
Sized
>
CloneStableDeref
for
Rc
<
T
>
{
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
unsafe
impl
<
T
:
?
Sized
>
StableDeref
for
Arc
<
T
>
{
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
unsafe
impl
<
T
:
?
Sized
>
CloneStableDeref
for
Arc
<
T
>
{
}
unsafe
impl
<
'
a
T
:
?
Sized
>
StableDeref
for
Ref
<
'
a
T
>
{
}
unsafe
impl
<
'
a
T
:
?
Sized
>
StableDeref
for
RefMut
<
'
a
T
>
{
}
#
[
cfg
(
feature
=
"
std
"
)
]
unsafe
impl
<
'
a
T
:
?
Sized
>
StableDeref
for
MutexGuard
<
'
a
T
>
{
}
#
[
cfg
(
feature
=
"
std
"
)
]
unsafe
impl
<
'
a
T
:
?
Sized
>
StableDeref
for
RwLockReadGuard
<
'
a
T
>
{
}
#
[
cfg
(
feature
=
"
std
"
)
]
unsafe
impl
<
'
a
T
:
?
Sized
>
StableDeref
for
RwLockWriteGuard
<
'
a
T
>
{
}
unsafe
impl
<
'
a
T
:
?
Sized
>
StableDeref
for
&
'
a
T
{
}
unsafe
impl
<
'
a
T
:
?
Sized
>
CloneStableDeref
for
&
'
a
T
{
}
unsafe
impl
<
'
a
T
:
?
Sized
>
StableDeref
for
&
'
a
mut
T
{
}
