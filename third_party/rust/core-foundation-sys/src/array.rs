use
libc
:
:
c_void
;
use
base
:
:
{
CFRange
CFIndex
CFAllocatorRef
CFTypeID
}
;
pub
type
CFArrayRetainCallBack
=
*
const
u8
;
pub
type
CFArrayReleaseCallBack
=
*
const
u8
;
pub
type
CFArrayCopyDescriptionCallBack
=
*
const
u8
;
pub
type
CFArrayEqualCallBack
=
*
const
u8
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
)
]
pub
struct
CFArrayCallBacks
{
pub
version
:
CFIndex
pub
retain
:
CFArrayRetainCallBack
pub
release
:
CFArrayReleaseCallBack
pub
copyDescription
:
CFArrayCopyDescriptionCallBack
pub
equal
:
CFArrayEqualCallBack
}
#
[
repr
(
C
)
]
pub
struct
__CFArray
(
c_void
)
;
pub
type
CFArrayRef
=
*
const
__CFArray
;
extern
{
pub
static
kCFTypeArrayCallBacks
:
CFArrayCallBacks
;
pub
fn
CFArrayCreate
(
allocator
:
CFAllocatorRef
values
:
*
const
*
const
c_void
numValues
:
CFIndex
callBacks
:
*
const
CFArrayCallBacks
)
-
>
CFArrayRef
;
pub
fn
CFArrayCreateCopy
(
allocator
:
CFAllocatorRef
theArray
:
CFArrayRef
)
-
>
CFArrayRef
;
pub
fn
CFArrayGetCount
(
theArray
:
CFArrayRef
)
-
>
CFIndex
;
pub
fn
CFArrayGetValues
(
theArray
:
CFArrayRef
range
:
CFRange
values
:
*
mut
*
const
c_void
)
;
pub
fn
CFArrayGetValueAtIndex
(
theArray
:
CFArrayRef
idx
:
CFIndex
)
-
>
*
const
c_void
;
pub
fn
CFArrayGetTypeID
(
)
-
>
CFTypeID
;
}
