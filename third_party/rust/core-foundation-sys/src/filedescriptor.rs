use
std
:
:
os
:
:
raw
:
:
{
c_int
c_void
}
;
use
crate
:
:
base
:
:
{
Boolean
CFAllocatorRef
CFIndex
CFOptionFlags
CFTypeID
}
;
use
crate
:
:
runloop
:
:
CFRunLoopSourceRef
;
use
crate
:
:
string
:
:
CFStringRef
;
pub
type
CFFileDescriptorNativeDescriptor
=
c_int
;
#
[
repr
(
C
)
]
pub
struct
__CFFileDescriptor
(
c_void
)
;
pub
type
CFFileDescriptorRef
=
*
mut
__CFFileDescriptor
;
pub
const
kCFFileDescriptorReadCallBack
:
CFOptionFlags
=
1
<
<
0
;
pub
const
kCFFileDescriptorWriteCallBack
:
CFOptionFlags
=
1
<
<
1
;
pub
type
CFFileDescriptorCallBack
=
extern
"
C
"
fn
(
f
:
CFFileDescriptorRef
callBackTypes
:
CFOptionFlags
info
:
*
mut
c_void
)
;
#
[
repr
(
C
)
]
#
[
derive
(
Debug
Clone
Copy
)
]
pub
struct
CFFileDescriptorContext
{
pub
version
:
CFIndex
pub
info
:
*
mut
c_void
pub
retain
:
Option
<
extern
"
C
"
fn
(
info
:
*
const
c_void
)
-
>
*
const
c_void
>
pub
release
:
Option
<
extern
"
C
"
fn
(
info
:
*
const
c_void
)
>
pub
copyDescription
:
Option
<
extern
"
C
"
fn
(
info
:
*
const
c_void
)
-
>
CFStringRef
>
}
extern
"
C
"
{
pub
fn
CFFileDescriptorCreate
(
allocator
:
CFAllocatorRef
fd
:
CFFileDescriptorNativeDescriptor
closeOnInvalidate
:
Boolean
callout
:
CFFileDescriptorCallBack
context
:
*
const
CFFileDescriptorContext
)
-
>
CFFileDescriptorRef
;
pub
fn
CFFileDescriptorGetNativeDescriptor
(
f
:
CFFileDescriptorRef
)
-
>
CFFileDescriptorNativeDescriptor
;
pub
fn
CFFileDescriptorIsValid
(
f
:
CFFileDescriptorRef
)
-
>
Boolean
;
pub
fn
CFFileDescriptorGetContext
(
f
:
CFFileDescriptorRef
context
:
*
mut
CFFileDescriptorContext
)
;
pub
fn
CFFileDescriptorInvalidate
(
f
:
CFFileDescriptorRef
)
;
pub
fn
CFFileDescriptorEnableCallBacks
(
f
:
CFFileDescriptorRef
callBackTypes
:
CFOptionFlags
)
;
pub
fn
CFFileDescriptorDisableCallBacks
(
f
:
CFFileDescriptorRef
callBackTypes
:
CFOptionFlags
)
;
pub
fn
CFFileDescriptorCreateRunLoopSource
(
allocator
:
CFAllocatorRef
f
:
CFFileDescriptorRef
order
:
CFIndex
)
-
>
CFRunLoopSourceRef
;
pub
fn
CFFileDescriptorGetTypeID
(
)
-
>
CFTypeID
;
}
