use
std
:
:
os
:
:
raw
:
:
c_void
;
use
base
:
:
{
CFTypeID
CFAllocatorRef
}
;
use
url
:
:
CFURLRef
;
use
dictionary
:
:
CFDictionaryRef
;
use
string
:
:
CFStringRef
;
#
[
repr
(
C
)
]
pub
struct
__CFBundle
(
c_void
)
;
pub
type
CFBundleRef
=
*
mut
__CFBundle
;
extern
{
pub
fn
CFBundleCreate
(
allocator
:
CFAllocatorRef
bundleURL
:
CFURLRef
)
-
>
CFBundleRef
;
pub
fn
CFBundleGetBundleWithIdentifier
(
bundleID
:
CFStringRef
)
-
>
CFBundleRef
;
pub
fn
CFBundleGetFunctionPointerForName
(
bundle
:
CFBundleRef
function_name
:
CFStringRef
)
-
>
*
const
c_void
;
pub
fn
CFBundleGetMainBundle
(
)
-
>
CFBundleRef
;
pub
fn
CFBundleGetInfoDictionary
(
bundle
:
CFBundleRef
)
-
>
CFDictionaryRef
;
pub
fn
CFBundleGetTypeID
(
)
-
>
CFTypeID
;
pub
fn
CFBundleCopyExecutableURL
(
bundle
:
CFBundleRef
)
-
>
CFURLRef
;
pub
fn
CFBundleCopyPrivateFrameworksURL
(
bundle
:
CFBundleRef
)
-
>
CFURLRef
;
pub
fn
CFBundleCopySharedSupportURL
(
bundle
:
CFBundleRef
)
-
>
CFURLRef
;
pub
fn
CFBundleCopyBundleURL
(
bundle
:
CFBundleRef
)
-
>
CFURLRef
;
pub
fn
CFBundleCopyResourcesDirectoryURL
(
bundle
:
CFBundleRef
)
-
>
CFURLRef
;
}
