use
libc
:
:
{
c_void
}
;
use
base
:
:
{
CFAllocatorRef
CFHashCode
CFIndex
CFTypeID
Boolean
}
;
use
string
:
:
CFStringRef
;
pub
type
CFDictionaryApplierFunction
=
extern
"
C
"
fn
(
key
:
*
const
c_void
value
:
*
const
c_void
context
:
*
mut
c_void
)
;
pub
type
CFDictionaryRetainCallBack
=
extern
"
C
"
fn
(
allocator
:
CFAllocatorRef
value
:
*
const
c_void
)
-
>
*
const
c_void
;
pub
type
CFDictionaryReleaseCallBack
=
extern
"
C
"
fn
(
allocator
:
CFAllocatorRef
value
:
*
const
c_void
)
;
pub
type
CFDictionaryCopyDescriptionCallBack
=
extern
"
C
"
fn
(
value
:
*
const
c_void
)
-
>
CFStringRef
;
pub
type
CFDictionaryEqualCallBack
=
extern
"
C
"
fn
(
value1
:
*
const
c_void
value2
:
*
const
c_void
)
-
>
Boolean
;
pub
type
CFDictionaryHashCallBack
=
extern
"
C
"
fn
(
value
:
*
const
c_void
)
-
>
CFHashCode
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
)
]
pub
struct
CFDictionaryKeyCallBacks
{
pub
version
:
CFIndex
pub
retain
:
CFDictionaryRetainCallBack
pub
release
:
CFDictionaryReleaseCallBack
pub
copyDescription
:
CFDictionaryCopyDescriptionCallBack
pub
equal
:
CFDictionaryEqualCallBack
pub
hash
:
CFDictionaryHashCallBack
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
)
]
pub
struct
CFDictionaryValueCallBacks
{
pub
version
:
CFIndex
pub
retain
:
CFDictionaryRetainCallBack
pub
release
:
CFDictionaryReleaseCallBack
pub
copyDescription
:
CFDictionaryCopyDescriptionCallBack
pub
equal
:
CFDictionaryEqualCallBack
}
#
[
repr
(
C
)
]
pub
struct
__CFDictionary
(
c_void
)
;
pub
type
CFDictionaryRef
=
*
const
__CFDictionary
;
pub
type
CFMutableDictionaryRef
=
*
const
__CFDictionary
;
extern
{
pub
static
kCFTypeDictionaryKeyCallBacks
:
CFDictionaryKeyCallBacks
;
pub
static
kCFTypeDictionaryValueCallBacks
:
CFDictionaryValueCallBacks
;
pub
fn
CFDictionaryContainsKey
(
theDict
:
CFDictionaryRef
key
:
*
const
c_void
)
-
>
Boolean
;
pub
fn
CFDictionaryCreate
(
allocator
:
CFAllocatorRef
keys
:
*
const
*
const
c_void
values
:
*
const
*
const
c_void
numValues
:
CFIndex
keyCallBacks
:
*
const
CFDictionaryKeyCallBacks
valueCallBacks
:
*
const
CFDictionaryValueCallBacks
)
-
>
CFDictionaryRef
;
pub
fn
CFDictionaryGetCount
(
theDict
:
CFDictionaryRef
)
-
>
CFIndex
;
pub
fn
CFDictionaryGetTypeID
(
)
-
>
CFTypeID
;
pub
fn
CFDictionaryGetValueIfPresent
(
theDict
:
CFDictionaryRef
key
:
*
const
c_void
value
:
*
mut
*
const
c_void
)
-
>
Boolean
;
pub
fn
CFDictionaryApplyFunction
(
theDict
:
CFDictionaryRef
applier
:
CFDictionaryApplierFunction
context
:
*
mut
c_void
)
;
pub
fn
CFDictionarySetValue
(
theDict
:
CFMutableDictionaryRef
key
:
*
const
c_void
value
:
*
const
c_void
)
;
pub
fn
CFDictionaryGetKeysAndValues
(
theDict
:
CFDictionaryRef
keys
:
*
mut
*
const
c_void
values
:
*
mut
*
const
c_void
)
;
}
