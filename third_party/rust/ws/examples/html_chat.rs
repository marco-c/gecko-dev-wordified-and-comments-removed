extern
crate
ws
;
use
ws
:
:
{
listen
Handler
Message
Request
Response
Result
Sender
}
;
static
INDEX_HTML
:
&
'
static
[
u8
]
=
br
#
"
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
utf
-
8
"
>
<
/
head
>
<
body
>
<
pre
id
=
"
messages
"
>
<
/
pre
>
<
form
id
=
"
form
"
>
<
input
type
=
"
text
"
id
=
"
msg
"
>
<
input
type
=
"
submit
"
value
=
"
Send
"
>
<
/
form
>
<
script
>
var
socket
=
new
WebSocket
(
"
ws
:
/
/
"
+
window
.
location
.
host
+
"
/
ws
"
)
;
socket
.
onmessage
=
function
(
event
)
{
var
messages
=
document
.
getElementById
(
"
messages
"
)
;
messages
.
append
(
event
.
data
+
"
\
n
"
)
;
}
;
var
form
=
document
.
getElementById
(
"
form
"
)
;
form
.
addEventListener
(
'
submit
'
function
(
event
)
{
event
.
preventDefault
(
)
;
var
input
=
document
.
getElementById
(
"
msg
"
)
;
socket
.
send
(
input
.
value
)
;
input
.
value
=
"
"
;
}
)
;
<
/
script
>
<
/
body
>
<
/
html
>
"
#
;
struct
Server
{
out
:
Sender
}
impl
Handler
for
Server
{
fn
on_request
(
&
mut
self
req
:
&
Request
)
-
>
Result
<
(
Response
)
>
{
match
req
.
resource
(
)
{
"
/
ws
"
=
>
Response
:
:
from_request
(
req
)
"
/
"
=
>
Ok
(
Response
:
:
new
(
200
"
OK
"
INDEX_HTML
.
to_vec
(
)
)
)
_
=
>
Ok
(
Response
:
:
new
(
404
"
Not
Found
"
b
"
404
-
Not
Found
"
.
to_vec
(
)
)
)
}
}
fn
on_message
(
&
mut
self
msg
:
Message
)
-
>
Result
<
(
)
>
{
self
.
out
.
broadcast
(
msg
)
}
}
fn
main
(
)
{
listen
(
"
127
.
0
.
0
.
1
:
8000
"
|
out
|
Server
{
out
}
)
.
unwrap
(
)
}
