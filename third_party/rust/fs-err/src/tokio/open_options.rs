use
crate
:
:
errors
:
:
{
Error
ErrorKind
}
;
use
crate
:
:
tokio
:
:
File
;
use
std
:
:
io
;
use
std
:
:
path
:
:
Path
;
use
tokio
:
:
fs
:
:
OpenOptions
as
TokioOpenOptions
;
#
[
derive
(
Clone
Debug
Default
)
]
#
[
cfg_attr
(
docsrs
doc
(
cfg
(
feature
=
"
tokio
"
)
)
)
]
pub
struct
OpenOptions
{
tokio
:
TokioOpenOptions
}
impl
OpenOptions
{
pub
fn
new
(
)
-
>
OpenOptions
{
OpenOptions
{
tokio
:
TokioOpenOptions
:
:
new
(
)
}
}
pub
fn
read
(
&
mut
self
read
:
bool
)
-
>
&
mut
OpenOptions
{
self
.
tokio
.
read
(
read
)
;
self
}
pub
fn
write
(
&
mut
self
write
:
bool
)
-
>
&
mut
OpenOptions
{
self
.
tokio
.
write
(
write
)
;
self
}
pub
fn
append
(
&
mut
self
append
:
bool
)
-
>
&
mut
OpenOptions
{
self
.
tokio
.
append
(
append
)
;
self
}
pub
fn
truncate
(
&
mut
self
truncate
:
bool
)
-
>
&
mut
OpenOptions
{
self
.
tokio
.
truncate
(
truncate
)
;
self
}
pub
fn
create
(
&
mut
self
create
:
bool
)
-
>
&
mut
OpenOptions
{
self
.
tokio
.
create
(
create
)
;
self
}
pub
fn
create_new
(
&
mut
self
create_new
:
bool
)
-
>
&
mut
OpenOptions
{
self
.
tokio
.
create_new
(
create_new
)
;
self
}
pub
async
fn
open
(
&
self
path
:
impl
AsRef
<
Path
>
)
-
>
io
:
:
Result
<
File
>
{
let
path
=
path
.
as_ref
(
)
;
self
.
tokio
.
open
(
path
)
.
await
.
map
(
|
f
|
File
:
:
from_parts
(
f
path
)
)
.
map_err
(
|
err
|
Error
:
:
build
(
err
ErrorKind
:
:
OpenFile
path
)
)
}
}
#
[
cfg
(
unix
)
]
impl
OpenOptions
{
pub
fn
mode
(
&
mut
self
mode
:
u32
)
-
>
&
mut
OpenOptions
{
self
.
tokio
.
mode
(
mode
)
;
self
}
pub
fn
custom_flags
(
&
mut
self
flags
:
i32
)
-
>
&
mut
OpenOptions
{
self
.
tokio
.
custom_flags
(
flags
)
;
self
}
}
impl
From
<
std
:
:
fs
:
:
OpenOptions
>
for
OpenOptions
{
fn
from
(
std
:
std
:
:
fs
:
:
OpenOptions
)
-
>
Self
{
OpenOptions
{
tokio
:
std
.
into
(
)
}
}
}
impl
From
<
TokioOpenOptions
>
for
OpenOptions
{
fn
from
(
tokio
:
TokioOpenOptions
)
-
>
Self
{
OpenOptions
{
tokio
}
}
}
