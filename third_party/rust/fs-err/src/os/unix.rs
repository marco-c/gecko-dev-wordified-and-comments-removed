pub
mod
fs
{
use
std
:
:
io
;
use
std
:
:
path
:
:
Path
;
use
crate
:
:
SourceDestError
;
use
crate
:
:
SourceDestErrorKind
;
pub
fn
symlink
<
P
:
AsRef
<
Path
>
Q
:
AsRef
<
Path
>
>
(
src
:
P
dst
:
Q
)
-
>
io
:
:
Result
<
(
)
>
{
let
src
=
src
.
as_ref
(
)
;
let
dst
=
dst
.
as_ref
(
)
;
std
:
:
os
:
:
unix
:
:
fs
:
:
symlink
(
src
dst
)
.
map_err
(
|
err
|
SourceDestError
:
:
build
(
err
SourceDestErrorKind
:
:
Symlink
src
dst
)
)
}
pub
trait
FileExt
:
crate
:
:
Sealed
{
fn
read_at
(
&
self
buf
:
&
mut
[
u8
]
offset
:
u64
)
-
>
io
:
:
Result
<
usize
>
;
fn
write_at
(
&
self
buf
:
&
[
u8
]
offset
:
u64
)
-
>
io
:
:
Result
<
usize
>
;
}
pub
trait
OpenOptionsExt
:
crate
:
:
Sealed
{
fn
mode
(
&
mut
self
mode
:
u32
)
-
>
&
mut
Self
;
fn
custom_flags
(
&
mut
self
flags
:
i32
)
-
>
&
mut
Self
;
}
}
