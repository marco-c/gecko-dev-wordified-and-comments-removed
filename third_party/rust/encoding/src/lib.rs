#
!
[
cfg_attr
(
test
feature
(
test
)
)
]
extern
crate
encoding_index_singlebyte
as
index_singlebyte
;
extern
crate
encoding_index_korean
as
index_korean
;
extern
crate
encoding_index_japanese
as
index_japanese
;
extern
crate
encoding_index_simpchinese
as
index_simpchinese
;
extern
crate
encoding_index_tradchinese
as
index_tradchinese
;
#
[
cfg
(
test
)
]
extern
crate
test
;
pub
use
self
:
:
types
:
:
{
CodecError
ByteWriter
StringWriter
RawEncoder
RawDecoder
EncodingRef
Encoding
EncoderTrapFunc
DecoderTrapFunc
DecoderTrap
EncoderTrap
decode
}
;
#
[
macro_use
]
mod
util
;
#
[
cfg
(
test
)
]
#
[
macro_use
]
mod
testutils
;
pub
mod
types
;
pub
mod
codec
{
pub
mod
error
;
pub
mod
ascii
;
pub
mod
singlebyte
;
pub
mod
utf_8
;
pub
mod
utf_16
;
pub
mod
korean
;
pub
mod
japanese
;
pub
mod
simpchinese
;
pub
mod
tradchinese
;
pub
mod
whatwg
;
}
pub
mod
all
;
pub
mod
label
;
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
*
;
#
[
test
]
fn
test_decode
(
)
{
fn
test_one
(
input
:
&
[
u8
]
expected_result
:
&
str
expected_encoding
:
&
str
)
{
let
(
result
used_encoding
)
=
decode
(
input
DecoderTrap
:
:
Strict
all
:
:
ISO_8859_1
as
EncodingRef
)
;
let
result
=
result
.
unwrap
(
)
;
assert_eq
!
(
used_encoding
.
name
(
)
expected_encoding
)
;
assert_eq
!
(
&
result
[
.
.
]
expected_result
)
;
}
test_one
(
&
[
0xEF
0xBB
0xBF
0xC3
0xA9
]
"
"
"
utf
-
8
"
)
;
test_one
(
&
[
0xC3
0xA9
]
"
"
"
iso
-
8859
-
1
"
)
;
test_one
(
&
[
0xFE
0xFF
0x00
0xE9
]
"
"
"
utf
-
16be
"
)
;
test_one
(
&
[
0x00
0xE9
]
"
\
x00
"
"
iso
-
8859
-
1
"
)
;
test_one
(
&
[
0xFF
0xFE
0xE9
0x00
]
"
"
"
utf
-
16le
"
)
;
test_one
(
&
[
0xE9
0x00
]
"
\
x00
"
"
iso
-
8859
-
1
"
)
;
}
}
