#
!
[
cfg_attr
(
feature
=
"
nightly
"
feature
(
const_fn
repr_simd
optin_builtin_traits
)
)
]
use
std
:
:
thread
;
pub
use
scoped
:
:
{
scope
Scope
ScopedJoinHandle
}
;
pub
mod
mem
;
pub
mod
sync
;
mod
scoped
;
#
[
doc
(
hidden
)
]
trait
FnBox
{
fn
call_box
(
self
:
Box
<
Self
>
)
;
}
impl
<
F
:
FnOnce
(
)
>
FnBox
for
F
{
fn
call_box
(
self
:
Box
<
Self
>
)
{
(
*
self
)
(
)
}
}
pub
unsafe
fn
spawn_unsafe
<
'
a
F
>
(
f
:
F
)
-
>
thread
:
:
JoinHandle
<
(
)
>
where
F
:
FnOnce
(
)
+
Send
+
'
a
{
use
std
:
:
mem
;
let
closure
:
Box
<
FnBox
+
'
a
>
=
Box
:
:
new
(
f
)
;
let
closure
:
Box
<
FnBox
+
Send
>
=
mem
:
:
transmute
(
closure
)
;
thread
:
:
spawn
(
move
|
|
closure
.
call_box
(
)
)
}
