use
std
:
:
iter
:
:
{
ExactSizeIterator
FusedIterator
}
;
use
crate
:
:
arena
:
:
{
Arena
Index
}
;
pub
struct
IntoIter
<
T
>
{
pub
(
crate
)
arena
:
Arena
<
T
>
pub
(
crate
)
slot
:
u32
}
impl
<
T
>
Iterator
for
IntoIter
<
T
>
{
type
Item
=
(
Index
T
)
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
loop
{
if
self
.
arena
.
is_empty
(
)
{
return
None
;
}
let
slot
=
self
.
slot
;
self
.
slot
=
self
.
slot
.
checked_add
(
1
)
.
unwrap_or_else
(
|
|
panic
!
(
"
Overflowed
u32
trying
to
into_iter
Arena
"
)
)
;
if
let
Some
(
(
index
value
)
)
=
self
.
arena
.
remove_by_slot
(
slot
)
{
return
Some
(
(
index
value
)
)
;
}
}
}
fn
size_hint
(
&
self
)
-
>
(
usize
Option
<
usize
>
)
{
(
self
.
arena
.
len
(
)
Some
(
self
.
arena
.
len
(
)
)
)
}
}
impl
<
T
>
FusedIterator
for
IntoIter
<
T
>
{
}
impl
<
T
>
ExactSizeIterator
for
IntoIter
<
T
>
{
}
#
[
cfg
(
test
)
]
mod
test
{
use
crate
:
:
Arena
;
use
std
:
:
collections
:
:
HashSet
;
#
[
test
]
fn
into_iter
(
)
{
let
mut
arena
=
Arena
:
:
with_capacity
(
2
)
;
let
one
=
arena
.
insert
(
1
)
;
let
two
=
arena
.
insert
(
2
)
;
let
mut
pairs
=
HashSet
:
:
new
(
)
;
let
mut
into_iter
=
arena
.
into_iter
(
)
;
assert_eq
!
(
into_iter
.
size_hint
(
)
(
2
Some
(
2
)
)
)
;
pairs
.
insert
(
into_iter
.
next
(
)
.
unwrap
(
)
)
;
assert_eq
!
(
into_iter
.
size_hint
(
)
(
1
Some
(
1
)
)
)
;
pairs
.
insert
(
into_iter
.
next
(
)
.
unwrap
(
)
)
;
assert_eq
!
(
into_iter
.
size_hint
(
)
(
0
Some
(
0
)
)
)
;
assert_eq
!
(
into_iter
.
next
(
)
None
)
;
assert_eq
!
(
into_iter
.
next
(
)
None
)
;
assert_eq
!
(
into_iter
.
size_hint
(
)
(
0
Some
(
0
)
)
)
;
assert_eq
!
(
pairs
.
len
(
)
2
)
;
assert
!
(
pairs
.
contains
(
&
(
one
1
)
)
)
;
assert
!
(
pairs
.
contains
(
&
(
two
2
)
)
)
;
}
}
