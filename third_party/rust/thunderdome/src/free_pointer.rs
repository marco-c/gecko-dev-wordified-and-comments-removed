use
std
:
:
num
:
:
NonZeroU32
;
#
[
derive
(
Debug
Clone
Copy
)
]
#
[
repr
(
transparent
)
]
pub
(
crate
)
struct
FreePointer
(
NonZeroU32
)
;
impl
FreePointer
{
#
[
must_use
]
pub
(
crate
)
fn
from_slot
(
slot
:
u32
)
-
>
Self
{
let
value
=
slot
.
checked_add
(
1
)
.
expect
(
"
u32
overflowed
calculating
free
pointer
from
u32
"
)
;
FreePointer
(
unsafe
{
NonZeroU32
:
:
new_unchecked
(
value
)
}
)
}
#
[
must_use
]
#
[
allow
(
clippy
:
:
integer_arithmetic
)
]
pub
(
crate
)
fn
slot
(
self
)
-
>
u32
{
self
.
0
.
get
(
)
-
1
}
}
#
[
cfg
(
test
)
]
mod
test
{
use
super
:
:
FreePointer
;
#
[
test
]
fn
from_slot
(
)
{
let
ptr
=
FreePointer
:
:
from_slot
(
0
)
;
assert_eq
!
(
ptr
.
slot
(
)
0
)
;
}
#
[
test
]
#
[
should_panic
(
expected
=
"
u32
overflowed
calculating
free
pointer
from
u32
"
)
]
fn
panic_on_overflow
(
)
{
let
_
=
FreePointer
:
:
from_slot
(
std
:
:
u32
:
:
MAX
)
;
}
}
