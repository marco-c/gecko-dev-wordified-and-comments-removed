#
ifndef
_RURE_H
#
define
_RURE_H
#
include
<
stdbool
.
h
>
#
include
<
stdint
.
h
>
#
include
<
stdlib
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
struct
rure
rure
;
typedef
struct
rure_set
rure_set
;
typedef
struct
rure_options
rure_options
;
#
define
RURE_FLAG_CASEI
(
1
<
<
0
)
#
define
RURE_FLAG_MULTI
(
1
<
<
1
)
#
define
RURE_FLAG_DOTNL
(
1
<
<
2
)
#
define
RURE_FLAG_SWAP_GREED
(
1
<
<
3
)
#
define
RURE_FLAG_SPACE
(
1
<
<
4
)
#
define
RURE_FLAG_UNICODE
(
1
<
<
5
)
#
define
RURE_DEFAULT_FLAGS
RURE_FLAG_UNICODE
typedef
struct
rure_match
{
size_t
start
;
size_t
end
;
}
rure_match
;
typedef
struct
rure_captures
rure_captures
;
typedef
struct
rure_iter
rure_iter
;
typedef
struct
rure_iter_capture_names
rure_iter_capture_names
;
typedef
struct
rure_error
rure_error
;
rure
*
rure_compile_must
(
const
char
*
pattern
)
;
rure
*
rure_compile
(
const
uint8_t
*
pattern
size_t
length
uint32_t
flags
rure_options
*
options
rure_error
*
error
)
;
void
rure_free
(
rure
*
re
)
;
bool
rure_is_match
(
rure
*
re
const
uint8_t
*
haystack
size_t
length
size_t
start
)
;
bool
rure_find
(
rure
*
re
const
uint8_t
*
haystack
size_t
length
size_t
start
rure_match
*
match
)
;
bool
rure_find_captures
(
rure
*
re
const
uint8_t
*
haystack
size_t
length
size_t
start
rure_captures
*
captures
)
;
bool
rure_shortest_match
(
rure
*
re
const
uint8_t
*
haystack
size_t
length
size_t
start
size_t
*
end
)
;
int32_t
rure_capture_name_index
(
rure
*
re
const
char
*
name
)
;
rure_iter_capture_names
*
rure_iter_capture_names_new
(
rure
*
re
)
;
void
rure_iter_capture_names_free
(
rure_iter_capture_names
*
it
)
;
bool
rure_iter_capture_names_next
(
rure_iter_capture_names
*
it
char
*
*
name
)
;
rure_iter
*
rure_iter_new
(
rure
*
re
)
;
void
rure_iter_free
(
rure_iter
*
it
)
;
bool
rure_iter_next
(
rure_iter
*
it
const
uint8_t
*
haystack
size_t
length
rure_match
*
match
)
;
bool
rure_iter_next_captures
(
rure_iter
*
it
const
uint8_t
*
haystack
size_t
length
rure_captures
*
captures
)
;
rure_captures
*
rure_captures_new
(
rure
*
re
)
;
void
rure_captures_free
(
rure_captures
*
captures
)
;
bool
rure_captures_at
(
rure_captures
*
captures
size_t
i
rure_match
*
match
)
;
size_t
rure_captures_len
(
rure_captures
*
captures
)
;
rure_options
*
rure_options_new
(
)
;
void
rure_options_free
(
rure_options
*
options
)
;
void
rure_options_size_limit
(
rure_options
*
options
size_t
limit
)
;
void
rure_options_dfa_size_limit
(
rure_options
*
options
size_t
limit
)
;
rure_set
*
rure_compile_set
(
const
uint8_t
*
*
patterns
const
size_t
*
patterns_lengths
size_t
patterns_count
uint32_t
flags
rure_options
*
options
rure_error
*
error
)
;
void
rure_set_free
(
rure_set
*
re
)
;
bool
rure_set_is_match
(
rure_set
*
re
const
uint8_t
*
haystack
size_t
length
size_t
start
)
;
bool
rure_set_matches
(
rure_set
*
re
const
uint8_t
*
haystack
size_t
length
size_t
start
bool
*
matches
)
;
size_t
rure_set_len
(
rure_set
*
re
)
;
rure_error
*
rure_error_new
(
)
;
void
rure_error_free
(
rure_error
*
err
)
;
const
char
*
rure_error_message
(
rure_error
*
err
)
;
const
char
*
rure_escape_must
(
const
char
*
pattern
)
;
void
rure_cstring_free
(
char
*
s
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
