use
crate
:
:
memmem
:
:
{
prefilter
:
:
{
PrefilterFnTy
PrefilterState
}
NeedleInfo
}
;
const
_
:
PrefilterFnTy
=
find
;
pub
(
crate
)
fn
find
(
prestate
:
&
mut
PrefilterState
ninfo
:
&
NeedleInfo
haystack
:
&
[
u8
]
needle
:
&
[
u8
]
)
-
>
Option
<
usize
>
{
let
mut
i
=
0
;
let
(
rare1i
rare2i
)
=
ninfo
.
rarebytes
.
as_rare_usize
(
)
;
let
(
rare1
rare2
)
=
ninfo
.
rarebytes
.
as_rare_bytes
(
needle
)
;
while
prestate
.
is_effective
(
)
{
let
found
=
crate
:
:
memchr
(
rare1
&
haystack
[
i
.
.
]
)
?
;
prestate
.
update
(
found
)
;
i
+
=
found
;
if
i
<
rare1i
{
i
+
=
1
;
continue
;
}
let
aligned_rare2i
=
i
-
rare1i
+
rare2i
;
if
haystack
.
get
(
aligned_rare2i
)
!
=
Some
(
&
rare2
)
{
i
+
=
1
;
continue
;
}
return
Some
(
i
-
rare1i
)
;
}
Some
(
i
.
saturating_sub
(
rare1i
)
)
}
#
[
cfg
(
all
(
test
feature
=
"
std
"
)
)
]
mod
tests
{
use
super
:
:
*
;
fn
freqy_find
(
haystack
:
&
[
u8
]
needle
:
&
[
u8
]
)
-
>
Option
<
usize
>
{
let
ninfo
=
NeedleInfo
:
:
new
(
needle
)
;
let
mut
prestate
=
PrefilterState
:
:
new
(
)
;
find
(
&
mut
prestate
&
ninfo
haystack
needle
)
}
#
[
test
]
fn
freqy_forward
(
)
{
assert_eq
!
(
Some
(
0
)
freqy_find
(
b
"
BARFOO
"
b
"
BAR
"
)
)
;
assert_eq
!
(
Some
(
3
)
freqy_find
(
b
"
FOOBAR
"
b
"
BAR
"
)
)
;
assert_eq
!
(
Some
(
0
)
freqy_find
(
b
"
zyzz
"
b
"
zyzy
"
)
)
;
assert_eq
!
(
Some
(
2
)
freqy_find
(
b
"
zzzy
"
b
"
zyzy
"
)
)
;
assert_eq
!
(
None
freqy_find
(
b
"
zazb
"
b
"
zyzy
"
)
)
;
assert_eq
!
(
Some
(
0
)
freqy_find
(
b
"
yzyy
"
b
"
yzyz
"
)
)
;
assert_eq
!
(
Some
(
2
)
freqy_find
(
b
"
yyyz
"
b
"
yzyz
"
)
)
;
assert_eq
!
(
None
freqy_find
(
b
"
yayb
"
b
"
yzyz
"
)
)
;
}
#
[
test
]
#
[
cfg
(
not
(
miri
)
)
]
fn
prefilter_permutations
(
)
{
use
crate
:
:
memmem
:
:
prefilter
:
:
tests
:
:
PrefilterTest
;
unsafe
{
PrefilterTest
:
:
run_all_tests
(
super
:
:
find
)
}
;
}
}
