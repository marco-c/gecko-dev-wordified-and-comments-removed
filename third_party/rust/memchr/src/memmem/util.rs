#
[
inline
(
always
)
]
pub
(
crate
)
fn
is_prefix
(
haystack
:
&
[
u8
]
needle
:
&
[
u8
]
)
-
>
bool
{
needle
.
len
(
)
<
=
haystack
.
len
(
)
&
&
memcmp
(
&
haystack
[
.
.
needle
.
len
(
)
]
needle
)
}
#
[
inline
(
always
)
]
pub
(
crate
)
fn
is_suffix
(
haystack
:
&
[
u8
]
needle
:
&
[
u8
]
)
-
>
bool
{
needle
.
len
(
)
<
=
haystack
.
len
(
)
&
&
memcmp
(
&
haystack
[
haystack
.
len
(
)
-
needle
.
len
(
)
.
.
]
needle
)
}
#
[
inline
(
always
)
]
pub
(
crate
)
fn
memcmp
(
x
:
&
[
u8
]
y
:
&
[
u8
]
)
-
>
bool
{
if
x
.
len
(
)
!
=
y
.
len
(
)
{
return
false
;
}
if
x
.
len
(
)
<
4
{
for
(
&
b1
&
b2
)
in
x
.
iter
(
)
.
zip
(
y
)
{
if
b1
!
=
b2
{
return
false
;
}
}
return
true
;
}
unsafe
{
let
(
mut
px
mut
py
)
=
(
x
.
as_ptr
(
)
y
.
as_ptr
(
)
)
;
let
(
pxend
pyend
)
=
(
px
.
add
(
x
.
len
(
)
-
4
)
py
.
add
(
y
.
len
(
)
-
4
)
)
;
while
px
<
pxend
{
let
vx
=
(
px
as
*
const
u32
)
.
read_unaligned
(
)
;
let
vy
=
(
py
as
*
const
u32
)
.
read_unaligned
(
)
;
if
vx
!
=
vy
{
return
false
;
}
px
=
px
.
add
(
4
)
;
py
=
py
.
add
(
4
)
;
}
let
vx
=
(
pxend
as
*
const
u32
)
.
read_unaligned
(
)
;
let
vy
=
(
pyend
as
*
const
u32
)
.
read_unaligned
(
)
;
vx
=
=
vy
}
}
