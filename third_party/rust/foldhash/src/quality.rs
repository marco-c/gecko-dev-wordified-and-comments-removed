use
core
:
:
hash
:
:
{
BuildHasher
Hasher
}
;
use
crate
:
:
seed
:
:
SharedSeed
;
use
crate
:
:
{
fast
folded_multiply
ARBITRARY0
ARBITRARY4
}
;
#
[
derive
(
Clone
)
]
pub
struct
FoldHasher
<
'
a
>
{
pub
(
crate
)
inner
:
fast
:
:
FoldHasher
<
'
a
>
}
impl
<
'
a
>
FoldHasher
<
'
a
>
{
#
[
inline
(
always
)
]
pub
const
fn
with_seed
(
per_hasher_seed
:
u64
shared_seed
:
&
'
a
SharedSeed
)
-
>
FoldHasher
<
'
a
>
{
FoldHasher
{
inner
:
fast
:
:
FoldHasher
:
:
with_seed
(
per_hasher_seed
shared_seed
)
}
}
}
impl
<
'
a
>
Hasher
for
FoldHasher
<
'
a
>
{
#
[
inline
(
always
)
]
fn
write
(
&
mut
self
bytes
:
&
[
u8
]
)
{
self
.
inner
.
write
(
bytes
)
;
}
#
[
inline
(
always
)
]
fn
write_u8
(
&
mut
self
i
:
u8
)
{
self
.
inner
.
write_u8
(
i
)
;
}
#
[
inline
(
always
)
]
fn
write_u16
(
&
mut
self
i
:
u16
)
{
self
.
inner
.
write_u16
(
i
)
;
}
#
[
inline
(
always
)
]
fn
write_u32
(
&
mut
self
i
:
u32
)
{
self
.
inner
.
write_u32
(
i
)
;
}
#
[
inline
(
always
)
]
fn
write_u64
(
&
mut
self
i
:
u64
)
{
self
.
inner
.
write_u64
(
i
)
;
}
#
[
inline
(
always
)
]
fn
write_u128
(
&
mut
self
i
:
u128
)
{
self
.
inner
.
write_u128
(
i
)
;
}
#
[
inline
(
always
)
]
fn
write_usize
(
&
mut
self
i
:
usize
)
{
self
.
inner
.
write_usize
(
i
)
;
}
#
[
cfg
(
feature
=
"
nightly
"
)
]
#
[
inline
(
always
)
]
fn
write_str
(
&
mut
self
s
:
&
str
)
{
self
.
inner
.
write_str
(
s
)
;
}
#
[
inline
(
always
)
]
fn
finish
(
&
self
)
-
>
u64
{
folded_multiply
(
self
.
inner
.
finish
(
)
ARBITRARY0
)
}
}
#
[
derive
(
Clone
Default
Debug
)
]
pub
struct
RandomState
{
inner
:
fast
:
:
RandomState
}
impl
BuildHasher
for
RandomState
{
type
Hasher
=
FoldHasher
<
'
static
>
;
#
[
inline
(
always
)
]
fn
build_hasher
(
&
self
)
-
>
FoldHasher
<
'
static
>
{
FoldHasher
{
inner
:
self
.
inner
.
build_hasher
(
)
}
}
}
#
[
derive
(
Clone
Default
Debug
)
]
pub
struct
SeedableRandomState
{
inner
:
fast
:
:
SeedableRandomState
}
impl
SeedableRandomState
{
#
[
inline
(
always
)
]
pub
fn
random
(
)
-
>
Self
{
Self
{
inner
:
fast
:
:
SeedableRandomState
:
:
random
(
)
}
}
#
[
inline
(
always
)
]
pub
fn
fixed
(
)
-
>
Self
{
Self
{
inner
:
fast
:
:
SeedableRandomState
:
:
fixed
(
)
}
}
#
[
inline
(
always
)
]
pub
fn
with_seed
(
per_hasher_seed
:
u64
shared_seed
:
&
'
static
SharedSeed
)
-
>
Self
{
Self
{
inner
:
fast
:
:
SeedableRandomState
:
:
with_seed
(
folded_multiply
(
per_hasher_seed
ARBITRARY4
)
shared_seed
)
}
}
}
impl
BuildHasher
for
SeedableRandomState
{
type
Hasher
=
FoldHasher
<
'
static
>
;
#
[
inline
(
always
)
]
fn
build_hasher
(
&
self
)
-
>
FoldHasher
<
'
static
>
{
FoldHasher
{
inner
:
self
.
inner
.
build_hasher
(
)
}
}
}
#
[
derive
(
Clone
Default
Debug
)
]
pub
struct
FixedState
{
inner
:
fast
:
:
FixedState
}
impl
FixedState
{
#
[
inline
(
always
)
]
pub
const
fn
with_seed
(
per_hasher_seed
:
u64
)
-
>
Self
{
Self
{
inner
:
fast
:
:
FixedState
:
:
with_seed
(
folded_multiply
(
per_hasher_seed
ARBITRARY4
)
)
}
}
}
impl
BuildHasher
for
FixedState
{
type
Hasher
=
FoldHasher
<
'
static
>
;
#
[
inline
(
always
)
]
fn
build_hasher
(
&
self
)
-
>
FoldHasher
<
'
static
>
{
FoldHasher
{
inner
:
self
.
inner
.
build_hasher
(
)
}
}
}
