use
EitherOrBoth
:
:
*
;
#
[
derive
(
Clone
PartialEq
Eq
Debug
)
]
pub
enum
EitherOrBoth
<
A
B
>
{
Both
(
A
B
)
Left
(
A
)
Right
(
B
)
}
impl
<
A
B
>
EitherOrBoth
<
A
B
>
{
pub
fn
has_left
(
&
self
)
-
>
bool
{
self
.
as_ref
(
)
.
left
(
)
.
is_some
(
)
}
pub
fn
has_right
(
&
self
)
-
>
bool
{
self
.
as_ref
(
)
.
right
(
)
.
is_some
(
)
}
pub
fn
left
(
self
)
-
>
Option
<
A
>
{
match
self
{
Left
(
left
)
|
Both
(
left
_
)
=
>
Some
(
left
)
_
=
>
None
}
}
pub
fn
right
(
self
)
-
>
Option
<
B
>
{
match
self
{
Right
(
right
)
|
Both
(
_
right
)
=
>
Some
(
right
)
_
=
>
None
}
}
pub
fn
as_ref
(
&
self
)
-
>
EitherOrBoth
<
&
A
&
B
>
{
match
*
self
{
Left
(
ref
left
)
=
>
Left
(
left
)
Right
(
ref
right
)
=
>
Right
(
right
)
Both
(
ref
left
ref
right
)
=
>
Both
(
left
right
)
}
}
pub
fn
as_mut
(
&
mut
self
)
-
>
EitherOrBoth
<
&
mut
A
&
mut
B
>
{
match
*
self
{
Left
(
ref
mut
left
)
=
>
Left
(
left
)
Right
(
ref
mut
right
)
=
>
Right
(
right
)
Both
(
ref
mut
left
ref
mut
right
)
=
>
Both
(
left
right
)
}
}
}
