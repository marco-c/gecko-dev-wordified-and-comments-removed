use
std
:
:
cmp
;
pub
type
SizeHint
=
(
usize
Option
<
usize
>
)
;
#
[
inline
]
pub
fn
add
(
a
:
SizeHint
b
:
SizeHint
)
-
>
SizeHint
{
let
min
=
a
.
0
.
saturating_add
(
b
.
0
)
;
let
max
=
match
(
a
.
1
b
.
1
)
{
(
Some
(
x
)
Some
(
y
)
)
=
>
x
.
checked_add
(
y
)
_
=
>
None
}
;
(
min
max
)
}
#
[
inline
]
pub
fn
add_scalar
(
sh
:
SizeHint
x
:
usize
)
-
>
SizeHint
{
let
(
mut
low
mut
hi
)
=
sh
;
low
=
low
.
saturating_add
(
x
)
;
hi
=
hi
.
and_then
(
|
elt
|
elt
.
checked_add
(
x
)
)
;
(
low
hi
)
}
#
[
inline
]
pub
fn
sub_scalar
(
sh
:
SizeHint
x
:
usize
)
-
>
SizeHint
{
let
(
mut
low
mut
hi
)
=
sh
;
low
=
low
.
saturating_sub
(
x
)
;
hi
=
hi
.
map
(
|
elt
|
elt
.
saturating_sub
(
x
)
)
;
(
low
hi
)
}
#
[
inline
]
pub
fn
mul
(
a
:
SizeHint
b
:
SizeHint
)
-
>
SizeHint
{
let
low
=
a
.
0
.
saturating_mul
(
b
.
0
)
;
let
hi
=
match
(
a
.
1
b
.
1
)
{
(
Some
(
x
)
Some
(
y
)
)
=
>
x
.
checked_mul
(
y
)
(
Some
(
0
)
None
)
|
(
None
Some
(
0
)
)
=
>
Some
(
0
)
_
=
>
None
}
;
(
low
hi
)
}
#
[
inline
]
pub
fn
mul_scalar
(
sh
:
SizeHint
x
:
usize
)
-
>
SizeHint
{
let
(
mut
low
mut
hi
)
=
sh
;
low
=
low
.
saturating_mul
(
x
)
;
hi
=
hi
.
and_then
(
|
elt
|
elt
.
checked_mul
(
x
)
)
;
(
low
hi
)
}
#
[
inline
]
pub
fn
max
(
a
:
SizeHint
b
:
SizeHint
)
-
>
SizeHint
{
let
(
a_lower
a_upper
)
=
a
;
let
(
b_lower
b_upper
)
=
b
;
let
lower
=
cmp
:
:
max
(
a_lower
b_lower
)
;
let
upper
=
match
(
a_upper
b_upper
)
{
(
Some
(
x
)
Some
(
y
)
)
=
>
Some
(
cmp
:
:
max
(
x
y
)
)
_
=
>
None
}
;
(
lower
upper
)
}
#
[
inline
]
pub
fn
min
(
a
:
SizeHint
b
:
SizeHint
)
-
>
SizeHint
{
let
(
a_lower
a_upper
)
=
a
;
let
(
b_lower
b_upper
)
=
b
;
let
lower
=
cmp
:
:
min
(
a_lower
b_lower
)
;
let
upper
=
match
(
a_upper
b_upper
)
{
(
Some
(
u1
)
Some
(
u2
)
)
=
>
Some
(
cmp
:
:
min
(
u1
u2
)
)
_
=
>
a_upper
.
or
(
b_upper
)
}
;
(
lower
upper
)
}
#
[
test
]
fn
mul_size_hints
(
)
{
assert_eq
!
(
mul
(
(
3
Some
(
4
)
)
(
3
Some
(
4
)
)
)
(
9
Some
(
16
)
)
)
;
assert_eq
!
(
mul
(
(
3
Some
(
4
)
)
(
usize
:
:
MAX
None
)
)
(
usize
:
:
MAX
None
)
)
;
assert_eq
!
(
mul
(
(
3
None
)
(
0
Some
(
0
)
)
)
(
0
Some
(
0
)
)
)
;
}
