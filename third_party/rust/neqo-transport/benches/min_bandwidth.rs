use
std
:
:
time
:
:
Duration
;
use
neqo_common
:
:
{
log
:
:
init
as
init_log
qinfo
}
;
use
neqo_transport
:
:
{
ConnectionParameters
State
}
;
use
test_fixture
:
:
{
boxed
sim
:
:
{
connection
:
:
{
Node
ReachState
ReceiveData
SendData
}
network
:
:
{
Mtu
TailDrop
}
Simulator
}
}
;
#
[
expect
(
clippy
:
:
cast_precision_loss
reason
=
"
OK
in
a
bench
.
"
)
]
fn
gbit_bandwidth
(
ecn
:
bool
)
{
const
MIB
:
usize
=
1_024
*
1_024
;
const
GIB
:
usize
=
1_024
*
MIB
;
const
MBIT
:
usize
=
1_000
*
1_000
;
const
GBIT
:
usize
=
1_000
*
MBIT
;
const
TRANSFER_AMOUNT
:
usize
=
GIB
;
const
LINK_BANDWIDTH
:
usize
=
GBIT
;
const
LINK_RTT_MS
:
u64
=
40
;
const
BUFFER_LATENCY_MS
:
usize
=
4
;
const
MINIMUM_EXPECTED_UTILIZATION
:
f64
=
0
.
3
;
let
gbit_link
=
|
|
{
let
rate_byte
=
LINK_BANDWIDTH
/
8
;
let
capacity_byte
=
(
1
+
usize
:
:
from
(
ecn
)
)
*
rate_byte
*
BUFFER_LATENCY_MS
/
1000
;
let
delay
=
Duration
:
:
from_millis
(
LINK_RTT_MS
)
/
2
;
TailDrop
:
:
new
(
rate_byte
capacity_byte
ecn
delay
)
}
;
init_log
(
None
)
;
let
name
=
format
!
(
"
gbit
-
bandwidth
{
}
"
if
ecn
{
"
-
ecn
"
}
else
{
"
-
noecn
"
}
)
;
let
simulated_time
=
Simulator
:
:
new
(
&
name
boxed
!
[
Node
:
:
new_client
(
ConnectionParameters
:
:
default
(
)
.
ack_ratio
(
200
)
boxed
!
[
ReachState
:
:
new
(
State
:
:
Confirmed
)
]
boxed
!
[
ReceiveData
:
:
new
(
TRANSFER_AMOUNT
)
]
)
Mtu
:
:
new
(
1500
)
gbit_link
(
)
Node
:
:
new_server
(
ConnectionParameters
:
:
default
(
)
.
ack_ratio
(
200
)
boxed
!
[
ReachState
:
:
new
(
State
:
:
Confirmed
)
]
boxed
!
[
SendData
:
:
new
(
TRANSFER_AMOUNT
)
]
)
Mtu
:
:
new
(
1500
)
gbit_link
(
)
]
)
.
setup
(
)
.
run
(
)
;
let
achieved_bandwidth
=
TRANSFER_AMOUNT
as
f64
*
8
.
0
/
simulated_time
.
as_secs_f64
(
)
;
qinfo
!
(
"
{
name
}
achieved
{
a
}
Mb
/
s
bandwidth
(
link
rate
{
t
}
)
"
a
=
achieved_bandwidth
/
MBIT
as
f64
t
=
LINK_BANDWIDTH
/
MBIT
)
;
assert
!
(
LINK_BANDWIDTH
as
f64
*
MINIMUM_EXPECTED_UTILIZATION
<
achieved_bandwidth
"
{
name
}
expected
to
reach
{
MINIMUM_EXPECTED_UTILIZATION
}
of
maximum
bandwidth
(
{
t
}
Mbit
/
s
)
but
got
{
a
}
Mbit
/
s
"
t
=
LINK_BANDWIDTH
/
MBIT
a
=
achieved_bandwidth
/
MBIT
as
f64
)
;
}
fn
main
(
)
{
gbit_bandwidth
(
false
)
;
gbit_bandwidth
(
true
)
;
}
