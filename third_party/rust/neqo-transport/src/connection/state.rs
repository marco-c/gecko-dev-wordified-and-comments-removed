use
std
:
:
cmp
:
:
Ordering
;
use
std
:
:
mem
;
use
std
:
:
time
:
:
Instant
;
use
crate
:
:
frame
:
:
{
Frame
FrameType
}
;
use
crate
:
:
packet
:
:
PacketBuilder
;
use
crate
:
:
recovery
:
:
RecoveryToken
;
use
crate
:
:
{
CloseError
ConnectionError
}
;
#
[
derive
(
Clone
Debug
PartialEq
Ord
Eq
)
]
pub
enum
State
{
Init
WaitInitial
Handshaking
Connected
Confirmed
Closing
{
error
:
ConnectionError
timeout
:
Instant
}
Draining
{
error
:
ConnectionError
timeout
:
Instant
}
Closed
(
ConnectionError
)
}
impl
State
{
#
[
must_use
]
pub
fn
connected
(
&
self
)
-
>
bool
{
matches
!
(
self
Self
:
:
Connected
|
Self
:
:
Confirmed
)
}
#
[
must_use
]
pub
fn
closed
(
&
self
)
-
>
bool
{
matches
!
(
self
Self
:
:
Closing
{
.
.
}
|
Self
:
:
Draining
{
.
.
}
|
Self
:
:
Closed
(
_
)
)
}
}
impl
PartialOrd
for
State
{
#
[
allow
(
clippy
:
:
match_same_arms
)
]
fn
partial_cmp
(
&
self
other
:
&
Self
)
-
>
Option
<
Ordering
>
{
if
mem
:
:
discriminant
(
self
)
=
=
mem
:
:
discriminant
(
other
)
{
return
Some
(
Ordering
:
:
Equal
)
;
}
Some
(
match
(
self
other
)
{
(
Self
:
:
Init
_
)
=
>
Ordering
:
:
Less
(
_
Self
:
:
Init
)
=
>
Ordering
:
:
Greater
(
Self
:
:
WaitInitial
_
)
=
>
Ordering
:
:
Less
(
_
Self
:
:
WaitInitial
)
=
>
Ordering
:
:
Greater
(
Self
:
:
Handshaking
_
)
=
>
Ordering
:
:
Less
(
_
Self
:
:
Handshaking
)
=
>
Ordering
:
:
Greater
(
Self
:
:
Connected
_
)
=
>
Ordering
:
:
Less
(
_
Self
:
:
Connected
)
=
>
Ordering
:
:
Greater
(
Self
:
:
Confirmed
_
)
=
>
Ordering
:
:
Less
(
_
Self
:
:
Confirmed
)
=
>
Ordering
:
:
Greater
(
Self
:
:
Closing
{
.
.
}
_
)
=
>
Ordering
:
:
Less
(
_
Self
:
:
Closing
{
.
.
}
)
=
>
Ordering
:
:
Greater
(
Self
:
:
Draining
{
.
.
}
_
)
=
>
Ordering
:
:
Less
(
_
Self
:
:
Draining
{
.
.
}
)
=
>
Ordering
:
:
Greater
(
Self
:
:
Closed
(
_
)
_
)
=
>
unreachable
!
(
)
}
)
}
}
type
ClosingFrame
=
Frame
<
'
static
>
;
#
[
derive
(
Debug
Clone
PartialEq
)
]
pub
enum
StateSignaling
{
Idle
HandshakeDone
Closing
(
ClosingFrame
)
Draining
(
ClosingFrame
)
CloseSent
(
Option
<
ClosingFrame
>
)
Reset
}
impl
StateSignaling
{
pub
fn
handshake_done
(
&
mut
self
)
{
if
*
self
!
=
Self
:
:
Idle
{
debug_assert
!
(
false
"
StateSignaling
must
be
in
Idle
state
.
"
)
;
return
;
}
*
self
=
Self
:
:
HandshakeDone
}
pub
fn
write_done
(
&
mut
self
builder
:
&
mut
PacketBuilder
)
-
>
Option
<
RecoveryToken
>
{
if
*
self
=
=
Self
:
:
HandshakeDone
&
&
builder
.
remaining
(
)
>
=
1
{
*
self
=
Self
:
:
Idle
;
builder
.
encode_varint
(
Frame
:
:
HandshakeDone
.
get_type
(
)
)
;
Some
(
RecoveryToken
:
:
HandshakeDone
)
}
else
{
None
}
}
fn
make_close_frame
(
error
:
ConnectionError
frame_type
:
FrameType
message
:
impl
AsRef
<
str
>
)
-
>
ClosingFrame
{
let
reason_phrase
=
message
.
as_ref
(
)
.
as_bytes
(
)
.
to_owned
(
)
;
Frame
:
:
ConnectionClose
{
error_code
:
CloseError
:
:
from
(
error
)
frame_type
reason_phrase
}
}
pub
fn
close
(
&
mut
self
error
:
ConnectionError
frame_type
:
FrameType
message
:
impl
AsRef
<
str
>
)
{
if
*
self
!
=
Self
:
:
Reset
{
*
self
=
Self
:
:
Closing
(
Self
:
:
make_close_frame
(
error
frame_type
message
)
)
;
}
}
pub
fn
drain
(
&
mut
self
error
:
ConnectionError
frame_type
:
FrameType
message
:
impl
AsRef
<
str
>
)
{
if
*
self
!
=
Self
:
:
Reset
{
*
self
=
Self
:
:
Draining
(
Self
:
:
make_close_frame
(
error
frame_type
message
)
)
;
}
}
pub
fn
close_frame
(
&
mut
self
)
-
>
Option
<
ClosingFrame
>
{
match
self
{
Self
:
:
Closing
(
frame
)
=
>
{
let
frame
=
mem
:
:
replace
(
frame
Frame
:
:
Padding
)
;
*
self
=
Self
:
:
CloseSent
(
Some
(
frame
.
clone
(
)
)
)
;
Some
(
frame
)
}
Self
:
:
Draining
(
frame
)
=
>
{
let
frame
=
mem
:
:
replace
(
frame
Frame
:
:
Padding
)
;
*
self
=
Self
:
:
CloseSent
(
None
)
;
Some
(
frame
)
}
_
=
>
None
}
}
pub
fn
send_close
(
&
mut
self
)
{
if
let
Self
:
:
CloseSent
(
Some
(
frame
)
)
=
self
{
let
frame
=
mem
:
:
replace
(
frame
Frame
:
:
Padding
)
;
*
self
=
Self
:
:
Closing
(
frame
)
;
}
}
pub
fn
reset
(
&
mut
self
)
{
*
self
=
Self
:
:
Reset
;
}
}
