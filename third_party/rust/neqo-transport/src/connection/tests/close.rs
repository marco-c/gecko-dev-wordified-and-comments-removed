use
super
:
:
super
:
:
{
Output
State
}
;
use
super
:
:
{
connect
connect_force_idle
default_client
default_server
send_something
}
;
use
crate
:
:
frame
:
:
{
CloseError
Frame
}
;
use
crate
:
:
tparams
:
:
{
self
TransportParameter
}
;
use
crate
:
:
tracking
:
:
PNSpace
;
use
crate
:
:
{
AppError
ConnectionError
Error
}
;
use
neqo_common
:
:
Datagram
;
use
std
:
:
time
:
:
Duration
;
use
test_fixture
:
:
{
self
loopback
now
}
;
#
[
test
]
fn
connection_close
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
connect
(
&
mut
client
&
mut
server
)
;
let
now
=
now
(
)
;
client
.
close
(
now
42
"
"
)
;
let
out
=
client
.
process
(
None
now
)
;
let
frames
=
server
.
test_process_input
(
out
.
dgram
(
)
.
unwrap
(
)
now
)
;
assert_eq
!
(
frames
.
len
(
)
1
)
;
assert
!
(
matches
!
(
frames
[
0
]
(
Frame
:
:
ConnectionClose
{
error_code
:
CloseError
:
:
Application
(
42
)
.
.
}
PNSpace
:
:
ApplicationData
)
)
)
;
}
#
[
test
]
fn
early_application_close
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
let
dgram
=
client
.
process
(
None
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
server
.
close
(
now
(
)
77
String
:
:
from
(
"
"
)
)
;
assert
!
(
server
.
state
(
)
.
closed
(
)
)
;
let
dgram
=
server
.
process
(
None
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
frames
=
client
.
test_process_input
(
dgram
.
unwrap
(
)
now
(
)
)
;
assert
!
(
matches
!
(
frames
[
0
]
(
Frame
:
:
ConnectionClose
{
error_code
:
CloseError
:
:
Transport
(
code
)
.
.
}
PNSpace
:
:
Initial
)
if
code
=
=
Error
:
:
ApplicationError
.
code
(
)
)
)
;
assert
!
(
client
.
state
(
)
.
closed
(
)
)
;
}
#
[
test
]
fn
bad_tls_version
(
)
{
let
mut
client
=
default_client
(
)
;
client
.
crypto
.
tls
.
set_option
(
neqo_crypto
:
:
Opt
:
:
Tls13CompatMode
true
)
.
unwrap
(
)
;
let
mut
server
=
default_server
(
)
;
let
dgram
=
client
.
process
(
None
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert_eq
!
(
*
server
.
state
(
)
State
:
:
Closed
(
ConnectionError
:
:
Transport
(
Error
:
:
ProtocolViolation
)
)
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
frames
=
client
.
test_process_input
(
dgram
.
unwrap
(
)
now
(
)
)
;
assert
!
(
matches
!
(
frames
[
0
]
(
Frame
:
:
ConnectionClose
{
error_code
:
CloseError
:
:
Transport
(
_
)
.
.
}
PNSpace
:
:
Initial
)
)
)
;
}
#
[
test
]
fn
closing_timers_interation
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
connect
(
&
mut
client
&
mut
server
)
;
let
mut
now
=
now
(
)
;
let
_p1
=
send_something
(
&
mut
client
now
)
;
let
p2
=
send_something
(
&
mut
client
now
)
;
let
ack
=
server
.
process
(
Some
(
p2
)
now
)
.
dgram
(
)
;
assert
!
(
ack
.
is_some
(
)
)
;
let
cb
=
client
.
process
(
ack
now
)
.
callback
(
)
;
assert_ne
!
(
cb
Duration
:
:
from_secs
(
0
)
)
;
now
+
=
cb
;
client
.
close
(
now
0
"
"
)
;
let
client_close
=
client
.
process
(
None
now
)
.
dgram
(
)
;
assert
!
(
client_close
.
is_some
(
)
)
;
let
client_close_timer
=
client
.
process
(
None
now
)
.
callback
(
)
;
assert_ne
!
(
client_close_timer
Duration
:
:
from_secs
(
0
)
)
;
}
#
[
test
]
fn
closing_and_draining
(
)
{
const
APP_ERROR
:
AppError
=
7
;
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
connect
(
&
mut
client
&
mut
server
)
;
let
p1
=
send_something
(
&
mut
client
now
(
)
)
;
client
.
close
(
now
(
)
APP_ERROR
"
"
)
;
let
client_close
=
client
.
process
(
None
now
(
)
)
.
dgram
(
)
;
assert
!
(
client_close
.
is_some
(
)
)
;
let
client_close_timer
=
client
.
process
(
None
now
(
)
)
.
callback
(
)
;
assert_ne
!
(
client_close_timer
Duration
:
:
from_secs
(
0
)
)
;
let
p3
=
send_something
(
&
mut
server
now
(
)
)
;
let
client_close2
=
client
.
process
(
Some
(
p3
)
now
(
)
)
.
dgram
(
)
;
assert_eq
!
(
client_close
.
as_ref
(
)
.
unwrap
(
)
.
len
(
)
client_close2
.
as_ref
(
)
.
unwrap
(
)
.
len
(
)
)
;
let
end
=
client
.
process
(
None
now
(
)
+
client_close_timer
)
;
assert_eq
!
(
end
Output
:
:
None
)
;
assert_eq
!
(
*
client
.
state
(
)
State
:
:
Closed
(
ConnectionError
:
:
Application
(
APP_ERROR
)
)
)
;
let
server_close
=
server
.
process
(
client_close
now
(
)
)
.
dgram
(
)
;
assert
!
(
server
.
state
(
)
.
closed
(
)
)
;
assert
!
(
server_close
.
is_some
(
)
)
;
let
server_close_timer
=
server
.
process
(
client_close2
now
(
)
)
.
callback
(
)
;
assert_ne
!
(
server_close_timer
Duration
:
:
from_secs
(
0
)
)
;
let
server_close_timer2
=
server
.
process
(
Some
(
p1
)
now
(
)
)
.
callback
(
)
;
assert_eq
!
(
server_close_timer
server_close_timer2
)
;
let
end
=
server
.
process
(
None
now
(
)
+
server_close_timer
)
;
assert_eq
!
(
end
Output
:
:
None
)
;
assert_eq
!
(
*
server
.
state
(
)
State
:
:
Closed
(
ConnectionError
:
:
Transport
(
Error
:
:
PeerApplicationError
(
APP_ERROR
)
)
)
)
;
}
#
[
test
]
fn
stateless_reset_client
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
server
.
set_local_tparam
(
tparams
:
:
STATELESS_RESET_TOKEN
TransportParameter
:
:
Bytes
(
vec
!
[
77
;
16
]
)
)
.
unwrap
(
)
;
connect_force_idle
(
&
mut
client
&
mut
server
)
;
client
.
process_input
(
Datagram
:
:
new
(
loopback
(
)
loopback
(
)
vec
!
[
77
;
21
]
)
now
(
)
)
;
assert
!
(
matches
!
(
client
.
state
(
)
State
:
:
Draining
{
.
.
}
)
)
;
}
