use
super
:
:
{
connect
connect_with_rtt
default_client
default_server
exchange_ticket
get_tokens
send_something
AT_LEAST_PTO
}
;
use
crate
:
:
addr_valid
:
:
{
AddressValidation
ValidateAddress
}
;
use
std
:
:
cell
:
:
RefCell
;
use
std
:
:
rc
:
:
Rc
;
use
std
:
:
time
:
:
Duration
;
use
test_fixture
:
:
{
self
assertions
now
}
;
#
[
test
]
fn
resume
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
connect
(
&
mut
client
&
mut
server
)
;
let
token
=
exchange_ticket
(
&
mut
client
&
mut
server
now
(
)
)
;
let
mut
client
=
default_client
(
)
;
client
.
enable_resumption
(
now
(
)
token
)
.
expect
(
"
should
set
token
"
)
;
let
mut
server
=
default_server
(
)
;
connect
(
&
mut
client
&
mut
server
)
;
assert
!
(
client
.
tls_info
(
)
.
unwrap
(
)
.
resumed
(
)
)
;
assert
!
(
server
.
tls_info
(
)
.
unwrap
(
)
.
resumed
(
)
)
;
}
#
[
test
]
fn
remember_smoothed_rtt
(
)
{
const
RTT1
:
Duration
=
Duration
:
:
from_millis
(
130
)
;
const
RTT2
:
Duration
=
Duration
:
:
from_millis
(
70
)
;
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
let
mut
now
=
connect_with_rtt
(
&
mut
client
&
mut
server
now
(
)
RTT1
)
;
assert_eq
!
(
client
.
paths
.
rtt
(
)
RTT1
)
;
let
validation
=
AddressValidation
:
:
new
(
now
ValidateAddress
:
:
NoToken
)
.
unwrap
(
)
;
let
validation
=
Rc
:
:
new
(
RefCell
:
:
new
(
validation
)
)
;
server
.
set_validation
(
Rc
:
:
clone
(
&
validation
)
)
;
server
.
send_ticket
(
now
&
[
]
)
.
expect
(
"
can
send
ticket
"
)
;
let
ticket
=
server
.
process_output
(
now
)
.
dgram
(
)
;
assert
!
(
ticket
.
is_some
(
)
)
;
now
+
=
RTT1
/
2
;
client
.
process_input
(
ticket
.
unwrap
(
)
now
)
;
let
token
=
get_tokens
(
&
mut
client
)
.
pop
(
)
.
unwrap
(
)
;
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
client
.
enable_resumption
(
now
token
)
.
unwrap
(
)
;
assert_eq
!
(
client
.
paths
.
rtt
(
)
RTT1
"
client
should
remember
previous
RTT
"
)
;
connect_with_rtt
(
&
mut
client
&
mut
server
now
RTT2
)
;
assert_eq
!
(
client
.
paths
.
rtt
(
)
RTT2
"
previous
RTT
should
be
completely
erased
"
)
;
}
#
[
test
]
fn
address_validation_token_resume
(
)
{
const
RTT
:
Duration
=
Duration
:
:
from_millis
(
10
)
;
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
let
validation
=
AddressValidation
:
:
new
(
now
(
)
ValidateAddress
:
:
Always
)
.
unwrap
(
)
;
let
validation
=
Rc
:
:
new
(
RefCell
:
:
new
(
validation
)
)
;
server
.
set_validation
(
Rc
:
:
clone
(
&
validation
)
)
;
let
mut
now
=
connect_with_rtt
(
&
mut
client
&
mut
server
now
(
)
RTT
)
;
let
token
=
exchange_ticket
(
&
mut
client
&
mut
server
now
)
;
let
mut
client
=
default_client
(
)
;
client
.
enable_resumption
(
now
token
)
.
unwrap
(
)
;
let
mut
server
=
default_server
(
)
;
let
dgram
=
client
.
process
(
None
now
)
.
dgram
(
)
;
assertions
:
:
assert_initial
(
dgram
.
as_ref
(
)
.
unwrap
(
)
true
)
;
now
+
=
AT_LEAST_PTO
;
connect_with_rtt
(
&
mut
client
&
mut
server
now
RTT
)
;
assert
!
(
client
.
crypto
.
tls
.
info
(
)
.
unwrap
(
)
.
resumed
(
)
)
;
assert
!
(
server
.
crypto
.
tls
.
info
(
)
.
unwrap
(
)
.
resumed
(
)
)
;
}
fn
can_resume
(
token
:
impl
AsRef
<
[
u8
]
>
initial_has_token
:
bool
)
{
let
mut
client
=
default_client
(
)
;
client
.
enable_resumption
(
now
(
)
token
)
.
unwrap
(
)
;
let
initial
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assertions
:
:
assert_initial
(
initial
.
as_ref
(
)
.
unwrap
(
)
initial_has_token
)
;
}
#
[
test
]
fn
two_tickets_on_timer
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
connect
(
&
mut
client
&
mut
server
)
;
server
.
send_ticket
(
now
(
)
&
[
]
)
.
expect
(
"
send
ticket1
"
)
;
server
.
send_ticket
(
now
(
)
&
[
]
)
.
expect
(
"
send
ticket2
"
)
;
let
pkt
=
send_something
(
&
mut
server
now
(
)
)
;
assert
!
(
client
.
process
(
Some
(
pkt
)
now
(
)
)
.
dgram
(
)
.
is_some
(
)
)
;
assert_eq
!
(
get_tokens
(
&
mut
client
)
.
len
(
)
0
)
;
let
mut
now
=
now
(
)
+
3
*
client
.
pto
(
)
;
let
_
=
client
.
process
(
None
now
)
;
let
mut
recv_tokens
=
get_tokens
(
&
mut
client
)
;
assert_eq
!
(
recv_tokens
.
len
(
)
1
)
;
let
token1
=
recv_tokens
.
pop
(
)
.
unwrap
(
)
;
now
+
=
3
*
client
.
pto
(
)
;
let
_
=
client
.
process
(
None
now
)
;
let
mut
recv_tokens
=
get_tokens
(
&
mut
client
)
;
assert_eq
!
(
recv_tokens
.
len
(
)
1
)
;
let
token2
=
recv_tokens
.
pop
(
)
.
unwrap
(
)
;
now
+
=
3
*
client
.
pto
(
)
;
let
_
=
client
.
process
(
None
now
)
;
assert_eq
!
(
get_tokens
(
&
mut
client
)
.
len
(
)
0
)
;
assert_ne
!
(
token1
.
as_ref
(
)
token2
.
as_ref
(
)
)
;
can_resume
(
&
token1
false
)
;
can_resume
(
&
token2
false
)
;
}
#
[
test
]
fn
two_tickets_with_new_token
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
let
validation
=
AddressValidation
:
:
new
(
now
(
)
ValidateAddress
:
:
Always
)
.
unwrap
(
)
;
let
validation
=
Rc
:
:
new
(
RefCell
:
:
new
(
validation
)
)
;
server
.
set_validation
(
Rc
:
:
clone
(
&
validation
)
)
;
connect
(
&
mut
client
&
mut
server
)
;
server
.
send_ticket
(
now
(
)
&
[
]
)
.
expect
(
"
send
ticket1
"
)
;
server
.
send_ticket
(
now
(
)
&
[
]
)
.
expect
(
"
send
ticket2
"
)
;
let
pkt
=
send_something
(
&
mut
server
now
(
)
)
;
client
.
process_input
(
pkt
now
(
)
)
;
let
mut
all_tokens
=
get_tokens
(
&
mut
client
)
;
assert_eq
!
(
all_tokens
.
len
(
)
2
)
;
let
token1
=
all_tokens
.
pop
(
)
.
unwrap
(
)
;
let
token2
=
all_tokens
.
pop
(
)
.
unwrap
(
)
;
assert_ne
!
(
token1
.
as_ref
(
)
token2
.
as_ref
(
)
)
;
can_resume
(
&
token1
true
)
;
can_resume
(
&
token2
true
)
;
}
#
[
test
]
fn
take_token
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
connect
(
&
mut
client
&
mut
server
)
;
server
.
send_ticket
(
now
(
)
&
[
]
)
.
unwrap
(
)
;
let
dgram
=
server
.
process
(
None
now
(
)
)
.
dgram
(
)
;
client
.
process_input
(
dgram
.
unwrap
(
)
now
(
)
)
;
let
tokens
=
get_tokens
(
&
mut
client
)
;
assert_eq
!
(
tokens
.
len
(
)
0
)
;
let
token
=
client
.
take_resumption_token
(
now
(
)
)
.
unwrap
(
)
;
can_resume
(
&
token
false
)
;
}
