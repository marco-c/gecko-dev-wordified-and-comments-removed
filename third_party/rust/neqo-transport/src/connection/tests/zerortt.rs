use
super
:
:
super
:
:
{
Connection
FixedConnectionIdManager
}
;
use
super
:
:
{
connect
default_client
default_server
exchange_ticket
}
;
use
crate
:
:
events
:
:
ConnectionEvent
;
use
crate
:
:
frame
:
:
StreamType
;
use
crate
:
:
{
ConnectionParameters
Error
}
;
use
neqo_common
:
:
event
:
:
Provider
;
use
neqo_crypto
:
:
{
AllowZeroRtt
AntiReplay
}
;
use
std
:
:
cell
:
:
RefCell
;
use
std
:
:
rc
:
:
Rc
;
use
test_fixture
:
:
{
self
assertions
now
}
;
#
[
test
]
fn
zero_rtt_negotiate
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
connect
(
&
mut
client
&
mut
server
)
;
let
token
=
exchange_ticket
(
&
mut
client
&
mut
server
now
(
)
)
;
let
mut
client
=
default_client
(
)
;
client
.
enable_resumption
(
now
(
)
token
)
.
expect
(
"
should
set
token
"
)
;
let
mut
server
=
default_server
(
)
;
connect
(
&
mut
client
&
mut
server
)
;
assert
!
(
client
.
tls_info
(
)
.
unwrap
(
)
.
early_data_accepted
(
)
)
;
assert
!
(
server
.
tls_info
(
)
.
unwrap
(
)
.
early_data_accepted
(
)
)
;
}
#
[
test
]
fn
zero_rtt_send_recv
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
connect
(
&
mut
client
&
mut
server
)
;
let
token
=
exchange_ticket
(
&
mut
client
&
mut
server
now
(
)
)
;
let
mut
client
=
default_client
(
)
;
client
.
enable_resumption
(
now
(
)
token
)
.
expect
(
"
should
set
token
"
)
;
let
mut
server
=
default_server
(
)
;
let
client_hs
=
client
.
process
(
None
now
(
)
)
;
assert
!
(
client_hs
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
let
client_stream_id
=
client
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
;
client
.
stream_send
(
client_stream_id
&
[
1
2
3
]
)
.
unwrap
(
)
;
let
client_0rtt
=
client
.
process
(
None
now
(
)
)
;
assert
!
(
client_0rtt
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
assert
!
(
client_0rtt
.
as_dgram_ref
(
)
.
unwrap
(
)
.
len
(
)
<
1200
)
;
let
server_hs
=
server
.
process
(
client_hs
.
dgram
(
)
now
(
)
)
;
assert
!
(
server_hs
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
let
server_process_0rtt
=
server
.
process
(
client_0rtt
.
dgram
(
)
now
(
)
)
;
assert
!
(
server_process_0rtt
.
as_dgram_ref
(
)
.
is_none
(
)
)
;
let
server_stream_id
=
server
.
events
(
)
.
find_map
(
|
evt
|
match
evt
{
ConnectionEvent
:
:
NewStream
{
stream_id
.
.
}
=
>
Some
(
stream_id
)
_
=
>
None
}
)
.
expect
(
"
should
have
received
a
new
stream
event
"
)
;
assert_eq
!
(
client_stream_id
server_stream_id
.
as_u64
(
)
)
;
}
#
[
test
]
fn
zero_rtt_send_coalesce
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
connect
(
&
mut
client
&
mut
server
)
;
let
token
=
exchange_ticket
(
&
mut
client
&
mut
server
now
(
)
)
;
let
mut
client
=
default_client
(
)
;
client
.
enable_resumption
(
now
(
)
token
)
.
expect
(
"
should
set
token
"
)
;
let
mut
server
=
default_server
(
)
;
let
client_stream_id
=
client
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
;
client
.
stream_send
(
client_stream_id
&
[
1
2
3
]
)
.
unwrap
(
)
;
let
client_0rtt
=
client
.
process
(
None
now
(
)
)
;
assert
!
(
client_0rtt
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
assertions
:
:
assert_coalesced_0rtt
(
&
client_0rtt
.
as_dgram_ref
(
)
.
unwrap
(
)
[
.
.
]
)
;
let
server_hs
=
server
.
process
(
client_0rtt
.
dgram
(
)
now
(
)
)
;
assert
!
(
server_hs
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
let
server_stream_id
=
server
.
events
(
)
.
find_map
(
|
evt
|
match
evt
{
ConnectionEvent
:
:
NewStream
{
stream_id
}
=
>
Some
(
stream_id
)
_
=
>
None
}
)
.
expect
(
"
should
have
received
a
new
stream
event
"
)
;
assert_eq
!
(
client_stream_id
server_stream_id
.
as_u64
(
)
)
;
}
#
[
test
]
fn
zero_rtt_before_resumption_token
(
)
{
let
mut
client
=
default_client
(
)
;
assert
!
(
client
.
stream_create
(
StreamType
:
:
BiDi
)
.
is_err
(
)
)
;
}
#
[
test
]
fn
zero_rtt_send_reject
(
)
{
const
MESSAGE
:
&
[
u8
]
=
&
[
1
2
3
]
;
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
connect
(
&
mut
client
&
mut
server
)
;
let
token
=
exchange_ticket
(
&
mut
client
&
mut
server
now
(
)
)
;
let
mut
client
=
default_client
(
)
;
client
.
enable_resumption
(
now
(
)
token
)
.
expect
(
"
should
set
token
"
)
;
let
mut
server
=
Connection
:
:
new_server
(
test_fixture
:
:
DEFAULT_KEYS
test_fixture
:
:
DEFAULT_ALPN
Rc
:
:
new
(
RefCell
:
:
new
(
FixedConnectionIdManager
:
:
new
(
10
)
)
)
&
ConnectionParameters
:
:
default
(
)
)
.
unwrap
(
)
;
let
ar
=
AntiReplay
:
:
new
(
now
(
)
test_fixture
:
:
ANTI_REPLAY_WINDOW
1
3
)
.
expect
(
"
setup
anti
-
replay
"
)
;
server
.
server_enable_0rtt
(
&
ar
AllowZeroRtt
{
}
)
.
expect
(
"
enable
0
-
RTT
"
)
;
let
client_hs
=
client
.
process
(
None
now
(
)
)
;
assert
!
(
client_hs
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
let
stream_id
=
client
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
;
client
.
stream_send
(
stream_id
MESSAGE
)
.
unwrap
(
)
;
let
client_0rtt
=
client
.
process
(
None
now
(
)
)
;
assert
!
(
client_0rtt
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
let
server_hs
=
server
.
process
(
client_hs
.
dgram
(
)
now
(
)
)
;
assert
!
(
server_hs
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
let
server_ignored
=
server
.
process
(
client_0rtt
.
dgram
(
)
now
(
)
)
;
assert
!
(
server_ignored
.
as_dgram_ref
(
)
.
is_none
(
)
)
;
let
recvd_stream_evt
=
|
e
|
matches
!
(
e
ConnectionEvent
:
:
NewStream
{
.
.
}
)
;
assert
!
(
!
server
.
events
(
)
.
any
(
recvd_stream_evt
)
)
;
let
client_fin
=
client
.
process
(
server_hs
.
dgram
(
)
now
(
)
)
;
let
recvd_0rtt_reject
=
|
e
|
e
=
=
ConnectionEvent
:
:
ZeroRttRejected
;
assert
!
(
client
.
events
(
)
.
any
(
recvd_0rtt_reject
)
)
;
let
server_ack
=
server
.
process
(
client_fin
.
dgram
(
)
now
(
)
)
;
assert
!
(
server_ack
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
let
client_out
=
client
.
process
(
server_ack
.
dgram
(
)
now
(
)
)
;
assert
!
(
client_out
.
as_dgram_ref
(
)
.
is_none
(
)
)
;
let
res
=
client
.
stream_send
(
stream_id
MESSAGE
)
;
assert
!
(
res
.
is_err
(
)
)
;
assert_eq
!
(
res
.
unwrap_err
(
)
Error
:
:
InvalidStreamId
)
;
let
stream_id_after_reject
=
client
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
;
assert_eq
!
(
stream_id
stream_id_after_reject
)
;
client
.
stream_send
(
stream_id_after_reject
MESSAGE
)
.
unwrap
(
)
;
let
client_after_reject
=
client
.
process
(
None
now
(
)
)
;
assert
!
(
client_after_reject
.
as_dgram_ref
(
)
.
is_some
(
)
)
;
let
server_out
=
server
.
process
(
client_after_reject
.
dgram
(
)
now
(
)
)
;
assert
!
(
server_out
.
as_dgram_ref
(
)
.
is_none
(
)
)
;
assert
!
(
server
.
events
(
)
.
any
(
recvd_stream_evt
)
)
;
}
