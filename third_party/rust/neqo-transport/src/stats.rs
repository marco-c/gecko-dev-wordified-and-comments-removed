#
!
[
deny
(
clippy
:
:
pedantic
)
]
use
crate
:
:
packet
:
:
PacketNumber
;
use
neqo_common
:
:
qinfo
;
use
std
:
:
cell
:
:
RefCell
;
use
std
:
:
fmt
:
:
{
self
Debug
}
;
use
std
:
:
ops
:
:
Deref
;
use
std
:
:
rc
:
:
Rc
;
pub
(
crate
)
const
MAX_PTO_COUNTS
:
usize
=
16
;
#
[
derive
(
Default
Clone
)
]
#
[
allow
(
clippy
:
:
module_name_repetitions
)
]
pub
struct
FrameStats
{
pub
all
:
usize
pub
ack
:
usize
pub
largest_acknowledged
:
PacketNumber
pub
crypto
:
usize
pub
stream
:
usize
pub
reset_stream
:
usize
pub
stop_sending
:
usize
pub
ping
:
usize
pub
padding
:
usize
pub
max_streams
:
usize
pub
streams_blocked
:
usize
pub
max_data
:
usize
pub
data_blocked
:
usize
pub
max_stream_data
:
usize
pub
stream_data_blocked
:
usize
pub
new_connection_id
:
usize
pub
retire_connection_id
:
usize
pub
path_challenge
:
usize
pub
path_response
:
usize
pub
connection_close
:
usize
pub
handshake_done
:
usize
pub
new_token
:
usize
pub
ack_frequency
:
usize
}
impl
Debug
for
FrameStats
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
writeln
!
(
f
"
crypto
{
}
done
{
}
token
{
}
close
{
}
"
self
.
crypto
self
.
handshake_done
self
.
new_token
self
.
connection_close
)
?
;
writeln
!
(
f
"
ack
{
}
(
max
{
}
)
ping
{
}
padding
{
}
"
self
.
ack
self
.
largest_acknowledged
self
.
ping
self
.
padding
)
?
;
writeln
!
(
f
"
stream
{
}
reset
{
}
stop
{
}
"
self
.
stream
self
.
reset_stream
self
.
stop_sending
)
?
;
writeln
!
(
f
"
max
:
stream
{
}
data
{
}
stream_data
{
}
"
self
.
max_streams
self
.
max_data
self
.
max_stream_data
)
?
;
writeln
!
(
f
"
blocked
:
stream
{
}
data
{
}
stream_data
{
}
"
self
.
streams_blocked
self
.
data_blocked
self
.
stream_data_blocked
)
?
;
writeln
!
(
f
"
ncid
{
}
rcid
{
}
pchallenge
{
}
presponse
{
}
"
self
.
new_connection_id
self
.
retire_connection_id
self
.
path_challenge
self
.
path_response
)
?
;
writeln
!
(
f
"
ack_frequency
{
}
"
self
.
ack_frequency
)
}
}
#
[
derive
(
Default
Clone
)
]
#
[
allow
(
clippy
:
:
module_name_repetitions
)
]
pub
struct
Stats
{
info
:
String
pub
packets_rx
:
usize
pub
dups_rx
:
usize
pub
dropped_rx
:
usize
pub
saved_datagrams
:
usize
pub
packets_tx
:
usize
pub
lost
:
usize
pub
late_ack
:
usize
pub
pto_ack
:
usize
pub
resumed
:
bool
pub
pto_counts
:
[
usize
;
MAX_PTO_COUNTS
]
pub
frame_rx
:
FrameStats
pub
frame_tx
:
FrameStats
}
impl
Stats
{
pub
fn
init
(
&
mut
self
info
:
String
)
{
self
.
info
=
info
;
}
pub
fn
pkt_dropped
(
&
mut
self
reason
:
impl
AsRef
<
str
>
)
{
self
.
dropped_rx
+
=
1
;
qinfo
!
(
[
self
.
info
]
"
Dropped
received
packet
:
{
}
;
Total
:
{
}
"
reason
.
as_ref
(
)
self
.
dropped_rx
)
}
pub
fn
add_pto_count
(
&
mut
self
count
:
usize
)
{
debug_assert
!
(
count
>
0
)
;
if
count
>
=
MAX_PTO_COUNTS
{
return
;
}
self
.
pto_counts
[
count
-
1
]
+
=
1
;
if
count
>
1
{
debug_assert
!
(
self
.
pto_counts
[
count
-
2
]
>
0
)
;
self
.
pto_counts
[
count
-
2
]
-
=
1
;
}
}
}
impl
Debug
for
Stats
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
writeln
!
(
f
"
stats
for
{
}
"
self
.
info
)
?
;
writeln
!
(
f
"
rx
:
{
}
drop
{
}
dup
{
}
saved
{
}
"
self
.
packets_rx
self
.
dropped_rx
self
.
dups_rx
self
.
saved_datagrams
)
?
;
writeln
!
(
f
"
tx
:
{
}
lost
{
}
lateack
{
}
ptoack
{
}
"
self
.
packets_tx
self
.
lost
self
.
late_ack
self
.
pto_ack
)
?
;
writeln
!
(
f
"
resumed
:
{
}
"
self
.
resumed
)
?
;
writeln
!
(
f
"
frames
rx
:
"
)
?
;
self
.
frame_rx
.
fmt
(
f
)
?
;
writeln
!
(
f
"
frames
tx
:
"
)
?
;
self
.
frame_tx
.
fmt
(
f
)
}
}
#
[
derive
(
Default
Clone
)
]
#
[
allow
(
clippy
:
:
module_name_repetitions
)
]
pub
struct
StatsCell
{
stats
:
Rc
<
RefCell
<
Stats
>
>
}
impl
Deref
for
StatsCell
{
type
Target
=
RefCell
<
Stats
>
;
fn
deref
(
&
self
)
-
>
&
Self
:
:
Target
{
&
*
self
.
stats
}
}
impl
Debug
for
StatsCell
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
stats
.
borrow
(
)
.
fmt
(
f
)
}
}
