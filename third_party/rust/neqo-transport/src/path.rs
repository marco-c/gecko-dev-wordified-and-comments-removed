use
std
:
:
net
:
:
SocketAddr
;
use
crate
:
:
cid
:
:
{
ConnectionId
ConnectionIdRef
}
;
use
neqo_common
:
:
Datagram
;
pub
const
PATH_MTU_V6
:
usize
=
1337
;
pub
const
PATH_MTU_V4
:
usize
=
PATH_MTU_V6
+
20
;
#
[
derive
(
Clone
Debug
PartialEq
)
]
pub
struct
Path
{
local
:
SocketAddr
remote
:
SocketAddr
local_cids
:
Vec
<
ConnectionId
>
remote_cid
:
ConnectionId
reset_token
:
Option
<
[
u8
;
16
]
>
}
impl
Path
{
pub
fn
new
(
local
:
SocketAddr
remote
:
SocketAddr
local_cid
:
ConnectionId
remote_cid
:
ConnectionId
)
-
>
Self
{
Self
{
local
remote
local_cids
:
vec
!
[
local_cid
]
remote_cid
reset_token
:
None
}
}
pub
fn
received_on
(
&
self
d
:
&
Datagram
)
-
>
bool
{
self
.
local
=
=
d
.
destination
(
)
&
&
self
.
remote
=
=
d
.
source
(
)
}
pub
fn
mtu
(
&
self
)
-
>
usize
{
if
self
.
local
.
is_ipv4
(
)
{
PATH_MTU_V4
}
else
{
PATH_MTU_V6
}
}
pub
fn
add_local_cid
(
&
mut
self
cid
:
ConnectionId
)
{
self
.
local_cids
.
push
(
cid
)
;
}
pub
fn
valid_local_cid
(
&
self
cid
:
&
ConnectionIdRef
)
-
>
bool
{
self
.
local_cids
.
iter
(
)
.
any
(
|
c
|
c
=
=
cid
)
}
pub
fn
local_cid
(
&
self
)
-
>
&
ConnectionId
{
self
.
local_cids
.
first
(
)
.
as_ref
(
)
.
unwrap
(
)
}
pub
fn
set_remote_cid
(
&
mut
self
cid
:
&
ConnectionIdRef
)
{
self
.
remote_cid
=
ConnectionId
:
:
from
(
cid
)
;
}
pub
fn
remote_cid
(
&
self
)
-
>
&
ConnectionId
{
&
self
.
remote_cid
}
pub
fn
set_reset_token
(
&
mut
self
token
:
[
u8
;
16
]
)
{
self
.
reset_token
=
Some
(
token
)
;
}
pub
fn
reset_token
(
&
self
)
-
>
Option
<
&
[
u8
;
16
]
>
{
self
.
reset_token
.
as_ref
(
)
}
pub
fn
datagram
<
V
:
Into
<
Vec
<
u8
>
>
>
(
&
self
payload
:
V
)
-
>
Datagram
{
Datagram
:
:
new
(
self
.
local
self
.
remote
payload
)
}
pub
fn
local_address
(
&
self
)
-
>
SocketAddr
{
self
.
local
}
pub
fn
remote_address
(
&
self
)
-
>
SocketAddr
{
self
.
remote
}
}
