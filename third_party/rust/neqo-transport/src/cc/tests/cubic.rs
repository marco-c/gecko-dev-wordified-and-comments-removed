#
!
[
allow
(
clippy
:
:
cast_possible_truncation
)
]
#
!
[
allow
(
clippy
:
:
cast_sign_loss
)
]
use
crate
:
:
cc
:
:
{
classic_cc
:
:
{
ClassicCongestionControl
CWND_INITIAL
}
cubic
:
:
{
Cubic
CUBIC_ALPHA
CUBIC_BETA_USIZE_DIVISOR
CUBIC_BETA_USIZE_QUOTIENT
CUBIC_C
CUBIC_FAST_CONVERGENCE
}
CongestionControl
MAX_DATAGRAM_SIZE
MAX_DATAGRAM_SIZE_F64
}
;
use
crate
:
:
packet
:
:
PacketType
;
use
crate
:
:
tracking
:
:
SentPacket
;
use
std
:
:
convert
:
:
TryFrom
;
use
std
:
:
ops
:
:
Sub
;
use
std
:
:
time
:
:
{
Duration
Instant
}
;
use
test_fixture
:
:
now
;
const
RTT
:
Duration
=
Duration
:
:
from_millis
(
100
)
;
const
CWND_INITIAL_F64
:
f64
=
10
.
0
*
MAX_DATAGRAM_SIZE_F64
;
const
CWND_INITIAL_10_F64
:
f64
=
10
.
0
*
CWND_INITIAL_F64
;
const
CWND_INITIAL_10
:
usize
=
10
*
CWND_INITIAL
;
const
CWND_AFTER_LOSS
:
usize
=
CWND_INITIAL
*
CUBIC_BETA_USIZE_QUOTIENT
/
CUBIC_BETA_USIZE_DIVISOR
;
const
CWND_AFTER_LOSS_SLOW_START
:
usize
=
(
CWND_INITIAL
+
MAX_DATAGRAM_SIZE
)
*
CUBIC_BETA_USIZE_QUOTIENT
/
CUBIC_BETA_USIZE_DIVISOR
;
fn
fill_cwnd
(
cc
:
&
mut
ClassicCongestionControl
<
Cubic
>
mut
next_pn
:
u64
now
:
Instant
)
-
>
u64
{
while
cc
.
bytes_in_flight
(
)
<
cc
.
cwnd
(
)
{
let
sent
=
SentPacket
:
:
new
(
PacketType
:
:
Short
next_pn
now
true
Vec
:
:
new
(
)
MAX_DATAGRAM_SIZE
)
;
cc
.
on_packet_sent
(
&
sent
)
;
next_pn
+
=
1
;
}
next_pn
}
fn
ack_packet
(
cc
:
&
mut
ClassicCongestionControl
<
Cubic
>
pn
:
u64
now
:
Instant
)
{
let
acked
=
SentPacket
:
:
new
(
PacketType
:
:
Short
pn
now
true
Vec
:
:
new
(
)
MAX_DATAGRAM_SIZE
)
;
cc
.
on_packets_acked
(
&
[
acked
]
RTT
now
)
;
}
fn
packet_lost
(
cc
:
&
mut
ClassicCongestionControl
<
Cubic
>
pn
:
u64
)
{
const
PTO
:
Duration
=
Duration
:
:
from_millis
(
120
)
;
let
p_lost
=
SentPacket
:
:
new
(
PacketType
:
:
Short
pn
now
(
)
true
Vec
:
:
new
(
)
MAX_DATAGRAM_SIZE
)
;
cc
.
on_packets_lost
(
None
None
PTO
&
[
p_lost
]
)
;
}
fn
expected_tcp_acks
(
cwnd_rtt_start
:
usize
)
-
>
u64
{
(
f64
:
:
try_from
(
i32
:
:
try_from
(
cwnd_rtt_start
)
.
unwrap
(
)
)
.
unwrap
(
)
/
MAX_DATAGRAM_SIZE_F64
/
CUBIC_ALPHA
)
.
round
(
)
as
u64
}
#
[
test
]
fn
tcp_phase
(
)
{
let
mut
cubic
=
ClassicCongestionControl
:
:
new
(
Cubic
:
:
default
(
)
)
;
cubic
.
set_ssthresh
(
1
)
;
let
mut
now
=
now
(
)
;
let
start_time
=
now
;
let
mut
next_pn_send
=
0
;
let
mut
next_pn_ack
=
0
;
next_pn_send
=
fill_cwnd
(
&
mut
cubic
next_pn_send
now
)
;
let
num_tcp_increases
=
(
CUBIC_ALPHA
.
powi
(
3
)
/
(
CUBIC_C
*
RTT
.
as_secs_f64
(
)
.
powi
(
3
)
)
)
.
sqrt
(
)
.
floor
(
)
as
u64
;
for
_
in
0
.
.
num_tcp_increases
{
let
cwnd_rtt_start
=
cubic
.
cwnd
(
)
;
let
acks
=
expected_tcp_acks
(
cwnd_rtt_start
)
;
let
time_increase
=
RTT
/
u32
:
:
try_from
(
cwnd_rtt_start
/
MAX_DATAGRAM_SIZE
)
.
unwrap
(
)
;
for
_
in
0
.
.
acks
{
now
+
=
time_increase
;
ack_packet
(
&
mut
cubic
next_pn_ack
now
)
;
next_pn_ack
+
=
1
;
next_pn_send
=
fill_cwnd
(
&
mut
cubic
next_pn_send
now
)
;
}
assert_eq
!
(
cubic
.
cwnd
(
)
-
cwnd_rtt_start
MAX_DATAGRAM_SIZE
)
;
}
let
cwnd_rtt_start
=
cubic
.
cwnd
(
)
;
let
time_increase
=
RTT
/
u32
:
:
try_from
(
cwnd_rtt_start
/
MAX_DATAGRAM_SIZE
)
.
unwrap
(
)
;
let
mut
num_acks
=
0
;
while
cwnd_rtt_start
=
=
cubic
.
cwnd
(
)
{
num_acks
+
=
1
;
now
+
=
time_increase
;
ack_packet
(
&
mut
cubic
next_pn_ack
now
)
;
next_pn_ack
+
=
1
;
next_pn_send
=
fill_cwnd
(
&
mut
cubic
next_pn_send
now
)
;
}
let
expected_ack_tcp_increase
=
expected_tcp_acks
(
cwnd_rtt_start
)
;
assert
!
(
num_acks
<
expected_ack_tcp_increase
)
;
let
cwnd_rtt_start_after_tcp
=
cubic
.
cwnd
(
)
;
let
elapsed_time
=
now
-
start_time
;
let
time_increase
=
RTT
/
u32
:
:
try_from
(
cwnd_rtt_start_after_tcp
/
MAX_DATAGRAM_SIZE
)
.
unwrap
(
)
;
let
mut
num_acks2
=
0
;
while
cwnd_rtt_start_after_tcp
=
=
cubic
.
cwnd
(
)
{
num_acks2
+
=
1
;
now
+
=
time_increase
;
ack_packet
(
&
mut
cubic
next_pn_ack
now
)
;
next_pn_ack
+
=
1
;
next_pn_send
=
fill_cwnd
(
&
mut
cubic
next_pn_send
now
)
;
}
let
expected_ack_tcp_increase2
=
expected_tcp_acks
(
cwnd_rtt_start_after_tcp
)
;
assert
!
(
num_acks2
<
expected_ack_tcp_increase2
)
;
let
expected_ack_cubic_increase
=
(
(
(
(
1
.
0
+
CUBIC_C
*
(
elapsed_time
)
.
as_secs_f64
(
)
.
powi
(
3
)
)
/
CUBIC_C
)
.
cbrt
(
)
-
elapsed_time
.
as_secs_f64
(
)
)
/
time_increase
.
as_secs_f64
(
)
)
.
ceil
(
)
as
u64
;
assert_eq
!
(
num_acks2
expected_ack_cubic_increase
+
2
)
;
}
#
[
test
]
fn
cubic_phase
(
)
{
let
mut
cubic
=
ClassicCongestionControl
:
:
new
(
Cubic
:
:
default
(
)
)
;
cubic
.
set_last_max_cwnd
(
CWND_INITIAL_10_F64
)
;
cubic
.
set_ssthresh
(
1
)
;
let
mut
now
=
now
(
)
;
let
mut
next_pn_send
=
0
;
let
mut
next_pn_ack
=
0
;
next_pn_send
=
fill_cwnd
(
&
mut
cubic
next_pn_send
now
)
;
let
k
=
(
(
CWND_INITIAL_10_F64
-
CWND_INITIAL_F64
)
/
CUBIC_C
/
MAX_DATAGRAM_SIZE_F64
)
.
cbrt
(
)
;
let
epoch_start
=
now
;
let
num_rtts_w_max
=
(
k
/
RTT
.
as_secs_f64
(
)
)
.
round
(
)
as
u64
;
for
_
in
0
.
.
num_rtts_w_max
{
let
cwnd_rtt_start
=
cubic
.
cwnd
(
)
;
let
acks
=
cwnd_rtt_start
/
MAX_DATAGRAM_SIZE
;
let
time_increase
=
RTT
/
u32
:
:
try_from
(
acks
)
.
unwrap
(
)
;
for
_
in
0
.
.
acks
{
now
+
=
time_increase
;
ack_packet
(
&
mut
cubic
next_pn_ack
now
)
;
next_pn_ack
+
=
1
;
next_pn_send
=
fill_cwnd
(
&
mut
cubic
next_pn_send
now
)
;
}
let
expected
=
(
CUBIC_C
*
(
(
now
-
epoch_start
)
.
as_secs_f64
(
)
-
k
)
.
powi
(
3
)
*
MAX_DATAGRAM_SIZE_F64
+
CWND_INITIAL_10_F64
)
.
round
(
)
as
usize
;
assert_within
(
cubic
.
cwnd
(
)
expected
MAX_DATAGRAM_SIZE
)
;
}
assert_eq
!
(
cubic
.
cwnd
(
)
CWND_INITIAL_10
)
;
}
fn
assert_within
<
T
:
Sub
<
Output
=
T
>
+
PartialOrd
+
Copy
>
(
value
:
T
expected
:
T
margin
:
T
)
{
if
value
>
=
expected
{
assert
!
(
value
-
expected
<
margin
)
;
}
else
{
assert
!
(
expected
-
value
<
margin
)
;
}
}
#
[
test
]
fn
congestion_event_slow_start
(
)
{
let
mut
cubic
=
ClassicCongestionControl
:
:
new
(
Cubic
:
:
default
(
)
)
;
let
_
=
fill_cwnd
(
&
mut
cubic
0
now
(
)
)
;
ack_packet
(
&
mut
cubic
0
now
(
)
)
;
assert_within
(
cubic
.
last_max_cwnd
(
)
0
.
0
f64
:
:
EPSILON
)
;
assert_eq
!
(
cubic
.
cwnd
(
)
CWND_INITIAL
+
MAX_DATAGRAM_SIZE
)
;
packet_lost
(
&
mut
cubic
1
)
;
assert_within
(
cubic
.
last_max_cwnd
(
)
CWND_INITIAL_F64
+
MAX_DATAGRAM_SIZE_F64
f64
:
:
EPSILON
)
;
assert_eq
!
(
cubic
.
cwnd
(
)
CWND_AFTER_LOSS_SLOW_START
)
;
}
#
[
test
]
fn
congestion_event_congestion_avoidance
(
)
{
let
mut
cubic
=
ClassicCongestionControl
:
:
new
(
Cubic
:
:
default
(
)
)
;
cubic
.
set_ssthresh
(
1
)
;
cubic
.
set_last_max_cwnd
(
3
.
0
*
MAX_DATAGRAM_SIZE_F64
)
;
let
_
=
fill_cwnd
(
&
mut
cubic
0
now
(
)
)
;
ack_packet
(
&
mut
cubic
0
now
(
)
)
;
assert_eq
!
(
cubic
.
cwnd
(
)
CWND_INITIAL
)
;
packet_lost
(
&
mut
cubic
1
)
;
assert_within
(
cubic
.
last_max_cwnd
(
)
CWND_INITIAL_F64
f64
:
:
EPSILON
)
;
assert_eq
!
(
cubic
.
cwnd
(
)
CWND_AFTER_LOSS
)
;
}
#
[
test
]
fn
congestion_event_congestion_avoidance_2
(
)
{
let
mut
cubic
=
ClassicCongestionControl
:
:
new
(
Cubic
:
:
default
(
)
)
;
cubic
.
set_ssthresh
(
1
)
;
cubic
.
set_last_max_cwnd
(
CWND_INITIAL_10_F64
)
;
let
_
=
fill_cwnd
(
&
mut
cubic
0
now
(
)
)
;
ack_packet
(
&
mut
cubic
0
now
(
)
)
;
assert_within
(
cubic
.
last_max_cwnd
(
)
CWND_INITIAL_10_F64
f64
:
:
EPSILON
)
;
assert_eq
!
(
cubic
.
cwnd
(
)
CWND_INITIAL
)
;
packet_lost
(
&
mut
cubic
1
)
;
assert_within
(
cubic
.
last_max_cwnd
(
)
CWND_INITIAL_F64
*
CUBIC_FAST_CONVERGENCE
f64
:
:
EPSILON
)
;
assert_eq
!
(
cubic
.
cwnd
(
)
CWND_AFTER_LOSS
)
;
}
#
[
test
]
fn
congestion_event_congestion_avoidance_test_no_overflow
(
)
{
const
PTO
:
Duration
=
Duration
:
:
from_millis
(
120
)
;
let
mut
cubic
=
ClassicCongestionControl
:
:
new
(
Cubic
:
:
default
(
)
)
;
cubic
.
set_ssthresh
(
1
)
;
cubic
.
set_last_max_cwnd
(
CWND_INITIAL_10_F64
)
;
let
_
=
fill_cwnd
(
&
mut
cubic
0
now
(
)
)
;
ack_packet
(
&
mut
cubic
1
now
(
)
)
;
assert_within
(
cubic
.
last_max_cwnd
(
)
CWND_INITIAL_10_F64
f64
:
:
EPSILON
)
;
assert_eq
!
(
cubic
.
cwnd
(
)
CWND_INITIAL
)
;
ack_packet
(
&
mut
cubic
0
now
(
)
-
PTO
)
;
}
