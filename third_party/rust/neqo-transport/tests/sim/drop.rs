#
!
[
allow
(
clippy
:
:
module_name_repetitions
)
]
use
super
:
:
{
Node
Rng
}
;
use
neqo_common
:
:
{
qtrace
Datagram
}
;
use
neqo_transport
:
:
Output
;
use
std
:
:
fmt
:
:
{
self
Debug
}
;
use
std
:
:
time
:
:
Instant
;
pub
struct
Drop
{
threshold
:
u64
max
:
u64
rng
:
Option
<
Rng
>
}
impl
Drop
{
pub
fn
new
(
threshold
:
u64
max
:
u64
)
-
>
Self
{
Self
{
threshold
max
rng
:
None
}
}
pub
fn
percentage
(
pct
:
u8
)
-
>
Self
{
Self
:
:
new
(
u64
:
:
from
(
pct
)
*
10
1000
)
}
pub
fn
drop
(
&
mut
self
)
-
>
bool
{
let
mut
rng
=
self
.
rng
.
as_ref
(
)
.
unwrap
(
)
.
borrow_mut
(
)
;
let
r
=
rng
.
random_from
(
0
.
.
self
.
max
)
;
r
<
self
.
threshold
}
}
impl
Node
for
Drop
{
fn
init
(
&
mut
self
rng
:
Rng
_now
:
Instant
)
{
self
.
rng
=
Some
(
rng
)
;
}
fn
process
(
&
mut
self
d
:
Option
<
Datagram
>
_now
:
Instant
)
-
>
Output
{
if
let
Some
(
dgram
)
=
d
{
if
self
.
drop
(
)
{
qtrace
!
(
"
drop
{
}
"
dgram
.
len
(
)
)
;
Output
:
:
None
}
else
{
Output
:
:
Datagram
(
dgram
)
}
}
else
{
Output
:
:
None
}
}
}
impl
Debug
for
Drop
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
"
drop
"
)
}
}
