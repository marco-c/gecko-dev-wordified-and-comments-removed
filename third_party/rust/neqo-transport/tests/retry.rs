#
!
[
cfg
(
not
(
feature
=
"
disable
-
encryption
"
)
)
]
mod
common
;
use
std
:
:
{
net
:
:
{
IpAddr
Ipv4Addr
SocketAddr
}
time
:
:
Duration
}
;
use
common
:
:
{
assert_dscp
connected_server
default_server
generate_ticket
}
;
use
neqo_common
:
:
{
hex_with_len
qdebug
qtrace
Datagram
Encoder
Role
}
;
use
neqo_crypto
:
:
{
generate_ech_keys
AuthenticationStatus
}
;
use
neqo_transport
:
:
{
server
:
:
ValidateAddress
CloseReason
ConnectionParameters
Error
State
StreamType
MIN_INITIAL_PACKET_SIZE
}
;
use
test_fixture
:
:
{
assertions
damage_ech_config
datagram
default_client
header_protection
:
:
{
self
decode_initial_header
initial_aead_and_hp
}
now
CountingConnectionIdGenerator
}
;
#
[
test
]
fn
retry_basic
(
)
{
let
mut
server
=
default_server
(
)
;
server
.
set_validation
(
ValidateAddress
:
:
Always
)
;
let
mut
client
=
default_client
(
)
;
let
dgram
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
let
dgram2
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
&
&
dgram2
.
is_some
(
)
)
;
_
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
.
unwrap
(
)
;
let
dgram
=
server
.
process
(
dgram2
now
(
)
)
.
dgram
(
)
.
unwrap
(
)
;
assertions
:
:
assert_retry
(
&
dgram
)
;
let
dgram
=
client
.
process
(
Some
(
dgram
)
now
(
)
)
.
dgram
(
)
;
let
dgram2
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
&
&
dgram2
.
is_some
(
)
)
;
_
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
.
unwrap
(
)
;
let
dgram
=
server
.
process
(
dgram2
now
(
)
)
.
dgram
(
)
;
let
dgram
=
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
drop
(
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
)
;
client
.
authenticated
(
AuthenticationStatus
:
:
Ok
now
(
)
)
;
let
dgram
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assert_eq
!
(
*
client
.
state
(
)
State
:
:
Connected
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
connected_server
(
&
server
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
#
[
test
]
fn
retry_ech_fallback
(
)
{
const
CONFIG_ID
:
u8
=
12
;
const
PUBLIC_NAME
:
&
str
=
"
public
.
name
.
example
"
;
let
mut
server
=
default_server
(
)
;
server
.
set_validation
(
ValidateAddress
:
:
Always
)
;
let
mut
client
=
default_client
(
)
;
let
(
sk
pk
)
=
generate_ech_keys
(
)
.
unwrap
(
)
;
server
.
enable_ech
(
CONFIG_ID
PUBLIC_NAME
&
sk
&
pk
)
.
unwrap
(
)
;
client
.
client_enable_ech
(
damage_ech_config
(
server
.
ech_config
(
)
)
)
.
unwrap
(
)
;
let
dgram
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
let
dgram2
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
&
&
dgram2
.
is_some
(
)
)
;
_
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
.
unwrap
(
)
;
let
dgram
=
server
.
process
(
dgram2
now
(
)
)
.
dgram
(
)
.
unwrap
(
)
;
assertions
:
:
assert_retry
(
&
dgram
)
;
let
dgram
=
client
.
process
(
Some
(
dgram
)
now
(
)
)
.
dgram
(
)
;
let
dgram2
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
&
&
dgram2
.
is_some
(
)
)
;
_
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
.
unwrap
(
)
;
let
dgram
=
server
.
process
(
dgram2
now
(
)
)
.
dgram
(
)
;
let
dgram
=
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
drop
(
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
)
;
client
.
authenticated
(
AuthenticationStatus
:
:
Ok
now
(
)
)
;
let
dgram
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
State
:
:
Closing
{
error
:
err
.
.
}
=
client
.
state
(
)
else
{
panic
!
(
"
client
should
be
closing
"
)
;
}
;
let
CloseReason
:
:
Transport
(
Error
:
:
EchRetry
(
fallback_config
)
)
=
err
else
{
panic
!
(
"
client
should
provide
fallback
config
"
)
;
}
;
assert_eq
!
(
fallback_config
server
.
ech_config
(
)
)
;
}
#
[
test
]
fn
implicit_rtt_retry
(
)
{
const
RTT
:
Duration
=
Duration
:
:
from_secs
(
2
)
;
let
mut
server
=
default_server
(
)
;
server
.
set_validation
(
ValidateAddress
:
:
Always
)
;
let
mut
client
=
default_client
(
)
;
let
mut
now
=
now
(
)
;
let
dgram
=
client
.
process_output
(
now
)
.
dgram
(
)
;
now
+
=
RTT
/
2
;
let
dgram
=
server
.
process
(
dgram
now
)
.
dgram
(
)
;
assertions
:
:
assert_retry
(
dgram
.
as_ref
(
)
.
unwrap
(
)
)
;
now
+
=
RTT
/
2
;
client
.
process_input
(
dgram
.
unwrap
(
)
now
)
;
assert_eq
!
(
client
.
stats
(
)
.
rtt
RTT
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
#
[
test
]
fn
retry_expired
(
)
{
let
mut
server
=
default_server
(
)
;
server
.
set_validation
(
ValidateAddress
:
:
Always
)
;
let
mut
client
=
default_client
(
)
;
let
mut
now
=
now
(
)
;
let
dgram
=
client
.
process_output
(
now
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
dgram
=
server
.
process
(
dgram
now
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assertions
:
:
assert_retry
(
dgram
.
as_ref
(
)
.
unwrap
(
)
)
;
let
dgram
=
client
.
process
(
dgram
now
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
now
+
=
Duration
:
:
from_secs
(
60
)
;
let
dgram
=
server
.
process
(
dgram
now
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_none
(
)
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
#
[
test
]
fn
retry_0rtt
(
)
{
let
mut
server
=
default_server
(
)
;
let
token
=
generate_ticket
(
&
mut
server
)
;
server
.
set_validation
(
ValidateAddress
:
:
Always
)
;
let
mut
client
=
default_client
(
)
;
client
.
enable_resumption
(
now
(
)
&
token
)
.
unwrap
(
)
;
let
client_stream
=
client
.
stream_create
(
StreamType
:
:
UniDi
)
.
unwrap
(
)
;
client
.
stream_send
(
client_stream
&
[
1
2
3
]
)
.
unwrap
(
)
;
let
dgram
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
let
dgram2
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
&
&
dgram2
.
is_some
(
)
)
;
assertions
:
:
assert_coalesced_0rtt
(
dgram2
.
as_ref
(
)
.
unwrap
(
)
)
;
_
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
let
dgram
=
server
.
process
(
dgram2
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assertions
:
:
assert_retry
(
dgram
.
as_ref
(
)
.
unwrap
(
)
)
;
let
dgram
=
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
let
dgram2
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
&
&
dgram2
.
is_some
(
)
)
;
assertions
:
:
assert_coalesced_0rtt
(
dgram2
.
as_ref
(
)
.
unwrap
(
)
)
;
_
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
let
dgram
=
server
.
process
(
dgram2
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
dgram
=
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
let
dgram
=
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assert_eq
!
(
*
client
.
state
(
)
State
:
:
Connected
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
connected_server
(
&
server
)
;
assert
!
(
client
.
tls_info
(
)
.
unwrap
(
)
.
resumed
(
)
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
#
[
test
]
fn
retry_different_ip
(
)
{
let
mut
server
=
default_server
(
)
;
server
.
set_validation
(
ValidateAddress
:
:
Always
)
;
let
mut
client
=
default_client
(
)
;
let
dgram
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assertions
:
:
assert_retry
(
dgram
.
as_ref
(
)
.
unwrap
(
)
)
;
let
dgram
=
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
dgram
=
dgram
.
unwrap
(
)
;
let
other_v4
=
IpAddr
:
:
V4
(
Ipv4Addr
:
:
new
(
127
0
0
2
)
)
;
let
other_addr
=
SocketAddr
:
:
new
(
other_v4
443
)
;
let
from_other
=
Datagram
:
:
new
(
other_addr
dgram
.
destination
(
)
dgram
.
tos
(
)
&
dgram
[
.
.
]
)
;
let
dgram
=
server
.
process
(
Some
(
from_other
)
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_none
(
)
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
#
[
test
]
fn
new_token_different_ip
(
)
{
let
mut
server
=
default_server
(
)
;
let
token
=
generate_ticket
(
&
mut
server
)
;
server
.
set_validation
(
ValidateAddress
:
:
NoToken
)
;
let
mut
client
=
default_client
(
)
;
client
.
enable_resumption
(
now
(
)
&
token
)
.
unwrap
(
)
;
let
dgram
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assertions
:
:
assert_initial
(
dgram
.
as_ref
(
)
.
unwrap
(
)
true
)
;
let
d
=
dgram
.
unwrap
(
)
;
let
src
=
SocketAddr
:
:
new
(
IpAddr
:
:
V4
(
Ipv4Addr
:
:
new
(
127
0
0
2
)
)
d
.
source
(
)
.
port
(
)
)
;
let
dgram
=
Some
(
Datagram
:
:
new
(
src
d
.
destination
(
)
d
.
tos
(
)
&
d
[
.
.
]
)
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assertions
:
:
assert_retry
(
dgram
.
as_ref
(
)
.
unwrap
(
)
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
#
[
test
]
fn
new_token_expired
(
)
{
let
mut
server
=
default_server
(
)
;
let
token
=
generate_ticket
(
&
mut
server
)
;
server
.
set_validation
(
ValidateAddress
:
:
NoToken
)
;
let
mut
client
=
default_client
(
)
;
client
.
enable_resumption
(
now
(
)
&
token
)
.
unwrap
(
)
;
let
dgram
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assertions
:
:
assert_initial
(
dgram
.
as_ref
(
)
.
unwrap
(
)
true
)
;
let
the_future
=
now
(
)
+
Duration
:
:
from_secs
(
60
*
60
*
24
*
30
)
;
let
d
=
dgram
.
unwrap
(
)
;
let
src
=
SocketAddr
:
:
new
(
d
.
source
(
)
.
ip
(
)
d
.
source
(
)
.
port
(
)
+
1
)
;
let
dgram
=
Some
(
Datagram
:
:
new
(
src
d
.
destination
(
)
d
.
tos
(
)
&
d
[
.
.
]
)
)
;
let
dgram
=
server
.
process
(
dgram
the_future
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assertions
:
:
assert_retry
(
dgram
.
as_ref
(
)
.
unwrap
(
)
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
#
[
test
]
fn
retry_after_initial
(
)
{
neqo_common
:
:
log
:
:
init
(
None
)
;
let
mut
server
=
default_server
(
)
;
let
mut
retry_server
=
default_server
(
)
;
retry_server
.
set_validation
(
ValidateAddress
:
:
Always
)
;
let
mut
client
=
default_client
(
)
;
let
cinit
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
let
cinit2
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
cinit
.
is_some
(
)
&
&
cinit2
.
is_some
(
)
)
;
_
=
server
.
process
(
cinit
.
clone
(
)
now
(
)
)
.
dgram
(
)
;
let
server_initial
=
server
.
process
(
cinit2
now
(
)
)
.
dgram
(
)
.
unwrap
(
)
;
let
server_handshake
=
server
.
process_output
(
now
(
)
)
.
dgram
(
)
.
unwrap
(
)
;
let
dgram
=
client
.
process
(
Some
(
server_initial
)
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assert
!
(
*
client
.
state
(
)
!
=
State
:
:
Connected
)
;
let
retry
=
retry_server
.
process
(
cinit
now
(
)
)
.
dgram
(
)
;
assert
!
(
retry
.
is_some
(
)
)
;
assertions
:
:
assert_retry
(
retry
.
as_ref
(
)
.
unwrap
(
)
)
;
let
junk
=
client
.
process
(
retry
now
(
)
)
.
dgram
(
)
;
assert
!
(
junk
.
is_none
(
)
)
;
let
dgram
=
client
.
process
(
Some
(
server_handshake
)
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assert
!
(
test_fixture
:
:
maybe_authenticate
(
&
mut
client
)
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
let
dgram
=
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assert_eq
!
(
*
client
.
state
(
)
State
:
:
Connected
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
connected_server
(
&
server
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
#
[
test
]
fn
retry_bad_integrity
(
)
{
let
mut
server
=
default_server
(
)
;
server
.
set_validation
(
ValidateAddress
:
:
Always
)
;
let
mut
client
=
default_client
(
)
;
let
dgram
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
let
dgram2
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
&
&
dgram2
.
is_some
(
)
)
;
_
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
let
dgram
=
server
.
process
(
dgram2
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
retry
=
&
dgram
.
as_ref
(
)
.
unwrap
(
)
;
assertions
:
:
assert_retry
(
retry
)
;
let
mut
tweaked
=
retry
.
to_vec
(
)
;
tweaked
[
retry
.
len
(
)
-
1
]
^
=
0x45
;
let
tweaked_packet
=
Datagram
:
:
new
(
retry
.
source
(
)
retry
.
destination
(
)
retry
.
tos
(
)
tweaked
)
;
let
dgram
=
client
.
process
(
Some
(
tweaked_packet
)
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_none
(
)
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
#
[
test
]
fn
retry_bad_token
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
retry_server
=
default_server
(
)
;
retry_server
.
set_validation
(
ValidateAddress
:
:
Always
)
;
let
mut
server
=
default_server
(
)
;
let
client_initial1
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
client_initial1
.
is_some
(
)
)
;
let
retry
=
retry_server
.
process
(
client_initial1
now
(
)
)
.
dgram
(
)
;
assert
!
(
retry
.
is_some
(
)
)
;
let
client_initial2
=
client
.
process
(
retry
now
(
)
)
.
dgram
(
)
;
assert
!
(
client_initial2
.
is_some
(
)
)
;
let
dgram
=
server
.
process
(
client_initial2
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_none
(
)
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
#
[
test
]
fn
retry_after_pto
(
)
{
let
mut
client
=
default_client
(
)
;
let
mut
server
=
default_server
(
)
;
server
.
set_validation
(
ValidateAddress
:
:
Always
)
;
let
mut
now
=
now
(
)
;
let
ci
=
client
.
process_output
(
now
)
.
dgram
(
)
;
let
ci2
=
client
.
process_output
(
now
)
.
dgram
(
)
;
assert
!
(
ci
.
is_some
(
)
&
&
ci2
.
is_some
(
)
)
;
now
+
=
Duration
:
:
from_secs
(
1
)
;
let
pto
=
client
.
process_output
(
now
)
.
dgram
(
)
;
assert
!
(
pto
.
unwrap
(
)
.
len
(
)
>
=
MIN_INITIAL_PACKET_SIZE
)
;
_
=
client
.
process_output
(
now
)
.
dgram
(
)
;
let
cb
=
client
.
process_output
(
now
)
.
callback
(
)
;
assert_ne
!
(
cb
Duration
:
:
new
(
0
0
)
)
;
_
=
server
.
process
(
ci
now
)
.
dgram
(
)
;
let
retry
=
server
.
process
(
ci2
now
)
.
dgram
(
)
;
assertions
:
:
assert_retry
(
retry
.
as_ref
(
)
.
unwrap
(
)
)
;
let
ci2
=
client
.
process
(
retry
now
)
.
dgram
(
)
;
assert
!
(
ci2
.
unwrap
(
)
.
len
(
)
>
=
MIN_INITIAL_PACKET_SIZE
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
#
[
test
]
fn
vn_after_retry
(
)
{
let
mut
server
=
default_server
(
)
;
server
.
set_validation
(
ValidateAddress
:
:
Always
)
;
let
mut
client
=
default_client
(
)
;
let
dgram
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
let
dgram2
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
&
&
dgram2
.
is_some
(
)
)
;
_
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
let
dgram
=
server
.
process
(
dgram2
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assertions
:
:
assert_retry
(
dgram
.
as_ref
(
)
.
unwrap
(
)
)
;
let
dgram
=
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
_
=
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
let
mut
encoder
=
Encoder
:
:
default
(
)
;
encoder
.
encode_byte
(
0x80
)
;
encoder
.
encode
(
&
[
0
;
4
]
)
;
encoder
.
encode_vec
(
1
&
client
.
odcid
(
)
.
unwrap
(
)
[
.
.
]
)
;
encoder
.
encode_vec
(
1
&
[
]
)
;
encoder
.
encode_uint
(
4
0x5a5a_6a6a_u64
)
;
let
vn
=
datagram
(
encoder
.
into
(
)
)
;
assert_ne
!
(
client
.
process
(
Some
(
vn
)
now
(
)
)
.
callback
(
)
Duration
:
:
from_secs
(
0
)
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
#
[
test
]
fn
mitm_retry
(
)
{
let
mut
client
=
test_fixture
:
:
new_client
:
:
<
CountingConnectionIdGenerator
>
(
ConnectionParameters
:
:
default
(
)
.
mlkem
(
false
)
)
;
let
mut
retry_server
=
default_server
(
)
;
retry_server
.
set_validation
(
ValidateAddress
:
:
Always
)
;
let
mut
server
=
default_server
(
)
;
let
client_initial1
=
client
.
process_output
(
now
(
)
)
.
dgram
(
)
;
assert
!
(
client_initial1
.
is_some
(
)
)
;
let
retry
=
retry_server
.
process
(
client_initial1
now
(
)
)
.
dgram
(
)
;
assert
!
(
retry
.
is_some
(
)
)
;
let
client_initial2
=
client
.
process
(
retry
now
(
)
)
.
dgram
(
)
;
assert
!
(
client_initial2
.
is_some
(
)
)
;
let
client_initial2
=
client_initial2
.
unwrap
(
)
;
let
(
protected_header
d_cid
s_cid
payload
)
=
decode_initial_header
(
&
client_initial2
Role
:
:
Client
)
.
unwrap
(
)
;
let
(
aead
hp
)
=
initial_aead_and_hp
(
d_cid
Role
:
:
Client
)
;
let
(
header
pn
)
=
header_protection
:
:
remove
(
&
hp
protected_header
payload
)
;
let
pn_len
=
header
.
len
(
)
-
protected_header
.
len
(
)
;
let
mut
plaintext_buf
=
vec
!
[
0
;
client_initial2
.
len
(
)
]
;
let
plaintext
=
aead
.
decrypt
(
pn
&
header
&
payload
[
pn_len
.
.
]
&
mut
plaintext_buf
)
.
unwrap
(
)
;
let
mut
enc
=
Encoder
:
:
with_capacity
(
header
.
len
(
)
)
;
enc
.
encode
(
&
header
[
.
.
5
]
)
.
encode_vec
(
1
d_cid
)
.
encode_vec
(
1
s_cid
)
.
encode_vvec
(
&
[
]
)
.
encode_varint
(
u64
:
:
try_from
(
payload
.
len
(
)
)
.
unwrap
(
)
)
;
let
pn_offset
=
enc
.
len
(
)
;
let
notoken_header
=
enc
.
encode_uint
(
pn_len
pn
)
.
as_ref
(
)
.
to_vec
(
)
;
qtrace
!
(
"
notoken_header
=
{
}
"
hex_with_len
(
&
notoken_header
)
)
;
let
mut
notoken_packet
=
Encoder
:
:
with_capacity
(
MIN_INITIAL_PACKET_SIZE
)
.
encode
(
&
notoken_header
)
.
as_ref
(
)
.
to_vec
(
)
;
notoken_packet
.
resize_with
(
MIN_INITIAL_PACKET_SIZE
u8
:
:
default
)
;
aead
.
encrypt
(
pn
&
notoken_header
plaintext
&
mut
notoken_packet
[
notoken_header
.
len
(
)
.
.
]
)
.
unwrap
(
)
;
header_protection
:
:
apply
(
&
hp
&
mut
notoken_packet
pn_offset
.
.
(
pn_offset
+
pn_len
)
)
;
qtrace
!
(
"
packet
=
{
}
"
hex_with_len
(
&
notoken_packet
)
)
;
let
new_datagram
=
Datagram
:
:
new
(
client_initial2
.
source
(
)
client_initial2
.
destination
(
)
client_initial2
.
tos
(
)
notoken_packet
)
;
qdebug
!
(
"
passing
modified
Initial
to
the
main
server
"
)
;
let
dgram
=
server
.
process
(
Some
(
new_datagram
)
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
dgram
=
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
let
dgram
=
server
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_none
(
)
)
;
assert
!
(
test_fixture
:
:
maybe_authenticate
(
&
mut
client
)
)
;
let
dgram
=
client
.
process
(
dgram
now
(
)
)
.
dgram
(
)
;
assert
!
(
dgram
.
is_some
(
)
)
;
assert
!
(
matches
!
(
*
client
.
state
(
)
State
:
:
Closing
{
error
:
CloseReason
:
:
Transport
(
Error
:
:
ProtocolViolation
)
.
.
}
)
)
;
assert_dscp
(
&
client
.
stats
(
)
)
;
}
