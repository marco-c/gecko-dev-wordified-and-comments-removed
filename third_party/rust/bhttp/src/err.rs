#
[
derive
(
Debug
)
]
pub
enum
Error
{
ConnectUnsupported
CharacterEncoding
(
std
:
:
string
:
:
FromUtf8Error
)
IntRange
(
std
:
:
num
:
:
TryFromIntError
)
InvalidMode
Io
(
std
:
:
io
:
:
Error
)
Missing
(
u8
)
MissingUrlComponent
ObsFold
ParseInt
(
std
:
:
num
:
:
ParseIntError
)
Truncated
UpgradeUnsupported
UrlParse
(
url
:
:
ParseError
)
}
macro_rules
!
forward_errors
{
{
(
(
#
[
a
:
meta
]
)
*
t
:
path
=
>
v
:
ident
)
*
(
)
?
}
=
>
{
(
impl
From
<
t
>
for
Error
{
fn
from
(
e
:
t
)
-
>
Self
{
Self
:
:
v
(
e
)
}
}
)
*
impl
std
:
:
error
:
:
Error
for
Error
{
fn
source
(
&
self
)
-
>
Option
<
&
(
dyn
std
:
:
error
:
:
Error
+
'
static
)
>
{
match
self
{
(
(
#
[
a
]
)
*
Self
:
:
v
(
e
)
=
>
Some
(
e
)
)
*
_
=
>
None
}
}
}
}
;
}
forward_errors
!
{
std
:
:
io
:
:
Error
=
>
Io
std
:
:
string
:
:
FromUtf8Error
=
>
CharacterEncoding
std
:
:
num
:
:
ParseIntError
=
>
ParseInt
std
:
:
num
:
:
TryFromIntError
=
>
IntRange
url
:
:
ParseError
=
>
UrlParse
}
impl
std
:
:
fmt
:
:
Display
for
Error
{
fn
fmt
(
&
self
f
:
&
mut
std
:
:
fmt
:
:
Formatter
<
'
_
>
)
-
>
Result
<
(
)
std
:
:
fmt
:
:
Error
>
{
write
!
(
f
"
{
:
?
}
"
self
)
}
}
#
[
cfg
(
any
(
feature
=
"
read
-
http
"
feature
=
"
write
-
http
"
feature
=
"
read
-
bhttp
"
feature
=
"
write
-
bhttp
"
)
)
]
pub
type
Res
<
T
>
=
Result
<
T
Error
>
;
