#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
!
[
cfg_attr
(
test
deny
(
warnings
)
)
]
#
!
[
deny
(
missing_docs
)
]
#
[
cfg
(
feature
=
"
std
"
)
]
extern
crate
std
as
core
;
use
core
:
:
{
fmt
result
str
slice
}
;
use
iter
:
:
Bytes
;
mod
iter
;
macro_rules
!
next
{
(
bytes
:
ident
)
=
>
(
{
match
bytes
.
next
(
)
{
Some
(
b
)
=
>
b
None
=
>
return
Ok
(
Status
:
:
Partial
)
}
}
)
}
macro_rules
!
expect
{
(
bytes
:
ident
.
next
(
)
=
=
pat
:
pat
=
>
ret
:
expr
)
=
>
{
expect
!
(
next
!
(
bytes
)
=
>
pat
|
?
ret
)
}
;
(
e
:
expr
=
>
pat
:
pat
|
?
ret
:
expr
)
=
>
{
match
e
{
v
pat
=
>
v
_
=
>
return
ret
}
}
;
}
macro_rules
!
complete
{
(
e
:
expr
)
=
>
{
match
try
!
(
e
)
{
Status
:
:
Complete
(
v
)
=
>
v
Status
:
:
Partial
=
>
return
Ok
(
Status
:
:
Partial
)
}
}
}
#
[
inline
]
fn
shrink
<
T
>
(
slice
:
&
mut
&
mut
[
T
]
len
:
usize
)
{
debug_assert
!
(
slice
.
len
(
)
>
=
len
)
;
let
ptr
=
slice
.
as_mut_ptr
(
)
;
*
slice
=
unsafe
{
slice
:
:
from_raw_parts_mut
(
ptr
len
)
}
;
}
#
[
inline
]
fn
is_token
(
b
:
u8
)
-
>
bool
{
b
>
0x1F
&
&
b
<
0x7F
}
macro_rules
!
space
{
(
bytes
:
ident
or
err
:
expr
)
=
>
(
{
expect
!
(
bytes
.
next
(
)
=
=
b
'
'
=
>
Err
(
err
)
)
;
bytes
.
slice
(
)
;
}
)
}
macro_rules
!
newline
{
(
bytes
:
ident
)
=
>
(
{
match
next
!
(
bytes
)
{
b
'
\
r
'
=
>
{
expect
!
(
bytes
.
next
(
)
=
=
b
'
\
n
'
=
>
Err
(
Error
:
:
NewLine
)
)
;
bytes
.
slice
(
)
;
}
b
'
\
n
'
=
>
{
bytes
.
slice
(
)
;
}
_
=
>
return
Err
(
Error
:
:
NewLine
)
}
}
)
}
#
[
derive
(
Copy
Clone
PartialEq
Eq
Debug
)
]
pub
enum
Error
{
HeaderName
HeaderValue
NewLine
Status
Token
TooManyHeaders
Version
}
impl
Error
{
#
[
inline
]
fn
description_str
(
&
self
)
-
>
&
'
static
str
{
match
*
self
{
Error
:
:
HeaderName
=
>
"
invalid
header
name
"
Error
:
:
HeaderValue
=
>
"
invalid
header
value
"
Error
:
:
NewLine
=
>
"
invalid
new
line
"
Error
:
:
Status
=
>
"
invalid
response
status
"
Error
:
:
Token
=
>
"
invalid
token
"
Error
:
:
TooManyHeaders
=
>
"
too
many
headers
"
Error
:
:
Version
=
>
"
invalid
HTTP
version
"
}
}
}
impl
fmt
:
:
Display
for
Error
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
self
.
description_str
(
)
)
}
}
#
[
cfg
(
feature
=
"
std
"
)
]
impl
std
:
:
error
:
:
Error
for
Error
{
fn
description
(
&
self
)
-
>
&
str
{
self
.
description_str
(
)
}
}
#
[
derive
(
Debug
PartialEq
Eq
)
]
pub
struct
InvalidChunkSize
;
impl
fmt
:
:
Display
for
InvalidChunkSize
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
"
invalid
chunk
size
"
)
}
}
pub
type
Result
<
T
>
=
result
:
:
Result
<
Status
<
T
>
Error
>
;
#
[
derive
(
Copy
Clone
PartialEq
Debug
)
]
pub
enum
Status
<
T
>
{
Complete
(
T
)
Partial
}
impl
<
T
>
Status
<
T
>
{
#
[
inline
]
pub
fn
is_complete
(
&
self
)
-
>
bool
{
match
*
self
{
Status
:
:
Complete
(
.
.
)
=
>
true
Status
:
:
Partial
=
>
false
}
}
#
[
inline
]
pub
fn
is_partial
(
&
self
)
-
>
bool
{
match
*
self
{
Status
:
:
Complete
(
.
.
)
=
>
false
Status
:
:
Partial
=
>
true
}
}
#
[
inline
]
pub
fn
unwrap
(
self
)
-
>
T
{
match
self
{
Status
:
:
Complete
(
t
)
=
>
t
Status
:
:
Partial
=
>
panic
!
(
"
Tried
to
unwrap
Status
:
:
Partial
"
)
}
}
}
pub
struct
Request
<
'
headers
'
buf
:
'
headers
>
{
pub
method
:
Option
<
&
'
buf
str
>
pub
path
:
Option
<
&
'
buf
str
>
pub
version
:
Option
<
u8
>
pub
headers
:
&
'
headers
mut
[
Header
<
'
buf
>
]
}
impl
<
'
h
'
b
>
Request
<
'
h
'
b
>
{
#
[
inline
]
pub
fn
new
(
headers
:
&
'
h
mut
[
Header
<
'
b
>
]
)
-
>
Request
<
'
h
'
b
>
{
Request
{
method
:
None
path
:
None
version
:
None
headers
:
headers
}
}
pub
fn
parse
(
&
mut
self
buf
:
&
'
b
[
u8
]
)
-
>
Result
<
usize
>
{
let
orig_len
=
buf
.
len
(
)
;
let
mut
bytes
=
Bytes
:
:
new
(
buf
)
;
complete
!
(
skip_empty_lines
(
&
mut
bytes
)
)
;
self
.
method
=
Some
(
complete
!
(
parse_token
(
&
mut
bytes
)
)
)
;
self
.
path
=
Some
(
complete
!
(
parse_token
(
&
mut
bytes
)
)
)
;
self
.
version
=
Some
(
complete
!
(
parse_version
(
&
mut
bytes
)
)
)
;
newline
!
(
bytes
)
;
let
len
=
orig_len
-
bytes
.
len
(
)
;
let
headers_len
=
complete
!
(
parse_headers_iter
(
&
mut
self
.
headers
&
mut
bytes
)
)
;
Ok
(
Status
:
:
Complete
(
len
+
headers_len
)
)
}
}
#
[
inline
]
fn
skip_empty_lines
(
bytes
:
&
mut
Bytes
)
-
>
Result
<
(
)
>
{
loop
{
let
b
=
bytes
.
peek
(
)
;
match
b
{
Some
(
b
'
\
r
'
)
=
>
{
bytes
.
bump
(
)
;
expect
!
(
bytes
.
next
(
)
=
=
b
'
\
n
'
=
>
Err
(
Error
:
:
NewLine
)
)
;
}
Some
(
b
'
\
n
'
)
=
>
{
bytes
.
bump
(
)
;
}
Some
(
.
.
)
=
>
{
bytes
.
slice
(
)
;
return
Ok
(
Status
:
:
Complete
(
(
)
)
)
;
}
None
=
>
return
Ok
(
Status
:
:
Partial
)
}
}
}
pub
struct
Response
<
'
headers
'
buf
:
'
headers
>
{
pub
version
:
Option
<
u8
>
pub
code
:
Option
<
u16
>
pub
reason
:
Option
<
&
'
buf
str
>
pub
headers
:
&
'
headers
mut
[
Header
<
'
buf
>
]
}
impl
<
'
h
'
b
>
Response
<
'
h
'
b
>
{
#
[
inline
]
pub
fn
new
(
headers
:
&
'
h
mut
[
Header
<
'
b
>
]
)
-
>
Response
<
'
h
'
b
>
{
Response
{
version
:
None
code
:
None
reason
:
None
headers
:
headers
}
}
pub
fn
parse
(
&
mut
self
buf
:
&
'
b
[
u8
]
)
-
>
Result
<
usize
>
{
let
orig_len
=
buf
.
len
(
)
;
let
mut
bytes
=
Bytes
:
:
new
(
buf
)
;
complete
!
(
skip_empty_lines
(
&
mut
bytes
)
)
;
self
.
version
=
Some
(
complete
!
(
parse_version
(
&
mut
bytes
)
)
)
;
space
!
(
bytes
or
Error
:
:
Version
)
;
self
.
code
=
Some
(
complete
!
(
parse_code
(
&
mut
bytes
)
)
)
;
match
next
!
(
bytes
)
{
b
'
'
=
>
{
bytes
.
slice
(
)
;
self
.
reason
=
Some
(
complete
!
(
parse_reason
(
&
mut
bytes
)
)
)
;
}
b
'
\
r
'
=
>
{
expect
!
(
bytes
.
next
(
)
=
=
b
'
\
n
'
=
>
Err
(
Error
:
:
Status
)
)
;
self
.
reason
=
Some
(
"
"
)
;
}
b
'
\
n
'
=
>
self
.
reason
=
Some
(
"
"
)
_
=
>
return
Err
(
Error
:
:
Status
)
}
let
len
=
orig_len
-
bytes
.
len
(
)
;
let
headers_len
=
complete
!
(
parse_headers_iter
(
&
mut
self
.
headers
&
mut
bytes
)
)
;
Ok
(
Status
:
:
Complete
(
len
+
headers_len
)
)
}
}
#
[
derive
(
Copy
Clone
PartialEq
Debug
)
]
pub
struct
Header
<
'
a
>
{
pub
name
:
&
'
a
str
pub
value
:
&
'
a
[
u8
]
}
pub
const
EMPTY_HEADER
:
Header
<
'
static
>
=
Header
{
name
:
"
"
value
:
b
"
"
}
;
#
[
inline
]
fn
parse_version
(
bytes
:
&
mut
Bytes
)
-
>
Result
<
u8
>
{
if
let
Some
(
mut
eight
)
=
bytes
.
next_8
(
)
{
expect
!
(
eight
.
_0
(
)
=
>
b
'
H
'
|
?
Err
(
Error
:
:
Version
)
)
;
expect
!
(
eight
.
_1
(
)
=
>
b
'
T
'
|
?
Err
(
Error
:
:
Version
)
)
;
expect
!
(
eight
.
_2
(
)
=
>
b
'
T
'
|
?
Err
(
Error
:
:
Version
)
)
;
expect
!
(
eight
.
_3
(
)
=
>
b
'
P
'
|
?
Err
(
Error
:
:
Version
)
)
;
expect
!
(
eight
.
_4
(
)
=
>
b
'
/
'
|
?
Err
(
Error
:
:
Version
)
)
;
expect
!
(
eight
.
_5
(
)
=
>
b
'
1
'
|
?
Err
(
Error
:
:
Version
)
)
;
expect
!
(
eight
.
_6
(
)
=
>
b
'
.
'
|
?
Err
(
Error
:
:
Version
)
)
;
let
v
=
match
eight
.
_7
(
)
{
b
'
0
'
=
>
0
b
'
1
'
=
>
1
_
=
>
return
Err
(
Error
:
:
Version
)
}
;
Ok
(
Status
:
:
Complete
(
v
)
)
}
else
{
Ok
(
Status
:
:
Partial
)
}
}
#
[
inline
]
fn
parse_reason
<
'
a
>
(
bytes
:
&
mut
Bytes
<
'
a
>
)
-
>
Result
<
&
'
a
str
>
{
loop
{
let
b
=
next
!
(
bytes
)
;
if
b
=
=
b
'
\
r
'
{
expect
!
(
bytes
.
next
(
)
=
=
b
'
\
n
'
=
>
Err
(
Error
:
:
Status
)
)
;
return
Ok
(
Status
:
:
Complete
(
unsafe
{
str
:
:
from_utf8_unchecked
(
bytes
.
slice_skip
(
2
)
)
}
)
)
;
}
else
if
b
=
=
b
'
\
n
'
{
return
Ok
(
Status
:
:
Complete
(
unsafe
{
str
:
:
from_utf8_unchecked
(
bytes
.
slice_skip
(
1
)
)
}
)
)
;
}
else
if
!
(
(
b
>
=
0x20
&
&
b
<
=
0x7E
)
|
|
b
=
=
b
'
\
t
'
)
{
return
Err
(
Error
:
:
Status
)
;
}
}
}
#
[
inline
]
fn
parse_token
<
'
a
>
(
bytes
:
&
mut
Bytes
<
'
a
>
)
-
>
Result
<
&
'
a
str
>
{
loop
{
let
b
=
next
!
(
bytes
)
;
if
b
=
=
b
'
'
{
return
Ok
(
Status
:
:
Complete
(
unsafe
{
str
:
:
from_utf8_unchecked
(
bytes
.
slice_skip
(
1
)
)
}
)
)
;
}
else
if
!
is_token
(
b
)
{
return
Err
(
Error
:
:
Token
)
;
}
}
}
#
[
inline
]
fn
parse_code
(
bytes
:
&
mut
Bytes
)
-
>
Result
<
u16
>
{
let
hundreds
=
expect
!
(
bytes
.
next
(
)
=
=
b
'
0
'
.
.
.
b
'
9
'
=
>
Err
(
Error
:
:
Status
)
)
;
let
tens
=
expect
!
(
bytes
.
next
(
)
=
=
b
'
0
'
.
.
.
b
'
9
'
=
>
Err
(
Error
:
:
Status
)
)
;
let
ones
=
expect
!
(
bytes
.
next
(
)
=
=
b
'
0
'
.
.
.
b
'
9
'
=
>
Err
(
Error
:
:
Status
)
)
;
Ok
(
Status
:
:
Complete
(
(
hundreds
-
b
'
0
'
)
as
u16
*
100
+
(
tens
-
b
'
0
'
)
as
u16
*
10
+
(
ones
-
b
'
0
'
)
as
u16
)
)
}
pub
fn
parse_headers
<
'
b
:
'
h
'
h
>
(
src
:
&
'
b
[
u8
]
mut
dst
:
&
'
h
mut
[
Header
<
'
b
>
]
)
-
>
Result
<
(
usize
&
'
h
[
Header
<
'
b
>
]
)
>
{
let
mut
iter
=
Bytes
:
:
new
(
src
)
;
let
pos
=
complete
!
(
parse_headers_iter
(
&
mut
dst
&
mut
iter
)
)
;
Ok
(
Status
:
:
Complete
(
(
pos
dst
)
)
)
}
#
[
inline
]
fn
parse_headers_iter
<
'
a
'
b
>
(
headers
:
&
mut
&
mut
[
Header
<
'
a
>
]
bytes
:
&
'
b
mut
Bytes
<
'
a
>
)
-
>
Result
<
usize
>
{
let
mut
num_headers
:
usize
=
0
;
let
mut
count
:
usize
=
0
;
let
mut
result
=
Err
(
Error
:
:
TooManyHeaders
)
;
{
let
mut
iter
=
headers
.
iter_mut
(
)
;
'
headers
:
loop
{
let
b
=
next
!
(
bytes
)
;
if
b
=
=
b
'
\
r
'
{
expect
!
(
bytes
.
next
(
)
=
=
b
'
\
n
'
=
>
Err
(
Error
:
:
NewLine
)
)
;
result
=
Ok
(
Status
:
:
Complete
(
count
+
bytes
.
pos
(
)
)
)
;
break
;
}
else
if
b
=
=
b
'
\
n
'
{
result
=
Ok
(
Status
:
:
Complete
(
count
+
bytes
.
pos
(
)
)
)
;
break
;
}
else
if
b
=
=
b
'
:
'
|
|
!
is_token
(
b
)
{
return
Err
(
Error
:
:
HeaderName
)
;
}
let
header
=
match
iter
.
next
(
)
{
Some
(
header
)
=
>
header
None
=
>
break
'
headers
}
;
num_headers
+
=
1
;
loop
{
let
b
=
next
!
(
bytes
)
;
if
b
=
=
b
'
:
'
{
count
+
=
bytes
.
pos
(
)
;
header
.
name
=
unsafe
{
str
:
:
from_utf8_unchecked
(
bytes
.
slice_skip
(
1
)
)
}
;
break
;
}
else
if
!
is_token
(
b
)
{
return
Err
(
Error
:
:
HeaderName
)
;
}
}
let
mut
b
;
'
value
:
loop
{
loop
{
b
=
next
!
(
bytes
)
;
if
b
=
=
b
'
'
|
|
b
=
=
b
'
\
t
'
{
count
+
=
bytes
.
pos
(
)
;
bytes
.
slice
(
)
;
continue
;
}
else
{
if
!
is_token
(
b
)
{
if
(
b
<
0o40
&
&
b
!
=
0o11
)
|
|
b
=
=
0o177
{
break
'
value
;
}
}
break
;
}
}
macro_rules
!
check
{
(
bytes
:
ident
i
:
ident
)
=
>
(
{
b
=
bytes
.
i
(
)
;
if
!
is_token
(
b
)
{
if
(
b
<
0o40
&
&
b
!
=
0o11
)
|
|
b
=
=
0o177
{
break
'
value
;
}
}
}
)
;
(
bytes
:
ident
)
=
>
(
{
check
!
(
bytes
_0
)
;
check
!
(
bytes
_1
)
;
check
!
(
bytes
_2
)
;
check
!
(
bytes
_3
)
;
check
!
(
bytes
_4
)
;
check
!
(
bytes
_5
)
;
check
!
(
bytes
_6
)
;
check
!
(
bytes
_7
)
;
}
)
}
while
let
Some
(
mut
bytes8
)
=
bytes
.
next_8
(
)
{
check
!
(
bytes8
)
;
}
loop
{
b
=
next
!
(
bytes
)
;
if
!
is_token
(
b
)
{
if
(
b
<
0o40
&
&
b
!
=
0o11
)
|
|
b
=
=
0o177
{
break
'
value
;
}
}
}
}
if
b
=
=
b
'
\
r
'
{
expect
!
(
bytes
.
next
(
)
=
=
b
'
\
n
'
=
>
Err
(
Error
:
:
HeaderValue
)
)
;
count
+
=
bytes
.
pos
(
)
;
header
.
value
=
bytes
.
slice_skip
(
2
)
;
}
else
if
b
=
=
b
'
\
n
'
{
count
+
=
bytes
.
pos
(
)
;
header
.
value
=
bytes
.
slice_skip
(
1
)
;
}
else
{
return
Err
(
Error
:
:
HeaderValue
)
;
}
}
}
shrink
(
headers
num_headers
)
;
result
}
pub
fn
parse_chunk_size
(
buf
:
&
[
u8
]
)
-
>
result
:
:
Result
<
Status
<
(
usize
u64
)
>
InvalidChunkSize
>
{
const
RADIX
:
u64
=
16
;
let
mut
bytes
=
Bytes
:
:
new
(
buf
)
;
let
mut
size
=
0
;
let
mut
in_chunk_size
=
true
;
let
mut
in_ext
=
false
;
let
mut
count
=
0
;
loop
{
let
b
=
next
!
(
bytes
)
;
match
b
{
b
'
0
'
.
.
.
b
'
9
'
if
in_chunk_size
=
>
{
if
count
>
15
{
return
Err
(
InvalidChunkSize
)
;
}
count
+
=
1
;
size
*
=
RADIX
;
size
+
=
(
b
-
b
'
0
'
)
as
u64
;
}
b
'
a
'
.
.
.
b
'
f
'
if
in_chunk_size
=
>
{
if
count
>
15
{
return
Err
(
InvalidChunkSize
)
;
}
count
+
=
1
;
size
*
=
RADIX
;
size
+
=
(
b
+
10
-
b
'
a
'
)
as
u64
;
}
b
'
A
'
.
.
.
b
'
F
'
if
in_chunk_size
=
>
{
if
count
>
15
{
return
Err
(
InvalidChunkSize
)
;
}
count
+
=
1
;
size
*
=
RADIX
;
size
+
=
(
b
+
10
-
b
'
A
'
)
as
u64
;
}
b
'
\
r
'
=
>
{
match
next
!
(
bytes
)
{
b
'
\
n
'
=
>
break
_
=
>
return
Err
(
InvalidChunkSize
)
}
}
b
'
;
'
if
!
in_ext
=
>
{
in_ext
=
true
;
in_chunk_size
=
false
;
}
b
'
\
t
'
|
b
'
'
if
!
in_ext
&
!
in_chunk_size
=
>
{
}
b
'
\
t
'
|
b
'
'
if
in_chunk_size
=
>
in_chunk_size
=
false
_
if
in_ext
=
>
{
}
_
=
>
return
Err
(
InvalidChunkSize
)
}
}
Ok
(
Status
:
:
Complete
(
(
bytes
.
pos
(
)
size
)
)
)
}
#
[
cfg
(
test
)
]
mod
tests
{
use
super
:
:
{
Request
Response
Status
EMPTY_HEADER
shrink
parse_chunk_size
}
;
const
NUM_OF_HEADERS
:
usize
=
4
;
#
[
test
]
fn
test_shrink
(
)
{
let
mut
arr
=
[
EMPTY_HEADER
;
16
]
;
{
let
slice
=
&
mut
&
mut
arr
[
.
.
]
;
assert_eq
!
(
slice
.
len
(
)
16
)
;
shrink
(
slice
4
)
;
assert_eq
!
(
slice
.
len
(
)
4
)
;
}
assert_eq
!
(
arr
.
len
(
)
16
)
;
}
macro_rules
!
req
{
(
name
:
ident
buf
:
expr
|
arg
:
ident
|
body
:
expr
)
=
>
(
req
!
{
name
buf
Ok
(
Status
:
:
Complete
(
buf
.
len
(
)
)
)
|
arg
|
body
}
)
;
(
name
:
ident
buf
:
expr
len
:
expr
|
arg
:
ident
|
body
:
expr
)
=
>
(
#
[
test
]
fn
name
(
)
{
let
mut
headers
=
[
EMPTY_HEADER
;
NUM_OF_HEADERS
]
;
let
mut
req
=
Request
:
:
new
(
&
mut
headers
[
.
.
]
)
;
let
status
=
req
.
parse
(
buf
.
as_ref
(
)
)
;
assert_eq
!
(
status
len
)
;
closure
(
req
)
;
fn
closure
(
arg
:
Request
)
{
body
}
}
)
}
req
!
{
test_request_simple
b
"
GET
/
HTTP
/
1
.
1
\
r
\
n
\
r
\
n
"
|
req
|
{
assert_eq
!
(
req
.
method
.
unwrap
(
)
"
GET
"
)
;
assert_eq
!
(
req
.
path
.
unwrap
(
)
"
/
"
)
;
assert_eq
!
(
req
.
version
.
unwrap
(
)
1
)
;
assert_eq
!
(
req
.
headers
.
len
(
)
0
)
;
}
}
req
!
{
test_request_headers
b
"
GET
/
HTTP
/
1
.
1
\
r
\
nHost
:
foo
.
com
\
r
\
nCookie
:
\
r
\
n
\
r
\
n
"
|
req
|
{
assert_eq
!
(
req
.
method
.
unwrap
(
)
"
GET
"
)
;
assert_eq
!
(
req
.
path
.
unwrap
(
)
"
/
"
)
;
assert_eq
!
(
req
.
version
.
unwrap
(
)
1
)
;
assert_eq
!
(
req
.
headers
.
len
(
)
2
)
;
assert_eq
!
(
req
.
headers
[
0
]
.
name
"
Host
"
)
;
assert_eq
!
(
req
.
headers
[
0
]
.
value
b
"
foo
.
com
"
)
;
assert_eq
!
(
req
.
headers
[
1
]
.
name
"
Cookie
"
)
;
assert_eq
!
(
req
.
headers
[
1
]
.
value
b
"
"
)
;
}
}
req
!
{
test_request_headers_max
b
"
GET
/
HTTP
/
1
.
1
\
r
\
nA
:
A
\
r
\
nB
:
B
\
r
\
nC
:
C
\
r
\
nD
:
D
\
r
\
n
\
r
\
n
"
|
req
|
{
assert_eq
!
(
req
.
headers
.
len
(
)
NUM_OF_HEADERS
)
;
}
}
req
!
{
test_request_multibyte
b
"
GET
/
HTTP
/
1
.
1
\
r
\
nHost
:
foo
.
com
\
r
\
nUser
-
Agent
:
\
xe3
\
x81
\
xb2
\
xe3
/
1
.
0
\
r
\
n
\
r
\
n
"
|
req
|
{
assert_eq
!
(
req
.
method
.
unwrap
(
)
"
GET
"
)
;
assert_eq
!
(
req
.
path
.
unwrap
(
)
"
/
"
)
;
assert_eq
!
(
req
.
version
.
unwrap
(
)
1
)
;
assert_eq
!
(
req
.
headers
[
0
]
.
name
"
Host
"
)
;
assert_eq
!
(
req
.
headers
[
0
]
.
value
b
"
foo
.
com
"
)
;
assert_eq
!
(
req
.
headers
[
1
]
.
name
"
User
-
Agent
"
)
;
assert_eq
!
(
req
.
headers
[
1
]
.
value
b
"
\
xe3
\
x81
\
xb2
\
xe3
/
1
.
0
"
)
;
}
}
req
!
{
test_request_partial
b
"
GET
/
HTTP
/
1
.
1
\
r
\
n
\
r
"
Ok
(
Status
:
:
Partial
)
|
_req
|
{
}
}
req
!
{
test_request_newlines
b
"
GET
/
HTTP
/
1
.
1
\
nHost
:
foo
.
bar
\
n
\
n
"
|
_r
|
{
}
}
req
!
{
test_request_empty_lines_prefix
b
"
\
r
\
n
\
r
\
nGET
/
HTTP
/
1
.
1
\
r
\
n
\
r
\
n
"
|
req
|
{
assert_eq
!
(
req
.
method
.
unwrap
(
)
"
GET
"
)
;
assert_eq
!
(
req
.
path
.
unwrap
(
)
"
/
"
)
;
assert_eq
!
(
req
.
version
.
unwrap
(
)
1
)
;
assert_eq
!
(
req
.
headers
.
len
(
)
0
)
;
}
}
req
!
{
test_request_empty_lines_prefix_lf_only
b
"
\
n
\
nGET
/
HTTP
/
1
.
1
\
n
\
n
"
|
req
|
{
assert_eq
!
(
req
.
method
.
unwrap
(
)
"
GET
"
)
;
assert_eq
!
(
req
.
path
.
unwrap
(
)
"
/
"
)
;
assert_eq
!
(
req
.
version
.
unwrap
(
)
1
)
;
assert_eq
!
(
req
.
headers
.
len
(
)
0
)
;
}
}
req
!
{
test_request_with_invalid_token_delimiter
b
"
GET
\
n
/
HTTP
/
1
.
1
\
r
\
nHost
:
foo
.
bar
\
r
\
n
\
r
\
n
"
Err
(
:
:
Error
:
:
Token
)
|
_r
|
{
}
}
macro_rules
!
res
{
(
name
:
ident
buf
:
expr
|
arg
:
ident
|
body
:
expr
)
=
>
(
res
!
{
name
buf
Ok
(
Status
:
:
Complete
(
buf
.
len
(
)
)
)
|
arg
|
body
}
)
;
(
name
:
ident
buf
:
expr
len
:
expr
|
arg
:
ident
|
body
:
expr
)
=
>
(
#
[
test
]
fn
name
(
)
{
let
mut
headers
=
[
EMPTY_HEADER
;
NUM_OF_HEADERS
]
;
let
mut
res
=
Response
:
:
new
(
&
mut
headers
[
.
.
]
)
;
let
status
=
res
.
parse
(
buf
.
as_ref
(
)
)
;
assert_eq
!
(
status
len
)
;
closure
(
res
)
;
fn
closure
(
arg
:
Response
)
{
body
}
}
)
}
res
!
{
test_response_simple
b
"
HTTP
/
1
.
1
200
OK
\
r
\
n
\
r
\
n
"
|
res
|
{
assert_eq
!
(
res
.
version
.
unwrap
(
)
1
)
;
assert_eq
!
(
res
.
code
.
unwrap
(
)
200
)
;
assert_eq
!
(
res
.
reason
.
unwrap
(
)
"
OK
"
)
;
}
}
res
!
{
test_response_newlines
b
"
HTTP
/
1
.
0
403
Forbidden
\
nServer
:
foo
.
bar
\
n
\
n
"
|
_r
|
{
}
}
res
!
{
test_response_reason_missing
b
"
HTTP
/
1
.
1
200
\
r
\
n
\
r
\
n
"
|
res
|
{
assert_eq
!
(
res
.
version
.
unwrap
(
)
1
)
;
assert_eq
!
(
res
.
code
.
unwrap
(
)
200
)
;
assert_eq
!
(
res
.
reason
.
unwrap
(
)
"
"
)
;
}
}
res
!
{
test_response_reason_missing_no_space
b
"
HTTP
/
1
.
1
200
\
r
\
n
\
r
\
n
"
|
res
|
{
assert_eq
!
(
res
.
version
.
unwrap
(
)
1
)
;
assert_eq
!
(
res
.
code
.
unwrap
(
)
200
)
;
assert_eq
!
(
res
.
reason
.
unwrap
(
)
"
"
)
;
}
}
res
!
{
test_response_reason_with_space_and_tab
b
"
HTTP
/
1
.
1
101
Switching
Protocols
\
t
\
r
\
n
\
r
\
n
"
|
res
|
{
assert_eq
!
(
res
.
version
.
unwrap
(
)
1
)
;
assert_eq
!
(
res
.
code
.
unwrap
(
)
101
)
;
assert_eq
!
(
res
.
reason
.
unwrap
(
)
"
Switching
Protocols
\
t
"
)
;
}
}
static
RESPONSE_REASON_WITH_OBS_TEXT_BYTE
:
&
'
static
[
u8
]
=
b
"
HTTP
/
1
.
1
200
X
\
xFFZ
\
r
\
n
\
r
\
n
"
;
res
!
{
test_response_reason_with_obsolete_text_byte
RESPONSE_REASON_WITH_OBS_TEXT_BYTE
Err
(
:
:
Error
:
:
Status
)
|
_res
|
{
}
}
res
!
{
test_response_reason_with_nul_byte
b
"
HTTP
/
1
.
1
200
\
x00
\
r
\
n
\
r
\
n
"
Err
(
:
:
Error
:
:
Status
)
|
_res
|
{
}
}
res
!
{
test_response_version_missing_space
b
"
HTTP
/
1
.
1
"
Ok
(
Status
:
:
Partial
)
|
_res
|
{
}
}
res
!
{
test_response_code_missing_space
b
"
HTTP
/
1
.
1
200
"
Ok
(
Status
:
:
Partial
)
|
_res
|
{
}
}
res
!
{
test_response_empty_lines_prefix_lf_only
b
"
\
n
\
nHTTP
/
1
.
1
200
OK
\
n
\
n
"
|
_res
|
{
}
}
#
[
test
]
fn
test_chunk_size
(
)
{
assert_eq
!
(
parse_chunk_size
(
b
"
0
\
r
\
n
"
)
Ok
(
Status
:
:
Complete
(
(
3
0
)
)
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
12
\
r
\
nchunk
"
)
Ok
(
Status
:
:
Complete
(
(
4
18
)
)
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
3086d
\
r
\
n
"
)
Ok
(
Status
:
:
Complete
(
(
7
198765
)
)
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
3735AB1
;
foo
bar
*
\
r
\
n
"
)
Ok
(
Status
:
:
Complete
(
(
18
57891505
)
)
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
3735ab1
;
baz
\
r
\
n
"
)
Ok
(
Status
:
:
Complete
(
(
16
57891505
)
)
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
77a65
\
r
"
)
Ok
(
Status
:
:
Partial
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
ab
"
)
Ok
(
Status
:
:
Partial
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
567f8a
\
rfoo
"
)
Err
(
:
:
InvalidChunkSize
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
567f8a
\
rfoo
"
)
Err
(
:
:
InvalidChunkSize
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
567xf8a
\
r
\
n
"
)
Err
(
:
:
InvalidChunkSize
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
ffffffffffffffff
\
r
\
n
"
)
Ok
(
Status
:
:
Complete
(
(
18
:
:
core
:
:
u64
:
:
MAX
)
)
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
1ffffffffffffffff
\
r
\
n
"
)
Err
(
:
:
InvalidChunkSize
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
Affffffffffffffff
\
r
\
n
"
)
Err
(
:
:
InvalidChunkSize
)
)
;
assert_eq
!
(
parse_chunk_size
(
b
"
fffffffffffffffff
\
r
\
n
"
)
Err
(
:
:
InvalidChunkSize
)
)
;
}
#
[
cfg
(
feature
=
"
std
"
)
]
#
[
test
]
fn
test_std_error
(
)
{
use
super
:
:
Error
;
use
std
:
:
error
:
:
Error
as
StdError
;
let
err
=
Error
:
:
HeaderName
;
assert_eq
!
(
err
.
to_string
(
)
err
.
description
(
)
)
;
}
}
