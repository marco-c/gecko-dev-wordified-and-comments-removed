#
!
[
allow
(
dead_code
)
]
pub
use
lmdb
:
:
{
DatabaseFlags
EnvironmentBuilder
EnvironmentFlags
WriteFlags
}
;
mod
env
;
pub
mod
error
;
mod
manager
;
pub
mod
migrate
;
mod
readwrite
;
pub
mod
store
;
pub
mod
value
;
pub
use
lmdb
:
:
{
Cursor
Database
Info
Iter
as
LmdbIter
RoCursor
Stat
}
;
pub
use
self
:
:
readwrite
:
:
{
Reader
Writer
}
;
pub
use
self
:
:
store
:
:
integer
:
:
{
IntegerStore
PrimitiveInt
}
;
pub
use
self
:
:
store
:
:
integermulti
:
:
MultiIntegerStore
;
pub
use
self
:
:
store
:
:
multi
:
:
MultiStore
;
pub
use
self
:
:
store
:
:
single
:
:
SingleStore
;
pub
use
self
:
:
store
:
:
Options
as
StoreOptions
;
pub
use
self
:
:
env
:
:
Rkv
;
pub
use
self
:
:
error
:
:
{
DataError
StoreError
}
;
pub
use
self
:
:
manager
:
:
Manager
;
pub
use
self
:
:
value
:
:
{
OwnedValue
Value
}
;
fn
read_transform
(
val
:
Result
<
&
[
u8
]
lmdb
:
:
Error
>
)
-
>
Result
<
Option
<
Value
>
StoreError
>
{
match
val
{
Ok
(
bytes
)
=
>
Value
:
:
from_tagged_slice
(
bytes
)
.
map
(
Some
)
.
map_err
(
StoreError
:
:
DataError
)
Err
(
lmdb
:
:
Error
:
:
NotFound
)
=
>
Ok
(
None
)
Err
(
e
)
=
>
Err
(
StoreError
:
:
LmdbError
(
e
)
)
}
}
