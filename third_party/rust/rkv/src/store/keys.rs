mod
encodables
;
mod
primitives
;
use
std
:
:
marker
:
:
PhantomData
;
use
crate
:
:
error
:
:
DataError
;
pub
use
encodables
:
:
*
;
pub
use
primitives
:
:
*
;
pub
(
crate
)
struct
Key
<
K
>
{
bytes
:
Vec
<
u8
>
phantom
:
PhantomData
<
K
>
}
impl
<
K
>
AsRef
<
[
u8
]
>
for
Key
<
K
>
where
K
:
EncodableKey
{
fn
as_ref
(
&
self
)
-
>
&
[
u8
]
{
self
.
bytes
.
as_ref
(
)
}
}
impl
<
K
>
Key
<
K
>
where
K
:
EncodableKey
{
#
[
allow
(
clippy
:
:
new_ret_no_self
)
]
pub
fn
new
(
k
:
&
K
)
-
>
Result
<
Key
<
K
>
DataError
>
{
Ok
(
Key
{
bytes
:
k
.
to_bytes
(
)
?
phantom
:
PhantomData
}
)
}
}
