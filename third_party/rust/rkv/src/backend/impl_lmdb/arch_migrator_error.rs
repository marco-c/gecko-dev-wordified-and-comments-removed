use
std
:
:
{
io
num
str
}
;
use
thiserror
:
:
Error
;
#
[
derive
(
Debug
Error
)
]
pub
enum
MigrateError
{
#
[
error
(
"
database
not
found
:
{
0
:
?
}
"
)
]
DatabaseNotFound
(
String
)
#
[
error
(
"
{
0
}
"
)
]
FromString
(
String
)
#
[
error
(
"
couldn
'
t
determine
bit
depth
"
)
]
IndeterminateBitDepth
#
[
error
(
"
I
/
O
error
:
{
0
:
?
}
"
)
]
IoError
(
#
[
from
]
io
:
:
Error
)
#
[
error
(
"
invalid
DatabaseFlags
bits
"
)
]
InvalidDatabaseBits
#
[
error
(
"
invalid
data
version
"
)
]
InvalidDataVersion
#
[
error
(
"
invalid
magic
number
"
)
]
InvalidMagicNum
#
[
error
(
"
invalid
NodeFlags
bits
"
)
]
InvalidNodeBits
#
[
error
(
"
invalid
PageFlags
bits
"
)
]
InvalidPageBits
#
[
error
(
"
invalid
page
number
"
)
]
InvalidPageNum
#
[
error
(
"
lmdb
backend
error
:
{
0
}
"
)
]
LmdbError
(
#
[
from
]
lmdb
:
:
Error
)
#
[
error
(
"
string
conversion
error
"
)
]
StringConversionError
#
[
error
(
"
TryFromInt
error
:
{
0
:
?
}
"
)
]
TryFromIntError
(
#
[
from
]
num
:
:
TryFromIntError
)
#
[
error
(
"
unexpected
Page
variant
"
)
]
UnexpectedPageVariant
#
[
error
(
"
unexpected
PageHeader
variant
"
)
]
UnexpectedPageHeaderVariant
#
[
error
(
"
unsupported
PageHeader
variant
"
)
]
UnsupportedPageHeaderVariant
#
[
error
(
"
UTF8
error
:
{
0
:
?
}
"
)
]
Utf8Error
(
#
[
from
]
str
:
:
Utf8Error
)
}
impl
From
<
&
str
>
for
MigrateError
{
fn
from
(
e
:
&
str
)
-
>
MigrateError
{
MigrateError
:
:
FromString
(
e
.
to_string
(
)
)
}
}
impl
From
<
String
>
for
MigrateError
{
fn
from
(
e
:
String
)
-
>
MigrateError
{
MigrateError
:
:
FromString
(
e
)
}
}
