use
super
:
:
ErrorImpl
;
use
crate
:
:
backend
:
:
traits
:
:
BackendIter
;
pub
struct
IterImpl
<
'
env
C
>
{
#
[
allow
(
dead_code
)
]
cursor
:
C
iter
:
lmdb
:
:
Iter
<
'
env
>
}
impl
<
'
env
C
>
IterImpl
<
'
env
C
>
{
pub
(
crate
)
fn
new
(
mut
cursor
:
C
to_iter
:
impl
FnOnce
(
&
mut
C
)
-
>
lmdb
:
:
Iter
<
'
env
>
)
-
>
IterImpl
<
'
env
C
>
{
let
iter
=
to_iter
(
&
mut
cursor
)
;
IterImpl
{
cursor
iter
}
}
}
impl
<
'
env
C
>
BackendIter
<
'
env
>
for
IterImpl
<
'
env
C
>
{
type
Error
=
ErrorImpl
;
#
[
allow
(
clippy
:
:
type_complexity
)
]
fn
next
(
&
mut
self
)
-
>
Option
<
Result
<
(
&
'
env
[
u8
]
&
'
env
[
u8
]
)
Self
:
:
Error
>
>
{
self
.
iter
.
next
(
)
.
map
(
|
e
|
e
.
map_err
(
ErrorImpl
)
)
}
}
