use
std
:
:
fmt
;
use
crate
:
:
backend
:
:
traits
:
:
BackendError
;
use
crate
:
:
error
:
:
StoreError
;
#
[
derive
(
Debug
)
]
pub
struct
ErrorImpl
(
pub
(
crate
)
lmdb
:
:
Error
)
;
impl
BackendError
for
ErrorImpl
{
}
impl
fmt
:
:
Display
for
ErrorImpl
{
fn
fmt
(
&
self
fmt
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
self
.
0
.
fmt
(
fmt
)
}
}
impl
Into
<
StoreError
>
for
ErrorImpl
{
fn
into
(
self
)
-
>
StoreError
{
match
self
.
0
{
lmdb
:
:
Error
:
:
NotFound
=
>
StoreError
:
:
KeyValuePairNotFound
lmdb
:
:
Error
:
:
Invalid
=
>
StoreError
:
:
DatabaseInvalid
_
=
>
StoreError
:
:
LmdbError
(
self
.
0
)
}
}
}
