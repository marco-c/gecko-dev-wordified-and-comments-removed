use
lmdb
;
use
std
:
:
marker
:
:
PhantomData
;
use
lmdb
:
:
{
Cursor
Database
Iter
as
LmdbIter
RoCursor
RoTransaction
RwTransaction
Transaction
}
;
use
lmdb
:
:
WriteFlags
;
use
error
:
:
StoreError
;
use
value
:
:
Value
;
fn
read_transform
(
val
:
Result
<
&
[
u8
]
lmdb
:
:
Error
>
)
-
>
Result
<
Option
<
Value
>
StoreError
>
{
match
val
{
Ok
(
bytes
)
=
>
Value
:
:
from_tagged_slice
(
bytes
)
.
map
(
Some
)
.
map_err
(
StoreError
:
:
DataError
)
Err
(
lmdb
:
:
Error
:
:
NotFound
)
=
>
Ok
(
None
)
Err
(
e
)
=
>
Err
(
StoreError
:
:
LmdbError
(
e
)
)
}
}
pub
struct
Writer
<
'
env
K
>
where
K
:
AsRef
<
[
u8
]
>
{
tx
:
RwTransaction
<
'
env
>
phantom
:
PhantomData
<
K
>
}
pub
struct
Reader
<
'
env
K
>
where
K
:
AsRef
<
[
u8
]
>
{
tx
:
RoTransaction
<
'
env
>
phantom
:
PhantomData
<
K
>
}
pub
struct
Iter
<
'
env
>
{
iter
:
LmdbIter
<
'
env
>
cursor
:
RoCursor
<
'
env
>
}
impl
<
'
env
K
>
Writer
<
'
env
K
>
where
K
:
AsRef
<
[
u8
]
>
{
pub
(
crate
)
fn
new
(
txn
:
RwTransaction
)
-
>
Writer
<
K
>
{
Writer
{
tx
:
txn
phantom
:
PhantomData
}
}
pub
fn
get
(
&
self
store
:
Store
k
:
K
)
-
>
Result
<
Option
<
Value
>
StoreError
>
{
let
bytes
=
self
.
tx
.
get
(
store
.
0
&
k
)
;
read_transform
(
bytes
)
}
pub
fn
put
(
&
mut
self
store
:
Store
k
:
K
v
:
&
Value
)
-
>
Result
<
(
)
StoreError
>
{
let
bytes
=
v
.
to_bytes
(
)
?
;
self
.
tx
.
put
(
store
.
0
&
k
&
bytes
WriteFlags
:
:
empty
(
)
)
.
map_err
(
StoreError
:
:
LmdbError
)
}
pub
fn
delete
(
&
mut
self
store
:
Store
k
:
K
)
-
>
Result
<
(
)
StoreError
>
{
self
.
tx
.
del
(
store
.
0
&
k
None
)
.
map_err
(
StoreError
:
:
LmdbError
)
}
pub
fn
delete_value
(
&
mut
self
_store
:
Store
_k
:
K
_v
:
&
Value
)
-
>
Result
<
(
)
StoreError
>
{
unimplemented
!
(
)
;
}
pub
fn
commit
(
self
)
-
>
Result
<
(
)
StoreError
>
{
self
.
tx
.
commit
(
)
.
map_err
(
StoreError
:
:
LmdbError
)
}
pub
fn
abort
(
self
)
{
self
.
tx
.
abort
(
)
;
}
}
impl
<
'
env
K
>
Reader
<
'
env
K
>
where
K
:
AsRef
<
[
u8
]
>
{
pub
(
crate
)
fn
new
(
txn
:
RoTransaction
)
-
>
Reader
<
K
>
{
Reader
{
tx
:
txn
phantom
:
PhantomData
}
}
pub
fn
get
(
&
self
store
:
Store
k
:
K
)
-
>
Result
<
Option
<
Value
>
StoreError
>
{
let
bytes
=
self
.
tx
.
get
(
store
.
0
&
k
)
;
read_transform
(
bytes
)
}
pub
fn
abort
(
self
)
{
self
.
tx
.
abort
(
)
;
}
pub
fn
iter_start
(
&
self
store
:
Store
)
-
>
Result
<
Iter
StoreError
>
{
let
mut
cursor
=
self
.
tx
.
open_ro_cursor
(
store
.
0
)
.
map_err
(
StoreError
:
:
LmdbError
)
?
;
let
iter
=
cursor
.
iter
(
)
;
Ok
(
Iter
{
iter
cursor
}
)
}
pub
fn
iter_from
(
&
self
store
:
Store
k
:
K
)
-
>
Result
<
Iter
StoreError
>
{
let
mut
cursor
=
self
.
tx
.
open_ro_cursor
(
store
.
0
)
.
map_err
(
StoreError
:
:
LmdbError
)
?
;
let
iter
=
cursor
.
iter_from
(
k
)
;
Ok
(
Iter
{
iter
cursor
}
)
}
}
impl
<
'
env
>
Iterator
for
Iter
<
'
env
>
{
type
Item
=
(
&
'
env
[
u8
]
Result
<
Option
<
Value
<
'
env
>
>
StoreError
>
)
;
fn
next
(
&
mut
self
)
-
>
Option
<
Self
:
:
Item
>
{
match
self
.
iter
.
next
(
)
{
None
=
>
None
Some
(
(
key
bytes
)
)
=
>
Some
(
(
key
read_transform
(
Ok
(
bytes
)
)
)
)
}
}
}
#
[
derive
(
Copy
Clone
)
]
pub
struct
Store
(
Database
)
;
impl
Store
{
pub
fn
new
(
db
:
Database
)
-
>
Store
{
Store
(
db
)
}
}
