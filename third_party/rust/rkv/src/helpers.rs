use
std
:
:
io
;
use
std
:
:
path
:
:
{
Path
PathBuf
}
;
use
url
:
:
Url
;
use
crate
:
:
error
:
:
StoreError
;
use
crate
:
:
value
:
:
Value
;
pub
(
crate
)
fn
read_transform
(
value
:
Result
<
&
[
u8
]
StoreError
>
)
-
>
Result
<
Option
<
Value
>
StoreError
>
{
match
value
{
Ok
(
bytes
)
=
>
Value
:
:
from_tagged_slice
(
bytes
)
.
map
(
Some
)
.
map_err
(
StoreError
:
:
DataError
)
Err
(
StoreError
:
:
KeyValuePairNotFound
)
=
>
Ok
(
None
)
Err
(
e
)
=
>
Err
(
e
)
}
}
pub
(
crate
)
fn
canonicalize_path
<
'
p
P
>
(
path
:
P
)
-
>
io
:
:
Result
<
PathBuf
>
where
P
:
Into
<
&
'
p
Path
>
{
let
canonical
=
path
.
into
(
)
.
canonicalize
(
)
?
;
Ok
(
if
cfg
!
(
target_os
=
"
windows
"
)
{
let
url
=
Url
:
:
from_file_path
(
&
canonical
)
.
map_err
(
|
_
|
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
Other
"
passing
error
"
)
)
?
;
url
.
to_file_path
(
)
.
map_err
(
|
_
|
io
:
:
Error
:
:
new
(
io
:
:
ErrorKind
:
:
Other
"
path
canonicalization
error
"
)
)
?
}
else
{
canonical
}
)
}
