use
std
:
:
{
fs
path
:
:
Path
}
;
use
tempfile
:
:
Builder
;
use
rkv
:
:
{
backend
:
:
{
Lmdb
SafeMode
}
Migrator
Rkv
StoreOptions
Value
}
;
macro_rules
!
populate_store
{
(
env
:
expr
)
=
>
{
let
store
=
env
.
open_single
(
"
store
"
StoreOptions
:
:
create
(
)
)
.
expect
(
"
opened
"
)
;
let
mut
writer
=
env
.
write
(
)
.
expect
(
"
writer
"
)
;
store
.
put
(
&
mut
writer
"
foo
"
&
Value
:
:
I64
(
1234
)
)
.
expect
(
"
wrote
"
)
;
store
.
put
(
&
mut
writer
"
bar
"
&
Value
:
:
Bool
(
true
)
)
.
expect
(
"
wrote
"
)
;
store
.
put
(
&
mut
writer
"
baz
"
&
Value
:
:
Str
(
"
h
llo
y
u
"
)
)
.
expect
(
"
wrote
"
)
;
writer
.
commit
(
)
.
expect
(
"
committed
"
)
;
}
;
}
#
[
test
]
fn
test_simple_migrator_lmdb_to_safe
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_simple_migrator_lmdb_to_safe
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
{
let
src_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
populate_store
!
(
&
src_env
)
;
src_env
.
sync
(
true
)
.
expect
(
"
synced
"
)
;
}
{
let
mut
datamdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
let
mut
lockmdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
datamdb
.
push
(
"
data
.
mdb
"
)
;
lockmdb
.
push
(
"
lock
.
mdb
"
)
;
assert
!
(
datamdb
.
exists
(
)
)
;
assert
!
(
lockmdb
.
exists
(
)
)
;
}
{
let
src_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
let
store
=
src_env
.
open_single
(
"
store
"
StoreOptions
:
:
default
(
)
)
.
expect
(
"
opened
"
)
;
let
reader
=
src_env
.
read
(
)
.
expect
(
"
reader
"
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
foo
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
I64
(
1234
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
bar
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Bool
(
true
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
baz
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Str
(
"
h
llo
y
u
"
)
)
)
;
}
{
let
dst_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
Migrator
:
:
open_and_migrate_lmdb_to_safe_mode
(
root
.
path
(
)
|
builder
|
builder
&
dst_env
)
.
expect
(
"
migrated
"
)
;
}
{
let
dst_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
let
store
=
dst_env
.
open_single
(
"
store
"
StoreOptions
:
:
default
(
)
)
.
expect
(
"
opened
"
)
;
let
reader
=
dst_env
.
read
(
)
.
expect
(
"
reader
"
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
foo
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
I64
(
1234
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
bar
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Bool
(
true
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
baz
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Str
(
"
h
llo
y
u
"
)
)
)
;
}
{
let
mut
datamdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
let
mut
lockmdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
datamdb
.
push
(
"
data
.
mdb
"
)
;
lockmdb
.
push
(
"
lock
.
mdb
"
)
;
assert
!
(
!
datamdb
.
exists
(
)
)
;
assert
!
(
!
lockmdb
.
exists
(
)
)
;
}
}
#
[
test
]
fn
test_simple_migrator_safe_to_lmdb
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_simple_migrator_safe_to_lmdb
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
{
let
src_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
populate_store
!
(
&
src_env
)
;
src_env
.
sync
(
true
)
.
expect
(
"
synced
"
)
;
}
{
let
mut
safebin
=
root
.
path
(
)
.
to_path_buf
(
)
;
safebin
.
push
(
"
data
.
safe
.
bin
"
)
;
assert
!
(
safebin
.
exists
(
)
)
;
}
{
let
src_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
let
store
=
src_env
.
open_single
(
"
store
"
StoreOptions
:
:
default
(
)
)
.
expect
(
"
opened
"
)
;
let
reader
=
src_env
.
read
(
)
.
expect
(
"
reader
"
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
foo
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
I64
(
1234
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
bar
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Bool
(
true
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
baz
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Str
(
"
h
llo
y
u
"
)
)
)
;
}
{
let
dst_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
Migrator
:
:
open_and_migrate_safe_mode_to_lmdb
(
root
.
path
(
)
|
builder
|
builder
&
dst_env
)
.
expect
(
"
migrated
"
)
;
}
{
let
dst_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
let
store
=
dst_env
.
open_single
(
"
store
"
StoreOptions
:
:
default
(
)
)
.
expect
(
"
opened
"
)
;
let
reader
=
dst_env
.
read
(
)
.
expect
(
"
reader
"
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
foo
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
I64
(
1234
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
bar
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Bool
(
true
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
baz
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Str
(
"
h
llo
y
u
"
)
)
)
;
}
{
let
mut
safebin
=
root
.
path
(
)
.
to_path_buf
(
)
;
safebin
.
push
(
"
data
.
safe
.
bin
"
)
;
assert
!
(
!
safebin
.
exists
(
)
)
;
}
}
#
[
test
]
fn
test_migrator_round_trip
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_simple_migrator_lmdb_to_safe
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
{
let
src_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
populate_store
!
(
&
src_env
)
;
src_env
.
sync
(
true
)
.
expect
(
"
synced
"
)
;
}
{
let
dst_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
Migrator
:
:
open_and_migrate_lmdb_to_safe_mode
(
root
.
path
(
)
|
builder
|
builder
&
dst_env
)
.
expect
(
"
migrated
"
)
;
}
{
let
dst_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
Migrator
:
:
open_and_migrate_safe_mode_to_lmdb
(
root
.
path
(
)
|
builder
|
builder
&
dst_env
)
.
expect
(
"
migrated
"
)
;
}
{
let
dst_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
let
store
=
dst_env
.
open_single
(
"
store
"
StoreOptions
:
:
default
(
)
)
.
expect
(
"
opened
"
)
;
let
reader
=
dst_env
.
read
(
)
.
expect
(
"
reader
"
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
foo
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
I64
(
1234
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
bar
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Bool
(
true
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
baz
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Str
(
"
h
llo
y
u
"
)
)
)
;
}
{
let
mut
datamdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
let
mut
lockmdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
let
mut
safebin
=
root
.
path
(
)
.
to_path_buf
(
)
;
datamdb
.
push
(
"
data
.
mdb
"
)
;
lockmdb
.
push
(
"
lock
.
mdb
"
)
;
safebin
.
push
(
"
data
.
safe
.
bin
"
)
;
assert
!
(
datamdb
.
exists
(
)
)
;
assert
!
(
lockmdb
.
exists
(
)
)
;
assert
!
(
!
safebin
.
exists
(
)
)
;
}
}
#
[
test
]
fn
test_migrator_no_dir_1
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_migrator_no_dir
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
let
dst_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
Migrator
:
:
easy_migrate_lmdb_to_safe_mode
(
Path
:
:
new
(
"
bogus
"
)
&
dst_env
)
.
expect
(
"
migrated
"
)
;
let
mut
datamdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
let
mut
lockmdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
let
mut
safebin
=
root
.
path
(
)
.
to_path_buf
(
)
;
datamdb
.
push
(
"
data
.
mdb
"
)
;
lockmdb
.
push
(
"
lock
.
mdb
"
)
;
safebin
.
push
(
"
data
.
safe
.
bin
"
)
;
assert
!
(
!
datamdb
.
exists
(
)
)
;
assert
!
(
!
lockmdb
.
exists
(
)
)
;
assert
!
(
!
safebin
.
exists
(
)
)
;
}
#
[
test
]
fn
test_migrator_no_dir_2
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_migrator_no_dir
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
let
dst_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
Migrator
:
:
easy_migrate_safe_mode_to_lmdb
(
Path
:
:
new
(
"
bogus
"
)
&
dst_env
)
.
expect
(
"
migrated
"
)
;
let
mut
datamdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
let
mut
lockmdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
let
mut
safebin
=
root
.
path
(
)
.
to_path_buf
(
)
;
datamdb
.
push
(
"
data
.
mdb
"
)
;
lockmdb
.
push
(
"
lock
.
mdb
"
)
;
safebin
.
push
(
"
data
.
safe
.
bin
"
)
;
assert
!
(
datamdb
.
exists
(
)
)
;
assert
!
(
lockmdb
.
exists
(
)
)
;
assert
!
(
!
safebin
.
exists
(
)
)
;
}
#
[
test
]
fn
test_migrator_invalid_1
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_migrator_invalid
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
let
dbfile
=
root
.
path
(
)
.
join
(
"
data
.
mdb
"
)
;
fs
:
:
write
(
dbfile
"
bogus
"
)
.
expect
(
"
dbfile
created
"
)
;
let
dst_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
Migrator
:
:
easy_migrate_lmdb_to_safe_mode
(
root
.
path
(
)
&
dst_env
)
.
expect
(
"
migrated
"
)
;
let
mut
datamdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
let
mut
lockmdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
let
mut
safebin
=
root
.
path
(
)
.
to_path_buf
(
)
;
datamdb
.
push
(
"
data
.
mdb
"
)
;
lockmdb
.
push
(
"
lock
.
mdb
"
)
;
safebin
.
push
(
"
data
.
safe
.
bin
"
)
;
assert
!
(
datamdb
.
exists
(
)
)
;
assert
!
(
lockmdb
.
exists
(
)
)
;
assert
!
(
!
safebin
.
exists
(
)
)
;
}
#
[
test
]
fn
test_migrator_invalid_2
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_migrator_invalid
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
let
dbfile
=
root
.
path
(
)
.
join
(
"
data
.
safe
.
bin
"
)
;
fs
:
:
write
(
dbfile
"
bogus
"
)
.
expect
(
"
dbfile
created
"
)
;
let
dst_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
Migrator
:
:
easy_migrate_safe_mode_to_lmdb
(
root
.
path
(
)
&
dst_env
)
.
expect
(
"
migrated
"
)
;
let
mut
datamdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
let
mut
lockmdb
=
root
.
path
(
)
.
to_path_buf
(
)
;
let
mut
safebin
=
root
.
path
(
)
.
to_path_buf
(
)
;
datamdb
.
push
(
"
data
.
mdb
"
)
;
lockmdb
.
push
(
"
lock
.
mdb
"
)
;
safebin
.
push
(
"
data
.
safe
.
bin
"
)
;
assert
!
(
datamdb
.
exists
(
)
)
;
assert
!
(
lockmdb
.
exists
(
)
)
;
assert
!
(
safebin
.
exists
(
)
)
;
}
#
[
test
]
#
[
should_panic
(
expected
=
"
migrated
:
SourceEmpty
"
)
]
fn
test_migrator_lmdb_to_safe_1
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_migrate_lmdb_to_safe
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
let
src_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
let
dst_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
Migrator
:
:
migrate_lmdb_to_safe_mode
(
&
src_env
&
dst_env
)
.
expect
(
"
migrated
"
)
;
}
#
[
test
]
#
[
should_panic
(
expected
=
"
migrated
:
DestinationNotEmpty
"
)
]
fn
test_migrator_lmdb_to_safe_2
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_migrate_lmdb_to_safe
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
let
src_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
populate_store
!
(
&
src_env
)
;
let
dst_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
populate_store
!
(
&
dst_env
)
;
Migrator
:
:
migrate_lmdb_to_safe_mode
(
&
src_env
&
dst_env
)
.
expect
(
"
migrated
"
)
;
}
#
[
test
]
fn
test_migrator_lmdb_to_safe_3
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_migrate_lmdb_to_safe
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
let
src_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
populate_store
!
(
&
src_env
)
;
let
dst_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
Migrator
:
:
migrate_lmdb_to_safe_mode
(
&
src_env
&
dst_env
)
.
expect
(
"
migrated
"
)
;
let
store
=
dst_env
.
open_single
(
"
store
"
StoreOptions
:
:
default
(
)
)
.
expect
(
"
opened
"
)
;
let
reader
=
dst_env
.
read
(
)
.
expect
(
"
reader
"
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
foo
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
I64
(
1234
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
bar
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Bool
(
true
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
baz
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Str
(
"
h
llo
y
u
"
)
)
)
;
}
#
[
test
]
#
[
should_panic
(
expected
=
"
migrated
:
SourceEmpty
"
)
]
fn
test_migrator_safe_to_lmdb_1
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_migrate_safe_to_lmdb
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
let
src_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
let
dst_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
Migrator
:
:
migrate_safe_mode_to_lmdb
(
&
src_env
&
dst_env
)
.
expect
(
"
migrated
"
)
;
}
#
[
test
]
#
[
should_panic
(
expected
=
"
migrated
:
DestinationNotEmpty
"
)
]
fn
test_migrator_safe_to_lmdb_2
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_migrate_safe_to_lmdb
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
let
src_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
populate_store
!
(
&
src_env
)
;
let
dst_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
populate_store
!
(
&
dst_env
)
;
Migrator
:
:
migrate_safe_mode_to_lmdb
(
&
src_env
&
dst_env
)
.
expect
(
"
migrated
"
)
;
}
#
[
test
]
fn
test_migrator_safe_to_lmdb_3
(
)
{
let
root
=
Builder
:
:
new
(
)
.
prefix
(
"
test_migrate_safe_to_lmdb
"
)
.
tempdir
(
)
.
expect
(
"
tempdir
"
)
;
fs
:
:
create_dir_all
(
root
.
path
(
)
)
.
expect
(
"
dir
created
"
)
;
let
src_env
=
Rkv
:
:
new
:
:
<
SafeMode
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
populate_store
!
(
&
src_env
)
;
let
dst_env
=
Rkv
:
:
new
:
:
<
Lmdb
>
(
root
.
path
(
)
)
.
expect
(
"
new
succeeded
"
)
;
Migrator
:
:
migrate_safe_mode_to_lmdb
(
&
src_env
&
dst_env
)
.
expect
(
"
migrated
"
)
;
let
store
=
dst_env
.
open_single
(
"
store
"
StoreOptions
:
:
default
(
)
)
.
expect
(
"
opened
"
)
;
let
reader
=
dst_env
.
read
(
)
.
expect
(
"
reader
"
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
foo
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
I64
(
1234
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
bar
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Bool
(
true
)
)
)
;
assert_eq
!
(
store
.
get
(
&
reader
"
baz
"
)
.
expect
(
"
read
"
)
Some
(
Value
:
:
Str
(
"
h
llo
y
u
"
)
)
)
;
}
