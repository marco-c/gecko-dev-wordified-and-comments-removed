#
!
[
doc
(
test
(
no_crate_inject
attr
(
deny
(
warnings
rust_2018_idioms
)
allow
(
dead_code
unused_assignments
unused_variables
)
)
)
)
]
#
!
[
warn
(
missing_docs
missing_debug_implementations
rust_2018_idioms
unreachable_pub
)
]
#
!
[
cfg_attr
(
not
(
feature
=
"
std
"
)
no_std
)
]
#
[
cfg
(
crossbeam_loom
)
]
extern
crate
loom_crate
as
loom
;
use
cfg_if
:
:
cfg_if
;
#
[
cfg
(
crossbeam_loom
)
]
#
[
allow
(
unused_imports
dead_code
)
]
mod
primitive
{
pub
(
crate
)
mod
cell
{
pub
(
crate
)
use
loom
:
:
cell
:
:
UnsafeCell
;
}
pub
(
crate
)
mod
sync
{
pub
(
crate
)
mod
atomic
{
use
core
:
:
sync
:
:
atomic
:
:
Ordering
;
pub
(
crate
)
use
loom
:
:
sync
:
:
atomic
:
:
{
fence
AtomicUsize
}
;
pub
(
crate
)
use
self
:
:
fence
as
compiler_fence
;
}
pub
(
crate
)
use
loom
:
:
sync
:
:
Arc
;
}
pub
(
crate
)
use
loom
:
:
thread_local
;
}
#
[
cfg
(
not
(
crossbeam_no_atomic_cas
)
)
]
#
[
cfg
(
not
(
crossbeam_loom
)
)
]
#
[
allow
(
unused_imports
dead_code
)
]
mod
primitive
{
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
(
crate
)
mod
cell
{
#
[
derive
(
Debug
)
]
#
[
repr
(
transparent
)
]
pub
(
crate
)
struct
UnsafeCell
<
T
>
(
:
:
core
:
:
cell
:
:
UnsafeCell
<
T
>
)
;
impl
<
T
>
UnsafeCell
<
T
>
{
#
[
inline
]
pub
(
crate
)
const
fn
new
(
data
:
T
)
-
>
UnsafeCell
<
T
>
{
UnsafeCell
(
:
:
core
:
:
cell
:
:
UnsafeCell
:
:
new
(
data
)
)
}
#
[
inline
]
pub
(
crate
)
fn
with
<
R
>
(
&
self
f
:
impl
FnOnce
(
*
const
T
)
-
>
R
)
-
>
R
{
f
(
self
.
0
.
get
(
)
)
}
#
[
inline
]
pub
(
crate
)
fn
with_mut
<
R
>
(
&
self
f
:
impl
FnOnce
(
*
mut
T
)
-
>
R
)
-
>
R
{
f
(
self
.
0
.
get
(
)
)
}
}
}
#
[
cfg
(
feature
=
"
alloc
"
)
]
pub
(
crate
)
mod
sync
{
pub
(
crate
)
mod
atomic
{
pub
(
crate
)
use
core
:
:
sync
:
:
atomic
:
:
compiler_fence
;
pub
(
crate
)
use
core
:
:
sync
:
:
atomic
:
:
fence
;
pub
(
crate
)
use
core
:
:
sync
:
:
atomic
:
:
AtomicUsize
;
}
pub
(
crate
)
use
alloc
:
:
sync
:
:
Arc
;
}
#
[
cfg
(
feature
=
"
std
"
)
]
pub
(
crate
)
use
std
:
:
thread_local
;
}
#
[
cfg
(
not
(
crossbeam_no_atomic_cas
)
)
]
cfg_if
!
{
if
#
[
cfg
(
feature
=
"
alloc
"
)
]
{
extern
crate
alloc
;
mod
atomic
;
mod
collector
;
mod
deferred
;
mod
epoch
;
mod
guard
;
mod
internal
;
mod
sync
;
pub
use
self
:
:
atomic
:
:
{
Pointable
Atomic
CompareExchangeError
Owned
Pointer
Shared
}
;
pub
use
self
:
:
collector
:
:
{
Collector
LocalHandle
}
;
pub
use
self
:
:
guard
:
:
{
unprotected
Guard
}
;
#
[
allow
(
deprecated
)
]
pub
use
self
:
:
atomic
:
:
{
CompareAndSetError
CompareAndSetOrdering
}
;
}
}
cfg_if
!
{
if
#
[
cfg
(
feature
=
"
std
"
)
]
{
mod
default
;
pub
use
self
:
:
default
:
:
{
default_collector
is_pinned
pin
}
;
}
}
