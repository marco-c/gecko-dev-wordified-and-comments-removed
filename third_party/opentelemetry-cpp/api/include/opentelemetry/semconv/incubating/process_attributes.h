#
pragma
once
#
include
"
opentelemetry
/
common
/
macros
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
semconv
{
namespace
process
{
static
constexpr
const
char
*
kProcessArgsCount
=
"
process
.
args_count
"
;
static
constexpr
const
char
*
kProcessCommand
=
"
process
.
command
"
;
static
constexpr
const
char
*
kProcessCommandArgs
=
"
process
.
command_args
"
;
static
constexpr
const
char
*
kProcessCommandLine
=
"
process
.
command_line
"
;
static
constexpr
const
char
*
kProcessContextSwitchType
=
"
process
.
context_switch_type
"
;
OPENTELEMETRY_DEPRECATED
static
constexpr
const
char
*
kProcessCpuState
=
"
process
.
cpu
.
state
"
;
static
constexpr
const
char
*
kProcessCreationTime
=
"
process
.
creation
.
time
"
;
static
constexpr
const
char
*
kProcessExecutableBuildIdGnu
=
"
process
.
executable
.
build_id
.
gnu
"
;
static
constexpr
const
char
*
kProcessExecutableBuildIdGo
=
"
process
.
executable
.
build_id
.
go
"
;
static
constexpr
const
char
*
kProcessExecutableBuildIdProfiling
=
"
process
.
executable
.
build_id
.
profiling
"
;
static
constexpr
const
char
*
kProcessExecutableName
=
"
process
.
executable
.
name
"
;
static
constexpr
const
char
*
kProcessExecutablePath
=
"
process
.
executable
.
path
"
;
static
constexpr
const
char
*
kProcessExitCode
=
"
process
.
exit
.
code
"
;
static
constexpr
const
char
*
kProcessExitTime
=
"
process
.
exit
.
time
"
;
static
constexpr
const
char
*
kProcessGroupLeaderPid
=
"
process
.
group_leader
.
pid
"
;
static
constexpr
const
char
*
kProcessInteractive
=
"
process
.
interactive
"
;
static
constexpr
const
char
*
kProcessOwner
=
"
process
.
owner
"
;
static
constexpr
const
char
*
kProcessPagingFaultType
=
"
process
.
paging
.
fault_type
"
;
static
constexpr
const
char
*
kProcessParentPid
=
"
process
.
parent_pid
"
;
static
constexpr
const
char
*
kProcessPid
=
"
process
.
pid
"
;
static
constexpr
const
char
*
kProcessRealUserId
=
"
process
.
real_user
.
id
"
;
static
constexpr
const
char
*
kProcessRealUserName
=
"
process
.
real_user
.
name
"
;
static
constexpr
const
char
*
kProcessRuntimeDescription
=
"
process
.
runtime
.
description
"
;
static
constexpr
const
char
*
kProcessRuntimeName
=
"
process
.
runtime
.
name
"
;
static
constexpr
const
char
*
kProcessRuntimeVersion
=
"
process
.
runtime
.
version
"
;
static
constexpr
const
char
*
kProcessSavedUserId
=
"
process
.
saved_user
.
id
"
;
static
constexpr
const
char
*
kProcessSavedUserName
=
"
process
.
saved_user
.
name
"
;
static
constexpr
const
char
*
kProcessSessionLeaderPid
=
"
process
.
session_leader
.
pid
"
;
static
constexpr
const
char
*
kProcessTitle
=
"
process
.
title
"
;
static
constexpr
const
char
*
kProcessUserId
=
"
process
.
user
.
id
"
;
static
constexpr
const
char
*
kProcessUserName
=
"
process
.
user
.
name
"
;
static
constexpr
const
char
*
kProcessVpid
=
"
process
.
vpid
"
;
static
constexpr
const
char
*
kProcessWorkingDirectory
=
"
process
.
working_directory
"
;
namespace
ProcessContextSwitchTypeValues
{
static
constexpr
const
char
*
kVoluntary
=
"
voluntary
"
;
static
constexpr
const
char
*
kInvoluntary
=
"
involuntary
"
;
}
namespace
ProcessCpuStateValues
{
static
constexpr
const
char
*
kSystem
=
"
system
"
;
static
constexpr
const
char
*
kUser
=
"
user
"
;
static
constexpr
const
char
*
kWait
=
"
wait
"
;
}
namespace
ProcessPagingFaultTypeValues
{
static
constexpr
const
char
*
kMajor
=
"
major
"
;
static
constexpr
const
char
*
kMinor
=
"
minor
"
;
}
}
}
OPENTELEMETRY_END_NAMESPACE
