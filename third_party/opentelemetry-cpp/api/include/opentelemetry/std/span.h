#
pragma
once
#
include
"
opentelemetry
/
version
.
h
"
#
if
defined
__has_include
#
if
__has_include
(
<
version
>
)
#
include
<
version
>
#
if
defined
(
__cpp_lib_span
)
&
&
__cplusplus
>
201703L
#
define
OPENTELEMETRY_HAVE_SPAN
#
endif
#
endif
#
if
!
defined
(
OPENTELEMETRY_HAVE_SPAN
)
#
#
if
defined
(
_MSVC_LANG
)
&
&
_HAS_CXX20
#
define
OPENTELEMETRY_HAVE_SPAN
#
endif
#
#
if
!
defined
(
_MSVC_LANG
)
&
&
__has_include
(
<
span
>
)
&
&
__cplusplus
>
201703L
#
define
OPENTELEMETRY_HAVE_SPAN
#
endif
#
endif
#
if
!
__has_include
(
<
gsl
/
gsl
>
)
#
undef
HAVE_GSL
#
endif
#
endif
#
if
!
defined
(
OPENTELEMETRY_HAVE_SPAN
)
#
if
defined
(
HAVE_GSL
)
#
include
<
type_traits
>
#
include
<
gsl
/
gsl
>
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
nostd
{
using
gsl
:
:
dynamic_extent
;
template
<
class
ElementType
std
:
:
size_t
Extent
=
gsl
:
:
dynamic_extent
>
using
span
=
gsl
:
:
span
<
ElementType
Extent
>
;
}
OPENTELEMETRY_END_NAMESPACE
#
define
OPENTELEMETRY_HAVE_SPAN
#
else
#
endif
#
else
#
include
<
limits
>
#
include
<
span
>
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
nostd
{
constexpr
std
:
:
size_t
dynamic_extent
=
(
std
:
:
numeric_limits
<
std
:
:
size_t
>
:
:
max
)
(
)
;
template
<
class
ElementType
std
:
:
size_t
Extent
=
nostd
:
:
dynamic_extent
>
using
span
=
std
:
:
span
<
ElementType
Extent
>
;
}
OPENTELEMETRY_END_NAMESPACE
#
endif
