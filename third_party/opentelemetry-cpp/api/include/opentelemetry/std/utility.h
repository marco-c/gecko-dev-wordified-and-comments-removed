#
pragma
once
#
include
<
cstddef
>
#
include
<
utility
>
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
nostd
{
template
<
class
C
>
auto
data
(
C
&
c
)
noexcept
(
noexcept
(
c
.
data
(
)
)
)
-
>
decltype
(
c
.
data
(
)
)
{
return
c
.
data
(
)
;
}
template
<
class
C
>
auto
data
(
const
C
&
c
)
noexcept
(
noexcept
(
c
.
data
(
)
)
)
-
>
decltype
(
c
.
data
(
)
)
{
return
c
.
data
(
)
;
}
template
<
class
T
std
:
:
size_t
N
>
T
*
data
(
T
(
&
array
)
[
N
]
)
noexcept
{
return
array
;
}
template
<
class
E
>
const
E
*
data
(
std
:
:
initializer_list
<
E
>
list
)
noexcept
{
return
list
.
begin
(
)
;
}
template
<
class
C
>
auto
size
(
const
C
&
c
)
noexcept
(
noexcept
(
c
.
size
(
)
)
)
-
>
decltype
(
c
.
size
(
)
)
{
return
c
.
size
(
)
;
}
template
<
class
T
std
:
:
size_t
N
>
std
:
:
size_t
size
(
T
(
&
)
[
N
]
)
noexcept
{
return
N
;
}
template
<
std
:
:
size_t
N
>
using
make_index_sequence
=
std
:
:
make_index_sequence
<
N
>
;
template
<
std
:
:
size_t
.
.
.
Ints
>
using
index_sequence
=
std
:
:
index_sequence
<
Ints
.
.
.
>
;
}
OPENTELEMETRY_END_NAMESPACE
