#
pragma
once
#
include
<
stdint
.
h
>
#
include
"
opentelemetry
/
nostd
/
shared_ptr
.
h
"
#
include
"
opentelemetry
/
trace
/
span_id
.
h
"
#
include
"
opentelemetry
/
trace
/
trace_flags
.
h
"
#
include
"
opentelemetry
/
trace
/
trace_id
.
h
"
#
include
"
opentelemetry
/
trace
/
trace_state
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
trace
{
class
SpanContext
final
{
public
:
SpanContext
(
bool
sampled_flag
bool
is_remote
)
noexcept
:
trace_id_
(
)
span_id_
(
)
trace_flags_
(
trace
:
:
TraceFlags
(
static_cast
<
uint8_t
>
(
sampled_flag
)
)
)
is_remote_
(
is_remote
)
trace_state_
(
TraceState
:
:
GetDefault
(
)
)
{
}
SpanContext
(
TraceId
trace_id
SpanId
span_id
TraceFlags
trace_flags
bool
is_remote
nostd
:
:
shared_ptr
<
TraceState
>
trace_state
=
TraceState
:
:
GetDefault
(
)
)
noexcept
:
trace_id_
(
trace_id
)
span_id_
(
span_id
)
trace_flags_
(
trace_flags
)
is_remote_
(
is_remote
)
trace_state_
(
trace_state
)
{
}
SpanContext
(
const
SpanContext
&
ctx
)
=
default
;
bool
IsValid
(
)
const
noexcept
{
return
trace_id_
.
IsValid
(
)
&
&
span_id_
.
IsValid
(
)
;
}
const
trace
:
:
TraceFlags
&
trace_flags
(
)
const
noexcept
{
return
trace_flags_
;
}
const
trace
:
:
TraceId
&
trace_id
(
)
const
noexcept
{
return
trace_id_
;
}
const
trace
:
:
SpanId
&
span_id
(
)
const
noexcept
{
return
span_id_
;
}
const
nostd
:
:
shared_ptr
<
trace
:
:
TraceState
>
trace_state
(
)
const
noexcept
{
return
trace_state_
;
}
bool
operator
=
=
(
const
SpanContext
&
that
)
const
noexcept
{
return
trace_id
(
)
=
=
that
.
trace_id
(
)
&
&
span_id
(
)
=
=
that
.
span_id
(
)
&
&
trace_flags
(
)
=
=
that
.
trace_flags
(
)
;
}
SpanContext
&
operator
=
(
const
SpanContext
&
ctx
)
=
default
;
bool
IsRemote
(
)
const
noexcept
{
return
is_remote_
;
}
static
SpanContext
GetInvalid
(
)
noexcept
{
return
SpanContext
(
false
false
)
;
}
bool
IsSampled
(
)
const
noexcept
{
return
trace_flags_
.
IsSampled
(
)
;
}
private
:
trace
:
:
TraceId
trace_id_
;
trace
:
:
SpanId
span_id_
;
trace
:
:
TraceFlags
trace_flags_
;
bool
is_remote_
;
nostd
:
:
shared_ptr
<
trace
:
:
TraceState
>
trace_state_
;
}
;
}
OPENTELEMETRY_END_NAMESPACE
