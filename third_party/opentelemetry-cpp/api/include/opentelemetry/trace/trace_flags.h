#
pragma
once
#
include
<
cstdint
>
#
include
"
opentelemetry
/
nostd
/
span
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
trace
{
class
TraceFlags
final
{
public
:
static
constexpr
uint8_t
kIsSampled
=
1
;
static
constexpr
uint8_t
kIsRandom
=
2
;
static
constexpr
uint8_t
kAllW3CTraceContext1Flags
=
kIsSampled
;
static
constexpr
uint8_t
kAllW3CTraceContext2Flags
=
kIsSampled
|
kIsRandom
;
TraceFlags
(
)
noexcept
:
rep_
{
0
}
{
}
explicit
TraceFlags
(
uint8_t
flags
)
noexcept
:
rep_
(
flags
)
{
}
bool
IsSampled
(
)
const
noexcept
{
return
rep_
&
kIsSampled
;
}
bool
IsRandom
(
)
const
noexcept
{
return
rep_
&
kIsRandom
;
}
void
ToLowerBase16
(
nostd
:
:
span
<
char
2
>
buffer
)
const
noexcept
{
constexpr
char
kHex
[
]
=
"
0123456789ABCDEF
"
;
buffer
[
0
]
=
kHex
[
(
rep_
>
>
4
)
&
0xF
]
;
buffer
[
1
]
=
kHex
[
(
rep_
>
>
0
)
&
0xF
]
;
}
uint8_t
flags
(
)
const
noexcept
{
return
rep_
;
}
bool
operator
=
=
(
const
TraceFlags
&
that
)
const
noexcept
{
return
rep_
=
=
that
.
rep_
;
}
bool
operator
!
=
(
const
TraceFlags
&
that
)
const
noexcept
{
return
!
(
*
this
=
=
that
)
;
}
void
CopyBytesTo
(
nostd
:
:
span
<
uint8_t
1
>
dest
)
const
noexcept
{
dest
[
0
]
=
rep_
;
}
private
:
uint8_t
rep_
;
}
;
}
OPENTELEMETRY_END_NAMESPACE
