#
pragma
once
#
include
"
opentelemetry
/
common
/
attribute_value
.
h
"
#
include
"
opentelemetry
/
nostd
/
string_view
.
h
"
#
include
"
opentelemetry
/
trace
/
span
.
h
"
#
include
"
opentelemetry
/
trace
/
span_context
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
trace
{
class
DefaultSpan
:
public
Span
{
public
:
static
DefaultSpan
GetInvalid
(
)
{
return
DefaultSpan
(
SpanContext
:
:
GetInvalid
(
)
)
;
}
trace
:
:
SpanContext
GetContext
(
)
const
noexcept
override
{
return
span_context_
;
}
bool
IsRecording
(
)
const
noexcept
override
{
return
false
;
}
void
SetAttribute
(
nostd
:
:
string_view
const
common
:
:
AttributeValue
&
)
noexcept
override
{
}
void
AddEvent
(
nostd
:
:
string_view
)
noexcept
override
{
}
void
AddEvent
(
nostd
:
:
string_view
common
:
:
SystemTimestamp
)
noexcept
override
{
}
void
AddEvent
(
nostd
:
:
string_view
const
common
:
:
KeyValueIterable
&
)
noexcept
override
{
}
void
AddEvent
(
nostd
:
:
string_view
common
:
:
SystemTimestamp
const
common
:
:
KeyValueIterable
&
)
noexcept
override
{
}
#
if
OPENTELEMETRY_ABI_VERSION_NO
>
=
2
void
AddLink
(
const
SpanContext
&
const
common
:
:
KeyValueIterable
&
)
noexcept
override
{
}
void
AddLinks
(
const
SpanContextKeyValueIterable
&
)
noexcept
override
{
}
#
endif
void
SetStatus
(
StatusCode
nostd
:
:
string_view
)
noexcept
override
{
}
void
UpdateName
(
nostd
:
:
string_view
)
noexcept
override
{
}
void
End
(
const
EndSpanOptions
&
)
noexcept
override
{
}
nostd
:
:
string_view
ToString
(
)
const
noexcept
{
return
"
DefaultSpan
"
;
}
DefaultSpan
(
SpanContext
span_context
)
noexcept
:
span_context_
(
std
:
:
move
(
span_context
)
)
{
}
DefaultSpan
(
DefaultSpan
&
&
spn
)
noexcept
:
Span
(
)
span_context_
(
spn
.
GetContext
(
)
)
{
}
DefaultSpan
(
const
DefaultSpan
&
spn
)
noexcept
:
Span
(
)
span_context_
(
spn
.
GetContext
(
)
)
{
}
private
:
SpanContext
span_context_
;
}
;
}
OPENTELEMETRY_END_NAMESPACE
