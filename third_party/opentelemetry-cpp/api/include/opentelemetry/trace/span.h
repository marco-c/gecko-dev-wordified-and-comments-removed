#
pragma
once
#
include
<
cstdint
>
#
include
"
opentelemetry
/
common
/
attribute_value
.
h
"
#
include
"
opentelemetry
/
common
/
key_value_iterable_view
.
h
"
#
include
"
opentelemetry
/
nostd
/
span
.
h
"
#
include
"
opentelemetry
/
nostd
/
string_view
.
h
"
#
include
"
opentelemetry
/
nostd
/
type_traits
.
h
"
#
include
"
opentelemetry
/
trace
/
span_context
.
h
"
#
include
"
opentelemetry
/
trace
/
span_context_kv_iterable
.
h
"
#
include
"
opentelemetry
/
trace
/
span_context_kv_iterable_view
.
h
"
#
include
"
opentelemetry
/
trace
/
span_metadata
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
trace
{
class
Tracer
;
class
Span
{
public
:
Span
(
)
=
default
;
virtual
~
Span
(
)
=
default
;
Span
(
const
Span
&
)
=
delete
;
Span
(
Span
&
&
)
=
delete
;
Span
&
operator
=
(
const
Span
&
)
=
delete
;
Span
&
operator
=
(
Span
&
&
)
=
delete
;
virtual
void
SetAttribute
(
nostd
:
:
string_view
key
const
common
:
:
AttributeValue
&
value
)
noexcept
=
0
;
virtual
void
AddEvent
(
nostd
:
:
string_view
name
)
noexcept
=
0
;
virtual
void
AddEvent
(
nostd
:
:
string_view
name
common
:
:
SystemTimestamp
timestamp
)
noexcept
=
0
;
virtual
void
AddEvent
(
nostd
:
:
string_view
name
common
:
:
SystemTimestamp
timestamp
const
common
:
:
KeyValueIterable
&
attributes
)
noexcept
=
0
;
virtual
void
AddEvent
(
nostd
:
:
string_view
name
const
common
:
:
KeyValueIterable
&
attributes
)
noexcept
{
this
-
>
AddEvent
(
name
std
:
:
chrono
:
:
system_clock
:
:
now
(
)
attributes
)
;
}
template
<
class
T
nostd
:
:
enable_if_t
<
common
:
:
detail
:
:
is_key_value_iterable
<
T
>
:
:
value
>
*
=
nullptr
>
void
AddEvent
(
nostd
:
:
string_view
name
common
:
:
SystemTimestamp
timestamp
const
T
&
attributes
)
noexcept
{
this
-
>
AddEvent
(
name
timestamp
common
:
:
KeyValueIterableView
<
T
>
{
attributes
}
)
;
}
template
<
class
T
nostd
:
:
enable_if_t
<
common
:
:
detail
:
:
is_key_value_iterable
<
T
>
:
:
value
>
*
=
nullptr
>
void
AddEvent
(
nostd
:
:
string_view
name
const
T
&
attributes
)
noexcept
{
this
-
>
AddEvent
(
name
common
:
:
KeyValueIterableView
<
T
>
{
attributes
}
)
;
}
void
AddEvent
(
nostd
:
:
string_view
name
common
:
:
SystemTimestamp
timestamp
std
:
:
initializer_list
<
std
:
:
pair
<
nostd
:
:
string_view
common
:
:
AttributeValue
>
>
attributes
)
noexcept
{
this
-
>
AddEvent
(
name
timestamp
nostd
:
:
span
<
const
std
:
:
pair
<
nostd
:
:
string_view
common
:
:
AttributeValue
>
>
{
attributes
.
begin
(
)
attributes
.
end
(
)
}
)
;
}
void
AddEvent
(
nostd
:
:
string_view
name
std
:
:
initializer_list
<
std
:
:
pair
<
nostd
:
:
string_view
common
:
:
AttributeValue
>
>
attributes
)
noexcept
{
this
-
>
AddEvent
(
name
std
:
:
chrono
:
:
system_clock
:
:
now
(
)
nostd
:
:
span
<
const
std
:
:
pair
<
nostd
:
:
string_view
common
:
:
AttributeValue
>
>
{
attributes
.
begin
(
)
attributes
.
end
(
)
}
)
;
}
#
if
OPENTELEMETRY_ABI_VERSION_NO
>
=
2
virtual
void
AddLink
(
const
SpanContext
&
target
const
common
:
:
KeyValueIterable
&
attrs
)
noexcept
=
0
;
virtual
void
AddLinks
(
const
SpanContextKeyValueIterable
&
links
)
noexcept
=
0
;
template
<
class
U
nostd
:
:
enable_if_t
<
common
:
:
detail
:
:
is_key_value_iterable
<
U
>
:
:
value
>
*
=
nullptr
>
void
AddLink
(
const
SpanContext
&
target
const
U
&
attrs
)
{
common
:
:
KeyValueIterableView
<
U
>
view
(
attrs
)
;
this
-
>
AddLink
(
target
view
)
;
}
void
AddLink
(
const
SpanContext
&
target
std
:
:
initializer_list
<
std
:
:
pair
<
nostd
:
:
string_view
common
:
:
AttributeValue
>
>
attrs
)
{
nostd
:
:
span
<
const
std
:
:
pair
<
nostd
:
:
string_view
common
:
:
AttributeValue
>
>
container
{
attrs
.
begin
(
)
attrs
.
end
(
)
}
;
common
:
:
KeyValueIterableView
<
nostd
:
:
span
<
const
std
:
:
pair
<
nostd
:
:
string_view
common
:
:
AttributeValue
>
>
>
view
(
container
)
;
return
this
-
>
AddLink
(
target
view
)
;
}
template
<
class
U
nostd
:
:
enable_if_t
<
detail
:
:
is_span_context_kv_iterable
<
U
>
:
:
value
>
*
=
nullptr
>
void
AddLinks
(
const
U
&
links
)
{
SpanContextKeyValueIterableView
<
U
>
view
(
links
)
;
this
-
>
AddLinks
(
view
)
;
}
void
AddLinks
(
std
:
:
initializer_list
<
std
:
:
pair
<
SpanContext
std
:
:
initializer_list
<
std
:
:
pair
<
nostd
:
:
string_view
common
:
:
AttributeValue
>
>
>
>
links
)
{
nostd
:
:
span
<
const
std
:
:
pair
<
SpanContext
std
:
:
initializer_list
<
std
:
:
pair
<
nostd
:
:
string_view
common
:
:
AttributeValue
>
>
>
>
container
{
links
.
begin
(
)
links
.
end
(
)
}
;
SpanContextKeyValueIterableView
<
nostd
:
:
span
<
const
std
:
:
pair
<
SpanContext
std
:
:
initializer_list
<
std
:
:
pair
<
nostd
:
:
string_view
common
:
:
AttributeValue
>
>
>
>
>
view
(
container
)
;
return
this
-
>
AddLinks
(
view
)
;
}
#
endif
virtual
void
SetStatus
(
StatusCode
code
nostd
:
:
string_view
description
=
"
"
)
noexcept
=
0
;
virtual
void
UpdateName
(
nostd
:
:
string_view
name
)
noexcept
=
0
;
virtual
void
End
(
const
trace
:
:
EndSpanOptions
&
options
=
{
}
)
noexcept
=
0
;
virtual
trace
:
:
SpanContext
GetContext
(
)
const
noexcept
=
0
;
virtual
bool
IsRecording
(
)
const
noexcept
=
0
;
}
;
}
OPENTELEMETRY_END_NAMESPACE
