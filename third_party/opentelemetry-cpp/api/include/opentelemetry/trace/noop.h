#
pragma
once
#
include
<
stdint
.
h
>
#
include
<
utility
>
#
include
"
opentelemetry
/
common
/
attribute_value
.
h
"
#
include
"
opentelemetry
/
common
/
key_value_iterable
.
h
"
#
include
"
opentelemetry
/
common
/
timestamp
.
h
"
#
include
"
opentelemetry
/
context
/
context_value
.
h
"
#
include
"
opentelemetry
/
nostd
/
shared_ptr
.
h
"
#
include
"
opentelemetry
/
nostd
/
string_view
.
h
"
#
include
"
opentelemetry
/
nostd
/
unique_ptr
.
h
"
#
include
"
opentelemetry
/
trace
/
span
.
h
"
#
include
"
opentelemetry
/
trace
/
span_context
.
h
"
#
include
"
opentelemetry
/
trace
/
span_context_kv_iterable
.
h
"
#
include
"
opentelemetry
/
trace
/
span_metadata
.
h
"
#
include
"
opentelemetry
/
trace
/
span_startoptions
.
h
"
#
include
"
opentelemetry
/
trace
/
tracer
.
h
"
#
include
"
opentelemetry
/
trace
/
tracer_provider
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
namespace
trace_api
=
opentelemetry
:
:
trace
;
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
trace
{
class
OPENTELEMETRY_EXPORT
NoopSpan
final
:
public
Span
{
public
:
explicit
NoopSpan
(
const
std
:
:
shared_ptr
<
Tracer
>
&
tracer
)
noexcept
:
tracer_
{
tracer
}
span_context_
{
new
SpanContext
(
false
false
)
}
{
}
explicit
NoopSpan
(
const
std
:
:
shared_ptr
<
Tracer
>
&
tracer
nostd
:
:
unique_ptr
<
SpanContext
>
span_context
)
noexcept
:
tracer_
{
tracer
}
span_context_
{
std
:
:
move
(
span_context
)
}
{
}
void
SetAttribute
(
nostd
:
:
string_view
const
common
:
:
AttributeValue
&
)
noexcept
override
{
}
void
AddEvent
(
nostd
:
:
string_view
)
noexcept
override
{
}
void
AddEvent
(
nostd
:
:
string_view
common
:
:
SystemTimestamp
)
noexcept
override
{
}
void
AddEvent
(
nostd
:
:
string_view
const
common
:
:
KeyValueIterable
&
)
noexcept
override
{
}
void
AddEvent
(
nostd
:
:
string_view
common
:
:
SystemTimestamp
const
common
:
:
KeyValueIterable
&
)
noexcept
override
{
}
#
if
OPENTELEMETRY_ABI_VERSION_NO
>
=
2
void
AddLink
(
const
SpanContext
&
const
common
:
:
KeyValueIterable
&
)
noexcept
override
{
}
void
AddLinks
(
const
SpanContextKeyValueIterable
&
)
noexcept
override
{
}
#
endif
void
SetStatus
(
StatusCode
nostd
:
:
string_view
)
noexcept
override
{
}
void
UpdateName
(
nostd
:
:
string_view
)
noexcept
override
{
}
void
End
(
const
EndSpanOptions
&
)
noexcept
override
{
}
bool
IsRecording
(
)
const
noexcept
override
{
return
false
;
}
SpanContext
GetContext
(
)
const
noexcept
override
{
return
*
span_context_
.
get
(
)
;
}
private
:
std
:
:
shared_ptr
<
Tracer
>
tracer_
;
nostd
:
:
unique_ptr
<
SpanContext
>
span_context_
;
}
;
class
OPENTELEMETRY_EXPORT
NoopTracer
final
:
public
Tracer
public
std
:
:
enable_shared_from_this
<
NoopTracer
>
{
public
:
nostd
:
:
shared_ptr
<
Span
>
StartSpan
(
nostd
:
:
string_view
const
common
:
:
KeyValueIterable
&
const
SpanContextKeyValueIterable
&
const
StartSpanOptions
&
)
noexcept
override
{
static
nostd
:
:
shared_ptr
<
trace
:
:
Span
>
noop_span
(
new
trace
:
:
NoopSpan
{
this
-
>
shared_from_this
(
)
}
)
;
return
noop_span
;
}
#
if
OPENTELEMETRY_ABI_VERSION_NO
=
=
1
void
ForceFlushWithMicroseconds
(
uint64_t
)
noexcept
override
{
}
void
CloseWithMicroseconds
(
uint64_t
)
noexcept
override
{
}
#
endif
}
;
class
OPENTELEMETRY_EXPORT
NoopTracerProvider
final
:
public
trace
:
:
TracerProvider
{
public
:
NoopTracerProvider
(
)
noexcept
:
tracer_
{
nostd
:
:
shared_ptr
<
trace
:
:
NoopTracer
>
(
new
trace
:
:
NoopTracer
)
}
{
}
#
if
OPENTELEMETRY_ABI_VERSION_NO
>
=
2
nostd
:
:
shared_ptr
<
trace
:
:
Tracer
>
GetTracer
(
nostd
:
:
string_view
nostd
:
:
string_view
nostd
:
:
string_view
const
common
:
:
KeyValueIterable
*
)
noexcept
override
{
return
tracer_
;
}
#
else
nostd
:
:
shared_ptr
<
trace
:
:
Tracer
>
GetTracer
(
nostd
:
:
string_view
nostd
:
:
string_view
nostd
:
:
string_view
)
noexcept
override
{
return
tracer_
;
}
#
endif
private
:
nostd
:
:
shared_ptr
<
trace
:
:
Tracer
>
tracer_
;
}
;
}
OPENTELEMETRY_END_NAMESPACE
