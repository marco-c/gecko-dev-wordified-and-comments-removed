#
pragma
once
#
include
"
opentelemetry
/
common
/
attribute_value
.
h
"
#
include
"
opentelemetry
/
common
/
key_value_iterable_view
.
h
"
#
include
"
opentelemetry
/
nostd
/
function_ref
.
h
"
#
include
"
opentelemetry
/
trace
/
span_context
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
trace
{
class
SpanContextKeyValueIterable
{
public
:
virtual
~
SpanContextKeyValueIterable
(
)
=
default
;
virtual
bool
ForEachKeyValue
(
nostd
:
:
function_ref
<
bool
(
SpanContext
const
common
:
:
KeyValueIterable
&
)
>
callback
)
const
noexcept
=
0
;
virtual
size_t
size
(
)
const
noexcept
=
0
;
}
;
class
NullSpanContext
:
public
SpanContextKeyValueIterable
{
public
:
bool
ForEachKeyValue
(
nostd
:
:
function_ref
<
bool
(
SpanContext
const
common
:
:
KeyValueIterable
&
)
>
)
const
noexcept
override
{
return
true
;
}
size_t
size
(
)
const
noexcept
override
{
return
0
;
}
}
;
}
OPENTELEMETRY_END_NAMESPACE
