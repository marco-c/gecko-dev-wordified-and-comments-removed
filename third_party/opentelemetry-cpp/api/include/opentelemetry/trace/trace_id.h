#
pragma
once
#
include
<
cstdint
>
#
include
<
cstring
>
#
include
"
opentelemetry
/
nostd
/
span
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
trace
{
class
TraceId
final
{
public
:
static
constexpr
int
kSize
=
16
;
TraceId
(
)
noexcept
:
rep_
{
0
}
{
}
explicit
TraceId
(
nostd
:
:
span
<
const
uint8_t
kSize
>
id
)
noexcept
{
memcpy
(
rep_
id
.
data
(
)
kSize
)
;
}
void
ToLowerBase16
(
nostd
:
:
span
<
char
2
*
kSize
>
buffer
)
const
noexcept
{
constexpr
char
kHex
[
]
=
"
0123456789abcdef
"
;
for
(
int
i
=
0
;
i
<
kSize
;
+
+
i
)
{
buffer
[
i
*
2
+
0
]
=
kHex
[
(
rep_
[
i
]
>
>
4
)
&
0xF
]
;
buffer
[
i
*
2
+
1
]
=
kHex
[
(
rep_
[
i
]
>
>
0
)
&
0xF
]
;
}
}
nostd
:
:
span
<
const
uint8_t
kSize
>
Id
(
)
const
noexcept
{
return
nostd
:
:
span
<
const
uint8_t
kSize
>
(
rep_
)
;
}
bool
operator
=
=
(
const
TraceId
&
that
)
const
noexcept
{
return
memcmp
(
rep_
that
.
rep_
kSize
)
=
=
0
;
}
bool
operator
!
=
(
const
TraceId
&
that
)
const
noexcept
{
return
!
(
*
this
=
=
that
)
;
}
bool
IsValid
(
)
const
noexcept
{
return
*
this
!
=
TraceId
(
)
;
}
void
CopyBytesTo
(
nostd
:
:
span
<
uint8_t
kSize
>
dest
)
const
noexcept
{
memcpy
(
dest
.
data
(
)
rep_
kSize
)
;
}
private
:
uint8_t
rep_
[
kSize
]
;
}
;
}
OPENTELEMETRY_END_NAMESPACE
