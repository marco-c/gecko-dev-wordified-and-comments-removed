#
pragma
once
#
if
!
defined
(
OPENTELEMETRY_HAVE_BUILTIN
)
#
ifdef
__has_builtin
#
define
OPENTELEMETRY_HAVE_BUILTIN
(
x
)
__has_builtin
(
x
)
#
else
#
define
OPENTELEMETRY_HAVE_BUILTIN
(
x
)
0
#
endif
#
endif
#
if
!
defined
(
OPENTELEMETRY_HAVE_FEATURE
)
#
ifdef
__has_feature
#
define
OPENTELEMETRY_HAVE_FEATURE
(
f
)
__has_feature
(
f
)
#
else
#
define
OPENTELEMETRY_HAVE_FEATURE
(
f
)
0
#
endif
#
endif
#
if
!
defined
(
OPENTELEMETRY_HAVE_ATTRIBUTE
)
#
ifdef
__has_attribute
#
define
OPENTELEMETRY_HAVE_ATTRIBUTE
(
x
)
__has_attribute
(
x
)
#
else
#
define
OPENTELEMETRY_HAVE_ATTRIBUTE
(
x
)
0
#
endif
#
endif
#
if
!
defined
(
OPENTELEMETRY_HAVE_CPP_ATTRIBUTE
)
#
if
defined
(
__cplusplus
)
&
&
defined
(
__has_cpp_attribute
)
#
define
OPENTELEMETRY_HAVE_CPP_ATTRIBUTE
(
x
)
__has_cpp_attribute
(
x
)
#
else
#
define
OPENTELEMETRY_HAVE_CPP_ATTRIBUTE
(
x
)
0
#
endif
#
endif
#
if
!
defined
(
OPENTELEMETRY_LIKELY_CONDITION
)
&
&
defined
(
__cplusplus
)
#
if
__cplusplus
>
=
202002L
#
if
defined
(
__has_cpp_attribute
)
&
&
(
defined
(
__clang__
)
|
|
!
defined
(
__GNUC__
)
|
|
__GNUC__
>
9
)
#
if
__has_cpp_attribute
(
likely
)
#
define
OPENTELEMETRY_LIKELY_CONDITION
(
C
)
(
C
)
[
[
likely
]
]
#
endif
#
endif
#
endif
#
endif
#
if
!
defined
(
OPENTELEMETRY_LIKELY_CONDITION
)
&
&
(
defined
(
__clang__
)
|
|
defined
(
__GNUC__
)
)
#
define
OPENTELEMETRY_LIKELY_CONDITION
(
C
)
(
__builtin_expect
(
!
!
(
C
)
true
)
)
#
endif
#
ifndef
OPENTELEMETRY_LIKELY_CONDITION
#
define
OPENTELEMETRY_LIKELY_CONDITION
(
C
)
(
C
)
#
endif
#
if
!
defined
(
OPENTELEMETRY_UNLIKELY_CONDITION
)
&
&
defined
(
__cplusplus
)
#
if
__cplusplus
>
=
202002L
#
if
defined
(
__has_cpp_attribute
)
&
&
(
defined
(
__clang__
)
|
|
!
defined
(
__GNUC__
)
|
|
__GNUC__
>
9
)
#
if
__has_cpp_attribute
(
unlikely
)
#
define
OPENTELEMETRY_UNLIKELY_CONDITION
(
C
)
(
C
)
[
[
unlikely
]
]
#
endif
#
endif
#
endif
#
endif
#
if
!
defined
(
OPENTELEMETRY_UNLIKELY_CONDITION
)
&
&
(
defined
(
__clang__
)
|
|
defined
(
__GNUC__
)
)
#
define
OPENTELEMETRY_UNLIKELY_CONDITION
(
C
)
(
__builtin_expect
(
!
!
(
C
)
false
)
)
#
endif
#
ifndef
OPENTELEMETRY_UNLIKELY_CONDITION
#
define
OPENTELEMETRY_UNLIKELY_CONDITION
(
C
)
(
C
)
#
endif
#
if
!
defined
(
OPENTELEMETRY_LIKELY
)
&
&
defined
(
__cplusplus
)
#
if
__cplusplus
>
=
202002L
#
if
defined
(
__has_cpp_attribute
)
&
&
(
defined
(
__clang__
)
|
|
!
defined
(
__GNUC__
)
|
|
__GNUC__
>
9
)
#
if
__has_cpp_attribute
(
likely
)
#
define
OPENTELEMETRY_LIKELY
[
[
likely
]
]
#
endif
#
endif
#
endif
#
endif
#
ifndef
OPENTELEMETRY_LIKELY
#
define
OPENTELEMETRY_LIKELY
#
endif
#
if
!
defined
(
OPENTELEMETRY_UNLIKELY
)
&
&
defined
(
__cplusplus
)
#
if
__cplusplus
>
=
202002L
#
if
defined
(
__has_cpp_attribute
)
&
&
(
defined
(
__clang__
)
|
|
!
defined
(
__GNUC__
)
|
|
__GNUC__
>
9
)
#
if
__has_cpp_attribute
(
unlikely
)
#
define
OPENTELEMETRY_UNLIKELY
[
[
unlikely
]
]
#
endif
#
endif
#
endif
#
endif
#
ifndef
OPENTELEMETRY_UNLIKELY
#
define
OPENTELEMETRY_UNLIKELY
#
endif
#
if
defined
(
__cplusplus
)
&
&
__cplusplus
>
=
201703L
#
define
OPENTELEMETRY_MAYBE_UNUSED
[
[
maybe_unused
]
]
#
elif
defined
(
__clang__
)
#
define
OPENTELEMETRY_MAYBE_UNUSED
__attribute__
(
(
unused
)
)
#
elif
defined
(
__GNUC__
)
&
&
(
(
__GNUC__
>
=
4
)
|
|
(
(
__GNUC__
=
=
3
)
&
&
(
__GNUC_MINOR__
>
=
1
)
)
)
#
define
OPENTELEMETRY_MAYBE_UNUSED
__attribute__
(
(
unused
)
)
#
elif
(
defined
(
_MSC_VER
)
&
&
_MSC_VER
>
=
1910
)
&
&
(
defined
(
_MSVC_LANG
)
&
&
_MSVC_LANG
>
=
201703L
)
#
define
OPENTELEMETRY_MAYBE_UNUSED
[
[
maybe_unused
]
]
#
else
#
define
OPENTELEMETRY_MAYBE_UNUSED
#
endif
#
ifndef
OPENTELEMETRY_RTTI_ENABLED
#
if
defined
(
__clang__
)
#
if
__has_feature
(
cxx_rtti
)
#
define
OPENTELEMETRY_RTTI_ENABLED
#
endif
#
elif
defined
(
__GNUG__
)
#
if
defined
(
__GXX_RTTI
)
#
define
OPENTELEMETRY_RTTI_ENABLED
#
endif
#
elif
defined
(
_MSC_VER
)
#
if
defined
(
_CPPRTTI
)
#
define
OPENTELEMETRY_RTTI_ENABLED
#
endif
#
endif
#
endif
#
if
defined
(
__cplusplus
)
&
&
__cplusplus
>
=
201402L
#
define
OPENTELEMETRY_DEPRECATED
[
[
deprecated
]
]
#
elif
defined
(
__clang__
)
#
define
OPENTELEMETRY_DEPRECATED
__attribute__
(
(
deprecated
)
)
#
elif
defined
(
__GNUC__
)
#
define
OPENTELEMETRY_DEPRECATED
__attribute__
(
(
deprecated
)
)
#
elif
defined
(
_MSC_VER
)
#
if
_MSC_VER
>
=
1910
&
&
defined
(
_MSVC_LANG
)
&
&
_MSVC_LANG
>
=
201703L
#
define
OPENTELEMETRY_DEPRECATED
[
[
deprecated
]
]
#
else
#
define
OPENTELEMETRY_DEPRECATED
__declspec
(
deprecated
)
#
endif
#
else
#
define
OPENTELEMETRY_DEPRECATED
#
endif
#
if
defined
(
__cplusplus
)
&
&
__cplusplus
>
=
201402L
#
define
OPENTELEMETRY_DEPRECATED_MESSAGE
(
msg
)
[
[
deprecated
(
msg
)
]
]
#
elif
defined
(
__clang__
)
#
define
OPENTELEMETRY_DEPRECATED_MESSAGE
(
msg
)
__attribute__
(
(
deprecated
(
msg
)
)
)
#
elif
defined
(
__GNUC__
)
#
define
OPENTELEMETRY_DEPRECATED_MESSAGE
(
msg
)
__attribute__
(
(
deprecated
(
msg
)
)
)
#
elif
defined
(
_MSC_VER
)
#
if
_MSC_VER
>
=
1910
&
&
defined
(
_MSVC_LANG
)
&
&
_MSVC_LANG
>
=
201703L
#
define
OPENTELEMETRY_DEPRECATED_MESSAGE
(
msg
)
[
[
deprecated
(
msg
)
]
]
#
else
#
define
OPENTELEMETRY_DEPRECATED_MESSAGE
(
msg
)
__declspec
(
deprecated
(
msg
)
)
#
endif
#
else
#
define
OPENTELEMETRY_DEPRECATED_MESSAGE
(
msg
)
#
endif
#
if
(
__GNUC__
=
=
4
&
&
(
__GNUC_MINOR__
=
=
8
|
|
__GNUC_MINOR__
=
=
9
)
)
#
define
OPENTELEMETRY_HAVE_WORKING_REGEX
0
#
else
#
define
OPENTELEMETRY_HAVE_WORKING_REGEX
1
#
endif
#
if
defined
(
__clang__
)
#
define
OPENTELEMETRY_API_SINGLETON
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
define
OPENTELEMETRY_LOCAL_SYMBOL
__attribute__
(
(
visibility
(
"
hidden
"
)
)
)
#
elif
defined
(
__GNUC__
)
#
define
OPENTELEMETRY_API_SINGLETON
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
define
OPENTELEMETRY_LOCAL_SYMBOL
__attribute__
(
(
visibility
(
"
hidden
"
)
)
)
#
else
#
define
OPENTELEMETRY_API_SINGLETON
#
define
OPENTELEMETRY_LOCAL_SYMBOL
#
endif
#
if
defined
(
__GNUC__
)
#
define
OPENTELEMETRY_ATOMIC_READ_8
(
ptr
)
__atomic_load_n
(
ptr
__ATOMIC_SEQ_CST
)
#
define
OPENTELEMETRY_ATOMIC_WRITE_8
(
ptr
value
)
__atomic_store_n
(
ptr
value
__ATOMIC_SEQ_CST
)
#
elif
defined
(
_MSC_VER
)
#
include
<
intrin
.
h
>
#
define
OPENTELEMETRY_ATOMIC_READ_8
(
ptr
)
\
static_cast
<
uint8_t
>
(
_InterlockedCompareExchange8
(
reinterpret_cast
<
char
*
>
(
ptr
)
0
0
)
)
#
define
OPENTELEMETRY_ATOMIC_WRITE_8
(
ptr
value
)
\
_InterlockedExchange8
(
reinterpret_cast
<
char
*
>
(
ptr
)
static_cast
<
char
>
(
value
)
)
#
else
#
error
port
atomics
read
/
write
for
the
current
platform
#
endif
#
if
defined
(
_MSC_VER
)
&
&
defined
(
OPENTELEMETRY_BUILD_IMPORT_DLL
)
#
define
OPENTELEMETRY_EXPORT
__declspec
(
dllimport
)
#
elif
defined
(
_MSC_VER
)
&
&
defined
(
OPENTELEMETRY_BUILD_EXPORT_DLL
)
#
define
OPENTELEMETRY_EXPORT
__declspec
(
dllexport
)
#
else
#
define
OPENTELEMETRY_EXPORT
#
endif
#
ifndef
OPENTELEMETRY_HAVE_EXCEPTIONS
#
if
defined
(
__clang__
)
&
&
(
(
__clang_major__
*
100
)
+
__clang_minor__
)
<
306
#
if
defined
(
__EXCEPTIONS
)
&
&
OPENTELEMETRY_HAVE_FEATURE
(
cxx_exceptions
)
#
define
OPENTELEMETRY_HAVE_EXCEPTIONS
1
#
endif
#
elif
OPENTELEMETRY_HAVE_FEATURE
(
cxx_exceptions
)
#
define
OPENTELEMETRY_HAVE_EXCEPTIONS
1
#
elif
!
(
defined
(
__GNUC__
)
&
&
!
defined
(
__EXCEPTIONS
)
&
&
!
defined
(
__cpp_exceptions
)
)
&
&
\
!
(
defined
(
_MSC_VER
)
&
&
!
defined
(
_CPPUNWIND
)
)
#
define
OPENTELEMETRY_HAVE_EXCEPTIONS
1
#
endif
#
endif
#
ifndef
OPENTELEMETRY_HAVE_EXCEPTIONS
#
define
OPENTELEMETRY_HAVE_EXCEPTIONS
0
#
endif
#
ifndef
OPENTELEMETRY_ATTRIBUTE_LIFETIME_BOUND
#
if
OPENTELEMETRY_HAVE_CPP_ATTRIBUTE
(
clang
:
:
lifetimebound
)
#
define
OPENTELEMETRY_ATTRIBUTE_LIFETIME_BOUND
[
[
clang
:
:
lifetimebound
]
]
#
elif
OPENTELEMETRY_HAVE_ATTRIBUTE
(
lifetimebound
)
#
define
OPENTELEMETRY_ATTRIBUTE_LIFETIME_BOUND
__attribute__
(
(
lifetimebound
)
)
#
else
#
define
OPENTELEMETRY_ATTRIBUTE_LIFETIME_BOUND
#
endif
#
endif
#
ifndef
OPENTELEMETRY_HAVE_MEMORY_SANITIZER
#
if
!
defined
(
__native_client__
)
&
&
OPENTELEMETRY_HAVE_FEATURE
(
memory_sanitizer
)
#
define
OPENTELEMETRY_HAVE_MEMORY_SANITIZER
1
#
else
#
define
OPENTELEMETRY_HAVE_MEMORY_SANITIZER
0
#
endif
#
endif
#
if
OPENTELEMETRY_HAVE_MEMORY_SANITIZER
&
&
OPENTELEMETRY_HAVE_ATTRIBUTE
(
no_sanitize_memory
)
#
define
OPENTELEMETRY_SANITIZER_NO_MEMORY
\
__attribute__
(
(
no_sanitize_memory
)
)
/
/
__attribute__
(
(
no_sanitize
(
"
memory
"
)
)
)
#
else
#
define
OPENTELEMETRY_SANITIZER_NO_MEMORY
#
endif
#
ifndef
OPENTELEMETRY_HAVE_THREAD_SANITIZER
#
if
defined
(
__SANITIZE_THREAD__
)
#
define
OPENTELEMETRY_HAVE_THREAD_SANITIZER
1
#
elif
OPENTELEMETRY_HAVE_FEATURE
(
thread_sanitizer
)
#
define
OPENTELEMETRY_HAVE_THREAD_SANITIZER
1
#
else
#
define
OPENTELEMETRY_HAVE_THREAD_SANITIZER
0
#
endif
#
endif
#
if
OPENTELEMETRY_HAVE_THREAD_SANITIZER
&
&
OPENTELEMETRY_HAVE_ATTRIBUTE
(
no_sanitize_thread
)
#
define
OPENTELEMETRY_SANITIZER_NO_THREAD
\
__attribute__
(
(
no_sanitize_thread
)
)
/
/
__attribute__
(
(
no_sanitize
(
"
thread
"
)
)
)
#
else
#
define
OPENTELEMETRY_SANITIZER_NO_THREAD
#
endif
#
ifndef
OPENTELEMETRY_HAVE_ADDRESS_SANITIZER
#
if
defined
(
__SANITIZE_ADDRESS__
)
#
define
OPENTELEMETRY_HAVE_ADDRESS_SANITIZER
1
#
elif
OPENTELEMETRY_HAVE_FEATURE
(
address_sanitizer
)
#
define
OPENTELEMETRY_HAVE_ADDRESS_SANITIZER
1
#
else
#
define
OPENTELEMETRY_HAVE_ADDRESS_SANITIZER
0
#
endif
#
endif
#
ifndef
OPENTELEMETRY_HAVE_HWADDRESS_SANITIZER
#
if
defined
(
__SANITIZE_HWADDRESS__
)
#
define
OPENTELEMETRY_HAVE_HWADDRESS_SANITIZER
1
#
elif
OPENTELEMETRY_HAVE_FEATURE
(
hwaddress_sanitizer
)
#
define
OPENTELEMETRY_HAVE_HWADDRESS_SANITIZER
1
#
else
#
define
OPENTELEMETRY_HAVE_HWADDRESS_SANITIZER
0
#
endif
#
endif
#
if
OPENTELEMETRY_HAVE_ADDRESS_SANITIZER
&
&
OPENTELEMETRY_HAVE_ATTRIBUTE
(
no_sanitize_address
)
#
define
OPENTELEMETRY_SANITIZER_NO_ADDRESS
\
__attribute__
(
(
no_sanitize_address
)
)
/
/
__attribute__
(
(
no_sanitize
(
"
address
"
)
)
)
#
elif
OPENTELEMETRY_HAVE_ADDRESS_SANITIZER
&
&
defined
(
_MSC_VER
)
&
&
_MSC_VER
>
=
1928
#
define
OPENTELEMETRY_SANITIZER_NO_ADDRESS
__declspec
(
no_sanitize_address
)
#
elif
OPENTELEMETRY_HAVE_HWADDRESS_SANITIZER
&
&
OPENTELEMETRY_HAVE_ATTRIBUTE
(
no_sanitize
)
#
define
OPENTELEMETRY_SANITIZER_NO_ADDRESS
__attribute__
(
(
no_sanitize
(
"
hwaddress
"
)
)
)
#
else
#
define
OPENTELEMETRY_SANITIZER_NO_ADDRESS
#
endif
