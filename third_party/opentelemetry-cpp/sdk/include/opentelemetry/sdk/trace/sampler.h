#
pragma
once
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
opentelemetry
/
common
/
attribute_value
.
h
"
#
include
"
opentelemetry
/
nostd
/
shared_ptr
.
h
"
#
include
"
opentelemetry
/
nostd
/
string_view
.
h
"
#
include
"
opentelemetry
/
trace
/
span_metadata
.
h
"
#
include
"
opentelemetry
/
trace
/
trace_id
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
common
{
class
KeyValueIterable
;
}
namespace
trace
{
class
SpanContext
;
class
SpanContextKeyValueIterable
;
class
TraceState
;
}
namespace
sdk
{
namespace
trace
{
enum
class
Decision
{
DROP
RECORD_ONLY
RECORD_AND_SAMPLE
}
;
struct
SamplingResult
{
Decision
decision
;
std
:
:
unique_ptr
<
const
std
:
:
map
<
std
:
:
string
opentelemetry
:
:
common
:
:
AttributeValue
>
>
attributes
;
nostd
:
:
shared_ptr
<
opentelemetry
:
:
trace
:
:
TraceState
>
trace_state
;
inline
bool
IsRecording
(
)
{
return
decision
=
=
Decision
:
:
RECORD_ONLY
|
|
decision
=
=
Decision
:
:
RECORD_AND_SAMPLE
;
}
inline
bool
IsSampled
(
)
{
return
decision
=
=
Decision
:
:
RECORD_AND_SAMPLE
;
}
}
;
class
Sampler
{
public
:
virtual
~
Sampler
(
)
=
default
;
virtual
SamplingResult
ShouldSample
(
const
opentelemetry
:
:
trace
:
:
SpanContext
&
parent_context
opentelemetry
:
:
trace
:
:
TraceId
trace_id
nostd
:
:
string_view
name
opentelemetry
:
:
trace
:
:
SpanKind
span_kind
const
opentelemetry
:
:
common
:
:
KeyValueIterable
&
attributes
const
opentelemetry
:
:
trace
:
:
SpanContextKeyValueIterable
&
links
)
noexcept
=
0
;
virtual
nostd
:
:
string_view
GetDescription
(
)
const
noexcept
=
0
;
}
;
}
}
OPENTELEMETRY_END_NAMESPACE
