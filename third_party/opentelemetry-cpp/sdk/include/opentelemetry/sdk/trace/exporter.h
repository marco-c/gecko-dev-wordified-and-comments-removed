#
pragma
once
#
include
<
chrono
>
#
include
<
memory
>
#
include
"
opentelemetry
/
nostd
/
span
.
h
"
#
include
"
opentelemetry
/
sdk
/
common
/
exporter_utils
.
h
"
#
include
"
opentelemetry
/
sdk
/
trace
/
recordable
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
sdk
{
namespace
trace
{
class
OPENTELEMETRY_EXPORT
SpanExporter
{
public
:
SpanExporter
(
)
;
virtual
~
SpanExporter
(
)
;
virtual
std
:
:
unique_ptr
<
Recordable
>
MakeRecordable
(
)
noexcept
=
0
;
virtual
sdk
:
:
common
:
:
ExportResult
Export
(
const
nostd
:
:
span
<
std
:
:
unique_ptr
<
Recordable
>
>
&
spans
)
noexcept
=
0
;
virtual
bool
ForceFlush
(
std
:
:
chrono
:
:
microseconds
timeout
=
(
std
:
:
chrono
:
:
microseconds
:
:
max
)
(
)
)
noexcept
=
0
;
virtual
bool
Shutdown
(
std
:
:
chrono
:
:
microseconds
timeout
=
(
std
:
:
chrono
:
:
microseconds
:
:
max
)
(
)
)
noexcept
=
0
;
}
;
}
}
OPENTELEMETRY_END_NAMESPACE
