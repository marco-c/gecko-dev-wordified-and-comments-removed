#
pragma
once
#
include
<
chrono
>
#
include
<
mutex
>
#
include
<
vector
>
#
include
"
opentelemetry
/
nostd
/
shared_ptr
.
h
"
#
include
"
opentelemetry
/
nostd
/
string_view
.
h
"
#
include
"
opentelemetry
/
sdk
/
resource
/
resource
.
h
"
#
include
"
opentelemetry
/
sdk
/
trace
/
id_generator
.
h
"
#
include
"
opentelemetry
/
sdk
/
trace
/
processor
.
h
"
#
include
"
opentelemetry
/
sdk
/
trace
/
random_id_generator
.
h
"
#
include
"
opentelemetry
/
sdk
/
trace
/
sampler
.
h
"
#
include
"
opentelemetry
/
sdk
/
trace
/
samplers
/
always_on
.
h
"
#
include
"
opentelemetry
/
sdk
/
trace
/
tracer
.
h
"
#
include
"
opentelemetry
/
sdk
/
trace
/
tracer_context
.
h
"
#
include
"
opentelemetry
/
trace
/
tracer
.
h
"
#
include
"
opentelemetry
/
trace
/
tracer_provider
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
sdk
{
namespace
trace
{
class
OPENTELEMETRY_EXPORT
TracerProvider
final
:
public
opentelemetry
:
:
trace
:
:
TracerProvider
{
public
:
explicit
TracerProvider
(
std
:
:
unique_ptr
<
SpanProcessor
>
processor
const
opentelemetry
:
:
sdk
:
:
resource
:
:
Resource
&
resource
=
opentelemetry
:
:
sdk
:
:
resource
:
:
Resource
:
:
Create
(
{
}
)
std
:
:
unique_ptr
<
Sampler
>
sampler
=
std
:
:
unique_ptr
<
AlwaysOnSampler
>
(
new
AlwaysOnSampler
)
std
:
:
unique_ptr
<
IdGenerator
>
id_generator
=
std
:
:
unique_ptr
<
IdGenerator
>
(
new
RandomIdGenerator
(
)
)
std
:
:
unique_ptr
<
instrumentationscope
:
:
ScopeConfigurator
<
TracerConfig
>
>
tracer_configurator
=
std
:
:
make_unique
<
instrumentationscope
:
:
ScopeConfigurator
<
TracerConfig
>
>
(
instrumentationscope
:
:
ScopeConfigurator
<
TracerConfig
>
:
:
Builder
(
TracerConfig
:
:
Default
(
)
)
.
Build
(
)
)
)
noexcept
;
explicit
TracerProvider
(
std
:
:
vector
<
std
:
:
unique_ptr
<
SpanProcessor
>
>
&
&
processors
const
opentelemetry
:
:
sdk
:
:
resource
:
:
Resource
&
resource
=
opentelemetry
:
:
sdk
:
:
resource
:
:
Resource
:
:
Create
(
{
}
)
std
:
:
unique_ptr
<
Sampler
>
sampler
=
std
:
:
unique_ptr
<
AlwaysOnSampler
>
(
new
AlwaysOnSampler
)
std
:
:
unique_ptr
<
IdGenerator
>
id_generator
=
std
:
:
unique_ptr
<
IdGenerator
>
(
new
RandomIdGenerator
(
)
)
std
:
:
unique_ptr
<
instrumentationscope
:
:
ScopeConfigurator
<
TracerConfig
>
>
tracer_configurator
=
std
:
:
make_unique
<
instrumentationscope
:
:
ScopeConfigurator
<
TracerConfig
>
>
(
instrumentationscope
:
:
ScopeConfigurator
<
TracerConfig
>
:
:
Builder
(
TracerConfig
:
:
Default
(
)
)
.
Build
(
)
)
)
noexcept
;
explicit
TracerProvider
(
std
:
:
unique_ptr
<
TracerContext
>
context
)
noexcept
;
~
TracerProvider
(
)
override
;
using
opentelemetry
:
:
trace
:
:
TracerProvider
:
:
GetTracer
;
#
if
OPENTELEMETRY_ABI_VERSION_NO
>
=
2
opentelemetry
:
:
nostd
:
:
shared_ptr
<
opentelemetry
:
:
trace
:
:
Tracer
>
GetTracer
(
nostd
:
:
string_view
name
nostd
:
:
string_view
version
nostd
:
:
string_view
schema_url
const
opentelemetry
:
:
common
:
:
KeyValueIterable
*
attributes
)
noexcept
override
;
#
else
opentelemetry
:
:
nostd
:
:
shared_ptr
<
opentelemetry
:
:
trace
:
:
Tracer
>
GetTracer
(
nostd
:
:
string_view
name
nostd
:
:
string_view
version
=
"
"
nostd
:
:
string_view
schema_url
=
"
"
)
noexcept
override
;
#
endif
void
AddProcessor
(
std
:
:
unique_ptr
<
SpanProcessor
>
processor
)
noexcept
;
const
opentelemetry
:
:
sdk
:
:
resource
:
:
Resource
&
GetResource
(
)
const
noexcept
;
bool
Shutdown
(
std
:
:
chrono
:
:
microseconds
timeout
=
(
std
:
:
chrono
:
:
microseconds
:
:
max
)
(
)
)
noexcept
;
bool
ForceFlush
(
std
:
:
chrono
:
:
microseconds
timeout
=
(
std
:
:
chrono
:
:
microseconds
:
:
max
)
(
)
)
noexcept
;
private
:
std
:
:
vector
<
std
:
:
shared_ptr
<
Tracer
>
>
tracers_
;
std
:
:
shared_ptr
<
TracerContext
>
context_
;
std
:
:
mutex
lock_
;
}
;
}
}
OPENTELEMETRY_END_NAMESPACE
