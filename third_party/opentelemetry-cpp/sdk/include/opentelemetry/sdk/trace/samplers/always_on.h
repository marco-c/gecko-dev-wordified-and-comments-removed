#
pragma
once
#
include
"
opentelemetry
/
nostd
/
string_view
.
h
"
#
include
"
opentelemetry
/
sdk
/
trace
/
sampler
.
h
"
#
include
"
opentelemetry
/
trace
/
span_context
.
h
"
#
include
"
opentelemetry
/
trace
/
span_metadata
.
h
"
#
include
"
opentelemetry
/
trace
/
trace_id
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
common
{
class
KeyValueIterable
;
}
namespace
trace
{
class
SpanContextKeyValueIterable
;
}
namespace
sdk
{
namespace
trace
{
class
AlwaysOnSampler
:
public
Sampler
{
public
:
inline
SamplingResult
ShouldSample
(
const
opentelemetry
:
:
trace
:
:
SpanContext
&
parent_context
opentelemetry
:
:
trace
:
:
TraceId
nostd
:
:
string_view
opentelemetry
:
:
trace
:
:
SpanKind
const
opentelemetry
:
:
common
:
:
KeyValueIterable
&
const
opentelemetry
:
:
trace
:
:
SpanContextKeyValueIterable
&
)
noexcept
override
{
if
(
!
parent_context
.
IsValid
(
)
)
{
return
{
Decision
:
:
RECORD_AND_SAMPLE
nullptr
opentelemetry
:
:
trace
:
:
TraceState
:
:
GetDefault
(
)
}
;
}
else
{
return
{
Decision
:
:
RECORD_AND_SAMPLE
nullptr
parent_context
.
trace_state
(
)
}
;
}
}
inline
nostd
:
:
string_view
GetDescription
(
)
const
noexcept
override
{
return
"
AlwaysOnSampler
"
;
}
}
;
}
}
OPENTELEMETRY_END_NAMESPACE
