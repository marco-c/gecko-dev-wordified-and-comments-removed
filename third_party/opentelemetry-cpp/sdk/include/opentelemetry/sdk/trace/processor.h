#
pragma
once
#
include
<
chrono
>
#
include
<
memory
>
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
trace
{
class
SpanContext
;
}
namespace
sdk
{
namespace
trace
{
class
Recordable
;
class
OPENTELEMETRY_EXPORT
SpanProcessor
{
public
:
virtual
~
SpanProcessor
(
)
=
default
;
virtual
std
:
:
unique_ptr
<
Recordable
>
MakeRecordable
(
)
noexcept
=
0
;
virtual
void
OnStart
(
Recordable
&
span
const
opentelemetry
:
:
trace
:
:
SpanContext
&
parent_context
)
noexcept
=
0
;
virtual
void
OnEnd
(
std
:
:
unique_ptr
<
Recordable
>
&
&
span
)
noexcept
=
0
;
virtual
bool
ForceFlush
(
std
:
:
chrono
:
:
microseconds
timeout
=
(
std
:
:
chrono
:
:
microseconds
:
:
max
)
(
)
)
noexcept
=
0
;
virtual
bool
Shutdown
(
std
:
:
chrono
:
:
microseconds
timeout
=
(
std
:
:
chrono
:
:
microseconds
:
:
max
)
(
)
)
noexcept
=
0
;
}
;
}
}
OPENTELEMETRY_END_NAMESPACE
