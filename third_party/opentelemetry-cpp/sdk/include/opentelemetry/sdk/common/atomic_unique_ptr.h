#
pragma
once
#
include
<
atomic
>
#
include
<
memory
>
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
sdk
{
namespace
common
{
template
<
class
T
>
class
AtomicUniquePtr
{
public
:
AtomicUniquePtr
(
)
noexcept
{
}
explicit
AtomicUniquePtr
(
std
:
:
unique_ptr
<
T
>
&
&
other
)
noexcept
:
ptr_
(
other
.
release
(
)
)
{
}
~
AtomicUniquePtr
(
)
noexcept
{
Reset
(
)
;
}
T
&
operator
*
(
)
const
noexcept
{
return
*
Get
(
)
;
}
T
*
operator
-
>
(
)
const
noexcept
{
return
Get
(
)
;
}
T
*
Get
(
)
const
noexcept
{
return
ptr_
;
}
bool
IsNull
(
)
const
noexcept
{
return
ptr_
.
load
(
)
=
=
nullptr
;
}
bool
SwapIfNull
(
std
:
:
unique_ptr
<
T
>
&
owner
)
noexcept
{
auto
ptr
=
owner
.
get
(
)
;
T
*
expected
=
nullptr
;
auto
was_successful
=
ptr_
.
compare_exchange_weak
(
expected
ptr
std
:
:
memory_order_release
std
:
:
memory_order_relaxed
)
;
if
(
was_successful
)
{
return
owner
.
release
(
)
!
=
nullptr
;
}
return
false
;
}
void
Swap
(
std
:
:
unique_ptr
<
T
>
&
other
)
noexcept
{
other
.
reset
(
ptr_
.
exchange
(
other
.
release
(
)
)
)
;
}
void
Reset
(
T
*
ptr
=
nullptr
)
noexcept
{
ptr
=
ptr_
.
exchange
(
ptr
)
;
if
(
ptr
!
=
nullptr
)
{
delete
ptr
;
}
}
private
:
std
:
:
atomic
<
T
*
>
ptr_
{
nullptr
}
;
}
;
}
}
OPENTELEMETRY_END_NAMESPACE
