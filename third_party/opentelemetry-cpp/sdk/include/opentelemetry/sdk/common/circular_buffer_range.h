#
pragma
once
#
include
<
stddef
.
h
>
#
include
<
cassert
>
#
include
<
type_traits
>
#
include
"
opentelemetry
/
nostd
/
span
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
sdk
{
namespace
common
{
template
<
class
T
>
class
CircularBufferRange
{
public
:
CircularBufferRange
(
)
noexcept
=
default
;
explicit
CircularBufferRange
(
nostd
:
:
span
<
T
>
first
)
noexcept
:
first_
{
first
}
{
}
CircularBufferRange
(
nostd
:
:
span
<
T
>
first
nostd
:
:
span
<
T
>
second
)
noexcept
:
first_
{
first
}
second_
{
second
}
{
}
operator
CircularBufferRange
<
const
T
>
(
)
const
noexcept
{
return
{
first_
second_
}
;
}
template
<
class
Callback
>
bool
ForEach
(
Callback
callback
)
const
noexcept
(
noexcept
(
std
:
:
declval
<
Callback
>
(
)
(
std
:
:
declval
<
T
&
>
(
)
)
)
)
{
for
(
auto
&
value
:
first_
)
{
if
(
!
callback
(
value
)
)
{
return
false
;
}
}
for
(
auto
&
value
:
second_
)
{
if
(
!
callback
(
value
)
)
{
return
false
;
}
}
return
true
;
}
size_t
size
(
)
const
noexcept
{
return
first_
.
size
(
)
+
second_
.
size
(
)
;
}
bool
empty
(
)
const
noexcept
{
return
first_
.
empty
(
)
;
}
CircularBufferRange
Take
(
size_t
n
)
const
noexcept
{
assert
(
n
<
=
size
(
)
)
;
if
(
first_
.
size
(
)
>
=
n
)
{
return
CircularBufferRange
{
nostd
:
:
span
<
T
>
{
first_
.
data
(
)
n
}
}
;
}
return
{
first_
nostd
:
:
span
<
T
>
{
second_
.
data
(
)
n
-
first_
.
size
(
)
}
}
;
}
private
:
nostd
:
:
span
<
T
>
first_
;
nostd
:
:
span
<
T
>
second_
;
}
;
}
}
OPENTELEMETRY_END_NAMESPACE
