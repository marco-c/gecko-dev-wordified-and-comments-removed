#
pragma
once
#
include
<
array
>
#
include
<
cstdint
>
#
include
<
limits
>
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
sdk
{
namespace
common
{
class
FastRandomNumberGenerator
{
public
:
using
result_type
=
uint64_t
;
FastRandomNumberGenerator
(
)
noexcept
=
default
;
template
<
class
SeedSequence
>
FastRandomNumberGenerator
(
SeedSequence
&
seed_sequence
)
noexcept
{
seed
(
seed_sequence
)
;
}
uint64_t
operator
(
)
(
)
noexcept
{
auto
&
state_a
=
state_
[
0
]
;
auto
&
state_b
=
state_
[
1
]
;
auto
t
=
state_a
;
auto
s
=
state_b
;
state_a
=
s
;
t
^
=
t
<
<
23
;
t
^
=
t
>
>
17
;
t
^
=
s
^
(
s
>
>
26
)
;
state_b
=
t
;
return
t
+
s
;
}
template
<
class
SeedSequence
>
void
seed
(
SeedSequence
&
seed_sequence
)
noexcept
{
seed_sequence
.
generate
(
reinterpret_cast
<
uint32_t
*
>
(
state_
.
data
(
)
)
reinterpret_cast
<
uint32_t
*
>
(
state_
.
data
(
)
+
state_
.
size
(
)
)
)
;
}
static
constexpr
uint64_t
(
min
)
(
)
noexcept
{
return
0
;
}
static
constexpr
uint64_t
(
max
)
(
)
noexcept
{
return
(
std
:
:
numeric_limits
<
uint64_t
>
:
:
max
)
(
)
;
}
private
:
std
:
:
array
<
uint64_t
2
>
state_
{
}
;
}
;
}
}
OPENTELEMETRY_END_NAMESPACE
