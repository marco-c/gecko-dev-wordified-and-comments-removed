#
pragma
once
#
include
"
opentelemetry
/
sdk
/
common
/
circular_buffer
.
h
"
#
include
<
vector
>
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
exporter
{
namespace
memory
{
template
<
typename
T
>
class
InMemoryData
{
public
:
InMemoryData
(
size_t
buffer_size
)
:
data_
(
buffer_size
)
{
}
void
Add
(
std
:
:
unique_ptr
<
T
>
data
)
noexcept
{
data_
.
Add
(
data
)
;
}
std
:
:
vector
<
std
:
:
unique_ptr
<
T
>
>
Get
(
)
noexcept
{
std
:
:
vector
<
std
:
:
unique_ptr
<
T
>
>
res
;
data_
.
Consume
(
data_
.
size
(
)
[
&
]
(
opentelemetry
:
:
sdk
:
:
common
:
:
CircularBufferRange
<
opentelemetry
:
:
sdk
:
:
common
:
:
AtomicUniquePtr
<
T
>
>
range
)
noexcept
{
range
.
ForEach
(
[
&
]
(
opentelemetry
:
:
sdk
:
:
common
:
:
AtomicUniquePtr
<
T
>
&
ptr
)
noexcept
{
std
:
:
unique_ptr
<
T
>
swap_ptr
=
nullptr
;
ptr
.
Swap
(
swap_ptr
)
;
res
.
push_back
(
std
:
:
move
(
swap_ptr
)
)
;
return
true
;
}
)
;
}
)
;
return
res
;
}
private
:
opentelemetry
:
:
sdk
:
:
common
:
:
CircularBuffer
<
T
>
data_
;
}
;
}
}
OPENTELEMETRY_END_NAMESPACE
