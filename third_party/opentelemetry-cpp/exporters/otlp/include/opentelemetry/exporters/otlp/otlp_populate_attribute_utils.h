#
pragma
once
#
include
"
opentelemetry
/
common
/
attribute_value
.
h
"
#
include
"
opentelemetry
/
nostd
/
string_view
.
h
"
#
include
"
opentelemetry
/
sdk
/
common
/
attribute_utils
.
h
"
#
include
"
opentelemetry
/
sdk
/
resource
/
resource
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
namespace
opentelemetry
{
namespace
proto
{
namespace
common
{
namespace
v1
{
class
AnyValue
;
class
KeyValue
;
}
}
namespace
resource
{
namespace
v1
{
class
Resource
;
}
}
}
}
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
exporter
{
namespace
otlp
{
class
OtlpPopulateAttributeUtils
{
public
:
static
void
PopulateAttribute
(
opentelemetry
:
:
proto
:
:
resource
:
:
v1
:
:
Resource
*
proto
const
opentelemetry
:
:
sdk
:
:
resource
:
:
Resource
&
resource
)
noexcept
;
static
void
PopulateAnyValue
(
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
AnyValue
*
proto_value
const
opentelemetry
:
:
common
:
:
AttributeValue
&
value
)
noexcept
;
static
void
PopulateAnyValue
(
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
AnyValue
*
proto_value
const
opentelemetry
:
:
sdk
:
:
common
:
:
OwnedAttributeValue
&
value
)
noexcept
;
static
void
PopulateAttribute
(
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValue
*
attribute
nostd
:
:
string_view
key
const
opentelemetry
:
:
common
:
:
AttributeValue
&
value
)
noexcept
;
static
void
PopulateAttribute
(
opentelemetry
:
:
proto
:
:
common
:
:
v1
:
:
KeyValue
*
attribute
nostd
:
:
string_view
key
const
opentelemetry
:
:
sdk
:
:
common
:
:
OwnedAttributeValue
&
value
)
noexcept
;
}
;
}
}
OPENTELEMETRY_END_NAMESPACE
