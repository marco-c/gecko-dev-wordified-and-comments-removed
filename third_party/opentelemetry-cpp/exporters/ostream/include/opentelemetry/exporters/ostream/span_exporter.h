#
pragma
once
#
include
<
atomic
>
#
include
<
chrono
>
#
include
<
iostream
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
unordered_map
>
#
include
<
vector
>
#
include
"
opentelemetry
/
nostd
/
span
.
h
"
#
include
"
opentelemetry
/
sdk
/
common
/
attribute_utils
.
h
"
#
include
"
opentelemetry
/
sdk
/
common
/
exporter_utils
.
h
"
#
include
"
opentelemetry
/
sdk
/
instrumentationscope
/
instrumentation_scope
.
h
"
#
include
"
opentelemetry
/
sdk
/
resource
/
resource
.
h
"
#
include
"
opentelemetry
/
sdk
/
trace
/
exporter
.
h
"
#
include
"
opentelemetry
/
sdk
/
trace
/
recordable
.
h
"
#
include
"
opentelemetry
/
sdk
/
trace
/
span_data
.
h
"
#
include
"
opentelemetry
/
version
.
h
"
OPENTELEMETRY_BEGIN_NAMESPACE
namespace
exporter
{
namespace
trace
{
class
OStreamSpanExporter
final
:
public
opentelemetry
:
:
sdk
:
:
trace
:
:
SpanExporter
{
public
:
explicit
OStreamSpanExporter
(
std
:
:
ostream
&
sout
=
std
:
:
cout
)
noexcept
;
std
:
:
unique_ptr
<
opentelemetry
:
:
sdk
:
:
trace
:
:
Recordable
>
MakeRecordable
(
)
noexcept
override
;
sdk
:
:
common
:
:
ExportResult
Export
(
const
opentelemetry
:
:
nostd
:
:
span
<
std
:
:
unique_ptr
<
opentelemetry
:
:
sdk
:
:
trace
:
:
Recordable
>
>
&
spans
)
noexcept
override
;
bool
ForceFlush
(
std
:
:
chrono
:
:
microseconds
timeout
=
(
std
:
:
chrono
:
:
microseconds
:
:
max
)
(
)
)
noexcept
override
;
bool
Shutdown
(
std
:
:
chrono
:
:
microseconds
timeout
=
(
std
:
:
chrono
:
:
microseconds
:
:
max
)
(
)
)
noexcept
override
;
private
:
std
:
:
ostream
&
sout_
;
std
:
:
atomic
<
bool
>
is_shutdown_
{
false
}
;
bool
isShutdown
(
)
const
noexcept
;
std
:
:
map
<
int
std
:
:
string
>
statusMap
{
{
0
"
Unset
"
}
{
1
"
Ok
"
}
{
2
"
Error
"
}
}
;
void
printAttributes
(
const
std
:
:
unordered_map
<
std
:
:
string
opentelemetry
:
:
sdk
:
:
common
:
:
OwnedAttributeValue
>
&
map
const
std
:
:
string
&
prefix
=
"
\
n
\
t
"
)
;
void
printEvents
(
const
std
:
:
vector
<
opentelemetry
:
:
sdk
:
:
trace
:
:
SpanDataEvent
>
&
events
)
;
void
printLinks
(
const
std
:
:
vector
<
opentelemetry
:
:
sdk
:
:
trace
:
:
SpanDataLink
>
&
links
)
;
void
printResources
(
const
opentelemetry
:
:
sdk
:
:
resource
:
:
Resource
&
resources
)
;
void
printInstrumentationScope
(
const
opentelemetry
:
:
sdk
:
:
instrumentationscope
:
:
InstrumentationScope
&
instrumentation_scope
)
;
}
;
}
}
OPENTELEMETRY_END_NAMESPACE
